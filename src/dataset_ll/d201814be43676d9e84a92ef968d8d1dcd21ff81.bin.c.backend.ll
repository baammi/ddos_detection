source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_v = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1f00c.5 = global i32 0
@global_var_1f01c.6 = global i32* @global_var_1f00c.5
@global_var_1f17c.12 = global i32 0
@global_var_f108.18 = constant i32 -382906384
@global_var_15cd4.21 = constant [4 x i8] c"GET\00"
@global_var_15cd8.23 = constant i32 47
@global_var_ff00.24 = constant i32 90388
@global_var_135d0.26 = constant i32 -382910448
@global_var_15ccc.28 = constant i32 32
@global_var_15ca4.30 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_15cbc.32 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_15cc8.34 = constant [3 x i8] c"\0D\0A\00"
@global_var_15cdc.36 = constant [9 x i8] c"Cookie: \00"
@global_var_15ce8.38 = constant [3 x i8] c"; \00"
@global_var_15cec.40 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_15cf4.42 = constant i32 59
@global_var_15cf8.44 = constant [5 x i8] c"http\00"
@global_var_15d00.46 = constant [5 x i8] c"url=\00"
@global_var_15d08.48 = constant [5 x i8] c"POST\00"
@global_var_12c64.49 = constant i32 -439275520
@global_var_15d10.51 = constant i32 39
@global_var_16538.53 = constant i32 61
@global_var_14200.54 = constant i32 -481296384
@global_var_1f198.58 = global i32 0
@global_var_a394.59 = constant i32 -352321555
@global_var_d7c8.65 = constant i32 -382906384
@global_var_dcc8.67 = constant i32 -382906384
@global_var_ce04.69 = constant i32 -382906384
@global_var_c688.71 = constant i32 -382906384
@global_var_bec8.73 = constant i32 -382906384
@global_var_b5b8.75 = constant i32 -382906384
@global_var_ae80.77 = constant i32 -382906384
@global_var_a6d8.79 = constant i32 -382906384
@global_var_81cc.81 = constant i32 -382906384
@global_var_1f238.83 = global i32 0
@global_var_1f19c.94 = global i32 0
@global_var_1f23c.98 = local_unnamed_addr global i32 0
@global_var_1f1a0.100 = global i32 0
@global_var_ee5c.102 = constant i32 -382910448
@global_var_1f028.104 = global i32 77556
@global_var_1f244.108 = local_unnamed_addr global i32 0
@global_var_1f243.109 = local_unnamed_addr global i32 0
@global_var_1f242.110 = local_unnamed_addr global i32 0
@global_var_1f020.112 = global i32 -1
@global_var_1f1a4.117 = global i32 0
@global_var_ee44.119 = constant i32 -442556408
@global_var_1f241.122 = local_unnamed_addr global i32 0
@global_var_15d14.126 = constant i32 10
@global_var_1f024.128 = global i32 -1
@global_var_12ef4.132 = constant i32 -382910224
@global_var_15d18.135 = constant i32 16777216
@global_var_1f1ac.137 = global i32 0
@global_var_1f1b8.139 = global i32 0
@global_var_1f1b0.141 = global i32 0
@global_var_1f1b4.143 = global i32 0
@global_var_1f258.153 = global i32 0
@global_var_1f1f0.155 = global i32 0
@global_var_1f1bc.157 = global i32 0
@global_var_1f1e8.159 = global i32 0
@global_var_1f250.167 = global i32 0
@global_var_1f254.169 = global i32 0
@global_var_1f1c3.172 = local_unnamed_addr global i32 0
@global_var_1f1c2.173 = local_unnamed_addr global i32 0
@global_var_1f1d4.175 = global i32 0
@global_var_1f1c8.177 = local_unnamed_addr global i32 0
@global_var_1f1c5.178 = local_unnamed_addr global i32 0
@global_var_1f1d5.179 = local_unnamed_addr global i32 0
@global_var_1f1d7.180 = local_unnamed_addr global i32 0
@global_var_1f1c9.181 = local_unnamed_addr global i32 0
@global_var_1f1c4.182 = local_unnamed_addr global i32 0
@global_var_1f1d6.183 = local_unnamed_addr global i32 0
@global_var_1f1e3.185 = local_unnamed_addr global i32 0
@global_var_1f1e2.186 = local_unnamed_addr global i32 0
@global_var_16094.188 = constant [5 x i8] c"PMMV\00"
@global_var_15cf0.190 = constant i32 0
@global_var_16238.192 = constant [6 x i8] c"CFOKL\00"
@global_var_15d20.194 = constant i32 387006810
@global_var_15d28.196 = constant [6 x i8] c"TKXZT\00"
@global_var_15d30.198 = constant i32 437918234
@global_var_15d38.200 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_15d40.202 = constant [8 x i8] c"FGDCWNV\00"
@global_var_15d48.204 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_15d54.206 = constant i32 370216979
@global_var_15d5c.208 = constant i32 269555223
@global_var_15d64.210 = constant [8 x i8] c"QWRRMPV\00"
@global_var_16170.212 = constant i32 370216979
@global_var_15d6c.214 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_15d78.216 = constant i32 370216979
@global_var_15d80.218 = constant [5 x i8] c"WQGP\00"
@global_var_15d88.220 = constant [5 x i8] c"RCQQ\00"
@global_var_15d90.222 = constant i32 1263486531
@global_var_15ee4.224 = constant i32 320017171
@global_var_15d9c.226 = constant [9 x i8] c"QOACFOKL\00"
@global_var_15da8.228 = constant i32 336860180
@global_var_15db0.230 = constant i32 324292169
@global_var_15db8.232 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_15dc8.234 = constant [7 x i8] c"OGKLQO\00"
@global_var_15dd0.236 = constant [4 x i8] c"@WJ\00"
@global_var_15dd4.238 = constant [7 x i8] c"RW@NKA\00"
@global_var_15ddc.240 = constant [8 x i8] c"QGPTKAG\00"
@global_var_15de4.242 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_15df0.244 = constant [6 x i8] c"EWGQV\00"
@global_var_15df8.246 = constant i32 1263486531
@global_var_15e00.248 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_15e10.250 = constant [5 x i8] c"W@LV\00"
@global_var_15e18.252 = constant i32 324292169
@global_var_15e20.254 = constant i32 390551160
@global_var_15e28.256 = constant i32 387009354
@global_var_15e30.258 = constant [6 x i8] c"HT@XF\00"
@global_var_15e38.260 = constant [5 x i8] c"CLIM\00"
@global_var_15e40.262 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_15e48.264 = constant [9 x i8] c"AJCLEGOG\00"
@global_var_15e54.266 = constant i32 1867011861
@global_var_15e64.268 = constant i32 1867011861
@global_var_15e74.270 = constant [7 x i8] c"Q[QVGO\00"
@global_var_15e7c.272 = constant [5 x i8] c"KIU@\00"
@global_var_15e84.274 = constant [9 x i8] c"FPGCO@MZ\00"
@global_var_15e90.276 = constant [8 x i8] c"PGCNVGI\00"
@global_var_15e98.278 = constant i32 303174162
@global_var_15ea4.280 = constant i32 303174162
@global_var_15eac.282 = constant i32 320017171
@global_var_15eb4.284 = constant i32 1263486531
@global_var_15d4c.286 = constant [5 x i8] c"VGAJ\00"
@global_var_15ec0.288 = constant i32 454761243
@global_var_15ecc.290 = constant [6 x i8] c"oGKLQ\00"
@global_var_15ed4.292 = constant [4 x i8] c"hta\00"
@global_var_15ed8.294 = constant i32 319820054
@global_var_15ee0.296 = constant i32 320017171
@global_var_15eec.298 = constant [7 x i8] c"WVQVCP\00"
@global_var_15ef4.300 = constant [9 x i8] c"XMMOCFQN\00"
@global_var_15f00.302 = constant i32 1263486531
@global_var_15f08.304 = constant i32 303059531
@global_var_15f10.306 = constant i32 303125067
@global_var_15f18.308 = constant i32 303452747
@global_var_15f20.310 = constant [7 x i8] c"@KLVGA\00"
@global_var_15f28.312 = constant [8 x i8] c"VQWLCOK\00"
@global_var_15f30.314 = constant i32 323043395
@global_var_15f38.316 = constant i32 319951888
@global_var_15f40.318 = constant [7 x i8] c"Q[LLGV\00"
@global_var_15f48.320 = constant [9 x i8] c"@C[CLFQN\00"
@global_var_15f54.322 = constant [6 x i8] c"SWQGP\00"
@global_var_1604c.324 = constant i32 1118227
@global_var_15f5c.326 = constant i32 370216979
@global_var_15f64.328 = constant [8 x i8] c"oCLCEGP\00"
@global_var_15f6c.330 = constant [4 x i8] c"CFO\00"
@global_var_15f70.332 = constant [8 x i8] c"OCLCEGP\00"
@global_var_15f78.334 = constant [7 x i8] c"DPKGLF\00"
@global_var_15f80.336 = constant [4 x i8] c"CRA\00"
@global_var_15f84.338 = constant i32 1263421261
@global_var_15f90.340 = constant [5 x i8] c"VKLK\00"
@global_var_15f98.342 = constant [7 x i8] c"CQAGLF\00"
@global_var_15fa0.344 = constant i32 1265504102
@global_var_15fa8.346 = constant [6 x i8] c"FNKLI\00"
@global_var_15fb0.348 = constant [6 x i8] c"NMEKL\00"
@global_var_15fb8.350 = constant i32 1296912387
@global_var_15fc0.352 = constant [9 x i8] c"AC@NGAMO\00"
@global_var_15fcc.354 = constant [7 x i8] c"PMWVGP\00"
@global_var_15fd4.356 = constant [8 x i8] c"LGVMRKC\00"
@global_var_15fdc.358 = constant [7 x i8] c"Q[QCFO\00"
@global_var_15fe4.360 = constant [8 x i8] c"CLKAWQV\00"
@global_var_15fec.362 = constant [6 x i8] c"FG@WE\00"
@global_var_15ff4.364 = constant [10 x i8] c"F\0CG\0C@\0CW\0CE\00"
@global_var_16000.366 = constant [5 x i8] c"GAJM\00"
@global_var_16008.368 = constant [5 x i8] c"FKCE\00"
@global_var_16010.370 = constant [7 x i8] c"QUKVAJ\00"
@global_var_15fe0.372 = constant [3 x i8] c"FO\00"
@global_var_16018.374 = constant [7 x i8] c"VGNLGV\00"
@global_var_16020.376 = constant i32 370216979
@global_var_1602c.378 = constant [5 x i8] c"VMMP\00"
@global_var_16034.380 = constant [7 x i8] c"ACNTKL\00"
@global_var_1603c.382 = constant i32 370216979
@global_var_16048.384 = constant i32 1447906640
@global_var_16050.386 = constant i32 1447512643
@global_var_1605c.388 = constant i32 454302484
@global_var_16064.390 = constant i32 387400530
@global_var_16070.392 = constant i32 319885331
@global_var_16078.394 = constant i32 1986882928
@global_var_16080.396 = constant [7 x i8] c"CNRKLG\00"
@global_var_16088.398 = constant i32 457659992
@global_var_16090.400 = constant i32 303043392
@global_var_1609c.402 = constant [9 x i8] c"rcqqumpf\00"
@global_var_160a8.404 = constant [6 x i8] c"cfokl\00"
@global_var_160b0.406 = constant [8 x i8] c"LGVEGCP\00"
@global_var_160b8.408 = constant i32 303257172
@global_var_160c0.410 = constant [4 x i8] c"K@O\00"
@global_var_160c4.412 = constant [7 x i8] c"T[CVVC\00"
@global_var_160cc.414 = constant [6 x i8] c"cFOKL\00"
@global_var_160d4.416 = constant i32 373380675
@global_var_160dc.418 = constant [7 x i8] c"OKAPMQ\00"
@global_var_160e4.420 = constant [6 x i8] c"QGVWR\00"
@global_var_160ec.422 = constant [8 x i8] c"AMOACQV\00"
@global_var_160f4.424 = constant [4 x i8] c"RMQ\00"
@global_var_160f8.426 = constant [4 x i8] c"UUU\00"
@global_var_160fc.428 = constant i32 303176208
@global_var_16104.430 = constant [5 x i8] c"w`lv\00"
@global_var_1610c.432 = constant [7 x i8] c"LGVOCL\00"
@global_var_16114.433 = constant [6 x i8] c"Cfokl\00"
@global_var_1611c.435 = constant [7 x i8] c"FCGOML\00"
@global_var_16124.437 = constant [5 x i8] c"FGOM\00"
@global_var_1612c.439 = constant [6 x i8] c"CPPKQ\00"
@global_var_16134.441 = constant [8 x i8] c"nKLIQ[Q\00"
@global_var_1613c.443 = constant [7 x i8] c"ANKGLV\00"
@global_var_16144.445 = constant [6 x i8] c"AKQAM\00"
@global_var_1614c.447 = constant [6 x i8] c"akqam\00"
@global_var_16154.449 = constant [6 x i8] c"QWRGP\00"
@global_var_1615c.451 = constant [5 x i8] c"QWPV\00"
@global_var_16164.453 = constant i32 370611221
@global_var_15ef8.455 = constant [5 x i8] c"CFQN\00"
@global_var_1616c.457 = constant i32 1313949251
@global_var_16178.459 = constant [7 x i8] c"RCVPMN\00"
@global_var_16180.461 = constant i32 387007823
@global_var_16188.463 = constant [7 x i8] c"OGPNKL\00"
@global_var_16190.465 = constant [9 x i8] c"LGVCFOKL\00"
@global_var_1619c.467 = constant [9 x i8] c"JGUNRCAI\00"
@global_var_161a8.469 = constant [7 x i8] c"lGVkaQ\00"
@global_var_161b0.471 = constant i32 1179729984
@global_var_161bc.473 = constant [5 x i8] c"lwnn\00"
@global_var_161c4.475 = constant [9 x i8] c"CFOKLVVF\00"
@global_var_161d0.477 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_161dc.479 = constant [9 x i8] c"rNAOqRkR\00"
@global_var_161e8.481 = constant i32 269488144
@global_var_161f4.483 = constant [9 x i8] c"QGAWPKV[\00"
@global_var_16200.485 = constant [9 x i8] c"OMWLVQ[Q\00"
@global_var_1620c.487 = constant [8 x i8] c"OGOMVGA\00"
@global_var_16214.489 = constant i32 1464562030
@global_var_16224.491 = constant i32 2003334929
@global_var_16234.493 = constant [10 x i8] c"OWQGCFOKL\00"
@global_var_16240.495 = constant i32 1196513135
@global_var_1624c.497 = constant [10 x i8] c"QVMPUCVAJ\00"
@global_var_16258.499 = constant [11 x i8] c"QRGAKCNKQV\00"
@global_var_16264.501 = constant [10 x i8] c"CFOKLRNFV\00"
@global_var_16270.503 = constant [10 x i8] c"RNFVCFOKL\00"
@global_var_1627c.505 = constant i32 1279478337
@global_var_16288.507 = constant [13 x i8] c"VGNGAMOCFOKL\00"
@global_var_16298.509 = constant [13 x i8] c"CFOKLVGNGAMO\00"
@global_var_162a8.511 = constant [7 x i8] c"EWGQV\22\00"
@global_var_162b0.513 = constant i32 336675162
@global_var_162b8.515 = constant [9 x i8] c"FGDCWNV\22\00"
@global_var_162c4.517 = constant [8 x i8] c"CLVQNS\22\00"
@global_var_162cc.519 = constant [12 x i8] c"QWRGPTKQMP\22\00"
@global_var_162d8.521 = constant i32 1178819416
@global_var_162e4.523 = constant [6 x i8] c"PMMV\22\00"
@global_var_1f1cc.524 = local_unnamed_addr global i32 0
@global_var_1f1ca.526 = local_unnamed_addr global i32 0
@global_var_1f1cb.527 = local_unnamed_addr global i32 0
@global_var_1f1e4.530 = local_unnamed_addr global i32 0
@global_var_1f1e5.531 = local_unnamed_addr global i32 0
@global_var_162f3.543 = constant i32 2096127
@global_var_162ea.545 = constant i32 2095871
@global_var_1f260.549 = global i32 0
@global_var_1f030.552 = global i32 1043935
@global_var_162f8.557 = constant i32 39228
@global_var_1f268.558 = local_unnamed_addr global i32 0
@global_var_1f26c.559 = local_unnamed_addr global i32 0
@global_var_1f26d.560 = local_unnamed_addr global i32 0
@global_var_162fc.562 = constant i32 55430
@global_var_1f270.563 = local_unnamed_addr global i32 0
@global_var_1f274.564 = local_unnamed_addr global i32 0
@global_var_1f275.565 = local_unnamed_addr global i32 0
@global_var_16300.567 = constant [20 x i8] c"jT^VXYsTZZXOnQ\5CDXO=\00"
@global_var_1f27c.568 = local_unnamed_addr global i32 0
@global_var_1f278.569 = local_unnamed_addr global i32 0
@global_var_1f27d.570 = local_unnamed_addr global i32 0
@global_var_16314.572 = constant i32 1380928786
@global_var_1f280.573 = local_unnamed_addr global i32 0
@global_var_1f284.574 = local_unnamed_addr global i32 0
@global_var_1f285.575 = local_unnamed_addr global i32 0
@global_var_1631c.577 = constant i32 1480939538
@global_var_1f28c.578 = local_unnamed_addr global i32 0
@global_var_1f288.579 = local_unnamed_addr global i32 0
@global_var_1f28d.580 = local_unnamed_addr global i32 0
@global_var_16324.582 = constant i32 1029266194
@global_var_1f294.583 = local_unnamed_addr global i32 0
@global_var_1f290.584 = local_unnamed_addr global i32 0
@global_var_1f295.585 = local_unnamed_addr global i32 0
@global_var_1632c.587 = constant i32 1380928786
@global_var_1f298.588 = local_unnamed_addr global i32 0
@global_var_1f29c.589 = local_unnamed_addr global i32 0
@global_var_1f29d.590 = local_unnamed_addr global i32 0
@global_var_1633c.592 = constant i32 1297895442
@global_var_1f2a0.593 = local_unnamed_addr global i32 0
@global_var_1f2a4.594 = local_unnamed_addr global i32 0
@global_var_1f2a5.595 = local_unnamed_addr global i32 0
@global_var_16344.597 = constant i32 1548307986
@global_var_1f2a8.598 = local_unnamed_addr global i32 0
@global_var_1f2ac.599 = local_unnamed_addr global i32 0
@global_var_1f2ad.600 = local_unnamed_addr global i32 0
@global_var_16350.602 = constant i32 1414749203
@global_var_1f2b0.603 = local_unnamed_addr global i32 0
@global_var_1f2b4.604 = local_unnamed_addr global i32 0
@global_var_1f2b5.605 = local_unnamed_addr global i32 0
@global_var_16358.607 = constant i32 1380928786
@global_var_1f2bc.608 = local_unnamed_addr global i32 0
@global_var_1f2b8.609 = local_unnamed_addr global i32 0
@global_var_1f2bd.610 = local_unnamed_addr global i32 0
@global_var_1636c.612 = constant i32 1380928786
@global_var_1f2c0.613 = local_unnamed_addr global i32 0
@global_var_1f2c4.614 = local_unnamed_addr global i32 0
@global_var_1f2c5.615 = local_unnamed_addr global i32 0
@global_var_1637c.617 = constant i32 1920627327
@global_var_1f2c8.618 = local_unnamed_addr global i32 0
@global_var_1f2cc.619 = local_unnamed_addr global i32 0
@global_var_1f2cd.620 = local_unnamed_addr global i32 0
@global_var_16388.622 = constant i32 1581864978
@global_var_1f2d4.623 = local_unnamed_addr global i32 0
@global_var_1f2d0.624 = local_unnamed_addr global i32 0
@global_var_1f2d5.625 = local_unnamed_addr global i32 0
@global_var_1639c.627 = constant i32 1599867994
@global_var_1f2dc.628 = local_unnamed_addr global i32 0
@global_var_1f2d8.629 = local_unnamed_addr global i32 0
@global_var_1f2dd.630 = local_unnamed_addr global i32 0
@global_var_163b4.632 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_1f2e0.633 = local_unnamed_addr global i32 0
@global_var_1f2e4.634 = local_unnamed_addr global i32 0
@global_var_1f2e5.635 = local_unnamed_addr global i32 0
@global_var_163c0.637 = constant i32 1264081170
@global_var_1f2e8.638 = local_unnamed_addr global i32 0
@global_var_1f2ec.639 = local_unnamed_addr global i32 0
@global_var_1f2ed.640 = local_unnamed_addr global i32 0
@global_var_163d0.642 = constant i32 1264081170
@global_var_1f2f4.643 = local_unnamed_addr global i32 0
@global_var_1f2f0.644 = local_unnamed_addr global i32 0
@global_var_1f2f5.645 = local_unnamed_addr global i32 0
@global_var_163e4.647 = constant i32 1264081170
@global_var_1f2fc.648 = local_unnamed_addr global i32 0
@global_var_1f2f8.649 = local_unnamed_addr global i32 0
@global_var_1f2fd.650 = local_unnamed_addr global i32 0
@global_var_163fc.652 = constant i32 1264081170
@global_var_1f300.653 = local_unnamed_addr global i32 0
@global_var_1f304.654 = local_unnamed_addr global i32 0
@global_var_1f305.655 = local_unnamed_addr global i32 0
@global_var_16418.657 = constant i32 1264081170
@global_var_1f30c.658 = local_unnamed_addr global i32 0
@global_var_1f308.659 = local_unnamed_addr global i32 0
@global_var_1f30d.660 = local_unnamed_addr global i32 0
@global_var_16428.662 = constant [7 x i8] c"NUXQQ=\00"
@global_var_1f310.663 = local_unnamed_addr global i32 0
@global_var_1f314.664 = local_unnamed_addr global i32 0
@global_var_1f315.665 = local_unnamed_addr global i32 0
@global_var_16430.667 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_1f318.668 = local_unnamed_addr global i32 0
@global_var_1f31c.669 = local_unnamed_addr global i32 0
@global_var_1f31d.670 = local_unnamed_addr global i32 0
@global_var_16438.672 = constant [8 x i8] c"NDNIXP=\00"
@global_var_1f320.673 = local_unnamed_addr global i32 0
@global_var_1f324.674 = local_unnamed_addr global i32 0
@global_var_1f325.675 = local_unnamed_addr global i32 0
@global_var_16440.677 = constant [4 x i8] c"NU=\00"
@global_var_1f32c.678 = local_unnamed_addr global i32 0
@global_var_1f328.679 = local_unnamed_addr global i32 0
@global_var_1f32d.680 = local_unnamed_addr global i32 0
@global_var_16444.682 = constant i32 1398038290
@global_var_1f330.683 = local_unnamed_addr global i32 0
@global_var_1f334.684 = local_unnamed_addr global i32 0
@global_var_1f335.685 = local_unnamed_addr global i32 0
@global_var_16460.687 = constant i32 1449022538
@global_var_1f33c.688 = local_unnamed_addr global i32 0
@global_var_1f338.689 = local_unnamed_addr global i32 0
@global_var_1f33d.690 = local_unnamed_addr global i32 0
@global_var_16480.692 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_1f340.693 = local_unnamed_addr global i32 0
@global_var_1f344.694 = local_unnamed_addr global i32 0
@global_var_1f345.695 = local_unnamed_addr global i32 0
@global_var_1f348.696 = local_unnamed_addr global i32 0
@global_var_1f34c.697 = local_unnamed_addr global i32 0
@global_var_1f34d.698 = local_unnamed_addr global i32 0
@global_var_1648c.700 = constant [6 x i8] c"RZTS=\00"
@global_var_1f354.701 = local_unnamed_addr global i32 0
@global_var_1f350.702 = local_unnamed_addr global i32 0
@global_var_1f355.703 = local_unnamed_addr global i32 0
@global_var_16494.705 = constant [7 x i8] c"XSIXO=\00"
@global_var_1f358.706 = local_unnamed_addr global i32 0
@global_var_1f35c.707 = local_unnamed_addr global i32 0
@global_var_1f35d.708 = local_unnamed_addr global i32 0
@global_var_1649c.710 = constant i32 1213361769
@global_var_1f360.711 = local_unnamed_addr global i32 0
@global_var_1f364.712 = local_unnamed_addr global i32 0
@global_var_1f365.713 = local_unnamed_addr global i32 0
@global_var_164b4.715 = constant i32 1581864978
@global_var_1f36c.716 = local_unnamed_addr global i32 0
@global_var_1f368.717 = local_unnamed_addr global i32 0
@global_var_1f36d.718 = local_unnamed_addr global i32 0
@global_var_164c8.720 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_1f370.721 = local_unnamed_addr global i32 0
@global_var_1f374.722 = local_unnamed_addr global i32 0
@global_var_1f375.723 = local_unnamed_addr global i32 0
@global_var_164d4.725 = constant i32 1397969534
@global_var_1f37c.726 = local_unnamed_addr global i32 0
@global_var_1f378.727 = local_unnamed_addr global i32 0
@global_var_1f37d.728 = local_unnamed_addr global i32 0
@global_var_16828.730 = constant i32 1482579580
@global_var_1f384.731 = local_unnamed_addr global i32 0
@global_var_1f380.732 = local_unnamed_addr global i32 0
@global_var_1f385.733 = local_unnamed_addr global i32 0
@global_var_1687c.735 = constant i32 1482579580
@global_var_1f38c.736 = local_unnamed_addr global i32 0
@global_var_1f388.737 = local_unnamed_addr global i32 0
@global_var_1f38d.738 = local_unnamed_addr global i32 0
@global_var_164ec.740 = constant i32 1230197374
@global_var_1f394.741 = local_unnamed_addr global i32 0
@global_var_1f390.742 = local_unnamed_addr global i32 0
@global_var_1f395.743 = local_unnamed_addr global i32 0
@global_var_16520.745 = constant i32 2118735950
@global_var_1f398.746 = local_unnamed_addr global i32 0
@global_var_1f39c.747 = local_unnamed_addr global i32 0
@global_var_1f39d.748 = local_unnamed_addr global i32 0
@global_var_16530.750 = constant i32 1331386447
@global_var_1f3a0.751 = local_unnamed_addr global i32 0
@global_var_1f3a4.752 = local_unnamed_addr global i32 0
@global_var_1f3a5.753 = local_unnamed_addr global i32 0
@global_var_1653c.755 = constant i32 1549685329
@global_var_1f3ac.756 = local_unnamed_addr global i32 0
@global_var_1f3a8.757 = local_unnamed_addr global i32 0
@global_var_1f3ad.758 = local_unnamed_addr global i32 0
@global_var_16548.760 = constant i32 273242190
@global_var_1f3b0.761 = local_unnamed_addr global i32 0
@global_var_1f3b4.762 = local_unnamed_addr global i32 0
@global_var_1f3b5.763 = local_unnamed_addr global i32 0
@global_var_16558.765 = constant i32 1230197342
@global_var_1f3bc.766 = local_unnamed_addr global i32 0
@global_var_1f3b8.767 = local_unnamed_addr global i32 0
@global_var_1f3bd.768 = local_unnamed_addr global i32 0
@global_var_1656c.770 = constant i32 1398558537
@global_var_1f3c4.771 = local_unnamed_addr global i32 0
@global_var_1f3c0.772 = local_unnamed_addr global i32 0
@global_var_1f3c5.773 = local_unnamed_addr global i32 0
@global_var_16580.775 = constant [9 x i8] c"^UHSVXY=\00"
@global_var_1f3c8.776 = local_unnamed_addr global i32 0
@global_var_1f3cc.777 = local_unnamed_addr global i32 0
@global_var_1f3cd.778 = local_unnamed_addr global i32 0
@global_var_164e0.780 = constant i32 1297635414
@global_var_1f3d0.781 = local_unnamed_addr global i32 0
@global_var_1f3d4.782 = local_unnamed_addr global i32 0
@global_var_1f3d5.783 = local_unnamed_addr global i32 0
@global_var_1658c.785 = constant i32 1397969502
@global_var_1f3d8.786 = local_unnamed_addr global i32 0
@global_var_1f3dc.787 = local_unnamed_addr global i32 0
@global_var_1f3dd.788 = local_unnamed_addr global i32 0
@global_var_1659c.790 = constant i32 1263491150
@global_var_1f3e4.791 = local_unnamed_addr global i32 0
@global_var_1f3e0.792 = local_unnamed_addr global i32 0
@global_var_1f3e5.793 = local_unnamed_addr global i32 0
@global_var_165b0.795 = constant i32 1263491150
@global_var_1f3ec.796 = local_unnamed_addr global i32 0
@global_var_1f3e8.797 = local_unnamed_addr global i32 0
@global_var_1f3ed.798 = local_unnamed_addr global i32 0
@global_var_165cc.800 = constant i32 1413960304
@global_var_1f3f0.801 = local_unnamed_addr global i32 0
@global_var_1f3f4.802 = local_unnamed_addr global i32 0
@global_var_1f3f5.803 = local_unnamed_addr global i32 0
@global_var_16640.805 = constant i32 1413960304
@global_var_1f3f8.806 = local_unnamed_addr global i32 0
@global_var_1f3fc.807 = local_unnamed_addr global i32 0
@global_var_1f3fd.808 = local_unnamed_addr global i32 0
@global_var_166b4.810 = constant i32 1413960304
@global_var_1f404.811 = local_unnamed_addr global i32 0
@global_var_1f400.812 = local_unnamed_addr global i32 0
@global_var_1f405.813 = local_unnamed_addr global i32 0
@global_var_16704.815 = constant i32 1413960304
@global_var_1f408.816 = local_unnamed_addr global i32 0
@global_var_1f40c.817 = local_unnamed_addr global i32 0
@global_var_1f40d.818 = local_unnamed_addr global i32 0
@global_var_16778.820 = constant i32 1413960304
@global_var_1f414.821 = local_unnamed_addr global i32 0
@global_var_1f410.822 = local_unnamed_addr global i32 0
@global_var_1f415.823 = local_unnamed_addr global i32 0
@global_var_167ec.825 = constant i32 1264081170
@global_var_1f418.826 = local_unnamed_addr global i32 0
@global_var_1f41c.827 = local_unnamed_addr global i32 0
@global_var_1f41d.828 = local_unnamed_addr global i32 0
@global_var_1f424.829 = local_unnamed_addr global i32 0
@global_var_1f420.830 = local_unnamed_addr global i32 0
@global_var_1f425.831 = local_unnamed_addr global i32 0
@global_var_16804.833 = constant i32 1208552964
@global_var_1f428.834 = local_unnamed_addr global i32 0
@global_var_1f42c.835 = local_unnamed_addr global i32 0
@global_var_1f42d.836 = local_unnamed_addr global i32 0
@global_var_1681c.838 = constant [12 x i8] c"YKOnI\5COIHM=\00"
@global_var_1f435.839 = local_unnamed_addr global i32 0
@global_var_1f430.840 = local_unnamed_addr global i32 0
@global_var_1f434.841 = local_unnamed_addr global i32 0
@global_var_14a3c.844 = constant i32 -476053504
@global_var_13974.848 = constant i32 -443219956
@global_var_13ae0.853 = constant i32 -376111092
@global_var_1f22c.856 = global i32 0
@global_var_13c5c.858 = constant i32 -456978431
@global_var_1f438.860 = global i32 0
@global_var_1f1f4.862 = global i32 0
@global_var_1f130.865 = global i32 256
@global_var_1f034.866 = global i32* @global_var_1f130.865
@global_var_1f21c.869 = global i32 0
@global_var_1f4b8.871 = global i32 0
@global_var_151f0.872 = constant i32 -382910416
@global_var_13be0.873 = constant i32 -509595648
@global_var_14280.880 = constant i32 -442564520
@global_var_1f13c.886 = global i32 0
@global_var_1384c.888 = constant i32 -481230848
@global_var_1f20c.890 = global i32 0
@global_var_14e40.892 = constant i32 -509587456
@global_var_1f154.895 = global i32 0
@global_var_1f210.899 = local_unnamed_addr global i32 0
@global_var_147f4.901 = constant i32 -352321419
@global_var_1f000.905 = global i32 -1
@global_var_1f220.908 = global i32 0
@global_var_1f224.910 = local_unnamed_addr global i32 0
@global_var_14a28.911 = constant i32 -390234096
@global_var_168a0.913 = constant [10 x i8] c"/dev/null\00"
@global_var_1f228.915 = global i32 0
@global_var_1f214.920 = local_unnamed_addr global i32 0
@global_var_1f218.922 = global i32 0
@global_var_13bc0.924 = constant i32 -369097054
@global_var_1f16c = external local_unnamed_addr global i32
@global_var_169ac.930 = constant i32 33554944
@global_var_13b78.935 = constant i32 -442564608
@global_var_14cf0.937 = constant i32 -335544664
@global_var_14e0c.940 = constant i32 -275775369
@global_var_15584.941 = constant i32 -382910352
@global_var_1f234.943 = global i32 0
@global_var_1f174.945 = global i32* @global_var_169ac.930
@global_var_1f4d0.947 = global i32 0
@global_var_1f4d4.949 = global i32 0
@global_var_1f004.952 = global i32 0
@global_var_1f178.3 = external global i8*
@global_var_1f194.56 = external global i8*
@global_var_1f195.63 = global i8 0
@global_var_1f240.106 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1f02c.114 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1f1a8.131 = external global i8*
@global_var_1f1ec.161 = external global i8*
@global_var_1f1ed.162 = local_unnamed_addr global i8 0
@global_var_1f1c0.171 = external global i8*
@global_var_1f1e0.176 = local_unnamed_addr global i8 0
@global_var_1f1e1.184 = local_unnamed_addr global i8 0
@global_var_1f1d8.529 = local_unnamed_addr global i8 0
@global_var_1f1d0.525 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_15c44(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1f178.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1f178.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1f01c.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1f01c.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1f01c.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1f01c.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1f178.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1f01c.6, { 1, 0 }
  uselistorder i8** @global_var_1f178.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 126992 to i32*), align 16
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 126992

bb2:                                              ; preds = %.thread
  ret i32 126992

; uselistorder directives
  uselistorder i32 126992, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_14adc(i32 ptrtoint (i32* @global_var_f108.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 89216, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_14650()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 20, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15cd4.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 19, i32 ptrtoint ([4 x i8]* @global_var_15cd4.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cd8.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 21, i32 ptrtoint (i32* @global_var_15cd8.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a054(i32 %v0_8258, i32* %v4_8260, i32 23, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a054(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_13be0(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_12c3c(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_12c3c(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_12c3c(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_12c3c(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_121d4(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_121d4(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_121d4(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_121d4(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_121d4(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_121d4(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_121d4(i32 45)
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_121d4(i32 46)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_121d4(i32 47)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_121d4(i32 48)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -512
  %v3_8390 = icmp ugt i32 %v0_8390, 511
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 511, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 512
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 512
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 512, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 512, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_121d4(i32 49)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_141a8(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v3_83dc = load i32, i32* @r5, align 4
  %v4_83dc = add i32 %v3_83dc, 4
  %v5_83dc = inttoptr i32 %v4_83dc to i8*
  store i8 0, i8* %v5_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v5_83e4 = call i32 @function_13424(i32 %v0_83e0, i32 %v1_81e4, i32 -1, i32 0)
  store i32 %v5_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v5_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v5_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_12c64(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_12c3c(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_13bd0(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_12c64(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_12c64(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_12c64(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_f8c8()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  %v2_8494 = and i32 %v0_8484, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16777216)
  %v3_8494 = icmp ne i32 %v2_8494, 0
  store i1 %v3_8494, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v4_849c = udiv i32 %v0_8484, 16777216
  %v5_849c = or i32 %v3_848c, %v4_849c
  %v2_84a0 = or i32 %v5_849c, %v5_8494
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_f8c8()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_13358(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_138a0(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_135d0(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_135d0.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_13ebc(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_1350c(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_1350c(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_13e8c(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_13d18(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_137f0(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_138a0(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_9914, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_9934, %dec_label_pc_98fc, %dec_label_pc_9884, %dec_label_pc_965c, %dec_label_pc_88dc, %dec_label_pc_9400
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_13d70(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_135d0(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_12cdc(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_12cdc(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_12c64(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ccc.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_12c64(i8* %v2_8968, i32 ptrtoint (i32* @global_var_15ccc.28 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_12c64(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_15ca4.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_12c64(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_15ca4.30 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_12c3c(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_12c64(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15cbc.32 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_12c64(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_15cbc.32 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_12c64(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_12c64(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32))
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_121d4(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_12c3c(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_120f0(i32 35, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_12c64(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_1211c(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_12c3c(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_12c64(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32))
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_121d4(i32 36)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_12c3c(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_120f0(i32 36, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_12c64(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_1211c(i32 36)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_12c64(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32))
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_121d4(i32 37)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_12c3c(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_120f0(i32 37, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_12c64(i8* %v2_8acc, i32 %v3_8abc)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_1211c(i32 37)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_12c64(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_121d4(i32 38)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_12c3c(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_120f0(i32 38, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_12c64(i8* %v2_8b28, i32 %v3_8b18)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_1211c(i32 38)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_12c64(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_12c3c(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_120f0(i32 43, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_12c64(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_15ccc.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_12c64(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_15ccc.28 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_12c3c(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_12c3c(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_13130(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_12c64(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15cdc.36 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_12c64(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_15cdc.36 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_12c64(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.38 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_12c64(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_15ce8.38 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_12c3c(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_12c64(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_12c64(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_12c64(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_1301c(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_12c3c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_13e2c(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_12cdc(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_13dcc(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15cec.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_12d00(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_15cec.40 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_15cec.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_12d00(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_15cec.40 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_120f0(i32 49, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_12f90(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_120f0(i32 48, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_12f90(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_120f0(i32 47, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_12f90(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_120f0(i32 47, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_12f90(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_12d00(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_12c3c(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_120f0(i32 46, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_12f90(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_120f0(i32 44, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_12f90(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_120f0(i32 44, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_12f90(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_12d00(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_12c3c(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_120f0(i32 45, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_12f90(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_120f0(i32 43, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_12f90(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_120f0(i32 43, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_12f90(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_12d00(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_12d68(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_120f0(i32 42, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_12f90(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_120f0(i32 42, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_12f90(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_12d00(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf4.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_12d00(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_15cf4.42 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf4.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_12d00(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_15cf4.42 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_12c3c(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_130a0(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_12c3c(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_12c64(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_120f0(i32 41, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_12f90(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_120f0(i32 41, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_12f90(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_12d00(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15cf8.44 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_12d00(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_15cf8.44 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_93f0, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_13b78()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_13dcc(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_9578, %dec_label_pc_94ac, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_13bd0(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_94c0
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_13bd0(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_120f0(i32 39, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_12d00(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_12d00(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_12d00(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf4.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_12d00(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_15cf4.42 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf4.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_12d00(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_15cf4.42 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_12d68(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_12c64(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_13b78()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_13dcc(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_135d0(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_9328, %dec_label_pc_934c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_120f0(i32 40, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_12f90(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_120f0(i32 40, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_12f90(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_12d00(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_12c3c(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_15d00.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_12f90(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_15d00.46 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_12c3c(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_15d00.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_12f90(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_15d00.46 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_12d68(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_1482c(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_138a0(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_12c3c(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_15cf8.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_12f90(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_15cf8.44 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15cd4.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_13bc0(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_15cd4.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_135d0(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9774, %dec_label_pc_96a4, %dec_label_pc_9678
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15cec.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_12d00(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_15cec.40 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d08.48 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_1301c(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_15d08.48 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_13dcc(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_135d0(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_13bd0(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_12c3c(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_12c3c(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_12c64.49 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_12c3c(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_12cdc(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_12c3c(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_12c64(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_135d0(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15cd4.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_1301c(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_15cd4.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_120f0(i32 39, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_12d00(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.51 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_12d00(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_15d10.51 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_12cdc(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_12c3c(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_12c3c(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_12c64(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_12c3c(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_12c64(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_12c3c(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_16538.53 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_12c64(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_16538.53 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.51 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_12d00(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_15d10.51 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_12c3c(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_12c64(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_13bd0(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_12c3c(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_12c3c(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_12c64.49 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_12c3c(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_12cdc(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_12c3c(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_12c64(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_12c3c(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_12c3c(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_12c3c(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_12cdc(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_12c3c(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_12c64(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_121d4(i32 54)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 54, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_120f0(i32 54, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_12c64(i8* %v2_9e64, i32 %v3_9e58)
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_1211c(i32 54)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_12c64(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_121d4(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_120f0(i32 50, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_12c64(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_1211c(i32 50)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_121d4(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_120f0(i32 51, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_12c64(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_1211c(i32 51)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 52, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_121d4(i32 52)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 52, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_120f0(i32 52, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_12c64(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 52, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_1211c(i32 52)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 53, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_121d4(i32 53)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 53, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_120f0(i32 53, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_12c64(i8* %v2_9f74, i32 %v3_9f68)
  store i32 53, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_1211c(i32 53)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 3, 2, 5, 8, 9, 7, 6, 4, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 1, 8, 3, 6, 7, 5, 4, 2, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 14, 12, 13, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 7, 5, 8, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 159, 161, 162, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 145, 146, 147, 148, 97, 98, 99, 100, 104, 101, 102, 103, 105, 106, 109, 110, 107, 108, 111, 113, 112, 114, 115, 116, 117, 118, 123, 119, 120, 121, 122, 124, 126, 125, 2, 128, 127, 1, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 163, 144, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 107, 108, 109, 110, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 104, 105, 106, 71, 72, 73, 74, 75, 78, 79, 76, 77, 80, 81, 82, 83, 84, 85, 86, 88, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 40, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 41, 42, 43, 44, 45, 9, 46, 47, 48, 49, 52, 50, 51, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 172, 60, 61, 62, 65, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 157, 158, 159, 160, 161, 162, 163, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 123, 125, 126, 128, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 155, 0 }
  uselistorder i32* %r0.global-to-local, { 16, 15, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 216, 34, 155, 30, 74, 40, 35, 37, 36, 38, 41, 39, 43, 42, 45, 44, 46, 48, 47, 49, 52, 50, 51, 54, 53, 57, 55, 56, 58, 59, 60, 62, 61, 63, 64, 65, 67, 66, 68, 70, 69, 72, 71, 73, 76, 75, 78, 77, 79, 81, 80, 83, 82, 84, 86, 85, 87, 90, 88, 89, 92, 91, 95, 93, 94, 96, 98, 97, 100, 99, 102, 101, 103, 105, 104, 106, 108, 107, 109, 110, 111, 327, 113, 112, 115, 114, 116, 118, 117, 119, 120, 121, 123, 122, 125, 124, 126, 128, 127, 129, 131, 130, 133, 132, 134, 135, 138, 136, 137, 139, 141, 140, 142, 144, 143, 340, 339, 341, 342, 14, 13, 343, 12, 345, 344, 347, 346, 146, 145, 147, 149, 148, 150, 151, 153, 152, 11, 154, 157, 156, 159, 158, 161, 160, 164, 162, 163, 166, 165, 167, 169, 168, 170, 10, 171, 173, 172, 175, 174, 176, 178, 177, 179, 181, 180, 182, 183, 185, 184, 187, 186, 188, 190, 189, 191, 193, 192, 194, 195, 197, 196, 199, 198, 200, 202, 201, 203, 205, 204, 206, 8, 207, 208, 209, 211, 210, 213, 212, 220, 214, 215, 285, 217, 218, 219, 9, 221, 222, 6, 223, 224, 225, 226, 227, 228, 229, 232, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 266, 268, 269, 270, 271, 273, 272, 274, 275, 276, 2, 277, 1, 278, 280, 279, 4, 5, 282, 281, 3, 283, 284, 286, 288, 287, 289, 7, 290, 33, 292, 291, 32, 293, 294, 295, 296, 31, 297, 230, 298, 299, 300, 301, 303, 302, 304, 306, 305, 307, 308, 309, 310, 312, 311, 314, 313, 316, 315, 318, 317, 320, 319, 321, 322, 323, 324, 325, 326, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 30, 31, 9, 10, 11, 12, 13, 14, 15, 16, 29, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0, 28 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 53, 54, 55, 56, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 51, 52, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 37, 36, 4, 5, 6, 7, 38, 39, 24, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 3, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 135, 136, 137, 145, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 53, 54, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 133, 134, 91, 93, 92, 94, 95, 96, 101, 103, 102, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 117, 118, 110, 111, 112, 113, 114, 115, 116, 119, 0, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 129, 130, 131, 138, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 53, 54, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 127, 128, 92, 93, 98, 97, 94, 95, 96, 99, 100, 101, 102, 103, 104, 112, 113, 105, 106, 107, 108, 109, 110, 111, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 132, 133, 134, 141, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 53, 54, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 130, 131, 92, 93, 94, 99, 101, 100, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 115, 116, 108, 109, 110, 111, 112, 113, 114, 117, 0, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 148, 149, 150, 157, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 57, 58, 59, 60, 62, 63, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 145, 146, 147, 99, 100, 105, 107, 106, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 124, 125, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 0, 1, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144 }
  uselistorder i32 ptrtoint (i32* @global_var_15d10.51 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d00.46 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15cf8.44 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15cf4.42 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15cec.40 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15ccc.28 to i32), { 0, 2, 1, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_15cd4.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_9678, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 13, 0, 15, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9fe8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9fe8 = urem i32 %arg1, 256
  %v2_9fec = icmp eq i32 %v1_9fe8, 0
  %v3_9ff0 = load i32, i32* @r4, align 4
  br i1 %v2_9fec, label %dec_label_pc_a038, label %dec_label_pc_9ffc

dec_label_pc_9ffc:                                ; preds = %dec_label_pc_9fe8
  %v0_9ffc = load i32, i32* %r1.global-to-local, align 4
  %v1_9ffc = add i32 %v0_9ffc, 4
  %v2_9ffc = inttoptr i32 %v1_9ffc to i8*
  %v3_9ffc = load i8, i8* %v2_9ffc, align 1
  %v4_9ffc = zext i8 %v3_9ffc to i32
  %v1_a000 = urem i32 %arg3, 256
  %v9_a004 = icmp eq i32 %v4_9ffc, %v1_a000
  br i1 %v9_a004, label %dec_label_pc_a040, label %dec_label_pc_a028.preheader

dec_label_pc_a028.preheader:                      ; preds = %dec_label_pc_9ffc
  br label %dec_label_pc_a028

dec_label_pc_a018:                                ; preds = %dec_label_pc_a028
  %v1_a018 = add i32 %v0_a020.in, 12
  %v2_a018 = inttoptr i32 %v1_a018 to i8*
  %v3_a018 = load i8, i8* %v2_a018, align 1
  %v4_a018 = zext i8 %v3_a018 to i32
  %v9_a01c = icmp eq i32 %v1_a000, %v4_a018
  br i1 %v9_a01c, label %dec_label_pc_a040, label %dec_label_pc_a028

dec_label_pc_a028:                                ; preds = %dec_label_pc_a028.preheader, %dec_label_pc_a018
  %v0_a020.in = phi i32 [ %v0_9ffc, %dec_label_pc_a028.preheader ], [ %v0_a020, %dec_label_pc_a018 ]
  %v0_a028 = phi i32 [ 0, %dec_label_pc_a028.preheader ], [ %v1_a028, %dec_label_pc_a018 ]
  %v0_a020 = add i32 %v0_a020.in, 8
  %v1_a028 = add i32 %v0_a028, 1
  %v9_a02c = icmp eq i32 %v1_9fe8, %v1_a028
  store i32 %v0_a020, i32* %r1.global-to-local, align 4
  br i1 %v9_a02c, label %dec_label_pc_a038, label %dec_label_pc_a018

dec_label_pc_a038:                                ; preds = %dec_label_pc_a028, %dec_label_pc_a040, %dec_label_pc_9fe8
  store i32 %v3_9ff0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a040:                                ; preds = %dec_label_pc_a018, %dec_label_pc_9ffc
  %v0_a040 = phi i32 [ %v0_9ffc, %dec_label_pc_9ffc ], [ %v0_a020, %dec_label_pc_a018 ]
  %v1_a040 = inttoptr i32 %v0_a040 to i32*
  %v2_a040 = load i32, i32* %v1_a040, align 4
  store i32 %v2_a040, i32* @r0, align 4
  %v2_a044 = icmp eq i32 %v2_a040, 0
  br i1 %v2_a044, label %dec_label_pc_a038, label %dec_label_pc_a04c

dec_label_pc_a04c:                                ; preds = %dec_label_pc_a040
  store i32 %v3_9ff0, i32* @r4, align 4
  %v1_a050 = call i32 @function_13c9c(i32 %v2_a040)
  ret i32 %v1_a050

; uselistorder directives
  uselistorder i32 %v1_a028, { 1, 0 }
  uselistorder i32 %v0_a020, { 1, 0, 2 }
  uselistorder i32 %v0_a020.in, { 1, 0 }
  uselistorder i32 %v1_a000, { 1, 0 }
  uselistorder i32 %v0_9ffc, { 1, 0, 2 }
  uselistorder i32 %v3_9ff0, { 1, 0 }
  uselistorder i32 %v1_9fe8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a038, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a028, { 1, 0 }
}

define i32 @function_a054(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a054:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a054 = urem i32 %arg1, 256
  %v2_a058 = icmp eq i32 %v1_a054, 0
  %v3_a05c = load i32, i32* @r4, align 4
  %v6_a05c = load i32, i32* @lr, align 4
  br i1 %v2_a058, label %dec_label_pc_a0a4, label %dec_label_pc_a068

dec_label_pc_a068:                                ; preds = %dec_label_pc_a054
  %v0_a068 = load i32, i32* %r1.global-to-local, align 4
  %v1_a068 = add i32 %v0_a068, 4
  %v2_a068 = inttoptr i32 %v1_a068 to i8*
  %v3_a068 = load i8, i8* %v2_a068, align 1
  %v4_a068 = zext i8 %v3_a068 to i32
  %v1_a06c = urem i32 %arg3, 256
  %v9_a070 = icmp eq i32 %v4_a068, %v1_a06c
  br i1 %v9_a070, label %dec_label_pc_a0ac, label %dec_label_pc_a094.preheader

dec_label_pc_a094.preheader:                      ; preds = %dec_label_pc_a068
  br label %dec_label_pc_a094

dec_label_pc_a084:                                ; preds = %dec_label_pc_a094
  %v1_a084 = add i32 %v0_a08c.in, 12
  %v2_a084 = inttoptr i32 %v1_a084 to i8*
  %v3_a084 = load i8, i8* %v2_a084, align 1
  %v4_a084 = zext i8 %v3_a084 to i32
  %v9_a088 = icmp eq i32 %v1_a06c, %v4_a084
  br i1 %v9_a088, label %dec_label_pc_a0ac, label %dec_label_pc_a094

dec_label_pc_a094:                                ; preds = %dec_label_pc_a094.preheader, %dec_label_pc_a084
  %v0_a08c.in = phi i32 [ %v0_a068, %dec_label_pc_a094.preheader ], [ %v0_a08c, %dec_label_pc_a084 ]
  %v0_a094 = phi i32 [ 0, %dec_label_pc_a094.preheader ], [ %v1_a094, %dec_label_pc_a084 ]
  %v0_a08c = add i32 %v0_a08c.in, 8
  %v1_a094 = add i32 %v0_a094, 1
  store i32 %v1_a094, i32* @lr, align 4
  %v9_a098 = icmp eq i32 %v1_a054, %v1_a094
  store i32 %v0_a08c, i32* %r1.global-to-local, align 4
  br i1 %v9_a098, label %dec_label_pc_a0a4, label %dec_label_pc_a084

dec_label_pc_a0a4:                                ; preds = %dec_label_pc_a094, %dec_label_pc_a0ac, %dec_label_pc_a054
  store i32 %v3_a05c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a084, %dec_label_pc_a068
  %v0_a0ac = phi i32 [ %v0_a068, %dec_label_pc_a068 ], [ %v0_a08c, %dec_label_pc_a084 ]
  %v1_a0ac = inttoptr i32 %v0_a0ac to i32*
  %v2_a0ac = load i32, i32* %v1_a0ac, align 4
  %v2_a0b0 = icmp eq i32 %v2_a0ac, 0
  br i1 %v2_a0b0, label %dec_label_pc_a0a4, label %dec_label_pc_a0b8

dec_label_pc_a0b8:                                ; preds = %dec_label_pc_a0ac
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a05c, i32* @r4, align 4
  store i32 %v6_a05c, i32* @lr, align 4
  %v2_a0c0 = inttoptr i32 %v2_a0ac to i8*
  %v3_a0c0 = call i32 @function_12d68(i8* %v2_a0c0, i32 10)
  ret i32 %v3_a0c0

; uselistorder directives
  uselistorder i32 %v1_a094, { 1, 2, 0 }
  uselistorder i32 %v0_a08c, { 1, 0, 2 }
  uselistorder i32 %v0_a08c.in, { 1, 0 }
  uselistorder i32 %v1_a06c, { 1, 0 }
  uselistorder i32 %v0_a068, { 1, 0, 2 }
  uselistorder i32 %v3_a05c, { 1, 0 }
  uselistorder i32 %v1_a054, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a0a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a094, { 1, 0 }
}

define i32 @function_a0c4(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0c4 = load i32, i32* @r4, align 4
  %v6_a0c4 = load i32, i32* @r5, align 4
  %v9_a0c4 = load i32, i32* @r6, align 4
  %v12_a0c4 = load i32, i32* @r7, align 4
  %v15_a0c4 = load i32, i32* @r8, align 4
  %v18_a0c4 = load i32, i32* @sb, align 4
  %v21_a0c4 = load i32, i32* @sl, align 4
  %v24_a0c4 = load i32, i32* @fp, align 4
  %v27_a0c4 = load i32, i32* @lr, align 4
  %v7_a0c8 = icmp eq i32 %arg2, 3
  store i1 %v7_a0c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0d4, i32* @r4, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_a0e8, label %dec_label_pc_a0dc

dec_label_pc_a0dc:                                ; preds = %dec_label_pc_a0c4
  %v7_a0dc = icmp eq i32 %arg2, 4
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  %v1_a0e0 = inttoptr i32 %v0_a0d4 to i32*
  %v2_a0e0 = load i32, i32* %v1_a0e0, align 4
  store i32 %v2_a0e0, i32* %sl.global-to-local, align 4
  br i1 %v7_a0dc, label %dec_label_pc_a0e8, label %dec_label_pc_a0f0

dec_label_pc_a0e8:                                ; preds = %dec_label_pc_a10c, %.dec_label_pc_a0e8_crit_edge, %dec_label_pc_a0dc, %dec_label_pc_a100, %dec_label_pc_a0f0, %dec_label_pc_a0c4
  %v29_a0ec = phi i32 [ %v29_a0ec.pre, %.dec_label_pc_a0e8_crit_edge ], [ %v0_a0d4, %dec_label_pc_a10c ], [ %v0_a0d4, %dec_label_pc_a0dc ], [ %v0_a0d4, %dec_label_pc_a100 ], [ %v0_a0d4, %dec_label_pc_a0f0 ], [ %v0_a0d4, %dec_label_pc_a0c4 ]
  store i32 %v3_a0c4, i32* %r4.global-to-local, align 4
  store i32 %v9_a0c4, i32* @r6, align 4
  store i32 %v12_a0c4, i32* @r7, align 4
  store i32 %v18_a0c4, i32* @sb, align 4
  store i32 %v21_a0c4, i32* @sl, align 4
  store i32 %v24_a0c4, i32* @fp, align 4
  ret i32 %v29_a0ec

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0dc
  %v7_a0f0 = icmp eq i32 %arg2, 5
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = add i32 %v0_a0d4, 4
  %v2_a0f4 = inttoptr i32 %v1_a0f4 to i8*
  %v3_a0f4 = load i8, i8* %v2_a0f4, align 1
  %v4_a0f4 = zext i8 %v3_a0f4 to i32
  store i32 %v4_a0f4, i32* %r1.global-to-local, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0e8, label %dec_label_pc_a100

dec_label_pc_a100:                                ; preds = %dec_label_pc_a0f0
  %v1_a100 = add i32 %v0_a0d4, 5
  %v2_a100 = inttoptr i32 %v1_a100 to i8*
  %v3_a100 = load i8, i8* %v2_a100, align 1
  %v4_a100 = zext i8 %v3_a100 to i32
  store i32 %v4_a100, i32* @r8, align 4
  %v2_a104 = icmp eq i8 %v3_a100, 0
  store i1 %v2_a104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a104, label %dec_label_pc_a0e8, label %dec_label_pc_a10c

dec_label_pc_a10c:                                ; preds = %dec_label_pc_a100
  %v3_a10c = mul nuw nsw i32 %v4_a100, 4
  store i32 %v3_a10c, i32* %sb.global-to-local, align 4
  %v1_a110 = add i32 %arg2, -6
  store i32 %v1_a110, i32* @r6, align 4
  %v2_a114 = mul nuw nsw i32 %v4_a100, 5
  store i32 %v2_a114, i32* @r7, align 4
  %v3_a118 = icmp ult i32 %v1_a110, %v2_a114
  %v9_a118 = icmp eq i32 %v1_a110, %v2_a114
  store i1 %v9_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a118, label %dec_label_pc_a0e8, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a10c
  store i32 %v4_a100, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a128 = call i32 @function_141a8(i32 %v4_a100, i32 24)
  store i32 %v2_a128, i32* %r0.global-to-local, align 4
  %v0_a12c = load i32, i32* @r8, align 4
  %v2_a12c = icmp eq i32 %v0_a12c, 0
  store i1 %v2_a12c, i1* %cpsr_z.global-to-local, align 1
  %v0_a134 = load i32, i32* @r4, align 4
  %v1_a134 = add i32 %v0_a134, 6
  store i32 %v1_a134, i32* %fp.global-to-local, align 4
  %tmp36 = icmp slt i32 %v0_a12c, 1
  br i1 %tmp36, label %dec_label_pc_a18cthread-pre-split, label %dec_label_pc_a13c

dec_label_pc_a13c:                                ; preds = %dec_label_pc_a120
  store i32 %v2_a128, i32* %r1.global-to-local, align 4
  %v1_a140 = load i32, i32* @r7, align 4
  %v2_a140 = add i32 %v1_a140, %v0_a134
  store i32 %v2_a140, i32* @ip, align 4
  store i32 %v0_a134, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a150.dec_label_pc_a150_crit_edge, %dec_label_pc_a13c
  %v2_a160 = phi i32 [ %v1_a174, %dec_label_pc_a150.dec_label_pc_a150_crit_edge ], [ %v2_a128, %dec_label_pc_a13c ]
  %v0_a15c = phi i32 [ %v0_a15c.pre, %dec_label_pc_a150.dec_label_pc_a150_crit_edge ], [ %v2_a140, %dec_label_pc_a13c ]
  %v0_a158 = phi i32 [ %v0_a150.pre, %dec_label_pc_a150.dec_label_pc_a150_crit_edge ], [ %v0_a134, %dec_label_pc_a13c ]
  %v1_a150 = add i32 %v0_a158, 10
  %v2_a150 = inttoptr i32 %v1_a150 to i8*
  %v3_a150 = load i8, i8* %v2_a150, align 1
  %v1_a154 = add i32 %v0_a158, 6
  %v2_a154 = inttoptr i32 %v1_a154 to i32*
  %v3_a154 = load i32, i32* %v2_a154, align 4
  store i32 %v3_a154, i32* @r2, align 4
  %v1_a158 = add i32 %v0_a158, 5
  store i32 %v1_a158, i32* %r0.global-to-local, align 4
  %v9_a15c = icmp eq i32 %v0_a15c, %v1_a158
  store i1 %v9_a15c, i1* %cpsr_z.global-to-local, align 1
  %v3_a160 = add i32 %v2_a160, 20
  %v4_a160 = inttoptr i32 %v3_a160 to i8*
  store i8 %v3_a150, i8* %v4_a160, align 1
  %v0_a164 = load i32, i32* @r2, align 4
  %v1_a164 = load i32, i32* %r1.global-to-local, align 4
  %v2_a164 = add i32 %v1_a164, 4
  %v3_a164 = inttoptr i32 %v2_a164 to i32*
  store i32 %v0_a164, i32* %v3_a164, align 4
  %v0_a168 = load i32, i32* @r2, align 4
  %v1_a168 = load i32, i32* %r1.global-to-local, align 4
  %v2_a168 = add i32 %v1_a168, 16
  %v3_a168 = inttoptr i32 %v2_a168 to i32*
  store i32 %v0_a168, i32* %v3_a168, align 4
  %v0_a16c = load i32, i32* @r4, align 4
  %v1_a16c = trunc i32 %v0_a16c to i8
  %v2_a16c = load i32, i32* %r1.global-to-local, align 4
  %v3_a16c = inttoptr i32 %v2_a16c to i8*
  store i8 %v1_a16c, i8* %v3_a16c, align 1
  %v0_a170 = load i32, i32* @lr, align 4
  %v1_a170 = trunc i32 %v0_a170 to i8
  %v2_a170 = load i32, i32* %r1.global-to-local, align 4
  %v3_a170 = add i32 %v2_a170, 1
  %v4_a170 = inttoptr i32 %v3_a170 to i8*
  store i8 %v1_a170, i8* %v4_a170, align 1
  %v0_a174 = load i32, i32* %r1.global-to-local, align 4
  %v1_a174 = add i32 %v0_a174, 24
  store i32 %v1_a174, i32* %r1.global-to-local, align 4
  %v0_a178 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a178, label %dec_label_pc_a17c, label %dec_label_pc_a150.dec_label_pc_a150_crit_edge

dec_label_pc_a150.dec_label_pc_a150_crit_edge:    ; preds = %dec_label_pc_a150
  %v0_a150.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_a15c.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a150

dec_label_pc_a17c:                                ; preds = %dec_label_pc_a150
  %v0_a17c = load i32, i32* %sb.global-to-local, align 4
  %v1_a17c = load i32, i32* @r8, align 4
  %v1_a180 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a17c, %v0_a17c
  %v2_a180 = sub i32 %v1_a180, %sum
  %v0_a184 = load i32, i32* %r0.global-to-local, align 4
  %v1_a184 = add i32 %v0_a184, 6
  store i32 %v1_a184, i32* %fp.global-to-local, align 4
  %v1_a188 = add i32 %v2_a180, -6
  store i32 %v1_a188, i32* @r6, align 4
  br label %dec_label_pc_a18c

dec_label_pc_a18cthread-pre-split:                ; preds = %dec_label_pc_a120
  %v0_a18c.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a18c

dec_label_pc_a18c:                                ; preds = %dec_label_pc_a18cthread-pre-split, %dec_label_pc_a17c
  %v0_a198 = phi i32 [ %v1_a134, %dec_label_pc_a18cthread-pre-split ], [ %v1_a184, %dec_label_pc_a17c ]
  %v1_a190 = phi i32 [ %v0_a18c.pr, %dec_label_pc_a18cthread-pre-split ], [ %v1_a188, %dec_label_pc_a17c ]
  %v2_a18c = icmp eq i32 %v1_a190, 0
  store i1 %v2_a18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a18c, label %dec_label_pc_a2ac, label %dec_label_pc_a198

dec_label_pc_a198:                                ; preds = %dec_label_pc_a18c
  %v1_a198 = inttoptr i32 %v0_a198 to i8*
  %v2_a198 = load i8, i8* %v1_a198, align 1
  %v3_a198 = zext i8 %v2_a198 to i32
  store i32 %v3_a198, i32* %sb.global-to-local, align 4
  %v2_a19c = icmp eq i8 %v2_a198, 0
  store i1 %v2_a19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a19c, label %dec_label_pc_a27c, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a198
  store i32 %v3_a198, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1b4 = call i32 @function_141a8(i32 %v3_a198, i32 8)
  store i32 %v2_a1b4, i32* %r0.global-to-local, align 4
  %v0_a1b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_a1b8 = icmp eq i32 %v0_a1b8, 0
  store i1 %v2_a1b8, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_a1b8, 1
  br i1 %tmp37, label %dec_label_pc_a27c, label %dec_label_pc_a1c8

dec_label_pc_a1c8:                                ; preds = %dec_label_pc_a1ac
  %v0_a1c8 = load i32, i32* @r6, align 4
  %v1_a1c8 = add i32 %v0_a1c8, -1
  store i32 %v1_a1c8, i32* @r2, align 4
  %v7_a1c8 = icmp eq i32 %v0_a1c8, 1
  store i1 %v7_a1c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1c8, label %dec_label_pc_a2ac, label %dec_label_pc_a1d0

dec_label_pc_a1d0:                                ; preds = %dec_label_pc_a1c8
  %v0_a1d0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1d0 = add i32 %v0_a1d0, 1
  %v2_a1d0 = inttoptr i32 %v1_a1d0 to i8*
  %v3_a1d0 = load i8, i8* %v2_a1d0, align 1
  %v1_a1d4 = add i32 %v0_a1c8, -2
  store i32 %v1_a1d4, i32* @r2, align 4
  %v7_a1d4 = icmp eq i32 %v1_a1c8, 1
  store i1 %v7_a1d4, i1* %cpsr_z.global-to-local, align 1
  %v3_a1d8 = add i32 %v2_a1b4, 4
  %v4_a1d8 = inttoptr i32 %v3_a1d8 to i8*
  store i8 %v3_a1d0, i8* %v4_a1d8, align 1
  %v0_a1dc = load i32, i32* %fp.global-to-local, align 4
  %v1_a1dc = add i32 %v0_a1dc, 1
  store i32 %v1_a1dc, i32* %r0.global-to-local, align 4
  %v0_a1e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1e0, label %dec_label_pc_a2ac, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1d0
  %v1_a1e4 = add i32 %v0_a1dc, 2
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v4_a1e4 = zext i8 %v3_a1e4 to i32
  store i32 %v4_a1e4, i32* @r4, align 4
  %v0_a1e8 = load i32, i32* @r2, align 4
  %v1_a1e8 = add i32 %v0_a1e8, -1
  store i32 %v1_a1e8, i32* @r7, align 4
  %v9_a1ec = icmp eq i32 %v1_a1e8, %v4_a1e4
  store i1 %v9_a1ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1e4, i32* %r0.global-to-local, align 4
  %v5_a1f4 = icmp slt i32 %v1_a1e8, %v4_a1e4
  br i1 %v5_a1f4, label %dec_label_pc_a2ac, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  store i32 %v2_a1b4, i32* @r5, align 4
  %v1_a200 = add i32 %v2_a1b4, 8
  %v1_a204 = add i32 %v0_a1dc, 3
  store i32 %v1_a204, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a254

dec_label_pc_a214:                                ; preds = %dec_label_pc_a254
  %v0_a214 = load i32, i32* @r7, align 4
  %v1_a214 = load i32, i32* @r4, align 4
  %v2_a214 = sub i32 %v0_a214, %v1_a214
  store i32 %v2_a214, i32* @r2, align 4
  %v9_a214 = icmp eq i32 %v0_a214, %v1_a214
  store i1 %v9_a214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a214, label %dec_label_pc_a2ac, label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a214
  %v1_a21c = load i32, i32* @r6, align 4
  %v2_a21c = add i32 %v1_a21c, %v1_a214
  %v3_a21c = inttoptr i32 %v2_a21c to i8*
  %v4_a21c = load i8, i8* %v3_a21c, align 1
  store i32 %stack_var_-44.0, i32* @r5, align 4
  %v1_a224 = add i32 %v2_a214, -1
  store i32 %v1_a224, i32* @r2, align 4
  %v7_a224 = icmp eq i32 %v2_a214, 1
  store i1 %v7_a224, i1* %cpsr_z.global-to-local, align 1
  %v3_a228 = add i32 %stack_var_-44.0, 4
  %v4_a228 = inttoptr i32 %v3_a228 to i8*
  store i8 %v4_a21c, i8* %v4_a228, align 1
  %v0_a22c = load i32, i32* @r4, align 4
  %v1_a22c = load i32, i32* @r6, align 4
  %v2_a22c = add i32 %v1_a22c, %v0_a22c
  store i32 %v2_a22c, i32* %r0.global-to-local, align 4
  %v0_a230 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a230, label %dec_label_pc_a2ac, label %dec_label_pc_a234

dec_label_pc_a234:                                ; preds = %dec_label_pc_a21c
  %v1_a234 = add i32 %v2_a22c, 1
  %v2_a234 = inttoptr i32 %v1_a234 to i8*
  %v3_a234 = load i8, i8* %v2_a234, align 1
  %v4_a234 = zext i8 %v3_a234 to i32
  store i32 %v4_a234, i32* @r4, align 4
  %v0_a238 = load i32, i32* @r2, align 4
  %v1_a238 = add i32 %v0_a238, -1
  store i32 %v1_a238, i32* @r7, align 4
  %v0_a23c = load i32, i32* @r5, align 4
  %v1_a23c = add i32 %v0_a23c, 8
  store i32 %v1_a23c, i32* %r1.global-to-local, align 4
  %v2_a240 = sub i32 %v1_a238, %v4_a234
  %tmp39 = sub i32 0, %v2_a240
  %v6_a240 = and i32 %v1_a238, %tmp39
  %v7_a240 = icmp slt i32 %v6_a240, 0
  %v8_a240 = icmp slt i32 %v2_a240, 0
  %v9_a240 = icmp eq i32 %v1_a238, %v4_a234
  store i1 %v9_a240, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a234, i32* %r0.global-to-local, align 4
  %v2_a24c = xor i1 %v8_a240, %v7_a240
  br i1 %v2_a24c, label %dec_label_pc_a2ac, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a234
  %v1_a250 = add i32 %v2_a22c, 2
  store i32 %v1_a250, i32* @r6, align 4
  br label %dec_label_pc_a254

dec_label_pc_a254:                                ; preds = %dec_label_pc_a1f8, %dec_label_pc_a250
  %v0_a258 = phi i32 [ %v4_a1e4, %dec_label_pc_a1f8 ], [ %v4_a234, %dec_label_pc_a250 ]
  %stack_var_-44.0 = phi i32 [ %v1_a200, %dec_label_pc_a1f8 ], [ %v1_a23c, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a258 = add nuw nsw i32 %v0_a258, 1
  store i32 %v2_a258, i32* %r0.global-to-local, align 4
  %v2_a25c = call i32 @function_141a8(i32 %v2_a258, i32 1)
  store i32 %v2_a25c, i32* %r0.global-to-local, align 4
  %v0_a260 = load i32, i32* %fp.global-to-local, align 4
  %v1_a260 = add i32 %v0_a260, 1
  store i32 %v1_a260, i32* %fp.global-to-local, align 4
  %v1_a264 = load i32, i32* @r5, align 4
  %v2_a264 = inttoptr i32 %v1_a264 to i32*
  store i32 %v2_a25c, i32* %v2_a264, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v0_a26c = load i32, i32* @r4, align 4
  %v3_a270 = call i32 @function_12cb8(i32 %v2_a25c, i32 %v0_a268, i32 %v0_a26c)
  store i32 %v3_a270, i32* %r0.global-to-local, align 4
  %v0_a274 = load i32, i32* %sb.global-to-local, align 4
  %v1_a274 = load i32, i32* %fp.global-to-local, align 4
  %v9_a274 = icmp eq i32 %v0_a274, %v1_a274
  store i1 %v9_a274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a274, label %dec_label_pc_a27c, label %dec_label_pc_a214

dec_label_pc_a27c:                                ; preds = %dec_label_pc_a254, %dec_label_pc_a1ac, %dec_label_pc_a198
  %stack_var_-52.2 = phi i32 [ %v3_a198, %dec_label_pc_a198 ], [ %v2_a1b4, %dec_label_pc_a1ac ], [ %v2_a1b4, %dec_label_pc_a254 ]
  %v0_a27c = call i32 @function_13b78()
  store i32 %v0_a27c, i32* %r0.global-to-local, align 4
  %v2_a284 = inttoptr i32 %v0_a27c to i32*
  store i32 0, i32* %v2_a284, align 4
  %v0_a288 = call i32 @function_135fc()
  store i32 %v0_a288, i32* %r0.global-to-local, align 4
  %v7_a28c = icmp eq i32 %v0_a288, -1
  %v2_a298 = icmp eq i32 %v0_a288, 0
  store i1 %v2_a298, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_a288, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_a27c
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a2ac

bb42:                                             ; preds = %dec_label_pc_a27c
  %. = zext i1 %v7_a28c to i32
  store i32 %., i32* @r2, align 4
  %v2_a2a4 = icmp eq i1 %v7_a28c, false
  store i1 %v2_a2a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2a4, label %dec_label_pc_a300, label %dec_label_pc_a2ac

dec_label_pc_a2ac:                                ; preds = %dec_label_pc_a234, %dec_label_pc_a21c, %dec_label_pc_a214, %.thread1, %bb42, %dec_label_pc_a1e4, %dec_label_pc_a1d0, %dec_label_pc_a1c8, %dec_label_pc_a18c
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a18c ], [ %stack_var_-52.2, %bb42 ], [ %v2_a1b4, %dec_label_pc_a1c8 ], [ %v2_a1b4, %dec_label_pc_a1d0 ], [ %v2_a1b4, %dec_label_pc_a1e4 ], [ %stack_var_-52.2, %.thread1 ], [ %v2_a1b4, %dec_label_pc_a214 ], [ %v2_a1b4, %dec_label_pc_a21c ], [ %v2_a1b4, %dec_label_pc_a234 ]
  store i32 %v2_a128, i32* %r1.global-to-local, align 4
  %v2_a2b0 = icmp eq i32 %v2_a128, 0
  store i1 %v2_a2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2b0, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_a2ac
  store i32 %v2_a128, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_a2ac, %bb43
  %v1_a2b8 = xor i1 %v2_a2b0, true
  call void @__pseudo_cond_branch(i1 %v1_a2b8, i32 ptrtoint (i32* @global_var_14200.54 to i32))
  %v2_a2c0 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2c0, label %.dec_label_pc_a0e8_crit_edge, label %dec_label_pc_a2c8

.dec_label_pc_a0e8_crit_edge:                     ; preds = %bb44
  %v29_a0ec.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0e8

dec_label_pc_a2c8:                                ; preds = %bb44
  %v0_a2c8 = load i32, i32* %sb.global-to-local, align 4
  %v2_a2c8 = icmp eq i32 %v0_a2c8, 0
  store i1 %v2_a2c8, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_a2c8, 1
  br i1 %tmp45, label %dec_label_pc_a2f0, label %dec_label_pc_a2d0

dec_label_pc_a2d0:                                ; preds = %dec_label_pc_a2c8
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a2d0
  %v1_a2d8 = phi i32 [ %v1_a2e4, %dec_label_pc_a2d4 ], [ 0, %dec_label_pc_a2d0 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_a2d8 = mul i32 %v1_a2d8, 8
  %v5_a2d8 = add i32 %v4_a2d8, %stack_var_-52.3
  %v6_a2d8 = inttoptr i32 %v5_a2d8 to i32*
  %v7_a2d8 = load i32, i32* %v6_a2d8, align 4
  store i32 %v7_a2d8, i32* %r0.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v7_a2d8, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  %v1_a2e0 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e0, i32 ptrtoint (i32* @global_var_14200.54 to i32))
  %v0_a2e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_a2e4 = add i32 %v0_a2e4, 1
  store i32 %v1_a2e4, i32* %r4.global-to-local, align 4
  %v0_a2e8 = load i32, i32* %sb.global-to-local, align 4
  %v9_a2e8 = icmp eq i32 %v0_a2e8, %v1_a2e4
  store i1 %v9_a2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2e8, label %dec_label_pc_a2f0, label %dec_label_pc_a2d4

dec_label_pc_a2f0:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a2c8
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0c4, i32* @r4, align 4
  store i32 %v6_a0c4, i32* @r5, align 4
  store i32 %v9_a0c4, i32* @r6, align 4
  store i32 %v12_a0c4, i32* @r7, align 4
  store i32 %v15_a0c4, i32* @r8, align 4
  store i32 %v18_a0c4, i32* %sb.global-to-local, align 4
  store i32 %v21_a0c4, i32* %sl.global-to-local, align 4
  store i32 %v24_a0c4, i32* %fp.global-to-local, align 4
  store i32 %v27_a0c4, i32* @lr, align 4
  %v0_a2fc = call i32 @function_14200()
  store i32 %v0_a2fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %bb42, %dec_label_pc_a2f0
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_a2f0 ], [ %stack_var_-52.2, %bb42 ]
  %v2_a304 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a304 = zext i8 %v2_a304 to i32
  %v2_a308 = icmp eq i8 %v2_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a308, label %dec_label_pc_a350, label %dec_label_pc_a310

dec_label_pc_a310:                                ; preds = %dec_label_pc_a300
  %v2_a314 = load i32, i32* @global_var_1f198.58, align 4
  store i32 %v2_a314, i32* %r0.global-to-local, align 4
  %v1_a318 = inttoptr i32 %v2_a314 to i32*
  %v2_a318 = load i32, i32* %v1_a318, align 4
  store i32 %v2_a318, i32* @ip, align 4
  store i32 %v4_a0f4, i32* %r4.global-to-local, align 4
  %v1_a320 = add i32 %v2_a318, 4
  %v2_a320 = inttoptr i32 %v1_a320 to i8*
  %v3_a320 = load i8, i8* %v2_a320, align 1
  store i32 %v4_a0f4, i32* %r1.global-to-local, align 4
  %v9_a328 = icmp eq i8 %v3_a320, %v3_a0f4
  store i1 %v9_a328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a328, label %dec_label_pc_a358, label %dec_label_pc_a344.preheader

dec_label_pc_a344.preheader:                      ; preds = %dec_label_pc_a310
  %v0_a344.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_a344

dec_label_pc_a334:                                ; preds = %dec_label_pc_a344
  %v4_a334 = mul i32 %v1_a344, 4
  %v5_a334 = add i32 %v4_a334, %v2_a314
  %v6_a334 = inttoptr i32 %v5_a334 to i32*
  %v7_a334 = load i32, i32* %v6_a334, align 4
  store i32 %v7_a334, i32* @ip, align 4
  %v1_a338 = add i32 %v7_a334, 4
  %v2_a338 = inttoptr i32 %v1_a338 to i8*
  %v3_a338 = load i8, i8* %v2_a338, align 1
  %v9_a33c = icmp eq i8 %v3_a338, %v3_a0f4
  store i1 %v9_a33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a33c, label %dec_label_pc_a358, label %dec_label_pc_a344

dec_label_pc_a344:                                ; preds = %dec_label_pc_a344.preheader, %dec_label_pc_a334
  %v0_a344 = phi i32 [ %v0_a344.pre, %dec_label_pc_a344.preheader ], [ %v1_a344, %dec_label_pc_a334 ]
  %v1_a344 = add i32 %v0_a344, 1
  %v9_a348 = icmp eq i32 %v1_a344, %v3_a304
  store i1 %v9_a348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a348, label %dec_label_pc_a350, label %dec_label_pc_a334

dec_label_pc_a350:                                ; preds = %dec_label_pc_a344, %dec_label_pc_a300, %dec_label_pc_a358
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_a354 = call i32 @function_14798(i32 0)
  store i32 %v1_a354, i32* %r0.global-to-local, align 4
  %v0_a390.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a358

dec_label_pc_a358:                                ; preds = %dec_label_pc_a334, %dec_label_pc_a310, %dec_label_pc_a350
  %v0_a390 = phi i32 [ %v2_a318, %dec_label_pc_a310 ], [ %v0_a390.pre, %dec_label_pc_a350 ], [ %v7_a334, %dec_label_pc_a334 ]
  %v0_a358 = load i32, i32* %sl.global-to-local, align 4
  %v1_a35c = and i32 %v0_a358, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_a364 = mul i32 %v0_a358, 16777216
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v1_a358 = udiv i32 %v0_a358, 256
  %v3_a36c = and i32 %v1_a358, 65280
  %v4_a370 = mul i32 %v1_a35c, 256
  %v4_a374 = udiv i32 %v0_a358, 16777216
  %v5_a374 = or i32 %v4_a374, %v3_a364
  %v5_a370 = or i32 %v5_a374, %v4_a370
  %v2_a37c = or i32 %v5_a370, %v3_a36c
  store i32 %v2_a37c, i32* %r0.global-to-local, align 4
  %v0_a384 = load i32, i32* @r8, align 4
  store i32 %v0_a384, i32* %r1.global-to-local, align 4
  %v1_a390 = inttoptr i32 %v0_a390 to i32*
  %v2_a390 = load i32, i32* %v1_a390, align 4
  call void @__pseudo_branch(i32 %v2_a390)
  br label %dec_label_pc_a350

; uselistorder directives
  uselistorder i32 %v0_a358, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a344, { 2, 0, 1 }
  uselistorder i1 %v9_a33c, { 1, 0 }
  uselistorder i1 %v9_a328, { 1, 0 }
  uselistorder i32 %v1_a2e4, { 1, 2, 0 }
  uselistorder i32 %stack_var_-52.3, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_a2a4, { 1, 0 }
  uselistorder i1 %v7_a28c, { 1, 0 }
  uselistorder i32 %v0_a288, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_a240, { 1, 0 }
  uselistorder i32 %v1_a238, { 2, 0, 1, 3 }
  uselistorder i32 %v4_a234, { 2, 1, 0, 3 }
  uselistorder i32 %v0_a1c8, { 0, 2, 1 }
  uselistorder i32 %v2_a1b4, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_a198, { 2, 0, 1, 3 }
  uselistorder i32 %v1_a174, { 1, 0 }
  uselistorder i32 %v0_a158, { 0, 2, 1 }
  uselistorder i32 %v0_a134, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a128, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_a114, { 2, 1, 0 }
  uselistorder i32 %v4_a100, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_a0d4, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_a0c4, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 4, 5, 1, 2, 3, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 9, 5, 6, 3, 7, 25, 8, 26, 12, 2, 16, 13, 10, 11, 14, 15, 22, 17, 19, 18, 20, 21, 24, 23, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 2, 3, 0, 5, 4, 6 }
  uselistorder label %dec_label_pc_a358, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a350, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a344, { 1, 0 }
  uselistorder label %dec_label_pc_a300, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_a2ac, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_a254, { 1, 0 }
  uselistorder label %dec_label_pc_a0e8, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a3a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_a3a0:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_a3a0 = load i32, i32* @r4, align 4
  store i32 %v3_a3a0, i32* %stack_var_-24, align 4
  %v6_a3a0 = load i32, i32* @r5, align 4
  %v9_a3a0 = load i32, i32* @r6, align 4
  %v12_a3a0 = load i32, i32* @r7, align 4
  %v15_a3a0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a3ac = call i32 @function_141a8(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1f194.56 to i32), i32* @r4, align 4
  %v2_a3b4 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a3b4 = zext i8 %v2_a3b4 to i32
  store i32 ptrtoint (i32* @global_var_1f198.58 to i32), i32* @r6, align 4
  store i32 53536, i32* %r2.global-to-local, align 4
  store i32 %v2_a3ac, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a3c8 = mul nuw nsw i32 %v3_a3b4, 4
  store i32 %v3_a3c8, i32* %r1.global-to-local, align 4
  %v2_a3cc = load i32, i32* @global_var_1f198.58, align 4
  %v2_a3d0 = inttoptr i32 %v2_a3ac to i32*
  store i32 53536, i32* %v2_a3d0, align 4
  %v3_a3d4 = load i32, i32* @r5, align 4
  %v4_a3d4 = add i32 %v3_a3d4, 4
  %v5_a3d4 = inttoptr i32 %v4_a3d4 to i8*
  store i8 0, i8* %v5_a3d4, align 1
  %v0_a3d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a3d8 = add i32 %v0_a3d8, 4
  store i32 %v1_a3d8, i32* %r1.global-to-local, align 4
  %v5_a3dc = call i32 @function_142f0(i32 %v2_a3cc, i32 %v1_a3d8, i32 53536, i32 0)
  %v2_a3e0 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a3e0 = zext i8 %v2_a3e0 to i32
  store i32 %v3_a3e0, i32* %r3.global-to-local, align 4
  store i32 %v5_a3dc, i32* %ip.global-to-local, align 4
  %v0_a3e8 = load i32, i32* @r5, align 4
  %v5_a3e8 = mul nuw nsw i32 %v3_a3e0, 4
  %v6_a3e8 = add i32 %v5_a3e8, %v5_a3dc
  %v7_a3e8 = inttoptr i32 %v6_a3e8 to i32*
  store i32 %v0_a3e8, i32* %v7_a3e8, align 4
  store i32 ptrtoint (i8* @global_var_1f195.63 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_a3f8 = load i32, i32* @r4, align 4
  %v4_a3f8 = inttoptr i32 %v3_a3f8 to i8*
  store i8 ptrtoint (i8* @global_var_1f195.63 to i8), i8* %v4_a3f8, align 1
  %v0_a3fc = load i32, i32* %ip.global-to-local, align 4
  %v1_a3fc = load i32, i32* @r6, align 4
  %v2_a3fc = inttoptr i32 %v1_a3fc to i32*
  store i32 %v0_a3fc, i32* %v2_a3fc, align 4
  %v2_a400 = call i32 @function_141a8(i32 1, i32 8)
  %v2_a404 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a404 = zext i8 %v2_a404 to i32
  store i32 ptrtoint (i32* @global_var_d7c8.65 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_a400, i32* @r5, align 4
  %v3_a414 = mul nuw nsw i32 %v3_a404, 4
  store i32 %v3_a414, i32* %r1.global-to-local, align 4
  %v2_a418 = load i32, i32* @global_var_1f198.58, align 4
  %v2_a41c = inttoptr i32 %v2_a400 to i32*
  store i32 ptrtoint (i32* @global_var_d7c8.65 to i32), i32* %v2_a41c, align 4
  %v0_a420 = load i32, i32* @r8, align 4
  %v1_a420 = trunc i32 %v0_a420 to i8
  %v2_a420 = load i32, i32* @r5, align 4
  %v3_a420 = add i32 %v2_a420, 4
  %v4_a420 = inttoptr i32 %v3_a420 to i8*
  store i8 %v1_a420, i8* %v4_a420, align 1
  %v0_a424 = load i32, i32* %r1.global-to-local, align 4
  %v1_a424 = add i32 %v0_a424, 4
  store i32 %v1_a424, i32* %r1.global-to-local, align 4
  %v5_a428 = call i32 @function_142f0(i32 %v2_a418, i32 %v1_a424, i32 sext (i8 ptrtoint (i8* @global_var_1f195.63 to i8) to i32), i32 ptrtoint (i32* @global_var_d7c8.65 to i32))
  %v2_a42c = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a42c = zext i8 %v2_a42c to i32
  store i32 %v3_a42c, i32* %r3.global-to-local, align 4
  store i32 %v5_a428, i32* %ip.global-to-local, align 4
  %v0_a434 = load i32, i32* @r5, align 4
  %v5_a434 = mul nuw nsw i32 %v3_a42c, 4
  %v6_a434 = add i32 %v5_a434, %v5_a428
  %v7_a434 = inttoptr i32 %v6_a434 to i32*
  store i32 %v0_a434, i32* %v7_a434, align 4
  %v0_a438 = load i32, i32* %r3.global-to-local, align 4
  %v1_a438 = load i32, i32* @r8, align 4
  %v2_a438 = add i32 %v1_a438, %v0_a438
  store i32 %v2_a438, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a444 = load i32, i32* %ip.global-to-local, align 4
  %v1_a444 = load i32, i32* @r6, align 4
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  store i32 %v0_a444, i32* %v2_a444, align 4
  %v0_a448 = load i32, i32* %r2.global-to-local, align 4
  %v1_a448 = trunc i32 %v0_a448 to i8
  %v2_a448 = load i32, i32* @r4, align 4
  %v3_a448 = inttoptr i32 %v2_a448 to i8*
  store i8 %v1_a448, i8* %v3_a448, align 1
  %v2_a44c = call i32 @function_141a8(i32 %v1_a438, i32 8)
  %v2_a450 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a450 = zext i8 %v2_a450 to i32
  store i32 ptrtoint (i32* @global_var_dcc8.67 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a44c, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a460 = mul nuw nsw i32 %v3_a450, 4
  store i32 %v3_a460, i32* %r1.global-to-local, align 4
  %v2_a464 = load i32, i32* @global_var_1f198.58, align 4
  %v2_a468 = inttoptr i32 %v2_a44c to i32*
  store i32 ptrtoint (i32* @global_var_dcc8.67 to i32), i32* %v2_a468, align 4
  %v3_a46c = load i32, i32* @r5, align 4
  %v4_a46c = add i32 %v3_a46c, 4
  %v5_a46c = inttoptr i32 %v4_a46c to i8*
  store i8 2, i8* %v5_a46c, align 1
  %v0_a470 = load i32, i32* %r1.global-to-local, align 4
  %v1_a470 = add i32 %v0_a470, 4
  store i32 %v1_a470, i32* %r1.global-to-local, align 4
  %v5_a474 = call i32 @function_142f0(i32 %v2_a464, i32 %v1_a470, i32 ptrtoint (i32* @global_var_dcc8.67 to i32), i32 2)
  %v2_a478 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a478 = zext i8 %v2_a478 to i32
  store i32 %v3_a478, i32* %r3.global-to-local, align 4
  store i32 %v5_a474, i32* %ip.global-to-local, align 4
  %v1_a480 = load i32, i32* @r8, align 4
  %v2_a480 = add i32 %v1_a480, %v3_a478
  %v3_a480 = trunc i32 %v2_a480 to i8
  store i32 %v2_a480, i32* %r2.global-to-local, align 4
  %v0_a484 = load i32, i32* @r5, align 4
  %v5_a484 = mul nuw nsw i32 %v3_a478, 4
  %v6_a484 = add i32 %v5_a484, %v5_a474
  %v7_a484 = inttoptr i32 %v6_a484 to i32*
  store i32 %v0_a484, i32* %v7_a484, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a48c = load i32, i32* @r8, align 4
  %v3_a490 = load i32, i32* @r4, align 4
  %v4_a490 = inttoptr i32 %v3_a490 to i8*
  store i8 %v3_a480, i8* %v4_a490, align 1
  %v0_a494 = load i32, i32* %ip.global-to-local, align 4
  %v1_a494 = load i32, i32* @r6, align 4
  %v2_a494 = inttoptr i32 %v1_a494 to i32*
  store i32 %v0_a494, i32* %v2_a494, align 4
  %v2_a498 = call i32 @function_141a8(i32 %v0_a48c, i32 8)
  %v2_a49c = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a49c = zext i8 %v2_a49c to i32
  store i32 ptrtoint (i32* @global_var_ce04.69 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_a498, i32* @r5, align 4
  %v3_a4ac = mul nuw nsw i32 %v3_a49c, 4
  store i32 %v3_a4ac, i32* %r1.global-to-local, align 4
  %v2_a4b0 = load i32, i32* @global_var_1f198.58, align 4
  %v2_a4b4 = inttoptr i32 %v2_a498 to i32*
  store i32 ptrtoint (i32* @global_var_ce04.69 to i32), i32* %v2_a4b4, align 4
  %v0_a4b8 = load i32, i32* @r7, align 4
  %v1_a4b8 = trunc i32 %v0_a4b8 to i8
  %v2_a4b8 = load i32, i32* @r5, align 4
  %v3_a4b8 = add i32 %v2_a4b8, 4
  %v4_a4b8 = inttoptr i32 %v3_a4b8 to i8*
  store i8 %v1_a4b8, i8* %v4_a4b8, align 1
  %v0_a4bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4bc = add i32 %v0_a4bc, 4
  store i32 %v1_a4bc, i32* %r1.global-to-local, align 4
  %v5_a4c0 = call i32 @function_142f0(i32 %v2_a4b0, i32 %v1_a4bc, i32 %v2_a480, i32 ptrtoint (i32* @global_var_ce04.69 to i32))
  %v2_a4c4 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a4c4 = zext i8 %v2_a4c4 to i32
  store i32 %v3_a4c4, i32* %r3.global-to-local, align 4
  store i32 %v5_a4c0, i32* %ip.global-to-local, align 4
  %v0_a4cc = load i32, i32* @r5, align 4
  %v5_a4cc = mul nuw nsw i32 %v3_a4c4, 4
  %v6_a4cc = add i32 %v5_a4cc, %v5_a4c0
  %v7_a4cc = inttoptr i32 %v6_a4cc to i32*
  store i32 %v0_a4cc, i32* %v7_a4cc, align 4
  %v0_a4d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4d0 = load i32, i32* @r8, align 4
  %v2_a4d0 = add i32 %v1_a4d0, %v0_a4d0
  store i32 %v2_a4d0, i32* %r2.global-to-local, align 4
  %v0_a4d4 = load i32, i32* @r7, align 4
  store i32 %v0_a4d4, i32* %r1.global-to-local, align 4
  %v0_a4dc = load i32, i32* %ip.global-to-local, align 4
  %v1_a4dc = load i32, i32* @r6, align 4
  %v2_a4dc = inttoptr i32 %v1_a4dc to i32*
  store i32 %v0_a4dc, i32* %v2_a4dc, align 4
  %v0_a4e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4e0 = trunc i32 %v0_a4e0 to i8
  %v2_a4e0 = load i32, i32* @r4, align 4
  %v3_a4e0 = inttoptr i32 %v2_a4e0 to i8*
  store i8 %v1_a4e0, i8* %v3_a4e0, align 1
  %v2_a4e4 = call i32 @function_141a8(i32 %v1_a4d0, i32 %v0_a4d4)
  %v2_a4e8 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a4e8 = zext i8 %v2_a4e8 to i32
  store i32 ptrtoint (i32* @global_var_c688.71 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a4e4, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a4f8 = mul nuw nsw i32 %v3_a4e8, 4
  store i32 %v3_a4f8, i32* %r1.global-to-local, align 4
  %v2_a4fc = load i32, i32* @global_var_1f198.58, align 4
  %v2_a500 = inttoptr i32 %v2_a4e4 to i32*
  store i32 ptrtoint (i32* @global_var_c688.71 to i32), i32* %v2_a500, align 4
  %v3_a504 = load i32, i32* @r5, align 4
  %v4_a504 = add i32 %v3_a504, 4
  %v5_a504 = inttoptr i32 %v4_a504 to i8*
  store i8 3, i8* %v5_a504, align 1
  %v0_a508 = load i32, i32* %r1.global-to-local, align 4
  %v1_a508 = add i32 %v0_a508, 4
  store i32 %v1_a508, i32* %r1.global-to-local, align 4
  %v5_a50c = call i32 @function_142f0(i32 %v2_a4fc, i32 %v1_a508, i32 ptrtoint (i32* @global_var_c688.71 to i32), i32 3)
  %v2_a510 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a510 = zext i8 %v2_a510 to i32
  store i32 %v3_a510, i32* %r3.global-to-local, align 4
  store i32 %v5_a50c, i32* %ip.global-to-local, align 4
  %v0_a518 = load i32, i32* @r5, align 4
  %v5_a518 = mul nuw nsw i32 %v3_a510, 4
  %v6_a518 = add i32 %v5_a518, %v5_a50c
  %v7_a518 = inttoptr i32 %v6_a518 to i32*
  store i32 %v0_a518, i32* %v7_a518, align 4
  %v0_a51c = load i32, i32* %r3.global-to-local, align 4
  %v1_a51c = load i32, i32* @r8, align 4
  %v2_a51c = add i32 %v1_a51c, %v0_a51c
  store i32 %v2_a51c, i32* %r2.global-to-local, align 4
  %v0_a520 = load i32, i32* @r7, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  %v0_a528 = load i32, i32* %ip.global-to-local, align 4
  %v1_a528 = load i32, i32* @r6, align 4
  %v2_a528 = inttoptr i32 %v1_a528 to i32*
  store i32 %v0_a528, i32* %v2_a528, align 4
  %v0_a52c = load i32, i32* %r2.global-to-local, align 4
  %v1_a52c = trunc i32 %v0_a52c to i8
  %v2_a52c = load i32, i32* @r4, align 4
  %v3_a52c = inttoptr i32 %v2_a52c to i8*
  store i8 %v1_a52c, i8* %v3_a52c, align 1
  %v2_a530 = call i32 @function_141a8(i32 %v1_a51c, i32 %v0_a520)
  %v2_a534 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a534 = zext i8 %v2_a534 to i32
  store i32 ptrtoint (i32* @global_var_bec8.73 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a530, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a544 = mul nuw nsw i32 %v3_a534, 4
  store i32 %v3_a544, i32* %r1.global-to-local, align 4
  %v2_a548 = load i32, i32* @global_var_1f198.58, align 4
  %v2_a54c = inttoptr i32 %v2_a530 to i32*
  store i32 ptrtoint (i32* @global_var_bec8.73 to i32), i32* %v2_a54c, align 4
  %v3_a550 = load i32, i32* @r5, align 4
  %v4_a550 = add i32 %v3_a550, 4
  %v5_a550 = inttoptr i32 %v4_a550 to i8*
  store i8 4, i8* %v5_a550, align 1
  %v0_a554 = load i32, i32* %r1.global-to-local, align 4
  %v1_a554 = add i32 %v0_a554, 4
  store i32 %v1_a554, i32* %r1.global-to-local, align 4
  %v5_a558 = call i32 @function_142f0(i32 %v2_a548, i32 %v1_a554, i32 ptrtoint (i32* @global_var_bec8.73 to i32), i32 4)
  %v2_a55c = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a55c = zext i8 %v2_a55c to i32
  store i32 %v3_a55c, i32* %r3.global-to-local, align 4
  store i32 %v5_a558, i32* %ip.global-to-local, align 4
  %v0_a564 = load i32, i32* @r5, align 4
  %v5_a564 = mul nuw nsw i32 %v3_a55c, 4
  %v6_a564 = add i32 %v5_a564, %v5_a558
  %v7_a564 = inttoptr i32 %v6_a564 to i32*
  store i32 %v0_a564, i32* %v7_a564, align 4
  %v0_a568 = load i32, i32* %r3.global-to-local, align 4
  %v1_a568 = load i32, i32* @r8, align 4
  %v2_a568 = add i32 %v1_a568, %v0_a568
  store i32 %v2_a568, i32* %r2.global-to-local, align 4
  %v0_a56c = load i32, i32* @r7, align 4
  store i32 %v0_a56c, i32* %r1.global-to-local, align 4
  %v0_a574 = load i32, i32* %ip.global-to-local, align 4
  %v1_a574 = load i32, i32* @r6, align 4
  %v2_a574 = inttoptr i32 %v1_a574 to i32*
  store i32 %v0_a574, i32* %v2_a574, align 4
  %v0_a578 = load i32, i32* %r2.global-to-local, align 4
  %v1_a578 = trunc i32 %v0_a578 to i8
  %v2_a578 = load i32, i32* @r4, align 4
  %v3_a578 = inttoptr i32 %v2_a578 to i8*
  store i8 %v1_a578, i8* %v3_a578, align 1
  %v2_a57c = call i32 @function_141a8(i32 %v1_a568, i32 %v0_a56c)
  %v2_a580 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a580 = zext i8 %v2_a580 to i32
  store i32 ptrtoint (i32* @global_var_b5b8.75 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a57c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a590 = mul nuw nsw i32 %v3_a580, 4
  store i32 %v3_a590, i32* %r1.global-to-local, align 4
  %v2_a594 = load i32, i32* @global_var_1f198.58, align 4
  %v2_a598 = inttoptr i32 %v2_a57c to i32*
  store i32 ptrtoint (i32* @global_var_b5b8.75 to i32), i32* %v2_a598, align 4
  %v3_a59c = load i32, i32* @r5, align 4
  %v4_a59c = add i32 %v3_a59c, 4
  %v5_a59c = inttoptr i32 %v4_a59c to i8*
  store i8 5, i8* %v5_a59c, align 1
  %v0_a5a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5a0 = add i32 %v0_a5a0, 4
  store i32 %v1_a5a0, i32* %r1.global-to-local, align 4
  %v5_a5a4 = call i32 @function_142f0(i32 %v2_a594, i32 %v1_a5a0, i32 ptrtoint (i32* @global_var_b5b8.75 to i32), i32 5)
  %v2_a5a8 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a5a8 = zext i8 %v2_a5a8 to i32
  store i32 %v3_a5a8, i32* %r3.global-to-local, align 4
  store i32 %v5_a5a4, i32* %ip.global-to-local, align 4
  %v0_a5b0 = load i32, i32* @r5, align 4
  %v5_a5b0 = mul nuw nsw i32 %v3_a5a8, 4
  %v6_a5b0 = add i32 %v5_a5b0, %v5_a5a4
  %v7_a5b0 = inttoptr i32 %v6_a5b0 to i32*
  store i32 %v0_a5b0, i32* %v7_a5b0, align 4
  %v0_a5b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5b4 = load i32, i32* @r8, align 4
  %v2_a5b4 = add i32 %v1_a5b4, %v0_a5b4
  store i32 %v2_a5b4, i32* %r2.global-to-local, align 4
  %v0_a5b8 = load i32, i32* @r7, align 4
  store i32 %v0_a5b8, i32* %r1.global-to-local, align 4
  %v0_a5c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a5c0 = load i32, i32* @r6, align 4
  %v2_a5c0 = inttoptr i32 %v1_a5c0 to i32*
  store i32 %v0_a5c0, i32* %v2_a5c0, align 4
  %v0_a5c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a5c4 = trunc i32 %v0_a5c4 to i8
  %v2_a5c4 = load i32, i32* @r4, align 4
  %v3_a5c4 = inttoptr i32 %v2_a5c4 to i8*
  store i8 %v1_a5c4, i8* %v3_a5c4, align 1
  %v2_a5c8 = call i32 @function_141a8(i32 %v1_a5b4, i32 %v0_a5b8)
  %v2_a5cc = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a5cc = zext i8 %v2_a5cc to i32
  store i32 ptrtoint (i32* @global_var_ae80.77 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a5c8, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a5dc = mul nuw nsw i32 %v3_a5cc, 4
  store i32 %v3_a5dc, i32* %r1.global-to-local, align 4
  %v2_a5e0 = load i32, i32* @global_var_1f198.58, align 4
  %v2_a5e4 = inttoptr i32 %v2_a5c8 to i32*
  store i32 ptrtoint (i32* @global_var_ae80.77 to i32), i32* %v2_a5e4, align 4
  %v3_a5e8 = load i32, i32* @r5, align 4
  %v4_a5e8 = add i32 %v3_a5e8, 4
  %v5_a5e8 = inttoptr i32 %v4_a5e8 to i8*
  store i8 6, i8* %v5_a5e8, align 1
  %v0_a5ec = load i32, i32* %r1.global-to-local, align 4
  %v1_a5ec = add i32 %v0_a5ec, 4
  store i32 %v1_a5ec, i32* %r1.global-to-local, align 4
  %v5_a5f0 = call i32 @function_142f0(i32 %v2_a5e0, i32 %v1_a5ec, i32 ptrtoint (i32* @global_var_ae80.77 to i32), i32 6)
  %v2_a5f4 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a5f4 = zext i8 %v2_a5f4 to i32
  store i32 %v3_a5f4, i32* %r3.global-to-local, align 4
  store i32 %v5_a5f0, i32* %ip.global-to-local, align 4
  %v0_a5fc = load i32, i32* @r5, align 4
  %v5_a5fc = mul nuw nsw i32 %v3_a5f4, 4
  %v6_a5fc = add i32 %v5_a5fc, %v5_a5f0
  %v7_a5fc = inttoptr i32 %v6_a5fc to i32*
  store i32 %v0_a5fc, i32* %v7_a5fc, align 4
  %v0_a600 = load i32, i32* %r3.global-to-local, align 4
  %v1_a600 = load i32, i32* @r8, align 4
  %v2_a600 = add i32 %v1_a600, %v0_a600
  store i32 %v2_a600, i32* %r2.global-to-local, align 4
  %v0_a604 = load i32, i32* @r7, align 4
  store i32 %v0_a604, i32* %r1.global-to-local, align 4
  %v0_a60c = load i32, i32* %ip.global-to-local, align 4
  %v1_a60c = load i32, i32* @r6, align 4
  %v2_a60c = inttoptr i32 %v1_a60c to i32*
  store i32 %v0_a60c, i32* %v2_a60c, align 4
  %v0_a610 = load i32, i32* %r2.global-to-local, align 4
  %v1_a610 = trunc i32 %v0_a610 to i8
  %v2_a610 = load i32, i32* @r4, align 4
  %v3_a610 = inttoptr i32 %v2_a610 to i8*
  store i8 %v1_a610, i8* %v3_a610, align 1
  %v2_a614 = call i32 @function_141a8(i32 %v1_a600, i32 %v0_a604)
  %v2_a618 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a618 = zext i8 %v2_a618 to i32
  store i32 ptrtoint (i32* @global_var_a6d8.79 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a614, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a628 = mul nuw nsw i32 %v3_a618, 4
  store i32 %v3_a628, i32* %r1.global-to-local, align 4
  %v2_a62c = load i32, i32* @global_var_1f198.58, align 4
  %v2_a630 = inttoptr i32 %v2_a614 to i32*
  store i32 ptrtoint (i32* @global_var_a6d8.79 to i32), i32* %v2_a630, align 4
  %v3_a634 = load i32, i32* @r5, align 4
  %v4_a634 = add i32 %v3_a634, 4
  %v5_a634 = inttoptr i32 %v4_a634 to i8*
  store i8 7, i8* %v5_a634, align 1
  %v0_a638 = load i32, i32* %r1.global-to-local, align 4
  %v1_a638 = add i32 %v0_a638, 4
  store i32 %v1_a638, i32* %r1.global-to-local, align 4
  %v5_a63c = call i32 @function_142f0(i32 %v2_a62c, i32 %v1_a638, i32 ptrtoint (i32* @global_var_a6d8.79 to i32), i32 7)
  %v2_a640 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a640 = zext i8 %v2_a640 to i32
  store i32 %v3_a640, i32* %r3.global-to-local, align 4
  store i32 %v5_a63c, i32* %ip.global-to-local, align 4
  %v0_a648 = load i32, i32* @r5, align 4
  %v5_a648 = mul nuw nsw i32 %v3_a640, 4
  %v6_a648 = add i32 %v5_a648, %v5_a63c
  %v7_a648 = inttoptr i32 %v6_a648 to i32*
  store i32 %v0_a648, i32* %v7_a648, align 4
  %v0_a64c = load i32, i32* %r3.global-to-local, align 4
  %v1_a64c = load i32, i32* @r8, align 4
  %v2_a64c = add i32 %v1_a64c, %v0_a64c
  store i32 %v2_a64c, i32* %r2.global-to-local, align 4
  %v0_a650 = load i32, i32* @r7, align 4
  store i32 %v0_a650, i32* %r1.global-to-local, align 4
  %v1_a658 = trunc i32 %v2_a64c to i8
  %v2_a658 = load i32, i32* @r4, align 4
  %v3_a658 = inttoptr i32 %v2_a658 to i8*
  store i8 %v1_a658, i8* %v3_a658, align 1
  %v0_a65c = load i32, i32* %ip.global-to-local, align 4
  %v1_a65c = load i32, i32* @r6, align 4
  %v2_a65c = inttoptr i32 %v1_a65c to i32*
  store i32 %v0_a65c, i32* %v2_a65c, align 4
  %v2_a660 = call i32 @function_141a8(i32 %v1_a64c, i32 %v0_a650)
  %v2_a664 = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a664 = zext i8 %v2_a664 to i32
  store i32 ptrtoint (i32* @global_var_81cc.81 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a660, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a674 = mul nuw nsw i32 %v3_a664, 4
  store i32 %v3_a674, i32* %r1.global-to-local, align 4
  %v2_a678 = load i32, i32* @global_var_1f198.58, align 4
  %v2_a67c = inttoptr i32 %v2_a660 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.81 to i32), i32* %v2_a67c, align 4
  %v3_a680 = load i32, i32* @r5, align 4
  %v4_a680 = add i32 %v3_a680, 4
  %v5_a680 = inttoptr i32 %v4_a680 to i8*
  store i8 9, i8* %v5_a680, align 1
  %v0_a684 = load i32, i32* %r1.global-to-local, align 4
  %v1_a684 = add i32 %v0_a684, 4
  store i32 %v1_a684, i32* %r1.global-to-local, align 4
  %v5_a688 = call i32 @function_142f0(i32 %v2_a678, i32 %v1_a684, i32 ptrtoint (i32* @global_var_81cc.81 to i32), i32 9)
  %v2_a68c = load i8, i8* bitcast (i8** @global_var_1f194.56 to i8*), align 4
  %v3_a68c = zext i8 %v2_a68c to i32
  store i32 %v3_a68c, i32* %r3.global-to-local, align 4
  %v1_a690 = load i32, i32* @r6, align 4
  %v2_a690 = inttoptr i32 %v1_a690 to i32*
  store i32 %v5_a688, i32* %v2_a690, align 4
  %v0_a694 = load i32, i32* @r5, align 4
  %v2_a694 = load i32, i32* %r3.global-to-local, align 4
  %v5_a694 = mul i32 %v2_a694, 4
  %v6_a694 = add i32 %v5_a694, %v5_a688
  %v7_a694 = inttoptr i32 %v6_a694 to i32*
  store i32 %v0_a694, i32* %v7_a694, align 4
  %v0_a698 = load i32, i32* %r3.global-to-local, align 4
  %v1_a698 = load i32, i32* @r8, align 4
  %v2_a698 = add i32 %v1_a698, %v0_a698
  store i32 %v2_a698, i32* %r2.global-to-local, align 4
  %v1_a6a0 = trunc i32 %v2_a698 to i8
  %v2_a6a0 = load i32, i32* @r4, align 4
  %v3_a6a0 = inttoptr i32 %v2_a6a0 to i8*
  store i8 %v1_a6a0, i8* %v3_a6a0, align 1
  %v2_a6a4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_a6a4, i32* @r4, align 4
  store i32 %v6_a3a0, i32* @r5, align 4
  store i32 %v9_a3a0, i32* @r6, align 4
  store i32 %v12_a3a0, i32* @r7, align 4
  store i32 %v15_a3a0, i32* @r8, align 4
  ret i32 %v1_a698

; uselistorder directives
  uselistorder i32 %v1_a698, { 1, 0 }
  uselistorder i32 %v1_a64c, { 1, 0 }
  uselistorder i32 %v1_a600, { 1, 0 }
  uselistorder i32 %v1_a5b4, { 1, 0 }
  uselistorder i32 %v1_a568, { 1, 0 }
  uselistorder i32 %v1_a51c, { 1, 0 }
  uselistorder i32 %v1_a4d0, { 1, 0 }
  uselistorder i32 %v2_a480, { 0, 2, 1 }
  uselistorder i32 %v3_a478, { 1, 0, 2 }
  uselistorder i32 %v1_a438, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* @global_var_1f198.58, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1f194.56 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a6d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a6d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a6d8 = load i32, i32* @r4, align 4
  %v15_a6d8 = load i32, i32* @r8, align 4
  %v21_a6d8 = load i32, i32* @sl, align 4
  %v24_a6d8 = load i32, i32* @fp, align 4
  %v1_a6dc = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_a6dc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a6f8 = urem i32 %arg4, 256
  store i32 %v1_a6f8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a708 = call i32 @function_141a8(i32 %v1_a6dc, i32 4)
  %v0_a70c = load i32, i32* @r5, align 4
  store i32 %v0_a70c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a718 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a718, i32* %r3.global-to-local, align 4
  %v0_a71c = load i32, i32* @r4, align 4
  store i32 %v0_a71c, i32* %r0.global-to-local, align 4
  %v5_a720 = inttoptr i32 %v0_a70c to i32*
  %v6_a720 = call i32 @function_a054(i32 %v0_a71c, i32* %v5_a720, i32 2, i32 %v0_a718)
  %v1_a72c = urem i32 %v6_a720, 256
  store i32 %v1_a72c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a738 = load i32, i32* @r5, align 4
  store i32 %v0_a738, i32* %r1.global-to-local, align 4
  %v0_a73c = load i32, i32* @r4, align 4
  store i32 %v0_a73c, i32* %r0.global-to-local, align 4
  %v5_a740 = trunc i32 %v6_a720 to i8
  %v6_a744 = inttoptr i32 %v0_a738 to i32*
  %v7_a744 = call i32 @function_a054(i32 %v0_a73c, i32* %v6_a744, i32 3, i32 65535)
  %v0_a748 = load i32, i32* @r5, align 4
  store i32 %v0_a748, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a744, i32* @r7, align 4
  %v0_a758 = load i32, i32* @r4, align 4
  store i32 %v0_a758, i32* %r0.global-to-local, align 4
  %v4_a75c = inttoptr i32 %v0_a748 to i32*
  %v5_a75c = call i32 @function_a054(i32 %v0_a758, i32* %v4_a75c, i32 4, i32 64)
  %v1_a764 = urem i32 %v5_a75c, 256
  store i32 %v1_a764, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  store i32 %v0_a768, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a774 = load i32, i32* @r4, align 4
  store i32 %v0_a774, i32* %r0.global-to-local, align 4
  %v5_a778 = trunc i32 %v5_a75c to i8
  %v6_a77c = inttoptr i32 %v0_a768 to i32*
  %v7_a77c = call i32 @function_a054(i32 %v0_a774, i32* %v6_a77c, i32 5, i32 1)
  %v1_a788 = urem i32 %v7_a77c, 256
  store i32 %v1_a788, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a794 = load i32, i32* @r5, align 4
  store i32 %v0_a794, i32* %r1.global-to-local, align 4
  %v0_a798 = load i32, i32* @r4, align 4
  store i32 %v0_a798, i32* %r0.global-to-local, align 4
  %v5_a7a0 = inttoptr i32 %v0_a794 to i32*
  %v6_a7a0 = call i32 @function_a054(i32 %v0_a798, i32* %v5_a7a0, i32 6, i32 65535)
  %v0_a7ac = load i32, i32* @r5, align 4
  store i32 %v0_a7ac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a7b8 = load i32, i32* @r4, align 4
  store i32 %v0_a7b8, i32* %r0.global-to-local, align 4
  %v5_a7bc = inttoptr i32 %v0_a7ac to i32*
  %v6_a7bc = call i32 @function_a054(i32 %v0_a7b8, i32* %v5_a7bc, i32 7, i32 65535)
  %v0_a7c0 = load i32, i32* @r5, align 4
  store i32 %v0_a7c0, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a7bc, i32* @sl, align 4
  %v0_a7d0 = load i32, i32* @r4, align 4
  store i32 %v0_a7d0, i32* %r0.global-to-local, align 4
  %v4_a7d4 = inttoptr i32 %v0_a7c0 to i32*
  %v5_a7d4 = call i32 @function_a054(i32 %v0_a7d0, i32* %v4_a7d4, i32 %v0_a7c4, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a7e4 = load i32, i32* @r5, align 4
  store i32 %v0_a7e4, i32* %r1.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r4, align 4
  store i32 %v0_a7e8, i32* %r0.global-to-local, align 4
  %v4_a7ec = inttoptr i32 %v0_a7e4 to i32*
  %v5_a7ec = call i32 @function_a054(i32 %v0_a7e8, i32* %v4_a7ec, i32 1, i32 1)
  %v1_a7f4 = urem i32 %v5_a7ec, 256
  store i32 %v1_a7f4, i32* %ip.global-to-local, align 4
  %v0_a7f8 = load i32, i32* @r5, align 4
  store i32 %v0_a7f8, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a800 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a800, i32* %r3.global-to-local, align 4
  %v0_a804 = load i32, i32* @r4, align 4
  store i32 %v0_a804, i32* %r0.global-to-local, align 4
  %v5_a80c = inttoptr i32 %v0_a7f8 to i32*
  %v6_a80c = call i32 @function_a054(i32 %v0_a804, i32* %v5_a80c, i32 18, i32 %v0_a800)
  %v0_a814 = load i32, i32* @r5, align 4
  store i32 %v0_a814, i32* %r1.global-to-local, align 4
  %v2_a818 = load i32, i32* @global_var_1f238.83, align 4
  store i32 %v2_a818, i32* %r3.global-to-local, align 4
  store i32 %v6_a80c, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_a824 = load i32, i32* @r4, align 4
  store i32 %v0_a824, i32* %r0.global-to-local, align 4
  %v4_a828 = inttoptr i32 %v0_a814 to i32*
  %v5_a828 = call i32 @function_a054(i32 %v0_a824, i32* %v4_a828, i32 24, i32 %v2_a818)
  %v0_a830 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a830, i32* %r0.global-to-local, align 4
  %v1_a834 = inttoptr i32 %v0_a830 to i32*
  %v2_a834 = call i32 @function_138a0(i32* %v1_a834)
  %v1_a838 = load i32, i32* @r6, align 4
  %v2_a838 = add i32 %v1_a838, %v2_a834
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a84c = call i32 @function_13ebc(i32 2, i32 3, i32 6)
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v7_a850 = icmp eq i32 %v3_a84c, -1
  store i1 %v7_a850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a850, label %dec_label_pc_ae68, label %dec_label_pc_a85c

dec_label_pc_a85c:                                ; preds = %dec_label_pc_a6d8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a864 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a864, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a86c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a86c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a878 = call i32 @function_13e8c(i32 %v3_a84c, i32 %v0_a86c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_a878, i32* %r0.global-to-local, align 4
  %v7_a87c = icmp eq i32 %v6_a878, -1
  store i1 %v7_a87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a87c, label %dec_label_pc_ae70, label %dec_label_pc_a884

dec_label_pc_a884:                                ; preds = %dec_label_pc_a85c
  %v0_a890 = load i32, i32* @sl, align 4
  %v3_a890 = mul i32 %v0_a890, 65536
  store i32 %v3_a890, i32* %sl.global-to-local, align 4
  %v0_a894 = load i32, i32* @r7, align 4
  %v2_a89c = icmp eq i32 %v1_a6dc, 0
  store i1 %v2_a89c, i1* %cpsr_z.global-to-local, align 1
  %v0_a8a0 = load i32, i32* @r8, align 4
  %v1_a8a0 = urem i32 %v0_a8a0, 256
  store i32 %v1_a8a0, i32* %r8.global-to-local, align 4
  %v3_a8a4 = urem i32 %v0_a894, 65536
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  %v3_a8a8 = urem i32 %v6_a7a0, 65536
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v3_a8ac = urem i32 %v0_a890, 65536
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v0_a8b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a8b8, i32* %stack_var_-40, align 4
  br i1 %v2_a89c, label %dec_label_pc_ab4c.preheader, label %dec_label_pc_a8cc

dec_label_pc_a8cc:                                ; preds = %dec_label_pc_a884
  %v3_a8d4 = mul i32 %v5_a7d4, 65536
  %v1_a8dc = urem i32 %v6_a7a0, 256
  %v1_a8e4 = add i32 %v3_a8d4, 524288
  %v1_a8e8 = add i32 %v3_a8d4, 4325376
  %v1_a8ec = urem i32 %v0_a890, 256
  %v1_a8f0 = add i32 %v3_a8d4, 1835008
  %v0_a894.not = or i32 %v0_a894, -65536
  %v1_a8f8 = xor i32 %v0_a894.not, 65535
  %v3_a8fc = udiv i32 %v1_a8f0, 256
  %tmp82 = udiv i32 %v0_a894, 256
  %v1_a910 = and i32 %v3_a8fc, 65280
  store i32 %v1_a910, i32* %r0.global-to-local, align 4
  %v3_a934 = mul nuw nsw i32 %v1_a8dc, 256
  %tmp83 = udiv i32 %v6_a7a0, 256
  %v4_a93c = urem i32 %tmp83, 256
  %v5_a93c = or i32 %v4_a93c, %v3_a934
  store i32 %v5_a93c, i32* @lr, align 4
  %tmp84 = mul nsw i32 %v1_a8f8, 256
  %v3_a944 = mul nuw nsw i32 %v1_a8ec, 256
  %sext23 = mul i32 %tmp82, 16777216
  %v4_a94c = sdiv i32 %sext23, 16777216
  %v4_a914 = sdiv i32 %v1_a8e8, 16777216
  %tmp85 = udiv i32 %v0_a890, 256
  %v4_a954 = urem i32 %tmp85, 256
  %v5_a954 = or i32 %v4_a954, %v3_a944
  store i32 %v5_a954, i32* @r7, align 4
  %v1_a958 = and i32 %tmp84, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_a958, i32* %ip.global-to-local, align 4
  %v4_a95c = sdiv i32 %v1_a8f0, 16777216
  %v3_a960 = udiv i32 %v1_a8e4, 256
  %tmp86 = udiv i32 %v1_a8f8, 256
  %v4_a964 = urem i32 %tmp86, 256
  %v5_a964 = or i32 %v4_a964, %v1_a958
  store i32 %v5_a964, i32* @r6, align 4
  %v3_a968 = ashr i32 %v1_a8e8, 31
  %v3_a96c = ashr i32 %sext23, 31
  %v1_a970 = and i32 %v3_a960, 65280
  store i32 %v1_a970, i32* @r5, align 4
  %v3_a97c = ashr i32 %v1_a8f0, 31
  store i32 %v3_a97c, i32* %r2.global-to-local, align 4
  %v3_a98032 = udiv i32 %v1_a958, 256
  store i32 %v3_a98032, i32* %r3.global-to-local, align 4
  store i32 %v1_a8dc, i32* %r1.global-to-local, align 4
  %v4_a988 = udiv i32 %v1_a8e4, 16777216
  %v5_a988 = or i32 %v4_a988, %v1_a970
  store i32 %v5_a988, i32* %r8.global-to-local, align 4
  %v5_a98c = trunc i32 %tmp86 to i8
  store i32 %v0_a8b8, i32* @r4, align 4
  %v3_a9a433 = udiv i32 %v1_a970, 256
  store i32 %v3_a9a433, i32* %sl.global-to-local, align 4
  store i32 %v1_a8ec, i32* %fp.global-to-local, align 4
  %v4_a9f8 = sext i8 %v5_a778 to i32
  %sext15 = mul i32 %v1_a958, 65536
  %v4_aac8 = sdiv i32 %sext15, 16777216
  %v2_aaf8 = icmp eq i32 %v1_a8a0, 0
  %sext16 = mul i32 %v6_a7a0, 16777216
  %v4_ab0c = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp83, 16777216
  %v4_ab28 = sdiv i32 %sext17, 16777216
  %v1_aa10 = trunc i32 %v4_a94c to i8
  br label %dec_label_pc_a9ac

dec_label_pc_a9ac:                                ; preds = %bb97, %dec_label_pc_a8cc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a9b8 = call i32 @function_141a8(i32 1510, i32 4)
  store i32 %v2_a9b8, i32* %r0.global-to-local, align 4
  store i32 %v2_a708, i32* %r2.global-to-local, align 4
  %v3_a9c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a9c0, i32* %r3.global-to-local, align 4
  %v2_a9c4 = load i32, i32* @r4, align 4
  %v5_a9c4 = mul i32 %v2_a9c4, 4
  %v6_a9c4 = add i32 %v5_a9c4, %v2_a708
  %v7_a9c4 = inttoptr i32 %v6_a9c4 to i32*
  store i32 %v2_a9b8, i32* %v7_a9c4, align 4
  %v0_a9c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a9c8 = load i32, i32* %r3.global-to-local, align 4
  %v4_a9c8 = mul i32 %v1_a9c8, 4
  %v5_a9c8 = add i32 %v4_a9c8, %v0_a9c8
  %v6_a9c8 = inttoptr i32 %v5_a9c8 to i32*
  %v7_a9c8 = load i32, i32* %v6_a9c8, align 4
  store i32 %v7_a9c8, i32* %r4.global-to-local, align 4
  %v1_a9cc = inttoptr i32 %v7_a9c8 to i8*
  %v2_a9cc = load i8, i8* %v1_a9cc, align 1
  %tmp = urem i8 %v2_a9cc, 16
  %v1_a9d0 = zext i8 %tmp to i32
  %v1_a9d4 = or i32 %v1_a9d0, 64
  store i32 %v1_a9d4, i32* %r2.global-to-local, align 4
  %v1_a9d8 = trunc i32 %v1_a9d4 to i8
  store i8 %v1_a9d8, i8* %v1_a9cc, align 1
  %v0_a9dc = load i32, i32* %r4.global-to-local, align 4
  %v1_a9dc = inttoptr i32 %v0_a9dc to i8*
  %v2_a9dc = load i8, i8* %v1_a9dc, align 1
  %v1_a9e0 = and i8 %v2_a9dc, -16
  %v1_a9e4 = or i8 %v1_a9e0, 5
  store i32 %v1_a788, i32* %r1.global-to-local, align 4
  store i8 %v1_a9e4, i8* %v1_a9dc, align 1
  %v2_a9f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_a9f4 = add i32 %v2_a9f4, 1
  %v4_a9f4 = inttoptr i32 %v3_a9f4 to i8*
  store i8 %v5_a740, i8* %v4_a9f4, align 1
  %v2_a9fc = load i32, i32* %r4.global-to-local, align 4
  %v3_a9fc = add i32 %v2_a9fc, 8
  %v4_a9fc = inttoptr i32 %v3_a9fc to i8*
  store i8 %v5_a778, i8* %v4_a9fc, align 1
  store i32 %v4_a94c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_aa08 = load i32, i32* %r1.global-to-local, align 4
  %v9_aa08 = icmp eq i32 %v0_aa08, 0
  store i1 %v9_aa08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a968, i32* %r2.global-to-local, align 4
  %v2_aa10 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa10 = add i32 %v2_aa10, 4
  %v4_aa10 = inttoptr i32 %v3_aa10 to i8*
  store i8 %v1_aa10, i8* %v4_aa10, align 1
  store i32 %v4_a914, i32* %r1.global-to-local, align 4
  %v0_aa18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa18, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a9ac
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_aa1c = load i32, i32* %r4.global-to-local, align 4
  %v4_aa1c = add i32 %v3_aa1c, 6
  %v5_aa1c = inttoptr i32 %v4_aa1c to i8*
  store i8 64, i8* %v5_aa1c, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a9ac, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_aa24 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa24 = trunc i32 %v0_aa24 to i8
  %v2_aa24 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa24 = add i32 %v2_aa24, 3
  %v4_aa24 = inttoptr i32 %v3_aa24 to i8*
  store i8 %v1_aa24, i8* %v4_aa24, align 1
  %v0_aa28 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa28 = trunc i32 %v0_aa28 to i8
  %v2_aa28 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa28 = add i32 %v2_aa28, 2
  %v4_aa28 = inttoptr i32 %v3_aa28 to i8*
  store i8 %v1_aa28, i8* %v4_aa28, align 1
  %v0_aa2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa2c, label %bb88, label %bb87

bb87:                                             ; preds = %.thread
  %v1_aa2c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_aa2c, i32* %r2.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %.thread, %bb87
  store i32 %v3_a96c, i32* %r1.global-to-local, align 4
  %v0_aa34 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa34 = trunc i32 %v0_aa34 to i8
  %v2_aa34 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa34 = add i32 %v2_aa34, 9
  %v4_aa34 = inttoptr i32 %v3_aa34 to i8*
  store i8 %v1_aa34, i8* %v4_aa34, align 1
  %v0_aa38 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa38, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_aa38 = load i32, i32* %r2.global-to-local, align 4
  %v2_aa38 = trunc i32 %v1_aa38 to i8
  %v3_aa38 = load i32, i32* %r4.global-to-local, align 4
  %v4_aa38 = add i32 %v3_aa38, 7
  %v5_aa38 = inttoptr i32 %v4_aa38 to i8*
  store i8 %v2_aa38, i8* %v5_aa38, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  %v3_aa3c = load i32, i32* %stack_var_-40, align 4
  %v5_aa44 = mul i32 %v3_aa3c, 24
  store i32 %v5_aa44, i32* %r3.global-to-local, align 4
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  %v1_aa4c = load i32, i32* %r4.global-to-local, align 4
  %v2_aa4c = add i32 %v1_aa4c, 12
  %v3_aa4c = inttoptr i32 %v2_aa4c to i32*
  store i32 %v5_a828, i32* %v3_aa4c, align 4
  %v0_aa50 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa50 = load i32, i32* @sb, align 4
  %v2_aa50 = add i32 %v1_aa50, %v0_aa50
  store i32 %v2_aa50, i32* %r3.global-to-local, align 4
  %v1_aa54 = add i32 %v2_aa50, 16
  %v2_aa54 = inttoptr i32 %v1_aa54 to i32*
  %v3_aa54 = load i32, i32* %v2_aa54, align 4
  store i32 %v3_aa54, i32* %r2.global-to-local, align 4
  %v0_aa58 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa58 = trunc i32 %v0_aa58 to i8
  %v2_aa58 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa58 = add i32 %v2_aa58, 5
  %v4_aa58 = inttoptr i32 %v3_aa58 to i8*
  store i8 %v1_aa58, i8* %v4_aa58, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_aa60 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa60 = add i32 %v0_aa60, 20
  store i32 %v1_aa60, i32* %r1.global-to-local, align 4
  %v3_aa64 = add i32 %v0_aa60, 22
  %v4_aa64 = inttoptr i32 %v3_aa64 to i8*
  store i8 101, i8* %v4_aa64, align 1
  %v0_aa68 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa68 = load i32, i32* %r4.global-to-local, align 4
  %v2_aa68 = add i32 %v1_aa68, 16
  %v3_aa68 = inttoptr i32 %v2_aa68 to i32*
  store i32 %v0_aa68, i32* %v3_aa68, align 4
  %v0_aa6c = load i32, i32* %r4.global-to-local, align 4
  %v1_aa6c = add i32 %v0_aa6c, 24
  store i32 %v1_aa6c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_aa74 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa74 = add i32 %v0_aa74, -93
  store i32 %v1_aa74, i32* %r3.global-to-local, align 4
  %v2_aa78 = load i32, i32* %r1.global-to-local, align 4
  %v3_aa78 = add i32 %v2_aa78, 3
  %v4_aa78 = inttoptr i32 %v3_aa78 to i8*
  store i8 88, i8* %v4_aa78, align 1
  %v0_aa7c = load i32, i32* %r3.global-to-local, align 4
  %v1_aa7c = trunc i32 %v0_aa7c to i8
  %v2_aa7c = load i32, i32* %r0.global-to-local, align 4
  %v3_aa7c = add i32 %v2_aa7c, 12
  %v4_aa7c = inttoptr i32 %v3_aa7c to i8*
  store i8 %v1_aa7c, i8* %v4_aa7c, align 1
  %v0_aa80 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa80 = trunc i32 %v0_aa80 to i8
  %v2_aa80 = load i32, i32* %r0.global-to-local, align 4
  %v3_aa80 = add i32 %v2_aa80, 13
  %v4_aa80 = inttoptr i32 %v3_aa80 to i8*
  store i8 %v1_aa80, i8* %v4_aa80, align 1
  %v0_aa84 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa84 = add i32 %v0_aa84, 38
  %v2_aa84 = inttoptr i32 %v1_aa84 to i8*
  %v3_aa84 = load i8, i8* %v2_aa84, align 1
  %tmp103 = urem i8 %v3_aa84, 16
  %v1_aa88 = zext i8 %tmp103 to i32
  %v1_aa8c = or i32 %v1_aa88, 64
  store i32 %v1_aa8c, i32* %r3.global-to-local, align 4
  %v1_aa90 = trunc i32 %v1_aa8c to i8
  store i8 %v1_aa90, i8* %v2_aa84, align 1
  %v0_aa94 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa94 = add i32 %v0_aa94, 38
  %v2_aa94 = inttoptr i32 %v1_aa94 to i8*
  %v3_aa94 = load i8, i8* %v2_aa94, align 1
  %v1_aa98 = and i8 %v3_aa94, -16
  %v1_aa9c = or i8 %v1_aa98, 5
  store i8 %v1_aa9c, i8* %v2_aa94, align 1
  %v0_aaa8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aaa8 = add i32 %v0_aaa8, 38
  store i32 %v1_aaa8, i32* @r5, align 4
  %v3_aaac = add i32 %v0_aaa8, 39
  %v4_aaac = inttoptr i32 %v3_aaac to i8*
  store i8 %v5_a740, i8* %v4_aaac, align 1
  store i32 %v4_a95c, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_a97c, i32* %r2.global-to-local, align 4
  %v2_aabc = load i32, i32* @r5, align 4
  %v3_aabc = add i32 %v2_aabc, 4
  %v4_aabc = inttoptr i32 %v3_aabc to i8*
  store i8 %v5_a98c, i8* %v4_aabc, align 1
  %v0_aac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_aac0 = trunc i32 %v0_aac0 to i8
  %v2_aac0 = load i32, i32* @r5, align 4
  %v3_aac0 = add i32 %v2_aac0, 2
  %v4_aac0 = inttoptr i32 %v3_aac0 to i8*
  store i8 %v1_aac0, i8* %v4_aac0, align 1
  %v0_aac4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aac4, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  store i32 %v4_aac8, i32* %r1.global-to-local, align 4
  %v0_aacc = load i32, i32* %r2.global-to-local, align 4
  %v1_aacc = trunc i32 %v0_aacc to i8
  %v2_aacc = load i32, i32* @r5, align 4
  %v3_aacc = add i32 %v2_aacc, 3
  %v4_aacc = inttoptr i32 %v3_aacc to i8*
  store i8 %v1_aacc, i8* %v4_aacc, align 1
  store i32 %v4_a9f8, i32* %r2.global-to-local, align 4
  %v0_aad4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aad4, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_aad4 = load i32, i32* %r3.global-to-local, align 4
  %v2_aad4 = trunc i32 %v1_aad4 to i8
  %v3_aad4 = load i32, i32* @r5, align 4
  %v4_aad4 = add i32 %v3_aad4, 6
  %v5_aad4 = inttoptr i32 %v4_aad4 to i8*
  store i8 %v2_aad4, i8* %v5_aad4, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_aadc = load i32, i32* %r1.global-to-local, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r5, align 4
  %v3_aadc = add i32 %v2_aadc, 5
  %v4_aadc = inttoptr i32 %v3_aadc to i8*
  store i8 %v1_aadc, i8* %v4_aadc, align 1
  %v0_aae0 = load i32, i32* %r2.global-to-local, align 4
  %v1_aae0 = trunc i32 %v0_aae0 to i8
  %v2_aae0 = load i32, i32* @r5, align 4
  %v3_aae0 = add i32 %v2_aae0, 8
  %v4_aae0 = inttoptr i32 %v3_aae0 to i8*
  store i8 %v1_aae0, i8* %v4_aae0, align 1
  %v0_aae4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aae4, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_aae4 = load i32, i32* %ip.global-to-local, align 4
  %v2_aae4 = trunc i32 %v1_aae4 to i8
  %v3_aae4 = load i32, i32* @r5, align 4
  %v4_aae4 = add i32 %v3_aae4, 7
  %v5_aae4 = inttoptr i32 %v4_aae4 to i8*
  store i8 %v2_aae4, i8* %v5_aae4, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_aae8 = load i32, i32* %r3.global-to-local, align 4
  %v1_aae8 = trunc i32 %v0_aae8 to i8
  %v2_aae8 = load i32, i32* @r5, align 4
  %v3_aae8 = add i32 %v2_aae8, 9
  %v4_aae8 = inttoptr i32 %v3_aae8 to i8*
  store i8 %v1_aae8, i8* %v4_aae8, align 1
  %v0_aaec = call i32 @function_f8c8()
  store i32 %v0_aaec, i32* %r0.global-to-local, align 4
  store i32 %v1_a8a0, i32* %r1.global-to-local, align 4
  store i1 %v2_aaf8, i1* %cpsr_z.global-to-local, align 1
  %v1_aafc = sub i32 1023, %v0_aaec
  store i32 %v1_aafc, i32* %r3.global-to-local, align 4
  br i1 %v2_aaf8, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb96
  %v2_ab04 = load i32, i32* @r5, align 4
  %v3_ab04 = add i32 %v2_ab04, 16
  %v4_ab04 = inttoptr i32 %v3_ab04 to i32*
  store i32 %v1_aafc, i32* %v4_ab04, align 4
  br label %bb97

.thread19:                                        ; preds = %bb96
  %v1_ab00 = load i32, i32* %r4.global-to-local, align 4
  %v2_ab00 = add i32 %v1_ab00, 16
  %v3_ab00 = inttoptr i32 %v2_ab00 to i32*
  %v4_ab00 = load i32, i32* %v3_ab00, align 4
  store i32 %v4_ab00, i32* %r3.global-to-local, align 4
  %v2_ab08 = load i32, i32* @r5, align 4
  %v3_ab08 = add i32 %v2_ab08, 16
  %v4_ab08 = inttoptr i32 %v3_ab08 to i32*
  store i32 %v4_ab00, i32* %v4_ab08, align 4
  br label %bb97

bb97:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_ab0c, i32* %r3.global-to-local, align 4
  %v0_ab10 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab10 = add i32 %v0_ab10, 58
  store i32 %v1_ab10, i32* @r6, align 4
  %v1_ab14 = load i32, i32* @r5, align 4
  %v2_ab14 = add i32 %v1_ab14, 12
  %v3_ab14 = inttoptr i32 %v2_ab14 to i32*
  store i32 %v0_aaec, i32* %v3_ab14, align 4
  %v0_ab18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ab18 = trunc i32 %v0_ab18 to i8
  %v2_ab18 = load i32, i32* @r6, align 4
  %v3_ab18 = add i32 %v2_ab18, 1
  %v4_ab18 = inttoptr i32 %v3_ab18 to i8*
  store i8 %v1_ab18, i8* %v4_ab18, align 1
  %v3_ab1c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab1c, i32* %r3.global-to-local, align 4
  store i32 %v1_a6dc, i32* %r1.global-to-local, align 4
  %v1_ab24 = add i32 %v3_ab1c, 1
  store i32 %v1_ab24, i32* @r4, align 4
  store i32 %v4_ab28, i32* %r2.global-to-local, align 4
  %v9_ab2c = icmp eq i32 %v1_ab24, %v1_a6dc
  store i1 %v9_ab2c, i1* %cpsr_z.global-to-local, align 1
  %v0_ab30 = load i32, i32* %sl.global-to-local, align 4
  %v1_ab30 = trunc i32 %v0_ab30 to i8
  %v2_ab30 = load i32, i32* @r6, align 4
  %v3_ab30 = add i32 %v2_ab30, 5
  %v4_ab30 = inttoptr i32 %v3_ab30 to i8*
  store i8 %v1_ab30, i8* %v4_ab30, align 1
  %v0_ab34 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab34 = trunc i32 %v0_ab34 to i8
  %v2_ab34 = load i32, i32* @r6, align 4
  %v3_ab34 = inttoptr i32 %v2_ab34 to i8*
  store i8 %v1_ab34, i8* %v3_ab34, align 1
  %v0_ab38 = load i32, i32* @r7, align 4
  %v1_ab38 = trunc i32 %v0_ab38 to i8
  %v2_ab38 = load i32, i32* @r6, align 4
  %v3_ab38 = add i32 %v2_ab38, 2
  %v4_ab38 = inttoptr i32 %v3_ab38 to i8*
  store i8 %v1_ab38, i8* %v4_ab38, align 1
  %v0_ab3c = load i32, i32* %fp.global-to-local, align 4
  %v1_ab3c = trunc i32 %v0_ab3c to i8
  %v2_ab3c = load i32, i32* @r6, align 4
  %v3_ab3c = add i32 %v2_ab3c, 3
  %v4_ab3c = inttoptr i32 %v3_ab3c to i8*
  store i8 %v1_ab3c, i8* %v4_ab3c, align 1
  %v0_ab40 = load i32, i32* %r8.global-to-local, align 4
  %v1_ab40 = trunc i32 %v0_ab40 to i8
  %v2_ab40 = load i32, i32* @r6, align 4
  %v3_ab40 = add i32 %v2_ab40, 4
  %v4_ab40 = inttoptr i32 %v3_ab40 to i8*
  store i8 %v1_ab40, i8* %v4_ab40, align 1
  %v0_ab44 = load i32, i32* @r4, align 4
  store i32 %v0_ab44, i32* %stack_var_-40, align 4
  %v5_ab48 = icmp slt i32 %v1_ab24, %v1_a6dc
  br i1 %v5_ab48, label %dec_label_pc_a9ac, label %dec_label_pc_ab4c.preheader

dec_label_pc_ab4c.preheader:                      ; preds = %bb97, %dec_label_pc_a884
  %v1_ab6c = add i32 %v5_a7d4, 66
  %v1_ab70 = add i32 %v5_a7d4, 8
  %v2_ab84 = icmp eq i32 %v5_a828, -1
  %v7_ab84 = icmp eq i32 %v5_a828, -1
  %v3_ada8 = icmp eq i32 %v3_a8a4, 65535
  %v2_ae18 = icmp eq i32 %v1_a8a0, 0
  %v2_abe0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_abf8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_ac08 = ptrtoint i32* %stack_var_-52 to i32
  %v2_ac14 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ac28 = icmp eq i32 %v1_a7f4, 0
  br label %dec_label_pc_ab4c

dec_label_pc_ab4c:                                ; preds = %dec_label_pc_ab4c.preheader, %dec_label_pc_ae54
  store i32 %v1_a6dc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_a89c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_a89c, label %dec_label_pc_ae54, label %dec_label_pc_ab60

dec_label_pc_ab60:                                ; preds = %dec_label_pc_ab4c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r1.global-to-local, align 4
  store i32 %v1_ab6c, i32* @fp, align 4
  store i32 %v1_ab70, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ad04

dec_label_pc_ab80:                                ; preds = %dec_label_pc_ad04
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  store i1 %v7_ab84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab84, label %dec_label_pc_ad98, label %dec_label_pc_ab8c

dec_label_pc_ab8c:                                ; preds = %dec_label_pc_ad30, %dec_label_pc_ab80
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ada8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ada8, label %dec_label_pc_adb4, label %dec_label_pc_aba0

dec_label_pc_aba0:                                ; preds = %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge, %dec_label_pc_ab8c
  %v1_aba4 = phi i32 [ %v1_aba4.pre, %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge ], [ 65535, %dec_label_pc_ab8c ]
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v9_aba4 = icmp eq i32 %v3_a8a8, %v1_aba4
  store i1 %v9_aba4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aba4, label %dec_label_pc_adec, label %dec_label_pc_abac

dec_label_pc_abac:                                ; preds = %dec_label_pc_adb4.dec_label_pc_abac_crit_edge, %dec_label_pc_aba0
  %v1_abb0 = phi i32 [ %v1_abb0.pre, %dec_label_pc_adb4.dec_label_pc_abac_crit_edge ], [ %v1_aba4, %dec_label_pc_aba0 ]
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v9_abb0 = icmp eq i32 %v3_a8ac, %v1_abb0
  store i1 %v9_abb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_abb0, label %dec_label_pc_ae08, label %dec_label_pc_abb8

dec_label_pc_abb8:                                ; preds = %dec_label_pc_adec, %dec_label_pc_abac
  store i32 %v1_a8a0, i32* %r3.global-to-local, align 4
  store i1 %v2_ae18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae18, label %dec_label_pc_ae2c, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_abb8
  %v1_abc0 = load i32, i32* @r5, align 4
  %v2_abc0 = add i32 %v1_abc0, 16
  %v3_abc0 = inttoptr i32 %v2_abc0 to i32*
  %v4_abc0 = load i32, i32* %v3_abc0, align 4
  store i32 %v4_abc0, i32* %r3.global-to-local, align 4
  %v2_abc4 = load i32, i32* @r6, align 4
  %v3_abc4 = add i32 %v2_abc4, 16
  %v4_abc4 = inttoptr i32 %v3_abc4 to i32*
  store i32 %v4_abc0, i32* %v4_abc4, align 4
  br label %dec_label_pc_abcc

dec_label_pc_abcc:                                ; preds = %bb102, %.thread20, %dec_label_pc_ae2c
  %v0_abcc = call i32 @function_f8c8()
  store i32 %v0_abcc, i32* %r0.global-to-local, align 4
  store i32 %v0_abcc, i32* %stack_var_-44, align 4
  %v0_abd4 = call i32 @function_f8c8()
  store i32 %v0_abd4, i32* %r0.global-to-local, align 4
  store i32 %v0_abd4, i32* %stack_var_-48, align 4
  %v0_abdc = call i32 @function_f8c8()
  store i32 %v2_abe0, i32* %r1.global-to-local, align 4
  store i32 %v0_abdc, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_abec = load i32, i32* @r8, align 4
  store i32 %v0_abec, i32* %r0.global-to-local, align 4
  %v3_abf0 = call i32 @function_12cb8(i32 %v0_abec, i32 %v2_abe0, i32 4)
  %v0_abf4 = load i32, i32* @r8, align 4
  %v1_abf4 = add i32 %v0_abf4, 6
  store i32 %v1_abf4, i32* %r0.global-to-local, align 4
  store i32 %v2_abf8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_ac00 = call i32 @function_12cb8(i32 %v1_abf4, i32 %v2_abf8, i32 4)
  %v0_ac04 = load i32, i32* @r8, align 4
  %v1_ac04 = add i32 %v0_ac04, 4
  store i32 %v1_ac04, i32* %r0.global-to-local, align 4
  store i32 %v2_ac08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ac10 = call i32 @function_12cb8(i32 %v1_ac04, i32 %v2_ac08, i32 2)
  store i32 %v2_ac14, i32* %r1.global-to-local, align 4
  %v0_ac18 = load i32, i32* @r8, align 4
  %v1_ac18 = add i32 %v0_ac18, 10
  store i32 %v1_ac18, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ac20 = call i32 @function_12cb8(i32 %v1_ac18, i32 %v2_ac14, i32 2)
  store i32 %v3_ac20, i32* %r0.global-to-local, align 4
  store i32 %v1_a7f4, i32* %r1.global-to-local, align 4
  store i1 %v2_ac28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac28, label %dec_label_pc_ac30, label %dec_label_pc_ae38

dec_label_pc_ac30:                                ; preds = %dec_label_pc_abcc, %dec_label_pc_ae38
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ac34 = load i32, i32* @sl, align 4
  %v1_ac34 = trunc i32 %v0_ac34 to i8
  %v2_ac34 = load i32, i32* @r5, align 4
  %v3_ac34 = add i32 %v2_ac34, 10
  %v4_ac34 = inttoptr i32 %v3_ac34 to i8*
  store i8 %v1_ac34, i8* %v4_ac34, align 1
  %v0_ac38 = load i32, i32* @sl, align 4
  %v1_ac38 = trunc i32 %v0_ac38 to i8
  %v2_ac38 = load i32, i32* @r5, align 4
  %v3_ac38 = add i32 %v2_ac38, 11
  %v4_ac38 = inttoptr i32 %v3_ac38 to i8*
  store i8 %v1_ac38, i8* %v4_ac38, align 1
  %v0_ac3c = load i32, i32* @r5, align 4
  store i32 %v0_ac3c, i32* @r0, align 4
  %v2_ac40 = call i32 @function_e498(i32 %v0_ac3c, i32 20)
  %v3_ac40 = trunc i32 %v2_ac40 to i8
  %v4_ac44 = sdiv i32 %v2_ac40, 256
  store i32 %v4_ac44, i32* %r3.global-to-local, align 4
  %v1_ac48 = trunc i32 %v4_ac44 to i8
  %v2_ac48 = load i32, i32* @r5, align 4
  %v3_ac48 = add i32 %v2_ac48, 11
  %v4_ac48 = inttoptr i32 %v3_ac48 to i8*
  store i8 %v1_ac48, i8* %v4_ac48, align 1
  %v3_ac4c = load i32, i32* @r5, align 4
  %v4_ac4c = add i32 %v3_ac4c, 10
  %v5_ac4c = inttoptr i32 %v4_ac4c to i8*
  store i8 %v3_ac40, i8* %v5_ac4c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ac54 = load i32, i32* @sl, align 4
  %v1_ac54 = trunc i32 %v0_ac54 to i8
  %v2_ac54 = load i32, i32* @r6, align 4
  %v3_ac54 = add i32 %v2_ac54, 10
  %v4_ac54 = inttoptr i32 %v3_ac54 to i8*
  store i8 %v1_ac54, i8* %v4_ac54, align 1
  %v0_ac58 = load i32, i32* @sl, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* @r6, align 4
  %v3_ac58 = add i32 %v2_ac58, 11
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i32, i32* @r6, align 4
  store i32 %v0_ac5c, i32* @r0, align 4
  %v2_ac60 = call i32 @function_e498(i32 %v0_ac5c, i32 20)
  %v3_ac60 = trunc i32 %v2_ac60 to i8
  store i32 %v2_ac60, i32* %r0.global-to-local, align 4
  %v4_ac64 = sdiv i32 %v2_ac60, 256
  store i32 %v4_ac64, i32* %r3.global-to-local, align 4
  %v3_ac68 = load i32, i32* @r6, align 4
  %v4_ac68 = add i32 %v3_ac68, 10
  %v5_ac68 = inttoptr i32 %v4_ac68 to i8*
  store i8 %v3_ac60, i8* %v5_ac68, align 1
  %v0_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac6c = trunc i32 %v0_ac6c to i8
  %v2_ac6c = load i32, i32* @r6, align 4
  %v3_ac6c = add i32 %v2_ac6c, 11
  %v4_ac6c = inttoptr i32 %v3_ac6c to i8*
  store i8 %v1_ac6c, i8* %v4_ac6c, align 1
  %v0_ac70 = load i32, i32* @r7, align 4
  %v1_ac70 = add i32 %v0_ac70, 4
  %v2_ac70 = inttoptr i32 %v1_ac70 to i8*
  %v3_ac70 = load i8, i8* %v2_ac70, align 1
  %v4_ac70 = zext i8 %v3_ac70 to i32
  store i32 %v4_ac70, i32* %r3.global-to-local, align 4
  %v1_ac74 = add i32 %v0_ac70, 5
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v0_ac70, i32* @r1, align 4
  %v4_ac7c = mul nuw nsw i32 %v4_ac74, 256
  %v5_ac7c = or i32 %v4_ac7c, %v4_ac70
  store i32 %v5_ac7c, i32* %r2.global-to-local, align 4
  %v0_ac80 = load i32, i32* @sl, align 4
  %v1_ac80 = trunc i32 %v0_ac80 to i8
  %v3_ac80 = add i32 %v0_ac70, 6
  %v4_ac80 = inttoptr i32 %v3_ac80 to i8*
  store i8 %v1_ac80, i8* %v4_ac80, align 1
  store i32 %v1_ab70, i32* %r3.global-to-local, align 4
  %v0_ac88 = load i32, i32* @sl, align 4
  %v1_ac88 = trunc i32 %v0_ac88 to i8
  %v2_ac88 = load i32, i32* @r7, align 4
  %v3_ac88 = add i32 %v2_ac88, 7
  %v4_ac88 = inttoptr i32 %v3_ac88 to i8*
  store i8 %v1_ac88, i8* %v4_ac88, align 1
  %v0_ac8c = load i32, i32* @r6, align 4
  store i32 %v0_ac8c, i32* %r0.global-to-local, align 4
  %v4_ac90 = call i32 @function_e4f4(i32 %v0_ac8c, i32 %v0_ac70, i32 %v5_ac7c, i32 %v1_ab70)
  %v5_ac90 = trunc i32 %v4_ac90 to i8
  store i32 %v4_ac90, i32* %r0.global-to-local, align 4
  %v3_ac94 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac94, i32* %r3.global-to-local, align 4
  %v3_ac98 = mul i32 %v3_ac94, 32
  store i32 %v3_ac98, i32* %r2.global-to-local, align 4
  %v0_ac9c = load i32, i32* @r5, align 4
  %v1_ac9c = add i32 %v0_ac9c, 16
  %v2_ac9c = inttoptr i32 %v1_ac9c to i32*
  %v3_ac9c = load i32, i32* %v2_ac9c, align 4
  store i32 %v3_ac9c, i32* %r1.global-to-local, align 4
  %v5_aca0 = mul i32 %v3_ac94, 24
  store i32 %v5_aca0, i32* %r2.global-to-local, align 4
  %v4_aca435 = udiv i32 %v4_ac90, 256
  %v1_aca8 = trunc i32 %v4_aca435 to i8
  %v2_aca8 = load i32, i32* @r7, align 4
  %v3_aca8 = add i32 %v2_aca8, 7
  %v4_aca8 = inttoptr i32 %v3_aca8 to i8*
  store i8 %v1_aca8, i8* %v4_aca8, align 1
  %v0_acac = load i32, i32* %r2.global-to-local, align 4
  %v1_acac = load i32, i32* @sb, align 4
  %v2_acac = add i32 %v1_acac, %v0_acac
  store i32 %v2_acac, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_acb4 = load i32, i32* @r7, align 4
  %v4_acb4 = add i32 %v3_acb4, 6
  %v5_acb4 = inttoptr i32 %v4_acb4 to i8*
  store i8 %v5_ac90, i8* %v5_acb4, align 1
  %v0_acb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_acb8 = load i32, i32* %lr.global-to-local, align 4
  %v2_acb8 = add i32 %v1_acb8, 4
  %v3_acb8 = inttoptr i32 %v2_acb8 to i32*
  store i32 %v0_acb8, i32* %v3_acb8, align 4
  %v0_acbc = load i32, i32* %r3.global-to-local, align 4
  %v1_acbc = trunc i32 %v0_acbc to i8
  %v2_acbc = load i32, i32* %r2.global-to-local, align 4
  %v3_acbc = load i32, i32* @sb, align 4
  %v4_acbc = add i32 %v3_acbc, %v2_acbc
  %v5_acbc = inttoptr i32 %v4_acbc to i8*
  store i8 %v1_acbc, i8* %v5_acbc, align 1
  %v0_acc0 = load i32, i32* @sl, align 4
  %v1_acc0 = trunc i32 %v0_acc0 to i8
  %v2_acc0 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc0 = add i32 %v2_acc0, 2
  %v4_acc0 = inttoptr i32 %v3_acc0 to i8*
  store i8 %v1_acc0, i8* %v4_acc0, align 1
  %v0_acc4 = load i32, i32* @sl, align 4
  %v1_acc4 = trunc i32 %v0_acc4 to i8
  %v2_acc4 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc4 = add i32 %v2_acc4, 1
  %v4_acc4 = inttoptr i32 %v3_acc4 to i8*
  store i8 %v1_acc4, i8* %v4_acc4, align 1
  %v0_acc8 = load i32, i32* @sl, align 4
  %v1_acc8 = trunc i32 %v0_acc8 to i8
  %v2_acc8 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc8 = add i32 %v2_acc8, 3
  %v4_acc8 = inttoptr i32 %v3_acc8 to i8*
  store i8 %v1_acc8, i8* %v4_acc8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r5, align 4
  store i32 %v0_acd4, i32* %r1.global-to-local, align 4
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v0_acdc = load i32, i32* @fp, align 4
  store i32 %v0_acdc, i32* %r2.global-to-local, align 4
  %v0_ace0 = load i32, i32* %lr.global-to-local, align 4
  %v6_ace8 = inttoptr i32 %v0_acd4 to i32*
  %v7_ace8 = call i32 @function_13e58(i32 %v3_a84c, i32* %v6_ace8, i32 %v0_acdc, i32 16384, i32 %v0_ace0, i32 16)
  %v3_acec = load i32, i32* %stack_var_-40, align 4
  %v1_acf0 = add i32 %v3_acec, 1
  store i32 %v1_acf0, i32* %r0.global-to-local, align 4
  store i32 %v1_a6dc, i32* %r3.global-to-local, align 4
  %v9_acf8 = icmp eq i32 %v1_acf0, %v1_a6dc
  store i1 %v9_acf8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_acf0, i32* %stack_var_-40, align 4
  %v6_ad00 = icmp slt i32 %v1_acf0, %v1_a6dc
  br i1 %v6_ad00, label %dec_label_pc_ad04, label %dec_label_pc_ae54

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ac30, %dec_label_pc_ab60
  %v1_ad18 = phi i32 [ %v1_acf0, %dec_label_pc_ac30 ], [ 0, %dec_label_pc_ab60 ]
  %v5_ad08 = mul i32 %v1_ad18, 24
  %v1_ad0c = load i32, i32* @sb, align 4
  %v2_ad0c = add i32 %v1_ad0c, %v5_ad08
  store i32 %v2_ad0c, i32* %r3.global-to-local, align 4
  store i32 %v2_a708, i32* %r1.global-to-local, align 4
  %v1_ad14 = add i32 %v2_ad0c, 20
  %v2_ad14 = inttoptr i32 %v1_ad14 to i8*
  %v3_ad14 = load i8, i8* %v2_ad14, align 1
  %v4_ad14 = zext i8 %v3_ad14 to i32
  store i32 %v4_ad14, i32* %r2.global-to-local, align 4
  %v4_ad18 = mul i32 %v1_ad18, 4
  %v5_ad18 = add i32 %v4_ad18, %v2_a708
  %v6_ad18 = inttoptr i32 %v5_ad18 to i32*
  %v7_ad18 = load i32, i32* %v6_ad18, align 4
  store i32 %v7_ad18, i32* @r5, align 4
  %v2_ad1c = icmp ugt i8 %v3_ad14, 30
  %v7_ad1c = icmp eq i8 %v3_ad14, 31
  store i1 %v7_ad1c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad20 = add i32 %v7_ad18, 24
  store i32 %v1_ad20, i32* @r8, align 4
  %v1_ad24 = add i32 %v7_ad18, 38
  store i32 %v1_ad24, i32* @r6, align 4
  %v1_ad28 = add i32 %v7_ad18, 58
  store i32 %v1_ad28, i32* @r7, align 4
  %v2_ad2c = xor i1 %v7_ad1c, true
  %v3_ad2c = and i1 %v2_ad1c, %v2_ad2c
  br i1 %v3_ad2c, label %dec_label_pc_ab80, label %dec_label_pc_ad30

dec_label_pc_ad30:                                ; preds = %dec_label_pc_ad04
  %v1_ad30 = add i32 %v2_ad0c, 16
  %v2_ad30 = inttoptr i32 %v1_ad30 to i32*
  %v3_ad30 = load i32, i32* %v2_ad30, align 4
  store i32 %v3_ad30, i32* %r4.global-to-local, align 4
  %v0_ad34 = call i32 @function_f8c8()
  store i32 %v0_ad34, i32* %r0.global-to-local, align 4
  %v3_ad38 = load i32, i32* %stack_var_-40, align 4
  %v5_ad40 = mul i32 %v3_ad38, 24
  %v0_ad44 = load i32, i32* %r4.global-to-local, align 4
  %v1_ad48 = load i32, i32* @sb, align 4
  %v2_ad48 = add i32 %v1_ad48, %v5_ad40
  store i32 %v2_ad48, i32* %r1.global-to-local, align 4
  %v1_ad4c = and i32 %v0_ad44, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_ad4c, i32* %r3.global-to-local, align 4
  %v1_ad44 = udiv i32 %v0_ad44, 256
  %v3_ad50 = and i32 %v1_ad44, 65280
  store i32 %v3_ad50, i32* %r2.global-to-local, align 4
  %v3_ad54 = mul i32 %v0_ad44, 16777216
  store i32 %v3_ad54, i32* %ip.global-to-local, align 4
  %v1_ad58 = add i32 %v2_ad48, 20
  %v2_ad58 = inttoptr i32 %v1_ad58 to i8*
  %v3_ad58 = load i8, i8* %v2_ad58, align 1
  %v4_ad58 = zext i8 %v3_ad58 to i32
  store i32 %v4_ad58, i32* %lr.global-to-local, align 4
  %v4_ad5c = mul i32 %v1_ad4c, 256
  %v5_ad5c = or i32 %v4_ad5c, %v3_ad54
  store i32 %v5_ad5c, i32* %ip.global-to-local, align 4
  %v4_ad60 = udiv i32 %v0_ad44, 16777216
  %v5_ad60 = or i32 %v3_ad50, %v4_ad60
  %v2_ad64 = or i32 %v5_ad60, %v5_ad5c
  %v7_ad68 = lshr i32 %v0_ad34, %v4_ad58
  %v8_ad68 = add i32 %v7_ad68, %v2_ad64
  %v3_ad74 = mul i32 %v8_ad68, 16777216
  %v1_ad78 = and i32 %v8_ad68, 65280
  store i32 %v1_ad78, i32* %r0.global-to-local, align 4
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  %v4_ad84 = mul nuw nsw i32 %v1_ad78, 256
  %v5_ad84 = or i32 %v4_ad84, %v3_ad74
  store i32 %v5_ad84, i32* %r1.global-to-local, align 4
  %v2_ad88 = call i32 @llvm.bswap.i32(i32 %v8_ad68)
  store i32 %v2_ad88, i32* %r3.global-to-local, align 4
  store i1 %v7_ab84, i1* %cpsr_z.global-to-local, align 1
  %v1_ad90 = load i32, i32* @r5, align 4
  %v2_ad90 = add i32 %v1_ad90, 16
  %v3_ad90 = inttoptr i32 %v2_ad90 to i32*
  store i32 %v2_ad88, i32* %v3_ad90, align 4
  br i1 %v2_ab84, label %dec_label_pc_ad98, label %dec_label_pc_ab8c

dec_label_pc_ad98:                                ; preds = %dec_label_pc_ad30, %dec_label_pc_ab80
  %v0_ad98 = call i32 @function_f8c8()
  store i32 %v0_ad98, i32* %r0.global-to-local, align 4
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ada8, i1* %cpsr_z.global-to-local, align 1
  %v1_adac = load i32, i32* @r5, align 4
  %v2_adac = add i32 %v1_adac, 12
  %v3_adac = inttoptr i32 %v2_adac to i32*
  store i32 %v0_ad98, i32* %v3_adac, align 4
  br i1 %v3_ada8, label %dec_label_pc_adb4, label %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge

dec_label_pc_ad98.dec_label_pc_aba0_crit_edge:    ; preds = %dec_label_pc_ad98
  %v1_aba4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aba0

dec_label_pc_adb4:                                ; preds = %dec_label_pc_ad98, %dec_label_pc_ab8c
  %v0_adb4 = call i32 @function_f8c8()
  %v3_adbc = urem i32 %v0_adb4, 65536
  store i32 %v3_adbc, i32* %r0.global-to-local, align 4
  %v1_adc4 = sub nsw i32 999, %v3_adbc
  store i32 %v1_adc4, i32* %r2.global-to-local, align 4
  %v3_adc8 = sdiv i32 %v1_adc4, 256
  store i32 %v3_adc8, i32* %r1.global-to-local, align 4
  %v3_adcc34 = udiv i32 %v3_adbc, 256
  store i32 %v3_adcc34, i32* %r3.global-to-local, align 4
  %v1_add0 = trunc i32 %v3_adcc34 to i8
  %v2_add0 = load i32, i32* @r5, align 4
  %v3_add0 = add i32 %v2_add0, 5
  %v4_add0 = inttoptr i32 %v3_add0 to i8*
  store i8 %v1_add0, i8* %v4_add0, align 1
  %v0_add4 = load i32, i32* %r0.global-to-local, align 4
  %v1_add4 = trunc i32 %v0_add4 to i8
  %v2_add4 = load i32, i32* @r5, align 4
  %v3_add4 = add i32 %v2_add4, 4
  %v4_add4 = inttoptr i32 %v3_add4 to i8*
  store i8 %v1_add4, i8* %v4_add4, align 1
  %v0_add8 = load i32, i32* %r1.global-to-local, align 4
  %v1_add8 = trunc i32 %v0_add8 to i8
  %v2_add8 = load i32, i32* @r6, align 4
  %v3_add8 = add i32 %v2_add8, 5
  %v4_add8 = inttoptr i32 %v3_add8 to i8*
  store i8 %v1_add8, i8* %v4_add8, align 1
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v1_ade0 = load i32, i32* @r4, align 4
  %v9_ade0 = icmp eq i32 %v3_a8a8, %v1_ade0
  store i1 %v9_ade0, i1* %cpsr_z.global-to-local, align 1
  %v0_ade4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ade4 = trunc i32 %v0_ade4 to i8
  %v2_ade4 = load i32, i32* @r6, align 4
  %v3_ade4 = add i32 %v2_ade4, 4
  %v4_ade4 = inttoptr i32 %v3_ade4 to i8*
  store i8 %v1_ade4, i8* %v4_ade4, align 1
  %v0_ade8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ade8, label %dec_label_pc_adec, label %dec_label_pc_adb4.dec_label_pc_abac_crit_edge

dec_label_pc_adb4.dec_label_pc_abac_crit_edge:    ; preds = %dec_label_pc_adb4
  %v1_abb0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_abac

dec_label_pc_adec:                                ; preds = %dec_label_pc_adb4, %dec_label_pc_aba0
  %v0_adec = call i32 @function_f8c8()
  %v1_adec = trunc i32 %v0_adec to i8
  store i32 %v0_adec, i32* %r0.global-to-local, align 4
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v4_adf4 = sdiv i32 %v0_adec, 256
  store i32 %v4_adf4, i32* %r3.global-to-local, align 4
  %v1_adf8 = load i32, i32* @r4, align 4
  %v9_adf8 = icmp eq i32 %v3_a8ac, %v1_adf8
  store i1 %v9_adf8, i1* %cpsr_z.global-to-local, align 1
  %v3_adfc = load i32, i32* @r5, align 4
  %v4_adfc = add i32 %v3_adfc, 58
  %v5_adfc = inttoptr i32 %v4_adfc to i8*
  store i8 %v1_adec, i8* %v5_adfc, align 1
  %v0_ae00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae00 = trunc i32 %v0_ae00 to i8
  %v2_ae00 = load i32, i32* @r7, align 4
  %v3_ae00 = add i32 %v2_ae00, 1
  %v4_ae00 = inttoptr i32 %v3_ae00 to i8*
  store i8 %v1_ae00, i8* %v4_ae00, align 1
  %v0_ae04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae04, label %dec_label_pc_ae08, label %dec_label_pc_abb8

dec_label_pc_ae08:                                ; preds = %dec_label_pc_adec, %dec_label_pc_abac
  %v0_ae08 = call i32 @function_f8c8()
  %v1_ae08 = trunc i32 %v0_ae08 to i8
  store i32 %v0_ae08, i32* %r0.global-to-local, align 4
  %v4_ae0c36 = udiv i32 %v0_ae08, 256
  %v1_ae10 = trunc i32 %v4_ae0c36 to i8
  %v2_ae10 = load i32, i32* @r7, align 4
  %v3_ae10 = add i32 %v2_ae10, 3
  %v4_ae10 = inttoptr i32 %v3_ae10 to i8*
  store i8 %v1_ae10, i8* %v4_ae10, align 1
  store i32 %v1_a8a0, i32* %r3.global-to-local, align 4
  store i1 %v2_ae18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae18, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_ae08
  %v1_ae1c = load i32, i32* @r5, align 4
  %v2_ae1c = add i32 %v1_ae1c, 16
  %v3_ae1c = inttoptr i32 %v2_ae1c to i32*
  %v4_ae1c = load i32, i32* %v3_ae1c, align 4
  store i32 %v4_ae1c, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_ae08, %bb100
  %v3_ae20 = load i32, i32* @r7, align 4
  %v4_ae20 = add i32 %v3_ae20, 2
  %v5_ae20 = inttoptr i32 %v4_ae20 to i8*
  store i8 %v1_ae08, i8* %v5_ae20, align 1
  %v0_ae24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae24, label %dec_label_pc_ae2c, label %bb102

bb102:                                            ; preds = %bb101
  %v1_ae24 = load i32, i32* %r3.global-to-local, align 4
  %v2_ae24 = load i32, i32* @r6, align 4
  %v3_ae24 = add i32 %v2_ae24, 16
  %v4_ae24 = inttoptr i32 %v3_ae24 to i32*
  store i32 %v1_ae24, i32* %v4_ae24, align 4
  br label %dec_label_pc_abcc

dec_label_pc_ae2c:                                ; preds = %dec_label_pc_abb8, %bb101
  %v0_ae2c = call i32 @function_f8c8()
  store i32 %v0_ae2c, i32* %r0.global-to-local, align 4
  %v1_ae30 = load i32, i32* @r6, align 4
  %v2_ae30 = add i32 %v1_ae30, 16
  %v3_ae30 = inttoptr i32 %v2_ae30 to i32*
  store i32 %v0_ae2c, i32* %v3_ae30, align 4
  br label %dec_label_pc_abcc

dec_label_pc_ae38:                                ; preds = %dec_label_pc_abcc
  %v0_ae38 = load i32, i32* @r7, align 4
  %v1_ae38 = add i32 %v0_ae38, 8
  store i32 %v1_ae38, i32* @r4, align 4
  store i32 %v1_ae38, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r1.global-to-local, align 4
  %v2_ae44 = call i32 @function_f97c(i32 %v1_ae38, i32 %v5_a7d4)
  store i32 %v2_ae44, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r2.global-to-local, align 4
  %v0_ae4c = load i32, i32* @sl, align 4
  %v1_ae4c = trunc i32 %v0_ae4c to i8
  %v2_ae4c = load i32, i32* @r4, align 4
  %v4_ae4c = add i32 %v2_ae4c, %v5_a7d4
  %v5_ae4c = inttoptr i32 %v4_ae4c to i8*
  store i8 %v1_ae4c, i8* %v5_ae4c, align 1
  br label %dec_label_pc_ac30

dec_label_pc_ae54:                                ; preds = %dec_label_pc_ac30, %dec_label_pc_ab4c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae58 = call i32 @function_138a0(i32* null)
  store i32 %v2_ae58, i32* %r0.global-to-local, align 4
  store i32 %v2_a838, i32* %r1.global-to-local, align 4
  %v9_ae60 = icmp eq i32 %v2_a838, %v2_ae58
  store i1 %v9_ae60, i1* %cpsr_z.global-to-local, align 1
  %v6_ae64 = icmp slt i32 %v2_a838, %v2_ae58
  br i1 %v6_ae64, label %dec_label_pc_ae68, label %dec_label_pc_ab4c

dec_label_pc_ae68:                                ; preds = %dec_label_pc_ae54, %dec_label_pc_a6d8, %dec_label_pc_ae70
  %v29_ae6c = phi i32 [ %v3_a84c, %dec_label_pc_a6d8 ], [ %v1_ae74, %dec_label_pc_ae70 ], [ %v2_ae58, %dec_label_pc_ae54 ]
  store i32 %v3_a6d8, i32* %r4.global-to-local, align 4
  store i32 %v15_a6d8, i32* %r8.global-to-local, align 4
  store i32 %v21_a6d8, i32* %sl.global-to-local, align 4
  store i32 %v24_a6d8, i32* %fp.global-to-local, align 4
  ret i32 %v29_ae6c

dec_label_pc_ae70:                                ; preds = %dec_label_pc_a85c
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v1_ae74 = call i32 @function_135d0(i32 %v3_a84c)
  store i32 %v1_ae74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ae68

; uselistorder directives
  uselistorder i32 %v1_ae74, { 1, 0 }
  uselistorder i32 %v0_ae08, { 0, 2, 1 }
  uselistorder i32 %v0_adec, { 0, 2, 1 }
  uselistorder i32 %v3_adbc, { 0, 2, 1 }
  uselistorder i32 %v2_ad88, { 1, 0 }
  uselistorder i32 %v8_ad68, { 1, 2, 0 }
  uselistorder i32 %v3_ad54, { 1, 0 }
  uselistorder i32 %v0_ad44, { 1, 0, 2, 3 }
  uselistorder i32 %v7_ad18, { 2, 1, 0, 3 }
  uselistorder i32 %v1_acf0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_ac94, { 1, 0, 2 }
  uselistorder i32 %v4_ac90, { 0, 2, 1 }
  uselistorder i32 %v0_ac70, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_ac60, { 0, 2, 1 }
  uselistorder i32 %v4_ac44, { 1, 0 }
  uselistorder i1 %v2_ae18, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ada8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_ab84, { 2, 1, 0 }
  uselistorder i32 %v1_ab70, { 1, 0, 2 }
  uselistorder i32 %v0_aaec, { 1, 0, 2 }
  uselistorder i32 %v3_a97c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0, 2 }
  uselistorder i32 %v1_a8f8, { 1, 0 }
  uselistorder i32 %v1_a8f0, { 2, 1, 0 }
  uselistorder i32 %v1_a8ec, { 1, 0 }
  uselistorder i32 %v1_a8e8, { 1, 0 }
  uselistorder i32 %v1_a8dc, { 1, 0 }
  uselistorder i32 %v3_a8d4, { 2, 0, 1 }
  uselistorder i32 %v3_a8a4, { 0, 1, 3, 2 }
  uselistorder i32 %v1_a8a0, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_a89c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a894, { 0, 2, 1 }
  uselistorder i32 %v0_a890, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a87c, { 1, 0 }
  uselistorder i1 %v7_a850, { 1, 0 }
  uselistorder i32 %v3_a84c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_a838, { 2, 1, 0 }
  uselistorder i32 %v5_a828, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_a7f4, { 1, 2, 0 }
  uselistorder i32 %v5_a7d4, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_a788, { 1, 0 }
  uselistorder i8 %v5_a778, { 1, 0 }
  uselistorder i32 %v5_a75c, { 1, 0 }
  uselistorder i32 %v6_a720, { 1, 0 }
  uselistorder i32 %v2_a708, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a6dc, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 21, 20, 22, 23, 24, 25, 27, 26, 31, 28, 29, 30, 34, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_ae68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae2c, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_ac30, { 1, 0 }
  uselistorder label %dec_label_pc_abcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab4c, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ae80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ae80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_ae80 = load i32, i32* @r4, align 4
  %v15_ae80 = load i32, i32* @r8, align 4
  %v21_ae80 = load i32, i32* @sl, align 4
  %v24_ae80 = load i32, i32* @fp, align 4
  %v1_ae84 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_ae84, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_aea0 = urem i32 %arg4, 256
  store i32 %v1_aea0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_aeb0 = call i32 @function_141a8(i32 %v1_ae84, i32 4)
  %v0_aeb4 = load i32, i32* @r5, align 4
  store i32 %v0_aeb4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_aec0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_aec0, i32* %r3.global-to-local, align 4
  %v0_aec4 = load i32, i32* @r4, align 4
  store i32 %v0_aec4, i32* %r0.global-to-local, align 4
  %v5_aec8 = inttoptr i32 %v0_aeb4 to i32*
  %v6_aec8 = call i32 @function_a054(i32 %v0_aec4, i32* %v5_aec8, i32 2, i32 %v0_aec0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_aee0 = load i32, i32* @r5, align 4
  store i32 %v0_aee0, i32* %r1.global-to-local, align 4
  %v0_aee4 = load i32, i32* @r4, align 4
  store i32 %v0_aee4, i32* %r0.global-to-local, align 4
  %v5_aee8 = trunc i32 %v6_aec8 to i8
  %v6_aeec = inttoptr i32 %v0_aee0 to i32*
  %v7_aeec = call i32 @function_a054(i32 %v0_aee4, i32* %v6_aeec, i32 3, i32 65535)
  %v0_aef0 = load i32, i32* @r5, align 4
  store i32 %v0_aef0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_aeec, i32* @r7, align 4
  %v0_af00 = load i32, i32* @r4, align 4
  store i32 %v0_af00, i32* %r0.global-to-local, align 4
  %v4_af04 = inttoptr i32 %v0_aef0 to i32*
  %v5_af04 = call i32 @function_a054(i32 %v0_af00, i32* %v4_af04, i32 4, i32 64)
  %v0_af10 = load i32, i32* @r5, align 4
  store i32 %v0_af10, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af1c = load i32, i32* @r4, align 4
  store i32 %v0_af1c, i32* %r0.global-to-local, align 4
  %v5_af20 = trunc i32 %v5_af04 to i8
  %v6_af24 = inttoptr i32 %v0_af10 to i32*
  %v7_af24 = call i32 @function_a054(i32 %v0_af1c, i32* %v6_af24, i32 5, i32 1)
  %v1_af30 = urem i32 %v7_af24, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_af3c = load i32, i32* @r5, align 4
  store i32 %v0_af3c, i32* %r1.global-to-local, align 4
  %v0_af40 = load i32, i32* @r4, align 4
  store i32 %v0_af40, i32* %r0.global-to-local, align 4
  %v5_af48 = inttoptr i32 %v0_af3c to i32*
  %v6_af48 = call i32 @function_a054(i32 %v0_af40, i32* %v5_af48, i32 6, i32 65535)
  %v0_af54 = load i32, i32* @r5, align 4
  store i32 %v0_af54, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_af60 = load i32, i32* @r4, align 4
  store i32 %v0_af60, i32* %r0.global-to-local, align 4
  %v5_af64 = inttoptr i32 %v0_af54 to i32*
  %v6_af64 = call i32 @function_a054(i32 %v0_af60, i32* %v5_af64, i32 7, i32 65535)
  %v0_af68 = load i32, i32* @r5, align 4
  store i32 %v0_af68, i32* %r1.global-to-local, align 4
  %v0_af6c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_af6c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_af64, i32* @sl, align 4
  %v0_af78 = load i32, i32* @r4, align 4
  store i32 %v0_af78, i32* %r0.global-to-local, align 4
  %v4_af7c = inttoptr i32 %v0_af68 to i32*
  %v5_af7c = call i32 @function_a054(i32 %v0_af78, i32* %v4_af7c, i32 %v0_af6c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af8c = load i32, i32* @r5, align 4
  store i32 %v0_af8c, i32* %r1.global-to-local, align 4
  %v0_af90 = load i32, i32* @r4, align 4
  store i32 %v0_af90, i32* %r0.global-to-local, align 4
  %v4_af94 = inttoptr i32 %v0_af8c to i32*
  %v5_af94 = call i32 @function_a054(i32 %v0_af90, i32* %v4_af94, i32 1, i32 1)
  %v1_af9c = urem i32 %v5_af94, 256
  %v0_afa0 = load i32, i32* @r5, align 4
  store i32 %v0_afa0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_afa8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_afa8, i32* %r3.global-to-local, align 4
  %v0_afac = load i32, i32* @r4, align 4
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v5_afb4 = inttoptr i32 %v0_afa0 to i32*
  %v6_afb4 = call i32 @function_a054(i32 %v0_afac, i32* %v5_afb4, i32 18, i32 %v0_afa8)
  %v0_afbc = load i32, i32* @r5, align 4
  store i32 %v0_afbc, i32* %r1.global-to-local, align 4
  %v2_afc0 = load i32, i32* @global_var_1f238.83, align 4
  store i32 %v2_afc0, i32* %r3.global-to-local, align 4
  store i32 %v6_afb4, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_afcc = load i32, i32* @r4, align 4
  store i32 %v0_afcc, i32* %r0.global-to-local, align 4
  %v4_afd0 = inttoptr i32 %v0_afbc to i32*
  %v5_afd0 = call i32 @function_a054(i32 %v0_afcc, i32* %v4_afd0, i32 24, i32 %v2_afc0)
  %v0_afd8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_afd8, i32* %r0.global-to-local, align 4
  %v1_afdc = inttoptr i32 %v0_afd8 to i32*
  %v2_afdc = call i32 @function_138a0(i32* %v1_afdc)
  %v1_afe0 = load i32, i32* @r6, align 4
  %v2_afe0 = add i32 %v1_afe0, %v2_afdc
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_aff4 = call i32 @function_13ebc(i32 2, i32 3, i32 6)
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v7_aff8 = icmp eq i32 %v3_aff4, -1
  store i1 %v7_aff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aff8, label %dec_label_pc_b5a0, label %dec_label_pc_b004

dec_label_pc_b004:                                ; preds = %dec_label_pc_ae80
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b00c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b00c, i32* %r3.global-to-local, align 4
  %v0_b014 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b014, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b020 = call i32 @function_13e8c(i32 %v3_aff4, i32 %v0_b014, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b020, i32* %r0.global-to-local, align 4
  %v7_b024 = icmp eq i32 %v6_b020, -1
  store i1 %v7_b024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b024, label %dec_label_pc_b5a8, label %dec_label_pc_b02c

dec_label_pc_b02c:                                ; preds = %dec_label_pc_b004
  %v0_b038 = load i32, i32* @sl, align 4
  %v3_b038 = mul i32 %v0_b038, 65536
  store i32 %v3_b038, i32* %sl.global-to-local, align 4
  %v0_b03c = load i32, i32* @r7, align 4
  %v2_b044 = icmp eq i32 %v1_ae84, 0
  store i1 %v2_b044, i1* %cpsr_z.global-to-local, align 1
  %v0_b048 = load i32, i32* @r8, align 4
  %v1_b048 = urem i32 %v0_b048, 256
  store i32 %v1_b048, i32* %r8.global-to-local, align 4
  %v3_b04c = urem i32 %v0_b03c, 65536
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  %v3_b050 = urem i32 %v6_af48, 65536
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v3_b054 = urem i32 %v0_b038, 65536
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v0_b060 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b060, i32* %stack_var_-40, align 4
  br i1 %v2_b044, label %dec_label_pc_b2e0.preheader, label %dec_label_pc_b074

dec_label_pc_b074:                                ; preds = %dec_label_pc_b02c
  %v3_b07c = mul i32 %v5_af7c, 65536
  %v1_b084 = urem i32 %v6_af48, 256
  %v1_b08c = add i32 %v3_b07c, 524288
  %v1_b090 = add i32 %v3_b07c, 3407872
  %v1_b094 = urem i32 %v0_b038, 256
  %v1_b098 = add i32 %v3_b07c, 1835008
  %v0_b03c.not = or i32 %v0_b03c, -65536
  %v1_b0a0 = xor i32 %v0_b03c.not, 65535
  %v3_b0a4 = udiv i32 %v1_b098, 256
  %tmp77 = udiv i32 %v0_b03c, 256
  %v1_b0b8 = and i32 %v3_b0a4, 65280
  store i32 %v1_b0b8, i32* %r0.global-to-local, align 4
  %v3_b0dc = mul nuw nsw i32 %v1_b084, 256
  %tmp78 = udiv i32 %v6_af48, 256
  %v4_b0e4 = urem i32 %tmp78, 256
  %v5_b0e4 = or i32 %v4_b0e4, %v3_b0dc
  store i32 %v5_b0e4, i32* @lr, align 4
  %tmp79 = mul nsw i32 %v1_b0a0, 256
  %v3_b0ec = mul nuw nsw i32 %v1_b094, 256
  %sext23 = mul i32 %tmp77, 16777216
  %v4_b0f4 = sdiv i32 %sext23, 16777216
  %v4_b0bc = sdiv i32 %v1_b090, 16777216
  %tmp80 = udiv i32 %v0_b038, 256
  %v4_b0fc = urem i32 %tmp80, 256
  %v5_b0fc = or i32 %v4_b0fc, %v3_b0ec
  store i32 %v5_b0fc, i32* @r7, align 4
  %v1_b100 = and i32 %tmp79, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %v4_b104 = sdiv i32 %v1_b098, 16777216
  %v3_b108 = udiv i32 %v1_b08c, 256
  %tmp81 = udiv i32 %v1_b0a0, 256
  %v4_b10c = urem i32 %tmp81, 256
  %v5_b10c = or i32 %v4_b10c, %v1_b100
  store i32 %v5_b10c, i32* @r6, align 4
  %v3_b110 = ashr i32 %v1_b090, 31
  %v3_b114 = ashr i32 %sext23, 31
  %v1_b118 = and i32 %v3_b108, 65280
  store i32 %v1_b118, i32* @r5, align 4
  %v3_b124 = ashr i32 %v1_b098, 31
  store i32 %v3_b124, i32* %r2.global-to-local, align 4
  %v3_b12832 = udiv i32 %v1_b100, 256
  store i32 %v3_b12832, i32* %r3.global-to-local, align 4
  store i32 %v1_b084, i32* %r1.global-to-local, align 4
  %v4_b130 = udiv i32 %v1_b08c, 16777216
  %v5_b130 = or i32 %v4_b130, %v1_b118
  store i32 %v5_b130, i32* %r8.global-to-local, align 4
  %v5_b134 = trunc i32 %tmp81 to i8
  store i32 %v0_b060, i32* @r4, align 4
  %v3_b14c33 = udiv i32 %v1_b118, 256
  store i32 %v3_b14c33, i32* %sl.global-to-local, align 4
  store i32 %v1_b094, i32* %fp.global-to-local, align 4
  %v4_b1a0 = sext i8 %v5_af20 to i32
  %sext15 = mul i32 %v1_b100, 65536
  %v4_b25c = sdiv i32 %sext15, 16777216
  %v2_b28c = icmp eq i32 %v1_b048, 0
  %sext16 = mul i32 %v6_af48, 16777216
  %v4_b2a0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp78, 16777216
  %v4_b2bc = sdiv i32 %sext17, 16777216
  %v1_b1b8 = trunc i32 %v4_b0f4 to i8
  br label %dec_label_pc_b154

dec_label_pc_b154:                                ; preds = %bb92, %dec_label_pc_b074
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b160 = call i32 @function_141a8(i32 1510, i32 4)
  store i32 %v2_b160, i32* %r0.global-to-local, align 4
  store i32 %v2_aeb0, i32* %r2.global-to-local, align 4
  %v3_b168 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b168, i32* %r3.global-to-local, align 4
  %v2_b16c = load i32, i32* @r4, align 4
  %v5_b16c = mul i32 %v2_b16c, 4
  %v6_b16c = add i32 %v5_b16c, %v2_aeb0
  %v7_b16c = inttoptr i32 %v6_b16c to i32*
  store i32 %v2_b160, i32* %v7_b16c, align 4
  %v0_b170 = load i32, i32* %r2.global-to-local, align 4
  %v1_b170 = load i32, i32* %r3.global-to-local, align 4
  %v4_b170 = mul i32 %v1_b170, 4
  %v5_b170 = add i32 %v4_b170, %v0_b170
  %v6_b170 = inttoptr i32 %v5_b170 to i32*
  %v7_b170 = load i32, i32* %v6_b170, align 4
  store i32 %v7_b170, i32* %r4.global-to-local, align 4
  %v1_b174 = inttoptr i32 %v7_b170 to i8*
  %v2_b174 = load i8, i8* %v1_b174, align 1
  %tmp = urem i8 %v2_b174, 16
  %v1_b178 = zext i8 %tmp to i32
  %v1_b17c = or i32 %v1_b178, 64
  store i32 %v1_b17c, i32* %r2.global-to-local, align 4
  %v1_b180 = trunc i32 %v1_b17c to i8
  store i8 %v1_b180, i8* %v1_b174, align 1
  %v0_b184 = load i32, i32* %r4.global-to-local, align 4
  %v1_b184 = inttoptr i32 %v0_b184 to i8*
  %v2_b184 = load i8, i8* %v1_b184, align 1
  %v1_b188 = and i8 %v2_b184, -16
  %v1_b18c = or i8 %v1_b188, 5
  store i32 %v1_af30, i32* %r1.global-to-local, align 4
  store i8 %v1_b18c, i8* %v1_b184, align 1
  %v2_b19c = load i32, i32* %r4.global-to-local, align 4
  %v3_b19c = add i32 %v2_b19c, 1
  %v4_b19c = inttoptr i32 %v3_b19c to i8*
  store i8 %v5_aee8, i8* %v4_b19c, align 1
  %v2_b1a4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1a4 = add i32 %v2_b1a4, 8
  %v4_b1a4 = inttoptr i32 %v3_b1a4 to i8*
  store i8 %v5_af20, i8* %v4_b1a4, align 1
  store i32 %v4_b0f4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b1b0 = load i32, i32* %r1.global-to-local, align 4
  %v9_b1b0 = icmp eq i32 %v0_b1b0, 0
  store i1 %v9_b1b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b110, i32* %r2.global-to-local, align 4
  %v2_b1b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1b8 = add i32 %v2_b1b8, 4
  %v4_b1b8 = inttoptr i32 %v3_b1b8 to i8*
  store i8 %v1_b1b8, i8* %v4_b1b8, align 1
  store i32 %v4_b0bc, i32* %r1.global-to-local, align 4
  %v0_b1c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1c0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b154
  %v1_b1c0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b1c0, i32* %r3.global-to-local, align 4
  %v2_b1c4 = trunc i32 %v1_b1c0 to i8
  %v3_b1c4 = load i32, i32* %r4.global-to-local, align 4
  %v4_b1c4 = add i32 %v3_b1c4, 7
  %v5_b1c4 = inttoptr i32 %v4_b1c4 to i8*
  store i8 %v2_b1c4, i8* %v5_b1c4, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b154, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_b1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_b1cc = trunc i32 %v0_b1cc to i8
  %v2_b1cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1cc = add i32 %v2_b1cc, 3
  %v4_b1cc = inttoptr i32 %v3_b1cc to i8*
  store i8 %v1_b1cc, i8* %v4_b1cc, align 1
  %v0_b1d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b1d0 = trunc i32 %v0_b1d0 to i8
  %v2_b1d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1d0 = add i32 %v2_b1d0, 2
  %v4_b1d0 = inttoptr i32 %v3_b1d0 to i8*
  store i8 %v1_b1d0, i8* %v4_b1d0, align 1
  %v0_b1d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1d4, label %bb83, label %bb82

bb82:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %.thread, %bb82
  store i32 %v3_b114, i32* %r1.global-to-local, align 4
  %v0_b1dc = load i32, i32* %r3.global-to-local, align 4
  %v1_b1dc = trunc i32 %v0_b1dc to i8
  %v2_b1dc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1dc = add i32 %v2_b1dc, 9
  %v4_b1dc = inttoptr i32 %v3_b1dc to i8*
  store i8 %v1_b1dc, i8* %v4_b1dc, align 1
  %v0_b1e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1e0, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_b1e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_b1e0 = trunc i32 %v1_b1e0 to i8
  %v3_b1e0 = load i32, i32* %r4.global-to-local, align 4
  %v4_b1e0 = add i32 %v3_b1e0, 6
  %v5_b1e0 = inttoptr i32 %v4_b1e0 to i8*
  store i8 %v2_b1e0, i8* %v5_b1e0, align 1
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  %v3_b1e4 = load i32, i32* %stack_var_-40, align 4
  %v5_b1ec = mul i32 %v3_b1e4, 24
  store i32 %v5_b1ec, i32* %r3.global-to-local, align 4
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  %v1_b1f4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b1f4 = add i32 %v1_b1f4, 12
  %v3_b1f4 = inttoptr i32 %v2_b1f4 to i32*
  store i32 %v5_afd0, i32* %v3_b1f4, align 4
  %v0_b1f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b1f8 = load i32, i32* @sb, align 4
  %v2_b1f8 = add i32 %v1_b1f8, %v0_b1f8
  store i32 %v2_b1f8, i32* %r3.global-to-local, align 4
  %v0_b1fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b1fc = trunc i32 %v0_b1fc to i8
  %v2_b1fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1fc = add i32 %v2_b1fc, 5
  %v4_b1fc = inttoptr i32 %v3_b1fc to i8*
  store i8 %v1_b1fc, i8* %v4_b1fc, align 1
  %v0_b200 = load i32, i32* %r3.global-to-local, align 4
  %v1_b200 = add i32 %v0_b200, 16
  %v2_b200 = inttoptr i32 %v1_b200 to i32*
  %v3_b200 = load i32, i32* %v2_b200, align 4
  store i32 %v3_b200, i32* %r2.global-to-local, align 4
  %v0_b204 = load i32, i32* %r4.global-to-local, align 4
  %v1_b204 = add i32 %v0_b204, 20
  store i32 %v1_b204, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b20c = load i32, i32* %r0.global-to-local, align 4
  %v1_b20c = trunc i32 %v0_b20c to i8
  %v3_b20c = add i32 %v0_b204, 23
  %v4_b20c = inttoptr i32 %v3_b20c to i8*
  store i8 %v1_b20c, i8* %v4_b20c, align 1
  %v0_b210 = load i32, i32* %r3.global-to-local, align 4
  %v1_b210 = trunc i32 %v0_b210 to i8
  %v2_b210 = load i32, i32* %r1.global-to-local, align 4
  %v3_b210 = add i32 %v2_b210, 2
  %v4_b210 = inttoptr i32 %v3_b210 to i8*
  store i8 %v1_b210, i8* %v4_b210, align 1
  %v0_b214 = load i32, i32* %r4.global-to-local, align 4
  %v1_b214 = add i32 %v0_b214, 24
  %v2_b214 = inttoptr i32 %v1_b214 to i8*
  %v3_b214 = load i8, i8* %v2_b214, align 1
  %tmp98 = urem i8 %v3_b214, 16
  %v1_b218 = zext i8 %tmp98 to i32
  %v1_b21c = or i32 %v1_b218, 64
  store i32 %v1_b21c, i32* %r3.global-to-local, align 4
  %v1_b220 = trunc i32 %v1_b21c to i8
  store i8 %v1_b220, i8* %v2_b214, align 1
  %v0_b224 = load i32, i32* %r2.global-to-local, align 4
  %v1_b224 = load i32, i32* %r4.global-to-local, align 4
  %v2_b224 = add i32 %v1_b224, 16
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v0_b224, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* %r4.global-to-local, align 4
  %v1_b228 = add i32 %v0_b228, 24
  %v2_b228 = inttoptr i32 %v1_b228 to i8*
  %v3_b228 = load i8, i8* %v2_b228, align 1
  %v1_b22c = and i8 %v3_b228, -16
  %v1_b230 = or i8 %v1_b22c, 5
  store i8 %v1_b230, i8* %v2_b228, align 1
  %v0_b23c = load i32, i32* %r4.global-to-local, align 4
  %v1_b23c = add i32 %v0_b23c, 24
  store i32 %v1_b23c, i32* @r5, align 4
  %v3_b240 = add i32 %v0_b23c, 25
  %v4_b240 = inttoptr i32 %v3_b240 to i8*
  store i8 %v5_aee8, i8* %v4_b240, align 1
  store i32 %v4_b104, i32* %r1.global-to-local, align 4
  store i32 %tmp81, i32* %r3.global-to-local, align 4
  store i32 %v3_b124, i32* %r2.global-to-local, align 4
  %v2_b250 = load i32, i32* @r5, align 4
  %v3_b250 = add i32 %v2_b250, 4
  %v4_b250 = inttoptr i32 %v3_b250 to i8*
  store i8 %v5_b134, i8* %v4_b250, align 1
  %v0_b254 = load i32, i32* %r1.global-to-local, align 4
  %v1_b254 = trunc i32 %v0_b254 to i8
  %v2_b254 = load i32, i32* @r5, align 4
  %v3_b254 = add i32 %v2_b254, 2
  %v4_b254 = inttoptr i32 %v3_b254 to i8*
  store i8 %v1_b254, i8* %v4_b254, align 1
  %v0_b258 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b258, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  store i32 %v4_b25c, i32* %r1.global-to-local, align 4
  %v0_b260 = load i32, i32* %r2.global-to-local, align 4
  %v1_b260 = trunc i32 %v0_b260 to i8
  %v2_b260 = load i32, i32* @r5, align 4
  %v3_b260 = add i32 %v2_b260, 3
  %v4_b260 = inttoptr i32 %v3_b260 to i8*
  store i8 %v1_b260, i8* %v4_b260, align 1
  store i32 %v4_b1a0, i32* %r2.global-to-local, align 4
  %v0_b268 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b268, label %bb89, label %bb88

bb88:                                             ; preds = %bb87
  %v1_b268 = load i32, i32* %r3.global-to-local, align 4
  %v2_b268 = trunc i32 %v1_b268 to i8
  %v3_b268 = load i32, i32* @r5, align 4
  %v4_b268 = add i32 %v3_b268, 6
  %v5_b268 = inttoptr i32 %v4_b268 to i8*
  store i8 %v2_b268, i8* %v5_b268, align 1
  br label %bb89

bb89:                                             ; preds = %bb87, %bb88
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b270 = load i32, i32* %r1.global-to-local, align 4
  %v1_b270 = trunc i32 %v0_b270 to i8
  %v2_b270 = load i32, i32* @r5, align 4
  %v3_b270 = add i32 %v2_b270, 5
  %v4_b270 = inttoptr i32 %v3_b270 to i8*
  store i8 %v1_b270, i8* %v4_b270, align 1
  %v0_b274 = load i32, i32* %r2.global-to-local, align 4
  %v1_b274 = trunc i32 %v0_b274 to i8
  %v2_b274 = load i32, i32* @r5, align 4
  %v3_b274 = add i32 %v2_b274, 8
  %v4_b274 = inttoptr i32 %v3_b274 to i8*
  store i8 %v1_b274, i8* %v4_b274, align 1
  %v0_b278 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b278, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_b278 = load i32, i32* %r0.global-to-local, align 4
  %v2_b278 = trunc i32 %v1_b278 to i8
  %v3_b278 = load i32, i32* @r5, align 4
  %v4_b278 = add i32 %v3_b278, 7
  %v5_b278 = inttoptr i32 %v4_b278 to i8*
  store i8 %v2_b278, i8* %v5_b278, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_b27c = load i32, i32* %r3.global-to-local, align 4
  %v1_b27c = trunc i32 %v0_b27c to i8
  %v2_b27c = load i32, i32* @r5, align 4
  %v3_b27c = add i32 %v2_b27c, 9
  %v4_b27c = inttoptr i32 %v3_b27c to i8*
  store i8 %v1_b27c, i8* %v4_b27c, align 1
  %v0_b280 = call i32 @function_f8c8()
  store i32 %v0_b280, i32* %r0.global-to-local, align 4
  store i32 %v1_b048, i32* %r1.global-to-local, align 4
  store i1 %v2_b28c, i1* %cpsr_z.global-to-local, align 1
  %v1_b290 = sub i32 1023, %v0_b280
  store i32 %v1_b290, i32* %r3.global-to-local, align 4
  br i1 %v2_b28c, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb91
  %v2_b298 = load i32, i32* @r5, align 4
  %v3_b298 = add i32 %v2_b298, 16
  %v4_b298 = inttoptr i32 %v3_b298 to i32*
  store i32 %v1_b290, i32* %v4_b298, align 4
  br label %bb92

.thread19:                                        ; preds = %bb91
  %v1_b294 = load i32, i32* %r4.global-to-local, align 4
  %v2_b294 = add i32 %v1_b294, 16
  %v3_b294 = inttoptr i32 %v2_b294 to i32*
  %v4_b294 = load i32, i32* %v3_b294, align 4
  store i32 %v4_b294, i32* %r3.global-to-local, align 4
  %v2_b29c = load i32, i32* @r5, align 4
  %v3_b29c = add i32 %v2_b29c, 16
  %v4_b29c = inttoptr i32 %v3_b29c to i32*
  store i32 %v4_b294, i32* %v4_b29c, align 4
  br label %bb92

bb92:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_b2a0, i32* %r3.global-to-local, align 4
  %v0_b2a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b2a4 = add i32 %v0_b2a4, 44
  store i32 %v1_b2a4, i32* @r6, align 4
  %v1_b2a8 = load i32, i32* @r5, align 4
  %v2_b2a8 = add i32 %v1_b2a8, 12
  %v3_b2a8 = inttoptr i32 %v2_b2a8 to i32*
  store i32 %v0_b280, i32* %v3_b2a8, align 4
  %v0_b2ac = load i32, i32* %r3.global-to-local, align 4
  %v1_b2ac = trunc i32 %v0_b2ac to i8
  %v2_b2ac = load i32, i32* @r6, align 4
  %v3_b2ac = add i32 %v2_b2ac, 1
  %v4_b2ac = inttoptr i32 %v3_b2ac to i8*
  store i8 %v1_b2ac, i8* %v4_b2ac, align 1
  %v3_b2b0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b2b0, i32* %r3.global-to-local, align 4
  store i32 %v1_ae84, i32* %r1.global-to-local, align 4
  %v1_b2b8 = add i32 %v3_b2b0, 1
  store i32 %v1_b2b8, i32* @r4, align 4
  store i32 %v4_b2bc, i32* %r2.global-to-local, align 4
  %v9_b2c0 = icmp eq i32 %v1_b2b8, %v1_ae84
  store i1 %v9_b2c0, i1* %cpsr_z.global-to-local, align 1
  %v0_b2c4 = load i32, i32* %sl.global-to-local, align 4
  %v1_b2c4 = trunc i32 %v0_b2c4 to i8
  %v2_b2c4 = load i32, i32* @r6, align 4
  %v3_b2c4 = add i32 %v2_b2c4, 5
  %v4_b2c4 = inttoptr i32 %v3_b2c4 to i8*
  store i8 %v1_b2c4, i8* %v4_b2c4, align 1
  %v0_b2c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2c8 = trunc i32 %v0_b2c8 to i8
  %v2_b2c8 = load i32, i32* @r6, align 4
  %v3_b2c8 = inttoptr i32 %v2_b2c8 to i8*
  store i8 %v1_b2c8, i8* %v3_b2c8, align 1
  %v0_b2cc = load i32, i32* @r7, align 4
  %v1_b2cc = trunc i32 %v0_b2cc to i8
  %v2_b2cc = load i32, i32* @r6, align 4
  %v3_b2cc = add i32 %v2_b2cc, 2
  %v4_b2cc = inttoptr i32 %v3_b2cc to i8*
  store i8 %v1_b2cc, i8* %v4_b2cc, align 1
  %v0_b2d0 = load i32, i32* %fp.global-to-local, align 4
  %v1_b2d0 = trunc i32 %v0_b2d0 to i8
  %v2_b2d0 = load i32, i32* @r6, align 4
  %v3_b2d0 = add i32 %v2_b2d0, 3
  %v4_b2d0 = inttoptr i32 %v3_b2d0 to i8*
  store i8 %v1_b2d0, i8* %v4_b2d0, align 1
  %v0_b2d4 = load i32, i32* %r8.global-to-local, align 4
  %v1_b2d4 = trunc i32 %v0_b2d4 to i8
  %v2_b2d4 = load i32, i32* @r6, align 4
  %v3_b2d4 = add i32 %v2_b2d4, 4
  %v4_b2d4 = inttoptr i32 %v3_b2d4 to i8*
  store i8 %v1_b2d4, i8* %v4_b2d4, align 1
  %v0_b2d8 = load i32, i32* @r4, align 4
  store i32 %v0_b2d8, i32* %stack_var_-40, align 4
  %v5_b2dc = icmp slt i32 %v1_b2b8, %v1_ae84
  br i1 %v5_b2dc, label %dec_label_pc_b154, label %dec_label_pc_b2e0.preheader

dec_label_pc_b2e0.preheader:                      ; preds = %bb92, %dec_label_pc_b02c
  %v1_b300 = add i32 %v5_af7c, 8
  %v1_b304 = add i32 %v5_af7c, 52
  %v2_b310 = icmp eq i32 %v5_afd0, -1
  %v7_b310 = icmp eq i32 %v5_afd0, -1
  %v3_b4d8 = icmp eq i32 %v3_b04c, 65535
  %v2_b548 = icmp eq i32 %v1_b048, 0
  %v2_b564 = icmp eq i32 %v1_af9c, 0
  br label %dec_label_pc_b2e0

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b2e0.preheader, %dec_label_pc_b58c
  store i32 %v1_ae84, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b044, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b044, label %dec_label_pc_b58c, label %dec_label_pc_b2f4

dec_label_pc_b2f4:                                ; preds = %dec_label_pc_b2e0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_b300, i32* @fp, align 4
  store i32 %v1_b304, i32* @sl, align 4
  br label %dec_label_pc_b438

dec_label_pc_b30c:                                ; preds = %dec_label_pc_b438
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b310, label %dec_label_pc_b4c8, label %dec_label_pc_b318

dec_label_pc_b318:                                ; preds = %dec_label_pc_b460, %dec_label_pc_b30c
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b4d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4d8, label %dec_label_pc_b4e4, label %dec_label_pc_b32c

dec_label_pc_b32c:                                ; preds = %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge, %dec_label_pc_b318
  %v1_b330 = phi i32 [ %v1_b330.pre, %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge ], [ 65535, %dec_label_pc_b318 ]
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v9_b330 = icmp eq i32 %v3_b050, %v1_b330
  store i1 %v9_b330, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b330, label %dec_label_pc_b51c, label %dec_label_pc_b338

dec_label_pc_b338:                                ; preds = %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge, %dec_label_pc_b32c
  %v1_b33c = phi i32 [ %v1_b33c.pre, %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge ], [ %v1_b330, %dec_label_pc_b32c ]
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v9_b33c = icmp eq i32 %v3_b054, %v1_b33c
  store i1 %v9_b33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b33c, label %dec_label_pc_b538, label %dec_label_pc_b344

dec_label_pc_b344:                                ; preds = %dec_label_pc_b51c, %dec_label_pc_b338
  store i32 %v1_b048, i32* %r3.global-to-local, align 4
  store i1 %v2_b548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b548, label %dec_label_pc_b55c, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_b344
  %v1_b34c = load i32, i32* @r5, align 4
  %v2_b34c = add i32 %v1_b34c, 16
  %v3_b34c = inttoptr i32 %v2_b34c to i32*
  %v4_b34c = load i32, i32* %v3_b34c, align 4
  store i32 %v4_b34c, i32* %r3.global-to-local, align 4
  %v2_b350 = load i32, i32* @r6, align 4
  %v3_b350 = add i32 %v2_b350, 16
  %v4_b350 = inttoptr i32 %v3_b350 to i32*
  store i32 %v4_b34c, i32* %v4_b350, align 4
  br label %dec_label_pc_b358

dec_label_pc_b358:                                ; preds = %bb97, %.thread20
  store i32 %v1_af9c, i32* %r1.global-to-local, align 4
  store i1 %v2_b564, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b564, label %dec_label_pc_b364, label %dec_label_pc_b570

dec_label_pc_b364:                                ; preds = %dec_label_pc_b358, %dec_label_pc_b55c, %dec_label_pc_b570
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b368 = load i32, i32* @r8, align 4
  %v1_b368 = trunc i32 %v0_b368 to i8
  %v2_b368 = load i32, i32* @r5, align 4
  %v3_b368 = add i32 %v2_b368, 10
  %v4_b368 = inttoptr i32 %v3_b368 to i8*
  store i8 %v1_b368, i8* %v4_b368, align 1
  %v0_b36c = load i32, i32* @r8, align 4
  %v1_b36c = trunc i32 %v0_b36c to i8
  %v2_b36c = load i32, i32* @r5, align 4
  %v3_b36c = add i32 %v2_b36c, 11
  %v4_b36c = inttoptr i32 %v3_b36c to i8*
  store i8 %v1_b36c, i8* %v4_b36c, align 1
  %v0_b370 = load i32, i32* @r5, align 4
  store i32 %v0_b370, i32* @r0, align 4
  %v2_b374 = call i32 @function_e498(i32 %v0_b370, i32 20)
  %v3_b374 = trunc i32 %v2_b374 to i8
  %v4_b378 = sdiv i32 %v2_b374, 256
  store i32 %v4_b378, i32* %r3.global-to-local, align 4
  %v1_b37c = trunc i32 %v4_b378 to i8
  %v2_b37c = load i32, i32* @r5, align 4
  %v3_b37c = add i32 %v2_b37c, 11
  %v4_b37c = inttoptr i32 %v3_b37c to i8*
  store i8 %v1_b37c, i8* %v4_b37c, align 1
  %v3_b380 = load i32, i32* @r5, align 4
  %v4_b380 = add i32 %v3_b380, 10
  %v5_b380 = inttoptr i32 %v4_b380 to i8*
  store i8 %v3_b374, i8* %v5_b380, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b388 = load i32, i32* @r8, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* @r6, align 4
  %v3_b388 = add i32 %v2_b388, 10
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* @r8, align 4
  %v1_b38c = trunc i32 %v0_b38c to i8
  %v2_b38c = load i32, i32* @r6, align 4
  %v3_b38c = add i32 %v2_b38c, 11
  %v4_b38c = inttoptr i32 %v3_b38c to i8*
  store i8 %v1_b38c, i8* %v4_b38c, align 1
  %v0_b390 = load i32, i32* @r6, align 4
  store i32 %v0_b390, i32* @r0, align 4
  %v2_b394 = call i32 @function_e498(i32 %v0_b390, i32 20)
  %v3_b394 = trunc i32 %v2_b394 to i8
  store i32 %v2_b394, i32* %r0.global-to-local, align 4
  %v4_b398 = sdiv i32 %v2_b394, 256
  store i32 %v4_b398, i32* %r3.global-to-local, align 4
  %v3_b39c = load i32, i32* @r6, align 4
  %v4_b39c = add i32 %v3_b39c, 10
  %v5_b39c = inttoptr i32 %v4_b39c to i8*
  store i8 %v3_b394, i8* %v5_b39c, align 1
  %v0_b3a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3a0 = trunc i32 %v0_b3a0 to i8
  %v2_b3a0 = load i32, i32* @r6, align 4
  %v3_b3a0 = add i32 %v2_b3a0, 11
  %v4_b3a0 = inttoptr i32 %v3_b3a0 to i8*
  store i8 %v1_b3a0, i8* %v4_b3a0, align 1
  %v0_b3a4 = load i32, i32* @r7, align 4
  %v1_b3a4 = add i32 %v0_b3a4, 4
  %v2_b3a4 = inttoptr i32 %v1_b3a4 to i8*
  %v3_b3a4 = load i8, i8* %v2_b3a4, align 1
  %v4_b3a4 = zext i8 %v3_b3a4 to i32
  store i32 %v4_b3a4, i32* %r3.global-to-local, align 4
  %v1_b3a8 = add i32 %v0_b3a4, 5
  %v2_b3a8 = inttoptr i32 %v1_b3a8 to i8*
  %v3_b3a8 = load i8, i8* %v2_b3a8, align 1
  %v4_b3a8 = zext i8 %v3_b3a8 to i32
  store i32 %v0_b3a4, i32* @r1, align 4
  %v4_b3b0 = mul nuw nsw i32 %v4_b3a8, 256
  %v5_b3b0 = or i32 %v4_b3b0, %v4_b3a4
  store i32 %v5_b3b0, i32* %r2.global-to-local, align 4
  %v0_b3b4 = load i32, i32* @r8, align 4
  %v1_b3b4 = trunc i32 %v0_b3b4 to i8
  %v3_b3b4 = add i32 %v0_b3a4, 6
  %v4_b3b4 = inttoptr i32 %v3_b3b4 to i8*
  store i8 %v1_b3b4, i8* %v4_b3b4, align 1
  %v0_b3b8 = load i32, i32* @fp, align 4
  store i32 %v0_b3b8, i32* %r3.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r8, align 4
  %v1_b3bc = trunc i32 %v0_b3bc to i8
  %v2_b3bc = load i32, i32* @r7, align 4
  %v3_b3bc = add i32 %v2_b3bc, 7
  %v4_b3bc = inttoptr i32 %v3_b3bc to i8*
  store i8 %v1_b3bc, i8* %v4_b3bc, align 1
  %v0_b3c0 = load i32, i32* @r6, align 4
  store i32 %v0_b3c0, i32* %r0.global-to-local, align 4
  %v4_b3c4 = call i32 @function_e4f4(i32 %v0_b3c0, i32 %v0_b3a4, i32 %v5_b3b0, i32 %v0_b3b8)
  %v5_b3c4 = trunc i32 %v4_b3c4 to i8
  store i32 %v4_b3c4, i32* %r0.global-to-local, align 4
  %v3_b3c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b3c8, i32* %r3.global-to-local, align 4
  %v3_b3cc = mul i32 %v3_b3c8, 32
  store i32 %v3_b3cc, i32* %r2.global-to-local, align 4
  %v0_b3d0 = load i32, i32* @r5, align 4
  %v1_b3d0 = add i32 %v0_b3d0, 16
  %v2_b3d0 = inttoptr i32 %v1_b3d0 to i32*
  %v3_b3d0 = load i32, i32* %v2_b3d0, align 4
  store i32 %v3_b3d0, i32* %r1.global-to-local, align 4
  %v5_b3d4 = mul i32 %v3_b3c8, 24
  store i32 %v5_b3d4, i32* %r2.global-to-local, align 4
  %v4_b3d835 = udiv i32 %v4_b3c4, 256
  %v1_b3dc = trunc i32 %v4_b3d835 to i8
  %v2_b3dc = load i32, i32* @r7, align 4
  %v3_b3dc = add i32 %v2_b3dc, 7
  %v4_b3dc = inttoptr i32 %v3_b3dc to i8*
  store i8 %v1_b3dc, i8* %v4_b3dc, align 1
  %v0_b3e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3e0 = load i32, i32* @sb, align 4
  %v2_b3e0 = add i32 %v1_b3e0, %v0_b3e0
  store i32 %v2_b3e0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b3e8 = load i32, i32* @r7, align 4
  %v4_b3e8 = add i32 %v3_b3e8, 6
  %v5_b3e8 = inttoptr i32 %v4_b3e8 to i8*
  store i8 %v5_b3c4, i8* %v5_b3e8, align 1
  %v0_b3ec = load i32, i32* %r1.global-to-local, align 4
  %v1_b3ec = load i32, i32* %lr.global-to-local, align 4
  %v2_b3ec = add i32 %v1_b3ec, 4
  %v3_b3ec = inttoptr i32 %v2_b3ec to i32*
  store i32 %v0_b3ec, i32* %v3_b3ec, align 4
  %v0_b3f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3f0 = trunc i32 %v0_b3f0 to i8
  %v2_b3f0 = load i32, i32* %r2.global-to-local, align 4
  %v3_b3f0 = load i32, i32* @sb, align 4
  %v4_b3f0 = add i32 %v3_b3f0, %v2_b3f0
  %v5_b3f0 = inttoptr i32 %v4_b3f0 to i8*
  store i8 %v1_b3f0, i8* %v5_b3f0, align 1
  %v0_b3f4 = load i32, i32* @r8, align 4
  %v1_b3f4 = trunc i32 %v0_b3f4 to i8
  %v2_b3f4 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 2
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 %v1_b3f4, i8* %v4_b3f4, align 1
  %v0_b3f8 = load i32, i32* @r8, align 4
  %v1_b3f8 = trunc i32 %v0_b3f8 to i8
  %v2_b3f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3f8 = add i32 %v2_b3f8, 1
  %v4_b3f8 = inttoptr i32 %v3_b3f8 to i8*
  store i8 %v1_b3f8, i8* %v4_b3f8, align 1
  %v0_b3fc = load i32, i32* @r8, align 4
  %v1_b3fc = trunc i32 %v0_b3fc to i8
  %v2_b3fc = load i32, i32* %lr.global-to-local, align 4
  %v3_b3fc = add i32 %v2_b3fc, 3
  %v4_b3fc = inttoptr i32 %v3_b3fc to i8*
  store i8 %v1_b3fc, i8* %v4_b3fc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v0_b410 = load i32, i32* @sl, align 4
  store i32 %v0_b410, i32* %r2.global-to-local, align 4
  %v0_b414 = load i32, i32* %lr.global-to-local, align 4
  %v6_b41c = inttoptr i32 %v0_b408 to i32*
  %v7_b41c = call i32 @function_13e58(i32 %v3_aff4, i32* %v6_b41c, i32 %v0_b410, i32 16384, i32 %v0_b414, i32 16)
  %v3_b420 = load i32, i32* %stack_var_-40, align 4
  %v1_b424 = add i32 %v3_b420, 1
  store i32 %v1_b424, i32* %r0.global-to-local, align 4
  store i32 %v1_ae84, i32* %r3.global-to-local, align 4
  %v9_b42c = icmp eq i32 %v1_b424, %v1_ae84
  store i1 %v9_b42c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b424, i32* %stack_var_-40, align 4
  %v6_b434 = icmp slt i32 %v1_b424, %v1_ae84
  br i1 %v6_b434, label %dec_label_pc_b438, label %dec_label_pc_b58c

dec_label_pc_b438:                                ; preds = %dec_label_pc_b364, %dec_label_pc_b2f4
  %v1_b44c = phi i32 [ %v1_b424, %dec_label_pc_b364 ], [ 0, %dec_label_pc_b2f4 ]
  %v5_b43c = mul i32 %v1_b44c, 24
  %v1_b440 = load i32, i32* @sb, align 4
  %v2_b440 = add i32 %v1_b440, %v5_b43c
  store i32 %v2_b440, i32* %r3.global-to-local, align 4
  store i32 %v2_aeb0, i32* %r1.global-to-local, align 4
  %v1_b448 = add i32 %v2_b440, 20
  %v2_b448 = inttoptr i32 %v1_b448 to i8*
  %v3_b448 = load i8, i8* %v2_b448, align 1
  %v4_b448 = zext i8 %v3_b448 to i32
  store i32 %v4_b448, i32* %r2.global-to-local, align 4
  %v4_b44c = mul i32 %v1_b44c, 4
  %v5_b44c = add i32 %v4_b44c, %v2_aeb0
  %v6_b44c = inttoptr i32 %v5_b44c to i32*
  %v7_b44c = load i32, i32* %v6_b44c, align 4
  store i32 %v7_b44c, i32* @r5, align 4
  %v2_b450 = icmp ugt i8 %v3_b448, 30
  %v7_b450 = icmp eq i8 %v3_b448, 31
  store i1 %v7_b450, i1* %cpsr_z.global-to-local, align 1
  %v1_b454 = add i32 %v7_b44c, 24
  store i32 %v1_b454, i32* @r6, align 4
  %v1_b458 = add i32 %v7_b44c, 44
  store i32 %v1_b458, i32* @r7, align 4
  %v2_b45c = xor i1 %v7_b450, true
  %v3_b45c = and i1 %v2_b450, %v2_b45c
  br i1 %v3_b45c, label %dec_label_pc_b30c, label %dec_label_pc_b460

dec_label_pc_b460:                                ; preds = %dec_label_pc_b438
  %v1_b460 = add i32 %v2_b440, 16
  %v2_b460 = inttoptr i32 %v1_b460 to i32*
  %v3_b460 = load i32, i32* %v2_b460, align 4
  store i32 %v3_b460, i32* %r4.global-to-local, align 4
  %v0_b464 = call i32 @function_f8c8()
  store i32 %v0_b464, i32* %r0.global-to-local, align 4
  %v3_b468 = load i32, i32* %stack_var_-40, align 4
  %v5_b470 = mul i32 %v3_b468, 24
  %v0_b474 = load i32, i32* %r4.global-to-local, align 4
  %v1_b478 = load i32, i32* @sb, align 4
  %v2_b478 = add i32 %v1_b478, %v5_b470
  store i32 %v2_b478, i32* %r1.global-to-local, align 4
  %v1_b47c = and i32 %v0_b474, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_b47c, i32* %r3.global-to-local, align 4
  %v1_b474 = udiv i32 %v0_b474, 256
  %v3_b480 = and i32 %v1_b474, 65280
  store i32 %v3_b480, i32* %r2.global-to-local, align 4
  %v3_b484 = mul i32 %v0_b474, 16777216
  %v1_b488 = add i32 %v2_b478, 20
  %v2_b488 = inttoptr i32 %v1_b488 to i8*
  %v3_b488 = load i8, i8* %v2_b488, align 1
  %v4_b488 = zext i8 %v3_b488 to i32
  store i32 %v4_b488, i32* %lr.global-to-local, align 4
  %v4_b48c = mul i32 %v1_b47c, 256
  %v5_b48c = or i32 %v4_b48c, %v3_b484
  %v4_b490 = udiv i32 %v0_b474, 16777216
  %v5_b490 = or i32 %v3_b480, %v4_b490
  %v2_b494 = or i32 %v5_b490, %v5_b48c
  %v7_b498 = lshr i32 %v0_b464, %v4_b488
  %v8_b498 = add i32 %v7_b498, %v2_b494
  %v3_b4a4 = mul i32 %v8_b498, 16777216
  %v1_b4a8 = and i32 %v8_b498, 65280
  store i32 %v1_b4a8, i32* %r0.global-to-local, align 4
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  %v4_b4b4 = mul nuw nsw i32 %v1_b4a8, 256
  %v5_b4b4 = or i32 %v4_b4b4, %v3_b4a4
  store i32 %v5_b4b4, i32* %r1.global-to-local, align 4
  %v2_b4b8 = call i32 @llvm.bswap.i32(i32 %v8_b498)
  store i32 %v2_b4b8, i32* %r3.global-to-local, align 4
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  %v1_b4c0 = load i32, i32* @r5, align 4
  %v2_b4c0 = add i32 %v1_b4c0, 16
  %v3_b4c0 = inttoptr i32 %v2_b4c0 to i32*
  store i32 %v2_b4b8, i32* %v3_b4c0, align 4
  br i1 %v2_b310, label %dec_label_pc_b4c8, label %dec_label_pc_b318

dec_label_pc_b4c8:                                ; preds = %dec_label_pc_b460, %dec_label_pc_b30c
  %v0_b4c8 = call i32 @function_f8c8()
  store i32 %v0_b4c8, i32* %r0.global-to-local, align 4
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b4d8, i1* %cpsr_z.global-to-local, align 1
  %v1_b4dc = load i32, i32* @r5, align 4
  %v2_b4dc = add i32 %v1_b4dc, 12
  %v3_b4dc = inttoptr i32 %v2_b4dc to i32*
  store i32 %v0_b4c8, i32* %v3_b4dc, align 4
  br i1 %v3_b4d8, label %dec_label_pc_b4e4, label %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge

dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge:    ; preds = %dec_label_pc_b4c8
  %v1_b330.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b32c

dec_label_pc_b4e4:                                ; preds = %dec_label_pc_b4c8, %dec_label_pc_b318
  %v0_b4e4 = call i32 @function_f8c8()
  %v3_b4ec = urem i32 %v0_b4e4, 65536
  store i32 %v3_b4ec, i32* %r0.global-to-local, align 4
  %v1_b4f4 = sub nsw i32 999, %v3_b4ec
  store i32 %v1_b4f4, i32* %r2.global-to-local, align 4
  %v3_b4f8 = sdiv i32 %v1_b4f4, 256
  store i32 %v3_b4f8, i32* %r1.global-to-local, align 4
  %v3_b4fc34 = udiv i32 %v3_b4ec, 256
  store i32 %v3_b4fc34, i32* %r3.global-to-local, align 4
  %v1_b500 = trunc i32 %v3_b4fc34 to i8
  %v2_b500 = load i32, i32* @r5, align 4
  %v3_b500 = add i32 %v2_b500, 5
  %v4_b500 = inttoptr i32 %v3_b500 to i8*
  store i8 %v1_b500, i8* %v4_b500, align 1
  %v0_b504 = load i32, i32* %r0.global-to-local, align 4
  %v1_b504 = trunc i32 %v0_b504 to i8
  %v2_b504 = load i32, i32* @r5, align 4
  %v3_b504 = add i32 %v2_b504, 4
  %v4_b504 = inttoptr i32 %v3_b504 to i8*
  store i8 %v1_b504, i8* %v4_b504, align 1
  %v0_b508 = load i32, i32* %r1.global-to-local, align 4
  %v1_b508 = trunc i32 %v0_b508 to i8
  %v2_b508 = load i32, i32* @r6, align 4
  %v3_b508 = add i32 %v2_b508, 5
  %v4_b508 = inttoptr i32 %v3_b508 to i8*
  store i8 %v1_b508, i8* %v4_b508, align 1
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v1_b510 = load i32, i32* @r4, align 4
  %v9_b510 = icmp eq i32 %v3_b050, %v1_b510
  store i1 %v9_b510, i1* %cpsr_z.global-to-local, align 1
  %v0_b514 = load i32, i32* %r2.global-to-local, align 4
  %v1_b514 = trunc i32 %v0_b514 to i8
  %v2_b514 = load i32, i32* @r6, align 4
  %v3_b514 = add i32 %v2_b514, 4
  %v4_b514 = inttoptr i32 %v3_b514 to i8*
  store i8 %v1_b514, i8* %v4_b514, align 1
  %v0_b518 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b518, label %dec_label_pc_b51c, label %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge

dec_label_pc_b4e4.dec_label_pc_b338_crit_edge:    ; preds = %dec_label_pc_b4e4
  %v1_b33c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b338

dec_label_pc_b51c:                                ; preds = %dec_label_pc_b4e4, %dec_label_pc_b32c
  %v0_b51c = call i32 @function_f8c8()
  %v1_b51c = trunc i32 %v0_b51c to i8
  store i32 %v0_b51c, i32* %r0.global-to-local, align 4
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v4_b524 = sdiv i32 %v0_b51c, 256
  store i32 %v4_b524, i32* %r3.global-to-local, align 4
  %v1_b528 = load i32, i32* @r4, align 4
  %v9_b528 = icmp eq i32 %v3_b054, %v1_b528
  store i1 %v9_b528, i1* %cpsr_z.global-to-local, align 1
  %v3_b52c = load i32, i32* @r5, align 4
  %v4_b52c = add i32 %v3_b52c, 44
  %v5_b52c = inttoptr i32 %v4_b52c to i8*
  store i8 %v1_b51c, i8* %v5_b52c, align 1
  %v0_b530 = load i32, i32* %r3.global-to-local, align 4
  %v1_b530 = trunc i32 %v0_b530 to i8
  %v2_b530 = load i32, i32* @r7, align 4
  %v3_b530 = add i32 %v2_b530, 1
  %v4_b530 = inttoptr i32 %v3_b530 to i8*
  store i8 %v1_b530, i8* %v4_b530, align 1
  %v0_b534 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b534, label %dec_label_pc_b538, label %dec_label_pc_b344

dec_label_pc_b538:                                ; preds = %dec_label_pc_b51c, %dec_label_pc_b338
  %v0_b538 = call i32 @function_f8c8()
  %v1_b538 = trunc i32 %v0_b538 to i8
  store i32 %v0_b538, i32* %r0.global-to-local, align 4
  %v4_b53c36 = udiv i32 %v0_b538, 256
  %v1_b540 = trunc i32 %v4_b53c36 to i8
  %v2_b540 = load i32, i32* @r7, align 4
  %v3_b540 = add i32 %v2_b540, 3
  %v4_b540 = inttoptr i32 %v3_b540 to i8*
  store i8 %v1_b540, i8* %v4_b540, align 1
  store i32 %v1_b048, i32* %r3.global-to-local, align 4
  store i1 %v2_b548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b548, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_b538
  %v1_b54c = load i32, i32* @r5, align 4
  %v2_b54c = add i32 %v1_b54c, 16
  %v3_b54c = inttoptr i32 %v2_b54c to i32*
  %v4_b54c = load i32, i32* %v3_b54c, align 4
  store i32 %v4_b54c, i32* %r3.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_b538, %bb95
  %v3_b550 = load i32, i32* @r7, align 4
  %v4_b550 = add i32 %v3_b550, 2
  %v5_b550 = inttoptr i32 %v4_b550 to i8*
  store i8 %v1_b538, i8* %v5_b550, align 1
  %v0_b554 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b554, label %dec_label_pc_b55c, label %bb97

bb97:                                             ; preds = %bb96
  %v1_b554 = load i32, i32* %r3.global-to-local, align 4
  %v2_b554 = load i32, i32* @r6, align 4
  %v3_b554 = add i32 %v2_b554, 16
  %v4_b554 = inttoptr i32 %v3_b554 to i32*
  store i32 %v1_b554, i32* %v4_b554, align 4
  br label %dec_label_pc_b358

dec_label_pc_b55c:                                ; preds = %dec_label_pc_b344, %bb96
  %v0_b55c = call i32 @function_f8c8()
  store i32 %v0_b55c, i32* %r0.global-to-local, align 4
  store i32 %v1_af9c, i32* %r1.global-to-local, align 4
  store i1 %v2_b564, i1* %cpsr_z.global-to-local, align 1
  %v1_b568 = load i32, i32* @r6, align 4
  %v2_b568 = add i32 %v1_b568, 16
  %v3_b568 = inttoptr i32 %v2_b568 to i32*
  store i32 %v0_b55c, i32* %v3_b568, align 4
  br i1 %v2_b564, label %dec_label_pc_b364, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b358, %dec_label_pc_b55c
  %v0_b570 = load i32, i32* @r7, align 4
  %v1_b570 = add i32 %v0_b570, 8
  store i32 %v1_b570, i32* @r4, align 4
  store i32 %v1_b570, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r1.global-to-local, align 4
  %v2_b57c = call i32 @function_f97c(i32 %v1_b570, i32 %v5_af7c)
  store i32 %v2_b57c, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r2.global-to-local, align 4
  %v0_b584 = load i32, i32* @r8, align 4
  %v1_b584 = trunc i32 %v0_b584 to i8
  %v2_b584 = load i32, i32* @r4, align 4
  %v4_b584 = add i32 %v2_b584, %v5_af7c
  %v5_b584 = inttoptr i32 %v4_b584 to i8*
  store i8 %v1_b584, i8* %v5_b584, align 1
  br label %dec_label_pc_b364

dec_label_pc_b58c:                                ; preds = %dec_label_pc_b364, %dec_label_pc_b2e0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b590 = call i32 @function_138a0(i32* null)
  store i32 %v2_b590, i32* %r0.global-to-local, align 4
  store i32 %v2_afe0, i32* %r1.global-to-local, align 4
  %v9_b598 = icmp eq i32 %v2_afe0, %v2_b590
  store i1 %v9_b598, i1* %cpsr_z.global-to-local, align 1
  %v6_b59c = icmp slt i32 %v2_afe0, %v2_b590
  br i1 %v6_b59c, label %dec_label_pc_b5a0, label %dec_label_pc_b2e0

dec_label_pc_b5a0:                                ; preds = %dec_label_pc_b58c, %dec_label_pc_ae80, %dec_label_pc_b5a8
  %v29_b5a4 = phi i32 [ %v3_aff4, %dec_label_pc_ae80 ], [ %v1_b5ac, %dec_label_pc_b5a8 ], [ %v2_b590, %dec_label_pc_b58c ]
  store i32 %v3_ae80, i32* %r4.global-to-local, align 4
  store i32 %v15_ae80, i32* %r8.global-to-local, align 4
  store i32 %v21_ae80, i32* %sl.global-to-local, align 4
  store i32 %v24_ae80, i32* %fp.global-to-local, align 4
  ret i32 %v29_b5a4

dec_label_pc_b5a8:                                ; preds = %dec_label_pc_b004
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v1_b5ac = call i32 @function_135d0(i32 %v3_aff4)
  store i32 %v1_b5ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5a0

; uselistorder directives
  uselistorder i32 %v1_b5ac, { 1, 0 }
  uselistorder i32 %v0_b538, { 0, 2, 1 }
  uselistorder i32 %v0_b51c, { 0, 2, 1 }
  uselistorder i32 %v3_b4ec, { 0, 2, 1 }
  uselistorder i32 %v2_b4b8, { 1, 0 }
  uselistorder i32 %v8_b498, { 1, 2, 0 }
  uselistorder i32 %v0_b474, { 1, 0, 2, 3 }
  uselistorder i32 %v7_b44c, { 1, 0, 2 }
  uselistorder i32 %v1_b424, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b3c8, { 1, 0, 2 }
  uselistorder i32 %v4_b3c4, { 0, 2, 1 }
  uselistorder i32 %v0_b3a4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b394, { 0, 2, 1 }
  uselistorder i32 %v4_b378, { 1, 0 }
  uselistorder i1 %v2_b564, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b548, { 2, 3, 1, 0 }
  uselistorder i1 %v3_b4d8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_b310, { 2, 1, 0 }
  uselistorder i32 %v0_b280, { 1, 0, 2 }
  uselistorder i32 %v3_b124, { 1, 0 }
  uselistorder i32 %tmp81, { 1, 0, 2 }
  uselistorder i32 %v1_b0a0, { 1, 0 }
  uselistorder i32 %v1_b098, { 2, 1, 0 }
  uselistorder i32 %v1_b094, { 1, 0 }
  uselistorder i32 %v1_b090, { 1, 0 }
  uselistorder i32 %v1_b084, { 1, 0 }
  uselistorder i32 %v3_b07c, { 2, 0, 1 }
  uselistorder i32 %v3_b04c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_b048, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_b044, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b03c, { 0, 2, 1 }
  uselistorder i32 %v0_b038, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b024, { 1, 0 }
  uselistorder i1 %v7_aff8, { 1, 0 }
  uselistorder i32 %v3_aff4, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_afe0, { 2, 1, 0 }
  uselistorder i32 %v5_afd0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_af9c, { 1, 0, 2 }
  uselistorder i32 %v5_af7c, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i8 %v5_af20, { 1, 0 }
  uselistorder i32 %v2_aeb0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_ae84, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 14, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 44, 43, 46, 45, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 20, 25, 21, 22, 23, 24, 28, 26, 27, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_b5a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b570, { 1, 0 }
  uselistorder label %dec_label_pc_b55c, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_b364, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b2e0, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b5b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b5b8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i8 @__decompiler_undefined_function_1()
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b5bc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  %v1_b5d8 = urem i32 %arg4, 256
  store i32 %v1_b5d8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b5e8 = call i32 @function_141a8(i32 %v1_b5bc, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  %v2_b5f8 = call i32 @function_141a8(i32 %v1_b5bc, i32 4)
  %v0_b5fc = load i32, i32* @r5, align 4
  store i32 %v0_b5fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b608 = load i32, i32* @r7, align 4
  store i32 %v0_b608, i32* %r3.global-to-local, align 4
  %v0_b60c = load i32, i32* @r4, align 4
  store i32 %v0_b60c, i32* %r0.global-to-local, align 4
  %v5_b610 = inttoptr i32 %v0_b5fc to i32*
  %v6_b610 = call i32 @function_a054(i32 %v0_b60c, i32* %v5_b610, i32 2, i32 %v0_b608)
  %v1_b61c = urem i32 %v6_b610, 256
  store i32 %v1_b61c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b628 = load i32, i32* @r5, align 4
  store i32 %v0_b628, i32* %r1.global-to-local, align 4
  %v0_b62c = load i32, i32* @r4, align 4
  store i32 %v0_b62c, i32* %r0.global-to-local, align 4
  %v5_b630 = trunc i32 %v6_b610 to i8
  %v6_b634 = inttoptr i32 %v0_b628 to i32*
  %v7_b634 = call i32 @function_a054(i32 %v0_b62c, i32* %v6_b634, i32 3, i32 65535)
  %v0_b638 = load i32, i32* @r5, align 4
  store i32 %v0_b638, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b634, i32* @sl, align 4
  %v0_b648 = load i32, i32* @r4, align 4
  store i32 %v0_b648, i32* %r0.global-to-local, align 4
  %v4_b64c = inttoptr i32 %v0_b638 to i32*
  %v5_b64c = call i32 @function_a054(i32 %v0_b648, i32* %v4_b64c, i32 4, i32 64)
  %v1_b654 = urem i32 %v5_b64c, 256
  store i32 %v1_b654, i32* %ip.global-to-local, align 4
  %v0_b658 = load i32, i32* @r5, align 4
  store i32 %v0_b658, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b664 = load i32, i32* @r4, align 4
  store i32 %v0_b664, i32* %r0.global-to-local, align 4
  %v6_b66c = inttoptr i32 %v0_b658 to i32*
  %v7_b66c = call i32 @function_a054(i32 %v0_b664, i32* %v6_b66c, i32 5, i32 1)
  %v1_b678 = urem i32 %v7_b66c, 256
  store i32 %v1_b678, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b680 = load i32, i32* @r5, align 4
  store i32 %v0_b680, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b688 = load i32, i32* @r4, align 4
  store i32 %v0_b688, i32* %r0.global-to-local, align 4
  %v5_b690 = inttoptr i32 %v0_b680 to i32*
  %v6_b690 = call i32 @function_a054(i32 %v0_b688, i32* %v5_b690, i32 7, i32 65535)
  %v0_b694 = load i32, i32* @r5, align 4
  store i32 %v0_b694, i32* %r1.global-to-local, align 4
  %v3_b698 = mul i32 %v6_b690, 65536
  store i32 %v3_b698, i32* @r8, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_b6a0 = load i32, i32* @r7, align 4
  store i32 %v0_b6a0, i32* %r3.global-to-local, align 4
  %v0_b6a4 = load i32, i32* @r4, align 4
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  %v4_b6a8 = inttoptr i32 %v0_b694 to i32*
  %v5_b6a8 = call i32 @function_a054(i32 %v0_b6a4, i32* %v4_b6a8, i32 10, i32 %v0_b6a0)
  %v1_b6b0 = urem i32 %v5_b6a8, 256
  store i32 %v1_b6b0, i32* %ip.global-to-local, align 4
  %v0_b6b4 = load i32, i32* @r5, align 4
  store i32 %v0_b6b4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b6c0 = load i32, i32* @r4, align 4
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  %v5_b6c8 = inttoptr i32 %v0_b6b4 to i32*
  %v6_b6c8 = call i32 @function_a054(i32 %v0_b6c0, i32* %v5_b6c8, i32 11, i32 1)
  %v1_b6d0 = urem i32 %v6_b6c8, 256
  store i32 %v1_b6d0, i32* %ip.global-to-local, align 4
  %v0_b6d4 = load i32, i32* @r5, align 4
  store i32 %v0_b6d4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b6e0 = load i32, i32* @r4, align 4
  store i32 %v0_b6e0, i32* %r0.global-to-local, align 4
  %v5_b6e8 = inttoptr i32 %v0_b6d4 to i32*
  %v6_b6e8 = call i32 @function_a054(i32 %v0_b6e0, i32* %v5_b6e8, i32 12, i32 1)
  %v1_b6f0 = urem i32 %v6_b6e8, 256
  store i32 %v1_b6f0, i32* %ip.global-to-local, align 4
  %v0_b6f4 = load i32, i32* @r5, align 4
  store i32 %v0_b6f4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_b6fc = load i32, i32* @r7, align 4
  store i32 %v0_b6fc, i32* %r3.global-to-local, align 4
  %v0_b700 = load i32, i32* @r4, align 4
  store i32 %v0_b700, i32* %r0.global-to-local, align 4
  %v5_b708 = inttoptr i32 %v0_b6f4 to i32*
  %v6_b708 = call i32 @function_a054(i32 %v0_b700, i32* %v5_b708, i32 13, i32 %v0_b6fc)
  %v1_b710 = urem i32 %v6_b708, 256
  store i32 %v1_b710, i32* %ip.global-to-local, align 4
  %v0_b714 = load i32, i32* @r5, align 4
  store i32 %v0_b714, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_b71c = load i32, i32* @r7, align 4
  store i32 %v0_b71c, i32* %r3.global-to-local, align 4
  %v0_b720 = load i32, i32* @r4, align 4
  store i32 %v0_b720, i32* %r0.global-to-local, align 4
  %v5_b728 = inttoptr i32 %v0_b714 to i32*
  %v6_b728 = call i32 @function_a054(i32 %v0_b720, i32* %v5_b728, i32 14, i32 %v0_b71c)
  %v1_b730 = urem i32 %v6_b728, 256
  store i32 %v1_b730, i32* %ip.global-to-local, align 4
  %v0_b734 = load i32, i32* @r5, align 4
  store i32 %v0_b734, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_b73c = load i32, i32* @r7, align 4
  store i32 %v0_b73c, i32* %r3.global-to-local, align 4
  %v0_b740 = load i32, i32* @r4, align 4
  store i32 %v0_b740, i32* %r0.global-to-local, align 4
  %v5_b748 = inttoptr i32 %v0_b734 to i32*
  %v6_b748 = call i32 @function_a054(i32 %v0_b740, i32* %v5_b748, i32 15, i32 %v0_b73c)
  %v1_b750 = urem i32 %v6_b748, 256
  store i32 %v1_b750, i32* %ip.global-to-local, align 4
  %v0_b754 = load i32, i32* @r7, align 4
  store i32 %v0_b754, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b75c = load i32, i32* @r5, align 4
  store i32 %v0_b75c, i32* %r1.global-to-local, align 4
  %v0_b760 = load i32, i32* @r4, align 4
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  %v5_b768 = inttoptr i32 %v0_b75c to i32*
  %v6_b768 = call i32 @function_a054(i32 %v0_b760, i32* %v5_b768, i32 %v0_b754, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b774 = load i32, i32* @r5, align 4
  store i32 %v0_b774, i32* %r1.global-to-local, align 4
  %v0_b77c = load i32, i32* @r4, align 4
  store i32 %v0_b77c, i32* %r0.global-to-local, align 4
  %v4_b780 = inttoptr i32 %v0_b774 to i32*
  %v5_b780 = call i32 @function_a054(i32 %v0_b77c, i32* %v4_b780, i32 1, i32 1)
  %v1_b788 = urem i32 %v5_b780, 256
  store i32 %v1_b788, i32* %r3.global-to-local, align 4
  %v0_b78c = load i32, i32* @r7, align 4
  store i32 %v0_b78c, i32* %r0.global-to-local, align 4
  %v1_b794 = inttoptr i32 %v0_b78c to i32*
  %v2_b794 = call i32 @function_138a0(i32* %v1_b794)
  %v1_b798 = load i32, i32* @r6, align 4
  %v2_b798 = add i32 %v1_b798, %v2_b794
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b7ac = call i32 @function_13ebc(i32 2, i32 3, i32 6)
  store i32 %v3_b7ac, i32* %r0.global-to-local, align 4
  %v0_b7b0 = load i32, i32* @r8, align 4
  %v3_b7b0 = udiv i32 %v0_b7b0, 65536
  store i32 %v3_b7b0, i32* %r1.global-to-local, align 4
  %v7_b7b4 = icmp eq i32 %v3_b7ac, -1
  store i1 %v7_b7b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b7ac, i32* @sb, align 4
  br i1 %v7_b7b4, label %dec_label_pc_bb68, label %dec_label_pc_b7c4

dec_label_pc_b7c4:                                ; preds = %dec_label_pc_b5b8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b7cc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b7cc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b7d4 = load i32, i32* @r7, align 4
  store i32 %v0_b7d4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b7e0 = call i32 @function_13e8c(i32 %v3_b7ac, i32 %v0_b7d4, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_b7e0, i32* %r0.global-to-local, align 4
  %v7_b7e4 = icmp eq i32 %v6_b7e0, -1
  store i1 %v7_b7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b7e4, label %dec_label_pc_bb60, label %dec_label_pc_b7ec

dec_label_pc_b7ec:                                ; preds = %dec_label_pc_b7c4
  store i32 %v1_b5bc, i32* %r2.global-to-local, align 4
  %v0_b7f0 = load i32, i32* @sl, align 4
  %v3_b7f0 = mul i32 %v0_b7f0, 65536
  store i32 %v3_b7f0, i32* %r0.global-to-local, align 4
  %v3_b7f4 = urem i32 %v0_b7f0, 65536
  store i32 %v3_b7f4, i32* %r3.global-to-local, align 4
  %v2_b7f8 = icmp eq i32 %v1_b5bc, 0
  store i1 %v2_b7f8, i1* %cpsr_z.global-to-local, align 1
  %v0_b7fc = load i32, i32* @r7, align 4
  store i32 %v0_b7fc, i32* %stack_var_-40, align 4
  br i1 %v2_b7f8, label %dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge, label %dec_label_pc_b808

dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge: ; preds = %dec_label_pc_b7ec
  %.pre = add i32 %v6_b768, 40
  br label %dec_label_pc_b9e8.preheader

dec_label_pc_b808:                                ; preds = %dec_label_pc_b7ec
  %v0_b80c = load i32, i32* @r8, align 4
  %v3_b80c = udiv i32 %v0_b80c, 16777216
  %tmp77 = udiv i32 %v0_b7f0, 256
  %v3_b810 = urem i32 %tmp77, 256
  store i32 %v3_b810, i32* %r0.global-to-local, align 4
  %v1_b814 = add i32 %v6_b768, 40
  store i32 %v1_b814, i32* %ip.global-to-local, align 4
  %v3_bbdc = icmp ugt i32 %v0_b7b0, -65537
  %v2_b8c0 = ptrtoint i32* %stack_var_-60 to i32
  %v3_b8cc = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_b8e4 = urem i32 %v1_b814, 256
  %tmp78 = udiv i32 %v1_b814, 256
  %v3_b8e8 = urem i32 %tmp78, 256
  %v2_b8f8 = ptrtoint i32* %stack_var_-76 to i32
  %v2_b8fc = ptrtoint i32* %stack_var_-332 to i32
  %v2_b900 = ptrtoint i32* %stack_var_-44 to i32
  %v4_b974 = zext i8 %tmp32 to i32
  %v4_b978 = zext i8 %tmp31 to i32
  %v4_b984 = mul nuw nsw i32 %v4_b978, 256
  %v4_b994 = zext i8 %tmp30 to i32
  %v1_b998 = and i32 %v4_b994, 18
  %v2_b99c = icmp eq i32 %v1_b998, 18
  %v4_bd04 = sext i8 %v5_b630 to i32
  %sext6 = mul i32 %v5_b64c, 16777216
  %v4_bd10 = sdiv i32 %sext6, 16777216
  %v1_bdf4 = urem i32 %v5_b6a8, 2
  %tmp101 = sub nsw i32 0, %v1_bdf4
  %v4_bdfc = and i32 %tmp101, 32
  %v1_be28 = urem i32 %v6_b6e8, 2
  %tmp102 = sub nsw i32 0, %v1_be28
  %v4_be30 = and i32 %tmp102, 8
  %v1_be74 = urem i32 %v6_b748, 2
  %v4_b8ec = mul nuw nsw i32 %v1_b8e4, 256
  %v5_b8ec = or i32 %v4_b8ec, %v3_b8e8
  %v5_b984 = or i32 %v4_b974, %v4_b984
  %v1_b9a4 = and i32 %v4_b994, 5
  %v2_b9a4 = icmp eq i32 %v1_b9a4, 0
  %v1_b8ac = urem i32 %v3_b7b0, 256
  %v4_b8b0 = mul nuw nsw i32 %v1_b8ac, 256
  %v5_b8b0 = or i32 %v3_b80c, %v4_b8b0
  %v1_b8b8 = trunc i32 %v3_b7b0 to i8
  %v1_b8bc = trunc i32 %v3_b80c to i8
  %v1_bce4 = urem i32 %v0_b7f0, 256
  %v4_bcec = mul nuw nsw i32 %v1_bce4, 256
  %v5_bcec = or i32 %v4_bcec, %v3_b810
  %sext = mul i32 %v1_b814, 16777216
  %v4_bd08 = sdiv i32 %sext, 16777216
  %v1_be0c = urem i32 %v6_b6c8, 2
  %tmp103 = sub nsw i32 0, %v1_be0c
  %v4_be14 = and i32 %tmp103, 16
  %v1_be40 = urem i32 %v6_b708, 2
  %tmp104 = sub nsw i32 0, %v1_be40
  %v4_be48 = and i32 %tmp104, 4
  %v1_be58 = urem i32 %v6_b728, 2
  %tmp105 = sub nsw i32 0, %v1_be58
  %v3_be60 = and i32 %tmp105, 2
  br label %dec_label_pc_b824.outer

dec_label_pc_b824.outer:                          ; preds = %bb93, %dec_label_pc_b808
  %stack_var_-336.0.ph = phi i32 [ %v0_bd24, %bb93 ], [ %tmp, %dec_label_pc_b808 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_bc30, %bb93 ], [ %tmp38, %dec_label_pc_b808 ]
  br label %dec_label_pc_b824

dec_label_pc_b824:                                ; preds = %dec_label_pc_b824.outer, %dec_label_pc_b9d0
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.5, %dec_label_pc_b9d0 ], [ %stack_var_-56.0.ph, %dec_label_pc_b824.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b830 = call i32 @function_13ebc(i32 2, i32 1, i32 0)
  store i32 %v3_b830, i32* %r0.global-to-local, align 4
  %v7_b834 = icmp eq i32 %v3_b830, -1
  store i1 %v7_b834, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b830, i32* @sl, align 4
  br i1 %v7_b834, label %dec_label_pc_b9d0, label %dec_label_pc_b840

dec_label_pc_b840:                                ; preds = %dec_label_pc_b824, %dec_label_pc_b9ac
  %v0_b848 = phi i32 [ %v3_b9c0, %dec_label_pc_b9ac ], [ %v3_b830, %dec_label_pc_b824 ]
  %stack_var_-56.1 = phi i32 [ %v0_bc30, %dec_label_pc_b9ac ], [ %stack_var_-56.0, %dec_label_pc_b824 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b848 = call i32 @function_1350c(i32 %v0_b848, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b850 = or i32 %v2_b848, 2048
  store i32 %v1_b850, i32* @r2, align 4
  %v0_b854 = load i32, i32* @sl, align 4
  store i32 %v0_b854, i32* %r0.global-to-local, align 4
  %v2_b858 = call i32 @function_1350c(i32 %v0_b854, i32 4)
  store i32 %v2_b858, i32* %r0.global-to-local, align 4
  %v3_b85c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b85c, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %lr.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_b878 = mul i32 %v3_b85c, 24
  store i32 %v5_b878, i32* %r1.global-to-local, align 4
  %v2_b87c = add i32 %v5_b878, %arg3
  store i32 %v2_b87c, i32* %r2.global-to-local, align 4
  %v1_b880 = add i32 %v2_b87c, 20
  %v2_b880 = inttoptr i32 %v1_b880 to i8*
  %v3_b880 = load i8, i8* %v2_b880, align 1
  %v4_b880 = zext i8 %v3_b880 to i32
  store i32 %v4_b880, i32* %r3.global-to-local, align 4
  %v2_b884 = icmp ugt i8 %v3_b880, 30
  %v7_b884 = icmp eq i8 %v3_b880, 31
  store i1 %v7_b884, i1* %cpsr_z.global-to-local, align 1
  %v2_b888 = xor i1 %v7_b884, true
  %v3_b888 = and i1 %v2_b884, %v2_b888
  br i1 %v3_b888, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_b840
  %v5_b888 = add i32 %v2_b87c, 16
  %v6_b888 = inttoptr i32 %v5_b888 to i32*
  %v7_b888 = load i32, i32* %v6_b888, align 4
  store i32 %v7_b888, i32* %r3.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_b840, %bb
  %v4_b88c = phi i32 [ %v4_b880, %dec_label_pc_b840 ], [ %v7_b888, %bb ]
  %v4_b88c.stack_var_-56.1 = select i1 %v3_b888, i32 %v4_b88c, i32 %stack_var_-56.1
  %v2_b890 = xor i1 %v2_b884, true
  %v3_b890 = or i1 %v7_b884, %v2_b890
  br i1 %v3_b890, label %dec_label_pc_bb70, label %dec_label_pc_b894

dec_label_pc_b894:                                ; preds = %bb79
  store i32 %v3_b7b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bbdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bbdc, label %dec_label_pc_bbe4, label %dec_label_pc_b8a8

dec_label_pc_b8a8:                                ; preds = %dec_label_pc_bb70, %dec_label_pc_b894
  %stack_var_-56.3 = phi i32 [ %v2_bbc8, %dec_label_pc_bb70 ], [ %v4_b88c.stack_var_-56.1, %dec_label_pc_b894 ]
  store i32 %v3_b80c, i32* %r0.global-to-local, align 4
  store i32 %v5_b8b0, i32* %r3.global-to-local, align 4
  store i32 %v1_b8ac, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b8c0

dec_label_pc_b8c0:                                ; preds = %dec_label_pc_bbe4, %dec_label_pc_b8a8
  %stack_var_-57.0 = phi i8 [ %v1_bbec, %dec_label_pc_bbe4 ], [ %v1_b8b8, %dec_label_pc_b8a8 ]
  %v0_bc30 = phi i32 [ %stack_var_-56.6, %dec_label_pc_bbe4 ], [ %stack_var_-56.3, %dec_label_pc_b8a8 ]
  %storemerge = phi i8 [ %v1_bbe4, %dec_label_pc_bbe4 ], [ %v1_b8bc, %dec_label_pc_b8a8 ]
  store i32 %v2_b8c0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b8c8 = load i32, i32* @sl, align 4
  store i32 %v0_b8c8, i32* %r0.global-to-local, align 4
  %v4_b8cc = call i32 @function_13d18(i32 %v0_b8c8, %sockaddr* %v3_b8cc, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b8d4 = call i32 @function_138a0(i32* null)
  store i32 %v2_b8d4, i32* %r0.global-to-local, align 4
  store i32 %v1_b814, i32* %r1.global-to-local, align 4
  store i32 %v1_b8e4, i32* %r3.global-to-local, align 4
  store i32 %v5_b8ec, i32* @fp, align 4
  store i32 %v1_b8e4, i32* %r2.global-to-local, align 4
  store i32 %v2_b8d4, i32* @r4, align 4
  store i32 %v2_b8fc, i32* @r7, align 4
  store i32 %v2_b900, i32* @r6, align 4
  %v9_b958 = icmp eq i32 %tmp33, %v0_bc30
  %v4_b97c = zext i8 %storemerge to i32
  %v4_b980 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_b958 to i32
  %v9_b96c = icmp eq i1 %v9_b958, false
  %v4_b988 = mul nuw nsw i32 %v4_b980, 256
  %v5_b988 = or i32 %v4_b97c, %v4_b988
  %v9_b98c = icmp eq i32 %v5_b988, %v5_b984
  br label %dec_label_pc_b91c

dec_label_pc_b90c:                                ; preds = %.thread25, %dec_label_pc_b974, %dec_label_pc_b9a4, %bb82
  %v2_b90c = call i32 @function_138a0(i32* null)
  %v0_b910 = load i32, i32* @r4, align 4
  %v2_b910 = sub i32 %v2_b90c, %v0_b910
  store i32 %v2_b910, i32* %r0.global-to-local, align 4
  %v7_b914 = icmp eq i32 %v2_b910, 10
  store i1 %v7_b914, i1* %cpsr_z.global-to-local, align 1
  %v8_b918 = icmp sgt i32 %v2_b910, 10
  br i1 %v8_b918, label %dec_label_pc_b9ac, label %dec_label_pc_b91c

dec_label_pc_b91c:                                ; preds = %dec_label_pc_b90c, %dec_label_pc_b8c0
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_b8fc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b92c = load i32, i32* @sb, align 4
  store i32 %v0_b92c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v7_b93c = call i32 @function_13df8(i32 %v0_b92c, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_b8f8, i32 %v2_b900)
  store i32 %v7_b93c, i32* %r2.global-to-local, align 4
  %v7_b944 = icmp eq i32 %v7_b93c, -1
  store i1 %v7_b944, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b944, label %dec_label_pc_bb68, label %dec_label_pc_b950

dec_label_pc_b950:                                ; preds = %dec_label_pc_b91c
  store i32 %tmp33, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b964 = icmp eq i32 %v7_b93c, 40
  store i1 %v7_b964, i1* %cpsr_z.global-to-local, align 1
  %tmp106 = icmp ult i32 %v7_b93c, 41
  br i1 %tmp106, label %.thread25, label %bb82

.thread25:                                        ; preds = %dec_label_pc_b950
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b90c

bb82:                                             ; preds = %dec_label_pc_b950
  store i1 %v9_b96c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b96c, label %dec_label_pc_b90c, label %dec_label_pc_b974

dec_label_pc_b974:                                ; preds = %bb82
  store i32 %v4_b978, i32* %r1.global-to-local, align 4
  store i32 %v4_b97c, i32* %ip.global-to-local, align 4
  store i32 %v4_b980, i32* %r2.global-to-local, align 4
  store i32 %v5_b984, i32* %r3.global-to-local, align 4
  store i32 %v5_b988, i32* @r5, align 4
  store i1 %v9_b98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b98c, label %dec_label_pc_b994, label %dec_label_pc_b90c

dec_label_pc_b994:                                ; preds = %dec_label_pc_b974
  store i32 %v4_b994, i32* %r2.global-to-local, align 4
  store i32 %v1_b998, i32* %r3.global-to-local, align 4
  store i1 %v2_b99c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b99c, label %dec_label_pc_bc24, label %dec_label_pc_b9a4

dec_label_pc_b9a4:                                ; preds = %dec_label_pc_b994
  store i1 %v2_b9a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b9a4, label %dec_label_pc_b90c, label %dec_label_pc_b9ac

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b9a4, %dec_label_pc_b90c
  %v0_b9ac = load i32, i32* @sl, align 4
  store i32 %v0_b9ac, i32* %r0.global-to-local, align 4
  %v1_b9b0 = call i32 @function_135d0(i32 %v0_b9ac)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b9c0 = call i32 @function_13ebc(i32 2, i32 1, i32 0)
  store i32 %v3_b9c0, i32* %r0.global-to-local, align 4
  %v3_b9c4 = icmp eq i32 %v3_b9c0, -1
  %v8_b9c4 = icmp eq i32 %v3_b9c0, -1
  store i1 %v8_b9c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9c0, i32* @sl, align 4
  br i1 %v3_b9c4, label %dec_label_pc_b9d0, label %dec_label_pc_b840

dec_label_pc_b9d0:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b824
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_b824 ], [ %v0_bc30, %dec_label_pc_b9ac ]
  %v3_b9d0 = load i32, i32* %stack_var_-40, align 4
  %v1_b9d8 = add i32 %v3_b9d0, 1
  store i32 %v1_b9d8, i32* %r3.global-to-local, align 4
  %v9_b9dc = icmp eq i32 %v1_b9d8, %v1_b5bc
  store i1 %v9_b9dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b9d8, i32* %stack_var_-40, align 4
  %v5_b9e4 = icmp slt i32 %v1_b9d8, %v1_b5bc
  br i1 %v5_b9e4, label %dec_label_pc_b824, label %dec_label_pc_b9e8.preheader

dec_label_pc_b9e8.preheader:                      ; preds = %bb93, %dec_label_pc_b9d0, %dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge
  %v1_ba1c.pre-phi = phi i32 [ %.pre, %dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge ], [ %v1_b814, %dec_label_pc_b9d0 ], [ %v1_b814, %bb93 ]
  %v1_ba00 = add i32 %v6_b768, 20
  %v3_ba04 = mul i32 %v1_ba00, 65536
  %tmp84 = mul i32 %v1_ba00, 256
  %v1_ba0c = and i32 %tmp84, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp85 = udiv i32 %v1_ba00, 256
  %v4_ba10 = urem i32 %tmp85, 256
  %v5_ba10 = or i32 %v4_ba10, %v1_ba0c
  %v2_bb40 = icmp eq i32 %v1_b788, 0
  %v3_bb2c = icmp eq i32 %v3_b7f4, 65535
  br label %dec_label_pc_b9e8

dec_label_pc_b9e8:                                ; preds = %dec_label_pc_b9e8.preheader, %dec_label_pc_bc0c
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_b7f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b7f8, label %dec_label_pc_bc0c, label %dec_label_pc_b9fc

dec_label_pc_b9fc:                                ; preds = %dec_label_pc_b9e8
  store i32 %v1_ba00, i32* @r8, align 4
  store i32 %v3_ba04, i32* %r2.global-to-local, align 4
  store i32 %v5_ba10, i32* @fp, align 4
  store i32 %v6_b768, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_ba1c.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_bb18

dec_label_pc_ba28:                                ; preds = %dec_label_pc_bb3c, %dec_label_pc_bb50
  %v0_ba28 = load i32, i32* @r7, align 4
  %v1_ba28 = trunc i32 %v0_ba28 to i8
  %v2_ba28 = load i32, i32* @r4, align 4
  %v3_ba28 = add i32 %v2_ba28, 10
  %v4_ba28 = inttoptr i32 %v3_ba28 to i8*
  store i8 %v1_ba28, i8* %v4_ba28, align 1
  %v0_ba2c = load i32, i32* @r7, align 4
  %v1_ba2c = trunc i32 %v0_ba2c to i8
  %v2_ba2c = load i32, i32* @r4, align 4
  %v3_ba2c = add i32 %v2_ba2c, 11
  %v4_ba2c = inttoptr i32 %v3_ba2c to i8*
  store i8 %v1_ba2c, i8* %v4_ba2c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ba34 = load i32, i32* @r4, align 4
  store i32 %v0_ba34, i32* @r0, align 4
  %v2_ba38 = call i32 @function_e498(i32 %v0_ba34, i32 20)
  %v3_ba38 = trunc i32 %v2_ba38 to i8
  store i32 %v2_ba38, i32* %r0.global-to-local, align 4
  %v3_ba3c = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b5e8, i32* %r2.global-to-local, align 4
  %v3_ba44 = mul i32 %v3_ba3c, 16
  %v2_ba48 = add i32 %v3_ba44, %v2_b5e8
  store i32 %v2_ba48, i32* %r1.global-to-local, align 4
  %v1_ba4c = add i32 %v2_ba48, 4
  %v2_ba4c = inttoptr i32 %v1_ba4c to i32*
  %v3_ba4c = load i32, i32* %v2_ba4c, align 4
  %v3_ba50 = mul i32 %v3_ba4c, 65536
  store i32 %v3_ba50, i32* %ip.global-to-local, align 4
  %tmp86 = mul i32 %v3_ba4c, 256
  %v1_ba58 = and i32 %tmp86, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp87 = udiv i32 %v3_ba4c, 256
  %v4_ba5c = urem i32 %tmp87, 256
  %v5_ba5c = or i32 %v4_ba5c, %v1_ba58
  store i32 %v5_ba5c, i32* %r2.global-to-local, align 4
  %v1_ba60 = add i32 %v3_ba4c, 1
  store i32 %v1_ba60, i32* %r3.global-to-local, align 4
  store i32 %v1_ba60, i32* %v2_ba4c, align 4
  %v0_ba68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba68 = load i32, i32* @r5, align 4
  %v2_ba68 = add i32 %v1_ba68, 4
  %v3_ba68 = inttoptr i32 %v2_ba68 to i32*
  store i32 %v0_ba68, i32* %v3_ba68, align 4
  %v0_ba6c = load i32, i32* %r1.global-to-local, align 4
  %v1_ba6c = add i32 %v0_ba6c, 8
  %v2_ba6c = inttoptr i32 %v1_ba6c to i32*
  %v3_ba6c = load i32, i32* %v2_ba6c, align 4
  %tmp88 = mul i32 %v3_ba6c, 256
  %v1_ba78 = and i32 %tmp88, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp89 = udiv i32 %v3_ba6c, 256
  %v4_ba7c = urem i32 %tmp89, 256
  %v5_ba7c = or i32 %v4_ba7c, %v1_ba78
  store i32 %v5_ba7c, i32* %r2.global-to-local, align 4
  %v4_ba8028 = udiv i32 %v2_ba38, 256
  %v1_ba84 = trunc i32 %v4_ba8028 to i8
  %v2_ba84 = load i32, i32* @r4, align 4
  %v3_ba84 = add i32 %v2_ba84, 11
  %v4_ba84 = inttoptr i32 %v3_ba84 to i8*
  store i8 %v1_ba84, i8* %v4_ba84, align 1
  %v3_ba88 = load i32, i32* @r4, align 4
  %v4_ba88 = add i32 %v3_ba88, 10
  %v5_ba88 = inttoptr i32 %v4_ba88 to i8*
  store i8 %v3_ba38, i8* %v5_ba88, align 1
  %v0_ba8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ba8c = load i32, i32* @r5, align 4
  %v2_ba8c = add i32 %v1_ba8c, 8
  %v3_ba8c = inttoptr i32 %v2_ba8c to i32*
  store i32 %v0_ba8c, i32* %v3_ba8c, align 4
  %v0_ba90 = load i32, i32* @r5, align 4
  store i32 %v0_ba90, i32* @r1, align 4
  %v0_ba94 = load i32, i32* @fp, align 4
  store i32 %v0_ba94, i32* %r2.global-to-local, align 4
  %v0_ba98 = load i32, i32* @r8, align 4
  store i32 %v0_ba98, i32* %r3.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r4, align 4
  store i32 %v0_ba9c, i32* %r0.global-to-local, align 4
  %v0_baa0 = load i32, i32* @r7, align 4
  %v1_baa0 = trunc i32 %v0_baa0 to i8
  %v3_baa0 = add i32 %v0_ba90, 16
  %v4_baa0 = inttoptr i32 %v3_baa0 to i8*
  store i8 %v1_baa0, i8* %v4_baa0, align 1
  %v0_baa4 = load i32, i32* @r7, align 4
  %v1_baa4 = trunc i32 %v0_baa4 to i8
  %v2_baa4 = load i32, i32* @r5, align 4
  %v3_baa4 = add i32 %v2_baa4, 17
  %v4_baa4 = inttoptr i32 %v3_baa4 to i8*
  store i8 %v1_baa4, i8* %v4_baa4, align 1
  %v4_baa8 = call i32 @function_e4f4(i32 %v0_ba9c, i32 %v0_ba90, i32 %v0_ba94, i32 %v0_ba98)
  %v5_baa8 = trunc i32 %v4_baa8 to i8
  store i32 %v4_baa8, i32* %r0.global-to-local, align 4
  %v4_baac29 = udiv i32 %v4_baa8, 256
  %v1_bab0 = trunc i32 %v4_baac29 to i8
  %v2_bab0 = load i32, i32* @r5, align 4
  %v3_bab0 = add i32 %v2_bab0, 17
  %v4_bab0 = inttoptr i32 %v3_bab0 to i8*
  store i8 %v1_bab0, i8* %v4_bab0, align 1
  %v3_bab4 = load i32, i32* @r5, align 4
  %v4_bab4 = add i32 %v3_bab4, 16
  %v5_bab4 = inttoptr i32 %v4_bab4 to i8*
  store i8 %v5_baa8, i8* %v5_bab4, align 1
  %v3_bab8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bab8, i32* %r3.global-to-local, align 4
  %v0_babc = load i32, i32* @r4, align 4
  %v1_babc = add i32 %v0_babc, 20
  %v2_babc = inttoptr i32 %v1_babc to i32*
  %v3_babc = load i32, i32* %v2_babc, align 4
  %v5_bac4 = mul i32 %v3_bab8, 24
  %v3_bacc = udiv i32 %v3_babc, 65536
  store i32 %v3_bacc, i32* %r2.global-to-local, align 4
  %v2_bad0 = add i32 %v5_bac4, %arg3
  store i32 %v2_bad0, i32* %ip.global-to-local, align 4
  %v3_bad44 = udiv i32 %v3_babc, 16777216
  %v1_bad8 = trunc i32 %v3_bad44 to i8
  %v3_bad8 = add i32 %v2_bad0, 3
  %v4_bad8 = inttoptr i32 %v3_bad8 to i8*
  store i8 %v1_bad8, i8* %v4_bad8, align 1
  %v0_badc = load i32, i32* %r2.global-to-local, align 4
  %v1_badc = trunc i32 %v0_badc to i8
  %v2_badc = load i32, i32* %ip.global-to-local, align 4
  %v3_badc = add i32 %v2_badc, 2
  %v4_badc = inttoptr i32 %v3_badc to i8*
  store i8 %v1_badc, i8* %v4_badc, align 1
  %v0_bae0 = load i32, i32* @r4, align 4
  store i32 %v0_bae0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bae8 = load i32, i32* @sb, align 4
  store i32 %v0_bae8, i32* %r0.global-to-local, align 4
  %v0_baec = load i32, i32* @sl, align 4
  store i32 %v0_baec, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_baf4 = load i32, i32* %ip.global-to-local, align 4
  %v6_bafc = inttoptr i32 %v0_bae0 to i32*
  %v7_bafc = call i32 @function_13e58(i32 %v0_bae8, i32* %v6_bafc, i32 %v0_baec, i32 16384, i32 %v0_baf4, i32 16)
  %v3_bb00 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bb00, i32* %r3.global-to-local, align 4
  store i32 %v1_b5bc, i32* %ip.global-to-local, align 4
  %v1_bb08 = add i32 %v3_bb00, 1
  store i32 %v1_bb08, i32* %r0.global-to-local, align 4
  %v9_bb0c = icmp eq i32 %v1_bb08, %v1_b5bc
  store i1 %v9_bb0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bb08, i32* %stack_var_-40, align 4
  %v6_bb14 = icmp slt i32 %v1_bb08, %v1_b5bc
  br i1 %v6_bb14, label %dec_label_pc_bb18, label %dec_label_pc_bc0c

dec_label_pc_bb18:                                ; preds = %dec_label_pc_ba28, %dec_label_pc_b9fc
  %v1_bb24 = phi i32 [ %v1_bb08, %dec_label_pc_ba28 ], [ 0, %dec_label_pc_b9fc ]
  store i32 %v2_b5f8, i32* %ip.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b7f4, i32* %lr.global-to-local, align 4
  %v4_bb24 = mul i32 %v1_bb24, 4
  %v5_bb24 = add i32 %v4_bb24, %v2_b5f8
  %v6_bb24 = inttoptr i32 %v5_bb24 to i32*
  %v7_bb24 = load i32, i32* %v6_bb24, align 4
  store i32 %v7_bb24, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bb2c, i1* %cpsr_z.global-to-local, align 1
  %v1_bb30 = add i32 %v7_bb24, 40
  store i32 %v1_bb30, i32* @r6, align 4
  %v1_bb34 = add i32 %v7_bb24, 20
  store i32 %v1_bb34, i32* @r5, align 4
  br i1 %v3_bb2c, label %dec_label_pc_bbf8, label %dec_label_pc_bb3c

dec_label_pc_bb3c:                                ; preds = %dec_label_pc_bb18, %dec_label_pc_bbf8
  %v0_bb48 = phi i32 [ %v1_bb30, %dec_label_pc_bb18 ], [ %v0_bb48.pre, %dec_label_pc_bbf8 ]
  store i1 %v2_bb40, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  store i32 %v0_bb48, i32* %r0.global-to-local, align 4
  br i1 %v2_bb40, label %dec_label_pc_ba28, label %dec_label_pc_bb50

dec_label_pc_bb50:                                ; preds = %dec_label_pc_bb3c
  %v2_bb50 = call i32 @function_f97c(i32 %v0_bb48, i32 %v6_b768)
  store i32 %v2_bb50, i32* %r0.global-to-local, align 4
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  %v0_bb58 = load i32, i32* @r7, align 4
  %v1_bb58 = trunc i32 %v0_bb58 to i8
  %v2_bb58 = load i32, i32* @r6, align 4
  %v4_bb58 = add i32 %v2_bb58, %v6_b768
  %v5_bb58 = inttoptr i32 %v4_bb58 to i8*
  store i8 %v1_bb58, i8* %v5_bb58, align 1
  br label %dec_label_pc_ba28

dec_label_pc_bb60:                                ; preds = %dec_label_pc_b7c4
  %v0_bb60 = load i32, i32* @sb, align 4
  store i32 %v0_bb60, i32* %r0.global-to-local, align 4
  %v1_bb64 = call i32 @function_135d0(i32 %v0_bb60)
  store i32 %v1_bb64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb68

dec_label_pc_bb68:                                ; preds = %dec_label_pc_b91c, %dec_label_pc_bc0c, %dec_label_pc_b5b8, %dec_label_pc_bb60
  %v29_bb6c = phi i32 [ %v3_b7ac, %dec_label_pc_b5b8 ], [ %v1_bb64, %dec_label_pc_bb60 ], [ %v2_bc10, %dec_label_pc_bc0c ], [ 0, %dec_label_pc_b91c ]
  ret i32 %v29_bb6c

dec_label_pc_bb70:                                ; preds = %bb79
  %v1_bb70 = add i32 %v2_b87c, 16
  %v2_bb70 = inttoptr i32 %v1_bb70 to i32*
  %v3_bb70 = load i32, i32* %v2_bb70, align 4
  store i32 %v3_bb70, i32* @r4, align 4
  %v0_bb74 = call i32 @function_f8c8()
  store i32 %v0_bb74, i32* %r0.global-to-local, align 4
  %v3_bb78 = load i32, i32* %stack_var_-40, align 4
  %v5_bb80 = mul i32 %v3_bb78, 24
  %v0_bb88 = load i32, i32* @r4, align 4
  %v2_bb8c = add i32 %v5_bb80, %arg3
  store i32 %v2_bb8c, i32* %r1.global-to-local, align 4
  %v1_bb88 = udiv i32 %v0_bb88, 256
  %v3_bb90 = and i32 %v1_bb88, 65280
  store i32 %v3_bb90, i32* %r2.global-to-local, align 4
  %v1_bb94 = and i32 %v0_bb88, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_bb94, i32* %r3.global-to-local, align 4
  %v3_bb98 = mul i32 %v0_bb88, 16777216
  %v4_bb9c = mul i32 %v1_bb94, 256
  %v5_bb9c = or i32 %v4_bb9c, %v3_bb98
  store i32 %v5_bb9c, i32* %ip.global-to-local, align 4
  %v1_bba0 = add i32 %v2_bb8c, 20
  %v2_bba0 = inttoptr i32 %v1_bba0 to i8*
  %v3_bba0 = load i8, i8* %v2_bba0, align 1
  %v4_bba0 = zext i8 %v3_bba0 to i32
  store i32 %v4_bba0, i32* %lr.global-to-local, align 4
  %v4_bba4 = udiv i32 %v0_bb88, 16777216
  %v5_bba4 = or i32 %v3_bb90, %v4_bba4
  %v2_bba8 = or i32 %v5_bba4, %v5_bb9c
  %v7_bbac = lshr i32 %v0_bb74, %v4_bba0
  %v8_bbac = add i32 %v7_bbac, %v2_bba8
  store i32 %v8_bbac, i32* %r2.global-to-local, align 4
  %v3_bbb8 = mul i32 %v8_bbac, 16777216
  %v1_bbbc = and i32 %v8_bbac, 65280
  store i32 %v1_bbbc, i32* %r0.global-to-local, align 4
  %v4_bbc0 = mul nuw nsw i32 %v1_bbbc, 256
  %v5_bbc0 = or i32 %v4_bbc0, %v3_bbb8
  store i32 %v5_bbc0, i32* %r1.global-to-local, align 4
  %v2_bbc8 = call i32 @llvm.bswap.i32(i32 %v8_bbac)
  store i32 %v3_b7b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bbdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bbdc, label %dec_label_pc_bbe4, label %dec_label_pc_b8a8

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_bb70, %dec_label_pc_b894
  %stack_var_-56.6 = phi i32 [ %v2_bbc8, %dec_label_pc_bb70 ], [ %v4_b88c.stack_var_-56.1, %dec_label_pc_b894 ]
  %v0_bbe4 = call i32 @function_f8c8()
  %v1_bbe4 = trunc i32 %v0_bbe4 to i8
  store i32 %v0_bbe4, i32* %r0.global-to-local, align 4
  %v4_bbe8 = sdiv i32 %v0_bbe4, 256
  store i32 %v4_bbe8, i32* %r3.global-to-local, align 4
  %v1_bbec = trunc i32 %v4_bbe8 to i8
  br label %dec_label_pc_b8c0

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bb18
  %v0_bbf8 = call i32 @function_f8c8()
  %v1_bbf8 = trunc i32 %v0_bbf8 to i8
  store i32 %v0_bbf8, i32* %r0.global-to-local, align 4
  %v4_bbfc = sdiv i32 %v0_bbf8, 256
  store i32 %v4_bbfc, i32* %r3.global-to-local, align 4
  %v1_bc00 = trunc i32 %v4_bbfc to i8
  %v2_bc00 = load i32, i32* @r4, align 4
  %v3_bc00 = add i32 %v2_bc00, 5
  %v4_bc00 = inttoptr i32 %v3_bc00 to i8*
  store i8 %v1_bc00, i8* %v4_bc00, align 1
  %v3_bc04 = load i32, i32* @r4, align 4
  %v4_bc04 = add i32 %v3_bc04, 4
  %v5_bc04 = inttoptr i32 %v4_bc04 to i8*
  store i8 %v1_bbf8, i8* %v5_bc04, align 1
  %v0_bb48.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bb3c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_ba28, %dec_label_pc_b9e8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bc10 = call i32 @function_138a0(i32* null)
  store i32 %v2_bc10, i32* %r0.global-to-local, align 4
  store i32 %v2_b798, i32* %lr.global-to-local, align 4
  %v9_bc18 = icmp eq i32 %v2_b798, %v2_bc10
  store i1 %v9_bc18, i1* %cpsr_z.global-to-local, align 1
  %v6_bc1c = icmp slt i32 %v2_b798, %v2_bc10
  br i1 %v6_bc1c, label %dec_label_pc_bb68, label %dec_label_pc_b9e8

dec_label_pc_bc24:                                ; preds = %dec_label_pc_b994
  %v3_bc24 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc24, i32* @r4, align 4
  store i32 %v2_b5e8, i32* %r0.global-to-local, align 4
  %v3_bc2c = mul i32 %v3_bc24, 16
  store i32 %v3_bc2c, i32* %ip.global-to-local, align 4
  %v3_bc30 = add i32 %v3_bc2c, %v2_b5e8
  %v4_bc30 = inttoptr i32 %v3_bc30 to i32*
  store i32 %v0_bc30, i32* %v4_bc30, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_bc38 = add i32 %stack_var_-336.0.ph, 4
  %v2_bc38 = inttoptr i32 %v1_bc38 to i32*
  %v3_bc38 = load i32, i32* %v2_bc38, align 4
  store i32 %v3_bc38, i32* %r0.global-to-local, align 4
  %v1_bc40 = and i32 %v3_bc38, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_bc40, i32* %r1.global-to-local, align 4
  %v3_bc44 = mul i32 %v3_bc38, 16777216
  %v1_bc3c = udiv i32 %v3_bc38, 256
  %v3_bc48 = and i32 %v1_bc3c, 65280
  %v4_bc4c = mul i32 %v1_bc40, 256
  %v4_bc50 = udiv i32 %v3_bc38, 16777216
  %v5_bc50 = or i32 %v4_bc50, %v3_bc44
  %v5_bc4c = or i32 %v5_bc50, %v4_bc4c
  %v2_bc54 = or i32 %v5_bc4c, %v3_bc48
  store i32 %v2_b5e8, i32* %r2.global-to-local, align 4
  %v1_bc5c = load i32, i32* %ip.global-to-local, align 4
  %v2_bc5c = add i32 %v1_bc5c, %v2_b5e8
  store i32 %v2_bc5c, i32* %ip.global-to-local, align 4
  %v2_bc60 = add i32 %v2_bc5c, 4
  %v3_bc60 = inttoptr i32 %v2_bc60 to i32*
  store i32 %v2_bc54, i32* %v3_bc60, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_bc68 = add i32 %stack_var_-336.0.ph, 8
  %v2_bc68 = inttoptr i32 %v1_bc68 to i32*
  %v3_bc68 = load i32, i32* %v2_bc68, align 4
  store i32 %v3_bc68, i32* %r0.global-to-local, align 4
  %v1_bc70 = and i32 %v3_bc68, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_bc70, i32* %r1.global-to-local, align 4
  %v3_bc74 = mul i32 %v3_bc68, 16777216
  %v1_bc6c = udiv i32 %v3_bc68, 256
  %v3_bc78 = and i32 %v1_bc6c, 65280
  %v4_bc7c = mul i32 %v1_bc70, 256
  %v5_bc7c = or i32 %v4_bc7c, %v3_bc74
  store i32 %v5_bc7c, i32* %r2.global-to-local, align 4
  %v4_bc80 = udiv i32 %v3_bc68, 16777216
  %v5_bc80 = or i32 %v3_bc78, %v4_bc80
  %v2_bc84 = or i32 %v5_bc80, %v5_bc7c
  store i32 %v2_bc84, i32* %r3.global-to-local, align 4
  %v1_bc88 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc88 = add i32 %v1_bc88, 8
  %v3_bc88 = inttoptr i32 %v2_bc88 to i32*
  store i32 %v2_bc84, i32* %v3_bc88, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_bc90 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_bc90 = load i32, i32* %v1_bc90, align 4
  %v3_bc94 = udiv i32 %v2_bc90, 65536
  store i32 %v3_bc94, i32* %r2.global-to-local, align 4
  %v3_bc985 = udiv i32 %v2_bc90, 16777216
  store i32 %v3_bc985, i32* %r1.global-to-local, align 4
  %v0_bc9c = load i32, i32* @r5, align 4
  %v3_bc9c = sdiv i32 %v0_bc9c, 256
  store i32 %v3_bc9c, i32* %r3.global-to-local, align 4
  %v1_bca0 = trunc i32 %v3_bc9c to i8
  %v2_bca0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bca0 = add i32 %v2_bca0, 15
  %v4_bca0 = inttoptr i32 %v3_bca0 to i8*
  store i8 %v1_bca0, i8* %v4_bca0, align 1
  %v0_bca4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bca4 = trunc i32 %v0_bca4 to i8
  %v2_bca4 = load i32, i32* %ip.global-to-local, align 4
  %v3_bca4 = add i32 %v2_bca4, 13
  %v4_bca4 = inttoptr i32 %v3_bca4 to i8*
  store i8 %v1_bca4, i8* %v4_bca4, align 1
  %v0_bca8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bca8 = trunc i32 %v0_bca8 to i8
  %v2_bca8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bca8 = add i32 %v2_bca8, 12
  %v4_bca8 = inttoptr i32 %v3_bca8 to i8*
  store i8 %v1_bca8, i8* %v4_bca8, align 1
  %v0_bcac = load i32, i32* @r5, align 4
  %v1_bcac = trunc i32 %v0_bcac to i8
  %v2_bcac = load i32, i32* %ip.global-to-local, align 4
  %v3_bcac = add i32 %v2_bcac, 14
  %v4_bcac = inttoptr i32 %v3_bcac to i8*
  store i8 %v1_bcac, i8* %v4_bcac, align 1
  store i32 %v1_b814, i32* %r0.global-to-local, align 4
  %v1_bcb4 = call i32 @function_14054(i32 %v1_b814)
  store i32 %v1_bcb4, i32* %r0.global-to-local, align 4
  store i32 %v2_b5f8, i32* %r1.global-to-local, align 4
  %v3_bcbc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bcbc, i32* %r2.global-to-local, align 4
  %v2_bcc0 = load i32, i32* @r4, align 4
  %v5_bcc0 = mul i32 %v2_bcc0, 4
  %v6_bcc0 = add i32 %v5_bcc0, %v2_b5f8
  %v7_bcc0 = inttoptr i32 %v6_bcc0 to i32*
  store i32 %v1_bcb4, i32* %v7_bcc0, align 4
  %v0_bcc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bcc4 = load i32, i32* %r2.global-to-local, align 4
  %v4_bcc4 = mul i32 %v1_bcc4, 4
  %v5_bcc4 = add i32 %v4_bcc4, %v0_bcc4
  %v6_bcc4 = inttoptr i32 %v5_bcc4 to i32*
  %v7_bcc4 = load i32, i32* %v6_bcc4, align 4
  store i32 %v7_bcc4, i32* %r0.global-to-local, align 4
  %v1_bcc8 = inttoptr i32 %v7_bcc4 to i8*
  %v2_bcc8 = load i8, i8* %v1_bcc8, align 1
  %tmp107 = urem i8 %v2_bcc8, 16
  %v1_bccc = zext i8 %tmp107 to i32
  %v1_bcd0 = or i32 %v1_bccc, 64
  store i32 %v1_bcd0, i32* %r3.global-to-local, align 4
  %v1_bcd4 = trunc i32 %v1_bcd0 to i8
  store i8 %v1_bcd4, i8* %v1_bcc8, align 1
  store i32 %v3_b7f4, i32* %ip.global-to-local, align 4
  %v0_bcdc = load i32, i32* %r0.global-to-local, align 4
  %v1_bcdc = inttoptr i32 %v0_bcdc to i8*
  %v2_bcdc = load i8, i8* %v1_bcdc, align 1
  %v1_bce8 = and i8 %v2_bcdc, -16
  store i32 %v5_bcec, i32* %r3.global-to-local, align 4
  %v1_bcf0 = or i8 %v1_bce8, 5
  store i32 %v1_b678, i32* %ip.global-to-local, align 4
  store i32 %v1_bce4, i32* %r1.global-to-local, align 4
  store i8 %v1_bcf0, i8* %v1_bcdc, align 1
  %v0_bd00 = load i32, i32* %r1.global-to-local, align 4
  %v1_bd00 = trunc i32 %v0_bd00 to i8
  %v2_bd00 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd00 = add i32 %v2_bd00, 5
  %v4_bd00 = inttoptr i32 %v3_bd00 to i8*
  store i8 %v1_bd00, i8* %v4_bd00, align 1
  store i32 %v4_bd04, i32* %r1.global-to-local, align 4
  store i32 %v4_bd08, i32* %lr.global-to-local, align 4
  %v2_bd0c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd0c = add i32 %v2_bd0c, 1
  %v4_bd0c = inttoptr i32 %v3_bd0c to i8*
  store i8 %v5_b630, i8* %v4_bd0c, align 1
  store i32 %v4_bd10, i32* %r2.global-to-local, align 4
  %v0_bd14 = load i32, i32* %ip.global-to-local, align 4
  %v2_bd14 = icmp eq i32 %v0_bd14, 0
  store i1 %v2_bd14, i1* %cpsr_z.global-to-local, align 1
  %v0_bd18 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd18 = trunc i32 %v0_bd18 to i8
  %v2_bd18 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd18 = add i32 %v2_bd18, 4
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  %v0_bd1c = load i32, i32* %r0.global-to-local, align 4
  %v1_bd1c = add i32 %v0_bd1c, 20
  store i32 %v1_bd1c, i32* %r3.global-to-local, align 4
  %v0_bd20 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd20 = trunc i32 %v0_bd20 to i8
  %v3_bd20 = add i32 %v0_bd1c, 8
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v1_bd20, i8* %v4_bd20, align 1
  %v0_bd24 = load i32, i32* %r3.global-to-local, align 4
  %v0_bd28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd28, label %.thread8, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_bc24
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bd2c = load i32, i32* %r0.global-to-local, align 4
  %v4_bd2c = add i32 %v3_bd2c, 6
  %v5_bd2c = inttoptr i32 %v4_bd2c to i8*
  store i8 64, i8* %v5_bd2c, align 1
  %v0_bd30.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd30.pr.pr, label %.thread8, label %bb91

bb91:                                             ; preds = %.thread7
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_bc24, %.thread7, %bb91
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bd38 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd38 = add i32 %v2_bd38, 9
  %v4_bd38 = inttoptr i32 %v3_bd38 to i8*
  store i8 6, i8* %v4_bd38, align 1
  %v0_bd3c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd3c, label %bb93, label %bb92

bb92:                                             ; preds = %.thread8
  %v1_bd3c = load i32, i32* %r2.global-to-local, align 4
  %v2_bd3c = trunc i32 %v1_bd3c to i8
  %v3_bd3c = load i32, i32* %r0.global-to-local, align 4
  %v4_bd3c = add i32 %v3_bd3c, 7
  %v5_bd3c = inttoptr i32 %v4_bd3c to i8*
  store i8 %v2_bd3c, i8* %v5_bd3c, align 1
  br label %bb93

bb93:                                             ; preds = %.thread8, %bb92
  %v2_bd44 = load i32, i32* @global_var_1f238.83, align 4
  store i32 %v2_bd44, i32* %r3.global-to-local, align 4
  %v1_bd48 = load i32, i32* %r0.global-to-local, align 4
  %v2_bd48 = add i32 %v1_bd48, 12
  %v3_bd48 = inttoptr i32 %v2_bd48 to i32*
  store i32 %v2_bd44, i32* %v3_bd48, align 4
  %v3_bd4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd4c, i32* %r2.global-to-local, align 4
  store i32 %v2_b5e8, i32* %ip.global-to-local, align 4
  %v4_bd54 = mul i32 %v3_bd4c, 16
  %v5_bd54 = add i32 %v4_bd54, %v2_b5e8
  %v6_bd54 = inttoptr i32 %v5_bd54 to i32*
  %v7_bd54 = load i32, i32* %v6_bd54, align 4
  store i32 %v7_bd54, i32* %r3.global-to-local, align 4
  %v0_bd58 = load i32, i32* %lr.global-to-local, align 4
  %v1_bd58 = trunc i32 %v0_bd58 to i8
  %v2_bd58 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd58 = add i32 %v2_bd58, 3
  %v4_bd58 = inttoptr i32 %v3_bd58 to i8*
  store i8 %v1_bd58, i8* %v4_bd58, align 1
  %v0_bd5c = load i32, i32* @fp, align 4
  %v1_bd5c = trunc i32 %v0_bd5c to i8
  %v2_bd5c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd5c = add i32 %v2_bd5c, 2
  %v4_bd5c = inttoptr i32 %v3_bd5c to i8*
  store i8 %v1_bd5c, i8* %v4_bd5c, align 1
  %v0_bd60 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd60 = load i32, i32* %r0.global-to-local, align 4
  %v2_bd60 = add i32 %v1_bd60, 16
  %v3_bd60 = inttoptr i32 %v2_bd60 to i32*
  store i32 %v0_bd60, i32* %v3_bd60, align 4
  %v0_bd64 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd64 = mul i32 %v0_bd64, 16
  %v1_bd68 = load i32, i32* %ip.global-to-local, align 4
  %v2_bd68 = add i32 %v1_bd68, %v3_bd64
  store i32 %v2_bd68, i32* %r2.global-to-local, align 4
  %v1_bd6c = add i32 %v2_bd68, 13
  %v2_bd6c = inttoptr i32 %v1_bd6c to i8*
  %v3_bd6c = load i8, i8* %v2_bd6c, align 1
  %v4_bd6c = zext i8 %v3_bd6c to i32
  store i32 %v4_bd6c, i32* %r1.global-to-local, align 4
  %v1_bd70 = add i32 %v2_bd68, 12
  %v2_bd70 = inttoptr i32 %v1_bd70 to i8*
  %v3_bd70 = load i8, i8* %v2_bd70, align 1
  %v4_bd70 = zext i8 %v3_bd70 to i32
  store i32 %v0_bd24, i32* %lr.global-to-local, align 4
  %v4_bd78 = mul nuw nsw i32 %v4_bd6c, 256
  %v5_bd78 = or i32 %v4_bd70, %v4_bd78
  store i32 %v5_bd78, i32* %r3.global-to-local, align 4
  %v2_bd7c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd7c = add i32 %v2_bd7c, 20
  %v4_bd7c = inttoptr i32 %v3_bd7c to i8*
  store i8 %v3_bd70, i8* %v4_bd7c, align 1
  %v0_bd80 = load i32, i32* %r3.global-to-local, align 4
  %v3_bd80 = sdiv i32 %v0_bd80, 256
  store i32 %v3_bd80, i32* %r3.global-to-local, align 4
  %v1_bd84 = trunc i32 %v3_bd80 to i8
  %v2_bd84 = load i32, i32* %lr.global-to-local, align 4
  %v3_bd84 = add i32 %v2_bd84, 1
  %v4_bd84 = inttoptr i32 %v3_bd84 to i8*
  store i8 %v1_bd84, i8* %v4_bd84, align 1
  %v0_bd88 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd88 = add i32 %v0_bd88, 8
  %v2_bd88 = inttoptr i32 %v1_bd88 to i32*
  %v3_bd88 = load i32, i32* %v2_bd88, align 4
  store i32 %v3_bd88, i32* %r1.global-to-local, align 4
  %v0_bd8c = load i32, i32* %lr.global-to-local, align 4
  %v1_bd8c = add i32 %v0_bd8c, 13
  %v2_bd8c = inttoptr i32 %v1_bd8c to i8*
  %v3_bd8c = load i8, i8* %v2_bd8c, align 1
  %v4_bd8c = zext i8 %v3_bd8c to i32
  store i32 %v4_bd8c, i32* %r3.global-to-local, align 4
  %v1_bd90 = add i32 %v0_bd88, 15
  %v2_bd90 = inttoptr i32 %v1_bd90 to i8*
  %v3_bd90 = load i8, i8* %v2_bd90, align 1
  %v4_bd90 = zext i8 %v3_bd90 to i32
  store i32 %v4_bd90, i32* %ip.global-to-local, align 4
  %v0_bd94 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd94 = add i32 %v0_bd94, 40
  store i32 %v1_bd94, i32* @r4, align 4
  %v1_bd98 = add i32 %v0_bd88, 14
  %v2_bd98 = inttoptr i32 %v1_bd98 to i8*
  %v3_bd98 = load i8, i8* %v2_bd98, align 1
  %v4_bd98 = zext i8 %v3_bd98 to i32
  store i32 %v4_bd98, i32* %r0.global-to-local, align 4
  %v2_bd9c = add i32 %v0_bd8c, 4
  %v3_bd9c = inttoptr i32 %v2_bd9c to i32*
  store i32 %v3_bd88, i32* %v3_bd9c, align 4
  store i32 %v0_bd24, i32* %r1.global-to-local, align 4
  %v0_bda4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bda4 = or i32 %v0_bda4, 1
  store i32 %v1_bda4, i32* %r3.global-to-local, align 4
  %v0_bda8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bda8 = add i32 %v0_bda8, 4
  %v2_bda8 = inttoptr i32 %v1_bda8 to i32*
  %v3_bda8 = load i32, i32* %v2_bda8, align 4
  store i32 %v3_bda8, i32* %lr.global-to-local, align 4
  %v1_bdac = trunc i32 %v1_bda4 to i8
  %v3_bdac = add i32 %v0_bd24, 13
  %v4_bdac = inttoptr i32 %v3_bdac to i8*
  store i8 %v1_bdac, i8* %v4_bdac, align 1
  %v0_bdb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bdb0 = add i32 %v0_bdb0, 12
  %v2_bdb0 = inttoptr i32 %v1_bdb0 to i8*
  %v3_bdb0 = load i8, i8* %v2_bdb0, align 1
  %v4_bdb0 = zext i8 %v3_bdb0 to i32
  store i32 %v4_bdb0, i32* %r2.global-to-local, align 4
  %v1_bdb4 = add i32 %v0_bdb0, 13
  %v2_bdb4 = inttoptr i32 %v1_bdb4 to i8*
  %v3_bdb4 = load i8, i8* %v2_bdb4, align 1
  %v4_bdb4 = zext i8 %v3_bdb4 to i32
  %v0_bdb8 = load i32, i32* %r0.global-to-local, align 4
  %v1_bdb8 = load i32, i32* %ip.global-to-local, align 4
  %v4_bdb8 = mul i32 %v1_bdb8, 256
  %v5_bdb8 = or i32 %v4_bdb8, %v0_bdb8
  store i32 %v5_bdb8, i32* %r0.global-to-local, align 4
  %tmp108 = urem i8 %v3_bdb0, 16
  %v1_bdbc = zext i8 %tmp108 to i32
  store i32 %v0_bd24, i32* %ip.global-to-local, align 4
  %v3_bdc4 = sdiv i32 %v5_bdb8, 256
  store i32 %v3_bdc4, i32* %r1.global-to-local, align 4
  %v1_bdc8 = or i32 %v1_bdbc, 128
  store i32 %v1_bdc8, i32* %r2.global-to-local, align 4
  %v1_bdcc = or i32 %v4_bdb4, 16
  store i32 %v1_bdcc, i32* %r3.global-to-local, align 4
  %v1_bdd0 = trunc i32 %v3_bdc4 to i8
  %v3_bdd0 = add i32 %v0_bd24, 3
  %v4_bdd0 = inttoptr i32 %v3_bdd0 to i8*
  store i8 %v1_bdd0, i8* %v4_bdd0, align 1
  %v0_bdd4 = load i32, i32* %lr.global-to-local, align 4
  %v1_bdd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bdd4 = add i32 %v1_bdd4, 8
  %v3_bdd4 = inttoptr i32 %v2_bdd4 to i32*
  store i32 %v0_bdd4, i32* %v3_bdd4, align 4
  %v0_bdd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bdd8 = trunc i32 %v0_bdd8 to i8
  %v2_bdd8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bdd8 = add i32 %v2_bdd8, 12
  %v4_bdd8 = inttoptr i32 %v3_bdd8 to i8*
  store i8 %v1_bdd8, i8* %v4_bdd8, align 1
  %v0_bddc = load i32, i32* %r3.global-to-local, align 4
  %v1_bddc = trunc i32 %v0_bddc to i8
  %v2_bddc = load i32, i32* %ip.global-to-local, align 4
  %v3_bddc = add i32 %v2_bddc, 13
  %v4_bddc = inttoptr i32 %v3_bddc to i8*
  store i8 %v1_bddc, i8* %v4_bddc, align 1
  %v0_bde0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bde0 = trunc i32 %v0_bde0 to i8
  %v2_bde0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bde0 = add i32 %v2_bde0, 2
  %v4_bde0 = inttoptr i32 %v3_bde0 to i8*
  store i8 %v1_bde0, i8* %v4_bde0, align 1
  %v0_bde4 = call i32 @function_f8c8()
  %v1_bde4 = trunc i32 %v0_bde4 to i8
  store i32 %v0_bde4, i32* %r0.global-to-local, align 4
  store i32 %v0_bd24, i32* %lr.global-to-local, align 4
  store i32 %v1_b6b0, i32* %r1.global-to-local, align 4
  %v3_bdf0 = load i8, i8* %v4_bdac, align 1
  %v4_bdf0 = zext i8 %v3_bdf0 to i32
  store i32 %v1_bdf4, i32* %r2.global-to-local, align 4
  %v1_bdf8 = and i32 %v4_bdf0, 223
  %v5_bdfc = or i32 %v1_bdf8, %v4_bdfc
  store i32 %v5_bdfc, i32* %r3.global-to-local, align 4
  %v1_be00 = trunc i32 %v5_bdfc to i8
  store i8 %v1_be00, i8* %v4_bdac, align 1
  store i32 %v1_b6d0, i32* %ip.global-to-local, align 4
  %v0_be08 = load i32, i32* %lr.global-to-local, align 4
  %v1_be08 = add i32 %v0_be08, 13
  %v2_be08 = inttoptr i32 %v1_be08 to i8*
  %v3_be08 = load i8, i8* %v2_be08, align 1
  %v4_be08 = zext i8 %v3_be08 to i32
  store i32 %v1_be0c, i32* %r3.global-to-local, align 4
  %v1_be10 = and i32 %v4_be08, 239
  %v5_be14 = or i32 %v1_be10, %v4_be14
  store i32 %v5_be14, i32* %r2.global-to-local, align 4
  %v1_be18 = trunc i32 %v5_be14 to i8
  store i8 %v1_be18, i8* %v2_be08, align 1
  %v0_be1c = load i32, i32* %lr.global-to-local, align 4
  %v1_be1c = add i32 %v0_be1c, 13
  %v2_be1c = inttoptr i32 %v1_be1c to i8*
  %v3_be1c = load i8, i8* %v2_be1c, align 1
  %v4_be1c = zext i8 %v3_be1c to i32
  store i32 %v1_b6f0, i32* %lr.global-to-local, align 4
  store i32 %v0_bd24, i32* %r1.global-to-local, align 4
  store i32 %v1_be28, i32* %r2.global-to-local, align 4
  %v1_be2c = and i32 %v4_be1c, 247
  %v5_be30 = or i32 %v1_be2c, %v4_be30
  store i32 %v5_be30, i32* %r3.global-to-local, align 4
  %v1_be34 = trunc i32 %v5_be30 to i8
  store i8 %v1_be34, i8* %v4_bdac, align 1
  store i32 %v1_b710, i32* %ip.global-to-local, align 4
  %v0_be3c = load i32, i32* %r1.global-to-local, align 4
  %v1_be3c = add i32 %v0_be3c, 13
  %v2_be3c = inttoptr i32 %v1_be3c to i8*
  %v3_be3c = load i8, i8* %v2_be3c, align 1
  %v4_be3c = zext i8 %v3_be3c to i32
  store i32 %v1_be40, i32* %r3.global-to-local, align 4
  %v1_be44 = and i32 %v4_be3c, 251
  %v5_be48 = or i32 %v1_be44, %v4_be48
  store i32 %v5_be48, i32* %r2.global-to-local, align 4
  %v1_be4c = trunc i32 %v5_be48 to i8
  store i8 %v1_be4c, i8* %v2_be3c, align 1
  store i32 %v1_b730, i32* %lr.global-to-local, align 4
  %v0_be54 = load i32, i32* %r1.global-to-local, align 4
  %v1_be54 = add i32 %v0_be54, 13
  %v2_be54 = inttoptr i32 %v1_be54 to i8*
  %v3_be54 = load i8, i8* %v2_be54, align 1
  %v4_be54 = zext i8 %v3_be54 to i32
  store i32 %v1_be58, i32* %r2.global-to-local, align 4
  %v1_be5c = and i32 %v4_be54, 253
  %v4_be60 = or i32 %v1_be5c, %v3_be60
  store i32 %v4_be60, i32* %r3.global-to-local, align 4
  %v1_be64 = trunc i32 %v4_be60 to i8
  store i8 %v1_be64, i8* %v2_be54, align 1
  %v0_be68 = load i32, i32* %r1.global-to-local, align 4
  %v1_be68 = add i32 %v0_be68, 13
  %v2_be68 = inttoptr i32 %v1_be68 to i8*
  %v3_be68 = load i8, i8* %v2_be68, align 1
  %v4_be68 = zext i8 %v3_be68 to i32
  %v1_be70 = and i32 %v4_be68, 254
  %v2_be78 = or i32 %v1_be70, %v1_be74
  store i32 %v2_be78, i32* %r3.global-to-local, align 4
  store i32 %v0_bd24, i32* %r2.global-to-local, align 4
  %v4_be80 = sdiv i32 %v0_bde4, 256
  store i32 %v4_be80, i32* %r1.global-to-local, align 4
  %v1_be84 = trunc i32 %v2_be78 to i8
  store i8 %v1_be84, i8* %v4_bdac, align 1
  %v0_be88 = load i32, i32* %r1.global-to-local, align 4
  %v1_be88 = trunc i32 %v0_be88 to i8
  %v2_be88 = load i32, i32* %r2.global-to-local, align 4
  %v3_be88 = add i32 %v2_be88, 15
  %v4_be88 = inttoptr i32 %v3_be88 to i8*
  store i8 %v1_be88, i8* %v4_be88, align 1
  %v3_be8c = load i32, i32* %r2.global-to-local, align 4
  %v4_be8c = add i32 %v3_be8c, 14
  %v5_be8c = inttoptr i32 %v4_be8c to i8*
  store i8 %v1_bde4, i8* %v5_be8c, align 1
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  %v0_be94 = load i32, i32* @r4, align 4
  store i32 %v0_be94, i32* %r0.global-to-local, align 4
  %v2_be98 = call i32 @function_f97c(i32 %v0_be94, i32 %v6_b768)
  store i32 %v2_be98, i32* %r0.global-to-local, align 4
  store i32 %v6_b768, i32* %ip.global-to-local, align 4
  %v2_bea4 = load i32, i32* @r4, align 4
  %v4_bea4 = add i32 %v2_bea4, %v6_b768
  %v5_bea4 = inttoptr i32 %v4_bea4 to i8*
  store i8 0, i8* %v5_bea4, align 1
  %v3_bea8 = load i32, i32* %stack_var_-40, align 4
  %v1_beb0 = add i32 %v3_bea8, 1
  store i32 %v1_beb0, i32* %r3.global-to-local, align 4
  %v9_beb4 = icmp eq i32 %v1_beb0, %v1_b5bc
  store i1 %v9_beb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_beb0, i32* %stack_var_-40, align 4
  %v5_bebc = icmp slt i32 %v1_beb0, %v1_b5bc
  br i1 %v5_bebc, label %dec_label_pc_b824.outer, label %dec_label_pc_b9e8.preheader

; uselistorder directives
  uselistorder i32 %v1_beb0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bde4, { 0, 2, 1 }
  uselistorder i32 %v3_bdc4, { 1, 0 }
  uselistorder i32 %v3_bd80, { 1, 0 }
  uselistorder i32 %v0_bd24, { 3, 4, 5, 0, 6, 1, 7, 8, 2 }
  uselistorder i32 %v3_bc9c, { 1, 0 }
  uselistorder i32 %v3_bc68, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_bc38, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_bc2c, { 1, 0 }
  uselistorder i32 %v2_bc10, { 1, 2, 3, 0 }
  uselistorder i32 %v4_bbfc, { 1, 0 }
  uselistorder i32 %v0_bbf8, { 0, 2, 1 }
  uselistorder i32 %v4_bbe8, { 1, 0 }
  uselistorder i32 %v0_bbe4, { 0, 2, 1 }
  uselistorder i32 %v8_bbac, { 1, 2, 0, 3 }
  uselistorder i32 %v0_bb88, { 1, 0, 3, 2 }
  uselistorder i32 %v0_bb48, { 1, 0 }
  uselistorder i32 %v7_bb24, { 1, 0, 2 }
  uselistorder i32 %v1_bb08, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_baa8, { 0, 2, 1 }
  uselistorder i32 %v0_ba90, { 1, 0, 2 }
  uselistorder i32 %v3_ba6c, { 1, 0 }
  uselistorder i32 %v3_ba4c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_ba38, { 0, 2, 1 }
  uselistorder i1 %v3_bb2c, { 1, 0 }
  uselistorder i32 %v1_ba00, { 3, 2, 0, 1 }
  uselistorder i32 %v1_b9d8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b9c0, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b944, { 1, 0 }
  uselistorder i32 %v7_b93c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_b988, { 1, 0 }
  uselistorder i1 %v9_b96c, { 1, 0 }
  uselistorder i32 %v4_b980, { 1, 0 }
  uselistorder i32 %v4_b97c, { 1, 0 }
  uselistorder i32 %v0_bc30, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_b884, { 1, 0, 2 }
  uselistorder i1 %v7_b834, { 1, 0 }
  uselistorder i32 %v3_b830, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_be58, { 1, 0 }
  uselistorder i32 %v1_be40, { 1, 0 }
  uselistorder i32 %v1_be0c, { 1, 0 }
  uselistorder i32 %v1_bce4, { 1, 0 }
  uselistorder i32 %v1_b8ac, { 1, 0 }
  uselistorder i32 %v5_b984, { 1, 0 }
  uselistorder i32 %v1_be28, { 1, 0 }
  uselistorder i32 %v1_bdf4, { 1, 0 }
  uselistorder i1 %v2_b99c, { 1, 0 }
  uselistorder i32 %v1_b998, { 1, 0 }
  uselistorder i32 %v4_b994, { 2, 0, 1 }
  uselistorder i32 %v4_b978, { 1, 0 }
  uselistorder i32 %v1_b8e4, { 2, 1, 0 }
  uselistorder i1 %v3_bbdc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b814, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_b80c, { 1, 0, 2 }
  uselistorder i1 %v2_b7f8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b7f4, { 1, 2, 3, 0 }
  uselistorder i32 %v0_b7f0, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b7e4, { 1, 0 }
  uselistorder i1 %v7_b7b4, { 1, 0 }
  uselistorder i32 %v3_b7b0, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_b7ac, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_b798, { 2, 1, 0 }
  uselistorder i32 %v1_b788, { 1, 0 }
  uselistorder i32 %v6_b768, { 0, 6, 5, 4, 1, 7, 9, 8, 10, 11, 3, 2 }
  uselistorder i32 %v1_b730, { 1, 0 }
  uselistorder i32 %v1_b710, { 1, 0 }
  uselistorder i32 %v1_b6f0, { 1, 0 }
  uselistorder i32 %v1_b6d0, { 1, 0 }
  uselistorder i32 %v1_b6b0, { 1, 0 }
  uselistorder i32 %v1_b678, { 1, 0 }
  uselistorder i8 %v5_b630, { 1, 0 }
  uselistorder i32 %v6_b610, { 1, 0 }
  uselistorder i32 %v2_b5f8, { 0, 2, 1, 3 }
  uselistorder i32 %v2_b5e8, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_b5bc, { 11, 12, 6, 7, 8, 5, 9, 10, 13, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r2.global-to-local, { 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 56, 58, 59, 60, 62, 61, 63, 64, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r1.global-to-local, { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 42, 41, 43, 45, 44, 0 }
  uselistorder i32* %r0.global-to-local, { 74, 73, 79, 75, 76, 77, 78, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1, 15, 20, 16, 17, 18, 19, 22, 21, 23, 25, 24, 26, 28, 27, 30, 34, 29, 31, 33, 32, 37, 35, 36, 38, 39, 40, 42, 43, 41, 44, 47, 45, 46, 49, 48, 53, 50, 51, 52, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 0 }
  uselistorder i32* %lr.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 13, 14, 15, 16, 17, 19, 20, 35, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 22, 23, 25, 24, 26, 1, 2, 4, 5, 3, 6, 7, 8, 9, 10, 11, 13, 0, 14, 15, 12, 16, 17, 18, 19, 20, 21 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bb68, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_bb3c, { 1, 0 }
  uselistorder label %dec_label_pc_ba28, { 1, 0 }
  uselistorder label %dec_label_pc_b9e8, { 1, 0 }
  uselistorder label %dec_label_pc_b90c, { 2, 1, 3, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_b840, { 1, 0 }
  uselistorder label %dec_label_pc_b824, { 1, 0 }
}

define i32 @function_bec8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bec8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_bec8 = load i32, i32* @sb, align 4
  %v24_bec8 = load i32, i32* @fp, align 4
  %v1_becc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bee8 = urem i32 %arg4, 256
  store i32 %v1_bee8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_bef8 = call i32 @function_141a8(i32 %v1_becc, i32 4)
  %v0_befc = load i32, i32* @r5, align 4
  store i32 %v0_befc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bf08 = load i32, i32* @r7, align 4
  store i32 %v0_bf08, i32* %r3.global-to-local, align 4
  %v0_bf0c = load i32, i32* @r4, align 4
  %v5_bf10 = inttoptr i32 %v0_befc to i32*
  %v6_bf10 = call i32 @function_a054(i32 %v0_bf0c, i32* %v5_bf10, i32 2, i32 %v0_bf08)
  %v1_bf1c = urem i32 %v6_bf10, 256
  store i32 %v1_bf1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bf28 = load i32, i32* @r5, align 4
  store i32 %v0_bf28, i32* %r1.global-to-local, align 4
  %v0_bf2c = load i32, i32* @r4, align 4
  %v5_bf30 = trunc i32 %v6_bf10 to i8
  %v6_bf34 = inttoptr i32 %v0_bf28 to i32*
  %v7_bf34 = call i32 @function_a054(i32 %v0_bf2c, i32* %v6_bf34, i32 3, i32 65535)
  %v0_bf38 = load i32, i32* @r5, align 4
  store i32 %v0_bf38, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_bf48 = load i32, i32* @r4, align 4
  %v5_bf4c = inttoptr i32 %v0_bf38 to i32*
  %v6_bf4c = call i32 @function_a054(i32 %v0_bf48, i32* %v5_bf4c, i32 4, i32 64)
  %v1_bf54 = urem i32 %v6_bf4c, 256
  store i32 %v1_bf54, i32* %ip.global-to-local, align 4
  %v0_bf58 = load i32, i32* @r5, align 4
  store i32 %v0_bf58, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bf60 = load i32, i32* @r7, align 4
  store i32 %v0_bf60, i32* %r3.global-to-local, align 4
  %v0_bf64 = load i32, i32* @r4, align 4
  %v5_bf68 = trunc i32 %v6_bf4c to i8
  %v6_bf6c = inttoptr i32 %v0_bf58 to i32*
  %v7_bf6c = call i32 @function_a054(i32 %v0_bf64, i32* %v6_bf6c, i32 5, i32 %v0_bf60)
  %v1_bf78 = urem i32 %v7_bf6c, 256
  store i32 %v1_bf78, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bf84 = load i32, i32* @r5, align 4
  store i32 %v0_bf84, i32* %r1.global-to-local, align 4
  %v0_bf88 = load i32, i32* @r4, align 4
  %v5_bf90 = inttoptr i32 %v0_bf84 to i32*
  %v6_bf90 = call i32 @function_a054(i32 %v0_bf88, i32* %v5_bf90, i32 6, i32 65535)
  %v0_bf98 = load i32, i32* @r5, align 4
  store i32 %v0_bf98, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bf90, i32* %sb.global-to-local, align 4
  %v0_bfa8 = load i32, i32* @r4, align 4
  %v4_bfac = inttoptr i32 %v0_bf98 to i32*
  %v5_bfac = call i32 @function_a054(i32 %v0_bfa8, i32* %v4_bfac, i32 7, i32 65535)
  %v0_bfb8 = load i32, i32* @r5, align 4
  store i32 %v0_bfb8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_bfc4 = load i32, i32* @r4, align 4
  %v5_bfc8 = inttoptr i32 %v0_bfb8 to i32*
  %v6_bfc8 = call i32 @function_a054(i32 %v0_bfc4, i32* %v5_bfc8, i32 16, i32 65535)
  %v0_bfd4 = load i32, i32* @r5, align 4
  store i32 %v0_bfd4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_bfe0 = load i32, i32* @r4, align 4
  %v5_bfe4 = inttoptr i32 %v0_bfd4 to i32*
  %v6_bfe4 = call i32 @function_a054(i32 %v0_bfe0, i32* %v5_bfe4, i32 17, i32 65535)
  %v0_bfe8 = load i32, i32* @r5, align 4
  store i32 %v0_bfe8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_bff4 = load i32, i32* @r7, align 4
  store i32 %v0_bff4, i32* %r3.global-to-local, align 4
  %v0_bff8 = load i32, i32* @r4, align 4
  %v5_bffc = inttoptr i32 %v0_bfe8 to i32*
  %v6_bffc = call i32 @function_a054(i32 %v0_bff8, i32* %v5_bffc, i32 10, i32 %v0_bff4)
  %v0_c000 = load i32, i32* @r5, align 4
  store i32 %v0_c000, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c010 = load i32, i32* @r4, align 4
  %v5_c014 = inttoptr i32 %v0_c000 to i32*
  %v6_c014 = call i32 @function_a054(i32 %v0_c010, i32* %v5_c014, i32 11, i32 1)
  %v0_c018 = load i32, i32* @r5, align 4
  store i32 %v0_c018, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_c024 = load i32, i32* @r7, align 4
  store i32 %v0_c024, i32* %r3.global-to-local, align 4
  %v0_c028 = load i32, i32* @r4, align 4
  %v5_c02c = inttoptr i32 %v0_c018 to i32*
  %v6_c02c = call i32 @function_a054(i32 %v0_c028, i32* %v5_c02c, i32 12, i32 %v0_c024)
  %v0_c030 = load i32, i32* @r5, align 4
  store i32 %v0_c030, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_c03c = load i32, i32* @r7, align 4
  store i32 %v0_c03c, i32* %r3.global-to-local, align 4
  %v0_c040 = load i32, i32* @r4, align 4
  %v5_c044 = inttoptr i32 %v0_c030 to i32*
  %v6_c044 = call i32 @function_a054(i32 %v0_c040, i32* %v5_c044, i32 13, i32 %v0_c03c)
  %v0_c048 = load i32, i32* @r5, align 4
  store i32 %v0_c048, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_c054 = load i32, i32* @r7, align 4
  store i32 %v0_c054, i32* %r3.global-to-local, align 4
  %v0_c058 = load i32, i32* @r4, align 4
  %v5_c05c = inttoptr i32 %v0_c048 to i32*
  %v6_c05c = call i32 @function_a054(i32 %v0_c058, i32* %v5_c05c, i32 14, i32 %v0_c054)
  %v0_c060 = load i32, i32* @r5, align 4
  store i32 %v0_c060, i32* %r1.global-to-local, align 4
  %v0_c068 = load i32, i32* @r7, align 4
  store i32 %v0_c068, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_c070 = load i32, i32* @r4, align 4
  %v5_c074 = inttoptr i32 %v0_c060 to i32*
  %v6_c074 = call i32 @function_a054(i32 %v0_c070, i32* %v5_c074, i32 15, i32 %v0_c068)
  %v0_c078 = load i32, i32* @r5, align 4
  store i32 %v0_c078, i32* %r1.global-to-local, align 4
  %v0_c07c = load i32, i32* @r7, align 4
  store i32 %v0_c07c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_c074, i32* %fp.global-to-local, align 4
  %v0_c088 = load i32, i32* @r4, align 4
  %v4_c08c = inttoptr i32 %v0_c078 to i32*
  %v5_c08c = call i32 @function_a054(i32 %v0_c088, i32* %v4_c08c, i32 %v0_c07c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c098 = load i32, i32* @r5, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 %v5_c08c, i32* @sl, align 4
  %v0_c0a0 = load i32, i32* @r4, align 4
  %v4_c0a4 = inttoptr i32 %v0_c098 to i32*
  %v5_c0a4 = call i32 @function_a054(i32 %v0_c0a0, i32* %v4_c0a4, i32 1, i32 1)
  %v2_c0b0 = load i32, i32* @global_var_1f238.83, align 4
  store i32 %v2_c0b0, i32* %r3.global-to-local, align 4
  %v1_c0b4 = urem i32 %v5_c0a4, 256
  store i32 %v1_c0b4, i32* %ip.global-to-local, align 4
  %v0_c0b8 = load i32, i32* @r5, align 4
  store i32 %v0_c0b8, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_c0c0 = load i32, i32* @r4, align 4
  %v5_c0c8 = inttoptr i32 %v0_c0b8 to i32*
  %v6_c0c8 = call i32 @function_9fe8(i32 %v0_c0c0, i32* %v5_c0c8, i32 24, i32 %v2_c0b0, i32 %v1_c0b4)
  %v0_c0d0 = load i32, i32* @r7, align 4
  %v1_c0d4 = inttoptr i32 %v0_c0d0 to i32*
  %v2_c0d4 = call i32 @function_138a0(i32* %v1_c0d4)
  %v1_c0d8 = load i32, i32* @r6, align 4
  %v2_c0d8 = add i32 %v1_c0d8, %v2_c0d4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c0ec = call i32 @function_13ebc(i32 2, i32 3, i32 6)
  %v7_c0f0 = icmp eq i32 %v3_c0ec, -1
  store i1 %v7_c0f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0f0, label %dec_label_pc_c670, label %dec_label_pc_c0fc

dec_label_pc_c0fc:                                ; preds = %dec_label_pc_bec8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c104 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c104, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_c10c = load i32, i32* @r7, align 4
  store i32 %v0_c10c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c118 = call i32 @function_13e8c(i32 %v3_c0ec, i32 %v0_c10c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c11c = icmp eq i32 %v6_c118, -1
  store i1 %v7_c11c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c11c, label %dec_label_pc_c678, label %dec_label_pc_c124

dec_label_pc_c124:                                ; preds = %dec_label_pc_c0fc
  store i32 %v1_becc, i32* %r3.global-to-local, align 4
  %v3_c130 = mul i32 %v7_bf34, 65536
  store i32 %v3_c130, i32* @r4, align 4
  %v0_c134 = load i32, i32* %sb.global-to-local, align 4
  %v3_c134 = mul i32 %v0_c134, 65536
  store i32 %v3_c134, i32* %sb.global-to-local, align 4
  %v3_c13c = urem i32 %v7_bf34, 65536
  store i32 %v3_c13c, i32* %ip.global-to-local, align 4
  %v3_c140 = urem i32 %v0_c134, 65536
  store i32 %v3_c140, i32* %r1.global-to-local, align 4
  %v3_c144 = urem i32 %v5_bfac, 65536
  store i32 %v3_c144, i32* %r2.global-to-local, align 4
  %v2_c148 = icmp eq i32 %v1_becc, 0
  store i1 %v2_c148, i1* %cpsr_z.global-to-local, align 1
  %v0_c14c = load i32, i32* @r7, align 4
  store i32 %v0_c14c, i32* %stack_var_-40, align 4
  br i1 %v2_c148, label %dec_label_pc_c3e4.preheader, label %dec_label_pc_c160

dec_label_pc_c160:                                ; preds = %dec_label_pc_c124
  %v0_c170 = load i32, i32* @sl, align 4
  %v1_c178 = urem i32 %v0_c134, 256
  %tmp73 = udiv i32 %v7_bf34, 256
  %v1_c190 = urem i32 %v5_bfac, 256
  store i32 %v1_c190, i32* @lr, align 4
  %tmp74 = mul i32 %v6_bfc8, 256
  %v1_c1a0 = and i32 %tmp74, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp76 = udiv i32 %v6_bfc8, 256
  %v4_c1a4 = urem i32 %tmp76, 256
  %v5_c1a4 = or i32 %v4_c1a4, %v1_c1a0
  %v1_c1c0 = urem i32 %v6_bffc, 2
  %v1_c1c4 = urem i32 %v6_c014, 2
  %v1_c1c8 = urem i32 %v6_c02c, 2
  %v1_c1cc = urem i32 %v6_c044, 2
  %v1_c170 = mul i32 %v0_c170, 65536
  %tmp93 = add i32 %v1_c170, 2621440
  %v3_c1ec = sdiv i32 %tmp93, 16777216
  %sext12 = mul i32 %tmp73, 16777216
  %v7_c1ec = sdiv i32 %sext12, 16777216
  %v3_c1f0 = mul nuw nsw i32 %v1_c178, 256
  %tmp77 = udiv i32 %v5_bfac, 256
  %v3_c1f4 = urem i32 %tmp77, 256
  %v1_c1f8 = urem i32 %v6_c05c, 2
  store i32 %v1_c1f8, i32* %ip.global-to-local, align 4
  %v1_c1fc = urem i32 %v6_c02c, 256
  store i32 %v1_c1fc, i32* %r1.global-to-local, align 4
  %v3_c200 = ashr i32 %tmp93, 31
  store i32 %v3_c200, i32* %r2.global-to-local, align 4
  %v3_c204 = ashr i32 %sext12, 31
  store i32 %v3_c204, i32* %r3.global-to-local, align 4
  %tmp94 = udiv i32 %v0_c134, 256
  %v4_c208 = urem i32 %tmp94, 256
  %v5_c208 = or i32 %v4_c208, %v3_c1f0
  store i32 %v5_c208, i32* @r4, align 4
  %v0_c20c = load i32, i32* %fp.global-to-local, align 4
  %v1_c20c = urem i32 %v0_c20c, 2
  %v4_c210 = mul nuw nsw i32 %v1_c190, 256
  %v5_c210 = or i32 %v4_c210, %v3_c1f4
  store i32 %v5_c210, i32* @r5, align 4
  %v5_c21c = trunc i32 %v3_c200 to i8
  store i32 %v0_c14c, i32* @r6, align 4
  store i32 %v1_c178, i32* @fp, align 4
  store i32 %v1_c190, i32* @sb, align 4
  %v4_c284 = sext i8 %v5_bf68 to i32
  %tmp = sub nsw i32 0, %v1_c1c0
  %v4_c300 = and i32 %tmp, 32
  %tmp95 = sub nsw i32 0, %v1_c1c4
  %v4_c314 = and i32 %tmp95, 16
  %tmp96 = sub nsw i32 0, %v1_c1c8
  %v4_c328 = and i32 %tmp96, 8
  %tmp97 = sub nsw i32 0, %v1_c1cc
  %v4_c33c = and i32 %tmp97, 4
  %tmp98 = sub nsw i32 0, %v1_c1f8
  %v3_c350 = and i32 %tmp98, 2
  %v2_c3a0 = icmp eq i32 %v1_c1fc, 0
  br label %dec_label_pc_c238

dec_label_pc_c238:                                ; preds = %.thread11, %dec_label_pc_c160
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c244 = call i32 @function_141a8(i32 1510, i32 1)
  store i32 %v2_bef8, i32* %ip.global-to-local, align 4
  %v3_c24c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c24c, i32* %r3.global-to-local, align 4
  %v2_c250 = load i32, i32* @r6, align 4
  %v5_c250 = mul i32 %v2_c250, 4
  %v6_c250 = add i32 %v5_c250, %v2_bef8
  %v7_c250 = inttoptr i32 %v6_c250 to i32*
  store i32 %v2_c244, i32* %v7_c250, align 4
  %v0_c254 = load i32, i32* %ip.global-to-local, align 4
  %v1_c254 = load i32, i32* %r3.global-to-local, align 4
  %v4_c254 = mul i32 %v1_c254, 4
  %v5_c254 = add i32 %v4_c254, %v0_c254
  %v6_c254 = inttoptr i32 %v5_c254 to i32*
  %v7_c254 = load i32, i32* %v6_c254, align 4
  store i32 %v7_c254, i32* %r1.global-to-local, align 4
  %v1_c258 = inttoptr i32 %v7_c254 to i8*
  %v2_c258 = load i8, i8* %v1_c258, align 1
  %tmp99 = urem i8 %v2_c258, 16
  %v1_c25c = zext i8 %tmp99 to i32
  %v1_c260 = or i32 %v1_c25c, 64
  store i32 %v1_c260, i32* %r2.global-to-local, align 4
  %v1_c264 = trunc i32 %v1_c260 to i8
  store i8 %v1_c264, i8* %v1_c258, align 1
  %v0_c268 = load i32, i32* %r1.global-to-local, align 4
  %v1_c268 = inttoptr i32 %v0_c268 to i8*
  %v2_c268 = load i8, i8* %v1_c268, align 1
  %v1_c26c = and i8 %v2_c268, -16
  %v1_c270 = or i8 %v1_c26c, 5
  store i32 %v1_bf78, i32* %r2.global-to-local, align 4
  store i8 %v1_c270, i8* %v1_c268, align 1
  %v2_c280 = load i32, i32* %r1.global-to-local, align 4
  %v3_c280 = add i32 %v2_c280, 1
  %v4_c280 = inttoptr i32 %v3_c280 to i8*
  store i8 %v5_bf30, i8* %v4_c280, align 1
  store i32 %v4_c284, i32* %ip.global-to-local, align 4
  %v2_c288 = load i32, i32* %r1.global-to-local, align 4
  %v3_c288 = add i32 %v2_c288, 8
  %v4_c288 = inttoptr i32 %v3_c288 to i8*
  store i8 %v5_bf68, i8* %v4_c288, align 1
  %v0_c28c = load i32, i32* %r2.global-to-local, align 4
  %v2_c28c = icmp eq i32 %v0_c28c, 0
  store i1 %v2_c28c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c200, i32* %r3.global-to-local, align 4
  store i32 %v3_c1ec, i32* %r2.global-to-local, align 4
  %v2_c298 = load i32, i32* %r1.global-to-local, align 4
  %v3_c298 = add i32 %v2_c298, 3
  %v4_c298 = inttoptr i32 %v3_c298 to i8*
  store i8 %v5_c21c, i8* %v4_c298, align 1
  %v0_c29c = load i32, i32* %r2.global-to-local, align 4
  %v1_c29c = trunc i32 %v0_c29c to i8
  %v2_c29c = load i32, i32* %r1.global-to-local, align 4
  %v3_c29c = add i32 %v2_c29c, 2
  %v4_c29c = inttoptr i32 %v3_c29c to i8*
  store i8 %v1_c29c, i8* %v4_c29c, align 1
  %v0_c2a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2a0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_c238
  store i32 %v3_c204, i32* %r2.global-to-local, align 4
  %extract.t91 = trunc i32 %v3_c204 to i8
  br label %bb78

bb:                                               ; preds = %dec_label_pc_c238
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_c204, i32* %r2.global-to-local, align 4
  %v3_c2a8 = load i32, i32* %r1.global-to-local, align 4
  %v4_c2a8 = add i32 %v3_c2a8, 6
  %v5_c2a8 = inttoptr i32 %v4_c2a8 to i8*
  store i8 64, i8* %v5_c2a8, align 1
  %v0_c2b0.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t92 = trunc i32 %v0_c2b0.pre to i8
  br label %bb78

bb78:                                             ; preds = %.thread, %bb
  %v3_c204.sink.off0 = phi i8 [ %extract.t91, %.thread ], [ %extract.t92, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c2b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2b0 = add i32 %v2_c2b0, 5
  %v4_c2b0 = inttoptr i32 %v3_c2b0 to i8*
  store i8 %v3_c204.sink.off0, i8* %v4_c2b0, align 1
  store i32 %v7_c1ec, i32* %ip.global-to-local, align 4
  %v0_c2b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2b8, label %bb80, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %bb78, %bb79
  %v0_c2bc = load i32, i32* %r3.global-to-local, align 4
  %v1_c2bc = trunc i32 %v0_c2bc to i8
  %v2_c2bc = load i32, i32* %r1.global-to-local, align 4
  %v3_c2bc = add i32 %v2_c2bc, 9
  %v4_c2bc = inttoptr i32 %v3_c2bc to i8*
  store i8 %v1_c2bc, i8* %v4_c2bc, align 1
  %v0_c2c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2c0, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_c2c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_c2c0 = trunc i32 %v1_c2c0 to i8
  %v3_c2c0 = load i32, i32* %r1.global-to-local, align 4
  %v4_c2c0 = add i32 %v3_c2c0, 7
  %v5_c2c0 = inttoptr i32 %v4_c2c0 to i8*
  store i8 %v2_c2c0, i8* %v5_c2c0, align 1
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  %v3_c2c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2c4, i32* %r2.global-to-local, align 4
  %v0_c2c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_c2c8 = trunc i32 %v0_c2c8 to i8
  %v2_c2c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2c8 = add i32 %v2_c2c8, 4
  %v4_c2c8 = inttoptr i32 %v3_c2c8 to i8*
  store i8 %v1_c2c8, i8* %v4_c2c8, align 1
  store i32 %v6_c0c8, i32* %ip.global-to-local, align 4
  %v0_c2d0 = load i32, i32* %r2.global-to-local, align 4
  %v3_c2d0 = mul i32 %v0_c2d0, 32
  store i32 %v3_c2d0, i32* %r3.global-to-local, align 4
  %v1_c2d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c2d4 = add i32 %v1_c2d4, 12
  %v3_c2d4 = inttoptr i32 %v2_c2d4 to i32*
  store i32 %v6_c0c8, i32* %v3_c2d4, align 4
  %v0_c2d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c2d8 = load i32, i32* %r2.global-to-local, align 4
  %tmp100 = mul i32 %v1_c2d8, -8
  %v5_c2d8 = add i32 %v0_c2d8, %tmp100
  %v1_c2dc = load i32, i32* @r8, align 4
  %v2_c2dc = add i32 %v1_c2dc, %v5_c2d8
  store i32 %v2_c2dc, i32* %r3.global-to-local, align 4
  %v1_c2e0 = add i32 %v2_c2dc, 16
  %v2_c2e0 = inttoptr i32 %v1_c2e0 to i32*
  %v3_c2e0 = load i32, i32* %v2_c2e0, align 4
  store i32 %v3_c2e0, i32* %r2.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  %v1_c2e4 = trunc i32 %v0_c2e4 to i8
  %v2_c2e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2e4 = add i32 %v2_c2e4, 20
  %v4_c2e4 = inttoptr i32 %v3_c2e4 to i8*
  store i8 %v1_c2e4, i8* %v4_c2e4, align 1
  %v0_c2e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c2e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_c2e8 = add i32 %v1_c2e8, 16
  %v3_c2e8 = inttoptr i32 %v2_c2e8 to i32*
  store i32 %v0_c2e8, i32* %v3_c2e8, align 4
  %v0_c2ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c2ec = add i32 %v0_c2ec, 20
  store i32 %v1_c2ec, i32* @r6, align 4
  %v1_c2f0 = add i32 %v0_c2ec, 33
  %v2_c2f0 = inttoptr i32 %v1_c2f0 to i8*
  %v3_c2f0 = load i8, i8* %v2_c2f0, align 1
  %v4_c2f0 = zext i8 %v3_c2f0 to i32
  %v1_c2f4 = add i32 %v0_c2ec, 40
  store i32 %v1_c2f4, i32* @r7, align 4
  store i32 %v1_c1c0, i32* %r1.global-to-local, align 4
  %v1_c2fc = and i32 %v4_c2f0, 223
  %v5_c300 = or i32 %v1_c2fc, %v4_c300
  store i32 %v5_c300, i32* %r3.global-to-local, align 4
  %v1_c304 = trunc i32 %v5_c300 to i8
  store i8 %v1_c304, i8* %v2_c2f0, align 1
  %v0_c308 = load i32, i32* @r6, align 4
  %v1_c308 = add i32 %v0_c308, 13
  %v2_c308 = inttoptr i32 %v1_c308 to i8*
  %v3_c308 = load i8, i8* %v2_c308, align 1
  %v4_c308 = zext i8 %v3_c308 to i32
  store i32 %v1_c1c4, i32* %r3.global-to-local, align 4
  %v1_c310 = and i32 %v4_c308, 239
  %v5_c314 = or i32 %v1_c310, %v4_c314
  store i32 %v5_c314, i32* %r2.global-to-local, align 4
  %v1_c318 = trunc i32 %v5_c314 to i8
  store i8 %v1_c318, i8* %v2_c308, align 1
  %v0_c31c = load i32, i32* @r6, align 4
  %v1_c31c = add i32 %v0_c31c, 13
  %v2_c31c = inttoptr i32 %v1_c31c to i8*
  %v3_c31c = load i8, i8* %v2_c31c, align 1
  %v4_c31c = zext i8 %v3_c31c to i32
  store i32 %v1_c1c8, i32* %ip.global-to-local, align 4
  %v1_c324 = and i32 %v4_c31c, 247
  %v5_c328 = or i32 %v1_c324, %v4_c328
  store i32 %v5_c328, i32* %r3.global-to-local, align 4
  %v1_c32c = trunc i32 %v5_c328 to i8
  store i8 %v1_c32c, i8* %v2_c31c, align 1
  %v0_c330 = load i32, i32* @r6, align 4
  %v1_c330 = add i32 %v0_c330, 13
  %v2_c330 = inttoptr i32 %v1_c330 to i8*
  %v3_c330 = load i8, i8* %v2_c330, align 1
  %v4_c330 = zext i8 %v3_c330 to i32
  store i32 %v1_c1cc, i32* %r1.global-to-local, align 4
  %v1_c338 = and i32 %v4_c330, 251
  %v5_c33c = or i32 %v1_c338, %v4_c33c
  store i32 %v5_c33c, i32* %r2.global-to-local, align 4
  %v1_c340 = trunc i32 %v5_c33c to i8
  store i8 %v1_c340, i8* %v2_c330, align 1
  %v0_c344 = load i32, i32* @r6, align 4
  %v1_c344 = add i32 %v0_c344, 13
  %v2_c344 = inttoptr i32 %v1_c344 to i8*
  %v3_c344 = load i8, i8* %v2_c344, align 1
  %v4_c344 = zext i8 %v3_c344 to i32
  store i32 %v1_c1f8, i32* %r2.global-to-local, align 4
  %v1_c34c = and i32 %v4_c344, 253
  %v4_c350 = or i32 %v1_c34c, %v3_c350
  store i32 %v4_c350, i32* %r3.global-to-local, align 4
  %v1_c354 = trunc i32 %v4_c350 to i8
  store i8 %v1_c354, i8* %v2_c344, align 1
  %v0_c358 = load i32, i32* @r6, align 4
  %v1_c358 = add i32 %v0_c358, 12
  %v2_c358 = inttoptr i32 %v1_c358 to i8*
  %v3_c358 = load i8, i8* %v2_c358, align 1
  %v4_c358 = zext i8 %v3_c358 to i32
  store i32 %v4_c358, i32* %r2.global-to-local, align 4
  %v1_c35c = add i32 %v0_c358, 13
  %v2_c35c = inttoptr i32 %v1_c35c to i8*
  %v3_c35c = load i8, i8* %v2_c35c, align 1
  %v4_c35c = zext i8 %v3_c35c to i32
  store i32 %v1_c20c, i32* %ip.global-to-local, align 4
  %tmp101 = urem i8 %v3_c358, 16
  %v1_c364 = zext i8 %tmp101 to i32
  %v1_c368 = and i32 %v4_c35c, 254
  %v2_c36c = or i32 %v1_c368, %v1_c20c
  store i32 %v2_c36c, i32* %r3.global-to-local, align 4
  %v1_c370 = or i32 %v1_c364, 80
  store i32 %v1_c370, i32* %r2.global-to-local, align 4
  %v1_c374 = trunc i32 %v1_c370 to i8
  store i8 %v1_c374, i8* %v2_c358, align 1
  %v0_c378 = load i32, i32* %r3.global-to-local, align 4
  %v1_c378 = trunc i32 %v0_c378 to i8
  %v2_c378 = load i32, i32* @r6, align 4
  %v3_c378 = add i32 %v2_c378, 13
  %v4_c378 = inttoptr i32 %v3_c378 to i8*
  store i8 %v1_c378, i8* %v4_c378, align 1
  store i32 %v5_c1a4, i32* %r1.global-to-local, align 4
  %v0_c380 = load i32, i32* @fp, align 4
  %v1_c380 = trunc i32 %v0_c380 to i8
  %v2_c380 = load i32, i32* @r6, align 4
  %v3_c380 = add i32 %v2_c380, 1
  %v4_c380 = inttoptr i32 %v3_c380 to i8*
  store i8 %v1_c380, i8* %v4_c380, align 1
  %v0_c384 = load i32, i32* %r1.global-to-local, align 4
  %v1_c384 = load i32, i32* @r6, align 4
  %v2_c384 = add i32 %v1_c384, 4
  %v3_c384 = inttoptr i32 %v2_c384 to i32*
  store i32 %v0_c384, i32* %v3_c384, align 4
  %v0_c388 = load i32, i32* @r5, align 4
  %v1_c388 = trunc i32 %v0_c388 to i8
  %v2_c388 = load i32, i32* @r6, align 4
  %v3_c388 = add i32 %v2_c388, 2
  %v4_c388 = inttoptr i32 %v3_c388 to i8*
  store i8 %v1_c388, i8* %v4_c388, align 1
  %v0_c38c = load i32, i32* @sb, align 4
  %v1_c38c = trunc i32 %v0_c38c to i8
  %v2_c38c = load i32, i32* @r6, align 4
  %v3_c38c = add i32 %v2_c38c, 3
  %v4_c38c = inttoptr i32 %v3_c38c to i8*
  store i8 %v1_c38c, i8* %v4_c38c, align 1
  %v0_c390 = call i32 @function_f8c8()
  store i32 %v1_c1fc, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c390, 16777216
  %v1_c398 = sdiv i32 %sext, 16777216
  store i32 %v1_c398, i32* %r2.global-to-local, align 4
  %v3_c39c = ashr i32 %sext, 31
  store i32 %v3_c39c, i32* %r3.global-to-local, align 4
  store i1 %v2_c3a0, i1* %cpsr_z.global-to-local, align 1
  %v1_c3a4 = trunc i32 %v3_c39c to i8
  %v2_c3a4 = load i32, i32* @r6, align 4
  %v3_c3a4 = add i32 %v2_c3a4, 15
  %v4_c3a4 = inttoptr i32 %v3_c3a4 to i8*
  store i8 %v1_c3a4, i8* %v4_c3a4, align 1
  %v0_c3a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3a8, label %.thread11, label %bb83

bb83:                                             ; preds = %bb82
  %v1_c3a8 = load i32, i32* @r6, align 4
  %v2_c3a8 = add i32 %v1_c3a8, 13
  %v3_c3a8 = inttoptr i32 %v2_c3a8 to i8*
  %v4_c3a8 = load i8, i8* %v3_c3a8, align 1
  %v5_c3a8 = zext i8 %v4_c3a8 to i32
  %v2_c3ac = or i32 %v5_c3a8, 8
  store i32 %v2_c3ac, i32* %r3.global-to-local, align 4
  %v2_c3b0 = trunc i32 %v2_c3ac to i8
  store i8 %v2_c3b0, i8* %v3_c3a8, align 1
  br label %.thread11

.thread11:                                        ; preds = %bb82, %bb83
  %v0_c3b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3b4 = trunc i32 %v0_c3b4 to i8
  %v2_c3b4 = load i32, i32* @r6, align 4
  %v3_c3b4 = add i32 %v2_c3b4, 14
  %v4_c3b4 = inttoptr i32 %v3_c3b4 to i8*
  store i8 %v1_c3b4, i8* %v4_c3b4, align 1
  %v0_c3b8 = load i32, i32* @sl, align 4
  store i32 %v0_c3b8, i32* %r1.global-to-local, align 4
  %v0_c3bc = load i32, i32* @r7, align 4
  %v2_c3c0 = call i32 @function_f97c(i32 %v0_c3bc, i32 %v0_c3b8)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c3c8 = load i32, i32* @r7, align 4
  %v3_c3c8 = load i32, i32* @sl, align 4
  %v4_c3c8 = add i32 %v3_c3c8, %v2_c3c8
  %v5_c3c8 = inttoptr i32 %v4_c3c8 to i8*
  store i8 0, i8* %v5_c3c8, align 1
  %v3_c3cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3cc, i32* %r2.global-to-local, align 4
  store i32 %v1_becc, i32* %r1.global-to-local, align 4
  %v1_c3d4 = add i32 %v3_c3cc, 1
  store i32 %v1_c3d4, i32* @r6, align 4
  %v9_c3d8 = icmp eq i32 %v1_becc, %v1_c3d4
  store i1 %v9_c3d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c3d4, i32* %stack_var_-40, align 4
  %v8_c3e0 = icmp sgt i32 %v1_becc, %v1_c3d4
  br i1 %v8_c3e0, label %dec_label_pc_c238, label %dec_label_pc_c3e4.preheader

dec_label_pc_c3e4.preheader:                      ; preds = %.thread11, %dec_label_pc_c124
  %v2_c424 = icmp eq i32 %v6_c0c8, -1
  %v7_c424 = icmp eq i32 %v6_c0c8, -1
  %v3_c5bc = icmp eq i32 %v3_c13c, 65535
  %v2_c638 = icmp eq i32 %v1_c0b4, 0
  br label %dec_label_pc_c3e4

dec_label_pc_c3e4:                                ; preds = %dec_label_pc_c3e4.preheader, %dec_label_pc_c65c
  store i32 %v1_becc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_c148, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c148, label %dec_label_pc_c65c, label %dec_label_pc_c3f8

dec_label_pc_c3f8:                                ; preds = %dec_label_pc_c3e4
  %v0_c3f8 = load i32, i32* @sl, align 4
  %v1_c3f8 = add i32 %v0_c3f8, 20
  store i32 %v1_c3f8, i32* @sb, align 4
  %tmp84 = mul i32 %v1_c3f8, 256
  %v1_c404 = and i32 %tmp84, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_c404, i32* %r3.global-to-local, align 4
  %tmp85 = udiv i32 %v1_c3f8, 256
  %v4_c408 = urem i32 %tmp85, 256
  %v5_c408 = or i32 %v4_c408, %v1_c404
  store i32 %v5_c408, i32* %r2.global-to-local, align 4
  %v1_c410 = add i32 %v0_c3f8, 40
  store i32 %v1_c410, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c520

dec_label_pc_c420:                                ; preds = %dec_label_pc_c520
  store i32 %v6_c0c8, i32* %r1.global-to-local, align 4
  store i1 %v7_c424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c424, label %dec_label_pc_c5ac, label %dec_label_pc_c42c

dec_label_pc_c42c:                                ; preds = %dec_label_pc_c544, %dec_label_pc_c420
  store i32 %v3_c13c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c5bc, label %dec_label_pc_c5c8, label %dec_label_pc_c440

dec_label_pc_c440:                                ; preds = %dec_label_pc_c5ac.dec_label_pc_c440_crit_edge, %dec_label_pc_c42c
  %v1_c444 = phi i32 [ %v1_c444.pre, %dec_label_pc_c5ac.dec_label_pc_c440_crit_edge ], [ 65535, %dec_label_pc_c42c ]
  store i32 %v3_c140, i32* %r3.global-to-local, align 4
  %v9_c444 = icmp eq i32 %v3_c140, %v1_c444
  store i1 %v9_c444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c444, label %dec_label_pc_c5e4, label %dec_label_pc_c44c

dec_label_pc_c44c:                                ; preds = %dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge, %dec_label_pc_c440
  %v1_c450 = phi i32 [ %v1_c450.pre, %dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge ], [ %v1_c444, %dec_label_pc_c440 ]
  store i32 %v3_c144, i32* %ip.global-to-local, align 4
  %v9_c450 = icmp eq i32 %v3_c144, %v1_c450
  store i1 %v9_c450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c450, label %dec_label_pc_c600, label %dec_label_pc_c458

dec_label_pc_c458:                                ; preds = %dec_label_pc_c5e4.dec_label_pc_c458_crit_edge, %dec_label_pc_c44c
  %v1_c45c = phi i32 [ %v1_c45c.pre, %dec_label_pc_c5e4.dec_label_pc_c458_crit_edge ], [ %v1_c450, %dec_label_pc_c44c ]
  store i32 %v6_bfc8, i32* %r1.global-to-local, align 4
  %v9_c45c = icmp eq i32 %v6_bfc8, %v1_c45c
  store i1 %v9_c45c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c45c, label %dec_label_pc_c61c, label %dec_label_pc_c464

dec_label_pc_c464:                                ; preds = %dec_label_pc_c600.dec_label_pc_c464_crit_edge, %dec_label_pc_c458
  %v1_c468 = phi i32 [ %v1_c468.pre, %dec_label_pc_c600.dec_label_pc_c464_crit_edge ], [ %v1_c45c, %dec_label_pc_c458 ]
  store i32 %v6_bfe4, i32* %r2.global-to-local, align 4
  %v9_c468 = icmp eq i32 %v6_bfe4, %v1_c468
  store i1 %v9_c468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c468, label %dec_label_pc_c630, label %dec_label_pc_c470

dec_label_pc_c470:                                ; preds = %dec_label_pc_c61c, %dec_label_pc_c464
  store i32 %v1_c0b4, i32* %r3.global-to-local, align 4
  store i1 %v2_c638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c638, label %dec_label_pc_c47c, label %dec_label_pc_c644

dec_label_pc_c47c:                                ; preds = %dec_label_pc_c470, %dec_label_pc_c630, %dec_label_pc_c644
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c480 = load i32, i32* @r7, align 4
  %v1_c480 = trunc i32 %v0_c480 to i8
  %v2_c480 = load i32, i32* @r5, align 4
  %v3_c480 = add i32 %v2_c480, 10
  %v4_c480 = inttoptr i32 %v3_c480 to i8*
  store i8 %v1_c480, i8* %v4_c480, align 1
  %v0_c484 = load i32, i32* @r7, align 4
  %v1_c484 = trunc i32 %v0_c484 to i8
  %v2_c484 = load i32, i32* @r5, align 4
  %v3_c484 = add i32 %v2_c484, 11
  %v4_c484 = inttoptr i32 %v3_c484 to i8*
  store i8 %v1_c484, i8* %v4_c484, align 1
  %v0_c488 = load i32, i32* @r5, align 4
  store i32 %v0_c488, i32* @r0, align 4
  %v2_c48c = call i32 @function_e498(i32 %v0_c488, i32 20)
  %v3_c48c = trunc i32 %v2_c48c to i8
  %v4_c49024 = udiv i32 %v2_c48c, 256
  %v1_c494 = trunc i32 %v4_c49024 to i8
  %v2_c494 = load i32, i32* @r5, align 4
  %v3_c494 = add i32 %v2_c494, 11
  %v4_c494 = inttoptr i32 %v3_c494 to i8*
  store i8 %v1_c494, i8* %v4_c494, align 1
  %v3_c498 = load i32, i32* @r5, align 4
  %v4_c498 = add i32 %v3_c498, 10
  %v5_c498 = inttoptr i32 %v4_c498 to i8*
  store i8 %v3_c48c, i8* %v5_c498, align 1
  %v0_c49c = load i32, i32* @r6, align 4
  store i32 %v0_c49c, i32* @r1, align 4
  store i32 %v5_c408, i32* %r2.global-to-local, align 4
  %v0_c4a4 = load i32, i32* @sb, align 4
  store i32 %v0_c4a4, i32* %r3.global-to-local, align 4
  %v0_c4a8 = load i32, i32* @r7, align 4
  %v1_c4a8 = trunc i32 %v0_c4a8 to i8
  %v3_c4a8 = add i32 %v0_c49c, 16
  %v4_c4a8 = inttoptr i32 %v3_c4a8 to i8*
  store i8 %v1_c4a8, i8* %v4_c4a8, align 1
  %v0_c4ac = load i32, i32* @r7, align 4
  %v1_c4ac = trunc i32 %v0_c4ac to i8
  %v2_c4ac = load i32, i32* @r6, align 4
  %v3_c4ac = add i32 %v2_c4ac, 17
  %v4_c4ac = inttoptr i32 %v3_c4ac to i8*
  store i8 %v1_c4ac, i8* %v4_c4ac, align 1
  %v0_c4b0 = load i32, i32* @r5, align 4
  %v4_c4b4 = call i32 @function_e4f4(i32 %v0_c4b0, i32 %v0_c49c, i32 %v5_c408, i32 %v0_c4a4)
  %v5_c4b4 = trunc i32 %v4_c4b4 to i8
  %v4_c4b825 = udiv i32 %v4_c4b4, 256
  %v1_c4bc = trunc i32 %v4_c4b825 to i8
  %v2_c4bc = load i32, i32* @r6, align 4
  %v3_c4bc = add i32 %v2_c4bc, 17
  %v4_c4bc = inttoptr i32 %v3_c4bc to i8*
  store i8 %v1_c4bc, i8* %v4_c4bc, align 1
  %v3_c4c0 = load i32, i32* @r6, align 4
  %v4_c4c0 = add i32 %v3_c4c0, 16
  %v5_c4c0 = inttoptr i32 %v4_c4c0 to i8*
  store i8 %v5_c4b4, i8* %v5_c4c0, align 1
  %v3_c4c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c4c4, i32* %r3.global-to-local, align 4
  %v0_c4c8 = load i32, i32* @r5, align 4
  %v1_c4c8 = add i32 %v0_c4c8, 20
  %v2_c4c8 = inttoptr i32 %v1_c4c8 to i32*
  %v3_c4c8 = load i32, i32* %v2_c4c8, align 4
  %v3_c4d0 = udiv i32 %v3_c4c8, 65536
  store i32 %v3_c4d0, i32* %r2.global-to-local, align 4
  %v5_c4d4 = mul i32 %v3_c4c4, 24
  %v1_c4d8 = load i32, i32* @r8, align 4
  %v2_c4d8 = add i32 %v1_c4d8, %v5_c4d4
  store i32 %v2_c4d8, i32* %ip.global-to-local, align 4
  %v3_c4dc21 = udiv i32 %v3_c4c8, 16777216
  %v1_c4e0 = trunc i32 %v3_c4dc21 to i8
  %v3_c4e0 = add i32 %v2_c4d8, 3
  %v4_c4e0 = inttoptr i32 %v3_c4e0 to i8*
  store i8 %v1_c4e0, i8* %v4_c4e0, align 1
  %v0_c4e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c4e4 = trunc i32 %v0_c4e4 to i8
  %v2_c4e4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c4e4 = add i32 %v2_c4e4, 2
  %v4_c4e4 = inttoptr i32 %v3_c4e4 to i8*
  store i8 %v1_c4e4, i8* %v4_c4e4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c4ec = load i32, i32* @r5, align 4
  store i32 %v0_c4ec, i32* %r1.global-to-local, align 4
  %v0_c4f4 = load i32, i32* @fp, align 4
  store i32 %v0_c4f4, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c4fc = load i32, i32* %ip.global-to-local, align 4
  %v6_c504 = inttoptr i32 %v0_c4ec to i32*
  %v7_c504 = call i32 @function_13e58(i32 %v3_c0ec, i32* %v6_c504, i32 %v0_c4f4, i32 16384, i32 %v0_c4fc, i32 16)
  %v3_c508 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c508, i32* %r3.global-to-local, align 4
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v1_c510 = add i32 %v3_c508, 1
  %v9_c514 = icmp eq i32 %v1_becc, %v1_c510
  store i1 %v9_c514, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c510, i32* %stack_var_-40, align 4
  %v7_c51c = icmp sgt i32 %v1_becc, %v1_c510
  br i1 %v7_c51c, label %dec_label_pc_c520, label %dec_label_pc_c65c

dec_label_pc_c520:                                ; preds = %dec_label_pc_c47c, %dec_label_pc_c3f8
  %v1_c534 = phi i32 [ %v1_c510, %dec_label_pc_c47c ], [ 0, %dec_label_pc_c3f8 ]
  %v5_c524 = mul i32 %v1_c534, 24
  %v1_c528 = load i32, i32* @r8, align 4
  %v2_c528 = add i32 %v1_c528, %v5_c524
  store i32 %v2_c528, i32* %r3.global-to-local, align 4
  store i32 %v2_bef8, i32* %ip.global-to-local, align 4
  %v1_c530 = add i32 %v2_c528, 20
  %v2_c530 = inttoptr i32 %v1_c530 to i8*
  %v3_c530 = load i8, i8* %v2_c530, align 1
  %v4_c530 = zext i8 %v3_c530 to i32
  store i32 %v4_c530, i32* %r2.global-to-local, align 4
  %v4_c534 = mul i32 %v1_c534, 4
  %v5_c534 = add i32 %v4_c534, %v2_bef8
  %v6_c534 = inttoptr i32 %v5_c534 to i32*
  %v7_c534 = load i32, i32* %v6_c534, align 4
  store i32 %v7_c534, i32* @r5, align 4
  %v2_c538 = icmp ugt i8 %v3_c530, 30
  %v7_c538 = icmp eq i8 %v3_c530, 31
  store i1 %v7_c538, i1* %cpsr_z.global-to-local, align 1
  %v1_c53c = add i32 %v7_c534, 20
  store i32 %v1_c53c, i32* @r6, align 4
  %v2_c540 = xor i1 %v7_c538, true
  %v3_c540 = and i1 %v2_c538, %v2_c540
  br i1 %v3_c540, label %dec_label_pc_c420, label %dec_label_pc_c544

dec_label_pc_c544:                                ; preds = %dec_label_pc_c520
  %v1_c544 = add i32 %v2_c528, 16
  %v2_c544 = inttoptr i32 %v1_c544 to i32*
  %v3_c544 = load i32, i32* %v2_c544, align 4
  %v0_c548 = call i32 @function_f8c8()
  %v3_c54c = load i32, i32* %stack_var_-40, align 4
  %v5_c554 = mul i32 %v3_c54c, 24
  %v1_c55c = load i32, i32* @r8, align 4
  %v2_c55c = add i32 %v1_c55c, %v5_c554
  store i32 %v2_c55c, i32* %r1.global-to-local, align 4
  %v1_c560 = and i32 %v3_c544, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_c560, i32* %r3.global-to-local, align 4
  %v1_c558 = udiv i32 %v3_c544, 256
  %v3_c564 = and i32 %v1_c558, 65280
  store i32 %v3_c564, i32* %r2.global-to-local, align 4
  %v3_c568 = mul i32 %v3_c544, 16777216
  store i32 %v3_c568, i32* %ip.global-to-local, align 4
  %v1_c56c = add i32 %v2_c55c, 20
  %v2_c56c = inttoptr i32 %v1_c56c to i8*
  %v3_c56c = load i8, i8* %v2_c56c, align 1
  %v4_c56c = zext i8 %v3_c56c to i32
  %v4_c570 = mul i32 %v1_c560, 256
  %v5_c570 = or i32 %v4_c570, %v3_c568
  store i32 %v5_c570, i32* %ip.global-to-local, align 4
  %v4_c574 = udiv i32 %v3_c544, 16777216
  %v5_c574 = or i32 %v3_c564, %v4_c574
  %v2_c578 = or i32 %v5_c574, %v5_c570
  %v7_c57c = lshr i32 %v0_c548, %v4_c56c
  %v8_c57c = add i32 %v7_c57c, %v2_c578
  store i32 %v8_c57c, i32* %r2.global-to-local, align 4
  %v2_c598 = call i32 @llvm.bswap.i32(i32 %v8_c57c)
  store i32 %v2_c598, i32* %r3.global-to-local, align 4
  store i32 %v6_c0c8, i32* %r1.global-to-local, align 4
  store i1 %v7_c424, i1* %cpsr_z.global-to-local, align 1
  %v1_c5a4 = load i32, i32* @r5, align 4
  %v2_c5a4 = add i32 %v1_c5a4, 16
  %v3_c5a4 = inttoptr i32 %v2_c5a4 to i32*
  store i32 %v2_c598, i32* %v3_c5a4, align 4
  br i1 %v2_c424, label %dec_label_pc_c5ac, label %dec_label_pc_c42c

dec_label_pc_c5ac:                                ; preds = %dec_label_pc_c544, %dec_label_pc_c420
  %v0_c5ac = call i32 @function_f8c8()
  store i32 %v3_c13c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c5bc, i1* %cpsr_z.global-to-local, align 1
  %v1_c5c0 = load i32, i32* @r5, align 4
  %v2_c5c0 = add i32 %v1_c5c0, 12
  %v3_c5c0 = inttoptr i32 %v2_c5c0 to i32*
  store i32 %v0_c5ac, i32* %v3_c5c0, align 4
  br i1 %v3_c5bc, label %dec_label_pc_c5c8, label %dec_label_pc_c5ac.dec_label_pc_c440_crit_edge

dec_label_pc_c5ac.dec_label_pc_c440_crit_edge:    ; preds = %dec_label_pc_c5ac
  %v1_c444.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c440

dec_label_pc_c5c8:                                ; preds = %dec_label_pc_c5ac, %dec_label_pc_c42c
  %v0_c5c8 = call i32 @function_f8c8()
  %v1_c5c8 = trunc i32 %v0_c5c8 to i8
  %v4_c5cc26 = udiv i32 %v0_c5c8, 256
  %v1_c5d0 = trunc i32 %v4_c5cc26 to i8
  %v2_c5d0 = load i32, i32* @r5, align 4
  %v3_c5d0 = add i32 %v2_c5d0, 5
  %v4_c5d0 = inttoptr i32 %v3_c5d0 to i8*
  store i8 %v1_c5d0, i8* %v4_c5d0, align 1
  store i32 %v3_c140, i32* %r3.global-to-local, align 4
  %v1_c5d8 = load i32, i32* @r4, align 4
  %v9_c5d8 = icmp eq i32 %v3_c140, %v1_c5d8
  store i1 %v9_c5d8, i1* %cpsr_z.global-to-local, align 1
  %v3_c5dc = load i32, i32* @r5, align 4
  %v4_c5dc = add i32 %v3_c5dc, 4
  %v5_c5dc = inttoptr i32 %v4_c5dc to i8*
  store i8 %v1_c5c8, i8* %v5_c5dc, align 1
  %v0_c5e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5e0, label %dec_label_pc_c5e4, label %dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge

dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge:    ; preds = %dec_label_pc_c5c8
  %v1_c450.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c44c

dec_label_pc_c5e4:                                ; preds = %dec_label_pc_c5c8, %dec_label_pc_c440
  %v0_c5e4 = call i32 @function_f8c8()
  %v1_c5e4 = trunc i32 %v0_c5e4 to i8
  store i32 %v3_c144, i32* %ip.global-to-local, align 4
  %v4_c5ec = sdiv i32 %v0_c5e4, 256
  store i32 %v4_c5ec, i32* %r3.global-to-local, align 4
  %v1_c5f0 = load i32, i32* @r4, align 4
  %v9_c5f0 = icmp eq i32 %v3_c144, %v1_c5f0
  store i1 %v9_c5f0, i1* %cpsr_z.global-to-local, align 1
  %v3_c5f4 = load i32, i32* @r5, align 4
  %v4_c5f4 = add i32 %v3_c5f4, 20
  %v5_c5f4 = inttoptr i32 %v4_c5f4 to i8*
  store i8 %v1_c5e4, i8* %v5_c5f4, align 1
  %v0_c5f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i8
  %v2_c5f8 = load i32, i32* @r6, align 4
  %v3_c5f8 = add i32 %v2_c5f8, 1
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i8*
  store i8 %v1_c5f8, i8* %v4_c5f8, align 1
  %v0_c5fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5fc, label %dec_label_pc_c600, label %dec_label_pc_c5e4.dec_label_pc_c458_crit_edge

dec_label_pc_c5e4.dec_label_pc_c458_crit_edge:    ; preds = %dec_label_pc_c5e4
  %v1_c45c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c458

dec_label_pc_c600:                                ; preds = %dec_label_pc_c5e4, %dec_label_pc_c44c
  %v0_c600 = call i32 @function_f8c8()
  %v1_c600 = trunc i32 %v0_c600 to i8
  store i32 %v6_bfc8, i32* %r1.global-to-local, align 4
  %v4_c608 = sdiv i32 %v0_c600, 256
  store i32 %v4_c608, i32* %r3.global-to-local, align 4
  %v1_c60c = load i32, i32* @r4, align 4
  %v9_c60c = icmp eq i32 %v6_bfc8, %v1_c60c
  store i1 %v9_c60c, i1* %cpsr_z.global-to-local, align 1
  %v1_c610 = trunc i32 %v4_c608 to i8
  %v2_c610 = load i32, i32* @r6, align 4
  %v3_c610 = add i32 %v2_c610, 3
  %v4_c610 = inttoptr i32 %v3_c610 to i8*
  store i8 %v1_c610, i8* %v4_c610, align 1
  %v3_c614 = load i32, i32* @r6, align 4
  %v4_c614 = add i32 %v3_c614, 2
  %v5_c614 = inttoptr i32 %v4_c614 to i8*
  store i8 %v1_c600, i8* %v5_c614, align 1
  %v0_c618 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c618, label %dec_label_pc_c61c, label %dec_label_pc_c600.dec_label_pc_c464_crit_edge

dec_label_pc_c600.dec_label_pc_c464_crit_edge:    ; preds = %dec_label_pc_c600
  %v1_c468.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c464

dec_label_pc_c61c:                                ; preds = %dec_label_pc_c600, %dec_label_pc_c458
  %v0_c61c = call i32 @function_f8c8()
  store i32 %v6_bfe4, i32* %r2.global-to-local, align 4
  %v1_c624 = load i32, i32* @r4, align 4
  %v9_c624 = icmp eq i32 %v6_bfe4, %v1_c624
  store i1 %v9_c624, i1* %cpsr_z.global-to-local, align 1
  %v1_c628 = load i32, i32* @r6, align 4
  %v2_c628 = add i32 %v1_c628, 4
  %v3_c628 = inttoptr i32 %v2_c628 to i32*
  store i32 %v0_c61c, i32* %v3_c628, align 4
  br i1 %v9_c624, label %dec_label_pc_c630, label %dec_label_pc_c470

dec_label_pc_c630:                                ; preds = %dec_label_pc_c61c, %dec_label_pc_c464
  %v0_c630 = call i32 @function_f8c8()
  store i32 %v1_c0b4, i32* %r3.global-to-local, align 4
  store i1 %v2_c638, i1* %cpsr_z.global-to-local, align 1
  %v1_c63c = load i32, i32* @r6, align 4
  %v2_c63c = add i32 %v1_c63c, 8
  %v3_c63c = inttoptr i32 %v2_c63c to i32*
  store i32 %v0_c630, i32* %v3_c63c, align 4
  br i1 %v2_c638, label %dec_label_pc_c47c, label %dec_label_pc_c644

dec_label_pc_c644:                                ; preds = %dec_label_pc_c470, %dec_label_pc_c630
  %v0_c644 = load i32, i32* @r5, align 4
  %v1_c644 = add i32 %v0_c644, 40
  store i32 %v1_c644, i32* @r4, align 4
  %v0_c64c = load i32, i32* @sl, align 4
  store i32 %v0_c64c, i32* %r1.global-to-local, align 4
  %v2_c650 = call i32 @function_f97c(i32 %v1_c644, i32 %v0_c64c)
  %v0_c654 = load i32, i32* @r7, align 4
  %v1_c654 = trunc i32 %v0_c654 to i8
  %v2_c654 = load i32, i32* @r4, align 4
  %v3_c654 = load i32, i32* @sl, align 4
  %v4_c654 = add i32 %v3_c654, %v2_c654
  %v5_c654 = inttoptr i32 %v4_c654 to i8*
  store i8 %v1_c654, i8* %v5_c654, align 1
  br label %dec_label_pc_c47c

dec_label_pc_c65c:                                ; preds = %dec_label_pc_c47c, %dec_label_pc_c3e4
  %v2_c660 = call i32 @function_138a0(i32* null)
  store i32 %v2_c0d8, i32* %r1.global-to-local, align 4
  %v9_c668 = icmp eq i32 %v2_c0d8, %v2_c660
  store i1 %v9_c668, i1* %cpsr_z.global-to-local, align 1
  %v6_c66c = icmp slt i32 %v2_c0d8, %v2_c660
  br i1 %v6_c66c, label %dec_label_pc_c670, label %dec_label_pc_c3e4

dec_label_pc_c670:                                ; preds = %dec_label_pc_c65c, %dec_label_pc_bec8, %dec_label_pc_c678
  %v29_c674 = phi i32 [ %v3_c0ec, %dec_label_pc_bec8 ], [ %v1_c67c, %dec_label_pc_c678 ], [ %v2_c660, %dec_label_pc_c65c ]
  store i32 %v18_bec8, i32* %sb.global-to-local, align 4
  store i32 %v24_bec8, i32* %fp.global-to-local, align 4
  ret i32 %v29_c674

dec_label_pc_c678:                                ; preds = %dec_label_pc_c0fc
  %v1_c67c = call i32 @function_135d0(i32 %v3_c0ec)
  br label %dec_label_pc_c670

; uselistorder directives
  uselistorder i32 %v4_c608, { 1, 0 }
  uselistorder i32 %v2_c598, { 1, 0 }
  uselistorder i32 %v3_c568, { 1, 0 }
  uselistorder i32 %v3_c544, { 2, 3, 1, 0 }
  uselistorder i32 %v1_c510, { 1, 2, 0, 3 }
  uselistorder i32 %v0_c49c, { 1, 0, 2 }
  uselistorder i32 %v1_c3f8, { 1, 0, 2 }
  uselistorder i1 %v2_c638, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c5bc, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c424, { 2, 1, 0 }
  uselistorder i32 %v1_c3d4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c20c, { 1, 0 }
  uselistorder i32 %v3_c204, { 2, 0, 1, 3 }
  uselistorder i32 %v3_c200, { 0, 2, 1 }
  uselistorder i32 %v1_c1fc, { 1, 2, 0 }
  uselistorder i32 %v1_c1f8, { 2, 0, 1 }
  uselistorder i32 %tmp93, { 1, 0 }
  uselistorder i32 %v1_c1cc, { 1, 0 }
  uselistorder i32 %v1_c1c8, { 1, 0 }
  uselistorder i32 %v1_c1c4, { 1, 0 }
  uselistorder i32 %v1_c1c0, { 1, 0 }
  uselistorder i32 %v1_c190, { 2, 0, 1 }
  uselistorder i32 %v1_c178, { 1, 0 }
  uselistorder i1 %v2_c148, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c13c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c134, { 0, 1, 3, 2 }
  uselistorder i1 %v7_c11c, { 1, 0 }
  uselistorder i1 %v7_c0f0, { 1, 0 }
  uselistorder i32 %v3_c0ec, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_c0d8, { 2, 1, 0 }
  uselistorder i32 %v6_c0c8, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_c0b4, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bfe4, { 3, 2, 1, 0 }
  uselistorder i32 %v6_bfc8, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_bf78, { 1, 0 }
  uselistorder i8 %v5_bf68, { 1, 0 }
  uselistorder i32 %v6_bf4c, { 1, 0 }
  uselistorder i32 %v7_bf34, { 0, 2, 1 }
  uselistorder i32 %v6_bf10, { 1, 0 }
  uselistorder i32 %v2_bef8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_becc, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 18, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 28, 29, 31, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_c670, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c644, { 1, 0 }
  uselistorder label %dec_label_pc_c47c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c3e4, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
}

define i32 @function_c688(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c688:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c688 = load i32, i32* @r4, align 4
  %v12_c688 = load i32, i32* @r7, align 4
  %v1_c68c = urem i32 %arg2, 256
  store i32 %v1_c68c, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_c68c, i32* %r0.global-to-local, align 4
  %v1_c6a4 = urem i32 %arg4, 256
  store i32 %v1_c6a4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_c6b4 = call i32 @function_141a8(i32 %v1_c68c, i32 4)
  %v0_c6b8 = load i32, i32* @r5, align 4
  store i32 %v0_c6b8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c6c0 = load i32, i32* @r7, align 4
  store i32 %v0_c6c0, i32* %r3.global-to-local, align 4
  store i32 %v2_c6b4, i32* %sb.global-to-local, align 4
  %v0_c6c8 = load i32, i32* @r4, align 4
  store i32 %v0_c6c8, i32* %r0.global-to-local, align 4
  %v4_c6cc = inttoptr i32 %v0_c6b8 to i32*
  %v5_c6cc = call i32 @function_a054(i32 %v0_c6c8, i32* %v4_c6cc, i32 2, i32 %v0_c6c0)
  %v1_c6d8 = urem i32 %v5_c6cc, 256
  store i32 %v1_c6d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c6e4 = load i32, i32* @r5, align 4
  store i32 %v0_c6e4, i32* %r1.global-to-local, align 4
  %v0_c6e8 = load i32, i32* @r4, align 4
  store i32 %v0_c6e8, i32* %r0.global-to-local, align 4
  %v5_c6ec = trunc i32 %v5_c6cc to i8
  %v6_c6f0 = inttoptr i32 %v0_c6e4 to i32*
  %v7_c6f0 = call i32 @function_a054(i32 %v0_c6e8, i32* %v6_c6f0, i32 3, i32 65535)
  %v0_c6f4 = load i32, i32* @r5, align 4
  store i32 %v0_c6f4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c704 = load i32, i32* @r4, align 4
  store i32 %v0_c704, i32* %r0.global-to-local, align 4
  %v5_c708 = inttoptr i32 %v0_c6f4 to i32*
  %v6_c708 = call i32 @function_a054(i32 %v0_c704, i32* %v5_c708, i32 4, i32 64)
  %v1_c710 = urem i32 %v6_c708, 256
  store i32 %v1_c710, i32* %ip.global-to-local, align 4
  %v0_c714 = load i32, i32* @r5, align 4
  store i32 %v0_c714, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c720 = load i32, i32* @r4, align 4
  store i32 %v0_c720, i32* %r0.global-to-local, align 4
  %v6_c728 = inttoptr i32 %v0_c714 to i32*
  %v7_c728 = call i32 @function_a054(i32 %v0_c720, i32* %v6_c728, i32 5, i32 1)
  %v1_c734 = urem i32 %v7_c728, 256
  store i32 %v1_c734, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c740 = load i32, i32* @r5, align 4
  store i32 %v0_c740, i32* %r1.global-to-local, align 4
  %v0_c744 = load i32, i32* @r4, align 4
  store i32 %v0_c744, i32* %r0.global-to-local, align 4
  %v5_c74c = inttoptr i32 %v0_c740 to i32*
  %v6_c74c = call i32 @function_a054(i32 %v0_c744, i32* %v5_c74c, i32 6, i32 65535)
  %v0_c758 = load i32, i32* @r5, align 4
  store i32 %v0_c758, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c764 = load i32, i32* @r4, align 4
  store i32 %v0_c764, i32* %r0.global-to-local, align 4
  %v5_c768 = inttoptr i32 %v0_c758 to i32*
  %v6_c768 = call i32 @function_a054(i32 %v0_c764, i32* %v5_c768, i32 7, i32 65535)
  %v0_c774 = load i32, i32* @r5, align 4
  store i32 %v0_c774, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c780 = load i32, i32* @r4, align 4
  store i32 %v0_c780, i32* %r0.global-to-local, align 4
  %v5_c784 = inttoptr i32 %v0_c774 to i32*
  %v6_c784 = call i32 @function_a054(i32 %v0_c780, i32* %v5_c784, i32 16, i32 65535)
  %v0_c788 = load i32, i32* @r5, align 4
  store i32 %v0_c788, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_c794 = load i32, i32* @r7, align 4
  store i32 %v0_c794, i32* %r3.global-to-local, align 4
  %v0_c798 = load i32, i32* @r4, align 4
  store i32 %v0_c798, i32* %r0.global-to-local, align 4
  %v5_c79c = inttoptr i32 %v0_c788 to i32*
  %v6_c79c = call i32 @function_a054(i32 %v0_c798, i32* %v5_c79c, i32 17, i32 %v0_c794)
  %v0_c7a0 = load i32, i32* @r5, align 4
  store i32 %v0_c7a0, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r7, align 4
  store i32 %v0_c7ac, i32* %r3.global-to-local, align 4
  %v0_c7b0 = load i32, i32* @r4, align 4
  store i32 %v0_c7b0, i32* %r0.global-to-local, align 4
  %v5_c7b4 = inttoptr i32 %v0_c7a0 to i32*
  %v6_c7b4 = call i32 @function_a054(i32 %v0_c7b0, i32* %v5_c7b4, i32 10, i32 %v0_c7ac)
  %v0_c7b8 = load i32, i32* @r5, align 4
  store i32 %v0_c7b8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_c7c4 = load i32, i32* @r7, align 4
  store i32 %v0_c7c4, i32* %r3.global-to-local, align 4
  %v0_c7c8 = load i32, i32* @r4, align 4
  store i32 %v0_c7c8, i32* %r0.global-to-local, align 4
  %v5_c7cc = inttoptr i32 %v0_c7b8 to i32*
  %v6_c7cc = call i32 @function_a054(i32 %v0_c7c8, i32* %v5_c7cc, i32 11, i32 %v0_c7c4)
  %v0_c7d0 = load i32, i32* @r5, align 4
  store i32 %v0_c7d0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_c7dc = load i32, i32* @r7, align 4
  store i32 %v0_c7dc, i32* %r3.global-to-local, align 4
  %v0_c7e0 = load i32, i32* @r4, align 4
  store i32 %v0_c7e0, i32* %r0.global-to-local, align 4
  %v5_c7e4 = inttoptr i32 %v0_c7d0 to i32*
  %v6_c7e4 = call i32 @function_a054(i32 %v0_c7e0, i32* %v5_c7e4, i32 12, i32 %v0_c7dc)
  %v0_c7e8 = load i32, i32* @r5, align 4
  store i32 %v0_c7e8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_c7f4 = load i32, i32* @r7, align 4
  store i32 %v0_c7f4, i32* %r3.global-to-local, align 4
  %v0_c7f8 = load i32, i32* @r4, align 4
  store i32 %v0_c7f8, i32* %r0.global-to-local, align 4
  %v5_c7fc = inttoptr i32 %v0_c7e8 to i32*
  %v6_c7fc = call i32 @function_a054(i32 %v0_c7f8, i32* %v5_c7fc, i32 13, i32 %v0_c7f4)
  %v0_c800 = load i32, i32* @r5, align 4
  store i32 %v0_c800, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c810 = load i32, i32* @r4, align 4
  store i32 %v0_c810, i32* %r0.global-to-local, align 4
  %v5_c814 = inttoptr i32 %v0_c800 to i32*
  %v6_c814 = call i32 @function_a054(i32 %v0_c810, i32* %v5_c814, i32 14, i32 1)
  %v0_c818 = load i32, i32* @r5, align 4
  store i32 %v0_c818, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_c824 = load i32, i32* @r7, align 4
  store i32 %v0_c824, i32* %r3.global-to-local, align 4
  %v0_c828 = load i32, i32* @r4, align 4
  store i32 %v0_c828, i32* %r0.global-to-local, align 4
  %v5_c82c = inttoptr i32 %v0_c818 to i32*
  %v6_c82c = call i32 @function_a054(i32 %v0_c828, i32* %v5_c82c, i32 15, i32 %v0_c824)
  %v0_c834 = load i32, i32* @r5, align 4
  store i32 %v0_c834, i32* %r1.global-to-local, align 4
  %v2_c838 = load i32, i32* @global_var_1f238.83, align 4
  store i32 %v2_c838, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_c844 = load i32, i32* @r4, align 4
  store i32 %v0_c844, i32* %r0.global-to-local, align 4
  %v5_c848 = inttoptr i32 %v0_c834 to i32*
  %v6_c848 = call i32 @function_9fe8(i32 %v0_c844, i32* %v5_c848, i32 24, i32 %v2_c838, i32 %v6_c82c)
  %v0_c850 = load i32, i32* @r7, align 4
  store i32 %v0_c850, i32* %r0.global-to-local, align 4
  %v1_c854 = inttoptr i32 %v0_c850 to i32*
  %v2_c854 = call i32 @function_138a0(i32* %v1_c854)
  %v1_c858 = load i32, i32* @r6, align 4
  %v2_c858 = add i32 %v1_c858, %v2_c854
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c86c = call i32 @function_13ebc(i32 2, i32 3, i32 6)
  store i32 %v3_c86c, i32* %r0.global-to-local, align 4
  %v7_c870 = icmp eq i32 %v3_c86c, -1
  store i1 %v7_c870, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c86c, i32* %sl.global-to-local, align 4
  br i1 %v7_c870, label %dec_label_pc_cdec, label %dec_label_pc_c87c

dec_label_pc_c87c:                                ; preds = %dec_label_pc_c688
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c884 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c884, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_c88c = load i32, i32* @r7, align 4
  store i32 %v0_c88c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c898 = call i32 @function_13e8c(i32 %v3_c86c, i32 %v0_c88c, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c898, i32* %r0.global-to-local, align 4
  %v7_c89c = icmp eq i32 %v6_c898, -1
  store i1 %v7_c89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c89c, label %dec_label_pc_cdf4, label %dec_label_pc_c8a4

dec_label_pc_c8a4:                                ; preds = %dec_label_pc_c87c
  %v3_c8b8 = mul i32 %v6_c74c, 65536
  store i32 %v3_c8b8, i32* @r4, align 4
  %v3_c8bc = urem i32 %v7_c6f0, 65536
  store i32 %v3_c8bc, i32* %ip.global-to-local, align 4
  %v3_c8c0 = urem i32 %v6_c74c, 65536
  store i32 %v3_c8c0, i32* %r0.global-to-local, align 4
  %v3_c8c4 = urem i32 %v6_c768, 65536
  store i32 %v3_c8c4, i32* %r2.global-to-local, align 4
  %v1_c8c8 = urem i32 %v6_c7b4, 256
  store i32 %v1_c8c8, i32* %r3.global-to-local, align 4
  %v0_c8cc = load i32, i32* %fp.global-to-local, align 4
  %v2_c8cc = icmp eq i32 %v0_c8cc, 0
  store i1 %v2_c8cc, i1* %cpsr_z.global-to-local, align 1
  %v0_c8d0 = load i32, i32* @r7, align 4
  store i32 %v0_c8d0, i32* %stack_var_-40, align 4
  %tmp69 = icmp slt i32 %v0_c8cc, 1
  br i1 %tmp69, label %dec_label_pc_cb8c.preheader, label %dec_label_pc_c8e8

dec_label_pc_c8e8:                                ; preds = %dec_label_pc_c8a4
  %v1_c8f0 = urem i32 %v7_c6f0, 256
  %v1_c904 = urem i32 %v6_c768, 256
  %tmp70 = mul i32 %v6_c784, 256
  %v1_c90c = and i32 %tmp70, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp71 = udiv i32 %v6_c784, 256
  %v4_c910 = urem i32 %tmp71, 256
  %v5_c910 = or i32 %v4_c910, %v1_c90c
  %v3_c914 = mul nuw nsw i32 %v1_c904, 256
  %tmp72 = udiv i32 %v6_c768, 256
  %v4_c920 = urem i32 %tmp72, 256
  %v5_c920 = or i32 %v4_c920, %v3_c914
  store i32 %v5_c920, i32* @r6, align 4
  %v1_c900 = mul i32 %v6_c74c, 256
  %v3_c924 = and i32 %v1_c900, 65280
  store i32 %v3_c924, i32* %r1.global-to-local, align 4
  %v3_c930 = mul nuw nsw i32 %v1_c8f0, 256
  %tmp73 = udiv i32 %v6_c74c, 256
  %v1_c938 = urem i32 %v6_c7b4, 2
  %tmp74 = udiv i32 %v7_c6f0, 256
  %v4_c93c = urem i32 %tmp74, 256
  %v5_c93c = or i32 %v4_c93c, %v3_c930
  store i32 %v5_c93c, i32* @lr, align 4
  %v1_c944 = urem i32 %v6_c7cc, 2
  %v1_c948 = urem i32 %v6_c7fc, 2
  %sext11 = mul i32 %tmp73, 16777216
  %v4_c964 = sdiv i32 %sext11, 16777216
  %v1_c968 = urem i32 %v6_c7e4, 2
  %v1_c96c = urem i32 %v6_c814, 2
  %v1_c978 = urem i32 %v6_c82c, 2
  store i32 %v1_c978, i32* %r0.global-to-local, align 4
  store i32 %v1_c8f0, i32* %r2.global-to-local, align 4
  %v3_c980 = ashr i32 %sext11, 31
  store i32 %v3_c980, i32* %r3.global-to-local, align 4
  store i32 %v1_c904, i32* %ip.global-to-local, align 4
  %v5_c994 = trunc i32 %v3_c980 to i8
  store i32 %v0_c8d0, i32* @r4, align 4
  store i32 %v0_c8d0, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %sext = mul i32 %v6_c708, 16777216
  %v4_c9f0 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_c6f0, 16777216
  %v4_c9fc = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %tmp74, 16777216
  %v4_ca00 = sdiv i32 %sext9, 16777216
  %tmp = sub nsw i32 0, %v1_c938
  %v4_ca5c = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c944
  %v4_ca70 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c968
  %v4_ca84 = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c948
  %v4_ca98 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c96c
  %v3_caac = and i32 %tmp81, 2
  %sext10 = mul i32 %v6_c768, 16777216
  %v7_cadc = sdiv i32 %sext10, 16777216
  br label %dec_label_pc_c9a8

dec_label_pc_c9a8:                                ; preds = %bb76, %dec_label_pc_c8e8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c9b0 = call i32 @function_141a8(i32 128, i32 1)
  store i32 %v2_c9b0, i32* %r0.global-to-local, align 4
  %v3_c9b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9b4, i32* %r2.global-to-local, align 4
  %v1_c9b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_c9b8 = load i32, i32* @r4, align 4
  %v5_c9b8 = mul i32 %v2_c9b8, 4
  %v6_c9b8 = add i32 %v5_c9b8, %v1_c9b8
  %v7_c9b8 = inttoptr i32 %v6_c9b8 to i32*
  store i32 %v2_c9b0, i32* %v7_c9b8, align 4
  %v0_c9bc = load i32, i32* %sb.global-to-local, align 4
  %v1_c9bc = load i32, i32* %r2.global-to-local, align 4
  %v4_c9bc = mul i32 %v1_c9bc, 4
  %v5_c9bc = add i32 %v4_c9bc, %v0_c9bc
  %v6_c9bc = inttoptr i32 %v5_c9bc to i32*
  %v7_c9bc = load i32, i32* %v6_c9bc, align 4
  store i32 %v7_c9bc, i32* %r4.global-to-local, align 4
  %v1_c9c0 = inttoptr i32 %v7_c9bc to i8*
  %v2_c9c0 = load i8, i8* %v1_c9c0, align 1
  %tmp82 = urem i8 %v2_c9c0, 16
  %v1_c9c4 = zext i8 %tmp82 to i32
  %v1_c9c8 = or i32 %v1_c9c4, 64
  store i32 %v1_c9c8, i32* %r3.global-to-local, align 4
  %v1_c9cc = trunc i32 %v1_c9c8 to i8
  store i8 %v1_c9cc, i8* %v1_c9c0, align 1
  %v0_c9d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_c9d0 = inttoptr i32 %v0_c9d0 to i8*
  %v2_c9d0 = load i8, i8* %v1_c9d0, align 1
  %v1_c9d4 = and i8 %v2_c9d0, -16
  %v1_c9d8 = or i8 %v1_c9d4, 5
  store i32 %v1_c734, i32* %r0.global-to-local, align 4
  store i8 %v1_c9d8, i8* %v1_c9d0, align 1
  %v2_c9e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9e8 = add i32 %v2_c9e8, 1
  %v4_c9e8 = inttoptr i32 %v3_c9e8 to i8*
  store i8 %v5_c6ec, i8* %v4_c9e8, align 1
  %v0_c9ec = load i32, i32* %r0.global-to-local, align 4
  %v2_c9ec = icmp eq i32 %v0_c9ec, 0
  store i1 %v2_c9ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_c9f0, i32* %r0.global-to-local, align 4
  %v2_c9f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9f8 = add i32 %v2_c9f8, 3
  %v4_c9f8 = inttoptr i32 %v3_c9f8 to i8*
  store i8 60, i8* %v4_c9f8, align 1
  store i32 %v4_c9fc, i32* %ip.global-to-local, align 4
  store i32 %v4_ca00, i32* %r3.global-to-local, align 4
  %v0_ca04 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca04 = trunc i32 %v0_ca04 to i8
  %v2_ca04 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca04 = add i32 %v2_ca04, 8
  %v4_ca04 = inttoptr i32 %v3_ca04 to i8*
  store i8 %v1_ca04, i8* %v4_ca04, align 1
  %v0_ca08 = load i32, i32* @r7, align 4
  %v1_ca08 = trunc i32 %v0_ca08 to i8
  %v2_ca08 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca08 = add i32 %v2_ca08, 9
  %v4_ca08 = inttoptr i32 %v3_ca08 to i8*
  store i8 %v1_ca08, i8* %v4_ca08, align 1
  %v3_ca0c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca0c, i32* %r2.global-to-local, align 4
  %v0_ca10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca10 = trunc i32 %v0_ca10 to i8
  %v2_ca10 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca10 = add i32 %v2_ca10, 4
  %v4_ca10 = inttoptr i32 %v3_ca10 to i8*
  store i8 %v1_ca10, i8* %v4_ca10, align 1
  %v0_ca14 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca14, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c9a8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca18 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca18 = add i32 %v3_ca18, 6
  %v5_ca18 = inttoptr i32 %v4_ca18 to i8*
  store i8 64, i8* %v5_ca18, align 1
  %v0_ca38.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c9a8, %bb
  %v0_ca38 = phi i1 [ true, %dec_label_pc_c9a8 ], [ %v0_ca38.pre, %bb ]
  %v0_ca1c = load i32, i32* %r2.global-to-local, align 4
  %v5_ca20 = mul i32 %v0_ca1c, 24
  store i32 %v5_ca20, i32* %r3.global-to-local, align 4
  store i32 %v6_c848, i32* %r2.global-to-local, align 4
  %v1_ca28 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca28 = add i32 %v1_ca28, 12
  %v3_ca28 = inttoptr i32 %v2_ca28 to i32*
  store i32 %v6_c848, i32* %v3_ca28, align 4
  %v0_ca2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ca2c = load i32, i32* @r8, align 4
  %v2_ca2c = add i32 %v1_ca2c, %v0_ca2c
  store i32 %v2_ca2c, i32* %r3.global-to-local, align 4
  %v1_ca30 = add i32 %v2_ca2c, 16
  %v2_ca30 = inttoptr i32 %v1_ca30 to i32*
  %v3_ca30 = load i32, i32* %v2_ca30, align 4
  store i32 %v3_ca30, i32* %r2.global-to-local, align 4
  store i32 %v4_c964, i32* %r3.global-to-local, align 4
  br i1 %v0_ca38, label %bb76, label %bb75

bb75:                                             ; preds = %.thread
  %v1_ca38 = load i32, i32* @r5, align 4
  %v2_ca38 = trunc i32 %v1_ca38 to i8
  %v3_ca38 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca38 = add i32 %v3_ca38, 7
  %v5_ca38 = inttoptr i32 %v4_ca38 to i8*
  store i8 %v2_ca38, i8* %v5_ca38, align 1
  br label %bb76

bb76:                                             ; preds = %.thread, %bb75
  %v0_ca3c = load i32, i32* %ip.global-to-local, align 4
  %v1_ca3c = trunc i32 %v0_ca3c to i8
  %v2_ca3c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca3c = add i32 %v2_ca3c, 5
  %v4_ca3c = inttoptr i32 %v3_ca3c to i8*
  store i8 %v1_ca3c, i8* %v4_ca3c, align 1
  %v0_ca40 = load i32, i32* @r5, align 4
  %v1_ca40 = trunc i32 %v0_ca40 to i8
  %v2_ca40 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca40 = add i32 %v2_ca40, 2
  %v4_ca40 = inttoptr i32 %v3_ca40 to i8*
  store i8 %v1_ca40, i8* %v4_ca40, align 1
  %v0_ca44 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca44 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca44 = add i32 %v1_ca44, 16
  %v3_ca44 = inttoptr i32 %v2_ca44 to i32*
  store i32 %v0_ca44, i32* %v3_ca44, align 4
  %v0_ca48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca48 = trunc i32 %v0_ca48 to i8
  %v2_ca48 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca48 = add i32 %v2_ca48, 20
  %v4_ca48 = inttoptr i32 %v3_ca48 to i8*
  store i8 %v1_ca48, i8* %v4_ca48, align 1
  %v0_ca4c = load i32, i32* %r4.global-to-local, align 4
  %v1_ca4c = add i32 %v0_ca4c, 20
  store i32 %v1_ca4c, i32* %r1.global-to-local, align 4
  %v1_ca50 = add i32 %v0_ca4c, 33
  %v2_ca50 = inttoptr i32 %v1_ca50 to i8*
  %v3_ca50 = load i8, i8* %v2_ca50, align 1
  %v4_ca50 = zext i8 %v3_ca50 to i32
  store i32 %v1_c938, i32* %ip.global-to-local, align 4
  %v1_ca58 = and i32 %v4_ca50, 223
  %v5_ca5c = or i32 %v1_ca58, %v4_ca5c
  store i32 %v5_ca5c, i32* %r3.global-to-local, align 4
  %v1_ca60 = trunc i32 %v5_ca5c to i8
  store i8 %v1_ca60, i8* %v2_ca50, align 1
  %v0_ca64 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca64 = add i32 %v0_ca64, 13
  %v2_ca64 = inttoptr i32 %v1_ca64 to i8*
  %v3_ca64 = load i8, i8* %v2_ca64, align 1
  %v4_ca64 = zext i8 %v3_ca64 to i32
  store i32 %v1_c944, i32* %r0.global-to-local, align 4
  %v1_ca6c = and i32 %v4_ca64, 239
  %v5_ca70 = or i32 %v1_ca6c, %v4_ca70
  store i32 %v5_ca70, i32* %r2.global-to-local, align 4
  %v1_ca74 = trunc i32 %v5_ca70 to i8
  store i8 %v1_ca74, i8* %v2_ca64, align 1
  %v0_ca78 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca78 = add i32 %v0_ca78, 13
  %v2_ca78 = inttoptr i32 %v1_ca78 to i8*
  %v3_ca78 = load i8, i8* %v2_ca78, align 1
  %v4_ca78 = zext i8 %v3_ca78 to i32
  store i32 %v1_c968, i32* %r2.global-to-local, align 4
  %v1_ca80 = and i32 %v4_ca78, 247
  %v5_ca84 = or i32 %v1_ca80, %v4_ca84
  store i32 %v5_ca84, i32* %r3.global-to-local, align 4
  %v1_ca88 = trunc i32 %v5_ca84 to i8
  store i8 %v1_ca88, i8* %v2_ca78, align 1
  %v0_ca8c = load i32, i32* %r1.global-to-local, align 4
  %v1_ca8c = add i32 %v0_ca8c, 13
  %v2_ca8c = inttoptr i32 %v1_ca8c to i8*
  %v3_ca8c = load i8, i8* %v2_ca8c, align 1
  %v4_ca8c = zext i8 %v3_ca8c to i32
  store i32 %v1_c948, i32* %r3.global-to-local, align 4
  %v1_ca94 = and i32 %v4_ca8c, 251
  %v5_ca98 = or i32 %v1_ca94, %v4_ca98
  store i32 %v5_ca98, i32* %r2.global-to-local, align 4
  %v1_ca9c = trunc i32 %v5_ca98 to i8
  store i8 %v1_ca9c, i8* %v2_ca8c, align 1
  %v0_caa0 = load i32, i32* %r1.global-to-local, align 4
  %v1_caa0 = add i32 %v0_caa0, 13
  %v2_caa0 = inttoptr i32 %v1_caa0 to i8*
  %v3_caa0 = load i8, i8* %v2_caa0, align 1
  %v4_caa0 = zext i8 %v3_caa0 to i32
  store i32 %v1_c96c, i32* %ip.global-to-local, align 4
  %v1_caa8 = and i32 %v4_caa0, 253
  %v4_caac = or i32 %v1_caa8, %v3_caac
  store i32 %v4_caac, i32* %r3.global-to-local, align 4
  %v1_cab0 = trunc i32 %v4_caac to i8
  store i8 %v1_cab0, i8* %v2_caa0, align 1
  %v0_cab4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cab4 = add i32 %v0_cab4, 12
  %v2_cab4 = inttoptr i32 %v1_cab4 to i8*
  %v3_cab4 = load i8, i8* %v2_cab4, align 1
  %v4_cab4 = zext i8 %v3_cab4 to i32
  store i32 %v4_cab4, i32* %r2.global-to-local, align 4
  %v1_cab8 = add i32 %v0_cab4, 13
  %v2_cab8 = inttoptr i32 %v1_cab8 to i8*
  %v3_cab8 = load i8, i8* %v2_cab8, align 1
  %v4_cab8 = zext i8 %v3_cab8 to i32
  %tmp83 = urem i8 %v3_cab4, 16
  %v1_cac0 = zext i8 %tmp83 to i32
  %v1_cac4 = and i32 %v4_cab8, 254
  %v2_cac8 = or i32 %v1_cac4, %v1_c978
  %v1_cacc = or i32 %v1_cac0, 160
  store i32 %v1_cacc, i32* %r2.global-to-local, align 4
  %v1_cad0 = trunc i32 %v2_cac8 to i8
  store i8 %v1_cad0, i8* %v2_cab8, align 1
  %v0_cad4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cad4 = trunc i32 %v0_cad4 to i8
  %v2_cad4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cad4 = add i32 %v2_cad4, 12
  %v4_cad4 = inttoptr i32 %v3_cad4 to i8*
  store i8 %v1_cad4, i8* %v4_cad4, align 1
  store i32 %v7_cadc, i32* %r3.global-to-local, align 4
  store i32 %v5_c910, i32* %ip.global-to-local, align 4
  %v2_cae4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cae4 = add i32 %v2_cae4, 1
  %v4_cae4 = inttoptr i32 %v3_cae4 to i8*
  store i8 %v5_c994, i8* %v4_cae4, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_caf0 = load i32, i32* %r3.global-to-local, align 4
  %v1_caf0 = trunc i32 %v0_caf0 to i8
  %v2_caf0 = load i32, i32* %r1.global-to-local, align 4
  %v3_caf0 = add i32 %v2_caf0, 3
  %v4_caf0 = inttoptr i32 %v3_caf0 to i8*
  store i8 %v1_caf0, i8* %v4_caf0, align 1
  %v0_caf4 = load i32, i32* %ip.global-to-local, align 4
  %v1_caf4 = load i32, i32* %r1.global-to-local, align 4
  %v2_caf4 = add i32 %v1_caf4, 4
  %v3_caf4 = inttoptr i32 %v2_caf4 to i32*
  store i32 %v0_caf4, i32* %v3_caf4, align 4
  %v0_caf8 = load i32, i32* @r6, align 4
  %v1_caf8 = trunc i32 %v0_caf8 to i8
  %v2_caf8 = load i32, i32* %r1.global-to-local, align 4
  %v3_caf8 = add i32 %v2_caf8, 2
  %v4_caf8 = inttoptr i32 %v3_caf8 to i8*
  store i8 %v1_caf8, i8* %v4_caf8, align 1
  %v0_cafc = load i32, i32* %r2.global-to-local, align 4
  %v1_cafc = trunc i32 %v0_cafc to i8
  %v2_cafc = load i32, i32* %r4.global-to-local, align 4
  %v3_cafc = add i32 %v2_cafc, 41
  %v4_cafc = inttoptr i32 %v3_cafc to i8*
  store i8 %v1_cafc, i8* %v4_cafc, align 1
  %v0_cb00 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb00 = trunc i32 %v0_cb00 to i8
  %v2_cb00 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb00 = add i32 %v2_cb00, 40
  %v4_cb00 = inttoptr i32 %v3_cb00 to i8*
  store i8 %v1_cb00, i8* %v4_cb00, align 1
  %v0_cb04 = call i32 @function_f8c8()
  %v1_cb08 = urem i32 %v0_cb04, 16
  %v1_cb0c = or i32 %v1_cb08, 1392
  %v1_cb10 = add nuw nsw i32 %v1_cb0c, 8
  %v3_cb14 = mul nuw nsw i32 %v1_cb10, 65536
  store i32 %v3_cb14, i32* %r0.global-to-local, align 4
  %v3_cb18 = mul nuw nsw i32 %v1_cb10, 256
  %v1_cb1c = and i32 %v3_cb18, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v5_cb20 = or i32 %v1_cb1c, 5
  store i32 %v5_cb20, i32* %r3.global-to-local, align 4
  %v2_cb24 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb24 = add i32 %v2_cb24, 42
  %v4_cb24 = inttoptr i32 %v3_cb24 to i8*
  store i8 5, i8* %v4_cb24, align 1
  %v0_cb28 = load i32, i32* %r3.global-to-local, align 4
  %v3_cb28 = sdiv i32 %v0_cb28, 256
  store i32 %v3_cb28, i32* %r1.global-to-local, align 4
  %v0_cb2c = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_cb34 = trunc i32 %v3_cb28 to i8
  %v3_cb34 = add i32 %v0_cb2c, 43
  %v4_cb34 = inttoptr i32 %v3_cb34 to i8*
  store i8 %v1_cb34, i8* %v4_cb34, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_cb3c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb3c = trunc i32 %v0_cb3c to i8
  %v2_cb3c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb3c = add i32 %v2_cb3c, 46
  %v4_cb3c = inttoptr i32 %v3_cb3c to i8*
  store i8 %v1_cb3c, i8* %v4_cb3c, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_cb48 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb48 = add i32 %v2_cb48, 47
  %v4_cb48 = inttoptr i32 %v3_cb48 to i8*
  store i8 10, i8* %v4_cb48, align 1
  %v0_cb4c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb4c = trunc i32 %v0_cb4c to i8
  %v2_cb4c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb4c = add i32 %v2_cb4c, 44
  %v4_cb4c = inttoptr i32 %v3_cb4c to i8*
  store i8 %v1_cb4c, i8* %v4_cb4c, align 1
  %v0_cb50 = load i32, i32* %ip.global-to-local, align 4
  %v1_cb50 = trunc i32 %v0_cb50 to i8
  %v2_cb50 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb50 = add i32 %v2_cb50, 45
  %v4_cb50 = inttoptr i32 %v3_cb50 to i8*
  store i8 %v1_cb50, i8* %v4_cb50, align 1
  %v0_cb54 = call i32 @function_f8c8()
  store i32 %v0_cb54, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_cb60 = load i32, i32* %r4.global-to-local, align 4
  %v2_cb60 = add i32 %v1_cb60, 48
  %v3_cb60 = inttoptr i32 %v2_cb60 to i32*
  store i32 %v0_cb54, i32* %v3_cb60, align 4
  %v0_cb64 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb64 = trunc i32 %v0_cb64 to i8
  %v2_cb64 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb64 = add i32 %v2_cb64, 56
  %v4_cb64 = inttoptr i32 %v3_cb64 to i8*
  store i8 %v1_cb64, i8* %v4_cb64, align 1
  %v0_cb68 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb68 = trunc i32 %v0_cb68 to i8
  %v2_cb68 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb68 = add i32 %v2_cb68, 58
  %v4_cb68 = inttoptr i32 %v3_cb68 to i8*
  store i8 %v1_cb68, i8* %v4_cb68, align 1
  %v0_cb6c = load i32, i32* @r7, align 4
  %v1_cb6c = trunc i32 %v0_cb6c to i8
  %v2_cb6c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb6c = add i32 %v2_cb6c, 59
  %v4_cb6c = inttoptr i32 %v3_cb6c to i8*
  store i8 %v1_cb6c, i8* %v4_cb6c, align 1
  %v0_cb70 = load i32, i32* @r5, align 4
  %v1_cb70 = load i32, i32* %r4.global-to-local, align 4
  %v2_cb70 = add i32 %v1_cb70, 52
  %v3_cb70 = inttoptr i32 %v2_cb70 to i32*
  store i32 %v0_cb70, i32* %v3_cb70, align 4
  %v0_cb74 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb74 = trunc i32 %v0_cb74 to i8
  %v2_cb74 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb74 = add i32 %v2_cb74, 57
  %v4_cb74 = inttoptr i32 %v3_cb74 to i8*
  store i8 %v1_cb74, i8* %v4_cb74, align 1
  %v3_cb78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cb78, i32* %r3.global-to-local, align 4
  %v1_cb7c = add i32 %v3_cb78, 1
  store i32 %v1_cb7c, i32* @r4, align 4
  %v0_cb80 = load i32, i32* %fp.global-to-local, align 4
  %v9_cb80 = icmp eq i32 %v0_cb80, %v1_cb7c
  store i1 %v9_cb80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb7c, i32* %stack_var_-40, align 4
  %v8_cb88 = icmp sgt i32 %v0_cb80, %v1_cb7c
  br i1 %v8_cb88, label %dec_label_pc_c9a8, label %dec_label_pc_cb8c.preheader

dec_label_pc_cb8c.preheader:                      ; preds = %bb76, %dec_label_pc_c8a4
  %v0_cb9014 = phi i32 [ %v0_c8cc, %dec_label_pc_c8a4 ], [ %v0_cb80, %bb76 ]
  %v2_cbac = icmp eq i32 %v6_c848, -1
  %v7_cbac = icmp eq i32 %v6_c848, -1
  %v3_cd3c = icmp eq i32 %v3_c8bc, 65535
  %v2_cdb8 = icmp eq i32 %v1_c8c8, 0
  br label %dec_label_pc_cb8c

dec_label_pc_cb8c:                                ; preds = %dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge, %dec_label_pc_cb8c.preheader
  %v0_cb90 = phi i32 [ %v0_cb90.pre, %dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge ], [ %v0_cb9014, %dec_label_pc_cb8c.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_cb90 = icmp eq i32 %v0_cb90, 0
  store i1 %v2_cb90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp77 = icmp slt i32 %v0_cb90, 1
  br i1 %tmp77, label %dec_label_pc_cdd8, label %dec_label_pc_cb9c

dec_label_pc_cb9c:                                ; preds = %dec_label_pc_cb8c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cca4

dec_label_pc_cba8:                                ; preds = %dec_label_pc_cca4
  store i32 %v6_c848, i32* %r0.global-to-local, align 4
  store i1 %v7_cbac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cbac, label %dec_label_pc_cd2c, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %dec_label_pc_ccc4, %dec_label_pc_cba8
  store i32 %v3_c8bc, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cd3c, label %dec_label_pc_cd48, label %dec_label_pc_cbc8

dec_label_pc_cbc8:                                ; preds = %dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge, %dec_label_pc_cbb4
  %v1_cbcc = phi i32 [ %v1_cbcc.pre, %dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge ], [ 65535, %dec_label_pc_cbb4 ]
  store i32 %v3_c8c0, i32* %r3.global-to-local, align 4
  %v9_cbcc = icmp eq i32 %v3_c8c0, %v1_cbcc
  store i1 %v9_cbcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbcc, label %dec_label_pc_cd64, label %dec_label_pc_cbd4

dec_label_pc_cbd4:                                ; preds = %dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge, %dec_label_pc_cbc8
  %v1_cbd8 = phi i32 [ %v1_cbd8.pre, %dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge ], [ %v1_cbcc, %dec_label_pc_cbc8 ]
  store i32 %v3_c8c4, i32* %ip.global-to-local, align 4
  %v9_cbd8 = icmp eq i32 %v3_c8c4, %v1_cbd8
  store i1 %v9_cbd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbd8, label %dec_label_pc_cd80, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge, %dec_label_pc_cbd4
  %v1_cbe4 = phi i32 [ %v1_cbe4.pre, %dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge ], [ %v1_cbd8, %dec_label_pc_cbd4 ]
  store i32 %v6_c784, i32* %r0.global-to-local, align 4
  %v9_cbe4 = icmp eq i32 %v6_c784, %v1_cbe4
  store i1 %v9_cbe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbe4, label %dec_label_pc_cd9c, label %dec_label_pc_cbec

dec_label_pc_cbec:                                ; preds = %dec_label_pc_cd80.dec_label_pc_cbec_crit_edge, %dec_label_pc_cbe0
  %v1_cbf0 = phi i32 [ %v1_cbf0.pre, %dec_label_pc_cd80.dec_label_pc_cbec_crit_edge ], [ %v1_cbe4, %dec_label_pc_cbe0 ]
  store i32 %v6_c79c, i32* %r2.global-to-local, align 4
  %v9_cbf0 = icmp eq i32 %v6_c79c, %v1_cbf0
  store i1 %v9_cbf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbf0, label %dec_label_pc_cdb0, label %dec_label_pc_cbf8

dec_label_pc_cbf8:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cbec
  store i32 %v1_c8c8, i32* %r3.global-to-local, align 4
  store i1 %v2_cdb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cdb8, label %dec_label_pc_cc04, label %dec_label_pc_cdc4

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cbf8, %dec_label_pc_cdb0, %dec_label_pc_cdc4
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cc08 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc08 = trunc i32 %v0_cc08 to i8
  %v2_cc08 = load i32, i32* @r5, align 4
  %v3_cc08 = add i32 %v2_cc08, 10
  %v4_cc08 = inttoptr i32 %v3_cc08 to i8*
  store i8 %v1_cc08, i8* %v4_cc08, align 1
  %v0_cc0c = load i32, i32* %r7.global-to-local, align 4
  %v1_cc0c = trunc i32 %v0_cc0c to i8
  %v2_cc0c = load i32, i32* @r5, align 4
  %v3_cc0c = add i32 %v2_cc0c, 11
  %v4_cc0c = inttoptr i32 %v3_cc0c to i8*
  store i8 %v1_cc0c, i8* %v4_cc0c, align 1
  %v0_cc10 = load i32, i32* @r5, align 4
  store i32 %v0_cc10, i32* @r0, align 4
  %v2_cc14 = call i32 @function_e498(i32 %v0_cc10, i32 20)
  %v3_cc14 = trunc i32 %v2_cc14 to i8
  %v4_cc1822 = udiv i32 %v2_cc14, 256
  %v1_cc1c = trunc i32 %v4_cc1822 to i8
  %v2_cc1c = load i32, i32* @r5, align 4
  %v3_cc1c = add i32 %v2_cc1c, 11
  %v4_cc1c = inttoptr i32 %v3_cc1c to i8*
  store i8 %v1_cc1c, i8* %v4_cc1c, align 1
  %v3_cc20 = load i32, i32* @r5, align 4
  %v4_cc20 = add i32 %v3_cc20, 10
  %v5_cc20 = inttoptr i32 %v4_cc20 to i8*
  store i8 %v3_cc14, i8* %v5_cc20, align 1
  %v0_cc24 = load i32, i32* @r6, align 4
  store i32 %v0_cc24, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cc30 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc30 = trunc i32 %v0_cc30 to i8
  %v3_cc30 = add i32 %v0_cc24, 16
  %v4_cc30 = inttoptr i32 %v3_cc30 to i8*
  store i8 %v1_cc30, i8* %v4_cc30, align 1
  %v0_cc34 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc34 = trunc i32 %v0_cc34 to i8
  %v2_cc34 = load i32, i32* @r6, align 4
  %v3_cc34 = add i32 %v2_cc34, 17
  %v4_cc34 = inttoptr i32 %v3_cc34 to i8*
  store i8 %v1_cc34, i8* %v4_cc34, align 1
  %v0_cc38 = load i32, i32* @r5, align 4
  store i32 %v0_cc38, i32* %r0.global-to-local, align 4
  %v4_cc3c = call i32 @function_e4f4(i32 %v0_cc38, i32 %v0_cc24, i32 10240, i32 40)
  %v5_cc3c = trunc i32 %v4_cc3c to i8
  store i32 %v4_cc3c, i32* %r0.global-to-local, align 4
  %v4_cc4023 = udiv i32 %v4_cc3c, 256
  %v1_cc44 = trunc i32 %v4_cc4023 to i8
  %v2_cc44 = load i32, i32* @r6, align 4
  %v3_cc44 = add i32 %v2_cc44, 17
  %v4_cc44 = inttoptr i32 %v3_cc44 to i8*
  store i8 %v1_cc44, i8* %v4_cc44, align 1
  %v3_cc48 = load i32, i32* @r6, align 4
  %v4_cc48 = add i32 %v3_cc48, 16
  %v5_cc48 = inttoptr i32 %v4_cc48 to i8*
  store i8 %v5_cc3c, i8* %v5_cc48, align 1
  %v3_cc4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc4c, i32* %r3.global-to-local, align 4
  %v0_cc50 = load i32, i32* @r5, align 4
  %v1_cc50 = add i32 %v0_cc50, 20
  %v2_cc50 = inttoptr i32 %v1_cc50 to i32*
  %v3_cc50 = load i32, i32* %v2_cc50, align 4
  %v3_cc58 = udiv i32 %v3_cc50, 65536
  store i32 %v3_cc58, i32* %r2.global-to-local, align 4
  %v5_cc5c = mul i32 %v3_cc4c, 24
  %v1_cc60 = load i32, i32* @r8, align 4
  %v2_cc60 = add i32 %v1_cc60, %v5_cc5c
  store i32 %v2_cc60, i32* %ip.global-to-local, align 4
  %v3_cc6421 = udiv i32 %v3_cc50, 16777216
  %v1_cc68 = trunc i32 %v3_cc6421 to i8
  %v3_cc68 = add i32 %v2_cc60, 3
  %v4_cc68 = inttoptr i32 %v3_cc68 to i8*
  store i8 %v1_cc68, i8* %v4_cc68, align 1
  %v0_cc6c = load i32, i32* %r2.global-to-local, align 4
  %v1_cc6c = trunc i32 %v0_cc6c to i8
  %v2_cc6c = load i32, i32* %ip.global-to-local, align 4
  %v3_cc6c = add i32 %v2_cc6c, 2
  %v4_cc6c = inttoptr i32 %v3_cc6c to i8*
  store i8 %v1_cc6c, i8* %v4_cc6c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cc74 = load i32, i32* @r5, align 4
  store i32 %v0_cc74, i32* %r1.global-to-local, align 4
  %v0_cc78 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_cc78, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_cc84 = load i32, i32* %ip.global-to-local, align 4
  %v6_cc8c = inttoptr i32 %v0_cc74 to i32*
  %v7_cc8c = call i32 @function_13e58(i32 %v0_cc78, i32* %v6_cc8c, i32 60, i32 16384, i32 %v0_cc84, i32 16)
  %v3_cc90 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc90, i32* %r3.global-to-local, align 4
  %v1_cc94 = add i32 %v3_cc90, 1
  store i32 %v1_cc94, i32* %r0.global-to-local, align 4
  %v0_cc98 = load i32, i32* %fp.global-to-local, align 4
  %v9_cc98 = icmp eq i32 %v0_cc98, %v1_cc94
  store i1 %v9_cc98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cc94, i32* %stack_var_-40, align 4
  %v7_cca0 = icmp sgt i32 %v0_cc98, %v1_cc94
  br i1 %v7_cca0, label %dec_label_pc_cca4, label %dec_label_pc_cdd8

dec_label_pc_cca4:                                ; preds = %dec_label_pc_cc04, %dec_label_pc_cb9c
  %v1_ccb4 = phi i32 [ %v1_cc94, %dec_label_pc_cc04 ], [ 0, %dec_label_pc_cb9c ]
  %v5_cca8 = mul i32 %v1_ccb4, 24
  %v1_ccac = load i32, i32* @r8, align 4
  %v2_ccac = add i32 %v1_ccac, %v5_cca8
  store i32 %v2_ccac, i32* %r3.global-to-local, align 4
  %v1_ccb0 = add i32 %v2_ccac, 20
  %v2_ccb0 = inttoptr i32 %v1_ccb0 to i8*
  %v3_ccb0 = load i8, i8* %v2_ccb0, align 1
  %v4_ccb0 = zext i8 %v3_ccb0 to i32
  store i32 %v4_ccb0, i32* %r2.global-to-local, align 4
  %v0_ccb4 = load i32, i32* %sb.global-to-local, align 4
  %v4_ccb4 = mul i32 %v1_ccb4, 4
  %v5_ccb4 = add i32 %v0_ccb4, %v4_ccb4
  %v6_ccb4 = inttoptr i32 %v5_ccb4 to i32*
  %v7_ccb4 = load i32, i32* %v6_ccb4, align 4
  store i32 %v7_ccb4, i32* @r5, align 4
  %v2_ccb8 = icmp ugt i8 %v3_ccb0, 30
  %v7_ccb8 = icmp eq i8 %v3_ccb0, 31
  store i1 %v7_ccb8, i1* %cpsr_z.global-to-local, align 1
  %v1_ccbc = add i32 %v7_ccb4, 20
  store i32 %v1_ccbc, i32* @r6, align 4
  %v2_ccc0 = xor i1 %v7_ccb8, true
  %v3_ccc0 = and i1 %v2_ccb8, %v2_ccc0
  br i1 %v3_ccc0, label %dec_label_pc_cba8, label %dec_label_pc_ccc4

dec_label_pc_ccc4:                                ; preds = %dec_label_pc_cca4
  %v1_ccc4 = add i32 %v2_ccac, 16
  %v2_ccc4 = inttoptr i32 %v1_ccc4 to i32*
  %v3_ccc4 = load i32, i32* %v2_ccc4, align 4
  store i32 %v3_ccc4, i32* %r4.global-to-local, align 4
  %v0_ccc8 = call i32 @function_f8c8()
  store i32 %v0_ccc8, i32* %r0.global-to-local, align 4
  %v3_cccc = load i32, i32* %stack_var_-40, align 4
  %v5_ccd4 = mul i32 %v3_cccc, 24
  %v0_ccd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_ccdc = load i32, i32* @r8, align 4
  %v2_ccdc = add i32 %v1_ccdc, %v5_ccd4
  store i32 %v2_ccdc, i32* %r1.global-to-local, align 4
  %v1_cce0 = and i32 %v0_ccd8, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_cce0, i32* %r3.global-to-local, align 4
  %v1_ccd8 = udiv i32 %v0_ccd8, 256
  %v3_cce4 = and i32 %v1_ccd8, 65280
  store i32 %v3_cce4, i32* %r2.global-to-local, align 4
  %v3_cce8 = mul i32 %v0_ccd8, 16777216
  store i32 %v3_cce8, i32* %ip.global-to-local, align 4
  %v1_ccec = add i32 %v2_ccdc, 20
  %v2_ccec = inttoptr i32 %v1_ccec to i8*
  %v3_ccec = load i8, i8* %v2_ccec, align 1
  %v4_ccec = zext i8 %v3_ccec to i32
  %v4_ccf0 = mul i32 %v1_cce0, 256
  %v5_ccf0 = or i32 %v4_ccf0, %v3_cce8
  store i32 %v5_ccf0, i32* %ip.global-to-local, align 4
  %v4_ccf4 = udiv i32 %v0_ccd8, 16777216
  %v5_ccf4 = or i32 %v3_cce4, %v4_ccf4
  %v2_ccf8 = or i32 %v5_ccf4, %v5_ccf0
  %v7_ccfc = lshr i32 %v0_ccc8, %v4_ccec
  %v8_ccfc = add i32 %v7_ccfc, %v2_ccf8
  store i32 %v8_ccfc, i32* %r2.global-to-local, align 4
  %v3_cd08 = mul i32 %v8_ccfc, 16777216
  %v1_cd00 = mul i32 %v8_ccfc, 256
  %v4_cd0c = and i32 %v1_cd00, 16711680
  %v5_cd0c = or i32 %v4_cd0c, %v3_cd08
  store i32 %v5_cd0c, i32* %r1.global-to-local, align 4
  store i32 %v6_c848, i32* %r0.global-to-local, align 4
  %v2_cd1c = call i32 @llvm.bswap.i32(i32 %v8_ccfc)
  store i32 %v2_cd1c, i32* %r3.global-to-local, align 4
  store i1 %v7_cbac, i1* %cpsr_z.global-to-local, align 1
  %v1_cd24 = load i32, i32* @r5, align 4
  %v2_cd24 = add i32 %v1_cd24, 16
  %v3_cd24 = inttoptr i32 %v2_cd24 to i32*
  store i32 %v2_cd1c, i32* %v3_cd24, align 4
  br i1 %v2_cbac, label %dec_label_pc_cd2c, label %dec_label_pc_cbb4

dec_label_pc_cd2c:                                ; preds = %dec_label_pc_ccc4, %dec_label_pc_cba8
  %v0_cd2c = call i32 @function_f8c8()
  store i32 %v0_cd2c, i32* %r0.global-to-local, align 4
  store i32 %v3_c8bc, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd3c, i1* %cpsr_z.global-to-local, align 1
  %v1_cd40 = load i32, i32* @r5, align 4
  %v2_cd40 = add i32 %v1_cd40, 12
  %v3_cd40 = inttoptr i32 %v2_cd40 to i32*
  store i32 %v0_cd2c, i32* %v3_cd40, align 4
  br i1 %v3_cd3c, label %dec_label_pc_cd48, label %dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge

dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge:    ; preds = %dec_label_pc_cd2c
  %v1_cbcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbc8

dec_label_pc_cd48:                                ; preds = %dec_label_pc_cd2c, %dec_label_pc_cbb4
  %v0_cd48 = call i32 @function_f8c8()
  %v1_cd48 = trunc i32 %v0_cd48 to i8
  store i32 %v0_cd48, i32* %r0.global-to-local, align 4
  %v4_cd4c24 = udiv i32 %v0_cd48, 256
  %v1_cd50 = trunc i32 %v4_cd4c24 to i8
  %v2_cd50 = load i32, i32* @r5, align 4
  %v3_cd50 = add i32 %v2_cd50, 5
  %v4_cd50 = inttoptr i32 %v3_cd50 to i8*
  store i8 %v1_cd50, i8* %v4_cd50, align 1
  store i32 %v3_c8c0, i32* %r3.global-to-local, align 4
  %v1_cd58 = load i32, i32* @r4, align 4
  %v9_cd58 = icmp eq i32 %v3_c8c0, %v1_cd58
  store i1 %v9_cd58, i1* %cpsr_z.global-to-local, align 1
  %v3_cd5c = load i32, i32* @r5, align 4
  %v4_cd5c = add i32 %v3_cd5c, 4
  %v5_cd5c = inttoptr i32 %v4_cd5c to i8*
  store i8 %v1_cd48, i8* %v5_cd5c, align 1
  %v0_cd60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd60, label %dec_label_pc_cd64, label %dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge

dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge:    ; preds = %dec_label_pc_cd48
  %v1_cbd8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbd4

dec_label_pc_cd64:                                ; preds = %dec_label_pc_cd48, %dec_label_pc_cbc8
  %v0_cd64 = call i32 @function_f8c8()
  %v1_cd64 = trunc i32 %v0_cd64 to i8
  store i32 %v0_cd64, i32* %r0.global-to-local, align 4
  store i32 %v3_c8c4, i32* %ip.global-to-local, align 4
  %v4_cd6c = sdiv i32 %v0_cd64, 256
  store i32 %v4_cd6c, i32* %r3.global-to-local, align 4
  %v1_cd70 = load i32, i32* @r4, align 4
  %v9_cd70 = icmp eq i32 %v3_c8c4, %v1_cd70
  store i1 %v9_cd70, i1* %cpsr_z.global-to-local, align 1
  %v3_cd74 = load i32, i32* @r5, align 4
  %v4_cd74 = add i32 %v3_cd74, 20
  %v5_cd74 = inttoptr i32 %v4_cd74 to i8*
  store i8 %v1_cd64, i8* %v5_cd74, align 1
  %v0_cd78 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd78 = trunc i32 %v0_cd78 to i8
  %v2_cd78 = load i32, i32* @r6, align 4
  %v3_cd78 = add i32 %v2_cd78, 1
  %v4_cd78 = inttoptr i32 %v3_cd78 to i8*
  store i8 %v1_cd78, i8* %v4_cd78, align 1
  %v0_cd7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd7c, label %dec_label_pc_cd80, label %dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge

dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge:    ; preds = %dec_label_pc_cd64
  %v1_cbe4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbe0

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd64, %dec_label_pc_cbd4
  %v0_cd80 = call i32 @function_f8c8()
  %v1_cd80 = trunc i32 %v0_cd80 to i8
  %v4_cd84 = sdiv i32 %v0_cd80, 256
  store i32 %v4_cd84, i32* %r3.global-to-local, align 4
  %v3_cd88 = load i32, i32* @r6, align 4
  %v4_cd88 = add i32 %v3_cd88, 2
  %v5_cd88 = inttoptr i32 %v4_cd88 to i8*
  store i8 %v1_cd80, i8* %v5_cd88, align 1
  store i32 %v6_c784, i32* %r0.global-to-local, align 4
  %v1_cd90 = load i32, i32* @r4, align 4
  %v9_cd90 = icmp eq i32 %v6_c784, %v1_cd90
  store i1 %v9_cd90, i1* %cpsr_z.global-to-local, align 1
  %v0_cd94 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* @r6, align 4
  %v3_cd94 = add i32 %v2_cd94, 3
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  %v0_cd98 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd98, label %dec_label_pc_cd9c, label %dec_label_pc_cd80.dec_label_pc_cbec_crit_edge

dec_label_pc_cd80.dec_label_pc_cbec_crit_edge:    ; preds = %dec_label_pc_cd80
  %v1_cbf0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbec

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cd80, %dec_label_pc_cbe0
  %v0_cd9c = call i32 @function_f8c8()
  store i32 %v0_cd9c, i32* %r0.global-to-local, align 4
  store i32 %v6_c79c, i32* %r2.global-to-local, align 4
  %v1_cda4 = load i32, i32* @r4, align 4
  %v9_cda4 = icmp eq i32 %v6_c79c, %v1_cda4
  store i1 %v9_cda4, i1* %cpsr_z.global-to-local, align 1
  %v1_cda8 = load i32, i32* @r6, align 4
  %v2_cda8 = add i32 %v1_cda8, 4
  %v3_cda8 = inttoptr i32 %v2_cda8 to i32*
  store i32 %v0_cd9c, i32* %v3_cda8, align 4
  br i1 %v9_cda4, label %dec_label_pc_cdb0, label %dec_label_pc_cbf8

dec_label_pc_cdb0:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cbec
  %v0_cdb0 = call i32 @function_f8c8()
  store i32 %v0_cdb0, i32* %r0.global-to-local, align 4
  store i32 %v1_c8c8, i32* %r3.global-to-local, align 4
  store i1 %v2_cdb8, i1* %cpsr_z.global-to-local, align 1
  %v1_cdbc = load i32, i32* @r6, align 4
  %v2_cdbc = add i32 %v1_cdbc, 8
  %v3_cdbc = inttoptr i32 %v2_cdbc to i32*
  store i32 %v0_cdb0, i32* %v3_cdbc, align 4
  br i1 %v2_cdb8, label %dec_label_pc_cc04, label %dec_label_pc_cdc4

dec_label_pc_cdc4:                                ; preds = %dec_label_pc_cbf8, %dec_label_pc_cdb0
  %v0_cdc4 = call i32 @function_f8c8()
  %v1_cdc4 = trunc i32 %v0_cdc4 to i8
  store i32 %v0_cdc4, i32* %r0.global-to-local, align 4
  %v4_cdc8 = sdiv i32 %v0_cdc4, 256
  store i32 %v4_cdc8, i32* %r3.global-to-local, align 4
  %v1_cdcc = trunc i32 %v4_cdc8 to i8
  %v2_cdcc = load i32, i32* @r6, align 4
  %v3_cdcc = add i32 %v2_cdcc, 19
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v3_cdd0 = load i32, i32* @r6, align 4
  %v4_cdd0 = add i32 %v3_cdd0, 18
  %v5_cdd0 = inttoptr i32 %v4_cdd0 to i8*
  store i8 %v1_cdc4, i8* %v5_cdd0, align 1
  br label %dec_label_pc_cc04

dec_label_pc_cdd8:                                ; preds = %dec_label_pc_cc04, %dec_label_pc_cb8c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_cddc = call i32 @function_138a0(i32* null)
  store i32 %v2_cddc, i32* %r0.global-to-local, align 4
  store i32 %v2_c858, i32* %ip.global-to-local, align 4
  %v9_cde4 = icmp eq i32 %v2_c858, %v2_cddc
  store i1 %v9_cde4, i1* %cpsr_z.global-to-local, align 1
  %v6_cde8 = icmp slt i32 %v2_c858, %v2_cddc
  br i1 %v6_cde8, label %dec_label_pc_cdec, label %dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge

dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge:    ; preds = %dec_label_pc_cdd8
  %v0_cb90.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_cb8c

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cdd8, %dec_label_pc_c688, %dec_label_pc_cdf4
  %v29_cdf0 = phi i32 [ %v3_c86c, %dec_label_pc_c688 ], [ %v1_cdf8, %dec_label_pc_cdf4 ], [ %v2_cddc, %dec_label_pc_cdd8 ]
  store i32 %v3_c688, i32* %r4.global-to-local, align 4
  store i32 %v12_c688, i32* %r7.global-to-local, align 4
  ret i32 %v29_cdf0

dec_label_pc_cdf4:                                ; preds = %dec_label_pc_c87c
  %v0_cdf4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_cdf4, i32* %r0.global-to-local, align 4
  %v1_cdf8 = call i32 @function_135d0(i32 %v0_cdf4)
  store i32 %v1_cdf8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cdec

; uselistorder directives
  uselistorder i32 %v1_cdf8, { 1, 0 }
  uselistorder i32 %v4_cdc8, { 1, 0 }
  uselistorder i32 %v0_cdc4, { 0, 2, 1 }
  uselistorder i32 %v0_cd64, { 0, 2, 1 }
  uselistorder i32 %v0_cd48, { 0, 2, 1 }
  uselistorder i32 %v2_cd1c, { 1, 0 }
  uselistorder i32 %v8_ccfc, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cce8, { 1, 0 }
  uselistorder i32 %v0_ccd8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_cc94, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_cc3c, { 0, 2, 1 }
  uselistorder i32 %v0_cc24, { 1, 0, 2 }
  uselistorder i1 %v2_cdb8, { 2, 3, 1, 0 }
  uselistorder i1 %v3_cd3c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_cbac, { 2, 1, 0 }
  uselistorder i32 %v1_cb7c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_cb28, { 1, 0 }
  uselistorder i32 %v3_c980, { 1, 0 }
  uselistorder i32 %v1_c978, { 1, 0 }
  uselistorder i32 %v1_c96c, { 1, 0 }
  uselistorder i32 %v1_c968, { 1, 0 }
  uselistorder i32 %v1_c948, { 1, 0 }
  uselistorder i32 %v1_c944, { 1, 0 }
  uselistorder i32 %v1_c938, { 1, 0 }
  uselistorder i32 %v1_c904, { 1, 0 }
  uselistorder i32 %v1_c8f0, { 1, 0 }
  uselistorder i32 %v0_c8d0, { 1, 0, 2 }
  uselistorder i32 %v1_c8c8, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c8c0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v3_c8bc, { 0, 1, 3, 2 }
  uselistorder i1 %v7_c89c, { 1, 0 }
  uselistorder i1 %v7_c870, { 1, 0 }
  uselistorder i32 %v3_c86c, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_c858, { 2, 1, 0 }
  uselistorder i32 %v6_c848, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_c79c, { 3, 2, 1, 0 }
  uselistorder i32 %v6_c784, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c74c, { 1, 0, 3, 2 }
  uselistorder i32 %v1_c734, { 1, 0 }
  uselistorder i32 %v5_c6cc, { 1, 0 }
  uselistorder i32 %v1_c68c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 43, { 0, 2, 5, 3, 6, 1, 7, 4, 8 }
  uselistorder i32 42, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_cdec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cdc4, { 1, 0 }
  uselistorder label %dec_label_pc_cc04, { 2, 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ce04(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ce04:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v1_ce08 = urem i32 %arg2, 256
  store i32 %v1_ce08, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_ce08, i32* %r0.global-to-local, align 4
  %v1_ce1c = urem i32 %arg4, 256
  store i32 %v1_ce1c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_ce28 = call i32 @function_141a8(i32 %v1_ce08, i32 4)
  %v0_ce34 = load i32, i32* @sl, align 4
  store i32 %v0_ce34, i32* %r0.global-to-local, align 4
  %v2_ce38 = call i32 @function_141a8(i32 %v0_ce34, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_ce44 = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_ce38, i32* @sb, align 4
  %v0_ce54 = load i32, i32* @r4, align 4
  store i32 %v0_ce54, i32* %r0.global-to-local, align 4
  %v4_ce58 = inttoptr i32 %v0_ce44 to i32*
  %v5_ce58 = call i32 @function_a054(i32 %v0_ce54, i32* %v4_ce58, i32 7, i32 65535)
  %v0_ce5c = load i32, i32* @r5, align 4
  %v0_ce68 = load i32, i32* @r6, align 4
  store i32 %v0_ce68, i32* %r3.global-to-local, align 4
  %v0_ce6c = load i32, i32* @r4, align 4
  store i32 %v0_ce6c, i32* %r0.global-to-local, align 4
  %v3_ce70 = urem i32 %v5_ce58, 65536
  store i32 %v3_ce70, i32* @fp, align 4
  %v4_ce74 = inttoptr i32 %v0_ce5c to i32*
  %v5_ce74 = call i32 @function_a054(i32 %v0_ce6c, i32* %v4_ce74, i32 6, i32 %v0_ce68)
  %v0_ce78 = load i32, i32* @r5, align 4
  %v3_ce7c = mul i32 %v5_ce74, 65536
  store i32 %v3_ce7c, i32* @r8, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ce88 = load i32, i32* @r4, align 4
  store i32 %v0_ce88, i32* %r0.global-to-local, align 4
  %v4_ce8c = inttoptr i32 %v0_ce78 to i32*
  %v5_ce8c = call i32 @function_a054(i32 %v0_ce88, i32* %v4_ce8c, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_ce9c = urem i32 %v5_ce8c, 65536
  %v0_cea0 = load i32, i32* @r5, align 4
  %v0_cea4 = load i32, i32* @r4, align 4
  store i32 %v0_cea4, i32* %r0.global-to-local, align 4
  %v4_ceac = inttoptr i32 %v0_cea0 to i32*
  %v5_ceac = call i32 @function_a054(i32 %v0_cea4, i32* %v4_ceac, i32 1, i32 1)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ceb8 = urem i32 %v5_ceac, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_ced4 = call i32 @function_138a0(i32* null)
  %v0_ced8 = load i32, i32* @r8, align 4
  %v3_ced8 = udiv i32 %v0_ced8, 65536
  store i32 %v3_ced8, i32* %r3.global-to-local, align 4
  %v1_cedc = load i32, i32* @r6, align 4
  %v9_cedc = icmp eq i32 %v3_ced8, %v1_cedc
  %v1_cee44 = load i32, i32* @r7, align 4
  %v2_cee45 = add i32 %v1_cee44, %v2_ced4
  store i32 %v2_cee45, i32* %r0.global-to-local, align 4
  br i1 %v9_cedc, label %dec_label_pc_d0c0, label %bb

bb:                                               ; preds = %dec_label_pc_ce04
  %v2_cee0 = mul nuw nsw i32 %v3_ced8, 256
  %v4_cee8 = and i32 %v2_cee0, 65280
  store i32 %v4_cee8, i32* %r3.global-to-local, align 4
  %v5_cef0 = udiv i32 %v0_ced8, 16777216
  %v6_cef0 = or i32 %v4_cee8, %v5_cef0
  br label %dec_label_pc_cef8

dec_label_pc_cef8:                                ; preds = %bb, %dec_label_pc_d0c0
  %storemerge = phi i32 [ %v6_cef0, %bb ], [ %v3_d0c8, %dec_label_pc_d0c0 ]
  store i32 %storemerge, i32* @r7, align 4
  %v0_cef8 = load i32, i32* @sl, align 4
  %tmp47 = icmp slt i32 %v0_cef8, 1
  br i1 %tmp47, label %dec_label_pc_d090, label %dec_label_pc_cf00

dec_label_pc_cf00:                                ; preds = %dec_label_pc_cef8
  %v0_cf00 = load i32, i32* @fp, align 4
  %v3_cf00 = udiv i32 %v0_cf00, 256
  %v1_cf04 = mul i32 %v0_cf00, 256
  %v4_cf08 = and i32 %v1_cf04, 65280
  %v5_cf08 = or i32 %v4_cf08, %v3_cf00
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* @r5, align 4
  %v5_cf18 = trunc i32 %v3_cf00 to i8
  %v3_cf203 = udiv i32 %v5_cf08, 256
  store i32 %v3_cf203, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_cf2c = trunc i32 %v3_cf203 to i8
  store i8 %v4_cf2c, i8* %stack_var_-84, align 1
  %v3_cfd0 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_cf54

dec_label_pc_cf34:                                ; preds = %dec_label_pc_cfb8
  %v0_cf34 = load i32, i32* @r6, align 4
  %v1_cf34 = load i32, i32* @sb, align 4
  %v2_cf34 = add i32 %v1_cf34, %v0_cf34
  %v3_cf34 = inttoptr i32 %v2_cf34 to i32*
  %v4_cf34 = load i32, i32* %v3_cf34, align 4
  store i32 %v4_cf34, i32* %r0.global-to-local, align 4
  %v3_cf40 = inttoptr i32 %v0_cfd4 to %sockaddr*
  %v4_cf40 = call i32 @function_13d18(i32 %v4_cf34, %sockaddr* %v3_cf40, i32 16)
  store i32 %v4_cf40, i32* %r0.global-to-local, align 4
  %v0_cf44 = load i32, i32* @r8, align 4
  %v1_cf44 = load i32, i32* @sl, align 4
  %v9_cf44 = icmp eq i32 %v0_cf44, %v1_cf44
  %v0_cf48 = load i32, i32* @r6, align 4
  %v1_cf48 = add i32 %v0_cf48, 4
  store i32 %v1_cf48, i32* @r6, align 4
  %v0_cf4c = load i32, i32* @r5, align 4
  %v1_cf4c = add i32 %v0_cf4c, 24
  store i32 %v1_cf4c, i32* @r5, align 4
  br i1 %v9_cf44, label %dec_label_pc_d04c, label %dec_label_pc_cf54

dec_label_pc_cf54:                                ; preds = %dec_label_pc_cfe0, %dec_label_pc_cf34, %dec_label_pc_cf00
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_cf60 = call i32 @function_141a8(i32 65535, i32 1)
  store i32 %v2_cf60, i32* %r0.global-to-local, align 4
  store i32 %v2_ce28, i32* %r3.global-to-local, align 4
  %v0_cf6c = load i32, i32* @fp, align 4
  %v9_cf6c = icmp eq i32 %v0_cf6c, 65535
  %v1_cf70 = load i32, i32* @r6, align 4
  %v3_cf70 = add i32 %v1_cf70, %v2_ce28
  %v4_cf70 = inttoptr i32 %v3_cf70 to i32*
  store i32 %v2_cf60, i32* %v4_cf70, align 4
  br i1 %v9_cf6c, label %dec_label_pc_d0ac, label %dec_label_pc_cf78

dec_label_pc_cf78:                                ; preds = %dec_label_pc_cf54
  %v2_cf7c = load i8, i8* %stack_var_-84, align 1
  %v3_cf7c = sext i8 %v2_cf7c to i32
  store i32 %v3_cf7c, i32* %r3.global-to-local, align 4
  %v2_cf80 = load i32, i32* @r5, align 4
  %v3_cf80 = add i32 %v2_cf80, 2
  %v4_cf80 = inttoptr i32 %v3_cf80 to i8*
  store i8 %v5_cf18, i8* %v4_cf80, align 1
  %v0_cf84 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf84 = trunc i32 %v0_cf84 to i8
  %v2_cf84 = load i32, i32* @r5, align 4
  %v3_cf84 = add i32 %v2_cf84, 3
  %v4_cf84 = inttoptr i32 %v3_cf84 to i8*
  store i8 %v1_cf84, i8* %v4_cf84, align 1
  br label %dec_label_pc_cf88

dec_label_pc_cf88:                                ; preds = %dec_label_pc_d0ac, %dec_label_pc_cf78
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cf94 = call i32 @function_13ebc(i32 2, i32 2, i32 17)
  store i32 %v3_cf94, i32* %r0.global-to-local, align 4
  %v7_cf98 = icmp eq i32 %v3_cf94, -1
  %v0_cf9c = load i32, i32* @r8, align 4
  %v1_cf9c = add i32 %v0_cf9c, 1
  store i32 %v1_cf9c, i32* @r8, align 4
  store i32 0, i32* @lr, align 4
  %v1_cfb0 = load i32, i32* @r6, align 4
  %v2_cfb0 = load i32, i32* @sb, align 4
  %v3_cfb0 = add i32 %v2_cfb0, %v1_cfb0
  %v4_cfb0 = inttoptr i32 %v3_cfb0 to i32*
  store i32 %v3_cf94, i32* %v4_cfb0, align 4
  br i1 %v7_cf98, label %dec_label_pc_d0a4.loopexit, label %dec_label_pc_cfb8

dec_label_pc_cfb8:                                ; preds = %dec_label_pc_cf88
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v0_cfd0 = load i32, i32* %r0.global-to-local, align 4
  %v4_cfd0 = call i32 @function_13cec(i32 %v0_cfd0, %sockaddr* %v3_cfd0, i32 16)
  store i32 %v4_cfd0, i32* %r0.global-to-local, align 4
  %v0_cfd4 = load i32, i32* @r5, align 4
  %v1_cfd4 = add i32 %v0_cfd4, 20
  %v2_cfd4 = inttoptr i32 %v1_cfd4 to i8*
  %v3_cfd4 = load i8, i8* %v2_cfd4, align 1
  %v4_cfd4 = zext i8 %v3_cfd4 to i32
  store i32 %v4_cfd4, i32* %r3.global-to-local, align 4
  %tmp51 = icmp ugt i8 %v3_cfd4, 31
  br i1 %tmp51, label %dec_label_pc_cf34, label %dec_label_pc_cfe0

dec_label_pc_cfe0:                                ; preds = %dec_label_pc_cfb8
  %v1_cfe0 = add i32 %v0_cfd4, 16
  %v2_cfe0 = inttoptr i32 %v1_cfe0 to i32*
  %v3_cfe0 = load i32, i32* %v2_cfe0, align 4
  store i32 %v3_cfe0, i32* @r4, align 4
  %v0_cfe4 = call i32 @function_f8c8()
  store i32 %v0_cfe4, i32* %r0.global-to-local, align 4
  %v0_cfe8 = load i32, i32* @r4, align 4
  %v1_cfec = and i32 %v0_cfe8, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_cfec, i32* %r3.global-to-local, align 4
  %v1_cfe8 = udiv i32 %v0_cfe8, 256
  %v3_cff0 = and i32 %v1_cfe8, 65280
  %v3_cff4 = mul i32 %v0_cfe8, 16777216
  %v4_cff8 = mul i32 %v1_cfec, 256
  %v5_cff8 = or i32 %v4_cff8, %v3_cff4
  %v0_cffc = load i32, i32* @r5, align 4
  %v1_cffc = add i32 %v0_cffc, 20
  %v2_cffc = inttoptr i32 %v1_cffc to i8*
  %v3_cffc = load i8, i8* %v2_cffc, align 1
  %v4_cffc = zext i8 %v3_cffc to i32
  %v4_d000 = udiv i32 %v0_cfe8, 16777216
  %v5_d000 = or i32 %v3_cff0, %v4_d000
  %v2_d004 = or i32 %v5_d000, %v5_cff8
  %v7_d008 = lshr i32 %v0_cfe4, %v4_cffc
  %v8_d008 = add i32 %v7_d008, %v2_d004
  %v1_d010 = and i32 %v8_d008, 65280
  store i32 %v1_d010, i32* %r0.global-to-local, align 4
  %v2_d024 = call i32 @llvm.bswap.i32(i32 %v8_d008)
  store i32 %v2_d024, i32* %r3.global-to-local, align 4
  %v2_d028 = add i32 %v0_cffc, 4
  %v3_d028 = inttoptr i32 %v2_d028 to i32*
  store i32 %v2_d024, i32* %v3_d028, align 4
  %v0_d02c = load i32, i32* @r5, align 4
  %v0_d030 = load i32, i32* @r6, align 4
  %v1_d030 = load i32, i32* @sb, align 4
  %v2_d030 = add i32 %v1_d030, %v0_d030
  %v3_d030 = inttoptr i32 %v2_d030 to i32*
  %v4_d030 = load i32, i32* %v3_d030, align 4
  store i32 %v4_d030, i32* %r0.global-to-local, align 4
  %v3_d038 = inttoptr i32 %v0_d02c to %sockaddr*
  %v4_d038 = call i32 @function_13d18(i32 %v4_d030, %sockaddr* %v3_d038, i32 16)
  store i32 %v4_d038, i32* %r0.global-to-local, align 4
  %v0_d03c = load i32, i32* @r8, align 4
  %v1_d03c = load i32, i32* @sl, align 4
  %v9_d03c = icmp eq i32 %v0_d03c, %v1_d03c
  %v0_d040 = load i32, i32* @r6, align 4
  %v1_d040 = add i32 %v0_d040, 4
  store i32 %v1_d040, i32* @r6, align 4
  %v0_d044 = load i32, i32* @r5, align 4
  %v1_d044 = add i32 %v0_d044, 24
  store i32 %v1_d044, i32* @r5, align 4
  br i1 %v9_d03c, label %dec_label_pc_d04c, label %dec_label_pc_cf54

dec_label_pc_d04c:                                ; preds = %dec_label_pc_cfe0, %dec_label_pc_cf34, %dec_label_pc_d090.dec_label_pc_d04c_crit_edge
  %v0_d04c = phi i32 [ %v0_d04c.pre, %dec_label_pc_d090.dec_label_pc_d04c_crit_edge ], [ %v0_d03c, %dec_label_pc_cfe0 ], [ %v0_cf44, %dec_label_pc_cf34 ]
  %tmp48 = icmp slt i32 %v0_d04c, 1
  br i1 %tmp48, label %dec_label_pc_d090, label %dec_label_pc_d054

dec_label_pc_d054:                                ; preds = %dec_label_pc_d04c
  %v2_d058 = icmp eq i32 %v1_ceb8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d058, label %dec_label_pc_d060, label %dec_label_pc_d0d0

dec_label_pc_d060:                                ; preds = %dec_label_pc_d054
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d068

dec_label_pc_d068:                                ; preds = %dec_label_pc_d068, %dec_label_pc_d060
  %v0_d074 = phi i32 [ %v1_d074, %dec_label_pc_d068 ], [ 0, %dec_label_pc_d060 ]
  %v0_d06c = phi i32 [ %v1_d088, %dec_label_pc_d068 ], [ 0, %dec_label_pc_d060 ]
  store i32 %v2_ce28, i32* %r3.global-to-local, align 4
  %v1_d06c = load i32, i32* @sb, align 4
  %v2_d06c = add i32 %v1_d06c, %v0_d06c
  %v3_d06c = inttoptr i32 %v2_d06c to i32*
  %v4_d06c = load i32, i32* %v3_d06c, align 4
  store i32 %v4_d06c, i32* %r0.global-to-local, align 4
  %v2_d070 = add i32 %v0_d06c, %v2_ce28
  %v3_d070 = inttoptr i32 %v2_d070 to i32*
  %v4_d070 = load i32, i32* %v3_d070, align 4
  %v1_d074 = add i32 %v0_d074, 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_d080 = inttoptr i32 %v4_d070 to i32*
  %v5_d080 = call i32 @function_13e2c(i32 %v4_d06c, i32* %v4_d080, i32 %v3_ce9c, i32 16384)
  store i32 %v5_d080, i32* %r0.global-to-local, align 4
  %v1_d084 = load i32, i32* @sl, align 4
  %v9_d084 = icmp eq i32 %v1_d074, %v1_d084
  %v0_d088 = load i32, i32* @r4, align 4
  %v1_d088 = add i32 %v0_d088, 4
  store i32 %v1_d088, i32* @r4, align 4
  br i1 %v9_d084, label %dec_label_pc_d090, label %dec_label_pc_d068

dec_label_pc_d090:                                ; preds = %dec_label_pc_d0d8, %dec_label_pc_d068, %dec_label_pc_d04c, %dec_label_pc_cef8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d094 = call i32 @function_138a0(i32* null)
  store i32 %v2_d094, i32* %r0.global-to-local, align 4
  store i32 %v2_cee45, i32* %r3.global-to-local, align 4
  %v6_d0a0 = icmp slt i32 %v2_cee45, %v2_d094
  br i1 %v6_d0a0, label %dec_label_pc_d0a4, label %dec_label_pc_d090.dec_label_pc_d04c_crit_edge

dec_label_pc_d090.dec_label_pc_d04c_crit_edge:    ; preds = %dec_label_pc_d090
  %v0_d04c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_d04c

dec_label_pc_d0a4.loopexit:                       ; preds = %dec_label_pc_cf88
  %v29_d0a8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d0a4

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_d0a4.loopexit, %dec_label_pc_d090
  %v29_d0a8 = phi i32 [ %v29_d0a8.pre, %dec_label_pc_d0a4.loopexit ], [ %v2_d094, %dec_label_pc_d090 ]
  ret i32 %v29_d0a8

dec_label_pc_d0ac:                                ; preds = %dec_label_pc_cf54
  %v0_d0ac = call i32 @function_f8c8()
  %v1_d0ac = trunc i32 %v0_d0ac to i8
  store i32 %v0_d0ac, i32* %r0.global-to-local, align 4
  %v4_d0b0 = sdiv i32 %v0_d0ac, 256
  store i32 %v4_d0b0, i32* %r3.global-to-local, align 4
  %v1_d0b4 = trunc i32 %v4_d0b0 to i8
  %v2_d0b4 = load i32, i32* @r5, align 4
  %v3_d0b4 = add i32 %v2_d0b4, 3
  %v4_d0b4 = inttoptr i32 %v3_d0b4 to i8*
  store i8 %v1_d0b4, i8* %v4_d0b4, align 1
  %v3_d0b8 = load i32, i32* @r5, align 4
  %v4_d0b8 = add i32 %v3_d0b8, 2
  %v5_d0b8 = inttoptr i32 %v4_d0b8 to i8*
  store i8 %v1_d0ac, i8* %v5_d0b8, align 1
  br label %dec_label_pc_cf88

dec_label_pc_d0c0:                                ; preds = %dec_label_pc_ce04
  %v0_d0c0 = call i32 @function_f8c8()
  %v3_d0c4 = mul i32 %v0_d0c0, 65536
  store i32 %v3_d0c4, i32* %r0.global-to-local, align 4
  %v3_d0c8 = urem i32 %v0_d0c0, 65536
  br label %dec_label_pc_cef8

dec_label_pc_d0d0:                                ; preds = %dec_label_pc_d054
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_d0d8

dec_label_pc_d0d8:                                ; preds = %dec_label_pc_d0d8, %dec_label_pc_d0d0
  %v0_d0dc = phi i32 [ %v1_d114, %dec_label_pc_d0d8 ], [ 0, %dec_label_pc_d0d0 ]
  %v2_d0dc = add i32 %v0_d0dc, %v2_ce28
  %v3_d0dc = inttoptr i32 %v2_d0dc to i32*
  %v4_d0dc = load i32, i32* %v3_d0dc, align 4
  store i32 %v4_d0dc, i32* @r4, align 4
  store i32 %v4_d0dc, i32* %r0.global-to-local, align 4
  %v2_d0e8 = call i32 @function_f97c(i32 %v4_d0dc, i32 %v3_ce9c)
  store i32 %v2_d0e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_d0f4 = load i32, i32* @r4, align 4
  %v4_d0f4 = add i32 %v2_d0f4, %v3_ce9c
  %v5_d0f4 = inttoptr i32 %v4_d0f4 to i8*
  store i8 0, i8* %v5_d0f4, align 1
  %v0_d0f8 = load i32, i32* @r4, align 4
  %v0_d0fc = load i32, i32* @r6, align 4
  %v1_d0fc = load i32, i32* @sb, align 4
  %v2_d0fc = add i32 %v1_d0fc, %v0_d0fc
  %v3_d0fc = inttoptr i32 %v2_d0fc to i32*
  %v4_d0fc = load i32, i32* %v3_d0fc, align 4
  store i32 %v4_d0fc, i32* %r0.global-to-local, align 4
  %v0_d100 = load i32, i32* @r5, align 4
  %v1_d100 = add i32 %v0_d100, 1
  store i32 %v1_d100, i32* @r5, align 4
  %v0_d108 = load i32, i32* %r3.global-to-local, align 4
  %v1_d108 = add i32 %v0_d108, 16384
  store i32 %v1_d108, i32* %r3.global-to-local, align 4
  %v4_d10c = inttoptr i32 %v0_d0f8 to i32*
  %v5_d10c = call i32 @function_13e2c(i32 %v4_d0fc, i32* %v4_d10c, i32 %v3_ce9c, i32 %v1_d108)
  store i32 %v5_d10c, i32* %r0.global-to-local, align 4
  %v0_d110 = load i32, i32* @r5, align 4
  %v1_d110 = load i32, i32* @sl, align 4
  %v9_d110 = icmp eq i32 %v0_d110, %v1_d110
  %v0_d114 = load i32, i32* @r6, align 4
  %v1_d114 = add i32 %v0_d114, 4
  store i32 %v1_d114, i32* @r6, align 4
  br i1 %v9_d110, label %dec_label_pc_d090, label %dec_label_pc_d0d8

; uselistorder directives
  uselistorder i32 %v1_d114, { 1, 0 }
  uselistorder i32 %v0_d0c0, { 1, 0 }
  uselistorder i32 %v4_d0b0, { 1, 0 }
  uselistorder i32 %v0_d0ac, { 0, 2, 1 }
  uselistorder i32 %v1_d088, { 1, 0 }
  uselistorder i32 %v2_d024, { 1, 0 }
  uselistorder i32 %v0_cfe8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cfd4, { 1, 2, 0 }
  uselistorder i32 %v3_cf94, { 1, 0, 2 }
  uselistorder i32 %v3_ced8, { 0, 2, 1 }
  uselistorder i32 %v3_ce9c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_ce28, { 0, 1, 4, 2, 3 }
  uselistorder i32 %v1_ce08, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 6, 4, 5, 7, 21, 9, 8, 11, 10, 14, 12, 13, 15, 18, 20, 22, 19, 24, 23, 17, 16, 1, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder label %dec_label_pc_d04c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cef8, { 1, 0 }
}

define i32 @function_d120(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d120:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_d120 = load i32, i32* @sb, align 4
  %v21_d120 = load i32, i32* @sl, align 4
  %v1_d124 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_d124, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_d140 = urem i32 %arg4, 256
  store i32 %v1_d140, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_d150 = call i32 @function_141a8(i32 %v1_d124, i32 4)
  %v0_d154 = load i32, i32* @r5, align 4
  store i32 %v0_d154, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d160 = load i32, i32* @r7, align 4
  store i32 %v0_d160, i32* %r3.global-to-local, align 4
  %v0_d164 = load i32, i32* @r4, align 4
  store i32 %v0_d164, i32* %r0.global-to-local, align 4
  %v5_d168 = inttoptr i32 %v0_d154 to i32*
  %v6_d168 = call i32 @function_a054(i32 %v0_d164, i32* %v5_d168, i32 2, i32 %v0_d160)
  %v1_d174 = urem i32 %v6_d168, 256
  store i32 %v1_d174, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d180 = load i32, i32* @r5, align 4
  store i32 %v0_d180, i32* %r1.global-to-local, align 4
  %v0_d184 = load i32, i32* @r4, align 4
  store i32 %v0_d184, i32* %r0.global-to-local, align 4
  %v5_d188 = trunc i32 %v6_d168 to i8
  %v6_d18c = inttoptr i32 %v0_d180 to i32*
  %v7_d18c = call i32 @function_a054(i32 %v0_d184, i32* %v6_d18c, i32 3, i32 65535)
  %v0_d190 = load i32, i32* @r5, align 4
  store i32 %v0_d190, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d1a0 = load i32, i32* @r4, align 4
  store i32 %v0_d1a0, i32* %r0.global-to-local, align 4
  %v5_d1a4 = inttoptr i32 %v0_d190 to i32*
  %v6_d1a4 = call i32 @function_a054(i32 %v0_d1a0, i32* %v5_d1a4, i32 4, i32 64)
  %v1_d1ac = urem i32 %v6_d1a4, 256
  store i32 %v1_d1ac, i32* %ip.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r5, align 4
  store i32 %v0_d1b0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d1b8 = load i32, i32* @r7, align 4
  store i32 %v0_d1b8, i32* %r3.global-to-local, align 4
  %v0_d1bc = load i32, i32* @r4, align 4
  store i32 %v0_d1bc, i32* %r0.global-to-local, align 4
  %v5_d1c0 = trunc i32 %v6_d1a4 to i8
  %v6_d1c4 = inttoptr i32 %v0_d1b0 to i32*
  %v7_d1c4 = call i32 @function_a054(i32 %v0_d1bc, i32* %v6_d1c4, i32 5, i32 %v0_d1b8)
  %v1_d1d0 = urem i32 %v7_d1c4, 256
  store i32 %v1_d1d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d1dc = load i32, i32* @r5, align 4
  store i32 %v0_d1dc, i32* %r1.global-to-local, align 4
  %v0_d1e0 = load i32, i32* @r4, align 4
  store i32 %v0_d1e0, i32* %r0.global-to-local, align 4
  %v5_d1e8 = inttoptr i32 %v0_d1dc to i32*
  %v6_d1e8 = call i32 @function_a054(i32 %v0_d1e0, i32* %v5_d1e8, i32 6, i32 65535)
  %v0_d1f4 = load i32, i32* @r5, align 4
  store i32 %v0_d1f4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d200 = load i32, i32* @r4, align 4
  store i32 %v0_d200, i32* %r0.global-to-local, align 4
  %v5_d204 = inttoptr i32 %v0_d1f4 to i32*
  %v6_d204 = call i32 @function_a054(i32 %v0_d200, i32* %v5_d204, i32 7, i32 65535)
  %v0_d208 = load i32, i32* @r5, align 4
  store i32 %v0_d208, i32* %r1.global-to-local, align 4
  %v0_d20c = load i32, i32* @r7, align 4
  store i32 %v0_d20c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_d204, i32* %sb.global-to-local, align 4
  %v0_d218 = load i32, i32* @r4, align 4
  store i32 %v0_d218, i32* %r0.global-to-local, align 4
  %v4_d21c = inttoptr i32 %v0_d208 to i32*
  %v5_d21c = call i32 @function_a054(i32 %v0_d218, i32* %v4_d21c, i32 %v0_d20c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d228 = load i32, i32* @r5, align 4
  store i32 %v0_d228, i32* %r1.global-to-local, align 4
  store i32 %v5_d21c, i32* @sl, align 4
  %v0_d230 = load i32, i32* @r4, align 4
  store i32 %v0_d230, i32* %r0.global-to-local, align 4
  %v4_d234 = inttoptr i32 %v0_d228 to i32*
  %v5_d234 = call i32 @function_a054(i32 %v0_d230, i32* %v4_d234, i32 1, i32 1)
  %v2_d240 = load i32, i32* @global_var_1f238.83, align 4
  store i32 %v2_d240, i32* %r3.global-to-local, align 4
  %v1_d244 = urem i32 %v5_d234, 256
  store i32 %v1_d244, i32* %ip.global-to-local, align 4
  %v0_d248 = load i32, i32* @r5, align 4
  store i32 %v0_d248, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_d250 = load i32, i32* @r4, align 4
  store i32 %v0_d250, i32* %r0.global-to-local, align 4
  %v5_d258 = inttoptr i32 %v0_d248 to i32*
  %v6_d258 = call i32 @function_a054(i32 %v0_d250, i32* %v5_d258, i32 24, i32 %v2_d240)
  store i32 %v6_d258, i32* @fp, align 4
  %v0_d260 = load i32, i32* @r7, align 4
  store i32 %v0_d260, i32* %r0.global-to-local, align 4
  %v1_d264 = inttoptr i32 %v0_d260 to i32*
  %v2_d264 = call i32 @function_138a0(i32* %v1_d264)
  %v1_d268 = load i32, i32* @r6, align 4
  %v2_d268 = add i32 %v1_d268, %v2_d264
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d27c = call i32 @function_13ebc(i32 2, i32 3, i32 17)
  store i32 %v3_d27c, i32* %r0.global-to-local, align 4
  %v7_d280 = icmp eq i32 %v3_d27c, -1
  store i1 %v7_d280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d280, label %dec_label_pc_d6a8, label %dec_label_pc_d28c

dec_label_pc_d28c:                                ; preds = %dec_label_pc_d120
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d294 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d294, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d29c = load i32, i32* @r7, align 4
  store i32 %v0_d29c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d2a8 = call i32 @function_13e8c(i32 %v3_d27c, i32 %v0_d29c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_d2a8, i32* %r0.global-to-local, align 4
  %v7_d2ac = icmp eq i32 %v6_d2a8, -1
  store i1 %v7_d2ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d2ac, label %dec_label_pc_d6b0, label %dec_label_pc_d2b4

dec_label_pc_d2b4:                                ; preds = %dec_label_pc_d28c
  %v0_d2b4 = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_d2c0 = urem i32 %v0_d2b4, 65536
  store i32 %v3_d2c0, i32* %r2.global-to-local, align 4
  %v3_d2c4 = icmp ugt i32 %v3_d2c0, 1459
  %v9_d2c4 = icmp eq i32 %v3_d2c0, 1460
  store i1 %v9_d2c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d2c4, label %bb, label %bb56

bb:                                               ; preds = %dec_label_pc_d2b4
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_d2b4, %bb
  %v0_d2cc = phi i32 [ %v3_d2c0, %dec_label_pc_d2b4 ], [ 1460, %bb ]
  store i32 %v7_d18c, i32* %r1.global-to-local, align 4
  store i32 %v6_d1e8, i32* %r2.global-to-local, align 4
  store i32 %v1_d124, i32* %r3.global-to-local, align 4
  %v0_d2dc = load i32, i32* %sb.global-to-local, align 4
  %v3_d2e0 = mul i32 %v7_d18c, 65536
  store i32 %v3_d2e0, i32* %r0.global-to-local, align 4
  %v3_d2e4 = mul i32 %v6_d1e8, 65536
  store i32 %v3_d2e4, i32* %sl.global-to-local, align 4
  %v3_d2e8 = urem i32 %v7_d18c, 65536
  store i32 %v3_d2e8, i32* @r4, align 4
  %v3_d2ec = urem i32 %v6_d1e8, 65536
  store i32 %v3_d2ec, i32* %sb.global-to-local, align 4
  %v3_d2f0 = urem i32 %v0_d2dc, 65536
  store i32 %v3_d2f0, i32* %ip.global-to-local, align 4
  %v2_d2f4 = icmp eq i32 %v1_d124, 0
  store i1 %v2_d2f4, i1* %cpsr_z.global-to-local, align 1
  %v0_d2f8 = load i32, i32* @r7, align 4
  store i32 %v0_d2f8, i32* %stack_var_-40, align 4
  br i1 %v2_d2f4, label %.dec_label_pc_d468.preheader_crit_edge, label %dec_label_pc_d30c

.dec_label_pc_d468.preheader_crit_edge:           ; preds = %bb56
  %.pre = add nuw nsw i32 %v0_d2cc, 8
  %.pre19 = add nuw nsw i32 %v0_d2cc, 28
  br label %dec_label_pc_d468.preheader

dec_label_pc_d30c:                                ; preds = %bb56
  %v1_d310 = add nuw nsw i32 %v0_d2cc, 28
  %v1_d314 = add nuw nsw i32 %v0_d2cc, 8
  %v1_d318 = urem i32 %v6_d1e8, 256
  %tmp57 = udiv i32 %v7_d18c, 256
  %v3_d324 = urem i32 %tmp57, 256
  %v3_d328 = mul i32 %v1_d314, 65536
  store i32 %v3_d328, i32* @lr, align 4
  %tmp58 = mul nuw nsw i32 %v1_d310, 256
  %v1_d334 = urem i32 %v7_d18c, 256
  %tmp59 = mul nuw nsw i32 %v1_d314, 256
  %v1_d340 = and i32 %tmp58, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_d340, i32* %r3.global-to-local, align 4
  %v4_d344 = mul nuw nsw i32 %v1_d334, 256
  %v5_d344 = or i32 %v4_d344, %v3_d324
  store i32 %v5_d344, i32* %r0.global-to-local, align 4
  %v3_d348 = mul nuw nsw i32 %v1_d318, 256
  store i32 %v3_d348, i32* %r1.global-to-local, align 4
  %tmp60 = udiv i32 %v0_d2dc, 256
  %v3_d34c = urem i32 %tmp60, 256
  %v1_d350 = and i32 %tmp59, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_d350, i32* %ip.global-to-local, align 4
  %v2_d354 = icmp eq i32 %v1_d1d0, 0
  store i1 %v2_d354, i1* %cpsr_z.global-to-local, align 1
  %tmp61 = udiv i32 %v1_d310, 256
  %v4_d358 = urem i32 %tmp61, 256
  %v5_d358 = or i32 %v4_d358, %v1_d340
  store i32 %v5_d358, i32* %r2.global-to-local, align 4
  %v1_d35c = urem i32 %v0_d2dc, 256
  %v5_d360 = trunc i32 %tmp61 to i8
  %v5_d364 = trunc i32 %tmp57 to i8
  %tmp62 = udiv i32 %v6_d1e8, 256
  %v4_d368 = urem i32 %tmp62, 256
  %v5_d368 = or i32 %v4_d368, %v3_d348
  store i32 %v5_d368, i32* @r5, align 4
  %v4_d36c = mul nuw nsw i32 %v1_d35c, 256
  %v5_d36c = or i32 %v4_d36c, %v3_d34c
  store i32 %v5_d36c, i32* @r6, align 4
  %tmp63 = udiv i32 %v1_d314, 256
  %v4_d370 = urem i32 %tmp63, 256
  %v5_d370 = or i32 %v4_d370, %v1_d350
  store i32 %v5_d370, i32* %sb.global-to-local, align 4
  br i1 %v2_d354, label %dec_label_pc_d378, label %dec_label_pc_d6bc

dec_label_pc_d378:                                ; preds = %dec_label_pc_d30c
  %v3_d37822 = udiv i32 %v1_d340, 256
  store i32 %v3_d37822, i32* %ip.global-to-local, align 4
  store i32 %v1_d334, i32* %r0.global-to-local, align 4
  store i32 %v1_d318, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v1_d35c, i32* %sl.global-to-local, align 4
  %v3_d39823 = udiv i32 %v1_d350, 256
  store i32 %v3_d39823, i32* @r7, align 4
  %v4_d3f0 = sext i8 %v5_d1c0 to i32
  %sext10 = mul i32 %v1_d340, 65536
  %v4_d420 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v7_d18c, 16777216
  %v4_d42c = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v6_d1e8, 16777216
  %v4_d430 = sdiv i32 %sext12, 16777216
  %v4_d438 = sext i8 %v5_d364 to i32
  %v4_d414 = sext i8 %v5_d360 to i32
  br label %dec_label_pc_d39c

dec_label_pc_d39c:                                ; preds = %dec_label_pc_d39c, %dec_label_pc_d378
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d3a8 = call i32 @function_141a8(i32 1510, i32 1)
  store i32 %v2_d3a8, i32* %r0.global-to-local, align 4
  store i32 %v2_d150, i32* %r3.global-to-local, align 4
  %v2_d3b4 = load i32, i32* @r4, align 4
  %v5_d3b4 = mul i32 %v2_d3b4, 4
  %v6_d3b4 = add i32 %v5_d3b4, %v2_d150
  %v7_d3b4 = inttoptr i32 %v6_d3b4 to i32*
  store i32 %v2_d3a8, i32* %v7_d3b4, align 4
  %v3_d3b8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3b8, i32* %r2.global-to-local, align 4
  %v0_d3bc = load i32, i32* %r3.global-to-local, align 4
  %v4_d3bc = mul i32 %v3_d3b8, 4
  %v5_d3bc = add i32 %v0_d3bc, %v4_d3bc
  %v6_d3bc = inttoptr i32 %v5_d3bc to i32*
  %v7_d3bc = load i32, i32* %v6_d3bc, align 4
  store i32 %v7_d3bc, i32* %r1.global-to-local, align 4
  %v1_d3c0 = inttoptr i32 %v7_d3bc to i8*
  %v2_d3c0 = load i8, i8* %v1_d3c0, align 1
  %tmp = urem i8 %v2_d3c0, 16
  %v1_d3c4 = zext i8 %tmp to i32
  %v1_d3c8 = or i32 %v1_d3c4, 64
  store i32 %v1_d3c8, i32* %r3.global-to-local, align 4
  %v1_d3cc = trunc i32 %v1_d3c8 to i8
  store i8 %v1_d3cc, i8* %v1_d3c0, align 1
  %v0_d3d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3d0 = inttoptr i32 %v0_d3d0 to i8*
  %v2_d3d0 = load i8, i8* %v1_d3d0, align 1
  %v3_d3d0 = zext i8 %v2_d3d0 to i32
  %v1_d3d4 = and i32 %v3_d3d0, 240
  %v1_d3d8 = or i32 %v1_d3d4, 5
  store i32 %v1_d3d8, i32* %r2.global-to-local, align 4
  %v3_d3e0 = add i32 %v0_d3d0, 9
  %v4_d3e0 = inttoptr i32 %v3_d3e0 to i8*
  store i8 17, i8* %v4_d3e0, align 1
  %v0_d3e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3e4 = trunc i32 %v0_d3e4 to i8
  %v2_d3e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3e4 = inttoptr i32 %v2_d3e4 to i8*
  store i8 %v1_d3e4, i8* %v3_d3e4, align 1
  %v2_d3ec = load i32, i32* %r1.global-to-local, align 4
  %v3_d3ec = add i32 %v2_d3ec, 1
  %v4_d3ec = inttoptr i32 %v3_d3ec to i8*
  store i8 %v5_d188, i8* %v4_d3ec, align 1
  store i32 %v4_d3f0, i32* %ip.global-to-local, align 4
  %v2_d3f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3f4 = add i32 %v2_d3f4, 8
  %v4_d3f4 = inttoptr i32 %v3_d3f4 to i8*
  store i8 %v5_d1c0, i8* %v4_d3f4, align 1
  %v3_d3f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3f8, i32* %r2.global-to-local, align 4
  %v3_d3fc = mul i32 %v3_d3f8, 32
  store i32 %v3_d3fc, i32* %r3.global-to-local, align 4
  %v0_d400 = load i32, i32* @fp, align 4
  %v1_d400 = load i32, i32* %r1.global-to-local, align 4
  %v2_d400 = add i32 %v1_d400, 12
  %v3_d400 = inttoptr i32 %v2_d400 to i32*
  store i32 %v0_d400, i32* %v3_d400, align 4
  %v0_d404 = load i32, i32* %r3.global-to-local, align 4
  %v1_d404 = load i32, i32* %r2.global-to-local, align 4
  %tmp66 = mul i32 %v1_d404, -8
  %v5_d404 = add i32 %v0_d404, %tmp66
  %v1_d408 = load i32, i32* @r8, align 4
  %v2_d408 = add i32 %v5_d404, %v1_d408
  store i32 %v2_d408, i32* %r3.global-to-local, align 4
  %v1_d40c = add i32 %v2_d408, 16
  %v2_d40c = inttoptr i32 %v1_d40c to i32*
  %v3_d40c = load i32, i32* %v2_d40c, align 4
  %v1_d410 = add i32 %v1_d404, 1
  store i32 %v1_d410, i32* @r4, align 4
  store i32 %v4_d414, i32* %ip.global-to-local, align 4
  store i32 %v1_d124, i32* %r2.global-to-local, align 4
  %v1_d41c = load i32, i32* %r1.global-to-local, align 4
  %v2_d41c = add i32 %v1_d41c, 16
  %v3_d41c = inttoptr i32 %v2_d41c to i32*
  store i32 %v3_d40c, i32* %v3_d41c, align 4
  store i32 %v4_d420, i32* %r0.global-to-local, align 4
  %v0_d424 = load i32, i32* %ip.global-to-local, align 4
  %v1_d424 = trunc i32 %v0_d424 to i8
  %v2_d424 = load i32, i32* %r1.global-to-local, align 4
  %v3_d424 = add i32 %v2_d424, 2
  %v4_d424 = inttoptr i32 %v3_d424 to i8*
  store i8 %v1_d424, i8* %v4_d424, align 1
  %v0_d428 = load i32, i32* %r0.global-to-local, align 4
  %v1_d428 = trunc i32 %v0_d428 to i8
  %v2_d428 = load i32, i32* %r1.global-to-local, align 4
  %v3_d428 = add i32 %v2_d428, 3
  %v4_d428 = inttoptr i32 %v3_d428 to i8*
  store i8 %v1_d428, i8* %v4_d428, align 1
  store i32 %v4_d42c, i32* %ip.global-to-local, align 4
  store i32 %v4_d430, i32* %r0.global-to-local, align 4
  %v0_d434 = load i32, i32* @r4, align 4
  %v1_d434 = load i32, i32* %r2.global-to-local, align 4
  %v9_d434 = icmp eq i32 %v0_d434, %v1_d434
  store i1 %v9_d434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d438, i32* %r2.global-to-local, align 4
  %v0_d43c = load i32, i32* %r1.global-to-local, align 4
  %v1_d43c = add i32 %v0_d43c, 20
  store i32 %v1_d43c, i32* %r3.global-to-local, align 4
  %v3_d440 = add i32 %v0_d43c, 4
  %v4_d440 = inttoptr i32 %v3_d440 to i8*
  store i8 %v5_d364, i8* %v4_d440, align 1
  %v0_d444 = load i32, i32* %ip.global-to-local, align 4
  %v1_d444 = trunc i32 %v0_d444 to i8
  %v2_d444 = load i32, i32* %r1.global-to-local, align 4
  %v3_d444 = add i32 %v2_d444, 5
  %v4_d444 = inttoptr i32 %v3_d444 to i8*
  store i8 %v1_d444, i8* %v4_d444, align 1
  %v0_d448 = load i32, i32* @r5, align 4
  %v1_d448 = trunc i32 %v0_d448 to i8
  %v2_d448 = load i32, i32* %r1.global-to-local, align 4
  %v3_d448 = add i32 %v2_d448, 20
  %v4_d448 = inttoptr i32 %v3_d448 to i8*
  store i8 %v1_d448, i8* %v4_d448, align 1
  %v0_d44c = load i32, i32* @r7, align 4
  %v1_d44c = trunc i32 %v0_d44c to i8
  %v2_d44c = load i32, i32* %r3.global-to-local, align 4
  %v3_d44c = add i32 %v2_d44c, 5
  %v4_d44c = inttoptr i32 %v3_d44c to i8*
  store i8 %v1_d44c, i8* %v4_d44c, align 1
  %v0_d450 = load i32, i32* %r0.global-to-local, align 4
  %v1_d450 = trunc i32 %v0_d450 to i8
  %v2_d450 = load i32, i32* %r3.global-to-local, align 4
  %v3_d450 = add i32 %v2_d450, 1
  %v4_d450 = inttoptr i32 %v3_d450 to i8*
  store i8 %v1_d450, i8* %v4_d450, align 1
  %v0_d454 = load i32, i32* @r6, align 4
  %v1_d454 = trunc i32 %v0_d454 to i8
  %v2_d454 = load i32, i32* %r3.global-to-local, align 4
  %v3_d454 = add i32 %v2_d454, 2
  %v4_d454 = inttoptr i32 %v3_d454 to i8*
  store i8 %v1_d454, i8* %v4_d454, align 1
  %v0_d458 = load i32, i32* %sl.global-to-local, align 4
  %v1_d458 = trunc i32 %v0_d458 to i8
  %v2_d458 = load i32, i32* %r3.global-to-local, align 4
  %v3_d458 = add i32 %v2_d458, 3
  %v4_d458 = inttoptr i32 %v3_d458 to i8*
  store i8 %v1_d458, i8* %v4_d458, align 1
  %v0_d45c = load i32, i32* %sb.global-to-local, align 4
  %v1_d45c = trunc i32 %v0_d45c to i8
  %v2_d45c = load i32, i32* %r3.global-to-local, align 4
  %v3_d45c = add i32 %v2_d45c, 4
  %v4_d45c = inttoptr i32 %v3_d45c to i8*
  store i8 %v1_d45c, i8* %v4_d45c, align 1
  %v0_d460 = load i32, i32* @r4, align 4
  store i32 %v0_d460, i32* %stack_var_-40, align 4
  %v5_d464 = icmp slt i32 %v0_d434, %v1_d434
  br i1 %v5_d464, label %dec_label_pc_d39c, label %dec_label_pc_d468.preheader

dec_label_pc_d468.preheader:                      ; preds = %dec_label_pc_d6e8, %dec_label_pc_d39c, %.dec_label_pc_d468.preheader_crit_edge
  %v1_d48c.pre-phi = phi i32 [ %.pre19, %.dec_label_pc_d468.preheader_crit_edge ], [ %v1_d310, %dec_label_pc_d39c ], [ %v1_d310, %dec_label_pc_d6e8 ]
  %v1_d488.pre-phi = phi i32 [ %.pre, %.dec_label_pc_d468.preheader_crit_edge ], [ %v1_d314, %dec_label_pc_d39c ], [ %v1_d314, %dec_label_pc_d6e8 ]
  %v3_d618 = icmp eq i32 %v3_d2e8, 65535
  %v2_d4cc = icmp eq i32 %v1_d244, 0
  br label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d468.preheader, %dec_label_pc_d694
  store i32 %v1_d124, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_d2f4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_d2f4, label %dec_label_pc_d694, label %dec_label_pc_d47c

dec_label_pc_d47c:                                ; preds = %dec_label_pc_d468
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_d2cc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %v1_d488.pre-phi, i32* @sb, align 4
  store i32 %v1_d48c.pre-phi, i32* @sl, align 4
  br label %dec_label_pc_d580

dec_label_pc_d494:                                ; preds = %dec_label_pc_d580
  %v0_d494 = load i32, i32* @fp, align 4
  %v7_d494 = icmp eq i32 %v0_d494, -1
  store i1 %v7_d494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d494, label %dec_label_pc_d608, label %dec_label_pc_d49c

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d5a4, %dec_label_pc_d494
  store i32 %v3_d2e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d618, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d618, label %dec_label_pc_d624, label %dec_label_pc_d4b0

dec_label_pc_d4b0:                                ; preds = %dec_label_pc_d608.dec_label_pc_d4b0_crit_edge, %dec_label_pc_d49c
  %v1_d4b4 = phi i32 [ %v1_d4b4.pre, %dec_label_pc_d608.dec_label_pc_d4b0_crit_edge ], [ 65535, %dec_label_pc_d49c ]
  store i32 %v3_d2ec, i32* %r0.global-to-local, align 4
  %v9_d4b4 = icmp eq i32 %v3_d2ec, %v1_d4b4
  store i1 %v9_d4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4b4, label %dec_label_pc_d640, label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d624.dec_label_pc_d4bc_crit_edge, %dec_label_pc_d4b0
  %v1_d4c0 = phi i32 [ %v1_d4c0.pre, %dec_label_pc_d624.dec_label_pc_d4bc_crit_edge ], [ %v1_d4b4, %dec_label_pc_d4b0 ]
  store i32 %v3_d2f0, i32* %r1.global-to-local, align 4
  %v9_d4c0 = icmp eq i32 %v3_d2f0, %v1_d4c0
  store i1 %v9_d4c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4c0, label %dec_label_pc_d65c, label %dec_label_pc_d4c8

dec_label_pc_d4c8:                                ; preds = %dec_label_pc_d640, %dec_label_pc_d4bc
  store i32 %v1_d244, i32* %r2.global-to-local, align 4
  store i1 %v2_d4cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4cc, label %dec_label_pc_d4d4, label %dec_label_pc_d678

dec_label_pc_d4d4:                                ; preds = %dec_label_pc_d4c8, %dec_label_pc_d65c, %dec_label_pc_d678
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d4d8 = load i32, i32* @r7, align 4
  %v1_d4d8 = trunc i32 %v0_d4d8 to i8
  %v2_d4d8 = load i32, i32* @r5, align 4
  %v3_d4d8 = add i32 %v2_d4d8, 10
  %v4_d4d8 = inttoptr i32 %v3_d4d8 to i8*
  store i8 %v1_d4d8, i8* %v4_d4d8, align 1
  %v0_d4dc = load i32, i32* @r7, align 4
  %v1_d4dc = trunc i32 %v0_d4dc to i8
  %v2_d4dc = load i32, i32* @r5, align 4
  %v3_d4dc = add i32 %v2_d4dc, 11
  %v4_d4dc = inttoptr i32 %v3_d4dc to i8*
  store i8 %v1_d4dc, i8* %v4_d4dc, align 1
  %v0_d4e0 = load i32, i32* @r5, align 4
  store i32 %v0_d4e0, i32* @r0, align 4
  %v2_d4e4 = call i32 @function_e498(i32 %v0_d4e0, i32 20)
  %v3_d4e4 = trunc i32 %v2_d4e4 to i8
  store i32 %v2_d4e4, i32* %r0.global-to-local, align 4
  %v4_d4e8 = sdiv i32 %v2_d4e4, 256
  store i32 %v4_d4e8, i32* %r3.global-to-local, align 4
  %v1_d4ec = trunc i32 %v4_d4e8 to i8
  %v2_d4ec = load i32, i32* @r5, align 4
  %v3_d4ec = add i32 %v2_d4ec, 11
  %v4_d4ec = inttoptr i32 %v3_d4ec to i8*
  store i8 %v1_d4ec, i8* %v4_d4ec, align 1
  %v3_d4f0 = load i32, i32* @r5, align 4
  %v4_d4f0 = add i32 %v3_d4f0, 10
  %v5_d4f0 = inttoptr i32 %v4_d4f0 to i8*
  store i8 %v3_d4e4, i8* %v5_d4f0, align 1
  %v0_d4f4 = load i32, i32* @r7, align 4
  %v1_d4f4 = trunc i32 %v0_d4f4 to i8
  %v2_d4f4 = load i32, i32* @r6, align 4
  %v3_d4f4 = add i32 %v2_d4f4, 6
  %v4_d4f4 = inttoptr i32 %v3_d4f4 to i8*
  store i8 %v1_d4f4, i8* %v4_d4f4, align 1
  %v0_d4f8 = load i32, i32* @r7, align 4
  %v1_d4f8 = trunc i32 %v0_d4f8 to i8
  %v2_d4f8 = load i32, i32* @r6, align 4
  %v3_d4f8 = add i32 %v2_d4f8, 7
  %v4_d4f8 = inttoptr i32 %v3_d4f8 to i8*
  store i8 %v1_d4f8, i8* %v4_d4f8, align 1
  %v0_d4fc = load i32, i32* @r5, align 4
  %v1_d4fc = add i32 %v0_d4fc, 24
  %v2_d4fc = inttoptr i32 %v1_d4fc to i8*
  %v3_d4fc = load i8, i8* %v2_d4fc, align 1
  %v4_d4fc = zext i8 %v3_d4fc to i32
  store i32 %v4_d4fc, i32* %r3.global-to-local, align 4
  %v1_d500 = add i32 %v0_d4fc, 25
  %v2_d500 = inttoptr i32 %v1_d500 to i8*
  %v3_d500 = load i8, i8* %v2_d500, align 1
  %v4_d500 = zext i8 %v3_d500 to i32
  %v0_d504 = load i32, i32* @r6, align 4
  store i32 %v0_d504, i32* @r1, align 4
  %v4_d508 = mul nuw nsw i32 %v4_d500, 256
  %v5_d508 = or i32 %v4_d508, %v4_d4fc
  store i32 %v5_d508, i32* %r2.global-to-local, align 4
  store i32 %v0_d4fc, i32* %r0.global-to-local, align 4
  %v0_d510 = load i32, i32* @sb, align 4
  store i32 %v0_d510, i32* %r3.global-to-local, align 4
  %v4_d514 = call i32 @function_e4f4(i32 %v0_d4fc, i32 %v0_d504, i32 %v5_d508, i32 %v0_d510)
  %v5_d514 = trunc i32 %v4_d514 to i8
  store i32 %v4_d514, i32* %r0.global-to-local, align 4
  %v4_d51824 = udiv i32 %v4_d514, 256
  %v1_d51c = trunc i32 %v4_d51824 to i8
  %v2_d51c = load i32, i32* @r6, align 4
  %v3_d51c = add i32 %v2_d51c, 7
  %v4_d51c = inttoptr i32 %v3_d51c to i8*
  store i8 %v1_d51c, i8* %v4_d51c, align 1
  %v3_d520 = load i32, i32* @r6, align 4
  %v4_d520 = add i32 %v3_d520, 6
  %v5_d520 = inttoptr i32 %v4_d520 to i8*
  store i8 %v5_d514, i8* %v5_d520, align 1
  %v3_d524 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d524, i32* %r3.global-to-local, align 4
  %v0_d528 = load i32, i32* @r5, align 4
  %v1_d528 = add i32 %v0_d528, 20
  %v2_d528 = inttoptr i32 %v1_d528 to i32*
  %v3_d528 = load i32, i32* %v2_d528, align 4
  %v3_d530 = udiv i32 %v3_d528, 65536
  store i32 %v3_d530, i32* %r2.global-to-local, align 4
  %v5_d534 = mul i32 %v3_d524, 24
  %v1_d538 = load i32, i32* @r8, align 4
  %v2_d538 = add i32 %v1_d538, %v5_d534
  store i32 %v2_d538, i32* %ip.global-to-local, align 4
  %v3_d53c21 = udiv i32 %v3_d528, 16777216
  %v1_d540 = trunc i32 %v3_d53c21 to i8
  %v3_d540 = add i32 %v2_d538, 3
  %v4_d540 = inttoptr i32 %v3_d540 to i8*
  store i8 %v1_d540, i8* %v4_d540, align 1
  %v0_d544 = load i32, i32* %r2.global-to-local, align 4
  %v1_d544 = trunc i32 %v0_d544 to i8
  %v2_d544 = load i32, i32* %ip.global-to-local, align 4
  %v3_d544 = add i32 %v2_d544, 2
  %v4_d544 = inttoptr i32 %v3_d544 to i8*
  store i8 %v1_d544, i8* %v4_d544, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d550 = load i32, i32* @r5, align 4
  store i32 %v0_d550, i32* %r1.global-to-local, align 4
  store i32 %v3_d27c, i32* %r0.global-to-local, align 4
  %v0_d558 = load i32, i32* @sl, align 4
  store i32 %v0_d558, i32* %r2.global-to-local, align 4
  %v0_d560 = load i32, i32* %ip.global-to-local, align 4
  %v6_d564 = inttoptr i32 %v0_d550 to i32*
  %v7_d564 = call i32 @function_13e58(i32 %v3_d27c, i32* %v6_d564, i32 %v0_d558, i32 16384, i32 %v0_d560, i32 16)
  %v3_d568 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d568, i32* %r3.global-to-local, align 4
  store i32 %v1_d124, i32* @r4, align 4
  %v1_d570 = add i32 %v3_d568, 1
  store i32 %v1_d570, i32* %r0.global-to-local, align 4
  %v9_d574 = icmp eq i32 %v1_d570, %v1_d124
  store i1 %v9_d574, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d570, i32* %stack_var_-40, align 4
  %v6_d57c = icmp slt i32 %v1_d570, %v1_d124
  br i1 %v6_d57c, label %dec_label_pc_d580, label %dec_label_pc_d694

dec_label_pc_d580:                                ; preds = %dec_label_pc_d4d4, %dec_label_pc_d47c
  %v1_d594 = phi i32 [ %v1_d570, %dec_label_pc_d4d4 ], [ 0, %dec_label_pc_d47c ]
  %v5_d584 = mul i32 %v1_d594, 24
  %v1_d588 = load i32, i32* @r8, align 4
  %v2_d588 = add i32 %v1_d588, %v5_d584
  store i32 %v2_d588, i32* %r3.global-to-local, align 4
  %v1_d590 = add i32 %v2_d588, 20
  %v2_d590 = inttoptr i32 %v1_d590 to i8*
  %v3_d590 = load i8, i8* %v2_d590, align 1
  %v4_d590 = zext i8 %v3_d590 to i32
  store i32 %v4_d590, i32* %r2.global-to-local, align 4
  %v4_d594 = mul i32 %v1_d594, 4
  %v5_d594 = add i32 %v4_d594, %v2_d150
  %v6_d594 = inttoptr i32 %v5_d594 to i32*
  %v7_d594 = load i32, i32* %v6_d594, align 4
  store i32 %v7_d594, i32* @r5, align 4
  %v2_d598 = icmp ugt i8 %v3_d590, 30
  %v7_d598 = icmp eq i8 %v3_d590, 31
  store i1 %v7_d598, i1* %cpsr_z.global-to-local, align 1
  %v1_d59c = add i32 %v7_d594, 20
  store i32 %v1_d59c, i32* @r6, align 4
  %v2_d5a0 = xor i1 %v7_d598, true
  %v3_d5a0 = and i1 %v2_d598, %v2_d5a0
  br i1 %v3_d5a0, label %dec_label_pc_d494, label %dec_label_pc_d5a4

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d580
  %v1_d5a4 = add i32 %v2_d588, 16
  %v2_d5a4 = inttoptr i32 %v1_d5a4 to i32*
  %v3_d5a4 = load i32, i32* %v2_d5a4, align 4
  %v0_d5a8 = call i32 @function_f8c8()
  store i32 %v0_d5a8, i32* %r0.global-to-local, align 4
  %v3_d5ac = load i32, i32* %stack_var_-40, align 4
  %v5_d5b4 = mul i32 %v3_d5ac, 24
  %v1_d5bc = load i32, i32* @r8, align 4
  %v2_d5bc = add i32 %v1_d5bc, %v5_d5b4
  store i32 %v2_d5bc, i32* %r1.global-to-local, align 4
  %v1_d5c0 = and i32 %v3_d5a4, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_d5c0, i32* %r3.global-to-local, align 4
  %v1_d5b8 = udiv i32 %v3_d5a4, 256
  %v3_d5c4 = and i32 %v1_d5b8, 65280
  store i32 %v3_d5c4, i32* %r2.global-to-local, align 4
  %v3_d5c8 = mul i32 %v3_d5a4, 16777216
  store i32 %v3_d5c8, i32* %ip.global-to-local, align 4
  %v1_d5cc = add i32 %v2_d5bc, 20
  %v2_d5cc = inttoptr i32 %v1_d5cc to i8*
  %v3_d5cc = load i8, i8* %v2_d5cc, align 1
  %v4_d5cc = zext i8 %v3_d5cc to i32
  %v4_d5d0 = mul i32 %v1_d5c0, 256
  %v5_d5d0 = or i32 %v4_d5d0, %v3_d5c8
  store i32 %v5_d5d0, i32* %ip.global-to-local, align 4
  %v4_d5d4 = udiv i32 %v3_d5a4, 16777216
  %v5_d5d4 = or i32 %v3_d5c4, %v4_d5d4
  %v2_d5d8 = or i32 %v5_d5d4, %v5_d5d0
  %v7_d5dc = lshr i32 %v0_d5a8, %v4_d5cc
  %v8_d5dc = add i32 %v7_d5dc, %v2_d5d8
  store i32 %v8_d5dc, i32* %r2.global-to-local, align 4
  %v3_d5e8 = mul i32 %v8_d5dc, 16777216
  %v1_d5ec = and i32 %v8_d5dc, 65280
  store i32 %v1_d5ec, i32* %r0.global-to-local, align 4
  %v4_d5f0 = mul nuw nsw i32 %v1_d5ec, 256
  %v5_d5f0 = or i32 %v4_d5f0, %v3_d5e8
  store i32 %v5_d5f0, i32* %r1.global-to-local, align 4
  %v2_d5f8 = call i32 @llvm.bswap.i32(i32 %v8_d5dc)
  store i32 %v2_d5f8, i32* %r3.global-to-local, align 4
  %v0_d5fc = load i32, i32* @fp, align 4
  %v3_d5fc = icmp eq i32 %v0_d5fc, -1
  %v8_d5fc = icmp eq i32 %v0_d5fc, -1
  store i1 %v8_d5fc, i1* %cpsr_z.global-to-local, align 1
  %v1_d600 = load i32, i32* @r5, align 4
  %v2_d600 = add i32 %v1_d600, 16
  %v3_d600 = inttoptr i32 %v2_d600 to i32*
  store i32 %v2_d5f8, i32* %v3_d600, align 4
  br i1 %v3_d5fc, label %dec_label_pc_d608, label %dec_label_pc_d49c

dec_label_pc_d608:                                ; preds = %dec_label_pc_d5a4, %dec_label_pc_d494
  %v0_d608 = call i32 @function_f8c8()
  store i32 %v0_d608, i32* %r0.global-to-local, align 4
  store i32 %v3_d2e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d618, i1* %cpsr_z.global-to-local, align 1
  %v1_d61c = load i32, i32* @r5, align 4
  %v2_d61c = add i32 %v1_d61c, 12
  %v3_d61c = inttoptr i32 %v2_d61c to i32*
  store i32 %v0_d608, i32* %v3_d61c, align 4
  br i1 %v3_d618, label %dec_label_pc_d624, label %dec_label_pc_d608.dec_label_pc_d4b0_crit_edge

dec_label_pc_d608.dec_label_pc_d4b0_crit_edge:    ; preds = %dec_label_pc_d608
  %v1_d4b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4b0

dec_label_pc_d624:                                ; preds = %dec_label_pc_d608, %dec_label_pc_d49c
  %v0_d624 = call i32 @function_f8c8()
  %v1_d624 = trunc i32 %v0_d624 to i8
  %v4_d628 = sdiv i32 %v0_d624, 256
  store i32 %v4_d628, i32* %r3.global-to-local, align 4
  %v3_d62c = load i32, i32* @r5, align 4
  %v4_d62c = add i32 %v3_d62c, 4
  %v5_d62c = inttoptr i32 %v4_d62c to i8*
  store i8 %v1_d624, i8* %v5_d62c, align 1
  store i32 %v3_d2ec, i32* %r0.global-to-local, align 4
  %v1_d634 = load i32, i32* @r4, align 4
  %v9_d634 = icmp eq i32 %v3_d2ec, %v1_d634
  store i1 %v9_d634, i1* %cpsr_z.global-to-local, align 1
  %v0_d638 = load i32, i32* %r3.global-to-local, align 4
  %v1_d638 = trunc i32 %v0_d638 to i8
  %v2_d638 = load i32, i32* @r5, align 4
  %v3_d638 = add i32 %v2_d638, 5
  %v4_d638 = inttoptr i32 %v3_d638 to i8*
  store i8 %v1_d638, i8* %v4_d638, align 1
  %v0_d63c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d63c, label %dec_label_pc_d640, label %dec_label_pc_d624.dec_label_pc_d4bc_crit_edge

dec_label_pc_d624.dec_label_pc_d4bc_crit_edge:    ; preds = %dec_label_pc_d624
  %v1_d4c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4bc

dec_label_pc_d640:                                ; preds = %dec_label_pc_d624, %dec_label_pc_d4b0
  %v0_d640 = call i32 @function_f8c8()
  %v1_d640 = trunc i32 %v0_d640 to i8
  store i32 %v0_d640, i32* %r0.global-to-local, align 4
  store i32 %v3_d2f0, i32* %r1.global-to-local, align 4
  %v4_d648 = sdiv i32 %v0_d640, 256
  store i32 %v4_d648, i32* %r3.global-to-local, align 4
  %v1_d64c = load i32, i32* @r4, align 4
  %v9_d64c = icmp eq i32 %v3_d2f0, %v1_d64c
  store i1 %v9_d64c, i1* %cpsr_z.global-to-local, align 1
  %v3_d650 = load i32, i32* @r5, align 4
  %v4_d650 = add i32 %v3_d650, 20
  %v5_d650 = inttoptr i32 %v4_d650 to i8*
  store i8 %v1_d640, i8* %v5_d650, align 1
  %v0_d654 = load i32, i32* %r3.global-to-local, align 4
  %v1_d654 = trunc i32 %v0_d654 to i8
  %v2_d654 = load i32, i32* @r6, align 4
  %v3_d654 = add i32 %v2_d654, 1
  %v4_d654 = inttoptr i32 %v3_d654 to i8*
  store i8 %v1_d654, i8* %v4_d654, align 1
  %v0_d658 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d658, label %dec_label_pc_d65c, label %dec_label_pc_d4c8

dec_label_pc_d65c:                                ; preds = %dec_label_pc_d640, %dec_label_pc_d4bc
  %v0_d65c = call i32 @function_f8c8()
  %v1_d65c = trunc i32 %v0_d65c to i8
  store i32 %v0_d65c, i32* %r0.global-to-local, align 4
  store i32 %v1_d244, i32* %r2.global-to-local, align 4
  %v4_d664 = sdiv i32 %v0_d65c, 256
  store i32 %v4_d664, i32* %r3.global-to-local, align 4
  store i1 %v2_d4cc, i1* %cpsr_z.global-to-local, align 1
  %v1_d66c = trunc i32 %v4_d664 to i8
  %v2_d66c = load i32, i32* @r6, align 4
  %v3_d66c = add i32 %v2_d66c, 3
  %v4_d66c = inttoptr i32 %v3_d66c to i8*
  store i8 %v1_d66c, i8* %v4_d66c, align 1
  %v3_d670 = load i32, i32* @r6, align 4
  %v4_d670 = add i32 %v3_d670, 2
  %v5_d670 = inttoptr i32 %v4_d670 to i8*
  store i8 %v1_d65c, i8* %v5_d670, align 1
  %v0_d674 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d674, label %dec_label_pc_d4d4, label %dec_label_pc_d678

dec_label_pc_d678:                                ; preds = %dec_label_pc_d4c8, %dec_label_pc_d65c
  %v0_d678 = load i32, i32* @r5, align 4
  %v1_d678 = add i32 %v0_d678, 28
  store i32 %v1_d678, i32* @r4, align 4
  store i32 %v1_d678, i32* %r0.global-to-local, align 4
  store i32 %v0_d2cc, i32* %r1.global-to-local, align 4
  %v2_d684 = call i32 @function_f97c(i32 %v1_d678, i32 %v0_d2cc)
  store i32 %v2_d684, i32* %r0.global-to-local, align 4
  store i32 %v0_d2cc, i32* %r3.global-to-local, align 4
  %v0_d68c = load i32, i32* @r7, align 4
  %v1_d68c = trunc i32 %v0_d68c to i8
  %v2_d68c = load i32, i32* @r4, align 4
  %v4_d68c = add i32 %v2_d68c, %v0_d2cc
  %v5_d68c = inttoptr i32 %v4_d68c to i8*
  store i8 %v1_d68c, i8* %v5_d68c, align 1
  br label %dec_label_pc_d4d4

dec_label_pc_d694:                                ; preds = %dec_label_pc_d4d4, %dec_label_pc_d468
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d698 = call i32 @function_138a0(i32* null)
  store i32 %v2_d698, i32* %r0.global-to-local, align 4
  store i32 %v2_d268, i32* %sb.global-to-local, align 4
  %v9_d6a0 = icmp eq i32 %v2_d268, %v2_d698
  store i1 %v9_d6a0, i1* %cpsr_z.global-to-local, align 1
  %v6_d6a4 = icmp slt i32 %v2_d268, %v2_d698
  br i1 %v6_d6a4, label %dec_label_pc_d6a8, label %dec_label_pc_d468

dec_label_pc_d6a8:                                ; preds = %dec_label_pc_d694, %dec_label_pc_d120, %dec_label_pc_d6b0
  %v29_d6ac = phi i32 [ %v3_d27c, %dec_label_pc_d120 ], [ %v1_d6b4, %dec_label_pc_d6b0 ], [ %v2_d698, %dec_label_pc_d694 ]
  store i32 %v18_d120, i32* %sb.global-to-local, align 4
  store i32 %v21_d120, i32* %sl.global-to-local, align 4
  ret i32 %v29_d6ac

dec_label_pc_d6b0:                                ; preds = %dec_label_pc_d28c
  store i32 %v3_d27c, i32* %r0.global-to-local, align 4
  %v1_d6b4 = call i32 @function_135d0(i32 %v3_d27c)
  store i32 %v1_d6b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d6a8

dec_label_pc_d6bc:                                ; preds = %dec_label_pc_d30c
  %v3_d6c0 = sext i8 %v5_d360 to i32
  %v7_d6c0 = sext i8 %v5_d364 to i32
  %v3_d6c4 = sdiv i32 %v3_d6c0, 256
  store i32 %v3_d6c4, i32* %r1.global-to-local, align 4
  %v3_d6c8 = sdiv i32 %v7_d6c0, 256
  store i32 %v3_d6c8, i32* %r2.global-to-local, align 4
  store i32 %v1_d318, i32* %r3.global-to-local, align 4
  store i32 %v0_d2f8, i32* @r4, align 4
  store i32 %v1_d35c, i32* %sl.global-to-local, align 4
  %v3_d6e420 = udiv i32 %v1_d350, 256
  store i32 %v3_d6e420, i32* @r7, align 4
  %v4_d730 = sext i8 %v5_d188 to i32
  %sext9 = mul i32 %v6_d1e8, 16777216
  %v4_d7a0 = sdiv i32 %sext9, 16777216
  %v1_d790 = trunc i32 %v3_d6c4 to i8
  br label %dec_label_pc_d6e8

dec_label_pc_d6e8:                                ; preds = %dec_label_pc_d6e8, %dec_label_pc_d6bc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d6f4 = call i32 @function_141a8(i32 1510, i32 1)
  store i32 %v2_d6f4, i32* %r0.global-to-local, align 4
  store i32 %v2_d150, i32* %ip.global-to-local, align 4
  %v3_d6fc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d6fc, i32* %r2.global-to-local, align 4
  %v2_d700 = load i32, i32* @r4, align 4
  %v5_d700 = mul i32 %v2_d700, 4
  %v6_d700 = add i32 %v5_d700, %v2_d150
  %v7_d700 = inttoptr i32 %v6_d700 to i32*
  store i32 %v2_d6f4, i32* %v7_d700, align 4
  %v0_d704 = load i32, i32* %ip.global-to-local, align 4
  %v1_d704 = load i32, i32* %r2.global-to-local, align 4
  %v4_d704 = mul i32 %v1_d704, 4
  %v5_d704 = add i32 %v4_d704, %v0_d704
  %v6_d704 = inttoptr i32 %v5_d704 to i32*
  %v7_d704 = load i32, i32* %v6_d704, align 4
  store i32 %v7_d704, i32* %r1.global-to-local, align 4
  %v1_d708 = inttoptr i32 %v7_d704 to i8*
  %v2_d708 = load i8, i8* %v1_d708, align 1
  %tmp67 = urem i8 %v2_d708, 16
  %v1_d70c = zext i8 %tmp67 to i32
  %v1_d710 = or i32 %v1_d70c, 64
  store i32 %v1_d710, i32* %r3.global-to-local, align 4
  %v1_d714 = trunc i32 %v1_d710 to i8
  store i8 %v1_d714, i8* %v1_d708, align 1
  %v0_d718 = load i32, i32* %r1.global-to-local, align 4
  %v1_d718 = inttoptr i32 %v0_d718 to i8*
  %v2_d718 = load i8, i8* %v1_d718, align 1
  %v3_d718 = zext i8 %v2_d718 to i32
  %v1_d71c = and i32 %v3_d718, 240
  %v1_d720 = or i32 %v1_d71c, 5
  store i32 %v1_d720, i32* %r2.global-to-local, align 4
  %v3_d728 = add i32 %v0_d718, 9
  %v4_d728 = inttoptr i32 %v3_d728 to i8*
  store i8 17, i8* %v4_d728, align 1
  %v0_d72c = load i32, i32* %r2.global-to-local, align 4
  %v1_d72c = trunc i32 %v0_d72c to i8
  %v2_d72c = load i32, i32* %r1.global-to-local, align 4
  %v3_d72c = inttoptr i32 %v2_d72c to i8*
  store i8 %v1_d72c, i8* %v3_d72c, align 1
  store i32 %v4_d730, i32* %r0.global-to-local, align 4
  %v2_d734 = load i32, i32* %r1.global-to-local, align 4
  %v3_d734 = add i32 %v2_d734, 1
  %v4_d734 = inttoptr i32 %v3_d734 to i8*
  store i8 %v5_d188, i8* %v4_d734, align 1
  %v2_d73c = load i32, i32* %r1.global-to-local, align 4
  %v3_d73c = add i32 %v2_d73c, 8
  %v4_d73c = inttoptr i32 %v3_d73c to i8*
  store i8 %v5_d1c0, i8* %v4_d73c, align 1
  %v3_d740 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d740, i32* %r2.global-to-local, align 4
  %v3_d744 = mul i32 %v3_d740, 32
  store i32 %v3_d744, i32* %r3.global-to-local, align 4
  %v0_d748 = load i32, i32* @fp, align 4
  %v1_d748 = load i32, i32* %r1.global-to-local, align 4
  %v2_d748 = add i32 %v1_d748, 12
  %v3_d748 = inttoptr i32 %v2_d748 to i32*
  store i32 %v0_d748, i32* %v3_d748, align 4
  %v0_d74c = load i32, i32* %r3.global-to-local, align 4
  %v1_d74c = load i32, i32* %r2.global-to-local, align 4
  %tmp68 = mul i32 %v1_d74c, -8
  %v5_d74c = add i32 %v0_d74c, %tmp68
  %v1_d750 = load i32, i32* @r8, align 4
  %v2_d750 = add i32 %v5_d74c, %v1_d750
  store i32 %v2_d750, i32* %r3.global-to-local, align 4
  %v1_d754 = add i32 %v2_d750, 16
  %v2_d754 = inttoptr i32 %v1_d754 to i32*
  %v3_d754 = load i32, i32* %v2_d754, align 4
  store i32 %v1_d124, i32* %r3.global-to-local, align 4
  %v1_d75c = add i32 %v1_d74c, 1
  store i32 %v1_d75c, i32* @r4, align 4
  %v1_d760 = load i32, i32* %r1.global-to-local, align 4
  %v2_d760 = add i32 %v1_d760, 16
  %v3_d760 = inttoptr i32 %v2_d760 to i32*
  store i32 %v3_d754, i32* %v3_d760, align 4
  store i32 %v3_d6c0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_d76c = load i32, i32* @r4, align 4
  %v1_d76c = load i32, i32* %r3.global-to-local, align 4
  %v9_d76c = icmp eq i32 %v0_d76c, %v1_d76c
  store i1 %v9_d76c, i1* %cpsr_z.global-to-local, align 1
  %v2_d774 = load i32, i32* %r1.global-to-local, align 4
  %v3_d774 = add i32 %v2_d774, 6
  %v4_d774 = inttoptr i32 %v3_d774 to i8*
  store i8 64, i8* %v4_d774, align 1
  %v0_d778 = load i32, i32* %r2.global-to-local, align 4
  %v1_d778 = trunc i32 %v0_d778 to i8
  %v2_d778 = load i32, i32* %r1.global-to-local, align 4
  %v3_d778 = add i32 %v2_d778, 7
  %v4_d778 = inttoptr i32 %v3_d778 to i8*
  store i8 %v1_d778, i8* %v4_d778, align 1
  %v0_d77c = load i32, i32* %ip.global-to-local, align 4
  %v1_d77c = trunc i32 %v0_d77c to i8
  %v2_d77c = load i32, i32* %r1.global-to-local, align 4
  %v3_d77c = add i32 %v2_d77c, 2
  %v4_d77c = inttoptr i32 %v3_d77c to i8*
  store i8 %v1_d77c, i8* %v4_d77c, align 1
  store i32 %v3_d6c4, i32* %r2.global-to-local, align 4
  store i32 %v7_d6c0, i32* %r3.global-to-local, align 4
  store i32 %v3_d6c8, i32* %ip.global-to-local, align 4
  %v0_d78c = load i32, i32* %r1.global-to-local, align 4
  %v1_d78c = add i32 %v0_d78c, 20
  store i32 %v1_d78c, i32* %r0.global-to-local, align 4
  %v3_d790 = add i32 %v0_d78c, 3
  %v4_d790 = inttoptr i32 %v3_d790 to i8*
  store i8 %v1_d790, i8* %v4_d790, align 1
  %v0_d794 = load i32, i32* %r3.global-to-local, align 4
  %v1_d794 = trunc i32 %v0_d794 to i8
  %v2_d794 = load i32, i32* %r1.global-to-local, align 4
  %v3_d794 = add i32 %v2_d794, 4
  %v4_d794 = inttoptr i32 %v3_d794 to i8*
  store i8 %v1_d794, i8* %v4_d794, align 1
  %v0_d798 = load i32, i32* %ip.global-to-local, align 4
  %v1_d798 = trunc i32 %v0_d798 to i8
  %v2_d798 = load i32, i32* %r1.global-to-local, align 4
  %v3_d798 = add i32 %v2_d798, 5
  %v4_d798 = inttoptr i32 %v3_d798 to i8*
  store i8 %v1_d798, i8* %v4_d798, align 1
  %v0_d79c = load i32, i32* @r5, align 4
  %v1_d79c = trunc i32 %v0_d79c to i8
  %v2_d79c = load i32, i32* %r1.global-to-local, align 4
  %v3_d79c = add i32 %v2_d79c, 20
  %v4_d79c = inttoptr i32 %v3_d79c to i8*
  store i8 %v1_d79c, i8* %v4_d79c, align 1
  store i32 %v4_d7a0, i32* %r1.global-to-local, align 4
  %v0_d7a4 = load i32, i32* @r7, align 4
  %v1_d7a4 = trunc i32 %v0_d7a4 to i8
  %v2_d7a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7a4 = add i32 %v2_d7a4, 5
  %v4_d7a4 = inttoptr i32 %v3_d7a4 to i8*
  store i8 %v1_d7a4, i8* %v4_d7a4, align 1
  %v0_d7a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d7a8 = trunc i32 %v0_d7a8 to i8
  %v2_d7a8 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7a8 = add i32 %v2_d7a8, 1
  %v4_d7a8 = inttoptr i32 %v3_d7a8 to i8*
  store i8 %v1_d7a8, i8* %v4_d7a8, align 1
  %v0_d7ac = load i32, i32* @r6, align 4
  %v1_d7ac = trunc i32 %v0_d7ac to i8
  %v2_d7ac = load i32, i32* %r0.global-to-local, align 4
  %v3_d7ac = add i32 %v2_d7ac, 2
  %v4_d7ac = inttoptr i32 %v3_d7ac to i8*
  store i8 %v1_d7ac, i8* %v4_d7ac, align 1
  %v0_d7b0 = load i32, i32* %sl.global-to-local, align 4
  %v1_d7b0 = trunc i32 %v0_d7b0 to i8
  %v2_d7b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7b0 = add i32 %v2_d7b0, 3
  %v4_d7b0 = inttoptr i32 %v3_d7b0 to i8*
  store i8 %v1_d7b0, i8* %v4_d7b0, align 1
  %v0_d7b4 = load i32, i32* %sb.global-to-local, align 4
  %v1_d7b4 = trunc i32 %v0_d7b4 to i8
  %v2_d7b4 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7b4 = add i32 %v2_d7b4, 4
  %v4_d7b4 = inttoptr i32 %v3_d7b4 to i8*
  store i8 %v1_d7b4, i8* %v4_d7b4, align 1
  %v0_d7b8 = load i32, i32* @r4, align 4
  store i32 %v0_d7b8, i32* %stack_var_-40, align 4
  %v5_d7bc = icmp slt i32 %v0_d76c, %v1_d76c
  br i1 %v5_d7bc, label %dec_label_pc_d6e8, label %dec_label_pc_d468.preheader

; uselistorder directives
  uselistorder i32 %v1_d74c, { 1, 0 }
  uselistorder i32 %v3_d6c8, { 1, 0 }
  uselistorder i32 %v3_d6c4, { 2, 1, 0 }
  uselistorder i32 %v7_d6c0, { 1, 0 }
  uselistorder i32 %v3_d6c0, { 1, 0 }
  uselistorder i32 %v1_d6b4, { 1, 0 }
  uselistorder i32 %v4_d664, { 1, 0 }
  uselistorder i32 %v0_d65c, { 0, 2, 1 }
  uselistorder i32 %v0_d640, { 0, 2, 1 }
  uselistorder i32 %v2_d5f8, { 1, 0 }
  uselistorder i32 %v8_d5dc, { 1, 2, 0, 3 }
  uselistorder i32 %v3_d5c8, { 1, 0 }
  uselistorder i32 %v3_d5a4, { 2, 3, 1, 0 }
  uselistorder i32 %v1_d570, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_d514, { 0, 2, 1 }
  uselistorder i32 %v0_d4fc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d4e8, { 1, 0 }
  uselistorder i32 %v2_d4e4, { 0, 2, 1 }
  uselistorder i1 %v7_d494, { 1, 0 }
  uselistorder i1 %v3_d618, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d404, { 1, 0 }
  uselistorder i8 %v5_d364, { 0, 2, 1 }
  uselistorder i8 %v5_d360, { 1, 0 }
  uselistorder i32 %v1_d35c, { 1, 2, 0 }
  uselistorder i32 %v3_d348, { 1, 0 }
  uselistorder i32 %v1_d334, { 1, 0 }
  uselistorder i32 %v1_d318, { 1, 2, 0 }
  uselistorder i32 %v1_d314, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_d310, { 2, 3, 1, 0 }
  uselistorder i1 %v2_d2f4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d2e8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d2dc, { 1, 0, 2 }
  uselistorder i32 %v0_d2cc, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_d2c0, { 3, 1, 2, 0 }
  uselistorder i1 %v7_d2ac, { 1, 0 }
  uselistorder i1 %v7_d280, { 1, 0 }
  uselistorder i32 %v3_d27c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_d268, { 2, 1, 0 }
  uselistorder i32 %v1_d244, { 3, 1, 2, 0 }
  uselistorder i32 %v6_d1e8, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_d1d0, { 1, 0 }
  uselistorder i8 %v5_d1c0, { 0, 2, 1 }
  uselistorder i32 %v6_d1a4, { 1, 0 }
  uselistorder i32 %v7_d18c, { 0, 2, 1, 4, 3, 5 }
  uselistorder i8 %v5_d188, { 1, 0, 2 }
  uselistorder i32 %v6_d168, { 1, 0 }
  uselistorder i32 %v2_d150, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_d124, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sl.global-to-local, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 6, 7, 0, 2, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 45, 46, 47, 48, 49, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r2.global-to-local, { 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 38, 39, 40, 41, 42, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 26, 25, 28, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 27, 28, 29, 30, 31, 32, 33, 35, 34, 37, 36, 39, 38, 51, 40, 42, 43, 41, 45, 44, 47, 46, 48, 26, 49, 25, 50, 1, 2, 3, 4, 5, 10, 6, 7, 8, 9, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %ip.global-to-local, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 17, 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_d6a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d678, { 1, 0 }
  uselistorder label %dec_label_pc_d4d4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d468, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
}

define i32 @function_d7c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d7c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d7c8 = load i32, i32* @r4, align 4
  %v12_d7c8 = load i32, i32* @r7, align 4
  %v15_d7c8 = load i32, i32* @r8, align 4
  %v1_d7cc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_d7e8 = urem i32 %arg4, 256
  store i32 %v1_d7e8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_d7f8 = call i32 @function_141a8(i32 %v1_d7cc, i32 4)
  %v0_d7fc = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d804 = load i32, i32* @r7, align 4
  store i32 %v0_d804, i32* %r3.global-to-local, align 4
  store i32 %v2_d7f8, i32* %fp.global-to-local, align 4
  %v0_d80c = load i32, i32* @r4, align 4
  %v4_d810 = inttoptr i32 %v0_d7fc to i32*
  %v5_d810 = call i32 @function_a054(i32 %v0_d80c, i32* %v4_d810, i32 2, i32 %v0_d804)
  %v1_d81c = urem i32 %v5_d810, 256
  store i32 %v1_d81c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d828 = load i32, i32* @r4, align 4
  %v0_d82c = load i32, i32* @r5, align 4
  %v5_d830 = trunc i32 %v5_d810 to i8
  %v6_d834 = inttoptr i32 %v0_d82c to i32*
  %v7_d834 = call i32 @function_a054(i32 %v0_d828, i32* %v6_d834, i32 3, i32 65535)
  %v0_d838 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_d844 = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_d84c = inttoptr i32 %v0_d838 to i32*
  %v6_d84c = call i32 @function_a054(i32 %v0_d844, i32* %v5_d84c, i32 4, i32 64)
  %v1_d854 = urem i32 %v6_d84c, 256
  store i32 %v1_d854, i32* %ip.global-to-local, align 4
  %v0_d858 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d860 = load i32, i32* @r7, align 4
  store i32 %v0_d860, i32* %r3.global-to-local, align 4
  %v0_d864 = load i32, i32* @r4, align 4
  %v6_d86c = inttoptr i32 %v0_d858 to i32*
  %v7_d86c = call i32 @function_a054(i32 %v0_d864, i32* %v6_d86c, i32 5, i32 %v0_d860)
  %v1_d878 = urem i32 %v7_d86c, 256
  store i32 %v1_d878, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d884 = load i32, i32* @r4, align 4
  %v0_d888 = load i32, i32* @r5, align 4
  %v5_d890 = inttoptr i32 %v0_d888 to i32*
  %v6_d890 = call i32 @function_a054(i32 %v0_d884, i32* %v5_d890, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d8a0 = load i32, i32* @r5, align 4
  store i32 %v6_d890, i32* @r8, align 4
  %v0_d8a8 = load i32, i32* @r4, align 4
  %v4_d8ac = inttoptr i32 %v0_d8a0 to i32*
  %v5_d8ac = call i32 @function_a054(i32 %v0_d8a8, i32* %v4_d8ac, i32 7, i32 27015)
  store i32 %v5_d8ac, i32* @r4, align 4
  %v0_d8b4 = load i32, i32* @r7, align 4
  store i32 %v0_d8b4, i32* %stack_var_-44, align 4
  %v1_d8bc = inttoptr i32 %v0_d8b4 to i32*
  %v2_d8bc = call i32 @function_138a0(i32* %v1_d8bc)
  %v1_d8c0 = load i32, i32* @r6, align 4
  %v2_d8c0 = add i32 %v1_d8c0, %v2_d8bc
  %v1_d8cc = call i32 @function_121d4(i32 32)
  %v3_d8d8 = call i32 @function_120f0(i32 32, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d8ec = call i32 @function_13ebc(i32 2, i32 3, i32 17)
  %v7_d8f0 = icmp eq i32 %v3_d8ec, -1
  store i1 %v7_d8f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d8ec, i32* %sb.global-to-local, align 4
  br i1 %v7_d8f0, label %dec_label_pc_dcb0, label %dec_label_pc_d8fc

dec_label_pc_d8fc:                                ; preds = %dec_label_pc_d7c8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d904 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d904, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d90c = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d918 = call i32 @function_13e8c(i32 %v3_d8ec, i32 %v0_d90c, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_d91c = icmp eq i32 %v6_d918, -1
  store i1 %v7_d91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d91c, label %dec_label_pc_dcb8, label %dec_label_pc_d924

dec_label_pc_d924:                                ; preds = %dec_label_pc_d8fc
  store i32 %v1_d7cc, i32* %r2.global-to-local, align 4
  %v0_d930 = load i32, i32* @r4, align 4
  %v3_d930 = mul i32 %v0_d930, 65536
  store i32 %v3_d930, i32* @lr, align 4
  %v0_d934 = load i32, i32* @r8, align 4
  %v3_d934 = mul i32 %v0_d934, 65536
  store i32 %v3_d934, i32* %ip.global-to-local, align 4
  %v3_d938 = urem i32 %v7_d834, 65536
  store i32 %v3_d938, i32* %r3.global-to-local, align 4
  %v3_d93c = urem i32 %v0_d934, 65536
  store i32 %v3_d93c, i32* %r4.global-to-local, align 4
  %v3_d940 = urem i32 %v0_d930, 65536
  %v2_d944 = icmp eq i32 %v1_d7cc, 0
  store i1 %v2_d944, i1* %cpsr_z.global-to-local, align 1
  %v0_d948 = load i32, i32* @r7, align 4
  store i32 %v0_d948, i32* %stack_var_-40, align 4
  br i1 %v2_d944, label %dec_label_pc_dc9c.critedge, label %dec_label_pc_d95c

dec_label_pc_d95c:                                ; preds = %dec_label_pc_d924
  %v1_d960 = urem i32 %v7_d834, 256
  %v1_d964 = urem i32 %v0_d930, 256
  %tmp41 = udiv i32 %v7_d834, 256
  %v3_d96c = urem i32 %tmp41, 256
  %v3_d970 = mul nuw nsw i32 %v1_d964, 256
  store i32 %v3_d970, i32* %r3.global-to-local, align 4
  %v1_d974 = urem i32 %v0_d934, 256
  %v4_d978 = mul nuw nsw i32 %v1_d960, 256
  %v5_d978 = or i32 %v4_d978, %v3_d96c
  store i32 %v5_d978, i32* %r8.global-to-local, align 4
  %tmp42 = udiv i32 %v0_d934, 256
  %v3_d97c = urem i32 %tmp42, 256
  store i32 %v3_d97c, i32* %ip.global-to-local, align 4
  %tmp43 = udiv i32 %v0_d930, 256
  %v4_d980 = urem i32 %tmp43, 256
  %v5_d980 = or i32 %v4_d980, %v3_d970
  store i32 %v5_d980, i32* @r5, align 4
  %v4_d984 = mul nuw nsw i32 %v1_d974, 256
  %v5_d984 = or i32 %v4_d984, %v3_d97c
  store i32 %v5_d984, i32* @r6, align 4
  store i32 %v1_d964, i32* %r2.global-to-local, align 4
  store i32 %v0_d948, i32* @r4, align 4
  store i32 %v1_d974, i32* @r7, align 4
  %sext = mul i32 %v6_d84c, 16777216
  %v4_da00 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v7_d834, 16777216
  %v4_da1c = sdiv i32 %sext5, 16777216
  %sext6 = mul i32 %v0_d930, 16777216
  %v4_da78 = sdiv i32 %sext6, 16777216
  %v2_da04 = icmp eq i32 %v1_d878, 0
  %v1_da08 = trunc i32 %v4_da00 to i8
  br label %dec_label_pc_d9a0

dec_label_pc_d9a0:                                ; preds = %bb47, %dec_label_pc_d95c
  %v2_d9a8 = call i32 @function_141a8(i32 128, i32 1)
  %v3_d9ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9ac, i32* %r3.global-to-local, align 4
  %v1_d9b0 = load i32, i32* %fp.global-to-local, align 4
  %v2_d9b0 = load i32, i32* @r4, align 4
  %v5_d9b0 = mul i32 %v2_d9b0, 4
  %v6_d9b0 = add i32 %v5_d9b0, %v1_d9b0
  %v7_d9b0 = inttoptr i32 %v6_d9b0 to i32*
  store i32 %v2_d9a8, i32* %v7_d9b0, align 4
  %v0_d9b4 = load i32, i32* %fp.global-to-local, align 4
  %v1_d9b4 = load i32, i32* %r3.global-to-local, align 4
  %v4_d9b4 = mul i32 %v1_d9b4, 4
  %v5_d9b4 = add i32 %v4_d9b4, %v0_d9b4
  %v6_d9b4 = inttoptr i32 %v5_d9b4 to i32*
  %v7_d9b4 = load i32, i32* %v6_d9b4, align 4
  store i32 %v7_d9b4, i32* @lr, align 4
  %v1_d9b8 = inttoptr i32 %v7_d9b4 to i8*
  %v2_d9b8 = load i8, i8* %v1_d9b8, align 1
  %tmp = urem i8 %v2_d9b8, 16
  %v1_d9bc = zext i8 %tmp to i32
  %v1_d9c0 = or i32 %v1_d9bc, 64
  store i32 %v1_d9c0, i32* %r3.global-to-local, align 4
  %v1_d9c8 = trunc i32 %v1_d9c0 to i8
  store i8 %v1_d9c8, i8* %v1_d9b8, align 1
  %v0_d9cc = load i32, i32* @lr, align 4
  %v1_d9cc = inttoptr i32 %v0_d9cc to i8*
  %v2_d9cc = load i8, i8* %v1_d9cc, align 1
  %v1_d9d0 = and i8 %v2_d9cc, -16
  %v1_d9d4 = or i8 %v1_d9d0, 5
  store i8 %v1_d9d4, i8* %v1_d9cc, align 1
  %v2_d9e0 = load i32, i32* @lr, align 4
  %v3_d9e0 = add i32 %v2_d9e0, 1
  %v4_d9e0 = inttoptr i32 %v3_d9e0 to i8*
  store i8 %v5_d830, i8* %v4_d9e0, align 1
  %v3_d9e4 = load i32, i32* %stack_var_-44, align 4
  %v1_d9e8 = add i32 %v3_d9e4, 32
  %tmp44 = mul i32 %v1_d9e8, 256
  store i32 %v1_d878, i32* %r4.global-to-local, align 4
  %v1_d9f8 = and i32 %tmp44, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp45 = udiv i32 %v1_d9e8, 256
  %v4_d9fc = urem i32 %tmp45, 256
  %v5_d9fc = or i32 %v4_d9fc, %v1_d9f8
  store i32 %v5_d9fc, i32* %r2.global-to-local, align 4
  store i32 %v4_da00, i32* %r3.global-to-local, align 4
  store i1 %v2_da04, i1* %cpsr_z.global-to-local, align 1
  %v2_da08 = load i32, i32* @lr, align 4
  %v3_da08 = add i32 %v2_da08, 8
  %v4_da08 = inttoptr i32 %v3_da08 to i8*
  store i8 %v1_da08, i8* %v4_da08, align 1
  %v0_da0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da0c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d9a0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_da10 = load i32, i32* @lr, align 4
  %v4_da10 = add i32 %v3_da10, 6
  %v5_da10 = inttoptr i32 %v4_da10 to i8*
  store i8 64, i8* %v5_da10, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d9a0, %bb
  %v0_da18 = load i32, i32* %r2.global-to-local, align 4
  %v3_da18 = sdiv i32 %v0_da18, 256
  store i32 %v3_da18, i32* %ip.global-to-local, align 4
  store i32 %v4_da1c, i32* %r4.global-to-local, align 4
  %v2_da20 = load i32, i32* @lr, align 4
  %v3_da20 = add i32 %v2_da20, 9
  %v4_da20 = inttoptr i32 %v3_da20 to i8*
  store i8 17, i8* %v4_da20, align 1
  store i32 ptrtoint (i32* @global_var_1f238.83 to i32), i32* %r3.global-to-local, align 4
  %v0_da28 = load i32, i32* %r2.global-to-local, align 4
  %v1_da28 = trunc i32 %v0_da28 to i8
  %v2_da28 = load i32, i32* @lr, align 4
  %v3_da28 = add i32 %v2_da28, 2
  %v4_da28 = inttoptr i32 %v3_da28 to i8*
  store i8 %v1_da28, i8* %v4_da28, align 1
  %v0_da2c = load i32, i32* %ip.global-to-local, align 4
  %v1_da2c = trunc i32 %v0_da2c to i8
  %v2_da2c = load i32, i32* @lr, align 4
  %v3_da2c = add i32 %v2_da2c, 3
  %v4_da2c = inttoptr i32 %v3_da2c to i8*
  store i8 %v1_da2c, i8* %v4_da2c, align 1
  %v0_da30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da30, label %.thread7, label %bb46

.thread7:                                         ; preds = %.thread
  %v3_da348 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da348, i32* %ip.global-to-local, align 4
  br label %bb47

bb46:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_da34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da34, i32* %ip.global-to-local, align 4
  %v3_da38 = load i32, i32* @lr, align 4
  %v4_da38 = add i32 %v3_da38, 7
  %v5_da38 = inttoptr i32 %v4_da38 to i8*
  store i8 0, i8* %v5_da38, align 1
  %v0_da40.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %.thread7, %bb46
  %v0_da40 = phi i32 [ %v3_da348, %.thread7 ], [ %v0_da40.pre, %bb46 ]
  %v2_da3c = load i32, i32* @global_var_1f238.83, align 4
  store i32 %v2_da3c, i32* %r2.global-to-local, align 4
  %v3_da40 = mul i32 %v0_da40, 32
  store i32 %v3_da40, i32* %r3.global-to-local, align 4
  %v1_da44 = load i32, i32* @lr, align 4
  %v2_da44 = add i32 %v1_da44, 12
  %v3_da44 = inttoptr i32 %v2_da44 to i32*
  store i32 %v2_da3c, i32* %v3_da44, align 4
  %v0_da48 = load i32, i32* %r3.global-to-local, align 4
  %v1_da48 = load i32, i32* %ip.global-to-local, align 4
  %tmp52 = mul i32 %v1_da48, -8
  %v5_da48 = add i32 %v0_da48, %tmp52
  %v1_da4c = load i32, i32* @sl, align 4
  %v2_da4c = add i32 %v5_da48, %v1_da4c
  store i32 %v2_da4c, i32* %r3.global-to-local, align 4
  %v1_da50 = add i32 %v2_da4c, 16
  %v2_da50 = inttoptr i32 %v1_da50 to i32*
  %v3_da50 = load i32, i32* %v2_da50, align 4
  %v1_da54 = load i32, i32* @lr, align 4
  %v2_da54 = add i32 %v1_da54, 16
  %v3_da54 = inttoptr i32 %v2_da54 to i32*
  store i32 %v3_da50, i32* %v3_da54, align 4
  %v3_da58 = load i32, i32* %stack_var_-44, align 4
  %v1_da5c = add i32 %v3_da58, 12
  %tmp48 = mul i32 %v1_da5c, 256
  %v1_da6c = and i32 %tmp48, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp49 = udiv i32 %v1_da5c, 256
  %v4_da70 = urem i32 %tmp49, 256
  %v5_da70 = or i32 %v4_da70, %v1_da6c
  store i32 %v5_da70, i32* %ip.global-to-local, align 4
  %v1_da74 = load i32, i32* @lr, align 4
  %v2_da74 = add i32 %v1_da74, 28
  %v3_da74 = inttoptr i32 %v2_da74 to i32*
  store i32 -1, i32* %v3_da74, align 4
  store i32 %v4_da78, i32* %r2.global-to-local, align 4
  %v0_da7c = load i32, i32* %r4.global-to-local, align 4
  %v1_da7c = trunc i32 %v0_da7c to i8
  %v2_da7c = load i32, i32* @lr, align 4
  %v3_da7c = add i32 %v2_da7c, 5
  %v4_da7c = inttoptr i32 %v3_da7c to i8*
  store i8 %v1_da7c, i8* %v4_da7c, align 1
  %v0_da80 = load i32, i32* %ip.global-to-local, align 4
  %v3_da80 = sdiv i32 %v0_da80, 256
  store i32 %v3_da80, i32* %r3.global-to-local, align 4
  %v0_da84 = load i32, i32* @lr, align 4
  %v1_da84 = add i32 %v0_da84, 20
  store i32 %v1_da84, i32* %r4.global-to-local, align 4
  %v0_da88 = load i32, i32* %r8.global-to-local, align 4
  %v1_da88 = trunc i32 %v0_da88 to i8
  %v3_da88 = add i32 %v0_da84, 4
  %v4_da88 = inttoptr i32 %v3_da88 to i8*
  store i8 %v1_da88, i8* %v4_da88, align 1
  %v0_da8c = load i32, i32* @r6, align 4
  %v1_da8c = trunc i32 %v0_da8c to i8
  %v2_da8c = load i32, i32* @lr, align 4
  %v3_da8c = add i32 %v2_da8c, 20
  %v4_da8c = inttoptr i32 %v3_da8c to i8*
  store i8 %v1_da8c, i8* %v4_da8c, align 1
  %v0_da90 = load i32, i32* %r3.global-to-local, align 4
  %v1_da90 = trunc i32 %v0_da90 to i8
  %v2_da90 = load i32, i32* %r4.global-to-local, align 4
  %v3_da90 = add i32 %v2_da90, 5
  %v4_da90 = inttoptr i32 %v3_da90 to i8*
  store i8 %v1_da90, i8* %v4_da90, align 1
  %v0_da94 = load i32, i32* @r5, align 4
  %v1_da94 = trunc i32 %v0_da94 to i8
  %v2_da94 = load i32, i32* %r4.global-to-local, align 4
  %v3_da94 = add i32 %v2_da94, 2
  %v4_da94 = inttoptr i32 %v3_da94 to i8*
  store i8 %v1_da94, i8* %v4_da94, align 1
  %v0_da98 = load i32, i32* @r7, align 4
  %v1_da98 = trunc i32 %v0_da98 to i8
  %v2_da98 = load i32, i32* %r4.global-to-local, align 4
  %v3_da98 = add i32 %v2_da98, 1
  %v4_da98 = inttoptr i32 %v3_da98 to i8*
  store i8 %v1_da98, i8* %v4_da98, align 1
  %v0_da9c = load i32, i32* @lr, align 4
  %v1_da9c = add i32 %v0_da9c, 32
  %v0_daa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_daa0 = trunc i32 %v0_daa0 to i8
  %v2_daa0 = load i32, i32* %r4.global-to-local, align 4
  %v3_daa0 = add i32 %v2_daa0, 3
  %v4_daa0 = inttoptr i32 %v3_daa0 to i8*
  store i8 %v1_daa0, i8* %v4_daa0, align 1
  %v0_daa4 = load i32, i32* %ip.global-to-local, align 4
  %v1_daa4 = trunc i32 %v0_daa4 to i8
  %v2_daa4 = load i32, i32* %r4.global-to-local, align 4
  %v3_daa4 = add i32 %v2_daa4, 4
  %v4_daa4 = inttoptr i32 %v3_daa4 to i8*
  store i8 %v1_daa4, i8* %v4_daa4, align 1
  %v3_daa8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_daa8, i32* %r2.global-to-local, align 4
  %v3_daac = call i32 @function_12cb8(i32 %v1_da9c, i32 %v3_d8d8, i32 %v3_daa8)
  %v3_dab0 = load i32, i32* %stack_var_-40, align 4
  %v1_dab4 = add i32 %v3_dab0, 1
  store i32 %v1_dab4, i32* @r4, align 4
  store i32 %v1_d7cc, i32* %r3.global-to-local, align 4
  %v9_dabc = icmp eq i32 %v1_dab4, %v1_d7cc
  store i1 %v9_dabc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dab4, i32* %stack_var_-40, align 4
  %v5_dac4 = icmp slt i32 %v1_dab4, %v1_d7cc
  br i1 %v5_dac4, label %dec_label_pc_d9a0, label %dec_label_pc_dac8

dec_label_pc_dac8:                                ; preds = %bb47, %dec_label_pc_dc9c
  store i32 %v1_d7cc, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_d944, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_d944, label %dec_label_pc_dc9c, label %dec_label_pc_dadc

dec_label_pc_dadc:                                ; preds = %dec_label_pc_dac8
  store i32 0, i32* %r8.global-to-local, align 4
  %v3_daec = icmp eq i32 %v3_d938, 65535
  br label %dec_label_pc_dbc0

dec_label_pc_dae8:                                ; preds = %dec_label_pc_dbc0
  store i1 %v3_daec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_daec, label %dec_label_pc_dc50, label %dec_label_pc_daf4

dec_label_pc_daf4:                                ; preds = %dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge, %dec_label_pc_dae8
  %v1_daf8 = phi i32 [ %v1_daf8.pre, %dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge ], [ 65535, %dec_label_pc_dae8 ]
  store i32 %v3_d93c, i32* %r2.global-to-local, align 4
  %v9_daf8 = icmp eq i32 %v3_d93c, %v1_daf8
  store i1 %v9_daf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_daf8, label %dec_label_pc_dc6c, label %dec_label_pc_db00

dec_label_pc_db00:                                ; preds = %dec_label_pc_dc50.dec_label_pc_db00_crit_edge, %dec_label_pc_daf4
  %v1_db04 = phi i32 [ %v1_db04.pre, %dec_label_pc_dc50.dec_label_pc_db00_crit_edge ], [ %v1_daf8, %dec_label_pc_daf4 ]
  store i32 %v3_d940, i32* %r3.global-to-local, align 4
  %v9_db04 = icmp eq i32 %v3_d940, %v1_db04
  store i1 %v9_db04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db04, label %dec_label_pc_dc88, label %dec_label_pc_db0c

dec_label_pc_db0c:                                ; preds = %dec_label_pc_dc6c, %dec_label_pc_db00, %dec_label_pc_dc88
  %v0_db10 = load i32, i32* %r8.global-to-local, align 4
  %v1_db10 = trunc i32 %v0_db10 to i8
  %v2_db10 = load i32, i32* @r5, align 4
  %v3_db10 = add i32 %v2_db10, 10
  %v4_db10 = inttoptr i32 %v3_db10 to i8*
  store i8 %v1_db10, i8* %v4_db10, align 1
  %v0_db14 = load i32, i32* %r8.global-to-local, align 4
  %v1_db14 = trunc i32 %v0_db14 to i8
  %v2_db14 = load i32, i32* @r5, align 4
  %v3_db14 = add i32 %v2_db14, 11
  %v4_db14 = inttoptr i32 %v3_db14 to i8*
  store i8 %v1_db14, i8* %v4_db14, align 1
  %v0_db18 = load i32, i32* @r5, align 4
  store i32 %v0_db18, i32* @r0, align 4
  %v2_db1c = call i32 @function_e498(i32 %v0_db18, i32 20)
  %v3_db1c = trunc i32 %v2_db1c to i8
  %v4_db20 = sdiv i32 %v2_db1c, 256
  store i32 %v4_db20, i32* %r3.global-to-local, align 4
  %v1_db24 = trunc i32 %v4_db20 to i8
  %v2_db24 = load i32, i32* @r5, align 4
  %v3_db24 = add i32 %v2_db24, 11
  %v4_db24 = inttoptr i32 %v3_db24 to i8*
  store i8 %v1_db24, i8* %v4_db24, align 1
  %v3_db28 = load i32, i32* @r5, align 4
  %v4_db28 = add i32 %v3_db28, 10
  %v5_db28 = inttoptr i32 %v4_db28 to i8*
  store i8 %v3_db1c, i8* %v5_db28, align 1
  %v0_db2c = load i32, i32* %r8.global-to-local, align 4
  %v1_db2c = trunc i32 %v0_db2c to i8
  %v2_db2c = load i32, i32* @r6, align 4
  %v3_db2c = add i32 %v2_db2c, 6
  %v4_db2c = inttoptr i32 %v3_db2c to i8*
  store i8 %v1_db2c, i8* %v4_db2c, align 1
  %v0_db30 = load i32, i32* %r8.global-to-local, align 4
  %v1_db30 = trunc i32 %v0_db30 to i8
  %v2_db30 = load i32, i32* @r6, align 4
  %v3_db30 = add i32 %v2_db30, 7
  %v4_db30 = inttoptr i32 %v3_db30 to i8*
  store i8 %v1_db30, i8* %v4_db30, align 1
  %v0_db34 = load i32, i32* @r5, align 4
  %v1_db34 = add i32 %v0_db34, 24
  %v2_db34 = inttoptr i32 %v1_db34 to i8*
  %v3_db34 = load i8, i8* %v2_db34, align 1
  %v4_db34 = zext i8 %v3_db34 to i32
  store i32 %v4_db34, i32* %r3.global-to-local, align 4
  %v1_db38 = add i32 %v0_db34, 25
  %v2_db38 = inttoptr i32 %v1_db38 to i8*
  %v3_db38 = load i8, i8* %v2_db38, align 1
  %v4_db38 = zext i8 %v3_db38 to i32
  %v4_db3c = mul nuw nsw i32 %v4_db38, 256
  %v5_db3c = or i32 %v4_db3c, %v4_db34
  store i32 %v5_db3c, i32* %r2.global-to-local, align 4
  %v3_db40 = load i32, i32* %stack_var_-44, align 4
  %v0_db44 = load i32, i32* @r6, align 4
  store i32 %v0_db44, i32* @r1, align 4
  %v1_db48 = add i32 %v3_db40, 12
  store i32 %v1_db48, i32* %r3.global-to-local, align 4
  %v4_db50 = call i32 @function_e4f4(i32 %v0_db34, i32 %v0_db44, i32 %v5_db3c, i32 %v1_db48)
  %v5_db50 = trunc i32 %v4_db50 to i8
  %v4_db5414 = udiv i32 %v4_db50, 256
  %v1_db58 = trunc i32 %v4_db5414 to i8
  %v2_db58 = load i32, i32* @r6, align 4
  %v3_db58 = add i32 %v2_db58, 7
  %v4_db58 = inttoptr i32 %v3_db58 to i8*
  store i8 %v1_db58, i8* %v4_db58, align 1
  %v3_db5c = load i32, i32* @r6, align 4
  %v4_db5c = add i32 %v3_db5c, 6
  %v5_db5c = inttoptr i32 %v4_db5c to i8*
  store i8 %v5_db50, i8* %v5_db5c, align 1
  %v3_db60 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db60, i32* %r3.global-to-local, align 4
  %v0_db64 = load i32, i32* @r5, align 4
  %v1_db64 = add i32 %v0_db64, 20
  %v2_db64 = inttoptr i32 %v1_db64 to i32*
  %v3_db64 = load i32, i32* %v2_db64, align 4
  %v5_db6c = mul i32 %v3_db60, 24
  %v1_db70 = load i32, i32* @sl, align 4
  %v2_db70 = add i32 %v1_db70, %v5_db6c
  store i32 %v2_db70, i32* %ip.global-to-local, align 4
  %v3_db74 = udiv i32 %v3_db64, 65536
  store i32 %v3_db74, i32* %r2.global-to-local, align 4
  %v1_db78 = trunc i32 %v3_db74 to i8
  %v3_db78 = add i32 %v2_db70, 2
  %v4_db78 = inttoptr i32 %v3_db78 to i8*
  store i8 %v1_db78, i8* %v4_db78, align 1
  %v0_db7c = load i32, i32* %r2.global-to-local, align 4
  %v3_db7c15 = udiv i32 %v0_db7c, 256
  %v3_db80 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_db80, i32* %r2.global-to-local, align 4
  %v1_db84 = trunc i32 %v3_db7c15 to i8
  %v2_db84 = load i32, i32* %ip.global-to-local, align 4
  %v3_db84 = add i32 %v2_db84, 3
  %v4_db84 = inttoptr i32 %v3_db84 to i8*
  store i8 %v1_db84, i8* %v4_db84, align 1
  store i32 16, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_db90 = load i32, i32* @r5, align 4
  %v0_db94 = load i32, i32* %r2.global-to-local, align 4
  %v1_db94 = add i32 %v0_db94, 32
  store i32 %v1_db94, i32* %r2.global-to-local, align 4
  %v0_db98 = load i32, i32* %sb.global-to-local, align 4
  %v0_dba0 = load i32, i32* %ip.global-to-local, align 4
  %v6_dba4 = inttoptr i32 %v0_db90 to i32*
  %v7_dba4 = call i32 @function_13e58(i32 %v0_db98, i32* %v6_dba4, i32 %v1_db94, i32 16384, i32 %v0_dba0, i32 16)
  %v3_dba8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dba8, i32* %r3.global-to-local, align 4
  store i32 %v1_d7cc, i32* @r4, align 4
  %v1_dbb0 = add i32 %v3_dba8, 1
  %v9_dbb4 = icmp eq i32 %v1_dbb0, %v1_d7cc
  store i1 %v9_dbb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dbb0, i32* %stack_var_-40, align 4
  %v6_dbbc = icmp slt i32 %v1_dbb0, %v1_d7cc
  br i1 %v6_dbbc, label %dec_label_pc_dbc0, label %dec_label_pc_dc9c

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_db0c, %dec_label_pc_dadc
  %v1_dbd0 = phi i32 [ %v1_dbb0, %dec_label_pc_db0c ], [ 0, %dec_label_pc_dadc ]
  %v5_dbc4 = mul i32 %v1_dbd0, 24
  %v1_dbc8 = load i32, i32* @sl, align 4
  %v2_dbc8 = add i32 %v1_dbc8, %v5_dbc4
  store i32 %v2_dbc8, i32* %r3.global-to-local, align 4
  %v1_dbcc = add i32 %v2_dbc8, 20
  %v2_dbcc = inttoptr i32 %v1_dbcc to i8*
  %v3_dbcc = load i8, i8* %v2_dbcc, align 1
  %v4_dbcc = zext i8 %v3_dbcc to i32
  store i32 %v4_dbcc, i32* %r2.global-to-local, align 4
  %v0_dbd0 = load i32, i32* %fp.global-to-local, align 4
  %v4_dbd0 = mul i32 %v1_dbd0, 4
  %v5_dbd0 = add i32 %v0_dbd0, %v4_dbd0
  %v6_dbd0 = inttoptr i32 %v5_dbd0 to i32*
  %v7_dbd0 = load i32, i32* %v6_dbd0, align 4
  store i32 %v7_dbd0, i32* @r5, align 4
  %v2_dbd8 = icmp ugt i8 %v3_dbcc, 30
  %v7_dbd8 = icmp eq i8 %v3_dbcc, 31
  store i1 %v7_dbd8, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_dbe0 = add i32 %v7_dbd0, 20
  store i32 %v1_dbe0, i32* @r6, align 4
  %v2_dbe4 = xor i1 %v7_dbd8, true
  %v3_dbe4 = and i1 %v2_dbd8, %v2_dbe4
  br i1 %v3_dbe4, label %dec_label_pc_dae8, label %dec_label_pc_dbe8

dec_label_pc_dbe8:                                ; preds = %dec_label_pc_dbc0
  %v1_dbe8 = add i32 %v2_dbc8, 16
  %v2_dbe8 = inttoptr i32 %v1_dbe8 to i32*
  %v3_dbe8 = load i32, i32* %v2_dbe8, align 4
  store i32 %v3_dbe8, i32* @r4, align 4
  %v0_dbec = call i32 @function_f8c8()
  %v3_dbf0 = load i32, i32* %stack_var_-40, align 4
  %v5_dbf8 = mul i32 %v3_dbf0, 24
  %v0_dbfc = load i32, i32* @r4, align 4
  %v1_dc00 = and i32 %v0_dbfc, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_dc00, i32* %r3.global-to-local, align 4
  %v1_dbfc = udiv i32 %v0_dbfc, 256
  %v3_dc04 = and i32 %v1_dbfc, 65280
  store i32 %v3_dc04, i32* %r2.global-to-local, align 4
  %v1_dc08 = load i32, i32* @sl, align 4
  %v2_dc08 = add i32 %v1_dc08, %v5_dbf8
  store i32 %v2_dc08, i32* %ip.global-to-local, align 4
  %v3_dc0c = mul i32 %v0_dbfc, 16777216
  %v4_dc10 = mul i32 %v1_dc00, 256
  %v5_dc10 = or i32 %v4_dc10, %v3_dc0c
  %v1_dc14 = add i32 %v2_dc08, 20
  %v2_dc14 = inttoptr i32 %v1_dc14 to i8*
  %v3_dc14 = load i8, i8* %v2_dc14, align 1
  %v4_dc14 = zext i8 %v3_dc14 to i32
  %v4_dc18 = udiv i32 %v0_dbfc, 16777216
  %v5_dc18 = or i32 %v3_dc04, %v4_dc18
  %v2_dc1c = or i32 %v5_dc18, %v5_dc10
  %v7_dc20 = lshr i32 %v0_dbec, %v4_dc14
  %v8_dc20 = add i32 %v7_dc20, %v2_dc1c
  store i32 %v8_dc20, i32* %r2.global-to-local, align 4
  %v2_dc3c = call i32 @llvm.bswap.i32(i32 %v8_dc20)
  store i32 %v2_dc3c, i32* %r3.global-to-local, align 4
  %v1_dc44 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc44 = icmp eq i32 %v3_d938, %v1_dc44
  store i1 %v9_dc44, i1* %cpsr_z.global-to-local, align 1
  %v1_dc48 = load i32, i32* @r5, align 4
  %v2_dc48 = add i32 %v1_dc48, 16
  %v3_dc48 = inttoptr i32 %v2_dc48 to i32*
  store i32 %v2_dc3c, i32* %v3_dc48, align 4
  br i1 %v9_dc44, label %dec_label_pc_dc50, label %dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge

dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge:    ; preds = %dec_label_pc_dbe8
  %v1_daf8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_daf4

dec_label_pc_dc50:                                ; preds = %dec_label_pc_dbe8, %dec_label_pc_dae8
  %v0_dc50 = call i32 @function_f8c8()
  %v1_dc50 = trunc i32 %v0_dc50 to i8
  store i32 %v3_d93c, i32* %r2.global-to-local, align 4
  %v4_dc58 = sdiv i32 %v0_dc50, 256
  store i32 %v4_dc58, i32* %r3.global-to-local, align 4
  %v1_dc5c = load i32, i32* %r7.global-to-local, align 4
  %v9_dc5c = icmp eq i32 %v3_d93c, %v1_dc5c
  store i1 %v9_dc5c, i1* %cpsr_z.global-to-local, align 1
  %v1_dc60 = trunc i32 %v4_dc58 to i8
  %v2_dc60 = load i32, i32* @r5, align 4
  %v3_dc60 = add i32 %v2_dc60, 5
  %v4_dc60 = inttoptr i32 %v3_dc60 to i8*
  store i8 %v1_dc60, i8* %v4_dc60, align 1
  %v3_dc64 = load i32, i32* @r5, align 4
  %v4_dc64 = add i32 %v3_dc64, 4
  %v5_dc64 = inttoptr i32 %v4_dc64 to i8*
  store i8 %v1_dc50, i8* %v5_dc64, align 1
  %v0_dc68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc68, label %dec_label_pc_dc6c, label %dec_label_pc_dc50.dec_label_pc_db00_crit_edge

dec_label_pc_dc50.dec_label_pc_db00_crit_edge:    ; preds = %dec_label_pc_dc50
  %v1_db04.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_db00

dec_label_pc_dc6c:                                ; preds = %dec_label_pc_dc50, %dec_label_pc_daf4
  %v0_dc6c = call i32 @function_f8c8()
  %v1_dc6c = trunc i32 %v0_dc6c to i8
  %v4_dc70 = sdiv i32 %v0_dc6c, 256
  store i32 %v4_dc70, i32* %r3.global-to-local, align 4
  %v3_dc74 = load i32, i32* @r5, align 4
  %v4_dc74 = add i32 %v3_dc74, 20
  %v5_dc74 = inttoptr i32 %v4_dc74 to i8*
  store i8 %v1_dc6c, i8* %v5_dc74, align 1
  %v0_dc78 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc78 = trunc i32 %v0_dc78 to i8
  %v2_dc78 = load i32, i32* @r6, align 4
  %v3_dc78 = add i32 %v2_dc78, 1
  %v4_dc78 = inttoptr i32 %v3_dc78 to i8*
  store i8 %v1_dc78, i8* %v4_dc78, align 1
  store i32 %v3_d940, i32* %r3.global-to-local, align 4
  %v1_dc80 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc80 = icmp eq i32 %v3_d940, %v1_dc80
  store i1 %v9_dc80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc80, label %dec_label_pc_dc88, label %dec_label_pc_db0c

dec_label_pc_dc88:                                ; preds = %dec_label_pc_dc6c, %dec_label_pc_db00
  %v0_dc88 = call i32 @function_f8c8()
  %v1_dc88 = trunc i32 %v0_dc88 to i8
  %v4_dc8c = sdiv i32 %v0_dc88, 256
  store i32 %v4_dc8c, i32* %r3.global-to-local, align 4
  %v1_dc90 = trunc i32 %v4_dc8c to i8
  %v2_dc90 = load i32, i32* @r6, align 4
  %v3_dc90 = add i32 %v2_dc90, 3
  %v4_dc90 = inttoptr i32 %v3_dc90 to i8*
  store i8 %v1_dc90, i8* %v4_dc90, align 1
  %v3_dc94 = load i32, i32* @r6, align 4
  %v4_dc94 = add i32 %v3_dc94, 2
  %v5_dc94 = inttoptr i32 %v4_dc94 to i8*
  store i8 %v1_dc88, i8* %v5_dc94, align 1
  br label %dec_label_pc_db0c

dec_label_pc_dc9c.critedge:                       ; preds = %dec_label_pc_d924
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_dc9c

dec_label_pc_dc9c:                                ; preds = %dec_label_pc_db0c, %dec_label_pc_dc9c.critedge, %dec_label_pc_dac8
  %v2_dca0 = call i32 @function_138a0(i32* null)
  %v9_dca8 = icmp eq i32 %v2_d8c0, %v2_dca0
  store i1 %v9_dca8, i1* %cpsr_z.global-to-local, align 1
  %v6_dcac = icmp slt i32 %v2_d8c0, %v2_dca0
  br i1 %v6_dcac, label %dec_label_pc_dcb0, label %dec_label_pc_dac8

dec_label_pc_dcb0:                                ; preds = %dec_label_pc_dc9c, %dec_label_pc_d7c8, %dec_label_pc_dcb8
  %v29_dcb4 = phi i32 [ %v3_d8ec, %dec_label_pc_d7c8 ], [ %v1_dcbc, %dec_label_pc_dcb8 ], [ %v2_dca0, %dec_label_pc_dc9c ]
  store i32 %v3_d7c8, i32* %r4.global-to-local, align 4
  store i32 %v12_d7c8, i32* %r7.global-to-local, align 4
  store i32 %v15_d7c8, i32* %r8.global-to-local, align 4
  ret i32 %v29_dcb4

dec_label_pc_dcb8:                                ; preds = %dec_label_pc_d8fc
  %v0_dcb8 = load i32, i32* %sb.global-to-local, align 4
  %v1_dcbc = call i32 @function_135d0(i32 %v0_dcb8)
  br label %dec_label_pc_dcb0

; uselistorder directives
  uselistorder i32 %v4_dc8c, { 1, 0 }
  uselistorder i32 %v4_dc58, { 1, 0 }
  uselistorder i32 %v2_dc3c, { 1, 0 }
  uselistorder i32 %v0_dbfc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_dbb0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_db74, { 1, 0 }
  uselistorder i32 %v4_db20, { 1, 0 }
  uselistorder i1 %v3_daec, { 1, 0 }
  uselistorder i32 %v1_dab4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_da5c, { 1, 0 }
  uselistorder i32 %v1_d9e8, { 1, 0 }
  uselistorder i32 %v1_d974, { 1, 0 }
  uselistorder i32 %v3_d970, { 1, 0 }
  uselistorder i32 %v1_d964, { 1, 0 }
  uselistorder i32 %v3_d938, { 0, 2, 1 }
  uselistorder i32 %v0_d934, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d930, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d91c, { 1, 0 }
  uselistorder i1 %v7_d8f0, { 1, 0 }
  uselistorder i32 %v3_d8ec, { 1, 2, 3, 0 }
  uselistorder i32 %v2_d8c0, { 1, 0 }
  uselistorder i32 %v1_d878, { 1, 2, 0 }
  uselistorder i32 %v5_d810, { 1, 0 }
  uselistorder i32 %v1_d7cc, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 2, 4, 1, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 11, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5, 10, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960), { 6, 7, 0, 1, 2, 8, 3, 9, 10, 11, 4, 5 }
  uselistorder label %dec_label_pc_dcb0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dc9c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_db0c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dac8, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dcc8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_dcc8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_dcc8 = load i32, i32* @r4, align 4
  %v15_dcc8 = load i32, i32* @r8, align 4
  %v21_dcc8 = load i32, i32* @sl, align 4
  %v24_dcc8 = load i32, i32* @fp, align 4
  %v1_dcd4 = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_dcd4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dcec = urem i32 %arg4, 256
  store i32 %v1_dcec, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_dcfc = call i32 @function_141a8(i32 %v1_dcd4, i32 4)
  %v0_dd00 = load i32, i32* @r5, align 4
  store i32 %v0_dd00, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_dd0c = load i32, i32* @r4, align 4
  store i32 %v0_dd0c, i32* %r0.global-to-local, align 4
  %v0_dd10 = load i32, i32* @r6, align 4
  store i32 %v0_dd10, i32* %r3.global-to-local, align 4
  %v5_dd14 = inttoptr i32 %v0_dd00 to i32*
  %v6_dd14 = call i32 @function_a054(i32 %v0_dd0c, i32* %v5_dd14, i32 2, i32 %v0_dd10)
  %v1_dd20 = urem i32 %v6_dd14, 256
  store i32 %v1_dd20, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dd2c = load i32, i32* @r4, align 4
  store i32 %v0_dd2c, i32* %r0.global-to-local, align 4
  %v0_dd30 = load i32, i32* @r5, align 4
  store i32 %v0_dd30, i32* %r1.global-to-local, align 4
  %v5_dd34 = trunc i32 %v6_dd14 to i8
  %v6_dd38 = inttoptr i32 %v0_dd30 to i32*
  %v7_dd38 = call i32 @function_a054(i32 %v0_dd2c, i32* %v6_dd38, i32 3, i32 65535)
  %v0_dd3c = load i32, i32* @r5, align 4
  store i32 %v0_dd3c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_dd48 = load i32, i32* @r4, align 4
  store i32 %v0_dd48, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_dd50 = inttoptr i32 %v0_dd3c to i32*
  %v6_dd50 = call i32 @function_a054(i32 %v0_dd48, i32* %v5_dd50, i32 4, i32 64)
  %v1_dd58 = urem i32 %v6_dd50, 256
  store i32 %v1_dd58, i32* %ip.global-to-local, align 4
  %v0_dd5c = load i32, i32* @r5, align 4
  store i32 %v0_dd5c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_dd64 = load i32, i32* @r6, align 4
  store i32 %v0_dd64, i32* %r3.global-to-local, align 4
  %v0_dd68 = load i32, i32* @r4, align 4
  store i32 %v0_dd68, i32* %r0.global-to-local, align 4
  %v6_dd70 = inttoptr i32 %v0_dd5c to i32*
  %v7_dd70 = call i32 @function_a054(i32 %v0_dd68, i32* %v6_dd70, i32 5, i32 %v0_dd64)
  %v1_dd7c = urem i32 %v7_dd70, 256
  store i32 %v1_dd7c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_dd88 = load i32, i32* @r4, align 4
  store i32 %v0_dd88, i32* %r0.global-to-local, align 4
  %v0_dd8c = load i32, i32* @r5, align 4
  store i32 %v0_dd8c, i32* %r1.global-to-local, align 4
  %v5_dd94 = inttoptr i32 %v0_dd8c to i32*
  %v6_dd94 = call i32 @function_a054(i32 %v0_dd88, i32* %v5_dd94, i32 6, i32 65535)
  %v0_dd98 = load i32, i32* @r5, align 4
  store i32 %v0_dd98, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_dda4 = load i32, i32* @r4, align 4
  store i32 %v0_dda4, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_ddac = inttoptr i32 %v0_dd98 to i32*
  %v6_ddac = call i32 @function_a054(i32 %v0_dda4, i32* %v5_ddac, i32 7, i32 53)
  %v0_ddb8 = load i32, i32* @r5, align 4
  store i32 %v0_ddb8, i32* %r1.global-to-local, align 4
  %v0_ddbc = load i32, i32* @r4, align 4
  store i32 %v0_ddbc, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ddc8 = inttoptr i32 %v0_ddb8 to i32*
  %v6_ddc8 = call i32 @function_a054(i32 %v0_ddbc, i32* %v5_ddc8, i32 9, i32 65535)
  %v0_ddcc = load i32, i32* @r5, align 4
  store i32 %v0_ddcc, i32* %r1.global-to-local, align 4
  %v0_ddd4 = load i32, i32* @r6, align 4
  store i32 %v0_ddd4, i32* %r2.global-to-local, align 4
  %v0_ddd8 = load i32, i32* @r4, align 4
  store i32 %v0_ddd8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_dde0 = inttoptr i32 %v0_ddcc to i32*
  %v6_dde0 = call i32 @function_a054(i32 %v0_ddd8, i32* %v5_dde0, i32 %v0_ddd4, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_dde8 = load i32, i32* @r6, align 4
  store i32 %v0_dde8, i32* %r3.global-to-local, align 4
  %v0_ddec = load i32, i32* @r5, align 4
  store i32 %v0_ddec, i32* %r1.global-to-local, align 4
  %v0_ddf4 = load i32, i32* @r4, align 4
  store i32 %v0_ddf4, i32* %r0.global-to-local, align 4
  %v5_ddf8 = inttoptr i32 %v0_ddec to i32*
  %v6_ddf8 = call i32 @function_9f84(i32 %v0_ddf4, i32* %v5_ddf8, i32 8, i32 %v0_dde8, i32 %v6_dde0)
  store i32 %v6_ddf8, i32* @r7, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_de04 = call i32 @function_121d4(i32 33)
  %v0_de08 = load i32, i32* @r6, align 4
  store i32 %v0_de08, i32* %r1.global-to-local, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_de10 = inttoptr i32 %v0_de08 to i32*
  %v3_de10 = call i32 @function_120f0(i32 33, i32* %v2_de10)
  store i32 %v3_de10, i32* %r0.global-to-local, align 4
  %v0_de14 = load i32, i32* @r6, align 4
  store i32 %v0_de14, i32* %r1.global-to-local, align 4
  %v2_de18 = inttoptr i32 %v3_de10 to i8*
  %v3_de18 = call i32 @function_136fc(i8* %v2_de18, i32 %v0_de14)
  store i32 %v3_de18, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_de24 = call i32 @function_1211c(i32 33)
  store i32 %v1_de24, i32* %r0.global-to-local, align 4
  %v0_de28 = load i32, i32* @r4, align 4
  %v1_de28 = load i32, i32* @r6, align 4
  %v9_de28 = icmp eq i32 %v0_de28, %v1_de28
  store i1 %v9_de28, i1* %cpsr_z.global-to-local, align 1
  %v5_de2c = icmp slt i32 %v0_de28, %v1_de28
  br i1 %v5_de2c, label %dec_label_pc_df00, label %dec_label_pc_de30

dec_label_pc_de30:                                ; preds = %dec_label_pc_dcc8
  %v2_de34 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_de34, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_de34, i32* %r1.global-to-local, align 4
  store i32 %v0_de28, i32* %r0.global-to-local, align 4
  %v4_de44 = call i32 @function_13798(i32 %v0_de28, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_de44, i32* @r5, align 4
  %v0_de4c = load i32, i32* @r4, align 4
  store i32 %v0_de4c, i32* %r0.global-to-local, align 4
  %v1_de50 = call i32 @function_135d0(i32 %v0_de4c)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_de58 = call i32 @function_121d4(i32 34)
  %v0_de5c = load i32, i32* @r6, align 4
  store i32 %v0_de5c, i32* %r1.global-to-local, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_de64 = inttoptr i32 %v0_de5c to i32*
  %v3_de64 = call i32 @function_120f0(i32 34, i32* %v2_de64)
  %v0_de68 = load i32, i32* @r5, align 4
  store i32 %v0_de68, i32* @r1, align 4
  store i32 %v3_de64, i32* %r2.global-to-local, align 4
  store i32 %v2_de34, i32* %r0.global-to-local, align 4
  %v3_de74 = bitcast i32* %stack_var_-2120 to i8*
  %v4_de74 = call i32 @function_12f90(i8* %v3_de74, i32 %v0_de68, i32 %v3_de64)
  store i32 %v4_de74, i32* %r8.global-to-local, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_de80 = call i32 @function_1211c(i32 34)
  store i32 %v1_de80, i32* %r0.global-to-local, align 4
  %v7_de84 = icmp eq i32 %v4_de74, -1
  store i1 %v7_de84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de84, label %dec_label_pc_df00, label %dec_label_pc_de8c

dec_label_pc_de8c:                                ; preds = %dec_label_pc_de30
  %v0_de8c = load i32, i32* @r5, align 4
  %v9_de8c = icmp eq i32 %v0_de8c, %v4_de74
  store i1 %v9_de8c, i1* %cpsr_z.global-to-local, align 1
  %v7_de90 = icmp sgt i32 %v0_de8c, %v4_de74
  br i1 %v7_de90, label %dec_label_pc_de94, label %dec_label_pc_df00

dec_label_pc_de94:                                ; preds = %dec_label_pc_de8c
  %v2_de8c = sub i32 %v0_de8c, %v4_de74
  store i32 %v2_de8c, i32* %r3.global-to-local, align 4
  %v2_de9c = ptrtoint i32* %stack_var_-72 to i32
  %v0_dea0 = load i32, i32* @r6, align 4
  store i32 %v0_dea0, i32* %r1.global-to-local, align 4
  store i32 %v4_de74, i32* %r2.global-to-local, align 4
  %v0_deac = load i32, i32* %sl.global-to-local, align 4
  %v2_deac = add i32 %v0_deac, %v4_de74
  store i32 %v2_deac, i32* %r0.global-to-local, align 4
  store i32 %v2_de9c, i32* @r4, align 4
  %v1_debc = add i32 %v0_de8c, -1
  br label %dec_label_pc_deb4

dec_label_pc_deb4:                                ; preds = %dec_label_pc_def0, %dec_label_pc_de94
  %v0_def8 = phi i32 [ %v1_def8, %dec_label_pc_def0 ], [ %v2_de9c, %dec_label_pc_de94 ]
  %v0_def0 = phi i32 [ %v1_def0, %dec_label_pc_def0 ], [ %v4_de74, %dec_label_pc_de94 ]
  %v0_ded8 = phi i32 [ %v0_ded846, %dec_label_pc_def0 ], [ %v0_dea0, %dec_label_pc_de94 ]
  %v0_deb8 = phi i32 [ %v0_deb842, %dec_label_pc_def0 ], [ %v0_dea0, %dec_label_pc_de94 ]
  %v0_dec0 = phi i32 [ %v1_dec0, %dec_label_pc_def0 ], [ %v2_deac, %dec_label_pc_de94 ]
  %v1_deb4 = inttoptr i32 %v0_dec0 to i8*
  %v2_deb4 = load i8, i8* %v1_deb4, align 1
  %v3_deb4 = zext i8 %v2_deb4 to i32
  store i32 %v3_deb4, i32* %r3.global-to-local, align 4
  %v2_deb8 = icmp eq i32 %v0_deb8, 0
  store i1 %v2_deb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_debc, i32* %lr.global-to-local, align 4
  %v1_dec0 = add i32 %v0_dec0, 1
  store i32 %v1_dec0, i32* %r0.global-to-local, align 4
  %v1_dec4 = add nsw i32 %v3_deb4, -48
  store i32 %v1_dec4, i32* %ip.global-to-local, align 4
  br i1 %v2_deb8, label %dec_label_pc_decc, label %dec_label_pc_dedc

dec_label_pc_decc:                                ; preds = %dec_label_pc_deb4
  %v7_decc = icmp eq i8 %v2_deb4, 9
  store i1 %v7_decc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_decc, label %dec_label_pc_def0, label %bb

bb:                                               ; preds = %dec_label_pc_decc
  %v8_ded0 = icmp eq i8 %v2_deb4, 32
  store i1 %v8_ded0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ded0, label %dec_label_pc_def0, label %dec_label_pc_ded8

dec_label_pc_ded8:                                ; preds = %bb
  %v1_ded8 = add i32 %v0_ded8, 1
  store i32 %v1_ded8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_dedc

dec_label_pc_dedc:                                ; preds = %dec_label_pc_deb4, %dec_label_pc_ded8
  %v0_ded847 = phi i32 [ %v0_ded8, %dec_label_pc_deb4 ], [ %v1_ded8, %dec_label_pc_ded8 ]
  %v0_deb843 = phi i32 [ %v0_deb8, %dec_label_pc_deb4 ], [ %v1_ded8, %dec_label_pc_ded8 ]
  %v7_dedc = icmp eq i8 %v2_deb4, 46
  store i1 %v7_dedc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dedc, label %dec_label_pc_dee8, label %bb129

bb129:                                            ; preds = %dec_label_pc_dedc
  %v3_dee0 = icmp ugt i32 %v1_dec4, 8
  %v8_dee0 = icmp eq i32 %v1_dec4, 9
  store i1 %v8_dee0, i1* %cpsr_z.global-to-local, align 1
  %v2_dee4 = xor i1 %v8_dee0, true
  %v3_dee4 = and i1 %v3_dee0, %v2_dee4
  br i1 %v3_dee4, label %dec_label_pc_e430, label %dec_label_pc_dee8

dec_label_pc_dee8:                                ; preds = %dec_label_pc_dedc, %bb129
  %v9_dee8 = icmp eq i32 %v0_def0, %v1_debc
  store i1 %v9_dee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dee8, label %dec_label_pc_e430, label %dec_label_pc_def0

dec_label_pc_def0:                                ; preds = %dec_label_pc_decc, %dec_label_pc_dee8, %bb
  %v0_ded846 = phi i32 [ %v0_ded8, %dec_label_pc_decc ], [ %v0_ded847, %dec_label_pc_dee8 ], [ %v0_ded8, %bb ]
  %v0_deb842 = phi i32 [ 0, %dec_label_pc_decc ], [ %v0_deb843, %dec_label_pc_dee8 ], [ 0, %bb ]
  %v1_def0 = add i32 %v0_def0, 1
  store i32 %v1_def0, i32* %r2.global-to-local, align 4
  %v9_def4 = icmp eq i32 %v0_de8c, %v1_def0
  store i1 %v9_def4, i1* %cpsr_z.global-to-local, align 1
  %v1_def8 = add i32 %v0_def8, 1
  store i32 %v1_def8, i32* @r4, align 4
  br i1 %v9_def4, label %dec_label_pc_df00, label %dec_label_pc_deb4

dec_label_pc_df00:                                ; preds = %dec_label_pc_def0, %dec_label_pc_de8c, %dec_label_pc_de30, %dec_label_pc_dcc8
  %v0_df00 = call i32 @function_f8c8()
  %v1_df04 = urem i32 %v0_df00, 4
  store i32 %v1_df04, i32* %r0.global-to-local, align 4
  %v2_df08 = icmp eq i32 %v1_df04, 3
  store i1 %v2_df08, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_df00 to i2
  switch i2 %trunc, label %dec_label_pc_df2c25 [
    i2 0, label %dec_label_pc_e468
    i2 1, label %dec_label_pc_df24
    i2 -2, label %dec_label_pc_e458
    i2 -1, label %dec_label_pc_e47c
  ]

dec_label_pc_df24:                                ; preds = %dec_label_pc_df00
  store i32 74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_df2c

dec_label_pc_df2c25:                              ; preds = %dec_label_pc_df00
  unreachable

dec_label_pc_df2c:                                ; preds = %dec_label_pc_e47c, %dec_label_pc_e468, %dec_label_pc_e458, %dec_label_pc_e430, %dec_label_pc_df24
  %stack_var_-2188.0 = phi i32 [ 4, %dec_label_pc_e47c ], [ 64, %dec_label_pc_e458 ], [ 74, %dec_label_pc_df24 ], [ 8, %dec_label_pc_e468 ], [ %phitmp, %dec_label_pc_e430 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_df30 = call i32 @function_138a0(i32* null)
  %v0_df34 = load i32, i32* @r7, align 4
  %v2_df34 = icmp eq i32 %v0_df34, 0
  store i1 %v2_df34, i1* %cpsr_z.global-to-local, align 1
  %v1_df38 = load i32, i32* %fp.global-to-local, align 4
  %v2_df38 = add i32 %v1_df38, %v2_df30
  store i32 %v2_df38, i32* %r0.global-to-local, align 4
  br i1 %v2_df34, label %dec_label_pc_e40c, label %dec_label_pc_df44

dec_label_pc_df44:                                ; preds = %dec_label_pc_df2c
  store i32 %v0_df34, i32* %r0.global-to-local, align 4
  %v1_df48 = inttoptr i32 %v0_df34 to i8*
  %v2_df48 = call i32 @function_12c3c(i8* %v1_df48)
  %v3_df48 = inttoptr i32 %v2_df48 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_df5c = call i32 @function_13ebc(i32 2, i32 3, i32 17)
  store i32 %v3_df5c, i32* %r0.global-to-local, align 4
  %v7_df60 = icmp eq i32 %v3_df5c, -1
  store i1 %v7_df60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df60, label %dec_label_pc_e40c, label %dec_label_pc_df6c

dec_label_pc_df6c:                                ; preds = %dec_label_pc_df44
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df78 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df78, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_df8c = call i32 @function_13e8c(i32 %v3_df5c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_df8c, i32* %r0.global-to-local, align 4
  %v7_df90 = icmp eq i32 %v6_df8c, -1
  store i1 %v7_df90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df90, label %dec_label_pc_e404, label %dec_label_pc_df98

dec_label_pc_df98:                                ; preds = %dec_label_pc_df6c
  %v3_dfa0 = mul i32 %v7_dd38, 65536
  store i32 %v3_dfa0, i32* %r8.global-to-local, align 4
  %v3_dfac = mul i32 %v6_dd94, 65536
  store i32 %v3_dfac, i32* %r0.global-to-local, align 4
  %v3_dfb0 = mul i32 %v6_ddac, 65536
  store i32 %v3_dfb0, i32* %sl.global-to-local, align 4
  %v3_dfb4 = mul i32 %v6_ddc8, 65536
  store i32 %v3_dfb4, i32* %fp.global-to-local, align 4
  %v2_dfb8 = icmp eq i32 %v1_dcd4, 0
  store i1 %v2_dfb8, i1* %cpsr_z.global-to-local, align 1
  %v1_dfbc = urem i32 %v6_dde0, 256
  store i32 %v1_dfbc, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_dfc4 = urem i32 %v7_dd38, 65536
  %v3_dfc8 = urem i32 %v6_dd94, 65536
  store i32 %v3_dfc8, i32* %ip.global-to-local, align 4
  %v3_dfcc = urem i32 %v6_ddac, 65536
  store i32 %v3_dfcc, i32* %lr.global-to-local, align 4
  %v3_dfd0 = urem i32 %v6_ddc8, 65536
  store i32 %v3_dfd0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_dfb8, label %dec_label_pc_e418.critedge, label %dec_label_pc_dfec

dec_label_pc_dfec:                                ; preds = %dec_label_pc_df98
  %v2_dff4 = add i32 %v2_df48, %v1_dfbc
  %v3_dff8 = mul i32 %v2_dff4, 65536
  %v1_dffc = add i32 %v3_dff8, 1769472
  %v1_e000 = add i32 %v3_dff8, 3080192
  %v1_e01c = urem i32 %v6_ddc8, 256
  %tmp130 = udiv i32 %v6_dd94, 256
  %v3_e020 = urem i32 %tmp130, 256
  %v1_e024 = urem i32 %v6_dd94, 256
  %v1_e018 = mul i32 %v7_dd38, 256
  %v3_e02c = and i32 %v1_e018, 65280
  store i32 %v3_e02c, i32* %r1.global-to-local, align 4
  %v1_e034 = urem i32 %v6_ddac, 256
  %tmp131 = udiv i32 %v7_dd38, 256
  %v3_e03c = udiv i32 %v1_dffc, 256
  %v1_e044 = and i32 %v3_e03c, 65280
  %tmp132 = udiv i32 %v6_ddac, 256
  %v4_e054 = udiv i32 %v1_dffc, 16777216
  %v5_e054 = or i32 %v1_e044, %v4_e054
  store i32 %v5_e054, i32* @r6, align 4
  %v3_e05c = sdiv i32 %v1_e000, 16777216
  %sext39 = mul i32 %tmp131, 16777216
  %v7_e05c = sdiv i32 %sext39, 16777216
  %v3_e060 = mul nuw nsw i32 %v1_e01c, 256
  %v4_e068 = mul nuw nsw i32 %v1_e024, 256
  %v5_e068 = or i32 %v4_e068, %v3_e020
  store i32 %v5_e068, i32* %r0.global-to-local, align 4
  %v3_e06c = ashr i32 %v1_e000, 31
  %tmp133 = udiv i32 %v6_ddc8, 256
  %v4_e070 = urem i32 %tmp133, 256
  %v5_e070 = or i32 %v4_e070, %v3_e060
  store i32 %v5_e070, i32* @r5, align 4
  %v3_e074 = ashr i32 %sext39, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_e07c = add i32 %v2_df48, 1
  store i32 %v2_e07c, i32* %fp.global-to-local, align 4
  store i32 %v1_e034, i32* %r3.global-to-local, align 4
  store i32 %v1_e024, i32* %r2.global-to-local, align 4
  %v3_e09069 = udiv i32 %v1_e044, 256
  store i32 %v3_e09069, i32* %ip.global-to-local, align 4
  store i32 %v1_e01c, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  %v5_e09c = trunc i32 %tmp130 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext18 = mul i32 %v6_dd50, 16777216
  %v4_e11c = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v1_dffc, 256
  %v4_e14c = sdiv i32 %sext19, 16777216
  %sext21 = mul i32 %v6_ddac, 16777216
  %v4_e168 = sdiv i32 %sext21, 16777216
  %sext22 = mul nuw i32 %v4_e054, 16777216
  %v4_e16c = sdiv i32 %sext22, 16777216
  %sext24 = mul i32 %v6_ddc8, 16777216
  %v4_e18c = sdiv i32 %sext24, 16777216
  %v1_e110 = trunc i32 %v3_e06c to i8
  %extract.t = trunc i32 %v3_e074 to i8
  %v1_e170 = trunc i32 %tmp132 to i8
  %v1_e198 = trunc i32 %v6_dd94 to i8
  br label %dec_label_pc_e0bc

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_e21c, %dec_label_pc_dfec
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_e0c4 = call i32 @function_141a8(i32 600, i32 1)
  store i32 %v2_e0c4, i32* %r0.global-to-local, align 4
  store i32 %v2_dcfc, i32* %r2.global-to-local, align 4
  %v3_e0cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e0cc, i32* %r3.global-to-local, align 4
  %v2_e0d0 = load i32, i32* @r4, align 4
  %v5_e0d0 = mul i32 %v2_e0d0, 4
  %v6_e0d0 = add i32 %v5_e0d0, %v2_dcfc
  %v7_e0d0 = inttoptr i32 %v6_e0d0 to i32*
  store i32 %v2_e0c4, i32* %v7_e0d0, align 4
  %v0_e0d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e0d4 = load i32, i32* %r3.global-to-local, align 4
  %v4_e0d4 = mul i32 %v1_e0d4, 4
  %v5_e0d4 = add i32 %v4_e0d4, %v0_e0d4
  %v6_e0d4 = inttoptr i32 %v5_e0d4 to i32*
  %v7_e0d4 = load i32, i32* %v6_e0d4, align 4
  store i32 %v7_e0d4, i32* %r1.global-to-local, align 4
  %v1_e0d8 = inttoptr i32 %v7_e0d4 to i8*
  %v2_e0d8 = load i8, i8* %v1_e0d8, align 1
  %tmp = urem i8 %v2_e0d8, 16
  %v1_e0dc = zext i8 %tmp to i32
  %v1_e0e0 = or i32 %v1_e0dc, 64
  store i32 %v1_e0e0, i32* %r2.global-to-local, align 4
  %v1_e0e4 = trunc i32 %v1_e0e0 to i8
  store i8 %v1_e0e4, i8* %v1_e0d8, align 1
  %v0_e0e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0e8 = inttoptr i32 %v0_e0e8 to i8*
  %v2_e0e8 = load i8, i8* %v1_e0e8, align 1
  %v1_e0ec = and i8 %v2_e0e8, -16
  %v1_e0f0 = or i8 %v1_e0ec, 5
  store i32 %v1_dd7c, i32* %ip.global-to-local, align 4
  store i8 %v1_e0f0, i8* %v1_e0e8, align 1
  %v2_e100 = load i32, i32* %r1.global-to-local, align 4
  %v3_e100 = add i32 %v2_e100, 1
  %v4_e100 = inttoptr i32 %v3_e100 to i8*
  store i8 %v5_dd34, i8* %v4_e100, align 1
  store i32 %v3_e06c, i32* %r3.global-to-local, align 4
  store i32 %v3_e05c, i32* %r2.global-to-local, align 4
  %v0_e10c = load i32, i32* %ip.global-to-local, align 4
  %v2_e10c = icmp eq i32 %v0_e10c, 0
  store i1 %v2_e10c, i1* %cpsr_z.global-to-local, align 1
  %v2_e110 = load i32, i32* %r1.global-to-local, align 4
  %v3_e110 = add i32 %v2_e110, 3
  %v4_e110 = inttoptr i32 %v3_e110 to i8*
  store i8 %v1_e110, i8* %v4_e110, align 1
  %v0_e114 = load i32, i32* %r2.global-to-local, align 4
  %v1_e114 = trunc i32 %v0_e114 to i8
  %v2_e114 = load i32, i32* %r1.global-to-local, align 4
  %v3_e114 = add i32 %v2_e114, 2
  %v4_e114 = inttoptr i32 %v3_e114 to i8*
  store i8 %v1_e114, i8* %v4_e114, align 1
  store i32 %v3_e074, i32* %lr.global-to-local, align 4
  store i32 %v4_e11c, i32* %r2.global-to-local, align 4
  %v0_e120 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e120, label %.thread26, label %bb134

bb134:                                            ; preds = %dec_label_pc_e0bc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e124 = load i32, i32* %r1.global-to-local, align 4
  %v4_e124 = add i32 %v3_e124, 6
  %v5_e124 = inttoptr i32 %v4_e124 to i8*
  store i8 64, i8* %v5_e124, align 1
  %v0_e12c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t70 = trunc i32 %v0_e12c.pre to i8
  br label %.thread26

.thread26:                                        ; preds = %dec_label_pc_e0bc, %bb134
  %v0_e12c.off0 = phi i8 [ %extract.t, %dec_label_pc_e0bc ], [ %extract.t70, %bb134 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_e12c = load i32, i32* %r1.global-to-local, align 4
  %v3_e12c = add i32 %v2_e12c, 5
  %v4_e12c = inttoptr i32 %v3_e12c to i8*
  store i8 %v0_e12c.off0, i8* %v4_e12c, align 1
  store i32 %v7_e05c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f238.83 to i32), i32* %lr.global-to-local, align 4
  %v0_e138 = load i32, i32* %r2.global-to-local, align 4
  %v1_e138 = trunc i32 %v0_e138 to i8
  %v2_e138 = load i32, i32* %r1.global-to-local, align 4
  %v3_e138 = add i32 %v2_e138, 8
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* %r3.global-to-local, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %r1.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 9
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  %v0_e140 = load i32, i32* %r1.global-to-local, align 4
  %v1_e140 = add i32 %v0_e140, 41
  %v2_e144 = load i32, i32* @global_var_1f238.83, align 4
  store i32 %v2_e144, i32* %r3.global-to-local, align 4
  %v0_e148 = load i32, i32* @sb, align 4
  %v2_e148 = add i32 %v1_e140, %v0_e148
  store i32 %v2_e148, i32* %r4.global-to-local, align 4
  store i32 %v4_e14c, i32* %r2.global-to-local, align 4
  %v1_e150 = add i32 %v0_e140, 20
  store i32 %v1_e150, i32* %r0.global-to-local, align 4
  %v0_e154 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e154, label %bb136, label %bb135

bb135:                                            ; preds = %.thread26
  %v1_e154 = load i32, i32* %sl.global-to-local, align 4
  %v2_e154 = trunc i32 %v1_e154 to i8
  %v4_e154 = add i32 %v0_e140, 7
  %v5_e154 = inttoptr i32 %v4_e154 to i8*
  store i8 %v2_e154, i8* %v5_e154, align 1
  %v2_e158.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb136

bb136:                                            ; preds = %.thread26, %bb135
  %v2_e158 = phi i32 [ %v0_e140, %.thread26 ], [ %v2_e158.pre, %bb135 ]
  %v0_e158 = load i32, i32* %ip.global-to-local, align 4
  %v1_e158 = trunc i32 %v0_e158 to i8
  %v3_e158 = add i32 %v2_e158, 4
  %v4_e158 = inttoptr i32 %v3_e158 to i8*
  store i8 %v1_e158, i8* %v4_e158, align 1
  %v0_e15c = load i32, i32* %r3.global-to-local, align 4
  %v1_e15c = load i32, i32* %r1.global-to-local, align 4
  %v2_e15c = add i32 %v1_e15c, 12
  %v3_e15c = inttoptr i32 %v2_e15c to i32*
  store i32 %v0_e15c, i32* %v3_e15c, align 4
  %v0_e160 = load i32, i32* %r2.global-to-local, align 4
  %v1_e160 = trunc i32 %v0_e160 to i8
  %v2_e160 = load i32, i32* %r0.global-to-local, align 4
  %v3_e160 = add i32 %v2_e160, 5
  %v4_e160 = inttoptr i32 %v3_e160 to i8*
  store i8 %v1_e160, i8* %v4_e160, align 1
  store i32 %v4_e168, i32* %lr.global-to-local, align 4
  store i32 %v4_e16c, i32* %r2.global-to-local, align 4
  %v2_e170 = load i32, i32* %r0.global-to-local, align 4
  %v3_e170 = add i32 %v2_e170, 2
  %v4_e170 = inttoptr i32 %v3_e170 to i8*
  store i8 %v1_e170, i8* %v4_e170, align 1
  %v0_e174 = load i32, i32* %lr.global-to-local, align 4
  %v1_e174 = trunc i32 %v0_e174 to i8
  %v2_e174 = load i32, i32* %r0.global-to-local, align 4
  %v3_e174 = add i32 %v2_e174, 3
  %v4_e174 = inttoptr i32 %v3_e174 to i8*
  store i8 %v1_e174, i8* %v4_e174, align 1
  %v0_e178 = load i32, i32* %r2.global-to-local, align 4
  %v1_e178 = trunc i32 %v0_e178 to i8
  %v2_e178 = load i32, i32* %r0.global-to-local, align 4
  %v3_e178 = add i32 %v2_e178, 4
  %v4_e178 = inttoptr i32 %v3_e178 to i8*
  store i8 %v1_e178, i8* %v4_e178, align 1
  store i32 %stack_var_-2188.0, i32* %lr.global-to-local, align 4
  %v2_e184 = load i32, i32* %r1.global-to-local, align 4
  %v3_e184 = add i32 %v2_e184, 20
  %v4_e184 = inttoptr i32 %v3_e184 to i8*
  store i8 %v5_e09c, i8* %v4_e184, align 1
  store i32 %v4_e18c, i32* %r3.global-to-local, align 4
  %v0_e190 = load i32, i32* %r1.global-to-local, align 4
  %v1_e190 = add i32 %v0_e190, 28
  store i32 %v1_e190, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v2_e198 = load i32, i32* %r0.global-to-local, align 4
  %v3_e198 = add i32 %v2_e198, 1
  %v4_e198 = inttoptr i32 %v3_e198 to i8*
  store i8 %v1_e198, i8* %v4_e198, align 1
  %v0_e19c = load i32, i32* %lr.global-to-local, align 4
  %v1_e19c = load i32, i32* %r1.global-to-local, align 4
  %v2_e19c = add i32 %v1_e19c, 16
  %v3_e19c = inttoptr i32 %v2_e19c to i32*
  store i32 %v0_e19c, i32* %v3_e19c, align 4
  %v0_e1a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_e1a0 = trunc i32 %v0_e1a0 to i8
  %v2_e1a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1a0 = add i32 %v2_e1a0, 5
  %v4_e1a0 = inttoptr i32 %v3_e1a0 to i8*
  store i8 %v1_e1a0, i8* %v4_e1a0, align 1
  %v0_e1a4 = load i32, i32* @r5, align 4
  %v1_e1a4 = trunc i32 %v0_e1a4 to i8
  %v2_e1a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e1a4 = add i32 %v2_e1a4, 28
  %v4_e1a4 = inttoptr i32 %v3_e1a4 to i8*
  store i8 %v1_e1a4, i8* %v4_e1a4, align 1
  %v0_e1a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_e1a8 = trunc i32 %v0_e1a8 to i8
  %v2_e1a8 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1a8 = add i32 %v2_e1a8, 2
  %v4_e1a8 = inttoptr i32 %v3_e1a8 to i8*
  store i8 %v1_e1a8, i8* %v4_e1a8, align 1
  %v0_e1ac = load i32, i32* %r3.global-to-local, align 4
  %v1_e1ac = trunc i32 %v0_e1ac to i8
  %v2_e1ac = load i32, i32* %ip.global-to-local, align 4
  %v3_e1ac = add i32 %v2_e1ac, 1
  %v4_e1ac = inttoptr i32 %v3_e1ac to i8*
  store i8 %v1_e1ac, i8* %v4_e1ac, align 1
  %v0_e1b0 = load i32, i32* @r6, align 4
  %v1_e1b0 = trunc i32 %v0_e1b0 to i8
  %v2_e1b0 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1b0 = add i32 %v2_e1b0, 3
  %v4_e1b0 = inttoptr i32 %v3_e1b0 to i8*
  store i8 %v1_e1b0, i8* %v4_e1b0, align 1
  %v0_e1b4 = load i32, i32* @r6, align 4
  %v1_e1b4 = trunc i32 %v0_e1b4 to i8
  %v2_e1b4 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1b4 = add i32 %v2_e1b4, 4
  %v4_e1b4 = inttoptr i32 %v3_e1b4 to i8*
  store i8 %v1_e1b4, i8* %v4_e1b4, align 1
  %v0_e1b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_e1b8 = add i32 %v0_e1b8, 1
  store i32 %v1_e1b8, i32* %r0.global-to-local, align 4
  %v0_e1bc = load i32, i32* @sb, align 4
  %v1_e1bc = trunc i32 %v0_e1bc to i8
  %v2_e1bc = load i32, i32* %r1.global-to-local, align 4
  %v3_e1bc = add i32 %v2_e1bc, 40
  %v4_e1bc = inttoptr i32 %v3_e1bc to i8*
  store i8 %v1_e1bc, i8* %v4_e1bc, align 1
  %v0_e1c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_e1c0, i32* %r2.global-to-local, align 4
  %v0_e1c4 = load i32, i32* @r7, align 4
  store i32 %v0_e1c4, i32* %r1.global-to-local, align 4
  %v3_e1c8 = call i32 @function_12cb8(i32 %v1_e1b8, i32 %v0_e1c4, i32 %v0_e1c0)
  store i32 %v3_e1c8, i32* %r0.global-to-local, align 4
  %v1_e1d0 = load i32, i32* @r6, align 4
  %v10_e1d0 = inttoptr i32 %v1_e1d0 to i8*
  %v15_e1d0 = icmp eq i32 %v2_df48, %v1_e1d0
  store i1 %v15_e1d0, i1* %cpsr_z.global-to-local, align 1
  %v9_e1d4 = icmp sgt i8* %v3_df48, %v10_e1d0
  store i32 %v1_e1d0, i32* %lr.global-to-local, align 4
  %v0_e1e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e1e4, i32* %ip.global-to-local, align 4
  %extract.t72 = trunc i32 %v1_e1d0 to i8
  br i1 %v9_e1d4, label %dec_label_pc_e1e0, label %dec_label_pc_e21c

dec_label_pc_e1e0:                                ; preds = %bb136
  store i32 %v1_e1d0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e1ec

dec_label_pc_e1ec:                                ; preds = %.thread38, %dec_label_pc_e1e0
  %v1_e1f4 = phi i32 [ %v1_e1f458, %.thread38 ], [ %v1_e1d0, %dec_label_pc_e1e0 ]
  %v0_e1ec = phi i32 [ %v1_e208, %.thread38 ], [ %v1_e1d0, %dec_label_pc_e1e0 ]
  %v1_e1ec = load i32, i32* @r7, align 4
  %v2_e1ec = add i32 %v1_e1ec, %v0_e1ec
  %v3_e1ec = inttoptr i32 %v2_e1ec to i8*
  %v4_e1ec = load i8, i8* %v3_e1ec, align 1
  %v6_e1ec = zext i8 %v4_e1ec to i32
  store i32 %v6_e1ec, i32* %r3.global-to-local, align 4
  %v7_e1f0 = icmp eq i8 %v4_e1ec, 46
  store i1 %v7_e1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e1f0, label %bb137, label %.thread34

.thread34:                                        ; preds = %dec_label_pc_e1ec
  %v1_e1f836 = add i32 %v1_e1f4, 1
  store i32 %v1_e1f836, i32* %r2.global-to-local, align 4
  br label %bb138

bb137:                                            ; preds = %dec_label_pc_e1ec
  %v2_e1f4 = trunc i32 %v1_e1f4 to i8
  %v3_e1f4 = load i32, i32* %ip.global-to-local, align 4
  %v4_e1f4 = inttoptr i32 %v3_e1f4 to i8*
  store i8 %v2_e1f4, i8* %v4_e1f4, align 1
  %v0_e1fc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_e1f8 = load i32, i32* %lr.global-to-local, align 4
  %v1_e1f8 = add i32 %v0_e1f8, 1
  store i32 %v1_e1f8, i32* %r2.global-to-local, align 4
  br i1 %v0_e1fc.pr, label %bb139, label %bb138

bb138:                                            ; preds = %.thread34, %bb137
  %v1_e1f837 = phi i32 [ %v1_e1f836, %.thread34 ], [ %v1_e1f8, %bb137 ]
  %v2_e1fc = urem i32 %v1_e1f837, 256
  store i32 %v2_e1fc, i32* %lr.global-to-local, align 4
  br label %bb139

bb139:                                            ; preds = %bb137, %bb138
  %v1_e1f459 = phi i32 [ %v0_e1f8, %bb137 ], [ %v2_e1fc, %bb138 ]
  %v0_e210.pr = phi i1 [ true, %bb137 ], [ false, %bb138 ]
  store i32 %v2_df48, i32* %r2.global-to-local, align 4
  %v0_e204 = load i32, i32* %r4.global-to-local, align 4
  %v1_e204 = load i32, i32* %r1.global-to-local, align 4
  %v2_e204 = add i32 %v1_e204, %v0_e204
  store i32 %v2_e204, i32* %r0.global-to-local, align 4
  %v1_e208 = add i32 %v1_e204, 1
  store i32 %v1_e208, i32* %r1.global-to-local, align 4
  br i1 %v0_e210.pr, label %bb140, label %.thread38

bb140:                                            ; preds = %bb139
  %v2_e20c = add i32 %v2_e204, 1
  store i32 %v2_e20c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread38

.thread38:                                        ; preds = %bb139, %bb140
  %v1_e1f458 = phi i32 [ %v1_e1f459, %bb139 ], [ 0, %bb140 ]
  %v9_e214 = icmp eq i32 %v2_df48, %v1_e208
  store i1 %v9_e214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e214, label %dec_label_pc_e21c.loopexit, label %dec_label_pc_e1ec

dec_label_pc_e21c.loopexit:                       ; preds = %.thread38
  %v2_e21c.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_e1f458 to i8
  br label %dec_label_pc_e21c

dec_label_pc_e21c:                                ; preds = %dec_label_pc_e21c.loopexit, %bb136
  %v2_e21c = phi i32 [ %v2_e21c.pre, %dec_label_pc_e21c.loopexit ], [ %v0_e1e4, %bb136 ]
  %v0_e21c.off0 = phi i8 [ %extract.t71, %dec_label_pc_e21c.loopexit ], [ %extract.t72, %bb136 ]
  %v3_e21c = inttoptr i32 %v2_e21c to i8*
  store i8 %v0_e21c.off0, i8* %v3_e21c, align 1
  %v3_e220 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_df48, i32* %ip.global-to-local, align 4
  store i32 %v1_dcd4, i32* @lr, align 4
  %v0_e22c = load i32, i32* %r4.global-to-local, align 4
  %v2_e22c = add i32 %v0_e22c, %v2_df48
  store i32 %v2_e22c, i32* %r3.global-to-local, align 4
  %v1_e230 = add i32 %v3_e220, 1
  store i32 %v1_e230, i32* @r4, align 4
  %v9_e234 = icmp eq i32 %v1_dcd4, %v1_e230
  store i1 %v9_e234, i1* %cpsr_z.global-to-local, align 1
  %v1_e238 = add i32 %v2_e22c, 2
  store i32 %v1_e238, i32* %r2.global-to-local, align 4
  %v0_e23c = load i32, i32* %sl.global-to-local, align 4
  %v1_e23c = trunc i32 %v0_e23c to i8
  %v4_e23c = inttoptr i32 %v1_e238 to i8*
  store i8 %v1_e23c, i8* %v4_e23c, align 1
  %v0_e240 = load i32, i32* %r8.global-to-local, align 4
  %v1_e240 = trunc i32 %v0_e240 to i8
  %v2_e240 = load i32, i32* %r2.global-to-local, align 4
  %v3_e240 = add i32 %v2_e240, 3
  %v4_e240 = inttoptr i32 %v3_e240 to i8*
  store i8 %v1_e240, i8* %v4_e240, align 1
  %v0_e244 = load i32, i32* %r8.global-to-local, align 4
  %v1_e244 = trunc i32 %v0_e244 to i8
  %v2_e244 = load i32, i32* %r2.global-to-local, align 4
  %v3_e244 = add i32 %v2_e244, 1
  %v4_e244 = inttoptr i32 %v3_e244 to i8*
  store i8 %v1_e244, i8* %v4_e244, align 1
  %v0_e248 = load i32, i32* %sl.global-to-local, align 4
  %v1_e248 = trunc i32 %v0_e248 to i8
  %v2_e248 = load i32, i32* %r2.global-to-local, align 4
  %v3_e248 = add i32 %v2_e248, 2
  %v4_e248 = inttoptr i32 %v3_e248 to i8*
  store i8 %v1_e248, i8* %v4_e248, align 1
  %v0_e24c = load i32, i32* @r4, align 4
  store i32 %v0_e24c, i32* %stack_var_-40, align 4
  %v8_e250 = icmp sgt i32 %v1_dcd4, %v1_e230
  br i1 %v8_e250, label %dec_label_pc_e0bc, label %dec_label_pc_e254

dec_label_pc_e254:                                ; preds = %dec_label_pc_e21c, %dec_label_pc_e418
  store i32 %v1_dcd4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_dfb8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_dfb8, label %dec_label_pc_e418, label %dec_label_pc_e268

dec_label_pc_e268:                                ; preds = %dec_label_pc_e254
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_e274 = load i32, i32* @sb, align 4
  %v2_e274 = add i32 %v0_e274, %v2_df48
  store i32 %v2_e274, i32* %r3.global-to-local, align 4
  %v1_e278 = add i32 %v2_e274, 47
  store i32 %v1_e278, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r8, align 4
  %v1_e280 = add i32 %v2_e274, 27
  store i32 %v1_e280, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e37c

dec_label_pc_e290:                                ; preds = %dec_label_pc_e37c
  store i32 %v3_dfc8, i32* %r3.global-to-local, align 4
  %v9_e294 = icmp eq i32 %v3_dfc8, %v1_e294
  store i1 %v9_e294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e294, label %dec_label_pc_e3b8, label %dec_label_pc_e29c

dec_label_pc_e29c:                                ; preds = %dec_label_pc_e39c.dec_label_pc_e29c_crit_edge, %dec_label_pc_e290
  %v1_e2a0 = phi i32 [ %v1_e2a0.pre, %dec_label_pc_e39c.dec_label_pc_e29c_crit_edge ], [ %v1_e294, %dec_label_pc_e290 ]
  store i32 %v3_dfcc, i32* %ip.global-to-local, align 4
  %v9_e2a0 = icmp eq i32 %v3_dfcc, %v1_e2a0
  store i1 %v9_e2a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2a0, label %dec_label_pc_e3d4, label %dec_label_pc_e2a8

dec_label_pc_e2a8:                                ; preds = %dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge, %dec_label_pc_e29c
  %v1_e2ac = phi i32 [ %v1_e2ac.pre, %dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge ], [ %v1_e2a0, %dec_label_pc_e29c ]
  store i32 %v3_dfd0, i32* %lr.global-to-local, align 4
  %v9_e2ac = icmp eq i32 %v3_dfd0, %v1_e2ac
  store i1 %v9_e2ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2ac, label %dec_label_pc_e3f0, label %dec_label_pc_e2b4

dec_label_pc_e2b4:                                ; preds = %dec_label_pc_e3d4, %dec_label_pc_e2a8, %dec_label_pc_e3f0
  %v0_e2b4 = load i32, i32* @r6, align 4
  store i32 %v0_e2b4, i32* %r0.global-to-local, align 4
  %v0_e2b8 = load i32, i32* @sb, align 4
  store i32 %v0_e2b8, i32* %r1.global-to-local, align 4
  %v2_e2bc = call i32 @function_f97c(i32 %v0_e2b4, i32 %v0_e2b8)
  %v0_e2c0 = load i32, i32* @r7, align 4
  %v1_e2c0 = trunc i32 %v0_e2c0 to i8
  %v2_e2c0 = load i32, i32* @r6, align 4
  %v3_e2c0 = load i32, i32* @sb, align 4
  %v4_e2c0 = add i32 %v3_e2c0, %v2_e2c0
  %v5_e2c0 = inttoptr i32 %v4_e2c0 to i8*
  store i8 %v1_e2c0, i8* %v5_e2c0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e2c8 = load i32, i32* @r7, align 4
  %v1_e2c8 = trunc i32 %v0_e2c8 to i8
  %v2_e2c8 = load i32, i32* @r4, align 4
  %v3_e2c8 = add i32 %v2_e2c8, 10
  %v4_e2c8 = inttoptr i32 %v3_e2c8 to i8*
  store i8 %v1_e2c8, i8* %v4_e2c8, align 1
  %v0_e2cc = load i32, i32* @r7, align 4
  %v1_e2cc = trunc i32 %v0_e2cc to i8
  %v2_e2cc = load i32, i32* @r4, align 4
  %v3_e2cc = add i32 %v2_e2cc, 11
  %v4_e2cc = inttoptr i32 %v3_e2cc to i8*
  store i8 %v1_e2cc, i8* %v4_e2cc, align 1
  %v0_e2d0 = load i32, i32* @r4, align 4
  store i32 %v0_e2d0, i32* @r0, align 4
  %v2_e2d4 = call i32 @function_e498(i32 %v0_e2d0, i32 20)
  %v3_e2d4 = trunc i32 %v2_e2d4 to i8
  store i32 %v2_e2d4, i32* %r0.global-to-local, align 4
  %v4_e2d8 = sdiv i32 %v2_e2d4, 256
  store i32 %v4_e2d8, i32* %r3.global-to-local, align 4
  %v1_e2dc = trunc i32 %v4_e2d8 to i8
  %v2_e2dc = load i32, i32* @r4, align 4
  %v3_e2dc = add i32 %v2_e2dc, 11
  %v4_e2dc = inttoptr i32 %v3_e2dc to i8*
  store i8 %v1_e2dc, i8* %v4_e2dc, align 1
  %v3_e2e0 = load i32, i32* @r4, align 4
  %v4_e2e0 = add i32 %v3_e2e0, 10
  %v5_e2e0 = inttoptr i32 %v4_e2e0 to i8*
  store i8 %v3_e2d4, i8* %v5_e2e0, align 1
  %v0_e2e4 = load i32, i32* @r7, align 4
  %v1_e2e4 = trunc i32 %v0_e2e4 to i8
  %v2_e2e4 = load i32, i32* @r5, align 4
  %v3_e2e4 = add i32 %v2_e2e4, 6
  %v4_e2e4 = inttoptr i32 %v3_e2e4 to i8*
  store i8 %v1_e2e4, i8* %v4_e2e4, align 1
  %v0_e2e8 = load i32, i32* @r7, align 4
  %v1_e2e8 = trunc i32 %v0_e2e8 to i8
  %v2_e2e8 = load i32, i32* @r5, align 4
  %v3_e2e8 = add i32 %v2_e2e8, 7
  %v4_e2e8 = inttoptr i32 %v3_e2e8 to i8*
  store i8 %v1_e2e8, i8* %v4_e2e8, align 1
  %v0_e2ec = load i32, i32* @r4, align 4
  %v1_e2ec = add i32 %v0_e2ec, 24
  %v2_e2ec = inttoptr i32 %v1_e2ec to i8*
  %v3_e2ec = load i8, i8* %v2_e2ec, align 1
  %v4_e2ec = zext i8 %v3_e2ec to i32
  store i32 %v4_e2ec, i32* %r3.global-to-local, align 4
  %v1_e2f0 = add i32 %v0_e2ec, 25
  %v2_e2f0 = inttoptr i32 %v1_e2f0 to i8*
  %v3_e2f0 = load i8, i8* %v2_e2f0, align 1
  %v4_e2f0 = zext i8 %v3_e2f0 to i32
  %v0_e2f4 = load i32, i32* @r5, align 4
  store i32 %v0_e2f4, i32* @r1, align 4
  %v4_e2f8 = mul nuw nsw i32 %v4_e2f0, 256
  %v5_e2f8 = or i32 %v4_e2f8, %v4_e2ec
  store i32 %v5_e2f8, i32* %r2.global-to-local, align 4
  store i32 %v0_e2ec, i32* %r0.global-to-local, align 4
  %v0_e300 = load i32, i32* @fp, align 4
  store i32 %v0_e300, i32* %r3.global-to-local, align 4
  %v4_e304 = call i32 @function_e4f4(i32 %v0_e2ec, i32 %v0_e2f4, i32 %v5_e2f8, i32 %v0_e300)
  %v5_e304 = trunc i32 %v4_e304 to i8
  store i32 %v4_e304, i32* %r0.global-to-local, align 4
  %v3_e308 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_e314 = mul i32 %v3_e308, 24
  store i32 %v5_e314, i32* %lr.global-to-local, align 4
  %v4_e31877 = udiv i32 %v4_e304, 256
  %v1_e31c = trunc i32 %v4_e31877 to i8
  %v2_e31c = load i32, i32* @r5, align 4
  %v3_e31c = add i32 %v2_e31c, 7
  %v4_e31c = inttoptr i32 %v3_e31c to i8*
  store i8 %v1_e31c, i8* %v4_e31c, align 1
  store i32 %stack_var_-2188.0, i32* %r3.global-to-local, align 4
  %v0_e324 = load i32, i32* %lr.global-to-local, align 4
  %v1_e324 = load i32, i32* %r2.global-to-local, align 4
  %v2_e324 = add i32 %v1_e324, %v0_e324
  store i32 %v2_e324, i32* %lr.global-to-local, align 4
  %v3_e328 = load i32, i32* @r5, align 4
  %v4_e328 = add i32 %v3_e328, 6
  %v5_e328 = inttoptr i32 %v4_e328 to i8*
  store i8 %v5_e304, i8* %v5_e328, align 1
  %v0_e32c = load i32, i32* %r3.global-to-local, align 4
  %v1_e32c = load i32, i32* %lr.global-to-local, align 4
  %v2_e32c = add i32 %v1_e32c, 4
  %v3_e32c = inttoptr i32 %v2_e32c to i32*
  store i32 %v0_e32c, i32* %v3_e32c, align 4
  %v0_e330 = load i32, i32* @r4, align 4
  %v1_e330 = add i32 %v0_e330, 20
  %v2_e330 = inttoptr i32 %v1_e330 to i32*
  %v3_e330 = load i32, i32* %v2_e330, align 4
  %v3_e334 = udiv i32 %v3_e330, 65536
  store i32 %v3_e334, i32* %r3.global-to-local, align 4
  %v3_e33816 = udiv i32 %v3_e330, 16777216
  %v1_e33c = trunc i32 %v3_e33816 to i8
  %v2_e33c = load i32, i32* %lr.global-to-local, align 4
  %v3_e33c = add i32 %v2_e33c, 3
  %v4_e33c = inttoptr i32 %v3_e33c to i8*
  store i8 %v1_e33c, i8* %v4_e33c, align 1
  %v0_e340 = load i32, i32* %r3.global-to-local, align 4
  %v1_e340 = trunc i32 %v0_e340 to i8
  %v2_e340 = load i32, i32* %lr.global-to-local, align 4
  %v3_e340 = add i32 %v2_e340, 2
  %v4_e340 = inttoptr i32 %v3_e340 to i8*
  store i8 %v1_e340, i8* %v4_e340, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e34c = load i32, i32* @r4, align 4
  store i32 %v0_e34c, i32* %r1.global-to-local, align 4
  store i32 %v3_df5c, i32* %r0.global-to-local, align 4
  store i32 %v1_e278, i32* %r2.global-to-local, align 4
  %v0_e358 = load i32, i32* %lr.global-to-local, align 4
  %v6_e360 = inttoptr i32 %v0_e34c to i32*
  %v7_e360 = call i32 @function_13e58(i32 %v3_df5c, i32* %v6_e360, i32 %v1_e278, i32 16384, i32 %v0_e358, i32 16)
  %v3_e364 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e364, i32* %r3.global-to-local, align 4
  %v1_e36c = add i32 %v3_e364, 1
  store i32 %v1_e36c, i32* %r0.global-to-local, align 4
  %v9_e370 = icmp eq i32 %v1_dcd4, %v1_e36c
  store i1 %v9_e370, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e36c, i32* %stack_var_-40, align 4
  %v7_e378 = icmp sgt i32 %v1_dcd4, %v1_e36c
  br i1 %v7_e378, label %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge, label %dec_label_pc_e418

dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge:    ; preds = %dec_label_pc_e2b4
  %v1_e388.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e37c

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge, %dec_label_pc_e268
  %v1_e294 = phi i32 [ %v1_e388.pre, %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge ], [ 65535, %dec_label_pc_e268 ]
  %v1_e384 = phi i32 [ %v1_e36c, %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge ], [ 0, %dec_label_pc_e268 ]
  store i32 %v2_dcfc, i32* %lr.global-to-local, align 4
  store i32 %v3_dfc4, i32* %r2.global-to-local, align 4
  %v4_e384 = mul i32 %v1_e384, 4
  %v5_e384 = add i32 %v4_e384, %v2_dcfc
  %v6_e384 = inttoptr i32 %v5_e384 to i32*
  %v7_e384 = load i32, i32* %v6_e384, align 4
  store i32 %v7_e384, i32* @r4, align 4
  %v9_e388 = icmp eq i32 %v3_dfc4, %v1_e294
  store i1 %v9_e388, i1* %cpsr_z.global-to-local, align 1
  %v1_e38c = add i32 %v7_e384, 20
  store i32 %v1_e38c, i32* @r5, align 4
  %v1_e390 = add i32 %v7_e384, 41
  store i32 %v1_e390, i32* @r6, align 4
  %v1_e394 = add i32 %v7_e384, 28
  store i32 %v1_e394, i32* @sl, align 4
  br i1 %v9_e388, label %dec_label_pc_e39c, label %dec_label_pc_e290

dec_label_pc_e39c:                                ; preds = %dec_label_pc_e37c
  %v0_e39c = call i32 @function_f8c8()
  %v1_e39c = trunc i32 %v0_e39c to i8
  store i32 %v0_e39c, i32* %r0.global-to-local, align 4
  %v4_e3a078 = udiv i32 %v0_e39c, 256
  %v1_e3a4 = trunc i32 %v4_e3a078 to i8
  %v2_e3a4 = load i32, i32* @r4, align 4
  %v3_e3a4 = add i32 %v2_e3a4, 5
  %v4_e3a4 = inttoptr i32 %v3_e3a4 to i8*
  store i8 %v1_e3a4, i8* %v4_e3a4, align 1
  store i32 %v3_dfc8, i32* %r3.global-to-local, align 4
  %v1_e3ac = load i32, i32* @r8, align 4
  %v9_e3ac = icmp eq i32 %v3_dfc8, %v1_e3ac
  store i1 %v9_e3ac, i1* %cpsr_z.global-to-local, align 1
  %v3_e3b0 = load i32, i32* @r4, align 4
  %v4_e3b0 = add i32 %v3_e3b0, 4
  %v5_e3b0 = inttoptr i32 %v4_e3b0 to i8*
  store i8 %v1_e39c, i8* %v5_e3b0, align 1
  %v0_e3b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3b4, label %dec_label_pc_e3b8, label %dec_label_pc_e39c.dec_label_pc_e29c_crit_edge

dec_label_pc_e39c.dec_label_pc_e29c_crit_edge:    ; preds = %dec_label_pc_e39c
  %v1_e2a0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e29c

dec_label_pc_e3b8:                                ; preds = %dec_label_pc_e39c, %dec_label_pc_e290
  %v0_e3b8 = call i32 @function_f8c8()
  %v1_e3b8 = trunc i32 %v0_e3b8 to i8
  store i32 %v0_e3b8, i32* %r0.global-to-local, align 4
  store i32 %v3_dfcc, i32* %ip.global-to-local, align 4
  %v4_e3c0 = sdiv i32 %v0_e3b8, 256
  store i32 %v4_e3c0, i32* %r3.global-to-local, align 4
  %v1_e3c4 = load i32, i32* @r8, align 4
  %v9_e3c4 = icmp eq i32 %v3_dfcc, %v1_e3c4
  store i1 %v9_e3c4, i1* %cpsr_z.global-to-local, align 1
  %v3_e3c8 = load i32, i32* @r4, align 4
  %v4_e3c8 = add i32 %v3_e3c8, 20
  %v5_e3c8 = inttoptr i32 %v4_e3c8 to i8*
  store i8 %v1_e3b8, i8* %v5_e3c8, align 1
  %v0_e3cc = load i32, i32* %r3.global-to-local, align 4
  %v1_e3cc = trunc i32 %v0_e3cc to i8
  %v2_e3cc = load i32, i32* @r5, align 4
  %v3_e3cc = add i32 %v2_e3cc, 1
  %v4_e3cc = inttoptr i32 %v3_e3cc to i8*
  store i8 %v1_e3cc, i8* %v4_e3cc, align 1
  %v0_e3d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3d0, label %dec_label_pc_e3d4, label %dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge

dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge:    ; preds = %dec_label_pc_e3b8
  %v1_e2ac.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e2a8

dec_label_pc_e3d4:                                ; preds = %dec_label_pc_e3b8, %dec_label_pc_e29c
  %v0_e3d4 = call i32 @function_f8c8()
  %v1_e3d4 = trunc i32 %v0_e3d4 to i8
  store i32 %v0_e3d4, i32* %r0.global-to-local, align 4
  store i32 %v3_dfd0, i32* %lr.global-to-local, align 4
  %v4_e3dc = sdiv i32 %v0_e3d4, 256
  store i32 %v4_e3dc, i32* %r3.global-to-local, align 4
  %v1_e3e0 = load i32, i32* @r8, align 4
  %v9_e3e0 = icmp eq i32 %v3_dfd0, %v1_e3e0
  store i1 %v9_e3e0, i1* %cpsr_z.global-to-local, align 1
  %v1_e3e4 = trunc i32 %v4_e3dc to i8
  %v2_e3e4 = load i32, i32* @r5, align 4
  %v3_e3e4 = add i32 %v2_e3e4, 3
  %v4_e3e4 = inttoptr i32 %v3_e3e4 to i8*
  store i8 %v1_e3e4, i8* %v4_e3e4, align 1
  %v3_e3e8 = load i32, i32* @r5, align 4
  %v4_e3e8 = add i32 %v3_e3e8, 2
  %v5_e3e8 = inttoptr i32 %v4_e3e8 to i8*
  store i8 %v1_e3d4, i8* %v5_e3e8, align 1
  %v0_e3ec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3ec, label %dec_label_pc_e3f0, label %dec_label_pc_e2b4

dec_label_pc_e3f0:                                ; preds = %dec_label_pc_e3d4, %dec_label_pc_e2a8
  %v0_e3f0 = call i32 @function_f8c8()
  %v1_e3f0 = trunc i32 %v0_e3f0 to i8
  store i32 %v0_e3f0, i32* %r0.global-to-local, align 4
  %v4_e3f4 = sdiv i32 %v0_e3f0, 256
  store i32 %v4_e3f4, i32* %r3.global-to-local, align 4
  %v3_e3f8 = load i32, i32* @r4, align 4
  %v4_e3f8 = add i32 %v3_e3f8, 28
  %v5_e3f8 = inttoptr i32 %v4_e3f8 to i8*
  store i8 %v1_e3f0, i8* %v5_e3f8, align 1
  %v0_e3fc = load i32, i32* %r3.global-to-local, align 4
  %v1_e3fc = trunc i32 %v0_e3fc to i8
  %v2_e3fc = load i32, i32* @sl, align 4
  %v3_e3fc = add i32 %v2_e3fc, 1
  %v4_e3fc = inttoptr i32 %v3_e3fc to i8*
  store i8 %v1_e3fc, i8* %v4_e3fc, align 1
  br label %dec_label_pc_e2b4

dec_label_pc_e404:                                ; preds = %dec_label_pc_df6c
  store i32 %v3_df5c, i32* %r0.global-to-local, align 4
  %v1_e408 = call i32 @function_135d0(i32 %v3_df5c)
  store i32 %v1_e408, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e40c

dec_label_pc_e40c:                                ; preds = %dec_label_pc_e418, %dec_label_pc_df44, %dec_label_pc_df2c, %dec_label_pc_e404
  %v29_e414 = phi i32 [ %v3_df5c, %dec_label_pc_df44 ], [ %v2_df38, %dec_label_pc_df2c ], [ %v1_e408, %dec_label_pc_e404 ], [ %v2_e41c, %dec_label_pc_e418 ]
  store i32 %v3_dcc8, i32* %r4.global-to-local, align 4
  store i32 %v15_dcc8, i32* %r8.global-to-local, align 4
  store i32 %v21_dcc8, i32* %sl.global-to-local, align 4
  store i32 %v24_dcc8, i32* %fp.global-to-local, align 4
  ret i32 %v29_e414

dec_label_pc_e418.critedge:                       ; preds = %dec_label_pc_df98
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_e418

dec_label_pc_e418:                                ; preds = %dec_label_pc_e2b4, %dec_label_pc_e418.critedge, %dec_label_pc_e254
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_e41c = call i32 @function_138a0(i32* null)
  store i32 %v2_e41c, i32* %r0.global-to-local, align 4
  store i32 %v2_df38, i32* %ip.global-to-local, align 4
  %v9_e424 = icmp eq i32 %v2_df38, %v2_e41c
  store i1 %v9_e424, i1* %cpsr_z.global-to-local, align 1
  %v6_e428 = icmp slt i32 %v2_df38, %v2_e41c
  br i1 %v6_e428, label %dec_label_pc_e40c, label %dec_label_pc_e254

dec_label_pc_e430:                                ; preds = %dec_label_pc_dee8, %bb129
  %v0_def0.lcssa = phi i32 [ %v1_debc, %dec_label_pc_dee8 ], [ %v0_def0, %bb129 ]
  %v2_e430 = sub i32 %v0_def0.lcssa, %v4_de74
  store i32 %v2_e430, i32* %r2.global-to-local, align 4
  store i32 %v2_deac, i32* %r1.global-to-local, align 4
  store i32 %v2_de9c, i32* %r0.global-to-local, align 4
  %v3_e43c = call i32 @function_12cb8(i32 %v2_de9c, i32 %v2_deac, i32 %v2_e430)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_de9c, i32* @r0, align 4
  %v2_e448 = load i32, i32* @r4, align 4
  %v3_e448 = inttoptr i32 %v2_e448 to i8*
  store i8 0, i8* %v3_e448, align 1
  %v1_e44c = call i32 @function_13c9c(i32 %v2_de9c)
  store i32 %v1_e44c, i32* %r0.global-to-local, align 4
  %sext40 = mul i32 %v1_e44c, 16777216
  %phitmp = sdiv i32 %sext40, 16777216
  br label %dec_label_pc_df2c

dec_label_pc_e458:                                ; preds = %dec_label_pc_df00
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_df2c

dec_label_pc_e468:                                ; preds = %dec_label_pc_df00
  br label %dec_label_pc_df2c

dec_label_pc_e47c:                                ; preds = %dec_label_pc_df00
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_df2c

; uselistorder directives
  uselistorder i32 %v2_e41c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_e3f0, { 0, 2, 1 }
  uselistorder i32 %v4_e3dc, { 1, 0 }
  uselistorder i32 %v0_e3d4, { 0, 2, 1 }
  uselistorder i32 %v0_e3b8, { 0, 2, 1 }
  uselistorder i32 %v0_e39c, { 0, 2, 1 }
  uselistorder i32 %v7_e384, { 2, 1, 0, 3 }
  uselistorder i32 %v1_e294, { 2, 1, 0 }
  uselistorder i32 %v1_e36c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_e304, { 0, 2, 1 }
  uselistorder i32 %v0_e2ec, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e2d8, { 1, 0 }
  uselistorder i32 %v2_e2d4, { 0, 2, 1 }
  uselistorder i32 %v1_e278, { 1, 0, 2 }
  uselistorder i32 %v1_e208, { 0, 2, 1 }
  uselistorder i32 %v1_e204, { 1, 0 }
  uselistorder i32 %v2_e1fc, { 1, 0 }
  uselistorder i32 %v1_e1d0, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_e074, { 1, 0 }
  uselistorder i32 %v3_e06c, { 1, 0 }
  uselistorder i32 %v1_e024, { 1, 0 }
  uselistorder i32 %v1_e01c, { 1, 0 }
  uselistorder i32 %v1_e000, { 1, 0 }
  uselistorder i32 %v3_dff8, { 1, 0 }
  uselistorder i32 %v1_dfbc, { 1, 0 }
  uselistorder i1 %v7_df90, { 1, 0 }
  uselistorder i1 %v7_df60, { 1, 0 }
  uselistorder i32 %v3_df5c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_df48, { 0, 1, 6, 3, 5, 7, 4, 2, 8 }
  uselistorder i32 %v2_df38, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_df34, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_df04, { 1, 0 }
  uselistorder i32 %v0_df00, { 1, 0 }
  uselistorder i32 %v1_def8, { 1, 0 }
  uselistorder i32 %v1_def0, { 1, 2, 0 }
  uselistorder i1 %v7_dedc, { 1, 0 }
  uselistorder i32 %v1_ded8, { 1, 0, 2 }
  uselistorder i1 %v8_ded0, { 1, 0 }
  uselistorder i1 %v7_decc, { 1, 0 }
  uselistorder i32 %v1_dec0, { 1, 0 }
  uselistorder i8 %v2_deb4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_deb8, { 1, 0 }
  uselistorder i32 %v0_ded8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_deac, { 1, 0, 2, 3 }
  uselistorder i32 %v0_dea0, { 1, 0, 2 }
  uselistorder i32 %v2_de9c, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_de8c, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_de84, { 1, 0 }
  uselistorder i32 %v4_de74, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_de28, { 1, 0, 2, 3 }
  uselistorder i32 %v6_ddc8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_ddac, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_dd94, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v1_dd7c, { 1, 0 }
  uselistorder i32 %v7_dd38, { 1, 0, 3, 2 }
  uselistorder i32 %v6_dd14, { 1, 0 }
  uselistorder i32 %v2_dcfc, { 0, 3, 1, 2 }
  uselistorder i32 %v1_dcd4, { 3, 4, 2, 6, 7, 5, 8, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 2, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 40, 39, 41, 43, 42, 45, 44, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 6, 5, 7, 8, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 26, 19, 20, 21, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 35, 34, 36, 37, 38, 39, 41, 40, 42, 43, 45, 44, 46, 48, 47, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24, 25, 26, 27 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 12, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder i32 41, { 4, 5, 6, 0, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a054, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 86, 87, 88, 89, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 90, 91 }
  uselistorder label %dec_label_pc_e418, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e40c, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_e2b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e254, { 1, 0 }
  uselistorder label %.thread38, { 1, 0 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %bb136, { 1, 0 }
  uselistorder label %.thread26, { 1, 0 }
  uselistorder label %dec_label_pc_def0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dee8, { 1, 0 }
  uselistorder label %dec_label_pc_dedc, { 1, 0 }
}

define i32 @function_e490(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e490:
  call void @__pseudo_cond_branch(i1 false, i32 11152832)
  %v0_e494 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e494, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e490
  %v2_e494 = load i32, i32* @r8, align 4
  %v8_e494 = lshr i32 %v2_e494, %arg2
  %v9_e494 = and i32 %v8_e494, %arg1
  call void @__pseudo_branch(i32 %v9_e494)
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e490, %bb
  %v10_e494 = load i32, i32* @r0, align 4
  ret i32 %v10_e494

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e498(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e498:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_e4c8, label %dec_label_pc_e4a4

dec_label_pc_e4a4:                                ; preds = %dec_label_pc_e498
  %v0_e4a8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e4a4
  %v0_e4bc = phi i32 [ %v2_e4bc, %dec_label_pc_e4a8 ], [ 0, %dec_label_pc_e4a4 ]
  %v0_e4b0 = phi i32 [ %v1_e4b0, %dec_label_pc_e4a8 ], [ %arg1, %dec_label_pc_e4a4 ]
  %v0_e4c0 = phi i32 [ %v1_e4c0, %dec_label_pc_e4a8 ], [ %v0_e4a8.pre, %dec_label_pc_e4a4 ]
  %v1_e4a8 = inttoptr i32 %v0_e4c0 to i8*
  %v2_e4a8 = load i8, i8* %v1_e4a8, align 1
  %v3_e4a8 = zext i8 %v2_e4a8 to i32
  %v1_e4ac = add i32 %v0_e4c0, 1
  %v2_e4ac = inttoptr i32 %v1_e4ac to i8*
  %v3_e4ac = load i8, i8* %v2_e4ac, align 1
  %v4_e4ac = zext i8 %v3_e4ac to i32
  %v1_e4b0 = add i32 %v0_e4b0, -2
  %v4_e4b4 = mul nuw nsw i32 %v4_e4ac, 256
  %v5_e4b4 = or i32 %v4_e4b4, %v3_e4a8
  %v2_e4bc = add i32 %v5_e4b4, %v0_e4bc
  %v1_e4c0 = add i32 %v0_e4c0, 2
  store i32 %v1_e4c0, i32* @r0, align 4
  %v1_e4b0.cmp = icmp ugt i32 %v1_e4b0, 1
  br i1 %v1_e4b0.cmp, label %dec_label_pc_e4a8, label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e498
  %v1_e4d0 = phi i32 [ 0, %dec_label_pc_e498 ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4c8 = phi i32 [ %arg1, %dec_label_pc_e498 ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v7_e4c8 = icmp eq i32 %v0_e4c8, 1
  br i1 %v7_e4c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e4c8
  %v1_e4cc = load i32, i32* @r0, align 4
  %v2_e4cc = inttoptr i32 %v1_e4cc to i8*
  %v3_e4cc = load i8, i8* %v2_e4cc, align 1
  %v4_e4cc = zext i8 %v3_e4cc to i32
  %v3_e4d0 = add i32 %v1_e4d0, %v4_e4cc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e4c8, %bb
  %v0_e4d4 = phi i32 [ %v1_e4d0, %dec_label_pc_e4c8 ], [ %v3_e4d0, %bb ]
  %v3_e4d8 = urem i32 %v0_e4d4, 65536
  %v4_e4dc = udiv i32 %v0_e4d4, 65536
  %v5_e4dc = add nuw nsw i32 %v4_e4dc, %v3_e4d8
  %v4_e4e0 = udiv i32 %v5_e4dc, 65536
  %v5_e4e0 = add nuw nsw i32 %v4_e4e0, %v5_e4dc
  %v1_e4e4 = urem i32 %v5_e4e0, 65536
  %v3_e4ec = xor i32 %v1_e4e4, 65535
  ret i32 %v3_e4ec

; uselistorder directives
  uselistorder i32 %v5_e4dc, { 1, 0 }
  uselistorder i32 %v1_e4c0, { 1, 0 }
  uselistorder i32 %v1_e4b0, { 1, 0, 2 }
  uselistorder i32 %v0_e4c0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e4f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e4f4:
  %v3_e504 = urem i32 %arg2, 65536
  %v1_e508 = add i32 %arg1, 12
  %v1_e50c = inttoptr i32 %v1_e508 to i32*
  %v2_e50c = load i32, i32* %v1_e50c, align 4
  %v3_e50c = add i32 %arg1, 16
  %v4_e50c = inttoptr i32 %v3_e50c to i32*
  %v5_e50c = load i32, i32* %v4_e50c, align 4
  %v7_e510 = icmp sgt i32 %arg3, 1
  br i1 %v7_e510, label %dec_label_pc_e51c.preheader, label %dec_label_pc_e53c

dec_label_pc_e51c.preheader:                      ; preds = %dec_label_pc_e4f4
  %v0_e51c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e51c

dec_label_pc_e51c:                                ; preds = %dec_label_pc_e51c.preheader, %dec_label_pc_e51c
  %v0_e530 = phi i32 [ 0, %dec_label_pc_e51c.preheader ], [ %v2_e530, %dec_label_pc_e51c ]
  %v0_e524 = phi i32 [ %arg3, %dec_label_pc_e51c.preheader ], [ %v1_e524, %dec_label_pc_e51c ]
  %v0_e534 = phi i32 [ %v0_e51c.pre, %dec_label_pc_e51c.preheader ], [ %v1_e534, %dec_label_pc_e51c ]
  %v1_e51c = inttoptr i32 %v0_e534 to i8*
  %v2_e51c = load i8, i8* %v1_e51c, align 1
  %v3_e51c = zext i8 %v2_e51c to i32
  %v1_e520 = add i32 %v0_e534, 1
  %v2_e520 = inttoptr i32 %v1_e520 to i8*
  %v3_e520 = load i8, i8* %v2_e520, align 1
  %v4_e520 = zext i8 %v3_e520 to i32
  %v1_e524 = add nsw i32 %v0_e524, -2
  %v4_e528 = mul nuw nsw i32 %v4_e520, 256
  %v5_e528 = or i32 %v4_e528, %v3_e51c
  %v2_e530 = add i32 %v5_e528, %v0_e530
  %v1_e534 = add i32 %v0_e534, 2
  store i32 %v1_e534, i32* @r1, align 4
  %v8_e538 = icmp sgt i32 %v1_e524, 1
  br i1 %v8_e538, label %dec_label_pc_e51c, label %dec_label_pc_e53c

dec_label_pc_e53c:                                ; preds = %dec_label_pc_e51c, %dec_label_pc_e4f4
  %v1_e544 = phi i32 [ 0, %dec_label_pc_e4f4 ], [ %v2_e530, %dec_label_pc_e51c ]
  %v0_e53c = phi i32 [ %arg3, %dec_label_pc_e4f4 ], [ %v1_e524, %dec_label_pc_e51c ]
  %v7_e53c = icmp eq i32 %v0_e53c, 1
  br i1 %v7_e53c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e53c
  %v1_e540 = load i32, i32* @r1, align 4
  %v2_e540 = inttoptr i32 %v1_e540 to i8*
  %v3_e540 = load i8, i8* %v2_e540, align 1
  %v4_e540 = zext i8 %v3_e540 to i32
  %v3_e544 = add i32 %v4_e540, %v1_e544
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e53c, %bb
  %v0_e568 = phi i32 [ %v1_e544, %dec_label_pc_e53c ], [ %v3_e544, %bb ]
  %v3_e54c = urem i32 %v2_e50c, 65536
  %v1_e554 = add i32 %arg1, 9
  %v2_e554 = inttoptr i32 %v1_e554 to i8*
  %v3_e554 = load i8, i8* %v2_e554, align 1
  %v4_e554 = zext i8 %v3_e554 to i32
  %v3_e558 = urem i32 %v5_e50c, 65536
  %v4_e55c = udiv i32 %v2_e50c, 65536
  %v3_e564 = mul nuw nsw i32 %v4_e554, 256
  %v4_e568 = udiv i32 %v5_e50c, 65536
  %v5_e568 = add i32 %v0_e568, %v4_e568
  %v2_e56c = add i32 %v5_e568, %v3_e564
  %v5_e55c = add nuw nsw i32 %v3_e54c, %v3_e504
  %v2_e560 = add nuw nsw i32 %v5_e55c, %v4_e55c
  %v2_e570 = add nuw nsw i32 %v2_e560, %v3_e558
  %v2_e574 = add i32 %v2_e56c, %v2_e570
  %tmp = icmp ult i32 %v2_e574, 65536
  br i1 %tmp, label %dec_label_pc_e594, label %dec_label_pc_e580

dec_label_pc_e580:                                ; preds = %.thread, %dec_label_pc_e580
  %v2_e5881 = phi i32 [ %v2_e588, %dec_label_pc_e580 ], [ %v2_e574, %.thread ]
  %v3_e58c2.in = phi i32 [ %v2_e588, %dec_label_pc_e580 ], [ %v2_e574, %.thread ]
  %v3_e58c2 = udiv i32 %v3_e58c2.in, 65536
  %v3_e584 = urem i32 %v2_e5881, 65536
  %v2_e588 = add nuw nsw i32 %v3_e584, %v3_e58c2
  %tmp14 = icmp ult i32 %v2_e588, 65536
  br i1 %tmp14, label %dec_label_pc_e594.loopexit, label %dec_label_pc_e580

dec_label_pc_e594.loopexit:                       ; preds = %dec_label_pc_e580
  br label %dec_label_pc_e594

dec_label_pc_e594:                                ; preds = %dec_label_pc_e594.loopexit, %.thread
  %v0_e594 = phi i32 [ %v2_e588, %dec_label_pc_e594.loopexit ], [ %v2_e574, %.thread ]
  %v1_e594 = urem i32 %v0_e594, 65536
  %v3_e59c = xor i32 %v1_e594, 65535
  ret i32 %v3_e59c

; uselistorder directives
  uselistorder i32 %v2_e588, { 2, 1, 3, 0 }
  uselistorder i32 %v2_e574, { 3, 0, 2, 1 }
  uselistorder i32 %v1_e544, { 1, 0 }
  uselistorder i32 %v1_e534, { 1, 0 }
  uselistorder i32 %v1_e524, { 0, 2, 1 }
  uselistorder i32 %v0_e534, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e580, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e51c, { 1, 0 }
}

define i32 @function_e5a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5a4:
  %v2_e5a8 = load i32, i32* @global_var_1f19c.94, align 4
  %v2_e5b0 = call i32 @function_136d0(i32 %v2_e5a8, i32 9)
  %v0_e5b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e5b4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e5a4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e5a4, %bb
  ret i32 %v2_e5b0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e5b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5b8:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e5b8 = load i32, i32* @r4, align 4
  store i32 %v3_e5b8, i32* %stack_var_-36, align 4
  %v6_e5b8 = load i32, i32* @r5, align 4
  %v9_e5b8 = load i32, i32* @r6, align 4
  %v12_e5b8 = load i32, i32* @r7, align 4
  %v15_e5b8 = load i32, i32* @r8, align 4
  %v18_e5b8 = load i32, i32* @sb, align 4
  %v21_e5b8 = load i32, i32* @sl, align 4
  %v24_e5b8 = load i32, i32* @fp, align 4
  %v2_e5cc = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_e5cc, i32* @sl, align 4
  %v3_e5d4 = mul i32 %arg1, 65536
  store i32 %v3_e5d4, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_e5e0 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_e5ec = bitcast i32* %stack_var_-4677 to i8*
  %v3_e5ec = call i32 @function_13be0(i8* %v2_e5ec, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_e604 = bitcast i32* %stack_var_-8773 to i8*
  %v3_e604 = call i32 @function_13be0(i8* %v2_e604, i32 0)
  %v2_e608 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_e608, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_e628 = call i32 @function_13be0(i8* nonnull %stack_var_-581, i32 0)
  %v2_e62c = ptrtoint i8* %stack_var_-68 to i32
  %v1_e634 = load i32, i32* @r5, align 4
  %v4_e634 = udiv i32 %v1_e634, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_e654 = trunc i32 %v4_e634 to i8
  %v4_e654 = call i32 @function_13130(i8 %v3_e654, i32 16, i32 %v2_e62c)
  %v2_e65c = call i32 @function_12c3c(i8* nonnull %stack_var_-68)
  %v7_e660 = icmp eq i32 %v2_e65c, 2
  br i1 %v7_e660, label %dec_label_pc_eb0c, label %dec_label_pc_e668

dec_label_pc_e668:                                ; preds = %dec_label_pc_e5b8, %dec_label_pc_eb0c
  %v1_e66c = call i32 @function_121d4(i32 4)
  %v1_e674 = call i32 @function_121d4(i32 5)
  %v1_e67c = call i32 @function_121d4(i32 6)
  %v1_e684 = call i32 @function_121d4(i32 7)
  %v0_e688 = load i32, i32* @r4, align 4
  %v2_e690 = inttoptr i32 %v0_e688 to i32*
  %v3_e690 = call i32 @function_120f0(i32 7, i32* %v2_e690)
  %v0_e694 = load i32, i32* @r4, align 4
  %v2_e698 = inttoptr i32 %v3_e690 to i8*
  %v3_e698 = call i32 @function_136fc(i8* %v2_e698, i32 %v0_e694)
  %v7_e69c = icmp eq i32 %v3_e698, -1
  store i32 %v3_e698, i32* @r8, align 4
  br i1 %v7_e69c, label %dec_label_pc_eacc, label %dec_label_pc_e6a8.preheader

dec_label_pc_e6a8.preheader:                      ; preds = %dec_label_pc_e668
  %v4_e6b458 = call i32 @function_12e94(i8* nonnull %stack_var_-581, i32 512, i32 %v3_e698)
  %v2_e6b860 = icmp eq i32 %v4_e6b458, 0
  br i1 %v2_e6b860, label %dec_label_pc_e848.loopexit, label %dec_label_pc_e6c0.lr.ph

dec_label_pc_e6c0.lr.ph:                          ; preds = %dec_label_pc_e6a8.preheader
  %v2_e708 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e6c0

dec_label_pc_e6c0:                                ; preds = %dec_label_pc_e6c0.lr.ph, %dec_label_pc_e6a8.backedge
  %v3_e6c4 = load i8, i8* %stack_var_-581, align 1
  %v4_e6c4 = sext i8 %v3_e6c4 to i32
  %v2_e6c8 = icmp eq i8 %v3_e6c4, 0
  br i1 %v2_e6c8, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_e6c0
  %v8_e6cc = icmp eq i8 %v3_e6c4, 58
  br i1 %v8_e6cc, label %.thread6, label %dec_label_pc_e6e0

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e6f8

bb130:                                            ; preds = %dec_label_pc_e6c0
  br label %dec_label_pc_e6f8

dec_label_pc_e6e0:                                ; preds = %bb
  %v1_e6e8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e6e4

dec_label_pc_e6e4:                                ; preds = %bb131, %dec_label_pc_e6e0
  %v0_e6e4 = phi i32 [ %v1_e6e4, %bb131 ], [ 0, %dec_label_pc_e6e0 ]
  %v1_e6e4 = add i32 %v0_e6e4, 1
  %v2_e6e8 = add i32 %v1_e6e4, %v1_e6e8.pre
  %v3_e6e8 = inttoptr i32 %v2_e6e8 to i8*
  %v4_e6e8 = load i8, i8* %v3_e6e8, align 1
  %v6_e6e8 = zext i8 %v4_e6e8 to i32
  %v2_e6ec = icmp eq i8 %v4_e6e8, 0
  br i1 %v2_e6ec, label %dec_label_pc_e6f8, label %bb131

bb131:                                            ; preds = %dec_label_pc_e6e4
  %v8_e6f0 = icmp eq i8 %v4_e6e8, 58
  br i1 %v8_e6f0, label %dec_label_pc_e6f8, label %dec_label_pc_e6e4

dec_label_pc_e6f8:                                ; preds = %dec_label_pc_e6e4, %bb131, %bb130, %.thread6
  %v1_e724 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_e6e4, %bb131 ], [ %v1_e6e4, %dec_label_pc_e6e4 ]
  %v0_e6f8 = phi i32 [ %v4_e6c4, %.thread6 ], [ %v4_e6c4, %bb130 ], [ %v6_e6e8, %bb131 ], [ %v6_e6e8, %dec_label_pc_e6e4 ]
  %v2_e6f8 = icmp eq i32 %v0_e6f8, 0
  br i1 %v2_e6f8, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e700

dec_label_pc_e6a8.backedge:                       ; preds = %dec_label_pc_e6f8, %dec_label_pc_e7d0, %dec_label_pc_e81c, %dec_label_pc_e744
  %v0_e6b0 = load i32, i32* @r8, align 4
  %v4_e6b4 = call i32 @function_12e94(i8* nonnull %stack_var_-581, i32 512, i32 %v0_e6b0)
  %v2_e6b8 = icmp eq i32 %v4_e6b4, 0
  br i1 %v2_e6b8, label %dec_label_pc_e848.loopexit, label %dec_label_pc_e6c0

dec_label_pc_e700:                                ; preds = %dec_label_pc_e6f8
  %v1_e704 = add i32 %v1_e724, 2
  %v2_e70c = add i32 %v1_e704, %v2_e708
  %v1_e710 = add i32 %v2_e70c, -545
  %v2_e710 = inttoptr i32 %v1_e710 to i8*
  %v3_e710 = load i8, i8* %v2_e710, align 1
  %v2_e714 = icmp eq i8 %v3_e710, 0
  br i1 %v2_e714, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_e700
  %v8_e718 = icmp eq i8 %v3_e710, 32
  br i1 %v8_e718, label %.thread10, label %dec_label_pc_e724

.thread10:                                        ; preds = %bb132
  store i32 %v1_e704, i32* @r5, align 4
  br label %dec_label_pc_e744

bb133:                                            ; preds = %dec_label_pc_e700
  store i32 %v1_e704, i32* @r5, align 4
  br label %dec_label_pc_e744

dec_label_pc_e724:                                ; preds = %bb132
  %v0_e724 = load i32, i32* @r6, align 4
  %v2_e724 = add i32 %v0_e724, %v1_e724
  br label %dec_label_pc_e728

dec_label_pc_e728:                                ; preds = %bb134, %dec_label_pc_e724
  %v0_e73413 = phi i32 [ %v1_e734, %bb134 ], [ %v2_e724, %dec_label_pc_e724 ]
  %v1_e728 = add i32 %v0_e73413, 3
  %v2_e728 = inttoptr i32 %v1_e728 to i8*
  %v3_e728 = load i8, i8* %v2_e728, align 1
  %v2_e72c = icmp eq i8 %v3_e728, 0
  br i1 %v2_e72c, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_e728
  %v1_e73414 = add i32 %v0_e73413, 1
  br label %dec_label_pc_e73c

bb134:                                            ; preds = %dec_label_pc_e728
  %v8_e730 = icmp eq i8 %v3_e728, 32
  %v1_e734 = add i32 %v0_e73413, 1
  br i1 %v8_e730, label %dec_label_pc_e73c, label %dec_label_pc_e728

dec_label_pc_e73c:                                ; preds = %bb134, %.thread12
  %v1_e73415 = phi i32 [ %v1_e73414, %.thread12 ], [ %v1_e734, %bb134 ]
  %v2_e73c = sub i32 %v1_e73415, %v0_e724
  %v1_e740 = add i32 %v2_e73c, 2
  store i32 %v1_e740, i32* @r5, align 4
  br label %dec_label_pc_e744

dec_label_pc_e744:                                ; preds = %bb133, %.thread10, %dec_label_pc_e73c
  %v1_e750 = phi i32 [ %v1_e704, %.thread10 ], [ %v1_e704, %bb133 ], [ %v1_e740, %dec_label_pc_e73c ]
  %v0_e744 = load i32, i32* @r6, align 4
  %v2_e744 = add i32 %v0_e744, %v1_e704
  store i32 %v2_e744, i32* @r4, align 4
  %v2_e750 = add i32 %v1_e750, %v2_e708
  store i32 0, i32* @r7, align 4
  %v3_e75c = add i32 %v2_e750, -545
  %v4_e75c = inttoptr i32 %v3_e75c to i8*
  store i8 0, i8* %v4_e75c, align 1
  %v1_e760 = inttoptr i32 %v2_e744 to i8*
  %v2_e760 = call i32 @function_12c3c(i8* %v1_e760)
  store i32 %v2_e760, i32* @r1, align 4
  %v0_e76c = load i32, i32* @r4, align 4
  %v3_e770 = inttoptr i32 %v0_e76c to i8*
  %v4_e770 = call i32 @function_12f90(i8* %v3_e770, i32 %v2_e760, i32 %v2_e62c)
  %v7_e774 = icmp eq i32 %v4_e770, -1
  br i1 %v7_e774, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e790.preheader

dec_label_pc_e790.preheader:                      ; preds = %dec_label_pc_e744
  %v1_e778 = load i32, i32* @r7, align 4
  %v1_e77c = load i32, i32* @r6, align 4
  %v2_e77c = load i32, i32* @r5, align 4
  %v3_e77c = add i32 %v2_e77c, %v1_e77c
  store i32 %v1_e778, i32* @lr, align 4
  store i32 %v1_e778, i32* @r4, align 4
  %v1_e79050 = add i32 %v3_e77c, 2
  %v2_e79051 = inttoptr i32 %v1_e79050 to i8*
  %v3_e79052 = load i8, i8* %v2_e79051, align 1
  %v2_e79454 = icmp eq i8 %v3_e79052, 0
  %v1_e79856 = add i32 %v2_e77c, 2
  br i1 %v2_e79454, label %dec_label_pc_e7d0, label %dec_label_pc_e7a0

dec_label_pc_e7a0:                                ; preds = %dec_label_pc_e790.preheader, %dec_label_pc_e790.backedge
  %v0_e7d086 = phi i32 [ %v0_e7d085, %dec_label_pc_e790.backedge ], [ %v1_e778, %dec_label_pc_e790.preheader ]
  %v0_e7b8.pr = phi i32 [ %v0_e7b8.pr71, %dec_label_pc_e790.backedge ], [ %v1_e778, %dec_label_pc_e790.preheader ]
  %v0_eadc = phi i32 [ %v0_eadc74, %dec_label_pc_e790.backedge ], [ %v1_e778, %dec_label_pc_e790.preheader ]
  %v0_e79882 = phi i32 [ %v1_e798, %dec_label_pc_e790.backedge ], [ %v1_e79856, %dec_label_pc_e790.preheader ]
  %v0_e7c8 = phi i32 [ %v0_e790, %dec_label_pc_e790.backedge ], [ %v3_e77c, %dec_label_pc_e790.preheader ]
  %v1_e7a4.in = phi i8 [ %v3_e790, %dec_label_pc_e790.backedge ], [ %v3_e79052, %dec_label_pc_e790.preheader ]
  %v7_e7a0 = icmp eq i8 %v1_e7a4.in, 9
  br i1 %v7_e7a0, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_e7a0
  %v8_e7a4 = icmp eq i8 %v1_e7a4.in, 32
  br i1 %v8_e7a4, label %.thread23.thread35, label %dec_label_pc_e7b8

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_e7c4

.thread23:                                        ; preds = %dec_label_pc_e7a0
  br label %dec_label_pc_e7c4

dec_label_pc_e7b8:                                ; preds = %bb135
  %v7_e7b8 = icmp eq i32 %v0_e7b8.pr, 1
  br i1 %v7_e7b8, label %dec_label_pc_eadc, label %dec_label_pc_e7c0

dec_label_pc_e7c0:                                ; preds = %dec_label_pc_eadc, %dec_label_pc_e7b8
  %v0_e7c479 = phi i32 [ %v1_eadc, %dec_label_pc_eadc ], [ %v0_eadc, %dec_label_pc_e7b8 ]
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e7c0
  %v0_e7c4 = phi i32 [ %v0_eadc, %.thread23.thread35 ], [ %v0_eadc, %.thread23 ], [ %v0_e7c479, %dec_label_pc_e7c0 ]
  %v0_e7b8.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e7c0 ]
  %v7_e7cc = icmp sgt i32 %v0_e7c4, 6
  br i1 %v7_e7cc, label %dec_label_pc_e7d0, label %dec_label_pc_e790.backedge

dec_label_pc_e7d0:                                ; preds = %dec_label_pc_e790.backedge, %dec_label_pc_e7c4, %dec_label_pc_e790.preheader
  %v1_e820 = phi i32 [ %v1_e79856, %dec_label_pc_e790.preheader ], [ %v1_e798, %dec_label_pc_e790.backedge ], [ %v0_e79882, %dec_label_pc_e7c4 ]
  %v0_e7d0 = phi i32 [ %v1_e778, %dec_label_pc_e790.preheader ], [ %v0_e7d085, %dec_label_pc_e790.backedge ], [ %v0_e7d086, %dec_label_pc_e7c4 ]
  %v2_e7d0 = icmp eq i32 %v0_e7d0, 0
  br i1 %v2_e7d0, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e7dc

dec_label_pc_e7dc:                                ; preds = %dec_label_pc_e7d0
  %v2_e7e4 = add i32 %v1_e820, %v2_e708
  %v1_e7e8 = add i32 %v2_e7e4, -545
  %v2_e7e8 = inttoptr i32 %v1_e7e8 to i8*
  %v3_e7e8 = load i8, i8* %v2_e7e8, align 1
  %v2_e7ec = icmp eq i8 %v3_e7e8, 0
  br i1 %v2_e7ec, label %dec_label_pc_e81c, label %bb136

bb136:                                            ; preds = %dec_label_pc_e7dc
  %v8_e7f0 = icmp eq i8 %v3_e7e8, 32
  br i1 %v8_e7f0, label %dec_label_pc_e81c, label %dec_label_pc_e7f8

dec_label_pc_e7f8:                                ; preds = %bb136
  %v2_e7f8 = add i32 %v1_e820, %v1_e77c
  br label %dec_label_pc_e7fc

dec_label_pc_e7fc:                                ; preds = %bb137, %dec_label_pc_e7f8
  %v0_e80828 = phi i32 [ %v1_e808, %bb137 ], [ %v1_e820, %dec_label_pc_e7f8 ]
  %v0_e7fc = phi i32 [ %v1_e7fc, %bb137 ], [ %v2_e7f8, %dec_label_pc_e7f8 ]
  %v1_e7fc = add i32 %v0_e7fc, 1
  %v2_e7fc = inttoptr i32 %v1_e7fc to i8*
  %v3_e7fc = load i8, i8* %v2_e7fc, align 1
  %v2_e800 = icmp eq i8 %v3_e7fc, 0
  br i1 %v2_e800, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_e7fc
  %v1_e80829 = add i32 %v0_e80828, 1
  br label %dec_label_pc_e810

bb137:                                            ; preds = %dec_label_pc_e7fc
  %v8_e804 = icmp eq i8 %v3_e7fc, 32
  %v1_e808 = add i32 %v0_e80828, 1
  br i1 %v8_e804, label %dec_label_pc_e810, label %dec_label_pc_e7fc

dec_label_pc_e810:                                ; preds = %bb137, %.thread27
  %v1_e818 = phi i32 [ %v1_e80829, %.thread27 ], [ %v1_e808, %bb137 ]
  %v2_e818 = add i32 %v1_e818, %v2_e708
  br label %dec_label_pc_e81c

dec_label_pc_e81c:                                ; preds = %dec_label_pc_e7dc, %bb136, %dec_label_pc_e810
  %v2_e828 = phi i32 [ %v2_e7e4, %dec_label_pc_e7dc ], [ %v2_e7e4, %bb136 ], [ %v2_e818, %dec_label_pc_e810 ]
  %v2_e820 = add i32 %v1_e820, %v1_e77c
  store i32 %v2_e820, i32* @r4, align 4
  %v3_e828 = add i32 %v2_e828, -545
  %v4_e828 = inttoptr i32 %v3_e828 to i8*
  store i8 0, i8* %v4_e828, align 1
  %v1_e82c = inttoptr i32 %v2_e820 to i8*
  %v2_e82c = call i32 @function_12c3c(i8* %v1_e82c)
  %v8_e834 = icmp sgt i32 %v2_e82c, 15
  br i1 %v8_e834, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e838

dec_label_pc_e838:                                ; preds = %dec_label_pc_e81c
  %v0_e83c = load i32, i32* @r4, align 4
  %v2_e840 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e840, i32* @r0, align 4
  %v2_e844 = bitcast i32* %stack_var_-52 to i8*
  %v3_e844 = call i32 @function_12c64(i8* %v2_e844, i32 %v0_e83c)
  br label %dec_label_pc_e848

dec_label_pc_e848.loopexit:                       ; preds = %dec_label_pc_e6a8.backedge, %dec_label_pc_e6a8.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e848

dec_label_pc_e848:                                ; preds = %dec_label_pc_e848.loopexit, %dec_label_pc_e838
  %v1_e858.pre-phi = phi i8* [ %.pre99, %dec_label_pc_e848.loopexit ], [ %v2_e844, %dec_label_pc_e838 ]
  %v2_e854.pre-phi = phi i32 [ %.pre, %dec_label_pc_e848.loopexit ], [ %v2_e840, %dec_label_pc_e838 ]
  %v0_e848 = load i32, i32* @r8, align 4
  %v1_e84c = call i32 @function_135d0(i32 %v0_e848)
  %v2_e858 = call i32 @function_12c3c(i8* %v1_e858.pre-phi)
  store i32 %v2_e858, i32* @r4, align 4
  %v2_e85c = icmp eq i32 %v2_e858, 0
  br i1 %v2_e85c, label %dec_label_pc_eaac, label %dec_label_pc_e864

dec_label_pc_e864:                                ; preds = %dec_label_pc_e848
  %v3_e86c = call i32 @function_120f0(i32 4, i32* null)
  store i32 %v3_e86c, i32* @r0, align 4
  %v1_e870 = call i32 @function_139ac(i32 %v3_e86c)
  store i32 %v1_e870, i32* @r8, align 4
  %v2_e874 = icmp eq i32 %v1_e870, 0
  br i1 %v2_e874, label %dec_label_pc_eaa4, label %dec_label_pc_e884.preheader

dec_label_pc_e884.preheader:                      ; preds = %dec_label_pc_e864
  store i32 0, i32* @r5, align 4
  %v1_e88845 = inttoptr i32 %v1_e870 to i32*
  %v2_e88846 = call i32 @function_13aa8(i32* %v1_e88845)
  %v2_e88c48 = icmp eq i32 %v2_e88846, 0
  br i1 %v2_e88c48, label %dec_label_pc_ea98, label %dec_label_pc_e894.preheader

dec_label_pc_e884.loopexit:                       ; preds = %dec_label_pc_e89c, %dec_label_pc_e8b0, %dec_label_pc_e918
  %v0_e884 = load i32, i32* @r8, align 4
  %v1_e888 = inttoptr i32 %v0_e884 to i32*
  %v2_e888 = call i32 @function_13aa8(i32* %v1_e888)
  %v2_e88c = icmp eq i32 %v2_e888, 0
  br i1 %v2_e88c, label %dec_label_pc_ea98, label %dec_label_pc_e894.preheader

dec_label_pc_e894.preheader:                      ; preds = %dec_label_pc_e884.preheader, %dec_label_pc_e884.loopexit
  %v0_e89c94 = phi i32 [ %v2_e888, %dec_label_pc_e884.loopexit ], [ %v2_e88846, %dec_label_pc_e884.preheader ]
  br label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_e894.preheader, %dec_label_pc_ea80
  %v0_e8a8 = phi i32 [ %v0_e89c94, %dec_label_pc_e894.preheader ], [ %v2_ea8c, %dec_label_pc_ea80 ]
  %v0_e894 = load i32, i32* @r5, align 4
  %v2_e894 = icmp eq i32 %v0_e894, 0
  br i1 %v2_e894, label %dec_label_pc_e89c, label %dec_label_pc_ea98

dec_label_pc_e89c:                                ; preds = %dec_label_pc_e894
  %v1_e89c = add i32 %v0_e8a8, 11
  %v2_e89c = inttoptr i32 %v1_e89c to i8*
  %v3_e89c = load i8, i8* %v2_e89c, align 1
  %v4_e89c = zext i8 %v3_e89c to i32
  %v1_e8a0 = add nsw i32 %v4_e89c, -48
  store i32 %v1_e89c, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e8a0, 9
  br i1 %tmp, label %dec_label_pc_e884.loopexit, label %dec_label_pc_e8b0

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e89c
  %v3_e8b8 = call i32 @function_120f0(i32 4, i32* null)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v3_e8c4 = call i32 @function_12c64(i8* %v2_e5ec, i32 %v3_e8b8)
  %v2_e8cc = call i32 @function_12c3c(i8* %v2_e5ec)
  %v0_e8d0 = load i32, i32* @r7, align 4
  %v0_e8d4 = load i32, i32* @sl, align 4
  %v2_e8d4 = add i32 %v0_e8d4, %v2_e8cc
  store i32 %v2_e8d4, i32* @r0, align 4
  %v2_e8d8 = inttoptr i32 %v2_e8d4 to i8*
  %v3_e8d8 = call i32 @function_12c64(i8* %v2_e8d8, i32 %v0_e8d0)
  %v2_e8e0 = call i32 @function_12c3c(i8* %v2_e5ec)
  %v0_e8e4 = load i32, i32* @r5, align 4
  store i32 %v2_e8e0, i32* @r4, align 4
  %v2_e8f0 = inttoptr i32 %v0_e8e4 to i32*
  %v3_e8f0 = call i32 @function_120f0(i32 5, i32* %v2_e8f0)
  %v0_e8f8 = load i32, i32* @sl, align 4
  %v1_e8f8 = load i32, i32* @r4, align 4
  %v2_e8f8 = add i32 %v1_e8f8, %v0_e8f8
  store i32 %v2_e8f8, i32* @r0, align 4
  %v2_e8fc = inttoptr i32 %v2_e8f8 to i8*
  %v3_e8fc = call i32 @function_12c64(i8* %v2_e8fc, i32 %v3_e8f0)
  %v4_e90c = call i32 @function_137c4(i8* %v2_e5ec, i32 %v2_e5e0, i32 4096)
  %v7_e910 = icmp eq i32 %v4_e90c, -1
  br i1 %v7_e910, label %dec_label_pc_e884.loopexit, label %dec_label_pc_e918

dec_label_pc_e918:                                ; preds = %dec_label_pc_e8b0
  %v0_e918 = load i32, i32* @r5, align 4
  %v2_e920 = inttoptr i32 %v0_e918 to i32*
  %v3_e920 = call i32 @function_120f0(i32 4, i32* %v2_e920)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v3_e92c = call i32 @function_12c64(i8* %v2_e5ec, i32 %v3_e920)
  %v2_e934 = call i32 @function_12c3c(i8* %v2_e5ec)
  %v0_e938 = load i32, i32* @r7, align 4
  %v0_e93c = load i32, i32* @sl, align 4
  %v2_e93c = add i32 %v0_e93c, %v2_e934
  store i32 %v2_e93c, i32* @r0, align 4
  %v2_e940 = inttoptr i32 %v2_e93c to i8*
  %v3_e940 = call i32 @function_12c64(i8* %v2_e940, i32 %v0_e938)
  %v2_e948 = call i32 @function_12c3c(i8* %v2_e5ec)
  %v0_e94c = load i32, i32* @r5, align 4
  store i32 %v2_e948, i32* @r4, align 4
  %v2_e958 = inttoptr i32 %v0_e94c to i32*
  %v3_e958 = call i32 @function_120f0(i32 6, i32* %v2_e958)
  %v0_e960 = load i32, i32* @sl, align 4
  %v1_e960 = load i32, i32* @r4, align 4
  %v2_e960 = add i32 %v1_e960, %v0_e960
  store i32 %v2_e960, i32* @r0, align 4
  %v2_e964 = inttoptr i32 %v2_e960 to i8*
  %v3_e964 = call i32 @function_12c64(i8* %v2_e964, i32 %v3_e958)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v1_e96c = call i32 @function_139ac(i32 %v2_e5cc)
  store i32 %v1_e96c, i32* @sb, align 4
  %v2_e970 = icmp eq i32 %v1_e96c, 0
  br i1 %v2_e970, label %dec_label_pc_e884.loopexit, label %dec_label_pc_e978.preheader

dec_label_pc_e978.preheader:                      ; preds = %dec_label_pc_e918
  %v1_e97c40 = inttoptr i32 %v1_e96c to i32*
  %v2_e97c41 = call i32 @function_13aa8(i32* %v1_e97c40)
  store i32 %v2_e97c41, i32* @r6, align 4
  %v2_e98043 = icmp eq i32 %v2_e97c41, 0
  br i1 %v2_e98043, label %dec_label_pc_ea80, label %dec_label_pc_e990thread-pre-split

dec_label_pc_e978.loopexit:                       ; preds = %dec_label_pc_e998, %dec_label_pc_ea30
  %v0_e978 = load i32, i32* @sb, align 4
  %v1_e97c = inttoptr i32 %v0_e978 to i32*
  %v2_e97c = call i32 @function_13aa8(i32* %v1_e97c)
  store i32 %v2_e97c, i32* @r6, align 4
  %v2_e980 = icmp eq i32 %v2_e97c, 0
  br i1 %v2_e980, label %dec_label_pc_ea80, label %dec_label_pc_e990thread-pre-split

dec_label_pc_e990thread-pre-split:                ; preds = %dec_label_pc_e978.preheader, %dec_label_pc_e978.loopexit
  %v0_e990.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e990

dec_label_pc_e990:                                ; preds = %dec_label_pc_e990thread-pre-split, %dec_label_pc_ea58
  %v0_e990 = phi i32 [ %v0_e990.pr, %dec_label_pc_e990thread-pre-split ], [ 1, %dec_label_pc_ea58 ]
  %v2_e990 = icmp eq i32 %v0_e990, 0
  br i1 %v2_e990, label %dec_label_pc_e998, label %dec_label_pc_ea80

dec_label_pc_e998:                                ; preds = %dec_label_pc_e990
  %v2_e998 = call i32 @function_12cdc(i32 %v2_e5e0, i32 4096)
  %v0_e99c = load i32, i32* @r5, align 4
  %v2_e9a4 = inttoptr i32 %v0_e99c to i32*
  %v3_e9a4 = call i32 @function_120f0(i32 4, i32* %v2_e9a4)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v3_e9b0 = call i32 @function_12c64(i8* %v2_e5ec, i32 %v3_e9a4)
  %v2_e9b8 = call i32 @function_12c3c(i8* %v2_e5ec)
  %v0_e9bc = load i32, i32* @r7, align 4
  %v0_e9c0 = load i32, i32* @sl, align 4
  %v2_e9c0 = add i32 %v0_e9c0, %v2_e9b8
  store i32 %v2_e9c0, i32* @r0, align 4
  %v2_e9c4 = inttoptr i32 %v2_e9c0 to i8*
  %v3_e9c4 = call i32 @function_12c64(i8* %v2_e9c4, i32 %v0_e9bc)
  %v2_e9cc = call i32 @function_12c3c(i8* %v2_e5ec)
  %v0_e9d0 = load i32, i32* @r5, align 4
  store i32 %v2_e9cc, i32* @r4, align 4
  %v2_e9dc = inttoptr i32 %v0_e9d0 to i32*
  %v3_e9dc = call i32 @function_120f0(i32 6, i32* %v2_e9dc)
  %v0_e9e4 = load i32, i32* @sl, align 4
  %v1_e9e4 = load i32, i32* @r4, align 4
  %v2_e9e4 = add i32 %v1_e9e4, %v0_e9e4
  store i32 %v2_e9e4, i32* @r0, align 4
  %v2_e9e8 = inttoptr i32 %v2_e9e4 to i8*
  %v3_e9e8 = call i32 @function_12c64(i8* %v2_e9e8, i32 %v3_e9dc)
  %v2_e9f0 = call i32 @function_12c3c(i8* %v2_e5ec)
  %v0_e9f8 = load i32, i32* @sl, align 4
  %v2_e9f8 = add i32 %v0_e9f8, %v2_e9f0
  store i32 %v2_e9f8, i32* @r0, align 4
  %v2_e9fc = inttoptr i32 %v2_e9f8 to i8*
  %v3_e9fc = call i32 @function_12c64(i8* %v2_e9fc, i32 ptrtoint (i32* @global_var_15cd8.23 to i32))
  %v2_ea04 = call i32 @function_12c3c(i8* %v2_e5ec)
  %v0_ea08 = load i32, i32* @r6, align 4
  %v1_ea08 = add i32 %v0_ea08, 11
  %v0_ea0c = load i32, i32* @sl, align 4
  %v2_ea0c = add i32 %v0_ea0c, %v2_ea04
  store i32 %v2_ea0c, i32* @r0, align 4
  %v2_ea10 = inttoptr i32 %v2_ea0c to i8*
  %v3_ea10 = call i32 @function_12c64(i8* %v2_ea10, i32 %v1_ea08)
  %v4_ea20 = call i32 @function_137c4(i8* %v2_e5ec, i32 %v2_e5e0, i32 4096)
  %v7_ea24 = icmp eq i32 %v4_ea20, -1
  br i1 %v7_ea24, label %dec_label_pc_e978.loopexit, label %dec_label_pc_ea30

dec_label_pc_ea30:                                ; preds = %dec_label_pc_e998
  %v2_ea30 = call i32 @function_12c3c(i8* %v2_e604)
  store i32 %v2_ea30, i32* @r1, align 4
  %v4_ea44 = call i32 @function_12f90(i8* %v2_e604, i32 %v2_ea30, i32 %v2_e854.pre-phi)
  %v7_ea48 = icmp eq i32 %v4_ea44, -1
  br i1 %v7_ea48, label %dec_label_pc_e978.loopexit, label %dec_label_pc_ea58

dec_label_pc_ea58:                                ; preds = %dec_label_pc_ea30
  %v0_ea50 = load i32, i32* @r7, align 4
  %v2_ea58 = inttoptr i32 %v0_ea50 to i8*
  %v3_ea58 = call i32 @function_12d68(i8* %v2_ea58, i32 10)
  %v2_ea60 = call i32 @function_136d0(i32 %v3_ea58, i32 9)
  %v0_ea64 = load i32, i32* @sb, align 4
  %v1_ea68 = inttoptr i32 %v0_ea64 to i32*
  %v2_ea68 = call i32 @function_13aa8(i32* %v1_ea68)
  store i32 %v2_ea68, i32* @r6, align 4
  %v2_ea6c = icmp eq i32 %v2_ea68, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_ea6c, label %dec_label_pc_ea80, label %dec_label_pc_e990

dec_label_pc_ea80:                                ; preds = %dec_label_pc_e978.loopexit, %dec_label_pc_ea58, %dec_label_pc_e990, %dec_label_pc_e978.preheader
  %v0_ea80 = load i32, i32* @sb, align 4
  %v1_ea84 = inttoptr i32 %v0_ea80 to i32*
  %v2_ea84 = call i32 @function_138f8(i32* %v1_ea84)
  %v0_ea88 = load i32, i32* @r8, align 4
  %v1_ea8c = inttoptr i32 %v0_ea88 to i32*
  %v2_ea8c = call i32 @function_13aa8(i32* %v1_ea8c)
  %v2_ea90 = icmp eq i32 %v2_ea8c, 0
  br i1 %v2_ea90, label %dec_label_pc_ea98, label %dec_label_pc_e894

dec_label_pc_ea98:                                ; preds = %dec_label_pc_e884.loopexit, %dec_label_pc_ea80, %dec_label_pc_e894, %dec_label_pc_e884.preheader
  %v0_ea98 = load i32, i32* @r8, align 4
  %v1_ea9c = inttoptr i32 %v0_ea98 to i32*
  %v2_ea9c = call i32 @function_138f8(i32* %v1_ea9c)
  %v0_eaa0 = load i32, i32* @r5, align 4
  %v1_eaa0 = urem i32 %v0_eaa0, 256
  br label %dec_label_pc_eaa4

dec_label_pc_eaa4:                                ; preds = %dec_label_pc_e864, %dec_label_pc_ea98
  %storemerge = phi i32 [ %v1_eaa0, %dec_label_pc_ea98 ], [ 0, %dec_label_pc_e864 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_eaa8 = call i32 @function_1482c(i32 1)
  br label %dec_label_pc_eaac

dec_label_pc_eaac:                                ; preds = %dec_label_pc_e848, %dec_label_pc_eaa4
  %v1_eab0 = call i32 @function_1211c(i32 4)
  %v1_eab8 = call i32 @function_1211c(i32 5)
  %v1_eac0 = call i32 @function_1211c(i32 6)
  %v1_eac8 = call i32 @function_1211c(i32 7)
  br label %dec_label_pc_eacc

dec_label_pc_eacc:                                ; preds = %dec_label_pc_e668, %dec_label_pc_eaac
  %v0_eacc = load i32, i32* @r4, align 4
  %v2_ead8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ead8, i32* @r4, align 4
  store i32 %v6_e5b8, i32* @r5, align 4
  store i32 %v9_e5b8, i32* @r6, align 4
  store i32 %v12_e5b8, i32* @r7, align 4
  store i32 %v15_e5b8, i32* @r8, align 4
  store i32 %v18_e5b8, i32* @sb, align 4
  store i32 %v21_e5b8, i32* @sl, align 4
  store i32 %v24_e5b8, i32* @fp, align 4
  ret i32 %v0_eacc

dec_label_pc_eadc:                                ; preds = %dec_label_pc_e7b8
  %v1_eadc = add i32 %v0_eadc, 1
  store i32 %v1_eadc, i32* @lr, align 4
  %v7_eae0 = icmp eq i32 %v0_eadc, 0
  br i1 %v7_eae0, label %dec_label_pc_eae8, label %dec_label_pc_e7c0

dec_label_pc_eae8:                                ; preds = %dec_label_pc_eadc
  %v1_eae8 = add i32 %v0_e7c8, 3
  %v2_eae8 = inttoptr i32 %v1_eae8 to i8*
  %v3_eae8 = load i8, i8* %v2_eae8, align 1
  %v7_eaec = icmp eq i8 %v3_eae8, 65
  br i1 %v7_eaec, label %dec_label_pc_eafc, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_eae8
  br label %dec_label_pc_e790.backedge

dec_label_pc_eafc:                                ; preds = %dec_label_pc_eae8
  store i32 %v1_eadc, i32* @r4, align 4
  br label %dec_label_pc_e790.backedge

dec_label_pc_e790.backedge:                       ; preds = %.thread33, %dec_label_pc_eafc, %dec_label_pc_e7c4
  %v0_e7d085 = phi i32 [ %v1_eadc, %dec_label_pc_eafc ], [ %v0_e7d086, %dec_label_pc_e7c4 ], [ %v0_e7d086, %.thread33 ]
  %v0_eadc74 = phi i32 [ %v1_eadc, %dec_label_pc_eafc ], [ %v0_e7c4, %dec_label_pc_e7c4 ], [ %v1_eadc, %.thread33 ]
  %v0_e7b8.pr71 = phi i32 [ 0, %dec_label_pc_eafc ], [ %v0_e7b8.pr72, %dec_label_pc_e7c4 ], [ 0, %.thread33 ]
  %v0_e790 = add i32 %v0_e7c8, 1
  %v1_e790 = add i32 %v0_e7c8, 3
  %v2_e790 = inttoptr i32 %v1_e790 to i8*
  %v3_e790 = load i8, i8* %v2_e790, align 1
  %v2_e794 = icmp eq i8 %v3_e790, 0
  %v1_e798 = add i32 %v0_e79882, 1
  br i1 %v2_e794, label %dec_label_pc_e7d0, label %dec_label_pc_e7a0

dec_label_pc_eb0c:                                ; preds = %dec_label_pc_e5b8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_e668

; uselistorder directives
  uselistorder i32 %v1_e798, { 1, 0 }
  uselistorder i8 %v3_e790, { 1, 0 }
  uselistorder i32 %v0_e7d085, { 1, 0 }
  uselistorder i32 %v1_eadc, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_ea8c, { 1, 0 }
  uselistorder i32 %v1_e7fc, { 1, 0 }
  uselistorder i32 %v0_e80828, { 1, 0 }
  uselistorder i32 %v1_e820, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e7c4, { 1, 0 }
  uselistorder i32 %v0_e79882, { 1, 0 }
  uselistorder i32 %v0_eadc, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e7d086, { 1, 2, 0 }
  uselistorder i32 %v1_e79856, { 1, 0 }
  uselistorder i32 %v2_e77c, { 1, 0 }
  uselistorder i32 %v1_e778, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_e73413, { 1, 0, 2 }
  uselistorder i32 %v0_e724, { 1, 0 }
  uselistorder i32 %v1_e704, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_e698, { 1, 2, 0 }
  uselistorder i32 %v2_e5e0, { 1, 0, 2 }
  uselistorder i32 %v2_e5cc, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_12e94, { 1, 0 }
  uselistorder label %dec_label_pc_e790.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eacc, { 1, 0 }
  uselistorder label %dec_label_pc_eaac, { 1, 0 }
  uselistorder label %dec_label_pc_eaa4, { 1, 0 }
  uselistorder label %dec_label_pc_ea98, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ea80, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e990, { 1, 0 }
  uselistorder label %dec_label_pc_e990thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e978.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e894, { 1, 0 }
  uselistorder label %dec_label_pc_e894.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e884.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e81c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e7c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e7a0, { 1, 0 }
  uselistorder label %dec_label_pc_e744, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e6a8.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e6f8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e6c0, { 1, 0 }
  uselistorder label %dec_label_pc_e668, { 1, 0 }
}

define i32 @function_eb38(i32 %arg1) local_unnamed_addr {
dec_label_pc_eb38:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-628 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %v3_eb38 = load i32, i32* @r4, align 4
  %v6_eb38 = load i32, i32* @r5, align 4
  %v9_eb38 = load i32, i32* @r6, align 4
  %v12_eb38 = load i32, i32* @r7, align 4
  %v15_eb38 = load i32, i32* @r8, align 4
  %v18_eb38 = load i32, i32* @sb, align 4
  %v21_eb38 = load i32, i32* @sl, align 4
  %v24_eb38 = load i32, i32* @fp, align 4
  %v2_eb44 = call i32 @function_138a0(i32* null)
  store i32 %v2_eb44, i32* @r6, align 4
  %v0_eb4c = call i32 @function_135fc()
  %v7_eb50 = icmp eq i32 %v0_eb4c, -1
  %. = zext i1 %v7_eb50 to i32
  %tmp56 = icmp slt i32 %v0_eb4c, 1
  %storemerge37 = select i1 %tmp56, i32 %., i32 1
  store i32 %storemerge37, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f19c.94 to i32), i32* %r3.global-to-local, align 4
  %v2_eb6c = icmp eq i32 %storemerge37, 0
  store i32 %v0_eb4c, i32* @global_var_1f19c.94, align 4
  br i1 %v2_eb6c, label %dec_label_pc_eb80, label %dec_label_pc_eb78

dec_label_pc_eb78:                                ; preds = %dec_label_pc_ebdc, %dec_label_pc_eb38
  %v29_eb7c = phi i32 [ %v0_eb4c, %dec_label_pc_eb38 ], [ 0, %dec_label_pc_ebdc ]
  store i32 %v3_eb38, i32* @r4, align 4
  store i32 %v6_eb38, i32* @r5, align 4
  store i32 %v9_eb38, i32* @r6, align 4
  store i32 %v12_eb38, i32* @r7, align 4
  store i32 %v15_eb38, i32* @r8, align 4
  store i32 %v18_eb38, i32* @sb, align 4
  store i32 %v21_eb38, i32* @sl, align 4
  store i32 %v24_eb38, i32* @fp, align 4
  ret i32 %v29_eb7c

dec_label_pc_eb80:                                ; preds = %dec_label_pc_eb38
  store i32 2, i32* @r5, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v1_eb94 = call i32 @function_e5b8(i32 20736)
  %v2_eb98 = icmp eq i32 %v1_eb94, 0
  br i1 %v2_eb98, label %dec_label_pc_eba0, label %dec_label_pc_edf4

dec_label_pc_eba0:                                ; preds = %dec_label_pc_eb80, %dec_label_pc_edf4, %dec_label_pc_ee1c
  %v1_eba4 = call i32 @function_1482c(i32 5)
  %v1_ebac = call i32 @function_14054(i32 4096)
  %v2_ebac = inttoptr i32 %v1_ebac to i8*
  store i32 %v1_ebac, i32* @global_var_1f23c.98, align 4
  store i32 ptrtoint (i32* @global_var_1f1a0.100 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v2_ebac, align 1
  %v0_ebc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ebc4 = load i32, i32* %r3.global-to-local, align 4
  %v2_ebc4 = inttoptr i32 %v1_ebc4 to i32*
  store i32 %v0_ebc4, i32* %v2_ebc4, align 4
  %v0_ebc8 = load i32, i32* @r6, align 4
  store i32 %v0_ebc8, i32* @r5, align 4
  %v0_ebcc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ebcc, i32* @sb, align 4
  store i32 400, i32* @r6, align 4
  %v2_ebd4 = ptrtoint i32* %stack_var_-116 to i32
  store i32 %v2_ebd4, i32* @fp, align 4
  %v2_ebd8 = ptrtoint i32* %stack_var_-628 to i32
  store i32 %v2_ebd8, i32* @r8, align 4
  %v2_eccc = bitcast i32* %stack_var_-116 to i8*
  br label %dec_label_pc_ebdc

dec_label_pc_ebdc:                                ; preds = %dec_label_pc_ec90, %dec_label_pc_eba0
  %v1_ebe0 = call i32 @function_121d4(i32 4)
  %v3_ebec = call i32 @function_120f0(i32 4, i32* null)
  store i32 %v3_ebec, i32* @r0, align 4
  %v1_ebf0 = call i32 @function_139ac(i32 %v3_ebec)
  store i32 %v1_ebf0, i32* @sl, align 4
  %v2_ebf4 = icmp eq i32 %v1_ebf0, 0
  br i1 %v2_ebf4, label %dec_label_pc_eb78, label %dec_label_pc_ebfc

dec_label_pc_ebfc:                                ; preds = %dec_label_pc_ebdc
  %v1_ec00 = call i32 @function_1211c(i32 4)
  %v0_ec0420 = load i32, i32* @sl, align 4
  %v1_ec0821 = inttoptr i32 %v0_ec0420 to i32*
  %v2_ec0822 = call i32 @function_13aa8(i32* %v1_ec0821)
  %v2_ec0c24 = icmp eq i32 %v2_ec0822, 0
  br i1 %v2_ec0c24, label %dec_label_pc_ec90, label %dec_label_pc_ec14.preheader

dec_label_pc_ec14.preheader:                      ; preds = %dec_label_pc_ebfc, %dec_label_pc_ec04.backedge
  %v0_ec1429 = phi i32 [ %v2_ec08, %dec_label_pc_ec04.backedge ], [ %v2_ec0822, %dec_label_pc_ebfc ]
  br label %dec_label_pc_ec14

dec_label_pc_ec14:                                ; preds = %dec_label_pc_ec14.preheader, %dec_label_pc_ec78
  %v0_ec24 = phi i32 [ %v0_ec1429, %dec_label_pc_ec14.preheader ], [ %v2_ec84, %dec_label_pc_ec78 ]
  %v1_ec14 = add i32 %v0_ec24, 11
  %v2_ec14 = inttoptr i32 %v1_ec14 to i8*
  %v3_ec14 = load i8, i8* %v2_ec14, align 1
  %v4_ec14 = zext i8 %v3_ec14 to i32
  %v1_ec18 = add nsw i32 %v4_ec14, -48
  store i32 %v1_ec18, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ec18, 9
  br i1 %tmp, label %dec_label_pc_ec04.backedge, label %dec_label_pc_ec24

dec_label_pc_ec24:                                ; preds = %dec_label_pc_ec14
  store i32 %v1_ec14, i32* @r4, align 4
  %v3_ec30 = call i32 @function_12d68(i8* %v2_ec14, i32 10)
  %v0_ec34 = load i32, i32* @r6, align 4
  store i32 %v3_ec30, i32* @r7, align 4
  %v0_ec3c = load i32, i32* @sb, align 4
  %v1_ec3c = add i32 %v0_ec3c, 1
  store i32 %v1_ec3c, i32* @sb, align 4
  %v5_ec40 = icmp slt i32 %v0_ec34, %v3_ec30
  %v2_eca0 = call i32 @function_138a0(i32* null)
  br i1 %v5_ec40, label %dec_label_pc_ec9c, label %dec_label_pc_ec44

dec_label_pc_ec44:                                ; preds = %dec_label_pc_ec24
  %v0_ec4c = load i32, i32* @r5, align 4
  %v2_ec4c = sub i32 %v2_eca0, %v0_ec4c
  %v7_ec54 = icmp slt i32 %v2_ec4c, 601
  br i1 %v7_ec54, label %dec_label_pc_ec5c, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_ec44
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_ec04.backedge

dec_label_pc_ec5c:                                ; preds = %dec_label_pc_ec44
  %v0_ec5c = load i32, i32* @r7, align 4
  %v7_ec60 = icmp slt i32 %v0_ec5c, 401
  br i1 %v7_ec60, label %dec_label_pc_ec04.backedge, label %dec_label_pc_ec64

dec_label_pc_ec64:                                ; preds = %dec_label_pc_ec5c
  %v0_ec64 = load i32, i32* @sb, align 4
  %v2_ec6c = call i32 @function_13358(i32 %v0_ec64, i32 10)
  %v2_ec70 = icmp eq i32 %v2_ec6c, 0
  br i1 %v2_ec70, label %dec_label_pc_ec78, label %dec_label_pc_ec04.backedge

dec_label_pc_ec78:                                ; preds = %dec_label_pc_ec64
  %v1_ec7c = call i32 @function_1482c(i32 1)
  %v0_ec80 = load i32, i32* @sl, align 4
  %v1_ec84 = inttoptr i32 %v0_ec80 to i32*
  %v2_ec84 = call i32 @function_13aa8(i32* %v1_ec84)
  %v2_ec88 = icmp eq i32 %v2_ec84, 0
  br i1 %v2_ec88, label %dec_label_pc_ec90, label %dec_label_pc_ec14

dec_label_pc_ec90:                                ; preds = %dec_label_pc_ec04.backedge, %dec_label_pc_ec78, %dec_label_pc_ebfc
  %v0_ec90 = load i32, i32* @sl, align 4
  %v1_ec94 = inttoptr i32 %v0_ec90 to i32*
  %v2_ec94 = call i32 @function_138f8(i32* %v1_ec94)
  br label %dec_label_pc_ebdc

dec_label_pc_ec9c:                                ; preds = %dec_label_pc_ec24
  store i32 %v2_eca0, i32* %stack_var_-632, align 4
  %v1_ecac = call i32 @function_121d4(i32 4)
  %v1_ecb4 = call i32 @function_121d4(i32 8)
  %v3_ecc0 = call i32 @function_120f0(i32 4, i32* null)
  store i32 %v2_ebd4, i32* @r0, align 4
  %v3_eccc = call i32 @function_12c64(i8* %v2_eccc, i32 %v3_ecc0)
  %v0_ecd0 = load i32, i32* @fp, align 4
  %v2_ecd0 = add i32 %v0_ecd0, %v3_eccc
  store i32 %v2_ecd0, i32* @r5, align 4
  %v0_ecd4 = load i32, i32* @r4, align 4
  store i32 %v2_ecd0, i32* @r0, align 4
  %v2_ecdc = inttoptr i32 %v2_ecd0 to i8*
  %v3_ecdc = call i32 @function_12c64(i8* %v2_ecdc, i32 %v0_ecd4)
  store i32 %v3_ecdc, i32* @r4, align 4
  %v3_ecec = call i32 @function_120f0(i32 8, i32* null)
  %v0_ecf4 = load i32, i32* @r5, align 4
  %v1_ecf4 = load i32, i32* @r4, align 4
  %v2_ecf4 = add i32 %v1_ecf4, %v0_ecf4
  store i32 %v2_ecf4, i32* @r0, align 4
  %v2_ecf8 = inttoptr i32 %v2_ecf4 to i8*
  %v3_ecf8 = call i32 @function_12c64(i8* %v2_ecf8, i32 %v3_ecec)
  %v1_ed00 = call i32 @function_1211c(i32 4)
  %v1_ed08 = call i32 @function_1211c(i32 8)
  %v3_ed14 = call i32 @function_136fc(i8* %v2_eccc, i32 0)
  %v7_ed18 = icmp eq i32 %v3_ed14, -1
  store i32 %v3_ed14, i32* @r6, align 4
  br i1 %v7_ed18, label %dec_label_pc_edc0, label %dec_label_pc_ed24

dec_label_pc_ed24:                                ; preds = %dec_label_pc_ec9c
  %v1_ed28 = call i32 @function_121d4(i32 58)
  br label %dec_label_pc_ed2c

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_ed94, %.thread6, %dec_label_pc_ed44, %dec_label_pc_ed24
  %v0_ed2c = load i32, i32* @r6, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v4_ed38 = call i32 @function_13798(i32 %v0_ed2c, i32* nonnull %stack_var_-628, i32 512)
  store i32 %v4_ed38, i32* @r4, align 4
  %tmp59 = icmp slt i32 %v4_ed38, 1
  br i1 %tmp59, label %dec_label_pc_ede0, label %dec_label_pc_ed44

dec_label_pc_ed44:                                ; preds = %dec_label_pc_ed2c
  %v3_ed4c = call i32 @function_120f0(i32 58, i32* null)
  store i32 %v3_ed4c, i32* @r5, align 4
  %v3_ed5c = call i32 @function_120f0(i32 58, i32* null)
  %v1_ed60 = inttoptr i32 %v3_ed5c to i8*
  %v2_ed60 = call i32 @function_12c3c(i8* %v1_ed60)
  %v0_ed64 = load i32, i32* @r4, align 4
  %v5_ed68 = icmp slt i32 %v0_ed64, %v2_ed60
  br i1 %v5_ed68, label %dec_label_pc_ed2c, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_ed44
  %v1_ed7412 = add i32 %v0_ed64, -1
  store i32 %v1_ed7412, i32* @r4, align 4
  %v2_ed7413 = icmp eq i32 %v0_ed64, 0
  br i1 %v2_ed7413, label %dec_label_pc_ed2c, label %dec_label_pc_ed7c.lr.ph

dec_label_pc_ed7c.lr.ph:                          ; preds = %.thread6
  %v0_ed7c.pre = load i32, i32* @r5, align 4
  %v1_ed80.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ed7c

dec_label_pc_ed7c:                                ; preds = %dec_label_pc_ed94, %dec_label_pc_ed7c.lr.ph
  %v0_ed74 = phi i32 [ %v1_ed7412, %dec_label_pc_ed7c.lr.ph ], [ %v1_ed74, %dec_label_pc_ed94 ]
  %v0_ed94 = phi i32 [ 0, %dec_label_pc_ed7c.lr.ph ], [ %v1_ed94, %dec_label_pc_ed94 ]
  %v0_ed88 = phi i32 [ 0, %dec_label_pc_ed7c.lr.ph ], [ %v1_ed88., %dec_label_pc_ed94 ]
  %v2_ed7c = add i32 %v0_ed88, %v0_ed7c.pre
  %v3_ed7c = inttoptr i32 %v2_ed7c to i8*
  %v4_ed7c = load i8, i8* %v3_ed7c, align 1
  %v6_ed7c = zext i8 %v4_ed7c to i32
  store i32 %v6_ed7c, i32* %r2.global-to-local, align 4
  %v2_ed80 = add i32 %v0_ed94, %v1_ed80.pre
  %v3_ed80 = inttoptr i32 %v2_ed80 to i8*
  %v4_ed80 = load i8, i8* %v3_ed80, align 1
  %v6_ed80 = zext i8 %v4_ed80 to i32
  store i32 %v6_ed80, i32* %r3.global-to-local, align 4
  %v9_ed84 = icmp eq i8 %v4_ed80, %v4_ed7c
  %v1_ed88 = add i32 %v0_ed88, 1
  %v1_ed88. = select i1 %v9_ed84, i32 %v1_ed88, i32 0
  br i1 %v9_ed84, label %dec_label_pc_ed9c, label %dec_label_pc_ed94

dec_label_pc_ed94:                                ; preds = %dec_label_pc_ed9c, %dec_label_pc_ed7c
  %v1_ed94 = add i32 %v0_ed94, 1
  %v1_ed74 = add i32 %v0_ed74, -1
  store i32 %v1_ed74, i32* @r4, align 4
  %v2_ed74 = icmp eq i32 %v0_ed74, 0
  br i1 %v2_ed74, label %dec_label_pc_ed2c, label %dec_label_pc_ed7c

dec_label_pc_ed9c:                                ; preds = %dec_label_pc_ed7c
  %v9_ed9c = icmp eq i32 %v2_ed60, %v1_ed88.
  br i1 %v9_ed9c, label %dec_label_pc_eda4, label %dec_label_pc_ed94

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ed9c
  %v1_eda8 = call i32 @function_1211c(i32 58)
  %v0_edac = load i32, i32* @r6, align 4
  %v1_edb0 = call i32 @function_135d0(i32 %v0_edac)
  %v0_edb4 = load i32, i32* @r7, align 4
  %v2_edbc = call i32 @function_136d0(i32 %v0_edb4, i32 9)
  br label %dec_label_pc_edc0

dec_label_pc_edc0:                                ; preds = %dec_label_pc_ec9c, %dec_label_pc_ede0, %dec_label_pc_eda4
  %v2_edc8 = call i32 @function_12cdc(i32 %v2_ebd4, i32 64)
  %v1_edd0 = call i32 @function_1482c(i32 1)
  %v2_edd4 = load i32, i32* %stack_var_-632, align 4
  store i32 %v2_edd4, i32* @r5, align 4
  %v0_edd8 = load i32, i32* @r7, align 4
  store i32 %v0_edd8, i32* @r6, align 4
  br label %dec_label_pc_ec04.backedge

dec_label_pc_ec04.backedge:                       ; preds = %dec_label_pc_ec64, %dec_label_pc_ec5c, %dec_label_pc_ec14, %dec_label_pc_edc0, %.thread1
  %v0_ec04 = load i32, i32* @sl, align 4
  %v1_ec08 = inttoptr i32 %v0_ec04 to i32*
  %v2_ec08 = call i32 @function_13aa8(i32* %v1_ec08)
  %v2_ec0c = icmp eq i32 %v2_ec08, 0
  br i1 %v2_ec0c, label %dec_label_pc_ec90, label %dec_label_pc_ec14.preheader

dec_label_pc_ede0:                                ; preds = %dec_label_pc_ed2c
  %v1_ede4 = call i32 @function_1211c(i32 58)
  %v0_ede8 = load i32, i32* @r6, align 4
  %v1_edec = call i32 @function_135d0(i32 %v0_ede8)
  br label %dec_label_pc_edc0

dec_label_pc_edf4:                                ; preds = %dec_label_pc_eb80
  %v0_edf4 = load i32, i32* @r4, align 4
  store i32 %v0_edf4, i32* %r2.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_edfc = load i32, i32* @r5, align 4
  %v3_ee0c = call i32 @function_13ebc(i32 %v0_edfc, i32 1, i32 %v0_edf4)
  %v7_ee10 = icmp eq i32 %v3_ee0c, -1
  store i32 %v3_ee0c, i32* @r4, align 4
  br i1 %v7_ee10, label %dec_label_pc_eba0, label %dec_label_pc_ee1c

dec_label_pc_ee1c:                                ; preds = %dec_label_pc_edf4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_ee24 = bitcast i32* %stack_var_-52 to %sockaddr*
  %v4_ee24 = call i32 @function_13cec(i32 %v3_ee0c, %sockaddr* %v3_ee24, i32 16)
  %v0_ee28 = load i32, i32* @r4, align 4
  %v2_ee30 = call i32 @function_13da0(i32 %v0_ee28, i32 1)
  br label %dec_label_pc_eba0

; uselistorder directives
  uselistorder i32 %v3_ee0c, { 2, 1, 0 }
  uselistorder i32 %v2_ec08, { 1, 0 }
  uselistorder i32 %v1_ed74, { 1, 0 }
  uselistorder i32 %v1_ed88., { 1, 0 }
  uselistorder i1 %v9_ed84, { 1, 0 }
  uselistorder i32 %v0_ed88, { 1, 0 }
  uselistorder i32 %v0_ed94, { 1, 0 }
  uselistorder i32 %v0_ed74, { 1, 0 }
  uselistorder i32 %v0_ed64, { 1, 0, 2 }
  uselistorder i32 %v2_ed60, { 1, 0 }
  uselistorder i32 %v3_ed14, { 1, 0 }
  uselistorder i32 %v2_ec84, { 1, 0 }
  uselistorder i32 %storemerge37, { 1, 0 }
  uselistorder i32 %v0_eb4c, { 1, 2, 3, 0 }
  uselistorder i32 (i8*, i32)* @function_12d68, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32*)* @function_13aa8, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_139ac, { 2, 1, 0 }
  uselistorder i32* @global_var_1f19c.94, { 0, 2, 1 }
  uselistorder label %dec_label_pc_ec04.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_edc0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ec14, { 1, 0 }
  uselistorder label %dec_label_pc_ec14.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_eba0, { 2, 1, 0 }
}

define i32 @function_ee44(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ee44:
  store i32 ptrtoint (i32* @global_var_ee5c.102 to i32), i32* @global_var_1f028.104, align 4
  ret i32 %arg1
}

define i32 @function_ee5c() local_unnamed_addr {
dec_label_pc_ee5c:
  %stack_var_0 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ee5c = load i32, i32* @r4, align 4
  store i32 %v3_ee5c, i32* %stack_var_-8, align 4
  %v1_ee64 = call i32 @function_121d4(i32 1)
  store i32 2032805430, i32* @global_var_1f244.108, align 4
  %v3_ee7c = call i32 @function_120f0(i32 1, i32* null)
  %v4_ee7c = inttoptr i32 %v3_ee7c to i8*
  %v2_ee80 = add i32 %v3_ee7c, 1
  %v3_ee80 = inttoptr i32 %v2_ee80 to i8*
  %v4_ee80 = load i8, i8* %v3_ee80, align 1
  %v3_ee84 = load i8, i8* %v4_ee7c, align 1
  store i8 %v4_ee80, i8* bitcast (i32* @global_var_1f243.109 to i8*), align 4
  store i8 %v3_ee84, i8* bitcast (i32* @global_var_1f242.110 to i8*), align 4
  %v2_ee9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ee9c, i32* @r4, align 4
  %v7_ee9c = ptrtoint i32* %stack_var_0 to i32
  %v1_eea0 = call i32 @function_1211c(i32 1)
  %v0_eea4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_eea4, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_ee5c
  %v1_eea4 = load i32, i32* @r1, align 4
  %v5_eea4 = sdiv i32 %v1_eea0, 16
  %v6_eea4 = and i32 %v1_eea4, %v5_eea4
  call void @__pseudo_branch(i32 %v6_eea4)
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_ee5c, %bb
  %v0_eea8 = load i1, i1* @cpsr_v, align 1
  br i1 %v0_eea8, label %bb5, label %bb4

bb4:                                              ; preds = %bb3
  %v1_eea8 = load i32, i32* @sl, align 4
  %v2_eea8 = add i32 %v1_eea8, -28
  %v3_eea8 = inttoptr i32 %v2_eea8 to i32*
  %v4_eea8 = load i32, i32* @r1, align 4
  store i32 %v4_eea8, i32* %v3_eea8, align 4
  %v5_eea8 = add i32 %v1_eea8, -24
  %v6_eea8 = inttoptr i32 %v5_eea8 to i32*
  %v7_eea8 = load i32, i32* @r2, align 4
  store i32 %v7_eea8, i32* %v6_eea8, align 4
  %v8_eea8 = add i32 %v1_eea8, -20
  %v9_eea8 = inttoptr i32 %v8_eea8 to i32*
  %v10_eea8 = load i32, i32* @r4, align 4
  store i32 %v10_eea8, i32* %v9_eea8, align 4
  %v11_eea8 = add i32 %v1_eea8, -16
  %v12_eea8 = inttoptr i32 %v11_eea8 to i32*
  %v13_eea8 = load i32, i32* @r5, align 4
  store i32 %v13_eea8, i32* %v12_eea8, align 4
  %v14_eea8 = add i32 %v1_eea8, -12
  %v15_eea8 = inttoptr i32 %v14_eea8 to i32*
  %v16_eea8 = load i32, i32* @sb, align 4
  store i32 %v16_eea8, i32* %v15_eea8, align 4
  %v17_eea8 = add i32 %v1_eea8, -8
  %v18_eea8 = inttoptr i32 %v17_eea8 to i32*
  %v19_eea8 = load i32, i32* @sl, align 4
  store i32 %v19_eea8, i32* %v18_eea8, align 4
  %v20_eea8 = add i32 %v1_eea8, -4
  %v21_eea8 = inttoptr i32 %v20_eea8 to i32*
  store i32 %v7_ee9c, i32* %v21_eea8, align 4
  br label %bb5

bb5:                                              ; preds = %bb3, %bb4
  ret i32 %v1_eea0

; uselistorder directives
  uselistorder i32 %v1_eea0, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_eeac(i32 %arg1) local_unnamed_addr {
dec_label_pc_eeac:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_eeac = load i32, i32* @r4, align 4
  %v9_eeac = load i32, i32* @r6, align 4
  %v12_eeac = load i32, i32* @r7, align 4
  %v15_eeac = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_eec8 = call i32 @function_13ebc(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1f020.112 to i32), i32* @r6, align 4
  %v7_eed0 = icmp eq i32 %v3_eec8, -1
  store i32 %v3_eec8, i32* @global_var_1f020.112, align 4
  br i1 %v7_eed0, label %dec_label_pc_ef90, label %dec_label_pc_eedc

dec_label_pc_eedc:                                ; preds = %dec_label_pc_eeac
  %v0_eee0 = load i32, i32* @r4, align 4
  %v6_eef0 = call i32 @function_13e8c(i32 %v3_eec8, i32 %v0_eee0, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_eef4 = load i32, i32* @global_var_1f020.112, align 4
  store i32 %v2_eef4, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_ef04 = call i32 @function_1350c(i32 %v2_eef4, i32 3)
  %v1_ef0c = or i32 %v2_ef04, 2048
  store i32 %v1_ef0c, i32* @r2, align 4
  %v0_ef10 = load i32, i32* @r4, align 4
  %v2_ef14 = call i32 @function_1350c(i32 %v0_ef10, i32 4)
  store i32 ptrtoint (i8** @global_var_1f02c.114 to i32), i32* @r8, align 4
  %v2_ef1c = load i8, i8* bitcast (i8** @global_var_1f02c.114 to i8*), align 4
  %v2_ef20 = icmp eq i8 %v2_ef1c, 0
  br i1 %v2_ef20, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_eedc
  br label %bb

.thread:                                          ; preds = %dec_label_pc_eedc
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_ef58 = call i32 @function_13b78()
  %v0_ef5c = load i32, i32* @r5, align 4
  %v2_ef5c = inttoptr i32 %v0_ef58 to i32*
  store i32 %v0_ef5c, i32* %v2_ef5c, align 4
  %v2_ef60 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_ef60, i32* @r7, align 4
  store i32 %v0_ef58, i32* @r4, align 4
  %v2_ef6c = load i32, i32* @global_var_1f020.112, align 4
  %v3_ef74 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_ef74 = call i32 @function_13cec(i32 %v2_ef6c, %sockaddr* %v3_ef74, i32 16)
  %v7_ef78 = icmp eq i32 %v4_ef74, -1
  br i1 %v7_ef78, label %dec_label_pc_ef98, label %dec_label_pc_ef80

dec_label_pc_ef80:                                ; preds = %bb
  %v2_ef88 = load i32, i32* @global_var_1f020.112, align 4
  %v2_ef8c = call i32 @function_13da0(i32 %v2_ef88, i32 1)
  br label %dec_label_pc_ef90

dec_label_pc_ef90:                                ; preds = %dec_label_pc_eeac, %dec_label_pc_efa4, %dec_label_pc_ef80
  %v20_ef94 = phi i32 [ %v3_eec8, %dec_label_pc_eeac ], [ %v1_eff4, %dec_label_pc_efa4 ], [ %v2_ef8c, %dec_label_pc_ef80 ]
  store i32 %v3_eeac, i32* @r4, align 4
  store i32 %v9_eeac, i32* @r6, align 4
  store i32 %v12_eeac, i32* @r7, align 4
  store i32 %v15_eeac, i32* @r8, align 4
  ret i32 %v20_ef94

dec_label_pc_ef98:                                ; preds = %bb
  %v0_ef98 = load i32, i32* @r4, align 4
  %v1_ef98 = inttoptr i32 %v0_ef98 to i32*
  %v2_ef98 = load i32, i32* %v1_ef98, align 4
  %v7_ef9c = icmp eq i32 %v2_ef98, 99
  br i1 %v7_ef9c, label %dec_label_pc_effc, label %dec_label_pc_efa4

dec_label_pc_efa4:                                ; preds = %dec_label_pc_effc, %bb21, %dec_label_pc_ef98
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_efbc = load i32, i32* @global_var_1f020.112, align 4
  %v4_efd4 = call i32 @function_13d18(i32 %v2_efbc, %sockaddr* %v3_ef74, i32 16)
  %v1_efdc = call i32 @function_1482c(i32 5)
  %v2_efe0 = load i32, i32* @global_var_1f020.112, align 4
  %v1_efe4 = call i32 @function_135d0(i32 %v2_efe0)
  %v1_eff0 = call i32 @function_e5b8(i32 50951)
  %v1_eff4 = call i32 @function_eeac(i32 %v1_eff0)
  br label %dec_label_pc_ef90

dec_label_pc_effc:                                ; preds = %dec_label_pc_ef98
  %v2_effc = load i8, i8* bitcast (i8** @global_var_1f02c.114 to i8*), align 4
  %v3_effc = zext i8 %v2_effc to i32
  %v1_f000 = load i32, i32* @r5, align 4
  %v9_f000 = icmp eq i32 %v3_effc, %v1_f000
  br i1 %v9_f000, label %dec_label_pc_efa4, label %bb21

bb21:                                             ; preds = %dec_label_pc_effc
  %v2_f008 = trunc i32 %v1_f000 to i8
  store i8 %v2_f008, i8* bitcast (i8** @global_var_1f02c.114 to i8*), align 4
  br label %dec_label_pc_efa4

; uselistorder directives
  uselistorder i32 %v3_eec8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_e5b8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_13da0, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f02c.114 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1f02c.114, { 1, 0 }
  uselistorder label %dec_label_pc_efa4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ef90, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_f01c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f01c:
  %stack_var_-16 = alloca i32, align 4
  %v3_f01c = load i32, i32* @r4, align 4
  %v6_f01c = load i32, i32* @r5, align 4
  %v2_f020 = ptrtoint i32* %stack_var_-16 to i32
  %v0_f024 = call i32 @function_135fc()
  %v7_f028 = icmp eq i32 %v0_f024, -1
  %. = zext i1 %v7_f028 to i32
  %tmp10 = icmp slt i32 %v0_f024, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_f044 = icmp eq i32 %storemerge4, 0
  store i32 %v0_f024, i32* @global_var_1f1a4.117, align 4
  br i1 %v2_f044, label %dec_label_pc_f058, label %dec_label_pc_f050

dec_label_pc_f050:                                ; preds = %dec_label_pc_f01c
  store i32 %v3_f01c, i32* @r4, align 4
  store i32 %v6_f01c, i32* @r5, align 4
  ret i32 %v0_f024

dec_label_pc_f058:                                ; preds = %dec_label_pc_f01c
  store i32 1, i32* %stack_var_-16, align 4
  %v1_f064 = call i32 @function_121d4(i32 55)
  %v1_f06c = call i32 @function_121d4(i32 56)
  %v0_f070 = load i32, i32* @r5, align 4
  %v2_f078 = inttoptr i32 %v0_f070 to i32*
  %v3_f078 = call i32 @function_120f0(i32 55, i32* %v2_f078)
  %v2_f080 = inttoptr i32 %v3_f078 to i8*
  %v3_f080 = call i32 @function_136fc(i8* %v2_f080, i32 2)
  %v7_f084 = icmp eq i32 %v3_f080, -1
  store i32 %v3_f080, i32* @r4, align 4
  br i1 %v7_f084, label %dec_label_pc_f0cc, label %dec_label_pc_f090

dec_label_pc_f090:                                ; preds = %dec_label_pc_f0cc, %dec_label_pc_f058
  %v0_f09c = phi i32 [ %v3_f0dc, %dec_label_pc_f0cc ], [ %v3_f080, %dec_label_pc_f058 ]
  %v3_f0a4 = call i32 @function_13680(i32 %v0_f09c, i32 -2147199228, i32 %v2_f020)
  br label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_f0a8, %dec_label_pc_f090
  %v0_f0b4 = load i32, i32* @r4, align 4
  %v3_f0bc = call i32 @function_13680(i32 %v0_f0b4, i32 -2147199227, i32 0)
  %v1_f0c4 = call i32 @function_1482c(i32 10)
  br label %dec_label_pc_f0a8

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f058
  %v0_f0cc = load i32, i32* @r5, align 4
  %v2_f0d4 = inttoptr i32 %v0_f0cc to i32*
  %v3_f0d4 = call i32 @function_120f0(i32 56, i32* %v2_f0d4)
  %v2_f0dc = inttoptr i32 %v3_f0d4 to i8*
  %v3_f0dc = call i32 @function_136fc(i8* %v2_f0dc, i32 2)
  %v3_f0e0 = icmp eq i32 %v3_f0dc, -1
  store i32 %v3_f0dc, i32* @r4, align 4
  br i1 %v3_f0e0, label %dec_label_pc_f0ec, label %dec_label_pc_f090

dec_label_pc_f0ec:                                ; preds = %dec_label_pc_f0cc
  %v1_f0f0 = call i32 @function_1211c(i32 55)
  %v1_f0f8 = call i32 @function_1211c(i32 56)
  %v0_f0fc = load i32, i32* @r5, align 4
  %v1_f100 = call i32 @function_14798(i32 %v0_f0fc)
  %v0_f104 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f104, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_f0ec
  %v2_f104 = load i32, i32* @r4, align 4
  %v5_f104 = udiv i32 %v2_f104, 8
  %v6_f104 = and i32 %v5_f104, 2
  call void @__pseudo_branch(i32 %v6_f104)
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_f0ec, %bb13
  ret i32 %v1_f100

; uselistorder directives
  uselistorder i32 %v3_f0dc, { 1, 2, 0 }
  uselistorder i32 %v3_f080, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_f024, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32, i32)* @function_13680, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_f108(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f108:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f108 = load i32, i32* @r4, align 4
  store i32 %v3_f108, i32* %stack_var_-36, align 4
  %v6_f108 = load i32, i32* @r5, align 4
  %v9_f108 = load i32, i32* @r6, align 4
  %v2_f114 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_f114, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_f114, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_f12c = call i32 @function_13f18(i32 %v2_f114)
  store i32 %v2_f114, i32* @r0, align 4
  %v2_f138 = call i32 @function_13ee8(i32 %v2_f114, i32 2)
  %v0_f13c = load i32, i32* @r5, align 4
  store i32 %v0_f13c, i32* %r2.global-to-local, align 4
  %v3_f148 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_f148 = call i32 @function_1384c(i32 %v0_f13c, %_TYPEDEF_sigset_t* %v3_f148, i32 %v0_f13c)
  %v2_f154 = call i32 @function_13f30(i32 17, i32 1)
  %v2_f160 = call i32 @function_13f30(i32 5, i32 ptrtoint (i32* @global_var_ee44.119 to i32))
  %v0_f164 = call i32 @function_12ef4()
  store i8 -92, i8* bitcast (i32* @global_var_1f243.109 to i8*), align 4
  store i32 %v0_f164, i32* @global_var_1f238.83, align 4
  store i32 -583215265, i32* %r2.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1f240.106 to i8*), align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 -583215265, i32* @global_var_1f244.108, align 4
  store i8 1, i8* bitcast (i32* @global_var_1f242.110 to i8*), align 4
  %v0_f19c = load i32, i32* @r5, align 4
  %v1_f19c = trunc i32 %v0_f19c to i8
  store i8 %v1_f19c, i8* bitcast (i32* @global_var_1f241.122 to i8*), align 4
  %v6_f1a0 = call i32 @function_1228c(i32 %v0_f164, i32 ptrtoint (i8** @global_var_1f240.106 to i32), i32 -583215265, i32 1)
  store i32 ptrtoint (i32* @global_var_ee5c.102 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ee5c.102 to i32), i32* @global_var_1f028.104, align 4
  %v2_f1b4 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_f1b4, i32* @sb, align 4
  %v1_f1b8 = call i32 @function_eeac(i32 %v6_f1a0)
  %v1_f1bc = call i32 @function_f920(i32 %v1_f1b8)
  %v2_f1c8 = call i32 @function_12cdc(i32 %v2_f1b4, i32 32)
  %v0_f1cc = load i32, i32* @r6, align 4
  %v7_f1cc = icmp eq i32 %v0_f1cc, 2
  br i1 %v7_f1cc, label %dec_label_pc_f2f8, label %dec_label_pc_f1d4

dec_label_pc_f1d4:                                ; preds = %dec_label_pc_f2f8, %dec_label_pc_f108, %dec_label_pc_f308
  %v0_f1d4 = call i32 @function_f8c8()
  store i32 %v0_f1d4, i32* %r6.global-to-local, align 4
  %v0_f1dc = load i32, i32* @r8, align 4
  %v1_f1dc = inttoptr i32 %v0_f1dc to i32*
  %v2_f1dc = load i32, i32* %v1_f1dc, align 4
  %v1_f1e0 = inttoptr i32 %v2_f1dc to i8*
  %v2_f1e0 = call i32 @function_12c3c(i8* %v1_f1e0)
  %v0_f1e8 = load i32, i32* @r8, align 4
  %v1_f1e8 = inttoptr i32 %v0_f1e8 to i32*
  %v2_f1e8 = load i32, i32* %v1_f1e8, align 4
  %v1_f1ec = inttoptr i32 %v2_f1e8 to i8*
  %v2_f1ec = call i32 @function_12c3c(i8* %v1_f1ec)
  %v1_f1f0 = sub i32 20, %v2_f1e0
  store i32 %v2_f1ec, i32* @r5, align 4
  %v0_f1f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_f1fc = call i32 @function_13358(i32 %v0_f1f8, i32 %v1_f1f0)
  %v1_f204 = load i32, i32* @r5, align 4
  %v2_f204 = add i32 %v1_f204, %v2_f1fc
  store i32 %v2_f204, i32* @r4, align 4
  %v2_f208 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_f208, i32* @r6, align 4
  %v2_f214 = call i32 @function_f97c(i32 %v2_f208, i32 %v2_f204)
  %v2_f218 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f218, i32* %r2.global-to-local, align 4
  %v1_f21c = load i32, i32* @r4, align 4
  %v2_f21c = add i32 %v1_f21c, %v2_f218
  store i32 %v2_f21c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_f228 = load i32, i32* @r8, align 4
  %v1_f228 = inttoptr i32 %v0_f228 to i32*
  %v2_f228 = load i32, i32* %v1_f228, align 4
  store i32 %v2_f228, i32* @r0, align 4
  %v3_f22c = add i32 %v2_f21c, -72
  %v4_f22c = inttoptr i32 %v3_f22c to i8*
  store i8 0, i8* %v4_f22c, align 1
  %v2_f230 = inttoptr i32 %v2_f228 to i8*
  %v3_f230 = call i32 @function_12c64(i8* %v2_f230, i32 %v2_f208)
  %v2_f23c = call i32 @function_12cdc(i32 %v2_f208, i32 32)
  %v0_f240 = call i32 @function_f8c8()
  store i32 %v0_f240, i32* @r7, align 4
  %v0_f248 = load i32, i32* @r8, align 4
  %v1_f248 = inttoptr i32 %v0_f248 to i32*
  %v2_f248 = load i32, i32* %v1_f248, align 4
  %v1_f24c = inttoptr i32 %v2_f248 to i8*
  %v2_f24c = call i32 @function_12c3c(i8* %v1_f24c)
  %v0_f254 = load i32, i32* @r8, align 4
  %v1_f254 = inttoptr i32 %v0_f254 to i32*
  %v2_f254 = load i32, i32* %v1_f254, align 4
  %v1_f258 = inttoptr i32 %v2_f254 to i8*
  %v2_f258 = call i32 @function_12c3c(i8* %v1_f258)
  %v1_f25c = sub i32 20, %v2_f24c
  store i32 %v2_f258, i32* @r5, align 4
  %v0_f264 = load i32, i32* @r7, align 4
  %v2_f268 = call i32 @function_13358(i32 %v0_f264, i32 %v1_f25c)
  %v1_f26c = load i32, i32* @r5, align 4
  %v2_f26c = add i32 %v1_f26c, %v2_f268
  store i32 %v2_f26c, i32* @r4, align 4
  %v2_f278 = call i32 @function_f97c(i32 %v2_f208, i32 %v2_f26c)
  %v1_f280 = load i32, i32* @r4, align 4
  %v2_f280 = add i32 %v1_f280, %v2_f218
  store i32 %v2_f280, i32* @r3, align 4
  %v0_f284 = load i32, i32* @sl, align 4
  %v1_f284 = trunc i32 %v0_f284 to i8
  %v3_f284 = add i32 %v2_f280, -72
  %v4_f284 = inttoptr i32 %v3_f284 to i8*
  store i8 %v1_f284, i8* %v4_f284, align 1
  %v2_f290 = call i32 @function_13768(i32 15, i32 %v2_f208)
  %v1_f298 = call i32 @function_121d4(i32 3)
  %v3_f2a8 = call i32 @function_120f0(i32 3, i32* nonnull %stack_var_-44)
  %v3_f2ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f2ac, i32* %r2.global-to-local, align 4
  %v3_f2b8 = inttoptr i32 %v3_f2a8 to i32*
  %v4_f2b8 = call i32 @function_138cc(i32 1, i32* %v3_f2b8, i32 %v3_f2ac)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f2c8 = call i32 @function_138cc(i32 1, i32* nonnull @global_var_15d14.126, i32 1)
  %v1_f2d0 = call i32 @function_1211c(i32 3)
  %v1_f2d4 = call i32 @function_a3a0(i32 %v1_f2d0)
  %v1_f2d8 = call i32 @function_eb38(i32 %v1_f2d4)
  %v1_f2dc = call i32 @function_f01c(i32 %v1_f2d8)
  %v0_f2e0 = call i32 @function_135fc()
  %v1_f2e4 = load i32, i32* @sl, align 4
  %v7_f2e8 = icmp sgt i32 %v0_f2e0, %v1_f2e4
  br i1 %v7_f2e8, label %dec_label_pc_f2ec, label %dec_label_pc_f330

dec_label_pc_f2ec:                                ; preds = %dec_label_pc_f1d4
  store i32 %v6_f108, i32* %r5.global-to-local, align 4
  store i32 %v9_f108, i32* %r6.global-to-local, align 4
  ret i32 0

dec_label_pc_f2f8:                                ; preds = %dec_label_pc_f108
  %v0_f2f8 = load i32, i32* @r8, align 4
  %v1_f2f8 = add i32 %v0_f2f8, 4
  %v2_f2f8 = inttoptr i32 %v1_f2f8 to i32*
  %v3_f2f8 = load i32, i32* %v2_f2f8, align 4
  %v1_f2fc = inttoptr i32 %v3_f2f8 to i8*
  %v2_f2fc = call i32 @function_12c3c(i8* %v1_f2fc)
  %v8_f304 = icmp sgt i32 %v2_f2fc, 31
  br i1 %v8_f304, label %dec_label_pc_f1d4, label %dec_label_pc_f308

dec_label_pc_f308:                                ; preds = %dec_label_pc_f2f8
  %v0_f308 = load i32, i32* @r8, align 4
  %v1_f308 = add i32 %v0_f308, 4
  %v2_f308 = inttoptr i32 %v1_f308 to i32*
  %v3_f308 = load i32, i32* %v2_f308, align 4
  store i32 %v2_f1b4, i32* @r0, align 4
  %v2_f310 = bitcast i32* %stack_var_-140 to i8*
  %v3_f310 = call i32 @function_12c64(i8* %v2_f310, i32 %v3_f308)
  %v0_f314 = load i32, i32* @r8, align 4
  %v1_f314 = add i32 %v0_f314, 4
  %v2_f314 = inttoptr i32 %v1_f314 to i32*
  %v3_f314 = load i32, i32* %v2_f314, align 4
  %v1_f31c = inttoptr i32 %v3_f314 to i8*
  %v2_f31c = call i32 @function_12c3c(i8* %v1_f31c)
  %v2_f328 = call i32 @function_12cdc(i32 %v3_f314, i32 %v2_f31c)
  br label %dec_label_pc_f1d4

dec_label_pc_f330:                                ; preds = %dec_label_pc_f1d4
  %v1_f330 = call i32 @function_13820(i32 %v0_f2e0)
  %v0_f338 = load i32, i32* @sl, align 4
  %v1_f33c = call i32 @function_135d0(i32 %v0_f338)
  %v1_f344 = call i32 @function_135d0(i32 1)
  %v1_f34c = call i32 @function_135d0(i32 2)
  %v1_f350 = call i32 @function_a3a0(i32 %v1_f34c)
  %v1_f354 = call i32 @function_eb38(i32 %v1_f350)
  %v1_f358 = call i32 @function_f01c(i32 %v1_f354)
  %v1_f35c = call i32 @function_fce4(i32 %v1_f358)
  store i32 ptrtoint (i32* @global_var_1f024.128 to i32), i32* @fp, align 4
  %v2_f36c = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_f36c, i32* @r6, align 4
  %v2_f370 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_f370, i32* @r7, align 4
  %v2_f448 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f688 = ptrtoint i32* %stack_var_-52 to i32
  %v4_f69c = bitcast i8** %stack_var_-38 to i32*
  %v2_f7f8 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_f6ac = ptrtoint i32* %stack_var_-48 to i32
  %v1_f750 = bitcast i32* %stack_var_-140 to i8*
  %v5_f718 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_f72c = sub i32 0, %v1_f330
  br label %dec_label_pc_f374

dec_label_pc_f374:                                ; preds = %dec_label_pc_f374.backedge, %dec_label_pc_f330
  %v2_f37c46 = phi i32 [ %v2_f37c46.pre, %dec_label_pc_f374.backedge ], [ %v2_f36c, %dec_label_pc_f330 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f37c48 = inttoptr i32 %v2_f37c46 to i32*
  store i32 0, i32* %v4_f37c48, align 4
  %v0_f38049 = load i32, i32* %r3.global-to-local, align 4
  %v1_f38050 = add i32 %v0_f38049, 4
  store i32 %v1_f38050, i32* %r3.global-to-local, align 4
  %v7_f38451 = icmp eq i32 %v1_f38050, 128
  br i1 %v7_f38451, label %dec_label_pc_f38c, label %dec_label_pc_f37c.dec_label_pc_f37c_crit_edge

dec_label_pc_f37c.dec_label_pc_f37c_crit_edge:    ; preds = %dec_label_pc_f374, %dec_label_pc_f37c.dec_label_pc_f37c_crit_edge
  %v1_f38052 = phi i32 [ %v1_f380, %dec_label_pc_f37c.dec_label_pc_f37c_crit_edge ], [ %v1_f38050, %dec_label_pc_f374 ]
  %v0_f37c.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f37c = load i32, i32* @r6, align 4
  %v3_f37c = add i32 %v2_f37c, %v1_f38052
  %v4_f37c = inttoptr i32 %v3_f37c to i32*
  store i32 %v0_f37c.pre, i32* %v4_f37c, align 4
  %v0_f380 = load i32, i32* %r3.global-to-local, align 4
  %v1_f380 = add i32 %v0_f380, 4
  store i32 %v1_f380, i32* %r3.global-to-local, align 4
  %v7_f384 = icmp eq i32 %v1_f380, 128
  br i1 %v7_f384, label %dec_label_pc_f38c, label %dec_label_pc_f37c.dec_label_pc_f37c_crit_edge

dec_label_pc_f38c:                                ; preds = %dec_label_pc_f37c.dec_label_pc_f37c_crit_edge, %dec_label_pc_f374
  %v0_f38c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f38c, i32* %r3.global-to-local, align 4
  store i32 %v0_f38c, i32* @r4, align 4
  %v2_f39453 = load i32, i32* @r7, align 4
  %v3_f39454 = add i32 %v2_f39453, %v0_f38c
  %v4_f39455 = inttoptr i32 %v3_f39454 to i32*
  store i32 %v0_f38c, i32* %v4_f39455, align 4
  %v0_f39856 = load i32, i32* %r3.global-to-local, align 4
  %v1_f39857 = add i32 %v0_f39856, 4
  store i32 %v1_f39857, i32* %r3.global-to-local, align 4
  %v7_f39c58 = icmp eq i32 %v1_f39857, 128
  br i1 %v7_f39c58, label %dec_label_pc_f3a4, label %dec_label_pc_f394.dec_label_pc_f394_crit_edge

dec_label_pc_f394.dec_label_pc_f394_crit_edge:    ; preds = %dec_label_pc_f38c, %dec_label_pc_f394.dec_label_pc_f394_crit_edge
  %v1_f39859 = phi i32 [ %v1_f398, %dec_label_pc_f394.dec_label_pc_f394_crit_edge ], [ %v1_f39857, %dec_label_pc_f38c ]
  %v0_f394.pre = load i32, i32* @r4, align 4
  %v2_f394 = load i32, i32* @r7, align 4
  %v3_f394 = add i32 %v2_f394, %v1_f39859
  %v4_f394 = inttoptr i32 %v3_f394 to i32*
  store i32 %v0_f394.pre, i32* %v4_f394, align 4
  %v0_f398 = load i32, i32* %r3.global-to-local, align 4
  %v1_f398 = add i32 %v0_f398, 4
  store i32 %v1_f398, i32* %r3.global-to-local, align 4
  %v7_f39c = icmp eq i32 %v1_f398, 128
  br i1 %v7_f39c, label %dec_label_pc_f3a4, label %dec_label_pc_f394.dec_label_pc_f394_crit_edge

dec_label_pc_f3a4:                                ; preds = %dec_label_pc_f394.dec_label_pc_f394_crit_edge, %dec_label_pc_f38c
  store i32 ptrtoint (i32* @global_var_1f020.112 to i32), i32* %r2.global-to-local, align 4
  %v2_f3a8 = load i32, i32* @global_var_1f020.112, align 4
  %v7_f3ac = icmp eq i32 %v2_f3a8, -1
  br i1 %v7_f3ac, label %dec_label_pc_f3d8, label %dec_label_pc_f3b4

dec_label_pc_f3b4:                                ; preds = %dec_label_pc_f3a4
  %v3_f3b4 = udiv i32 %v2_f3a8, 32
  %v3_f3b8 = mul nuw nsw i32 %v3_f3b4, 4
  %v2_f3c0 = add i32 %v3_f3b8, %v2_f218
  store i32 %v2_f3c0, i32* %r3.global-to-local, align 4
  %v1_f3c4 = add i32 %v2_f3c0, -360
  %v2_f3c4 = inttoptr i32 %v1_f3c4 to i32*
  %v3_f3c4 = load i32, i32* %v2_f3c4, align 4
  %v1_f3c8 = urem i32 %v2_f3a8, 32
  %v7_f3d0 = shl i32 1, %v1_f3c8
  %v8_f3d0 = or i32 %v3_f3c4, %v7_f3d0
  store i32 %v8_f3d0, i32* %r2.global-to-local, align 4
  store i32 %v8_f3d0, i32* %v2_f3c4, align 4
  br label %dec_label_pc_f3d8

dec_label_pc_f3d8:                                ; preds = %dec_label_pc_f3a4, %dec_label_pc_f3b4
  %v2_f3d8 = load i32, i32* @global_var_1f024.128, align 4
  store i32 %v2_f3d8, i32* %r3.global-to-local, align 4
  %v7_f3dc = icmp eq i32 %v2_f3d8, -1
  store i32 ptrtoint (i32* @global_var_1f024.128 to i32), i32* @r8, align 4
  br i1 %v7_f3dc, label %dec_label_pc_f614, label %dec_label_pc_f3e8

dec_label_pc_f3e8:                                ; preds = %dec_label_pc_f614, %dec_label_pc_f3d8, %.thread
  store i32 ptrtoint (i8** @global_var_1f1a8.131 to i32), i32* %r2.global-to-local, align 4
  %v2_f3ec = load i8, i8* bitcast (i8** @global_var_1f1a8.131 to i8*), align 4
  %v2_f3f0 = icmp eq i8 %v2_f3ec, 0
  %v2_f530 = load i32, i32* @global_var_1f024.128, align 4
  %v3_f534 = udiv i32 %v2_f530, 32
  store i32 %v3_f534, i32* %r3.global-to-local, align 4
  br i1 %v2_f3f0, label %dec_label_pc_f530, label %dec_label_pc_f3f8

dec_label_pc_f3f8:                                ; preds = %dec_label_pc_f3e8
  %v3_f400 = mul nuw nsw i32 %v3_f534, 4
  %v2_f408 = add i32 %v3_f400, %v2_f218
  store i32 %v2_f408, i32* %r3.global-to-local, align 4
  %v1_f40c = add i32 %v2_f408, -488
  %v2_f40c = inttoptr i32 %v1_f40c to i32*
  %v3_f40c = load i32, i32* %v2_f40c, align 4
  %v1_f410 = urem i32 %v2_f530, 32
  %v7_f418 = shl i32 1, %v1_f410
  %v8_f418 = or i32 %v3_f40c, %v7_f418
  store i32 %v8_f418, i32* %r2.global-to-local, align 4
  store i32 %v8_f418, i32* %v2_f40c, align 4
  br label %dec_label_pc_f420

dec_label_pc_f420:                                ; preds = %dec_label_pc_f530, %dec_label_pc_f3f8
  %v2_f424 = load i32, i32* @global_var_1f020.112, align 4
  %v2_f428 = load i32, i32* @global_var_1f024.128, align 4
  store i32 %v2_f428, i32* %r3.global-to-local, align 4
  %v5_f434 = icmp slt i32 %v2_f424, %v2_f428
  br i1 %v5_f434, label %bb, label %bb43

bb:                                               ; preds = %dec_label_pc_f420
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_f420, %bb
  %v0_f44c = phi i32 [ %v2_f424, %dec_label_pc_f420 ], [ %v2_f428, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f44c = add i32 %v0_f44c, 1
  store i32 %v2_f370, i32* %r2.global-to-local, align 4
  %v5_f460 = call i32 @function_137f0(i32 %v1_f44c, i32 %v2_f36c, i32 %v2_f370, i32 0, i32 %v2_f448)
  %v7_f464 = icmp eq i32 %v5_f460, -1
  store i32 %v5_f460, i32* %r3.global-to-local, align 4
  br i1 %v7_f464, label %dec_label_pc_f374.backedge, label %dec_label_pc_f470

dec_label_pc_f470:                                ; preds = %bb43
  %v2_f470 = icmp eq i32 %v5_f460, 0
  br i1 %v2_f470, label %dec_label_pc_f478, label %dec_label_pc_f498

dec_label_pc_f478:                                ; preds = %dec_label_pc_f470
  %v0_f478 = load i32, i32* @sl, align 4
  store i8* null, i8** %stack_var_-38, align 4
  %v5_f488 = call i32 @function_13424(i32 %v0_f478, i32 6, i32 %v2_f370, i32 0)
  %v2_f48c = icmp eq i32 %v5_f488, 0
  %v0_f490 = load i32, i32* @sl, align 4
  %v1_f490 = add i32 %v0_f490, 1
  store i32 %v1_f490, i32* @sl, align 4
  br i1 %v2_f48c, label %dec_label_pc_f684, label %dec_label_pc_f498

dec_label_pc_f498:                                ; preds = %dec_label_pc_f470, %dec_label_pc_f478, %dec_label_pc_f684
  store i32 ptrtoint (i32* @global_var_1f020.112 to i32), i32* %r2.global-to-local, align 4
  %v2_f49c = load i32, i32* @global_var_1f020.112, align 4
  %v7_f4a0 = icmp eq i32 %v2_f49c, -1
  br i1 %v7_f4a0, label %dec_label_pc_f4cc, label %dec_label_pc_f4a8

dec_label_pc_f4a8:                                ; preds = %dec_label_pc_f498
  %v3_f4a8 = udiv i32 %v2_f49c, 32
  %v3_f4ac = mul nuw nsw i32 %v3_f4a8, 4
  store i32 %v2_f218, i32* @ip, align 4
  %v2_f4b4 = add i32 %v3_f4ac, %v2_f218
  store i32 %v2_f4b4, i32* %r3.global-to-local, align 4
  %v1_f4b8 = add i32 %v2_f4b4, -360
  %v2_f4b8 = inttoptr i32 %v1_f4b8 to i32*
  %v3_f4b8 = load i32, i32* %v2_f4b8, align 4
  %v1_f4bc = urem i32 %v2_f49c, 32
  %v6_f4c0 = lshr i32 %v3_f4b8, %v1_f4bc
  store i32 %v6_f4c0, i32* %r2.global-to-local, align 4
  %v1_f4c4 = urem i32 %v6_f4c0, 2
  %v2_f4c4 = icmp eq i32 %v1_f4c4, 0
  br i1 %v2_f4c4, label %dec_label_pc_f4cc, label %dec_label_pc_f700

dec_label_pc_f4cc:                                ; preds = %dec_label_pc_f4a8, %dec_label_pc_f498
  store i32 ptrtoint (i8** @global_var_1f1a8.131 to i32), i32* %r3.global-to-local, align 4
  %v2_f4d0 = load i8, i8* bitcast (i8** @global_var_1f1a8.131 to i8*), align 4
  %v3_f4d0 = zext i8 %v2_f4d0 to i32
  store i32 %v3_f4d0, i32* @r4, align 4
  %v2_f4d4 = icmp eq i8 %v2_f4d0, 0
  %v2_f55c = load i32, i32* @global_var_1f024.128, align 4
  br i1 %v2_f4d4, label %dec_label_pc_f55c, label %dec_label_pc_f4dc

dec_label_pc_f4dc:                                ; preds = %dec_label_pc_f4cc
  %v3_f4e0 = udiv i32 %v2_f55c, 32
  %v3_f4e8 = mul nuw nsw i32 %v3_f4e0, 4
  %v2_f4ec = add i32 %v3_f4e8, %v2_f218
  store i32 %v2_f4ec, i32* %r3.global-to-local, align 4
  %v1_f4f0 = add i32 %v2_f4ec, -488
  %v2_f4f0 = inttoptr i32 %v1_f4f0 to i32*
  %v3_f4f0 = load i32, i32* %v2_f4f0, align 4
  %v1_f4f4 = urem i32 %v2_f55c, 32
  %v6_f4f8 = lshr i32 %v3_f4f0, %v1_f4f4
  store i32 %v6_f4f8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f1a8.131 to i32), i32* %r3.global-to-local, align 4
  %v1_f504 = urem i32 %v6_f4f8, 2
  %v2_f504 = icmp eq i32 %v1_f504, 0
  store i8 0, i8* bitcast (i8** @global_var_1f1a8.131 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1f024.128 to i32), i32* @r5, align 4
  br i1 %v2_f504, label %dec_label_pc_f514, label %dec_label_pc_f6a4

dec_label_pc_f514:                                ; preds = %dec_label_pc_f4dc
  store i32 62748, i32* @lr, align 4
  %v1_f518 = icmp ne i32 %v2_f55c, -1
  call void @__pseudo_cond_branch(i1 %v1_f518, i32 ptrtoint (i32* @global_var_135d0.26 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f520 = load i32, i32* @r5, align 4
  %v2_f520 = inttoptr i32 %v1_f520 to i32*
  store i32 -1, i32* %v2_f520, align 4
  %v1_f528 = call i32 @function_1482c(i32 1)
  br label %dec_label_pc_f374.backedge

dec_label_pc_f374.backedge:                       ; preds = %dec_label_pc_f514, %dec_label_pc_f600, %dec_label_pc_f6d8, %dec_label_pc_f79c, %dec_label_pc_f7c0, %dec_label_pc_f874, %dec_label_pc_f880, %bb43, %dec_label_pc_f55c, %dec_label_pc_f56c, %dec_label_pc_f74c, %bb45, %dec_label_pc_f820, %dec_label_pc_f7b0
  %v2_f37c46.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f374

dec_label_pc_f530:                                ; preds = %dec_label_pc_f3e8
  store i32 %v2_f218, i32* %r2.global-to-local, align 4
  %v3_f53c = mul nuw nsw i32 %v3_f534, 4
  %v2_f540 = add i32 %v3_f53c, %v2_f218
  store i32 %v2_f540, i32* %r3.global-to-local, align 4
  %v1_f544 = add i32 %v2_f540, -360
  %v2_f544 = inttoptr i32 %v1_f544 to i32*
  %v3_f544 = load i32, i32* %v2_f544, align 4
  %v1_f548 = urem i32 %v2_f530, 32
  %v7_f550 = shl i32 1, %v1_f548
  %v8_f550 = or i32 %v3_f544, %v7_f550
  store i32 %v8_f550, i32* %r2.global-to-local, align 4
  store i32 %v8_f550, i32* %v2_f544, align 4
  br label %dec_label_pc_f420

dec_label_pc_f55c:                                ; preds = %dec_label_pc_f4cc
  %v7_f560 = icmp eq i32 %v2_f55c, -1
  store i32 ptrtoint (i32* @global_var_1f024.128 to i32), i32* @r5, align 4
  br i1 %v7_f560, label %dec_label_pc_f374.backedge, label %dec_label_pc_f56c

dec_label_pc_f56c:                                ; preds = %dec_label_pc_f55c
  %v3_f56c = udiv i32 %v2_f55c, 32
  %v3_f570 = mul nuw nsw i32 %v3_f56c, 4
  %v2_f578 = add i32 %v3_f570, %v2_f218
  store i32 %v2_f578, i32* %r3.global-to-local, align 4
  %v1_f57c = add i32 %v2_f578, -360
  %v2_f57c = inttoptr i32 %v1_f57c to i32*
  %v3_f57c = load i32, i32* %v2_f57c, align 4
  %v1_f580 = urem i32 %v2_f55c, 32
  %v6_f584 = lshr i32 %v3_f57c, %v1_f580
  store i32 %v6_f584, i32* %r2.global-to-local, align 4
  %v1_f588 = urem i32 %v6_f584, 2
  %v2_f588 = icmp eq i32 %v1_f588, 0
  br i1 %v2_f588, label %dec_label_pc_f374.backedge, label %dec_label_pc_f590

dec_label_pc_f590:                                ; preds = %dec_label_pc_f56c
  %v6_f590 = inttoptr i32 %v3_f4d0 to i8*
  store i8* %v6_f590, i8** %stack_var_-38, align 4
  %v0_f598 = call i32 @function_13b78()
  %v0_f59c = load i32, i32* @r4, align 4
  %v2_f59c = inttoptr i32 %v0_f598 to i32*
  store i32 %v0_f59c, i32* %v2_f59c, align 4
  store i32 %v0_f598, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f5b0 = load i32, i32* @global_var_1f024.128, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_f5bc = call i32 @function_13dcc(i32 %v2_f5b0, i32* %v4_f69c, i32 2, i32 16386)
  %v7_f5c0 = icmp eq i32 %v5_f5bc, -1
  br i1 %v7_f5c0, label %dec_label_pc_f7b0, label %dec_label_pc_f5c8

dec_label_pc_f5c8:                                ; preds = %dec_label_pc_f590
  %v2_f5c8 = icmp eq i32 %v5_f5bc, 0
  br i1 %v2_f5c8, label %dec_label_pc_f7c0, label %dec_label_pc_f5d0

dec_label_pc_f5d0:                                ; preds = %dec_label_pc_f5c8
  %v3_f5d0 = load i8*, i8** %stack_var_-38, align 4
  %v4_f5d0 = ptrtoint i8* %v3_f5d0 to i32
  store i32 %v3_f4d0, i32* %r3.global-to-local, align 4
  %v4_f5d8 = mul nuw nsw i32 %v3_f4d0, 256
  %v5_f5d8 = or i32 %v4_f5d0, %v4_f5d8
  store i32 %v5_f5d8, i32* %r2.global-to-local, align 4
  %v7_f5d8 = icmp eq i32 %v5_f5d8, 0
  br i1 %v7_f5d8, label %dec_label_pc_f880, label %dec_label_pc_f5e0

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f5d0
  %v1_f5e0 = mul i32 %v4_f5d0, 256
  %v3_f5e4 = and i32 %v1_f5e0, 65280
  %v4_f5e8 = udiv i32 %v5_f5d8, 256
  %v5_f5e8 = or i32 %v3_f5e4, %v4_f5e8
  %v6_f5e8 = trunc i32 %v4_f5e8 to i8
  store i32 %v5_f5e8, i32* %r2.global-to-local, align 4
  %v4_f5ec = udiv i32 %v5_f5d8, 65536
  store i32 %v4_f5ec, i32* %r3.global-to-local, align 4
  %v3_f5f0 = icmp slt i8 %v6_f5e8, 0
  %v7_f5f8 = inttoptr i32 %v4_f5e8 to i8*
  store i8* %v7_f5f8, i8** %stack_var_-38, align 4
  br i1 %v3_f5f0, label %dec_label_pc_f600, label %dec_label_pc_f7f0

dec_label_pc_f600:                                ; preds = %dec_label_pc_f5e0
  %v2_f600 = load i32, i32* @global_var_1f024.128, align 4
  %v1_f604 = call i32 @function_135d0(i32 %v2_f600)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f60c = load i32, i32* @r5, align 4
  %v2_f60c = inttoptr i32 %v1_f60c to i32*
  store i32 -1, i32* %v2_f60c, align 4
  br label %dec_label_pc_f374.backedge

dec_label_pc_f614:                                ; preds = %dec_label_pc_f3d8
  %v0_f61c = load i32, i32* @r4, align 4
  store i32 %v0_f61c, i32* %r2.global-to-local, align 4
  %v3_f620 = call i32 @function_13ebc(i32 2, i32 1, i32 %v0_f61c)
  %v7_f624 = icmp eq i32 %v3_f620, -1
  store i32 %v3_f620, i32* %r5.global-to-local, align 4
  %v1_f62c = load i32, i32* @r8, align 4
  %v2_f62c = inttoptr i32 %v1_f62c to i32*
  store i32 %v3_f620, i32* %v2_f62c, align 4
  br i1 %v7_f624, label %dec_label_pc_f3e8, label %dec_label_pc_f634

dec_label_pc_f634:                                ; preds = %dec_label_pc_f614
  %v0_f634 = load i32, i32* @r4, align 4
  store i32 %v0_f634, i32* @r2, align 4
  %v2_f63c = call i32 @function_1350c(i32 %v3_f620, i32 3)
  %v1_f644 = or i32 %v2_f63c, 2048
  store i32 %v1_f644, i32* @r2, align 4
  %v0_f648 = load i32, i32* %r5.global-to-local, align 4
  %v2_f64c = call i32 @function_1350c(i32 %v0_f648, i32 4)
  store i32 ptrtoint (i32* @global_var_1f028.104 to i32), i32* %r2.global-to-local, align 4
  %v2_f654 = load i32, i32* @global_var_1f028.104, align 4
  store i32 %v2_f654, i32* %r3.global-to-local, align 4
  %v2_f658 = icmp eq i32 %v2_f654, 0
  br i1 %v2_f658, label %.thread, label %bb44

bb44:                                             ; preds = %dec_label_pc_f634
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12ef4.132 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f634, %bb44
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f66c = load i32, i32* @global_var_1f024.128, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1f1a8.131 to i8*), align 4
  %v5_f67c = call i32 @function_13d18(i32 %v2_f66c, %sockaddr* bitcast (i8** @global_var_1f240.106 to %sockaddr*), i32 16)
  br label %dec_label_pc_f3e8

dec_label_pc_f684:                                ; preds = %dec_label_pc_f478
  %v2_f68c = load i32, i32* @global_var_1f024.128, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f69c = call i32 @function_13e2c(i32 %v2_f68c, i32* nonnull %v4_f69c, i32 2, i32 16384)
  br label %dec_label_pc_f498

dec_label_pc_f6a4:                                ; preds = %dec_label_pc_f4dc
  store i32 4, i32* @r4, align 4
  store i32 %v2_f6ac, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_f6c8 = call i32 @function_13d70(i32 %v2_f55c, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_f688)
  %v3_f6cc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f6cc, i32* %r3.global-to-local, align 4
  %v2_f6d0 = icmp eq i32 %v3_f6cc, 0
  br i1 %v2_f6d0, label %dec_label_pc_f74c, label %dec_label_pc_f6d8

dec_label_pc_f6d8:                                ; preds = %dec_label_pc_f6a4
  %v2_f6d8 = load i32, i32* @global_var_1f024.128, align 4
  %v1_f6dc = call i32 @function_135d0(i32 %v2_f6d8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f6e4 = load i32, i32* @r5, align 4
  %v2_f6e4 = inttoptr i32 %v1_f6e4 to i32*
  store i32 -1, i32* %v2_f6e4, align 4
  %v0_f6e8 = call i32 @function_f8c8()
  %v2_f6f0 = call i32 @function_13358(i32 %v0_f6e8, i32 10)
  %v1_f6f4 = add i32 %v2_f6f0, 1
  %v1_f6f8 = call i32 @function_1482c(i32 %v1_f6f4)
  br label %dec_label_pc_f374.backedge

dec_label_pc_f700:                                ; preds = %dec_label_pc_f4a8
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_f6ac, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_f718 = call i32 @function_13cc0(i32 %v2_f49c, %sockaddr* %v5_f718, i32 %v2_f6ac, i32 16, i32 16)
  %v1_f71c = call i32 @function_fa48(i32 %v6_f718)
  %v1_f720 = call i32 @function_e5a4(i32 %v1_f71c)
  store i32 %v1_f330, i32* %r2.global-to-local, align 4
  %v2_f730 = call i32 @function_136d0(i32 %v1_f72c, i32 9)
  store i32 ptrtoint (i32* @global_var_1f1a4.117 to i32), i32* %r3.global-to-local, align 4
  %v2_f738 = load i32, i32* @global_var_1f1a4.117, align 4
  %v2_f73c = icmp eq i32 %v2_f738, 0
  br i1 %v2_f73c, label %dec_label_pc_f744, label %dec_label_pc_f7e4

dec_label_pc_f744:                                ; preds = %dec_label_pc_f700, %dec_label_pc_f7e4
  %v1_f748 = call i32 @function_14798(i32 0)
  br label %dec_label_pc_f74c

dec_label_pc_f74c:                                ; preds = %dec_label_pc_f6a4, %dec_label_pc_f744
  %v2_f750 = call i32 @function_12c3c(i8* %v1_f750)
  %sext = mul i32 %v2_f750, 16777216
  %v1_f754 = sdiv i32 %sext, 16777216
  %v7_f754 = inttoptr i32 %v1_f754 to i8*
  store i8* %v7_f754, i8** %stack_var_-38, align 4
  %v0_f758 = call i32 @function_12ef4()
  store i32 %v0_f758, i32* @global_var_1f238.83, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f76c = load i32, i32* @r4, align 4
  store i32 %v0_f76c, i32* %r2.global-to-local, align 4
  %v0_f770 = load i32, i32* @r5, align 4
  %v1_f770 = inttoptr i32 %v0_f770 to i32*
  %v2_f770 = load i32, i32* %v1_f770, align 4
  %v5_f774 = call i32 @function_13e2c(i32 %v2_f770, i32* nonnull @global_var_15d18.135, i32 %v0_f76c, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_f780 = load i32, i32* @r5, align 4
  %v1_f780 = inttoptr i32 %v0_f780 to i32*
  %v2_f780 = load i32, i32* %v1_f780, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f78c = call i32 @function_13e2c(i32 %v2_f780, i32* %v4_f69c, i32 1, i32 16384)
  %v3_f790 = load i8*, i8** %stack_var_-38, align 4
  %v4_f790 = ptrtoint i8* %v3_f790 to i32
  store i32 %v4_f790, i32* %r2.global-to-local, align 4
  %v3_f794 = icmp eq i8* %v3_f790, null
  br i1 %v3_f794, label %dec_label_pc_f374.backedge, label %dec_label_pc_f79c

dec_label_pc_f79c:                                ; preds = %dec_label_pc_f74c
  %v0_f79c = load i32, i32* @r5, align 4
  %v1_f79c = inttoptr i32 %v0_f79c to i32*
  %v2_f79c = load i32, i32* %v1_f79c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_f7a8 = call i32 @function_13e2c(i32 %v2_f79c, i32* nonnull %stack_var_-140, i32 %v4_f790, i32 16384)
  br label %dec_label_pc_f374.backedge

dec_label_pc_f7b0:                                ; preds = %dec_label_pc_f7f0, %dec_label_pc_f590
  %v0_f7b0 = load i32, i32* @r8, align 4
  %v1_f7b0 = inttoptr i32 %v0_f7b0 to i32*
  %v2_f7b0 = load i32, i32* %v1_f7b0, align 4
  store i32 %v2_f7b0, i32* %r3.global-to-local, align 4
  %v7_f7b4 = icmp eq i32 %v2_f7b0, 4
  br i1 %v7_f7b4, label %dec_label_pc_f374.backedge, label %bb45

bb45:                                             ; preds = %dec_label_pc_f7b0
  %v8_f7b8 = icmp eq i32 %v2_f7b0, 11
  br i1 %v8_f7b8, label %dec_label_pc_f374.backedge, label %dec_label_pc_f7c0

dec_label_pc_f7c0:                                ; preds = %dec_label_pc_f818, %bb45, %dec_label_pc_f5c8
  %v2_f7c0 = load i32, i32* @global_var_1f024.128, align 4
  store i32 63436, i32* @lr, align 4
  %v1_f7c8 = icmp ne i32 %v2_f7c0, -1
  call void @__pseudo_cond_branch(i1 %v1_f7c8, i32 ptrtoint (i32* @global_var_135d0.26 to i32))
  store i32 ptrtoint (i32* @global_var_1f024.128 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1f024.128, align 4
  %v1_f7dc = call i32 @function_1482c(i32 1)
  br label %dec_label_pc_f374.backedge

dec_label_pc_f7e4:                                ; preds = %dec_label_pc_f700
  %v2_f7e8 = call i32 @function_136d0(i32 %v2_f738, i32 9)
  br label %dec_label_pc_f744

dec_label_pc_f7f0:                                ; preds = %dec_label_pc_f5e0
  %v0_f7f0 = load i32, i32* @r4, align 4
  %v1_f7f0 = load i32, i32* @r8, align 4
  %v2_f7f0 = inttoptr i32 %v1_f7f0 to i32*
  store i32 %v0_f7f0, i32* %v2_f7f0, align 4
  store i32 %v2_f7f8, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f804 = load i32, i32* @global_var_1f024.128, align 4
  %v9_f80c = call i32 @function_13dcc(i32 %v2_f804, i32* nonnull %stack_var_-1548, i32 %v4_f5e8, i32 16386)
  %v7_f810 = icmp eq i32 %v9_f80c, -1
  br i1 %v7_f810, label %dec_label_pc_f7b0, label %dec_label_pc_f818

dec_label_pc_f818:                                ; preds = %dec_label_pc_f7f0
  %v2_f818 = icmp eq i32 %v9_f80c, 0
  br i1 %v2_f818, label %dec_label_pc_f7c0, label %dec_label_pc_f820

dec_label_pc_f820:                                ; preds = %dec_label_pc_f818
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f830 = load i32, i32* @global_var_1f024.128, align 4
  %v5_f834 = call i32 @function_13dcc(i32 %v2_f830, i32* nonnull %v4_f69c, i32 2, i32 16384)
  %v3_f838 = load i8*, i8** %stack_var_-38, align 4
  %v4_f838 = ptrtoint i8* %v3_f838 to i32
  %v4_f83c = urem i32 %v4_f5ec, 256
  %v4_f840 = mul i32 %v4_f838, 256
  %v5_f840 = or i32 %v4_f840, %v4_f83c
  store i32 %v5_f840, i32* @ip, align 4
  store i32 %v5_f840, i32* %r2.global-to-local, align 4
  %v3_f848 = sdiv i32 %v4_f840, 256
  store i32 %v3_f848, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f854 = load i32, i32* @global_var_1f024.128, align 4
  %v6_f85c = inttoptr i32 %v5_f840 to i8*
  store i8* %v6_f85c, i8** %stack_var_-38, align 4
  %v8_f860 = call i32 @function_13dcc(i32 %v2_f854, i32* nonnull %stack_var_-1548, i32 %v5_f840, i32 16384)
  %v3_f864 = load i8*, i8** %stack_var_-38, align 4
  %v4_f864 = ptrtoint i8* %v3_f864 to i32
  store i32 %v4_f864, i32* %r2.global-to-local, align 4
  %v4_f868 = urem i32 %v3_f848, 256
  store i32 %v4_f868, i32* %r3.global-to-local, align 4
  %v6_f86c = mul nuw nsw i32 %v4_f868, 256
  %v7_f86c = or i32 %v4_f864, %v6_f86c
  %v9_f86c = icmp eq i32 %v7_f86c, 0
  br i1 %v9_f86c, label %dec_label_pc_f374.backedge, label %dec_label_pc_f874

dec_label_pc_f874:                                ; preds = %dec_label_pc_f820
  %v7_f878 = call i32 @function_a0c4(i32* nonnull %stack_var_-1548, i32 %v7_f86c, i32 %v4_f864, i32 %v4_f868)
  br label %dec_label_pc_f374.backedge

dec_label_pc_f880:                                ; preds = %dec_label_pc_f5d0
  %v2_f884 = load i32, i32* @global_var_1f024.128, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f894 = call i32 @function_13dcc(i32 %v2_f884, i32* nonnull %v4_f69c, i32 2, i32 16384)
  br label %dec_label_pc_f374.backedge

; uselistorder directives
  uselistorder i32 %v4_f868, { 2, 0, 1 }
  uselistorder i32 %v4_f864, { 1, 0, 2 }
  uselistorder i32 %v3_f848, { 1, 0 }
  uselistorder i32 %v5_f840, { 1, 0, 2, 3 }
  uselistorder i32 %v4_f840, { 1, 0 }
  uselistorder i32 %v9_f80c, { 1, 0 }
  uselistorder i32 %v3_f620, { 3, 2, 1, 0 }
  uselistorder i32 %v4_f5e8, { 2, 3, 0, 1 }
  uselistorder i32 %v5_f5bc, { 1, 0 }
  uselistorder i32 %v2_f55c, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_f49c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_f460, { 2, 1, 0 }
  uselistorder i32 %v2_f3a8, { 2, 1, 0 }
  uselistorder i32 %v1_f398, { 1, 2, 0 }
  uselistorder i32 %v1_f380, { 1, 2, 0 }
  uselistorder i32 %v2_f6ac, { 1, 0, 2 }
  uselistorder i32* %v4_f69c, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_f370, { 0, 2, 1, 3 }
  uselistorder i32 %v2_f36c, { 1, 0, 2 }
  uselistorder i32 %v2_f218, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_f208, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_f114, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @global_var_1f1a4.117, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 (i32)* @function_1482c, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* null, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f1a8.131 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1f1a8.131, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f1a8.131 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1f020.112, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1f024.128, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_f01c, { 1, 0 }
  uselistorder i32 (i32)* @function_eb38, { 1, 0 }
  uselistorder i32 (i32)* @function_a3a0, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_12c64, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 56, 57, 58, 59, 60, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32 (i32, i32)* @function_f97c, { 10, 9, 8, 0, 7, 6, 5, 1, 4, 3, 2 }
  uselistorder i32 (i32)* @function_eeac, { 1, 0 }
  uselistorder i32* @global_var_1f028.104, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_ee5c.102 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_13f30, { 1, 0 }
  uselistorder label %dec_label_pc_f74c, { 1, 0 }
  uselistorder label %dec_label_pc_f744, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f374.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_f498, { 2, 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_f3e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f3d8, { 1, 0 }
  uselistorder label %dec_label_pc_f394.dec_label_pc_f394_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f37c.dec_label_pc_f37c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f1d4, { 2, 0, 1 }
}

define i32 @function_f8c8() local_unnamed_addr {
dec_label_pc_f8c8:
  %v2_f8d4 = load i32, i32* @global_var_1f1ac.137, align 4
  %v2_f8d8 = load i32, i32* @global_var_1f1b8.139, align 4
  store i32 ptrtoint (i32* @global_var_1f1b0.141 to i32), i32* @lr, align 4
  %v4_f8e4 = mul i32 %v2_f8d4, 2048
  %v5_f8e4 = xor i32 %v4_f8e4, %v2_f8d4
  %v4_f8e8 = udiv i32 %v2_f8d8, 524288
  %v5_f8e8 = xor i32 %v4_f8e8, %v2_f8d8
  %v2_f8ec = load i32, i32* @global_var_1f1b0.141, align 4
  %v2_f8f0 = load i32, i32* @global_var_1f1b4.143, align 4
  %v2_f8f4 = xor i32 %v5_f8e8, %v5_f8e4
  %v4_f8f8 = udiv i32 %v5_f8e4, 256
  %v5_f8f8 = xor i32 %v2_f8f4, %v4_f8f8
  store i32 %v2_f8ec, i32* @global_var_1f1ac.137, align 4
  store i32 %v2_f8f0, i32* @global_var_1f1b0.141, align 4
  store i32 %v2_f8d8, i32* @global_var_1f1b4.143, align 4
  store i32 %v5_f8f8, i32* @global_var_1f1b8.139, align 4
  ret i32 %v5_f8f8

; uselistorder directives
  uselistorder i32 %v2_f8d8, { 2, 1, 0 }
  uselistorder i32 %v2_f8d4, { 1, 0 }
}

define i32 @function_f920(i32 %arg1) local_unnamed_addr {
dec_label_pc_f920:
  %stack_var_-12 = alloca i32, align 4
  %v3_f920 = load i32, i32* @r4, align 4
  store i32 %v3_f920, i32* %stack_var_-12, align 4
  %v2_f928 = call i32 @function_138a0(i32* null)
  store i32 %v2_f928, i32* @global_var_1f1ac.137, align 4
  %v0_f934 = call i32 @function_13628()
  store i32 %v0_f934, i32* @r4, align 4
  %v0_f93c = call i32 @function_13654()
  %v0_f944 = load i32, i32* @r4, align 4
  %v2_f944 = xor i32 %v0_f944, %v0_f93c
  store i32 %v2_f944, i32* @r4, align 4
  store i32 %v2_f944, i32* @global_var_1f1b0.141, align 4
  %v1_f94c = call i32 @function_13b84(i32 %v0_f93c)
  %v2_f950 = load i32, i32* @global_var_1f1b0.141, align 4
  %v2_f95c = xor i32 %v2_f950, %v1_f94c
  store i32 %v2_f95c, i32* @global_var_1f1b8.139, align 4
  store i32 %v1_f94c, i32* @global_var_1f1b4.143, align 4
  %v2_f968 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f968, i32* @r4, align 4
  ret i32 %v1_f94c

; uselistorder directives
  uselistorder i32 %v1_f94c, { 1, 2, 0 }
  uselistorder i32 %v0_f93c, { 1, 0 }
}

define i32 @function_f97c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f97c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f97c = load i32, i32* @r4, align 4
  store i32 %v3_f97c, i32* %stack_var_-36, align 4
  %v6_f97c = load i32, i32* @r5, align 4
  %v9_f97c = load i32, i32* @r6, align 4
  %v12_f97c = load i32, i32* @r7, align 4
  %v28_f97c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_f984 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_f990 = call i32 @function_121d4(i32 57)
  %v3_f99c = call i32 @function_120f0(i32 57, i32* null)
  %v2_f9a8 = inttoptr i32 %v3_f99c to i8*
  %v3_f9a8 = call i32 @function_13c80(i32 %v2_f984, i8* %v2_f9a8)
  %v2_f9ac = icmp eq i32 %arg2, 0
  br i1 %v2_f9ac, label %dec_label_pc_fa28, label %dec_label_pc_f9b4

dec_label_pc_f9b4:                                ; preds = %dec_label_pc_f97c
  store i32 ptrtoint (i32* @global_var_1f1ac.137 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1b0.141 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1b4.143 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1f1b8.139 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_f9fc = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_f9c8

dec_label_pc_f9c8:                                ; preds = %dec_label_pc_f9c8.dec_label_pc_f9c8_crit_edge, %dec_label_pc_f9b4
  %v1_f9ec = phi i32 [ %v1_f9ec.pre, %dec_label_pc_f9c8.dec_label_pc_f9c8_crit_edge ], [ ptrtoint (i32* @global_var_1f1ac.137 to i32), %dec_label_pc_f9b4 ]
  %v2_f9c8 = load i32, i32* @global_var_1f1b8.139, align 4
  store i32 %v2_f9c8, i32* %r2.global-to-local, align 4
  %v2_f9cc = load i32, i32* @global_var_1f1ac.137, align 4
  %v4_f9d0 = udiv i32 %v2_f9c8, 524288
  %v5_f9d0 = xor i32 %v4_f9d0, %v2_f9c8
  %v4_f9d4 = mul i32 %v2_f9cc, 2048
  %v5_f9d4 = xor i32 %v4_f9d4, %v2_f9cc
  %v2_f9d8 = xor i32 %v5_f9d0, %v5_f9d4
  %v2_f9dc = load i32, i32* @global_var_1f1b0.141, align 4
  %v2_f9e0 = load i32, i32* @global_var_1f1b4.143, align 4
  store i32 %v2_f9e0, i32* %ip.global-to-local, align 4
  %v4_f9e4 = udiv i32 %v5_f9d4, 256
  %v5_f9e4 = xor i32 %v2_f9d8, %v4_f9e4
  store i32 %v5_f9e4, i32* @r4, align 4
  %v2_f9ec = inttoptr i32 %v1_f9ec to i32*
  store i32 %v2_f9dc, i32* %v2_f9ec, align 4
  %v0_f9f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_f9f0 = load i32, i32* %r8.global-to-local, align 4
  %v2_f9f0 = inttoptr i32 %v1_f9f0 to i32*
  store i32 %v0_f9f0, i32* %v2_f9f0, align 4
  %v0_f9f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f9f4 = load i32, i32* @r7, align 4
  %v2_f9f4 = inttoptr i32 %v1_f9f4 to i32*
  store i32 %v0_f9f4, i32* %v2_f9f4, align 4
  %v0_f9f8 = load i32, i32* @r4, align 4
  %v1_f9f8 = load i32, i32* @r6, align 4
  %v2_f9f8 = inttoptr i32 %v1_f9f8 to i32*
  store i32 %v0_f9f8, i32* %v2_f9f8, align 4
  %v2_f9fc = call i32 @function_12c3c(i8* %v1_f9fc)
  %v0_fa04 = load i32, i32* @r4, align 4
  %v2_fa08 = call i32 @function_13358(i32 %v0_fa04, i32 %v2_f9fc)
  %v2_fa10 = add i32 %v2_fa08, %v28_f97c
  %v1_fa14 = add i32 %v2_fa10, -32
  %v2_fa14 = inttoptr i32 %v1_fa14 to i8*
  %v3_fa14 = load i8, i8* %v2_fa14, align 1
  %v2_fa18 = load i32, i32* @r5, align 4
  %v3_fa18 = load i32, i32* %fp.global-to-local, align 4
  %v4_fa18 = add i32 %v3_fa18, %v2_fa18
  %v5_fa18 = inttoptr i32 %v4_fa18 to i8*
  store i8 %v3_fa14, i8* %v5_fa18, align 1
  %v0_fa1c = load i32, i32* @r5, align 4
  %v1_fa1c = add i32 %v0_fa1c, 1
  store i32 %v1_fa1c, i32* @r5, align 4
  %v1_fa20 = load i32, i32* %sb.global-to-local, align 4
  %v9_fa20 = icmp eq i32 %v1_fa1c, %v1_fa20
  br i1 %v9_fa20, label %dec_label_pc_fa28, label %dec_label_pc_f9c8.dec_label_pc_f9c8_crit_edge

dec_label_pc_f9c8.dec_label_pc_f9c8_crit_edge:    ; preds = %dec_label_pc_f9c8
  %v1_f9ec.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f9c8

dec_label_pc_fa28:                                ; preds = %dec_label_pc_f9c8, %dec_label_pc_f97c
  %v1_fa2c = call i32 @function_1211c(i32 57)
  %v2_fa34 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_fa34, i32* @r4, align 4
  store i32 %v6_f97c, i32* @r5, align 4
  store i32 %v9_f97c, i32* @r6, align 4
  store i32 %v12_f97c, i32* @r7, align 4
  ret i32 %v1_fa2c

; uselistorder directives
  uselistorder i32 %v2_f9cc, { 1, 0 }
  uselistorder i32 %v2_f9c8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* @global_var_1f1b8.139, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1f1b4.143, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1f1b0.141, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1f1ac.137, { 2, 4, 1, 0, 3 }
}

define i32 @function_fa48(i32 %arg1) local_unnamed_addr {
dec_label_pc_fa48:
  %v2_fa4c = load i32, i32* @global_var_1f258.153, align 4
  %v2_fa54 = call i32 @function_136d0(i32 %v2_fa4c, i32 9)
  %v0_fa58 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fa58, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_fa48
  %v2_fa58 = load i32, i32* @r8, align 4
  %v8_fa58 = ashr i32 %v2_fa58, %arg1
  %v9_fa58 = and i32 %v8_fa58, 9
  call void @__pseudo_branch(i32 %v9_fa58)
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_fa48, %bb
  ret i32 %v2_fa54

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_fa5c() local_unnamed_addr {
dec_label_pc_fa5c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fa5c = load i32, i32* @r4, align 4
  store i32 %v3_fa5c, i32* %stack_var_-16, align 4
  %v0_fa60 = load i32, i32* @r0, align 4
  store i32 %v0_fa60, i32* %r5.global-to-local, align 4
  %v1_fa64 = add i32 %v0_fa60, 4
  %v2_fa64 = inttoptr i32 %v1_fa64 to i32*
  %v3_fa64 = load i32, i32* %v2_fa64, align 4
  store i32 %v3_fa64, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 64136, i32* @lr, align 4
  %v1_fa84 = icmp ne i32 %v3_fa64, -1
  call void @__pseudo_cond_branch(i1 %v1_fa84, i32 ptrtoint (i32* @global_var_135d0.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_fa94 = call i32 @function_13ebc(i32 2, i32 1, i32 0)
  store i32 %v3_fa94, i32* %r3.global-to-local, align 4
  %v7_fa9c = icmp eq i32 %v3_fa94, -1
  %v0_faa4 = load i32, i32* %r5.global-to-local, align 4
  %v1_faa4 = add i32 %v0_faa4, 28
  store i32 %v1_faa4, i32* %r0.global-to-local, align 4
  %v2_faa8 = add i32 %v0_faa4, 4
  %v3_faa8 = inttoptr i32 %v2_faa8 to i32*
  store i32 %v3_fa94, i32* %v3_faa8, align 4
  br i1 %v7_fa9c, label %dec_label_pc_fa5c.dec_label_pc_fb24_crit_edge, label %dec_label_pc_fab0

dec_label_pc_fa5c.dec_label_pc_fb24_crit_edge:    ; preds = %dec_label_pc_fa5c
  %v14_fb28.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb24

dec_label_pc_fab0:                                ; preds = %dec_label_pc_fa5c
  %v0_fab0 = load i32, i32* %r6.global-to-local, align 4
  %v1_fab0 = load i32, i32* %r5.global-to-local, align 4
  %v2_fab0 = add i32 %v1_fab0, 24
  %v3_fab0 = inttoptr i32 %v2_fab0 to i32*
  store i32 %v0_fab0, i32* %v3_fab0, align 4
  %v0_fab4 = load i32, i32* %r0.global-to-local, align 4
  %v2_fab4 = call i32 @function_12cdc(i32 %v0_fab4, i32 256)
  store i32 %v2_fab4, i32* %r0.global-to-local, align 4
  %v0_fab8 = load i32, i32* %r5.global-to-local, align 4
  %v1_fab8 = add i32 %v0_fab8, 4
  %v2_fab8 = inttoptr i32 %v1_fab8 to i32*
  %v3_fab8 = load i32, i32* %v2_fab8, align 4
  store i32 %v3_fab8, i32* @r4, align 4
  %v0_fac0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fac0, i32* @r2, align 4
  store i32 %v3_fab8, i32* %r0.global-to-local, align 4
  %v2_fac8 = call i32 @function_1350c(i32 %v3_fab8, i32 3)
  %v1_fad0 = or i32 %v2_fac8, 2048
  store i32 %v1_fad0, i32* @r2, align 4
  %v0_fad4 = load i32, i32* @r4, align 4
  store i32 %v0_fad4, i32* %r0.global-to-local, align 4
  %v2_fad8 = call i32 @function_1350c(i32 %v0_fad4, i32 4)
  store i32 %v2_fad8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1f0.155 to i32), i32* %r3.global-to-local, align 4
  %v0_fae0 = load i32, i32* %r5.global-to-local, align 4
  %v1_fae0 = add i32 %v0_fae0, 20
  %v2_fae0 = inttoptr i32 %v1_fae0 to i32*
  %v3_fae0 = load i32, i32* %v2_fae0, align 4
  store i32 %v3_fae0, i32* @r4, align 4
  %v2_fae4 = load i32, i32* @global_var_1f1f0.155, align 4
  %v1_fae8 = add i32 %v0_fae0, 16
  %v2_fae8 = inttoptr i32 %v1_fae8 to i32*
  %v3_fae8 = load i32, i32* %v2_fae8, align 4
  store i32 %v3_fae8, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_faf0 = add i32 %v0_fae0, 8
  %v3_faf0 = inttoptr i32 %v2_faf0 to i32*
  store i32 %v2_fae4, i32* %v3_faf0, align 4
  %v0_faf4 = load i32, i32* %r3.global-to-local, align 4
  %v1_faf4 = load i32, i32* %r5.global-to-local, align 4
  %v2_faf4 = add i32 %v1_faf4, 12
  %v3_faf4 = inttoptr i32 %v2_faf4 to i32*
  store i32 %v0_faf4, i32* %v3_faf4, align 4
  %v0_fafc = load i32, i32* %r5.global-to-local, align 4
  %v1_fafc = add i32 %v0_fafc, 4
  %v2_fafc = inttoptr i32 %v1_fafc to i32*
  %v3_fafc = load i32, i32* %v2_fafc, align 4
  store i32 %v3_fafc, i32* %r0.global-to-local, align 4
  %v0_fb00 = load i32, i32* %r3.global-to-local, align 4
  %v2_fb00 = mul i32 %v0_fb00, 2
  store i32 %v2_fb00, i32* %r3.global-to-local, align 4
  store i32 %v2_fb00, i32* %stack_var_-32, align 4
  %v3_fb20 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_fb20 = call i32 @function_13d18(i32 %v3_fafc, %sockaddr* %v3_fb20, i32 16)
  store i32 %v4_fb20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb24

dec_label_pc_fb24:                                ; preds = %dec_label_pc_fa5c.dec_label_pc_fb24_crit_edge, %dec_label_pc_fab0
  %v14_fb28 = phi i32 [ %v14_fb28.pre, %dec_label_pc_fa5c.dec_label_pc_fb24_crit_edge ], [ %v4_fb20, %dec_label_pc_fab0 ]
  %v2_fb28 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_fb28, i32* @r4, align 4
  ret i32 %v14_fb28

; uselistorder directives
  uselistorder i32 %v2_fb00, { 1, 0 }
  uselistorder i32 %v3_fa94, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_12cdc, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fb24, { 1, 0 }
}

define i32 @function_fb30(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fb30:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_fb30 = load i32, i32* @r4, align 4
  %v6_fb30 = load i32, i32* @r5, align 4
  %v9_fb30 = load i32, i32* @r6, align 4
  %v12_fb30 = load i32, i32* @r7, align 4
  %v15_fb30 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1f1bc.157 to i32), i32* @r8, align 4
  %v2_fb38 = load i32, i32* @global_var_1f1bc.157, align 4
  store i32 ptrtoint (i32* @global_var_1f1e8.159 to i32), i32* %sb.global-to-local, align 4
  %v3_fb44 = mul i32 %v2_fb38, 16
  store i32 %v3_fb44, i32* %r3.global-to-local, align 4
  %v3_fb4c = urem i32 %arg3, 65536
  store i32 %v3_fb4c, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_fb58 = load i32, i32* @global_var_1f1e8.159, align 4
  %v1_fb5c = add i32 %v3_fb44, 16
  store i32 %v1_fb5c, i32* %r1.global-to-local, align 4
  store i32 %v3_fb4c, i32* %stack_var_-44, align 4
  %v15_fb64 = call i32 @function_142f0(i32 %v2_fb58, i32 %v1_fb5c, i32 %v3_fb4c, i32 %v3_fb44)
  store i32 %v15_fb64, i32* %sl.global-to-local, align 4
  %v0_fb6c = load i32, i32* @r5, align 4
  %v1_fb70 = load i32, i32* %sb.global-to-local, align 4
  %v2_fb70 = inttoptr i32 %v1_fb70 to i32*
  store i32 %v15_fb64, i32* %v2_fb70, align 4
  %v2_fb74 = load i32, i32* @global_var_1f1bc.157, align 4
  store i32 %v2_fb74, i32* %fp.global-to-local, align 4
  %v1_fb78 = inttoptr i32 %v0_fb6c to i8*
  %v2_fb78 = call i32 @function_12c3c(i8* %v1_fb78)
  %sext = mul i32 %v2_fb78, 16777216
  %v1_fb7c = sdiv i32 %sext, 16777216
  %v2_fb7c = add nsw i32 %v1_fb7c, 1
  store i32 %v2_fb7c, i32* @r4, align 4
  store i32 %v1_fb7c, i32* @r7, align 4
  %v1_fb88 = call i32 @function_14054(i32 %v2_fb7c)
  %v0_fb8c = load i32, i32* @r5, align 4
  store i32 %v0_fb8c, i32* %r1.global-to-local, align 4
  %v0_fb90 = load i32, i32* @r4, align 4
  store i32 %v0_fb90, i32* %r2.global-to-local, align 4
  store i32 %v1_fb88, i32* @r6, align 4
  %v3_fb98 = call i32 @function_12cb8(i32 %v1_fb88, i32 %v0_fb8c, i32 %v0_fb90)
  %v0_fb9c = load i32, i32* @r7, align 4
  %tmp23 = icmp slt i32 %v0_fb9c, 1
  %extract.t8 = trunc i32 %v0_fb9c to i8
  br i1 %tmp23, label %dec_label_pc_fbc8, label %dec_label_pc_fba4

dec_label_pc_fba4:                                ; preds = %dec_label_pc_fb30
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fbac

dec_label_pc_fbac:                                ; preds = %dec_label_pc_fbac.dec_label_pc_fbac_crit_edge, %dec_label_pc_fba4
  %v1_fbb4 = phi i32 [ %v1_fbb4.pre, %dec_label_pc_fbac.dec_label_pc_fbac_crit_edge ], [ -81, %dec_label_pc_fba4 ]
  %v2_fbb8 = phi i32 [ %v1_fbbc, %dec_label_pc_fbac.dec_label_pc_fbac_crit_edge ], [ 0, %dec_label_pc_fba4 ]
  %v1_fbac = load i32, i32* @r6, align 4
  %v2_fbac = add i32 %v1_fbac, %v2_fbb8
  %v3_fbac = inttoptr i32 %v2_fbac to i8*
  %v4_fbac = load i8, i8* %v3_fbac, align 1
  %v6_fbac = zext i8 %v4_fbac to i32
  %v1_fbb0 = sub i32 -1, %v1_fbb4
  %v2_fbb4 = xor i32 %v6_fbac, %v1_fbb0
  store i32 %v2_fbb4, i32* %r3.global-to-local, align 4
  %v1_fbb8 = trunc i32 %v2_fbb4 to i8
  store i8 %v1_fbb8, i8* %v3_fbac, align 1
  %v0_fbbc = load i32, i32* %r2.global-to-local, align 4
  %v1_fbbc = add i32 %v0_fbbc, 1
  store i32 %v1_fbbc, i32* %r2.global-to-local, align 4
  %v0_fbc0 = load i32, i32* @r7, align 4
  %v9_fbc0 = icmp eq i32 %v0_fbc0, %v1_fbbc
  br i1 %v9_fbc0, label %dec_label_pc_fbc8.loopexit, label %dec_label_pc_fbac.dec_label_pc_fbac_crit_edge

dec_label_pc_fbac.dec_label_pc_fbac_crit_edge:    ; preds = %dec_label_pc_fbac
  %v1_fbb4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fbac

dec_label_pc_fbc8.loopexit:                       ; preds = %dec_label_pc_fbac
  %extract.t = trunc i32 %v1_fbbc to i8
  br label %dec_label_pc_fbc8

dec_label_pc_fbc8:                                ; preds = %dec_label_pc_fbc8.loopexit, %dec_label_pc_fb30
  %v0_fbd8.off0 = phi i8 [ %extract.t, %dec_label_pc_fbc8.loopexit ], [ %extract.t8, %dec_label_pc_fb30 ]
  %v2_fbc8 = load i32, i32* @global_var_1f1bc.157, align 4
  %v2_fbcc = load i32, i32* @global_var_1f1e8.159, align 4
  store i32 %v2_fbcc, i32* %r2.global-to-local, align 4
  %v3_fbd0 = mul i32 %v2_fbc8, 16
  %v2_fbd4 = add i32 %v2_fbcc, %v3_fbd0
  store i32 %v2_fbd4, i32* %r3.global-to-local, align 4
  %v3_fbd8 = add i32 %v2_fbd4, 12
  %v4_fbd8 = inttoptr i32 %v3_fbd8 to i8*
  store i8 %v0_fbd8.off0, i8* %v4_fbd8, align 1
  %v0_fbdc = load i32, i32* @r6, align 4
  %v1_fbdc = load i32, i32* %sl.global-to-local, align 4
  %v2_fbdc = load i32, i32* %fp.global-to-local, align 4
  %v5_fbdc = mul i32 %v2_fbdc, 16
  %v6_fbdc = add i32 %v5_fbdc, %v1_fbdc
  %v7_fbdc = inttoptr i32 %v6_fbdc to i32*
  store i32 %v0_fbdc, i32* %v7_fbdc, align 4
  %v2_fbe4 = load i32, i32* @global_var_1f1bc.157, align 4
  store i32 %v2_fbe4, i32* @r7, align 4
  %v2_fbe8 = load i32, i32* @global_var_1f1e8.159, align 4
  store i32 %v2_fbe8, i32* %sl.global-to-local, align 4
  %v1_fbec = inttoptr i32 %arg2 to i8*
  %v2_fbec = call i32 @function_12c3c(i8* %v1_fbec)
  %sext1 = mul i32 %v2_fbec, 16777216
  %v1_fbf0 = sdiv i32 %sext1, 16777216
  %v2_fbf0 = add nsw i32 %v1_fbf0, 1
  store i32 %v2_fbf0, i32* @r4, align 4
  store i32 %v1_fbf0, i32* @r5, align 4
  %v1_fbfc = call i32 @function_14054(i32 %v2_fbf0)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_fc04 = load i32, i32* @r4, align 4
  store i32 %v0_fc04, i32* %r2.global-to-local, align 4
  store i32 %v1_fbfc, i32* %r6.global-to-local, align 4
  %v3_fc0c = call i32 @function_12cb8(i32 %v1_fbfc, i32 %arg2, i32 %v0_fc04)
  %v0_fc10 = load i32, i32* @r5, align 4
  %tmp24 = icmp slt i32 %v0_fc10, 1
  %extract.t10 = trunc i32 %v0_fc10 to i8
  br i1 %tmp24, label %dec_label_pc_fc3c, label %dec_label_pc_fc18

dec_label_pc_fc18:                                ; preds = %dec_label_pc_fbc8
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc20

dec_label_pc_fc20:                                ; preds = %dec_label_pc_fc20.dec_label_pc_fc20_crit_edge, %dec_label_pc_fc18
  %v1_fc28 = phi i32 [ %v1_fc28.pre, %dec_label_pc_fc20.dec_label_pc_fc20_crit_edge ], [ -81, %dec_label_pc_fc18 ]
  %v2_fc2c = phi i32 [ %v1_fc30, %dec_label_pc_fc20.dec_label_pc_fc20_crit_edge ], [ 0, %dec_label_pc_fc18 ]
  %v1_fc20 = load i32, i32* %r6.global-to-local, align 4
  %v2_fc20 = add i32 %v1_fc20, %v2_fc2c
  %v3_fc20 = inttoptr i32 %v2_fc20 to i8*
  %v4_fc20 = load i8, i8* %v3_fc20, align 1
  %v6_fc20 = zext i8 %v4_fc20 to i32
  %v1_fc24 = sub i32 -1, %v1_fc28
  %v2_fc28 = xor i32 %v6_fc20, %v1_fc24
  store i32 %v2_fc28, i32* %r3.global-to-local, align 4
  %v1_fc2c = trunc i32 %v2_fc28 to i8
  store i8 %v1_fc2c, i8* %v3_fc20, align 1
  %v0_fc30 = load i32, i32* %r2.global-to-local, align 4
  %v1_fc30 = add i32 %v0_fc30, 1
  store i32 %v1_fc30, i32* %r2.global-to-local, align 4
  %v0_fc34 = load i32, i32* @r5, align 4
  %v9_fc34 = icmp eq i32 %v0_fc34, %v1_fc30
  br i1 %v9_fc34, label %dec_label_pc_fc3c.loopexit, label %dec_label_pc_fc20.dec_label_pc_fc20_crit_edge

dec_label_pc_fc20.dec_label_pc_fc20_crit_edge:    ; preds = %dec_label_pc_fc20
  %v1_fc28.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc20

dec_label_pc_fc3c.loopexit:                       ; preds = %dec_label_pc_fc20
  %extract.t9 = trunc i32 %v1_fc30 to i8
  br label %dec_label_pc_fc3c

dec_label_pc_fc3c:                                ; preds = %dec_label_pc_fc3c.loopexit, %dec_label_pc_fbc8
  %v0_fc4c.off0 = phi i8 [ %extract.t9, %dec_label_pc_fc3c.loopexit ], [ %extract.t10, %dec_label_pc_fbc8 ]
  %v2_fc3c = load i32, i32* @global_var_1f1bc.157, align 4
  %v2_fc40 = load i32, i32* @global_var_1f1e8.159, align 4
  %v3_fc44 = mul i32 %v2_fc3c, 16
  %v2_fc48 = or i32 %v3_fc44, 13
  %v3_fc4c = add i32 %v2_fc48, %v2_fc40
  %v4_fc4c = inttoptr i32 %v3_fc4c to i8*
  store i8 %v0_fc4c.off0, i8* %v4_fc4c, align 1
  %v2_fc54 = load i32, i32* @global_var_1f1bc.157, align 4
  store i32 %v2_fc54, i32* %lr.global-to-local, align 4
  %v4_fc58 = load i8, i8* @global_var_1f1ed.162, align 1
  %v5_fc58 = zext i8 %v4_fc58 to i32
  %v3_fc5c = load i8, i8* bitcast (i8** @global_var_1f1ec.161 to i8*), align 4
  %v4_fc5c = zext i8 %v3_fc5c to i32
  %v2_fc60 = load i32, i32* @global_var_1f1e8.159, align 4
  %v4_fc64 = mul nuw nsw i32 %v5_fc58, 256
  %v5_fc64 = or i32 %v4_fc5c, %v4_fc64
  store i32 %v5_fc64, i32* %r2.global-to-local, align 4
  %v3_fc68 = mul i32 %v2_fc54, 16
  %v2_fc6c = add i32 %v2_fc60, %v3_fc68
  store i32 %v2_fc6c, i32* %r1.global-to-local, align 4
  %v3_fc74 = add i32 %v2_fc6c, 9
  %v4_fc74 = inttoptr i32 %v3_fc74 to i8*
  store i8 %v4_fc58, i8* %v4_fc74, align 1
  %v0_fc78 = load i32, i32* %r2.global-to-local, align 4
  %v1_fc78 = trunc i32 %v0_fc78 to i8
  %v2_fc78 = load i32, i32* %r1.global-to-local, align 4
  %v3_fc78 = add i32 %v2_fc78, 8
  %v4_fc78 = inttoptr i32 %v3_fc78 to i8*
  store i8 %v1_fc78, i8* %v4_fc78, align 1
  %v4_fc7c = load i8, i8* @global_var_1f1ed.162, align 1
  %v5_fc7c = zext i8 %v4_fc7c to i32
  %v3_fc80 = load i8, i8* bitcast (i8** @global_var_1f1ec.161 to i8*), align 4
  %v4_fc80 = zext i8 %v3_fc80 to i32
  %v4_fc84 = mul nuw nsw i32 %v5_fc7c, 256
  %v5_fc84 = or i32 %v4_fc80, %v4_fc84
  %v2_fc88 = load i32, i32* %stack_var_-44, align 4
  %v2_fc8c = add i32 %v5_fc84, %v2_fc88
  store i32 %v2_fc8c, i32* %r3.global-to-local, align 4
  %v3_fc9011 = udiv i32 %v2_fc8c, 256
  %v1_fc94 = trunc i32 %v3_fc9011 to i8
  %v2_fc94 = load i32, i32* %r1.global-to-local, align 4
  %v3_fc94 = add i32 %v2_fc94, 11
  %v4_fc94 = inttoptr i32 %v3_fc94 to i8*
  store i8 %v1_fc94, i8* %v4_fc94, align 1
  %v0_fc98 = load i32, i32* %r3.global-to-local, align 4
  %v1_fc98 = trunc i32 %v0_fc98 to i8
  %v2_fc98 = load i32, i32* %r1.global-to-local, align 4
  %v3_fc98 = add i32 %v2_fc98, 10
  %v4_fc98 = inttoptr i32 %v3_fc98 to i8*
  store i8 %v1_fc98, i8* %v4_fc98, align 1
  %v4_fc9c = load i8, i8* @global_var_1f1ed.162, align 1
  %v5_fc9c = zext i8 %v4_fc9c to i32
  %v3_fca0 = load i8, i8* bitcast (i8** @global_var_1f1ec.161 to i8*), align 4
  %v4_fca0 = zext i8 %v3_fca0 to i32
  %v4_fca4 = mul nuw nsw i32 %v5_fc9c, 256
  %v5_fca4 = or i32 %v4_fca0, %v4_fca4
  %v2_fca8 = load i32, i32* %stack_var_-44, align 4
  %v2_fcac = add i32 %v5_fca4, %v2_fca8
  store i32 %v2_fcac, i32* %r2.global-to-local, align 4
  %v0_fcb0 = load i32, i32* @r7, align 4
  %v3_fcb0 = mul i32 %v0_fcb0, 16
  %v1_fcb4 = load i32, i32* %sl.global-to-local, align 4
  %v2_fcb4 = add i32 %v1_fcb4, %v3_fcb0
  store i32 %v2_fcb4, i32* %r3.global-to-local, align 4
  %v0_fcb8 = load i32, i32* %lr.global-to-local, align 4
  %v1_fcb8 = add i32 %v0_fcb8, 1
  store i32 %v1_fcb8, i32* @lr, align 4
  %v3_fcbc = sdiv i32 %v2_fcac, 256
  store i32 %v3_fcbc, i32* %r1.global-to-local, align 4
  %v0_fcc0 = load i32, i32* %r6.global-to-local, align 4
  %v2_fcc0 = add i32 %v2_fcb4, 4
  %v3_fcc0 = inttoptr i32 %v2_fcc0 to i32*
  store i32 %v0_fcc0, i32* %v3_fcc0, align 4
  %v0_fcc4 = load i32, i32* @lr, align 4
  %v1_fcc4 = load i32, i32* @r8, align 4
  %v2_fcc4 = inttoptr i32 %v1_fcc4 to i32*
  store i32 %v0_fcc4, i32* %v2_fcc4, align 4
  %v0_fcc8 = load i32, i32* %r1.global-to-local, align 4
  %v1_fcc8 = trunc i32 %v0_fcc8 to i8
  store i8 %v1_fcc8, i8* @global_var_1f1ed.162, align 1
  %v0_fccc = load i32, i32* %r2.global-to-local, align 4
  %v1_fccc = trunc i32 %v0_fccc to i8
  store i8 %v1_fccc, i8* bitcast (i8** @global_var_1f1ec.161 to i8*), align 4
  store i32 %v3_fb30, i32* @r4, align 4
  store i32 %v6_fb30, i32* @r5, align 4
  store i32 %v9_fb30, i32* @r6, align 4
  store i32 %v12_fb30, i32* @r7, align 4
  store i32 %v15_fb30, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1f1ec.161 to i32)

; uselistorder directives
  uselistorder i32 %v1_fc30, { 0, 2, 3, 1 }
  uselistorder i32 %v1_fbfc, { 1, 0 }
  uselistorder i32 %v1_fbbc, { 0, 2, 3, 1 }
  uselistorder i32 %v1_fb88, { 1, 0 }
  uselistorder i32 %v3_fb4c, { 1, 2, 0 }
  uselistorder i32 %v3_fb44, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32 -81, { 0, 2, 1, 3 }
  uselistorder i32 (i8*)* @function_12c3c, { 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 74, 75, 76, 77, 78, 79, 80, 81, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73 }
  uselistorder i32 (i32, i32, i32, i32)* @function_142f0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_fce4(i32 %arg1) local_unnamed_addr {
dec_label_pc_fce4:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp249 = call i32 @__decompiler_undefined_function_0()
  %tmp250 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %tmp278 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-36 = alloca i32, align 4
  %v3_fce4 = load i32, i32* @r4, align 4
  store i32 %v3_fce4, i32* %stack_var_-36, align 4
  %v6_fce4 = load i32, i32* @r5, align 4
  %v15_fce4 = load i32, i32* @r8, align 4
  %v18_fce4 = load i32, i32* @sb, align 4
  %v21_fce4 = load i32, i32* @sl, align 4
  %v0_fcf0 = call i32 @function_135fc()
  store i32 %v0_fcf0, i32* %r0.global-to-local, align 4
  %v7_fcf4 = icmp eq i32 %v0_fcf0, -1
  %. = zext i1 %v7_fcf4 to i32
  %tmp281 = icmp slt i32 %v0_fcf0, 1
  %storemerge240 = select i1 %tmp281, i32 %., i32 1
  store i32 %storemerge240, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f258.153 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd10 = icmp eq i32 %storemerge240, 0
  store i1 %v2_fd10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_fcf0, i32* @global_var_1f258.153, align 4
  br i1 %v2_fd10, label %dec_label_pc_ffe8, label %dec_label_pc_fd1c

dec_label_pc_fd1c:                                ; preds = %dec_label_pc_fce4
  store i32 %v3_fce4, i32* %r4.global-to-local, align 4
  store i32 %v6_fce4, i32* %r5.global-to-local, align 4
  store i32 %v15_fce4, i32* %r8.global-to-local, align 4
  store i32 %v18_fce4, i32* @sb, align 4
  store i32 %v21_fce4, i32* @sl, align 4
  ret i32 %v0_fcf0

dec_label_pc_ffe8:                                ; preds = %dec_label_pc_fce4
  %v0_ffe8 = call i32 @function_12ef4()
  store i32 %v0_ffe8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f238.83 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_ffe8, i32* @global_var_1f238.83, align 4
  %v1_fff4 = call i32 @function_f920(i32 %v0_ffe8)
  %v0_fff8 = load i32, i32* @r4, align 4
  store i32 %v0_fff8, i32* %r0.global-to-local, align 4
  %v1_fffc = inttoptr i32 %v0_fff8 to i32*
  %v2_fffc = call i32 @function_138a0(i32* %v1_fffc)
  store i32 ptrtoint (i32* @global_var_1f1f0.155 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_fffc, i32* @global_var_1f1f0.155, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_10010 = call i32 @function_141a8(i32 256, i32 288)
  store i32 %v2_10010, i32* %lr.global-to-local, align 4
  %v0_1001c = load i32, i32* @r4, align 4
  store i32 %v0_1001c, i32* %stack_var_-48, align 4
  store i32 %v2_10010, i32* @global_var_1f250.167, align 4
  store i32 %v0_1001c, i32* %r3.global-to-local, align 4
  store i32 %v0_1001c, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_1001c, i32* %ip.global-to-local, align 4
  %v1_10034 = add i32 %v2_10010, 4
  store i32 %v1_10034, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10038

dec_label_pc_10038:                               ; preds = %dec_label_pc_10038.dec_label_pc_10038_crit_edge, %dec_label_pc_ffe8
  %v0_10050 = phi i32 [ %v0_10050.pre, %dec_label_pc_10038.dec_label_pc_10038_crit_edge ], [ %v0_1001c, %dec_label_pc_ffe8 ]
  %v0_10040 = phi i32 [ %v0_10058, %dec_label_pc_10038.dec_label_pc_10038_crit_edge ], [ %v0_1001c, %dec_label_pc_ffe8 ]
  %v1_10048 = phi i32 [ %v1_10048.pre, %dec_label_pc_10038.dec_label_pc_10038_crit_edge ], [ %v2_10010, %dec_label_pc_ffe8 ]
  %v3_10038 = mul i32 %v0_10040, 256
  store i32 %v3_10038, i32* %r2.global-to-local, align 4
  %v1_10040 = add i32 %v0_10040, 1
  store i32 %v1_10040, i32* %ip.global-to-local, align 4
  %v2_10044 = mul i32 %v0_10040, 288
  %v2_10048 = add i32 %v1_10048, 12
  %v2_10050 = add i32 %v2_10048, %v2_10044
  %v3_10050 = inttoptr i32 %v2_10050 to i32*
  store i32 %v0_10050, i32* %v3_10050, align 4
  %v0_10054 = load i32, i32* %r0.global-to-local, align 4
  %v1_10054 = load i32, i32* %r1.global-to-local, align 4
  %v2_10054 = inttoptr i32 %v1_10054 to i32*
  store i32 %v0_10054, i32* %v2_10054, align 4
  %v3_10054 = load i32, i32* %r1.global-to-local, align 4
  %v4_10054 = add i32 %v3_10054, 288
  store i32 %v4_10054, i32* %r1.global-to-local, align 4
  %v0_10058 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_10058, i32* %r3.global-to-local, align 4
  %v7_1005c = icmp sgt i32 %v1_10040, 255
  br i1 %v7_1005c, label %dec_label_pc_10060, label %dec_label_pc_10038.dec_label_pc_10038_crit_edge

dec_label_pc_10038.dec_label_pc_10038_crit_edge:  ; preds = %dec_label_pc_10038
  %v1_10048.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_10050.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10038

dec_label_pc_10060:                               ; preds = %dec_label_pc_10038
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_10058, i32* %stack_var_-48, align 4
  %v3_10070 = call i32 @function_13ebc(i32 2, i32 3, i32 6)
  store i32 %v3_10070, i32* %r0.global-to-local, align 4
  %v2_10078 = icmp eq i32 %v3_10070, -1
  store i1 %v2_10078, i1* %cpsr_c.global-to-local, align 1
  %v7_10078 = icmp eq i32 %v3_10070, -1
  store i1 %v7_10078, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10070, i32* @r4, align 4
  store i32 %v3_10070, i32* @global_var_1f254.169, align 4
  br i1 %v7_10078, label %dec_label_pc_11248, label %dec_label_pc_10088

dec_label_pc_10088:                               ; preds = %dec_label_pc_10060
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_1008c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1008c, i32* @r2, align 4
  %v2_10090 = call i32 @function_1350c(i32 %v3_10070, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_10098 = or i32 %v2_10090, 2048
  store i32 %v1_10098, i32* @r2, align 4
  %v0_1009c = load i32, i32* @r4, align 4
  store i32 %v0_1009c, i32* %r0.global-to-local, align 4
  %v2_100a0 = call i32 @function_1350c(i32 %v0_1009c, i32 4)
  %v2_100ac = load i32, i32* @global_var_1f254.169, align 4
  store i32 %v2_100ac, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_100b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_100b4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_100bc = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_100bc, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v6_100cc = call i32 @function_13e8c(i32 %v2_100ac, i32 %v0_100b4, i32 3, i32* nonnull %stack_var_-48, i32 4)
  store i32 %v6_100cc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100d0 = icmp eq i32 %v6_100cc, 0
  store i1 %v2_100d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_100d0, label %dec_label_pc_100d8, label %dec_label_pc_1123c

dec_label_pc_100d8:                               ; preds = %dec_label_pc_10088, %dec_label_pc_100d8
  %v0_100d8 = call i32 @function_f8c8()
  %v3_100dc = mul i32 %v0_100d8, 65536
  store i32 %v3_100dc, i32* %r0.global-to-local, align 4
  %v1_100e8 = mul i32 %v0_100d8, 256
  %v3_100ec = and i32 %v1_100e8, 65280
  %tmp284 = udiv i32 %v0_100d8, 256
  %v4_100f0 = urem i32 %tmp284, 256
  %v5_100f0 = or i32 %v4_100f0, %v3_100ec
  store i32 %v5_100f0, i32* %r3.global-to-local, align 4
  %v2_100f4 = icmp ugt i32 %v5_100f0, 1023
  store i1 %v2_100f4, i1* %cpsr_c.global-to-local, align 1
  %v7_100f4 = icmp eq i32 %v5_100f0, 1024
  store i1 %v7_100f4, i1* %cpsr_z.global-to-local, align 1
  %v3_100f8 = icmp ult i32 %v5_100f0, 1022
  br i1 %v3_100f8, label %dec_label_pc_100d8, label %dec_label_pc_100fc

dec_label_pc_100fc:                               ; preds = %dec_label_pc_100d8
  %v5_100e4.le = trunc i32 %v0_100d8 to i8
  store i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i8 69, i8* bitcast (i8** @global_var_1f1c0.171 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1f1c3.172 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1f1c2.173 to i8*), align 4
  %v0_10130 = call i32 @function_f8c8()
  %v1_10130 = trunc i32 %v0_10130 to i8
  store i32 %v0_10130, i32* %r0.global-to-local, align 4
  %v4_10138 = sext i8 %v5_100e4.le to i32
  %v3_1013c = load i8, i8* @global_var_1f1e0.176, align 1
  store i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), i32* %lr.global-to-local, align 4
  %v3_10144239 = udiv i32 %v4_10138, 256
  store i8 64, i8* bitcast (i32* @global_var_1f1c8.177 to i8*), align 4
  %v2_10150 = and i32 %v0_10130, 128
  %v3_10150 = icmp ne i32 %v2_10150, 0
  store i1 %v3_10150, i1* %cpsr_c.global-to-local, align 1
  %v4_10150238 = udiv i32 %v0_10130, 256
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_1013c, 16
  %v1_10158 = zext i8 %tmp to i32
  store i32 6, i32* @r4, align 4
  %v1_10160 = trunc i32 %v4_10150238 to i8
  store i8 %v1_10160, i8* bitcast (i32* @global_var_1f1c5.178 to i8*), align 4
  %v1_10164 = or i32 %v1_10158, 80
  store i32 %v1_10164, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v1_1016c = trunc i32 %v1_10164 to i8
  store i8 %v1_1016c, i8* @global_var_1f1e0.176, align 1
  %v1_10170 = trunc i32 %v3_10144239 to i8
  store i8 %v1_10170, i8* bitcast (i32* @global_var_1f1d5.179 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1f1d7.180 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1f1c9.181 to i8*), align 4
  store i32 %v4_10138, i32* %ip.global-to-local, align 4
  store i8 %v1_10130, i8* bitcast (i32* @global_var_1f1c4.182 to i8*), align 4
  store i8 %v5_100e4.le, i8* bitcast (i32* @global_var_1f1d4.175 to i8*), align 4
  %v0_10188 = load i32, i32* @r6, align 4
  %v1_10188 = trunc i32 %v0_10188 to i8
  store i8 %v1_10188, i8* bitcast (i32* @global_var_1f1d6.183 to i8*), align 4
  %v0_1018c = call i32 @function_f8c8()
  %v1_1018c = trunc i32 %v0_1018c to i8
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* @lr, align 4
  %v3_10194 = load i8, i8* @global_var_1f1e1.184, align 1
  %v4_10194 = zext i8 %v3_10194 to i32
  %v2_10198 = and i32 %v0_1018c, 128
  %v3_10198 = icmp ne i32 %v2_10198, 0
  store i1 %v3_10198, i1* %cpsr_c.global-to-local, align 1
  %v4_10198 = sdiv i32 %v0_1018c, 256
  store i32 %v4_10198, i32* %ip.global-to-local, align 4
  %v1_1019c = or i32 %v4_10194, 2
  store i32 %v1_1019c, i32* %r3.global-to-local, align 4
  store i32 %v0_1018c, i32* @r5, align 4
  %v1_101a4 = trunc i32 %v4_10198 to i8
  store i8 %v1_101a4, i8* bitcast (i32* @global_var_1f1e3.185 to i8*), align 4
  %v1_101a8 = trunc i32 %v1_1019c to i8
  store i8 %v1_101a8, i8* @global_var_1f1e1.184, align 1
  store i8 %v1_1018c, i8* bitcast (i32* @global_var_1f1e2.186 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_101bc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_101cc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d20.194 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_101dc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15d20.194 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15d28.196 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_101ec = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_15d28.196 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_101fc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r1.global-to-local, align 4
  %v5_1020c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d30.198 to i32), i32* %r1.global-to-local, align 4
  %v0_10218 = load i32, i32* @r4, align 4
  store i32 %v0_10218, i32* %r2.global-to-local, align 4
  %v4_1021c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15d30.198 to i32), i32 %v0_10218)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d38.200 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1022c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d38.200 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1023c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d48.204 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1024c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d48.204 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1025c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d5c.208 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1026c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15d5c.208 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), i32* %r1.global-to-local, align 4
  %v5_1027c = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_1028c = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32* %r1.global-to-local, align 4
  %v5_1029c = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_102ac = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16170.212 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_102bc = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32 ptrtoint (i32* @global_var_16170.212 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_102cc = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_102dc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d6c.214 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_102ec = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d6c.214 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r1.global-to-local, align 4
  %v5_102fc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d78.216 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_1030c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15d78.216 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_1031c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32* %r1.global-to-local, align 4
  %v5_1032c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32* %r1.global-to-local, align 4
  %v0_10338 = load i32, i32* @r4, align 4
  store i32 %v0_10338, i32* %r2.global-to-local, align 4
  %v4_1033c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32 %v0_10338)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d88.220 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_1034c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d88.220 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d90.222 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_1035c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15d90.222 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee4.224 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_1036c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15ee4.224 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d9c.226 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_1037c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d9c.226 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee4.224 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_1038c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15ee4.224 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15da8.228 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_1039c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15da8.228 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d6c.214 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_103ac = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d6c.214 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16170.212 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_103bc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_16170.212 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15db0.230 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_103cc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15db0.230 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_15db8.232 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_103dc = call i32 @function_fb30(i32 ptrtoint ([14 x i8]* @global_var_15db8.232 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_15db8.232 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15dc8.234 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_103ec = call i32 @function_fb30(i32 ptrtoint ([14 x i8]* @global_var_15db8.232 to i32), i32 ptrtoint ([7 x i8]* @global_var_15dc8.234 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_15db8.232 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15dd0.236 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_103fc = call i32 @function_fb30(i32 ptrtoint ([14 x i8]* @global_var_15db8.232 to i32), i32 ptrtoint ([4 x i8]* @global_var_15dd0.236 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_15db8.232 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15dd4.238 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_1040c = call i32 @function_fb30(i32 ptrtoint ([14 x i8]* @global_var_15db8.232 to i32), i32 ptrtoint ([7 x i8]* @global_var_15dd4.238 to i32), i32 13)
  store i32 ptrtoint ([8 x i8]* @global_var_15ddc.240 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15ddc.240 to i32), i32* %r1.global-to-local, align 4
  %v5_1041c = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15ddc.240 to i32), i32 ptrtoint ([8 x i8]* @global_var_15ddc.240 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15ddc.240 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_1042c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([8 x i8]* @global_var_15ddc.240 to i32), i32 7)
  store i32 ptrtoint ([11 x i8]* @global_var_15de4.242 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15de4.242 to i32), i32* %r1.global-to-local, align 4
  %v5_1043c = call i32 @function_fb30(i32 ptrtoint ([11 x i8]* @global_var_15de4.242 to i32), i32 ptrtoint ([11 x i8]* @global_var_15de4.242 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1044c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), i32* %r1.global-to-local, align 4
  %v5_1045c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d78.216 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1046c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), i32 ptrtoint (i32* @global_var_15d78.216 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32* %r1.global-to-local, align 4
  %v0_10478 = load i32, i32* @r4, align 4
  store i32 %v0_10478, i32* %r2.global-to-local, align 4
  %v4_1047c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32 %v0_10478)
  store i32 ptrtoint (i32* @global_var_15df8.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d6c.214 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1048c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_15df8.246 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d6c.214 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_15e00.248 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16170.212 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_1049c = call i32 @function_fb30(i32 ptrtoint ([14 x i8]* @global_var_15e00.248 to i32), i32 ptrtoint (i32* @global_var_16170.212 to i32), i32 13)
  store i32 ptrtoint (i32* @global_var_15da8.228 to i32), i32* %r0.global-to-local, align 4
  %v0_104a4 = load i32, i32* @r4, align 4
  store i32 %v0_104a4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15da8.228 to i32), i32* %r1.global-to-local, align 4
  %v3_104ac = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_15da8.228 to i32), i32 ptrtoint (i32* @global_var_15da8.228 to i32), i32 %v0_104a4)
  store i32 ptrtoint (i32* @global_var_15d30.198 to i32), i32* %r0.global-to-local, align 4
  %v0_104b4 = load i32, i32* @r4, align 4
  store i32 %v0_104b4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d30.198 to i32), i32* %r1.global-to-local, align 4
  %v3_104bc = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_15d30.198 to i32), i32 ptrtoint (i32* @global_var_15d30.198 to i32), i32 %v0_104b4)
  store i32 ptrtoint ([5 x i8]* @global_var_15e10.250 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15e10.250 to i32), i32* %r1.global-to-local, align 4
  %v5_104cc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_15e10.250 to i32), i32 ptrtoint ([5 x i8]* @global_var_15e10.250 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15e10.250 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_104dc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15e10.250 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e18.252 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_104ec = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15e18.252 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e20.254 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_104fc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15e20.254 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e28.256 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1050c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15e28.256 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15e30.258 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_1051c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_15e30.258 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15e38.260 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_1052c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15e38.260 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15e40.262 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_1053c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_15e40.262 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15e48.264 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_1054c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_15e48.264 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e54.266 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1055c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15e54.266 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e64.268 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1056c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15e64.268 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15e74.270 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_1057c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([7 x i8]* @global_var_15e74.270 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15e7c.272 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_1058c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15e7c.272 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15e84.274 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_1059c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_15e84.274 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_105ac = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15e90.276 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_105bc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([8 x i8]* @global_var_15e90.276 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e98.278 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_105cc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15e98.278 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ea4.280 to i32), i32* %r1.global-to-local, align 4
  %v0_105d8 = load i32, i32* @r4, align 4
  store i32 %v0_105d8, i32* %r2.global-to-local, align 4
  %v4_105dc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15ea4.280 to i32), i32 %v0_105d8)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15eac.282 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_105ec = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15eac.282 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16170.212 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_105fc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_16170.212 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d78.216 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1060c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15d78.216 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d5c.208 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1061c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15d5c.208 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1062c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e64.268 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1063c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15e64.268 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15eb4.284 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_1064c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15eb4.284 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d88.220 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_1065c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d88.220 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15dc8.234 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_1066c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_15dc8.234 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d4c.286 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1067c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d4c.286 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ec0.288 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_1068c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15ec0.288 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15ecc.290 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1069c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([6 x i8]* @global_var_15ecc.290 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15ed4.292 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_106ac = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([4 x i8]* @global_var_15ed4.292 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ed8.294 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_106bc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15ed8.294 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee0.296 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_106cc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15ee0.296 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15eec.298 to i32), i32* %r1.global-to-local, align 4
  %v0_106d8 = load i32, i32* @r4, align 4
  store i32 %v0_106d8, i32* %r2.global-to-local, align 4
  %v5_106dc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_15eec.298 to i32), i32 %v0_106d8)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15ef4.300 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_106ec = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([9 x i8]* @global_var_15ef4.300 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f00.302 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_106fc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15f00.302 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f08.304 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1070c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15f08.304 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f10.306 to i32), i32* %r1.global-to-local, align 4
  %v0_10718 = load i32, i32* @r4, align 4
  store i32 %v0_10718, i32* %r2.global-to-local, align 4
  %v4_1071c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15f10.306 to i32), i32 %v0_10718)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f18.308 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1072c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15f18.308 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f20.310 to i32), i32* %r1.global-to-local, align 4
  %v0_10738 = load i32, i32* @r4, align 4
  store i32 %v0_10738, i32* %r2.global-to-local, align 4
  %v5_1073c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f20.310 to i32), i32 %v0_10738)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f28.312 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_1074c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f28.312 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f30.314 to i32), i32* %r1.global-to-local, align 4
  %v0_10758 = load i32, i32* @r4, align 4
  store i32 %v0_10758, i32* %r2.global-to-local, align 4
  %v4_1075c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15f30.314 to i32), i32 %v0_10758)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15dd4.238 to i32), i32* %r1.global-to-local, align 4
  %v0_10768 = load i32, i32* @r4, align 4
  store i32 %v0_10768, i32* %r2.global-to-local, align 4
  %v5_1076c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_15dd4.238 to i32), i32 %v0_10768)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f38.316 to i32), i32* %r1.global-to-local, align 4
  %v0_10778 = load i32, i32* @r4, align 4
  store i32 %v0_10778, i32* %r2.global-to-local, align 4
  %v4_1077c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_15f38.316 to i32), i32 %v0_10778)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f40.318 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_1078c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f40.318 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f48.320 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_1079c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([9 x i8]* @global_var_15f48.320 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_15f54.322 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f54.322 to i32), i32* %r1.global-to-local, align 4
  %v5_107ac = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15f54.322 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f54.322 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15d4c.286 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d4c.286 to i32), i32* %r1.global-to-local, align 4
  %v5_107bc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_15d4c.286 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d4c.286 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15d4c.286 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_107cc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_15d4c.286 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1604c.324 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_107dc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_1604c.324 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f5c.326 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_107ec = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15f5c.326 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15f64.328 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_107fc = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15f64.328 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15f64.328 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f64.328 to i32), i32* %r1.global-to-local, align 4
  %v5_1080c = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15f64.328 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f64.328 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_15f6c.330 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_1081c = call i32 @function_fb30(i32 ptrtoint ([4 x i8]* @global_var_15f6c.330 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_15f70.332 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f78.334 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_1082c = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15f70.332 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f78.334 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_15f80.336 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15f80.336 to i32), i32* %r1.global-to-local, align 4
  %v5_1083c = call i32 @function_fb30(i32 ptrtoint ([4 x i8]* @global_var_15f80.336 to i32), i32 ptrtoint ([4 x i8]* @global_var_15f80.336 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f84.338 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1084c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_15f84.338 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f90.340 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_1085c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15f90.340 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_15f98.342 to i32), i32* %r0.global-to-local, align 4
  %v0_10864 = load i32, i32* @r4, align 4
  store i32 %v0_10864, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f98.342 to i32), i32* %r1.global-to-local, align 4
  %v5_1086c = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_15f98.342 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f98.342 to i32), i32 %v0_10864)
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f98.342 to i32), i32* %r1.global-to-local, align 4
  %v0_10878 = load i32, i32* @r4, align 4
  store i32 %v0_10878, i32* %r2.global-to-local, align 4
  %v4_1087c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f98.342 to i32), i32 %v0_10878)
  store i32 ptrtoint (i32* @global_var_15fa0.344 to i32), i32* %r0.global-to-local, align 4
  %v0_10884 = load i32, i32* @r4, align 4
  store i32 %v0_10884, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fa0.344 to i32), i32* %r1.global-to-local, align 4
  %v3_1088c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_15fa0.344 to i32), i32 ptrtoint (i32* @global_var_15fa0.344 to i32), i32 %v0_10884)
  store i32 ptrtoint ([6 x i8]* @global_var_15fa8.346 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_1089c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15fa8.346 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15fb0.348 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_108ac = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15fb0.348 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15fb0.348 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d88.220 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_108bc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15fb0.348 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d88.220 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15fb0.348 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_108cc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15fb0.348 to i32), i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_15fb8.350 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v3_108dc = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_15fb8.350 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 5)
  store i32 ptrtoint ([9 x i8]* @global_var_15fc0.352 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15fcc.354 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_108ec = call i32 @function_fb30(i32 ptrtoint ([9 x i8]* @global_var_15fc0.352 to i32), i32 ptrtoint ([7 x i8]* @global_var_15fcc.354 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_15fd4.356 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15fd4.356 to i32), i32* %r1.global-to-local, align 4
  %v5_108fc = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_15fd4.356 to i32), i32 ptrtoint ([8 x i8]* @global_var_15fd4.356 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_15fdc.358 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15fdc.358 to i32), i32* %r1.global-to-local, align 4
  %v5_1090c = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_15fdc.358 to i32), i32 ptrtoint ([7 x i8]* @global_var_15fdc.358 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_15fdc.358 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15fe4.360 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_1091c = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_15fdc.358 to i32), i32 ptrtoint ([8 x i8]* @global_var_15fe4.360 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15fec.362 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([10 x i8]* @global_var_15ff4.364 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_1092c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15fec.362 to i32), i32 ptrtoint ([10 x i8]* @global_var_15ff4.364 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_15fec.362 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f40.318 to i32), i32* %r1.global-to-local, align 4
  %v0_10938 = load i32, i32* @r4, align 4
  store i32 %v0_10938, i32* %r2.global-to-local, align 4
  %v5_1093c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_15fec.362 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f40.318 to i32), i32 %v0_10938)
  store i32 ptrtoint ([5 x i8]* @global_var_16000.366 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16000.366 to i32), i32* %r1.global-to-local, align 4
  %v5_1094c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16000.366 to i32), i32 ptrtoint ([5 x i8]* @global_var_16000.366 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16008.368 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16010.370 to i32), i32* %r1.global-to-local, align 4
  %v0_10958 = load i32, i32* @r4, align 4
  store i32 %v0_10958, i32* %r2.global-to-local, align 4
  %v5_1095c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16008.368 to i32), i32 ptrtoint ([7 x i8]* @global_var_16010.370 to i32), i32 %v0_10958)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16010.370 to i32), i32* %r1.global-to-local, align 4
  %v0_10968 = load i32, i32* @r4, align 4
  store i32 %v0_10968, i32* %r2.global-to-local, align 4
  %v5_1096c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_16010.370 to i32), i32 %v0_10968)
  store i32 ptrtoint ([3 x i8]* @global_var_15fe0.372 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16018.374 to i32), i32* %r1.global-to-local, align 4
  %v0_10978 = load i32, i32* @r4, align 4
  store i32 %v0_10978, i32* %r2.global-to-local, align 4
  %v5_1097c = call i32 @function_fb30(i32 ptrtoint ([3 x i8]* @global_var_15fe0.372 to i32), i32 ptrtoint ([7 x i8]* @global_var_16018.374 to i32), i32 %v0_10978)
  store i32 ptrtoint ([7 x i8]* @global_var_16018.374 to i32), i32* %r0.global-to-local, align 4
  %v0_10984 = load i32, i32* @r4, align 4
  store i32 %v0_10984, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16018.374 to i32), i32* %r1.global-to-local, align 4
  %v5_1098c = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_16018.374 to i32), i32 ptrtoint ([7 x i8]* @global_var_16018.374 to i32), i32 %v0_10984)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16020.376 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1099c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint (i32* @global_var_16020.376 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16020.376 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_109ac = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_16020.376 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1602c.378 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_109bc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_1602c.378 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16034.380 to i32), i32* %r1.global-to-local, align 4
  %v0_109c8 = load i32, i32* @r4, align 4
  store i32 %v0_109c8, i32* %r2.global-to-local, align 4
  %v5_109cc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([7 x i8]* @global_var_16034.380 to i32), i32 %v0_109c8)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1603c.382 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_109dc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_1603c.382 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16048.384 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_109ec = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_16048.384 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16050.386 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_109fc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_16050.386 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1605c.388 to i32), i32* %r1.global-to-local, align 4
  %v0_10a08 = load i32, i32* @r4, align 4
  store i32 %v0_10a08, i32* %r2.global-to-local, align 4
  %v4_10a0c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_1605c.388 to i32), i32 %v0_10a08)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16064.390 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10a1c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_16064.390 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16070.392 to i32), i32* %r1.global-to-local, align 4
  %v0_10a28 = load i32, i32* @r4, align 4
  store i32 %v0_10a28, i32* %r2.global-to-local, align 4
  %v4_10a2c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_16070.392 to i32), i32 %v0_10a28)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16078.394 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10a3c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_16078.394 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16080.396 to i32), i32* %r1.global-to-local, align 4
  %v0_10a48 = load i32, i32* @r4, align 4
  store i32 %v0_10a48, i32* %r2.global-to-local, align 4
  %v5_10a4c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([7 x i8]* @global_var_16080.396 to i32), i32 %v0_10a48)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16088.398 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10a5c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_16088.398 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16090.400 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10a6c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_16090.400 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1609c.402 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_10a7c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_1609c.402 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_160a8.404 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10a8c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 ptrtoint ([6 x i8]* @global_var_160a8.404 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_160a8.404 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_160a8.404 to i32), i32* %r1.global-to-local, align 4
  %v5_10a9c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_160a8.404 to i32), i32 ptrtoint ([6 x i8]* @global_var_160a8.404 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_160b0.406 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_160b0.406 to i32), i32* %r1.global-to-local, align 4
  %v5_10aac = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_160b0.406 to i32), i32 ptrtoint ([8 x i8]* @global_var_160b0.406 to i32), i32 7)
  store i32 ptrtoint (i32* @global_var_160b8.408 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15dd4.238 to i32), i32* %r1.global-to-local, align 4
  %v0_10ab8 = load i32, i32* @r4, align 4
  store i32 %v0_10ab8, i32* %r2.global-to-local, align 4
  %v4_10abc = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_160b8.408 to i32), i32 ptrtoint ([7 x i8]* @global_var_15dd4.238 to i32), i32 %v0_10ab8)
  store i32 ptrtoint ([4 x i8]* @global_var_160c0.410 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d6c.214 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_10acc = call i32 @function_fb30(i32 ptrtoint ([4 x i8]* @global_var_160c0.410 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d6c.214 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_160c4.412 to i32), i32* %r0.global-to-local, align 4
  %v0_10ad4 = load i32, i32* @r4, align 4
  store i32 %v0_10ad4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_160c4.412 to i32), i32* %r1.global-to-local, align 4
  %v5_10adc = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_160c4.412 to i32), i32 ptrtoint ([7 x i8]* @global_var_160c4.412 to i32), i32 %v0_10ad4)
  store i32 ptrtoint ([6 x i8]* @global_var_160cc.414 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160d4.416 to i32), i32* %r1.global-to-local, align 4
  %v0_10ae8 = load i32, i32* @r4, align 4
  store i32 %v0_10ae8, i32* %r2.global-to-local, align 4
  %v4_10aec = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_160cc.414 to i32), i32 ptrtoint (i32* @global_var_160d4.416 to i32), i32 %v0_10ae8)
  store i32 ptrtoint ([7 x i8]* @global_var_160dc.418 to i32), i32* %r0.global-to-local, align 4
  %v0_10af4 = load i32, i32* @r4, align 4
  store i32 %v0_10af4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_160dc.418 to i32), i32* %r1.global-to-local, align 4
  %v5_10afc = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_160dc.418 to i32), i32 ptrtoint ([7 x i8]* @global_var_160dc.418 to i32), i32 %v0_10af4)
  store i32 ptrtoint ([6 x i8]* @global_var_160e4.420 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_160e4.420 to i32), i32* %r1.global-to-local, align 4
  %v5_10b0c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_160e4.420 to i32), i32 ptrtoint ([6 x i8]* @global_var_160e4.420 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_160ec.422 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_160ec.422 to i32), i32* %r1.global-to-local, align 4
  %v5_10b1c = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_160ec.422 to i32), i32 ptrtoint ([8 x i8]* @global_var_160ec.422 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_160f4.424 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_160f4.424 to i32), i32* %r1.global-to-local, align 4
  %v5_10b2c = call i32 @function_fb30(i32 ptrtoint ([4 x i8]* @global_var_160f4.424 to i32), i32 ptrtoint ([4 x i8]* @global_var_160f4.424 to i32), i32 3)
  store i32 ptrtoint ([4 x i8]* @global_var_160f8.426 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_160f8.426 to i32), i32* %r1.global-to-local, align 4
  %v5_10b3c = call i32 @function_fb30(i32 ptrtoint ([4 x i8]* @global_var_160f8.426 to i32), i32 ptrtoint ([4 x i8]* @global_var_160f8.426 to i32), i32 3)
  store i32 ptrtoint (i32* @global_var_160fc.428 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160fc.428 to i32), i32* %r1.global-to-local, align 4
  %v3_10b4c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_160fc.428 to i32), i32 ptrtoint (i32* @global_var_160fc.428 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16104.430 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16104.430 to i32), i32* %r1.global-to-local, align 4
  %v5_10b5c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16104.430 to i32), i32 ptrtoint ([5 x i8]* @global_var_16104.430 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_1610c.432 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  %v0_10b68 = load i32, i32* @r4, align 4
  store i32 %v0_10b68, i32* %r2.global-to-local, align 4
  %v4_10b6c = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_1610c.432 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 %v0_10b68)
  store i32 ptrtoint ([6 x i8]* @global_var_16114.433 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee4.224 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10b7c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16114.433 to i32), i32 ptrtoint (i32* @global_var_15ee4.224 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16114.433 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32* %r1.global-to-local, align 4
  %v0_10b88 = load i32, i32* @r4, align 4
  store i32 %v0_10b88, i32* %r2.global-to-local, align 4
  %v4_10b8c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16114.433 to i32), i32 ptrtoint (i32* @global_var_15d54.206 to i32), i32 %v0_10b88)
  store i32 ptrtoint ([7 x i8]* @global_var_1611c.435 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r1.global-to-local, align 4
  %v0_10b98 = load i32, i32* @r4, align 4
  store i32 %v0_10b98, i32* %r2.global-to-local, align 4
  %v4_10b9c = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_1611c.435 to i32), i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 %v0_10b98)
  store i32 ptrtoint ([7 x i8]* @global_var_1611c.435 to i32), i32* %r0.global-to-local, align 4
  %v0_10ba4 = load i32, i32* @r4, align 4
  store i32 %v0_10ba4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1611c.435 to i32), i32* %r1.global-to-local, align 4
  %v5_10bac = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_1611c.435 to i32), i32 ptrtoint ([7 x i8]* @global_var_1611c.435 to i32), i32 %v0_10ba4)
  store i32 ptrtoint ([5 x i8]* @global_var_16124.437 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16124.437 to i32), i32* %r1.global-to-local, align 4
  %v5_10bbc = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16124.437 to i32), i32 ptrtoint ([5 x i8]* @global_var_16124.437 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1612c.439 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10bcc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_1612c.439 to i32), i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_16134.441 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10bdc = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_16134.441 to i32), i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_1613c.443 to i32), i32* %r0.global-to-local, align 4
  %v0_10be4 = load i32, i32* @r4, align 4
  store i32 %v0_10be4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1613c.443 to i32), i32* %r1.global-to-local, align 4
  %v5_10bec = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_1613c.443 to i32), i32 ptrtoint ([7 x i8]* @global_var_1613c.443 to i32), i32 %v0_10be4)
  store i32 ptrtoint ([6 x i8]* @global_var_16144.445 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1614c.447 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10bfc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16144.445 to i32), i32 ptrtoint ([6 x i8]* @global_var_1614c.447 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16154.449 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1615c.451 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10c0c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_16154.449 to i32), i32 ptrtoint ([5 x i8]* @global_var_1615c.451 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_16164.453 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16164.453 to i32), i32* %r1.global-to-local, align 4
  %v3_10c1c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_16164.453 to i32), i32 ptrtoint (i32* @global_var_16164.453 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15ef8.455 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1616c.457 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10c2c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_15ef8.455 to i32), i32 ptrtoint (i32* @global_var_1616c.457 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_16178.459 to i32), i32* %r0.global-to-local, align 4
  %v0_10c34 = load i32, i32* @r4, align 4
  store i32 %v0_10c34, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16178.459 to i32), i32* %r1.global-to-local, align 4
  %v5_10c3c = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_16178.459 to i32), i32 ptrtoint ([7 x i8]* @global_var_16178.459 to i32), i32 %v0_10c34)
  store i32 ptrtoint (i32* @global_var_16180.461 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16188.463 to i32), i32* %r1.global-to-local, align 4
  %v0_10c48 = load i32, i32* @r4, align 4
  store i32 %v0_10c48, i32* %r2.global-to-local, align 4
  %v4_10c4c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_16180.461 to i32), i32 ptrtoint ([7 x i8]* @global_var_16188.463 to i32), i32 %v0_10c48)
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16190.465 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10c5c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 ptrtoint ([9 x i8]* @global_var_16190.465 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1619c.467 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10c6c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 ptrtoint ([9 x i8]* @global_var_1619c.467 to i32), i32 8)
  %v0_10c70 = load i32, i32* @r4, align 4
  store i32 %v0_10c70, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_161a8.469 to i32), i32* %r1.global-to-local, align 4
  %v4_10c7c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_15cf0.190 to i32), i32 ptrtoint ([7 x i8]* @global_var_161a8.469 to i32), i32 %v0_10c70)
  store i32 ptrtoint (i32* @global_var_161b0.471 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_161bc.473 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_10c8c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_161b0.471 to i32), i32 ptrtoint ([5 x i8]* @global_var_161bc.473 to i32), i32 11)
  store i32 ptrtoint ([9 x i8]* @global_var_161c4.475 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161c4.475 to i32), i32* %r1.global-to-local, align 4
  %v5_10c9c = call i32 @function_fb30(i32 ptrtoint ([9 x i8]* @global_var_161c4.475 to i32), i32 ptrtoint ([9 x i8]* @global_var_161c4.475 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_161d0.477 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161d0.477 to i32), i32* %r1.global-to-local, align 4
  %v5_10cac = call i32 @function_fb30(i32 ptrtoint ([9 x i8]* @global_var_161d0.477 to i32), i32 ptrtoint ([9 x i8]* @global_var_161d0.477 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_161dc.479 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161dc.479 to i32), i32* %r1.global-to-local, align 4
  %v5_10cbc = call i32 @function_fb30(i32 ptrtoint ([9 x i8]* @global_var_161dc.479 to i32), i32 ptrtoint ([9 x i8]* @global_var_161dc.479 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_15ee0.296 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee0.296 to i32), i32* %r1.global-to-local, align 4
  %v3_10ccc = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_15ee0.296 to i32), i32 ptrtoint (i32* @global_var_15ee0.296 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_161e8.481 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161e8.481 to i32), i32* %r1.global-to-local, align 4
  %v3_10cdc = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_161e8.481 to i32), i32 ptrtoint (i32* @global_var_161e8.481 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_161f4.483 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161f4.483 to i32), i32* %r1.global-to-local, align 4
  %v5_10cec = call i32 @function_fb30(i32 ptrtoint ([9 x i8]* @global_var_161f4.483 to i32), i32 ptrtoint ([9 x i8]* @global_var_161f4.483 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_16200.485 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16200.485 to i32), i32* %r1.global-to-local, align 4
  %v5_10cfc = call i32 @function_fb30(i32 ptrtoint ([9 x i8]* @global_var_16200.485 to i32), i32 ptrtoint ([9 x i8]* @global_var_16200.485 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_1620c.487 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15de4.242 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10d0c = call i32 @function_fb30(i32 ptrtoint ([8 x i8]* @global_var_1620c.487 to i32), i32 ptrtoint ([11 x i8]* @global_var_15de4.242 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16214.489 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_10d1c = call i32 @function_fb30(i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), i32 ptrtoint (i32* @global_var_16214.489 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_160cc.414 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16224.491 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_10d2c = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_160cc.414 to i32), i32 ptrtoint (i32* @global_var_16224.491 to i32), i32 14)
  store i32 ptrtoint ([10 x i8]* @global_var_16234.493 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16240.495 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10d3c = call i32 @function_fb30(i32 ptrtoint ([10 x i8]* @global_var_16234.493 to i32), i32 ptrtoint (i32* @global_var_16240.495 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_1624c.497 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_16258.499 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10d4c = call i32 @function_fb30(i32 ptrtoint ([10 x i8]* @global_var_1624c.497 to i32), i32 ptrtoint ([11 x i8]* @global_var_16258.499 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_16264.501 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16020.376 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10d5c = call i32 @function_fb30(i32 ptrtoint ([10 x i8]* @global_var_16264.501 to i32), i32 ptrtoint (i32* @global_var_16020.376 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_16270.503 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16020.376 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10d6c = call i32 @function_fb30(i32 ptrtoint ([10 x i8]* @global_var_16270.503 to i32), i32 ptrtoint (i32* @global_var_16020.376 to i32), i32 10)
  store i32 ptrtoint (i32* @global_var_161b0.471 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1627c.505 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v3_10d7c = call i32 @function_fb30(i32 ptrtoint (i32* @global_var_161b0.471 to i32), i32 ptrtoint (i32* @global_var_1627c.505 to i32), i32 11)
  store i32 ptrtoint ([13 x i8]* @global_var_16288.507 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([13 x i8]* @global_var_16298.509 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10d8c = call i32 @function_fb30(i32 ptrtoint ([13 x i8]* @global_var_16288.507 to i32), i32 ptrtoint ([13 x i8]* @global_var_16298.509 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_162a8.511 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_162b0.513 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_10d9c = call i32 @function_fb30(i32 ptrtoint ([7 x i8]* @global_var_162a8.511 to i32), i32 ptrtoint (i32* @global_var_162b0.513 to i32), i32 13)
  store i32 ptrtoint ([9 x i8]* @global_var_162b8.515 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_162c4.517 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_10dac = call i32 @function_fb30(i32 ptrtoint ([9 x i8]* @global_var_162b8.515 to i32), i32 ptrtoint ([8 x i8]* @global_var_162c4.517 to i32), i32 15)
  store i32 ptrtoint ([12 x i8]* @global_var_162cc.519 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_162d8.521 to i32), i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_10dbc = call i32 @function_fb30(i32 ptrtoint ([12 x i8]* @global_var_162cc.519 to i32), i32 ptrtoint (i32* @global_var_162d8.521 to i32), i32 20)
  store i32 ptrtoint ([6 x i8]* @global_var_162e4.523 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_162d8.521 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_10dcc = call i32 @function_fb30(i32 ptrtoint ([6 x i8]* @global_var_162e4.523 to i32), i32 ptrtoint (i32* @global_var_162d8.521 to i32), i32 14)
  %v2_10dd4 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_10dd4, i32* %r0.global-to-local, align 4
  %v2_10dd8 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10dd8, i32* %r1.global-to-local, align 4
  %tmp285 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_10de4

dec_label_pc_10de4:                               ; preds = %dec_label_pc_1142c, %dec_label_pc_100fc
  %v0_11104 = phi i32 [ %v2_10dd4, %dec_label_pc_100fc ], [ %stack_var_-1872.1, %dec_label_pc_1142c ]
  %stack_var_-1868.0 = phi i8 [ %v5_100e4.le, %dec_label_pc_100fc ], [ %stack_var_-1868.1, %dec_label_pc_1142c ]
  %stack_var_-1876.0 = phi i8* [ %tmp285, %dec_label_pc_100fc ], [ %stack_var_-1876.1, %dec_label_pc_1142c ]
  store i32 ptrtoint (i32* @global_var_1f1f0.155 to i32), i32* %r2.global-to-local, align 4
  %v2_10de8 = load i32, i32* @global_var_1f1f0.155, align 4
  store i32 %v2_10de8, i32* %r8.global-to-local, align 4
  %v0_10dec = load i32, i32* @fp, align 4
  %v3_10dec = icmp uge i32 %v0_10dec, %v2_10de8
  store i1 %v3_10dec, i1* %cpsr_c.global-to-local, align 1
  %v9_10dec = icmp eq i32 %v0_10dec, %v2_10de8
  store i1 %v9_10dec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10dec, label %dec_label_pc_11094, label %dec_label_pc_10df4

dec_label_pc_10df4:                               ; preds = %dec_label_pc_10de4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_11068 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_10e00

dec_label_pc_10e00:                               ; preds = %.thread50.dec_label_pc_10e00_crit_edge, %dec_label_pc_10df4
  %v0_10e00 = phi i32 [ %v0_10e00.pre, %.thread50.dec_label_pc_10e00_crit_edge ], [ 0, %dec_label_pc_10df4 ]
  store i32 %v0_10e00, i32* %stack_var_-92, align 4
  %v0_10e10 = call i32 @function_f8c8()
  %v1_10e10 = trunc i32 %v0_10e10 to i8
  store i32 %v0_10e10, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f238.83 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), i32* %lr.global-to-local, align 4
  %v2_10e1c = load i32, i32* @global_var_1f238.83, align 4
  store i32 %v2_10e1c, i32* %r2.global-to-local, align 4
  %v2_10e20 = and i32 %v0_10e10, 128
  %v3_10e20 = icmp ne i32 %v2_10e20, 0
  store i1 %v3_10e20, i1* %cpsr_c.global-to-local, align 1
  %v4_10e20 = sdiv i32 %v0_10e10, 256
  store i32 %v4_10e20, i32* %r3.global-to-local, align 4
  %v1_10e24 = trunc i32 %v4_10e20 to i8
  store i8 %v1_10e24, i8* bitcast (i32* @global_var_1f1c5.178 to i8*), align 4
  store i32 %v2_10e1c, i32* @global_var_1f1cc.524, align 4
  store i8 %v1_10e10, i8* bitcast (i32* @global_var_1f1c4.182 to i8*), align 4
  br label %dec_label_pc_10e30

dec_label_pc_10e30:                               ; preds = %dec_label_pc_10f04, %dec_label_pc_10e60, %dec_label_pc_10f38, %dec_label_pc_10f2c, %dec_label_pc_10f20, %dec_label_pc_10f14, %.thread35, %bb304, %bb303, %bb302, %bb301, %bb300, %dec_label_pc_10efc, %dec_label_pc_10ef4, %bb296, %dec_label_pc_10ec4, %dec_label_pc_10ea0, %bb289, %dec_label_pc_10e70, %bb288, %dec_label_pc_10e58, %bb287, %bb306, %dec_label_pc_10e00
  %v0_10e30 = call i32 @function_f8c8()
  store i32 %v0_10e30, i32* %r0.global-to-local, align 4
  %v1_10e34 = urem i32 %v0_10e30, 256
  store i32 %v1_10e34, i32* %r1.global-to-local, align 4
  %v3_10e38 = udiv i32 %v0_10e30, 256
  store i32 %v3_10e38, i32* %r3.global-to-local, align 4
  %v3_10e3c = udiv i32 %v0_10e30, 65536
  store i32 %v3_10e3c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e40 = icmp eq i32 %v1_10e34, 0
  store i1 %v2_10e40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e40, label %bb287, label %bb286

bb286:                                            ; preds = %dec_label_pc_10e30
  %v3_10e44 = icmp ugt i32 %v1_10e34, 126
  store i1 %v3_10e44, i1* %cpsr_c.global-to-local, align 1
  %v8_10e44 = icmp eq i32 %v1_10e34, 127
  store i1 %v8_10e44, i1* %cpsr_z.global-to-local, align 1
  br label %bb287

bb287:                                            ; preds = %dec_label_pc_10e30, %bb286
  %v0_10e54 = phi i1 [ true, %dec_label_pc_10e30 ], [ %v8_10e44, %bb286 ]
  %v1_10e48 = urem i32 %v3_10e38, 256
  store i32 %v1_10e48, i32* %ip.global-to-local, align 4
  %v1_10e4c = urem i32 %v3_10e3c, 256
  store i32 %v1_10e4c, i32* %r2.global-to-local, align 4
  %v1_10e50 = and i32 %v0_10e30, 8388608
  %v2_10e50 = icmp ne i32 %v1_10e50, 0
  store i1 %v2_10e50, i1* %cpsr_c.global-to-local, align 1
  %v3_10e50 = udiv i32 %v0_10e30, 16777216
  store i32 %v3_10e50, i32* %r0.global-to-local, align 4
  br i1 %v0_10e54, label %dec_label_pc_10e30, label %dec_label_pc_10e58

dec_label_pc_10e58:                               ; preds = %bb287
  %v2_10e58 = icmp ugt i32 %v1_10e34, 2
  store i1 %v2_10e58, i1* %cpsr_c.global-to-local, align 1
  %v7_10e58 = icmp eq i32 %v1_10e34, 3
  store i1 %v7_10e58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e58, label %dec_label_pc_10e30, label %dec_label_pc_10e60

dec_label_pc_10e60:                               ; preds = %dec_label_pc_10e58
  %v1_10e60 = add nsw i32 %v1_10e34, -15
  store i32 %v1_10e60, i32* %r3.global-to-local, align 4
  %v2_10e64 = icmp ugt i32 %v1_10e34, 55
  store i1 %v2_10e64, i1* %cpsr_c.global-to-local, align 1
  %v7_10e64 = icmp eq i32 %v1_10e34, 56
  store i1 %v7_10e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e64, label %dec_label_pc_10e30, label %bb288

bb288:                                            ; preds = %dec_label_pc_10e60
  %v3_10e68 = icmp ne i32 %v1_10e60, 0
  store i1 %v3_10e68, i1* %cpsr_c.global-to-local, align 1
  %v8_10e68 = icmp eq i32 %v1_10e60, 1
  store i1 %v8_10e68, i1* %cpsr_z.global-to-local, align 1
  %v2_10e6c = xor i1 %v3_10e68, true
  %v3_10e6c = or i1 %v8_10e68, %v2_10e6c
  br i1 %v3_10e6c, label %dec_label_pc_10e30, label %dec_label_pc_10e70

dec_label_pc_10e70:                               ; preds = %bb288
  %v2_10e70 = icmp ugt i32 %v1_10e34, 9
  store i1 %v2_10e70, i1* %cpsr_c.global-to-local, align 1
  %v7_10e70 = icmp eq i32 %v1_10e34, 10
  store i1 %v7_10e70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e70, label %dec_label_pc_10e30, label %dec_label_pc_10e78

dec_label_pc_10e78:                               ; preds = %dec_label_pc_10e70
  %v2_10e78 = icmp ugt i32 %v1_10e34, 191
  store i1 %v2_10e78, i1* %cpsr_c.global-to-local, align 1
  %v7_10e78 = icmp eq i32 %v1_10e34, 192
  store i1 %v7_10e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e78, label %bb289, label %dec_label_pc_10e84

bb289:                                            ; preds = %dec_label_pc_10e78
  %v3_10e7c = icmp ugt i32 %v1_10e48, 167
  store i1 %v3_10e7c, i1* %cpsr_c.global-to-local, align 1
  %v8_10e7c = icmp eq i32 %v1_10e48, 168
  store i1 %v8_10e7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e7c, label %dec_label_pc_10e30, label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %dec_label_pc_10e78, %bb289
  %v7_10e84 = icmp eq i32 %v1_10e34, 172
  %.354 = zext i1 %v7_10e84 to i32
  store i32 %.354, i32* %r3.global-to-local, align 4
  %v2_10e90 = icmp ugt i32 %v1_10e48, 14
  store i1 %v2_10e90, i1* %cpsr_c.global-to-local, align 1
  %v7_10e90 = icmp eq i32 %v1_10e48, 15
  store i1 %v7_10e90, i1* %cpsr_z.global-to-local, align 1
  %v2_10e94 = xor i1 %v2_10e90, true
  %v3_10e94 = or i1 %v7_10e90, %v2_10e94
  br i1 %v3_10e94, label %.thread13, label %bb292

.thread13:                                        ; preds = %dec_label_pc_10e84
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ea8

bb292:                                            ; preds = %dec_label_pc_10e84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e98 = icmp eq i1 %v7_10e84, false
  store i1 %v2_10e98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e98, label %dec_label_pc_10ea8, label %dec_label_pc_10ea0

dec_label_pc_10ea0:                               ; preds = %bb292
  %v2_10ea0 = icmp ugt i32 %v1_10e48, 30
  store i1 %v2_10ea0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ea0 = icmp eq i32 %v1_10e48, 31
  store i1 %v7_10ea0, i1* %cpsr_z.global-to-local, align 1
  %v2_10ea4 = xor i1 %v2_10ea0, true
  %v3_10ea4 = or i1 %v7_10ea0, %v2_10ea4
  br i1 %v3_10ea4, label %dec_label_pc_10e30, label %dec_label_pc_10ea8

dec_label_pc_10ea8:                               ; preds = %.thread13, %dec_label_pc_10ea0, %bb292
  %v7_10ea8 = icmp eq i32 %v1_10e34, 100
  %.355 = zext i1 %v7_10ea8 to i32
  store i32 %.355, i32* %r3.global-to-local, align 4
  %v2_10eb4 = icmp ugt i32 %v1_10e48, 62
  store i1 %v2_10eb4, i1* %cpsr_c.global-to-local, align 1
  %v7_10eb4 = icmp eq i32 %v1_10e48, 63
  store i1 %v7_10eb4, i1* %cpsr_z.global-to-local, align 1
  %v2_10eb8 = xor i1 %v2_10eb4, true
  %v3_10eb8 = or i1 %v7_10eb4, %v2_10eb8
  br i1 %v3_10eb8, label %.thread18, label %bb295

.thread18:                                        ; preds = %dec_label_pc_10ea8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ecc

bb295:                                            ; preds = %dec_label_pc_10ea8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ebc = icmp eq i1 %v7_10ea8, false
  store i1 %v2_10ebc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ebc, label %dec_label_pc_10ecc, label %dec_label_pc_10ec4

dec_label_pc_10ec4:                               ; preds = %bb295
  %v2_10ec4 = icmp ugt i32 %v1_10e48, 125
  store i1 %v2_10ec4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ec4 = icmp eq i32 %v1_10e48, 126
  store i1 %v7_10ec4, i1* %cpsr_z.global-to-local, align 1
  %v2_10ec8 = xor i1 %v2_10ec4, true
  %v3_10ec8 = or i1 %v7_10ec4, %v2_10ec8
  br i1 %v3_10ec8, label %dec_label_pc_10e30, label %dec_label_pc_10ecc

dec_label_pc_10ecc:                               ; preds = %.thread18, %dec_label_pc_10ec4, %bb295
  %v2_10ecc = icmp ugt i32 %v1_10e34, 168
  store i1 %v2_10ecc, i1* %cpsr_c.global-to-local, align 1
  %v7_10ecc = icmp eq i32 %v1_10e34, 169
  store i1 %v7_10ecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ecc, label %bb296, label %dec_label_pc_10ed8

bb296:                                            ; preds = %dec_label_pc_10ecc
  %v3_10ed0 = icmp eq i32 %v1_10e48, 255
  store i1 %v3_10ed0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10ed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10ed0, label %dec_label_pc_10e30, label %dec_label_pc_10ed8

dec_label_pc_10ed8:                               ; preds = %dec_label_pc_10ecc, %bb296
  %v7_10ed8 = icmp eq i32 %v1_10e34, 198
  %.356 = zext i1 %v7_10ed8 to i32
  store i32 %.356, i32* %r3.global-to-local, align 4
  %v2_10ee4 = icmp ugt i32 %v1_10e48, 16
  store i1 %v2_10ee4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ee4 = icmp eq i32 %v1_10e48, 17
  store i1 %v7_10ee4, i1* %cpsr_z.global-to-local, align 1
  %v2_10ee8 = xor i1 %v2_10ee4, true
  %v3_10ee8 = or i1 %v7_10ee4, %v2_10ee8
  br i1 %v3_10ee8, label %.thread24, label %bb299

.thread24:                                        ; preds = %dec_label_pc_10ed8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10efc

bb299:                                            ; preds = %dec_label_pc_10ed8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10eec = icmp eq i1 %v7_10ed8, false
  store i1 %v2_10eec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10eec, label %dec_label_pc_10efc, label %dec_label_pc_10ef4

dec_label_pc_10ef4:                               ; preds = %bb299
  %v2_10ef4 = icmp ugt i32 %v1_10e48, 18
  store i1 %v2_10ef4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ef4 = icmp eq i32 %v1_10e48, 19
  store i1 %v7_10ef4, i1* %cpsr_z.global-to-local, align 1
  %v2_10ef8 = xor i1 %v2_10ef4, true
  %v3_10ef8 = or i1 %v7_10ef4, %v2_10ef8
  br i1 %v3_10ef8, label %dec_label_pc_10e30, label %dec_label_pc_10efc

dec_label_pc_10efc:                               ; preds = %.thread24, %dec_label_pc_10ef4, %bb299
  %v2_10efc = icmp ugt i32 %v1_10e34, 222
  store i1 %v2_10efc, i1* %cpsr_c.global-to-local, align 1
  %v7_10efc = icmp eq i32 %v1_10e34, 223
  store i1 %v7_10efc, i1* %cpsr_z.global-to-local, align 1
  %v2_10f00 = xor i1 %v7_10efc, true
  %v3_10f00 = and i1 %v2_10efc, %v2_10f00
  br i1 %v3_10f00, label %dec_label_pc_10e30, label %dec_label_pc_10f04

dec_label_pc_10f04:                               ; preds = %dec_label_pc_10efc
  %v1_10f04 = add nsw i32 %v1_10e34, -6
  store i32 %v1_10f04, i32* %r3.global-to-local, align 4
  %v2_10f08 = icmp ugt i32 %v1_10e34, 10
  store i1 %v2_10f08, i1* %cpsr_c.global-to-local, align 1
  %v7_10f08 = icmp eq i32 %v1_10e34, 11
  store i1 %v7_10f08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f08, label %dec_label_pc_10e30, label %bb300

bb300:                                            ; preds = %dec_label_pc_10f04
  %v3_10f0c = icmp ne i32 %v1_10f04, 0
  store i1 %v3_10f0c, i1* %cpsr_c.global-to-local, align 1
  %v8_10f0c = icmp eq i32 %v1_10f04, 1
  store i1 %v8_10f0c, i1* %cpsr_z.global-to-local, align 1
  %v2_10f10 = xor i1 %v3_10f0c, true
  %v3_10f10 = or i1 %v8_10f0c, %v2_10f10
  br i1 %v3_10f10, label %dec_label_pc_10e30, label %dec_label_pc_10f14

dec_label_pc_10f14:                               ; preds = %bb300
  %v2_10f14 = icmp ugt i32 %v1_10e34, 21
  store i1 %v2_10f14, i1* %cpsr_c.global-to-local, align 1
  %v7_10f14 = icmp eq i32 %v1_10e34, 22
  store i1 %v7_10f14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f14, label %dec_label_pc_10e30, label %bb301

bb301:                                            ; preds = %dec_label_pc_10f14
  %v3_10f18 = icmp ugt i32 %v1_10e34, 20
  store i1 %v3_10f18, i1* %cpsr_c.global-to-local, align 1
  %v8_10f18 = icmp eq i32 %v1_10e34, 21
  store i1 %v8_10f18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f18, label %dec_label_pc_10e30, label %dec_label_pc_10f20

dec_label_pc_10f20:                               ; preds = %bb301
  %v2_10f20 = icmp ugt i32 %v1_10e34, 27
  store i1 %v2_10f20, i1* %cpsr_c.global-to-local, align 1
  %v7_10f20 = icmp eq i32 %v1_10e34, 28
  store i1 %v7_10f20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f20, label %dec_label_pc_10e30, label %bb302

bb302:                                            ; preds = %dec_label_pc_10f20
  %v3_10f24 = icmp ugt i32 %v1_10e34, 25
  store i1 %v3_10f24, i1* %cpsr_c.global-to-local, align 1
  %v8_10f24 = icmp eq i32 %v1_10e34, 26
  store i1 %v8_10f24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f24, label %dec_label_pc_10e30, label %dec_label_pc_10f2c

dec_label_pc_10f2c:                               ; preds = %bb302
  %v2_10f2c = icmp ugt i32 %v1_10e34, 29
  store i1 %v2_10f2c, i1* %cpsr_c.global-to-local, align 1
  %v7_10f2c = icmp eq i32 %v1_10e34, 30
  store i1 %v7_10f2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f2c, label %dec_label_pc_10e30, label %bb303

bb303:                                            ; preds = %dec_label_pc_10f2c
  %v3_10f30 = icmp ugt i32 %v1_10e34, 28
  store i1 %v3_10f30, i1* %cpsr_c.global-to-local, align 1
  %v8_10f30 = icmp eq i32 %v1_10e34, 29
  store i1 %v8_10f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f30, label %dec_label_pc_10e30, label %dec_label_pc_10f38

dec_label_pc_10f38:                               ; preds = %bb303
  %v2_10f38 = icmp ugt i32 %v1_10e34, 54
  store i1 %v2_10f38, i1* %cpsr_c.global-to-local, align 1
  %v7_10f38 = icmp eq i32 %v1_10e34, 55
  store i1 %v7_10f38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f38, label %dec_label_pc_10e30, label %bb304

bb304:                                            ; preds = %dec_label_pc_10f38
  %v3_10f3c = icmp ugt i32 %v1_10e34, 32
  store i1 %v3_10f3c, i1* %cpsr_c.global-to-local, align 1
  %v8_10f3c = icmp eq i32 %v1_10e34, 33
  store i1 %v8_10f3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f3c, label %dec_label_pc_10e30, label %dec_label_pc_10f44

dec_label_pc_10f44:                               ; preds = %bb304
  %v2_10f44 = icmp ugt i32 %v1_10e34, 214
  store i1 %v2_10f44, i1* %cpsr_c.global-to-local, align 1
  %v7_10f44 = icmp eq i32 %v1_10e34, 215
  store i1 %v7_10f44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f44, label %.thread35, label %bb305

bb305:                                            ; preds = %dec_label_pc_10f44
  %v3_10f48 = icmp ugt i32 %v1_10e34, 213
  store i1 %v3_10f48, i1* %cpsr_c.global-to-local, align 1
  %v8_10f48 = icmp eq i32 %v1_10e34, 214
  store i1 %v8_10f48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f48, label %bb306, label %dec_label_pc_10f58

.thread35:                                        ; preds = %dec_label_pc_10f44
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e30

bb306:                                            ; preds = %bb305
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e30

dec_label_pc_10f58:                               ; preds = %bb305
  store i32 0, i32* @r4, align 4
  %v5_10f64 = call i32 @llvm.bswap.i32(i32 %v0_10e30)
  store i32 %v5_10f64, i32* %r3.global-to-local, align 4
  %tmp307 = and i32 %v0_10e30, 65280
  %tmp308 = call i32 @llvm.bswap.i32(i32 %tmp307)
  %v1_10f6c = and i32 %v5_10f64, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_10f70 = mul nuw i32 %v3_10e50, 16777216
  %v3_10f74 = udiv i32 %tmp308, 256
  %v4_10f78 = mul i32 %v1_10f6c, 256
  %tmp309 = and i32 %v0_10e30, 32768
  %v3_10f7c = icmp ne i32 %tmp309, 0
  store i1 %v3_10f7c, i1* %cpsr_c.global-to-local, align 1
  %v4_10f7c = udiv i32 %v5_10f64, 16777216
  store i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), i32* @r0, align 4
  %v5_10f7c = or i32 %v4_10f7c, %v3_10f70
  %v5_10f78 = or i32 %v5_10f7c, %v4_10f78
  %v2_10f84 = or i32 %v5_10f78, %v3_10f74
  store i32 %v2_10f84, i32* %r2.global-to-local, align 4
  %v5_10f88 = trunc i32 %v4_10f7c to i8
  store i8 %v5_10f88, i8* @global_var_1f1d0.525, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1f1ca.526 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1f1cb.527 to i8*), align 4
  %v3_10f98 = call i32 @function_e498(i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), i32* %ip.global-to-local, align 4
  %sext9 = mul i32 %v3_10f98, 16777216
  %v1_10fa0 = sdiv i32 %sext9, 16777216
  store i32 %v1_10fa0, i32* %r3.global-to-local, align 4
  %v2_10fa4 = and i32 %v1_10fa0, 128
  %v3_10fa4 = icmp ne i32 %v2_10fa4, 0
  store i1 %v3_10fa4, i1* %cpsr_c.global-to-local, align 1
  %v4_10fa4 = ashr i32 %sext9, 31
  store i32 %v4_10fa4, i32* %r2.global-to-local, align 4
  %v1_10fa8 = trunc i32 %v1_10fa0 to i8
  store i8 %v1_10fa8, i8* bitcast (i32* @global_var_1f1ca.526 to i8*), align 4
  %v1_10fac = trunc i32 %v4_10fa4 to i8
  store i8 %v1_10fac, i8* bitcast (i32* @global_var_1f1cb.527 to i8*), align 4
  %v3_10fb0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10fb0, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_10fb8 = call i32 @function_13424(i32 %v3_10fb0, i32 10, i32 %v4_10fa4, i32 %v1_10fa0)
  store i32 %v4_10fb8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10fbc = icmp eq i32 %v4_10fb8, 0
  store i1 %v2_10fbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fbc, label %.thread217, label %bb310

.thread217:                                       ; preds = %dec_label_pc_10f58
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* @lr, align 4
  br label %.thread45.thread88

bb310:                                            ; preds = %dec_label_pc_10f58
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_10fcc = load i32, i32* @r4, align 4
  %v2_10fcc = trunc i32 %v1_10fcc to i8
  store i8 %v2_10fcc, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32 2) to i8*), align 2
  %v0_10fd0.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10fd0.pr.pre, label %.thread45.thread88, label %.thread42

.thread42:                                        ; preds = %bb310
  %v1_10fd0 = load i32, i32* %r3.global-to-local, align 4
  %v2_10fd0 = trunc i32 %v1_10fd0 to i8
  %v3_10fd0 = load i32, i32* %r0.global-to-local, align 4
  %v4_10fd0 = add i32 %v3_10fd0, 3
  %v5_10fd0 = inttoptr i32 %v4_10fd0 to i8*
  store i8 %v2_10fd0, i8* %v5_10fd0, align 1
  %v0_10fd8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_10fd8.pr.pr, label %.thread48, label %.thread50

.thread45.thread88:                               ; preds = %bb310, %.thread217
  store i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), i32* %r0.global-to-local, align 4
  br label %.thread48

.thread48:                                        ; preds = %.thread42, %.thread45.thread88
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_10fe0 = load i32, i32* @lr, align 4
  %v4_10fe0 = add i32 %v3_10fe0, 2
  %v5_10fe0 = inttoptr i32 %v4_10fe0 to i8*
  store i8 9, i8* %v5_10fe0, align 1
  %v0_10fe4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10fe4.pr.pr, label %bb311, label %.thread50

bb311:                                            ; preds = %.thread48
  %v1_10fe4 = load i32, i32* %r2.global-to-local, align 4
  %v2_10fe4 = trunc i32 %v1_10fe4 to i8
  %v3_10fe4 = load i32, i32* @lr, align 4
  %v4_10fe4 = add i32 %v3_10fe4, 3
  %v5_10fe4 = inttoptr i32 %v4_10fe4 to i8*
  store i8 %v2_10fe4, i8* %v5_10fe4, align 1
  br label %.thread50

.thread50:                                        ; preds = %.thread42, %.thread48, %bb311
  %v4_10fe8 = load i8, i8* @global_var_1f1d0.525, align 1
  %v5_10fe8 = sext i8 %v4_10fe8 to i32
  store i32 %v5_10fe8, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* @r1, align 4
  store i8 %v4_10fe8, i8* @global_var_1f1d8.529, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_11000 = load i32, i32* %sl.global-to-local, align 4
  %v1_11000 = trunc i32 %v0_11000 to i8
  store i8 %v1_11000, i8* bitcast (i32* @global_var_1f1e4.530 to i8*), align 4
  store i8 %v1_11000, i8* bitcast (i32* @global_var_1f1e5.531 to i8*), align 4
  %v5_11008 = call i32 @function_e4f4(i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_11008, 16777216
  %v1_11010 = sdiv i32 %sext, 16777216
  %v3_11018 = ashr i32 %sext, 31
  %v2_1101c = load i32, i32* @global_var_1f1d4.175, align 4
  %v1_11024 = trunc i32 %v3_11018 to i8
  store i8 %v1_11024, i8* bitcast (i32* @global_var_1f1e5.531 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_11038 = load i8, i8* @global_var_1f1d0.525, align 1
  %v4_11038 = sext i8 %v3_11038 to i32
  store i32 %v4_11038, i32* @r4, align 4
  %v2_1103c = load i32, i32* @global_var_1f254.169, align 4
  store i32 %v2_1103c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* %ip.global-to-local, align 4
  %v1_1104c = and i32 %v2_1101c, 8388608
  %v2_1104c = icmp ne i32 %v1_1104c, 0
  store i1 %v2_1104c, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_11060 = trunc i32 %v1_11010 to i8
  store i8 %v1_11060, i8* bitcast (i32* @global_var_1f1e4.530 to i8*), align 4
  store i32 %v2_11068, i32* %lr.global-to-local, align 4
  %v8_11078 = call i32 @function_13e58(i32 %v2_1103c, i32* bitcast (i8** @global_var_1f1c0.171 to i32*), i32 40, i32 16384, i32 %v2_11068, i32 16)
  store i32 %v8_11078, i32* %r0.global-to-local, align 4
  %v3_1107c = load i32, i32* %stack_var_-48, align 4
  %v1_11080 = add i32 %v3_1107c, 1
  store i32 %v1_11080, i32* %r3.global-to-local, align 4
  %v3_11084 = icmp ugt i32 %v1_11080, 383
  store i1 %v3_11084, i1* %cpsr_c.global-to-local, align 1
  %v8_11084 = icmp eq i32 %v1_11080, 384
  store i1 %v8_11084, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11080, i32* %stack_var_-48, align 4
  %v5_1108c = icmp slt i32 %v1_11080, 384
  br i1 %v5_1108c, label %.thread50.dec_label_pc_10e00_crit_edge, label %dec_label_pc_11090

.thread50.dec_label_pc_10e00_crit_edge:           ; preds = %.thread50
  %v0_10e00.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10e00

dec_label_pc_11090:                               ; preds = %.thread50
  %v0_11090 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11090, i32* @fp, align 4
  br label %dec_label_pc_11094

dec_label_pc_11094:                               ; preds = %dec_label_pc_10de4, %dec_label_pc_11090
  %v0_11094 = call i32 @function_13b78()
  store i32 %v0_11094, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v0_11094, i32* @sb, align 4
  %v6_110cc = inttoptr i32 %v0_11104 to i32*
  %v1_110f4 = add i32 %v0_11104, 16
  %v2_110f4 = inttoptr i32 %v1_110f4 to i32*
  %v4_11110 = ptrtoint i8* %stack_var_-1876.0 to i32
  %v1_11118 = add i32 %v4_11110, 1
  %v2_11118 = inttoptr i32 %v1_11118 to i8*
  %v1_1113c = add i32 %v4_11110, 2
  %v2_1113c = inttoptr i32 %v1_1113c to i8*
  %v1_11140 = add i32 %v4_11110, 3
  %v2_11140 = inttoptr i32 %v1_11140 to i8*
  %v4_11144 = sext i8 %stack_var_-1868.0 to i32
  %v1_11158 = add i32 %v4_11110, 13
  %v2_11158 = inttoptr i32 %v1_11158 to i8*
  %v1_11224 = bitcast i8* %stack_var_-1876.0 to i32*
  %v1_11104 = add i32 %v0_11104, 9
  %v2_11104 = inttoptr i32 %v1_11104 to i8*
  %v1_1117c = add i32 %v4_11110, 8
  %v2_1117c = inttoptr i32 %v1_1117c to i32*
  %v1_111bc = add i32 %v0_11104, 12
  %v2_111bc = inttoptr i32 %v1_111bc to i32*
  br label %dec_label_pc_110a0

dec_label_pc_110a0:                               ; preds = %dec_label_pc_1117c, %dec_label_pc_11174, %dec_label_pc_1116c, %dec_label_pc_11138, %dec_label_pc_11128, %dec_label_pc_11104, %dec_label_pc_110ec, %dec_label_pc_11164, %dec_label_pc_11154, %dec_label_pc_110e4, %dec_label_pc_1121c, %dec_label_pc_11094
  %v1_110a4 = phi i32 [ %v0_11094, %dec_label_pc_11094 ], [ %v1_110a4.pre.pre, %dec_label_pc_1121c ], [ %v0_110d8, %dec_label_pc_110e4 ], [ %v0_110d8, %dec_label_pc_11154 ], [ %v0_110d8, %dec_label_pc_11164 ], [ %v0_110d8, %dec_label_pc_110ec ], [ %v0_110d8, %dec_label_pc_11104 ], [ %v0_110d8, %dec_label_pc_11128 ], [ %v0_110d8, %dec_label_pc_11138 ], [ %v0_110d8, %dec_label_pc_1116c ], [ %v0_110d8, %dec_label_pc_11174 ], [ %v0_110d8, %dec_label_pc_1117c ]
  %v2_110a4 = inttoptr i32 %v1_110a4 to i32*
  store i32 0, i32* %v2_110a4, align 4
  %v2_110b0 = load i32, i32* @global_var_1f254.169, align 4
  store i32 %v2_110b0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_11104, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_110cc = call i32 @function_13df8(i32 %v2_110b0, i32* %v6_110cc, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_110cc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_110d0 = icmp eq i32 %v7_110cc, 0
  store i1 %v2_110d0, i1* %cpsr_z.global-to-local, align 1
  %tmp312 = icmp slt i32 %v7_110cc, 1
  br i1 %tmp312, label %dec_label_pc_11250, label %dec_label_pc_110d8

dec_label_pc_110d8:                               ; preds = %dec_label_pc_110a0
  %v0_110d8 = load i32, i32* @sb, align 4
  %v1_110d8 = inttoptr i32 %v0_110d8 to i32*
  %v2_110d8 = load i32, i32* %v1_110d8, align 4
  store i32 %v2_110d8, i32* %r3.global-to-local, align 4
  %v2_110dc = icmp ugt i32 %v2_110d8, 10
  store i1 %v2_110dc, i1* %cpsr_c.global-to-local, align 1
  %v7_110dc = icmp eq i32 %v2_110d8, 11
  store i1 %v7_110dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_110dc, label %dec_label_pc_11250, label %dec_label_pc_110e4

dec_label_pc_110e4:                               ; preds = %dec_label_pc_110d8
  %v2_110e4 = icmp ugt i32 %v7_110cc, 38
  store i1 %v2_110e4, i1* %cpsr_c.global-to-local, align 1
  %v7_110e4 = icmp eq i32 %v7_110cc, 39
  store i1 %v7_110e4, i1* %cpsr_z.global-to-local, align 1
  %v2_110e8 = xor i1 %v2_110e4, true
  %v3_110e8 = or i1 %v7_110e4, %v2_110e8
  br i1 %v3_110e8, label %dec_label_pc_110a0, label %dec_label_pc_110ec

dec_label_pc_110ec:                               ; preds = %dec_label_pc_110e4
  store i32 %v0_11104, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f238.83 to i32), i32* %r0.global-to-local, align 4
  %v3_110f4 = load i32, i32* %v2_110f4, align 4
  store i32 %v3_110f4, i32* %r2.global-to-local, align 4
  %v2_110f8 = load i32, i32* @global_var_1f238.83, align 4
  store i32 %v2_110f8, i32* %r3.global-to-local, align 4
  %v3_110fc = icmp uge i32 %v3_110f4, %v2_110f8
  store i1 %v3_110fc, i1* %cpsr_c.global-to-local, align 1
  %v9_110fc = icmp eq i32 %v3_110f4, %v2_110f8
  store i1 %v9_110fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_110fc, label %dec_label_pc_11104, label %dec_label_pc_110a0

dec_label_pc_11104:                               ; preds = %dec_label_pc_110ec
  %v3_11104 = load i8, i8* %v2_11104, align 1
  %v4_11104 = zext i8 %v3_11104 to i32
  store i32 %v4_11104, i32* %r3.global-to-local, align 4
  %v2_11108 = icmp ugt i8 %v3_11104, 5
  store i1 %v2_11108, i1* %cpsr_c.global-to-local, align 1
  %v7_11108 = icmp eq i8 %v3_11104, 6
  store i1 %v7_11108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11108, label %dec_label_pc_11110, label %dec_label_pc_110a0

dec_label_pc_11110:                               ; preds = %dec_label_pc_11104
  store i32 %v4_11110, i32* %r1.global-to-local, align 4
  %v2_11114 = load i8, i8* %stack_var_-1876.0, align 1
  %v3_11114 = zext i8 %v2_11114 to i32
  store i32 %v3_11114, i32* %r2.global-to-local, align 4
  %v3_11118 = load i8, i8* %v2_11118, align 1
  %v4_11118 = zext i8 %v3_11118 to i32
  store i32 %v4_11118, i32* %r3.global-to-local, align 4
  %v4_1111c = mul nuw nsw i32 %v4_11118, 256
  %v5_1111c = or i32 %v4_1111c, %v3_11114
  store i32 %v5_1111c, i32* %r2.global-to-local, align 4
  %v2_11120 = icmp ugt i32 %v5_1111c, 5887
  store i1 %v2_11120, i1* %cpsr_c.global-to-local, align 1
  %v7_11120 = icmp eq i32 %v5_1111c, 5888
  store i1 %v7_11120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11120, label %dec_label_pc_11138, label %dec_label_pc_11128

dec_label_pc_11128:                               ; preds = %dec_label_pc_11110
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_11130 = icmp ugt i32 %v5_1111c, 4872
  store i1 %v3_11130, i1* %cpsr_c.global-to-local, align 1
  %v9_11130 = icmp eq i32 %v5_1111c, 4873
  store i1 %v9_11130, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11130, label %dec_label_pc_11138, label %dec_label_pc_110a0

dec_label_pc_11138:                               ; preds = %dec_label_pc_11128, %dec_label_pc_11110
  store i32 %v4_11110, i32* %r2.global-to-local, align 4
  %v3_1113c = load i8, i8* %v2_1113c, align 1
  %v4_1113c = zext i8 %v3_1113c to i32
  store i32 %v4_1113c, i32* %r3.global-to-local, align 4
  %v3_11140 = load i8, i8* %v2_11140, align 1
  %v4_11140 = zext i8 %v3_11140 to i32
  store i32 %v4_11140, i32* %r2.global-to-local, align 4
  store i32 %v4_11144, i32* %ip.global-to-local, align 4
  %v4_11148 = mul nuw nsw i32 %v4_11140, 256
  %v5_11148 = or i32 %v4_11148, %v4_1113c
  store i32 %v5_11148, i32* %r3.global-to-local, align 4
  %v3_1114c = icmp uge i32 %v5_11148, %v4_11144
  store i1 %v3_1114c, i1* %cpsr_c.global-to-local, align 1
  %v9_1114c = icmp eq i32 %v5_11148, %v4_11144
  store i1 %v9_1114c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1114c, label %dec_label_pc_11154, label %dec_label_pc_110a0

dec_label_pc_11154:                               ; preds = %dec_label_pc_11138
  store i32 %v4_11110, i32* %lr.global-to-local, align 4
  %v3_11158 = load i8, i8* %v2_11158, align 1
  %v4_11158 = zext i8 %v3_11158 to i32
  store i32 %v4_11158, i32* %r3.global-to-local, align 4
  %v1_1115c = and i32 %v4_11158, 2
  %v2_1115c = icmp eq i32 %v1_1115c, 0
  store i1 %v2_1115c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1115c, label %dec_label_pc_110a0, label %dec_label_pc_11164

dec_label_pc_11164:                               ; preds = %dec_label_pc_11154
  %v1_11164 = and i32 %v4_11158, 16
  %v2_11164 = icmp eq i32 %v1_11164, 0
  store i1 %v2_11164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11164, label %dec_label_pc_110a0, label %dec_label_pc_1116c

dec_label_pc_1116c:                               ; preds = %dec_label_pc_11164
  %v1_1116c = and i32 %v4_11158, 4
  %v2_1116c = icmp eq i32 %v1_1116c, 0
  store i1 %v2_1116c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1116c, label %dec_label_pc_11174, label %dec_label_pc_110a0

dec_label_pc_11174:                               ; preds = %dec_label_pc_1116c
  %tmp459 = urem i8 %v3_11158, 2
  %v2_11174 = icmp eq i8 %tmp459, 0
  store i1 %v2_11174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11174, label %dec_label_pc_1117c, label %dec_label_pc_110a0

dec_label_pc_1117c:                               ; preds = %dec_label_pc_11174
  %v3_1117c = load i32, i32* %v2_1117c, align 4
  %v1_11184 = and i32 %v3_1117c, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_11188 = mul i32 %v3_1117c, 16777216
  %v1_11180 = udiv i32 %v3_1117c, 256
  %v3_1118c = and i32 %v1_11180, 65280
  %v4_11190 = mul i32 %v1_11184, 256
  %v4_11194 = udiv i32 %v3_1117c, 16777216
  %v5_11194 = or i32 %v4_11194, %v3_11188
  %v5_11190 = or i32 %v5_11194, %v4_11190
  %v2_11198 = or i32 %v5_11190, %v3_1118c
  %v1_1119c = add i32 %v2_11198, -1
  %v1_111a0 = udiv i32 %v1_1119c, 256
  %v3_111a4 = and i32 %v1_111a0, 65280
  %v1_111a8 = and i32 %v1_1119c, 65280
  store i32 %v1_111a8, i32* %r2.global-to-local, align 4
  %v3_111ac = mul i32 %v1_1119c, 16777216
  %v4_111b0 = udiv i32 %v1_1119c, 16777216
  %v5_111b0 = or i32 %v3_111a4, %v4_111b0
  store i32 %v5_111b0, i32* %r1.global-to-local, align 4
  store i32 %v0_11104, i32* %r3.global-to-local, align 4
  %v4_111b8 = mul nuw nsw i32 %v1_111a8, 256
  %v5_111b8 = or i32 %v4_111b8, %v3_111ac
  store i32 %v5_111b8, i32* %r0.global-to-local, align 4
  %v3_111bc = load i32, i32* %v2_111bc, align 4
  store i32 %v3_111bc, i32* %r2.global-to-local, align 4
  %v2_111c0 = call i32 @llvm.bswap.i32(i32 %v1_1119c)
  store i32 %v2_111c0, i32* %ip.global-to-local, align 4
  %v3_111c4 = icmp uge i32 %v2_111c0, %v3_111bc
  store i1 %v3_111c4, i1* %cpsr_c.global-to-local, align 1
  %v9_111c4 = icmp eq i32 %v2_111c0, %v3_111bc
  store i1 %v9_111c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_111c4, label %dec_label_pc_111cc, label %dec_label_pc_110a0

dec_label_pc_111cc:                               ; preds = %dec_label_pc_1117c
  %v0_111cc = load i32, i32* @r4, align 4
  %v2_111cc = icmp ugt i32 %v0_111cc, 254
  store i1 %v2_111cc, i1* %cpsr_c.global-to-local, align 1
  %v7_111cc = icmp eq i32 %v0_111cc, 255
  store i1 %v7_111cc, i1* %cpsr_z.global-to-local, align 1
  %v8_111d0 = icmp sgt i32 %v0_111cc, 255
  br i1 %v8_111d0, label %dec_label_pc_11250, label %dec_label_pc_111d4

dec_label_pc_111d4:                               ; preds = %dec_label_pc_111cc
  store i32 ptrtoint (i32* @global_var_1f250.167 to i32), i32* %lr.global-to-local, align 4
  %v3_111d8 = mul i32 %v0_111cc, 256
  store i32 %v3_111d8, i32* %r2.global-to-local, align 4
  %v2_111dc = load i32, i32* @global_var_1f250.167, align 4
  store i32 %v2_111dc, i32* %r1.global-to-local, align 4
  %v2_111e4 = mul i32 %v0_111cc, 288
  store i32 %v2_111e4, i32* %r3.global-to-local, align 4
  %v2_111e8 = add i32 %v2_111dc, %v2_111e4
  store i32 %v2_111e8, i32* @r0, align 4
  %v1_111ec = add i32 %v2_111e8, 12
  %v2_111ec = inttoptr i32 %v1_111ec to i32*
  %v3_111ec = load i32, i32* %v2_111ec, align 4
  store i32 %v3_111ec, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_111f0 = icmp eq i32 %v3_111ec, 0
  store i1 %v2_111f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_111f0, label %dec_label_pc_1121c, label %dec_label_pc_111fc.preheader

dec_label_pc_111fc.preheader:                     ; preds = %dec_label_pc_111d4
  %v2_111f4 = add i32 %v2_111e8, 288
  store i32 %v2_111f4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_111fc

dec_label_pc_111fc:                               ; preds = %dec_label_pc_111fc.preheader, %dec_label_pc_11208
  %v0_11208 = phi i32 [ %v2_111f4, %dec_label_pc_111fc.preheader ], [ %v1_11214, %dec_label_pc_11208 ]
  %v0_111fc = phi i32 [ %v0_111cc, %dec_label_pc_111fc.preheader ], [ %v1_111fc, %dec_label_pc_11208 ]
  %v1_111fc = add i32 %v0_111fc, 1
  store i32 %v1_111fc, i32* @r4, align 4
  %v7_11200 = icmp eq i32 %v1_111fc, 256
  br i1 %v7_11200, label %dec_label_pc_11250.loopexit, label %dec_label_pc_11208

dec_label_pc_11208:                               ; preds = %dec_label_pc_111fc
  store i32 %v0_11208, i32* @r0, align 4
  %v1_1120c = add i32 %v0_11208, 12
  %v2_1120c = inttoptr i32 %v1_1120c to i32*
  %v3_1120c = load i32, i32* %v2_1120c, align 4
  %v2_11210 = icmp eq i32 %v3_1120c, 0
  %v1_11214 = add i32 %v0_11208, 288
  store i32 %v1_11214, i32* %r3.global-to-local, align 4
  br i1 %v2_11210, label %dec_label_pc_1121c.loopexit, label %dec_label_pc_111fc

dec_label_pc_1121c.loopexit:                      ; preds = %dec_label_pc_11208
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1121c

dec_label_pc_1121c:                               ; preds = %dec_label_pc_1121c.loopexit, %dec_label_pc_111d4
  %v1_1121c = phi i32 [ %v0_11208, %dec_label_pc_1121c.loopexit ], [ %v2_111e8, %dec_label_pc_111d4 ]
  %v2_1121c = add i32 %v1_1121c, 16
  %v3_1121c = inttoptr i32 %v2_1121c to i32*
  store i32 %v3_111bc, i32* %v3_1121c, align 4
  store i32 %v4_11110, i32* %r1.global-to-local, align 4
  %v2_11224 = load i32, i32* %v1_11224, align 4
  store i32 %v2_11224, i32* %r2.global-to-local, align 4
  %v1_11228 = and i32 %v2_11224, 128
  %v2_11228 = icmp ne i32 %v1_11228, 0
  store i1 %v2_11228, i1* %cpsr_c.global-to-local, align 1
  %v3_11228 = sdiv i32 %v2_11224, 256
  store i32 %v3_11228, i32* %r3.global-to-local, align 4
  %v1_1122c = trunc i32 %v3_11228 to i8
  %v2_1122c = load i32, i32* @r0, align 4
  %v3_1122c = add i32 %v2_1122c, 21
  %v4_1122c = inttoptr i32 %v3_1122c to i8*
  store i8 %v1_1122c, i8* %v4_1122c, align 1
  %v0_11230 = load i32, i32* %r2.global-to-local, align 4
  %v1_11230 = trunc i32 %v0_11230 to i8
  %v2_11230 = load i32, i32* @r0, align 4
  %v3_11230 = add i32 %v2_11230, 20
  %v4_11230 = inttoptr i32 %v3_11230 to i8*
  store i8 %v1_11230, i8* %v4_11230, align 1
  %v0_11234 = call i32 @function_fa5c()
  store i32 %v0_11234, i32* %r0.global-to-local, align 4
  %v1_110a4.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_110a0

dec_label_pc_1123c:                               ; preds = %dec_label_pc_10088
  store i32 ptrtoint (i32* @global_var_1f254.169 to i32), i32* %r2.global-to-local, align 4
  %v2_11240 = load i32, i32* @global_var_1f254.169, align 4
  store i32 %v2_11240, i32* %r0.global-to-local, align 4
  %v1_11244 = call i32 @function_135d0(i32 %v2_11240)
  store i32 %v1_11244, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11248

dec_label_pc_11248:                               ; preds = %dec_label_pc_10060, %dec_label_pc_1123c
  %v0_11248 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11248, i32* %r0.global-to-local, align 4
  %v1_1124c = call i32 @function_14798(i32 %v0_11248)
  store i32 %v1_1124c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11250

dec_label_pc_11250.loopexit:                      ; preds = %dec_label_pc_111fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11250

dec_label_pc_11250:                               ; preds = %dec_label_pc_111cc, %dec_label_pc_110d8, %dec_label_pc_110a0, %dec_label_pc_11250.loopexit, %dec_label_pc_11248
  %stack_var_-1872.1 = phi i32 [ %tmp249, %dec_label_pc_11248 ], [ %v0_11104, %dec_label_pc_11250.loopexit ], [ %v0_11104, %dec_label_pc_110a0 ], [ %v0_11104, %dec_label_pc_110d8 ], [ %v0_11104, %dec_label_pc_111cc ]
  %stack_var_-1868.1 = phi i8 [ %tmp250, %dec_label_pc_11248 ], [ %stack_var_-1868.0, %dec_label_pc_11250.loopexit ], [ %stack_var_-1868.0, %dec_label_pc_110a0 ], [ %stack_var_-1868.0, %dec_label_pc_110d8 ], [ %stack_var_-1868.0, %dec_label_pc_111cc ]
  %stack_var_-1876.1 = phi i8* [ %tmp278, %dec_label_pc_11248 ], [ %stack_var_-1876.0, %dec_label_pc_11250.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_110a0 ], [ %stack_var_-1876.0, %dec_label_pc_110d8 ], [ %stack_var_-1876.0, %dec_label_pc_111cc ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_11264412 = load i32, i32* @sp, align 4
  %v3_11264413 = add i32 %v2_11264412, 1664
  %v4_11264414 = inttoptr i32 %v3_11264413 to i32*
  store i32 0, i32* %v4_11264414, align 4
  br label %dec_label_pc_11258.dec_label_pc_11258_crit_edge

dec_label_pc_11258.dec_label_pc_11258_crit_edge:  ; preds = %dec_label_pc_11250, %dec_label_pc_11258.dec_label_pc_11258_crit_edge
  %v0_11258.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_11264.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11258 = add i32 %v0_11258.pre, 1664
  store i32 %v1_11258, i32* %ip.global-to-local, align 4
  %v1_1125c = add i32 %v0_11258.pre, 4
  store i32 %v1_1125c, i32* %r3.global-to-local, align 4
  %v7_11260 = icmp eq i32 %v1_1125c, 128
  %v2_11264 = load i32, i32* @sp, align 4
  %v3_11264 = add i32 %v2_11264, %v1_11258
  %v4_11264 = inttoptr i32 %v3_11264 to i32*
  store i32 %v0_11264.pre, i32* %v4_11264, align 4
  br i1 %v7_11260, label %dec_label_pc_1126c, label %dec_label_pc_11258.dec_label_pc_11258_crit_edge

dec_label_pc_1126c:                               ; preds = %dec_label_pc_11258.dec_label_pc_11258_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_1126c = load i32, i32* %r2.global-to-local, align 4
  %v1_11270406 = add i32 %v0_1126c, 1536
  store i32 %v1_11270406, i32* %lr.global-to-local, align 4
  %v1_11274407 = add i32 %v0_1126c, 4
  store i32 %v1_11274407, i32* %r3.global-to-local, align 4
  %v7_11278408 = icmp eq i32 %v1_11274407, 128
  %v2_1127c409 = load i32, i32* @sp, align 4
  %v3_1127c410 = add i32 %v2_1127c409, %v1_11270406
  %v4_1127c411 = inttoptr i32 %v3_1127c410 to i32*
  store i32 %v0_1126c, i32* %v4_1127c411, align 4
  br i1 %v7_11278408, label %dec_label_pc_11284, label %dec_label_pc_11270.dec_label_pc_11270_crit_edge

dec_label_pc_11270.dec_label_pc_11270_crit_edge:  ; preds = %dec_label_pc_1126c, %dec_label_pc_11270.dec_label_pc_11270_crit_edge
  %v0_11270.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_1127c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11270 = add i32 %v0_11270.pre, 1536
  store i32 %v1_11270, i32* %lr.global-to-local, align 4
  %v1_11274 = add i32 %v0_11270.pre, 4
  store i32 %v1_11274, i32* %r3.global-to-local, align 4
  %v7_11278 = icmp eq i32 %v1_11274, 128
  %v2_1127c = load i32, i32* @sp, align 4
  %v3_1127c = add i32 %v2_1127c, %v1_11270
  %v4_1127c = inttoptr i32 %v3_1127c to i32*
  store i32 %v0_1127c.pre, i32* %v4_1127c, align 4
  br i1 %v7_11278, label %dec_label_pc_11284, label %dec_label_pc_11270.dec_label_pc_11270_crit_edge

dec_label_pc_11284:                               ; preds = %dec_label_pc_11270.dec_label_pc_11270_crit_edge, %dec_label_pc_1126c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_11284 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11284, i32* @r6, align 4
  store i32 %v0_11284, i32* @r5, align 4
  store i32 %v0_11284, i32* @r7, align 4
  store i32 %v0_11284, i32* %stack_var_-48, align 4
  %v2_11348 = ptrtoint i32* %stack_var_-36 to i32
  %v2_113c0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_113c4 = ptrtoint i32* %stack_var_-348 to i32
  %v2_113cc = ptrtoint i32* %stack_var_-64 to i32
  %v2_113d0 = ptrtoint i32* %stack_var_-220 to i32
  %v2_11cd8 = ptrtoint i32* %stack_var_-41 to i32
  %v2_11ce8 = ptrtoint i32* %stack_var_-73 to i32
  %v2_11578 = ptrtoint i8* %stack_var_-52 to i32
  %v2_11580 = bitcast i8* %stack_var_-52 to i32*
  %v2_1158c = ptrtoint i32* %stack_var_-56 to i32
  %v2_11fac = ptrtoint i32* %stack_var_-92 to i32
  %v3_11fb4 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_11300

dec_label_pc_11298:                               ; preds = %dec_label_pc_11328, %dec_label_pc_11300
  %storemerge232 = phi i32 [ 30, %dec_label_pc_11300 ], [ 5, %dec_label_pc_11328 ]
  store i32 %storemerge232, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1f0.155 to i32), i32* %r2.global-to-local, align 4
  %v2_1129c = load i32, i32* @global_var_1f1f0.155, align 4
  store i32 %v2_1129c, i32* %r3.global-to-local, align 4
  %v1_112a0 = add i32 %v2_11314, 8
  %v2_112a0 = inttoptr i32 %v1_112a0 to i32*
  %v3_112a0 = load i32, i32* %v2_112a0, align 4
  store i32 %v3_112a0, i32* %r2.global-to-local, align 4
  %v2_112a4 = sub i32 %v2_1129c, %v3_112a0
  store i32 %v2_112a4, i32* %r3.global-to-local, align 4
  %v3_112a8 = icmp uge i32 %v2_112a4, %storemerge232
  store i1 %v3_112a8, i1* %cpsr_c.global-to-local, align 1
  %v9_112a8 = icmp eq i32 %v2_112a4, %storemerge232
  store i1 %v9_112a8, i1* %cpsr_z.global-to-local, align 1
  %v2_112ac = xor i1 %v9_112a8, true
  %v3_112ac = and i1 %v3_112a8, %v2_112ac
  br i1 %v3_112ac, label %dec_label_pc_1136c, label %dec_label_pc_112b0

dec_label_pc_112b0:                               ; preds = %dec_label_pc_11298
  store i1 %v2_1131c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_1131c, i1* %cpsr_z.global-to-local, align 1
  %v1_11338 = add i32 %v2_11314, 4
  %v2_11338 = inttoptr i32 %v1_11338 to i32*
  %v3_11338 = load i32, i32* %v2_11338, align 4
  br i1 %v7_1131c, label %dec_label_pc_11338, label %dec_label_pc_112b8

dec_label_pc_112b8:                               ; preds = %dec_label_pc_112b0
  store i32 %v3_11338, i32* %ip.global-to-local, align 4
  %v3_112c0 = udiv i32 %v3_11338, 32
  store i32 %v2_11348, i32* %r0.global-to-local, align 4
  %v3_112c8 = mul nuw nsw i32 %v3_112c0, 4
  %v2_112cc = add i32 %v3_112c8, %v2_11348
  store i32 %v2_112cc, i32* %r3.global-to-local, align 4
  %v1_112d0 = add i32 %v2_112cc, -184
  %v2_112d0 = inttoptr i32 %v1_112d0 to i32*
  %v3_112d0 = load i32, i32* %v2_112d0, align 4
  %v1_112d4 = urem i32 %v3_11338, 32
  store i32 %v1_112d4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_112dc = shl i32 1, %v1_112d4
  %v8_112dc = or i32 %v3_112d0, %v7_112dc
  store i32 %v8_112dc, i32* %r2.global-to-local, align 4
  store i32 %v8_112dc, i32* %v2_112d0, align 4
  %v0_112e4 = load i32, i32* @r6, align 4
  %v1_112e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_112e4 = sub i32 %v0_112e4, %v1_112e4
  %v3_112e4 = icmp uge i32 %v0_112e4, %v1_112e4
  store i1 %v3_112e4, i1* %cpsr_c.global-to-local, align 1
  %v4_112e4 = xor i32 %v1_112e4, %v0_112e4
  %v5_112e4 = xor i32 %v2_112e4, %v0_112e4
  %v6_112e4 = and i32 %v5_112e4, %v4_112e4
  %v7_112e4 = icmp slt i32 %v6_112e4, 0
  %v8_112e4 = icmp slt i32 %v2_112e4, 0
  %v9_112e4 = icmp eq i32 %v0_112e4, %v1_112e4
  store i1 %v9_112e4, i1* %cpsr_z.global-to-local, align 1
  %v2_112e8 = xor i1 %v8_112e4, %v7_112e4
  br i1 %v2_112e8, label %bb314, label %bb315

bb314:                                            ; preds = %dec_label_pc_112b8
  store i32 %v1_112e4, i32* @r6, align 4
  br label %bb315

bb315:                                            ; preds = %dec_label_pc_11328, %dec_label_pc_11fd0, %dec_label_pc_113a0, %bb317, %dec_label_pc_112b8, %bb314
  %v3_112ec = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_112ec, i32* %r3.global-to-local, align 4
  %v1_112f0 = add i32 %v3_112ec, 1
  store i32 %v1_112f0, i32* %r2.global-to-local, align 4
  %v2_112f4 = icmp ugt i32 %v1_112f0, 254
  store i1 %v2_112f4, i1* %cpsr_c.global-to-local, align 1
  %v7_112f4 = icmp eq i32 %v1_112f0, 255
  store i1 %v7_112f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_112f0, i32* %stack_var_-48, align 4
  %v8_112fc = icmp sgt i32 %v1_112f0, 255
  br i1 %v8_112fc, label %dec_label_pc_113ac, label %dec_label_pc_11300

dec_label_pc_11300:                               ; preds = %bb315, %dec_label_pc_11284
  %v0_1130c = phi i32 [ %v1_112f0, %bb315 ], [ %v0_11284, %dec_label_pc_11284 ]
  store i32 ptrtoint (i32* @global_var_1f250.167 to i32), i32* %r0.global-to-local, align 4
  %v3_11304 = mul i32 %v0_1130c, 256
  store i32 %v3_11304, i32* %r3.global-to-local, align 4
  %v2_11308 = load i32, i32* @global_var_1f250.167, align 4
  store i32 %v2_11308, i32* %r1.global-to-local, align 4
  %v2_11310 = mul i32 %v0_1130c, 288
  store i32 %v2_11310, i32* %r2.global-to-local, align 4
  %v2_11314 = add i32 %v2_11308, %v2_11310
  store i32 %v2_11314, i32* @r4, align 4
  %v1_11318 = add i32 %v2_11314, 12
  %v2_11318 = inttoptr i32 %v1_11318 to i32*
  %v3_11318 = load i32, i32* %v2_11318, align 4
  store i32 %v3_11318, i32* %ip.global-to-local, align 4
  %v2_1131c = icmp ne i32 %v3_11318, 0
  store i1 %v2_1131c, i1* %cpsr_c.global-to-local, align 1
  %v7_1131c = icmp eq i32 %v3_11318, 1
  store i1 %v7_1131c, i1* %cpsr_z.global-to-local, align 1
  %v2_11320 = xor i1 %v7_1131c, true
  %v3_11320 = and i1 %v2_1131c, %v2_11320
  br i1 %v3_11320, label %dec_label_pc_11298, label %dec_label_pc_11328

dec_label_pc_11328:                               ; preds = %dec_label_pc_11300
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11328 = icmp eq i32 %v3_11318, 0
  store i1 %v2_11328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11328, label %bb315, label %dec_label_pc_11298

dec_label_pc_11338:                               ; preds = %dec_label_pc_112b0
  store i32 %v3_11338, i32* %r0.global-to-local, align 4
  %v3_11340 = udiv i32 %v3_11338, 32
  %v3_11344 = mul nuw nsw i32 %v3_11340, 4
  store i32 %v2_11348, i32* %lr.global-to-local, align 4
  %v2_1134c = add i32 %v3_11344, %v2_11348
  store i32 %v2_1134c, i32* %r3.global-to-local, align 4
  %v1_11350 = add i32 %v2_1134c, -312
  %v2_11350 = inttoptr i32 %v1_11350 to i32*
  %v3_11350 = load i32, i32* %v2_11350, align 4
  %v1_11354 = urem i32 %v3_11338, 32
  store i32 %v1_11354, i32* %r1.global-to-local, align 4
  %v7_11358 = shl i32 1, %v1_11354
  %v8_11358 = or i32 %v3_11350, %v7_11358
  store i32 %v8_11358, i32* %r2.global-to-local, align 4
  %v0_1135c = load i32, i32* @r5, align 4
  %v2_1135c = sub i32 %v0_1135c, %v3_11338
  %v3_1135c = icmp uge i32 %v0_1135c, %v3_11338
  store i1 %v3_1135c, i1* %cpsr_c.global-to-local, align 1
  %v4_1135c = xor i32 %v0_1135c, %v3_11338
  %v5_1135c = xor i32 %v2_1135c, %v0_1135c
  %v6_1135c = and i32 %v5_1135c, %v4_1135c
  %v7_1135c = icmp slt i32 %v6_1135c, 0
  %v8_1135c = icmp slt i32 %v2_1135c, 0
  %v9_1135c = icmp eq i32 %v0_1135c, %v3_11338
  store i1 %v9_1135c, i1* %cpsr_z.global-to-local, align 1
  %v2_11360 = xor i1 %v8_1135c, %v7_1135c
  br i1 %v2_11360, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_11338
  store i32 %v3_11338, i32* @r5, align 4
  br label %bb317

bb317:                                            ; preds = %dec_label_pc_11338, %bb316
  store i32 %v8_11358, i32* %v2_11350, align 4
  br label %bb315

dec_label_pc_1136c:                               ; preds = %dec_label_pc_11298
  %v1_1136c = add i32 %v2_11314, 4
  %v2_1136c = inttoptr i32 %v1_1136c to i32*
  %v3_1136c = load i32, i32* %v2_1136c, align 4
  store i32 %v3_1136c, i32* %r0.global-to-local, align 4
  %v1_11370 = call i32 @function_135d0(i32 %v3_1136c)
  store i32 %v1_11370, i32* %r0.global-to-local, align 4
  %v0_11374 = load i32, i32* @r4, align 4
  %v1_11374 = add i32 %v0_11374, 12
  %v2_11374 = inttoptr i32 %v1_11374 to i32*
  %v3_11374 = load i32, i32* %v2_11374, align 4
  store i32 %v3_11374, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1137c = icmp ugt i32 %v3_11374, 1
  store i1 %v2_1137c, i1* %cpsr_c.global-to-local, align 1
  %v7_1137c = icmp eq i32 %v3_11374, 2
  store i1 %v7_1137c, i1* %cpsr_z.global-to-local, align 1
  %v2_11380 = add i32 %v0_11374, 4
  %v3_11380 = inttoptr i32 %v2_11380 to i32*
  store i32 -1, i32* %v3_11380, align 4
  %v2_11384 = xor i1 %v2_1137c, true
  %v3_11384 = or i1 %v7_1137c, %v2_11384
  br i1 %v3_11384, label %dec_label_pc_11fd0, label %dec_label_pc_11388

dec_label_pc_11388:                               ; preds = %dec_label_pc_1136c
  %v0_11388 = load i32, i32* @r4, align 4
  %v1_11388 = add i32 %v0_11388, 284
  %v2_11388 = inttoptr i32 %v1_11388 to i8*
  %v3_11388 = load i8, i8* %v2_11388, align 1
  %v4_11388 = zext i8 %v3_11388 to i32
  %v1_1138c = add nuw nsw i32 %v4_11388, 1
  %v1_11390 = urem i32 %v1_1138c, 256
  store i32 %v1_11390, i32* %r3.global-to-local, align 4
  %v2_11394 = icmp ugt i32 %v1_11390, 9
  store i1 %v2_11394, i1* %cpsr_c.global-to-local, align 1
  %v7_11394 = icmp eq i32 %v1_11390, 10
  store i1 %v7_11394, i1* %cpsr_z.global-to-local, align 1
  %v1_11398 = trunc i32 %v1_1138c to i8
  store i8 %v1_11398, i8* %v2_11388, align 1
  %v0_1139c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1139c, label %dec_label_pc_11fd0, label %dec_label_pc_113a0

dec_label_pc_113a0:                               ; preds = %dec_label_pc_11388
  %v0_113a0 = load i32, i32* @r4, align 4
  store i32 %v0_113a0, i32* @r0, align 4
  %v0_113a4 = call i32 @function_fa5c()
  store i32 %v0_113a4, i32* %r0.global-to-local, align 4
  br label %bb315

dec_label_pc_113ac:                               ; preds = %bb315
  store i32 1, i32* %stack_var_-64, align 4
  %v0_113b4 = load i32, i32* @r6, align 4
  %v1_113b4 = load i32, i32* @r5, align 4
  %v2_113b4 = sub i32 %v0_113b4, %v1_113b4
  %v3_113b4 = icmp uge i32 %v0_113b4, %v1_113b4
  store i1 %v3_113b4, i1* %cpsr_c.global-to-local, align 1
  %v4_113b4 = xor i32 %v1_113b4, %v0_113b4
  %v5_113b4 = xor i32 %v2_113b4, %v0_113b4
  %v6_113b4 = and i32 %v5_113b4, %v4_113b4
  %v7_113b4 = icmp slt i32 %v6_113b4, 0
  %v8_113b4 = icmp slt i32 %v2_113b4, 0
  %v9_113b4 = icmp eq i32 %v0_113b4, %v1_113b4
  store i1 %v9_113b4, i1* %cpsr_z.global-to-local, align 1
  %v2_113b8 = xor i1 %v8_113b4, %v7_113b4
  %v1_113b4.v0_113b4 = select i1 %v2_113b8, i32 %v1_113b4, i32 %v0_113b4
  store i32 %v2_113c4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_113cc, i32* %ip.global-to-local, align 4
  store i32 %v2_113d0, i32* %r1.global-to-local, align 4
  %v1_113d4 = add i32 %v1_113b4.v0_113b4, 1
  store i32 %v1_113d4, i32* %r0.global-to-local, align 4
  %v5_113e0 = call i32 @function_137f0(i32 %v1_113d4, i32 %v2_113d0, i32 %v2_113c4, i32 0, i32 %v2_113cc)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_113e8 = call i32 @function_138a0(i32* null)
  store i32 ptrtoint (i32* @global_var_1f1f0.155 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_113e8, i32* @global_var_1f1f0.155, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  br label %dec_label_pc_11440

dec_label_pc_11404:                               ; preds = %dec_label_pc_11464, %dec_label_pc_11550
  %v0_1141c = phi i32 [ %v3_11458, %dec_label_pc_11464 ], [ %v0_11404.pre, %dec_label_pc_11550 ]
  %v3_11404 = udiv i32 %v0_1141c, 32
  %v3_1140c = mul nuw nsw i32 %v3_11404, 4
  store i32 %v2_11348, i32* @lr, align 4
  %v2_11414 = add i32 %v3_1140c, %v2_11348
  store i32 %v2_11414, i32* %r3.global-to-local, align 4
  %v1_11418 = add i32 %v2_11414, -184
  %v2_11418 = inttoptr i32 %v1_11418 to i32*
  %v3_11418 = load i32, i32* %v2_11418, align 4
  %v1_1141c = urem i32 %v0_1141c, 32
  store i32 %v1_1141c, i32* %r1.global-to-local, align 4
  %v2_11420 = add nsw i32 %v1_1141c, -1
  %v3_11420 = shl i32 1, %v2_11420
  %v4_11420 = and i32 %v3_11420, %v3_11418
  %v5_11420 = icmp ne i32 %v4_11420, 0
  store i1 %v5_11420, i1* %cpsr_c.global-to-local, align 1
  %v6_11420 = lshr i32 %v3_11418, %v1_1141c
  store i32 %v6_11420, i32* %r2.global-to-local, align 4
  %v1_11424 = urem i32 %v6_11420, 2
  %v2_11424 = icmp eq i32 %v1_11424, 0
  store i1 %v2_11424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11424, label %dec_label_pc_1142c, label %dec_label_pc_115dc.preheader

dec_label_pc_115dc.preheader:                     ; preds = %dec_label_pc_11404
  %v0_115dc112 = load i32, i32* @r5, align 4
  %v1_115dc113 = add i32 %v0_115dc112, 12
  %v2_115dc114 = inttoptr i32 %v1_115dc113 to i32*
  %v3_115dc115 = load i32, i32* %v2_115dc114, align 4
  store i32 %v3_115dc115, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_115e0111117 = icmp eq i32 %v3_115dc115, 0
  store i1 %v2_115e0111117, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115e0111117, label %dec_label_pc_1142c, label %dec_label_pc_115e8.lr.ph

dec_label_pc_1142c:                               ; preds = %dec_label_pc_115dc.loopexit, %dec_label_pc_115e0.backedge, %dec_label_pc_115dc.preheader, %dec_label_pc_11404, %.thread228, %dec_label_pc_11e4c, %dec_label_pc_11440, %dec_label_pc_1201c, %dec_label_pc_11e8c
  %v3_1142c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1142c, i32* %r3.global-to-local, align 4
  %v1_11430 = add i32 %v3_1142c, 1
  store i32 %v1_11430, i32* %r2.global-to-local, align 4
  %v2_11434 = icmp ugt i32 %v1_11430, 254
  store i1 %v2_11434, i1* %cpsr_c.global-to-local, align 1
  %v7_11434 = icmp eq i32 %v1_11430, 255
  store i1 %v7_11434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11430, i32* %stack_var_-48, align 4
  %v8_1143c = icmp sgt i32 %v1_11430, 255
  br i1 %v8_1143c, label %dec_label_pc_10de4, label %dec_label_pc_11440

dec_label_pc_11440:                               ; preds = %dec_label_pc_1142c, %dec_label_pc_113ac
  %v0_1144c = phi i32 [ %v1_11430, %dec_label_pc_1142c ], [ 0, %dec_label_pc_113ac ]
  store i32 ptrtoint (i32* @global_var_1f250.167 to i32), i32* %ip.global-to-local, align 4
  %v3_11444 = mul i32 %v0_1144c, 256
  store i32 %v3_11444, i32* %r3.global-to-local, align 4
  %v2_11448 = load i32, i32* @global_var_1f250.167, align 4
  store i32 %v2_11448, i32* %r1.global-to-local, align 4
  %v2_11450 = mul i32 %v0_1144c, 288
  store i32 %v2_11450, i32* %r2.global-to-local, align 4
  %v2_11454 = add i32 %v2_11448, %v2_11450
  store i32 %v2_11454, i32* @r5, align 4
  %v1_11458 = add i32 %v2_11454, 4
  %v2_11458 = inttoptr i32 %v1_11458 to i32*
  %v3_11458 = load i32, i32* %v2_11458, align 4
  store i32 %v3_11458, i32* @r4, align 4
  %v2_1145c = icmp eq i32 %v3_11458, -1
  store i1 %v2_1145c, i1* %cpsr_c.global-to-local, align 1
  %v7_1145c = icmp eq i32 %v3_11458, -1
  store i1 %v7_1145c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1145c, label %dec_label_pc_1142c, label %dec_label_pc_11464

dec_label_pc_11464:                               ; preds = %dec_label_pc_11440
  %v3_11464 = udiv i32 %v3_11458, 32
  %v3_1146c = mul nuw nsw i32 %v3_11464, 4
  store i32 %v2_11348, i32* %lr.global-to-local, align 4
  %v2_11474 = add i32 %v3_1146c, %v2_11348
  store i32 %v2_11474, i32* %r3.global-to-local, align 4
  %v1_11478 = add i32 %v2_11474, -312
  %v2_11478 = inttoptr i32 %v1_11478 to i32*
  %v3_11478 = load i32, i32* %v2_11478, align 4
  %v1_1147c = urem i32 %v3_11458, 32
  store i32 %v1_1147c, i32* %r1.global-to-local, align 4
  %v2_11480 = add nsw i32 %v1_1147c, -1
  %v3_11480 = shl i32 1, %v2_11480
  %v4_11480 = and i32 %v3_11478, %v3_11480
  %v5_11480 = icmp ne i32 %v4_11480, 0
  store i1 %v5_11480, i1* %cpsr_c.global-to-local, align 1
  %v6_11480 = lshr i32 %v3_11478, %v1_1147c
  store i32 %v6_11480, i32* %r2.global-to-local, align 4
  %v1_11484 = urem i32 %v6_11480, 2
  %v2_11484 = icmp eq i32 %v1_11484, 0
  store i1 %v2_11484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11484, label %dec_label_pc_11404, label %dec_label_pc_1148c

dec_label_pc_1148c:                               ; preds = %dec_label_pc_11464
  store i32 4, i32* %r2.global-to-local, align 4
  store i8 4, i8* %stack_var_-52, align 1
  store i32 %v2_1158c, i32* %r3.global-to-local, align 4
  store i32 %v2_11578, i32* %ip.global-to-local, align 4
  store i32 %v3_11458, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v6_114bc = call i32 @function_13d70(i32 %v3_11458, i32 1, i32 4, i32* nonnull %stack_var_-56, i32 %v2_11578)
  %v3_114c0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_114c0, i32* %r3.global-to-local, align 4
  %v2_114c4 = or i32 %v3_114c0, %v6_114bc
  store i32 %v2_114c4, i32* %r0.global-to-local, align 4
  %v4_114c4 = icmp eq i32 %v2_114c4, 0
  store i1 %v4_114c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_114c4, label %dec_label_pc_114cc, label %dec_label_pc_1201c

dec_label_pc_114cc:                               ; preds = %dec_label_pc_1148c
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_114d0 = load i32, i32* @r5, align 4
  %v2_114d0 = add i32 %v1_114d0, 12
  %v3_114d0 = inttoptr i32 %v2_114d0 to i32*
  store i32 2, i32* %v3_114d0, align 4
  %v0_114d4 = call i32 @function_f8c8()
  store i32 %v0_114d4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f1ec.161 to i32), i32* %r3.global-to-local, align 4
  %v3_114dc = load i8, i8* @global_var_1f1ed.162, align 1
  %v4_114dc = zext i8 %v3_114dc to i32
  store i32 %v4_114dc, i32* %r2.global-to-local, align 4
  %v2_114e0 = load i8, i8* bitcast (i8** @global_var_1f1ec.161 to i8*), align 4
  %v3_114e0 = zext i8 %v2_114e0 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_114e4 = mul nuw nsw i32 %v4_114dc, 256
  %v5_114e4 = or i32 %v3_114e0, %v4_114e4
  store i32 %v5_114e4, i32* %r1.global-to-local, align 4
  %v2_114e8 = call i32 @function_13358(i32 %v0_114d4, i32 %v5_114e4)
  store i32 ptrtoint (i32* @global_var_1f1bc.157 to i32), i32* %r3.global-to-local, align 4
  %v2_114f0 = load i32, i32* @global_var_1f1bc.157, align 4
  store i32 %v2_114f0, i32* %lr.global-to-local, align 4
  %v1_114f8 = load i32, i32* @r6, align 4
  %v9_114f8 = icmp eq i32 %v2_114f0, %v1_114f8
  store i1 %v9_114f8, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_114fc = urem i32 %v2_114e8, 65536
  store i32 %v3_114fc, i32* %r0.global-to-local, align 4
  %v7_11500 = icmp sgt i32 %v2_114f0, %v1_114f8
  br i1 %v7_11500, label %dec_label_pc_11504, label %dec_label_pc_12014

dec_label_pc_11504:                               ; preds = %dec_label_pc_114cc
  %v2_11508 = load i32, i32* @global_var_1f1e8.159, align 4
  store i32 %v2_11508, i32* %r3.global-to-local, align 4
  store i32 %v1_114f8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11524

dec_label_pc_11514:                               ; preds = %dec_label_pc_1153c, %dec_label_pc_11524
  %v1_11514 = add i32 %v0_11514, 1
  store i32 %v1_11514, i32* %ip.global-to-local, align 4
  %v3_11518 = icmp uge i32 %v2_114f0, %v1_11514
  store i1 %v3_11518, i1* %cpsr_c.global-to-local, align 1
  %v9_11518 = icmp eq i32 %v2_114f0, %v1_11514
  store i1 %v9_11518, i1* %cpsr_z.global-to-local, align 1
  %v1_1151c = add i32 %v0_1151c, 16
  store i32 %v1_1151c, i32* %r3.global-to-local, align 4
  br i1 %v9_11518, label %dec_label_pc_12014, label %dec_label_pc_11524

dec_label_pc_11524:                               ; preds = %dec_label_pc_11514, %dec_label_pc_11504
  %v0_11514 = phi i32 [ %v1_11514, %dec_label_pc_11514 ], [ %v1_114f8, %dec_label_pc_11504 ]
  %v0_1151c = phi i32 [ %v1_1151c, %dec_label_pc_11514 ], [ %v2_11508, %dec_label_pc_11504 ]
  store i32 %v0_1151c, i32* %r1.global-to-local, align 4
  %v1_11528 = add i32 %v0_1151c, 9
  %v2_11528 = inttoptr i32 %v1_11528 to i8*
  %v3_11528 = load i8, i8* %v2_11528, align 1
  %v4_11528 = zext i8 %v3_11528 to i32
  store i32 %v4_11528, i32* %r2.global-to-local, align 4
  %v1_1152c = add i32 %v0_1151c, 8
  %v2_1152c = inttoptr i32 %v1_1152c to i8*
  %v3_1152c = load i8, i8* %v2_1152c, align 1
  %v4_1152c = zext i8 %v3_1152c to i32
  %v4_11530 = mul nuw nsw i32 %v4_11528, 256
  %v5_11530 = or i32 %v4_1152c, %v4_11530
  store i32 %v5_11530, i32* %r3.global-to-local, align 4
  %v3_11534 = icmp uge i32 %v5_11530, %v3_114fc
  store i1 %v3_11534, i1* %cpsr_c.global-to-local, align 1
  %v9_11534 = icmp eq i32 %v5_11530, %v3_114fc
  store i1 %v9_11534, i1* %cpsr_z.global-to-local, align 1
  %v2_11538 = xor i1 %v9_11534, true
  %v3_11538 = and i1 %v3_11534, %v2_11538
  br i1 %v3_11538, label %dec_label_pc_11514, label %dec_label_pc_1153c

dec_label_pc_1153c:                               ; preds = %dec_label_pc_11524
  %v1_1153c = add i32 %v0_1151c, 10
  %v2_1153c = inttoptr i32 %v1_1153c to i8*
  %v3_1153c = load i8, i8* %v2_1153c, align 1
  %v4_1153c = zext i8 %v3_1153c to i32
  store i32 %v4_1153c, i32* %r3.global-to-local, align 4
  %v1_11540 = add i32 %v0_1151c, 11
  %v2_11540 = inttoptr i32 %v1_11540 to i8*
  %v3_11540 = load i8, i8* %v2_11540, align 1
  %v4_11540 = zext i8 %v3_11540 to i32
  store i32 %v4_11540, i32* %r2.global-to-local, align 4
  %v4_11544 = mul nuw nsw i32 %v4_11540, 256
  %v5_11544 = or i32 %v4_11544, %v4_1153c
  store i32 %v5_11544, i32* %r3.global-to-local, align 4
  %v3_11548 = icmp uge i32 %v5_11544, %v3_114fc
  store i1 %v3_11548, i1* %cpsr_c.global-to-local, align 1
  %v9_11548 = icmp eq i32 %v5_11544, %v3_114fc
  store i1 %v9_11548, i1* %cpsr_z.global-to-local, align 1
  %v2_1154c = xor i1 %v3_11548, true
  %v3_1154c = or i1 %v9_11548, %v2_1154c
  br i1 %v3_1154c, label %dec_label_pc_11514, label %dec_label_pc_11550

dec_label_pc_11550:                               ; preds = %dec_label_pc_1153c, %dec_label_pc_12014
  %v0_11558 = phi i32 [ 0, %dec_label_pc_12014 ], [ %v0_1151c, %dec_label_pc_1153c ]
  %v0_11550 = load i32, i32* @r5, align 4
  %v1_11550 = add i32 %v0_11550, 4
  %v2_11550 = inttoptr i32 %v1_11550 to i32*
  %v3_11550 = load i32, i32* %v2_11550, align 4
  store i32 %v3_11550, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_11558 = inttoptr i32 %v0_11550 to i32*
  store i32 %v0_11558, i32* %v2_11558, align 4
  %v0_1155c = load i32, i32* %ip.global-to-local, align 4
  %v1_1155c = load i32, i32* @r5, align 4
  %v2_1155c = add i32 %v1_1155c, 24
  %v3_1155c = inttoptr i32 %v2_1155c to i32*
  store i32 %v0_1155c, i32* %v3_1155c, align 4
  %v0_11404.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11404

dec_label_pc_11564:                               ; preds = %dec_label_pc_117a4, %dec_label_pc_11778, %dec_label_pc_117c0
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11568 = call i32 @function_121d4(i32 30)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_11570 = call i32 @function_121d4(i32 31)
  store i32 %v2_11578, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_11580 = call i32 @function_120f0(i32 30, i32* %v2_11580)
  store i32 %v3_11580, i32* @r4, align 4
  store i32 %v2_1158c, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_11594 = call i32 @function_120f0(i32 31, i32* nonnull %stack_var_-56)
  %v3_11598 = load i8, i8* %stack_var_-52, align 1
  %v4_11598 = sext i8 %v3_11598 to i32
  %sext7 = mul i32 %v3_11594, 16777216
  %v1_1159c = sdiv i32 %sext7, 16777216
  store i32 %v1_1159c, i32* @r6, align 4
  %v0_115a0 = load i32, i32* @r4, align 4
  store i32 %v0_115a0, i32* %r2.global-to-local, align 4
  %v1_115a4 = add nsw i32 %v4_11598, -1
  store i32 %v1_115a4, i32* %r3.global-to-local, align 4
  %v0_115a8 = load i32, i32* @sl, align 4
  store i32 %v0_115a8, i32* %r0.global-to-local, align 4
  %v0_115ac = load i32, i32* @r5, align 4
  %v1_115ac = add i32 %v0_115ac, 24
  %v2_115ac = inttoptr i32 %v1_115ac to i32*
  %v3_115ac = load i32, i32* %v2_115ac, align 4
  store i32 %v3_115ac, i32* %r1.global-to-local, align 4
  %v4_115b0 = call i32 @function_12d00(i32 %v0_115a8, i32 %v3_115ac, i32 %v0_115a0, i32 %v1_115a4)
  store i32 %v4_115b0, i32* %r0.global-to-local, align 4
  %v2_115b4 = icmp eq i32 %v4_115b0, -1
  store i1 %v2_115b4, i1* %cpsr_c.global-to-local, align 1
  %v7_115b4 = icmp eq i32 %v4_115b0, -1
  store i1 %v7_115b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115b4, label %dec_label_pc_11f0c, label %dec_label_pc_115c4

dec_label_pc_115c4:                               ; preds = %dec_label_pc_11f0c, %dec_label_pc_11564
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_115c8 = call i32 @function_1211c(i32 30)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_115d0 = call i32 @function_1211c(i32 31)
  store i32 %v1_115d0, i32* %r0.global-to-local, align 4
  %v0_115d4 = load i32, i32* @r7, align 4
  %v3_115d4 = icmp eq i32 %v0_115d4, -1
  store i1 %v3_115d4, i1* %cpsr_c.global-to-local, align 1
  %v8_115d4 = icmp eq i32 %v0_115d4, -1
  store i1 %v8_115d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_115d4, label %dec_label_pc_115dc.loopexit, label %dec_label_pc_117cc

dec_label_pc_115dc.loopexit:                      ; preds = %dec_label_pc_11768, %dec_label_pc_11d88, %dec_label_pc_1165c, %dec_label_pc_115c4, %dec_label_pc_11d74
  %v0_115dc = load i32, i32* @r5, align 4
  %v1_115dc = add i32 %v0_115dc, 12
  %v2_115dc = inttoptr i32 %v1_115dc to i32*
  %v3_115dc = load i32, i32* %v2_115dc, align 4
  store i32 %v3_115dc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_115e0111 = icmp eq i32 %v3_115dc, 0
  store i1 %v2_115e0111, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115e0111, label %dec_label_pc_1142c, label %dec_label_pc_115e8.lr.ph

dec_label_pc_115e8.lr.ph:                         ; preds = %dec_label_pc_115dc.preheader, %dec_label_pc_115dc.loopexit
  %v0_115e8145 = phi i32 [ %v0_115dc, %dec_label_pc_115dc.loopexit ], [ %v0_115dc112, %dec_label_pc_115dc.preheader ]
  br label %dec_label_pc_115e8

dec_label_pc_115e8:                               ; preds = %dec_label_pc_115e0.backedge.thread, %dec_label_pc_115e0.backedge, %dec_label_pc_115e0.backedge.thread455, %dec_label_pc_115e8.lr.ph
  %v0_11ec4 = phi i32 [ %v0_115e8145, %dec_label_pc_115e8.lr.ph ], [ %v0_115e8142, %dec_label_pc_115e0.backedge ], [ %v0_1165c, %dec_label_pc_115e0.backedge.thread ], [ %v0_1165c, %dec_label_pc_115e0.backedge.thread455 ]
  %v1_115e8 = add i32 %v0_11ec4, 24
  %v2_115e8 = inttoptr i32 %v1_115e8 to i32*
  %v3_115e8 = load i32, i32* %v2_115e8, align 4
  store i32 %v3_115e8, i32* %r3.global-to-local, align 4
  %v2_115ec = icmp ugt i32 %v3_115e8, 255
  store i1 %v2_115ec, i1* %cpsr_c.global-to-local, align 1
  %v7_115ec = icmp eq i32 %v3_115e8, 256
  store i1 %v7_115ec, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_11ec4, 28
  store i32 %.pre, i32* @sl, align 4
  br i1 %v7_115ec, label %dec_label_pc_11ec4, label %dec_label_pc_115f8

dec_label_pc_115f8:                               ; preds = %dec_label_pc_115e8, %dec_label_pc_11ec4
  store i32 0, i32* @r6, align 4
  %v1_115fc = load i32, i32* @sb, align 4
  %v2_115fc = inttoptr i32 %v1_115fc to i32*
  store i32 0, i32* %v2_115fc, align 4
  %v0_11600 = load i32, i32* @r5, align 4
  %v1_11600 = add i32 %v0_11600, 24
  %v2_11600 = inttoptr i32 %v1_11600 to i32*
  %v3_11600 = load i32, i32* %v2_11600, align 4
  store i32 %v3_11600, i32* %r2.global-to-local, align 4
  %v0_11604 = load i32, i32* @sl, align 4
  %v2_11604 = add i32 %v0_11604, %v3_11600
  store i32 %v2_11604, i32* @r4, align 4
  %v1_11608 = add i32 %v0_11600, 4
  %v2_11608 = inttoptr i32 %v1_11608 to i32*
  %v3_11608 = load i32, i32* %v2_11608, align 4
  store i32 %v3_11608, i32* %r0.global-to-local, align 4
  %v1_1160c = sub i32 256, %v3_11600
  store i32 %v1_1160c, i32* %r2.global-to-local, align 4
  store i32 %v2_11604, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11618 = inttoptr i32 %v2_11604 to i32*
  %v5_11618 = call i32 @function_13dcc(i32 %v3_11608, i32* %v4_11618, i32 %v1_1160c, i32 16384)
  store i32 %v5_11618, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1161c = icmp eq i32 %v5_11618, 0
  store i1 %v2_1161c, i1* %cpsr_z.global-to-local, align 1
  %tmp320 = icmp slt i32 %v5_11618, 1
  br i1 %tmp320, label %dec_label_pc_11e40, label %dec_label_pc_11624

dec_label_pc_11624:                               ; preds = %dec_label_pc_115f8
  %v0_11624 = load i32, i32* @r6, align 4
  store i32 %v0_11624, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1162c

dec_label_pc_1162c:                               ; preds = %bb322, %dec_label_pc_11624
  %v3_11634 = phi i32 [ %v1_11638, %bb322 ], [ %v0_11624, %dec_label_pc_11624 ]
  %v1_1162c = load i32, i32* @r4, align 4
  %v2_1162c = add i32 %v1_1162c, %v3_11634
  %v3_1162c = inttoptr i32 %v2_1162c to i8*
  %v4_1162c = load i8, i8* %v3_1162c, align 1
  %v6_1162c = zext i8 %v4_1162c to i32
  store i32 %v6_1162c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11630 = icmp eq i8 %v4_1162c, 0
  store i1 %v2_11630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11630, label %bb321, label %bb322

bb321:                                            ; preds = %dec_label_pc_1162c
  %v1_11634 = load i32, i32* %r1.global-to-local, align 4
  %v2_11634 = trunc i32 %v1_11634 to i8
  store i8 %v2_11634, i8* %v3_1162c, align 1
  %v0_11638.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb322

bb322:                                            ; preds = %dec_label_pc_1162c, %bb321
  %v0_11638 = phi i32 [ %v3_11634, %dec_label_pc_1162c ], [ %v0_11638.pre, %bb321 ]
  %v1_11638 = add i32 %v0_11638, 1
  store i32 %v1_11638, i32* %r2.global-to-local, align 4
  %v3_1163c = icmp uge i32 %v5_11618, %v1_11638
  store i1 %v3_1163c, i1* %cpsr_c.global-to-local, align 1
  %v9_1163c = icmp eq i32 %v5_11618, %v1_11638
  store i1 %v9_1163c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1163c, label %dec_label_pc_11644, label %dec_label_pc_1162c

dec_label_pc_11644:                               ; preds = %bb322, %dec_label_pc_11e44
  store i32 ptrtoint (i32* @global_var_1f1f0.155 to i32), i32* %r1.global-to-local, align 4
  %v0_11648 = load i32, i32* @r5, align 4
  %v1_11648 = add i32 %v0_11648, 24
  %v2_11648 = inttoptr i32 %v1_11648 to i32*
  %v3_11648 = load i32, i32* %v2_11648, align 4
  %v2_1164c = load i32, i32* @global_var_1f1f0.155, align 4
  store i32 %v2_1164c, i32* %r3.global-to-local, align 4
  %v2_11650 = add i32 %v3_11648, %v5_11618
  store i32 %v2_11650, i32* %ip.global-to-local, align 4
  store i32 %v2_11650, i32* %v2_11648, align 4
  %v0_11658 = load i32, i32* %r3.global-to-local, align 4
  %v1_11658 = load i32, i32* @r5, align 4
  %v2_11658 = add i32 %v1_11658, 8
  %v3_11658 = inttoptr i32 %v2_11658 to i32*
  store i32 %v0_11658, i32* %v3_11658, align 4
  br label %dec_label_pc_1165c

dec_label_pc_1165c:                               ; preds = %dec_label_pc_11bf4, %dec_label_pc_11644
  %v0_1165c = load i32, i32* @r5, align 4
  %v1_1165c = add i32 %v0_1165c, 12
  %v2_1165c = inttoptr i32 %v1_1165c to i32*
  %v3_1165c = load i32, i32* %v2_1165c, align 4
  store i32 %v3_1165c, i32* %r2.global-to-local, align 4
  %v1_11660 = add i32 %v3_1165c, -2
  store i32 %v1_11660, i32* %r3.global-to-local, align 4
  %v7_11664 = icmp eq i32 %v1_11660, 8
  store i1 %v7_11664, i1* %cpsr_z.global-to-local, align 1
  %v5_11668 = and i32 %v1_11660, 1073741824
  %v6_11668 = icmp ne i32 %v5_11668, 0
  store i1 %v6_11668, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_1165c, label %dec_label_pc_115dc.loopexit [
    i32 2, label %dec_label_pc_11694
    i32 3, label %dec_label_pc_11778
    i32 4, label %dec_label_pc_11810
    i32 5, label %dec_label_pc_118a0
    i32 6, label %dec_label_pc_11954
    i32 7, label %dec_label_pc_11abc
    i32 8, label %dec_label_pc_11a08
    i32 9, label %dec_label_pc_11c18
    i32 10, label %dec_label_pc_11b70
  ]

dec_label_pc_11694:                               ; preds = %dec_label_pc_1165c
  %v1_11694 = add i32 %v0_1165c, 24
  %v2_11694 = inttoptr i32 %v1_11694 to i32*
  %v3_11694 = load i32, i32* %v2_11694, align 4
  store i32 %v3_11694, i32* %ip.global-to-local, align 4
  %v0_11698 = load i32, i32* @sl, align 4
  store i32 %v0_11698, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_116a0 = add i32 %v0_1165c, 29
  store i32 %v1_116a0, i32* @r4, align 4
  store i32 -3, i32* %r8.global-to-local, align 4
  %v3_116a8102 = icmp eq i32 %v3_11694, 0
  store i1 %v3_116a8102, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_116a8102, i1* %cpsr_z.global-to-local, align 1
  %v6_116ac109 = icmp sgt i32 %v3_11694, 0
  br i1 %v6_116ac109, label %dec_label_pc_116b0.preheader, label %dec_label_pc_11758

dec_label_pc_116a8.loopexit:                      ; preds = %dec_label_pc_116c8
  %v2_116d0 = add i32 %v1_116d0, 2
  store i32 %v2_116d0, i32* @r6, align 4
  %v2_116d4 = add i32 %v1_116d4, 2
  store i32 %v2_116d4, i32* @r4, align 4
  %v2_116d8 = add i32 %v1_116d8, 2
  store i32 %v2_116d8, i32* @r7, align 4
  %v3_116a8 = icmp uge i32 %v2_116d8, %v1_116a8
  store i1 %v3_116a8, i1* %cpsr_c.global-to-local, align 1
  %v9_116a8 = icmp eq i32 %v2_116d8, %v1_116a8
  store i1 %v9_116a8, i1* %cpsr_z.global-to-local, align 1
  %v6_116ac = icmp slt i32 %v2_116d8, %v1_116a8
  br i1 %v6_116ac, label %dec_label_pc_116b0.preheader, label %dec_label_pc_11758

dec_label_pc_116b0.preheader:                     ; preds = %dec_label_pc_11694, %dec_label_pc_116a8.loopexit
  %v6_11760184 = phi i32 [ %v6_11760185, %dec_label_pc_116a8.loopexit ], [ %v0_1165c, %dec_label_pc_11694 ]
  %v1_116d8173 = phi i32 [ %v2_116d8, %dec_label_pc_116a8.loopexit ], [ 0, %dec_label_pc_11694 ]
  %v1_116d0171 = phi i32 [ %v2_116d0, %dec_label_pc_116a8.loopexit ], [ %v0_11698, %dec_label_pc_11694 ]
  %v1_116bc169 = phi i32 [ %v1_116a8, %dec_label_pc_116a8.loopexit ], [ %v3_11694, %dec_label_pc_11694 ]
  %v0_116b0167 = phi i32 [ %v2_116d4, %dec_label_pc_116a8.loopexit ], [ %v1_116a0, %dec_label_pc_11694 ]
  br label %dec_label_pc_116b0

dec_label_pc_116b0:                               ; preds = %dec_label_pc_116b0.preheader, %dec_label_pc_11738
  %v6_11760185 = phi i32 [ %v6_11760184, %dec_label_pc_116b0.preheader ], [ %v0_11740, %dec_label_pc_11738 ]
  %v1_116d8 = phi i32 [ %v1_116d8173, %dec_label_pc_116b0.preheader ], [ %v1_11744, %dec_label_pc_11738 ]
  %v1_116d0 = phi i32 [ %v1_116d0171, %dec_label_pc_116b0.preheader ], [ %v1_1174c, %dec_label_pc_11738 ]
  %v1_116a8 = phi i32 [ %v1_116bc169, %dec_label_pc_116b0.preheader ], [ %v3_11740, %dec_label_pc_11738 ]
  %v1_116d4 = phi i32 [ %v0_116b0167, %dec_label_pc_116b0.preheader ], [ %v1_11750, %dec_label_pc_11738 ]
  %v1_116b0 = add i32 %v1_116d4, -1
  %v2_116b0 = inttoptr i32 %v1_116b0 to i8*
  %v3_116b0 = load i8, i8* %v2_116b0, align 1
  %v4_116b0 = zext i8 %v3_116b0 to i32
  store i32 %v4_116b0, i32* %r3.global-to-local, align 4
  %v2_116b4 = icmp eq i8 %v3_116b0, -1
  store i1 %v2_116b4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_116b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116b4, label %dec_label_pc_116bc, label %dec_label_pc_11758

dec_label_pc_116bc:                               ; preds = %dec_label_pc_116b0
  %v0_116bc = load i32, i32* @sl, align 4
  %v2_116bc = add i32 %v0_116bc, %v1_116a8
  store i32 %v2_116bc, i32* %r2.global-to-local, align 4
  %v3_116c0 = icmp uge i32 %v2_116bc, %v1_116d4
  store i1 %v3_116c0, i1* %cpsr_c.global-to-local, align 1
  %v9_116c0 = icmp eq i32 %v2_116bc, %v1_116d4
  store i1 %v9_116c0, i1* %cpsr_z.global-to-local, align 1
  %v2_116c4 = xor i1 %v3_116c0, true
  %v3_116c4 = or i1 %v9_116c0, %v2_116c4
  br i1 %v3_116c4, label %dec_label_pc_11758, label %dec_label_pc_116c8

dec_label_pc_116c8:                               ; preds = %dec_label_pc_116bc
  %v1_116c8 = inttoptr i32 %v1_116d4 to i8*
  %v2_116c8 = load i8, i8* %v1_116c8, align 1
  %v3_116c8 = zext i8 %v2_116c8 to i32
  store i32 %v3_116c8, i32* %r3.global-to-local, align 4
  %v2_116cc = icmp eq i8 %v2_116c8, -1
  store i1 %v2_116cc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_116cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116cc, label %dec_label_pc_116a8.loopexit, label %dec_label_pc_116e0

dec_label_pc_116e0:                               ; preds = %dec_label_pc_116c8
  %v2_116e0 = icmp ugt i8 %v2_116c8, -4
  store i1 %v2_116e0, i1* %cpsr_c.global-to-local, align 1
  %v7_116e0 = icmp eq i8 %v2_116c8, -3
  store i1 %v7_116e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_116e0, label %dec_label_pc_11ccc, label %dec_label_pc_116e8

dec_label_pc_116e8:                               ; preds = %dec_label_pc_116e0
  %v1_116e8 = add i32 %v1_116d0, 2
  store i32 %v1_116e8, i32* %r3.global-to-local, align 4
  %v3_116ec = icmp uge i32 %v2_116bc, %v1_116e8
  store i1 %v3_116ec, i1* %cpsr_c.global-to-local, align 1
  %v9_116ec = icmp eq i32 %v2_116bc, %v1_116e8
  store i1 %v9_116ec, i1* %cpsr_z.global-to-local, align 1
  %v2_116f0 = xor i1 %v3_116ec, true
  %v3_116f0 = or i1 %v9_116ec, %v2_116f0
  br i1 %v3_116f0, label %dec_label_pc_11758, label %dec_label_pc_116f4

dec_label_pc_116f4:                               ; preds = %bb344, %dec_label_pc_11d28, %.thread75, %dec_label_pc_116e8
  %v0_116f4 = load i32, i32* @r4, align 4
  %v1_116f4 = inttoptr i32 %v0_116f4 to i8*
  %v2_116f4 = load i8, i8* %v1_116f4, align 1
  %v3_116f4 = zext i8 %v2_116f4 to i32
  store i32 %v3_116f4, i32* %r3.global-to-local, align 4
  %v2_116f8 = icmp ugt i8 %v2_116f4, -4
  store i1 %v2_116f8, i1* %cpsr_c.global-to-local, align 1
  %v7_116f8 = icmp eq i8 %v2_116f4, -3
  store i1 %v7_116f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_116f8, label %.thread62, label %dec_label_pc_11708

.thread62:                                        ; preds = %dec_label_pc_116f4
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_116f4, align 1
  %v0_11704.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11704.pr.pr, label %bb324, label %.thread62.dec_label_pc_11708thread-pre-split_crit_edge

.thread62.dec_label_pc_11708thread-pre-split_crit_edge: ; preds = %.thread62
  %v0_11708.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11708

dec_label_pc_11708:                               ; preds = %dec_label_pc_116f4, %.thread62.dec_label_pc_11708thread-pre-split_crit_edge
  %v0_11708.pr = phi i32 [ %v0_11708.pr.pre, %.thread62.dec_label_pc_11708thread-pre-split_crit_edge ], [ %v3_116f4, %dec_label_pc_116f4 ]
  %v2_11708 = icmp ugt i32 %v0_11708.pr, 250
  store i1 %v2_11708, i1* %cpsr_c.global-to-local, align 1
  %v7_11708 = icmp eq i32 %v0_11708.pr, 251
  store i1 %v7_11708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11708, label %bb323, label %bb324

bb323:                                            ; preds = %dec_label_pc_11708
  %v1_1170c = load i32, i32* %r8.global-to-local, align 4
  %v2_1170c = trunc i32 %v1_1170c to i8
  %v3_1170c = load i32, i32* @r4, align 4
  %v4_1170c = inttoptr i32 %v3_1170c to i8*
  store i8 %v2_1170c, i8* %v4_1170c, align 1
  br label %bb324

bb324:                                            ; preds = %.thread62, %dec_label_pc_11708, %bb323
  %v0_11710 = load i32, i32* @r4, align 4
  %v1_11710 = add i32 %v0_11710, 1
  %v2_11710 = inttoptr i32 %v1_11710 to i8*
  %v3_11710 = load i8, i8* %v2_11710, align 1
  %v4_11710 = zext i8 %v3_11710 to i32
  store i32 %v4_11710, i32* %r3.global-to-local, align 4
  %v2_11714 = icmp ugt i8 %v3_11710, -4
  store i1 %v2_11714, i1* %cpsr_c.global-to-local, align 1
  %v7_11714 = icmp eq i8 %v3_11710, -3
  store i1 %v7_11714, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11714, label %.thread65, label %dec_label_pc_11724

.thread65:                                        ; preds = %bb324
  store i32 -4, i32* %ip.global-to-local, align 4
  store i8 -4, i8* %v2_11710, align 1
  %v0_11720.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11720.pr.pr, label %bb326, label %.thread65.dec_label_pc_11724_crit_edge

.thread65.dec_label_pc_11724_crit_edge:           ; preds = %.thread65
  %v0_11724.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11724

dec_label_pc_11724:                               ; preds = %.thread65.dec_label_pc_11724_crit_edge, %bb324
  %v0_11724 = phi i32 [ %v0_11724.pre, %.thread65.dec_label_pc_11724_crit_edge ], [ %v4_11710, %bb324 ]
  %v2_11724 = icmp ugt i32 %v0_11724, 250
  store i1 %v2_11724, i1* %cpsr_c.global-to-local, align 1
  %v7_11724 = icmp eq i32 %v0_11724, 251
  store i1 %v7_11724, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11724, label %bb325, label %bb326

bb325:                                            ; preds = %dec_label_pc_11724
  %v1_11728 = load i32, i32* %r8.global-to-local, align 4
  %v2_11728 = trunc i32 %v1_11728 to i8
  %v3_11728 = load i32, i32* @r4, align 4
  %v4_11728 = add i32 %v3_11728, 1
  %v5_11728 = inttoptr i32 %v4_11728 to i8*
  store i8 %v2_11728, i8* %v5_11728, align 1
  br label %bb326

bb326:                                            ; preds = %.thread65, %dec_label_pc_11724, %bb325
  %v0_1172c = load i32, i32* @r5, align 4
  %v1_1172c = add i32 %v0_1172c, 4
  %v2_1172c = inttoptr i32 %v1_1172c to i32*
  %v3_1172c = load i32, i32* %v2_1172c, align 4
  store i32 %v3_1172c, i32* %r0.global-to-local, align 4
  %v0_11730 = load i32, i32* @r6, align 4
  br label %dec_label_pc_11738

dec_label_pc_11738:                               ; preds = %dec_label_pc_11e98, %bb326
  %v0_1173c = phi i32 [ %v3_11eb4, %dec_label_pc_11e98 ], [ %v3_1172c, %bb326 ]
  %storemerge8 = phi i32 [ %v2_11ce8, %dec_label_pc_11e98 ], [ %v0_11730, %bb326 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_11e98 ], [ 3, %bb326 ]
  store i32 %storemerge8, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1173c = inttoptr i32 %storemerge8 to i32*
  %v5_1173c = call i32 @function_13e2c(i32 %v0_1173c, i32* %v4_1173c, i32 %storemerge, i32 16384)
  store i32 %v5_1173c, i32* %r0.global-to-local, align 4
  %v0_11740 = load i32, i32* @r5, align 4
  %v1_11740 = add i32 %v0_11740, 24
  %v2_11740 = inttoptr i32 %v1_11740 to i32*
  %v3_11740 = load i32, i32* %v2_11740, align 4
  store i32 %v3_11740, i32* %ip.global-to-local, align 4
  %v0_11744 = load i32, i32* @r7, align 4
  %v1_11744 = add i32 %v0_11744, 3
  store i32 %v1_11744, i32* @r7, align 4
  %v3_11748 = icmp uge i32 %v1_11744, %v3_11740
  store i1 %v3_11748, i1* %cpsr_c.global-to-local, align 1
  %v9_11748 = icmp eq i32 %v1_11744, %v3_11740
  store i1 %v9_11748, i1* %cpsr_z.global-to-local, align 1
  %v0_1174c = load i32, i32* @r6, align 4
  %v1_1174c = add i32 %v0_1174c, 3
  store i32 %v1_1174c, i32* @r6, align 4
  %v0_11750 = load i32, i32* @r4, align 4
  %v1_11750 = add i32 %v0_11750, 3
  store i32 %v1_11750, i32* @r4, align 4
  %v5_11754 = icmp slt i32 %v1_11744, %v3_11740
  br i1 %v5_11754, label %dec_label_pc_116b0, label %dec_label_pc_11758

dec_label_pc_11758:                               ; preds = %dec_label_pc_116a8.loopexit, %dec_label_pc_116b0, %dec_label_pc_11738, %dec_label_pc_116e8, %dec_label_pc_116bc, %dec_label_pc_11694, %dec_label_pc_11ccc.dec_label_pc_11758.loopexit_crit_edge
  %v6_11760 = phi i32 [ %v0_11cf4, %dec_label_pc_11ccc.dec_label_pc_11758.loopexit_crit_edge ], [ %v0_1165c, %dec_label_pc_11694 ], [ %v6_11760185, %dec_label_pc_116b0 ], [ %v0_11740, %dec_label_pc_11738 ], [ %v6_11760185, %dec_label_pc_116e8 ], [ %v6_11760185, %dec_label_pc_116bc ], [ %v6_11760185, %dec_label_pc_116a8.loopexit ]
  %v0_11768.pre = phi i32 [ %v0_11758.pre.pre, %dec_label_pc_11ccc.dec_label_pc_11758.loopexit_crit_edge ], [ 0, %dec_label_pc_11694 ], [ %v1_116d8, %dec_label_pc_116b0 ], [ %v1_11744, %dec_label_pc_11738 ], [ %v1_116d8, %dec_label_pc_116e8 ], [ %v1_116d8, %dec_label_pc_116bc ], [ %v2_116d8, %dec_label_pc_116a8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11758 = icmp eq i32 %v0_11768.pre, 0
  store i1 %v2_11758, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v0_11768.pre, 1
  br i1 %tmp327, label %dec_label_pc_11768, label %.thread223

.thread223:                                       ; preds = %dec_label_pc_11758
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_11760 = add i32 %v6_11760, 12
  %v8_11760 = inttoptr i32 %v7_11760 to i32*
  store i32 3, i32* %v8_11760, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11768:                               ; preds = %dec_label_pc_11758, %dec_label_pc_11c6c, %dec_label_pc_11dd4, %dec_label_pc_11b10, %dec_label_pc_11a5c, %dec_label_pc_119a8, %dec_label_pc_118f4, %dec_label_pc_1185c, %dec_label_pc_117cc
  %v0_11768 = phi i32 [ %v1_11c60, %dec_label_pc_11c6c ], [ %v0_11dcc, %dec_label_pc_11dd4 ], [ %v1_11b04, %dec_label_pc_11b10 ], [ %v1_11a50, %dec_label_pc_11a5c ], [ %v1_1199c, %dec_label_pc_119a8 ], [ %v1_118e8, %dec_label_pc_118f4 ], [ %v0_1185c, %dec_label_pc_1185c ], [ %v0_117cc, %dec_label_pc_117cc ], [ %v0_11768.pre, %dec_label_pc_11758 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11768 = icmp eq i32 %v0_11768, 0
  store i1 %v2_11768, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11768, label %dec_label_pc_115dc.loopexit, label %dec_label_pc_11770

dec_label_pc_11770:                               ; preds = %dec_label_pc_11768
  %v0_11770 = load i32, i32* @r5, align 4
  %v1_11770 = add i32 %v0_11770, 24
  %v2_11770 = inttoptr i32 %v1_11770 to i32*
  %v3_11770 = load i32, i32* %v2_11770, align 4
  store i32 %v3_11770, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11778:                               ; preds = %dec_label_pc_1165c
  %v1_11778 = add i32 %v0_1165c, 24
  %v2_11778 = inttoptr i32 %v1_11778 to i32*
  %v3_11778 = load i32, i32* %v2_11778, align 4
  store i32 %v3_11778, i32* %ip.global-to-local, align 4
  %v1_1177c = add i32 %v3_11778, -1
  store i32 %v1_1177c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11780 = icmp eq i32 %v1_1177c, 0
  store i1 %v2_11780, i1* %cpsr_z.global-to-local, align 1
  %v5_11784 = icmp sgt i32 %v1_1177c, 0
  br i1 %v5_11784, label %dec_label_pc_117ac, label %dec_label_pc_11564

dec_label_pc_1178c:                               ; preds = %bb328
  %v2_1178c = icmp ugt i8 %v3_117b0, 35
  store i1 %v2_1178c, i1* %cpsr_c.global-to-local, align 1
  %v7_1178c = icmp eq i8 %v3_117b0, 36
  store i1 %v7_1178c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1178c, label %dec_label_pc_117c0, label %dec_label_pc_11794

dec_label_pc_11794:                               ; preds = %dec_label_pc_1178c
  %v2_11794 = icmp ugt i8 %v3_117b0, 34
  store i1 %v2_11794, i1* %cpsr_c.global-to-local, align 1
  %v7_11794 = icmp eq i8 %v3_117b0, 35
  store i1 %v7_11794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11794, label %dec_label_pc_117c0, label %dec_label_pc_1179c

dec_label_pc_1179c:                               ; preds = %dec_label_pc_11794
  %v2_1179c = icmp ugt i8 %v3_117b0, 36
  store i1 %v2_1179c, i1* %cpsr_c.global-to-local, align 1
  %v7_1179c = icmp eq i8 %v3_117b0, 37
  store i1 %v7_1179c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1179c, label %dec_label_pc_117c0, label %dec_label_pc_117a4

dec_label_pc_117a4:                               ; preds = %dec_label_pc_1179c
  %v1_117a4 = add i32 %v0_117c0, -1
  store i32 %v1_117a4, i32* %r0.global-to-local, align 4
  %v2_117a4 = icmp ne i32 %v0_117c0, 0
  store i1 %v2_117a4, i1* %cpsr_c.global-to-local, align 1
  %v7_117a4 = icmp eq i32 %v0_117c0, 1
  store i1 %v7_117a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117a4, label %dec_label_pc_11564, label %dec_label_pc_117ac

dec_label_pc_117ac:                               ; preds = %dec_label_pc_11778, %dec_label_pc_117a4
  %v0_117c0 = phi i32 [ %v1_117a4, %dec_label_pc_117a4 ], [ %v1_1177c, %dec_label_pc_11778 ]
  %v2_117ac = add i32 %v0_117c0, %v0_1165c
  store i32 %v2_117ac, i32* %r3.global-to-local, align 4
  %v1_117b0 = add i32 %v2_117ac, 28
  %v2_117b0 = inttoptr i32 %v1_117b0 to i8*
  %v3_117b0 = load i8, i8* %v2_117b0, align 1
  %v4_117b0 = zext i8 %v3_117b0 to i32
  store i32 %v4_117b0, i32* %r3.global-to-local, align 4
  %v2_117b4 = icmp ugt i8 %v3_117b0, 61
  store i1 %v2_117b4, i1* %cpsr_c.global-to-local, align 1
  %v7_117b4 = icmp eq i8 %v3_117b0, 62
  store i1 %v7_117b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117b4, label %dec_label_pc_117c0, label %bb328

bb328:                                            ; preds = %dec_label_pc_117ac
  %v3_117b8 = icmp ugt i8 %v3_117b0, 57
  store i1 %v3_117b8, i1* %cpsr_c.global-to-local, align 1
  %v8_117b8 = icmp eq i8 %v3_117b0, 58
  store i1 %v8_117b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_117b8, label %dec_label_pc_117c0, label %dec_label_pc_1178c

dec_label_pc_117c0:                               ; preds = %dec_label_pc_117ac, %bb328, %dec_label_pc_1179c, %dec_label_pc_11794, %dec_label_pc_1178c
  %v1_117c0 = add i32 %v0_117c0, 1
  store i32 %v1_117c0, i32* @r7, align 4
  %v2_117c4 = icmp eq i32 %v1_117c0, -1
  store i1 %v2_117c4, i1* %cpsr_c.global-to-local, align 1
  %v7_117c4 = icmp eq i32 %v0_117c0, -2
  store i1 %v7_117c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117c4, label %dec_label_pc_11564, label %dec_label_pc_117cc

dec_label_pc_117cc:                               ; preds = %dec_label_pc_115c4, %dec_label_pc_117c0
  %v0_117cc = phi i32 [ %v0_115d4, %dec_label_pc_115c4 ], [ %v1_117c0, %dec_label_pc_117c0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_117cc = icmp eq i32 %v0_117cc, 0
  store i1 %v2_117cc, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v0_117cc, 1
  br i1 %tmp329, label %dec_label_pc_11768, label %dec_label_pc_117d4

dec_label_pc_117d4:                               ; preds = %dec_label_pc_117cc
  %v0_117d4 = load i32, i32* @r5, align 4
  %v1_117d4 = inttoptr i32 %v0_117d4 to i32*
  %v2_117d4 = load i32, i32* %v1_117d4, align 4
  store i32 %v2_117d4, i32* %r3.global-to-local, align 4
  %v1_117d8 = add i32 %v0_117d4, 4
  %v2_117d8 = inttoptr i32 %v1_117d8 to i32*
  %v3_117d8 = load i32, i32* %v2_117d8, align 4
  store i32 %v3_117d8, i32* %r0.global-to-local, align 4
  %v1_117dc = add i32 %v2_117d4, 12
  %v2_117dc = inttoptr i32 %v1_117dc to i8*
  %v3_117dc = load i8, i8* %v2_117dc, align 1
  %v4_117dc = zext i8 %v3_117dc to i32
  store i32 %v4_117dc, i32* %r2.global-to-local, align 4
  %v1_117e0 = inttoptr i32 %v2_117d4 to i32*
  %v2_117e0 = load i32, i32* %v1_117e0, align 4
  store i32 %v2_117e0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_117e8 = inttoptr i32 %v2_117e0 to i32*
  %v5_117e8 = call i32 @function_13e2c(i32 %v3_117d8, i32* %v4_117e8, i32 %v4_117dc, i32 16384)
  store i32 %v5_117e8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_117f0 = load i32, i32* @r5, align 4
  %v1_117f0 = add i32 %v0_117f0, 4
  %v2_117f0 = inttoptr i32 %v1_117f0 to i32*
  %v3_117f0 = load i32, i32* %v2_117f0, align 4
  store i32 %v3_117f0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_117fc = call i32 @function_13e2c(i32 %v3_117f0, i32* bitcast ([3 x i8]* @global_var_15cc8.34 to i32*), i32 2, i32 16384)
  store i32 %v5_117fc, i32* %r0.global-to-local, align 4
  %v0_11800 = load i32, i32* @r5, align 4
  %v1_11800 = add i32 %v0_11800, 24
  %v2_11800 = inttoptr i32 %v1_11800 to i32*
  %v3_11800 = load i32, i32* %v2_11800, align 4
  store i32 %v3_11800, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_11808 = add i32 %v0_11800, 12
  %v3_11808 = inttoptr i32 %v2_11808 to i32*
  store i32 4, i32* %v3_11808, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11810:                               ; preds = %dec_label_pc_1165c
  %v1_11810 = add i32 %v0_1165c, 24
  %v2_11810 = inttoptr i32 %v1_11810 to i32*
  %v3_11810 = load i32, i32* %v2_11810, align 4
  store i32 %v3_11810, i32* %ip.global-to-local, align 4
  %v1_11814 = add i32 %v3_11810, -1
  store i32 %v1_11814, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11818 = icmp eq i32 %v1_11814, 0
  store i1 %v2_11818, i1* %cpsr_z.global-to-local, align 1
  %v5_1181c = icmp sgt i32 %v1_11814, 0
  br i1 %v5_1181c, label %dec_label_pc_1183c, label %dec_label_pc_11d34

dec_label_pc_11824:                               ; preds = %bb330
  %v2_11824 = icmp ugt i8 %v3_11840, 35
  store i1 %v2_11824, i1* %cpsr_c.global-to-local, align 1
  %v7_11824 = icmp eq i8 %v3_11840, 36
  store i1 %v7_11824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11824, label %dec_label_pc_11850, label %dec_label_pc_1182c

dec_label_pc_1182c:                               ; preds = %dec_label_pc_11824
  %v2_1182c = icmp ugt i8 %v3_11840, 34
  store i1 %v2_1182c, i1* %cpsr_c.global-to-local, align 1
  %v7_1182c = icmp eq i8 %v3_11840, 35
  store i1 %v7_1182c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1182c, label %dec_label_pc_11850, label %dec_label_pc_11834

dec_label_pc_11834:                               ; preds = %dec_label_pc_1182c
  %v1_11834 = add i32 %v0_11850, -1
  store i32 %v1_11834, i32* %r0.global-to-local, align 4
  %v2_11834 = icmp ne i32 %v0_11850, 0
  store i1 %v2_11834, i1* %cpsr_c.global-to-local, align 1
  %v7_11834 = icmp eq i32 %v0_11850, 1
  store i1 %v7_11834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11834, label %dec_label_pc_11d34, label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %dec_label_pc_11810, %dec_label_pc_11834
  %v0_11850 = phi i32 [ %v1_11834, %dec_label_pc_11834 ], [ %v1_11814, %dec_label_pc_11810 ]
  %v2_1183c = add i32 %v0_11850, %v0_1165c
  store i32 %v2_1183c, i32* %r3.global-to-local, align 4
  %v1_11840 = add i32 %v2_1183c, 28
  %v2_11840 = inttoptr i32 %v1_11840 to i8*
  %v3_11840 = load i8, i8* %v2_11840, align 1
  %v4_11840 = zext i8 %v3_11840 to i32
  store i32 %v4_11840, i32* %r3.global-to-local, align 4
  %v2_11844 = icmp ugt i8 %v3_11840, 61
  store i1 %v2_11844, i1* %cpsr_c.global-to-local, align 1
  %v7_11844 = icmp eq i8 %v3_11840, 62
  store i1 %v7_11844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11844, label %dec_label_pc_11850, label %bb330

bb330:                                            ; preds = %dec_label_pc_1183c
  %v3_11848 = icmp ugt i8 %v3_11840, 57
  store i1 %v3_11848, i1* %cpsr_c.global-to-local, align 1
  %v8_11848 = icmp eq i8 %v3_11840, 58
  store i1 %v8_11848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11848, label %dec_label_pc_11850, label %dec_label_pc_11824

dec_label_pc_11850:                               ; preds = %dec_label_pc_1183c, %bb330, %dec_label_pc_1182c, %dec_label_pc_11824
  %v1_11850 = add i32 %v0_11850, 1
  store i32 %v1_11850, i32* @r7, align 4
  %v2_11854 = icmp eq i32 %v1_11850, -1
  store i1 %v2_11854, i1* %cpsr_c.global-to-local, align 1
  %v7_11854 = icmp eq i32 %v0_11850, -2
  store i1 %v7_11854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11854, label %dec_label_pc_11d34, label %dec_label_pc_1185c

dec_label_pc_1185c:                               ; preds = %dec_label_pc_11d74, %dec_label_pc_11850
  %v0_1185c = phi i32 [ %v0_11d7c, %dec_label_pc_11d74 ], [ %v1_11850, %dec_label_pc_11850 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1185c = icmp eq i32 %v0_1185c, 0
  store i1 %v2_1185c, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v0_1185c, 1
  br i1 %tmp331, label %dec_label_pc_11768, label %dec_label_pc_11864

dec_label_pc_11864:                               ; preds = %dec_label_pc_1185c
  %v0_11864 = load i32, i32* @r5, align 4
  %v1_11864 = inttoptr i32 %v0_11864 to i32*
  %v2_11864 = load i32, i32* %v1_11864, align 4
  store i32 %v2_11864, i32* %r3.global-to-local, align 4
  %v1_11868 = add i32 %v0_11864, 4
  %v2_11868 = inttoptr i32 %v1_11868 to i32*
  %v3_11868 = load i32, i32* %v2_11868, align 4
  store i32 %v3_11868, i32* %r0.global-to-local, align 4
  %v1_1186c = add i32 %v2_11864, 13
  %v2_1186c = inttoptr i32 %v1_1186c to i8*
  %v3_1186c = load i8, i8* %v2_1186c, align 1
  %v4_1186c = zext i8 %v3_1186c to i32
  store i32 %v4_1186c, i32* %r2.global-to-local, align 4
  %v1_11870 = add i32 %v2_11864, 4
  %v2_11870 = inttoptr i32 %v1_11870 to i32*
  %v3_11870 = load i32, i32* %v2_11870, align 4
  store i32 %v3_11870, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11878 = inttoptr i32 %v3_11870 to i32*
  %v5_11878 = call i32 @function_13e2c(i32 %v3_11868, i32* %v4_11878, i32 %v4_1186c, i32 16384)
  store i32 %v5_11878, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_11880 = load i32, i32* @r5, align 4
  %v1_11880 = add i32 %v0_11880, 4
  %v2_11880 = inttoptr i32 %v1_11880 to i32*
  %v3_11880 = load i32, i32* %v2_11880, align 4
  store i32 %v3_11880, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_1188c = call i32 @function_13e2c(i32 %v3_11880, i32* bitcast ([3 x i8]* @global_var_15cc8.34 to i32*), i32 2, i32 16384)
  store i32 %v5_1188c, i32* %r0.global-to-local, align 4
  %v0_11890 = load i32, i32* @r5, align 4
  %v1_11890 = add i32 %v0_11890, 24
  %v2_11890 = inttoptr i32 %v1_11890 to i32*
  %v3_11890 = load i32, i32* %v2_11890, align 4
  store i32 %v3_11890, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_11898 = add i32 %v0_11890, 12
  %v3_11898 = inttoptr i32 %v2_11898 to i32*
  store i32 5, i32* %v3_11898, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_118a0:                               ; preds = %dec_label_pc_1165c
  %v1_118a0 = add i32 %v0_1165c, 24
  %v2_118a0 = inttoptr i32 %v1_118a0 to i32*
  %v3_118a0 = load i32, i32* %v2_118a0, align 4
  store i32 %v3_118a0, i32* %ip.global-to-local, align 4
  %v1_118a4 = add i32 %v3_118a0, -1
  store i32 %v1_118a4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118a8 = icmp eq i32 %v1_118a4, 0
  store i1 %v2_118a8, i1* %cpsr_z.global-to-local, align 1
  %v5_118ac = icmp sgt i32 %v1_118a4, 0
  br i1 %v5_118ac, label %dec_label_pc_118d4, label %dec_label_pc_115e0.backedge.thread

dec_label_pc_118b4:                               ; preds = %bb332
  %v2_118b4 = icmp ugt i8 %v3_118d8, 35
  store i1 %v2_118b4, i1* %cpsr_c.global-to-local, align 1
  %v7_118b4 = icmp eq i8 %v3_118d8, 36
  store i1 %v7_118b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118b4, label %dec_label_pc_118e8, label %dec_label_pc_118bc

dec_label_pc_118bc:                               ; preds = %dec_label_pc_118b4
  %v2_118bc = icmp ugt i8 %v3_118d8, 34
  store i1 %v2_118bc, i1* %cpsr_c.global-to-local, align 1
  %v7_118bc = icmp eq i8 %v3_118d8, 35
  store i1 %v7_118bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118bc, label %dec_label_pc_118e8, label %dec_label_pc_118c4

dec_label_pc_118c4:                               ; preds = %dec_label_pc_118bc
  %v2_118c4 = icmp ugt i8 %v3_118d8, 36
  store i1 %v2_118c4, i1* %cpsr_c.global-to-local, align 1
  %v7_118c4 = icmp eq i8 %v3_118d8, 37
  store i1 %v7_118c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118c4, label %dec_label_pc_118e8, label %dec_label_pc_118cc

dec_label_pc_118cc:                               ; preds = %dec_label_pc_118c4
  %v1_118cc = add i32 %v0_118e8, -1
  store i32 %v1_118cc, i32* %r0.global-to-local, align 4
  %v2_118cc = icmp ne i32 %v0_118e8, 0
  store i1 %v2_118cc, i1* %cpsr_c.global-to-local, align 1
  %v7_118cc = icmp eq i32 %v0_118e8, 1
  store i1 %v7_118cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118cc, label %dec_label_pc_115e0.backedge.thread455, label %dec_label_pc_118d4

dec_label_pc_118d4:                               ; preds = %dec_label_pc_118a0, %dec_label_pc_118cc
  %v0_118e8 = phi i32 [ %v1_118cc, %dec_label_pc_118cc ], [ %v1_118a4, %dec_label_pc_118a0 ]
  %v2_118d4 = add i32 %v0_118e8, %v0_1165c
  store i32 %v2_118d4, i32* %r3.global-to-local, align 4
  %v1_118d8 = add i32 %v2_118d4, 28
  %v2_118d8 = inttoptr i32 %v1_118d8 to i8*
  %v3_118d8 = load i8, i8* %v2_118d8, align 1
  %v4_118d8 = zext i8 %v3_118d8 to i32
  store i32 %v4_118d8, i32* %r3.global-to-local, align 4
  %v2_118dc = icmp ugt i8 %v3_118d8, 61
  store i1 %v2_118dc, i1* %cpsr_c.global-to-local, align 1
  %v7_118dc = icmp eq i8 %v3_118d8, 62
  store i1 %v7_118dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118dc, label %dec_label_pc_118e8, label %bb332

bb332:                                            ; preds = %dec_label_pc_118d4
  %v3_118e0 = icmp ugt i8 %v3_118d8, 57
  store i1 %v3_118e0, i1* %cpsr_c.global-to-local, align 1
  %v8_118e0 = icmp eq i8 %v3_118d8, 58
  store i1 %v8_118e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_118e0, label %dec_label_pc_118e8, label %dec_label_pc_118b4

dec_label_pc_118e8:                               ; preds = %dec_label_pc_118d4, %bb332, %dec_label_pc_118c4, %dec_label_pc_118bc, %dec_label_pc_118b4
  %v1_118e8 = add i32 %v0_118e8, 1
  store i32 %v1_118e8, i32* @r7, align 4
  %v2_118ec = icmp eq i32 %v1_118e8, -1
  store i1 %v2_118ec, i1* %cpsr_c.global-to-local, align 1
  %v7_118ec = icmp eq i32 %v0_118e8, -2
  store i1 %v7_118ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118ec, label %dec_label_pc_115e0.backedge.thread455, label %dec_label_pc_118f4

dec_label_pc_118f4:                               ; preds = %dec_label_pc_118e8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118f4 = icmp eq i32 %v1_118e8, 0
  store i1 %v2_118f4, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v1_118e8, 1
  br i1 %tmp333, label %dec_label_pc_11768, label %dec_label_pc_118fc

dec_label_pc_118fc:                               ; preds = %dec_label_pc_118f4
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11900 = call i32 @function_121d4(i32 23)
  store i32 %v2_11578, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_11910 = call i32 @function_120f0(i32 23, i32* %v2_11580)
  store i32 %v3_11910, i32* %r0.global-to-local, align 4
  %v3_11914 = load i8, i8* %stack_var_-52, align 1
  %v4_11914 = sext i8 %v3_11914 to i32
  store i32 %v4_11914, i32* %r2.global-to-local, align 4
  store i32 %v3_11910, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11920 = load i32, i32* @r5, align 4
  %v1_11920 = add i32 %v0_11920, 4
  %v2_11920 = inttoptr i32 %v1_11920 to i32*
  %v3_11920 = load i32, i32* %v2_11920, align 4
  store i32 %v3_11920, i32* %r0.global-to-local, align 4
  %v4_11924 = inttoptr i32 %v3_11910 to i32*
  %v5_11924 = call i32 @function_13e2c(i32 %v3_11920, i32* %v4_11924, i32 %v4_11914, i32 16384)
  store i32 %v5_11924, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11934 = load i32, i32* @r5, align 4
  %v1_11934 = add i32 %v0_11934, 4
  %v2_11934 = inttoptr i32 %v1_11934 to i32*
  %v3_11934 = load i32, i32* %v2_11934, align 4
  store i32 %v3_11934, i32* %r0.global-to-local, align 4
  %v5_11938 = call i32 @function_13e2c(i32 %v3_11934, i32* bitcast ([3 x i8]* @global_var_15cc8.34 to i32*), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11940 = call i32 @function_1211c(i32 23)
  store i32 %v1_11940, i32* %r0.global-to-local, align 4
  %v0_11944 = load i32, i32* @r5, align 4
  %v1_11944 = add i32 %v0_11944, 24
  %v2_11944 = inttoptr i32 %v1_11944 to i32*
  %v3_11944 = load i32, i32* %v2_11944, align 4
  store i32 %v3_11944, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_1194c = add i32 %v0_11944, 12
  %v3_1194c = inttoptr i32 %v2_1194c to i32*
  store i32 6, i32* %v3_1194c, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11954:                               ; preds = %dec_label_pc_1165c
  %v1_11954 = add i32 %v0_1165c, 24
  %v2_11954 = inttoptr i32 %v1_11954 to i32*
  %v3_11954 = load i32, i32* %v2_11954, align 4
  store i32 %v3_11954, i32* %ip.global-to-local, align 4
  %v1_11958 = add i32 %v3_11954, -1
  store i32 %v1_11958, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1195c = icmp eq i32 %v1_11958, 0
  store i1 %v2_1195c, i1* %cpsr_z.global-to-local, align 1
  %v5_11960 = icmp sgt i32 %v1_11958, 0
  br i1 %v5_11960, label %dec_label_pc_11988, label %dec_label_pc_115e0.backedge.thread

dec_label_pc_11968:                               ; preds = %bb334
  %v2_11968 = icmp ugt i8 %v3_1198c, 35
  store i1 %v2_11968, i1* %cpsr_c.global-to-local, align 1
  %v7_11968 = icmp eq i8 %v3_1198c, 36
  store i1 %v7_11968, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11968, label %dec_label_pc_1199c, label %dec_label_pc_11970

dec_label_pc_11970:                               ; preds = %dec_label_pc_11968
  %v2_11970 = icmp ugt i8 %v3_1198c, 34
  store i1 %v2_11970, i1* %cpsr_c.global-to-local, align 1
  %v7_11970 = icmp eq i8 %v3_1198c, 35
  store i1 %v7_11970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11970, label %dec_label_pc_1199c, label %dec_label_pc_11978

dec_label_pc_11978:                               ; preds = %dec_label_pc_11970
  %v2_11978 = icmp ugt i8 %v3_1198c, 36
  store i1 %v2_11978, i1* %cpsr_c.global-to-local, align 1
  %v7_11978 = icmp eq i8 %v3_1198c, 37
  store i1 %v7_11978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11978, label %dec_label_pc_1199c, label %dec_label_pc_11980

dec_label_pc_11980:                               ; preds = %dec_label_pc_11978
  %v1_11980 = add i32 %v0_1199c, -1
  store i32 %v1_11980, i32* %r0.global-to-local, align 4
  %v2_11980 = icmp ne i32 %v0_1199c, 0
  store i1 %v2_11980, i1* %cpsr_c.global-to-local, align 1
  %v7_11980 = icmp eq i32 %v0_1199c, 1
  store i1 %v7_11980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11980, label %dec_label_pc_115e0.backedge.thread455, label %dec_label_pc_11988

dec_label_pc_11988:                               ; preds = %dec_label_pc_11954, %dec_label_pc_11980
  %v0_1199c = phi i32 [ %v1_11980, %dec_label_pc_11980 ], [ %v1_11958, %dec_label_pc_11954 ]
  %v2_11988 = add i32 %v0_1199c, %v0_1165c
  store i32 %v2_11988, i32* %r3.global-to-local, align 4
  %v1_1198c = add i32 %v2_11988, 28
  %v2_1198c = inttoptr i32 %v1_1198c to i8*
  %v3_1198c = load i8, i8* %v2_1198c, align 1
  %v4_1198c = zext i8 %v3_1198c to i32
  store i32 %v4_1198c, i32* %r3.global-to-local, align 4
  %v2_11990 = icmp ugt i8 %v3_1198c, 61
  store i1 %v2_11990, i1* %cpsr_c.global-to-local, align 1
  %v7_11990 = icmp eq i8 %v3_1198c, 62
  store i1 %v7_11990, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11990, label %dec_label_pc_1199c, label %bb334

bb334:                                            ; preds = %dec_label_pc_11988
  %v3_11994 = icmp ugt i8 %v3_1198c, 57
  store i1 %v3_11994, i1* %cpsr_c.global-to-local, align 1
  %v8_11994 = icmp eq i8 %v3_1198c, 58
  store i1 %v8_11994, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11994, label %dec_label_pc_1199c, label %dec_label_pc_11968

dec_label_pc_1199c:                               ; preds = %dec_label_pc_11988, %bb334, %dec_label_pc_11978, %dec_label_pc_11970, %dec_label_pc_11968
  %v1_1199c = add i32 %v0_1199c, 1
  store i32 %v1_1199c, i32* @r7, align 4
  %v2_119a0 = icmp eq i32 %v1_1199c, -1
  store i1 %v2_119a0, i1* %cpsr_c.global-to-local, align 1
  %v7_119a0 = icmp eq i32 %v0_1199c, -2
  store i1 %v7_119a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119a0, label %dec_label_pc_115e0.backedge.thread455, label %dec_label_pc_119a8

dec_label_pc_119a8:                               ; preds = %dec_label_pc_1199c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_119a8 = icmp eq i32 %v1_1199c, 0
  store i1 %v2_119a8, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v1_1199c, 1
  br i1 %tmp335, label %dec_label_pc_11768, label %dec_label_pc_119b0

dec_label_pc_119b0:                               ; preds = %dec_label_pc_119a8
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_119b4 = call i32 @function_121d4(i32 24)
  store i32 %v2_1158c, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_119c4 = call i32 @function_120f0(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_119c4, i32* %r0.global-to-local, align 4
  %v3_119c8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_119c8, i32* %r2.global-to-local, align 4
  store i32 %v3_119c4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_119d4 = load i32, i32* @r5, align 4
  %v1_119d4 = add i32 %v0_119d4, 4
  %v2_119d4 = inttoptr i32 %v1_119d4 to i32*
  %v3_119d4 = load i32, i32* %v2_119d4, align 4
  store i32 %v3_119d4, i32* %r0.global-to-local, align 4
  %v4_119d8 = inttoptr i32 %v3_119c4 to i32*
  %v5_119d8 = call i32 @function_13e2c(i32 %v3_119d4, i32* %v4_119d8, i32 %v3_119c8, i32 16384)
  store i32 %v5_119d8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_119e8 = load i32, i32* @r5, align 4
  %v1_119e8 = add i32 %v0_119e8, 4
  %v2_119e8 = inttoptr i32 %v1_119e8 to i32*
  %v3_119e8 = load i32, i32* %v2_119e8, align 4
  store i32 %v3_119e8, i32* %r0.global-to-local, align 4
  %v5_119ec = call i32 @function_13e2c(i32 %v3_119e8, i32* bitcast ([3 x i8]* @global_var_15cc8.34 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_119f4 = call i32 @function_1211c(i32 24)
  store i32 %v1_119f4, i32* %r0.global-to-local, align 4
  %v0_119f8 = load i32, i32* @r5, align 4
  %v1_119f8 = add i32 %v0_119f8, 24
  %v2_119f8 = inttoptr i32 %v1_119f8 to i32*
  %v3_119f8 = load i32, i32* %v2_119f8, align 4
  store i32 %v3_119f8, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_11a00 = add i32 %v0_119f8, 12
  %v3_11a00 = inttoptr i32 %v2_11a00 to i32*
  store i32 7, i32* %v3_11a00, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11a08:                               ; preds = %dec_label_pc_1165c
  %v1_11a08 = add i32 %v0_1165c, 24
  %v2_11a08 = inttoptr i32 %v1_11a08 to i32*
  %v3_11a08 = load i32, i32* %v2_11a08, align 4
  store i32 %v3_11a08, i32* %ip.global-to-local, align 4
  %v1_11a0c = add i32 %v3_11a08, -1
  store i32 %v1_11a0c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a10 = icmp eq i32 %v1_11a0c, 0
  store i1 %v2_11a10, i1* %cpsr_z.global-to-local, align 1
  %v5_11a14 = icmp sgt i32 %v1_11a0c, 0
  br i1 %v5_11a14, label %dec_label_pc_11a3c, label %dec_label_pc_115e0.backedge.thread

dec_label_pc_11a1c:                               ; preds = %bb336
  %v2_11a1c = icmp ugt i8 %v3_11a40, 35
  store i1 %v2_11a1c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a1c = icmp eq i8 %v3_11a40, 36
  store i1 %v7_11a1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a1c, label %dec_label_pc_11a50, label %dec_label_pc_11a24

dec_label_pc_11a24:                               ; preds = %dec_label_pc_11a1c
  %v2_11a24 = icmp ugt i8 %v3_11a40, 34
  store i1 %v2_11a24, i1* %cpsr_c.global-to-local, align 1
  %v7_11a24 = icmp eq i8 %v3_11a40, 35
  store i1 %v7_11a24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a24, label %dec_label_pc_11a50, label %dec_label_pc_11a2c

dec_label_pc_11a2c:                               ; preds = %dec_label_pc_11a24
  %v2_11a2c = icmp ugt i8 %v3_11a40, 36
  store i1 %v2_11a2c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a2c = icmp eq i8 %v3_11a40, 37
  store i1 %v7_11a2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a2c, label %dec_label_pc_11a50, label %dec_label_pc_11a34

dec_label_pc_11a34:                               ; preds = %dec_label_pc_11a2c
  %v1_11a34 = add i32 %v0_11a50, -1
  store i32 %v1_11a34, i32* %r0.global-to-local, align 4
  %v2_11a34 = icmp ne i32 %v0_11a50, 0
  store i1 %v2_11a34, i1* %cpsr_c.global-to-local, align 1
  %v7_11a34 = icmp eq i32 %v0_11a50, 1
  store i1 %v7_11a34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a34, label %dec_label_pc_115e0.backedge.thread455, label %dec_label_pc_11a3c

dec_label_pc_11a3c:                               ; preds = %dec_label_pc_11a08, %dec_label_pc_11a34
  %v0_11a50 = phi i32 [ %v1_11a34, %dec_label_pc_11a34 ], [ %v1_11a0c, %dec_label_pc_11a08 ]
  %v2_11a3c = add i32 %v0_11a50, %v0_1165c
  store i32 %v2_11a3c, i32* %r3.global-to-local, align 4
  %v1_11a40 = add i32 %v2_11a3c, 28
  %v2_11a40 = inttoptr i32 %v1_11a40 to i8*
  %v3_11a40 = load i8, i8* %v2_11a40, align 1
  %v4_11a40 = zext i8 %v3_11a40 to i32
  store i32 %v4_11a40, i32* %r3.global-to-local, align 4
  %v2_11a44 = icmp ugt i8 %v3_11a40, 61
  store i1 %v2_11a44, i1* %cpsr_c.global-to-local, align 1
  %v7_11a44 = icmp eq i8 %v3_11a40, 62
  store i1 %v7_11a44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a44, label %dec_label_pc_11a50, label %bb336

bb336:                                            ; preds = %dec_label_pc_11a3c
  %v3_11a48 = icmp ugt i8 %v3_11a40, 57
  store i1 %v3_11a48, i1* %cpsr_c.global-to-local, align 1
  %v8_11a48 = icmp eq i8 %v3_11a40, 58
  store i1 %v8_11a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11a48, label %dec_label_pc_11a50, label %dec_label_pc_11a1c

dec_label_pc_11a50:                               ; preds = %dec_label_pc_11a3c, %bb336, %dec_label_pc_11a2c, %dec_label_pc_11a24, %dec_label_pc_11a1c
  %v1_11a50 = add i32 %v0_11a50, 1
  store i32 %v1_11a50, i32* @r7, align 4
  %v2_11a54 = icmp eq i32 %v1_11a50, -1
  store i1 %v2_11a54, i1* %cpsr_c.global-to-local, align 1
  %v7_11a54 = icmp eq i32 %v0_11a50, -2
  store i1 %v7_11a54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a54, label %dec_label_pc_115e0.backedge.thread455, label %dec_label_pc_11a5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a50
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a5c = icmp eq i32 %v1_11a50, 0
  store i1 %v2_11a5c, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v1_11a50, 1
  br i1 %tmp337, label %dec_label_pc_11768, label %dec_label_pc_11a64

dec_label_pc_11a64:                               ; preds = %dec_label_pc_11a5c
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11a68 = call i32 @function_121d4(i32 25)
  store i32 %v2_11578, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_11a78 = call i32 @function_120f0(i32 25, i32* %v2_11580)
  store i32 %v3_11a78, i32* %r0.global-to-local, align 4
  %v3_11a7c = load i8, i8* %stack_var_-52, align 1
  %v4_11a7c = sext i8 %v3_11a7c to i32
  store i32 %v4_11a7c, i32* %r2.global-to-local, align 4
  store i32 %v3_11a78, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11a88 = load i32, i32* @r5, align 4
  %v1_11a88 = add i32 %v0_11a88, 4
  %v2_11a88 = inttoptr i32 %v1_11a88 to i32*
  %v3_11a88 = load i32, i32* %v2_11a88, align 4
  store i32 %v3_11a88, i32* %r0.global-to-local, align 4
  %v4_11a8c = inttoptr i32 %v3_11a78 to i32*
  %v5_11a8c = call i32 @function_13e2c(i32 %v3_11a88, i32* %v4_11a8c, i32 %v4_11a7c, i32 16384)
  store i32 %v5_11a8c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11a9c = load i32, i32* @r5, align 4
  %v1_11a9c = add i32 %v0_11a9c, 4
  %v2_11a9c = inttoptr i32 %v1_11a9c to i32*
  %v3_11a9c = load i32, i32* %v2_11a9c, align 4
  store i32 %v3_11a9c, i32* %r0.global-to-local, align 4
  %v5_11aa0 = call i32 @function_13e2c(i32 %v3_11a9c, i32* bitcast ([3 x i8]* @global_var_15cc8.34 to i32*), i32 2, i32 16384)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11aa8 = call i32 @function_1211c(i32 25)
  store i32 %v1_11aa8, i32* %r0.global-to-local, align 4
  %v0_11aac = load i32, i32* @r5, align 4
  %v1_11aac = add i32 %v0_11aac, 24
  %v2_11aac = inttoptr i32 %v1_11aac to i32*
  %v3_11aac = load i32, i32* %v2_11aac, align 4
  store i32 %v3_11aac, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_11ab4 = add i32 %v0_11aac, 12
  %v3_11ab4 = inttoptr i32 %v2_11ab4 to i32*
  store i32 9, i32* %v3_11ab4, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11abc:                               ; preds = %dec_label_pc_1165c
  %v1_11abc = add i32 %v0_1165c, 24
  %v2_11abc = inttoptr i32 %v1_11abc to i32*
  %v3_11abc = load i32, i32* %v2_11abc, align 4
  store i32 %v3_11abc, i32* %ip.global-to-local, align 4
  %v1_11ac0 = add i32 %v3_11abc, -1
  store i32 %v1_11ac0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ac4 = icmp eq i32 %v1_11ac0, 0
  store i1 %v2_11ac4, i1* %cpsr_z.global-to-local, align 1
  %v5_11ac8 = icmp sgt i32 %v1_11ac0, 0
  br i1 %v5_11ac8, label %dec_label_pc_11af0, label %dec_label_pc_115e0.backedge.thread

dec_label_pc_11ad0:                               ; preds = %bb338
  %v2_11ad0 = icmp ugt i8 %v3_11af4, 35
  store i1 %v2_11ad0, i1* %cpsr_c.global-to-local, align 1
  %v7_11ad0 = icmp eq i8 %v3_11af4, 36
  store i1 %v7_11ad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ad0, label %dec_label_pc_11b04, label %dec_label_pc_11ad8

dec_label_pc_11ad8:                               ; preds = %dec_label_pc_11ad0
  %v2_11ad8 = icmp ugt i8 %v3_11af4, 34
  store i1 %v2_11ad8, i1* %cpsr_c.global-to-local, align 1
  %v7_11ad8 = icmp eq i8 %v3_11af4, 35
  store i1 %v7_11ad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ad8, label %dec_label_pc_11b04, label %dec_label_pc_11ae0

dec_label_pc_11ae0:                               ; preds = %dec_label_pc_11ad8
  %v2_11ae0 = icmp ugt i8 %v3_11af4, 36
  store i1 %v2_11ae0, i1* %cpsr_c.global-to-local, align 1
  %v7_11ae0 = icmp eq i8 %v3_11af4, 37
  store i1 %v7_11ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ae0, label %dec_label_pc_11b04, label %dec_label_pc_11ae8

dec_label_pc_11ae8:                               ; preds = %dec_label_pc_11ae0
  %v1_11ae8 = add i32 %v0_11b04, -1
  store i32 %v1_11ae8, i32* %r0.global-to-local, align 4
  %v2_11ae8 = icmp ne i32 %v0_11b04, 0
  store i1 %v2_11ae8, i1* %cpsr_c.global-to-local, align 1
  %v7_11ae8 = icmp eq i32 %v0_11b04, 1
  store i1 %v7_11ae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ae8, label %dec_label_pc_115e0.backedge.thread455, label %dec_label_pc_11af0

dec_label_pc_11af0:                               ; preds = %dec_label_pc_11abc, %dec_label_pc_11ae8
  %v0_11b04 = phi i32 [ %v1_11ae8, %dec_label_pc_11ae8 ], [ %v1_11ac0, %dec_label_pc_11abc ]
  %v2_11af0 = add i32 %v0_11b04, %v0_1165c
  store i32 %v2_11af0, i32* %r3.global-to-local, align 4
  %v1_11af4 = add i32 %v2_11af0, 28
  %v2_11af4 = inttoptr i32 %v1_11af4 to i8*
  %v3_11af4 = load i8, i8* %v2_11af4, align 1
  %v4_11af4 = zext i8 %v3_11af4 to i32
  store i32 %v4_11af4, i32* %r3.global-to-local, align 4
  %v2_11af8 = icmp ugt i8 %v3_11af4, 61
  store i1 %v2_11af8, i1* %cpsr_c.global-to-local, align 1
  %v7_11af8 = icmp eq i8 %v3_11af4, 62
  store i1 %v7_11af8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11af8, label %dec_label_pc_11b04, label %bb338

bb338:                                            ; preds = %dec_label_pc_11af0
  %v3_11afc = icmp ugt i8 %v3_11af4, 57
  store i1 %v3_11afc, i1* %cpsr_c.global-to-local, align 1
  %v8_11afc = icmp eq i8 %v3_11af4, 58
  store i1 %v8_11afc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11afc, label %dec_label_pc_11b04, label %dec_label_pc_11ad0

dec_label_pc_11b04:                               ; preds = %dec_label_pc_11af0, %bb338, %dec_label_pc_11ae0, %dec_label_pc_11ad8, %dec_label_pc_11ad0
  %v1_11b04 = add i32 %v0_11b04, 1
  store i32 %v1_11b04, i32* @r7, align 4
  %v2_11b08 = icmp eq i32 %v1_11b04, -1
  store i1 %v2_11b08, i1* %cpsr_c.global-to-local, align 1
  %v7_11b08 = icmp eq i32 %v0_11b04, -2
  store i1 %v7_11b08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b08, label %dec_label_pc_115e0.backedge.thread455, label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11b04
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b10 = icmp eq i32 %v1_11b04, 0
  store i1 %v2_11b10, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v1_11b04, 1
  br i1 %tmp339, label %dec_label_pc_11768, label %dec_label_pc_11b18

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11b10
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11b1c = call i32 @function_121d4(i32 22)
  store i32 %v2_1158c, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_11b2c = call i32 @function_120f0(i32 22, i32* nonnull %stack_var_-56)
  store i32 %v3_11b2c, i32* %r0.global-to-local, align 4
  %v3_11b30 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11b30, i32* %r2.global-to-local, align 4
  store i32 %v3_11b2c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b3c = load i32, i32* @r5, align 4
  %v1_11b3c = add i32 %v0_11b3c, 4
  %v2_11b3c = inttoptr i32 %v1_11b3c to i32*
  %v3_11b3c = load i32, i32* %v2_11b3c, align 4
  store i32 %v3_11b3c, i32* %r0.global-to-local, align 4
  %v4_11b40 = inttoptr i32 %v3_11b2c to i32*
  %v5_11b40 = call i32 @function_13e2c(i32 %v3_11b3c, i32* %v4_11b40, i32 %v3_11b30, i32 16384)
  store i32 %v5_11b40, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b50 = load i32, i32* @r5, align 4
  %v1_11b50 = add i32 %v0_11b50, 4
  %v2_11b50 = inttoptr i32 %v1_11b50 to i32*
  %v3_11b50 = load i32, i32* %v2_11b50, align 4
  store i32 %v3_11b50, i32* %r0.global-to-local, align 4
  %v5_11b54 = call i32 @function_13e2c(i32 %v3_11b50, i32* bitcast ([3 x i8]* @global_var_15cc8.34 to i32*), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11b5c = call i32 @function_1211c(i32 22)
  store i32 %v1_11b5c, i32* %r0.global-to-local, align 4
  %v0_11b60 = load i32, i32* @r5, align 4
  %v1_11b60 = add i32 %v0_11b60, 24
  %v2_11b60 = inttoptr i32 %v1_11b60 to i32*
  %v3_11b60 = load i32, i32* %v2_11b60, align 4
  store i32 %v3_11b60, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_11b68 = add i32 %v0_11b60, 12
  %v3_11b68 = inttoptr i32 %v2_11b68 to i32*
  store i32 8, i32* %v3_11b68, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11b70:                               ; preds = %dec_label_pc_1165c
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_11b74 = call i32 @function_121d4(i32 28)
  store i32 %v2_11578, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_11b84 = call i32 @function_120f0(i32 28, i32* %v2_11580)
  %v3_11b88 = load i8, i8* %stack_var_-52, align 1
  %v4_11b88 = sext i8 %v3_11b88 to i32
  store i32 %v3_11b84, i32* %r2.global-to-local, align 4
  %v1_11b90 = add nsw i32 %v4_11b88, -1
  store i32 %v1_11b90, i32* %r3.global-to-local, align 4
  %v0_11b94 = load i32, i32* @sl, align 4
  store i32 %v0_11b94, i32* %r0.global-to-local, align 4
  %v0_11b98 = load i32, i32* @r5, align 4
  %v1_11b98 = add i32 %v0_11b98, 24
  %v2_11b98 = inttoptr i32 %v1_11b98 to i32*
  %v3_11b98 = load i32, i32* %v2_11b98, align 4
  store i32 %v3_11b98, i32* %r1.global-to-local, align 4
  %v4_11b9c = call i32 @function_12d00(i32 %v0_11b94, i32 %v3_11b98, i32 %v3_11b84, i32 %v1_11b90)
  %v2_11ba0 = icmp eq i32 %v4_11b9c, -1
  store i1 %v2_11ba0, i1* %cpsr_c.global-to-local, align 1
  %v7_11ba0 = icmp eq i32 %v4_11b9c, -1
  store i1 %v7_11ba0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_11b9c, i32* @r4, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_11d8c = call i32 @function_1211c(i32 28)
  br i1 %v7_11ba0, label %dec_label_pc_11d88, label %dec_label_pc_11bac

dec_label_pc_11bac:                               ; preds = %dec_label_pc_11b70
  store i32 %v1_11d8c, i32* %r0.global-to-local, align 4
  %v0_11bb4 = load i32, i32* @r5, align 4
  %v1_11bb4 = add i32 %v0_11bb4, 4
  %v2_11bb4 = inttoptr i32 %v1_11bb4 to i32*
  %v3_11bb4 = load i32, i32* %v2_11bb4, align 4
  store i32 %v3_11bb4, i32* %r0.global-to-local, align 4
  %v1_11bb8 = call i32 @function_135d0(i32 %v3_11bb4)
  store i32 %v1_11bb8, i32* %r0.global-to-local, align 4
  %v0_11bbc = load i32, i32* @r5, align 4
  %v1_11bbc = add i32 %v0_11bbc, 284
  %v2_11bbc = inttoptr i32 %v1_11bbc to i8*
  %v3_11bbc = load i8, i8* %v2_11bbc, align 1
  %v4_11bbc = zext i8 %v3_11bbc to i32
  %v1_11bc0 = add nuw nsw i32 %v4_11bbc, 1
  %v1_11bc4 = urem i32 %v1_11bc0, 256
  store i32 %v1_11bc4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_11bcc = icmp ugt i32 %v1_11bc4, 9
  store i1 %v2_11bcc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bcc = icmp eq i32 %v1_11bc4, 10
  store i1 %v7_11bcc, i1* %cpsr_z.global-to-local, align 1
  %v2_11bd0 = add i32 %v0_11bbc, 4
  %v3_11bd0 = inttoptr i32 %v2_11bd0 to i32*
  store i32 -1, i32* %v3_11bd0, align 4
  %v0_11bd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11bd4 = trunc i32 %v0_11bd4 to i8
  %v2_11bd4 = load i32, i32* @r5, align 4
  %v3_11bd4 = add i32 %v2_11bd4, 284
  %v4_11bd4 = inttoptr i32 %v3_11bd4 to i8*
  store i8 %v1_11bd4, i8* %v4_11bd4, align 1
  %v0_11bd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11bd8, label %dec_label_pc_11bdc, label %dec_label_pc_11ee8

dec_label_pc_11bdc:                               ; preds = %dec_label_pc_11bac
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_11be4 = load i32, i32* @r5, align 4
  %v1_11be4 = add i32 %v0_11be4, 24
  %v2_11be4 = inttoptr i32 %v1_11be4 to i32*
  %v3_11be4 = load i32, i32* %v2_11be4, align 4
  store i32 %v3_11be4, i32* %ip.global-to-local, align 4
  %v3_11be8 = add i32 %v0_11be4, 284
  %v4_11be8 = inttoptr i32 %v3_11be8 to i8*
  store i8 0, i8* %v4_11be8, align 1
  %v0_11bec = load i32, i32* %r0.global-to-local, align 4
  %v1_11bec = load i32, i32* @r5, align 4
  %v2_11bec = add i32 %v1_11bec, 12
  %v3_11bec = inttoptr i32 %v2_11bec to i32*
  store i32 %v0_11bec, i32* %v3_11bec, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11bf4:                               ; preds = %.thread223, %dec_label_pc_11c74, %dec_label_pc_11ee8, %dec_label_pc_11e24, %dec_label_pc_11b18, %dec_label_pc_11a64, %dec_label_pc_119b0, %dec_label_pc_118fc, %dec_label_pc_11864, %dec_label_pc_117d4, %dec_label_pc_11770, %dec_label_pc_11bdc
  %v0_11bf4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11bf4 = load i32, i32* @r7, align 4
  %v2_11bf4 = sub i32 %v0_11bf4, %v1_11bf4
  %v3_11bf4 = icmp uge i32 %v0_11bf4, %v1_11bf4
  store i1 %v3_11bf4, i1* %cpsr_c.global-to-local, align 1
  %v4_11bf4 = xor i32 %v1_11bf4, %v0_11bf4
  %v5_11bf4 = xor i32 %v2_11bf4, %v0_11bf4
  %v6_11bf4 = and i32 %v5_11bf4, %v4_11bf4
  %v7_11bf4 = icmp slt i32 %v6_11bf4, 0
  %v8_11bf4 = icmp slt i32 %v2_11bf4, 0
  %v9_11bf4 = icmp eq i32 %v0_11bf4, %v1_11bf4
  store i1 %v9_11bf4, i1* %cpsr_z.global-to-local, align 1
  %v2_11bf8 = xor i1 %v8_11bf4, %v7_11bf4
  %v0_11bf4.v1_11bf4 = select i1 %v2_11bf8, i32 %v0_11bf4, i32 %v1_11bf4
  store i32 %v0_11bf4.v1_11bf4, i32* %r1.global-to-local, align 4
  %v2_11c00 = sub i32 %v0_11bf4, %v0_11bf4.v1_11bf4
  store i32 %v2_11c00, i32* @r2, align 4
  %v1_11c04 = load i32, i32* @r5, align 4
  %v2_11c04 = add i32 %v1_11c04, 24
  %v3_11c04 = inttoptr i32 %v2_11c04 to i32*
  store i32 %v2_11c00, i32* %v3_11c04, align 4
  %v0_11c08 = load i32, i32* @sl, align 4
  %v1_11c08 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c08 = add i32 %v1_11c08, %v0_11c08
  store i32 %v2_11c08, i32* @r1, align 4
  store i32 %v0_11c08, i32* @r0, align 4
  %v3_11c10 = call i32 @function_13bd0(i32 %v0_11c08, i32 %v2_11c08, i32 %v2_11c00)
  store i32 %v3_11c10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1165c

dec_label_pc_11c18:                               ; preds = %dec_label_pc_1165c
  %v1_11c18 = add i32 %v0_1165c, 24
  %v2_11c18 = inttoptr i32 %v1_11c18 to i32*
  %v3_11c18 = load i32, i32* %v2_11c18, align 4
  store i32 %v3_11c18, i32* %ip.global-to-local, align 4
  %v1_11c1c = add i32 %v3_11c18, -1
  store i32 %v1_11c1c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c20 = icmp eq i32 %v1_11c1c, 0
  store i1 %v2_11c20, i1* %cpsr_z.global-to-local, align 1
  %v5_11c24 = icmp sgt i32 %v1_11c1c, 0
  br i1 %v5_11c24, label %dec_label_pc_11c4c, label %dec_label_pc_115e0.backedge.thread

dec_label_pc_11c2c:                               ; preds = %bb342
  %v2_11c2c = icmp ugt i8 %v3_11c50, 35
  store i1 %v2_11c2c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c2c = icmp eq i8 %v3_11c50, 36
  store i1 %v7_11c2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c2c, label %dec_label_pc_11c60, label %dec_label_pc_11c34

dec_label_pc_11c34:                               ; preds = %dec_label_pc_11c2c
  %v2_11c34 = icmp ugt i8 %v3_11c50, 34
  store i1 %v2_11c34, i1* %cpsr_c.global-to-local, align 1
  %v7_11c34 = icmp eq i8 %v3_11c50, 35
  store i1 %v7_11c34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c34, label %dec_label_pc_11c60, label %dec_label_pc_11c3c

dec_label_pc_11c3c:                               ; preds = %dec_label_pc_11c34
  %v2_11c3c = icmp ugt i8 %v3_11c50, 36
  store i1 %v2_11c3c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c3c = icmp eq i8 %v3_11c50, 37
  store i1 %v7_11c3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c3c, label %dec_label_pc_11c60, label %dec_label_pc_11c44

dec_label_pc_11c44:                               ; preds = %dec_label_pc_11c3c
  %v1_11c44 = add i32 %v0_11c60, -1
  store i32 %v1_11c44, i32* %r0.global-to-local, align 4
  %v2_11c44 = icmp ne i32 %v0_11c60, 0
  store i1 %v2_11c44, i1* %cpsr_c.global-to-local, align 1
  %v7_11c44 = icmp eq i32 %v0_11c60, 1
  store i1 %v7_11c44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c44, label %dec_label_pc_115e0.backedge.thread455, label %dec_label_pc_11c4c

dec_label_pc_11c4c:                               ; preds = %dec_label_pc_11c18, %dec_label_pc_11c44
  %v0_11c60 = phi i32 [ %v1_11c44, %dec_label_pc_11c44 ], [ %v1_11c1c, %dec_label_pc_11c18 ]
  %v2_11c4c = add i32 %v0_11c60, %v0_1165c
  store i32 %v2_11c4c, i32* %r3.global-to-local, align 4
  %v1_11c50 = add i32 %v2_11c4c, 28
  %v2_11c50 = inttoptr i32 %v1_11c50 to i8*
  %v3_11c50 = load i8, i8* %v2_11c50, align 1
  %v4_11c50 = zext i8 %v3_11c50 to i32
  store i32 %v4_11c50, i32* %r3.global-to-local, align 4
  %v2_11c54 = icmp ugt i8 %v3_11c50, 61
  store i1 %v2_11c54, i1* %cpsr_c.global-to-local, align 1
  %v7_11c54 = icmp eq i8 %v3_11c50, 62
  store i1 %v7_11c54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c54, label %dec_label_pc_11c60, label %bb342

bb342:                                            ; preds = %dec_label_pc_11c4c
  %v3_11c58 = icmp ugt i8 %v3_11c50, 57
  store i1 %v3_11c58, i1* %cpsr_c.global-to-local, align 1
  %v8_11c58 = icmp eq i8 %v3_11c50, 58
  store i1 %v8_11c58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c58, label %dec_label_pc_11c60, label %dec_label_pc_11c2c

dec_label_pc_11c60:                               ; preds = %dec_label_pc_11c4c, %bb342, %dec_label_pc_11c3c, %dec_label_pc_11c34, %dec_label_pc_11c2c
  %v1_11c60 = add i32 %v0_11c60, 1
  store i32 %v1_11c60, i32* @r7, align 4
  %v2_11c64 = icmp eq i32 %v1_11c60, -1
  store i1 %v2_11c64, i1* %cpsr_c.global-to-local, align 1
  %v7_11c64 = icmp eq i32 %v0_11c60, -2
  store i1 %v7_11c64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c64, label %dec_label_pc_115e0.backedge.thread455, label %dec_label_pc_11c6c

dec_label_pc_11c6c:                               ; preds = %dec_label_pc_11c60
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c6c = icmp eq i32 %v1_11c60, 0
  store i1 %v2_11c6c, i1* %cpsr_z.global-to-local, align 1
  %tmp343 = icmp slt i32 %v1_11c60, 1
  br i1 %tmp343, label %dec_label_pc_11768, label %dec_label_pc_11c74

dec_label_pc_11c74:                               ; preds = %dec_label_pc_11c6c
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11c78 = call i32 @function_121d4(i32 26)
  store i32 %v2_11578, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_11c88 = call i32 @function_120f0(i32 26, i32* %v2_11580)
  store i32 %v3_11c88, i32* %r0.global-to-local, align 4
  %v3_11c8c = load i8, i8* %stack_var_-52, align 1
  %v4_11c8c = sext i8 %v3_11c8c to i32
  store i32 %v4_11c8c, i32* %r2.global-to-local, align 4
  store i32 %v3_11c88, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11c98 = load i32, i32* @r5, align 4
  %v1_11c98 = add i32 %v0_11c98, 4
  %v2_11c98 = inttoptr i32 %v1_11c98 to i32*
  %v3_11c98 = load i32, i32* %v2_11c98, align 4
  store i32 %v3_11c98, i32* %r0.global-to-local, align 4
  %v4_11c9c = inttoptr i32 %v3_11c88 to i32*
  %v5_11c9c = call i32 @function_13e2c(i32 %v3_11c98, i32* %v4_11c9c, i32 %v4_11c8c, i32 16384)
  store i32 %v5_11c9c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11cac = load i32, i32* @r5, align 4
  %v1_11cac = add i32 %v0_11cac, 4
  %v2_11cac = inttoptr i32 %v1_11cac to i32*
  %v3_11cac = load i32, i32* %v2_11cac, align 4
  store i32 %v3_11cac, i32* %r0.global-to-local, align 4
  %v5_11cb0 = call i32 @function_13e2c(i32 %v3_11cac, i32* bitcast ([3 x i8]* @global_var_15cc8.34 to i32*), i32 2, i32 16384)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11cb8 = call i32 @function_1211c(i32 26)
  store i32 %v1_11cb8, i32* %r0.global-to-local, align 4
  %v0_11cbc = load i32, i32* @r5, align 4
  %v1_11cbc = add i32 %v0_11cbc, 24
  %v2_11cbc = inttoptr i32 %v1_11cbc to i32*
  %v3_11cbc = load i32, i32* %v2_11cbc, align 4
  store i32 %v3_11cbc, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_11cc4 = add i32 %v0_11cbc, 12
  %v3_11cc4 = inttoptr i32 %v2_11cc4 to i32*
  store i32 10, i32* %v3_11cc4, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11ccc:                               ; preds = %dec_label_pc_116e0
  store i32 ptrtoint (i32* @global_var_162f3.543 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_11cd8, i32* @r0, align 4
  %v3_11cdc = call i32 @function_13bc0(i32 %v2_11cd8, i32 ptrtoint (i32* @global_var_162f3.543 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_11ce8, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_162ea.545 to i32), i32* @r1, align 4
  %v3_11cf0 = call i32 @function_13bc0(i32 %v2_11ce8, i32 ptrtoint (i32* @global_var_162ea.545 to i32), i32 9)
  store i32 %v3_11cf0, i32* %r0.global-to-local, align 4
  %v0_11cf4 = load i32, i32* @r5, align 4
  %v1_11cf4 = add i32 %v0_11cf4, 24
  %v2_11cf4 = inttoptr i32 %v1_11cf4 to i32*
  %v3_11cf4 = load i32, i32* %v2_11cf4, align 4
  store i32 %v3_11cf4, i32* %ip.global-to-local, align 4
  %v0_11cf8 = load i32, i32* @r6, align 4
  %v1_11cf8 = add i32 %v0_11cf8, 2
  store i32 %v1_11cf8, i32* %r2.global-to-local, align 4
  %v0_11cfc = load i32, i32* @sl, align 4
  %v2_11cfc = add i32 %v0_11cfc, %v3_11cf4
  store i32 %v2_11cfc, i32* %r3.global-to-local, align 4
  %v3_11d00 = icmp uge i32 %v2_11cfc, %v1_11cf8
  store i1 %v3_11d00, i1* %cpsr_c.global-to-local, align 1
  %v9_11d00 = icmp eq i32 %v2_11cfc, %v1_11cf8
  store i1 %v9_11d00, i1* %cpsr_z.global-to-local, align 1
  %v2_11d04 = xor i1 %v3_11d00, true
  %v3_11d04 = or i1 %v9_11d00, %v2_11d04
  br i1 %v3_11d04, label %dec_label_pc_11ccc.dec_label_pc_11758.loopexit_crit_edge, label %dec_label_pc_11d08

dec_label_pc_11ccc.dec_label_pc_11758.loopexit_crit_edge: ; preds = %dec_label_pc_11ccc
  %v0_11758.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11758

dec_label_pc_11d08:                               ; preds = %dec_label_pc_11ccc
  %v0_11d08 = load i32, i32* @r4, align 4
  %v1_11d08 = add i32 %v0_11d08, 1
  %v2_11d08 = inttoptr i32 %v1_11d08 to i8*
  %v3_11d08 = load i8, i8* %v2_11d08, align 1
  %v4_11d08 = zext i8 %v3_11d08 to i32
  store i32 %v4_11d08, i32* %r3.global-to-local, align 4
  %v2_11d0c = icmp ugt i8 %v3_11d08, 30
  store i1 %v2_11d0c, i1* %cpsr_c.global-to-local, align 1
  %v7_11d0c = icmp eq i8 %v3_11d08, 31
  store i1 %v7_11d0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d0c, label %dec_label_pc_11e98, label %dec_label_pc_11d14

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11d08
  %v1_11d14 = add i32 %v0_11d08, -1
  %v2_11d14 = inttoptr i32 %v1_11d14 to i8*
  %v3_11d14 = load i8, i8* %v2_11d14, align 1
  %v4_11d14 = zext i8 %v3_11d14 to i32
  store i32 %v4_11d14, i32* %r3.global-to-local, align 4
  %v2_11d18 = icmp ugt i8 %v3_11d14, -4
  store i1 %v2_11d18, i1* %cpsr_c.global-to-local, align 1
  %v7_11d18 = icmp eq i8 %v3_11d14, -3
  store i1 %v7_11d18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d18, label %.thread75, label %dec_label_pc_11d28

.thread75:                                        ; preds = %dec_label_pc_11d14
  store i32 -4, i32* %r2.global-to-local, align 4
  store i8 -4, i8* %v2_11d14, align 1
  %v0_11d24.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11d24.pr.pr, label %dec_label_pc_116f4, label %.thread75.dec_label_pc_11d28_crit_edge

.thread75.dec_label_pc_11d28_crit_edge:           ; preds = %.thread75
  %v0_11d28.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11d28

dec_label_pc_11d28:                               ; preds = %.thread75.dec_label_pc_11d28_crit_edge, %dec_label_pc_11d14
  %v0_11d28 = phi i32 [ %v0_11d28.pre, %.thread75.dec_label_pc_11d28_crit_edge ], [ %v4_11d14, %dec_label_pc_11d14 ]
  %v2_11d28 = icmp ugt i32 %v0_11d28, 250
  store i1 %v2_11d28, i1* %cpsr_c.global-to-local, align 1
  %v7_11d28 = icmp eq i32 %v0_11d28, 251
  store i1 %v7_11d28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d28, label %bb344, label %dec_label_pc_116f4

bb344:                                            ; preds = %dec_label_pc_11d28
  %v1_11d2c = load i32, i32* %r8.global-to-local, align 4
  %v2_11d2c = trunc i32 %v1_11d2c to i8
  %v3_11d2c = load i32, i32* @r4, align 4
  %v4_11d2c = add i32 %v3_11d2c, -1
  %v5_11d2c = inttoptr i32 %v4_11d2c to i8*
  store i8 %v2_11d2c, i8* %v5_11d2c, align 1
  br label %dec_label_pc_116f4

dec_label_pc_11d34:                               ; preds = %dec_label_pc_11834, %dec_label_pc_11810, %dec_label_pc_11850
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_11d38 = call i32 @function_121d4(i32 29)
  store i32 %v2_11578, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_11d48 = call i32 @function_120f0(i32 29, i32* %v2_11580)
  %v3_11d4c = load i8, i8* %stack_var_-52, align 1
  %v4_11d4c = sext i8 %v3_11d4c to i32
  store i32 %v3_11d48, i32* %r2.global-to-local, align 4
  %v1_11d54 = add nsw i32 %v4_11d4c, -1
  store i32 %v1_11d54, i32* %r3.global-to-local, align 4
  %v0_11d58 = load i32, i32* @sl, align 4
  store i32 %v0_11d58, i32* %r0.global-to-local, align 4
  %v0_11d5c = load i32, i32* @r5, align 4
  %v1_11d5c = add i32 %v0_11d5c, 24
  %v2_11d5c = inttoptr i32 %v1_11d5c to i32*
  %v3_11d5c = load i32, i32* %v2_11d5c, align 4
  store i32 %v3_11d5c, i32* %r1.global-to-local, align 4
  %v4_11d60 = call i32 @function_12d00(i32 %v0_11d58, i32 %v3_11d5c, i32 %v3_11d48, i32 %v1_11d54)
  store i32 %v4_11d60, i32* %r0.global-to-local, align 4
  %v1_11d64 = add i32 %v4_11d60, 1
  store i32 %v1_11d64, i32* @r7, align 4
  %v2_11d64 = icmp eq i32 %v4_11d60, -1
  store i1 %v2_11d64, i1* %cpsr_c.global-to-local, align 1
  %v7_11d64 = icmp eq i32 %v1_11d64, 0
  store i1 %v7_11d64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d64, label %thread-pre-split78, label %bb345

bb345:                                            ; preds = %dec_label_pc_11d34
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split78

thread-pre-split78:                               ; preds = %dec_label_pc_11d34, %bb345
  %v0_11d6c = phi i1 [ false, %bb345 ], [ true, %dec_label_pc_11d34 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_11d6c, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_11f00 = call i32 @function_1211c(i32 29)
  store i32 %v1_11f00, i32* %r0.global-to-local, align 4
  br i1 %v0_11d6c, label %dec_label_pc_11efc, label %dec_label_pc_11d74

dec_label_pc_11d74:                               ; preds = %thread-pre-split78
  %v0_11d7c = load i32, i32* @r7, align 4
  %v3_11d7c = icmp eq i32 %v0_11d7c, -1
  store i1 %v3_11d7c, i1* %cpsr_c.global-to-local, align 1
  %v8_11d7c = icmp eq i32 %v0_11d7c, -1
  store i1 %v8_11d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11d7c, label %dec_label_pc_115dc.loopexit, label %dec_label_pc_1185c

dec_label_pc_11d88:                               ; preds = %dec_label_pc_11b70
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_11d94 = call i32 @function_121d4(i32 27)
  store i32 %v2_11578, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_11da4 = call i32 @function_120f0(i32 27, i32* nonnull %v2_11580)
  store i32 %v3_11da4, i32* %r0.global-to-local, align 4
  %v3_11da8 = load i8, i8* %stack_var_-52, align 1
  %v4_11da8 = sext i8 %v3_11da8 to i32
  store i32 %v3_11da4, i32* %r2.global-to-local, align 4
  %v1_11db0 = add nsw i32 %v4_11da8, -1
  store i32 %v1_11db0, i32* %r3.global-to-local, align 4
  %v0_11db4 = load i32, i32* @r5, align 4
  %v1_11db4 = add i32 %v0_11db4, 24
  %v2_11db4 = inttoptr i32 %v1_11db4 to i32*
  %v3_11db4 = load i32, i32* %v2_11db4, align 4
  store i32 %v3_11db4, i32* %r1.global-to-local, align 4
  %v0_11db8 = load i32, i32* @sl, align 4
  store i32 %v0_11db8, i32* %r0.global-to-local, align 4
  %v4_11dbc = call i32 @function_12d00(i32 %v0_11db8, i32 %v3_11db4, i32 %v3_11da4, i32 %v1_11db0)
  %sext6 = mul i32 %v4_11dbc, 16777216
  %v1_11dc0 = sdiv i32 %sext6, 16777216
  store i32 %v1_11dc0, i32* @r7, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_11dc8 = call i32 @function_1211c(i32 27)
  store i32 %v1_11dc8, i32* %r0.global-to-local, align 4
  %v0_11dcc = load i32, i32* @r7, align 4
  %v2_11dcc = icmp eq i32 %v0_11dcc, -1
  store i1 %v2_11dcc, i1* %cpsr_c.global-to-local, align 1
  %v7_11dcc = icmp eq i32 %v0_11dcc, -1
  store i1 %v7_11dcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11dcc, label %dec_label_pc_115dc.loopexit, label %dec_label_pc_11dd4

dec_label_pc_11dd4:                               ; preds = %dec_label_pc_11d88
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11dd4 = icmp eq i32 %v0_11dcc, 0
  store i1 %v2_11dd4, i1* %cpsr_z.global-to-local, align 1
  %tmp346 = icmp slt i32 %v0_11dcc, 1
  br i1 %tmp346, label %dec_label_pc_11768, label %dec_label_pc_11ddc

dec_label_pc_11ddc:                               ; preds = %dec_label_pc_11dd4
  %v0_11ddc = load i32, i32* @r5, align 4
  %v1_11ddc = add i32 %v0_11ddc, 21
  %v2_11ddc = inttoptr i32 %v1_11ddc to i8*
  %v3_11ddc = load i8, i8* %v2_11ddc, align 1
  %v4_11ddc = zext i8 %v3_11ddc to i32
  store i32 %v4_11ddc, i32* %r3.global-to-local, align 4
  %v1_11de0 = add i32 %v0_11ddc, 20
  %v2_11de0 = inttoptr i32 %v1_11de0 to i8*
  %v3_11de0 = load i8, i8* %v2_11de0, align 1
  %v4_11de0 = zext i8 %v3_11de0 to i32
  store i32 %v4_11de0, i32* %r2.global-to-local, align 4
  %v1_11de4 = add i32 %v0_11ddc, 16
  %v2_11de4 = inttoptr i32 %v1_11de4 to i32*
  %v3_11de4 = load i32, i32* %v2_11de4, align 4
  store i32 %v3_11de4, i32* %r1.global-to-local, align 4
  %v4_11de8 = mul nuw nsw i32 %v4_11ddc, 256
  %v5_11de8 = or i32 %v4_11de0, %v4_11de8
  store i32 %v5_11de8, i32* %r2.global-to-local, align 4
  %v1_11dec = and i32 %v4_11de0, 128
  %v2_11dec = icmp ne i32 %v1_11dec, 0
  store i1 %v2_11dec, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_11ddc, i32* %r3.global-to-local, align 4
  store i32 %v3_11de4, i32* %stack_var_-56, align 4
  store i32 %v5_11de8, i32* %stack_var_-38, align 4
  %v1_11dfc = inttoptr i32 %v0_11ddc to i32*
  %v2_11dfc = load i32, i32* %v1_11dfc, align 4
  store i32 %v2_11dfc, i32* %r8.global-to-local, align 4
  %v0_11e00 = call i32 @function_135fc()
  store i32 %v0_11e00, i32* %r0.global-to-local, align 4
  %v7_11e04 = icmp eq i32 %v0_11e00, -1
  %.357 = zext i1 %v7_11e04 to i32
  store i32 %.357, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11e10 = icmp eq i32 %v0_11e00, 0
  store i1 %v2_11e10, i1* %cpsr_z.global-to-local, align 1
  %tmp349 = icmp slt i32 %v0_11e00, 1
  br i1 %tmp349, label %bb350, label %.thread81

.thread81:                                        ; preds = %dec_label_pc_11ddc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11e24

bb350:                                            ; preds = %dec_label_pc_11ddc
  store i32 %.357, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11e1c = icmp eq i1 %v7_11e04, false
  store i1 %v2_11e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11e1c, label %dec_label_pc_11f4c, label %dec_label_pc_11e24

dec_label_pc_11e24:                               ; preds = %.thread81, %bb350
  %v0_11e24 = load i32, i32* @r5, align 4
  %v1_11e24 = add i32 %v0_11e24, 4
  %v2_11e24 = inttoptr i32 %v1_11e24 to i32*
  %v3_11e24 = load i32, i32* %v2_11e24, align 4
  store i32 %v3_11e24, i32* %r0.global-to-local, align 4
  %v1_11e28 = call i32 @function_135d0(i32 %v3_11e24)
  store i32 %v1_11e28, i32* %r0.global-to-local, align 4
  %v0_11e2c = load i32, i32* @r5, align 4
  %v1_11e2c = add i32 %v0_11e2c, 24
  %v2_11e2c = inttoptr i32 %v1_11e2c to i32*
  %v3_11e2c = load i32, i32* %v2_11e2c, align 4
  store i32 %v3_11e2c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_11e34 = load i32, i32* @r4, align 4
  %v2_11e34 = add i32 %v0_11e2c, 4
  %v3_11e34 = inttoptr i32 %v2_11e34 to i32*
  store i32 %v0_11e34, i32* %v3_11e34, align 4
  %v0_11e38 = load i32, i32* %r2.global-to-local, align 4
  %v1_11e38 = load i32, i32* @r5, align 4
  %v2_11e38 = add i32 %v1_11e38, 12
  %v3_11e38 = inttoptr i32 %v2_11e38 to i32*
  store i32 %v0_11e38, i32* %v3_11e38, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11e40:                               ; preds = %dec_label_pc_115f8
  br i1 %v2_1161c, label %dec_label_pc_12038, label %dec_label_pc_11e44

dec_label_pc_11e44:                               ; preds = %dec_label_pc_11e40
  %v3_11e44 = icmp eq i32 %v5_11618, -1
  store i1 %v3_11e44, i1* %cpsr_c.global-to-local, align 1
  %v8_11e44 = icmp eq i32 %v5_11618, -1
  store i1 %v8_11e44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e44, label %dec_label_pc_11e4c, label %dec_label_pc_11644

dec_label_pc_11e4c:                               ; preds = %dec_label_pc_11e44
  %v0_11e4c = load i32, i32* @sb, align 4
  %v1_11e4c = inttoptr i32 %v0_11e4c to i32*
  %v2_11e4c = load i32, i32* %v1_11e4c, align 4
  store i32 %v2_11e4c, i32* %r3.global-to-local, align 4
  %v2_11e50 = icmp ugt i32 %v2_11e4c, 10
  store i1 %v2_11e50, i1* %cpsr_c.global-to-local, align 1
  %v7_11e50 = icmp eq i32 %v2_11e4c, 11
  store i1 %v7_11e50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e50, label %dec_label_pc_1142c, label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %dec_label_pc_11e4c, %dec_label_pc_12038
  %v0_11e58 = load i32, i32* @r5, align 4
  %v1_11e58 = add i32 %v0_11e58, 4
  %v2_11e58 = inttoptr i32 %v1_11e58 to i32*
  %v3_11e58 = load i32, i32* %v2_11e58, align 4
  store i32 %v3_11e58, i32* %r0.global-to-local, align 4
  %v1_11e5c = call i32 @function_135d0(i32 %v3_11e58)
  store i32 %v1_11e5c, i32* %r0.global-to-local, align 4
  %v0_11e60 = load i32, i32* @r5, align 4
  %v1_11e60 = add i32 %v0_11e60, 284
  %v2_11e60 = inttoptr i32 %v1_11e60 to i8*
  %v3_11e60 = load i8, i8* %v2_11e60, align 1
  %v4_11e60 = zext i8 %v3_11e60 to i32
  %v1_11e64 = add nuw nsw i32 %v4_11e60, 1
  %v1_11e68 = urem i32 %v1_11e64, 256
  store i32 %v1_11e68, i32* %r3.global-to-local, align 4
  %v2_11e6c = icmp ugt i32 %v1_11e68, 8
  store i1 %v2_11e6c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e6c = icmp eq i32 %v1_11e68, 9
  store i1 %v7_11e6c, i1* %cpsr_z.global-to-local, align 1
  %v2_11e70 = xor i1 %v7_11e6c, true
  %v3_11e70 = and i1 %v2_11e6c, %v2_11e70
  br i1 %v3_11e70, label %bb351, label %bb352

bb351:                                            ; preds = %dec_label_pc_11e58
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb352

bb352:                                            ; preds = %dec_label_pc_11e58, %bb351
  store i32 -1, i32* @r4, align 4
  %v1_11e78 = trunc i32 %v1_11e64 to i8
  store i8 %v1_11e78, i8* %v2_11e60, align 1
  %v0_11e7c = load i32, i32* @r4, align 4
  %v1_11e7c = load i32, i32* @r5, align 4
  %v2_11e7c = add i32 %v1_11e7c, 4
  %v3_11e7c = inttoptr i32 %v2_11e7c to i32*
  store i32 %v0_11e7c, i32* %v3_11e7c, align 4
  %v0_11e80 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11e80 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_11e80 = xor i1 %v1_11e80, true
  %v3_11e80 = and i1 %v0_11e80, %v2_11e80
  br i1 %v3_11e80, label %bb353, label %.thread228

bb353:                                            ; preds = %bb352
  %v4_11e80 = load i32, i32* %r0.global-to-local, align 4
  %v5_11e80 = load i32, i32* @r5, align 4
  %v6_11e80 = add i32 %v5_11e80, 12
  %v7_11e80 = inttoptr i32 %v6_11e80 to i32*
  store i32 %v4_11e80, i32* %v7_11e80, align 4
  %v4_11e84 = load i32, i32* %r0.global-to-local, align 4
  %v5_11e84 = trunc i32 %v4_11e84 to i8
  %v6_11e84 = load i32, i32* @r5, align 4
  %v7_11e84 = add i32 %v6_11e84, 284
  %v8_11e84 = inttoptr i32 %v7_11e84 to i8*
  store i8 %v5_11e84, i8* %v8_11e84, align 1
  %v0_11e88.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11e88.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread228

.thread228:                                       ; preds = %bb352, %bb353
  %v1_11e88 = phi i1 [ %v1_11e88.pre, %bb353 ], [ %v1_11e80, %bb352 ]
  %v0_11e88 = phi i1 [ %v0_11e88.pre, %bb353 ], [ %v0_11e80, %bb352 ]
  %v2_11e88 = xor i1 %v1_11e88, true
  %v3_11e88 = and i1 %v0_11e88, %v2_11e88
  br i1 %v3_11e88, label %dec_label_pc_1142c, label %dec_label_pc_11e8c

dec_label_pc_11e8c:                               ; preds = %.thread228
  %v0_11e8c = load i32, i32* @r5, align 4
  store i32 %v0_11e8c, i32* @r0, align 4
  %v0_11e90 = call i32 @function_fa5c()
  store i32 %v0_11e90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1142c

dec_label_pc_11e98:                               ; preds = %dec_label_pc_11d08
  store i32 %v2_11cd8, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_11ea8 = add i32 %v0_11cf4, 4
  %v2_11ea8 = inttoptr i32 %v1_11ea8 to i32*
  %v3_11ea8 = load i32, i32* %v2_11ea8, align 4
  store i32 %v3_11ea8, i32* %r0.global-to-local, align 4
  %v5_11eac = call i32 @function_13e2c(i32 %v3_11ea8, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_11eac, i32* %r0.global-to-local, align 4
  store i32 %v2_113c0, i32* %r1.global-to-local, align 4
  %v0_11eb4 = load i32, i32* @r5, align 4
  %v1_11eb4 = add i32 %v0_11eb4, 4
  %v2_11eb4 = inttoptr i32 %v1_11eb4 to i32*
  %v3_11eb4 = load i32, i32* %v2_11eb4, align 4
  store i32 %v3_11eb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11738

dec_label_pc_11ec4:                               ; preds = %dec_label_pc_115e8
  store i32 %.pre, i32* @r0, align 4
  %v1_11ecc = add i32 %v0_11ec4, 92
  store i32 %v1_11ecc, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_11ed4 = call i32 @function_13bd0(i32 %.pre, i32 %v1_11ecc, i32 192)
  store i32 %v3_11ed4, i32* %r0.global-to-local, align 4
  %v0_11ed8 = load i32, i32* @r5, align 4
  %v1_11ed8 = add i32 %v0_11ed8, 24
  %v2_11ed8 = inttoptr i32 %v1_11ed8 to i32*
  %v3_11ed8 = load i32, i32* %v2_11ed8, align 4
  store i32 %v3_11ed8, i32* %r3.global-to-local, align 4
  %v1_11edc = add i32 %v3_11ed8, -64
  store i32 %v1_11edc, i32* %ip.global-to-local, align 4
  store i32 %v1_11edc, i32* %v2_11ed8, align 4
  br label %dec_label_pc_115f8

dec_label_pc_11ee8:                               ; preds = %dec_label_pc_11bac
  %v0_11ee8 = load i32, i32* @r5, align 4
  store i32 %v0_11ee8, i32* @r0, align 4
  %v0_11eec = call i32 @function_fa5c()
  store i32 %v0_11eec, i32* %r0.global-to-local, align 4
  %v0_11ef0 = load i32, i32* @r5, align 4
  %v1_11ef0 = add i32 %v0_11ef0, 24
  %v2_11ef0 = inttoptr i32 %v1_11ef0 to i32*
  %v3_11ef0 = load i32, i32* %v2_11ef0, align 4
  store i32 %v3_11ef0, i32* %ip.global-to-local, align 4
  %v0_11ef4 = load i32, i32* @r4, align 4
  store i32 %v0_11ef4, i32* @r7, align 4
  br label %dec_label_pc_11bf4

dec_label_pc_11efc:                               ; preds = %thread-pre-split78
  %v0_11f04 = load i32, i32* @r5, align 4
  %v1_11f04 = add i32 %v0_11f04, 12
  %v2_11f04 = inttoptr i32 %v1_11f04 to i32*
  %v3_11f04 = load i32, i32* %v2_11f04, align 4
  br label %dec_label_pc_115e0.backedge

dec_label_pc_11f0c:                               ; preds = %dec_label_pc_11564
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_11f0c = load i32, i32* %stack_var_-56, align 4
  %v0_11f10 = load i32, i32* @r6, align 4
  store i32 %v0_11f10, i32* %r2.global-to-local, align 4
  %v1_11f14 = add i32 %v3_11f0c, -1
  store i32 %v1_11f14, i32* %r3.global-to-local, align 4
  %v0_11f18 = load i32, i32* @sl, align 4
  store i32 %v0_11f18, i32* %r0.global-to-local, align 4
  %v0_11f1c = load i32, i32* @r5, align 4
  %v1_11f1c = add i32 %v0_11f1c, 24
  %v2_11f1c = inttoptr i32 %v1_11f1c to i32*
  %v3_11f1c = load i32, i32* %v2_11f1c, align 4
  store i32 %v3_11f1c, i32* %r1.global-to-local, align 4
  %v4_11f20 = call i32 @function_12d00(i32 %v0_11f18, i32 %v3_11f1c, i32 %v0_11f10, i32 %v1_11f14)
  store i32 %v4_11f20, i32* %r0.global-to-local, align 4
  %v2_11f24 = icmp eq i32 %v4_11f20, -1
  store i1 %v2_11f24, i1* %cpsr_c.global-to-local, align 1
  %v7_11f24 = icmp eq i32 %v4_11f20, -1
  store i1 %v7_11f24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f24, label %dec_label_pc_11f34, label %dec_label_pc_115c4

dec_label_pc_11f34:                               ; preds = %dec_label_pc_11f0c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11f38 = call i32 @function_1211c(i32 30)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_11f40 = call i32 @function_1211c(i32 31)
  store i32 %v1_11f40, i32* %r0.global-to-local, align 4
  %v0_11f44 = load i32, i32* @r5, align 4
  %v1_11f44 = add i32 %v0_11f44, 12
  %v2_11f44 = inttoptr i32 %v1_11f44 to i32*
  %v3_11f44 = load i32, i32* %v2_11f44, align 4
  br label %dec_label_pc_115e0.backedge

dec_label_pc_115e0.backedge.thread:               ; preds = %dec_label_pc_118a0, %dec_label_pc_11954, %dec_label_pc_11a08, %dec_label_pc_11abc, %dec_label_pc_11c18
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_115e8

dec_label_pc_115e0.backedge.thread455:            ; preds = %dec_label_pc_118cc, %dec_label_pc_11980, %dec_label_pc_11ae8, %dec_label_pc_11a34, %dec_label_pc_11c44, %dec_label_pc_118e8, %dec_label_pc_1199c, %dec_label_pc_11a50, %dec_label_pc_11b04, %dec_label_pc_11c60
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_115e8

dec_label_pc_115e0.backedge:                      ; preds = %dec_label_pc_11f34, %dec_label_pc_11efc
  %storemerge458 = phi i32 [ %v3_11f04, %dec_label_pc_11efc ], [ %v3_11f44, %dec_label_pc_11f34 ]
  %v0_115e0.be = phi i32 [ %v3_11f04, %dec_label_pc_11efc ], [ %v3_11f44, %dec_label_pc_11f34 ]
  %v0_115e8142 = phi i32 [ %v0_11f04, %dec_label_pc_11efc ], [ %v0_11f44, %dec_label_pc_11f34 ]
  store i32 %storemerge458, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_115e0 = icmp eq i32 %v0_115e0.be, 0
  store i1 %v2_115e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115e0, label %dec_label_pc_1142c, label %dec_label_pc_115e8

dec_label_pc_11f4c:                               ; preds = %bb350
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_11f58 = call i32 @function_13ebc(i32 2, i32 1, i32 0)
  store i32 %v3_11f58, i32* %r0.global-to-local, align 4
  %v2_11f5c = icmp eq i32 %v3_11f58, -1
  store i1 %v2_11f5c, i1* %cpsr_c.global-to-local, align 1
  %v7_11f5c = icmp eq i32 %v3_11f58, -1
  store i1 %v7_11f5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_11f58, i32* @r4, align 4
  br i1 %v7_11f5c, label %dec_label_pc_120e8, label %dec_label_pc_11f68

dec_label_pc_11f68:                               ; preds = %dec_label_pc_11f4c
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11f6c = call i32 @function_121d4(i32 2)
  store i32 2032805430, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f240.106 to i32), i32* %r3.global-to-local, align 4
  %v0_11f78 = load i32, i32* @r6, align 4
  store i32 %v0_11f78, i32* %r1.global-to-local, align 4
  store i32 2032805430, i32* @global_var_1f244.108, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_11f84 = inttoptr i32 %v0_11f78 to i32*
  %v3_11f84 = call i32 @function_120f0(i32 2, i32* %v2_11f84)
  %v4_11f84 = inttoptr i32 %v3_11f84 to i8*
  store i32 %v3_11f84, i32* %r0.global-to-local, align 4
  %v2_11f88 = add i32 %v3_11f84, 1
  %v3_11f88 = inttoptr i32 %v2_11f88 to i8*
  %v4_11f88 = load i8, i8* %v3_11f88, align 1
  %v5_11f88 = zext i8 %v4_11f88 to i32
  store i32 %v5_11f88, i32* %r2.global-to-local, align 4
  %v3_11f8c = load i8, i8* %v4_11f84, align 1
  %v4_11f8c = zext i8 %v3_11f8c to i32
  %v4_11f90 = mul nuw nsw i32 %v5_11f88, 256
  %v5_11f90 = or i32 %v4_11f8c, %v4_11f90
  store i32 %v5_11f90, i32* %r3.global-to-local, align 4
  %v1_11f94 = and i32 %v4_11f8c, 128
  %v2_11f94 = icmp ne i32 %v1_11f94, 0
  store i1 %v2_11f94, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_11f88, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11fa4 = call i32 @function_1211c(i32 2)
  %v0_11fa8 = load i32, i32* @r4, align 4
  store i32 %v0_11fa8, i32* %r0.global-to-local, align 4
  store i32 %v2_11fac, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_11fb4 = call i32 @function_13d18(i32 %v0_11fa8, %sockaddr* %v3_11fb4, i32 16)
  store i32 %v4_11fb4, i32* %r0.global-to-local, align 4
  %v3_11fb8 = icmp eq i32 %v4_11fb4, -1
  store i1 %v3_11fb8, i1* %cpsr_c.global-to-local, align 1
  %v8_11fb8 = icmp eq i32 %v4_11fb4, -1
  store i1 %v8_11fb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11fb8, label %dec_label_pc_11fc0, label %dec_label_pc_12044

dec_label_pc_11fc0:                               ; preds = %dec_label_pc_11f68
  %v0_11fc0 = load i32, i32* @r4, align 4
  store i32 %v0_11fc0, i32* %r0.global-to-local, align 4
  %v1_11fc4 = call i32 @function_135d0(i32 %v0_11fc0)
  %v0_11fc8 = load i32, i32* @r6, align 4
  store i32 %v0_11fc8, i32* %r0.global-to-local, align 4
  %v1_11fcc = call i32 @function_14798(i32 %v0_11fc8)
  store i32 %v1_11fcc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11fd0

dec_label_pc_11fd0:                               ; preds = %dec_label_pc_11388, %dec_label_pc_1136c, %dec_label_pc_11fc0
  %v0_11fd0 = load i32, i32* @r7, align 4
  %v1_11fd0 = load i32, i32* @r4, align 4
  %v2_11fd0 = add i32 %v1_11fd0, 12
  %v3_11fd0 = inttoptr i32 %v2_11fd0 to i32*
  store i32 %v0_11fd0, i32* %v3_11fd0, align 4
  %v0_11fd4 = load i32, i32* @r7, align 4
  %v1_11fd4 = trunc i32 %v0_11fd4 to i8
  %v2_11fd4 = load i32, i32* @r4, align 4
  %v3_11fd4 = add i32 %v2_11fd4, 284
  %v4_11fd4 = inttoptr i32 %v3_11fd4 to i8*
  store i8 %v1_11fd4, i8* %v4_11fd4, align 1
  br label %bb315

dec_label_pc_12014:                               ; preds = %dec_label_pc_11514, %dec_label_pc_114cc
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11550

dec_label_pc_1201c:                               ; preds = %dec_label_pc_1148c
  %v0_1201c = load i32, i32* @r5, align 4
  %v1_1201c = add i32 %v0_1201c, 4
  %v2_1201c = inttoptr i32 %v1_1201c to i32*
  %v3_1201c = load i32, i32* %v2_1201c, align 4
  store i32 %v3_1201c, i32* %r0.global-to-local, align 4
  %v1_12020 = call i32 @function_135d0(i32 %v3_1201c)
  store i32 %v1_12020, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_12028 = load i32, i32* @r6, align 4
  %v1_12028 = load i32, i32* @r5, align 4
  %v2_12028 = add i32 %v1_12028, 12
  %v3_12028 = inttoptr i32 %v2_12028 to i32*
  store i32 %v0_12028, i32* %v3_12028, align 4
  %v0_1202c = load i32, i32* %r4.global-to-local, align 4
  %v1_1202c = load i32, i32* @r5, align 4
  %v2_1202c = add i32 %v1_1202c, 4
  %v3_1202c = inttoptr i32 %v2_1202c to i32*
  store i32 %v0_1202c, i32* %v3_1202c, align 4
  %v0_12030 = load i32, i32* @r6, align 4
  %v1_12030 = trunc i32 %v0_12030 to i8
  %v2_12030 = load i32, i32* @r5, align 4
  %v3_12030 = add i32 %v2_12030, 284
  %v4_12030 = inttoptr i32 %v3_12030 to i8*
  store i8 %v1_12030, i8* %v4_12030, align 1
  br label %dec_label_pc_1142c

dec_label_pc_12038:                               ; preds = %dec_label_pc_11e40
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_1203c = load i32, i32* @sb, align 4
  %v2_1203c = inttoptr i32 %v1_1203c to i32*
  store i32 104, i32* %v2_1203c, align 4
  br label %dec_label_pc_11e58

dec_label_pc_12044:                               ; preds = %dec_label_pc_11f68
  store i32 %v2_11578, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12054 = load i32, i32* @r4, align 4
  store i32 %v0_12054, i32* %r0.global-to-local, align 4
  %v0_12058 = load i32, i32* @r6, align 4
  %v6_12058 = trunc i32 %v0_12058 to i8
  store i8 %v6_12058, i8* %stack_var_-52, align 1
  %v7_1205c = call i32 @function_13e2c(i32 %v0_12054, i32* nonnull %v2_11580, i32 1, i32 16384)
  store i32 %v2_1158c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12070 = load i32, i32* @r4, align 4
  store i32 %v0_12070, i32* %r0.global-to-local, align 4
  %v5_12074 = call i32 @function_13e2c(i32 %v0_12070, i32* nonnull %stack_var_-56, i32 4, i32 16384)
  %v2_1207c = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_1207c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12088 = load i32, i32* @r4, align 4
  store i32 %v0_12088, i32* %r0.global-to-local, align 4
  %v5_1208c = call i32 @function_13e2c(i32 %v0_12088, i32* nonnull %stack_var_-38, i32 2, i32 16384)
  %v0_12090 = load i32, i32* %r8.global-to-local, align 4
  %v1_12090 = add i32 %v0_12090, 12
  store i32 %v1_12090, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1209c = load i32, i32* @r4, align 4
  store i32 %v0_1209c, i32* %r0.global-to-local, align 4
  %v4_120a0 = inttoptr i32 %v1_12090 to i32*
  %v5_120a0 = call i32 @function_13e2c(i32 %v0_1209c, i32* %v4_120a0, i32 1, i32 16384)
  store i32 %v5_120a0, i32* %r0.global-to-local, align 4
  %v0_120a4 = load i32, i32* %r8.global-to-local, align 4
  %v1_120a4 = inttoptr i32 %v0_120a4 to i32*
  %v2_120a4 = load i32, i32* %v1_120a4, align 4
  store i32 %v2_120a4, i32* %r1.global-to-local, align 4
  %v1_120a8 = add i32 %v0_120a4, 12
  %v2_120a8 = inttoptr i32 %v1_120a8 to i8*
  %v3_120a8 = load i8, i8* %v2_120a8, align 1
  %v4_120a8 = zext i8 %v3_120a8 to i32
  store i32 %v4_120a8, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_120b0 = load i32, i32* @r4, align 4
  store i32 %v0_120b0, i32* %r0.global-to-local, align 4
  %v4_120b4 = inttoptr i32 %v2_120a4 to i32*
  %v5_120b4 = call i32 @function_13e2c(i32 %v0_120b0, i32* %v4_120b4, i32 %v4_120a8, i32 16384)
  %v0_120b8 = load i32, i32* %r8.global-to-local, align 4
  %v1_120b8 = add i32 %v0_120b8, 13
  store i32 %v1_120b8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_120c4 = load i32, i32* @r4, align 4
  store i32 %v0_120c4, i32* %r0.global-to-local, align 4
  %v4_120c8 = inttoptr i32 %v1_120b8 to i32*
  %v5_120c8 = call i32 @function_13e2c(i32 %v0_120c4, i32* %v4_120c8, i32 1, i32 16384)
  %v0_120cc = load i32, i32* @r4, align 4
  store i32 %v0_120cc, i32* %r0.global-to-local, align 4
  %v0_120d0 = load i32, i32* %r8.global-to-local, align 4
  %v1_120d0 = add i32 %v0_120d0, 13
  %v2_120d0 = inttoptr i32 %v1_120d0 to i8*
  %v3_120d0 = load i8, i8* %v2_120d0, align 1
  %v4_120d0 = zext i8 %v3_120d0 to i32
  store i32 %v4_120d0, i32* %r2.global-to-local, align 4
  %v1_120d4 = add i32 %v0_120d0, 4
  %v2_120d4 = inttoptr i32 %v1_120d4 to i32*
  %v3_120d4 = load i32, i32* %v2_120d4, align 4
  store i32 %v3_120d4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_120dc = inttoptr i32 %v3_120d4 to i32*
  %v5_120dc = call i32 @function_13e2c(i32 %v0_120cc, i32* %v4_120dc, i32 %v4_120d0, i32 16384)
  %v0_120e0 = load i32, i32* @r4, align 4
  store i32 %v0_120e0, i32* %r0.global-to-local, align 4
  %v1_120e4 = call i32 @function_135d0(i32 %v0_120e0)
  store i32 %v1_120e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_120e8

dec_label_pc_120e8:                               ; preds = %dec_label_pc_11f4c, %dec_label_pc_12044
  %v0_120e8 = load i32, i32* @r6, align 4
  store i32 %v0_120e8, i32* %r0.global-to-local, align 4
  %v1_120ec = call i32 @function_14798(i32 %v0_120e8)
  store i32 %v1_120ec, i32* %r0.global-to-local, align 4
  ret i32 %v1_120ec

; uselistorder directives
  uselistorder i32 %v4_11f8c, { 1, 0 }
  uselistorder i32 %v5_11f88, { 1, 0, 2 }
  uselistorder i1 %v7_11f5c, { 1, 0 }
  uselistorder i32 %v3_11f58, { 1, 0, 2, 3 }
  uselistorder i32 %v3_11f44, { 1, 0 }
  uselistorder i1 %v7_11f24, { 1, 0 }
  uselistorder i32 %v3_11f04, { 1, 0 }
  uselistorder i32 %v3_11eb4, { 1, 0 }
  uselistorder i1 %v1_11e80, { 1, 0 }
  uselistorder i32 %v1_11e68, { 2, 1, 0 }
  uselistorder i32 %v1_11e64, { 1, 0 }
  uselistorder i1 %v2_11e1c, { 1, 0 }
  uselistorder i32 %.357, { 1, 0 }
  uselistorder i1 %v7_11e04, { 1, 0 }
  uselistorder i32 %v0_11e00, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11de0, { 1, 0, 2 }
  uselistorder i32 %v4_11ddc, { 1, 0, 2 }
  uselistorder i1 %v7_11dcc, { 1, 0 }
  uselistorder i32 %v0_11dcc, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_11d7c, { 0, 2, 1 }
  uselistorder i1 %v0_11d6c, { 1, 0 }
  uselistorder i32 %v4_11d60, { 1, 0, 2 }
  uselistorder i32 %v0_11cf4, { 1, 2, 0 }
  uselistorder i1 %v7_11c64, { 1, 0 }
  uselistorder i32 %v1_11c60, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11c58, { 1, 0 }
  uselistorder i8 %v3_11c50, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11c60, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11c3c, { 1, 0 }
  uselistorder i1 %v7_11c34, { 1, 0 }
  uselistorder i1 %v7_11c2c, { 1, 0 }
  uselistorder i32 %v0_11c08, { 1, 2, 0 }
  uselistorder i32 %v2_11bf4, { 1, 0 }
  uselistorder i32 %v1_11bf4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_11bf4, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_11bc4, { 2, 1, 0 }
  uselistorder i1 %v7_11ba0, { 1, 0 }
  uselistorder i32 %v4_11b9c, { 1, 0, 2 }
  uselistorder i1 %v7_11b08, { 1, 0 }
  uselistorder i32 %v1_11b04, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11afc, { 1, 0 }
  uselistorder i8 %v3_11af4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b04, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11ae0, { 1, 0 }
  uselistorder i1 %v7_11ad8, { 1, 0 }
  uselistorder i1 %v7_11ad0, { 1, 0 }
  uselistorder i1 %v7_11a54, { 1, 0 }
  uselistorder i32 %v1_11a50, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11a48, { 1, 0 }
  uselistorder i8 %v3_11a40, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11a50, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11a2c, { 1, 0 }
  uselistorder i1 %v7_11a24, { 1, 0 }
  uselistorder i1 %v7_11a1c, { 1, 0 }
  uselistorder i1 %v7_119a0, { 1, 0 }
  uselistorder i32 %v1_1199c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11994, { 1, 0 }
  uselistorder i8 %v3_1198c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1199c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11978, { 1, 0 }
  uselistorder i1 %v7_11970, { 1, 0 }
  uselistorder i1 %v7_11968, { 1, 0 }
  uselistorder i1 %v7_118ec, { 1, 0 }
  uselistorder i32 %v1_118e8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_118e0, { 1, 0 }
  uselistorder i8 %v3_118d8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_118e8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_118c4, { 1, 0 }
  uselistorder i1 %v7_118bc, { 1, 0 }
  uselistorder i1 %v7_118b4, { 1, 0 }
  uselistorder i32 %v0_1185c, { 2, 1, 0 }
  uselistorder i1 %v7_11854, { 1, 0 }
  uselistorder i1 %v8_11848, { 1, 0 }
  uselistorder i8 %v3_11840, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_11850, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1182c, { 1, 0 }
  uselistorder i1 %v7_11824, { 1, 0 }
  uselistorder i32 %v0_117cc, { 2, 1, 0 }
  uselistorder i1 %v7_117c4, { 1, 0 }
  uselistorder i1 %v8_117b8, { 1, 0 }
  uselistorder i8 %v3_117b0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_117c0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1179c, { 1, 0 }
  uselistorder i1 %v7_11794, { 1, 0 }
  uselistorder i1 %v7_1178c, { 1, 0 }
  uselistorder i32 %v0_11768.pre, { 0, 2, 1 }
  uselistorder i32 %v1_11750, { 1, 0 }
  uselistorder i32 %v1_1174c, { 1, 0 }
  uselistorder i32 %v1_11744, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_11740, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_11740, { 0, 2, 1 }
  uselistorder i32 %v0_11708.pr, { 1, 0 }
  uselistorder i1 %v7_116e0, { 1, 0 }
  uselistorder i1 %v2_116cc, { 1, 0, 2 }
  uselistorder i1 %v2_116b4, { 1, 0, 2 }
  uselistorder i32 %v1_116d4, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_116a8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_116d0, { 1, 0 }
  uselistorder i32 %v2_116d8, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_11694, { 0, 2, 1, 3 }
  uselistorder i32 %v0_1165c, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_11638, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11634, { 1, 0 }
  uselistorder i32 %v5_11618, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_11604, { 1, 0, 2 }
  uselistorder i32 %v3_11600, { 1, 0, 2 }
  uselistorder i32 %v0_11ec4, { 1, 0, 2 }
  uselistorder i32 %v0_115d4, { 1, 0, 2 }
  uselistorder i1 %v7_115b4, { 1, 0 }
  uselistorder i32 %v0_1151c, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_114fc, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_114f0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_1147c, { 2, 1, 0 }
  uselistorder i32 %v3_11478, { 1, 0 }
  uselistorder i1 %v7_1145c, { 1, 0 }
  uselistorder i32 %v3_11458, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_1144c, { 1, 0 }
  uselistorder i32 %v1_11430, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_1141c, { 2, 1, 0 }
  uselistorder i32 %v3_11418, { 1, 0 }
  uselistorder i32 %v0_1141c, { 1, 0 }
  uselistorder i32 %v2_113b4, { 1, 0 }
  uselistorder i32 %v1_113b4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_113b4, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_11390, { 2, 1, 0 }
  uselistorder i32 %v1_1138c, { 1, 0 }
  uselistorder i32 %v2_1135c, { 1, 0 }
  uselistorder i32 %v0_1135c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_11354, { 1, 0 }
  uselistorder i1 %v7_1131c, { 0, 3, 1, 2 }
  uselistorder i1 %v2_1131c, { 1, 2, 0 }
  uselistorder i32 %v2_11314, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_1130c, { 1, 0 }
  uselistorder i32 %v1_112f0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v2_112e4, { 1, 0 }
  uselistorder i32 %v1_112e4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_112e4, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_112d4, { 1, 0 }
  uselistorder i32 %v3_11338, { 5, 7, 4, 8, 6, 1, 0, 10, 3, 2, 9 }
  uselistorder i32 %storemerge232, { 1, 0, 2 }
  uselistorder i32 %v2_1158c, { 0, 2, 3, 4, 1 }
  uselistorder i32* %v2_11580, { 2, 1, 6, 3, 0, 4, 5, 7 }
  uselistorder i32 %v2_11578, { 4, 3, 8, 5, 2, 6, 7, 9, 1, 0 }
  uselistorder i32 %v2_11ce8, { 1, 2, 0 }
  uselistorder i32 %v2_11348, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v3_11228, { 1, 0 }
  uselistorder i32 %v1_11214, { 1, 0 }
  uselistorder i32 %v1_111fc, { 1, 2, 0 }
  uselistorder i32 %v0_11208, { 0, 3, 2, 1 }
  uselistorder i32 %v0_111cc, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_111c0, { 2, 1, 0 }
  uselistorder i32 %v1_1119c, { 3, 1, 0, 4, 2 }
  uselistorder i32 %v3_1117c, { 1, 2, 0, 3 }
  uselistorder i1 %v2_11174, { 1, 0 }
  uselistorder i32 %v0_110d8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_11110, { 1, 2, 4, 8, 0, 3, 6, 5, 7 }
  uselistorder i32 %v1_11080, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_10fa4, { 0, 2, 1 }
  uselistorder i32 %v1_10fa0, { 3, 2, 0, 1 }
  uselistorder i32 %v4_10f7c, { 1, 0 }
  uselistorder i32 %v5_10f64, { 0, 2, 1 }
  uselistorder i1 %v2_10eec, { 1, 0 }
  uselistorder i1 %v3_10ed0, { 1, 0, 2 }
  uselistorder i1 %v2_10ebc, { 1, 0 }
  uselistorder i1 %v2_10e98, { 1, 0 }
  uselistorder i32 %v1_10e48, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10e34, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10e30, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v4_10e20, { 1, 0 }
  uselistorder i32 %v0_10e10, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10dec, { 1, 0 }
  uselistorder i8* %stack_var_-1876.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_11104, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i32 %v4_10198, { 1, 0 }
  uselistorder i32 %v0_1018c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_10138, { 1, 0 }
  uselistorder i32 %v0_10130, { 0, 1, 3, 2 }
  uselistorder i32 %v0_100d8, { 3, 2, 0, 1 }
  uselistorder i1 %v7_10078, { 1, 0 }
  uselistorder i32 %v3_10070, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_10058, { 0, 2, 1 }
  uselistorder i32 %v0_10040, { 2, 1, 0 }
  uselistorder i32 %v0_1001c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge240, { 1, 0 }
  uselistorder i32 %v0_fcf0, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-56, { 1, 5, 6, 7, 4, 8, 3, 2, 9, 0, 10, 11 }
  uselistorder i8* %stack_var_-52, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 62, 11, 12, 57, 63, 43, 64, 65, 129, 13, 14, 15, 35, 44, 45, 46, 47, 0, 1, 2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 58, 59, 60, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 61, 72, 73, 75, 74, 76, 77, 78, 79, 80, 82, 84, 83, 81, 85, 86, 87, 88, 94, 89, 90, 91, 92, 95, 138, 139, 96, 140, 141, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 128, 114, 115, 116, 117, 118, 119, 121, 120, 123, 122, 93, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 43, 37, 14, 15, 17, 18, 19, 33, 38, 39, 0, 1, 2, 20, 21, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 34, 36, 35, 44, 46, 45, 40, 41, 42, 48, 49, 50, 51, 52, 53, 54, 47, 55, 56, 57, 58, 59, 61, 63, 62, 267, 60, 64, 65, 66, 67, 72, 68, 69, 70, 71, 74, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 85, 86, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 301, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 44, 11, 12, 13, 14, 38, 36, 37, 15, 16, 17, 32, 33, 1, 2, 3, 58, 59, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 39, 40, 0, 45, 46, 47, 48, 41, 42, 43, 49, 50, 51, 53, 54, 52, 55, 56, 60, 57, 275, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 276, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 130, 129, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 112, 113, 114, 116, 115, 33, 131, 105, 108, 107, 133, 135, 136, 132, 137, 134, 35, 34, 36, 38, 37, 39, 41, 40, 42, 93, 92, 95, 94, 96, 97, 109, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 117, 44, 45, 47, 46, 48, 43, 49, 50, 51, 52, 54, 53, 56, 55, 58, 57, 59, 60, 61, 62, 64, 63, 66, 65, 68, 67, 69, 70, 71, 72, 74, 73, 76, 75, 78, 77, 79, 80, 81, 82, 84, 83, 86, 85, 88, 87, 89, 90, 91, 99, 98, 106, 100, 101, 102, 119, 118, 121, 120, 103, 104, 111, 110, 140, 138, 123, 122, 124, 126, 125, 127, 128, 150, 384, 139, 142, 141, 143, 144, 146, 145, 147, 154, 148, 149, 153, 151, 152, 155, 157, 158, 156, 161, 159, 160, 163, 162, 164, 166, 165, 222, 167, 168, 169, 171, 170, 172, 173, 175, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 374, 373, 375, 379, 378, 376, 377, 380, 381, 382, 383 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 23, 3, 16, 0, 1, 21, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 20, 15, 22, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 51, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 10, 111, 202, 201, 93, 94, 99, 101, 102, 103, 104, 105, 11, 188, 13, 14, 15, 55, 56, 57, 74, 75, 76, 77, 78, 0, 1, 6, 7, 2, 3, 4, 5, 8, 95, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 97, 66, 71, 72, 67, 68, 69, 70, 73, 96, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 189, 106, 107, 108, 109, 110, 190, 98, 12, 100, 112, 114, 113, 115, 116, 118, 120, 119, 191, 117, 121, 122, 123, 124, 125, 126, 131, 127, 128, 129, 130, 194, 195, 192, 193, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 149, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 187, 167, 168, 169, 170, 171, 186, 172, 173, 174, 185, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 197, 198, 199, 196, 200 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 108, 200, 199, 90, 91, 96, 98, 99, 100, 101, 102, 12, 183, 13, 14, 15, 16, 55, 56, 57, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 92, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 94, 66, 71, 72, 67, 68, 69, 70, 73, 93, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 185, 103, 104, 105, 106, 107, 186, 95, 184, 97, 109, 111, 110, 112, 113, 115, 117, 116, 187, 114, 118, 119, 120, 121, 122, 127, 123, 124, 125, 126, 188, 189, 197, 128, 198, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 182, 160, 161, 162, 163, 164, 181, 165, 166, 167, 180, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 191, 192, 193, 194, 195, 190, 196 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8** @global_var_1f240.106, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1f240.106 to i32), { 1, 0 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5, 8 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_15cc8.34 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_15cc8.34, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_15cc8.34 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13e2c, { 2, 3, 4, 5, 6, 7, 8, 19, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13dcc, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8 }
  uselistorder i32 (i32)* @function_1211c, { 35, 27, 26, 34, 28, 36, 33, 32, 31, 30, 29, 25, 24, 9, 23, 22, 21, 37, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12d00, { 21, 24, 22, 23, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 2, 1, 0, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 (i32, i32*)* @function_120f0, { 1, 2, 8, 0, 3, 4, 5, 6, 7, 9, 10, 31, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 59, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 54, 55, 56, 57 }
  uselistorder i32 (i32)* @function_121d4, { 45, 44, 38, 46, 43, 42, 41, 40, 39, 37, 36, 20, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f1ec.161 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1f1ed.162, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f1ec.161 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_137f0, { 2, 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder i32 ()* @function_fa5c, { 3, 2, 1, 0 }
  uselistorder i32 254, { 8, 9, 10, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8 2, { 0, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13e58, { 0, 1, 2, 8, 3, 4, 5, 6, 7 }
  uselistorder i32 16384, { 31, 49, 32, 50, 33, 51, 34, 52, 35, 53, 36, 54, 13, 55, 12, 66, 0, 47, 1, 48, 2, 56, 3, 57, 4, 58, 5, 59, 6, 60, 7, 61, 8, 62, 9, 63, 29, 64, 30, 65, 27, 68, 28, 69, 26, 67, 37, 70, 10, 71, 11, 72, 39, 73, 15, 74, 40, 75, 41, 76, 42, 77, 14, 78, 38, 79, 16, 80, 17, 81, 18, 82, 83, 43, 84, 19, 85, 20, 86, 22, 87, 21, 88, 23, 89, 24, 90, 45, 91, 46, 92, 25, 93, 44, 94 }
  uselistorder i32 (i32, i32, i32, i32)* @function_e4f4, { 8, 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_13424, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_e498, { 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1f1d0.525, { 2, 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint (i32* @global_var_162d8.521 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_161b0.471 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_16178.459 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_1613c.443 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_1611c.435 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16114.433 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_160dc.418 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_160cc.414 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_160c4.412 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_160a8.404 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16020.376 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_16018.374 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_16010.370 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15fec.362 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15fdc.358 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15fb0.348 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15fa0.344 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15f98.342 to i32), { 1, 4, 2, 0, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15f64.328 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15f40.318 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15ee0.296 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d4c.286 to i32), { 0, 5, 1, 2, 3, 6, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_15e64.268 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15e10.250 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15df0.244 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint ([11 x i8]* @global_var_15de4.242 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15ddc.240 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15dd4.238 to i32), { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15dc8.234 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([14 x i8]* @global_var_15db8.232 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_15da8.228 to i32), { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15ee4.224 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d88.220 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d80.218 to i32), { 1, 7, 2, 8, 0, 9, 3, 4, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_15d78.216 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_15d6c.214 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_16170.212 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15d64.210 to i32), { 0, 7, 1, 8, 2, 9, 3, 10, 4, 5, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_15d5c.208 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15d54.206 to i32), { 0, 6, 3, 7, 1, 8, 2, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15d40.202 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_15d30.198 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16238.192 to i32), { 7, 46, 8, 47, 9, 48, 10, 49, 0, 50, 11, 51, 12, 52, 13, 53, 1, 54, 2, 55, 3, 56, 14, 57, 4, 58, 15, 59, 5, 60, 16, 61, 17, 62, 18, 63, 6, 64, 19, 65, 20, 66, 21, 67, 22, 68, 23, 69, 24, 70, 25, 71, 26, 72, 27, 73, 28, 74, 29, 75, 30, 76, 31, 77, 32, 78, 33, 79, 34, 80, 35, 81, 36, 82, 37, 83, 38, 84, 39, 85, 40, 86, 41, 42, 43, 87, 44, 88, 45, 89 }
  uselistorder i32 (i32, i32, i32)* @function_fb30, { 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_15cf0.190 to i32), { 3, 16, 4, 17, 5, 18, 0, 19, 1, 20, 6, 21, 2, 22, 7, 23, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16094.188 to i32), { 6, 56, 7, 57, 8, 58, 9, 59, 0, 60, 10, 61, 1, 62, 11, 63, 2, 64, 12, 65, 13, 66, 14, 67, 3, 68, 15, 69, 16, 70, 17, 71, 18, 72, 19, 73, 20, 74, 4, 75, 21, 76, 22, 77, 23, 78, 24, 79, 25, 80, 26, 81, 27, 82, 28, 83, 29, 84, 30, 85, 31, 86, 32, 87, 33, 88, 34, 89, 35, 90, 36, 91, 37, 92, 38, 93, 39, 94, 40, 95, 41, 96, 42, 97, 43, 98, 44, 45, 46, 99, 47, 100, 48, 101, 49, 102, 50, 103, 51, 104, 5, 105, 52, 106, 53, 107, 54, 108, 55, 109 }
  uselistorder i8* @global_var_1f1e1.184, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1f1e0.176, { 1, 0 }
  uselistorder i8** @global_var_1f1c0.171, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1f1c0.171 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 ()* @function_f8c8, { 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 6, 5, 4, 3, 2, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 7, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 1, 0 }
  uselistorder i32 2048, { 4, 3, 0, 1, 5, 6, 2, 7, 8, 9 }
  uselistorder i32* @global_var_1f254.169, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1f250.167, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1f1f0.155, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_138a0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27 }
  uselistorder i32 (i32)* @function_f920, { 1, 0 }
  uselistorder i32* @global_var_1f238.83, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_12ef4, { 2, 1, 0 }
  uselistorder i32* @global_var_1f258.153, { 0, 2, 1 }
  uselistorder i32 ()* @function_135fc, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 9, 3, 5, 6, 10, 4, 7, 8, 13, 12, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 25, 26, 2, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 0, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 1, 115, 116, 117, 118 }
  uselistorder i32* @sb, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 47, 48, 50, 51, 52, 55, 53, 54, 56, 57, 58, 59 }
  uselistorder label %dec_label_pc_120e8, { 1, 0 }
  uselistorder label %dec_label_pc_11fd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115e0.backedge.thread455, { 9, 4, 8, 2, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_115e0.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %.thread228, { 1, 0 }
  uselistorder label %bb352, { 1, 0 }
  uselistorder label %dec_label_pc_11e58, { 1, 0 }
  uselistorder label %dec_label_pc_11e24, { 1, 0 }
  uselistorder label %thread-pre-split78, { 1, 0 }
  uselistorder label %dec_label_pc_11d34, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11c60, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11c4c, { 1, 0 }
  uselistorder label %dec_label_pc_11bf4, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_11b04, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11af0, { 1, 0 }
  uselistorder label %dec_label_pc_11a50, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11a3c, { 1, 0 }
  uselistorder label %dec_label_pc_1199c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11988, { 1, 0 }
  uselistorder label %dec_label_pc_118e8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_118d4, { 1, 0 }
  uselistorder label %dec_label_pc_11850, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1183c, { 1, 0 }
  uselistorder label %dec_label_pc_117cc, { 1, 0 }
  uselistorder label %dec_label_pc_117c0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_117ac, { 1, 0 }
  uselistorder label %dec_label_pc_11768, { 2, 1, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_11758, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb326, { 2, 1, 0 }
  uselistorder label %bb324, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11708, { 1, 0 }
  uselistorder label %dec_label_pc_116b0, { 1, 0 }
  uselistorder label %dec_label_pc_116b0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11644, { 1, 0 }
  uselistorder label %bb322, { 1, 0 }
  uselistorder label %dec_label_pc_115f8, { 1, 0 }
  uselistorder label %dec_label_pc_115e8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_115e8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_115dc.loopexit, { 1, 4, 0, 2, 3 }
  uselistorder label %dec_label_pc_11564, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11550, { 1, 0 }
  uselistorder label %dec_label_pc_1142c, { 7, 1, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_11404, { 1, 0 }
  uselistorder label %bb317, { 1, 0 }
  uselistorder label %bb315, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_11270.dec_label_pc_11270_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11258.dec_label_pc_11258_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11250, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_11248, { 1, 0 }
  uselistorder label %dec_label_pc_111fc, { 1, 0 }
  uselistorder label %dec_label_pc_110a0, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_11094, { 1, 0 }
  uselistorder label %.thread50, { 2, 1, 0 }
  uselistorder label %.thread48, { 1, 0 }
  uselistorder label %dec_label_pc_10efc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ed8, { 1, 0 }
  uselistorder label %dec_label_pc_10ecc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ea8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10e84, { 1, 0 }
  uselistorder label %bb287, { 1, 0 }
  uselistorder label %dec_label_pc_10e30, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_100d8, { 1, 0 }
}

define i32 @function_120f0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_120f0:
  %v3_120f4 = mul i32 %arg1, 8
  %v2_120f8 = add i32 %v3_120f4, ptrtoint (i32* @global_var_1f260.549 to i32)
  store i1 false, i1* @cpsr_v, align 1
  %v2_120fc = icmp eq i32* %arg2, null
  br i1 %v2_120fc, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_120f0
  %v3_1210811 = inttoptr i32 %v2_120f8 to i32*
  %v4_1210812 = load i32, i32* %v3_1210811, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_120f0
  %v2_12100 = add i32 %v3_120f4, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 5)
  %v3_12100 = inttoptr i32 %v2_12100 to i8*
  %v4_12100 = load i8, i8* %v3_12100, align 1
  %v5_12100 = zext i8 %v4_12100 to i32
  store i32 %v5_12100, i32* @r2, align 4
  %v2_12104 = add i32 %v3_120f4, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 4)
  %v3_12104 = inttoptr i32 %v2_12104 to i8*
  %v4_12104 = load i8, i8* %v3_12104, align 4
  %v5_12104 = zext i8 %v4_12104 to i32
  %v3_12108 = inttoptr i32 %v2_120f8 to i32*
  %v4_12108 = load i32, i32* %v3_12108, align 4
  %v5_1210c = mul nuw nsw i32 %v5_12100, 256
  %v6_1210c = or i32 %v5_12104, %v5_1210c
  store i32 %v6_1210c, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_12108714 = phi i32 [ %v4_1210812, %.thread ], [ %v4_12108, %bb ]
  ret i32 %v4_12108714

; uselistorder directives
  uselistorder i32 %v2_120f8, { 1, 0 }
  uselistorder i32 %v3_120f4, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_1211c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1211c:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1211c = mul i32 %arg1, 8
  %v3_12120 = load i32, i32* @r4, align 4
  store i32 %v3_12120, i32* %stack_var_-20, align 4
  %v3_12130 = and i32 %v3_1211c, 2040
  %v2_12134 = add i32 %v3_12130, ptrtoint (i32* @global_var_1f260.549 to i32)
  store i32 %v2_12134, i32* @lr, align 4
  %v1_1213c = add i32 %v3_12130, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 4)
  store i32 %v1_1213c, i32* %r7.global-to-local, align 4
  %v2_12140 = load i32, i32* @global_var_1f030.552, align 4
  store i32 %v2_12140, i32* @r2, align 4
  %v2_12144 = inttoptr i32 %v1_1213c to i8*
  %v3_12144 = load i8, i8* %v2_12144, align 4
  %v4_12144 = zext i8 %v3_12144 to i32
  store i32 %v4_12144, i32* @r1, align 4
  %v1_12148 = add i32 %v3_12130, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 5)
  %v2_12148 = inttoptr i32 %v1_12148 to i8*
  %v3_12148 = load i8, i8* %v2_12148, align 1
  %v4_12148 = zext i8 %v3_12148 to i32
  %v3_1214c = udiv i32 %v2_12140, 256
  %v4_12150 = mul nuw nsw i32 %v4_12148, 256
  %v5_12150 = or i32 %v4_12150, %v4_12144
  %v7_12150 = icmp eq i32 %v5_12150, 0
  store i1 %v7_12150, i1* @cpsr_z, align 1
  %v3_12154 = udiv i32 %v2_12140, 65536
  %v1_12158 = urem i32 %v3_1214c, 256
  store i32 %v1_12158, i32* %r6.global-to-local, align 4
  %v1_1215c = urem i32 %v3_12154, 256
  store i32 %v1_1215c, i32* %r5.global-to-local, align 4
  %v3_12160 = udiv i32 %v2_12140, 16777216
  store i32 %v3_12160, i32* %r4.global-to-local, align 4
  %v1_12164 = urem i32 %v2_12140, 256
  br i1 %v7_12150, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_1211c
  store i32 %v3_12120, i32* @r4, align 4
  ret i32 %v1_12164

bb8:                                              ; preds = %dec_label_pc_1211c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12170

dec_label_pc_12170:                               ; preds = %dec_label_pc_12170, %bb8
  %v2_1217c = phi i32 [ %v1_121b8, %dec_label_pc_12170 ], [ 0, %bb8 ]
  %v0_12170 = phi i32 [ %v0_121b0, %dec_label_pc_12170 ], [ %v2_12134, %bb8 ]
  %v1_12170 = inttoptr i32 %v0_12170 to i32*
  %v2_12170 = load i32, i32* %v1_12170, align 4
  %v2_12174 = add i32 %v2_12170, %v2_1217c
  %v3_12174 = inttoptr i32 %v2_12174 to i8*
  %v4_12174 = load i8, i8* %v3_12174, align 1
  %v6_12174 = zext i8 %v4_12174 to i32
  %v2_12178 = xor i32 %v6_12174, %v1_12164
  %v1_1217c = trunc i32 %v2_12178 to i8
  store i8 %v1_1217c, i8* %v3_12174, align 1
  %v0_12180 = load i32, i32* @lr, align 4
  %v1_12180 = inttoptr i32 %v0_12180 to i32*
  %v2_12180 = load i32, i32* %v1_12180, align 4
  %v0_12184 = load i32, i32* %ip.global-to-local, align 4
  %v2_12184 = add i32 %v0_12184, %v2_12180
  %v3_12184 = inttoptr i32 %v2_12184 to i8*
  %v4_12184 = load i8, i8* %v3_12184, align 1
  %v6_12184 = zext i8 %v4_12184 to i32
  %v0_12188 = load i32, i32* %r6.global-to-local, align 4
  %v2_12188 = xor i32 %v0_12188, %v6_12184
  %v1_1218c = trunc i32 %v2_12188 to i8
  store i8 %v1_1218c, i8* %v3_12184, align 1
  %v0_12190 = load i32, i32* @lr, align 4
  %v1_12190 = inttoptr i32 %v0_12190 to i32*
  %v2_12190 = load i32, i32* %v1_12190, align 4
  %v0_12194 = load i32, i32* %ip.global-to-local, align 4
  %v2_12194 = add i32 %v0_12194, %v2_12190
  %v3_12194 = inttoptr i32 %v2_12194 to i8*
  %v4_12194 = load i8, i8* %v3_12194, align 1
  %v6_12194 = zext i8 %v4_12194 to i32
  %v0_12198 = load i32, i32* %r5.global-to-local, align 4
  %v2_12198 = xor i32 %v0_12198, %v6_12194
  %v1_1219c = trunc i32 %v2_12198 to i8
  store i8 %v1_1219c, i8* %v3_12194, align 1
  %v0_121a0 = load i32, i32* @lr, align 4
  %v1_121a0 = inttoptr i32 %v0_121a0 to i32*
  %v2_121a0 = load i32, i32* %v1_121a0, align 4
  store i32 %v2_121a0, i32* @r1, align 4
  %v0_121a4 = load i32, i32* %ip.global-to-local, align 4
  %v2_121a4 = add i32 %v0_121a4, %v2_121a0
  %v3_121a4 = inttoptr i32 %v2_121a4 to i8*
  %v4_121a4 = load i8, i8* %v3_121a4, align 1
  %v6_121a4 = zext i8 %v4_121a4 to i32
  %v0_121a8 = load i32, i32* %r4.global-to-local, align 4
  %v2_121a8 = xor i32 %v0_121a8, %v6_121a4
  %v1_121ac = trunc i32 %v2_121a8 to i8
  store i8 %v1_121ac, i8* %v3_121a4, align 1
  %v0_121b0 = load i32, i32* @lr, align 4
  %v1_121b0 = add i32 %v0_121b0, 4
  %v2_121b0 = inttoptr i32 %v1_121b0 to i8*
  %v3_121b0 = load i8, i8* %v2_121b0, align 1
  %v4_121b0 = zext i8 %v3_121b0 to i32
  %v0_121b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_121b4 = add i32 %v0_121b4, 1
  %v2_121b4 = inttoptr i32 %v1_121b4 to i8*
  %v3_121b4 = load i8, i8* %v2_121b4, align 1
  %v4_121b4 = zext i8 %v3_121b4 to i32
  %v0_121b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_121b8 = add i32 %v0_121b8, 1
  store i32 %v1_121b8, i32* %ip.global-to-local, align 4
  %v4_121bc = mul nuw nsw i32 %v4_121b4, 256
  %v5_121bc = or i32 %v4_121bc, %v4_121b0
  store i32 %v5_121bc, i32* @r2, align 4
  %v2_121c0 = sub i32 %v5_121bc, %v1_121b8
  %v6_121c0 = and i32 %v2_121c0, %v1_121b8
  %v7_121c0 = icmp slt i32 %v6_121c0, 0
  store i1 %v7_121c0, i1* @cpsr_v, align 1
  %v9_121c0 = icmp eq i32 %v5_121bc, %v1_121b8
  store i1 %v9_121c0, i1* @cpsr_z, align 1
  %v8_121c4 = icmp sgt i32 %v5_121bc, %v1_121b8
  br i1 %v8_121c4, label %dec_label_pc_12170, label %dec_label_pc_121c8

dec_label_pc_121c8:                               ; preds = %dec_label_pc_12170
  %v2_121c8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_121c8, i32* @r4, align 4
  ret i32 %v1_12164

; uselistorder directives
  uselistorder i32 %v5_121bc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_121b8, { 2, 4, 0, 3, 5, 1 }
  uselistorder i32 %v0_121b0, { 1, 0 }
  uselistorder i32 %v1_12164, { 0, 2, 1 }
  uselistorder i32 %v2_12140, { 3, 0, 1, 2, 4 }
  uselistorder i1* @cpsr_v, { 1, 2, 0 }
}

define i32 @function_121d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_121d4:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_121d4 = mul i32 %arg1, 8
  %v3_121d8 = load i32, i32* @r4, align 4
  store i32 %v3_121d8, i32* %stack_var_-20, align 4
  %v3_121e8 = and i32 %v3_121d4, 2040
  %v2_121ec = add i32 %v3_121e8, ptrtoint (i32* @global_var_1f260.549 to i32)
  store i32 %v2_121ec, i32* @lr, align 4
  %v1_121f4 = add i32 %v3_121e8, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 4)
  store i32 %v1_121f4, i32* %r7.global-to-local, align 4
  %v2_121f8 = load i32, i32* @global_var_1f030.552, align 4
  store i32 %v2_121f8, i32* @r2, align 4
  %v2_121fc = inttoptr i32 %v1_121f4 to i8*
  %v3_121fc = load i8, i8* %v2_121fc, align 4
  %v4_121fc = zext i8 %v3_121fc to i32
  %v1_12200 = add i32 %v3_121e8, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 5)
  %v2_12200 = inttoptr i32 %v1_12200 to i8*
  %v3_12200 = load i8, i8* %v2_12200, align 1
  %v4_12200 = zext i8 %v3_12200 to i32
  %v3_12204 = udiv i32 %v2_121f8, 256
  %v4_12208 = mul nuw nsw i32 %v4_12200, 256
  %v5_12208 = or i32 %v4_12208, %v4_121fc
  %v7_12208 = icmp eq i32 %v5_12208, 0
  %v3_1220c = udiv i32 %v2_121f8, 65536
  %v1_12210 = urem i32 %v3_12204, 256
  store i32 %v1_12210, i32* %r6.global-to-local, align 4
  %v1_12214 = urem i32 %v3_1220c, 256
  store i32 %v1_12214, i32* %r5.global-to-local, align 4
  %v3_12218 = udiv i32 %v2_121f8, 16777216
  store i32 %v3_12218, i32* %r4.global-to-local, align 4
  %v1_1221c = urem i32 %v2_121f8, 256
  br i1 %v7_12208, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_121d4
  store i32 %v3_121d8, i32* @r4, align 4
  ret i32 %v1_1221c

bb8:                                              ; preds = %dec_label_pc_121d4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12228

dec_label_pc_12228:                               ; preds = %dec_label_pc_12228, %bb8
  %v2_12234 = phi i32 [ %v1_12270, %dec_label_pc_12228 ], [ 0, %bb8 ]
  %v0_12228 = phi i32 [ %v0_12268, %dec_label_pc_12228 ], [ %v2_121ec, %bb8 ]
  %v1_12228 = inttoptr i32 %v0_12228 to i32*
  %v2_12228 = load i32, i32* %v1_12228, align 4
  %v2_1222c = add i32 %v2_12228, %v2_12234
  %v3_1222c = inttoptr i32 %v2_1222c to i8*
  %v4_1222c = load i8, i8* %v3_1222c, align 1
  %v6_1222c = zext i8 %v4_1222c to i32
  %v2_12230 = xor i32 %v6_1222c, %v1_1221c
  %v1_12234 = trunc i32 %v2_12230 to i8
  store i8 %v1_12234, i8* %v3_1222c, align 1
  %v0_12238 = load i32, i32* @lr, align 4
  %v1_12238 = inttoptr i32 %v0_12238 to i32*
  %v2_12238 = load i32, i32* %v1_12238, align 4
  %v0_1223c = load i32, i32* %ip.global-to-local, align 4
  %v2_1223c = add i32 %v0_1223c, %v2_12238
  %v3_1223c = inttoptr i32 %v2_1223c to i8*
  %v4_1223c = load i8, i8* %v3_1223c, align 1
  %v6_1223c = zext i8 %v4_1223c to i32
  %v0_12240 = load i32, i32* %r6.global-to-local, align 4
  %v2_12240 = xor i32 %v0_12240, %v6_1223c
  %v1_12244 = trunc i32 %v2_12240 to i8
  store i8 %v1_12244, i8* %v3_1223c, align 1
  %v0_12248 = load i32, i32* @lr, align 4
  %v1_12248 = inttoptr i32 %v0_12248 to i32*
  %v2_12248 = load i32, i32* %v1_12248, align 4
  %v0_1224c = load i32, i32* %ip.global-to-local, align 4
  %v2_1224c = add i32 %v0_1224c, %v2_12248
  %v3_1224c = inttoptr i32 %v2_1224c to i8*
  %v4_1224c = load i8, i8* %v3_1224c, align 1
  %v6_1224c = zext i8 %v4_1224c to i32
  %v0_12250 = load i32, i32* %r5.global-to-local, align 4
  %v2_12250 = xor i32 %v0_12250, %v6_1224c
  %v1_12254 = trunc i32 %v2_12250 to i8
  store i8 %v1_12254, i8* %v3_1224c, align 1
  %v0_12258 = load i32, i32* @lr, align 4
  %v1_12258 = inttoptr i32 %v0_12258 to i32*
  %v2_12258 = load i32, i32* %v1_12258, align 4
  %v0_1225c = load i32, i32* %ip.global-to-local, align 4
  %v2_1225c = add i32 %v0_1225c, %v2_12258
  %v3_1225c = inttoptr i32 %v2_1225c to i8*
  %v4_1225c = load i8, i8* %v3_1225c, align 1
  %v6_1225c = zext i8 %v4_1225c to i32
  %v0_12260 = load i32, i32* %r4.global-to-local, align 4
  %v2_12260 = xor i32 %v0_12260, %v6_1225c
  %v1_12264 = trunc i32 %v2_12260 to i8
  store i8 %v1_12264, i8* %v3_1225c, align 1
  %v0_12268 = load i32, i32* @lr, align 4
  %v1_12268 = add i32 %v0_12268, 4
  %v2_12268 = inttoptr i32 %v1_12268 to i8*
  %v3_12268 = load i8, i8* %v2_12268, align 1
  %v4_12268 = zext i8 %v3_12268 to i32
  %v0_1226c = load i32, i32* %r7.global-to-local, align 4
  %v1_1226c = add i32 %v0_1226c, 1
  %v2_1226c = inttoptr i32 %v1_1226c to i8*
  %v3_1226c = load i8, i8* %v2_1226c, align 1
  %v4_1226c = zext i8 %v3_1226c to i32
  %v0_12270 = load i32, i32* %ip.global-to-local, align 4
  %v1_12270 = add i32 %v0_12270, 1
  store i32 %v1_12270, i32* %ip.global-to-local, align 4
  %v4_12274 = mul nuw nsw i32 %v4_1226c, 256
  %v5_12274 = or i32 %v4_12274, %v4_12268
  store i32 %v5_12274, i32* @r2, align 4
  %v8_1227c = icmp sgt i32 %v5_12274, %v1_12270
  br i1 %v8_1227c, label %dec_label_pc_12228, label %dec_label_pc_12280

dec_label_pc_12280:                               ; preds = %dec_label_pc_12228
  %v2_12280 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12280, i32* @r4, align 4
  ret i32 %v1_1221c

; uselistorder directives
  uselistorder i32 %v1_12270, { 1, 2, 0 }
  uselistorder i32 %v0_12268, { 1, 0 }
  uselistorder i32 %v1_1221c, { 0, 2, 1 }
  uselistorder i32 %v2_121f8, { 3, 0, 1, 2, 4 }
}

define i32 @function_1228c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1228c:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1228c = load i32, i32* @r4, align 4
  store i32 %v3_1228c, i32* %stack_var_-36, align 4
  %v6_1228c = load i32, i32* @r5, align 4
  %v9_1228c = load i32, i32* @r6, align 4
  %v12_1228c = load i32, i32* @r7, align 4
  %v1_12294 = call i32 @function_14054(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_12294, i32* @r7, align 4
  %v3_122b0 = call i32 @function_12cb8(i32 %v1_12294, i32 ptrtoint (i32* @global_var_162f8.557 to i32), i32 2)
  %v0_122b4 = load i32, i32* @r5, align 4
  %v0_122b8 = load i32, i32* @r7, align 4
  store i32 %v0_122b8, i32* @global_var_1f268.558, align 4
  %v1_122bc = trunc i32 %v0_122b4 to i8
  store i8 %v1_122bc, i8* bitcast (i32* @global_var_1f26c.559 to i8*), align 4
  %v0_122c0 = load i32, i32* @r6, align 4
  %v1_122c0 = trunc i32 %v0_122c0 to i8
  store i8 %v1_122c0, i8* bitcast (i32* @global_var_1f26d.560 to i8*), align 4
  %v1_122c4 = call i32 @function_14054(i32 %v0_122b4)
  %v0_122c8 = load i32, i32* @r5, align 4
  store i32 %v1_122c4, i32* @r7, align 4
  %v3_122d4 = call i32 @function_12cb8(i32 %v1_122c4, i32 ptrtoint (i32* @global_var_162fc.562 to i32), i32 %v0_122c8)
  %v0_122dc = load i32, i32* @r7, align 4
  store i32 %v0_122dc, i32* @global_var_1f270.563, align 4
  %v0_122e0 = load i32, i32* @r5, align 4
  %v1_122e0 = trunc i32 %v0_122e0 to i8
  store i8 %v1_122e0, i8* bitcast (i32* @global_var_1f274.564 to i8*), align 4
  %v0_122e4 = load i32, i32* @r6, align 4
  %v1_122e4 = trunc i32 %v0_122e4 to i8
  store i8 %v1_122e4, i8* bitcast (i32* @global_var_1f275.565 to i8*), align 4
  %v1_122e8 = call i32 @function_14054(i32 19)
  store i32 %v1_122e8, i32* @r5, align 4
  %v4_122f8 = call i32 @function_12cb8(i32 %v1_122e8, i32 ptrtoint ([20 x i8]* @global_var_16300.567 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1f27c.568 to i8*), align 4
  %v0_12308 = load i32, i32* @r5, align 4
  store i32 %v0_12308, i32* @global_var_1f278.569, align 4
  %v0_1230c = load i32, i32* @r6, align 4
  %v1_1230c = trunc i32 %v0_1230c to i8
  store i8 %v1_1230c, i8* bitcast (i32* @global_var_1f27d.570 to i8*), align 4
  %v1_12310 = call i32 @function_14054(i32 7)
  store i32 7, i32* %r8.global-to-local, align 4
  store i32 %v1_12310, i32* @r5, align 4
  %v3_12324 = call i32 @function_12cb8(i32 %v1_12310, i32 ptrtoint (i32* @global_var_16314.572 to i32), i32 7)
  %v0_1232c = load i32, i32* @r5, align 4
  store i32 %v0_1232c, i32* @global_var_1f280.573, align 4
  store i8 7, i8* bitcast (i32* @global_var_1f284.574 to i8*), align 4
  %v0_12334 = load i32, i32* @r6, align 4
  %v1_12334 = trunc i32 %v0_12334 to i8
  store i8 %v1_12334, i8* bitcast (i32* @global_var_1f285.575 to i8*), align 4
  %v1_12338 = call i32 @function_14054(i32 5)
  store i32 %v1_12338, i32* @r5, align 4
  %v3_12348 = call i32 @function_12cb8(i32 %v1_12338, i32 ptrtoint (i32* @global_var_1631c.577 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1f28c.578 to i8*), align 4
  %v0_12358 = load i32, i32* @r5, align 4
  store i32 %v0_12358, i32* @global_var_1f288.579, align 4
  %v0_1235c = load i32, i32* @r6, align 4
  %v1_1235c = trunc i32 %v0_1235c to i8
  store i8 %v1_1235c, i8* bitcast (i32* @global_var_1f28d.580 to i8*), align 4
  %v1_12360 = call i32 @function_14054(i32 4)
  store i32 %v1_12360, i32* @r5, align 4
  %v3_12370 = call i32 @function_12cb8(i32 %v1_12360, i32 ptrtoint (i32* @global_var_16324.582 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1f294.583 to i8*), align 4
  %v0_12380 = load i32, i32* @r5, align 4
  store i32 %v0_12380, i32* @global_var_1f290.584, align 4
  %v0_12384 = load i32, i32* @r6, align 4
  %v1_12384 = trunc i32 %v0_12384 to i8
  store i8 %v1_12384, i8* bitcast (i32* @global_var_1f295.585 to i8*), align 4
  %v1_12388 = call i32 @function_14054(i32 14)
  store i32 14, i32* @r7, align 4
  store i32 %v1_12388, i32* @r5, align 4
  %v3_1239c = call i32 @function_12cb8(i32 %v1_12388, i32 ptrtoint (i32* @global_var_1632c.587 to i32), i32 14)
  %v0_123a4 = load i32, i32* @r5, align 4
  store i32 %v0_123a4, i32* @global_var_1f298.588, align 4
  %v0_123a8 = load i32, i32* @r7, align 4
  %v1_123a8 = trunc i32 %v0_123a8 to i8
  store i8 %v1_123a8, i8* bitcast (i32* @global_var_1f29c.589 to i8*), align 4
  %v0_123ac = load i32, i32* @r6, align 4
  %v1_123ac = trunc i32 %v0_123ac to i8
  store i8 %v1_123ac, i8* bitcast (i32* @global_var_1f29d.590 to i8*), align 4
  %v1_123b0 = call i32 @function_14054(i32 6)
  store i32 6, i32* %sl.global-to-local, align 4
  store i32 %v1_123b0, i32* @r5, align 4
  %v3_123c4 = call i32 @function_12cb8(i32 %v1_123b0, i32 ptrtoint (i32* @global_var_1633c.592 to i32), i32 6)
  %v0_123cc = load i32, i32* @r5, align 4
  store i32 %v0_123cc, i32* @global_var_1f2a0.593, align 4
  store i8 6, i8* bitcast (i32* @global_var_1f2a4.594 to i8*), align 4
  %v0_123d4 = load i32, i32* @r6, align 4
  %v1_123d4 = trunc i32 %v0_123d4 to i8
  store i8 %v1_123d4, i8* bitcast (i32* @global_var_1f2a5.595 to i8*), align 4
  %v1_123d8 = call i32 @function_14054(i32 8)
  store i32 8, i32* %sb.global-to-local, align 4
  store i32 %v1_123d8, i32* @r5, align 4
  %v3_123ec = call i32 @function_12cb8(i32 %v1_123d8, i32 ptrtoint (i32* @global_var_16344.597 to i32), i32 8)
  %v0_123f0 = load i32, i32* %r8.global-to-local, align 4
  %v0_123f4 = load i32, i32* @r5, align 4
  store i32 %v0_123f4, i32* @global_var_1f2a8.598, align 4
  store i8 8, i8* bitcast (i32* @global_var_1f2ac.599 to i8*), align 4
  %v0_123fc = load i32, i32* @r6, align 4
  %v1_123fc = trunc i32 %v0_123fc to i8
  store i8 %v1_123fc, i8* bitcast (i32* @global_var_1f2ad.600 to i8*), align 4
  %v1_12400 = call i32 @function_14054(i32 %v0_123f0)
  %v0_12404 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12400, i32* @r5, align 4
  %v3_12410 = call i32 @function_12cb8(i32 %v1_12400, i32 ptrtoint (i32* @global_var_16350.602 to i32), i32 %v0_12404)
  %v0_12418 = load i32, i32* @r5, align 4
  store i32 %v0_12418, i32* @global_var_1f2b0.603, align 4
  %v1_1241c = trunc i32 %v0_12404 to i8
  store i8 %v1_1241c, i8* bitcast (i32* @global_var_1f2b4.604 to i8*), align 4
  %v0_12420 = load i32, i32* @r6, align 4
  %v1_12420 = trunc i32 %v0_12420 to i8
  store i8 %v1_12420, i8* bitcast (i32* @global_var_1f2b5.605 to i8*), align 4
  %v1_12424 = call i32 @function_14054(i32 16)
  store i32 %v1_12424, i32* @r5, align 4
  %v3_12434 = call i32 @function_12cb8(i32 %v1_12424, i32 ptrtoint (i32* @global_var_16358.607 to i32), i32 16)
  %v0_1243c = load i32, i32* @r7, align 4
  store i8 16, i8* bitcast (i32* @global_var_1f2bc.608 to i8*), align 4
  %v0_12444 = load i32, i32* @r5, align 4
  store i32 %v0_12444, i32* @global_var_1f2b8.609, align 4
  %v0_12448 = load i32, i32* @r6, align 4
  %v1_12448 = trunc i32 %v0_12448 to i8
  store i8 %v1_12448, i8* bitcast (i32* @global_var_1f2bd.610 to i8*), align 4
  %v1_1244c = call i32 @function_14054(i32 %v0_1243c)
  %v0_12450 = load i32, i32* @r7, align 4
  store i32 %v1_1244c, i32* @r5, align 4
  %v3_1245c = call i32 @function_12cb8(i32 %v1_1244c, i32 ptrtoint (i32* @global_var_1636c.612 to i32), i32 %v0_12450)
  %v0_12464 = load i32, i32* @r5, align 4
  store i32 %v0_12464, i32* @global_var_1f2c0.613, align 4
  %v0_12468 = load i32, i32* @r7, align 4
  %v1_12468 = trunc i32 %v0_12468 to i8
  store i8 %v1_12468, i8* bitcast (i32* @global_var_1f2c4.614 to i8*), align 4
  %v0_1246c = load i32, i32* @r6, align 4
  %v1_1246c = trunc i32 %v0_1246c to i8
  store i8 %v1_1246c, i8* bitcast (i32* @global_var_1f2c5.615 to i8*), align 4
  %v1_12470 = call i32 @function_14054(i32 9)
  store i32 9, i32* %fp.global-to-local, align 4
  store i32 %v1_12470, i32* @r5, align 4
  %v3_12484 = call i32 @function_12cb8(i32 %v1_12470, i32 ptrtoint (i32* @global_var_1637c.617 to i32), i32 9)
  %v0_1248c = load i32, i32* @r5, align 4
  store i32 %v0_1248c, i32* @global_var_1f2c8.618, align 4
  store i8 9, i8* bitcast (i32* @global_var_1f2cc.619 to i8*), align 4
  %v0_12494 = load i32, i32* @r6, align 4
  %v1_12494 = trunc i32 %v0_12494 to i8
  store i8 %v1_12494, i8* bitcast (i32* @global_var_1f2cd.620 to i8*), align 4
  %v1_12498 = call i32 @function_14054(i32 19)
  store i32 %v1_12498, i32* @r5, align 4
  %v3_124a8 = call i32 @function_12cb8(i32 %v1_12498, i32 ptrtoint (i32* @global_var_16388.622 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1f2d4.623 to i8*), align 4
  %v0_124b8 = load i32, i32* @r5, align 4
  store i32 %v0_124b8, i32* @global_var_1f2d0.624, align 4
  %v0_124bc = load i32, i32* @r6, align 4
  %v1_124bc = trunc i32 %v0_124bc to i8
  store i8 %v1_124bc, i8* bitcast (i32* @global_var_1f2d5.625 to i8*), align 4
  %v1_124c0 = call i32 @function_14054(i32 23)
  store i32 %v1_124c0, i32* @r5, align 4
  %v3_124d0 = call i32 @function_12cb8(i32 %v1_124c0, i32 ptrtoint (i32* @global_var_1639c.627 to i32), i32 23)
  %v0_124d8 = load i32, i32* %sb.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1f2dc.628 to i8*), align 4
  %v0_124e0 = load i32, i32* @r5, align 4
  store i32 %v0_124e0, i32* @global_var_1f2d8.629, align 4
  %v0_124e4 = load i32, i32* @r6, align 4
  %v1_124e4 = trunc i32 %v0_124e4 to i8
  store i8 %v1_124e4, i8* bitcast (i32* @global_var_1f2dd.630 to i8*), align 4
  %v1_124e8 = call i32 @function_14054(i32 %v0_124d8)
  %v0_124f0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_124e8, i32* @r5, align 4
  %v4_124f8 = call i32 @function_12cb8(i32 %v1_124e8, i32 ptrtoint ([9 x i8]* @global_var_163b4.632 to i32), i32 %v0_124f0)
  %v0_124fc = load i32, i32* @r7, align 4
  %v0_12500 = load i32, i32* @r5, align 4
  store i32 %v0_12500, i32* @global_var_1f2e0.633, align 4
  %v1_12504 = trunc i32 %v0_124f0 to i8
  store i8 %v1_12504, i8* bitcast (i32* @global_var_1f2e4.634 to i8*), align 4
  %v0_12508 = load i32, i32* @r6, align 4
  %v1_12508 = trunc i32 %v0_12508 to i8
  store i8 %v1_12508, i8* bitcast (i32* @global_var_1f2e5.635 to i8*), align 4
  %v1_1250c = call i32 @function_14054(i32 %v0_124fc)
  %v0_12510 = load i32, i32* @r7, align 4
  store i32 %v1_1250c, i32* @r5, align 4
  %v3_1251c = call i32 @function_12cb8(i32 %v1_1250c, i32 ptrtoint (i32* @global_var_163c0.637 to i32), i32 %v0_12510)
  %v0_12524 = load i32, i32* @r5, align 4
  store i32 %v0_12524, i32* @global_var_1f2e8.638, align 4
  %v0_12528 = load i32, i32* @r7, align 4
  %v1_12528 = trunc i32 %v0_12528 to i8
  store i8 %v1_12528, i8* bitcast (i32* @global_var_1f2ec.639 to i8*), align 4
  %v0_1252c = load i32, i32* @r6, align 4
  %v1_1252c = trunc i32 %v0_1252c to i8
  store i8 %v1_1252c, i8* bitcast (i32* @global_var_1f2ed.640 to i8*), align 4
  %v1_12530 = call i32 @function_14054(i32 19)
  store i32 %v1_12530, i32* @r5, align 4
  %v3_12540 = call i32 @function_12cb8(i32 %v1_12530, i32 ptrtoint (i32* @global_var_163d0.642 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1f2f4.643 to i8*), align 4
  %v0_12550 = load i32, i32* @r5, align 4
  store i32 %v0_12550, i32* @global_var_1f2f0.644, align 4
  %v0_12554 = load i32, i32* @r6, align 4
  %v1_12554 = trunc i32 %v0_12554 to i8
  store i8 %v1_12554, i8* bitcast (i32* @global_var_1f2f5.645 to i8*), align 4
  %v1_12558 = call i32 @function_14054(i32 23)
  store i32 %v1_12558, i32* @r5, align 4
  %v3_12568 = call i32 @function_12cb8(i32 %v1_12558, i32 ptrtoint (i32* @global_var_163e4.647 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1f2fc.648 to i8*), align 4
  %v0_12578 = load i32, i32* @r5, align 4
  store i32 %v0_12578, i32* @global_var_1f2f8.649, align 4
  %v0_1257c = load i32, i32* @r6, align 4
  %v1_1257c = trunc i32 %v0_1257c to i8
  store i8 %v1_1257c, i8* bitcast (i32* @global_var_1f2fd.650 to i8*), align 4
  %v1_12580 = call i32 @function_14054(i32 24)
  %v0_1258c = load i32, i32* @r7, align 4
  %v1_1258c = add i32 %v0_1258c, 10
  store i32 %v1_1258c, i32* @r7, align 4
  store i32 %v1_12580, i32* @r5, align 4
  %v3_12594 = call i32 @function_12cb8(i32 %v1_12580, i32 ptrtoint (i32* @global_var_163fc.652 to i32), i32 24)
  %v0_1259c = load i32, i32* @r5, align 4
  store i32 %v0_1259c, i32* @global_var_1f300.653, align 4
  %v0_125a0 = load i32, i32* @r7, align 4
  %v1_125a0 = trunc i32 %v0_125a0 to i8
  store i8 %v1_125a0, i8* bitcast (i32* @global_var_1f304.654 to i8*), align 4
  %v0_125a4 = load i32, i32* @r6, align 4
  %v1_125a4 = trunc i32 %v0_125a4 to i8
  store i8 %v1_125a4, i8* bitcast (i32* @global_var_1f305.655 to i8*), align 4
  %v1_125a8 = call i32 @function_14054(i32 15)
  store i32 %v1_125a8, i32* @r5, align 4
  %v3_125b8 = call i32 @function_12cb8(i32 %v1_125a8, i32 ptrtoint (i32* @global_var_16418.657 to i32), i32 15)
  %v0_125c0 = load i32, i32* %sl.global-to-local, align 4
  store i8 15, i8* bitcast (i32* @global_var_1f30c.658 to i8*), align 4
  %v0_125c8 = load i32, i32* @r5, align 4
  store i32 %v0_125c8, i32* @global_var_1f308.659, align 4
  %v0_125cc = load i32, i32* @r6, align 4
  %v1_125cc = trunc i32 %v0_125cc to i8
  store i8 %v1_125cc, i8* bitcast (i32* @global_var_1f30d.660 to i8*), align 4
  %v1_125d0 = call i32 @function_14054(i32 %v0_125c0)
  %v0_125d4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_125d0, i32* @r5, align 4
  %v4_125e0 = call i32 @function_12cb8(i32 %v1_125d0, i32 ptrtoint ([7 x i8]* @global_var_16428.662 to i32), i32 %v0_125d4)
  %v0_125e4 = load i32, i32* %r8.global-to-local, align 4
  %v0_125e8 = load i32, i32* @r5, align 4
  store i32 %v0_125e8, i32* @global_var_1f310.663, align 4
  %v1_125ec = trunc i32 %v0_125d4 to i8
  store i8 %v1_125ec, i8* bitcast (i32* @global_var_1f314.664 to i8*), align 4
  %v0_125f0 = load i32, i32* @r6, align 4
  %v1_125f0 = trunc i32 %v0_125f0 to i8
  store i8 %v1_125f0, i8* bitcast (i32* @global_var_1f315.665 to i8*), align 4
  %v1_125f4 = call i32 @function_14054(i32 %v0_125e4)
  %v0_125f8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_125f4, i32* @r5, align 4
  %v4_12604 = call i32 @function_12cb8(i32 %v1_125f4, i32 ptrtoint ([8 x i8]* @global_var_16430.667 to i32), i32 %v0_125f8)
  %v0_1260c = load i32, i32* @r5, align 4
  store i32 %v0_1260c, i32* @global_var_1f318.668, align 4
  %v1_12610 = trunc i32 %v0_125f8 to i8
  store i8 %v1_12610, i8* bitcast (i32* @global_var_1f31c.669 to i8*), align 4
  %v0_12614 = load i32, i32* @r6, align 4
  %v1_12614 = trunc i32 %v0_12614 to i8
  store i8 %v1_12614, i8* bitcast (i32* @global_var_1f31d.670 to i8*), align 4
  %v1_12618 = call i32 @function_14054(i32 %v0_125f8)
  %v0_1261c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12618, i32* @r5, align 4
  %v4_12628 = call i32 @function_12cb8(i32 %v1_12618, i32 ptrtoint ([8 x i8]* @global_var_16438.672 to i32), i32 %v0_1261c)
  %v0_12630 = load i32, i32* @r5, align 4
  store i32 %v0_12630, i32* @global_var_1f320.673, align 4
  %v1_12634 = trunc i32 %v0_1261c to i8
  store i8 %v1_12634, i8* bitcast (i32* @global_var_1f324.674 to i8*), align 4
  %v0_12638 = load i32, i32* @r6, align 4
  %v1_12638 = trunc i32 %v0_12638 to i8
  store i8 %v1_12638, i8* bitcast (i32* @global_var_1f325.675 to i8*), align 4
  %v1_1263c = call i32 @function_14054(i32 3)
  store i32 %v1_1263c, i32* @r5, align 4
  %v4_1264c = call i32 @function_12cb8(i32 %v1_1263c, i32 ptrtoint ([4 x i8]* @global_var_16440.677 to i32), i32 3)
  %v0_12654 = load i32, i32* @r7, align 4
  store i8 3, i8* bitcast (i32* @global_var_1f32c.678 to i8*), align 4
  %v0_1265c = load i32, i32* @r5, align 4
  store i32 %v0_1265c, i32* @global_var_1f328.679, align 4
  %v0_12660 = load i32, i32* @r6, align 4
  %v1_12660 = trunc i32 %v0_12660 to i8
  store i8 %v1_12660, i8* bitcast (i32* @global_var_1f32d.680 to i8*), align 4
  %v1_12664 = call i32 @function_14054(i32 %v0_12654)
  %v0_12668 = load i32, i32* @r7, align 4
  store i32 %v1_12664, i32* @r5, align 4
  %v3_12674 = call i32 @function_12cb8(i32 %v1_12664, i32 ptrtoint (i32* @global_var_16444.682 to i32), i32 %v0_12668)
  %v0_1267c = load i32, i32* @r5, align 4
  store i32 %v0_1267c, i32* @global_var_1f330.683, align 4
  %v0_12680 = load i32, i32* @r7, align 4
  %v1_12680 = trunc i32 %v0_12680 to i8
  store i8 %v1_12680, i8* bitcast (i32* @global_var_1f334.684 to i8*), align 4
  %v0_12684 = load i32, i32* @r6, align 4
  %v1_12684 = trunc i32 %v0_12684 to i8
  store i8 %v1_12684, i8* bitcast (i32* @global_var_1f335.685 to i8*), align 4
  %v1_12688 = call i32 @function_14054(i32 29)
  store i32 %v1_12688, i32* @r5, align 4
  %v3_12698 = call i32 @function_12cb8(i32 %v1_12688, i32 ptrtoint (i32* @global_var_16460.687 to i32), i32 29)
  %v0_126a0 = load i32, i32* %fp.global-to-local, align 4
  store i8 29, i8* bitcast (i32* @global_var_1f33c.688 to i8*), align 4
  %v0_126a8 = load i32, i32* @r5, align 4
  store i32 %v0_126a8, i32* @global_var_1f338.689, align 4
  %v0_126ac = load i32, i32* @r6, align 4
  %v1_126ac = trunc i32 %v0_126ac to i8
  store i8 %v1_126ac, i8* bitcast (i32* @global_var_1f33d.690 to i8*), align 4
  %v1_126b0 = call i32 @function_14054(i32 %v0_126a0)
  %v0_126b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_126b0, i32* @r5, align 4
  %v4_126c0 = call i32 @function_12cb8(i32 %v1_126b0, i32 ptrtoint ([10 x i8]* @global_var_16480.692 to i32), i32 %v0_126b8)
  %v0_126c4 = load i32, i32* %sb.global-to-local, align 4
  %v0_126c8 = load i32, i32* @r5, align 4
  store i32 %v0_126c8, i32* @global_var_1f340.693, align 4
  %v1_126cc = trunc i32 %v0_126b8 to i8
  store i8 %v1_126cc, i8* bitcast (i32* @global_var_1f344.694 to i8*), align 4
  %v0_126d0 = load i32, i32* @r6, align 4
  %v1_126d0 = trunc i32 %v0_126d0 to i8
  store i8 %v1_126d0, i8* bitcast (i32* @global_var_1f345.695 to i8*), align 4
  %v1_126d4 = call i32 @function_14054(i32 %v0_126c4)
  %v0_126dc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_126d4, i32* @r5, align 4
  %v4_126e4 = call i32 @function_12cb8(i32 %v1_126d4, i32 ptrtoint ([9 x i8]* @global_var_163b4.632 to i32), i32 %v0_126dc)
  %v0_126ec = load i32, i32* @r5, align 4
  store i32 %v0_126ec, i32* @global_var_1f348.696, align 4
  %v1_126f0 = trunc i32 %v0_126dc to i8
  store i8 %v1_126f0, i8* bitcast (i32* @global_var_1f34c.697 to i8*), align 4
  %v0_126f4 = load i32, i32* @r6, align 4
  %v1_126f4 = trunc i32 %v0_126f4 to i8
  store i8 %v1_126f4, i8* bitcast (i32* @global_var_1f34d.698 to i8*), align 4
  %v1_126f8 = call i32 @function_14054(i32 5)
  store i32 %v1_126f8, i32* @r5, align 4
  %v4_12708 = call i32 @function_12cb8(i32 %v1_126f8, i32 ptrtoint ([6 x i8]* @global_var_1648c.700 to i32), i32 5)
  %v0_12710 = load i32, i32* %sl.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1f354.701 to i8*), align 4
  %v0_12718 = load i32, i32* @r5, align 4
  store i32 %v0_12718, i32* @global_var_1f350.702, align 4
  %v0_1271c = load i32, i32* @r6, align 4
  %v1_1271c = trunc i32 %v0_1271c to i8
  store i8 %v1_1271c, i8* bitcast (i32* @global_var_1f355.703 to i8*), align 4
  %v1_12720 = call i32 @function_14054(i32 %v0_12710)
  %v0_12724 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_12720, i32* @r5, align 4
  %v4_12730 = call i32 @function_12cb8(i32 %v1_12720, i32 ptrtoint ([7 x i8]* @global_var_16494.705 to i32), i32 %v0_12724)
  %v0_12738 = load i32, i32* @r5, align 4
  store i32 %v0_12738, i32* @global_var_1f358.706, align 4
  %v1_1273c = trunc i32 %v0_12724 to i8
  store i8 %v1_1273c, i8* bitcast (i32* @global_var_1f35c.707 to i8*), align 4
  %v0_12740 = load i32, i32* @r6, align 4
  %v1_12740 = trunc i32 %v0_12740 to i8
  store i8 %v1_12740, i8* bitcast (i32* @global_var_1f35d.708 to i8*), align 4
  %v1_12744 = call i32 @function_14054(i32 21)
  store i32 %v1_12744, i32* @r5, align 4
  %v0_12754 = load i32, i32* %sl.global-to-local, align 4
  %v1_12754 = add i32 %v0_12754, 15
  store i32 %v1_12754, i32* %sl.global-to-local, align 4
  %v3_12758 = call i32 @function_12cb8(i32 %v1_12744, i32 ptrtoint (i32* @global_var_1649c.710 to i32), i32 21)
  %v0_12760 = load i32, i32* @r5, align 4
  store i32 %v0_12760, i32* @global_var_1f360.711, align 4
  %v1_12764 = trunc i32 %v1_12754 to i8
  store i8 %v1_12764, i8* bitcast (i32* @global_var_1f364.712 to i8*), align 4
  %v0_12768 = load i32, i32* @r6, align 4
  %v1_12768 = trunc i32 %v0_12768 to i8
  store i8 %v1_12768, i8* bitcast (i32* @global_var_1f365.713 to i8*), align 4
  %v1_1276c = call i32 @function_14054(i32 17)
  store i32 %v1_1276c, i32* @r5, align 4
  %v3_1277c = call i32 @function_12cb8(i32 %v1_1276c, i32 ptrtoint (i32* @global_var_164b4.715 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1f36c.716 to i8*), align 4
  %v0_1278c = load i32, i32* @r5, align 4
  store i32 %v0_1278c, i32* @global_var_1f368.717, align 4
  %v0_12790 = load i32, i32* @r6, align 4
  %v1_12790 = trunc i32 %v0_12790 to i8
  store i8 %v1_12790, i8* bitcast (i32* @global_var_1f36d.718 to i8*), align 4
  %v1_12794 = call i32 @function_14054(i32 11)
  %v0_127a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_127a0 = add i32 %v0_127a0, 4
  store i32 %v1_127a0, i32* %r8.global-to-local, align 4
  store i32 %v1_12794, i32* @r5, align 4
  %v4_127a8 = call i32 @function_12cb8(i32 %v1_12794, i32 ptrtoint ([12 x i8]* @global_var_164c8.720 to i32), i32 11)
  %v0_127b0 = load i32, i32* @r5, align 4
  store i32 %v0_127b0, i32* @global_var_1f370.721, align 4
  %v1_127b4 = trunc i32 %v1_127a0 to i8
  store i8 %v1_127b4, i8* bitcast (i32* @global_var_1f374.722 to i8*), align 4
  %v0_127b8 = load i32, i32* @r6, align 4
  %v1_127b8 = trunc i32 %v0_127b8 to i8
  store i8 %v1_127b8, i8* bitcast (i32* @global_var_1f375.723 to i8*), align 4
  %v1_127bc = call i32 @function_14054(i32 23)
  store i32 %v1_127bc, i32* @r5, align 4
  %v3_127cc = call i32 @function_12cb8(i32 %v1_127bc, i32 ptrtoint (i32* @global_var_164d4.725 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1f37c.726 to i8*), align 4
  %v0_127dc = load i32, i32* @r5, align 4
  store i32 %v0_127dc, i32* @global_var_1f378.727, align 4
  %v0_127e0 = load i32, i32* @r6, align 4
  %v1_127e0 = trunc i32 %v0_127e0 to i8
  store i8 %v1_127e0, i8* bitcast (i32* @global_var_1f37d.728 to i8*), align 4
  %v1_127e4 = call i32 @function_14054(i32 83)
  store i32 %v1_127e4, i32* @r5, align 4
  %v3_127f4 = call i32 @function_12cb8(i32 %v1_127e4, i32 ptrtoint (i32* @global_var_16828.730 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1f384.731 to i8*), align 4
  %v0_12804 = load i32, i32* @r5, align 4
  store i32 %v0_12804, i32* @global_var_1f380.732, align 4
  %v0_12808 = load i32, i32* @r6, align 4
  %v1_12808 = trunc i32 %v0_12808 to i8
  store i8 %v1_12808, i8* bitcast (i32* @global_var_1f385.733 to i8*), align 4
  %v1_1280c = call i32 @function_14054(i32 32)
  store i32 %v1_1280c, i32* @r5, align 4
  %v3_1281c = call i32 @function_12cb8(i32 %v1_1280c, i32 ptrtoint (i32* @global_var_1687c.735 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1f38c.736 to i8*), align 4
  %v0_1282c = load i32, i32* @r5, align 4
  store i32 %v0_1282c, i32* @global_var_1f388.737, align 4
  %v0_12830 = load i32, i32* @r6, align 4
  %v1_12830 = trunc i32 %v0_12830 to i8
  store i8 %v1_12830, i8* bitcast (i32* @global_var_1f38d.738 to i8*), align 4
  %v1_12834 = call i32 @function_14054(i32 48)
  store i32 %v1_12834, i32* @r5, align 4
  %v3_12844 = call i32 @function_12cb8(i32 %v1_12834, i32 ptrtoint (i32* @global_var_164ec.740 to i32), i32 48)
  store i8 48, i8* bitcast (i32* @global_var_1f394.741 to i8*), align 4
  %v0_12854 = load i32, i32* @r5, align 4
  store i32 %v0_12854, i32* @global_var_1f390.742, align 4
  %v0_12858 = load i32, i32* @r6, align 4
  %v1_12858 = trunc i32 %v0_12858 to i8
  store i8 %v1_12858, i8* bitcast (i32* @global_var_1f395.743 to i8*), align 4
  %v1_1285c = call i32 @function_14054(i32 12)
  %v0_12868 = load i32, i32* @r7, align 4
  %v1_12868 = add i32 %v0_12868, -12
  store i32 %v1_12868, i32* @r7, align 4
  store i32 %v1_1285c, i32* @r5, align 4
  %v3_12870 = call i32 @function_12cb8(i32 %v1_1285c, i32 ptrtoint (i32* @global_var_16520.745 to i32), i32 12)
  %v0_12874 = load i32, i32* %fp.global-to-local, align 4
  %v0_12878 = load i32, i32* @r5, align 4
  store i32 %v0_12878, i32* @global_var_1f398.746, align 4
  %v0_1287c = load i32, i32* @r7, align 4
  %v1_1287c = trunc i32 %v0_1287c to i8
  store i8 %v1_1287c, i8* bitcast (i32* @global_var_1f39c.747 to i8*), align 4
  %v0_12880 = load i32, i32* @r6, align 4
  %v1_12880 = trunc i32 %v0_12880 to i8
  store i8 %v1_12880, i8* bitcast (i32* @global_var_1f39d.748 to i8*), align 4
  %v1_12884 = call i32 @function_14054(i32 %v0_12874)
  %v0_1288c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_12884, i32* @r5, align 4
  %v3_12894 = call i32 @function_12cb8(i32 %v1_12884, i32 ptrtoint (i32* @global_var_16530.750 to i32), i32 %v0_1288c)
  %v0_1289c = load i32, i32* @r5, align 4
  store i32 %v0_1289c, i32* @global_var_1f3a0.751, align 4
  %v1_128a0 = trunc i32 %v0_1288c to i8
  store i8 %v1_128a0, i8* bitcast (i32* @global_var_1f3a4.752 to i8*), align 4
  %v0_128a4 = load i32, i32* @r6, align 4
  %v1_128a4 = trunc i32 %v0_128a4 to i8
  store i8 %v1_128a4, i8* bitcast (i32* @global_var_1f3a5.753 to i8*), align 4
  %v1_128a8 = call i32 @function_14054(i32 10)
  store i32 %v1_128a8, i32* @r5, align 4
  %v3_128b8 = call i32 @function_12cb8(i32 %v1_128a8, i32 ptrtoint (i32* @global_var_1653c.755 to i32), i32 10)
  %v0_128c0 = load i32, i32* @r7, align 4
  store i8 10, i8* bitcast (i32* @global_var_1f3ac.756 to i8*), align 4
  %v0_128c8 = load i32, i32* @r5, align 4
  store i32 %v0_128c8, i32* @global_var_1f3a8.757, align 4
  %v0_128cc = load i32, i32* @r6, align 4
  %v1_128cc = trunc i32 %v0_128cc to i8
  store i8 %v1_128cc, i8* bitcast (i32* @global_var_1f3ad.758 to i8*), align 4
  %v1_128d0 = call i32 @function_14054(i32 %v0_128c0)
  %v0_128d4 = load i32, i32* @r7, align 4
  store i32 %v1_128d0, i32* @r5, align 4
  %v3_128e0 = call i32 @function_12cb8(i32 %v1_128d0, i32 ptrtoint (i32* @global_var_16548.760 to i32), i32 %v0_128d4)
  %v0_128e8 = load i32, i32* @r5, align 4
  store i32 %v0_128e8, i32* @global_var_1f3b0.761, align 4
  %v0_128ec = load i32, i32* @r7, align 4
  %v1_128ec = trunc i32 %v0_128ec to i8
  store i8 %v1_128ec, i8* bitcast (i32* @global_var_1f3b4.762 to i8*), align 4
  %v0_128f0 = load i32, i32* @r6, align 4
  %v1_128f0 = trunc i32 %v0_128f0 to i8
  store i8 %v1_128f0, i8* bitcast (i32* @global_var_1f3b5.763 to i8*), align 4
  %v1_128f4 = call i32 @function_14054(i32 16)
  store i32 %v1_128f4, i32* @r5, align 4
  %v3_12904 = call i32 @function_12cb8(i32 %v1_128f4, i32 ptrtoint (i32* @global_var_16558.765 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1f3bc.766 to i8*), align 4
  %v0_12914 = load i32, i32* @r5, align 4
  store i32 %v0_12914, i32* @global_var_1f3b8.767, align 4
  %v0_12918 = load i32, i32* @r6, align 4
  %v1_12918 = trunc i32 %v0_12918 to i8
  store i8 %v1_12918, i8* bitcast (i32* @global_var_1f3bd.768 to i8*), align 4
  %v1_1291c = call i32 @function_14054(i32 19)
  store i32 %v1_1291c, i32* @r5, align 4
  %v3_1292c = call i32 @function_12cb8(i32 %v1_1291c, i32 ptrtoint (i32* @global_var_1656c.770 to i32), i32 19)
  %v0_12934 = load i32, i32* %sb.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1f3c4.771 to i8*), align 4
  %v0_1293c = load i32, i32* @r5, align 4
  store i32 %v0_1293c, i32* @global_var_1f3c0.772, align 4
  %v0_12940 = load i32, i32* @r6, align 4
  %v1_12940 = trunc i32 %v0_12940 to i8
  store i8 %v1_12940, i8* bitcast (i32* @global_var_1f3c5.773 to i8*), align 4
  %v1_12944 = call i32 @function_14054(i32 %v0_12934)
  %v0_1294c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_12944, i32* @r5, align 4
  %v4_12954 = call i32 @function_12cb8(i32 %v1_12944, i32 ptrtoint ([9 x i8]* @global_var_16580.775 to i32), i32 %v0_1294c)
  %v0_12958 = load i32, i32* %r8.global-to-local, align 4
  %v0_1295c = load i32, i32* @r5, align 4
  store i32 %v0_1295c, i32* @global_var_1f3c8.776, align 4
  %v1_12960 = trunc i32 %v0_1294c to i8
  store i8 %v1_12960, i8* bitcast (i32* @global_var_1f3cc.777 to i8*), align 4
  %v0_12964 = load i32, i32* @r6, align 4
  %v1_12964 = trunc i32 %v0_12964 to i8
  store i8 %v1_12964, i8* bitcast (i32* @global_var_1f3cd.778 to i8*), align 4
  %v1_12968 = call i32 @function_14054(i32 %v0_12958)
  %v0_12970 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12968, i32* @r5, align 4
  %v3_12978 = call i32 @function_12cb8(i32 %v1_12968, i32 ptrtoint (i32* @global_var_164e0.780 to i32), i32 %v0_12970)
  %v0_1297c = load i32, i32* @r7, align 4
  %v0_12980 = load i32, i32* @r5, align 4
  store i32 %v0_12980, i32* @global_var_1f3d0.781, align 4
  %v1_12984 = trunc i32 %v0_12970 to i8
  store i8 %v1_12984, i8* bitcast (i32* @global_var_1f3d4.782 to i8*), align 4
  %v0_12988 = load i32, i32* @r6, align 4
  %v1_12988 = trunc i32 %v0_12988 to i8
  store i8 %v1_12988, i8* bitcast (i32* @global_var_1f3d5.783 to i8*), align 4
  %v1_1298c = call i32 @function_14054(i32 %v0_1297c)
  %v0_12990 = load i32, i32* @r7, align 4
  store i32 %v1_1298c, i32* @r5, align 4
  %v3_1299c = call i32 @function_12cb8(i32 %v1_1298c, i32 ptrtoint (i32* @global_var_1658c.785 to i32), i32 %v0_12990)
  %v0_129a4 = load i32, i32* @r5, align 4
  store i32 %v0_129a4, i32* @global_var_1f3d8.786, align 4
  %v0_129a8 = load i32, i32* @r7, align 4
  %v1_129a8 = trunc i32 %v0_129a8 to i8
  store i8 %v1_129a8, i8* bitcast (i32* @global_var_1f3dc.787 to i8*), align 4
  %v0_129ac = load i32, i32* @r6, align 4
  %v1_129ac = trunc i32 %v0_129ac to i8
  store i8 %v1_129ac, i8* bitcast (i32* @global_var_1f3dd.788 to i8*), align 4
  %v1_129b0 = call i32 @function_14054(i32 18)
  store i32 %v1_129b0, i32* @r5, align 4
  %v3_129c0 = call i32 @function_12cb8(i32 %v1_129b0, i32 ptrtoint (i32* @global_var_1659c.790 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1f3e4.791 to i8*), align 4
  %v0_129d0 = load i32, i32* @r5, align 4
  store i32 %v0_129d0, i32* @global_var_1f3e0.792, align 4
  %v0_129d4 = load i32, i32* @r6, align 4
  %v1_129d4 = trunc i32 %v0_129d4 to i8
  store i8 %v1_129d4, i8* bitcast (i32* @global_var_1f3e5.793 to i8*), align 4
  %v1_129d8 = call i32 @function_14054(i32 25)
  store i32 %v1_129d8, i32* @r5, align 4
  %v3_129e8 = call i32 @function_12cb8(i32 %v1_129d8, i32 ptrtoint (i32* @global_var_165b0.795 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1f3ec.796 to i8*), align 4
  %v0_129f8 = load i32, i32* @r5, align 4
  store i32 %v0_129f8, i32* @global_var_1f3e8.797, align 4
  %v0_129fc = load i32, i32* @r6, align 4
  %v1_129fc = trunc i32 %v0_129fc to i8
  store i8 %v1_129fc, i8* bitcast (i32* @global_var_1f3ed.798 to i8*), align 4
  %v1_12a00 = call i32 @function_14054(i32 115)
  store i32 115, i32* @r5, align 4
  store i32 %v1_12a00, i32* @r7, align 4
  %v3_12a14 = call i32 @function_12cb8(i32 %v1_12a00, i32 ptrtoint (i32* @global_var_165cc.800 to i32), i32 115)
  %v0_12a18 = load i32, i32* @r5, align 4
  %v0_12a1c = load i32, i32* @r7, align 4
  store i32 %v0_12a1c, i32* @global_var_1f3f0.801, align 4
  %v1_12a20 = trunc i32 %v0_12a18 to i8
  store i8 %v1_12a20, i8* bitcast (i32* @global_var_1f3f4.802 to i8*), align 4
  %v0_12a24 = load i32, i32* @r6, align 4
  %v1_12a24 = trunc i32 %v0_12a24 to i8
  store i8 %v1_12a24, i8* bitcast (i32* @global_var_1f3f5.803 to i8*), align 4
  %v1_12a28 = call i32 @function_14054(i32 %v0_12a18)
  %v0_12a2c = load i32, i32* @r5, align 4
  store i32 %v1_12a28, i32* @r7, align 4
  %v3_12a38 = call i32 @function_12cb8(i32 %v1_12a28, i32 ptrtoint (i32* @global_var_16640.805 to i32), i32 %v0_12a2c)
  %v0_12a40 = load i32, i32* @r7, align 4
  store i32 %v0_12a40, i32* @global_var_1f3f8.806, align 4
  %v0_12a44 = load i32, i32* @r5, align 4
  %v1_12a44 = trunc i32 %v0_12a44 to i8
  store i8 %v1_12a44, i8* bitcast (i32* @global_var_1f3fc.807 to i8*), align 4
  %v0_12a48 = load i32, i32* @r6, align 4
  %v1_12a48 = trunc i32 %v0_12a48 to i8
  store i8 %v1_12a48, i8* bitcast (i32* @global_var_1f3fd.808 to i8*), align 4
  %v1_12a4c = call i32 @function_14054(i32 79)
  store i32 %v1_12a4c, i32* @r5, align 4
  %v3_12a5c = call i32 @function_12cb8(i32 %v1_12a4c, i32 ptrtoint (i32* @global_var_166b4.810 to i32), i32 79)
  store i8 79, i8* bitcast (i32* @global_var_1f404.811 to i8*), align 4
  %v0_12a6c = load i32, i32* @r5, align 4
  store i32 %v0_12a6c, i32* @global_var_1f400.812, align 4
  %v0_12a70 = load i32, i32* @r6, align 4
  %v1_12a70 = trunc i32 %v0_12a70 to i8
  store i8 %v1_12a70, i8* bitcast (i32* @global_var_1f405.813 to i8*), align 4
  %v1_12a74 = call i32 @function_14054(i32 114)
  store i32 114, i32* @r5, align 4
  store i32 %v1_12a74, i32* @r7, align 4
  %v3_12a88 = call i32 @function_12cb8(i32 %v1_12a74, i32 ptrtoint (i32* @global_var_16704.815 to i32), i32 114)
  %v0_12a8c = load i32, i32* @r5, align 4
  %v0_12a90 = load i32, i32* @r7, align 4
  store i32 %v0_12a90, i32* @global_var_1f408.816, align 4
  %v1_12a94 = trunc i32 %v0_12a8c to i8
  store i8 %v1_12a94, i8* bitcast (i32* @global_var_1f40c.817 to i8*), align 4
  %v0_12a98 = load i32, i32* @r6, align 4
  %v1_12a98 = trunc i32 %v0_12a98 to i8
  store i8 %v1_12a98, i8* bitcast (i32* @global_var_1f40d.818 to i8*), align 4
  %v1_12a9c = call i32 @function_14054(i32 %v0_12a8c)
  %v0_12aa0 = load i32, i32* @r5, align 4
  store i32 %v1_12a9c, i32* @r7, align 4
  %v3_12aac = call i32 @function_12cb8(i32 %v1_12a9c, i32 ptrtoint (i32* @global_var_16778.820 to i32), i32 %v0_12aa0)
  %v0_12ab0 = load i32, i32* %sl.global-to-local, align 4
  %v0_12ab4 = load i32, i32* @r5, align 4
  %v1_12ab4 = trunc i32 %v0_12ab4 to i8
  store i8 %v1_12ab4, i8* bitcast (i32* @global_var_1f414.821 to i8*), align 4
  %v0_12ab8 = load i32, i32* @r7, align 4
  store i32 %v0_12ab8, i32* @global_var_1f410.822, align 4
  %v0_12abc = load i32, i32* @r6, align 4
  %v1_12abc = trunc i32 %v0_12abc to i8
  store i8 %v1_12abc, i8* bitcast (i32* @global_var_1f415.823 to i8*), align 4
  %v1_12ac0 = call i32 @function_14054(i32 %v0_12ab0)
  %v0_12ac8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_12ac0, i32* @r5, align 4
  %v3_12ad0 = call i32 @function_12cb8(i32 %v1_12ac0, i32 ptrtoint (i32* @global_var_167ec.825 to i32), i32 %v0_12ac8)
  %v0_12ad8 = load i32, i32* @r5, align 4
  store i32 %v0_12ad8, i32* @global_var_1f418.826, align 4
  %v1_12adc = trunc i32 %v0_12ac8 to i8
  store i8 %v1_12adc, i8* bitcast (i32* @global_var_1f41c.827 to i8*), align 4
  %v0_12ae0 = load i32, i32* @r6, align 4
  %v1_12ae0 = trunc i32 %v0_12ae0 to i8
  store i8 %v1_12ae0, i8* bitcast (i32* @global_var_1f41d.828 to i8*), align 4
  %v1_12ae4 = call i32 @function_14054(i32 19)
  store i32 %v1_12ae4, i32* @r5, align 4
  %v3_12af4 = call i32 @function_12cb8(i32 %v1_12ae4, i32 ptrtoint (i32* @global_var_163d0.642 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1f424.829 to i8*), align 4
  %v0_12b04 = load i32, i32* @r5, align 4
  store i32 %v0_12b04, i32* @global_var_1f420.830, align 4
  %v0_12b08 = load i32, i32* @r6, align 4
  %v1_12b08 = trunc i32 %v0_12b08 to i8
  store i8 %v1_12b08, i8* bitcast (i32* @global_var_1f425.831 to i8*), align 4
  %v1_12b0c = call i32 @function_14054(i32 23)
  store i32 %v1_12b0c, i32* @r5, align 4
  %v3_12b1c = call i32 @function_12cb8(i32 %v1_12b0c, i32 ptrtoint (i32* @global_var_16804.833 to i32), i32 23)
  %v0_12b24 = load i32, i32* %r8.global-to-local, align 4
  %v0_12b28 = load i32, i32* @r5, align 4
  store i32 %v0_12b28, i32* @global_var_1f428.834, align 4
  store i8 23, i8* bitcast (i32* @global_var_1f42c.835 to i8*), align 4
  %v0_12b30 = load i32, i32* @r6, align 4
  %v1_12b30 = trunc i32 %v0_12b30 to i8
  store i8 %v1_12b30, i8* bitcast (i32* @global_var_1f42d.836 to i8*), align 4
  %v1_12b34 = call i32 @function_14054(i32 %v0_12b24)
  %v0_12b3c = load i32, i32* %r8.global-to-local, align 4
  %v4_12b44 = call i32 @function_12cb8(i32 %v1_12b34, i32 ptrtoint ([12 x i8]* @global_var_1681c.838 to i32), i32 %v0_12b3c)
  %v0_12b48 = load i32, i32* @r6, align 4
  %v1_12b48 = trunc i32 %v0_12b48 to i8
  store i8 %v1_12b48, i8* bitcast (i32* @global_var_1f435.839 to i8*), align 4
  store i32 %v1_12b34, i32* @global_var_1f430.840, align 4
  %v1_12b50 = trunc i32 %v0_12b3c to i8
  store i8 %v1_12b50, i8* bitcast (i32* @global_var_1f434.841 to i8*), align 4
  %v2_12b54 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12b54, i32* @r4, align 4
  store i32 %v6_1228c, i32* @r5, align 4
  store i32 %v9_1228c, i32* @r6, align 4
  store i32 %v12_1228c, i32* @r7, align 4
  ret i32 %v4_12b44

; uselistorder directives
  uselistorder i32 %v1_12ac0, { 1, 0 }
  uselistorder i32 %v1_12a9c, { 1, 0 }
  uselistorder i32 %v1_12a74, { 1, 0 }
  uselistorder i32 %v1_12a28, { 1, 0 }
  uselistorder i32 %v1_12a00, { 1, 0 }
  uselistorder i32 %v1_1298c, { 1, 0 }
  uselistorder i32 %v1_12968, { 1, 0 }
  uselistorder i32 %v1_12944, { 1, 0 }
  uselistorder i32 %v1_128d0, { 1, 0 }
  uselistorder i32 %v1_12884, { 1, 0 }
  uselistorder i32 %v1_1285c, { 1, 0 }
  uselistorder i32 %v1_12794, { 1, 0 }
  uselistorder i32 %v1_12720, { 1, 0 }
  uselistorder i32 %v1_126d4, { 1, 0 }
  uselistorder i32 %v1_126b0, { 1, 0 }
  uselistorder i32 %v1_12664, { 1, 0 }
  uselistorder i32 %v1_12618, { 1, 0 }
  uselistorder i32 %v0_125f8, { 1, 0, 2 }
  uselistorder i32 %v1_125f4, { 1, 0 }
  uselistorder i32 %v1_125d0, { 1, 0 }
  uselistorder i32 %v1_12580, { 1, 0 }
  uselistorder i32 %v1_1250c, { 1, 0 }
  uselistorder i32 %v1_124e8, { 1, 0 }
  uselistorder i32 %v1_12470, { 1, 0 }
  uselistorder i32 %v1_1244c, { 1, 0 }
  uselistorder i32 %v1_12400, { 1, 0 }
  uselistorder i32 %v1_123d8, { 1, 0 }
  uselistorder i32 %v1_123b0, { 1, 0 }
  uselistorder i32 %v1_12388, { 1, 0 }
  uselistorder i32 %v1_12310, { 1, 0 }
  uselistorder i32 %v1_122c4, { 1, 0 }
  uselistorder i32 %v1_12294, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 6, 7, 8, 4, 1, 0, 3, 2, 5 }
  uselistorder i32* %sb.global-to-local, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32* %r8.global-to-local, { 7, 8, 9, 10, 11, 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32* %fp.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 114, { 1, 2, 0 }
  uselistorder i32 115, { 1, 2, 0 }
  uselistorder i8 17, { 1, 0, 2, 3 }
  uselistorder i8 3, { 2, 1, 0 }
  uselistorder i8 16, { 15, 16, 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 6, { 0, 7, 5, 8, 6, 9, 1, 10, 11, 2, 3, 4 }
  uselistorder i8 4, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 5, { 11, 12, 13, 0, 1, 14, 2, 3, 4, 5, 6, 7, 8, 10, 15, 9 }
  uselistorder i8 7, { 0, 5, 6, 7, 8, 1, 2, 3, 4 }
  uselistorder i32 (i32, i32, i32)* @function_12cb8, { 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1f260.549 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_12c3c(i8* %arg1) local_unnamed_addr {
dec_label_pc_12c3c:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_12c40 = load i8, i8* %arg1, align 1
  %v4_12c40 = zext i8 %v3_12c40 to i32
  %v2_12c44 = icmp eq i8 %v3_12c40, 0
  br i1 %v2_12c44, label %dec_label_pc_12c60, label %bb

dec_label_pc_12c60:                               ; preds = %dec_label_pc_12c50, %dec_label_pc_12c3c
  %merge = phi i32 [ %v4_12c40, %dec_label_pc_12c3c ], [ %v1_12c50, %dec_label_pc_12c50 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12c3c
  br label %dec_label_pc_12c50

dec_label_pc_12c50:                               ; preds = %dec_label_pc_12c50, %bb
  %v0_12c50 = phi i32 [ %v1_12c50, %dec_label_pc_12c50 ], [ 0, %bb ]
  %v1_12c50 = add i32 %v0_12c50, 1
  %v2_12c54 = add i32 %v1_12c50, %tmp
  %v3_12c54 = inttoptr i32 %v2_12c54 to i8*
  %v4_12c54 = load i8, i8* %v3_12c54, align 1
  %v2_12c58 = icmp eq i8 %v4_12c54, 0
  br i1 %v2_12c58, label %dec_label_pc_12c60, label %dec_label_pc_12c50

; uselistorder directives
  uselistorder i32 %v1_12c50, { 1, 0, 2 }
}

define i32 @function_12c64(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c64:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12c64 = load i8, i8* %arg1, align 1
  %v3_12c64 = zext i8 %v2_12c64 to i32
  %v2_12c68 = icmp eq i8 %v2_12c64, 0
  br i1 %v2_12c68, label %dec_label_pc_12cac, label %dec_label_pc_12c70

dec_label_pc_12c70:                               ; preds = %dec_label_pc_12c64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12c74

dec_label_pc_12c74:                               ; preds = %dec_label_pc_12c74, %dec_label_pc_12c70
  %v0_12c74 = phi i32 [ %v1_12c74, %dec_label_pc_12c74 ], [ 0, %dec_label_pc_12c70 ]
  %v1_12c74 = add i32 %v0_12c74, 1
  store i32 %v1_12c74, i32* %ip.global-to-local, align 4
  %v2_12c78 = add i32 %v1_12c74, %tmp
  %v3_12c78 = inttoptr i32 %v2_12c78 to i8*
  %v4_12c78 = load i8, i8* %v3_12c78, align 1
  %v2_12c7c = icmp eq i8 %v4_12c78, 0
  br i1 %v2_12c7c, label %dec_label_pc_12c84, label %dec_label_pc_12c74

dec_label_pc_12c84:                               ; preds = %dec_label_pc_12c74
  %v7_12c84 = icmp eq i32 %v0_12c74, -2
  br i1 %v7_12c84, label %dec_label_pc_12ca4, label %dec_label_pc_12c90.preheader

dec_label_pc_12c90.preheader:                     ; preds = %dec_label_pc_12c84, %dec_label_pc_12cac
  %storemerge = phi i32 [ %v3_12c64, %dec_label_pc_12cac ], [ %v1_12c74, %dec_label_pc_12c84 ]
  %v2_12c9c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12c90

dec_label_pc_12c90:                               ; preds = %dec_label_pc_12c90.dec_label_pc_12c90_crit_edge, %dec_label_pc_12c90.preheader
  %v2_12c9c = phi i32 [ %v5_12c9c, %dec_label_pc_12c90.dec_label_pc_12c90_crit_edge ], [ %v2_12c9c.pre, %dec_label_pc_12c90.preheader ]
  %v0_12c94 = phi i32 [ %v0_12c94.pre, %dec_label_pc_12c90.dec_label_pc_12c90_crit_edge ], [ %tmp, %dec_label_pc_12c90.preheader ]
  %v0_12c90 = phi i32 [ %v0_12c90.pre, %dec_label_pc_12c90.dec_label_pc_12c90_crit_edge ], [ %storemerge, %dec_label_pc_12c90.preheader ]
  %v1_12c90 = add i32 %v0_12c90, -1
  store i32 %v1_12c90, i32* @r2, align 4
  %v1_12c94 = inttoptr i32 %v0_12c94 to i8*
  %v2_12c94 = load i8, i8* %v1_12c94, align 1
  %v5_12c94 = add i32 %v0_12c94, 1
  store i32 %v5_12c94, i32* %r1.global-to-local, align 4
  %v3_12c98 = icmp eq i32 %v0_12c90, 0
  %v3_12c9c = inttoptr i32 %v2_12c9c to i8*
  store i8 %v2_12c94, i8* %v3_12c9c, align 1
  %v4_12c9c = load i32, i32* @r0, align 4
  %v5_12c9c = add i32 %v4_12c9c, 1
  store i32 %v5_12c9c, i32* @r0, align 4
  br i1 %v3_12c98, label %dec_label_pc_12ca4.loopexit, label %dec_label_pc_12c90.dec_label_pc_12c90_crit_edge

dec_label_pc_12c90.dec_label_pc_12c90_crit_edge:  ; preds = %dec_label_pc_12c90
  %v0_12c90.pre = load i32, i32* @r2, align 4
  %v0_12c94.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12c90

dec_label_pc_12ca4.loopexit:                      ; preds = %dec_label_pc_12c90
  %v0_12ca4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ca4

dec_label_pc_12ca4:                               ; preds = %dec_label_pc_12ca4.loopexit, %dec_label_pc_12c84
  %v0_12ca4 = phi i32 [ %v0_12ca4.pre, %dec_label_pc_12ca4.loopexit ], [ %v1_12c74, %dec_label_pc_12c84 ]
  ret i32 %v0_12ca4

dec_label_pc_12cac:                               ; preds = %dec_label_pc_12c64
  store i32 %v3_12c64, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12c90.preheader

; uselistorder directives
  uselistorder i32 %v5_12c9c, { 1, 0 }
  uselistorder i32 %v0_12c94, { 1, 0 }
  uselistorder i32 %v1_12c74, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_12c64, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12c90.preheader, { 1, 0 }
}

define i32 @function_12cb8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12cb8:
  %v2_12cb8 = icmp eq i32 %arg3, 0
  br i1 %v2_12cb8, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12cc4, %dec_label_pc_12cb8
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12cb8
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_12cc4

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12cc4, %bb
  %v0_12cc4 = phi i32 [ %v1_12ccc, %dec_label_pc_12cc4 ], [ 0, %bb ]
  %v2_12cc4 = add i32 %v0_12cc4, %arg2
  %v3_12cc4 = inttoptr i32 %v2_12cc4 to i8*
  %v4_12cc4 = load i8, i8* %v3_12cc4, align 1
  %v4_12cc8 = add i32 %v0_12cc4, %arg1
  %v5_12cc8 = inttoptr i32 %v4_12cc8 to i8*
  store i8 %v4_12cc4, i8* %v5_12cc8, align 1
  %v0_12ccc = load i32, i32* @ip, align 4
  %v1_12ccc = add i32 %v0_12ccc, 1
  store i32 %v1_12ccc, i32* @ip, align 4
  %v9_12cd0 = icmp eq i32 %v1_12ccc, %arg3
  br i1 %v9_12cd0, label %.loopexit, label %dec_label_pc_12cc4

; uselistorder directives
  uselistorder i32 %v1_12ccc, { 1, 2, 0 }
}

define i32 @function_12cdc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12cdc:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_12cdc = icmp eq i32 %arg2, 0
  br i1 %v2_12cdc, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12cec, %dec_label_pc_12cdc
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12cdc
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12cec

dec_label_pc_12cec:                               ; preds = %dec_label_pc_12cec.dec_label_pc_12cec_crit_edge, %bb
  %v2_12cec = phi i32 [ %v1_12cf0, %dec_label_pc_12cec.dec_label_pc_12cec_crit_edge ], [ 0, %bb ]
  %v0_12cec.off0 = phi i8 [ %extract.t, %dec_label_pc_12cec.dec_label_pc_12cec_crit_edge ], [ 0, %bb ]
  %v4_12cec = add i32 %v2_12cec, %arg1
  %v5_12cec = inttoptr i32 %v4_12cec to i8*
  store i8 %v0_12cec.off0, i8* %v5_12cec, align 1
  %v0_12cf0 = load i32, i32* %r3.global-to-local, align 4
  %v1_12cf0 = add i32 %v0_12cf0, 1
  store i32 %v1_12cf0, i32* %r3.global-to-local, align 4
  %v9_12cf4 = icmp eq i32 %v1_12cf0, %arg2
  br i1 %v9_12cf4, label %.loopexit, label %dec_label_pc_12cec.dec_label_pc_12cec_crit_edge

dec_label_pc_12cec.dec_label_pc_12cec_crit_edge:  ; preds = %dec_label_pc_12cec
  %v0_12cec.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_12cec.pre to i8
  br label %dec_label_pc_12cec

; uselistorder directives
  uselistorder i32 %v1_12cf0, { 1, 2, 0 }
}

define i32 @function_12d00(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12d00:
  store i32 %arg4, i32* @lr, align 4
  %v7_12d14 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_12d14, label %dec_label_pc_12d18, label %dec_label_pc_12d20

dec_label_pc_12d18:                               ; preds = %dec_label_pc_12d34, %dec_label_pc_12d00, %dec_label_pc_12d20
  ret i32 -1

dec_label_pc_12d20:                               ; preds = %dec_label_pc_12d00
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_12d18, label %dec_label_pc_12d28

dec_label_pc_12d28:                               ; preds = %dec_label_pc_12d20
  br label %dec_label_pc_12d40

dec_label_pc_12d34:                               ; preds = %dec_label_pc_12d58, %dec_label_pc_12d40
  %v1_12d34 = add i32 %v0_12d60, 1
  %v9_12d38 = icmp eq i32 %v1_12d34, %arg2
  br i1 %v9_12d38, label %dec_label_pc_12d18, label %dec_label_pc_12d40

dec_label_pc_12d40:                               ; preds = %dec_label_pc_12d34, %dec_label_pc_12d28
  %v0_12d60 = phi i32 [ %v1_12d34, %dec_label_pc_12d34 ], [ 0, %dec_label_pc_12d28 ]
  %v0_12d4c = phi i32 [ %v1_12d4c., %dec_label_pc_12d34 ], [ 0, %dec_label_pc_12d28 ]
  %v2_12d40 = add i32 %v0_12d4c, %arg3
  %v3_12d40 = inttoptr i32 %v2_12d40 to i8*
  %v4_12d40 = load i8, i8* %v3_12d40, align 1
  %v2_12d44 = add i32 %v0_12d60, %arg1
  %v3_12d44 = inttoptr i32 %v2_12d44 to i8*
  %v4_12d44 = load i8, i8* %v3_12d44, align 1
  %v9_12d48 = icmp eq i8 %v4_12d44, %v4_12d40
  %v1_12d4c = add i32 %v0_12d4c, 1
  %v1_12d4c. = select i1 %v9_12d48, i32 %v1_12d4c, i32 0
  br i1 %v9_12d48, label %dec_label_pc_12d58, label %dec_label_pc_12d34

dec_label_pc_12d58:                               ; preds = %dec_label_pc_12d40
  %v9_12d58 = icmp eq i32 %v1_12d4c., %arg4
  br i1 %v9_12d58, label %dec_label_pc_12d60, label %dec_label_pc_12d34

dec_label_pc_12d60:                               ; preds = %dec_label_pc_12d58
  %v1_12d60 = add i32 %v0_12d60, 1
  ret i32 %v1_12d60

; uselistorder directives
  uselistorder i1 %v9_12d48, { 1, 0 }
  uselistorder i32 %v0_12d4c, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12d18, { 0, 2, 1 }
}

define i32 @function_12d68(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d68:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_12d68 = load i32, i32* @r4, align 4
  store i32 %v3_12d68, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d74

dec_label_pc_12d74:                               ; preds = %.thread, %dec_label_pc_12d8c, %bb, %dec_label_pc_12d68
  %v0_12d74 = phi i32 [ %tmp, %dec_label_pc_12d68 ], [ %v5_12d74, %bb ], [ %v5_12d74, %dec_label_pc_12d8c ], [ %v5_12d74, %.thread ]
  %v1_12d74 = inttoptr i32 %v0_12d74 to i8*
  %v2_12d74 = load i8, i8* %v1_12d74, align 1
  %v3_12d74 = zext i8 %v2_12d74 to i32
  %v5_12d74 = add i32 %v0_12d74, 1
  store i32 %v5_12d74, i32* %r5.global-to-local, align 4
  %v7_12d7c = icmp eq i8 %v2_12d74, 9
  br i1 %v7_12d7c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12d74
  store i32 %v3_12d74, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d74

bb:                                               ; preds = %dec_label_pc_12d74
  %v8_12d80 = icmp eq i8 %v2_12d74, 32
  store i32 %v3_12d74, i32* %r4.global-to-local, align 4
  br i1 %v8_12d80, label %dec_label_pc_12d74, label %dec_label_pc_12d8c

dec_label_pc_12d8c:                               ; preds = %bb
  %v7_12d8c = icmp eq i8 %v2_12d74, 10
  br i1 %v7_12d8c, label %dec_label_pc_12d74, label %dec_label_pc_12d94

dec_label_pc_12d94:                               ; preds = %dec_label_pc_12d8c
  %v7_12d94 = icmp eq i8 %v2_12d74, 45
  br i1 %v7_12d94, label %dec_label_pc_12e74, label %dec_label_pc_12d9c

dec_label_pc_12d9c:                               ; preds = %dec_label_pc_12d94
  %v7_12d9c = icmp eq i8 %v2_12d74, 43
  br i1 %v7_12d9c, label %bb48, label %dec_label_pc_12dac

bb48:                                             ; preds = %dec_label_pc_12d9c
  %v2_12da0 = inttoptr i32 %v5_12d74 to i8*
  %v3_12da0 = load i8, i8* %v2_12da0, align 1
  %v4_12da0 = zext i8 %v3_12da0 to i32
  store i32 %v4_12da0, i32* %r4.global-to-local, align 4
  %v6_12da0 = add i32 %v0_12d74, 2
  store i32 %v6_12da0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12dac

dec_label_pc_12dac:                               ; preds = %bb48, %dec_label_pc_12d9c, %dec_label_pc_12e74
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_12e74 ], [ 2147483647, %dec_label_pc_12d9c ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_12e74 ], [ 0, %dec_label_pc_12d9c ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_12db4 = call i32 @function_13358(i32 %storemerge1, i32 %arg2)
  %v0_12db8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12db8, i32* @r1, align 4
  store i32 %v2_12db4, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_12dc4 = call i32 @function_13248()
  store i32 %v0_12dc4, i32* @lr, align 4
  %v0_12dd4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12dd4

dec_label_pc_12dd4:                               ; preds = %.thread8, %dec_label_pc_12dac
  %v2_12e5011 = phi i32 [ %v1_12e6c26, %.thread8 ], [ 0, %dec_label_pc_12dac ]
  %v1_12e2c = phi i32 [ %v0_12e6024, %.thread8 ], [ 0, %dec_label_pc_12dac ]
  %v1_12e14 = phi i32 [ %v3_12e58, %.thread8 ], [ %v0_12dd4.pre, %dec_label_pc_12dac ]
  %v1_12dd4 = urem i32 %v1_12e14, 256
  %v1_12dd8 = add nsw i32 %v1_12dd4, -48
  %v1_12de0 = add nsw i32 %v1_12dd4, -97
  %v1_12de4 = add i32 %v1_12e14, -48
  %v1_12de8 = add nsw i32 %v1_12dd4, -65
  %tmp71 = icmp ult i32 %v1_12dd8, 10
  br i1 %tmp71, label %dec_label_pc_12e18, label %dec_label_pc_12df0

dec_label_pc_12df0:                               ; preds = %dec_label_pc_12dd4
  %v2_12df0 = icmp ugt i32 %v1_12de8, 24
  %v7_12df0 = icmp eq i32 %v1_12de8, 25
  %v2_12df4 = xor i1 %v7_12df0, true
  %v3_12df4 = and i1 %v2_12df0, %v2_12df4
  br i1 %v3_12df4, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_12df0
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12df0, %bb49
  %v0_12e0820 = phi i32 [ %v1_12de4, %dec_label_pc_12df0 ], [ 0, %bb49 ]
  %v2_12df8 = xor i1 %v2_12df0, true
  %v3_12df8 = or i1 %v7_12df0, %v2_12df8
  br i1 %v3_12df8, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_12e08 = phi i32 [ %v0_12e0820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_12df4, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_12e00 = icmp ugt i32 %v1_12de0, 24
  %v11_12e00 = icmp eq i32 %v1_12de0, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_12e04 = phi i1 [ %v7_12df0, %bb52 ], [ %v11_12e00, %bb53 ]
  %v0_12e04 = phi i1 [ %v2_12df0, %bb52 ], [ %v6_12e00, %bb53 ]
  %v2_12e04 = xor i1 %v1_12e04, true
  %v3_12e04 = and i1 %v0_12e04, %v2_12e04
  br i1 %v3_12e04, label %dec_label_pc_12e60, label %dec_label_pc_12e08

dec_label_pc_12e08:                               ; preds = %bb54
  %v2_12e08 = icmp eq i32 %v0_12e08, 0
  %. = select i1 %v2_12e08, i32 87, i32 55
  %v2_12e14 = sub i32 %v1_12e14, %.
  br label %dec_label_pc_12e18

dec_label_pc_12e18:                               ; preds = %dec_label_pc_12dd4, %dec_label_pc_12e08
  %v0_12e2c34 = phi i32 [ %v1_12de8, %dec_label_pc_12dd4 ], [ %., %dec_label_pc_12e08 ]
  %v3_12e5012 = phi i32 [ %v1_12de4, %dec_label_pc_12dd4 ], [ %v2_12e14, %dec_label_pc_12e08 ]
  %v1_12e18 = load i32, i32* %r6.global-to-local, align 4
  %v6_12e1c = icmp slt i32 %v3_12e5012, %v1_12e18
  br i1 %v6_12e1c, label %dec_label_pc_12e20, label %dec_label_pc_12e60

dec_label_pc_12e20:                               ; preds = %dec_label_pc_12e18
  %v3_12e20 = icmp uge i32 %v2_12e5011, %v0_12dc4
  %v9_12e20 = icmp eq i32 %v2_12e5011, %v0_12dc4
  %v2_12e24 = xor i1 %v3_12e20, true
  %v3_12e24 = or i1 %v9_12e20, %v2_12e24
  br i1 %v3_12e24, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12e20
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12e20, %bb57
  %v0_12e2c33 = phi i32 [ %v0_12e2c34, %dec_label_pc_12e20 ], [ 0, %bb57 ]
  %v2_12e28 = xor i1 %v9_12e20, true
  %v3_12e28 = and i1 %v3_12e20, %v2_12e28
  br i1 %v3_12e28, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_12e2c = phi i32 [ %v0_12e2c33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_12e2c, 0
  %v4_12e2c = zext i1 %tmp72 to i32
  %v5_12e2c = or i32 %v0_12e2c, %v4_12e2c
  %v7_12e2c = icmp eq i32 %v5_12e2c, 0
  br i1 %v7_12e2c, label %dec_label_pc_12e38, label %.thread8

dec_label_pc_12e38:                               ; preds = %bb60
  %v1_12e44 = load i32, i32* %r8.global-to-local, align 4
  %v7_12e48 = icmp sgt i32 %v3_12e5012, %v1_12e44
  br i1 %v7_12e48, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12e38
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_12e38
  %v2_12e4c = icmp eq i1 %v9_12e20, false
  br i1 %v2_12e4c, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_12e5013 = mul i32 %v1_12e18, %v2_12e5011
  %v5_12e5014 = add i32 %v4_12e5013, %v3_12e5012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_12e6c26 = phi i32 [ %v2_12e5011, %bb63 ], [ %v2_12e5011, %bb60 ], [ %v5_12e5014, %bb64 ]
  %v0_12e6024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_12e58 = load i32, i32* %r5.global-to-local, align 4
  %v1_12e58 = inttoptr i32 %v0_12e58 to i8*
  %v2_12e58 = load i8, i8* %v1_12e58, align 1
  %v3_12e58 = zext i8 %v2_12e58 to i32
  store i32 %v3_12e58, i32* %r4.global-to-local, align 4
  %v5_12e58 = add i32 %v0_12e58, 1
  store i32 %v5_12e58, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12dd4

dec_label_pc_12e60:                               ; preds = %dec_label_pc_12e18, %bb54
  %v1_12e60 = icmp slt i32 %v1_12e2c, 0
  %v0_12e84 = load i32, i32* %sl.global-to-local, align 4
  %v2_12e84 = icmp eq i32 %v0_12e84, 0
  br i1 %v1_12e60, label %dec_label_pc_12e84, label %dec_label_pc_12e68

dec_label_pc_12e68:                               ; preds = %dec_label_pc_12e60
  br i1 %v2_12e84, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_12e68
  %v2_12e6c = sub i32 0, %v2_12e5011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12e68, %bb65
  %v23_12e70 = phi i32 [ %v2_12e5011, %dec_label_pc_12e68 ], [ %v2_12e6c, %bb65 ]
  %v2_12e70 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12e70, i32* @r4, align 4
  ret i32 %v23_12e70

dec_label_pc_12e74:                               ; preds = %dec_label_pc_12d94
  %v1_12e74 = inttoptr i32 %v5_12d74 to i8*
  %v2_12e74 = load i8, i8* %v1_12e74, align 1
  %v3_12e74 = zext i8 %v2_12e74 to i32
  store i32 %v3_12e74, i32* %r4.global-to-local, align 4
  %v5_12e74 = add i32 %v0_12d74, 2
  store i32 %v5_12e74, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12dac

dec_label_pc_12e84:                               ; preds = %dec_label_pc_12e60
  %.70 = select i1 %v2_12e84, i32 2147483647, i32 -2147483648
  %v2_12e90 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12e90, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_12e58, { 1, 0 }
  uselistorder i1 %v9_12e20, { 1, 0, 2 }
  uselistorder i1 %v3_12e20, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_12df0, { 1, 2, 0 }
  uselistorder i1 %v2_12df0, { 1, 0, 2 }
  uselistorder i32 %v1_12dd4, { 1, 2, 0 }
  uselistorder i32 %v1_12e14, { 1, 2, 0 }
  uselistorder i32 %v1_12e2c, { 1, 0 }
  uselistorder i32 %v2_12e5011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_12dc4, { 1, 0, 2 }
  uselistorder i32 %v5_12d74, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_12d74, { 1, 0 }
  uselistorder i32 %v0_12d74, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 32, { 1, 7, 2, 3, 0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i8 9, { 7, 0, 5, 1, 2, 6, 3, 4 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_12e18, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_12dac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12d74, { 1, 2, 0, 3 }
}

define i32 @function_12e94(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12e94:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12e94 = load i32, i32* @r4, align 4
  store i32 %v3_12e94, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12eac

dec_label_pc_12eac:                               ; preds = %dec_label_pc_12ed8.dec_label_pc_12eac_crit_edge, %dec_label_pc_12e94
  %v0_12eb0 = phi i32 [ %v0_12eb0.pre, %dec_label_pc_12ed8.dec_label_pc_12eac_crit_edge ], [ %arg3, %dec_label_pc_12e94 ]
  %v0_12eac = phi i32 [ %v1_12ec4, %dec_label_pc_12ed8.dec_label_pc_12eac_crit_edge ], [ %tmp, %dec_label_pc_12e94 ]
  %tmp12 = inttoptr i32 %v0_12eac to i32*
  %v5_12eb8 = call i32 @function_13798(i32 %v0_12eb0, i32* %tmp12, i32 1)
  %v7_12ebc = icmp eq i32 %v5_12eb8, 1
  %v0_12ec0 = load i32, i32* @r4, align 4
  %v1_12ec4 = add i32 %v0_12ec0, 1
  store i32 %v1_12ec4, i32* @r4, align 4
  %v0_12ecc = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_12ebc, label %dec_label_pc_12ecc, label %dec_label_pc_12ee4

dec_label_pc_12ecc:                               ; preds = %dec_label_pc_12eac
  %v1_12ecc = add i32 %v0_12ecc, 1
  store i32 %v1_12ecc, i32* %r5.global-to-local, align 4
  %v0_12ed0 = load i32, i32* %r7.global-to-local, align 4
  %v7_12ed4 = icmp sgt i32 %v0_12ed0, %v1_12ecc
  br i1 %v7_12ed4, label %dec_label_pc_12ed8, label %dec_label_pc_12ee4

dec_label_pc_12ed8:                               ; preds = %dec_label_pc_12ecc
  %v1_12ed8 = inttoptr i32 %v0_12ec0 to i8*
  %v2_12ed8 = load i8, i8* %v1_12ed8, align 1
  %v7_12edc = icmp eq i8 %v2_12ed8, 10
  br i1 %v7_12edc, label %dec_label_pc_12ee4, label %dec_label_pc_12ed8.dec_label_pc_12eac_crit_edge

dec_label_pc_12ed8.dec_label_pc_12eac_crit_edge:  ; preds = %dec_label_pc_12ed8
  %v0_12eb0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12eac

dec_label_pc_12ee4:                               ; preds = %dec_label_pc_12eac, %dec_label_pc_12ed8, %dec_label_pc_12ecc
  %v0_12ee4 = phi i32 [ %v1_12ecc, %dec_label_pc_12ed8 ], [ %v1_12ecc, %dec_label_pc_12ecc ], [ %v0_12ecc, %dec_label_pc_12eac ]
  %v2_12ee4 = icmp eq i32 %v0_12ee4, 0
  %v1_12ee8 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_12ee4, i32 0, i32 %v1_12ee8
  %v2_12ef0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12ef0, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_12ec4, { 1, 0 }
  uselistorder i8 10, { 6, 0, 7, 8, 9, 1, 2, 3, 4, 5 }
  uselistorder i32 (i32, i32*, i32)* @function_13798, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ee4, { 1, 2, 0 }
}

define i32 @function_12ef4() local_unnamed_addr {
dec_label_pc_12ef4:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12ef4 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_12f04 = call i32 @function_13b78()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12f0c = inttoptr i32 %v0_12f04 to i32*
  store i32 0, i32* %v2_12f0c, align 4
  %v0_12f18 = load i32, i32* %r6.global-to-local, align 4
  %v3_12f1c = call i32 @function_13ebc(i32 2, i32 2, i32 %v0_12f18)
  %v7_12f28 = icmp eq i32 %v3_12f1c, -1
  store i32 %v3_12f1c, i32* %r5.global-to-local, align 4
  %v2_12f34 = load i32, i32* @r4, align 4
  br i1 %v7_12f28, label %dec_label_pc_12f84, label %dec_label_pc_12f48

dec_label_pc_12f48:                               ; preds = %dec_label_pc_12ef4
  %v7_12f34 = shl i32 2056, %v2_12f34
  %v8_12f34 = or i32 %v7_12f34, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_12f64 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_12f64 = call i32 @function_13d18(i32 %v3_12f1c, %sockaddr* %v3_12f64, i32 %v2_12f34)
  %v2_12f6c = ptrtoint i32* %stack_var_-24 to i32
  %v0_12f70 = load i32, i32* %r5.global-to-local, align 4
  %v4_12f74 = call i32 @function_13d44(i32 %v0_12f70, %sockaddr* %v3_12f64, i32 %v2_12f6c)
  %v1_12f7c = call i32 @function_135d0(i32 %v0_12f70)
  br label %dec_label_pc_12f84

dec_label_pc_12f84:                               ; preds = %dec_label_pc_12ef4, %dec_label_pc_12f48
  %v0_12f84 = phi i32 [ %v0_12f18, %dec_label_pc_12ef4 ], [ %v8_12f34, %dec_label_pc_12f48 ]
  store i32 %v3_12ef4, i32* @r4, align 4
  ret i32 %v0_12f84

; uselistorder directives
  uselistorder i32 %v3_12f1c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_13d18, { 6, 0, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_13ebc, { 6, 18, 16, 17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_12f84, { 1, 0 }
}

define i32 @function_12f90(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12f90:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_12f94 = load i8, i8* %tmp, align 1
  %v2_12f98 = icmp eq i8 %v3_12f94, 0
  br i1 %v2_12f98, label %bb, label %dec_label_pc_12fac

bb:                                               ; preds = %dec_label_pc_12f90
  %v4_12f94 = zext i8 %v3_12f94 to i32
  br label %dec_label_pc_12fc0

dec_label_pc_12fac:                               ; preds = %dec_label_pc_12f90
  br label %dec_label_pc_12fb0

dec_label_pc_12fb0:                               ; preds = %dec_label_pc_12fb0, %dec_label_pc_12fac
  %v0_12fb0 = phi i32 [ %v1_12fb0, %dec_label_pc_12fb0 ], [ 0, %dec_label_pc_12fac ]
  %v1_12fb0 = add i32 %v0_12fb0, 1
  %v2_12fb4 = add i32 %v1_12fb0, %arg2
  %v3_12fb4 = inttoptr i32 %v2_12fb4 to i8*
  %v4_12fb4 = load i8, i8* %v3_12fb4, align 1
  %v2_12fb8 = icmp eq i8 %v4_12fb4, 0
  br i1 %v2_12fb8, label %dec_label_pc_12fc0, label %dec_label_pc_12fb0

dec_label_pc_12fc0:                               ; preds = %dec_label_pc_12fb0, %bb
  %v0_1300418 = phi i32 [ %v4_12f94, %bb ], [ %v1_12fb0, %dec_label_pc_12fb0 ]
  %v0_12fc81 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_12fc81, 1
  br i1 %tmp27, label %dec_label_pc_13014, label %dec_label_pc_12fd4

dec_label_pc_12fd4:                               ; preds = %dec_label_pc_12fc0, %dec_label_pc_12fc8.backedge
  %v0_12fcc.in = phi i32 [ %v0_12fcc, %dec_label_pc_12fc8.backedge ], [ %v0_12fc81, %dec_label_pc_12fc0 ]
  %v0_12ff8 = phi i32 [ %v1_12ff8., %dec_label_pc_12fc8.backedge ], [ 0, %dec_label_pc_12fc0 ]
  %v0_12fd4 = phi i32 [ %v5_12fd4, %dec_label_pc_12fc8.backedge ], [ %tmp20, %dec_label_pc_12fc0 ]
  %v0_12fcc = add i32 %v0_12fcc.in, -1
  %v1_12fd4 = inttoptr i32 %v0_12fd4 to i8*
  %v2_12fd4 = load i8, i8* %v1_12fd4, align 1
  %v3_12fd4 = zext i8 %v2_12fd4 to i32
  store i32 %v3_12fd4, i32* @lr, align 4
  %v5_12fd4 = add i32 %v0_12fd4, 1
  %v2_12fd8 = add i32 %v0_12ff8, %arg2
  %v3_12fd8 = inttoptr i32 %v2_12fd8 to i8*
  %v4_12fd8 = load i8, i8* %v3_12fd8, align 1
  %v6_12fd8 = zext i8 %v4_12fd8 to i32
  %v1_12fdc = add nsw i32 %v3_12fd4, -65
  %v1_12fe0 = add nsw i32 %v6_12fd8, -65
  %tmp35 = icmp ult i32 %v1_12fdc, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_12fd4
  %v5_12fe8 = or i32 %v3_12fd4, 96
  store i32 %v5_12fe8, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_12fd4, %bb28
  %v0_12ff4 = phi i32 [ %v3_12fd4, %dec_label_pc_12fd4 ], [ %v5_12fe8, %bb28 ]
  %tmp36 = icmp ult i32 %v1_12fe0, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_12ff0 = or i32 %v6_12fd8, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_12ff4 = phi i32 [ %v6_12fd8, %bb29 ], [ %v5_12ff0, %bb30 ]
  %v9_12ff4 = icmp eq i32 %v0_12ff4, %v1_12ff4
  %v1_12ff8 = add i32 %v0_12ff8, 1
  %v1_12ff8. = select i1 %v9_12ff4, i32 %v1_12ff8, i32 0
  br i1 %v9_12ff4, label %dec_label_pc_13004, label %dec_label_pc_12fc8.backedge

dec_label_pc_12fc8.backedge:                      ; preds = %bb31, %dec_label_pc_13004
  %tmp32 = icmp slt i32 %v0_12fcc, 1
  br i1 %tmp32, label %dec_label_pc_13014, label %dec_label_pc_12fd4

dec_label_pc_13004:                               ; preds = %bb31
  %v9_13004 = icmp eq i32 %v0_1300418, %v1_12ff8.
  br i1 %v9_13004, label %dec_label_pc_1300c, label %dec_label_pc_12fc8.backedge

dec_label_pc_1300c:                               ; preds = %dec_label_pc_13004
  %v2_1300c = sub i32 %v5_12fd4, %tmp20
  ret i32 %v2_1300c

dec_label_pc_13014:                               ; preds = %dec_label_pc_12fc8.backedge, %dec_label_pc_12fc0
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_12ff8., { 1, 0 }
  uselistorder i32 %v0_12fd4, { 1, 0 }
  uselistorder i32 %v0_12ff8, { 1, 0 }
  uselistorder i8 %v3_12f94, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_12fc8.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_12fd4, { 1, 0 }
}

define i32 @function_1301c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1301c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_1301c = load i8, i8* %arg1, align 1
  %v2_13020 = icmp eq i8 %v2_1301c, 0
  br i1 %v2_13020, label %bb, label %dec_label_pc_1302c

bb:                                               ; preds = %dec_label_pc_1301c
  %v3_1301c = zext i8 %v2_1301c to i32
  br label %dec_label_pc_13040

dec_label_pc_1302c:                               ; preds = %dec_label_pc_1301c
  br label %dec_label_pc_13030

dec_label_pc_13030:                               ; preds = %dec_label_pc_13030, %dec_label_pc_1302c
  %v0_13030 = phi i32 [ %v1_13030, %dec_label_pc_13030 ], [ 0, %dec_label_pc_1302c ]
  %v1_13030 = add i32 %v0_13030, 1
  %v2_13034 = add i32 %v1_13030, %tmp
  %v3_13034 = inttoptr i32 %v2_13034 to i8*
  %v4_13034 = load i8, i8* %v3_13034, align 1
  %v2_13038 = icmp eq i8 %v4_13034, 0
  br i1 %v2_13038, label %dec_label_pc_13040, label %dec_label_pc_13030

dec_label_pc_13040:                               ; preds = %dec_label_pc_13030, %bb
  %v0_13064 = phi i32 [ %v3_1301c, %bb ], [ %v1_13030, %dec_label_pc_13030 ]
  %v1_13040 = inttoptr i32 %arg2 to i8*
  %v2_13040 = load i8, i8* %v1_13040, align 1
  %v2_13044 = icmp eq i8 %v2_13040, 0
  br i1 %v2_13044, label %bb22, label %dec_label_pc_13050

bb22:                                             ; preds = %dec_label_pc_13040
  %v3_13040 = zext i8 %v2_13040 to i32
  br label %dec_label_pc_13064

dec_label_pc_13050:                               ; preds = %dec_label_pc_13040
  br label %dec_label_pc_13054

dec_label_pc_13054:                               ; preds = %dec_label_pc_13054, %dec_label_pc_13050
  %v0_13054 = phi i32 [ %v1_13054, %dec_label_pc_13054 ], [ 0, %dec_label_pc_13050 ]
  %v1_13054 = add i32 %v0_13054, 1
  %v2_13058 = add i32 %v1_13054, %arg2
  %v3_13058 = inttoptr i32 %v2_13058 to i8*
  %v4_13058 = load i8, i8* %v3_13058, align 1
  %v2_1305c = icmp eq i8 %v4_13058, 0
  br i1 %v2_1305c, label %dec_label_pc_13064, label %dec_label_pc_13054

dec_label_pc_13064:                               ; preds = %dec_label_pc_13054, %bb22
  %v0_130904 = phi i32 [ %v3_13040, %bb22 ], [ %v1_13054, %dec_label_pc_13054 ]
  %v9_13064 = icmp eq i32 %v0_13064, %v0_130904
  br i1 %v9_13064, label %dec_label_pc_13090.preheader, label %dec_label_pc_13070

dec_label_pc_13090.preheader:                     ; preds = %dec_label_pc_13064
  %v2_130906 = icmp eq i32 %v0_13064, 0
  br i1 %v2_130906, label %dec_label_pc_13098, label %dec_label_pc_13078

dec_label_pc_13070:                               ; preds = %dec_label_pc_13078, %dec_label_pc_13064
  ret i32 0

dec_label_pc_13078:                               ; preds = %dec_label_pc_13088, %dec_label_pc_13090.preheader
  %v0_13090.in = phi i32 [ %v0_13090, %dec_label_pc_13088 ], [ %v0_13064, %dec_label_pc_13090.preheader ]
  %v0_1308c = phi i32 [ %v1_1308c, %dec_label_pc_13088 ], [ %arg2, %dec_label_pc_13090.preheader ]
  %v0_13088 = phi i32 [ %v1_13088, %dec_label_pc_13088 ], [ %tmp, %dec_label_pc_13090.preheader ]
  %v0_13090 = add i32 %v0_13090.in, -1
  %v1_13078 = inttoptr i32 %v0_13088 to i8*
  %v2_13078 = load i8, i8* %v1_13078, align 1
  %v1_1307c = inttoptr i32 %v0_1308c to i8*
  %v2_1307c = load i8, i8* %v1_1307c, align 1
  %v9_13080 = icmp eq i8 %v2_13078, %v2_1307c
  br i1 %v9_13080, label %dec_label_pc_13088, label %dec_label_pc_13070

dec_label_pc_13088:                               ; preds = %dec_label_pc_13078
  %v1_13088 = add i32 %v0_13088, 1
  %v1_1308c = add i32 %v0_1308c, 1
  %v2_13090 = icmp eq i32 %v0_13090, 0
  br i1 %v2_13090, label %dec_label_pc_13098, label %dec_label_pc_13078

dec_label_pc_13098:                               ; preds = %dec_label_pc_13088, %dec_label_pc_13090.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_13040, { 1, 0 }
  uselistorder i8 %v2_1301c, { 1, 0 }
}

define i32 @function_130a0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_130a0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_130a4 = load i8, i8* %arg1, align 1
  %v2_130a8 = icmp eq i8 %v2_130a4, 0
  %v0_130ac = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_130a8, label %bb, label %dec_label_pc_130b8

bb:                                               ; preds = %dec_label_pc_130a0
  %v3_130a4 = zext i8 %v2_130a4 to i32
  br label %dec_label_pc_130cc

dec_label_pc_130b8:                               ; preds = %dec_label_pc_130a0
  br label %dec_label_pc_130bc

dec_label_pc_130bc:                               ; preds = %dec_label_pc_130bc, %dec_label_pc_130b8
  %v0_130bc = phi i32 [ %v1_130bc, %dec_label_pc_130bc ], [ 0, %dec_label_pc_130b8 ]
  %v1_130bc = add i32 %v0_130bc, 1
  %v2_130c0 = add i32 %v1_130bc, %tmp
  %v3_130c0 = inttoptr i32 %v2_130c0 to i8*
  %v4_130c0 = load i8, i8* %v3_130c0, align 1
  %v2_130c4 = icmp eq i8 %v4_130c0, 0
  br i1 %v2_130c4, label %dec_label_pc_130cc, label %dec_label_pc_130bc

dec_label_pc_130cc:                               ; preds = %dec_label_pc_130bc, %bb
  %v9_130f4 = phi i32 [ %v3_130a4, %bb ], [ %v1_130bc, %dec_label_pc_130bc ]
  %v0_130cc = load i32, i32* %r1.global-to-local, align 4
  %v1_130cc = inttoptr i32 %v0_130cc to i8*
  %v2_130cc = load i8, i8* %v1_130cc, align 1
  %v3_130cc = zext i8 %v2_130cc to i32
  %v2_130d0 = icmp eq i8 %v2_130cc, 0
  br i1 %v2_130d0, label %bb26, label %dec_label_pc_130dc

bb26:                                             ; preds = %dec_label_pc_130cc
  store i32 %v3_130cc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_130f0

dec_label_pc_130dc:                               ; preds = %dec_label_pc_130cc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_130e0

dec_label_pc_130e0:                               ; preds = %dec_label_pc_130e0, %dec_label_pc_130dc
  %v0_130e0 = phi i32 [ %v1_130e0, %dec_label_pc_130e0 ], [ 0, %dec_label_pc_130dc ]
  %v1_130e0 = add i32 %v0_130e0, 1
  store i32 %v1_130e0, i32* %r2.global-to-local, align 4
  %v2_130e4 = add i32 %v1_130e0, %v0_130cc
  %v3_130e4 = inttoptr i32 %v2_130e4 to i8*
  %v4_130e4 = load i8, i8* %v3_130e4, align 1
  %v2_130e8 = icmp eq i8 %v4_130e4, 0
  br i1 %v2_130e8, label %dec_label_pc_130f0, label %dec_label_pc_130e0

dec_label_pc_130f0:                               ; preds = %dec_label_pc_130e0, %bb26
  %v1_130f0 = phi i32 [ %v3_130cc, %bb26 ], [ %v1_130e0, %dec_label_pc_130e0 ]
  %v2_130f0 = sub i32 %v0_130ac, %v1_130f0
  %v4_130f0 = xor i32 %v1_130f0, %v0_130ac
  %v5_130f0 = xor i32 %v2_130f0, %v0_130ac
  %v6_130f0 = and i32 %v5_130f0, %v4_130f0
  %v7_130f4 = icmp sgt i32 %v0_130ac, %v1_130f0
  br i1 %v7_130f4, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_130f0
  %v10_130f4 = sub i32 %v0_130ac, %v9_130f4
  %v12_130f4 = xor i32 %v9_130f4, %v0_130ac
  %v13_130f4 = xor i32 %v10_130f4, %v0_130ac
  %v14_130f4 = and i32 %v13_130f4, %v12_130f4
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_130f0, %bb27
  %v2_130f8.in = phi i32 [ %v6_130f0, %dec_label_pc_130f0 ], [ %v14_130f4, %bb27 ]
  %v1_130f8.in = phi i32 [ %v2_130f0, %dec_label_pc_130f0 ], [ %v10_130f4, %bb27 ]
  %v1_130f0.pn = phi i32 [ %v1_130f0, %dec_label_pc_130f0 ], [ %v9_130f4, %bb27 ]
  %v0_130f8 = icmp eq i32 %v0_130ac, %v1_130f0.pn
  %v1_130f8 = icmp slt i32 %v1_130f8.in, 0
  %v2_130f8 = icmp slt i32 %v2_130f8.in, 0
  %v3_130f8 = xor i1 %v2_130f8, %v1_130f8
  %v4_130f8 = or i1 %v0_130f8, %v3_130f8
  br i1 %v4_130f8, label %dec_label_pc_13108.preheader, label %dec_label_pc_13120

dec_label_pc_13108.preheader:                     ; preds = %bb28
  %v2_131085 = icmp eq i32 %v0_130ac, 0
  br i1 %v2_131085, label %dec_label_pc_13128, label %dec_label_pc_13110

dec_label_pc_13100:                               ; preds = %dec_label_pc_13110
  %v1_13100 = add i32 %v0_13100, 1
  %v1_13104 = add i32 %v0_13104, 1
  store i32 %v1_13104, i32* %r1.global-to-local, align 4
  %v2_13108 = icmp eq i32 %v0_13108, 0
  br i1 %v2_13108, label %dec_label_pc_13128, label %dec_label_pc_13110

dec_label_pc_13110:                               ; preds = %dec_label_pc_13100, %dec_label_pc_13108.preheader
  %v0_13108.in = phi i32 [ %v0_13108, %dec_label_pc_13100 ], [ %v0_130ac, %dec_label_pc_13108.preheader ]
  %v0_13104 = phi i32 [ %v1_13104, %dec_label_pc_13100 ], [ %v0_130cc, %dec_label_pc_13108.preheader ]
  %v0_13100 = phi i32 [ %v1_13100, %dec_label_pc_13100 ], [ %tmp, %dec_label_pc_13108.preheader ]
  %v0_13108 = add i32 %v0_13108.in, -1
  %v1_13110 = inttoptr i32 %v0_13100 to i8*
  %v2_13110 = load i8, i8* %v1_13110, align 1
  %v3_13110 = zext i8 %v2_13110 to i32
  store i32 %v3_13110, i32* %r2.global-to-local, align 4
  %v1_13114 = inttoptr i32 %v0_13104 to i8*
  %v2_13114 = load i8, i8* %v1_13114, align 1
  %v9_13118 = icmp eq i8 %v2_13110, %v2_13114
  br i1 %v9_13118, label %dec_label_pc_13100, label %dec_label_pc_13120

dec_label_pc_13120:                               ; preds = %dec_label_pc_13110, %bb28
  ret i32 0

dec_label_pc_13128:                               ; preds = %dec_label_pc_13100, %dec_label_pc_13108.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_13100, { 1, 0 }
  uselistorder i32 %v0_13104, { 1, 0 }
  uselistorder i32 %v1_130f0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_130e0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_130ac, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_130a4, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_13130(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13130:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13130 = load i32, i32* @r4, align 4
  store i32 %v3_13130, i32* %stack_var_-28, align 4
  %v22_13130 = ptrtoint i32* %stack_var_-28 to i32
  %v0_13134 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_13134, i32* %r8.global-to-local, align 4
  %v2_13134 = icmp eq i32 %v0_13134, 0
  store i1 %v2_13134, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_13134, label %dec_label_pc_13224, label %dec_label_pc_13144

dec_label_pc_13144:                               ; preds = %dec_label_pc_13130
  %v3_13144 = icmp eq i8 %arg1, 0
  store i1 %v3_13144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13144, label %.thread, label %dec_label_pc_13158

.thread:                                          ; preds = %dec_label_pc_13144
  %v4_1314c = inttoptr i32 %v0_13134 to i8*
  store i8 48, i8* %v4_1314c, align 1
  %v0_13150.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13150.pr.pr, label %.thread1, label %dec_label_pc_13158

.thread1:                                         ; preds = %.thread
  %v4_13150 = load i32, i32* %r8.global-to-local, align 4
  %v5_13150 = add i32 %v4_13150, 1
  %v6_13150 = inttoptr i32 %v5_13150 to i8*
  store i8 0, i8* %v6_13150, align 1
  %v0_13154.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13154.pr.pr, label %dec_label_pc_13224, label %dec_label_pc_13158

dec_label_pc_13158:                               ; preds = %dec_label_pc_13144, %.thread, %.thread1
  %tmp39 = icmp slt i8 %arg1, 0
  %v7_1315c = icmp eq i32 %arg2, 10
  store i1 %v7_1315c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1315c, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_13158
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_13158
  %v4_13158 = zext i1 %tmp39 to i32
  store i32 %v4_13158, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_13180

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13190

dec_label_pc_13180:                               ; preds = %bb
  %v2_13180 = sub nsw i32 0, %tmp
  store i32 %v2_13180, i32* %r4.global-to-local, align 4
  store i1 %v3_13144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13144, label %dec_label_pc_13230, label %dec_label_pc_13190

dec_label_pc_13190:                               ; preds = %dec_label_pc_13180, %.thread4
  %v0_1319810 = phi i32 [ %tmp, %.thread4 ], [ %v2_13180, %dec_label_pc_13180 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_13180 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_13194 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_13194, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13198

dec_label_pc_13198:                               ; preds = %bb37, %dec_label_pc_13190
  %v0_13198 = phi i32 [ %v0_131bc, %bb37 ], [ %v0_1319810, %dec_label_pc_13190 ]
  store i32 %v0_13198, i32* %r0.global-to-local, align 4
  %v0_1319c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1319c, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_13198, 16777216
  %v1_131a0 = sdiv i32 %sext, 16777216
  %v3_131a0 = call i32 @function_13358(i32 %v1_131a0, i32 %v0_1319c)
  store i32 %v3_131a0, i32* %r0.global-to-local, align 4
  %v7_131a4 = icmp eq i32 %v3_131a0, 9
  store i1 %v7_131a4, i1* %cpsr_z.global-to-local, align 1
  %v1_131a8 = add i32 %v3_131a0, 48
  %v0_131ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_131ac, i32* @r1, align 4
  %v7_131b0 = icmp sgt i32 %v3_131a0, 9
  %extract.t = trunc i32 %v1_131a8 to i8
  br i1 %v7_131b0, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_13198
  %v9_131b0 = add i32 %v3_131a0, 55
  %extract.t20 = trunc i32 %v9_131b0 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_13198, %bb36
  %v0_131b8.off0 = phi i8 [ %extract.t, %dec_label_pc_13198 ], [ %extract.t20, %bb36 ]
  %v0_131b4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_131b4, i32* @r0, align 4
  %v2_131b8 = load i32, i32* %r7.global-to-local, align 4
  %v3_131b8 = inttoptr i32 %v2_131b8 to i8*
  store i8 %v0_131b8.off0, i8* %v3_131b8, align 1
  %v4_131b8 = load i32, i32* %r7.global-to-local, align 4
  %v5_131b8 = add i32 %v4_131b8, -1
  store i32 %v5_131b8, i32* %r7.global-to-local, align 4
  %v0_131bc = call i32 @function_13248()
  store i32 %v0_131bc, i32* %r0.global-to-local, align 4
  store i32 %v0_131bc, i32* %r4.global-to-local, align 4
  %v2_131c0 = icmp eq i32 %v0_131bc, 0
  store i1 %v2_131c0, i1* %cpsr_z.global-to-local, align 1
  %v0_131c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_131c4 = add i32 %v0_131c4, -1
  store i32 %v1_131c4, i32* %r6.global-to-local, align 4
  br i1 %v2_131c0, label %dec_label_pc_131cc, label %dec_label_pc_13198

dec_label_pc_131cc:                               ; preds = %bb37
  %v0_131cc = load i32, i32* %sl.global-to-local, align 4
  %v2_131cc = icmp eq i32 %v0_131cc, 0
  store i1 %v2_131cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_131cc, label %bb38, label %dec_label_pc_13234

bb38:                                             ; preds = %dec_label_pc_131cc
  store i32 %v0_131c4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_131d8

dec_label_pc_131d8:                               ; preds = %bb38, %dec_label_pc_13234
  %v1_131e4 = phi i32 [ %v0_131c4, %bb38 ], [ %v1_131dc.pre, %dec_label_pc_13234 ]
  %v2_131d8 = ptrtoint i32* %stack_var_-62 to i32
  %v2_131dc = add i32 %v1_131e4, %v2_131d8
  %v3_131dc = inttoptr i32 %v2_131dc to i8*
  %v4_131dc = load i8, i8* %v3_131dc, align 1
  %v6_131dc = zext i8 %v4_131dc to i32
  store i32 %v6_131dc, i32* %r2.global-to-local, align 4
  %v2_131e0 = icmp eq i8 %v4_131dc, 0
  store i1 %v2_131e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_131dc, i32* %r1.global-to-local, align 4
  br i1 %v2_131e0, label %dec_label_pc_13208, label %dec_label_pc_131ec

dec_label_pc_131ec:                               ; preds = %dec_label_pc_131d8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_131f0

dec_label_pc_131f0:                               ; preds = %dec_label_pc_131f0, %dec_label_pc_131ec
  %v0_131f0 = phi i32 [ %v1_131f0, %dec_label_pc_131f0 ], [ 0, %dec_label_pc_131ec ]
  %v1_131f0 = add i32 %v0_131f0, 1
  store i32 %v1_131f0, i32* %r2.global-to-local, align 4
  %v2_131f4 = add i32 %v1_131f0, %v2_131dc
  %v3_131f4 = inttoptr i32 %v2_131f4 to i8*
  %v4_131f4 = load i8, i8* %v3_131f4, align 1
  %v2_131f8 = icmp eq i8 %v4_131f4, 0
  store i1 %v2_131f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_131f8, label %dec_label_pc_13200, label %dec_label_pc_131f0

dec_label_pc_13200:                               ; preds = %dec_label_pc_131f0
  %v7_13200 = icmp eq i32 %v0_131f0, -2
  store i1 %v7_13200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13200, label %dec_label_pc_13224, label %dec_label_pc_13208

dec_label_pc_13208:                               ; preds = %dec_label_pc_13200, %dec_label_pc_131d8
  %v0_1321017 = phi i32 [ %v1_131f0, %dec_label_pc_13200 ], [ %v6_131dc, %dec_label_pc_131d8 ]
  store i32 %v2_131dc, i32* %r0.global-to-local, align 4
  %v0_1320c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1320c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13210

dec_label_pc_13210:                               ; preds = %dec_label_pc_13210.dec_label_pc_13210_crit_edge, %dec_label_pc_13208
  %v2_1321c = phi i32 [ %v5_1321c, %dec_label_pc_13210.dec_label_pc_13210_crit_edge ], [ %v0_1320c, %dec_label_pc_13208 ]
  %v0_13214 = phi i32 [ %v0_13214.pre, %dec_label_pc_13210.dec_label_pc_13210_crit_edge ], [ %v2_131dc, %dec_label_pc_13208 ]
  %v0_13210 = phi i32 [ %v0_13210.pre, %dec_label_pc_13210.dec_label_pc_13210_crit_edge ], [ %v0_1321017, %dec_label_pc_13208 ]
  %v1_13210 = add i32 %v0_13210, -1
  store i32 %v1_13210, i32* %r2.global-to-local, align 4
  %v1_13214 = inttoptr i32 %v0_13214 to i8*
  %v2_13214 = load i8, i8* %v1_13214, align 1
  %v5_13214 = add i32 %v0_13214, 1
  store i32 %v5_13214, i32* %r0.global-to-local, align 4
  %v3_13218 = icmp eq i32 %v0_13210, 0
  store i1 %v3_13218, i1* %cpsr_z.global-to-local, align 1
  %v3_1321c = inttoptr i32 %v2_1321c to i8*
  store i8 %v2_13214, i8* %v3_1321c, align 1
  %v4_1321c = load i32, i32* %r1.global-to-local, align 4
  %v5_1321c = add i32 %v4_1321c, 1
  store i32 %v5_1321c, i32* %r1.global-to-local, align 4
  br i1 %v3_13218, label %dec_label_pc_13224, label %dec_label_pc_13210.dec_label_pc_13210_crit_edge

dec_label_pc_13210.dec_label_pc_13210_crit_edge:  ; preds = %dec_label_pc_13210
  %v0_13210.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_13214.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13210

dec_label_pc_13224:                               ; preds = %dec_label_pc_13210, %dec_label_pc_13200, %.thread1, %dec_label_pc_13130
  %v0_13224 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13224, i32* %r0.global-to-local, align 4
  %v2_1322c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1322c, i32* @r4, align 4
  ret i32 %v0_13224

dec_label_pc_13230:                               ; preds = %dec_label_pc_13180
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13234

dec_label_pc_13234:                               ; preds = %dec_label_pc_131cc, %dec_label_pc_13230
  %v1_13238 = phi i32 [ %v1_131c4, %dec_label_pc_131cc ], [ 32, %dec_label_pc_13230 ]
  %v2_13238 = add i32 %v1_13238, %v22_13130
  store i32 %v2_13238, i32* %r2.global-to-local, align 4
  %v3_13240 = add i32 %v2_13238, -34
  %v4_13240 = inttoptr i32 %v3_13240 to i8*
  store i8 45, i8* %v4_13240, align 1
  %v1_131dc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_131d8

; uselistorder directives
  uselistorder i32 %v5_1321c, { 1, 0 }
  uselistorder i1 %v3_13218, { 1, 0 }
  uselistorder i32 %v0_13214, { 1, 0 }
  uselistorder i1 %v7_13200, { 1, 0 }
  uselistorder i32 %v1_131f0, { 0, 1, 3, 2 }
  uselistorder i32 %v2_131dc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_131bc, { 1, 2, 3, 0 }
  uselistorder i32 %v3_131a0, { 2, 0, 1, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_13144, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13134, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_13358, { 2, 1, 8, 3, 7, 6, 5, 4, 0 }
  uselistorder label %dec_label_pc_13234, { 1, 0 }
  uselistorder label %dec_label_pc_131d8, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_13158, { 2, 1, 0 }
}

define i32 @function_13248() local_unnamed_addr {
dec_label_pc_13248:
  %v0_13248 = load i32, i32* @r1, align 4
  %v1_13248 = add i32 %v0_13248, -1
  store i32 %v1_13248, i32* @r2, align 4
  %v7_13248 = icmp eq i32 %v0_13248, 1
  br i1 %v7_13248, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_13248
  %v2_1324c = load i32, i32* @r0, align 4
  ret i32 %v2_1324c

bb82:                                             ; preds = %dec_label_pc_13248
  %v2_13248 = icmp eq i32 %v0_13248, 0
  br i1 %v2_13248, label %dec_label_pc_13330, label %dec_label_pc_13254

dec_label_pc_13254:                               ; preds = %bb82
  %v0_13254 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_13254, %v0_13248
  br i1 %tmp, label %dec_label_pc_1325c, label %dec_label_pc_132e8

dec_label_pc_1325c:                               ; preds = %dec_label_pc_13254
  %v2_1325c = and i32 %v1_13248, %v0_13248
  %v4_1325c = icmp eq i32 %v2_1325c, 0
  br i1 %v4_1325c, label %dec_label_pc_132f4, label %dec_label_pc_13264

dec_label_pc_13264:                               ; preds = %dec_label_pc_1325c
  %v3_13264 = icmp ult i32 %v0_13248, 536870912
  br i1 %v3_13264, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_13264
  %v4_13268 = mul i32 %v0_13248, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_13264, %.thread
  %v0_13288.pr36.ph = phi i32 [ %v4_13268, %.thread ], [ %v0_13248, %dec_label_pc_13264 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_13264 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_13288.pr36 = phi i32 [ %v4_1327c, %bb85 ], [ %v0_13288.pr36.ph, %.preheader.preheader ]
  %v1_13280 = phi i32 [ %v4_13280, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_13274 = icmp ugt i32 %v0_13288.pr36, 268435455
  br i1 %v2_13274, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_13288thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_13278 = icmp ult i32 %v0_13288.pr36, %v0_13254
  br i1 %v4_13278, label %bb84, label %dec_label_pc_13288thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_1327c = and i32 %v0_13288.pr36, 268435456
  %v3_1327c = icmp eq i32 %v2_1327c, 0
  %v4_1327c = mul i32 %v0_13288.pr36, 16
  br i1 %v3_1327c, label %bb85, label %dec_label_pc_13288.loopexit

bb85:                                             ; preds = %bb84
  %v2_13280 = and i32 %v1_13280, 268435456
  %v3_13280 = icmp eq i32 %v2_13280, 0
  %v4_13280 = mul i32 %v1_13280, 16
  br i1 %v3_13280, label %.preheader, label %dec_label_pc_13288thread-pre-split.loopexit.loopexit

dec_label_pc_13288thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1329448.ph = phi i32 [ %v1_13280, %bb83 ], [ %v4_13280, %bb85 ]
  %v0_13288.pr38.ph = phi i32 [ %v0_13288.pr36, %bb83 ], [ %v4_1327c, %bb85 ]
  br label %dec_label_pc_13288thread-pre-split.loopexit

dec_label_pc_13288thread-pre-split.loopexit:      ; preds = %dec_label_pc_13288thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1329448 = phi i32 [ %v1_13280, %.thread2 ], [ %v1_1329448.ph, %dec_label_pc_13288thread-pre-split.loopexit.loopexit ]
  %v0_13288.pr38 = phi i32 [ %v0_13288.pr36, %.thread2 ], [ %v0_13288.pr38.ph, %dec_label_pc_13288thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13288thread-pre-split

dec_label_pc_13288thread-pre-split:               ; preds = %dec_label_pc_13288thread-pre-split.loopexit, %bb87
  %v1_1329446 = phi i32 [ %v1_1329448, %dec_label_pc_13288thread-pre-split.loopexit ], [ %v3_13294, %bb87 ]
  %v0_13288.pr = phi i32 [ %v0_13288.pr38, %dec_label_pc_13288thread-pre-split.loopexit ], [ %v3_13290, %bb87 ]
  br label %dec_label_pc_13288

dec_label_pc_13288.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_13288

dec_label_pc_13288:                               ; preds = %dec_label_pc_13288.loopexit, %dec_label_pc_13288thread-pre-split
  %v1_13294 = phi i32 [ %v1_1329446, %dec_label_pc_13288thread-pre-split ], [ %v1_13280, %dec_label_pc_13288.loopexit ]
  %v1_13290 = phi i32 [ %v0_13288.pr, %dec_label_pc_13288thread-pre-split ], [ %v4_1327c, %dec_label_pc_13288.loopexit ]
  %v2_13288 = icmp slt i32 %v1_13290, 0
  br i1 %v2_13288, label %dec_label_pc_1329c, label %bb86

bb86:                                             ; preds = %dec_label_pc_13288
  %v4_1328c = icmp ult i32 %v1_13290, %v0_13254
  br i1 %v4_1328c, label %bb87, label %dec_label_pc_1329c

bb87:                                             ; preds = %bb86
  %v3_13290 = mul i32 %v1_13290, 2
  %v2_13294 = icmp slt i32 %v1_13294, 0
  %v3_13294 = mul i32 %v1_13294, 2
  br i1 %v2_13294, label %dec_label_pc_1329c, label %dec_label_pc_13288thread-pre-split

dec_label_pc_1329c:                               ; preds = %bb86, %dec_label_pc_13288, %bb87
  %v2_132a859 = phi i32 [ %v3_13294, %bb87 ], [ %v1_13294, %bb86 ], [ %v1_13294, %dec_label_pc_13288 ]
  %v1_132a051 = phi i32 [ %v3_13290, %bb87 ], [ %v1_13290, %bb86 ], [ %v1_13290, %dec_label_pc_13288 ]
  store i32 0, i32* @r2, align 4
  br label %dec_label_pc_132a0

dec_label_pc_132a0:                               ; preds = %.thread11, %dec_label_pc_1329c
  %v1_132d4 = phi i32 [ %v4_132d4, %.thread11 ], [ %v2_132a859, %dec_label_pc_1329c ]
  %v1_132a8 = phi i32 [ %v0_132e0, %.thread11 ], [ 0, %dec_label_pc_1329c ]
  %v1_132d8 = phi i32 [ %v4_132d8, %.thread11 ], [ %v1_132a051, %dec_label_pc_1329c ]
  %v1_132a4 = phi i32 [ %v0_132d0, %.thread11 ], [ %v0_13254, %dec_label_pc_1329c ]
  %v3_132a0 = icmp ult i32 %v1_132a4, %v1_132d8
  br i1 %v3_132a0, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_132a0
  %v3_132a4 = sub i32 %v1_132a4, %v1_132d8
  %v3_132a8 = or i32 %v1_132a8, %v1_132d4
  store i32 %v3_132a8, i32* @r2, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_132a0, %bb88
  %v1_132b0 = phi i32 [ %v1_132a4, %dec_label_pc_132a0 ], [ %v3_132a4, %bb88 ]
  %v1_132b4 = phi i32 [ %v1_132a8, %dec_label_pc_132a0 ], [ %v3_132a8, %bb88 ]
  %v4_132ac = udiv i32 %v1_132d8, 2
  %v6_132ac = icmp ult i32 %v1_132b0, %v4_132ac
  br i1 %v6_132ac, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_132b0 = urem i32 %v1_132d8, 2
  %v4_132b0 = icmp eq i32 %v3_132b0, 0
  %v6_132b0 = sub i32 %v1_132b0, %v4_132ac
  br i1 %v4_132b0, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_132b4 = udiv i32 %v1_132d4, 2
  %v6_132b4 = or i32 %v1_132b4, %v5_132b4
  store i32 %v6_132b4, i32* @r2, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_132bc = phi i32 [ %v6_132b0, %bb89 ], [ %v1_132b0, %.thread7 ], [ %v6_132b0, %bb90 ]
  %v1_132c0 = phi i32 [ %v1_132b4, %bb89 ], [ %v1_132b4, %.thread7 ], [ %v6_132b4, %bb90 ]
  %v4_132b8 = udiv i32 %v1_132d8, 4
  %v6_132b8 = icmp ult i32 %v1_132bc, %v4_132b8
  br i1 %v6_132b8, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_132bc = and i32 %v1_132d8, 2
  %v4_132bc = icmp eq i32 %v3_132bc, 0
  %v6_132bc = sub i32 %v1_132bc, %v4_132b8
  br i1 %v4_132bc, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_132c0 = udiv i32 %v1_132d4, 4
  %v6_132c0 = or i32 %v1_132c0, %v5_132c0
  store i32 %v6_132c0, i32* @r2, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_132c8 = phi i32 [ %v6_132bc, %bb91 ], [ %v1_132bc, %.thread8 ], [ %v6_132bc, %bb92 ]
  %v1_132cc = phi i32 [ %v1_132c0, %bb91 ], [ %v1_132c0, %.thread8 ], [ %v6_132c0, %bb92 ]
  %v4_132c4 = udiv i32 %v1_132d8, 8
  %v6_132c4 = icmp ult i32 %v1_132c8, %v4_132c4
  br i1 %v6_132c4, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_132c8 = and i32 %v1_132d8, 4
  %v4_132c8 = icmp eq i32 %v3_132c8, 0
  %v6_132c8 = sub i32 %v1_132c8, %v4_132c4
  br i1 %v4_132c8, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_132cc = udiv i32 %v1_132d4, 8
  %v6_132cc = or i32 %v1_132cc, %v5_132cc
  store i32 %v6_132cc, i32* @r2, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_132e0 = phi i32 [ %v1_132cc, %bb93 ], [ %v1_132cc, %.thread9 ], [ %v6_132cc, %bb94 ]
  %v0_132d0 = phi i32 [ %v6_132c8, %bb93 ], [ %v1_132c8, %.thread9 ], [ %v6_132c8, %bb94 ]
  %v2_132d0 = icmp eq i32 %v0_132d0, 0
  br i1 %v2_132d0, label %dec_label_pc_132e0, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_132d4, 16
  br i1 %tmp142, label %dec_label_pc_132e0, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_132d4 = udiv i32 %v1_132d4, 16
  %v4_132d8 = udiv i32 %v1_132d8, 16
  br label %dec_label_pc_132a0

dec_label_pc_132e0:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_132e0

dec_label_pc_132e8:                               ; preds = %dec_label_pc_13254
  %v9_13254 = icmp eq i32 %v0_13254, %v0_13248
  %. = zext i1 %v9_13254 to i32
  ret i32 %.

dec_label_pc_132f4:                               ; preds = %dec_label_pc_1325c
  %v2_132f4 = icmp ugt i32 %v0_13248, 65535
  br i1 %v2_132f4, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_132f4
  %v2_132f8 = and i32 %v0_13248, 32768
  %v3_132f8 = icmp eq i32 %v2_132f8, 0
  %v4_132f8 = udiv i32 %v0_13248, 65536
  br i1 %v3_132f8, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_132f4
  %v0_1330465 = phi i32 [ %v0_13248, %dec_label_pc_132f4 ], [ %v4_132f8, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_13308 = phi i32 [ %v0_1330465, %.thread16 ], [ %v4_132f8, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  store i32 %storemerge, i32* @r2, align 4
  %v2_13304 = icmp ugt i32 %v1_13308, 255
  br i1 %v2_13304, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_13308 = and i32 %v1_13308, 128
  %v3_13308 = icmp eq i32 %v2_13308, 0
  %v4_13308 = udiv i32 %v1_13308, 256
  br i1 %v3_13308, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_1330c = or i32 %storemerge, 8
  store i32 %v2_1330c, i32* @r2, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_13318 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_1330c, %bb102 ]
  %v1_13314 = phi i32 [ %v1_13308, %bb100 ], [ %v4_13308, %bb101 ], [ %v4_13308, %bb102 ]
  %v2_13310 = icmp ugt i32 %v1_13314, 15
  br i1 %v2_13310, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_13314 = and i32 %v1_13314, 8
  %v3_13314 = icmp eq i32 %v2_13314, 0
  %v4_13314 = udiv i32 %v1_13314, 16
  br i1 %v3_13314, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_13318 = add nsw i32 %v1_13318, 4
  store i32 %v2_13318, i32* @r2, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_13320 = phi i32 [ %v1_13318, %.thread17 ], [ %v1_13318, %bb103 ], [ %v2_13318, %bb104 ]
  %v5_13324 = phi i32 [ %v1_13314, %.thread17 ], [ %v4_13314, %bb103 ], [ %v4_13314, %bb104 ]
  %v2_1331c = icmp ugt i32 %v5_13324, 3
  %v7_1331c = icmp eq i32 %v5_13324, 4
  %v2_13320 = xor i1 %v7_1331c, true
  %v3_13320 = and i1 %v2_1331c, %v2_13320
  br i1 %v3_13320, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_13320 = add nsw i32 %v4_13320, 3
  store i32 %v5_13320, i32* @r2, align 4
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_13324 = phi i32 [ %v4_13320, %.thread18 ], [ %v5_13320, %bb105 ]
  %v2_13324 = xor i1 %v2_1331c, true
  %v3_13324 = or i1 %v7_1331c, %v2_13324
  br i1 %v3_13324, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_13324 = udiv i32 %v5_13324, 2
  %v9_13324 = add i32 %v4_13324, %v8_13324
  store i32 %v9_13324, i32* @r2, align 4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_13328 = phi i32 [ %v4_13324, %bb106 ], [ %v9_13324, %bb107 ]
  %v6_13328 = lshr i32 %v0_13254, %v1_13328
  ret i32 %v6_13328

dec_label_pc_13330:                               ; preds = %bb82
  %v0_13330 = load i32, i32* @lr, align 4
  %v0_13334 = call i32 @function_13508()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_13330)
  %v6_13340 = load i32, i32* @r1, align 4
  %v9_13340 = load i32, i32* @lr, align 4
  %v0_13344 = call i32 @function_13248()
  store i32 %v6_13340, i32* @r2, align 4
  store i32 %v9_13340, i32* @lr, align 4
  ret i32 %v0_13344

; uselistorder directives
  uselistorder i32 %v4_13324, { 1, 0 }
  uselistorder i1 %v7_1331c, { 1, 0 }
  uselistorder i32 %v4_13314, { 1, 0 }
  uselistorder i32 %v1_13314, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1330c, { 1, 0 }
  uselistorder i32 %v4_13308, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13308, { 1, 0, 2, 3 }
  uselistorder i32 %v4_132f8, { 1, 0 }
  uselistorder i32 %v0_132d0, { 1, 0 }
  uselistorder i32 %v4_132c4, { 1, 0 }
  uselistorder i32 %v1_132cc, { 1, 2, 0 }
  uselistorder i32 %v4_132b8, { 1, 0 }
  uselistorder i32 %v1_132c0, { 1, 2, 0 }
  uselistorder i32 %v4_132ac, { 1, 0 }
  uselistorder i32 %v1_132b4, { 1, 2, 0 }
  uselistorder i32 %v1_132d8, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_132a8, { 1, 0 }
  uselistorder i32 %v1_132d4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_13294, { 1, 0 }
  uselistorder i32 %v3_13290, { 1, 0 }
  uselistorder i32 %v1_13290, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_13294, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13280, { 1, 0 }
  uselistorder i32 %v4_1327c, { 2, 1, 0 }
  uselistorder i32 %v1_13280, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_13288.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_13254, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_13248, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 91, 1, 2, 12, 42, 23, 22, 25, 43, 24, 44, 14, 13, 3, 27, 45, 26, 46, 48, 15, 47, 4, 49, 50, 28, 51, 29, 52, 0, 53, 54, 30, 55, 56, 58, 16, 57, 5, 59, 60, 61, 62, 32, 63, 31, 64, 66, 17, 65, 6, 67, 68, 69, 70, 33, 71, 34, 72, 35, 73, 74, 18, 7, 75, 36, 76, 37, 77, 79, 19, 78, 8, 9, 80, 81, 39, 82, 38, 83, 85, 20, 84, 10, 11, 86, 87, 41, 88, 40, 89, 21, 90 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_132e0, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_1329c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13288thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_13358(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13358:
  store i32 %arg1, i32* @r0, align 4
  %v1_13358 = add i32 %arg2, -1
  %v2_13358 = icmp eq i32 %arg2, 0
  br i1 %v2_13358, label %dec_label_pc_13414, label %dec_label_pc_13360

dec_label_pc_13360:                               ; preds = %dec_label_pc_13358
  %v7_13358 = icmp eq i32 %arg2, 1
  br i1 %v7_13358, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_13360
  %v1_13360 = load i32, i32* @r0, align 4
  %v10_13360 = icmp eq i32 %v1_13360, %arg2
  br i1 %v10_13360, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_13360, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_13360 = icmp ult i32 %v1_13360, %arg2
  br i1 %v4_13360, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_13368 = and i32 %v1_13358, %arg2
  %v8_13368 = icmp eq i32 %v6_13368, 0
  br i1 %v8_13368, label %.thread67, label %dec_label_pc_13378.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_1336c = phi i32 [ %v1_13360, %bb75 ], [ 0, %.thread65 ]
  %v3_1336c = and i32 %v1_1336c, %v1_13358
  br label %bb76

dec_label_pc_13378.preheader:                     ; preds = %bb75
  %v2_1337899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1337899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_13408, %bb74, %bb89, %bb84, %dec_label_pc_133d8, %.thread67
  %v5_13370 = phi i32 [ %v1_13360, %bb74 ], [ %v3_1336c, %.thread67 ], [ %v1_133b4.v6_133b4.v6_133bc.v6_133c4, %dec_label_pc_133d8 ], [ 0, %bb84 ], [ %v1_1340c, %dec_label_pc_13408 ], [ %v2_13408, %bb89 ]
  ret i32 %v5_13370

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_13378.preheader
  %v0_1338c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_13378.preheader ], [ %v4_13380, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_13378.preheader ], [ %v2_1338411, %.thread1.thread9 ]
  br label %dec_label_pc_1338cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_13378.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1338411, %.thread1.thread9 ], [ 0, %dec_label_pc_13378.preheader ]
  %v0_1338c.pr33100 = phi i32 [ %v4_13380, %.thread1.thread9 ], [ %arg2, %dec_label_pc_13378.preheader ]
  %v4_1337c = icmp ult i32 %v0_1338c.pr33100, %v1_13360
  br i1 %v4_1337c, label %bb78, label %dec_label_pc_1338cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_13380 = and i32 %v0_1338c.pr33100, 268435456
  %v3_13380 = icmp eq i32 %v2_13380, 0
  %v4_13380 = mul i32 %v0_1338c.pr33100, 16
  br i1 %v3_13380, label %.thread1.thread9, label %dec_label_pc_1338c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1338411 = add i32 %storemerge101, 4
  %v2_13378 = icmp ugt i32 %v4_13380, 268435455
  br i1 %v2_13378, label %.thread, label %bb77

dec_label_pc_1338cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_1338cthread-pre-split.loopexit

dec_label_pc_1338cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1338cthread-pre-split.loopexit.loopexit, %.thread
  %v0_1338c.pr3398 = phi i32 [ %v0_1338c.pr33.lcssa, %.thread ], [ %v0_1338c.pr33100, %dec_label_pc_1338cthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_1338cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1338cthread-pre-split

dec_label_pc_1338cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_1338cthread-pre-split.loopexit
  %v1_1339839 = phi i32 [ %storemerge95, %dec_label_pc_1338cthread-pre-split.loopexit ], [ %v2_13398, %.thread4 ]
  %v0_1338c.pr = phi i32 [ %v0_1338c.pr3398, %dec_label_pc_1338cthread-pre-split.loopexit ], [ %v3_13394, %.thread4 ]
  br label %dec_label_pc_1338c

dec_label_pc_1338c.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_1338c

dec_label_pc_1338c:                               ; preds = %dec_label_pc_1338c.loopexit, %dec_label_pc_1338cthread-pre-split
  %v0_133a0.pr = phi i32 [ %v1_1339839, %dec_label_pc_1338cthread-pre-split ], [ %storemerge101, %dec_label_pc_1338c.loopexit ]
  %v1_13394 = phi i32 [ %v0_1338c.pr, %dec_label_pc_1338cthread-pre-split ], [ %v4_13380, %dec_label_pc_1338c.loopexit ]
  %v2_1338c = icmp slt i32 %v1_13394, 0
  br i1 %v2_1338c, label %dec_label_pc_133a0, label %bb79

bb79:                                             ; preds = %dec_label_pc_1338c
  %v4_13390 = icmp ult i32 %v1_13394, %v1_13360
  br i1 %v4_13390, label %.thread4, label %dec_label_pc_133a0

.thread4:                                         ; preds = %bb79
  %v3_13394 = mul i32 %v1_13394, 2
  %v2_13398 = add i32 %v0_133a0.pr, 1
  br label %dec_label_pc_1338cthread-pre-split

dec_label_pc_133a0:                               ; preds = %bb79, %dec_label_pc_1338c
  %v2_133a0 = add i32 %v0_133a0.pr, -3
  %v5_133a4 = icmp slt i32 %v0_133a0.pr, 3
  br i1 %v5_133a4, label %dec_label_pc_133e4, label %dec_label_pc_133a8

dec_label_pc_133a8:                               ; preds = %dec_label_pc_133a0, %bb83
  %v6_133d0 = phi i32 [ %v0_133d8, %bb83 ], [ %v2_133a0, %dec_label_pc_133a0 ]
  %v1_133ac = phi i32 [ %v1_133b4.v6_133b4.v6_133bc.v6_133c4, %bb83 ], [ %v1_13360, %dec_label_pc_133a0 ]
  %v3_133cc12 = phi i32 [ %v3_133cc, %bb83 ], [ %v1_13394, %dec_label_pc_133a0 ]
  %v3_133a8 = icmp ult i32 %v1_133ac, %v3_133cc12
  %v3_133ac = select i1 %v3_133a8, i32 0, i32 %v3_133cc12
  %v1_133b4 = sub i32 %v1_133ac, %v3_133ac
  %v4_133b0 = udiv i32 %v3_133cc12, 2
  %v6_133b0 = icmp ult i32 %v1_133b4, %v4_133b0
  %v6_133b4 = select i1 %v6_133b0, i32 0, i32 %v4_133b0
  %v1_133b4.v6_133b4 = sub i32 %v1_133b4, %v6_133b4
  %.demorgan = and i1 %v3_133a8, %v6_133b0
  %v4_133b8 = udiv i32 %v3_133cc12, 4
  %v6_133b8 = icmp ult i32 %v1_133b4.v6_133b4, %v4_133b8
  %v6_133bc = select i1 %v6_133b8, i32 0, i32 %v4_133b8
  %v1_133b4.v6_133b4.v6_133bc = sub i32 %v1_133b4.v6_133b4, %v6_133bc
  %.demorgan71 = and i1 %.demorgan, %v6_133b8
  %v4_133c0 = udiv i32 %v3_133cc12, 8
  %v6_133c0 = icmp ult i32 %v1_133b4.v6_133b4.v6_133bc, %v4_133c0
  %v6_133c4 = select i1 %v6_133c0, i32 0, i32 %v4_133c0
  %v1_133b4.v6_133b4.v6_133bc.v6_133c4 = sub i32 %v1_133b4.v6_133b4.v6_133bc, %v6_133c4
  %.demorgan72 = and i1 %.demorgan71, %v6_133c0
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_133a8
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_133a8, %bb80
  %v2_133c8 = add i32 %v1_133b4.v6_133b4.v6_133bc.v6_133c4, -1
  %v4_133c8 = sub i32 0, %v1_133b4.v6_133b4.v6_133bc.v6_133c4
  %v5_133c8 = and i32 %v1_133b4.v6_133b4.v6_133bc.v6_133c4, %v4_133c8
  %v3_133cc = udiv i32 %v3_133cc12, 16
  %v5_133d0 = icmp slt i32 %v1_133b4.v6_133b4.v6_133bc.v6_133c4, 1
  br i1 %v5_133d0, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_133d0 = add i32 %v6_133d0, -4
  %v9_133d0 = sub i32 3, %v6_133d0
  %v10_133d0 = and i32 %v9_133d0, %v6_133d0
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_133d8 = phi i32 [ %v6_133d0, %bb81 ], [ %v7_133d0, %bb82 ]
  %v0_133d415.in = phi i32 [ %v2_133c8, %bb81 ], [ %v7_133d0, %bb82 ]
  %v1_133d414.in = phi i32 [ %v5_133c8, %bb81 ], [ %v10_133d0, %bb82 ]
  %v1_133d414 = icmp slt i32 %v1_133d414.in, 0
  %v0_133d415 = icmp slt i32 %v0_133d415.in, 0
  %v2_133d4 = xor i1 %v0_133d415, %v1_133d414
  br i1 %v2_133d4, label %dec_label_pc_133d8, label %dec_label_pc_133a8

dec_label_pc_133d8:                               ; preds = %bb83
  %v1_133d8 = urem i32 %v0_133d8, 4
  %v2_133d8 = icmp eq i32 %v1_133d8, 0
  br i1 %v2_133d8, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_133d8
  %v3_133dc = icmp eq i32 %v1_133b4.v6_133b4.v6_133bc.v6_133c4, 0
  br i1 %v3_133dc, label %bb76, label %dec_label_pc_133e4

dec_label_pc_133e4:                               ; preds = %bb84, %dec_label_pc_133a0
  %v0_133f8 = phi i32 [ %v3_133cc, %bb84 ], [ %v1_13394, %dec_label_pc_133a0 ]
  %v1_133f4 = phi i32 [ %v1_133b4.v6_133b4.v6_133bc.v6_133c4, %bb84 ], [ %v1_13360, %dec_label_pc_133a0 ]
  %v0_133e4 = phi i32 [ %v0_133d8, %bb84 ], [ %v2_133a0, %dec_label_pc_133a0 ]
  %v5_133e8 = icmp slt i32 %v0_133e4, -2
  br i1 %v5_133e8, label %dec_label_pc_13408, label %dec_label_pc_133ec

dec_label_pc_133ec:                               ; preds = %dec_label_pc_133e4
  %v8_133e4 = icmp eq i32 %v0_133e4, -2
  br i1 %v8_133e4, label %dec_label_pc_133fc, label %dec_label_pc_133f0

dec_label_pc_133f0:                               ; preds = %dec_label_pc_133ec
  %v3_133f0 = icmp ult i32 %v1_133f4, %v0_133f8
  br i1 %v3_133f0, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_133f0
  %v2_133f0 = sub i32 %v1_133f4, %v0_133f8
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_133f0, %bb85
  %v0_133fc52 = phi i32 [ %v1_133f4, %dec_label_pc_133f0 ], [ %v2_133f0, %bb85 ]
  %v3_133f8 = udiv i32 %v0_133f8, 2
  br label %dec_label_pc_133fc

dec_label_pc_133fc:                               ; preds = %dec_label_pc_133ec, %bb86
  %v0_13404 = phi i32 [ %v0_133f8, %dec_label_pc_133ec ], [ %v3_133f8, %bb86 ]
  %v1_13400 = phi i32 [ %v1_133f4, %dec_label_pc_133ec ], [ %v0_133fc52, %bb86 ]
  %v3_133fc = icmp ult i32 %v1_13400, %v0_13404
  br i1 %v3_133fc, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_133fc
  %v2_133fc = sub i32 %v1_13400, %v0_13404
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_133fc, %bb87
  %v0_1340855 = phi i32 [ %v1_13400, %dec_label_pc_133fc ], [ %v2_133fc, %bb87 ]
  %v3_13404 = udiv i32 %v0_13404, 2
  br label %dec_label_pc_13408

dec_label_pc_13408:                               ; preds = %dec_label_pc_133e4, %bb88
  %v2_1340c = phi i32 [ %v0_133f8, %dec_label_pc_133e4 ], [ %v3_13404, %bb88 ]
  %v1_1340c = phi i32 [ %v1_133f4, %dec_label_pc_133e4 ], [ %v0_1340855, %bb88 ]
  %v3_13408 = icmp ult i32 %v1_1340c, %v2_1340c
  br i1 %v3_13408, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_13408
  %v2_13408 = sub i32 %v1_1340c, %v2_1340c
  br label %bb76

dec_label_pc_13414:                               ; preds = %dec_label_pc_13358
  %v0_13414 = load i32, i32* @lr, align 4
  %v0_13418 = call i32 @function_13508()
  call void @__pseudo_branch(i32 %v0_13414)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1340c, { 1, 2, 0 }
  uselistorder i32 %v0_133f8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_133d8, { 1, 0, 2 }
  uselistorder i32 %v7_133d0, { 1, 0 }
  uselistorder i32 %v3_133cc, { 1, 0 }
  uselistorder i32 %v1_133b4.v6_133b4.v6_133bc.v6_133c4, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_133c0, { 1, 0 }
  uselistorder i32 %v4_133b8, { 1, 0 }
  uselistorder i32 %v4_133b0, { 1, 0 }
  uselistorder i32 %v6_133d0, { 3, 0, 2, 1 }
  uselistorder i32 %v2_133a0, { 1, 0 }
  uselistorder i32 %v1_13394, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_13380, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1338c.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13360, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_13408, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_133fc, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_133a8, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_13424(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13424:
  store i32 %arg1, i32* @r0, align 4
  %v2_13424 = icmp eq i32 %arg2, 0
  br i1 %v2_13424, label %dec_label_pc_134f8, label %dec_label_pc_1342c

dec_label_pc_1342c:                               ; preds = %dec_label_pc_13424
  %v1_13424 = icmp slt i32 %arg2, 0
  br i1 %v1_13424, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_1342c
  %v2_1342c = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_1342c, %bb
  %v4_13444 = phi i32 [ %arg2, %dec_label_pc_1342c ], [ %v2_1342c, %bb ]
  %v0_13430 = load i32, i32* @r0, align 4
  %v1_13430 = icmp slt i32 %v0_13430, 0
  br i1 %v1_13430, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_13434 = sub i32 0, %v0_13430
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_1343c = phi i32 [ %v0_13430, %bb79 ], [ %v2_13434, %bb80 ]
  %v1_13438 = add i32 %v4_13444, -1
  %v7_13438 = icmp eq i32 %v4_13444, 1
  br i1 %v7_13438, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_1343c = icmp eq i32 %v1_1343c, %v4_13444
  br i1 %v10_1343c, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_1343c = icmp ult i32 %v1_1343c, %v4_13444
  br i1 %v4_1343c, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_13444 = and i32 %v1_13438, %v4_13444
  %v8_13444 = icmp eq i32 %v6_13444, 0
  br i1 %v8_13444, label %.thread72, label %dec_label_pc_13454.preheader

dec_label_pc_13454.preheader:                     ; preds = %bb84
  %v2_13454109 = icmp ugt i32 %v4_13444, 268435455
  br i1 %v2_13454109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1344864 = phi i32 [ %v1_1343c, %bb84 ], [ 0, %.thread70 ]
  %v3_13448 = and i32 %v1_1344864, %v1_13438
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_13454.preheader
  %v0_13468.pr35.lcssa = phi i32 [ %v4_13444, %dec_label_pc_13454.preheader ], [ %v4_1345c, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_13454.preheader ], [ %v2_134609, %.thread2.thread7 ]
  br label %dec_label_pc_13468thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_13454.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_134609, %.thread2.thread7 ], [ 0, %dec_label_pc_13454.preheader ]
  %v0_13468.pr35110 = phi i32 [ %v4_1345c, %.thread2.thread7 ], [ %v4_13444, %dec_label_pc_13454.preheader ]
  %v4_13458 = icmp ult i32 %v0_13468.pr35110, %v1_1343c
  br i1 %v4_13458, label %bb86, label %dec_label_pc_13468thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_1345c = and i32 %v0_13468.pr35110, 268435456
  %v3_1345c = icmp eq i32 %v2_1345c, 0
  %v4_1345c = mul i32 %v0_13468.pr35110, 16
  br i1 %v3_1345c, label %.thread2.thread7, label %dec_label_pc_13468.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_134609 = add i32 %storemerge111, 4
  %v2_13454 = icmp ugt i32 %v4_1345c, 268435455
  br i1 %v2_13454, label %.thread1, label %bb85

dec_label_pc_13468thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_13468thread-pre-split.loopexit

dec_label_pc_13468thread-pre-split.loopexit:      ; preds = %dec_label_pc_13468thread-pre-split.loopexit.loopexit, %.thread1
  %v0_13468.pr35108 = phi i32 [ %v0_13468.pr35.lcssa, %.thread1 ], [ %v0_13468.pr35110, %dec_label_pc_13468thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_13468thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13468thread-pre-split

dec_label_pc_13468thread-pre-split:               ; preds = %.thread4, %dec_label_pc_13468thread-pre-split.loopexit
  %v1_1347441 = phi i32 [ %storemerge105, %dec_label_pc_13468thread-pre-split.loopexit ], [ %v2_13474, %.thread4 ]
  %v2_1346c36 = phi i32 [ %v1_1343c, %dec_label_pc_13468thread-pre-split.loopexit ], [ %v2_1346c, %.thread4 ]
  %v0_13468.pr = phi i32 [ %v0_13468.pr35108, %dec_label_pc_13468thread-pre-split.loopexit ], [ %v3_13470, %.thread4 ]
  br label %dec_label_pc_13468

dec_label_pc_13468.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_13468

dec_label_pc_13468:                               ; preds = %dec_label_pc_13468.loopexit, %dec_label_pc_13468thread-pre-split
  %v0_1347c.pr = phi i32 [ %v1_1347441, %dec_label_pc_13468thread-pre-split ], [ %storemerge111, %dec_label_pc_13468.loopexit ]
  %v2_1346c = phi i32 [ %v2_1346c36, %dec_label_pc_13468thread-pre-split ], [ %v1_1343c, %dec_label_pc_13468.loopexit ]
  %v1_13470 = phi i32 [ %v0_13468.pr, %dec_label_pc_13468thread-pre-split ], [ %v4_1345c, %dec_label_pc_13468.loopexit ]
  %v2_13468 = icmp slt i32 %v1_13470, 0
  br i1 %v2_13468, label %dec_label_pc_1347c, label %bb87

bb87:                                             ; preds = %dec_label_pc_13468
  %v4_1346c = icmp ult i32 %v1_13470, %v2_1346c
  br i1 %v4_1346c, label %.thread4, label %dec_label_pc_1347c

.thread4:                                         ; preds = %bb87
  %v3_13470 = mul i32 %v1_13470, 2
  %v2_13474 = add i32 %v0_1347c.pr, 1
  br label %dec_label_pc_13468thread-pre-split

dec_label_pc_1347c:                               ; preds = %bb87, %dec_label_pc_13468
  %v2_1347c = add i32 %v0_1347c.pr, -3
  %v5_13480 = icmp slt i32 %v0_1347c.pr, 3
  br i1 %v5_13480, label %dec_label_pc_134c0, label %dec_label_pc_13484

dec_label_pc_13484:                               ; preds = %dec_label_pc_1347c, %bb91
  %v6_134ac = phi i32 [ %v0_134b4, %bb91 ], [ %v2_1347c, %dec_label_pc_1347c ]
  %v1_13488 = phi i32 [ %v1_13490.v6_13490.v6_13498.v6_134a0, %bb91 ], [ %v2_1346c, %dec_label_pc_1347c ]
  %v3_134a810 = phi i32 [ %v3_134a8, %bb91 ], [ %v1_13470, %dec_label_pc_1347c ]
  %v3_13484 = icmp ult i32 %v1_13488, %v3_134a810
  %v3_13488 = select i1 %v3_13484, i32 0, i32 %v3_134a810
  %v1_13490 = sub i32 %v1_13488, %v3_13488
  %v4_1348c = udiv i32 %v3_134a810, 2
  %v6_1348c = icmp ult i32 %v1_13490, %v4_1348c
  %v6_13490 = select i1 %v6_1348c, i32 0, i32 %v4_1348c
  %v1_13490.v6_13490 = sub i32 %v1_13490, %v6_13490
  %.demorgan = and i1 %v3_13484, %v6_1348c
  %v4_13494 = udiv i32 %v3_134a810, 4
  %v6_13494 = icmp ult i32 %v1_13490.v6_13490, %v4_13494
  %v6_13498 = select i1 %v6_13494, i32 0, i32 %v4_13494
  %v1_13490.v6_13490.v6_13498 = sub i32 %v1_13490.v6_13490, %v6_13498
  %.demorgan76 = and i1 %.demorgan, %v6_13494
  %v4_1349c = udiv i32 %v3_134a810, 8
  %v6_1349c = icmp ult i32 %v1_13490.v6_13490.v6_13498, %v4_1349c
  %v6_134a0 = select i1 %v6_1349c, i32 0, i32 %v4_1349c
  %v1_13490.v6_13490.v6_13498.v6_134a0 = sub i32 %v1_13490.v6_13490.v6_13498, %v6_134a0
  %.demorgan77 = and i1 %.demorgan76, %v6_1349c
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_13484
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_13484, %bb88
  %v2_134a4 = add i32 %v1_13490.v6_13490.v6_13498.v6_134a0, -1
  %v4_134a4 = sub i32 0, %v1_13490.v6_13490.v6_13498.v6_134a0
  %v5_134a4 = and i32 %v1_13490.v6_13490.v6_13498.v6_134a0, %v4_134a4
  %v3_134a8 = udiv i32 %v3_134a810, 16
  %v5_134ac = icmp slt i32 %v1_13490.v6_13490.v6_13498.v6_134a0, 1
  br i1 %v5_134ac, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_134ac = add i32 %v6_134ac, -4
  %v9_134ac = sub i32 3, %v6_134ac
  %v10_134ac = and i32 %v9_134ac, %v6_134ac
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_134b4 = phi i32 [ %v6_134ac, %bb89 ], [ %v7_134ac, %bb90 ]
  %v0_134b013.in = phi i32 [ %v2_134a4, %bb89 ], [ %v7_134ac, %bb90 ]
  %v1_134b012.in = phi i32 [ %v5_134a4, %bb89 ], [ %v10_134ac, %bb90 ]
  %v1_134b012 = icmp slt i32 %v1_134b012.in, 0
  %v0_134b013 = icmp slt i32 %v0_134b013.in, 0
  %v2_134b0 = xor i1 %v0_134b013, %v1_134b012
  br i1 %v2_134b0, label %dec_label_pc_134b4, label %dec_label_pc_13484

dec_label_pc_134b4:                               ; preds = %bb91
  %v1_134b4 = urem i32 %v0_134b4, 4
  %v2_134b4 = icmp eq i32 %v1_134b4, 0
  br i1 %v2_134b4, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_134b4
  %v3_134b8 = icmp eq i32 %v1_13490.v6_13490.v6_13498.v6_134a0, 0
  br i1 %v3_134b8, label %.thread6, label %dec_label_pc_134c0

dec_label_pc_134c0:                               ; preds = %bb92, %dec_label_pc_1347c
  %v0_134d4 = phi i32 [ %v3_134a8, %bb92 ], [ %v1_13470, %dec_label_pc_1347c ]
  %v1_134d0 = phi i32 [ %v1_13490.v6_13490.v6_13498.v6_134a0, %bb92 ], [ %v2_1346c, %dec_label_pc_1347c ]
  %v0_134c0 = phi i32 [ %v0_134b4, %bb92 ], [ %v2_1347c, %dec_label_pc_1347c ]
  %v5_134c4 = icmp slt i32 %v0_134c0, -2
  br i1 %v5_134c4, label %dec_label_pc_134e4, label %dec_label_pc_134c8

dec_label_pc_134c8:                               ; preds = %dec_label_pc_134c0
  %v8_134c0 = icmp eq i32 %v0_134c0, -2
  br i1 %v8_134c0, label %dec_label_pc_134d8, label %dec_label_pc_134cc

dec_label_pc_134cc:                               ; preds = %dec_label_pc_134c8
  %v3_134cc = icmp ult i32 %v1_134d0, %v0_134d4
  br i1 %v3_134cc, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_134cc
  %v2_134cc = sub i32 %v1_134d0, %v0_134d4
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_134cc, %bb93
  %v0_134d854 = phi i32 [ %v1_134d0, %dec_label_pc_134cc ], [ %v2_134cc, %bb93 ]
  %v3_134d4 = udiv i32 %v0_134d4, 2
  br label %dec_label_pc_134d8

dec_label_pc_134d8:                               ; preds = %dec_label_pc_134c8, %bb94
  %v0_134e0 = phi i32 [ %v0_134d4, %dec_label_pc_134c8 ], [ %v3_134d4, %bb94 ]
  %v1_134dc = phi i32 [ %v1_134d0, %dec_label_pc_134c8 ], [ %v0_134d854, %bb94 ]
  %v3_134d8 = icmp ult i32 %v1_134dc, %v0_134e0
  br i1 %v3_134d8, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_134d8
  %v2_134d8 = sub i32 %v1_134dc, %v0_134e0
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_134d8, %bb95
  %v0_134e457 = phi i32 [ %v1_134dc, %dec_label_pc_134d8 ], [ %v2_134d8, %bb95 ]
  %v3_134e0 = udiv i32 %v0_134e0, 2
  br label %dec_label_pc_134e4

dec_label_pc_134e4:                               ; preds = %dec_label_pc_134c0, %bb96
  %v2_134e8 = phi i32 [ %v0_134d4, %dec_label_pc_134c0 ], [ %v3_134e0, %bb96 ]
  %v1_134e8 = phi i32 [ %v1_134d0, %dec_label_pc_134c0 ], [ %v0_134e457, %bb96 ]
  %v3_134e4 = icmp ult i32 %v1_134e8, %v2_134e8
  br i1 %v3_134e4, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_134e4
  %v2_134e4 = sub i32 %v1_134e8, %v2_134e8
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_134e4, %bb83, %.thread72, %dec_label_pc_134b4, %bb92, %bb97
  %v1_134f0 = phi i32 [ %v1_13490.v6_13490.v6_13498.v6_134a0, %dec_label_pc_134b4 ], [ 0, %bb92 ], [ %v1_134e8, %dec_label_pc_134e4 ], [ %v2_134e4, %bb97 ], [ %v3_13448, %.thread72 ], [ %v1_1343c, %bb83 ]
  br i1 %v1_13430, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_134f0 = sub i32 0, %v1_134f0
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_134f4 = phi i32 [ %v1_134f0, %.thread6 ], [ %v2_134f0, %bb98 ]
  ret i32 %v1_134f4

dec_label_pc_134f8:                               ; preds = %dec_label_pc_13424
  %v0_134f8 = load i32, i32* @lr, align 4
  %v0_134fc = call i32 @function_13508()
  call void @__pseudo_branch(i32 %v0_134f8)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_134d4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_134b4, { 1, 0, 2 }
  uselistorder i32 %v7_134ac, { 1, 0 }
  uselistorder i32 %v3_134a8, { 1, 0 }
  uselistorder i32 %v1_13490.v6_13490.v6_13498.v6_134a0, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_1349c, { 1, 0 }
  uselistorder i32 %v4_13494, { 1, 0 }
  uselistorder i32 %v4_1348c, { 1, 0 }
  uselistorder i32 %v6_134ac, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1347c, { 1, 0 }
  uselistorder i32 %v1_13470, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_1346c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_1345c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_13468.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1343c, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_13444, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_13508, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_134e4, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_134d8, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_13484, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_13508() local_unnamed_addr {
dec_label_pc_13508:
  %v1_13508 = load i32, i32* @r0, align 4
  ret i32 %v1_13508
}

define i32 @function_1350c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1350c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_1350c = load i32, i32* @r2, align 4
  %v1_1351c = add i32 %arg2, -12
  store i32 %v6_1350c, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_1351c, 2
  br i1 %tmp, label %dec_label_pc_13544, label %dec_label_pc_1353c

dec_label_pc_1353c:                               ; preds = %dec_label_pc_1350c
  %v0_1353c = call i32 @function_13580()
  br label %dec_label_pc_13570

dec_label_pc_13544:                               ; preds = %dec_label_pc_1350c
  %v2_1354c = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_1354c, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_1354c, -4095
  br i1 %tmp8, label %dec_label_pc_13570, label %dec_label_pc_1355c

dec_label_pc_1355c:                               ; preds = %dec_label_pc_13544
  %v0_1355c = call i32 @function_13b78()
  %v0_13560 = load i32, i32* %r4.global-to-local, align 4
  %v1_13560 = sub i32 0, %v0_13560
  %v2_13564 = inttoptr i32 %v0_1355c to i32*
  store i32 %v1_13560, i32* %v2_13564, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13570

dec_label_pc_13570:                               ; preds = %dec_label_pc_1355c, %dec_label_pc_13544, %dec_label_pc_1353c
  %storemerge = phi i32 [ %v0_1353c, %dec_label_pc_1353c ], [ %v2_1354c, %dec_label_pc_13544 ], [ -1, %dec_label_pc_1355c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_1354c, { 1, 0, 2 }
}

define i32 @function_13580() local_unnamed_addr {
dec_label_pc_13580:
  %r4.global-to-local = alloca i32, align 4
  %v0_135a0 = load i32, i32* @r0, align 4
  store i32 %v0_135a0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_135a0, -4095
  br i1 %tmp, label %dec_label_pc_135bc, label %dec_label_pc_135ac

dec_label_pc_135ac:                               ; preds = %dec_label_pc_13580
  %v0_135ac = call i32 @function_13b78()
  %v0_135b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_135b0 = sub i32 0, %v0_135b0
  %v2_135b4 = inttoptr i32 %v0_135ac to i32*
  store i32 %v1_135b0, i32* %v2_135b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135bc

dec_label_pc_135bc:                               ; preds = %dec_label_pc_13580, %dec_label_pc_135ac
  %v0_135bc = phi i32 [ %v0_135a0, %dec_label_pc_13580 ], [ -1, %dec_label_pc_135ac ]
  ret i32 %v0_135bc

; uselistorder directives
  uselistorder i32 %v0_135a0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_135bc, { 1, 0 }
}

define i32 @function_135d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_135d0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_135d0 = load i32, i32* @r4, align 4
  store i32 %v3_135d0, i32* %stack_var_-8, align 4
  %v1_135d4 = call i32 @close(i32 %arg1)
  store i32 %v1_135d4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_135d4, -4095
  br i1 %tmp, label %dec_label_pc_135f4, label %dec_label_pc_135e4

dec_label_pc_135e4:                               ; preds = %dec_label_pc_135d0
  %v0_135e4 = call i32 @function_13b78()
  %v0_135e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_135e8 = sub i32 0, %v0_135e8
  %v2_135ec = inttoptr i32 %v0_135e4 to i32*
  store i32 %v1_135e8, i32* %v2_135ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135f4

dec_label_pc_135f4:                               ; preds = %dec_label_pc_135d0, %dec_label_pc_135e4
  %v0_135f4 = phi i32 [ %v1_135d4, %dec_label_pc_135d0 ], [ -1, %dec_label_pc_135e4 ]
  %v2_135f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_135f8, i32* @r4, align 4
  ret i32 %v0_135f4

; uselistorder directives
  uselistorder i32 %v1_135d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_135f4, { 1, 0 }
}

define i32 @function_135fc() local_unnamed_addr {
dec_label_pc_135fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_135fc = load i32, i32* @r4, align 4
  store i32 %v3_135fc, i32* %stack_var_-8, align 4
  %v0_13600 = call i32 @fork()
  store i32 %v0_13600, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13600, -4095
  br i1 %tmp, label %dec_label_pc_13620, label %dec_label_pc_13610

dec_label_pc_13610:                               ; preds = %dec_label_pc_135fc
  %v0_13610 = call i32 @function_13b78()
  %v0_13614 = load i32, i32* %r4.global-to-local, align 4
  %v1_13614 = sub i32 0, %v0_13614
  %v2_13618 = inttoptr i32 %v0_13610 to i32*
  store i32 %v1_13614, i32* %v2_13618, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13620

dec_label_pc_13620:                               ; preds = %dec_label_pc_135fc, %dec_label_pc_13610
  %v0_13620 = phi i32 [ %v0_13600, %dec_label_pc_135fc ], [ -1, %dec_label_pc_13610 ]
  %v2_13624 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13624, i32* @r4, align 4
  ret i32 %v0_13620

; uselistorder directives
  uselistorder i32 %v0_13600, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13620, { 1, 0 }
}

define i32 @function_13628() local_unnamed_addr {
dec_label_pc_13628:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13628 = load i32, i32* @r4, align 4
  store i32 %v3_13628, i32* %stack_var_-8, align 4
  %v0_1362c = call i32 @getpid()
  store i32 %v0_1362c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1362c, -4095
  br i1 %tmp, label %dec_label_pc_1364c, label %dec_label_pc_1363c

dec_label_pc_1363c:                               ; preds = %dec_label_pc_13628
  %v0_1363c = call i32 @function_13b78()
  %v0_13640 = load i32, i32* %r4.global-to-local, align 4
  %v1_13640 = sub i32 0, %v0_13640
  %v2_13644 = inttoptr i32 %v0_1363c to i32*
  store i32 %v1_13640, i32* %v2_13644, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1364c

dec_label_pc_1364c:                               ; preds = %dec_label_pc_13628, %dec_label_pc_1363c
  %v0_1364c = phi i32 [ %v0_1362c, %dec_label_pc_13628 ], [ -1, %dec_label_pc_1363c ]
  %v2_13650 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13650, i32* @r4, align 4
  ret i32 %v0_1364c

; uselistorder directives
  uselistorder i32 %v0_1362c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1364c, { 1, 0 }
}

define i32 @function_13654() local_unnamed_addr {
dec_label_pc_13654:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13654 = load i32, i32* @r4, align 4
  store i32 %v3_13654, i32* %stack_var_-8, align 4
  %v0_13658 = call i32 @getppid()
  store i32 %v0_13658, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13658, -4095
  br i1 %tmp, label %dec_label_pc_13678, label %dec_label_pc_13668

dec_label_pc_13668:                               ; preds = %dec_label_pc_13654
  %v0_13668 = call i32 @function_13b78()
  %v0_1366c = load i32, i32* %r4.global-to-local, align 4
  %v1_1366c = sub i32 0, %v0_1366c
  %v2_13670 = inttoptr i32 %v0_13668 to i32*
  store i32 %v1_1366c, i32* %v2_13670, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13678

dec_label_pc_13678:                               ; preds = %dec_label_pc_13654, %dec_label_pc_13668
  %v0_13678 = phi i32 [ %v0_13658, %dec_label_pc_13654 ], [ -1, %dec_label_pc_13668 ]
  %v2_1367c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1367c, i32* @r4, align 4
  ret i32 %v0_13678

; uselistorder directives
  uselistorder i32 %v0_13658, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13678, { 1, 0 }
}

define i32 @function_13680(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13680:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_13680 = load i32, i32* @r3, align 4
  store i32 %v9_13680, i32* %stack_var_-4, align 4
  %v2_1368c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1368c, i32* @r3, align 4
  %v2_1369c = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_1369c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_1369c, -4095
  br i1 %tmp, label %dec_label_pc_136bc, label %dec_label_pc_136ac

dec_label_pc_136ac:                               ; preds = %dec_label_pc_13680
  %v0_136ac = call i32 @function_13b78()
  %v0_136b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_136b0 = sub i32 0, %v0_136b0
  store i32 %v1_136b0, i32* @r3, align 4
  %v2_136b4 = inttoptr i32 %v0_136ac to i32*
  store i32 %v1_136b0, i32* %v2_136b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136bc

dec_label_pc_136bc:                               ; preds = %dec_label_pc_13680, %dec_label_pc_136ac
  %v0_136bc = phi i32 [ %v2_1369c, %dec_label_pc_13680 ], [ -1, %dec_label_pc_136ac ]
  ret i32 %v0_136bc

; uselistorder directives
  uselistorder i32 %v2_1369c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_136bc, { 1, 0 }
}

define i32 @function_136d0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_136d0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136d0 = load i32, i32* @r4, align 4
  store i32 %v3_136d0, i32* %stack_var_-8, align 4
  %v2_136d4 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_136d8 = icmp eq i32 %v2_136d4, -4096
  store i1 %v7_136d8, i1* @cpsr_z, align 1
  store i32 %v2_136d4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_136d4, -4095
  br i1 %tmp, label %dec_label_pc_136f4, label %dec_label_pc_136e4

dec_label_pc_136e4:                               ; preds = %dec_label_pc_136d0
  %v0_136e4 = call i32 @function_13b78()
  %v0_136e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_136e8 = sub i32 0, %v0_136e8
  %v2_136ec = inttoptr i32 %v0_136e4 to i32*
  store i32 %v1_136e8, i32* %v2_136ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136f4

dec_label_pc_136f4:                               ; preds = %dec_label_pc_136d0, %dec_label_pc_136e4
  %v0_136f4 = phi i32 [ %v2_136d4, %dec_label_pc_136d0 ], [ -1, %dec_label_pc_136e4 ]
  %v2_136f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_136f8, i32* @r4, align 4
  ret i32 %v0_136f4

; uselistorder directives
  uselistorder i32 %v2_136d4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_136f4, { 1, 0 }
}

define i32 @function_136fc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_136fc:
  %r4.global-to-local = alloca i32, align 4
  %v6_136fc = load i32, i32* @r2, align 4
  %v1_1370c = and i32 %arg2, 64
  store i32 %v1_1370c, i32* @r3, align 4
  %v2_1370c = icmp eq i32 %v1_1370c, 0
  br i1 %v2_1370c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_136fc
  store i32 %v6_136fc, i32* @r3, align 4
  %phitmp = urem i32 %v6_136fc, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_136fc, %bb
  %v0_1371c = phi i32 [ 0, %dec_label_pc_136fc ], [ %phitmp, %bb ]
  store i32 %v0_1371c, i32* @r2, align 4
  %v4_13724 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_13728 = icmp eq i32 %v4_13724, -4096
  store i1 %v7_13728, i1* @cpsr_z, align 1
  store i32 %v4_13724, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13724, -4095
  br i1 %tmp, label %dec_label_pc_13744, label %dec_label_pc_13734

dec_label_pc_13734:                               ; preds = %.thread1
  %v0_13734 = call i32 @function_13b78()
  %v0_13738 = load i32, i32* %r4.global-to-local, align 4
  %v1_13738 = sub i32 0, %v0_13738
  store i32 %v1_13738, i32* @r3, align 4
  %v2_1373c = inttoptr i32 %v0_13734 to i32*
  store i32 %v1_13738, i32* %v2_1373c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13744

dec_label_pc_13744:                               ; preds = %.thread1, %dec_label_pc_13734
  %v0_13744 = phi i32 [ %v4_13724, %.thread1 ], [ -1, %dec_label_pc_13734 ]
  ret i32 %v0_13744

; uselistorder directives
  uselistorder i32 %v4_13724, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_13744, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13758(i32 %arg1) local_unnamed_addr {
dec_label_pc_13758:
  store i32 %arg1, i32* @r2, align 4
  %v0_13760 = load i32, i32* @r0, align 4
  %v2_13760 = inttoptr i32 %v0_13760 to i8*
  %v3_13760 = call i32 @function_136fc(i8* %v2_13760, i32 577)
  %v0_13764 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13764, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13758
  %v6_13764 = and i32 %v3_13760, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13758, %bb
  %v7_13764 = phi i32 [ %v3_13760, %dec_label_pc_13758 ], [ %v6_13764, %bb ]
  ret i32 %v7_13764

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13768(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13768:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13768 = load i32, i32* @r4, align 4
  store i32 %v3_13768, i32* %stack_var_-8, align 4
  %v2_13770 = load i32, i32* @r2, align 4
  %v3_13770 = load i32, i32* @r3, align 4
  %v4_13770 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_13770, i32 %v3_13770, i32 0)
  store i32 %v4_13770, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13770, -4095
  br i1 %tmp, label %dec_label_pc_13790, label %dec_label_pc_13780

dec_label_pc_13780:                               ; preds = %dec_label_pc_13768
  %v0_13780 = call i32 @function_13b78()
  %v0_13784 = load i32, i32* %r4.global-to-local, align 4
  %v1_13784 = sub i32 0, %v0_13784
  %v2_13788 = inttoptr i32 %v0_13780 to i32*
  store i32 %v1_13784, i32* %v2_13788, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13790

dec_label_pc_13790:                               ; preds = %dec_label_pc_13768, %dec_label_pc_13780
  %v0_13790 = phi i32 [ %v4_13770, %dec_label_pc_13768 ], [ -1, %dec_label_pc_13780 ]
  %v2_13794 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13794, i32* @r4, align 4
  ret i32 %v0_13790

; uselistorder directives
  uselistorder i32 %v4_13770, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13790, { 1, 0 }
}

define i32 @function_13798(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13798:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13798 = load i32, i32* @r4, align 4
  store i32 %v3_13798, i32* %stack_var_-8, align 4
  %v4_1379c = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_1379c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1379c, -4095
  br i1 %tmp, label %dec_label_pc_137bc, label %dec_label_pc_137ac

dec_label_pc_137ac:                               ; preds = %dec_label_pc_13798
  %v0_137ac = call i32 @function_13b78()
  %v0_137b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_137b0 = sub i32 0, %v0_137b0
  %v2_137b4 = inttoptr i32 %v0_137ac to i32*
  store i32 %v1_137b0, i32* %v2_137b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137bc

dec_label_pc_137bc:                               ; preds = %dec_label_pc_13798, %dec_label_pc_137ac
  %v0_137bc = phi i32 [ %v4_1379c, %dec_label_pc_13798 ], [ -1, %dec_label_pc_137ac ]
  %v2_137c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137c0, i32* @r4, align 4
  ret i32 %v0_137bc

; uselistorder directives
  uselistorder i32 %v4_1379c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137bc, { 1, 0 }
}

define i32 @function_137c4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_137c4:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_137c4 = load i32, i32* @r4, align 4
  store i32 %v3_137c4, i32* %stack_var_-8, align 4
  %v7_137c8 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_137c8, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_137c8, -4095
  br i1 %tmp6, label %dec_label_pc_137e8, label %dec_label_pc_137d8

dec_label_pc_137d8:                               ; preds = %dec_label_pc_137c4
  %v0_137d8 = call i32 @function_13b78()
  %v0_137dc = load i32, i32* %r4.global-to-local, align 4
  %v1_137dc = sub i32 0, %v0_137dc
  %v2_137e0 = inttoptr i32 %v0_137d8 to i32*
  store i32 %v1_137dc, i32* %v2_137e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137e8

dec_label_pc_137e8:                               ; preds = %dec_label_pc_137c4, %dec_label_pc_137d8
  %v0_137e8 = phi i32 [ %v7_137c8, %dec_label_pc_137c4 ], [ -1, %dec_label_pc_137d8 ]
  %v2_137ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137ec, i32* @r4, align 4
  ret i32 %v0_137e8

; uselistorder directives
  uselistorder i32 %v7_137c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137e8, { 1, 0 }
}

define i32 @function_137f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_137f0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137f0 = load i32, i32* @r4, align 4
  store i32 %v3_137f0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13818, label %dec_label_pc_13808

dec_label_pc_13808:                               ; preds = %dec_label_pc_137f0
  %v0_13808 = call i32 @function_13b78()
  %v0_1380c = load i32, i32* %r4.global-to-local, align 4
  %v1_1380c = sub i32 0, %v0_1380c
  %v2_13810 = inttoptr i32 %v0_13808 to i32*
  store i32 %v1_1380c, i32* %v2_13810, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1381c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13818

dec_label_pc_13818:                               ; preds = %dec_label_pc_137f0, %dec_label_pc_13808
  %v2_1381c = phi i32 [ %v3_137f0, %dec_label_pc_137f0 ], [ %v2_1381c.pre, %dec_label_pc_13808 ]
  %v0_13818 = phi i32 [ %arg1, %dec_label_pc_137f0 ], [ -1, %dec_label_pc_13808 ]
  store i32 %v2_1381c, i32* @r4, align 4
  ret i32 %v0_13818

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13818, { 1, 0 }
}

define i32 @function_13820(i32 %arg1) local_unnamed_addr {
dec_label_pc_13820:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13820 = load i32, i32* @r4, align 4
  store i32 %v3_13820, i32* %stack_var_-8, align 4
  %v0_13824 = call i32 @setsid()
  store i32 %v0_13824, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13824, -4095
  br i1 %tmp, label %dec_label_pc_13844, label %dec_label_pc_13834

dec_label_pc_13834:                               ; preds = %dec_label_pc_13820
  %v0_13834 = call i32 @function_13b78()
  %v0_13838 = load i32, i32* %r4.global-to-local, align 4
  %v1_13838 = sub i32 0, %v0_13838
  %v2_1383c = inttoptr i32 %v0_13834 to i32*
  store i32 %v1_13838, i32* %v2_1383c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13844

dec_label_pc_13844:                               ; preds = %dec_label_pc_13820, %dec_label_pc_13834
  %v0_13844 = phi i32 [ %v0_13824, %dec_label_pc_13820 ], [ -1, %dec_label_pc_13834 ]
  %v2_13848 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13848, i32* @r4, align 4
  ret i32 %v0_13844

; uselistorder directives
  uselistorder i32 %v0_13824, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13844, { 1, 0 }
}

define i32 @function_1384c(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1384c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1384c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_1384c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1384c
  %v3_138545 = load i32, i32* @r4, align 4
  store i32 %v3_138545, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13874

bb:                                               ; preds = %dec_label_pc_1384c
  %v3_13854 = load i32, i32* @r4, align 4
  store i32 %v3_13854, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_13874, label %dec_label_pc_13860

dec_label_pc_13860:                               ; preds = %bb
  %v0_13860 = call i32 @function_13b78()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1386c = inttoptr i32 %v0_13860 to i32*
  store i32 22, i32* %v2_1386c, align 4
  %v0_13898.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13898

dec_label_pc_13874:                               ; preds = %.thread, %bb
  %v7_13874 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_13874, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_13874, -4095
  br i1 %tmp13, label %dec_label_pc_13894, label %dec_label_pc_13884

dec_label_pc_13884:                               ; preds = %dec_label_pc_13874
  %v0_13884 = call i32 @function_13b78()
  %v0_13888 = load i32, i32* %r4.global-to-local, align 4
  %v1_13888 = sub i32 0, %v0_13888
  %v2_1388c = inttoptr i32 %v0_13884 to i32*
  store i32 %v1_13888, i32* %v2_1388c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13894

dec_label_pc_13894:                               ; preds = %dec_label_pc_13874, %dec_label_pc_13884
  %v0_13894 = phi i32 [ %v7_13874, %dec_label_pc_13874 ], [ -1, %dec_label_pc_13884 ]
  store i32 %v0_13894, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13898

dec_label_pc_13898:                               ; preds = %dec_label_pc_13860, %dec_label_pc_13894
  %v0_13898 = phi i32 [ %v0_13898.pre, %dec_label_pc_13860 ], [ %v0_13894, %dec_label_pc_13894 ]
  %v2_1389c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1389c, i32* @r4, align 4
  ret i32 %v0_13898

; uselistorder directives
  uselistorder i32 %v7_13874, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13898, { 1, 0 }
  uselistorder label %dec_label_pc_13894, { 1, 0 }
  uselistorder label %dec_label_pc_13874, { 1, 0 }
}

define i32 @function_138a0(i32* %arg1) local_unnamed_addr {
dec_label_pc_138a0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_138a0 = load i32, i32* @r4, align 4
  store i32 %v3_138a0, i32* %stack_var_-8, align 4
  %v2_138a4 = call i32 @time(i32* %arg1)
  store i32 %v2_138a4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_138a4, -4095
  br i1 %tmp, label %dec_label_pc_138c4, label %dec_label_pc_138b4

dec_label_pc_138b4:                               ; preds = %dec_label_pc_138a0
  %v0_138b4 = call i32 @function_13b78()
  %v0_138b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_138b8 = sub i32 0, %v0_138b8
  %v2_138bc = inttoptr i32 %v0_138b4 to i32*
  store i32 %v1_138b8, i32* %v2_138bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_138c4

dec_label_pc_138c4:                               ; preds = %dec_label_pc_138a0, %dec_label_pc_138b4
  %v0_138c4 = phi i32 [ %v2_138a4, %dec_label_pc_138a0 ], [ -1, %dec_label_pc_138b4 ]
  %v2_138c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_138c8, i32* @r4, align 4
  ret i32 %v0_138c4

; uselistorder directives
  uselistorder i32 %v2_138a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138c4, { 1, 0 }
}

define i32 @function_138cc(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_138cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_138cc = load i32, i32* @r4, align 4
  store i32 %v3_138cc, i32* %stack_var_-8, align 4
  %v4_138d0 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_138d0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_138d0, -4095
  br i1 %tmp, label %dec_label_pc_138f0, label %dec_label_pc_138e0

dec_label_pc_138e0:                               ; preds = %dec_label_pc_138cc
  %v0_138e0 = call i32 @function_13b78()
  %v0_138e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_138e4 = sub i32 0, %v0_138e4
  %v2_138e8 = inttoptr i32 %v0_138e0 to i32*
  store i32 %v1_138e4, i32* %v2_138e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_138f0

dec_label_pc_138f0:                               ; preds = %dec_label_pc_138cc, %dec_label_pc_138e0
  %v0_138f0 = phi i32 [ %v4_138d0, %dec_label_pc_138cc ], [ -1, %dec_label_pc_138e0 ]
  %v2_138f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_138f4, i32* @r4, align 4
  ret i32 %v0_138f0

; uselistorder directives
  uselistorder i32 %v4_138d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138f0, { 1, 0 }
}

define i32 @function_138f8(i32* %arg1) local_unnamed_addr {
dec_label_pc_138f8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_138f8 = load i32, i32* @r4, align 4
  store i32 %v3_138f8, i32* %stack_var_-20, align 4
  %v6_138f8 = load i32, i32* @r5, align 4
  %v9_138f8 = load i32, i32* @r6, align 4
  %v12_138f8 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_13900 = load i32, i32* %arg1, align 4
  store i32 %v2_13900, i32* %r4.global-to-local, align 4
  %v2_13904 = ptrtoint i32* %stack_var_-36 to i32
  %v1_13908 = add i32 %tmp, 24
  store i32 %v1_13908, i32* @r6, align 4
  %v3_1390c = icmp eq i32 %v2_13900, -1
  store i32 %v2_13904, i32* @r7, align 4
  store i32 %v1_13908, i32* %r2.global-to-local, align 4
  store i32 %v2_13904, i32* @r0, align 4
  br i1 %v3_1390c, label %dec_label_pc_13924, label %dec_label_pc_13938

dec_label_pc_13924:                               ; preds = %dec_label_pc_138f8
  %v0_13924 = call i32 @function_13b78()
  %v0_1392c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1392c, i32* %r2.global-to-local, align 4
  %v2_13930 = inttoptr i32 %v0_13924 to i32*
  store i32 9, i32* %v2_13930, align 4
  %v0_13990.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13990

dec_label_pc_13938:                               ; preds = %dec_label_pc_138f8
  %v8_13940 = call i32 @function_14a44(i32 %v2_13904, i32 ptrtoint (i32* @global_var_14a3c.844 to i32), i32 %v1_13908, i32 84548, i32 %v3_138f8, i32 %v6_138f8, i32 %v9_138f8)
  %v1_13950 = call i32 @function_14a3c()
  %v0_1395c = load i32, i32* @r5, align 4
  %v1_1395c = inttoptr i32 %v0_1395c to i32*
  %v2_1395c = load i32, i32* %v1_1395c, align 4
  store i32 %v2_1395c, i32* @r4, align 4
  store i32 %v2_13904, i32* @r0, align 4
  store i32 -1, i32* %v1_1395c, align 4
  store i32 ptrtoint (i32* @global_var_13974.848 to i32), i32* @lr, align 4
  %v8_13970 = call i32 @function_14a44(i32 %v2_13904, i32 1, i32 %v1_13908, i32 84548, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13974 = load i32, i32* @r5, align 4
  %v1_13974 = add i32 %v0_13974, 12
  %v2_13974 = inttoptr i32 %v1_13974 to i32*
  %v3_13974 = load i32, i32* %v2_13974, align 4
  store i32 %v3_13974, i32* @r0, align 4
  %v0_13978 = call i32 @function_14200()
  %v0_1397c = load i32, i32* @r5, align 4
  store i32 %v0_1397c, i32* @r0, align 4
  %v0_13980 = call i32 @function_14200()
  %v0_13984 = load i32, i32* @r4, align 4
  %v1_13988 = call i32 @function_135d0(i32 %v0_13984)
  store i32 %v1_13988, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13990

dec_label_pc_13990:                               ; preds = %dec_label_pc_13924, %dec_label_pc_13938
  %v0_13990 = phi i32 [ %v0_13990.pre, %dec_label_pc_13924 ], [ %v1_13988, %dec_label_pc_13938 ]
  %v2_13998 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13998, i32* @r4, align 4
  store i32 %v6_138f8, i32* @r5, align 4
  store i32 %v9_138f8, i32* @r6, align 4
  store i32 %v12_138f8, i32* @r7, align 4
  ret i32 %v0_13990

; uselistorder directives
  uselistorder i32 %v1_13908, { 2, 1, 0, 3 }
  uselistorder i32 %v2_13904, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_138f8, { 1, 0 }
  uselistorder i32 %v6_138f8, { 1, 0 }
  uselistorder label %dec_label_pc_13990, { 1, 0 }
}

define i32 @function_139ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_139ac:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_139ac = load i32, i32* @r4, align 4
  %v9_139ac = load i32, i32* @r6, align 4
  %v12_139ac = load i32, i32* @r7, align 4
  %v0_139b8 = load i32, i32* @r0, align 4
  %v2_139b8 = inttoptr i32 %v0_139b8 to i8*
  %v3_139b8 = call i32 @function_136fc(i8* %v2_139b8, i32 18432)
  store i32 %v3_139b8, i32* @r0, align 4
  store i32 %v3_139b8, i32* @r7, align 4
  %v1_139bc = icmp slt i32 %v3_139b8, 0
  br i1 %v1_139bc, label %.thread1, label %dec_label_pc_139c8

.thread1:                                         ; preds = %dec_label_pc_139ac
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_13a98

dec_label_pc_139c8:                               ; preds = %dec_label_pc_139ac
  %v2_139b4 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_139b4, i32* @r1, align 4
  %v0_139cc = call i32 @function_14e68()
  %v1_139d0 = icmp slt i32 %v0_139cc, 0
  br i1 %v1_139d0, label %dec_label_pc_139f0, label %dec_label_pc_139d8

dec_label_pc_139d8:                               ; preds = %dec_label_pc_139c8
  %v0_139d8 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_139e4 = call i32 @function_1350c(i32 %v0_139d8, i32 2)
  %v1_139e8 = icmp slt i32 %v2_139e4, 0
  br i1 %v1_139e8, label %dec_label_pc_139f0, label %dec_label_pc_13a10

dec_label_pc_139f0:                               ; preds = %dec_label_pc_139d8, %dec_label_pc_139c8
  %v0_139f0 = call i32 @function_13b78()
  store i32 %v0_139f0, i32* %r5.global-to-local, align 4
  %v0_139f8 = load i32, i32* @r7, align 4
  %v1_139fc = inttoptr i32 %v0_139f0 to i32*
  %v2_139fc = load i32, i32* %v1_139fc, align 4
  store i32 %v2_139fc, i32* @r4, align 4
  %v1_13a00 = call i32 @function_135d0(i32 %v0_139f8)
  store i32 0, i32* @r6, align 4
  %v0_13a08 = load i32, i32* @r4, align 4
  %v1_13a08 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a08 = inttoptr i32 %v1_13a08 to i32*
  store i32 %v0_13a08, i32* %v2_13a08, align 4
  br label %dec_label_pc_13a98

dec_label_pc_13a10:                               ; preds = %dec_label_pc_139d8
  %v1_13a14 = call i32 @function_14054(i32 48)
  store i32 %v1_13a14, i32* @r6, align 4
  %v2_13a18 = icmp eq i32 %v1_13a14, 0
  br i1 %v2_13a18, label %dec_label_pc_13a68, label %dec_label_pc_13a20

dec_label_pc_13a20:                               ; preds = %dec_label_pc_13a10
  store i32 0, i32* @r4, align 4
  %v2_13a24 = add i32 %v1_13a14, 16
  %v3_13a24 = inttoptr i32 %v2_13a24 to i32*
  store i32 0, i32* %v3_13a24, align 4
  %v2_13a2c = icmp ugt i32 %tmp, 511
  %v1_13a30 = load i32, i32* @r6, align 4
  %v2_13a30 = add i32 %v1_13a30, 20
  %v3_13a30 = inttoptr i32 %v2_13a30 to i32*
  store i32 %tmp, i32* %v3_13a30, align 4
  br i1 %v2_13a2c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13a20
  %v2_13a38 = load i32, i32* @r6, align 4
  %v3_13a38 = add i32 %v2_13a38, 20
  %v4_13a38 = inttoptr i32 %v3_13a38 to i32*
  store i32 512, i32* %v4_13a38, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13a20, %bb
  %v0_13a3c = load i32, i32* @r7, align 4
  %v1_13a3c = load i32, i32* @r6, align 4
  %v2_13a3c = inttoptr i32 %v1_13a3c to i32*
  store i32 %v0_13a3c, i32* %v2_13a3c, align 4
  %v0_13a40 = load i32, i32* @r4, align 4
  %v1_13a40 = load i32, i32* @r6, align 4
  %v2_13a40 = add i32 %v1_13a40, 8
  %v3_13a40 = inttoptr i32 %v2_13a40 to i32*
  store i32 %v0_13a40, i32* %v3_13a40, align 4
  %v0_13a44 = load i32, i32* @r4, align 4
  %v1_13a44 = load i32, i32* @r6, align 4
  %v2_13a44 = add i32 %v1_13a44, 4
  %v3_13a44 = inttoptr i32 %v2_13a44 to i32*
  store i32 %v0_13a44, i32* %v3_13a44, align 4
  %v0_13a4c = load i32, i32* @r6, align 4
  %v1_13a4c = add i32 %v0_13a4c, 20
  %v2_13a4c = inttoptr i32 %v1_13a4c to i32*
  %v3_13a4c = load i32, i32* %v2_13a4c, align 4
  %v2_13a50 = call i32 @function_141a8(i32 1, i32 %v3_13a4c)
  %v2_13a54 = icmp eq i32 %v2_13a50, 0
  %v1_13a58 = load i32, i32* @r6, align 4
  %v2_13a58 = add i32 %v1_13a58, 12
  %v3_13a58 = inttoptr i32 %v2_13a58 to i32*
  store i32 %v2_13a50, i32* %v3_13a58, align 4
  br i1 %v2_13a54, label %dec_label_pc_13a60, label %dec_label_pc_13a84

dec_label_pc_13a60:                               ; preds = %.thread
  %v0_13a60 = load i32, i32* @r6, align 4
  store i32 %v0_13a60, i32* @r0, align 4
  %v0_13a64 = call i32 @function_14200()
  br label %dec_label_pc_13a68

dec_label_pc_13a68:                               ; preds = %dec_label_pc_13a10, %dec_label_pc_13a60
  %v0_13a68 = load i32, i32* @r7, align 4
  %v1_13a6c = call i32 @function_135d0(i32 %v0_13a68)
  %v0_13a70 = call i32 @function_13b78()
  store i32 0, i32* @r6, align 4
  %v2_13a7c = inttoptr i32 %v0_13a70 to i32*
  store i32 12, i32* %v2_13a7c, align 4
  br label %dec_label_pc_13a98

dec_label_pc_13a84:                               ; preds = %.thread
  store i32 80536, i32* @lr, align 4
  %v1_13a94 = call i32 @function_14a3c()
  br label %dec_label_pc_13a98

dec_label_pc_13a98:                               ; preds = %.thread1, %dec_label_pc_13a68, %dec_label_pc_139f0, %dec_label_pc_13a84
  %v0_13a98 = load i32, i32* @r6, align 4
  store i32 %v3_139ac, i32* @r4, align 4
  store i32 %v9_139ac, i32* @r6, align 4
  store i32 %v12_139ac, i32* @r7, align 4
  ret i32 %v0_13a98

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_141a8, { 34, 35, 33, 32, 31, 2, 1, 30, 29, 28, 27, 26, 25, 24, 23, 3, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 0 }
  uselistorder i32 512, { 1, 8, 11, 9, 2, 3, 12, 10, 13, 4, 14, 5, 15, 6, 16, 0, 17, 7, 18 }
  uselistorder i32 511, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_135d0, { 20, 19, 18, 11, 36, 32, 35, 31, 34, 33, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 17, 16, 15, 14, 2, 13, 12, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder label %dec_label_pc_13a98, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_13a68, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13aa8(i32* %arg1) local_unnamed_addr {
dec_label_pc_13aa8:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13aa8 = load i32, i32* @r4, align 4
  %v6_13aa8 = load i32, i32* @r5, align 4
  %v9_13aa8 = load i32, i32* @lr, align 4
  %v1_13aac = add i32 %tmp, 24
  store i32 %v1_13aac, i32* @r4, align 4
  %v2_13ab0 = ptrtoint i32* %stack_var_-28 to i32
  store i32 84548, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_13ab0, i32* @r0, align 4
  store i32 %v1_13aac, i32* %r2.global-to-local, align 4
  %v8_13acc = call i32 @function_14a44(i32 %v2_13ab0, i32 ptrtoint (i32* @global_var_14a3c.844 to i32), i32 %v1_13aac, i32 84548, i32 %v3_13aa8, i32 %v6_13aa8, i32 %v9_13aa8)
  %v0_13ad0 = load i32, i32* @r4, align 4
  store i32 %v0_13ad0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14a3c.844 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13ae0.853 to i32), i32* @lr, align 4
  %v1_13adc = call i32 @function_14a3c()
  store i32 %v1_13adc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13ae0

dec_label_pc_13ae0:                               ; preds = %dec_label_pc_13b14, %dec_label_pc_13aa8
  %v0_13ae0 = load i32, i32* @r5, align 4
  %v1_13ae0 = add i32 %v0_13ae0, 4
  %v2_13ae0 = inttoptr i32 %v1_13ae0 to i32*
  %v3_13ae0 = load i32, i32* %v2_13ae0, align 4
  store i32 %v3_13ae0, i32* %r2.global-to-local, align 4
  %v4_13ae0 = add i32 %v0_13ae0, 8
  %v5_13ae0 = inttoptr i32 %v4_13ae0 to i32*
  %v6_13ae0 = load i32, i32* %v5_13ae0, align 4
  store i32 %v6_13ae0, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_13ae0, %v3_13ae0
  br i1 %tmp8, label %dec_label_pc_13b14, label %dec_label_pc_13aec

dec_label_pc_13aec:                               ; preds = %dec_label_pc_13ae0
  %v1_13aec = inttoptr i32 %v0_13ae0 to i32*
  %v2_13aec = load i32, i32* %v1_13aec, align 4
  store i32 %v2_13aec, i32* @r0, align 4
  %v1_13af0 = add i32 %v0_13ae0, 12
  %v2_13af0 = inttoptr i32 %v1_13af0 to i32*
  %v3_13af0 = load i32, i32* %v2_13af0, align 4
  %v1_13af4 = add i32 %v0_13ae0, 20
  %v2_13af4 = inttoptr i32 %v1_13af4 to i32*
  %v3_13af4 = load i32, i32* %v2_13af4, align 4
  store i32 %v3_13af4, i32* @r2, align 4
  %v4_13af8 = call i32 @function_14eb8(i32 %v2_13aec, i32 %v3_13af0, i32 %v3_13af4, i32 %v6_13ae0)
  store i32 %v4_13af8, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_13af8, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_13b08

.thread:                                          ; preds = %dec_label_pc_13aec
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13b48

dec_label_pc_13b08:                               ; preds = %dec_label_pc_13aec
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13b0c = load i32, i32* @r5, align 4
  %v2_13b0c = add i32 %v1_13b0c, 4
  %v3_13b0c = inttoptr i32 %v2_13b0c to i32*
  store i32 0, i32* %v3_13b0c, align 4
  %v1_13b10 = load i32, i32* @r5, align 4
  %v2_13b10 = add i32 %v1_13b10, 8
  %v3_13b10 = inttoptr i32 %v2_13b10 to i32*
  store i32 %v4_13af8, i32* %v3_13b10, align 4
  %v0_13b14.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13b14

dec_label_pc_13b14:                               ; preds = %dec_label_pc_13ae0, %dec_label_pc_13b08
  %v1_13b2c = phi i32 [ %v0_13ae0, %dec_label_pc_13ae0 ], [ %v0_13b14.pre, %dec_label_pc_13b08 ]
  %v1_13b14 = add i32 %v1_13b2c, 4
  %v2_13b14 = inttoptr i32 %v1_13b14 to i32*
  %v3_13b14 = load i32, i32* %v2_13b14, align 4
  store i32 %v3_13b14, i32* %r2.global-to-local, align 4
  %v1_13b18 = add i32 %v1_13b2c, 12
  %v2_13b18 = inttoptr i32 %v1_13b18 to i32*
  %v3_13b18 = load i32, i32* %v2_13b18, align 4
  store i32 %v3_13b18, i32* %ip.global-to-local, align 4
  %v2_13b1c = add i32 %v3_13b18, %v3_13b14
  store i32 %v2_13b1c, i32* @r4, align 4
  %v1_13b20 = add i32 %v2_13b1c, 4
  %v2_13b20 = inttoptr i32 %v1_13b20 to i32*
  %v3_13b20 = load i32, i32* %v2_13b20, align 4
  %v1_13b24 = add i32 %v2_13b1c, 8
  %v2_13b24 = inttoptr i32 %v1_13b24 to i8*
  %v3_13b24 = load i8, i8* %v2_13b24, align 1
  %v4_13b24 = zext i8 %v3_13b24 to i32
  store i32 %v4_13b24, i32* %r3.global-to-local, align 4
  %v1_13b28 = add i32 %v2_13b1c, 9
  %v2_13b28 = inttoptr i32 %v1_13b28 to i8*
  %v3_13b28 = load i8, i8* %v2_13b28, align 1
  %v4_13b28 = zext i8 %v3_13b28 to i32
  store i32 %v4_13b28, i32* %r0.global-to-local, align 4
  %v2_13b2c = add i32 %v1_13b2c, 16
  %v3_13b2c = inttoptr i32 %v2_13b2c to i32*
  store i32 %v3_13b20, i32* %v3_13b2c, align 4
  %v0_13b30 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b30 = load i32, i32* %ip.global-to-local, align 4
  %v2_13b30 = add i32 %v1_13b30, %v0_13b30
  %v3_13b30 = inttoptr i32 %v2_13b30 to i32*
  %v4_13b30 = load i32, i32* %v3_13b30, align 4
  %v0_13b34 = load i32, i32* %r3.global-to-local, align 4
  %v1_13b34 = load i32, i32* %r0.global-to-local, align 4
  %v4_13b34 = mul i32 %v1_13b34, 256
  %v5_13b34 = or i32 %v4_13b34, %v0_13b34
  store i32 %v5_13b34, i32* %r3.global-to-local, align 4
  %v2_13b38 = add i32 %v5_13b34, %v0_13b30
  store i32 %v2_13b38, i32* @r2, align 4
  %v2_13b3c = icmp eq i32 %v4_13b30, 0
  %v1_13b40 = load i32, i32* @r5, align 4
  %v2_13b40 = add i32 %v1_13b40, 4
  %v3_13b40 = inttoptr i32 %v2_13b40 to i32*
  store i32 %v2_13b38, i32* %v3_13b40, align 4
  br i1 %v2_13b3c, label %dec_label_pc_13ae0, label %dec_label_pc_13b48

dec_label_pc_13b48:                               ; preds = %dec_label_pc_13b14, %.thread
  store i32 %v2_13ab0, i32* @r0, align 4
  store i32 84548, i32* %r3.global-to-local, align 4
  store i32 80732, i32* @lr, align 4
  %v3_13b58 = load i32, i32* @r2, align 4
  %v8_13b58 = call i32 @function_14a44(i32 %v2_13ab0, i32 1, i32 %v3_13b58, i32 84548, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13b5c = load i32, i32* @r4, align 4
  store i32 %v0_13b5c, i32* %r0.global-to-local, align 4
  store i32 %v3_13aa8, i32* @r4, align 4
  store i32 %v6_13aa8, i32* @r5, align 4
  ret i32 %v0_13b5c

; uselistorder directives
  uselistorder i32 %v1_13b2c, { 0, 2, 1 }
  uselistorder i32 %v6_13ae0, { 1, 0, 2 }
  uselistorder i32 %v0_13ae0, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_13ab0, { 1, 0, 3, 2 }
  uselistorder i32 %v1_13aac, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_13b14, { 1, 0 }
}

define i32 @function_13b78() local_unnamed_addr {
dec_label_pc_13b78:
  ret i32 ptrtoint (i32* @global_var_1f22c.856 to i32)
}

define i32 @function_13b84(i32 %arg1) local_unnamed_addr {
dec_label_pc_13b84:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_13b90 = bitcast i32* %stack_var_-20 to %tms*
  %v2_13b90 = call i32 @function_15248(%tms* %v1_13b90)
  %v2_13b98 = load i32, i32* %stack_var_-20, align 4
  %v2_13b9c = add i32 %v2_13b98, %tmp
  %v2_13ba4 = mul i32 %v2_13b9c, 10000
  %v1_13ba8 = and i32 %v2_13ba4, 2147483632
  ret i32 %v1_13ba8

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_13bb4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13bb4:
  %v0_13bb4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13bb4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_13bb4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_13bb4, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_13bc0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13bc0:
  %v0_13bc0 = call i32 @function_15650()
  ret i32 %v0_13bc0
}

define i32 @function_13bd0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13bd0:
  %v0_13bd0 = call i32 @function_15650()
  ret i32 %v0_13bd0

; uselistorder directives
  uselistorder i32 ()* @function_15650, { 1, 0 }
}

define i32 @function_13be0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13be0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_13be4 = load i32, i32* @r2, align 4
  %v8_13be4 = icmp eq i32 %v0_13be4, 8
  store i1 %v8_13be4, i1* %cpsr_z.global-to-local, align 1
  %v5_13be8 = icmp slt i32 %v0_13be4, 8
  br i1 %v5_13be8, label %dec_label_pc_13c48, label %dec_label_pc_13bec

dec_label_pc_13bec:                               ; preds = %dec_label_pc_13be0
  %v4_13bec = mul i32 %arg2, 256
  %v5_13bec = or i32 %v4_13bec, %arg2
  %v4_13bf0 = mul i32 %v5_13bec, 65536
  %v5_13bf0 = or i32 %v4_13bf0, %v5_13bec
  store i32 %v5_13bf0, i32* %r1.global-to-local, align 4
  %v1_13bf457 = urem i32 %tmp, 4
  %v2_13bf458 = icmp eq i32 %v1_13bf457, 0
  store i1 %v2_13bf458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_13bf458, label %dec_label_pc_13c04, label %bb

bb:                                               ; preds = %dec_label_pc_13bec, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_13bec ]
  %v3_13bf859 = phi i32 [ %v6_13bf8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_13bec ]
  %v4_13bf8 = inttoptr i32 %v3_13bf859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_13bf8, align 1
  %v5_13bf8 = load i32, i32* %r3.global-to-local, align 4
  %v6_13bf8 = add i32 %v5_13bf8, 1
  store i32 %v6_13bf8, i32* %r3.global-to-local, align 4
  %v0_13bfc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_13c08.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_13bfc.pr, label %dec_label_pc_13c04, label %.thread

.thread:                                          ; preds = %bb
  %v2_13bfc = add i32 %v0_13c08.pr.pre, -1
  store i32 %v2_13bfc, i32* @r2, align 4
  %v1_13bf4 = urem i32 %v6_13bf8, 4
  %v2_13bf4 = icmp eq i32 %v1_13bf4, 0
  store i1 %v2_13bf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13bf4, label %dec_label_pc_13c04, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_13bf8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_13bf8.pre to i8
  br label %bb

dec_label_pc_13c04:                               ; preds = %.thread, %bb, %dec_label_pc_13bec
  %v0_13c1028 = phi i32 [ %tmp, %dec_label_pc_13bec ], [ %v6_13bf8, %bb ], [ %v6_13bf8, %.thread ]
  %v0_13c08.pr = phi i32 [ %v0_13be4, %dec_label_pc_13bec ], [ %v0_13c08.pr.pre, %bb ], [ %v2_13bfc, %.thread ]
  %v0_13c04 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13c04, i32* %ip.global-to-local, align 4
  %v8_13c0810 = icmp eq i32 %v0_13c08.pr, 8
  store i1 %v8_13c0810, i1* %cpsr_z.global-to-local, align 1
  %v5_13c0c11 = icmp slt i32 %v0_13c08.pr, 8
  br i1 %v5_13c0c11, label %dec_label_pc_13c48, label %dec_label_pc_13c10.preheader

dec_label_pc_13c10.preheader:                     ; preds = %dec_label_pc_13c04
  %v1_13c1046 = inttoptr i32 %v0_13c1028 to i32*
  store i32 %v0_13c04, i32* %v1_13c1046, align 4
  %v3_13c1047 = add i32 %v0_13c1028, 4
  %v4_13c1048 = inttoptr i32 %v3_13c1047 to i32*
  %v5_13c1049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13c1049, i32* %v4_13c1048, align 4
  %v6_13c1050 = add i32 %v0_13c1028, 8
  store i32 %v6_13c1050, i32* %r3.global-to-local, align 4
  %v0_13c1451 = load i32, i32* @r2, align 4
  %v1_13c1452 = add i32 %v0_13c1451, -8
  store i32 %v1_13c1452, i32* %r2.global-to-local, align 4
  %v5_13c1c53 = icmp slt i32 %v1_13c1452, 8
  br i1 %v5_13c1c53, label %dec_label_pc_13c10.dec_label_pc_13c48.loopexit_crit_edge, label %dec_label_pc_13c20

dec_label_pc_13c20:                               ; preds = %dec_label_pc_13c10.preheader, %dec_label_pc_13c08.dec_label_pc_13c10_crit_edge
  %v6_13c1055 = phi i32 [ %v6_13c10, %dec_label_pc_13c08.dec_label_pc_13c10_crit_edge ], [ %v6_13c1050, %dec_label_pc_13c10.preheader ]
  %v0_13c1054 = phi i32 [ %v12_13c3c, %dec_label_pc_13c08.dec_label_pc_13c10_crit_edge ], [ %v0_13c1028, %dec_label_pc_13c10.preheader ]
  %v1_13c20 = inttoptr i32 %v6_13c1055 to i32*
  %v2_13c20 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13c20, i32* %v1_13c20, align 4
  %v3_13c20 = add i32 %v0_13c1054, 12
  %v4_13c20 = inttoptr i32 %v3_13c20 to i32*
  %v5_13c20 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13c20, i32* %v4_13c20, align 4
  %v6_13c20 = add i32 %v0_13c1054, 16
  store i32 %v6_13c20, i32* %r3.global-to-local, align 4
  %v0_13c24 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c24 = add i32 %v0_13c24, -8
  store i32 %v1_13c24, i32* %r2.global-to-local, align 4
  %v5_13c2c = icmp slt i32 %v1_13c24, 8
  br i1 %v5_13c2c, label %dec_label_pc_13c20.dec_label_pc_13c48.loopexit_crit_edge, label %dec_label_pc_13c30

dec_label_pc_13c30:                               ; preds = %dec_label_pc_13c20
  %v1_13c30 = inttoptr i32 %v6_13c20 to i32*
  %v2_13c30 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13c30, i32* %v1_13c30, align 4
  %v3_13c30 = add i32 %v0_13c1054, 20
  %v4_13c30 = inttoptr i32 %v3_13c30 to i32*
  %v5_13c30 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13c30, i32* %v4_13c30, align 4
  %v6_13c30 = add i32 %v0_13c1054, 24
  store i32 %v6_13c30, i32* %r3.global-to-local, align 4
  %v0_13c34 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c34 = add i32 %v0_13c34, -8
  store i32 %v1_13c34, i32* %r2.global-to-local, align 4
  %v5_13c3c = icmp slt i32 %v1_13c34, 8
  br i1 %v5_13c3c, label %dec_label_pc_13c30.dec_label_pc_13c48.loopexit_crit_edge, label %dec_label_pc_13c08

dec_label_pc_13c08:                               ; preds = %dec_label_pc_13c30
  %v7_13c3c = inttoptr i32 %v6_13c30 to i32*
  %v8_13c3c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_13c3c, i32* %v7_13c3c, align 4
  %v9_13c3c = add i32 %v0_13c1054, 28
  %v10_13c3c = inttoptr i32 %v9_13c3c to i32*
  %v11_13c3c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_13c3c, i32* %v10_13c3c, align 4
  %v12_13c3c = add i32 %v0_13c1054, 32
  store i32 %v12_13c3c, i32* %r3.global-to-local, align 4
  %v6_13c40 = load i32, i32* %r2.global-to-local, align 4
  %v7_13c40 = add i32 %v6_13c40, -8
  store i32 %v7_13c40, i32* %r2.global-to-local, align 4
  %v5_13c0c = icmp slt i32 %v7_13c40, 8
  br i1 %v5_13c0c, label %dec_label_pc_13c08.dec_label_pc_13c48.loopexit_crit_edge, label %dec_label_pc_13c08.dec_label_pc_13c10_crit_edge

dec_label_pc_13c08.dec_label_pc_13c10_crit_edge:  ; preds = %dec_label_pc_13c08
  %v2_13c10.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13c10 = inttoptr i32 %v12_13c3c to i32*
  store i32 %v2_13c10.pre, i32* %v1_13c10, align 4
  %v3_13c10 = add i32 %v0_13c1054, 36
  %v4_13c10 = inttoptr i32 %v3_13c10 to i32*
  %v5_13c10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13c10, i32* %v4_13c10, align 4
  %v6_13c10 = add i32 %v0_13c1054, 40
  store i32 %v6_13c10, i32* %r3.global-to-local, align 4
  %v0_13c14 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c14 = add i32 %v0_13c14, -8
  store i32 %v1_13c14, i32* %r2.global-to-local, align 4
  %v5_13c1c = icmp slt i32 %v1_13c14, 8
  br i1 %v5_13c1c, label %dec_label_pc_13c10.dec_label_pc_13c48.loopexit_crit_edge, label %dec_label_pc_13c20

dec_label_pc_13c10.dec_label_pc_13c48.loopexit_crit_edge: ; preds = %dec_label_pc_13c08.dec_label_pc_13c10_crit_edge, %dec_label_pc_13c10.preheader
  %v1_13c14.lcssa = phi i32 [ %v1_13c1452, %dec_label_pc_13c10.preheader ], [ %v1_13c14, %dec_label_pc_13c08.dec_label_pc_13c10_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13c48

dec_label_pc_13c08.dec_label_pc_13c48.loopexit_crit_edge: ; preds = %dec_label_pc_13c08
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13c48

dec_label_pc_13c20.dec_label_pc_13c48.loopexit_crit_edge: ; preds = %dec_label_pc_13c20
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13c48

dec_label_pc_13c30.dec_label_pc_13c48.loopexit_crit_edge: ; preds = %dec_label_pc_13c30
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13c48

dec_label_pc_13c48:                               ; preds = %dec_label_pc_13c04, %dec_label_pc_13c10.dec_label_pc_13c48.loopexit_crit_edge, %dec_label_pc_13c08.dec_label_pc_13c48.loopexit_crit_edge, %dec_label_pc_13c20.dec_label_pc_13c48.loopexit_crit_edge, %dec_label_pc_13c30.dec_label_pc_13c48.loopexit_crit_edge, %dec_label_pc_13be0
  %v0_13c50 = phi i32 [ %v0_13be4, %dec_label_pc_13be0 ], [ %v1_13c34, %dec_label_pc_13c30.dec_label_pc_13c48.loopexit_crit_edge ], [ %v1_13c24, %dec_label_pc_13c20.dec_label_pc_13c48.loopexit_crit_edge ], [ %v7_13c40, %dec_label_pc_13c08.dec_label_pc_13c48.loopexit_crit_edge ], [ %v1_13c14.lcssa, %dec_label_pc_13c10.dec_label_pc_13c48.loopexit_crit_edge ], [ %v0_13c08.pr, %dec_label_pc_13c04 ]
  %v2_13c48 = icmp eq i32 %v0_13c50, 0
  store i1 %v2_13c48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13c48, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_13c48
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_13c48
  %v1_13c50 = sub i32 7, %v0_13c50
  store i32 %v1_13c50, i32* %r2.global-to-local, align 4
  %v3_13c54 = mul i32 %v1_13c50, 4
  %v4_13c54 = add i32 %v3_13c54, ptrtoint (i32* @global_var_13c5c.858 to i32)
  call void @__pseudo_branch(i32 %v4_13c54)
  %v0_13c5c = load i32, i32* %r1.global-to-local, align 4
  %v1_13c5c = trunc i32 %v0_13c5c to i8
  %v2_13c5c = load i32, i32* %r3.global-to-local, align 4
  %v3_13c5c = inttoptr i32 %v2_13c5c to i8*
  store i8 %v1_13c5c, i8* %v3_13c5c, align 1
  %v4_13c5c = load i32, i32* %r3.global-to-local, align 4
  %v5_13c5c = add i32 %v4_13c5c, 1
  store i32 %v5_13c5c, i32* %r3.global-to-local, align 4
  %v0_13c60 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c60 = trunc i32 %v0_13c60 to i8
  %v3_13c60 = inttoptr i32 %v5_13c5c to i8*
  store i8 %v1_13c60, i8* %v3_13c60, align 1
  %v4_13c60 = load i32, i32* %r3.global-to-local, align 4
  %v5_13c60 = add i32 %v4_13c60, 1
  store i32 %v5_13c60, i32* %r3.global-to-local, align 4
  %v0_13c64 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c64 = trunc i32 %v0_13c64 to i8
  %v3_13c64 = inttoptr i32 %v5_13c60 to i8*
  store i8 %v1_13c64, i8* %v3_13c64, align 1
  %v4_13c64 = load i32, i32* %r3.global-to-local, align 4
  %v5_13c64 = add i32 %v4_13c64, 1
  store i32 %v5_13c64, i32* %r3.global-to-local, align 4
  %v0_13c68 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c68 = trunc i32 %v0_13c68 to i8
  %v3_13c68 = inttoptr i32 %v5_13c64 to i8*
  store i8 %v1_13c68, i8* %v3_13c68, align 1
  %v4_13c68 = load i32, i32* %r3.global-to-local, align 4
  %v5_13c68 = add i32 %v4_13c68, 1
  store i32 %v5_13c68, i32* %r3.global-to-local, align 4
  %v0_13c6c = load i32, i32* %r1.global-to-local, align 4
  %v1_13c6c = trunc i32 %v0_13c6c to i8
  %v3_13c6c = inttoptr i32 %v5_13c68 to i8*
  store i8 %v1_13c6c, i8* %v3_13c6c, align 1
  %v4_13c6c = load i32, i32* %r3.global-to-local, align 4
  %v5_13c6c = add i32 %v4_13c6c, 1
  store i32 %v5_13c6c, i32* %r3.global-to-local, align 4
  %v0_13c70 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c70 = trunc i32 %v0_13c70 to i8
  %v3_13c70 = inttoptr i32 %v5_13c6c to i8*
  store i8 %v1_13c70, i8* %v3_13c70, align 1
  %v4_13c70 = load i32, i32* %r3.global-to-local, align 4
  %v5_13c70 = add i32 %v4_13c70, 1
  store i32 %v5_13c70, i32* %r3.global-to-local, align 4
  %v0_13c74 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c74 = trunc i32 %v0_13c74 to i8
  %v3_13c74 = inttoptr i32 %v5_13c70 to i8*
  store i8 %v1_13c74, i8* %v3_13c74, align 1
  %v4_13c74 = load i32, i32* %r3.global-to-local, align 4
  %v5_13c74 = add i32 %v4_13c74, 1
  store i32 %v5_13c74, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_13c10, { 1, 0 }
  uselistorder i32 %v12_13c3c, { 1, 2, 0 }
  uselistorder i32 %v0_13c1054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_13c08.pr, { 0, 2, 1 }
  uselistorder i32 %v6_13bf8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_13bec, { 1, 0 }
  uselistorder i32 %v0_13be4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13c48, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_13c20, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_13c80(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_13c80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_13c80 = sub i32 %arg1, %tmp
  %v1_13c84 = add i32 %v2_13c80, -1
  store i32 %v1_13c84, i32* %r2.global-to-local, align 4
  %v2_13c884 = load i8, i8* %arg2, align 1
  %v5_13c886 = add i32 %tmp, 1
  store i32 %v5_13c886, i32* %r1.global-to-local, align 4
  %v2_13c8c7 = icmp eq i8 %v2_13c884, 0
  store i1 %v2_13c8c7, i1* %cpsr_z.global-to-local, align 1
  %v5_13c908 = inttoptr i32 %arg1 to i8*
  store i8 %v2_13c884, i8* %v5_13c908, align 1
  %v0_13c949 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13c949, label %dec_label_pc_13c98, label %dec_label_pc_13c88.dec_label_pc_13c88_crit_edge

dec_label_pc_13c88.dec_label_pc_13c88_crit_edge:  ; preds = %dec_label_pc_13c80, %dec_label_pc_13c88.dec_label_pc_13c88_crit_edge
  %v0_13c88.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_13c90.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13c88 = inttoptr i32 %v0_13c88.pre to i8*
  %v2_13c88 = load i8, i8* %v1_13c88, align 1
  %v5_13c88 = add i32 %v0_13c88.pre, 1
  store i32 %v5_13c88, i32* %r1.global-to-local, align 4
  %v2_13c8c = icmp eq i8 %v2_13c88, 0
  store i1 %v2_13c8c, i1* %cpsr_z.global-to-local, align 1
  %v4_13c90 = add i32 %v5_13c88, %v3_13c90.pre
  %v5_13c90 = inttoptr i32 %v4_13c90 to i8*
  store i8 %v2_13c88, i8* %v5_13c90, align 1
  %v0_13c94 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13c94, label %dec_label_pc_13c98, label %dec_label_pc_13c88.dec_label_pc_13c88_crit_edge

dec_label_pc_13c98:                               ; preds = %dec_label_pc_13c88.dec_label_pc_13c88_crit_edge, %dec_label_pc_13c80
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 2, 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c88.dec_label_pc_13c88_crit_edge, { 1, 0 }
}

define i32 @function_13c9c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13c9c:
  %stack_var_-8 = alloca i32, align 4
  %v2_13ca0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_13ca0, i32* @r1, align 4
  %v0_13ca8 = call i32 @function_15ae0()
  %v2_13cac = icmp eq i32 %v0_13ca8, 0
  br i1 %v2_13cac, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13c9c
  %v3_13cb4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13c9c, %bb
  %v5_13cbc = phi i32 [ -1, %dec_label_pc_13c9c ], [ %v3_13cb4, %bb ]
  ret i32 %v5_13cbc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13cc0(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13cc0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13cc0 = load i32, i32* @r4, align 4
  store i32 %v3_13cc0, i32* %stack_var_-8, align 4
  %v5_13cc4 = inttoptr i32 %arg3 to i32*
  %v6_13cc4 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_13cc4)
  store i32 %v6_13cc4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13cc4, -4095
  br i1 %tmp, label %dec_label_pc_13ce4, label %dec_label_pc_13cd4

dec_label_pc_13cd4:                               ; preds = %dec_label_pc_13cc0
  %v0_13cd4 = call i32 @function_13b78()
  %v0_13cd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13cd8 = sub i32 0, %v0_13cd8
  %v2_13cdc = inttoptr i32 %v0_13cd4 to i32*
  store i32 %v1_13cd8, i32* %v2_13cdc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ce4

dec_label_pc_13ce4:                               ; preds = %dec_label_pc_13cc0, %dec_label_pc_13cd4
  %v0_13ce4 = phi i32 [ %v6_13cc4, %dec_label_pc_13cc0 ], [ -1, %dec_label_pc_13cd4 ]
  %v2_13ce8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13ce8, i32* @r4, align 4
  ret i32 %v0_13ce4

; uselistorder directives
  uselistorder i32 %v6_13cc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ce4, { 1, 0 }
}

define i32 @function_13cec(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13cec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13cec = load i32, i32* @r4, align 4
  store i32 %v3_13cec, i32* %stack_var_-8, align 4
  %v5_13cf0 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13cf0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13cf0, -4095
  br i1 %tmp, label %dec_label_pc_13d10, label %dec_label_pc_13d00

dec_label_pc_13d00:                               ; preds = %dec_label_pc_13cec
  %v0_13d00 = call i32 @function_13b78()
  %v0_13d04 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d04 = sub i32 0, %v0_13d04
  %v2_13d08 = inttoptr i32 %v0_13d00 to i32*
  store i32 %v1_13d04, i32* %v2_13d08, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d10

dec_label_pc_13d10:                               ; preds = %dec_label_pc_13cec, %dec_label_pc_13d00
  %v0_13d10 = phi i32 [ %v5_13cf0, %dec_label_pc_13cec ], [ -1, %dec_label_pc_13d00 ]
  %v2_13d14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d14, i32* @r4, align 4
  ret i32 %v0_13d10

; uselistorder directives
  uselistorder i32 %v5_13cf0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d10, { 1, 0 }
}

define i32 @function_13d18(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13d18:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d18 = load i32, i32* @r4, align 4
  store i32 %v3_13d18, i32* %stack_var_-8, align 4
  %v5_13d1c = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13d1c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d1c, -4095
  br i1 %tmp, label %dec_label_pc_13d3c, label %dec_label_pc_13d2c

dec_label_pc_13d2c:                               ; preds = %dec_label_pc_13d18
  %v0_13d2c = call i32 @function_13b78()
  %v0_13d30 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d30 = sub i32 0, %v0_13d30
  %v2_13d34 = inttoptr i32 %v0_13d2c to i32*
  store i32 %v1_13d30, i32* %v2_13d34, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d3c

dec_label_pc_13d3c:                               ; preds = %dec_label_pc_13d18, %dec_label_pc_13d2c
  %v0_13d3c = phi i32 [ %v5_13d1c, %dec_label_pc_13d18 ], [ -1, %dec_label_pc_13d2c ]
  %v2_13d40 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d40, i32* @r4, align 4
  ret i32 %v0_13d3c

; uselistorder directives
  uselistorder i32 %v5_13d1c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d3c, { 1, 0 }
}

define i32 @function_13d44(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13d44:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d44 = load i32, i32* @r4, align 4
  store i32 %v3_13d44, i32* %stack_var_-8, align 4
  %v5_13d48 = inttoptr i32 %arg3 to i32*
  %v6_13d48 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_13d48)
  store i32 %v6_13d48, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13d48, -4095
  br i1 %tmp, label %dec_label_pc_13d68, label %dec_label_pc_13d58

dec_label_pc_13d58:                               ; preds = %dec_label_pc_13d44
  %v0_13d58 = call i32 @function_13b78()
  %v0_13d5c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d5c = sub i32 0, %v0_13d5c
  %v2_13d60 = inttoptr i32 %v0_13d58 to i32*
  store i32 %v1_13d5c, i32* %v2_13d60, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d68

dec_label_pc_13d68:                               ; preds = %dec_label_pc_13d44, %dec_label_pc_13d58
  %v0_13d68 = phi i32 [ %v6_13d48, %dec_label_pc_13d44 ], [ -1, %dec_label_pc_13d58 ]
  %v2_13d6c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d6c, i32* @r4, align 4
  ret i32 %v0_13d68

; uselistorder directives
  uselistorder i32 %v6_13d48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d68, { 1, 0 }
}

define i32 @function_13d70(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13d70:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d70 = load i32, i32* @r4, align 4
  store i32 %v3_13d70, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13d78 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_13d78, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d78, -4095
  br i1 %tmp, label %dec_label_pc_13d98, label %dec_label_pc_13d88

dec_label_pc_13d88:                               ; preds = %dec_label_pc_13d70
  %v0_13d88 = call i32 @function_13b78()
  %v0_13d8c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d8c = sub i32 0, %v0_13d8c
  %v2_13d90 = inttoptr i32 %v0_13d88 to i32*
  store i32 %v1_13d8c, i32* %v2_13d90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d98

dec_label_pc_13d98:                               ; preds = %dec_label_pc_13d70, %dec_label_pc_13d88
  %v0_13d98 = phi i32 [ %v5_13d78, %dec_label_pc_13d70 ], [ -1, %dec_label_pc_13d88 ]
  %v2_13d9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d9c, i32* @r4, align 4
  ret i32 %v0_13d98

; uselistorder directives
  uselistorder i32 %v5_13d78, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d98, { 1, 0 }
}

define i32 @function_13da0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13da0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13da0 = load i32, i32* @r4, align 4
  store i32 %v3_13da0, i32* %stack_var_-8, align 4
  %v2_13da4 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_13da4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13da4, -4095
  br i1 %tmp, label %dec_label_pc_13dc4, label %dec_label_pc_13db4

dec_label_pc_13db4:                               ; preds = %dec_label_pc_13da0
  %v0_13db4 = call i32 @function_13b78()
  %v0_13db8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13db8 = sub i32 0, %v0_13db8
  %v2_13dbc = inttoptr i32 %v0_13db4 to i32*
  store i32 %v1_13db8, i32* %v2_13dbc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13dc4

dec_label_pc_13dc4:                               ; preds = %dec_label_pc_13da0, %dec_label_pc_13db4
  %v0_13dc4 = phi i32 [ %v2_13da4, %dec_label_pc_13da0 ], [ -1, %dec_label_pc_13db4 ]
  %v2_13dc8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13dc8, i32* @r4, align 4
  ret i32 %v0_13dc4

; uselistorder directives
  uselistorder i32 %v2_13da4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13dc4, { 1, 0 }
}

define i32 @function_13dcc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13dcc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13dcc = load i32, i32* @r4, align 4
  store i32 %v3_13dcc, i32* %stack_var_-8, align 4
  %v5_13dd0 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13dd0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13dd0, -4095
  br i1 %tmp, label %dec_label_pc_13df0, label %dec_label_pc_13de0

dec_label_pc_13de0:                               ; preds = %dec_label_pc_13dcc
  %v0_13de0 = call i32 @function_13b78()
  %v0_13de4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13de4 = sub i32 0, %v0_13de4
  %v2_13de8 = inttoptr i32 %v0_13de0 to i32*
  store i32 %v1_13de4, i32* %v2_13de8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13df0

dec_label_pc_13df0:                               ; preds = %dec_label_pc_13dcc, %dec_label_pc_13de0
  %v0_13df0 = phi i32 [ %v5_13dd0, %dec_label_pc_13dcc ], [ -1, %dec_label_pc_13de0 ]
  %v2_13df4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13df4, i32* @r4, align 4
  ret i32 %v0_13df0

; uselistorder directives
  uselistorder i32 %v5_13dd0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13df0, { 1, 0 }
}

define i32 @function_13df8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13df8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13df8 = load i32, i32* @r4, align 4
  store i32 %v3_13df8, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13e04 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_13e04, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e04, -4095
  br i1 %tmp, label %dec_label_pc_13e24, label %dec_label_pc_13e14

dec_label_pc_13e14:                               ; preds = %dec_label_pc_13df8
  %v0_13e14 = call i32 @function_13b78()
  %v0_13e18 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e18 = sub i32 0, %v0_13e18
  %v2_13e1c = inttoptr i32 %v0_13e14 to i32*
  store i32 %v1_13e18, i32* %v2_13e1c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e24

dec_label_pc_13e24:                               ; preds = %dec_label_pc_13df8, %dec_label_pc_13e14
  %v0_13e24 = phi i32 [ %v5_13e04, %dec_label_pc_13df8 ], [ -1, %dec_label_pc_13e14 ]
  %v2_13e28 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13e28, i32* @r4, align 4
  ret i32 %v0_13e24

; uselistorder directives
  uselistorder i32 %v5_13e04, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e24, { 1, 0 }
}

define i32 @function_13e2c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13e2c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e2c = load i32, i32* @r4, align 4
  store i32 %v3_13e2c, i32* %stack_var_-8, align 4
  %v5_13e30 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13e30, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e30, -4095
  br i1 %tmp, label %dec_label_pc_13e50, label %dec_label_pc_13e40

dec_label_pc_13e40:                               ; preds = %dec_label_pc_13e2c
  %v0_13e40 = call i32 @function_13b78()
  %v0_13e44 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e44 = sub i32 0, %v0_13e44
  %v2_13e48 = inttoptr i32 %v0_13e40 to i32*
  store i32 %v1_13e44, i32* %v2_13e48, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e50

dec_label_pc_13e50:                               ; preds = %dec_label_pc_13e2c, %dec_label_pc_13e40
  %v0_13e50 = phi i32 [ %v5_13e30, %dec_label_pc_13e2c ], [ -1, %dec_label_pc_13e40 ]
  %v2_13e54 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e54, i32* @r4, align 4
  ret i32 %v0_13e50

; uselistorder directives
  uselistorder i32 %v5_13e30, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e50, { 1, 0 }
}

define i32 @function_13e58(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13e58:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13e58 = load i32, i32* @r4, align 4
  store i32 %v3_13e58, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13e64 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_13e64, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e64, -4095
  br i1 %tmp, label %dec_label_pc_13e84, label %dec_label_pc_13e74

dec_label_pc_13e74:                               ; preds = %dec_label_pc_13e58
  %v0_13e74 = call i32 @function_13b78()
  %v0_13e78 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e78 = sub i32 0, %v0_13e78
  %v2_13e7c = inttoptr i32 %v0_13e74 to i32*
  store i32 %v1_13e78, i32* %v2_13e7c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e84

dec_label_pc_13e84:                               ; preds = %dec_label_pc_13e58, %dec_label_pc_13e74
  %v0_13e84 = phi i32 [ %v5_13e64, %dec_label_pc_13e58 ], [ -1, %dec_label_pc_13e74 ]
  %v2_13e88 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13e88, i32* @r4, align 4
  ret i32 %v0_13e84

; uselistorder directives
  uselistorder i32 %v5_13e64, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e84, { 1, 0 }
}

define i32 @function_13e8c(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13e8c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e8c = load i32, i32* @r4, align 4
  store i32 %v3_13e8c, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13e94 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_13e94, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e94, -4095
  br i1 %tmp, label %dec_label_pc_13eb4, label %dec_label_pc_13ea4

dec_label_pc_13ea4:                               ; preds = %dec_label_pc_13e8c
  %v0_13ea4 = call i32 @function_13b78()
  %v0_13ea8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ea8 = sub i32 0, %v0_13ea8
  %v2_13eac = inttoptr i32 %v0_13ea4 to i32*
  store i32 %v1_13ea8, i32* %v2_13eac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13eb4

dec_label_pc_13eb4:                               ; preds = %dec_label_pc_13e8c, %dec_label_pc_13ea4
  %v0_13eb4 = phi i32 [ %v5_13e94, %dec_label_pc_13e8c ], [ -1, %dec_label_pc_13ea4 ]
  %v2_13eb8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13eb8, i32* @r4, align 4
  ret i32 %v0_13eb4

; uselistorder directives
  uselistorder i32 %v5_13e94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13eb4, { 1, 0 }
}

define i32 @function_13ebc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13ebc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ebc = load i32, i32* @r4, align 4
  store i32 %v3_13ebc, i32* %stack_var_-8, align 4
  %v3_13ec0 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_13ec0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13ec0, -4095
  br i1 %tmp, label %dec_label_pc_13ee0, label %dec_label_pc_13ed0

dec_label_pc_13ed0:                               ; preds = %dec_label_pc_13ebc
  %v0_13ed0 = call i32 @function_13b78()
  %v0_13ed4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ed4 = sub i32 0, %v0_13ed4
  %v2_13ed8 = inttoptr i32 %v0_13ed0 to i32*
  store i32 %v1_13ed4, i32* %v2_13ed8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ee0

dec_label_pc_13ee0:                               ; preds = %dec_label_pc_13ebc, %dec_label_pc_13ed0
  %v0_13ee0 = phi i32 [ %v3_13ec0, %dec_label_pc_13ebc ], [ -1, %dec_label_pc_13ed0 ]
  %v2_13ee4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13ee4, i32* @r4, align 4
  ret i32 %v0_13ee0

; uselistorder directives
  uselistorder i32 %v3_13ec0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ee0, { 1, 0 }
}

define i32 @function_13ee8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13ee8:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_13f04, label %dec_label_pc_13ef4

dec_label_pc_13ef4:                               ; preds = %dec_label_pc_13ee8
  %v8_13ef8 = icmp sgt i32 %arg1, 64
  br i1 %v8_13ef8, label %dec_label_pc_13f04, label %dec_label_pc_13efc

dec_label_pc_13efc:                               ; preds = %dec_label_pc_13ef4
  %v0_13f00 = call i32 @function_1400c()
  br label %dec_label_pc_13f04

dec_label_pc_13f04:                               ; preds = %dec_label_pc_13ef4, %dec_label_pc_13ee8, %dec_label_pc_13efc
  %v0_13f04 = call i32 @function_13b78()
  %v2_13f0c = inttoptr i32 %v0_13f04 to i32*
  store i32 22, i32* %v2_13f0c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f04, { 2, 0, 1 }
}

define i32 @function_13f18(i32 %arg1) local_unnamed_addr {
dec_label_pc_13f18:
  store i32 128, i32* @r2, align 4
  %v0_13f24 = load i32, i32* @r0, align 4
  %v2_13f24 = inttoptr i32 %v0_13f24 to i8*
  %v3_13f24 = call i32 @function_13be0(i8* %v2_13f24, i32 0)
  ret i32 0
}

define i32 @function_13f30(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f30:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13f30 = load i32, i32* @r4, align 4
  store i32 %v3_13f30, i32* %stack_var_-12, align 4
  %v6_13f30 = load i32, i32* @r5, align 4
  %v10_13f30 = ptrtoint i32* %stack_var_-12 to i32
  %v7_13f34 = icmp eq i32 %arg2, -1
  %v0_13f40.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_13f34, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13f30
  br label %dec_label_pc_13f58

bb:                                               ; preds = %dec_label_pc_13f30
  %v2_13f3c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_13f40.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_13f40.pre, 1
  br i1 %tmp19, label %dec_label_pc_13f58, label %dec_label_pc_13f48

dec_label_pc_13f48:                               ; preds = %bb
  %v7_13f4c = icmp sgt i32 %v0_13f40.pre, 64
  br i1 %v7_13f4c, label %dec_label_pc_13f58, label %bb20

bb20:                                             ; preds = %dec_label_pc_13f48
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_13f7c24 = add i32 %v10_13f30, 124
  store i32 %v5_13f7c24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13f6c

dec_label_pc_13f58:                               ; preds = %.thread, %dec_label_pc_13f48, %bb
  %v0_13f58 = call i32 @function_13b78()
  store i32 %v0_13f58, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13f64 = inttoptr i32 %v0_13f58 to i32*
  store i32 22, i32* %v2_13f64, align 4
  %v0_13fd8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13fd8

dec_label_pc_13f6c:                               ; preds = %bb20, %dec_label_pc_13f6c
  %v5_13f7c25 = phi i32 [ %v5_13f7c24, %bb20 ], [ %v5_13f7c, %dec_label_pc_13f6c ]
  %v2_13f70 = add i32 %v5_13f7c25, -136
  %v3_13f70 = inttoptr i32 %v2_13f70 to i32*
  store i32 0, i32* %v3_13f70, align 4
  %v0_13f74.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_13f74 = add i32 %v0_13f74.pre, -1
  store i32 %v1_13f74, i32* %r0.global-to-local, align 4
  %v6_13f74 = icmp slt i32 %v1_13f74, 0
  %v4_13f7c = mul i32 %v1_13f74, 4
  %v5_13f7c = add i32 %v4_13f7c, %v10_13f30
  store i32 %v5_13f7c, i32* %r2.global-to-local, align 4
  br i1 %v6_13f74, label %dec_label_pc_13f84, label %dec_label_pc_13f6c

dec_label_pc_13f84:                               ; preds = %dec_label_pc_13f6c
  %v2_13f84 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_13f84, i32* @r5, align 4
  %v2_13f88 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_13f88, i32* @r0, align 4
  %v0_13f8c = load i32, i32* @r4, align 4
  store i32 %v0_13f8c, i32* @r1, align 4
  %v0_13f90 = call i32 @function_1400c()
  store i32 %v0_13f90, i32* %r0.global-to-local, align 4
  %v1_13f94 = icmp slt i32 %v0_13f90, 0
  br i1 %v1_13f94, label %dec_label_pc_13fd4, label %dec_label_pc_13f9c

dec_label_pc_13f9c:                               ; preds = %dec_label_pc_13f84
  %v0_13f9c = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f438.860 to i32), i32* %r0.global-to-local, align 4
  %v2_13fa4 = call i32 @function_13fe8(i32 ptrtoint (i32* @global_var_1f438.860 to i32), i32 %v0_13f9c)
  store i32 %v2_13f3c, i32* %r2.global-to-local, align 4
  %v0_13fbc = load i32, i32* @r4, align 4
  store i32 %v0_13fbc, i32* %r0.global-to-local, align 4
  %v4_13fc4 = call i32 @function_14d28(i32 %v0_13fbc, i32* nonnull %stack_var_-152, i32 %v2_13f3c)
  store i32 %v4_13fc4, i32* %r0.global-to-local, align 4
  %v1_13fc8 = icmp slt i32 %v4_13fc4, 0
  br i1 %v1_13fc8, label %dec_label_pc_13fd4, label %bb23

bb23:                                             ; preds = %dec_label_pc_13f9c
  %v5_13fcc = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_13fcc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13fd8

dec_label_pc_13fd4:                               ; preds = %dec_label_pc_13f9c, %dec_label_pc_13f84
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13fd8

dec_label_pc_13fd8:                               ; preds = %bb23, %dec_label_pc_13f58, %dec_label_pc_13fd4
  %v0_13fd8 = phi i32 [ %v5_13fcc, %bb23 ], [ %v0_13fd8.pre, %dec_label_pc_13f58 ], [ -1, %dec_label_pc_13fd4 ]
  store i32 %v0_13fd8, i32* %r0.global-to-local, align 4
  %v2_13fe0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13fe0, i32* @r4, align 4
  store i32 %v6_13f30, i32* @r5, align 4
  ret i32 %v0_13fd8

; uselistorder directives
  uselistorder i32 %v0_13fd8, { 1, 0 }
  uselistorder i32 %v5_13f7c, { 1, 0 }
  uselistorder i32 %v1_13f74, { 0, 2, 1 }
  uselistorder i32 %v2_13f3c, { 1, 0 }
  uselistorder i32 %v0_13f40.pre, { 1, 0, 2 }
  uselistorder i32 %v10_13f30, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_13fd8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13f6c, { 1, 0 }
  uselistorder label %dec_label_pc_13f58, { 1, 2, 0 }
}

define i32 @function_13fe8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13fe8:
  %v1_13fe8 = add i32 %arg2, -1
  %v3_13fec = udiv i32 %v1_13fe8, 32
  %v4_13ff0 = mul nuw nsw i32 %v3_13fec, 4
  %v5_13ff0 = add i32 %v4_13ff0, %arg1
  %v6_13ff0 = inttoptr i32 %v5_13ff0 to i32*
  %v7_13ff0 = load i32, i32* %v6_13ff0, align 4
  %v1_13ff4 = urem i32 %v1_13fe8, 32
  %v7_13ffc = shl i32 1, %v1_13ff4
  %v8_13ffc = and i32 %v7_13ff0, %v7_13ffc
  %v10_13ffc = icmp ne i32 %v8_13ffc, 0
  %. = zext i1 %v10_13ffc to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_13fe8, { 1, 0 }
}

define i32 @function_1400c() local_unnamed_addr {
dec_label_pc_1400c:
  %v0_1400c = load i32, i32* @r1, align 4
  %v1_1400c = add i32 %v0_1400c, -1
  %v3_14010 = udiv i32 %v1_1400c, 32
  %v0_14014 = load i32, i32* @r0, align 4
  %v4_14014 = mul nuw nsw i32 %v3_14010, 4
  %v5_14014 = add i32 %v0_14014, %v4_14014
  %v6_14014 = inttoptr i32 %v5_14014 to i32*
  %v7_14014 = load i32, i32* %v6_14014, align 4
  %v1_14018 = urem i32 %v1_1400c, 32
  %v7_14020 = shl i32 1, %v1_14018
  %v8_14020 = or i32 %v7_14014, %v7_14020
  store i32 %v8_14020, i32* %v6_14014, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1400c, { 1, 0 }
}

define i32 @function_14030(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14030:
  %v1_14030 = add i32 %arg2, -1
  %v3_14034 = udiv i32 %v1_14030, 32
  %v4_14038 = mul nuw nsw i32 %v3_14034, 4
  %v5_14038 = add i32 %v4_14038, %arg1
  %v6_14038 = inttoptr i32 %v5_14038 to i32*
  %v7_14038 = load i32, i32* %v6_14038, align 4
  %v1_1403c = urem i32 %v1_14030, 32
  %tmp = shl i32 -1, %v1_1403c
  %v8_14044 = add i32 %tmp, -1
  %v9_14044 = and i32 %v7_14038, %v8_14044
  store i32 %v9_14044, i32* %v6_14038, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_14030, { 1, 0 }
}

define i32 @function_14054(i32 %arg1) local_unnamed_addr {
dec_label_pc_14054:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14054 = load i32, i32* @r4, align 4
  %v6_14054 = load i32, i32* @r5, align 4
  %v9_14054 = load i32, i32* @r6, align 4
  %v0_14058 = load i32, i32* %r0.global-to-local, align 4
  %v2_14058 = icmp eq i32 %v0_14058, 0
  %v2_1405c = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_14058, label %bb, label %dec_label_pc_14068

bb:                                               ; preds = %dec_label_pc_14054
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14070

dec_label_pc_14068:                               ; preds = %dec_label_pc_14054
  %tmp = icmp ugt i32 %v0_14058, -8
  br i1 %tmp, label %dec_label_pc_14174, label %dec_label_pc_14070

dec_label_pc_14070:                               ; preds = %bb, %dec_label_pc_14068
  %v0_14070 = phi i32 [ %v0_14058, %dec_label_pc_14068 ], [ 1, %bb ]
  %v1_14070 = add i32 %v0_14070, 4
  store i32 %v1_14070, i32* %stack_var_-20, align 4
  store i32 %v2_1405c, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f1f4.862 to i32), i32* %r0.global-to-local, align 4
  %v1_14088 = call i32 @function_14a3c()
  store i32 ptrtoint (i32** @global_var_1f034.866 to i32), i32* %r0.global-to-local, align 4
  %v3_14094 = call i32 @function_14408(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v2_1405c)
  store i32 %v3_14094, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1f4.862 to i32), i32* %r0.global-to-local, align 4
  store i32 82092, i32* @lr, align 4
  %v1_140a8 = call i32 @function_14a3c()
  store i32 %v1_140a8, i32* %r0.global-to-local, align 4
  %v2_140ac = icmp eq i32 %v3_14094, 0
  br i1 %v2_140ac, label %dec_label_pc_140b4, label %dec_label_pc_14164

dec_label_pc_140b4:                               ; preds = %dec_label_pc_14070
  %v2_140b8 = load i32, i32* @global_var_1f21c.869, align 4
  store i32 %v2_140b8, i32* @r4, align 4
  %v2_140bc = load i32, i32* %stack_var_-20, align 4
  %v3_140c0 = icmp ult i32 %v2_140bc, %v2_140b8
  br i1 %v3_140c0, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_140b4
  %v3_140c4 = add i32 %v2_140b8, -1
  %v2_140c8 = add i32 %v3_140c4, %v2_140bc
  %v2_140cc = sub i32 0, %v2_140b8
  %v3_140d0 = and i32 %v2_140c8, %v2_140cc
  store i32 %v3_140d0, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_140b4, %bb14
  store i32 ptrtoint (i32* @global_var_1f4b8.871 to i32), i32* %r0.global-to-local, align 4
  %v1_140dc = call i32 @function_14a3c()
  %v0_140e0 = load i32, i32* @r4, align 4
  store i32 %v0_140e0, i32* %r0.global-to-local, align 4
  %v1_140e4 = call i32 @function_151f0(i32 %v0_140e0)
  store i32 %v1_140e4, i32* %r0.global-to-local, align 4
  %v7_140e8 = icmp eq i32 %v1_140e4, -1
  br i1 %v7_140e8, label %bb15, label %dec_label_pc_140f4

bb15:                                             ; preds = %.thread3
  store i32 %v1_140e4, i32* @r5, align 4
  br label %dec_label_pc_14108

dec_label_pc_140f4:                               ; preds = %.thread3
  %v1_140f4 = add i32 %v1_140e4, 3
  %v1_140f8 = and i32 %v1_140f4, -4
  store i32 %v1_140f8, i32* @r5, align 4
  %v9_140fc = icmp eq i32 %v1_140f8, %v1_140e4
  br i1 %v9_140fc, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_140f4
  %v3_14100 = sub i32 %v1_140f8, %v1_140e4
  store i32 %v3_14100, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_140f4, %bb16
  %v1_14104 = xor i1 %v9_140fc, true
  call void @__pseudo_cond_branch(i1 %v1_14104, i32 ptrtoint (i32* @global_var_151f0.872 to i32))
  br label %dec_label_pc_14108

dec_label_pc_14108:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1f4b8.871 to i32), i32* %r0.global-to-local, align 4
  store i32 82200, i32* @lr, align 4
  %v1_14114 = call i32 @function_14a3c()
  store i32 %v1_14114, i32* %r0.global-to-local, align 4
  %v0_14118 = load i32, i32* @r5, align 4
  %v7_14118 = icmp eq i32 %v0_14118, -1
  br i1 %v7_14118, label %dec_label_pc_14174, label %dec_label_pc_14120

dec_label_pc_14120:                               ; preds = %dec_label_pc_14108
  store i32 ptrtoint (i32* @global_var_1f1f4.862 to i32), i32* %r0.global-to-local, align 4
  %v1_1412c = call i32 @function_14a3c()
  %v0_14130 = load i32, i32* @r4, align 4
  %v0_14134 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1f034.866 to i32), i32* %r0.global-to-local, align 4
  %v4_1413c = call i32 @function_1455c(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v0_14134, i32 %v0_14130)
  store i32 ptrtoint (i32** @global_var_1f034.866 to i32), i32* %r0.global-to-local, align 4
  %v3_14148 = call i32 @function_14408(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v2_1405c)
  store i32 %v3_14148, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1f4.862 to i32), i32* %r0.global-to-local, align 4
  store i32 82268, i32* @lr, align 4
  %v1_14158 = call i32 @function_14a3c()
  store i32 %v1_14158, i32* %r0.global-to-local, align 4
  %v2_1415c = icmp eq i32 %v3_14148, 0
  br i1 %v2_1415c, label %dec_label_pc_14174, label %dec_label_pc_14164

dec_label_pc_14164:                               ; preds = %dec_label_pc_14070, %dec_label_pc_14120
  %v1_14168 = phi i32 [ %v3_14094, %dec_label_pc_14070 ], [ %v3_14148, %dec_label_pc_14120 ]
  %v2_14164 = load i32, i32* %stack_var_-20, align 4
  %v2_14168 = inttoptr i32 %v1_14168 to i32*
  store i32 %v2_14164, i32* %v2_14168, align 4
  %v3_14168 = load i32, i32* %r4.global-to-local, align 4
  %v4_14168 = add i32 %v3_14168, 4
  store i32 %v4_14168, i32* %r4.global-to-local, align 4
  %v2_1416c = icmp eq i32 %v4_14168, 0
  br i1 %v2_1416c, label %dec_label_pc_14174, label %dec_label_pc_14184

dec_label_pc_14174:                               ; preds = %dec_label_pc_14164, %dec_label_pc_14120, %dec_label_pc_14108, %dec_label_pc_14068
  %v0_14174 = call i32 @function_13b78()
  store i32 %v0_14174, i32* %r0.global-to-local, align 4
  %v2_1417c = inttoptr i32 %v0_14174 to i32*
  store i32 12, i32* %v2_1417c, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14184

dec_label_pc_14184:                               ; preds = %dec_label_pc_14164, %dec_label_pc_14174
  %v0_14184 = phi i32 [ %v4_14168, %dec_label_pc_14164 ], [ 0, %dec_label_pc_14174 ]
  store i32 %v0_14184, i32* %r0.global-to-local, align 4
  store i32 %v3_14054, i32* @r4, align 4
  store i32 %v6_14054, i32* @r5, align 4
  store i32 %v9_14054, i32* @r6, align 4
  ret i32 %v0_14184

; uselistorder directives
  uselistorder i32 %v0_14184, { 1, 0 }
  uselistorder i32 %v3_14148, { 1, 0, 2 }
  uselistorder i32 %v1_140f8, { 1, 0, 2 }
  uselistorder i32 %v1_140e4, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_14094, { 1, 0, 2 }
  uselistorder i32 %v0_14058, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 2, 7, 9, 10, 11, 3, 13, 12, 5, 15, 14, 4, 16, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_14184, { 1, 0 }
  uselistorder label %dec_label_pc_14164, { 1, 0 }
  uselistorder label %dec_label_pc_14108, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14070, { 1, 0 }
}

define i32 @function_141a8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_141a8:
  %stack_var_-12 = alloca i32, align 4
  %v3_141a8 = load i32, i32* @r4, align 4
  store i32 %v3_141a8, i32* %stack_var_-12, align 4
  %v6_141a8 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_141b0 = mul i32 %arg2, %arg1
  store i32 %v2_141b0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_141b4 = icmp eq i32 %arg1, 0
  store i32 %v2_141b0, i32* @r0, align 4
  br i1 %v2_141b4, label %dec_label_pc_141e0, label %dec_label_pc_141c0

dec_label_pc_141c0:                               ; preds = %dec_label_pc_141a8
  %v0_141c0 = call i32 @function_13248()
  %v0_141c4 = load i32, i32* @r5, align 4
  %v9_141c4 = icmp eq i32 %v0_141c4, %v0_141c0
  store i32 0, i32* @r5, align 4
  br i1 %v9_141c4, label %dec_label_pc_141c0.dec_label_pc_141e0_crit_edge, label %dec_label_pc_141d0

dec_label_pc_141c0.dec_label_pc_141e0_crit_edge:  ; preds = %dec_label_pc_141c0
  %v0_141e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_141e0

dec_label_pc_141d0:                               ; preds = %dec_label_pc_141c0
  %v0_141d0 = call i32 @function_13b78()
  %v2_141d8 = inttoptr i32 %v0_141d0 to i32*
  store i32 12, i32* %v2_141d8, align 4
  br label %dec_label_pc_141f8

dec_label_pc_141e0:                               ; preds = %dec_label_pc_141c0.dec_label_pc_141e0_crit_edge, %dec_label_pc_141a8
  %v0_141e0 = phi i32 [ %v0_141e0.pre, %dec_label_pc_141c0.dec_label_pc_141e0_crit_edge ], [ %v2_141b0, %dec_label_pc_141a8 ]
  %v1_141e4 = call i32 @function_14054(i32 %v0_141e0)
  store i32 %v1_141e4, i32* @r5, align 4
  %v0_141ec = load i32, i32* @r4, align 4
  store i32 %v0_141ec, i32* @r2, align 4
  store i32 82424, i32* @lr, align 4
  %v1_141f4 = icmp ne i32 %v1_141e4, 0
  call void @__pseudo_cond_branch(i1 %v1_141f4, i32 ptrtoint (i32* @global_var_13be0.873 to i32))
  br label %dec_label_pc_141f8

dec_label_pc_141f8:                               ; preds = %dec_label_pc_141d0, %dec_label_pc_141e0
  %v0_141f8 = load i32, i32* @r5, align 4
  %v2_141fc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_141fc, i32* @r4, align 4
  store i32 %v6_141a8, i32* @r5, align 4
  ret i32 %v0_141f8

; uselistorder directives
  uselistorder i32 ()* @function_13248, { 2, 3, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_141f8, { 1, 0 }
}

define i32 @function_14200() local_unnamed_addr {
dec_label_pc_14200:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_14200 = load i32, i32* @r0, align 4
  %v2_14200 = icmp eq i32 %v0_14200, 0
  %v3_14204 = load i32, i32* @r4, align 4
  store i32 %v3_14204, i32* %stack_var_-24, align 4
  %v6_14204 = load i32, i32* @r5, align 4
  %v9_14204 = load i32, i32* @r6, align 4
  %v15_14204 = load i32, i32* @r8, align 4
  br i1 %v2_14200, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_14200
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_14200
  %v1_1420c = add i32 %v0_14200, -4
  %v2_1420c = inttoptr i32 %v1_1420c to i32*
  %v3_1420c = load i32, i32* %v2_1420c, align 4
  store i32 %v3_1420c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1f034.866 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_1420c, i32* @r4, align 4
  %v1_14224 = call i32 @function_14a3c()
  %v0_14228 = load i32, i32* @r4, align 4
  %v0_1422c = load i32, i32* @r5, align 4
  %v4_14234 = call i32 @function_1455c(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v0_14228, i32 %v0_1422c)
  %v1_1423c = inttoptr i32 %v4_14234 to i32*
  %v2_1423c = load i32, i32* %v1_1423c, align 4
  store i32 %v2_1423c, i32* %r6.global-to-local, align 4
  %v2_14240 = load i32, i32* @global_var_1f21c.869, align 4
  %v4_14244 = mul i32 %v2_14240, 8
  %v6_14244 = icmp ult i32 %v2_1423c, %v4_14244
  store i32 %v4_14234, i32* @r4, align 4
  br i1 %v6_14244, label %dec_label_pc_14284, label %dec_label_pc_14250

dec_label_pc_14250:                               ; preds = %bb11
  %v1_14258 = call i32 @function_14a3c()
  %v1_14260 = call i32 @function_151f0(i32 0)
  %v0_14264 = load i32, i32* @r4, align 4
  %v1_14264 = add i32 %v0_14264, 12
  store i32 %v1_14264, i32* @r5, align 4
  %v9_14268 = icmp eq i32 %v1_14264, %v1_14260
  br i1 %v9_14268, label %dec_label_pc_1428c, label %dec_label_pc_14270

dec_label_pc_14270:                               ; preds = %dec_label_pc_14250
  %v1_1427c = call i32 @function_14a3c()
  br label %dec_label_pc_14284

dec_label_pc_14284:                               ; preds = %bb11, %dec_label_pc_14270, %bb14
  %v2_14284 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14284, i32* @r4, align 4
  store i32 %v6_14204, i32* @r5, align 4
  store i32 %v9_14204, i32* %r6.global-to-local, align 4
  store i32 %v15_14204, i32* %r8.global-to-local, align 4
  %v0_14288 = call i32 @function_14a3c()
  %v0_1428c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1428c

dec_label_pc_1428c:                               ; preds = %dec_label_pc_14250, %dec_label_pc_14284
  %v1_14294 = phi i32 [ %v0_14264, %dec_label_pc_14250 ], [ %v0_1428c.pre, %dec_label_pc_14284 ]
  %v1_1428c = add i32 %v1_14294, 4
  %v2_1428c = inttoptr i32 %v1_1428c to i32*
  %v3_1428c = load i32, i32* %v2_1428c, align 4
  %v2_14290 = icmp eq i32 %v3_1428c, 0
  br i1 %v2_14290, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_1428c
  %v2_14294 = add i32 %v1_14294, 8
  %v3_14294 = inttoptr i32 %v2_14294 to i32*
  %v4_14294 = load i32, i32* %v3_14294, align 4
  %v3_14298 = add i32 %v3_1428c, 8
  %v4_14298 = inttoptr i32 %v3_14298 to i32*
  store i32 %v4_14294, i32* %v4_14298, align 4
  %v0_1429c.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1428c, %bb12
  %v0_1429c = phi i32 [ %v1_14294, %dec_label_pc_1428c ], [ %v0_1429c.pre, %bb12 ]
  %v1_1429c = add i32 %v0_1429c, 8
  %v2_1429c = inttoptr i32 %v1_1429c to i32*
  %v3_1429c = load i32, i32* %v2_1429c, align 4
  %v1_142a0 = add i32 %v0_1429c, 4
  %v2_142a0 = inttoptr i32 %v1_142a0 to i32*
  %v3_142a0 = load i32, i32* %v2_142a0, align 4
  %v2_142a4 = icmp eq i32 %v3_1429c, 0
  br i1 %v2_142a4, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_142a8 = add i32 %v3_1429c, 4
  %v4_142a8 = inttoptr i32 %v3_142a8 to i32*
  store i32 %v3_142a0, i32* %v4_142a8, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_142ac = load i32, i32* %r8.global-to-local, align 4
  %v3_142ac = inttoptr i32 %v2_142ac to i32*
  store i32 %v3_142a0, i32* %v3_142ac, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_142bc = call i32 @function_14a3c()
  %v0_142c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_142c0 = load i32, i32* @r4, align 4
  %v0_142c8 = load i32, i32* @r5, align 4
  %v2_142c0 = sub i32 12, %v0_142c0
  %v1_142c4 = add i32 %v2_142c0, %v1_142c0
  %v2_142c8 = sub i32 %v1_142c4, %v0_142c8
  %v1_142cc = call i32 @function_151f0(i32 %v2_142c8)
  br label %dec_label_pc_14284

; uselistorder directives
  uselistorder i32 %v0_1429c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_151f0, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_1428c, { 1, 0 }
  uselistorder label %dec_label_pc_14284, { 2, 1, 0 }
}

define i32 @function_142f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_142f0:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_142f0 = load i32, i32* @r4, align 4
  store i32 %v3_142f0, i32* %stack_var_-24, align 4
  %v6_142f0 = load i32, i32* @r5, align 4
  %v9_142f0 = load i32, i32* @r6, align 4
  %v12_142f0 = load i32, i32* @r7, align 4
  %v15_142f0 = load i32, i32* @r8, align 4
  %v18_142f0 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_142f4 = icmp eq i32 %arg2, 0
  %v0_142f8 = load i32, i32* @r0, align 4
  store i32 %v0_142f8, i32* @r7, align 4
  br i1 %v2_142f4, label %dec_label_pc_14300, label %dec_label_pc_14308

dec_label_pc_14300:                               ; preds = %dec_label_pc_142f0
  %v0_14300 = call i32 @function_14200()
  %v0_14310.pre = load i32, i32* @r4, align 4
  %v2_14314.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_14310

dec_label_pc_14308:                               ; preds = %dec_label_pc_142f0
  %v2_14308 = icmp eq i32 %v0_142f8, 0
  br i1 %v2_14308, label %dec_label_pc_14310, label %dec_label_pc_1431c

dec_label_pc_14310:                               ; preds = %dec_label_pc_14308, %dec_label_pc_14300
  %v2_14314 = phi i32 [ %v3_142f0, %dec_label_pc_14308 ], [ %v2_14314.pre, %dec_label_pc_14300 ]
  %v0_14310 = phi i32 [ %arg2, %dec_label_pc_14308 ], [ %v0_14310.pre, %dec_label_pc_14300 ]
  store i32 %v2_14314, i32* @r4, align 4
  store i32 %v6_142f0, i32* @r5, align 4
  store i32 %v9_142f0, i32* @r6, align 4
  store i32 %v12_142f0, i32* @r7, align 4
  store i32 %v18_142f0, i32* @lr, align 4
  %v1_14318 = call i32 @function_14054(i32 %v0_14310)
  %v0_1431c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1431c

dec_label_pc_1431c:                               ; preds = %dec_label_pc_14308, %dec_label_pc_14310
  %v0_14334 = phi i32 [ %v0_142f8, %dec_label_pc_14308 ], [ %v1_14318, %dec_label_pc_14310 ]
  %v0_1431c = phi i32 [ %arg2, %dec_label_pc_14308 ], [ %v0_1431c.pre, %dec_label_pc_14310 ]
  %v1_1431c = add i32 %v0_1431c, 7
  %v1_14320 = and i32 %v1_1431c, -4
  store i32 %v1_14320, i32* @r5, align 4
  %v2_14324 = icmp ugt i32 %v1_14320, 10
  %v1_14328 = add i32 %v0_14334, -4
  %v2_14328 = inttoptr i32 %v1_14328 to i32*
  %v3_14328 = load i32, i32* %v2_14328, align 4
  store i32 %v3_14328, i32* @r6, align 4
  br i1 %v2_14324, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_1431c
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_1431c, %bb
  %v0_143b0 = phi i32 [ %v1_14320, %dec_label_pc_1431c ], [ 12, %bb ]
  store i32 %v1_14328, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_143b0, %v3_14328
  br i1 %tmp, label %dec_label_pc_1433c, label %dec_label_pc_143b0

dec_label_pc_1433c:                               ; preds = %bb14
  %v2_14330 = sub i32 %v0_143b0, %v3_14328
  %v1_1434c = call i32 @function_14a3c()
  %v0_14354 = load i32, i32* @r8, align 4
  %v1_14354 = load i32, i32* @r6, align 4
  %v2_14354 = add i32 %v1_14354, %v0_14354
  %v4_1435c = call i32 @function_1449c(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v2_14354, i32 %v2_14330)
  store i32 %v4_1435c, i32* @r4, align 4
  store i32 82804, i32* @lr, align 4
  %v1_14370 = call i32 @function_14a3c()
  %v0_14374 = load i32, i32* @r4, align 4
  %v2_14374 = icmp eq i32 %v0_14374, 0
  br i1 %v2_14374, label %dec_label_pc_14384, label %.thread

.thread:                                          ; preds = %dec_label_pc_1433c
  %v1_14378 = load i32, i32* @r6, align 4
  %v3_14378 = add i32 %v1_14378, %v0_14374
  %v2_1437c = load i32, i32* @r7, align 4
  %v3_1437c = add i32 %v2_1437c, -4
  %v4_1437c = inttoptr i32 %v3_1437c to i32*
  store i32 %v3_14378, i32* %v4_1437c, align 4
  br label %dec_label_pc_143f0

dec_label_pc_14384:                               ; preds = %dec_label_pc_1433c
  %v0_14384 = load i32, i32* @r5, align 4
  %v1_14384 = add i32 %v0_14384, -4
  %v1_14388 = call i32 @function_14054(i32 %v1_14384)
  store i32 %v1_14388, i32* @r0, align 4
  store i32 %v1_14388, i32* @r4, align 4
  %v2_1438c = icmp eq i32 %v1_14388, 0
  br i1 %v2_1438c, label %dec_label_pc_143a8, label %dec_label_pc_14394

dec_label_pc_14394:                               ; preds = %dec_label_pc_14384
  %v0_14394 = load i32, i32* @r6, align 4
  %v1_14394 = add i32 %v0_14394, -4
  store i32 %v1_14394, i32* @r2, align 4
  %v0_14398 = load i32, i32* @r7, align 4
  store i32 %v0_14398, i32* @r1, align 4
  %v3_1439c = call i32 @function_13bc0(i32 %v1_14388, i32 %v0_14398, i32 %v1_14394)
  %v0_143a0 = load i32, i32* @r7, align 4
  store i32 %v0_143a0, i32* @r0, align 4
  %v0_143a4 = call i32 @function_14200()
  %v0_143a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_143a8

dec_label_pc_143a8:                               ; preds = %dec_label_pc_14384, %dec_label_pc_14394
  %v0_143a8 = phi i32 [ 0, %dec_label_pc_14384 ], [ %v0_143a8.pre, %dec_label_pc_14394 ]
  store i32 %v0_143a8, i32* @r7, align 4
  br label %dec_label_pc_143f0

dec_label_pc_143b0:                               ; preds = %bb14
  %v1_143b0 = add i32 %v0_143b0, 28
  %tmp15 = icmp ugt i32 %v1_143b0, %v3_14328
  br i1 %tmp15, label %dec_label_pc_143f0, label %dec_label_pc_143bc

dec_label_pc_143bc:                               ; preds = %dec_label_pc_143b0
  %v1_143c8 = call i32 @function_14a3c()
  %v0_143cc = load i32, i32* @r8, align 4
  %v1_143cc = load i32, i32* @r5, align 4
  %v2_143cc = add i32 %v1_143cc, %v0_143cc
  %v1_143d0 = load i32, i32* @r6, align 4
  %v2_143d0 = sub i32 %v1_143d0, %v1_143cc
  %v4_143d8 = call i32 @function_1455c(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v2_143cc, i32 %v2_143d0)
  store i32 82924, i32* @lr, align 4
  %v1_143e8 = call i32 @function_14a3c()
  %v0_143ec = load i32, i32* @r5, align 4
  %v1_143ec = load i32, i32* @r7, align 4
  %v2_143ec = add i32 %v1_143ec, -4
  %v3_143ec = inttoptr i32 %v2_143ec to i32*
  store i32 %v0_143ec, i32* %v3_143ec, align 4
  br label %dec_label_pc_143f0

dec_label_pc_143f0:                               ; preds = %.thread, %dec_label_pc_143b0, %dec_label_pc_143a8, %dec_label_pc_143bc
  %v0_143f0 = load i32, i32* @r7, align 4
  %v2_143f4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_143f4, i32* @r4, align 4
  store i32 %v6_142f0, i32* @r5, align 4
  store i32 %v9_142f0, i32* @r6, align 4
  store i32 %v12_142f0, i32* @r7, align 4
  store i32 %v15_142f0, i32* @r8, align 4
  ret i32 %v0_143f0

; uselistorder directives
  uselistorder i32 %v1_143cc, { 1, 0 }
  uselistorder i32 %v0_143b0, { 1, 2, 0 }
  uselistorder i32 %v3_14328, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1f034.866, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1f034.866 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_14054, { 1, 65, 0, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 2 }
  uselistorder i32 ()* @function_14200, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32* @r8, { 98, 99, 100, 101, 102, 117, 9, 5, 6, 7, 8, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 1, 41, 2, 42, 3, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 54, 56, 57, 55, 58, 59, 60, 61, 63, 62, 64, 65, 66, 68, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 90, 91, 92, 93, 95, 96, 97, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 182, 185, 186, 187, 188, 189, 190, 191 }
  uselistorder i32* @r7, { 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 7, 8, 9, 15, 16, 17, 3, 6, 24, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 25, 1, 65, 66, 67, 68, 69, 70, 71, 72, 208, 209, 210, 211, 73, 0, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 2, 5, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 199, 200, 201, 202, 204, 205, 206, 207, 212, 213, 214, 215, 220, 216, 217, 218, 219, 221, 222, 223, 224, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 4, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287 }
  uselistorder label %dec_label_pc_143f0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_143a8, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_1431c, { 1, 0 }
}

define i32 @function_14408(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14408:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_14408 = inttoptr i32 %arg2 to i32*
  %v2_14408 = load i32, i32* %v1_14408, align 4
  %v3_1440c = load i32, i32* @r4, align 4
  store i32 %v3_1440c, i32* %stack_var_-8, align 4
  %v1_14410 = add i32 %v2_14408, 3
  %v1_14414 = and i32 %v1_14410, -4
  store i32 %v1_14414, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_1441c = icmp ugt i32 %v1_14414, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_14424 = load i32, i32* %arg1, align 4
  store i32 %v2_14424, i32* %r0.global-to-local, align 4
  br i1 %v2_1441c, label %dec_label_pc_14490.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_14408
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14490.preheader

dec_label_pc_14490.preheader:                     ; preds = %dec_label_pc_14408, %bb
  %v1_14444 = phi i32 [ %v1_14414, %dec_label_pc_14408 ], [ 12, %bb ]
  %v2_144909 = icmp eq i32 %v2_14424, 0
  br i1 %v2_144909, label %dec_label_pc_14498, label %dec_label_pc_14430

dec_label_pc_14430:                               ; preds = %dec_label_pc_14490.preheader, %dec_label_pc_1448c
  %v2_14448 = phi i32 [ %v3_1448c, %dec_label_pc_1448c ], [ %v2_14424, %dec_label_pc_14490.preheader ]
  %v1_14430 = inttoptr i32 %v2_14448 to i32*
  %v2_14430 = load i32, i32* %v1_14430, align 4
  store i32 %v2_14430, i32* @ip, align 4
  %v3_14434 = icmp ult i32 %v2_14430, %v1_14444
  br i1 %v3_14434, label %dec_label_pc_1448c, label %dec_label_pc_1443c

dec_label_pc_1443c:                               ; preds = %dec_label_pc_14430
  %v1_1443c = add i32 %v1_14444, 44
  %v3_14440 = icmp ult i32 %v2_14430, %v1_1443c
  br i1 %v3_14440, label %dec_label_pc_14450, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_1443c
  %v2_14434.le = sub i32 %v2_14430, %v1_14444
  store i32 %v2_14434.le, i32* %v1_14430, align 4
  %v0_1447c.pre = load i32, i32* @ip, align 4
  %v0_14484.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_14450:                               ; preds = %dec_label_pc_1443c
  %v1_14450 = add i32 %v2_14448, 4
  %v2_14450 = inttoptr i32 %v1_14450 to i32*
  %v3_14450 = load i32, i32* %v2_14450, align 4
  store i32 %v3_14450, i32* %r2.global-to-local, align 4
  %v2_14454 = icmp eq i32 %v3_14450, 0
  br i1 %v2_14454, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_14450
  %v2_14458 = add i32 %v2_14448, 8
  %v3_14458 = inttoptr i32 %v2_14458 to i32*
  %v4_14458 = load i32, i32* %v3_14458, align 4
  %v3_1445c = add i32 %v3_14450, 8
  %v4_1445c = inttoptr i32 %v3_1445c to i32*
  store i32 %v4_14458, i32* %v4_1445c, align 4
  %v0_14460.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14450, %bb27
  %v0_14460 = phi i32 [ %v2_14448, %dec_label_pc_14450 ], [ %v0_14460.pre, %bb27 ]
  %v1_14460 = add i32 %v0_14460, 8
  %v2_14460 = inttoptr i32 %v1_14460 to i32*
  %v3_14460 = load i32, i32* %v2_14460, align 4
  %v1_14464 = add i32 %v0_14460, 4
  %v2_14464 = inttoptr i32 %v1_14464 to i32*
  %v3_14464 = load i32, i32* %v2_14464, align 4
  %v2_14468 = icmp eq i32 %v3_14460, 0
  br i1 %v2_14468, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_1446c = add i32 %v3_14460, 4
  %v4_1446c = inttoptr i32 %v3_1446c to i32*
  store i32 %v3_14464, i32* %v4_1446c, align 4
  %v1_14474 = load i32, i32* @ip, align 4
  store i32 %v1_14474, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_14470 = load i32, i32* %r1.global-to-local, align 4
  %v3_14470 = inttoptr i32 %v2_14470 to i32*
  store i32 %v3_14464, i32* %v3_14470, align 4
  %v1_14478.pre = load i32, i32* @ip, align 4
  store i32 %v1_14478.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_14484 = phi i32 [ %v0_14484.pre, %.thread._crit_edge ], [ %v1_14474, %bb28 ], [ %v1_14478.pre, %.thread5 ]
  %v0_1447c = phi i32 [ %v0_1447c.pre, %.thread._crit_edge ], [ %v1_14474, %bb28 ], [ %v1_14478.pre, %.thread5 ]
  %v1_1447c = load i32, i32* %r0.global-to-local, align 4
  %v2_1447c = sub i32 %v1_1447c, %v0_1447c
  %v1_14480 = add i32 %v2_1447c, 12
  store i32 %v1_14480, i32* %r0.global-to-local, align 4
  %v1_14484 = load i32, i32* %r4.global-to-local, align 4
  %v2_14484 = inttoptr i32 %v1_14484 to i32*
  store i32 %v0_14484, i32* %v2_14484, align 4
  %v2_14488 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14488, i32* %r4.global-to-local, align 4
  ret i32 %v1_14480

dec_label_pc_1448c:                               ; preds = %dec_label_pc_14430
  %v1_1448c = add i32 %v2_14448, 4
  %v2_1448c = inttoptr i32 %v1_1448c to i32*
  %v3_1448c = load i32, i32* %v2_1448c, align 4
  store i32 %v3_1448c, i32* %r0.global-to-local, align 4
  %v2_14490 = icmp eq i32 %v3_1448c, 0
  br i1 %v2_14490, label %dec_label_pc_14490.dec_label_pc_14498_crit_edge, label %dec_label_pc_14430

dec_label_pc_14490.dec_label_pc_14498_crit_edge:  ; preds = %dec_label_pc_1448c
  br label %dec_label_pc_14498

dec_label_pc_14498:                               ; preds = %dec_label_pc_14490.dec_label_pc_14498_crit_edge, %dec_label_pc_14490.preheader
  store i32 %v3_1440c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_1448c, { 1, 2, 0 }
  uselistorder i32 %v0_14460, { 1, 0 }
  uselistorder i32 %v2_14430, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14448, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_14444, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_14430, { 1, 0 }
  uselistorder label %dec_label_pc_14490.preheader, { 1, 0 }
}

define i32 @function_1449c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1449c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_144a0 = load i32, i32* %arg1, align 4
  store i32 %v2_144a0, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_145186 = icmp eq i32 %v2_144a0, 0
  br i1 %v2_145186, label %dec_label_pc_14520, label %dec_label_pc_144ac

dec_label_pc_144ac:                               ; preds = %dec_label_pc_1449c, %dec_label_pc_14514
  %v0_144ec = phi i32 [ %v3_14514, %dec_label_pc_14514 ], [ %v2_144a0, %dec_label_pc_1449c ]
  %v1_144ac = inttoptr i32 %v0_144ec to i32*
  %v2_144ac = load i32, i32* %v1_144ac, align 4
  store i32 %v2_144ac, i32* %r0.global-to-local, align 4
  %v2_144b0 = sub i32 %v0_144ec, %v2_144ac
  %v1_144b4 = add i32 %v2_144b0, 12
  %v3_144b8 = icmp uge i32 %v1_144b4, %arg2
  %v9_144b8 = icmp eq i32 %v1_144b4, %arg2
  %v2_144bc = xor i1 %v9_144b8, true
  %v3_144bc = and i1 %v3_144b8, %v2_144bc
  br i1 %v3_144bc, label %dec_label_pc_14514, label %dec_label_pc_144c0

dec_label_pc_144c0:                               ; preds = %dec_label_pc_144ac
  br i1 %v9_144b8, label %dec_label_pc_144c4, label %dec_label_pc_14520

dec_label_pc_144c4:                               ; preds = %dec_label_pc_144c0
  %v1_144c4 = add i32 %arg3, 3
  %v1_144c8 = and i32 %v1_144c4, -4
  store i32 %v1_144c8, i32* %r2.global-to-local, align 4
  %v2_144cc = sub i32 %v2_144ac, %v1_144c8
  %v3_144cc = icmp ult i32 %v2_144ac, %v1_144c8
  br i1 %v3_144cc, label %dec_label_pc_14520, label %dec_label_pc_144d4

dec_label_pc_144d4:                               ; preds = %dec_label_pc_144c4
  %v1_144d4 = add i32 %v1_144c8, 44
  %v3_144d8 = icmp ult i32 %v2_144ac, %v1_144d4
  br i1 %v3_144d8, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_144d4
  store i32 %v2_144cc, i32* %v1_144ac, align 4
  %v1_144e4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_144e4, i32* %r0.global-to-local, align 4
  ret i32 %v1_144e4

.thread2:                                         ; preds = %dec_label_pc_144d4
  %v1_144ec = add i32 %v0_144ec, 4
  %v2_144ec = inttoptr i32 %v1_144ec to i32*
  %v3_144ec = load i32, i32* %v2_144ec, align 4
  store i32 %v3_144ec, i32* %r2.global-to-local, align 4
  %v2_144f0 = icmp eq i32 %v3_144ec, 0
  br i1 %v2_144f0, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_144f4 = add i32 %v0_144ec, 8
  %v3_144f4 = inttoptr i32 %v2_144f4 to i32*
  %v4_144f4 = load i32, i32* %v3_144f4, align 4
  %v3_144f8 = add i32 %v3_144ec, 8
  %v4_144f8 = inttoptr i32 %v3_144f8 to i32*
  store i32 %v4_144f4, i32* %v4_144f8, align 4
  %v0_144fc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_144fc = phi i32 [ %v0_144ec, %.thread2 ], [ %v0_144fc.pre, %bb17 ]
  %v1_144fc = add i32 %v0_144fc, 8
  %v2_144fc = inttoptr i32 %v1_144fc to i32*
  %v3_144fc = load i32, i32* %v2_144fc, align 4
  store i32 %v3_144fc, i32* %r2.global-to-local, align 4
  %v1_14500 = add i32 %v0_144fc, 4
  %v2_14500 = inttoptr i32 %v1_14500 to i32*
  %v3_14500 = load i32, i32* %v2_14500, align 4
  %v2_14504 = icmp eq i32 %v3_144fc, 0
  br i1 %v2_14504, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_14508 = add i32 %v3_144fc, 4
  %v4_14508 = inttoptr i32 %v3_14508 to i32*
  store i32 %v3_14500, i32* %v4_14508, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_1450c = load i32, i32* %lr.global-to-local, align 4
  %v3_1450c = inttoptr i32 %v2_1450c to i32*
  store i32 %v3_14500, i32* %v3_1450c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_14510 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_14510

dec_label_pc_14514:                               ; preds = %dec_label_pc_144ac
  %v1_14514 = add i32 %v0_144ec, 4
  %v2_14514 = inttoptr i32 %v1_14514 to i32*
  %v3_14514 = load i32, i32* %v2_14514, align 4
  store i32 %v3_14514, i32* %ip.global-to-local, align 4
  %v2_14518 = icmp eq i32 %v3_14514, 0
  br i1 %v2_14518, label %dec_label_pc_14518.dec_label_pc_14520.loopexit_crit_edge, label %dec_label_pc_144ac

dec_label_pc_14518.dec_label_pc_14520.loopexit_crit_edge: ; preds = %dec_label_pc_14514
  br label %dec_label_pc_14520

dec_label_pc_14520:                               ; preds = %dec_label_pc_144c4, %dec_label_pc_1449c, %dec_label_pc_14518.dec_label_pc_14520.loopexit_crit_edge, %dec_label_pc_144c0
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14514, { 1, 2, 0 }
  uselistorder i32 %v0_144fc, { 1, 0 }
  uselistorder i32 %v1_144c8, { 0, 2, 1, 3 }
  uselistorder i1 %v9_144b8, { 1, 0 }
  uselistorder i32 %v2_144ac, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_144ec, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_14520, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_144ac, { 1, 0 }
}

define i32 @function_14528() local_unnamed_addr {
dec_label_pc_14528:
  %v0_14528 = load i32, i32* @r2, align 4
  %v2_14528 = icmp eq i32 %v0_14528, 0
  %v0_1452c = load i32, i32* @r3, align 4
  %v1_1452c = load i32, i32* @r1, align 4
  %v2_1452c = add i32 %v1_1452c, 4
  %v3_1452c = inttoptr i32 %v2_1452c to i32*
  store i32 %v0_1452c, i32* %v3_1452c, align 4
  %v0_14530 = load i32, i32* @r2, align 4
  %v1_14530 = load i32, i32* @r1, align 4
  %v2_14530 = add i32 %v1_14530, 8
  %v3_14530 = inttoptr i32 %v2_14530 to i32*
  store i32 %v0_14530, i32* %v3_14530, align 4
  %v1_14538 = load i32, i32* @r1, align 4
  br i1 %v2_14528, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14528
  %v2_14534 = load i32, i32* @r2, align 4
  %v3_14534 = add i32 %v2_14534, 4
  %v4_14534 = inttoptr i32 %v3_14534 to i32*
  store i32 %v1_14538, i32* %v4_14534, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_14528
  %v2_14538 = load i32, i32* @r0, align 4
  %v3_14538 = inttoptr i32 %v2_14538 to i32*
  store i32 %v1_14538, i32* %v3_14538, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_1453c = load i32, i32* @r3, align 4
  %v2_1453c = icmp eq i32 %v0_1453c, 0
  br i1 %v2_1453c, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_14540 = load i32, i32* @r1, align 4
  %v3_14540 = add i32 %v0_1453c, 8
  %v4_14540 = inttoptr i32 %v3_14540 to i32*
  store i32 %v1_14540, i32* %v4_14540, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_14544 = load i32, i32* @r0, align 4
  ret i32 %v1_14544

; uselistorder directives
  uselistorder i32 %v1_14538, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_14548() local_unnamed_addr {
dec_label_pc_14548:
  %v0_14548 = load i32, i32* @r2, align 4
  %v2_14548 = icmp eq i32 %v0_14548, 0
  %v1_1454c = load i32, i32* @r1, align 4
  br i1 %v2_14548, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14548
  %v2_1454c = load i32, i32* @r0, align 4
  %v3_1454c = inttoptr i32 %v2_1454c to i32*
  store i32 %v1_1454c, i32* %v3_1454c, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_14548
  %v3_14550 = add i32 %v0_14548, 4
  %v4_14550 = inttoptr i32 %v3_14550 to i32*
  store i32 %v1_1454c, i32* %v4_14550, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_14554 = load i32, i32* @r2, align 4
  %v1_14554 = load i32, i32* @r1, align 4
  %v2_14554 = add i32 %v1_14554, 8
  %v3_14554 = inttoptr i32 %v2_14554 to i32*
  store i32 %v0_14554, i32* %v3_14554, align 4
  %v1_14558 = load i32, i32* @r0, align 4
  ret i32 %v1_14558

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1455c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1455c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1455c = load i32, i32* @r4, align 4
  store i32 %v3_1455c, i32* %stack_var_-20, align 4
  %v2_14560 = load i32, i32* %arg1, align 4
  store i32 %v2_14560, i32* %r4.global-to-local, align 4
  %v2_14564 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_145802 = icmp eq i32 %v2_14560, 0
  br i1 %v2_145802, label %dec_label_pc_14630, label %dec_label_pc_14570

dec_label_pc_14570:                               ; preds = %dec_label_pc_1455c, %dec_label_pc_14578
  %v0_145c0 = phi i32 [ %v0_145c8, %dec_label_pc_14578 ], [ 0, %dec_label_pc_1455c ]
  %v0_145c8 = phi i32 [ %v3_1457c, %dec_label_pc_14578 ], [ %v2_14560, %dec_label_pc_1455c ]
  %v1_145845.in = phi i32 [ %v3_1457c, %dec_label_pc_14578 ], [ %v2_14560, %dec_label_pc_1455c ]
  %v1_145845 = add i32 %v1_145845.in, 12
  %v3_14570 = icmp ult i32 %v1_145845, %arg2
  br i1 %v3_14570, label %dec_label_pc_14578, label %dec_label_pc_14590

dec_label_pc_14578:                               ; preds = %dec_label_pc_14570
  store i32 %v0_145c8, i32* %r6.global-to-local, align 4
  %v1_1457c = add i32 %v0_145c8, 4
  %v2_1457c = inttoptr i32 %v1_1457c to i32*
  %v3_1457c = load i32, i32* %v2_1457c, align 4
  store i32 %v3_1457c, i32* %r4.global-to-local, align 4
  %v2_14580 = icmp eq i32 %v3_1457c, 0
  br i1 %v2_14580, label %dec_label_pc_14580.dec_label_pc_14630.loopexit_crit_edge, label %dec_label_pc_14570

dec_label_pc_14590:                               ; preds = %dec_label_pc_14570
  %v1_14590 = inttoptr i32 %v0_145c8 to i32*
  %v2_14590 = load i32, i32* %v1_14590, align 4
  store i32 %v2_14590, i32* @ip, align 4
  %v2_14594 = sub i32 %v0_145c8, %v2_14590
  %v1_14598 = add i32 %v2_14594, 12
  %v3_1459c = icmp uge i32 %v1_14598, %v2_14564
  %v9_1459c = icmp eq i32 %v1_14598, %v2_14564
  %v2_145a0 = xor i1 %v9_1459c, true
  %v3_145a0 = and i1 %v3_1459c, %v2_145a0
  br i1 %v3_145a0, label %dec_label_pc_14630, label %dec_label_pc_145a4

dec_label_pc_145a4:                               ; preds = %dec_label_pc_14590
  %v2_145a4 = add i32 %v2_14590, %arg3
  store i32 %v2_145a4, i32* %r7.global-to-local, align 4
  br i1 %v9_1459c, label %dec_label_pc_145ac, label %dec_label_pc_145d8

dec_label_pc_145ac:                               ; preds = %dec_label_pc_145a4
  %v2_145ac = icmp eq i32 %v0_145c0, 0
  br i1 %v2_145ac, label %dec_label_pc_14624, label %dec_label_pc_145b4

dec_label_pc_145b4:                               ; preds = %dec_label_pc_145ac
  %v1_145b4 = add i32 %v0_145c0, 12
  %v9_145b8 = icmp eq i32 %v1_145b4, %arg2
  br i1 %v9_145b8, label %dec_label_pc_145c0, label %dec_label_pc_14624

dec_label_pc_145c0:                               ; preds = %dec_label_pc_145b4
  %v1_145c0 = inttoptr i32 %v0_145c0 to i32*
  %v2_145c0 = load i32, i32* %v1_145c0, align 4
  %v1_145c4 = add i32 %v0_145c0, 8
  %v2_145c4 = inttoptr i32 %v1_145c4 to i32*
  %v3_145c4 = load i32, i32* %v2_145c4, align 4
  store i32 %v3_145c4, i32* @r2, align 4
  store i32 %v0_145c8, i32* @r1, align 4
  %v2_145cc = add i32 %v2_145c0, %v2_145a4
  store i32 %v2_145cc, i32* %r7.global-to-local, align 4
  %v0_145d0 = call i32 @function_14548()
  br label %dec_label_pc_14624

dec_label_pc_145d8:                               ; preds = %dec_label_pc_145a4
  %v1_145d8 = add i32 %v0_145c8, 4
  %v2_145d8 = inttoptr i32 %v1_145d8 to i32*
  %v3_145d8 = load i32, i32* %v2_145d8, align 4
  store i32 %v3_145d8, i32* %r5.global-to-local, align 4
  %v2_145dc = icmp eq i32 %v3_145d8, 0
  br i1 %v2_145dc, label %dec_label_pc_14610, label %dec_label_pc_145e4

dec_label_pc_145e4:                               ; preds = %dec_label_pc_145d8
  %v1_145e4 = inttoptr i32 %v3_145d8 to i32*
  %v2_145e4 = load i32, i32* %v1_145e4, align 4
  store i32 %v2_145e4, i32* @ip, align 4
  %v2_145e8 = sub i32 %v3_145d8, %v2_145e4
  %v1_145ec = add i32 %v2_145e8, 12
  %v9_145f0 = icmp eq i32 %v2_14564, %v1_145ec
  br i1 %v9_145f0, label %dec_label_pc_145f8, label %dec_label_pc_14610

dec_label_pc_145f8:                               ; preds = %dec_label_pc_145e4
  store i32 %v0_145c0, i32* @r2, align 4
  store i32 %v3_145d8, i32* @r1, align 4
  %v2_14600 = add i32 %v2_145e4, %v2_145a4
  store i32 %v2_14600, i32* %r7.global-to-local, align 4
  %v0_14604 = call i32 @function_14548()
  %v0_14608 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14608, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14624

dec_label_pc_14610:                               ; preds = %dec_label_pc_145e4, %dec_label_pc_145d8
  %v2_14610 = add i32 %v0_145c8, %arg3
  store i32 %v2_14610, i32* %r4.global-to-local, align 4
  store i32 %v3_145d8, i32* @r3, align 4
  store i32 %v0_145c0, i32* @r2, align 4
  store i32 %v2_14610, i32* @r1, align 4
  %v0_14620 = call i32 @function_14528()
  br label %dec_label_pc_14624

dec_label_pc_14624:                               ; preds = %dec_label_pc_145b4, %dec_label_pc_145ac, %dec_label_pc_145f8, %dec_label_pc_145c0, %dec_label_pc_14610
  %v0_14624 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14624, i32* %r5.global-to-local, align 4
  %v0_14628 = load i32, i32* %r7.global-to-local, align 4
  %v2_14628 = inttoptr i32 %v0_14624 to i32*
  store i32 %v0_14628, i32* %v2_14628, align 4
  br label %dec_label_pc_14648

dec_label_pc_14580.dec_label_pc_14630.loopexit_crit_edge: ; preds = %dec_label_pc_14578
  br label %dec_label_pc_14630

dec_label_pc_14630:                               ; preds = %dec_label_pc_1455c, %dec_label_pc_14580.dec_label_pc_14630.loopexit_crit_edge, %dec_label_pc_14590
  %v1_14630 = add i32 %v2_14564, -12
  store i32 %v1_14630, i32* %r5.global-to-local, align 4
  %v3_14634 = inttoptr i32 %v1_14630 to i32*
  store i32 %arg3, i32* %v3_14634, align 4
  %v0_14638 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14638, i32* @r3, align 4
  %v0_1463c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1463c, i32* @r2, align 4
  %v0_14640 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14640, i32* @r1, align 4
  %v0_14644 = call i32 @function_14528()
  br label %dec_label_pc_14648

dec_label_pc_14648:                               ; preds = %dec_label_pc_14624, %dec_label_pc_14630
  %v0_14648 = load i32, i32* %r5.global-to-local, align 4
  %v2_1464c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1464c, i32* @r4, align 4
  ret i32 %v0_14648

; uselistorder directives
  uselistorder i32 %v3_145d8, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_1459c, { 1, 0 }
  uselistorder i32 %v3_1457c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_145c8, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_145c0, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_14528, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_14548, { 1, 0 }
  uselistorder i32* @ip, { 12, 13, 1, 14, 0, 15, 6, 7, 8, 4, 5, 2, 9, 10, 3, 11 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14648, { 1, 0 }
  uselistorder label %dec_label_pc_14630, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14624, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_14570, { 1, 0 }
}

define i32 @function_14650() local_unnamed_addr {
dec_label_pc_1466c.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_14650 = ptrtoint i32* %stack_var_-268 to i32
  %v1_14660 = call i32 @function_14a3c()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_1466c = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_1466c

dec_label_pc_1466c:                               ; preds = %dec_label_pc_1466c.lr.ph, %dec_label_pc_1466c
  %v1_14670 = phi i32 [ 31, %dec_label_pc_1466c.lr.ph ], [ %v1_1467c, %dec_label_pc_1466c ]
  %v4_14670 = mul i32 %v1_14670, 4
  %v5_14670 = add i32 %v4_14670, %v2_1466c
  %v2_14678 = add i32 %v5_14670, -128
  %v3_14678 = inttoptr i32 %v2_14678 to i32*
  store i32 0, i32* %v3_14678, align 4
  %v0_1467c = load i32, i32* %r1.global-to-local, align 4
  %v1_1467c = add i32 %v0_1467c, -1
  store i32 %v1_1467c, i32* %r1.global-to-local, align 4
  %v6_1467c = icmp slt i32 %v1_1467c, 0
  br i1 %v6_1467c, label %dec_label_pc_14684, label %dec_label_pc_1466c

dec_label_pc_14684:                               ; preds = %dec_label_pc_1466c
  %v2_14684 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_14684, i32* @r4, align 4
  store i32 %v2_14684, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_14690 = call i32 @function_1400c()
  %v2_14694 = icmp eq i32 %v0_14690, 0
  br i1 %v2_14694, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_14684
  store i32 %v2_14684, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14684, %bb
  store i32 83624, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_14694, i32 ptrtoint (i32* @global_var_1384c.888 to i32))
  %v2_146ac = load i32, i32* @global_var_1f20c.890, align 4
  %v2_146b0 = icmp eq i32 %v2_146ac, 0
  br i1 %v2_146b0, label %dec_label_pc_146b8, label %dec_label_pc_146e8

dec_label_pc_146b8:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1f20c.890, align 4
  br label %dec_label_pc_146c0

dec_label_pc_146c0:                               ; preds = %dec_label_pc_14738, %dec_label_pc_146b8
  %v1_146cc = call i32 @function_14a3c()
  %v1_146d4 = call i32 @function_15bcc(i32 6)
  store i32 83688, i32* @lr, align 4
  %v1_146e4 = call i32 @function_14a3c()
  %v2_146ec.pre = load i32, i32* @global_var_1f20c.890, align 4
  br label %dec_label_pc_146e8

dec_label_pc_146e8:                               ; preds = %.thread1, %dec_label_pc_146c0
  %v0_1475c = phi i32 [ %v2_146ac, %.thread1 ], [ %v2_146ec.pre, %dec_label_pc_146c0 ]
  store i32 ptrtoint (i32* @global_var_1f20c.890 to i32), i32* %ip.global-to-local, align 4
  %v7_146f0 = icmp eq i32 %v0_1475c, 1
  br i1 %v7_146f0, label %dec_label_pc_14720.lr.ph, label %dec_label_pc_14754

dec_label_pc_14720.lr.ph:                         ; preds = %dec_label_pc_146e8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1f20c.890, align 4
  %v2_1470c = bitcast i32* %stack_var_-268 to i8*
  %v3_1470c = call i32 @function_13be0(i8* %v2_1470c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14720

dec_label_pc_14720:                               ; preds = %dec_label_pc_14720.lr.ph, %dec_label_pc_14720
  %v1_14724 = phi i32 [ 31, %dec_label_pc_14720.lr.ph ], [ %v1_14730, %dec_label_pc_14720 ]
  %v4_14724 = mul i32 %v1_14724, 4
  %v5_14724 = add i32 %v4_14724, %v2_1466c
  %v2_1472c = add i32 %v5_14724, -264
  %v3_1472c = inttoptr i32 %v2_1472c to i32*
  store i32 -1, i32* %v3_1472c, align 4
  %v0_14730 = load i32, i32* %r1.global-to-local, align 4
  %v1_14730 = add i32 %v0_14730, -1
  store i32 %v1_14730, i32* %r1.global-to-local, align 4
  %v6_14730 = icmp slt i32 %v1_14730, 0
  br i1 %v6_14730, label %dec_label_pc_14738, label %dec_label_pc_14720

dec_label_pc_14738:                               ; preds = %dec_label_pc_14720
  store i32 %v2_14650, i32* %r1.global-to-local, align 4
  %v4_1474c = call i32 @function_14d28(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_146c0

dec_label_pc_14754:                               ; preds = %dec_label_pc_146e8
  %v7_14754 = icmp eq i32 %v0_1475c, 2
  br i1 %v7_14754, label %dec_label_pc_1475c, label %dec_label_pc_14768

dec_label_pc_1475c:                               ; preds = %dec_label_pc_14754
  store i32 3, i32* @global_var_1f20c.890, align 4
  %v0_14764 = call i32 @function_14650()
  %v2_14768.pre = load i32, i32* @global_var_1f20c.890, align 4
  br label %dec_label_pc_14768

dec_label_pc_14768:                               ; preds = %dec_label_pc_14754, %dec_label_pc_1475c
  %v1_14770 = phi i32 [ %v0_1475c, %dec_label_pc_14754 ], [ %v2_14768.pre, %dec_label_pc_1475c ]
  %v7_1476c = icmp eq i32 %v1_14770, 3
  br i1 %v7_1476c, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_14768
  %v2_14778 = load i32, i32* %ip.global-to-local, align 4
  %v3_14778 = inttoptr i32 %v2_14778 to i32*
  store i32 4, i32* %v3_14778, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14768, %bb27
  call void @__pseudo_cond_branch(i1 %v7_1476c, i32 ptrtoint (i32* @global_var_14e40.892 to i32))
  br label %dec_label_pc_14780

dec_label_pc_14780:                               ; preds = %dec_label_pc_14780, %.thread3
  %v0_14780 = call i32 @function_14650()
  br label %dec_label_pc_14780

; uselistorder directives
  uselistorder i32 %v1_14730, { 2, 1, 0 }
  uselistorder i32 %v1_1467c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1f20c.890, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14768, { 1, 0 }
  uselistorder label %dec_label_pc_14720, { 1, 0 }
  uselistorder label %dec_label_pc_146e8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_1466c, { 1, 0 }
}

define i32 @function_14798(i32 %arg1) local_unnamed_addr {
dec_label_pc_14798:
  %stack_var_-16 = alloca i32, align 4
  %v2_14798 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_14798, i32* @r0, align 4
  %v8_147b4 = call i32 @function_14a44(i32 %v2_14798, i32 ptrtoint (i32* @global_var_14a3c.844 to i32), i32 ptrtoint (i32* @global_var_1f154.895 to i32), i32 84548, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_147c4 = call i32 @function_14a3c()
  %v2_147cc = load i32, i32* @global_var_1f210.899, align 4
  %v2_147d0 = icmp eq i32 %v2_147cc, 0
  br i1 %v2_147d0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_14798
  call void @__pseudo_branch(i32 %v2_147cc)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14798, %bb
  store i32 %v2_14798, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_147f4.901 to i32), i32* @lr, align 4
  %v8_147f0 = call i32 @function_14a44(i32 %v2_14798, i32 1, i32 ptrtoint (i32* @global_var_1f154.895 to i32), i32 84548, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_147f0, i32* @r0, align 4
  %v1_147f4 = call i32 @function_149d0(i32 %v8_147f0)
  store i1 true, i1* @cpsr_z, align 1
  %v0_14808 = load i32, i32* @r4, align 4
  %v1_1480c = call i32 @function_14e40(i32 %v0_14808)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_14798, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_14a3c, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_14a44, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 84548, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1f154.895 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14a3c.844 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_1482c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1482c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1482c = load i32, i32* @r4, align 4
  store i32 %v3_1482c, i32* %stack_var_-20, align 4
  %v6_1482c = load i32, i32* @r5, align 4
  %v9_1482c = load i32, i32* @r6, align 4
  %v16_1482c = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_14830 = icmp eq i32 %arg1, 0
  %v2_14834 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_14830, label %dec_label_pc_149b8, label %dec_label_pc_1484c.preheader

dec_label_pc_1484c.preheader:                     ; preds = %dec_label_pc_1482c
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1485417 = add i32 %v16_1482c, 124
  br label %dec_label_pc_14844

dec_label_pc_14844:                               ; preds = %dec_label_pc_1484c.preheader, %dec_label_pc_14844
  %v5_1485418 = phi i32 [ %v5_1485417, %dec_label_pc_1484c.preheader ], [ %v5_14854, %dec_label_pc_14844 ]
  %v2_14848 = add i32 %v5_1485418, -136
  %v3_14848 = inttoptr i32 %v2_14848 to i32*
  store i32 0, i32* %v3_14848, align 4
  %v0_1484c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_1484c = add i32 %v0_1484c.pre, -1
  store i32 %v1_1484c, i32* %r1.global-to-local, align 4
  %v6_1484c = icmp slt i32 %v1_1484c, 0
  %v4_14854 = mul i32 %v1_1484c, 4
  %v5_14854 = add i32 %v4_14854, %v16_1482c
  br i1 %v6_1484c, label %dec_label_pc_1485c, label %dec_label_pc_14844

dec_label_pc_1485c:                               ; preds = %dec_label_pc_14844
  %v2_1485c = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_1485c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_1486c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_1486c, i32* %stack_var_-28, align 4
  %v0_14874 = call i32 @function_1400c()
  store i32 %v0_14874, i32* %r0.global-to-local, align 4
  %v1_14878 = load i32, i32* @r5, align 4
  %v5_1487c = icmp slt i32 %v0_14874, %v1_14878
  br i1 %v5_1487c, label %dec_label_pc_149c0, label %dec_label_pc_14880

dec_label_pc_14880:                               ; preds = %dec_label_pc_1485c
  %v2_14880 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14880, i32* @r4, align 4
  store i32 %v1_14878, i32* %r0.global-to-local, align 4
  store i32 %v2_1485c, i32* %r1.global-to-local, align 4
  %v3_14890 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_14890 = call i32 @function_1384c(i32 %v1_14878, %_TYPEDEF_sigset_t* %v3_14890, i32 %v2_14880)
  store i32 %v4_14890, i32* %r0.global-to-local, align 4
  %v1_14894 = load i32, i32* @r5, align 4
  %v9_14894 = icmp eq i32 %v4_14890, %v1_14894
  br i1 %v9_14894, label %dec_label_pc_1489c, label %dec_label_pc_149c0

dec_label_pc_1489c:                               ; preds = %dec_label_pc_14880
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_14880, i32* %r0.global-to-local, align 4
  %v2_148a4 = call i32 @function_13fe8(i32 %v2_14880, i32 17)
  store i32 %v2_148a4, i32* %r0.global-to-local, align 4
  %v1_148a8 = load i32, i32* @r5, align 4
  %v9_148a8 = icmp eq i32 %v2_148a4, %v1_148a8
  br i1 %v9_148a8, label %dec_label_pc_148c0.preheader, label %dec_label_pc_1489c.dec_label_pc_14988_crit_edge

dec_label_pc_1489c.dec_label_pc_14988_crit_edge:  ; preds = %dec_label_pc_1489c
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_14988

dec_label_pc_148c0.preheader:                     ; preds = %dec_label_pc_1489c
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_148b8

dec_label_pc_148b8:                               ; preds = %dec_label_pc_148c0.preheader, %dec_label_pc_148b8
  %v5_148c816 = phi i32 [ %v5_1485417, %dec_label_pc_148c0.preheader ], [ %v5_148c8, %dec_label_pc_148b8 ]
  %v2_148bc = add i32 %v5_148c816, -136
  %v3_148bc = inttoptr i32 %v2_148bc to i32*
  store i32 0, i32* %v3_148bc, align 4
  %v0_148c0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_148c0 = add i32 %v0_148c0.pre, -1
  store i32 %v1_148c0, i32* %r1.global-to-local, align 4
  %v6_148c0 = icmp slt i32 %v1_148c0, 0
  %v4_148c8 = mul i32 %v1_148c0, 4
  %v5_148c8 = add i32 %v4_148c8, %v16_1482c
  br i1 %v6_148c0, label %dec_label_pc_148d0, label %dec_label_pc_148b8

dec_label_pc_148d0:                               ; preds = %dec_label_pc_148b8
  store i32 %v2_1485c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_148d8 = call i32 @function_1400c()
  store i32 %v0_148d8, i32* %r0.global-to-local, align 4
  %v1_148dc = icmp slt i32 %v0_148d8, 0
  br i1 %v1_148dc, label %dec_label_pc_149c0, label %dec_label_pc_148e4

dec_label_pc_148e4:                               ; preds = %dec_label_pc_148d0
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_148f0 = call i32 @function_14d28(i32 17, i32* null, i32 %v2_14834)
  store i32 %v4_148f0, i32* %r0.global-to-local, align 4
  %v1_148f4 = icmp slt i32 %v4_148f0, 0
  br i1 %v1_148f4, label %dec_label_pc_148fc, label %dec_label_pc_14924

dec_label_pc_148fc:                               ; preds = %dec_label_pc_148e4
  %v0_148fc = call i32 @function_13b78()
  store i32 %v2_14880, i32* %r1.global-to-local, align 4
  store i32 %v0_148fc, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_14910 = inttoptr i32 %v0_148fc to i32*
  %v2_14910 = load i32, i32* %v1_14910, align 4
  store i32 %v2_14910, i32* @r4, align 4
  %v3_14914 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14914 = call i32 @function_1384c(i32 2, %_TYPEDEF_sigset_t* %v3_14914, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_1491c = load i32, i32* @r4, align 4
  %v1_1491c = load i32, i32* %r5.global-to-local, align 4
  %v2_1491c = inttoptr i32 %v1_1491c to i32*
  store i32 %v0_1491c, i32* %v2_1491c, align 4
  %v17_149c8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_149c4

dec_label_pc_14924:                               ; preds = %dec_label_pc_148e4
  %v2_14924 = load i32, i32* %stack_var_-424, align 4
  %v7_14928 = icmp eq i32 %v2_14924, 1
  %v2_14930 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_14930, i32* @r4, align 4
  br i1 %v7_14928, label %dec_label_pc_14938, label %dec_label_pc_1496c

dec_label_pc_14938:                               ; preds = %dec_label_pc_14924
  store i32 %v2_14930, i32* %r1.global-to-local, align 4
  store i32 %v2_14930, i32* %r0.global-to-local, align 4
  %v2_14940 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_14940 = call i32 @function_151c4(%timespec* %v2_14940, i32 %v2_14930)
  store i32 %v3_14940, i32* %r0.global-to-local, align 4
  store i32 %v3_14940, i32* %r6.global-to-local, align 4
  %v0_14948 = call i32 @function_13b78()
  store i32 %v2_14880, i32* %r1.global-to-local, align 4
  store i32 %v0_14948, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_1495c = inttoptr i32 %v0_14948 to i32*
  %v2_1495c = load i32, i32* %v1_1495c, align 4
  store i32 %v2_1495c, i32* @r4, align 4
  %v3_14960 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14960 = call i32 @function_1384c(i32 2, %_TYPEDEF_sigset_t* %v3_14960, i32 0)
  store i32 %v4_14960, i32* %r0.global-to-local, align 4
  %v0_14964 = load i32, i32* @r4, align 4
  %v1_14964 = load i32, i32* %r5.global-to-local, align 4
  %v2_14964 = inttoptr i32 %v1_14964 to i32*
  store i32 %v0_14964, i32* %v2_14964, align 4
  %v0_14994.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14994

dec_label_pc_1496c:                               ; preds = %dec_label_pc_14924
  store i32 %v2_14880, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_14978 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14978 = call i32 @function_1384c(i32 2, %_TYPEDEF_sigset_t* %v3_14978, i32 0)
  store i32 %v4_14978, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14988

dec_label_pc_14988:                               ; preds = %dec_label_pc_1489c.dec_label_pc_14988_crit_edge, %dec_label_pc_1496c
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_1489c.dec_label_pc_14988_crit_edge ], [ %v2_14930, %dec_label_pc_1496c ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_1498c = bitcast i32* %stack_var_-28 to %timespec*
  %v3_1498c = call i32 @function_151c4(%timespec* %v2_1498c, i32 %storemerge.pre-phi)
  store i32 %v3_1498c, i32* %r0.global-to-local, align 4
  store i32 %v3_1498c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14994

dec_label_pc_14994:                               ; preds = %dec_label_pc_14938, %dec_label_pc_14988
  %v0_14994 = phi i32 [ %v0_14994.pr, %dec_label_pc_14938 ], [ %v3_1498c, %dec_label_pc_14988 ]
  %v2_14994 = icmp eq i32 %v0_14994, 0
  br i1 %v2_14994, label %dec_label_pc_149b8, label %dec_label_pc_1499c

dec_label_pc_1499c:                               ; preds = %dec_label_pc_14994
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_149a4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_149a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_149c4

dec_label_pc_149b8:                               ; preds = %dec_label_pc_1482c, %dec_label_pc_14994
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_149c4

dec_label_pc_149c0:                               ; preds = %dec_label_pc_14880, %dec_label_pc_148d0, %dec_label_pc_1485c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_149c4

dec_label_pc_149c4:                               ; preds = %dec_label_pc_1499c, %dec_label_pc_149b8, %dec_label_pc_148fc, %dec_label_pc_149c0
  %v17_149c8 = phi i32 [ %v3_149a4, %dec_label_pc_1499c ], [ 0, %dec_label_pc_149b8 ], [ %v17_149c8.pre, %dec_label_pc_148fc ], [ -1, %dec_label_pc_149c0 ]
  %v2_149c8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_149c8, i32* @r4, align 4
  store i32 %v6_1482c, i32* @r5, align 4
  store i32 %v9_1482c, i32* @r6, align 4
  ret i32 %v17_149c8

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_14930, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_148c0, { 0, 2, 1 }
  uselistorder i32 %v2_14880, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_14878, { 1, 0, 2 }
  uselistorder i32 %v1_1484c, { 0, 2, 1 }
  uselistorder i32 %v16_1482c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 14, 13, 1 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 7, 8, 1, 10, 9, 12, 11, 4, 13, 15, 16, 14, 18, 17, 19, 3, 20, 2, 21, 22, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_14d28, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_1384c, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_1400c, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_149c4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_149c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_149b8, { 1, 0 }
  uselistorder label %dec_label_pc_14994, { 1, 0 }
  uselistorder label %dec_label_pc_14988, { 1, 0 }
  uselistorder label %dec_label_pc_148b8, { 1, 0 }
  uselistorder label %dec_label_pc_14844, { 1, 0 }
}

define i32 @function_149d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_149fc:
  %stack_var_-8 = alloca i32, align 4
  %v3_149d0 = load i32, i32* @r4, align 4
  store i32 %v3_149d0, i32* %stack_var_-8, align 4
  %v2_14a00 = load i32, i32* @global_var_1f220.908, align 4
  %v2_14a04 = icmp eq i32 %v2_14a00, 0
  br i1 %v2_14a04, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_149fc
  store i32 84496, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_14a00)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_149fc, %bb
  %v2_14a14 = load i32, i32* @global_var_1f224.910, align 4
  %v2_14a18 = icmp eq i32 %v2_14a14, 0
  br i1 %v2_14a18, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_14a1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_14a1c, i32* @r4, align 4
  %v9_14a1c = load i32, i32* @r0, align 4
  ret i32 %v9_14a1c

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_14a28.911 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_14a14)
  %v2_14a28 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14a28, i32* @r4, align 4
  %v8_14a28 = load i32, i32* @r0, align 4
  ret i32 %v8_14a28

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14a3c() local_unnamed_addr {
dec_label_pc_14a3c:
  ret i32 0
}

define i32 @function_14a44(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14a44:
  %v1_14a44 = load i32, i32* @r0, align 4
  ret i32 %v1_14a44
}

define i32 @function_14a48(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14a48:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14a48 = load i32, i32* @r4, align 4
  store i32 %v3_14a48, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_14a58 = call i32 @function_1350c(i32 %arg1, i32 1)
  %v7_14a5c = icmp eq i32 %v2_14a58, -1
  br i1 %v7_14a5c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14a48
  %v3_14a60 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14a60, i32* @r4, align 4
  ret i32 %v2_14a58

bb4:                                              ; preds = %dec_label_pc_14a48
  %v0_14a64 = load i32, i32* @r4, align 4
  %v4_14a6c = call i32 @function_136fc(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_168a0.913, i32 0, i32 0), i32 %v0_14a64)
  %v1_14a70 = load i32, i32* %r5.global-to-local, align 4
  %v9_14a70 = icmp eq i32 %v4_14a6c, %v1_14a70
  br i1 %v9_14a70, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_14a74 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14a74, i32* @r4, align 4
  ret i32 %v4_14a6c

bb6:                                              ; preds = %bb4
  %v0_14a78 = call i32 @function_14650()
  %v0_14a7c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14a7c, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v5_14a7c = udiv i32 %v0_14a78, 131072
  %v6_14a7c = and i32 %v5_14a7c, %v0_14a64
  store i32 %v6_14a7c, i32* @r6, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_14a78

; uselistorder directives
  uselistorder i32 %v0_14a78, { 1, 0 }
  uselistorder i32 %v2_14a58, { 1, 0 }
  uselistorder i1* @cpsr_z, { 12, 11, 0, 1, 13, 10, 7, 8, 2, 3, 4, 5, 6, 9 }
  uselistorder i32 ()* @function_14650, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_136fc, { 7, 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_1350c, { 0, 5, 11, 10, 13, 12, 9, 8, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_14a80(i32 %arg1) local_unnamed_addr {
dec_label_pc_14a80:
  %v2_14a84 = load i32, i32* @global_var_1f228.915, align 4
  %v2_14a88 = icmp eq i32 %v2_14a84, 0
  br i1 %v2_14a88, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_14a80
  %v6_14a94 = load i32, i32* @r0, align 4
  ret i32 %v6_14a94

bb2:                                              ; preds = %dec_label_pc_14a80
  store i32 1, i32* @global_var_1f228.915, align 4
  store i32 4096, i32* @global_var_1f21c.869, align 4
  ret i32 undef
}

define i32 @function_14adc(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14adc:
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r6, align 4
  %v4_14ae0 = mul i32 %arg2, 4
  %v5_14ae0 = add i32 %tmp, %v4_14ae0
  %v2_14ae4 = load i32, i32* %arg3, align 4
  %v2_14ae8 = ptrtoint i32* %stack_var_-120 to i32
  %v1_14aec = add i32 %v5_14ae0, 4
  %v9_14af0 = icmp eq i32 %v1_14aec, %v2_14ae4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1f214.920, align 4
  store i32 %v1_14aec, i32* @global_var_1f218.922, align 4
  store i32 %arg6, i32* @global_var_1f224.910, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_14af0, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_14adc
  store i32 %v5_14ae0, i32* @global_var_1f218.922, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_14adc, %bb
  %v2_14b30 = bitcast i32* %stack_var_-120 to i8*
  %v3_14b30 = call i32 @function_13be0(i8* %v2_14b30, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1f218.922, align 4
  br label %dec_label_pc_14b40

dec_label_pc_14b40:                               ; preds = %dec_label_pc_14b40, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_14b40, %dec_label_pc_14b40 ]
  %v1_14b40 = inttoptr i32 %storemerge to i32*
  %v2_14b40 = load i32, i32* %v1_14b40, align 4
  %v4_14b40 = add i32 %storemerge, 4
  %v2_14b44 = icmp eq i32 %v2_14b40, 0
  br i1 %v2_14b44, label %dec_label_pc_14b50, label %dec_label_pc_14b40

dec_label_pc_14b50:                               ; preds = %dec_label_pc_14b40
  store i32 %v4_14b40, i32* @r4, align 4
  %v1_14b7022 = inttoptr i32 %v4_14b40 to i32*
  %v2_14b7023 = load i32, i32* %v1_14b7022, align 4
  %v2_14b7425 = icmp eq i32 %v2_14b7023, 0
  br i1 %v2_14b7425, label %dec_label_pc_14b7c, label %dec_label_pc_14b58

dec_label_pc_14b58:                               ; preds = %dec_label_pc_14b50, %dec_label_pc_14b70
  %v5_14b5c = phi i32 [ %v2_14b70, %dec_label_pc_14b70 ], [ %v2_14b7023, %dec_label_pc_14b50 ]
  %v2_14b58 = icmp ugt i32 %v5_14b5c, 13
  %v7_14b58 = icmp eq i32 %v5_14b5c, 14
  %v2_14b5c = xor i1 %v2_14b58, true
  %v3_14b5c = or i1 %v7_14b58, %v2_14b5c
  br i1 %v3_14b5c, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_14b58
  %v6_14b5c = and i32 %v5_14b5c, 536870912
  %v7_14b5c = icmp ne i32 %v6_14b5c, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14b58, %bb42
  %v1_14b68 = phi i1 [ %v2_14b58, %dec_label_pc_14b58 ], [ %v7_14b5c, %bb42 ]
  %v2_14b60 = xor i1 %v1_14b68, true
  %v3_14b60 = or i1 %v7_14b58, %v2_14b60
  br i1 %v3_14b60, label %bb44, label %dec_label_pc_14b70

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_14b70

dec_label_pc_14b70:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_14b60, i32 ptrtoint (i32* @global_var_13bc0.924 to i32))
  %v0_14b6c = load i32, i32* @r4, align 4
  %v1_14b6c = add i32 %v0_14b6c, 8
  store i32 %v1_14b6c, i32* @r4, align 4
  %v1_14b70 = inttoptr i32 %v1_14b6c to i32*
  %v2_14b70 = load i32, i32* %v1_14b70, align 4
  %v2_14b74 = icmp eq i32 %v2_14b70, 0
  br i1 %v2_14b74, label %dec_label_pc_14b7c, label %dec_label_pc_14b58

dec_label_pc_14b7c:                               ; preds = %dec_label_pc_14b70, %dec_label_pc_14b50
  %v1_14b80 = call i32 @function_15be4(i32 %v2_14ae8)
  store i32 %v1_14b80, i32* @r0, align 4
  %v1_14b84 = call i32 @function_14a80(i32 %v1_14b80)
  store i32 %v1_14b84, i32* @r0, align 4
  %v2_14b90 = icmp eq i32 %tmp37, 0
  br i1 %v2_14b90, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_14b7c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_14b7c, %bb45
  %v0_14ba0 = phi i32 [ %tmp37, %dec_label_pc_14b7c ], [ 4096, %bb45 ]
  %v3_14b98 = icmp eq i32 %tmp36, -1
  %v8_14b98 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1f21c.869 to i32), i32* @r2, align 4
  store i32 %v0_14ba0, i32* @global_var_1f21c.869, align 4
  br i1 %v3_14b98, label %dec_label_pc_14ba8, label %dec_label_pc_14bd0

dec_label_pc_14ba8:                               ; preds = %bb46
  %v0_14ba8 = call i32 @function_15134()
  store i32 %v0_14ba8, i32* @r0, align 4
  store i32 %v0_14ba8, i32* @r4, align 4
  %v0_14bb0 = call i32 @function_150dc()
  %v0_14bb4 = load i32, i32* @r4, align 4
  %v9_14bb4 = icmp eq i32 %v0_14bb4, %v0_14bb0
  br i1 %v9_14bb4, label %dec_label_pc_14bbc, label %dec_label_pc_14bf8

dec_label_pc_14bbc:                               ; preds = %dec_label_pc_14ba8
  %v1_14bbc = call i32 @function_15108(i32 %v0_14bb0)
  store i32 %v1_14bbc, i32* @r0, align 4
  store i32 %v1_14bbc, i32* @r4, align 4
  %v0_14bc4 = call i32 @function_150b0()
  %v0_14bc8 = load i32, i32* @r4, align 4
  %v9_14bc8 = icmp eq i32 %v0_14bc8, %v0_14bc4
  br i1 %v9_14bc8, label %dec_label_pc_14bd0, label %dec_label_pc_14bf8

dec_label_pc_14bd0:                               ; preds = %dec_label_pc_14bbc, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_14b98, label %dec_label_pc_14c64, label %dec_label_pc_14bdc

dec_label_pc_14bdc:                               ; preds = %dec_label_pc_14bd0
  %v9_14be0 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_14be0, label %dec_label_pc_14be8, label %dec_label_pc_14bf8

dec_label_pc_14be8:                               ; preds = %dec_label_pc_14bdc
  br label %dec_label_pc_14bf8

dec_label_pc_14bf8:                               ; preds = %dec_label_pc_14be8, %dec_label_pc_14bdc, %dec_label_pc_14bbc, %dec_label_pc_14ba8
  %v2_14c00 = call i32 @function_14a48(i32 0, i32 32768)
  %v2_14c0c = call i32 @function_14a48(i32 1, i32 32770)
  %v2_14c18 = call i32 @function_14a48(i32 2, i32 32770)
  br label %dec_label_pc_14c64

dec_label_pc_14c64:                               ; preds = %dec_label_pc_14bf8, %dec_label_pc_14bd0
  %v0_14c28 = load i32, i32* @r6, align 4
  %v1_14c28 = inttoptr i32 %v0_14c28 to i32*
  %v2_14c28 = load i32, i32* %v1_14c28, align 4
  store i32 %v2_14c28, i32* @global_var_1f16c, align 4
  store i32 %arg5, i32* @global_var_1f220.908, align 4
  %v2_14c64 = icmp eq i32 %arg4, 0
  br i1 %v2_14c64, label %dec_label_pc_14ca0, label %bb47

bb47:                                             ; preds = %dec_label_pc_14c64
  br label %dec_label_pc_14ca0

dec_label_pc_14ca0:                               ; preds = %dec_label_pc_14c64, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_14cb0 = call i32 @function_13b78()
  %v2_14cb8 = inttoptr i32 %v1_14cb0 to i32*
  store i32 0, i32* %v2_14cb8, align 4
  %v0_14ce4 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_14cf0 = call i32 @function_14798(i32 %v0_14ce4)
  ret i32 %v1_14cf0

; uselistorder directives
  uselistorder i32 %v2_14b70, { 1, 0 }
  uselistorder i32 %v1_14b6c, { 1, 0 }
  uselistorder i1 %v2_14b58, { 1, 0 }
  uselistorder i32 %v4_14b40, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_14798, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_14a48, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1f21c.869, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 87, 2, 3, 4, 5, 6, 57, 7, 8, 9, 10, 11, 112, 52, 58, 64, 89, 65, 113, 15, 16, 17, 90, 80, 91, 92, 93, 59, 18, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 19, 20, 110, 111, 79, 55, 13, 14, 78, 12, 114, 32, 31, 66, 73, 67, 74, 62, 72, 63, 77, 115, 21, 116, 117, 22, 23, 24, 118, 81, 82, 25, 26, 119, 83, 84, 27, 28, 120, 85, 86, 29, 30, 61, 121, 122, 75, 123, 53, 68, 33, 54, 34, 35, 36, 69, 37, 60, 38, 39, 40, 41, 42, 43, 124, 125, 126, 127, 70, 128, 129, 130, 131, 132, 133, 134, 135, 48, 136, 49, 50, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 47, 151, 152, 153, 154, 155, 156, 46, 157, 56, 158, 71, 76, 51, 159, 44, 45, 88, 160 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_14ca0, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_14b70, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_14b58, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_14d28(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14d28:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_14d28 = load i32, i32* @r4, align 4
  %v6_14d28 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_14d2c = icmp eq i32* %arg2, null
  %v2_14d30 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_14d2c, label %dec_label_pc_14d9c, label %dec_label_pc_14d40

dec_label_pc_14d40:                               ; preds = %dec_label_pc_14d28
  %v2_14d44 = load i32, i32* %arg2, align 4
  %v4_14d44 = add i32 %tmp, 4
  store i32 %v4_14d44, i32* @r1, align 4
  %v2_14d48 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_14d48, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_14d44, i32* %stack_var_-156, align 4
  %v3_14d54 = call i32 @function_13bc0(i32 %v2_14d48, i32 %v4_14d44, i32 128)
  store i32 %v3_14d54, i32* %r0.global-to-local, align 4
  %v0_14d58 = load i32, i32* @r4, align 4
  %v1_14d58 = add i32 %v0_14d58, 132
  %v2_14d58 = inttoptr i32 %v1_14d58 to i32*
  %v3_14d58 = load i32, i32* %v2_14d58, align 4
  %v1_14d5c = and i32 %v3_14d58, 67108864
  %v2_14d5c = icmp eq i32 %v1_14d5c, 0
  br i1 %v2_14d5c, label %dec_label_pc_14d70, label %bb

bb:                                               ; preds = %dec_label_pc_14d40
  br label %dec_label_pc_14d8c

dec_label_pc_14d70:                               ; preds = %dec_label_pc_14d40
  %v1_14d78 = and i32 %v3_14d58, 4
  %v2_14d78 = icmp eq i32 %v1_14d78, 0
  br i1 %v2_14d78, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_14d70
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_14d70, %bb20
  br label %dec_label_pc_14d8c

dec_label_pc_14d8c:                               ; preds = %bb, %bb21
  %v2_14d8c = icmp eq i32 %v0_14d58, 0
  %v3_14d90 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_14d90 = select i1 %v2_14d8c, i32 0, i32 %v3_14d90
  %v0_14d9c.pre = load i32, i32* @r5, align 4
  %v0_14dac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14d9c

dec_label_pc_14d9c:                               ; preds = %dec_label_pc_14d8c, %dec_label_pc_14d28
  %v0_14dac = phi i32 [ %arg1, %dec_label_pc_14d28 ], [ %v0_14dac.pre, %dec_label_pc_14d8c ]
  %v0_14d9c = phi i32 [ %arg3, %dec_label_pc_14d28 ], [ %v0_14d9c.pre, %dec_label_pc_14d8c ]
  %storemerge = phi i32 [ 0, %dec_label_pc_14d28 ], [ %.v3_14d90, %dec_label_pc_14d8c ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_14d9c = icmp eq i32 %v0_14d9c, 0
  %.v2_14d30 = select i1 %v2_14d9c, i32 0, i32 %v2_14d30
  store i32 %.v2_14d30, i32* @r2, align 4
  store i32 %v0_14dac, i32* %r0.global-to-local, align 4
  %v1_14db0 = call i32 @function_14e14(i32 %v0_14dac)
  store i32 %v1_14db0, i32* %r0.global-to-local, align 4
  %v0_14db4 = load i32, i32* @r5, align 4
  %v2_14db4 = icmp eq i32 %v0_14db4, 0
  br i1 %v2_14db4, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_14d9c
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_14d9c, %bb25
  %v0_14dc4.pr = phi i32 [ 0, %dec_label_pc_14d9c ], [ 1, %bb25 ]
  %v1_14dbc = icmp slt i32 %v1_14db0, 0
  br i1 %v1_14dbc, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_14df8

thread-pre-split:                                 ; preds = %bb26
  %v2_14dc4 = icmp eq i32 %v0_14dc4.pr, 0
  store i32 %v1_14db0, i32* @r4, align 4
  br i1 %v2_14dc4, label %dec_label_pc_14df8, label %dec_label_pc_14dd0

dec_label_pc_14dd0:                               ; preds = %thread-pre-split
  %v2_14dd0 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_14db4, i32* %r0.global-to-local, align 4
  %v2_14dd8 = inttoptr i32 %v0_14db4 to i32*
  store i32 %v2_14dd0, i32* %v2_14dd8, align 4
  %v3_14dd8 = load i32, i32* %r0.global-to-local, align 4
  %v4_14dd8 = add i32 %v3_14dd8, 4
  store i32 %v4_14dd8, i32* @r0, align 4
  %v2_14ddc = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14ddc, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_14de4 = call i32 @function_13bc0(i32 %v4_14dd8, i32 %v2_14ddc, i32 128)
  store i32 %v3_14de4, i32* %r0.global-to-local, align 4
  %v1_14dec = load i32, i32* @r5, align 4
  %v2_14dec = add i32 %v1_14dec, 136
  %v3_14dec = inttoptr i32 %v2_14dec to i32*
  %v1_14df4 = load i32, i32* @r5, align 4
  %v2_14df4 = add i32 %v1_14df4, 132
  %v3_14df4 = inttoptr i32 %v2_14df4 to i32*
  %v0_14df8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14df8

dec_label_pc_14df8:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_14dd0
  %v0_14df8 = phi i32 [ %v1_14db0, %thread-pre-split ], [ %v0_14df8.pre, %dec_label_pc_14dd0 ], [ %v1_14db0, %thread-pre-split.thread ]
  store i32 %v0_14df8, i32* %r0.global-to-local, align 4
  store i32 %v3_14d28, i32* @r4, align 4
  store i32 %v6_14d28, i32* @r5, align 4
  ret i32 %v0_14df8

; uselistorder directives
  uselistorder i32 %v0_14df8, { 1, 0 }
  uselistorder i32 %v0_14db4, { 1, 0, 2 }
  uselistorder i32 %v0_14dac, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_14df8, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_14d8c, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_14e14(i32 %arg1) local_unnamed_addr {
dec_label_pc_14e14:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14e14 = load i32, i32* @r4, align 4
  store i32 %v3_14e14, i32* %stack_var_-8, align 4
  %v1_14e18 = load i32, i32* @r1, align 4
  %v2_14e18 = inttoptr i32 %v1_14e18 to %sigaction*
  %v3_14e18 = load i32, i32* @r2, align 4
  %v4_14e18 = inttoptr i32 %v3_14e18 to %sigaction*
  %v5_14e18 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_14e18, %sigaction* %v4_14e18)
  store i32 %v5_14e18, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14e18, -4095
  br i1 %tmp, label %dec_label_pc_14e38, label %dec_label_pc_14e28

dec_label_pc_14e28:                               ; preds = %dec_label_pc_14e14
  %v0_14e28 = call i32 @function_13b78()
  %v0_14e2c = load i32, i32* %r4.global-to-local, align 4
  %v1_14e2c = sub i32 0, %v0_14e2c
  %v2_14e30 = inttoptr i32 %v0_14e28 to i32*
  store i32 %v1_14e2c, i32* %v2_14e30, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14e38

dec_label_pc_14e38:                               ; preds = %dec_label_pc_14e14, %dec_label_pc_14e28
  %v0_14e38 = phi i32 [ %v5_14e18, %dec_label_pc_14e14 ], [ -1, %dec_label_pc_14e28 ]
  %v2_14e3c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14e3c, i32* %r4.global-to-local, align 4
  ret i32 %v0_14e38

; uselistorder directives
  uselistorder i32 %v5_14e18, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14e38, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_14e40(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_14e40:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_14e68() local_unnamed_addr {
dec_label_pc_14e68:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_14e78 = load i32, i32* @r0, align 4
  %v4_14e78 = call i32 @fstat(i32 %v0_14e78, %stat* %tmp4)
  store i32 %v4_14e78, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14e78, -4095
  br i1 %tmp, label %dec_label_pc_14e9c, label %dec_label_pc_14e88

dec_label_pc_14e88:                               ; preds = %dec_label_pc_14e68
  %v0_14e88 = call i32 @function_13b78()
  %v0_14e8c = load i32, i32* %r4.global-to-local, align 4
  %v1_14e8c = sub i32 0, %v0_14e8c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14e94 = inttoptr i32 %v0_14e88 to i32*
  store i32 %v1_14e8c, i32* %v2_14e94, align 4
  br label %dec_label_pc_14eac

dec_label_pc_14e9c:                               ; preds = %dec_label_pc_14e68
  %v2_14e9c = icmp eq i32 %v4_14e78, 0
  store i32 85676, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_14e9c, i32 ptrtoint (i32* @global_var_15584.941 to i32))
  br label %dec_label_pc_14eac

dec_label_pc_14eac:                               ; preds = %dec_label_pc_14e88, %dec_label_pc_14e9c
  %v0_14eac = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_14eac

; uselistorder directives
  uselistorder i32 %v4_14e78, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 3, 14, 12, 13, 7, 8, 0, 1, 2, 4, 5, 6, 9, 10, 11 }
  uselistorder label %dec_label_pc_14eac, { 1, 0 }
}

define i32 @function_14eb8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14eb8:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_14eb8 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14ec0 = call i32 @function_14f4c()
  store i32 %v0_14ec0, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_14ec0, 1
  br i1 %tmp8, label %dec_label_pc_14f44, label %dec_label_pc_14f30.preheader

dec_label_pc_14f30.preheader:                     ; preds = %dec_label_pc_14eb8
  %v5_14ec8 = load i32, i32* @r4, align 4
  %v7_14ec8 = add i32 %v5_14ec8, %v0_14ec0
  store i32 %v7_14ec8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14f30

dec_label_pc_14ed4:                               ; preds = %dec_label_pc_14f30
  %v1_14ed4 = add i32 %v2_14ee4, 16
  %v2_14ed4 = inttoptr i32 %v1_14ed4 to i32*
  %v3_14ed4 = load i32, i32* %v2_14ed4, align 4
  store i32 %v3_14ed4, i32* @lr, align 4
  %v2_14ed8 = inttoptr i32 %v1_14f34 to i32*
  %v3_14ed8 = load i32, i32* %v2_14ed8, align 4
  store i32 %v3_14ed8, i32* %r2.global-to-local, align 4
  %v1_14edc = add i32 %v2_14ee4, 18
  %v2_14edc = inttoptr i32 %v1_14edc to i8*
  %v3_14edc = load i8, i8* %v2_14edc, align 1
  %v4_14edc = zext i8 %v3_14edc to i32
  store i32 %v4_14edc, i32* %ip.global-to-local, align 4
  %v3_14ee0 = sdiv i32 %v3_14ed4, 256
  store i32 %v3_14ee0, i32* %r3.global-to-local, align 4
  %v1_14ee4 = trunc i32 %v3_14ed4 to i8
  %v4_14ee4 = inttoptr i32 %v1_14f34 to i8*
  store i8 %v1_14ee4, i8* %v4_14ee4, align 1
  %v0_14ee8 = load i32, i32* %r2.global-to-local, align 4
  %v1_14ee8 = load i32, i32* @r4, align 4
  %v2_14ee8 = add i32 %v1_14ee8, 4
  %v3_14ee8 = inttoptr i32 %v2_14ee8 to i32*
  store i32 %v0_14ee8, i32* %v3_14ee8, align 4
  %v0_14eec = load i32, i32* %ip.global-to-local, align 4
  %v1_14eec = trunc i32 %v0_14eec to i8
  %v2_14eec = load i32, i32* @r4, align 4
  %v3_14eec = add i32 %v2_14eec, 10
  %v4_14eec = inttoptr i32 %v3_14eec to i8*
  store i8 %v1_14eec, i8* %v4_14eec, align 1
  %v0_14ef0 = load i32, i32* %r3.global-to-local, align 4
  %v1_14ef0 = trunc i32 %v0_14ef0 to i8
  %v2_14ef0 = load i32, i32* @r4, align 4
  %v3_14ef0 = add i32 %v2_14ef0, 9
  %v4_14ef0 = inttoptr i32 %v3_14ef0 to i8*
  store i8 %v1_14ef0, i8* %v4_14ef0, align 1
  %v0_14ef4 = load i32, i32* @r4, align 4
  %v1_14ef4 = add i32 %v0_14ef4, 8
  %v2_14ef4 = inttoptr i32 %v1_14ef4 to i8*
  %v3_14ef4 = load i8, i8* %v2_14ef4, align 1
  %v4_14ef4 = zext i8 %v3_14ef4 to i32
  store i32 %v4_14ef4, i32* %r2.global-to-local, align 4
  %v0_14ef8 = load i32, i32* @r5, align 4
  %v1_14ef8 = add i32 %v0_14ef8, 1
  %v2_14ef8 = inttoptr i32 %v1_14ef8 to i8*
  %v3_14ef8 = load i8, i8* %v2_14ef8, align 1
  %v4_14ef8 = zext i8 %v3_14ef8 to i32
  store i32 %v4_14ef8, i32* %r3.global-to-local, align 4
  %v4_14efc = mul nuw nsw i32 %v4_14ef8, 256
  %v5_14efc = or i32 %v4_14efc, %v4_14ef4
  %v1_14f00 = add nsw i32 %v5_14efc, -19
  store i32 %v1_14f00, i32* @r2, align 4
  %v3_14f04 = call i32 @function_13bd0(i32 %v1_14f3c, i32 %v1_14f38, i32 %v1_14f00)
  %v0_14f08 = load i32, i32* @r4, align 4
  %v1_14f08 = add i32 %v0_14f08, 8
  %v2_14f08 = inttoptr i32 %v1_14f08 to i8*
  %v3_14f08 = load i8, i8* %v2_14f08, align 1
  %v4_14f08 = zext i8 %v3_14f08 to i32
  store i32 %v4_14f08, i32* %r3.global-to-local, align 4
  %v0_14f0c = load i32, i32* @r5, align 4
  %v1_14f0c = add i32 %v0_14f0c, 1
  %v2_14f0c = inttoptr i32 %v1_14f0c to i8*
  %v3_14f0c = load i8, i8* %v2_14f0c, align 1
  %v4_14f0c = zext i8 %v3_14f0c to i32
  store i32 %v0_14f08, i32* @r0, align 4
  %v4_14f14 = mul nuw nsw i32 %v4_14f0c, 256
  %v5_14f14 = or i32 %v4_14f14, %v4_14f08
  store i32 %v5_14f14, i32* @r2, align 4
  store i32 %v0_14f08, i32* @r1, align 4
  %v3_14f1c = call i32 @function_13bd0(i32 %v0_14f08, i32 %v0_14f08, i32 %v5_14f14)
  %v0_14f20 = load i32, i32* @r4, align 4
  %v1_14f20 = add i32 %v0_14f20, 8
  %v2_14f20 = inttoptr i32 %v1_14f20 to i8*
  %v3_14f20 = load i8, i8* %v2_14f20, align 1
  %v4_14f20 = zext i8 %v3_14f20 to i32
  store i32 %v4_14f20, i32* %r3.global-to-local, align 4
  %v0_14f24 = load i32, i32* @r5, align 4
  %v1_14f24 = add i32 %v0_14f24, 1
  %v2_14f24 = inttoptr i32 %v1_14f24 to i8*
  %v3_14f24 = load i8, i8* %v2_14f24, align 1
  %v4_14f24 = zext i8 %v3_14f24 to i32
  store i32 %v4_14f24, i32* @r2, align 4
  %v4_14f28 = mul nuw nsw i32 %v4_14f24, 256
  %v5_14f28 = or i32 %v4_14f28, %v4_14f20
  store i32 %v5_14f28, i32* %r3.global-to-local, align 4
  %v2_14f2c = add i32 %v5_14f28, %v0_14f20
  store i32 %v2_14f2c, i32* @r4, align 4
  %v1_14f30.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14f30

dec_label_pc_14f30:                               ; preds = %dec_label_pc_14f30.preheader, %dec_label_pc_14ed4
  %v1_14f30 = phi i32 [ %v7_14ec8, %dec_label_pc_14f30.preheader ], [ %v1_14f30.pre, %dec_label_pc_14ed4 ]
  %v2_14ee4 = phi i32 [ %v5_14ec8, %dec_label_pc_14f30.preheader ], [ %v2_14f2c, %dec_label_pc_14ed4 ]
  %v3_14f30 = icmp ult i32 %v2_14ee4, %v1_14f30
  %v1_14f34 = add i32 %v2_14ee4, 8
  store i32 %v1_14f34, i32* @r5, align 4
  %v1_14f38 = add i32 %v2_14ee4, 19
  store i32 %v1_14f38, i32* @r1, align 4
  %v1_14f3c = add i32 %v2_14ee4, 11
  store i32 %v1_14f3c, i32* @r0, align 4
  br i1 %v3_14f30, label %dec_label_pc_14ed4, label %dec_label_pc_14f44.loopexit

dec_label_pc_14f44.loopexit:                      ; preds = %dec_label_pc_14f30
  %v0_14f44.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14f44

dec_label_pc_14f44:                               ; preds = %dec_label_pc_14eb8, %dec_label_pc_14f44.loopexit
  %v0_14f44 = phi i32 [ %v0_14f44.pre, %dec_label_pc_14f44.loopexit ], [ %v0_14ec0, %dec_label_pc_14eb8 ]
  store i32 %v6_14eb8, i32* @r5, align 4
  ret i32 %v0_14f44

; uselistorder directives
  uselistorder i32 %v1_14f3c, { 1, 0 }
  uselistorder i32 %v1_14f38, { 1, 0 }
  uselistorder i32 %v1_14f34, { 2, 1, 0 }
  uselistorder i32 %v2_14ee4, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_14f08, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_14ed4, { 1, 0, 2 }
  uselistorder i32 %v5_14ec8, { 1, 0 }
  uselistorder i32 %v0_14ec0, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_13bd0, { 6, 5, 7, 8, 4, 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14f44, { 1, 0 }
  uselistorder label %dec_label_pc_14f30, { 1, 0 }
}

define i32 @function_14f4c() local_unnamed_addr {
dec_label_pc_14f4c:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_14f50 = load i32, i32* @r4, align 4
  %v9_14f50 = load i32, i32* @r6, align 4
  %v0_14f54 = load i32, i32* @r2, align 4
  %v1_14f54 = add i32 %v0_14f54, 6
  %v2_14f5c = ptrtoint i32* %stack_var_-60 to i32
  %v1_14f60 = and i32 %v1_14f54, -4
  store i32 %v1_14f60, i32* %r3.global-to-local, align 4
  %v2_14f64 = sub i32 %v2_14f5c, %v1_14f60
  %v0_14f68 = load i32, i32* @r1, align 4
  store i32 %v0_14f68, i32* %r8.global-to-local, align 4
  store i32 %v0_14f54, i32* %stack_var_-60, align 4
  store i32 %v2_14f64, i32* %sl.global-to-local, align 4
  %v0_14f74 = load i32, i32* @r0, align 4
  %v1_14f78 = inttoptr i32 %v2_14f64 to %linux_dirent64*
  store i32 %v2_14f64, i32* %r1.global-to-local, align 4
  %v5_14f7c = call i32 @getdents64(i32 %v0_14f74, %linux_dirent64* %v1_14f78, i32 %v0_14f54)
  store i32 %v5_14f7c, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_14f7c, -4095
  br i1 %tmp, label %dec_label_pc_14fa0, label %dec_label_pc_14f8c

dec_label_pc_14f8c:                               ; preds = %dec_label_pc_14f4c
  %v0_14f8c = call i32 @function_13b78()
  %v0_14f90 = load i32, i32* @r6, align 4
  %v1_14f90 = sub i32 0, %v0_14f90
  store i32 %v1_14f90, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_14f98 = inttoptr i32 %v0_14f8c to i32*
  store i32 %v1_14f90, i32* %v2_14f98, align 4
  %v0_14fa8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14fa8

dec_label_pc_14fa0:                               ; preds = %dec_label_pc_14f4c
  br i1 false, label %dec_label_pc_14fa8, label %dec_label_pc_14fb0

dec_label_pc_14fa8:                               ; preds = %dec_label_pc_14fa0, %dec_label_pc_14f8c
  %v0_14fa8 = phi i32 [ -1, %dec_label_pc_14fa0 ], [ %v0_14fa8.pre, %dec_label_pc_14f8c ]
  store i32 %v0_14fa8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_150a4

dec_label_pc_14fb0:                               ; preds = %dec_label_pc_14fa0
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_14fb8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14fb8, i32* @r5, align 4
  %v0_14fbc = load i32, i32* @sp, align 4
  store i32 %v0_14fbc, i32* @r4, align 4
  br label %dec_label_pc_15080

dec_label_pc_14fcc:                               ; preds = %dec_label_pc_15080
  %v2_15098 = add i32 %v3_15084, %v0_15098
  %v1_14fcc = add i32 %v0_14fd0, 17
  %v2_14fcc = inttoptr i32 %v1_14fcc to i8*
  %v3_14fcc = load i8, i8* %v2_14fcc, align 1
  %v4_14fcc = zext i8 %v3_14fcc to i32
  %v2_14fd0 = inttoptr i32 %v1_1508c to i8*
  %v3_14fd0 = load i8, i8* %v2_14fd0, align 1
  %v4_14fd0 = zext i8 %v3_14fd0 to i32
  %v4_14fd4 = mul nuw nsw i32 %v4_14fcc, 256
  %v5_14fd4 = or i32 %v4_14fd0, %v4_14fd4
  %v1_14fd8 = add nuw nsw i32 %v5_14fd4, 3
  %v1_14fdc = and i32 %v1_14fd8, 131068
  store i32 %v1_14fdc, i32* %r3.global-to-local, align 4
  %v2_14fe0 = add i32 %v1_14fdc, %v2_15020
  store i32 %v2_14fe0, i32* %sb.global-to-local, align 4
  %v9_14fe4 = icmp eq i32 %v2_14fe0, %v2_15098
  %v1_14fe8 = and i32 %v1_14fd8, 128
  %v2_14fec = icmp eq i32 %v1_14fe8, 0
  %v3_14fec = or i1 %v9_14fe4, %v2_14fec
  br i1 %v3_14fec, label %dec_label_pc_15020, label %dec_label_pc_14ff0

dec_label_pc_14ff0:                               ; preds = %dec_label_pc_14fcc
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_15000 = call i32 @function_15160(i32 %v0_14f74, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_15004 = load i32, i32* @r5, align 4
  %v1_15004 = load i32, i32* %r8.global-to-local, align 4
  %v9_15004 = icmp eq i32 %v0_15004, %v1_15004
  br i1 %v9_15004, label %dec_label_pc_1500c, label %dec_label_pc_150a0

dec_label_pc_1500c:                               ; preds = %dec_label_pc_14ff0
  %v0_1500c = call i32 @function_13b78()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_15018 = inttoptr i32 %v0_1500c to i32*
  store i32 22, i32* %v2_15018, align 4
  %v0_150a4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_150a4

dec_label_pc_15020:                               ; preds = %dec_label_pc_14fcc
  %v3_14fe811 = udiv i32 %v1_14fd8, 256
  %v1_15020 = trunc i32 %v3_14fe811 to i8
  %v3_15020 = add i32 %v2_15020, 17
  %v4_15020 = inttoptr i32 %v3_15020 to i8*
  store i8 %v1_15020, i8* %v4_15020, align 1
  %v0_15024 = load i32, i32* %r3.global-to-local, align 4
  %v1_15024 = trunc i32 %v0_15024 to i8
  %v2_15024 = load i32, i32* @r5, align 4
  %v3_15024 = add i32 %v2_15024, 16
  %v4_15024 = inttoptr i32 %v3_15024 to i8*
  store i8 %v1_15024, i8* %v4_15024, align 1
  %v0_15028 = load i32, i32* @r4, align 4
  %v1_15028 = add i32 %v0_15028, 8
  %v1_1502c = inttoptr i32 %v1_15028 to i32*
  %v2_1502c = load i32, i32* %v1_1502c, align 4
  %v3_1502c = add i32 %v0_15028, 12
  %v4_1502c = inttoptr i32 %v3_1502c to i32*
  %v5_1502c = load i32, i32* %v4_1502c, align 4
  store i32 %v5_1502c, i32* %r3.global-to-local, align 4
  %v1_15038 = inttoptr i32 %v0_15028 to i32*
  %v2_15038 = load i32, i32* %v1_15038, align 4
  %v3_15038 = add i32 %v0_15028, 4
  %v4_15038 = inttoptr i32 %v3_15038 to i32*
  %v5_15038 = load i32, i32* %v4_15038, align 4
  store i32 %v5_15038, i32* %r3.global-to-local, align 4
  %v0_1503c = load i32, i32* @r5, align 4
  %v1_1503c = inttoptr i32 %v0_1503c to i32*
  store i32 %v2_15038, i32* %v1_1503c, align 4
  %v3_1503c = add i32 %v0_1503c, 4
  %v4_1503c = inttoptr i32 %v3_1503c to i32*
  %v5_1503c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_1503c, i32* %v4_1503c, align 4
  %v0_15040 = load i32, i32* @r4, align 4
  %v1_15040 = add i32 %v0_15040, 8
  %v1_15044 = inttoptr i32 %v1_15040 to i32*
  %v2_15044 = load i32, i32* %v1_15044, align 4
  %v3_15044 = add i32 %v0_15040, 12
  %v4_15044 = inttoptr i32 %v3_15044 to i32*
  %v5_15044 = load i32, i32* %v4_15044, align 4
  store i32 %v5_15044, i32* %r3.global-to-local, align 4
  %v1_15048 = load i32, i32* @r5, align 4
  %v2_15048 = add i32 %v1_15048, 8
  %v3_15048 = inttoptr i32 %v2_15048 to i32*
  store i32 %v2_15044, i32* %v3_15048, align 4
  %v0_1504c = load i32, i32* %r3.global-to-local, align 4
  %v1_1504c = load i32, i32* @r5, align 4
  %v2_1504c = add i32 %v1_1504c, 12
  %v3_1504c = inttoptr i32 %v2_1504c to i32*
  store i32 %v0_1504c, i32* %v3_1504c, align 4
  %v0_15050 = load i32, i32* @r4, align 4
  %v1_15050 = add i32 %v0_15050, 18
  %v2_15050 = inttoptr i32 %v1_15050 to i8*
  %v3_15050 = load i8, i8* %v2_15050, align 1
  %v4_15050 = zext i8 %v3_15050 to i32
  store i32 %v4_15050, i32* %r3.global-to-local, align 4
  %v2_15054 = load i32, i32* @r5, align 4
  %v3_15054 = add i32 %v2_15054, 18
  %v4_15054 = inttoptr i32 %v3_15054 to i8*
  store i8 %v3_15050, i8* %v4_15054, align 1
  %v0_15058 = load i32, i32* @r4, align 4
  %v1_15058 = add i32 %v0_15058, 16
  %v2_15058 = inttoptr i32 %v1_15058 to i8*
  %v3_15058 = load i8, i8* %v2_15058, align 1
  %v4_15058 = zext i8 %v3_15058 to i32
  %v0_1505c = load i32, i32* %r7.global-to-local, align 4
  %v1_1505c = add i32 %v0_1505c, 1
  %v2_1505c = inttoptr i32 %v1_1505c to i8*
  %v3_1505c = load i8, i8* %v2_1505c, align 1
  %v4_1505c = zext i8 %v3_1505c to i32
  store i32 %v4_1505c, i32* %r3.global-to-local, align 4
  %v4_15060 = mul nuw nsw i32 %v4_1505c, 256
  %v5_15060 = or i32 %v4_15060, %v4_15058
  %v1_15064 = add nsw i32 %v5_15060, -19
  store i32 %v1_15064, i32* @r2, align 4
  %v3_15068 = call i32 @function_13bc0(i32 %v1_15090, i32 %v1_15094, i32 %v1_15064)
  %v0_1506c = load i32, i32* @r4, align 4
  %v1_1506c = add i32 %v0_1506c, 16
  %v2_1506c = inttoptr i32 %v1_1506c to i8*
  %v3_1506c = load i8, i8* %v2_1506c, align 1
  %v4_1506c = zext i8 %v3_1506c to i32
  store i32 %v4_1506c, i32* %r3.global-to-local, align 4
  %v0_15070 = load i32, i32* %r7.global-to-local, align 4
  %v1_15070 = add i32 %v0_15070, 1
  %v2_15070 = inttoptr i32 %v1_15070 to i8*
  %v3_15070 = load i8, i8* %v2_15070, align 1
  %v4_15070 = zext i8 %v3_15070 to i32
  %v4_15074 = mul nuw nsw i32 %v4_15070, 256
  %v5_15074 = or i32 %v4_15074, %v4_1506c
  store i32 %v5_15074, i32* %r3.global-to-local, align 4
  %v2_15078 = add i32 %v5_15074, %v0_1506c
  store i32 %v2_15078, i32* @r4, align 4
  %v0_1507c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_1507c, i32* @r5, align 4
  %v1_15080.pre = load i32, i32* @r6, align 4
  %v0_15098.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_15080

dec_label_pc_15080:                               ; preds = %dec_label_pc_14fb0, %dec_label_pc_15020
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_14fb0 ], [ %v2_1502c, %dec_label_pc_15020 ]
  %v0_15098 = phi i32 [ %v0_14fb8, %dec_label_pc_14fb0 ], [ %v0_15098.pre, %dec_label_pc_15020 ]
  %v2_15020 = phi i32 [ %v0_14fb8, %dec_label_pc_14fb0 ], [ %v0_1507c, %dec_label_pc_15020 ]
  %v0_14fd0 = phi i32 [ %v0_14fbc, %dec_label_pc_14fb0 ], [ %v2_15078, %dec_label_pc_15020 ]
  %v1_15080 = phi i32 [ %v5_14f7c, %dec_label_pc_14fb0 ], [ %v1_15080.pre, %dec_label_pc_15020 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_14fb0 ], [ %v5_1502c, %dec_label_pc_15020 ]
  %v0_15080 = load i32, i32* %sl.global-to-local, align 4
  %v2_15080 = add i32 %v0_15080, %v1_15080
  store i32 %v2_15080, i32* %r3.global-to-local, align 4
  %v3_15084 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_15084, i32* @r2, align 4
  %v3_15088 = icmp ult i32 %v0_14fd0, %v2_15080
  %v1_1508c = add i32 %v0_14fd0, 16
  store i32 %v1_1508c, i32* %r7.global-to-local, align 4
  %v1_15090 = add i32 %v2_15020, 19
  store i32 %v1_15090, i32* @r0, align 4
  %v1_15094 = add i32 %v0_14fd0, 19
  store i32 %v1_15094, i32* @r1, align 4
  br i1 %v3_15088, label %dec_label_pc_14fcc, label %dec_label_pc_150a0

dec_label_pc_150a0:                               ; preds = %dec_label_pc_15080, %dec_label_pc_14ff0
  %v1_150a0 = phi i32 [ %v0_15004, %dec_label_pc_14ff0 ], [ %v2_15020, %dec_label_pc_15080 ]
  %v0_150a0 = phi i32 [ %v1_15004, %dec_label_pc_14ff0 ], [ %v0_15098, %dec_label_pc_15080 ]
  %v2_150a0 = sub i32 %v1_150a0, %v0_150a0
  store i32 %v2_150a0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_150a4

dec_label_pc_150a4:                               ; preds = %dec_label_pc_1500c, %dec_label_pc_14fa8, %dec_label_pc_150a0
  %v0_150a4 = phi i32 [ %v0_150a4.pre, %dec_label_pc_1500c ], [ %v0_14fa8, %dec_label_pc_14fa8 ], [ %v2_150a0, %dec_label_pc_150a0 ]
  store i32 %v3_14f50, i32* @r4, align 4
  store i32 %v9_14f50, i32* %r6.global-to-local, align 4
  ret i32 %v0_150a4

; uselistorder directives
  uselistorder i32 %v1_15094, { 1, 0 }
  uselistorder i32 %v1_15090, { 1, 0 }
  uselistorder i32 %v1_1508c, { 1, 0 }
  uselistorder i32 %v3_15084, { 1, 0 }
  uselistorder i32 %v0_14fd0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_15020, { 0, 3, 1, 2 }
  uselistorder i32 %v0_15028, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14fb8, { 1, 0, 2 }
  uselistorder i32 %v5_14f7c, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_13bc0, { 4, 1, 0, 3, 6, 5, 2 }
  uselistorder i32 128, { 11, 12, 34, 13, 35, 25, 16, 17, 18, 26, 2, 27, 19, 20, 21, 22, 23, 28, 3, 29, 4, 14, 15, 30, 31, 6, 0, 1, 7, 8, 9, 32, 5, 33, 24, 10 }
  uselistorder i32* @sp, { 6, 4, 1, 5, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 1, 122, 123, 124, 413, 415, 414, 344, 345, 311, 312, 313, 314, 315, 316, 317, 318, 332, 346, 347, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 10, 11, 84, 85, 12, 13, 21, 14, 15, 16, 17, 18, 19, 20, 86, 87, 22, 88, 89, 90, 91, 92, 93, 99, 100, 94, 95, 96, 97, 98, 285, 286, 287, 288, 0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 143, 144, 145, 146, 8, 147, 148, 149, 2, 150, 151, 154, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 178, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 192, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 224, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 3, 258, 259, 260, 261, 262, 263, 264, 265, 266, 274, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 289, 290, 291, 292, 300, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 337, 334, 335, 336, 338, 339, 9, 340, 341, 342, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 4, 358, 359, 360, 361, 362, 363, 365, 5, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 6, 7, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412 }
  uselistorder label %dec_label_pc_150a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15080, { 1, 0 }
}

define i32 @function_150b0() local_unnamed_addr {
dec_label_pc_150b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_150b0 = load i32, i32* @r4, align 4
  store i32 %v3_150b0, i32* %stack_var_-8, align 4
  %v0_150b8 = load i32, i32* @r0, align 4
  store i32 %v0_150b8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_150b8, -4095
  br i1 %tmp, label %dec_label_pc_150d4, label %dec_label_pc_150c4

dec_label_pc_150c4:                               ; preds = %dec_label_pc_150b0
  %v0_150c4 = call i32 @function_13b78()
  %v0_150c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_150c8 = sub i32 0, %v0_150c8
  %v2_150cc = inttoptr i32 %v0_150c4 to i32*
  store i32 %v1_150c8, i32* %v2_150cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_150d8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_150d4

dec_label_pc_150d4:                               ; preds = %dec_label_pc_150b0, %dec_label_pc_150c4
  %v2_150d8 = phi i32 [ %v3_150b0, %dec_label_pc_150b0 ], [ %v2_150d8.pre, %dec_label_pc_150c4 ]
  %v0_150d4 = phi i32 [ %v0_150b8, %dec_label_pc_150b0 ], [ -1, %dec_label_pc_150c4 ]
  store i32 %v2_150d8, i32* @r4, align 4
  ret i32 %v0_150d4

; uselistorder directives
  uselistorder i32 %v0_150b8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_150d4, { 1, 0 }
}

define i32 @function_150dc() local_unnamed_addr {
dec_label_pc_150dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_150dc = load i32, i32* @r4, align 4
  store i32 %v3_150dc, i32* %stack_var_-8, align 4
  %v0_150e4 = load i32, i32* @r0, align 4
  store i32 %v0_150e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_150e4, -4095
  br i1 %tmp, label %dec_label_pc_15100, label %dec_label_pc_150f0

dec_label_pc_150f0:                               ; preds = %dec_label_pc_150dc
  %v0_150f0 = call i32 @function_13b78()
  %v0_150f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_150f4 = sub i32 0, %v0_150f4
  %v2_150f8 = inttoptr i32 %v0_150f0 to i32*
  store i32 %v1_150f4, i32* %v2_150f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15104.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15100

dec_label_pc_15100:                               ; preds = %dec_label_pc_150dc, %dec_label_pc_150f0
  %v2_15104 = phi i32 [ %v3_150dc, %dec_label_pc_150dc ], [ %v2_15104.pre, %dec_label_pc_150f0 ]
  %v0_15100 = phi i32 [ %v0_150e4, %dec_label_pc_150dc ], [ -1, %dec_label_pc_150f0 ]
  store i32 %v2_15104, i32* @r4, align 4
  ret i32 %v0_15100

; uselistorder directives
  uselistorder i32 %v0_150e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15100, { 1, 0 }
}

define i32 @function_15108(i32 %arg1) local_unnamed_addr {
dec_label_pc_15108:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15108 = load i32, i32* @r4, align 4
  store i32 %v3_15108, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1512c, label %dec_label_pc_1511c

dec_label_pc_1511c:                               ; preds = %dec_label_pc_15108
  %v0_1511c = call i32 @function_13b78()
  %v0_15120 = load i32, i32* %r4.global-to-local, align 4
  %v1_15120 = sub i32 0, %v0_15120
  %v2_15124 = inttoptr i32 %v0_1511c to i32*
  store i32 %v1_15120, i32* %v2_15124, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15130.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1512c

dec_label_pc_1512c:                               ; preds = %dec_label_pc_15108, %dec_label_pc_1511c
  %v2_15130 = phi i32 [ %v3_15108, %dec_label_pc_15108 ], [ %v2_15130.pre, %dec_label_pc_1511c ]
  %v0_1512c = phi i32 [ %arg1, %dec_label_pc_15108 ], [ -1, %dec_label_pc_1511c ]
  store i32 %v2_15130, i32* %r4.global-to-local, align 4
  ret i32 %v0_1512c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1512c, { 1, 0 }
}

define i32 @function_15134() local_unnamed_addr {
dec_label_pc_15134:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15134 = load i32, i32* @r4, align 4
  store i32 %v3_15134, i32* %stack_var_-8, align 4
  %v0_1513c = load i32, i32* @r0, align 4
  store i32 %v0_1513c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1513c, -4095
  br i1 %tmp, label %dec_label_pc_15158, label %dec_label_pc_15148

dec_label_pc_15148:                               ; preds = %dec_label_pc_15134
  %v0_15148 = call i32 @function_13b78()
  %v0_1514c = load i32, i32* %r4.global-to-local, align 4
  %v1_1514c = sub i32 0, %v0_1514c
  %v2_15150 = inttoptr i32 %v0_15148 to i32*
  store i32 %v1_1514c, i32* %v2_15150, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1515c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15158

dec_label_pc_15158:                               ; preds = %dec_label_pc_15134, %dec_label_pc_15148
  %v2_1515c = phi i32 [ %v3_15134, %dec_label_pc_15134 ], [ %v2_1515c.pre, %dec_label_pc_15148 ]
  %v0_15158 = phi i32 [ %v0_1513c, %dec_label_pc_15134 ], [ -1, %dec_label_pc_15148 ]
  store i32 %v2_1515c, i32* %r4.global-to-local, align 4
  ret i32 %v0_15158

; uselistorder directives
  uselistorder i32 %v0_1513c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15158, { 1, 0 }
}

define i32 @function_15160(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15160:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_151a4, label %dec_label_pc_15190

dec_label_pc_15190:                               ; preds = %dec_label_pc_15160
  %v0_15190 = call i32 @function_13b78()
  %v0_15194 = load i32, i32* %r4.global-to-local, align 4
  %v1_15194 = sub i32 0, %v0_15194
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1519c = inttoptr i32 %v0_15190 to i32*
  store i32 %v1_15194, i32* %v2_1519c, align 4
  %v0_151ac.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_151ac

dec_label_pc_151a4:                               ; preds = %dec_label_pc_15160
  %v2_151a4 = icmp eq i32 %arg1, 0
  br i1 %v2_151a4, label %dec_label_pc_151b8, label %dec_label_pc_151ac

dec_label_pc_151ac:                               ; preds = %dec_label_pc_151a4, %dec_label_pc_15190
  %v0_151ac = phi i32 [ %arg1, %dec_label_pc_151a4 ], [ %v0_151ac.pre, %dec_label_pc_15190 ]
  br label %dec_label_pc_151bc

dec_label_pc_151b8:                               ; preds = %dec_label_pc_151a4
  br label %dec_label_pc_151bc

dec_label_pc_151bc:                               ; preds = %dec_label_pc_151ac, %dec_label_pc_151b8
  %v14_151c0 = phi i32 [ %v0_151ac, %dec_label_pc_151ac ], [ %tmp9, %dec_label_pc_151b8 ]
  ret i32 %v14_151c0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_151bc, { 1, 0 }
}

define i32 @function_151c4(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_151c4:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_151c4 = load i32, i32* @r4, align 4
  store i32 %v3_151c4, i32* %stack_var_-8, align 4
  %v6_151c8 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_151c8, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_151c8, -4095
  br i1 %tmp6, label %dec_label_pc_151e8, label %dec_label_pc_151d8

dec_label_pc_151d8:                               ; preds = %dec_label_pc_151c4
  %v0_151d8 = call i32 @function_13b78()
  %v0_151dc = load i32, i32* %r4.global-to-local, align 4
  %v1_151dc = sub i32 0, %v0_151dc
  %v2_151e0 = inttoptr i32 %v0_151d8 to i32*
  store i32 %v1_151dc, i32* %v2_151e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_151e8

dec_label_pc_151e8:                               ; preds = %dec_label_pc_151c4, %dec_label_pc_151d8
  %v0_151e8 = phi i32 [ %v6_151c8, %dec_label_pc_151c4 ], [ -1, %dec_label_pc_151d8 ]
  %v2_151ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_151ec, i32* %r4.global-to-local, align 4
  ret i32 %v0_151e8

; uselistorder directives
  uselistorder i32 %v6_151c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_151e8, { 1, 0 }
}

define i32 @function_151f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_151f0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_151f0 = load i32, i32* @r4, align 4
  store i32 %v3_151f0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1f234.943 to i32), i32* %r4.global-to-local, align 4
  %v2_151f8 = load i32, i32* @global_var_1f234.943, align 4
  %v2_151fc = icmp eq i32 %v2_151f8, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_151fc, label %dec_label_pc_1520c, label %dec_label_pc_15218

dec_label_pc_1520c:                               ; preds = %dec_label_pc_151f0
  %v2_1520c = call i32 @function_15c08(i32* null)
  %v1_15210 = icmp slt i32 %v2_1520c, 0
  br i1 %v1_15210, label %dec_label_pc_15238, label %dec_label_pc_15218thread-pre-split

dec_label_pc_15218thread-pre-split:               ; preds = %dec_label_pc_1520c
  %v0_1521c.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_15218.pre = load i32, i32* @global_var_1f234.943, align 4
  br label %dec_label_pc_15218

dec_label_pc_15218:                               ; preds = %dec_label_pc_15218thread-pre-split, %dec_label_pc_151f0
  %v2_15218 = phi i32 [ %v2_15218.pre, %dec_label_pc_15218thread-pre-split ], [ %v2_151f8, %dec_label_pc_151f0 ]
  %v1_15224 = phi i32 [ %v0_1521c.pr, %dec_label_pc_15218thread-pre-split ], [ %arg1, %dec_label_pc_151f0 ]
  %v2_1521c = icmp eq i32 %v1_15224, 0
  store i32 %v2_15218, i32* %r4.global-to-local, align 4
  br i1 %v2_1521c, label %dec_label_pc_1523c, label %dec_label_pc_1522c

dec_label_pc_1522c:                               ; preds = %dec_label_pc_15218
  %v2_15224 = add i32 %v1_15224, %v2_15218
  %v1_1522c = inttoptr i32 %v2_15224 to i32*
  %v2_1522c = call i32 @function_15c08(i32* %v1_1522c)
  %v1_15230 = icmp slt i32 %v2_1522c, 0
  br i1 %v1_15230, label %dec_label_pc_15238, label %dec_label_pc_1522c.dec_label_pc_1523c_crit_edge

dec_label_pc_1522c.dec_label_pc_1523c_crit_edge:  ; preds = %dec_label_pc_1522c
  %v0_1523c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1523c

dec_label_pc_15238:                               ; preds = %dec_label_pc_1522c, %dec_label_pc_1520c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1523c

dec_label_pc_1523c:                               ; preds = %dec_label_pc_1522c.dec_label_pc_1523c_crit_edge, %dec_label_pc_15218, %dec_label_pc_15238
  %v0_1523c = phi i32 [ %v0_1523c.pre, %dec_label_pc_1522c.dec_label_pc_1523c_crit_edge ], [ %v2_15218, %dec_label_pc_15218 ], [ -1, %dec_label_pc_15238 ]
  %v2_15240 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15240, i32* @r4, align 4
  ret i32 %v0_1523c

; uselistorder directives
  uselistorder i32 %v2_15218, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 7, 48, 49, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 2, 29, 30, 31, 35, 34, 33, 32, 47, 6, 36, 37, 38, 45, 39, 40, 41, 42, 43, 44, 5, 46 }
  uselistorder label %dec_label_pc_1523c, { 2, 0, 1 }
}

define i32 @function_15248(%tms* %arg1) local_unnamed_addr {
dec_label_pc_15248:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15248 = load i32, i32* @r4, align 4
  store i32 %v3_15248, i32* %stack_var_-8, align 4
  %v3_1524c = call i32 @times(%tms* %arg1)
  store i32 %v3_1524c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1524c, -4095
  br i1 %tmp, label %dec_label_pc_1526c, label %dec_label_pc_1525c

dec_label_pc_1525c:                               ; preds = %dec_label_pc_15248
  %v0_1525c = call i32 @function_13b78()
  %v0_15260 = load i32, i32* %r4.global-to-local, align 4
  %v1_15260 = sub i32 0, %v0_15260
  %v2_15264 = inttoptr i32 %v0_1525c to i32*
  store i32 %v1_15260, i32* %v2_15264, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1526c

dec_label_pc_1526c:                               ; preds = %dec_label_pc_15248, %dec_label_pc_1525c
  %v0_1526c = phi i32 [ %v3_1524c, %dec_label_pc_15248 ], [ -1, %dec_label_pc_1525c ]
  %v2_15270 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15270, i32* %r4.global-to-local, align 4
  ret i32 %v0_1526c

; uselistorder directives
  uselistorder i32 %v3_1524c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1526c, { 1, 0 }
}

define i32 @function_15274(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15274:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_15290 = inttoptr i32 %arg2 to i8*
  %v3_15290 = call i32 @function_13be0(i8* %v2_15290, i32 0)
  %v1_15294 = add i32 %tmp, 1
  %v2_15294 = inttoptr i32 %v1_15294 to i8*
  %v3_15294 = load i8, i8* %v2_15294, align 1
  %v4_15294 = zext i8 %v3_15294 to i32
  %v1_15298 = add i32 %tmp, 5
  %v2_15298 = inttoptr i32 %v1_15298 to i8*
  %v3_15298 = load i8, i8* %v2_15298, align 1
  %v4_15298 = zext i8 %v3_15298 to i32
  %v2_1529c = load i8, i8* %arg1, align 1
  %v3_1529c = zext i8 %v2_1529c to i32
  %v1_152a0 = add i32 %tmp, 4
  %v2_152a0 = inttoptr i32 %v1_152a0 to i8*
  %v3_152a0 = load i8, i8* %v2_152a0, align 1
  %v4_152a0 = zext i8 %v3_152a0 to i32
  %v1_152a4 = add i32 %tmp, 2
  %v2_152a4 = inttoptr i32 %v1_152a4 to i8*
  %v3_152a4 = load i8, i8* %v2_152a4, align 1
  %v4_152a4 = zext i8 %v3_152a4 to i32
  %v1_152a8 = add i32 %tmp, 6
  %v2_152a8 = inttoptr i32 %v1_152a8 to i8*
  %v3_152a8 = load i8, i8* %v2_152a8, align 1
  %v4_152a8 = zext i8 %v3_152a8 to i32
  %v1_152ac = add i32 %tmp, 3
  %v2_152ac = inttoptr i32 %v1_152ac to i8*
  %v3_152ac = load i8, i8* %v2_152ac, align 1
  %v4_152ac = zext i8 %v3_152ac to i32
  %v4_152b0 = mul nuw nsw i32 %v4_15294, 256
  %v5_152b0 = or i32 %v3_1529c, %v4_152b0
  %v4_152b4 = mul nuw nsw i32 %v4_15298, 256
  %v5_152b4 = or i32 %v4_152a0, %v4_152b4
  %v1_152b8 = add i32 %tmp, 7
  %v2_152b8 = inttoptr i32 %v1_152b8 to i8*
  %v3_152b8 = load i8, i8* %v2_152b8, align 1
  %v4_152b8 = zext i8 %v3_152b8 to i32
  %v4_152bc = mul nuw nsw i32 %v4_152a4, 65536
  %v5_152bc = or i32 %v4_152bc, %v5_152b0
  %v4_152c0 = mul nuw nsw i32 %v4_152a8, 65536
  %v5_152c0 = or i32 %v4_152c0, %v5_152b4
  %v4_152c4 = mul nuw i32 %v4_152ac, 16777216
  %v5_152c4 = or i32 %v4_152c4, %v5_152bc
  %v4_152c8 = mul nuw i32 %v4_152b8, 16777216
  %v5_152c8 = or i32 %v4_152c8, %v5_152c0
  store i32 %v5_152c8, i32* %r3.global-to-local, align 4
  %v0_152cc = load i32, i32* %r7.global-to-local, align 4
  %v1_152cc = inttoptr i32 %v0_152cc to i32*
  store i32 %v5_152c4, i32* %v1_152cc, align 4
  %v3_152cc = add i32 %v0_152cc, 4
  %v4_152cc = inttoptr i32 %v3_152cc to i32*
  %v5_152cc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_152cc, i32* %v4_152cc, align 4
  %v0_152d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_152d0 = add i32 %v0_152d0, 89
  %v2_152d0 = inttoptr i32 %v1_152d0 to i8*
  %v3_152d0 = load i8, i8* %v2_152d0, align 1
  %v4_152d0 = zext i8 %v3_152d0 to i32
  %v1_152d4 = add i32 %v0_152d0, 93
  %v2_152d4 = inttoptr i32 %v1_152d4 to i8*
  %v3_152d4 = load i8, i8* %v2_152d4, align 1
  %v4_152d4 = zext i8 %v3_152d4 to i32
  %v1_152d8 = add i32 %v0_152d0, 88
  %v2_152d8 = inttoptr i32 %v1_152d8 to i8*
  %v3_152d8 = load i8, i8* %v2_152d8, align 1
  %v4_152d8 = zext i8 %v3_152d8 to i32
  %v1_152dc = add i32 %v0_152d0, 92
  %v2_152dc = inttoptr i32 %v1_152dc to i8*
  %v3_152dc = load i8, i8* %v2_152dc, align 1
  %v4_152dc = zext i8 %v3_152dc to i32
  store i32 %v4_152dc, i32* %r3.global-to-local, align 4
  %v1_152e0 = add i32 %v0_152d0, 94
  %v2_152e0 = inttoptr i32 %v1_152e0 to i8*
  %v3_152e0 = load i8, i8* %v2_152e0, align 1
  %v4_152e0 = zext i8 %v3_152e0 to i32
  %v1_152e4 = add i32 %v0_152d0, 90
  %v2_152e4 = inttoptr i32 %v1_152e4 to i8*
  %v3_152e4 = load i8, i8* %v2_152e4, align 1
  %v4_152e4 = zext i8 %v3_152e4 to i32
  %v1_152e8 = add i32 %v0_152d0, 91
  %v2_152e8 = inttoptr i32 %v1_152e8 to i8*
  %v3_152e8 = load i8, i8* %v2_152e8, align 1
  %v4_152e8 = zext i8 %v3_152e8 to i32
  %v4_152ec = mul nuw nsw i32 %v4_152d0, 256
  %v5_152ec = or i32 %v4_152d8, %v4_152ec
  %v4_152f0 = mul nuw nsw i32 %v4_152d4, 256
  %v5_152f0 = or i32 %v4_152dc, %v4_152f0
  store i32 %v5_152f0, i32* %r3.global-to-local, align 4
  %v1_152f4 = add i32 %v0_152d0, 95
  %v2_152f4 = inttoptr i32 %v1_152f4 to i8*
  %v3_152f4 = load i8, i8* %v2_152f4, align 1
  %v4_152f4 = zext i8 %v3_152f4 to i32
  %v4_152f8 = mul nuw nsw i32 %v4_152e0, 65536
  %v5_152f8 = or i32 %v4_152f8, %v5_152f0
  store i32 %v5_152f8, i32* %r3.global-to-local, align 4
  %v4_152fc = mul nuw nsw i32 %v4_152e4, 65536
  %v5_152fc = or i32 %v4_152fc, %v5_152ec
  %v4_15300 = mul nuw i32 %v4_152e8, 16777216
  %v5_15300 = or i32 %v4_15300, %v5_152fc
  %v4_15304 = mul nuw i32 %v4_152f4, 16777216
  %v5_15304 = or i32 %v4_15304, %v5_152f8
  store i32 %v5_15304, i32* %r6.global-to-local, align 4
  %v1_15308 = load i32, i32* %r7.global-to-local, align 4
  %v2_15308 = add i32 %v1_15308, 88
  %v3_15308 = inttoptr i32 %v2_15308 to i32*
  store i32 %v5_15300, i32* %v3_15308, align 4
  %v0_1530c = load i32, i32* %r6.global-to-local, align 4
  %v1_1530c = load i32, i32* %r7.global-to-local, align 4
  %v2_1530c = add i32 %v1_1530c, 92
  %v3_1530c = inttoptr i32 %v2_1530c to i32*
  store i32 %v0_1530c, i32* %v3_1530c, align 4
  %v0_15310 = load i32, i32* %r4.global-to-local, align 4
  %v1_15310 = add i32 %v0_15310, 13
  %v2_15310 = inttoptr i32 %v1_15310 to i8*
  %v3_15310 = load i8, i8* %v2_15310, align 1
  %v4_15310 = zext i8 %v3_15310 to i32
  %v1_15314 = add i32 %v0_15310, 12
  %v2_15314 = inttoptr i32 %v1_15314 to i8*
  %v3_15314 = load i8, i8* %v2_15314, align 1
  %v4_15314 = zext i8 %v3_15314 to i32
  store i32 %v4_15314, i32* %r3.global-to-local, align 4
  %v1_15318 = add i32 %v0_15310, 14
  %v2_15318 = inttoptr i32 %v1_15318 to i8*
  %v3_15318 = load i8, i8* %v2_15318, align 1
  %v4_15318 = zext i8 %v3_15318 to i32
  %v4_1531c = mul nuw nsw i32 %v4_15310, 256
  %v5_1531c = or i32 %v4_15314, %v4_1531c
  store i32 %v5_1531c, i32* %r3.global-to-local, align 4
  %v1_15320 = add i32 %v0_15310, 15
  %v2_15320 = inttoptr i32 %v1_15320 to i8*
  %v3_15320 = load i8, i8* %v2_15320, align 1
  %v4_15320 = zext i8 %v3_15320 to i32
  %v4_15324 = mul nuw nsw i32 %v4_15318, 65536
  %v5_15324 = or i32 %v4_15324, %v5_1531c
  %v4_15328 = mul nuw i32 %v4_15320, 16777216
  %v5_15328 = or i32 %v5_15324, %v4_15328
  store i32 %v5_15328, i32* %r3.global-to-local, align 4
  %v1_1532c = load i32, i32* %r7.global-to-local, align 4
  %v2_1532c = add i32 %v1_1532c, 12
  %v3_1532c = inttoptr i32 %v2_1532c to i32*
  store i32 %v5_15328, i32* %v3_1532c, align 4
  %v0_15330 = load i32, i32* %r4.global-to-local, align 4
  %v1_15330 = add i32 %v0_15330, 17
  %v2_15330 = inttoptr i32 %v1_15330 to i8*
  %v3_15330 = load i8, i8* %v2_15330, align 1
  %v4_15330 = zext i8 %v3_15330 to i32
  %v1_15334 = add i32 %v0_15330, 16
  %v2_15334 = inttoptr i32 %v1_15334 to i8*
  %v3_15334 = load i8, i8* %v2_15334, align 1
  %v4_15334 = zext i8 %v3_15334 to i32
  store i32 %v4_15334, i32* %r3.global-to-local, align 4
  %v1_15338 = add i32 %v0_15330, 18
  %v2_15338 = inttoptr i32 %v1_15338 to i8*
  %v3_15338 = load i8, i8* %v2_15338, align 1
  %v4_15338 = zext i8 %v3_15338 to i32
  %v4_1533c = mul nuw nsw i32 %v4_15330, 256
  %v5_1533c = or i32 %v4_15334, %v4_1533c
  store i32 %v5_1533c, i32* %r3.global-to-local, align 4
  %v1_15340 = add i32 %v0_15330, 19
  %v2_15340 = inttoptr i32 %v1_15340 to i8*
  %v3_15340 = load i8, i8* %v2_15340, align 1
  %v4_15340 = zext i8 %v3_15340 to i32
  %v4_15344 = mul nuw nsw i32 %v4_15338, 65536
  %v5_15344 = or i32 %v4_15344, %v5_1533c
  %v4_15348 = mul nuw i32 %v4_15340, 16777216
  %v5_15348 = or i32 %v5_15344, %v4_15348
  store i32 %v5_15348, i32* %r3.global-to-local, align 4
  %v1_1534c = load i32, i32* %r7.global-to-local, align 4
  %v2_1534c = add i32 %v1_1534c, 16
  %v3_1534c = inttoptr i32 %v2_1534c to i32*
  store i32 %v5_15348, i32* %v3_1534c, align 4
  %v0_15350 = load i32, i32* %r4.global-to-local, align 4
  %v1_15350 = add i32 %v0_15350, 21
  %v2_15350 = inttoptr i32 %v1_15350 to i8*
  %v3_15350 = load i8, i8* %v2_15350, align 1
  %v4_15350 = zext i8 %v3_15350 to i32
  %v1_15354 = add i32 %v0_15350, 20
  %v2_15354 = inttoptr i32 %v1_15354 to i8*
  %v3_15354 = load i8, i8* %v2_15354, align 1
  %v4_15354 = zext i8 %v3_15354 to i32
  store i32 %v4_15354, i32* %r3.global-to-local, align 4
  %v1_15358 = add i32 %v0_15350, 22
  %v2_15358 = inttoptr i32 %v1_15358 to i8*
  %v3_15358 = load i8, i8* %v2_15358, align 1
  %v4_15358 = zext i8 %v3_15358 to i32
  %v4_1535c = mul nuw nsw i32 %v4_15350, 256
  %v5_1535c = or i32 %v4_15354, %v4_1535c
  store i32 %v5_1535c, i32* %r3.global-to-local, align 4
  %v1_15360 = add i32 %v0_15350, 23
  %v2_15360 = inttoptr i32 %v1_15360 to i8*
  %v3_15360 = load i8, i8* %v2_15360, align 1
  %v4_15360 = zext i8 %v3_15360 to i32
  %v4_15364 = mul nuw nsw i32 %v4_15358, 65536
  %v5_15364 = or i32 %v4_15364, %v5_1535c
  %v4_15368 = mul nuw i32 %v4_15360, 16777216
  %v5_15368 = or i32 %v5_15364, %v4_15368
  store i32 %v5_15368, i32* %r3.global-to-local, align 4
  %v1_1536c = load i32, i32* %r7.global-to-local, align 4
  %v2_1536c = add i32 %v1_1536c, 20
  %v3_1536c = inttoptr i32 %v2_1536c to i32*
  store i32 %v5_15368, i32* %v3_1536c, align 4
  %v0_15370 = load i32, i32* %r4.global-to-local, align 4
  %v1_15370 = add i32 %v0_15370, 25
  %v2_15370 = inttoptr i32 %v1_15370 to i8*
  %v3_15370 = load i8, i8* %v2_15370, align 1
  %v4_15370 = zext i8 %v3_15370 to i32
  %v1_15374 = add i32 %v0_15370, 24
  %v2_15374 = inttoptr i32 %v1_15374 to i8*
  %v3_15374 = load i8, i8* %v2_15374, align 1
  %v4_15374 = zext i8 %v3_15374 to i32
  store i32 %v4_15374, i32* %r3.global-to-local, align 4
  %v1_15378 = add i32 %v0_15370, 26
  %v2_15378 = inttoptr i32 %v1_15378 to i8*
  %v3_15378 = load i8, i8* %v2_15378, align 1
  %v4_15378 = zext i8 %v3_15378 to i32
  %v4_1537c = mul nuw nsw i32 %v4_15370, 256
  %v5_1537c = or i32 %v4_15374, %v4_1537c
  store i32 %v5_1537c, i32* %r3.global-to-local, align 4
  %v1_15380 = add i32 %v0_15370, 27
  %v2_15380 = inttoptr i32 %v1_15380 to i8*
  %v3_15380 = load i8, i8* %v2_15380, align 1
  %v4_15380 = zext i8 %v3_15380 to i32
  %v4_15384 = mul nuw nsw i32 %v4_15378, 65536
  %v5_15384 = or i32 %v4_15384, %v5_1537c
  %v4_15388 = mul nuw i32 %v4_15380, 16777216
  %v5_15388 = or i32 %v5_15384, %v4_15388
  store i32 %v5_15388, i32* %r3.global-to-local, align 4
  %v1_1538c = load i32, i32* %r7.global-to-local, align 4
  %v2_1538c = add i32 %v1_1538c, 24
  %v3_1538c = inttoptr i32 %v2_1538c to i32*
  store i32 %v5_15388, i32* %v3_1538c, align 4
  %v0_15390 = load i32, i32* %r4.global-to-local, align 4
  %v1_15390 = add i32 %v0_15390, 29
  %v2_15390 = inttoptr i32 %v1_15390 to i8*
  %v3_15390 = load i8, i8* %v2_15390, align 1
  %v4_15390 = zext i8 %v3_15390 to i32
  %v1_15394 = add i32 %v0_15390, 28
  %v2_15394 = inttoptr i32 %v1_15394 to i8*
  %v3_15394 = load i8, i8* %v2_15394, align 1
  %v4_15394 = zext i8 %v3_15394 to i32
  store i32 %v4_15394, i32* %r3.global-to-local, align 4
  %v1_15398 = add i32 %v0_15390, 30
  %v2_15398 = inttoptr i32 %v1_15398 to i8*
  %v3_15398 = load i8, i8* %v2_15398, align 1
  %v4_15398 = zext i8 %v3_15398 to i32
  %v4_1539c = mul nuw nsw i32 %v4_15390, 256
  %v5_1539c = or i32 %v4_15394, %v4_1539c
  store i32 %v5_1539c, i32* %r3.global-to-local, align 4
  %v1_153a0 = add i32 %v0_15390, 31
  %v2_153a0 = inttoptr i32 %v1_153a0 to i8*
  %v3_153a0 = load i8, i8* %v2_153a0, align 1
  %v4_153a0 = zext i8 %v3_153a0 to i32
  %v4_153a4 = mul nuw nsw i32 %v4_15398, 65536
  %v5_153a4 = or i32 %v4_153a4, %v5_1539c
  %v4_153a8 = mul nuw i32 %v4_153a0, 16777216
  %v5_153a8 = or i32 %v5_153a4, %v4_153a8
  store i32 %v5_153a8, i32* %r3.global-to-local, align 4
  %v1_153ac = load i32, i32* %r7.global-to-local, align 4
  %v2_153ac = add i32 %v1_153ac, 28
  %v3_153ac = inttoptr i32 %v2_153ac to i32*
  store i32 %v5_153a8, i32* %v3_153ac, align 4
  %v0_153b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_153b0 = add i32 %v0_153b0, 33
  %v2_153b0 = inttoptr i32 %v1_153b0 to i8*
  %v3_153b0 = load i8, i8* %v2_153b0, align 1
  %v4_153b0 = zext i8 %v3_153b0 to i32
  %v1_153b4 = add i32 %v0_153b0, 37
  %v2_153b4 = inttoptr i32 %v1_153b4 to i8*
  %v3_153b4 = load i8, i8* %v2_153b4, align 1
  %v4_153b4 = zext i8 %v3_153b4 to i32
  %v1_153b8 = add i32 %v0_153b0, 32
  %v2_153b8 = inttoptr i32 %v1_153b8 to i8*
  %v3_153b8 = load i8, i8* %v2_153b8, align 1
  %v4_153b8 = zext i8 %v3_153b8 to i32
  %v1_153bc = add i32 %v0_153b0, 36
  %v2_153bc = inttoptr i32 %v1_153bc to i8*
  %v3_153bc = load i8, i8* %v2_153bc, align 1
  %v4_153bc = zext i8 %v3_153bc to i32
  store i32 %v4_153bc, i32* %r3.global-to-local, align 4
  %v1_153c0 = add i32 %v0_153b0, 34
  %v2_153c0 = inttoptr i32 %v1_153c0 to i8*
  %v3_153c0 = load i8, i8* %v2_153c0, align 1
  %v4_153c0 = zext i8 %v3_153c0 to i32
  %v1_153c4 = add i32 %v0_153b0, 38
  %v2_153c4 = inttoptr i32 %v1_153c4 to i8*
  %v3_153c4 = load i8, i8* %v2_153c4, align 1
  %v4_153c4 = zext i8 %v3_153c4 to i32
  %v1_153c8 = add i32 %v0_153b0, 35
  %v2_153c8 = inttoptr i32 %v1_153c8 to i8*
  %v3_153c8 = load i8, i8* %v2_153c8, align 1
  %v4_153c8 = zext i8 %v3_153c8 to i32
  %v4_153cc = mul nuw nsw i32 %v4_153b0, 256
  %v5_153cc = or i32 %v4_153b8, %v4_153cc
  %v4_153d0 = mul nuw nsw i32 %v4_153b4, 256
  %v5_153d0 = or i32 %v4_153bc, %v4_153d0
  store i32 %v5_153d0, i32* %r3.global-to-local, align 4
  %v1_153d4 = add i32 %v0_153b0, 39
  %v2_153d4 = inttoptr i32 %v1_153d4 to i8*
  %v3_153d4 = load i8, i8* %v2_153d4, align 1
  %v4_153d4 = zext i8 %v3_153d4 to i32
  %v4_153d8 = mul nuw nsw i32 %v4_153c0, 65536
  %v5_153d8 = or i32 %v4_153d8, %v5_153cc
  %v4_153dc = mul nuw nsw i32 %v4_153c4, 65536
  %v5_153dc = or i32 %v4_153dc, %v5_153d0
  %v4_153e0 = mul nuw i32 %v4_153c8, 16777216
  %v5_153e0 = or i32 %v5_153d8, %v4_153e0
  %v4_153e4 = mul nuw i32 %v4_153d4, 16777216
  %v5_153e4 = or i32 %v5_153dc, %v4_153e4
  store i32 %v5_153e4, i32* %r3.global-to-local, align 4
  %v1_153f8 = load i32, i32* %r7.global-to-local, align 4
  %v2_153f8 = add i32 %v1_153f8, 32
  %v3_153f8 = inttoptr i32 %v2_153f8 to i32*
  store i32 %v5_153e0, i32* %v3_153f8, align 4
  %v0_153fc = load i32, i32* %r3.global-to-local, align 4
  %v1_153fc = load i32, i32* %r7.global-to-local, align 4
  %v2_153fc = add i32 %v1_153fc, 36
  %v3_153fc = inttoptr i32 %v2_153fc to i32*
  store i32 %v0_153fc, i32* %v3_153fc, align 4
  %v0_15400 = load i32, i32* %r4.global-to-local, align 4
  %v1_15400 = add i32 %v0_15400, 45
  %v2_15400 = inttoptr i32 %v1_15400 to i8*
  %v3_15400 = load i8, i8* %v2_15400, align 1
  %v4_15400 = zext i8 %v3_15400 to i32
  %v1_15404 = add i32 %v0_15400, 49
  %v2_15404 = inttoptr i32 %v1_15404 to i8*
  %v3_15404 = load i8, i8* %v2_15404, align 1
  %v4_15404 = zext i8 %v3_15404 to i32
  %v1_15408 = add i32 %v0_15400, 44
  %v2_15408 = inttoptr i32 %v1_15408 to i8*
  %v3_15408 = load i8, i8* %v2_15408, align 1
  %v4_15408 = zext i8 %v3_15408 to i32
  %v1_1540c = add i32 %v0_15400, 48
  %v2_1540c = inttoptr i32 %v1_1540c to i8*
  %v3_1540c = load i8, i8* %v2_1540c, align 1
  %v4_1540c = zext i8 %v3_1540c to i32
  store i32 %v4_1540c, i32* %r3.global-to-local, align 4
  %v1_15410 = add i32 %v0_15400, 46
  %v2_15410 = inttoptr i32 %v1_15410 to i8*
  %v3_15410 = load i8, i8* %v2_15410, align 1
  %v4_15410 = zext i8 %v3_15410 to i32
  %v1_15414 = add i32 %v0_15400, 50
  %v2_15414 = inttoptr i32 %v1_15414 to i8*
  %v3_15414 = load i8, i8* %v2_15414, align 1
  %v4_15414 = zext i8 %v3_15414 to i32
  %v1_15418 = add i32 %v0_15400, 47
  %v2_15418 = inttoptr i32 %v1_15418 to i8*
  %v3_15418 = load i8, i8* %v2_15418, align 1
  %v4_15418 = zext i8 %v3_15418 to i32
  %v4_1541c = mul nuw nsw i32 %v4_15400, 256
  %v5_1541c = or i32 %v4_15408, %v4_1541c
  %v4_15420 = mul nuw nsw i32 %v4_15404, 256
  %v5_15420 = or i32 %v4_1540c, %v4_15420
  store i32 %v5_15420, i32* %r3.global-to-local, align 4
  %v1_15424 = add i32 %v0_15400, 51
  %v2_15424 = inttoptr i32 %v1_15424 to i8*
  %v3_15424 = load i8, i8* %v2_15424, align 1
  %v4_15424 = zext i8 %v3_15424 to i32
  %v4_15428 = mul nuw nsw i32 %v4_15410, 65536
  %v5_15428 = or i32 %v4_15428, %v5_1541c
  %v4_1542c = mul nuw nsw i32 %v4_15414, 65536
  %v5_1542c = or i32 %v4_1542c, %v5_15420
  %v4_15430 = mul nuw i32 %v4_15418, 16777216
  %v5_15430 = or i32 %v5_15428, %v4_15430
  %v4_15434 = mul nuw i32 %v4_15424, 16777216
  %v5_15434 = or i32 %v5_1542c, %v4_15434
  store i32 %v5_15434, i32* %r3.global-to-local, align 4
  %v1_15448 = load i32, i32* %r7.global-to-local, align 4
  %v2_15448 = add i32 %v1_15448, 44
  %v3_15448 = inttoptr i32 %v2_15448 to i32*
  store i32 %v5_15430, i32* %v3_15448, align 4
  %v0_1544c = load i32, i32* %r3.global-to-local, align 4
  %v1_1544c = load i32, i32* %r7.global-to-local, align 4
  %v2_1544c = add i32 %v1_1544c, 48
  %v3_1544c = inttoptr i32 %v2_1544c to i32*
  store i32 %v0_1544c, i32* %v3_1544c, align 4
  %v0_15450 = load i32, i32* %r4.global-to-local, align 4
  %v1_15450 = add i32 %v0_15450, 53
  %v2_15450 = inttoptr i32 %v1_15450 to i8*
  %v3_15450 = load i8, i8* %v2_15450, align 1
  %v4_15450 = zext i8 %v3_15450 to i32
  %v1_15454 = add i32 %v0_15450, 52
  %v2_15454 = inttoptr i32 %v1_15454 to i8*
  %v3_15454 = load i8, i8* %v2_15454, align 1
  %v4_15454 = zext i8 %v3_15454 to i32
  store i32 %v4_15454, i32* %r3.global-to-local, align 4
  %v1_15458 = add i32 %v0_15450, 54
  %v2_15458 = inttoptr i32 %v1_15458 to i8*
  %v3_15458 = load i8, i8* %v2_15458, align 1
  %v4_15458 = zext i8 %v3_15458 to i32
  %v4_1545c = mul nuw nsw i32 %v4_15450, 256
  %v5_1545c = or i32 %v4_15454, %v4_1545c
  store i32 %v5_1545c, i32* %r3.global-to-local, align 4
  %v1_15460 = add i32 %v0_15450, 55
  %v2_15460 = inttoptr i32 %v1_15460 to i8*
  %v3_15460 = load i8, i8* %v2_15460, align 1
  %v4_15460 = zext i8 %v3_15460 to i32
  %v4_15464 = mul nuw nsw i32 %v4_15458, 65536
  %v5_15464 = or i32 %v4_15464, %v5_1545c
  %v4_15468 = mul nuw i32 %v4_15460, 16777216
  %v5_15468 = or i32 %v5_15464, %v4_15468
  store i32 %v5_15468, i32* %r3.global-to-local, align 4
  %v1_1546c = load i32, i32* %r7.global-to-local, align 4
  %v2_1546c = add i32 %v1_1546c, 52
  %v3_1546c = inttoptr i32 %v2_1546c to i32*
  store i32 %v5_15468, i32* %v3_1546c, align 4
  %v0_15470 = load i32, i32* %r4.global-to-local, align 4
  %v1_15470 = add i32 %v0_15470, 57
  %v2_15470 = inttoptr i32 %v1_15470 to i8*
  %v3_15470 = load i8, i8* %v2_15470, align 1
  %v4_15470 = zext i8 %v3_15470 to i32
  %v1_15474 = add i32 %v0_15470, 56
  %v2_15474 = inttoptr i32 %v1_15474 to i8*
  %v3_15474 = load i8, i8* %v2_15474, align 1
  %v4_15474 = zext i8 %v3_15474 to i32
  %v1_15478 = add i32 %v0_15470, 60
  %v2_15478 = inttoptr i32 %v1_15478 to i8*
  %v3_15478 = load i8, i8* %v2_15478, align 1
  %v4_15478 = zext i8 %v3_15478 to i32
  store i32 %v4_15478, i32* %r3.global-to-local, align 4
  %v1_1547c = add i32 %v0_15470, 61
  %v2_1547c = inttoptr i32 %v1_1547c to i8*
  %v3_1547c = load i8, i8* %v2_1547c, align 1
  %v4_1547c = zext i8 %v3_1547c to i32
  %v1_15480 = add i32 %v0_15470, 58
  %v2_15480 = inttoptr i32 %v1_15480 to i8*
  %v3_15480 = load i8, i8* %v2_15480, align 1
  %v4_15480 = zext i8 %v3_15480 to i32
  %v1_15484 = add i32 %v0_15470, 62
  %v2_15484 = inttoptr i32 %v1_15484 to i8*
  %v3_15484 = load i8, i8* %v2_15484, align 1
  %v4_15484 = zext i8 %v3_15484 to i32
  %v1_15488 = add i32 %v0_15470, 59
  %v2_15488 = inttoptr i32 %v1_15488 to i8*
  %v3_15488 = load i8, i8* %v2_15488, align 1
  %v4_15488 = zext i8 %v3_15488 to i32
  %v4_1548c = mul nuw nsw i32 %v4_15470, 256
  %v5_1548c = or i32 %v4_15474, %v4_1548c
  %v4_15490 = mul nuw nsw i32 %v4_1547c, 256
  %v5_15490 = or i32 %v4_15490, %v4_15478
  store i32 %v5_15490, i32* %r3.global-to-local, align 4
  %v1_15494 = add i32 %v0_15470, 63
  %v2_15494 = inttoptr i32 %v1_15494 to i8*
  %v3_15494 = load i8, i8* %v2_15494, align 1
  %v4_15494 = zext i8 %v3_15494 to i32
  %v4_15498 = mul nuw nsw i32 %v4_15480, 65536
  %v5_15498 = or i32 %v4_15498, %v5_1548c
  %v4_1549c = mul nuw nsw i32 %v4_15484, 65536
  %v5_1549c = or i32 %v4_1549c, %v5_15490
  %v4_154a0 = mul nuw i32 %v4_15494, 16777216
  %v5_154a0 = or i32 %v5_1549c, %v4_154a0
  %v4_154a4 = mul nuw i32 %v4_15488, 16777216
  %v5_154a4 = or i32 %v5_15498, %v4_154a4
  store i32 %v5_154a0, i32* %r3.global-to-local, align 4
  %v1_154b4 = load i32, i32* %r7.global-to-local, align 4
  %v2_154b4 = add i32 %v1_154b4, 56
  %v3_154b4 = inttoptr i32 %v2_154b4 to i32*
  store i32 %v5_154a4, i32* %v3_154b4, align 4
  %v0_154b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_154b8 = load i32, i32* %r7.global-to-local, align 4
  %v2_154b8 = add i32 %v1_154b8, 60
  %v3_154b8 = inttoptr i32 %v2_154b8 to i32*
  store i32 %v0_154b8, i32* %v3_154b8, align 4
  %v0_154bc = load i32, i32* %r4.global-to-local, align 4
  %v1_154bc = add i32 %v0_154bc, 65
  %v2_154bc = inttoptr i32 %v1_154bc to i8*
  %v3_154bc = load i8, i8* %v2_154bc, align 1
  %v4_154bc = zext i8 %v3_154bc to i32
  %v1_154c0 = add i32 %v0_154bc, 64
  %v2_154c0 = inttoptr i32 %v1_154c0 to i8*
  %v3_154c0 = load i8, i8* %v2_154c0, align 1
  %v4_154c0 = zext i8 %v3_154c0 to i32
  store i32 %v4_154c0, i32* %r3.global-to-local, align 4
  %v1_154c4 = add i32 %v0_154bc, 66
  %v2_154c4 = inttoptr i32 %v1_154c4 to i8*
  %v3_154c4 = load i8, i8* %v2_154c4, align 1
  %v4_154c4 = zext i8 %v3_154c4 to i32
  %v4_154c8 = mul nuw nsw i32 %v4_154bc, 256
  %v5_154c8 = or i32 %v4_154c0, %v4_154c8
  store i32 %v5_154c8, i32* %r3.global-to-local, align 4
  %v1_154cc = add i32 %v0_154bc, 67
  %v2_154cc = inttoptr i32 %v1_154cc to i8*
  %v3_154cc = load i8, i8* %v2_154cc, align 1
  %v4_154cc = zext i8 %v3_154cc to i32
  %v4_154d0 = mul nuw nsw i32 %v4_154c4, 65536
  %v5_154d0 = or i32 %v4_154d0, %v5_154c8
  %v4_154d4 = mul nuw i32 %v4_154cc, 16777216
  %v5_154d4 = or i32 %v5_154d0, %v4_154d4
  store i32 %v5_154d4, i32* %r3.global-to-local, align 4
  %v1_154d8 = load i32, i32* %r7.global-to-local, align 4
  %v2_154d8 = add i32 %v1_154d8, 64
  %v3_154d8 = inttoptr i32 %v2_154d8 to i32*
  store i32 %v5_154d4, i32* %v3_154d8, align 4
  %v0_154dc = load i32, i32* %r4.global-to-local, align 4
  %v1_154dc = add i32 %v0_154dc, 73
  %v2_154dc = inttoptr i32 %v1_154dc to i8*
  %v3_154dc = load i8, i8* %v2_154dc, align 1
  %v4_154dc = zext i8 %v3_154dc to i32
  %v1_154e0 = add i32 %v0_154dc, 72
  %v2_154e0 = inttoptr i32 %v1_154e0 to i8*
  %v3_154e0 = load i8, i8* %v2_154e0, align 1
  %v4_154e0 = zext i8 %v3_154e0 to i32
  store i32 %v4_154e0, i32* %r3.global-to-local, align 4
  %v1_154e4 = add i32 %v0_154dc, 74
  %v2_154e4 = inttoptr i32 %v1_154e4 to i8*
  %v3_154e4 = load i8, i8* %v2_154e4, align 1
  %v4_154e4 = zext i8 %v3_154e4 to i32
  %v4_154e8 = mul nuw nsw i32 %v4_154dc, 256
  %v5_154e8 = or i32 %v4_154e0, %v4_154e8
  store i32 %v5_154e8, i32* %r3.global-to-local, align 4
  %v1_154ec = add i32 %v0_154dc, 75
  %v2_154ec = inttoptr i32 %v1_154ec to i8*
  %v3_154ec = load i8, i8* %v2_154ec, align 1
  %v4_154ec = zext i8 %v3_154ec to i32
  %v4_154f0 = mul nuw nsw i32 %v4_154e4, 65536
  %v5_154f0 = or i32 %v4_154f0, %v5_154e8
  %v4_154f4 = mul nuw i32 %v4_154ec, 16777216
  %v5_154f4 = or i32 %v5_154f0, %v4_154f4
  store i32 %v5_154f4, i32* %r3.global-to-local, align 4
  %v1_154f8 = load i32, i32* %r7.global-to-local, align 4
  %v2_154f8 = add i32 %v1_154f8, 72
  %v3_154f8 = inttoptr i32 %v2_154f8 to i32*
  store i32 %v5_154f4, i32* %v3_154f8, align 4
  %v0_154fc = load i32, i32* %r4.global-to-local, align 4
  %v1_154fc = add i32 %v0_154fc, 81
  %v2_154fc = inttoptr i32 %v1_154fc to i8*
  %v3_154fc = load i8, i8* %v2_154fc, align 1
  %v4_154fc = zext i8 %v3_154fc to i32
  %v1_15500 = add i32 %v0_154fc, 80
  %v2_15500 = inttoptr i32 %v1_15500 to i8*
  %v3_15500 = load i8, i8* %v2_15500, align 1
  %v4_15500 = zext i8 %v3_15500 to i32
  store i32 %v4_15500, i32* %r3.global-to-local, align 4
  %v1_15504 = add i32 %v0_154fc, 82
  %v2_15504 = inttoptr i32 %v1_15504 to i8*
  %v3_15504 = load i8, i8* %v2_15504, align 1
  %v4_15504 = zext i8 %v3_15504 to i32
  %v4_15508 = mul nuw nsw i32 %v4_154fc, 256
  %v5_15508 = or i32 %v4_15500, %v4_15508
  store i32 %v5_15508, i32* %r3.global-to-local, align 4
  %v1_1550c = add i32 %v0_154fc, 83
  %v2_1550c = inttoptr i32 %v1_1550c to i8*
  %v3_1550c = load i8, i8* %v2_1550c, align 1
  %v4_1550c = zext i8 %v3_1550c to i32
  %v4_15510 = mul nuw nsw i32 %v4_15504, 65536
  %v5_15510 = or i32 %v4_15510, %v5_15508
  %v4_15514 = mul nuw i32 %v4_1550c, 16777216
  %v5_15514 = or i32 %v5_15510, %v4_15514
  store i32 %v5_15514, i32* %r3.global-to-local, align 4
  %v1_15518 = load i32, i32* %r7.global-to-local, align 4
  %v2_15518 = add i32 %v1_15518, 80
  %v3_15518 = inttoptr i32 %v2_15518 to i32*
  store i32 %v5_15514, i32* %v3_15518, align 4
  %v0_1551c = load i32, i32* %r4.global-to-local, align 4
  %v1_1551c = add i32 %v0_1551c, 69
  %v2_1551c = inttoptr i32 %v1_1551c to i8*
  %v3_1551c = load i8, i8* %v2_1551c, align 1
  %v4_1551c = zext i8 %v3_1551c to i32
  %v1_15520 = add i32 %v0_1551c, 68
  %v2_15520 = inttoptr i32 %v1_15520 to i8*
  %v3_15520 = load i8, i8* %v2_15520, align 1
  %v4_15520 = zext i8 %v3_15520 to i32
  store i32 %v4_15520, i32* %r3.global-to-local, align 4
  %v1_15524 = add i32 %v0_1551c, 70
  %v2_15524 = inttoptr i32 %v1_15524 to i8*
  %v3_15524 = load i8, i8* %v2_15524, align 1
  %v4_15524 = zext i8 %v3_15524 to i32
  %v4_15528 = mul nuw nsw i32 %v4_1551c, 256
  %v5_15528 = or i32 %v4_15520, %v4_15528
  store i32 %v5_15528, i32* %r3.global-to-local, align 4
  %v1_1552c = add i32 %v0_1551c, 71
  %v2_1552c = inttoptr i32 %v1_1552c to i8*
  %v3_1552c = load i8, i8* %v2_1552c, align 1
  %v4_1552c = zext i8 %v3_1552c to i32
  %v4_15530 = mul nuw nsw i32 %v4_15524, 65536
  %v5_15530 = or i32 %v4_15530, %v5_15528
  %v4_15534 = mul nuw i32 %v4_1552c, 16777216
  %v5_15534 = or i32 %v5_15530, %v4_15534
  store i32 %v5_15534, i32* %r3.global-to-local, align 4
  %v1_15538 = load i32, i32* %r7.global-to-local, align 4
  %v2_15538 = add i32 %v1_15538, 68
  %v3_15538 = inttoptr i32 %v2_15538 to i32*
  store i32 %v5_15534, i32* %v3_15538, align 4
  %v0_1553c = load i32, i32* %r4.global-to-local, align 4
  %v1_1553c = add i32 %v0_1553c, 77
  %v2_1553c = inttoptr i32 %v1_1553c to i8*
  %v3_1553c = load i8, i8* %v2_1553c, align 1
  %v4_1553c = zext i8 %v3_1553c to i32
  %v1_15540 = add i32 %v0_1553c, 76
  %v2_15540 = inttoptr i32 %v1_15540 to i8*
  %v3_15540 = load i8, i8* %v2_15540, align 1
  %v4_15540 = zext i8 %v3_15540 to i32
  store i32 %v4_15540, i32* %r3.global-to-local, align 4
  %v1_15544 = add i32 %v0_1553c, 78
  %v2_15544 = inttoptr i32 %v1_15544 to i8*
  %v3_15544 = load i8, i8* %v2_15544, align 1
  %v4_15544 = zext i8 %v3_15544 to i32
  %v4_15548 = mul nuw nsw i32 %v4_1553c, 256
  %v5_15548 = or i32 %v4_15540, %v4_15548
  store i32 %v5_15548, i32* %r3.global-to-local, align 4
  %v1_1554c = add i32 %v0_1553c, 79
  %v2_1554c = inttoptr i32 %v1_1554c to i8*
  %v3_1554c = load i8, i8* %v2_1554c, align 1
  %v4_1554c = zext i8 %v3_1554c to i32
  %v4_15550 = mul nuw nsw i32 %v4_15544, 65536
  %v5_15550 = or i32 %v4_15550, %v5_15548
  %v4_15554 = mul nuw i32 %v4_1554c, 16777216
  %v5_15554 = or i32 %v5_15550, %v4_15554
  store i32 %v5_15554, i32* %r3.global-to-local, align 4
  %v1_15558 = load i32, i32* %r7.global-to-local, align 4
  %v2_15558 = add i32 %v1_15558, 76
  %v3_15558 = inttoptr i32 %v2_15558 to i32*
  store i32 %v5_15554, i32* %v3_15558, align 4
  %v0_1555c = load i32, i32* %r4.global-to-local, align 4
  %v1_1555c = add i32 %v0_1555c, 85
  %v2_1555c = inttoptr i32 %v1_1555c to i8*
  %v3_1555c = load i8, i8* %v2_1555c, align 1
  %v4_1555c = zext i8 %v3_1555c to i32
  %v1_15560 = add i32 %v0_1555c, 84
  %v2_15560 = inttoptr i32 %v1_15560 to i8*
  %v3_15560 = load i8, i8* %v2_15560, align 1
  %v4_15560 = zext i8 %v3_15560 to i32
  store i32 %v4_15560, i32* %r3.global-to-local, align 4
  %v1_15564 = add i32 %v0_1555c, 86
  %v2_15564 = inttoptr i32 %v1_15564 to i8*
  %v3_15564 = load i8, i8* %v2_15564, align 1
  %v4_15564 = zext i8 %v3_15564 to i32
  %v4_15568 = mul nuw nsw i32 %v4_1555c, 256
  %v5_15568 = or i32 %v4_15560, %v4_15568
  store i32 %v5_15568, i32* %r3.global-to-local, align 4
  %v1_1556c = add i32 %v0_1555c, 87
  %v2_1556c = inttoptr i32 %v1_1556c to i8*
  %v3_1556c = load i8, i8* %v2_1556c, align 1
  %v4_1556c = zext i8 %v3_1556c to i32
  %v4_15570 = mul nuw nsw i32 %v4_15564, 65536
  %v5_15570 = or i32 %v4_15570, %v5_15568
  %v4_15574 = mul nuw i32 %v4_1556c, 16777216
  %v5_15574 = or i32 %v5_15570, %v4_15574
  store i32 %v5_15574, i32* %r3.global-to-local, align 4
  %v1_15578 = load i32, i32* %r7.global-to-local, align 4
  %v2_15578 = add i32 %v1_15578, 84
  %v3_15578 = inttoptr i32 %v2_15578 to i32*
  store i32 %v5_15574, i32* %v3_15578, align 4
  ret i32 %v4_1547c

; uselistorder directives
  uselistorder i32 %v4_1547c, { 1, 0 }
  uselistorder i32 %v0_15470, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15400, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_153b0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_152d0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 79, { 2, 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 74, { 2, 0, 1 }
  uselistorder i32 59, { 1, 2, 0 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 58, { 5, 0, 1, 2, 3, 4, 6, 7, 8, 9 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 57, { 3, 0, 1, 2, 4 }
  uselistorder i32 55, { 5, 7, 0, 6, 4, 1, 2, 3 }
  uselistorder i32 54, { 4, 3, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 53, { 4, 0, 5, 1, 6, 2, 7, 3, 8 }
  uselistorder i32 51, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 47, { 4, 5, 6, 7, 8, 1, 9, 0, 10, 11, 2, 12, 3 }
  uselistorder i32 50, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 49, { 2, 0, 3, 1, 4 }
  uselistorder i32 45, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 39, { 5, 6, 1, 0, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 35, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 38, { 4, 3, 5, 6, 7, 8, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 34, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 37, { 3, 4, 5, 6, 0, 7, 1, 8, 2, 9 }
  uselistorder i32 33, { 5, 6, 0, 7, 1, 8, 2, 9, 3, 4, 10 }
  uselistorder i32 30, { 6, 1, 7, 2, 8, 3, 9, 4, 10, 0, 11, 5, 12 }
  uselistorder i32 29, { 8, 1, 0, 2, 9, 3, 10, 4, 11, 12, 13, 6, 5, 7 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 7, 14, 15, 1, 0, 2, 8, 3, 9, 4, 10, 6, 11, 12, 13, 5, 16, 17 }
  uselistorder i32 23, { 13, 4, 0, 5, 1, 6, 2, 7, 3, 8, 14, 9, 15, 10, 16, 17, 18, 19, 11, 12, 20 }
  uselistorder i32 22, { 8, 0, 13, 1, 2, 3, 4, 9, 5, 10, 6, 11, 12, 7 }
  uselistorder i32 21, { 4, 0, 1, 5, 6, 7, 3, 8, 2, 9 }
  uselistorder i32 19, { 12, 14, 15, 16, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 0, 13, 17, 11, 18 }
  uselistorder i32 18, { 6, 7, 8, 9, 3, 0, 5, 10, 4, 11, 1, 12, 2, 13 }
  uselistorder i32 17, { 12, 14, 0, 3, 29, 30, 4, 31, 32, 5, 1, 13, 6, 15, 7, 16, 8, 17, 9, 18, 10, 19, 20, 2, 21, 22, 23, 11, 24, 25, 26, 27, 28 }
  uselistorder i32 6, { 27, 32, 13, 14, 74, 15, 29, 2, 16, 28, 0, 30, 17, 31, 3, 18, 19, 20, 4, 21, 33, 34, 35, 5, 36, 37, 38, 39, 6, 40, 41, 42, 43, 7, 44, 8, 45, 46, 22, 47, 9, 48, 49, 50, 23, 51, 10, 52, 53, 54, 24, 55, 56, 57, 58, 59, 25, 60, 11, 61, 62, 63, 64, 65, 66, 26, 67, 12, 68, 1, 69, 70, 71, 72, 73 }
}

define i32 @function_15584(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15584:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_15584 = load i32, i32* @r4, align 4
  store i32 %v3_15584, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_1559c = inttoptr i32 %arg2 to i8*
  %v3_1559c = call i32 @function_13be0(i8* %v2_1559c, i32 0)
  store i32 %v3_1559c, i32* %r0.global-to-local, align 4
  %v0_155a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_155a0 = inttoptr i32 %v0_155a0 to i32*
  %v2_155a0 = load i32, i32* %v1_155a0, align 4
  store i32 %v2_155a0, i32* %r3.global-to-local, align 4
  %v1_155a4 = add i32 %v0_155a0, 4
  %v2_155a4 = inttoptr i32 %v1_155a4 to i32*
  %v3_155a4 = load i32, i32* %v2_155a4, align 4
  store i32 %v3_155a4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_155ac = load i32, i32* %r6.global-to-local, align 4
  %v1_155ac = inttoptr i32 %v0_155ac to i32*
  store i32 %v2_155a0, i32* %v1_155ac, align 4
  %v3_155ac = add i32 %v0_155ac, 4
  %v4_155ac = inttoptr i32 %v3_155ac to i32*
  %v5_155ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_155ac, i32* %v4_155ac, align 4
  %v0_155b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_155b0 = load i32, i32* %r6.global-to-local, align 4
  %v2_155b0 = add i32 %v1_155b0, 12
  %v3_155b0 = inttoptr i32 %v2_155b0 to i32*
  store i32 %v0_155b0, i32* %v3_155b0, align 4
  %v0_155b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155b4 = add i32 %v0_155b4, 9
  %v2_155b4 = inttoptr i32 %v1_155b4 to i8*
  %v3_155b4 = load i8, i8* %v2_155b4, align 1
  %v4_155b4 = zext i8 %v3_155b4 to i32
  store i32 %v4_155b4, i32* %r2.global-to-local, align 4
  %v1_155b8 = add i32 %v0_155b4, 8
  %v2_155b8 = inttoptr i32 %v1_155b8 to i8*
  %v3_155b8 = load i8, i8* %v2_155b8, align 1
  %v4_155b8 = zext i8 %v3_155b8 to i32
  %v4_155bc = mul nuw nsw i32 %v4_155b4, 256
  %v5_155bc = or i32 %v4_155b8, %v4_155bc
  store i32 %v5_155bc, i32* %r3.global-to-local, align 4
  %v1_155c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_155c0 = add i32 %v1_155c0, 16
  %v3_155c0 = inttoptr i32 %v2_155c0 to i32*
  store i32 %v5_155bc, i32* %v3_155c0, align 4
  %v0_155c4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155c4 = add i32 %v0_155c4, 11
  %v2_155c4 = inttoptr i32 %v1_155c4 to i8*
  %v3_155c4 = load i8, i8* %v2_155c4, align 1
  %v4_155c4 = zext i8 %v3_155c4 to i32
  store i32 %v4_155c4, i32* %r2.global-to-local, align 4
  %v1_155c8 = add i32 %v0_155c4, 10
  %v2_155c8 = inttoptr i32 %v1_155c8 to i8*
  %v3_155c8 = load i8, i8* %v2_155c8, align 1
  %v4_155c8 = zext i8 %v3_155c8 to i32
  %v4_155cc = mul nuw nsw i32 %v4_155c4, 256
  %v5_155cc = or i32 %v4_155c8, %v4_155cc
  store i32 %v5_155cc, i32* %r3.global-to-local, align 4
  %v1_155d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_155d0 = add i32 %v1_155d0, 20
  %v3_155d0 = inttoptr i32 %v2_155d0 to i32*
  store i32 %v5_155cc, i32* %v3_155d0, align 4
  %v0_155d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155d4 = add i32 %v0_155d4, 13
  %v2_155d4 = inttoptr i32 %v1_155d4 to i8*
  %v3_155d4 = load i8, i8* %v2_155d4, align 1
  %v4_155d4 = zext i8 %v3_155d4 to i32
  store i32 %v4_155d4, i32* %r2.global-to-local, align 4
  %v1_155d8 = add i32 %v0_155d4, 12
  %v2_155d8 = inttoptr i32 %v1_155d8 to i8*
  %v3_155d8 = load i8, i8* %v2_155d8, align 1
  %v4_155d8 = zext i8 %v3_155d8 to i32
  %v4_155dc = mul nuw nsw i32 %v4_155d4, 256
  %v5_155dc = or i32 %v4_155d8, %v4_155dc
  store i32 %v5_155dc, i32* %r3.global-to-local, align 4
  %v1_155e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_155e0 = add i32 %v1_155e0, 24
  %v3_155e0 = inttoptr i32 %v2_155e0 to i32*
  store i32 %v5_155dc, i32* %v3_155e0, align 4
  %v0_155e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155e4 = add i32 %v0_155e4, 20
  %v2_155e4 = inttoptr i32 %v1_155e4 to i32*
  %v3_155e4 = load i32, i32* %v2_155e4, align 4
  store i32 %v3_155e4, i32* %r3.global-to-local, align 4
  %v1_155e8 = add i32 %v0_155e4, 14
  %v2_155e8 = inttoptr i32 %v1_155e8 to i8*
  %v3_155e8 = load i8, i8* %v2_155e8, align 1
  %v4_155e8 = zext i8 %v3_155e8 to i32
  store i32 %v4_155e8, i32* %r0.global-to-local, align 4
  %v1_155ec = add i32 %v0_155e4, 15
  %v2_155ec = inttoptr i32 %v1_155ec to i8*
  %v3_155ec = load i8, i8* %v2_155ec, align 1
  %v4_155ec = zext i8 %v3_155ec to i32
  store i32 %v4_155ec, i32* %ip.global-to-local, align 4
  %v1_155f0 = add i32 %v0_155e4, 16
  %v2_155f0 = inttoptr i32 %v1_155f0 to i32*
  %v3_155f0 = load i32, i32* %v2_155f0, align 4
  store i32 %v3_155f0, i32* %r1.global-to-local, align 4
  %v1_155f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_155f4 = add i32 %v1_155f4, 44
  %v3_155f4 = inttoptr i32 %v2_155f4 to i32*
  store i32 %v3_155e4, i32* %v3_155f4, align 4
  %v0_155f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_155f8 = add i32 %v0_155f8, 24
  %v2_155f8 = inttoptr i32 %v1_155f8 to i32*
  %v3_155f8 = load i32, i32* %v2_155f8, align 4
  store i32 %v3_155f8, i32* %r3.global-to-local, align 4
  %v1_155fc = load i32, i32* %r6.global-to-local, align 4
  %v2_155fc = add i32 %v1_155fc, 48
  %v3_155fc = inttoptr i32 %v2_155fc to i32*
  store i32 %v3_155f8, i32* %v3_155fc, align 4
  %v0_15600 = load i32, i32* %r5.global-to-local, align 4
  %v1_15600 = add i32 %v0_15600, 28
  %v2_15600 = inttoptr i32 %v1_15600 to i32*
  %v3_15600 = load i32, i32* %v2_15600, align 4
  store i32 %v3_15600, i32* %r3.global-to-local, align 4
  %v1_15604 = load i32, i32* %r6.global-to-local, align 4
  %v2_15604 = add i32 %v1_15604, 52
  %v3_15604 = inttoptr i32 %v2_15604 to i32*
  store i32 %v3_15600, i32* %v3_15604, align 4
  %v0_15608 = load i32, i32* %r5.global-to-local, align 4
  %v1_15608 = add i32 %v0_15608, 32
  %v2_15608 = inttoptr i32 %v1_15608 to i32*
  %v3_15608 = load i32, i32* %v2_15608, align 4
  store i32 %v3_15608, i32* %r3.global-to-local, align 4
  %v1_1560c = load i32, i32* %r6.global-to-local, align 4
  %v2_1560c = add i32 %v1_1560c, 56
  %v3_1560c = inttoptr i32 %v2_1560c to i32*
  store i32 %v3_15608, i32* %v3_1560c, align 4
  %v0_15610 = load i32, i32* %r5.global-to-local, align 4
  %v1_15610 = add i32 %v0_15610, 40
  %v2_15610 = inttoptr i32 %v1_15610 to i32*
  %v3_15610 = load i32, i32* %v2_15610, align 4
  store i32 %v3_15610, i32* %r3.global-to-local, align 4
  %v1_15614 = load i32, i32* %r6.global-to-local, align 4
  %v2_15614 = add i32 %v1_15614, 64
  %v3_15614 = inttoptr i32 %v2_15614 to i32*
  store i32 %v3_15610, i32* %v3_15614, align 4
  %v0_15618 = load i32, i32* %r5.global-to-local, align 4
  %v1_15618 = add i32 %v0_15618, 48
  %v2_15618 = inttoptr i32 %v1_15618 to i32*
  %v3_15618 = load i32, i32* %v2_15618, align 4
  store i32 %v3_15618, i32* %r3.global-to-local, align 4
  %v1_1561c = load i32, i32* %r6.global-to-local, align 4
  %v2_1561c = add i32 %v1_1561c, 72
  %v3_1561c = inttoptr i32 %v2_1561c to i32*
  store i32 %v3_15618, i32* %v3_1561c, align 4
  %v0_15620 = load i32, i32* %r5.global-to-local, align 4
  %v1_15620 = add i32 %v0_15620, 36
  %v2_15620 = inttoptr i32 %v1_15620 to i32*
  %v3_15620 = load i32, i32* %v2_15620, align 4
  store i32 %v3_15620, i32* %r3.global-to-local, align 4
  %v1_15624 = load i32, i32* %r6.global-to-local, align 4
  %v2_15624 = add i32 %v1_15624, 60
  %v3_15624 = inttoptr i32 %v2_15624 to i32*
  store i32 %v3_15620, i32* %v3_15624, align 4
  %v0_15628 = load i32, i32* %r5.global-to-local, align 4
  %v1_15628 = add i32 %v0_15628, 44
  %v2_15628 = inttoptr i32 %v1_15628 to i32*
  %v3_15628 = load i32, i32* %v2_15628, align 4
  store i32 %v3_15628, i32* %r3.global-to-local, align 4
  %v0_1562c = load i32, i32* %r0.global-to-local, align 4
  %v1_1562c = load i32, i32* %ip.global-to-local, align 4
  %v4_1562c = mul i32 %v1_1562c, 256
  %v5_1562c = or i32 %v4_1562c, %v0_1562c
  store i32 %v5_1562c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_15634 = load i32, i32* %r6.global-to-local, align 4
  %v2_15634 = add i32 %v1_15634, 28
  %v3_15634 = inttoptr i32 %v2_15634 to i32*
  store i32 %v5_1562c, i32* %v3_15634, align 4
  %v0_15638 = load i32, i32* %r1.global-to-local, align 4
  %v1_15638 = load i32, i32* %r6.global-to-local, align 4
  %v2_15638 = add i32 %v1_15638, 32
  %v3_15638 = inttoptr i32 %v2_15638 to i32*
  store i32 %v0_15638, i32* %v3_15638, align 4
  %v0_1563c = load i32, i32* %r2.global-to-local, align 4
  %v1_1563c = load i32, i32* %r6.global-to-local, align 4
  %v2_1563c = add i32 %v1_1563c, 36
  %v3_1563c = inttoptr i32 %v2_1563c to i32*
  store i32 %v0_1563c, i32* %v3_1563c, align 4
  %v0_15640 = load i32, i32* %r3.global-to-local, align 4
  %v1_15640 = load i32, i32* %r6.global-to-local, align 4
  %v2_15640 = add i32 %v1_15640, 68
  %v3_15640 = inttoptr i32 %v2_15640 to i32*
  store i32 %v0_15640, i32* %v3_15640, align 4
  %v0_15644 = load i32, i32* %r5.global-to-local, align 4
  %v1_15644 = add i32 %v0_15644, 52
  %v2_15644 = inttoptr i32 %v1_15644 to i32*
  %v3_15644 = load i32, i32* %v2_15644, align 4
  store i32 %v3_15644, i32* %r3.global-to-local, align 4
  %v1_15648 = load i32, i32* %r6.global-to-local, align 4
  %v2_15648 = add i32 %v1_15648, 76
  %v3_15648 = inttoptr i32 %v2_15648 to i32*
  store i32 %v3_15644, i32* %v3_15648, align 4
  %v2_1564c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1564c, i32* %r4.global-to-local, align 4
  ret i32 %v5_1562c

; uselistorder directives
  uselistorder i32 %v0_155e4, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 14, 12, 13, 1, 5, 44, 6, 15, 16, 0, 7, 17, 18, 19, 8, 20, 21, 22, 9, 23, 24, 25, 10, 26, 27, 28, 11, 29, 30, 31, 2, 32, 33, 34, 35, 36, 3, 37, 38, 39, 40, 41, 4, 42, 43 }
  uselistorder i32 56, { 8, 5, 6, 7, 0, 1, 2, 9, 3, 4 }
  uselistorder i32 52, { 5, 6, 3, 4, 7, 8, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 15, { 13, 9, 8, 10, 3, 0, 11, 4, 12, 5, 6, 1, 14, 15, 7, 16, 17, 18, 19, 2, 20 }
  uselistorder i32 14, { 12, 8, 20, 3, 9, 0, 7, 4, 10, 5, 11, 6, 13, 14, 1, 15, 16, 17, 18, 2, 19 }
  uselistorder i32 13, { 24, 12, 11, 13, 14, 15, 16, 4, 17, 5, 18, 6, 19, 7, 20, 8, 21, 9, 22, 10, 23, 0, 25, 26, 27, 28, 29, 1, 30, 31, 32, 33, 34, 35, 36, 37, 2, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 3, 50, 51 }
  uselistorder i32 9, { 39, 40, 41, 9, 5, 57, 10, 30, 6, 31, 12, 29, 25, 13, 28, 11, 3, 32, 26, 33, 2, 27, 14, 34, 15, 35, 16, 36, 17, 37, 38, 7, 18, 19, 20, 21, 0, 22, 1, 23, 53, 42, 43, 24, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 4, 56, 58, 59, 8, 60 }
  uselistorder i32 (i8*, i32)* @function_13be0, { 1, 0, 8, 7, 5, 2, 3, 4, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_15650() local_unnamed_addr {
dec_label_pc_15650:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_15650 = load i32, i32* @r1, align 4
  %v1_15650 = load i32, i32* @r0, align 4
  %v2_15650 = sub i32 %v0_15650, %v1_15650
  %v3_15650 = icmp ult i32 %v0_15650, %v1_15650
  %v4_15650 = xor i32 %v1_15650, %v0_15650
  %v5_15650 = xor i32 %v2_15650, %v0_15650
  %v6_15650 = and i32 %v5_15650, %v4_15650
  %v7_15650 = icmp slt i32 %v6_15650, 0
  store i1 %v7_15650, i1* %cpsr_v.global-to-local, align 1
  %v8_15650 = icmp slt i32 %v2_15650, 0
  store i1 %v8_15650, i1* %cpsr_n.global-to-local, align 1
  %v9_15650 = icmp eq i32 %v0_15650, %v1_15650
  store i1 %v9_15650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15650, label %dec_label_pc_1589c, label %dec_label_pc_15658

dec_label_pc_15658:                               ; preds = %dec_label_pc_15650
  br i1 %v9_15650, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_15658
  %merge = phi i32 [ %v0_15650, %dec_label_pc_15658 ], [ %v2_15930, %bb141 ], [ %v11_1594c, %bb144 ], [ %v7_1594c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_15658
  store i32 %v1_15650, i32* %stack_var_-8, align 4
  %v0_15660 = load i32, i32* @r2, align 4
  %v2_15660 = add i32 %v0_15660, -4
  store i32 %v2_15660, i32* %r2.global-to-local, align 4
  %v4_15660 = sub i32 3, %v0_15660
  %v5_15660 = and i32 %v4_15660, %v0_15660
  %v6_15660 = icmp slt i32 %v5_15660, 0
  store i1 %v6_15660, i1* %cpsr_v.global-to-local, align 1
  %v7_15660 = icmp slt i32 %v2_15660, 0
  store i1 %v7_15660, i1* %cpsr_n.global-to-local, align 1
  %v8_15660 = icmp eq i32 %v0_15660, 4
  store i1 %v8_15660, i1* %cpsr_z.global-to-local, align 1
  %v5_15664 = icmp slt i32 %v0_15660, 4
  br i1 %v5_15664, label %bb131, label %dec_label_pc_15668

dec_label_pc_15668:                               ; preds = %bb
  %v1_15668 = urem i32 %v1_15650, 4
  store i32 %v1_15668, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15668 = icmp eq i32 %v1_15668, 0
  store i1 %v2_15668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15668, label %dec_label_pc_15670, label %dec_label_pc_15714

dec_label_pc_15670:                               ; preds = %dec_label_pc_15668
  %v1_15670 = urem i32 %v0_15650, 4
  store i32 %v1_15670, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15670 = icmp eq i32 %v1_15670, 0
  store i1 %v2_15670, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_15650 to i2
  br i1 %v2_15670, label %dec_label_pc_15678, label %dec_label_pc_15744

dec_label_pc_15678:                               ; preds = %dec_label_pc_15670, %dec_label_pc_1573c
  %v0_1569092 = phi i32 [ %v1_15650, %dec_label_pc_15670 ], [ %v0_1578c75, %dec_label_pc_1573c ]
  %v0_1568c91 = phi i32 [ %v0_15650, %dec_label_pc_15670 ], [ %v0_1573c, %dec_label_pc_1573c ]
  %v0_15678 = phi i32 [ %v2_15660, %dec_label_pc_15670 ], [ %v2_15734, %dec_label_pc_1573c ]
  %v2_15678 = add i32 %v0_15678, -8
  store i32 %v2_15678, i32* %r2.global-to-local, align 4
  %v4_15678 = sub i32 7, %v0_15678
  %v5_15678 = and i32 %v4_15678, %v0_15678
  %v6_15678 = icmp slt i32 %v5_15678, 0
  store i1 %v6_15678, i1* %cpsr_v.global-to-local, align 1
  %v7_15678 = icmp slt i32 %v2_15678, 0
  store i1 %v7_15678, i1* %cpsr_n.global-to-local, align 1
  %v8_15678 = icmp eq i32 %v0_15678, 8
  store i1 %v8_15678, i1* %cpsr_z.global-to-local, align 1
  %v5_1567c = icmp slt i32 %v0_15678, 8
  br i1 %v5_1567c, label %dec_label_pc_156cc, label %dec_label_pc_15680

dec_label_pc_15680:                               ; preds = %dec_label_pc_15678
  %v2_15680 = add i32 %v0_15678, -28
  store i32 %v2_15680, i32* %r2.global-to-local, align 4
  %v4_15680 = sub i32 27, %v0_15678
  %v5_15680 = and i32 %v4_15680, %v2_15678
  %v6_15680 = icmp slt i32 %v5_15680, 0
  store i1 %v6_15680, i1* %cpsr_v.global-to-local, align 1
  %v7_15680 = icmp slt i32 %v2_15680, 0
  store i1 %v7_15680, i1* %cpsr_n.global-to-local, align 1
  %v8_15680 = icmp eq i32 %v2_15678, 20
  store i1 %v8_15680, i1* %cpsr_z.global-to-local, align 1
  %v5_15684 = icmp slt i32 %v2_15678, 20
  br i1 %v5_15684, label %dec_label_pc_156b8, label %dec_label_pc_15688

dec_label_pc_15688:                               ; preds = %dec_label_pc_15680
  %v0_15688 = load i32, i32* @r4, align 4
  store i32 %v0_15688, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1568c

dec_label_pc_1568c:                               ; preds = %dec_label_pc_1568c.dec_label_pc_1568c_crit_edge, %dec_label_pc_15688
  %v0_15690 = phi i32 [ %v12_15698, %dec_label_pc_1568c.dec_label_pc_1568c_crit_edge ], [ %v0_1569092, %dec_label_pc_15688 ]
  %v0_1568c = phi i32 [ %v0_1568c.pre, %dec_label_pc_1568c.dec_label_pc_1568c_crit_edge ], [ %v0_1568c91, %dec_label_pc_15688 ]
  %v1_1568c = inttoptr i32 %v0_1568c to i32*
  %v2_1568c = load i32, i32* %v1_1568c, align 4
  store i32 %v2_1568c, i32* %r3.global-to-local, align 4
  %v3_1568c = add i32 %v0_1568c, 4
  %v4_1568c = inttoptr i32 %v3_1568c to i32*
  %v5_1568c = load i32, i32* %v4_1568c, align 4
  store i32 %v5_1568c, i32* %r4.global-to-local, align 4
  %v6_1568c = add i32 %v0_1568c, 8
  %v7_1568c = inttoptr i32 %v6_1568c to i32*
  %v8_1568c = load i32, i32* %v7_1568c, align 4
  store i32 %v8_1568c, i32* %ip.global-to-local, align 4
  %v9_1568c = add i32 %v0_1568c, 12
  %v10_1568c = inttoptr i32 %v9_1568c to i32*
  %v11_1568c = load i32, i32* %v10_1568c, align 4
  store i32 %v11_1568c, i32* %lr.global-to-local, align 4
  %v12_1568c = add i32 %v0_1568c, 16
  store i32 %v12_1568c, i32* %r1.global-to-local, align 4
  %v1_15690 = inttoptr i32 %v0_15690 to i32*
  store i32 %v2_1568c, i32* %v1_15690, align 4
  %v3_15690 = add i32 %v0_15690, 4
  %v4_15690 = inttoptr i32 %v3_15690 to i32*
  %v5_15690 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15690, i32* %v4_15690, align 4
  %v6_15690 = add i32 %v0_15690, 8
  %v7_15690 = inttoptr i32 %v6_15690 to i32*
  %v8_15690 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_15690, i32* %v7_15690, align 4
  %v9_15690 = add i32 %v0_15690, 12
  %v10_15690 = inttoptr i32 %v9_15690 to i32*
  %v11_15690 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15690, i32* %v10_15690, align 4
  %v12_15690 = add i32 %v0_15690, 16
  store i32 %v12_15690, i32* %r0.global-to-local, align 4
  %v0_15694 = load i32, i32* %r1.global-to-local, align 4
  %v1_15694 = inttoptr i32 %v0_15694 to i32*
  %v2_15694 = load i32, i32* %v1_15694, align 4
  store i32 %v2_15694, i32* %r3.global-to-local, align 4
  %v3_15694 = add i32 %v0_15694, 4
  %v4_15694 = inttoptr i32 %v3_15694 to i32*
  %v5_15694 = load i32, i32* %v4_15694, align 4
  store i32 %v5_15694, i32* %r4.global-to-local, align 4
  %v6_15694 = add i32 %v0_15694, 8
  %v7_15694 = inttoptr i32 %v6_15694 to i32*
  %v8_15694 = load i32, i32* %v7_15694, align 4
  store i32 %v8_15694, i32* %ip.global-to-local, align 4
  %v9_15694 = add i32 %v0_15694, 12
  %v10_15694 = inttoptr i32 %v9_15694 to i32*
  %v11_15694 = load i32, i32* %v10_15694, align 4
  store i32 %v11_15694, i32* @lr, align 4
  %v12_15694 = add i32 %v0_15694, 16
  store i32 %v12_15694, i32* @r1, align 4
  %v1_15698 = inttoptr i32 %v12_15690 to i32*
  store i32 %v2_15694, i32* %v1_15698, align 4
  %v3_15698 = add i32 %v0_15690, 20
  %v4_15698 = inttoptr i32 %v3_15698 to i32*
  %v5_15698 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15698, i32* %v4_15698, align 4
  %v6_15698 = add i32 %v0_15690, 24
  %v7_15698 = inttoptr i32 %v6_15698 to i32*
  %v8_15698 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_15698, i32* %v7_15698, align 4
  %v9_15698 = add i32 %v0_15690, 28
  %v10_15698 = inttoptr i32 %v9_15698 to i32*
  %v11_15698 = load i32, i32* @lr, align 4
  store i32 %v11_15698, i32* %v10_15698, align 4
  %v12_15698 = add i32 %v0_15690, 32
  store i32 %v12_15698, i32* @r0, align 4
  %v0_1569c = load i32, i32* %r2.global-to-local, align 4
  %v2_1569c = add i32 %v0_1569c, -32
  store i32 %v2_1569c, i32* %r2.global-to-local, align 4
  %v6_156a0 = icmp slt i32 %v0_1569c, 32
  br i1 %v6_156a0, label %dec_label_pc_156a4, label %dec_label_pc_1568c.dec_label_pc_1568c_crit_edge

dec_label_pc_1568c.dec_label_pc_1568c_crit_edge:  ; preds = %dec_label_pc_1568c
  %v0_1568c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1568c

dec_label_pc_156a4:                               ; preds = %dec_label_pc_1568c
  %v4_156a4 = add i32 %v0_1569c, -16
  %v6_156a4 = add i32 %v0_1569c, 2147483616
  %v7_156a4 = and i32 %v4_156a4, %v6_156a4
  %v8_156a4 = icmp slt i32 %v7_156a4, 0
  store i1 %v8_156a4, i1* %cpsr_v.global-to-local, align 1
  %v9_156a4 = icmp slt i32 %v4_156a4, 0
  store i1 %v9_156a4, i1* %cpsr_n.global-to-local, align 1
  %v10_156a4 = icmp eq i32 %v4_156a4, 0
  store i1 %v10_156a4, i1* %cpsr_z.global-to-local, align 1
  %v5_156a8 = icmp slt i32 %v2_1569c, -16
  br i1 %v5_156a8, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_156a4
  %v6_156a8 = load i32, i32* @r1, align 4
  %v7_156a8 = inttoptr i32 %v6_156a8 to i32*
  %v8_156a8 = load i32, i32* %v7_156a8, align 4
  store i32 %v8_156a8, i32* %r3.global-to-local, align 4
  %v9_156a8 = add i32 %v6_156a8, 4
  %v10_156a8 = inttoptr i32 %v9_156a8 to i32*
  %v11_156a8 = load i32, i32* %v10_156a8, align 4
  store i32 %v11_156a8, i32* %r4.global-to-local, align 4
  %v12_156a8 = add i32 %v6_156a8, 8
  %v13_156a8 = inttoptr i32 %v12_156a8 to i32*
  %v14_156a8 = load i32, i32* %v13_156a8, align 4
  store i32 %v14_156a8, i32* %ip.global-to-local, align 4
  %v15_156a8 = add i32 %v6_156a8, 12
  %v16_156a8 = inttoptr i32 %v15_156a8 to i32*
  %v17_156a8 = load i32, i32* %v16_156a8, align 4
  store i32 %v17_156a8, i32* @lr, align 4
  %v18_156a8 = add i32 %v6_156a8, 16
  store i32 %v18_156a8, i32* @r1, align 4
  %v7_156ac = inttoptr i32 %v12_15698 to i32*
  store i32 %v8_156a8, i32* %v7_156ac, align 4
  %v9_156ac = add i32 %v0_15690, 36
  %v10_156ac = inttoptr i32 %v9_156ac to i32*
  %v11_156ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_156ac, i32* %v10_156ac, align 4
  %v12_156ac = add i32 %v0_15690, 40
  %v13_156ac = inttoptr i32 %v12_156ac to i32*
  %v14_156ac = load i32, i32* %ip.global-to-local, align 4
  store i32 %v14_156ac, i32* %v13_156ac, align 4
  %v15_156ac = add i32 %v0_15690, 44
  %v16_156ac = inttoptr i32 %v15_156ac to i32*
  %v17_156ac = load i32, i32* @lr, align 4
  store i32 %v17_156ac, i32* %v16_156ac, align 4
  %v18_156ac = add i32 %v0_15690, 48
  store i32 %v18_156ac, i32* @r0, align 4
  %v6_156b0 = load i32, i32* %r2.global-to-local, align 4
  %v7_156b0 = add i32 %v6_156b0, -16
  store i32 %v7_156b0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_156a4, %bb128
  %v3_156c0101 = phi i32 [ %v12_15698, %dec_label_pc_156a4 ], [ %v18_156ac, %bb128 ]
  %v0_156b895 = phi i32 [ %v2_1569c, %dec_label_pc_156a4 ], [ %v7_156b0, %bb128 ]
  %v2_156b4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_156b4, i32* @r4, align 4
  br label %dec_label_pc_156b8

dec_label_pc_156b8:                               ; preds = %dec_label_pc_15680, %.thread1
  %v3_156c0100 = phi i32 [ %v0_1569092, %dec_label_pc_15680 ], [ %v3_156c0101, %.thread1 ]
  %v0_156b8 = phi i32 [ %v2_15680, %dec_label_pc_15680 ], [ %v0_156b895, %.thread1 ]
  %v1_156b8 = add i32 %v0_156b8, 20
  store i32 %v1_156b8, i32* %r2.global-to-local, align 4
  %v3_156b8 = sub i32 0, %v0_156b8
  %v4_156b8 = and i32 %v1_156b8, %v3_156b8
  %v5_156b8 = icmp slt i32 %v4_156b8, 0
  store i1 %v5_156b8, i1* %cpsr_v.global-to-local, align 1
  %v6_156b8 = icmp slt i32 %v1_156b8, 0
  store i1 %v6_156b8, i1* %cpsr_n.global-to-local, align 1
  %v7_156b8 = icmp eq i32 %v1_156b8, 0
  store i1 %v7_156b8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_156bc

dec_label_pc_156bc:                               ; preds = %.thread117, %dec_label_pc_156b8
  %v0_156cc.pre147 = phi i32 [ %v0_156cc.pre, %.thread117 ], [ %v1_156b8, %dec_label_pc_156b8 ]
  %v3_156c0 = phi i32 [ %v3_156c098118, %.thread117 ], [ %v3_156c0100, %dec_label_pc_156b8 ]
  %v1_156c4 = phi i1 [ %v1_156c8, %.thread117 ], [ %v5_156b8, %dec_label_pc_156b8 ]
  %v0_156c4 = phi i1 [ %v0_156c8, %.thread117 ], [ %v6_156b8, %dec_label_pc_156b8 ]
  %v2_156bc = xor i1 %v1_156c4, %v0_156c4
  br i1 %v2_156bc, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_156bc
  %v3_156bc = load i32, i32* @r1, align 4
  %v4_156bc = inttoptr i32 %v3_156bc to i32*
  %v5_156bc = load i32, i32* %v4_156bc, align 4
  store i32 %v5_156bc, i32* %r3.global-to-local, align 4
  %v6_156bc = add i32 %v3_156bc, 4
  %v7_156bc = inttoptr i32 %v6_156bc to i32*
  %v8_156bc = load i32, i32* %v7_156bc, align 4
  store i32 %v8_156bc, i32* %ip.global-to-local, align 4
  %v9_156bc = add i32 %v3_156bc, 8
  %v10_156bc = inttoptr i32 %v9_156bc to i32*
  %v11_156bc = load i32, i32* %v10_156bc, align 4
  store i32 %v11_156bc, i32* @lr, align 4
  %v12_156bc = add i32 %v3_156bc, 12
  store i32 %v12_156bc, i32* @r1, align 4
  %v4_156c0 = inttoptr i32 %v3_156c0 to i32*
  store i32 %v5_156bc, i32* %v4_156c0, align 4
  %v6_156c0 = add i32 %v3_156c0, 4
  %v7_156c0 = inttoptr i32 %v6_156c0 to i32*
  %v8_156c0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_156c0, i32* %v7_156c0, align 4
  %v9_156c0 = add i32 %v3_156c0, 8
  %v10_156c0 = inttoptr i32 %v9_156c0 to i32*
  %v11_156c0 = load i32, i32* @lr, align 4
  store i32 %v11_156c0, i32* %v10_156c0, align 4
  %v12_156c0 = add i32 %v3_156c0, 12
  store i32 %v12_156c0, i32* @r0, align 4
  %v3_156c4 = load i32, i32* %r2.global-to-local, align 4
  %v4_156c4 = add i32 %v3_156c4, -12
  store i32 %v4_156c4, i32* %r2.global-to-local, align 4
  %v6_156c4 = sub i32 11, %v3_156c4
  %v7_156c4 = and i32 %v6_156c4, %v3_156c4
  %v8_156c4 = icmp slt i32 %v7_156c4, 0
  store i1 %v8_156c4, i1* %cpsr_v.global-to-local, align 1
  %v9_156c4 = icmp slt i32 %v4_156c4, 0
  store i1 %v9_156c4, i1* %cpsr_n.global-to-local, align 1
  %v10_156c4 = icmp eq i32 %v3_156c4, 12
  store i1 %v10_156c4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_156bc, %bb129
  %v0_156cc.pre = phi i32 [ %v4_156c4, %bb129 ], [ %v0_156cc.pre147, %dec_label_pc_156bc ]
  %v3_156c098118 = phi i32 [ %v12_156c0, %bb129 ], [ %v3_156c0, %dec_label_pc_156bc ]
  %v1_156c8 = phi i1 [ %v8_156c4, %bb129 ], [ %v1_156c4, %dec_label_pc_156bc ]
  %v0_156c8 = phi i1 [ %v9_156c4, %bb129 ], [ %v0_156c4, %dec_label_pc_156bc ]
  %v2_156c8 = xor i1 %v1_156c8, %v0_156c8
  br i1 %v2_156c8, label %dec_label_pc_156cc, label %dec_label_pc_156bc

dec_label_pc_156cc:                               ; preds = %.thread117, %dec_label_pc_15678
  %v7_156dc = phi i32 [ %v0_1569092, %dec_label_pc_15678 ], [ %v3_156c098118, %.thread117 ]
  %v0_156cc = phi i32 [ %v2_15678, %dec_label_pc_15678 ], [ %v0_156cc.pre, %.thread117 ]
  %v2_156cc = add i32 %v0_156cc, 8
  store i32 %v2_156cc, i32* %r2.global-to-local, align 4
  %v4_156cc = sub i32 0, %v0_156cc
  %v5_156cc = and i32 %v2_156cc, %v4_156cc
  %v6_156cc = icmp slt i32 %v5_156cc, 0
  store i1 %v6_156cc, i1* %cpsr_v.global-to-local, align 1
  %v7_156cc = icmp slt i32 %v2_156cc, 0
  store i1 %v7_156cc, i1* %cpsr_n.global-to-local, align 1
  %v8_156cc = icmp eq i32 %v2_156cc, 0
  store i1 %v8_156cc, i1* %cpsr_z.global-to-local, align 1
  %v5_156d0 = icmp slt i32 %v0_156cc, -8
  br i1 %v5_156d0, label %bb131, label %dec_label_pc_156d4

dec_label_pc_156d4:                               ; preds = %dec_label_pc_156cc
  %v6_156d4 = add i32 %v0_156cc, 4
  store i32 %v6_156d4, i32* %r2.global-to-local, align 4
  %v8_156d4 = sub i32 -5, %v0_156cc
  %v9_156d4 = and i32 %v8_156d4, %v2_156cc
  %v10_156d4 = icmp slt i32 %v9_156d4, 0
  store i1 %v10_156d4, i1* %cpsr_v.global-to-local, align 1
  %v11_156d4 = icmp slt i32 %v6_156d4, 0
  store i1 %v11_156d4, i1* %cpsr_n.global-to-local, align 1
  %v12_156d4 = icmp eq i32 %v2_156cc, 4
  store i1 %v12_156d4, i1* %cpsr_z.global-to-local, align 1
  %v5_156d8 = icmp slt i32 %v2_156cc, 4
  %v6_156d8 = load i32, i32* @r1, align 4
  %v7_156d8 = inttoptr i32 %v6_156d8 to i32*
  %v8_156d8 = load i32, i32* %v7_156d8, align 4
  store i32 %v8_156d8, i32* %r3.global-to-local, align 4
  %v10_156d8 = add i32 %v6_156d8, 4
  br i1 %v5_156d8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_156d4
  store i32 %v10_156d8, i32* @r1, align 4
  %v8_156dc = inttoptr i32 %v7_156dc to i32*
  store i32 %v8_156d8, i32* %v8_156dc, align 4
  %v9_156dc = load i32, i32* @r0, align 4
  %v10_156dc = add i32 %v9_156dc, 4
  store i32 %v10_156dc, i32* @r0, align 4
  %v0_156ec.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_156d4
  %v10_156e0 = inttoptr i32 %v10_156d8 to i32*
  %v11_156e0 = load i32, i32* %v10_156e0, align 4
  store i32 %v11_156e0, i32* %ip.global-to-local, align 4
  %v12_156e0 = add i32 %v6_156d8, 8
  store i32 %v12_156e0, i32* @r1, align 4
  %v7_156e4 = inttoptr i32 %v7_156dc to i32*
  store i32 %v8_156d8, i32* %v7_156e4, align 4
  %v9_156e4 = add i32 %v7_156dc, 4
  %v10_156e4 = inttoptr i32 %v9_156e4 to i32*
  %v11_156e4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_156e4, i32* %v10_156e4, align 4
  %v12_156e4 = add i32 %v7_156dc, 8
  store i32 %v12_156e4, i32* @r0, align 4
  %v6_156e8 = load i32, i32* %r2.global-to-local, align 4
  %v7_156e8 = add i32 %v6_156e8, -4
  store i32 %v7_156e8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_156cc, %bb, %dec_label_pc_15894, %dec_label_pc_15828, %dec_label_pc_157bc, %bb130
  %v2_156fc = phi i32 [ %v10_156dc, %.thread5 ], [ %v0_1578c75, %.thread11 ], [ %v7_156dc, %dec_label_pc_156cc ], [ %v1_15650, %bb ], [ %v2_156fc113, %dec_label_pc_15894 ], [ %v2_156fc112, %dec_label_pc_15828 ], [ %v2_156fc111, %dec_label_pc_157bc ], [ %v12_156e4, %bb130 ]
  %v0_156ec = phi i32 [ %v0_156ec.pre, %.thread5 ], [ %v2_15734, %.thread11 ], [ %v2_156cc, %dec_label_pc_156cc ], [ %v2_15660, %bb ], [ %v0_156ec109, %dec_label_pc_15894 ], [ %v0_156ec108, %dec_label_pc_15828 ], [ %v0_156ec107, %dec_label_pc_157bc ], [ %v7_156e8, %bb130 ]
  %v1_156ec = add i32 %v0_156ec, 4
  store i32 %v1_156ec, i32* %r2.global-to-local, align 4
  %v3_156ec = sub i32 0, %v0_156ec
  %v4_156ec = and i32 %v1_156ec, %v3_156ec
  %v5_156ec = icmp slt i32 %v4_156ec, 0
  store i1 %v5_156ec, i1* %cpsr_v.global-to-local, align 1
  %v6_156ec = icmp slt i32 %v1_156ec, 0
  store i1 %v6_156ec, i1* %cpsr_n.global-to-local, align 1
  %v7_156ec = icmp eq i32 %v1_156ec, 0
  store i1 %v7_156ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_156ec, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_156f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_156f0, i32* %r0.global-to-local, align 4
  ret i32 %v3_156f0

bb133:                                            ; preds = %bb131
  %v1_156f4 = add i32 %v0_156ec, 2
  %v3_156f4 = sub i32 -3, %v0_156ec
  %v4_156f4 = and i32 %v3_156f4, %v1_156ec
  %v5_156f4 = icmp slt i32 %v4_156f4, 0
  store i1 %v5_156f4, i1* %cpsr_v.global-to-local, align 1
  %v6_156f4 = icmp slt i32 %v1_156f4, 0
  store i1 %v6_156f4, i1* %cpsr_n.global-to-local, align 1
  %v7_156f4 = icmp eq i32 %v1_156ec, 2
  store i1 %v7_156f4, i1* %cpsr_z.global-to-local, align 1
  %v0_156f8 = load i32, i32* @r1, align 4
  %v1_156f8 = inttoptr i32 %v0_156f8 to i8*
  %v2_156f8 = load i8, i8* %v1_156f8, align 1
  %v3_156f8 = zext i8 %v2_156f8 to i32
  store i32 %v3_156f8, i32* %r3.global-to-local, align 4
  %v5_156f8 = add i32 %v0_156f8, 1
  store i32 %v5_156f8, i32* %r1.global-to-local, align 4
  %v3_156fc = inttoptr i32 %v2_156fc to i8*
  store i8 %v2_156f8, i8* %v3_156fc, align 1
  %v4_156fc = load i32, i32* @r0, align 4
  %v5_156fc = add i32 %v4_156fc, 1
  store i32 %v5_156fc, i32* %r0.global-to-local, align 4
  %v0_15700 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15700 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15700 = xor i1 %v0_15700, %v1_15700
  br i1 %v2_15700, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_15700 = load i32, i32* %r1.global-to-local, align 4
  %v4_15700 = inttoptr i32 %v3_15700 to i8*
  %v5_15700 = load i8, i8* %v4_15700, align 1
  %v6_15700 = zext i8 %v5_15700 to i32
  store i32 %v6_15700, i32* %r3.global-to-local, align 4
  %v8_15700 = add i32 %v3_15700, 1
  store i32 %v8_15700, i32* %r1.global-to-local, align 4
  %v6_15704 = inttoptr i32 %v5_156fc to i8*
  store i8 %v5_15700, i8* %v6_15704, align 1
  %v7_15704 = load i32, i32* %r0.global-to-local, align 4
  %v8_15704 = add i32 %v7_15704, 1
  store i32 %v8_15704, i32* %r0.global-to-local, align 4
  %v1_15708.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15708.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_1570c = phi i32 [ %v8_15704, %bb134 ], [ %v5_156fc, %bb133 ]
  %v2_1570c = phi i1 [ %v2_15708.pre, %bb134 ], [ %v1_15700, %bb133 ]
  %v1_1570c = phi i1 [ %v1_15708.pre, %bb134 ], [ %v0_15700, %bb133 ]
  %v0_15708 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15708 = xor i1 %v2_1570c, %v1_1570c
  %v4_15708 = or i1 %v0_15708, %v3_15708
  br i1 %v4_15708, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_15708 = load i32, i32* %r1.global-to-local, align 4
  %v6_15708 = inttoptr i32 %v5_15708 to i8*
  %v7_15708 = load i8, i8* %v6_15708, align 1
  %v8_15708 = zext i8 %v7_15708 to i32
  store i32 %v8_15708, i32* %r3.global-to-local, align 4
  %v10_15708 = add i32 %v5_15708, 1
  store i32 %v10_15708, i32* %r1.global-to-local, align 4
  %v8_1570c = inttoptr i32 %v7_1570c to i8*
  store i8 %v7_15708, i8* %v8_1570c, align 1
  %v9_1570c = load i32, i32* %r0.global-to-local, align 4
  %v10_1570c = add i32 %v9_1570c, 1
  store i32 %v10_1570c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_15710 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15710, i32* %r0.global-to-local, align 4
  ret i32 %v2_15710

dec_label_pc_15714:                               ; preds = %dec_label_pc_15668
  %v1_15714 = sub nsw i32 4, %v1_15668
  store i32 %v1_15714, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_15718 = icmp ult i32 %v1_15714, 2
  store i1 %v8_15718, i1* %cpsr_n.global-to-local, align 1
  %v9_15718 = icmp eq i32 %v1_15714, 2
  store i1 %v9_15718, i1* %cpsr_z.global-to-local, align 1
  %v1_1571c = inttoptr i32 %v0_15650 to i8*
  %v2_1571c = load i8, i8* %v1_1571c, align 1
  %v3_1571c = zext i8 %v2_1571c to i32
  store i32 %v3_1571c, i32* %r3.global-to-local, align 4
  %v5_1571c = add i32 %v0_15650, 1
  store i32 %v5_1571c, i32* @r1, align 4
  %v3_15720 = inttoptr i32 %v1_15650 to i8*
  store i8 %v2_1571c, i8* %v3_15720, align 1
  %v4_15720 = load i32, i32* @r0, align 4
  %v5_15720 = add i32 %v4_15720, 1
  store i32 %v5_15720, i32* @r0, align 4
  br i1 %v8_15718, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_15714
  %v6_15724 = load i32, i32* @r1, align 4
  %v7_15724 = inttoptr i32 %v6_15724 to i8*
  %v8_15724 = load i8, i8* %v7_15724, align 1
  %v9_15724 = zext i8 %v8_15724 to i32
  store i32 %v9_15724, i32* %r3.global-to-local, align 4
  %v11_15724 = add i32 %v6_15724, 1
  store i32 %v11_15724, i32* @r1, align 4
  %v9_15728 = inttoptr i32 %v5_15720 to i8*
  store i8 %v8_15724, i8* %v9_15728, align 1
  %v10_15728 = load i32, i32* @r0, align 4
  %v11_15728 = add i32 %v10_15728, 1
  store i32 %v11_15728, i32* @r0, align 4
  br i1 %v9_15718, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_1572c = load i32, i32* @r1, align 4
  %v9_1572c = inttoptr i32 %v8_1572c to i8*
  %v10_1572c = load i8, i8* %v9_1572c, align 1
  %v11_1572c = zext i8 %v10_1572c to i32
  store i32 %v11_1572c, i32* %r3.global-to-local, align 4
  %v13_1572c = add i32 %v8_1572c, 1
  store i32 %v13_1572c, i32* @r1, align 4
  %v11_15730 = inttoptr i32 %v11_15728 to i8*
  store i8 %v10_1572c, i8* %v11_15730, align 1
  %v12_15730 = load i32, i32* @r0, align 4
  %v13_15730 = add i32 %v12_15730, 1
  store i32 %v13_15730, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_15714, %bb137
  %v0_1578c75 = phi i32 [ %v11_15728, %bb136 ], [ %v5_15720, %dec_label_pc_15714 ], [ %v13_15730, %bb137 ]
  %v0_15734 = load i32, i32* %r2.global-to-local, align 4
  %v1_15734 = load i32, i32* %ip.global-to-local, align 4
  %v2_15734 = sub i32 %v0_15734, %v1_15734
  store i32 %v2_15734, i32* %r2.global-to-local, align 4
  %v4_15734 = xor i32 %v1_15734, %v0_15734
  %v5_15734 = xor i32 %v2_15734, %v0_15734
  %v6_15734 = and i32 %v5_15734, %v4_15734
  %v7_15734 = icmp slt i32 %v6_15734, 0
  store i1 %v7_15734, i1* %cpsr_v.global-to-local, align 1
  %v8_15734 = icmp slt i32 %v2_15734, 0
  store i1 %v8_15734, i1* %cpsr_n.global-to-local, align 1
  %v9_15734 = icmp eq i32 %v0_15734, %v1_15734
  store i1 %v9_15734, i1* %cpsr_z.global-to-local, align 1
  %v5_15738 = icmp slt i32 %v0_15734, %v1_15734
  br i1 %v5_15738, label %bb131, label %dec_label_pc_1573c

dec_label_pc_1573c:                               ; preds = %.thread11
  %v0_1573c = load i32, i32* @r1, align 4
  %v1_1573c = urem i32 %v0_1573c, 4
  store i32 %v1_1573c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1573c = icmp eq i32 %v1_1573c, 0
  store i1 %v2_1573c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_1573c to i2
  br i1 %v2_1573c, label %dec_label_pc_15678, label %dec_label_pc_15744

dec_label_pc_15744:                               ; preds = %dec_label_pc_15670, %dec_label_pc_1573c
  %v0_1578c74 = phi i32 [ %v1_15650, %dec_label_pc_15670 ], [ %v0_1578c75, %dec_label_pc_1573c ]
  %v0_15838 = phi i32 [ %v2_15660, %dec_label_pc_15670 ], [ %v2_15734, %dec_label_pc_1573c ]
  %v0_1574c.off0 = phi i2 [ %extract.t, %dec_label_pc_15670 ], [ %extract.t123, %dec_label_pc_1573c ]
  %v0_15744 = phi i32 [ %v0_15650, %dec_label_pc_15670 ], [ %v0_1573c, %dec_label_pc_1573c ]
  %v1_15744 = and i32 %v0_15744, -4
  store i32 %v1_15744, i32* %r1.global-to-local, align 4
  %v1_15748 = inttoptr i32 %v1_15744 to i32*
  %v2_15748 = load i32, i32* %v1_15748, align 4
  store i32 %v2_15748, i32* @lr, align 4
  %v4_15748 = add i32 %v1_15744, 4
  store i32 %v4_15748, i32* %r1.global-to-local, align 4
  %v2_15830 = add i32 %v0_15838, -12
  %v4_15830 = sub i32 11, %v0_15838
  %v5_15830 = and i32 %v4_15830, %v0_15838
  %v6_15830 = icmp slt i32 %v5_15830, 0
  store i1 %v6_15830, i1* %cpsr_v.global-to-local, align 1
  %v7_15830 = icmp slt i32 %v2_15830, 0
  store i1 %v7_15830, i1* %cpsr_n.global-to-local, align 1
  %v8_15830 = icmp eq i32 %v0_15838, 12
  store i1 %v8_15830, i1* %cpsr_z.global-to-local, align 1
  %v5_15834 = icmp slt i32 %v0_15838, 12
  switch i2 %v0_1574c.off0, label %dec_label_pc_15758 [
    i2 -1, label %dec_label_pc_15830
    i2 -2, label %dec_label_pc_157c4
  ]

dec_label_pc_15758:                               ; preds = %dec_label_pc_15744
  br i1 %v5_15834, label %dec_label_pc_157a4, label %dec_label_pc_15760

dec_label_pc_15760:                               ; preds = %dec_label_pc_15758
  store i32 %v2_15830, i32* %r2.global-to-local, align 4
  %v3_15764 = load i32, i32* @r4, align 4
  store i32 %v3_15764, i32* %stack_var_-16, align 4
  %v6_15764 = load i32, i32* @r5, align 4
  store i32 %v6_15764, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15768

dec_label_pc_15768:                               ; preds = %dec_label_pc_15768.dec_label_pc_15768_crit_edge, %dec_label_pc_15760
  %v0_1578c = phi i32 [ %v12_1578c, %dec_label_pc_15768.dec_label_pc_15768_crit_edge ], [ %v0_1578c74, %dec_label_pc_15760 ]
  %v0_1576c = phi i32 [ %v0_1576c.pre, %dec_label_pc_15768.dec_label_pc_15768_crit_edge ], [ %v4_15748, %dec_label_pc_15760 ]
  %v0_15768 = phi i32 [ %v0_15768.pre, %dec_label_pc_15768.dec_label_pc_15768_crit_edge ], [ %v2_15748, %dec_label_pc_15760 ]
  %v3_15768 = udiv i32 %v0_15768, 256
  store i32 %v3_15768, i32* %r3.global-to-local, align 4
  %v1_1576c = inttoptr i32 %v0_1576c to i32*
  %v2_1576c = load i32, i32* %v1_1576c, align 4
  store i32 %v2_1576c, i32* %r4.global-to-local, align 4
  %v3_1576c = add i32 %v0_1576c, 4
  %v4_1576c = inttoptr i32 %v3_1576c to i32*
  %v5_1576c = load i32, i32* %v4_1576c, align 4
  store i32 %v5_1576c, i32* %r5.global-to-local, align 4
  %v6_1576c = add i32 %v0_1576c, 8
  %v7_1576c = inttoptr i32 %v6_1576c to i32*
  %v8_1576c = load i32, i32* %v7_1576c, align 4
  store i32 %v8_1576c, i32* %ip.global-to-local, align 4
  %v9_1576c = add i32 %v0_1576c, 12
  %v10_1576c = inttoptr i32 %v9_1576c to i32*
  %v11_1576c = load i32, i32* %v10_1576c, align 4
  store i32 %v11_1576c, i32* @lr, align 4
  %v12_1576c = add i32 %v0_1576c, 16
  store i32 %v12_1576c, i32* %r1.global-to-local, align 4
  %v4_15770 = mul i32 %v2_1576c, 16777216
  %v5_15770 = or i32 %v4_15770, %v3_15768
  store i32 %v5_15770, i32* %r3.global-to-local, align 4
  %v3_15774 = udiv i32 %v2_1576c, 256
  %v4_15778 = mul i32 %v5_1576c, 16777216
  %v5_15778 = or i32 %v4_15778, %v3_15774
  store i32 %v5_15778, i32* %r4.global-to-local, align 4
  %v3_1577c = udiv i32 %v5_1576c, 256
  %v4_15780 = mul i32 %v8_1576c, 16777216
  %v5_15780 = or i32 %v4_15780, %v3_1577c
  store i32 %v5_15780, i32* %r5.global-to-local, align 4
  %v3_15784 = udiv i32 %v8_1576c, 256
  %v4_15788 = mul i32 %v11_1576c, 16777216
  %v5_15788 = or i32 %v4_15788, %v3_15784
  store i32 %v5_15788, i32* %ip.global-to-local, align 4
  %v1_1578c = inttoptr i32 %v0_1578c to i32*
  store i32 %v5_15770, i32* %v1_1578c, align 4
  %v3_1578c = add i32 %v0_1578c, 4
  %v4_1578c = inttoptr i32 %v3_1578c to i32*
  %v5_1578c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1578c, i32* %v4_1578c, align 4
  %v6_1578c = add i32 %v0_1578c, 8
  %v7_1578c = inttoptr i32 %v6_1578c to i32*
  %v8_1578c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1578c, i32* %v7_1578c, align 4
  %v9_1578c = add i32 %v0_1578c, 12
  %v10_1578c = inttoptr i32 %v9_1578c to i32*
  %v11_1578c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1578c, i32* %v10_1578c, align 4
  %v12_1578c = add i32 %v0_1578c, 16
  store i32 %v12_1578c, i32* @r0, align 4
  %v0_15790 = load i32, i32* %r2.global-to-local, align 4
  %v2_15790 = add i32 %v0_15790, -16
  store i32 %v2_15790, i32* %r2.global-to-local, align 4
  %v6_15794 = icmp slt i32 %v0_15790, 16
  br i1 %v6_15794, label %dec_label_pc_15798, label %dec_label_pc_15768.dec_label_pc_15768_crit_edge

dec_label_pc_15768.dec_label_pc_15768_crit_edge:  ; preds = %dec_label_pc_15768
  %v0_15768.pre = load i32, i32* @lr, align 4
  %v0_1576c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15768

dec_label_pc_15798:                               ; preds = %dec_label_pc_15768
  %v2_15798 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15798, i32* @r4, align 4
  %v5_15798 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15798, i32* @r5, align 4
  %v2_1579c = add i32 %v0_15790, -4
  store i32 %v2_1579c, i32* %r2.global-to-local, align 4
  %v4_1579c = add i32 %v0_15790, 2147483632
  %v5_1579c = and i32 %v2_1579c, %v4_1579c
  %v6_1579c = icmp slt i32 %v5_1579c, 0
  store i1 %v6_1579c, i1* %cpsr_v.global-to-local, align 1
  %v7_1579c = icmp slt i32 %v2_1579c, 0
  store i1 %v7_1579c, i1* %cpsr_n.global-to-local, align 1
  %v8_1579c = icmp eq i32 %v2_1579c, 0
  store i1 %v8_1579c, i1* %cpsr_z.global-to-local, align 1
  %v5_157a0 = icmp slt i32 %v2_15790, -12
  br i1 %v5_157a0, label %dec_label_pc_157bc, label %dec_label_pc_157a4

dec_label_pc_157a4:                               ; preds = %dec_label_pc_15798, %dec_label_pc_15758, %dec_label_pc_157a4
  %v1_157b0 = phi i32 [ %v4_157b0, %dec_label_pc_157a4 ], [ %v12_1578c, %dec_label_pc_15798 ], [ %v0_1578c74, %dec_label_pc_15758 ]
  %v0_157a4 = load i32, i32* @lr, align 4
  %v3_157a4 = udiv i32 %v0_157a4, 256
  store i32 %v3_157a4, i32* %ip.global-to-local, align 4
  %v0_157a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_157a8 = inttoptr i32 %v0_157a8 to i32*
  %v2_157a8 = load i32, i32* %v1_157a8, align 4
  store i32 %v2_157a8, i32* @lr, align 4
  %v4_157a8 = add i32 %v0_157a8, 4
  store i32 %v4_157a8, i32* %r1.global-to-local, align 4
  %v4_157ac = mul i32 %v2_157a8, 16777216
  %v5_157ac = or i32 %v4_157ac, %v3_157a4
  store i32 %v5_157ac, i32* %ip.global-to-local, align 4
  %v2_157b0 = inttoptr i32 %v1_157b0 to i32*
  store i32 %v5_157ac, i32* %v2_157b0, align 4
  %v3_157b0 = load i32, i32* @r0, align 4
  %v4_157b0 = add i32 %v3_157b0, 4
  store i32 %v4_157b0, i32* @r0, align 4
  %v0_157b4 = load i32, i32* %r2.global-to-local, align 4
  %v2_157b4 = add i32 %v0_157b4, -4
  store i32 %v2_157b4, i32* %r2.global-to-local, align 4
  %v6_157b8 = icmp slt i32 %v0_157b4, 4
  br i1 %v6_157b8, label %dec_label_pc_157bc.loopexit, label %dec_label_pc_157a4

dec_label_pc_157bc.loopexit:                      ; preds = %dec_label_pc_157a4
  %v4_157b4 = sub i32 3, %v0_157b4
  %v5_157b4 = and i32 %v4_157b4, %v0_157b4
  %v6_157b4 = icmp slt i32 %v5_157b4, 0
  %v7_157b4 = icmp slt i32 %v2_157b4, 0
  store i1 %v6_157b4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_157b4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_157bc

dec_label_pc_157bc:                               ; preds = %dec_label_pc_157bc.loopexit, %dec_label_pc_15798
  %v2_156fc111 = phi i32 [ %v4_157b0, %dec_label_pc_157bc.loopexit ], [ %v12_1578c, %dec_label_pc_15798 ]
  %v0_156ec107 = phi i32 [ %v2_157b4, %dec_label_pc_157bc.loopexit ], [ %v2_1579c, %dec_label_pc_15798 ]
  %v0_157bc = load i32, i32* %r1.global-to-local, align 4
  %v1_157bc = add i32 %v0_157bc, -3
  store i32 %v1_157bc, i32* @r1, align 4
  br label %bb131

dec_label_pc_157c4:                               ; preds = %dec_label_pc_15744
  br i1 %v5_15834, label %dec_label_pc_15810, label %dec_label_pc_157cc

dec_label_pc_157cc:                               ; preds = %dec_label_pc_157c4
  store i32 %v2_15830, i32* %r2.global-to-local, align 4
  %v3_157d0 = load i32, i32* @r4, align 4
  store i32 %v3_157d0, i32* %stack_var_-16, align 4
  %v6_157d0 = load i32, i32* @r5, align 4
  store i32 %v6_157d0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_157d4

dec_label_pc_157d4:                               ; preds = %dec_label_pc_157d4.dec_label_pc_157d4_crit_edge, %dec_label_pc_157cc
  %v0_157f8 = phi i32 [ %v12_157f8, %dec_label_pc_157d4.dec_label_pc_157d4_crit_edge ], [ %v0_1578c74, %dec_label_pc_157cc ]
  %v0_157d8 = phi i32 [ %v0_157d8.pre, %dec_label_pc_157d4.dec_label_pc_157d4_crit_edge ], [ %v4_15748, %dec_label_pc_157cc ]
  %v0_157d4 = phi i32 [ %v0_157d4.pre, %dec_label_pc_157d4.dec_label_pc_157d4_crit_edge ], [ %v2_15748, %dec_label_pc_157cc ]
  %v3_157d4 = udiv i32 %v0_157d4, 65536
  store i32 %v3_157d4, i32* %r3.global-to-local, align 4
  %v1_157d8 = inttoptr i32 %v0_157d8 to i32*
  %v2_157d8 = load i32, i32* %v1_157d8, align 4
  store i32 %v2_157d8, i32* %r4.global-to-local, align 4
  %v3_157d8 = add i32 %v0_157d8, 4
  %v4_157d8 = inttoptr i32 %v3_157d8 to i32*
  %v5_157d8 = load i32, i32* %v4_157d8, align 4
  store i32 %v5_157d8, i32* %r5.global-to-local, align 4
  %v6_157d8 = add i32 %v0_157d8, 8
  %v7_157d8 = inttoptr i32 %v6_157d8 to i32*
  %v8_157d8 = load i32, i32* %v7_157d8, align 4
  store i32 %v8_157d8, i32* %ip.global-to-local, align 4
  %v9_157d8 = add i32 %v0_157d8, 12
  %v10_157d8 = inttoptr i32 %v9_157d8 to i32*
  %v11_157d8 = load i32, i32* %v10_157d8, align 4
  store i32 %v11_157d8, i32* @lr, align 4
  %v12_157d8 = add i32 %v0_157d8, 16
  store i32 %v12_157d8, i32* %r1.global-to-local, align 4
  %v4_157dc = mul i32 %v2_157d8, 65536
  %v5_157dc = or i32 %v4_157dc, %v3_157d4
  store i32 %v5_157dc, i32* %r3.global-to-local, align 4
  %v3_157e0 = udiv i32 %v2_157d8, 65536
  %v4_157e4 = mul i32 %v5_157d8, 65536
  %v5_157e4 = or i32 %v4_157e4, %v3_157e0
  store i32 %v5_157e4, i32* %r4.global-to-local, align 4
  %v3_157e8 = udiv i32 %v5_157d8, 65536
  %v4_157ec = mul i32 %v8_157d8, 65536
  %v5_157ec = or i32 %v4_157ec, %v3_157e8
  store i32 %v5_157ec, i32* %r5.global-to-local, align 4
  %v3_157f0 = udiv i32 %v8_157d8, 65536
  %v4_157f4 = mul i32 %v11_157d8, 65536
  %v5_157f4 = or i32 %v4_157f4, %v3_157f0
  store i32 %v5_157f4, i32* %ip.global-to-local, align 4
  %v1_157f8 = inttoptr i32 %v0_157f8 to i32*
  store i32 %v5_157dc, i32* %v1_157f8, align 4
  %v3_157f8 = add i32 %v0_157f8, 4
  %v4_157f8 = inttoptr i32 %v3_157f8 to i32*
  %v5_157f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_157f8, i32* %v4_157f8, align 4
  %v6_157f8 = add i32 %v0_157f8, 8
  %v7_157f8 = inttoptr i32 %v6_157f8 to i32*
  %v8_157f8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_157f8, i32* %v7_157f8, align 4
  %v9_157f8 = add i32 %v0_157f8, 12
  %v10_157f8 = inttoptr i32 %v9_157f8 to i32*
  %v11_157f8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_157f8, i32* %v10_157f8, align 4
  %v12_157f8 = add i32 %v0_157f8, 16
  store i32 %v12_157f8, i32* @r0, align 4
  %v0_157fc = load i32, i32* %r2.global-to-local, align 4
  %v2_157fc = add i32 %v0_157fc, -16
  store i32 %v2_157fc, i32* %r2.global-to-local, align 4
  %v6_15800 = icmp slt i32 %v0_157fc, 16
  br i1 %v6_15800, label %dec_label_pc_15804, label %dec_label_pc_157d4.dec_label_pc_157d4_crit_edge

dec_label_pc_157d4.dec_label_pc_157d4_crit_edge:  ; preds = %dec_label_pc_157d4
  %v0_157d4.pre = load i32, i32* @lr, align 4
  %v0_157d8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_157d4

dec_label_pc_15804:                               ; preds = %dec_label_pc_157d4
  %v2_15804 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15804, i32* @r4, align 4
  %v5_15804 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15804, i32* @r5, align 4
  %v2_15808 = add i32 %v0_157fc, -4
  store i32 %v2_15808, i32* %r2.global-to-local, align 4
  %v4_15808 = add i32 %v0_157fc, 2147483632
  %v5_15808 = and i32 %v2_15808, %v4_15808
  %v6_15808 = icmp slt i32 %v5_15808, 0
  store i1 %v6_15808, i1* %cpsr_v.global-to-local, align 1
  %v7_15808 = icmp slt i32 %v2_15808, 0
  store i1 %v7_15808, i1* %cpsr_n.global-to-local, align 1
  %v8_15808 = icmp eq i32 %v2_15808, 0
  store i1 %v8_15808, i1* %cpsr_z.global-to-local, align 1
  %v5_1580c = icmp slt i32 %v2_157fc, -12
  br i1 %v5_1580c, label %dec_label_pc_15828, label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %dec_label_pc_15804, %dec_label_pc_157c4, %dec_label_pc_15810
  %v1_1581c = phi i32 [ %v4_1581c, %dec_label_pc_15810 ], [ %v12_157f8, %dec_label_pc_15804 ], [ %v0_1578c74, %dec_label_pc_157c4 ]
  %v0_15810 = load i32, i32* @lr, align 4
  %v3_15810 = udiv i32 %v0_15810, 65536
  store i32 %v3_15810, i32* %ip.global-to-local, align 4
  %v0_15814 = load i32, i32* %r1.global-to-local, align 4
  %v1_15814 = inttoptr i32 %v0_15814 to i32*
  %v2_15814 = load i32, i32* %v1_15814, align 4
  store i32 %v2_15814, i32* @lr, align 4
  %v4_15814 = add i32 %v0_15814, 4
  store i32 %v4_15814, i32* %r1.global-to-local, align 4
  %v4_15818 = mul i32 %v2_15814, 65536
  %v5_15818 = or i32 %v4_15818, %v3_15810
  store i32 %v5_15818, i32* %ip.global-to-local, align 4
  %v2_1581c = inttoptr i32 %v1_1581c to i32*
  store i32 %v5_15818, i32* %v2_1581c, align 4
  %v3_1581c = load i32, i32* @r0, align 4
  %v4_1581c = add i32 %v3_1581c, 4
  store i32 %v4_1581c, i32* @r0, align 4
  %v0_15820 = load i32, i32* %r2.global-to-local, align 4
  %v2_15820 = add i32 %v0_15820, -4
  store i32 %v2_15820, i32* %r2.global-to-local, align 4
  %v6_15824 = icmp slt i32 %v0_15820, 4
  br i1 %v6_15824, label %dec_label_pc_15828.loopexit, label %dec_label_pc_15810

dec_label_pc_15828.loopexit:                      ; preds = %dec_label_pc_15810
  %v4_15820 = sub i32 3, %v0_15820
  %v5_15820 = and i32 %v4_15820, %v0_15820
  %v6_15820 = icmp slt i32 %v5_15820, 0
  %v7_15820 = icmp slt i32 %v2_15820, 0
  store i1 %v6_15820, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15820, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15828

dec_label_pc_15828:                               ; preds = %dec_label_pc_15828.loopexit, %dec_label_pc_15804
  %v2_156fc112 = phi i32 [ %v4_1581c, %dec_label_pc_15828.loopexit ], [ %v12_157f8, %dec_label_pc_15804 ]
  %v0_156ec108 = phi i32 [ %v2_15820, %dec_label_pc_15828.loopexit ], [ %v2_15808, %dec_label_pc_15804 ]
  %v0_15828 = load i32, i32* %r1.global-to-local, align 4
  %v1_15828 = add i32 %v0_15828, -2
  store i32 %v1_15828, i32* @r1, align 4
  br label %bb131

dec_label_pc_15830:                               ; preds = %dec_label_pc_15744
  br i1 %v5_15834, label %dec_label_pc_1587c, label %dec_label_pc_15838

dec_label_pc_15838:                               ; preds = %dec_label_pc_15830
  store i32 %v2_15830, i32* %r2.global-to-local, align 4
  %v3_1583c = load i32, i32* @r4, align 4
  store i32 %v3_1583c, i32* %stack_var_-16, align 4
  %v6_1583c = load i32, i32* @r5, align 4
  store i32 %v6_1583c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15840

dec_label_pc_15840:                               ; preds = %dec_label_pc_15840.dec_label_pc_15840_crit_edge, %dec_label_pc_15838
  %v0_15864 = phi i32 [ %v12_15864, %dec_label_pc_15840.dec_label_pc_15840_crit_edge ], [ %v0_1578c74, %dec_label_pc_15838 ]
  %v0_15844 = phi i32 [ %v0_15844.pre, %dec_label_pc_15840.dec_label_pc_15840_crit_edge ], [ %v4_15748, %dec_label_pc_15838 ]
  %v0_15840 = phi i32 [ %v0_15840.pre, %dec_label_pc_15840.dec_label_pc_15840_crit_edge ], [ %v2_15748, %dec_label_pc_15838 ]
  %v3_15840 = udiv i32 %v0_15840, 16777216
  store i32 %v3_15840, i32* %r3.global-to-local, align 4
  %v1_15844 = inttoptr i32 %v0_15844 to i32*
  %v2_15844 = load i32, i32* %v1_15844, align 4
  store i32 %v2_15844, i32* %r4.global-to-local, align 4
  %v3_15844 = add i32 %v0_15844, 4
  %v4_15844 = inttoptr i32 %v3_15844 to i32*
  %v5_15844 = load i32, i32* %v4_15844, align 4
  store i32 %v5_15844, i32* %r5.global-to-local, align 4
  %v6_15844 = add i32 %v0_15844, 8
  %v7_15844 = inttoptr i32 %v6_15844 to i32*
  %v8_15844 = load i32, i32* %v7_15844, align 4
  store i32 %v8_15844, i32* %ip.global-to-local, align 4
  %v9_15844 = add i32 %v0_15844, 12
  %v10_15844 = inttoptr i32 %v9_15844 to i32*
  %v11_15844 = load i32, i32* %v10_15844, align 4
  store i32 %v11_15844, i32* @lr, align 4
  %v12_15844 = add i32 %v0_15844, 16
  store i32 %v12_15844, i32* %r1.global-to-local, align 4
  %v4_15848 = mul i32 %v2_15844, 256
  %v5_15848 = or i32 %v4_15848, %v3_15840
  store i32 %v5_15848, i32* %r3.global-to-local, align 4
  %v3_1584c = udiv i32 %v2_15844, 16777216
  %v4_15850 = mul i32 %v5_15844, 256
  %v5_15850 = or i32 %v4_15850, %v3_1584c
  store i32 %v5_15850, i32* %r4.global-to-local, align 4
  %v3_15854 = udiv i32 %v5_15844, 16777216
  %v4_15858 = mul i32 %v8_15844, 256
  %v5_15858 = or i32 %v4_15858, %v3_15854
  store i32 %v5_15858, i32* %r5.global-to-local, align 4
  %v3_1585c = udiv i32 %v8_15844, 16777216
  %v4_15860 = mul i32 %v11_15844, 256
  %v5_15860 = or i32 %v4_15860, %v3_1585c
  store i32 %v5_15860, i32* %ip.global-to-local, align 4
  %v1_15864 = inttoptr i32 %v0_15864 to i32*
  store i32 %v5_15848, i32* %v1_15864, align 4
  %v3_15864 = add i32 %v0_15864, 4
  %v4_15864 = inttoptr i32 %v3_15864 to i32*
  %v5_15864 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15864, i32* %v4_15864, align 4
  %v6_15864 = add i32 %v0_15864, 8
  %v7_15864 = inttoptr i32 %v6_15864 to i32*
  %v8_15864 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15864, i32* %v7_15864, align 4
  %v9_15864 = add i32 %v0_15864, 12
  %v10_15864 = inttoptr i32 %v9_15864 to i32*
  %v11_15864 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_15864, i32* %v10_15864, align 4
  %v12_15864 = add i32 %v0_15864, 16
  store i32 %v12_15864, i32* @r0, align 4
  %v0_15868 = load i32, i32* %r2.global-to-local, align 4
  %v2_15868 = add i32 %v0_15868, -16
  store i32 %v2_15868, i32* %r2.global-to-local, align 4
  %v6_1586c = icmp slt i32 %v0_15868, 16
  br i1 %v6_1586c, label %dec_label_pc_15870, label %dec_label_pc_15840.dec_label_pc_15840_crit_edge

dec_label_pc_15840.dec_label_pc_15840_crit_edge:  ; preds = %dec_label_pc_15840
  %v0_15840.pre = load i32, i32* @lr, align 4
  %v0_15844.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15840

dec_label_pc_15870:                               ; preds = %dec_label_pc_15840
  %v2_15870 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15870, i32* @r4, align 4
  %v5_15870 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15870, i32* @r5, align 4
  %v2_15874 = add i32 %v0_15868, -4
  store i32 %v2_15874, i32* %r2.global-to-local, align 4
  %v4_15874 = add i32 %v0_15868, 2147483632
  %v5_15874 = and i32 %v2_15874, %v4_15874
  %v6_15874 = icmp slt i32 %v5_15874, 0
  store i1 %v6_15874, i1* %cpsr_v.global-to-local, align 1
  %v7_15874 = icmp slt i32 %v2_15874, 0
  store i1 %v7_15874, i1* %cpsr_n.global-to-local, align 1
  %v8_15874 = icmp eq i32 %v2_15874, 0
  store i1 %v8_15874, i1* %cpsr_z.global-to-local, align 1
  %v5_15878 = icmp slt i32 %v2_15868, -12
  br i1 %v5_15878, label %dec_label_pc_15894, label %dec_label_pc_1587c

dec_label_pc_1587c:                               ; preds = %dec_label_pc_15870, %dec_label_pc_15830, %dec_label_pc_1587c
  %v1_15888 = phi i32 [ %v4_15888, %dec_label_pc_1587c ], [ %v12_15864, %dec_label_pc_15870 ], [ %v0_1578c74, %dec_label_pc_15830 ]
  %v0_1587c = load i32, i32* @lr, align 4
  %v3_1587c = udiv i32 %v0_1587c, 16777216
  store i32 %v3_1587c, i32* %ip.global-to-local, align 4
  %v0_15880 = load i32, i32* %r1.global-to-local, align 4
  %v1_15880 = inttoptr i32 %v0_15880 to i32*
  %v2_15880 = load i32, i32* %v1_15880, align 4
  store i32 %v2_15880, i32* @lr, align 4
  %v4_15880 = add i32 %v0_15880, 4
  store i32 %v4_15880, i32* %r1.global-to-local, align 4
  %v4_15884 = mul i32 %v2_15880, 256
  %v5_15884 = or i32 %v4_15884, %v3_1587c
  store i32 %v5_15884, i32* %ip.global-to-local, align 4
  %v2_15888 = inttoptr i32 %v1_15888 to i32*
  store i32 %v5_15884, i32* %v2_15888, align 4
  %v3_15888 = load i32, i32* @r0, align 4
  %v4_15888 = add i32 %v3_15888, 4
  store i32 %v4_15888, i32* @r0, align 4
  %v0_1588c = load i32, i32* %r2.global-to-local, align 4
  %v2_1588c = add i32 %v0_1588c, -4
  store i32 %v2_1588c, i32* %r2.global-to-local, align 4
  %v6_15890 = icmp slt i32 %v0_1588c, 4
  br i1 %v6_15890, label %dec_label_pc_15894.loopexit, label %dec_label_pc_1587c

dec_label_pc_15894.loopexit:                      ; preds = %dec_label_pc_1587c
  %v4_1588c = sub i32 3, %v0_1588c
  %v5_1588c = and i32 %v4_1588c, %v0_1588c
  %v6_1588c = icmp slt i32 %v5_1588c, 0
  %v7_1588c = icmp slt i32 %v2_1588c, 0
  store i1 %v6_1588c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1588c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15894

dec_label_pc_15894:                               ; preds = %dec_label_pc_15894.loopexit, %dec_label_pc_15870
  %v2_156fc113 = phi i32 [ %v4_15888, %dec_label_pc_15894.loopexit ], [ %v12_15864, %dec_label_pc_15870 ]
  %v0_156ec109 = phi i32 [ %v2_1588c, %dec_label_pc_15894.loopexit ], [ %v2_15874, %dec_label_pc_15870 ]
  %v0_15894 = load i32, i32* %r1.global-to-local, align 4
  %v1_15894 = add i32 %v0_15894, -1
  store i32 %v1_15894, i32* @r1, align 4
  br label %bb131

dec_label_pc_1589c:                               ; preds = %dec_label_pc_15650
  %v1_1589c = load i32, i32* @r2, align 4
  %v2_1589c = add i32 %v1_1589c, %v0_15650
  store i32 %v2_1589c, i32* %r1.global-to-local, align 4
  %v2_158a0 = add i32 %v1_1589c, %v1_15650
  store i32 %v2_158a0, i32* %r0.global-to-local, align 4
  %v2_158a4 = add i32 %v1_1589c, -4
  store i32 %v2_158a4, i32* %r2.global-to-local, align 4
  %v4_158a4 = sub i32 3, %v1_1589c
  %v5_158a4 = and i32 %v4_158a4, %v1_1589c
  %v6_158a4 = icmp slt i32 %v5_158a4, 0
  store i1 %v6_158a4, i1* %cpsr_v.global-to-local, align 1
  %v7_158a4 = icmp slt i32 %v2_158a4, 0
  store i1 %v7_158a4, i1* %cpsr_n.global-to-local, align 1
  %v8_158a4 = icmp eq i32 %v1_1589c, 4
  store i1 %v8_158a4, i1* %cpsr_z.global-to-local, align 1
  %v5_158a8 = icmp slt i32 %v1_1589c, 4
  br i1 %v5_158a8, label %bb141, label %dec_label_pc_158ac

dec_label_pc_158ac:                               ; preds = %dec_label_pc_1589c
  %v1_158ac = urem i32 %v2_158a0, 4
  store i32 %v1_158ac, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_158ac = icmp eq i32 %v1_158ac, 0
  store i1 %v2_158ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158ac, label %dec_label_pc_158b4, label %dec_label_pc_15954

dec_label_pc_158b4:                               ; preds = %dec_label_pc_158ac
  %v1_158b4 = urem i32 %v2_1589c, 4
  store i32 %v1_158b4, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_158b4 = icmp eq i32 %v1_158b4, 0
  store i1 %v2_158b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158b4, label %dec_label_pc_158bc, label %dec_label_pc_15980

dec_label_pc_158bc:                               ; preds = %dec_label_pc_158b4, %dec_label_pc_15978
  %v0_158d448 = phi i32 [ %v2_158a0, %dec_label_pc_158b4 ], [ %v0_159c831, %dec_label_pc_15978 ]
  %v0_158d047 = phi i32 [ %v2_1589c, %dec_label_pc_158b4 ], [ %v0_15978, %dec_label_pc_15978 ]
  %v0_158bc = phi i32 [ %v2_158a4, %dec_label_pc_158b4 ], [ %v2_15970, %dec_label_pc_15978 ]
  %v2_158bc = add i32 %v0_158bc, -8
  store i32 %v2_158bc, i32* %r2.global-to-local, align 4
  %v4_158bc = sub i32 7, %v0_158bc
  %v5_158bc = and i32 %v4_158bc, %v0_158bc
  %v6_158bc = icmp slt i32 %v5_158bc, 0
  store i1 %v6_158bc, i1* %cpsr_v.global-to-local, align 1
  %v7_158bc = icmp slt i32 %v2_158bc, 0
  store i1 %v7_158bc, i1* %cpsr_n.global-to-local, align 1
  %v8_158bc = icmp eq i32 %v0_158bc, 8
  store i1 %v8_158bc, i1* %cpsr_z.global-to-local, align 1
  %v5_158c0 = icmp slt i32 %v0_158bc, 8
  br i1 %v5_158c0, label %dec_label_pc_1590c, label %dec_label_pc_158c4

dec_label_pc_158c4:                               ; preds = %dec_label_pc_158bc
  %v3_158c4 = load i32, i32* @r4, align 4
  store i32 %v3_158c4, i32* %stack_var_-8, align 4
  %v6_158c4 = load i32, i32* @lr, align 4
  %v2_158c8 = add i32 %v0_158bc, -28
  store i32 %v2_158c8, i32* %r2.global-to-local, align 4
  %v4_158c8 = sub i32 27, %v0_158bc
  %v5_158c8 = and i32 %v4_158c8, %v2_158bc
  %v6_158c8 = icmp slt i32 %v5_158c8, 0
  store i1 %v6_158c8, i1* %cpsr_v.global-to-local, align 1
  %v7_158c8 = icmp slt i32 %v2_158c8, 0
  store i1 %v7_158c8, i1* %cpsr_n.global-to-local, align 1
  %v8_158c8 = icmp eq i32 %v2_158bc, 20
  store i1 %v8_158c8, i1* %cpsr_z.global-to-local, align 1
  %v5_158cc = icmp slt i32 %v2_158bc, 20
  br i1 %v5_158cc, label %dec_label_pc_158e8, label %dec_label_pc_158d0

dec_label_pc_158d0:                               ; preds = %dec_label_pc_158c4, %dec_label_pc_158d0.dec_label_pc_158d0_crit_edge
  %v0_158d4 = phi i32 [ %v1_158dc, %dec_label_pc_158d0.dec_label_pc_158d0_crit_edge ], [ %v0_158d448, %dec_label_pc_158c4 ]
  %v0_158d0 = phi i32 [ %v0_158d0.pre, %dec_label_pc_158d0.dec_label_pc_158d0_crit_edge ], [ %v0_158d047, %dec_label_pc_158c4 ]
  %v1_158d0 = add i32 %v0_158d0, -4
  %v2_158d0 = inttoptr i32 %v1_158d0 to i32*
  %v3_158d0 = load i32, i32* %v2_158d0, align 4
  store i32 %v3_158d0, i32* %r3.global-to-local, align 4
  %v4_158d0 = add i32 %v0_158d0, -8
  %v5_158d0 = inttoptr i32 %v4_158d0 to i32*
  %v6_158d0 = load i32, i32* %v5_158d0, align 4
  store i32 %v6_158d0, i32* %r4.global-to-local, align 4
  %v7_158d0 = add i32 %v0_158d0, -12
  %v8_158d0 = inttoptr i32 %v7_158d0 to i32*
  %v9_158d0 = load i32, i32* %v8_158d0, align 4
  store i32 %v9_158d0, i32* %ip.global-to-local, align 4
  %v10_158d0 = add i32 %v0_158d0, -16
  %v11_158d0 = inttoptr i32 %v10_158d0 to i32*
  %v12_158d0 = load i32, i32* %v11_158d0, align 4
  store i32 %v12_158d0, i32* %lr.global-to-local, align 4
  store i32 %v10_158d0, i32* %r1.global-to-local, align 4
  %v1_158d4 = add i32 %v0_158d4, -16
  %v2_158d4 = inttoptr i32 %v1_158d4 to i32*
  store i32 %v3_158d0, i32* %v2_158d4, align 4
  %v4_158d4 = add i32 %v0_158d4, -12
  %v5_158d4 = inttoptr i32 %v4_158d4 to i32*
  %v6_158d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_158d4, i32* %v5_158d4, align 4
  %v7_158d4 = add i32 %v0_158d4, -8
  %v8_158d4 = inttoptr i32 %v7_158d4 to i32*
  %v9_158d4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_158d4, i32* %v8_158d4, align 4
  %v10_158d4 = add i32 %v0_158d4, -4
  %v11_158d4 = inttoptr i32 %v10_158d4 to i32*
  %v12_158d4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_158d4, i32* %v11_158d4, align 4
  store i32 %v1_158d4, i32* %r0.global-to-local, align 4
  %v0_158d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_158d8 = add i32 %v0_158d8, -4
  %v2_158d8 = inttoptr i32 %v1_158d8 to i32*
  %v3_158d8 = load i32, i32* %v2_158d8, align 4
  store i32 %v3_158d8, i32* %r3.global-to-local, align 4
  %v4_158d8 = add i32 %v0_158d8, -8
  %v5_158d8 = inttoptr i32 %v4_158d8 to i32*
  %v6_158d8 = load i32, i32* %v5_158d8, align 4
  store i32 %v6_158d8, i32* %r4.global-to-local, align 4
  %v7_158d8 = add i32 %v0_158d8, -12
  %v8_158d8 = inttoptr i32 %v7_158d8 to i32*
  %v9_158d8 = load i32, i32* %v8_158d8, align 4
  store i32 %v9_158d8, i32* %ip.global-to-local, align 4
  %v10_158d8 = add i32 %v0_158d8, -16
  %v11_158d8 = inttoptr i32 %v10_158d8 to i32*
  %v12_158d8 = load i32, i32* %v11_158d8, align 4
  store i32 %v12_158d8, i32* %lr.global-to-local, align 4
  store i32 %v10_158d8, i32* %r1.global-to-local, align 4
  %v1_158dc = add i32 %v0_158d4, -32
  %v2_158dc = inttoptr i32 %v1_158dc to i32*
  store i32 %v3_158d8, i32* %v2_158dc, align 4
  %v4_158dc = add i32 %v0_158d4, -28
  %v5_158dc = inttoptr i32 %v4_158dc to i32*
  %v6_158dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_158dc, i32* %v5_158dc, align 4
  %v7_158dc = add i32 %v0_158d4, -24
  %v8_158dc = inttoptr i32 %v7_158dc to i32*
  %v9_158dc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_158dc, i32* %v8_158dc, align 4
  %v10_158dc = add i32 %v0_158d4, -20
  %v11_158dc = inttoptr i32 %v10_158dc to i32*
  %v12_158dc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_158dc, i32* %v11_158dc, align 4
  store i32 %v1_158dc, i32* %r0.global-to-local, align 4
  %v0_158e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_158e0 = add i32 %v0_158e0, -32
  store i32 %v2_158e0, i32* %r2.global-to-local, align 4
  %v6_158e4 = icmp slt i32 %v0_158e0, 32
  br i1 %v6_158e4, label %dec_label_pc_158e8.loopexit, label %dec_label_pc_158d0.dec_label_pc_158d0_crit_edge

dec_label_pc_158d0.dec_label_pc_158d0_crit_edge:  ; preds = %dec_label_pc_158d0
  %v0_158d0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_158d0

dec_label_pc_158e8.loopexit:                      ; preds = %dec_label_pc_158d0
  %v4_158e0 = sub i32 31, %v0_158e0
  %v5_158e0 = and i32 %v4_158e0, %v0_158e0
  %v6_158e0 = icmp slt i32 %v5_158e0, 0
  %v7_158e0 = icmp slt i32 %v2_158e0, 0
  store i1 %v6_158e0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_158e0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_158e8

dec_label_pc_158e8:                               ; preds = %dec_label_pc_158e8.loopexit, %dec_label_pc_158c4
  %v6_158f0 = phi i32 [ %v1_158dc, %dec_label_pc_158e8.loopexit ], [ %v0_158d448, %dec_label_pc_158c4 ]
  %v0_158f8.pr = phi i32 [ %v2_158e0, %dec_label_pc_158e8.loopexit ], [ %v2_158c8, %dec_label_pc_158c4 ]
  %v4_158e8 = add i32 %v0_158f8.pr, 16
  %v6_158e8 = sub i32 0, %v0_158f8.pr
  %v7_158e8 = and i32 %v4_158e8, %v6_158e8
  %v8_158e8 = icmp slt i32 %v7_158e8, 0
  store i1 %v8_158e8, i1* %cpsr_v.global-to-local, align 1
  %v9_158e8 = icmp slt i32 %v4_158e8, 0
  store i1 %v9_158e8, i1* %cpsr_n.global-to-local, align 1
  %v10_158e8 = icmp eq i32 %v4_158e8, 0
  store i1 %v10_158e8, i1* %cpsr_z.global-to-local, align 1
  %v5_158ec = icmp slt i32 %v0_158f8.pr, -16
  br i1 %v5_158ec, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_158e8
  %v6_158ec = load i32, i32* %r1.global-to-local, align 4
  %v7_158ec = add i32 %v6_158ec, -4
  %v8_158ec = inttoptr i32 %v7_158ec to i32*
  %v9_158ec = load i32, i32* %v8_158ec, align 4
  store i32 %v9_158ec, i32* %r3.global-to-local, align 4
  %v10_158ec = add i32 %v6_158ec, -8
  %v11_158ec = inttoptr i32 %v10_158ec to i32*
  %v12_158ec = load i32, i32* %v11_158ec, align 4
  store i32 %v12_158ec, i32* %r4.global-to-local, align 4
  %v13_158ec = add i32 %v6_158ec, -12
  %v14_158ec = inttoptr i32 %v13_158ec to i32*
  %v15_158ec = load i32, i32* %v14_158ec, align 4
  store i32 %v15_158ec, i32* %ip.global-to-local, align 4
  %v16_158ec = add i32 %v6_158ec, -16
  %v17_158ec = inttoptr i32 %v16_158ec to i32*
  %v18_158ec = load i32, i32* %v17_158ec, align 4
  store i32 %v18_158ec, i32* %lr.global-to-local, align 4
  store i32 %v16_158ec, i32* %r1.global-to-local, align 4
  %v7_158f0 = add i32 %v6_158f0, -16
  %v8_158f0 = inttoptr i32 %v7_158f0 to i32*
  store i32 %v9_158ec, i32* %v8_158f0, align 4
  %v10_158f0 = add i32 %v6_158f0, -12
  %v11_158f0 = inttoptr i32 %v10_158f0 to i32*
  %v12_158f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_158f0, i32* %v11_158f0, align 4
  %v13_158f0 = add i32 %v6_158f0, -8
  %v14_158f0 = inttoptr i32 %v13_158f0 to i32*
  %v15_158f0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v15_158f0, i32* %v14_158f0, align 4
  %v16_158f0 = add i32 %v6_158f0, -4
  %v17_158f0 = inttoptr i32 %v16_158f0 to i32*
  %v18_158f0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_158f0, i32* %v17_158f0, align 4
  store i32 %v7_158f0, i32* %r0.global-to-local, align 4
  %v6_158f4 = load i32, i32* %r2.global-to-local, align 4
  %v7_158f4 = add i32 %v6_158f4, -16
  store i32 %v7_158f4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_158e8, %bb138
  %v6_15900 = phi i32 [ %v7_158f0, %bb138 ], [ %v6_158f0, %dec_label_pc_158e8 ]
  %v0_158f8 = phi i32 [ %v7_158f4, %bb138 ], [ %v0_158f8.pr, %dec_label_pc_158e8 ]
  %v4_158f8 = add i32 %v0_158f8, 20
  store i32 %v4_158f8, i32* %r2.global-to-local, align 4
  %v6_158f8 = sub i32 0, %v0_158f8
  %v7_158f8 = and i32 %v4_158f8, %v6_158f8
  %v8_158f8 = icmp slt i32 %v7_158f8, 0
  store i1 %v8_158f8, i1* %cpsr_v.global-to-local, align 1
  %v9_158f8 = icmp slt i32 %v4_158f8, 0
  store i1 %v9_158f8, i1* %cpsr_n.global-to-local, align 1
  %v10_158f8 = icmp eq i32 %v4_158f8, 0
  store i1 %v10_158f8, i1* %cpsr_z.global-to-local, align 1
  %v5_158fc = icmp slt i32 %v0_158f8, -20
  br i1 %v5_158fc, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_158fc = load i32, i32* %r1.global-to-local, align 4
  %v7_158fc = add i32 %v6_158fc, -4
  %v8_158fc = inttoptr i32 %v7_158fc to i32*
  %v9_158fc = load i32, i32* %v8_158fc, align 4
  store i32 %v9_158fc, i32* %r3.global-to-local, align 4
  %v10_158fc = add i32 %v6_158fc, -8
  %v11_158fc = inttoptr i32 %v10_158fc to i32*
  %v12_158fc = load i32, i32* %v11_158fc, align 4
  store i32 %v12_158fc, i32* %ip.global-to-local, align 4
  %v13_158fc = add i32 %v6_158fc, -12
  %v14_158fc = inttoptr i32 %v13_158fc to i32*
  %v15_158fc = load i32, i32* %v14_158fc, align 4
  store i32 %v15_158fc, i32* %lr.global-to-local, align 4
  store i32 %v13_158fc, i32* %r1.global-to-local, align 4
  %v7_15900 = add i32 %v6_15900, -12
  %v8_15900 = inttoptr i32 %v7_15900 to i32*
  store i32 %v9_158fc, i32* %v8_15900, align 4
  %v10_15900 = add i32 %v6_15900, -8
  %v11_15900 = inttoptr i32 %v10_15900 to i32*
  %v12_15900 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_15900, i32* %v11_15900, align 4
  %v13_15900 = add i32 %v6_15900, -4
  %v14_15900 = inttoptr i32 %v13_15900 to i32*
  %v15_15900 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_15900, i32* %v14_15900, align 4
  store i32 %v7_15900, i32* %r0.global-to-local, align 4
  %v6_15904 = load i32, i32* %r2.global-to-local, align 4
  %v7_15904 = add i32 %v6_15904, -12
  store i32 %v7_15904, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_1592456 = phi i32 [ %v6_15900, %.thread13 ], [ %v7_15900, %bb139 ]
  %v0_1590c54 = phi i32 [ %v4_158f8, %.thread13 ], [ %v7_15904, %bb139 ]
  %v2_15908 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15908, i32* @r4, align 4
  store i32 %v6_158c4, i32* @lr, align 4
  br label %dec_label_pc_1590c

dec_label_pc_1590c:                               ; preds = %dec_label_pc_158bc, %.thread15
  %v7_1591c = phi i32 [ %v0_158d448, %dec_label_pc_158bc ], [ %v6_1592456, %.thread15 ]
  %v0_1590c = phi i32 [ %v2_158bc, %dec_label_pc_158bc ], [ %v0_1590c54, %.thread15 ]
  %v2_1590c = add i32 %v0_1590c, 8
  store i32 %v2_1590c, i32* %r2.global-to-local, align 4
  %v4_1590c = sub i32 0, %v0_1590c
  %v5_1590c = and i32 %v2_1590c, %v4_1590c
  %v6_1590c = icmp slt i32 %v5_1590c, 0
  store i1 %v6_1590c, i1* %cpsr_v.global-to-local, align 1
  %v7_1590c = icmp slt i32 %v2_1590c, 0
  store i1 %v7_1590c, i1* %cpsr_n.global-to-local, align 1
  %v8_1590c = icmp eq i32 %v2_1590c, 0
  store i1 %v8_1590c, i1* %cpsr_z.global-to-local, align 1
  %v5_15910 = icmp slt i32 %v0_1590c, -8
  br i1 %v5_15910, label %bb141, label %dec_label_pc_15914

dec_label_pc_15914:                               ; preds = %dec_label_pc_1590c
  %v6_15914 = add i32 %v0_1590c, 4
  store i32 %v6_15914, i32* %r2.global-to-local, align 4
  %v8_15914 = sub i32 -5, %v0_1590c
  %v9_15914 = and i32 %v8_15914, %v2_1590c
  %v10_15914 = icmp slt i32 %v9_15914, 0
  store i1 %v10_15914, i1* %cpsr_v.global-to-local, align 1
  %v11_15914 = icmp slt i32 %v6_15914, 0
  store i1 %v11_15914, i1* %cpsr_n.global-to-local, align 1
  %v12_15914 = icmp eq i32 %v2_1590c, 4
  store i1 %v12_15914, i1* %cpsr_z.global-to-local, align 1
  %v5_15918 = icmp slt i32 %v2_1590c, 4
  %v6_15918 = load i32, i32* %r1.global-to-local, align 4
  %v7_15918 = add i32 %v6_15918, -4
  %v8_15918 = inttoptr i32 %v7_15918 to i32*
  %v9_15918 = load i32, i32* %v8_15918, align 4
  store i32 %v9_15918, i32* %r3.global-to-local, align 4
  br i1 %v5_15918, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_15914
  store i32 %v7_15918, i32* %r1.global-to-local, align 4
  %v8_1591c = add i32 %v7_1591c, -4
  %v9_1591c = inttoptr i32 %v8_1591c to i32*
  store i32 %v9_15918, i32* %v9_1591c, align 4
  %v10_1591c = load i32, i32* %r0.global-to-local, align 4
  %v11_1591c = add i32 %v10_1591c, -4
  store i32 %v11_1591c, i32* %r0.global-to-local, align 4
  %v0_1592c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_15914
  %v10_15920 = add i32 %v6_15918, -8
  %v11_15920 = inttoptr i32 %v10_15920 to i32*
  %v12_15920 = load i32, i32* %v11_15920, align 4
  store i32 %v12_15920, i32* %ip.global-to-local, align 4
  store i32 %v10_15920, i32* %r1.global-to-local, align 4
  %v7_15924 = add i32 %v7_1591c, -8
  %v8_15924 = inttoptr i32 %v7_15924 to i32*
  store i32 %v9_15918, i32* %v8_15924, align 4
  %v10_15924 = add i32 %v7_1591c, -4
  %v11_15924 = inttoptr i32 %v10_15924 to i32*
  %v12_15924 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_15924, i32* %v11_15924, align 4
  store i32 %v7_15924, i32* %r0.global-to-local, align 4
  %v6_15928 = load i32, i32* %r2.global-to-local, align 4
  %v7_15928 = add i32 %v6_15928, -4
  store i32 %v7_15928, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_1590c, %dec_label_pc_1589c, %dec_label_pc_15ad0, %dec_label_pc_15a64, %dec_label_pc_159f8, %bb140
  %v2_15930 = phi i32 [ %v11_1591c, %.thread19 ], [ %v0_159c831, %.thread25 ], [ %v7_1591c, %dec_label_pc_1590c ], [ %v2_158a0, %dec_label_pc_1589c ], [ %v2_1593c64, %dec_label_pc_15ad0 ], [ %v2_1593c63, %dec_label_pc_15a64 ], [ %v2_1593c62, %dec_label_pc_159f8 ], [ %v7_15924, %bb140 ]
  %v0_1592c = phi i32 [ %v0_1592c.pre, %.thread19 ], [ %v2_15970, %.thread25 ], [ %v2_1590c, %dec_label_pc_1590c ], [ %v2_158a4, %dec_label_pc_1589c ], [ %v0_1592c60, %dec_label_pc_15ad0 ], [ %v0_1592c59, %dec_label_pc_15a64 ], [ %v0_1592c58, %dec_label_pc_159f8 ], [ %v7_15928, %bb140 ]
  %v1_1592c = add i32 %v0_1592c, 4
  store i32 %v1_1592c, i32* %r2.global-to-local, align 4
  %v3_1592c = sub i32 0, %v0_1592c
  %v4_1592c = and i32 %v1_1592c, %v3_1592c
  %v5_1592c = icmp slt i32 %v4_1592c, 0
  store i1 %v5_1592c, i1* %cpsr_v.global-to-local, align 1
  %v6_1592c = icmp slt i32 %v1_1592c, 0
  store i1 %v6_1592c, i1* %cpsr_n.global-to-local, align 1
  %v7_1592c = icmp eq i32 %v1_1592c, 0
  store i1 %v7_1592c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1592c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_15934 = add i32 %v0_1592c, 2
  %v3_15934 = sub i32 -3, %v0_1592c
  %v4_15934 = and i32 %v3_15934, %v1_1592c
  %v5_15934 = icmp slt i32 %v4_15934, 0
  store i1 %v5_15934, i1* %cpsr_v.global-to-local, align 1
  %v6_15934 = icmp slt i32 %v1_15934, 0
  store i1 %v6_15934, i1* %cpsr_n.global-to-local, align 1
  %v7_15934 = icmp eq i32 %v1_1592c, 2
  store i1 %v7_15934, i1* %cpsr_z.global-to-local, align 1
  %v0_15938 = load i32, i32* %r1.global-to-local, align 4
  %v1_15938 = add i32 %v0_15938, -1
  %v2_15938 = inttoptr i32 %v1_15938 to i8*
  %v3_15938 = load i8, i8* %v2_15938, align 1
  %v4_15938 = zext i8 %v3_15938 to i32
  store i32 %v4_15938, i32* %r3.global-to-local, align 4
  store i32 %v1_15938, i32* %r1.global-to-local, align 4
  %v3_1593c = add i32 %v2_15930, -1
  %v4_1593c = inttoptr i32 %v3_1593c to i8*
  store i8 %v3_15938, i8* %v4_1593c, align 1
  %v5_1593c = load i32, i32* %r0.global-to-local, align 4
  %v6_1593c = add i32 %v5_1593c, -1
  store i32 %v6_1593c, i32* %r0.global-to-local, align 4
  %v0_15940 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15940 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15940 = xor i1 %v0_15940, %v1_15940
  br i1 %v2_15940, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_15940 = load i32, i32* %r1.global-to-local, align 4
  %v4_15940 = add i32 %v3_15940, -1
  %v5_15940 = inttoptr i32 %v4_15940 to i8*
  %v6_15940 = load i8, i8* %v5_15940, align 1
  %v7_15940 = zext i8 %v6_15940 to i32
  store i32 %v7_15940, i32* %r3.global-to-local, align 4
  store i32 %v4_15940, i32* %r1.global-to-local, align 4
  %v6_15944 = add i32 %v5_1593c, -2
  %v7_15944 = inttoptr i32 %v6_15944 to i8*
  store i8 %v6_15940, i8* %v7_15944, align 1
  %v8_15944 = load i32, i32* %r0.global-to-local, align 4
  %v9_15944 = add i32 %v8_15944, -1
  store i32 %v9_15944, i32* %r0.global-to-local, align 4
  %v1_15948.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15948.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_1594c = phi i32 [ %v9_15944, %bb143 ], [ %v6_1593c, %bb142 ]
  %v2_1594c = phi i1 [ %v2_15948.pre, %bb143 ], [ %v1_15940, %bb142 ]
  %v1_1594c = phi i1 [ %v1_15948.pre, %bb143 ], [ %v0_15940, %bb142 ]
  %v0_15948 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15948 = xor i1 %v2_1594c, %v1_1594c
  %v4_15948 = or i1 %v0_15948, %v3_15948
  br i1 %v4_15948, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_15948 = load i32, i32* %r1.global-to-local, align 4
  %v6_15948 = add i32 %v5_15948, -1
  %v7_15948 = inttoptr i32 %v6_15948 to i8*
  %v8_15948 = load i8, i8* %v7_15948, align 1
  %v9_15948 = zext i8 %v8_15948 to i32
  store i32 %v9_15948, i32* %r3.global-to-local, align 4
  store i32 %v6_15948, i32* %r1.global-to-local, align 4
  %v8_1594c = add i32 %v7_1594c, -1
  %v9_1594c = inttoptr i32 %v8_1594c to i8*
  store i8 %v8_15948, i8* %v9_1594c, align 1
  %v10_1594c = load i32, i32* %r0.global-to-local, align 4
  %v11_1594c = add i32 %v10_1594c, -1
  store i32 %v11_1594c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_15954:                               ; preds = %dec_label_pc_158ac
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_15954 = icmp eq i32 %v1_158ac, 1
  store i1 %v8_15954, i1* %cpsr_n.global-to-local, align 1
  %v9_15954 = icmp eq i32 %v1_158ac, 2
  store i1 %v9_15954, i1* %cpsr_z.global-to-local, align 1
  %v1_15958 = add i32 %v2_1589c, -1
  %v2_15958 = inttoptr i32 %v1_15958 to i8*
  %v3_15958 = load i8, i8* %v2_15958, align 1
  %v4_15958 = zext i8 %v3_15958 to i32
  store i32 %v4_15958, i32* %r3.global-to-local, align 4
  store i32 %v1_15958, i32* %r1.global-to-local, align 4
  %v3_1595c = add i32 %v2_158a0, -1
  %v4_1595c = inttoptr i32 %v3_1595c to i8*
  store i8 %v3_15958, i8* %v4_1595c, align 1
  %v5_1595c = load i32, i32* %r0.global-to-local, align 4
  %v6_1595c = add i32 %v5_1595c, -1
  store i32 %v6_1595c, i32* %r0.global-to-local, align 4
  br i1 %v8_15954, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_15954
  %v6_15960 = load i32, i32* %r1.global-to-local, align 4
  %v7_15960 = add i32 %v6_15960, -1
  %v8_15960 = inttoptr i32 %v7_15960 to i8*
  %v9_15960 = load i8, i8* %v8_15960, align 1
  %v10_15960 = zext i8 %v9_15960 to i32
  store i32 %v10_15960, i32* %r3.global-to-local, align 4
  store i32 %v7_15960, i32* %r1.global-to-local, align 4
  %v9_15964 = add i32 %v5_1595c, -2
  %v10_15964 = inttoptr i32 %v9_15964 to i8*
  store i8 %v9_15960, i8* %v10_15964, align 1
  %v11_15964 = load i32, i32* %r0.global-to-local, align 4
  %v12_15964 = add i32 %v11_15964, -1
  store i32 %v12_15964, i32* %r0.global-to-local, align 4
  br i1 %v9_15954, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_15968 = load i32, i32* %r1.global-to-local, align 4
  %v9_15968 = add i32 %v8_15968, -1
  %v10_15968 = inttoptr i32 %v9_15968 to i8*
  %v11_15968 = load i8, i8* %v10_15968, align 1
  %v12_15968 = zext i8 %v11_15968 to i32
  store i32 %v12_15968, i32* %r3.global-to-local, align 4
  store i32 %v9_15968, i32* %r1.global-to-local, align 4
  %v11_1596c = add i32 %v11_15964, -2
  %v12_1596c = inttoptr i32 %v11_1596c to i8*
  store i8 %v11_15968, i8* %v12_1596c, align 1
  %v13_1596c = load i32, i32* %r0.global-to-local, align 4
  %v14_1596c = add i32 %v13_1596c, -1
  store i32 %v14_1596c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_15954, %bb146
  %v0_159c831 = phi i32 [ %v12_15964, %bb145 ], [ %v6_1595c, %dec_label_pc_15954 ], [ %v14_1596c, %bb146 ]
  %v0_15970 = load i32, i32* %r2.global-to-local, align 4
  %v1_15970 = load i32, i32* %ip.global-to-local, align 4
  %v2_15970 = sub i32 %v0_15970, %v1_15970
  store i32 %v2_15970, i32* %r2.global-to-local, align 4
  %v4_15970 = xor i32 %v1_15970, %v0_15970
  %v5_15970 = xor i32 %v2_15970, %v0_15970
  %v6_15970 = and i32 %v5_15970, %v4_15970
  %v7_15970 = icmp slt i32 %v6_15970, 0
  store i1 %v7_15970, i1* %cpsr_v.global-to-local, align 1
  %v8_15970 = icmp slt i32 %v2_15970, 0
  store i1 %v8_15970, i1* %cpsr_n.global-to-local, align 1
  %v9_15970 = icmp eq i32 %v0_15970, %v1_15970
  store i1 %v9_15970, i1* %cpsr_z.global-to-local, align 1
  %v5_15974 = icmp slt i32 %v0_15970, %v1_15970
  br i1 %v5_15974, label %bb141, label %dec_label_pc_15978

dec_label_pc_15978:                               ; preds = %.thread25
  %v0_15978 = load i32, i32* %r1.global-to-local, align 4
  %v1_15978 = urem i32 %v0_15978, 4
  store i32 %v1_15978, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15978 = icmp eq i32 %v1_15978, 0
  store i1 %v2_15978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15978, label %dec_label_pc_158bc, label %dec_label_pc_15980

dec_label_pc_15980:                               ; preds = %dec_label_pc_158b4, %dec_label_pc_15978
  %v0_159c830 = phi i32 [ %v2_158a0, %dec_label_pc_158b4 ], [ %v0_159c831, %dec_label_pc_15978 ]
  %v0_15a74 = phi i32 [ %v2_158a4, %dec_label_pc_158b4 ], [ %v2_15970, %dec_label_pc_15978 ]
  %v0_15980 = phi i32 [ %v2_1589c, %dec_label_pc_158b4 ], [ %v0_15978, %dec_label_pc_15978 ]
  %v0_15988 = phi i32 [ %v1_158b4, %dec_label_pc_158b4 ], [ %v1_15978, %dec_label_pc_15978 ]
  %v1_15980 = and i32 %v0_15980, -4
  store i32 %v1_15980, i32* %r1.global-to-local, align 4
  %v1_15984 = inttoptr i32 %v1_15980 to i32*
  %v2_15984 = load i32, i32* %v1_15984, align 4
  store i32 %v2_15984, i32* %r3.global-to-local, align 4
  %v7_15988 = icmp ult i32 %v0_15988, 2
  %v2_15a6c = add i32 %v0_15a74, -12
  %v4_15a6c = sub i32 11, %v0_15a74
  %v5_15a6c = and i32 %v4_15a6c, %v0_15a74
  %v6_15a6c = icmp slt i32 %v5_15a6c, 0
  store i1 %v6_15a6c, i1* %cpsr_v.global-to-local, align 1
  %v7_15a6c = icmp slt i32 %v2_15a6c, 0
  store i1 %v7_15a6c, i1* %cpsr_n.global-to-local, align 1
  %v8_15a6c = icmp eq i32 %v0_15a74, 12
  store i1 %v8_15a6c, i1* %cpsr_z.global-to-local, align 1
  %v5_15a70 = icmp slt i32 %v0_15a74, 12
  br i1 %v7_15988, label %dec_label_pc_15a6c, label %dec_label_pc_15990

dec_label_pc_15990:                               ; preds = %dec_label_pc_15980
  %v8_15988 = icmp eq i32 %v0_15988, 2
  br i1 %v8_15988, label %dec_label_pc_15a00, label %dec_label_pc_15994

dec_label_pc_15994:                               ; preds = %dec_label_pc_15990
  br i1 %v5_15a70, label %dec_label_pc_159e0, label %dec_label_pc_1599c

dec_label_pc_1599c:                               ; preds = %dec_label_pc_15994
  store i32 %v2_15a6c, i32* %r2.global-to-local, align 4
  %v3_159a0 = load i32, i32* @r4, align 4
  store i32 %v3_159a0, i32* %stack_var_-12, align 4
  %v6_159a0 = load i32, i32* @r5, align 4
  store i32 %v6_159a0, i32* %stack_var_-8, align 4
  %v9_159a0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_159a4

dec_label_pc_159a4:                               ; preds = %dec_label_pc_159a4.dec_label_pc_159a4_crit_edge, %dec_label_pc_1599c
  %v0_159c8 = phi i32 [ %v1_159c8, %dec_label_pc_159a4.dec_label_pc_159a4_crit_edge ], [ %v0_159c830, %dec_label_pc_1599c ]
  %v0_159a8 = phi i32 [ %v0_159a8.pre, %dec_label_pc_159a4.dec_label_pc_159a4_crit_edge ], [ %v1_15980, %dec_label_pc_1599c ]
  %v0_159a4 = phi i32 [ %v0_159a4.pre, %dec_label_pc_159a4.dec_label_pc_159a4_crit_edge ], [ %v2_15984, %dec_label_pc_1599c ]
  %v3_159a4 = mul i32 %v0_159a4, 256
  store i32 %v3_159a4, i32* %lr.global-to-local, align 4
  %v1_159a8 = add i32 %v0_159a8, -4
  %v2_159a8 = inttoptr i32 %v1_159a8 to i32*
  %v3_159a8 = load i32, i32* %v2_159a8, align 4
  store i32 %v3_159a8, i32* %r3.global-to-local, align 4
  %v4_159a8 = add i32 %v0_159a8, -8
  %v5_159a8 = inttoptr i32 %v4_159a8 to i32*
  %v6_159a8 = load i32, i32* %v5_159a8, align 4
  store i32 %v6_159a8, i32* %r4.global-to-local, align 4
  %v7_159a8 = add i32 %v0_159a8, -12
  %v8_159a8 = inttoptr i32 %v7_159a8 to i32*
  %v9_159a8 = load i32, i32* %v8_159a8, align 4
  store i32 %v9_159a8, i32* %r5.global-to-local, align 4
  %v10_159a8 = add i32 %v0_159a8, -16
  %v11_159a8 = inttoptr i32 %v10_159a8 to i32*
  %v12_159a8 = load i32, i32* %v11_159a8, align 4
  store i32 %v10_159a8, i32* %r1.global-to-local, align 4
  %v4_159ac = udiv i32 %v12_159a8, 16777216
  %v5_159ac = or i32 %v4_159ac, %v3_159a4
  store i32 %v5_159ac, i32* %lr.global-to-local, align 4
  %v3_159b0 = mul i32 %v12_159a8, 256
  %v4_159b4 = udiv i32 %v9_159a8, 16777216
  %v5_159b4 = or i32 %v3_159b0, %v4_159b4
  store i32 %v5_159b4, i32* %ip.global-to-local, align 4
  %v3_159b8 = mul i32 %v9_159a8, 256
  %v4_159bc = udiv i32 %v6_159a8, 16777216
  %v5_159bc = or i32 %v3_159b8, %v4_159bc
  store i32 %v5_159bc, i32* %r5.global-to-local, align 4
  %v3_159c0 = mul i32 %v6_159a8, 256
  %v4_159c4 = udiv i32 %v3_159a8, 16777216
  %v5_159c4 = or i32 %v3_159c0, %v4_159c4
  store i32 %v5_159c4, i32* %r4.global-to-local, align 4
  %v1_159c8 = add i32 %v0_159c8, -16
  %v2_159c8 = inttoptr i32 %v1_159c8 to i32*
  store i32 %v5_159c4, i32* %v2_159c8, align 4
  %v4_159c8 = add i32 %v0_159c8, -12
  %v5_159c8 = inttoptr i32 %v4_159c8 to i32*
  %v6_159c8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_159c8, i32* %v5_159c8, align 4
  %v7_159c8 = add i32 %v0_159c8, -8
  %v8_159c8 = inttoptr i32 %v7_159c8 to i32*
  %v9_159c8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_159c8, i32* %v8_159c8, align 4
  %v10_159c8 = add i32 %v0_159c8, -4
  %v11_159c8 = inttoptr i32 %v10_159c8 to i32*
  %v12_159c8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_159c8, i32* %v11_159c8, align 4
  store i32 %v1_159c8, i32* %r0.global-to-local, align 4
  %v0_159cc = load i32, i32* %r2.global-to-local, align 4
  %v2_159cc = add i32 %v0_159cc, -16
  store i32 %v2_159cc, i32* %r2.global-to-local, align 4
  %v6_159d0 = icmp slt i32 %v0_159cc, 16
  br i1 %v6_159d0, label %dec_label_pc_159d4, label %dec_label_pc_159a4.dec_label_pc_159a4_crit_edge

dec_label_pc_159a4.dec_label_pc_159a4_crit_edge:  ; preds = %dec_label_pc_159a4
  %v0_159a4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_159a8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_159a4

dec_label_pc_159d4:                               ; preds = %dec_label_pc_159a4
  %v2_159d4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_159d4, i32* @r4, align 4
  %v5_159d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_159d4, i32* @r5, align 4
  store i32 %v9_159a0, i32* @lr, align 4
  %v2_159d8 = add i32 %v0_159cc, -4
  store i32 %v2_159d8, i32* %r2.global-to-local, align 4
  %v4_159d8 = add i32 %v0_159cc, 2147483632
  %v5_159d8 = and i32 %v2_159d8, %v4_159d8
  %v6_159d8 = icmp slt i32 %v5_159d8, 0
  store i1 %v6_159d8, i1* %cpsr_v.global-to-local, align 1
  %v7_159d8 = icmp slt i32 %v2_159d8, 0
  store i1 %v7_159d8, i1* %cpsr_n.global-to-local, align 1
  %v8_159d8 = icmp eq i32 %v2_159d8, 0
  store i1 %v8_159d8, i1* %cpsr_z.global-to-local, align 1
  %v5_159dc = icmp slt i32 %v2_159cc, -12
  br i1 %v5_159dc, label %dec_label_pc_159f8, label %dec_label_pc_159e0

dec_label_pc_159e0:                               ; preds = %dec_label_pc_159d4, %dec_label_pc_15994, %dec_label_pc_159e0
  %v1_159ec = phi i32 [ %v5_159ec, %dec_label_pc_159e0 ], [ %v1_159c8, %dec_label_pc_159d4 ], [ %v0_159c830, %dec_label_pc_15994 ]
  %v0_159e0 = load i32, i32* %r3.global-to-local, align 4
  %v3_159e0 = mul i32 %v0_159e0, 256
  store i32 %v3_159e0, i32* %ip.global-to-local, align 4
  %v0_159e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_159e4 = add i32 %v0_159e4, -4
  %v2_159e4 = inttoptr i32 %v1_159e4 to i32*
  %v3_159e4 = load i32, i32* %v2_159e4, align 4
  store i32 %v3_159e4, i32* %r3.global-to-local, align 4
  store i32 %v1_159e4, i32* %r1.global-to-local, align 4
  %v4_159e8 = udiv i32 %v3_159e4, 16777216
  %v5_159e8 = or i32 %v4_159e8, %v3_159e0
  store i32 %v5_159e8, i32* %ip.global-to-local, align 4
  %v2_159ec = add i32 %v1_159ec, -4
  %v3_159ec = inttoptr i32 %v2_159ec to i32*
  store i32 %v5_159e8, i32* %v3_159ec, align 4
  %v4_159ec = load i32, i32* %r0.global-to-local, align 4
  %v5_159ec = add i32 %v4_159ec, -4
  store i32 %v5_159ec, i32* %r0.global-to-local, align 4
  %v0_159f0 = load i32, i32* %r2.global-to-local, align 4
  %v2_159f0 = add i32 %v0_159f0, -4
  store i32 %v2_159f0, i32* %r2.global-to-local, align 4
  %v6_159f4 = icmp slt i32 %v0_159f0, 4
  br i1 %v6_159f4, label %dec_label_pc_159f8.loopexit, label %dec_label_pc_159e0

dec_label_pc_159f8.loopexit:                      ; preds = %dec_label_pc_159e0
  %v4_159f0 = sub i32 3, %v0_159f0
  %v5_159f0 = and i32 %v4_159f0, %v0_159f0
  %v6_159f0 = icmp slt i32 %v5_159f0, 0
  %v7_159f0 = icmp slt i32 %v2_159f0, 0
  store i1 %v6_159f0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_159f0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_159f8

dec_label_pc_159f8:                               ; preds = %dec_label_pc_159f8.loopexit, %dec_label_pc_159d4
  %v2_1593c62 = phi i32 [ %v5_159ec, %dec_label_pc_159f8.loopexit ], [ %v1_159c8, %dec_label_pc_159d4 ]
  %v0_1592c58 = phi i32 [ %v2_159f0, %dec_label_pc_159f8.loopexit ], [ %v2_159d8, %dec_label_pc_159d4 ]
  %v0_159f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_159f8 = add i32 %v0_159f8, 3
  store i32 %v1_159f8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15a00:                               ; preds = %dec_label_pc_15990
  br i1 %v5_15a70, label %dec_label_pc_15a4c, label %dec_label_pc_15a08

dec_label_pc_15a08:                               ; preds = %dec_label_pc_15a00
  store i32 %v2_15a6c, i32* %r2.global-to-local, align 4
  %v3_15a0c = load i32, i32* @r4, align 4
  store i32 %v3_15a0c, i32* %stack_var_-12, align 4
  %v6_15a0c = load i32, i32* @r5, align 4
  store i32 %v6_15a0c, i32* %stack_var_-8, align 4
  %v9_15a0c = load i32, i32* @lr, align 4
  br label %dec_label_pc_15a10

dec_label_pc_15a10:                               ; preds = %dec_label_pc_15a10.dec_label_pc_15a10_crit_edge, %dec_label_pc_15a08
  %v0_15a34 = phi i32 [ %v1_15a34, %dec_label_pc_15a10.dec_label_pc_15a10_crit_edge ], [ %v0_159c830, %dec_label_pc_15a08 ]
  %v0_15a14 = phi i32 [ %v0_15a14.pre, %dec_label_pc_15a10.dec_label_pc_15a10_crit_edge ], [ %v1_15980, %dec_label_pc_15a08 ]
  %v0_15a10 = phi i32 [ %v0_15a10.pre, %dec_label_pc_15a10.dec_label_pc_15a10_crit_edge ], [ %v2_15984, %dec_label_pc_15a08 ]
  %v3_15a10 = mul i32 %v0_15a10, 65536
  store i32 %v3_15a10, i32* %lr.global-to-local, align 4
  %v1_15a14 = add i32 %v0_15a14, -4
  %v2_15a14 = inttoptr i32 %v1_15a14 to i32*
  %v3_15a14 = load i32, i32* %v2_15a14, align 4
  store i32 %v3_15a14, i32* %r3.global-to-local, align 4
  %v4_15a14 = add i32 %v0_15a14, -8
  %v5_15a14 = inttoptr i32 %v4_15a14 to i32*
  %v6_15a14 = load i32, i32* %v5_15a14, align 4
  store i32 %v6_15a14, i32* %r4.global-to-local, align 4
  %v7_15a14 = add i32 %v0_15a14, -12
  %v8_15a14 = inttoptr i32 %v7_15a14 to i32*
  %v9_15a14 = load i32, i32* %v8_15a14, align 4
  store i32 %v9_15a14, i32* %r5.global-to-local, align 4
  %v10_15a14 = add i32 %v0_15a14, -16
  %v11_15a14 = inttoptr i32 %v10_15a14 to i32*
  %v12_15a14 = load i32, i32* %v11_15a14, align 4
  store i32 %v10_15a14, i32* %r1.global-to-local, align 4
  %v4_15a18 = udiv i32 %v12_15a14, 65536
  %v5_15a18 = or i32 %v4_15a18, %v3_15a10
  store i32 %v5_15a18, i32* %lr.global-to-local, align 4
  %v3_15a1c = mul i32 %v12_15a14, 65536
  %v4_15a20 = udiv i32 %v9_15a14, 65536
  %v5_15a20 = or i32 %v3_15a1c, %v4_15a20
  store i32 %v5_15a20, i32* %ip.global-to-local, align 4
  %v3_15a24 = mul i32 %v9_15a14, 65536
  %v4_15a28 = udiv i32 %v6_15a14, 65536
  %v5_15a28 = or i32 %v3_15a24, %v4_15a28
  store i32 %v5_15a28, i32* %r5.global-to-local, align 4
  %v3_15a2c = mul i32 %v6_15a14, 65536
  %v4_15a30 = udiv i32 %v3_15a14, 65536
  %v5_15a30 = or i32 %v3_15a2c, %v4_15a30
  store i32 %v5_15a30, i32* %r4.global-to-local, align 4
  %v1_15a34 = add i32 %v0_15a34, -16
  %v2_15a34 = inttoptr i32 %v1_15a34 to i32*
  store i32 %v5_15a30, i32* %v2_15a34, align 4
  %v4_15a34 = add i32 %v0_15a34, -12
  %v5_15a34 = inttoptr i32 %v4_15a34 to i32*
  %v6_15a34 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15a34, i32* %v5_15a34, align 4
  %v7_15a34 = add i32 %v0_15a34, -8
  %v8_15a34 = inttoptr i32 %v7_15a34 to i32*
  %v9_15a34 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15a34, i32* %v8_15a34, align 4
  %v10_15a34 = add i32 %v0_15a34, -4
  %v11_15a34 = inttoptr i32 %v10_15a34 to i32*
  %v12_15a34 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15a34, i32* %v11_15a34, align 4
  store i32 %v1_15a34, i32* %r0.global-to-local, align 4
  %v0_15a38 = load i32, i32* %r2.global-to-local, align 4
  %v2_15a38 = add i32 %v0_15a38, -16
  store i32 %v2_15a38, i32* %r2.global-to-local, align 4
  %v6_15a3c = icmp slt i32 %v0_15a38, 16
  br i1 %v6_15a3c, label %dec_label_pc_15a40, label %dec_label_pc_15a10.dec_label_pc_15a10_crit_edge

dec_label_pc_15a10.dec_label_pc_15a10_crit_edge:  ; preds = %dec_label_pc_15a10
  %v0_15a10.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15a14.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a10

dec_label_pc_15a40:                               ; preds = %dec_label_pc_15a10
  %v2_15a40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15a40, i32* @r4, align 4
  %v5_15a40 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15a40, i32* @r5, align 4
  store i32 %v9_15a0c, i32* @lr, align 4
  %v2_15a44 = add i32 %v0_15a38, -4
  store i32 %v2_15a44, i32* %r2.global-to-local, align 4
  %v4_15a44 = add i32 %v0_15a38, 2147483632
  %v5_15a44 = and i32 %v2_15a44, %v4_15a44
  %v6_15a44 = icmp slt i32 %v5_15a44, 0
  store i1 %v6_15a44, i1* %cpsr_v.global-to-local, align 1
  %v7_15a44 = icmp slt i32 %v2_15a44, 0
  store i1 %v7_15a44, i1* %cpsr_n.global-to-local, align 1
  %v8_15a44 = icmp eq i32 %v2_15a44, 0
  store i1 %v8_15a44, i1* %cpsr_z.global-to-local, align 1
  %v5_15a48 = icmp slt i32 %v2_15a38, -12
  br i1 %v5_15a48, label %dec_label_pc_15a64, label %dec_label_pc_15a4c

dec_label_pc_15a4c:                               ; preds = %dec_label_pc_15a40, %dec_label_pc_15a00, %dec_label_pc_15a4c
  %v1_15a58 = phi i32 [ %v5_15a58, %dec_label_pc_15a4c ], [ %v1_15a34, %dec_label_pc_15a40 ], [ %v0_159c830, %dec_label_pc_15a00 ]
  %v0_15a4c = load i32, i32* %r3.global-to-local, align 4
  %v3_15a4c = mul i32 %v0_15a4c, 65536
  store i32 %v3_15a4c, i32* %ip.global-to-local, align 4
  %v0_15a50 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a50 = add i32 %v0_15a50, -4
  %v2_15a50 = inttoptr i32 %v1_15a50 to i32*
  %v3_15a50 = load i32, i32* %v2_15a50, align 4
  store i32 %v3_15a50, i32* %r3.global-to-local, align 4
  store i32 %v1_15a50, i32* %r1.global-to-local, align 4
  %v4_15a54 = udiv i32 %v3_15a50, 65536
  %v5_15a54 = or i32 %v4_15a54, %v3_15a4c
  store i32 %v5_15a54, i32* %ip.global-to-local, align 4
  %v2_15a58 = add i32 %v1_15a58, -4
  %v3_15a58 = inttoptr i32 %v2_15a58 to i32*
  store i32 %v5_15a54, i32* %v3_15a58, align 4
  %v4_15a58 = load i32, i32* %r0.global-to-local, align 4
  %v5_15a58 = add i32 %v4_15a58, -4
  store i32 %v5_15a58, i32* %r0.global-to-local, align 4
  %v0_15a5c = load i32, i32* %r2.global-to-local, align 4
  %v2_15a5c = add i32 %v0_15a5c, -4
  store i32 %v2_15a5c, i32* %r2.global-to-local, align 4
  %v6_15a60 = icmp slt i32 %v0_15a5c, 4
  br i1 %v6_15a60, label %dec_label_pc_15a64.loopexit, label %dec_label_pc_15a4c

dec_label_pc_15a64.loopexit:                      ; preds = %dec_label_pc_15a4c
  %v4_15a5c = sub i32 3, %v0_15a5c
  %v5_15a5c = and i32 %v4_15a5c, %v0_15a5c
  %v6_15a5c = icmp slt i32 %v5_15a5c, 0
  %v7_15a5c = icmp slt i32 %v2_15a5c, 0
  store i1 %v6_15a5c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15a5c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15a64

dec_label_pc_15a64:                               ; preds = %dec_label_pc_15a64.loopexit, %dec_label_pc_15a40
  %v2_1593c63 = phi i32 [ %v5_15a58, %dec_label_pc_15a64.loopexit ], [ %v1_15a34, %dec_label_pc_15a40 ]
  %v0_1592c59 = phi i32 [ %v2_15a5c, %dec_label_pc_15a64.loopexit ], [ %v2_15a44, %dec_label_pc_15a40 ]
  %v0_15a64 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a64 = add i32 %v0_15a64, 2
  store i32 %v1_15a64, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15a6c:                               ; preds = %dec_label_pc_15980
  br i1 %v5_15a70, label %dec_label_pc_15ab8, label %dec_label_pc_15a74

dec_label_pc_15a74:                               ; preds = %dec_label_pc_15a6c
  store i32 %v2_15a6c, i32* %r2.global-to-local, align 4
  %v3_15a78 = load i32, i32* @r4, align 4
  store i32 %v3_15a78, i32* %stack_var_-12, align 4
  %v6_15a78 = load i32, i32* @r5, align 4
  store i32 %v6_15a78, i32* %stack_var_-8, align 4
  %v9_15a78 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15a7c

dec_label_pc_15a7c:                               ; preds = %dec_label_pc_15a7c.dec_label_pc_15a7c_crit_edge, %dec_label_pc_15a74
  %v0_15aa0 = phi i32 [ %v1_15aa0, %dec_label_pc_15a7c.dec_label_pc_15a7c_crit_edge ], [ %v0_159c830, %dec_label_pc_15a74 ]
  %v0_15a80 = phi i32 [ %v0_15a80.pre, %dec_label_pc_15a7c.dec_label_pc_15a7c_crit_edge ], [ %v1_15980, %dec_label_pc_15a74 ]
  %v0_15a7c = phi i32 [ %v0_15a7c.pre, %dec_label_pc_15a7c.dec_label_pc_15a7c_crit_edge ], [ %v2_15984, %dec_label_pc_15a74 ]
  %v3_15a7c = mul i32 %v0_15a7c, 16777216
  store i32 %v3_15a7c, i32* %lr.global-to-local, align 4
  %v1_15a80 = add i32 %v0_15a80, -4
  %v2_15a80 = inttoptr i32 %v1_15a80 to i32*
  %v3_15a80 = load i32, i32* %v2_15a80, align 4
  store i32 %v3_15a80, i32* %r3.global-to-local, align 4
  %v4_15a80 = add i32 %v0_15a80, -8
  %v5_15a80 = inttoptr i32 %v4_15a80 to i32*
  %v6_15a80 = load i32, i32* %v5_15a80, align 4
  store i32 %v6_15a80, i32* %r4.global-to-local, align 4
  %v7_15a80 = add i32 %v0_15a80, -12
  %v8_15a80 = inttoptr i32 %v7_15a80 to i32*
  %v9_15a80 = load i32, i32* %v8_15a80, align 4
  store i32 %v9_15a80, i32* %r5.global-to-local, align 4
  %v10_15a80 = add i32 %v0_15a80, -16
  %v11_15a80 = inttoptr i32 %v10_15a80 to i32*
  %v12_15a80 = load i32, i32* %v11_15a80, align 4
  store i32 %v10_15a80, i32* %r1.global-to-local, align 4
  %v4_15a84 = udiv i32 %v12_15a80, 256
  %v5_15a84 = or i32 %v4_15a84, %v3_15a7c
  store i32 %v5_15a84, i32* %lr.global-to-local, align 4
  %v3_15a88 = mul i32 %v12_15a80, 16777216
  %v4_15a8c = udiv i32 %v9_15a80, 256
  %v5_15a8c = or i32 %v3_15a88, %v4_15a8c
  store i32 %v5_15a8c, i32* %ip.global-to-local, align 4
  %v3_15a90 = mul i32 %v9_15a80, 16777216
  %v4_15a94 = udiv i32 %v6_15a80, 256
  %v5_15a94 = or i32 %v3_15a90, %v4_15a94
  store i32 %v5_15a94, i32* %r5.global-to-local, align 4
  %v3_15a98 = mul i32 %v6_15a80, 16777216
  %v4_15a9c = udiv i32 %v3_15a80, 256
  %v5_15a9c = or i32 %v3_15a98, %v4_15a9c
  store i32 %v5_15a9c, i32* %r4.global-to-local, align 4
  %v1_15aa0 = add i32 %v0_15aa0, -16
  %v2_15aa0 = inttoptr i32 %v1_15aa0 to i32*
  store i32 %v5_15a9c, i32* %v2_15aa0, align 4
  %v4_15aa0 = add i32 %v0_15aa0, -12
  %v5_15aa0 = inttoptr i32 %v4_15aa0 to i32*
  %v6_15aa0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15aa0, i32* %v5_15aa0, align 4
  %v7_15aa0 = add i32 %v0_15aa0, -8
  %v8_15aa0 = inttoptr i32 %v7_15aa0 to i32*
  %v9_15aa0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15aa0, i32* %v8_15aa0, align 4
  %v10_15aa0 = add i32 %v0_15aa0, -4
  %v11_15aa0 = inttoptr i32 %v10_15aa0 to i32*
  %v12_15aa0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15aa0, i32* %v11_15aa0, align 4
  store i32 %v1_15aa0, i32* %r0.global-to-local, align 4
  %v0_15aa4 = load i32, i32* %r2.global-to-local, align 4
  %v2_15aa4 = add i32 %v0_15aa4, -16
  store i32 %v2_15aa4, i32* %r2.global-to-local, align 4
  %v6_15aa8 = icmp slt i32 %v0_15aa4, 16
  br i1 %v6_15aa8, label %dec_label_pc_15aac, label %dec_label_pc_15a7c.dec_label_pc_15a7c_crit_edge

dec_label_pc_15a7c.dec_label_pc_15a7c_crit_edge:  ; preds = %dec_label_pc_15a7c
  %v0_15a7c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15a80.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a7c

dec_label_pc_15aac:                               ; preds = %dec_label_pc_15a7c
  %v2_15aac = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15aac, i32* @r4, align 4
  %v5_15aac = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15aac, i32* @r5, align 4
  store i32 %v9_15a78, i32* @lr, align 4
  %v2_15ab0 = add i32 %v0_15aa4, -4
  store i32 %v2_15ab0, i32* %r2.global-to-local, align 4
  %v4_15ab0 = add i32 %v0_15aa4, 2147483632
  %v5_15ab0 = and i32 %v2_15ab0, %v4_15ab0
  %v6_15ab0 = icmp slt i32 %v5_15ab0, 0
  store i1 %v6_15ab0, i1* %cpsr_v.global-to-local, align 1
  %v7_15ab0 = icmp slt i32 %v2_15ab0, 0
  store i1 %v7_15ab0, i1* %cpsr_n.global-to-local, align 1
  %v8_15ab0 = icmp eq i32 %v2_15ab0, 0
  store i1 %v8_15ab0, i1* %cpsr_z.global-to-local, align 1
  %v5_15ab4 = icmp slt i32 %v2_15aa4, -12
  br i1 %v5_15ab4, label %dec_label_pc_15ad0, label %dec_label_pc_15ab8

dec_label_pc_15ab8:                               ; preds = %dec_label_pc_15aac, %dec_label_pc_15a6c, %dec_label_pc_15ab8
  %v1_15ac4 = phi i32 [ %v5_15ac4, %dec_label_pc_15ab8 ], [ %v1_15aa0, %dec_label_pc_15aac ], [ %v0_159c830, %dec_label_pc_15a6c ]
  %v0_15ab8 = load i32, i32* %r3.global-to-local, align 4
  %v3_15ab8 = mul i32 %v0_15ab8, 16777216
  store i32 %v3_15ab8, i32* %ip.global-to-local, align 4
  %v0_15abc = load i32, i32* %r1.global-to-local, align 4
  %v1_15abc = add i32 %v0_15abc, -4
  %v2_15abc = inttoptr i32 %v1_15abc to i32*
  %v3_15abc = load i32, i32* %v2_15abc, align 4
  store i32 %v3_15abc, i32* %r3.global-to-local, align 4
  store i32 %v1_15abc, i32* %r1.global-to-local, align 4
  %v4_15ac0 = udiv i32 %v3_15abc, 256
  %v5_15ac0 = or i32 %v4_15ac0, %v3_15ab8
  store i32 %v5_15ac0, i32* %ip.global-to-local, align 4
  %v2_15ac4 = add i32 %v1_15ac4, -4
  %v3_15ac4 = inttoptr i32 %v2_15ac4 to i32*
  store i32 %v5_15ac0, i32* %v3_15ac4, align 4
  %v4_15ac4 = load i32, i32* %r0.global-to-local, align 4
  %v5_15ac4 = add i32 %v4_15ac4, -4
  store i32 %v5_15ac4, i32* %r0.global-to-local, align 4
  %v0_15ac8 = load i32, i32* %r2.global-to-local, align 4
  %v2_15ac8 = add i32 %v0_15ac8, -4
  store i32 %v2_15ac8, i32* %r2.global-to-local, align 4
  %v6_15acc = icmp slt i32 %v0_15ac8, 4
  br i1 %v6_15acc, label %dec_label_pc_15ad0.loopexit, label %dec_label_pc_15ab8

dec_label_pc_15ad0.loopexit:                      ; preds = %dec_label_pc_15ab8
  %v4_15ac8 = sub i32 3, %v0_15ac8
  %v5_15ac8 = and i32 %v4_15ac8, %v0_15ac8
  %v6_15ac8 = icmp slt i32 %v5_15ac8, 0
  %v7_15ac8 = icmp slt i32 %v2_15ac8, 0
  store i1 %v6_15ac8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15ac8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15ad0

dec_label_pc_15ad0:                               ; preds = %dec_label_pc_15ad0.loopexit, %dec_label_pc_15aac
  %v2_1593c64 = phi i32 [ %v5_15ac4, %dec_label_pc_15ad0.loopexit ], [ %v1_15aa0, %dec_label_pc_15aac ]
  %v0_1592c60 = phi i32 [ %v2_15ac8, %dec_label_pc_15ad0.loopexit ], [ %v2_15ab0, %dec_label_pc_15aac ]
  %v0_15ad0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ad0 = add i32 %v0_15ad0, 1
  store i32 %v1_15ad0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_15ac4, { 0, 2, 1 }
  uselistorder i32 %v3_15ab8, { 1, 0 }
  uselistorder i32 %v2_15ab0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15aa0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15a80, { 1, 0 }
  uselistorder i32 %v3_15a7c, { 1, 0 }
  uselistorder i32 %v0_15a80, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15aa0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15a58, { 0, 2, 1 }
  uselistorder i32 %v3_15a4c, { 1, 0 }
  uselistorder i32 %v2_15a44, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15a34, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15a14, { 1, 0 }
  uselistorder i32 %v3_15a10, { 1, 0 }
  uselistorder i32 %v0_15a14, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15a34, { 3, 2, 1, 0 }
  uselistorder i32 %v5_159ec, { 0, 2, 1 }
  uselistorder i32 %v3_159e0, { 1, 0 }
  uselistorder i32 %v2_159d8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_159c8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_159a8, { 1, 0 }
  uselistorder i32 %v3_159a4, { 1, 0 }
  uselistorder i32 %v0_159a8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_159c8, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15a70, { 2, 0, 1 }
  uselistorder i32 %v0_15988, { 1, 0 }
  uselistorder i32 %v0_15a74, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_159c830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15978, { 2, 1, 0 }
  uselistorder i32 %v0_15978, { 2, 0, 1 }
  uselistorder i32 %v2_15970, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15970, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15970, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_159c831, { 2, 1, 0 }
  uselistorder i32 %v11_1594c, { 1, 0 }
  uselistorder i32 %v7_1594c, { 1, 0 }
  uselistorder i32 %v1_1592c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1592c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_15930, { 1, 0 }
  uselistorder i32 %v7_15924, { 0, 2, 1 }
  uselistorder i32 %v10_15920, { 1, 0 }
  uselistorder i32 %v9_15918, { 1, 0, 2 }
  uselistorder i32 %v6_15914, { 1, 0 }
  uselistorder i32 %v2_1590c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1590c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1591c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15900, { 0, 2, 1 }
  uselistorder i32 %v13_158fc, { 1, 0 }
  uselistorder i32 %v4_158f8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_158f8, { 2, 0, 1 }
  uselistorder i32 %v6_15900, { 0, 3, 2, 1 }
  uselistorder i32 %v7_158f0, { 0, 2, 1 }
  uselistorder i32 %v16_158ec, { 1, 0 }
  uselistorder i32 %v4_158e8, { 1, 2, 0 }
  uselistorder i32 %v0_158f8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_158f0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_158dc, { 0, 3, 2, 1 }
  uselistorder i32 %v10_158d8, { 1, 0 }
  uselistorder i32 %v1_158d4, { 1, 0 }
  uselistorder i32 %v10_158d0, { 1, 0 }
  uselistorder i32 %v0_158d0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_158d4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_158c8, { 0, 2, 1 }
  uselistorder i32 %v2_158bc, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_158bc, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_158d448, { 1, 2, 0 }
  uselistorder i32 %v1_158b4, { 2, 1, 0 }
  uselistorder i32 %v1_158ac, { 2, 3, 1, 0 }
  uselistorder i32 %v2_158a4, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_158a0, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_1589c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_1589c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_15888, { 0, 2, 1 }
  uselistorder i32 %v3_1587c, { 1, 0 }
  uselistorder i32 %v2_15874, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15864, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15844, { 1, 0, 2 }
  uselistorder i32 %v5_15844, { 1, 0, 2 }
  uselistorder i32 %v2_15844, { 1, 0, 2 }
  uselistorder i32 %v3_15840, { 1, 0 }
  uselistorder i32 %v0_15844, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15864, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_1581c, { 0, 2, 1 }
  uselistorder i32 %v3_15810, { 1, 0 }
  uselistorder i32 %v2_15808, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_157f8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_157d8, { 1, 0, 2 }
  uselistorder i32 %v5_157d8, { 1, 0, 2 }
  uselistorder i32 %v2_157d8, { 1, 0, 2 }
  uselistorder i32 %v3_157d4, { 1, 0 }
  uselistorder i32 %v0_157d8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_157f8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_157b0, { 0, 2, 1 }
  uselistorder i32 %v3_157a4, { 1, 0 }
  uselistorder i32 %v2_1579c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1578c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1576c, { 1, 0, 2 }
  uselistorder i32 %v5_1576c, { 1, 0, 2 }
  uselistorder i32 %v2_1576c, { 1, 0, 2 }
  uselistorder i32 %v3_15768, { 1, 0 }
  uselistorder i32 %v0_1576c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1578c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_15834, { 2, 0, 1 }
  uselistorder i32 %v0_15838, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1578c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_1573c, { 1, 0 }
  uselistorder i32 %v0_1573c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_15734, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15734, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15734, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1578c75, { 2, 1, 0 }
  uselistorder i32 %v1_15714, { 1, 0, 2 }
  uselistorder i32 %v1_156ec, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_156ec, { 1, 2, 0, 3 }
  uselistorder i32 %v8_156d8, { 1, 0, 2 }
  uselistorder i32 %v6_156d4, { 1, 0 }
  uselistorder i32 %v2_156cc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_156cc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_156dc, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_156c4, { 0, 2, 1 }
  uselistorder i32 %v3_156c4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_156c4, { 1, 0 }
  uselistorder i1 %v1_156c4, { 1, 0 }
  uselistorder i32 %v3_156c0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_156b8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_156a4, { 1, 2, 0 }
  uselistorder i32 %v12_15698, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1568c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15690, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_15680, { 0, 2, 1 }
  uselistorder i32 %v2_15678, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15678, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_15670, { 1, 0 }
  uselistorder i32 %v1_15668, { 2, 1, 0 }
  uselistorder i32 %v2_15660, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_15660, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_15650, { 1, 0 }
  uselistorder i32 %v1_15650, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_15650, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 53, 54, 55, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i1* %cpsr_z.global-to-local, { 5, 7, 6, 9, 1, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 4, 19, 20, 21, 22, 23, 0, 24, 2, 26, 3, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 5, 7, 6, 9, 1, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 4, 20, 21, 22, 0, 23, 2, 25, 3, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 5, 7, 6, 9, 0, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 4, 20, 21, 22, 23, 24, 1, 25, 2, 27, 3, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 26, 27, 1, 0, 14, 16, 15, 17, 2, 19, 28, 20, 29, 21, 30, 22, 31, 23, 18, 32, 24, 7, 3, 8, 25, 9, 4, 5, 10, 11, 6, 12, 13 }
  uselistorder i32 -20, { 1, 0, 2 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 24, 25, 26, 14, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 65536, { 5, 4, 10, 6, 11, 7, 12, 8, 13, 9, 14, 15, 16, 20, 17, 21, 18, 22, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 1, 55, 56, 2, 57, 0, 3, 58, 59, 60, 61, 62, 65, 63, 64, 66, 67, 68, 73, 74, 75, 76, 69, 70, 71, 72, 77, 80, 81, 82, 78, 79, 83, 84, 85, 88, 89, 90, 86, 87, 91, 93, 92, 95, 96, 94, 97, 98, 99, 101, 102, 103, 100, 104, 105, 108, 109, 110, 106, 107, 111, 135, 113, 112, 114, 116, 115, 118, 117, 119, 120, 121, 123, 124, 125, 122, 126, 127, 128, 130, 131, 132, 129, 134, 133 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32* @r5, {}
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 10, 11, 12, 23, 24, 0, 1, 13, 14, 15, 16, 4, 17, 5, 18, 6, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 2, 35, 36, 37, 7, 38, 39, 40, 3, 41, 42, 43, 44, 45, 46, 47, 48, 49, 8, 50, 51, 52, 9, 53 }
  uselistorder i32 -12, { 0, 13, 14, 1, 16, 17, 2, 18, 19, 15, 12, 11, 10, 9, 8, 20, 21, 22, 3, 4, 5, 23, 7, 24, 25, 26, 6 }
  uselistorder i32 48, { 0, 8, 9, 6, 7, 2, 11, 3, 1, 10, 4, 12, 5, 13 }
  uselistorder i32 40, { 1, 10, 0, 3, 8, 9, 11, 4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 5, 21, 6, 22, 7, 23 }
  uselistorder i32 36, { 1, 8, 9, 6, 7, 0, 2, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 -16, { 8, 9, 10, 11, 12, 13, 14, 15, 16, 7, 6, 5, 1, 17, 18, 19, 20, 21, 22, 4, 2, 0, 3 }
  uselistorder i32 -32, { 1, 0, 2, 4, 3 }
  uselistorder i32 24, { 0, 80, 81, 42, 43, 1, 82, 83, 39, 40, 12, 13, 69, 46, 74, 47, 48, 62, 66, 44, 45, 70, 49, 50, 51, 52, 53, 54, 55, 16, 56, 17, 57, 18, 58, 59, 60, 61, 63, 64, 71, 65, 72, 67, 68, 75, 76, 77, 73, 78, 79, 2, 84, 19, 20, 3, 85, 21, 22, 4, 86, 14, 87, 88, 89, 23, 24, 5, 25, 26, 90, 27, 28, 6, 15, 91, 29, 7, 8, 30, 92, 31, 9, 93, 94, 95, 32, 33, 96, 34, 97, 35, 10, 98, 36, 37, 99, 100, 38, 101, 11, 41 }
  uselistorder i32* @lr, { 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 0, 110, 111, 112, 1, 113, 114, 115, 2, 116, 117, 118, 119, 120, 121, 122, 123, 19, 20, 124, 125, 126, 127, 128, 53, 54, 55, 56, 61, 62, 63, 64, 21, 22, 23, 24, 25, 65, 66, 4, 5, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 6, 7, 10, 11, 3, 14, 12, 13, 8, 9, 82, 15, 16, 17, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 }
  uselistorder i32 16, { 32, 33, 34, 167, 35, 168, 169, 36, 170, 171, 37, 172, 173, 174, 175, 176, 177, 83, 84, 69, 70, 88, 85, 86, 87, 89, 24, 90, 91, 4, 5, 6, 7, 8, 23, 9, 10, 0, 11, 12, 48, 73, 49, 38, 50, 39, 51, 71, 72, 74, 76, 77, 78, 25, 68, 13, 14, 22, 66, 15, 79, 16, 52, 75, 42, 41, 40, 80, 43, 81, 44, 53, 17, 54, 82, 55, 56, 26, 92, 93, 94, 95, 27, 96, 97, 98, 99, 100, 101, 102, 30, 103, 104, 105, 58, 106, 45, 57, 107, 108, 59, 109, 110, 111, 18, 112, 113, 1, 60, 114, 115, 116, 61, 117, 118, 119, 120, 121, 2, 62, 122, 123, 19, 124, 67, 20, 125, 63, 126, 127, 128, 21, 31, 129, 64, 130, 131, 3, 46, 132, 133, 134, 135, 136, 137, 28, 138, 139, 140, 141, 143, 142, 144, 145, 146, 147, 148, 149, 150, 29, 151, 152, 153, 154, 155, 157, 156, 158, 159, 160, 65, 161, 47, 162, 163, 164, 165, 166 }
  uselistorder i32 20, { 105, 2, 106, 107, 0, 3, 108, 29, 30, 19, 20, 1, 31, 32, 33, 34, 21, 23, 4, 24, 5, 25, 18, 16, 26, 22, 27, 28, 35, 38, 36, 6, 37, 39, 40, 41, 42, 44, 45, 43, 7, 46, 47, 48, 49, 50, 51, 54, 55, 52, 8, 53, 56, 57, 58, 59, 60, 61, 64, 65, 62, 9, 63, 66, 67, 68, 69, 72, 73, 70, 10, 71, 74, 75, 76, 77, 78, 79, 82, 80, 17, 81, 83, 84, 85, 88, 12, 86, 11, 87, 89, 90, 93, 14, 91, 13, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 15, 104 }
  uselistorder i32 27, { 1, 0, 6, 2, 7, 3, 8, 4, 9, 5, 10 }
  uselistorder i32 -28, { 1, 2, 0, 3 }
  uselistorder i32 7, { 48, 49, 51, 108, 114, 10, 53, 4, 11, 52, 2, 12, 54, 13, 55, 14, 56, 15, 57, 16, 58, 17, 59, 18, 60, 19, 61, 20, 62, 21, 63, 22, 64, 23, 65, 24, 66, 25, 67, 26, 68, 27, 69, 28, 70, 29, 71, 30, 72, 31, 73, 32, 74, 33, 75, 34, 76, 35, 77, 36, 78, 37, 79, 38, 39, 40, 80, 81, 82, 41, 83, 84, 85, 86, 5, 87, 88, 89, 90, 42, 91, 6, 92, 43, 93, 94, 7, 95, 96, 8, 97, 98, 99, 100, 101, 44, 102, 103, 104, 105, 106, 45, 107, 3, 109, 0, 46, 110, 1, 47, 111, 112, 50, 9, 113 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 6, 13, 12, 11, 10, 22, 23, 24, 25, 7, 26, 0, 29, 9, 27, 28, 5, 8, 1, 3, 2, 4 }
  uselistorder i1 false, { 44, 45, 46, 82, 16, 43, 83, 84, 40, 41, 42, 85, 15, 86, 87, 0, 49, 48, 50, 47, 2, 4, 88, 3, 12, 5, 52, 14, 11, 17, 54, 6, 7, 8, 51, 1, 18, 9, 10, 53, 89, 57, 90, 91, 58, 92, 23, 24, 25, 26, 59, 93, 94, 75, 95, 96, 97, 64, 98, 28, 29, 65, 99, 66, 100, 60, 61, 62, 27, 101, 63, 102, 103, 74, 104, 105, 106, 107, 108, 109, 67, 68, 110, 111, 69, 112, 70, 71, 113, 72, 114, 73, 115, 55, 56, 116, 117, 118, 119, 120, 121, 30, 31, 76, 122, 123, 77, 37, 124, 78, 20, 21, 32, 22, 33, 34, 35, 13, 36, 125, 38, 79, 80, 126, 19, 81, 127, 39, 128, 129 }
  uselistorder i32 4, { 85, 76, 77, 5, 446, 78, 447, 57, 6, 7, 79, 448, 80, 449, 450, 451, 452, 81, 453, 454, 455, 456, 82, 457, 458, 459, 460, 461, 8, 462, 463, 464, 465, 466, 83, 467, 56, 468, 469, 470, 471, 472, 473, 9, 10, 84, 474, 281, 282, 208, 209, 283, 284, 285, 475, 476, 477, 478, 479, 159, 160, 161, 58, 162, 163, 408, 410, 409, 406, 407, 370, 371, 372, 373, 411, 412, 413, 414, 395, 396, 397, 415, 416, 164, 165, 166, 167, 168, 49, 11, 12, 286, 287, 288, 289, 290, 291, 13, 14, 67, 15, 16, 68, 417, 418, 206, 17, 18, 235, 102, 86, 419, 420, 59, 212, 103, 213, 236, 237, 229, 230, 238, 239, 214, 215, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 104, 232, 233, 234, 231, 69, 240, 241, 87, 105, 19, 242, 20, 243, 244, 21, 22, 245, 246, 51, 247, 50, 252, 106, 253, 107, 254, 108, 255, 109, 256, 110, 257, 111, 258, 112, 259, 113, 260, 114, 261, 115, 262, 116, 263, 117, 264, 118, 265, 119, 266, 120, 267, 121, 268, 122, 270, 123, 271, 124, 272, 273, 269, 248, 125, 249, 250, 251, 274, 65, 64, 63, 275, 126, 23, 24, 25, 26, 27, 28, 276, 52, 277, 53, 278, 279, 280, 0, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 292, 169, 293, 294, 295, 296, 170, 171, 141, 297, 66, 29, 140, 298, 88, 299, 300, 172, 301, 302, 173, 174, 303, 142, 304, 89, 305, 306, 175, 176, 307, 177, 308, 309, 178, 179, 70, 310, 143, 311, 90, 312, 313, 314, 315, 316, 317, 144, 91, 318, 319, 180, 320, 321, 322, 323, 181, 182, 2, 324, 145, 325, 92, 326, 327, 328, 183, 329, 330, 184, 185, 3, 71, 331, 146, 332, 93, 333, 334, 335, 336, 186, 187, 337, 338, 339, 188, 340, 341, 147, 342, 4, 343, 94, 344, 148, 345, 346, 347, 189, 348, 349, 350, 351, 352, 190, 191, 149, 353, 72, 95, 354, 96, 355, 356, 357, 192, 358, 359, 360, 150, 361, 151, 362, 363, 364, 365, 193, 194, 152, 366, 73, 367, 97, 368, 98, 369, 195, 374, 375, 30, 196, 376, 377, 31, 197, 378, 379, 32, 198, 380, 381, 33, 199, 74, 382, 383, 34, 384, 200, 385, 386, 35, 201, 387, 388, 36, 202, 389, 390, 37, 203, 391, 392, 38, 204, 393, 394, 39, 398, 205, 399, 400, 401, 402, 40, 403, 404, 1, 421, 405, 422, 423, 101, 424, 425, 75, 426, 153, 427, 428, 429, 430, 99, 431, 154, 432, 433, 434, 100, 435, 155, 436, 41, 42, 43, 437, 438, 62, 61, 60, 439, 44, 45, 46, 156, 440, 157, 441, 47, 48, 442, 54, 443, 55, 158, 444, 445, 207 }
  uselistorder i32* @r2, { 90, 91, 26, 9, 27, 29, 28, 30, 31, 32, 33, 7, 92, 1, 93, 98, 99, 102, 94, 54, 58, 59, 62, 60, 61, 55, 56, 57, 42, 63, 15, 0, 100, 3, 101, 6, 34, 35, 36, 8, 10, 95, 96, 97, 11, 64, 65, 66, 67, 2, 68, 69, 70, 71, 72, 73, 4, 74, 75, 76, 77, 78, 79, 80, 16, 12, 13, 14, 19, 20, 17, 18, 21, 22, 23, 24, 25, 37, 38, 39, 40, 41, 5, 44, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 81, 82, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder label %dec_label_pc_15ab8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_159e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15980, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_1590c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_158d0, { 1, 0 }
  uselistorder label %dec_label_pc_158bc, { 1, 0 }
  uselistorder label %dec_label_pc_1587c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_157a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15744, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_156b8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_15678, { 1, 0 }
}

define i32 @function_15ad8(i32 %arg1) local_unnamed_addr {
dec_label_pc_15ad8:
  ret i32 %arg1
}

define i32 @function_15ae0() local_unnamed_addr {
dec_label_pc_15ae0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_15ae0 = load i32, i32* @r0, align 4
  %v2_15ae0 = icmp eq i32 %v0_15ae0, 0
  %v3_15ae4 = load i32, i32* @r4, align 4
  store i32 %v3_15ae4, i32* %stack_var_-20, align 4
  %v0_15ae8 = load i32, i32* @r1, align 4
  br i1 %v2_15ae0, label %dec_label_pc_15bc0, label %dec_label_pc_15afc.lr.ph

dec_label_pc_15afc:                               ; preds = %dec_label_pc_15afc.lr.ph, %dec_label_pc_15b80
  %v1_15b80 = phi i32 [ 0, %dec_label_pc_15afc.lr.ph ], [ %v5_15b80, %dec_label_pc_15b80 ]
  %v0_15b84 = phi i32 [ 1, %dec_label_pc_15afc.lr.ph ], [ %v1_15b84, %dec_label_pc_15b80 ]
  %v0_15b04 = phi i32 [ %v0_15ae0, %dec_label_pc_15afc.lr.ph ], [ %v0_15b0425, %dec_label_pc_15b80 ]
  %v1_15b04 = inttoptr i32 %v0_15b04 to i8*
  %v2_15b04 = load i8, i8* %v1_15b04, align 1
  %v3_15b04 = zext i8 %v2_15b04 to i32
  %v3_15b08 = mul nuw nsw i32 %v3_15b04, 2
  %v4_15b08 = add i32 %v3_15b08, %v2_15b00.pre
  %v5_15b08 = inttoptr i32 %v4_15b08 to i8*
  %v6_15b08 = load i8, i8* %v5_15b08, align 1
  %v1_15b0c = and i8 %v6_15b08, 8
  %v2_15b0c = icmp eq i8 %v1_15b0c, 0
  br i1 %v2_15b0c, label %dec_label_pc_15bc0, label %dec_label_pc_15b14

dec_label_pc_15b14:                               ; preds = %dec_label_pc_15afc
  br label %dec_label_pc_15b34

dec_label_pc_15b1c:                               ; preds = %dec_label_pc_15b34
  %v3_15b20 = mul i32 %v0_15b80, 10
  %v4_15b20 = add i32 %v3_15b34, %v3_15b20
  %v1_15b24 = add i32 %v4_15b20, -48
  %v8_15b2c = icmp sgt i32 %v1_15b24, 255
  br i1 %v8_15b2c, label %dec_label_pc_15bc0, label %dec_label_pc_15b30

dec_label_pc_15b30:                               ; preds = %dec_label_pc_15b1c
  %v1_15b30 = add i32 %v0_15b70, 1
  store i32 %v1_15b30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15b34

dec_label_pc_15b34:                               ; preds = %dec_label_pc_15b14, %dec_label_pc_15b30
  %v0_15b80 = phi i32 [ 0, %dec_label_pc_15b14 ], [ %v1_15b24, %dec_label_pc_15b30 ]
  %v0_15b70 = phi i32 [ %v0_15b04, %dec_label_pc_15b14 ], [ %v1_15b30, %dec_label_pc_15b30 ]
  %v1_15b34 = inttoptr i32 %v0_15b70 to i8*
  %v2_15b34 = load i8, i8* %v1_15b34, align 1
  %v3_15b34 = zext i8 %v2_15b34 to i32
  %v2_15b38 = mul nuw nsw i32 %v3_15b34, 2
  %v2_15b3c = add i32 %v2_15b38, %v2_15b00.pre
  %v3_15b40 = inttoptr i32 %v2_15b3c to i8*
  %v4_15b40 = load i8, i8* %v3_15b40, align 1
  %v6_15b40 = zext i8 %v4_15b40 to i32
  %v1_15b4c = and i32 %v6_15b40, 8
  %v2_15b4c = icmp eq i32 %v1_15b4c, 0
  br i1 %v2_15b4c, label %dec_label_pc_15b54, label %dec_label_pc_15b1c

dec_label_pc_15b54:                               ; preds = %dec_label_pc_15b34
  %v8_15b58 = icmp sgt i32 %v0_15b84, 3
  br i1 %v8_15b58, label %dec_label_pc_15b6c, label %dec_label_pc_15b5c

dec_label_pc_15b5c:                               ; preds = %dec_label_pc_15b54
  %v7_15b5c = icmp eq i8 %v2_15b34, 46
  br i1 %v7_15b5c, label %dec_label_pc_15b64, label %dec_label_pc_15bc0

dec_label_pc_15b64:                               ; preds = %dec_label_pc_15b5c
  %v1_15b64 = add i32 %v0_15b70, 1
  store i32 %v1_15b64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15b80

dec_label_pc_15b6c:                               ; preds = %dec_label_pc_15b54
  %v2_15b6c = icmp eq i8 %v2_15b34, 0
  %v1_15b70 = add i32 %v0_15b70, 1
  store i32 %v1_15b70, i32* %r0.global-to-local, align 4
  br i1 %v2_15b6c, label %dec_label_pc_15b80, label %dec_label_pc_15b78

dec_label_pc_15b78:                               ; preds = %dec_label_pc_15b6c
  %v1_15b78 = and i32 %v6_15b40, 32
  %v2_15b78 = icmp eq i32 %v1_15b78, 0
  br i1 %v2_15b78, label %dec_label_pc_15bc0, label %dec_label_pc_15b80

dec_label_pc_15b80:                               ; preds = %dec_label_pc_15b78, %dec_label_pc_15b6c, %dec_label_pc_15b64
  %v0_15b0425 = phi i32 [ %v1_15b70, %dec_label_pc_15b78 ], [ %v1_15b70, %dec_label_pc_15b6c ], [ %v1_15b64, %dec_label_pc_15b64 ]
  %v4_15b80 = mul i32 %v1_15b80, 256
  %v5_15b80 = or i32 %v0_15b80, %v4_15b80
  %v1_15b84 = add nuw nsw i32 %v0_15b84, 1
  %v7_15b8c = icmp slt i32 %v1_15b84, 5
  br i1 %v7_15b8c, label %dec_label_pc_15afc, label %dec_label_pc_15b90

dec_label_pc_15afc.lr.ph:                         ; preds = %dec_label_pc_15ae0
  %v2_15b00.pre = load i32, i32* bitcast (i32** @global_var_1f174.945 to i32*), align 4
  br label %dec_label_pc_15afc

dec_label_pc_15b90:                               ; preds = %dec_label_pc_15b80
  %v2_15b90 = icmp eq i32 %v0_15ae8, 0
  br i1 %v2_15b90, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_15b90
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_15b90
  %v2_15b98 = and i32 %v5_15b80, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v2_15b94 = udiv i32 %v5_15b80, 256
  %v4_15b9c = and i32 %v2_15b94, 65280
  %v4_15ba0 = mul i32 %v2_15b98, 256
  %v5_15ba4 = udiv i32 %v5_15b80, 16777216
  %v6_15ba4 = or i32 %v4_15b9c, %v5_15ba4
  %v5_15ba8 = mul i32 %v0_15b80, 16777216
  %v6_15ba8 = or i32 %v4_15ba0, %v5_15ba8
  %v3_15bac = or i32 %v6_15ba4, %v6_15ba8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15bb8 = inttoptr i32 %v0_15ae8 to i32*
  store i32 %v3_15bac, i32* %v3_15bb8, align 4
  %v2_15bbc.pre = load i32, i32* %stack_var_-20, align 4
  %v17_15bbc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_15bbc = phi i32 [ 1, %bb ], [ %v17_15bbc.pre, %bb40 ]
  %v2_15bbc = phi i32 [ %v3_15ae4, %bb ], [ %v2_15bbc.pre, %bb40 ]
  store i32 %v2_15bbc, i32* @r4, align 4
  ret i32 %v17_15bbc

dec_label_pc_15bc0:                               ; preds = %dec_label_pc_15b5c, %dec_label_pc_15b78, %dec_label_pc_15afc, %dec_label_pc_15b1c, %dec_label_pc_15ae0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_15ae4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_15b00.pre, { 1, 0 }
  uselistorder i32 %v1_15b84, { 1, 0 }
  uselistorder i32 %v0_15b70, { 0, 1, 3, 2 }
  uselistorder i32 %v3_15ae4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 49, 48, 51, 50, 54, 52, 55, 53, 57, 56, 61, 58, 60, 59, 62, 64, 63, 66, 65, 68, 67, 69, 71, 70, 72, 79, 73, 80, 74, 81, 75, 82, 83, 76, 84, 77, 85, 78, 87, 86, 91, 88, 92, 89, 93, 90, 95, 94, 96, 98, 97, 99, 102, 100, 103, 101, 104, 106, 105, 107, 108, 110, 109, 111, 117, 112, 118, 113, 119, 114, 120, 115, 121, 116, 123, 122, 124, 126, 125, 128, 127, 129, 132, 133, 130, 134, 131, 135, 137, 136, 138, 142, 139, 143, 140, 141, 144, 146, 145, 151, 147, 152, 148, 153, 150, 154, 155, 156, 149, 157, 159, 158, 164, 160, 165, 161, 166, 163, 167, 168, 169, 162, 171, 170, 174, 172, 175, 173, 176, 178, 179, 177, 180 }
  uselistorder i32 65280, { 0, 22, 2, 3, 21, 1, 4, 23, 5, 6, 24, 7, 25, 8, 9, 10, 11, 12, 13, 15, 16, 26, 14, 27, 17, 28, 29, 30, 18, 31, 32, 19, 33, 20 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.24 to i32), { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 16, 0, 17 }
  uselistorder i32 5, { 15, 56, 16, 5, 17, 6, 2, 18, 57, 3, 0, 19, 58, 20, 59, 21, 60, 22, 61, 23, 62, 24, 63, 25, 64, 26, 65, 27, 66, 28, 67, 29, 68, 30, 69, 31, 70, 32, 71, 33, 72, 34, 73, 35, 74, 36, 75, 37, 76, 38, 77, 39, 78, 40, 79, 41, 80, 42, 81, 43, 82, 44, 83, 45, 84, 46, 85, 47, 86, 48, 49, 50, 51, 52, 53, 87, 88, 89, 90, 7, 91, 92, 93, 94, 8, 95, 96, 97, 98, 99, 100, 101, 102, 9, 103, 104, 54, 105, 10, 106, 107, 108, 11, 109, 110, 111, 112, 12, 113, 114, 115, 116, 117, 118, 119, 13, 120, 121, 122, 123, 124, 125, 126, 14, 127, 4, 128, 129, 1, 130, 131, 55, 132 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 62, 63, 67, 70, 71, 72, 68, 69, 73, 74, 75, 76, 77, 433, 434, 78, 79, 80, 81, 82, 83, 84, 435, 85, 86, 88, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 99, 100, 104, 103, 102, 105, 431, 436, 110, 106, 109, 107, 108, 429, 111, 112, 113, 116, 115, 114, 117, 119, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 129, 131, 132, 133, 137, 143, 138, 134, 135, 139, 140, 141, 144, 136, 145, 146, 142, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 159, 162, 165, 166, 164, 163, 167, 170, 169, 168, 171, 177, 174, 178, 175, 172, 179, 173, 180, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 197, 199, 200, 201, 212, 207, 202, 213, 208, 214, 215, 209, 216, 210, 203, 204, 205, 217, 206, 218, 211, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 245, 255, 251, 252, 247, 248, 256, 253, 249, 257, 254, 250, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 274, 273, 276, 283, 279, 284, 285, 280, 277, 286, 281, 278, 287, 282, 288, 289, 290, 291, 292, 293, 294, 297, 298, 295, 299, 296, 304, 300, 302, 301, 303, 305, 306, 307, 308, 309, 312, 313, 316, 314, 310, 317, 315, 311, 320, 319, 318, 430, 437, 321, 322, 328, 323, 329, 324, 325, 330, 326, 331, 332, 327, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 352, 354, 355, 359, 360, 367, 361, 362, 368, 363, 356, 357, 369, 364, 358, 365, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 384, 386, 387, 391, 392, 399, 393, 394, 400, 395, 388, 389, 401, 396, 390, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 420, 422, 423, 424, 425, 426, 427, 428, 432 }
  uselistorder i32 32, { 67, 50, 51, 48, 62, 63, 60, 61, 4, 3, 6, 5, 8, 7, 49, 47, 68, 69, 53, 52, 10, 9, 12, 11, 14, 13, 16, 15, 59, 18, 17, 19, 21, 20, 23, 22, 24, 25, 27, 26, 54, 55, 64, 65, 28, 66, 56, 57, 29, 30, 0, 31, 1, 2, 32, 33, 34, 35, 36, 38, 37, 40, 39, 42, 41, 43, 44, 45, 46, 58 }
  uselistorder i8 46, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 3, { 34, 65, 66, 174, 67, 68, 69, 70, 71, 72, 85, 105, 175, 4, 166, 169, 170, 0, 73, 21, 74, 22, 171, 80, 35, 23, 24, 86, 38, 87, 2, 88, 89, 90, 91, 36, 19, 92, 93, 94, 95, 39, 96, 40, 97, 41, 98, 42, 99, 43, 100, 44, 101, 25, 102, 45, 103, 37, 104, 46, 47, 48, 49, 50, 51, 1, 106, 107, 108, 109, 110, 111, 112, 113, 52, 114, 53, 115, 54, 26, 116, 117, 118, 119, 120, 6, 5, 55, 27, 121, 122, 123, 124, 125, 126, 127, 8, 7, 56, 128, 28, 129, 130, 131, 132, 133, 134, 135, 136, 10, 9, 57, 137, 29, 138, 139, 140, 141, 142, 12, 11, 58, 143, 30, 144, 145, 146, 147, 59, 148, 14, 13, 60, 149, 31, 150, 151, 152, 153, 154, 155, 16, 15, 61, 156, 32, 157, 158, 159, 160, 161, 162, 163, 18, 17, 62, 164, 33, 165, 20, 167, 3, 168, 172, 75, 81, 76, 82, 77, 83, 78, 84, 63, 173, 64, 79 }
  uselistorder i32 8, { 177, 195, 31, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 32, 212, 122, 123, 124, 125, 129, 126, 127, 128, 213, 181, 180, 178, 179, 163, 164, 165, 182, 183, 184, 171, 172, 173, 6, 35, 36, 33, 34, 17, 18, 27, 28, 37, 214, 130, 131, 132, 133, 7, 8, 82, 21, 9, 10, 16, 11, 45, 88, 38, 12, 13, 14, 83, 46, 87, 30, 89, 90, 91, 92, 94, 47, 95, 48, 96, 49, 97, 50, 98, 51, 99, 52, 100, 53, 101, 54, 102, 55, 103, 56, 104, 57, 105, 58, 106, 59, 107, 60, 108, 61, 109, 62, 110, 63, 111, 64, 112, 65, 113, 66, 114, 67, 115, 68, 116, 69, 117, 70, 118, 71, 119, 72, 120, 121, 93, 15, 73, 74, 75, 134, 29, 81, 39, 135, 136, 137, 138, 139, 22, 140, 141, 142, 143, 3, 144, 145, 146, 4, 147, 148, 149, 150, 151, 152, 153, 5, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 40, 167, 41, 168, 42, 169, 76, 170, 79, 174, 175, 77, 176, 0, 1, 2, 19, 23, 24, 185, 20, 25, 26, 186, 78, 84, 85, 187, 188, 190, 189, 191, 192, 43, 193, 80, 86, 44, 194 }
  uselistorder i32 255, { 2, 15, 16, 3, 17, 4, 18, 5, 19, 0, 1, 8, 20, 9, 21, 6, 22, 7, 23, 12, 24, 13, 25, 10, 26, 11, 27, 14, 28 }
  uselistorder i32 10, { 11, 64, 65, 37, 38, 93, 0, 12, 4, 46, 39, 13, 44, 45, 3, 47, 48, 40, 14, 49, 41, 50, 15, 51, 16, 52, 17, 53, 18, 54, 19, 55, 20, 56, 21, 57, 22, 58, 23, 59, 24, 60, 25, 61, 26, 62, 63, 27, 1, 28, 29, 30, 5, 66, 67, 68, 69, 70, 71, 72, 73, 74, 6, 75, 76, 77, 7, 78, 79, 80, 31, 81, 8, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 9, 94, 95, 2, 35, 42, 96, 33, 97, 36, 43, 10, 98, 32, 99, 34 }
  uselistorder i8 0, { 4, 0, 22, 3, 23, 24, 1, 8, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 5, 36, 37, 38, 39, 11, 40, 2, 10, 9, 12, 41, 42, 43, 44, 17, 45, 46, 49, 18, 47, 48, 16, 50, 51, 52, 53, 54, 55, 13, 56, 57, 58, 20, 59, 60, 61, 63, 64, 7, 67, 15, 73, 68, 69, 65, 66, 14, 19, 70, 71, 72, 6, 74, 75, 62, 21, 76, 77, 78, 79, 80, 81, 82 }
  uselistorder i32 2, { 4, 140, 267, 268, 57, 269, 270, 47, 271, 46, 272, 45, 143, 80, 81, 252, 82, 253, 83, 254, 273, 52, 84, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 141, 14, 15, 16, 17, 18, 86, 87, 85, 48, 49, 88, 161, 89, 91, 145, 93, 146, 94, 147, 95, 148, 92, 149, 155, 63, 144, 64, 150, 65, 151, 66, 152, 67, 153, 68, 154, 69, 160, 156, 157, 158, 159, 59, 96, 162, 19, 20, 163, 165, 166, 97, 167, 53, 142, 98, 168, 99, 169, 100, 170, 171, 90, 172, 21, 101, 164, 105, 173, 103, 174, 104, 175, 102, 106, 176, 22, 23, 24, 107, 177, 108, 70, 109, 110, 60, 112, 113, 111, 114, 178, 50, 56, 179, 180, 181, 238, 239, 182, 183, 184, 185, 186, 187, 188, 115, 189, 71, 190, 191, 192, 193, 194, 116, 72, 195, 196, 197, 198, 199, 200, 201, 117, 202, 73, 203, 204, 118, 205, 119, 120, 206, 207, 208, 209, 210, 211, 212, 213, 1, 25, 26, 27, 28, 29, 30, 121, 214, 74, 215, 216, 217, 218, 219, 2, 31, 32, 33, 34, 35, 36, 122, 75, 220, 221, 222, 223, 123, 224, 54, 225, 124, 226, 3, 37, 38, 39, 40, 41, 42, 125, 227, 76, 228, 229, 230, 231, 232, 233, 234, 235, 126, 236, 77, 237, 240, 241, 242, 127, 243, 128, 244, 245, 246, 247, 129, 248, 78, 249, 61, 250, 58, 62, 251, 51, 130, 255, 256, 79, 257, 137, 258, 131, 259, 132, 133, 260, 134, 261, 135, 262, 136, 263, 55, 264, 43, 44, 265, 138, 266, 139 }
  uselistorder i32* @r1, { 35, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 1, 97, 98, 16, 17, 19, 18, 4, 6, 99, 0, 100, 37, 38, 102, 39, 44, 45, 48, 46, 47, 40, 41, 42, 43, 34, 49, 101, 11, 5, 36, 20, 7, 50, 51, 3, 52, 53, 54, 12, 8, 9, 10, 13, 14, 15, 21, 22, 31, 32, 2, 23, 24, 25, 26, 27, 28, 29, 30, 33, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder label %dec_label_pc_15bc0, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_15b34, { 1, 0 }
}

define i32 @function_15bcc(i32 %arg1) local_unnamed_addr {
dec_label_pc_15bcc:
  %v3_15bcc = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_15bd4 = call i32 @function_13628()
  %v0_15bd8 = load i32, i32* @r4, align 4
  store i32 %v3_15bcc, i32* @r4, align 4
  %v2_15be0 = call i32 @function_136d0(i32 %v0_15bd4, i32 %v0_15bd8)
  ret i32 %v2_15be0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_136d0, { 4, 6, 3, 2, 1, 0, 5 }
}

define i32 @function_15be4(i32 %arg1) local_unnamed_addr {
dec_label_pc_15be4:
  %v1_15be4 = add i32 %arg1, 28
  %v2_15be4 = inttoptr i32 %v1_15be4 to i32*
  %v3_15be4 = load i32, i32* %v2_15be4, align 4
  %v1_15bec = add i32 %arg1, 44
  %v2_15bec = inttoptr i32 %v1_15bec to i32*
  %v3_15bec = load i32, i32* %v2_15bec, align 4
  store i32 %v3_15be4, i32* @global_var_1f4d0.947, align 4
  store i32 %v3_15bec, i32* @global_var_1f4d4.949, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 2, 14, 1, 15, 3, 16 }
  uselistorder i32 28, { 32, 0, 22, 23, 8, 9, 31, 1, 10, 4, 11, 5, 12, 6, 13, 14, 15, 16, 17, 18, 19, 2, 7, 21, 20, 24, 25, 26, 27, 28, 29, 30, 3 }
}

define i32 @function_15c08(i32* %arg1) local_unnamed_addr {
dec_label_pc_15c08:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_15c10 = call i32 @brk(i32* %arg1)
  %v3_15c14 = icmp ult i32 %v2_15c10, %tmp
  store i32 %v2_15c10, i32* @global_var_1f234.943, align 4
  br i1 %v3_15c14, label %dec_label_pc_15c28, label %dec_label_pc_15c38

dec_label_pc_15c28:                               ; preds = %dec_label_pc_15c08
  %v0_15c28 = call i32 @function_13b78()
  %v2_15c30 = inttoptr i32 %v0_15c28 to i32*
  store i32 12, i32* %v2_15c30, align 4
  br label %dec_label_pc_15c38

dec_label_pc_15c38:                               ; preds = %dec_label_pc_15c08, %dec_label_pc_15c28
  %v0_15c38 = phi i32 [ 0, %dec_label_pc_15c08 ], [ -1, %dec_label_pc_15c28 ]
  ret i32 %v0_15c38

; uselistorder directives
  uselistorder i32 12, { 17, 10, 114, 115, 116, 118, 119, 120, 121, 11, 117, 122, 123, 124, 125, 126, 127, 128, 58, 59, 26, 27, 60, 18, 19, 99, 100, 101, 0, 96, 102, 7, 103, 8, 97, 4, 98, 20, 21, 6, 61, 62, 22, 63, 64, 12, 13, 29, 30, 43, 44, 40, 37, 45, 31, 28, 32, 33, 34, 35, 36, 38, 41, 42, 39, 46, 47, 48, 9, 49, 50, 52, 53, 54, 23, 55, 24, 56, 5, 57, 51, 91, 65, 25, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 14, 77, 78, 79, 80, 15, 81, 82, 83, 84, 85, 86, 16, 87, 88, 89, 90, 92, 93, 94, 95, 1, 2, 3, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113 }
  uselistorder i32 ()* @function_13b78, { 29, 57, 28, 52, 10, 9, 8, 7, 51, 50, 49, 6, 58, 27, 26, 24, 25, 42, 41, 23, 22, 32, 21, 14, 20, 53, 19, 40, 18, 43, 39, 48, 47, 46, 38, 17, 5, 4, 37, 16, 45, 44, 36, 3, 12, 35, 34, 11, 31, 15, 2, 1, 33, 56, 55, 54, 30, 13, 0 }
  uselistorder i32* @global_var_1f234.943, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15c38, { 1, 0 }
}

define i32 @function_15c44(i32 %arg1) local_unnamed_addr {
dec_label_pc_15c44:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15c48 = load i32, i32* @global_var_1f000.905, align 4
  %v7_15c4c = icmp eq i32 %v3_15c48, -1
  %v3_15c50 = load i32, i32* @r4, align 4
  store i32 %v3_15c50, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1f000.905 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_15c4c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_15c44
  store i32 %v3_15c50, i32* %r4.global-to-local, align 4
  %v9_15c58 = load i32, i32* @r0, align 4
  ret i32 %v9_15c58

.preheader:                                       ; preds = %dec_label_pc_15c44, %.preheader
  %v0_15c60 = phi i32 [ %v3_15c64, %.preheader ], [ %v3_15c48, %dec_label_pc_15c44 ]
  call void @__pseudo_branch(i32 %v0_15c60)
  %v0_15c64 = load i32, i32* %r4.global-to-local, align 4
  %v1_15c64 = add i32 %v0_15c64, -4
  %v2_15c64 = inttoptr i32 %v1_15c64 to i32*
  %v3_15c64 = load i32, i32* %v2_15c64, align 4
  store i32 %v1_15c64, i32* %r4.global-to-local, align 4
  %v3_15c68 = icmp eq i32 %v3_15c64, -1
  br i1 %v3_15c68, label %dec_label_pc_15c70, label %.preheader

dec_label_pc_15c70:                               ; preds = %.preheader
  %v2_15c70 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15c70, i32* %r4.global-to-local, align 4
  %v8_15c70 = load i32, i32* @r0, align 4
  ret i32 %v8_15c70

; uselistorder directives
  uselistorder i32 %v3_15c64, { 1, 0 }
  uselistorder i32 %v3_15c48, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 55, 16, 56, 57, 58, 3, 17, 18, 19, 59, 60, 61, 4, 20, 21, 22, 62, 63, 64, 5, 23, 24, 65, 15, 14, 66, 67, 68, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 69, 9, 32, 43, 44, 50, 45, 33, 34, 46, 47, 48, 49, 51, 8, 7, 40, 41, 42, 6, 35, 36, 52, 37, 38, 53, 54, 39 }
  uselistorder i32 -1, { 153, 0, 86, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 154, 87, 270, 88, 300, 89, 301, 289, 90, 341, 91, 342, 92, 343, 93, 344, 133, 84, 290, 291, 94, 292, 293, 95, 345, 1, 155, 2, 96, 302, 303, 156, 157, 158, 135, 159, 3, 4, 83, 73, 74, 160, 161, 162, 82, 271, 163, 272, 5, 6, 97, 304, 98, 305, 99, 298, 100, 306, 101, 297, 102, 307, 103, 288, 104, 308, 105, 273, 106, 309, 107, 296, 108, 274, 109, 164, 152, 110, 165, 111, 275, 112, 310, 113, 346, 347, 114, 276, 115, 311, 116, 294, 117, 295, 118, 277, 119, 348, 120, 324, 121, 278, 122, 279, 123, 325, 124, 299, 125, 312, 126, 349, 85, 350, 166, 167, 168, 169, 170, 171, 172, 173, 7, 8, 9, 10, 11, 127, 128, 12, 174, 280, 18, 175, 19, 176, 14, 177, 178, 281, 13, 179, 77, 20, 180, 181, 17, 182, 183, 184, 267, 268, 185, 186, 187, 265, 129, 266, 21, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 269, 15, 208, 16, 209, 210, 211, 22, 212, 213, 130, 282, 214, 23, 215, 283, 78, 75, 76, 24, 25, 28, 136, 284, 27, 138, 285, 26, 137, 286, 29, 30, 139, 287, 31, 32, 33, 34, 35, 216, 36, 79, 37, 38, 40, 217, 132, 39, 80, 41, 42, 43, 44, 45, 46, 47, 218, 48, 131, 49, 50, 52, 219, 51, 53, 54, 55, 56, 220, 57, 58, 59, 221, 60, 61, 62, 222, 63, 64, 65, 66, 67, 223, 68, 69, 70, 224, 71, 72, 81, 225, 226, 227, 228, 313, 314, 145, 315, 143, 316, 144, 317, 141, 318, 229, 230, 231, 232, 233, 146, 319, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 140, 320, 147, 321, 260, 261, 262, 263, 264, 142, 322, 134, 148, 323, 149, 150, 151 }
  uselistorder i32* @global_var_1f000.905, { 1, 0 }
  uselistorder i32 1, { 541, 121, 329, 367, 914, 915, 916, 917, 918, 343, 542, 313, 1026, 332, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 545, 544, 543, 301, 302, 305, 304, 300, 299, 303, 308, 306, 298, 307, 546, 16, 15, 11, 13, 12, 14, 17, 10, 706, 21, 18, 20, 19, 547, 22, 548, 204, 205, 549, 28, 86, 550, 296, 551, 274, 552, 288, 553, 277, 794, 795, 554, 282, 278, 283, 279, 280, 284, 281, 796, 797, 798, 415, 126, 127, 123, 125, 124, 555, 295, 556, 206, 0, 560, 559, 558, 557, 229, 228, 416, 561, 162, 344, 417, 562, 224, 563, 920, 568, 567, 566, 565, 564, 128, 129, 130, 132, 131, 418, 569, 1039, 345, 572, 571, 570, 290, 289, 573, 79, 80, 78, 81, 73, 74, 75, 76, 574, 84, 85, 83, 82, 575, 576, 292, 291, 577, 346, 921, 578, 230, 231, 419, 420, 327, 582, 581, 580, 579, 264, 263, 333, 583, 116, 584, 87, 585, 114, 586, 115, 587, 227, 588, 275, 589, 141, 590, 29, 591, 25, 592, 26, 593, 27, 594, 57, 595, 887, 318, 60, 59, 58, 707, 708, 709, 710, 711, 712, 713, 1040, 50, 51, 47, 48, 49, 596, 421, 422, 597, 54, 53, 55, 52, 377, 799, 598, 203, 378, 600, 599, 222, 221, 601, 56, 602, 46, 603, 43, 44, 604, 273, 605, 122, 606, 45, 607, 23, 608, 232, 24, 609, 276, 610, 106, 611, 294, 612, 297, 613, 293, 614, 181, 287, 262, 379, 922, 923, 380, 924, 925, 317, 926, 927, 928, 929, 323, 930, 617, 616, 615, 61, 70, 63, 64, 67, 65, 66, 62, 68, 69, 1, 931, 932, 933, 934, 72, 71, 2, 935, 936, 937, 938, 334, 939, 940, 335, 941, 619, 618, 286, 285, 800, 801, 802, 423, 620, 37, 36, 35, 34, 942, 347, 348, 3, 414, 943, 621, 40, 38, 41, 42, 39, 944, 946, 945, 424, 947, 226, 225, 902, 948, 949, 950, 133, 134, 951, 622, 140, 138, 139, 137, 952, 953, 623, 97, 96, 95, 94, 98, 954, 955, 624, 201, 200, 199, 198, 202, 425, 716, 426, 717, 381, 718, 719, 435, 720, 739, 436, 437, 730, 731, 736, 434, 714, 715, 721, 432, 722, 723, 433, 724, 725, 431, 726, 727, 430, 728, 729, 429, 732, 733, 428, 734, 735, 427, 737, 738, 740, 438, 328, 741, 439, 742, 744, 745, 743, 746, 440, 747, 705, 349, 750, 748, 441, 749, 752, 442, 753, 754, 755, 368, 756, 757, 443, 758, 444, 759, 445, 760, 446, 761, 447, 762, 448, 763, 449, 764, 450, 765, 451, 766, 452, 767, 453, 768, 454, 769, 455, 770, 456, 771, 457, 772, 458, 773, 459, 774, 460, 775, 461, 776, 350, 782, 783, 324, 462, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 536, 627, 626, 625, 207, 208, 209, 210, 214, 216, 217, 211, 212, 213, 218, 215, 777, 778, 463, 779, 780, 464, 781, 638, 272, 271, 266, 270, 269, 268, 265, 267, 751, 465, 640, 639, 310, 312, 309, 311, 888, 642, 641, 91, 92, 90, 89, 88, 93, 643, 468, 382, 784, 785, 383, 786, 466, 467, 469, 787, 788, 470, 471, 472, 473, 474, 475, 476, 374, 375, 477, 655, 654, 653, 652, 651, 650, 649, 648, 647, 540, 646, 645, 644, 31, 30, 33, 32, 478, 325, 479, 656, 482, 481, 480, 789, 658, 657, 384, 790, 483, 484, 660, 659, 485, 486, 487, 791, 792, 488, 351, 793, 326, 489, 664, 663, 662, 661, 220, 219, 808, 5, 803, 490, 804, 4, 805, 369, 806, 330, 331, 807, 809, 370, 810, 668, 667, 666, 537, 538, 665, 889, 385, 890, 386, 891, 6, 892, 7, 8, 811, 812, 813, 814, 815, 816, 817, 818, 371, 819, 820, 821, 822, 491, 823, 492, 824, 493, 825, 826, 827, 828, 829, 671, 670, 669, 254, 253, 251, 257, 258, 261, 259, 252, 256, 260, 255, 830, 831, 832, 833, 834, 494, 495, 673, 672, 145, 143, 142, 144, 149, 150, 147, 148, 146, 835, 836, 837, 496, 838, 839, 840, 841, 842, 843, 497, 844, 498, 388, 387, 499, 845, 674, 233, 234, 239, 238, 235, 240, 236, 237, 846, 847, 500, 848, 501, 502, 391, 389, 390, 539, 675, 135, 136, 849, 850, 336, 851, 852, 853, 854, 503, 855, 337, 504, 505, 856, 392, 857, 676, 172, 175, 170, 171, 176, 177, 180, 178, 174, 179, 173, 858, 859, 860, 861, 862, 506, 863, 507, 394, 393, 508, 864, 509, 865, 677, 101, 103, 104, 105, 102, 100, 99, 866, 867, 868, 869, 870, 871, 872, 510, 873, 511, 874, 512, 399, 398, 513, 875, 395, 876, 396, 877, 397, 878, 682, 681, 680, 679, 678, 164, 166, 168, 169, 167, 163, 165, 879, 880, 881, 882, 883, 884, 514, 402, 401, 515, 885, 400, 886, 683, 244, 243, 242, 246, 247, 250, 248, 241, 249, 245, 893, 894, 895, 896, 897, 898, 516, 405, 404, 517, 899, 403, 900, 688, 687, 686, 685, 684, 154, 153, 152, 157, 158, 161, 159, 151, 156, 160, 155, 901, 406, 518, 689, 118, 120, 119, 117, 903, 904, 519, 352, 520, 907, 521, 522, 908, 905, 906, 909, 910, 911, 912, 338, 913, 339, 111, 108, 110, 109, 113, 107, 112, 956, 223, 919, 77, 957, 9, 958, 319, 526, 359, 360, 959, 320, 524, 361, 362, 525, 960, 353, 961, 358, 962, 321, 363, 529, 364, 373, 322, 527, 365, 366, 528, 963, 354, 964, 965, 413, 966, 967, 968, 408, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 409, 981, 982, 983, 984, 985, 341, 986, 530, 987, 531, 532, 988, 989, 990, 991, 992, 410, 993, 994, 995, 355, 996, 411, 997, 998, 999, 356, 1000, 412, 1001, 1002, 1003, 357, 1004, 1005, 1006, 1007, 342, 1008, 1009, 1010, 340, 523, 407, 1011, 1013, 1015, 1014, 1012, 533, 1016, 1017, 1018, 534, 1019, 1020, 1021, 1022, 704, 376, 1023, 1024, 372, 535, 1025, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 184, 183, 187, 182, 185, 197, 194, 195, 196, 189, 188, 186, 190, 192, 191, 193, 702, 703, 316, 315, 314 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_15c78() local_unnamed_addr {
dec_label_pc_15c78:
  %v5_15c7c = load i32, i32* @r0, align 4
  ret i32 %v5_15c7c

; uselistorder directives
  uselistorder i32* @r0, { 3, 10, 11, 100, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 58, 59, 61, 60, 26, 191, 192, 33, 34, 35, 36, 8, 2, 18, 19, 107, 108, 27, 193, 194, 196, 9, 12, 110, 14, 109, 96, 31, 97, 16, 98, 111, 195, 41, 13, 62, 63, 64, 65, 29, 23, 66, 67, 68, 69, 22, 197, 7, 20, 112, 15, 113, 21, 114, 115, 17, 116, 117, 118, 119, 0, 37, 42, 43, 38, 39, 40, 44, 46, 47, 48, 49, 50, 45, 51, 52, 53, 54, 55, 56, 57, 28, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 30, 82, 92, 93, 1, 4, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 99, 101, 102, 103, 104, 105, 120, 106, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 6, 5, 24, 25, 32 }
}

define i32 @function_15c80() local_unnamed_addr {
entry:
  %v3_15c84 = load i32, i32* @r4, align 4
  %v0_15c8c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_15c84)
  ret i32 %v0_15c8c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 11, 16, 17, 13, 14, 15, 18, 8, 9, 10, 2, 3, 4, 5, 6, 7, 1, 12 }
  uselistorder i32 0, { 119, 0, 891, 892, 893, 894, 121, 120, 895, 1280, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1285, 1286, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 33, 1305, 1306, 1307, 1308, 1309, 34, 1310, 1311, 1312, 35, 1313, 1314, 1315, 36, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1331, 1332, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 37, 1351, 1352, 1353, 1354, 1355, 38, 1356, 1357, 1358, 1359, 1360, 39, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 740, 741, 267, 742, 268, 649, 904, 905, 906, 907, 908, 743, 744, 1374, 1375, 1376, 1377, 269, 745, 1, 746, 747, 748, 1378, 1379, 1380, 122, 1381, 87, 1382, 85, 86, 1383, 1384, 1385, 270, 1389, 271, 1400, 1402, 570, 223, 1403, 272, 1401, 273, 274, 2, 1386, 1387, 123, 909, 250, 910, 277, 252, 251, 911, 912, 913, 914, 276, 916, 917, 275, 918, 1388, 279, 1390, 280, 253, 1391, 1392, 1394, 1395, 278, 921, 923, 924, 67, 224, 925, 922, 919, 920, 3, 862, 865, 863, 864, 225, 4, 928, 926, 927, 226, 124, 866, 867, 868, 869, 871, 872, 281, 5, 873, 6, 935, 936, 125, 929, 930, 931, 932, 933, 934, 7, 8, 915, 650, 651, 652, 282, 9, 283, 937, 938, 564, 851, 565, 939, 828, 940, 732, 941, 653, 942, 806, 654, 896, 1404, 1405, 80, 749, 284, 750, 751, 752, 753, 285, 754, 755, 756, 757, 758, 759, 760, 655, 943, 1393, 656, 944, 761, 779, 657, 566, 1396, 90, 1397, 1278, 658, 659, 1279, 874, 945, 1398, 1399, 10, 946, 107, 947, 948, 218, 217, 571, 91, 92, 93, 94, 596, 572, 69, 68, 108, 949, 950, 951, 952, 954, 953, 11, 955, 956, 220, 219, 573, 95, 96, 97, 98, 597, 574, 71, 70, 66, 76, 957, 598, 958, 959, 960, 99, 961, 962, 963, 964, 965, 126, 966, 575, 599, 576, 577, 967, 600, 116, 127, 968, 969, 970, 100, 971, 972, 973, 12, 601, 227, 14, 13, 128, 974, 129, 602, 15, 228, 130, 131, 262, 72, 132, 286, 660, 88, 762, 763, 976, 975, 977, 978, 40, 133, 979, 136, 135, 134, 263, 264, 265, 138, 137, 139, 287, 980, 981, 140, 875, 876, 117, 141, 982, 142, 661, 143, 983, 984, 985, 144, 986, 987, 662, 624, 145, 146, 666, 663, 625, 626, 627, 628, 639, 622, 603, 294, 623, 645, 646, 629, 630, 631, 604, 292, 632, 633, 605, 293, 634, 635, 606, 291, 636, 637, 607, 290, 638, 640, 608, 289, 641, 648, 609, 288, 642, 647, 643, 84, 73, 221, 222, 644, 569, 664, 295, 665, 230, 667, 109, 668, 296, 669, 672, 673, 148, 229, 670, 671, 297, 298, 674, 675, 254, 676, 677, 678, 679, 680, 681, 610, 682, 683, 81, 299, 685, 686, 687, 688, 689, 690, 691, 238, 237, 692, 300, 693, 101, 694, 695, 118, 696, 595, 697, 698, 699, 594, 700, 701, 702, 147, 301, 302, 703, 706, 707, 708, 709, 710, 149, 704, 150, 705, 16, 151, 684, 852, 853, 711, 712, 303, 713, 715, 152, 716, 717, 718, 719, 720, 721, 722, 153, 723, 255, 304, 724, 82, 305, 725, 714, 17, 726, 239, 727, 306, 728, 729, 730, 731, 307, 735, 611, 266, 155, 154, 232, 308, 733, 734, 231, 736, 737, 738, 74, 739, 156, 157, 309, 89, 764, 765, 766, 767, 235, 768, 769, 770, 234, 771, 772, 773, 774, 112, 775, 777, 776, 110, 111, 158, 233, 310, 778, 258, 256, 257, 113, 159, 77, 160, 780, 781, 103, 104, 78, 161, 162, 163, 240, 782, 114, 783, 784, 785, 236, 786, 164, 787, 788, 311, 789, 790, 791, 165, 166, 792, 167, 793, 105, 106, 79, 168, 169, 241, 794, 795, 796, 797, 170, 798, 799, 800, 171, 173, 172, 242, 802, 801, 174, 803, 804, 175, 805, 807, 180, 313, 808, 178, 179, 176, 177, 809, 810, 181, 811, 314, 315, 812, 312, 813, 182, 184, 183, 185, 815, 816, 814, 817, 18, 19, 20, 21, 22, 818, 186, 819, 187, 188, 243, 821, 820, 822, 824, 825, 823, 23, 24, 25, 26, 27, 826, 189, 827, 829, 830, 831, 75, 190, 192, 191, 244, 833, 832, 316, 834, 836, 837, 838, 839, 317, 840, 28, 29, 30, 835, 31, 32, 841, 193, 842, 843, 194, 196, 195, 245, 846, 844, 845, 318, 848, 847, 849, 197, 850, 854, 198, 200, 199, 246, 857, 856, 855, 319, 859, 858, 860, 201, 861, 247, 870, 320, 877, 878, 202, 879, 880, 881, 882, 203, 883, 321, 884, 885, 41, 886, 887, 888, 889, 890, 988, 204, 989, 897, 205, 898, 206, 990, 899, 900, 901, 902, 991, 992, 903, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 322, 1006, 578, 579, 580, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 42, 1048, 1049, 1050, 207, 208, 1051, 323, 1052, 1053, 1054, 1055, 581, 612, 1056, 1057, 1058, 43, 1059, 1060, 1061, 1062, 44, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 45, 1070, 1071, 213, 1072, 1073, 1074, 1075, 1076, 1077, 46, 1078, 1079, 1080, 47, 1081, 1082, 1083, 48, 1084, 1085, 1086, 1087, 326, 1101, 1102, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 582, 613, 1097, 1098, 1099, 1100, 583, 614, 1103, 1104, 1105, 49, 1106, 1107, 327, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 584, 615, 1116, 1117, 1118, 50, 1119, 1120, 1121, 1122, 51, 1123, 585, 1124, 1125, 1128, 1129, 586, 209, 1126, 1127, 210, 211, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 587, 616, 1141, 1142, 1143, 52, 1144, 1145, 1146, 1147, 1148, 1149, 53, 1150, 115, 1151, 1152, 1153, 1154, 588, 617, 1155, 1156, 1157, 54, 1158, 212, 1159, 1160, 1161, 55, 1162, 1163, 1164, 1165, 1166, 589, 618, 1167, 1168, 1169, 56, 1170, 1171, 1172, 57, 324, 325, 1173, 1174, 1175, 1176, 1177, 590, 619, 1178, 1179, 1180, 58, 1181, 1182, 1183, 59, 1184, 1185, 1186, 60, 1187, 1188, 1189, 61, 1190, 1191, 1192, 1193, 62, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1207, 591, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 248, 1219, 1222, 1223, 1226, 1227, 1228, 63, 1224, 1225, 1220, 1221, 1229, 1230, 215, 214, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 64, 216, 1241, 1242, 1243, 65, 1244, 1245, 1246, 1247, 1249, 83, 328, 1250, 1248, 1204, 1205, 102, 567, 568, 1251, 1252, 1253, 592, 593, 249, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 259, 1274, 260, 1275, 261, 1276, 1277, 620, 621, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420 }
  uselistorder i32* @r4, { 40, 716, 720, 721, 724, 725, 565, 566, 567, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 218, 68, 571, 572, 573, 742, 743, 744, 745, 746, 747, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 748, 749, 5, 750, 751, 752, 753, 767, 768, 769, 770, 38, 771, 30, 762, 763, 764, 765, 766, 754, 755, 756, 574, 575, 576, 577, 578, 579, 580, 581, 757, 758, 761, 582, 583, 584, 525, 6, 526, 527, 528, 7, 529, 8, 530, 531, 545, 9, 10, 546, 547, 548, 549, 550, 551, 585, 586, 11, 594, 595, 587, 588, 589, 590, 591, 592, 593, 69, 70, 71, 72, 73, 74, 596, 597, 598, 599, 496, 497, 600, 601, 437, 438, 602, 603, 204, 205, 604, 605, 75, 76, 606, 607, 364, 365, 77, 78, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 79, 80, 608, 609, 759, 760, 4, 81, 82, 610, 611, 255, 256, 281, 282, 83, 84, 718, 719, 85, 86, 722, 723, 552, 553, 612, 613, 614, 615, 87, 88, 89, 90, 257, 258, 259, 260, 261, 616, 617, 618, 91, 92, 93, 619, 620, 621, 622, 623, 624, 41, 42, 43, 44, 45, 46, 47, 48, 94, 95, 49, 50, 51, 52, 96, 97, 53, 56, 57, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 98, 99, 66, 67, 12, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 159, 160, 161, 162, 163, 164, 0, 165, 153, 154, 155, 156, 157, 158, 106, 107, 108, 109, 110, 498, 499, 500, 501, 502, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 13, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 31, 210, 211, 212, 213, 214, 215, 216, 1, 217, 262, 263, 264, 2, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 296, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 3, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 14, 343, 15, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 16, 380, 17, 381, 18, 382, 19, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 20, 410, 21, 411, 22, 412, 23, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 24, 477, 25, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 503, 504, 505, 26, 506, 27, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 554, 558, 555, 556, 557, 559, 560, 561, 562, 563, 564, 625, 626, 627, 568, 569, 570, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 32, 659, 660, 37, 661, 29, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 36, 28, 674, 675, 676, 677, 678, 679, 680, 35, 681, 682, 683, 34, 684, 685, 686, 33, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 39, 717 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
