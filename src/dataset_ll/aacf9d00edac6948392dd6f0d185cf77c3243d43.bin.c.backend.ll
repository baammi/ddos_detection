source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1c0a8.5 = global i32 0
@global_var_1c0b8.6 = global i32* @global_var_1c0a8.5
@global_var_1c218.12 = global i32 0
@global_var_dffc.18 = constant i32 -382906384
@global_var_1c234.23 = global i32 0
@global_var_8314.24 = constant i32 -352321546
@global_var_11ef4.25 = constant i32 -481296384
@global_var_a4c4.31 = constant i32 -382906384
@global_var_a988.33 = constant i32 -382906384
@global_var_89d8.35 = constant i32 -382906384
@global_var_c96c.37 = constant i32 -382906384
@global_var_c1f8.39 = constant i32 -382906384
@global_var_b998.41 = constant i32 -382906384
@global_var_9da8.44 = constant i32 -382906384
@global_var_962c.46 = constant i32 -382906384
@global_var_1c2d0.49 = global i32 0
@global_var_13b34.61 = constant i32 47
@global_var_1c2d8.63 = global i32 0
@global_var_1c238.65 = global i32 0
@global_var_1c2d4.67 = global i32 0
@global_var_debc.69 = constant i32 -382910448
@global_var_1c0c4.71 = global i32 68736
@global_var_1c0bc.73 = global i32 -1
@global_var_13b38.78 = constant [12 x i8] c"89.46.77.14\00"
@global_var_1c2e0.81 = local_unnamed_addr global i32 0
@global_var_1c2df.82 = local_unnamed_addr global i32 0
@global_var_1c2de.83 = local_unnamed_addr global i32 0
@global_var_1c23c.85 = global i32 0
@global_var_dd34.87 = constant i32 -442556408
@global_var_1c2dd.91 = local_unnamed_addr global i32 0
@global_var_13b44.95 = constant i32 10
@global_var_1c0c0.98 = global i32 -1
@global_var_112cc.101 = constant i32 -382910448
@global_var_10c80.102 = constant i32 -382910224
@global_var_13b48.104 = constant i32 16777216
@global_var_1c244.106 = global i32 0
@global_var_1c250.108 = global i32 0
@global_var_1c248.110 = global i32 0
@global_var_1c24c.112 = global i32 0
@global_var_1c288.126 = global i32 0
@global_var_1c254.128 = global i32 0
@global_var_1c280.130 = global i32 0
@global_var_1c2f4.135 = global i32 0
@global_var_1c2ec.139 = global i32 0
@global_var_1c2f0.141 = global i32 0
@global_var_1c25b.144 = local_unnamed_addr global i32 0
@global_var_1c25a.145 = local_unnamed_addr global i32 0
@global_var_1c26c.147 = global i32 0
@global_var_1c25d.149 = local_unnamed_addr global i32 0
@global_var_1c261.150 = local_unnamed_addr global i32 0
@global_var_1c260.151 = local_unnamed_addr global i32 0
@global_var_1c26f.152 = local_unnamed_addr global i32 0
@global_var_1c26d.153 = local_unnamed_addr global i32 0
@global_var_1c25c.154 = local_unnamed_addr global i32 0
@global_var_1c26e.155 = local_unnamed_addr global i32 0
@global_var_1c27b.157 = local_unnamed_addr global i32 0
@global_var_1c27a.158 = local_unnamed_addr global i32 0
@global_var_13bd4.160 = constant [5 x i8] c"&;; \00"
@global_var_13bd8.162 = constant i32 536542976
@global_var_13b50.164 = constant [5 x i8] c"5:?;\00"
@global_var_13b58.166 = constant [9 x i8] c"<!: acam\00"
@global_var_13b64.168 = constant [7 x i8] c" 18:1 \00"
@global_var_13b6c.170 = constant [8 x i8] c"0125!8 \00"
@global_var_13b74.172 = constant [9 x i8] c"$5''#;&0\00"
@global_var_13b80.174 = constant [6 x i8] c"509=:\00"
@global_var_13b88.176 = constant [6 x i8] c"\22=.,\22\00"
@global_var_13b90.178 = constant [8 x i8] c"'!$$;& \00"
@global_var_13b98.180 = constant i32 423502179
@global_var_13ba8.182 = constant [6 x i8] c"efg`a\00"
@global_var_13bb0.184 = constant [5 x i8] c"!'1&\00"
@global_var_13bb8.186 = constant i32 943467547
@global_var_13bc4.188 = constant i32 322070023
@global_var_1c264.189 = local_unnamed_addr global i32 0
@global_var_1c262.191 = local_unnamed_addr global i32 0
@global_var_1c263.192 = local_unnamed_addr global i32 0
@global_var_1c27c.194 = local_unnamed_addr global i32 0
@global_var_1c27d.195 = local_unnamed_addr global i32 0
@global_var_13bd0.201 = constant [3 x i8] c"\0D\0A\00"
@global_var_13be2.203 = constant i32 2096127
@global_var_13bd9.205 = constant i32 2095871
@global_var_1c2fc.208 = global i32 0
@global_var_1c0cc.211 = global i32 -555811921
@global_var_13be8.216 = constant [3 x i8] c"Qm\00"
@global_var_1c304.217 = local_unnamed_addr global i32 0
@global_var_1c308.218 = local_unnamed_addr global i32 0
@global_var_1c309.219 = local_unnamed_addr global i32 0
@global_var_13bec.221 = constant i32 59987
@global_var_1c30c.222 = local_unnamed_addr global i32 0
@global_var_1c310.223 = local_unnamed_addr global i32 0
@global_var_1c311.224 = local_unnamed_addr global i32 0
@global_var_13d54.226 = constant i32 808465680
@global_var_1c318.227 = local_unnamed_addr global i32 0
@global_var_1c314.228 = local_unnamed_addr global i32 0
@global_var_1c319.229 = local_unnamed_addr global i32 0
@global_var_13bf0.231 = constant [7 x i8] c"'<188T\00"
@global_var_1c31c.232 = local_unnamed_addr global i32 0
@global_var_1c320.233 = local_unnamed_addr global i32 0
@global_var_1c321.234 = local_unnamed_addr global i32 0
@global_var_13bf8.236 = constant [8 x i8] c"1:5681T\00"
@global_var_1c324.237 = local_unnamed_addr global i32 0
@global_var_1c328.238 = local_unnamed_addr global i32 0
@global_var_1c329.239 = local_unnamed_addr global i32 0
@global_var_13c00.241 = constant [8 x i8] c"'-' 19T\00"
@global_var_1c32c.242 = local_unnamed_addr global i32 0
@global_var_1c330.243 = local_unnamed_addr global i32 0
@global_var_1c331.244 = local_unnamed_addr global i32 0
@global_var_13c08.246 = constant [4 x i8] c"'<T\00"
@global_var_1c338.247 = local_unnamed_addr global i32 0
@global_var_1c334.248 = local_unnamed_addr global i32 0
@global_var_1c339.249 = local_unnamed_addr global i32 0
@global_var_13c0c.251 = constant i32 977090171
@global_var_1c340.252 = local_unnamed_addr global i32 0
@global_var_1c33c.253 = local_unnamed_addr global i32 0
@global_var_1c341.254 = local_unnamed_addr global i32 0
@global_var_13c20.256 = constant i32 470227742
@global_var_1c348.257 = local_unnamed_addr global i32 0
@global_var_1c344.258 = local_unnamed_addr global i32 0
@global_var_1c349.259 = local_unnamed_addr global i32 0
@global_var_13c3c.261 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1c350.262 = local_unnamed_addr global i32 0
@global_var_1c34c.263 = local_unnamed_addr global i32 0
@global_var_1c351.264 = local_unnamed_addr global i32 0
@global_var_13c48.266 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1c354.267 = local_unnamed_addr global i32 0
@global_var_1c358.268 = local_unnamed_addr global i32 0
@global_var_1c359.269 = local_unnamed_addr global i32 0
@global_var_13c5c.271 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1c360.272 = local_unnamed_addr global i32 0
@global_var_1c35c.273 = local_unnamed_addr global i32 0
@global_var_1c361.274 = local_unnamed_addr global i32 0
@global_var_13c74.276 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1c364.277 = local_unnamed_addr global i32 0
@global_var_1c368.278 = local_unnamed_addr global i32 0
@global_var_1c369.279 = local_unnamed_addr global i32 0
@global_var_13c7c.281 = constant [6 x i8] c"{1,1T\00"
@global_var_1c370.282 = local_unnamed_addr global i32 0
@global_var_1c36c.283 = local_unnamed_addr global i32 0
@global_var_1c371.284 = local_unnamed_addr global i32 0
@global_var_13c84.286 = constant [5 x i8] c"{20T\00"
@global_var_1c378.287 = local_unnamed_addr global i32 0
@global_var_1c374.288 = local_unnamed_addr global i32 0
@global_var_1c379.289 = local_unnamed_addr global i32 0
@global_var_13c8c.291 = constant [7 x i8] c"{95$'T\00"
@global_var_1c37c.292 = local_unnamed_addr global i32 0
@global_var_1c380.293 = local_unnamed_addr global i32 0
@global_var_1c381.294 = local_unnamed_addr global i32 0
@global_var_13c94.296 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1c384.297 = local_unnamed_addr global i32 0
@global_var_1c388.298 = local_unnamed_addr global i32 0
@global_var_1c389.299 = local_unnamed_addr global i32 0
@global_var_13ca4.301 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1c3e4.302 = local_unnamed_addr global i32 0
@global_var_1c3e8.303 = local_unnamed_addr global i32 0
@global_var_1c3e9.304 = local_unnamed_addr global i32 0
@global_var_13cb0.306 = constant [8 x i8] c"z5:=91T\00"
@global_var_1c3ec.307 = local_unnamed_addr global i32 0
@global_var_1c3f0.308 = local_unnamed_addr global i32 0
@global_var_1c3f1.309 = local_unnamed_addr global i32 0
@global_var_13cb8.311 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1c38c.312 = local_unnamed_addr global i32 0
@global_var_1c390.313 = local_unnamed_addr global i32 0
@global_var_1c391.314 = local_unnamed_addr global i32 0
@global_var_13ccc.316 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1c394.317 = local_unnamed_addr global i32 0
@global_var_1c398.318 = local_unnamed_addr global i32 0
@global_var_1c399.319 = local_unnamed_addr global i32 0
@global_var_13d74.321 = constant i32 557516544
@global_var_1c3a0.322 = local_unnamed_addr global i32 0
@global_var_1c39c.323 = local_unnamed_addr global i32 0
@global_var_1c3a1.324 = local_unnamed_addr global i32 0
@global_var_13cd8.326 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1c3a8.327 = local_unnamed_addr global i32 0
@global_var_1c3a4.328 = local_unnamed_addr global i32 0
@global_var_1c3a9.329 = local_unnamed_addr global i32 0
@global_var_13cec.331 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1c3b0.332 = local_unnamed_addr global i32 0
@global_var_1c3ac.333 = local_unnamed_addr global i32 0
@global_var_1c3b1.334 = local_unnamed_addr global i32 0
@global_var_13cfc.336 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1c3b4.337 = local_unnamed_addr global i32 0
@global_var_1c3b8.338 = local_unnamed_addr global i32 0
@global_var_1c3b9.339 = local_unnamed_addr global i32 0
@global_var_13d0c.341 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1c3c0.342 = local_unnamed_addr global i32 0
@global_var_1c3bc.343 = local_unnamed_addr global i32 0
@global_var_1c3c1.344 = local_unnamed_addr global i32 0
@global_var_13d20.346 = constant [9 x i8] c"$662*7!E\00"
@global_var_1c3c4.347 = local_unnamed_addr global i32 0
@global_var_1c3c8.348 = local_unnamed_addr global i32 0
@global_var_1c3c9.349 = local_unnamed_addr global i32 0
@global_var_13d2c.351 = constant [6 x i8] c";3=:T\00"
@global_var_1c3d0.352 = local_unnamed_addr global i32 0
@global_var_1c3cc.353 = local_unnamed_addr global i32 0
@global_var_1c3d1.354 = local_unnamed_addr global i32 0
@global_var_13d34.356 = constant [7 x i8] c"1: 1&T\00"
@global_var_1c3d4.357 = local_unnamed_addr global i32 0
@global_var_1c3d8.358 = local_unnamed_addr global i32 0
@global_var_1c3d9.359 = local_unnamed_addr global i32 0
@global_var_13d3c.361 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1c3e1.362 = local_unnamed_addr global i32 0
@global_var_1c3dc.363 = local_unnamed_addr global i32 0
@global_var_1c3e0.364 = local_unnamed_addr global i32 0
@global_var_128dc.367 = constant i32 -476053504
@global_var_1169c.371 = constant i32 -443219956
@global_var_11808.376 = constant i32 -376111092
@global_var_1c2c4.379 = global i32 0
@global_var_1197c.381 = constant i32 -456978431
@global_var_1c3f4.383 = global i32 0
@global_var_1c28c.385 = global i32 0
@global_var_1c1cc.388 = global i32 256
@global_var_1c0d0.389 = global i32* @global_var_1c1cc.388
@global_var_1c2b4.392 = global i32 0
@global_var_1c474.394 = global i32 0
@global_var_13090.395 = constant i32 -382910416
@global_var_11900.396 = constant i32 -509595648
@global_var_11f74.403 = constant i32 -442564520
@global_var_1c1d8.409 = global i32 0
@global_var_11548.411 = constant i32 -481230848
@global_var_1c2a4.413 = global i32 0
@global_var_12ce0.415 = constant i32 -509587456
@global_var_13e98.417 = constant i32 33554944
@global_var_1c210.418 = global i32* @global_var_13e98.417
@global_var_1c1f0.421 = global i32 0
@global_var_1c2a8.425 = local_unnamed_addr global i32 0
@global_var_12694.427 = constant i32 -352321419
@global_var_1c09c.431 = global i32 -1
@global_var_1c2b8.434 = global i32 0
@global_var_1c2bc.436 = local_unnamed_addr global i32 0
@global_var_128c8.437 = constant i32 -390234096
@global_var_13d8c.439 = constant [10 x i8] c"/dev/null\00"
@global_var_1c2c0.441 = global i32 0
@global_var_1c2ac.446 = local_unnamed_addr global i32 0
@global_var_1c2b0.448 = global i32 0
@global_var_118e0.450 = constant i32 -369096958
@global_var_1c208 = external local_unnamed_addr global i32
@global_var_118a0.460 = constant i32 -442564608
@global_var_12b90.462 = constant i32 -335544664
@global_var_12cac.465 = constant i32 -275775369
@global_var_13424.466 = constant i32 -382910352
@global_var_1c2cc.468 = global i32 0
@global_var_1c48c.471 = global i32 0
@global_var_1c490.473 = global i32 0
@global_var_1c0a0.476 = global i32 0
@global_var_1c214.3 = external global i8*
@global_var_1c230.21 = external global i8*
@global_var_1c231.29 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1c0c8.75 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1c2dc.80 = external global i8*
@global_var_1c240.100 = external global i8*
@global_var_1c284.132 = external global i8*
@global_var_1c285.133 = local_unnamed_addr global i8 0
@global_var_1c258.143 = external global i8*
@global_var_1c278.148 = local_unnamed_addr global i8 0
@global_var_1c279.156 = local_unnamed_addr global i8 0
@global_var_1c270.193 = local_unnamed_addr global i8 0
@global_var_1c268.190 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  %v1_80a4 = call i32 @function_13ae4(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1c214.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1c214.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1c0b8.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1c0b8.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1c0b8.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1c0b8.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1c214.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1c0b8.6, { 1, 0 }
  uselistorder i8** @global_var_1c214.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 114860 to i32*), align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 114860

bb2:                                              ; preds = %.thread
  ret i32 114860

; uselistorder directives
  uselistorder i32 114860, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_1297c(i32 ptrtoint (i32* @global_var_dffc.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 80672, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_12344()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8230:
  store i32 %arg1, i32* @r6, align 4
  %v1_823c = urem i32 %arg2, 256
  store i32 %v1_823c, i32* @r7, align 4
  %v0_8248 = call i32 @function_112f8()
  %v7_824c = icmp eq i32 %v0_8248, -1
  %tmp23 = icmp slt i32 %v0_8248, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8230
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8230
  %. = zext i1 %v7_824c to i32
  store i32 %., i32* @r5, align 4
  %v2_8264 = icmp eq i1 %v7_824c, false
  br i1 %v2_8264, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_8248

bb26:                                             ; preds = %bb24
  %v0_826c = call i32 @function_112f8()
  %v7_8270 = icmp eq i32 %v0_826c, -1
  store i32 %v0_826c, i32* @r4, align 4
  br i1 %v7_8270, label %dec_label_pc_82a0, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %bb26
  %v2_827c = icmp eq i32 %v0_826c, 0
  br i1 %v2_827c, label %dec_label_pc_8284, label %dec_label_pc_82a8

dec_label_pc_8284:                                ; preds = %dec_label_pc_827c
  %v0_8284 = load i32, i32* @r6, align 4
  %v1_8288 = call i32 @function_126cc(i32 %v0_8284)
  %v0_828c = call i32 @function_11350()
  %v2_8294 = call i32 @function_113cc(i32 %v0_828c, i32 9)
  %v0_8298 = load i32, i32* @r4, align 4
  %v1_829c = call i32 @function_12638(i32 %v0_8298)
  br label %dec_label_pc_82a0

dec_label_pc_82a0:                                ; preds = %bb26, %dec_label_pc_8284
  %v0_82a0 = load i32, i32* @r5, align 4
  %v1_82a4 = call i32 @function_12638(i32 %v0_82a0)
  br label %dec_label_pc_82a8

dec_label_pc_82a8:                                ; preds = %dec_label_pc_827c, %dec_label_pc_82a0
  %v2_82ac = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_82ac = zext i8 %v2_82ac to i32
  %v2_82b0 = icmp eq i8 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82f4, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82a8
  %v2_82bc = load i32, i32* @global_var_1c234.23, align 4
  %v1_82c0 = inttoptr i32 %v2_82bc to i32*
  %v2_82c0 = load i32, i32* %v1_82c0, align 4
  store i32 %v2_82c0, i32* @ip, align 4
  %v1_82c4 = add i32 %v2_82c0, 4
  %v2_82c4 = inttoptr i32 %v1_82c4 to i8*
  %v3_82c4 = load i8, i8* %v2_82c4, align 1
  %v4_82c4 = zext i8 %v3_82c4 to i32
  %v1_82c8 = load i32, i32* @r7, align 4
  %v9_82c8 = icmp eq i32 %v4_82c4, %v1_82c8
  br i1 %v9_82c8, label %dec_label_pc_82fc, label %dec_label_pc_82e8.preheader

dec_label_pc_82e8.preheader:                      ; preds = %dec_label_pc_82b8
  %v1_82cc = load i32, i32* @r5, align 4
  br label %dec_label_pc_82e8

dec_label_pc_82d8:                                ; preds = %dec_label_pc_82e8
  %v4_82d8 = mul i32 %v1_82e8, 4
  %v5_82d8 = add i32 %v4_82d8, %v2_82bc
  %v6_82d8 = inttoptr i32 %v5_82d8 to i32*
  %v7_82d8 = load i32, i32* %v6_82d8, align 4
  store i32 %v7_82d8, i32* @ip, align 4
  %v1_82dc = add i32 %v7_82d8, 4
  %v2_82dc = inttoptr i32 %v1_82dc to i8*
  %v3_82dc = load i8, i8* %v2_82dc, align 1
  %v4_82dc = zext i8 %v3_82dc to i32
  %v9_82e0 = icmp eq i32 %v4_82dc, %v1_82c8
  br i1 %v9_82e0, label %dec_label_pc_82fc, label %dec_label_pc_82e8

dec_label_pc_82e8:                                ; preds = %dec_label_pc_82e8.preheader, %dec_label_pc_82d8
  %v0_82e8 = phi i32 [ %v1_82cc, %dec_label_pc_82e8.preheader ], [ %v1_82e8, %dec_label_pc_82d8 ]
  %v1_82e8 = add i32 %v0_82e8, 1
  %v9_82ec = icmp eq i32 %v1_82e8, %v3_82ac
  br i1 %v9_82ec, label %dec_label_pc_82f4, label %dec_label_pc_82d8

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82e8, %dec_label_pc_82a8, %dec_label_pc_82fc
  %v1_82f8 = call i32 @function_12638(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %dec_label_pc_82d8, %dec_label_pc_82b8, %dec_label_pc_82f4
  %v0_8310 = phi i32 [ %v2_82c0, %dec_label_pc_82b8 ], [ %v0_8310.pre, %dec_label_pc_82f4 ], [ %v7_82d8, %dec_label_pc_82d8 ]
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f4

; uselistorder directives
  uselistorder i32 %v1_82e8, { 2, 0, 1 }
  uselistorder i32 %v0_826c, { 1, 2, 0 }
  uselistorder i1 %v7_824c, { 1, 0 }
  uselistorder i32 %v0_8248, { 1, 2, 0 }
  uselistorder label %dec_label_pc_82fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82e8, { 1, 0 }
  uselistorder label %dec_label_pc_82a8, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_8320(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8320:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_8320 = load i32, i32* @r4, align 4
  %v6_8320 = load i32, i32* @r5, align 4
  %v9_8320 = load i32, i32* @r6, align 4
  %v12_8320 = load i32, i32* @r7, align 4
  %v15_8320 = load i32, i32* @r8, align 4
  %v18_8320 = load i32, i32* @sb, align 4
  %v21_8320 = load i32, i32* @sl, align 4
  %v27_8320 = load i32, i32* @lr, align 4
  %v7_8324 = icmp eq i32 %arg2, 3
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_8330 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8330, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_8344, label %dec_label_pc_8338

dec_label_pc_8338:                                ; preds = %dec_label_pc_8320
  %v7_8338 = icmp eq i32 %arg2, 4
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = inttoptr i32 %v0_8330 to i32*
  %v2_833c = load i32, i32* %v1_833c, align 4
  store i32 %v2_833c, i32* @sl, align 4
  br i1 %v7_8338, label %dec_label_pc_8344, label %dec_label_pc_834c

dec_label_pc_8344:                                ; preds = %dec_label_pc_8368, %.dec_label_pc_8344_crit_edge, %dec_label_pc_8338, %dec_label_pc_835c, %dec_label_pc_834c, %dec_label_pc_8320
  %v29_8348 = phi i32 [ %v29_8348.pre, %.dec_label_pc_8344_crit_edge ], [ %v0_8330, %dec_label_pc_8368 ], [ %v0_8330, %dec_label_pc_8338 ], [ %v0_8330, %dec_label_pc_835c ], [ %v0_8330, %dec_label_pc_834c ], [ %v0_8330, %dec_label_pc_8320 ]
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  ret i32 %v29_8348

dec_label_pc_834c:                                ; preds = %dec_label_pc_8338
  %v7_834c = icmp eq i32 %arg2, 5
  store i1 %v7_834c, i1* %cpsr_z.global-to-local, align 1
  %v1_8350 = add i32 %v0_8330, 4
  %v2_8350 = inttoptr i32 %v1_8350 to i8*
  %v3_8350 = load i8, i8* %v2_8350, align 1
  %v4_8350 = zext i8 %v3_8350 to i32
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  br i1 %v7_834c, label %dec_label_pc_8344, label %dec_label_pc_835c

dec_label_pc_835c:                                ; preds = %dec_label_pc_834c
  %v1_835c = add i32 %v0_8330, 5
  %v2_835c = inttoptr i32 %v1_835c to i8*
  %v3_835c = load i8, i8* %v2_835c, align 1
  %v4_835c = zext i8 %v3_835c to i32
  store i32 %v4_835c, i32* @r7, align 4
  %v2_8360 = icmp eq i8 %v3_835c, 0
  store i1 %v2_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8360, label %dec_label_pc_8344, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_835c
  %v3_8368 = mul nuw nsw i32 %v4_835c, 4
  store i32 %v3_8368, i32* @sb, align 4
  %v1_836c = add i32 %arg2, -6
  store i32 %v1_836c, i32* @r6, align 4
  %v2_8370 = mul nuw nsw i32 %v4_835c, 5
  store i32 %v2_8370, i32* @r8, align 4
  %v3_8374 = icmp ult i32 %v1_836c, %v2_8370
  %v9_8374 = icmp eq i32 %v1_836c, %v2_8370
  store i1 %v9_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8374, label %dec_label_pc_8344, label %dec_label_pc_837c

dec_label_pc_837c:                                ; preds = %dec_label_pc_8368
  store i32 %v4_835c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8384 = call i32 @function_11e9c(i32 %v4_835c, i32 24)
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v2_8388 = icmp eq i32 %v0_8388, 0
  store i1 %v2_8388, i1* %cpsr_z.global-to-local, align 1
  %v0_8390 = load i32, i32* @r4, align 4
  %v1_8390 = add i32 %v0_8390, 6
  store i32 %v1_8390, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_8388, 1
  br i1 %tmp27, label %dec_label_pc_83e8thread-pre-split, label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_837c
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v1_839c = load i32, i32* @r8, align 4
  %v2_839c = add i32 %v1_839c, %v0_8390
  store i32 %v2_839c, i32* %ip.global-to-local, align 4
  store i32 %v0_8390, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83ac:                                ; preds = %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge, %dec_label_pc_8398
  %v2_83bc = phi i32 [ %v1_83d0, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_8384, %dec_label_pc_8398 ]
  %v1_83b8 = phi i32 [ %v1_83b8.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_839c, %dec_label_pc_8398 ]
  %v0_83b4 = phi i32 [ %v0_83ac.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v0_8390, %dec_label_pc_8398 ]
  %v1_83ac = add i32 %v0_83b4, 10
  %v2_83ac = inttoptr i32 %v1_83ac to i8*
  %v3_83ac = load i8, i8* %v2_83ac, align 1
  %v1_83b0 = add i32 %v0_83b4, 6
  %v2_83b0 = inttoptr i32 %v1_83b0 to i32*
  %v3_83b0 = load i32, i32* %v2_83b0, align 4
  store i32 %v3_83b0, i32* %r2.global-to-local, align 4
  %v1_83b4 = add i32 %v0_83b4, 5
  store i32 %v1_83b4, i32* %r0.global-to-local, align 4
  %v9_83b8 = icmp eq i32 %v1_83b4, %v1_83b8
  store i1 %v9_83b8, i1* %cpsr_z.global-to-local, align 1
  %v3_83bc = add i32 %v2_83bc, 20
  %v4_83bc = inttoptr i32 %v3_83bc to i8*
  store i8 %v3_83ac, i8* %v4_83bc, align 1
  %v0_83c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c0 = add i32 %v1_83c0, 4
  %v3_83c0 = inttoptr i32 %v2_83c0 to i32*
  store i32 %v0_83c0, i32* %v3_83c0, align 4
  %v0_83c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v0_83c4, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r4, align 4
  %v1_83c8 = trunc i32 %v0_83c8 to i8
  %v2_83c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83c8 = inttoptr i32 %v2_83c8 to i8*
  store i8 %v1_83c8, i8* %v3_83c8, align 1
  %v0_83cc = load i32, i32* @lr, align 4
  %v1_83cc = trunc i32 %v0_83cc to i8
  %v2_83cc = load i32, i32* %r1.global-to-local, align 4
  %v3_83cc = add i32 %v2_83cc, 1
  %v4_83cc = inttoptr i32 %v3_83cc to i8*
  store i8 %v1_83cc, i8* %v4_83cc, align 1
  %v0_83d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_83d0 = add i32 %v0_83d0, 24
  store i32 %v1_83d0, i32* %r1.global-to-local, align 4
  %v0_83d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83d4, label %dec_label_pc_83d8, label %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge

dec_label_pc_83ac.dec_label_pc_83ac_crit_edge:    ; preds = %dec_label_pc_83ac
  %v0_83ac.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_83b8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83d8:                                ; preds = %dec_label_pc_83ac
  %v0_83d8 = load i32, i32* @sb, align 4
  %v1_83d8 = load i32, i32* @r7, align 4
  %v1_83dc = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83d8, %v0_83d8
  %v2_83dc = sub i32 %v1_83dc, %sum
  %v0_83e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_83e0 = add i32 %v0_83e0, 6
  store i32 %v1_83e0, i32* %fp.global-to-local, align 4
  %v1_83e4 = add i32 %v2_83dc, -6
  store i32 %v1_83e4, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8thread-pre-split:                ; preds = %dec_label_pc_837c
  %v0_83e8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8:                                ; preds = %dec_label_pc_83e8thread-pre-split, %dec_label_pc_83d8
  %v0_83f4 = phi i32 [ %v1_8390, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e0, %dec_label_pc_83d8 ]
  %v1_83ec = phi i32 [ %v0_83e8.pr, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e4, %dec_label_pc_83d8 ]
  %v2_83e8 = icmp eq i32 %v1_83ec, 0
  store i1 %v2_83e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e8, label %dec_label_pc_8520, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e8
  %v1_83f4 = inttoptr i32 %v0_83f4 to i8*
  %v2_83f4 = load i8, i8* %v1_83f4, align 1
  %v3_83f4 = zext i8 %v2_83f4 to i32
  store i32 %v3_83f4, i32* @sb, align 4
  %v2_83f8 = icmp eq i8 %v2_83f4, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84d8, label %dec_label_pc_8408

dec_label_pc_8408:                                ; preds = %dec_label_pc_83f4
  store i32 %v3_83f4, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_8410 = call i32 @function_11e9c(i32 %v3_83f4, i32 8)
  store i32 %v2_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @sb, align 4
  %v2_8414 = icmp eq i32 %v0_8414, 0
  store i1 %v2_8414, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_8414, 1
  br i1 %tmp28, label %dec_label_pc_84d8, label %dec_label_pc_8424

dec_label_pc_8424:                                ; preds = %dec_label_pc_8408
  %v0_8424 = load i32, i32* @r6, align 4
  %v1_8424 = add i32 %v0_8424, -1
  store i32 %v1_8424, i32* %r2.global-to-local, align 4
  %v7_8424 = icmp eq i32 %v0_8424, 1
  store i1 %v7_8424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8424, label %dec_label_pc_8520, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8424
  %v0_842c = load i32, i32* %fp.global-to-local, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v1_8430 = add i32 %v0_8424, -2
  store i32 %v1_8430, i32* %r2.global-to-local, align 4
  %v7_8430 = icmp eq i32 %v1_8424, 1
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_8410, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* %fp.global-to-local, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r0.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_8520, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r0.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_8520, label %dec_label_pc_8454

dec_label_pc_8454:                                ; preds = %dec_label_pc_8440
  store i32 %v2_8410, i32* @r5, align 4
  %v1_845c = add i32 %v2_8410, 8
  %v1_8460 = add i32 %v0_8438, 3
  store i32 %v1_8460, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_84a4

dec_label_pc_8470:                                ; preds = %dec_label_pc_84a4
  %v0_8470 = load i32, i32* @r8, align 4
  %v1_8470 = load i32, i32* @r4, align 4
  %v2_8470 = sub i32 %v0_8470, %v1_8470
  store i32 %v2_8470, i32* %r2.global-to-local, align 4
  %v9_8470 = icmp eq i32 %v0_8470, %v1_8470
  store i1 %v9_8470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8470, label %dec_label_pc_8520, label %dec_label_pc_8478

dec_label_pc_8478:                                ; preds = %dec_label_pc_8470
  %v1_8478 = load i32, i32* @r6, align 4
  %v2_8478 = add i32 %v1_8478, %v1_8470
  %v3_8478 = inttoptr i32 %v2_8478 to i8*
  %v4_8478 = load i8, i8* %v3_8478, align 1
  store i32 %v2_8478, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v2_8470, -1
  store i32 %v1_8480, i32* %r2.global-to-local, align 4
  %v7_8480 = icmp eq i32 %v2_8470, 1
  store i1 %v7_8480, i1* %cpsr_z.global-to-local, align 1
  %v3_8484 = add i32 %v2_8484, 4
  %v4_8484 = inttoptr i32 %v3_8484 to i8*
  store i8 %v4_8478, i8* %v4_8484, align 1
  %v0_8488 = load i32, i32* %r0.global-to-local, align 4
  %v0_848c = load i32, i32* %r2.global-to-local, align 4
  %v1_848c = add i32 %v0_848c, -1
  store i32 %v1_848c, i32* @r8, align 4
  %v1_8490 = add i32 %v0_8488, 2
  store i32 %v1_8490, i32* @r6, align 4
  %v0_8494 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8494, label %dec_label_pc_8520, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_8478
  %v1_8488 = add i32 %v0_8488, 1
  %v2_8498 = inttoptr i32 %v1_8488 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* @r4, align 4
  %v2_849c = sub i32 %v1_848c, %v4_8498
  %tmp30 = sub i32 0, %v2_849c
  %v6_849c = and i32 %v1_848c, %tmp30
  %v7_849c = icmp slt i32 %v6_849c, 0
  %v8_849c = icmp slt i32 %v2_849c, 0
  %v9_849c = icmp eq i32 %v1_848c, %v4_8498
  store i1 %v9_849c, i1* %cpsr_z.global-to-local, align 1
  %v2_84a0 = xor i1 %v8_849c, %v7_849c
  br i1 %v2_84a0, label %dec_label_pc_8520, label %dec_label_pc_84a4

dec_label_pc_84a4:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8454
  %v0_84a8 = phi i32 [ %v4_8440, %dec_label_pc_8454 ], [ %v4_8498, %dec_label_pc_8498 ]
  %v2_8484 = phi i32 [ %v1_845c, %dec_label_pc_8454 ], [ %v1_84c8, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a8 = add nuw nsw i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %r0.global-to-local, align 4
  %v2_84ac = call i32 @function_11e9c(i32 %v1_84a8, i32 1)
  store i32 %v2_84ac, i32* %r0.global-to-local, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v1_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = inttoptr i32 %v1_84b4 to i32*
  store i32 %v2_84ac, i32* %v2_84b4, align 4
  %v0_84b8 = load i32, i32* @r4, align 4
  store i32 %v0_84b8, i32* %r2.global-to-local, align 4
  %v3_84bc = call i32 @function_10a44(i32 %v2_84ac, i32 %v0_84b0, i32 %v0_84b8)
  store i32 %v3_84bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8484, i32* @r5, align 4
  %v0_84c4 = load i32, i32* %fp.global-to-local, align 4
  %v1_84c4 = add i32 %v0_84c4, 1
  store i32 %v1_84c4, i32* %fp.global-to-local, align 4
  %v1_84c8 = add i32 %v2_8484, 8
  store i32 %v1_84c8, i32* %ip.global-to-local, align 4
  %v1_84cc = load i32, i32* @sb, align 4
  %v9_84cc = icmp eq i32 %v1_84c4, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8470

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84a4, %dec_label_pc_8408, %dec_label_pc_83f4
  %stack_var_-48.1 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v0_8414, %dec_label_pc_8408 ], [ %v0_8414, %dec_label_pc_84a4 ]
  %stack_var_-52.2 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v2_8410, %dec_label_pc_8408 ], [ %v2_8410, %dec_label_pc_84a4 ]
  %v0_84d8 = call i32 @function_118a0()
  %v0_84dc = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_84e8 = mul i32 %v0_84dc, 16777216
  %v1_84dc = mul i32 %v0_84dc, 256
  %v4_84ec = and i32 %v1_84dc, 16711680
  %v5_84ec = or i32 %v4_84ec, %v3_84e8
  store i32 %v5_84ec, i32* %r1.global-to-local, align 4
  %v1_84e4 = udiv i32 %v0_84dc, 256
  %v3_84f0 = and i32 %v1_84e4, 65280
  store i32 %v3_84f0, i32* %r2.global-to-local, align 4
  %v2_84f8 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84f8, align 4
  %v0_84fc = load i32, i32* %r2.global-to-local, align 4
  %v1_84fc = load i32, i32* @sl, align 4
  %v4_84fc = udiv i32 %v1_84fc, 16777216
  %v5_84fc = or i32 %v4_84fc, %v0_84fc
  %v0_8500 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_8508 = load i32, i32* %r1.global-to-local, align 4
  %v2_8508 = or i32 %v5_84fc, %v1_8508
  store i32 %v2_8508, i32* %r0.global-to-local, align 4
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  %v0_8514 = load i32, i32* @r7, align 4
  store i32 %v0_8514, i32* %r2.global-to-local, align 4
  %v6_851c = trunc i32 %v0_8500 to i8
  %v7_851c = call i32 @function_8230(i32 %v2_8508, i32 %v4_8350, i32 %v0_8514, i32 %v2_8384, i8 %v6_851c, i32 %stack_var_-52.2)
  store i32 %v7_851c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8478, %dec_label_pc_8470, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8424, %dec_label_pc_83e8, %dec_label_pc_84d8
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83e8 ], [ %stack_var_-52.2, %dec_label_pc_84d8 ], [ %v2_8410, %dec_label_pc_8424 ], [ %v2_8410, %dec_label_pc_842c ], [ %v2_8410, %dec_label_pc_8440 ], [ %v2_8410, %dec_label_pc_8470 ], [ %v2_8410, %dec_label_pc_8478 ], [ %v2_8410, %dec_label_pc_8498 ]
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v2_8384, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8524, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_8520
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_8520, %bb
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_11ef4.25 to i32))
  %v2_8534 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8534, label %.dec_label_pc_8344_crit_edge, label %dec_label_pc_853c

.dec_label_pc_8344_crit_edge:                     ; preds = %bb31
  %v29_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8344

dec_label_pc_853c:                                ; preds = %bb31
  %v0_853c = load i32, i32* @sb, align 4
  %v2_853c = icmp eq i32 %v0_853c, 0
  store i1 %v2_853c, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_853c, 1
  br i1 %tmp32, label %dec_label_pc_8564, label %dec_label_pc_8544

dec_label_pc_8544:                                ; preds = %dec_label_pc_853c
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %dec_label_pc_8548, %dec_label_pc_8544
  %v0_8554 = phi i32 [ %v1_8554, %dec_label_pc_8548 ], [ 0, %dec_label_pc_8544 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_854c = mul i32 %v0_8554, 8
  %v5_854c = add i32 %v4_854c, %stack_var_-52.3
  %v6_854c = inttoptr i32 %v5_854c to i32*
  %v7_854c = load i32, i32* %v6_854c, align 4
  store i32 %v7_854c, i32* %r0.global-to-local, align 4
  %v2_8550 = icmp eq i32 %v7_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  %v1_8554 = add i32 %v0_8554, 1
  %v1_8558 = xor i1 %v2_8550, true
  call void @__pseudo_cond_branch(i1 %v1_8558, i32 ptrtoint (i32* @global_var_11ef4.25 to i32))
  %v0_855c = load i32, i32* @sb, align 4
  %v9_855c = icmp eq i32 %v0_855c, %v1_8554
  store i1 %v9_855c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_855c, label %dec_label_pc_8564, label %dec_label_pc_8548

dec_label_pc_8564:                                ; preds = %dec_label_pc_8548, %dec_label_pc_853c
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_8320, i32* @r4, align 4
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v15_8320, i32* @r8, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  store i32 %v27_8320, i32* @lr, align 4
  %v0_8570 = call i32 @function_11ef4()
  store i32 %v0_8570, i32* %r0.global-to-local, align 4
  ret i32 %v0_8570

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_84dc, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_84c8, { 1, 0 }
  uselistorder i32 %v2_8484, { 2, 1, 0 }
  uselistorder i32 %v2_849c, { 1, 0 }
  uselistorder i32 %v4_8498, { 0, 2, 1, 3 }
  uselistorder i32 %v1_848c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8488, { 1, 0 }
  uselistorder i32 %v0_8424, { 0, 2, 1 }
  uselistorder i32 %v0_8414, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8410, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_83f4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_83d0, { 1, 0 }
  uselistorder i32 %v0_83b4, { 0, 2, 1 }
  uselistorder i32 %v0_8390, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8384, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_8370, { 2, 1, 0 }
  uselistorder i32 %v4_835c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_8350, { 1, 0, 2 }
  uselistorder i32 %v0_8330, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 20, 2, 21, 3, 22, 4, 7, 11, 8, 5, 6, 9, 10, 17, 12, 14, 13, 15, 16, 19, 18, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 5, 4, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_8520, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8344, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_8574(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8574:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8574 = urem i32 %arg1, 256
  %v2_8578 = icmp eq i32 %v1_8574, 0
  %v3_857c = load i32, i32* @r4, align 4
  br i1 %v2_8578, label %dec_label_pc_85c4, label %dec_label_pc_8588

dec_label_pc_8588:                                ; preds = %dec_label_pc_8574
  %v0_8588 = load i32, i32* %r1.global-to-local, align 4
  %v1_8588 = add i32 %v0_8588, 4
  %v2_8588 = inttoptr i32 %v1_8588 to i8*
  %v3_8588 = load i8, i8* %v2_8588, align 1
  %v4_8588 = zext i8 %v3_8588 to i32
  %v1_858c = urem i32 %arg3, 256
  %v9_8590 = icmp eq i32 %v4_8588, %v1_858c
  br i1 %v9_8590, label %dec_label_pc_85cc, label %dec_label_pc_85b4.preheader

dec_label_pc_85b4.preheader:                      ; preds = %dec_label_pc_8588
  br label %dec_label_pc_85b4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_85b4
  %v1_85a4 = add i32 %v0_85ac.in, 12
  %v2_85a4 = inttoptr i32 %v1_85a4 to i8*
  %v3_85a4 = load i8, i8* %v2_85a4, align 1
  %v4_85a4 = zext i8 %v3_85a4 to i32
  %v9_85a8 = icmp eq i32 %v1_858c, %v4_85a4
  br i1 %v9_85a8, label %dec_label_pc_85cc, label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %dec_label_pc_85b4.preheader, %dec_label_pc_85a4
  %v0_85ac.in = phi i32 [ %v0_8588, %dec_label_pc_85b4.preheader ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v0_85b4 = phi i32 [ 0, %dec_label_pc_85b4.preheader ], [ %v1_85b4, %dec_label_pc_85a4 ]
  %v0_85ac = add i32 %v0_85ac.in, 8
  %v1_85b4 = add i32 %v0_85b4, 1
  %v9_85b8 = icmp eq i32 %v1_8574, %v1_85b4
  store i32 %v0_85ac, i32* %r1.global-to-local, align 4
  br i1 %v9_85b8, label %dec_label_pc_85c4, label %dec_label_pc_85a4

dec_label_pc_85c4:                                ; preds = %dec_label_pc_85b4, %dec_label_pc_85cc, %dec_label_pc_8574
  store i32 %v3_857c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_85cc:                                ; preds = %dec_label_pc_85a4, %dec_label_pc_8588
  %v0_85cc = phi i32 [ %v0_8588, %dec_label_pc_8588 ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v1_85cc = inttoptr i32 %v0_85cc to i32*
  %v2_85cc = load i32, i32* %v1_85cc, align 4
  store i32 %v2_85cc, i32* @r0, align 4
  %v2_85d0 = icmp eq i32 %v2_85cc, 0
  br i1 %v2_85d0, label %dec_label_pc_85c4, label %dec_label_pc_85d8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85cc
  store i32 %v3_857c, i32* @r4, align 4
  %v1_85dc = call i32 @function_119bc(i32 %v2_85cc)
  ret i32 %v1_85dc

; uselistorder directives
  uselistorder i32 %v1_85b4, { 1, 0 }
  uselistorder i32 %v0_85ac, { 1, 0, 2 }
  uselistorder i32 %v0_85ac.in, { 1, 0 }
  uselistorder i32 %v1_858c, { 1, 0 }
  uselistorder i32 %v0_8588, { 1, 0, 2 }
  uselistorder i32 %v3_857c, { 1, 0 }
  uselistorder i32 %v1_8574, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_85c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_85b4, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_85e0 = urem i32 %arg1, 256
  %v2_85e4 = icmp eq i32 %v1_85e0, 0
  %v3_85e8 = load i32, i32* @r4, align 4
  %v6_85e8 = load i32, i32* @lr, align 4
  br i1 %v2_85e4, label %dec_label_pc_8630, label %dec_label_pc_85f4

dec_label_pc_85f4:                                ; preds = %dec_label_pc_85e0
  %v0_85f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_85f4 = add i32 %v0_85f4, 4
  %v2_85f4 = inttoptr i32 %v1_85f4 to i8*
  %v3_85f4 = load i8, i8* %v2_85f4, align 1
  %v4_85f4 = zext i8 %v3_85f4 to i32
  %v1_85f8 = urem i32 %arg3, 256
  %v9_85fc = icmp eq i32 %v4_85f4, %v1_85f8
  br i1 %v9_85fc, label %dec_label_pc_8638, label %dec_label_pc_8620.preheader

dec_label_pc_8620.preheader:                      ; preds = %dec_label_pc_85f4
  br label %dec_label_pc_8620

dec_label_pc_8610:                                ; preds = %dec_label_pc_8620
  %v1_8610 = add i32 %v0_8618.in, 12
  %v2_8610 = inttoptr i32 %v1_8610 to i8*
  %v3_8610 = load i8, i8* %v2_8610, align 1
  %v4_8610 = zext i8 %v3_8610 to i32
  %v9_8614 = icmp eq i32 %v1_85f8, %v4_8610
  br i1 %v9_8614, label %dec_label_pc_8638, label %dec_label_pc_8620

dec_label_pc_8620:                                ; preds = %dec_label_pc_8620.preheader, %dec_label_pc_8610
  %v0_8618.in = phi i32 [ %v0_85f4, %dec_label_pc_8620.preheader ], [ %v0_8618, %dec_label_pc_8610 ]
  %v0_8620 = phi i32 [ 0, %dec_label_pc_8620.preheader ], [ %v1_8620, %dec_label_pc_8610 ]
  %v0_8618 = add i32 %v0_8618.in, 8
  %v1_8620 = add i32 %v0_8620, 1
  store i32 %v1_8620, i32* @lr, align 4
  %v9_8624 = icmp eq i32 %v1_85e0, %v1_8620
  store i32 %v0_8618, i32* %r1.global-to-local, align 4
  br i1 %v9_8624, label %dec_label_pc_8630, label %dec_label_pc_8610

dec_label_pc_8630:                                ; preds = %dec_label_pc_8620, %dec_label_pc_8638, %dec_label_pc_85e0
  store i32 %v3_85e8, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8638:                                ; preds = %dec_label_pc_8610, %dec_label_pc_85f4
  %v0_8638 = phi i32 [ %v0_85f4, %dec_label_pc_85f4 ], [ %v0_8618, %dec_label_pc_8610 ]
  %v1_8638 = inttoptr i32 %v0_8638 to i32*
  %v2_8638 = load i32, i32* %v1_8638, align 4
  %v2_863c = icmp eq i32 %v2_8638, 0
  br i1 %v2_863c, label %dec_label_pc_8630, label %dec_label_pc_8644

dec_label_pc_8644:                                ; preds = %dec_label_pc_8638
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_85e8, i32* @r4, align 4
  store i32 %v6_85e8, i32* @lr, align 4
  %v2_864c = inttoptr i32 %v2_8638 to i8*
  %v3_864c = call i32 @function_10af4(i8* %v2_864c, i32 10)
  ret i32 %v3_864c

; uselistorder directives
  uselistorder i32 %v1_8620, { 1, 2, 0 }
  uselistorder i32 %v0_8618, { 1, 0, 2 }
  uselistorder i32 %v0_8618.in, { 1, 0 }
  uselistorder i32 %v1_85f8, { 1, 0 }
  uselistorder i32 %v0_85f4, { 1, 0, 2 }
  uselistorder i32 %v3_85e8, { 1, 0 }
  uselistorder i32 %v1_85e0, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8620, { 1, 0 }
}

define i32 @function_8650(i32 %arg1) local_unnamed_addr {
dec_label_pc_8650:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8650 = load i32, i32* @r4, align 4
  store i32 %v3_8650, i32* %stack_var_-24, align 4
  %v6_8650 = load i32, i32* @r5, align 4
  %v9_8650 = load i32, i32* @r6, align 4
  %v12_8650 = load i32, i32* @r7, align 4
  %v15_8650 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_865c = call i32 @function_11e9c(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1c230.21 to i32), i32* @r4, align 4
  %v2_8664 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8664 = zext i8 %v2_8664 to i32
  store i32 ptrtoint (i32* @global_var_1c234.23 to i32), i32* @r6, align 4
  store i32 36768, i32* %r2.global-to-local, align 4
  store i32 %v2_865c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8678 = mul nuw nsw i32 %v3_8664, 4
  store i32 %v3_8678, i32* %r1.global-to-local, align 4
  %v2_867c = load i32, i32* @global_var_1c234.23, align 4
  %v2_8680 = inttoptr i32 %v2_865c to i32*
  store i32 36768, i32* %v2_8680, align 4
  %v3_8684 = load i32, i32* @r5, align 4
  %v4_8684 = add i32 %v3_8684, 4
  %v5_8684 = inttoptr i32 %v4_8684 to i8*
  store i8 0, i8* %v5_8684, align 1
  %v0_8688 = load i32, i32* %r1.global-to-local, align 4
  %v1_8688 = add i32 %v0_8688, 4
  store i32 %v1_8688, i32* %r1.global-to-local, align 4
  %v5_868c = call i32 @function_11fe4(i32 %v2_867c, i32 %v1_8688, i32 36768, i32 0)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 %v3_8690, i32* %r3.global-to-local, align 4
  store i32 %v5_868c, i32* %ip.global-to-local, align 4
  %v0_8698 = load i32, i32* @r5, align 4
  %v5_8698 = mul nuw nsw i32 %v3_8690, 4
  %v6_8698 = add i32 %v5_8698, %v5_868c
  %v7_8698 = inttoptr i32 %v6_8698 to i32*
  store i32 %v0_8698, i32* %v7_8698, align 4
  store i32 ptrtoint (i8* @global_var_1c231.29 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_86a8 = load i32, i32* @r4, align 4
  %v4_86a8 = inttoptr i32 %v3_86a8 to i8*
  store i8 ptrtoint (i8* @global_var_1c231.29 to i8), i8* %v4_86a8, align 1
  %v0_86ac = load i32, i32* %ip.global-to-local, align 4
  %v1_86ac = load i32, i32* @r6, align 4
  %v2_86ac = inttoptr i32 %v1_86ac to i32*
  store i32 %v0_86ac, i32* %v2_86ac, align 4
  %v2_86b0 = call i32 @function_11e9c(i32 1, i32 8)
  %v2_86b4 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_86b4 = zext i8 %v2_86b4 to i32
  store i32 ptrtoint (i32* @global_var_a4c4.31 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_86b0, i32* @r5, align 4
  %v3_86c4 = mul nuw nsw i32 %v3_86b4, 4
  store i32 %v3_86c4, i32* %r1.global-to-local, align 4
  %v2_86c8 = load i32, i32* @global_var_1c234.23, align 4
  %v2_86cc = inttoptr i32 %v2_86b0 to i32*
  store i32 ptrtoint (i32* @global_var_a4c4.31 to i32), i32* %v2_86cc, align 4
  %v0_86d0 = load i32, i32* @r8, align 4
  %v1_86d0 = trunc i32 %v0_86d0 to i8
  %v2_86d0 = load i32, i32* @r5, align 4
  %v3_86d0 = add i32 %v2_86d0, 4
  %v4_86d0 = inttoptr i32 %v3_86d0 to i8*
  store i8 %v1_86d0, i8* %v4_86d0, align 1
  %v0_86d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_86d4 = add i32 %v0_86d4, 4
  store i32 %v1_86d4, i32* %r1.global-to-local, align 4
  %v5_86d8 = call i32 @function_11fe4(i32 %v2_86c8, i32 %v1_86d4, i32 sext (i8 ptrtoint (i8* @global_var_1c231.29 to i8) to i32), i32 ptrtoint (i32* @global_var_a4c4.31 to i32))
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 %v3_86dc, i32* %r3.global-to-local, align 4
  store i32 %v5_86d8, i32* %ip.global-to-local, align 4
  %v0_86e4 = load i32, i32* @r5, align 4
  %v5_86e4 = mul nuw nsw i32 %v3_86dc, 4
  %v6_86e4 = add i32 %v5_86e4, %v5_86d8
  %v7_86e4 = inttoptr i32 %v6_86e4 to i32*
  store i32 %v0_86e4, i32* %v7_86e4, align 4
  %v0_86e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e8 = load i32, i32* @r8, align 4
  %v2_86e8 = add i32 %v1_86e8, %v0_86e8
  store i32 %v2_86e8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_86f4 = load i32, i32* @r6, align 4
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  store i32 %v0_86f4, i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r4, align 4
  %v3_86f8 = inttoptr i32 %v2_86f8 to i8*
  store i8 %v1_86f8, i8* %v3_86f8, align 1
  %v2_86fc = call i32 @function_11e9c(i32 %v1_86e8, i32 8)
  %v2_8700 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8700 = zext i8 %v2_8700 to i32
  store i32 ptrtoint (i32* @global_var_a988.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86fc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8710 = mul nuw nsw i32 %v3_8700, 4
  store i32 %v3_8710, i32* %r1.global-to-local, align 4
  %v2_8714 = load i32, i32* @global_var_1c234.23, align 4
  %v2_8718 = inttoptr i32 %v2_86fc to i32*
  store i32 ptrtoint (i32* @global_var_a988.33 to i32), i32* %v2_8718, align 4
  %v3_871c = load i32, i32* @r5, align 4
  %v4_871c = add i32 %v3_871c, 4
  %v5_871c = inttoptr i32 %v4_871c to i8*
  store i8 2, i8* %v5_871c, align 1
  %v0_8720 = load i32, i32* %r1.global-to-local, align 4
  %v1_8720 = add i32 %v0_8720, 4
  store i32 %v1_8720, i32* %r1.global-to-local, align 4
  %v5_8724 = call i32 @function_11fe4(i32 %v2_8714, i32 %v1_8720, i32 ptrtoint (i32* @global_var_a988.33 to i32), i32 2)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 %v3_8728, i32* %r3.global-to-local, align 4
  store i32 %v5_8724, i32* %ip.global-to-local, align 4
  %v1_8730 = load i32, i32* @r8, align 4
  %v2_8730 = add i32 %v1_8730, %v3_8728
  %v3_8730 = trunc i32 %v2_8730 to i8
  store i32 %v2_8730, i32* %r2.global-to-local, align 4
  %v0_8734 = load i32, i32* @r5, align 4
  %v5_8734 = mul nuw nsw i32 %v3_8728, 4
  %v6_8734 = add i32 %v5_8734, %v5_8724
  %v7_8734 = inttoptr i32 %v6_8734 to i32*
  store i32 %v0_8734, i32* %v7_8734, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_873c = load i32, i32* @r8, align 4
  %v3_8740 = load i32, i32* @r4, align 4
  %v4_8740 = inttoptr i32 %v3_8740 to i8*
  store i8 %v3_8730, i8* %v4_8740, align 1
  %v0_8744 = load i32, i32* %ip.global-to-local, align 4
  %v1_8744 = load i32, i32* @r6, align 4
  %v2_8744 = inttoptr i32 %v1_8744 to i32*
  store i32 %v0_8744, i32* %v2_8744, align 4
  %v2_8748 = call i32 @function_11e9c(i32 %v0_873c, i32 8)
  %v2_874c = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_874c = zext i8 %v2_874c to i32
  store i32 ptrtoint (i32* @global_var_89d8.35 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8748, i32* @r5, align 4
  %v3_875c = mul nuw nsw i32 %v3_874c, 4
  store i32 %v3_875c, i32* %r1.global-to-local, align 4
  %v2_8760 = load i32, i32* @global_var_1c234.23, align 4
  %v2_8764 = inttoptr i32 %v2_8748 to i32*
  store i32 ptrtoint (i32* @global_var_89d8.35 to i32), i32* %v2_8764, align 4
  %v0_8768 = load i32, i32* @r7, align 4
  %v1_8768 = trunc i32 %v0_8768 to i8
  %v2_8768 = load i32, i32* @r5, align 4
  %v3_8768 = add i32 %v2_8768, 4
  %v4_8768 = inttoptr i32 %v3_8768 to i8*
  store i8 %v1_8768, i8* %v4_8768, align 1
  %v0_876c = load i32, i32* %r1.global-to-local, align 4
  %v1_876c = add i32 %v0_876c, 4
  store i32 %v1_876c, i32* %r1.global-to-local, align 4
  %v5_8770 = call i32 @function_11fe4(i32 %v2_8760, i32 %v1_876c, i32 %v2_8730, i32 ptrtoint (i32* @global_var_89d8.35 to i32))
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 %v3_8774, i32* %r3.global-to-local, align 4
  store i32 %v5_8770, i32* %ip.global-to-local, align 4
  %v0_877c = load i32, i32* @r5, align 4
  %v5_877c = mul nuw nsw i32 %v3_8774, 4
  %v6_877c = add i32 %v5_877c, %v5_8770
  %v7_877c = inttoptr i32 %v6_877c to i32*
  store i32 %v0_877c, i32* %v7_877c, align 4
  %v0_8780 = load i32, i32* %r3.global-to-local, align 4
  %v1_8780 = load i32, i32* @r8, align 4
  %v2_8780 = add i32 %v1_8780, %v0_8780
  store i32 %v2_8780, i32* %r2.global-to-local, align 4
  %v0_8784 = load i32, i32* @r7, align 4
  store i32 %v0_8784, i32* %r1.global-to-local, align 4
  %v0_878c = load i32, i32* %ip.global-to-local, align 4
  %v1_878c = load i32, i32* @r6, align 4
  %v2_878c = inttoptr i32 %v1_878c to i32*
  store i32 %v0_878c, i32* %v2_878c, align 4
  %v0_8790 = load i32, i32* %r2.global-to-local, align 4
  %v1_8790 = trunc i32 %v0_8790 to i8
  %v2_8790 = load i32, i32* @r4, align 4
  %v3_8790 = inttoptr i32 %v2_8790 to i8*
  store i8 %v1_8790, i8* %v3_8790, align 1
  %v2_8794 = call i32 @function_11e9c(i32 %v1_8780, i32 %v0_8784)
  %v2_8798 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8798 = zext i8 %v2_8798 to i32
  store i32 ptrtoint (i32* @global_var_c96c.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8794, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_87a8 = mul nuw nsw i32 %v3_8798, 4
  store i32 %v3_87a8, i32* %r1.global-to-local, align 4
  %v2_87ac = load i32, i32* @global_var_1c234.23, align 4
  %v2_87b0 = inttoptr i32 %v2_8794 to i32*
  store i32 ptrtoint (i32* @global_var_c96c.37 to i32), i32* %v2_87b0, align 4
  %v3_87b4 = load i32, i32* @r5, align 4
  %v4_87b4 = add i32 %v3_87b4, 4
  %v5_87b4 = inttoptr i32 %v4_87b4 to i8*
  store i8 3, i8* %v5_87b4, align 1
  %v0_87b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87b8 = add i32 %v0_87b8, 4
  store i32 %v1_87b8, i32* %r1.global-to-local, align 4
  %v5_87bc = call i32 @function_11fe4(i32 %v2_87ac, i32 %v1_87b8, i32 ptrtoint (i32* @global_var_c96c.37 to i32), i32 3)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 %v3_87c0, i32* %r3.global-to-local, align 4
  store i32 %v5_87bc, i32* %ip.global-to-local, align 4
  %v0_87c8 = load i32, i32* @r5, align 4
  %v5_87c8 = mul nuw nsw i32 %v3_87c0, 4
  %v6_87c8 = add i32 %v5_87c8, %v5_87bc
  %v7_87c8 = inttoptr i32 %v6_87c8 to i32*
  store i32 %v0_87c8, i32* %v7_87c8, align 4
  %v0_87cc = load i32, i32* %r3.global-to-local, align 4
  %v1_87cc = load i32, i32* @r8, align 4
  %v2_87cc = add i32 %v1_87cc, %v0_87cc
  store i32 %v2_87cc, i32* %r2.global-to-local, align 4
  %v0_87d0 = load i32, i32* @r7, align 4
  store i32 %v0_87d0, i32* %r1.global-to-local, align 4
  %v0_87d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_87d8 = load i32, i32* @r6, align 4
  %v2_87d8 = inttoptr i32 %v1_87d8 to i32*
  store i32 %v0_87d8, i32* %v2_87d8, align 4
  %v0_87dc = load i32, i32* %r2.global-to-local, align 4
  %v1_87dc = trunc i32 %v0_87dc to i8
  %v2_87dc = load i32, i32* @r4, align 4
  %v3_87dc = inttoptr i32 %v2_87dc to i8*
  store i8 %v1_87dc, i8* %v3_87dc, align 1
  %v2_87e0 = call i32 @function_11e9c(i32 %v1_87cc, i32 %v0_87d0)
  %v2_87e4 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_87e4 = zext i8 %v2_87e4 to i32
  store i32 ptrtoint (i32* @global_var_c1f8.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87e0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_87f4 = mul nuw nsw i32 %v3_87e4, 4
  store i32 %v3_87f4, i32* %r1.global-to-local, align 4
  %v2_87f8 = load i32, i32* @global_var_1c234.23, align 4
  %v2_87fc = inttoptr i32 %v2_87e0 to i32*
  store i32 ptrtoint (i32* @global_var_c1f8.39 to i32), i32* %v2_87fc, align 4
  %v3_8800 = load i32, i32* @r5, align 4
  %v4_8800 = add i32 %v3_8800, 4
  %v5_8800 = inttoptr i32 %v4_8800 to i8*
  store i8 4, i8* %v5_8800, align 1
  %v0_8804 = load i32, i32* %r1.global-to-local, align 4
  %v1_8804 = add i32 %v0_8804, 4
  store i32 %v1_8804, i32* %r1.global-to-local, align 4
  %v5_8808 = call i32 @function_11fe4(i32 %v2_87f8, i32 %v1_8804, i32 ptrtoint (i32* @global_var_c1f8.39 to i32), i32 4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 %v3_880c, i32* %r3.global-to-local, align 4
  store i32 %v5_8808, i32* %ip.global-to-local, align 4
  %v0_8814 = load i32, i32* @r5, align 4
  %v5_8814 = mul nuw nsw i32 %v3_880c, 4
  %v6_8814 = add i32 %v5_8814, %v5_8808
  %v7_8814 = inttoptr i32 %v6_8814 to i32*
  store i32 %v0_8814, i32* %v7_8814, align 4
  %v0_8818 = load i32, i32* %r3.global-to-local, align 4
  %v1_8818 = load i32, i32* @r8, align 4
  %v2_8818 = add i32 %v1_8818, %v0_8818
  store i32 %v2_8818, i32* %r2.global-to-local, align 4
  %v0_881c = load i32, i32* @r7, align 4
  store i32 %v0_881c, i32* %r1.global-to-local, align 4
  %v0_8824 = load i32, i32* %ip.global-to-local, align 4
  %v1_8824 = load i32, i32* @r6, align 4
  %v2_8824 = inttoptr i32 %v1_8824 to i32*
  store i32 %v0_8824, i32* %v2_8824, align 4
  %v0_8828 = load i32, i32* %r2.global-to-local, align 4
  %v1_8828 = trunc i32 %v0_8828 to i8
  %v2_8828 = load i32, i32* @r4, align 4
  %v3_8828 = inttoptr i32 %v2_8828 to i8*
  store i8 %v1_8828, i8* %v3_8828, align 1
  %v2_882c = call i32 @function_11e9c(i32 %v1_8818, i32 %v0_881c)
  %v2_8830 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8830 = zext i8 %v2_8830 to i32
  store i32 ptrtoint (i32* @global_var_b998.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_882c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_8840 = mul nuw nsw i32 %v3_8830, 4
  store i32 %v3_8840, i32* %r1.global-to-local, align 4
  %v2_8844 = load i32, i32* @global_var_1c234.23, align 4
  %v2_8848 = inttoptr i32 %v2_882c to i32*
  store i32 ptrtoint (i32* @global_var_b998.41 to i32), i32* %v2_8848, align 4
  %v3_884c = load i32, i32* @r5, align 4
  %v4_884c = add i32 %v3_884c, 4
  %v5_884c = inttoptr i32 %v4_884c to i8*
  store i8 5, i8* %v5_884c, align 1
  %v0_8850 = load i32, i32* %r1.global-to-local, align 4
  %v1_8850 = add i32 %v0_8850, 4
  store i32 %v1_8850, i32* %r1.global-to-local, align 4
  %v5_8854 = call i32 @function_11fe4(i32 %v2_8844, i32 %v1_8850, i32 ptrtoint (i32* @global_var_b998.41 to i32), i32 5)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 %v3_8858, i32* %r3.global-to-local, align 4
  store i32 %v5_8854, i32* %ip.global-to-local, align 4
  %v0_8860 = load i32, i32* @r5, align 4
  %v5_8860 = mul nuw nsw i32 %v3_8858, 4
  %v6_8860 = add i32 %v5_8860, %v5_8854
  %v7_8860 = inttoptr i32 %v6_8860 to i32*
  store i32 %v0_8860, i32* %v7_8860, align 4
  %v0_8864 = load i32, i32* %r3.global-to-local, align 4
  %v1_8864 = load i32, i32* @r8, align 4
  %v2_8864 = add i32 %v1_8864, %v0_8864
  store i32 %v2_8864, i32* %r2.global-to-local, align 4
  %v0_8868 = load i32, i32* @r7, align 4
  store i32 %v0_8868, i32* %r1.global-to-local, align 4
  %v0_8870 = load i32, i32* %ip.global-to-local, align 4
  %v1_8870 = load i32, i32* @r6, align 4
  %v2_8870 = inttoptr i32 %v1_8870 to i32*
  store i32 %v0_8870, i32* %v2_8870, align 4
  %v0_8874 = load i32, i32* %r2.global-to-local, align 4
  %v1_8874 = trunc i32 %v0_8874 to i8
  %v2_8874 = load i32, i32* @r4, align 4
  %v3_8874 = inttoptr i32 %v2_8874 to i8*
  store i8 %v1_8874, i8* %v3_8874, align 1
  %v2_8878 = call i32 @function_11e9c(i32 %v1_8864, i32 %v0_8868)
  %v2_887c = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_887c = zext i8 %v2_887c to i32
  store i32 45368, i32* %r2.global-to-local, align 4
  store i32 %v2_8878, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_888c = mul nuw nsw i32 %v3_887c, 4
  store i32 %v3_888c, i32* %r1.global-to-local, align 4
  %v2_8890 = load i32, i32* @global_var_1c234.23, align 4
  %v2_8894 = inttoptr i32 %v2_8878 to i32*
  store i32 45368, i32* %v2_8894, align 4
  %v3_8898 = load i32, i32* @r5, align 4
  %v4_8898 = add i32 %v3_8898, 4
  %v5_8898 = inttoptr i32 %v4_8898 to i8*
  store i8 10, i8* %v5_8898, align 1
  %v0_889c = load i32, i32* %r1.global-to-local, align 4
  %v1_889c = add i32 %v0_889c, 4
  store i32 %v1_889c, i32* %r1.global-to-local, align 4
  %v5_88a0 = call i32 @function_11fe4(i32 %v2_8890, i32 %v1_889c, i32 45368, i32 10)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 %v3_88a4, i32* %r3.global-to-local, align 4
  store i32 %v5_88a0, i32* %ip.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  %v5_88ac = mul nuw nsw i32 %v3_88a4, 4
  %v6_88ac = add i32 %v5_88ac, %v5_88a0
  %v7_88ac = inttoptr i32 %v6_88ac to i32*
  store i32 %v0_88ac, i32* %v7_88ac, align 4
  %v0_88b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88b0 = load i32, i32* @r8, align 4
  %v2_88b0 = add i32 %v1_88b0, %v0_88b0
  store i32 %v2_88b0, i32* %r2.global-to-local, align 4
  %v0_88b4 = load i32, i32* @r7, align 4
  store i32 %v0_88b4, i32* %r1.global-to-local, align 4
  %v0_88bc = load i32, i32* %ip.global-to-local, align 4
  %v1_88bc = load i32, i32* @r6, align 4
  %v2_88bc = inttoptr i32 %v1_88bc to i32*
  store i32 %v0_88bc, i32* %v2_88bc, align 4
  %v0_88c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_88c0 = trunc i32 %v0_88c0 to i8
  %v2_88c0 = load i32, i32* @r4, align 4
  %v3_88c0 = inttoptr i32 %v2_88c0 to i8*
  store i8 %v1_88c0, i8* %v3_88c0, align 1
  %v2_88c4 = call i32 @function_11e9c(i32 %v1_88b0, i32 %v0_88b4)
  %v2_88c8 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_88c8 = zext i8 %v2_88c8 to i32
  store i32 ptrtoint (i32* @global_var_9da8.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88c4, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_88d8 = mul nuw nsw i32 %v3_88c8, 4
  store i32 %v3_88d8, i32* %r1.global-to-local, align 4
  %v2_88dc = load i32, i32* @global_var_1c234.23, align 4
  %v2_88e0 = inttoptr i32 %v2_88c4 to i32*
  store i32 ptrtoint (i32* @global_var_9da8.44 to i32), i32* %v2_88e0, align 4
  %v3_88e4 = load i32, i32* @r5, align 4
  %v4_88e4 = add i32 %v3_88e4, 4
  %v5_88e4 = inttoptr i32 %v4_88e4 to i8*
  store i8 6, i8* %v5_88e4, align 1
  %v0_88e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_88e8 = add i32 %v0_88e8, 4
  store i32 %v1_88e8, i32* %r1.global-to-local, align 4
  %v5_88ec = call i32 @function_11fe4(i32 %v2_88dc, i32 %v1_88e8, i32 ptrtoint (i32* @global_var_9da8.44 to i32), i32 6)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 %v3_88f0, i32* %r3.global-to-local, align 4
  store i32 %v5_88ec, i32* %ip.global-to-local, align 4
  %v0_88f8 = load i32, i32* @r5, align 4
  %v5_88f8 = mul nuw nsw i32 %v3_88f0, 4
  %v6_88f8 = add i32 %v5_88f8, %v5_88ec
  %v7_88f8 = inttoptr i32 %v6_88f8 to i32*
  store i32 %v0_88f8, i32* %v7_88f8, align 4
  %v0_88fc = load i32, i32* %r3.global-to-local, align 4
  %v1_88fc = load i32, i32* @r8, align 4
  %v2_88fc = add i32 %v1_88fc, %v0_88fc
  store i32 %v2_88fc, i32* %r2.global-to-local, align 4
  %v0_8900 = load i32, i32* @r7, align 4
  store i32 %v0_8900, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* %ip.global-to-local, align 4
  %v1_8908 = load i32, i32* @r6, align 4
  %v2_8908 = inttoptr i32 %v1_8908 to i32*
  store i32 %v0_8908, i32* %v2_8908, align 4
  %v0_890c = load i32, i32* %r2.global-to-local, align 4
  %v1_890c = trunc i32 %v0_890c to i8
  %v2_890c = load i32, i32* @r4, align 4
  %v3_890c = inttoptr i32 %v2_890c to i8*
  store i8 %v1_890c, i8* %v3_890c, align 1
  %v2_8910 = call i32 @function_11e9c(i32 %v1_88fc, i32 %v0_8900)
  %v2_8914 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8914 = zext i8 %v2_8914 to i32
  store i32 ptrtoint (i32* @global_var_962c.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8910, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8924 = mul nuw nsw i32 %v3_8914, 4
  store i32 %v3_8924, i32* %r1.global-to-local, align 4
  %v2_8928 = load i32, i32* @global_var_1c234.23, align 4
  %v2_892c = inttoptr i32 %v2_8910 to i32*
  store i32 ptrtoint (i32* @global_var_962c.46 to i32), i32* %v2_892c, align 4
  %v3_8930 = load i32, i32* @r5, align 4
  %v4_8930 = add i32 %v3_8930, 4
  %v5_8930 = inttoptr i32 %v4_8930 to i8*
  store i8 7, i8* %v5_8930, align 1
  %v0_8934 = load i32, i32* %r1.global-to-local, align 4
  %v1_8934 = add i32 %v0_8934, 4
  store i32 %v1_8934, i32* %r1.global-to-local, align 4
  %v5_8938 = call i32 @function_11fe4(i32 %v2_8928, i32 %v1_8934, i32 ptrtoint (i32* @global_var_962c.46 to i32), i32 7)
  %v2_893c = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_893c = zext i8 %v2_893c to i32
  store i32 %v3_893c, i32* %r3.global-to-local, align 4
  store i32 %v5_8938, i32* %ip.global-to-local, align 4
  %v0_8944 = load i32, i32* @r5, align 4
  %v5_8944 = mul nuw nsw i32 %v3_893c, 4
  %v6_8944 = add i32 %v5_8944, %v5_8938
  %v7_8944 = inttoptr i32 %v6_8944 to i32*
  store i32 %v0_8944, i32* %v7_8944, align 4
  %v0_8948 = load i32, i32* %r3.global-to-local, align 4
  %v1_8948 = load i32, i32* @r8, align 4
  %v2_8948 = add i32 %v1_8948, %v0_8948
  store i32 %v2_8948, i32* %r2.global-to-local, align 4
  %v0_894c = load i32, i32* @r7, align 4
  store i32 %v0_894c, i32* %r1.global-to-local, align 4
  %v1_8954 = trunc i32 %v2_8948 to i8
  %v2_8954 = load i32, i32* @r4, align 4
  %v3_8954 = inttoptr i32 %v2_8954 to i8*
  store i8 %v1_8954, i8* %v3_8954, align 1
  %v0_8958 = load i32, i32* %ip.global-to-local, align 4
  %v1_8958 = load i32, i32* @r6, align 4
  %v2_8958 = inttoptr i32 %v1_8958 to i32*
  store i32 %v0_8958, i32* %v2_8958, align 4
  %v2_895c = call i32 @function_11e9c(i32 %v1_8948, i32 %v0_894c)
  %v2_8960 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8960 = zext i8 %v2_8960 to i32
  store i32 36028, i32* %r2.global-to-local, align 4
  store i32 %v2_895c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_8970 = mul nuw nsw i32 %v3_8960, 4
  store i32 %v3_8970, i32* %r1.global-to-local, align 4
  %v2_8974 = load i32, i32* @global_var_1c234.23, align 4
  %v2_8978 = inttoptr i32 %v2_895c to i32*
  store i32 36028, i32* %v2_8978, align 4
  %v3_897c = load i32, i32* @r5, align 4
  %v4_897c = add i32 %v3_897c, 4
  %v5_897c = inttoptr i32 %v4_897c to i8*
  store i8 9, i8* %v5_897c, align 1
  %v0_8980 = load i32, i32* %r1.global-to-local, align 4
  %v1_8980 = add i32 %v0_8980, 4
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  %v5_8984 = call i32 @function_11fe4(i32 %v2_8974, i32 %v1_8980, i32 36028, i32 9)
  %v2_8988 = load i8, i8* bitcast (i8** @global_var_1c230.21 to i8*), align 4
  %v3_8988 = zext i8 %v2_8988 to i32
  store i32 %v3_8988, i32* %r3.global-to-local, align 4
  %v1_898c = load i32, i32* @r6, align 4
  %v2_898c = inttoptr i32 %v1_898c to i32*
  store i32 %v5_8984, i32* %v2_898c, align 4
  %v0_8990 = load i32, i32* @r5, align 4
  %v2_8990 = load i32, i32* %r3.global-to-local, align 4
  %v5_8990 = mul i32 %v2_8990, 4
  %v6_8990 = add i32 %v5_8990, %v5_8984
  %v7_8990 = inttoptr i32 %v6_8990 to i32*
  store i32 %v0_8990, i32* %v7_8990, align 4
  %v0_8994 = load i32, i32* %r3.global-to-local, align 4
  %v1_8994 = load i32, i32* @r8, align 4
  %v2_8994 = add i32 %v1_8994, %v0_8994
  store i32 %v2_8994, i32* %r2.global-to-local, align 4
  %v1_899c = trunc i32 %v2_8994 to i8
  %v2_899c = load i32, i32* @r4, align 4
  %v3_899c = inttoptr i32 %v2_899c to i8*
  store i8 %v1_899c, i8* %v3_899c, align 1
  %v2_89a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_89a0, i32* @r4, align 4
  store i32 %v6_8650, i32* @r5, align 4
  store i32 %v9_8650, i32* @r6, align 4
  store i32 %v12_8650, i32* @r7, align 4
  store i32 %v15_8650, i32* @r8, align 4
  ret i32 %v1_8994

; uselistorder directives
  uselistorder i32 %v1_8994, { 1, 0 }
  uselistorder i32 %v1_8948, { 1, 0 }
  uselistorder i32 %v1_88fc, { 1, 0 }
  uselistorder i32 %v1_88b0, { 1, 0 }
  uselistorder i32 %v1_8864, { 1, 0 }
  uselistorder i32 %v1_8818, { 1, 0 }
  uselistorder i32 %v1_87cc, { 1, 0 }
  uselistorder i32 %v1_8780, { 1, 0 }
  uselistorder i32 %v2_8730, { 0, 2, 1 }
  uselistorder i32 %v3_8728, { 1, 0, 2 }
  uselistorder i32 %v1_86e8, { 1, 0 }
  uselistorder i32* @global_var_1c234.23, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
  uselistorder i8* bitcast (i8** @global_var_1c230.21 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_89d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_89d8:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_89d8 = load i32, i32* @fp, align 4
  %v1_89dc = urem i32 %arg1, 256
  store i32 %v1_89dc, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_89f4 = urem i32 %arg3, 256
  store i32 %v1_89f4, i32* @r4, align 4
  %v2_89f8 = call i32 @function_11e9c(i32 %v1_89dc, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_89f8, i32* @sl, align 4
  %v0_8a04 = load i32, i32* @r7, align 4
  %v2_8a08 = call i32 @function_11e9c(i32 %v0_8a04, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_8a14 = load i32, i32* @r6, align 4
  store i32 %v0_8a14, i32* %r1.global-to-local, align 4
  store i32 %v2_8a08, i32* @sb, align 4
  %v0_8a24 = load i32, i32* @r4, align 4
  %v4_8a28 = inttoptr i32 %v0_8a14 to i32*
  %v5_8a28 = call i32 @function_85e0(i32 %v0_8a24, i32* %v4_8a28, i32 7, i32 65535)
  %v3_8a30 = urem i32 %v5_8a28, 65536
  %v0_8a34 = load i32, i32* @r6, align 4
  store i32 %v0_8a34, i32* %r1.global-to-local, align 4
  %v0_8a3c = load i32, i32* @r5, align 4
  %v0_8a40 = load i32, i32* @r4, align 4
  %v5_8a48 = inttoptr i32 %v0_8a34 to i32*
  %v6_8a48 = call i32 @function_85e0(i32 %v0_8a40, i32* %v5_8a48, i32 6, i32 %v0_8a3c)
  %v0_8a4c = load i32, i32* @r6, align 4
  store i32 %v0_8a4c, i32* %r1.global-to-local, align 4
  %v3_8a50 = mul i32 %v6_8a48, 65536
  store i32 %v3_8a50, i32* %fp.global-to-local, align 4
  %v0_8a5c = load i32, i32* @r4, align 4
  %v4_8a60 = inttoptr i32 %v0_8a4c to i32*
  %v5_8a60 = call i32 @function_85e0(i32 %v0_8a5c, i32* %v4_8a60, i32 0, i32 512)
  %v0_8a6c = load i32, i32* @r6, align 4
  store i32 %v0_8a6c, i32* %r1.global-to-local, align 4
  %v0_8a70 = load i32, i32* @r4, align 4
  %v3_8a78 = urem i32 %v5_8a60, 65536
  store i32 %v3_8a78, i32* @r6, align 4
  %v4_8a7c = inttoptr i32 %v0_8a6c to i32*
  %v5_8a7c = call i32 @function_85e0(i32 %v0_8a70, i32* %v4_8a7c, i32 1, i32 1)
  %v0_8a80 = load i32, i32* %fp.global-to-local, align 4
  %v3_8a80 = udiv i32 %v0_8a80, 65536
  %v1_8a88 = load i32, i32* @r5, align 4
  %v9_8a88 = icmp eq i32 %v3_8a80, %v1_8a88
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_8a88, label %dec_label_pc_8ab0, label %bb

bb:                                               ; preds = %dec_label_pc_89d8
  %v2_8a9c = mul nuw nsw i32 %v3_8a80, 256
  %v4_8aa0 = and i32 %v2_8a9c, 65280
  %v1_8aa4 = urem i32 %v5_8a7c, 256
  store i32 %v1_8aa4, i32* @r8, align 4
  %v5_8aa8 = udiv i32 %v0_8a80, 16777216
  %v6_8aa8 = or i32 %v4_8aa0, %v5_8aa8
  br label %dec_label_pc_8abc

dec_label_pc_8ab0:                                ; preds = %dec_label_pc_89d8
  %v1_8aa47 = urem i32 %v5_8a7c, 256
  store i32 %v1_8aa47, i32* @r8, align 4
  %v0_8ab0 = call i32 @function_e72c()
  %v3_8ab8 = urem i32 %v0_8ab0, 65536
  br label %dec_label_pc_8abc

dec_label_pc_8abc:                                ; preds = %bb, %dec_label_pc_8ab0
  %storemerge17 = phi i32 [ %v6_8aa8, %bb ], [ %v3_8ab8, %dec_label_pc_8ab0 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_8abc = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_8abc, 1
  br i1 %tmp41, label %dec_label_pc_8c64.preheader, label %dec_label_pc_8ac4

dec_label_pc_8c64.preheader:                      ; preds = %dec_label_pc_8bc0, %dec_label_pc_8abc
  %storemerge3.in12.ph = phi i32 [ %v0_8abc, %dec_label_pc_8abc ], [ %v1_8b18, %dec_label_pc_8bc0 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_8c2c, label %dec_label_pc_8c30.lr.ph

dec_label_pc_8ac4:                                ; preds = %dec_label_pc_8abc
  store i32 %v3_8a30, i32* %r1.global-to-local, align 4
  %v3_8ac8 = udiv i32 %v5_8a28, 256
  %v5_8ad4 = trunc i32 %v3_8ac8 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_8aec = udiv i32 %v5_8a28, 65536
  store i32 %v3_8aec, i32* @r4, align 4
  %v4_8afc = trunc i32 %v3_8aec to i8
  store i8 %v4_8afc, i8* %stack_var_-80, align 1
  %v3_8c0c = icmp eq i32 %v3_8a30, 65535
  %v2_8b34 = ptrtoint i32* %stack_var_-52 to i32
  %v3_8b64 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_8bf0

dec_label_pc_8b04:                                ; preds = %dec_label_pc_8bf0
  %v2_8b04 = load i8, i8* %stack_var_-80, align 1
  %v3_8b04 = sext i8 %v2_8b04 to i32
  store i32 %v3_8b04, i32* %r1.global-to-local, align 4
  store i32 %v3_8ac8, i32* @r4, align 4
  %v2_8b08 = load i32, i32* @r5, align 4
  %v3_8b08 = add i32 %v2_8b08, 2
  %v4_8b08 = inttoptr i32 %v3_8b08 to i8*
  store i8 %v5_8ad4, i8* %v4_8b08, align 1
  %v0_8b0c = load i32, i32* %r1.global-to-local, align 4
  %v1_8b0c = trunc i32 %v0_8b0c to i8
  %v2_8b0c = load i32, i32* @r5, align 4
  %v3_8b0c = add i32 %v2_8b0c, 3
  %v4_8b0c = inttoptr i32 %v3_8b0c to i8*
  store i8 %v1_8b0c, i8* %v4_8b0c, align 1
  br label %dec_label_pc_8b10

dec_label_pc_8b10:                                ; preds = %dec_label_pc_8c18, %dec_label_pc_8b04
  %v1_8b18 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8b28 = call i32 @function_11bb0(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_8b30 = icmp eq i32 %v3_8b28, -1
  store i32 %v2_8b34, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_8b44 = load i32, i32* @sb, align 4
  %v3_8b44 = add i32 %v2_8b44, %stack_var_-60.0
  %v4_8b44 = inttoptr i32 %v3_8b44 to i32*
  store i32 %v3_8b28, i32* %v4_8b44, align 4
  br i1 %v7_8b30, label %dec_label_pc_8c70, label %dec_label_pc_8b4c

dec_label_pc_8b4c:                                ; preds = %dec_label_pc_8b10
  store i32 2, i32* %stack_var_-52, align 4
  %v4_8b64 = call i32 @function_119e0(i32 %v3_8b28, %sockaddr* %v3_8b64, i32 16)
  %v0_8b68 = load i32, i32* @r5, align 4
  %v1_8b68 = add i32 %v0_8b68, 20
  %v2_8b68 = inttoptr i32 %v1_8b68 to i8*
  %v3_8b68 = load i8, i8* %v2_8b68, align 1
  %tmp = icmp ugt i8 %v3_8b68, 31
  br i1 %tmp, label %dec_label_pc_8bc0, label %dec_label_pc_8b74

dec_label_pc_8b74:                                ; preds = %dec_label_pc_8b4c
  %v1_8b74 = add i32 %v0_8b68, 16
  %v2_8b74 = inttoptr i32 %v1_8b74 to i32*
  %v3_8b74 = load i32, i32* %v2_8b74, align 4
  store i32 %v3_8b74, i32* @r4, align 4
  %v0_8b78 = call i32 @function_e72c()
  %v0_8b7c = load i32, i32* @r4, align 4
  %v1_8b80 = and i32 %v0_8b7c, 65280
  %v3_8b88 = mul i32 %v0_8b7c, 16777216
  %v4_8b8c = mul nuw nsw i32 %v1_8b80, 256
  %v5_8b8c = or i32 %v4_8b8c, %v3_8b88
  store i32 %v5_8b8c, i32* %r1.global-to-local, align 4
  %v0_8b94 = load i32, i32* @r5, align 4
  %v1_8b94 = add i32 %v0_8b94, 20
  %v2_8b94 = inttoptr i32 %v1_8b94 to i8*
  %v3_8b94 = load i8, i8* %v2_8b94, align 1
  %v4_8b94 = zext i8 %v3_8b94 to i32
  %v2_8b98 = call i32 @llvm.bswap.i32(i32 %v0_8b7c)
  %v7_8b9c = lshr i32 %v0_8b78, %v4_8b94
  %v8_8b9c = add i32 %v7_8b9c, %v2_8b98
  %v3_8ba8 = mul i32 %v8_8b9c, 16777216
  %v1_8bac = and i32 %v8_8b9c, 65280
  %v4_8bb0 = mul nuw nsw i32 %v1_8bac, 256
  %v5_8bb0 = or i32 %v4_8bb0, %v3_8ba8
  store i32 %v5_8bb0, i32* %r1.global-to-local, align 4
  %v2_8bb8 = call i32 @llvm.bswap.i32(i32 %v8_8b9c)
  %v2_8bbc = add i32 %v0_8b94, 4
  %v3_8bbc = inttoptr i32 %v2_8bbc to i32*
  store i32 %v2_8bb8, i32* %v3_8bbc, align 4
  %v0_8bcc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bc0

dec_label_pc_8bc0:                                ; preds = %dec_label_pc_8b4c, %dec_label_pc_8b74
  %v0_8bcc = phi i32 [ %v0_8b68, %dec_label_pc_8b4c ], [ %v0_8bcc.pre, %dec_label_pc_8b74 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_8bc8 = load i32, i32* @sb, align 4
  %v2_8bc8 = add i32 %v1_8bc8, %stack_var_-60.0
  %v3_8bc8 = inttoptr i32 %v2_8bc8 to i32*
  %v4_8bc8 = load i32, i32* %v3_8bc8, align 4
  store i32 %v0_8bcc, i32* %r1.global-to-local, align 4
  %v3_8bd0 = inttoptr i32 %v0_8bcc to %sockaddr*
  %v4_8bd0 = call i32 @function_11a0c(i32 %v4_8bc8, %sockaddr* %v3_8bd0, i32 16)
  %v1_8bdc = add i32 %stack_var_-60.0, 4
  %v1_8be0 = load i32, i32* @r7, align 4
  %v9_8be0 = icmp eq i32 %v1_8b18, %v1_8be0
  %v0_8be8 = load i32, i32* @r5, align 4
  %v1_8be8 = add i32 %v0_8be8, 24
  store i32 %v1_8be8, i32* @r5, align 4
  br i1 %v9_8be0, label %dec_label_pc_8c64.preheader, label %dec_label_pc_8bf0

dec_label_pc_8bf0:                                ; preds = %dec_label_pc_8bc0, %dec_label_pc_8ac4
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8ac4 ], [ %v1_8bdc, %dec_label_pc_8bc0 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_8ac4 ], [ %v1_8b18, %dec_label_pc_8bc0 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_8bfc = call i32 @function_11e9c(i32 65535, i32 1)
  store i32 %v3_8a30, i32* %r1.global-to-local, align 4
  %v2_8c10 = load i32, i32* @sl, align 4
  %v3_8c10 = add i32 %v2_8c10, %stack_var_-60.0
  %v4_8c10 = inttoptr i32 %v3_8c10 to i32*
  store i32 %v2_8bfc, i32* %v4_8c10, align 4
  br i1 %v3_8c0c, label %dec_label_pc_8c18, label %dec_label_pc_8b04

dec_label_pc_8c18:                                ; preds = %dec_label_pc_8bf0
  %v0_8c18 = call i32 @function_e72c()
  %v1_8c18 = trunc i32 %v0_8c18 to i8
  %v4_8c1c = sdiv i32 %v0_8c18, 256
  %v1_8c20 = trunc i32 %v4_8c1c to i8
  %v2_8c20 = load i32, i32* @r5, align 4
  %v3_8c20 = add i32 %v2_8c20, 3
  %v4_8c20 = inttoptr i32 %v3_8c20 to i8*
  store i8 %v1_8c20, i8* %v4_8c20, align 1
  %v3_8c24 = load i32, i32* @r5, align 4
  %v4_8c24 = add i32 %v3_8c24, 2
  %v5_8c24 = inttoptr i32 %v4_8c24 to i8*
  store i8 %v1_8c18, i8* %v5_8c24, align 1
  br label %dec_label_pc_8b10

dec_label_pc_8c2c:                                ; preds = %dec_label_pc_8c64.loopexit, %dec_label_pc_8c64.preheader, %dec_label_pc_8c68.loopexit, %dec_label_pc_8c2c
  br label %dec_label_pc_8c2c

dec_label_pc_8c30:                                ; preds = %dec_label_pc_8c30.lr.ph, %dec_label_pc_8c68.loopexit
  %v0_8c30 = load i32, i32* @r8, align 4
  %v2_8c30 = icmp eq i32 %v0_8c30, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_8c30, label %dec_label_pc_8c38, label %dec_label_pc_8c78

dec_label_pc_8c38:                                ; preds = %dec_label_pc_8c30
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_8c40

dec_label_pc_8c40:                                ; preds = %dec_label_pc_8c40, %dec_label_pc_8c38
  %v0_8c48 = phi i32 [ %v1_8c48, %dec_label_pc_8c40 ], [ 0, %dec_label_pc_8c38 ]
  %v0_8c40 = phi i32 [ %v1_8c5c, %dec_label_pc_8c40 ], [ 0, %dec_label_pc_8c38 ]
  %v1_8c40 = load i32, i32* @sb, align 4
  %v2_8c40 = add i32 %v1_8c40, %v0_8c40
  %v3_8c40 = inttoptr i32 %v2_8c40 to i32*
  %v4_8c40 = load i32, i32* %v3_8c40, align 4
  %v1_8c44 = load i32, i32* @sl, align 4
  %v2_8c44 = add i32 %v1_8c44, %v0_8c40
  %v3_8c44 = inttoptr i32 %v2_8c44 to i32*
  %v4_8c44 = load i32, i32* %v3_8c44, align 4
  store i32 %v4_8c44, i32* %r1.global-to-local, align 4
  %v1_8c48 = add i32 %v0_8c48, 1
  %v0_8c4c = load i32, i32* @r6, align 4
  %v4_8c54 = inttoptr i32 %v4_8c44 to i32*
  %v5_8c54 = call i32 @function_11b20(i32 %v4_8c40, i32* %v4_8c54, i32 %v0_8c4c, i32 16384)
  %v1_8c58 = load i32, i32* @r7, align 4
  %v9_8c58 = icmp eq i32 %v1_8c48, %v1_8c58
  %v0_8c5c = load i32, i32* @r4, align 4
  %v1_8c5c = add i32 %v0_8c5c, 4
  store i32 %v1_8c5c, i32* @r4, align 4
  br i1 %v9_8c58, label %dec_label_pc_8c64.loopexit, label %dec_label_pc_8c40

dec_label_pc_8c64.loopexit:                       ; preds = %dec_label_pc_8c40
  %tmp4247 = icmp slt i32 %v1_8c48, 1
  br i1 %tmp4247, label %dec_label_pc_8c2c, label %dec_label_pc_8c30.lr.ph

dec_label_pc_8c30.lr.ph:                          ; preds = %dec_label_pc_8c64.preheader, %dec_label_pc_8c64.loopexit
  br label %dec_label_pc_8c30

dec_label_pc_8c68.loopexit:                       ; preds = %dec_label_pc_8c80
  %tmp42 = icmp slt i32 %v0_8ca8, 1
  br i1 %tmp42, label %dec_label_pc_8c2c, label %dec_label_pc_8c30

dec_label_pc_8c70:                                ; preds = %dec_label_pc_8b10
  store i32 %v24_89d8, i32* %fp.global-to-local, align 4
  ret i32 %v3_8b28

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8c30
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8c80

dec_label_pc_8c80:                                ; preds = %dec_label_pc_8c80, %dec_label_pc_8c78
  %v0_8c80 = phi i32 [ %v1_8cac, %dec_label_pc_8c80 ], [ 0, %dec_label_pc_8c78 ]
  %v1_8c80 = load i32, i32* @sl, align 4
  %v2_8c80 = add i32 %v1_8c80, %v0_8c80
  %v3_8c80 = inttoptr i32 %v2_8c80 to i32*
  %v4_8c80 = load i32, i32* %v3_8c80, align 4
  store i32 %v4_8c80, i32* @r4, align 4
  %v0_8c84 = load i32, i32* @r6, align 4
  store i32 %v0_8c84, i32* @r1, align 4
  %v1_8c8c = inttoptr i32 %v4_8c80 to i8*
  %v2_8c8c = call i32 @function_e8ac(i8* %v1_8c8c)
  %v0_8c90 = load i32, i32* @r5, align 4
  %v1_8c90 = add i32 %v0_8c90, 1
  store i32 %v1_8c90, i32* @r5, align 4
  %v0_8c94 = load i32, i32* @fp, align 4
  %v1_8c94 = load i32, i32* @sb, align 4
  %v2_8c94 = add i32 %v1_8c94, %v0_8c94
  %v3_8c94 = inttoptr i32 %v2_8c94 to i32*
  %v4_8c94 = load i32, i32* %v3_8c94, align 4
  %v0_8c98 = load i32, i32* @r4, align 4
  store i32 %v0_8c98, i32* %r1.global-to-local, align 4
  %v0_8c9c = load i32, i32* @r6, align 4
  %v4_8ca4 = inttoptr i32 %v0_8c98 to i32*
  %v5_8ca4 = call i32 @function_11b20(i32 %v4_8c94, i32* %v4_8ca4, i32 %v0_8c9c, i32 16384)
  %v0_8ca8 = load i32, i32* @r5, align 4
  %v1_8ca8 = load i32, i32* @r7, align 4
  %v9_8ca8 = icmp eq i32 %v0_8ca8, %v1_8ca8
  %v0_8cac = load i32, i32* @fp, align 4
  %v1_8cac = add i32 %v0_8cac, 4
  store i32 %v1_8cac, i32* @fp, align 4
  br i1 %v9_8ca8, label %dec_label_pc_8c68.loopexit, label %dec_label_pc_8c80

; uselistorder directives
  uselistorder i32 %v1_8cac, { 1, 0 }
  uselistorder i32 %v0_8ca8, { 1, 0 }
  uselistorder i32 %v1_8c5c, { 1, 0 }
  uselistorder i32 %v1_8c48, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_8bcc, { 1, 0 }
  uselistorder i32 %v8_8b9c, { 1, 2, 0 }
  uselistorder i32 %v0_8b7c, { 1, 0, 2 }
  uselistorder i32 %v3_8b28, { 1, 3, 2, 0 }
  uselistorder i32 %v1_8b18, { 1, 2, 0 }
  uselistorder i32 %v3_8aec, { 1, 0 }
  uselistorder i32 %v3_8ac8, { 1, 0 }
  uselistorder i32 %v3_8a30, { 0, 2, 1 }
  uselistorder i32 %v1_89dc, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_8c30.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_8c30, { 1, 0 }
  uselistorder label %dec_label_pc_8c2c, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_8bc0, { 1, 0 }
  uselistorder label %dec_label_pc_8abc, { 1, 0 }
}

define i32 @function_8cbc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8cbc:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_8cbc = load i32, i32* @fp, align 4
  %v1_8cc0 = urem i32 %arg1, 256
  store i32 %v1_8cc0, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_8cd8 = urem i32 %arg3, 256
  store i32 %v1_8cd8, i32* @r4, align 4
  %v2_8cdc = call i32 @function_11e9c(i32 %v1_8cc0, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_8cdc, i32* @sl, align 4
  %v0_8ce8 = load i32, i32* @r7, align 4
  %v2_8cec = call i32 @function_11e9c(i32 %v0_8ce8, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_8cf8 = load i32, i32* @r6, align 4
  store i32 %v0_8cf8, i32* %r1.global-to-local, align 4
  store i32 %v2_8cec, i32* @sb, align 4
  %v0_8d08 = load i32, i32* @r4, align 4
  %v4_8d0c = inttoptr i32 %v0_8cf8 to i32*
  %v5_8d0c = call i32 @function_85e0(i32 %v0_8d08, i32* %v4_8d0c, i32 7, i32 65535)
  %v3_8d14 = urem i32 %v5_8d0c, 65536
  %v0_8d18 = load i32, i32* @r6, align 4
  store i32 %v0_8d18, i32* %r1.global-to-local, align 4
  %v0_8d20 = load i32, i32* @r5, align 4
  %v0_8d24 = load i32, i32* @r4, align 4
  %v5_8d2c = inttoptr i32 %v0_8d18 to i32*
  %v6_8d2c = call i32 @function_85e0(i32 %v0_8d24, i32* %v5_8d2c, i32 6, i32 %v0_8d20)
  %v0_8d30 = load i32, i32* @r6, align 4
  store i32 %v0_8d30, i32* %r1.global-to-local, align 4
  %v3_8d34 = mul i32 %v6_8d2c, 65536
  store i32 %v3_8d34, i32* %fp.global-to-local, align 4
  %v0_8d40 = load i32, i32* @r4, align 4
  %v4_8d44 = inttoptr i32 %v0_8d30 to i32*
  %v5_8d44 = call i32 @function_85e0(i32 %v0_8d40, i32* %v4_8d44, i32 0, i32 1024)
  %v0_8d50 = load i32, i32* @r6, align 4
  store i32 %v0_8d50, i32* %r1.global-to-local, align 4
  %v0_8d54 = load i32, i32* @r4, align 4
  %v3_8d5c = urem i32 %v5_8d44, 65536
  store i32 %v3_8d5c, i32* @r6, align 4
  %v4_8d60 = inttoptr i32 %v0_8d50 to i32*
  %v5_8d60 = call i32 @function_85e0(i32 %v0_8d54, i32* %v4_8d60, i32 1, i32 1)
  %v0_8d64 = load i32, i32* %fp.global-to-local, align 4
  %v3_8d64 = udiv i32 %v0_8d64, 65536
  %v1_8d6c = load i32, i32* @r5, align 4
  %v9_8d6c = icmp eq i32 %v3_8d64, %v1_8d6c
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_8d6c, label %dec_label_pc_8d94, label %bb

bb:                                               ; preds = %dec_label_pc_8cbc
  %v2_8d80 = mul nuw nsw i32 %v3_8d64, 256
  %v4_8d84 = and i32 %v2_8d80, 65280
  %v1_8d88 = urem i32 %v5_8d60, 256
  store i32 %v1_8d88, i32* @r8, align 4
  %v5_8d8c = udiv i32 %v0_8d64, 16777216
  %v6_8d8c = or i32 %v4_8d84, %v5_8d8c
  br label %dec_label_pc_8da0

dec_label_pc_8d94:                                ; preds = %dec_label_pc_8cbc
  %v1_8d887 = urem i32 %v5_8d60, 256
  store i32 %v1_8d887, i32* @r8, align 4
  %v0_8d94 = call i32 @function_e72c()
  %v3_8d9c = urem i32 %v0_8d94, 65536
  br label %dec_label_pc_8da0

dec_label_pc_8da0:                                ; preds = %bb, %dec_label_pc_8d94
  %storemerge17 = phi i32 [ %v6_8d8c, %bb ], [ %v3_8d9c, %dec_label_pc_8d94 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_8da0 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_8da0, 1
  br i1 %tmp41, label %dec_label_pc_8f48.preheader, label %dec_label_pc_8da8

dec_label_pc_8f48.preheader:                      ; preds = %dec_label_pc_8ea4, %dec_label_pc_8da0
  %storemerge3.in12.ph = phi i32 [ %v0_8da0, %dec_label_pc_8da0 ], [ %v1_8dfc, %dec_label_pc_8ea4 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_8f10, label %dec_label_pc_8f14.lr.ph

dec_label_pc_8da8:                                ; preds = %dec_label_pc_8da0
  store i32 %v3_8d14, i32* %r1.global-to-local, align 4
  %v3_8dac = udiv i32 %v5_8d0c, 256
  %v5_8db8 = trunc i32 %v3_8dac to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_8dd0 = udiv i32 %v5_8d0c, 65536
  store i32 %v3_8dd0, i32* @r4, align 4
  %v4_8de0 = trunc i32 %v3_8dd0 to i8
  store i8 %v4_8de0, i8* %stack_var_-80, align 1
  %v3_8ef0 = icmp eq i32 %v3_8d14, 65535
  %v2_8e18 = ptrtoint i32* %stack_var_-52 to i32
  %v3_8e48 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_8ed4

dec_label_pc_8de8:                                ; preds = %dec_label_pc_8ed4
  %v2_8de8 = load i8, i8* %stack_var_-80, align 1
  %v3_8de8 = sext i8 %v2_8de8 to i32
  store i32 %v3_8de8, i32* %r1.global-to-local, align 4
  store i32 %v3_8dac, i32* @r4, align 4
  %v2_8dec = load i32, i32* @r5, align 4
  %v3_8dec = add i32 %v2_8dec, 2
  %v4_8dec = inttoptr i32 %v3_8dec to i8*
  store i8 %v5_8db8, i8* %v4_8dec, align 1
  %v0_8df0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8df0 = trunc i32 %v0_8df0 to i8
  %v2_8df0 = load i32, i32* @r5, align 4
  %v3_8df0 = add i32 %v2_8df0, 3
  %v4_8df0 = inttoptr i32 %v3_8df0 to i8*
  store i8 %v1_8df0, i8* %v4_8df0, align 1
  br label %dec_label_pc_8df4

dec_label_pc_8df4:                                ; preds = %dec_label_pc_8efc, %dec_label_pc_8de8
  %v1_8dfc = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8e0c = call i32 @function_11bb0(i32 2, i32 2, i32 0)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_8e14 = icmp eq i32 %v3_8e0c, -1
  store i32 %v2_8e18, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_8e28 = load i32, i32* @sb, align 4
  %v3_8e28 = add i32 %v2_8e28, %stack_var_-60.0
  %v4_8e28 = inttoptr i32 %v3_8e28 to i32*
  store i32 %v3_8e0c, i32* %v4_8e28, align 4
  br i1 %v7_8e14, label %dec_label_pc_8f54, label %dec_label_pc_8e30

dec_label_pc_8e30:                                ; preds = %dec_label_pc_8df4
  store i32 2, i32* %stack_var_-52, align 4
  %v4_8e48 = call i32 @function_119e0(i32 %v3_8e0c, %sockaddr* %v3_8e48, i32 16)
  %v0_8e4c = load i32, i32* @r5, align 4
  %v1_8e4c = add i32 %v0_8e4c, 20
  %v2_8e4c = inttoptr i32 %v1_8e4c to i8*
  %v3_8e4c = load i8, i8* %v2_8e4c, align 1
  %tmp = icmp ugt i8 %v3_8e4c, 31
  br i1 %tmp, label %dec_label_pc_8ea4, label %dec_label_pc_8e58

dec_label_pc_8e58:                                ; preds = %dec_label_pc_8e30
  %v1_8e58 = add i32 %v0_8e4c, 16
  %v2_8e58 = inttoptr i32 %v1_8e58 to i32*
  %v3_8e58 = load i32, i32* %v2_8e58, align 4
  store i32 %v3_8e58, i32* @r4, align 4
  %v0_8e5c = call i32 @function_e72c()
  %v0_8e60 = load i32, i32* @r4, align 4
  %v1_8e64 = and i32 %v0_8e60, 65280
  %v3_8e6c = mul i32 %v0_8e60, 16777216
  %v4_8e70 = mul nuw nsw i32 %v1_8e64, 256
  %v5_8e70 = or i32 %v4_8e70, %v3_8e6c
  store i32 %v5_8e70, i32* %r1.global-to-local, align 4
  %v0_8e78 = load i32, i32* @r5, align 4
  %v1_8e78 = add i32 %v0_8e78, 20
  %v2_8e78 = inttoptr i32 %v1_8e78 to i8*
  %v3_8e78 = load i8, i8* %v2_8e78, align 1
  %v4_8e78 = zext i8 %v3_8e78 to i32
  %v2_8e7c = call i32 @llvm.bswap.i32(i32 %v0_8e60)
  %v7_8e80 = lshr i32 %v0_8e5c, %v4_8e78
  %v8_8e80 = add i32 %v7_8e80, %v2_8e7c
  %v3_8e8c = mul i32 %v8_8e80, 16777216
  %v1_8e90 = and i32 %v8_8e80, 65280
  %v4_8e94 = mul nuw nsw i32 %v1_8e90, 256
  %v5_8e94 = or i32 %v4_8e94, %v3_8e8c
  store i32 %v5_8e94, i32* %r1.global-to-local, align 4
  %v2_8e9c = call i32 @llvm.bswap.i32(i32 %v8_8e80)
  %v2_8ea0 = add i32 %v0_8e78, 4
  %v3_8ea0 = inttoptr i32 %v2_8ea0 to i32*
  store i32 %v2_8e9c, i32* %v3_8ea0, align 4
  %v0_8eb0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8ea4

dec_label_pc_8ea4:                                ; preds = %dec_label_pc_8e30, %dec_label_pc_8e58
  %v0_8eb0 = phi i32 [ %v0_8e4c, %dec_label_pc_8e30 ], [ %v0_8eb0.pre, %dec_label_pc_8e58 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_8eac = load i32, i32* @sb, align 4
  %v2_8eac = add i32 %v1_8eac, %stack_var_-60.0
  %v3_8eac = inttoptr i32 %v2_8eac to i32*
  %v4_8eac = load i32, i32* %v3_8eac, align 4
  store i32 %v0_8eb0, i32* %r1.global-to-local, align 4
  %v3_8eb4 = inttoptr i32 %v0_8eb0 to %sockaddr*
  %v4_8eb4 = call i32 @function_11a0c(i32 %v4_8eac, %sockaddr* %v3_8eb4, i32 16)
  %v1_8ec0 = add i32 %stack_var_-60.0, 4
  %v1_8ec4 = load i32, i32* @r7, align 4
  %v9_8ec4 = icmp eq i32 %v1_8dfc, %v1_8ec4
  %v0_8ecc = load i32, i32* @r5, align 4
  %v1_8ecc = add i32 %v0_8ecc, 24
  store i32 %v1_8ecc, i32* @r5, align 4
  br i1 %v9_8ec4, label %dec_label_pc_8f48.preheader, label %dec_label_pc_8ed4

dec_label_pc_8ed4:                                ; preds = %dec_label_pc_8ea4, %dec_label_pc_8da8
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8da8 ], [ %v1_8ec0, %dec_label_pc_8ea4 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_8da8 ], [ %v1_8dfc, %dec_label_pc_8ea4 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_8ee0 = call i32 @function_11e9c(i32 65535, i32 1)
  store i32 %v3_8d14, i32* %r1.global-to-local, align 4
  %v2_8ef4 = load i32, i32* @sl, align 4
  %v3_8ef4 = add i32 %v2_8ef4, %stack_var_-60.0
  %v4_8ef4 = inttoptr i32 %v3_8ef4 to i32*
  store i32 %v2_8ee0, i32* %v4_8ef4, align 4
  br i1 %v3_8ef0, label %dec_label_pc_8efc, label %dec_label_pc_8de8

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8ed4
  %v0_8efc = call i32 @function_e72c()
  %v1_8efc = trunc i32 %v0_8efc to i8
  %v4_8f00 = sdiv i32 %v0_8efc, 256
  %v1_8f04 = trunc i32 %v4_8f00 to i8
  %v2_8f04 = load i32, i32* @r5, align 4
  %v3_8f04 = add i32 %v2_8f04, 3
  %v4_8f04 = inttoptr i32 %v3_8f04 to i8*
  store i8 %v1_8f04, i8* %v4_8f04, align 1
  %v3_8f08 = load i32, i32* @r5, align 4
  %v4_8f08 = add i32 %v3_8f08, 2
  %v5_8f08 = inttoptr i32 %v4_8f08 to i8*
  store i8 %v1_8efc, i8* %v5_8f08, align 1
  br label %dec_label_pc_8df4

dec_label_pc_8f10:                                ; preds = %dec_label_pc_8f48.loopexit, %dec_label_pc_8f48.preheader, %dec_label_pc_8f4c.loopexit, %dec_label_pc_8f10
  br label %dec_label_pc_8f10

dec_label_pc_8f14:                                ; preds = %dec_label_pc_8f14.lr.ph, %dec_label_pc_8f4c.loopexit
  %v0_8f14 = load i32, i32* @r8, align 4
  %v2_8f14 = icmp eq i32 %v0_8f14, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_8f14, label %dec_label_pc_8f1c, label %dec_label_pc_8f5c

dec_label_pc_8f1c:                                ; preds = %dec_label_pc_8f14
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_8f24

dec_label_pc_8f24:                                ; preds = %dec_label_pc_8f24, %dec_label_pc_8f1c
  %v0_8f2c = phi i32 [ %v1_8f2c, %dec_label_pc_8f24 ], [ 0, %dec_label_pc_8f1c ]
  %v0_8f24 = phi i32 [ %v1_8f40, %dec_label_pc_8f24 ], [ 0, %dec_label_pc_8f1c ]
  %v1_8f24 = load i32, i32* @sb, align 4
  %v2_8f24 = add i32 %v1_8f24, %v0_8f24
  %v3_8f24 = inttoptr i32 %v2_8f24 to i32*
  %v4_8f24 = load i32, i32* %v3_8f24, align 4
  %v1_8f28 = load i32, i32* @sl, align 4
  %v2_8f28 = add i32 %v1_8f28, %v0_8f24
  %v3_8f28 = inttoptr i32 %v2_8f28 to i32*
  %v4_8f28 = load i32, i32* %v3_8f28, align 4
  store i32 %v4_8f28, i32* %r1.global-to-local, align 4
  %v1_8f2c = add i32 %v0_8f2c, 1
  %v0_8f30 = load i32, i32* @r6, align 4
  %v4_8f38 = inttoptr i32 %v4_8f28 to i32*
  %v5_8f38 = call i32 @function_11b20(i32 %v4_8f24, i32* %v4_8f38, i32 %v0_8f30, i32 16384)
  %v1_8f3c = load i32, i32* @r7, align 4
  %v9_8f3c = icmp eq i32 %v1_8f2c, %v1_8f3c
  %v0_8f40 = load i32, i32* @r4, align 4
  %v1_8f40 = add i32 %v0_8f40, 4
  store i32 %v1_8f40, i32* @r4, align 4
  br i1 %v9_8f3c, label %dec_label_pc_8f48.loopexit, label %dec_label_pc_8f24

dec_label_pc_8f48.loopexit:                       ; preds = %dec_label_pc_8f24
  %tmp4247 = icmp slt i32 %v1_8f2c, 1
  br i1 %tmp4247, label %dec_label_pc_8f10, label %dec_label_pc_8f14.lr.ph

dec_label_pc_8f14.lr.ph:                          ; preds = %dec_label_pc_8f48.preheader, %dec_label_pc_8f48.loopexit
  br label %dec_label_pc_8f14

dec_label_pc_8f4c.loopexit:                       ; preds = %dec_label_pc_8f64
  %tmp42 = icmp slt i32 %v0_8f8c, 1
  br i1 %tmp42, label %dec_label_pc_8f10, label %dec_label_pc_8f14

dec_label_pc_8f54:                                ; preds = %dec_label_pc_8df4
  store i32 %v24_8cbc, i32* %fp.global-to-local, align 4
  ret i32 %v3_8e0c

dec_label_pc_8f5c:                                ; preds = %dec_label_pc_8f14
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8f64

dec_label_pc_8f64:                                ; preds = %dec_label_pc_8f64, %dec_label_pc_8f5c
  %v0_8f64 = phi i32 [ %v1_8f90, %dec_label_pc_8f64 ], [ 0, %dec_label_pc_8f5c ]
  %v1_8f64 = load i32, i32* @sl, align 4
  %v2_8f64 = add i32 %v1_8f64, %v0_8f64
  %v3_8f64 = inttoptr i32 %v2_8f64 to i32*
  %v4_8f64 = load i32, i32* %v3_8f64, align 4
  store i32 %v4_8f64, i32* @r4, align 4
  %v0_8f68 = load i32, i32* @r6, align 4
  store i32 %v0_8f68, i32* @r1, align 4
  %v1_8f70 = inttoptr i32 %v4_8f64 to i8*
  %v2_8f70 = call i32 @function_e8ac(i8* %v1_8f70)
  %v0_8f74 = load i32, i32* @r5, align 4
  %v1_8f74 = add i32 %v0_8f74, 1
  store i32 %v1_8f74, i32* @r5, align 4
  %v0_8f78 = load i32, i32* @fp, align 4
  %v1_8f78 = load i32, i32* @sb, align 4
  %v2_8f78 = add i32 %v1_8f78, %v0_8f78
  %v3_8f78 = inttoptr i32 %v2_8f78 to i32*
  %v4_8f78 = load i32, i32* %v3_8f78, align 4
  %v0_8f7c = load i32, i32* @r4, align 4
  store i32 %v0_8f7c, i32* %r1.global-to-local, align 4
  %v0_8f80 = load i32, i32* @r6, align 4
  %v4_8f88 = inttoptr i32 %v0_8f7c to i32*
  %v5_8f88 = call i32 @function_11b20(i32 %v4_8f78, i32* %v4_8f88, i32 %v0_8f80, i32 16384)
  %v0_8f8c = load i32, i32* @r5, align 4
  %v1_8f8c = load i32, i32* @r7, align 4
  %v9_8f8c = icmp eq i32 %v0_8f8c, %v1_8f8c
  %v0_8f90 = load i32, i32* @fp, align 4
  %v1_8f90 = add i32 %v0_8f90, 4
  store i32 %v1_8f90, i32* @fp, align 4
  br i1 %v9_8f8c, label %dec_label_pc_8f4c.loopexit, label %dec_label_pc_8f64

; uselistorder directives
  uselistorder i32 %v1_8f90, { 1, 0 }
  uselistorder i32 %v0_8f8c, { 1, 0 }
  uselistorder i32 %v1_8f40, { 1, 0 }
  uselistorder i32 %v1_8f2c, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_8eb0, { 1, 0 }
  uselistorder i32 %v8_8e80, { 1, 2, 0 }
  uselistorder i32 %v0_8e60, { 1, 0, 2 }
  uselistorder i32 %v3_8e0c, { 1, 3, 2, 0 }
  uselistorder i32 %v1_8dfc, { 1, 2, 0 }
  uselistorder i32 %v3_8dd0, { 1, 0 }
  uselistorder i32 %v3_8dac, { 1, 0 }
  uselistorder i32 %v3_8d14, { 0, 2, 1 }
  uselistorder i32 %v1_8cc0, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_8f14.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_8f14, { 1, 0 }
  uselistorder label %dec_label_pc_8f10, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_8ea4, { 1, 0 }
  uselistorder label %dec_label_pc_8da0, { 1, 0 }
}

define i32 @function_8fa0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8fa0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_8fa0 = load i32, i32* @sb, align 4
  %v24_8fa0 = load i32, i32* @fp, align 4
  %v1_8fa4 = urem i32 %arg1, 256
  store i32 %v1_8fa4, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_8fa4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_8fbc = urem i32 %arg3, 256
  store i32 %v1_8fbc, i32* @r4, align 4
  %v2_8fc0 = call i32 @function_11e9c(i32 %v1_8fa4, i32 4)
  %v0_8fc4 = load i32, i32* @r5, align 4
  store i32 %v0_8fc4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8fd4 = load i32, i32* @r4, align 4
  store i32 %v0_8fd4, i32* %r0.global-to-local, align 4
  %v5_8fd8 = inttoptr i32 %v0_8fc4 to i32*
  %v6_8fd8 = call i32 @function_85e0(i32 %v0_8fd4, i32* %v5_8fd8, i32 2, i32 0)
  %v1_8fe4 = urem i32 %v6_8fd8, 256
  store i32 %v1_8fe4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8ff0 = load i32, i32* @r5, align 4
  store i32 %v0_8ff0, i32* %r1.global-to-local, align 4
  %v0_8ff4 = load i32, i32* @r4, align 4
  store i32 %v0_8ff4, i32* %r0.global-to-local, align 4
  %v5_8ff8 = trunc i32 %v6_8fd8 to i8
  %v6_8ffc = inttoptr i32 %v0_8ff0 to i32*
  %v7_8ffc = call i32 @function_85e0(i32 %v0_8ff4, i32* %v6_8ffc, i32 3, i32 65535)
  %v0_9000 = load i32, i32* @r5, align 4
  store i32 %v0_9000, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8ffc, i32* %fp.global-to-local, align 4
  %v0_9010 = load i32, i32* @r4, align 4
  store i32 %v0_9010, i32* %r0.global-to-local, align 4
  %v4_9014 = inttoptr i32 %v0_9000 to i32*
  %v5_9014 = call i32 @function_85e0(i32 %v0_9010, i32* %v4_9014, i32 4, i32 64)
  %v1_901c = urem i32 %v5_9014, 256
  store i32 %v1_901c, i32* %ip.global-to-local, align 4
  %v0_9020 = load i32, i32* @r5, align 4
  store i32 %v0_9020, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_902c = load i32, i32* @r4, align 4
  store i32 %v0_902c, i32* %r0.global-to-local, align 4
  %v5_9030 = trunc i32 %v5_9014 to i8
  %v6_9034 = inttoptr i32 %v0_9020 to i32*
  %v7_9034 = call i32 @function_85e0(i32 %v0_902c, i32* %v6_9034, i32 5, i32 0)
  %v1_9040 = urem i32 %v7_9034, 256
  store i32 %v1_9040, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_904c = load i32, i32* @r5, align 4
  store i32 %v0_904c, i32* %r1.global-to-local, align 4
  %v0_9050 = load i32, i32* @r4, align 4
  store i32 %v0_9050, i32* %r0.global-to-local, align 4
  %v5_9058 = inttoptr i32 %v0_904c to i32*
  %v6_9058 = call i32 @function_85e0(i32 %v0_9050, i32* %v5_9058, i32 6, i32 65535)
  %v0_9060 = load i32, i32* @r5, align 4
  store i32 %v0_9060, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9058, i32* @r7, align 4
  %v0_9070 = load i32, i32* @r4, align 4
  store i32 %v0_9070, i32* %r0.global-to-local, align 4
  %v4_9074 = inttoptr i32 %v0_9060 to i32*
  %v5_9074 = call i32 @function_85e0(i32 %v0_9070, i32* %v4_9074, i32 7, i32 65535)
  %v0_9078 = load i32, i32* @r5, align 4
  store i32 %v0_9078, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9074, i32* %sb.global-to-local, align 4
  %v0_9088 = load i32, i32* @r4, align 4
  store i32 %v0_9088, i32* %r0.global-to-local, align 4
  %v4_908c = inttoptr i32 %v0_9078 to i32*
  %v5_908c = call i32 @function_85e0(i32 %v0_9088, i32* %v4_908c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9098 = load i32, i32* @r5, align 4
  store i32 %v0_9098, i32* %r1.global-to-local, align 4
  store i32 %v5_908c, i32* @r6, align 4
  %v0_90a0 = load i32, i32* @r4, align 4
  store i32 %v0_90a0, i32* %r0.global-to-local, align 4
  %v4_90a4 = inttoptr i32 %v0_9098 to i32*
  %v5_90a4 = call i32 @function_85e0(i32 %v0_90a0, i32* %v4_90a4, i32 1, i32 1)
  %v2_90b0 = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_90b0, i32* %r3.global-to-local, align 4
  %v1_90b4 = urem i32 %v5_90a4, 256
  store i32 %v1_90b4, i32* %ip.global-to-local, align 4
  %v0_90b8 = load i32, i32* @r5, align 4
  store i32 %v0_90b8, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_90c0 = load i32, i32* @r4, align 4
  store i32 %v0_90c0, i32* %r0.global-to-local, align 4
  %v5_90c8 = inttoptr i32 %v0_90b8 to i32*
  %v6_90c8 = call i32 @function_85e0(i32 %v0_90c0, i32* %v5_90c8, i32 25, i32 %v2_90b0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_90dc = call i32 @function_11bb0(i32 2, i32 3, i32 17)
  store i32 %v3_90dc, i32* %r0.global-to-local, align 4
  %v7_90e0 = icmp eq i32 %v3_90dc, -1
  store i1 %v7_90e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90e0, label %dec_label_pc_9508, label %dec_label_pc_90ec

dec_label_pc_90ec:                                ; preds = %dec_label_pc_8fa0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_90f4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_90f4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9108 = call i32 @function_11b80(i32 %v3_90dc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9108, i32* %r0.global-to-local, align 4
  %v7_910c = icmp eq i32 %v6_9108, -1
  store i1 %v7_910c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_910c, label %dec_label_pc_9500, label %dec_label_pc_9114

dec_label_pc_9114:                                ; preds = %dec_label_pc_90ec
  %v0_9114 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9120 = urem i32 %v0_9114, 65536
  store i32 %v3_9120, i32* %r2.global-to-local, align 4
  %v3_9124 = icmp ugt i32 %v3_9120, 1459
  %v9_9124 = icmp eq i32 %v3_9120, 1460
  store i1 %v9_9124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9124, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9114
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9114, %bb
  %v0_912c = phi i32 [ %v3_9120, %dec_label_pc_9114 ], [ 1460, %bb ]
  %v0_9130 = load i32, i32* %fp.global-to-local, align 4
  %v3_9130 = mul i32 %v0_9130, 65536
  store i32 %v3_9130, i32* %r0.global-to-local, align 4
  %v3_9134 = urem i32 %v0_9130, 65536
  store i32 %v3_9134, i32* %r2.global-to-local, align 4
  %v0_9138 = load i32, i32* @sl, align 4
  %v2_9138 = icmp eq i32 %v0_9138, 0
  store i1 %v2_9138, i1* %cpsr_z.global-to-local, align 1
  %v0_913c = load i32, i32* %sb.global-to-local, align 4
  %v0_9140 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_9138, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_912c, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_9168 = phi i32 [ %v3_9134, %bb71 ], [ %v0_912c, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9150 = urem i32 %v0_9140, 65536
  store i32 %v3_9150, i32* %r3.global-to-local, align 4
  %v3_9154 = urem i32 %v0_913c, 65536
  store i32 %v3_9154, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_9170

.thread:                                          ; preds = %bb74
  %v6_9164 = add nsw i32 %v5_9168, 28
  store i32 %v6_9164, i32* @fp, align 4
  %v6_9168 = add nsw i32 %v5_9168, 8
  store i32 %v6_9168, i32* @sb, align 4
  br label %dec_label_pc_92e4

dec_label_pc_9170:                                ; preds = %bb74
  %v1_9174 = add nuw nsw i32 %v0_912c, 28
  store i32 %v1_9174, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_9174, 256
  %v1_9180 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_9130, 256
  %v3_9184 = urem i32 %tmp76, 256
  %v2_9198 = icmp eq i32 %v1_9040, 0
  store i1 %v2_9198, i1* %cpsr_z.global-to-local, align 1
  %v1_919c = urem i32 %v0_9130, 256
  %v1_91a4 = add nuw nsw i32 %v0_912c, 8
  store i32 %v1_91a4, i32* @sb, align 4
  %v1_91ac = urem i32 %v0_9140, 256
  %v1_91b0 = urem i32 %v0_913c, 256
  store i32 %v1_91b0, i32* %ip.global-to-local, align 4
  store i32 %v1_9180, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_91a4, 256
  %v4_91bc = mul nuw nsw i32 %v1_919c, 256
  %v5_91bc = or i32 %v4_91bc, %v3_9184
  store i32 %v5_91bc, i32* %r0.global-to-local, align 4
  %v3_91c0 = mul nuw nsw i32 %v1_91ac, 256
  store i32 %v3_91c0, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_913c, 256
  %v3_91c4 = urem i32 %tmp78, 256
  %v1_91c8 = and i32 %tmp77, 65280
  store i32 %v1_91c8, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_9174, 256
  %v4_91cc = urem i32 %tmp79, 256
  %v5_91cc = or i32 %v4_91cc, %v1_9180
  store i32 %v5_91cc, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_9140, 256
  %v4_91d0 = urem i32 %tmp80, 256
  %v5_91d0 = or i32 %v4_91d0, %v3_91c0
  store i32 %v5_91d0, i32* @r4, align 4
  %v5_91d4 = trunc i32 %tmp79 to i8
  %v5_91d8 = trunc i32 %tmp76 to i8
  %v4_91dc = mul nuw nsw i32 %v1_91b0, 256
  %v5_91dc = or i32 %v4_91dc, %v3_91c4
  store i32 %v5_91dc, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_91a4, 256
  %v4_91e0 = urem i32 %tmp81, 256
  %v5_91e0 = or i32 %v4_91e0, %v1_91c8
  store i32 %v5_91e0, i32* @r7, align 4
  br i1 %v2_9198, label %dec_label_pc_91e8, label %dec_label_pc_9510

dec_label_pc_91e8:                                ; preds = %dec_label_pc_9170
  %v3_91e836 = udiv i32 %v1_9180, 256
  store i32 %v3_91e836, i32* %ip.global-to-local, align 4
  store i32 %v1_919c, i32* %r0.global-to-local, align 4
  store i32 %v1_91ac, i32* %r1.global-to-local, align 4
  store i32 %v1_91b0, i32* %r2.global-to-local, align 4
  %v3_91f837 = udiv i32 %v1_91c8, 256
  store i32 %v3_91f837, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_925c = sext i8 %v5_8ff8 to i32
  %v4_929c = sext i8 %v5_91d8 to i32
  %sext15 = mul i32 %v0_9130, 16777216
  %v4_92a0 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_9140, 16777216
  %v4_92b8 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_91a4, 16777216
  %v4_92bc = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_913c, 16777216
  %v4_92c0 = sdiv i32 %sext18, 16777216
  %v1_92a8 = trunc i32 %v1_9174 to i8
  %v1_92c8 = trunc i32 %v4_92bc to i8
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %dec_label_pc_9214, %dec_label_pc_91e8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9220 = call i32 @function_11e9c(i32 1510, i32 1)
  store i32 %v2_9220, i32* %r0.global-to-local, align 4
  store i32 %v2_8fc0, i32* %ip.global-to-local, align 4
  %v3_9228 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9228, i32* %r2.global-to-local, align 4
  %v2_922c = load i32, i32* @r6, align 4
  %v5_922c = mul i32 %v2_922c, 4
  %v6_922c = add i32 %v5_922c, %v2_8fc0
  %v7_922c = inttoptr i32 %v6_922c to i32*
  store i32 %v2_9220, i32* %v7_922c, align 4
  %v0_9230 = load i32, i32* %ip.global-to-local, align 4
  %v1_9230 = load i32, i32* %r2.global-to-local, align 4
  %v4_9230 = mul i32 %v1_9230, 4
  %v5_9230 = add i32 %v4_9230, %v0_9230
  %v6_9230 = inttoptr i32 %v5_9230 to i32*
  %v7_9230 = load i32, i32* %v6_9230, align 4
  store i32 %v7_9230, i32* %r1.global-to-local, align 4
  %v1_9234 = inttoptr i32 %v7_9230 to i8*
  %v2_9234 = load i8, i8* %v1_9234, align 1
  %tmp = urem i8 %v2_9234, 16
  %v1_9238 = zext i8 %tmp to i32
  %v1_923c = or i32 %v1_9238, 64
  store i32 %v1_923c, i32* %r3.global-to-local, align 4
  %v1_9240 = trunc i32 %v1_923c to i8
  store i8 %v1_9240, i8* %v1_9234, align 1
  %v0_9244 = load i32, i32* %r1.global-to-local, align 4
  %v1_9244 = inttoptr i32 %v0_9244 to i8*
  %v2_9244 = load i8, i8* %v1_9244, align 1
  %v3_9244 = zext i8 %v2_9244 to i32
  %v1_9248 = and i32 %v3_9244, 240
  %v1_924c = or i32 %v1_9248, 5
  store i32 %v1_924c, i32* %r2.global-to-local, align 4
  %v3_9254 = add i32 %v0_9244, 9
  %v4_9254 = inttoptr i32 %v3_9254 to i8*
  store i8 17, i8* %v4_9254, align 1
  %v0_9258 = load i32, i32* %r2.global-to-local, align 4
  %v1_9258 = trunc i32 %v0_9258 to i8
  %v2_9258 = load i32, i32* %r1.global-to-local, align 4
  %v3_9258 = inttoptr i32 %v2_9258 to i8*
  store i8 %v1_9258, i8* %v3_9258, align 1
  store i32 %v4_925c, i32* %r0.global-to-local, align 4
  %v2_9260 = load i32, i32* %r1.global-to-local, align 4
  %v3_9260 = add i32 %v2_9260, 1
  %v4_9260 = inttoptr i32 %v3_9260 to i8*
  store i8 %v5_8ff8, i8* %v4_9260, align 1
  %v2_9268 = load i32, i32* %r1.global-to-local, align 4
  %v3_9268 = add i32 %v2_9268, 8
  %v4_9268 = inttoptr i32 %v3_9268 to i8*
  store i8 %v5_9030, i8* %v4_9268, align 1
  %v3_926c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_926c, i32* %r2.global-to-local, align 4
  store i32 %v6_90c8, i32* %ip.global-to-local, align 4
  %v3_9274 = mul i32 %v3_926c, 32
  store i32 %v3_9274, i32* %r3.global-to-local, align 4
  %v1_9278 = load i32, i32* %r1.global-to-local, align 4
  %v2_9278 = add i32 %v1_9278, 12
  %v3_9278 = inttoptr i32 %v2_9278 to i32*
  store i32 %v6_90c8, i32* %v3_9278, align 4
  %v0_927c = load i32, i32* %r3.global-to-local, align 4
  %v1_927c = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_927c, -8
  %v5_927c = add i32 %v0_927c, %tmp83
  %v1_9280 = load i32, i32* @r8, align 4
  %v2_9280 = add i32 %v5_927c, %v1_9280
  store i32 %v2_9280, i32* %r3.global-to-local, align 4
  %v1_9284 = add i32 %v2_9280, 16
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  %v1_9288 = load i32, i32* %r1.global-to-local, align 4
  %v2_9288 = add i32 %v1_9288, 16
  %v3_9288 = inttoptr i32 %v2_9288 to i32*
  store i32 %v3_9284, i32* %v3_9288, align 4
  %v0_9290 = load i32, i32* %r2.global-to-local, align 4
  %v1_9290 = add i32 %v0_9290, 1
  store i32 %v1_9290, i32* @r6, align 4
  %v2_9294 = load i32, i32* %r1.global-to-local, align 4
  %v3_9294 = add i32 %v2_9294, 2
  %v4_9294 = inttoptr i32 %v3_9294 to i8*
  store i8 %v5_91d4, i8* %v4_9294, align 1
  store i32 %v4_929c, i32* %ip.global-to-local, align 4
  store i32 %v4_92a0, i32* %r0.global-to-local, align 4
  %v0_92a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_92a4 = add i32 %v0_92a4, 20
  store i32 %v1_92a4, i32* %r3.global-to-local, align 4
  %v3_92a8 = add i32 %v0_92a4, 3
  %v4_92a8 = inttoptr i32 %v3_92a8 to i8*
  store i8 %v1_92a8, i8* %v4_92a8, align 1
  %v0_92ac = load i32, i32* %ip.global-to-local, align 4
  %v1_92ac = trunc i32 %v0_92ac to i8
  %v2_92ac = load i32, i32* %r1.global-to-local, align 4
  %v3_92ac = add i32 %v2_92ac, 4
  %v4_92ac = inttoptr i32 %v3_92ac to i8*
  store i8 %v1_92ac, i8* %v4_92ac, align 1
  %v0_92b0 = load i32, i32* %r0.global-to-local, align 4
  %v1_92b0 = trunc i32 %v0_92b0 to i8
  %v2_92b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_92b0 = add i32 %v2_92b0, 5
  %v4_92b0 = inttoptr i32 %v3_92b0 to i8*
  store i8 %v1_92b0, i8* %v4_92b0, align 1
  %v0_92b4 = load i32, i32* @r4, align 4
  %v1_92b4 = trunc i32 %v0_92b4 to i8
  %v2_92b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_92b4 = add i32 %v2_92b4, 20
  %v4_92b4 = inttoptr i32 %v3_92b4 to i8*
  store i8 %v1_92b4, i8* %v4_92b4, align 1
  store i32 %v4_92b8, i32* %r2.global-to-local, align 4
  store i32 %v4_92bc, i32* %r1.global-to-local, align 4
  store i32 %v4_92c0, i32* %ip.global-to-local, align 4
  %v0_92c4 = load i32, i32* @r6, align 4
  %v1_92c4 = load i32, i32* @sl, align 4
  %v9_92c4 = icmp eq i32 %v0_92c4, %v1_92c4
  store i1 %v9_92c4, i1* %cpsr_z.global-to-local, align 1
  %v2_92c8 = load i32, i32* %r3.global-to-local, align 4
  %v3_92c8 = add i32 %v2_92c8, 5
  %v4_92c8 = inttoptr i32 %v3_92c8 to i8*
  store i8 %v1_92c8, i8* %v4_92c8, align 1
  %v0_92cc = load i32, i32* %r2.global-to-local, align 4
  %v1_92cc = trunc i32 %v0_92cc to i8
  %v2_92cc = load i32, i32* %r3.global-to-local, align 4
  %v3_92cc = add i32 %v2_92cc, 1
  %v4_92cc = inttoptr i32 %v3_92cc to i8*
  store i8 %v1_92cc, i8* %v4_92cc, align 1
  %v0_92d0 = load i32, i32* @r5, align 4
  %v1_92d0 = trunc i32 %v0_92d0 to i8
  %v2_92d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_92d0 = add i32 %v2_92d0, 2
  %v4_92d0 = inttoptr i32 %v3_92d0 to i8*
  store i8 %v1_92d0, i8* %v4_92d0, align 1
  %v0_92d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_92d4 = trunc i32 %v0_92d4 to i8
  %v2_92d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_92d4 = add i32 %v2_92d4, 3
  %v4_92d4 = inttoptr i32 %v3_92d4 to i8*
  store i8 %v1_92d4, i8* %v4_92d4, align 1
  %v0_92d8 = load i32, i32* @r7, align 4
  %v1_92d8 = trunc i32 %v0_92d8 to i8
  %v2_92d8 = load i32, i32* %r3.global-to-local, align 4
  %v3_92d8 = add i32 %v2_92d8, 4
  %v4_92d8 = inttoptr i32 %v3_92d8 to i8*
  store i8 %v1_92d8, i8* %v4_92d8, align 1
  %v0_92dc = load i32, i32* @r6, align 4
  store i32 %v0_92dc, i32* %stack_var_-40, align 4
  %v5_92e0 = icmp slt i32 %v0_92c4, %v1_92c4
  br i1 %v5_92e0, label %dec_label_pc_9214, label %dec_label_pc_92e4

dec_label_pc_92e4:                                ; preds = %dec_label_pc_9544, %dec_label_pc_9214, %.thread
  %v0_92e4 = load i32, i32* @sl, align 4
  %v2_92e4 = icmp eq i32 %v0_92e4, 0
  store i1 %v2_92e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9490 = icmp eq i32 %v3_9134, 65535
  %v2_935c = icmp eq i32 %v1_90b4, 0
  %v2_9324 = icmp eq i32 %v6_90c8, -1
  %v7_9324 = icmp eq i32 %v6_90c8, -1
  br label %dec_label_pc_92ec.outer

dec_label_pc_92ec.outer:                          ; preds = %dec_label_pc_940c, %dec_label_pc_92e4
  %v1_92ec.ph.in = phi i32 [ %v1_9400, %dec_label_pc_940c ], [ %v0_92e4, %dec_label_pc_92e4 ]
  %v0_92ec.ph = phi i1 [ %v2_940c, %dec_label_pc_940c ], [ %v2_92e4, %dec_label_pc_92e4 ]
  %v1_92ec.ph = icmp slt i32 %v1_92ec.ph.in, 0
  %v4_92ec = or i1 %v1_92ec.ph, %v0_92ec.ph
  br label %dec_label_pc_92ec

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92ec.outer, %dec_label_pc_92ec
  br i1 %v4_92ec, label %dec_label_pc_92ec, label %dec_label_pc_92f0

dec_label_pc_92f0:                                ; preds = %dec_label_pc_92ec
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_9364, %dec_label_pc_92f0
  %v1_9310 = phi i32 [ %v1_93fc, %dec_label_pc_9364 ], [ 0, %dec_label_pc_92f0 ]
  %v5_9300 = mul i32 %v1_9310, 24
  %v1_9304 = load i32, i32* @r8, align 4
  %v2_9304 = add i32 %v1_9304, %v5_9300
  store i32 %v2_9304, i32* %r3.global-to-local, align 4
  store i32 %v2_8fc0, i32* %ip.global-to-local, align 4
  %v1_930c = add i32 %v2_9304, 20
  %v2_930c = inttoptr i32 %v1_930c to i8*
  %v3_930c = load i8, i8* %v2_930c, align 1
  %v4_930c = zext i8 %v3_930c to i32
  store i32 %v4_930c, i32* %r2.global-to-local, align 4
  %v4_9310 = mul i32 %v1_9310, 4
  %v5_9310 = add i32 %v4_9310, %v2_8fc0
  %v6_9310 = inttoptr i32 %v5_9310 to i32*
  %v7_9310 = load i32, i32* %v6_9310, align 4
  store i32 %v7_9310, i32* @r5, align 4
  %v7_9314 = icmp eq i8 %v3_930c, 31
  store i1 %v7_9314, i1* %cpsr_z.global-to-local, align 1
  %v1_9318 = add i32 %v7_9310, 20
  store i32 %v1_9318, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_930c, 32
  br i1 %tmp84, label %dec_label_pc_9418, label %dec_label_pc_9320

dec_label_pc_9320:                                ; preds = %dec_label_pc_92fc
  store i32 %v6_90c8, i32* %r0.global-to-local, align 4
  store i1 %v7_9324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9324, label %dec_label_pc_9480, label %dec_label_pc_932c

dec_label_pc_932c:                                ; preds = %dec_label_pc_9418, %dec_label_pc_9320
  store i32 %v3_9134, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9490, label %dec_label_pc_949c, label %dec_label_pc_9340

dec_label_pc_9340:                                ; preds = %dec_label_pc_9480.dec_label_pc_9340_crit_edge, %dec_label_pc_932c
  %v1_9344 = phi i32 [ %v1_9344.pre, %dec_label_pc_9480.dec_label_pc_9340_crit_edge ], [ 65535, %dec_label_pc_932c ]
  store i32 %v3_9150, i32* %r2.global-to-local, align 4
  %v9_9344 = icmp eq i32 %v3_9150, %v1_9344
  store i1 %v9_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9344, label %dec_label_pc_94b8, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_949c.dec_label_pc_934c_crit_edge, %dec_label_pc_9340
  %v1_9350 = phi i32 [ %v1_9350.pre, %dec_label_pc_949c.dec_label_pc_934c_crit_edge ], [ %v1_9344, %dec_label_pc_9340 ]
  store i32 %v3_9154, i32* %r3.global-to-local, align 4
  %v9_9350 = icmp eq i32 %v3_9154, %v1_9350
  store i1 %v9_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9350, label %dec_label_pc_94d4, label %dec_label_pc_9358

dec_label_pc_9358:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_934c
  store i32 %v1_90b4, i32* %ip.global-to-local, align 4
  store i1 %v2_935c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_935c, label %dec_label_pc_9364, label %dec_label_pc_94f0

dec_label_pc_9364:                                ; preds = %dec_label_pc_9358, %dec_label_pc_94d4, %dec_label_pc_94f0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9368 = load i32, i32* @r7, align 4
  %v1_9368 = trunc i32 %v0_9368 to i8
  %v2_9368 = load i32, i32* @r5, align 4
  %v3_9368 = add i32 %v2_9368, 10
  %v4_9368 = inttoptr i32 %v3_9368 to i8*
  store i8 %v1_9368, i8* %v4_9368, align 1
  %v0_936c = load i32, i32* @r7, align 4
  %v1_936c = trunc i32 %v0_936c to i8
  %v2_936c = load i32, i32* @r5, align 4
  %v3_936c = add i32 %v2_936c, 11
  %v4_936c = inttoptr i32 %v3_936c to i8*
  store i8 %v1_936c, i8* %v4_936c, align 1
  %v0_9370 = load i32, i32* @r5, align 4
  store i32 %v0_9370, i32* @r0, align 4
  %v2_9374 = call i32 @function_d0b8(i32 %v0_9370, i32 20)
  %v3_9374 = trunc i32 %v2_9374 to i8
  store i32 %v2_9374, i32* %r0.global-to-local, align 4
  %v4_9378 = sdiv i32 %v2_9374, 256
  store i32 %v4_9378, i32* %r3.global-to-local, align 4
  %v1_937c = trunc i32 %v4_9378 to i8
  %v2_937c = load i32, i32* @r5, align 4
  %v3_937c = add i32 %v2_937c, 11
  %v4_937c = inttoptr i32 %v3_937c to i8*
  store i8 %v1_937c, i8* %v4_937c, align 1
  %v3_9380 = load i32, i32* @r5, align 4
  %v4_9380 = add i32 %v3_9380, 10
  %v5_9380 = inttoptr i32 %v4_9380 to i8*
  store i8 %v3_9374, i8* %v5_9380, align 1
  %v0_9384 = load i32, i32* @r7, align 4
  %v1_9384 = trunc i32 %v0_9384 to i8
  %v2_9384 = load i32, i32* @r6, align 4
  %v3_9384 = add i32 %v2_9384, 6
  %v4_9384 = inttoptr i32 %v3_9384 to i8*
  store i8 %v1_9384, i8* %v4_9384, align 1
  %v0_9388 = load i32, i32* @r7, align 4
  %v1_9388 = trunc i32 %v0_9388 to i8
  %v2_9388 = load i32, i32* @r6, align 4
  %v3_9388 = add i32 %v2_9388, 7
  %v4_9388 = inttoptr i32 %v3_9388 to i8*
  store i8 %v1_9388, i8* %v4_9388, align 1
  %v0_938c = load i32, i32* @r5, align 4
  %v1_938c = add i32 %v0_938c, 24
  %v2_938c = inttoptr i32 %v1_938c to i8*
  %v3_938c = load i8, i8* %v2_938c, align 1
  %v4_938c = zext i8 %v3_938c to i32
  store i32 %v4_938c, i32* %r3.global-to-local, align 4
  %v1_9390 = add i32 %v0_938c, 25
  %v2_9390 = inttoptr i32 %v1_9390 to i8*
  %v3_9390 = load i8, i8* %v2_9390, align 1
  %v4_9390 = zext i8 %v3_9390 to i32
  %v0_9394 = load i32, i32* @r6, align 4
  store i32 %v0_9394, i32* @r1, align 4
  %v4_9398 = mul nuw nsw i32 %v4_9390, 256
  %v5_9398 = or i32 %v4_9398, %v4_938c
  store i32 %v5_9398, i32* %r2.global-to-local, align 4
  store i32 %v0_938c, i32* %r0.global-to-local, align 4
  %v0_93a0 = load i32, i32* @sb, align 4
  store i32 %v0_93a0, i32* %r3.global-to-local, align 4
  %v4_93a4 = call i32 @function_d114(i32 %v0_938c, i32 %v0_9394, i32 %v5_9398, i32 %v0_93a0)
  %v5_93a4 = trunc i32 %v4_93a4 to i8
  store i32 %v4_93a4, i32* %r0.global-to-local, align 4
  %v4_93a838 = udiv i32 %v4_93a4, 256
  %v1_93ac = trunc i32 %v4_93a838 to i8
  %v2_93ac = load i32, i32* @r6, align 4
  %v3_93ac = add i32 %v2_93ac, 7
  %v4_93ac = inttoptr i32 %v3_93ac to i8*
  store i8 %v1_93ac, i8* %v4_93ac, align 1
  %v3_93b0 = load i32, i32* @r6, align 4
  %v4_93b0 = add i32 %v3_93b0, 6
  %v5_93b0 = inttoptr i32 %v4_93b0 to i8*
  store i8 %v5_93a4, i8* %v5_93b0, align 1
  %v3_93b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_93b4, i32* %r3.global-to-local, align 4
  %v0_93b8 = load i32, i32* @r5, align 4
  %v1_93b8 = add i32 %v0_93b8, 20
  %v2_93b8 = inttoptr i32 %v1_93b8 to i32*
  %v3_93b8 = load i32, i32* %v2_93b8, align 4
  %v3_93c0 = udiv i32 %v3_93b8, 65536
  store i32 %v3_93c0, i32* %r2.global-to-local, align 4
  %v5_93c4 = mul i32 %v3_93b4, 24
  %v1_93c8 = load i32, i32* @r8, align 4
  %v2_93c8 = add i32 %v1_93c8, %v5_93c4
  store i32 %v2_93c8, i32* %ip.global-to-local, align 4
  %v3_93cc35 = udiv i32 %v3_93b8, 16777216
  %v1_93d0 = trunc i32 %v3_93cc35 to i8
  %v3_93d0 = add i32 %v2_93c8, 3
  %v4_93d0 = inttoptr i32 %v3_93d0 to i8*
  store i8 %v1_93d0, i8* %v4_93d0, align 1
  %v0_93d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i8
  %v2_93d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_93d4 = add i32 %v2_93d4, 2
  %v4_93d4 = inttoptr i32 %v3_93d4 to i8*
  store i8 %v1_93d4, i8* %v4_93d4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_93dc = load i32, i32* @r5, align 4
  store i32 %v0_93dc, i32* %r1.global-to-local, align 4
  store i32 %v3_90dc, i32* %r0.global-to-local, align 4
  %v0_93e4 = load i32, i32* @fp, align 4
  store i32 %v0_93e4, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_93ec = load i32, i32* %ip.global-to-local, align 4
  %v6_93f4 = inttoptr i32 %v0_93dc to i32*
  %v7_93f4 = call i32 @function_11b4c(i32 %v3_90dc, i32* %v6_93f4, i32 %v0_93e4, i32 16384, i32 %v0_93ec, i32 16)
  %v3_93f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_93f8, i32* %r3.global-to-local, align 4
  %v1_93fc = add i32 %v3_93f8, 1
  store i32 %v1_93fc, i32* %r0.global-to-local, align 4
  %v1_9400 = load i32, i32* @sl, align 4
  %v9_9400 = icmp eq i32 %v1_93fc, %v1_9400
  store i1 %v9_9400, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_93fc, i32* %stack_var_-40, align 4
  %v5_9408 = icmp slt i32 %v1_93fc, %v1_9400
  br i1 %v5_9408, label %dec_label_pc_92fc, label %dec_label_pc_940c

dec_label_pc_940c:                                ; preds = %dec_label_pc_9364
  %v2_940c = icmp eq i32 %v1_9400, 0
  store i1 %v2_940c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_92ec.outer

dec_label_pc_9418:                                ; preds = %dec_label_pc_92fc
  %v1_9418 = add i32 %v2_9304, 16
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  %v0_941c = call i32 @function_e72c()
  store i32 %v0_941c, i32* %r0.global-to-local, align 4
  %v3_9420 = load i32, i32* %stack_var_-40, align 4
  %v5_9428 = mul i32 %v3_9420, 24
  %v1_9430 = load i32, i32* @r8, align 4
  %v2_9430 = add i32 %v1_9430, %v5_9428
  store i32 %v2_9430, i32* %r1.global-to-local, align 4
  %v1_9434 = and i32 %v3_9418, 65280
  store i32 %v1_9434, i32* %r3.global-to-local, align 4
  %v1_942c = udiv i32 %v3_9418, 256
  %v3_9438 = and i32 %v1_942c, 65280
  store i32 %v3_9438, i32* %r2.global-to-local, align 4
  %v3_943c = mul i32 %v3_9418, 16777216
  store i32 %v3_943c, i32* %ip.global-to-local, align 4
  %v1_9440 = add i32 %v2_9430, 20
  %v2_9440 = inttoptr i32 %v1_9440 to i8*
  %v3_9440 = load i8, i8* %v2_9440, align 1
  %v4_9440 = zext i8 %v3_9440 to i32
  %v4_9444 = mul nuw nsw i32 %v1_9434, 256
  %v5_9444 = or i32 %v4_9444, %v3_943c
  store i32 %v5_9444, i32* %ip.global-to-local, align 4
  %v2_944c = call i32 @llvm.bswap.i32(i32 %v3_9418)
  %v7_9450 = lshr i32 %v0_941c, %v4_9440
  %v8_9450 = add i32 %v7_9450, %v2_944c
  store i32 %v8_9450, i32* %r2.global-to-local, align 4
  %v3_945c = mul i32 %v8_9450, 16777216
  %v1_9454 = mul i32 %v8_9450, 256
  %v4_9460 = and i32 %v1_9454, 16711680
  %v5_9460 = or i32 %v4_9460, %v3_945c
  store i32 %v5_9460, i32* %r1.global-to-local, align 4
  store i32 %v6_90c8, i32* %r0.global-to-local, align 4
  %v2_9470 = call i32 @llvm.bswap.i32(i32 %v8_9450)
  store i32 %v2_9470, i32* %r3.global-to-local, align 4
  store i1 %v7_9324, i1* %cpsr_z.global-to-local, align 1
  %v1_9478 = load i32, i32* @r5, align 4
  %v2_9478 = add i32 %v1_9478, 16
  %v3_9478 = inttoptr i32 %v2_9478 to i32*
  store i32 %v2_9470, i32* %v3_9478, align 4
  br i1 %v2_9324, label %dec_label_pc_9480, label %dec_label_pc_932c

dec_label_pc_9480:                                ; preds = %dec_label_pc_9418, %dec_label_pc_9320
  %v0_9480 = call i32 @function_e72c()
  store i32 %v0_9480, i32* %r0.global-to-local, align 4
  store i32 %v3_9134, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9490, i1* %cpsr_z.global-to-local, align 1
  %v1_9494 = load i32, i32* @r5, align 4
  %v2_9494 = add i32 %v1_9494, 12
  %v3_9494 = inttoptr i32 %v2_9494 to i32*
  store i32 %v0_9480, i32* %v3_9494, align 4
  br i1 %v3_9490, label %dec_label_pc_949c, label %dec_label_pc_9480.dec_label_pc_9340_crit_edge

dec_label_pc_9480.dec_label_pc_9340_crit_edge:    ; preds = %dec_label_pc_9480
  %v1_9344.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9340

dec_label_pc_949c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_932c
  %v0_949c = call i32 @function_e72c()
  %v1_949c = trunc i32 %v0_949c to i8
  store i32 %v0_949c, i32* %r0.global-to-local, align 4
  store i32 %v3_9150, i32* %r2.global-to-local, align 4
  %v4_94a4 = sdiv i32 %v0_949c, 256
  store i32 %v4_94a4, i32* %r3.global-to-local, align 4
  %v1_94a8 = load i32, i32* @r4, align 4
  %v9_94a8 = icmp eq i32 %v3_9150, %v1_94a8
  store i1 %v9_94a8, i1* %cpsr_z.global-to-local, align 1
  %v1_94ac = trunc i32 %v4_94a4 to i8
  %v2_94ac = load i32, i32* @r5, align 4
  %v3_94ac = add i32 %v2_94ac, 5
  %v4_94ac = inttoptr i32 %v3_94ac to i8*
  store i8 %v1_94ac, i8* %v4_94ac, align 1
  %v3_94b0 = load i32, i32* @r5, align 4
  %v4_94b0 = add i32 %v3_94b0, 4
  %v5_94b0 = inttoptr i32 %v4_94b0 to i8*
  store i8 %v1_949c, i8* %v5_94b0, align 1
  %v0_94b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94b4, label %dec_label_pc_94b8, label %dec_label_pc_949c.dec_label_pc_934c_crit_edge

dec_label_pc_949c.dec_label_pc_934c_crit_edge:    ; preds = %dec_label_pc_949c
  %v1_9350.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_934c

dec_label_pc_94b8:                                ; preds = %dec_label_pc_949c, %dec_label_pc_9340
  %v0_94b8 = call i32 @function_e72c()
  %v1_94b8 = trunc i32 %v0_94b8 to i8
  store i32 %v0_94b8, i32* %r0.global-to-local, align 4
  %v4_94bc = sdiv i32 %v0_94b8, 256
  store i32 %v4_94bc, i32* %r3.global-to-local, align 4
  %v3_94c0 = load i32, i32* @r5, align 4
  %v4_94c0 = add i32 %v3_94c0, 20
  %v5_94c0 = inttoptr i32 %v4_94c0 to i8*
  store i8 %v1_94b8, i8* %v5_94c0, align 1
  %v0_94c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_94c4 = trunc i32 %v0_94c4 to i8
  %v2_94c4 = load i32, i32* @r6, align 4
  %v3_94c4 = add i32 %v2_94c4, 1
  %v4_94c4 = inttoptr i32 %v3_94c4 to i8*
  store i8 %v1_94c4, i8* %v4_94c4, align 1
  store i32 %v3_9154, i32* %r3.global-to-local, align 4
  %v1_94cc = load i32, i32* @r4, align 4
  %v9_94cc = icmp eq i32 %v3_9154, %v1_94cc
  store i1 %v9_94cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_94cc, label %dec_label_pc_94d4, label %dec_label_pc_9358

dec_label_pc_94d4:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_934c
  %v0_94d4 = call i32 @function_e72c()
  %v1_94d4 = trunc i32 %v0_94d4 to i8
  store i32 %v0_94d4, i32* %r0.global-to-local, align 4
  store i32 %v1_90b4, i32* %ip.global-to-local, align 4
  %v4_94dc = sdiv i32 %v0_94d4, 256
  store i32 %v4_94dc, i32* %r3.global-to-local, align 4
  store i1 %v2_935c, i1* %cpsr_z.global-to-local, align 1
  %v1_94e4 = trunc i32 %v4_94dc to i8
  %v2_94e4 = load i32, i32* @r6, align 4
  %v3_94e4 = add i32 %v2_94e4, 3
  %v4_94e4 = inttoptr i32 %v3_94e4 to i8*
  store i8 %v1_94e4, i8* %v4_94e4, align 1
  %v3_94e8 = load i32, i32* @r6, align 4
  %v4_94e8 = add i32 %v3_94e8, 2
  %v5_94e8 = inttoptr i32 %v4_94e8 to i8*
  store i8 %v1_94d4, i8* %v5_94e8, align 1
  %v0_94ec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94ec, label %dec_label_pc_9364, label %dec_label_pc_94f0

dec_label_pc_94f0:                                ; preds = %dec_label_pc_9358, %dec_label_pc_94d4
  %v0_94f0 = load i32, i32* @r5, align 4
  %v1_94f0 = add i32 %v0_94f0, 28
  store i32 %v1_94f0, i32* %r0.global-to-local, align 4
  store i32 %v0_912c, i32* @r1, align 4
  %v1_94f8 = inttoptr i32 %v1_94f0 to i8*
  %v2_94f8 = call i32 @function_e8ac(i8* %v1_94f8)
  store i32 %v2_94f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9364

dec_label_pc_9500:                                ; preds = %dec_label_pc_90ec
  store i32 %v3_90dc, i32* %r0.global-to-local, align 4
  %v1_9504 = call i32 @function_112cc(i32 %v3_90dc)
  store i32 %v1_9504, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_8fa0, %dec_label_pc_9500
  %v29_950c = phi i32 [ %v3_90dc, %dec_label_pc_8fa0 ], [ %v1_9504, %dec_label_pc_9500 ]
  store i32 %v18_8fa0, i32* %sb.global-to-local, align 4
  store i32 %v24_8fa0, i32* %fp.global-to-local, align 4
  ret i32 %v29_950c

dec_label_pc_9510:                                ; preds = %dec_label_pc_9170
  %v3_9514 = sext i8 %v5_91d4 to i32
  %v7_9514 = sext i8 %v5_91d8 to i32
  %v3_9518 = sdiv i32 %v3_9514, 256
  store i32 %v3_9518, i32* %r0.global-to-local, align 4
  %v3_951c = sdiv i32 %v7_9514, 256
  store i32 %v3_951c, i32* %r1.global-to-local, align 4
  store i32 %v1_91ac, i32* %r2.global-to-local, align 4
  store i32 %v1_91b0, i32* %r3.global-to-local, align 4
  %v3_952834 = udiv i32 %v1_91c8, 256
  store i32 %v3_952834, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_9594 = sext i8 %v5_9030 to i32
  %sext11 = mul i32 %v1_91a4, 16777216
  %v4_95ec = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_9140, 16777216
  %v4_95f0 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_913c, 16777216
  %v4_960c = sdiv i32 %sext13, 16777216
  %v1_95f8 = trunc i32 %v3_951c to i8
  %v1_9614 = trunc i32 %v4_960c to i8
  br label %dec_label_pc_9544

dec_label_pc_9544:                                ; preds = %dec_label_pc_9544, %dec_label_pc_9510
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9550 = call i32 @function_11e9c(i32 1510, i32 1)
  store i32 %v2_9550, i32* %r0.global-to-local, align 4
  store i32 %v2_8fc0, i32* %r1.global-to-local, align 4
  %v3_9558 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9558, i32* %r2.global-to-local, align 4
  %v2_955c = load i32, i32* @r6, align 4
  %v5_955c = mul i32 %v2_955c, 4
  %v6_955c = add i32 %v5_955c, %v2_8fc0
  %v7_955c = inttoptr i32 %v6_955c to i32*
  store i32 %v2_9550, i32* %v7_955c, align 4
  %v0_9560 = load i32, i32* %r1.global-to-local, align 4
  %v1_9560 = load i32, i32* %r2.global-to-local, align 4
  %v4_9560 = mul i32 %v1_9560, 4
  %v5_9560 = add i32 %v4_9560, %v0_9560
  %v6_9560 = inttoptr i32 %v5_9560 to i32*
  %v7_9560 = load i32, i32* %v6_9560, align 4
  store i32 %v7_9560, i32* %r1.global-to-local, align 4
  %v1_9564 = inttoptr i32 %v7_9560 to i8*
  %v2_9564 = load i8, i8* %v1_9564, align 1
  %tmp85 = urem i8 %v2_9564, 16
  %v1_9568 = zext i8 %tmp85 to i32
  %v1_956c = or i32 %v1_9568, 64
  store i32 %v1_956c, i32* %r3.global-to-local, align 4
  %v1_9570 = trunc i32 %v1_956c to i8
  store i8 %v1_9570, i8* %v1_9564, align 1
  %v0_9574 = load i32, i32* %r1.global-to-local, align 4
  %v1_9574 = inttoptr i32 %v0_9574 to i8*
  %v2_9574 = load i8, i8* %v1_9574, align 1
  %v3_9574 = zext i8 %v2_9574 to i32
  %v1_9578 = and i32 %v3_9574, 240
  %v1_957c = or i32 %v1_9578, 5
  store i32 %v1_957c, i32* %r2.global-to-local, align 4
  %v3_9584 = add i32 %v0_9574, 9
  %v4_9584 = inttoptr i32 %v3_9584 to i8*
  store i8 17, i8* %v4_9584, align 1
  %v0_9588 = load i32, i32* %r2.global-to-local, align 4
  %v1_9588 = trunc i32 %v0_9588 to i8
  %v2_9588 = load i32, i32* %r1.global-to-local, align 4
  %v3_9588 = inttoptr i32 %v2_9588 to i8*
  store i8 %v1_9588, i8* %v3_9588, align 1
  %v2_9590 = load i32, i32* %r1.global-to-local, align 4
  %v3_9590 = add i32 %v2_9590, 1
  %v4_9590 = inttoptr i32 %v3_9590 to i8*
  store i8 %v5_8ff8, i8* %v4_9590, align 1
  store i32 %v4_9594, i32* %r0.global-to-local, align 4
  %v2_9598 = load i32, i32* %r1.global-to-local, align 4
  %v3_9598 = add i32 %v2_9598, 8
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v5_9030, i8* %v4_9598, align 1
  %v3_959c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_959c, i32* %r2.global-to-local, align 4
  store i32 %v6_90c8, i32* %ip.global-to-local, align 4
  %v3_95a4 = mul i32 %v3_959c, 32
  store i32 %v3_95a4, i32* %r3.global-to-local, align 4
  %v1_95a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, 12
  %v3_95a8 = inttoptr i32 %v2_95a8 to i32*
  store i32 %v6_90c8, i32* %v3_95a8, align 4
  %v0_95ac = load i32, i32* %r3.global-to-local, align 4
  %v1_95ac = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_95ac, -8
  %v5_95ac = add i32 %v0_95ac, %tmp86
  %v1_95b0 = load i32, i32* @r8, align 4
  %v2_95b0 = add i32 %v5_95ac, %v1_95b0
  store i32 %v2_95b0, i32* %r3.global-to-local, align 4
  %v1_95b4 = add i32 %v2_95b0, 16
  %v2_95b4 = inttoptr i32 %v1_95b4 to i32*
  %v3_95b4 = load i32, i32* %v2_95b4, align 4
  store i32 %v3_95b4, i32* %ip.global-to-local, align 4
  %v1_95b8 = add i32 %v1_95ac, 1
  store i32 %v1_95b8, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_95c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_95c4 = add i32 %v2_95c4, 6
  %v4_95c4 = inttoptr i32 %v3_95c4 to i8*
  store i8 64, i8* %v4_95c4, align 1
  %v0_95c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_95c8 = trunc i32 %v0_95c8 to i8
  %v2_95c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_95c8 = add i32 %v2_95c8, 7
  %v4_95c8 = inttoptr i32 %v3_95c8 to i8*
  store i8 %v1_95c8, i8* %v4_95c8, align 1
  %v0_95cc = load i32, i32* %ip.global-to-local, align 4
  %v1_95cc = load i32, i32* %r1.global-to-local, align 4
  %v2_95cc = add i32 %v1_95cc, 16
  %v3_95cc = inttoptr i32 %v2_95cc to i32*
  store i32 %v0_95cc, i32* %v3_95cc, align 4
  store i32 %v3_9518, i32* %r3.global-to-local, align 4
  store i32 %v7_9514, i32* %ip.global-to-local, align 4
  %v2_95dc = load i32, i32* %r1.global-to-local, align 4
  %v3_95dc = add i32 %v2_95dc, 2
  %v4_95dc = inttoptr i32 %v3_95dc to i8*
  store i8 %v5_91d4, i8* %v4_95dc, align 1
  %v0_95e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95e0 = trunc i32 %v0_95e0 to i8
  %v2_95e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_95e0 = add i32 %v2_95e0, 3
  %v4_95e0 = inttoptr i32 %v3_95e0 to i8*
  store i8 %v1_95e0, i8* %v4_95e0, align 1
  %v0_95e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_95e4 = trunc i32 %v0_95e4 to i8
  %v2_95e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_95e4 = add i32 %v2_95e4, 4
  %v4_95e4 = inttoptr i32 %v3_95e4 to i8*
  store i8 %v1_95e4, i8* %v4_95e4, align 1
  store i32 %v3_951c, i32* %r2.global-to-local, align 4
  store i32 %v4_95ec, i32* %r3.global-to-local, align 4
  store i32 %v4_95f0, i32* %ip.global-to-local, align 4
  %v0_95f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95f4 = add i32 %v0_95f4, 20
  store i32 %v1_95f4, i32* %r0.global-to-local, align 4
  %v3_95f8 = add i32 %v0_95f4, 5
  %v4_95f8 = inttoptr i32 %v3_95f8 to i8*
  store i8 %v1_95f8, i8* %v4_95f8, align 1
  %v0_95fc = load i32, i32* @r4, align 4
  %v1_95fc = trunc i32 %v0_95fc to i8
  %v2_95fc = load i32, i32* %r1.global-to-local, align 4
  %v3_95fc = add i32 %v2_95fc, 20
  %v4_95fc = inttoptr i32 %v3_95fc to i8*
  store i8 %v1_95fc, i8* %v4_95fc, align 1
  %v0_9600 = load i32, i32* %r3.global-to-local, align 4
  %v1_9600 = trunc i32 %v0_9600 to i8
  %v2_9600 = load i32, i32* %r0.global-to-local, align 4
  %v3_9600 = add i32 %v2_9600, 5
  %v4_9600 = inttoptr i32 %v3_9600 to i8*
  store i8 %v1_9600, i8* %v4_9600, align 1
  %v0_9604 = load i32, i32* %ip.global-to-local, align 4
  %v1_9604 = trunc i32 %v0_9604 to i8
  %v2_9604 = load i32, i32* %r0.global-to-local, align 4
  %v3_9604 = add i32 %v2_9604, 1
  %v4_9604 = inttoptr i32 %v3_9604 to i8*
  store i8 %v1_9604, i8* %v4_9604, align 1
  %v0_9608 = load i32, i32* @r5, align 4
  %v1_9608 = trunc i32 %v0_9608 to i8
  %v2_9608 = load i32, i32* %r0.global-to-local, align 4
  %v3_9608 = add i32 %v2_9608, 2
  %v4_9608 = inttoptr i32 %v3_9608 to i8*
  store i8 %v1_9608, i8* %v4_9608, align 1
  store i32 %v4_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  %v1_9610 = load i32, i32* @sl, align 4
  %v9_9610 = icmp eq i32 %v0_9610, %v1_9610
  store i1 %v9_9610, i1* %cpsr_z.global-to-local, align 1
  %v2_9614 = load i32, i32* %r0.global-to-local, align 4
  %v3_9614 = add i32 %v2_9614, 3
  %v4_9614 = inttoptr i32 %v3_9614 to i8*
  store i8 %v1_9614, i8* %v4_9614, align 1
  %v0_9618 = load i32, i32* @r7, align 4
  %v1_9618 = trunc i32 %v0_9618 to i8
  %v2_9618 = load i32, i32* %r0.global-to-local, align 4
  %v3_9618 = add i32 %v2_9618, 4
  %v4_9618 = inttoptr i32 %v3_9618 to i8*
  store i8 %v1_9618, i8* %v4_9618, align 1
  %v0_961c = load i32, i32* @r6, align 4
  store i32 %v0_961c, i32* %stack_var_-40, align 4
  %v5_9620 = icmp slt i32 %v0_9610, %v1_9610
  br i1 %v5_9620, label %dec_label_pc_9544, label %dec_label_pc_92e4

; uselistorder directives
  uselistorder i32 %v1_95ac, { 1, 0 }
  uselistorder i32 %v3_951c, { 2, 1, 0 }
  uselistorder i32 %v3_9518, { 1, 0 }
  uselistorder i32 %v7_9514, { 1, 0 }
  uselistorder i32 %v4_94dc, { 1, 0 }
  uselistorder i32 %v0_94d4, { 0, 2, 1 }
  uselistorder i32 %v0_94b8, { 0, 2, 1 }
  uselistorder i32 %v4_94a4, { 1, 0 }
  uselistorder i32 %v0_949c, { 0, 2, 1 }
  uselistorder i32 %v2_9470, { 1, 0 }
  uselistorder i32 %v8_9450, { 2, 0, 1, 3 }
  uselistorder i32 %v3_943c, { 1, 0 }
  uselistorder i32 %v3_9418, { 1, 3, 2, 0 }
  uselistorder i1 %v2_940c, { 1, 0 }
  uselistorder i32 %v1_9400, { 1, 2, 3, 0 }
  uselistorder i32 %v1_93fc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_93a4, { 0, 2, 1 }
  uselistorder i32 %v0_938c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_9378, { 1, 0 }
  uselistorder i32 %v2_9374, { 0, 2, 1 }
  uselistorder i1 %v7_9324, { 2, 1, 0 }
  uselistorder i1 %v3_9490, { 1, 0, 2, 3 }
  uselistorder i8 %v5_91d4, { 0, 2, 1 }
  uselistorder i32 %v3_91c0, { 1, 0 }
  uselistorder i32 %v1_91b0, { 2, 3, 0, 1 }
  uselistorder i32 %v1_91ac, { 1, 2, 0 }
  uselistorder i32 %v1_91a4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_919c, { 1, 0 }
  uselistorder i32 %v1_9174, { 2, 1, 0, 3 }
  uselistorder i32 %v3_9154, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_9134, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_9130, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_912c, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_9120, { 3, 1, 2, 0 }
  uselistorder i1 %v7_910c, { 1, 0 }
  uselistorder i1 %v7_90e0, { 1, 0 }
  uselistorder i32 %v3_90dc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_90c8, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_90b4, { 3, 1, 2, 0 }
  uselistorder i32 %v1_9040, { 1, 0 }
  uselistorder i8 %v5_9030, { 1, 0, 2 }
  uselistorder i32 %v5_9014, { 1, 0 }
  uselistorder i8 %v5_8ff8, { 0, 2, 1 }
  uselistorder i32 %v6_8fd8, { 1, 0 }
  uselistorder i32 %v2_8fc0, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_8fa4, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 48, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_9508, { 1, 0 }
  uselistorder label %dec_label_pc_94f0, { 1, 0 }
  uselistorder label %dec_label_pc_9364, { 2, 1, 0 }
  uselistorder label %dec_label_pc_92ec, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_962c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_962c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_962c = load i32, i32* @r4, align 4
  %v15_962c = load i32, i32* @r8, align 4
  %v21_962c = load i32, i32* @sl, align 4
  %v1_9630 = urem i32 %arg1, 256
  store i32 %v1_9630, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9630, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9648 = urem i32 %arg3, 256
  store i32 %v1_9648, i32* @r4, align 4
  %v2_964c = call i32 @function_11e9c(i32 %v1_9630, i32 4)
  %v0_9650 = load i32, i32* @r5, align 4
  store i32 %v0_9650, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9660 = load i32, i32* @r4, align 4
  store i32 %v0_9660, i32* %r0.global-to-local, align 4
  %v5_9664 = inttoptr i32 %v0_9650 to i32*
  %v6_9664 = call i32 @function_85e0(i32 %v0_9660, i32* %v5_9664, i32 2, i32 0)
  %v1_9670 = urem i32 %v6_9664, 256
  store i32 %v1_9670, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_967c = load i32, i32* @r5, align 4
  store i32 %v0_967c, i32* %r1.global-to-local, align 4
  %v0_9680 = load i32, i32* @r4, align 4
  store i32 %v0_9680, i32* %r0.global-to-local, align 4
  %v5_9684 = trunc i32 %v6_9664 to i8
  %v6_9688 = inttoptr i32 %v0_967c to i32*
  %v7_9688 = call i32 @function_85e0(i32 %v0_9680, i32* %v6_9688, i32 3, i32 65535)
  %v0_968c = load i32, i32* @r5, align 4
  store i32 %v0_968c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9688, i32* @r7, align 4
  %v0_969c = load i32, i32* @r4, align 4
  store i32 %v0_969c, i32* %r0.global-to-local, align 4
  %v4_96a0 = inttoptr i32 %v0_968c to i32*
  %v5_96a0 = call i32 @function_85e0(i32 %v0_969c, i32* %v4_96a0, i32 4, i32 64)
  %v1_96a8 = urem i32 %v5_96a0, 256
  store i32 %v1_96a8, i32* %ip.global-to-local, align 4
  %v0_96ac = load i32, i32* @r5, align 4
  store i32 %v0_96ac, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96b8 = load i32, i32* @r4, align 4
  store i32 %v0_96b8, i32* %r0.global-to-local, align 4
  %v5_96bc = trunc i32 %v5_96a0 to i8
  %v6_96c0 = inttoptr i32 %v0_96ac to i32*
  %v7_96c0 = call i32 @function_85e0(i32 %v0_96b8, i32* %v6_96c0, i32 5, i32 1)
  %v1_96cc = urem i32 %v7_96c0, 256
  store i32 %v1_96cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_96d8 = load i32, i32* @r5, align 4
  store i32 %v0_96d8, i32* %r1.global-to-local, align 4
  %v0_96dc = load i32, i32* @r4, align 4
  store i32 %v0_96dc, i32* %r0.global-to-local, align 4
  %v5_96e4 = inttoptr i32 %v0_96d8 to i32*
  %v6_96e4 = call i32 @function_85e0(i32 %v0_96dc, i32* %v5_96e4, i32 6, i32 65535)
  %v0_96ec = load i32, i32* @r5, align 4
  store i32 %v0_96ec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_96e4, i32* @sl, align 4
  %v0_96fc = load i32, i32* @r4, align 4
  store i32 %v0_96fc, i32* %r0.global-to-local, align 4
  %v4_9700 = inttoptr i32 %v0_96ec to i32*
  %v5_9700 = call i32 @function_85e0(i32 %v0_96fc, i32* %v4_9700, i32 7, i32 65535)
  %v0_9704 = load i32, i32* @r5, align 4
  store i32 %v0_9704, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9700, i32* @r8, align 4
  %v0_9714 = load i32, i32* @r4, align 4
  store i32 %v0_9714, i32* %r0.global-to-local, align 4
  %v4_9718 = inttoptr i32 %v0_9704 to i32*
  %v5_9718 = call i32 @function_85e0(i32 %v0_9714, i32* %v4_9718, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9728 = load i32, i32* @r5, align 4
  store i32 %v0_9728, i32* %r1.global-to-local, align 4
  %v0_972c = load i32, i32* @r4, align 4
  store i32 %v0_972c, i32* %r0.global-to-local, align 4
  %v4_9730 = inttoptr i32 %v0_9728 to i32*
  %v5_9730 = call i32 @function_85e0(i32 %v0_972c, i32* %v4_9730, i32 1, i32 1)
  %v1_9738 = urem i32 %v5_9730, 256
  store i32 %v1_9738, i32* %ip.global-to-local, align 4
  %v0_973c = load i32, i32* @r5, align 4
  store i32 %v0_973c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9748 = load i32, i32* @r4, align 4
  store i32 %v0_9748, i32* %r0.global-to-local, align 4
  %v5_9750 = inttoptr i32 %v0_973c to i32*
  %v6_9750 = call i32 @function_85e0(i32 %v0_9748, i32* %v5_9750, i32 19, i32 0)
  %v0_9758 = load i32, i32* @r5, align 4
  store i32 %v0_9758, i32* %r1.global-to-local, align 4
  %v2_975c = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_975c, i32* %r3.global-to-local, align 4
  store i32 %v6_9750, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9768 = load i32, i32* @r4, align 4
  store i32 %v0_9768, i32* %r0.global-to-local, align 4
  %v4_976c = inttoptr i32 %v0_9758 to i32*
  %v5_976c = call i32 @function_85e0(i32 %v0_9768, i32* %v4_976c, i32 25, i32 %v2_975c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9780 = call i32 @function_11bb0(i32 2, i32 3, i32 6)
  store i32 %v3_9780, i32* %r0.global-to-local, align 4
  %v7_9784 = icmp eq i32 %v3_9780, -1
  store i1 %v7_9784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9784, label %dec_label_pc_9c68, label %dec_label_pc_9790

dec_label_pc_9790:                                ; preds = %dec_label_pc_962c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9798 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9798, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_97ac = call i32 @function_11b80(i32 %v3_9780, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_97ac, i32* %r0.global-to-local, align 4
  %v7_97b0 = icmp eq i32 %v6_97ac, -1
  store i1 %v7_97b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97b0, label %dec_label_pc_9c60, label %dec_label_pc_97b8

dec_label_pc_97b8:                                ; preds = %dec_label_pc_9790
  %v0_97b8 = load i32, i32* @sl, align 4
  %v3_97b8 = mul i32 %v0_97b8, 65536
  store i32 %v3_97b8, i32* %sl.global-to-local, align 4
  %v0_97bc = load i32, i32* @r8, align 4
  %v3_97bc = mul i32 %v0_97bc, 65536
  store i32 %v3_97bc, i32* %r8.global-to-local, align 4
  %v0_97c4 = load i32, i32* @r7, align 4
  %v3_97c4 = mul i32 %v0_97c4, 65536
  %v0_97c8 = load i32, i32* @r6, align 4
  %v1_97c8 = urem i32 %v0_97c8, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_97d0 = urem i32 %v0_97c4, 65536
  store i32 %v3_97d0, i32* %r2.global-to-local, align 4
  %v3_97d4 = urem i32 %v0_97b8, 65536
  store i32 %v3_97d4, i32* %r3.global-to-local, align 4
  %v3_97d8 = urem i32 %v0_97bc, 65536
  store i32 %v3_97d8, i32* %r1.global-to-local, align 4
  %v0_97dc = load i32, i32* @fp, align 4
  %v2_97dc = icmp eq i32 %v0_97dc, 0
  store i1 %v2_97dc, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_97dc, 1
  br i1 %tmp88, label %dec_label_pc_9d88, label %dec_label_pc_97fc

dec_label_pc_97fc:                                ; preds = %dec_label_pc_97b8
  %v3_9800 = mul i32 %v5_9718, 65536
  %v0_97c4.not = or i32 %v0_97c4, -65536
  %v1_9808 = xor i32 %v0_97c4.not, 65535
  %v1_9810 = add i32 %v3_9800, 4325376
  %v1_9814 = urem i32 %v0_97b8, 256
  %v3_981c = udiv i32 %v1_9810, 256
  %v1_9820 = add i32 %v3_9800, 524288
  %v1_9828 = add i32 %v3_9800, 1835008
  %v1_982c = urem i32 %v0_97bc, 256
  %v1_9830 = and i32 %v3_981c, 65280
  store i32 %v1_9830, i32* %r0.global-to-local, align 4
  %v3_9838 = udiv i32 %v1_9828, 256
  %tmp89 = mul nsw i32 %v1_9808, 256
  %v1_9850 = and i32 %v3_9838, 65280
  store i32 %v1_9850, i32* %ip.global-to-local, align 4
  %v1_9854 = and i32 %tmp89, 65280
  store i32 %v1_9854, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_9808, 256
  %v4_9840 = sdiv i32 %v1_9810, 16777216
  %v5_9870 = trunc i32 %tmp91 to i8
  %v3_987c = mul nuw nsw i32 %v1_9814, 256
  %v3_9884 = ashr i32 %v1_9810, 31
  %v3_9888 = mul nuw nsw i32 %v1_982c, 256
  store i32 %v3_9888, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_97b8, 256
  %v4_988c = urem i32 %tmp92, 256
  %v5_988c = or i32 %v4_988c, %v3_987c
  store i32 %v5_988c, i32* @r7, align 4
  %v3_9890 = udiv i32 %v1_9820, 256
  %tmp93 = udiv i32 %v0_97bc, 256
  %v4_9894 = urem i32 %tmp93, 256
  %v5_9894 = or i32 %v4_9894, %v3_9888
  store i32 %v5_9894, i32* %sl.global-to-local, align 4
  %v5_9898 = trunc i32 %v3_9884 to i8
  %v3_98a0 = sdiv i32 %v3_97c4, 16777216
  %v7_98a0 = sdiv i32 %v1_9828, 16777216
  %v1_98a4 = and i32 %v3_9890, 65280
  store i32 %v1_98a4, i32* @r6, align 4
  %v3_98a8 = ashr i32 %v3_97c4, 31
  %v3_98ac = ashr i32 %v1_9828, 31
  %v3_98b0 = udiv i32 %v1_9808, 65536
  %v4_98b4 = udiv i32 %v1_9820, 16777216
  %v5_98b4 = or i32 %v4_98b4, %v1_98a4
  store i32 %v5_98b4, i32* %r8.global-to-local, align 4
  store i32 %v1_9814, i32* %r1.global-to-local, align 4
  store i32 %v1_982c, i32* %r2.global-to-local, align 4
  %v3_98cc37 = udiv i32 %v1_98a4, 256
  store i32 %v3_98cc37, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_992c = sext i8 %v5_96bc to i32
  %v2_9a2c = icmp eq i32 %v1_97c8, 0
  %sext16 = mul i32 %v0_97b8, 16777216
  %v4_9a40 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_9820, 256
  %v4_9a54 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_97bc, 16777216
  %v4_9a5c = sdiv i32 %sext18, 16777216
  %v1_9a64 = trunc i32 %v4_9a54 to i8
  br label %dec_label_pc_98e0

dec_label_pc_98e0:                                ; preds = %bb105, %dec_label_pc_97fc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_98ec = call i32 @function_11e9c(i32 1510, i32 4)
  store i32 %v2_98ec, i32* %r0.global-to-local, align 4
  store i32 %v2_964c, i32* %r1.global-to-local, align 4
  %v3_98f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_98f4, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r4, align 4
  %v5_98f8 = mul i32 %v2_98f8, 4
  %v6_98f8 = add i32 %v5_98f8, %v2_964c
  %v7_98f8 = inttoptr i32 %v6_98f8 to i32*
  store i32 %v2_98ec, i32* %v7_98f8, align 4
  %v0_98fc = load i32, i32* %r1.global-to-local, align 4
  %v1_98fc = load i32, i32* %r3.global-to-local, align 4
  %v4_98fc = mul i32 %v1_98fc, 4
  %v5_98fc = add i32 %v4_98fc, %v0_98fc
  %v6_98fc = inttoptr i32 %v5_98fc to i32*
  %v7_98fc = load i32, i32* %v6_98fc, align 4
  store i32 %v7_98fc, i32* %r4.global-to-local, align 4
  %v1_9900 = inttoptr i32 %v7_98fc to i8*
  %v2_9900 = load i8, i8* %v1_9900, align 1
  %tmp = urem i8 %v2_9900, 16
  %v1_9904 = zext i8 %tmp to i32
  %v1_9908 = or i32 %v1_9904, 64
  store i32 %v1_9908, i32* %r2.global-to-local, align 4
  %v1_990c = trunc i32 %v1_9908 to i8
  store i8 %v1_990c, i8* %v1_9900, align 1
  %v0_9910 = load i32, i32* %r4.global-to-local, align 4
  %v1_9910 = inttoptr i32 %v0_9910 to i8*
  %v2_9910 = load i8, i8* %v1_9910, align 1
  %v1_9914 = and i8 %v2_9910, -16
  %v1_9918 = or i8 %v1_9914, 5
  store i32 %v1_96cc, i32* %r2.global-to-local, align 4
  store i8 %v1_9918, i8* %v1_9910, align 1
  %v2_9928 = load i32, i32* %r4.global-to-local, align 4
  %v3_9928 = add i32 %v2_9928, 1
  %v4_9928 = inttoptr i32 %v3_9928 to i8*
  store i8 %v5_9684, i8* %v4_9928, align 1
  store i32 %v4_992c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9934 = load i32, i32* %r4.global-to-local, align 4
  %v3_9934 = add i32 %v2_9934, 8
  %v4_9934 = inttoptr i32 %v3_9934 to i8*
  store i8 %v5_96bc, i8* %v4_9934, align 1
  %v0_9938 = load i32, i32* %r2.global-to-local, align 4
  %v1_9938 = load i32, i32* %ip.global-to-local, align 4
  %v9_9938 = icmp eq i32 %v0_9938, %v1_9938
  store i1 %v9_9938, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9884, i32* %r3.global-to-local, align 4
  store i32 %v4_9840, i32* %r2.global-to-local, align 4
  %v2_9944 = load i32, i32* %r4.global-to-local, align 4
  %v3_9944 = add i32 %v2_9944, 3
  %v4_9944 = inttoptr i32 %v3_9944 to i8*
  store i8 %v5_9898, i8* %v4_9944, align 1
  %v0_9948 = load i32, i32* %r2.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* %r4.global-to-local, align 4
  %v3_9948 = add i32 %v2_9948, 2
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  %v0_994c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_994c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_98e0
  store i32 %v3_98a8, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_98a8 to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_98e0
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_98a8, i32* %r2.global-to-local, align 4
  %v3_9954 = load i32, i32* %r4.global-to-local, align 4
  %v4_9954 = add i32 %v3_9954, 6
  %v5_9954 = inttoptr i32 %v4_9954 to i8*
  store i8 64, i8* %v5_9954, align 1
  %v0_995c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_995c.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_98a8.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_995c = load i32, i32* %r4.global-to-local, align 4
  %v3_995c = add i32 %v2_995c, 5
  %v4_995c = inttoptr i32 %v3_995c to i8*
  store i8 %v3_98a8.sink.off0, i8* %v4_995c, align 1
  store i32 %v3_98a0, i32* %r1.global-to-local, align 4
  %v0_9964 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9964, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_9964 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_9964, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_9968 = load i32, i32* %r3.global-to-local, align 4
  %v1_9968 = trunc i32 %v0_9968 to i8
  %v2_9968 = load i32, i32* %r4.global-to-local, align 4
  %v3_9968 = add i32 %v2_9968, 9
  %v4_9968 = inttoptr i32 %v3_9968 to i8*
  store i8 %v1_9968, i8* %v4_9968, align 1
  %v0_996c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_996c, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_996c = load i32, i32* %r2.global-to-local, align 4
  %v2_996c = trunc i32 %v1_996c to i8
  %v3_996c = load i32, i32* %r4.global-to-local, align 4
  %v4_996c = add i32 %v3_996c, 7
  %v5_996c = inttoptr i32 %v4_996c to i8*
  store i8 %v2_996c, i8* %v5_996c, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_9970 = load i32, i32* %stack_var_-40, align 4
  %v5_9978 = mul i32 %v3_9970, 24
  store i32 %v5_9978, i32* %r3.global-to-local, align 4
  store i32 %v5_976c, i32* %r2.global-to-local, align 4
  %v1_9980 = load i32, i32* %r4.global-to-local, align 4
  %v2_9980 = add i32 %v1_9980, 12
  %v3_9980 = inttoptr i32 %v2_9980 to i32*
  store i32 %v5_976c, i32* %v3_9980, align 4
  %v0_9984 = load i32, i32* %r3.global-to-local, align 4
  %v1_9984 = load i32, i32* @sb, align 4
  %v2_9984 = add i32 %v1_9984, %v0_9984
  store i32 %v2_9984, i32* %r3.global-to-local, align 4
  %v1_9988 = add i32 %v2_9984, 16
  %v2_9988 = inttoptr i32 %v1_9988 to i32*
  %v3_9988 = load i32, i32* %v2_9988, align 4
  store i32 %v3_9988, i32* %r2.global-to-local, align 4
  %v0_998c = load i32, i32* %r1.global-to-local, align 4
  %v1_998c = trunc i32 %v0_998c to i8
  %v2_998c = load i32, i32* %r4.global-to-local, align 4
  %v3_998c = add i32 %v2_998c, 4
  %v4_998c = inttoptr i32 %v3_998c to i8*
  store i8 %v1_998c, i8* %v4_998c, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* %r4.global-to-local, align 4
  %v1_9994 = add i32 %v0_9994, 20
  store i32 %v1_9994, i32* %r1.global-to-local, align 4
  %v3_9998 = add i32 %v0_9994, 22
  %v4_9998 = inttoptr i32 %v3_9998 to i8*
  store i8 101, i8* %v4_9998, align 1
  %v0_999c = load i32, i32* %r2.global-to-local, align 4
  %v1_999c = load i32, i32* %r4.global-to-local, align 4
  %v2_999c = add i32 %v1_999c, 16
  %v3_999c = inttoptr i32 %v2_999c to i32*
  store i32 %v0_999c, i32* %v3_999c, align 4
  %v0_99a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_99a0 = add i32 %v0_99a0, 24
  store i32 %v1_99a0, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_99a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_99a8 = add i32 %v0_99a8, -93
  store i32 %v1_99a8, i32* %r3.global-to-local, align 4
  %v2_99ac = load i32, i32* %r1.global-to-local, align 4
  %v3_99ac = add i32 %v2_99ac, 3
  %v4_99ac = inttoptr i32 %v3_99ac to i8*
  store i8 88, i8* %v4_99ac, align 1
  %v0_99b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_99b0 = trunc i32 %v0_99b0 to i8
  %v2_99b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_99b0 = add i32 %v2_99b0, 12
  %v4_99b0 = inttoptr i32 %v3_99b0 to i8*
  store i8 %v1_99b0, i8* %v4_99b0, align 1
  %v0_99b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_99b4 = trunc i32 %v0_99b4 to i8
  %v2_99b4 = load i32, i32* %r0.global-to-local, align 4
  %v3_99b4 = add i32 %v2_99b4, 13
  %v4_99b4 = inttoptr i32 %v3_99b4 to i8*
  store i8 %v1_99b4, i8* %v4_99b4, align 1
  %v0_99b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_99b8 = add i32 %v0_99b8, 38
  %v2_99b8 = inttoptr i32 %v1_99b8 to i8*
  %v3_99b8 = load i8, i8* %v2_99b8, align 1
  %tmp116 = urem i8 %v3_99b8, 16
  %v1_99bc = zext i8 %tmp116 to i32
  %v1_99c0 = or i32 %v1_99bc, 64
  store i32 %v1_99c0, i32* %r3.global-to-local, align 4
  %v1_99c4 = trunc i32 %v1_99c0 to i8
  store i8 %v1_99c4, i8* %v2_99b8, align 1
  %v0_99c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_99c8 = add i32 %v0_99c8, 38
  %v2_99c8 = inttoptr i32 %v1_99c8 to i8*
  %v3_99c8 = load i8, i8* %v2_99c8, align 1
  %v1_99cc = and i8 %v3_99c8, -16
  %v1_99d0 = or i8 %v1_99cc, 5
  store i8 %v1_99d0, i8* %v2_99c8, align 1
  %v0_99dc = load i32, i32* %r4.global-to-local, align 4
  %v1_99dc = add i32 %v0_99dc, 38
  store i32 %v1_99dc, i32* @r5, align 4
  %v3_99e0 = add i32 %v0_99dc, 39
  %v4_99e0 = inttoptr i32 %v3_99e0 to i8*
  store i8 %v5_9684, i8* %v4_99e0, align 1
  store i32 %v7_98a0, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_98ac, i32* %r2.global-to-local, align 4
  %v2_99f0 = load i32, i32* @r5, align 4
  %v3_99f0 = add i32 %v2_99f0, 4
  %v4_99f0 = inttoptr i32 %v3_99f0 to i8*
  store i8 %v5_9870, i8* %v4_99f0, align 1
  %v0_99f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_99f4 = trunc i32 %v0_99f4 to i8
  %v2_99f4 = load i32, i32* @r5, align 4
  %v3_99f4 = add i32 %v2_99f4, 2
  %v4_99f4 = inttoptr i32 %v3_99f4 to i8*
  store i8 %v1_99f4, i8* %v4_99f4, align 1
  %v0_99f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_99f8, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_98b0, i32* %r1.global-to-local, align 4
  %v0_9a00 = load i32, i32* %r2.global-to-local, align 4
  %v1_9a00 = trunc i32 %v0_9a00 to i8
  %v2_9a00 = load i32, i32* @r5, align 4
  %v3_9a00 = add i32 %v2_9a00, 3
  %v4_9a00 = inttoptr i32 %v3_9a00 to i8*
  store i8 %v1_9a00, i8* %v4_9a00, align 1
  store i32 %v4_992c, i32* %r2.global-to-local, align 4
  %v0_9a08 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9a08, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_9a08 = load i32, i32* %r3.global-to-local, align 4
  %v2_9a08 = trunc i32 %v1_9a08 to i8
  %v3_9a08 = load i32, i32* @r5, align 4
  %v4_9a08 = add i32 %v3_9a08, 6
  %v5_9a08 = inttoptr i32 %v4_9a08 to i8*
  store i8 %v2_9a08, i8* %v5_9a08, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9a10 = load i32, i32* %r1.global-to-local, align 4
  %v1_9a10 = trunc i32 %v0_9a10 to i8
  %v2_9a10 = load i32, i32* @r5, align 4
  %v3_9a10 = add i32 %v2_9a10, 5
  %v4_9a10 = inttoptr i32 %v3_9a10 to i8*
  store i8 %v1_9a10, i8* %v4_9a10, align 1
  %v0_9a14 = load i32, i32* %r2.global-to-local, align 4
  %v1_9a14 = trunc i32 %v0_9a14 to i8
  %v2_9a14 = load i32, i32* @r5, align 4
  %v3_9a14 = add i32 %v2_9a14, 8
  %v4_9a14 = inttoptr i32 %v3_9a14 to i8*
  store i8 %v1_9a14, i8* %v4_9a14, align 1
  %v0_9a18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9a18, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_9a18 = load i32, i32* %ip.global-to-local, align 4
  %v2_9a18 = trunc i32 %v1_9a18 to i8
  %v3_9a18 = load i32, i32* @r5, align 4
  %v4_9a18 = add i32 %v3_9a18, 7
  %v5_9a18 = inttoptr i32 %v4_9a18 to i8*
  store i8 %v2_9a18, i8* %v5_9a18, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_9a1c = load i32, i32* %r3.global-to-local, align 4
  %v1_9a1c = trunc i32 %v0_9a1c to i8
  %v2_9a1c = load i32, i32* @r5, align 4
  %v3_9a1c = add i32 %v2_9a1c, 9
  %v4_9a1c = inttoptr i32 %v3_9a1c to i8*
  store i8 %v1_9a1c, i8* %v4_9a1c, align 1
  %v0_9a20 = call i32 @function_e72c()
  store i32 %v0_9a20, i32* %r0.global-to-local, align 4
  store i32 %v1_97c8, i32* %r1.global-to-local, align 4
  store i1 %v2_9a2c, i1* %cpsr_z.global-to-local, align 1
  %v1_9a30 = sub i32 1023, %v0_9a20
  store i32 %v1_9a30, i32* %r3.global-to-local, align 4
  br i1 %v2_9a2c, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_9a38 = load i32, i32* @r5, align 4
  %v3_9a38 = add i32 %v2_9a38, 16
  %v4_9a38 = inttoptr i32 %v3_9a38 to i32*
  store i32 %v1_9a30, i32* %v4_9a38, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_9a34 = load i32, i32* %r4.global-to-local, align 4
  %v2_9a34 = add i32 %v1_9a34, 16
  %v3_9a34 = inttoptr i32 %v2_9a34 to i32*
  %v4_9a34 = load i32, i32* %v3_9a34, align 4
  store i32 %v4_9a34, i32* %r3.global-to-local, align 4
  %v2_9a3c = load i32, i32* @r5, align 4
  %v3_9a3c = add i32 %v2_9a3c, 16
  %v4_9a3c = inttoptr i32 %v3_9a3c to i32*
  store i32 %v4_9a34, i32* %v4_9a3c, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_9a40, i32* %r3.global-to-local, align 4
  %v0_9a44 = load i32, i32* %r4.global-to-local, align 4
  %v1_9a44 = add i32 %v0_9a44, 58
  store i32 %v1_9a44, i32* @r6, align 4
  %v1_9a48 = load i32, i32* @r5, align 4
  %v2_9a48 = add i32 %v1_9a48, 12
  %v3_9a48 = inttoptr i32 %v2_9a48 to i32*
  store i32 %v0_9a20, i32* %v3_9a48, align 4
  %v0_9a4c = load i32, i32* %r3.global-to-local, align 4
  %v1_9a4c = trunc i32 %v0_9a4c to i8
  %v2_9a4c = load i32, i32* @r6, align 4
  %v3_9a4c = add i32 %v2_9a4c, 1
  %v4_9a4c = inttoptr i32 %v3_9a4c to i8*
  store i8 %v1_9a4c, i8* %v4_9a4c, align 1
  %v3_9a50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9a50, i32* %r3.global-to-local, align 4
  store i32 %v4_9a54, i32* %r2.global-to-local, align 4
  %v1_9a58 = add i32 %v3_9a50, 1
  store i32 %v1_9a58, i32* @r4, align 4
  store i32 %v4_9a5c, i32* %r1.global-to-local, align 4
  %v1_9a60 = load i32, i32* @fp, align 4
  %v9_9a60 = icmp eq i32 %v1_9a58, %v1_9a60
  store i1 %v9_9a60, i1* %cpsr_z.global-to-local, align 1
  %v2_9a64 = load i32, i32* @r6, align 4
  %v3_9a64 = add i32 %v2_9a64, 5
  %v4_9a64 = inttoptr i32 %v3_9a64 to i8*
  store i8 %v1_9a64, i8* %v4_9a64, align 1
  %v0_9a68 = load i32, i32* @r7, align 4
  %v1_9a68 = trunc i32 %v0_9a68 to i8
  %v2_9a68 = load i32, i32* @r6, align 4
  %v3_9a68 = inttoptr i32 %v2_9a68 to i8*
  store i8 %v1_9a68, i8* %v3_9a68, align 1
  %v0_9a6c = load i32, i32* %sl.global-to-local, align 4
  %v1_9a6c = trunc i32 %v0_9a6c to i8
  %v2_9a6c = load i32, i32* @r6, align 4
  %v3_9a6c = add i32 %v2_9a6c, 2
  %v4_9a6c = inttoptr i32 %v3_9a6c to i8*
  store i8 %v1_9a6c, i8* %v4_9a6c, align 1
  %v0_9a70 = load i32, i32* %r1.global-to-local, align 4
  %v1_9a70 = trunc i32 %v0_9a70 to i8
  %v2_9a70 = load i32, i32* @r6, align 4
  %v3_9a70 = add i32 %v2_9a70, 3
  %v4_9a70 = inttoptr i32 %v3_9a70 to i8*
  store i8 %v1_9a70, i8* %v4_9a70, align 1
  %v0_9a74 = load i32, i32* %r8.global-to-local, align 4
  %v1_9a74 = trunc i32 %v0_9a74 to i8
  %v2_9a74 = load i32, i32* @r6, align 4
  %v3_9a74 = add i32 %v2_9a74, 4
  %v4_9a74 = inttoptr i32 %v3_9a74 to i8*
  store i8 %v1_9a74, i8* %v4_9a74, align 1
  %v0_9a78 = load i32, i32* @r4, align 4
  store i32 %v0_9a78, i32* %stack_var_-40, align 4
  %v5_9a7c = icmp slt i32 %v1_9a58, %v1_9a60
  br i1 %v5_9a7c, label %dec_label_pc_98e0, label %dec_label_pc_9a80

dec_label_pc_9a80:                                ; preds = %bb105
  %v1_9a88 = add i32 %v5_9718, 8
  store i32 %v1_9a88, i32* %r2.global-to-local, align 4
  %v1_9a8c = add i32 %v5_9718, 66
  store i32 %v1_9a8c, i32* %r3.global-to-local, align 4
  %v0_9a98.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_9a98.preheader

dec_label_pc_9a98.preheader:                      ; preds = %dec_label_pc_9a80, %dec_label_pc_9d88
  %v0_9a98.pre = phi i32 [ %v0_9a98.pre.pre, %dec_label_pc_9a80 ], [ %v0_97dc, %dec_label_pc_9d88 ]
  %stack_var_-160.0.ph = phi i32 [ %v1_9a8c, %dec_label_pc_9a80 ], [ %v1_9d94, %dec_label_pc_9d88 ]
  %stack_var_-156.0.ph = phi i32 [ %v1_9a88, %dec_label_pc_9a80 ], [ %v1_9d90, %dec_label_pc_9d88 ]
  %v3_9ce8 = icmp eq i32 %v3_97d0, 65535
  %v2_9d58 = icmp eq i32 %v1_97c8, 0
  %v2_9b3c = ptrtoint i32* %stack_var_-44 to i32
  %v2_9b54 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9b64 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9b70 = ptrtoint i32* %stack_var_-50 to i32
  %v2_9b84 = icmp eq i32 %v1_9738, 0
  %v2_9ae0 = icmp eq i32 %v5_976c, -1
  %v7_9ae0 = icmp eq i32 %v5_976c, -1
  br label %dec_label_pc_9a98

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9b8c, %dec_label_pc_9a98.preheader
  %v0_9a98 = phi i32 [ %v0_9a98.pre, %dec_label_pc_9a98.preheader ], [ %v1_9c50, %dec_label_pc_9b8c ]
  %v2_9a98 = icmp eq i32 %v0_9a98, 0
  store i1 %v2_9a98, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_9a98, 1
  br label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_9aa0, %dec_label_pc_9a98
  br i1 %tmp106, label %dec_label_pc_9aa0, label %dec_label_pc_9aa4

dec_label_pc_9aa4:                                ; preds = %dec_label_pc_9aa0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_9ab0

dec_label_pc_9ab0:                                ; preds = %dec_label_pc_9b8c, %dec_label_pc_9aa4
  %v1_9ac4 = phi i32 [ %v1_9c4c, %dec_label_pc_9b8c ], [ 0, %dec_label_pc_9aa4 ]
  %v5_9ab4 = mul i32 %v1_9ac4, 24
  %v1_9ab8 = load i32, i32* @sb, align 4
  %v2_9ab8 = add i32 %v1_9ab8, %v5_9ab4
  store i32 %v2_9ab8, i32* %r3.global-to-local, align 4
  store i32 %v2_964c, i32* %r1.global-to-local, align 4
  %v1_9ac0 = add i32 %v2_9ab8, 20
  %v2_9ac0 = inttoptr i32 %v1_9ac0 to i8*
  %v3_9ac0 = load i8, i8* %v2_9ac0, align 1
  %v4_9ac0 = zext i8 %v3_9ac0 to i32
  store i32 %v4_9ac0, i32* %r2.global-to-local, align 4
  %v4_9ac4 = mul i32 %v1_9ac4, 4
  %v5_9ac4 = add i32 %v4_9ac4, %v2_964c
  %v6_9ac4 = inttoptr i32 %v5_9ac4 to i32*
  %v7_9ac4 = load i32, i32* %v6_9ac4, align 4
  store i32 %v7_9ac4, i32* @r5, align 4
  %v7_9ac8 = icmp eq i8 %v3_9ac0, 31
  store i1 %v7_9ac8, i1* %cpsr_z.global-to-local, align 1
  %v1_9acc = add i32 %v7_9ac4, 24
  store i32 %v1_9acc, i32* @r8, align 4
  %v1_9ad0 = add i32 %v7_9ac4, 38
  store i32 %v1_9ad0, i32* @r6, align 4
  %v1_9ad4 = add i32 %v7_9ac4, 58
  store i32 %v1_9ad4, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_9ac0, 32
  br i1 %tmp117, label %dec_label_pc_9c70, label %dec_label_pc_9adc

dec_label_pc_9adc:                                ; preds = %dec_label_pc_9ab0
  store i32 %v5_976c, i32* %r2.global-to-local, align 4
  store i1 %v7_9ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ae0, label %dec_label_pc_9cd8, label %dec_label_pc_9ae8

dec_label_pc_9ae8:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9adc
  store i32 %v3_97d0, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9ce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9ce8, label %dec_label_pc_9cf4, label %dec_label_pc_9afc

dec_label_pc_9afc:                                ; preds = %dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge, %dec_label_pc_9ae8
  %v1_9b00 = phi i32 [ %v1_9b00.pre, %dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge ], [ 65535, %dec_label_pc_9ae8 ]
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v9_9b00 = icmp eq i32 %v3_97d4, %v1_9b00
  store i1 %v9_9b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b00, label %dec_label_pc_9d2c, label %dec_label_pc_9b08

dec_label_pc_9b08:                                ; preds = %dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge, %dec_label_pc_9afc
  %v1_9b0c = phi i32 [ %v1_9b0c.pre, %dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge ], [ %v1_9b00, %dec_label_pc_9afc ]
  store i32 %v3_97d8, i32* %r2.global-to-local, align 4
  %v9_9b0c = icmp eq i32 %v3_97d8, %v1_9b0c
  store i1 %v9_9b0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b0c, label %dec_label_pc_9d48, label %dec_label_pc_9b14

dec_label_pc_9b14:                                ; preds = %dec_label_pc_9d2c, %dec_label_pc_9b08
  store i32 %v1_97c8, i32* %r3.global-to-local, align 4
  store i1 %v2_9d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d58, label %dec_label_pc_9d6c, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_9b14
  %v1_9b1c = load i32, i32* @r5, align 4
  %v2_9b1c = add i32 %v1_9b1c, 16
  %v3_9b1c = inttoptr i32 %v2_9b1c to i32*
  %v4_9b1c = load i32, i32* %v3_9b1c, align 4
  store i32 %v4_9b1c, i32* %r3.global-to-local, align 4
  %v2_9b20 = load i32, i32* @r6, align 4
  %v3_9b20 = add i32 %v2_9b20, 16
  %v4_9b20 = inttoptr i32 %v3_9b20 to i32*
  store i32 %v4_9b1c, i32* %v4_9b20, align 4
  br label %dec_label_pc_9b28

dec_label_pc_9b28:                                ; preds = %bb109, %.thread23, %dec_label_pc_9d6c
  %v0_9b28 = call i32 @function_e72c()
  store i32 %v0_9b28, i32* %r0.global-to-local, align 4
  store i32 %v0_9b28, i32* %stack_var_-44, align 4
  %v0_9b30 = call i32 @function_e72c()
  store i32 %v0_9b30, i32* %r0.global-to-local, align 4
  store i32 %v0_9b30, i32* %stack_var_-48, align 4
  %v0_9b38 = call i32 @function_e72c()
  store i32 %v2_9b3c, i32* %r1.global-to-local, align 4
  store i32 %v0_9b38, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_9b48 = load i32, i32* @r8, align 4
  store i32 %v0_9b48, i32* %r0.global-to-local, align 4
  %v3_9b4c = call i32 @function_10a44(i32 %v0_9b48, i32 %v2_9b3c, i32 4)
  %v0_9b50 = load i32, i32* @r8, align 4
  %v1_9b50 = add i32 %v0_9b50, 6
  store i32 %v1_9b50, i32* %r0.global-to-local, align 4
  store i32 %v2_9b54, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9b5c = call i32 @function_10a44(i32 %v1_9b50, i32 %v2_9b54, i32 4)
  %v0_9b60 = load i32, i32* @r8, align 4
  %v1_9b60 = add i32 %v0_9b60, 4
  store i32 %v1_9b60, i32* %r0.global-to-local, align 4
  store i32 %v2_9b64, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9b6c = call i32 @function_10a44(i32 %v1_9b60, i32 %v2_9b64, i32 2)
  store i32 %v2_9b70, i32* %r1.global-to-local, align 4
  %v0_9b74 = load i32, i32* @r8, align 4
  %v1_9b74 = add i32 %v0_9b74, 10
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9b7c = call i32 @function_10a44(i32 %v1_9b74, i32 %v2_9b70, i32 2)
  store i32 %v3_9b7c, i32* %r0.global-to-local, align 4
  store i32 %v1_9738, i32* %r1.global-to-local, align 4
  store i1 %v2_9b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b84, label %dec_label_pc_9b8c, label %dec_label_pc_9d78

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9b28, %dec_label_pc_9d78
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9b90 = load i32, i32* @sl, align 4
  %v1_9b90 = trunc i32 %v0_9b90 to i8
  %v2_9b90 = load i32, i32* @r5, align 4
  %v3_9b90 = add i32 %v2_9b90, 10
  %v4_9b90 = inttoptr i32 %v3_9b90 to i8*
  store i8 %v1_9b90, i8* %v4_9b90, align 1
  %v0_9b94 = load i32, i32* @sl, align 4
  %v1_9b94 = trunc i32 %v0_9b94 to i8
  %v2_9b94 = load i32, i32* @r5, align 4
  %v3_9b94 = add i32 %v2_9b94, 11
  %v4_9b94 = inttoptr i32 %v3_9b94 to i8*
  store i8 %v1_9b94, i8* %v4_9b94, align 1
  %v0_9b98 = load i32, i32* @r5, align 4
  store i32 %v0_9b98, i32* @r0, align 4
  %v2_9b9c = call i32 @function_d0b8(i32 %v0_9b98, i32 20)
  %v3_9b9c = trunc i32 %v2_9b9c to i8
  %v4_9ba0 = sdiv i32 %v2_9b9c, 256
  store i32 %v4_9ba0, i32* %r3.global-to-local, align 4
  %v1_9ba4 = trunc i32 %v4_9ba0 to i8
  %v2_9ba4 = load i32, i32* @r5, align 4
  %v3_9ba4 = add i32 %v2_9ba4, 11
  %v4_9ba4 = inttoptr i32 %v3_9ba4 to i8*
  store i8 %v1_9ba4, i8* %v4_9ba4, align 1
  %v3_9ba8 = load i32, i32* @r5, align 4
  %v4_9ba8 = add i32 %v3_9ba8, 10
  %v5_9ba8 = inttoptr i32 %v4_9ba8 to i8*
  store i8 %v3_9b9c, i8* %v5_9ba8, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9bb0 = load i32, i32* @sl, align 4
  %v1_9bb0 = trunc i32 %v0_9bb0 to i8
  %v2_9bb0 = load i32, i32* @r6, align 4
  %v3_9bb0 = add i32 %v2_9bb0, 10
  %v4_9bb0 = inttoptr i32 %v3_9bb0 to i8*
  store i8 %v1_9bb0, i8* %v4_9bb0, align 1
  %v0_9bb4 = load i32, i32* @sl, align 4
  %v1_9bb4 = trunc i32 %v0_9bb4 to i8
  %v2_9bb4 = load i32, i32* @r6, align 4
  %v3_9bb4 = add i32 %v2_9bb4, 11
  %v4_9bb4 = inttoptr i32 %v3_9bb4 to i8*
  store i8 %v1_9bb4, i8* %v4_9bb4, align 1
  %v0_9bb8 = load i32, i32* @r6, align 4
  store i32 %v0_9bb8, i32* @r0, align 4
  %v2_9bbc = call i32 @function_d0b8(i32 %v0_9bb8, i32 20)
  %v3_9bbc = trunc i32 %v2_9bbc to i8
  store i32 %v2_9bbc, i32* %r0.global-to-local, align 4
  %v4_9bc0 = sdiv i32 %v2_9bbc, 256
  store i32 %v4_9bc0, i32* %r3.global-to-local, align 4
  %v3_9bc4 = load i32, i32* @r6, align 4
  %v4_9bc4 = add i32 %v3_9bc4, 10
  %v5_9bc4 = inttoptr i32 %v4_9bc4 to i8*
  store i8 %v3_9bbc, i8* %v5_9bc4, align 1
  %v0_9bc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9bc8 = trunc i32 %v0_9bc8 to i8
  %v2_9bc8 = load i32, i32* @r6, align 4
  %v3_9bc8 = add i32 %v2_9bc8, 11
  %v4_9bc8 = inttoptr i32 %v3_9bc8 to i8*
  store i8 %v1_9bc8, i8* %v4_9bc8, align 1
  %v0_9bcc = load i32, i32* @r7, align 4
  %v1_9bcc = add i32 %v0_9bcc, 4
  %v2_9bcc = inttoptr i32 %v1_9bcc to i8*
  %v3_9bcc = load i8, i8* %v2_9bcc, align 1
  %v4_9bcc = zext i8 %v3_9bcc to i32
  store i32 %v4_9bcc, i32* %r3.global-to-local, align 4
  %v1_9bd0 = add i32 %v0_9bcc, 5
  %v2_9bd0 = inttoptr i32 %v1_9bd0 to i8*
  %v3_9bd0 = load i8, i8* %v2_9bd0, align 1
  %v4_9bd0 = zext i8 %v3_9bd0 to i32
  store i32 %v0_9bcc, i32* @r1, align 4
  %v4_9bd8 = mul nuw nsw i32 %v4_9bd0, 256
  %v5_9bd8 = or i32 %v4_9bd8, %v4_9bcc
  store i32 %v5_9bd8, i32* %r2.global-to-local, align 4
  %v0_9bdc = load i32, i32* @sl, align 4
  %v1_9bdc = trunc i32 %v0_9bdc to i8
  %v3_9bdc = add i32 %v0_9bcc, 6
  %v4_9bdc = inttoptr i32 %v3_9bdc to i8*
  store i8 %v1_9bdc, i8* %v4_9bdc, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_9be4 = load i32, i32* @sl, align 4
  %v1_9be4 = trunc i32 %v0_9be4 to i8
  %v2_9be4 = load i32, i32* @r7, align 4
  %v3_9be4 = add i32 %v2_9be4, 7
  %v4_9be4 = inttoptr i32 %v3_9be4 to i8*
  store i8 %v1_9be4, i8* %v4_9be4, align 1
  %v0_9be8 = load i32, i32* @r6, align 4
  store i32 %v0_9be8, i32* %r0.global-to-local, align 4
  %v4_9bec = call i32 @function_d114(i32 %v0_9be8, i32 %v0_9bcc, i32 %v5_9bd8, i32 %stack_var_-156.0.ph)
  %v5_9bec = trunc i32 %v4_9bec to i8
  store i32 %v4_9bec, i32* %r0.global-to-local, align 4
  %v3_9bf0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9bf0, i32* %r3.global-to-local, align 4
  %v3_9bf4 = mul i32 %v3_9bf0, 32
  store i32 %v3_9bf4, i32* %r2.global-to-local, align 4
  %v0_9bf8 = load i32, i32* @r5, align 4
  %v1_9bf8 = add i32 %v0_9bf8, 16
  %v2_9bf8 = inttoptr i32 %v1_9bf8 to i32*
  %v3_9bf8 = load i32, i32* %v2_9bf8, align 4
  store i32 %v3_9bf8, i32* %r1.global-to-local, align 4
  %v5_9bfc = mul i32 %v3_9bf0, 24
  store i32 %v5_9bfc, i32* %r2.global-to-local, align 4
  %v4_9c0042 = udiv i32 %v4_9bec, 256
  %v1_9c04 = trunc i32 %v4_9c0042 to i8
  %v2_9c04 = load i32, i32* @r7, align 4
  %v3_9c04 = add i32 %v2_9c04, 7
  %v4_9c04 = inttoptr i32 %v3_9c04 to i8*
  store i8 %v1_9c04, i8* %v4_9c04, align 1
  %v0_9c08 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c08 = load i32, i32* @sb, align 4
  %v2_9c08 = add i32 %v1_9c08, %v0_9c08
  store i32 %v2_9c08, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_9c10 = load i32, i32* @r7, align 4
  %v4_9c10 = add i32 %v3_9c10, 6
  %v5_9c10 = inttoptr i32 %v4_9c10 to i8*
  store i8 %v5_9bec, i8* %v5_9c10, align 1
  %v0_9c14 = load i32, i32* %r1.global-to-local, align 4
  %v1_9c14 = load i32, i32* %lr.global-to-local, align 4
  %v2_9c14 = add i32 %v1_9c14, 4
  %v3_9c14 = inttoptr i32 %v2_9c14 to i32*
  store i32 %v0_9c14, i32* %v3_9c14, align 4
  %v0_9c18 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c18 = trunc i32 %v0_9c18 to i8
  %v2_9c18 = load i32, i32* %r2.global-to-local, align 4
  %v3_9c18 = load i32, i32* @sb, align 4
  %v4_9c18 = add i32 %v3_9c18, %v2_9c18
  %v5_9c18 = inttoptr i32 %v4_9c18 to i8*
  store i8 %v1_9c18, i8* %v5_9c18, align 1
  %v0_9c1c = load i32, i32* @sl, align 4
  %v1_9c1c = trunc i32 %v0_9c1c to i8
  %v2_9c1c = load i32, i32* %lr.global-to-local, align 4
  %v3_9c1c = add i32 %v2_9c1c, 2
  %v4_9c1c = inttoptr i32 %v3_9c1c to i8*
  store i8 %v1_9c1c, i8* %v4_9c1c, align 1
  %v0_9c20 = load i32, i32* @sl, align 4
  %v1_9c20 = trunc i32 %v0_9c20 to i8
  %v2_9c20 = load i32, i32* %lr.global-to-local, align 4
  %v3_9c20 = add i32 %v2_9c20, 1
  %v4_9c20 = inttoptr i32 %v3_9c20 to i8*
  store i8 %v1_9c20, i8* %v4_9c20, align 1
  %v0_9c24 = load i32, i32* @sl, align 4
  %v1_9c24 = trunc i32 %v0_9c24 to i8
  %v2_9c24 = load i32, i32* %lr.global-to-local, align 4
  %v3_9c24 = add i32 %v2_9c24, 3
  %v4_9c24 = inttoptr i32 %v3_9c24 to i8*
  store i8 %v1_9c24, i8* %v4_9c24, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9c30 = load i32, i32* @r5, align 4
  store i32 %v0_9c30, i32* %r1.global-to-local, align 4
  store i32 %v3_9780, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_9c3c = load i32, i32* %lr.global-to-local, align 4
  %v6_9c44 = inttoptr i32 %v0_9c30 to i32*
  %v7_9c44 = call i32 @function_11b4c(i32 %v3_9780, i32* %v6_9c44, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_9c3c, i32 16)
  %v3_9c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9c48, i32* %r3.global-to-local, align 4
  %v1_9c4c = add i32 %v3_9c48, 1
  store i32 %v1_9c4c, i32* %r0.global-to-local, align 4
  %v1_9c50 = load i32, i32* @fp, align 4
  %v9_9c50 = icmp eq i32 %v1_9c4c, %v1_9c50
  store i1 %v9_9c50, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c4c, i32* %stack_var_-40, align 4
  %v6_9c58 = icmp slt i32 %v1_9c4c, %v1_9c50
  br i1 %v6_9c58, label %dec_label_pc_9ab0, label %dec_label_pc_9a98

dec_label_pc_9c60:                                ; preds = %dec_label_pc_9790
  store i32 %v3_9780, i32* %r0.global-to-local, align 4
  %v1_9c64 = call i32 @function_112cc(i32 %v3_9780)
  store i32 %v1_9c64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_962c, %dec_label_pc_9c60
  %v29_9c6c = phi i32 [ %v3_9780, %dec_label_pc_962c ], [ %v1_9c64, %dec_label_pc_9c60 ]
  store i32 %v3_962c, i32* %r4.global-to-local, align 4
  store i32 %v15_962c, i32* %r8.global-to-local, align 4
  store i32 %v21_962c, i32* %sl.global-to-local, align 4
  ret i32 %v29_9c6c

dec_label_pc_9c70:                                ; preds = %dec_label_pc_9ab0
  %v1_9c70 = add i32 %v2_9ab8, 16
  %v2_9c70 = inttoptr i32 %v1_9c70 to i32*
  %v3_9c70 = load i32, i32* %v2_9c70, align 4
  store i32 %v3_9c70, i32* %r4.global-to-local, align 4
  %v0_9c74 = call i32 @function_e72c()
  store i32 %v0_9c74, i32* %r0.global-to-local, align 4
  %v3_9c78 = load i32, i32* %stack_var_-40, align 4
  %v5_9c80 = mul i32 %v3_9c78, 24
  %v0_9c84 = load i32, i32* %r4.global-to-local, align 4
  %v1_9c88 = load i32, i32* @sb, align 4
  %v2_9c88 = add i32 %v1_9c88, %v5_9c80
  store i32 %v2_9c88, i32* %r1.global-to-local, align 4
  %v1_9c8c = and i32 %v0_9c84, 65280
  store i32 %v1_9c8c, i32* %r3.global-to-local, align 4
  %v1_9c84 = udiv i32 %v0_9c84, 256
  %v3_9c90 = and i32 %v1_9c84, 65280
  store i32 %v3_9c90, i32* %r2.global-to-local, align 4
  %v3_9c94 = mul i32 %v0_9c84, 16777216
  store i32 %v3_9c94, i32* %ip.global-to-local, align 4
  %v1_9c98 = add i32 %v2_9c88, 20
  %v2_9c98 = inttoptr i32 %v1_9c98 to i8*
  %v3_9c98 = load i8, i8* %v2_9c98, align 1
  %v4_9c98 = zext i8 %v3_9c98 to i32
  store i32 %v4_9c98, i32* %lr.global-to-local, align 4
  %v4_9c9c = mul nuw nsw i32 %v1_9c8c, 256
  %v5_9c9c = or i32 %v4_9c9c, %v3_9c94
  store i32 %v5_9c9c, i32* %ip.global-to-local, align 4
  %v2_9ca4 = call i32 @llvm.bswap.i32(i32 %v0_9c84)
  %v7_9ca8 = lshr i32 %v0_9c74, %v4_9c98
  %v8_9ca8 = add i32 %v7_9ca8, %v2_9ca4
  %v3_9cb4 = mul i32 %v8_9ca8, 16777216
  %v1_9cb8 = and i32 %v8_9ca8, 65280
  store i32 %v1_9cb8, i32* %r0.global-to-local, align 4
  store i32 %v5_976c, i32* %r2.global-to-local, align 4
  %v4_9cc4 = mul nuw nsw i32 %v1_9cb8, 256
  %v5_9cc4 = or i32 %v4_9cc4, %v3_9cb4
  store i32 %v5_9cc4, i32* %r1.global-to-local, align 4
  %v2_9cc8 = call i32 @llvm.bswap.i32(i32 %v8_9ca8)
  store i32 %v2_9cc8, i32* %r3.global-to-local, align 4
  store i1 %v7_9ae0, i1* %cpsr_z.global-to-local, align 1
  %v1_9cd0 = load i32, i32* @r5, align 4
  %v2_9cd0 = add i32 %v1_9cd0, 16
  %v3_9cd0 = inttoptr i32 %v2_9cd0 to i32*
  store i32 %v2_9cc8, i32* %v3_9cd0, align 4
  br i1 %v2_9ae0, label %dec_label_pc_9cd8, label %dec_label_pc_9ae8

dec_label_pc_9cd8:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9adc
  %v0_9cd8 = call i32 @function_e72c()
  store i32 %v0_9cd8, i32* %r0.global-to-local, align 4
  store i32 %v3_97d0, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9ce8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cec = load i32, i32* @r5, align 4
  %v2_9cec = add i32 %v1_9cec, 12
  %v3_9cec = inttoptr i32 %v2_9cec to i32*
  store i32 %v0_9cd8, i32* %v3_9cec, align 4
  br i1 %v3_9ce8, label %dec_label_pc_9cf4, label %dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge

dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge:    ; preds = %dec_label_pc_9cd8
  %v1_9b00.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9afc

dec_label_pc_9cf4:                                ; preds = %dec_label_pc_9cd8, %dec_label_pc_9ae8
  %v0_9cf4 = call i32 @function_e72c()
  %v3_9cfc = urem i32 %v0_9cf4, 65536
  store i32 %v3_9cfc, i32* %r0.global-to-local, align 4
  %v1_9d04 = sub nsw i32 999, %v3_9cfc
  store i32 %v1_9d04, i32* %r2.global-to-local, align 4
  %v3_9d08 = sdiv i32 %v1_9d04, 256
  store i32 %v3_9d08, i32* %r1.global-to-local, align 4
  %v3_9d0c39 = udiv i32 %v3_9cfc, 256
  store i32 %v3_9d0c39, i32* %r3.global-to-local, align 4
  %v1_9d10 = trunc i32 %v3_9d0c39 to i8
  %v2_9d10 = load i32, i32* @r5, align 4
  %v3_9d10 = add i32 %v2_9d10, 5
  %v4_9d10 = inttoptr i32 %v3_9d10 to i8*
  store i8 %v1_9d10, i8* %v4_9d10, align 1
  %v0_9d14 = load i32, i32* %r0.global-to-local, align 4
  %v1_9d14 = trunc i32 %v0_9d14 to i8
  %v2_9d14 = load i32, i32* @r5, align 4
  %v3_9d14 = add i32 %v2_9d14, 4
  %v4_9d14 = inttoptr i32 %v3_9d14 to i8*
  store i8 %v1_9d14, i8* %v4_9d14, align 1
  %v0_9d18 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d18 = trunc i32 %v0_9d18 to i8
  %v2_9d18 = load i32, i32* @r6, align 4
  %v3_9d18 = add i32 %v2_9d18, 5
  %v4_9d18 = inttoptr i32 %v3_9d18 to i8*
  store i8 %v1_9d18, i8* %v4_9d18, align 1
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v1_9d20 = load i32, i32* @r4, align 4
  %v9_9d20 = icmp eq i32 %v3_97d4, %v1_9d20
  store i1 %v9_9d20, i1* %cpsr_z.global-to-local, align 1
  %v0_9d24 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d24 = trunc i32 %v0_9d24 to i8
  %v2_9d24 = load i32, i32* @r6, align 4
  %v3_9d24 = add i32 %v2_9d24, 4
  %v4_9d24 = inttoptr i32 %v3_9d24 to i8*
  store i8 %v1_9d24, i8* %v4_9d24, align 1
  %v0_9d28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d28, label %dec_label_pc_9d2c, label %dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge

dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge:    ; preds = %dec_label_pc_9cf4
  %v1_9b0c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9b08

dec_label_pc_9d2c:                                ; preds = %dec_label_pc_9cf4, %dec_label_pc_9afc
  %v0_9d2c = call i32 @function_e72c()
  %v1_9d2c = trunc i32 %v0_9d2c to i8
  store i32 %v0_9d2c, i32* %r0.global-to-local, align 4
  store i32 %v3_97d8, i32* %r2.global-to-local, align 4
  %v4_9d34 = sdiv i32 %v0_9d2c, 256
  store i32 %v4_9d34, i32* %r3.global-to-local, align 4
  %v1_9d38 = load i32, i32* @r4, align 4
  %v9_9d38 = icmp eq i32 %v3_97d8, %v1_9d38
  store i1 %v9_9d38, i1* %cpsr_z.global-to-local, align 1
  %v3_9d3c = load i32, i32* @r5, align 4
  %v4_9d3c = add i32 %v3_9d3c, 58
  %v5_9d3c = inttoptr i32 %v4_9d3c to i8*
  store i8 %v1_9d2c, i8* %v5_9d3c, align 1
  %v0_9d40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d40 = trunc i32 %v0_9d40 to i8
  %v2_9d40 = load i32, i32* @r7, align 4
  %v3_9d40 = add i32 %v2_9d40, 1
  %v4_9d40 = inttoptr i32 %v3_9d40 to i8*
  store i8 %v1_9d40, i8* %v4_9d40, align 1
  %v0_9d44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d44, label %dec_label_pc_9d48, label %dec_label_pc_9b14

dec_label_pc_9d48:                                ; preds = %dec_label_pc_9d2c, %dec_label_pc_9b08
  %v0_9d48 = call i32 @function_e72c()
  %v1_9d48 = trunc i32 %v0_9d48 to i8
  store i32 %v0_9d48, i32* %r0.global-to-local, align 4
  %v4_9d4c43 = udiv i32 %v0_9d48, 256
  %v1_9d50 = trunc i32 %v4_9d4c43 to i8
  %v2_9d50 = load i32, i32* @r7, align 4
  %v3_9d50 = add i32 %v2_9d50, 3
  %v4_9d50 = inttoptr i32 %v3_9d50 to i8*
  store i8 %v1_9d50, i8* %v4_9d50, align 1
  store i32 %v1_97c8, i32* %r3.global-to-local, align 4
  store i1 %v2_9d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d58, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_9d48
  %v1_9d5c = load i32, i32* @r5, align 4
  %v2_9d5c = add i32 %v1_9d5c, 16
  %v3_9d5c = inttoptr i32 %v2_9d5c to i32*
  %v4_9d5c = load i32, i32* %v3_9d5c, align 4
  store i32 %v4_9d5c, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_9d48, %bb107
  %v3_9d60 = load i32, i32* @r7, align 4
  %v4_9d60 = add i32 %v3_9d60, 2
  %v5_9d60 = inttoptr i32 %v4_9d60 to i8*
  store i8 %v1_9d48, i8* %v5_9d60, align 1
  %v0_9d64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d64, label %dec_label_pc_9d6c, label %bb109

bb109:                                            ; preds = %bb108
  %v1_9d64 = load i32, i32* %r3.global-to-local, align 4
  %v2_9d64 = load i32, i32* @r6, align 4
  %v3_9d64 = add i32 %v2_9d64, 16
  %v4_9d64 = inttoptr i32 %v3_9d64 to i32*
  store i32 %v1_9d64, i32* %v4_9d64, align 4
  br label %dec_label_pc_9b28

dec_label_pc_9d6c:                                ; preds = %dec_label_pc_9b14, %bb108
  %v0_9d6c = call i32 @function_e72c()
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  %v1_9d70 = load i32, i32* @r6, align 4
  %v2_9d70 = add i32 %v1_9d70, 16
  %v3_9d70 = inttoptr i32 %v2_9d70 to i32*
  store i32 %v0_9d6c, i32* %v3_9d70, align 4
  br label %dec_label_pc_9b28

dec_label_pc_9d78:                                ; preds = %dec_label_pc_9b28
  %v0_9d78 = load i32, i32* @r7, align 4
  %v1_9d78 = add i32 %v0_9d78, 8
  store i32 %v1_9d78, i32* %r0.global-to-local, align 4
  store i32 %v5_9718, i32* @r1, align 4
  %v1_9d80 = inttoptr i32 %v1_9d78 to i8*
  %v2_9d80 = call i32 @function_e8ac(i8* %v1_9d80)
  store i32 %v2_9d80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9b8c

dec_label_pc_9d88:                                ; preds = %dec_label_pc_97b8
  %v1_9d90 = add i32 %v5_9718, 8
  store i32 %v1_9d90, i32* %r1.global-to-local, align 4
  %v1_9d94 = add i32 %v5_9718, 66
  store i32 %v1_9d94, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9a98.preheader

; uselistorder directives
  uselistorder i32 %v1_9d94, { 1, 0 }
  uselistorder i32 %v1_9d90, { 1, 0 }
  uselistorder i32 %v0_9d48, { 0, 2, 1 }
  uselistorder i32 %v0_9d2c, { 0, 2, 1 }
  uselistorder i32 %v3_9cfc, { 0, 2, 1 }
  uselistorder i32 %v2_9cc8, { 1, 0 }
  uselistorder i32 %v8_9ca8, { 1, 2, 0 }
  uselistorder i32 %v3_9c94, { 1, 0 }
  uselistorder i32 %v0_9c84, { 2, 0, 1, 3 }
  uselistorder i32 %v1_9c50, { 1, 2, 0 }
  uselistorder i32 %v1_9c4c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_9bf0, { 1, 0, 2 }
  uselistorder i32 %v4_9bec, { 0, 2, 1 }
  uselistorder i32 %v0_9bcc, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_9bbc, { 0, 2, 1 }
  uselistorder i32 %v4_9ba0, { 1, 0 }
  uselistorder i32 %v7_9ac4, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9a98, { 1, 0 }
  uselistorder i1 %v7_9ae0, { 2, 1, 0 }
  uselistorder i1 %v2_9d58, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9ce8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9a20, { 1, 0, 2 }
  uselistorder i32 %v3_98a8, { 1, 0, 2 }
  uselistorder i32 %v3_9888, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_982c, { 1, 0 }
  uselistorder i32 %v1_9828, { 2, 1, 0 }
  uselistorder i32 %v1_9814, { 1, 0 }
  uselistorder i32 %v1_9810, { 2, 1, 0 }
  uselistorder i32 %v1_9808, { 0, 2, 1 }
  uselistorder i32 %v3_9800, { 2, 1, 0 }
  uselistorder i32 %v0_97dc, { 1, 0, 2 }
  uselistorder i32 %v3_97d0, { 2, 1, 3, 0 }
  uselistorder i32 %v1_97c8, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_97c4, { 1, 0 }
  uselistorder i32 %v0_97c4, { 2, 1, 0 }
  uselistorder i32 %v0_97bc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_97b8, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_97b0, { 1, 0 }
  uselistorder i1 %v7_9784, { 1, 0 }
  uselistorder i32 %v3_9780, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_976c, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9738, { 1, 2, 0 }
  uselistorder i32 %v5_9718, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_96cc, { 1, 0 }
  uselistorder i8 %v5_96bc, { 1, 0 }
  uselistorder i32 %v5_96a0, { 1, 0 }
  uselistorder i32 %v6_9664, { 1, 0 }
  uselistorder i32 %v2_964c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9630, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %sl.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 9, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 7, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 44, 45, 47, 1, 48, 49, 50, 51, 52, 53, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 6, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 7, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 21, 20, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 5, 7, 10, 11, 8, 9, 13, 12, 29, 2, 30, 31, 32, 1, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 3, 43, 44, 45, 4, 46, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 8, 9, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 8, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 9, 10, 11 }
  uselistorder label %dec_label_pc_9d6c, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_9c68, { 1, 0 }
  uselistorder label %dec_label_pc_9b8c, { 1, 0 }
  uselistorder label %dec_label_pc_9b28, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9a98.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_9da8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9da8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9da8 = load i32, i32* @r4, align 4
  %v15_9da8 = load i32, i32* @r8, align 4
  %v1_9dac = urem i32 %arg1, 256
  store i32 %v1_9dac, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9dac, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9dc4 = urem i32 %arg3, 256
  store i32 %v1_9dc4, i32* @r4, align 4
  %v2_9dc8 = call i32 @function_11e9c(i32 %v1_9dac, i32 4)
  %v0_9dcc = load i32, i32* @r5, align 4
  store i32 %v0_9dcc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9ddc = load i32, i32* @r4, align 4
  store i32 %v0_9ddc, i32* %r0.global-to-local, align 4
  %v5_9de0 = inttoptr i32 %v0_9dcc to i32*
  %v6_9de0 = call i32 @function_85e0(i32 %v0_9ddc, i32* %v5_9de0, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9df8 = load i32, i32* @r5, align 4
  store i32 %v0_9df8, i32* %r1.global-to-local, align 4
  %v0_9dfc = load i32, i32* @r4, align 4
  store i32 %v0_9dfc, i32* %r0.global-to-local, align 4
  %v5_9e00 = trunc i32 %v6_9de0 to i8
  %v6_9e04 = inttoptr i32 %v0_9df8 to i32*
  %v7_9e04 = call i32 @function_85e0(i32 %v0_9dfc, i32* %v6_9e04, i32 3, i32 65535)
  %v0_9e08 = load i32, i32* @r5, align 4
  store i32 %v0_9e08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9e04, i32* @r7, align 4
  %v0_9e18 = load i32, i32* @r4, align 4
  store i32 %v0_9e18, i32* %r0.global-to-local, align 4
  %v4_9e1c = inttoptr i32 %v0_9e08 to i32*
  %v5_9e1c = call i32 @function_85e0(i32 %v0_9e18, i32* %v4_9e1c, i32 4, i32 64)
  %v0_9e28 = load i32, i32* @r5, align 4
  store i32 %v0_9e28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9e34 = load i32, i32* @r4, align 4
  store i32 %v0_9e34, i32* %r0.global-to-local, align 4
  %v5_9e38 = trunc i32 %v5_9e1c to i8
  %v6_9e3c = inttoptr i32 %v0_9e28 to i32*
  %v7_9e3c = call i32 @function_85e0(i32 %v0_9e34, i32* %v6_9e3c, i32 5, i32 1)
  %v1_9e48 = urem i32 %v7_9e3c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9e54 = load i32, i32* @r5, align 4
  store i32 %v0_9e54, i32* %r1.global-to-local, align 4
  %v0_9e58 = load i32, i32* @r4, align 4
  store i32 %v0_9e58, i32* %r0.global-to-local, align 4
  %v5_9e60 = inttoptr i32 %v0_9e54 to i32*
  %v6_9e60 = call i32 @function_85e0(i32 %v0_9e58, i32* %v5_9e60, i32 6, i32 65535)
  %v0_9e68 = load i32, i32* @r5, align 4
  store i32 %v0_9e68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9e60, i32* @sl, align 4
  %v0_9e78 = load i32, i32* @r4, align 4
  store i32 %v0_9e78, i32* %r0.global-to-local, align 4
  %v4_9e7c = inttoptr i32 %v0_9e68 to i32*
  %v5_9e7c = call i32 @function_85e0(i32 %v0_9e78, i32* %v4_9e7c, i32 7, i32 65535)
  %v0_9e80 = load i32, i32* @r5, align 4
  store i32 %v0_9e80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9e7c, i32* @r8, align 4
  %v0_9e90 = load i32, i32* @r4, align 4
  store i32 %v0_9e90, i32* %r0.global-to-local, align 4
  %v4_9e94 = inttoptr i32 %v0_9e80 to i32*
  %v5_9e94 = call i32 @function_85e0(i32 %v0_9e90, i32* %v4_9e94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ea4 = load i32, i32* @r5, align 4
  store i32 %v0_9ea4, i32* %r1.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r4, align 4
  store i32 %v0_9ea8, i32* %r0.global-to-local, align 4
  %v4_9eac = inttoptr i32 %v0_9ea4 to i32*
  %v5_9eac = call i32 @function_85e0(i32 %v0_9ea8, i32* %v4_9eac, i32 1, i32 1)
  %v1_9eb4 = urem i32 %v5_9eac, 256
  %v0_9eb8 = load i32, i32* @r5, align 4
  store i32 %v0_9eb8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9ec4 = load i32, i32* @r4, align 4
  store i32 %v0_9ec4, i32* %r0.global-to-local, align 4
  %v5_9ecc = inttoptr i32 %v0_9eb8 to i32*
  %v6_9ecc = call i32 @function_85e0(i32 %v0_9ec4, i32* %v5_9ecc, i32 19, i32 0)
  %v0_9ed4 = load i32, i32* @r5, align 4
  store i32 %v0_9ed4, i32* %r1.global-to-local, align 4
  %v2_9ed8 = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_9ed8, i32* %r3.global-to-local, align 4
  store i32 %v6_9ecc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9ee4 = load i32, i32* @r4, align 4
  store i32 %v0_9ee4, i32* %r0.global-to-local, align 4
  %v4_9ee8 = inttoptr i32 %v0_9ed4 to i32*
  %v5_9ee8 = call i32 @function_85e0(i32 %v0_9ee4, i32* %v4_9ee8, i32 25, i32 %v2_9ed8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9efc = call i32 @function_11bb0(i32 2, i32 3, i32 6)
  store i32 %v3_9efc, i32* %r0.global-to-local, align 4
  %v7_9f00 = icmp eq i32 %v3_9efc, -1
  store i1 %v7_9f00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f00, label %dec_label_pc_a380, label %dec_label_pc_9f0c

dec_label_pc_9f0c:                                ; preds = %dec_label_pc_9da8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9f14 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9f14, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9f28 = call i32 @function_11b80(i32 %v3_9efc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9f28, i32* %r0.global-to-local, align 4
  %v7_9f2c = icmp eq i32 %v6_9f28, -1
  store i1 %v7_9f2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f2c, label %dec_label_pc_a378, label %dec_label_pc_9f34

dec_label_pc_9f34:                                ; preds = %dec_label_pc_9f0c
  %v0_9f34 = load i32, i32* @sl, align 4
  %v0_9f40 = load i32, i32* @r8, align 4
  %v3_9f40 = mul i32 %v0_9f40, 65536
  store i32 %v3_9f40, i32* %r8.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r7, align 4
  %v0_9f48 = load i32, i32* @r6, align 4
  %v1_9f48 = urem i32 %v0_9f48, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9f50 = urem i32 %v0_9f34, 65536
  store i32 %v3_9f50, i32* %r2.global-to-local, align 4
  %v3_9f54 = urem i32 %v0_9f40, 65536
  store i32 %v3_9f54, i32* %r3.global-to-local, align 4
  %v0_9f58 = load i32, i32* @fp, align 4
  %v2_9f58 = icmp eq i32 %v0_9f58, 0
  store i1 %v2_9f58, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9f68 = urem i32 %v0_9f44, 65536
  store i32 %v3_9f68, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_9f58, 1
  br i1 %tmp84, label %dec_label_pc_a4a4, label %dec_label_pc_9f78

dec_label_pc_9f78:                                ; preds = %dec_label_pc_9f34
  %v3_9f7c = mul i32 %v5_9e94, 65536
  %v1_9f80 = add i32 %v3_9f7c, 3407872
  %v3_9f88 = udiv i32 %v1_9f80, 256
  %v0_9f44.not = or i32 %v0_9f44, -65536
  %v1_9f98 = xor i32 %v0_9f44.not, 65535
  %v1_9f9c = urem i32 %v0_9f40, 256
  %tmp85 = mul nsw i32 %v1_9f98, 256
  %v1_9fb4 = and i32 %v3_9f88, 65280
  %v1_9fb8 = add i32 %v3_9f7c, 524288
  %v4_9fbc = udiv i32 %v1_9f80, 16777216
  %v5_9fbc = or i32 %v1_9fb4, %v4_9fbc
  store i32 %v5_9fbc, i32* %r0.global-to-local, align 4
  %v1_9fc0 = add i32 %v3_9f7c, 1835008
  %v1_9fc8 = and i32 %tmp85, 65280
  store i32 %v1_9fc8, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_9f98, 256
  %tmp87 = udiv i32 %v0_9f44, 256
  %v5_9fdc = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_9f34, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_9ffc = sdiv i32 %sext29, 16777216
  %v3_a008 = mul nuw nsw i32 %v1_9f9c, 256
  store i32 %v3_a008, i32* @r5, align 4
  %v3_a00c = udiv i32 %v1_9fb8, 256
  %tmp89 = udiv i32 %v0_9f40, 256
  %v4_a014 = urem i32 %tmp89, 256
  %v5_a014 = or i32 %v4_a014, %v3_a008
  store i32 %v5_a014, i32* @r7, align 4
  %v3_a018 = ashr i32 %sext29, 31
  %v3_a024 = sdiv i32 %v1_9fc0, 16777216
  %v1_a028 = and i32 %v3_a00c, 65280
  store i32 %v1_a028, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_a030 = sdiv i32 %sext30, 16777216
  %v3_a034 = ashr i32 %v1_9fc0, 31
  %v3_a038 = udiv i32 %v1_9f98, 65536
  %v4_a03c = udiv i32 %v1_9fb8, 16777216
  %v5_a03c = or i32 %v1_a028, %v4_a03c
  store i32 %v5_a03c, i32* %r8.global-to-local, align 4
  %v3_a048 = ashr i32 %sext30, 31
  store i32 %v3_a048, i32* %r1.global-to-local, align 4
  store i32 %v1_9f9c, i32* %r2.global-to-local, align 4
  %v3_a05041 = udiv i32 %v1_a028, 256
  store i32 %v3_a05041, i32* %r3.global-to-local, align 4
  %v5_a058 = trunc i32 %v3_a048 to i8
  store i32 0, i32* @r4, align 4
  %v4_a0b4 = sext i8 %v5_9e38 to i32
  %sext = mul i32 %v1_9f80, 256
  %v4_a0bc = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_9fbc, 16777216
  %v4_a0cc = sdiv i32 %sext16, 16777216
  %v2_a1a0 = icmp eq i32 %v1_9f48, 0
  %sext20 = mul i32 %v1_9fb8, 256
  %v4_a1c0 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_9f40, 16777216
  %v7_a1d8 = sdiv i32 %sext21, 16777216
  %v1_a0c8 = trunc i32 %v4_a0bc to i8
  br label %dec_label_pc_a068

dec_label_pc_a068:                                ; preds = %bb96, %dec_label_pc_9f78
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a074 = call i32 @function_11e9c(i32 1510, i32 4)
  store i32 %v2_a074, i32* %r0.global-to-local, align 4
  store i32 %v2_9dc8, i32* %r1.global-to-local, align 4
  %v3_a07c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a07c, i32* %r3.global-to-local, align 4
  %v2_a080 = load i32, i32* @r4, align 4
  %v5_a080 = mul i32 %v2_a080, 4
  %v6_a080 = add i32 %v5_a080, %v2_9dc8
  %v7_a080 = inttoptr i32 %v6_a080 to i32*
  store i32 %v2_a074, i32* %v7_a080, align 4
  %v0_a084 = load i32, i32* %r1.global-to-local, align 4
  %v1_a084 = load i32, i32* %r3.global-to-local, align 4
  %v4_a084 = mul i32 %v1_a084, 4
  %v5_a084 = add i32 %v4_a084, %v0_a084
  %v6_a084 = inttoptr i32 %v5_a084 to i32*
  %v7_a084 = load i32, i32* %v6_a084, align 4
  store i32 %v7_a084, i32* %r4.global-to-local, align 4
  %v1_a088 = inttoptr i32 %v7_a084 to i8*
  %v2_a088 = load i8, i8* %v1_a088, align 1
  %tmp = urem i8 %v2_a088, 16
  %v1_a08c = zext i8 %tmp to i32
  %v1_a090 = or i32 %v1_a08c, 64
  store i32 %v1_a090, i32* %r2.global-to-local, align 4
  %v1_a094 = trunc i32 %v1_a090 to i8
  store i8 %v1_a094, i8* %v1_a088, align 1
  %v0_a098 = load i32, i32* %r4.global-to-local, align 4
  %v1_a098 = inttoptr i32 %v0_a098 to i8*
  %v2_a098 = load i8, i8* %v1_a098, align 1
  %v1_a09c = and i8 %v2_a098, -16
  %v1_a0a0 = or i8 %v1_a09c, 5
  store i32 %v1_9e48, i32* %r2.global-to-local, align 4
  store i8 %v1_a0a0, i8* %v1_a098, align 1
  %v2_a0b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0b0 = add i32 %v2_a0b0, 1
  %v4_a0b0 = inttoptr i32 %v3_a0b0 to i8*
  store i8 %v5_9e00, i8* %v4_a0b0, align 1
  store i32 %v4_a0b4, i32* %r1.global-to-local, align 4
  %v2_a0b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0b8 = add i32 %v2_a0b8, 8
  %v4_a0b8 = inttoptr i32 %v3_a0b8 to i8*
  store i8 %v5_9e38, i8* %v4_a0b8, align 1
  store i32 %v4_a0bc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a0c4 = load i32, i32* %r2.global-to-local, align 4
  %v9_a0c4 = icmp eq i32 %v0_a0c4, 0
  store i1 %v9_a0c4, i1* %cpsr_z.global-to-local, align 1
  %v2_a0c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0c8 = add i32 %v2_a0c8, 3
  %v4_a0c8 = inttoptr i32 %v3_a0c8 to i8*
  store i8 %v1_a0c8, i8* %v4_a0c8, align 1
  store i32 %v4_a0cc, i32* %r2.global-to-local, align 4
  %v0_a0d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0d0, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_a068
  %v1_a0d0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_a0d0, i32* %r3.global-to-local, align 4
  %v2_a0d4 = trunc i32 %v1_a0d0 to i8
  %v3_a0d4 = load i32, i32* %r4.global-to-local, align 4
  %v4_a0d4 = add i32 %v3_a0d4, 7
  %v5_a0d4 = inttoptr i32 %v4_a0d4 to i8*
  store i8 %v2_a0d4, i8* %v5_a0d4, align 1
  %v0_a0d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0d8.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a0dc = load i32, i32* %r4.global-to-local, align 4
  %v4_a0dc = add i32 %v3_a0dc, 6
  %v5_a0dc = inttoptr i32 %v4_a0dc to i8*
  store i8 64, i8* %v5_a0dc, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_a068, %.thread, %bb
  %v0_a0e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0e0 = trunc i32 %v0_a0e0 to i8
  %v2_a0e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0e0 = add i32 %v2_a0e0, 2
  %v4_a0e0 = inttoptr i32 %v3_a0e0 to i8*
  store i8 %v1_a0e0, i8* %v4_a0e0, align 1
  store i32 %v3_a018, i32* %r2.global-to-local, align 4
  store i32 %v4_9ffc, i32* %r1.global-to-local, align 4
  %v2_a0f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0f0 = add i32 %v2_a0f0, 9
  %v4_a0f0 = inttoptr i32 %v3_a0f0 to i8*
  store i8 47, i8* %v4_a0f0, align 1
  %v0_a0f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0f4 = trunc i32 %v0_a0f4 to i8
  %v2_a0f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0f4 = add i32 %v2_a0f4, 5
  %v4_a0f4 = inttoptr i32 %v3_a0f4 to i8*
  store i8 %v1_a0f4, i8* %v4_a0f4, align 1
  %v3_a0f8 = load i32, i32* %stack_var_-40, align 4
  %v5_a100 = mul i32 %v3_a0f8, 24
  store i32 %v5_a100, i32* %r3.global-to-local, align 4
  store i32 %v5_9ee8, i32* %r2.global-to-local, align 4
  %v1_a108 = load i32, i32* %r4.global-to-local, align 4
  %v2_a108 = add i32 %v1_a108, 12
  %v3_a108 = inttoptr i32 %v2_a108 to i32*
  store i32 %v5_9ee8, i32* %v3_a108, align 4
  %v0_a10c = load i32, i32* %r3.global-to-local, align 4
  %v1_a10c = load i32, i32* @sb, align 4
  %v2_a10c = add i32 %v1_a10c, %v0_a10c
  store i32 %v2_a10c, i32* %r3.global-to-local, align 4
  %v0_a110 = load i32, i32* %r1.global-to-local, align 4
  %v1_a110 = trunc i32 %v0_a110 to i8
  %v2_a110 = load i32, i32* %r4.global-to-local, align 4
  %v3_a110 = add i32 %v2_a110, 4
  %v4_a110 = inttoptr i32 %v3_a110 to i8*
  store i8 %v1_a110, i8* %v4_a110, align 1
  %v0_a114 = load i32, i32* %r3.global-to-local, align 4
  %v1_a114 = add i32 %v0_a114, 16
  %v2_a114 = inttoptr i32 %v1_a114 to i32*
  %v3_a114 = load i32, i32* %v2_a114, align 4
  store i32 %v3_a114, i32* %r2.global-to-local, align 4
  %v0_a118 = load i32, i32* %r4.global-to-local, align 4
  %v1_a118 = add i32 %v0_a118, 20
  store i32 %v1_a118, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_a120 = load i32, i32* %r0.global-to-local, align 4
  %v1_a120 = trunc i32 %v0_a120 to i8
  %v3_a120 = add i32 %v0_a118, 23
  %v4_a120 = inttoptr i32 %v3_a120 to i8*
  store i8 %v1_a120, i8* %v4_a120, align 1
  %v0_a124 = load i32, i32* %r3.global-to-local, align 4
  %v1_a124 = trunc i32 %v0_a124 to i8
  %v2_a124 = load i32, i32* %r1.global-to-local, align 4
  %v3_a124 = add i32 %v2_a124, 2
  %v4_a124 = inttoptr i32 %v3_a124 to i8*
  store i8 %v1_a124, i8* %v4_a124, align 1
  %v0_a128 = load i32, i32* %r4.global-to-local, align 4
  %v1_a128 = add i32 %v0_a128, 24
  %v2_a128 = inttoptr i32 %v1_a128 to i8*
  %v3_a128 = load i8, i8* %v2_a128, align 1
  %tmp104 = urem i8 %v3_a128, 16
  %v1_a12c = zext i8 %tmp104 to i32
  %v1_a130 = or i32 %v1_a12c, 64
  store i32 %v1_a130, i32* %r3.global-to-local, align 4
  %v1_a134 = trunc i32 %v1_a130 to i8
  store i8 %v1_a134, i8* %v2_a128, align 1
  %v0_a138 = load i32, i32* %r2.global-to-local, align 4
  %v1_a138 = load i32, i32* %r4.global-to-local, align 4
  %v2_a138 = add i32 %v1_a138, 16
  %v3_a138 = inttoptr i32 %v2_a138 to i32*
  store i32 %v0_a138, i32* %v3_a138, align 4
  %v0_a13c = load i32, i32* %r4.global-to-local, align 4
  %v1_a13c = add i32 %v0_a13c, 24
  %v2_a13c = inttoptr i32 %v1_a13c to i8*
  %v3_a13c = load i8, i8* %v2_a13c, align 1
  %v1_a140 = and i8 %v3_a13c, -16
  %v1_a144 = or i8 %v1_a140, 5
  store i8 %v1_a144, i8* %v2_a13c, align 1
  %v0_a150 = load i32, i32* %r4.global-to-local, align 4
  %v1_a150 = add i32 %v0_a150, 24
  store i32 %v1_a150, i32* @r5, align 4
  %v3_a154 = add i32 %v0_a150, 25
  %v4_a154 = inttoptr i32 %v3_a154 to i8*
  store i8 %v5_9e00, i8* %v4_a154, align 1
  store i32 %v3_a024, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_a034, i32* %r2.global-to-local, align 4
  %v2_a164 = load i32, i32* @r5, align 4
  %v3_a164 = add i32 %v2_a164, 4
  %v4_a164 = inttoptr i32 %v3_a164 to i8*
  store i8 %v5_9fdc, i8* %v4_a164, align 1
  %v0_a168 = load i32, i32* %r1.global-to-local, align 4
  %v1_a168 = trunc i32 %v0_a168 to i8
  %v2_a168 = load i32, i32* @r5, align 4
  %v3_a168 = add i32 %v2_a168, 2
  %v4_a168 = inttoptr i32 %v3_a168 to i8*
  store i8 %v1_a168, i8* %v4_a168, align 1
  %v0_a16c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a16c, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_a038, i32* %r1.global-to-local, align 4
  %v0_a174 = load i32, i32* %r2.global-to-local, align 4
  %v1_a174 = trunc i32 %v0_a174 to i8
  %v2_a174 = load i32, i32* @r5, align 4
  %v3_a174 = add i32 %v2_a174, 3
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v1_a174, i8* %v4_a174, align 1
  store i32 %v4_a0b4, i32* %r2.global-to-local, align 4
  %v0_a17c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a17c, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_a17c = load i32, i32* %r3.global-to-local, align 4
  %v2_a17c = trunc i32 %v1_a17c to i8
  %v3_a17c = load i32, i32* @r5, align 4
  %v4_a17c = add i32 %v3_a17c, 6
  %v5_a17c = inttoptr i32 %v4_a17c to i8*
  store i8 %v2_a17c, i8* %v5_a17c, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_a184 = load i32, i32* %r1.global-to-local, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* @r5, align 4
  %v3_a184 = add i32 %v2_a184, 5
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r2.global-to-local, align 4
  %v1_a188 = trunc i32 %v0_a188 to i8
  %v2_a188 = load i32, i32* @r5, align 4
  %v3_a188 = add i32 %v2_a188, 8
  %v4_a188 = inttoptr i32 %v3_a188 to i8*
  store i8 %v1_a188, i8* %v4_a188, align 1
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_a18c = load i32, i32* %r0.global-to-local, align 4
  %v2_a18c = trunc i32 %v1_a18c to i8
  %v3_a18c = load i32, i32* @r5, align 4
  %v4_a18c = add i32 %v3_a18c, 7
  %v5_a18c = inttoptr i32 %v4_a18c to i8*
  store i8 %v2_a18c, i8* %v5_a18c, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_a190 = load i32, i32* %r3.global-to-local, align 4
  %v1_a190 = trunc i32 %v0_a190 to i8
  %v2_a190 = load i32, i32* @r5, align 4
  %v3_a190 = add i32 %v2_a190, 9
  %v4_a190 = inttoptr i32 %v3_a190 to i8*
  store i8 %v1_a190, i8* %v4_a190, align 1
  %v0_a194 = call i32 @function_e72c()
  store i32 %v0_a194, i32* %r0.global-to-local, align 4
  store i32 %v1_9f48, i32* %r1.global-to-local, align 4
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  %v1_a1a4 = sub i32 1023, %v0_a194
  store i32 %v1_a1a4, i32* %r3.global-to-local, align 4
  br i1 %v2_a1a0, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_a1ac = load i32, i32* @r5, align 4
  %v3_a1ac = add i32 %v2_a1ac, 16
  %v4_a1ac = inttoptr i32 %v3_a1ac to i32*
  store i32 %v1_a1a4, i32* %v4_a1ac, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_a1a8 = load i32, i32* %r4.global-to-local, align 4
  %v2_a1a8 = add i32 %v1_a1a8, 16
  %v3_a1a8 = inttoptr i32 %v2_a1a8 to i32*
  %v4_a1a8 = load i32, i32* %v3_a1a8, align 4
  store i32 %v4_a1a8, i32* %r3.global-to-local, align 4
  %v2_a1b0 = load i32, i32* @r5, align 4
  %v3_a1b0 = add i32 %v2_a1b0, 16
  %v4_a1b0 = inttoptr i32 %v3_a1b0 to i32*
  store i32 %v4_a1a8, i32* %v4_a1b0, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_a030, i32* %r3.global-to-local, align 4
  %v0_a1b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a1b8 = add i32 %v0_a1b8, 44
  store i32 %v1_a1b8, i32* @r6, align 4
  %v1_a1bc = load i32, i32* @r5, align 4
  %v2_a1bc = add i32 %v1_a1bc, 12
  %v3_a1bc = inttoptr i32 %v2_a1bc to i32*
  store i32 %v0_a194, i32* %v3_a1bc, align 4
  store i32 %v4_a1c0, i32* %r2.global-to-local, align 4
  %v0_a1c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1c4 = trunc i32 %v0_a1c4 to i8
  %v2_a1c4 = load i32, i32* @r6, align 4
  %v3_a1c4 = inttoptr i32 %v2_a1c4 to i8*
  store i8 %v1_a1c4, i8* %v3_a1c4, align 1
  %v3_a1c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a1c8, i32* %r3.global-to-local, align 4
  %v0_a1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1cc = trunc i32 %v0_a1cc to i8
  %v2_a1cc = load i32, i32* @r6, align 4
  %v3_a1cc = add i32 %v2_a1cc, 5
  %v4_a1cc = inttoptr i32 %v3_a1cc to i8*
  store i8 %v1_a1cc, i8* %v4_a1cc, align 1
  %v0_a1d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1d0 = add i32 %v0_a1d0, 1
  store i32 %v1_a1d0, i32* @r4, align 4
  store i32 %v3_a048, i32* %r1.global-to-local, align 4
  store i32 %v7_a1d8, i32* %r2.global-to-local, align 4
  %v1_a1dc = load i32, i32* @fp, align 4
  %v9_a1dc = icmp eq i32 %v1_a1d0, %v1_a1dc
  store i1 %v9_a1dc, i1* %cpsr_z.global-to-local, align 1
  %v2_a1e0 = load i32, i32* @r6, align 4
  %v3_a1e0 = add i32 %v2_a1e0, 1
  %v4_a1e0 = inttoptr i32 %v3_a1e0 to i8*
  store i8 %v5_a058, i8* %v4_a1e0, align 1
  %v0_a1e4 = load i32, i32* @r7, align 4
  %v1_a1e4 = trunc i32 %v0_a1e4 to i8
  %v2_a1e4 = load i32, i32* @r6, align 4
  %v3_a1e4 = add i32 %v2_a1e4, 2
  %v4_a1e4 = inttoptr i32 %v3_a1e4 to i8*
  store i8 %v1_a1e4, i8* %v4_a1e4, align 1
  %v0_a1e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1e8 = trunc i32 %v0_a1e8 to i8
  %v2_a1e8 = load i32, i32* @r6, align 4
  %v3_a1e8 = add i32 %v2_a1e8, 3
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v0_a1ec = load i32, i32* %r8.global-to-local, align 4
  %v1_a1ec = trunc i32 %v0_a1ec to i8
  %v2_a1ec = load i32, i32* @r6, align 4
  %v3_a1ec = add i32 %v2_a1ec, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v1_a1ec, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* @r4, align 4
  store i32 %v0_a1f0, i32* %stack_var_-40, align 4
  %v5_a1f4 = icmp slt i32 %v1_a1d0, %v1_a1dc
  br i1 %v5_a1f4, label %dec_label_pc_a068, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %bb96
  %v1_a200 = add i32 %v5_9e94, 8
  store i32 %v1_a200, i32* %r3.global-to-local, align 4
  %v1_a204 = add i32 %v5_9e94, 52
  store i32 %v1_a204, i32* %r1.global-to-local, align 4
  %v0_a210.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_a210.preheader

dec_label_pc_a210.preheader:                      ; preds = %dec_label_pc_a1f8, %dec_label_pc_a4a4
  %v0_a210.pre = phi i32 [ %v0_a210.pre.pre, %dec_label_pc_a1f8 ], [ %v0_9f58, %dec_label_pc_a4a4 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_a204, %dec_label_pc_a1f8 ], [ %v1_a4b0, %dec_label_pc_a4a4 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_a200, %dec_label_pc_a1f8 ], [ %v1_a4ac, %dec_label_pc_a4a4 ]
  %v2_a488 = icmp eq i32 %v1_9eb4, 0
  %v2_a288 = icmp eq i32 %v1_9f48, 0
  %v2_a254 = icmp eq i32 %v5_9ee8, -1
  %v7_a254 = icmp eq i32 %v5_9ee8, -1
  br label %dec_label_pc_a210

dec_label_pc_a210:                                ; preds = %dec_label_pc_a2a4, %dec_label_pc_a210.preheader
  %v0_a210 = phi i32 [ %v0_a210.pre, %dec_label_pc_a210.preheader ], [ %v1_a368, %dec_label_pc_a2a4 ]
  %v2_a210 = icmp eq i32 %v0_a210, 0
  store i1 %v2_a210, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_a210, 1
  br label %dec_label_pc_a218

dec_label_pc_a218:                                ; preds = %dec_label_pc_a218, %dec_label_pc_a210
  br i1 %tmp97, label %dec_label_pc_a218, label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a218
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_a228

dec_label_pc_a228:                                ; preds = %dec_label_pc_a2a4, %dec_label_pc_a21c
  %v1_a23c = phi i32 [ %v1_a364, %dec_label_pc_a2a4 ], [ 0, %dec_label_pc_a21c ]
  %v5_a22c = mul i32 %v1_a23c, 24
  %v1_a230 = load i32, i32* @sb, align 4
  %v2_a230 = add i32 %v1_a230, %v5_a22c
  store i32 %v2_a230, i32* %r3.global-to-local, align 4
  store i32 %v2_9dc8, i32* %r1.global-to-local, align 4
  %v1_a238 = add i32 %v2_a230, 20
  %v2_a238 = inttoptr i32 %v1_a238 to i8*
  %v3_a238 = load i8, i8* %v2_a238, align 1
  %v4_a238 = zext i8 %v3_a238 to i32
  store i32 %v4_a238, i32* %r2.global-to-local, align 4
  %v4_a23c = mul i32 %v1_a23c, 4
  %v5_a23c = add i32 %v4_a23c, %v2_9dc8
  %v6_a23c = inttoptr i32 %v5_a23c to i32*
  %v7_a23c = load i32, i32* %v6_a23c, align 4
  store i32 %v7_a23c, i32* @r5, align 4
  %v7_a240 = icmp eq i8 %v3_a238, 31
  store i1 %v7_a240, i1* %cpsr_z.global-to-local, align 1
  %v1_a244 = add i32 %v7_a23c, 24
  store i32 %v1_a244, i32* @r6, align 4
  %v1_a248 = add i32 %v7_a23c, 44
  store i32 %v1_a248, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_a238, 32
  br i1 %tmp105, label %dec_label_pc_a388, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a228
  store i32 %v5_9ee8, i32* %r2.global-to-local, align 4
  store i1 %v7_a254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a254, label %dec_label_pc_a3f0, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a388, %dec_label_pc_a250
  store i32 65535, i32* @r4, align 4
  %v0_a264 = load i32, i32* @sl, align 4
  %v9_a264 = icmp eq i32 %v0_a264, 65535
  store i1 %v9_a264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a264, label %dec_label_pc_a408, label %dec_label_pc_a26c

dec_label_pc_a26c:                                ; preds = %dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge, %dec_label_pc_a25c
  %v1_a270 = phi i32 [ %v1_a270.pre, %dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge ], [ 65535, %dec_label_pc_a25c ]
  store i32 %v3_9f50, i32* %r3.global-to-local, align 4
  %v9_a270 = icmp eq i32 %v3_9f50, %v1_a270
  store i1 %v9_a270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a270, label %dec_label_pc_a440, label %dec_label_pc_a278

dec_label_pc_a278:                                ; preds = %dec_label_pc_a408.dec_label_pc_a278_crit_edge, %dec_label_pc_a26c
  %v1_a27c = phi i32 [ %v1_a27c.pre, %dec_label_pc_a408.dec_label_pc_a278_crit_edge ], [ %v1_a270, %dec_label_pc_a26c ]
  store i32 %v3_9f54, i32* %r1.global-to-local, align 4
  %v9_a27c = icmp eq i32 %v3_9f54, %v1_a27c
  store i1 %v9_a27c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a27c, label %dec_label_pc_a45c, label %dec_label_pc_a284

dec_label_pc_a284:                                ; preds = %dec_label_pc_a440, %dec_label_pc_a278
  store i32 %v1_9f48, i32* %r2.global-to-local, align 4
  store i1 %v2_a288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a288, label %dec_label_pc_a480, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_a284
  %v1_a28c = load i32, i32* @r5, align 4
  %v2_a28c = add i32 %v1_a28c, 16
  %v3_a28c = inttoptr i32 %v2_a28c to i32*
  %v4_a28c = load i32, i32* %v3_a28c, align 4
  store i32 %v4_a28c, i32* %r3.global-to-local, align 4
  %v2_a290 = load i32, i32* @r6, align 4
  %v3_a290 = add i32 %v2_a290, 16
  %v4_a290 = inttoptr i32 %v3_a290 to i32*
  store i32 %v4_a28c, i32* %v4_a290, align 4
  br label %dec_label_pc_a298

dec_label_pc_a298:                                ; preds = %bb102, %.thread26
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  store i1 %v2_a488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a488, label %dec_label_pc_a2a4, label %dec_label_pc_a494

dec_label_pc_a2a4:                                ; preds = %dec_label_pc_a298, %dec_label_pc_a480, %dec_label_pc_a494
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a2a8 = load i32, i32* @r8, align 4
  %v1_a2a8 = trunc i32 %v0_a2a8 to i8
  %v2_a2a8 = load i32, i32* @r5, align 4
  %v3_a2a8 = add i32 %v2_a2a8, 10
  %v4_a2a8 = inttoptr i32 %v3_a2a8 to i8*
  store i8 %v1_a2a8, i8* %v4_a2a8, align 1
  %v0_a2ac = load i32, i32* @r8, align 4
  %v1_a2ac = trunc i32 %v0_a2ac to i8
  %v2_a2ac = load i32, i32* @r5, align 4
  %v3_a2ac = add i32 %v2_a2ac, 11
  %v4_a2ac = inttoptr i32 %v3_a2ac to i8*
  store i8 %v1_a2ac, i8* %v4_a2ac, align 1
  %v0_a2b0 = load i32, i32* @r5, align 4
  store i32 %v0_a2b0, i32* @r0, align 4
  %v2_a2b4 = call i32 @function_d0b8(i32 %v0_a2b0, i32 20)
  %v3_a2b4 = trunc i32 %v2_a2b4 to i8
  %v4_a2b8 = sdiv i32 %v2_a2b4, 256
  store i32 %v4_a2b8, i32* %r3.global-to-local, align 4
  %v1_a2bc = trunc i32 %v4_a2b8 to i8
  %v2_a2bc = load i32, i32* @r5, align 4
  %v3_a2bc = add i32 %v2_a2bc, 11
  %v4_a2bc = inttoptr i32 %v3_a2bc to i8*
  store i8 %v1_a2bc, i8* %v4_a2bc, align 1
  %v3_a2c0 = load i32, i32* @r5, align 4
  %v4_a2c0 = add i32 %v3_a2c0, 10
  %v5_a2c0 = inttoptr i32 %v4_a2c0 to i8*
  store i8 %v3_a2b4, i8* %v5_a2c0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a2c8 = load i32, i32* @r8, align 4
  %v1_a2c8 = trunc i32 %v0_a2c8 to i8
  %v2_a2c8 = load i32, i32* @r6, align 4
  %v3_a2c8 = add i32 %v2_a2c8, 10
  %v4_a2c8 = inttoptr i32 %v3_a2c8 to i8*
  store i8 %v1_a2c8, i8* %v4_a2c8, align 1
  %v0_a2cc = load i32, i32* @r8, align 4
  %v1_a2cc = trunc i32 %v0_a2cc to i8
  %v2_a2cc = load i32, i32* @r6, align 4
  %v3_a2cc = add i32 %v2_a2cc, 11
  %v4_a2cc = inttoptr i32 %v3_a2cc to i8*
  store i8 %v1_a2cc, i8* %v4_a2cc, align 1
  %v0_a2d0 = load i32, i32* @r6, align 4
  store i32 %v0_a2d0, i32* @r0, align 4
  %v2_a2d4 = call i32 @function_d0b8(i32 %v0_a2d0, i32 20)
  %v3_a2d4 = trunc i32 %v2_a2d4 to i8
  store i32 %v2_a2d4, i32* %r0.global-to-local, align 4
  %v4_a2d8 = sdiv i32 %v2_a2d4, 256
  store i32 %v4_a2d8, i32* %r3.global-to-local, align 4
  %v3_a2dc = load i32, i32* @r6, align 4
  %v4_a2dc = add i32 %v3_a2dc, 10
  %v5_a2dc = inttoptr i32 %v4_a2dc to i8*
  store i8 %v3_a2d4, i8* %v5_a2dc, align 1
  %v0_a2e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a2e0 = trunc i32 %v0_a2e0 to i8
  %v2_a2e0 = load i32, i32* @r6, align 4
  %v3_a2e0 = add i32 %v2_a2e0, 11
  %v4_a2e0 = inttoptr i32 %v3_a2e0 to i8*
  store i8 %v1_a2e0, i8* %v4_a2e0, align 1
  %v0_a2e4 = load i32, i32* @r7, align 4
  %v1_a2e4 = add i32 %v0_a2e4, 4
  %v2_a2e4 = inttoptr i32 %v1_a2e4 to i8*
  %v3_a2e4 = load i8, i8* %v2_a2e4, align 1
  %v4_a2e4 = zext i8 %v3_a2e4 to i32
  store i32 %v4_a2e4, i32* %r3.global-to-local, align 4
  %v1_a2e8 = add i32 %v0_a2e4, 5
  %v2_a2e8 = inttoptr i32 %v1_a2e8 to i8*
  %v3_a2e8 = load i8, i8* %v2_a2e8, align 1
  %v4_a2e8 = zext i8 %v3_a2e8 to i32
  store i32 %v0_a2e4, i32* @r1, align 4
  %v4_a2f0 = mul nuw nsw i32 %v4_a2e8, 256
  %v5_a2f0 = or i32 %v4_a2f0, %v4_a2e4
  store i32 %v5_a2f0, i32* %r2.global-to-local, align 4
  %v0_a2f4 = load i32, i32* @r8, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i8
  %v3_a2f4 = add i32 %v0_a2e4, 6
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i8*
  store i8 %v1_a2f4, i8* %v4_a2f4, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_a2fc = load i32, i32* @r8, align 4
  %v1_a2fc = trunc i32 %v0_a2fc to i8
  %v2_a2fc = load i32, i32* @r7, align 4
  %v3_a2fc = add i32 %v2_a2fc, 7
  %v4_a2fc = inttoptr i32 %v3_a2fc to i8*
  store i8 %v1_a2fc, i8* %v4_a2fc, align 1
  %v0_a300 = load i32, i32* @r6, align 4
  store i32 %v0_a300, i32* %r0.global-to-local, align 4
  %v4_a304 = call i32 @function_d114(i32 %v0_a300, i32 %v0_a2e4, i32 %v5_a2f0, i32 %stack_var_-152.0.ph)
  %v5_a304 = trunc i32 %v4_a304 to i8
  store i32 %v4_a304, i32* %r0.global-to-local, align 4
  %v3_a308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a308, i32* %r3.global-to-local, align 4
  %v3_a30c = mul i32 %v3_a308, 32
  store i32 %v3_a30c, i32* %r2.global-to-local, align 4
  %v0_a310 = load i32, i32* @r5, align 4
  %v1_a310 = add i32 %v0_a310, 16
  %v2_a310 = inttoptr i32 %v1_a310 to i32*
  %v3_a310 = load i32, i32* %v2_a310, align 4
  store i32 %v3_a310, i32* %r1.global-to-local, align 4
  %v5_a314 = mul i32 %v3_a308, 24
  store i32 %v5_a314, i32* %r2.global-to-local, align 4
  %v4_a31842 = udiv i32 %v4_a304, 256
  %v1_a31c = trunc i32 %v4_a31842 to i8
  %v2_a31c = load i32, i32* @r7, align 4
  %v3_a31c = add i32 %v2_a31c, 7
  %v4_a31c = inttoptr i32 %v3_a31c to i8*
  store i8 %v1_a31c, i8* %v4_a31c, align 1
  %v0_a320 = load i32, i32* %r2.global-to-local, align 4
  %v1_a320 = load i32, i32* @sb, align 4
  %v2_a320 = add i32 %v1_a320, %v0_a320
  store i32 %v2_a320, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a328 = load i32, i32* @r7, align 4
  %v4_a328 = add i32 %v3_a328, 6
  %v5_a328 = inttoptr i32 %v4_a328 to i8*
  store i8 %v5_a304, i8* %v5_a328, align 1
  %v0_a32c = load i32, i32* %r1.global-to-local, align 4
  %v1_a32c = load i32, i32* %lr.global-to-local, align 4
  %v2_a32c = add i32 %v1_a32c, 4
  %v3_a32c = inttoptr i32 %v2_a32c to i32*
  store i32 %v0_a32c, i32* %v3_a32c, align 4
  %v0_a330 = load i32, i32* %r3.global-to-local, align 4
  %v1_a330 = trunc i32 %v0_a330 to i8
  %v2_a330 = load i32, i32* %r2.global-to-local, align 4
  %v3_a330 = load i32, i32* @sb, align 4
  %v4_a330 = add i32 %v3_a330, %v2_a330
  %v5_a330 = inttoptr i32 %v4_a330 to i8*
  store i8 %v1_a330, i8* %v5_a330, align 1
  %v0_a334 = load i32, i32* @r8, align 4
  %v1_a334 = trunc i32 %v0_a334 to i8
  %v2_a334 = load i32, i32* %lr.global-to-local, align 4
  %v3_a334 = add i32 %v2_a334, 2
  %v4_a334 = inttoptr i32 %v3_a334 to i8*
  store i8 %v1_a334, i8* %v4_a334, align 1
  %v0_a338 = load i32, i32* @r8, align 4
  %v1_a338 = trunc i32 %v0_a338 to i8
  %v2_a338 = load i32, i32* %lr.global-to-local, align 4
  %v3_a338 = add i32 %v2_a338, 1
  %v4_a338 = inttoptr i32 %v3_a338 to i8*
  store i8 %v1_a338, i8* %v4_a338, align 1
  %v0_a33c = load i32, i32* @r8, align 4
  %v1_a33c = trunc i32 %v0_a33c to i8
  %v2_a33c = load i32, i32* %lr.global-to-local, align 4
  %v3_a33c = add i32 %v2_a33c, 3
  %v4_a33c = inttoptr i32 %v3_a33c to i8*
  store i8 %v1_a33c, i8* %v4_a33c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a348 = load i32, i32* @r5, align 4
  store i32 %v0_a348, i32* %r1.global-to-local, align 4
  store i32 %v3_9efc, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_a354 = load i32, i32* %lr.global-to-local, align 4
  %v6_a35c = inttoptr i32 %v0_a348 to i32*
  %v7_a35c = call i32 @function_11b4c(i32 %v3_9efc, i32* %v6_a35c, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_a354, i32 16)
  %v3_a360 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a360, i32* %r3.global-to-local, align 4
  %v1_a364 = add i32 %v3_a360, 1
  store i32 %v1_a364, i32* %r0.global-to-local, align 4
  %v1_a368 = load i32, i32* @fp, align 4
  %v9_a368 = icmp eq i32 %v1_a364, %v1_a368
  store i1 %v9_a368, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a364, i32* %stack_var_-40, align 4
  %v6_a370 = icmp slt i32 %v1_a364, %v1_a368
  br i1 %v6_a370, label %dec_label_pc_a228, label %dec_label_pc_a210

dec_label_pc_a378:                                ; preds = %dec_label_pc_9f0c
  store i32 %v3_9efc, i32* %r0.global-to-local, align 4
  %v1_a37c = call i32 @function_112cc(i32 %v3_9efc)
  store i32 %v1_a37c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a380

dec_label_pc_a380:                                ; preds = %dec_label_pc_9da8, %dec_label_pc_a378
  %v29_a384 = phi i32 [ %v3_9efc, %dec_label_pc_9da8 ], [ %v1_a37c, %dec_label_pc_a378 ]
  store i32 %v3_9da8, i32* %r4.global-to-local, align 4
  store i32 %v15_9da8, i32* %r8.global-to-local, align 4
  ret i32 %v29_a384

dec_label_pc_a388:                                ; preds = %dec_label_pc_a228
  %v1_a388 = add i32 %v2_a230, 16
  %v2_a388 = inttoptr i32 %v1_a388 to i32*
  %v3_a388 = load i32, i32* %v2_a388, align 4
  store i32 %v3_a388, i32* %r4.global-to-local, align 4
  %v0_a38c = call i32 @function_e72c()
  store i32 %v0_a38c, i32* %r0.global-to-local, align 4
  %v3_a390 = load i32, i32* %stack_var_-40, align 4
  %v5_a398 = mul i32 %v3_a390, 24
  %v0_a39c = load i32, i32* %r4.global-to-local, align 4
  %v1_a3a0 = load i32, i32* @sb, align 4
  %v2_a3a0 = add i32 %v1_a3a0, %v5_a398
  store i32 %v2_a3a0, i32* %r1.global-to-local, align 4
  %v1_a3a4 = and i32 %v0_a39c, 65280
  store i32 %v1_a3a4, i32* %r3.global-to-local, align 4
  %v1_a39c = udiv i32 %v0_a39c, 256
  %v3_a3a8 = and i32 %v1_a39c, 65280
  store i32 %v3_a3a8, i32* %r2.global-to-local, align 4
  %v1_a3b0 = add i32 %v2_a3a0, 20
  %v2_a3b0 = inttoptr i32 %v1_a3b0 to i8*
  %v3_a3b0 = load i8, i8* %v2_a3b0, align 1
  %v4_a3b0 = zext i8 %v3_a3b0 to i32
  store i32 %v4_a3b0, i32* %lr.global-to-local, align 4
  %v2_a3bc = call i32 @llvm.bswap.i32(i32 %v0_a39c)
  %v7_a3c0 = lshr i32 %v0_a38c, %v4_a3b0
  %v8_a3c0 = add i32 %v7_a3c0, %v2_a3bc
  %v3_a3cc = mul i32 %v8_a3c0, 16777216
  %v1_a3d0 = and i32 %v8_a3c0, 65280
  store i32 %v1_a3d0, i32* %r0.global-to-local, align 4
  store i32 %v5_9ee8, i32* %r2.global-to-local, align 4
  %v4_a3dc = mul nuw nsw i32 %v1_a3d0, 256
  %v5_a3dc = or i32 %v4_a3dc, %v3_a3cc
  store i32 %v5_a3dc, i32* %r1.global-to-local, align 4
  %v2_a3e0 = call i32 @llvm.bswap.i32(i32 %v8_a3c0)
  store i32 %v2_a3e0, i32* %r3.global-to-local, align 4
  store i1 %v7_a254, i1* %cpsr_z.global-to-local, align 1
  %v1_a3e8 = load i32, i32* @r5, align 4
  %v2_a3e8 = add i32 %v1_a3e8, 16
  %v3_a3e8 = inttoptr i32 %v2_a3e8 to i32*
  store i32 %v2_a3e0, i32* %v3_a3e8, align 4
  br i1 %v2_a254, label %dec_label_pc_a3f0, label %dec_label_pc_a25c

dec_label_pc_a3f0:                                ; preds = %dec_label_pc_a388, %dec_label_pc_a250
  %v0_a3f0 = call i32 @function_e72c()
  store i32 %v0_a3f0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_a3fc = load i32, i32* @sl, align 4
  %v9_a3fc = icmp eq i32 %v0_a3fc, 65535
  store i1 %v9_a3fc, i1* %cpsr_z.global-to-local, align 1
  %v1_a400 = load i32, i32* @r5, align 4
  %v2_a400 = add i32 %v1_a400, 12
  %v3_a400 = inttoptr i32 %v2_a400 to i32*
  store i32 %v0_a3f0, i32* %v3_a400, align 4
  br i1 %v9_a3fc, label %dec_label_pc_a408, label %dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge

dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge:    ; preds = %dec_label_pc_a3f0
  %v1_a270.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a26c

dec_label_pc_a408:                                ; preds = %dec_label_pc_a3f0, %dec_label_pc_a25c
  %v0_a408 = call i32 @function_e72c()
  %v3_a410 = urem i32 %v0_a408, 65536
  store i32 %v3_a410, i32* %r0.global-to-local, align 4
  %v3_a41415 = udiv i32 %v0_a408, 256
  %v1_a418 = trunc i32 %v3_a41415 to i8
  %v2_a418 = load i32, i32* @r5, align 4
  %v3_a418 = add i32 %v2_a418, 5
  %v4_a418 = inttoptr i32 %v3_a418 to i8*
  store i8 %v1_a418, i8* %v4_a418, align 1
  %v0_a41c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_9f50, i32* %r3.global-to-local, align 4
  %v1_a424 = sub i32 999, %v0_a41c
  store i32 %v1_a424, i32* %r2.global-to-local, align 4
  %v3_a428 = sdiv i32 %v1_a424, 256
  store i32 %v3_a428, i32* %r1.global-to-local, align 4
  %v1_a42c = load i32, i32* @r4, align 4
  %v9_a42c = icmp eq i32 %v3_9f50, %v1_a42c
  store i1 %v9_a42c, i1* %cpsr_z.global-to-local, align 1
  %v1_a430 = trunc i32 %v0_a41c to i8
  %v2_a430 = load i32, i32* @r5, align 4
  %v3_a430 = add i32 %v2_a430, 4
  %v4_a430 = inttoptr i32 %v3_a430 to i8*
  store i8 %v1_a430, i8* %v4_a430, align 1
  %v0_a434 = load i32, i32* %r1.global-to-local, align 4
  %v1_a434 = trunc i32 %v0_a434 to i8
  %v2_a434 = load i32, i32* @r6, align 4
  %v3_a434 = add i32 %v2_a434, 5
  %v4_a434 = inttoptr i32 %v3_a434 to i8*
  store i8 %v1_a434, i8* %v4_a434, align 1
  %v0_a438 = load i32, i32* %r2.global-to-local, align 4
  %v1_a438 = trunc i32 %v0_a438 to i8
  %v2_a438 = load i32, i32* @r6, align 4
  %v3_a438 = add i32 %v2_a438, 4
  %v4_a438 = inttoptr i32 %v3_a438 to i8*
  store i8 %v1_a438, i8* %v4_a438, align 1
  %v0_a43c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a43c, label %dec_label_pc_a440, label %dec_label_pc_a408.dec_label_pc_a278_crit_edge

dec_label_pc_a408.dec_label_pc_a278_crit_edge:    ; preds = %dec_label_pc_a408
  %v1_a27c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a278

dec_label_pc_a440:                                ; preds = %dec_label_pc_a408, %dec_label_pc_a26c
  %v0_a440 = call i32 @function_e72c()
  %v1_a440 = trunc i32 %v0_a440 to i8
  store i32 %v0_a440, i32* %r0.global-to-local, align 4
  store i32 %v3_9f54, i32* %r1.global-to-local, align 4
  %v4_a448 = sdiv i32 %v0_a440, 256
  store i32 %v4_a448, i32* %r3.global-to-local, align 4
  %v1_a44c = load i32, i32* @r4, align 4
  %v9_a44c = icmp eq i32 %v3_9f54, %v1_a44c
  store i1 %v9_a44c, i1* %cpsr_z.global-to-local, align 1
  %v3_a450 = load i32, i32* @r5, align 4
  %v4_a450 = add i32 %v3_a450, 44
  %v5_a450 = inttoptr i32 %v4_a450 to i8*
  store i8 %v1_a440, i8* %v5_a450, align 1
  %v0_a454 = load i32, i32* %r3.global-to-local, align 4
  %v1_a454 = trunc i32 %v0_a454 to i8
  %v2_a454 = load i32, i32* @r7, align 4
  %v3_a454 = add i32 %v2_a454, 1
  %v4_a454 = inttoptr i32 %v3_a454 to i8*
  store i8 %v1_a454, i8* %v4_a454, align 1
  %v0_a458 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a458, label %dec_label_pc_a45c, label %dec_label_pc_a284

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a440, %dec_label_pc_a278
  %v0_a45c = call i32 @function_e72c()
  %v1_a45c = trunc i32 %v0_a45c to i8
  store i32 %v0_a45c, i32* %r0.global-to-local, align 4
  store i32 %v1_9f48, i32* %r2.global-to-local, align 4
  %v4_a464 = sdiv i32 %v0_a45c, 256
  store i32 %v4_a464, i32* %r3.global-to-local, align 4
  store i1 %v2_a288, i1* %cpsr_z.global-to-local, align 1
  %v1_a46c = trunc i32 %v4_a464 to i8
  %v2_a46c = load i32, i32* @r7, align 4
  %v3_a46c = add i32 %v2_a46c, 3
  %v4_a46c = inttoptr i32 %v3_a46c to i8*
  store i8 %v1_a46c, i8* %v4_a46c, align 1
  %v0_a470 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a470, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_a45c
  %v1_a470 = load i32, i32* @r5, align 4
  %v2_a470 = add i32 %v1_a470, 16
  %v3_a470 = inttoptr i32 %v2_a470 to i32*
  %v4_a470 = load i32, i32* %v3_a470, align 4
  store i32 %v4_a470, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_a45c, %bb100
  %v3_a474 = load i32, i32* @r7, align 4
  %v4_a474 = add i32 %v3_a474, 2
  %v5_a474 = inttoptr i32 %v4_a474 to i8*
  store i8 %v1_a45c, i8* %v5_a474, align 1
  %v0_a478 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a478, label %dec_label_pc_a480, label %bb102

bb102:                                            ; preds = %bb101
  %v1_a478 = load i32, i32* %r3.global-to-local, align 4
  %v2_a478 = load i32, i32* @r6, align 4
  %v3_a478 = add i32 %v2_a478, 16
  %v4_a478 = inttoptr i32 %v3_a478 to i32*
  store i32 %v1_a478, i32* %v4_a478, align 4
  br label %dec_label_pc_a298

dec_label_pc_a480:                                ; preds = %dec_label_pc_a284, %bb101
  %v0_a480 = call i32 @function_e72c()
  store i32 %v0_a480, i32* %r0.global-to-local, align 4
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  store i1 %v2_a488, i1* %cpsr_z.global-to-local, align 1
  %v1_a48c = load i32, i32* @r6, align 4
  %v2_a48c = add i32 %v1_a48c, 16
  %v3_a48c = inttoptr i32 %v2_a48c to i32*
  store i32 %v0_a480, i32* %v3_a48c, align 4
  br i1 %v2_a488, label %dec_label_pc_a2a4, label %dec_label_pc_a494

dec_label_pc_a494:                                ; preds = %dec_label_pc_a298, %dec_label_pc_a480
  %v0_a494 = load i32, i32* @r7, align 4
  %v1_a494 = add i32 %v0_a494, 8
  store i32 %v1_a494, i32* %r0.global-to-local, align 4
  store i32 %v5_9e94, i32* @r1, align 4
  %v1_a49c = inttoptr i32 %v1_a494 to i8*
  %v2_a49c = call i32 @function_e8ac(i8* %v1_a49c)
  store i32 %v2_a49c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2a4

dec_label_pc_a4a4:                                ; preds = %dec_label_pc_9f34
  %v1_a4ac = add i32 %v5_9e94, 8
  store i32 %v1_a4ac, i32* %r2.global-to-local, align 4
  %v1_a4b0 = add i32 %v5_9e94, 52
  store i32 %v1_a4b0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a210.preheader

; uselistorder directives
  uselistorder i32 %v1_a4b0, { 1, 0 }
  uselistorder i32 %v1_a4ac, { 1, 0 }
  uselistorder i32 %v4_a464, { 1, 0 }
  uselistorder i32 %v0_a45c, { 0, 2, 1 }
  uselistorder i32 %v0_a440, { 0, 2, 1 }
  uselistorder i32 %v2_a3e0, { 1, 0 }
  uselistorder i32 %v8_a3c0, { 1, 2, 0 }
  uselistorder i32 %v0_a39c, { 1, 0, 2 }
  uselistorder i32 %v1_a368, { 1, 2, 0 }
  uselistorder i32 %v1_a364, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_a308, { 1, 0, 2 }
  uselistorder i32 %v4_a304, { 0, 2, 1 }
  uselistorder i32 %v0_a2e4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_a2d4, { 0, 2, 1 }
  uselistorder i32 %v4_a2b8, { 1, 0 }
  uselistorder i32 %v7_a23c, { 1, 0, 2 }
  uselistorder i32 %v0_a210, { 1, 0 }
  uselistorder i1 %v7_a254, { 2, 1, 0 }
  uselistorder i1 %v2_a488, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a1d0, { 1, 0, 2 }
  uselistorder i32 %v0_a194, { 1, 0, 2 }
  uselistorder i32 %v3_a048, { 0, 2, 1 }
  uselistorder i32 %v3_a008, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_9fc0, { 1, 0 }
  uselistorder i32 %v1_9f9c, { 1, 0 }
  uselistorder i32 %v1_9f98, { 0, 2, 1 }
  uselistorder i32 %v3_9f7c, { 2, 1, 0 }
  uselistorder i32 %v0_9f58, { 1, 0, 2 }
  uselistorder i32 %v1_9f48, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_9f44, { 0, 2, 1 }
  uselistorder i32 %v0_9f40, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_9f2c, { 1, 0 }
  uselistorder i1 %v7_9f00, { 1, 0 }
  uselistorder i32 %v3_9efc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_9ee8, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9eb4, { 1, 0, 2 }
  uselistorder i32 %v5_9e94, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_9e38, { 1, 0 }
  uselistorder i32 %v2_9dc8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9dac, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_a494, { 1, 0 }
  uselistorder label %dec_label_pc_a480, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_a380, { 1, 0 }
  uselistorder label %dec_label_pc_a2a4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a210.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_a4c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a4c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a4c4 = load i32, i32* @r4, align 4
  %v12_a4c4 = load i32, i32* @r7, align 4
  %v1_a4c8 = urem i32 %arg1, 256
  store i32 %v1_a4c8, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_a4dc = urem i32 %arg3, 256
  store i32 %v1_a4dc, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_a4e4 = call i32 @function_11e9c(i32 %v1_a4c8, i32 4)
  %v0_a4e8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4f4 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4fc = inttoptr i32 %v0_a4e8 to i32*
  %v6_a4fc = call i32 @function_85e0(i32 %v0_a4f4, i32* %v5_a4fc, i32 2, i32 0)
  %v1_a508 = urem i32 %v6_a4fc, 256
  store i32 %v1_a508, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a514 = load i32, i32* @r4, align 4
  %v0_a518 = load i32, i32* @r5, align 4
  %v5_a51c = trunc i32 %v6_a4fc to i8
  %v6_a520 = inttoptr i32 %v0_a518 to i32*
  %v7_a520 = call i32 @function_85e0(i32 %v0_a514, i32* %v6_a520, i32 3, i32 65535)
  %v0_a524 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a520, i32* @r7, align 4
  %v0_a534 = load i32, i32* @r4, align 4
  %v4_a538 = inttoptr i32 %v0_a524 to i32*
  %v5_a538 = call i32 @function_85e0(i32 %v0_a534, i32* %v4_a538, i32 4, i32 64)
  %v1_a540 = urem i32 %v5_a538, 256
  store i32 %v1_a540, i32* %ip.global-to-local, align 4
  %v0_a544 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a550 = load i32, i32* @r4, align 4
  %v5_a554 = trunc i32 %v5_a538 to i8
  %v6_a558 = inttoptr i32 %v0_a544 to i32*
  %v7_a558 = call i32 @function_85e0(i32 %v0_a550, i32* %v6_a558, i32 5, i32 0)
  %v1_a564 = urem i32 %v7_a558, 256
  store i32 %v1_a564, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a570 = load i32, i32* @r4, align 4
  %v0_a574 = load i32, i32* @r5, align 4
  %v5_a57c = inttoptr i32 %v0_a574 to i32*
  %v6_a57c = call i32 @function_85e0(i32 %v0_a570, i32* %v5_a57c, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a58c = load i32, i32* @r5, align 4
  store i32 %v6_a57c, i32* @r6, align 4
  %v0_a594 = load i32, i32* @r4, align 4
  %v4_a598 = inttoptr i32 %v0_a58c to i32*
  %v5_a598 = call i32 @function_85e0(i32 %v0_a594, i32* %v4_a598, i32 7, i32 27015)
  store i32 %v5_a598, i32* @r4, align 4
  %v1_a5a4 = call i32 @function_103fc(i32 20)
  %v3_a5b0 = call i32 @function_10318(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v3_a5b0, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a5c4 = call i32 @function_11bb0(i32 2, i32 3, i32 17)
  %v7_a5c8 = icmp eq i32 %v3_a5c4, -1
  store i1 %v7_a5c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a5c4, i32* %fp.global-to-local, align 4
  br i1 %v7_a5c8, label %dec_label_pc_a97c, label %dec_label_pc_a5d4

dec_label_pc_a5d4:                                ; preds = %dec_label_pc_a4c4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a5dc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a5dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a5f0 = call i32 @function_11b80(i32 %v3_a5c4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_a5f4 = icmp eq i32 %v6_a5f0, -1
  store i1 %v7_a5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5f4, label %dec_label_pc_a974, label %dec_label_pc_a5fc

dec_label_pc_a5fc:                                ; preds = %dec_label_pc_a5d4
  %v0_a5fc = load i32, i32* @r4, align 4
  %v3_a5fc = mul i32 %v0_a5fc, 65536
  store i32 %v3_a5fc, i32* @lr, align 4
  %v0_a600 = load i32, i32* @r7, align 4
  %v0_a604 = load i32, i32* @r6, align 4
  %v3_a604 = mul i32 %v0_a604, 65536
  store i32 %v3_a604, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a60c = urem i32 %v0_a600, 65536
  %v3_a610 = urem i32 %v0_a604, 65536
  store i32 %v3_a610, i32* %r2.global-to-local, align 4
  %v3_a614 = urem i32 %v0_a5fc, 65536
  store i32 %v3_a614, i32* %r3.global-to-local, align 4
  %v0_a618 = load i32, i32* %sb.global-to-local, align 4
  %v2_a618 = icmp eq i32 %v0_a618, 0
  store i1 %v2_a618, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_a618, 1
  br i1 %tmp50, label %dec_label_pc_a79c, label %dec_label_pc_a630

dec_label_pc_a630:                                ; preds = %dec_label_pc_a5fc
  %v1_a634 = urem i32 %v0_a5fc, 256
  %v1_a638 = urem i32 %v0_a604, 256
  %v1_a63c = urem i32 %v0_a600, 256
  %v3_a640 = mul nuw nsw i32 %v1_a638, 256
  %v3_a644 = mul nuw nsw i32 %v1_a634, 256
  %tmp51 = udiv i32 %v0_a600, 256
  %v3_a648 = urem i32 %tmp51, 256
  %v4_a64c = mul nuw nsw i32 %v1_a63c, 256
  %v5_a64c = or i32 %v4_a64c, %v3_a648
  store i32 %v5_a64c, i32* @r7, align 4
  %tmp52 = udiv i32 %v0_a5fc, 256
  %v4_a650 = urem i32 %tmp52, 256
  %v5_a650 = or i32 %v4_a650, %v3_a644
  store i32 %v5_a650, i32* @r5, align 4
  %tmp53 = udiv i32 %v0_a604, 256
  %v4_a654 = urem i32 %tmp53, 256
  %v5_a654 = or i32 %v4_a654, %v3_a640
  store i32 %v5_a654, i32* @r6, align 4
  store i32 %v1_a638, i32* %r2.global-to-local, align 4
  store i32 %v1_a634, i32* %r3.global-to-local, align 4
  %v2_a6d0 = icmp eq i32 %v1_a564, 0
  %v4_a6d4 = sext i8 %v5_a554 to i32
  %sext = mul i32 %v0_a600, 16777216
  %v4_a6f0 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_a604, 16777216
  %v4_a74c = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_a5fc, 16777216
  %v4_a76c = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %bb57, %dec_label_pc_a630
  %v2_a678 = call i32 @function_11e9c(i32 128, i32 1)
  store i32 %v2_a4e4, i32* %r2.global-to-local, align 4
  %v3_a680 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a680, i32* %r3.global-to-local, align 4
  %v2_a684 = load i32, i32* @r4, align 4
  %v5_a684 = mul i32 %v2_a684, 4
  %v6_a684 = add i32 %v5_a684, %v2_a4e4
  %v7_a684 = inttoptr i32 %v6_a684 to i32*
  store i32 %v2_a678, i32* %v7_a684, align 4
  %v0_a688 = load i32, i32* %r2.global-to-local, align 4
  %v1_a688 = load i32, i32* %r3.global-to-local, align 4
  %v4_a688 = mul i32 %v1_a688, 4
  %v5_a688 = add i32 %v4_a688, %v0_a688
  %v6_a688 = inttoptr i32 %v5_a688 to i32*
  %v7_a688 = load i32, i32* %v6_a688, align 4
  store i32 %v7_a688, i32* @lr, align 4
  %v1_a68c = inttoptr i32 %v7_a688 to i8*
  %v2_a68c = load i8, i8* %v1_a68c, align 1
  %tmp = urem i8 %v2_a68c, 16
  %v1_a690 = zext i8 %tmp to i32
  %v1_a694 = or i32 %v1_a690, 64
  store i32 %v1_a694, i32* %r3.global-to-local, align 4
  %v1_a698 = trunc i32 %v1_a694 to i8
  store i8 %v1_a698, i8* %v1_a68c, align 1
  %v0_a69c = load i32, i32* @lr, align 4
  %v1_a69c = inttoptr i32 %v0_a69c to i8*
  %v2_a69c = load i8, i8* %v1_a69c, align 1
  %v1_a6a0 = and i8 %v2_a69c, -16
  %v1_a6a4 = or i8 %v1_a6a0, 5
  store i8 %v1_a6a4, i8* %v1_a69c, align 1
  %v2_a6b0 = load i32, i32* @lr, align 4
  %v3_a6b0 = add i32 %v2_a6b0, 1
  %v4_a6b0 = inttoptr i32 %v3_a6b0 to i8*
  store i8 %v5_a51c, i8* %v4_a6b0, align 1
  %v3_a6b4 = load i32, i32* %stack_var_-44, align 4
  %v1_a6b8 = add i32 %v3_a6b4, 32
  %tmp54 = mul i32 %v1_a6b8, 256
  %v1_a6c4 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_a6b8, 256
  %v4_a6c8 = urem i32 %tmp55, 256
  %v5_a6c8 = or i32 %v4_a6c8, %v1_a6c4
  store i32 %v5_a6c8, i32* %r2.global-to-local, align 4
  store i1 %v2_a6d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_a6d4, i32* %r3.global-to-local, align 4
  %v2_a6d8 = load i32, i32* @lr, align 4
  %v3_a6d8 = add i32 %v2_a6d8, 8
  %v4_a6d8 = inttoptr i32 %v3_a6d8 to i8*
  store i8 %v5_a554, i8* %v4_a6d8, align 1
  %v0_a6dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a6dc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a670
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a6e0 = load i32, i32* @lr, align 4
  %v4_a6e0 = add i32 %v3_a6e0, 6
  %v5_a6e0 = inttoptr i32 %v4_a6e0 to i8*
  store i8 64, i8* %v5_a6e0, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a670, %bb
  %v0_a6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* @lr, align 4
  %v3_a6e4 = add i32 %v2_a6e4, 2
  %v4_a6e4 = inttoptr i32 %v3_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v4_a6e4, align 1
  %v0_a6e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a6e8 = sdiv i32 %v0_a6e8, 256
  store i32 %v3_a6e8, i32* %ip.global-to-local, align 4
  store i32 %v4_a6f0, i32* %r2.global-to-local, align 4
  %v2_a6f4 = load i32, i32* @lr, align 4
  %v3_a6f4 = add i32 %v2_a6f4, 9
  %v4_a6f4 = inttoptr i32 %v3_a6f4 to i8*
  store i8 17, i8* %v4_a6f4, align 1
  store i32 ptrtoint (i32* @global_var_1c2d0.49 to i32), i32* %r3.global-to-local, align 4
  %v0_a6fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a6fc = trunc i32 %v0_a6fc to i8
  %v2_a6fc = load i32, i32* @lr, align 4
  %v3_a6fc = add i32 %v2_a6fc, 5
  %v4_a6fc = inttoptr i32 %v3_a6fc to i8*
  store i8 %v1_a6fc, i8* %v4_a6fc, align 1
  %v0_a700 = load i32, i32* %ip.global-to-local, align 4
  %v1_a700 = trunc i32 %v0_a700 to i8
  %v2_a700 = load i32, i32* @lr, align 4
  %v3_a700 = add i32 %v2_a700, 3
  %v4_a700 = inttoptr i32 %v3_a700 to i8*
  store i8 %v1_a700, i8* %v4_a700, align 1
  %v0_a704 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a704, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_a7089 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a7089, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a708 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a708, i32* %ip.global-to-local, align 4
  %v3_a70c = load i32, i32* @lr, align 4
  %v4_a70c = add i32 %v3_a70c, 7
  %v5_a70c = inttoptr i32 %v4_a70c to i8*
  store i8 0, i8* %v5_a70c, align 1
  %v0_a714.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_a714 = phi i32 [ %v3_a7089, %.thread8 ], [ %v0_a714.pre, %bb56 ]
  %v2_a710 = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_a710, i32* %r2.global-to-local, align 4
  %v3_a714 = mul i32 %v0_a714, 32
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  %v1_a718 = load i32, i32* @lr, align 4
  %v2_a718 = add i32 %v1_a718, 12
  %v3_a718 = inttoptr i32 %v2_a718 to i32*
  store i32 %v2_a710, i32* %v3_a718, align 4
  %v0_a71c = load i32, i32* %r3.global-to-local, align 4
  %v1_a71c = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_a71c, -8
  %v5_a71c = add i32 %v0_a71c, %tmp60
  %v1_a720 = load i32, i32* @sl, align 4
  %v2_a720 = add i32 %v5_a71c, %v1_a720
  store i32 %v2_a720, i32* %r3.global-to-local, align 4
  %v1_a724 = add i32 %v2_a720, 16
  %v2_a724 = inttoptr i32 %v1_a724 to i32*
  %v3_a724 = load i32, i32* %v2_a724, align 4
  %v1_a728 = load i32, i32* @lr, align 4
  %v2_a728 = add i32 %v1_a728, 16
  %v3_a728 = inttoptr i32 %v2_a728 to i32*
  store i32 %v3_a724, i32* %v3_a728, align 4
  %v3_a72c = load i32, i32* %stack_var_-44, align 4
  %v1_a730 = add i32 %v3_a72c, 12
  %tmp58 = mul i32 %v1_a730, 256
  %v1_a740 = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_a730, 256
  %v4_a744 = urem i32 %tmp59, 256
  %v5_a744 = or i32 %v4_a744, %v1_a740
  store i32 %v5_a744, i32* %ip.global-to-local, align 4
  %v1_a748 = load i32, i32* @lr, align 4
  %v2_a748 = add i32 %v1_a748, 28
  %v3_a748 = inttoptr i32 %v2_a748 to i32*
  store i32 -1, i32* %v3_a748, align 4
  store i32 %v4_a74c, i32* %r2.global-to-local, align 4
  %v0_a750 = load i32, i32* @lr, align 4
  %v1_a750 = add i32 %v0_a750, 20
  store i32 %v1_a750, i32* %r4.global-to-local, align 4
  %v0_a754 = load i32, i32* %ip.global-to-local, align 4
  %v3_a754 = sdiv i32 %v0_a754, 256
  store i32 %v3_a754, i32* %r3.global-to-local, align 4
  %v0_a758 = load i32, i32* @r7, align 4
  %v1_a758 = trunc i32 %v0_a758 to i8
  %v3_a758 = add i32 %v0_a750, 4
  %v4_a758 = inttoptr i32 %v3_a758 to i8*
  store i8 %v1_a758, i8* %v4_a758, align 1
  %v0_a75c = load i32, i32* @r6, align 4
  %v1_a75c = trunc i32 %v0_a75c to i8
  %v2_a75c = load i32, i32* @lr, align 4
  %v3_a75c = add i32 %v2_a75c, 20
  %v4_a75c = inttoptr i32 %v3_a75c to i8*
  store i8 %v1_a75c, i8* %v4_a75c, align 1
  %v0_a760 = load i32, i32* %r3.global-to-local, align 4
  %v1_a760 = trunc i32 %v0_a760 to i8
  %v2_a760 = load i32, i32* %r4.global-to-local, align 4
  %v3_a760 = add i32 %v2_a760, 5
  %v4_a760 = inttoptr i32 %v3_a760 to i8*
  store i8 %v1_a760, i8* %v4_a760, align 1
  %v0_a764 = load i32, i32* @r5, align 4
  %v1_a764 = trunc i32 %v0_a764 to i8
  %v2_a764 = load i32, i32* %r4.global-to-local, align 4
  %v3_a764 = add i32 %v2_a764, 2
  %v4_a764 = inttoptr i32 %v3_a764 to i8*
  store i8 %v1_a764, i8* %v4_a764, align 1
  %v0_a768 = load i32, i32* %r2.global-to-local, align 4
  %v1_a768 = trunc i32 %v0_a768 to i8
  %v2_a768 = load i32, i32* %r4.global-to-local, align 4
  %v3_a768 = add i32 %v2_a768, 1
  %v4_a768 = inttoptr i32 %v3_a768 to i8*
  store i8 %v1_a768, i8* %v4_a768, align 1
  store i32 %v4_a76c, i32* %r3.global-to-local, align 4
  %v0_a770 = load i32, i32* %ip.global-to-local, align 4
  %v1_a770 = trunc i32 %v0_a770 to i8
  %v2_a770 = load i32, i32* %r4.global-to-local, align 4
  %v3_a770 = add i32 %v2_a770, 4
  %v4_a770 = inttoptr i32 %v3_a770 to i8*
  store i8 %v1_a770, i8* %v4_a770, align 1
  %v0_a774 = load i32, i32* %r3.global-to-local, align 4
  %v1_a774 = trunc i32 %v0_a774 to i8
  %v2_a774 = load i32, i32* %r4.global-to-local, align 4
  %v3_a774 = add i32 %v2_a774, 3
  %v4_a774 = inttoptr i32 %v3_a774 to i8*
  store i8 %v1_a774, i8* %v4_a774, align 1
  %v0_a778 = load i32, i32* %r8.global-to-local, align 4
  %v0_a77c = load i32, i32* @lr, align 4
  %v1_a77c = add i32 %v0_a77c, 32
  %v3_a780 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a780, i32* %r2.global-to-local, align 4
  %v3_a784 = call i32 @function_10a44(i32 %v1_a77c, i32 %v0_a778, i32 %v3_a780)
  %v3_a788 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a788, i32* %r3.global-to-local, align 4
  %v1_a78c = add i32 %v3_a788, 1
  store i32 %v1_a78c, i32* @r4, align 4
  %v1_a790 = load i32, i32* %sb.global-to-local, align 4
  %v9_a790 = icmp eq i32 %v1_a78c, %v1_a790
  store i1 %v9_a790, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a78c, i32* %stack_var_-40, align 4
  %v5_a798 = icmp slt i32 %v1_a78c, %v1_a790
  br i1 %v5_a798, label %dec_label_pc_a670, label %dec_label_pc_a79c

dec_label_pc_a79c:                                ; preds = %bb57, %dec_label_pc_a5fc
  %v0_a79c = phi i32 [ %v0_a618, %dec_label_pc_a5fc ], [ %v1_a790, %bb57 ]
  %v2_a79c = icmp eq i32 %v0_a79c, 0
  store i1 %v2_a79c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a7e4 = icmp eq i32 %v3_a60c, 65535
  br label %dec_label_pc_a7a4.outer

dec_label_pc_a7a4.outer:                          ; preds = %dec_label_pc_a8b4, %dec_label_pc_a79c
  %v1_a7a4.ph.in = phi i32 [ %v1_a8a8, %dec_label_pc_a8b4 ], [ %v0_a79c, %dec_label_pc_a79c ]
  %v0_a7a4.ph = phi i1 [ %v2_a8b4, %dec_label_pc_a8b4 ], [ %v2_a79c, %dec_label_pc_a79c ]
  %v1_a7a4.ph = icmp slt i32 %v1_a7a4.ph.in, 0
  %v4_a7a4 = or i1 %v1_a7a4.ph, %v0_a7a4.ph
  br label %dec_label_pc_a7a4

dec_label_pc_a7a4:                                ; preds = %dec_label_pc_a7a4.outer, %dec_label_pc_a7a4
  br i1 %v4_a7a4, label %dec_label_pc_a7a4, label %dec_label_pc_a7a8

dec_label_pc_a7a8:                                ; preds = %dec_label_pc_a7a4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_a7b4

dec_label_pc_a7b4:                                ; preds = %dec_label_pc_a804, %dec_label_pc_a7a8
  %v1_a7c8 = phi i32 [ %v1_a8a4, %dec_label_pc_a804 ], [ 0, %dec_label_pc_a7a8 ]
  %v5_a7b8 = mul i32 %v1_a7c8, 24
  %v1_a7bc = load i32, i32* @sl, align 4
  %v2_a7bc = add i32 %v1_a7bc, %v5_a7b8
  store i32 %v2_a7bc, i32* %r3.global-to-local, align 4
  %v1_a7c4 = add i32 %v2_a7bc, 20
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i8*
  %v3_a7c4 = load i8, i8* %v2_a7c4, align 1
  %v4_a7c4 = zext i8 %v3_a7c4 to i32
  store i32 %v4_a7c4, i32* %r2.global-to-local, align 4
  %v4_a7c8 = mul i32 %v1_a7c8, 4
  %v5_a7c8 = add i32 %v4_a7c8, %v2_a4e4
  %v6_a7c8 = inttoptr i32 %v5_a7c8 to i32*
  %v7_a7c8 = load i32, i32* %v6_a7c8, align 4
  store i32 %v7_a7c8, i32* @r5, align 4
  %v7_a7d0 = icmp eq i8 %v3_a7c4, 31
  store i1 %v7_a7d0, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_a7d8 = add i32 %v7_a7c8, 20
  store i32 %v1_a7d8, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_a7c4, 32
  br i1 %tmp61, label %dec_label_pc_a8c0, label %dec_label_pc_a7e0

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a7b4
  store i32 %v3_a60c, i32* %r2.global-to-local, align 4
  store i1 %v3_a7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a7e4, label %dec_label_pc_a928, label %dec_label_pc_a7ec

dec_label_pc_a7ec:                                ; preds = %dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge, %dec_label_pc_a7e0
  %v1_a7f0 = phi i32 [ %v1_a7f0.pre, %dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge ], [ 65535, %dec_label_pc_a7e0 ]
  store i32 %v3_a610, i32* %r3.global-to-local, align 4
  %v9_a7f0 = icmp eq i32 %v3_a610, %v1_a7f0
  store i1 %v9_a7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7f0, label %dec_label_pc_a944, label %dec_label_pc_a7f8

dec_label_pc_a7f8:                                ; preds = %dec_label_pc_a928.dec_label_pc_a7f8_crit_edge, %dec_label_pc_a7ec
  %v1_a7fc = phi i32 [ %v1_a7fc.pre, %dec_label_pc_a928.dec_label_pc_a7f8_crit_edge ], [ %v1_a7f0, %dec_label_pc_a7ec ]
  %v9_a7fc = icmp eq i32 %v3_a614, %v1_a7fc
  store i1 %v9_a7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7fc, label %dec_label_pc_a960, label %dec_label_pc_a804

dec_label_pc_a804:                                ; preds = %dec_label_pc_a944, %dec_label_pc_a7f8, %dec_label_pc_a960
  %v0_a808 = load i32, i32* %r8.global-to-local, align 4
  %v1_a808 = trunc i32 %v0_a808 to i8
  %v2_a808 = load i32, i32* @r5, align 4
  %v3_a808 = add i32 %v2_a808, 10
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v0_a80c = load i32, i32* %r8.global-to-local, align 4
  %v1_a80c = trunc i32 %v0_a80c to i8
  %v2_a80c = load i32, i32* @r5, align 4
  %v3_a80c = add i32 %v2_a80c, 11
  %v4_a80c = inttoptr i32 %v3_a80c to i8*
  store i8 %v1_a80c, i8* %v4_a80c, align 1
  %v0_a810 = load i32, i32* @r5, align 4
  store i32 %v0_a810, i32* @r0, align 4
  %v2_a814 = call i32 @function_d0b8(i32 %v0_a810, i32 20)
  %v3_a814 = trunc i32 %v2_a814 to i8
  %v4_a818 = sdiv i32 %v2_a814, 256
  store i32 %v4_a818, i32* %r3.global-to-local, align 4
  %v1_a81c = trunc i32 %v4_a818 to i8
  %v2_a81c = load i32, i32* @r5, align 4
  %v3_a81c = add i32 %v2_a81c, 11
  %v4_a81c = inttoptr i32 %v3_a81c to i8*
  store i8 %v1_a81c, i8* %v4_a81c, align 1
  %v3_a820 = load i32, i32* @r5, align 4
  %v4_a820 = add i32 %v3_a820, 10
  %v5_a820 = inttoptr i32 %v4_a820 to i8*
  store i8 %v3_a814, i8* %v5_a820, align 1
  %v0_a824 = load i32, i32* %r8.global-to-local, align 4
  %v1_a824 = trunc i32 %v0_a824 to i8
  %v2_a824 = load i32, i32* @r6, align 4
  %v3_a824 = add i32 %v2_a824, 6
  %v4_a824 = inttoptr i32 %v3_a824 to i8*
  store i8 %v1_a824, i8* %v4_a824, align 1
  %v0_a828 = load i32, i32* %r8.global-to-local, align 4
  %v1_a828 = trunc i32 %v0_a828 to i8
  %v2_a828 = load i32, i32* @r6, align 4
  %v3_a828 = add i32 %v2_a828, 7
  %v4_a828 = inttoptr i32 %v3_a828 to i8*
  store i8 %v1_a828, i8* %v4_a828, align 1
  %v0_a82c = load i32, i32* @r5, align 4
  %v1_a82c = add i32 %v0_a82c, 24
  %v2_a82c = inttoptr i32 %v1_a82c to i8*
  %v3_a82c = load i8, i8* %v2_a82c, align 1
  %v4_a82c = zext i8 %v3_a82c to i32
  store i32 %v4_a82c, i32* %r3.global-to-local, align 4
  %v1_a830 = add i32 %v0_a82c, 25
  %v2_a830 = inttoptr i32 %v1_a830 to i8*
  %v3_a830 = load i8, i8* %v2_a830, align 1
  %v4_a830 = zext i8 %v3_a830 to i32
  %v4_a834 = mul nuw nsw i32 %v4_a830, 256
  %v5_a834 = or i32 %v4_a834, %v4_a82c
  store i32 %v5_a834, i32* %r2.global-to-local, align 4
  %v3_a838 = load i32, i32* %stack_var_-44, align 4
  %v0_a83c = load i32, i32* @r6, align 4
  store i32 %v0_a83c, i32* @r1, align 4
  %v1_a840 = add i32 %v3_a838, 12
  store i32 %v1_a840, i32* %r3.global-to-local, align 4
  %v4_a848 = call i32 @function_d114(i32 %v0_a82c, i32 %v0_a83c, i32 %v5_a834, i32 %v1_a840)
  %v5_a848 = trunc i32 %v4_a848 to i8
  %v4_a84c24 = udiv i32 %v4_a848, 256
  %v1_a850 = trunc i32 %v4_a84c24 to i8
  %v2_a850 = load i32, i32* @r6, align 4
  %v3_a850 = add i32 %v2_a850, 7
  %v4_a850 = inttoptr i32 %v3_a850 to i8*
  store i8 %v1_a850, i8* %v4_a850, align 1
  %v3_a854 = load i32, i32* @r6, align 4
  %v4_a854 = add i32 %v3_a854, 6
  %v5_a854 = inttoptr i32 %v4_a854 to i8*
  store i8 %v5_a848, i8* %v5_a854, align 1
  %v3_a858 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a858, i32* %r3.global-to-local, align 4
  %v0_a85c = load i32, i32* @r5, align 4
  %v1_a85c = add i32 %v0_a85c, 20
  %v2_a85c = inttoptr i32 %v1_a85c to i32*
  %v3_a85c = load i32, i32* %v2_a85c, align 4
  %v5_a864 = mul i32 %v3_a858, 24
  %v1_a868 = load i32, i32* @sl, align 4
  %v2_a868 = add i32 %v1_a868, %v5_a864
  store i32 %v2_a868, i32* %ip.global-to-local, align 4
  %v3_a86c = udiv i32 %v3_a85c, 65536
  store i32 %v3_a86c, i32* %r2.global-to-local, align 4
  %v1_a870 = trunc i32 %v3_a86c to i8
  %v3_a870 = add i32 %v2_a868, 2
  %v4_a870 = inttoptr i32 %v3_a870 to i8*
  store i8 %v1_a870, i8* %v4_a870, align 1
  %v0_a874 = load i32, i32* %r2.global-to-local, align 4
  %v3_a87425 = udiv i32 %v0_a874, 256
  %v3_a878 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a878, i32* %r2.global-to-local, align 4
  %v1_a87c = trunc i32 %v3_a87425 to i8
  %v2_a87c = load i32, i32* %ip.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 3
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v1_a87c, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a888 = load i32, i32* %r2.global-to-local, align 4
  %v1_a888 = add i32 %v0_a888, 32
  store i32 %v1_a888, i32* %r2.global-to-local, align 4
  %v0_a88c = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a894 = load i32, i32* %ip.global-to-local, align 4
  %v6_a89c = inttoptr i32 %v0_a880 to i32*
  %v7_a89c = call i32 @function_11b4c(i32 %v0_a88c, i32* %v6_a89c, i32 %v1_a888, i32 16384, i32 %v0_a894, i32 16)
  %v3_a8a0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a8a0, i32* %r3.global-to-local, align 4
  %v1_a8a4 = add i32 %v3_a8a0, 1
  %v1_a8a8 = load i32, i32* %sb.global-to-local, align 4
  %v9_a8a8 = icmp eq i32 %v1_a8a4, %v1_a8a8
  store i1 %v9_a8a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a8a4, i32* %stack_var_-40, align 4
  %v5_a8b0 = icmp slt i32 %v1_a8a4, %v1_a8a8
  br i1 %v5_a8b0, label %dec_label_pc_a7b4, label %dec_label_pc_a8b4

dec_label_pc_a8b4:                                ; preds = %dec_label_pc_a804
  %v2_a8b4 = icmp eq i32 %v1_a8a8, 0
  store i1 %v2_a8b4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a7a4.outer

dec_label_pc_a8c0:                                ; preds = %dec_label_pc_a7b4
  %v1_a8c0 = add i32 %v2_a7bc, 16
  %v2_a8c0 = inttoptr i32 %v1_a8c0 to i32*
  %v3_a8c0 = load i32, i32* %v2_a8c0, align 4
  store i32 %v3_a8c0, i32* @r4, align 4
  %v0_a8c4 = call i32 @function_e72c()
  %v3_a8c8 = load i32, i32* %stack_var_-40, align 4
  %v5_a8d0 = mul i32 %v3_a8c8, 24
  %v0_a8d4 = load i32, i32* @r4, align 4
  %v1_a8d8 = and i32 %v0_a8d4, 65280
  store i32 %v1_a8d8, i32* %r3.global-to-local, align 4
  %v1_a8d4 = udiv i32 %v0_a8d4, 256
  %v3_a8dc = and i32 %v1_a8d4, 65280
  store i32 %v3_a8dc, i32* %r2.global-to-local, align 4
  %v1_a8e0 = load i32, i32* @sl, align 4
  %v2_a8e0 = add i32 %v1_a8e0, %v5_a8d0
  store i32 %v2_a8e0, i32* %ip.global-to-local, align 4
  %v1_a8ec = add i32 %v2_a8e0, 20
  %v2_a8ec = inttoptr i32 %v1_a8ec to i8*
  %v3_a8ec = load i8, i8* %v2_a8ec, align 1
  %v4_a8ec = zext i8 %v3_a8ec to i32
  %v2_a8f4 = call i32 @llvm.bswap.i32(i32 %v0_a8d4)
  %v7_a8f8 = lshr i32 %v0_a8c4, %v4_a8ec
  %v8_a8f8 = add i32 %v7_a8f8, %v2_a8f4
  store i32 %v3_a60c, i32* %r2.global-to-local, align 4
  %v2_a918 = call i32 @llvm.bswap.i32(i32 %v8_a8f8)
  store i32 %v2_a918, i32* %r3.global-to-local, align 4
  %v1_a91c = load i32, i32* %r7.global-to-local, align 4
  %v9_a91c = icmp eq i32 %v3_a60c, %v1_a91c
  store i1 %v9_a91c, i1* %cpsr_z.global-to-local, align 1
  %v1_a920 = load i32, i32* @r5, align 4
  %v2_a920 = add i32 %v1_a920, 16
  %v3_a920 = inttoptr i32 %v2_a920 to i32*
  store i32 %v2_a918, i32* %v3_a920, align 4
  br i1 %v9_a91c, label %dec_label_pc_a928, label %dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge

dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge:    ; preds = %dec_label_pc_a8c0
  %v1_a7f0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_a7ec

dec_label_pc_a928:                                ; preds = %dec_label_pc_a8c0, %dec_label_pc_a7e0
  %v0_a928 = call i32 @function_e72c()
  %v1_a928 = trunc i32 %v0_a928 to i8
  %v4_a92c26 = udiv i32 %v0_a928, 256
  %v1_a930 = trunc i32 %v4_a92c26 to i8
  %v2_a930 = load i32, i32* @r5, align 4
  %v3_a930 = add i32 %v2_a930, 5
  %v4_a930 = inttoptr i32 %v3_a930 to i8*
  store i8 %v1_a930, i8* %v4_a930, align 1
  store i32 %v3_a610, i32* %r3.global-to-local, align 4
  %v1_a938 = load i32, i32* %r7.global-to-local, align 4
  %v9_a938 = icmp eq i32 %v3_a610, %v1_a938
  store i1 %v9_a938, i1* %cpsr_z.global-to-local, align 1
  %v3_a93c = load i32, i32* @r5, align 4
  %v4_a93c = add i32 %v3_a93c, 4
  %v5_a93c = inttoptr i32 %v4_a93c to i8*
  store i8 %v1_a928, i8* %v5_a93c, align 1
  %v0_a940 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a940, label %dec_label_pc_a944, label %dec_label_pc_a928.dec_label_pc_a7f8_crit_edge

dec_label_pc_a928.dec_label_pc_a7f8_crit_edge:    ; preds = %dec_label_pc_a928
  %v1_a7fc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_a7f8

dec_label_pc_a944:                                ; preds = %dec_label_pc_a928, %dec_label_pc_a7ec
  %v0_a944 = call i32 @function_e72c()
  %v1_a944 = trunc i32 %v0_a944 to i8
  %v4_a94c = sdiv i32 %v0_a944, 256
  store i32 %v4_a94c, i32* %r3.global-to-local, align 4
  %v1_a950 = load i32, i32* %r7.global-to-local, align 4
  %v9_a950 = icmp eq i32 %v3_a614, %v1_a950
  store i1 %v9_a950, i1* %cpsr_z.global-to-local, align 1
  %v3_a954 = load i32, i32* @r5, align 4
  %v4_a954 = add i32 %v3_a954, 20
  %v5_a954 = inttoptr i32 %v4_a954 to i8*
  store i8 %v1_a944, i8* %v5_a954, align 1
  %v0_a958 = load i32, i32* %r3.global-to-local, align 4
  %v1_a958 = trunc i32 %v0_a958 to i8
  %v2_a958 = load i32, i32* @r6, align 4
  %v3_a958 = add i32 %v2_a958, 1
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v1_a958, i8* %v4_a958, align 1
  %v0_a95c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a95c, label %dec_label_pc_a960, label %dec_label_pc_a804

dec_label_pc_a960:                                ; preds = %dec_label_pc_a944, %dec_label_pc_a7f8
  %v0_a960 = call i32 @function_e72c()
  %v1_a960 = trunc i32 %v0_a960 to i8
  %v4_a964 = sdiv i32 %v0_a960, 256
  store i32 %v4_a964, i32* %r3.global-to-local, align 4
  %v1_a968 = trunc i32 %v4_a964 to i8
  %v2_a968 = load i32, i32* @r6, align 4
  %v3_a968 = add i32 %v2_a968, 3
  %v4_a968 = inttoptr i32 %v3_a968 to i8*
  store i8 %v1_a968, i8* %v4_a968, align 1
  %v3_a96c = load i32, i32* @r6, align 4
  %v4_a96c = add i32 %v3_a96c, 2
  %v5_a96c = inttoptr i32 %v4_a96c to i8*
  store i8 %v1_a960, i8* %v5_a96c, align 1
  br label %dec_label_pc_a804

dec_label_pc_a974:                                ; preds = %dec_label_pc_a5d4
  %v0_a974 = load i32, i32* %fp.global-to-local, align 4
  %v1_a978 = call i32 @function_112cc(i32 %v0_a974)
  br label %dec_label_pc_a97c

dec_label_pc_a97c:                                ; preds = %dec_label_pc_a4c4, %dec_label_pc_a974
  %v29_a980 = phi i32 [ %v3_a5c4, %dec_label_pc_a4c4 ], [ %v1_a978, %dec_label_pc_a974 ]
  store i32 %v3_a4c4, i32* %r4.global-to-local, align 4
  store i32 %v12_a4c4, i32* %r7.global-to-local, align 4
  ret i32 %v29_a980

; uselistorder directives
  uselistorder i32 %v4_a964, { 1, 0 }
  uselistorder i32 %v2_a918, { 1, 0 }
  uselistorder i32 %v0_a8d4, { 1, 0, 2 }
  uselistorder i1 %v2_a8b4, { 1, 0 }
  uselistorder i32 %v1_a8a8, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a8a4, { 2, 0, 3, 1 }
  uselistorder i32 %v3_a86c, { 1, 0 }
  uselistorder i32 %v4_a818, { 1, 0 }
  uselistorder i1 %v3_a7e4, { 1, 0 }
  uselistorder i32 %v1_a78c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a730, { 1, 0 }
  uselistorder i32 %v1_a6b8, { 1, 0 }
  uselistorder i32 %v1_a638, { 1, 0 }
  uselistorder i32 %v1_a634, { 1, 0 }
  uselistorder i32 %v0_a604, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_a5fc, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_a5f4, { 1, 0 }
  uselistorder i1 %v7_a5c8, { 1, 0 }
  uselistorder i32 %v3_a5c4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a564, { 1, 0 }
  uselistorder i8 %v5_a554, { 1, 0 }
  uselistorder i32 %v5_a538, { 1, 0 }
  uselistorder i32 %v6_a4fc, { 1, 0 }
  uselistorder i32 %v1_a4c8, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_a97c, { 1, 0 }
  uselistorder label %dec_label_pc_a804, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a7a4, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a988(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a988:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_a988 = load i32, i32* @r4, align 4
  %v15_a988 = load i32, i32* @r8, align 4
  %v18_a988 = load i32, i32* @sb, align 4
  %v21_a988 = load i32, i32* @sl, align 4
  %v24_a988 = load i32, i32* @fp, align 4
  %v1_a994 = urem i32 %arg1, 256
  store i32 %v1_a994, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a9a0 = urem i32 %arg3, 256
  store i32 %v1_a9a0, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_a9ac = call i32 @function_11e9c(i32 %v1_a994, i32 4)
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r4, align 4
  store i32 %v0_a9bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v6_a9c4 = call i32 @function_85e0(i32 %v0_a9bc, i32* %v5_a9c4, i32 2, i32 0)
  %v1_a9d0 = urem i32 %v6_a9c4, 256
  store i32 %v1_a9d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a9dc = load i32, i32* @r4, align 4
  store i32 %v0_a9dc, i32* %r0.global-to-local, align 4
  %v0_a9e0 = load i32, i32* @r5, align 4
  store i32 %v0_a9e0, i32* %r1.global-to-local, align 4
  %v5_a9e4 = trunc i32 %v6_a9c4 to i8
  %v6_a9e8 = inttoptr i32 %v0_a9e0 to i32*
  %v7_a9e8 = call i32 @function_85e0(i32 %v0_a9dc, i32* %v6_a9e8, i32 3, i32 65535)
  %v0_a9ec = load i32, i32* @r5, align 4
  store i32 %v0_a9ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a9f8 = load i32, i32* @r4, align 4
  store i32 %v0_a9f8, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_aa00 = inttoptr i32 %v0_a9ec to i32*
  %v6_aa00 = call i32 @function_85e0(i32 %v0_a9f8, i32* %v5_aa00, i32 4, i32 64)
  %v1_aa08 = urem i32 %v6_aa00, 256
  store i32 %v1_aa08, i32* %ip.global-to-local, align 4
  %v0_aa0c = load i32, i32* @r5, align 4
  store i32 %v0_aa0c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aa18 = load i32, i32* @r4, align 4
  store i32 %v0_aa18, i32* %r0.global-to-local, align 4
  %v6_aa20 = inttoptr i32 %v0_aa0c to i32*
  %v7_aa20 = call i32 @function_85e0(i32 %v0_aa18, i32* %v6_aa20, i32 5, i32 0)
  %v1_aa2c = urem i32 %v7_aa20, 256
  store i32 %v1_aa2c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_aa38 = load i32, i32* @r4, align 4
  store i32 %v0_aa38, i32* %r0.global-to-local, align 4
  %v0_aa3c = load i32, i32* @r5, align 4
  store i32 %v0_aa3c, i32* %r1.global-to-local, align 4
  %v5_aa44 = inttoptr i32 %v0_aa3c to i32*
  %v6_aa44 = call i32 @function_85e0(i32 %v0_aa38, i32* %v5_aa44, i32 6, i32 65535)
  %v0_aa48 = load i32, i32* @r5, align 4
  store i32 %v0_aa48, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_aa44, i32* %fp.global-to-local, align 4
  %v0_aa58 = load i32, i32* @r4, align 4
  store i32 %v0_aa58, i32* %r0.global-to-local, align 4
  %v4_aa5c = inttoptr i32 %v0_aa48 to i32*
  %v5_aa5c = call i32 @function_85e0(i32 %v0_aa58, i32* %v4_aa5c, i32 7, i32 53)
  %v0_aa64 = load i32, i32* @r5, align 4
  store i32 %v0_aa64, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_aa5c, i32* %sb.global-to-local, align 4
  %v0_aa74 = load i32, i32* @r4, align 4
  store i32 %v0_aa74, i32* %r0.global-to-local, align 4
  %v4_aa78 = inttoptr i32 %v0_aa64 to i32*
  %v5_aa78 = call i32 @function_85e0(i32 %v0_aa74, i32* %v4_aa78, i32 9, i32 65535)
  %v0_aa7c = load i32, i32* @r5, align 4
  store i32 %v0_aa7c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_aa78, i32* @sl, align 4
  %v0_aa8c = load i32, i32* @r4, align 4
  store i32 %v0_aa8c, i32* %r0.global-to-local, align 4
  %v4_aa90 = inttoptr i32 %v0_aa7c to i32*
  %v5_aa90 = call i32 @function_85e0(i32 %v0_aa8c, i32* %v4_aa90, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aa9c = load i32, i32* @r5, align 4
  store i32 %v0_aa9c, i32* %r1.global-to-local, align 4
  store i32 %v5_aa90, i32* %r8.global-to-local, align 4
  %v0_aaa4 = load i32, i32* @r4, align 4
  store i32 %v0_aaa4, i32* %r0.global-to-local, align 4
  %v4_aaa8 = inttoptr i32 %v0_aa9c to i32*
  %v5_aaa8 = call i32 @function_81cc(i32 %v0_aaa4, i32* %v4_aaa8, i32 8, i32 0)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_aab4 = call i32 @function_103fc(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_aac0 = call i32 @function_10318(i32 21, i32* null)
  store i32 %v3_aac0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_aac8 = inttoptr i32 %v3_aac0 to i8*
  %v3_aac8 = call i32 @function_113f8(i8* %v2_aac8, i32 0)
  store i32 %v3_aac8, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_aad4 = call i32 @function_10344(i32 21)
  store i32 %v1_aad4, i32* %r0.global-to-local, align 4
  %v0_aad8 = load i32, i32* @r4, align 4
  %v1_aad8 = icmp slt i32 %v0_aad8, 0
  %v2_aad8 = icmp eq i32 %v0_aad8, 0
  store i1 %v2_aad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_aad8, label %dec_label_pc_b0a4, label %dec_label_pc_aae0

dec_label_pc_aae0:                                ; preds = %dec_label_pc_a988
  %v2_aae4 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_aae4, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_aae4, i32* %r1.global-to-local, align 4
  store i32 %v0_aad8, i32* %r0.global-to-local, align 4
  %v4_aaf4 = call i32 @function_11494(i32 %v0_aad8, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_aaf4, i32* @r5, align 4
  %v0_aafc = load i32, i32* @r4, align 4
  store i32 %v0_aafc, i32* %r0.global-to-local, align 4
  %v1_ab00 = call i32 @function_112cc(i32 %v0_aafc)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_ab08 = call i32 @function_103fc(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_ab14 = call i32 @function_10318(i32 22, i32* null)
  %v0_ab18 = load i32, i32* @r5, align 4
  store i32 %v0_ab18, i32* @r1, align 4
  store i32 %v3_ab14, i32* %r2.global-to-local, align 4
  store i32 %v2_aae4, i32* %r0.global-to-local, align 4
  %v3_ab24 = bitcast i32* %stack_var_-2120 to i8*
  %v4_ab24 = call i32 @function_10d1c(i8* %v3_ab24, i32 %v0_ab18, i32 %v3_ab14)
  store i32 %v4_ab24, i32* @r4, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_ab30 = call i32 @function_10344(i32 22)
  store i32 %v1_ab30, i32* %r0.global-to-local, align 4
  %v0_ab34 = load i32, i32* @r4, align 4
  %v7_ab34 = icmp eq i32 %v0_ab34, -1
  store i1 %v7_ab34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab34, label %dec_label_pc_b0a4, label %dec_label_pc_ab3c

dec_label_pc_ab3c:                                ; preds = %dec_label_pc_aae0
  %v0_ab3c = load i32, i32* @r5, align 4
  %v9_ab3c = icmp eq i32 %v0_ab3c, %v0_ab34
  store i1 %v9_ab3c, i1* %cpsr_z.global-to-local, align 1
  %v7_ab40 = icmp sgt i32 %v0_ab3c, %v0_ab34
  br i1 %v7_ab40, label %dec_label_pc_ab44, label %dec_label_pc_b0a4

dec_label_pc_ab44:                                ; preds = %dec_label_pc_ab3c
  store i32 %v0_ab3c, i32* %r3.global-to-local, align 4
  store i32 %v0_ab34, i32* %r2.global-to-local, align 4
  %v0_ab54 = load i32, i32* @r6, align 4
  %v2_ab54 = add i32 %v0_ab54, %v0_ab34
  store i32 %v2_ab54, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ab5c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_ab5c, i32* @r7, align 4
  %v1_ab8c = add i32 %v0_ab3c, -1
  br label %dec_label_pc_ab84

dec_label_pc_ab68:                                ; preds = %dec_label_pc_abac, %bb138
  %v9_ab68 = icmp eq i32 %v0_ab74, %v1_ab8c
  store i1 %v9_ab68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ab68, label %dec_label_pc_abb8, label %dec_label_pc_ab70

dec_label_pc_ab70:                                ; preds = %dec_label_pc_ab9c, %dec_label_pc_ab68, %bb
  %v0_aba842 = phi i32 [ %v0_aba8, %dec_label_pc_ab9c ], [ %v0_aba843, %dec_label_pc_ab68 ], [ %v0_aba8, %bb ]
  %v0_ab8838 = phi i32 [ 0, %dec_label_pc_ab9c ], [ %v0_ab8839, %dec_label_pc_ab68 ], [ 0, %bb ]
  store i32 %v0_ab3c, i32* %r0.global-to-local, align 4
  %v1_ab74 = add i32 %v0_ab74, 1
  store i32 %v1_ab74, i32* %r2.global-to-local, align 4
  %v9_ab78 = icmp eq i32 %v0_ab3c, %v1_ab74
  store i1 %v9_ab78, i1* %cpsr_z.global-to-local, align 1
  %v1_ab7c = add i32 %v0_ab7c, 1
  store i32 %v1_ab7c, i32* @r7, align 4
  br i1 %v9_ab78, label %dec_label_pc_b0a4, label %dec_label_pc_ab84

dec_label_pc_ab84:                                ; preds = %dec_label_pc_ab70, %dec_label_pc_ab44
  %v0_ab7c = phi i32 [ %v1_ab7c, %dec_label_pc_ab70 ], [ %v2_ab5c, %dec_label_pc_ab44 ]
  %v0_ab74 = phi i32 [ %v1_ab74, %dec_label_pc_ab70 ], [ %v0_ab34, %dec_label_pc_ab44 ]
  %v0_aba8 = phi i32 [ %v0_aba842, %dec_label_pc_ab70 ], [ 0, %dec_label_pc_ab44 ]
  %v0_ab88 = phi i32 [ %v0_ab8838, %dec_label_pc_ab70 ], [ 0, %dec_label_pc_ab44 ]
  %v0_ab90 = phi i32 [ %v1_ab90, %dec_label_pc_ab70 ], [ %v2_ab54, %dec_label_pc_ab44 ]
  %v1_ab84 = inttoptr i32 %v0_ab90 to i8*
  %v2_ab84 = load i8, i8* %v1_ab84, align 1
  %v3_ab84 = zext i8 %v2_ab84 to i32
  store i32 %v3_ab84, i32* %r3.global-to-local, align 4
  %v2_ab88 = icmp eq i32 %v0_ab88, 0
  store i1 %v2_ab88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ab8c, i32* %ip.global-to-local, align 4
  %v1_ab90 = add i32 %v0_ab90, 1
  store i32 %v1_ab90, i32* %r1.global-to-local, align 4
  %v1_ab94 = add nsw i32 %v3_ab84, -48
  store i32 %v1_ab94, i32* %r0.global-to-local, align 4
  br i1 %v2_ab88, label %dec_label_pc_ab9c, label %dec_label_pc_abac

dec_label_pc_ab9c:                                ; preds = %dec_label_pc_ab84
  %v7_ab9c = icmp eq i8 %v2_ab84, 9
  store i1 %v7_ab9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab9c, label %dec_label_pc_ab70, label %bb

bb:                                               ; preds = %dec_label_pc_ab9c
  %v8_aba0 = icmp eq i8 %v2_ab84, 32
  store i1 %v8_aba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_aba0, label %dec_label_pc_ab70, label %dec_label_pc_aba8

dec_label_pc_aba8:                                ; preds = %bb
  %v1_aba8 = add i32 %v0_aba8, 1
  store i32 %v1_aba8, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_abac

dec_label_pc_abac:                                ; preds = %dec_label_pc_ab84, %dec_label_pc_aba8
  %v0_aba843 = phi i32 [ %v0_aba8, %dec_label_pc_ab84 ], [ %v1_aba8, %dec_label_pc_aba8 ]
  %v0_ab8839 = phi i32 [ %v0_ab88, %dec_label_pc_ab84 ], [ %v1_aba8, %dec_label_pc_aba8 ]
  %v7_abac = icmp eq i8 %v2_ab84, 46
  store i1 %v7_abac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_abac, label %dec_label_pc_ab68, label %bb138

bb138:                                            ; preds = %dec_label_pc_abac
  %v8_abb0 = icmp eq i32 %v1_ab94, 9
  store i1 %v8_abb0, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_ab94, 10
  br i1 %tmp, label %dec_label_pc_ab68, label %dec_label_pc_abb8

dec_label_pc_abb8:                                ; preds = %dec_label_pc_ab68, %bb138
  %v0_ab74.lcssa = phi i32 [ %v1_ab8c, %dec_label_pc_ab68 ], [ %v0_ab74, %bb138 ]
  %v2_abbc = sub i32 %v0_ab74.lcssa, %v0_ab34
  store i32 %v2_abbc, i32* %r2.global-to-local, align 4
  store i32 %v2_ab54, i32* %r1.global-to-local, align 4
  store i32 %v2_ab5c, i32* %r0.global-to-local, align 4
  %v3_abc8 = call i32 @function_10a44(i32 %v2_ab5c, i32 %v2_ab54, i32 %v2_abbc)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ab5c, i32* @r0, align 4
  %v2_abd8 = load i32, i32* @r7, align 4
  %v3_abd8 = inttoptr i32 %v2_abd8 to i8*
  store i8 0, i8* %v3_abd8, align 1
  %v1_abdc = call i32 @function_119bc(i32 %v2_ab5c)
  store i32 %v1_abdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_abe4

dec_label_pc_abe420:                              ; preds = %dec_label_pc_b0a4
  unreachable

dec_label_pc_abe4:                                ; preds = %dec_label_pc_b11c, %dec_label_pc_b10c, %dec_label_pc_b100, %dec_label_pc_b0ec, %dec_label_pc_abb8
  %v29_b0e874 = phi i32 [ %v1_b0a8, %dec_label_pc_b11c ], [ %v1_b0a8, %dec_label_pc_b10c ], [ %v1_b0a8, %dec_label_pc_b100 ], [ %v1_b0a8, %dec_label_pc_b0ec ], [ %v1_abdc, %dec_label_pc_abb8 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_b11c ], [ 104859200, %dec_label_pc_b10c ], [ 707416650, %dec_label_pc_b100 ], [ 134744072, %dec_label_pc_b0ec ], [ %v1_abdc, %dec_label_pc_abb8 ]
  store i32 %v5_aaa8, i32* %ip.global-to-local, align 4
  %v2_abe8 = icmp eq i32 %v5_aaa8, 0
  store i1 %v2_abe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_abe8, label %dec_label_pc_b0e0, label %dec_label_pc_abf0

dec_label_pc_abf0:                                ; preds = %dec_label_pc_abe4
  store i32 %v5_aaa8, i32* %r0.global-to-local, align 4
  %v1_abf4 = inttoptr i32 %v5_aaa8 to i8*
  %v2_abf4 = call i32 @function_109c8(i8* %v1_abf4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ac08 = call i32 @function_11bb0(i32 2, i32 3, i32 17)
  store i32 %v3_ac08, i32* %r0.global-to-local, align 4
  %v7_ac0c = icmp eq i32 %v3_ac08, -1
  store i1 %v7_ac0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ac0c, label %dec_label_pc_b0e0, label %dec_label_pc_ac18

dec_label_pc_ac18:                                ; preds = %dec_label_pc_abf0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ac24 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ac24, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_ac38 = call i32 @function_11b80(i32 %v3_ac08, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_ac38, i32* %r0.global-to-local, align 4
  %v7_ac3c = icmp eq i32 %v6_ac38, -1
  store i1 %v7_ac3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ac3c, label %dec_label_pc_b0d8, label %dec_label_pc_ac44

dec_label_pc_ac44:                                ; preds = %dec_label_pc_ac18
  store i32 %v1_a994, i32* %r0.global-to-local, align 4
  %v3_ac4c = mul i32 %v7_a9e8, 65536
  store i32 %v3_ac4c, i32* %lr.global-to-local, align 4
  %v0_ac50 = load i32, i32* @sl, align 4
  %v3_ac50 = mul i32 %v0_ac50, 65536
  store i32 %v3_ac50, i32* %sl.global-to-local, align 4
  %v0_ac54 = load i32, i32* %r8.global-to-local, align 4
  %v0_ac58 = load i32, i32* %fp.global-to-local, align 4
  %v0_ac5c = load i32, i32* %sb.global-to-local, align 4
  %v3_ac5c = mul i32 %v0_ac5c, 65536
  store i32 %v3_ac5c, i32* %sb.global-to-local, align 4
  %v5_ac60 = trunc i32 %v0_ac54 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ac68 = urem i32 %v7_a9e8, 65536
  store i32 %v3_ac68, i32* %r2.global-to-local, align 4
  %v3_ac6c = urem i32 %v0_ac58, 65536
  store i32 %v3_ac6c, i32* %r3.global-to-local, align 4
  %v3_ac70 = urem i32 %v0_ac5c, 65536
  store i32 %v3_ac70, i32* %r4.global-to-local, align 4
  %v3_ac74 = urem i32 %v0_ac50, 65536
  store i32 %v3_ac74, i32* %r8.global-to-local, align 4
  %v2_ac78 = icmp eq i32 %v1_a994, 0
  store i1 %v2_ac78, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_ac78, label %dec_label_pc_b0c8, label %dec_label_pc_ac9c

dec_label_pc_ac9c:                                ; preds = %dec_label_pc_ac44
  %v4_aca0 = sext i8 %v5_ac60 to i32
  %v2_aca4 = add i32 %v4_aca0, %v2_abf4
  store i32 %v2_aca4, i32* @fp, align 4
  %v3_aca8 = mul i32 %v2_aca4, 65536
  %v1_acac = add i32 %v3_aca8, 1769472
  store i32 %v1_acac, i32* @r6, align 4
  %v1_acb0 = add i32 %v3_aca8, 3080192
  %v1_acc4 = urem i32 %v0_ac50, 256
  %v3_acd4 = udiv i32 %v1_acac, 256
  %v1_acd8 = urem i32 %v7_a9e8, 256
  %v1_acdc = and i32 %v3_acd4, 65280
  %v1_ace0 = urem i32 %v0_ac5c, 256
  %v3_ace4 = mul nuw nsw i32 %v1_acc4, 256
  %v1_acec = urem i32 %v0_ac58, 256
  %v3_acf0 = mul nuw nsw i32 %v1_ace0, 256
  %tmp139 = udiv i32 %v0_ac50, 256
  %v4_acf4 = urem i32 %tmp139, 256
  %v5_acf4 = or i32 %v4_acf4, %v3_ace4
  store i32 %v5_acf4, i32* %r8.global-to-local, align 4
  %v4_acf8 = udiv i32 %v1_acac, 16777216
  %v5_acf8 = or i32 %v1_acdc, %v4_acf8
  store i32 %v5_acf8, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_ac58, 256
  %v3_ad04 = urem i32 %tmp140, 256
  %v4_ad08 = sdiv i32 %v1_acb0, 16777216
  %tmp141 = udiv i32 %v7_a9e8, 256
  %v4_ad10 = mul nuw nsw i32 %v1_acec, 256
  %v5_ad10 = or i32 %v4_ad10, %v3_ad04
  store i32 %v5_ad10, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_ac5c, 256
  %v4_ad14 = urem i32 %tmp142, 256
  %v5_ad14 = or i32 %v4_ad14, %v3_acf0
  store i32 %v5_ad14, i32* %sb.global-to-local, align 4
  store i32 %v1_acd8, i32* %r0.global-to-local, align 4
  %v1_ad20 = add i32 %v2_abf4, 1
  store i32 %v1_ad20, i32* @r7, align 4
  %v3_ad24 = ashr i32 %v1_acb0, 31
  store i32 %v3_ad24, i32* @lr, align 4
  store i32 %v1_acec, i32* %r1.global-to-local, align 4
  store i32 %v1_ace0, i32* %r2.global-to-local, align 4
  %v3_ad3075 = udiv i32 %v1_acdc, 256
  store i32 %v3_ad3075, i32* %r3.global-to-local, align 4
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ad94 = sext i8 %v5_a9e4 to i32
  %sext13 = mul i32 %v6_aa00, 16777216
  %v4_adac = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %tmp141, 16777216
  %v4_adc0 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_a9e8, 16777216
  %v4_adc4 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_acac, 256
  %v4_adf4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_ac5c, 16777216
  %v4_adf8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_ac58, 16777216
  %v4_ae1c = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_ac50, 16777216
  %v4_ae28 = sdiv i32 %sext19, 16777216
  %v1_ada4 = trunc i32 %v4_ad08 to i8
  %extract.t = trunc i32 %v3_ad24 to i8
  br label %dec_label_pc_ad54

dec_label_pc_ad54:                                ; preds = %dec_label_pc_aebc, %dec_label_pc_ac9c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ad5c = call i32 @function_11e9c(i32 600, i32 1)
  store i32 %v2_ad5c, i32* %r0.global-to-local, align 4
  store i32 %v2_a9ac, i32* %lr.global-to-local, align 4
  %v3_ad64 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad64, i32* %r3.global-to-local, align 4
  %v2_ad68 = load i32, i32* @r4, align 4
  %v5_ad68 = mul i32 %v2_ad68, 4
  %v6_ad68 = add i32 %v5_ad68, %v2_a9ac
  %v7_ad68 = inttoptr i32 %v6_ad68 to i32*
  store i32 %v2_ad5c, i32* %v7_ad68, align 4
  %v0_ad6c = load i32, i32* %lr.global-to-local, align 4
  %v1_ad6c = load i32, i32* %r3.global-to-local, align 4
  %v4_ad6c = mul i32 %v1_ad6c, 4
  %v5_ad6c = add i32 %v4_ad6c, %v0_ad6c
  %v6_ad6c = inttoptr i32 %v5_ad6c to i32*
  %v7_ad6c = load i32, i32* %v6_ad6c, align 4
  store i32 %v7_ad6c, i32* %r1.global-to-local, align 4
  %v1_ad70 = inttoptr i32 %v7_ad6c to i8*
  %v2_ad70 = load i8, i8* %v1_ad70, align 1
  %tmp154 = urem i8 %v2_ad70, 16
  %v1_ad74 = zext i8 %tmp154 to i32
  %v1_ad78 = or i32 %v1_ad74, 64
  store i32 %v1_ad78, i32* %r2.global-to-local, align 4
  %v1_ad7c = trunc i32 %v1_ad78 to i8
  store i8 %v1_ad7c, i8* %v1_ad70, align 1
  %v0_ad80 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad80 = inttoptr i32 %v0_ad80 to i8*
  %v2_ad80 = load i8, i8* %v1_ad80, align 1
  %v1_ad84 = and i8 %v2_ad80, -16
  %v1_ad88 = or i8 %v1_ad84, 5
  store i32 %v1_aa2c, i32* %r0.global-to-local, align 4
  store i8 %v1_ad88, i8* %v1_ad80, align 1
  store i32 %v4_ad94, i32* %r2.global-to-local, align 4
  %v2_ad98 = load i32, i32* %r1.global-to-local, align 4
  %v3_ad98 = add i32 %v2_ad98, 1
  %v4_ad98 = inttoptr i32 %v3_ad98 to i8*
  store i8 %v5_a9e4, i8* %v4_ad98, align 1
  store i32 %v4_ad08, i32* %r3.global-to-local, align 4
  %v0_ada0 = load i32, i32* %r0.global-to-local, align 4
  %v2_ada0 = icmp eq i32 %v0_ada0, 0
  store i1 %v2_ada0, i1* %cpsr_z.global-to-local, align 1
  %v2_ada4 = load i32, i32* %r1.global-to-local, align 4
  %v3_ada4 = add i32 %v2_ada4, 2
  %v4_ada4 = inttoptr i32 %v3_ada4 to i8*
  store i8 %v1_ada4, i8* %v4_ada4, align 1
  store i32 %v3_ad24, i32* %r4.global-to-local, align 4
  store i32 %v4_adac, i32* %r0.global-to-local, align 4
  %v0_adb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_adb0, label %.thread21, label %bb143

bb143:                                            ; preds = %dec_label_pc_ad54
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_adb4 = load i32, i32* %r1.global-to-local, align 4
  %v4_adb4 = add i32 %v3_adb4, 6
  %v5_adb4 = inttoptr i32 %v4_adb4 to i8*
  store i8 64, i8* %v5_adb4, align 1
  %v0_adbc.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_adbc.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_ad54, %bb143
  %v0_adbc.off0 = phi i8 [ %extract.t, %dec_label_pc_ad54 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_adbc = load i32, i32* %r1.global-to-local, align 4
  %v3_adbc = add i32 %v2_adbc, 3
  %v4_adbc = inttoptr i32 %v3_adbc to i8*
  store i8 %v0_adbc.off0, i8* %v4_adbc, align 1
  store i32 %v4_adc0, i32* %ip.global-to-local, align 4
  store i32 %v4_adc4, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c2d0.49 to i32), i32* %r4.global-to-local, align 4
  %v0_adcc = load i32, i32* %r0.global-to-local, align 4
  %v1_adcc = trunc i32 %v0_adcc to i8
  %v2_adcc = load i32, i32* %r1.global-to-local, align 4
  %v3_adcc = add i32 %v2_adcc, 8
  %v4_adcc = inttoptr i32 %v3_adcc to i8*
  store i8 %v1_adcc, i8* %v4_adcc, align 1
  %v0_add0 = load i32, i32* %r3.global-to-local, align 4
  %v1_add0 = trunc i32 %v0_add0 to i8
  %v2_add0 = load i32, i32* %r1.global-to-local, align 4
  %v3_add0 = add i32 %v2_add0, 9
  %v4_add0 = inttoptr i32 %v3_add0 to i8*
  store i8 %v1_add0, i8* %v4_add0, align 1
  %v0_add4 = load i32, i32* %lr.global-to-local, align 4
  %v1_add4 = trunc i32 %v0_add4 to i8
  %v2_add4 = load i32, i32* %r1.global-to-local, align 4
  %v3_add4 = add i32 %v2_add4, 5
  %v4_add4 = inttoptr i32 %v3_add4 to i8*
  store i8 %v1_add4, i8* %v4_add4, align 1
  %v0_add8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_add8, label %.thread22, label %bb144

.thread22:                                        ; preds = %.thread21
  %v2_addc23 = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_addc23, i32* %r3.global-to-local, align 4
  store i32 %v4_aca0, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_addc = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_addc, i32* %r3.global-to-local, align 4
  store i32 %v4_aca0, i32* %lr.global-to-local, align 4
  %v3_ade4 = load i32, i32* %r1.global-to-local, align 4
  %v4_ade4 = add i32 %v3_ade4, 7
  %v5_ade4 = inttoptr i32 %v4_ade4 to i8*
  store i8 0, i8* %v5_ade4, align 1
  %v0_adec.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_adf0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread22, %bb144
  %v0_adf0 = phi i32 [ %v2_addc23, %.thread22 ], [ %v0_adf0.pre, %bb144 ]
  %v0_adec = phi i32 [ %v4_aca0, %.thread22 ], [ %v0_adec.pre, %bb144 ]
  %v0_ade8 = load i32, i32* %r1.global-to-local, align 4
  %v1_ade8 = add i32 %v0_adec, 41
  %v2_adec = add i32 %v1_ade8, %v0_ade8
  store i32 %v2_adec, i32* %r4.global-to-local, align 4
  %v2_adf0 = add i32 %v0_ade8, 12
  %v3_adf0 = inttoptr i32 %v2_adf0 to i32*
  store i32 %v0_adf0, i32* %v3_adf0, align 4
  store i32 %v4_adf4, i32* %r2.global-to-local, align 4
  store i32 %v4_adf8, i32* %r3.global-to-local, align 4
  %v0_adfc = load i32, i32* %r1.global-to-local, align 4
  %v1_adfc = add i32 %v0_adfc, 20
  store i32 %v1_adfc, i32* %r0.global-to-local, align 4
  %v0_ae00 = load i32, i32* %ip.global-to-local, align 4
  %v1_ae00 = trunc i32 %v0_ae00 to i8
  %v3_ae00 = add i32 %v0_adfc, 4
  %v4_ae00 = inttoptr i32 %v3_ae00 to i8*
  store i8 %v1_ae00, i8* %v4_ae00, align 1
  %v0_ae04 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae04 = trunc i32 %v0_ae04 to i8
  %v2_ae04 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae04 = add i32 %v2_ae04, 5
  %v4_ae04 = inttoptr i32 %v3_ae04 to i8*
  store i8 %v1_ae04, i8* %v4_ae04, align 1
  %v0_ae08 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae08 = trunc i32 %v0_ae08 to i8
  %v2_ae08 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae08 = add i32 %v2_ae08, 3
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v0_ae0c = load i32, i32* %sb.global-to-local, align 4
  %v1_ae0c = trunc i32 %v0_ae0c to i8
  %v2_ae0c = load i32, i32* %r0.global-to-local, align 4
  %v3_ae0c = add i32 %v2_ae0c, 2
  %v4_ae0c = inttoptr i32 %v3_ae0c to i8*
  store i8 %v1_ae0c, i8* %v4_ae0c, align 1
  %v0_ae10 = load i32, i32* %sl.global-to-local, align 4
  %v1_ae10 = trunc i32 %v0_ae10 to i8
  %v2_ae10 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae10 = add i32 %v2_ae10, 4
  %v4_ae10 = inttoptr i32 %v3_ae10 to i8*
  store i8 %v1_ae10, i8* %v4_ae10, align 1
  %v0_ae14 = load i32, i32* @r5, align 4
  %v1_ae14 = trunc i32 %v0_ae14 to i8
  %v2_ae14 = load i32, i32* %r1.global-to-local, align 4
  %v3_ae14 = add i32 %v2_ae14, 20
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  store i32 %v4_ae1c, i32* %r2.global-to-local, align 4
  %v1_ae20 = load i32, i32* %r1.global-to-local, align 4
  %v2_ae20 = add i32 %v1_ae20, 16
  %v3_ae20 = inttoptr i32 %v2_ae20 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_ae20, align 4
  %v0_ae24 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae24 = trunc i32 %v0_ae24 to i8
  %v2_ae24 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae24 = add i32 %v2_ae24, 1
  %v4_ae24 = inttoptr i32 %v3_ae24 to i8*
  store i8 %v1_ae24, i8* %v4_ae24, align 1
  store i32 %v4_ae28, i32* %lr.global-to-local, align 4
  store i32 %v4_aca0, i32* %r0.global-to-local, align 4
  %v0_ae30 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae30 = add i32 %v0_ae30, 28
  store i32 %v1_ae30, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ae3c = load i32, i32* %r8.global-to-local, align 4
  %v1_ae3c = trunc i32 %v0_ae3c to i8
  %v4_ae3c = inttoptr i32 %v1_ae30 to i8*
  store i8 %v1_ae3c, i8* %v4_ae3c, align 1
  %v0_ae40 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae40 = trunc i32 %v0_ae40 to i8
  %v2_ae40 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae40 = add i32 %v2_ae40, 5
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  %v0_ae44 = load i32, i32* %lr.global-to-local, align 4
  %v1_ae44 = trunc i32 %v0_ae44 to i8
  %v2_ae44 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae44 = add i32 %v2_ae44, 1
  %v4_ae44 = inttoptr i32 %v3_ae44 to i8*
  store i8 %v1_ae44, i8* %v4_ae44, align 1
  %v0_ae48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae48 = trunc i32 %v0_ae48 to i8
  %v2_ae48 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae48 = add i32 %v2_ae48, 2
  %v4_ae48 = inttoptr i32 %v3_ae48 to i8*
  store i8 %v1_ae48, i8* %v4_ae48, align 1
  %v0_ae4c = load i32, i32* @r6, align 4
  %v1_ae4c = trunc i32 %v0_ae4c to i8
  %v2_ae4c = load i32, i32* %ip.global-to-local, align 4
  %v3_ae4c = add i32 %v2_ae4c, 3
  %v4_ae4c = inttoptr i32 %v3_ae4c to i8*
  store i8 %v1_ae4c, i8* %v4_ae4c, align 1
  %v0_ae50 = load i32, i32* @r6, align 4
  %v1_ae50 = trunc i32 %v0_ae50 to i8
  %v2_ae50 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae50 = add i32 %v2_ae50, 4
  %v4_ae50 = inttoptr i32 %v3_ae50 to i8*
  store i8 %v1_ae50, i8* %v4_ae50, align 1
  %v0_ae54 = load i32, i32* %r0.global-to-local, align 4
  %v1_ae54 = trunc i32 %v0_ae54 to i8
  %v2_ae54 = load i32, i32* %r1.global-to-local, align 4
  %v3_ae54 = add i32 %v2_ae54, 40
  %v4_ae54 = inttoptr i32 %v3_ae54 to i8*
  store i8 %v1_ae54, i8* %v4_ae54, align 1
  store i32 %v5_aaa8, i32* %r1.global-to-local, align 4
  %v0_ae5c = load i32, i32* @r7, align 4
  store i32 %v0_ae5c, i32* %r2.global-to-local, align 4
  %v0_ae60 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae60 = add i32 %v0_ae60, 1
  store i32 %v1_ae60, i32* %r0.global-to-local, align 4
  %v3_ae64 = call i32 @function_10a44(i32 %v1_ae60, i32 %v5_aaa8, i32 %v0_ae5c)
  store i32 %v3_ae64, i32* %r0.global-to-local, align 4
  store i32 %v2_abf4, i32* %r1.global-to-local, align 4
  %v1_ae6c = load i32, i32* @r6, align 4
  %v9_ae6c = icmp eq i32 %v2_abf4, %v1_ae6c
  store i1 %v9_ae6c, i1* %cpsr_z.global-to-local, align 1
  %v7_ae70 = icmp sgt i32 %v2_abf4, %v1_ae6c
  store i32 %v1_ae6c, i32* %lr.global-to-local, align 4
  %v0_ae80 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ae80, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_ae6c to i8
  br i1 %v7_ae70, label %dec_label_pc_ae7c, label %dec_label_pc_aebc

dec_label_pc_ae7c:                                ; preds = %bb145
  store i32 %v1_ae6c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ae88

dec_label_pc_ae88:                                ; preds = %bb148, %dec_label_pc_ae7c
  %v0_aea485151 = phi i32 [ %v0_aea485152, %bb148 ], [ %v1_ae6c, %dec_label_pc_ae7c ]
  %v1_ae9833 = phi i32 [ %v1_aea891, %bb148 ], [ %v1_ae6c, %dec_label_pc_ae7c ]
  %v1_ae94.off0 = phi i8 [ %v1_ae9456.off0, %bb148 ], [ %extract.t78, %dec_label_pc_ae7c ]
  %v0_ae9832 = phi i32 [ %v0_ae98325488, %bb148 ], [ %v0_ae80, %dec_label_pc_ae7c ]
  store i32 %v5_aaa8, i32* %ip.global-to-local, align 4
  %v2_ae8c = add i32 %v1_ae9833, %v5_aaa8
  %v3_ae8c = inttoptr i32 %v2_ae8c to i8*
  %v4_ae8c = load i8, i8* %v3_ae8c, align 1
  %v6_ae8c = zext i8 %v4_ae8c to i32
  store i32 %v6_ae8c, i32* %r3.global-to-local, align 4
  %v7_ae90 = icmp eq i8 %v4_ae8c, 46
  store i1 %v7_ae90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae90, label %bb146, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_ae88
  %v2_ae9834 = add i32 %v1_ae9833, %v0_ae9832
  store i32 %v2_ae9834, i32* %r0.global-to-local, align 4
  br label %.thread35

bb146:                                            ; preds = %dec_label_pc_ae88
  %v3_ae94 = load i32, i32* %r2.global-to-local, align 4
  %v4_ae94 = inttoptr i32 %v3_ae94 to i8*
  store i8 %v1_ae94.off0, i8* %v4_ae94, align 1
  %v0_ae9c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ae98 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae98 = load i32, i32* %r1.global-to-local, align 4
  %v2_ae98 = add i32 %v1_ae98, %v0_ae98
  store i32 %v2_ae98, i32* %r0.global-to-local, align 4
  br i1 %v0_ae9c.pr, label %bb147, label %bb146..thread35_crit_edge

bb146..thread35_crit_edge:                        ; preds = %bb146
  %v0_aea485.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb147:                                            ; preds = %bb146
  %v2_ae9c = add i32 %v2_ae98, 1
  store i32 %v2_ae9c, i32* %r2.global-to-local, align 4
  store i32 %v2_abf4, i32* %r0.global-to-local, align 4
  %v0_aea4 = load i32, i32* %lr.global-to-local, align 4
  %v1_aea4 = add i32 %v0_aea4, 1
  store i32 %v1_aea4, i32* %ip.global-to-local, align 4
  %v1_aea8 = add i32 %v1_ae98, 1
  store i32 %v1_aea8, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread35:                                        ; preds = %bb146..thread35_crit_edge, %.thread31
  %v0_aea485 = phi i32 [ %v0_aea485.pre, %bb146..thread35_crit_edge ], [ %v0_aea485151, %.thread31 ]
  %v0_aea8.ph = phi i32 [ %v1_ae98, %bb146..thread35_crit_edge ], [ %v1_ae9833, %.thread31 ]
  %v0_ae983254.ph = phi i32 [ %v0_ae98, %bb146..thread35_crit_edge ], [ %v0_ae9832, %.thread31 ]
  store i32 %v2_abf4, i32* %r0.global-to-local, align 4
  %v1_aea486 = add i32 %v0_aea485, 1
  store i32 %v1_aea486, i32* %ip.global-to-local, align 4
  %v1_aea887 = add i32 %v0_aea8.ph, 1
  store i32 %v1_aea887, i32* %r1.global-to-local, align 4
  %v2_aeb0 = urem i32 %v1_aea486, 256
  store i32 %v2_aeb0, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_aea486 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread35
  %v0_aea485152 = phi i32 [ 0, %bb147 ], [ %v2_aeb0, %.thread35 ]
  %v1_aea891 = phi i32 [ %v1_aea8, %bb147 ], [ %v1_aea887, %.thread35 ]
  %v0_ae98325488 = phi i32 [ %v0_ae98, %bb147 ], [ %v0_ae983254.ph, %.thread35 ]
  %v1_ae9456.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread35 ]
  %v9_aeb4 = icmp eq i32 %v2_abf4, %v1_aea891
  store i1 %v9_aeb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aeb4, label %dec_label_pc_aebc.loopexit, label %dec_label_pc_ae88

dec_label_pc_aebc.loopexit:                       ; preds = %bb148
  %v2_aebc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_aebc

dec_label_pc_aebc:                                ; preds = %dec_label_pc_aebc.loopexit, %bb145
  %v2_aebc = phi i32 [ %v2_aebc.pre, %dec_label_pc_aebc.loopexit ], [ %v0_ae80, %bb145 ]
  %v0_aebc.off0 = phi i8 [ %v1_ae9456.off0, %dec_label_pc_aebc.loopexit ], [ %extract.t78, %bb145 ]
  %v3_aebc = inttoptr i32 %v2_aebc to i8*
  store i8 %v0_aebc.off0, i8* %v3_aebc, align 1
  %v3_aec0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_abf4, i32* %r1.global-to-local, align 4
  %v0_aec8 = load i32, i32* %r4.global-to-local, align 4
  %v2_aec8 = add i32 %v0_aec8, %v2_abf4
  store i32 %v2_aec8, i32* %r3.global-to-local, align 4
  %v1_aecc = add i32 %v3_aec0, 1
  store i32 %v1_aecc, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_aedc = icmp eq i32 %v1_a994, %v1_aecc
  store i1 %v9_aedc, i1* %cpsr_z.global-to-local, align 1
  %v1_aee0 = add i32 %v2_aec8, 2
  store i32 %v1_aee0, i32* %r2.global-to-local, align 4
  %v4_aee4 = inttoptr i32 %v1_aee0 to i8*
  store i8 0, i8* %v4_aee4, align 1
  %v0_aee8 = load i32, i32* @lr, align 4
  %v1_aee8 = trunc i32 %v0_aee8 to i8
  %v2_aee8 = load i32, i32* %r2.global-to-local, align 4
  %v3_aee8 = add i32 %v2_aee8, 3
  %v4_aee8 = inttoptr i32 %v3_aee8 to i8*
  store i8 %v1_aee8, i8* %v4_aee8, align 1
  %v0_aeec = load i32, i32* @lr, align 4
  %v1_aeec = trunc i32 %v0_aeec to i8
  %v2_aeec = load i32, i32* %r2.global-to-local, align 4
  %v3_aeec = add i32 %v2_aeec, 1
  %v4_aeec = inttoptr i32 %v3_aeec to i8*
  store i8 %v1_aeec, i8* %v4_aeec, align 1
  %v0_aef0 = load i32, i32* %ip.global-to-local, align 4
  %v1_aef0 = trunc i32 %v0_aef0 to i8
  %v2_aef0 = load i32, i32* %r2.global-to-local, align 4
  %v3_aef0 = add i32 %v2_aef0, 2
  %v4_aef0 = inttoptr i32 %v3_aef0 to i8*
  store i8 %v1_aef0, i8* %v4_aef0, align 1
  %v0_aef4 = load i32, i32* @r4, align 4
  store i32 %v0_aef4, i32* %stack_var_-40, align 4
  %v8_aef8 = icmp sgt i32 %v1_a994, %v1_aecc
  br i1 %v8_aef8, label %dec_label_pc_ad54, label %dec_label_pc_aefc

dec_label_pc_aefc:                                ; preds = %dec_label_pc_aebc, %dec_label_pc_b0c8
  %v4_af6c.pre-phi = phi i32 [ %v4_b0cc, %dec_label_pc_b0c8 ], [ %v4_aca0, %dec_label_pc_aebc ]
  store i32 %v1_a994, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_ac78, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_af08

dec_label_pc_af08:                                ; preds = %dec_label_pc_af08, %dec_label_pc_b02c, %dec_label_pc_aefc
  br i1 %v2_ac78, label %dec_label_pc_af08, label %dec_label_pc_af0c

dec_label_pc_af0c:                                ; preds = %dec_label_pc_af08
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_af1c = load i32, i32* @fp, align 4
  %v1_af1c = add i32 %v0_af1c, 27
  store i32 %v1_af1c, i32* @sb, align 4
  %v1_af20 = add i32 %v0_af1c, 47
  store i32 %v1_af20, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_af28

dec_label_pc_af28:                                ; preds = %dec_label_pc_af68.dec_label_pc_af28_crit_edge, %dec_label_pc_af0c
  %v1_af48 = phi i32 [ %v1_af34.pre, %dec_label_pc_af68.dec_label_pc_af28_crit_edge ], [ 65535, %dec_label_pc_af0c ]
  %v1_af30 = phi i32 [ %v1_b018, %dec_label_pc_af68.dec_label_pc_af28_crit_edge ], [ 0, %dec_label_pc_af0c ]
  store i32 %v2_a9ac, i32* %r3.global-to-local, align 4
  store i32 %v3_ac68, i32* %r8.global-to-local, align 4
  %v4_af30 = mul i32 %v1_af30, 4
  %v5_af30 = add i32 %v4_af30, %v2_a9ac
  %v6_af30 = inttoptr i32 %v5_af30 to i32*
  %v7_af30 = load i32, i32* %v6_af30, align 4
  store i32 %v7_af30, i32* @r4, align 4
  %v9_af34 = icmp eq i32 %v3_ac68, %v1_af48
  store i1 %v9_af34, i1* %cpsr_z.global-to-local, align 1
  %v1_af38 = add i32 %v7_af30, 20
  store i32 %v1_af38, i32* @r5, align 4
  %v1_af3c = add i32 %v7_af30, 28
  store i32 %v1_af3c, i32* @r8, align 4
  br i1 %v9_af34, label %dec_label_pc_b03c, label %dec_label_pc_af44

dec_label_pc_af44:                                ; preds = %dec_label_pc_af28
  store i32 %v3_ac6c, i32* %ip.global-to-local, align 4
  %v9_af48 = icmp eq i32 %v3_ac6c, %v1_af48
  store i1 %v9_af48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af48, label %dec_label_pc_b058, label %dec_label_pc_af50

dec_label_pc_af50:                                ; preds = %dec_label_pc_b03c.dec_label_pc_af50_crit_edge, %dec_label_pc_af44
  %v1_af54 = phi i32 [ %v1_af54.pre, %dec_label_pc_b03c.dec_label_pc_af50_crit_edge ], [ %v1_af48, %dec_label_pc_af44 ]
  store i32 %v3_ac70, i32* %lr.global-to-local, align 4
  %v9_af54 = icmp eq i32 %v3_ac70, %v1_af54
  store i1 %v9_af54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af54, label %dec_label_pc_b074, label %dec_label_pc_af5c

dec_label_pc_af5c:                                ; preds = %dec_label_pc_b058.dec_label_pc_af5c_crit_edge, %dec_label_pc_af50
  %v1_af60 = phi i32 [ %v1_af60.pre, %dec_label_pc_b058.dec_label_pc_af5c_crit_edge ], [ %v1_af54, %dec_label_pc_af50 ]
  store i32 %v3_ac74, i32* %r0.global-to-local, align 4
  %v9_af60 = icmp eq i32 %v3_ac74, %v1_af60
  store i1 %v9_af60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af60, label %dec_label_pc_b090, label %dec_label_pc_af68

dec_label_pc_af68:                                ; preds = %dec_label_pc_b074, %dec_label_pc_af5c, %dec_label_pc_b090
  %v0_af68 = load i32, i32* @r4, align 4
  %v1_af68 = add i32 %v0_af68, 41
  store i32 %v1_af68, i32* %r0.global-to-local, align 4
  store i32 %v4_af6c.pre-phi, i32* %r1.global-to-local, align 4
  %v2_af70 = call i32 @function_e7e0(i32 %v1_af68, i32 %v4_af6c.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_af78 = load i32, i32* @r7, align 4
  %v1_af78 = trunc i32 %v0_af78 to i8
  %v2_af78 = load i32, i32* @r4, align 4
  %v3_af78 = add i32 %v2_af78, 10
  %v4_af78 = inttoptr i32 %v3_af78 to i8*
  store i8 %v1_af78, i8* %v4_af78, align 1
  %v0_af7c = load i32, i32* @r7, align 4
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v2_af7c = load i32, i32* @r4, align 4
  %v3_af7c = add i32 %v2_af7c, 11
  %v4_af7c = inttoptr i32 %v3_af7c to i8*
  store i8 %v1_af7c, i8* %v4_af7c, align 1
  %v0_af80 = load i32, i32* @r4, align 4
  store i32 %v0_af80, i32* @r0, align 4
  %v2_af84 = call i32 @function_d0b8(i32 %v0_af80, i32 20)
  %v3_af84 = trunc i32 %v2_af84 to i8
  store i32 %v2_af84, i32* %r0.global-to-local, align 4
  %v4_af88 = sdiv i32 %v2_af84, 256
  store i32 %v4_af88, i32* %r3.global-to-local, align 4
  %v1_af8c = trunc i32 %v4_af88 to i8
  %v2_af8c = load i32, i32* @r4, align 4
  %v3_af8c = add i32 %v2_af8c, 11
  %v4_af8c = inttoptr i32 %v3_af8c to i8*
  store i8 %v1_af8c, i8* %v4_af8c, align 1
  %v3_af90 = load i32, i32* @r4, align 4
  %v4_af90 = add i32 %v3_af90, 10
  %v5_af90 = inttoptr i32 %v4_af90 to i8*
  store i8 %v3_af84, i8* %v5_af90, align 1
  %v0_af94 = load i32, i32* @r7, align 4
  %v1_af94 = trunc i32 %v0_af94 to i8
  %v2_af94 = load i32, i32* @r5, align 4
  %v3_af94 = add i32 %v2_af94, 6
  %v4_af94 = inttoptr i32 %v3_af94 to i8*
  store i8 %v1_af94, i8* %v4_af94, align 1
  %v0_af98 = load i32, i32* @r7, align 4
  %v1_af98 = trunc i32 %v0_af98 to i8
  %v2_af98 = load i32, i32* @r5, align 4
  %v3_af98 = add i32 %v2_af98, 7
  %v4_af98 = inttoptr i32 %v3_af98 to i8*
  store i8 %v1_af98, i8* %v4_af98, align 1
  %v0_af9c = load i32, i32* @r4, align 4
  %v1_af9c = add i32 %v0_af9c, 24
  %v2_af9c = inttoptr i32 %v1_af9c to i8*
  %v3_af9c = load i8, i8* %v2_af9c, align 1
  %v4_af9c = zext i8 %v3_af9c to i32
  store i32 %v4_af9c, i32* %r3.global-to-local, align 4
  %v1_afa0 = add i32 %v0_af9c, 25
  %v2_afa0 = inttoptr i32 %v1_afa0 to i8*
  %v3_afa0 = load i8, i8* %v2_afa0, align 1
  %v4_afa0 = zext i8 %v3_afa0 to i32
  %v0_afa4 = load i32, i32* @r5, align 4
  store i32 %v0_afa4, i32* @r1, align 4
  %v4_afa8 = mul nuw nsw i32 %v4_afa0, 256
  %v5_afa8 = or i32 %v4_afa8, %v4_af9c
  store i32 %v5_afa8, i32* %r2.global-to-local, align 4
  store i32 %v0_af9c, i32* %r0.global-to-local, align 4
  %v0_afb0 = load i32, i32* @sb, align 4
  store i32 %v0_afb0, i32* %r3.global-to-local, align 4
  %v4_afb4 = call i32 @function_d114(i32 %v0_af9c, i32 %v0_afa4, i32 %v5_afa8, i32 %v0_afb0)
  %v5_afb4 = trunc i32 %v4_afb4 to i8
  store i32 %v4_afb4, i32* %r0.global-to-local, align 4
  %v3_afb8 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_afc8 = mul i32 %v3_afb8, 24
  %v2_afcc = add i32 %v5_afc8, %arg2
  store i32 %v2_afcc, i32* %lr.global-to-local, align 4
  %v4_afd0 = sdiv i32 %v4_afb4, 256
  store i32 %v4_afd0, i32* %r3.global-to-local, align 4
  %v3_afd4 = load i32, i32* @r5, align 4
  %v4_afd4 = add i32 %v3_afd4, 6
  %v5_afd4 = inttoptr i32 %v4_afd4 to i8*
  store i8 %v5_afb4, i8* %v5_afd4, align 1
  %v0_afd8 = load i32, i32* %r3.global-to-local, align 4
  %v1_afd8 = trunc i32 %v0_afd8 to i8
  %v2_afd8 = load i32, i32* @r5, align 4
  %v3_afd8 = add i32 %v2_afd8, 7
  %v4_afd8 = inttoptr i32 %v3_afd8 to i8*
  store i8 %v1_afd8, i8* %v4_afd8, align 1
  %v0_afdc = load i32, i32* %r2.global-to-local, align 4
  %v1_afdc = load i32, i32* %lr.global-to-local, align 4
  %v2_afdc = add i32 %v1_afdc, 4
  %v3_afdc = inttoptr i32 %v2_afdc to i32*
  store i32 %v0_afdc, i32* %v3_afdc, align 4
  %v0_afe0 = load i32, i32* @r4, align 4
  %v1_afe0 = add i32 %v0_afe0, 20
  %v2_afe0 = inttoptr i32 %v1_afe0 to i32*
  %v3_afe0 = load i32, i32* %v2_afe0, align 4
  %v3_afe4 = udiv i32 %v3_afe0, 65536
  store i32 %v3_afe4, i32* %r3.global-to-local, align 4
  %v3_afe812 = udiv i32 %v3_afe0, 16777216
  %v1_afec = trunc i32 %v3_afe812 to i8
  %v2_afec = load i32, i32* %lr.global-to-local, align 4
  %v3_afec = add i32 %v2_afec, 3
  %v4_afec = inttoptr i32 %v3_afec to i8*
  store i8 %v1_afec, i8* %v4_afec, align 1
  %v0_aff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_aff0 = trunc i32 %v0_aff0 to i8
  %v2_aff0 = load i32, i32* %lr.global-to-local, align 4
  %v3_aff0 = add i32 %v2_aff0, 2
  %v4_aff0 = inttoptr i32 %v3_aff0 to i8*
  store i8 %v1_aff0, i8* %v4_aff0, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_affc = load i32, i32* @r4, align 4
  store i32 %v0_affc, i32* %r1.global-to-local, align 4
  store i32 %v3_ac08, i32* %r0.global-to-local, align 4
  %v0_b004 = load i32, i32* @sl, align 4
  store i32 %v0_b004, i32* %r2.global-to-local, align 4
  %v0_b008 = load i32, i32* %lr.global-to-local, align 4
  %v6_b010 = inttoptr i32 %v0_affc to i32*
  %v7_b010 = call i32 @function_11b4c(i32 %v3_ac08, i32* %v6_b010, i32 %v0_b004, i32 16384, i32 %v0_b008, i32 16)
  %v3_b014 = load i32, i32* %stack_var_-40, align 4
  %v1_b018 = add i32 %v3_b014, 1
  store i32 %v1_b018, i32* %r0.global-to-local, align 4
  store i32 %v1_a994, i32* %r3.global-to-local, align 4
  %v9_b020 = icmp eq i32 %v1_a994, %v1_b018
  store i1 %v9_b020, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b018, i32* %stack_var_-40, align 4
  %v8_b028 = icmp sgt i32 %v1_a994, %v1_b018
  br i1 %v8_b028, label %dec_label_pc_af68.dec_label_pc_af28_crit_edge, label %dec_label_pc_b02c

dec_label_pc_af68.dec_label_pc_af28_crit_edge:    ; preds = %dec_label_pc_af68
  %v1_af34.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_af28

dec_label_pc_b02c:                                ; preds = %dec_label_pc_af68
  store i32 %v1_a994, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_af08

dec_label_pc_b03c:                                ; preds = %dec_label_pc_af28
  %v0_b03c = call i32 @function_e72c()
  %v1_b03c = trunc i32 %v0_b03c to i8
  store i32 %v0_b03c, i32* %r0.global-to-local, align 4
  store i32 %v3_ac6c, i32* %ip.global-to-local, align 4
  %v4_b044 = sdiv i32 %v0_b03c, 256
  store i32 %v4_b044, i32* %r3.global-to-local, align 4
  %v1_b048 = load i32, i32* @r6, align 4
  %v9_b048 = icmp eq i32 %v3_ac6c, %v1_b048
  store i1 %v9_b048, i1* %cpsr_z.global-to-local, align 1
  %v1_b04c = trunc i32 %v4_b044 to i8
  %v2_b04c = load i32, i32* @r4, align 4
  %v3_b04c = add i32 %v2_b04c, 5
  %v4_b04c = inttoptr i32 %v3_b04c to i8*
  store i8 %v1_b04c, i8* %v4_b04c, align 1
  %v3_b050 = load i32, i32* @r4, align 4
  %v4_b050 = add i32 %v3_b050, 4
  %v5_b050 = inttoptr i32 %v4_b050 to i8*
  store i8 %v1_b03c, i8* %v5_b050, align 1
  %v0_b054 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b054, label %dec_label_pc_b058, label %dec_label_pc_b03c.dec_label_pc_af50_crit_edge

dec_label_pc_b03c.dec_label_pc_af50_crit_edge:    ; preds = %dec_label_pc_b03c
  %v1_af54.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_af50

dec_label_pc_b058:                                ; preds = %dec_label_pc_b03c, %dec_label_pc_af44
  %v0_b058 = call i32 @function_e72c()
  %v1_b058 = trunc i32 %v0_b058 to i8
  store i32 %v0_b058, i32* %r0.global-to-local, align 4
  store i32 %v3_ac70, i32* %lr.global-to-local, align 4
  %v4_b060 = sdiv i32 %v0_b058, 256
  store i32 %v4_b060, i32* %r3.global-to-local, align 4
  %v1_b064 = load i32, i32* @r6, align 4
  %v9_b064 = icmp eq i32 %v3_ac70, %v1_b064
  store i1 %v9_b064, i1* %cpsr_z.global-to-local, align 1
  %v3_b068 = load i32, i32* @r4, align 4
  %v4_b068 = add i32 %v3_b068, 20
  %v5_b068 = inttoptr i32 %v4_b068 to i8*
  store i8 %v1_b058, i8* %v5_b068, align 1
  %v0_b06c = load i32, i32* %r3.global-to-local, align 4
  %v1_b06c = trunc i32 %v0_b06c to i8
  %v2_b06c = load i32, i32* @r5, align 4
  %v3_b06c = add i32 %v2_b06c, 1
  %v4_b06c = inttoptr i32 %v3_b06c to i8*
  store i8 %v1_b06c, i8* %v4_b06c, align 1
  %v0_b070 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b070, label %dec_label_pc_b074, label %dec_label_pc_b058.dec_label_pc_af5c_crit_edge

dec_label_pc_b058.dec_label_pc_af5c_crit_edge:    ; preds = %dec_label_pc_b058
  %v1_af60.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_af5c

dec_label_pc_b074:                                ; preds = %dec_label_pc_b058, %dec_label_pc_af50
  %v0_b074 = call i32 @function_e72c()
  %v1_b074 = trunc i32 %v0_b074 to i8
  %v4_b078 = sdiv i32 %v0_b074, 256
  store i32 %v4_b078, i32* %r3.global-to-local, align 4
  %v3_b07c = load i32, i32* @r5, align 4
  %v4_b07c = add i32 %v3_b07c, 2
  %v5_b07c = inttoptr i32 %v4_b07c to i8*
  store i8 %v1_b074, i8* %v5_b07c, align 1
  store i32 %v3_ac74, i32* %r0.global-to-local, align 4
  %v1_b084 = load i32, i32* @r6, align 4
  %v9_b084 = icmp eq i32 %v3_ac74, %v1_b084
  store i1 %v9_b084, i1* %cpsr_z.global-to-local, align 1
  %v0_b088 = load i32, i32* %r3.global-to-local, align 4
  %v1_b088 = trunc i32 %v0_b088 to i8
  %v2_b088 = load i32, i32* @r5, align 4
  %v3_b088 = add i32 %v2_b088, 3
  %v4_b088 = inttoptr i32 %v3_b088 to i8*
  store i8 %v1_b088, i8* %v4_b088, align 1
  %v0_b08c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b08c, label %dec_label_pc_b090, label %dec_label_pc_af68

dec_label_pc_b090:                                ; preds = %dec_label_pc_b074, %dec_label_pc_af5c
  %v0_b090 = call i32 @function_e72c()
  %v1_b090 = trunc i32 %v0_b090 to i8
  store i32 %v0_b090, i32* %r0.global-to-local, align 4
  %v4_b094 = sdiv i32 %v0_b090, 256
  store i32 %v4_b094, i32* %r3.global-to-local, align 4
  %v3_b098 = load i32, i32* @r4, align 4
  %v4_b098 = add i32 %v3_b098, 28
  %v5_b098 = inttoptr i32 %v4_b098 to i8*
  store i8 %v1_b090, i8* %v5_b098, align 1
  %v0_b09c = load i32, i32* %r3.global-to-local, align 4
  %v1_b09c = trunc i32 %v0_b09c to i8
  %v2_b09c = load i32, i32* @r8, align 4
  %v3_b09c = add i32 %v2_b09c, 1
  %v4_b09c = inttoptr i32 %v3_b09c to i8*
  store i8 %v1_b09c, i8* %v4_b09c, align 1
  br label %dec_label_pc_af68

dec_label_pc_b0a4:                                ; preds = %dec_label_pc_ab70, %dec_label_pc_ab3c, %dec_label_pc_aae0, %dec_label_pc_a988
  %v0_b0a4 = call i32 @function_e72c()
  %v1_b0a8 = urem i32 %v0_b0a4, 4
  store i32 %v1_b0a8, i32* %r0.global-to-local, align 4
  %v2_b0ac = icmp eq i32 %v1_b0a8, 3
  store i1 %v2_b0ac, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_b0a4 to i2
  switch i2 %trunc, label %dec_label_pc_abe420 [
    i2 0, label %dec_label_pc_b0ec
    i2 1, label %dec_label_pc_b100
    i2 -2, label %dec_label_pc_b10c
    i2 -1, label %dec_label_pc_b11c
  ]

dec_label_pc_b0c8:                                ; preds = %dec_label_pc_ac44
  store i32 %v2_abf4, i32* %r0.global-to-local, align 4
  %v4_b0cc = sext i8 %v5_ac60 to i32
  store i32 %v4_b0cc, i32* %r1.global-to-local, align 4
  %v2_b0d0 = add i32 %v4_b0cc, %v2_abf4
  store i32 %v2_b0d0, i32* @fp, align 4
  br label %dec_label_pc_aefc

dec_label_pc_b0d8:                                ; preds = %dec_label_pc_ac18
  store i32 %v3_ac08, i32* %r0.global-to-local, align 4
  %v1_b0dc = call i32 @function_112cc(i32 %v3_ac08)
  store i32 %v1_b0dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b0e0

dec_label_pc_b0e0:                                ; preds = %dec_label_pc_abf0, %dec_label_pc_abe4, %dec_label_pc_b0d8
  %v29_b0e8 = phi i32 [ %v3_ac08, %dec_label_pc_abf0 ], [ %v29_b0e874, %dec_label_pc_abe4 ], [ %v1_b0dc, %dec_label_pc_b0d8 ]
  store i32 %v3_a988, i32* %r4.global-to-local, align 4
  store i32 %v15_a988, i32* %r8.global-to-local, align 4
  store i32 %v18_a988, i32* %sb.global-to-local, align 4
  store i32 %v21_a988, i32* %sl.global-to-local, align 4
  store i32 %v24_a988, i32* %fp.global-to-local, align 4
  ret i32 %v29_b0e8

dec_label_pc_b0ec:                                ; preds = %dec_label_pc_b0a4
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_abe4

dec_label_pc_b100:                                ; preds = %dec_label_pc_b0a4
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_abe4

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b0a4
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_abe4

dec_label_pc_b11c:                                ; preds = %dec_label_pc_b0a4
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_abe4

; uselistorder directives
  uselistorder i32 %v4_b0cc, { 0, 2, 1 }
  uselistorder i32 %v1_b0a8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_b0a4, { 1, 0 }
  uselistorder i32 %v0_b090, { 0, 2, 1 }
  uselistorder i32 %v0_b058, { 0, 2, 1 }
  uselistorder i32 %v4_b044, { 1, 0 }
  uselistorder i32 %v0_b03c, { 0, 2, 1 }
  uselistorder i32 %v1_b018, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_afb4, { 0, 2, 1 }
  uselistorder i32 %v0_af9c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_af88, { 1, 0 }
  uselistorder i32 %v2_af84, { 0, 2, 1 }
  uselistorder i32 %v7_af30, { 1, 0, 2 }
  uselistorder i32 %v4_af6c.pre-phi, { 1, 0 }
  uselistorder i32 %v2_aeb0, { 1, 0 }
  uselistorder i32 %v1_aea486, { 1, 0, 2 }
  uselistorder i32 %v1_ae98, { 2, 1, 0 }
  uselistorder i32 %v0_ae98, { 1, 2, 0 }
  uselistorder i32 %v0_ae9832, { 1, 0 }
  uselistorder i32 %v1_ae9833, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_ae6c, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_ade8, { 1, 0 }
  uselistorder i32 %v3_ad24, { 1, 0, 2 }
  uselistorder i32 %v1_acec, { 1, 0 }
  uselistorder i32 %v1_ace0, { 1, 0 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_acb0, { 1, 0 }
  uselistorder i32 %v3_aca8, { 1, 0 }
  uselistorder i32 %v4_aca0, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_ac60, { 1, 0 }
  uselistorder i32 %v0_ac5c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_ac50, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_ac3c, { 1, 0 }
  uselistorder i1 %v7_ac0c, { 1, 0 }
  uselistorder i32 %v3_ac08, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_abf4, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_abdc, { 1, 0, 2 }
  uselistorder i1 %v7_abac, { 1, 0 }
  uselistorder i32 %v1_aba8, { 1, 0, 2 }
  uselistorder i1 %v8_aba0, { 1, 0 }
  uselistorder i1 %v7_ab9c, { 1, 0 }
  uselistorder i32 %v1_ab90, { 1, 0 }
  uselistorder i8 %v2_ab84, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ab88, { 1, 0 }
  uselistorder i32 %v0_aba8, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ab74, { 0, 2, 1 }
  uselistorder i32 %v1_ab8c, { 0, 2, 1 }
  uselistorder i32 %v2_ab5c, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_ab54, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ab3c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_ab34, { 1, 0 }
  uselistorder i32 %v0_ab34, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_aad8, { 1, 0, 3, 2 }
  uselistorder i32 %v5_aaa8, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_aa2c, { 1, 0 }
  uselistorder i32 %v7_a9e8, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_a9e4, { 1, 0 }
  uselistorder i32 %v6_a9c4, { 1, 0 }
  uselistorder i32 %v2_a9ac, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a994, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 3, 4, 5, 8, 7, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 2, 19, 20, 1, 34, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 35, 36, 37, 39, 41, 40, 42, 43, 44, 46, 45, 48, 47, 49, 50, 52, 51, 53, 55, 54, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 5, 2, 3, 4, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder label %dec_label_pc_b0e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af08, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aefc, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_abb8, { 1, 0 }
  uselistorder label %dec_label_pc_abac, { 1, 0 }
  uselistorder label %dec_label_pc_ab70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab68, { 1, 0 }
}

define i32 @function_b138(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b138:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b13c = urem i32 %arg1, 256
  store i32 %v1_b13c, i32* @fp, align 4
  store i32 %v1_b13c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b154 = urem i32 %arg3, 256
  store i32 %v1_b154, i32* @r4, align 4
  %v2_b158 = call i32 @function_11e9c(i32 %v1_b13c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b164 = load i32, i32* @fp, align 4
  store i32 %v0_b164, i32* %r0.global-to-local, align 4
  %v2_b168 = call i32 @function_11e9c(i32 %v0_b164, i32 4)
  %v0_b16c = load i32, i32* @r5, align 4
  store i32 %v0_b16c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b17c = load i32, i32* @r4, align 4
  store i32 %v0_b17c, i32* %r0.global-to-local, align 4
  %v5_b180 = inttoptr i32 %v0_b16c to i32*
  %v6_b180 = call i32 @function_85e0(i32 %v0_b17c, i32* %v5_b180, i32 2, i32 0)
  %v1_b18c = urem i32 %v6_b180, 256
  store i32 %v1_b18c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b198 = load i32, i32* @r5, align 4
  store i32 %v0_b198, i32* %r1.global-to-local, align 4
  %v0_b19c = load i32, i32* @r4, align 4
  store i32 %v0_b19c, i32* %r0.global-to-local, align 4
  %v6_b1a4 = inttoptr i32 %v0_b198 to i32*
  %v7_b1a4 = call i32 @function_85e0(i32 %v0_b19c, i32* %v6_b1a4, i32 3, i32 65535)
  %v0_b1a8 = load i32, i32* @r5, align 4
  store i32 %v0_b1a8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b1a4, i32* @r6, align 4
  %v0_b1b8 = load i32, i32* @r4, align 4
  store i32 %v0_b1b8, i32* %r0.global-to-local, align 4
  %v4_b1bc = inttoptr i32 %v0_b1a8 to i32*
  %v5_b1bc = call i32 @function_85e0(i32 %v0_b1b8, i32* %v4_b1bc, i32 4, i32 64)
  %v1_b1c4 = urem i32 %v5_b1bc, 256
  store i32 %v1_b1c4, i32* %ip.global-to-local, align 4
  %v0_b1c8 = load i32, i32* @r5, align 4
  store i32 %v0_b1c8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b1d4 = load i32, i32* @r4, align 4
  store i32 %v0_b1d4, i32* %r0.global-to-local, align 4
  %v6_b1dc = inttoptr i32 %v0_b1c8 to i32*
  %v7_b1dc = call i32 @function_85e0(i32 %v0_b1d4, i32* %v6_b1dc, i32 5, i32 1)
  %v1_b1e8 = urem i32 %v7_b1dc, 256
  store i32 %v1_b1e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b1f0 = load i32, i32* @r5, align 4
  store i32 %v0_b1f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r4, align 4
  store i32 %v0_b1f8, i32* %r0.global-to-local, align 4
  %v5_b200 = inttoptr i32 %v0_b1f0 to i32*
  %v6_b200 = call i32 @function_85e0(i32 %v0_b1f8, i32* %v5_b200, i32 7, i32 65535)
  %v0_b204 = load i32, i32* @r5, align 4
  store i32 %v0_b204, i32* %r1.global-to-local, align 4
  %v3_b208 = mul i32 %v6_b200, 65536
  store i32 %v3_b208, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b214 = load i32, i32* @r4, align 4
  store i32 %v0_b214, i32* %r0.global-to-local, align 4
  %v4_b218 = inttoptr i32 %v0_b204 to i32*
  %v5_b218 = call i32 @function_85e0(i32 %v0_b214, i32* %v4_b218, i32 11, i32 1)
  %v1_b220 = urem i32 %v5_b218, 256
  store i32 %v1_b220, i32* %ip.global-to-local, align 4
  %v0_b224 = load i32, i32* @r5, align 4
  store i32 %v0_b224, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b230 = load i32, i32* @r4, align 4
  store i32 %v0_b230, i32* %r0.global-to-local, align 4
  %v5_b238 = inttoptr i32 %v0_b224 to i32*
  %v6_b238 = call i32 @function_85e0(i32 %v0_b230, i32* %v5_b238, i32 12, i32 1)
  %v1_b240 = urem i32 %v6_b238, 256
  store i32 %v1_b240, i32* %ip.global-to-local, align 4
  %v0_b244 = load i32, i32* @r5, align 4
  store i32 %v0_b244, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b250 = load i32, i32* @r4, align 4
  store i32 %v0_b250, i32* %r0.global-to-local, align 4
  %v5_b258 = inttoptr i32 %v0_b244 to i32*
  %v6_b258 = call i32 @function_85e0(i32 %v0_b250, i32* %v5_b258, i32 13, i32 1)
  %v1_b260 = urem i32 %v6_b258, 256
  store i32 %v1_b260, i32* %ip.global-to-local, align 4
  %v0_b264 = load i32, i32* @r5, align 4
  store i32 %v0_b264, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b270 = load i32, i32* @r4, align 4
  store i32 %v0_b270, i32* %r0.global-to-local, align 4
  %v5_b278 = inttoptr i32 %v0_b264 to i32*
  %v6_b278 = call i32 @function_85e0(i32 %v0_b270, i32* %v5_b278, i32 14, i32 1)
  %v1_b280 = urem i32 %v6_b278, 256
  store i32 %v1_b280, i32* %ip.global-to-local, align 4
  %v0_b284 = load i32, i32* @r5, align 4
  store i32 %v0_b284, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b290 = load i32, i32* @r4, align 4
  store i32 %v0_b290, i32* %r0.global-to-local, align 4
  %v5_b298 = inttoptr i32 %v0_b284 to i32*
  %v6_b298 = call i32 @function_85e0(i32 %v0_b290, i32* %v5_b298, i32 15, i32 1)
  %v1_b2a0 = urem i32 %v6_b298, 256
  store i32 %v1_b2a0, i32* %ip.global-to-local, align 4
  %v0_b2a4 = load i32, i32* @r5, align 4
  store i32 %v0_b2a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b2b0 = load i32, i32* @r4, align 4
  store i32 %v0_b2b0, i32* %r0.global-to-local, align 4
  %v5_b2b8 = inttoptr i32 %v0_b2a4 to i32*
  %v6_b2b8 = call i32 @function_85e0(i32 %v0_b2b0, i32* %v5_b2b8, i32 16, i32 1)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b2b8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b2c8 = load i32, i32* @r5, align 4
  store i32 %v0_b2c8, i32* %r1.global-to-local, align 4
  %v0_b2cc = load i32, i32* @r4, align 4
  store i32 %v0_b2cc, i32* %r0.global-to-local, align 4
  %v1_b2d0 = urem i32 %v6_b2b8, 256
  store i32 %v1_b2d0, i32* @r8, align 4
  %v4_b2d4 = inttoptr i32 %v0_b2c8 to i32*
  %v5_b2d4 = call i32 @function_85e0(i32 %v0_b2cc, i32* %v4_b2d4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b2e0 = load i32, i32* @r5, align 4
  store i32 %v0_b2e0, i32* %r1.global-to-local, align 4
  store i32 %v5_b2d4, i32* @sb, align 4
  %v0_b2e8 = load i32, i32* @r4, align 4
  store i32 %v0_b2e8, i32* %r0.global-to-local, align 4
  %v4_b2ec = inttoptr i32 %v0_b2e0 to i32*
  %v5_b2ec = call i32 @function_85e0(i32 %v0_b2e8, i32* %v4_b2ec, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b2f8 = urem i32 %v5_b2ec, 256
  store i32 %v1_b2f8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b308 = call i32 @function_11bb0(i32 2, i32 3, i32 6)
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v0_b30c = load i32, i32* @r7, align 4
  %v3_b30c = udiv i32 %v0_b30c, 65536
  store i32 %v3_b30c, i32* %r1.global-to-local, align 4
  %v7_b310 = icmp eq i32 %v3_b308, -1
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b310, label %dec_label_pc_b56c, label %dec_label_pc_b320

dec_label_pc_b320:                                ; preds = %dec_label_pc_b138
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b328 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b328, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b33c = call i32 @function_11b80(i32 %v3_b308, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b33c, i32* %r0.global-to-local, align 4
  %v7_b340 = icmp eq i32 %v6_b33c, -1
  store i1 %v7_b340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b340, label %dec_label_pc_b564, label %dec_label_pc_b348

dec_label_pc_b348:                                ; preds = %dec_label_pc_b320
  %v0_b348 = load i32, i32* @fp, align 4
  %v2_b348 = icmp eq i32 %v0_b348, 0
  store i1 %v2_b348, i1* %cpsr_z.global-to-local, align 1
  %v0_b34c = load i32, i32* @r6, align 4
  %v3_b34c = mul i32 %v0_b34c, 65536
  store i32 %v3_b34c, i32* %r0.global-to-local, align 4
  %v3_b350 = urem i32 %v0_b34c, 65536
  store i32 %v3_b350, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_b348, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_b374.preheader

.thread18:                                        ; preds = %dec_label_pc_b348
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_b7f8

dec_label_pc_b374.preheader:                      ; preds = %dec_label_pc_b348
  %v5_b358 = load i32, i32* @r7, align 4
  %v8_b358 = udiv i32 %v5_b358, 16777216
  %tmp73 = udiv i32 %v0_b34c, 256
  %v8_b35c = urem i32 %tmp73, 256
  store i32 %v8_b35c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b460 = icmp ugt i32 %v0_b30c, -65537
  %v2_b484 = ptrtoint i32* %stack_var_-60 to i32
  %v3_b490 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_b4c0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_b4c4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_b4c8 = ptrtoint i32* %stack_var_-332 to i32
  %v4_b514 = zext i8 %tmp31 to i32
  %v4_b518 = zext i8 %tmp30 to i32
  %v4_b524 = mul nuw nsw i32 %v4_b518, 256
  %v4_b534 = zext i8 %tmp to i32
  %v1_b538 = and i32 %v4_b534, 18
  %v2_b53c = icmp eq i32 %v1_b538, 18
  %v1_b470 = mul nuw nsw i32 %v3_b30c, 256
  %v4_b474 = and i32 %v1_b470, 65280
  %v5_b474 = or i32 %v8_b358, %v4_b474
  %v3_b47893 = udiv i32 %v4_b474, 256
  %v1_b47c = trunc i32 %v3_b47893 to i8
  %v1_b640 = mul i32 %v0_b34c, 256
  %v4_b648 = and i32 %v1_b640, 65280
  %sext = mul i32 %v6_b180, 16777216
  %v4_b658 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_b1bc, 16777216
  %v4_b67c = sdiv i32 %sext5, 16777216
  %v5_b524 = or i32 %v4_b514, %v4_b524
  %v1_b544 = and i32 %v4_b534, 5
  %v2_b544 = icmp eq i32 %v1_b544, 0
  %v1_b480 = trunc i32 %v8_b358 to i8
  %v5_b648 = or i32 %v8_b35c, %v4_b648
  %v1_b668 = trunc i32 %v4_b658 to i8
  %v1_b748 = urem i32 %v5_b218, 2
  %tmp94 = sub nsw i32 0, %v1_b748
  %v4_b750 = and i32 %tmp94, 32
  %v1_b760 = urem i32 %v6_b238, 2
  %tmp95 = sub nsw i32 0, %v1_b760
  %v4_b768 = and i32 %tmp95, 16
  %v1_b778 = urem i32 %v6_b258, 2
  %tmp96 = sub nsw i32 0, %v1_b778
  %v4_b780 = and i32 %tmp96, 8
  %v1_b790 = urem i32 %v6_b278, 2
  %tmp97 = sub nsw i32 0, %v1_b790
  %v4_b798 = and i32 %tmp97, 4
  %v1_b7a8 = urem i32 %v6_b298, 2
  %tmp98 = sub nsw i32 0, %v1_b7a8
  %v3_b7b0 = and i32 %tmp98, 2
  br label %dec_label_pc_b374

dec_label_pc_b374:                                ; preds = %dec_label_pc_b7e4, %dec_label_pc_b54c, %dec_label_pc_b374.preheader
  store i32 %v8_b35c, i32* %r3.global-to-local, align 4
  %v0_b380 = load i32, i32* @sb, align 4
  %v1_b380 = add i32 %v0_b380, 40
  store i32 %v1_b380, i32* @sl, align 4
  br label %dec_label_pc_b384

dec_label_pc_b384:                                ; preds = %dec_label_pc_b558, %dec_label_pc_b374
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b390 = call i32 @function_11bb0(i32 2, i32 1, i32 0)
  store i32 %v3_b390, i32* %r0.global-to-local, align 4
  %v7_b394 = icmp eq i32 %v3_b390, -1
  store i1 %v7_b394, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b390, i32* @r7, align 4
  br i1 %v7_b394, label %dec_label_pc_b7e4, label %dec_label_pc_b3a0

dec_label_pc_b3a0:                                ; preds = %dec_label_pc_b384
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b3a8 = call i32 @function_11208(i32 %v3_b390, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b3b0 = or i32 %v2_b3a8, 2048
  store i32 %v1_b3b0, i32* @r2, align 4
  %v0_b3b4 = load i32, i32* @r7, align 4
  store i32 %v0_b3b4, i32* %r0.global-to-local, align 4
  %v2_b3b8 = call i32 @function_11208(i32 %v0_b3b4, i32 4)
  store i32 %v2_b3b8, i32* %r0.global-to-local, align 4
  %v3_b3bc = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_b3cc = mul i32 %v3_b3bc, 24
  store i32 %v5_b3cc, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_b3dc = add i32 %v5_b3cc, %arg2
  store i32 %v2_b3dc, i32* %r2.global-to-local, align 4
  %v1_b3e0 = add i32 %v2_b3dc, 20
  %v2_b3e0 = inttoptr i32 %v1_b3e0 to i8*
  %v3_b3e0 = load i8, i8* %v2_b3e0, align 1
  %v4_b3e0 = zext i8 %v3_b3e0 to i32
  store i32 %v4_b3e0, i32* %r3.global-to-local, align 4
  %v2_b3e4 = icmp ugt i8 %v3_b3e0, 30
  %v7_b3e4 = icmp eq i8 %v3_b3e0, 31
  store i1 %v7_b3e4, i1* %cpsr_z.global-to-local, align 1
  %v2_b3e8 = xor i1 %v7_b3e4, true
  %v3_b3e8 = and i1 %v2_b3e4, %v2_b3e8
  %v5_b3e8 = add i32 %v2_b3dc, 16
  %v6_b3e8 = inttoptr i32 %v5_b3e8 to i32*
  %v7_b3e8 = load i32, i32* %v6_b3e8, align 4
  br i1 %v3_b3e8, label %dec_label_pc_b454, label %dec_label_pc_b3f4

dec_label_pc_b3f4:                                ; preds = %dec_label_pc_b3a0
  store i32 %v7_b3e8, i32* @r4, align 4
  %v0_b3f8 = call i32 @function_e72c()
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  %v3_b3fc = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_b408 = mul i32 %v3_b3fc, 24
  %v0_b40c = load i32, i32* @r4, align 4
  %v2_b410 = add i32 %v5_b408, %arg2
  store i32 %v2_b410, i32* %r1.global-to-local, align 4
  %v1_b414 = and i32 %v0_b40c, 65280
  store i32 %v1_b414, i32* %r3.global-to-local, align 4
  %v1_b40c = udiv i32 %v0_b40c, 256
  %v3_b418 = and i32 %v1_b40c, 65280
  store i32 %v3_b418, i32* %r2.global-to-local, align 4
  %v3_b41c = mul i32 %v0_b40c, 16777216
  store i32 %v3_b41c, i32* %ip.global-to-local, align 4
  %v1_b420 = add i32 %v2_b410, 20
  %v2_b420 = inttoptr i32 %v1_b420 to i8*
  %v3_b420 = load i8, i8* %v2_b420, align 1
  %v4_b420 = zext i8 %v3_b420 to i32
  store i32 %v4_b420, i32* %lr.global-to-local, align 4
  %v4_b424 = mul nuw nsw i32 %v1_b414, 256
  %v5_b424 = or i32 %v4_b424, %v3_b41c
  store i32 %v5_b424, i32* %ip.global-to-local, align 4
  %v2_b42c = call i32 @llvm.bswap.i32(i32 %v0_b40c)
  %v7_b430 = lshr i32 %v0_b3f8, %v4_b420
  %v8_b430 = add i32 %v7_b430, %v2_b42c
  store i32 %v8_b430, i32* %r2.global-to-local, align 4
  %v3_b43c = mul i32 %v8_b430, 16777216
  %v1_b440 = and i32 %v8_b430, 65280
  store i32 %v1_b440, i32* %r0.global-to-local, align 4
  %v4_b444 = mul nuw nsw i32 %v1_b440, 256
  %v5_b444 = or i32 %v4_b444, %v3_b43c
  store i32 %v5_b444, i32* %r1.global-to-local, align 4
  %v2_b44c = call i32 @llvm.bswap.i32(i32 %v8_b430)
  br label %dec_label_pc_b454

dec_label_pc_b454:                                ; preds = %dec_label_pc_b3a0, %dec_label_pc_b3f4
  %storemerge25 = phi i32 [ %v2_b44c, %dec_label_pc_b3f4 ], [ %v7_b3e8, %dec_label_pc_b3a0 ]
  store i32 %v3_b30c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b460, label %dec_label_pc_b574, label %dec_label_pc_b468

dec_label_pc_b468:                                ; preds = %dec_label_pc_b454
  store i32 %v8_b358, i32* %ip.global-to-local, align 4
  store i32 %v5_b474, i32* %r3.global-to-local, align 4
  store i32 %v3_b47893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b484

dec_label_pc_b484:                                ; preds = %dec_label_pc_b574, %dec_label_pc_b468
  %stack_var_-57.0 = phi i8 [ %v1_b57c, %dec_label_pc_b574 ], [ %v1_b47c, %dec_label_pc_b468 ]
  %storemerge = phi i8 [ %v1_b574, %dec_label_pc_b574 ], [ %v1_b480, %dec_label_pc_b468 ]
  store i32 %v2_b484, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b48c = load i32, i32* @r7, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  %v4_b490 = call i32 @function_11a0c(i32 %v0_b48c, %sockaddr* nonnull %v3_b490, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b498 = call i32 @function_1159c(i32* null)
  store i32 %v2_b498, i32* %r0.global-to-local, align 4
  store i32 %v2_b498, i32* @r4, align 4
  %v9_b4f8 = icmp eq i32 %tmp32, %storemerge25
  %v4_b51c = zext i8 %storemerge to i32
  %v4_b520 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_b4f8 to i32
  %v9_b50c = icmp eq i1 %v9_b4f8, false
  %v4_b528 = mul nuw nsw i32 %v4_b520, 256
  %v5_b528 = or i32 %v4_b528, %v4_b51c
  %v9_b52c = icmp eq i32 %v5_b528, %v5_b524
  br label %dec_label_pc_b4b4

dec_label_pc_b4a4:                                ; preds = %.thread23, %dec_label_pc_b514, %dec_label_pc_b544, %bb75
  %v2_b4a4 = call i32 @function_1159c(i32* null)
  %v0_b4a8 = load i32, i32* @r4, align 4
  %v2_b4a8 = sub i32 %v2_b4a4, %v0_b4a8
  store i32 %v2_b4a8, i32* %r0.global-to-local, align 4
  %v7_b4ac = icmp eq i32 %v2_b4a8, 10
  store i1 %v7_b4ac, i1* %cpsr_z.global-to-local, align 1
  %v8_b4b0 = icmp sgt i32 %v2_b4a8, 10
  br i1 %v8_b4b0, label %dec_label_pc_b558, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b4a4, %dec_label_pc_b484
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_b4c0, i32* %lr.global-to-local, align 4
  store i32 %v2_b4c4, i32* %ip.global-to-local, align 4
  store i32 %v2_b4c8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v7_b4dc = call i32 @function_11aec(i32 %v3_b308, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_b4c0, i32 %v2_b4c4)
  store i32 %v7_b4dc, i32* %r2.global-to-local, align 4
  %v7_b4e4 = icmp eq i32 %v7_b4dc, -1
  store i1 %v7_b4e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b4e4, label %dec_label_pc_b56c, label %dec_label_pc_b4f0

dec_label_pc_b4f0:                                ; preds = %dec_label_pc_b4b4
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_b504 = icmp eq i32 %v7_b4dc, 40
  store i1 %v7_b504, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_b4dc, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_b4f0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b4a4

bb75:                                             ; preds = %dec_label_pc_b4f0
  store i1 %v9_b50c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b50c, label %dec_label_pc_b4a4, label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %bb75
  store i32 %v4_b518, i32* %r1.global-to-local, align 4
  store i32 %v4_b51c, i32* %ip.global-to-local, align 4
  store i32 %v4_b520, i32* %r2.global-to-local, align 4
  store i32 %v5_b524, i32* %r3.global-to-local, align 4
  store i32 %v5_b528, i32* @r5, align 4
  store i1 %v9_b52c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b52c, label %dec_label_pc_b534, label %dec_label_pc_b4a4

dec_label_pc_b534:                                ; preds = %dec_label_pc_b514
  store i32 %v4_b534, i32* %r2.global-to-local, align 4
  store i32 %v1_b538, i32* %r3.global-to-local, align 4
  store i1 %v2_b53c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b53c, label %dec_label_pc_b588, label %dec_label_pc_b544

dec_label_pc_b544:                                ; preds = %dec_label_pc_b534
  store i1 %v2_b544, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b544, label %dec_label_pc_b4a4, label %dec_label_pc_b54c

dec_label_pc_b54c:                                ; preds = %dec_label_pc_b544
  %v0_b54c = load i32, i32* @r7, align 4
  store i32 %v0_b54c, i32* %r0.global-to-local, align 4
  %v1_b550 = call i32 @function_112cc(i32 %v0_b54c)
  store i32 %v1_b550, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b374

dec_label_pc_b558:                                ; preds = %dec_label_pc_b4a4
  %v0_b558 = load i32, i32* @r7, align 4
  store i32 %v0_b558, i32* %r0.global-to-local, align 4
  %v1_b55c = call i32 @function_112cc(i32 %v0_b558)
  store i32 %v1_b55c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b384

dec_label_pc_b564:                                ; preds = %dec_label_pc_b320
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v1_b568 = call i32 @function_112cc(i32 %v3_b308)
  store i32 %v1_b568, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b56c

dec_label_pc_b56c:                                ; preds = %dec_label_pc_b4b4, %dec_label_pc_b138, %dec_label_pc_b564
  %v29_b570 = phi i32 [ %v3_b308, %dec_label_pc_b138 ], [ %v1_b568, %dec_label_pc_b564 ], [ 0, %dec_label_pc_b4b4 ]
  ret i32 %v29_b570

dec_label_pc_b574:                                ; preds = %dec_label_pc_b454
  %v0_b574 = call i32 @function_e72c()
  %v1_b574 = trunc i32 %v0_b574 to i8
  store i32 %v0_b574, i32* %r0.global-to-local, align 4
  %v4_b578 = sdiv i32 %v0_b574, 256
  store i32 %v4_b578, i32* %r3.global-to-local, align 4
  %v1_b57c = trunc i32 %v4_b578 to i8
  br label %dec_label_pc_b484

dec_label_pc_b588:                                ; preds = %dec_label_pc_b534
  %v3_b588 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b588, i32* @r4, align 4
  store i32 %v2_b158, i32* %r2.global-to-local, align 4
  %v3_b590 = mul i32 %v3_b588, 16
  store i32 %v3_b590, i32* %ip.global-to-local, align 4
  %v3_b594 = add i32 %v3_b590, %v2_b158
  %v4_b594 = inttoptr i32 %v3_b594 to i32*
  store i32 %storemerge25, i32* %v4_b594, align 4
  %v0_b598 = load i32, i32* @r6, align 4
  %v1_b598 = add i32 %v0_b598, 4
  %v2_b598 = inttoptr i32 %v1_b598 to i32*
  %v3_b598 = load i32, i32* %v2_b598, align 4
  store i32 %v3_b598, i32* %r0.global-to-local, align 4
  %v1_b5a0 = and i32 %v3_b598, 65280
  store i32 %v1_b5a0, i32* %r1.global-to-local, align 4
  store i32 %v2_b158, i32* %lr.global-to-local, align 4
  %v3_b5a8 = mul i32 %v3_b598, 16777216
  %v4_b5b0 = mul nuw nsw i32 %v1_b5a0, 256
  %v5_b5b0 = or i32 %v4_b5b0, %v3_b5a8
  store i32 %v5_b5b0, i32* %r2.global-to-local, align 4
  %v1_b5b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b5b8 = add i32 %v1_b5b8, %v2_b158
  store i32 %v2_b5b8, i32* %ip.global-to-local, align 4
  %v2_b5bc = call i32 @llvm.bswap.i32(i32 %v3_b598)
  store i32 %v2_b5bc, i32* %r3.global-to-local, align 4
  %v2_b5c0 = add i32 %v2_b5b8, 4
  %v3_b5c0 = inttoptr i32 %v2_b5c0 to i32*
  store i32 %v2_b5bc, i32* %v3_b5c0, align 4
  %v0_b5c4 = load i32, i32* @r6, align 4
  %v1_b5c4 = add i32 %v0_b5c4, 8
  %v2_b5c4 = inttoptr i32 %v1_b5c4 to i32*
  %v3_b5c4 = load i32, i32* %v2_b5c4, align 4
  store i32 %v3_b5c4, i32* %r0.global-to-local, align 4
  %v1_b5cc = and i32 %v3_b5c4, 65280
  store i32 %v1_b5cc, i32* %r1.global-to-local, align 4
  %v3_b5d0 = mul i32 %v3_b5c4, 16777216
  %v4_b5d8 = mul nuw nsw i32 %v1_b5cc, 256
  %v5_b5d8 = or i32 %v4_b5d8, %v3_b5d0
  store i32 %v5_b5d8, i32* %r2.global-to-local, align 4
  %v2_b5e0 = call i32 @llvm.bswap.i32(i32 %v3_b5c4)
  store i32 %v2_b5e0, i32* %r3.global-to-local, align 4
  %v1_b5e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_b5e4 = add i32 %v1_b5e4, 8
  %v3_b5e4 = inttoptr i32 %v2_b5e4 to i32*
  store i32 %v2_b5e0, i32* %v3_b5e4, align 4
  %v0_b5e8 = load i32, i32* @r6, align 4
  %v1_b5e8 = inttoptr i32 %v0_b5e8 to i32*
  %v2_b5e8 = load i32, i32* %v1_b5e8, align 4
  %v3_b5ec = udiv i32 %v2_b5e8, 65536
  store i32 %v3_b5ec, i32* %r2.global-to-local, align 4
  %v3_b5f03 = udiv i32 %v2_b5e8, 16777216
  store i32 %v3_b5f03, i32* %r1.global-to-local, align 4
  %v0_b5f4 = load i32, i32* @r5, align 4
  %v3_b5f4 = sdiv i32 %v0_b5f4, 256
  store i32 %v3_b5f4, i32* %r3.global-to-local, align 4
  %v1_b5f8 = trunc i32 %v3_b5f4 to i8
  %v2_b5f8 = load i32, i32* %ip.global-to-local, align 4
  %v3_b5f8 = add i32 %v2_b5f8, 15
  %v4_b5f8 = inttoptr i32 %v3_b5f8 to i8*
  store i8 %v1_b5f8, i8* %v4_b5f8, align 1
  %v0_b5fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b5fc = trunc i32 %v0_b5fc to i8
  %v2_b5fc = load i32, i32* %ip.global-to-local, align 4
  %v3_b5fc = add i32 %v2_b5fc, 13
  %v4_b5fc = inttoptr i32 %v3_b5fc to i8*
  store i8 %v1_b5fc, i8* %v4_b5fc, align 1
  %v0_b600 = load i32, i32* %r2.global-to-local, align 4
  %v1_b600 = trunc i32 %v0_b600 to i8
  %v2_b600 = load i32, i32* %ip.global-to-local, align 4
  %v3_b600 = add i32 %v2_b600, 12
  %v4_b600 = inttoptr i32 %v3_b600 to i8*
  store i8 %v1_b600, i8* %v4_b600, align 1
  %v0_b604 = load i32, i32* @r5, align 4
  %v1_b604 = trunc i32 %v0_b604 to i8
  %v2_b604 = load i32, i32* %ip.global-to-local, align 4
  %v3_b604 = add i32 %v2_b604, 14
  %v4_b604 = inttoptr i32 %v3_b604 to i8*
  store i8 %v1_b604, i8* %v4_b604, align 1
  %v0_b608 = load i32, i32* @sl, align 4
  store i32 %v0_b608, i32* %r0.global-to-local, align 4
  %v1_b60c = call i32 @function_11d48(i32 %v0_b608)
  store i32 %v1_b60c, i32* %r0.global-to-local, align 4
  store i32 %v2_b168, i32* %r1.global-to-local, align 4
  %v3_b614 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b614, i32* %r2.global-to-local, align 4
  %v2_b618 = load i32, i32* @r4, align 4
  %v5_b618 = mul i32 %v2_b618, 4
  %v6_b618 = add i32 %v5_b618, %v2_b168
  %v7_b618 = inttoptr i32 %v6_b618 to i32*
  store i32 %v1_b60c, i32* %v7_b618, align 4
  %v0_b61c = load i32, i32* %r1.global-to-local, align 4
  %v1_b61c = load i32, i32* %r2.global-to-local, align 4
  %v4_b61c = mul i32 %v1_b61c, 4
  %v5_b61c = add i32 %v4_b61c, %v0_b61c
  %v6_b61c = inttoptr i32 %v5_b61c to i32*
  %v7_b61c = load i32, i32* %v6_b61c, align 4
  store i32 %v7_b61c, i32* @r4, align 4
  %v1_b620 = inttoptr i32 %v7_b61c to i8*
  %v2_b620 = load i8, i8* %v1_b620, align 1
  %tmp100 = urem i8 %v2_b620, 16
  %v1_b624 = zext i8 %tmp100 to i32
  %v1_b628 = or i32 %v1_b624, 64
  store i32 %v1_b628, i32* %r3.global-to-local, align 4
  %v1_b62c = trunc i32 %v1_b628 to i8
  store i8 %v1_b62c, i8* %v1_b620, align 1
  %v0_b630 = load i32, i32* @r4, align 4
  %v1_b630 = inttoptr i32 %v0_b630 to i8*
  %v2_b630 = load i8, i8* %v1_b630, align 1
  store i32 %v3_b350, i32* %ip.global-to-local, align 4
  %v1_b63c = and i8 %v2_b630, -16
  %v1_b644 = or i8 %v1_b63c, 5
  store i32 %v5_b648, i32* %r0.global-to-local, align 4
  %v0_b64c = load i32, i32* @sl, align 4
  %v3_b64c = mul i32 %v0_b64c, 65536
  store i32 %v3_b64c, i32* %r2.global-to-local, align 4
  store i32 %v1_b1e8, i32* %lr.global-to-local, align 4
  store i8 %v1_b644, i8* %v1_b630, align 1
  store i32 %v4_b658, i32* %r1.global-to-local, align 4
  %v0_b65c = load i32, i32* %r2.global-to-local, align 4
  %v3_b65c = udiv i32 %v0_b65c, 65536
  %v1_b660 = urem i32 %v3_b65c, 256
  store i32 %v1_b660, i32* %r3.global-to-local, align 4
  %v3_b664 = udiv i32 %v0_b65c, 16777216
  store i32 %v3_b664, i32* %r2.global-to-local, align 4
  %v2_b668 = load i32, i32* @r4, align 4
  %v3_b668 = add i32 %v2_b668, 1
  %v4_b668 = inttoptr i32 %v3_b668 to i8*
  store i8 %v1_b668, i8* %v4_b668, align 1
  %v0_b66c = load i32, i32* %r2.global-to-local, align 4
  %v1_b66c = load i32, i32* %r3.global-to-local, align 4
  %v4_b66c = mul i32 %v1_b66c, 256
  %v5_b66c = or i32 %v4_b66c, %v0_b66c
  store i32 %v5_b66c, i32* %r2.global-to-local, align 4
  %v1_b670 = trunc i32 %v0_b66c to i8
  %v2_b670 = load i32, i32* @r4, align 4
  %v3_b670 = add i32 %v2_b670, 2
  %v4_b670 = inttoptr i32 %v3_b670 to i8*
  store i8 %v1_b670, i8* %v4_b670, align 1
  %v0_b674 = load i32, i32* %lr.global-to-local, align 4
  %v2_b674 = icmp eq i32 %v0_b674, 0
  store i1 %v2_b674, i1* %cpsr_z.global-to-local, align 1
  %v0_b678 = load i32, i32* %r2.global-to-local, align 4
  %v3_b678 = sdiv i32 %v0_b678, 256
  store i32 %v3_b678, i32* %r3.global-to-local, align 4
  store i32 %v4_b67c, i32* %r2.global-to-local, align 4
  %v1_b680 = trunc i32 %v3_b678 to i8
  %v2_b680 = load i32, i32* @r4, align 4
  %v3_b680 = add i32 %v2_b680, 3
  %v4_b680 = inttoptr i32 %v3_b680 to i8*
  store i8 %v1_b680, i8* %v4_b680, align 1
  %v0_b684 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b684, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_b588
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_b588, %bb76
  %v0_b688 = load i32, i32* %r2.global-to-local, align 4
  %v1_b688 = trunc i32 %v0_b688 to i8
  %v2_b688 = load i32, i32* @r4, align 4
  %v3_b688 = add i32 %v2_b688, 8
  %v4_b688 = inttoptr i32 %v3_b688 to i8*
  store i8 %v1_b688, i8* %v4_b688, align 1
  %v0_b68c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b68c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_b68c = load i32, i32* %r3.global-to-local, align 4
  %v2_b68c = trunc i32 %v1_b68c to i8
  %v3_b68c = load i32, i32* @r4, align 4
  %v4_b68c = add i32 %v3_b68c, 6
  %v5_b68c = inttoptr i32 %v4_b68c to i8*
  store i8 %v2_b68c, i8* %v5_b68c, align 1
  %v0_b690.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b690.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_b698 = load i32, i32* @r4, align 4
  %v3_b698 = add i32 %v2_b698, 9
  %v4_b698 = inttoptr i32 %v3_b698 to i8*
  store i8 6, i8* %v4_b698, align 1
  %v0_b69c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b69c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_b69c = load i32, i32* %r2.global-to-local, align 4
  %v2_b69c = trunc i32 %v1_b69c to i8
  %v3_b69c = load i32, i32* @r4, align 4
  %v4_b69c = add i32 %v3_b69c, 7
  %v5_b69c = inttoptr i32 %v4_b69c to i8*
  store i8 %v2_b69c, i8* %v5_b69c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_b6a4 = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_b6a4, i32* %r3.global-to-local, align 4
  %v0_b6a8 = load i32, i32* %r0.global-to-local, align 4
  %v3_b6a8 = sdiv i32 %v0_b6a8, 256
  store i32 %v3_b6a8, i32* %ip.global-to-local, align 4
  %v1_b6ac = load i32, i32* @r4, align 4
  %v2_b6ac = add i32 %v1_b6ac, 12
  %v3_b6ac = inttoptr i32 %v2_b6ac to i32*
  store i32 %v2_b6a4, i32* %v3_b6ac, align 4
  %v0_b6b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6b0 = trunc i32 %v0_b6b0 to i8
  %v2_b6b0 = load i32, i32* @r4, align 4
  %v3_b6b0 = add i32 %v2_b6b0, 5
  %v4_b6b0 = inttoptr i32 %v3_b6b0 to i8*
  store i8 %v1_b6b0, i8* %v4_b6b0, align 1
  %v3_b6b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b6b4, i32* %r2.global-to-local, align 4
  store i32 %v2_b158, i32* %ip.global-to-local, align 4
  %v4_b6bc = mul i32 %v3_b6b4, 16
  %v5_b6bc = add i32 %v4_b6bc, %v2_b158
  %v6_b6bc = inttoptr i32 %v5_b6bc to i32*
  %v7_b6bc = load i32, i32* %v6_b6bc, align 4
  store i32 %v7_b6bc, i32* %r3.global-to-local, align 4
  %v0_b6c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_b6c0 = trunc i32 %v0_b6c0 to i8
  %v2_b6c0 = load i32, i32* @r4, align 4
  %v3_b6c0 = add i32 %v2_b6c0, 4
  %v4_b6c0 = inttoptr i32 %v3_b6c0 to i8*
  store i8 %v1_b6c0, i8* %v4_b6c0, align 1
  %v0_b6c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b6c4 = load i32, i32* @r4, align 4
  %v2_b6c4 = add i32 %v1_b6c4, 16
  %v3_b6c4 = inttoptr i32 %v2_b6c4 to i32*
  store i32 %v0_b6c4, i32* %v3_b6c4, align 4
  %v0_b6c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_b6c8 = mul i32 %v0_b6c8, 16
  %v1_b6cc = load i32, i32* %ip.global-to-local, align 4
  %v2_b6cc = add i32 %v1_b6cc, %v3_b6c8
  store i32 %v2_b6cc, i32* %r2.global-to-local, align 4
  %v1_b6d0 = add i32 %v2_b6cc, 13
  %v2_b6d0 = inttoptr i32 %v1_b6d0 to i8*
  %v3_b6d0 = load i8, i8* %v2_b6d0, align 1
  %v4_b6d0 = zext i8 %v3_b6d0 to i32
  store i32 %v4_b6d0, i32* %r1.global-to-local, align 4
  %v1_b6d4 = add i32 %v2_b6cc, 12
  %v2_b6d4 = inttoptr i32 %v1_b6d4 to i8*
  %v3_b6d4 = load i8, i8* %v2_b6d4, align 1
  %v4_b6d4 = zext i8 %v3_b6d4 to i32
  %v4_b6d8 = mul nuw nsw i32 %v4_b6d0, 256
  %v5_b6d8 = or i32 %v4_b6d4, %v4_b6d8
  store i32 %v5_b6d8, i32* %r3.global-to-local, align 4
  %v2_b6dc = load i32, i32* @r4, align 4
  %v3_b6dc = add i32 %v2_b6dc, 20
  %v4_b6dc = inttoptr i32 %v3_b6dc to i8*
  store i8 %v3_b6d4, i8* %v4_b6dc, align 1
  %v0_b6e0 = load i32, i32* @r4, align 4
  %v1_b6e0 = add i32 %v0_b6e0, 20
  store i32 %v1_b6e0, i32* @r6, align 4
  %v0_b6e4 = load i32, i32* %r3.global-to-local, align 4
  %v3_b6e4 = sdiv i32 %v0_b6e4, 256
  store i32 %v3_b6e4, i32* %r3.global-to-local, align 4
  %v1_b6e8 = trunc i32 %v3_b6e4 to i8
  %v3_b6e8 = add i32 %v0_b6e0, 21
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v0_b6ec = load i32, i32* @r6, align 4
  %v1_b6ec = add i32 %v0_b6ec, 13
  %v2_b6ec = inttoptr i32 %v1_b6ec to i8*
  %v3_b6ec = load i8, i8* %v2_b6ec, align 1
  %v4_b6ec = zext i8 %v3_b6ec to i32
  store i32 %v4_b6ec, i32* %r3.global-to-local, align 4
  %v0_b6f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6f0 = add i32 %v0_b6f0, 8
  %v2_b6f0 = inttoptr i32 %v1_b6f0 to i32*
  %v3_b6f0 = load i32, i32* %v2_b6f0, align 4
  store i32 %v3_b6f0, i32* %r1.global-to-local, align 4
  %v1_b6f4 = or i32 %v4_b6ec, 1
  store i32 %v1_b6f4, i32* %r3.global-to-local, align 4
  %v1_b6f8 = add i32 %v0_b6f0, 15
  %v2_b6f8 = inttoptr i32 %v1_b6f8 to i8*
  %v3_b6f8 = load i8, i8* %v2_b6f8, align 1
  %v4_b6f8 = zext i8 %v3_b6f8 to i32
  store i32 %v4_b6f8, i32* %ip.global-to-local, align 4
  %v1_b6fc = add i32 %v0_b6f0, 14
  %v2_b6fc = inttoptr i32 %v1_b6fc to i8*
  %v3_b6fc = load i8, i8* %v2_b6fc, align 1
  %v4_b6fc = zext i8 %v3_b6fc to i32
  store i32 %v4_b6fc, i32* %r0.global-to-local, align 4
  %v2_b700 = add i32 %v0_b6ec, 4
  %v3_b700 = inttoptr i32 %v2_b700 to i32*
  store i32 %v3_b6f0, i32* %v3_b700, align 4
  %v0_b704 = load i32, i32* %r2.global-to-local, align 4
  %v1_b704 = add i32 %v0_b704, 4
  %v2_b704 = inttoptr i32 %v1_b704 to i32*
  %v3_b704 = load i32, i32* %v2_b704, align 4
  store i32 %v3_b704, i32* %lr.global-to-local, align 4
  %v0_b708 = load i32, i32* %r3.global-to-local, align 4
  %v1_b708 = trunc i32 %v0_b708 to i8
  %v2_b708 = load i32, i32* @r6, align 4
  %v3_b708 = add i32 %v2_b708, 13
  %v4_b708 = inttoptr i32 %v3_b708 to i8*
  store i8 %v1_b708, i8* %v4_b708, align 1
  %v0_b70c = load i32, i32* @r6, align 4
  %v1_b70c = add i32 %v0_b70c, 12
  %v2_b70c = inttoptr i32 %v1_b70c to i8*
  %v3_b70c = load i8, i8* %v2_b70c, align 1
  %v4_b70c = zext i8 %v3_b70c to i32
  store i32 %v4_b70c, i32* %r2.global-to-local, align 4
  %v1_b710 = add i32 %v0_b70c, 13
  %v2_b710 = inttoptr i32 %v1_b710 to i8*
  %v3_b710 = load i8, i8* %v2_b710, align 1
  %v4_b710 = zext i8 %v3_b710 to i32
  %v0_b714 = load i32, i32* %r0.global-to-local, align 4
  %v1_b714 = load i32, i32* %ip.global-to-local, align 4
  %v4_b714 = mul i32 %v1_b714, 256
  %v5_b714 = or i32 %v4_b714, %v0_b714
  store i32 %v5_b714, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_b70c, 16
  %v1_b718 = zext i8 %tmp101 to i32
  %v3_b71c = sdiv i32 %v5_b714, 256
  store i32 %v3_b71c, i32* %r1.global-to-local, align 4
  %v1_b720 = or i32 %v1_b718, 128
  store i32 %v1_b720, i32* %r2.global-to-local, align 4
  %v1_b724 = or i32 %v4_b710, 16
  store i32 %v1_b724, i32* %r3.global-to-local, align 4
  %v1_b728 = trunc i32 %v3_b71c to i8
  %v3_b728 = add i32 %v0_b70c, 3
  %v4_b728 = inttoptr i32 %v3_b728 to i8*
  store i8 %v1_b728, i8* %v4_b728, align 1
  %v0_b72c = load i32, i32* %lr.global-to-local, align 4
  %v1_b72c = load i32, i32* @r6, align 4
  %v2_b72c = add i32 %v1_b72c, 8
  %v3_b72c = inttoptr i32 %v2_b72c to i32*
  store i32 %v0_b72c, i32* %v3_b72c, align 4
  %v0_b730 = load i32, i32* %r2.global-to-local, align 4
  %v1_b730 = trunc i32 %v0_b730 to i8
  %v2_b730 = load i32, i32* @r6, align 4
  %v3_b730 = add i32 %v2_b730, 12
  %v4_b730 = inttoptr i32 %v3_b730 to i8*
  store i8 %v1_b730, i8* %v4_b730, align 1
  %v0_b734 = load i32, i32* %r3.global-to-local, align 4
  %v1_b734 = trunc i32 %v0_b734 to i8
  %v2_b734 = load i32, i32* @r6, align 4
  %v3_b734 = add i32 %v2_b734, 13
  %v4_b734 = inttoptr i32 %v3_b734 to i8*
  store i8 %v1_b734, i8* %v4_b734, align 1
  %v0_b738 = load i32, i32* %r0.global-to-local, align 4
  %v1_b738 = trunc i32 %v0_b738 to i8
  %v2_b738 = load i32, i32* @r6, align 4
  %v3_b738 = add i32 %v2_b738, 2
  %v4_b738 = inttoptr i32 %v3_b738 to i8*
  store i8 %v1_b738, i8* %v4_b738, align 1
  %v0_b73c = call i32 @function_e72c()
  %v1_b73c = trunc i32 %v0_b73c to i8
  store i32 %v0_b73c, i32* %r0.global-to-local, align 4
  store i32 %v1_b220, i32* %lr.global-to-local, align 4
  %v0_b744 = load i32, i32* @r6, align 4
  %v1_b744 = add i32 %v0_b744, 13
  %v2_b744 = inttoptr i32 %v1_b744 to i8*
  %v3_b744 = load i8, i8* %v2_b744, align 1
  %v4_b744 = zext i8 %v3_b744 to i32
  store i32 %v1_b748, i32* %r2.global-to-local, align 4
  %v1_b74c = and i32 %v4_b744, 223
  %v5_b750 = or i32 %v1_b74c, %v4_b750
  store i32 %v5_b750, i32* %r3.global-to-local, align 4
  %v1_b754 = trunc i32 %v5_b750 to i8
  store i8 %v1_b754, i8* %v2_b744, align 1
  store i32 %v1_b240, i32* %r1.global-to-local, align 4
  %v0_b75c = load i32, i32* @r6, align 4
  %v1_b75c = add i32 %v0_b75c, 13
  %v2_b75c = inttoptr i32 %v1_b75c to i8*
  %v3_b75c = load i8, i8* %v2_b75c, align 1
  %v4_b75c = zext i8 %v3_b75c to i32
  store i32 %v1_b760, i32* %r3.global-to-local, align 4
  %v1_b764 = and i32 %v4_b75c, 239
  %v5_b768 = or i32 %v1_b764, %v4_b768
  store i32 %v5_b768, i32* %r2.global-to-local, align 4
  %v1_b76c = trunc i32 %v5_b768 to i8
  store i8 %v1_b76c, i8* %v2_b75c, align 1
  store i32 %v1_b260, i32* %ip.global-to-local, align 4
  %v0_b774 = load i32, i32* @r6, align 4
  %v1_b774 = add i32 %v0_b774, 13
  %v2_b774 = inttoptr i32 %v1_b774 to i8*
  %v3_b774 = load i8, i8* %v2_b774, align 1
  %v4_b774 = zext i8 %v3_b774 to i32
  store i32 %v1_b778, i32* %r2.global-to-local, align 4
  %v1_b77c = and i32 %v4_b774, 247
  %v5_b780 = or i32 %v1_b77c, %v4_b780
  store i32 %v5_b780, i32* %r3.global-to-local, align 4
  %v1_b784 = trunc i32 %v5_b780 to i8
  store i8 %v1_b784, i8* %v2_b774, align 1
  %v0_b78c = load i32, i32* @r6, align 4
  %v1_b78c = add i32 %v0_b78c, 13
  %v2_b78c = inttoptr i32 %v1_b78c to i8*
  %v3_b78c = load i8, i8* %v2_b78c, align 1
  %v4_b78c = zext i8 %v3_b78c to i32
  store i32 %v1_b790, i32* %r3.global-to-local, align 4
  %v1_b794 = and i32 %v4_b78c, 251
  %v5_b798 = or i32 %v1_b794, %v4_b798
  store i32 %v5_b798, i32* %r2.global-to-local, align 4
  %v1_b79c = trunc i32 %v5_b798 to i8
  store i8 %v1_b79c, i8* %v2_b78c, align 1
  store i32 %v1_b2a0, i32* %r1.global-to-local, align 4
  %v0_b7a4 = load i32, i32* @r6, align 4
  %v1_b7a4 = add i32 %v0_b7a4, 13
  %v2_b7a4 = inttoptr i32 %v1_b7a4 to i8*
  %v3_b7a4 = load i8, i8* %v2_b7a4, align 1
  %v4_b7a4 = zext i8 %v3_b7a4 to i32
  store i32 %v1_b7a8, i32* %r2.global-to-local, align 4
  %v1_b7ac = and i32 %v4_b7a4, 253
  %v4_b7b0 = or i32 %v1_b7ac, %v3_b7b0
  store i32 %v4_b7b0, i32* %r3.global-to-local, align 4
  %v1_b7b4 = trunc i32 %v4_b7b0 to i8
  store i8 %v1_b7b4, i8* %v2_b7a4, align 1
  %v0_b7b8 = load i32, i32* @r6, align 4
  %v1_b7b8 = add i32 %v0_b7b8, 13
  %v2_b7b8 = inttoptr i32 %v1_b7b8 to i8*
  %v3_b7b8 = load i8, i8* %v2_b7b8, align 1
  %v4_b7b8 = zext i8 %v3_b7b8 to i32
  %v0_b7bc = load i32, i32* @r8, align 4
  %v1_b7bc = urem i32 %v0_b7bc, 2
  %v1_b7c0 = and i32 %v4_b7b8, 254
  store i32 %v1_b7c0, i32* %r2.global-to-local, align 4
  %v4_b7c427 = udiv i32 %v0_b73c, 256
  %v2_b7c8 = or i32 %v1_b7c0, %v1_b7bc
  store i32 %v2_b7c8, i32* %r3.global-to-local, align 4
  %v1_b7cc = trunc i32 %v4_b7c427 to i8
  %v3_b7cc = add i32 %v0_b7b8, 15
  %v4_b7cc = inttoptr i32 %v3_b7cc to i8*
  store i8 %v1_b7cc, i8* %v4_b7cc, align 1
  %v3_b7d0 = load i32, i32* @r6, align 4
  %v4_b7d0 = add i32 %v3_b7d0, 14
  %v5_b7d0 = inttoptr i32 %v4_b7d0 to i8*
  store i8 %v1_b73c, i8* %v5_b7d0, align 1
  %v0_b7d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i8
  %v2_b7d4 = load i32, i32* @r6, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 13
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i8*
  store i8 %v1_b7d4, i8* %v4_b7d4, align 1
  %v0_b7d8 = load i32, i32* @r4, align 4
  %v1_b7d8 = add i32 %v0_b7d8, 40
  store i32 %v1_b7d8, i32* %r0.global-to-local, align 4
  %v0_b7dc = load i32, i32* @sb, align 4
  store i32 %v0_b7dc, i32* @r1, align 4
  %v1_b7e0 = inttoptr i32 %v1_b7d8 to i8*
  %v2_b7e0 = call i32 @function_e8ac(i8* %v1_b7e0)
  store i32 %v2_b7e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b7e4

dec_label_pc_b7e4:                                ; preds = %dec_label_pc_b384, %bb81
  %v3_b7e4 = load i32, i32* %stack_var_-40, align 4
  %v1_b7e8 = add i32 %v3_b7e4, 1
  store i32 %v1_b7e8, i32* %r3.global-to-local, align 4
  %v1_b7ec = load i32, i32* @fp, align 4
  %v9_b7ec = icmp eq i32 %v1_b7e8, %v1_b7ec
  store i1 %v9_b7ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b7e8, i32* %stack_var_-40, align 4
  %v5_b7f4 = icmp slt i32 %v1_b7e8, %v1_b7ec
  br i1 %v5_b7f4, label %dec_label_pc_b374, label %dec_label_pc_b7f8

dec_label_pc_b7f8:                                ; preds = %dec_label_pc_b7e4, %.thread18
  %v0_b80012 = phi i32 [ %v0_b348, %.thread18 ], [ %v1_b7ec, %dec_label_pc_b7e4 ]
  %v0_b7f8 = load i32, i32* @sb, align 4
  %v1_b7f8 = add i32 %v0_b7f8, 40
  store i32 %v1_b7f8, i32* @sl, align 4
  %v1_b7fc = add i32 %v0_b7f8, 20
  store i32 %v1_b7fc, i32* @r7, align 4
  %v2_b84c = icmp eq i32 %v1_b2f8, 0
  %v6_b82c = inttoptr i32 %v2_b168 to i32*
  %v3_b834 = icmp eq i32 %v3_b350, 65535
  br label %dec_label_pc_b800

dec_label_pc_b800:                                ; preds = %dec_label_pc_b85c, %dec_label_pc_b7f8
  %v0_b800 = phi i32 [ %v1_b93c, %dec_label_pc_b85c ], [ %v0_b80012, %dec_label_pc_b7f8 ]
  %v2_b800 = icmp eq i32 %v0_b800, 0
  store i1 %v2_b800, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_b800, 1
  br label %dec_label_pc_b808

dec_label_pc_b808:                                ; preds = %dec_label_pc_b808, %dec_label_pc_b800
  br i1 %tmp82, label %dec_label_pc_b808, label %dec_label_pc_b80c

dec_label_pc_b80c:                                ; preds = %dec_label_pc_b808
  %v0_b80c = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_b80c, 256
  %v1_b814 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_b80c, 256
  %v4_b818 = urem i32 %tmp84, 256
  %v5_b818 = or i32 %v4_b818, %v1_b814
  store i32 %v5_b818, i32* @r8, align 4
  store i32 %v2_b168, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b350, i32* %ip.global-to-local, align 4
  %v7_b82c = load i32, i32* %v6_b82c, align 4
  store i32 %v7_b82c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b834, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_b840 = add i32 %v7_b82c, 20
  store i32 %v1_b840, i32* @r5, align 4
  br i1 %v3_b834, label %dec_label_pc_b968, label %dec_label_pc_b848

dec_label_pc_b848:                                ; preds = %dec_label_pc_b948, %dec_label_pc_b80c
  %v0_b850 = phi i32 [ %v7_b954, %dec_label_pc_b948 ], [ %v7_b82c, %dec_label_pc_b80c ]
  store i32 %v1_b2f8, i32* %lr.global-to-local, align 4
  store i1 %v2_b84c, i1* %cpsr_z.global-to-local, align 1
  %v1_b850 = add i32 %v0_b850, 40
  store i32 %v1_b850, i32* %r0.global-to-local, align 4
  %v0_b854 = load i32, i32* @sb, align 4
  store i32 %v0_b854, i32* @r1, align 4
  br i1 %v2_b84c, label %dec_label_pc_b85c, label %dec_label_pc_b98c

dec_label_pc_b85c:                                ; preds = %dec_label_pc_b848, %dec_label_pc_b968, %dec_label_pc_b98c
  %v2_b85c = phi i32 [ %v0_b850, %dec_label_pc_b848 ], [ %v0_b980, %dec_label_pc_b968 ], [ %v2_b85c.pre, %dec_label_pc_b98c ]
  %v0_b85c = load i32, i32* @r6, align 4
  %v1_b85c = trunc i32 %v0_b85c to i8
  %v3_b85c = add i32 %v2_b85c, 10
  %v4_b85c = inttoptr i32 %v3_b85c to i8*
  store i8 %v1_b85c, i8* %v4_b85c, align 1
  %v0_b860 = load i32, i32* @r6, align 4
  %v1_b860 = trunc i32 %v0_b860 to i8
  %v2_b860 = load i32, i32* @r4, align 4
  %v3_b860 = add i32 %v2_b860, 11
  %v4_b860 = inttoptr i32 %v3_b860 to i8*
  store i8 %v1_b860, i8* %v4_b860, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b868 = load i32, i32* @r4, align 4
  store i32 %v0_b868, i32* @r0, align 4
  %v2_b86c = call i32 @function_d0b8(i32 %v0_b868, i32 20)
  %v3_b86c = trunc i32 %v2_b86c to i8
  store i32 %v2_b86c, i32* %r0.global-to-local, align 4
  %v3_b870 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b158, i32* %r2.global-to-local, align 4
  %v3_b878 = mul i32 %v3_b870, 16
  %v2_b87c = add i32 %v3_b878, %v2_b158
  store i32 %v2_b87c, i32* %r1.global-to-local, align 4
  %v1_b880 = add i32 %v2_b87c, 4
  %v2_b880 = inttoptr i32 %v1_b880 to i32*
  %v3_b880 = load i32, i32* %v2_b880, align 4
  %v3_b884 = mul i32 %v3_b880, 65536
  store i32 %v3_b884, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b880, 256
  %v1_b88c = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b880, 256
  %v4_b890 = urem i32 %tmp86, 256
  %v5_b890 = or i32 %v4_b890, %v1_b88c
  store i32 %v5_b890, i32* %r2.global-to-local, align 4
  %v1_b894 = add i32 %v3_b880, 1
  store i32 %v1_b894, i32* %r3.global-to-local, align 4
  store i32 %v1_b894, i32* %v2_b880, align 4
  %v0_b89c = load i32, i32* %r2.global-to-local, align 4
  %v1_b89c = load i32, i32* @r5, align 4
  %v2_b89c = add i32 %v1_b89c, 4
  %v3_b89c = inttoptr i32 %v2_b89c to i32*
  store i32 %v0_b89c, i32* %v3_b89c, align 4
  %v0_b8a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b8a0 = add i32 %v0_b8a0, 8
  %v2_b8a0 = inttoptr i32 %v1_b8a0 to i32*
  %v3_b8a0 = load i32, i32* %v2_b8a0, align 4
  %tmp87 = mul i32 %v3_b8a0, 256
  %v1_b8ac = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b8a0, 256
  %v4_b8b0 = urem i32 %tmp88, 256
  %v5_b8b0 = or i32 %v4_b8b0, %v1_b8ac
  store i32 %v5_b8b0, i32* %r2.global-to-local, align 4
  %v4_b8b428 = udiv i32 %v2_b86c, 256
  %v1_b8b8 = trunc i32 %v4_b8b428 to i8
  %v2_b8b8 = load i32, i32* @r4, align 4
  %v3_b8b8 = add i32 %v2_b8b8, 11
  %v4_b8b8 = inttoptr i32 %v3_b8b8 to i8*
  store i8 %v1_b8b8, i8* %v4_b8b8, align 1
  %v3_b8bc = load i32, i32* @r4, align 4
  %v4_b8bc = add i32 %v3_b8bc, 10
  %v5_b8bc = inttoptr i32 %v4_b8bc to i8*
  store i8 %v3_b86c, i8* %v5_b8bc, align 1
  %v0_b8c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8c0 = load i32, i32* @r5, align 4
  %v2_b8c0 = add i32 %v1_b8c0, 8
  %v3_b8c0 = inttoptr i32 %v2_b8c0 to i32*
  store i32 %v0_b8c0, i32* %v3_b8c0, align 4
  %v0_b8c4 = load i32, i32* @r5, align 4
  store i32 %v0_b8c4, i32* @r1, align 4
  %v0_b8c8 = load i32, i32* @r8, align 4
  store i32 %v0_b8c8, i32* %r2.global-to-local, align 4
  %v0_b8cc = load i32, i32* @r7, align 4
  store i32 %v0_b8cc, i32* %r3.global-to-local, align 4
  %v0_b8d0 = load i32, i32* @r4, align 4
  store i32 %v0_b8d0, i32* %r0.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @r6, align 4
  %v1_b8d4 = trunc i32 %v0_b8d4 to i8
  %v3_b8d4 = add i32 %v0_b8c4, 16
  %v4_b8d4 = inttoptr i32 %v3_b8d4 to i8*
  store i8 %v1_b8d4, i8* %v4_b8d4, align 1
  %v0_b8d8 = load i32, i32* @r6, align 4
  %v1_b8d8 = trunc i32 %v0_b8d8 to i8
  %v2_b8d8 = load i32, i32* @r5, align 4
  %v3_b8d8 = add i32 %v2_b8d8, 17
  %v4_b8d8 = inttoptr i32 %v3_b8d8 to i8*
  store i8 %v1_b8d8, i8* %v4_b8d8, align 1
  %v4_b8dc = call i32 @function_d114(i32 %v0_b8d0, i32 %v0_b8c4, i32 %v0_b8c8, i32 %v0_b8cc)
  %v5_b8dc = trunc i32 %v4_b8dc to i8
  store i32 %v4_b8dc, i32* %r0.global-to-local, align 4
  %v4_b8e029 = udiv i32 %v4_b8dc, 256
  %v1_b8e4 = trunc i32 %v4_b8e029 to i8
  %v2_b8e4 = load i32, i32* @r5, align 4
  %v3_b8e4 = add i32 %v2_b8e4, 17
  %v4_b8e4 = inttoptr i32 %v3_b8e4 to i8*
  store i8 %v1_b8e4, i8* %v4_b8e4, align 1
  %v3_b8e8 = load i32, i32* @r5, align 4
  %v4_b8e8 = add i32 %v3_b8e8, 16
  %v5_b8e8 = inttoptr i32 %v4_b8e8 to i8*
  store i8 %v5_b8dc, i8* %v5_b8e8, align 1
  %v3_b8ec = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b8ec, i32* %r3.global-to-local, align 4
  %v0_b8f0 = load i32, i32* @r4, align 4
  %v1_b8f0 = add i32 %v0_b8f0, 20
  %v2_b8f0 = inttoptr i32 %v1_b8f0 to i32*
  %v3_b8f0 = load i32, i32* %v2_b8f0, align 4
  %v5_b8f8 = mul i32 %v3_b8ec, 24
  %v3_b900 = udiv i32 %v3_b8f0, 65536
  store i32 %v3_b900, i32* %r2.global-to-local, align 4
  %v2_b904 = add i32 %v5_b8f8, %arg2
  store i32 %v2_b904, i32* %ip.global-to-local, align 4
  %v3_b9084 = udiv i32 %v3_b8f0, 16777216
  %v1_b90c = trunc i32 %v3_b9084 to i8
  %v3_b90c = add i32 %v2_b904, 3
  %v4_b90c = inttoptr i32 %v3_b90c to i8*
  store i8 %v1_b90c, i8* %v4_b90c, align 1
  %v0_b910 = load i32, i32* %r2.global-to-local, align 4
  %v1_b910 = trunc i32 %v0_b910 to i8
  %v2_b910 = load i32, i32* %ip.global-to-local, align 4
  %v3_b910 = add i32 %v2_b910, 2
  %v4_b910 = inttoptr i32 %v3_b910 to i8*
  store i8 %v1_b910, i8* %v4_b910, align 1
  %v0_b914 = load i32, i32* @r4, align 4
  store i32 %v0_b914, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v0_b920 = load i32, i32* @sl, align 4
  store i32 %v0_b920, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b928 = load i32, i32* %ip.global-to-local, align 4
  %v6_b930 = inttoptr i32 %v0_b914 to i32*
  %v7_b930 = call i32 @function_11b4c(i32 %v3_b308, i32* %v6_b930, i32 %v0_b920, i32 16384, i32 %v0_b928, i32 16)
  %v3_b934 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b934, i32* %r3.global-to-local, align 4
  %v1_b938 = add i32 %v3_b934, 1
  store i32 %v1_b938, i32* %r0.global-to-local, align 4
  %v1_b93c = load i32, i32* @fp, align 4
  %v9_b93c = icmp eq i32 %v1_b938, %v1_b93c
  store i1 %v9_b93c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b938, i32* %stack_var_-40, align 4
  %v6_b944 = icmp slt i32 %v1_b938, %v1_b93c
  br i1 %v6_b944, label %dec_label_pc_b948, label %dec_label_pc_b800

dec_label_pc_b948:                                ; preds = %dec_label_pc_b85c
  store i32 %v2_b168, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b350, i32* %ip.global-to-local, align 4
  %v4_b954 = mul i32 %v1_b938, 4
  %v5_b954 = add i32 %v4_b954, %v2_b168
  %v6_b954 = inttoptr i32 %v5_b954 to i32*
  %v7_b954 = load i32, i32* %v6_b954, align 4
  store i32 %v7_b954, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b834, i1* %cpsr_z.global-to-local, align 1
  %v1_b960 = add i32 %v7_b954, 20
  store i32 %v1_b960, i32* @r5, align 4
  br i1 %v3_b834, label %dec_label_pc_b968, label %dec_label_pc_b848

dec_label_pc_b968:                                ; preds = %dec_label_pc_b948, %dec_label_pc_b80c
  %v0_b968 = call i32 @function_e72c()
  %v1_b968 = trunc i32 %v0_b968 to i8
  store i32 %v1_b2f8, i32* %lr.global-to-local, align 4
  %v4_b970 = sdiv i32 %v0_b968, 256
  store i32 %v4_b970, i32* %r3.global-to-local, align 4
  store i1 %v2_b84c, i1* %cpsr_z.global-to-local, align 1
  %v3_b978 = load i32, i32* @r4, align 4
  %v4_b978 = add i32 %v3_b978, 4
  %v5_b978 = inttoptr i32 %v4_b978 to i8*
  store i8 %v1_b968, i8* %v5_b978, align 1
  %v0_b97c = load i32, i32* %r3.global-to-local, align 4
  %v1_b97c = trunc i32 %v0_b97c to i8
  %v2_b97c = load i32, i32* @r4, align 4
  %v3_b97c = add i32 %v2_b97c, 5
  %v4_b97c = inttoptr i32 %v3_b97c to i8*
  store i8 %v1_b97c, i8* %v4_b97c, align 1
  %v0_b980 = load i32, i32* @r4, align 4
  %v1_b980 = add i32 %v0_b980, 40
  store i32 %v1_b980, i32* %r0.global-to-local, align 4
  %v0_b984 = load i32, i32* @sb, align 4
  store i32 %v0_b984, i32* @r1, align 4
  %v0_b988 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b988, label %dec_label_pc_b85c, label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b848, %dec_label_pc_b968
  %v0_b98c = phi i32 [ %v1_b850, %dec_label_pc_b848 ], [ %v1_b980, %dec_label_pc_b968 ]
  %v1_b98c = inttoptr i32 %v0_b98c to i8*
  %v2_b98c = call i32 @function_e8ac(i8* %v1_b98c)
  store i32 %v2_b98c, i32* %r0.global-to-local, align 4
  %v2_b85c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b85c

; uselistorder directives
  uselistorder i32 %v0_b980, { 1, 0 }
  uselistorder i32 %v7_b954, { 1, 2, 0 }
  uselistorder i32 %v1_b93c, { 1, 2, 0 }
  uselistorder i32 %v1_b938, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_b8dc, { 0, 2, 1 }
  uselistorder i32 %v0_b8c4, { 1, 0, 2 }
  uselistorder i32 %v3_b8a0, { 1, 0 }
  uselistorder i32 %v3_b880, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b86c, { 0, 2, 1 }
  uselistorder i32 %v0_b850, { 1, 0 }
  uselistorder i32 %v0_b80c, { 1, 0 }
  uselistorder i32 %v0_b800, { 1, 0 }
  uselistorder i1 %v3_b834, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b7e8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b73c, { 0, 2, 1 }
  uselistorder i32 %v3_b71c, { 1, 0 }
  uselistorder i32 %v0_b6f0, { 1, 0, 2 }
  uselistorder i32 %v3_b6e4, { 1, 0 }
  uselistorder i32 %v3_b678, { 1, 0 }
  uselistorder i32 %v0_b66c, { 1, 0 }
  uselistorder i32 %v3_b5f4, { 1, 0 }
  uselistorder i32 %v2_b5e0, { 1, 0 }
  uselistorder i32 %v3_b5c4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_b5bc, { 1, 0 }
  uselistorder i32 %v3_b598, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b590, { 1, 0 }
  uselistorder i32 %v4_b578, { 1, 0 }
  uselistorder i32 %v0_b574, { 0, 2, 1 }
  uselistorder i1 %v7_b4e4, { 1, 0 }
  uselistorder i32 %v7_b4dc, { 0, 2, 1, 3 }
  uselistorder i32 %v5_b528, { 1, 0 }
  uselistorder i1 %v9_b50c, { 1, 0 }
  uselistorder i32 %v4_b520, { 1, 0 }
  uselistorder i32 %v4_b51c, { 1, 0 }
  uselistorder i32 %v8_b430, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b41c, { 1, 0 }
  uselistorder i32 %v0_b40c, { 2, 0, 1, 3 }
  uselistorder i1 %v7_b394, { 1, 0 }
  uselistorder i32 %v3_b390, { 2, 1, 0, 3 }
  uselistorder i32 %v1_b7a8, { 1, 0 }
  uselistorder i32 %v1_b790, { 1, 0 }
  uselistorder i32 %v1_b778, { 1, 0 }
  uselistorder i32 %v1_b760, { 1, 0 }
  uselistorder i32 %v1_b748, { 1, 0 }
  uselistorder i32 %v5_b524, { 1, 0 }
  uselistorder i32 %v3_b47893, { 1, 0 }
  uselistorder i1 %v2_b53c, { 1, 0 }
  uselistorder i32 %v1_b538, { 1, 0 }
  uselistorder i32 %v4_b534, { 2, 0, 1 }
  uselistorder i32 %v4_b518, { 1, 0 }
  uselistorder i1 %v3_b460, { 1, 0 }
  uselistorder i32 %v8_b35c, { 2, 1, 0 }
  uselistorder i32 %v8_b358, { 1, 2, 0 }
  uselistorder i32 %v3_b350, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_b34c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b340, { 1, 0 }
  uselistorder i1 %v7_b310, { 1, 0 }
  uselistorder i32 %v3_b30c, { 2, 0, 1 }
  uselistorder i32 %v3_b308, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b2f8, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b2a0, { 1, 0 }
  uselistorder i32 %v1_b260, { 1, 0 }
  uselistorder i32 %v1_b240, { 1, 0 }
  uselistorder i32 %v1_b220, { 1, 0 }
  uselistorder i32 %v1_b1e8, { 1, 0 }
  uselistorder i32 %v2_b168, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b158, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b13c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 62, 35, 34, 36, 37, 39, 38, 43, 40, 41, 42, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_b98c, { 1, 0 }
  uselistorder label %dec_label_pc_b85c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b7e4, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_b56c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b4a4, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b454, { 1, 0 }
}

define i32 @function_b998(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b998:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b99c = urem i32 %arg1, 256
  store i32 %v1_b99c, i32* @fp, align 4
  store i32 %v1_b99c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b9b4 = urem i32 %arg3, 256
  store i32 %v1_b9b4, i32* @r4, align 4
  %v2_b9b8 = call i32 @function_11e9c(i32 %v1_b99c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b9c4 = load i32, i32* @fp, align 4
  store i32 %v0_b9c4, i32* %r0.global-to-local, align 4
  %v2_b9c8 = call i32 @function_11e9c(i32 %v0_b9c4, i32 4)
  %v0_b9cc = load i32, i32* @r5, align 4
  store i32 %v0_b9cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b9dc = load i32, i32* @r4, align 4
  store i32 %v0_b9dc, i32* %r0.global-to-local, align 4
  %v5_b9e0 = inttoptr i32 %v0_b9cc to i32*
  %v6_b9e0 = call i32 @function_85e0(i32 %v0_b9dc, i32* %v5_b9e0, i32 2, i32 0)
  %v1_b9ec = urem i32 %v6_b9e0, 256
  store i32 %v1_b9ec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b9f8 = load i32, i32* @r5, align 4
  store i32 %v0_b9f8, i32* %r1.global-to-local, align 4
  %v0_b9fc = load i32, i32* @r4, align 4
  store i32 %v0_b9fc, i32* %r0.global-to-local, align 4
  %v6_ba04 = inttoptr i32 %v0_b9f8 to i32*
  %v7_ba04 = call i32 @function_85e0(i32 %v0_b9fc, i32* %v6_ba04, i32 3, i32 65535)
  %v0_ba08 = load i32, i32* @r5, align 4
  store i32 %v0_ba08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ba04, i32* @r6, align 4
  %v0_ba18 = load i32, i32* @r4, align 4
  store i32 %v0_ba18, i32* %r0.global-to-local, align 4
  %v4_ba1c = inttoptr i32 %v0_ba08 to i32*
  %v5_ba1c = call i32 @function_85e0(i32 %v0_ba18, i32* %v4_ba1c, i32 4, i32 64)
  %v1_ba24 = urem i32 %v5_ba1c, 256
  store i32 %v1_ba24, i32* %ip.global-to-local, align 4
  %v0_ba28 = load i32, i32* @r5, align 4
  store i32 %v0_ba28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ba34 = load i32, i32* @r4, align 4
  store i32 %v0_ba34, i32* %r0.global-to-local, align 4
  %v6_ba3c = inttoptr i32 %v0_ba28 to i32*
  %v7_ba3c = call i32 @function_85e0(i32 %v0_ba34, i32* %v6_ba3c, i32 5, i32 1)
  %v1_ba48 = urem i32 %v7_ba3c, 256
  store i32 %v1_ba48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ba50 = load i32, i32* @r5, align 4
  store i32 %v0_ba50, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ba58 = load i32, i32* @r4, align 4
  store i32 %v0_ba58, i32* %r0.global-to-local, align 4
  %v5_ba60 = inttoptr i32 %v0_ba50 to i32*
  %v6_ba60 = call i32 @function_85e0(i32 %v0_ba58, i32* %v5_ba60, i32 7, i32 65535)
  %v0_ba64 = load i32, i32* @r5, align 4
  store i32 %v0_ba64, i32* %r1.global-to-local, align 4
  %v3_ba68 = mul i32 %v6_ba60, 65536
  store i32 %v3_ba68, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ba74 = load i32, i32* @r4, align 4
  store i32 %v0_ba74, i32* %r0.global-to-local, align 4
  %v4_ba78 = inttoptr i32 %v0_ba64 to i32*
  %v5_ba78 = call i32 @function_85e0(i32 %v0_ba74, i32* %v4_ba78, i32 11, i32 0)
  %v1_ba80 = urem i32 %v5_ba78, 256
  store i32 %v1_ba80, i32* %ip.global-to-local, align 4
  %v0_ba84 = load i32, i32* @r5, align 4
  store i32 %v0_ba84, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ba90 = load i32, i32* @r4, align 4
  store i32 %v0_ba90, i32* %r0.global-to-local, align 4
  %v5_ba98 = inttoptr i32 %v0_ba84 to i32*
  %v6_ba98 = call i32 @function_85e0(i32 %v0_ba90, i32* %v5_ba98, i32 12, i32 1)
  %v1_baa0 = urem i32 %v6_ba98, 256
  store i32 %v1_baa0, i32* %ip.global-to-local, align 4
  %v0_baa4 = load i32, i32* @r5, align 4
  store i32 %v0_baa4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bab0 = load i32, i32* @r4, align 4
  store i32 %v0_bab0, i32* %r0.global-to-local, align 4
  %v5_bab8 = inttoptr i32 %v0_baa4 to i32*
  %v6_bab8 = call i32 @function_85e0(i32 %v0_bab0, i32* %v5_bab8, i32 13, i32 1)
  %v1_bac0 = urem i32 %v6_bab8, 256
  store i32 %v1_bac0, i32* %ip.global-to-local, align 4
  %v0_bac4 = load i32, i32* @r5, align 4
  store i32 %v0_bac4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bad0 = load i32, i32* @r4, align 4
  store i32 %v0_bad0, i32* %r0.global-to-local, align 4
  %v5_bad8 = inttoptr i32 %v0_bac4 to i32*
  %v6_bad8 = call i32 @function_85e0(i32 %v0_bad0, i32* %v5_bad8, i32 14, i32 0)
  %v1_bae0 = urem i32 %v6_bad8, 256
  store i32 %v1_bae0, i32* %ip.global-to-local, align 4
  %v0_bae4 = load i32, i32* @r5, align 4
  store i32 %v0_bae4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_baf0 = load i32, i32* @r4, align 4
  store i32 %v0_baf0, i32* %r0.global-to-local, align 4
  %v5_baf8 = inttoptr i32 %v0_bae4 to i32*
  %v6_baf8 = call i32 @function_85e0(i32 %v0_baf0, i32* %v5_baf8, i32 15, i32 0)
  %v1_bb00 = urem i32 %v6_baf8, 256
  store i32 %v1_bb00, i32* %ip.global-to-local, align 4
  %v0_bb04 = load i32, i32* @r5, align 4
  store i32 %v0_bb04, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb10 = load i32, i32* @r4, align 4
  store i32 %v0_bb10, i32* %r0.global-to-local, align 4
  %v5_bb18 = inttoptr i32 %v0_bb04 to i32*
  %v6_bb18 = call i32 @function_85e0(i32 %v0_bb10, i32* %v5_bb18, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_bb18, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_bb28 = load i32, i32* @r5, align 4
  store i32 %v0_bb28, i32* %r1.global-to-local, align 4
  %v0_bb2c = load i32, i32* @r4, align 4
  store i32 %v0_bb2c, i32* %r0.global-to-local, align 4
  %v1_bb30 = urem i32 %v6_bb18, 256
  store i32 %v1_bb30, i32* @r8, align 4
  %v4_bb34 = inttoptr i32 %v0_bb28 to i32*
  %v5_bb34 = call i32 @function_85e0(i32 %v0_bb2c, i32* %v4_bb34, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bb40 = load i32, i32* @r5, align 4
  store i32 %v0_bb40, i32* %r1.global-to-local, align 4
  store i32 %v5_bb34, i32* @sb, align 4
  %v0_bb48 = load i32, i32* @r4, align 4
  store i32 %v0_bb48, i32* %r0.global-to-local, align 4
  %v4_bb4c = inttoptr i32 %v0_bb40 to i32*
  %v5_bb4c = call i32 @function_85e0(i32 %v0_bb48, i32* %v4_bb4c, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_bb58 = urem i32 %v5_bb4c, 256
  store i32 %v1_bb58, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_bb68 = call i32 @function_11bb0(i32 2, i32 3, i32 6)
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r7, align 4
  %v3_bb6c = udiv i32 %v0_bb6c, 65536
  store i32 %v3_bb6c, i32* %r1.global-to-local, align 4
  %v7_bb70 = icmp eq i32 %v3_bb68, -1
  store i1 %v7_bb70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb70, label %dec_label_pc_bdcc, label %dec_label_pc_bb80

dec_label_pc_bb80:                                ; preds = %dec_label_pc_b998
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bb88 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bb88, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bb9c = call i32 @function_11b80(i32 %v3_bb68, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_bb9c, i32* %r0.global-to-local, align 4
  %v7_bba0 = icmp eq i32 %v6_bb9c, -1
  store i1 %v7_bba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bba0, label %dec_label_pc_bdc4, label %dec_label_pc_bba8

dec_label_pc_bba8:                                ; preds = %dec_label_pc_bb80
  %v0_bba8 = load i32, i32* @fp, align 4
  %v2_bba8 = icmp eq i32 %v0_bba8, 0
  store i1 %v2_bba8, i1* %cpsr_z.global-to-local, align 1
  %v0_bbac = load i32, i32* @r6, align 4
  %v3_bbac = mul i32 %v0_bbac, 65536
  store i32 %v3_bbac, i32* %r0.global-to-local, align 4
  %v3_bbb0 = urem i32 %v0_bbac, 65536
  store i32 %v3_bbb0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_bba8, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_bbd4.preheader

.thread18:                                        ; preds = %dec_label_pc_bba8
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c058

dec_label_pc_bbd4.preheader:                      ; preds = %dec_label_pc_bba8
  %v5_bbb8 = load i32, i32* @r7, align 4
  %v8_bbb8 = udiv i32 %v5_bbb8, 16777216
  %tmp73 = udiv i32 %v0_bbac, 256
  %v8_bbbc = urem i32 %tmp73, 256
  store i32 %v8_bbbc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_bcc0 = icmp ugt i32 %v0_bb6c, -65537
  %v2_bce4 = ptrtoint i32* %stack_var_-60 to i32
  %v3_bcf0 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_bd20 = ptrtoint i32* %stack_var_-76 to i32
  %v2_bd24 = ptrtoint i32* %stack_var_-44 to i32
  %v2_bd28 = ptrtoint i32* %stack_var_-332 to i32
  %v4_bd74 = zext i8 %tmp31 to i32
  %v4_bd78 = zext i8 %tmp30 to i32
  %v4_bd84 = mul nuw nsw i32 %v4_bd78, 256
  %v4_bd94 = zext i8 %tmp to i32
  %v1_bd98 = and i32 %v4_bd94, 18
  %v2_bd9c = icmp eq i32 %v1_bd98, 18
  %v1_bcd0 = mul nuw nsw i32 %v3_bb6c, 256
  %v4_bcd4 = and i32 %v1_bcd0, 65280
  %v5_bcd4 = or i32 %v8_bbb8, %v4_bcd4
  %v3_bcd893 = udiv i32 %v4_bcd4, 256
  %v1_bcdc = trunc i32 %v3_bcd893 to i8
  %v1_bea0 = mul i32 %v0_bbac, 256
  %v4_bea8 = and i32 %v1_bea0, 65280
  %sext = mul i32 %v6_b9e0, 16777216
  %v4_beb8 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_ba1c, 16777216
  %v4_bedc = sdiv i32 %sext5, 16777216
  %v5_bd84 = or i32 %v4_bd74, %v4_bd84
  %v1_bda4 = and i32 %v4_bd94, 5
  %v2_bda4 = icmp eq i32 %v1_bda4, 0
  %v1_bce0 = trunc i32 %v8_bbb8 to i8
  %v5_bea8 = or i32 %v8_bbbc, %v4_bea8
  %v1_bec8 = trunc i32 %v4_beb8 to i8
  %v1_bfa8 = urem i32 %v5_ba78, 2
  %tmp94 = sub nsw i32 0, %v1_bfa8
  %v4_bfb0 = and i32 %tmp94, 32
  %v1_bfc0 = urem i32 %v6_ba98, 2
  %tmp95 = sub nsw i32 0, %v1_bfc0
  %v4_bfc8 = and i32 %tmp95, 16
  %v1_bfd8 = urem i32 %v6_bab8, 2
  %tmp96 = sub nsw i32 0, %v1_bfd8
  %v4_bfe0 = and i32 %tmp96, 8
  %v1_bff0 = urem i32 %v6_bad8, 2
  %tmp97 = sub nsw i32 0, %v1_bff0
  %v4_bff8 = and i32 %tmp97, 4
  %v1_c008 = urem i32 %v6_baf8, 2
  %tmp98 = sub nsw i32 0, %v1_c008
  %v3_c010 = and i32 %tmp98, 2
  br label %dec_label_pc_bbd4

dec_label_pc_bbd4:                                ; preds = %dec_label_pc_c044, %dec_label_pc_bdac, %dec_label_pc_bbd4.preheader
  store i32 %v8_bbbc, i32* %r3.global-to-local, align 4
  %v0_bbe0 = load i32, i32* @sb, align 4
  %v1_bbe0 = add i32 %v0_bbe0, 40
  store i32 %v1_bbe0, i32* @sl, align 4
  br label %dec_label_pc_bbe4

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_bdb8, %dec_label_pc_bbd4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_bbf0 = call i32 @function_11bb0(i32 2, i32 1, i32 0)
  store i32 %v3_bbf0, i32* %r0.global-to-local, align 4
  %v7_bbf4 = icmp eq i32 %v3_bbf0, -1
  store i1 %v7_bbf4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bbf0, i32* @r7, align 4
  br i1 %v7_bbf4, label %dec_label_pc_c044, label %dec_label_pc_bc00

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bbe4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_bc08 = call i32 @function_11208(i32 %v3_bbf0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bc10 = or i32 %v2_bc08, 2048
  store i32 %v1_bc10, i32* @r2, align 4
  %v0_bc14 = load i32, i32* @r7, align 4
  store i32 %v0_bc14, i32* %r0.global-to-local, align 4
  %v2_bc18 = call i32 @function_11208(i32 %v0_bc14, i32 4)
  store i32 %v2_bc18, i32* %r0.global-to-local, align 4
  %v3_bc1c = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_bc2c = mul i32 %v3_bc1c, 24
  store i32 %v5_bc2c, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_bc3c = add i32 %v5_bc2c, %arg2
  store i32 %v2_bc3c, i32* %r2.global-to-local, align 4
  %v1_bc40 = add i32 %v2_bc3c, 20
  %v2_bc40 = inttoptr i32 %v1_bc40 to i8*
  %v3_bc40 = load i8, i8* %v2_bc40, align 1
  %v4_bc40 = zext i8 %v3_bc40 to i32
  store i32 %v4_bc40, i32* %r3.global-to-local, align 4
  %v2_bc44 = icmp ugt i8 %v3_bc40, 30
  %v7_bc44 = icmp eq i8 %v3_bc40, 31
  store i1 %v7_bc44, i1* %cpsr_z.global-to-local, align 1
  %v2_bc48 = xor i1 %v7_bc44, true
  %v3_bc48 = and i1 %v2_bc44, %v2_bc48
  %v5_bc48 = add i32 %v2_bc3c, 16
  %v6_bc48 = inttoptr i32 %v5_bc48 to i32*
  %v7_bc48 = load i32, i32* %v6_bc48, align 4
  br i1 %v3_bc48, label %dec_label_pc_bcb4, label %dec_label_pc_bc54

dec_label_pc_bc54:                                ; preds = %dec_label_pc_bc00
  store i32 %v7_bc48, i32* @r4, align 4
  %v0_bc58 = call i32 @function_e72c()
  store i32 %v0_bc58, i32* %r0.global-to-local, align 4
  %v3_bc5c = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_bc68 = mul i32 %v3_bc5c, 24
  %v0_bc6c = load i32, i32* @r4, align 4
  %v2_bc70 = add i32 %v5_bc68, %arg2
  store i32 %v2_bc70, i32* %r1.global-to-local, align 4
  %v1_bc74 = and i32 %v0_bc6c, 65280
  store i32 %v1_bc74, i32* %r3.global-to-local, align 4
  %v1_bc6c = udiv i32 %v0_bc6c, 256
  %v3_bc78 = and i32 %v1_bc6c, 65280
  store i32 %v3_bc78, i32* %r2.global-to-local, align 4
  %v3_bc7c = mul i32 %v0_bc6c, 16777216
  store i32 %v3_bc7c, i32* %ip.global-to-local, align 4
  %v1_bc80 = add i32 %v2_bc70, 20
  %v2_bc80 = inttoptr i32 %v1_bc80 to i8*
  %v3_bc80 = load i8, i8* %v2_bc80, align 1
  %v4_bc80 = zext i8 %v3_bc80 to i32
  store i32 %v4_bc80, i32* %lr.global-to-local, align 4
  %v4_bc84 = mul nuw nsw i32 %v1_bc74, 256
  %v5_bc84 = or i32 %v4_bc84, %v3_bc7c
  store i32 %v5_bc84, i32* %ip.global-to-local, align 4
  %v2_bc8c = call i32 @llvm.bswap.i32(i32 %v0_bc6c)
  %v7_bc90 = lshr i32 %v0_bc58, %v4_bc80
  %v8_bc90 = add i32 %v7_bc90, %v2_bc8c
  store i32 %v8_bc90, i32* %r2.global-to-local, align 4
  %v3_bc9c = mul i32 %v8_bc90, 16777216
  %v1_bca0 = and i32 %v8_bc90, 65280
  store i32 %v1_bca0, i32* %r0.global-to-local, align 4
  %v4_bca4 = mul nuw nsw i32 %v1_bca0, 256
  %v5_bca4 = or i32 %v4_bca4, %v3_bc9c
  store i32 %v5_bca4, i32* %r1.global-to-local, align 4
  %v2_bcac = call i32 @llvm.bswap.i32(i32 %v8_bc90)
  br label %dec_label_pc_bcb4

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_bc00, %dec_label_pc_bc54
  %storemerge25 = phi i32 [ %v2_bcac, %dec_label_pc_bc54 ], [ %v7_bc48, %dec_label_pc_bc00 ]
  store i32 %v3_bb6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bcc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bcc0, label %dec_label_pc_bdd4, label %dec_label_pc_bcc8

dec_label_pc_bcc8:                                ; preds = %dec_label_pc_bcb4
  store i32 %v8_bbb8, i32* %ip.global-to-local, align 4
  store i32 %v5_bcd4, i32* %r3.global-to-local, align 4
  store i32 %v3_bcd893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bce4

dec_label_pc_bce4:                                ; preds = %dec_label_pc_bdd4, %dec_label_pc_bcc8
  %stack_var_-57.0 = phi i8 [ %v1_bddc, %dec_label_pc_bdd4 ], [ %v1_bcdc, %dec_label_pc_bcc8 ]
  %storemerge = phi i8 [ %v1_bdd4, %dec_label_pc_bdd4 ], [ %v1_bce0, %dec_label_pc_bcc8 ]
  store i32 %v2_bce4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_bcec = load i32, i32* @r7, align 4
  store i32 %v0_bcec, i32* %r0.global-to-local, align 4
  %v4_bcf0 = call i32 @function_11a0c(i32 %v0_bcec, %sockaddr* nonnull %v3_bcf0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bcf8 = call i32 @function_1159c(i32* null)
  store i32 %v2_bcf8, i32* %r0.global-to-local, align 4
  store i32 %v2_bcf8, i32* @r4, align 4
  %v9_bd58 = icmp eq i32 %tmp32, %storemerge25
  %v4_bd7c = zext i8 %storemerge to i32
  %v4_bd80 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_bd58 to i32
  %v9_bd6c = icmp eq i1 %v9_bd58, false
  %v4_bd88 = mul nuw nsw i32 %v4_bd80, 256
  %v5_bd88 = or i32 %v4_bd88, %v4_bd7c
  %v9_bd8c = icmp eq i32 %v5_bd88, %v5_bd84
  br label %dec_label_pc_bd14

dec_label_pc_bd04:                                ; preds = %.thread23, %dec_label_pc_bd74, %dec_label_pc_bda4, %bb75
  %v2_bd04 = call i32 @function_1159c(i32* null)
  %v0_bd08 = load i32, i32* @r4, align 4
  %v2_bd08 = sub i32 %v2_bd04, %v0_bd08
  store i32 %v2_bd08, i32* %r0.global-to-local, align 4
  %v7_bd0c = icmp eq i32 %v2_bd08, 10
  store i1 %v7_bd0c, i1* %cpsr_z.global-to-local, align 1
  %v8_bd10 = icmp sgt i32 %v2_bd08, 10
  br i1 %v8_bd10, label %dec_label_pc_bdb8, label %dec_label_pc_bd14

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bce4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_bd20, i32* %lr.global-to-local, align 4
  store i32 %v2_bd24, i32* %ip.global-to-local, align 4
  store i32 %v2_bd28, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v7_bd3c = call i32 @function_11aec(i32 %v3_bb68, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_bd20, i32 %v2_bd24)
  store i32 %v7_bd3c, i32* %r2.global-to-local, align 4
  %v7_bd44 = icmp eq i32 %v7_bd3c, -1
  store i1 %v7_bd44, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_bd44, label %dec_label_pc_bdcc, label %dec_label_pc_bd50

dec_label_pc_bd50:                                ; preds = %dec_label_pc_bd14
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_bd64 = icmp eq i32 %v7_bd3c, 40
  store i1 %v7_bd64, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_bd3c, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_bd50
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bd04

bb75:                                             ; preds = %dec_label_pc_bd50
  store i1 %v9_bd6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd6c, label %dec_label_pc_bd04, label %dec_label_pc_bd74

dec_label_pc_bd74:                                ; preds = %bb75
  store i32 %v4_bd78, i32* %r1.global-to-local, align 4
  store i32 %v4_bd7c, i32* %ip.global-to-local, align 4
  store i32 %v4_bd80, i32* %r2.global-to-local, align 4
  store i32 %v5_bd84, i32* %r3.global-to-local, align 4
  store i32 %v5_bd88, i32* @r5, align 4
  store i1 %v9_bd8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd8c, label %dec_label_pc_bd94, label %dec_label_pc_bd04

dec_label_pc_bd94:                                ; preds = %dec_label_pc_bd74
  store i32 %v4_bd94, i32* %r2.global-to-local, align 4
  store i32 %v1_bd98, i32* %r3.global-to-local, align 4
  store i1 %v2_bd9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd9c, label %dec_label_pc_bde8, label %dec_label_pc_bda4

dec_label_pc_bda4:                                ; preds = %dec_label_pc_bd94
  store i1 %v2_bda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bda4, label %dec_label_pc_bd04, label %dec_label_pc_bdac

dec_label_pc_bdac:                                ; preds = %dec_label_pc_bda4
  %v0_bdac = load i32, i32* @r7, align 4
  store i32 %v0_bdac, i32* %r0.global-to-local, align 4
  %v1_bdb0 = call i32 @function_112cc(i32 %v0_bdac)
  store i32 %v1_bdb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbd4

dec_label_pc_bdb8:                                ; preds = %dec_label_pc_bd04
  %v0_bdb8 = load i32, i32* @r7, align 4
  store i32 %v0_bdb8, i32* %r0.global-to-local, align 4
  %v1_bdbc = call i32 @function_112cc(i32 %v0_bdb8)
  store i32 %v1_bdbc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbe4

dec_label_pc_bdc4:                                ; preds = %dec_label_pc_bb80
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v1_bdc8 = call i32 @function_112cc(i32 %v3_bb68)
  store i32 %v1_bdc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bdcc

dec_label_pc_bdcc:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_b998, %dec_label_pc_bdc4
  %v29_bdd0 = phi i32 [ %v3_bb68, %dec_label_pc_b998 ], [ %v1_bdc8, %dec_label_pc_bdc4 ], [ 0, %dec_label_pc_bd14 ]
  ret i32 %v29_bdd0

dec_label_pc_bdd4:                                ; preds = %dec_label_pc_bcb4
  %v0_bdd4 = call i32 @function_e72c()
  %v1_bdd4 = trunc i32 %v0_bdd4 to i8
  store i32 %v0_bdd4, i32* %r0.global-to-local, align 4
  %v4_bdd8 = sdiv i32 %v0_bdd4, 256
  store i32 %v4_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = trunc i32 %v4_bdd8 to i8
  br label %dec_label_pc_bce4

dec_label_pc_bde8:                                ; preds = %dec_label_pc_bd94
  %v3_bde8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bde8, i32* @r4, align 4
  store i32 %v2_b9b8, i32* %r2.global-to-local, align 4
  %v3_bdf0 = mul i32 %v3_bde8, 16
  store i32 %v3_bdf0, i32* %ip.global-to-local, align 4
  %v3_bdf4 = add i32 %v3_bdf0, %v2_b9b8
  %v4_bdf4 = inttoptr i32 %v3_bdf4 to i32*
  store i32 %storemerge25, i32* %v4_bdf4, align 4
  %v0_bdf8 = load i32, i32* @r6, align 4
  %v1_bdf8 = add i32 %v0_bdf8, 4
  %v2_bdf8 = inttoptr i32 %v1_bdf8 to i32*
  %v3_bdf8 = load i32, i32* %v2_bdf8, align 4
  store i32 %v3_bdf8, i32* %r0.global-to-local, align 4
  %v1_be00 = and i32 %v3_bdf8, 65280
  store i32 %v1_be00, i32* %r1.global-to-local, align 4
  store i32 %v2_b9b8, i32* %lr.global-to-local, align 4
  %v3_be08 = mul i32 %v3_bdf8, 16777216
  %v4_be10 = mul nuw nsw i32 %v1_be00, 256
  %v5_be10 = or i32 %v4_be10, %v3_be08
  store i32 %v5_be10, i32* %r2.global-to-local, align 4
  %v1_be18 = load i32, i32* %ip.global-to-local, align 4
  %v2_be18 = add i32 %v1_be18, %v2_b9b8
  store i32 %v2_be18, i32* %ip.global-to-local, align 4
  %v2_be1c = call i32 @llvm.bswap.i32(i32 %v3_bdf8)
  store i32 %v2_be1c, i32* %r3.global-to-local, align 4
  %v2_be20 = add i32 %v2_be18, 4
  %v3_be20 = inttoptr i32 %v2_be20 to i32*
  store i32 %v2_be1c, i32* %v3_be20, align 4
  %v0_be24 = load i32, i32* @r6, align 4
  %v1_be24 = add i32 %v0_be24, 8
  %v2_be24 = inttoptr i32 %v1_be24 to i32*
  %v3_be24 = load i32, i32* %v2_be24, align 4
  store i32 %v3_be24, i32* %r0.global-to-local, align 4
  %v1_be2c = and i32 %v3_be24, 65280
  store i32 %v1_be2c, i32* %r1.global-to-local, align 4
  %v3_be30 = mul i32 %v3_be24, 16777216
  %v4_be38 = mul nuw nsw i32 %v1_be2c, 256
  %v5_be38 = or i32 %v4_be38, %v3_be30
  store i32 %v5_be38, i32* %r2.global-to-local, align 4
  %v2_be40 = call i32 @llvm.bswap.i32(i32 %v3_be24)
  store i32 %v2_be40, i32* %r3.global-to-local, align 4
  %v1_be44 = load i32, i32* %ip.global-to-local, align 4
  %v2_be44 = add i32 %v1_be44, 8
  %v3_be44 = inttoptr i32 %v2_be44 to i32*
  store i32 %v2_be40, i32* %v3_be44, align 4
  %v0_be48 = load i32, i32* @r6, align 4
  %v1_be48 = inttoptr i32 %v0_be48 to i32*
  %v2_be48 = load i32, i32* %v1_be48, align 4
  %v3_be4c = udiv i32 %v2_be48, 65536
  store i32 %v3_be4c, i32* %r2.global-to-local, align 4
  %v3_be503 = udiv i32 %v2_be48, 16777216
  store i32 %v3_be503, i32* %r1.global-to-local, align 4
  %v0_be54 = load i32, i32* @r5, align 4
  %v3_be54 = sdiv i32 %v0_be54, 256
  store i32 %v3_be54, i32* %r3.global-to-local, align 4
  %v1_be58 = trunc i32 %v3_be54 to i8
  %v2_be58 = load i32, i32* %ip.global-to-local, align 4
  %v3_be58 = add i32 %v2_be58, 15
  %v4_be58 = inttoptr i32 %v3_be58 to i8*
  store i8 %v1_be58, i8* %v4_be58, align 1
  %v0_be5c = load i32, i32* %r1.global-to-local, align 4
  %v1_be5c = trunc i32 %v0_be5c to i8
  %v2_be5c = load i32, i32* %ip.global-to-local, align 4
  %v3_be5c = add i32 %v2_be5c, 13
  %v4_be5c = inttoptr i32 %v3_be5c to i8*
  store i8 %v1_be5c, i8* %v4_be5c, align 1
  %v0_be60 = load i32, i32* %r2.global-to-local, align 4
  %v1_be60 = trunc i32 %v0_be60 to i8
  %v2_be60 = load i32, i32* %ip.global-to-local, align 4
  %v3_be60 = add i32 %v2_be60, 12
  %v4_be60 = inttoptr i32 %v3_be60 to i8*
  store i8 %v1_be60, i8* %v4_be60, align 1
  %v0_be64 = load i32, i32* @r5, align 4
  %v1_be64 = trunc i32 %v0_be64 to i8
  %v2_be64 = load i32, i32* %ip.global-to-local, align 4
  %v3_be64 = add i32 %v2_be64, 14
  %v4_be64 = inttoptr i32 %v3_be64 to i8*
  store i8 %v1_be64, i8* %v4_be64, align 1
  %v0_be68 = load i32, i32* @sl, align 4
  store i32 %v0_be68, i32* %r0.global-to-local, align 4
  %v1_be6c = call i32 @function_11d48(i32 %v0_be68)
  store i32 %v1_be6c, i32* %r0.global-to-local, align 4
  store i32 %v2_b9c8, i32* %r1.global-to-local, align 4
  %v3_be74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_be74, i32* %r2.global-to-local, align 4
  %v2_be78 = load i32, i32* @r4, align 4
  %v5_be78 = mul i32 %v2_be78, 4
  %v6_be78 = add i32 %v5_be78, %v2_b9c8
  %v7_be78 = inttoptr i32 %v6_be78 to i32*
  store i32 %v1_be6c, i32* %v7_be78, align 4
  %v0_be7c = load i32, i32* %r1.global-to-local, align 4
  %v1_be7c = load i32, i32* %r2.global-to-local, align 4
  %v4_be7c = mul i32 %v1_be7c, 4
  %v5_be7c = add i32 %v4_be7c, %v0_be7c
  %v6_be7c = inttoptr i32 %v5_be7c to i32*
  %v7_be7c = load i32, i32* %v6_be7c, align 4
  store i32 %v7_be7c, i32* @r4, align 4
  %v1_be80 = inttoptr i32 %v7_be7c to i8*
  %v2_be80 = load i8, i8* %v1_be80, align 1
  %tmp100 = urem i8 %v2_be80, 16
  %v1_be84 = zext i8 %tmp100 to i32
  %v1_be88 = or i32 %v1_be84, 64
  store i32 %v1_be88, i32* %r3.global-to-local, align 4
  %v1_be8c = trunc i32 %v1_be88 to i8
  store i8 %v1_be8c, i8* %v1_be80, align 1
  %v0_be90 = load i32, i32* @r4, align 4
  %v1_be90 = inttoptr i32 %v0_be90 to i8*
  %v2_be90 = load i8, i8* %v1_be90, align 1
  store i32 %v3_bbb0, i32* %ip.global-to-local, align 4
  %v1_be9c = and i8 %v2_be90, -16
  %v1_bea4 = or i8 %v1_be9c, 5
  store i32 %v5_bea8, i32* %r0.global-to-local, align 4
  %v0_beac = load i32, i32* @sl, align 4
  %v3_beac = mul i32 %v0_beac, 65536
  store i32 %v3_beac, i32* %r2.global-to-local, align 4
  store i32 %v1_ba48, i32* %lr.global-to-local, align 4
  store i8 %v1_bea4, i8* %v1_be90, align 1
  store i32 %v4_beb8, i32* %r1.global-to-local, align 4
  %v0_bebc = load i32, i32* %r2.global-to-local, align 4
  %v3_bebc = udiv i32 %v0_bebc, 65536
  %v1_bec0 = urem i32 %v3_bebc, 256
  store i32 %v1_bec0, i32* %r3.global-to-local, align 4
  %v3_bec4 = udiv i32 %v0_bebc, 16777216
  store i32 %v3_bec4, i32* %r2.global-to-local, align 4
  %v2_bec8 = load i32, i32* @r4, align 4
  %v3_bec8 = add i32 %v2_bec8, 1
  %v4_bec8 = inttoptr i32 %v3_bec8 to i8*
  store i8 %v1_bec8, i8* %v4_bec8, align 1
  %v0_becc = load i32, i32* %r2.global-to-local, align 4
  %v1_becc = load i32, i32* %r3.global-to-local, align 4
  %v4_becc = mul i32 %v1_becc, 256
  %v5_becc = or i32 %v4_becc, %v0_becc
  store i32 %v5_becc, i32* %r2.global-to-local, align 4
  %v1_bed0 = trunc i32 %v0_becc to i8
  %v2_bed0 = load i32, i32* @r4, align 4
  %v3_bed0 = add i32 %v2_bed0, 2
  %v4_bed0 = inttoptr i32 %v3_bed0 to i8*
  store i8 %v1_bed0, i8* %v4_bed0, align 1
  %v0_bed4 = load i32, i32* %lr.global-to-local, align 4
  %v2_bed4 = icmp eq i32 %v0_bed4, 0
  store i1 %v2_bed4, i1* %cpsr_z.global-to-local, align 1
  %v0_bed8 = load i32, i32* %r2.global-to-local, align 4
  %v3_bed8 = sdiv i32 %v0_bed8, 256
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  store i32 %v4_bedc, i32* %r2.global-to-local, align 4
  %v1_bee0 = trunc i32 %v3_bed8 to i8
  %v2_bee0 = load i32, i32* @r4, align 4
  %v3_bee0 = add i32 %v2_bee0, 3
  %v4_bee0 = inttoptr i32 %v3_bee0 to i8*
  store i8 %v1_bee0, i8* %v4_bee0, align 1
  %v0_bee4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bee4, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_bde8
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_bde8, %bb76
  %v0_bee8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bee8 = trunc i32 %v0_bee8 to i8
  %v2_bee8 = load i32, i32* @r4, align 4
  %v3_bee8 = add i32 %v2_bee8, 8
  %v4_bee8 = inttoptr i32 %v3_bee8 to i8*
  store i8 %v1_bee8, i8* %v4_bee8, align 1
  %v0_beec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_beec, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_beec = load i32, i32* %r3.global-to-local, align 4
  %v2_beec = trunc i32 %v1_beec to i8
  %v3_beec = load i32, i32* @r4, align 4
  %v4_beec = add i32 %v3_beec, 6
  %v5_beec = inttoptr i32 %v4_beec to i8*
  store i8 %v2_beec, i8* %v5_beec, align 1
  %v0_bef0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bef0.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bef8 = load i32, i32* @r4, align 4
  %v3_bef8 = add i32 %v2_bef8, 9
  %v4_bef8 = inttoptr i32 %v3_bef8 to i8*
  store i8 6, i8* %v4_bef8, align 1
  %v0_befc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_befc, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_befc = load i32, i32* %r2.global-to-local, align 4
  %v2_befc = trunc i32 %v1_befc to i8
  %v3_befc = load i32, i32* @r4, align 4
  %v4_befc = add i32 %v3_befc, 7
  %v5_befc = inttoptr i32 %v4_befc to i8*
  store i8 %v2_befc, i8* %v5_befc, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_bf04 = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_bf04, i32* %r3.global-to-local, align 4
  %v0_bf08 = load i32, i32* %r0.global-to-local, align 4
  %v3_bf08 = sdiv i32 %v0_bf08, 256
  store i32 %v3_bf08, i32* %ip.global-to-local, align 4
  %v1_bf0c = load i32, i32* @r4, align 4
  %v2_bf0c = add i32 %v1_bf0c, 12
  %v3_bf0c = inttoptr i32 %v2_bf0c to i32*
  store i32 %v2_bf04, i32* %v3_bf0c, align 4
  %v0_bf10 = load i32, i32* %ip.global-to-local, align 4
  %v1_bf10 = trunc i32 %v0_bf10 to i8
  %v2_bf10 = load i32, i32* @r4, align 4
  %v3_bf10 = add i32 %v2_bf10, 5
  %v4_bf10 = inttoptr i32 %v3_bf10 to i8*
  store i8 %v1_bf10, i8* %v4_bf10, align 1
  %v3_bf14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf14, i32* %r2.global-to-local, align 4
  store i32 %v2_b9b8, i32* %ip.global-to-local, align 4
  %v4_bf1c = mul i32 %v3_bf14, 16
  %v5_bf1c = add i32 %v4_bf1c, %v2_b9b8
  %v6_bf1c = inttoptr i32 %v5_bf1c to i32*
  %v7_bf1c = load i32, i32* %v6_bf1c, align 4
  store i32 %v7_bf1c, i32* %r3.global-to-local, align 4
  %v0_bf20 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf20 = trunc i32 %v0_bf20 to i8
  %v2_bf20 = load i32, i32* @r4, align 4
  %v3_bf20 = add i32 %v2_bf20, 4
  %v4_bf20 = inttoptr i32 %v3_bf20 to i8*
  store i8 %v1_bf20, i8* %v4_bf20, align 1
  %v0_bf24 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf24 = load i32, i32* @r4, align 4
  %v2_bf24 = add i32 %v1_bf24, 16
  %v3_bf24 = inttoptr i32 %v2_bf24 to i32*
  store i32 %v0_bf24, i32* %v3_bf24, align 4
  %v0_bf28 = load i32, i32* %r2.global-to-local, align 4
  %v3_bf28 = mul i32 %v0_bf28, 16
  %v1_bf2c = load i32, i32* %ip.global-to-local, align 4
  %v2_bf2c = add i32 %v1_bf2c, %v3_bf28
  store i32 %v2_bf2c, i32* %r2.global-to-local, align 4
  %v1_bf30 = add i32 %v2_bf2c, 13
  %v2_bf30 = inttoptr i32 %v1_bf30 to i8*
  %v3_bf30 = load i8, i8* %v2_bf30, align 1
  %v4_bf30 = zext i8 %v3_bf30 to i32
  store i32 %v4_bf30, i32* %r1.global-to-local, align 4
  %v1_bf34 = add i32 %v2_bf2c, 12
  %v2_bf34 = inttoptr i32 %v1_bf34 to i8*
  %v3_bf34 = load i8, i8* %v2_bf34, align 1
  %v4_bf34 = zext i8 %v3_bf34 to i32
  %v4_bf38 = mul nuw nsw i32 %v4_bf30, 256
  %v5_bf38 = or i32 %v4_bf34, %v4_bf38
  store i32 %v5_bf38, i32* %r3.global-to-local, align 4
  %v2_bf3c = load i32, i32* @r4, align 4
  %v3_bf3c = add i32 %v2_bf3c, 20
  %v4_bf3c = inttoptr i32 %v3_bf3c to i8*
  store i8 %v3_bf34, i8* %v4_bf3c, align 1
  %v0_bf40 = load i32, i32* @r4, align 4
  %v1_bf40 = add i32 %v0_bf40, 20
  store i32 %v1_bf40, i32* @r6, align 4
  %v0_bf44 = load i32, i32* %r3.global-to-local, align 4
  %v3_bf44 = sdiv i32 %v0_bf44, 256
  store i32 %v3_bf44, i32* %r3.global-to-local, align 4
  %v1_bf48 = trunc i32 %v3_bf44 to i8
  %v3_bf48 = add i32 %v0_bf40, 21
  %v4_bf48 = inttoptr i32 %v3_bf48 to i8*
  store i8 %v1_bf48, i8* %v4_bf48, align 1
  %v0_bf4c = load i32, i32* @r6, align 4
  %v1_bf4c = add i32 %v0_bf4c, 13
  %v2_bf4c = inttoptr i32 %v1_bf4c to i8*
  %v3_bf4c = load i8, i8* %v2_bf4c, align 1
  %v4_bf4c = zext i8 %v3_bf4c to i32
  store i32 %v4_bf4c, i32* %r3.global-to-local, align 4
  %v0_bf50 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf50 = add i32 %v0_bf50, 8
  %v2_bf50 = inttoptr i32 %v1_bf50 to i32*
  %v3_bf50 = load i32, i32* %v2_bf50, align 4
  store i32 %v3_bf50, i32* %r1.global-to-local, align 4
  %v1_bf54 = or i32 %v4_bf4c, 1
  store i32 %v1_bf54, i32* %r3.global-to-local, align 4
  %v1_bf58 = add i32 %v0_bf50, 15
  %v2_bf58 = inttoptr i32 %v1_bf58 to i8*
  %v3_bf58 = load i8, i8* %v2_bf58, align 1
  %v4_bf58 = zext i8 %v3_bf58 to i32
  store i32 %v4_bf58, i32* %ip.global-to-local, align 4
  %v1_bf5c = add i32 %v0_bf50, 14
  %v2_bf5c = inttoptr i32 %v1_bf5c to i8*
  %v3_bf5c = load i8, i8* %v2_bf5c, align 1
  %v4_bf5c = zext i8 %v3_bf5c to i32
  store i32 %v4_bf5c, i32* %r0.global-to-local, align 4
  %v2_bf60 = add i32 %v0_bf4c, 4
  %v3_bf60 = inttoptr i32 %v2_bf60 to i32*
  store i32 %v3_bf50, i32* %v3_bf60, align 4
  %v0_bf64 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf64 = add i32 %v0_bf64, 4
  %v2_bf64 = inttoptr i32 %v1_bf64 to i32*
  %v3_bf64 = load i32, i32* %v2_bf64, align 4
  store i32 %v3_bf64, i32* %lr.global-to-local, align 4
  %v0_bf68 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf68 = trunc i32 %v0_bf68 to i8
  %v2_bf68 = load i32, i32* @r6, align 4
  %v3_bf68 = add i32 %v2_bf68, 13
  %v4_bf68 = inttoptr i32 %v3_bf68 to i8*
  store i8 %v1_bf68, i8* %v4_bf68, align 1
  %v0_bf6c = load i32, i32* @r6, align 4
  %v1_bf6c = add i32 %v0_bf6c, 12
  %v2_bf6c = inttoptr i32 %v1_bf6c to i8*
  %v3_bf6c = load i8, i8* %v2_bf6c, align 1
  %v4_bf6c = zext i8 %v3_bf6c to i32
  store i32 %v4_bf6c, i32* %r2.global-to-local, align 4
  %v1_bf70 = add i32 %v0_bf6c, 13
  %v2_bf70 = inttoptr i32 %v1_bf70 to i8*
  %v3_bf70 = load i8, i8* %v2_bf70, align 1
  %v4_bf70 = zext i8 %v3_bf70 to i32
  %v0_bf74 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf74 = load i32, i32* %ip.global-to-local, align 4
  %v4_bf74 = mul i32 %v1_bf74, 256
  %v5_bf74 = or i32 %v4_bf74, %v0_bf74
  store i32 %v5_bf74, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_bf6c, 16
  %v1_bf78 = zext i8 %tmp101 to i32
  %v3_bf7c = sdiv i32 %v5_bf74, 256
  store i32 %v3_bf7c, i32* %r1.global-to-local, align 4
  %v1_bf80 = or i32 %v1_bf78, 128
  store i32 %v1_bf80, i32* %r2.global-to-local, align 4
  %v1_bf84 = or i32 %v4_bf70, 16
  store i32 %v1_bf84, i32* %r3.global-to-local, align 4
  %v1_bf88 = trunc i32 %v3_bf7c to i8
  %v3_bf88 = add i32 %v0_bf6c, 3
  %v4_bf88 = inttoptr i32 %v3_bf88 to i8*
  store i8 %v1_bf88, i8* %v4_bf88, align 1
  %v0_bf8c = load i32, i32* %lr.global-to-local, align 4
  %v1_bf8c = load i32, i32* @r6, align 4
  %v2_bf8c = add i32 %v1_bf8c, 8
  %v3_bf8c = inttoptr i32 %v2_bf8c to i32*
  store i32 %v0_bf8c, i32* %v3_bf8c, align 4
  %v0_bf90 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf90 = trunc i32 %v0_bf90 to i8
  %v2_bf90 = load i32, i32* @r6, align 4
  %v3_bf90 = add i32 %v2_bf90, 12
  %v4_bf90 = inttoptr i32 %v3_bf90 to i8*
  store i8 %v1_bf90, i8* %v4_bf90, align 1
  %v0_bf94 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf94 = trunc i32 %v0_bf94 to i8
  %v2_bf94 = load i32, i32* @r6, align 4
  %v3_bf94 = add i32 %v2_bf94, 13
  %v4_bf94 = inttoptr i32 %v3_bf94 to i8*
  store i8 %v1_bf94, i8* %v4_bf94, align 1
  %v0_bf98 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf98 = trunc i32 %v0_bf98 to i8
  %v2_bf98 = load i32, i32* @r6, align 4
  %v3_bf98 = add i32 %v2_bf98, 2
  %v4_bf98 = inttoptr i32 %v3_bf98 to i8*
  store i8 %v1_bf98, i8* %v4_bf98, align 1
  %v0_bf9c = call i32 @function_e72c()
  %v1_bf9c = trunc i32 %v0_bf9c to i8
  store i32 %v0_bf9c, i32* %r0.global-to-local, align 4
  store i32 %v1_ba80, i32* %lr.global-to-local, align 4
  %v0_bfa4 = load i32, i32* @r6, align 4
  %v1_bfa4 = add i32 %v0_bfa4, 13
  %v2_bfa4 = inttoptr i32 %v1_bfa4 to i8*
  %v3_bfa4 = load i8, i8* %v2_bfa4, align 1
  %v4_bfa4 = zext i8 %v3_bfa4 to i32
  store i32 %v1_bfa8, i32* %r2.global-to-local, align 4
  %v1_bfac = and i32 %v4_bfa4, 223
  %v5_bfb0 = or i32 %v1_bfac, %v4_bfb0
  store i32 %v5_bfb0, i32* %r3.global-to-local, align 4
  %v1_bfb4 = trunc i32 %v5_bfb0 to i8
  store i8 %v1_bfb4, i8* %v2_bfa4, align 1
  store i32 %v1_baa0, i32* %r1.global-to-local, align 4
  %v0_bfbc = load i32, i32* @r6, align 4
  %v1_bfbc = add i32 %v0_bfbc, 13
  %v2_bfbc = inttoptr i32 %v1_bfbc to i8*
  %v3_bfbc = load i8, i8* %v2_bfbc, align 1
  %v4_bfbc = zext i8 %v3_bfbc to i32
  store i32 %v1_bfc0, i32* %r3.global-to-local, align 4
  %v1_bfc4 = and i32 %v4_bfbc, 239
  %v5_bfc8 = or i32 %v1_bfc4, %v4_bfc8
  store i32 %v5_bfc8, i32* %r2.global-to-local, align 4
  %v1_bfcc = trunc i32 %v5_bfc8 to i8
  store i8 %v1_bfcc, i8* %v2_bfbc, align 1
  store i32 %v1_bac0, i32* %ip.global-to-local, align 4
  %v0_bfd4 = load i32, i32* @r6, align 4
  %v1_bfd4 = add i32 %v0_bfd4, 13
  %v2_bfd4 = inttoptr i32 %v1_bfd4 to i8*
  %v3_bfd4 = load i8, i8* %v2_bfd4, align 1
  %v4_bfd4 = zext i8 %v3_bfd4 to i32
  store i32 %v1_bfd8, i32* %r2.global-to-local, align 4
  %v1_bfdc = and i32 %v4_bfd4, 247
  %v5_bfe0 = or i32 %v1_bfdc, %v4_bfe0
  store i32 %v5_bfe0, i32* %r3.global-to-local, align 4
  %v1_bfe4 = trunc i32 %v5_bfe0 to i8
  store i8 %v1_bfe4, i8* %v2_bfd4, align 1
  %v0_bfec = load i32, i32* @r6, align 4
  %v1_bfec = add i32 %v0_bfec, 13
  %v2_bfec = inttoptr i32 %v1_bfec to i8*
  %v3_bfec = load i8, i8* %v2_bfec, align 1
  %v4_bfec = zext i8 %v3_bfec to i32
  store i32 %v1_bff0, i32* %r3.global-to-local, align 4
  %v1_bff4 = and i32 %v4_bfec, 251
  %v5_bff8 = or i32 %v1_bff4, %v4_bff8
  store i32 %v5_bff8, i32* %r2.global-to-local, align 4
  %v1_bffc = trunc i32 %v5_bff8 to i8
  store i8 %v1_bffc, i8* %v2_bfec, align 1
  store i32 %v1_bb00, i32* %r1.global-to-local, align 4
  %v0_c004 = load i32, i32* @r6, align 4
  %v1_c004 = add i32 %v0_c004, 13
  %v2_c004 = inttoptr i32 %v1_c004 to i8*
  %v3_c004 = load i8, i8* %v2_c004, align 1
  %v4_c004 = zext i8 %v3_c004 to i32
  store i32 %v1_c008, i32* %r2.global-to-local, align 4
  %v1_c00c = and i32 %v4_c004, 253
  %v4_c010 = or i32 %v1_c00c, %v3_c010
  store i32 %v4_c010, i32* %r3.global-to-local, align 4
  %v1_c014 = trunc i32 %v4_c010 to i8
  store i8 %v1_c014, i8* %v2_c004, align 1
  %v0_c018 = load i32, i32* @r6, align 4
  %v1_c018 = add i32 %v0_c018, 13
  %v2_c018 = inttoptr i32 %v1_c018 to i8*
  %v3_c018 = load i8, i8* %v2_c018, align 1
  %v4_c018 = zext i8 %v3_c018 to i32
  %v0_c01c = load i32, i32* @r8, align 4
  %v1_c01c = urem i32 %v0_c01c, 2
  %v1_c020 = and i32 %v4_c018, 254
  store i32 %v1_c020, i32* %r2.global-to-local, align 4
  %v4_c02427 = udiv i32 %v0_bf9c, 256
  %v2_c028 = or i32 %v1_c020, %v1_c01c
  store i32 %v2_c028, i32* %r3.global-to-local, align 4
  %v1_c02c = trunc i32 %v4_c02427 to i8
  %v3_c02c = add i32 %v0_c018, 15
  %v4_c02c = inttoptr i32 %v3_c02c to i8*
  store i8 %v1_c02c, i8* %v4_c02c, align 1
  %v3_c030 = load i32, i32* @r6, align 4
  %v4_c030 = add i32 %v3_c030, 14
  %v5_c030 = inttoptr i32 %v4_c030 to i8*
  store i8 %v1_bf9c, i8* %v5_c030, align 1
  %v0_c034 = load i32, i32* %r3.global-to-local, align 4
  %v1_c034 = trunc i32 %v0_c034 to i8
  %v2_c034 = load i32, i32* @r6, align 4
  %v3_c034 = add i32 %v2_c034, 13
  %v4_c034 = inttoptr i32 %v3_c034 to i8*
  store i8 %v1_c034, i8* %v4_c034, align 1
  %v0_c038 = load i32, i32* @r4, align 4
  %v1_c038 = add i32 %v0_c038, 40
  store i32 %v1_c038, i32* %r0.global-to-local, align 4
  %v0_c03c = load i32, i32* @sb, align 4
  store i32 %v0_c03c, i32* @r1, align 4
  %v1_c040 = inttoptr i32 %v1_c038 to i8*
  %v2_c040 = call i32 @function_e8ac(i8* %v1_c040)
  store i32 %v2_c040, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c044

dec_label_pc_c044:                                ; preds = %dec_label_pc_bbe4, %bb81
  %v3_c044 = load i32, i32* %stack_var_-40, align 4
  %v1_c048 = add i32 %v3_c044, 1
  store i32 %v1_c048, i32* %r3.global-to-local, align 4
  %v1_c04c = load i32, i32* @fp, align 4
  %v9_c04c = icmp eq i32 %v1_c048, %v1_c04c
  store i1 %v9_c04c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c048, i32* %stack_var_-40, align 4
  %v5_c054 = icmp slt i32 %v1_c048, %v1_c04c
  br i1 %v5_c054, label %dec_label_pc_bbd4, label %dec_label_pc_c058

dec_label_pc_c058:                                ; preds = %dec_label_pc_c044, %.thread18
  %v0_c06012 = phi i32 [ %v0_bba8, %.thread18 ], [ %v1_c04c, %dec_label_pc_c044 ]
  %v0_c058 = load i32, i32* @sb, align 4
  %v1_c058 = add i32 %v0_c058, 40
  store i32 %v1_c058, i32* @sl, align 4
  %v1_c05c = add i32 %v0_c058, 20
  store i32 %v1_c05c, i32* @r7, align 4
  %v2_c0ac = icmp eq i32 %v1_bb58, 0
  %v6_c08c = inttoptr i32 %v2_b9c8 to i32*
  %v3_c094 = icmp eq i32 %v3_bbb0, 65535
  br label %dec_label_pc_c060

dec_label_pc_c060:                                ; preds = %dec_label_pc_c0bc, %dec_label_pc_c058
  %v0_c060 = phi i32 [ %v1_c19c, %dec_label_pc_c0bc ], [ %v0_c06012, %dec_label_pc_c058 ]
  %v2_c060 = icmp eq i32 %v0_c060, 0
  store i1 %v2_c060, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_c060, 1
  br label %dec_label_pc_c068

dec_label_pc_c068:                                ; preds = %dec_label_pc_c068, %dec_label_pc_c060
  br i1 %tmp82, label %dec_label_pc_c068, label %dec_label_pc_c06c

dec_label_pc_c06c:                                ; preds = %dec_label_pc_c068
  %v0_c06c = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_c06c, 256
  %v1_c074 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_c06c, 256
  %v4_c078 = urem i32 %tmp84, 256
  %v5_c078 = or i32 %v4_c078, %v1_c074
  store i32 %v5_c078, i32* @r8, align 4
  store i32 %v2_b9c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_bbb0, i32* %ip.global-to-local, align 4
  %v7_c08c = load i32, i32* %v6_c08c, align 4
  store i32 %v7_c08c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c094, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_c0a0 = add i32 %v7_c08c, 20
  store i32 %v1_c0a0, i32* @r5, align 4
  br i1 %v3_c094, label %dec_label_pc_c1c8, label %dec_label_pc_c0a8

dec_label_pc_c0a8:                                ; preds = %dec_label_pc_c1a8, %dec_label_pc_c06c
  %v0_c0b0 = phi i32 [ %v7_c1b4, %dec_label_pc_c1a8 ], [ %v7_c08c, %dec_label_pc_c06c ]
  store i32 %v1_bb58, i32* %lr.global-to-local, align 4
  store i1 %v2_c0ac, i1* %cpsr_z.global-to-local, align 1
  %v1_c0b0 = add i32 %v0_c0b0, 40
  store i32 %v1_c0b0, i32* %r0.global-to-local, align 4
  %v0_c0b4 = load i32, i32* @sb, align 4
  store i32 %v0_c0b4, i32* @r1, align 4
  br i1 %v2_c0ac, label %dec_label_pc_c0bc, label %dec_label_pc_c1ec

dec_label_pc_c0bc:                                ; preds = %dec_label_pc_c0a8, %dec_label_pc_c1c8, %dec_label_pc_c1ec
  %v2_c0bc = phi i32 [ %v0_c0b0, %dec_label_pc_c0a8 ], [ %v0_c1e0, %dec_label_pc_c1c8 ], [ %v2_c0bc.pre, %dec_label_pc_c1ec ]
  %v0_c0bc = load i32, i32* @r6, align 4
  %v1_c0bc = trunc i32 %v0_c0bc to i8
  %v3_c0bc = add i32 %v2_c0bc, 10
  %v4_c0bc = inttoptr i32 %v3_c0bc to i8*
  store i8 %v1_c0bc, i8* %v4_c0bc, align 1
  %v0_c0c0 = load i32, i32* @r6, align 4
  %v1_c0c0 = trunc i32 %v0_c0c0 to i8
  %v2_c0c0 = load i32, i32* @r4, align 4
  %v3_c0c0 = add i32 %v2_c0c0, 11
  %v4_c0c0 = inttoptr i32 %v3_c0c0 to i8*
  store i8 %v1_c0c0, i8* %v4_c0c0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c0c8 = load i32, i32* @r4, align 4
  store i32 %v0_c0c8, i32* @r0, align 4
  %v2_c0cc = call i32 @function_d0b8(i32 %v0_c0c8, i32 20)
  %v3_c0cc = trunc i32 %v2_c0cc to i8
  store i32 %v2_c0cc, i32* %r0.global-to-local, align 4
  %v3_c0d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b9b8, i32* %r2.global-to-local, align 4
  %v3_c0d8 = mul i32 %v3_c0d0, 16
  %v2_c0dc = add i32 %v3_c0d8, %v2_b9b8
  store i32 %v2_c0dc, i32* %r1.global-to-local, align 4
  %v1_c0e0 = add i32 %v2_c0dc, 4
  %v2_c0e0 = inttoptr i32 %v1_c0e0 to i32*
  %v3_c0e0 = load i32, i32* %v2_c0e0, align 4
  %v3_c0e4 = mul i32 %v3_c0e0, 65536
  store i32 %v3_c0e4, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_c0e0, 256
  %v1_c0ec = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_c0e0, 256
  %v4_c0f0 = urem i32 %tmp86, 256
  %v5_c0f0 = or i32 %v4_c0f0, %v1_c0ec
  store i32 %v5_c0f0, i32* %r2.global-to-local, align 4
  %v1_c0f4 = add i32 %v3_c0e0, 1
  store i32 %v1_c0f4, i32* %r3.global-to-local, align 4
  store i32 %v1_c0f4, i32* %v2_c0e0, align 4
  %v0_c0fc = load i32, i32* %r2.global-to-local, align 4
  %v1_c0fc = load i32, i32* @r5, align 4
  %v2_c0fc = add i32 %v1_c0fc, 4
  %v3_c0fc = inttoptr i32 %v2_c0fc to i32*
  store i32 %v0_c0fc, i32* %v3_c0fc, align 4
  %v0_c100 = load i32, i32* %r1.global-to-local, align 4
  %v1_c100 = add i32 %v0_c100, 8
  %v2_c100 = inttoptr i32 %v1_c100 to i32*
  %v3_c100 = load i32, i32* %v2_c100, align 4
  %tmp87 = mul i32 %v3_c100, 256
  %v1_c10c = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_c100, 256
  %v4_c110 = urem i32 %tmp88, 256
  %v5_c110 = or i32 %v4_c110, %v1_c10c
  store i32 %v5_c110, i32* %r2.global-to-local, align 4
  %v4_c11428 = udiv i32 %v2_c0cc, 256
  %v1_c118 = trunc i32 %v4_c11428 to i8
  %v2_c118 = load i32, i32* @r4, align 4
  %v3_c118 = add i32 %v2_c118, 11
  %v4_c118 = inttoptr i32 %v3_c118 to i8*
  store i8 %v1_c118, i8* %v4_c118, align 1
  %v3_c11c = load i32, i32* @r4, align 4
  %v4_c11c = add i32 %v3_c11c, 10
  %v5_c11c = inttoptr i32 %v4_c11c to i8*
  store i8 %v3_c0cc, i8* %v5_c11c, align 1
  %v0_c120 = load i32, i32* %r2.global-to-local, align 4
  %v1_c120 = load i32, i32* @r5, align 4
  %v2_c120 = add i32 %v1_c120, 8
  %v3_c120 = inttoptr i32 %v2_c120 to i32*
  store i32 %v0_c120, i32* %v3_c120, align 4
  %v0_c124 = load i32, i32* @r5, align 4
  store i32 %v0_c124, i32* @r1, align 4
  %v0_c128 = load i32, i32* @r8, align 4
  store i32 %v0_c128, i32* %r2.global-to-local, align 4
  %v0_c12c = load i32, i32* @r7, align 4
  store i32 %v0_c12c, i32* %r3.global-to-local, align 4
  %v0_c130 = load i32, i32* @r4, align 4
  store i32 %v0_c130, i32* %r0.global-to-local, align 4
  %v0_c134 = load i32, i32* @r6, align 4
  %v1_c134 = trunc i32 %v0_c134 to i8
  %v3_c134 = add i32 %v0_c124, 16
  %v4_c134 = inttoptr i32 %v3_c134 to i8*
  store i8 %v1_c134, i8* %v4_c134, align 1
  %v0_c138 = load i32, i32* @r6, align 4
  %v1_c138 = trunc i32 %v0_c138 to i8
  %v2_c138 = load i32, i32* @r5, align 4
  %v3_c138 = add i32 %v2_c138, 17
  %v4_c138 = inttoptr i32 %v3_c138 to i8*
  store i8 %v1_c138, i8* %v4_c138, align 1
  %v4_c13c = call i32 @function_d114(i32 %v0_c130, i32 %v0_c124, i32 %v0_c128, i32 %v0_c12c)
  %v5_c13c = trunc i32 %v4_c13c to i8
  store i32 %v4_c13c, i32* %r0.global-to-local, align 4
  %v4_c14029 = udiv i32 %v4_c13c, 256
  %v1_c144 = trunc i32 %v4_c14029 to i8
  %v2_c144 = load i32, i32* @r5, align 4
  %v3_c144 = add i32 %v2_c144, 17
  %v4_c144 = inttoptr i32 %v3_c144 to i8*
  store i8 %v1_c144, i8* %v4_c144, align 1
  %v3_c148 = load i32, i32* @r5, align 4
  %v4_c148 = add i32 %v3_c148, 16
  %v5_c148 = inttoptr i32 %v4_c148 to i8*
  store i8 %v5_c13c, i8* %v5_c148, align 1
  %v3_c14c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c14c, i32* %r3.global-to-local, align 4
  %v0_c150 = load i32, i32* @r4, align 4
  %v1_c150 = add i32 %v0_c150, 20
  %v2_c150 = inttoptr i32 %v1_c150 to i32*
  %v3_c150 = load i32, i32* %v2_c150, align 4
  %v5_c158 = mul i32 %v3_c14c, 24
  %v3_c160 = udiv i32 %v3_c150, 65536
  store i32 %v3_c160, i32* %r2.global-to-local, align 4
  %v2_c164 = add i32 %v5_c158, %arg2
  store i32 %v2_c164, i32* %ip.global-to-local, align 4
  %v3_c1684 = udiv i32 %v3_c150, 16777216
  %v1_c16c = trunc i32 %v3_c1684 to i8
  %v3_c16c = add i32 %v2_c164, 3
  %v4_c16c = inttoptr i32 %v3_c16c to i8*
  store i8 %v1_c16c, i8* %v4_c16c, align 1
  %v0_c170 = load i32, i32* %r2.global-to-local, align 4
  %v1_c170 = trunc i32 %v0_c170 to i8
  %v2_c170 = load i32, i32* %ip.global-to-local, align 4
  %v3_c170 = add i32 %v2_c170, 2
  %v4_c170 = inttoptr i32 %v3_c170 to i8*
  store i8 %v1_c170, i8* %v4_c170, align 1
  %v0_c174 = load i32, i32* @r4, align 4
  store i32 %v0_c174, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v0_c180 = load i32, i32* @sl, align 4
  store i32 %v0_c180, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c188 = load i32, i32* %ip.global-to-local, align 4
  %v6_c190 = inttoptr i32 %v0_c174 to i32*
  %v7_c190 = call i32 @function_11b4c(i32 %v3_bb68, i32* %v6_c190, i32 %v0_c180, i32 16384, i32 %v0_c188, i32 16)
  %v3_c194 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c194, i32* %r3.global-to-local, align 4
  %v1_c198 = add i32 %v3_c194, 1
  store i32 %v1_c198, i32* %r0.global-to-local, align 4
  %v1_c19c = load i32, i32* @fp, align 4
  %v9_c19c = icmp eq i32 %v1_c198, %v1_c19c
  store i1 %v9_c19c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c198, i32* %stack_var_-40, align 4
  %v6_c1a4 = icmp slt i32 %v1_c198, %v1_c19c
  br i1 %v6_c1a4, label %dec_label_pc_c1a8, label %dec_label_pc_c060

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_c0bc
  store i32 %v2_b9c8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_bbb0, i32* %ip.global-to-local, align 4
  %v4_c1b4 = mul i32 %v1_c198, 4
  %v5_c1b4 = add i32 %v4_c1b4, %v2_b9c8
  %v6_c1b4 = inttoptr i32 %v5_c1b4 to i32*
  %v7_c1b4 = load i32, i32* %v6_c1b4, align 4
  store i32 %v7_c1b4, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c094, i1* %cpsr_z.global-to-local, align 1
  %v1_c1c0 = add i32 %v7_c1b4, 20
  store i32 %v1_c1c0, i32* @r5, align 4
  br i1 %v3_c094, label %dec_label_pc_c1c8, label %dec_label_pc_c0a8

dec_label_pc_c1c8:                                ; preds = %dec_label_pc_c1a8, %dec_label_pc_c06c
  %v0_c1c8 = call i32 @function_e72c()
  %v1_c1c8 = trunc i32 %v0_c1c8 to i8
  store i32 %v1_bb58, i32* %lr.global-to-local, align 4
  %v4_c1d0 = sdiv i32 %v0_c1c8, 256
  store i32 %v4_c1d0, i32* %r3.global-to-local, align 4
  store i1 %v2_c0ac, i1* %cpsr_z.global-to-local, align 1
  %v3_c1d8 = load i32, i32* @r4, align 4
  %v4_c1d8 = add i32 %v3_c1d8, 4
  %v5_c1d8 = inttoptr i32 %v4_c1d8 to i8*
  store i8 %v1_c1c8, i8* %v5_c1d8, align 1
  %v0_c1dc = load i32, i32* %r3.global-to-local, align 4
  %v1_c1dc = trunc i32 %v0_c1dc to i8
  %v2_c1dc = load i32, i32* @r4, align 4
  %v3_c1dc = add i32 %v2_c1dc, 5
  %v4_c1dc = inttoptr i32 %v3_c1dc to i8*
  store i8 %v1_c1dc, i8* %v4_c1dc, align 1
  %v0_c1e0 = load i32, i32* @r4, align 4
  %v1_c1e0 = add i32 %v0_c1e0, 40
  store i32 %v1_c1e0, i32* %r0.global-to-local, align 4
  %v0_c1e4 = load i32, i32* @sb, align 4
  store i32 %v0_c1e4, i32* @r1, align 4
  %v0_c1e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c1e8, label %dec_label_pc_c0bc, label %dec_label_pc_c1ec

dec_label_pc_c1ec:                                ; preds = %dec_label_pc_c0a8, %dec_label_pc_c1c8
  %v0_c1ec = phi i32 [ %v1_c0b0, %dec_label_pc_c0a8 ], [ %v1_c1e0, %dec_label_pc_c1c8 ]
  %v1_c1ec = inttoptr i32 %v0_c1ec to i8*
  %v2_c1ec = call i32 @function_e8ac(i8* %v1_c1ec)
  store i32 %v2_c1ec, i32* %r0.global-to-local, align 4
  %v2_c0bc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c0bc

; uselistorder directives
  uselistorder i32 %v0_c1e0, { 1, 0 }
  uselistorder i32 %v7_c1b4, { 1, 2, 0 }
  uselistorder i32 %v1_c19c, { 1, 2, 0 }
  uselistorder i32 %v1_c198, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_c13c, { 0, 2, 1 }
  uselistorder i32 %v0_c124, { 1, 0, 2 }
  uselistorder i32 %v3_c100, { 1, 0 }
  uselistorder i32 %v3_c0e0, { 3, 2, 0, 1 }
  uselistorder i32 %v2_c0cc, { 0, 2, 1 }
  uselistorder i32 %v0_c0b0, { 1, 0 }
  uselistorder i32 %v0_c06c, { 1, 0 }
  uselistorder i32 %v0_c060, { 1, 0 }
  uselistorder i1 %v3_c094, { 2, 3, 1, 0 }
  uselistorder i32 %v1_c048, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bf9c, { 0, 2, 1 }
  uselistorder i32 %v3_bf7c, { 1, 0 }
  uselistorder i32 %v0_bf50, { 1, 0, 2 }
  uselistorder i32 %v3_bf44, { 1, 0 }
  uselistorder i32 %v3_bed8, { 1, 0 }
  uselistorder i32 %v0_becc, { 1, 0 }
  uselistorder i32 %v3_be54, { 1, 0 }
  uselistorder i32 %v2_be40, { 1, 0 }
  uselistorder i32 %v3_be24, { 1, 0, 2, 3 }
  uselistorder i32 %v2_be1c, { 1, 0 }
  uselistorder i32 %v3_bdf8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bdf0, { 1, 0 }
  uselistorder i32 %v4_bdd8, { 1, 0 }
  uselistorder i32 %v0_bdd4, { 0, 2, 1 }
  uselistorder i1 %v7_bd44, { 1, 0 }
  uselistorder i32 %v7_bd3c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_bd88, { 1, 0 }
  uselistorder i1 %v9_bd6c, { 1, 0 }
  uselistorder i32 %v4_bd80, { 1, 0 }
  uselistorder i32 %v4_bd7c, { 1, 0 }
  uselistorder i32 %v8_bc90, { 1, 2, 0, 3 }
  uselistorder i32 %v3_bc7c, { 1, 0 }
  uselistorder i32 %v0_bc6c, { 2, 0, 1, 3 }
  uselistorder i1 %v7_bbf4, { 1, 0 }
  uselistorder i32 %v3_bbf0, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c008, { 1, 0 }
  uselistorder i32 %v1_bff0, { 1, 0 }
  uselistorder i32 %v1_bfd8, { 1, 0 }
  uselistorder i32 %v1_bfc0, { 1, 0 }
  uselistorder i32 %v1_bfa8, { 1, 0 }
  uselistorder i32 %v5_bd84, { 1, 0 }
  uselistorder i32 %v3_bcd893, { 1, 0 }
  uselistorder i1 %v2_bd9c, { 1, 0 }
  uselistorder i32 %v1_bd98, { 1, 0 }
  uselistorder i32 %v4_bd94, { 2, 0, 1 }
  uselistorder i32 %v4_bd78, { 1, 0 }
  uselistorder i1 %v3_bcc0, { 1, 0 }
  uselistorder i32 %v8_bbbc, { 2, 1, 0 }
  uselistorder i32 %v8_bbb8, { 1, 2, 0 }
  uselistorder i32 %v3_bbb0, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_bbac, { 0, 1, 3, 2 }
  uselistorder i1 %v7_bba0, { 1, 0 }
  uselistorder i1 %v7_bb70, { 1, 0 }
  uselistorder i32 %v3_bb6c, { 2, 0, 1 }
  uselistorder i32 %v3_bb68, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_bb58, { 1, 3, 2, 0 }
  uselistorder i32 %v1_bb00, { 1, 0 }
  uselistorder i32 %v1_bac0, { 1, 0 }
  uselistorder i32 %v1_baa0, { 1, 0 }
  uselistorder i32 %v1_ba80, { 1, 0 }
  uselistorder i32 %v1_ba48, { 1, 0 }
  uselistorder i32 %v2_b9c8, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b9b8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b99c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r2.global-to-local, { 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0 }
  uselistorder i32* %r1.global-to-local, { 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 37, 36, 38, 40, 39, 0 }
  uselistorder i32* %r0.global-to-local, { 53, 52, 54, 55, 57, 56, 61, 58, 59, 62, 60, 8, 1, 2, 3, 4, 5, 6, 7, 12, 9, 10, 11, 13, 15, 14, 17, 16, 20, 18, 21, 22, 19, 23, 25, 24, 26, 27, 29, 28, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %lr.global-to-local, { 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32* %ip.global-to-local, { 31, 32, 33, 34, 35, 36, 37, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i1* %cpsr_z.global-to-local, { 19, 20, 21, 22, 23, 24, 25, 26, 1, 4, 2, 3, 5, 6, 7, 8, 10, 0, 11, 12, 9, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_c1ec, { 1, 0 }
  uselistorder label %dec_label_pc_c0bc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c044, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_bdcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bd04, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_bcb4, { 1, 0 }
}

define i32 @function_c1f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c1f8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_c1fc = urem i32 %arg1, 256
  store i32 %v1_c1fc, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c214 = urem i32 %arg3, 256
  store i32 %v1_c214, i32* @r4, align 4
  %v2_c218 = call i32 @function_11e9c(i32 %v1_c1fc, i32 4)
  %v0_c21c = load i32, i32* @r5, align 4
  store i32 %v0_c21c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c22c = load i32, i32* @r4, align 4
  %v5_c230 = inttoptr i32 %v0_c21c to i32*
  %v6_c230 = call i32 @function_85e0(i32 %v0_c22c, i32* %v5_c230, i32 2, i32 0)
  %v1_c23c = urem i32 %v6_c230, 256
  store i32 %v1_c23c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c248 = load i32, i32* @r5, align 4
  store i32 %v0_c248, i32* %r1.global-to-local, align 4
  %v0_c24c = load i32, i32* @r4, align 4
  %v5_c250 = trunc i32 %v6_c230 to i8
  %v6_c254 = inttoptr i32 %v0_c248 to i32*
  %v7_c254 = call i32 @function_85e0(i32 %v0_c24c, i32* %v6_c254, i32 3, i32 65535)
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c254, i32* @r8, align 4
  %v0_c268 = load i32, i32* @r4, align 4
  %v4_c26c = inttoptr i32 %v0_c258 to i32*
  %v5_c26c = call i32 @function_85e0(i32 %v0_c268, i32* %v4_c26c, i32 4, i32 64)
  %v1_c274 = urem i32 %v5_c26c, 256
  store i32 %v1_c274, i32* %ip.global-to-local, align 4
  %v0_c278 = load i32, i32* @r5, align 4
  store i32 %v0_c278, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c284 = load i32, i32* @r4, align 4
  %v6_c28c = inttoptr i32 %v0_c278 to i32*
  %v7_c28c = call i32 @function_85e0(i32 %v0_c284, i32* %v6_c28c, i32 5, i32 0)
  %v1_c298 = urem i32 %v7_c28c, 256
  store i32 %v1_c298, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c2a4 = load i32, i32* @r5, align 4
  store i32 %v0_c2a4, i32* %r1.global-to-local, align 4
  %v0_c2a8 = load i32, i32* @r4, align 4
  %v5_c2b0 = inttoptr i32 %v0_c2a4 to i32*
  %v6_c2b0 = call i32 @function_85e0(i32 %v0_c2a8, i32* %v5_c2b0, i32 6, i32 65535)
  %v0_c2b8 = load i32, i32* @r5, align 4
  store i32 %v0_c2b8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c2b0, i32* @r7, align 4
  %v0_c2c8 = load i32, i32* @r4, align 4
  %v4_c2cc = inttoptr i32 %v0_c2b8 to i32*
  %v5_c2cc = call i32 @function_85e0(i32 %v0_c2c8, i32* %v4_c2cc, i32 7, i32 65535)
  %v0_c2d4 = load i32, i32* @r5, align 4
  store i32 %v0_c2d4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c2cc, i32* @r6, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  %v4_c2e8 = inttoptr i32 %v0_c2d4 to i32*
  %v5_c2e8 = call i32 @function_85e0(i32 %v0_c2e4, i32* %v4_c2e8, i32 17, i32 65535)
  %v0_c2f4 = load i32, i32* @r5, align 4
  store i32 %v0_c2f4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_c300 = load i32, i32* @r4, align 4
  %v5_c304 = inttoptr i32 %v0_c2f4 to i32*
  %v6_c304 = call i32 @function_85e0(i32 %v0_c300, i32* %v5_c304, i32 18, i32 65535)
  %v0_c308 = load i32, i32* @r5, align 4
  store i32 %v0_c308, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c318 = load i32, i32* @r4, align 4
  %v5_c31c = inttoptr i32 %v0_c308 to i32*
  %v6_c31c = call i32 @function_85e0(i32 %v0_c318, i32* %v5_c31c, i32 11, i32 0)
  %v0_c320 = load i32, i32* @r5, align 4
  store i32 %v0_c320, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c330 = load i32, i32* @r4, align 4
  %v5_c334 = inttoptr i32 %v0_c320 to i32*
  %v6_c334 = call i32 @function_85e0(i32 %v0_c330, i32* %v5_c334, i32 12, i32 1)
  %v0_c338 = load i32, i32* @r5, align 4
  store i32 %v0_c338, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c348 = load i32, i32* @r4, align 4
  %v5_c34c = inttoptr i32 %v0_c338 to i32*
  %v6_c34c = call i32 @function_85e0(i32 %v0_c348, i32* %v5_c34c, i32 13, i32 0)
  %v0_c350 = load i32, i32* @r5, align 4
  store i32 %v0_c350, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c360 = load i32, i32* @r4, align 4
  %v5_c364 = inttoptr i32 %v0_c350 to i32*
  %v6_c364 = call i32 @function_85e0(i32 %v0_c360, i32* %v5_c364, i32 14, i32 0)
  %v0_c368 = load i32, i32* @r5, align 4
  store i32 %v0_c368, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c378 = load i32, i32* @r4, align 4
  %v5_c37c = inttoptr i32 %v0_c368 to i32*
  %v6_c37c = call i32 @function_85e0(i32 %v0_c378, i32* %v5_c37c, i32 15, i32 0)
  %v0_c380 = load i32, i32* @r5, align 4
  store i32 %v0_c380, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c390 = load i32, i32* @r4, align 4
  %v5_c394 = inttoptr i32 %v0_c380 to i32*
  %v6_c394 = call i32 @function_85e0(i32 %v0_c390, i32* %v5_c394, i32 16, i32 0)
  %v0_c398 = load i32, i32* @r5, align 4
  store i32 %v0_c398, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_c3a8 = load i32, i32* @r4, align 4
  %v5_c3ac = inttoptr i32 %v0_c398 to i32*
  %v6_c3ac = call i32 @function_85e0(i32 %v0_c3a8, i32* %v5_c3ac, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c3bc = load i32, i32* @r5, align 4
  store i32 %v0_c3bc, i32* %r1.global-to-local, align 4
  %v0_c3c0 = load i32, i32* @r4, align 4
  %v4_c3c4 = inttoptr i32 %v0_c3bc to i32*
  %v5_c3c4 = call i32 @function_85e0(i32 %v0_c3c0, i32* %v4_c3c4, i32 1, i32 1)
  %v2_c3d0 = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_c3d0, i32* %r3.global-to-local, align 4
  %v1_c3d4 = urem i32 %v5_c3c4, 256
  store i32 %v1_c3d4, i32* %ip.global-to-local, align 4
  %v0_c3d8 = load i32, i32* @r5, align 4
  store i32 %v0_c3d8, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c3e0 = load i32, i32* @r4, align 4
  %v5_c3e8 = inttoptr i32 %v0_c3d8 to i32*
  %v6_c3e8 = call i32 @function_8574(i32 %v0_c3e0, i32* %v5_c3e8, i32 25, i32 %v2_c3d0, i32 %v1_c3d4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c3fc = call i32 @function_11bb0(i32 2, i32 3, i32 6)
  %v7_c400 = icmp eq i32 %v3_c3fc, -1
  store i1 %v7_c400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c400, label %dec_label_pc_c838, label %dec_label_pc_c40c

dec_label_pc_c40c:                                ; preds = %dec_label_pc_c1f8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c414 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c414, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c428 = call i32 @function_11b80(i32 %v3_c3fc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c42c = icmp eq i32 %v6_c428, -1
  store i1 %v7_c42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c42c, label %dec_label_pc_c830, label %dec_label_pc_c434

dec_label_pc_c434:                                ; preds = %dec_label_pc_c40c
  %v0_c434 = load i32, i32* @r8, align 4
  %v0_c438 = load i32, i32* @r7, align 4
  %v0_c43c = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_c444 = urem i32 %v0_c434, 65536
  store i32 %v3_c444, i32* %r2.global-to-local, align 4
  %v3_c448 = urem i32 %v0_c438, 65536
  store i32 %v3_c448, i32* %r3.global-to-local, align 4
  %v3_c44c = urem i32 %v0_c43c, 65536
  store i32 %v3_c44c, i32* %ip.global-to-local, align 4
  %v0_c450 = load i32, i32* @fp, align 4
  %v2_c450 = icmp eq i32 %v0_c450, 0
  store i1 %v2_c450, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_c450, 1
  br i1 %tmp75, label %dec_label_pc_c950, label %dec_label_pc_c468

dec_label_pc_c468:                                ; preds = %dec_label_pc_c434
  %v1_c470 = add i32 %v6_c3ac, 40
  %tmp76 = mul i32 %v1_c470, 256
  %v1_c484 = urem i32 %v0_c438, 256
  %v1_c488 = and i32 %tmp76, 65280
  %v3_c48c = mul nuw nsw i32 %v1_c484, 256
  %v1_c494 = urem i32 %v0_c43c, 256
  %tmp77 = udiv i32 %v0_c43c, 256
  %v3_c498 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_c470, 256
  %v4_c49c = urem i32 %tmp78, 256
  %v5_c49c = or i32 %v4_c49c, %v1_c488
  store i32 %v5_c49c, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_c438, 256
  %v4_c4a0 = urem i32 %tmp79, 256
  %v5_c4a0 = or i32 %v4_c4a0, %v3_c48c
  store i32 %v5_c4a0, i32* @sl, align 4
  %v4_c4a4 = mul nuw nsw i32 %v1_c494, 256
  %v5_c4a4 = or i32 %v4_c4a4, %v3_c498
  store i32 %v5_c4a4, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_c434, 256
  %v3_c4b4 = urem i32 %tmp80, 256
  %v1_c4b8 = urem i32 %v0_c434, 256
  %tmp81 = mul i32 %v5_c2e8, 256
  %v1_c4c0 = and i32 %tmp81, 65280
  %v1_c4c4 = urem i32 %v6_c31c, 2
  %v1_c4c8 = urem i32 %v6_c334, 2
  %v1_c4cc = urem i32 %v6_c34c, 2
  %tmp82 = udiv i32 %v5_c2e8, 256
  %v4_c4d0 = urem i32 %tmp82, 256
  %v5_c4d0 = or i32 %v4_c4d0, %v1_c4c0
  store i32 %v5_c4d0, i32* @r8, align 4
  %v1_c4f0 = urem i32 %v6_c364, 2
  %v1_c4f4 = urem i32 %v6_c37c, 2
  %v1_c4f8 = urem i32 %v6_c394, 2
  %v1_c4fc = urem i32 %v6_c34c, 256
  %v4_c500 = mul nuw nsw i32 %v1_c4b8, 256
  %v5_c500 = or i32 %v4_c500, %v3_c4b4
  store i32 %v5_c500, i32* @r5, align 4
  %v3_c51425 = udiv i32 %v1_c488, 256
  store i32 %v3_c51425, i32* %r3.global-to-local, align 4
  store i32 %v1_c4b8, i32* %ip.global-to-local, align 4
  store i32 %v1_c484, i32* %r1.global-to-local, align 4
  store i32 %v1_c494, i32* %r2.global-to-local, align 4
  %v5_c530 = trunc i32 %v0_c438 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_c26c, 16777216
  %v4_c58c = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_c434, 16777216
  %v4_c598 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_c5ac = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_c470, 16777216
  %v4_c5b0 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_c4c4
  %v4_c600 = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_c4c8
  %v4_c614 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_c4cc
  %v4_c628 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_c4f0
  %v4_c63c = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_c4f4
  %v3_c650 = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_c43c, 16777216
  %v7_c680 = sdiv i32 %sext12, 16777216
  %v1_c594 = trunc i32 %v4_c58c to i8
  %extract.t = trunc i32 %v4_c598 to i8
  %v3_c680 = sext i8 %v5_c530 to i32
  %v2_c6a4 = icmp eq i32 %v1_c4fc, 0
  br label %dec_label_pc_c53c

dec_label_pc_c53c:                                ; preds = %bb89, %dec_label_pc_c468
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c548 = call i32 @function_11e9c(i32 1510, i32 1)
  store i32 %v2_c218, i32* %ip.global-to-local, align 4
  %v2_c554 = load i32, i32* @r4, align 4
  %v5_c554 = mul i32 %v2_c554, 4
  %v6_c554 = add i32 %v5_c554, %v2_c218
  %v7_c554 = inttoptr i32 %v6_c554 to i32*
  store i32 %v2_c548, i32* %v7_c554, align 4
  %v3_c558 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c558, i32* %r3.global-to-local, align 4
  %v0_c55c = load i32, i32* %ip.global-to-local, align 4
  %v4_c55c = mul i32 %v3_c558, 4
  %v5_c55c = add i32 %v0_c55c, %v4_c55c
  %v6_c55c = inttoptr i32 %v5_c55c to i32*
  %v7_c55c = load i32, i32* %v6_c55c, align 4
  store i32 %v7_c55c, i32* @r7, align 4
  %v1_c560 = inttoptr i32 %v7_c55c to i8*
  %v2_c560 = load i8, i8* %v1_c560, align 1
  %tmp97 = urem i8 %v2_c560, 16
  %v1_c564 = zext i8 %tmp97 to i32
  %v1_c568 = or i32 %v1_c564, 64
  store i32 %v1_c568, i32* %r2.global-to-local, align 4
  %v1_c56c = trunc i32 %v1_c568 to i8
  store i8 %v1_c56c, i8* %v1_c560, align 1
  %v0_c570 = load i32, i32* @r7, align 4
  %v1_c570 = inttoptr i32 %v0_c570 to i8*
  %v2_c570 = load i8, i8* %v1_c570, align 1
  %v1_c574 = and i8 %v2_c570, -16
  %v1_c578 = or i8 %v1_c574, 5
  store i32 %v1_c298, i32* %r1.global-to-local, align 4
  store i8 %v1_c578, i8* %v1_c570, align 1
  %v2_c588 = load i32, i32* @r7, align 4
  %v3_c588 = add i32 %v2_c588, 1
  %v4_c588 = inttoptr i32 %v3_c588 to i8*
  store i8 %v5_c250, i8* %v4_c588, align 1
  store i32 %v4_c58c, i32* %r3.global-to-local, align 4
  %v0_c590 = load i32, i32* %r1.global-to-local, align 4
  %v2_c590 = icmp eq i32 %v0_c590, 0
  store i1 %v2_c590, i1* %cpsr_z.global-to-local, align 1
  %v2_c594 = load i32, i32* @r7, align 4
  %v3_c594 = add i32 %v2_c594, 8
  %v4_c594 = inttoptr i32 %v3_c594 to i8*
  store i8 %v1_c594, i8* %v4_c594, align 1
  store i32 %v4_c598, i32* %r2.global-to-local, align 4
  %v0_c59c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c59c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c53c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c5a0 = load i32, i32* @r7, align 4
  %v4_c5a0 = add i32 %v3_c5a0, 6
  %v5_c5a0 = inttoptr i32 %v4_c5a0 to i8*
  store i8 64, i8* %v5_c5a0, align 1
  %v0_c5a8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_c5a8.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c53c, %bb
  %v0_c5a8.off0 = phi i8 [ %extract.t, %dec_label_pc_c53c ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c5a8 = load i32, i32* @r7, align 4
  %v3_c5a8 = add i32 %v2_c5a8, 5
  %v4_c5a8 = inttoptr i32 %v3_c5a8 to i8*
  store i8 %v0_c5a8.off0, i8* %v4_c5a8, align 1
  store i32 %v4_c5ac, i32* %ip.global-to-local, align 4
  store i32 %v4_c5b0, i32* %r1.global-to-local, align 4
  %v0_c5b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5b4, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_c5b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5b8 = trunc i32 %v0_c5b8 to i8
  %v2_c5b8 = load i32, i32* @r7, align 4
  %v3_c5b8 = add i32 %v2_c5b8, 9
  %v4_c5b8 = inttoptr i32 %v3_c5b8 to i8*
  store i8 %v1_c5b8, i8* %v4_c5b8, align 1
  %v0_c5bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5bc, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_c5bc = load i32, i32* %r2.global-to-local, align 4
  %v2_c5bc = trunc i32 %v1_c5bc to i8
  %v3_c5bc = load i32, i32* @r7, align 4
  %v4_c5bc = add i32 %v3_c5bc, 7
  %v5_c5bc = inttoptr i32 %v4_c5bc to i8*
  store i8 %v2_c5bc, i8* %v5_c5bc, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_c5c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5c0, i32* %r2.global-to-local, align 4
  %v0_c5c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c5c4 = trunc i32 %v0_c5c4 to i8
  %v2_c5c4 = load i32, i32* @r7, align 4
  %v3_c5c4 = add i32 %v2_c5c4, 2
  %v4_c5c4 = inttoptr i32 %v3_c5c4 to i8*
  store i8 %v1_c5c4, i8* %v4_c5c4, align 1
  store i32 %v6_c3e8, i32* %ip.global-to-local, align 4
  %v0_c5cc = load i32, i32* %r2.global-to-local, align 4
  %v3_c5cc = mul i32 %v0_c5cc, 32
  store i32 %v3_c5cc, i32* %r3.global-to-local, align 4
  %v1_c5d0 = load i32, i32* @r7, align 4
  %v2_c5d0 = add i32 %v1_c5d0, 12
  %v3_c5d0 = inttoptr i32 %v2_c5d0 to i32*
  store i32 %v6_c3e8, i32* %v3_c5d0, align 4
  %v0_c5d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5d4 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_c5d4, -8
  %v5_c5d4 = add i32 %v0_c5d4, %tmp98
  %v1_c5d8 = load i32, i32* @sb, align 4
  %v2_c5d8 = add i32 %v1_c5d8, %v5_c5d4
  store i32 %v2_c5d8, i32* %r3.global-to-local, align 4
  %v1_c5dc = add i32 %v2_c5d8, 16
  %v2_c5dc = inttoptr i32 %v1_c5dc to i32*
  %v3_c5dc = load i32, i32* %v2_c5dc, align 4
  store i32 %v3_c5dc, i32* %r2.global-to-local, align 4
  %v0_c5e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5e0 = trunc i32 %v0_c5e0 to i8
  %v2_c5e0 = load i32, i32* @r7, align 4
  %v3_c5e0 = add i32 %v2_c5e0, 3
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i8*
  store i8 %v1_c5e0, i8* %v4_c5e0, align 1
  %v0_c5e4 = load i32, i32* @r5, align 4
  %v1_c5e4 = trunc i32 %v0_c5e4 to i8
  %v2_c5e4 = load i32, i32* @r7, align 4
  %v3_c5e4 = add i32 %v2_c5e4, 4
  %v4_c5e4 = inttoptr i32 %v3_c5e4 to i8*
  store i8 %v1_c5e4, i8* %v4_c5e4, align 1
  %v0_c5e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5e8 = load i32, i32* @r7, align 4
  %v2_c5e8 = add i32 %v1_c5e8, 16
  %v3_c5e8 = inttoptr i32 %v2_c5e8 to i32*
  store i32 %v0_c5e8, i32* %v3_c5e8, align 4
  %v0_c5ec = load i32, i32* @sl, align 4
  %v1_c5ec = trunc i32 %v0_c5ec to i8
  %v2_c5ec = load i32, i32* @r7, align 4
  %v3_c5ec = add i32 %v2_c5ec, 20
  %v4_c5ec = inttoptr i32 %v3_c5ec to i8*
  store i8 %v1_c5ec, i8* %v4_c5ec, align 1
  %v0_c5f0 = load i32, i32* @r7, align 4
  %v1_c5f0 = add i32 %v0_c5f0, 20
  store i32 %v1_c5f0, i32* @r4, align 4
  %v1_c5f4 = add i32 %v0_c5f0, 33
  %v2_c5f4 = inttoptr i32 %v1_c5f4 to i8*
  %v3_c5f4 = load i8, i8* %v2_c5f4, align 1
  %v4_c5f4 = zext i8 %v3_c5f4 to i32
  store i32 %v1_c4c4, i32* %r1.global-to-local, align 4
  %v1_c5fc = and i32 %v4_c5f4, 223
  %v5_c600 = or i32 %v1_c5fc, %v4_c600
  store i32 %v5_c600, i32* %r3.global-to-local, align 4
  %v1_c604 = trunc i32 %v5_c600 to i8
  store i8 %v1_c604, i8* %v2_c5f4, align 1
  %v0_c608 = load i32, i32* @r4, align 4
  %v1_c608 = add i32 %v0_c608, 13
  %v2_c608 = inttoptr i32 %v1_c608 to i8*
  %v3_c608 = load i8, i8* %v2_c608, align 1
  %v4_c608 = zext i8 %v3_c608 to i32
  store i32 %v1_c4c8, i32* %r3.global-to-local, align 4
  %v1_c610 = and i32 %v4_c608, 239
  %v5_c614 = or i32 %v1_c610, %v4_c614
  store i32 %v5_c614, i32* %r2.global-to-local, align 4
  %v1_c618 = trunc i32 %v5_c614 to i8
  store i8 %v1_c618, i8* %v2_c608, align 1
  %v0_c61c = load i32, i32* @r4, align 4
  %v1_c61c = add i32 %v0_c61c, 13
  %v2_c61c = inttoptr i32 %v1_c61c to i8*
  %v3_c61c = load i8, i8* %v2_c61c, align 1
  %v4_c61c = zext i8 %v3_c61c to i32
  store i32 %v1_c4cc, i32* %ip.global-to-local, align 4
  %v1_c624 = and i32 %v4_c61c, 247
  %v5_c628 = or i32 %v1_c624, %v4_c628
  store i32 %v5_c628, i32* %r3.global-to-local, align 4
  %v1_c62c = trunc i32 %v5_c628 to i8
  store i8 %v1_c62c, i8* %v2_c61c, align 1
  %v0_c630 = load i32, i32* @r4, align 4
  %v1_c630 = add i32 %v0_c630, 13
  %v2_c630 = inttoptr i32 %v1_c630 to i8*
  %v3_c630 = load i8, i8* %v2_c630, align 1
  %v4_c630 = zext i8 %v3_c630 to i32
  store i32 %v1_c4f0, i32* %r1.global-to-local, align 4
  %v1_c638 = and i32 %v4_c630, 251
  %v5_c63c = or i32 %v1_c638, %v4_c63c
  store i32 %v5_c63c, i32* %r2.global-to-local, align 4
  %v1_c640 = trunc i32 %v5_c63c to i8
  store i8 %v1_c640, i8* %v2_c630, align 1
  %v0_c644 = load i32, i32* @r4, align 4
  %v1_c644 = add i32 %v0_c644, 13
  %v2_c644 = inttoptr i32 %v1_c644 to i8*
  %v3_c644 = load i8, i8* %v2_c644, align 1
  %v4_c644 = zext i8 %v3_c644 to i32
  store i32 %v1_c4f4, i32* %r2.global-to-local, align 4
  %v1_c64c = and i32 %v4_c644, 253
  %v4_c650 = or i32 %v1_c64c, %v3_c650
  store i32 %v4_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = trunc i32 %v4_c650 to i8
  store i8 %v1_c654, i8* %v2_c644, align 1
  %v0_c658 = load i32, i32* @r4, align 4
  %v1_c658 = add i32 %v0_c658, 12
  %v2_c658 = inttoptr i32 %v1_c658 to i8*
  %v3_c658 = load i8, i8* %v2_c658, align 1
  %v4_c658 = zext i8 %v3_c658 to i32
  store i32 %v4_c658, i32* %r2.global-to-local, align 4
  %v1_c65c = add i32 %v0_c658, 13
  %v2_c65c = inttoptr i32 %v1_c65c to i8*
  %v3_c65c = load i8, i8* %v2_c65c, align 1
  %v4_c65c = zext i8 %v3_c65c to i32
  store i32 %v1_c4f8, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_c658, 16
  %v1_c664 = zext i8 %tmp99 to i32
  %v1_c668 = and i32 %v4_c65c, 254
  %v2_c66c = or i32 %v1_c668, %v1_c4f8
  store i32 %v2_c66c, i32* %r3.global-to-local, align 4
  %v1_c670 = or i32 %v1_c664, 80
  store i32 %v1_c670, i32* %r2.global-to-local, align 4
  %v1_c674 = trunc i32 %v2_c66c to i8
  store i8 %v1_c674, i8* %v2_c65c, align 1
  %v0_c678 = load i32, i32* %r2.global-to-local, align 4
  %v1_c678 = trunc i32 %v0_c678 to i8
  %v2_c678 = load i32, i32* @r4, align 4
  %v3_c678 = add i32 %v2_c678, 12
  %v4_c678 = inttoptr i32 %v3_c678 to i8*
  store i8 %v1_c678, i8* %v4_c678, align 1
  store i32 %v3_c680, i32* %r1.global-to-local, align 4
  store i32 %v7_c680, i32* %r2.global-to-local, align 4
  %v2_c684 = load i32, i32* @r4, align 4
  %v3_c684 = add i32 %v2_c684, 1
  %v4_c684 = inttoptr i32 %v3_c684 to i8*
  store i8 %v5_c530, i8* %v4_c684, align 1
  %v0_c688 = load i32, i32* %r2.global-to-local, align 4
  %v1_c688 = trunc i32 %v0_c688 to i8
  %v2_c688 = load i32, i32* @r4, align 4
  %v3_c688 = add i32 %v2_c688, 3
  %v4_c688 = inttoptr i32 %v3_c688 to i8*
  store i8 %v1_c688, i8* %v4_c688, align 1
  %v0_c68c = load i32, i32* @r6, align 4
  %v1_c68c = trunc i32 %v0_c68c to i8
  %v2_c68c = load i32, i32* @r4, align 4
  %v3_c68c = add i32 %v2_c68c, 2
  %v4_c68c = inttoptr i32 %v3_c68c to i8*
  store i8 %v1_c68c, i8* %v4_c68c, align 1
  %v0_c690 = load i32, i32* @r8, align 4
  %v1_c690 = load i32, i32* @r4, align 4
  %v2_c690 = add i32 %v1_c690, 4
  %v3_c690 = inttoptr i32 %v2_c690 to i32*
  store i32 %v0_c690, i32* %v3_c690, align 4
  %v0_c694 = call i32 @function_e72c()
  store i32 %v1_c4fc, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c694, 16777216
  %v1_c69c = sdiv i32 %sext, 16777216
  store i32 %v1_c69c, i32* %r2.global-to-local, align 4
  %v3_c6a0 = ashr i32 %sext, 31
  store i32 %v3_c6a0, i32* %r3.global-to-local, align 4
  store i1 %v2_c6a4, i1* %cpsr_z.global-to-local, align 1
  %v1_c6a8 = trunc i32 %v3_c6a0 to i8
  %v2_c6a8 = load i32, i32* @r4, align 4
  %v3_c6a8 = add i32 %v2_c6a8, 15
  %v4_c6a8 = inttoptr i32 %v3_c6a8 to i8*
  store i8 %v1_c6a8, i8* %v4_c6a8, align 1
  %v0_c6ac = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_c6b8.pre = load i32, i32* @r4, align 4
  br i1 %v0_c6ac, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_c6ac = add i32 %v2_c6b8.pre, 13
  %v3_c6ac = inttoptr i32 %v2_c6ac to i8*
  %v4_c6ac = load i8, i8* %v3_c6ac, align 1
  %v5_c6ac = zext i8 %v4_c6ac to i32
  %v2_c6b0 = or i32 %v5_c6ac, 8
  store i32 %v2_c6b0, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_c3ac, i32* @r1, align 4
  %v0_c6b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6b8 = trunc i32 %v0_c6b8 to i8
  %v3_c6b8 = add i32 %v2_c6b8.pre, 14
  %v4_c6b8 = inttoptr i32 %v3_c6b8 to i8*
  store i8 %v1_c6b8, i8* %v4_c6b8, align 1
  %v0_c6bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6bc, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_c6bc = load i32, i32* %r3.global-to-local, align 4
  %v2_c6bc = trunc i32 %v1_c6bc to i8
  %v3_c6bc = load i32, i32* @r4, align 4
  %v4_c6bc = add i32 %v3_c6bc, 13
  %v5_c6bc = inttoptr i32 %v4_c6bc to i8*
  store i8 %v2_c6bc, i8* %v5_c6bc, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_c6c0 = load i32, i32* @r7, align 4
  %v1_c6c0 = add i32 %v0_c6c0, 40
  %v1_c6c4 = inttoptr i32 %v1_c6c0 to i8*
  %v2_c6c4 = call i32 @function_e8ac(i8* %v1_c6c4)
  %v3_c6c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c6c8, i32* %r3.global-to-local, align 4
  %v1_c6cc = add i32 %v3_c6c8, 1
  store i32 %v1_c6cc, i32* @r4, align 4
  %v0_c6d0 = load i32, i32* @fp, align 4
  %v9_c6d0 = icmp eq i32 %v0_c6d0, %v1_c6cc
  store i1 %v9_c6d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c6cc, i32* %stack_var_-40, align 4
  %v8_c6d8 = icmp sgt i32 %v0_c6d0, %v1_c6cc
  br i1 %v8_c6d8, label %dec_label_pc_c53c, label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %bb89
  store i32 %v6_c3ac, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c6e4.preheader

dec_label_pc_c6e4.preheader:                      ; preds = %dec_label_pc_c6dc, %dec_label_pc_c950
  %v0_c6e417 = phi i32 [ %v0_c6d0, %dec_label_pc_c6dc ], [ %v0_c450, %dec_label_pc_c950 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_c470, %dec_label_pc_c6dc ], [ %v1_c958, %dec_label_pc_c950 ]
  %storemerge = add i32 %v6_c3ac, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_c89c = icmp eq i32 %v6_c3e8, -1
  %v8_c89c = icmp eq i32 %v6_c3e8, -1
  %v3_c8b8 = icmp eq i32 %v3_c444, 65535
  %v2_c934 = icmp eq i32 %v1_c3d4, 0
  br label %dec_label_pc_c6e4

dec_label_pc_c6e4:                                ; preds = %dec_label_pc_c78c, %dec_label_pc_c6e4.preheader
  %v0_c6e4 = phi i32 [ %v0_c6e417, %dec_label_pc_c6e4.preheader ], [ %v0_c820, %dec_label_pc_c78c ]
  %v2_c6e4 = icmp eq i32 %v0_c6e4, 0
  store i1 %v2_c6e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_c6e4, 1
  br label %dec_label_pc_c6ec

dec_label_pc_c6ec:                                ; preds = %dec_label_pc_c6ec, %dec_label_pc_c6e4
  br i1 %tmp90, label %dec_label_pc_c6ec, label %dec_label_pc_c6f0

dec_label_pc_c6f0:                                ; preds = %dec_label_pc_c6ec
  %v0_c6f0 = load i32, i32* @r8, align 4
  %v3_c6f0 = mul i32 %v0_c6f0, 65536
  store i32 %v3_c6f0, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_c6f0, 256
  %v1_c6f8 = and i32 %tmp91, 65280
  store i32 %v1_c6f8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_c6f0, 256
  %v4_c704 = urem i32 %tmp92, 256
  %v5_c704 = or i32 %v4_c704, %v1_c6f8
  store i32 %v5_c704, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c70c

dec_label_pc_c70c:                                ; preds = %dec_label_pc_c78c, %dec_label_pc_c6f0
  %v1_c720 = phi i32 [ %v1_c81c, %dec_label_pc_c78c ], [ 0, %dec_label_pc_c6f0 ]
  %v5_c710 = mul i32 %v1_c720, 24
  %v1_c714 = load i32, i32* @sb, align 4
  %v2_c714 = add i32 %v1_c714, %v5_c710
  store i32 %v2_c714, i32* %r3.global-to-local, align 4
  store i32 %v2_c218, i32* %ip.global-to-local, align 4
  %v1_c71c = add i32 %v2_c714, 20
  %v2_c71c = inttoptr i32 %v1_c71c to i8*
  %v3_c71c = load i8, i8* %v2_c71c, align 1
  %v4_c71c = zext i8 %v3_c71c to i32
  store i32 %v4_c71c, i32* %r2.global-to-local, align 4
  %v4_c720 = mul i32 %v1_c720, 4
  %v5_c720 = add i32 %v4_c720, %v2_c218
  %v6_c720 = inttoptr i32 %v5_c720 to i32*
  %v7_c720 = load i32, i32* %v6_c720, align 4
  store i32 %v7_c720, i32* @r5, align 4
  %v7_c724 = icmp eq i8 %v3_c71c, 31
  store i1 %v7_c724, i1* %cpsr_z.global-to-local, align 1
  %v1_c728 = add i32 %v7_c720, 20
  store i32 %v1_c728, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_c71c, 32
  br i1 %tmp100, label %dec_label_pc_c840, label %dec_label_pc_c730

dec_label_pc_c730:                                ; preds = %dec_label_pc_c70c
  store i32 %v6_c3e8, i32* %r1.global-to-local, align 4
  store i1 %v8_c89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c73c

dec_label_pc_c73c:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c730
  store i32 %v3_c444, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c8b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c8b8, label %dec_label_pc_c8c4, label %dec_label_pc_c750

dec_label_pc_c750:                                ; preds = %dec_label_pc_c8a8.dec_label_pc_c750_crit_edge, %dec_label_pc_c73c
  %v1_c754 = phi i32 [ %v1_c754.pre, %dec_label_pc_c8a8.dec_label_pc_c750_crit_edge ], [ 65535, %dec_label_pc_c73c ]
  store i32 %v3_c448, i32* %r3.global-to-local, align 4
  %v9_c754 = icmp eq i32 %v3_c448, %v1_c754
  store i1 %v9_c754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c754, label %dec_label_pc_c8e0, label %dec_label_pc_c75c

dec_label_pc_c75c:                                ; preds = %dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge, %dec_label_pc_c750
  %v1_c760 = phi i32 [ %v1_c760.pre, %dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge ], [ %v1_c754, %dec_label_pc_c750 ]
  store i32 %v3_c44c, i32* %ip.global-to-local, align 4
  %v9_c760 = icmp eq i32 %v3_c44c, %v1_c760
  store i1 %v9_c760, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c760, label %dec_label_pc_c8fc, label %dec_label_pc_c768

dec_label_pc_c768:                                ; preds = %dec_label_pc_c8e0.dec_label_pc_c768_crit_edge, %dec_label_pc_c75c
  %v1_c76c = phi i32 [ %v1_c76c.pre, %dec_label_pc_c8e0.dec_label_pc_c768_crit_edge ], [ %v1_c760, %dec_label_pc_c75c ]
  store i32 %v5_c2e8, i32* %r1.global-to-local, align 4
  %v9_c76c = icmp eq i32 %v5_c2e8, %v1_c76c
  store i1 %v9_c76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c76c, label %dec_label_pc_c918, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c8fc.dec_label_pc_c774_crit_edge, %dec_label_pc_c768
  %v1_c778 = phi i32 [ %v1_c778.pre, %dec_label_pc_c8fc.dec_label_pc_c774_crit_edge ], [ %v1_c76c, %dec_label_pc_c768 ]
  store i32 %v6_c304, i32* %r2.global-to-local, align 4
  %v9_c778 = icmp eq i32 %v6_c304, %v1_c778
  store i1 %v9_c778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c778, label %dec_label_pc_c92c, label %dec_label_pc_c780

dec_label_pc_c780:                                ; preds = %dec_label_pc_c918, %dec_label_pc_c774
  store i32 %v1_c3d4, i32* %r3.global-to-local, align 4
  store i1 %v2_c934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c934, label %dec_label_pc_c78c, label %dec_label_pc_c940

dec_label_pc_c78c:                                ; preds = %dec_label_pc_c780, %dec_label_pc_c92c, %dec_label_pc_c940
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c790 = load i32, i32* @r7, align 4
  %v1_c790 = trunc i32 %v0_c790 to i8
  %v2_c790 = load i32, i32* @r5, align 4
  %v3_c790 = add i32 %v2_c790, 10
  %v4_c790 = inttoptr i32 %v3_c790 to i8*
  store i8 %v1_c790, i8* %v4_c790, align 1
  %v0_c794 = load i32, i32* @r7, align 4
  %v1_c794 = trunc i32 %v0_c794 to i8
  %v2_c794 = load i32, i32* @r5, align 4
  %v3_c794 = add i32 %v2_c794, 11
  %v4_c794 = inttoptr i32 %v3_c794 to i8*
  store i8 %v1_c794, i8* %v4_c794, align 1
  %v0_c798 = load i32, i32* @r5, align 4
  store i32 %v0_c798, i32* @r0, align 4
  %v2_c79c = call i32 @function_d0b8(i32 %v0_c798, i32 20)
  %v3_c79c = trunc i32 %v2_c79c to i8
  %v4_c7a028 = udiv i32 %v2_c79c, 256
  %v1_c7a4 = trunc i32 %v4_c7a028 to i8
  %v2_c7a4 = load i32, i32* @r5, align 4
  %v3_c7a4 = add i32 %v2_c7a4, 11
  %v4_c7a4 = inttoptr i32 %v3_c7a4 to i8*
  store i8 %v1_c7a4, i8* %v4_c7a4, align 1
  %v3_c7a8 = load i32, i32* @r5, align 4
  %v4_c7a8 = add i32 %v3_c7a8, 10
  %v5_c7a8 = inttoptr i32 %v4_c7a8 to i8*
  store i8 %v3_c79c, i8* %v5_c7a8, align 1
  %v0_c7ac = load i32, i32* @r6, align 4
  store i32 %v0_c7ac, i32* @r1, align 4
  %v0_c7b0 = load i32, i32* @sl, align 4
  store i32 %v0_c7b0, i32* %r2.global-to-local, align 4
  %v0_c7b4 = load i32, i32* @r8, align 4
  store i32 %v0_c7b4, i32* %r3.global-to-local, align 4
  %v0_c7b8 = load i32, i32* @r7, align 4
  %v1_c7b8 = trunc i32 %v0_c7b8 to i8
  %v3_c7b8 = add i32 %v0_c7ac, 16
  %v4_c7b8 = inttoptr i32 %v3_c7b8 to i8*
  store i8 %v1_c7b8, i8* %v4_c7b8, align 1
  %v0_c7bc = load i32, i32* @r7, align 4
  %v1_c7bc = trunc i32 %v0_c7bc to i8
  %v2_c7bc = load i32, i32* @r6, align 4
  %v3_c7bc = add i32 %v2_c7bc, 17
  %v4_c7bc = inttoptr i32 %v3_c7bc to i8*
  store i8 %v1_c7bc, i8* %v4_c7bc, align 1
  %v0_c7c0 = load i32, i32* @r5, align 4
  %v4_c7c4 = call i32 @function_d114(i32 %v0_c7c0, i32 %v0_c7ac, i32 %v0_c7b0, i32 %v0_c7b4)
  %v5_c7c4 = trunc i32 %v4_c7c4 to i8
  %v4_c7c829 = udiv i32 %v4_c7c4, 256
  %v1_c7cc = trunc i32 %v4_c7c829 to i8
  %v2_c7cc = load i32, i32* @r6, align 4
  %v3_c7cc = add i32 %v2_c7cc, 17
  %v4_c7cc = inttoptr i32 %v3_c7cc to i8*
  store i8 %v1_c7cc, i8* %v4_c7cc, align 1
  %v3_c7d0 = load i32, i32* @r6, align 4
  %v4_c7d0 = add i32 %v3_c7d0, 16
  %v5_c7d0 = inttoptr i32 %v4_c7d0 to i8*
  store i8 %v5_c7c4, i8* %v5_c7d0, align 1
  %v3_c7d4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7d4, i32* %r3.global-to-local, align 4
  %v0_c7d8 = load i32, i32* @r5, align 4
  %v1_c7d8 = add i32 %v0_c7d8, 20
  %v2_c7d8 = inttoptr i32 %v1_c7d8 to i32*
  %v3_c7d8 = load i32, i32* %v2_c7d8, align 4
  %v3_c7e0 = udiv i32 %v3_c7d8, 65536
  store i32 %v3_c7e0, i32* %r2.global-to-local, align 4
  %v5_c7e4 = mul i32 %v3_c7d4, 24
  %v1_c7e8 = load i32, i32* @sb, align 4
  %v2_c7e8 = add i32 %v1_c7e8, %v5_c7e4
  store i32 %v2_c7e8, i32* %ip.global-to-local, align 4
  %v3_c7ec27 = udiv i32 %v3_c7d8, 16777216
  %v1_c7f0 = trunc i32 %v3_c7ec27 to i8
  %v3_c7f0 = add i32 %v2_c7e8, 3
  %v4_c7f0 = inttoptr i32 %v3_c7f0 to i8*
  store i8 %v1_c7f0, i8* %v4_c7f0, align 1
  %v0_c7f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c7f4 = trunc i32 %v0_c7f4 to i8
  %v2_c7f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c7f4 = add i32 %v2_c7f4, 2
  %v4_c7f4 = inttoptr i32 %v3_c7f4 to i8*
  store i8 %v1_c7f4, i8* %v4_c7f4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c7fc = load i32, i32* @r5, align 4
  store i32 %v0_c7fc, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c80c = load i32, i32* %ip.global-to-local, align 4
  %v6_c814 = inttoptr i32 %v0_c7fc to i32*
  %v7_c814 = call i32 @function_11b4c(i32 %v3_c3fc, i32* %v6_c814, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_c80c, i32 16)
  %v3_c818 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c818, i32* %r3.global-to-local, align 4
  %v1_c81c = add i32 %v3_c818, 1
  %v0_c820 = load i32, i32* @fp, align 4
  %v9_c820 = icmp eq i32 %v0_c820, %v1_c81c
  store i1 %v9_c820, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c81c, i32* %stack_var_-40, align 4
  %v7_c828 = icmp sgt i32 %v0_c820, %v1_c81c
  br i1 %v7_c828, label %dec_label_pc_c70c, label %dec_label_pc_c6e4

dec_label_pc_c830:                                ; preds = %dec_label_pc_c40c
  %v1_c834 = call i32 @function_112cc(i32 %v3_c3fc)
  br label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c1f8, %dec_label_pc_c830
  %v29_c83c = phi i32 [ %v3_c3fc, %dec_label_pc_c1f8 ], [ %v1_c834, %dec_label_pc_c830 ]
  ret i32 %v29_c83c

dec_label_pc_c840:                                ; preds = %dec_label_pc_c70c
  %v1_c840 = add i32 %v2_c714, 16
  %v2_c840 = inttoptr i32 %v1_c840 to i32*
  %v3_c840 = load i32, i32* %v2_c840, align 4
  %v0_c844 = call i32 @function_e72c()
  %v3_c848 = load i32, i32* %stack_var_-40, align 4
  %v5_c850 = mul i32 %v3_c848, 24
  %v1_c858 = load i32, i32* @sb, align 4
  %v2_c858 = add i32 %v1_c858, %v5_c850
  store i32 %v2_c858, i32* %r1.global-to-local, align 4
  %v1_c85c = and i32 %v3_c840, 65280
  store i32 %v1_c85c, i32* %r3.global-to-local, align 4
  %v1_c854 = udiv i32 %v3_c840, 256
  %v3_c860 = and i32 %v1_c854, 65280
  store i32 %v3_c860, i32* %r2.global-to-local, align 4
  %v3_c864 = mul i32 %v3_c840, 16777216
  store i32 %v3_c864, i32* %ip.global-to-local, align 4
  %v1_c868 = add i32 %v2_c858, 20
  %v2_c868 = inttoptr i32 %v1_c868 to i8*
  %v3_c868 = load i8, i8* %v2_c868, align 1
  %v4_c868 = zext i8 %v3_c868 to i32
  %v4_c86c = mul nuw nsw i32 %v1_c85c, 256
  %v5_c86c = or i32 %v4_c86c, %v3_c864
  store i32 %v5_c86c, i32* %ip.global-to-local, align 4
  %v2_c874 = call i32 @llvm.bswap.i32(i32 %v3_c840)
  %v7_c878 = lshr i32 %v0_c844, %v4_c868
  %v8_c878 = add i32 %v7_c878, %v2_c874
  store i32 %v8_c878, i32* %r2.global-to-local, align 4
  %v2_c894 = call i32 @llvm.bswap.i32(i32 %v8_c878)
  store i32 %v2_c894, i32* %r3.global-to-local, align 4
  store i32 %v6_c3e8, i32* %r1.global-to-local, align 4
  store i1 %v8_c89c, i1* %cpsr_z.global-to-local, align 1
  %v1_c8a0 = load i32, i32* @r5, align 4
  %v2_c8a0 = add i32 %v1_c8a0, 16
  %v3_c8a0 = inttoptr i32 %v2_c8a0 to i32*
  store i32 %v2_c894, i32* %v3_c8a0, align 4
  br i1 %v3_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c73c

dec_label_pc_c8a8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c730
  %v0_c8a8 = call i32 @function_e72c()
  store i32 %v3_c444, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c8b8, i1* %cpsr_z.global-to-local, align 1
  %v1_c8bc = load i32, i32* @r5, align 4
  %v2_c8bc = add i32 %v1_c8bc, 12
  %v3_c8bc = inttoptr i32 %v2_c8bc to i32*
  store i32 %v0_c8a8, i32* %v3_c8bc, align 4
  br i1 %v3_c8b8, label %dec_label_pc_c8c4, label %dec_label_pc_c8a8.dec_label_pc_c750_crit_edge

dec_label_pc_c8a8.dec_label_pc_c750_crit_edge:    ; preds = %dec_label_pc_c8a8
  %v1_c754.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c750

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c8a8, %dec_label_pc_c73c
  %v0_c8c4 = call i32 @function_e72c()
  %v1_c8c4 = trunc i32 %v0_c8c4 to i8
  %v4_c8c830 = udiv i32 %v0_c8c4, 256
  %v1_c8cc = trunc i32 %v4_c8c830 to i8
  %v2_c8cc = load i32, i32* @r5, align 4
  %v3_c8cc = add i32 %v2_c8cc, 5
  %v4_c8cc = inttoptr i32 %v3_c8cc to i8*
  store i8 %v1_c8cc, i8* %v4_c8cc, align 1
  store i32 %v3_c448, i32* %r3.global-to-local, align 4
  %v1_c8d4 = load i32, i32* @r4, align 4
  %v9_c8d4 = icmp eq i32 %v3_c448, %v1_c8d4
  store i1 %v9_c8d4, i1* %cpsr_z.global-to-local, align 1
  %v3_c8d8 = load i32, i32* @r5, align 4
  %v4_c8d8 = add i32 %v3_c8d8, 4
  %v5_c8d8 = inttoptr i32 %v4_c8d8 to i8*
  store i8 %v1_c8c4, i8* %v5_c8d8, align 1
  %v0_c8dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8dc, label %dec_label_pc_c8e0, label %dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge

dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge:    ; preds = %dec_label_pc_c8c4
  %v1_c760.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c75c

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c750
  %v0_c8e0 = call i32 @function_e72c()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  store i32 %v3_c44c, i32* %ip.global-to-local, align 4
  %v4_c8e8 = sdiv i32 %v0_c8e0, 256
  store i32 %v4_c8e8, i32* %r3.global-to-local, align 4
  %v1_c8ec = load i32, i32* @r4, align 4
  %v9_c8ec = icmp eq i32 %v3_c44c, %v1_c8ec
  store i1 %v9_c8ec, i1* %cpsr_z.global-to-local, align 1
  %v3_c8f0 = load i32, i32* @r5, align 4
  %v4_c8f0 = add i32 %v3_c8f0, 20
  %v5_c8f0 = inttoptr i32 %v4_c8f0 to i8*
  store i8 %v1_c8e0, i8* %v5_c8f0, align 1
  %v0_c8f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c8f4 = trunc i32 %v0_c8f4 to i8
  %v2_c8f4 = load i32, i32* @r6, align 4
  %v3_c8f4 = add i32 %v2_c8f4, 1
  %v4_c8f4 = inttoptr i32 %v3_c8f4 to i8*
  store i8 %v1_c8f4, i8* %v4_c8f4, align 1
  %v0_c8f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8f8, label %dec_label_pc_c8fc, label %dec_label_pc_c8e0.dec_label_pc_c768_crit_edge

dec_label_pc_c8e0.dec_label_pc_c768_crit_edge:    ; preds = %dec_label_pc_c8e0
  %v1_c76c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c768

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8e0, %dec_label_pc_c75c
  %v0_c8fc = call i32 @function_e72c()
  %v1_c8fc = trunc i32 %v0_c8fc to i8
  store i32 %v5_c2e8, i32* %r1.global-to-local, align 4
  %v4_c904 = sdiv i32 %v0_c8fc, 256
  store i32 %v4_c904, i32* %r3.global-to-local, align 4
  %v1_c908 = load i32, i32* @r4, align 4
  %v9_c908 = icmp eq i32 %v5_c2e8, %v1_c908
  store i1 %v9_c908, i1* %cpsr_z.global-to-local, align 1
  %v1_c90c = trunc i32 %v4_c904 to i8
  %v2_c90c = load i32, i32* @r6, align 4
  %v3_c90c = add i32 %v2_c90c, 3
  %v4_c90c = inttoptr i32 %v3_c90c to i8*
  store i8 %v1_c90c, i8* %v4_c90c, align 1
  %v3_c910 = load i32, i32* @r6, align 4
  %v4_c910 = add i32 %v3_c910, 2
  %v5_c910 = inttoptr i32 %v4_c910 to i8*
  store i8 %v1_c8fc, i8* %v5_c910, align 1
  %v0_c914 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c914, label %dec_label_pc_c918, label %dec_label_pc_c8fc.dec_label_pc_c774_crit_edge

dec_label_pc_c8fc.dec_label_pc_c774_crit_edge:    ; preds = %dec_label_pc_c8fc
  %v1_c778.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c774

dec_label_pc_c918:                                ; preds = %dec_label_pc_c8fc, %dec_label_pc_c768
  %v0_c918 = call i32 @function_e72c()
  store i32 %v6_c304, i32* %r2.global-to-local, align 4
  %v1_c920 = load i32, i32* @r4, align 4
  %v9_c920 = icmp eq i32 %v6_c304, %v1_c920
  store i1 %v9_c920, i1* %cpsr_z.global-to-local, align 1
  %v1_c924 = load i32, i32* @r6, align 4
  %v2_c924 = add i32 %v1_c924, 4
  %v3_c924 = inttoptr i32 %v2_c924 to i32*
  store i32 %v0_c918, i32* %v3_c924, align 4
  br i1 %v9_c920, label %dec_label_pc_c92c, label %dec_label_pc_c780

dec_label_pc_c92c:                                ; preds = %dec_label_pc_c918, %dec_label_pc_c774
  %v0_c92c = call i32 @function_e72c()
  store i32 %v1_c3d4, i32* %r3.global-to-local, align 4
  store i1 %v2_c934, i1* %cpsr_z.global-to-local, align 1
  %v1_c938 = load i32, i32* @r6, align 4
  %v2_c938 = add i32 %v1_c938, 8
  %v3_c938 = inttoptr i32 %v2_c938 to i32*
  store i32 %v0_c92c, i32* %v3_c938, align 4
  br i1 %v2_c934, label %dec_label_pc_c78c, label %dec_label_pc_c940

dec_label_pc_c940:                                ; preds = %dec_label_pc_c780, %dec_label_pc_c92c
  %v0_c940 = load i32, i32* @r5, align 4
  %v1_c940 = add i32 %v0_c940, 40
  store i32 %v6_c3ac, i32* @r1, align 4
  %v1_c948 = inttoptr i32 %v1_c940 to i8*
  %v2_c948 = call i32 @function_e8ac(i8* %v1_c948)
  br label %dec_label_pc_c78c

dec_label_pc_c950:                                ; preds = %dec_label_pc_c434
  store i32 %v6_c3ac, i32* %r3.global-to-local, align 4
  %v1_c958 = add i32 %v6_c3ac, 40
  store i32 %v1_c958, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c6e4.preheader

; uselistorder directives
  uselistorder i32 %v1_c958, { 1, 0 }
  uselistorder i32 %v4_c904, { 1, 0 }
  uselistorder i32 %v2_c894, { 1, 0 }
  uselistorder i32 %v3_c864, { 1, 0 }
  uselistorder i32 %v3_c840, { 1, 3, 2, 0 }
  uselistorder i32 %v0_c820, { 1, 2, 0 }
  uselistorder i32 %v1_c81c, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c7ac, { 1, 0, 2 }
  uselistorder i32 %v0_c6f0, { 2, 0, 1 }
  uselistorder i32 %v0_c6e4, { 1, 0 }
  uselistorder i1 %v2_c934, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c8b8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c6cc, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c530, { 1, 0 }
  uselistorder i32 %v1_c4f8, { 1, 0 }
  uselistorder i32 %v1_c4f4, { 1, 0 }
  uselistorder i32 %v1_c4f0, { 1, 0 }
  uselistorder i32 %v1_c4cc, { 1, 0 }
  uselistorder i32 %v1_c4c8, { 1, 0 }
  uselistorder i32 %v1_c4c4, { 1, 0 }
  uselistorder i32 %v1_c4b8, { 1, 0 }
  uselistorder i32 %v1_c494, { 1, 0 }
  uselistorder i32 %v1_c484, { 1, 0 }
  uselistorder i32 %v1_c470, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c450, { 1, 0, 2 }
  uselistorder i32 %v3_c444, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c438, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c434, { 0, 2, 1, 3 }
  uselistorder i1 %v7_c42c, { 1, 0 }
  uselistorder i1 %v7_c400, { 1, 0 }
  uselistorder i32 %v3_c3fc, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_c3e8, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_c3d4, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_c3ac, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_c304, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c2e8, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_c298, { 1, 0 }
  uselistorder i32 %v6_c230, { 1, 0 }
  uselistorder i32 %v2_c218, { 0, 3, 1, 2 }
  uselistorder i32 %v1_c1fc, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32 (i8*)* @function_e8ac, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10 }
  uselistorder label %dec_label_pc_c940, { 1, 0 }
  uselistorder label %dec_label_pc_c838, { 1, 0 }
  uselistorder label %dec_label_pc_c78c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c6e4.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c96c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c96c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c96c = load i32, i32* @r4, align 4
  %v12_c96c = load i32, i32* @r7, align 4
  %v1_c970 = urem i32 %arg1, 256
  store i32 %v1_c970, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_c970, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c988 = urem i32 %arg3, 256
  store i32 %v1_c988, i32* @r4, align 4
  %v2_c98c = call i32 @function_11e9c(i32 %v1_c970, i32 4)
  %v0_c990 = load i32, i32* @r5, align 4
  store i32 %v0_c990, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c98c, i32* %fp.global-to-local, align 4
  %v0_c9a0 = load i32, i32* @r4, align 4
  store i32 %v0_c9a0, i32* %r0.global-to-local, align 4
  %v4_c9a4 = inttoptr i32 %v0_c990 to i32*
  %v5_c9a4 = call i32 @function_85e0(i32 %v0_c9a0, i32* %v4_c9a4, i32 2, i32 0)
  %v1_c9b0 = urem i32 %v5_c9a4, 256
  store i32 %v1_c9b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c9bc = load i32, i32* @r5, align 4
  store i32 %v0_c9bc, i32* %r1.global-to-local, align 4
  %v0_c9c0 = load i32, i32* @r4, align 4
  store i32 %v0_c9c0, i32* %r0.global-to-local, align 4
  %v5_c9c4 = trunc i32 %v5_c9a4 to i8
  %v6_c9c8 = inttoptr i32 %v0_c9bc to i32*
  %v7_c9c8 = call i32 @function_85e0(i32 %v0_c9c0, i32* %v6_c9c8, i32 3, i32 65535)
  %v0_c9cc = load i32, i32* @r5, align 4
  store i32 %v0_c9cc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c9dc = load i32, i32* @r4, align 4
  store i32 %v0_c9dc, i32* %r0.global-to-local, align 4
  %v5_c9e0 = inttoptr i32 %v0_c9cc to i32*
  %v6_c9e0 = call i32 @function_85e0(i32 %v0_c9dc, i32* %v5_c9e0, i32 4, i32 64)
  %v1_c9e8 = urem i32 %v6_c9e0, 256
  store i32 %v1_c9e8, i32* %ip.global-to-local, align 4
  %v0_c9ec = load i32, i32* @r5, align 4
  store i32 %v0_c9ec, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c9f8 = load i32, i32* @r4, align 4
  store i32 %v0_c9f8, i32* %r0.global-to-local, align 4
  %v6_ca00 = inttoptr i32 %v0_c9ec to i32*
  %v7_ca00 = call i32 @function_85e0(i32 %v0_c9f8, i32* %v6_ca00, i32 5, i32 1)
  %v1_ca0c = urem i32 %v7_ca00, 256
  store i32 %v1_ca0c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ca18 = load i32, i32* @r5, align 4
  store i32 %v0_ca18, i32* %r1.global-to-local, align 4
  %v0_ca1c = load i32, i32* @r4, align 4
  store i32 %v0_ca1c, i32* %r0.global-to-local, align 4
  %v5_ca24 = inttoptr i32 %v0_ca18 to i32*
  %v6_ca24 = call i32 @function_85e0(i32 %v0_ca1c, i32* %v5_ca24, i32 6, i32 65535)
  %v0_ca2c = load i32, i32* @r5, align 4
  store i32 %v0_ca2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_ca24, i32* @r7, align 4
  %v0_ca3c = load i32, i32* @r4, align 4
  store i32 %v0_ca3c, i32* %r0.global-to-local, align 4
  %v4_ca40 = inttoptr i32 %v0_ca2c to i32*
  %v5_ca40 = call i32 @function_85e0(i32 %v0_ca3c, i32* %v4_ca40, i32 7, i32 65535)
  %v0_ca48 = load i32, i32* @r5, align 4
  store i32 %v0_ca48, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_ca40, i32* @r6, align 4
  %v0_ca58 = load i32, i32* @r4, align 4
  store i32 %v0_ca58, i32* %r0.global-to-local, align 4
  %v4_ca5c = inttoptr i32 %v0_ca48 to i32*
  %v5_ca5c = call i32 @function_85e0(i32 %v0_ca58, i32* %v4_ca5c, i32 17, i32 65535)
  %v0_ca60 = load i32, i32* @r5, align 4
  store i32 %v0_ca60, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca70 = load i32, i32* @r4, align 4
  store i32 %v0_ca70, i32* %r0.global-to-local, align 4
  %v5_ca74 = inttoptr i32 %v0_ca60 to i32*
  %v6_ca74 = call i32 @function_85e0(i32 %v0_ca70, i32* %v5_ca74, i32 18, i32 0)
  %v0_ca78 = load i32, i32* @r5, align 4
  store i32 %v0_ca78, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca88 = load i32, i32* @r4, align 4
  store i32 %v0_ca88, i32* %r0.global-to-local, align 4
  %v5_ca8c = inttoptr i32 %v0_ca78 to i32*
  %v6_ca8c = call i32 @function_85e0(i32 %v0_ca88, i32* %v5_ca8c, i32 11, i32 0)
  %v0_ca90 = load i32, i32* @r5, align 4
  store i32 %v0_ca90, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_caa0 = load i32, i32* @r4, align 4
  store i32 %v0_caa0, i32* %r0.global-to-local, align 4
  %v5_caa4 = inttoptr i32 %v0_ca90 to i32*
  %v6_caa4 = call i32 @function_85e0(i32 %v0_caa0, i32* %v5_caa4, i32 12, i32 0)
  %v0_caa8 = load i32, i32* @r5, align 4
  store i32 %v0_caa8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cab8 = load i32, i32* @r4, align 4
  store i32 %v0_cab8, i32* %r0.global-to-local, align 4
  %v5_cabc = inttoptr i32 %v0_caa8 to i32*
  %v6_cabc = call i32 @function_85e0(i32 %v0_cab8, i32* %v5_cabc, i32 13, i32 0)
  %v0_cac0 = load i32, i32* @r5, align 4
  store i32 %v0_cac0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cad0 = load i32, i32* @r4, align 4
  store i32 %v0_cad0, i32* %r0.global-to-local, align 4
  %v5_cad4 = inttoptr i32 %v0_cac0 to i32*
  %v6_cad4 = call i32 @function_85e0(i32 %v0_cad0, i32* %v5_cad4, i32 14, i32 0)
  %v0_cad8 = load i32, i32* @r5, align 4
  store i32 %v0_cad8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cae8 = load i32, i32* @r4, align 4
  store i32 %v0_cae8, i32* %r0.global-to-local, align 4
  %v5_caec = inttoptr i32 %v0_cad8 to i32*
  %v6_caec = call i32 @function_85e0(i32 %v0_cae8, i32* %v5_caec, i32 15, i32 1)
  %v0_caf0 = load i32, i32* @r5, align 4
  store i32 %v0_caf0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cb00 = load i32, i32* @r4, align 4
  store i32 %v0_cb00, i32* %r0.global-to-local, align 4
  %v5_cb04 = inttoptr i32 %v0_caf0 to i32*
  %v6_cb04 = call i32 @function_85e0(i32 %v0_cb00, i32* %v5_cb04, i32 16, i32 0)
  %v2_cb10 = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_cb10, i32* %r3.global-to-local, align 4
  %v0_cb14 = load i32, i32* @r5, align 4
  store i32 %v0_cb14, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_cb1c = load i32, i32* @r4, align 4
  store i32 %v0_cb1c, i32* %r0.global-to-local, align 4
  %v5_cb20 = inttoptr i32 %v0_cb14 to i32*
  %v6_cb20 = call i32 @function_8574(i32 %v0_cb1c, i32* %v5_cb20, i32 25, i32 %v2_cb10, i32 %v6_cb04)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cb34 = call i32 @function_11bb0(i32 2, i32 3, i32 6)
  store i32 %v3_cb34, i32* %r0.global-to-local, align 4
  %v7_cb38 = icmp eq i32 %v3_cb34, -1
  store i1 %v7_cb38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_cb34, i32* %sb.global-to-local, align 4
  br i1 %v7_cb38, label %dec_label_pc_d0ac, label %dec_label_pc_cb44

dec_label_pc_cb44:                                ; preds = %dec_label_pc_c96c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cb4c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cb4c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_cb60 = call i32 @function_11b80(i32 %v3_cb34, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_cb60, i32* %r0.global-to-local, align 4
  %v7_cb64 = icmp eq i32 %v6_cb60, -1
  store i1 %v7_cb64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb64, label %dec_label_pc_d0a4, label %dec_label_pc_cb6c

dec_label_pc_cb6c:                                ; preds = %dec_label_pc_cb44
  %v3_cb70 = mul i32 %v7_c9c8, 65536
  store i32 %v3_cb70, i32* %r4.global-to-local, align 4
  %v3_cb74 = urem i32 %v7_c9c8, 65536
  %v0_cb84 = load i32, i32* @r7, align 4
  %v3_cb84 = mul i32 %v0_cb84, 65536
  store i32 %v3_cb84, i32* %r0.global-to-local, align 4
  %v0_cb88 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_cb90 = urem i32 %v0_cb84, 65536
  store i32 %v3_cb90, i32* %ip.global-to-local, align 4
  %v3_cb94 = urem i32 %v0_cb88, 65536
  store i32 %v3_cb94, i32* %r2.global-to-local, align 4
  %v1_cb98 = urem i32 %v6_ca8c, 256
  store i32 %v1_cb98, i32* %r3.global-to-local, align 4
  %v0_cb9c = load i32, i32* @sl, align 4
  %v2_cb9c = icmp eq i32 %v0_cb9c, 0
  store i1 %v2_cb9c, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_cb9c, 1
  br i1 %tmp69, label %dec_label_pc_ce50, label %dec_label_pc_cbb0

dec_label_pc_cbb0:                                ; preds = %dec_label_pc_cb6c
  %v3_cbb8 = mul i32 %v5_ca5c, 65536
  store i32 %v3_cbb8, i32* @lr, align 4
  %v1_cbc8 = urem i32 %v0_cb88, 256
  %tmp70 = udiv i32 %v0_cb84, 256
  %v3_cbcc = urem i32 %tmp70, 256
  %v1_cbd0 = urem i32 %v0_cb84, 256
  %v4_cbd4 = mul nuw nsw i32 %v1_cbd0, 256
  %v5_cbd4 = or i32 %v4_cbd4, %v3_cbcc
  store i32 %v5_cbd4, i32* @r7, align 4
  %tmp71 = udiv i32 %v7_c9c8, 256
  %tmp72 = mul i32 %v5_ca5c, 256
  %v1_cbf0 = and i32 %tmp72, 65280
  %v1_cbf4 = urem i32 %v6_ca8c, 2
  %v3_cbf8 = mul nuw nsw i32 %v1_cbc8, 256
  store i32 %v3_cbf8, i32* %r1.global-to-local, align 4
  %v5_cbfc = trunc i32 %tmp71 to i8
  %tmp73 = udiv i32 %v0_cb88, 256
  %v4_cc00 = urem i32 %tmp73, 256
  %v5_cc00 = or i32 %v4_cc00, %v3_cbf8
  store i32 %v5_cc00, i32* @r6, align 4
  %v1_cc04 = urem i32 %v6_caa4, 2
  %v1_cc08 = urem i32 %v6_cabc, 2
  %tmp74 = udiv i32 %v5_ca5c, 256
  %v4_cc0c = urem i32 %tmp74, 256
  %v5_cc0c = or i32 %v4_cc0c, %v1_cbf0
  store i32 %v5_cc0c, i32* @r5, align 4
  %v1_cc2c = urem i32 %v6_cad4, 2
  %v1_cc30 = urem i32 %v6_caec, 2
  %v1_cc3c = urem i32 %v6_cb04, 2
  store i32 %v1_cc3c, i32* %r0.global-to-local, align 4
  %v3_cc40 = udiv i32 %v7_c9c8, 65536
  store i32 %v3_cc40, i32* %r2.global-to-local, align 4
  store i32 %v1_cbd0, i32* %r3.global-to-local, align 4
  store i32 %v1_cbc8, i32* %ip.global-to-local, align 4
  %v5_cc58 = trunc i32 %v0_cb88 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_c9e0, 16777216
  %v4_cca8 = sdiv i32 %sext, 16777216
  %tmp = sub nsw i32 0, %v1_cbf4
  %v4_cd1c = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_cc04
  %v4_cd30 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_cc08
  %v4_cd44 = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_cc2c
  %v4_cd58 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_cc30
  %v3_cd6c = and i32 %tmp81, 2
  %v7_cd9c = sext i8 %v5_cc58 to i32
  %sext77 = mul i32 %v0_cb84, 16777216
  %v3_cd9c = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_cc60

dec_label_pc_cc60:                                ; preds = %bb76, %dec_label_pc_cbb0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_cc68 = call i32 @function_11e9c(i32 128, i32 1)
  store i32 %v2_cc68, i32* %r0.global-to-local, align 4
  %v3_cc6c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc6c, i32* %r2.global-to-local, align 4
  %v1_cc70 = load i32, i32* %fp.global-to-local, align 4
  %v2_cc70 = load i32, i32* @r4, align 4
  %v5_cc70 = mul i32 %v2_cc70, 4
  %v6_cc70 = add i32 %v5_cc70, %v1_cc70
  %v7_cc70 = inttoptr i32 %v6_cc70 to i32*
  store i32 %v2_cc68, i32* %v7_cc70, align 4
  %v0_cc74 = load i32, i32* %fp.global-to-local, align 4
  %v1_cc74 = load i32, i32* %r2.global-to-local, align 4
  %v4_cc74 = mul i32 %v1_cc74, 4
  %v5_cc74 = add i32 %v4_cc74, %v0_cc74
  %v6_cc74 = inttoptr i32 %v5_cc74 to i32*
  %v7_cc74 = load i32, i32* %v6_cc74, align 4
  store i32 %v7_cc74, i32* %r4.global-to-local, align 4
  %v1_cc78 = inttoptr i32 %v7_cc74 to i8*
  %v2_cc78 = load i8, i8* %v1_cc78, align 1
  %tmp82 = urem i8 %v2_cc78, 16
  %v1_cc7c = zext i8 %tmp82 to i32
  %v1_cc80 = or i32 %v1_cc7c, 64
  store i32 %v1_cc80, i32* %r3.global-to-local, align 4
  %v1_cc84 = trunc i32 %v1_cc80 to i8
  store i8 %v1_cc84, i8* %v1_cc78, align 1
  %v0_cc88 = load i32, i32* %r4.global-to-local, align 4
  %v1_cc88 = inttoptr i32 %v0_cc88 to i8*
  %v2_cc88 = load i8, i8* %v1_cc88, align 1
  %v1_cc8c = and i8 %v2_cc88, -16
  %v1_cc90 = or i8 %v1_cc8c, 5
  store i32 %v1_ca0c, i32* %r0.global-to-local, align 4
  store i8 %v1_cc90, i8* %v1_cc88, align 1
  %v2_cca0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cca0 = add i32 %v2_cca0, 1
  %v4_cca0 = inttoptr i32 %v3_cca0 to i8*
  store i8 %v5_c9c4, i8* %v4_cca0, align 1
  store i32 %v4_cca8, i32* %r2.global-to-local, align 4
  %v2_ccac = load i32, i32* %r4.global-to-local, align 4
  %v3_ccac = add i32 %v2_ccac, 4
  %v4_ccac = inttoptr i32 %v3_ccac to i8*
  store i8 %v5_cbfc, i8* %v4_ccac, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_ccb8 = load i32, i32* %r0.global-to-local, align 4
  %v2_ccb8 = icmp eq i32 %v0_ccb8, 0
  store i1 %v2_ccb8, i1* %cpsr_z.global-to-local, align 1
  %v2_ccbc = load i32, i32* %r4.global-to-local, align 4
  %v3_ccbc = add i32 %v2_ccbc, 3
  %v4_ccbc = inttoptr i32 %v3_ccbc to i8*
  store i8 60, i8* %v4_ccbc, align 1
  store i32 %v3_cc40, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ccc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccc8 = trunc i32 %v0_ccc8 to i8
  %v2_ccc8 = load i32, i32* %r4.global-to-local, align 4
  %v3_ccc8 = add i32 %v2_ccc8, 8
  %v4_ccc8 = inttoptr i32 %v3_ccc8 to i8*
  store i8 %v1_ccc8, i8* %v4_ccc8, align 1
  %v0_cccc = load i32, i32* %ip.global-to-local, align 4
  %v1_cccc = trunc i32 %v0_cccc to i8
  %v2_cccc = load i32, i32* %r4.global-to-local, align 4
  %v3_cccc = add i32 %v2_cccc, 9
  %v4_cccc = inttoptr i32 %v3_cccc to i8*
  store i8 %v1_cccc, i8* %v4_cccc, align 1
  %v0_ccd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_ccd0 = trunc i32 %v0_ccd0 to i8
  %v2_ccd0 = load i32, i32* %r4.global-to-local, align 4
  %v3_ccd0 = add i32 %v2_ccd0, 2
  %v4_ccd0 = inttoptr i32 %v3_ccd0 to i8*
  store i8 %v1_ccd0, i8* %v4_ccd0, align 1
  %v3_ccd4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccd4, i32* %r2.global-to-local, align 4
  %v0_ccd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ccd8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_cc60
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ccdc = load i32, i32* %r4.global-to-local, align 4
  %v4_ccdc = add i32 %v3_ccdc, 6
  %v5_ccdc = inttoptr i32 %v4_ccdc to i8*
  store i8 64, i8* %v5_ccdc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cc60, %bb
  %v0_cce0 = load i32, i32* %r0.global-to-local, align 4
  %v1_cce0 = trunc i32 %v0_cce0 to i8
  %v2_cce0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cce0 = add i32 %v2_cce0, 5
  %v4_cce0 = inttoptr i32 %v3_cce0 to i8*
  store i8 %v1_cce0, i8* %v4_cce0, align 1
  %v0_cce4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cce4, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  %v3_ccec = load i32, i32* %r4.global-to-local, align 4
  %v4_ccec = add i32 %v3_ccec, 7
  %v5_ccec = inttoptr i32 %v4_ccec to i8*
  store i8 0, i8* %v5_ccec, align 1
  %v0_ccf4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_ccf4 = phi i32 [ %v6_cb20, %.thread9 ], [ %v0_ccf4.pre, %bb75 ]
  %v0_ccf0 = load i32, i32* %r2.global-to-local, align 4
  %v3_ccf0 = mul i32 %v0_ccf0, 32
  store i32 %v3_ccf0, i32* %r3.global-to-local, align 4
  %v1_ccf4 = load i32, i32* %r4.global-to-local, align 4
  %v2_ccf4 = add i32 %v1_ccf4, 12
  %v3_ccf4 = inttoptr i32 %v2_ccf4 to i32*
  store i32 %v0_ccf4, i32* %v3_ccf4, align 4
  %v0_ccf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ccf8 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_ccf8, -8
  %v5_ccf8 = add i32 %v0_ccf8, %tmp83
  %v1_ccfc = load i32, i32* @r8, align 4
  %v2_ccfc = add i32 %v1_ccfc, %v5_ccf8
  store i32 %v2_ccfc, i32* %r3.global-to-local, align 4
  %v1_cd00 = add i32 %v2_ccfc, 16
  %v2_cd00 = inttoptr i32 %v1_cd00 to i32*
  %v3_cd00 = load i32, i32* %v2_cd00, align 4
  store i32 %v3_cd00, i32* %r2.global-to-local, align 4
  %v0_cd04 = load i32, i32* @r7, align 4
  %v1_cd04 = trunc i32 %v0_cd04 to i8
  %v2_cd04 = load i32, i32* %r4.global-to-local, align 4
  %v3_cd04 = add i32 %v2_cd04, 20
  %v4_cd04 = inttoptr i32 %v3_cd04 to i8*
  store i8 %v1_cd04, i8* %v4_cd04, align 1
  %v0_cd08 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd08 = load i32, i32* %r4.global-to-local, align 4
  %v2_cd08 = add i32 %v1_cd08, 16
  %v3_cd08 = inttoptr i32 %v2_cd08 to i32*
  store i32 %v0_cd08, i32* %v3_cd08, align 4
  %v0_cd0c = load i32, i32* %r4.global-to-local, align 4
  %v1_cd0c = add i32 %v0_cd0c, 20
  store i32 %v1_cd0c, i32* %r1.global-to-local, align 4
  %v1_cd10 = add i32 %v0_cd0c, 33
  %v2_cd10 = inttoptr i32 %v1_cd10 to i8*
  %v3_cd10 = load i8, i8* %v2_cd10, align 1
  %v4_cd10 = zext i8 %v3_cd10 to i32
  store i32 %v1_cbf4, i32* %r2.global-to-local, align 4
  %v1_cd18 = and i32 %v4_cd10, 223
  %v5_cd1c = or i32 %v1_cd18, %v4_cd1c
  store i32 %v5_cd1c, i32* %r3.global-to-local, align 4
  %v1_cd20 = trunc i32 %v5_cd1c to i8
  store i8 %v1_cd20, i8* %v2_cd10, align 1
  %v0_cd24 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd24 = add i32 %v0_cd24, 13
  %v2_cd24 = inttoptr i32 %v1_cd24 to i8*
  %v3_cd24 = load i8, i8* %v2_cd24, align 1
  %v4_cd24 = zext i8 %v3_cd24 to i32
  store i32 %v1_cc04, i32* %r3.global-to-local, align 4
  %v1_cd2c = and i32 %v4_cd24, 239
  %v5_cd30 = or i32 %v1_cd2c, %v4_cd30
  store i32 %v5_cd30, i32* %r2.global-to-local, align 4
  %v1_cd34 = trunc i32 %v5_cd30 to i8
  store i8 %v1_cd34, i8* %v2_cd24, align 1
  %v0_cd38 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd38 = add i32 %v0_cd38, 13
  %v2_cd38 = inttoptr i32 %v1_cd38 to i8*
  %v3_cd38 = load i8, i8* %v2_cd38, align 1
  %v4_cd38 = zext i8 %v3_cd38 to i32
  store i32 %v1_cc08, i32* %ip.global-to-local, align 4
  %v1_cd40 = and i32 %v4_cd38, 247
  %v5_cd44 = or i32 %v1_cd40, %v4_cd44
  store i32 %v5_cd44, i32* %r3.global-to-local, align 4
  %v1_cd48 = trunc i32 %v5_cd44 to i8
  store i8 %v1_cd48, i8* %v2_cd38, align 1
  %v0_cd4c = load i32, i32* %r1.global-to-local, align 4
  %v1_cd4c = add i32 %v0_cd4c, 13
  %v2_cd4c = inttoptr i32 %v1_cd4c to i8*
  %v3_cd4c = load i8, i8* %v2_cd4c, align 1
  %v4_cd4c = zext i8 %v3_cd4c to i32
  store i32 %v1_cc2c, i32* %r0.global-to-local, align 4
  %v1_cd54 = and i32 %v4_cd4c, 251
  %v5_cd58 = or i32 %v1_cd54, %v4_cd58
  store i32 %v5_cd58, i32* %r2.global-to-local, align 4
  %v1_cd5c = trunc i32 %v5_cd58 to i8
  store i8 %v1_cd5c, i8* %v2_cd4c, align 1
  %v0_cd60 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd60 = add i32 %v0_cd60, 13
  %v2_cd60 = inttoptr i32 %v1_cd60 to i8*
  %v3_cd60 = load i8, i8* %v2_cd60, align 1
  %v4_cd60 = zext i8 %v3_cd60 to i32
  store i32 %v1_cc30, i32* %r2.global-to-local, align 4
  %v1_cd68 = and i32 %v4_cd60, 253
  %v4_cd6c = or i32 %v1_cd68, %v3_cd6c
  store i32 %v4_cd6c, i32* %r3.global-to-local, align 4
  %v1_cd70 = trunc i32 %v4_cd6c to i8
  store i8 %v1_cd70, i8* %v2_cd60, align 1
  %v0_cd74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd74 = add i32 %v0_cd74, 12
  %v2_cd74 = inttoptr i32 %v1_cd74 to i8*
  %v3_cd74 = load i8, i8* %v2_cd74, align 1
  %v4_cd74 = zext i8 %v3_cd74 to i32
  store i32 %v4_cd74, i32* %r2.global-to-local, align 4
  %v1_cd78 = add i32 %v0_cd74, 13
  %v2_cd78 = inttoptr i32 %v1_cd78 to i8*
  %v3_cd78 = load i8, i8* %v2_cd78, align 1
  %v4_cd78 = zext i8 %v3_cd78 to i32
  %tmp84 = urem i8 %v3_cd74, 16
  %v1_cd80 = zext i8 %tmp84 to i32
  %v1_cd84 = and i32 %v4_cd78, 254
  %v2_cd88 = or i32 %v1_cd84, %v1_cc3c
  %v1_cd8c = or i32 %v1_cd80, 160
  store i32 %v1_cd8c, i32* %r2.global-to-local, align 4
  %v1_cd90 = trunc i32 %v2_cd88 to i8
  store i8 %v1_cd90, i8* %v2_cd78, align 1
  %v0_cd94 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd94 = add i32 %v2_cd94, 12
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  store i32 %v3_cd9c, i32* %r0.global-to-local, align 4
  store i32 %v7_cd9c, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_cda8 = load i32, i32* %r1.global-to-local, align 4
  %v3_cda8 = add i32 %v2_cda8, 3
  %v4_cda8 = inttoptr i32 %v3_cda8 to i8*
  store i8 %v5_cc58, i8* %v4_cda8, align 1
  %v0_cdac = load i32, i32* %r0.global-to-local, align 4
  %v1_cdac = trunc i32 %v0_cdac to i8
  %v2_cdac = load i32, i32* %r1.global-to-local, align 4
  %v3_cdac = add i32 %v2_cdac, 1
  %v4_cdac = inttoptr i32 %v3_cdac to i8*
  store i8 %v1_cdac, i8* %v4_cdac, align 1
  %v0_cdb0 = load i32, i32* @r6, align 4
  %v1_cdb0 = trunc i32 %v0_cdb0 to i8
  %v2_cdb0 = load i32, i32* %r1.global-to-local, align 4
  %v3_cdb0 = add i32 %v2_cdb0, 2
  %v4_cdb0 = inttoptr i32 %v3_cdb0 to i8*
  store i8 %v1_cdb0, i8* %v4_cdb0, align 1
  %v0_cdb4 = load i32, i32* @r5, align 4
  %v1_cdb4 = load i32, i32* %r1.global-to-local, align 4
  %v2_cdb4 = add i32 %v1_cdb4, 4
  %v3_cdb4 = inttoptr i32 %v2_cdb4 to i32*
  store i32 %v0_cdb4, i32* %v3_cdb4, align 4
  %v0_cdb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_cdb8 = trunc i32 %v0_cdb8 to i8
  %v2_cdb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cdb8 = add i32 %v2_cdb8, 41
  %v4_cdb8 = inttoptr i32 %v3_cdb8 to i8*
  store i8 %v1_cdb8, i8* %v4_cdb8, align 1
  %v0_cdbc = load i32, i32* %r3.global-to-local, align 4
  %v1_cdbc = trunc i32 %v0_cdbc to i8
  %v2_cdbc = load i32, i32* %r4.global-to-local, align 4
  %v3_cdbc = add i32 %v2_cdbc, 40
  %v4_cdbc = inttoptr i32 %v3_cdbc to i8*
  store i8 %v1_cdbc, i8* %v4_cdbc, align 1
  %v0_cdc0 = call i32 @function_e72c()
  %v1_cdc4 = mul i32 %v0_cdc0, 256
  %v1_cdc8 = and i32 %v1_cdc4, 3840
  %v1_cdcc = or i32 %v1_cdc8, 28672
  %v3_cdd4 = add nuw nsw i32 %v1_cdcc, 2048
  %v3_cde07 = udiv i32 %v3_cdd4, 256
  store i32 %v3_cde07, i32* %r1.global-to-local, align 4
  %v0_cde4 = load i32, i32* %r4.global-to-local, align 4
  %v1_cde4 = add i32 %v0_cde4, 42
  store i32 %v1_cde4, i32* %r2.global-to-local, align 4
  %v4_cde8 = inttoptr i32 %v1_cde4 to i8*
  store i8 5, i8* %v4_cde8, align 1
  %v0_cdec = load i32, i32* %r1.global-to-local, align 4
  %v1_cdec = trunc i32 %v0_cdec to i8
  %v2_cdec = load i32, i32* %r2.global-to-local, align 4
  %v3_cdec = add i32 %v2_cdec, 1
  %v4_cdec = inttoptr i32 %v3_cdec to i8*
  store i8 %v1_cdec, i8* %v4_cdec, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_cdf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cdf8 = add i32 %v2_cdf8, 47
  %v4_cdf8 = inttoptr i32 %v3_cdf8 to i8*
  store i8 10, i8* %v4_cdf8, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ce04 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce04 = trunc i32 %v0_ce04 to i8
  %v2_ce04 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce04 = add i32 %v2_ce04, 46
  %v4_ce04 = inttoptr i32 %v3_ce04 to i8*
  store i8 %v1_ce04, i8* %v4_ce04, align 1
  %v0_ce08 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce08 = trunc i32 %v0_ce08 to i8
  %v2_ce08 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce08 = add i32 %v2_ce08, 45
  %v4_ce08 = inttoptr i32 %v3_ce08 to i8*
  store i8 %v1_ce08, i8* %v4_ce08, align 1
  %v0_ce0c = load i32, i32* %r0.global-to-local, align 4
  %v1_ce0c = trunc i32 %v0_ce0c to i8
  %v2_ce0c = load i32, i32* %r4.global-to-local, align 4
  %v3_ce0c = add i32 %v2_ce0c, 44
  %v4_ce0c = inttoptr i32 %v3_ce0c to i8*
  store i8 %v1_ce0c, i8* %v4_ce0c, align 1
  %v0_ce10 = call i32 @function_e72c()
  store i32 %v0_ce10, i32* %r0.global-to-local, align 4
  %v2_ce18 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce18 = add i32 %v2_ce18, 56
  %v4_ce18 = inttoptr i32 %v3_ce18 to i8*
  store i8 1, i8* %v4_ce18, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_ce28 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce28 = add i32 %v1_ce28, 48
  %v3_ce28 = inttoptr i32 %v2_ce28 to i32*
  store i32 %v0_ce10, i32* %v3_ce28, align 4
  %v0_ce2c = load i32, i32* %r2.global-to-local, align 4
  %v1_ce2c = trunc i32 %v0_ce2c to i8
  %v2_ce2c = load i32, i32* %r4.global-to-local, align 4
  %v3_ce2c = add i32 %v2_ce2c, 58
  %v4_ce2c = inttoptr i32 %v3_ce2c to i8*
  store i8 %v1_ce2c, i8* %v4_ce2c, align 1
  %v0_ce30 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce30 = trunc i32 %v0_ce30 to i8
  %v2_ce30 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce30 = add i32 %v2_ce30, 59
  %v4_ce30 = inttoptr i32 %v3_ce30 to i8*
  store i8 %v1_ce30, i8* %v4_ce30, align 1
  %v0_ce34 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce34 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce34 = add i32 %v1_ce34, 52
  %v3_ce34 = inttoptr i32 %v2_ce34 to i32*
  store i32 %v0_ce34, i32* %v3_ce34, align 4
  %v0_ce38 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce38 = trunc i32 %v0_ce38 to i8
  %v2_ce38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce38 = add i32 %v2_ce38, 57
  %v4_ce38 = inttoptr i32 %v3_ce38 to i8*
  store i8 %v1_ce38, i8* %v4_ce38, align 1
  %v3_ce3c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ce3c, i32* %r3.global-to-local, align 4
  %v1_ce40 = add i32 %v3_ce3c, 1
  store i32 %v1_ce40, i32* @r4, align 4
  %v0_ce44 = load i32, i32* @sl, align 4
  %v9_ce44 = icmp eq i32 %v0_ce44, %v1_ce40
  store i1 %v9_ce44, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ce40, i32* %stack_var_-40, align 4
  %v8_ce4c = icmp sgt i32 %v0_ce44, %v1_ce40
  br i1 %v8_ce4c, label %dec_label_pc_cc60, label %dec_label_pc_ce50

dec_label_pc_ce50:                                ; preds = %bb76, %dec_label_pc_cb6c
  %v0_ce50 = phi i32 [ %v0_cb9c, %dec_label_pc_cb6c ], [ %v0_ce44, %bb76 ]
  %v2_ce50 = icmp eq i32 %v0_ce50, 0
  store i1 %v2_ce50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d008 = icmp eq i32 %v3_cb74, 65535
  %v2_d084 = icmp eq i32 %v1_cb98, 0
  %v2_ce8c = icmp eq i32 %v6_cb20, -1
  %v7_ce8c = icmp eq i32 %v6_cb20, -1
  br label %dec_label_pc_ce58.outer

dec_label_pc_ce58.outer:                          ; preds = %dec_label_pc_cf84, %dec_label_pc_ce50
  %v1_ce58.ph.in = phi i32 [ %v1_cf78, %dec_label_pc_cf84 ], [ %v0_ce50, %dec_label_pc_ce50 ]
  %v0_ce58.ph = phi i1 [ %v2_cf84, %dec_label_pc_cf84 ], [ %v2_ce50, %dec_label_pc_ce50 ]
  %v1_ce58.ph = icmp slt i32 %v1_ce58.ph.in, 0
  %v4_ce58 = or i1 %v1_ce58.ph, %v0_ce58.ph
  br label %dec_label_pc_ce58

dec_label_pc_ce58:                                ; preds = %dec_label_pc_ce58.outer, %dec_label_pc_ce58
  br i1 %v4_ce58, label %dec_label_pc_ce58, label %dec_label_pc_ce5c

dec_label_pc_ce5c:                                ; preds = %dec_label_pc_ce58
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_ce68

dec_label_pc_ce68:                                ; preds = %dec_label_pc_cee4, %dec_label_pc_ce5c
  %v1_ce78 = phi i32 [ %v1_cf74, %dec_label_pc_cee4 ], [ 0, %dec_label_pc_ce5c ]
  %v5_ce6c = mul i32 %v1_ce78, 24
  %v1_ce70 = load i32, i32* @r8, align 4
  %v2_ce70 = add i32 %v1_ce70, %v5_ce6c
  store i32 %v2_ce70, i32* %r3.global-to-local, align 4
  %v1_ce74 = add i32 %v2_ce70, 20
  %v2_ce74 = inttoptr i32 %v1_ce74 to i8*
  %v3_ce74 = load i8, i8* %v2_ce74, align 1
  %v4_ce74 = zext i8 %v3_ce74 to i32
  store i32 %v4_ce74, i32* %r2.global-to-local, align 4
  %v0_ce78 = load i32, i32* %fp.global-to-local, align 4
  %v4_ce78 = mul i32 %v1_ce78, 4
  %v5_ce78 = add i32 %v0_ce78, %v4_ce78
  %v6_ce78 = inttoptr i32 %v5_ce78 to i32*
  %v7_ce78 = load i32, i32* %v6_ce78, align 4
  store i32 %v7_ce78, i32* @r5, align 4
  %v7_ce7c = icmp eq i8 %v3_ce74, 31
  store i1 %v7_ce7c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce80 = add i32 %v7_ce78, 20
  store i32 %v1_ce80, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_ce74, 32
  br i1 %tmp85, label %dec_label_pc_cf90, label %dec_label_pc_ce88

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce68
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  store i1 %v7_ce8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ce8c, label %dec_label_pc_cff8, label %dec_label_pc_ce94

dec_label_pc_ce94:                                ; preds = %dec_label_pc_cf90, %dec_label_pc_ce88
  store i32 %v3_cb74, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d008, label %dec_label_pc_d014, label %dec_label_pc_cea8

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cff8.dec_label_pc_cea8_crit_edge, %dec_label_pc_ce94
  %v1_ceac = phi i32 [ %v1_ceac.pre, %dec_label_pc_cff8.dec_label_pc_cea8_crit_edge ], [ 65535, %dec_label_pc_ce94 ]
  store i32 %v3_cb90, i32* %r3.global-to-local, align 4
  %v9_ceac = icmp eq i32 %v3_cb90, %v1_ceac
  store i1 %v9_ceac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ceac, label %dec_label_pc_d030, label %dec_label_pc_ceb4

dec_label_pc_ceb4:                                ; preds = %dec_label_pc_d014.dec_label_pc_ceb4_crit_edge, %dec_label_pc_cea8
  %v1_ceb8 = phi i32 [ %v1_ceb8.pre, %dec_label_pc_d014.dec_label_pc_ceb4_crit_edge ], [ %v1_ceac, %dec_label_pc_cea8 ]
  store i32 %v3_cb94, i32* %ip.global-to-local, align 4
  %v9_ceb8 = icmp eq i32 %v3_cb94, %v1_ceb8
  store i1 %v9_ceb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ceb8, label %dec_label_pc_d04c, label %dec_label_pc_cec0

dec_label_pc_cec0:                                ; preds = %dec_label_pc_d030.dec_label_pc_cec0_crit_edge, %dec_label_pc_ceb4
  %v1_cec4 = phi i32 [ %v1_cec4.pre, %dec_label_pc_d030.dec_label_pc_cec0_crit_edge ], [ %v1_ceb8, %dec_label_pc_ceb4 ]
  store i32 %v5_ca5c, i32* %r0.global-to-local, align 4
  %v9_cec4 = icmp eq i32 %v5_ca5c, %v1_cec4
  store i1 %v9_cec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cec4, label %dec_label_pc_d068, label %dec_label_pc_cecc

dec_label_pc_cecc:                                ; preds = %dec_label_pc_d04c.dec_label_pc_cecc_crit_edge, %dec_label_pc_cec0
  %v1_ced0 = phi i32 [ %v1_ced0.pre, %dec_label_pc_d04c.dec_label_pc_cecc_crit_edge ], [ %v1_cec4, %dec_label_pc_cec0 ]
  store i32 %v6_ca74, i32* %r2.global-to-local, align 4
  %v9_ced0 = icmp eq i32 %v6_ca74, %v1_ced0
  store i1 %v9_ced0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ced0, label %dec_label_pc_d07c, label %dec_label_pc_ced8

dec_label_pc_ced8:                                ; preds = %dec_label_pc_d068, %dec_label_pc_cecc
  store i32 %v1_cb98, i32* %r3.global-to-local, align 4
  store i1 %v2_d084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d084, label %dec_label_pc_cee4, label %dec_label_pc_d090

dec_label_pc_cee4:                                ; preds = %dec_label_pc_ced8, %dec_label_pc_d07c, %dec_label_pc_d090
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cee8 = load i32, i32* %r7.global-to-local, align 4
  %v1_cee8 = trunc i32 %v0_cee8 to i8
  %v2_cee8 = load i32, i32* @r5, align 4
  %v3_cee8 = add i32 %v2_cee8, 10
  %v4_cee8 = inttoptr i32 %v3_cee8 to i8*
  store i8 %v1_cee8, i8* %v4_cee8, align 1
  %v0_ceec = load i32, i32* %r7.global-to-local, align 4
  %v1_ceec = trunc i32 %v0_ceec to i8
  %v2_ceec = load i32, i32* @r5, align 4
  %v3_ceec = add i32 %v2_ceec, 11
  %v4_ceec = inttoptr i32 %v3_ceec to i8*
  store i8 %v1_ceec, i8* %v4_ceec, align 1
  %v0_cef0 = load i32, i32* @r5, align 4
  store i32 %v0_cef0, i32* @r0, align 4
  %v2_cef4 = call i32 @function_d0b8(i32 %v0_cef0, i32 20)
  %v3_cef4 = trunc i32 %v2_cef4 to i8
  %v4_cef827 = udiv i32 %v2_cef4, 256
  %v1_cefc = trunc i32 %v4_cef827 to i8
  %v2_cefc = load i32, i32* @r5, align 4
  %v3_cefc = add i32 %v2_cefc, 11
  %v4_cefc = inttoptr i32 %v3_cefc to i8*
  store i8 %v1_cefc, i8* %v4_cefc, align 1
  %v3_cf00 = load i32, i32* @r5, align 4
  %v4_cf00 = add i32 %v3_cf00, 10
  %v5_cf00 = inttoptr i32 %v4_cf00 to i8*
  store i8 %v3_cef4, i8* %v5_cf00, align 1
  %v0_cf04 = load i32, i32* @r6, align 4
  store i32 %v0_cf04, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cf10 = load i32, i32* %r7.global-to-local, align 4
  %v1_cf10 = trunc i32 %v0_cf10 to i8
  %v3_cf10 = add i32 %v0_cf04, 16
  %v4_cf10 = inttoptr i32 %v3_cf10 to i8*
  store i8 %v1_cf10, i8* %v4_cf10, align 1
  %v0_cf14 = load i32, i32* %r7.global-to-local, align 4
  %v1_cf14 = trunc i32 %v0_cf14 to i8
  %v2_cf14 = load i32, i32* @r6, align 4
  %v3_cf14 = add i32 %v2_cf14, 17
  %v4_cf14 = inttoptr i32 %v3_cf14 to i8*
  store i8 %v1_cf14, i8* %v4_cf14, align 1
  %v0_cf18 = load i32, i32* @r5, align 4
  store i32 %v0_cf18, i32* %r0.global-to-local, align 4
  %v4_cf1c = call i32 @function_d114(i32 %v0_cf18, i32 %v0_cf04, i32 10240, i32 40)
  %v5_cf1c = trunc i32 %v4_cf1c to i8
  store i32 %v4_cf1c, i32* %r0.global-to-local, align 4
  %v4_cf2028 = udiv i32 %v4_cf1c, 256
  %v1_cf24 = trunc i32 %v4_cf2028 to i8
  %v2_cf24 = load i32, i32* @r6, align 4
  %v3_cf24 = add i32 %v2_cf24, 17
  %v4_cf24 = inttoptr i32 %v3_cf24 to i8*
  store i8 %v1_cf24, i8* %v4_cf24, align 1
  %v3_cf28 = load i32, i32* @r6, align 4
  %v4_cf28 = add i32 %v3_cf28, 16
  %v5_cf28 = inttoptr i32 %v4_cf28 to i8*
  store i8 %v5_cf1c, i8* %v5_cf28, align 1
  %v3_cf2c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cf2c, i32* %r3.global-to-local, align 4
  %v0_cf30 = load i32, i32* @r5, align 4
  %v1_cf30 = add i32 %v0_cf30, 20
  %v2_cf30 = inttoptr i32 %v1_cf30 to i32*
  %v3_cf30 = load i32, i32* %v2_cf30, align 4
  %v3_cf38 = udiv i32 %v3_cf30, 65536
  store i32 %v3_cf38, i32* %r2.global-to-local, align 4
  %v5_cf3c = mul i32 %v3_cf2c, 24
  %v1_cf40 = load i32, i32* @r8, align 4
  %v2_cf40 = add i32 %v1_cf40, %v5_cf3c
  store i32 %v2_cf40, i32* %ip.global-to-local, align 4
  %v3_cf4426 = udiv i32 %v3_cf30, 16777216
  %v1_cf48 = trunc i32 %v3_cf4426 to i8
  %v3_cf48 = add i32 %v2_cf40, 3
  %v4_cf48 = inttoptr i32 %v3_cf48 to i8*
  store i8 %v1_cf48, i8* %v4_cf48, align 1
  %v0_cf4c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf4c = trunc i32 %v0_cf4c to i8
  %v2_cf4c = load i32, i32* %ip.global-to-local, align 4
  %v3_cf4c = add i32 %v2_cf4c, 2
  %v4_cf4c = inttoptr i32 %v3_cf4c to i8*
  store i8 %v1_cf4c, i8* %v4_cf4c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cf54 = load i32, i32* @r5, align 4
  store i32 %v0_cf54, i32* %r1.global-to-local, align 4
  %v0_cf58 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_cf58, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_cf64 = load i32, i32* %ip.global-to-local, align 4
  %v6_cf6c = inttoptr i32 %v0_cf54 to i32*
  %v7_cf6c = call i32 @function_11b4c(i32 %v0_cf58, i32* %v6_cf6c, i32 60, i32 16384, i32 %v0_cf64, i32 16)
  %v3_cf70 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cf70, i32* %r3.global-to-local, align 4
  %v1_cf74 = add i32 %v3_cf70, 1
  store i32 %v1_cf74, i32* %r0.global-to-local, align 4
  %v1_cf78 = load i32, i32* @sl, align 4
  %v9_cf78 = icmp eq i32 %v1_cf74, %v1_cf78
  store i1 %v9_cf78, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cf74, i32* %stack_var_-40, align 4
  %v5_cf80 = icmp slt i32 %v1_cf74, %v1_cf78
  br i1 %v5_cf80, label %dec_label_pc_ce68, label %dec_label_pc_cf84

dec_label_pc_cf84:                                ; preds = %dec_label_pc_cee4
  %v2_cf84 = icmp eq i32 %v1_cf78, 0
  store i1 %v2_cf84, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ce58.outer

dec_label_pc_cf90:                                ; preds = %dec_label_pc_ce68
  %v1_cf90 = add i32 %v2_ce70, 16
  %v2_cf90 = inttoptr i32 %v1_cf90 to i32*
  %v3_cf90 = load i32, i32* %v2_cf90, align 4
  store i32 %v3_cf90, i32* %r4.global-to-local, align 4
  %v0_cf94 = call i32 @function_e72c()
  store i32 %v0_cf94, i32* %r0.global-to-local, align 4
  %v3_cf98 = load i32, i32* %stack_var_-40, align 4
  %v5_cfa0 = mul i32 %v3_cf98, 24
  %v0_cfa4 = load i32, i32* %r4.global-to-local, align 4
  %v1_cfa8 = load i32, i32* @r8, align 4
  %v2_cfa8 = add i32 %v1_cfa8, %v5_cfa0
  store i32 %v2_cfa8, i32* %r1.global-to-local, align 4
  %v1_cfac = and i32 %v0_cfa4, 65280
  store i32 %v1_cfac, i32* %r3.global-to-local, align 4
  %v1_cfa4 = udiv i32 %v0_cfa4, 256
  %v3_cfb0 = and i32 %v1_cfa4, 65280
  store i32 %v3_cfb0, i32* %r2.global-to-local, align 4
  %v3_cfb4 = mul i32 %v0_cfa4, 16777216
  store i32 %v3_cfb4, i32* %ip.global-to-local, align 4
  %v1_cfb8 = add i32 %v2_cfa8, 20
  %v2_cfb8 = inttoptr i32 %v1_cfb8 to i8*
  %v3_cfb8 = load i8, i8* %v2_cfb8, align 1
  %v4_cfb8 = zext i8 %v3_cfb8 to i32
  %v4_cfbc = mul nuw nsw i32 %v1_cfac, 256
  %v5_cfbc = or i32 %v4_cfbc, %v3_cfb4
  store i32 %v5_cfbc, i32* %ip.global-to-local, align 4
  %v2_cfc4 = call i32 @llvm.bswap.i32(i32 %v0_cfa4)
  %v7_cfc8 = lshr i32 %v0_cf94, %v4_cfb8
  %v8_cfc8 = add i32 %v7_cfc8, %v2_cfc4
  store i32 %v8_cfc8, i32* %r2.global-to-local, align 4
  %v3_cfd4 = mul i32 %v8_cfc8, 16777216
  %v1_cfcc = mul i32 %v8_cfc8, 256
  %v4_cfd8 = and i32 %v1_cfcc, 16711680
  %v5_cfd8 = or i32 %v4_cfd8, %v3_cfd4
  store i32 %v5_cfd8, i32* %r1.global-to-local, align 4
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  %v2_cfe8 = call i32 @llvm.bswap.i32(i32 %v8_cfc8)
  store i32 %v2_cfe8, i32* %r3.global-to-local, align 4
  store i1 %v7_ce8c, i1* %cpsr_z.global-to-local, align 1
  %v1_cff0 = load i32, i32* @r5, align 4
  %v2_cff0 = add i32 %v1_cff0, 16
  %v3_cff0 = inttoptr i32 %v2_cff0 to i32*
  store i32 %v2_cfe8, i32* %v3_cff0, align 4
  br i1 %v2_ce8c, label %dec_label_pc_cff8, label %dec_label_pc_ce94

dec_label_pc_cff8:                                ; preds = %dec_label_pc_cf90, %dec_label_pc_ce88
  %v0_cff8 = call i32 @function_e72c()
  store i32 %v0_cff8, i32* %r0.global-to-local, align 4
  store i32 %v3_cb74, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d008, i1* %cpsr_z.global-to-local, align 1
  %v1_d00c = load i32, i32* @r5, align 4
  %v2_d00c = add i32 %v1_d00c, 12
  %v3_d00c = inttoptr i32 %v2_d00c to i32*
  store i32 %v0_cff8, i32* %v3_d00c, align 4
  br i1 %v3_d008, label %dec_label_pc_d014, label %dec_label_pc_cff8.dec_label_pc_cea8_crit_edge

dec_label_pc_cff8.dec_label_pc_cea8_crit_edge:    ; preds = %dec_label_pc_cff8
  %v1_ceac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cea8

dec_label_pc_d014:                                ; preds = %dec_label_pc_cff8, %dec_label_pc_ce94
  %v0_d014 = call i32 @function_e72c()
  %v1_d014 = trunc i32 %v0_d014 to i8
  store i32 %v0_d014, i32* %r0.global-to-local, align 4
  %v4_d01829 = udiv i32 %v0_d014, 256
  %v1_d01c = trunc i32 %v4_d01829 to i8
  %v2_d01c = load i32, i32* @r5, align 4
  %v3_d01c = add i32 %v2_d01c, 5
  %v4_d01c = inttoptr i32 %v3_d01c to i8*
  store i8 %v1_d01c, i8* %v4_d01c, align 1
  store i32 %v3_cb90, i32* %r3.global-to-local, align 4
  %v1_d024 = load i32, i32* @r4, align 4
  %v9_d024 = icmp eq i32 %v3_cb90, %v1_d024
  store i1 %v9_d024, i1* %cpsr_z.global-to-local, align 1
  %v3_d028 = load i32, i32* @r5, align 4
  %v4_d028 = add i32 %v3_d028, 4
  %v5_d028 = inttoptr i32 %v4_d028 to i8*
  store i8 %v1_d014, i8* %v5_d028, align 1
  %v0_d02c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d02c, label %dec_label_pc_d030, label %dec_label_pc_d014.dec_label_pc_ceb4_crit_edge

dec_label_pc_d014.dec_label_pc_ceb4_crit_edge:    ; preds = %dec_label_pc_d014
  %v1_ceb8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ceb4

dec_label_pc_d030:                                ; preds = %dec_label_pc_d014, %dec_label_pc_cea8
  %v0_d030 = call i32 @function_e72c()
  %v1_d030 = trunc i32 %v0_d030 to i8
  store i32 %v0_d030, i32* %r0.global-to-local, align 4
  store i32 %v3_cb94, i32* %ip.global-to-local, align 4
  %v4_d038 = sdiv i32 %v0_d030, 256
  store i32 %v4_d038, i32* %r3.global-to-local, align 4
  %v1_d03c = load i32, i32* @r4, align 4
  %v9_d03c = icmp eq i32 %v3_cb94, %v1_d03c
  store i1 %v9_d03c, i1* %cpsr_z.global-to-local, align 1
  %v3_d040 = load i32, i32* @r5, align 4
  %v4_d040 = add i32 %v3_d040, 20
  %v5_d040 = inttoptr i32 %v4_d040 to i8*
  store i8 %v1_d030, i8* %v5_d040, align 1
  %v0_d044 = load i32, i32* %r3.global-to-local, align 4
  %v1_d044 = trunc i32 %v0_d044 to i8
  %v2_d044 = load i32, i32* @r6, align 4
  %v3_d044 = add i32 %v2_d044, 1
  %v4_d044 = inttoptr i32 %v3_d044 to i8*
  store i8 %v1_d044, i8* %v4_d044, align 1
  %v0_d048 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d048, label %dec_label_pc_d04c, label %dec_label_pc_d030.dec_label_pc_cec0_crit_edge

dec_label_pc_d030.dec_label_pc_cec0_crit_edge:    ; preds = %dec_label_pc_d030
  %v1_cec4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cec0

dec_label_pc_d04c:                                ; preds = %dec_label_pc_d030, %dec_label_pc_ceb4
  %v0_d04c = call i32 @function_e72c()
  %v1_d04c = trunc i32 %v0_d04c to i8
  %v4_d050 = sdiv i32 %v0_d04c, 256
  store i32 %v4_d050, i32* %r3.global-to-local, align 4
  %v3_d054 = load i32, i32* @r6, align 4
  %v4_d054 = add i32 %v3_d054, 2
  %v5_d054 = inttoptr i32 %v4_d054 to i8*
  store i8 %v1_d04c, i8* %v5_d054, align 1
  store i32 %v5_ca5c, i32* %r0.global-to-local, align 4
  %v1_d05c = load i32, i32* @r4, align 4
  %v9_d05c = icmp eq i32 %v5_ca5c, %v1_d05c
  store i1 %v9_d05c, i1* %cpsr_z.global-to-local, align 1
  %v0_d060 = load i32, i32* %r3.global-to-local, align 4
  %v1_d060 = trunc i32 %v0_d060 to i8
  %v2_d060 = load i32, i32* @r6, align 4
  %v3_d060 = add i32 %v2_d060, 3
  %v4_d060 = inttoptr i32 %v3_d060 to i8*
  store i8 %v1_d060, i8* %v4_d060, align 1
  %v0_d064 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d064, label %dec_label_pc_d068, label %dec_label_pc_d04c.dec_label_pc_cecc_crit_edge

dec_label_pc_d04c.dec_label_pc_cecc_crit_edge:    ; preds = %dec_label_pc_d04c
  %v1_ced0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cecc

dec_label_pc_d068:                                ; preds = %dec_label_pc_d04c, %dec_label_pc_cec0
  %v0_d068 = call i32 @function_e72c()
  store i32 %v0_d068, i32* %r0.global-to-local, align 4
  store i32 %v6_ca74, i32* %r2.global-to-local, align 4
  %v1_d070 = load i32, i32* @r4, align 4
  %v9_d070 = icmp eq i32 %v6_ca74, %v1_d070
  store i1 %v9_d070, i1* %cpsr_z.global-to-local, align 1
  %v1_d074 = load i32, i32* @r6, align 4
  %v2_d074 = add i32 %v1_d074, 4
  %v3_d074 = inttoptr i32 %v2_d074 to i32*
  store i32 %v0_d068, i32* %v3_d074, align 4
  br i1 %v9_d070, label %dec_label_pc_d07c, label %dec_label_pc_ced8

dec_label_pc_d07c:                                ; preds = %dec_label_pc_d068, %dec_label_pc_cecc
  %v0_d07c = call i32 @function_e72c()
  store i32 %v0_d07c, i32* %r0.global-to-local, align 4
  store i32 %v1_cb98, i32* %r3.global-to-local, align 4
  store i1 %v2_d084, i1* %cpsr_z.global-to-local, align 1
  %v1_d088 = load i32, i32* @r6, align 4
  %v2_d088 = add i32 %v1_d088, 8
  %v3_d088 = inttoptr i32 %v2_d088 to i32*
  store i32 %v0_d07c, i32* %v3_d088, align 4
  br i1 %v2_d084, label %dec_label_pc_cee4, label %dec_label_pc_d090

dec_label_pc_d090:                                ; preds = %dec_label_pc_ced8, %dec_label_pc_d07c
  %v0_d090 = call i32 @function_e72c()
  %v1_d090 = trunc i32 %v0_d090 to i8
  store i32 %v0_d090, i32* %r0.global-to-local, align 4
  %v4_d094 = sdiv i32 %v0_d090, 256
  store i32 %v4_d094, i32* %r3.global-to-local, align 4
  %v1_d098 = trunc i32 %v4_d094 to i8
  %v2_d098 = load i32, i32* @r6, align 4
  %v3_d098 = add i32 %v2_d098, 19
  %v4_d098 = inttoptr i32 %v3_d098 to i8*
  store i8 %v1_d098, i8* %v4_d098, align 1
  %v3_d09c = load i32, i32* @r6, align 4
  %v4_d09c = add i32 %v3_d09c, 18
  %v5_d09c = inttoptr i32 %v4_d09c to i8*
  store i8 %v1_d090, i8* %v5_d09c, align 1
  br label %dec_label_pc_cee4

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_cb44
  %v0_d0a4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_d0a4, i32* %r0.global-to-local, align 4
  %v1_d0a8 = call i32 @function_112cc(i32 %v0_d0a4)
  store i32 %v1_d0a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d0ac

dec_label_pc_d0ac:                                ; preds = %dec_label_pc_c96c, %dec_label_pc_d0a4
  %v29_d0b0 = phi i32 [ %v3_cb34, %dec_label_pc_c96c ], [ %v1_d0a8, %dec_label_pc_d0a4 ]
  store i32 %v3_c96c, i32* %r4.global-to-local, align 4
  store i32 %v12_c96c, i32* %r7.global-to-local, align 4
  ret i32 %v29_d0b0

; uselistorder directives
  uselistorder i32 %v4_d094, { 1, 0 }
  uselistorder i32 %v0_d090, { 0, 2, 1 }
  uselistorder i32 %v0_d030, { 0, 2, 1 }
  uselistorder i32 %v0_d014, { 0, 2, 1 }
  uselistorder i32 %v2_cfe8, { 1, 0 }
  uselistorder i32 %v8_cfc8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cfb4, { 1, 0 }
  uselistorder i32 %v0_cfa4, { 2, 0, 1, 3 }
  uselistorder i1 %v2_cf84, { 1, 0 }
  uselistorder i32 %v1_cf78, { 1, 2, 3, 0 }
  uselistorder i32 %v1_cf74, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cf1c, { 0, 2, 1 }
  uselistorder i32 %v0_cf04, { 1, 0, 2 }
  uselistorder i1 %v7_ce8c, { 2, 1, 0 }
  uselistorder i1 %v2_d084, { 2, 3, 1, 0 }
  uselistorder i1 %v3_d008, { 3, 2, 0, 1 }
  uselistorder i32 %v1_ce40, { 1, 0, 2, 3 }
  uselistorder i8 %v5_cc58, { 1, 0 }
  uselistorder i32 %v3_cc40, { 1, 0 }
  uselistorder i32 %v1_cc3c, { 1, 0 }
  uselistorder i32 %v1_cc30, { 1, 0 }
  uselistorder i32 %v1_cc2c, { 1, 0 }
  uselistorder i32 %v1_cc08, { 1, 0 }
  uselistorder i32 %v1_cc04, { 1, 0 }
  uselistorder i32 %v3_cbf8, { 1, 0 }
  uselistorder i32 %v1_cbf4, { 1, 0 }
  uselistorder i32 %v1_cbd0, { 1, 0 }
  uselistorder i32 %v1_cbc8, { 1, 0 }
  uselistorder i32 %v1_cb98, { 2, 1, 3, 0 }
  uselistorder i32 %v3_cb90, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_cb88, { 3, 0, 1, 2 }
  uselistorder i32 %v0_cb84, { 0, 2, 1, 4, 3 }
  uselistorder i1 %v7_cb64, { 1, 0 }
  uselistorder i1 %v7_cb38, { 1, 0 }
  uselistorder i32 %v3_cb34, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_cb20, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_ca74, { 3, 2, 1, 0 }
  uselistorder i32 %v5_ca5c, { 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 %v1_ca0c, { 1, 0 }
  uselistorder i32 %v7_c9c8, { 0, 1, 3, 2 }
  uselistorder i32 %v5_c9a4, { 1, 0 }
  uselistorder i32 %v1_c970, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_85e0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder label %dec_label_pc_d0ac, { 1, 0 }
  uselistorder label %dec_label_pc_d090, { 1, 0 }
  uselistorder label %dec_label_pc_cee4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ce58, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d0b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d0b8:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_d0e8, label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d0b8
  %v0_d0c8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_d0c8

dec_label_pc_d0c8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0c4
  %v0_d0dc = phi i32 [ %v2_d0dc, %dec_label_pc_d0c8 ], [ 0, %dec_label_pc_d0c4 ]
  %v0_d0d0 = phi i32 [ %v1_d0d0, %dec_label_pc_d0c8 ], [ %arg1, %dec_label_pc_d0c4 ]
  %v0_d0e0 = phi i32 [ %v1_d0e0, %dec_label_pc_d0c8 ], [ %v0_d0c8.pre, %dec_label_pc_d0c4 ]
  %v1_d0c8 = inttoptr i32 %v0_d0e0 to i8*
  %v2_d0c8 = load i8, i8* %v1_d0c8, align 1
  %v3_d0c8 = zext i8 %v2_d0c8 to i32
  %v1_d0cc = add i32 %v0_d0e0, 1
  %v2_d0cc = inttoptr i32 %v1_d0cc to i8*
  %v3_d0cc = load i8, i8* %v2_d0cc, align 1
  %v4_d0cc = zext i8 %v3_d0cc to i32
  %v1_d0d0 = add i32 %v0_d0d0, -2
  %v4_d0d4 = mul nuw nsw i32 %v4_d0cc, 256
  %v5_d0d4 = or i32 %v4_d0d4, %v3_d0c8
  %v2_d0dc = add i32 %v5_d0d4, %v0_d0dc
  %v1_d0e0 = add i32 %v0_d0e0, 2
  store i32 %v1_d0e0, i32* @r0, align 4
  %v1_d0d0.cmp = icmp ugt i32 %v1_d0d0, 1
  br i1 %v1_d0d0.cmp, label %dec_label_pc_d0c8, label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0b8
  %v1_d0f0 = phi i32 [ 0, %dec_label_pc_d0b8 ], [ %v2_d0dc, %dec_label_pc_d0c8 ]
  %v0_d0e8 = phi i32 [ %arg1, %dec_label_pc_d0b8 ], [ %v1_d0d0, %dec_label_pc_d0c8 ]
  %v7_d0e8 = icmp eq i32 %v0_d0e8, 1
  br i1 %v7_d0e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d0e8
  %v1_d0ec = load i32, i32* @r0, align 4
  %v2_d0ec = inttoptr i32 %v1_d0ec to i8*
  %v3_d0ec = load i8, i8* %v2_d0ec, align 1
  %v4_d0ec = zext i8 %v3_d0ec to i32
  %v3_d0f0 = add i32 %v1_d0f0, %v4_d0ec
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d0e8, %bb
  %v0_d0f4 = phi i32 [ %v1_d0f0, %dec_label_pc_d0e8 ], [ %v3_d0f0, %bb ]
  %v3_d0f8 = urem i32 %v0_d0f4, 65536
  %v4_d0fc = udiv i32 %v0_d0f4, 65536
  %v5_d0fc = add nuw nsw i32 %v4_d0fc, %v3_d0f8
  %v4_d100 = udiv i32 %v5_d0fc, 65536
  %v5_d100 = add nuw nsw i32 %v4_d100, %v5_d0fc
  %v1_d104 = urem i32 %v5_d100, 65536
  %v3_d10c = xor i32 %v1_d104, 65535
  ret i32 %v3_d10c

; uselistorder directives
  uselistorder i32 %v5_d0fc, { 1, 0 }
  uselistorder i32 %v1_d0e0, { 1, 0 }
  uselistorder i32 %v1_d0d0, { 1, 0, 2 }
  uselistorder i32 %v0_d0e0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d114(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d114:
  %v3_d124 = urem i32 %arg2, 65536
  %v1_d128 = add i32 %arg1, 12
  %v1_d12c = inttoptr i32 %v1_d128 to i32*
  %v2_d12c = load i32, i32* %v1_d12c, align 4
  %v3_d12c = add i32 %arg1, 16
  %v4_d12c = inttoptr i32 %v3_d12c to i32*
  %v5_d12c = load i32, i32* %v4_d12c, align 4
  %v7_d130 = icmp sgt i32 %arg3, 1
  br i1 %v7_d130, label %dec_label_pc_d13c.preheader, label %dec_label_pc_d15c

dec_label_pc_d13c.preheader:                      ; preds = %dec_label_pc_d114
  %v0_d13c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_d13c

dec_label_pc_d13c:                                ; preds = %dec_label_pc_d13c.preheader, %dec_label_pc_d13c
  %v0_d150 = phi i32 [ 0, %dec_label_pc_d13c.preheader ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d144 = phi i32 [ %arg3, %dec_label_pc_d13c.preheader ], [ %v1_d144, %dec_label_pc_d13c ]
  %v0_d154 = phi i32 [ %v0_d13c.pre, %dec_label_pc_d13c.preheader ], [ %v1_d154, %dec_label_pc_d13c ]
  %v1_d13c = inttoptr i32 %v0_d154 to i8*
  %v2_d13c = load i8, i8* %v1_d13c, align 1
  %v3_d13c = zext i8 %v2_d13c to i32
  %v1_d140 = add i32 %v0_d154, 1
  %v2_d140 = inttoptr i32 %v1_d140 to i8*
  %v3_d140 = load i8, i8* %v2_d140, align 1
  %v4_d140 = zext i8 %v3_d140 to i32
  %v1_d144 = add nsw i32 %v0_d144, -2
  %v4_d148 = mul nuw nsw i32 %v4_d140, 256
  %v5_d148 = or i32 %v4_d148, %v3_d13c
  %v2_d150 = add i32 %v5_d148, %v0_d150
  %v1_d154 = add i32 %v0_d154, 2
  store i32 %v1_d154, i32* @r1, align 4
  %v8_d158 = icmp sgt i32 %v1_d144, 1
  br i1 %v8_d158, label %dec_label_pc_d13c, label %dec_label_pc_d15c

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d13c, %dec_label_pc_d114
  %v1_d164 = phi i32 [ 0, %dec_label_pc_d114 ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d15c = phi i32 [ %arg3, %dec_label_pc_d114 ], [ %v1_d144, %dec_label_pc_d13c ]
  %v7_d15c = icmp eq i32 %v0_d15c, 1
  br i1 %v7_d15c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d15c
  %v1_d160 = load i32, i32* @r1, align 4
  %v2_d160 = inttoptr i32 %v1_d160 to i8*
  %v3_d160 = load i8, i8* %v2_d160, align 1
  %v4_d160 = zext i8 %v3_d160 to i32
  %v3_d164 = add i32 %v4_d160, %v1_d164
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d15c, %bb
  %v0_d188 = phi i32 [ %v1_d164, %dec_label_pc_d15c ], [ %v3_d164, %bb ]
  %v3_d16c = urem i32 %v2_d12c, 65536
  %v1_d174 = add i32 %arg1, 9
  %v2_d174 = inttoptr i32 %v1_d174 to i8*
  %v3_d174 = load i8, i8* %v2_d174, align 1
  %v4_d174 = zext i8 %v3_d174 to i32
  %v3_d178 = urem i32 %v5_d12c, 65536
  %v4_d17c = udiv i32 %v2_d12c, 65536
  %v3_d184 = mul nuw nsw i32 %v4_d174, 256
  %v4_d188 = udiv i32 %v5_d12c, 65536
  %v5_d188 = add i32 %v0_d188, %v4_d188
  %v2_d18c = add i32 %v5_d188, %v3_d184
  %v5_d17c = add nuw nsw i32 %v3_d16c, %v3_d124
  %v2_d180 = add nuw nsw i32 %v5_d17c, %v4_d17c
  %v2_d190 = add nuw nsw i32 %v2_d180, %v3_d178
  %v2_d194 = add i32 %v2_d18c, %v2_d190
  %tmp = icmp ult i32 %v2_d194, 65536
  br i1 %tmp, label %dec_label_pc_d1b4, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %.thread, %dec_label_pc_d1a0
  %v2_d1a81 = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2.in = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2 = udiv i32 %v3_d1ac2.in, 65536
  %v3_d1a4 = urem i32 %v2_d1a81, 65536
  %v2_d1a8 = add nuw nsw i32 %v3_d1a4, %v3_d1ac2
  %tmp14 = icmp ult i32 %v2_d1a8, 65536
  br i1 %tmp14, label %dec_label_pc_d1b4.loopexit, label %dec_label_pc_d1a0

dec_label_pc_d1b4.loopexit:                       ; preds = %dec_label_pc_d1a0
  br label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d1b4.loopexit, %.thread
  %v0_d1b4 = phi i32 [ %v2_d1a8, %dec_label_pc_d1b4.loopexit ], [ %v2_d194, %.thread ]
  %v1_d1b4 = urem i32 %v0_d1b4, 65536
  %v3_d1bc = xor i32 %v1_d1b4, 65535
  ret i32 %v3_d1bc

; uselistorder directives
  uselistorder i32 %v2_d1a8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_d194, { 3, 0, 2, 1 }
  uselistorder i32 %v1_d164, { 1, 0 }
  uselistorder i32 %v1_d154, { 1, 0 }
  uselistorder i32 %v1_d144, { 0, 2, 1 }
  uselistorder i32 %v0_d154, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d1a0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d13c, { 1, 0 }
}

define i32 @function_d1c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1c4:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d1c4 = load i32, i32* @r4, align 4
  store i32 %v3_d1c4, i32* %stack_var_-36, align 4
  %v6_d1c4 = load i32, i32* @r5, align 4
  %v9_d1c4 = load i32, i32* @r6, align 4
  %v12_d1c4 = load i32, i32* @r7, align 4
  %v15_d1c4 = load i32, i32* @r8, align 4
  %v18_d1c4 = load i32, i32* @sb, align 4
  %v21_d1c4 = load i32, i32* @sl, align 4
  %v24_d1c4 = load i32, i32* @fp, align 4
  %v2_d1d8 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_d1d8, i32* @sl, align 4
  %v3_d1e0 = mul i32 %arg1, 65536
  store i32 %v3_d1e0, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d1ec = ptrtoint i32* %stack_var_-8773 to i32
  %v2_d1f8 = bitcast i32* %stack_var_-4677 to i8*
  %v3_d1f8 = call i32 @function_11900(i8* %v2_d1f8, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_d210 = bitcast i32* %stack_var_-8773 to i8*
  %v3_d210 = call i32 @function_11900(i8* %v2_d210, i32 0)
  %v2_d214 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_d214, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_d234 = call i32 @function_11900(i8* nonnull %stack_var_-581, i32 0)
  %v2_d238 = ptrtoint i8* %stack_var_-68 to i32
  %v1_d240 = load i32, i32* @r5, align 4
  %v4_d240 = udiv i32 %v1_d240, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_d260 = trunc i32 %v4_d240 to i8
  %v4_d260 = call i32 @function_10e2c(i8 %v3_d260, i32 16, i32 %v2_d238)
  %v2_d268 = call i32 @function_109c8(i8* nonnull %stack_var_-68)
  %v7_d26c = icmp eq i32 %v2_d268, 2
  br i1 %v7_d26c, label %dec_label_pc_d734, label %dec_label_pc_d274

dec_label_pc_d274:                                ; preds = %dec_label_pc_d1c4, %dec_label_pc_d734
  %v1_d278 = call i32 @function_103fc(i32 13)
  %v1_d280 = call i32 @function_103fc(i32 14)
  %v1_d288 = call i32 @function_103fc(i32 15)
  %v1_d290 = call i32 @function_103fc(i32 17)
  %v0_d294 = load i32, i32* @r4, align 4
  %v2_d29c = inttoptr i32 %v0_d294 to i32*
  %v3_d29c = call i32 @function_10318(i32 17, i32* %v2_d29c)
  %v0_d2a0 = load i32, i32* @r4, align 4
  %v2_d2a4 = inttoptr i32 %v3_d29c to i8*
  %v3_d2a4 = call i32 @function_113f8(i8* %v2_d2a4, i32 %v0_d2a0)
  %v7_d2a8 = icmp eq i32 %v3_d2a4, -1
  store i32 %v3_d2a4, i32* @r8, align 4
  br i1 %v7_d2a8, label %dec_label_pc_d6d0, label %dec_label_pc_d2b4.preheader

dec_label_pc_d2b4.preheader:                      ; preds = %dec_label_pc_d274
  %v4_d2c058 = call i32 @function_10c20(i8* nonnull %stack_var_-581, i32 512, i32 %v3_d2a4)
  %v2_d2c460 = icmp eq i32 %v4_d2c058, 0
  br i1 %v2_d2c460, label %dec_label_pc_d454.loopexit, label %dec_label_pc_d2cc.lr.ph

dec_label_pc_d2cc.lr.ph:                          ; preds = %dec_label_pc_d2b4.preheader
  %v2_d314 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d2cc

dec_label_pc_d2cc:                                ; preds = %dec_label_pc_d2cc.lr.ph, %dec_label_pc_d2b4.backedge
  %v3_d2d0 = load i8, i8* %stack_var_-581, align 1
  %v4_d2d0 = sext i8 %v3_d2d0 to i32
  %v2_d2d4 = icmp eq i8 %v3_d2d0, 0
  br i1 %v2_d2d4, label %bb126, label %bb

bb:                                               ; preds = %dec_label_pc_d2cc
  %v8_d2d8 = icmp eq i8 %v3_d2d0, 58
  br i1 %v8_d2d8, label %.thread6, label %dec_label_pc_d2ec

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_d304

bb126:                                            ; preds = %dec_label_pc_d2cc
  br label %dec_label_pc_d304

dec_label_pc_d2ec:                                ; preds = %bb
  %v1_d2f4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d2f0

dec_label_pc_d2f0:                                ; preds = %bb127, %dec_label_pc_d2ec
  %v0_d2f0 = phi i32 [ %v1_d2f0, %bb127 ], [ 0, %dec_label_pc_d2ec ]
  %v1_d2f0 = add i32 %v0_d2f0, 1
  %v2_d2f4 = add i32 %v1_d2f0, %v1_d2f4.pre
  %v3_d2f4 = inttoptr i32 %v2_d2f4 to i8*
  %v4_d2f4 = load i8, i8* %v3_d2f4, align 1
  %v6_d2f4 = zext i8 %v4_d2f4 to i32
  %v2_d2f8 = icmp eq i8 %v4_d2f4, 0
  br i1 %v2_d2f8, label %dec_label_pc_d304, label %bb127

bb127:                                            ; preds = %dec_label_pc_d2f0
  %v8_d2fc = icmp eq i8 %v4_d2f4, 58
  br i1 %v8_d2fc, label %dec_label_pc_d304, label %dec_label_pc_d2f0

dec_label_pc_d304:                                ; preds = %dec_label_pc_d2f0, %bb127, %bb126, %.thread6
  %v1_d330 = phi i32 [ 0, %.thread6 ], [ 0, %bb126 ], [ %v1_d2f0, %bb127 ], [ %v1_d2f0, %dec_label_pc_d2f0 ]
  %v0_d304 = phi i32 [ %v4_d2d0, %.thread6 ], [ %v4_d2d0, %bb126 ], [ %v6_d2f4, %bb127 ], [ %v6_d2f4, %dec_label_pc_d2f0 ]
  %v2_d304 = icmp eq i32 %v0_d304, 0
  br i1 %v2_d304, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d30c

dec_label_pc_d2b4.backedge:                       ; preds = %dec_label_pc_d304, %dec_label_pc_d3dc, %dec_label_pc_d428, %dec_label_pc_d350
  %v0_d2bc = load i32, i32* @r8, align 4
  %v4_d2c0 = call i32 @function_10c20(i8* nonnull %stack_var_-581, i32 512, i32 %v0_d2bc)
  %v2_d2c4 = icmp eq i32 %v4_d2c0, 0
  br i1 %v2_d2c4, label %dec_label_pc_d454.loopexit, label %dec_label_pc_d2cc

dec_label_pc_d30c:                                ; preds = %dec_label_pc_d304
  %v1_d310 = add i32 %v1_d330, 2
  %v2_d318 = add i32 %v1_d310, %v2_d314
  %v1_d31c = add i32 %v2_d318, -545
  %v2_d31c = inttoptr i32 %v1_d31c to i8*
  %v3_d31c = load i8, i8* %v2_d31c, align 1
  %v2_d320 = icmp eq i8 %v3_d31c, 0
  br i1 %v2_d320, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_d30c
  %v8_d324 = icmp eq i8 %v3_d31c, 32
  br i1 %v8_d324, label %.thread10, label %dec_label_pc_d330

.thread10:                                        ; preds = %bb128
  store i32 %v1_d310, i32* @r5, align 4
  br label %dec_label_pc_d350

bb129:                                            ; preds = %dec_label_pc_d30c
  store i32 %v1_d310, i32* @r5, align 4
  br label %dec_label_pc_d350

dec_label_pc_d330:                                ; preds = %bb128
  %v0_d330 = load i32, i32* @r6, align 4
  %v2_d330 = add i32 %v0_d330, %v1_d330
  br label %dec_label_pc_d334

dec_label_pc_d334:                                ; preds = %bb130, %dec_label_pc_d330
  %v0_d34013 = phi i32 [ %v1_d340, %bb130 ], [ %v2_d330, %dec_label_pc_d330 ]
  %v1_d334 = add i32 %v0_d34013, 3
  %v2_d334 = inttoptr i32 %v1_d334 to i8*
  %v3_d334 = load i8, i8* %v2_d334, align 1
  %v2_d338 = icmp eq i8 %v3_d334, 0
  br i1 %v2_d338, label %.thread12, label %bb130

.thread12:                                        ; preds = %dec_label_pc_d334
  %v1_d34014 = add i32 %v0_d34013, 1
  br label %dec_label_pc_d348

bb130:                                            ; preds = %dec_label_pc_d334
  %v8_d33c = icmp eq i8 %v3_d334, 32
  %v1_d340 = add i32 %v0_d34013, 1
  br i1 %v8_d33c, label %dec_label_pc_d348, label %dec_label_pc_d334

dec_label_pc_d348:                                ; preds = %bb130, %.thread12
  %v1_d34015 = phi i32 [ %v1_d34014, %.thread12 ], [ %v1_d340, %bb130 ]
  %v2_d348 = sub i32 %v1_d34015, %v0_d330
  %v1_d34c = add i32 %v2_d348, 2
  store i32 %v1_d34c, i32* @r5, align 4
  br label %dec_label_pc_d350

dec_label_pc_d350:                                ; preds = %bb129, %.thread10, %dec_label_pc_d348
  %v1_d35c = phi i32 [ %v1_d310, %.thread10 ], [ %v1_d310, %bb129 ], [ %v1_d34c, %dec_label_pc_d348 ]
  %v0_d350 = load i32, i32* @r6, align 4
  %v2_d350 = add i32 %v0_d350, %v1_d310
  store i32 %v2_d350, i32* @r4, align 4
  %v2_d35c = add i32 %v1_d35c, %v2_d314
  store i32 0, i32* @r7, align 4
  %v3_d368 = add i32 %v2_d35c, -545
  %v4_d368 = inttoptr i32 %v3_d368 to i8*
  store i8 0, i8* %v4_d368, align 1
  %v1_d36c = inttoptr i32 %v2_d350 to i8*
  %v2_d36c = call i32 @function_109c8(i8* %v1_d36c)
  store i32 %v2_d36c, i32* @r1, align 4
  %v0_d378 = load i32, i32* @r4, align 4
  %v3_d37c = inttoptr i32 %v0_d378 to i8*
  %v4_d37c = call i32 @function_10d1c(i8* %v3_d37c, i32 %v2_d36c, i32 %v2_d238)
  %v7_d380 = icmp eq i32 %v4_d37c, -1
  br i1 %v7_d380, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d39c.preheader

dec_label_pc_d39c.preheader:                      ; preds = %dec_label_pc_d350
  %v1_d384 = load i32, i32* @r7, align 4
  %v1_d388 = load i32, i32* @r6, align 4
  %v2_d388 = load i32, i32* @r5, align 4
  %v3_d388 = add i32 %v2_d388, %v1_d388
  store i32 %v1_d384, i32* @lr, align 4
  store i32 %v1_d384, i32* @r4, align 4
  %v1_d39c50 = add i32 %v3_d388, 2
  %v2_d39c51 = inttoptr i32 %v1_d39c50 to i8*
  %v3_d39c52 = load i8, i8* %v2_d39c51, align 1
  %v2_d3a054 = icmp eq i8 %v3_d39c52, 0
  %v1_d3a456 = add i32 %v2_d388, 2
  br i1 %v2_d3a054, label %dec_label_pc_d3dc, label %dec_label_pc_d3ac

dec_label_pc_d3ac:                                ; preds = %dec_label_pc_d39c.preheader, %dec_label_pc_d39c.backedge
  %v0_d3dc86 = phi i32 [ %v0_d3dc85, %dec_label_pc_d39c.backedge ], [ %v1_d384, %dec_label_pc_d39c.preheader ]
  %v0_d3c4.pr = phi i32 [ %v0_d3c4.pr71, %dec_label_pc_d39c.backedge ], [ %v1_d384, %dec_label_pc_d39c.preheader ]
  %v0_d6e0 = phi i32 [ %v0_d6e074, %dec_label_pc_d39c.backedge ], [ %v1_d384, %dec_label_pc_d39c.preheader ]
  %v0_d3a482 = phi i32 [ %v1_d3a4, %dec_label_pc_d39c.backedge ], [ %v1_d3a456, %dec_label_pc_d39c.preheader ]
  %v0_d3d4 = phi i32 [ %v0_d39c, %dec_label_pc_d39c.backedge ], [ %v3_d388, %dec_label_pc_d39c.preheader ]
  %v1_d3b0.in = phi i8 [ %v3_d39c, %dec_label_pc_d39c.backedge ], [ %v3_d39c52, %dec_label_pc_d39c.preheader ]
  %v7_d3ac = icmp eq i8 %v1_d3b0.in, 9
  br i1 %v7_d3ac, label %.thread23, label %bb131

bb131:                                            ; preds = %dec_label_pc_d3ac
  %v8_d3b0 = icmp eq i8 %v1_d3b0.in, 32
  br i1 %v8_d3b0, label %.thread23.thread35, label %dec_label_pc_d3c4

.thread23.thread35:                               ; preds = %bb131
  br label %dec_label_pc_d3d0

.thread23:                                        ; preds = %dec_label_pc_d3ac
  br label %dec_label_pc_d3d0

dec_label_pc_d3c4:                                ; preds = %bb131
  %v7_d3c4 = icmp eq i32 %v0_d3c4.pr, 1
  br i1 %v7_d3c4, label %dec_label_pc_d6e0, label %dec_label_pc_d3cc

dec_label_pc_d3cc:                                ; preds = %dec_label_pc_d6e0, %dec_label_pc_d3c4
  %v0_d3d079 = phi i32 [ %v1_d6e0, %dec_label_pc_d6e0 ], [ %v0_d6e0, %dec_label_pc_d3c4 ]
  br label %dec_label_pc_d3d0

dec_label_pc_d3d0:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_d3cc
  %v0_d3d0 = phi i32 [ %v0_d6e0, %.thread23.thread35 ], [ %v0_d6e0, %.thread23 ], [ %v0_d3d079, %dec_label_pc_d3cc ]
  %v0_d3c4.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_d3cc ]
  %v7_d3d8 = icmp sgt i32 %v0_d3d0, 6
  br i1 %v7_d3d8, label %dec_label_pc_d3dc, label %dec_label_pc_d39c.backedge

dec_label_pc_d3dc:                                ; preds = %dec_label_pc_d39c.backedge, %dec_label_pc_d3d0, %dec_label_pc_d39c.preheader
  %v1_d42c = phi i32 [ %v1_d3a456, %dec_label_pc_d39c.preheader ], [ %v1_d3a4, %dec_label_pc_d39c.backedge ], [ %v0_d3a482, %dec_label_pc_d3d0 ]
  %v0_d3dc = phi i32 [ %v1_d384, %dec_label_pc_d39c.preheader ], [ %v0_d3dc85, %dec_label_pc_d39c.backedge ], [ %v0_d3dc86, %dec_label_pc_d3d0 ]
  %v2_d3dc = icmp eq i32 %v0_d3dc, 0
  br i1 %v2_d3dc, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d3e8

dec_label_pc_d3e8:                                ; preds = %dec_label_pc_d3dc
  %v2_d3f0 = add i32 %v1_d42c, %v2_d314
  %v1_d3f4 = add i32 %v2_d3f0, -545
  %v2_d3f4 = inttoptr i32 %v1_d3f4 to i8*
  %v3_d3f4 = load i8, i8* %v2_d3f4, align 1
  %v2_d3f8 = icmp eq i8 %v3_d3f4, 0
  br i1 %v2_d3f8, label %dec_label_pc_d428, label %bb132

bb132:                                            ; preds = %dec_label_pc_d3e8
  %v8_d3fc = icmp eq i8 %v3_d3f4, 32
  br i1 %v8_d3fc, label %dec_label_pc_d428, label %dec_label_pc_d404

dec_label_pc_d404:                                ; preds = %bb132
  %v2_d404 = add i32 %v1_d42c, %v1_d388
  br label %dec_label_pc_d408

dec_label_pc_d408:                                ; preds = %bb133, %dec_label_pc_d404
  %v0_d41428 = phi i32 [ %v1_d414, %bb133 ], [ %v1_d42c, %dec_label_pc_d404 ]
  %v0_d408 = phi i32 [ %v1_d408, %bb133 ], [ %v2_d404, %dec_label_pc_d404 ]
  %v1_d408 = add i32 %v0_d408, 1
  %v2_d408 = inttoptr i32 %v1_d408 to i8*
  %v3_d408 = load i8, i8* %v2_d408, align 1
  %v2_d40c = icmp eq i8 %v3_d408, 0
  br i1 %v2_d40c, label %.thread27, label %bb133

.thread27:                                        ; preds = %dec_label_pc_d408
  %v1_d41429 = add i32 %v0_d41428, 1
  br label %dec_label_pc_d41c

bb133:                                            ; preds = %dec_label_pc_d408
  %v8_d410 = icmp eq i8 %v3_d408, 32
  %v1_d414 = add i32 %v0_d41428, 1
  br i1 %v8_d410, label %dec_label_pc_d41c, label %dec_label_pc_d408

dec_label_pc_d41c:                                ; preds = %bb133, %.thread27
  %v1_d424 = phi i32 [ %v1_d41429, %.thread27 ], [ %v1_d414, %bb133 ]
  %v2_d424 = add i32 %v1_d424, %v2_d314
  br label %dec_label_pc_d428

dec_label_pc_d428:                                ; preds = %dec_label_pc_d3e8, %bb132, %dec_label_pc_d41c
  %v2_d434 = phi i32 [ %v2_d3f0, %dec_label_pc_d3e8 ], [ %v2_d3f0, %bb132 ], [ %v2_d424, %dec_label_pc_d41c ]
  %v2_d42c = add i32 %v1_d42c, %v1_d388
  store i32 %v2_d42c, i32* @r4, align 4
  %v3_d434 = add i32 %v2_d434, -545
  %v4_d434 = inttoptr i32 %v3_d434 to i8*
  store i8 0, i8* %v4_d434, align 1
  %v1_d438 = inttoptr i32 %v2_d42c to i8*
  %v2_d438 = call i32 @function_109c8(i8* %v1_d438)
  %v8_d440 = icmp sgt i32 %v2_d438, 15
  br i1 %v8_d440, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d444

dec_label_pc_d444:                                ; preds = %dec_label_pc_d428
  %v0_d448 = load i32, i32* @r4, align 4
  %v2_d44c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_d44c, i32* @r0, align 4
  %v2_d450 = bitcast i32* %stack_var_-52 to i8*
  %v3_d450 = call i32 @function_109f0(i8* %v2_d450, i32 %v0_d448)
  br label %dec_label_pc_d454

dec_label_pc_d454.loopexit:                       ; preds = %dec_label_pc_d2b4.backedge, %dec_label_pc_d2b4.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre95 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_d454

dec_label_pc_d454:                                ; preds = %dec_label_pc_d454.loopexit, %dec_label_pc_d444
  %v1_d464.pre-phi = phi i8* [ %.pre95, %dec_label_pc_d454.loopexit ], [ %v2_d450, %dec_label_pc_d444 ]
  %v2_d460.pre-phi = phi i32 [ %.pre, %dec_label_pc_d454.loopexit ], [ %v2_d44c, %dec_label_pc_d444 ]
  %v0_d454 = load i32, i32* @r8, align 4
  %v1_d458 = call i32 @function_112cc(i32 %v0_d454)
  %v2_d464 = call i32 @function_109c8(i8* %v1_d464.pre-phi)
  store i32 %v2_d464, i32* @r4, align 4
  %v2_d468 = icmp eq i32 %v2_d464, 0
  br i1 %v2_d468, label %dec_label_pc_d710, label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d454
  %v3_d478 = call i32 @function_10318(i32 13, i32* null)
  store i32 %v3_d478, i32* @r0, align 4
  %v1_d47c = call i32 @function_116d4(i32 %v3_d478)
  store i32 %v1_d47c, i32* @r8, align 4
  %v2_d480 = icmp eq i32 %v1_d47c, 0
  br i1 %v2_d480, label %dec_label_pc_d6b0, label %dec_label_pc_d490.preheader

dec_label_pc_d490.preheader:                      ; preds = %dec_label_pc_d470
  store i32 0, i32* @r5, align 4
  %v1_d49445 = inttoptr i32 %v1_d47c to i32*
  %v2_d49446 = call i32 @function_117d0(i32* %v1_d49445)
  %v2_d49848 = icmp eq i32 %v2_d49446, 0
  br i1 %v2_d49848, label %dec_label_pc_d6a4, label %dec_label_pc_d4a0.preheader

dec_label_pc_d490.loopexit:                       ; preds = %dec_label_pc_d4a8, %dec_label_pc_d4bc, %dec_label_pc_d524
  %v0_d490 = load i32, i32* @r8, align 4
  %v1_d494 = inttoptr i32 %v0_d490 to i32*
  %v2_d494 = call i32 @function_117d0(i32* %v1_d494)
  %v2_d498 = icmp eq i32 %v2_d494, 0
  br i1 %v2_d498, label %dec_label_pc_d6a4, label %dec_label_pc_d4a0.preheader

dec_label_pc_d4a0.preheader:                      ; preds = %dec_label_pc_d490.preheader, %dec_label_pc_d490.loopexit
  %v0_d4a894 = phi i32 [ %v2_d494, %dec_label_pc_d490.loopexit ], [ %v2_d49446, %dec_label_pc_d490.preheader ]
  br label %dec_label_pc_d4a0

dec_label_pc_d4a0:                                ; preds = %dec_label_pc_d4a0.preheader, %dec_label_pc_d68c
  %v0_d4b4 = phi i32 [ %v0_d4a894, %dec_label_pc_d4a0.preheader ], [ %v2_d698, %dec_label_pc_d68c ]
  %v0_d4a0 = load i32, i32* @r5, align 4
  %v2_d4a0 = icmp eq i32 %v0_d4a0, 0
  br i1 %v2_d4a0, label %dec_label_pc_d4a8, label %dec_label_pc_d6a4

dec_label_pc_d4a8:                                ; preds = %dec_label_pc_d4a0
  %v1_d4a8 = add i32 %v0_d4b4, 11
  %v2_d4a8 = inttoptr i32 %v1_d4a8 to i8*
  %v3_d4a8 = load i8, i8* %v2_d4a8, align 1
  %v4_d4a8 = zext i8 %v3_d4a8 to i32
  %v1_d4ac = add nsw i32 %v4_d4a8, -48
  store i32 %v1_d4a8, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_d4ac, 9
  br i1 %tmp, label %dec_label_pc_d490.loopexit, label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d4a8
  %v3_d4c4 = call i32 @function_10318(i32 13, i32* null)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v3_d4d0 = call i32 @function_109f0(i8* %v2_d1f8, i32 %v3_d4c4)
  %v2_d4d8 = call i32 @function_109c8(i8* %v2_d1f8)
  %v0_d4dc = load i32, i32* @r7, align 4
  %v0_d4e0 = load i32, i32* @sl, align 4
  %v2_d4e0 = add i32 %v0_d4e0, %v2_d4d8
  store i32 %v2_d4e0, i32* @r0, align 4
  %v2_d4e4 = inttoptr i32 %v2_d4e0 to i8*
  %v3_d4e4 = call i32 @function_109f0(i8* %v2_d4e4, i32 %v0_d4dc)
  %v2_d4ec = call i32 @function_109c8(i8* %v2_d1f8)
  %v0_d4f0 = load i32, i32* @r5, align 4
  store i32 %v2_d4ec, i32* @r4, align 4
  %v2_d4fc = inttoptr i32 %v0_d4f0 to i32*
  %v3_d4fc = call i32 @function_10318(i32 14, i32* %v2_d4fc)
  %v0_d504 = load i32, i32* @sl, align 4
  %v1_d504 = load i32, i32* @r4, align 4
  %v2_d504 = add i32 %v1_d504, %v0_d504
  store i32 %v2_d504, i32* @r0, align 4
  %v2_d508 = inttoptr i32 %v2_d504 to i8*
  %v3_d508 = call i32 @function_109f0(i8* %v2_d508, i32 %v3_d4fc)
  %v4_d518 = call i32 @function_114c0(i8* %v2_d1f8, i32 %v2_d1ec, i32 4096)
  %v7_d51c = icmp eq i32 %v4_d518, -1
  br i1 %v7_d51c, label %dec_label_pc_d490.loopexit, label %dec_label_pc_d524

dec_label_pc_d524:                                ; preds = %dec_label_pc_d4bc
  %v0_d524 = load i32, i32* @r5, align 4
  %v2_d52c = inttoptr i32 %v0_d524 to i32*
  %v3_d52c = call i32 @function_10318(i32 13, i32* %v2_d52c)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v3_d538 = call i32 @function_109f0(i8* %v2_d1f8, i32 %v3_d52c)
  %v2_d540 = call i32 @function_109c8(i8* %v2_d1f8)
  %v0_d544 = load i32, i32* @r7, align 4
  %v0_d548 = load i32, i32* @sl, align 4
  %v2_d548 = add i32 %v0_d548, %v2_d540
  store i32 %v2_d548, i32* @r0, align 4
  %v2_d54c = inttoptr i32 %v2_d548 to i8*
  %v3_d54c = call i32 @function_109f0(i8* %v2_d54c, i32 %v0_d544)
  %v2_d554 = call i32 @function_109c8(i8* %v2_d1f8)
  %v0_d558 = load i32, i32* @r5, align 4
  store i32 %v2_d554, i32* @r4, align 4
  %v2_d564 = inttoptr i32 %v0_d558 to i32*
  %v3_d564 = call i32 @function_10318(i32 15, i32* %v2_d564)
  %v0_d56c = load i32, i32* @sl, align 4
  %v1_d56c = load i32, i32* @r4, align 4
  %v2_d56c = add i32 %v1_d56c, %v0_d56c
  store i32 %v2_d56c, i32* @r0, align 4
  %v2_d570 = inttoptr i32 %v2_d56c to i8*
  %v3_d570 = call i32 @function_109f0(i8* %v2_d570, i32 %v3_d564)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v1_d578 = call i32 @function_116d4(i32 %v2_d1d8)
  store i32 %v1_d578, i32* @sb, align 4
  %v2_d57c = icmp eq i32 %v1_d578, 0
  br i1 %v2_d57c, label %dec_label_pc_d490.loopexit, label %dec_label_pc_d584.preheader

dec_label_pc_d584.preheader:                      ; preds = %dec_label_pc_d524
  %v1_d58840 = inttoptr i32 %v1_d578 to i32*
  %v2_d58841 = call i32 @function_117d0(i32* %v1_d58840)
  store i32 %v2_d58841, i32* @r6, align 4
  %v2_d58c43 = icmp eq i32 %v2_d58841, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d1ec, i32* @r0, align 4
  br i1 %v2_d58c43, label %dec_label_pc_d68c, label %dec_label_pc_d59cthread-pre-split

dec_label_pc_d584.loopexit:                       ; preds = %dec_label_pc_d5a4, %dec_label_pc_d63c
  %v0_d584 = load i32, i32* @sb, align 4
  %v1_d588 = inttoptr i32 %v0_d584 to i32*
  %v2_d588 = call i32 @function_117d0(i32* %v1_d588)
  store i32 %v2_d588, i32* @r6, align 4
  %v2_d58c = icmp eq i32 %v2_d588, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d1ec, i32* @r0, align 4
  br i1 %v2_d58c, label %dec_label_pc_d68c, label %dec_label_pc_d59cthread-pre-split

dec_label_pc_d59cthread-pre-split:                ; preds = %dec_label_pc_d584.preheader, %dec_label_pc_d584.loopexit
  %v0_d59c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d59c

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d59cthread-pre-split, %dec_label_pc_d664
  %v0_d59c = phi i32 [ %v0_d59c.pr, %dec_label_pc_d59cthread-pre-split ], [ 1, %dec_label_pc_d664 ]
  %v2_d59c = icmp eq i32 %v0_d59c, 0
  br i1 %v2_d59c, label %dec_label_pc_d5a4, label %dec_label_pc_d68c

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d59c
  %v0_d5a4 = call i32 @function_10a68()
  %v0_d5a8 = load i32, i32* @r5, align 4
  %v2_d5b0 = inttoptr i32 %v0_d5a8 to i32*
  %v3_d5b0 = call i32 @function_10318(i32 13, i32* %v2_d5b0)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v3_d5bc = call i32 @function_109f0(i8* %v2_d1f8, i32 %v3_d5b0)
  %v2_d5c4 = call i32 @function_109c8(i8* %v2_d1f8)
  %v0_d5c8 = load i32, i32* @r7, align 4
  %v0_d5cc = load i32, i32* @sl, align 4
  %v2_d5cc = add i32 %v0_d5cc, %v2_d5c4
  store i32 %v2_d5cc, i32* @r0, align 4
  %v2_d5d0 = inttoptr i32 %v2_d5cc to i8*
  %v3_d5d0 = call i32 @function_109f0(i8* %v2_d5d0, i32 %v0_d5c8)
  %v2_d5d8 = call i32 @function_109c8(i8* %v2_d1f8)
  %v0_d5dc = load i32, i32* @r5, align 4
  store i32 %v2_d5d8, i32* @r4, align 4
  %v2_d5e8 = inttoptr i32 %v0_d5dc to i32*
  %v3_d5e8 = call i32 @function_10318(i32 15, i32* %v2_d5e8)
  %v0_d5f0 = load i32, i32* @sl, align 4
  %v1_d5f0 = load i32, i32* @r4, align 4
  %v2_d5f0 = add i32 %v1_d5f0, %v0_d5f0
  store i32 %v2_d5f0, i32* @r0, align 4
  %v2_d5f4 = inttoptr i32 %v2_d5f0 to i8*
  %v3_d5f4 = call i32 @function_109f0(i8* %v2_d5f4, i32 %v3_d5e8)
  %v2_d5fc = call i32 @function_109c8(i8* %v2_d1f8)
  %v0_d604 = load i32, i32* @sl, align 4
  %v2_d604 = add i32 %v0_d604, %v2_d5fc
  store i32 %v2_d604, i32* @r0, align 4
  %v2_d608 = inttoptr i32 %v2_d604 to i8*
  %v3_d608 = call i32 @function_109f0(i8* %v2_d608, i32 ptrtoint (i32* @global_var_13b34.61 to i32))
  %v2_d610 = call i32 @function_109c8(i8* %v2_d1f8)
  %v0_d614 = load i32, i32* @r6, align 4
  %v1_d614 = add i32 %v0_d614, 11
  %v0_d618 = load i32, i32* @sl, align 4
  %v2_d618 = add i32 %v0_d618, %v2_d610
  store i32 %v2_d618, i32* @r0, align 4
  %v2_d61c = inttoptr i32 %v2_d618 to i8*
  %v3_d61c = call i32 @function_109f0(i8* %v2_d61c, i32 %v1_d614)
  %v4_d62c = call i32 @function_114c0(i8* %v2_d1f8, i32 %v2_d1ec, i32 4096)
  %v7_d630 = icmp eq i32 %v4_d62c, -1
  br i1 %v7_d630, label %dec_label_pc_d584.loopexit, label %dec_label_pc_d63c

dec_label_pc_d63c:                                ; preds = %dec_label_pc_d5a4
  %v2_d63c = call i32 @function_109c8(i8* %v2_d210)
  store i32 %v2_d63c, i32* @r1, align 4
  %v4_d650 = call i32 @function_10d1c(i8* %v2_d210, i32 %v2_d63c, i32 %v2_d460.pre-phi)
  %v7_d654 = icmp eq i32 %v4_d650, -1
  br i1 %v7_d654, label %dec_label_pc_d584.loopexit, label %dec_label_pc_d664

dec_label_pc_d664:                                ; preds = %dec_label_pc_d63c
  %v0_d65c = load i32, i32* @r7, align 4
  %v2_d664 = inttoptr i32 %v0_d65c to i8*
  %v3_d664 = call i32 @function_10af4(i8* %v2_d664, i32 10)
  %v2_d66c = call i32 @function_113cc(i32 %v3_d664, i32 9)
  %v0_d670 = load i32, i32* @sb, align 4
  %v1_d674 = inttoptr i32 %v0_d670 to i32*
  %v2_d674 = call i32 @function_117d0(i32* %v1_d674)
  store i32 %v2_d674, i32* @r6, align 4
  %v2_d678 = icmp eq i32 %v2_d674, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d1ec, i32* @r0, align 4
  br i1 %v2_d678, label %dec_label_pc_d68c, label %dec_label_pc_d59c

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d584.loopexit, %dec_label_pc_d664, %dec_label_pc_d59c, %dec_label_pc_d584.preheader
  %v0_d68c = load i32, i32* @sb, align 4
  %v1_d690 = inttoptr i32 %v0_d68c to i32*
  %v2_d690 = call i32 @function_11620(i32* %v1_d690)
  %v0_d694 = load i32, i32* @r8, align 4
  %v1_d698 = inttoptr i32 %v0_d694 to i32*
  %v2_d698 = call i32 @function_117d0(i32* %v1_d698)
  %v2_d69c = icmp eq i32 %v2_d698, 0
  br i1 %v2_d69c, label %dec_label_pc_d6a4, label %dec_label_pc_d4a0

dec_label_pc_d6a4:                                ; preds = %dec_label_pc_d490.loopexit, %dec_label_pc_d68c, %dec_label_pc_d4a0, %dec_label_pc_d490.preheader
  %v0_d6a4 = load i32, i32* @r8, align 4
  %v1_d6a8 = inttoptr i32 %v0_d6a4 to i32*
  %v2_d6a8 = call i32 @function_11620(i32* %v1_d6a8)
  %v0_d6ac = load i32, i32* @r5, align 4
  %v1_d6ac = urem i32 %v0_d6ac, 256
  br label %dec_label_pc_d6b0

dec_label_pc_d6b0:                                ; preds = %dec_label_pc_d470, %dec_label_pc_d6a4
  %storemerge = phi i32 [ %v1_d6ac, %dec_label_pc_d6a4 ], [ 0, %dec_label_pc_d470 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_d6b4 = call i32 @function_126cc(i32 1)
  %v1_d6bc = call i32 @function_10344(i32 13)
  %v1_d6c4 = call i32 @function_10344(i32 14)
  %v1_d6cc = call i32 @function_10344(i32 15)
  br label %dec_label_pc_d6d0

dec_label_pc_d6d0:                                ; preds = %dec_label_pc_d274, %dec_label_pc_d710, %dec_label_pc_d6b0
  %v0_d6d0 = load i32, i32* @r4, align 4
  %v2_d6dc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d6dc, i32* @r4, align 4
  store i32 %v6_d1c4, i32* @r5, align 4
  store i32 %v9_d1c4, i32* @r6, align 4
  store i32 %v12_d1c4, i32* @r7, align 4
  store i32 %v15_d1c4, i32* @r8, align 4
  store i32 %v18_d1c4, i32* @sb, align 4
  store i32 %v21_d1c4, i32* @sl, align 4
  store i32 %v24_d1c4, i32* @fp, align 4
  ret i32 %v0_d6d0

dec_label_pc_d6e0:                                ; preds = %dec_label_pc_d3c4
  %v1_d6e0 = add i32 %v0_d6e0, 1
  store i32 %v1_d6e0, i32* @lr, align 4
  %v7_d6e4 = icmp eq i32 %v0_d6e0, 0
  br i1 %v7_d6e4, label %dec_label_pc_d6ec, label %dec_label_pc_d3cc

dec_label_pc_d6ec:                                ; preds = %dec_label_pc_d6e0
  %v1_d6ec = add i32 %v0_d3d4, 3
  %v2_d6ec = inttoptr i32 %v1_d6ec to i8*
  %v3_d6ec = load i8, i8* %v2_d6ec, align 1
  %v7_d6f0 = icmp eq i8 %v3_d6ec, 65
  br i1 %v7_d6f0, label %dec_label_pc_d700, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_d6ec
  br label %dec_label_pc_d39c.backedge

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6ec
  store i32 %v1_d6e0, i32* @r4, align 4
  br label %dec_label_pc_d39c.backedge

dec_label_pc_d39c.backedge:                       ; preds = %.thread33, %dec_label_pc_d700, %dec_label_pc_d3d0
  %v0_d3dc85 = phi i32 [ %v1_d6e0, %dec_label_pc_d700 ], [ %v0_d3dc86, %dec_label_pc_d3d0 ], [ %v0_d3dc86, %.thread33 ]
  %v0_d6e074 = phi i32 [ %v1_d6e0, %dec_label_pc_d700 ], [ %v0_d3d0, %dec_label_pc_d3d0 ], [ %v1_d6e0, %.thread33 ]
  %v0_d3c4.pr71 = phi i32 [ 0, %dec_label_pc_d700 ], [ %v0_d3c4.pr72, %dec_label_pc_d3d0 ], [ 0, %.thread33 ]
  %v0_d39c = add i32 %v0_d3d4, 1
  %v1_d39c = add i32 %v0_d3d4, 3
  %v2_d39c = inttoptr i32 %v1_d39c to i8*
  %v3_d39c = load i8, i8* %v2_d39c, align 1
  %v2_d3a0 = icmp eq i8 %v3_d39c, 0
  %v1_d3a4 = add i32 %v0_d3a482, 1
  br i1 %v2_d3a0, label %dec_label_pc_d3dc, label %dec_label_pc_d3ac

dec_label_pc_d710:                                ; preds = %dec_label_pc_d454
  %v1_d714 = call i32 @function_10344(i32 13)
  %v1_d71c = call i32 @function_10344(i32 14)
  %v1_d724 = call i32 @function_10344(i32 15)
  %v1_d72c = call i32 @function_10344(i32 17)
  br label %dec_label_pc_d6d0

dec_label_pc_d734:                                ; preds = %dec_label_pc_d1c4
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_d274

; uselistorder directives
  uselistorder i32 %v1_d3a4, { 1, 0 }
  uselistorder i8 %v3_d39c, { 1, 0 }
  uselistorder i32 %v0_d3dc85, { 1, 0 }
  uselistorder i32 %v1_d6e0, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_d698, { 1, 0 }
  uselistorder i32 %v1_d408, { 1, 0 }
  uselistorder i32 %v0_d41428, { 1, 0 }
  uselistorder i32 %v1_d42c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_d3d0, { 1, 0 }
  uselistorder i32 %v0_d3a482, { 1, 0 }
  uselistorder i32 %v0_d6e0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d3dc86, { 1, 2, 0 }
  uselistorder i32 %v1_d3a456, { 1, 0 }
  uselistorder i32 %v2_d388, { 1, 0 }
  uselistorder i32 %v1_d384, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_d34013, { 1, 0, 2 }
  uselistorder i32 %v0_d330, { 1, 0 }
  uselistorder i32 %v1_d310, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_d2a4, { 1, 2, 0 }
  uselistorder i32 %v2_d1ec, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_d1d8, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_10af4, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_10c20, { 1, 0 }
  uselistorder label %dec_label_pc_d39c.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6d0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d6b0, { 1, 0 }
  uselistorder label %dec_label_pc_d6a4, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d68c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d59c, { 1, 0 }
  uselistorder label %dec_label_pc_d59cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d584.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d4a0, { 1, 0 }
  uselistorder label %dec_label_pc_d4a0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d490.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d428, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d3d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d3ac, { 1, 0 }
  uselistorder label %dec_label_pc_d350, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d2b4.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d304, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d2cc, { 1, 0 }
  uselistorder label %dec_label_pc_d274, { 1, 0 }
}

define i32 @function_d760(i32 %arg1) local_unnamed_addr {
dec_label_pc_d760:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-8380 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4260 = alloca i32, align 4
  %stack_var_-8388 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d760 = load i32, i32* @r4, align 4
  store i32 %v3_d760, i32* %stack_var_-36, align 4
  %v6_d760 = load i32, i32* @r5, align 4
  %v9_d760 = load i32, i32* @r6, align 4
  %v12_d760 = load i32, i32* @r7, align 4
  %v15_d760 = load i32, i32* @r8, align 4
  %v18_d760 = load i32, i32* @sb, align 4
  %v21_d760 = load i32, i32* @sl, align 4
  %v24_d760 = load i32, i32* @fp, align 4
  %v2_d770 = call i32 @function_1159c(i32* null)
  store i32 %v2_d770, i32* @r7, align 4
  %v0_d778 = call i32 @function_112f8()
  %v7_d77c = icmp eq i32 %v0_d778, -1
  %. = zext i1 %v7_d77c to i32
  %tmp99 = icmp slt i32 %v0_d778, 1
  %storemerge73 = select i1 %tmp99, i32 %., i32 1
  store i32 %storemerge73, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1c2d8.63 to i32), i32* %r3.global-to-local, align 4
  %v2_d798 = icmp eq i32 %storemerge73, 0
  store i32 %v0_d778, i32* @global_var_1c2d8.63, align 4
  br i1 %v2_d798, label %dec_label_pc_d7b0, label %dec_label_pc_d7a4

dec_label_pc_d7a4:                                ; preds = %dec_label_pc_d8d8, %dec_label_pc_d7b0, %dec_label_pc_d760
  %v29_d7ac = phi i32 [ %v3_d868, %dec_label_pc_d7b0 ], [ %v0_d778, %dec_label_pc_d760 ], [ 0, %dec_label_pc_d8d8 ]
  %v2_d7ac = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d7ac, i32* @r4, align 4
  store i32 %v6_d760, i32* @r5, align 4
  store i32 %v9_d760, i32* @r6, align 4
  store i32 %v12_d760, i32* @r7, align 4
  store i32 %v15_d760, i32* @r8, align 4
  store i32 %v18_d760, i32* @sb, align 4
  store i32 %v21_d760, i32* @sl, align 4
  store i32 %v24_d760, i32* @fp, align 4
  ret i32 %v29_d7ac

dec_label_pc_d7b0:                                ; preds = %dec_label_pc_d760
  %v1_d7b4 = call i32 @function_126cc(i32 5)
  %v1_d7bc = call i32 @function_11d48(i32 4096)
  store i32 ptrtoint (i32* @global_var_1c238.65 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c2d4.67 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_d7bc, i32* %r2.global-to-local, align 4
  %v0_d7cc = load i32, i32* @r5, align 4
  %v1_d7cc = trunc i32 %v0_d7cc to i8
  %v3_d7cc = inttoptr i32 %v1_d7bc to i8*
  store i8 %v1_d7cc, i8* %v3_d7cc, align 1
  %v0_d7d4 = load i32, i32* @r5, align 4
  %v1_d7d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_d7d4 = inttoptr i32 %v1_d7d4 to i32*
  store i32 %v0_d7d4, i32* %v2_d7d4, align 4
  %v0_d7d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d7d8 = load i32, i32* %r1.global-to-local, align 4
  %v2_d7d8 = inttoptr i32 %v1_d7d8 to i32*
  store i32 %v0_d7d8, i32* %v2_d7d8, align 4
  %v1_d7dc = call i32 @function_103fc(i32 13)
  %v1_d7e4 = call i32 @function_103fc(i32 14)
  %v2_d7ec = ptrtoint i32* %stack_var_-4260 to i32
  store i32 %v2_d7ec, i32* %r2.global-to-local, align 4
  %v0_d7f0 = load i32, i32* @r5, align 4
  store i32 %v0_d7f0, i32* %r1.global-to-local, align 4
  store i32 %v2_d7ec, i32* %stack_var_-8388, align 4
  %v2_d7fc = inttoptr i32 %v0_d7f0 to i32*
  %v3_d7fc = call i32 @function_10318(i32 13, i32* %v2_d7fc)
  %v1_d804 = add i32 %v2_d7ec, -24
  store i32 %v1_d804, i32* %r3.global-to-local, align 4
  store i32 %v3_d7fc, i32* %r1.global-to-local, align 4
  store i32 %v1_d804, i32* @r0, align 4
  store i32 %v1_d804, i32* %stack_var_-8388, align 4
  %v2_d814 = inttoptr i32 %v1_d804 to i8*
  %v3_d814 = call i32 @function_109f0(i8* %v2_d814, i32 %v3_d7fc)
  store i32 %v1_d804, i32* %r1.global-to-local, align 4
  %v2_d81c = add i32 %v1_d804, %v3_d814
  store i32 %v2_d81c, i32* @r4, align 4
  %v0_d820 = call i32 @function_11324()
  %v2_d828 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_d828, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d830 = trunc i32 %v0_d820 to i8
  %v4_d830 = call i32 @function_10e2c(i8 %v3_d830, i32 10, i32 %v2_d828)
  store i32 %v4_d830, i32* %r1.global-to-local, align 4
  %v0_d838 = load i32, i32* @r4, align 4
  store i32 %v0_d838, i32* @r0, align 4
  %v2_d83c = inttoptr i32 %v0_d838 to i8*
  %v3_d83c = call i32 @function_109f0(i8* %v2_d83c, i32 %v4_d830)
  %v0_d840 = load i32, i32* @r5, align 4
  store i32 %v0_d840, i32* %r1.global-to-local, align 4
  %v0_d844 = load i32, i32* @r4, align 4
  %v2_d844 = add i32 %v0_d844, %v3_d83c
  store i32 %v2_d844, i32* @r4, align 4
  %v2_d84c = inttoptr i32 %v0_d840 to i32*
  %v3_d84c = call i32 @function_10318(i32 14, i32* %v2_d84c)
  store i32 %v3_d84c, i32* %r1.global-to-local, align 4
  %v0_d854 = load i32, i32* @r4, align 4
  store i32 %v0_d854, i32* @r0, align 4
  %v2_d858 = inttoptr i32 %v0_d854 to i8*
  %v3_d858 = call i32 @function_109f0(i8* %v2_d858, i32 %v3_d84c)
  %v0_d85c = load i32, i32* @r5, align 4
  store i32 %v0_d85c, i32* %r1.global-to-local, align 4
  store i32 %v3_d858, i32* @r6, align 4
  %v2_d864 = load i32, i32* %stack_var_-8388, align 4
  %v2_d868 = inttoptr i32 %v2_d864 to i8*
  %v3_d868 = call i32 @function_113f8(i8* %v2_d868, i32 %v0_d85c)
  %v7_d86c = icmp eq i32 %v3_d868, -1
  br i1 %v7_d86c, label %dec_label_pc_d7a4, label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %dec_label_pc_d7b0
  %v1_d874 = call i32 @function_112cc(i32 %v3_d868)
  %v1_d87c = call i32 @function_10344(i32 13)
  %v1_d884 = call i32 @function_10344(i32 14)
  store i32 ptrtoint (i32* @global_var_1c2d4.67 to i32), i32* %r3.global-to-local, align 4
  %v2_d890 = load i32, i32* @global_var_1c2d4.67, align 4
  store i32 %v2_d890, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_d898 = load i32, i32* %stack_var_-8388, align 4
  %v3_d89c = inttoptr i32 %v2_d898 to i8*
  %v4_d89c = call i32 @function_114c0(i8* %v3_d89c, i32 %v2_d890, i32 4095)
  %v7_d8a0 = icmp eq i32 %v4_d89c, -1
  br i1 %v7_d8a0, label %.thread4, label %bb102

bb102:                                            ; preds = %dec_label_pc_d874
  store i32 ptrtoint (i32* @global_var_1c2d4.67 to i32), i32* %r1.global-to-local, align 4
  %v3_d8a8 = load i32, i32* @global_var_1c2d4.67, align 4
  store i32 %v3_d8a8, i32* %r3.global-to-local, align 4
  %v1_d8ac = load i32, i32* @r5, align 4
  %v2_d8ac = trunc i32 %v1_d8ac to i8
  %v5_d8ac = add i32 %v3_d8a8, %v4_d89c
  %v6_d8ac = inttoptr i32 %v5_d8ac to i8*
  store i8 %v2_d8ac, i8* %v6_d8ac, align 1
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_d874, %bb102
  %v2_d8b0 = load i32, i32* %stack_var_-8388, align 4
  store i32 %v2_d8b0, i32* %r2.global-to-local, align 4
  %v0_d8b4 = load i32, i32* @r4, align 4
  %v1_d8b4 = load i32, i32* @r6, align 4
  %v2_d8b4 = sub i32 %v0_d8b4, %v2_d8b0
  %v2_d8b8 = add i32 %v2_d8b4, %v1_d8b4
  store i32 %v2_d8b8, i32* @r1, align 4
  store i32 %v2_d8b0, i32* @r0, align 4
  %v0_d8c0 = call i32 @function_10a68()
  %v0_d8c8 = load i32, i32* @r5, align 4
  store i32 %v0_d8c8, i32* @fp, align 4
  %v0_d8cc = load i32, i32* @r7, align 4
  store i32 %v0_d8cc, i32* @r4, align 4
  %v2_d8d0 = ptrtoint i32* %stack_var_-8380 to i32
  store i32 %v2_d8d0, i32* @sl, align 4
  store i32 400, i32* @r5, align 4
  %v2_da20 = ptrtoint i32* %stack_var_-188 to i32
  %v2_da24 = bitcast i32* %stack_var_-188 to i8*
  %v2_da70 = ptrtoint i32* %stack_var_-124 to i32
  %v2_da74 = bitcast i32* %stack_var_-124 to i8*
  %v2_dac0 = ptrtoint i32* %stack_var_-196 to i32
  %v2_dbd0 = ptrtoint i32* %stack_var_-40 to i32
  %v2_dbe4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_daec = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d8d8

dec_label_pc_d8d8:                                ; preds = %dec_label_pc_d9e4, %.thread4
  %v1_d8dc = call i32 @function_103fc(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d8e8 = call i32 @function_10318(i32 13, i32* null)
  store i32 %v3_d8e8, i32* @r0, align 4
  %v1_d8ec = call i32 @function_116d4(i32 %v3_d8e8)
  store i32 %v1_d8ec, i32* @sb, align 4
  %v2_d8f0 = icmp eq i32 %v1_d8ec, 0
  br i1 %v2_d8f0, label %dec_label_pc_d7a4, label %dec_label_pc_d8f8

dec_label_pc_d8f8:                                ; preds = %dec_label_pc_d8d8
  %v1_d8fc = call i32 @function_10344(i32 13)
  %v1_d908 = call i32 @function_d1c4(i32 58811)
  %v1_d914 = call i32 @function_d1c4(i32 50951)
  %v1_d920 = call i32 @function_d1c4(i32 14853)
  %v1_d928 = call i32 @function_d1c4(i32 20480)
  %v1_d934 = call i32 @function_d1c4(i32 47873)
  %v1_d940 = call i32 @function_d1c4(i32 57616)
  %v1_d94c = call i32 @function_d1c4(i32 2842)
  %v1_d958 = call i32 @function_d1c4(i32 10522)
  %v0_d95c44 = load i32, i32* @sb, align 4
  %v1_d96045 = inttoptr i32 %v0_d95c44 to i32*
  %v2_d96046 = call i32 @function_117d0(i32* %v1_d96045)
  %v2_d96448 = icmp eq i32 %v2_d96046, 0
  br i1 %v2_d96448, label %dec_label_pc_d9e4, label %dec_label_pc_d96c.preheader

dec_label_pc_d96c.preheader:                      ; preds = %dec_label_pc_d8f8, %dec_label_pc_d95c.backedge
  %v0_d96c53 = phi i32 [ %v2_d960, %dec_label_pc_d95c.backedge ], [ %v2_d96046, %dec_label_pc_d8f8 ]
  br label %dec_label_pc_d96c

dec_label_pc_d96c:                                ; preds = %dec_label_pc_d96c.preheader, %dec_label_pc_d9cc
  %v0_d97c = phi i32 [ %v0_d96c53, %dec_label_pc_d96c.preheader ], [ %v2_d9d8, %dec_label_pc_d9cc ]
  %v1_d96c = add i32 %v0_d97c, 11
  %v2_d96c = inttoptr i32 %v1_d96c to i8*
  %v3_d96c = load i8, i8* %v2_d96c, align 1
  %v4_d96c = zext i8 %v3_d96c to i32
  %v1_d970 = add nsw i32 %v4_d96c, -48
  store i32 %v1_d970, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d970, 9
  br i1 %tmp, label %dec_label_pc_d95c.backedge, label %dec_label_pc_d97c

dec_label_pc_d97c:                                ; preds = %dec_label_pc_d96c
  store i32 %v1_d96c, i32* @r6, align 4
  %v2_d984 = call i32 @function_1248c(i8* %v2_d96c)
  %v0_d988 = load i32, i32* @r5, align 4
  store i32 %v2_d984, i32* @r7, align 4
  %v0_d990 = load i32, i32* @fp, align 4
  %v1_d990 = add i32 %v0_d990, 1
  store i32 %v1_d990, i32* @fp, align 4
  %v5_d994 = icmp slt i32 %v0_d988, %v2_d984
  %v2_d9f4 = call i32 @function_1159c(i32* null)
  br i1 %v5_d994, label %dec_label_pc_d9f0, label %dec_label_pc_d998

dec_label_pc_d998:                                ; preds = %dec_label_pc_d97c
  %v0_d9a0 = load i32, i32* @r4, align 4
  %v2_d9a0 = sub i32 %v2_d9f4, %v0_d9a0
  %v7_d9a8 = icmp slt i32 %v2_d9a0, 601
  br i1 %v7_d9a8, label %dec_label_pc_d9b0, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_d998
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d95c.backedge

dec_label_pc_d9b0:                                ; preds = %dec_label_pc_d998
  %v0_d9b0 = load i32, i32* @r7, align 4
  %v7_d9b4 = icmp slt i32 %v0_d9b0, 401
  br i1 %v7_d9b4, label %dec_label_pc_d95c.backedge, label %dec_label_pc_d9b8

dec_label_pc_d9b8:                                ; preds = %dec_label_pc_d9b0
  %v0_d9b8 = load i32, i32* @fp, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_d9c0 = call i32 @function_11054(i32 %v0_d9b8, i32 10)
  %v2_d9c4 = icmp eq i32 %v2_d9c0, 0
  br i1 %v2_d9c4, label %dec_label_pc_d9cc, label %dec_label_pc_d95c.backedge

dec_label_pc_d9cc:                                ; preds = %dec_label_pc_d9b8
  %v1_d9d0 = call i32 @function_126cc(i32 1)
  %v0_d9d4 = load i32, i32* @sb, align 4
  %v1_d9d8 = inttoptr i32 %v0_d9d4 to i32*
  %v2_d9d8 = call i32 @function_117d0(i32* %v1_d9d8)
  %v2_d9dc = icmp eq i32 %v2_d9d8, 0
  br i1 %v2_d9dc, label %dec_label_pc_d9e4, label %dec_label_pc_d96c

dec_label_pc_d9e4:                                ; preds = %dec_label_pc_d95c.backedge, %dec_label_pc_d9cc, %dec_label_pc_d8f8
  %v0_d9e4 = load i32, i32* @sb, align 4
  %v1_d9e8 = inttoptr i32 %v0_d9e4 to i32*
  %v2_d9e8 = call i32 @function_11620(i32* %v1_d9e8)
  br label %dec_label_pc_d8d8

dec_label_pc_d9f0:                                ; preds = %dec_label_pc_d97c
  %v1_da00 = call i32 @function_103fc(i32 13)
  %v1_da08 = call i32 @function_103fc(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_da14 = call i32 @function_10318(i32 13, i32* null)
  store i32 %v3_da14, i32* %r1.global-to-local, align 4
  store i32 %v2_da20, i32* @r0, align 4
  %v3_da24 = call i32 @function_109f0(i8* %v2_da24, i32 %v3_da14)
  store i32 %v2_da20, i32* %r3.global-to-local, align 4
  %v2_da30 = add i32 %v3_da24, %v2_da20
  store i32 %v2_da30, i32* %r5.global-to-local, align 4
  %v0_da34 = load i32, i32* @r6, align 4
  store i32 %v0_da34, i32* %r1.global-to-local, align 4
  store i32 %v2_da30, i32* @r0, align 4
  %v2_da3c = inttoptr i32 %v2_da30 to i8*
  %v3_da3c = call i32 @function_109f0(i8* %v2_da3c, i32 %v0_da34)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_da4c = call i32 @function_10318(i32 14, i32* null)
  store i32 %v3_da4c, i32* %r1.global-to-local, align 4
  %v0_da54 = load i32, i32* %r5.global-to-local, align 4
  %v2_da54 = add i32 %v3_da3c, %v0_da54
  store i32 %v2_da54, i32* @r0, align 4
  %v2_da58 = inttoptr i32 %v2_da54 to i8*
  %v3_da58 = call i32 @function_109f0(i8* %v2_da58, i32 %v3_da4c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_da64 = call i32 @function_10318(i32 13, i32* null)
  store i32 %v3_da64, i32* %r1.global-to-local, align 4
  store i32 %v2_da70, i32* @r0, align 4
  %v3_da74 = call i32 @function_109f0(i8* %v2_da74, i32 %v3_da64)
  %v2_da80 = add i32 %v3_da74, %v2_da70
  store i32 %v2_da80, i32* @r5, align 4
  store i32 %v2_da80, i32* @r0, align 4
  %v0_da88 = load i32, i32* @r6, align 4
  store i32 %v0_da88, i32* %r1.global-to-local, align 4
  %v2_da8c = inttoptr i32 %v2_da80 to i8*
  %v3_da8c = call i32 @function_109f0(i8* %v2_da8c, i32 %v0_da88)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_da8c, i32* @r4, align 4
  %v3_da9c = call i32 @function_10318(i32 29, i32* null)
  store i32 %v3_da9c, i32* %r1.global-to-local, align 4
  %v0_daa4 = load i32, i32* @r5, align 4
  %v1_daa4 = load i32, i32* @r4, align 4
  %v2_daa4 = add i32 %v1_daa4, %v0_daa4
  store i32 %v2_daa4, i32* @r0, align 4
  %v2_daa8 = inttoptr i32 %v2_daa4 to i8*
  %v3_daa8 = call i32 @function_109f0(i8* %v2_daa8, i32 %v3_da9c)
  %v1_dab0 = call i32 @function_10344(i32 13)
  %v1_dab8 = call i32 @function_10344(i32 14)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_dacc = load i32, i32* %stack_var_-8388, align 4
  store i32 %v2_dacc, i32* %r1.global-to-local, align 4
  %v4_dad0 = call i32 @function_114c0(i8* %v2_da24, i32 %v2_dacc, i32 4095)
  %v7_dad8 = icmp eq i32 %v4_dad0, -1
  store i32 %v4_dad0, i32* @r5, align 4
  store i32 -4248, i32* @r2, align 4
  br i1 %v7_dad8, label %dec_label_pc_dba0, label %dec_label_pc_dae8

dec_label_pc_dae8:                                ; preds = %dec_label_pc_d9f0
  store i32 %v2_daec, i32* %r1.global-to-local, align 4
  %v2_daf0 = add i32 %v4_dad0, %v2_daec
  store i32 %v2_daf0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_daf8 = add i32 %v2_daf0, -4248
  %v5_daf8 = inttoptr i32 %v4_daf8 to i8*
  store i8 0, i8* %v5_daf8, align 1
  %v1_db00 = call i32 @function_103fc(i32 30)
  %v0_db04 = load i32, i32* @r4, align 4
  store i32 %v0_db04, i32* %r1.global-to-local, align 4
  %v2_db0c = inttoptr i32 %v0_db04 to i32*
  %v3_db0c = call i32 @function_10318(i32 30, i32* %v2_db0c)
  %v0_db10 = load i32, i32* @r5, align 4
  %v1_db10 = add i32 %v0_db10, -1
  store i32 %v1_db10, i32* @r1, align 4
  store i32 %v3_db0c, i32* %r2.global-to-local, align 4
  %v2_db18 = load i32, i32* %stack_var_-8388, align 4
  %v3_db1c = inttoptr i32 %v2_db18 to i8*
  %v4_db1c = call i32 @function_10d1c(i8* %v3_db1c, i32 %v1_db10, i32 %v3_db0c)
  %v7_db20 = icmp eq i32 %v4_db1c, -1
  br i1 %v7_db20, label %dec_label_pc_db3c, label %dec_label_pc_db28

dec_label_pc_db28:                                ; preds = %dec_label_pc_dae8
  %v2_db28 = load i32, i32* %stack_var_-8388, align 4
  %v1_db2c = inttoptr i32 %v2_db28 to i8*
  %v2_db2c = call i32 @function_115c8(i8* %v1_db2c)
  %v0_db30 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_db38 = call i32 @function_113cc(i32 %v0_db30, i32 9)
  br label %dec_label_pc_db3c

dec_label_pc_db3c:                                ; preds = %dec_label_pc_dae8, %dec_label_pc_db28
  %v1_db40 = call i32 @function_10344(i32 30)
  %v0_db44 = call i32 @function_11324()
  %v0_db48 = load i32, i32* @r7, align 4
  %v9_db48 = icmp eq i32 %v0_db48, %v0_db44
  br i1 %v9_db48, label %dec_label_pc_db74, label %dec_label_pc_db50

dec_label_pc_db50:                                ; preds = %dec_label_pc_db3c
  %v0_db50 = call i32 @function_11350()
  %v0_db54 = load i32, i32* @r7, align 4
  %v9_db54 = icmp eq i32 %v0_db54, %v0_db50
  br i1 %v9_db54, label %dec_label_pc_db74, label %dec_label_pc_db5c

dec_label_pc_db5c:                                ; preds = %dec_label_pc_db50
  store i32 ptrtoint (i32* @global_var_1c2d4.67 to i32), i32* %r2.global-to-local, align 4
  %v2_db60 = load i32, i32* %stack_var_-8388, align 4
  %v2_db64 = load i32, i32* @global_var_1c2d4.67, align 4
  store i32 %v2_db64, i32* %r1.global-to-local, align 4
  %v3_db68 = inttoptr i32 %v2_db60 to i8*
  %v4_db68 = call i32 @function_10da8(i8* %v3_db68, i32 %v2_db64, i32 ptrtoint (i32* @global_var_1c2d4.67 to i32))
  %v2_db6c = icmp eq i32 %v4_db68, 0
  br i1 %v2_db6c, label %dec_label_pc_db80, label %dec_label_pc_db5c.dec_label_pc_db74_crit_edge

dec_label_pc_db5c.dec_label_pc_db74_crit_edge:    ; preds = %dec_label_pc_db5c
  %v0_db78.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_db74

dec_label_pc_db74:                                ; preds = %dec_label_pc_db5c.dec_label_pc_db74_crit_edge, %dec_label_pc_db50, %dec_label_pc_db3c
  %v0_db78 = phi i32 [ %v0_db78.pre, %dec_label_pc_db5c.dec_label_pc_db74_crit_edge ], [ %v0_db50, %dec_label_pc_db50 ], [ %v0_db44, %dec_label_pc_db3c ]
  store i32 %v2_d9f4, i32* @r4, align 4
  store i32 %v0_db78, i32* @r5, align 4
  br label %dec_label_pc_d95c.backedge

dec_label_pc_d95c.backedge:                       ; preds = %dec_label_pc_d9b8, %dec_label_pc_d9b0, %dec_label_pc_d96c, %dec_label_pc_db74, %dec_label_pc_dcc8, %.thread5
  %v0_d95c = load i32, i32* @sb, align 4
  %v1_d960 = inttoptr i32 %v0_d95c to i32*
  %v2_d960 = call i32 @function_117d0(i32* %v1_d960)
  %v2_d964 = icmp eq i32 %v2_d960, 0
  br i1 %v2_d964, label %dec_label_pc_d9e4, label %dec_label_pc_d96c.preheader

dec_label_pc_db80:                                ; preds = %dec_label_pc_db5c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_db84 = load i32, i32* %stack_var_-8388, align 4
  %v2_db88 = inttoptr i32 %v2_db84 to i8*
  %v3_db88 = call i32 @function_113f8(i8* %v2_db88, i32 0)
  %v7_db8c = icmp eq i32 %v3_db88, -1
  store i32 %v3_db88, i32* @r4, align 4
  br i1 %v7_db8c, label %dec_label_pc_dd18, label %dec_label_pc_db98

dec_label_pc_db98:                                ; preds = %dec_label_pc_db80, %dec_label_pc_dd18
  %v0_db98 = phi i32 [ %v3_db88, %dec_label_pc_db80 ], [ %v0_db98.pre, %dec_label_pc_dd18 ]
  %v1_db9c = call i32 @function_112cc(i32 %v0_db98)
  br label %dec_label_pc_dba0

dec_label_pc_dba0:                                ; preds = %dec_label_pc_d9f0, %dec_label_pc_db98
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dbac = call i32 @function_113f8(i8* %v2_da24, i32 0)
  %v7_dbb0 = icmp eq i32 %v3_dbac, -1
  store i32 %v3_dbac, i32* @r8, align 4
  br i1 %v7_dbb0, label %dec_label_pc_dcc8, label %dec_label_pc_dbbc

dec_label_pc_dbbc:                                ; preds = %dec_label_pc_dba0
  %v1_dbc0 = call i32 @function_103fc(i32 18)
  %v1_dbc8 = call i32 @function_103fc(i32 19)
  store i32 %v2_dbd0, i32* %r1.global-to-local, align 4
  %v3_dbd8 = call i32 @function_10318(i32 18, i32* nonnull %stack_var_-40)
  store i32 %v3_dbd8, i32* @r5, align 4
  store i32 %v2_dbe4, i32* %r1.global-to-local, align 4
  %v3_dbec = call i32 @function_10318(i32 19, i32* nonnull %stack_var_-44)
  store i32 %v3_dbec, i32* @r6, align 4
  br label %dec_label_pc_dbf4

dec_label_pc_dbf4:                                ; preds = %dec_label_pc_dc60, %.thread19, %dec_label_pc_dc28, %dec_label_pc_dbbc
  %v0_dbf4 = load i32, i32* @r8, align 4
  store i32 %v2_d8d0, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_dc00 = call i32 @function_11494(i32 %v0_dbf4, i32* nonnull %stack_var_-8380, i32 4096)
  %tmp103 = icmp slt i32 %v4_dc00, 1
  br i1 %tmp103, label %dec_label_pc_dcfc, label %dec_label_pc_dc0c

dec_label_pc_dc0c:                                ; preds = %dec_label_pc_dbf4
  store i32 %v2_dac0, i32* %r3.global-to-local, align 4
  %v3_dc10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dc10, i32* @r4, align 4
  %v5_dc18 = icmp slt i32 %v4_dc00, %v3_dc10
  br i1 %v5_dc18, label %dec_label_pc_dc28, label %dec_label_pc_dc7c.lr.ph

dec_label_pc_dc7c.lr.ph:                          ; preds = %dec_label_pc_dc0c
  %v1_dc7427 = add i32 %v4_dc00, -1
  store i32 %v1_dc7427, i32* %r1.global-to-local, align 4
  %v0_dc7c.pre = load i32, i32* @r5, align 4
  %v1_dc80.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_dc7c

dec_label_pc_dc28:                                ; preds = %dec_label_pc_dc74.backedge, %dec_label_pc_dc0c
  store i32 %v2_dac0, i32* %r1.global-to-local, align 4
  %v3_dc2c = load i32, i32* %stack_var_-44, align 4
  %v5_dc34 = icmp slt i32 %v4_dc00, %v3_dc2c
  br i1 %v5_dc34, label %dec_label_pc_dbf4, label %.thread19

.thread19:                                        ; preds = %dec_label_pc_dc28
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_dc4037 = icmp eq i32 %v4_dc00, 0
  br i1 %v2_dc4037, label %dec_label_pc_dbf4, label %dec_label_pc_dc48.lr.ph

dec_label_pc_dc48.lr.ph:                          ; preds = %.thread19
  %v0_dc48.pre = load i32, i32* @r6, align 4
  %v1_dc4c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_dc48

dec_label_pc_dc48:                                ; preds = %dec_label_pc_dc60, %dec_label_pc_dc48.lr.ph
  %v0_dc40.in = phi i32 [ %v4_dc00, %dec_label_pc_dc48.lr.ph ], [ %v0_dc40, %dec_label_pc_dc60 ]
  %v0_dc60 = phi i32 [ 0, %dec_label_pc_dc48.lr.ph ], [ %v1_dc60, %dec_label_pc_dc60 ]
  %v0_dc54 = phi i32 [ 0, %dec_label_pc_dc48.lr.ph ], [ %v1_dc54., %dec_label_pc_dc60 ]
  %v0_dc40 = add i32 %v0_dc40.in, -1
  %v2_dc48 = add i32 %v0_dc54, %v0_dc48.pre
  %v3_dc48 = inttoptr i32 %v2_dc48 to i8*
  %v4_dc48 = load i8, i8* %v3_dc48, align 1
  %v6_dc48 = zext i8 %v4_dc48 to i32
  store i32 %v6_dc48, i32* %r2.global-to-local, align 4
  %v2_dc4c = add i32 %v0_dc60, %v1_dc4c.pre
  %v3_dc4c = inttoptr i32 %v2_dc4c to i8*
  %v4_dc4c = load i8, i8* %v3_dc4c, align 1
  %v6_dc4c = zext i8 %v4_dc4c to i32
  store i32 %v6_dc4c, i32* %r3.global-to-local, align 4
  %v9_dc50 = icmp eq i8 %v4_dc4c, %v4_dc48
  %v1_dc54 = add i32 %v0_dc54, 1
  %v1_dc54. = select i1 %v9_dc50, i32 %v1_dc54, i32 0
  store i32 %v1_dc54., i32* %r1.global-to-local, align 4
  br i1 %v9_dc50, label %dec_label_pc_dc9c, label %dec_label_pc_dc60

dec_label_pc_dc60:                                ; preds = %dec_label_pc_dc9c, %dec_label_pc_dc48
  %v1_dc60 = add i32 %v0_dc60, 1
  %v2_dc40 = icmp eq i32 %v0_dc40, 0
  br i1 %v2_dc40, label %dec_label_pc_dbf4, label %dec_label_pc_dc48

dec_label_pc_dc68:                                ; preds = %dec_label_pc_dc7c
  %v9_dc68 = icmp eq i32 %v3_dc10, %v1_dc88.
  br i1 %v9_dc68, label %dec_label_pc_dca4, label %dec_label_pc_dc74.backedge

dec_label_pc_dc74.backedge:                       ; preds = %dec_label_pc_dc7c, %dec_label_pc_dc68
  %storemerge = add i32 %storemerge.in, 1
  %v1_dc74 = add i32 %v0_dc74, -1
  store i32 %v1_dc74, i32* %r1.global-to-local, align 4
  %v2_dc74 = icmp eq i32 %v0_dc74, 0
  br i1 %v2_dc74, label %dec_label_pc_dc28, label %dec_label_pc_dc7c

dec_label_pc_dc7c:                                ; preds = %dec_label_pc_dc74.backedge, %dec_label_pc_dc7c.lr.ph
  %v0_dc74 = phi i32 [ %v1_dc7427, %dec_label_pc_dc7c.lr.ph ], [ %v1_dc74, %dec_label_pc_dc74.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_dc7c.lr.ph ], [ %storemerge, %dec_label_pc_dc74.backedge ]
  %v0_dc88 = phi i32 [ 0, %dec_label_pc_dc7c.lr.ph ], [ %v1_dc88., %dec_label_pc_dc74.backedge ]
  %v2_dc7c = add i32 %v0_dc88, %v0_dc7c.pre
  %v3_dc7c = inttoptr i32 %v2_dc7c to i8*
  %v4_dc7c = load i8, i8* %v3_dc7c, align 1
  %v6_dc7c = zext i8 %v4_dc7c to i32
  store i32 %v6_dc7c, i32* %r2.global-to-local, align 4
  %v2_dc80 = add i32 %storemerge.in, %v1_dc80.pre
  %v3_dc80 = inttoptr i32 %v2_dc80 to i8*
  %v4_dc80 = load i8, i8* %v3_dc80, align 1
  %v6_dc80 = zext i8 %v4_dc80 to i32
  store i32 %v6_dc80, i32* %r3.global-to-local, align 4
  %v9_dc84 = icmp eq i8 %v4_dc80, %v4_dc7c
  %v1_dc88 = add i32 %v0_dc88, 1
  %v1_dc88. = select i1 %v9_dc84, i32 %v1_dc88, i32 0
  br i1 %v9_dc84, label %dec_label_pc_dc68, label %dec_label_pc_dc74.backedge

dec_label_pc_dc9c:                                ; preds = %dec_label_pc_dc48
  %v9_dc9c = icmp eq i32 %v3_dc2c, %v1_dc54.
  br i1 %v9_dc9c, label %dec_label_pc_dca4, label %dec_label_pc_dc60

dec_label_pc_dca4:                                ; preds = %dec_label_pc_dc68, %dec_label_pc_dc9c
  %v1_dca8 = call i32 @function_10344(i32 18)
  %v1_dcb0 = call i32 @function_10344(i32 19)
  %v0_dcb4 = load i32, i32* @r8, align 4
  %v1_dcb8 = call i32 @function_112cc(i32 %v0_dcb4)
  %v0_dcbc = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dcc4 = call i32 @function_113cc(i32 %v0_dcbc, i32 9)
  br label %dec_label_pc_dcc8

dec_label_pc_dcc8:                                ; preds = %dec_label_pc_dba0, %dec_label_pc_dcfc, %dec_label_pc_dca4
  store i32 64, i32* @r1, align 4
  store i32 %v2_da20, i32* @r0, align 4
  %v0_dcd4 = call i32 @function_10a68()
  store i32 %v2_da70, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_dce4 = call i32 @function_10a68()
  %v1_dcec = call i32 @function_126cc(i32 1)
  store i32 %v2_d9f4, i32* @r4, align 4
  %v0_dcf4 = load i32, i32* @r7, align 4
  store i32 %v0_dcf4, i32* @r5, align 4
  br label %dec_label_pc_d95c.backedge

dec_label_pc_dcfc:                                ; preds = %dec_label_pc_dbf4
  %v1_dd00 = call i32 @function_10344(i32 18)
  %v1_dd08 = call i32 @function_10344(i32 19)
  %v0_dd0c = load i32, i32* @r8, align 4
  %v1_dd10 = call i32 @function_112cc(i32 %v0_dd0c)
  br label %dec_label_pc_dcc8

dec_label_pc_dd18:                                ; preds = %dec_label_pc_db80
  %v0_dd18 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dd20 = call i32 @function_113cc(i32 %v0_dd18, i32 9)
  %v0_db98.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_db98

; uselistorder directives
  uselistorder i32 %v1_dc88., { 1, 0 }
  uselistorder i1 %v9_dc84, { 1, 0 }
  uselistorder i32 %v0_dc88, { 1, 0 }
  uselistorder i32 %v1_dc54., { 1, 2, 0 }
  uselistorder i1 %v9_dc50, { 1, 0 }
  uselistorder i32 %v0_dc54, { 1, 0 }
  uselistorder i32 %v0_dc60, { 1, 0 }
  uselistorder i32 %v3_dbac, { 1, 0 }
  uselistorder i32 %v3_db88, { 1, 2, 0 }
  uselistorder i32 %v2_d960, { 1, 0 }
  uselistorder i32 %v4_dad0, { 1, 2, 0 }
  uselistorder i32 %v2_d9d8, { 1, 0 }
  uselistorder i32 %v2_da70, { 1, 0, 2 }
  uselistorder i32 %v2_da20, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d8b0, { 1, 0, 2 }
  uselistorder i32 %v4_d89c, { 1, 0 }
  uselistorder i32 %v3_d868, { 2, 0, 1 }
  uselistorder i32 %v1_d804, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v0_d778, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 0, 6, 1, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 19, 18, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40 }
  uselistorder i32 (i32*)* @function_117d0, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_116d4, { 2, 1, 0 }
  uselistorder i32* @global_var_1c2d4.67, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_dcc8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dca4, { 1, 0 }
  uselistorder label %dec_label_pc_dba0, { 1, 0 }
  uselistorder label %dec_label_pc_db98, { 1, 0 }
  uselistorder label %dec_label_pc_d95c.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_db3c, { 1, 0 }
  uselistorder label %dec_label_pc_d96c, { 1, 0 }
  uselistorder label %dec_label_pc_d96c.preheader, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_dd34(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_dd34:
  store i32 ptrtoint (i32* @global_var_debc.69 to i32), i32* @global_var_1c0c4.71, align 4
  ret i32 %arg1
}

define i32 @function_dd4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_dd4c:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_dd4c = load i32, i32* @r4, align 4
  %v9_dd4c = load i32, i32* @r6, align 4
  %v12_dd4c = load i32, i32* @r7, align 4
  %v15_dd4c = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_dd68 = call i32 @function_11bb0(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1c0bc.73 to i32), i32* @r6, align 4
  %v7_dd70 = icmp eq i32 %v3_dd68, -1
  store i32 %v3_dd68, i32* @global_var_1c0bc.73, align 4
  br i1 %v7_dd70, label %dec_label_pc_de30, label %dec_label_pc_dd7c

dec_label_pc_dd7c:                                ; preds = %dec_label_pc_dd4c
  %v0_dd80 = load i32, i32* @r4, align 4
  %v6_dd90 = call i32 @function_11b80(i32 %v3_dd68, i32 %v0_dd80, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_dd94 = load i32, i32* @global_var_1c0bc.73, align 4
  store i32 %v2_dd94, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_dda4 = call i32 @function_11208(i32 %v2_dd94, i32 3)
  %v1_ddac = or i32 %v2_dda4, 2048
  store i32 %v1_ddac, i32* @r2, align 4
  %v0_ddb0 = load i32, i32* @r4, align 4
  %v2_ddb4 = call i32 @function_11208(i32 %v0_ddb0, i32 4)
  store i32 ptrtoint (i8** @global_var_1c0c8.75 to i32), i32* @r8, align 4
  %v2_ddbc = load i8, i8* bitcast (i8** @global_var_1c0c8.75 to i8*), align 4
  %v2_ddc0 = icmp eq i8 %v2_ddbc, 0
  br i1 %v2_ddc0, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_dd7c
  br label %bb

.thread:                                          ; preds = %dec_label_pc_dd7c
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_ddf8 = call i32 @function_118a0()
  %v0_ddfc = load i32, i32* @r5, align 4
  %v2_ddfc = inttoptr i32 %v0_ddf8 to i32*
  store i32 %v0_ddfc, i32* %v2_ddfc, align 4
  %v2_de00 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_de00, i32* @r7, align 4
  store i32 %v0_ddf8, i32* @r4, align 4
  %v2_de0c = load i32, i32* @global_var_1c0bc.73, align 4
  %v3_de14 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_de14 = call i32 @function_119e0(i32 %v2_de0c, %sockaddr* %v3_de14, i32 16)
  %v7_de18 = icmp eq i32 %v4_de14, -1
  br i1 %v7_de18, label %dec_label_pc_de38, label %dec_label_pc_de20

dec_label_pc_de20:                                ; preds = %bb
  %v2_de28 = load i32, i32* @global_var_1c0bc.73, align 4
  %v2_de2c = call i32 @function_11a94(i32 %v2_de28, i32 1)
  br label %dec_label_pc_de30

dec_label_pc_de30:                                ; preds = %dec_label_pc_dd4c, %dec_label_pc_de44, %dec_label_pc_de20
  %v20_de34 = phi i32 [ %v3_dd68, %dec_label_pc_dd4c ], [ %v1_de94, %dec_label_pc_de44 ], [ %v2_de2c, %dec_label_pc_de20 ]
  store i32 %v3_dd4c, i32* @r4, align 4
  store i32 %v9_dd4c, i32* @r6, align 4
  store i32 %v12_dd4c, i32* @r7, align 4
  store i32 %v15_dd4c, i32* @r8, align 4
  ret i32 %v20_de34

dec_label_pc_de38:                                ; preds = %bb
  %v0_de38 = load i32, i32* @r4, align 4
  %v1_de38 = inttoptr i32 %v0_de38 to i32*
  %v2_de38 = load i32, i32* %v1_de38, align 4
  %v7_de3c = icmp eq i32 %v2_de38, 99
  br i1 %v7_de3c, label %dec_label_pc_de9c, label %dec_label_pc_de44

dec_label_pc_de44:                                ; preds = %dec_label_pc_de9c, %bb21, %dec_label_pc_de38
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_de5c = load i32, i32* @global_var_1c0bc.73, align 4
  %v4_de74 = call i32 @function_11a0c(i32 %v2_de5c, %sockaddr* %v3_de14, i32 16)
  %v1_de7c = call i32 @function_126cc(i32 5)
  %v2_de80 = load i32, i32* @global_var_1c0bc.73, align 4
  %v1_de84 = call i32 @function_112cc(i32 %v2_de80)
  %v1_de90 = call i32 @function_d1c4(i32 34311)
  %v1_de94 = call i32 @function_dd4c(i32 %v1_de90)
  br label %dec_label_pc_de30

dec_label_pc_de9c:                                ; preds = %dec_label_pc_de38
  %v2_de9c = load i8, i8* bitcast (i8** @global_var_1c0c8.75 to i8*), align 4
  %v3_de9c = zext i8 %v2_de9c to i32
  %v1_dea0 = load i32, i32* @r5, align 4
  %v9_dea0 = icmp eq i32 %v3_de9c, %v1_dea0
  br i1 %v9_dea0, label %dec_label_pc_de44, label %bb21

bb21:                                             ; preds = %dec_label_pc_de9c
  %v2_dea8 = trunc i32 %v1_dea0 to i8
  store i8 %v2_dea8, i8* bitcast (i8** @global_var_1c0c8.75 to i8*), align 4
  br label %dec_label_pc_de44

; uselistorder directives
  uselistorder i32 %v3_dd68, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_d1c4, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* bitcast (i8** @global_var_1c0c8.75 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1c0c8.75, { 1, 0 }
  uselistorder label %dec_label_pc_de44, { 1, 0, 2 }
  uselistorder label %dec_label_pc_de30, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_debc() local_unnamed_addr {
dec_label_pc_debc:
  %stack_var_-8 = alloca i32, align 4
  %v3_debc = load i32, i32* @r4, align 4
  store i32 %v3_debc, i32* %stack_var_-8, align 4
  %v1_dec4 = call i32 @function_103fc(i32 1)
  store i32 ptrtoint ([12 x i8]* @global_var_13b38.78 to i32), i32* @r0, align 4
  %v2_decc = call i32 @function_119bc(i32 ptrtoint ([12 x i8]* @global_var_13b38.78 to i32))
  store i32 %v2_decc, i32* @global_var_1c2e0.81, align 4
  %v3_dee0 = call i32 @function_10318(i32 1, i32* null)
  %v4_dee0 = inttoptr i32 %v3_dee0 to i8*
  %v2_dee4 = add i32 %v3_dee0, 1
  %v3_dee4 = inttoptr i32 %v2_dee4 to i8*
  %v4_dee4 = load i8, i8* %v3_dee4, align 1
  %v3_dee8 = load i8, i8* %v4_dee0, align 1
  store i8 %v4_dee4, i8* bitcast (i32* @global_var_1c2df.82 to i8*), align 4
  store i8 %v3_dee8, i8* bitcast (i32* @global_var_1c2de.83 to i8*), align 4
  %v2_df00 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_df00, i32* @r4, align 4
  %v1_df04 = call i32 @function_10344(i32 1)
  %v0_df08 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_df08, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_debc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_debc, %bb
  ret i32 %v1_df04

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_df10(i32 %arg1) local_unnamed_addr {
dec_label_pc_df10:
  %stack_var_-16 = alloca i32, align 4
  %v3_df10 = load i32, i32* @r4, align 4
  %v6_df10 = load i32, i32* @r5, align 4
  %v2_df14 = ptrtoint i32* %stack_var_-16 to i32
  %v0_df18 = call i32 @function_112f8()
  %v7_df1c = icmp eq i32 %v0_df18, -1
  %. = zext i1 %v7_df1c to i32
  %tmp10 = icmp slt i32 %v0_df18, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_df38 = icmp eq i32 %storemerge4, 0
  store i32 %v0_df18, i32* @global_var_1c23c.85, align 4
  br i1 %v2_df38, label %dec_label_pc_df4c, label %dec_label_pc_df44

dec_label_pc_df44:                                ; preds = %dec_label_pc_df10
  store i32 %v3_df10, i32* @r4, align 4
  store i32 %v6_df10, i32* @r5, align 4
  ret i32 %v0_df18

dec_label_pc_df4c:                                ; preds = %dec_label_pc_df10
  store i32 1, i32* %stack_var_-16, align 4
  %v1_df58 = call i32 @function_103fc(i32 23)
  %v1_df60 = call i32 @function_103fc(i32 24)
  %v0_df64 = load i32, i32* @r5, align 4
  %v2_df6c = inttoptr i32 %v0_df64 to i32*
  %v3_df6c = call i32 @function_10318(i32 23, i32* %v2_df6c)
  %v2_df74 = inttoptr i32 %v3_df6c to i8*
  %v3_df74 = call i32 @function_113f8(i8* %v2_df74, i32 2)
  %v7_df78 = icmp eq i32 %v3_df74, -1
  store i32 %v3_df74, i32* @r4, align 4
  br i1 %v7_df78, label %dec_label_pc_dfc0, label %dec_label_pc_df84

dec_label_pc_df84:                                ; preds = %dec_label_pc_dfc0, %dec_label_pc_df4c
  %v0_df90 = phi i32 [ %v3_dfd0, %dec_label_pc_dfc0 ], [ %v3_df74, %dec_label_pc_df4c ]
  %v3_df98 = call i32 @function_1137c(i32 %v0_df90, i32 -2147199228, i32 %v2_df14)
  br label %dec_label_pc_df9c

dec_label_pc_df9c:                                ; preds = %dec_label_pc_df9c, %dec_label_pc_df84
  %v0_dfa8 = load i32, i32* @r4, align 4
  %v3_dfb0 = call i32 @function_1137c(i32 %v0_dfa8, i32 -2147199227, i32 0)
  %v1_dfb8 = call i32 @function_126cc(i32 10)
  br label %dec_label_pc_df9c

dec_label_pc_dfc0:                                ; preds = %dec_label_pc_df4c
  %v0_dfc0 = load i32, i32* @r5, align 4
  %v2_dfc8 = inttoptr i32 %v0_dfc0 to i32*
  %v3_dfc8 = call i32 @function_10318(i32 24, i32* %v2_dfc8)
  %v2_dfd0 = inttoptr i32 %v3_dfc8 to i8*
  %v3_dfd0 = call i32 @function_113f8(i8* %v2_dfd0, i32 2)
  %v3_dfd4 = icmp eq i32 %v3_dfd0, -1
  store i32 %v3_dfd0, i32* @r4, align 4
  br i1 %v3_dfd4, label %dec_label_pc_dfe0, label %dec_label_pc_df84

dec_label_pc_dfe0:                                ; preds = %dec_label_pc_dfc0
  %v1_dfe4 = call i32 @function_10344(i32 23)
  %v1_dfec = call i32 @function_10344(i32 24)
  %v0_dff0 = load i32, i32* @r5, align 4
  %v1_dff4 = call i32 @function_12638(i32 %v0_dff0)
  %v0_dff8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_dff8, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_dfe0
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_dfe0, %bb13
  ret i32 %v1_dff4

; uselistorder directives
  uselistorder i32 %v3_dfd0, { 1, 2, 0 }
  uselistorder i32 %v3_df74, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_df18, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1137c, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_dffc(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_dffc:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-380 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-1532 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-508 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_dffc = load i32, i32* @r4, align 4
  store i32 %v3_dffc, i32* %stack_var_-36, align 4
  %v9_dffc = load i32, i32* @r6, align 4
  %v15_dffc = load i32, i32* @r8, align 4
  %v2_e008 = ptrtoint i32* %stack_var_-508 to i32
  store i32 %v2_e008, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_e008, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v1_e020 = call i32 @function_11c0c(i32 %v2_e008)
  store i32 %v2_e008, i32* @r0, align 4
  %v2_e02c = call i32 @function_11bdc(i32 %v2_e008, i32 2)
  %v0_e030 = load i32, i32* @r5, align 4
  store i32 %v0_e030, i32* %r2.global-to-local, align 4
  %v3_e03c = bitcast i32* %stack_var_-508 to %_TYPEDEF_sigset_t*
  %v4_e03c = call i32 @function_11548(i32 %v0_e030, %_TYPEDEF_sigset_t* %v3_e03c, i32 %v0_e030)
  %v2_e048 = call i32 @function_11c24(i32 17, i32 1)
  %v2_e054 = call i32 @function_11c24(i32 5, i32 ptrtoint (i32* @global_var_dd34.87 to i32))
  %v0_e058 = call i32 @function_10c80()
  store i32 %v0_e058, i32* @global_var_1c2d0.49, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1c2df.82 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1c2dc.80 to i8*), align 4
  store i32 1494907824, i32* @global_var_1c2e0.81, align 4
  %v0_e080 = load i32, i32* @r5, align 4
  %v1_e080 = trunc i32 %v0_e080 to i8
  store i8 %v1_e080, i8* bitcast (i32* @global_var_1c2de.83 to i8*), align 4
  store i8 %v1_e080, i8* bitcast (i32* @global_var_1c2dd.91 to i8*), align 4
  %v6_e088 = call i32 @function_104b4(i32 %v0_e058, i32 ptrtoint (i8** @global_var_1c2dc.80 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_debc.69 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_debc.69 to i32), i32* @global_var_1c0c4.71, align 4
  %v1_e098 = call i32 @function_dd4c(i32 %v6_e088)
  %v1_e09c = call i32 @function_e784(i32 %v1_e098)
  %v2_e0a4 = ptrtoint i32* %stack_var_-124 to i32
  store i32 %v2_e0a4, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_e0ac = call i32 @function_10a68()
  %v0_e0b0 = load i32, i32* @r6, align 4
  %v7_e0b0 = icmp eq i32 %v0_e0b0, 2
  br i1 %v7_e0b0, label %dec_label_pc_e1d8, label %dec_label_pc_e0b8

dec_label_pc_e0b8:                                ; preds = %dec_label_pc_e1d8, %dec_label_pc_dffc, %dec_label_pc_e1e8
  %v0_e0b8 = call i32 @function_e72c()
  store i32 %v0_e0b8, i32* %r6.global-to-local, align 4
  %v0_e0c0 = load i32, i32* @r8, align 4
  %v1_e0c0 = inttoptr i32 %v0_e0c0 to i32*
  %v2_e0c0 = load i32, i32* %v1_e0c0, align 4
  %v1_e0c4 = inttoptr i32 %v2_e0c0 to i8*
  %v2_e0c4 = call i32 @function_109c8(i8* %v1_e0c4)
  %v0_e0cc = load i32, i32* @r8, align 4
  %v1_e0cc = inttoptr i32 %v0_e0cc to i32*
  %v2_e0cc = load i32, i32* %v1_e0cc, align 4
  %v1_e0d0 = inttoptr i32 %v2_e0cc to i8*
  %v2_e0d0 = call i32 @function_109c8(i8* %v1_e0d0)
  %v1_e0d4 = sub i32 20, %v2_e0c4
  store i32 %v2_e0d0, i32* @r5, align 4
  %v0_e0dc = load i32, i32* %r6.global-to-local, align 4
  %v2_e0e0 = call i32 @function_11054(i32 %v0_e0dc, i32 %v1_e0d4)
  %v1_e0e8 = load i32, i32* @r5, align 4
  %v2_e0e8 = add i32 %v1_e0e8, %v2_e0e0
  store i32 %v2_e0e8, i32* @r4, align 4
  %v2_e0ec = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_e0ec, i32* @r6, align 4
  %v2_e0f8 = call i32 @function_e7e0(i32 %v2_e0ec, i32 %v2_e0e8)
  %v2_e0fc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_e0fc, i32* %r2.global-to-local, align 4
  %v1_e100 = load i32, i32* @r4, align 4
  %v2_e100 = add i32 %v1_e100, %v2_e0fc
  store i32 %v2_e100, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_e10c = load i32, i32* @r8, align 4
  %v1_e10c = inttoptr i32 %v0_e10c to i32*
  %v2_e10c = load i32, i32* %v1_e10c, align 4
  store i32 %v2_e10c, i32* @r0, align 4
  %v3_e110 = add i32 %v2_e100, -56
  %v4_e110 = inttoptr i32 %v3_e110 to i8*
  store i8 0, i8* %v4_e110, align 1
  %v2_e114 = inttoptr i32 %v2_e10c to i8*
  %v3_e114 = call i32 @function_109f0(i8* %v2_e114, i32 %v2_e0ec)
  store i32 32, i32* @r1, align 4
  store i32 %v2_e0ec, i32* @r0, align 4
  %v0_e120 = call i32 @function_10a68()
  %v0_e124 = call i32 @function_e72c()
  store i32 %v0_e124, i32* @r7, align 4
  %v0_e12c = load i32, i32* @r8, align 4
  %v1_e12c = inttoptr i32 %v0_e12c to i32*
  %v2_e12c = load i32, i32* %v1_e12c, align 4
  %v1_e130 = inttoptr i32 %v2_e12c to i8*
  %v2_e130 = call i32 @function_109c8(i8* %v1_e130)
  %v0_e138 = load i32, i32* @r8, align 4
  %v1_e138 = inttoptr i32 %v0_e138 to i32*
  %v2_e138 = load i32, i32* %v1_e138, align 4
  %v1_e13c = inttoptr i32 %v2_e138 to i8*
  %v2_e13c = call i32 @function_109c8(i8* %v1_e13c)
  %v1_e140 = sub i32 20, %v2_e130
  store i32 %v2_e13c, i32* @r5, align 4
  %v0_e148 = load i32, i32* @r7, align 4
  %v2_e14c = call i32 @function_11054(i32 %v0_e148, i32 %v1_e140)
  %v1_e150 = load i32, i32* @r5, align 4
  %v2_e150 = add i32 %v1_e150, %v2_e14c
  store i32 %v2_e150, i32* @r4, align 4
  %v2_e15c = call i32 @function_e7e0(i32 %v2_e0ec, i32 %v2_e150)
  %v1_e164 = load i32, i32* @r4, align 4
  %v2_e164 = add i32 %v1_e164, %v2_e0fc
  store i32 %v2_e164, i32* @r3, align 4
  %v0_e168 = load i32, i32* @sb, align 4
  %v1_e168 = trunc i32 %v0_e168 to i8
  %v3_e168 = add i32 %v2_e164, -56
  %v4_e168 = inttoptr i32 %v3_e168 to i8*
  store i8 %v1_e168, i8* %v4_e168, align 1
  %v2_e174 = call i32 @function_11464(i32 15, i32 %v2_e0ec)
  %v1_e17c = call i32 @function_103fc(i32 3)
  %v3_e188 = call i32 @function_10318(i32 3, i32* nonnull %stack_var_-52)
  %v3_e18c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_e18c, i32* %r2.global-to-local, align 4
  %v3_e198 = inttoptr i32 %v3_e188 to i32*
  %v4_e198 = call i32 @function_115f4(i32 1, i32* %v3_e198, i32 %v3_e18c)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e1a8 = call i32 @function_115f4(i32 1, i32* nonnull @global_var_13b44.95, i32 1)
  %v1_e1b0 = call i32 @function_10344(i32 3)
  %v1_e1b4 = call i32 @function_8650(i32 %v1_e1b0)
  %v1_e1b8 = call i32 @function_d760(i32 %v1_e1b4)
  %v1_e1bc = call i32 @function_df10(i32 %v1_e1b8)
  %v0_e1c0 = call i32 @function_112f8()
  %v1_e1c4 = load i32, i32* @sb, align 4
  %v7_e1c8 = icmp sgt i32 %v0_e1c0, %v1_e1c4
  br i1 %v7_e1c8, label %dec_label_pc_e1cc, label %dec_label_pc_e214

dec_label_pc_e1cc:                                ; preds = %dec_label_pc_e0b8
  store i32 %v9_dffc, i32* %r6.global-to-local, align 4
  store i32 %v15_dffc, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_e1d8:                                ; preds = %dec_label_pc_dffc
  %v0_e1d8 = load i32, i32* @r8, align 4
  %v1_e1d8 = add i32 %v0_e1d8, 4
  %v2_e1d8 = inttoptr i32 %v1_e1d8 to i32*
  %v3_e1d8 = load i32, i32* %v2_e1d8, align 4
  %v1_e1dc = inttoptr i32 %v3_e1d8 to i8*
  %v2_e1dc = call i32 @function_109c8(i8* %v1_e1dc)
  %v8_e1e4 = icmp sgt i32 %v2_e1dc, 31
  br i1 %v8_e1e4, label %dec_label_pc_e0b8, label %dec_label_pc_e1e8

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_e1d8
  %v0_e1ec = load i32, i32* @r8, align 4
  %v1_e1ec = add i32 %v0_e1ec, 4
  %v2_e1ec = inttoptr i32 %v1_e1ec to i32*
  %v3_e1ec = load i32, i32* %v2_e1ec, align 4
  store i32 %v2_e0a4, i32* @r0, align 4
  %v2_e1f4 = bitcast i32* %stack_var_-124 to i8*
  %v3_e1f4 = call i32 @function_109f0(i8* %v2_e1f4, i32 %v3_e1ec)
  %v0_e1f8 = load i32, i32* @r8, align 4
  %v1_e1f8 = add i32 %v0_e1f8, 4
  %v2_e1f8 = inttoptr i32 %v1_e1f8 to i32*
  %v3_e1f8 = load i32, i32* %v2_e1f8, align 4
  %v1_e200 = inttoptr i32 %v3_e1f8 to i8*
  %v2_e200 = call i32 @function_109c8(i8* %v1_e200)
  store i32 %v2_e200, i32* @r1, align 4
  store i32 %v3_e1f8, i32* @r0, align 4
  %v0_e20c = call i32 @function_10a68()
  br label %dec_label_pc_e0b8

dec_label_pc_e214:                                ; preds = %dec_label_pc_e0b8
  %v1_e214 = call i32 @function_1151c(i32 %v0_e1c0)
  %v0_e218 = load i32, i32* @sb, align 4
  %v1_e21c = call i32 @function_112cc(i32 %v0_e218)
  %v1_e224 = call i32 @function_112cc(i32 1)
  %v1_e22c = call i32 @function_112cc(i32 2)
  %v1_e230 = call i32 @function_8650(i32 %v1_e22c)
  %v1_e234 = call i32 @function_d760(i32 %v1_e230)
  %v1_e238 = call i32 @function_df10(i32 %v1_e234)
  %v1_e23c = call i32 @function_ec08(i32 %v1_e238)
  %v2_e244 = ptrtoint i32* %stack_var_-1532 to i32
  store i32 %v2_e244, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c0c0.98 to i32), i32* @sl, align 4
  %v2_e25c = ptrtoint i32* %stack_var_-252 to i32
  store i32 %v2_e25c, i32* @r6, align 4
  %v2_e260 = ptrtoint i32* %stack_var_-380 to i32
  store i32 %v2_e260, i32* @r7, align 4
  %v2_e330 = ptrtoint i32* %stack_var_-60 to i32
  %v4_e5e8 = bitcast i8** %stack_var_-38 to i32*
  %v2_e580 = ptrtoint i32* %stack_var_-44 to i32
  %v2_e584 = ptrtoint i32* %stack_var_-48 to i32
  %v1_e5f8 = bitcast i32* %stack_var_-124 to i8*
  br label %dec_label_pc_e264

dec_label_pc_e264:                                ; preds = %dec_label_pc_e264.backedge, %dec_label_pc_e214
  %v2_e26c43 = phi i32 [ %v2_e26c43.pre, %dec_label_pc_e264.backedge ], [ %v2_e25c, %dec_label_pc_e214 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_e26c45 = inttoptr i32 %v2_e26c43 to i32*
  store i32 0, i32* %v4_e26c45, align 4
  %v0_e27046 = load i32, i32* %r3.global-to-local, align 4
  %v1_e27047 = add i32 %v0_e27046, 4
  store i32 %v1_e27047, i32* %r3.global-to-local, align 4
  %v7_e27448 = icmp eq i32 %v1_e27047, 128
  br i1 %v7_e27448, label %dec_label_pc_e27c, label %dec_label_pc_e26c.dec_label_pc_e26c_crit_edge

dec_label_pc_e26c.dec_label_pc_e26c_crit_edge:    ; preds = %dec_label_pc_e264, %dec_label_pc_e26c.dec_label_pc_e26c_crit_edge
  %v1_e27049 = phi i32 [ %v1_e270, %dec_label_pc_e26c.dec_label_pc_e26c_crit_edge ], [ %v1_e27047, %dec_label_pc_e264 ]
  %v0_e26c.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_e26c = load i32, i32* @r6, align 4
  %v3_e26c = add i32 %v2_e26c, %v1_e27049
  %v4_e26c = inttoptr i32 %v3_e26c to i32*
  store i32 %v0_e26c.pre, i32* %v4_e26c, align 4
  %v0_e270 = load i32, i32* %r3.global-to-local, align 4
  %v1_e270 = add i32 %v0_e270, 4
  store i32 %v1_e270, i32* %r3.global-to-local, align 4
  %v7_e274 = icmp eq i32 %v1_e270, 128
  br i1 %v7_e274, label %dec_label_pc_e27c, label %dec_label_pc_e26c.dec_label_pc_e26c_crit_edge

dec_label_pc_e27c:                                ; preds = %dec_label_pc_e26c.dec_label_pc_e26c_crit_edge, %dec_label_pc_e264
  %v0_e27c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e27c, i32* %r3.global-to-local, align 4
  store i32 %v0_e27c, i32* @r4, align 4
  %v2_e28450 = load i32, i32* @r7, align 4
  %v3_e28451 = add i32 %v2_e28450, %v0_e27c
  %v4_e28452 = inttoptr i32 %v3_e28451 to i32*
  store i32 %v0_e27c, i32* %v4_e28452, align 4
  %v0_e28853 = load i32, i32* %r3.global-to-local, align 4
  %v1_e28854 = add i32 %v0_e28853, 4
  store i32 %v1_e28854, i32* %r3.global-to-local, align 4
  %v7_e28c55 = icmp eq i32 %v1_e28854, 128
  br i1 %v7_e28c55, label %dec_label_pc_e294, label %dec_label_pc_e284.dec_label_pc_e284_crit_edge

dec_label_pc_e284.dec_label_pc_e284_crit_edge:    ; preds = %dec_label_pc_e27c, %dec_label_pc_e284.dec_label_pc_e284_crit_edge
  %v1_e28856 = phi i32 [ %v1_e288, %dec_label_pc_e284.dec_label_pc_e284_crit_edge ], [ %v1_e28854, %dec_label_pc_e27c ]
  %v0_e284.pre = load i32, i32* @r4, align 4
  %v2_e284 = load i32, i32* @r7, align 4
  %v3_e284 = add i32 %v2_e284, %v1_e28856
  %v4_e284 = inttoptr i32 %v3_e284 to i32*
  store i32 %v0_e284.pre, i32* %v4_e284, align 4
  %v0_e288 = load i32, i32* %r3.global-to-local, align 4
  %v1_e288 = add i32 %v0_e288, 4
  store i32 %v1_e288, i32* %r3.global-to-local, align 4
  %v7_e28c = icmp eq i32 %v1_e288, 128
  br i1 %v7_e28c, label %dec_label_pc_e294, label %dec_label_pc_e284.dec_label_pc_e284_crit_edge

dec_label_pc_e294:                                ; preds = %dec_label_pc_e284.dec_label_pc_e284_crit_edge, %dec_label_pc_e27c
  %v2_e294 = load i32, i32* @global_var_1c0bc.73, align 4
  %v7_e298 = icmp eq i32 %v2_e294, -1
  br i1 %v7_e298, label %dec_label_pc_e2c4, label %dec_label_pc_e2a0

dec_label_pc_e2a0:                                ; preds = %dec_label_pc_e294
  %v3_e2a0 = udiv i32 %v2_e294, 32
  %v3_e2a4 = mul nuw nsw i32 %v3_e2a0, 4
  %v2_e2ac = add i32 %v3_e2a4, %v2_e0fc
  store i32 %v2_e2ac, i32* %r3.global-to-local, align 4
  %v1_e2b0 = add i32 %v2_e2ac, -216
  %v2_e2b0 = inttoptr i32 %v1_e2b0 to i32*
  %v3_e2b0 = load i32, i32* %v2_e2b0, align 4
  %v1_e2b4 = urem i32 %v2_e294, 32
  %v7_e2bc = shl i32 1, %v1_e2b4
  %v8_e2bc = or i32 %v3_e2b0, %v7_e2bc
  store i32 %v8_e2bc, i32* %r2.global-to-local, align 4
  store i32 %v8_e2bc, i32* %v2_e2b0, align 4
  br label %dec_label_pc_e2c4

dec_label_pc_e2c4:                                ; preds = %dec_label_pc_e294, %dec_label_pc_e2a0
  %v2_e2c4 = load i32, i32* @global_var_1c0c0.98, align 4
  store i32 %v2_e2c4, i32* %r3.global-to-local, align 4
  %v7_e2c8 = icmp eq i32 %v2_e2c4, -1
  store i32 ptrtoint (i32* @global_var_1c0c0.98 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_e2c8, label %dec_label_pc_e500, label %dec_label_pc_e2d4

dec_label_pc_e2d4:                                ; preds = %dec_label_pc_e500, %dec_label_pc_e2c4, %.thread
  store i32 ptrtoint (i8** @global_var_1c240.100 to i32), i32* %r2.global-to-local, align 4
  %v2_e2d8 = load i8, i8* bitcast (i8** @global_var_1c240.100 to i8*), align 4
  %v2_e2dc = icmp eq i8 %v2_e2d8, 0
  %v2_e3e4 = load i32, i32* @global_var_1c0c0.98, align 4
  %v3_e3e8 = udiv i32 %v2_e3e4, 32
  store i32 %v3_e3e8, i32* %r3.global-to-local, align 4
  br i1 %v2_e2dc, label %dec_label_pc_e3e4, label %dec_label_pc_e2e4

dec_label_pc_e2e4:                                ; preds = %dec_label_pc_e2d4
  %v3_e2ec = mul nuw nsw i32 %v3_e3e8, 4
  %v2_e2f4 = add i32 %v3_e2ec, %v2_e0fc
  store i32 %v2_e2f4, i32* %r3.global-to-local, align 4
  %v1_e2f8 = add i32 %v2_e2f4, -344
  %v2_e2f8 = inttoptr i32 %v1_e2f8 to i32*
  %v3_e2f8 = load i32, i32* %v2_e2f8, align 4
  %v1_e2fc = urem i32 %v2_e3e4, 32
  %v7_e304 = shl i32 1, %v1_e2fc
  %v8_e304 = or i32 %v3_e2f8, %v7_e304
  store i32 %v8_e304, i32* %r2.global-to-local, align 4
  store i32 %v8_e304, i32* %v2_e2f8, align 4
  br label %dec_label_pc_e30c

dec_label_pc_e30c:                                ; preds = %dec_label_pc_e3e4, %dec_label_pc_e2e4
  %v2_e30c = load i32, i32* @global_var_1c0bc.73, align 4
  %v2_e310 = load i32, i32* @global_var_1c0c0.98, align 4
  store i32 %v2_e310, i32* %r3.global-to-local, align 4
  %v5_e31c = icmp slt i32 %v2_e30c, %v2_e310
  br i1 %v5_e31c, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_e30c
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_e30c, %bb
  %v0_e334 = phi i32 [ %v2_e30c, %dec_label_pc_e30c ], [ %v2_e310, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e334 = add i32 %v0_e334, 1
  store i32 %v2_e260, i32* %r2.global-to-local, align 4
  %v5_e348 = call i32 @function_114ec(i32 %v1_e334, i32 %v2_e25c, i32 %v2_e260, i32 0, i32 %v2_e330)
  %v8_e34c = icmp eq i32 %v5_e348, -1
  store i32 %v5_e348, i32* %r3.global-to-local, align 4
  br i1 %v8_e34c, label %dec_label_pc_e264.backedge, label %dec_label_pc_e358

dec_label_pc_e358:                                ; preds = %bb40
  %v6_e348 = trunc i32 %v5_e348 to i8
  %v3_e358 = icmp eq i8 %v6_e348, 0
  br i1 %v3_e358, label %dec_label_pc_e360, label %dec_label_pc_e380

dec_label_pc_e360:                                ; preds = %dec_label_pc_e358
  %v0_e360 = load i32, i32* @sb, align 4
  %v6_e36c = inttoptr i32 %v5_e348 to i8*
  store i8* %v6_e36c, i8** %stack_var_-38, align 4
  %v2_e370 = call i32 @function_11120(i32 %v0_e360, i32 6)
  %v2_e374 = icmp eq i32 %v2_e370, 0
  %v0_e378 = load i32, i32* @sb, align 4
  %v1_e378 = add i32 %v0_e378, 1
  store i32 %v1_e378, i32* @sb, align 4
  br i1 %v2_e374, label %dec_label_pc_e5d0, label %dec_label_pc_e380

dec_label_pc_e380:                                ; preds = %dec_label_pc_e358, %dec_label_pc_e360, %dec_label_pc_e5d0
  store i32 ptrtoint (i8** @global_var_1c240.100 to i32), i32* %r2.global-to-local, align 4
  %v2_e384 = load i8, i8* bitcast (i8** @global_var_1c240.100 to i8*), align 4
  %v3_e384 = zext i8 %v2_e384 to i32
  store i32 %v3_e384, i32* @r4, align 4
  %v2_e388 = icmp eq i8 %v2_e384, 0
  %v2_e410 = load i32, i32* @global_var_1c0c0.98, align 4
  br i1 %v2_e388, label %dec_label_pc_e410, label %dec_label_pc_e390

dec_label_pc_e390:                                ; preds = %dec_label_pc_e380
  %v3_e394 = udiv i32 %v2_e410, 32
  %v3_e39c = mul nuw nsw i32 %v3_e394, 4
  %v2_e3a0 = add i32 %v3_e39c, %v2_e0fc
  store i32 %v2_e3a0, i32* %r3.global-to-local, align 4
  %v1_e3a4 = add i32 %v2_e3a0, -344
  %v2_e3a4 = inttoptr i32 %v1_e3a4 to i32*
  %v3_e3a4 = load i32, i32* %v2_e3a4, align 4
  %v1_e3a8 = urem i32 %v2_e410, 32
  %v6_e3ac = lshr i32 %v3_e3a4, %v1_e3a8
  store i32 %v6_e3ac, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c240.100 to i32), i32* %r3.global-to-local, align 4
  %v1_e3b8 = urem i32 %v6_e3ac, 2
  %v2_e3b8 = icmp eq i32 %v1_e3b8, 0
  store i8 0, i8* bitcast (i8** @global_var_1c240.100 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1c0c0.98 to i32), i32* @r4, align 4
  br i1 %v2_e3b8, label %dec_label_pc_e3c8, label %dec_label_pc_e570

dec_label_pc_e3c8:                                ; preds = %dec_label_pc_e390
  store i32 58320, i32* @lr, align 4
  %v1_e3cc = icmp ne i32 %v2_e410, -1
  call void @__pseudo_cond_branch(i1 %v1_e3cc, i32 ptrtoint (i32* @global_var_112cc.101 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e3d4 = load i32, i32* @r4, align 4
  %v2_e3d4 = inttoptr i32 %v1_e3d4 to i32*
  store i32 -1, i32* %v2_e3d4, align 4
  %v1_e3dc = call i32 @function_126cc(i32 1)
  br label %dec_label_pc_e264.backedge

dec_label_pc_e264.backedge:                       ; preds = %dec_label_pc_e3c8, %dec_label_pc_e4dc, %dec_label_pc_e5a8, %dec_label_pc_e644, %dec_label_pc_e670, %dec_label_pc_e68c, %dec_label_pc_e6f4, %bb40, %dec_label_pc_e410, %dec_label_pc_e420, %dec_label_pc_e5f0, %bb42, %dec_label_pc_e6a0, %dec_label_pc_e65c
  %v2_e26c43.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e264

dec_label_pc_e3e4:                                ; preds = %dec_label_pc_e2d4
  store i32 %v2_e0fc, i32* %r2.global-to-local, align 4
  %v3_e3f0 = mul nuw nsw i32 %v3_e3e8, 4
  %v2_e3f4 = add i32 %v3_e3f0, %v2_e0fc
  store i32 %v2_e3f4, i32* %r3.global-to-local, align 4
  %v1_e3f8 = add i32 %v2_e3f4, -216
  %v2_e3f8 = inttoptr i32 %v1_e3f8 to i32*
  %v3_e3f8 = load i32, i32* %v2_e3f8, align 4
  %v1_e3fc = urem i32 %v2_e3e4, 32
  %v7_e404 = shl i32 1, %v1_e3fc
  %v8_e404 = or i32 %v3_e3f8, %v7_e404
  store i32 %v8_e404, i32* %r2.global-to-local, align 4
  store i32 %v8_e404, i32* %v2_e3f8, align 4
  br label %dec_label_pc_e30c

dec_label_pc_e410:                                ; preds = %dec_label_pc_e380
  %v7_e414 = icmp eq i32 %v2_e410, -1
  store i32 ptrtoint (i32* @global_var_1c0c0.98 to i32), i32* @r8, align 4
  br i1 %v7_e414, label %dec_label_pc_e264.backedge, label %dec_label_pc_e420

dec_label_pc_e420:                                ; preds = %dec_label_pc_e410
  %v3_e420 = udiv i32 %v2_e410, 32
  %v3_e424 = mul nuw nsw i32 %v3_e420, 4
  %v2_e42c = add i32 %v3_e424, %v2_e0fc
  store i32 %v2_e42c, i32* %r3.global-to-local, align 4
  %v1_e430 = add i32 %v2_e42c, -216
  %v2_e430 = inttoptr i32 %v1_e430 to i32*
  %v3_e430 = load i32, i32* %v2_e430, align 4
  %v1_e434 = urem i32 %v2_e410, 32
  %v6_e438 = lshr i32 %v3_e430, %v1_e434
  store i32 %v6_e438, i32* %r2.global-to-local, align 4
  %v1_e43c = urem i32 %v6_e438, 2
  %v2_e43c = icmp eq i32 %v1_e43c, 0
  br i1 %v2_e43c, label %dec_label_pc_e264.backedge, label %dec_label_pc_e444

dec_label_pc_e444:                                ; preds = %dec_label_pc_e420
  %v6_e444 = inttoptr i32 %v3_e384 to i8*
  store i8* %v6_e444, i8** %stack_var_-38, align 4
  %v0_e44c = call i32 @function_118a0()
  %v0_e450 = load i32, i32* @r4, align 4
  %v2_e450 = inttoptr i32 %v0_e44c to i32*
  store i32 %v0_e450, i32* %v2_e450, align 4
  store i32 %v0_e44c, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e464 = load i32, i32* @global_var_1c0c0.98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_e470 = call i32 @function_11ac0(i32 %v2_e464, i32* %v4_e5e8, i32 2, i32 16386)
  %v7_e474 = icmp eq i32 %v5_e470, -1
  br i1 %v7_e474, label %dec_label_pc_e65c, label %dec_label_pc_e47c

dec_label_pc_e47c:                                ; preds = %dec_label_pc_e444
  %v2_e47c = icmp eq i32 %v5_e470, 0
  br i1 %v2_e47c, label %dec_label_pc_e4dc, label %dec_label_pc_e484

dec_label_pc_e484:                                ; preds = %dec_label_pc_e47c
  %v3_e484 = load i8*, i8** %stack_var_-38, align 4
  %v4_e484 = ptrtoint i8* %v3_e484 to i32
  store i32 %v3_e384, i32* %r3.global-to-local, align 4
  %v4_e48c = mul nuw nsw i32 %v3_e384, 256
  %v5_e48c = or i32 %v4_e484, %v4_e48c
  store i32 %v5_e48c, i32* %r2.global-to-local, align 4
  %v7_e48c = icmp eq i32 %v5_e48c, 0
  br i1 %v7_e48c, label %dec_label_pc_e670, label %dec_label_pc_e494

dec_label_pc_e494:                                ; preds = %dec_label_pc_e484
  %v1_e494 = mul i32 %v4_e484, 256
  %v3_e498 = and i32 %v1_e494, 65280
  %v4_e49c = udiv i32 %v5_e48c, 256
  %v5_e49c = or i32 %v3_e498, %v4_e49c
  %v6_e49c = trunc i32 %v4_e49c to i8
  store i32 %v5_e49c, i32* %r2.global-to-local, align 4
  %v4_e4a0 = udiv i32 %v5_e48c, 65536
  store i32 %v4_e4a0, i32* %r3.global-to-local, align 4
  %v3_e4a4 = icmp slt i8 %v6_e49c, 0
  %v7_e4ac = inttoptr i32 %v4_e49c to i8*
  store i8* %v7_e4ac, i8** %stack_var_-38, align 4
  br i1 %v3_e4a4, label %dec_label_pc_e68c, label %dec_label_pc_e4b4

dec_label_pc_e4b4:                                ; preds = %dec_label_pc_e494
  %v0_e4b4 = load i32, i32* @r4, align 4
  %v1_e4b4 = load i32, i32* @r5, align 4
  %v2_e4b4 = inttoptr i32 %v1_e4b4 to i32*
  store i32 %v0_e4b4, i32* %v2_e4b4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e4c0 = load i32, i32* @global_var_1c0c0.98, align 4
  %v9_e4c8 = call i32 @function_11ac0(i32 %v2_e4c0, i32* nonnull %stack_var_-1532, i32 %v4_e49c, i32 16386)
  %v7_e4cc = icmp eq i32 %v9_e4c8, -1
  br i1 %v7_e4cc, label %dec_label_pc_e65c, label %dec_label_pc_e4d4

dec_label_pc_e4d4:                                ; preds = %dec_label_pc_e4b4
  %v2_e4d4 = icmp eq i32 %v9_e4c8, 0
  br i1 %v2_e4d4, label %dec_label_pc_e4dc, label %dec_label_pc_e6a0

dec_label_pc_e4dc:                                ; preds = %bb42, %dec_label_pc_e4d4, %dec_label_pc_e47c
  %v2_e4dc = load i32, i32* @global_var_1c0c0.98, align 4
  store i32 58600, i32* @lr, align 4
  %v1_e4e4 = icmp ne i32 %v2_e4dc, -1
  call void @__pseudo_cond_branch(i1 %v1_e4e4, i32 ptrtoint (i32* @global_var_112cc.101 to i32))
  store i32 ptrtoint (i32* @global_var_1c0c0.98 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1c0c0.98, align 4
  %v1_e4f8 = call i32 @function_126cc(i32 1)
  br label %dec_label_pc_e264.backedge

dec_label_pc_e500:                                ; preds = %dec_label_pc_e2c4
  %v0_e508 = load i32, i32* @r4, align 4
  store i32 %v0_e508, i32* %r2.global-to-local, align 4
  %v3_e50c = call i32 @function_11bb0(i32 2, i32 1, i32 %v0_e508)
  %v7_e510 = icmp eq i32 %v3_e50c, -1
  store i32 %v3_e50c, i32* @r5, align 4
  %v1_e518 = load i32, i32* %r8.global-to-local, align 4
  %v2_e518 = inttoptr i32 %v1_e518 to i32*
  store i32 %v3_e50c, i32* %v2_e518, align 4
  br i1 %v7_e510, label %dec_label_pc_e2d4, label %dec_label_pc_e520

dec_label_pc_e520:                                ; preds = %dec_label_pc_e500
  %v0_e520 = load i32, i32* @r4, align 4
  store i32 %v0_e520, i32* @r2, align 4
  %v2_e528 = call i32 @function_11208(i32 %v3_e50c, i32 3)
  %v1_e530 = or i32 %v2_e528, 2048
  store i32 %v1_e530, i32* @r2, align 4
  %v0_e534 = load i32, i32* @r5, align 4
  %v2_e538 = call i32 @function_11208(i32 %v0_e534, i32 4)
  store i32 ptrtoint (i32* @global_var_1c0c4.71 to i32), i32* %r2.global-to-local, align 4
  %v2_e540 = load i32, i32* @global_var_1c0c4.71, align 4
  store i32 %v2_e540, i32* %r3.global-to-local, align 4
  %v2_e544 = icmp eq i32 %v2_e540, 0
  br i1 %v2_e544, label %.thread, label %bb41

bb41:                                             ; preds = %dec_label_pc_e520
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_10c80.102 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e520, %bb41
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e558 = load i32, i32* @global_var_1c0c0.98, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1c240.100 to i8*), align 4
  %v5_e568 = call i32 @function_11a0c(i32 %v2_e558, %sockaddr* bitcast (i8** @global_var_1c2dc.80 to %sockaddr*), i32 16)
  br label %dec_label_pc_e2d4

dec_label_pc_e570:                                ; preds = %dec_label_pc_e390
  store i32 4, i32* @r5, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v2_e580, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-48, align 4
  %v6_e598 = call i32 @function_11a64(i32 %v2_e410, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_e584)
  %v3_e59c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e59c, i32* %r3.global-to-local, align 4
  %v2_e5a0 = icmp eq i32 %v3_e59c, 0
  br i1 %v2_e5a0, label %dec_label_pc_e5f0, label %dec_label_pc_e5a8

dec_label_pc_e5a8:                                ; preds = %dec_label_pc_e570
  %v2_e5a8 = load i32, i32* @global_var_1c0c0.98, align 4
  %v1_e5ac = call i32 @function_112cc(i32 %v2_e5a8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e5b4 = load i32, i32* @r4, align 4
  %v2_e5b4 = inttoptr i32 %v1_e5b4 to i32*
  store i32 -1, i32* %v2_e5b4, align 4
  %v0_e5b8 = call i32 @function_e72c()
  %v2_e5c0 = call i32 @function_11054(i32 %v0_e5b8, i32 10)
  %v1_e5c4 = add i32 %v2_e5c0, 1
  %v1_e5c8 = call i32 @function_126cc(i32 %v1_e5c4)
  br label %dec_label_pc_e264.backedge

dec_label_pc_e5d0:                                ; preds = %dec_label_pc_e360
  %v2_e5d8 = load i32, i32* @global_var_1c0c0.98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e5e8 = call i32 @function_11b20(i32 %v2_e5d8, i32* nonnull %v4_e5e8, i32 2, i32 16384)
  br label %dec_label_pc_e380

dec_label_pc_e5f0:                                ; preds = %dec_label_pc_e570
  %v2_e5f8 = call i32 @function_109c8(i8* %v1_e5f8)
  %sext = mul i32 %v2_e5f8, 16777216
  %v1_e5fc = sdiv i32 %sext, 16777216
  %v7_e5fc = inttoptr i32 %v1_e5fc to i8*
  store i8* %v7_e5fc, i8** %stack_var_-38, align 4
  %v0_e600 = call i32 @function_10c80()
  store i32 %v0_e600, i32* @global_var_1c2d0.49, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e614 = load i32, i32* @r5, align 4
  store i32 %v0_e614, i32* %r2.global-to-local, align 4
  %v2_e618 = load i32, i32* @global_var_1c0c0.98, align 4
  %v5_e61c = call i32 @function_11b20(i32 %v2_e618, i32* nonnull @global_var_13b48.104, i32 %v0_e614, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_e628 = load i32, i32* @global_var_1c0c0.98, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e634 = call i32 @function_11b20(i32 %v2_e628, i32* %v4_e5e8, i32 1, i32 16384)
  %v3_e638 = load i8*, i8** %stack_var_-38, align 4
  %v4_e638 = ptrtoint i8* %v3_e638 to i32
  store i32 %v4_e638, i32* %r2.global-to-local, align 4
  %v3_e63c = icmp eq i8* %v3_e638, null
  br i1 %v3_e63c, label %dec_label_pc_e264.backedge, label %dec_label_pc_e644

dec_label_pc_e644:                                ; preds = %dec_label_pc_e5f0
  %v2_e648 = load i32, i32* @global_var_1c0c0.98, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e654 = call i32 @function_11b20(i32 %v2_e648, i32* nonnull %stack_var_-124, i32 %v4_e638, i32 16384)
  br label %dec_label_pc_e264.backedge

dec_label_pc_e65c:                                ; preds = %dec_label_pc_e4b4, %dec_label_pc_e444
  %v0_e65c = load i32, i32* @r5, align 4
  %v1_e65c = inttoptr i32 %v0_e65c to i32*
  %v2_e65c = load i32, i32* %v1_e65c, align 4
  store i32 %v2_e65c, i32* %r3.global-to-local, align 4
  %v7_e660 = icmp eq i32 %v2_e65c, 4
  br i1 %v7_e660, label %dec_label_pc_e264.backedge, label %bb42

bb42:                                             ; preds = %dec_label_pc_e65c
  %v8_e664 = icmp eq i32 %v2_e65c, 11
  br i1 %v8_e664, label %dec_label_pc_e264.backedge, label %dec_label_pc_e4dc

dec_label_pc_e670:                                ; preds = %dec_label_pc_e484
  %v2_e674 = load i32, i32* @global_var_1c0c0.98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e684 = call i32 @function_11ac0(i32 %v2_e674, i32* nonnull %v4_e5e8, i32 2, i32 16384)
  br label %dec_label_pc_e264.backedge

dec_label_pc_e68c:                                ; preds = %dec_label_pc_e494
  %v2_e68c = load i32, i32* @global_var_1c0c0.98, align 4
  %v1_e690 = call i32 @function_112cc(i32 %v2_e68c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e698 = load i32, i32* @r8, align 4
  %v2_e698 = inttoptr i32 %v1_e698 to i32*
  store i32 -1, i32* %v2_e698, align 4
  br label %dec_label_pc_e264.backedge

dec_label_pc_e6a0:                                ; preds = %dec_label_pc_e4d4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e6b0 = load i32, i32* @global_var_1c0c0.98, align 4
  %v5_e6b4 = call i32 @function_11ac0(i32 %v2_e6b0, i32* nonnull %v4_e5e8, i32 2, i32 16384)
  %v3_e6b8 = load i8*, i8** %stack_var_-38, align 4
  %v4_e6b8 = ptrtoint i8* %v3_e6b8 to i32
  %v4_e6bc = urem i32 %v4_e4a0, 256
  %v4_e6c0 = mul i32 %v4_e6b8, 256
  %v5_e6c0 = or i32 %v4_e6c0, %v4_e6bc
  store i32 %v5_e6c0, i32* %r2.global-to-local, align 4
  %v3_e6c8 = sdiv i32 %v4_e6c0, 256
  store i32 %v3_e6c8, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e6d4 = load i32, i32* @global_var_1c0c0.98, align 4
  %v6_e6dc = inttoptr i32 %v5_e6c0 to i8*
  store i8* %v6_e6dc, i8** %stack_var_-38, align 4
  %v8_e6e0 = call i32 @function_11ac0(i32 %v2_e6d4, i32* nonnull %stack_var_-1532, i32 %v5_e6c0, i32 16384)
  %v3_e6e4 = load i8*, i8** %stack_var_-38, align 4
  %v4_e6e4 = ptrtoint i8* %v3_e6e4 to i32
  store i32 %v4_e6e4, i32* %r2.global-to-local, align 4
  %v4_e6e8 = urem i32 %v3_e6c8, 256
  store i32 %v4_e6e8, i32* %r3.global-to-local, align 4
  %v6_e6ec = mul nuw nsw i32 %v4_e6e8, 256
  %v7_e6ec = or i32 %v4_e6e4, %v6_e6ec
  %v9_e6ec = icmp eq i32 %v7_e6ec, 0
  br i1 %v9_e6ec, label %dec_label_pc_e264.backedge, label %dec_label_pc_e6f4

dec_label_pc_e6f4:                                ; preds = %dec_label_pc_e6a0
  %v7_e6f8 = call i32 @function_8320(i32* nonnull %stack_var_-1532, i32 %v7_e6ec, i32 %v4_e6e4, i32 %v4_e6e8)
  br label %dec_label_pc_e264.backedge

; uselistorder directives
  uselistorder i32 %v4_e6e8, { 2, 0, 1 }
  uselistorder i32 %v4_e6e4, { 1, 0, 2 }
  uselistorder i32 %v3_e6c8, { 1, 0 }
  uselistorder i32 %v5_e6c0, { 1, 0, 2 }
  uselistorder i32 %v4_e6c0, { 1, 0 }
  uselistorder i32 %v3_e50c, { 3, 2, 1, 0 }
  uselistorder i32 %v9_e4c8, { 1, 0 }
  uselistorder i32 %v4_e49c, { 2, 3, 0, 1 }
  uselistorder i32 %v5_e470, { 1, 0 }
  uselistorder i32 %v2_e410, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_e348, { 2, 3, 1, 0 }
  uselistorder i32 %v2_e294, { 2, 1, 0 }
  uselistorder i32 %v1_e288, { 1, 2, 0 }
  uselistorder i32 %v1_e270, { 1, 2, 0 }
  uselistorder i32* %v4_e5e8, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_e260, { 1, 0, 2 }
  uselistorder i32 %v2_e25c, { 1, 0, 2 }
  uselistorder i32 %v2_e0fc, { 0, 1, 7, 2, 3, 4, 5, 6, 8 }
  uselistorder i32 %v2_e0ec, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_e008, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-124, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 22, 30, 31, 32, 43, 44, 36, 37, 33, 41, 42, 34, 35, 38, 39, 40 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @function_126cc, { 9, 8, 7, 1, 0, 6, 5, 4, 3, 2 }
  uselistorder i8* bitcast (i8** @global_var_1c240.100 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1c240.100, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1c240.100 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1c0bc.73, { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_1c0c0.98, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 14, 16, 15, 17, 18 }
  uselistorder i32 (i32)* @function_df10, { 1, 0 }
  uselistorder i32 (i32)* @function_d760, { 1, 0 }
  uselistorder i32 (i32)* @function_8650, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_e7e0, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_dd4c, { 1, 0 }
  uselistorder i32* @global_var_1c0c4.71, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_debc.69 to i32), { 0, 2, 1 }
  uselistorder i8** @global_var_1c2dc.80, { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_11c24, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e264.backedge, { 6, 12, 5, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_e380, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_e2d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e2c4, { 1, 0 }
  uselistorder label %dec_label_pc_e284.dec_label_pc_e284_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e26c.dec_label_pc_e26c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e0b8, { 2, 0, 1 }
}

define i32 @function_e72c() local_unnamed_addr {
dec_label_pc_e72c:
  %v2_e738 = load i32, i32* @global_var_1c244.106, align 4
  %v2_e73c = load i32, i32* @global_var_1c250.108, align 4
  store i32 ptrtoint (i32* @global_var_1c248.110 to i32), i32* @lr, align 4
  %v4_e748 = mul i32 %v2_e738, 2048
  %v5_e748 = xor i32 %v4_e748, %v2_e738
  %v4_e74c = udiv i32 %v2_e73c, 524288
  %v5_e74c = xor i32 %v4_e74c, %v2_e73c
  %v2_e750 = load i32, i32* @global_var_1c248.110, align 4
  %v2_e754 = load i32, i32* @global_var_1c24c.112, align 4
  %v2_e758 = xor i32 %v5_e74c, %v5_e748
  %v4_e75c = udiv i32 %v5_e748, 256
  %v5_e75c = xor i32 %v2_e758, %v4_e75c
  store i32 %v2_e750, i32* @global_var_1c244.106, align 4
  store i32 %v2_e754, i32* @global_var_1c248.110, align 4
  store i32 %v2_e73c, i32* @global_var_1c24c.112, align 4
  store i32 %v5_e75c, i32* @global_var_1c250.108, align 4
  ret i32 %v5_e75c

; uselistorder directives
  uselistorder i32 %v2_e73c, { 2, 1, 0 }
  uselistorder i32 %v2_e738, { 1, 0 }
}

define i32 @function_e784(i32 %arg1) local_unnamed_addr {
dec_label_pc_e784:
  %stack_var_-12 = alloca i32, align 4
  %v3_e784 = load i32, i32* @r4, align 4
  store i32 %v3_e784, i32* %stack_var_-12, align 4
  %v2_e78c = call i32 @function_1159c(i32* null)
  store i32 %v2_e78c, i32* @global_var_1c244.106, align 4
  %v0_e798 = call i32 @function_11324()
  store i32 %v0_e798, i32* @r4, align 4
  %v0_e7a0 = call i32 @function_11350()
  %v0_e7a8 = load i32, i32* @r4, align 4
  %v2_e7a8 = xor i32 %v0_e7a8, %v0_e7a0
  store i32 %v2_e7a8, i32* @r4, align 4
  store i32 %v2_e7a8, i32* @global_var_1c248.110, align 4
  %v1_e7b0 = call i32 @function_118ac(i32 %v0_e7a0)
  %v2_e7b4 = load i32, i32* @global_var_1c248.110, align 4
  %v2_e7c0 = xor i32 %v2_e7b4, %v1_e7b0
  store i32 %v2_e7c0, i32* @global_var_1c250.108, align 4
  store i32 %v1_e7b0, i32* @global_var_1c24c.112, align 4
  %v2_e7cc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_e7cc, i32* @r4, align 4
  ret i32 %v1_e7b0

; uselistorder directives
  uselistorder i32 %v1_e7b0, { 1, 2, 0 }
  uselistorder i32 %v0_e7a0, { 1, 0 }
  uselistorder i32 ()* @function_11350, { 2, 1, 0 }
}

define i32 @function_e7e0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e7e0:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e7e0 = load i32, i32* @r4, align 4
  store i32 %v3_e7e0, i32* %stack_var_-36, align 4
  %v6_e7e0 = load i32, i32* @r5, align 4
  %v9_e7e0 = load i32, i32* @r6, align 4
  %v12_e7e0 = load i32, i32* @r7, align 4
  %v28_e7e0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_e7e8 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e7f4 = call i32 @function_103fc(i32 28)
  %v3_e800 = call i32 @function_10318(i32 28, i32* null)
  %v2_e80c = inttoptr i32 %v3_e800 to i8*
  %v3_e80c = call i32 @function_119a0(i32 %v2_e7e8, i8* %v2_e80c)
  %v2_e810 = icmp eq i32 %arg2, 0
  br i1 %v2_e810, label %dec_label_pc_e88c, label %dec_label_pc_e818

dec_label_pc_e818:                                ; preds = %dec_label_pc_e7e0
  store i32 ptrtoint (i32* @global_var_1c244.106 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c248.110 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c24c.112 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1c250.108 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_e860 = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_e82c

dec_label_pc_e82c:                                ; preds = %dec_label_pc_e82c.dec_label_pc_e82c_crit_edge, %dec_label_pc_e818
  %v1_e850 = phi i32 [ %v1_e850.pre, %dec_label_pc_e82c.dec_label_pc_e82c_crit_edge ], [ ptrtoint (i32* @global_var_1c244.106 to i32), %dec_label_pc_e818 ]
  %v2_e82c = load i32, i32* @global_var_1c250.108, align 4
  store i32 %v2_e82c, i32* %r2.global-to-local, align 4
  %v2_e830 = load i32, i32* @global_var_1c244.106, align 4
  %v4_e834 = udiv i32 %v2_e82c, 524288
  %v5_e834 = xor i32 %v4_e834, %v2_e82c
  %v4_e838 = mul i32 %v2_e830, 2048
  %v5_e838 = xor i32 %v4_e838, %v2_e830
  %v2_e83c = xor i32 %v5_e834, %v5_e838
  %v2_e840 = load i32, i32* @global_var_1c248.110, align 4
  %v2_e844 = load i32, i32* @global_var_1c24c.112, align 4
  store i32 %v2_e844, i32* %ip.global-to-local, align 4
  %v4_e848 = udiv i32 %v5_e838, 256
  %v5_e848 = xor i32 %v2_e83c, %v4_e848
  store i32 %v5_e848, i32* @r4, align 4
  %v2_e850 = inttoptr i32 %v1_e850 to i32*
  store i32 %v2_e840, i32* %v2_e850, align 4
  %v0_e854 = load i32, i32* %ip.global-to-local, align 4
  %v1_e854 = load i32, i32* %r8.global-to-local, align 4
  %v2_e854 = inttoptr i32 %v1_e854 to i32*
  store i32 %v0_e854, i32* %v2_e854, align 4
  %v0_e858 = load i32, i32* %r2.global-to-local, align 4
  %v1_e858 = load i32, i32* @r7, align 4
  %v2_e858 = inttoptr i32 %v1_e858 to i32*
  store i32 %v0_e858, i32* %v2_e858, align 4
  %v0_e85c = load i32, i32* @r4, align 4
  %v1_e85c = load i32, i32* @r6, align 4
  %v2_e85c = inttoptr i32 %v1_e85c to i32*
  store i32 %v0_e85c, i32* %v2_e85c, align 4
  %v2_e860 = call i32 @function_109c8(i8* %v1_e860)
  %v0_e868 = load i32, i32* @r4, align 4
  %v2_e86c = call i32 @function_11054(i32 %v0_e868, i32 %v2_e860)
  %v2_e874 = add i32 %v2_e86c, %v28_e7e0
  %v1_e878 = add i32 %v2_e874, -32
  %v2_e878 = inttoptr i32 %v1_e878 to i8*
  %v3_e878 = load i8, i8* %v2_e878, align 1
  %v2_e87c = load i32, i32* @r5, align 4
  %v3_e87c = load i32, i32* %fp.global-to-local, align 4
  %v4_e87c = add i32 %v3_e87c, %v2_e87c
  %v5_e87c = inttoptr i32 %v4_e87c to i8*
  store i8 %v3_e878, i8* %v5_e87c, align 1
  %v0_e880 = load i32, i32* @r5, align 4
  %v1_e880 = add i32 %v0_e880, 1
  store i32 %v1_e880, i32* @r5, align 4
  %v1_e884 = load i32, i32* %sb.global-to-local, align 4
  %v9_e884 = icmp eq i32 %v1_e880, %v1_e884
  br i1 %v9_e884, label %dec_label_pc_e88c, label %dec_label_pc_e82c.dec_label_pc_e82c_crit_edge

dec_label_pc_e82c.dec_label_pc_e82c_crit_edge:    ; preds = %dec_label_pc_e82c
  %v1_e850.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e82c

dec_label_pc_e88c:                                ; preds = %dec_label_pc_e82c, %dec_label_pc_e7e0
  %v1_e890 = call i32 @function_10344(i32 28)
  %v2_e898 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e898, i32* @r4, align 4
  store i32 %v6_e7e0, i32* @r5, align 4
  store i32 %v9_e7e0, i32* @r6, align 4
  store i32 %v12_e7e0, i32* @r7, align 4
  ret i32 %v1_e890

; uselistorder directives
  uselistorder i32 %v2_e830, { 1, 0 }
  uselistorder i32 %v2_e82c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_e8ac(i8* %arg1) local_unnamed_addr {
dec_label_pc_e8ac:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_e8ac = load i32, i32* @r4, align 4
  store i32 %v3_e8ac, i32* %stack_var_-36, align 4
  %v9_e8ac = load i32, i32* @r6, align 4
  %v12_e8ac = load i32, i32* @r7, align 4
  %v15_e8ac = load i32, i32* @r8, align 4
  %v18_e8ac = load i32, i32* @sb, align 4
  %v21_e8ac = load i32, i32* @sl, align 4
  %v24_e8ac = load i32, i32* @fp, align 4
  %v0_e8b0 = load i32, i32* @r1, align 4
  store i32 %v0_e8b0, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_e8b0, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_e8ac
  store i32 %v3_e8ac, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_e8ac
  store i32 ptrtoint (i32* @global_var_1c250.108 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c24c.112 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c248.110 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c244.106 to i32), i32* %r8.global-to-local, align 4
  %v2_e8cc = load i32, i32* @global_var_1c250.108, align 4
  store i32 %v2_e8cc, i32* @lr, align 4
  %v2_e8d0 = load i32, i32* @global_var_1c24c.112, align 4
  store i32 %v2_e8d0, i32* %r7.global-to-local, align 4
  %v2_e8d4 = load i32, i32* @global_var_1c248.110, align 4
  store i32 %v2_e8d4, i32* %r6.global-to-local, align 4
  %v2_e8d8 = load i32, i32* @global_var_1c244.106, align 4
  br label %dec_label_pc_e904

dec_label_pc_e8e0:                                ; preds = %dec_label_pc_e930
  %v3_e938 = sdiv i32 %v5_e91c, 256
  %v1_e8e0 = trunc i32 %v3_e938 to i8
  %v3_e8e0 = add i32 %v9_e924, 1
  %v4_e8e0 = inttoptr i32 %v3_e8e0 to i8*
  store i8 %v1_e8e0, i8* %v4_e8e0, align 1
  %v0_e8e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e8e4 = trunc i32 %v0_e8e4 to i8
  %v2_e8e4 = load i32, i32* %r5.global-to-local, align 4
  %v3_e8e4 = inttoptr i32 %v2_e8e4 to i8*
  store i8 %v1_e8e4, i8* %v3_e8e4, align 1
  %v0_e8e8 = load i32, i32* %r5.global-to-local, align 4
  %v1_e8e8 = add i32 %v0_e8e8, 2
  store i32 %v1_e8e8, i32* %r5.global-to-local, align 4
  %v0_e8ec.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e8ec

dec_label_pc_e8ec:                                ; preds = %.thread, %dec_label_pc_e8e0
  %v0_e8ec = phi i32 [ %v9_e928, %.thread ], [ %v0_e8ec.pre, %dec_label_pc_e8e0 ]
  %v2_e8e07 = phi i32 [ %v12_e924, %.thread ], [ %v1_e8e8, %dec_label_pc_e8e0 ]
  %tmp22 = icmp slt i32 %v0_e8ec, 1
  br i1 %tmp22, label %dec_label_pc_e96c, label %dec_label_pc_e8f8

dec_label_pc_e8f8:                                ; preds = %dec_label_pc_e8ec
  %v0_e8f0 = load i32, i32* %r6.global-to-local, align 4
  %v0_e8f8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_e8f8, i32* %r6.global-to-local, align 4
  %v0_e8fc = load i32, i32* @lr, align 4
  store i32 %v0_e8fc, i32* %r7.global-to-local, align 4
  %v0_e900 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e900, i32* @lr, align 4
  br label %dec_label_pc_e904

dec_label_pc_e904:                                ; preds = %bb21, %dec_label_pc_e8f8
  %v0_e954 = phi i32 [ %v2_e8d4, %bb21 ], [ %v0_e8f8, %dec_label_pc_e8f8 ]
  %v9_e924 = phi i32 [ %tmp, %bb21 ], [ %v2_e8e07, %dec_label_pc_e8f8 ]
  %v0_e93c = phi i32 [ %v0_e8b0, %bb21 ], [ %v0_e8ec, %dec_label_pc_e8f8 ]
  %v0_e948 = phi i32 [ %v2_e8cc, %bb21 ], [ %v0_e900, %dec_label_pc_e8f8 ]
  %v0_e944 = phi i32 [ %v2_e8d8, %bb21 ], [ %v0_e8f0, %dec_label_pc_e8f8 ]
  %v4_e904 = mul i32 %v0_e944, 2048
  %v5_e904 = xor i32 %v4_e904, %v0_e944
  %v4_e908 = udiv i32 %v0_e948, 524288
  %v5_e908 = xor i32 %v4_e908, %v0_e948
  %v2_e90c = xor i32 %v5_e908, %v5_e904
  %v4_e91c = udiv i32 %v5_e904, 256
  %v5_e91c = xor i32 %v4_e91c, %v2_e90c
  store i32 %v5_e91c, i32* %r3.global-to-local, align 4
  %v7_e924 = icmp sgt i32 %v0_e93c, 3
  br i1 %v7_e924, label %.thread, label %dec_label_pc_e930

.thread:                                          ; preds = %dec_label_pc_e904
  %v10_e924 = inttoptr i32 %v9_e924 to i32*
  store i32 %v5_e91c, i32* %v10_e924, align 4
  %v11_e924 = load i32, i32* %r5.global-to-local, align 4
  %v12_e924 = add i32 %v11_e924, 4
  store i32 %v12_e924, i32* %r5.global-to-local, align 4
  %v8_e928 = load i32, i32* %r4.global-to-local, align 4
  %v9_e928 = add i32 %v8_e928, -4
  store i32 %v9_e928, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e8ec

dec_label_pc_e930:                                ; preds = %dec_label_pc_e904
  store i32 %v5_e91c, i32* %r3.global-to-local, align 4
  %v7_e934 = icmp eq i32 %v0_e93c, 1
  %v1_e93c = add i32 %v0_e93c, -2
  store i32 %v1_e93c, i32* %r4.global-to-local, align 4
  br i1 %v7_e934, label %dec_label_pc_e944, label %dec_label_pc_e8e0

dec_label_pc_e944:                                ; preds = %dec_label_pc_e930
  store i32 %v5_e91c, i32* %r3.global-to-local, align 4
  %v1_e954 = load i32, i32* %r8.global-to-local, align 4
  %v2_e954 = inttoptr i32 %v1_e954 to i32*
  store i32 %v0_e954, i32* %v2_e954, align 4
  %v0_e958 = load i32, i32* %r7.global-to-local, align 4
  %v1_e958 = load i32, i32* %sl.global-to-local, align 4
  %v2_e958 = inttoptr i32 %v1_e958 to i32*
  store i32 %v0_e958, i32* %v2_e958, align 4
  %v0_e95c = load i32, i32* @lr, align 4
  %v1_e95c = load i32, i32* %sb.global-to-local, align 4
  %v2_e95c = inttoptr i32 %v1_e95c to i32*
  store i32 %v0_e95c, i32* %v2_e95c, align 4
  %v0_e960 = load i32, i32* %r3.global-to-local, align 4
  %v1_e960 = load i32, i32* %fp.global-to-local, align 4
  %v2_e960 = inttoptr i32 %v1_e960 to i32*
  store i32 %v0_e960, i32* %v2_e960, align 4
  %v0_e964 = load i32, i32* %r3.global-to-local, align 4
  %v1_e964 = trunc i32 %v0_e964 to i8
  %v2_e964 = load i32, i32* %r5.global-to-local, align 4
  %v3_e964 = inttoptr i32 %v2_e964 to i8*
  store i8 %v1_e964, i8* %v3_e964, align 1
  %v2_e968 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e968, i32* @r4, align 4
  store i32 %v9_e8ac, i32* @r6, align 4
  store i32 %v12_e8ac, i32* @r7, align 4
  store i32 %v15_e8ac, i32* @r8, align 4
  store i32 %v18_e8ac, i32* @sb, align 4
  store i32 %v21_e8ac, i32* @sl, align 4
  store i32 %v24_e8ac, i32* @fp, align 4
  ret i32 %v5_e904

dec_label_pc_e96c:                                ; preds = %dec_label_pc_e8ec
  %v0_e96c = load i32, i32* %r3.global-to-local, align 4
  %v1_e96c = load i32, i32* %fp.global-to-local, align 4
  %v2_e96c = inttoptr i32 %v1_e96c to i32*
  store i32 %v0_e96c, i32* %v2_e96c, align 4
  %v0_e970 = load i32, i32* @lr, align 4
  %v1_e970 = load i32, i32* %sb.global-to-local, align 4
  %v2_e970 = inttoptr i32 %v1_e970 to i32*
  store i32 %v0_e970, i32* %v2_e970, align 4
  %v0_e974 = load i32, i32* %r7.global-to-local, align 4
  %v1_e974 = load i32, i32* %sl.global-to-local, align 4
  %v2_e974 = inttoptr i32 %v1_e974 to i32*
  store i32 %v0_e974, i32* %v2_e974, align 4
  %v0_e978 = load i32, i32* %r6.global-to-local, align 4
  %v1_e978 = load i32, i32* %r8.global-to-local, align 4
  %v2_e978 = inttoptr i32 %v1_e978 to i32*
  store i32 %v0_e978, i32* %v2_e978, align 4
  %v2_e97c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e97c, i32* @r4, align 4
  store i32 %v9_e8ac, i32* @r6, align 4
  store i32 %v12_e8ac, i32* @r7, align 4
  store i32 %v15_e8ac, i32* @r8, align 4
  store i32 %v18_e8ac, i32* @sb, align 4
  store i32 %v21_e8ac, i32* @sl, align 4
  store i32 %v24_e8ac, i32* @fp, align 4
  ret i32 %v5_e904

; uselistorder directives
  uselistorder i32 %v9_e928, { 1, 0 }
  uselistorder i32 %v12_e924, { 1, 0 }
  uselistorder i32 %v5_e91c, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_e904, { 1, 2, 0, 3 }
  uselistorder i32 %v0_e944, { 1, 0 }
  uselistorder i32 %v0_e948, { 1, 0 }
  uselistorder i32 %v0_e8ec, { 1, 0 }
  uselistorder i32 %v24_e8ac, { 1, 0 }
  uselistorder i32 %v21_e8ac, { 1, 0 }
  uselistorder i32 %v18_e8ac, { 1, 0 }
  uselistorder i32 %v15_e8ac, { 1, 0 }
  uselistorder i32 %v12_e8ac, { 1, 0 }
  uselistorder i32 %v9_e8ac, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1c244.106, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1c244.106 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1c248.110, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1c24c.112, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1c250.108, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e904, { 1, 0 }
}

define i32 @function_e990() local_unnamed_addr {
dec_label_pc_e990:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e990 = load i32, i32* @r4, align 4
  store i32 %v3_e990, i32* %stack_var_-16, align 4
  %v0_e994 = load i32, i32* @r0, align 4
  store i32 %v0_e994, i32* %r5.global-to-local, align 4
  %v1_e998 = add i32 %v0_e994, 4
  %v2_e998 = inttoptr i32 %v1_e998 to i32*
  %v3_e998 = load i32, i32* %v2_e998, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 59836, i32* @lr, align 4
  %v1_e9b8 = icmp ne i32 %v3_e998, -1
  call void @__pseudo_cond_branch(i1 %v1_e9b8, i32 ptrtoint (i32* @global_var_112cc.101 to i32))
  %v3_e9c8 = call i32 @function_11bb0(i32 2, i32 1, i32 0)
  store i32 %v3_e9c8, i32* %r3.global-to-local, align 4
  %v7_e9d0 = icmp eq i32 %v3_e9c8, -1
  store i32 256, i32* @r1, align 4
  %v0_e9d8 = load i32, i32* %r5.global-to-local, align 4
  %v1_e9d8 = add i32 %v0_e9d8, 28
  store i32 %v1_e9d8, i32* @r0, align 4
  %v2_e9dc = add i32 %v0_e9d8, 4
  %v3_e9dc = inttoptr i32 %v2_e9dc to i32*
  store i32 %v3_e9c8, i32* %v3_e9dc, align 4
  br i1 %v7_e9d0, label %dec_label_pc_e990.dec_label_pc_ea58_crit_edge, label %dec_label_pc_e9e4

dec_label_pc_e990.dec_label_pc_ea58_crit_edge:    ; preds = %dec_label_pc_e990
  %v14_ea5c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_ea58

dec_label_pc_e9e4:                                ; preds = %dec_label_pc_e990
  %v0_e9e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_e9e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_e9e4 = add i32 %v1_e9e4, 24
  %v3_e9e4 = inttoptr i32 %v2_e9e4 to i32*
  store i32 %v0_e9e4, i32* %v3_e9e4, align 4
  %v0_e9e8 = call i32 @function_10a68()
  %v0_e9ec = load i32, i32* %r5.global-to-local, align 4
  %v1_e9ec = add i32 %v0_e9ec, 4
  %v2_e9ec = inttoptr i32 %v1_e9ec to i32*
  %v3_e9ec = load i32, i32* %v2_e9ec, align 4
  store i32 %v3_e9ec, i32* @r4, align 4
  %v0_e9f4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e9f4, i32* @r2, align 4
  %v2_e9fc = call i32 @function_11208(i32 %v3_e9ec, i32 3)
  %v1_ea04 = or i32 %v2_e9fc, 2048
  store i32 %v1_ea04, i32* @r2, align 4
  %v0_ea08 = load i32, i32* @r4, align 4
  %v2_ea0c = call i32 @function_11208(i32 %v0_ea08, i32 4)
  store i32 ptrtoint (i32* @global_var_1c288.126 to i32), i32* %r3.global-to-local, align 4
  %v0_ea14 = load i32, i32* %r5.global-to-local, align 4
  %v1_ea14 = add i32 %v0_ea14, 20
  %v2_ea14 = inttoptr i32 %v1_ea14 to i32*
  %v3_ea14 = load i32, i32* %v2_ea14, align 4
  store i32 %v3_ea14, i32* @r4, align 4
  %v2_ea18 = load i32, i32* @global_var_1c288.126, align 4
  %v1_ea1c = add i32 %v0_ea14, 16
  %v2_ea1c = inttoptr i32 %v1_ea1c to i32*
  %v3_ea1c = load i32, i32* %v2_ea1c, align 4
  store i32 %v3_ea1c, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_ea24 = add i32 %v0_ea14, 8
  %v3_ea24 = inttoptr i32 %v2_ea24 to i32*
  store i32 %v2_ea18, i32* %v3_ea24, align 4
  %v0_ea28 = load i32, i32* %r3.global-to-local, align 4
  %v1_ea28 = load i32, i32* %r5.global-to-local, align 4
  %v2_ea28 = add i32 %v1_ea28, 12
  %v3_ea28 = inttoptr i32 %v2_ea28 to i32*
  store i32 %v0_ea28, i32* %v3_ea28, align 4
  %v0_ea30 = load i32, i32* %r5.global-to-local, align 4
  %v1_ea30 = add i32 %v0_ea30, 4
  %v2_ea30 = inttoptr i32 %v1_ea30 to i32*
  %v3_ea30 = load i32, i32* %v2_ea30, align 4
  %v0_ea34 = load i32, i32* %r3.global-to-local, align 4
  %v2_ea34 = mul i32 %v0_ea34, 2
  store i32 %v2_ea34, i32* %r3.global-to-local, align 4
  store i32 %v2_ea34, i32* %stack_var_-32, align 4
  %v3_ea54 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_ea54 = call i32 @function_11a0c(i32 %v3_ea30, %sockaddr* %v3_ea54, i32 16)
  br label %dec_label_pc_ea58

dec_label_pc_ea58:                                ; preds = %dec_label_pc_e990.dec_label_pc_ea58_crit_edge, %dec_label_pc_e9e4
  %v14_ea5c = phi i32 [ %v14_ea5c.pre, %dec_label_pc_e990.dec_label_pc_ea58_crit_edge ], [ %v4_ea54, %dec_label_pc_e9e4 ]
  %v2_ea5c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_ea5c, i32* @r4, align 4
  ret i32 %v14_ea5c

; uselistorder directives
  uselistorder i32 %v2_ea34, { 1, 0 }
  uselistorder i32 %v3_e9c8, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_10a68, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_ea58, { 1, 0 }
}

define i32 @function_ea64(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ea64:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_ea64 = load i32, i32* @r4, align 4
  %v6_ea64 = load i32, i32* @r5, align 4
  %v9_ea64 = load i32, i32* @r6, align 4
  %v12_ea64 = load i32, i32* @r7, align 4
  %v15_ea64 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1c254.128 to i32), i32* @r8, align 4
  %v2_ea6c = load i32, i32* @global_var_1c254.128, align 4
  store i32 ptrtoint (i32* @global_var_1c280.130 to i32), i32* %sb.global-to-local, align 4
  %v3_ea78 = mul i32 %v2_ea6c, 16
  store i32 %v3_ea78, i32* %r3.global-to-local, align 4
  %v3_ea80 = urem i32 %arg3, 65536
  store i32 %v3_ea80, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_ea8c = load i32, i32* @global_var_1c280.130, align 4
  %v1_ea90 = add i32 %v3_ea78, 16
  store i32 %v1_ea90, i32* %r1.global-to-local, align 4
  store i32 %v3_ea80, i32* %stack_var_-44, align 4
  %v15_ea98 = call i32 @function_11fe4(i32 %v2_ea8c, i32 %v1_ea90, i32 %v3_ea80, i32 %v3_ea78)
  store i32 %v15_ea98, i32* %sl.global-to-local, align 4
  %v0_eaa0 = load i32, i32* @r5, align 4
  %v1_eaa4 = load i32, i32* %sb.global-to-local, align 4
  %v2_eaa4 = inttoptr i32 %v1_eaa4 to i32*
  store i32 %v15_ea98, i32* %v2_eaa4, align 4
  %v2_eaa8 = load i32, i32* @global_var_1c254.128, align 4
  store i32 %v2_eaa8, i32* %fp.global-to-local, align 4
  %v1_eaac = inttoptr i32 %v0_eaa0 to i8*
  %v2_eaac = call i32 @function_109c8(i8* %v1_eaac)
  %sext = mul i32 %v2_eaac, 16777216
  %v1_eab0 = sdiv i32 %sext, 16777216
  %v2_eab0 = add nsw i32 %v1_eab0, 1
  store i32 %v2_eab0, i32* @r4, align 4
  store i32 %v1_eab0, i32* @r7, align 4
  %v1_eabc = call i32 @function_11d48(i32 %v2_eab0)
  %v0_eac0 = load i32, i32* @r5, align 4
  store i32 %v0_eac0, i32* %r1.global-to-local, align 4
  %v0_eac4 = load i32, i32* @r4, align 4
  store i32 %v0_eac4, i32* %r2.global-to-local, align 4
  store i32 %v1_eabc, i32* @r6, align 4
  %v3_eacc = call i32 @function_10a44(i32 %v1_eabc, i32 %v0_eac0, i32 %v0_eac4)
  %v0_ead0 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_ead0, 1
  %extract.t6 = trunc i32 %v0_ead0 to i8
  br i1 %tmp21, label %dec_label_pc_eaf4, label %dec_label_pc_ead8

dec_label_pc_ead8:                                ; preds = %dec_label_pc_ea64
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eadc

dec_label_pc_eadc:                                ; preds = %dec_label_pc_eadc, %dec_label_pc_ead8
  %v2_eae4 = phi i32 [ %v1_eae8, %dec_label_pc_eadc ], [ 0, %dec_label_pc_ead8 ]
  %v1_eadc = load i32, i32* @r6, align 4
  %v2_eadc = add i32 %v1_eadc, %v2_eae4
  %v3_eadc = inttoptr i32 %v2_eadc to i8*
  %v4_eadc = load i8, i8* %v3_eadc, align 1
  %v6_eadc = zext i8 %v4_eadc to i32
  %v1_eae0 = xor i32 %v6_eadc, 84
  store i32 %v1_eae0, i32* %r3.global-to-local, align 4
  %v1_eae4 = trunc i32 %v1_eae0 to i8
  store i8 %v1_eae4, i8* %v3_eadc, align 1
  %v0_eae8 = load i32, i32* %r2.global-to-local, align 4
  %v1_eae8 = add i32 %v0_eae8, 1
  store i32 %v1_eae8, i32* %r2.global-to-local, align 4
  %v0_eaec = load i32, i32* @r7, align 4
  %v9_eaec = icmp eq i32 %v0_eaec, %v1_eae8
  br i1 %v9_eaec, label %dec_label_pc_eaf4.loopexit, label %dec_label_pc_eadc

dec_label_pc_eaf4.loopexit:                       ; preds = %dec_label_pc_eadc
  %extract.t = trunc i32 %v1_eae8 to i8
  br label %dec_label_pc_eaf4

dec_label_pc_eaf4:                                ; preds = %dec_label_pc_eaf4.loopexit, %dec_label_pc_ea64
  %v0_eb04.off0 = phi i8 [ %extract.t, %dec_label_pc_eaf4.loopexit ], [ %extract.t6, %dec_label_pc_ea64 ]
  %v2_eaf4 = load i32, i32* @global_var_1c254.128, align 4
  %v2_eaf8 = load i32, i32* @global_var_1c280.130, align 4
  store i32 %v2_eaf8, i32* %r2.global-to-local, align 4
  %v3_eafc = mul i32 %v2_eaf4, 16
  %v2_eb00 = add i32 %v2_eaf8, %v3_eafc
  store i32 %v2_eb00, i32* %r3.global-to-local, align 4
  %v3_eb04 = add i32 %v2_eb00, 12
  %v4_eb04 = inttoptr i32 %v3_eb04 to i8*
  store i8 %v0_eb04.off0, i8* %v4_eb04, align 1
  %v0_eb08 = load i32, i32* @r6, align 4
  %v1_eb08 = load i32, i32* %sl.global-to-local, align 4
  %v2_eb08 = load i32, i32* %fp.global-to-local, align 4
  %v5_eb08 = mul i32 %v2_eb08, 16
  %v6_eb08 = add i32 %v5_eb08, %v1_eb08
  %v7_eb08 = inttoptr i32 %v6_eb08 to i32*
  store i32 %v0_eb08, i32* %v7_eb08, align 4
  %v2_eb10 = load i32, i32* @global_var_1c254.128, align 4
  store i32 %v2_eb10, i32* @r7, align 4
  %v2_eb14 = load i32, i32* @global_var_1c280.130, align 4
  store i32 %v2_eb14, i32* %sl.global-to-local, align 4
  %v1_eb18 = inttoptr i32 %arg2 to i8*
  %v2_eb18 = call i32 @function_109c8(i8* %v1_eb18)
  %sext1 = mul i32 %v2_eb18, 16777216
  %v1_eb1c = sdiv i32 %sext1, 16777216
  %v2_eb1c = add nsw i32 %v1_eb1c, 1
  store i32 %v2_eb1c, i32* @r4, align 4
  store i32 %v1_eb1c, i32* @r5, align 4
  %v1_eb28 = call i32 @function_11d48(i32 %v2_eb1c)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_eb30 = load i32, i32* @r4, align 4
  store i32 %v0_eb30, i32* %r2.global-to-local, align 4
  store i32 %v1_eb28, i32* %r6.global-to-local, align 4
  %v3_eb38 = call i32 @function_10a44(i32 %v1_eb28, i32 %arg2, i32 %v0_eb30)
  %v0_eb3c = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_eb3c, 1
  %extract.t8 = trunc i32 %v0_eb3c to i8
  br i1 %tmp22, label %dec_label_pc_eb60, label %dec_label_pc_eb44

dec_label_pc_eb44:                                ; preds = %dec_label_pc_eaf4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eb48

dec_label_pc_eb48:                                ; preds = %dec_label_pc_eb48, %dec_label_pc_eb44
  %v2_eb50 = phi i32 [ %v1_eb54, %dec_label_pc_eb48 ], [ 0, %dec_label_pc_eb44 ]
  %v1_eb48 = load i32, i32* %r6.global-to-local, align 4
  %v2_eb48 = add i32 %v1_eb48, %v2_eb50
  %v3_eb48 = inttoptr i32 %v2_eb48 to i8*
  %v4_eb48 = load i8, i8* %v3_eb48, align 1
  %v6_eb48 = zext i8 %v4_eb48 to i32
  %v1_eb4c = xor i32 %v6_eb48, 84
  store i32 %v1_eb4c, i32* %r3.global-to-local, align 4
  %v1_eb50 = trunc i32 %v1_eb4c to i8
  store i8 %v1_eb50, i8* %v3_eb48, align 1
  %v0_eb54 = load i32, i32* %r2.global-to-local, align 4
  %v1_eb54 = add i32 %v0_eb54, 1
  store i32 %v1_eb54, i32* %r2.global-to-local, align 4
  %v0_eb58 = load i32, i32* @r5, align 4
  %v9_eb58 = icmp eq i32 %v0_eb58, %v1_eb54
  br i1 %v9_eb58, label %dec_label_pc_eb60.loopexit, label %dec_label_pc_eb48

dec_label_pc_eb60.loopexit:                       ; preds = %dec_label_pc_eb48
  %extract.t7 = trunc i32 %v1_eb54 to i8
  br label %dec_label_pc_eb60

dec_label_pc_eb60:                                ; preds = %dec_label_pc_eb60.loopexit, %dec_label_pc_eaf4
  %v0_eb70.off0 = phi i8 [ %extract.t7, %dec_label_pc_eb60.loopexit ], [ %extract.t8, %dec_label_pc_eaf4 ]
  %v2_eb60 = load i32, i32* @global_var_1c254.128, align 4
  %v2_eb64 = load i32, i32* @global_var_1c280.130, align 4
  %v3_eb68 = mul i32 %v2_eb60, 16
  %v2_eb6c = or i32 %v3_eb68, 13
  %v3_eb70 = add i32 %v2_eb6c, %v2_eb64
  %v4_eb70 = inttoptr i32 %v3_eb70 to i8*
  store i8 %v0_eb70.off0, i8* %v4_eb70, align 1
  %v2_eb78 = load i32, i32* @global_var_1c254.128, align 4
  store i32 %v2_eb78, i32* %lr.global-to-local, align 4
  %v4_eb7c = load i8, i8* @global_var_1c285.133, align 1
  %v5_eb7c = zext i8 %v4_eb7c to i32
  %v3_eb80 = load i8, i8* bitcast (i8** @global_var_1c284.132 to i8*), align 4
  %v4_eb80 = zext i8 %v3_eb80 to i32
  %v2_eb84 = load i32, i32* @global_var_1c280.130, align 4
  %v4_eb88 = mul nuw nsw i32 %v5_eb7c, 256
  %v5_eb88 = or i32 %v4_eb80, %v4_eb88
  store i32 %v5_eb88, i32* %r2.global-to-local, align 4
  %v3_eb8c = mul i32 %v2_eb78, 16
  %v2_eb90 = add i32 %v2_eb84, %v3_eb8c
  store i32 %v2_eb90, i32* %r1.global-to-local, align 4
  %v3_eb98 = add i32 %v2_eb90, 9
  %v4_eb98 = inttoptr i32 %v3_eb98 to i8*
  store i8 %v4_eb7c, i8* %v4_eb98, align 1
  %v0_eb9c = load i32, i32* %r2.global-to-local, align 4
  %v1_eb9c = trunc i32 %v0_eb9c to i8
  %v2_eb9c = load i32, i32* %r1.global-to-local, align 4
  %v3_eb9c = add i32 %v2_eb9c, 8
  %v4_eb9c = inttoptr i32 %v3_eb9c to i8*
  store i8 %v1_eb9c, i8* %v4_eb9c, align 1
  %v4_eba0 = load i8, i8* @global_var_1c285.133, align 1
  %v5_eba0 = zext i8 %v4_eba0 to i32
  %v3_eba4 = load i8, i8* bitcast (i8** @global_var_1c284.132 to i8*), align 4
  %v4_eba4 = zext i8 %v3_eba4 to i32
  %v4_eba8 = mul nuw nsw i32 %v5_eba0, 256
  %v5_eba8 = or i32 %v4_eba4, %v4_eba8
  %v2_ebac = load i32, i32* %stack_var_-44, align 4
  %v2_ebb0 = add i32 %v5_eba8, %v2_ebac
  store i32 %v2_ebb0, i32* %r3.global-to-local, align 4
  %v3_ebb49 = udiv i32 %v2_ebb0, 256
  %v1_ebb8 = trunc i32 %v3_ebb49 to i8
  %v2_ebb8 = load i32, i32* %r1.global-to-local, align 4
  %v3_ebb8 = add i32 %v2_ebb8, 11
  %v4_ebb8 = inttoptr i32 %v3_ebb8 to i8*
  store i8 %v1_ebb8, i8* %v4_ebb8, align 1
  %v0_ebbc = load i32, i32* %r3.global-to-local, align 4
  %v1_ebbc = trunc i32 %v0_ebbc to i8
  %v2_ebbc = load i32, i32* %r1.global-to-local, align 4
  %v3_ebbc = add i32 %v2_ebbc, 10
  %v4_ebbc = inttoptr i32 %v3_ebbc to i8*
  store i8 %v1_ebbc, i8* %v4_ebbc, align 1
  %v4_ebc0 = load i8, i8* @global_var_1c285.133, align 1
  %v5_ebc0 = zext i8 %v4_ebc0 to i32
  %v3_ebc4 = load i8, i8* bitcast (i8** @global_var_1c284.132 to i8*), align 4
  %v4_ebc4 = zext i8 %v3_ebc4 to i32
  %v4_ebc8 = mul nuw nsw i32 %v5_ebc0, 256
  %v5_ebc8 = or i32 %v4_ebc4, %v4_ebc8
  %v2_ebcc = load i32, i32* %stack_var_-44, align 4
  %v2_ebd0 = add i32 %v5_ebc8, %v2_ebcc
  store i32 %v2_ebd0, i32* %r2.global-to-local, align 4
  %v0_ebd4 = load i32, i32* @r7, align 4
  %v3_ebd4 = mul i32 %v0_ebd4, 16
  %v1_ebd8 = load i32, i32* %sl.global-to-local, align 4
  %v2_ebd8 = add i32 %v1_ebd8, %v3_ebd4
  store i32 %v2_ebd8, i32* %r3.global-to-local, align 4
  %v0_ebdc = load i32, i32* %lr.global-to-local, align 4
  %v1_ebdc = add i32 %v0_ebdc, 1
  store i32 %v1_ebdc, i32* @lr, align 4
  %v3_ebe0 = sdiv i32 %v2_ebd0, 256
  store i32 %v3_ebe0, i32* %r1.global-to-local, align 4
  %v0_ebe4 = load i32, i32* %r6.global-to-local, align 4
  %v2_ebe4 = add i32 %v2_ebd8, 4
  %v3_ebe4 = inttoptr i32 %v2_ebe4 to i32*
  store i32 %v0_ebe4, i32* %v3_ebe4, align 4
  %v0_ebe8 = load i32, i32* @lr, align 4
  %v1_ebe8 = load i32, i32* @r8, align 4
  %v2_ebe8 = inttoptr i32 %v1_ebe8 to i32*
  store i32 %v0_ebe8, i32* %v2_ebe8, align 4
  %v0_ebec = load i32, i32* %r1.global-to-local, align 4
  %v1_ebec = trunc i32 %v0_ebec to i8
  store i8 %v1_ebec, i8* @global_var_1c285.133, align 1
  %v0_ebf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_ebf0 = trunc i32 %v0_ebf0 to i8
  store i8 %v1_ebf0, i8* bitcast (i8** @global_var_1c284.132 to i8*), align 4
  store i32 %v3_ea64, i32* @r4, align 4
  store i32 %v6_ea64, i32* @r5, align 4
  store i32 %v9_ea64, i32* @r6, align 4
  store i32 %v12_ea64, i32* @r7, align 4
  store i32 %v15_ea64, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1c284.132 to i32)

; uselistorder directives
  uselistorder i32 %v1_eb54, { 0, 2, 3, 1 }
  uselistorder i32 %v1_eb28, { 1, 0 }
  uselistorder i32 %v1_eae8, { 0, 2, 3, 1 }
  uselistorder i32 %v1_eabc, { 1, 0 }
  uselistorder i32 %v3_ea80, { 1, 2, 0 }
  uselistorder i32 %v3_ea78, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_109c8, { 0, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11fe4, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_ec08(i32 %arg1) local_unnamed_addr {
dec_label_pc_ec08:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp260 = call i32 @__decompiler_undefined_function_0()
  %tmp261 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %tmp289 = call i8* @__decompiler_undefined_function_3()
  %stack_var_-36 = alloca i32, align 4
  %v3_ec08 = load i32, i32* @r4, align 4
  store i32 %v3_ec08, i32* %stack_var_-36, align 4
  %v6_ec08 = load i32, i32* @r5, align 4
  %v15_ec08 = load i32, i32* @r8, align 4
  %v18_ec08 = load i32, i32* @sb, align 4
  %v21_ec08 = load i32, i32* @sl, align 4
  %v0_ec14 = call i32 @function_112f8()
  store i32 %v0_ec14, i32* %r0.global-to-local, align 4
  %v7_ec18 = icmp eq i32 %v0_ec14, -1
  %. = zext i1 %v7_ec18 to i32
  %tmp292 = icmp slt i32 %v0_ec14, 1
  %storemerge251 = select i1 %tmp292, i32 %., i32 1
  store i32 %storemerge251, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c2f4.135 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec34 = icmp eq i32 %storemerge251, 0
  store i1 %v2_ec34, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_ec14, i32* @global_var_1c2f4.135, align 4
  br i1 %v2_ec34, label %dec_label_pc_ec4c, label %dec_label_pc_ec40

dec_label_pc_ec40:                                ; preds = %dec_label_pc_ec08
  store i32 %v3_ec08, i32* %r4.global-to-local, align 4
  store i32 %v6_ec08, i32* @r5, align 4
  store i32 %v15_ec08, i32* %r8.global-to-local, align 4
  store i32 %v18_ec08, i32* @sb, align 4
  store i32 %v21_ec08, i32* %sl.global-to-local, align 4
  ret i32 %v0_ec14

dec_label_pc_ec4c:                                ; preds = %dec_label_pc_ec08
  %v0_ec4c = call i32 @function_10c80()
  store i32 %v0_ec4c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c2d0.49 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_ec4c, i32* @global_var_1c2d0.49, align 4
  %v1_ec58 = call i32 @function_e784(i32 %v0_ec4c)
  %v0_ec5c = load i32, i32* @r4, align 4
  store i32 %v0_ec5c, i32* %r0.global-to-local, align 4
  %v1_ec60 = inttoptr i32 %v0_ec5c to i32*
  %v2_ec60 = call i32 @function_1159c(i32* %v1_ec60)
  store i32 ptrtoint (i32* @global_var_1c288.126 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_ec60, i32* @global_var_1c288.126, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_ec74 = call i32 @function_11e9c(i32 256, i32 288)
  store i32 %v2_ec74, i32* %lr.global-to-local, align 4
  %v0_ec80 = load i32, i32* @r4, align 4
  store i32 %v0_ec80, i32* %stack_var_-52, align 4
  store i32 %v2_ec74, i32* @global_var_1c2ec.139, align 4
  store i32 %v0_ec80, i32* %r3.global-to-local, align 4
  store i32 %v0_ec80, i32* @r5, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_ec80, i32* %ip.global-to-local, align 4
  %v1_ec98 = add i32 %v2_ec74, 4
  store i32 %v1_ec98, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ec9c

dec_label_pc_ec9c:                                ; preds = %dec_label_pc_ec9c.dec_label_pc_ec9c_crit_edge, %dec_label_pc_ec4c
  %v0_ecb4 = phi i32 [ %v0_ecb4.pre, %dec_label_pc_ec9c.dec_label_pc_ec9c_crit_edge ], [ %v0_ec80, %dec_label_pc_ec4c ]
  %v0_eca4 = phi i32 [ %v0_ecbc, %dec_label_pc_ec9c.dec_label_pc_ec9c_crit_edge ], [ %v0_ec80, %dec_label_pc_ec4c ]
  %v1_ecac = phi i32 [ %v1_ecac.pre, %dec_label_pc_ec9c.dec_label_pc_ec9c_crit_edge ], [ %v2_ec74, %dec_label_pc_ec4c ]
  %v3_ec9c = mul i32 %v0_eca4, 256
  store i32 %v3_ec9c, i32* %r2.global-to-local, align 4
  %v1_eca4 = add i32 %v0_eca4, 1
  store i32 %v1_eca4, i32* %ip.global-to-local, align 4
  %v2_eca8 = mul i32 %v0_eca4, 288
  %v2_ecac = add i32 %v1_ecac, 12
  %v2_ecb4 = add i32 %v2_ecac, %v2_eca8
  %v3_ecb4 = inttoptr i32 %v2_ecb4 to i32*
  store i32 %v0_ecb4, i32* %v3_ecb4, align 4
  %v0_ecb8 = load i32, i32* %r0.global-to-local, align 4
  %v1_ecb8 = load i32, i32* %r1.global-to-local, align 4
  %v2_ecb8 = inttoptr i32 %v1_ecb8 to i32*
  store i32 %v0_ecb8, i32* %v2_ecb8, align 4
  %v3_ecb8 = load i32, i32* %r1.global-to-local, align 4
  %v4_ecb8 = add i32 %v3_ecb8, 288
  store i32 %v4_ecb8, i32* %r1.global-to-local, align 4
  %v0_ecbc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_ecbc, i32* %r3.global-to-local, align 4
  %v7_ecc0 = icmp sgt i32 %v1_eca4, 255
  br i1 %v7_ecc0, label %dec_label_pc_ecc4, label %dec_label_pc_ec9c.dec_label_pc_ec9c_crit_edge

dec_label_pc_ec9c.dec_label_pc_ec9c_crit_edge:    ; preds = %dec_label_pc_ec9c
  %v1_ecac.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_ecb4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_ec9c

dec_label_pc_ecc4:                                ; preds = %dec_label_pc_ec9c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_ecbc, i32* %stack_var_-52, align 4
  %v3_ecd4 = call i32 @function_11bb0(i32 2, i32 3, i32 6)
  store i32 %v3_ecd4, i32* %r0.global-to-local, align 4
  %v2_ecdc = icmp eq i32 %v3_ecd4, -1
  store i1 %v2_ecdc, i1* %cpsr_c.global-to-local, align 1
  %v7_ecdc = icmp eq i32 %v3_ecd4, -1
  store i1 %v7_ecdc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ecd4, i32* @r4, align 4
  store i32 %v3_ecd4, i32* @global_var_1c2f0.141, align 4
  br i1 %v7_ecdc, label %dec_label_pc_f4ac, label %dec_label_pc_ecec

dec_label_pc_ecec:                                ; preds = %dec_label_pc_ecc4
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_ecf0 = load i32, i32* @r5, align 4
  store i32 %v0_ecf0, i32* @r2, align 4
  %v2_ecf4 = call i32 @function_11208(i32 %v3_ecd4, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ecfc = or i32 %v2_ecf4, 2048
  store i32 %v1_ecfc, i32* @r2, align 4
  %v0_ed00 = load i32, i32* @r4, align 4
  store i32 %v0_ed00, i32* %r0.global-to-local, align 4
  %v2_ed04 = call i32 @function_11208(i32 %v0_ed00, i32 4)
  %v2_ed10 = load i32, i32* @global_var_1c2f0.141, align 4
  store i32 %v2_ed10, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_ed18 = load i32, i32* @r5, align 4
  store i32 %v0_ed18, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_ed20 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ed20, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_ed30 = call i32 @function_11b80(i32 %v2_ed10, i32 %v0_ed18, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_ed30, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed34 = icmp eq i32 %v6_ed30, 0
  store i1 %v2_ed34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed34, label %dec_label_pc_ed3c, label %dec_label_pc_f59c

dec_label_pc_ed3c:                                ; preds = %dec_label_pc_ecec, %dec_label_pc_ed3c
  %v0_ed3c = call i32 @function_e72c()
  %v3_ed40 = mul i32 %v0_ed3c, 65536
  store i32 %v3_ed40, i32* %r0.global-to-local, align 4
  %v1_ed4c = mul i32 %v0_ed3c, 256
  %v3_ed50 = and i32 %v1_ed4c, 65280
  %tmp295 = udiv i32 %v0_ed3c, 256
  %v4_ed54 = urem i32 %tmp295, 256
  %v5_ed54 = or i32 %v4_ed54, %v3_ed50
  store i32 %v5_ed54, i32* %r3.global-to-local, align 4
  %v2_ed58 = icmp ugt i32 %v5_ed54, 1023
  store i1 %v2_ed58, i1* %cpsr_c.global-to-local, align 1
  %v7_ed58 = icmp eq i32 %v5_ed54, 1024
  store i1 %v7_ed58, i1* %cpsr_z.global-to-local, align 1
  %v3_ed5c = icmp ult i32 %v5_ed54, 1022
  br i1 %v3_ed5c, label %dec_label_pc_ed3c, label %dec_label_pc_ed60

dec_label_pc_ed60:                                ; preds = %dec_label_pc_ed3c
  %v5_ed48.le = trunc i32 %v0_ed3c to i8
  store i32 ptrtoint (i8** @global_var_1c258.143 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1c258.143 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1c25b.144 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c25a.145 to i8*), align 4
  %v0_ed94 = call i32 @function_e72c()
  %v1_ed94 = trunc i32 %v0_ed94 to i8
  store i32 %v0_ed94, i32* %r0.global-to-local, align 4
  %v3_ed9c = load i8, i8* @global_var_1c278.148, align 1
  store i32 ptrtoint (i8** @global_var_1c258.143 to i32), i32* %lr.global-to-local, align 4
  %v4_eda4250 = udiv i32 %v0_ed94, 256
  %v1_eda8 = trunc i32 %v4_eda4250 to i8
  store i8 %v1_eda8, i8* bitcast (i32* @global_var_1c25d.149 to i8*), align 4
  %v4_edac = sext i8 %v5_ed48.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1c261.150 to i8*), align 4
  %tmp = urem i8 %v3_ed9c, 16
  %v1_edb8 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1c26c.147 to i32), i32* %r2.global-to-local, align 4
  %v1_edc0 = and i32 %v4_edac, 128
  %v2_edc0 = icmp ne i32 %v1_edc0, 0
  store i1 %v2_edc0, i1* %cpsr_c.global-to-local, align 1
  %v3_edc0 = sdiv i32 %v4_edac, 256
  store i32 %v3_edc0, i32* %ip.global-to-local, align 4
  %v1_edc4 = or i32 %v1_edb8, 80
  store i32 %v1_edc4, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1c260.151 to i8*), align 4
  %v1_edd0 = trunc i32 %v1_edc4 to i8
  store i8 %v1_edd0, i8* @global_var_1c278.148, align 1
  store i8 23, i8* bitcast (i32* @global_var_1c26f.152 to i8*), align 4
  store i32 %v4_edac, i32* %r3.global-to-local, align 4
  %v1_ede0 = trunc i32 %v3_edc0 to i8
  store i8 %v1_ede0, i8* bitcast (i32* @global_var_1c26d.153 to i8*), align 4
  store i8 %v1_ed94, i8* bitcast (i32* @global_var_1c25c.154 to i8*), align 4
  store i8 %v5_ed48.le, i8* bitcast (i32* @global_var_1c26c.147 to i8*), align 4
  %v0_edec = load i32, i32* @r5, align 4
  %v1_edec = trunc i32 %v0_edec to i8
  store i8 %v1_edec, i8* bitcast (i32* @global_var_1c26e.155 to i8*), align 4
  %v0_edf0 = call i32 @function_e72c()
  %v1_edf0 = trunc i32 %v0_edf0 to i8
  %v3_edf8 = load i8, i8* @global_var_1c279.156, align 1
  %v4_edf8 = zext i8 %v3_edf8 to i32
  store i32 ptrtoint (i32* @global_var_1c26c.147 to i32), i32* @lr, align 4
  %v2_ee00 = and i32 %v0_edf0, 128
  %v3_ee00 = icmp ne i32 %v2_ee00, 0
  store i1 %v3_ee00, i1* %cpsr_c.global-to-local, align 1
  %v4_ee00 = sdiv i32 %v0_edf0, 256
  store i32 %v4_ee00, i32* %ip.global-to-local, align 4
  %v1_ee04 = or i32 %v4_edf8, 2
  store i32 %v1_ee04, i32* %r3.global-to-local, align 4
  store i32 %v0_edf0, i32* @r4, align 4
  %v1_ee0c = trunc i32 %v4_ee00 to i8
  store i8 %v1_ee0c, i8* bitcast (i32* @global_var_1c27b.157 to i8*), align 4
  %v1_ee10 = trunc i32 %v1_ee04 to i8
  store i8 %v1_ee10, i8* @global_var_1c279.156, align 1
  store i8 %v1_edf0, i8* bitcast (i32* @global_var_1c27a.158 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13bd8.162 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_ee24 = call i32 @function_ea64(i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32 ptrtoint (i32* @global_var_13bd8.162 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13b50.164 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_ee34 = call i32 @function_ea64(i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32 ptrtoint ([5 x i8]* @global_var_13b50.164 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13b58.166 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ee44 = call i32 @function_ea64(i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32 ptrtoint ([9 x i8]* @global_var_13b58.166 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_13b64.168 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_13b64.168 to i32), i32* %r1.global-to-local, align 4
  %v5_ee54 = call i32 @function_ea64(i32 ptrtoint ([7 x i8]* @global_var_13b64.168 to i32), i32 ptrtoint ([7 x i8]* @global_var_13b64.168 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_13b6c.170 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13bd8.162 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_ee64 = call i32 @function_ea64(i32 ptrtoint ([8 x i8]* @global_var_13b6c.170 to i32), i32 ptrtoint (i32* @global_var_13bd8.162 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13b74.172 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ee74 = call i32 @function_ea64(i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32 ptrtoint ([9 x i8]* @global_var_13b74.172 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_13b80.174 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13b80.174 to i32), i32* %r1.global-to-local, align 4
  %v5_ee84 = call i32 @function_ea64(i32 ptrtoint ([6 x i8]* @global_var_13b80.174 to i32), i32 ptrtoint ([6 x i8]* @global_var_13b80.174 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13b88.176 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ee94 = call i32 @function_ea64(i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32 ptrtoint ([6 x i8]* @global_var_13b88.176 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_13b90.178 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13b90.178 to i32), i32* %r1.global-to-local, align 4
  %v5_eea4 = call i32 @function_ea64(i32 ptrtoint ([8 x i8]* @global_var_13b90.178 to i32), i32 ptrtoint ([8 x i8]* @global_var_13b90.178 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13b6c.170 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_eeb4 = call i32 @function_ea64(i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32 ptrtoint ([8 x i8]* @global_var_13b6c.170 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13b98.180 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_eec4 = call i32 @function_ea64(i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32 ptrtoint (i32* @global_var_13b98.180 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13ba8.182 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_eed4 = call i32 @function_ea64(i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), i32 ptrtoint ([6 x i8]* @global_var_13ba8.182 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_13bb0.184 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13bb0.184 to i32), i32* %r1.global-to-local, align 4
  %v5_eee4 = call i32 @function_ea64(i32 ptrtoint ([5 x i8]* @global_var_13bb0.184 to i32), i32 ptrtoint ([5 x i8]* @global_var_13bb0.184 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_13bb0.184 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13ba8.182 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_eef4 = call i32 @function_ea64(i32 ptrtoint ([5 x i8]* @global_var_13bb0.184 to i32), i32 ptrtoint ([6 x i8]* @global_var_13ba8.182 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_13b6c.170 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13bb8.186 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ef04 = call i32 @function_ea64(i32 ptrtoint ([8 x i8]* @global_var_13b6c.170 to i32), i32 ptrtoint (i32* @global_var_13bb8.186 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_13b6c.170 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13bc4.188 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ef14 = call i32 @function_ea64(i32 ptrtoint ([8 x i8]* @global_var_13b6c.170 to i32), i32 ptrtoint (i32* @global_var_13bc4.188 to i32), i32 15)
  %v2_ef1c = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_ef1c, i32* %r0.global-to-local, align 4
  %v2_ef20 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_ef20, i32* %r1.global-to-local, align 4
  %tmp296 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_ef2c

dec_label_pc_ef2c:                                ; preds = %dec_label_pc_f6ac, %dec_label_pc_ed60
  %v0_f2d0 = phi i32 [ %v2_ef1c, %dec_label_pc_ed60 ], [ %stack_var_-1872.2, %dec_label_pc_f6ac ]
  %stack_var_-1868.0 = phi i8 [ %v5_ed48.le, %dec_label_pc_ed60 ], [ %stack_var_-1868.2, %dec_label_pc_f6ac ]
  %stack_var_-1876.0 = phi i8* [ %tmp296, %dec_label_pc_ed60 ], [ %stack_var_-1876.2, %dec_label_pc_f6ac ]
  store i32 ptrtoint (i32* @global_var_1c288.126 to i32), i32* %r2.global-to-local, align 4
  %v2_ef30 = load i32, i32* @global_var_1c288.126, align 4
  store i32 %v2_ef30, i32* %r8.global-to-local, align 4
  %v0_ef34 = load i32, i32* @fp, align 4
  %v3_ef34 = icmp uge i32 %v0_ef34, %v2_ef30
  store i1 %v3_ef34, i1* %cpsr_c.global-to-local, align 1
  %v9_ef34 = icmp eq i32 %v0_ef34, %v2_ef30
  store i1 %v9_ef34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef34, label %dec_label_pc_f260, label %dec_label_pc_ef3c

dec_label_pc_ef3c:                                ; preds = %dec_label_pc_ef2c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_f234 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_ef48

dec_label_pc_ef48:                                ; preds = %.thread66.dec_label_pc_ef48_crit_edge, %dec_label_pc_ef3c
  %v0_ef48 = phi i32 [ %v0_ef48.pre, %.thread66.dec_label_pc_ef48_crit_edge ], [ 0, %dec_label_pc_ef3c ]
  store i32 %v0_ef48, i32* %stack_var_-92, align 4
  %v0_ef58 = call i32 @function_e72c()
  %v1_ef58 = trunc i32 %v0_ef58 to i8
  store i32 %v0_ef58, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c2d0.49 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c258.143 to i32), i32* %lr.global-to-local, align 4
  %v2_ef64 = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_ef64, i32* %r2.global-to-local, align 4
  %v2_ef68 = and i32 %v0_ef58, 128
  %v3_ef68 = icmp ne i32 %v2_ef68, 0
  store i1 %v3_ef68, i1* %cpsr_c.global-to-local, align 1
  %v4_ef68 = sdiv i32 %v0_ef58, 256
  store i32 %v4_ef68, i32* %r3.global-to-local, align 4
  %v1_ef6c = trunc i32 %v4_ef68 to i8
  store i8 %v1_ef6c, i8* bitcast (i32* @global_var_1c25d.149 to i8*), align 4
  store i32 %v2_ef64, i32* @global_var_1c264.189, align 4
  store i8 %v1_ef58, i8* bitcast (i32* @global_var_1c25c.154 to i8*), align 4
  br label %dec_label_pc_ef78

dec_label_pc_ef78:                                ; preds = %dec_label_pc_f0d0, %dec_label_pc_efa8, %dec_label_pc_f104, %dec_label_pc_f0f8, %dec_label_pc_f0ec, %dec_label_pc_f0e0, %.thread51, %.thread35, %.thread31, %.thread27, %bb322, %bb321, %bb320, %bb319, %bb318, %bb317, %bb316, %bb315, %bb314, %bb313, %dec_label_pc_f044, %dec_label_pc_f03c, %bb307, %dec_label_pc_f00c, %dec_label_pc_efe8, %bb300, %dec_label_pc_efb8, %bb299, %dec_label_pc_efa0, %bb298, %bb324, %dec_label_pc_ef48
  %v0_ef78 = call i32 @function_e72c()
  store i32 %v0_ef78, i32* %r0.global-to-local, align 4
  %v1_ef7c = urem i32 %v0_ef78, 256
  store i32 %v1_ef7c, i32* %r1.global-to-local, align 4
  %v3_ef80 = udiv i32 %v0_ef78, 256
  store i32 %v3_ef80, i32* %r3.global-to-local, align 4
  %v3_ef84 = udiv i32 %v0_ef78, 65536
  store i32 %v3_ef84, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef88 = icmp eq i32 %v1_ef7c, 0
  store i1 %v2_ef88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef88, label %bb298, label %bb297

bb297:                                            ; preds = %dec_label_pc_ef78
  %v3_ef8c = icmp ugt i32 %v1_ef7c, 126
  store i1 %v3_ef8c, i1* %cpsr_c.global-to-local, align 1
  %v8_ef8c = icmp eq i32 %v1_ef7c, 127
  store i1 %v8_ef8c, i1* %cpsr_z.global-to-local, align 1
  br label %bb298

bb298:                                            ; preds = %dec_label_pc_ef78, %bb297
  %v0_ef9c = phi i1 [ true, %dec_label_pc_ef78 ], [ %v8_ef8c, %bb297 ]
  %v1_ef90 = urem i32 %v3_ef80, 256
  store i32 %v1_ef90, i32* %ip.global-to-local, align 4
  %v1_ef94 = urem i32 %v3_ef84, 256
  store i32 %v1_ef94, i32* %r2.global-to-local, align 4
  %v1_ef98 = and i32 %v0_ef78, 8388608
  %v2_ef98 = icmp ne i32 %v1_ef98, 0
  store i1 %v2_ef98, i1* %cpsr_c.global-to-local, align 1
  %v3_ef98 = udiv i32 %v0_ef78, 16777216
  store i32 %v3_ef98, i32* %r0.global-to-local, align 4
  br i1 %v0_ef9c, label %dec_label_pc_ef78, label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %bb298
  %v2_efa0 = icmp ugt i32 %v1_ef7c, 2
  store i1 %v2_efa0, i1* %cpsr_c.global-to-local, align 1
  %v7_efa0 = icmp eq i32 %v1_ef7c, 3
  store i1 %v7_efa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efa0, label %dec_label_pc_ef78, label %dec_label_pc_efa8

dec_label_pc_efa8:                                ; preds = %dec_label_pc_efa0
  %v1_efa8 = add nsw i32 %v1_ef7c, -15
  store i32 %v1_efa8, i32* %r3.global-to-local, align 4
  %v2_efac = icmp ugt i32 %v1_ef7c, 55
  store i1 %v2_efac, i1* %cpsr_c.global-to-local, align 1
  %v7_efac = icmp eq i32 %v1_ef7c, 56
  store i1 %v7_efac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efac, label %dec_label_pc_ef78, label %bb299

bb299:                                            ; preds = %dec_label_pc_efa8
  %v3_efb0 = icmp ne i32 %v1_efa8, 0
  store i1 %v3_efb0, i1* %cpsr_c.global-to-local, align 1
  %v8_efb0 = icmp eq i32 %v1_efa8, 1
  store i1 %v8_efb0, i1* %cpsr_z.global-to-local, align 1
  %v2_efb4 = xor i1 %v3_efb0, true
  %v3_efb4 = or i1 %v8_efb0, %v2_efb4
  br i1 %v3_efb4, label %dec_label_pc_ef78, label %dec_label_pc_efb8

dec_label_pc_efb8:                                ; preds = %bb299
  %v2_efb8 = icmp ugt i32 %v1_ef7c, 9
  store i1 %v2_efb8, i1* %cpsr_c.global-to-local, align 1
  %v7_efb8 = icmp eq i32 %v1_ef7c, 10
  store i1 %v7_efb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efb8, label %dec_label_pc_ef78, label %dec_label_pc_efc0

dec_label_pc_efc0:                                ; preds = %dec_label_pc_efb8
  %v2_efc0 = icmp ugt i32 %v1_ef7c, 191
  store i1 %v2_efc0, i1* %cpsr_c.global-to-local, align 1
  %v7_efc0 = icmp eq i32 %v1_ef7c, 192
  store i1 %v7_efc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efc0, label %bb300, label %dec_label_pc_efcc

bb300:                                            ; preds = %dec_label_pc_efc0
  %v3_efc4 = icmp ugt i32 %v1_ef90, 167
  store i1 %v3_efc4, i1* %cpsr_c.global-to-local, align 1
  %v8_efc4 = icmp eq i32 %v1_ef90, 168
  store i1 %v8_efc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_efc4, label %dec_label_pc_ef78, label %dec_label_pc_efcc

dec_label_pc_efcc:                                ; preds = %dec_label_pc_efc0, %bb300
  %v7_efcc = icmp eq i32 %v1_ef7c, 172
  %.373 = zext i1 %v7_efcc to i32
  store i32 %.373, i32* %r3.global-to-local, align 4
  %v2_efd8 = icmp ugt i32 %v1_ef90, 14
  store i1 %v2_efd8, i1* %cpsr_c.global-to-local, align 1
  %v7_efd8 = icmp eq i32 %v1_ef90, 15
  store i1 %v7_efd8, i1* %cpsr_z.global-to-local, align 1
  %v2_efdc = xor i1 %v2_efd8, true
  %v3_efdc = or i1 %v7_efd8, %v2_efdc
  br i1 %v3_efdc, label %.thread11, label %bb303

.thread11:                                        ; preds = %dec_label_pc_efcc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eff0

bb303:                                            ; preds = %dec_label_pc_efcc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efe0 = icmp eq i1 %v7_efcc, false
  store i1 %v2_efe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_efe0, label %dec_label_pc_eff0, label %dec_label_pc_efe8

dec_label_pc_efe8:                                ; preds = %bb303
  %v2_efe8 = icmp ugt i32 %v1_ef90, 30
  store i1 %v2_efe8, i1* %cpsr_c.global-to-local, align 1
  %v7_efe8 = icmp eq i32 %v1_ef90, 31
  store i1 %v7_efe8, i1* %cpsr_z.global-to-local, align 1
  %v2_efec = xor i1 %v2_efe8, true
  %v3_efec = or i1 %v7_efe8, %v2_efec
  br i1 %v3_efec, label %dec_label_pc_ef78, label %dec_label_pc_eff0

dec_label_pc_eff0:                                ; preds = %.thread11, %dec_label_pc_efe8, %bb303
  %v7_eff0 = icmp eq i32 %v1_ef7c, 100
  %.374 = zext i1 %v7_eff0 to i32
  store i32 %.374, i32* %r3.global-to-local, align 4
  %v2_effc = icmp ugt i32 %v1_ef90, 62
  store i1 %v2_effc, i1* %cpsr_c.global-to-local, align 1
  %v7_effc = icmp eq i32 %v1_ef90, 63
  store i1 %v7_effc, i1* %cpsr_z.global-to-local, align 1
  %v2_f000 = xor i1 %v2_effc, true
  %v3_f000 = or i1 %v7_effc, %v2_f000
  br i1 %v3_f000, label %.thread16, label %bb306

.thread16:                                        ; preds = %dec_label_pc_eff0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f014

bb306:                                            ; preds = %dec_label_pc_eff0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f004 = icmp eq i1 %v7_eff0, false
  store i1 %v2_f004, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f004, label %dec_label_pc_f014, label %dec_label_pc_f00c

dec_label_pc_f00c:                                ; preds = %bb306
  %v2_f00c = icmp ugt i32 %v1_ef90, 125
  store i1 %v2_f00c, i1* %cpsr_c.global-to-local, align 1
  %v7_f00c = icmp eq i32 %v1_ef90, 126
  store i1 %v7_f00c, i1* %cpsr_z.global-to-local, align 1
  %v2_f010 = xor i1 %v2_f00c, true
  %v3_f010 = or i1 %v7_f00c, %v2_f010
  br i1 %v3_f010, label %dec_label_pc_ef78, label %dec_label_pc_f014

dec_label_pc_f014:                                ; preds = %.thread16, %dec_label_pc_f00c, %bb306
  %v2_f014 = icmp ugt i32 %v1_ef7c, 168
  store i1 %v2_f014, i1* %cpsr_c.global-to-local, align 1
  %v7_f014 = icmp eq i32 %v1_ef7c, 169
  store i1 %v7_f014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f014, label %bb307, label %dec_label_pc_f020

bb307:                                            ; preds = %dec_label_pc_f014
  %v3_f018 = icmp eq i32 %v1_ef90, 255
  store i1 %v3_f018, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f018, label %dec_label_pc_ef78, label %dec_label_pc_f020

dec_label_pc_f020:                                ; preds = %dec_label_pc_f014, %bb307
  %v7_f020 = icmp eq i32 %v1_ef7c, 198
  %.375 = zext i1 %v7_f020 to i32
  store i32 %.375, i32* %r3.global-to-local, align 4
  %v2_f02c = icmp ugt i32 %v1_ef90, 16
  store i1 %v2_f02c, i1* %cpsr_c.global-to-local, align 1
  %v7_f02c = icmp eq i32 %v1_ef90, 17
  store i1 %v7_f02c, i1* %cpsr_z.global-to-local, align 1
  %v2_f030 = xor i1 %v2_f02c, true
  %v3_f030 = or i1 %v7_f02c, %v2_f030
  br i1 %v3_f030, label %.thread22, label %bb310

.thread22:                                        ; preds = %dec_label_pc_f020
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f044

bb310:                                            ; preds = %dec_label_pc_f020
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f034 = icmp eq i1 %v7_f020, false
  store i1 %v2_f034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f034, label %dec_label_pc_f044, label %dec_label_pc_f03c

dec_label_pc_f03c:                                ; preds = %bb310
  %v2_f03c = icmp ugt i32 %v1_ef90, 18
  store i1 %v2_f03c, i1* %cpsr_c.global-to-local, align 1
  %v7_f03c = icmp eq i32 %v1_ef90, 19
  store i1 %v7_f03c, i1* %cpsr_z.global-to-local, align 1
  %v2_f040 = xor i1 %v2_f03c, true
  %v3_f040 = or i1 %v7_f03c, %v2_f040
  br i1 %v3_f040, label %dec_label_pc_ef78, label %dec_label_pc_f044

dec_label_pc_f044:                                ; preds = %.thread22, %dec_label_pc_f03c, %bb310
  %v2_f044 = icmp ugt i32 %v1_ef7c, 222
  store i1 %v2_f044, i1* %cpsr_c.global-to-local, align 1
  %v7_f044 = icmp eq i32 %v1_ef7c, 223
  store i1 %v7_f044, i1* %cpsr_z.global-to-local, align 1
  %v2_f048 = xor i1 %v7_f044, true
  %v3_f048 = and i1 %v2_f044, %v2_f048
  br i1 %v3_f048, label %dec_label_pc_ef78, label %dec_label_pc_f04c

dec_label_pc_f04c:                                ; preds = %dec_label_pc_f044
  %v7_f04c = icmp eq i32 %v1_ef7c, 106
  %.376 = zext i1 %v7_f04c to i32
  store i32 %.376, i32* @lr, align 4
  %v2_f058 = icmp ugt i32 %v1_ef90, 185
  store i1 %v2_f058, i1* %cpsr_c.global-to-local, align 1
  %v7_f058 = icmp eq i32 %v1_ef90, 186
  store i1 %v7_f058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f058, label %bb313, label %dec_label_pc_f064

bb313:                                            ; preds = %dec_label_pc_f04c
  %v2_f04c = icmp ugt i32 %v1_ef7c, 105
  store i1 %v2_f04c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f04c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f04c, label %dec_label_pc_ef78, label %dec_label_pc_f064

dec_label_pc_f064:                                ; preds = %dec_label_pc_f04c, %bb313
  %v2_f064 = icmp ugt i32 %v1_ef90, 186
  store i1 %v2_f064, i1* %cpsr_c.global-to-local, align 1
  %v7_f064 = icmp eq i32 %v1_ef90, 187
  store i1 %v7_f064, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f064, label %.thread27, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_f064
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f078

.thread27:                                        ; preds = %dec_label_pc_f064
  store i32 %.376, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f070 = icmp eq i1 %v7_f04c, false
  store i1 %v2_f070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f070, label %dec_label_pc_f078, label %dec_label_pc_ef78

dec_label_pc_f078:                                ; preds = %.thread28, %.thread27
  %v2_f078 = icmp ugt i32 %v1_ef90, 184
  store i1 %v2_f078, i1* %cpsr_c.global-to-local, align 1
  %v7_f078 = icmp eq i32 %v1_ef90, 185
  store i1 %v7_f078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f078, label %.thread31, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_f078
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f08c

.thread31:                                        ; preds = %dec_label_pc_f078
  store i32 %.376, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f084 = icmp eq i1 %v7_f04c, false
  store i1 %v2_f084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f084, label %dec_label_pc_f08c, label %dec_label_pc_ef78

dec_label_pc_f08c:                                ; preds = %.thread32, %.thread31
  %v2_f08c = icmp ugt i32 %v1_ef90, 183
  store i1 %v2_f08c, i1* %cpsr_c.global-to-local, align 1
  %v7_f08c = icmp eq i32 %v1_ef90, 184
  store i1 %v7_f08c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f08c, label %.thread35, label %.thread36

.thread36:                                        ; preds = %dec_label_pc_f08c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f0a0

.thread35:                                        ; preds = %dec_label_pc_f08c
  store i32 %.376, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f098 = icmp eq i1 %v7_f04c, false
  store i1 %v2_f098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f098, label %dec_label_pc_f0a0, label %dec_label_pc_ef78

dec_label_pc_f0a0:                                ; preds = %.thread36, %.thread35
  %v2_f0a0 = icmp ugt i32 %v1_ef7c, 149
  store i1 %v2_f0a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0a0 = icmp eq i32 %v1_ef7c, 150
  store i1 %v7_f0a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0a0, label %bb314, label %dec_label_pc_f0ac

bb314:                                            ; preds = %dec_label_pc_f0a0
  %v3_f0a4 = icmp ugt i32 %v1_ef90, 30
  store i1 %v3_f0a4, i1* %cpsr_c.global-to-local, align 1
  %v8_f0a4 = icmp eq i32 %v1_ef90, 31
  store i1 %v8_f0a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0a4, label %dec_label_pc_ef78, label %dec_label_pc_f0ac

dec_label_pc_f0ac:                                ; preds = %dec_label_pc_f0a0, %bb314
  %v2_f0ac = icmp ugt i32 %v1_ef7c, 48
  store i1 %v2_f0ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f0ac = icmp eq i32 %v1_ef7c, 49
  store i1 %v7_f0ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0ac, label %bb315, label %dec_label_pc_f0b8

bb315:                                            ; preds = %dec_label_pc_f0ac
  %v3_f0b0 = icmp ugt i32 %v1_ef90, 50
  store i1 %v3_f0b0, i1* %cpsr_c.global-to-local, align 1
  %v8_f0b0 = icmp eq i32 %v1_ef90, 51
  store i1 %v8_f0b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0b0, label %dec_label_pc_ef78, label %dec_label_pc_f0b8

dec_label_pc_f0b8:                                ; preds = %dec_label_pc_f0ac, %bb315
  %v2_f0b8 = icmp ugt i32 %v1_ef7c, 177
  store i1 %v2_f0b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0b8 = icmp eq i32 %v1_ef7c, 178
  store i1 %v7_f0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0b8, label %bb316, label %dec_label_pc_f0c4

bb316:                                            ; preds = %dec_label_pc_f0b8
  %v3_f0bc = icmp ugt i32 %v1_ef90, 61
  store i1 %v3_f0bc, i1* %cpsr_c.global-to-local, align 1
  %v8_f0bc = icmp eq i32 %v1_ef90, 62
  store i1 %v8_f0bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0bc, label %dec_label_pc_ef78, label %dec_label_pc_f0c4

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f0b8, %bb316
  %v2_f0c4 = icmp ugt i32 %v1_ef7c, 159
  store i1 %v2_f0c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0c4 = icmp eq i32 %v1_ef7c, 160
  store i1 %v7_f0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0c4, label %bb317, label %dec_label_pc_f0d0

bb317:                                            ; preds = %dec_label_pc_f0c4
  %v3_f0c8 = icmp ugt i32 %v1_ef90, 12
  store i1 %v3_f0c8, i1* %cpsr_c.global-to-local, align 1
  %v8_f0c8 = icmp eq i32 %v1_ef90, 13
  store i1 %v8_f0c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0c8, label %dec_label_pc_ef78, label %dec_label_pc_f0d0

dec_label_pc_f0d0:                                ; preds = %dec_label_pc_f0c4, %bb317
  %v1_f0d0 = add nsw i32 %v1_ef7c, -6
  store i32 %v1_f0d0, i32* %r3.global-to-local, align 4
  %v2_f0d4 = icmp ugt i32 %v1_ef7c, 10
  store i1 %v2_f0d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0d4 = icmp eq i32 %v1_ef7c, 11
  store i1 %v7_f0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0d4, label %dec_label_pc_ef78, label %bb318

bb318:                                            ; preds = %dec_label_pc_f0d0
  %v3_f0d8 = icmp ne i32 %v1_f0d0, 0
  store i1 %v3_f0d8, i1* %cpsr_c.global-to-local, align 1
  %v8_f0d8 = icmp eq i32 %v1_f0d0, 1
  store i1 %v8_f0d8, i1* %cpsr_z.global-to-local, align 1
  %v2_f0dc = xor i1 %v3_f0d8, true
  %v3_f0dc = or i1 %v8_f0d8, %v2_f0dc
  br i1 %v3_f0dc, label %dec_label_pc_ef78, label %dec_label_pc_f0e0

dec_label_pc_f0e0:                                ; preds = %bb318
  %v2_f0e0 = icmp ugt i32 %v1_ef7c, 21
  store i1 %v2_f0e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0e0 = icmp eq i32 %v1_ef7c, 22
  store i1 %v7_f0e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0e0, label %dec_label_pc_ef78, label %bb319

bb319:                                            ; preds = %dec_label_pc_f0e0
  %v3_f0e4 = icmp ugt i32 %v1_ef7c, 20
  store i1 %v3_f0e4, i1* %cpsr_c.global-to-local, align 1
  %v8_f0e4 = icmp eq i32 %v1_ef7c, 21
  store i1 %v8_f0e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0e4, label %dec_label_pc_ef78, label %dec_label_pc_f0ec

dec_label_pc_f0ec:                                ; preds = %bb319
  %v2_f0ec = icmp ugt i32 %v1_ef7c, 27
  store i1 %v2_f0ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f0ec = icmp eq i32 %v1_ef7c, 28
  store i1 %v7_f0ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0ec, label %dec_label_pc_ef78, label %bb320

bb320:                                            ; preds = %dec_label_pc_f0ec
  %v3_f0f0 = icmp ugt i32 %v1_ef7c, 25
  store i1 %v3_f0f0, i1* %cpsr_c.global-to-local, align 1
  %v8_f0f0 = icmp eq i32 %v1_ef7c, 26
  store i1 %v8_f0f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0f0, label %dec_label_pc_ef78, label %dec_label_pc_f0f8

dec_label_pc_f0f8:                                ; preds = %bb320
  %v2_f0f8 = icmp ugt i32 %v1_ef7c, 29
  store i1 %v2_f0f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f8 = icmp eq i32 %v1_ef7c, 30
  store i1 %v7_f0f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0f8, label %dec_label_pc_ef78, label %bb321

bb321:                                            ; preds = %dec_label_pc_f0f8
  %v3_f0fc = icmp ugt i32 %v1_ef7c, 28
  store i1 %v3_f0fc, i1* %cpsr_c.global-to-local, align 1
  %v8_f0fc = icmp eq i32 %v1_ef7c, 29
  store i1 %v8_f0fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0fc, label %dec_label_pc_ef78, label %dec_label_pc_f104

dec_label_pc_f104:                                ; preds = %bb321
  %v2_f104 = icmp ugt i32 %v1_ef7c, 54
  store i1 %v2_f104, i1* %cpsr_c.global-to-local, align 1
  %v7_f104 = icmp eq i32 %v1_ef7c, 55
  store i1 %v7_f104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f104, label %dec_label_pc_ef78, label %bb322

bb322:                                            ; preds = %dec_label_pc_f104
  %v3_f108 = icmp ugt i32 %v1_ef7c, 32
  store i1 %v3_f108, i1* %cpsr_c.global-to-local, align 1
  %v8_f108 = icmp eq i32 %v1_ef7c, 33
  store i1 %v8_f108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f108, label %dec_label_pc_ef78, label %dec_label_pc_f110

dec_label_pc_f110:                                ; preds = %bb322
  %v2_f110 = icmp ugt i32 %v1_ef7c, 214
  store i1 %v2_f110, i1* %cpsr_c.global-to-local, align 1
  %v7_f110 = icmp eq i32 %v1_ef7c, 215
  store i1 %v7_f110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f110, label %.thread51, label %bb323

bb323:                                            ; preds = %dec_label_pc_f110
  %v3_f114 = icmp ugt i32 %v1_ef7c, 213
  store i1 %v3_f114, i1* %cpsr_c.global-to-local, align 1
  %v8_f114 = icmp eq i32 %v1_ef7c, 214
  store i1 %v8_f114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f114, label %bb324, label %dec_label_pc_f124

.thread51:                                        ; preds = %dec_label_pc_f110
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ef78

bb324:                                            ; preds = %bb323
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ef78

dec_label_pc_f124:                                ; preds = %bb323
  store i32 0, i32* @r4, align 4
  %v5_f130 = call i32 @llvm.bswap.i32(i32 %v0_ef78)
  store i32 %v5_f130, i32* %r3.global-to-local, align 4
  %tmp325 = and i32 %v0_ef78, 65280
  %tmp326 = call i32 @llvm.bswap.i32(i32 %tmp325)
  %tmp327 = and i32 %v0_ef78, 16711680
  %tmp328 = call i32 @llvm.bswap.i32(i32 %tmp327)
  %v3_f13c = mul nuw i32 %v3_ef98, 16777216
  %v3_f140 = udiv i32 %tmp326, 256
  %v4_f144 = mul nuw nsw i32 %tmp328, 256
  %tmp329 = and i32 %v0_ef78, 32768
  %v3_f148 = icmp ne i32 %tmp329, 0
  store i1 %v3_f148, i1* %cpsr_c.global-to-local, align 1
  %v4_f148 = udiv i32 %v5_f130, 16777216
  store i32 ptrtoint (i8** @global_var_1c258.143 to i32), i32* @r0, align 4
  %v5_f148 = or i32 %v4_f148, %v3_f13c
  %v5_f144 = or i32 %v5_f148, %v4_f144
  %v2_f150 = or i32 %v5_f144, %v3_f140
  store i32 %v2_f150, i32* %r2.global-to-local, align 4
  %v5_f154 = trunc i32 %v4_f148 to i8
  store i8 %v5_f154, i8* @global_var_1c268.190, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1c262.191 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c263.192 to i8*), align 4
  %v3_f164 = call i32 @function_d0b8(i32 ptrtoint (i8** @global_var_1c258.143 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1c258.143 to i32), i32* %ip.global-to-local, align 4
  %sext7 = mul i32 %v3_f164, 16777216
  %v1_f16c = sdiv i32 %sext7, 16777216
  store i32 %v1_f16c, i32* %r3.global-to-local, align 4
  %v2_f170 = and i32 %v1_f16c, 128
  %v3_f170 = icmp ne i32 %v2_f170, 0
  store i1 %v3_f170, i1* %cpsr_c.global-to-local, align 1
  %v4_f170 = ashr i32 %sext7, 31
  store i32 %v4_f170, i32* %r2.global-to-local, align 4
  %v1_f174 = trunc i32 %v1_f16c to i8
  store i8 %v1_f174, i8* bitcast (i32* @global_var_1c262.191 to i8*), align 4
  %v1_f178 = trunc i32 %v4_f170 to i8
  store i8 %v1_f178, i8* bitcast (i32* @global_var_1c263.192 to i8*), align 4
  %v3_f17c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f17c, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_f184 = call i32 @function_11120(i32 %v3_f17c, i32 10)
  store i32 %v4_f184, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f188 = icmp eq i32 %v4_f184, 0
  store i1 %v2_f188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f188, label %.thread231, label %bb330

.thread231:                                       ; preds = %dec_label_pc_f124
  store i32 ptrtoint (i32* @global_var_1c26c.147 to i32), i32* @lr, align 4
  br label %.thread61.thread104

bb330:                                            ; preds = %dec_label_pc_f124
  store i32 ptrtoint (i32* @global_var_1c26c.147 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_f198 = load i32, i32* @r4, align 4
  %v2_f198 = trunc i32 %v1_f198 to i8
  store i8 %v2_f198, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1c26c.147 to i32), i32 2) to i8*), align 2
  %v0_f19c.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f19c.pr.pre, label %.thread61.thread104, label %.thread58

.thread58:                                        ; preds = %bb330
  %v1_f19c = load i32, i32* %r3.global-to-local, align 4
  %v2_f19c = trunc i32 %v1_f19c to i8
  %v3_f19c = load i32, i32* %r0.global-to-local, align 4
  %v4_f19c = add i32 %v3_f19c, 3
  %v5_f19c = inttoptr i32 %v4_f19c to i8*
  store i8 %v2_f19c, i8* %v5_f19c, align 1
  %v0_f1a4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1c258.143 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_f1a4.pr.pr, label %.thread64, label %.thread66

.thread61.thread104:                              ; preds = %bb330, %.thread231
  store i32 ptrtoint (i8** @global_var_1c258.143 to i32), i32* %r0.global-to-local, align 4
  br label %.thread64

.thread64:                                        ; preds = %.thread58, %.thread61.thread104
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_f1ac = load i32, i32* @lr, align 4
  %v4_f1ac = add i32 %v3_f1ac, 2
  %v5_f1ac = inttoptr i32 %v4_f1ac to i8*
  store i8 9, i8* %v5_f1ac, align 1
  %v0_f1b0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f1b0.pr.pr, label %bb331, label %.thread66

bb331:                                            ; preds = %.thread64
  %v1_f1b0 = load i32, i32* %r2.global-to-local, align 4
  %v2_f1b0 = trunc i32 %v1_f1b0 to i8
  %v3_f1b0 = load i32, i32* @lr, align 4
  %v4_f1b0 = add i32 %v3_f1b0, 3
  %v5_f1b0 = inttoptr i32 %v4_f1b0 to i8*
  store i8 %v2_f1b0, i8* %v5_f1b0, align 1
  br label %.thread66

.thread66:                                        ; preds = %.thread58, %.thread64, %bb331
  %v4_f1b4 = load i8, i8* @global_var_1c268.190, align 1
  %v5_f1b4 = sext i8 %v4_f1b4 to i32
  store i32 %v5_f1b4, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c26c.147 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c26c.147 to i32), i32* @r1, align 4
  store i8 %v4_f1b4, i8* @global_var_1c270.193, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_f1cc = load i32, i32* %sl.global-to-local, align 4
  %v1_f1cc = trunc i32 %v0_f1cc to i8
  store i8 %v1_f1cc, i8* bitcast (i32* @global_var_1c27c.194 to i8*), align 4
  store i8 %v1_f1cc, i8* bitcast (i32* @global_var_1c27d.195 to i8*), align 4
  %v5_f1d4 = call i32 @function_d114(i32 ptrtoint (i8** @global_var_1c258.143 to i32), i32 ptrtoint (i32* @global_var_1c26c.147 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_f1d4, 16777216
  %v1_f1dc = sdiv i32 %sext, 16777216
  %v3_f1e4 = ashr i32 %sext, 31
  %v2_f1e8 = load i32, i32* @global_var_1c26c.147, align 4
  %v1_f1f0 = trunc i32 %v3_f1e4 to i8
  store i8 %v1_f1f0, i8* bitcast (i32* @global_var_1c27d.195 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_f204 = load i8, i8* @global_var_1c268.190, align 1
  %v4_f204 = sext i8 %v3_f204 to i32
  store i32 %v4_f204, i32* @r4, align 4
  %v2_f208 = load i32, i32* @global_var_1c2f0.141, align 4
  store i32 %v2_f208, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c26c.147 to i32), i32* %ip.global-to-local, align 4
  %v1_f218 = and i32 %v2_f1e8, 8388608
  %v2_f218 = icmp ne i32 %v1_f218, 0
  store i1 %v2_f218, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1c258.143 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_f22c = trunc i32 %v1_f1dc to i8
  store i8 %v1_f22c, i8* bitcast (i32* @global_var_1c27c.194 to i8*), align 4
  store i32 %v2_f234, i32* %lr.global-to-local, align 4
  %v8_f244 = call i32 @function_11b4c(i32 %v2_f208, i32* bitcast (i8** @global_var_1c258.143 to i32*), i32 40, i32 16384, i32 %v2_f234, i32 16)
  store i32 %v8_f244, i32* %r0.global-to-local, align 4
  %v3_f248 = load i32, i32* %stack_var_-52, align 4
  %v1_f24c = add i32 %v3_f248, 1
  store i32 %v1_f24c, i32* %r3.global-to-local, align 4
  %v3_f250 = icmp ugt i32 %v1_f24c, 383
  store i1 %v3_f250, i1* %cpsr_c.global-to-local, align 1
  %v8_f250 = icmp eq i32 %v1_f24c, 384
  store i1 %v8_f250, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f24c, i32* %stack_var_-52, align 4
  %v5_f258 = icmp slt i32 %v1_f24c, 384
  br i1 %v5_f258, label %.thread66.dec_label_pc_ef48_crit_edge, label %dec_label_pc_f25c

.thread66.dec_label_pc_ef48_crit_edge:            ; preds = %.thread66
  %v0_ef48.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_ef48

dec_label_pc_f25c:                                ; preds = %.thread66
  %v0_f25c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f25c, i32* @fp, align 4
  br label %dec_label_pc_f260

dec_label_pc_f260:                                ; preds = %dec_label_pc_ef2c, %dec_label_pc_f25c
  %v0_f260 = call i32 @function_118a0()
  store i32 %v0_f260, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v0_f260, i32* @sb, align 4
  %v6_f298 = inttoptr i32 %v0_f2d0 to i32*
  %v1_f2c0 = add i32 %v0_f2d0, 16
  %v2_f2c0 = inttoptr i32 %v1_f2c0 to i32*
  %v4_f2dc = ptrtoint i8* %stack_var_-1876.0 to i32
  %v1_f2e4 = add i32 %v4_f2dc, 1
  %v2_f2e4 = inttoptr i32 %v1_f2e4 to i8*
  %v1_f308 = add i32 %v4_f2dc, 2
  %v2_f308 = inttoptr i32 %v1_f308 to i8*
  %v1_f30c = add i32 %v4_f2dc, 3
  %v2_f30c = inttoptr i32 %v1_f30c to i8*
  %v4_f310 = sext i8 %stack_var_-1868.0 to i32
  %v1_f324 = add i32 %v4_f2dc, 13
  %v2_f324 = inttoptr i32 %v1_f324 to i8*
  %v1_f3f0 = bitcast i8* %stack_var_-1876.0 to i32*
  %v1_f2d0 = add i32 %v0_f2d0, 9
  %v2_f2d0 = inttoptr i32 %v1_f2d0 to i8*
  %v1_f348 = add i32 %v4_f2dc, 8
  %v2_f348 = inttoptr i32 %v1_f348 to i32*
  %v1_f388 = add i32 %v0_f2d0, 12
  %v2_f388 = inttoptr i32 %v1_f388 to i32*
  br label %dec_label_pc_f26c

dec_label_pc_f26c:                                ; preds = %dec_label_pc_f348, %dec_label_pc_f340, %dec_label_pc_f338, %dec_label_pc_f304, %dec_label_pc_f2f4, %dec_label_pc_f2d0, %dec_label_pc_f2b8, %dec_label_pc_f330, %dec_label_pc_f320, %dec_label_pc_f2b0, %dec_label_pc_f3e8, %dec_label_pc_f260
  %v1_f270 = phi i32 [ %v0_f260, %dec_label_pc_f260 ], [ %v1_f270.pre.pre, %dec_label_pc_f3e8 ], [ %v0_f2a4, %dec_label_pc_f2b0 ], [ %v0_f2a4, %dec_label_pc_f320 ], [ %v0_f2a4, %dec_label_pc_f330 ], [ %v0_f2a4, %dec_label_pc_f2b8 ], [ %v0_f2a4, %dec_label_pc_f2d0 ], [ %v0_f2a4, %dec_label_pc_f2f4 ], [ %v0_f2a4, %dec_label_pc_f304 ], [ %v0_f2a4, %dec_label_pc_f338 ], [ %v0_f2a4, %dec_label_pc_f340 ], [ %v0_f2a4, %dec_label_pc_f348 ]
  %v2_f270 = inttoptr i32 %v1_f270 to i32*
  store i32 0, i32* %v2_f270, align 4
  %v2_f27c = load i32, i32* @global_var_1c2f0.141, align 4
  store i32 %v2_f27c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_f2d0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_f298 = call i32 @function_11aec(i32 %v2_f27c, i32* %v6_f298, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_f298, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f29c = icmp eq i32 %v7_f298, 0
  store i1 %v2_f29c, i1* %cpsr_z.global-to-local, align 1
  %tmp332 = icmp slt i32 %v7_f298, 1
  br i1 %tmp332, label %dec_label_pc_f4b4, label %dec_label_pc_f2a4

dec_label_pc_f2a4:                                ; preds = %dec_label_pc_f26c
  %v0_f2a4 = load i32, i32* @sb, align 4
  %v1_f2a4 = inttoptr i32 %v0_f2a4 to i32*
  %v2_f2a4 = load i32, i32* %v1_f2a4, align 4
  store i32 %v2_f2a4, i32* %r3.global-to-local, align 4
  %v2_f2a8 = icmp ugt i32 %v2_f2a4, 10
  store i1 %v2_f2a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2a8 = icmp eq i32 %v2_f2a4, 11
  store i1 %v7_f2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2a8, label %dec_label_pc_f4b4, label %dec_label_pc_f2b0

dec_label_pc_f2b0:                                ; preds = %dec_label_pc_f2a4
  %v2_f2b0 = icmp ugt i32 %v7_f298, 38
  store i1 %v2_f2b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2b0 = icmp eq i32 %v7_f298, 39
  store i1 %v7_f2b0, i1* %cpsr_z.global-to-local, align 1
  %v2_f2b4 = xor i1 %v2_f2b0, true
  %v3_f2b4 = or i1 %v7_f2b0, %v2_f2b4
  br i1 %v3_f2b4, label %dec_label_pc_f26c, label %dec_label_pc_f2b8

dec_label_pc_f2b8:                                ; preds = %dec_label_pc_f2b0
  store i32 %v0_f2d0, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c2d0.49 to i32), i32* %r0.global-to-local, align 4
  %v3_f2c0 = load i32, i32* %v2_f2c0, align 4
  store i32 %v3_f2c0, i32* %r2.global-to-local, align 4
  %v2_f2c4 = load i32, i32* @global_var_1c2d0.49, align 4
  store i32 %v2_f2c4, i32* %r3.global-to-local, align 4
  %v3_f2c8 = icmp uge i32 %v3_f2c0, %v2_f2c4
  store i1 %v3_f2c8, i1* %cpsr_c.global-to-local, align 1
  %v9_f2c8 = icmp eq i32 %v3_f2c0, %v2_f2c4
  store i1 %v9_f2c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f2c8, label %dec_label_pc_f2d0, label %dec_label_pc_f26c

dec_label_pc_f2d0:                                ; preds = %dec_label_pc_f2b8
  %v3_f2d0 = load i8, i8* %v2_f2d0, align 1
  %v4_f2d0 = zext i8 %v3_f2d0 to i32
  store i32 %v4_f2d0, i32* %r3.global-to-local, align 4
  %v2_f2d4 = icmp ugt i8 %v3_f2d0, 5
  store i1 %v2_f2d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2d4 = icmp eq i8 %v3_f2d0, 6
  store i1 %v7_f2d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2d4, label %dec_label_pc_f2dc, label %dec_label_pc_f26c

dec_label_pc_f2dc:                                ; preds = %dec_label_pc_f2d0
  store i32 %v4_f2dc, i32* %r1.global-to-local, align 4
  %v2_f2e0 = load i8, i8* %stack_var_-1876.0, align 1
  %v3_f2e0 = zext i8 %v2_f2e0 to i32
  store i32 %v3_f2e0, i32* %r2.global-to-local, align 4
  %v3_f2e4 = load i8, i8* %v2_f2e4, align 1
  %v4_f2e4 = zext i8 %v3_f2e4 to i32
  store i32 %v4_f2e4, i32* %r3.global-to-local, align 4
  %v4_f2e8 = mul nuw nsw i32 %v4_f2e4, 256
  %v5_f2e8 = or i32 %v4_f2e8, %v3_f2e0
  store i32 %v5_f2e8, i32* %r2.global-to-local, align 4
  %v2_f2ec = icmp ugt i32 %v5_f2e8, 5887
  store i1 %v2_f2ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f2ec = icmp eq i32 %v5_f2e8, 5888
  store i1 %v7_f2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2ec, label %dec_label_pc_f304, label %dec_label_pc_f2f4

dec_label_pc_f2f4:                                ; preds = %dec_label_pc_f2dc
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_f2fc = icmp ugt i32 %v5_f2e8, 4872
  store i1 %v3_f2fc, i1* %cpsr_c.global-to-local, align 1
  %v9_f2fc = icmp eq i32 %v5_f2e8, 4873
  store i1 %v9_f2fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f2fc, label %dec_label_pc_f304, label %dec_label_pc_f26c

dec_label_pc_f304:                                ; preds = %dec_label_pc_f2f4, %dec_label_pc_f2dc
  store i32 %v4_f2dc, i32* %r2.global-to-local, align 4
  %v3_f308 = load i8, i8* %v2_f308, align 1
  %v4_f308 = zext i8 %v3_f308 to i32
  store i32 %v4_f308, i32* %r3.global-to-local, align 4
  %v3_f30c = load i8, i8* %v2_f30c, align 1
  %v4_f30c = zext i8 %v3_f30c to i32
  store i32 %v4_f30c, i32* %r2.global-to-local, align 4
  store i32 %v4_f310, i32* %ip.global-to-local, align 4
  %v4_f314 = mul nuw nsw i32 %v4_f30c, 256
  %v5_f314 = or i32 %v4_f314, %v4_f308
  store i32 %v5_f314, i32* %r3.global-to-local, align 4
  %v3_f318 = icmp uge i32 %v5_f314, %v4_f310
  store i1 %v3_f318, i1* %cpsr_c.global-to-local, align 1
  %v9_f318 = icmp eq i32 %v5_f314, %v4_f310
  store i1 %v9_f318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f318, label %dec_label_pc_f320, label %dec_label_pc_f26c

dec_label_pc_f320:                                ; preds = %dec_label_pc_f304
  store i32 %v4_f2dc, i32* %lr.global-to-local, align 4
  %v3_f324 = load i8, i8* %v2_f324, align 1
  %v4_f324 = zext i8 %v3_f324 to i32
  store i32 %v4_f324, i32* %r3.global-to-local, align 4
  %v1_f328 = and i32 %v4_f324, 2
  %v2_f328 = icmp eq i32 %v1_f328, 0
  store i1 %v2_f328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f328, label %dec_label_pc_f26c, label %dec_label_pc_f330

dec_label_pc_f330:                                ; preds = %dec_label_pc_f320
  %v1_f330 = and i32 %v4_f324, 16
  %v2_f330 = icmp eq i32 %v1_f330, 0
  store i1 %v2_f330, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f330, label %dec_label_pc_f26c, label %dec_label_pc_f338

dec_label_pc_f338:                                ; preds = %dec_label_pc_f330
  %v1_f338 = and i32 %v4_f324, 4
  %v2_f338 = icmp eq i32 %v1_f338, 0
  store i1 %v2_f338, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f338, label %dec_label_pc_f340, label %dec_label_pc_f26c

dec_label_pc_f340:                                ; preds = %dec_label_pc_f338
  %tmp479 = urem i8 %v3_f324, 2
  %v2_f340 = icmp eq i8 %tmp479, 0
  store i1 %v2_f340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f340, label %dec_label_pc_f348, label %dec_label_pc_f26c

dec_label_pc_f348:                                ; preds = %dec_label_pc_f340
  %v3_f348 = load i32, i32* %v2_f348, align 4
  %v2_f364 = call i32 @llvm.bswap.i32(i32 %v3_f348)
  %v1_f368 = add i32 %v2_f364, -1
  %v1_f36c = udiv i32 %v1_f368, 256
  %v3_f370 = and i32 %v1_f36c, 65280
  %v1_f374 = and i32 %v1_f368, 65280
  store i32 %v1_f374, i32* %r2.global-to-local, align 4
  %v3_f378 = mul i32 %v1_f368, 16777216
  %v4_f37c = udiv i32 %v1_f368, 16777216
  %v5_f37c = or i32 %v3_f370, %v4_f37c
  store i32 %v5_f37c, i32* %r1.global-to-local, align 4
  store i32 %v0_f2d0, i32* %r3.global-to-local, align 4
  %v4_f384 = mul nuw nsw i32 %v1_f374, 256
  %v5_f384 = or i32 %v4_f384, %v3_f378
  store i32 %v5_f384, i32* %r0.global-to-local, align 4
  %v3_f388 = load i32, i32* %v2_f388, align 4
  store i32 %v3_f388, i32* %r2.global-to-local, align 4
  %v2_f38c = call i32 @llvm.bswap.i32(i32 %v1_f368)
  store i32 %v2_f38c, i32* %ip.global-to-local, align 4
  %v3_f390 = icmp uge i32 %v2_f38c, %v3_f388
  store i1 %v3_f390, i1* %cpsr_c.global-to-local, align 1
  %v9_f390 = icmp eq i32 %v2_f38c, %v3_f388
  store i1 %v9_f390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f390, label %dec_label_pc_f398, label %dec_label_pc_f26c

dec_label_pc_f398:                                ; preds = %dec_label_pc_f348
  %v0_f398 = load i32, i32* @r4, align 4
  %v2_f398 = icmp ugt i32 %v0_f398, 254
  store i1 %v2_f398, i1* %cpsr_c.global-to-local, align 1
  %v7_f398 = icmp eq i32 %v0_f398, 255
  store i1 %v7_f398, i1* %cpsr_z.global-to-local, align 1
  %v8_f39c = icmp sgt i32 %v0_f398, 255
  br i1 %v8_f39c, label %dec_label_pc_f4b4, label %dec_label_pc_f3a0

dec_label_pc_f3a0:                                ; preds = %dec_label_pc_f398
  store i32 ptrtoint (i32* @global_var_1c2ec.139 to i32), i32* %lr.global-to-local, align 4
  %v3_f3a4 = mul i32 %v0_f398, 256
  store i32 %v3_f3a4, i32* %r2.global-to-local, align 4
  %v2_f3a8 = load i32, i32* @global_var_1c2ec.139, align 4
  store i32 %v2_f3a8, i32* %r1.global-to-local, align 4
  %v2_f3b0 = mul i32 %v0_f398, 288
  store i32 %v2_f3b0, i32* %r3.global-to-local, align 4
  %v2_f3b4 = add i32 %v2_f3a8, %v2_f3b0
  store i32 %v2_f3b4, i32* @r0, align 4
  %v1_f3b8 = add i32 %v2_f3b4, 12
  %v2_f3b8 = inttoptr i32 %v1_f3b8 to i32*
  %v3_f3b8 = load i32, i32* %v2_f3b8, align 4
  store i32 %v3_f3b8, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3bc = icmp eq i32 %v3_f3b8, 0
  store i1 %v2_f3bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3bc, label %dec_label_pc_f3e8, label %dec_label_pc_f3c8.preheader

dec_label_pc_f3c8.preheader:                      ; preds = %dec_label_pc_f3a0
  %v2_f3c0 = add i32 %v2_f3b4, 288
  store i32 %v2_f3c0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f3c8

dec_label_pc_f3c8:                                ; preds = %dec_label_pc_f3c8.preheader, %dec_label_pc_f3d4
  %v0_f3d4 = phi i32 [ %v2_f3c0, %dec_label_pc_f3c8.preheader ], [ %v1_f3e0, %dec_label_pc_f3d4 ]
  %v0_f3c8 = phi i32 [ %v0_f398, %dec_label_pc_f3c8.preheader ], [ %v1_f3c8, %dec_label_pc_f3d4 ]
  %v1_f3c8 = add i32 %v0_f3c8, 1
  store i32 %v1_f3c8, i32* @r4, align 4
  %v7_f3cc = icmp eq i32 %v1_f3c8, 256
  br i1 %v7_f3cc, label %dec_label_pc_f4b4.loopexit, label %dec_label_pc_f3d4

dec_label_pc_f3d4:                                ; preds = %dec_label_pc_f3c8
  store i32 %v0_f3d4, i32* @r0, align 4
  %v1_f3d8 = add i32 %v0_f3d4, 12
  %v2_f3d8 = inttoptr i32 %v1_f3d8 to i32*
  %v3_f3d8 = load i32, i32* %v2_f3d8, align 4
  %v2_f3dc = icmp eq i32 %v3_f3d8, 0
  %v1_f3e0 = add i32 %v0_f3d4, 288
  store i32 %v1_f3e0, i32* %r3.global-to-local, align 4
  br i1 %v2_f3dc, label %dec_label_pc_f3e8.loopexit, label %dec_label_pc_f3c8

dec_label_pc_f3e8.loopexit:                       ; preds = %dec_label_pc_f3d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f3e8

dec_label_pc_f3e8:                                ; preds = %dec_label_pc_f3e8.loopexit, %dec_label_pc_f3a0
  %v1_f3e8 = phi i32 [ %v0_f3d4, %dec_label_pc_f3e8.loopexit ], [ %v2_f3b4, %dec_label_pc_f3a0 ]
  %v2_f3e8 = add i32 %v1_f3e8, 16
  %v3_f3e8 = inttoptr i32 %v2_f3e8 to i32*
  store i32 %v3_f388, i32* %v3_f3e8, align 4
  store i32 %v4_f2dc, i32* %r1.global-to-local, align 4
  %v2_f3f0 = load i32, i32* %v1_f3f0, align 4
  store i32 %v2_f3f0, i32* %r2.global-to-local, align 4
  %v1_f3f4 = and i32 %v2_f3f0, 128
  %v2_f3f4 = icmp ne i32 %v1_f3f4, 0
  store i1 %v2_f3f4, i1* %cpsr_c.global-to-local, align 1
  %v3_f3f4 = sdiv i32 %v2_f3f0, 256
  store i32 %v3_f3f4, i32* %r3.global-to-local, align 4
  %v1_f3f8 = trunc i32 %v3_f3f4 to i8
  %v2_f3f8 = load i32, i32* @r0, align 4
  %v3_f3f8 = add i32 %v2_f3f8, 21
  %v4_f3f8 = inttoptr i32 %v3_f3f8 to i8*
  store i8 %v1_f3f8, i8* %v4_f3f8, align 1
  %v0_f3fc = load i32, i32* %r2.global-to-local, align 4
  %v1_f3fc = trunc i32 %v0_f3fc to i8
  %v2_f3fc = load i32, i32* @r0, align 4
  %v3_f3fc = add i32 %v2_f3fc, 20
  %v4_f3fc = inttoptr i32 %v3_f3fc to i8*
  store i8 %v1_f3fc, i8* %v4_f3fc, align 1
  %v0_f400 = call i32 @function_e990()
  store i32 %v0_f400, i32* %r0.global-to-local, align 4
  %v1_f270.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_f26c

dec_label_pc_f408:                                ; preds = %dec_label_pc_102a4
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f418 = load i32, i32* @r4, align 4
  store i32 %v0_f418, i32* %r0.global-to-local, align 4
  %v0_f41c = load i32, i32* @r5, align 4
  store i32 %v0_f41c, i32* %stack_var_-56, align 4
  %v6_f420 = call i32 @function_11b20(i32 %v0_f418, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_fce0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f434 = load i32, i32* @r4, align 4
  store i32 %v0_f434, i32* %r0.global-to-local, align 4
  %v5_f438 = call i32 @function_11b20(i32 %v0_f434, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_f440 = load i32, i32* @r6, align 4
  store i32 %v0_f440, i32* %r2.global-to-local, align 4
  %v2_f444 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f44c = load i32, i32* @r4, align 4
  store i32 %v0_f44c, i32* %r0.global-to-local, align 4
  %v5_f450 = call i32 @function_11b20(i32 %v0_f44c, i32* nonnull %stack_var_-38, i32 %v0_f440, i32 16384)
  %v0_f454 = load i32, i32* %sl.global-to-local, align 4
  %v1_f454 = add i32 %v0_f454, 12
  store i32 %v1_f454, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f460 = load i32, i32* @r4, align 4
  store i32 %v0_f460, i32* %r0.global-to-local, align 4
  %v4_f464 = inttoptr i32 %v1_f454 to i32*
  %v5_f464 = call i32 @function_11b20(i32 %v0_f460, i32* %v4_f464, i32 1, i32 16384)
  store i32 %v5_f464, i32* %r0.global-to-local, align 4
  %v0_f468 = load i32, i32* %sl.global-to-local, align 4
  %v1_f468 = inttoptr i32 %v0_f468 to i32*
  %v2_f468 = load i32, i32* %v1_f468, align 4
  store i32 %v2_f468, i32* %r1.global-to-local, align 4
  %v1_f46c = add i32 %v0_f468, 12
  %v2_f46c = inttoptr i32 %v1_f46c to i8*
  %v3_f46c = load i8, i8* %v2_f46c, align 1
  %v4_f46c = zext i8 %v3_f46c to i32
  store i32 %v4_f46c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f474 = load i32, i32* @r4, align 4
  store i32 %v0_f474, i32* %r0.global-to-local, align 4
  %v4_f478 = inttoptr i32 %v2_f468 to i32*
  %v5_f478 = call i32 @function_11b20(i32 %v0_f474, i32* %v4_f478, i32 %v4_f46c, i32 16384)
  %v0_f47c = load i32, i32* %sl.global-to-local, align 4
  %v1_f47c = add i32 %v0_f47c, 13
  store i32 %v1_f47c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f488 = load i32, i32* @r4, align 4
  store i32 %v0_f488, i32* %r0.global-to-local, align 4
  %v4_f48c = inttoptr i32 %v1_f47c to i32*
  %v5_f48c = call i32 @function_11b20(i32 %v0_f488, i32* %v4_f48c, i32 1, i32 16384)
  %v0_f490 = load i32, i32* @r4, align 4
  store i32 %v0_f490, i32* %r0.global-to-local, align 4
  %v0_f494 = load i32, i32* %sl.global-to-local, align 4
  %v1_f494 = add i32 %v0_f494, 13
  %v2_f494 = inttoptr i32 %v1_f494 to i8*
  %v3_f494 = load i8, i8* %v2_f494, align 1
  %v4_f494 = zext i8 %v3_f494 to i32
  store i32 %v4_f494, i32* %r2.global-to-local, align 4
  %v1_f498 = add i32 %v0_f494, 4
  %v2_f498 = inttoptr i32 %v1_f498 to i32*
  %v3_f498 = load i32, i32* %v2_f498, align 4
  store i32 %v3_f498, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f4a0 = inttoptr i32 %v3_f498 to i32*
  %v5_f4a0 = call i32 @function_11b20(i32 %v0_f490, i32* %v4_f4a0, i32 %v4_f494, i32 16384)
  %v0_f4a4 = load i32, i32* @r4, align 4
  store i32 %v0_f4a4, i32* %r0.global-to-local, align 4
  %v1_f4a8 = call i32 @function_112cc(i32 %v0_f4a4)
  store i32 %v1_f4a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f4ac

dec_label_pc_f4ac:                                ; preds = %dec_label_pc_10288, %dec_label_pc_ecc4, %dec_label_pc_f59c, %dec_label_pc_f408
  %stack_var_-1872.1 = phi i32 [ %tmp260, %dec_label_pc_ecc4 ], [ %stack_var_-1872.2, %dec_label_pc_10288 ], [ %stack_var_-1872.2, %dec_label_pc_f408 ], [ %tmp260, %dec_label_pc_f59c ]
  %stack_var_-1868.1 = phi i8 [ %tmp261, %dec_label_pc_ecc4 ], [ %stack_var_-1868.2, %dec_label_pc_10288 ], [ %stack_var_-1868.2, %dec_label_pc_f408 ], [ %tmp261, %dec_label_pc_f59c ]
  %stack_var_-1876.1 = phi i8* [ %tmp289, %dec_label_pc_ecc4 ], [ %stack_var_-1876.2, %dec_label_pc_10288 ], [ %stack_var_-1876.2, %dec_label_pc_f408 ], [ %tmp289, %dec_label_pc_f59c ]
  %v0_f4ac = load i32, i32* @r5, align 4
  store i32 %v0_f4ac, i32* %r0.global-to-local, align 4
  %v1_f4b0 = call i32 @function_12638(i32 %v0_f4ac)
  store i32 %v1_f4b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f4b4

dec_label_pc_f4b4.loopexit:                       ; preds = %dec_label_pc_f3c8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f4b4

dec_label_pc_f4b4:                                ; preds = %dec_label_pc_f398, %dec_label_pc_f2a4, %dec_label_pc_f26c, %dec_label_pc_f4b4.loopexit, %dec_label_pc_f4ac
  %stack_var_-1872.2 = phi i32 [ %stack_var_-1872.1, %dec_label_pc_f4ac ], [ %v0_f2d0, %dec_label_pc_f4b4.loopexit ], [ %v0_f2d0, %dec_label_pc_f26c ], [ %v0_f2d0, %dec_label_pc_f2a4 ], [ %v0_f2d0, %dec_label_pc_f398 ]
  %stack_var_-1868.2 = phi i8 [ %stack_var_-1868.1, %dec_label_pc_f4ac ], [ %stack_var_-1868.0, %dec_label_pc_f4b4.loopexit ], [ %stack_var_-1868.0, %dec_label_pc_f26c ], [ %stack_var_-1868.0, %dec_label_pc_f2a4 ], [ %stack_var_-1868.0, %dec_label_pc_f398 ]
  %stack_var_-1876.2 = phi i8* [ %stack_var_-1876.1, %dec_label_pc_f4ac ], [ %stack_var_-1876.0, %dec_label_pc_f4b4.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_f26c ], [ %stack_var_-1876.0, %dec_label_pc_f2a4 ], [ %stack_var_-1876.0, %dec_label_pc_f398 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_f4c8432 = load i32, i32* @sp, align 4
  %v3_f4c8433 = add i32 %v2_f4c8432, 1664
  %v4_f4c8434 = inttoptr i32 %v3_f4c8433 to i32*
  store i32 0, i32* %v4_f4c8434, align 4
  br label %dec_label_pc_f4bc.dec_label_pc_f4bc_crit_edge

dec_label_pc_f4bc.dec_label_pc_f4bc_crit_edge:    ; preds = %dec_label_pc_f4b4, %dec_label_pc_f4bc.dec_label_pc_f4bc_crit_edge
  %v0_f4bc.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_f4c8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f4bc = add i32 %v0_f4bc.pre, 1664
  store i32 %v1_f4bc, i32* %ip.global-to-local, align 4
  %v1_f4c0 = add i32 %v0_f4bc.pre, 4
  store i32 %v1_f4c0, i32* %r3.global-to-local, align 4
  %v7_f4c4 = icmp eq i32 %v1_f4c0, 128
  %v2_f4c8 = load i32, i32* @sp, align 4
  %v3_f4c8 = add i32 %v2_f4c8, %v1_f4bc
  %v4_f4c8 = inttoptr i32 %v3_f4c8 to i32*
  store i32 %v0_f4c8.pre, i32* %v4_f4c8, align 4
  br i1 %v7_f4c4, label %dec_label_pc_f4d0, label %dec_label_pc_f4bc.dec_label_pc_f4bc_crit_edge

dec_label_pc_f4d0:                                ; preds = %dec_label_pc_f4bc.dec_label_pc_f4bc_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f4d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f4d4426 = add i32 %v0_f4d0, 1536
  store i32 %v1_f4d4426, i32* %lr.global-to-local, align 4
  %v1_f4d8427 = add i32 %v0_f4d0, 4
  store i32 %v1_f4d8427, i32* %r3.global-to-local, align 4
  %v7_f4dc428 = icmp eq i32 %v1_f4d8427, 128
  %v2_f4e0429 = load i32, i32* @sp, align 4
  %v3_f4e0430 = add i32 %v2_f4e0429, %v1_f4d4426
  %v4_f4e0431 = inttoptr i32 %v3_f4e0430 to i32*
  store i32 %v0_f4d0, i32* %v4_f4e0431, align 4
  br i1 %v7_f4dc428, label %dec_label_pc_f4e8, label %dec_label_pc_f4d4.dec_label_pc_f4d4_crit_edge

dec_label_pc_f4d4.dec_label_pc_f4d4_crit_edge:    ; preds = %dec_label_pc_f4d0, %dec_label_pc_f4d4.dec_label_pc_f4d4_crit_edge
  %v0_f4d4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_f4e0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f4d4 = add i32 %v0_f4d4.pre, 1536
  store i32 %v1_f4d4, i32* %lr.global-to-local, align 4
  %v1_f4d8 = add i32 %v0_f4d4.pre, 4
  store i32 %v1_f4d8, i32* %r3.global-to-local, align 4
  %v7_f4dc = icmp eq i32 %v1_f4d8, 128
  %v2_f4e0 = load i32, i32* @sp, align 4
  %v3_f4e0 = add i32 %v2_f4e0, %v1_f4d4
  %v4_f4e0 = inttoptr i32 %v3_f4e0 to i32*
  store i32 %v0_f4e0.pre, i32* %v4_f4e0, align 4
  br i1 %v7_f4dc, label %dec_label_pc_f4e8, label %dec_label_pc_f4d4.dec_label_pc_f4d4_crit_edge

dec_label_pc_f4e8:                                ; preds = %dec_label_pc_f4d4.dec_label_pc_f4d4_crit_edge, %dec_label_pc_f4d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f4e8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f4e8, i32* @r6, align 4
  store i32 %v0_f4e8, i32* @r5, align 4
  store i32 %v0_f4e8, i32* @r7, align 4
  store i32 %v0_f4e8, i32* %stack_var_-52, align 4
  %v2_f5bc = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_f564

dec_label_pc_f4fc:                                ; preds = %dec_label_pc_f58c, %dec_label_pc_f564
  %storemerge244 = phi i32 [ 30, %dec_label_pc_f564 ], [ 5, %dec_label_pc_f58c ]
  store i32 %storemerge244, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c288.126 to i32), i32* %r2.global-to-local, align 4
  %v2_f500 = load i32, i32* @global_var_1c288.126, align 4
  store i32 %v2_f500, i32* %r3.global-to-local, align 4
  %v1_f504 = add i32 %v2_f578, 8
  %v2_f504 = inttoptr i32 %v1_f504 to i32*
  %v3_f504 = load i32, i32* %v2_f504, align 4
  store i32 %v3_f504, i32* %r2.global-to-local, align 4
  %v2_f508 = sub i32 %v2_f500, %v3_f504
  store i32 %v2_f508, i32* %r3.global-to-local, align 4
  %v3_f50c = icmp uge i32 %v2_f508, %storemerge244
  store i1 %v3_f50c, i1* %cpsr_c.global-to-local, align 1
  %v9_f50c = icmp eq i32 %v2_f508, %storemerge244
  store i1 %v9_f50c, i1* %cpsr_z.global-to-local, align 1
  %v2_f510 = xor i1 %v9_f50c, true
  %v3_f510 = and i1 %v3_f50c, %v2_f510
  br i1 %v3_f510, label %dec_label_pc_f5e0, label %dec_label_pc_f514

dec_label_pc_f514:                                ; preds = %dec_label_pc_f4fc
  store i1 %v2_f580, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f580, i1* %cpsr_z.global-to-local, align 1
  %v1_f5ac = add i32 %v2_f578, 4
  %v2_f5ac = inttoptr i32 %v1_f5ac to i32*
  %v3_f5ac = load i32, i32* %v2_f5ac, align 4
  br i1 %v7_f580, label %dec_label_pc_f5ac, label %dec_label_pc_f51c

dec_label_pc_f51c:                                ; preds = %dec_label_pc_f514
  store i32 %v3_f5ac, i32* %ip.global-to-local, align 4
  %v3_f524 = udiv i32 %v3_f5ac, 32
  store i32 %v2_f5bc, i32* %r0.global-to-local, align 4
  %v3_f52c = mul nuw nsw i32 %v3_f524, 4
  %v2_f530 = add i32 %v3_f52c, %v2_f5bc
  store i32 %v2_f530, i32* %r3.global-to-local, align 4
  %v1_f534 = add i32 %v2_f530, -184
  %v2_f534 = inttoptr i32 %v1_f534 to i32*
  %v3_f534 = load i32, i32* %v2_f534, align 4
  %v1_f538 = urem i32 %v3_f5ac, 32
  store i32 %v1_f538, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_f540 = shl i32 1, %v1_f538
  %v8_f540 = or i32 %v3_f534, %v7_f540
  store i32 %v8_f540, i32* %r2.global-to-local, align 4
  store i32 %v8_f540, i32* %v2_f534, align 4
  %v0_f548 = load i32, i32* @r6, align 4
  %v1_f548 = load i32, i32* %ip.global-to-local, align 4
  %v3_f548 = icmp uge i32 %v0_f548, %v1_f548
  store i1 %v3_f548, i1* %cpsr_c.global-to-local, align 1
  %v9_f548 = icmp eq i32 %v0_f548, %v1_f548
  store i1 %v9_f548, i1* %cpsr_z.global-to-local, align 1
  %v5_f54c = icmp slt i32 %v0_f548, %v1_f548
  br i1 %v5_f54c, label %bb334, label %bb335

bb334:                                            ; preds = %dec_label_pc_f51c
  store i32 %v1_f548, i32* @r6, align 4
  br label %bb335

bb335:                                            ; preds = %dec_label_pc_f58c, %dec_label_pc_f620, %dec_label_pc_f614, %bb337, %dec_label_pc_f51c, %bb334
  %v3_f550 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f550, i32* %r3.global-to-local, align 4
  %v1_f554 = add i32 %v3_f550, 1
  store i32 %v1_f554, i32* %r2.global-to-local, align 4
  %v2_f558 = icmp ugt i32 %v1_f554, 254
  store i1 %v2_f558, i1* %cpsr_c.global-to-local, align 1
  %v7_f558 = icmp eq i32 %v1_f554, 255
  store i1 %v7_f558, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f554, i32* %stack_var_-52, align 4
  %v8_f560 = icmp sgt i32 %v1_f554, 255
  br i1 %v8_f560, label %dec_label_pc_f62c, label %dec_label_pc_f564

dec_label_pc_f564:                                ; preds = %bb335, %dec_label_pc_f4e8
  %v0_f570 = phi i32 [ %v1_f554, %bb335 ], [ %v0_f4e8, %dec_label_pc_f4e8 ]
  store i32 ptrtoint (i32* @global_var_1c2ec.139 to i32), i32* %r0.global-to-local, align 4
  %v3_f568 = mul i32 %v0_f570, 256
  store i32 %v3_f568, i32* %r3.global-to-local, align 4
  %v2_f56c = load i32, i32* @global_var_1c2ec.139, align 4
  store i32 %v2_f56c, i32* %r1.global-to-local, align 4
  %v2_f574 = mul i32 %v0_f570, 288
  store i32 %v2_f574, i32* %r2.global-to-local, align 4
  %v2_f578 = add i32 %v2_f56c, %v2_f574
  store i32 %v2_f578, i32* @r4, align 4
  %v1_f57c = add i32 %v2_f578, 12
  %v2_f57c = inttoptr i32 %v1_f57c to i32*
  %v3_f57c = load i32, i32* %v2_f57c, align 4
  store i32 %v3_f57c, i32* %ip.global-to-local, align 4
  %v2_f580 = icmp ne i32 %v3_f57c, 0
  store i1 %v2_f580, i1* %cpsr_c.global-to-local, align 1
  %v7_f580 = icmp eq i32 %v3_f57c, 1
  store i1 %v7_f580, i1* %cpsr_z.global-to-local, align 1
  %v2_f584 = xor i1 %v7_f580, true
  %v3_f584 = and i1 %v2_f580, %v2_f584
  br i1 %v3_f584, label %dec_label_pc_f4fc, label %dec_label_pc_f58c

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f564
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f58c = icmp eq i32 %v3_f57c, 0
  store i1 %v2_f58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f58c, label %bb335, label %dec_label_pc_f4fc

dec_label_pc_f59c:                                ; preds = %dec_label_pc_ecec
  store i32 ptrtoint (i32* @global_var_1c2f0.141 to i32), i32* %r2.global-to-local, align 4
  %v2_f5a0 = load i32, i32* @global_var_1c2f0.141, align 4
  store i32 %v2_f5a0, i32* %r0.global-to-local, align 4
  %v1_f5a4 = call i32 @function_112cc(i32 %v2_f5a0)
  store i32 %v1_f5a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f4ac

dec_label_pc_f5ac:                                ; preds = %dec_label_pc_f514
  store i32 %v3_f5ac, i32* %r0.global-to-local, align 4
  %v3_f5b4 = udiv i32 %v3_f5ac, 32
  %v3_f5b8 = mul nuw nsw i32 %v3_f5b4, 4
  store i32 %v2_f5bc, i32* %lr.global-to-local, align 4
  %v2_f5c0 = add i32 %v3_f5b8, %v2_f5bc
  store i32 %v2_f5c0, i32* %r3.global-to-local, align 4
  %v1_f5c4 = add i32 %v2_f5c0, -312
  %v2_f5c4 = inttoptr i32 %v1_f5c4 to i32*
  %v3_f5c4 = load i32, i32* %v2_f5c4, align 4
  %v1_f5c8 = urem i32 %v3_f5ac, 32
  store i32 %v1_f5c8, i32* %r1.global-to-local, align 4
  %v7_f5cc = shl i32 1, %v1_f5c8
  %v8_f5cc = or i32 %v3_f5c4, %v7_f5cc
  store i32 %v8_f5cc, i32* %r2.global-to-local, align 4
  %v0_f5d0 = load i32, i32* @r5, align 4
  %v3_f5d0 = icmp uge i32 %v0_f5d0, %v3_f5ac
  store i1 %v3_f5d0, i1* %cpsr_c.global-to-local, align 1
  %v9_f5d0 = icmp eq i32 %v0_f5d0, %v3_f5ac
  store i1 %v9_f5d0, i1* %cpsr_z.global-to-local, align 1
  %v5_f5d4 = icmp slt i32 %v0_f5d0, %v3_f5ac
  br i1 %v5_f5d4, label %bb336, label %bb337

bb336:                                            ; preds = %dec_label_pc_f5ac
  store i32 %v3_f5ac, i32* @r5, align 4
  br label %bb337

bb337:                                            ; preds = %dec_label_pc_f5ac, %bb336
  store i32 %v8_f5cc, i32* %v2_f5c4, align 4
  br label %bb335

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f4fc
  %v1_f5e0 = add i32 %v2_f578, 4
  %v2_f5e0 = inttoptr i32 %v1_f5e0 to i32*
  %v3_f5e0 = load i32, i32* %v2_f5e0, align 4
  store i32 %v3_f5e0, i32* %r0.global-to-local, align 4
  %v1_f5e4 = call i32 @function_112cc(i32 %v3_f5e0)
  store i32 %v1_f5e4, i32* %r0.global-to-local, align 4
  %v0_f5e8 = load i32, i32* @r4, align 4
  %v1_f5e8 = add i32 %v0_f5e8, 12
  %v2_f5e8 = inttoptr i32 %v1_f5e8 to i32*
  %v3_f5e8 = load i32, i32* %v2_f5e8, align 4
  store i32 %v3_f5e8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f5f0 = icmp ugt i32 %v3_f5e8, 1
  store i1 %v2_f5f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5f0 = icmp eq i32 %v3_f5e8, 2
  store i1 %v7_f5f0, i1* %cpsr_z.global-to-local, align 1
  %v2_f5f4 = add i32 %v0_f5e8, 4
  %v3_f5f4 = inttoptr i32 %v2_f5f4 to i32*
  store i32 -1, i32* %v3_f5f4, align 4
  %v2_f5f8 = xor i1 %v2_f5f0, true
  %v3_f5f8 = or i1 %v7_f5f0, %v2_f5f8
  br i1 %v3_f5f8, label %dec_label_pc_f620, label %dec_label_pc_f5fc

dec_label_pc_f5fc:                                ; preds = %dec_label_pc_f5e0
  %v0_f5fc = load i32, i32* @r4, align 4
  %v1_f5fc = add i32 %v0_f5fc, 284
  %v2_f5fc = inttoptr i32 %v1_f5fc to i8*
  %v3_f5fc = load i8, i8* %v2_f5fc, align 1
  %v4_f5fc = zext i8 %v3_f5fc to i32
  %v1_f600 = add nuw nsw i32 %v4_f5fc, 1
  %v1_f604 = urem i32 %v1_f600, 256
  store i32 %v1_f604, i32* %r3.global-to-local, align 4
  %v2_f608 = icmp ugt i32 %v1_f604, 9
  store i1 %v2_f608, i1* %cpsr_c.global-to-local, align 1
  %v7_f608 = icmp eq i32 %v1_f604, 10
  store i1 %v7_f608, i1* %cpsr_z.global-to-local, align 1
  %v1_f60c = trunc i32 %v1_f600 to i8
  store i8 %v1_f60c, i8* %v2_f5fc, align 1
  %v0_f610 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f610, label %dec_label_pc_f620, label %dec_label_pc_f614

dec_label_pc_f614:                                ; preds = %dec_label_pc_f5fc
  %v0_f614 = load i32, i32* @r4, align 4
  store i32 %v0_f614, i32* @r0, align 4
  %v0_f618 = call i32 @function_e990()
  store i32 %v0_f618, i32* %r0.global-to-local, align 4
  br label %bb335

dec_label_pc_f620:                                ; preds = %dec_label_pc_f5fc, %dec_label_pc_f5e0
  %v0_f620 = load i32, i32* @r7, align 4
  %v1_f620 = load i32, i32* @r4, align 4
  %v2_f620 = add i32 %v1_f620, 12
  %v3_f620 = inttoptr i32 %v2_f620 to i32*
  store i32 %v0_f620, i32* %v3_f620, align 4
  %v0_f624 = load i32, i32* @r7, align 4
  %v1_f624 = trunc i32 %v0_f624 to i8
  %v2_f624 = load i32, i32* @r4, align 4
  %v3_f624 = add i32 %v2_f624, 284
  %v4_f624 = inttoptr i32 %v3_f624 to i8*
  store i8 %v1_f624, i8* %v4_f624, align 1
  br label %bb335

dec_label_pc_f62c:                                ; preds = %bb335
  store i32 1, i32* %stack_var_-64, align 4
  %v0_f634 = load i32, i32* @r6, align 4
  %v1_f634 = load i32, i32* @r5, align 4
  %v3_f634 = icmp uge i32 %v0_f634, %v1_f634
  store i1 %v3_f634, i1* %cpsr_c.global-to-local, align 1
  %v9_f634 = icmp eq i32 %v0_f634, %v1_f634
  store i1 %v9_f634, i1* %cpsr_z.global-to-local, align 1
  %v5_f638 = icmp slt i32 %v0_f634, %v1_f634
  %storemerge106 = select i1 %v5_f638, i32 %v1_f634, i32 %v0_f634
  %v2_f640 = ptrtoint i32* %stack_var_-76 to i32
  %v2_f644 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_f644, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f64c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_f64c, i32* %ip.global-to-local, align 4
  %v2_f650 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_f650, i32* %r1.global-to-local, align 4
  %v1_f654 = add i32 %storemerge106, 1
  store i32 %v1_f654, i32* %r0.global-to-local, align 4
  %v5_f660 = call i32 @function_114ec(i32 %v1_f654, i32 %v2_f650, i32 %v2_f644, i32 0, i32 %v2_f64c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_f668 = call i32 @function_1159c(i32* null)
  store i32 ptrtoint (i32* @global_var_1c288.126 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_f668, i32* @global_var_1c288.126, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_fffc = ptrtoint i32* %stack_var_-41 to i32
  %v2_1000c = ptrtoint i32* %stack_var_-73 to i32
  %v2_f7e8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_fce0 = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_f6c0

dec_label_pc_f684:                                ; preds = %dec_label_pc_f6e4, %dec_label_pc_10240
  %v0_f69c = phi i32 [ %v3_f6d8, %dec_label_pc_f6e4 ], [ %v0_f684.pre, %dec_label_pc_10240 ]
  %v3_f684 = udiv i32 %v0_f69c, 32
  %v3_f68c = mul nuw nsw i32 %v3_f684, 4
  store i32 %v2_f5bc, i32* @lr, align 4
  %v2_f694 = add i32 %v3_f68c, %v2_f5bc
  store i32 %v2_f694, i32* %r3.global-to-local, align 4
  %v1_f698 = add i32 %v2_f694, -184
  %v2_f698 = inttoptr i32 %v1_f698 to i32*
  %v3_f698 = load i32, i32* %v2_f698, align 4
  %v1_f69c = urem i32 %v0_f69c, 32
  store i32 %v1_f69c, i32* %r1.global-to-local, align 4
  %v2_f6a0 = add nsw i32 %v1_f69c, -1
  %v3_f6a0 = shl i32 1, %v2_f6a0
  %v4_f6a0 = and i32 %v3_f6a0, %v3_f698
  %v5_f6a0 = icmp ne i32 %v4_f6a0, 0
  store i1 %v5_f6a0, i1* %cpsr_c.global-to-local, align 1
  %v6_f6a0 = lshr i32 %v3_f698, %v1_f69c
  store i32 %v6_f6a0, i32* %r2.global-to-local, align 4
  %v1_f6a4 = urem i32 %v6_f6a0, 2
  %v2_f6a4 = icmp eq i32 %v1_f6a4, 0
  store i1 %v2_f6a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6a4, label %dec_label_pc_f6ac, label %dec_label_pc_f874.preheader

dec_label_pc_f874.preheader:                      ; preds = %dec_label_pc_f684
  %v0_f874127 = load i32, i32* @r6, align 4
  %v1_f874128 = add i32 %v0_f874127, 12
  %v2_f874129 = inttoptr i32 %v1_f874128 to i32*
  %v3_f874130 = load i32, i32* %v2_f874129, align 4
  store i32 %v3_f874130, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f878126132 = icmp eq i32 %v3_f874130, 0
  store i1 %v2_f878126132, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f878126132, label %dec_label_pc_f6ac, label %dec_label_pc_f880.lr.ph

dec_label_pc_f6ac:                                ; preds = %dec_label_pc_f874.loopexit, %dec_label_pc_f878.backedge, %dec_label_pc_f874.preheader, %dec_label_pc_f684, %.thread240, %dec_label_pc_10170, %dec_label_pc_f6c0, %dec_label_pc_10254, %dec_label_pc_101b0
  %v3_f6ac = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f6ac, i32* %r3.global-to-local, align 4
  %v1_f6b0 = add i32 %v3_f6ac, 1
  store i32 %v1_f6b0, i32* %r2.global-to-local, align 4
  %v2_f6b4 = icmp ugt i32 %v1_f6b0, 254
  store i1 %v2_f6b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6b4 = icmp eq i32 %v1_f6b0, 255
  store i1 %v7_f6b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f6b0, i32* %stack_var_-52, align 4
  %v8_f6bc = icmp sgt i32 %v1_f6b0, 255
  br i1 %v8_f6bc, label %dec_label_pc_ef2c, label %dec_label_pc_f6c0

dec_label_pc_f6c0:                                ; preds = %dec_label_pc_f6ac, %dec_label_pc_f62c
  %v0_f6cc = phi i32 [ %v1_f6b0, %dec_label_pc_f6ac ], [ 0, %dec_label_pc_f62c ]
  store i32 ptrtoint (i32* @global_var_1c2ec.139 to i32), i32* %ip.global-to-local, align 4
  %v3_f6c4 = mul i32 %v0_f6cc, 256
  store i32 %v3_f6c4, i32* %r3.global-to-local, align 4
  %v2_f6c8 = load i32, i32* @global_var_1c2ec.139, align 4
  store i32 %v2_f6c8, i32* %r1.global-to-local, align 4
  %v2_f6d0 = mul i32 %v0_f6cc, 288
  store i32 %v2_f6d0, i32* %r2.global-to-local, align 4
  %v2_f6d4 = add i32 %v2_f6c8, %v2_f6d0
  store i32 %v2_f6d4, i32* @r6, align 4
  %v1_f6d8 = add i32 %v2_f6d4, 4
  %v2_f6d8 = inttoptr i32 %v1_f6d8 to i32*
  %v3_f6d8 = load i32, i32* %v2_f6d8, align 4
  store i32 %v3_f6d8, i32* @r4, align 4
  %v2_f6dc = icmp eq i32 %v3_f6d8, -1
  store i1 %v2_f6dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6dc = icmp eq i32 %v3_f6d8, -1
  store i1 %v7_f6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6dc, label %dec_label_pc_f6ac, label %dec_label_pc_f6e4

dec_label_pc_f6e4:                                ; preds = %dec_label_pc_f6c0
  %v3_f6e4 = udiv i32 %v3_f6d8, 32
  %v3_f6ec = mul nuw nsw i32 %v3_f6e4, 4
  store i32 %v2_f5bc, i32* %lr.global-to-local, align 4
  %v2_f6f4 = add i32 %v3_f6ec, %v2_f5bc
  store i32 %v2_f6f4, i32* %r3.global-to-local, align 4
  %v1_f6f8 = add i32 %v2_f6f4, -312
  %v2_f6f8 = inttoptr i32 %v1_f6f8 to i32*
  %v3_f6f8 = load i32, i32* %v2_f6f8, align 4
  %v1_f6fc = urem i32 %v3_f6d8, 32
  store i32 %v1_f6fc, i32* %r1.global-to-local, align 4
  %v2_f700 = add nsw i32 %v1_f6fc, -1
  %v3_f700 = shl i32 1, %v2_f700
  %v4_f700 = and i32 %v3_f6f8, %v3_f700
  %v5_f700 = icmp ne i32 %v4_f700, 0
  store i1 %v5_f700, i1* %cpsr_c.global-to-local, align 1
  %v6_f700 = lshr i32 %v3_f6f8, %v1_f6fc
  store i32 %v6_f700, i32* %r2.global-to-local, align 4
  %v1_f704 = urem i32 %v6_f700, 2
  %v2_f704 = icmp eq i32 %v1_f704, 0
  store i1 %v2_f704, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f704, label %dec_label_pc_f684, label %dec_label_pc_f70c

dec_label_pc_f70c:                                ; preds = %dec_label_pc_f6e4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_fce0, i32* %r3.global-to-local, align 4
  store i32 %v2_f7e8, i32* %ip.global-to-local, align 4
  store i32 %v3_f6d8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_f73c = call i32 @function_11a64(i32 %v3_f6d8, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_f7e8)
  %v3_f740 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f740, i32* %r3.global-to-local, align 4
  %v2_f744 = or i32 %v3_f740, %v6_f73c
  store i32 %v2_f744, i32* %r0.global-to-local, align 4
  %v4_f744 = icmp eq i32 %v2_f744, 0
  store i1 %v4_f744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f744, label %dec_label_pc_f74c, label %dec_label_pc_10254

dec_label_pc_f74c:                                ; preds = %dec_label_pc_f70c
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_f750 = load i32, i32* @r6, align 4
  %v2_f750 = add i32 %v1_f750, 12
  %v3_f750 = inttoptr i32 %v2_f750 to i32*
  store i32 2, i32* %v3_f750, align 4
  %v0_f754 = call i32 @function_e72c()
  store i32 %v0_f754, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c284.132 to i32), i32* %r3.global-to-local, align 4
  %v3_f75c = load i8, i8* @global_var_1c285.133, align 1
  %v4_f75c = zext i8 %v3_f75c to i32
  store i32 %v4_f75c, i32* %r2.global-to-local, align 4
  %v2_f760 = load i8, i8* bitcast (i8** @global_var_1c284.132 to i8*), align 4
  %v3_f760 = zext i8 %v2_f760 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_f764 = mul nuw nsw i32 %v4_f75c, 256
  %v5_f764 = or i32 %v3_f760, %v4_f764
  store i32 %v5_f764, i32* %r1.global-to-local, align 4
  %v2_f768 = call i32 @function_11054(i32 %v0_f754, i32 %v5_f764)
  store i32 ptrtoint (i32* @global_var_1c254.128 to i32), i32* %r3.global-to-local, align 4
  %v2_f770 = load i32, i32* @global_var_1c254.128, align 4
  store i32 %v2_f770, i32* %lr.global-to-local, align 4
  %v1_f778 = load i32, i32* @r5, align 4
  %v9_f778 = icmp eq i32 %v2_f770, %v1_f778
  store i1 %v9_f778, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f77c = urem i32 %v2_f768, 65536
  store i32 %v3_f77c, i32* %r0.global-to-local, align 4
  %v7_f780 = icmp sgt i32 %v2_f770, %v1_f778
  br i1 %v7_f780, label %dec_label_pc_f784, label %dec_label_pc_1023c

dec_label_pc_f784:                                ; preds = %dec_label_pc_f74c
  %v2_f788 = load i32, i32* @global_var_1c280.130, align 4
  store i32 %v2_f788, i32* %r3.global-to-local, align 4
  store i32 %v1_f778, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f7a4

dec_label_pc_f794:                                ; preds = %dec_label_pc_f7bc, %dec_label_pc_f7a4
  %v1_f794 = add i32 %v0_f794, 1
  store i32 %v1_f794, i32* %ip.global-to-local, align 4
  %v3_f798 = icmp uge i32 %v1_f794, %v2_f770
  store i1 %v3_f798, i1* %cpsr_c.global-to-local, align 1
  %v9_f798 = icmp eq i32 %v1_f794, %v2_f770
  store i1 %v9_f798, i1* %cpsr_z.global-to-local, align 1
  %v1_f79c = add i32 %v0_f79c, 16
  store i32 %v1_f79c, i32* %r3.global-to-local, align 4
  br i1 %v9_f798, label %dec_label_pc_1023c, label %dec_label_pc_f7a4

dec_label_pc_f7a4:                                ; preds = %dec_label_pc_f794, %dec_label_pc_f784
  %v0_f794 = phi i32 [ %v1_f794, %dec_label_pc_f794 ], [ %v1_f778, %dec_label_pc_f784 ]
  %v0_f79c = phi i32 [ %v1_f79c, %dec_label_pc_f794 ], [ %v2_f788, %dec_label_pc_f784 ]
  store i32 %v0_f79c, i32* %r1.global-to-local, align 4
  %v1_f7a8 = add i32 %v0_f79c, 9
  %v2_f7a8 = inttoptr i32 %v1_f7a8 to i8*
  %v3_f7a8 = load i8, i8* %v2_f7a8, align 1
  %v4_f7a8 = zext i8 %v3_f7a8 to i32
  store i32 %v4_f7a8, i32* %r2.global-to-local, align 4
  %v1_f7ac = add i32 %v0_f79c, 8
  %v2_f7ac = inttoptr i32 %v1_f7ac to i8*
  %v3_f7ac = load i8, i8* %v2_f7ac, align 1
  %v4_f7ac = zext i8 %v3_f7ac to i32
  %v4_f7b0 = mul nuw nsw i32 %v4_f7a8, 256
  %v5_f7b0 = or i32 %v4_f7ac, %v4_f7b0
  store i32 %v5_f7b0, i32* %r3.global-to-local, align 4
  %v3_f7b4 = icmp uge i32 %v5_f7b0, %v3_f77c
  store i1 %v3_f7b4, i1* %cpsr_c.global-to-local, align 1
  %v9_f7b4 = icmp eq i32 %v5_f7b0, %v3_f77c
  store i1 %v9_f7b4, i1* %cpsr_z.global-to-local, align 1
  %v2_f7b8 = xor i1 %v9_f7b4, true
  %v3_f7b8 = and i1 %v3_f7b4, %v2_f7b8
  br i1 %v3_f7b8, label %dec_label_pc_f794, label %dec_label_pc_f7bc

dec_label_pc_f7bc:                                ; preds = %dec_label_pc_f7a4
  %v1_f7bc = add i32 %v0_f79c, 10
  %v2_f7bc = inttoptr i32 %v1_f7bc to i8*
  %v3_f7bc = load i8, i8* %v2_f7bc, align 1
  %v4_f7bc = zext i8 %v3_f7bc to i32
  store i32 %v4_f7bc, i32* %r3.global-to-local, align 4
  %v1_f7c0 = add i32 %v0_f79c, 11
  %v2_f7c0 = inttoptr i32 %v1_f7c0 to i8*
  %v3_f7c0 = load i8, i8* %v2_f7c0, align 1
  %v4_f7c0 = zext i8 %v3_f7c0 to i32
  store i32 %v4_f7c0, i32* %r2.global-to-local, align 4
  %v4_f7c4 = mul nuw nsw i32 %v4_f7c0, 256
  %v5_f7c4 = or i32 %v4_f7c4, %v4_f7bc
  store i32 %v5_f7c4, i32* %r3.global-to-local, align 4
  %v3_f7c8 = icmp uge i32 %v5_f7c4, %v3_f77c
  store i1 %v3_f7c8, i1* %cpsr_c.global-to-local, align 1
  %v9_f7c8 = icmp eq i32 %v5_f7c4, %v3_f77c
  store i1 %v9_f7c8, i1* %cpsr_z.global-to-local, align 1
  %v2_f7cc = xor i1 %v3_f7c8, true
  %v3_f7cc = or i1 %v9_f7c8, %v2_f7cc
  br i1 %v3_f7cc, label %dec_label_pc_f794, label %dec_label_pc_10240

dec_label_pc_f7d4:                                ; preds = %dec_label_pc_fa3c, %dec_label_pc_fa10, %dec_label_pc_fa58
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f7d8 = call i32 @function_103fc(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f7e0 = call i32 @function_103fc(i32 27)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_f7f0 = call i32 @function_10318(i32 26, i32* nonnull %stack_var_-56)
  store i32 %v3_f7f0, i32* @r4, align 4
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_f804 = call i32 @function_10318(i32 27, i32* nonnull %stack_var_-56)
  %v3_f808 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f804, i32* @r5, align 4
  %v0_f810 = load i32, i32* @r4, align 4
  store i32 %v0_f810, i32* %r2.global-to-local, align 4
  %v1_f814 = add i32 %v3_f808, -1
  store i32 %v1_f814, i32* %r3.global-to-local, align 4
  %v0_f818 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f818, i32* %r0.global-to-local, align 4
  %v0_f81c = load i32, i32* @r6, align 4
  %v1_f81c = add i32 %v0_f81c, 24
  %v2_f81c = inttoptr i32 %v1_f81c to i32*
  %v3_f81c = load i32, i32* %v2_f81c, align 4
  store i32 %v3_f81c, i32* %r1.global-to-local, align 4
  %v4_f820 = call i32 @function_10a8c(i32 %v0_f818, i32 %v3_f81c, i32 %v0_f810, i32 %v1_f814)
  store i32 %v4_f820, i32* %r0.global-to-local, align 4
  %v2_f824 = icmp eq i32 %v4_f820, -1
  store i1 %v2_f824, i1* %cpsr_c.global-to-local, align 1
  %v7_f824 = icmp eq i32 %v4_f820, -1
  store i1 %v7_f824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f824, label %dec_label_pc_f834, label %dec_label_pc_f85c

dec_label_pc_f834:                                ; preds = %dec_label_pc_f7d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f834 = load i32, i32* %stack_var_-56, align 4
  %v0_f838 = load i32, i32* @r5, align 4
  store i32 %v0_f838, i32* %r2.global-to-local, align 4
  %v1_f83c = add i32 %v3_f834, -1
  store i32 %v1_f83c, i32* %r3.global-to-local, align 4
  %v0_f840 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f840, i32* %r0.global-to-local, align 4
  %v0_f844 = load i32, i32* @r6, align 4
  %v1_f844 = add i32 %v0_f844, 24
  %v2_f844 = inttoptr i32 %v1_f844 to i32*
  %v3_f844 = load i32, i32* %v2_f844, align 4
  store i32 %v3_f844, i32* %r1.global-to-local, align 4
  %v4_f848 = call i32 @function_10a8c(i32 %v0_f840, i32 %v3_f844, i32 %v0_f838, i32 %v1_f83c)
  store i32 %v4_f848, i32* %r0.global-to-local, align 4
  %v2_f84c = icmp eq i32 %v4_f848, -1
  store i1 %v2_f84c, i1* %cpsr_c.global-to-local, align 1
  %v7_f84c = icmp eq i32 %v4_f848, -1
  store i1 %v7_f84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f84c, label %dec_label_pc_10270, label %dec_label_pc_f85c

dec_label_pc_f85c:                                ; preds = %dec_label_pc_f834, %dec_label_pc_f7d4
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f860 = call i32 @function_10344(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f868 = call i32 @function_10344(i32 27)
  store i32 %v1_f868, i32* %r0.global-to-local, align 4
  %v0_f86c = load i32, i32* @r7, align 4
  %v3_f86c = icmp eq i32 %v0_f86c, -1
  store i1 %v3_f86c, i1* %cpsr_c.global-to-local, align 1
  %v8_f86c = icmp eq i32 %v0_f86c, -1
  store i1 %v8_f86c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f86c, label %dec_label_pc_f874.loopexit, label %dec_label_pc_fa74

dec_label_pc_f874.loopexit:                       ; preds = %dec_label_pc_fa00, %dec_label_pc_100ac, %dec_label_pc_f8f4, %dec_label_pc_f85c, %dec_label_pc_10098
  %v0_f874 = load i32, i32* @r6, align 4
  %v1_f874 = add i32 %v0_f874, 12
  %v2_f874 = inttoptr i32 %v1_f874 to i32*
  %v3_f874 = load i32, i32* %v2_f874, align 4
  store i32 %v3_f874, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f878126 = icmp eq i32 %v3_f874, 0
  store i1 %v2_f878126, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f878126, label %dec_label_pc_f6ac, label %dec_label_pc_f880.lr.ph

dec_label_pc_f880.lr.ph:                          ; preds = %dec_label_pc_f874.preheader, %dec_label_pc_f874.loopexit
  %v0_f880159 = phi i32 [ %v0_f874, %dec_label_pc_f874.loopexit ], [ %v0_f874127, %dec_label_pc_f874.preheader ]
  br label %dec_label_pc_f880

dec_label_pc_f880:                                ; preds = %dec_label_pc_f878.backedge.thread, %dec_label_pc_f878.backedge, %dec_label_pc_f878.backedge.thread475, %dec_label_pc_f880.lr.ph
  %v0_101e8 = phi i32 [ %v0_f880159, %dec_label_pc_f880.lr.ph ], [ %v0_f880156, %dec_label_pc_f878.backedge ], [ %v0_f8f4, %dec_label_pc_f878.backedge.thread ], [ %v0_f8f4, %dec_label_pc_f878.backedge.thread475 ]
  %v1_f880 = add i32 %v0_101e8, 24
  %v2_f880 = inttoptr i32 %v1_f880 to i32*
  %v3_f880 = load i32, i32* %v2_f880, align 4
  store i32 %v3_f880, i32* %r3.global-to-local, align 4
  %v2_f884 = icmp ugt i32 %v3_f880, 255
  store i1 %v2_f884, i1* %cpsr_c.global-to-local, align 1
  %v7_f884 = icmp eq i32 %v3_f880, 256
  store i1 %v7_f884, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_101e8, 28
  store i32 %.pre, i32* %r8.global-to-local, align 4
  br i1 %v7_f884, label %dec_label_pc_101e8, label %dec_label_pc_f890

dec_label_pc_f890:                                ; preds = %dec_label_pc_f880, %dec_label_pc_101e8
  store i32 0, i32* @r5, align 4
  %v1_f894 = load i32, i32* @sb, align 4
  %v2_f894 = inttoptr i32 %v1_f894 to i32*
  store i32 0, i32* %v2_f894, align 4
  %v0_f898 = load i32, i32* @r6, align 4
  %v1_f898 = add i32 %v0_f898, 24
  %v2_f898 = inttoptr i32 %v1_f898 to i32*
  %v3_f898 = load i32, i32* %v2_f898, align 4
  store i32 %v3_f898, i32* %r2.global-to-local, align 4
  %v0_f89c = load i32, i32* %r8.global-to-local, align 4
  %v2_f89c = add i32 %v0_f89c, %v3_f898
  store i32 %v2_f89c, i32* @r4, align 4
  %v1_f8a0 = add i32 %v0_f898, 4
  %v2_f8a0 = inttoptr i32 %v1_f8a0 to i32*
  %v3_f8a0 = load i32, i32* %v2_f8a0, align 4
  store i32 %v3_f8a0, i32* %r0.global-to-local, align 4
  %v1_f8a4 = sub i32 256, %v3_f898
  store i32 %v1_f8a4, i32* %r2.global-to-local, align 4
  store i32 %v2_f89c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8b0 = inttoptr i32 %v2_f89c to i32*
  %v5_f8b0 = call i32 @function_11ac0(i32 %v3_f8a0, i32* %v4_f8b0, i32 %v1_f8a4, i32 16384)
  store i32 %v5_f8b0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8b4 = icmp eq i32 %v5_f8b0, 0
  store i1 %v2_f8b4, i1* %cpsr_z.global-to-local, align 1
  %tmp338 = icmp slt i32 %v5_f8b0, 1
  br i1 %tmp338, label %dec_label_pc_10164, label %dec_label_pc_f8bc

dec_label_pc_f8bc:                                ; preds = %dec_label_pc_f890
  %v0_f8bc = load i32, i32* @r5, align 4
  store i32 %v0_f8bc, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f8c4

dec_label_pc_f8c4:                                ; preds = %bb340, %dec_label_pc_f8bc
  %v3_f8cc = phi i32 [ %v1_f8d0, %bb340 ], [ %v0_f8bc, %dec_label_pc_f8bc ]
  %v1_f8c4 = load i32, i32* @r4, align 4
  %v2_f8c4 = add i32 %v1_f8c4, %v3_f8cc
  %v3_f8c4 = inttoptr i32 %v2_f8c4 to i8*
  %v4_f8c4 = load i8, i8* %v3_f8c4, align 1
  %v6_f8c4 = zext i8 %v4_f8c4 to i32
  store i32 %v6_f8c4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8c8 = icmp eq i8 %v4_f8c4, 0
  store i1 %v2_f8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f8c8, label %bb339, label %bb340

bb339:                                            ; preds = %dec_label_pc_f8c4
  %v1_f8cc = load i32, i32* %r1.global-to-local, align 4
  %v2_f8cc = trunc i32 %v1_f8cc to i8
  store i8 %v2_f8cc, i8* %v3_f8c4, align 1
  %v0_f8d0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb340

bb340:                                            ; preds = %dec_label_pc_f8c4, %bb339
  %v0_f8d0 = phi i32 [ %v3_f8cc, %dec_label_pc_f8c4 ], [ %v0_f8d0.pre, %bb339 ]
  %v1_f8d0 = add i32 %v0_f8d0, 1
  store i32 %v1_f8d0, i32* %r2.global-to-local, align 4
  %v3_f8d4 = icmp uge i32 %v5_f8b0, %v1_f8d0
  store i1 %v3_f8d4, i1* %cpsr_c.global-to-local, align 1
  %v9_f8d4 = icmp eq i32 %v5_f8b0, %v1_f8d0
  store i1 %v9_f8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f8d4, label %dec_label_pc_f8dc, label %dec_label_pc_f8c4

dec_label_pc_f8dc:                                ; preds = %bb340, %dec_label_pc_10168
  store i32 ptrtoint (i32* @global_var_1c288.126 to i32), i32* %r1.global-to-local, align 4
  %v0_f8e0 = load i32, i32* @r6, align 4
  %v1_f8e0 = add i32 %v0_f8e0, 24
  %v2_f8e0 = inttoptr i32 %v1_f8e0 to i32*
  %v3_f8e0 = load i32, i32* %v2_f8e0, align 4
  %v2_f8e4 = load i32, i32* @global_var_1c288.126, align 4
  store i32 %v2_f8e4, i32* %r3.global-to-local, align 4
  %v2_f8e8 = add i32 %v3_f8e0, %v5_f8b0
  store i32 %v2_f8e8, i32* %ip.global-to-local, align 4
  store i32 %v2_f8e8, i32* %v2_f8e0, align 4
  %v0_f8f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8f0 = load i32, i32* @r6, align 4
  %v2_f8f0 = add i32 %v1_f8f0, 8
  %v3_f8f0 = inttoptr i32 %v2_f8f0 to i32*
  store i32 %v0_f8f0, i32* %v3_f8f0, align 4
  br label %dec_label_pc_f8f4

dec_label_pc_f8f4:                                ; preds = %dec_label_pc_fdb0, %dec_label_pc_f8dc
  %v0_f8f4 = load i32, i32* @r6, align 4
  %v1_f8f4 = add i32 %v0_f8f4, 12
  %v2_f8f4 = inttoptr i32 %v1_f8f4 to i32*
  %v3_f8f4 = load i32, i32* %v2_f8f4, align 4
  store i32 %v3_f8f4, i32* %r2.global-to-local, align 4
  %v1_f8f8 = add i32 %v3_f8f4, -2
  store i32 %v1_f8f8, i32* %r3.global-to-local, align 4
  %v7_f8fc = icmp eq i32 %v1_f8f8, 8
  store i1 %v7_f8fc, i1* %cpsr_z.global-to-local, align 1
  %v5_f900 = and i32 %v1_f8f8, 1073741824
  %v6_f900 = icmp ne i32 %v5_f900, 0
  store i1 %v6_f900, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_f8f4, label %dec_label_pc_f874.loopexit [
    i32 2, label %dec_label_pc_f92c
    i32 3, label %dec_label_pc_fa10
    i32 4, label %dec_label_pc_fab8
    i32 5, label %dec_label_pc_fb50
    i32 6, label %dec_label_pc_fc78
    i32 7, label %dec_label_pc_ff3c
    i32 8, label %dec_label_pc_fdd4
    i32 9, label %dec_label_pc_fe88
    i32 10, label %dec_label_pc_fd2c
  ]

dec_label_pc_f92c:                                ; preds = %dec_label_pc_f8f4
  %v1_f92c = add i32 %v0_f8f4, 24
  %v2_f92c = inttoptr i32 %v1_f92c to i32*
  %v3_f92c = load i32, i32* %v2_f92c, align 4
  store i32 %v3_f92c, i32* %ip.global-to-local, align 4
  %v0_f930 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f930, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  %v1_f938 = add i32 %v0_f8f4, 29
  store i32 %v1_f938, i32* @r4, align 4
  store i32 -4, i32* %sl.global-to-local, align 4
  %v3_f940117 = icmp eq i32 %v3_f92c, 0
  store i1 %v3_f940117, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f940117, i1* %cpsr_z.global-to-local, align 1
  %v6_f944124 = icmp sgt i32 %v3_f92c, 0
  br i1 %v6_f944124, label %dec_label_pc_f948.preheader, label %dec_label_pc_f9f0

dec_label_pc_f940.loopexit:                       ; preds = %dec_label_pc_f960
  %v2_f968 = add i32 %v1_f968, 2
  store i32 %v2_f968, i32* @r5, align 4
  %v2_f96c = add i32 %v1_f96c, 2
  store i32 %v2_f96c, i32* @r4, align 4
  %v2_f970 = add i32 %v1_f970, 2
  store i32 %v2_f970, i32* @r7, align 4
  %v3_f940 = icmp uge i32 %v2_f970, %v1_f940
  store i1 %v3_f940, i1* %cpsr_c.global-to-local, align 1
  %v9_f940 = icmp eq i32 %v2_f970, %v1_f940
  store i1 %v9_f940, i1* %cpsr_z.global-to-local, align 1
  %v6_f944 = icmp slt i32 %v2_f970, %v1_f940
  br i1 %v6_f944, label %dec_label_pc_f948.preheader, label %dec_label_pc_f9f0

dec_label_pc_f948.preheader:                      ; preds = %dec_label_pc_f92c, %dec_label_pc_f940.loopexit
  %v6_f9f8198 = phi i32 [ %v6_f9f8199, %dec_label_pc_f940.loopexit ], [ %v0_f8f4, %dec_label_pc_f92c ]
  %v1_f970187 = phi i32 [ %v2_f970, %dec_label_pc_f940.loopexit ], [ 0, %dec_label_pc_f92c ]
  %v1_f968185 = phi i32 [ %v2_f968, %dec_label_pc_f940.loopexit ], [ %v0_f930, %dec_label_pc_f92c ]
  %v1_f954183 = phi i32 [ %v1_f940, %dec_label_pc_f940.loopexit ], [ %v3_f92c, %dec_label_pc_f92c ]
  %v0_f948181 = phi i32 [ %v2_f96c, %dec_label_pc_f940.loopexit ], [ %v1_f938, %dec_label_pc_f92c ]
  br label %dec_label_pc_f948

dec_label_pc_f948:                                ; preds = %dec_label_pc_f948.preheader, %dec_label_pc_f9d0
  %v6_f9f8199 = phi i32 [ %v6_f9f8198, %dec_label_pc_f948.preheader ], [ %v0_f9d8, %dec_label_pc_f9d0 ]
  %v1_f970 = phi i32 [ %v1_f970187, %dec_label_pc_f948.preheader ], [ %v1_f9dc, %dec_label_pc_f9d0 ]
  %v1_f968 = phi i32 [ %v1_f968185, %dec_label_pc_f948.preheader ], [ %v1_f9e4, %dec_label_pc_f9d0 ]
  %v1_f940 = phi i32 [ %v1_f954183, %dec_label_pc_f948.preheader ], [ %v3_f9d8, %dec_label_pc_f9d0 ]
  %v1_f96c = phi i32 [ %v0_f948181, %dec_label_pc_f948.preheader ], [ %v1_f9e8, %dec_label_pc_f9d0 ]
  %v1_f948 = add i32 %v1_f96c, -1
  %v2_f948 = inttoptr i32 %v1_f948 to i8*
  %v3_f948 = load i8, i8* %v2_f948, align 1
  %v4_f948 = zext i8 %v3_f948 to i32
  store i32 %v4_f948, i32* %r3.global-to-local, align 4
  %v2_f94c = icmp eq i8 %v3_f948, -1
  store i1 %v2_f94c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f94c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f94c, label %dec_label_pc_f954, label %dec_label_pc_f9f0

dec_label_pc_f954:                                ; preds = %dec_label_pc_f948
  %v0_f954 = load i32, i32* %r8.global-to-local, align 4
  %v2_f954 = add i32 %v0_f954, %v1_f940
  store i32 %v2_f954, i32* %r2.global-to-local, align 4
  %v3_f958 = icmp uge i32 %v2_f954, %v1_f96c
  store i1 %v3_f958, i1* %cpsr_c.global-to-local, align 1
  %v9_f958 = icmp eq i32 %v2_f954, %v1_f96c
  store i1 %v9_f958, i1* %cpsr_z.global-to-local, align 1
  %v2_f95c = xor i1 %v3_f958, true
  %v3_f95c = or i1 %v9_f958, %v2_f95c
  br i1 %v3_f95c, label %dec_label_pc_f9f0, label %dec_label_pc_f960

dec_label_pc_f960:                                ; preds = %dec_label_pc_f954
  %v1_f960 = inttoptr i32 %v1_f96c to i8*
  %v2_f960 = load i8, i8* %v1_f960, align 1
  %v3_f960 = zext i8 %v2_f960 to i32
  store i32 %v3_f960, i32* %r3.global-to-local, align 4
  %v2_f964 = icmp eq i8 %v2_f960, -1
  store i1 %v2_f964, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f964, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f964, label %dec_label_pc_f940.loopexit, label %dec_label_pc_f978

dec_label_pc_f978:                                ; preds = %dec_label_pc_f960
  %v2_f978 = icmp ugt i8 %v2_f960, -4
  store i1 %v2_f978, i1* %cpsr_c.global-to-local, align 1
  %v7_f978 = icmp eq i8 %v2_f960, -3
  store i1 %v7_f978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f978, label %dec_label_pc_fff0, label %dec_label_pc_f980

dec_label_pc_f980:                                ; preds = %dec_label_pc_f978
  %v1_f980 = add i32 %v1_f968, 2
  store i32 %v1_f980, i32* %r3.global-to-local, align 4
  %v3_f984 = icmp uge i32 %v2_f954, %v1_f980
  store i1 %v3_f984, i1* %cpsr_c.global-to-local, align 1
  %v9_f984 = icmp eq i32 %v2_f954, %v1_f980
  store i1 %v9_f984, i1* %cpsr_z.global-to-local, align 1
  %v2_f988 = xor i1 %v3_f984, true
  %v3_f988 = or i1 %v9_f984, %v2_f988
  br i1 %v3_f988, label %dec_label_pc_f9f0, label %dec_label_pc_f98c

dec_label_pc_f98c:                                ; preds = %dec_label_pc_10048, %bb363, %bb362, %dec_label_pc_f980
  %v0_f98c = load i32, i32* @r4, align 4
  %v1_f98c = inttoptr i32 %v0_f98c to i8*
  %v2_f98c = load i8, i8* %v1_f98c, align 1
  %v3_f98c = zext i8 %v2_f98c to i32
  store i32 %v3_f98c, i32* %r3.global-to-local, align 4
  %v2_f990 = icmp ugt i8 %v2_f98c, -4
  store i1 %v2_f990, i1* %cpsr_c.global-to-local, align 1
  %v7_f990 = icmp eq i8 %v2_f98c, -3
  store i1 %v7_f990, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f990, label %bb341, label %dec_label_pc_f99c

bb341:                                            ; preds = %dec_label_pc_f98c
  %v1_f994 = load i32, i32* %sl.global-to-local, align 4
  %v2_f994 = trunc i32 %v1_f994 to i8
  store i8 %v2_f994, i8* %v1_f98c, align 1
  %v0_f998.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f998.pr, label %.thread86, label %.dec_label_pc_f99c_crit_edge

.dec_label_pc_f99c_crit_edge:                     ; preds = %bb341
  %v0_f99c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f99c

dec_label_pc_f99c:                                ; preds = %.dec_label_pc_f99c_crit_edge, %dec_label_pc_f98c
  %v0_f99c = phi i32 [ %v0_f99c.pre, %.dec_label_pc_f99c_crit_edge ], [ %v3_f98c, %dec_label_pc_f98c ]
  %v2_f99c = icmp ugt i32 %v0_f99c, 250
  store i1 %v2_f99c, i1* %cpsr_c.global-to-local, align 1
  %v7_f99c = icmp eq i32 %v0_f99c, 251
  store i1 %v7_f99c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f99c, label %bb342, label %.thread86

bb342:                                            ; preds = %dec_label_pc_f99c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f9a4 = load i32, i32* @r4, align 4
  %v4_f9a4 = inttoptr i32 %v3_f9a4 to i8*
  store i8 -3, i8* %v4_f9a4, align 1
  br label %.thread86

.thread86:                                        ; preds = %dec_label_pc_f99c, %bb341, %bb342
  %v0_f9a8 = load i32, i32* @r4, align 4
  %v1_f9a8 = add i32 %v0_f9a8, 1
  %v2_f9a8 = inttoptr i32 %v1_f9a8 to i8*
  %v3_f9a8 = load i8, i8* %v2_f9a8, align 1
  %v4_f9a8 = zext i8 %v3_f9a8 to i32
  store i32 %v4_f9a8, i32* %r3.global-to-local, align 4
  %v2_f9ac = icmp ugt i8 %v3_f9a8, -4
  store i1 %v2_f9ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f9ac = icmp eq i8 %v3_f9a8, -3
  store i1 %v7_f9ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9ac, label %bb343, label %dec_label_pc_f9b8

bb343:                                            ; preds = %.thread86
  %v1_f9b0 = load i32, i32* %sl.global-to-local, align 4
  %v2_f9b0 = trunc i32 %v1_f9b0 to i8
  store i8 %v2_f9b0, i8* %v2_f9a8, align 1
  %v0_f9b4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f9b4.pr, label %.thread88, label %.dec_label_pc_f9b8_crit_edge

.dec_label_pc_f9b8_crit_edge:                     ; preds = %bb343
  %v0_f9b8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f9b8

dec_label_pc_f9b8:                                ; preds = %.dec_label_pc_f9b8_crit_edge, %.thread86
  %v0_f9b8 = phi i32 [ %v0_f9b8.pre, %.dec_label_pc_f9b8_crit_edge ], [ %v4_f9a8, %.thread86 ]
  %v2_f9b8 = icmp ugt i32 %v0_f9b8, 250
  store i1 %v2_f9b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9b8 = icmp eq i32 %v0_f9b8, 251
  store i1 %v7_f9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9b8, label %bb344, label %.thread88

bb344:                                            ; preds = %dec_label_pc_f9b8
  store i32 -3, i32* %ip.global-to-local, align 4
  %v3_f9c0 = load i32, i32* @r4, align 4
  %v4_f9c0 = add i32 %v3_f9c0, 1
  %v5_f9c0 = inttoptr i32 %v4_f9c0 to i8*
  store i8 -3, i8* %v5_f9c0, align 1
  br label %.thread88

.thread88:                                        ; preds = %dec_label_pc_f9b8, %bb343, %bb344
  %v0_f9c4 = load i32, i32* @r6, align 4
  %v1_f9c4 = add i32 %v0_f9c4, 4
  %v2_f9c4 = inttoptr i32 %v1_f9c4 to i32*
  %v3_f9c4 = load i32, i32* %v2_f9c4, align 4
  store i32 %v3_f9c4, i32* %r0.global-to-local, align 4
  %v0_f9c8 = load i32, i32* @r5, align 4
  br label %dec_label_pc_f9d0

dec_label_pc_f9d0:                                ; preds = %dec_label_pc_101bc, %.thread88
  %v0_f9d4 = phi i32 [ %v3_101d8, %dec_label_pc_101bc ], [ %v3_f9c4, %.thread88 ]
  %storemerge6 = phi i32 [ %v2_1000c, %dec_label_pc_101bc ], [ %v0_f9c8, %.thread88 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_101bc ], [ 3, %.thread88 ]
  store i32 %storemerge6, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f9d4 = inttoptr i32 %storemerge6 to i32*
  %v5_f9d4 = call i32 @function_11b20(i32 %v0_f9d4, i32* %v4_f9d4, i32 %storemerge, i32 16384)
  store i32 %v5_f9d4, i32* %r0.global-to-local, align 4
  %v0_f9d8 = load i32, i32* @r6, align 4
  %v1_f9d8 = add i32 %v0_f9d8, 24
  %v2_f9d8 = inttoptr i32 %v1_f9d8 to i32*
  %v3_f9d8 = load i32, i32* %v2_f9d8, align 4
  store i32 %v3_f9d8, i32* %ip.global-to-local, align 4
  %v0_f9dc = load i32, i32* @r7, align 4
  %v1_f9dc = add i32 %v0_f9dc, 3
  store i32 %v1_f9dc, i32* @r7, align 4
  %v3_f9e0 = icmp uge i32 %v1_f9dc, %v3_f9d8
  store i1 %v3_f9e0, i1* %cpsr_c.global-to-local, align 1
  %v9_f9e0 = icmp eq i32 %v1_f9dc, %v3_f9d8
  store i1 %v9_f9e0, i1* %cpsr_z.global-to-local, align 1
  %v0_f9e4 = load i32, i32* @r5, align 4
  %v1_f9e4 = add i32 %v0_f9e4, 3
  store i32 %v1_f9e4, i32* @r5, align 4
  %v0_f9e8 = load i32, i32* @r4, align 4
  %v1_f9e8 = add i32 %v0_f9e8, 3
  store i32 %v1_f9e8, i32* @r4, align 4
  %v5_f9ec = icmp slt i32 %v1_f9dc, %v3_f9d8
  br i1 %v5_f9ec, label %dec_label_pc_f948, label %dec_label_pc_f9f0

dec_label_pc_f9f0:                                ; preds = %dec_label_pc_f940.loopexit, %dec_label_pc_f948, %dec_label_pc_f9d0, %dec_label_pc_f980, %dec_label_pc_f954, %dec_label_pc_f92c, %dec_label_pc_fff0.dec_label_pc_f9f0.loopexit_crit_edge
  %v6_f9f8 = phi i32 [ %v0_10018, %dec_label_pc_fff0.dec_label_pc_f9f0.loopexit_crit_edge ], [ %v0_f8f4, %dec_label_pc_f92c ], [ %v6_f9f8199, %dec_label_pc_f948 ], [ %v0_f9d8, %dec_label_pc_f9d0 ], [ %v6_f9f8199, %dec_label_pc_f980 ], [ %v6_f9f8199, %dec_label_pc_f954 ], [ %v6_f9f8199, %dec_label_pc_f940.loopexit ]
  %v0_fa00.pre = phi i32 [ %v0_f9f0.pre.pre, %dec_label_pc_fff0.dec_label_pc_f9f0.loopexit_crit_edge ], [ 0, %dec_label_pc_f92c ], [ %v1_f970, %dec_label_pc_f948 ], [ %v1_f9dc, %dec_label_pc_f9d0 ], [ %v1_f970, %dec_label_pc_f980 ], [ %v1_f970, %dec_label_pc_f954 ], [ %v2_f970, %dec_label_pc_f940.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9f0 = icmp eq i32 %v0_fa00.pre, 0
  store i1 %v2_f9f0, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v0_fa00.pre, 1
  br i1 %tmp345, label %dec_label_pc_fa00, label %.thread235

.thread235:                                       ; preds = %dec_label_pc_f9f0
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_f9f8 = add i32 %v6_f9f8, 12
  %v8_f9f8 = inttoptr i32 %v7_f9f8 to i32*
  store i32 3, i32* %v8_f9f8, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fa00:                                ; preds = %dec_label_pc_f9f0, %dec_label_pc_ff90, %dec_label_pc_fedc, %dec_label_pc_fe28, %dec_label_pc_100f8, %dec_label_pc_fccc, %dec_label_pc_fba4, %dec_label_pc_fb0c, %dec_label_pc_fa74
  %v0_fa00 = phi i32 [ %v1_ff84, %dec_label_pc_ff90 ], [ %v1_fed0, %dec_label_pc_fedc ], [ %v1_fe1c, %dec_label_pc_fe28 ], [ %v0_100f0, %dec_label_pc_100f8 ], [ %v1_fcc0, %dec_label_pc_fccc ], [ %v1_fb98, %dec_label_pc_fba4 ], [ %v0_fb0c, %dec_label_pc_fb0c ], [ %v0_fa74, %dec_label_pc_fa74 ], [ %v0_fa00.pre, %dec_label_pc_f9f0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa00 = icmp eq i32 %v0_fa00, 0
  store i1 %v2_fa00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa00, label %dec_label_pc_f874.loopexit, label %dec_label_pc_fa08

dec_label_pc_fa08:                                ; preds = %dec_label_pc_fa00
  %v0_fa08 = load i32, i32* @r6, align 4
  %v1_fa08 = add i32 %v0_fa08, 24
  %v2_fa08 = inttoptr i32 %v1_fa08 to i32*
  %v3_fa08 = load i32, i32* %v2_fa08, align 4
  store i32 %v3_fa08, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fa10:                                ; preds = %dec_label_pc_f8f4
  %v1_fa10 = add i32 %v0_f8f4, 24
  %v2_fa10 = inttoptr i32 %v1_fa10 to i32*
  %v3_fa10 = load i32, i32* %v2_fa10, align 4
  store i32 %v3_fa10, i32* %r3.global-to-local, align 4
  %v1_fa14 = add i32 %v3_fa10, -1
  store i32 %v1_fa14, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa18 = icmp eq i32 %v1_fa14, 0
  store i1 %v2_fa18, i1* %cpsr_z.global-to-local, align 1
  %v5_fa1c = icmp sgt i32 %v1_fa14, 0
  br i1 %v5_fa1c, label %dec_label_pc_fa44, label %dec_label_pc_f7d4

dec_label_pc_fa24:                                ; preds = %bb346
  %v2_fa24 = icmp ugt i8 %v3_fa48, 35
  store i1 %v2_fa24, i1* %cpsr_c.global-to-local, align 1
  %v7_fa24 = icmp eq i8 %v3_fa48, 36
  store i1 %v7_fa24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa24, label %dec_label_pc_fa58, label %dec_label_pc_fa2c

dec_label_pc_fa2c:                                ; preds = %dec_label_pc_fa24
  %v2_fa2c = icmp ugt i8 %v3_fa48, 34
  store i1 %v2_fa2c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa2c = icmp eq i8 %v3_fa48, 35
  store i1 %v7_fa2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa2c, label %dec_label_pc_fa58, label %dec_label_pc_fa34

dec_label_pc_fa34:                                ; preds = %dec_label_pc_fa2c
  %v2_fa34 = icmp ugt i8 %v3_fa48, 36
  store i1 %v2_fa34, i1* %cpsr_c.global-to-local, align 1
  %v7_fa34 = icmp eq i8 %v3_fa48, 37
  store i1 %v7_fa34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa34, label %dec_label_pc_fa58, label %dec_label_pc_fa3c

dec_label_pc_fa3c:                                ; preds = %dec_label_pc_fa34
  %v1_fa3c = add i32 %v0_fa58, -1
  store i32 %v1_fa3c, i32* %r0.global-to-local, align 4
  %v2_fa3c = icmp ne i32 %v0_fa58, 0
  store i1 %v2_fa3c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa3c = icmp eq i32 %v0_fa58, 1
  store i1 %v7_fa3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa3c, label %dec_label_pc_f7d4, label %dec_label_pc_fa44

dec_label_pc_fa44:                                ; preds = %dec_label_pc_fa10, %dec_label_pc_fa3c
  %v0_fa58 = phi i32 [ %v1_fa3c, %dec_label_pc_fa3c ], [ %v1_fa14, %dec_label_pc_fa10 ]
  %v2_fa44 = add i32 %v0_fa58, %v0_f8f4
  store i32 %v2_fa44, i32* %r3.global-to-local, align 4
  %v1_fa48 = add i32 %v2_fa44, 28
  %v2_fa48 = inttoptr i32 %v1_fa48 to i8*
  %v3_fa48 = load i8, i8* %v2_fa48, align 1
  %v4_fa48 = zext i8 %v3_fa48 to i32
  store i32 %v4_fa48, i32* %r3.global-to-local, align 4
  %v2_fa4c = icmp ugt i8 %v3_fa48, 61
  store i1 %v2_fa4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa4c = icmp eq i8 %v3_fa48, 62
  store i1 %v7_fa4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa4c, label %dec_label_pc_fa58, label %bb346

bb346:                                            ; preds = %dec_label_pc_fa44
  %v3_fa50 = icmp ugt i8 %v3_fa48, 57
  store i1 %v3_fa50, i1* %cpsr_c.global-to-local, align 1
  %v8_fa50 = icmp eq i8 %v3_fa48, 58
  store i1 %v8_fa50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa50, label %dec_label_pc_fa58, label %dec_label_pc_fa24

dec_label_pc_fa58:                                ; preds = %dec_label_pc_fa44, %bb346, %dec_label_pc_fa34, %dec_label_pc_fa2c, %dec_label_pc_fa24
  %v1_fa58 = add i32 %v0_fa58, 1
  store i32 %v1_fa58, i32* @r7, align 4
  %v2_fa5c = icmp eq i32 %v1_fa58, -1
  store i1 %v2_fa5c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa5c = icmp eq i32 %v0_fa58, -2
  store i1 %v7_fa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa5c, label %dec_label_pc_f7d4, label %dec_label_pc_fa64

dec_label_pc_fa64:                                ; preds = %dec_label_pc_fa58
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_fa68 = call i32 @function_10344(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_fa70 = call i32 @function_10344(i32 27)
  store i32 %v1_fa70, i32* %r0.global-to-local, align 4
  %v0_fa74.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_fa74

dec_label_pc_fa74:                                ; preds = %dec_label_pc_f85c, %dec_label_pc_fa64
  %v0_fa74 = phi i32 [ %v0_f86c, %dec_label_pc_f85c ], [ %v0_fa74.pre, %dec_label_pc_fa64 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa74 = icmp eq i32 %v0_fa74, 0
  store i1 %v2_fa74, i1* %cpsr_z.global-to-local, align 1
  %tmp347 = icmp slt i32 %v0_fa74, 1
  br i1 %tmp347, label %dec_label_pc_fa00, label %dec_label_pc_fa7c

dec_label_pc_fa7c:                                ; preds = %dec_label_pc_fa74
  %v0_fa7c = load i32, i32* @r6, align 4
  %v1_fa7c = inttoptr i32 %v0_fa7c to i32*
  %v2_fa7c = load i32, i32* %v1_fa7c, align 4
  store i32 %v2_fa7c, i32* %r3.global-to-local, align 4
  %v1_fa80 = add i32 %v0_fa7c, 4
  %v2_fa80 = inttoptr i32 %v1_fa80 to i32*
  %v3_fa80 = load i32, i32* %v2_fa80, align 4
  store i32 %v3_fa80, i32* %r0.global-to-local, align 4
  %v1_fa84 = add i32 %v2_fa7c, 12
  %v2_fa84 = inttoptr i32 %v1_fa84 to i8*
  %v3_fa84 = load i8, i8* %v2_fa84, align 1
  %v4_fa84 = zext i8 %v3_fa84 to i32
  store i32 %v4_fa84, i32* %r2.global-to-local, align 4
  %v1_fa88 = inttoptr i32 %v2_fa7c to i32*
  %v2_fa88 = load i32, i32* %v1_fa88, align 4
  store i32 %v2_fa88, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa90 = inttoptr i32 %v2_fa88 to i32*
  %v5_fa90 = call i32 @function_11b20(i32 %v3_fa80, i32* %v4_fa90, i32 %v4_fa84, i32 16384)
  store i32 %v5_fa90, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fa98 = load i32, i32* @r6, align 4
  %v1_fa98 = add i32 %v0_fa98, 4
  %v2_fa98 = inttoptr i32 %v1_fa98 to i32*
  %v3_fa98 = load i32, i32* %v2_fa98, align 4
  store i32 %v3_fa98, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13bd0.201 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_faa4 = call i32 @function_11b20(i32 %v3_fa98, i32* bitcast ([3 x i8]* @global_var_13bd0.201 to i32*), i32 2, i32 16384)
  store i32 %v5_faa4, i32* %r0.global-to-local, align 4
  %v0_faa8 = load i32, i32* @r6, align 4
  %v1_faa8 = add i32 %v0_faa8, 24
  %v2_faa8 = inttoptr i32 %v1_faa8 to i32*
  %v3_faa8 = load i32, i32* %v2_faa8, align 4
  store i32 %v3_faa8, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_fab0 = add i32 %v0_faa8, 12
  %v3_fab0 = inttoptr i32 %v2_fab0 to i32*
  store i32 4, i32* %v3_fab0, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fab8:                                ; preds = %dec_label_pc_f8f4
  %v1_fab8 = add i32 %v0_f8f4, 24
  %v2_fab8 = inttoptr i32 %v1_fab8 to i32*
  %v3_fab8 = load i32, i32* %v2_fab8, align 4
  store i32 %v3_fab8, i32* %r3.global-to-local, align 4
  %v1_fabc = add i32 %v3_fab8, -1
  store i32 %v1_fabc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fac0 = icmp eq i32 %v1_fabc, 0
  store i1 %v2_fac0, i1* %cpsr_z.global-to-local, align 1
  %v5_fac4 = icmp sgt i32 %v1_fabc, 0
  br i1 %v5_fac4, label %dec_label_pc_fae4, label %dec_label_pc_10058

dec_label_pc_facc:                                ; preds = %bb348
  %v2_facc = icmp ugt i8 %v3_fae8, 35
  store i1 %v2_facc, i1* %cpsr_c.global-to-local, align 1
  %v7_facc = icmp eq i8 %v3_fae8, 36
  store i1 %v7_facc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_facc, label %dec_label_pc_faf8, label %dec_label_pc_fad4

dec_label_pc_fad4:                                ; preds = %dec_label_pc_facc
  %v2_fad4 = icmp ugt i8 %v3_fae8, 34
  store i1 %v2_fad4, i1* %cpsr_c.global-to-local, align 1
  %v7_fad4 = icmp eq i8 %v3_fae8, 35
  store i1 %v7_fad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fad4, label %dec_label_pc_faf8, label %dec_label_pc_fadc

dec_label_pc_fadc:                                ; preds = %dec_label_pc_fad4
  %v1_fadc = add i32 %v0_faf8, -1
  store i32 %v1_fadc, i32* %r0.global-to-local, align 4
  %v2_fadc = icmp ne i32 %v0_faf8, 0
  store i1 %v2_fadc, i1* %cpsr_c.global-to-local, align 1
  %v7_fadc = icmp eq i32 %v0_faf8, 1
  store i1 %v7_fadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fadc, label %dec_label_pc_10058, label %dec_label_pc_fae4

dec_label_pc_fae4:                                ; preds = %dec_label_pc_fab8, %dec_label_pc_fadc
  %v0_faf8 = phi i32 [ %v1_fadc, %dec_label_pc_fadc ], [ %v1_fabc, %dec_label_pc_fab8 ]
  %v2_fae4 = add i32 %v0_faf8, %v0_f8f4
  store i32 %v2_fae4, i32* %r3.global-to-local, align 4
  %v1_fae8 = add i32 %v2_fae4, 28
  %v2_fae8 = inttoptr i32 %v1_fae8 to i8*
  %v3_fae8 = load i8, i8* %v2_fae8, align 1
  %v4_fae8 = zext i8 %v3_fae8 to i32
  store i32 %v4_fae8, i32* %r3.global-to-local, align 4
  %v2_faec = icmp ugt i8 %v3_fae8, 61
  store i1 %v2_faec, i1* %cpsr_c.global-to-local, align 1
  %v7_faec = icmp eq i8 %v3_fae8, 62
  store i1 %v7_faec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faec, label %dec_label_pc_faf8, label %bb348

bb348:                                            ; preds = %dec_label_pc_fae4
  %v3_faf0 = icmp ugt i8 %v3_fae8, 57
  store i1 %v3_faf0, i1* %cpsr_c.global-to-local, align 1
  %v8_faf0 = icmp eq i8 %v3_fae8, 58
  store i1 %v8_faf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_faf0, label %dec_label_pc_faf8, label %dec_label_pc_facc

dec_label_pc_faf8:                                ; preds = %dec_label_pc_fae4, %bb348, %dec_label_pc_fad4, %dec_label_pc_facc
  %v1_faf8 = add i32 %v0_faf8, 1
  store i32 %v1_faf8, i32* @r7, align 4
  %v2_fafc = icmp eq i32 %v1_faf8, -1
  store i1 %v2_fafc, i1* %cpsr_c.global-to-local, align 1
  %v7_fafc = icmp eq i32 %v0_faf8, -2
  store i1 %v7_fafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fafc, label %dec_label_pc_10058, label %dec_label_pc_fb04

dec_label_pc_fb04:                                ; preds = %dec_label_pc_faf8
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_fb08 = call i32 @function_10344(i32 25)
  store i32 %v1_fb08, i32* %r0.global-to-local, align 4
  %v0_fb0c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_fb0c

dec_label_pc_fb0c:                                ; preds = %dec_label_pc_10098, %dec_label_pc_fb04
  %v0_fb0c = phi i32 [ %v0_100a0, %dec_label_pc_10098 ], [ %v0_fb0c.pre, %dec_label_pc_fb04 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb0c = icmp eq i32 %v0_fb0c, 0
  store i1 %v2_fb0c, i1* %cpsr_z.global-to-local, align 1
  %tmp349 = icmp slt i32 %v0_fb0c, 1
  br i1 %tmp349, label %dec_label_pc_fa00, label %dec_label_pc_fb14

dec_label_pc_fb14:                                ; preds = %dec_label_pc_fb0c
  %v0_fb14 = load i32, i32* @r6, align 4
  %v1_fb14 = inttoptr i32 %v0_fb14 to i32*
  %v2_fb14 = load i32, i32* %v1_fb14, align 4
  store i32 %v2_fb14, i32* %r3.global-to-local, align 4
  %v1_fb18 = add i32 %v0_fb14, 4
  %v2_fb18 = inttoptr i32 %v1_fb18 to i32*
  %v3_fb18 = load i32, i32* %v2_fb18, align 4
  store i32 %v3_fb18, i32* %r0.global-to-local, align 4
  %v1_fb1c = add i32 %v2_fb14, 13
  %v2_fb1c = inttoptr i32 %v1_fb1c to i8*
  %v3_fb1c = load i8, i8* %v2_fb1c, align 1
  %v4_fb1c = zext i8 %v3_fb1c to i32
  store i32 %v4_fb1c, i32* %r2.global-to-local, align 4
  %v1_fb20 = add i32 %v2_fb14, 4
  %v2_fb20 = inttoptr i32 %v1_fb20 to i32*
  %v3_fb20 = load i32, i32* %v2_fb20, align 4
  store i32 %v3_fb20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fb28 = inttoptr i32 %v3_fb20 to i32*
  %v5_fb28 = call i32 @function_11b20(i32 %v3_fb18, i32* %v4_fb28, i32 %v4_fb1c, i32 16384)
  store i32 %v5_fb28, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fb30 = load i32, i32* @r6, align 4
  %v1_fb30 = add i32 %v0_fb30, 4
  %v2_fb30 = inttoptr i32 %v1_fb30 to i32*
  %v3_fb30 = load i32, i32* %v2_fb30, align 4
  store i32 %v3_fb30, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13bd0.201 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fb3c = call i32 @function_11b20(i32 %v3_fb30, i32* bitcast ([3 x i8]* @global_var_13bd0.201 to i32*), i32 2, i32 16384)
  store i32 %v5_fb3c, i32* %r0.global-to-local, align 4
  %v0_fb40 = load i32, i32* @r6, align 4
  %v1_fb40 = add i32 %v0_fb40, 24
  %v2_fb40 = inttoptr i32 %v1_fb40 to i32*
  %v3_fb40 = load i32, i32* %v2_fb40, align 4
  store i32 %v3_fb40, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_fb48 = add i32 %v0_fb40, 12
  %v3_fb48 = inttoptr i32 %v2_fb48 to i32*
  store i32 5, i32* %v3_fb48, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fb50:                                ; preds = %dec_label_pc_f8f4
  %v1_fb50 = add i32 %v0_f8f4, 24
  %v2_fb50 = inttoptr i32 %v1_fb50 to i32*
  %v3_fb50 = load i32, i32* %v2_fb50, align 4
  store i32 %v3_fb50, i32* %ip.global-to-local, align 4
  %v1_fb54 = add i32 %v3_fb50, -1
  store i32 %v1_fb54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb58 = icmp eq i32 %v1_fb54, 0
  store i1 %v2_fb58, i1* %cpsr_z.global-to-local, align 1
  %v5_fb5c = icmp sgt i32 %v1_fb54, 0
  br i1 %v5_fb5c, label %dec_label_pc_fb84, label %dec_label_pc_f878.backedge.thread

dec_label_pc_fb64:                                ; preds = %bb350
  %v2_fb64 = icmp ugt i8 %v3_fb88, 35
  store i1 %v2_fb64, i1* %cpsr_c.global-to-local, align 1
  %v7_fb64 = icmp eq i8 %v3_fb88, 36
  store i1 %v7_fb64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb64, label %dec_label_pc_fb98, label %dec_label_pc_fb6c

dec_label_pc_fb6c:                                ; preds = %dec_label_pc_fb64
  %v2_fb6c = icmp ugt i8 %v3_fb88, 34
  store i1 %v2_fb6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb6c = icmp eq i8 %v3_fb88, 35
  store i1 %v7_fb6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb6c, label %dec_label_pc_fb98, label %dec_label_pc_fb74

dec_label_pc_fb74:                                ; preds = %dec_label_pc_fb6c
  %v2_fb74 = icmp ugt i8 %v3_fb88, 36
  store i1 %v2_fb74, i1* %cpsr_c.global-to-local, align 1
  %v7_fb74 = icmp eq i8 %v3_fb88, 37
  store i1 %v7_fb74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb74, label %dec_label_pc_fb98, label %dec_label_pc_fb7c

dec_label_pc_fb7c:                                ; preds = %dec_label_pc_fb74
  %v1_fb7c = add i32 %v0_fb98, -1
  store i32 %v1_fb7c, i32* %r0.global-to-local, align 4
  %v2_fb7c = icmp ne i32 %v0_fb98, 0
  store i1 %v2_fb7c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb7c = icmp eq i32 %v0_fb98, 1
  store i1 %v7_fb7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb7c, label %dec_label_pc_f878.backedge.thread475, label %dec_label_pc_fb84

dec_label_pc_fb84:                                ; preds = %dec_label_pc_fb50, %dec_label_pc_fb7c
  %v0_fb98 = phi i32 [ %v1_fb7c, %dec_label_pc_fb7c ], [ %v1_fb54, %dec_label_pc_fb50 ]
  %v2_fb84 = add i32 %v0_fb98, %v0_f8f4
  store i32 %v2_fb84, i32* %r3.global-to-local, align 4
  %v1_fb88 = add i32 %v2_fb84, 28
  %v2_fb88 = inttoptr i32 %v1_fb88 to i8*
  %v3_fb88 = load i8, i8* %v2_fb88, align 1
  %v4_fb88 = zext i8 %v3_fb88 to i32
  store i32 %v4_fb88, i32* %r3.global-to-local, align 4
  %v2_fb8c = icmp ugt i8 %v3_fb88, 61
  store i1 %v2_fb8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb8c = icmp eq i8 %v3_fb88, 62
  store i1 %v7_fb8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb8c, label %dec_label_pc_fb98, label %bb350

bb350:                                            ; preds = %dec_label_pc_fb84
  %v3_fb90 = icmp ugt i8 %v3_fb88, 57
  store i1 %v3_fb90, i1* %cpsr_c.global-to-local, align 1
  %v8_fb90 = icmp eq i8 %v3_fb88, 58
  store i1 %v8_fb90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb90, label %dec_label_pc_fb98, label %dec_label_pc_fb64

dec_label_pc_fb98:                                ; preds = %dec_label_pc_fb84, %bb350, %dec_label_pc_fb74, %dec_label_pc_fb6c, %dec_label_pc_fb64
  %v1_fb98 = add i32 %v0_fb98, 1
  store i32 %v1_fb98, i32* @r7, align 4
  %v2_fb9c = icmp eq i32 %v1_fb98, -1
  store i1 %v2_fb9c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb9c = icmp eq i32 %v0_fb98, -2
  store i1 %v7_fb9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb9c, label %dec_label_pc_f878.backedge.thread475, label %dec_label_pc_fba4

dec_label_pc_fba4:                                ; preds = %dec_label_pc_fb98
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fba4 = icmp eq i32 %v1_fb98, 0
  store i1 %v2_fba4, i1* %cpsr_z.global-to-local, align 1
  %tmp351 = icmp slt i32 %v1_fb98, 1
  br i1 %tmp351, label %dec_label_pc_fa00, label %dec_label_pc_fbac

dec_label_pc_fbac:                                ; preds = %dec_label_pc_fba4
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_fbb0 = call i32 @function_103fc(i32 5)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_fbc0 = call i32 @function_10318(i32 5, i32* nonnull %stack_var_-56)
  store i32 %v3_fbc0, i32* %r0.global-to-local, align 4
  %v3_fbc4 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fbc4, i32* %r2.global-to-local, align 4
  store i32 %v3_fbc0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fbd0 = load i32, i32* @r6, align 4
  %v1_fbd0 = add i32 %v0_fbd0, 4
  %v2_fbd0 = inttoptr i32 %v1_fbd0 to i32*
  %v3_fbd0 = load i32, i32* %v2_fbd0, align 4
  store i32 %v3_fbd0, i32* %r0.global-to-local, align 4
  %v4_fbd4 = inttoptr i32 %v3_fbc0 to i32*
  %v5_fbd4 = call i32 @function_11b20(i32 %v3_fbd0, i32* %v4_fbd4, i32 %v3_fbc4, i32 16384)
  store i32 %v5_fbd4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13bd0.201 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fbe4 = load i32, i32* @r6, align 4
  %v1_fbe4 = add i32 %v0_fbe4, 4
  %v2_fbe4 = inttoptr i32 %v1_fbe4 to i32*
  %v3_fbe4 = load i32, i32* %v2_fbe4, align 4
  store i32 %v3_fbe4, i32* %r0.global-to-local, align 4
  %v5_fbe8 = call i32 @function_11b20(i32 %v3_fbe4, i32* bitcast ([3 x i8]* @global_var_13bd0.201 to i32*), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_fbf0 = call i32 @function_10344(i32 5)
  store i32 %v1_fbf0, i32* %r0.global-to-local, align 4
  %v0_fbf4 = load i32, i32* @r6, align 4
  %v1_fbf4 = add i32 %v0_fbf4, 24
  %v2_fbf4 = inttoptr i32 %v1_fbf4 to i32*
  %v3_fbf4 = load i32, i32* %v2_fbf4, align 4
  store i32 %v3_fbf4, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_fbfc = add i32 %v0_fbf4, 12
  %v3_fbfc = inttoptr i32 %v2_fbfc to i32*
  store i32 6, i32* %v3_fbfc, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fc78:                                ; preds = %dec_label_pc_f8f4
  %v1_fc78 = add i32 %v0_f8f4, 24
  %v2_fc78 = inttoptr i32 %v1_fc78 to i32*
  %v3_fc78 = load i32, i32* %v2_fc78, align 4
  store i32 %v3_fc78, i32* %ip.global-to-local, align 4
  %v1_fc7c = add i32 %v3_fc78, -1
  store i32 %v1_fc7c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc80 = icmp eq i32 %v1_fc7c, 0
  store i1 %v2_fc80, i1* %cpsr_z.global-to-local, align 1
  %v5_fc84 = icmp sgt i32 %v1_fc7c, 0
  br i1 %v5_fc84, label %dec_label_pc_fcac, label %dec_label_pc_f878.backedge.thread

dec_label_pc_fc8c:                                ; preds = %bb352
  %v2_fc8c = icmp ugt i8 %v3_fcb0, 35
  store i1 %v2_fc8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc8c = icmp eq i8 %v3_fcb0, 36
  store i1 %v7_fc8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc8c, label %dec_label_pc_fcc0, label %dec_label_pc_fc94

dec_label_pc_fc94:                                ; preds = %dec_label_pc_fc8c
  %v2_fc94 = icmp ugt i8 %v3_fcb0, 34
  store i1 %v2_fc94, i1* %cpsr_c.global-to-local, align 1
  %v7_fc94 = icmp eq i8 %v3_fcb0, 35
  store i1 %v7_fc94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc94, label %dec_label_pc_fcc0, label %dec_label_pc_fc9c

dec_label_pc_fc9c:                                ; preds = %dec_label_pc_fc94
  %v2_fc9c = icmp ugt i8 %v3_fcb0, 36
  store i1 %v2_fc9c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc9c = icmp eq i8 %v3_fcb0, 37
  store i1 %v7_fc9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc9c, label %dec_label_pc_fcc0, label %dec_label_pc_fca4

dec_label_pc_fca4:                                ; preds = %dec_label_pc_fc9c
  %v1_fca4 = add i32 %v0_fcc0, -1
  store i32 %v1_fca4, i32* %r0.global-to-local, align 4
  %v2_fca4 = icmp ne i32 %v0_fcc0, 0
  store i1 %v2_fca4, i1* %cpsr_c.global-to-local, align 1
  %v7_fca4 = icmp eq i32 %v0_fcc0, 1
  store i1 %v7_fca4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fca4, label %dec_label_pc_f878.backedge.thread475, label %dec_label_pc_fcac

dec_label_pc_fcac:                                ; preds = %dec_label_pc_fc78, %dec_label_pc_fca4
  %v0_fcc0 = phi i32 [ %v1_fca4, %dec_label_pc_fca4 ], [ %v1_fc7c, %dec_label_pc_fc78 ]
  %v2_fcac = add i32 %v0_fcc0, %v0_f8f4
  store i32 %v2_fcac, i32* %r3.global-to-local, align 4
  %v1_fcb0 = add i32 %v2_fcac, 28
  %v2_fcb0 = inttoptr i32 %v1_fcb0 to i8*
  %v3_fcb0 = load i8, i8* %v2_fcb0, align 1
  %v4_fcb0 = zext i8 %v3_fcb0 to i32
  store i32 %v4_fcb0, i32* %r3.global-to-local, align 4
  %v2_fcb4 = icmp ugt i8 %v3_fcb0, 61
  store i1 %v2_fcb4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcb4 = icmp eq i8 %v3_fcb0, 62
  store i1 %v7_fcb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcb4, label %dec_label_pc_fcc0, label %bb352

bb352:                                            ; preds = %dec_label_pc_fcac
  %v3_fcb8 = icmp ugt i8 %v3_fcb0, 57
  store i1 %v3_fcb8, i1* %cpsr_c.global-to-local, align 1
  %v8_fcb8 = icmp eq i8 %v3_fcb0, 58
  store i1 %v8_fcb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fcb8, label %dec_label_pc_fcc0, label %dec_label_pc_fc8c

dec_label_pc_fcc0:                                ; preds = %dec_label_pc_fcac, %bb352, %dec_label_pc_fc9c, %dec_label_pc_fc94, %dec_label_pc_fc8c
  %v1_fcc0 = add i32 %v0_fcc0, 1
  store i32 %v1_fcc0, i32* @r7, align 4
  %v2_fcc4 = icmp eq i32 %v1_fcc0, -1
  store i1 %v2_fcc4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcc4 = icmp eq i32 %v0_fcc0, -2
  store i1 %v7_fcc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcc4, label %dec_label_pc_f878.backedge.thread475, label %dec_label_pc_fccc

dec_label_pc_fccc:                                ; preds = %dec_label_pc_fcc0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fccc = icmp eq i32 %v1_fcc0, 0
  store i1 %v2_fccc, i1* %cpsr_z.global-to-local, align 1
  %tmp353 = icmp slt i32 %v1_fcc0, 1
  br i1 %tmp353, label %dec_label_pc_fa00, label %dec_label_pc_fcd4

dec_label_pc_fcd4:                                ; preds = %dec_label_pc_fccc
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_fcd8 = call i32 @function_103fc(i32 6)
  store i32 %v2_fce0, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_fce8 = call i32 @function_10318(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_fce8, i32* %r0.global-to-local, align 4
  %v3_fcec = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fcec, i32* %r2.global-to-local, align 4
  store i32 %v3_fce8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fcf8 = load i32, i32* @r6, align 4
  %v1_fcf8 = add i32 %v0_fcf8, 4
  %v2_fcf8 = inttoptr i32 %v1_fcf8 to i32*
  %v3_fcf8 = load i32, i32* %v2_fcf8, align 4
  store i32 %v3_fcf8, i32* %r0.global-to-local, align 4
  %v4_fcfc = inttoptr i32 %v3_fce8 to i32*
  %v5_fcfc = call i32 @function_11b20(i32 %v3_fcf8, i32* %v4_fcfc, i32 %v3_fcec, i32 16384)
  store i32 %v5_fcfc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13bd0.201 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fd0c = load i32, i32* @r6, align 4
  %v1_fd0c = add i32 %v0_fd0c, 4
  %v2_fd0c = inttoptr i32 %v1_fd0c to i32*
  %v3_fd0c = load i32, i32* %v2_fd0c, align 4
  store i32 %v3_fd0c, i32* %r0.global-to-local, align 4
  %v5_fd10 = call i32 @function_11b20(i32 %v3_fd0c, i32* bitcast ([3 x i8]* @global_var_13bd0.201 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_fd18 = call i32 @function_10344(i32 6)
  store i32 %v1_fd18, i32* %r0.global-to-local, align 4
  %v0_fd1c = load i32, i32* @r6, align 4
  %v1_fd1c = add i32 %v0_fd1c, 24
  %v2_fd1c = inttoptr i32 %v1_fd1c to i32*
  %v3_fd1c = load i32, i32* %v2_fd1c, align 4
  store i32 %v3_fd1c, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_fd24 = add i32 %v0_fd1c, 12
  %v3_fd24 = inttoptr i32 %v2_fd24 to i32*
  store i32 7, i32* %v3_fd24, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fd2c:                                ; preds = %dec_label_pc_f8f4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_fd30 = call i32 @function_103fc(i32 10)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_fd40 = call i32 @function_10318(i32 10, i32* nonnull %stack_var_-56)
  %v3_fd44 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fd40, i32* %r2.global-to-local, align 4
  %v1_fd4c = add i32 %v3_fd44, -1
  store i32 %v1_fd4c, i32* %r3.global-to-local, align 4
  %v0_fd50 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_fd50, i32* %r0.global-to-local, align 4
  %v0_fd54 = load i32, i32* @r6, align 4
  %v1_fd54 = add i32 %v0_fd54, 24
  %v2_fd54 = inttoptr i32 %v1_fd54 to i32*
  %v3_fd54 = load i32, i32* %v2_fd54, align 4
  store i32 %v3_fd54, i32* %r1.global-to-local, align 4
  %v4_fd58 = call i32 @function_10a8c(i32 %v0_fd50, i32 %v3_fd54, i32 %v3_fd40, i32 %v1_fd4c)
  %v2_fd5c = icmp eq i32 %v4_fd58, -1
  store i1 %v2_fd5c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd5c = icmp eq i32 %v4_fd58, -1
  store i1 %v7_fd5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_fd58, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_100b0 = call i32 @function_10344(i32 10)
  br i1 %v7_fd5c, label %dec_label_pc_100ac, label %dec_label_pc_fd68

dec_label_pc_fd68:                                ; preds = %dec_label_pc_fd2c
  store i32 %v1_100b0, i32* %r0.global-to-local, align 4
  %v0_fd70 = load i32, i32* @r6, align 4
  %v1_fd70 = add i32 %v0_fd70, 4
  %v2_fd70 = inttoptr i32 %v1_fd70 to i32*
  %v3_fd70 = load i32, i32* %v2_fd70, align 4
  store i32 %v3_fd70, i32* %r0.global-to-local, align 4
  %v1_fd74 = call i32 @function_112cc(i32 %v3_fd70)
  store i32 %v1_fd74, i32* %r0.global-to-local, align 4
  %v0_fd78 = load i32, i32* @r6, align 4
  %v1_fd78 = add i32 %v0_fd78, 284
  %v2_fd78 = inttoptr i32 %v1_fd78 to i8*
  %v3_fd78 = load i8, i8* %v2_fd78, align 1
  %v4_fd78 = zext i8 %v3_fd78 to i32
  %v1_fd7c = add nuw nsw i32 %v4_fd78, 1
  %v1_fd80 = urem i32 %v1_fd7c, 256
  store i32 %v1_fd80, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_fd88 = icmp ugt i32 %v1_fd80, 9
  store i1 %v2_fd88, i1* %cpsr_c.global-to-local, align 1
  %v7_fd88 = icmp eq i32 %v1_fd80, 10
  store i1 %v7_fd88, i1* %cpsr_z.global-to-local, align 1
  %v2_fd8c = add i32 %v0_fd78, 4
  %v3_fd8c = inttoptr i32 %v2_fd8c to i32*
  store i32 -1, i32* %v3_fd8c, align 4
  %v0_fd90 = load i32, i32* %r3.global-to-local, align 4
  %v1_fd90 = trunc i32 %v0_fd90 to i8
  %v2_fd90 = load i32, i32* @r6, align 4
  %v3_fd90 = add i32 %v2_fd90, 284
  %v4_fd90 = inttoptr i32 %v3_fd90 to i8*
  store i8 %v1_fd90, i8* %v4_fd90, align 1
  %v0_fd94 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fd94, label %dec_label_pc_fd98, label %dec_label_pc_1020c

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd68
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_fda0 = load i32, i32* @r6, align 4
  %v1_fda0 = add i32 %v0_fda0, 24
  %v2_fda0 = inttoptr i32 %v1_fda0 to i32*
  %v3_fda0 = load i32, i32* %v2_fda0, align 4
  store i32 %v3_fda0, i32* %ip.global-to-local, align 4
  %v3_fda4 = add i32 %v0_fda0, 284
  %v4_fda4 = inttoptr i32 %v3_fda4 to i8*
  store i8 0, i8* %v4_fda4, align 1
  %v0_fda8 = load i32, i32* %r0.global-to-local, align 4
  %v1_fda8 = load i32, i32* @r6, align 4
  %v2_fda8 = add i32 %v1_fda8, 12
  %v3_fda8 = inttoptr i32 %v2_fda8 to i32*
  store i32 %v0_fda8, i32* %v3_fda8, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fdb0:                                ; preds = %.thread235, %dec_label_pc_ff98, %dec_label_pc_fee4, %dec_label_pc_fe30, %dec_label_pc_1020c, %dec_label_pc_10148, %dec_label_pc_fcd4, %dec_label_pc_fbac, %dec_label_pc_fb14, %dec_label_pc_fa7c, %dec_label_pc_fa08, %dec_label_pc_fd98
  %v0_fdb0 = load i32, i32* %ip.global-to-local, align 4
  %v1_fdb0 = load i32, i32* @r7, align 4
  %v2_fdb0 = sub i32 %v0_fdb0, %v1_fdb0
  %v3_fdb0 = icmp uge i32 %v0_fdb0, %v1_fdb0
  store i1 %v3_fdb0, i1* %cpsr_c.global-to-local, align 1
  %v4_fdb0 = xor i32 %v1_fdb0, %v0_fdb0
  %v5_fdb0 = xor i32 %v2_fdb0, %v0_fdb0
  %v6_fdb0 = and i32 %v5_fdb0, %v4_fdb0
  %v7_fdb0 = icmp slt i32 %v6_fdb0, 0
  %v8_fdb0 = icmp slt i32 %v2_fdb0, 0
  %v9_fdb0 = icmp eq i32 %v0_fdb0, %v1_fdb0
  store i1 %v9_fdb0, i1* %cpsr_z.global-to-local, align 1
  %v2_fdb4 = xor i1 %v8_fdb0, %v7_fdb0
  %v0_fdb0.v1_fdb0 = select i1 %v2_fdb4, i32 %v0_fdb0, i32 %v1_fdb0
  store i32 %v0_fdb0.v1_fdb0, i32* %r1.global-to-local, align 4
  %v2_fdbc = sub i32 %v0_fdb0, %v0_fdb0.v1_fdb0
  store i32 %v2_fdbc, i32* @r2, align 4
  %v1_fdc0 = load i32, i32* @r6, align 4
  %v2_fdc0 = add i32 %v1_fdc0, 24
  %v3_fdc0 = inttoptr i32 %v2_fdc0 to i32*
  store i32 %v2_fdbc, i32* %v3_fdc0, align 4
  %v0_fdc4 = load i32, i32* %r8.global-to-local, align 4
  %v1_fdc4 = load i32, i32* %r1.global-to-local, align 4
  %v2_fdc4 = add i32 %v1_fdc4, %v0_fdc4
  store i32 %v2_fdc4, i32* @r1, align 4
  store i32 %v0_fdc4, i32* @r0, align 4
  %v3_fdcc = call i32 @function_118f0(i32 %v0_fdc4, i32 %v2_fdc4, i32 %v2_fdbc)
  store i32 %v3_fdcc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f8f4

dec_label_pc_fdd4:                                ; preds = %dec_label_pc_f8f4
  %v1_fdd4 = add i32 %v0_f8f4, 24
  %v2_fdd4 = inttoptr i32 %v1_fdd4 to i32*
  %v3_fdd4 = load i32, i32* %v2_fdd4, align 4
  store i32 %v3_fdd4, i32* %ip.global-to-local, align 4
  %v1_fdd8 = add i32 %v3_fdd4, -1
  store i32 %v1_fdd8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fddc = icmp eq i32 %v1_fdd8, 0
  store i1 %v2_fddc, i1* %cpsr_z.global-to-local, align 1
  %v5_fde0 = icmp sgt i32 %v1_fdd8, 0
  br i1 %v5_fde0, label %dec_label_pc_fe08, label %dec_label_pc_f878.backedge.thread

dec_label_pc_fde8:                                ; preds = %bb356
  %v2_fde8 = icmp ugt i8 %v3_fe0c, 35
  store i1 %v2_fde8, i1* %cpsr_c.global-to-local, align 1
  %v7_fde8 = icmp eq i8 %v3_fe0c, 36
  store i1 %v7_fde8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fde8, label %dec_label_pc_fe1c, label %dec_label_pc_fdf0

dec_label_pc_fdf0:                                ; preds = %dec_label_pc_fde8
  %v2_fdf0 = icmp ugt i8 %v3_fe0c, 34
  store i1 %v2_fdf0, i1* %cpsr_c.global-to-local, align 1
  %v7_fdf0 = icmp eq i8 %v3_fe0c, 35
  store i1 %v7_fdf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdf0, label %dec_label_pc_fe1c, label %dec_label_pc_fdf8

dec_label_pc_fdf8:                                ; preds = %dec_label_pc_fdf0
  %v2_fdf8 = icmp ugt i8 %v3_fe0c, 36
  store i1 %v2_fdf8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdf8 = icmp eq i8 %v3_fe0c, 37
  store i1 %v7_fdf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdf8, label %dec_label_pc_fe1c, label %dec_label_pc_fe00

dec_label_pc_fe00:                                ; preds = %dec_label_pc_fdf8
  %v1_fe00 = add i32 %v0_fe1c, -1
  store i32 %v1_fe00, i32* %r0.global-to-local, align 4
  %v2_fe00 = icmp ne i32 %v0_fe1c, 0
  store i1 %v2_fe00, i1* %cpsr_c.global-to-local, align 1
  %v7_fe00 = icmp eq i32 %v0_fe1c, 1
  store i1 %v7_fe00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe00, label %dec_label_pc_f878.backedge.thread475, label %dec_label_pc_fe08

dec_label_pc_fe08:                                ; preds = %dec_label_pc_fdd4, %dec_label_pc_fe00
  %v0_fe1c = phi i32 [ %v1_fe00, %dec_label_pc_fe00 ], [ %v1_fdd8, %dec_label_pc_fdd4 ]
  %v2_fe08 = add i32 %v0_fe1c, %v0_f8f4
  store i32 %v2_fe08, i32* %r3.global-to-local, align 4
  %v1_fe0c = add i32 %v2_fe08, 28
  %v2_fe0c = inttoptr i32 %v1_fe0c to i8*
  %v3_fe0c = load i8, i8* %v2_fe0c, align 1
  %v4_fe0c = zext i8 %v3_fe0c to i32
  store i32 %v4_fe0c, i32* %r3.global-to-local, align 4
  %v2_fe10 = icmp ugt i8 %v3_fe0c, 61
  store i1 %v2_fe10, i1* %cpsr_c.global-to-local, align 1
  %v7_fe10 = icmp eq i8 %v3_fe0c, 62
  store i1 %v7_fe10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe10, label %dec_label_pc_fe1c, label %bb356

bb356:                                            ; preds = %dec_label_pc_fe08
  %v3_fe14 = icmp ugt i8 %v3_fe0c, 57
  store i1 %v3_fe14, i1* %cpsr_c.global-to-local, align 1
  %v8_fe14 = icmp eq i8 %v3_fe0c, 58
  store i1 %v8_fe14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe14, label %dec_label_pc_fe1c, label %dec_label_pc_fde8

dec_label_pc_fe1c:                                ; preds = %dec_label_pc_fe08, %bb356, %dec_label_pc_fdf8, %dec_label_pc_fdf0, %dec_label_pc_fde8
  %v1_fe1c = add i32 %v0_fe1c, 1
  store i32 %v1_fe1c, i32* @r7, align 4
  %v2_fe20 = icmp eq i32 %v1_fe1c, -1
  store i1 %v2_fe20, i1* %cpsr_c.global-to-local, align 1
  %v7_fe20 = icmp eq i32 %v0_fe1c, -2
  store i1 %v7_fe20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe20, label %dec_label_pc_f878.backedge.thread475, label %dec_label_pc_fe28

dec_label_pc_fe28:                                ; preds = %dec_label_pc_fe1c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe28 = icmp eq i32 %v1_fe1c, 0
  store i1 %v2_fe28, i1* %cpsr_z.global-to-local, align 1
  %tmp357 = icmp slt i32 %v1_fe1c, 1
  br i1 %tmp357, label %dec_label_pc_fa00, label %dec_label_pc_fe30

dec_label_pc_fe30:                                ; preds = %dec_label_pc_fe28
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_fe34 = call i32 @function_103fc(i32 7)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_fe44 = call i32 @function_10318(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_fe44, i32* %r0.global-to-local, align 4
  %v3_fe48 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fe48, i32* %r2.global-to-local, align 4
  store i32 %v3_fe44, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe54 = load i32, i32* @r6, align 4
  %v1_fe54 = add i32 %v0_fe54, 4
  %v2_fe54 = inttoptr i32 %v1_fe54 to i32*
  %v3_fe54 = load i32, i32* %v2_fe54, align 4
  store i32 %v3_fe54, i32* %r0.global-to-local, align 4
  %v4_fe58 = inttoptr i32 %v3_fe44 to i32*
  %v5_fe58 = call i32 @function_11b20(i32 %v3_fe54, i32* %v4_fe58, i32 %v3_fe48, i32 16384)
  store i32 %v5_fe58, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13bd0.201 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe68 = load i32, i32* @r6, align 4
  %v1_fe68 = add i32 %v0_fe68, 4
  %v2_fe68 = inttoptr i32 %v1_fe68 to i32*
  %v3_fe68 = load i32, i32* %v2_fe68, align 4
  store i32 %v3_fe68, i32* %r0.global-to-local, align 4
  %v5_fe6c = call i32 @function_11b20(i32 %v3_fe68, i32* bitcast ([3 x i8]* @global_var_13bd0.201 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_fe74 = call i32 @function_10344(i32 7)
  store i32 %v1_fe74, i32* %r0.global-to-local, align 4
  %v0_fe78 = load i32, i32* @r6, align 4
  %v1_fe78 = add i32 %v0_fe78, 24
  %v2_fe78 = inttoptr i32 %v1_fe78 to i32*
  %v3_fe78 = load i32, i32* %v2_fe78, align 4
  store i32 %v3_fe78, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_fe80 = add i32 %v0_fe78, 12
  %v3_fe80 = inttoptr i32 %v2_fe80 to i32*
  store i32 9, i32* %v3_fe80, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fe88:                                ; preds = %dec_label_pc_f8f4
  %v1_fe88 = add i32 %v0_f8f4, 24
  %v2_fe88 = inttoptr i32 %v1_fe88 to i32*
  %v3_fe88 = load i32, i32* %v2_fe88, align 4
  store i32 %v3_fe88, i32* %ip.global-to-local, align 4
  %v1_fe8c = add i32 %v3_fe88, -1
  store i32 %v1_fe8c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe90 = icmp eq i32 %v1_fe8c, 0
  store i1 %v2_fe90, i1* %cpsr_z.global-to-local, align 1
  %v5_fe94 = icmp sgt i32 %v1_fe8c, 0
  br i1 %v5_fe94, label %dec_label_pc_febc, label %dec_label_pc_f878.backedge.thread

dec_label_pc_fe9c:                                ; preds = %bb358
  %v2_fe9c = icmp ugt i8 %v3_fec0, 35
  store i1 %v2_fe9c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe9c = icmp eq i8 %v3_fec0, 36
  store i1 %v7_fe9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe9c, label %dec_label_pc_fed0, label %dec_label_pc_fea4

dec_label_pc_fea4:                                ; preds = %dec_label_pc_fe9c
  %v2_fea4 = icmp ugt i8 %v3_fec0, 34
  store i1 %v2_fea4, i1* %cpsr_c.global-to-local, align 1
  %v7_fea4 = icmp eq i8 %v3_fec0, 35
  store i1 %v7_fea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fea4, label %dec_label_pc_fed0, label %dec_label_pc_feac

dec_label_pc_feac:                                ; preds = %dec_label_pc_fea4
  %v2_feac = icmp ugt i8 %v3_fec0, 36
  store i1 %v2_feac, i1* %cpsr_c.global-to-local, align 1
  %v7_feac = icmp eq i8 %v3_fec0, 37
  store i1 %v7_feac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_feac, label %dec_label_pc_fed0, label %dec_label_pc_feb4

dec_label_pc_feb4:                                ; preds = %dec_label_pc_feac
  %v1_feb4 = add i32 %v0_fed0, -1
  store i32 %v1_feb4, i32* %r0.global-to-local, align 4
  %v2_feb4 = icmp ne i32 %v0_fed0, 0
  store i1 %v2_feb4, i1* %cpsr_c.global-to-local, align 1
  %v7_feb4 = icmp eq i32 %v0_fed0, 1
  store i1 %v7_feb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_feb4, label %dec_label_pc_f878.backedge.thread475, label %dec_label_pc_febc

dec_label_pc_febc:                                ; preds = %dec_label_pc_fe88, %dec_label_pc_feb4
  %v0_fed0 = phi i32 [ %v1_feb4, %dec_label_pc_feb4 ], [ %v1_fe8c, %dec_label_pc_fe88 ]
  %v2_febc = add i32 %v0_fed0, %v0_f8f4
  store i32 %v2_febc, i32* %r3.global-to-local, align 4
  %v1_fec0 = add i32 %v2_febc, 28
  %v2_fec0 = inttoptr i32 %v1_fec0 to i8*
  %v3_fec0 = load i8, i8* %v2_fec0, align 1
  %v4_fec0 = zext i8 %v3_fec0 to i32
  store i32 %v4_fec0, i32* %r3.global-to-local, align 4
  %v2_fec4 = icmp ugt i8 %v3_fec0, 61
  store i1 %v2_fec4, i1* %cpsr_c.global-to-local, align 1
  %v7_fec4 = icmp eq i8 %v3_fec0, 62
  store i1 %v7_fec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fec4, label %dec_label_pc_fed0, label %bb358

bb358:                                            ; preds = %dec_label_pc_febc
  %v3_fec8 = icmp ugt i8 %v3_fec0, 57
  store i1 %v3_fec8, i1* %cpsr_c.global-to-local, align 1
  %v8_fec8 = icmp eq i8 %v3_fec0, 58
  store i1 %v8_fec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fec8, label %dec_label_pc_fed0, label %dec_label_pc_fe9c

dec_label_pc_fed0:                                ; preds = %dec_label_pc_febc, %bb358, %dec_label_pc_feac, %dec_label_pc_fea4, %dec_label_pc_fe9c
  %v1_fed0 = add i32 %v0_fed0, 1
  store i32 %v1_fed0, i32* @r7, align 4
  %v2_fed4 = icmp eq i32 %v1_fed0, -1
  store i1 %v2_fed4, i1* %cpsr_c.global-to-local, align 1
  %v7_fed4 = icmp eq i32 %v0_fed0, -2
  store i1 %v7_fed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fed4, label %dec_label_pc_f878.backedge.thread475, label %dec_label_pc_fedc

dec_label_pc_fedc:                                ; preds = %dec_label_pc_fed0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fedc = icmp eq i32 %v1_fed0, 0
  store i1 %v2_fedc, i1* %cpsr_z.global-to-local, align 1
  %tmp359 = icmp slt i32 %v1_fed0, 1
  br i1 %tmp359, label %dec_label_pc_fa00, label %dec_label_pc_fee4

dec_label_pc_fee4:                                ; preds = %dec_label_pc_fedc
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_fee8 = call i32 @function_103fc(i32 8)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_fef8 = call i32 @function_10318(i32 8, i32* nonnull %stack_var_-56)
  store i32 %v3_fef8, i32* %r0.global-to-local, align 4
  %v3_fefc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fefc, i32* %r2.global-to-local, align 4
  store i32 %v3_fef8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ff08 = load i32, i32* @r6, align 4
  %v1_ff08 = add i32 %v0_ff08, 4
  %v2_ff08 = inttoptr i32 %v1_ff08 to i32*
  %v3_ff08 = load i32, i32* %v2_ff08, align 4
  store i32 %v3_ff08, i32* %r0.global-to-local, align 4
  %v4_ff0c = inttoptr i32 %v3_fef8 to i32*
  %v5_ff0c = call i32 @function_11b20(i32 %v3_ff08, i32* %v4_ff0c, i32 %v3_fefc, i32 16384)
  store i32 %v5_ff0c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13bd0.201 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ff1c = load i32, i32* @r6, align 4
  %v1_ff1c = add i32 %v0_ff1c, 4
  %v2_ff1c = inttoptr i32 %v1_ff1c to i32*
  %v3_ff1c = load i32, i32* %v2_ff1c, align 4
  store i32 %v3_ff1c, i32* %r0.global-to-local, align 4
  %v5_ff20 = call i32 @function_11b20(i32 %v3_ff1c, i32* bitcast ([3 x i8]* @global_var_13bd0.201 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_ff28 = call i32 @function_10344(i32 8)
  store i32 %v1_ff28, i32* %r0.global-to-local, align 4
  %v0_ff2c = load i32, i32* @r6, align 4
  %v1_ff2c = add i32 %v0_ff2c, 24
  %v2_ff2c = inttoptr i32 %v1_ff2c to i32*
  %v3_ff2c = load i32, i32* %v2_ff2c, align 4
  store i32 %v3_ff2c, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_ff34 = add i32 %v0_ff2c, 12
  %v3_ff34 = inttoptr i32 %v2_ff34 to i32*
  store i32 10, i32* %v3_ff34, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_ff3c:                                ; preds = %dec_label_pc_f8f4
  %v1_ff3c = add i32 %v0_f8f4, 24
  %v2_ff3c = inttoptr i32 %v1_ff3c to i32*
  %v3_ff3c = load i32, i32* %v2_ff3c, align 4
  store i32 %v3_ff3c, i32* %ip.global-to-local, align 4
  %v1_ff40 = add i32 %v3_ff3c, -1
  store i32 %v1_ff40, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff44 = icmp eq i32 %v1_ff40, 0
  store i1 %v2_ff44, i1* %cpsr_z.global-to-local, align 1
  %v5_ff48 = icmp sgt i32 %v1_ff40, 0
  br i1 %v5_ff48, label %dec_label_pc_ff70, label %dec_label_pc_f878.backedge.thread

dec_label_pc_ff50:                                ; preds = %bb360
  %v2_ff50 = icmp ugt i8 %v3_ff74, 35
  store i1 %v2_ff50, i1* %cpsr_c.global-to-local, align 1
  %v7_ff50 = icmp eq i8 %v3_ff74, 36
  store i1 %v7_ff50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff50, label %dec_label_pc_ff84, label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %dec_label_pc_ff50
  %v2_ff58 = icmp ugt i8 %v3_ff74, 34
  store i1 %v2_ff58, i1* %cpsr_c.global-to-local, align 1
  %v7_ff58 = icmp eq i8 %v3_ff74, 35
  store i1 %v7_ff58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff58, label %dec_label_pc_ff84, label %dec_label_pc_ff60

dec_label_pc_ff60:                                ; preds = %dec_label_pc_ff58
  %v2_ff60 = icmp ugt i8 %v3_ff74, 36
  store i1 %v2_ff60, i1* %cpsr_c.global-to-local, align 1
  %v7_ff60 = icmp eq i8 %v3_ff74, 37
  store i1 %v7_ff60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff60, label %dec_label_pc_ff84, label %dec_label_pc_ff68

dec_label_pc_ff68:                                ; preds = %dec_label_pc_ff60
  %v1_ff68 = add i32 %v0_ff84, -1
  store i32 %v1_ff68, i32* %r0.global-to-local, align 4
  %v2_ff68 = icmp ne i32 %v0_ff84, 0
  store i1 %v2_ff68, i1* %cpsr_c.global-to-local, align 1
  %v7_ff68 = icmp eq i32 %v0_ff84, 1
  store i1 %v7_ff68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff68, label %dec_label_pc_f878.backedge.thread475, label %dec_label_pc_ff70

dec_label_pc_ff70:                                ; preds = %dec_label_pc_ff3c, %dec_label_pc_ff68
  %v0_ff84 = phi i32 [ %v1_ff68, %dec_label_pc_ff68 ], [ %v1_ff40, %dec_label_pc_ff3c ]
  %v2_ff70 = add i32 %v0_ff84, %v0_f8f4
  store i32 %v2_ff70, i32* %r3.global-to-local, align 4
  %v1_ff74 = add i32 %v2_ff70, 28
  %v2_ff74 = inttoptr i32 %v1_ff74 to i8*
  %v3_ff74 = load i8, i8* %v2_ff74, align 1
  %v4_ff74 = zext i8 %v3_ff74 to i32
  store i32 %v4_ff74, i32* %r3.global-to-local, align 4
  %v2_ff78 = icmp ugt i8 %v3_ff74, 61
  store i1 %v2_ff78, i1* %cpsr_c.global-to-local, align 1
  %v7_ff78 = icmp eq i8 %v3_ff74, 62
  store i1 %v7_ff78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff78, label %dec_label_pc_ff84, label %bb360

bb360:                                            ; preds = %dec_label_pc_ff70
  %v3_ff7c = icmp ugt i8 %v3_ff74, 57
  store i1 %v3_ff7c, i1* %cpsr_c.global-to-local, align 1
  %v8_ff7c = icmp eq i8 %v3_ff74, 58
  store i1 %v8_ff7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ff7c, label %dec_label_pc_ff84, label %dec_label_pc_ff50

dec_label_pc_ff84:                                ; preds = %dec_label_pc_ff70, %bb360, %dec_label_pc_ff60, %dec_label_pc_ff58, %dec_label_pc_ff50
  %v1_ff84 = add i32 %v0_ff84, 1
  store i32 %v1_ff84, i32* @r7, align 4
  %v2_ff88 = icmp eq i32 %v1_ff84, -1
  store i1 %v2_ff88, i1* %cpsr_c.global-to-local, align 1
  %v7_ff88 = icmp eq i32 %v0_ff84, -2
  store i1 %v7_ff88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff88, label %dec_label_pc_f878.backedge.thread475, label %dec_label_pc_ff90

dec_label_pc_ff90:                                ; preds = %dec_label_pc_ff84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff90 = icmp eq i32 %v1_ff84, 0
  store i1 %v2_ff90, i1* %cpsr_z.global-to-local, align 1
  %tmp361 = icmp slt i32 %v1_ff84, 1
  br i1 %tmp361, label %dec_label_pc_fa00, label %dec_label_pc_ff98

dec_label_pc_ff98:                                ; preds = %dec_label_pc_ff90
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_ff9c = call i32 @function_103fc(i32 4)
  store i32 %v2_fce0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_ffac = call i32 @function_10318(i32 4, i32* nonnull %stack_var_-48)
  store i32 %v3_ffac, i32* %r0.global-to-local, align 4
  %v3_ffb0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_ffb0, i32* %r2.global-to-local, align 4
  store i32 %v3_ffac, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ffbc = load i32, i32* @r6, align 4
  %v1_ffbc = add i32 %v0_ffbc, 4
  %v2_ffbc = inttoptr i32 %v1_ffbc to i32*
  %v3_ffbc = load i32, i32* %v2_ffbc, align 4
  store i32 %v3_ffbc, i32* %r0.global-to-local, align 4
  %v4_ffc0 = inttoptr i32 %v3_ffac to i32*
  %v5_ffc0 = call i32 @function_11b20(i32 %v3_ffbc, i32* %v4_ffc0, i32 %v3_ffb0, i32 16384)
  store i32 %v5_ffc0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13bd0.201 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ffd0 = load i32, i32* @r6, align 4
  %v1_ffd0 = add i32 %v0_ffd0, 4
  %v2_ffd0 = inttoptr i32 %v1_ffd0 to i32*
  %v3_ffd0 = load i32, i32* %v2_ffd0, align 4
  store i32 %v3_ffd0, i32* %r0.global-to-local, align 4
  %v5_ffd4 = call i32 @function_11b20(i32 %v3_ffd0, i32* bitcast ([3 x i8]* @global_var_13bd0.201 to i32*), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_ffdc = call i32 @function_10344(i32 4)
  store i32 %v1_ffdc, i32* %r0.global-to-local, align 4
  %v0_ffe0 = load i32, i32* @r6, align 4
  %v1_ffe0 = add i32 %v0_ffe0, 24
  %v2_ffe0 = inttoptr i32 %v1_ffe0 to i32*
  %v3_ffe0 = load i32, i32* %v2_ffe0, align 4
  store i32 %v3_ffe0, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_ffe8 = add i32 %v0_ffe0, 12
  %v3_ffe8 = inttoptr i32 %v2_ffe8 to i32*
  store i32 8, i32* %v3_ffe8, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fff0:                                ; preds = %dec_label_pc_f978
  store i32 ptrtoint (i32* @global_var_13be2.203 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_fffc, i32* @r0, align 4
  %v3_10000 = call i32 @function_118e0(i32 %v2_fffc, i32 ptrtoint (i32* @global_var_13be2.203 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_1000c, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_13bd9.205 to i32), i32* @r1, align 4
  %v3_10014 = call i32 @function_118e0(i32 %v2_1000c, i32 ptrtoint (i32* @global_var_13bd9.205 to i32), i32 9)
  store i32 %v3_10014, i32* %r0.global-to-local, align 4
  %v0_10018 = load i32, i32* @r6, align 4
  %v1_10018 = add i32 %v0_10018, 24
  %v2_10018 = inttoptr i32 %v1_10018 to i32*
  %v3_10018 = load i32, i32* %v2_10018, align 4
  store i32 %v3_10018, i32* %ip.global-to-local, align 4
  %v0_1001c = load i32, i32* @r5, align 4
  %v1_1001c = add i32 %v0_1001c, 2
  store i32 %v1_1001c, i32* %r2.global-to-local, align 4
  %v0_10020 = load i32, i32* %r8.global-to-local, align 4
  %v2_10020 = add i32 %v0_10020, %v3_10018
  store i32 %v2_10020, i32* %r3.global-to-local, align 4
  %v3_10024 = icmp uge i32 %v2_10020, %v1_1001c
  store i1 %v3_10024, i1* %cpsr_c.global-to-local, align 1
  %v9_10024 = icmp eq i32 %v2_10020, %v1_1001c
  store i1 %v9_10024, i1* %cpsr_z.global-to-local, align 1
  %v2_10028 = xor i1 %v3_10024, true
  %v3_10028 = or i1 %v9_10024, %v2_10028
  br i1 %v3_10028, label %dec_label_pc_fff0.dec_label_pc_f9f0.loopexit_crit_edge, label %dec_label_pc_1002c

dec_label_pc_fff0.dec_label_pc_f9f0.loopexit_crit_edge: ; preds = %dec_label_pc_fff0
  %v0_f9f0.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f9f0

dec_label_pc_1002c:                               ; preds = %dec_label_pc_fff0
  %v0_1002c = load i32, i32* @r4, align 4
  %v1_1002c = add i32 %v0_1002c, 1
  %v2_1002c = inttoptr i32 %v1_1002c to i8*
  %v3_1002c = load i8, i8* %v2_1002c, align 1
  %v4_1002c = zext i8 %v3_1002c to i32
  store i32 %v4_1002c, i32* %r3.global-to-local, align 4
  %v2_10030 = icmp ugt i8 %v3_1002c, 30
  store i1 %v2_10030, i1* %cpsr_c.global-to-local, align 1
  %v7_10030 = icmp eq i8 %v3_1002c, 31
  store i1 %v7_10030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10030, label %dec_label_pc_101bc, label %dec_label_pc_10038

dec_label_pc_10038:                               ; preds = %dec_label_pc_1002c
  %v1_10038 = add i32 %v0_1002c, -1
  %v2_10038 = inttoptr i32 %v1_10038 to i8*
  %v3_10038 = load i8, i8* %v2_10038, align 1
  %v4_10038 = zext i8 %v3_10038 to i32
  store i32 %v4_10038, i32* %r3.global-to-local, align 4
  %v2_1003c = icmp ugt i8 %v3_10038, -4
  store i1 %v2_1003c, i1* %cpsr_c.global-to-local, align 1
  %v7_1003c = icmp eq i8 %v3_10038, -3
  store i1 %v7_1003c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1003c, label %bb362, label %dec_label_pc_10048

bb362:                                            ; preds = %dec_label_pc_10038
  %v1_10040 = load i32, i32* %sl.global-to-local, align 4
  %v2_10040 = trunc i32 %v1_10040 to i8
  store i8 %v2_10040, i8* %v2_10038, align 1
  %v0_10044.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10044.pr, label %dec_label_pc_f98c, label %.dec_label_pc_10048_crit_edge

.dec_label_pc_10048_crit_edge:                    ; preds = %bb362
  %v0_10048.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10048

dec_label_pc_10048:                               ; preds = %.dec_label_pc_10048_crit_edge, %dec_label_pc_10038
  %v0_10048 = phi i32 [ %v0_10048.pre, %.dec_label_pc_10048_crit_edge ], [ %v4_10038, %dec_label_pc_10038 ]
  %v2_10048 = icmp ugt i32 %v0_10048, 250
  store i1 %v2_10048, i1* %cpsr_c.global-to-local, align 1
  %v7_10048 = icmp eq i32 %v0_10048, 251
  store i1 %v7_10048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10048, label %bb363, label %dec_label_pc_f98c

bb363:                                            ; preds = %dec_label_pc_10048
  store i32 -3, i32* %r2.global-to-local, align 4
  %v3_10050 = load i32, i32* @r4, align 4
  %v4_10050 = add i32 %v3_10050, -1
  %v5_10050 = inttoptr i32 %v4_10050 to i8*
  store i8 -3, i8* %v5_10050, align 1
  br label %dec_label_pc_f98c

dec_label_pc_10058:                               ; preds = %dec_label_pc_fadc, %dec_label_pc_fab8, %dec_label_pc_faf8
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_1005c = call i32 @function_103fc(i32 25)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_1006c = call i32 @function_10318(i32 25, i32* nonnull %stack_var_-56)
  %v3_10070 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_1006c, i32* %r2.global-to-local, align 4
  %v1_10078 = add i32 %v3_10070, -1
  store i32 %v1_10078, i32* %r3.global-to-local, align 4
  %v0_1007c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1007c, i32* %r0.global-to-local, align 4
  %v0_10080 = load i32, i32* @r6, align 4
  %v1_10080 = add i32 %v0_10080, 24
  %v2_10080 = inttoptr i32 %v1_10080 to i32*
  %v3_10080 = load i32, i32* %v2_10080, align 4
  store i32 %v3_10080, i32* %r1.global-to-local, align 4
  %v4_10084 = call i32 @function_10a8c(i32 %v0_1007c, i32 %v3_10080, i32 %v3_1006c, i32 %v1_10078)
  store i32 %v4_10084, i32* %r0.global-to-local, align 4
  %v1_10088 = add i32 %v4_10084, 1
  store i32 %v1_10088, i32* @r7, align 4
  %v2_10088 = icmp eq i32 %v4_10084, -1
  store i1 %v2_10088, i1* %cpsr_c.global-to-local, align 1
  %v7_10088 = icmp eq i32 %v1_10088, 0
  store i1 %v7_10088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10088, label %thread-pre-split98, label %bb364

bb364:                                            ; preds = %dec_label_pc_10058
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split98

thread-pre-split98:                               ; preds = %dec_label_pc_10058, %bb364
  %v0_10090 = phi i1 [ false, %bb364 ], [ true, %dec_label_pc_10058 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_10090, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10224 = call i32 @function_10344(i32 25)
  store i32 %v1_10224, i32* %r0.global-to-local, align 4
  br i1 %v0_10090, label %dec_label_pc_10220, label %dec_label_pc_10098

dec_label_pc_10098:                               ; preds = %thread-pre-split98
  %v0_100a0 = load i32, i32* @r7, align 4
  %v3_100a0 = icmp eq i32 %v0_100a0, -1
  store i1 %v3_100a0, i1* %cpsr_c.global-to-local, align 1
  %v8_100a0 = icmp eq i32 %v0_100a0, -1
  store i1 %v8_100a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_100a0, label %dec_label_pc_f874.loopexit, label %dec_label_pc_fb0c

dec_label_pc_100ac:                               ; preds = %dec_label_pc_fd2c
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_100b8 = call i32 @function_103fc(i32 9)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_100c8 = call i32 @function_10318(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_100c8, i32* %r0.global-to-local, align 4
  %v3_100cc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_100c8, i32* %r2.global-to-local, align 4
  %v1_100d4 = add i32 %v3_100cc, -1
  store i32 %v1_100d4, i32* %r3.global-to-local, align 4
  %v0_100d8 = load i32, i32* @r6, align 4
  %v1_100d8 = add i32 %v0_100d8, 24
  %v2_100d8 = inttoptr i32 %v1_100d8 to i32*
  %v3_100d8 = load i32, i32* %v2_100d8, align 4
  store i32 %v3_100d8, i32* %r1.global-to-local, align 4
  %v0_100dc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_100dc, i32* %r0.global-to-local, align 4
  %v4_100e0 = call i32 @function_10a8c(i32 %v0_100dc, i32 %v3_100d8, i32 %v3_100c8, i32 %v1_100d4)
  store i32 %v4_100e0, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_100ec = call i32 @function_10344(i32 9)
  store i32 %v1_100ec, i32* %r0.global-to-local, align 4
  %v0_100f0 = load i32, i32* @r7, align 4
  %v2_100f0 = icmp eq i32 %v0_100f0, -1
  store i1 %v2_100f0, i1* %cpsr_c.global-to-local, align 1
  %v7_100f0 = icmp eq i32 %v0_100f0, -1
  store i1 %v7_100f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100f0, label %dec_label_pc_f874.loopexit, label %dec_label_pc_100f8

dec_label_pc_100f8:                               ; preds = %dec_label_pc_100ac
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100f8 = icmp eq i32 %v0_100f0, 0
  store i1 %v2_100f8, i1* %cpsr_z.global-to-local, align 1
  %tmp365 = icmp slt i32 %v0_100f0, 1
  br i1 %tmp365, label %dec_label_pc_fa00, label %dec_label_pc_10100

dec_label_pc_10100:                               ; preds = %dec_label_pc_100f8
  %v0_10100 = load i32, i32* @r6, align 4
  %v1_10100 = add i32 %v0_10100, 21
  %v2_10100 = inttoptr i32 %v1_10100 to i8*
  %v3_10100 = load i8, i8* %v2_10100, align 1
  %v4_10100 = zext i8 %v3_10100 to i32
  store i32 %v4_10100, i32* %r3.global-to-local, align 4
  %v1_10104 = add i32 %v0_10100, 20
  %v2_10104 = inttoptr i32 %v1_10104 to i8*
  %v3_10104 = load i8, i8* %v2_10104, align 1
  %v4_10104 = zext i8 %v3_10104 to i32
  store i32 %v4_10104, i32* %r2.global-to-local, align 4
  %v1_10108 = add i32 %v0_10100, 16
  %v2_10108 = inttoptr i32 %v1_10108 to i32*
  %v3_10108 = load i32, i32* %v2_10108, align 4
  store i32 %v3_10108, i32* %r1.global-to-local, align 4
  %v4_1010c = mul nuw nsw i32 %v4_10100, 256
  %v5_1010c = or i32 %v4_10104, %v4_1010c
  store i32 %v5_1010c, i32* %r2.global-to-local, align 4
  %v1_10110 = and i32 %v4_10104, 128
  %v2_10110 = icmp ne i32 %v1_10110, 0
  store i1 %v2_10110, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_10100, i32* %r3.global-to-local, align 4
  store i32 %v3_10108, i32* %stack_var_-48, align 4
  store i32 %v5_1010c, i32* %stack_var_-38, align 4
  %v1_10120 = inttoptr i32 %v0_10100 to i32*
  %v2_10120 = load i32, i32* %v1_10120, align 4
  store i32 %v2_10120, i32* %sl.global-to-local, align 4
  %v0_10124 = call i32 @function_112f8()
  store i32 %v0_10124, i32* %r0.global-to-local, align 4
  %v7_10128 = icmp eq i32 %v0_10124, -1
  %.377 = zext i1 %v7_10128 to i32
  store i32 %.377, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10134 = icmp eq i32 %v0_10124, 0
  store i1 %v2_10134, i1* %cpsr_z.global-to-local, align 1
  %tmp368 = icmp slt i32 %v0_10124, 1
  br i1 %tmp368, label %bb369, label %.thread101

.thread101:                                       ; preds = %dec_label_pc_10100
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10148

bb369:                                            ; preds = %dec_label_pc_10100
  store i32 %.377, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10140 = icmp eq i1 %v7_10128, false
  store i1 %v2_10140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10140, label %dec_label_pc_10288, label %dec_label_pc_10148

dec_label_pc_10148:                               ; preds = %.thread101, %bb369
  %v0_10148 = load i32, i32* @r6, align 4
  %v1_10148 = add i32 %v0_10148, 4
  %v2_10148 = inttoptr i32 %v1_10148 to i32*
  %v3_10148 = load i32, i32* %v2_10148, align 4
  store i32 %v3_10148, i32* %r0.global-to-local, align 4
  %v1_1014c = call i32 @function_112cc(i32 %v3_10148)
  store i32 %v1_1014c, i32* %r0.global-to-local, align 4
  %v0_10150 = load i32, i32* @r6, align 4
  %v1_10150 = add i32 %v0_10150, 24
  %v2_10150 = inttoptr i32 %v1_10150 to i32*
  %v3_10150 = load i32, i32* %v2_10150, align 4
  store i32 %v3_10150, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_10158 = load i32, i32* @r4, align 4
  %v2_10158 = add i32 %v0_10150, 4
  %v3_10158 = inttoptr i32 %v2_10158 to i32*
  store i32 %v0_10158, i32* %v3_10158, align 4
  %v0_1015c = load i32, i32* %r2.global-to-local, align 4
  %v1_1015c = load i32, i32* @r6, align 4
  %v2_1015c = add i32 %v1_1015c, 12
  %v3_1015c = inttoptr i32 %v2_1015c to i32*
  store i32 %v0_1015c, i32* %v3_1015c, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_10164:                               ; preds = %dec_label_pc_f890
  br i1 %v2_f8b4, label %dec_label_pc_10230, label %dec_label_pc_10168

dec_label_pc_10168:                               ; preds = %dec_label_pc_10164
  %v3_10168 = icmp eq i32 %v5_f8b0, -1
  store i1 %v3_10168, i1* %cpsr_c.global-to-local, align 1
  %v8_10168 = icmp eq i32 %v5_f8b0, -1
  store i1 %v8_10168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10168, label %dec_label_pc_10170, label %dec_label_pc_f8dc

dec_label_pc_10170:                               ; preds = %dec_label_pc_10168
  %v0_10170 = load i32, i32* @sb, align 4
  %v1_10170 = inttoptr i32 %v0_10170 to i32*
  %v2_10170 = load i32, i32* %v1_10170, align 4
  store i32 %v2_10170, i32* %r3.global-to-local, align 4
  %v2_10174 = icmp ugt i32 %v2_10170, 10
  store i1 %v2_10174, i1* %cpsr_c.global-to-local, align 1
  %v7_10174 = icmp eq i32 %v2_10170, 11
  store i1 %v7_10174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10174, label %dec_label_pc_f6ac, label %dec_label_pc_1017c

dec_label_pc_1017c:                               ; preds = %dec_label_pc_10170, %dec_label_pc_10230
  %v0_1017c = load i32, i32* @r6, align 4
  %v1_1017c = add i32 %v0_1017c, 4
  %v2_1017c = inttoptr i32 %v1_1017c to i32*
  %v3_1017c = load i32, i32* %v2_1017c, align 4
  store i32 %v3_1017c, i32* %r0.global-to-local, align 4
  %v1_10180 = call i32 @function_112cc(i32 %v3_1017c)
  store i32 %v1_10180, i32* %r0.global-to-local, align 4
  %v0_10184 = load i32, i32* @r6, align 4
  %v1_10184 = add i32 %v0_10184, 284
  %v2_10184 = inttoptr i32 %v1_10184 to i8*
  %v3_10184 = load i8, i8* %v2_10184, align 1
  %v4_10184 = zext i8 %v3_10184 to i32
  %v1_10188 = add nuw nsw i32 %v4_10184, 1
  %v1_1018c = urem i32 %v1_10188, 256
  store i32 %v1_1018c, i32* %r3.global-to-local, align 4
  %v2_10190 = icmp ugt i32 %v1_1018c, 8
  store i1 %v2_10190, i1* %cpsr_c.global-to-local, align 1
  %v7_10190 = icmp eq i32 %v1_1018c, 9
  store i1 %v7_10190, i1* %cpsr_z.global-to-local, align 1
  %v2_10194 = xor i1 %v7_10190, true
  %v3_10194 = and i1 %v2_10190, %v2_10194
  br i1 %v3_10194, label %bb370, label %bb371

bb370:                                            ; preds = %dec_label_pc_1017c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb371

bb371:                                            ; preds = %dec_label_pc_1017c, %bb370
  store i32 -1, i32* @r4, align 4
  %v1_1019c = trunc i32 %v1_10188 to i8
  store i8 %v1_1019c, i8* %v2_10184, align 1
  %v0_101a0 = load i32, i32* @r4, align 4
  %v1_101a0 = load i32, i32* @r6, align 4
  %v2_101a0 = add i32 %v1_101a0, 4
  %v3_101a0 = inttoptr i32 %v2_101a0 to i32*
  store i32 %v0_101a0, i32* %v3_101a0, align 4
  %v0_101a4 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_101a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_101a4 = xor i1 %v1_101a4, true
  %v3_101a4 = and i1 %v0_101a4, %v2_101a4
  br i1 %v3_101a4, label %bb372, label %.thread240

bb372:                                            ; preds = %bb371
  %v4_101a4 = load i32, i32* %r0.global-to-local, align 4
  %v5_101a4 = load i32, i32* @r6, align 4
  %v6_101a4 = add i32 %v5_101a4, 12
  %v7_101a4 = inttoptr i32 %v6_101a4 to i32*
  store i32 %v4_101a4, i32* %v7_101a4, align 4
  %v4_101a8 = load i32, i32* %r0.global-to-local, align 4
  %v5_101a8 = trunc i32 %v4_101a8 to i8
  %v6_101a8 = load i32, i32* @r6, align 4
  %v7_101a8 = add i32 %v6_101a8, 284
  %v8_101a8 = inttoptr i32 %v7_101a8 to i8*
  store i8 %v5_101a8, i8* %v8_101a8, align 1
  %v0_101ac.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_101ac.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread240

.thread240:                                       ; preds = %bb371, %bb372
  %v1_101ac = phi i1 [ %v1_101ac.pre, %bb372 ], [ %v1_101a4, %bb371 ]
  %v0_101ac = phi i1 [ %v0_101ac.pre, %bb372 ], [ %v0_101a4, %bb371 ]
  %v2_101ac = xor i1 %v1_101ac, true
  %v3_101ac = and i1 %v0_101ac, %v2_101ac
  br i1 %v3_101ac, label %dec_label_pc_f6ac, label %dec_label_pc_101b0

dec_label_pc_101b0:                               ; preds = %.thread240
  %v0_101b0 = load i32, i32* @r6, align 4
  store i32 %v0_101b0, i32* @r0, align 4
  %v0_101b4 = call i32 @function_e990()
  store i32 %v0_101b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6ac

dec_label_pc_101bc:                               ; preds = %dec_label_pc_1002c
  store i32 %v2_fffc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_101cc = add i32 %v0_10018, 4
  %v2_101cc = inttoptr i32 %v1_101cc to i32*
  %v3_101cc = load i32, i32* %v2_101cc, align 4
  store i32 %v3_101cc, i32* %r0.global-to-local, align 4
  %v5_101d0 = call i32 @function_11b20(i32 %v3_101cc, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_101d0, i32* %r0.global-to-local, align 4
  store i32 %v2_f640, i32* %r1.global-to-local, align 4
  %v0_101d8 = load i32, i32* @r6, align 4
  %v1_101d8 = add i32 %v0_101d8, 4
  %v2_101d8 = inttoptr i32 %v1_101d8 to i32*
  %v3_101d8 = load i32, i32* %v2_101d8, align 4
  store i32 %v3_101d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9d0

dec_label_pc_101e8:                               ; preds = %dec_label_pc_f880
  store i32 %.pre, i32* @r0, align 4
  %v1_101f0 = add i32 %v0_101e8, 92
  store i32 %v1_101f0, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_101f8 = call i32 @function_118f0(i32 %.pre, i32 %v1_101f0, i32 192)
  store i32 %v3_101f8, i32* %r0.global-to-local, align 4
  %v0_101fc = load i32, i32* @r6, align 4
  %v1_101fc = add i32 %v0_101fc, 24
  %v2_101fc = inttoptr i32 %v1_101fc to i32*
  %v3_101fc = load i32, i32* %v2_101fc, align 4
  store i32 %v3_101fc, i32* %r3.global-to-local, align 4
  %v1_10200 = add i32 %v3_101fc, -64
  store i32 %v1_10200, i32* %ip.global-to-local, align 4
  store i32 %v1_10200, i32* %v2_101fc, align 4
  br label %dec_label_pc_f890

dec_label_pc_1020c:                               ; preds = %dec_label_pc_fd68
  %v0_1020c = load i32, i32* @r6, align 4
  store i32 %v0_1020c, i32* @r0, align 4
  %v0_10210 = call i32 @function_e990()
  store i32 %v0_10210, i32* %r0.global-to-local, align 4
  %v0_10214 = load i32, i32* @r6, align 4
  %v1_10214 = add i32 %v0_10214, 24
  %v2_10214 = inttoptr i32 %v1_10214 to i32*
  %v3_10214 = load i32, i32* %v2_10214, align 4
  store i32 %v3_10214, i32* %ip.global-to-local, align 4
  %v0_10218 = load i32, i32* @r4, align 4
  store i32 %v0_10218, i32* @r7, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_10220:                               ; preds = %thread-pre-split98
  %v0_10228 = load i32, i32* @r6, align 4
  %v1_10228 = add i32 %v0_10228, 12
  %v2_10228 = inttoptr i32 %v1_10228 to i32*
  %v3_10228 = load i32, i32* %v2_10228, align 4
  br label %dec_label_pc_f878.backedge

dec_label_pc_10230:                               ; preds = %dec_label_pc_10164
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_10234 = load i32, i32* @sb, align 4
  %v2_10234 = inttoptr i32 %v1_10234 to i32*
  store i32 104, i32* %v2_10234, align 4
  br label %dec_label_pc_1017c

dec_label_pc_1023c:                               ; preds = %dec_label_pc_f794, %dec_label_pc_f74c
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10240

dec_label_pc_10240:                               ; preds = %dec_label_pc_f7bc, %dec_label_pc_1023c
  %v0_10248 = phi i32 [ 0, %dec_label_pc_1023c ], [ %v0_f79c, %dec_label_pc_f7bc ]
  %v0_10240 = load i32, i32* @r6, align 4
  %v1_10240 = add i32 %v0_10240, 4
  %v2_10240 = inttoptr i32 %v1_10240 to i32*
  %v3_10240 = load i32, i32* %v2_10240, align 4
  store i32 %v3_10240, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_10248 = inttoptr i32 %v0_10240 to i32*
  store i32 %v0_10248, i32* %v2_10248, align 4
  %v0_1024c = load i32, i32* %ip.global-to-local, align 4
  %v1_1024c = load i32, i32* @r6, align 4
  %v2_1024c = add i32 %v1_1024c, 24
  %v3_1024c = inttoptr i32 %v2_1024c to i32*
  store i32 %v0_1024c, i32* %v3_1024c, align 4
  %v0_f684.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f684

dec_label_pc_10254:                               ; preds = %dec_label_pc_f70c
  %v0_10254 = load i32, i32* @r6, align 4
  %v1_10254 = add i32 %v0_10254, 4
  %v2_10254 = inttoptr i32 %v1_10254 to i32*
  %v3_10254 = load i32, i32* %v2_10254, align 4
  store i32 %v3_10254, i32* %r0.global-to-local, align 4
  %v1_10258 = call i32 @function_112cc(i32 %v3_10254)
  store i32 %v1_10258, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_10260 = load i32, i32* @r5, align 4
  %v1_10260 = load i32, i32* @r6, align 4
  %v2_10260 = add i32 %v1_10260, 12
  %v3_10260 = inttoptr i32 %v2_10260 to i32*
  store i32 %v0_10260, i32* %v3_10260, align 4
  %v0_10264 = load i32, i32* %r4.global-to-local, align 4
  %v1_10264 = load i32, i32* @r6, align 4
  %v2_10264 = add i32 %v1_10264, 4
  %v3_10264 = inttoptr i32 %v2_10264 to i32*
  store i32 %v0_10264, i32* %v3_10264, align 4
  %v0_10268 = load i32, i32* @r5, align 4
  %v1_10268 = trunc i32 %v0_10268 to i8
  %v2_10268 = load i32, i32* @r6, align 4
  %v3_10268 = add i32 %v2_10268, 284
  %v4_10268 = inttoptr i32 %v3_10268 to i8*
  store i8 %v1_10268, i8* %v4_10268, align 1
  br label %dec_label_pc_f6ac

dec_label_pc_10270:                               ; preds = %dec_label_pc_f834
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10274 = call i32 @function_10344(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_1027c = call i32 @function_10344(i32 27)
  store i32 %v1_1027c, i32* %r0.global-to-local, align 4
  %v0_10280 = load i32, i32* @r6, align 4
  %v1_10280 = add i32 %v0_10280, 12
  %v2_10280 = inttoptr i32 %v1_10280 to i32*
  %v3_10280 = load i32, i32* %v2_10280, align 4
  br label %dec_label_pc_f878.backedge

dec_label_pc_f878.backedge.thread:                ; preds = %dec_label_pc_fb50, %dec_label_pc_fc78, %dec_label_pc_fdd4, %dec_label_pc_fe88, %dec_label_pc_ff3c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f880

dec_label_pc_f878.backedge.thread475:             ; preds = %dec_label_pc_fb7c, %dec_label_pc_fca4, %dec_label_pc_ff68, %dec_label_pc_fe00, %dec_label_pc_feb4, %dec_label_pc_fb98, %dec_label_pc_fcc0, %dec_label_pc_fe1c, %dec_label_pc_fed0, %dec_label_pc_ff84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f880

dec_label_pc_f878.backedge:                       ; preds = %dec_label_pc_10270, %dec_label_pc_10220
  %storemerge478 = phi i32 [ %v3_10228, %dec_label_pc_10220 ], [ %v3_10280, %dec_label_pc_10270 ]
  %v0_f878.be = phi i32 [ %v3_10228, %dec_label_pc_10220 ], [ %v3_10280, %dec_label_pc_10270 ]
  %v0_f880156 = phi i32 [ %v0_10228, %dec_label_pc_10220 ], [ %v0_10280, %dec_label_pc_10270 ]
  store i32 %storemerge478, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f878 = icmp eq i32 %v0_f878.be, 0
  store i1 %v2_f878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f878, label %dec_label_pc_f6ac, label %dec_label_pc_f880

dec_label_pc_10288:                               ; preds = %bb369
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10294 = call i32 @function_11bb0(i32 2, i32 1, i32 0)
  store i32 %v3_10294, i32* %r0.global-to-local, align 4
  %v2_10298 = icmp eq i32 %v3_10294, -1
  store i1 %v2_10298, i1* %cpsr_c.global-to-local, align 1
  %v7_10298 = icmp eq i32 %v3_10294, -1
  store i1 %v7_10298, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10294, i32* @r4, align 4
  br i1 %v7_10298, label %dec_label_pc_f4ac, label %dec_label_pc_102a4

dec_label_pc_102a4:                               ; preds = %dec_label_pc_10288
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_102a8 = call i32 @function_103fc(i32 2)
  store i32 2, i32* @r6, align 4
  store i32 ptrtoint ([12 x i8]* @global_var_13b38.78 to i32), i32* @r0, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v2_102bc = call i32 @function_119bc(i32 ptrtoint ([12 x i8]* @global_var_13b38.78 to i32))
  %v0_102c0 = load i32, i32* @r5, align 4
  store i32 %v0_102c0, i32* %r1.global-to-local, align 4
  %v0_102c8 = load i32, i32* @r6, align 4
  store i32 %v0_102c8, i32* %r0.global-to-local, align 4
  %v2_102cc = inttoptr i32 %v0_102c0 to i32*
  %v3_102cc = call i32 @function_10318(i32 %v0_102c8, i32* %v2_102cc)
  %v4_102cc = inttoptr i32 %v3_102cc to i8*
  store i32 %v3_102cc, i32* %r0.global-to-local, align 4
  %v2_102d0 = add i32 %v3_102cc, 1
  %v3_102d0 = inttoptr i32 %v2_102d0 to i8*
  %v4_102d0 = load i8, i8* %v3_102d0, align 1
  %v5_102d0 = zext i8 %v4_102d0 to i32
  store i32 %v5_102d0, i32* %r2.global-to-local, align 4
  %v3_102d4 = load i8, i8* %v4_102cc, align 1
  %v4_102d4 = zext i8 %v3_102d4 to i32
  %v4_102d8 = mul nuw nsw i32 %v5_102d0, 256
  %v5_102d8 = or i32 %v4_102d4, %v4_102d8
  store i32 %v5_102d8, i32* %r3.global-to-local, align 4
  %v1_102dc = and i32 %v4_102d4, 128
  %v2_102dc = icmp ne i32 %v1_102dc, 0
  store i1 %v2_102dc, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_102d0, i32* %r1.global-to-local, align 4
  %v0_102e0 = load i32, i32* @r6, align 4
  store i32 %v0_102e0, i32* %r0.global-to-local, align 4
  %v1_102ec = call i32 @function_10344(i32 %v0_102e0)
  %v0_102f0 = load i32, i32* @r4, align 4
  store i32 %v0_102f0, i32* %r0.global-to-local, align 4
  %v2_102f4 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_102f4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_102fc = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_102fc = call i32 @function_11a0c(i32 %v0_102f0, %sockaddr* %v3_102fc, i32 16)
  store i32 %v4_102fc, i32* %r0.global-to-local, align 4
  %v3_10300 = icmp eq i32 %v4_102fc, -1
  store i1 %v3_10300, i1* %cpsr_c.global-to-local, align 1
  %v8_10300 = icmp eq i32 %v4_102fc, -1
  store i1 %v8_10300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10300, label %dec_label_pc_10308, label %dec_label_pc_f408

dec_label_pc_10308:                               ; preds = %dec_label_pc_102a4
  %v0_10308 = load i32, i32* @r4, align 4
  store i32 %v0_10308, i32* %r0.global-to-local, align 4
  %v1_1030c = call i32 @function_112cc(i32 %v0_10308)
  %v0_10310 = load i32, i32* @r5, align 4
  store i32 %v0_10310, i32* %r0.global-to-local, align 4
  %v1_10314 = call i32 @function_12638(i32 %v0_10310)
  store i32 %v1_10314, i32* %r0.global-to-local, align 4
  ret i32 %v1_10314

; uselistorder directives
  uselistorder i32 %v4_102d4, { 1, 0 }
  uselistorder i32 %v5_102d0, { 1, 0, 2 }
  uselistorder i1 %v7_10298, { 1, 0 }
  uselistorder i32 %v3_10294, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10280, { 1, 0 }
  uselistorder i32 %v3_10228, { 1, 0 }
  uselistorder i32 %v3_101d8, { 1, 0 }
  uselistorder i1 %v1_101a4, { 1, 0 }
  uselistorder i32 %v1_1018c, { 2, 1, 0 }
  uselistorder i32 %v1_10188, { 1, 0 }
  uselistorder i1 %v2_10140, { 1, 0 }
  uselistorder i32 %.377, { 1, 0 }
  uselistorder i1 %v7_10128, { 1, 0 }
  uselistorder i32 %v0_10124, { 2, 1, 0, 3 }
  uselistorder i32 %v4_10104, { 1, 0, 2 }
  uselistorder i32 %v4_10100, { 1, 0, 2 }
  uselistorder i1 %v7_100f0, { 1, 0 }
  uselistorder i32 %v0_100f0, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_100a0, { 0, 2, 1 }
  uselistorder i1 %v0_10090, { 1, 0 }
  uselistorder i32 %v4_10084, { 1, 0, 2 }
  uselistorder i32 %v0_10018, { 1, 2, 0 }
  uselistorder i1 %v7_ff88, { 1, 0 }
  uselistorder i32 %v1_ff84, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_ff7c, { 1, 0 }
  uselistorder i8 %v3_ff74, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_ff84, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_ff60, { 1, 0 }
  uselistorder i1 %v7_ff58, { 1, 0 }
  uselistorder i1 %v7_ff50, { 1, 0 }
  uselistorder i1 %v7_fed4, { 1, 0 }
  uselistorder i32 %v1_fed0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fec8, { 1, 0 }
  uselistorder i8 %v3_fec0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fed0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_feac, { 1, 0 }
  uselistorder i1 %v7_fea4, { 1, 0 }
  uselistorder i1 %v7_fe9c, { 1, 0 }
  uselistorder i1 %v7_fe20, { 1, 0 }
  uselistorder i32 %v1_fe1c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fe14, { 1, 0 }
  uselistorder i8 %v3_fe0c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fe1c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fdf8, { 1, 0 }
  uselistorder i1 %v7_fdf0, { 1, 0 }
  uselistorder i1 %v7_fde8, { 1, 0 }
  uselistorder i32 %v0_fdc4, { 1, 2, 0 }
  uselistorder i32 %v2_fdb0, { 1, 0 }
  uselistorder i32 %v1_fdb0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_fdb0, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_fd80, { 2, 1, 0 }
  uselistorder i1 %v7_fd5c, { 1, 0 }
  uselistorder i32 %v4_fd58, { 1, 0, 2 }
  uselistorder i1 %v7_fcc4, { 1, 0 }
  uselistorder i32 %v1_fcc0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fcb8, { 1, 0 }
  uselistorder i8 %v3_fcb0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fcc0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fc9c, { 1, 0 }
  uselistorder i1 %v7_fc94, { 1, 0 }
  uselistorder i1 %v7_fc8c, { 1, 0 }
  uselistorder i1 %v7_fb9c, { 1, 0 }
  uselistorder i32 %v1_fb98, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fb90, { 1, 0 }
  uselistorder i8 %v3_fb88, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fb98, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fb74, { 1, 0 }
  uselistorder i1 %v7_fb6c, { 1, 0 }
  uselistorder i1 %v7_fb64, { 1, 0 }
  uselistorder i32 %v0_fb0c, { 2, 1, 0 }
  uselistorder i1 %v7_fafc, { 1, 0 }
  uselistorder i1 %v8_faf0, { 1, 0 }
  uselistorder i8 %v3_fae8, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_faf8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fad4, { 1, 0 }
  uselistorder i1 %v7_facc, { 1, 0 }
  uselistorder i32 %v0_fa74, { 2, 1, 0 }
  uselistorder i1 %v7_fa5c, { 1, 0 }
  uselistorder i1 %v8_fa50, { 1, 0 }
  uselistorder i8 %v3_fa48, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fa58, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fa34, { 1, 0 }
  uselistorder i1 %v7_fa2c, { 1, 0 }
  uselistorder i1 %v7_fa24, { 1, 0 }
  uselistorder i32 %v0_fa00.pre, { 0, 2, 1 }
  uselistorder i32 %v1_f9e8, { 1, 0 }
  uselistorder i32 %v1_f9e4, { 1, 0 }
  uselistorder i32 %v1_f9dc, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f9d8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f9d8, { 0, 2, 1 }
  uselistorder i1 %v7_f978, { 1, 0 }
  uselistorder i1 %v2_f964, { 1, 0, 2 }
  uselistorder i1 %v2_f94c, { 1, 0, 2 }
  uselistorder i32 %v1_f96c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_f940, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_f968, { 1, 0 }
  uselistorder i32 %v2_f970, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_f92c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_f8f4, { 4, 17, 5, 19, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_f8d0, { 1, 2, 3, 0 }
  uselistorder i32 %v3_f8cc, { 1, 0 }
  uselistorder i32 %v5_f8b0, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_f89c, { 1, 0, 2 }
  uselistorder i32 %v3_f898, { 1, 0, 2 }
  uselistorder i32 %v0_101e8, { 1, 0, 2 }
  uselistorder i32 %v0_f86c, { 1, 0, 2 }
  uselistorder i1 %v7_f84c, { 1, 0 }
  uselistorder i1 %v7_f824, { 1, 0 }
  uselistorder i32 %v0_f79c, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_f77c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_f770, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_f6fc, { 2, 1, 0 }
  uselistorder i32 %v3_f6f8, { 1, 0 }
  uselistorder i1 %v7_f6dc, { 1, 0 }
  uselistorder i32 %v3_f6d8, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_f6cc, { 1, 0 }
  uselistorder i32 %v1_f6b0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f69c, { 2, 1, 0 }
  uselistorder i32 %v3_f698, { 1, 0 }
  uselistorder i32 %v0_f69c, { 1, 0 }
  uselistorder i32 %v2_fce0, { 2, 3, 1, 0 }
  uselistorder i32 %v2_f7e8, { 3, 8, 5, 6, 2, 7, 9, 10, 1, 0, 4 }
  uselistorder i32 %v2_1000c, { 1, 2, 0 }
  uselistorder i32 %v1_f634, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f634, { 0, 1, 3, 2 }
  uselistorder i32 %v1_f604, { 2, 1, 0 }
  uselistorder i32 %v1_f600, { 1, 0 }
  uselistorder i32 %v0_f5d0, { 0, 2, 1 }
  uselistorder i32 %v1_f5c8, { 1, 0 }
  uselistorder i1 %v7_f580, { 0, 3, 1, 2 }
  uselistorder i1 %v2_f580, { 1, 2, 0 }
  uselistorder i32 %v2_f578, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_f570, { 1, 0 }
  uselistorder i32 %v1_f554, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f548, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f548, { 0, 2, 1 }
  uselistorder i32 %v1_f538, { 1, 0 }
  uselistorder i32 %v3_f5ac, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge244, { 1, 0, 2 }
  uselistorder i32 %v2_f5bc, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i8* %stack_var_-1876.2, { 0, 2, 1 }
  uselistorder i8 %stack_var_-1868.2, { 0, 2, 1 }
  uselistorder i32 %stack_var_-1872.2, { 0, 2, 1 }
  uselistorder i32 %v3_f3f4, { 1, 0 }
  uselistorder i32 %v1_f3e0, { 1, 0 }
  uselistorder i32 %v1_f3c8, { 1, 2, 0 }
  uselistorder i32 %v0_f3d4, { 0, 3, 2, 1 }
  uselistorder i32 %v0_f398, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_f38c, { 2, 1, 0 }
  uselistorder i32 %v1_f368, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_f340, { 1, 0 }
  uselistorder i32 %v0_f2a4, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_f2dc, { 1, 2, 4, 8, 0, 3, 6, 5, 7 }
  uselistorder i32 %v1_f24c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_f170, { 1, 0 }
  uselistorder i32 %v1_f16c, { 2, 0, 1 }
  uselistorder i32 %v4_f148, { 1, 0 }
  uselistorder i1 %v2_f098, { 1, 0 }
  uselistorder i1 %v2_f084, { 1, 0 }
  uselistorder i1 %v2_f070, { 1, 0 }
  uselistorder i32 %.376, { 3, 2, 1, 0 }
  uselistorder i1 %v7_f04c, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_f034, { 1, 0 }
  uselistorder i1 %v3_f018, { 1, 0, 2 }
  uselistorder i1 %v2_f004, { 1, 0 }
  uselistorder i1 %v2_efe0, { 1, 0 }
  uselistorder i32 %v1_ef90, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ef7c, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_ef78, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_ef68, { 1, 0 }
  uselistorder i32 %v0_ef58, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ef34, { 1, 0 }
  uselistorder i8* %stack_var_-1876.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_f2d0, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i32 %v4_ee00, { 1, 0 }
  uselistorder i32 %v0_edf0, { 2, 0, 1, 3 }
  uselistorder i32 %v3_edc0, { 1, 0 }
  uselistorder i32 %v4_edac, { 2, 0, 1 }
  uselistorder i32 %v0_ed94, { 0, 2, 1 }
  uselistorder i32 %v0_ed3c, { 3, 2, 0, 1 }
  uselistorder i1 %v7_ecdc, { 1, 0 }
  uselistorder i32 %v3_ecd4, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_ecbc, { 0, 2, 1 }
  uselistorder i32 %v0_eca4, { 2, 1, 0 }
  uselistorder i32 %v0_ec80, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge251, { 1, 0 }
  uselistorder i32 %v0_ec14, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-56, { 9, 7, 10, 3, 11, 6, 12, 5, 13, 8, 14, 4, 15, 16, 1, 2, 17, 19, 0, 18 }
  uselistorder i32* %stack_var_-48, { 4, 5, 3, 6, 2, 7, 0, 8, 9, 1 }
  uselistorder i32* %stack_var_-38, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 4, 5, 6, 7, 8, 0, 1, 2, 3, 10, 9, 11, 12 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 6, 1, 5, 4, 9, 10, 7, 8, 11, 12, 13 }
  uselistorder i32* %r3.global-to-local, { 12, 64, 63, 37, 65, 66, 136, 13, 14, 15, 27, 38, 39, 40, 41, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 51, 52, 53, 34, 35, 36, 42, 43, 44, 45, 46, 47, 48, 49, 50, 67, 68, 69, 70, 71, 72, 54, 55, 73, 74, 76, 75, 77, 78, 79, 80, 81, 83, 85, 84, 82, 86, 87, 88, 89, 95, 90, 91, 92, 93, 96, 145, 146, 97, 147, 148, 56, 57, 58, 59, 60, 61, 62, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 135, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 127, 130, 129, 94, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144 }
  uselistorder i32* %r2.global-to-local, { 9, 10, 11, 14, 29, 12, 13, 15, 16, 17, 25, 30, 31, 0, 1, 2, 3, 5, 4, 6, 8, 7, 18, 19, 21, 20, 22, 23, 24, 26, 28, 27, 35, 37, 36, 32, 33, 34, 47, 48, 49, 50, 51, 52, 53, 38, 39, 54, 55, 56, 57, 58, 60, 62, 61, 122, 59, 63, 64, 65, 66, 67, 71, 68, 69, 70, 72, 73, 75, 74, 76, 77, 40, 41, 42, 43, 44, 45, 46, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121 }
  uselistorder i32* %r1.global-to-local, { 10, 11, 12, 13, 44, 29, 30, 14, 15, 16, 25, 26, 1, 2, 3, 4, 5, 6, 7, 8, 9, 97, 98, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 31, 32, 0, 45, 46, 47, 48, 33, 34, 35, 36, 49, 50, 51, 53, 54, 52, 55, 56, 58, 57, 96, 37, 38, 39, 40, 41, 42, 43, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95 }
  uselistorder i32* %r0.global-to-local, { 31, 30, 32, 34, 33, 35, 37, 36, 38, 40, 39, 105, 106, 107, 134, 133, 41, 135, 99, 101, 100, 137, 139, 140, 136, 141, 138, 43, 42, 44, 46, 45, 47, 49, 48, 50, 81, 80, 83, 82, 84, 85, 102, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 22, 21, 24, 23, 26, 25, 27, 28, 29, 108, 52, 53, 55, 54, 56, 51, 57, 58, 59, 60, 62, 61, 64, 63, 66, 65, 67, 68, 69, 71, 70, 72, 74, 73, 76, 75, 77, 78, 79, 87, 86, 89, 88, 93, 90, 91, 92, 110, 109, 112, 111, 95, 94, 96, 97, 98, 104, 103, 144, 142, 114, 113, 115, 117, 116, 119, 118, 120, 121, 122, 151, 143, 146, 145, 147, 148, 150, 149, 152, 155, 153, 154, 160, 156, 159, 157, 158, 162, 161, 124, 123, 125, 126, 127, 129, 128, 130, 131, 132, 165, 163, 164, 167, 166, 168, 170, 169, 207, 171, 172, 173, 175, 174, 176, 177, 179, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 196, 199, 198, 200, 204, 203, 201, 202, 205, 206, 208, 209 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 21, 22, 6, 23, 7, 14, 0, 2, 1, 4, 3, 5, 19, 8, 9, 10, 11, 12, 13, 18, 20, 15, 16, 17, 24, 25, 26, 27, 28, 29, 32, 30, 31, 33, 49, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 28, 111, 221, 218, 97, 101, 102, 103, 104, 105, 29, 201, 31, 32, 33, 55, 56, 57, 74, 75, 76, 77, 78, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 93, 34, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 95, 66, 71, 72, 67, 68, 69, 70, 73, 94, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 212, 106, 107, 108, 109, 110, 213, 96, 30, 98, 99, 100, 112, 114, 113, 115, 116, 118, 120, 119, 214, 117, 121, 122, 123, 124, 125, 126, 131, 127, 128, 129, 130, 217, 219, 215, 216, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 210, 173, 174, 209, 175, 176, 208, 177, 178, 179, 180, 181, 182, 207, 183, 184, 185, 186, 187, 206, 188, 189, 190, 204, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 220, 211 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 108, 219, 217, 94, 99, 98, 100, 101, 102, 30, 197, 31, 32, 33, 34, 55, 56, 57, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 90, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 92, 66, 71, 72, 67, 68, 69, 70, 73, 91, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 210, 103, 104, 105, 106, 107, 211, 93, 196, 95, 96, 97, 109, 111, 110, 112, 113, 115, 117, 116, 212, 114, 118, 119, 120, 121, 122, 127, 123, 124, 125, 126, 215, 216, 213, 128, 214, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 208, 166, 167, 207, 168, 169, 206, 170, 171, 172, 173, 174, 175, 205, 176, 177, 178, 179, 180, 203, 181, 182, 183, 202, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 204, 218, 209 }
  uselistorder i32 (i32)* @function_119bc, { 2, 0, 1, 3 }
  uselistorder i32 ptrtoint ([12 x i8]* @global_var_13b38.78 to i32), { 0, 2, 1, 3 }
  uselistorder i8 31, { 8, 2, 3, 9, 10, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_13bd0.201 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_13bd0.201, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @function_10344, { 35, 26, 25, 34, 30, 38, 37, 36, 33, 32, 31, 29, 28, 27, 24, 23, 4, 22, 1, 0, 39, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10a8c, { 4, 2, 3, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_10318, { 3, 4, 8, 0, 1, 2, 5, 6, 7, 9, 10, 30, 11, 34, 35, 36, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33 }
  uselistorder i32 (i32)* @function_103fc, { 27, 26, 22, 30, 29, 28, 25, 24, 23, 21, 20, 6, 19, 2, 1, 0, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3 }
  uselistorder i8* bitcast (i8** @global_var_1c284.132 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1c285.133, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1c284.132 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_114ec, { 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_11b20, { 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i32 ()* @function_e990, { 3, 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_11b4c, { 0, 1, 2, 7, 3, 4, 5, 6, 9, 8 }
  uselistorder i32 16384, { 13, 60, 12, 48, 0, 49, 1, 50, 2, 51, 3, 52, 4, 53, 5, 54, 6, 55, 7, 56, 8, 57, 30, 58, 31, 59, 28, 62, 29, 63, 27, 61, 38, 71, 32, 64, 33, 65, 34, 66, 35, 67, 36, 68, 37, 69, 9, 70, 10, 72, 11, 73, 15, 74, 41, 75, 40, 76, 42, 77, 43, 78, 14, 79, 39, 80, 16, 81, 17, 82, 19, 83, 18, 84, 21, 85, 20, 86, 22, 87, 23, 88, 24, 89, 25, 90, 26, 91, 44, 45, 46, 47 }
  uselistorder i32 (i32, i32, i32, i32)* @function_d114, { 9, 8, 7, 2, 6, 5, 4, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_11120, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d0b8, { 11, 10, 9, 3, 8, 7, 6, 5, 4, 1, 0, 2 }
  uselistorder i8* @global_var_1c268.190, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32* @fp, { 2, 3, 47, 48, 49, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0, 31, 32, 33, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_13bb0.184 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_13ba8.182 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_13b6c.170 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_ea64, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_13bd8.162 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_13bd4.160 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8* @global_var_1c279.156, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1c26c.147 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8* @global_var_1c278.148, { 1, 0 }
  uselistorder i8** @global_var_1c258.143, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1c258.143 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 35, 1, 18, 0, 2, 3, 36, 19, 4, 37, 25, 20, 21, 26, 27, 28, 38, 39, 40, 5, 41, 6, 7, 29, 30, 31, 42, 43, 44, 8, 45, 9, 10, 46, 11, 47, 32, 33, 48, 12, 49, 50, 22, 51, 52, 13, 53, 54, 23, 55, 56, 14, 57, 24, 34, 58, 59, 15, 60, 61, 16, 17 }
  uselistorder i32 ()* @function_e72c, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 16, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 7, 6, 5, 4, 0, 15, 14, 13, 12, 11, 10, 9, 8, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_11b80, { 0, 8, 1, 2, 3, 4, 5, 6, 7, 9, 10 }
  uselistorder i32 2048, { 6, 5, 0, 1, 2, 7, 8, 3, 9, 10, 4, 11 }
  uselistorder i32* @global_var_1c2f0.141, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1c2ec.139, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1c288.126, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32)* @function_e784, { 1, 0 }
  uselistorder i32* @global_var_1c2d0.49, { 4, 5, 1, 2, 3, 6, 7, 8, 9, 10, 0, 11, 15, 12, 13, 14 }
  uselistorder i32 ()* @function_10c80, { 2, 1, 0 }
  uselistorder i32 ()* @function_112f8, { 6, 5, 4, 0, 3, 2, 1 }
  uselistorder i32* @sl, { 2, 80, 81, 82, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 36, 37, 38, 39, 40, 41 }
  uselistorder i32* @sb, { 2, 3, 4, 0, 5, 6, 7, 8, 79, 80, 81, 9, 10, 11, 12, 13, 14, 15, 18, 16, 17, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder label %dec_label_pc_f878.backedge.thread475, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_f878.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10240, { 1, 0 }
  uselistorder label %.thread240, { 1, 0 }
  uselistorder label %bb371, { 1, 0 }
  uselistorder label %dec_label_pc_1017c, { 1, 0 }
  uselistorder label %dec_label_pc_10148, { 1, 0 }
  uselistorder label %thread-pre-split98, { 1, 0 }
  uselistorder label %dec_label_pc_10058, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ff84, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_ff70, { 1, 0 }
  uselistorder label %dec_label_pc_fed0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_febc, { 1, 0 }
  uselistorder label %dec_label_pc_fe1c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fe08, { 1, 0 }
  uselistorder label %dec_label_pc_fdb0, { 4, 5, 1, 2, 3, 11, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_fcc0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fcac, { 1, 0 }
  uselistorder label %dec_label_pc_fb98, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fb84, { 1, 0 }
  uselistorder label %dec_label_pc_faf8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_fae4, { 1, 0 }
  uselistorder label %dec_label_pc_fa74, { 1, 0 }
  uselistorder label %dec_label_pc_fa58, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fa44, { 1, 0 }
  uselistorder label %dec_label_pc_fa00, { 4, 1, 2, 3, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_f9f0, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread88, { 2, 0, 1 }
  uselistorder label %.thread86, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f98c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f948, { 1, 0 }
  uselistorder label %dec_label_pc_f948.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f8dc, { 1, 0 }
  uselistorder label %bb340, { 1, 0 }
  uselistorder label %dec_label_pc_f890, { 1, 0 }
  uselistorder label %dec_label_pc_f880, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f880.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_f874.loopexit, { 1, 4, 0, 2, 3 }
  uselistorder label %dec_label_pc_f7d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f6ac, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_f684, { 1, 0 }
  uselistorder label %bb337, { 1, 0 }
  uselistorder label %bb335, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_f4d4.dec_label_pc_f4d4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f4bc.dec_label_pc_f4bc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f4b4, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_f4ac, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_f3c8, { 1, 0 }
  uselistorder label %dec_label_pc_f26c, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_f260, { 1, 0 }
  uselistorder label %.thread66, { 2, 1, 0 }
  uselistorder label %.thread64, { 1, 0 }
  uselistorder label %dec_label_pc_f0d0, { 1, 0 }
  uselistorder label %dec_label_pc_f0c4, { 1, 0 }
  uselistorder label %dec_label_pc_f0b8, { 1, 0 }
  uselistorder label %dec_label_pc_f0ac, { 1, 0 }
  uselistorder label %dec_label_pc_f0a0, { 1, 0 }
  uselistorder label %dec_label_pc_f08c, { 1, 0 }
  uselistorder label %dec_label_pc_f078, { 1, 0 }
  uselistorder label %dec_label_pc_f064, { 1, 0 }
  uselistorder label %dec_label_pc_f044, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f020, { 1, 0 }
  uselistorder label %dec_label_pc_f014, { 1, 2, 0 }
  uselistorder label %dec_label_pc_eff0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_efcc, { 1, 0 }
  uselistorder label %bb298, { 1, 0 }
  uselistorder label %dec_label_pc_ef78, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_ed3c, { 1, 0 }
}

define i32 @function_10318(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10318:
  store i32 ptrtoint (i32* @global_var_1c2fc.208 to i32), i32* @ip, align 4
  %v3_1031c = mul i32 %arg1, 8
  %v2_10320 = add i32 %v3_1031c, ptrtoint (i32* @global_var_1c2fc.208 to i32)
  %v2_10324 = icmp eq i32* %arg2, null
  br i1 %v2_10324, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10318
  %v3_1033011 = inttoptr i32 %v2_10320 to i32*
  %v4_1033012 = load i32, i32* %v3_1033011, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_10318
  %v2_10328 = add i32 %v3_1031c, add (i32 ptrtoint (i32* @global_var_1c2fc.208 to i32), i32 5)
  %v3_10328 = inttoptr i32 %v2_10328 to i8*
  %v4_10328 = load i8, i8* %v3_10328, align 1
  %v5_10328 = zext i8 %v4_10328 to i32
  store i32 %v5_10328, i32* @r2, align 4
  %v2_1032c = add i32 %v3_1031c, add (i32 ptrtoint (i32* @global_var_1c2fc.208 to i32), i32 4)
  %v3_1032c = inttoptr i32 %v2_1032c to i8*
  %v4_1032c = load i8, i8* %v3_1032c, align 4
  %v5_1032c = zext i8 %v4_1032c to i32
  %v3_10330 = inttoptr i32 %v2_10320 to i32*
  %v4_10330 = load i32, i32* %v3_10330, align 4
  %v5_10334 = mul nuw nsw i32 %v5_10328, 256
  %v6_10334 = or i32 %v5_1032c, %v5_10334
  store i32 %v6_10334, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_10330714 = phi i32 [ %v4_1033012, %.thread ], [ %v4_10330, %bb ]
  ret i32 %v4_10330714

; uselistorder directives
  uselistorder i32 %v2_10320, { 1, 0 }
  uselistorder i32 %v3_1031c, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_10344(i32 %arg1) local_unnamed_addr {
dec_label_pc_10344:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10344 = mul i32 %arg1, 8
  %v3_10348 = load i32, i32* @r4, align 4
  store i32 %v3_10348, i32* %stack_var_-20, align 4
  %v3_10358 = and i32 %v3_10344, 2040
  %v2_1035c = add i32 %v3_10358, ptrtoint (i32* @global_var_1c2fc.208 to i32)
  store i32 %v2_1035c, i32* @lr, align 4
  %v1_10364 = add i32 %v3_10358, add (i32 ptrtoint (i32* @global_var_1c2fc.208 to i32), i32 4)
  store i32 %v1_10364, i32* %r7.global-to-local, align 4
  %v2_10368 = load i32, i32* @global_var_1c0cc.211, align 4
  store i32 %v2_10368, i32* @r2, align 4
  %v2_1036c = inttoptr i32 %v1_10364 to i8*
  %v3_1036c = load i8, i8* %v2_1036c, align 4
  %v4_1036c = zext i8 %v3_1036c to i32
  store i32 %v4_1036c, i32* @r1, align 4
  %v1_10370 = add i32 %v3_10358, add (i32 ptrtoint (i32* @global_var_1c2fc.208 to i32), i32 5)
  %v2_10370 = inttoptr i32 %v1_10370 to i8*
  %v3_10370 = load i8, i8* %v2_10370, align 1
  %v4_10370 = zext i8 %v3_10370 to i32
  %v3_10374 = udiv i32 %v2_10368, 256
  %v4_10378 = mul nuw nsw i32 %v4_10370, 256
  %v5_10378 = or i32 %v4_10378, %v4_1036c
  %v7_10378 = icmp eq i32 %v5_10378, 0
  store i1 %v7_10378, i1* @cpsr_z, align 1
  %v3_1037c = udiv i32 %v2_10368, 65536
  %v1_10380 = urem i32 %v3_10374, 256
  store i32 %v1_10380, i32* %r6.global-to-local, align 4
  %v1_10384 = urem i32 %v3_1037c, 256
  store i32 %v1_10384, i32* %r5.global-to-local, align 4
  %v3_10388 = udiv i32 %v2_10368, 16777216
  store i32 %v3_10388, i32* %r4.global-to-local, align 4
  %v1_1038c = urem i32 %v2_10368, 256
  br i1 %v7_10378, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10344
  store i32 %v3_10348, i32* @r4, align 4
  ret i32 %v1_1038c

bb8:                                              ; preds = %dec_label_pc_10344
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10398

dec_label_pc_10398:                               ; preds = %dec_label_pc_10398, %bb8
  %v2_103a4 = phi i32 [ %v1_103e0, %dec_label_pc_10398 ], [ 0, %bb8 ]
  %v0_10398 = phi i32 [ %v0_103d8, %dec_label_pc_10398 ], [ %v2_1035c, %bb8 ]
  %v1_10398 = inttoptr i32 %v0_10398 to i32*
  %v2_10398 = load i32, i32* %v1_10398, align 4
  %v2_1039c = add i32 %v2_10398, %v2_103a4
  %v3_1039c = inttoptr i32 %v2_1039c to i8*
  %v4_1039c = load i8, i8* %v3_1039c, align 1
  %v6_1039c = zext i8 %v4_1039c to i32
  %v2_103a0 = xor i32 %v6_1039c, %v1_1038c
  %v1_103a4 = trunc i32 %v2_103a0 to i8
  store i8 %v1_103a4, i8* %v3_1039c, align 1
  %v0_103a8 = load i32, i32* @lr, align 4
  %v1_103a8 = inttoptr i32 %v0_103a8 to i32*
  %v2_103a8 = load i32, i32* %v1_103a8, align 4
  %v0_103ac = load i32, i32* @ip, align 4
  %v2_103ac = add i32 %v0_103ac, %v2_103a8
  %v3_103ac = inttoptr i32 %v2_103ac to i8*
  %v4_103ac = load i8, i8* %v3_103ac, align 1
  %v6_103ac = zext i8 %v4_103ac to i32
  %v0_103b0 = load i32, i32* %r6.global-to-local, align 4
  %v2_103b0 = xor i32 %v0_103b0, %v6_103ac
  %v1_103b4 = trunc i32 %v2_103b0 to i8
  store i8 %v1_103b4, i8* %v3_103ac, align 1
  %v0_103b8 = load i32, i32* @lr, align 4
  %v1_103b8 = inttoptr i32 %v0_103b8 to i32*
  %v2_103b8 = load i32, i32* %v1_103b8, align 4
  %v0_103bc = load i32, i32* @ip, align 4
  %v2_103bc = add i32 %v0_103bc, %v2_103b8
  %v3_103bc = inttoptr i32 %v2_103bc to i8*
  %v4_103bc = load i8, i8* %v3_103bc, align 1
  %v6_103bc = zext i8 %v4_103bc to i32
  %v0_103c0 = load i32, i32* %r5.global-to-local, align 4
  %v2_103c0 = xor i32 %v0_103c0, %v6_103bc
  %v1_103c4 = trunc i32 %v2_103c0 to i8
  store i8 %v1_103c4, i8* %v3_103bc, align 1
  %v0_103c8 = load i32, i32* @lr, align 4
  %v1_103c8 = inttoptr i32 %v0_103c8 to i32*
  %v2_103c8 = load i32, i32* %v1_103c8, align 4
  store i32 %v2_103c8, i32* @r1, align 4
  %v0_103cc = load i32, i32* @ip, align 4
  %v2_103cc = add i32 %v0_103cc, %v2_103c8
  %v3_103cc = inttoptr i32 %v2_103cc to i8*
  %v4_103cc = load i8, i8* %v3_103cc, align 1
  %v6_103cc = zext i8 %v4_103cc to i32
  %v0_103d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_103d0 = xor i32 %v0_103d0, %v6_103cc
  %v1_103d4 = trunc i32 %v2_103d0 to i8
  store i8 %v1_103d4, i8* %v3_103cc, align 1
  %v0_103d8 = load i32, i32* @lr, align 4
  %v1_103d8 = add i32 %v0_103d8, 4
  %v2_103d8 = inttoptr i32 %v1_103d8 to i8*
  %v3_103d8 = load i8, i8* %v2_103d8, align 1
  %v4_103d8 = zext i8 %v3_103d8 to i32
  %v0_103dc = load i32, i32* %r7.global-to-local, align 4
  %v1_103dc = add i32 %v0_103dc, 1
  %v2_103dc = inttoptr i32 %v1_103dc to i8*
  %v3_103dc = load i8, i8* %v2_103dc, align 1
  %v4_103dc = zext i8 %v3_103dc to i32
  %v0_103e0 = load i32, i32* @ip, align 4
  %v1_103e0 = add i32 %v0_103e0, 1
  store i32 %v1_103e0, i32* @ip, align 4
  %v4_103e4 = mul nuw nsw i32 %v4_103dc, 256
  %v5_103e4 = or i32 %v4_103e4, %v4_103d8
  store i32 %v5_103e4, i32* @r2, align 4
  %v9_103e8 = icmp eq i32 %v5_103e4, %v1_103e0
  store i1 %v9_103e8, i1* @cpsr_z, align 1
  %v8_103ec = icmp sgt i32 %v5_103e4, %v1_103e0
  br i1 %v8_103ec, label %dec_label_pc_10398, label %dec_label_pc_103f0

dec_label_pc_103f0:                               ; preds = %dec_label_pc_10398
  %v2_103f0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_103f0, i32* @r4, align 4
  ret i32 %v1_1038c

; uselistorder directives
  uselistorder i32 %v1_103e0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_103d8, { 1, 0 }
  uselistorder i32 %v1_1038c, { 0, 2, 1 }
  uselistorder i32 %v2_10368, { 3, 0, 1, 2, 4 }
}

define i32 @function_103fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_103fc:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_103fc = mul i32 %arg1, 8
  %v3_10400 = load i32, i32* @r4, align 4
  store i32 %v3_10400, i32* %stack_var_-20, align 4
  %v3_10410 = and i32 %v3_103fc, 2040
  %v2_10414 = add i32 %v3_10410, ptrtoint (i32* @global_var_1c2fc.208 to i32)
  store i32 %v2_10414, i32* @lr, align 4
  %v1_1041c = add i32 %v3_10410, add (i32 ptrtoint (i32* @global_var_1c2fc.208 to i32), i32 4)
  store i32 %v1_1041c, i32* %r7.global-to-local, align 4
  %v2_10420 = load i32, i32* @global_var_1c0cc.211, align 4
  store i32 %v2_10420, i32* @r2, align 4
  %v2_10424 = inttoptr i32 %v1_1041c to i8*
  %v3_10424 = load i8, i8* %v2_10424, align 4
  %v4_10424 = zext i8 %v3_10424 to i32
  %v1_10428 = add i32 %v3_10410, add (i32 ptrtoint (i32* @global_var_1c2fc.208 to i32), i32 5)
  %v2_10428 = inttoptr i32 %v1_10428 to i8*
  %v3_10428 = load i8, i8* %v2_10428, align 1
  %v4_10428 = zext i8 %v3_10428 to i32
  %v3_1042c = udiv i32 %v2_10420, 256
  %v4_10430 = mul nuw nsw i32 %v4_10428, 256
  %v5_10430 = or i32 %v4_10430, %v4_10424
  %v7_10430 = icmp eq i32 %v5_10430, 0
  %v3_10434 = udiv i32 %v2_10420, 65536
  %v1_10438 = urem i32 %v3_1042c, 256
  store i32 %v1_10438, i32* %r6.global-to-local, align 4
  %v1_1043c = urem i32 %v3_10434, 256
  store i32 %v1_1043c, i32* %r5.global-to-local, align 4
  %v3_10440 = udiv i32 %v2_10420, 16777216
  store i32 %v3_10440, i32* %r4.global-to-local, align 4
  %v1_10444 = urem i32 %v2_10420, 256
  br i1 %v7_10430, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_103fc
  store i32 %v3_10400, i32* @r4, align 4
  ret i32 %v1_10444

bb8:                                              ; preds = %dec_label_pc_103fc
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10450

dec_label_pc_10450:                               ; preds = %dec_label_pc_10450, %bb8
  %v2_1045c = phi i32 [ %v1_10498, %dec_label_pc_10450 ], [ 0, %bb8 ]
  %v0_10450 = phi i32 [ %v0_10490, %dec_label_pc_10450 ], [ %v2_10414, %bb8 ]
  %v1_10450 = inttoptr i32 %v0_10450 to i32*
  %v2_10450 = load i32, i32* %v1_10450, align 4
  %v2_10454 = add i32 %v2_10450, %v2_1045c
  %v3_10454 = inttoptr i32 %v2_10454 to i8*
  %v4_10454 = load i8, i8* %v3_10454, align 1
  %v6_10454 = zext i8 %v4_10454 to i32
  %v2_10458 = xor i32 %v6_10454, %v1_10444
  %v1_1045c = trunc i32 %v2_10458 to i8
  store i8 %v1_1045c, i8* %v3_10454, align 1
  %v0_10460 = load i32, i32* @lr, align 4
  %v1_10460 = inttoptr i32 %v0_10460 to i32*
  %v2_10460 = load i32, i32* %v1_10460, align 4
  %v0_10464 = load i32, i32* %ip.global-to-local, align 4
  %v2_10464 = add i32 %v0_10464, %v2_10460
  %v3_10464 = inttoptr i32 %v2_10464 to i8*
  %v4_10464 = load i8, i8* %v3_10464, align 1
  %v6_10464 = zext i8 %v4_10464 to i32
  %v0_10468 = load i32, i32* %r6.global-to-local, align 4
  %v2_10468 = xor i32 %v0_10468, %v6_10464
  %v1_1046c = trunc i32 %v2_10468 to i8
  store i8 %v1_1046c, i8* %v3_10464, align 1
  %v0_10470 = load i32, i32* @lr, align 4
  %v1_10470 = inttoptr i32 %v0_10470 to i32*
  %v2_10470 = load i32, i32* %v1_10470, align 4
  %v0_10474 = load i32, i32* %ip.global-to-local, align 4
  %v2_10474 = add i32 %v0_10474, %v2_10470
  %v3_10474 = inttoptr i32 %v2_10474 to i8*
  %v4_10474 = load i8, i8* %v3_10474, align 1
  %v6_10474 = zext i8 %v4_10474 to i32
  %v0_10478 = load i32, i32* %r5.global-to-local, align 4
  %v2_10478 = xor i32 %v0_10478, %v6_10474
  %v1_1047c = trunc i32 %v2_10478 to i8
  store i8 %v1_1047c, i8* %v3_10474, align 1
  %v0_10480 = load i32, i32* @lr, align 4
  %v1_10480 = inttoptr i32 %v0_10480 to i32*
  %v2_10480 = load i32, i32* %v1_10480, align 4
  %v0_10484 = load i32, i32* %ip.global-to-local, align 4
  %v2_10484 = add i32 %v0_10484, %v2_10480
  %v3_10484 = inttoptr i32 %v2_10484 to i8*
  %v4_10484 = load i8, i8* %v3_10484, align 1
  %v6_10484 = zext i8 %v4_10484 to i32
  %v0_10488 = load i32, i32* %r4.global-to-local, align 4
  %v2_10488 = xor i32 %v0_10488, %v6_10484
  %v1_1048c = trunc i32 %v2_10488 to i8
  store i8 %v1_1048c, i8* %v3_10484, align 1
  %v0_10490 = load i32, i32* @lr, align 4
  %v1_10490 = add i32 %v0_10490, 4
  %v2_10490 = inttoptr i32 %v1_10490 to i8*
  %v3_10490 = load i8, i8* %v2_10490, align 1
  %v4_10490 = zext i8 %v3_10490 to i32
  %v0_10494 = load i32, i32* %r7.global-to-local, align 4
  %v1_10494 = add i32 %v0_10494, 1
  %v2_10494 = inttoptr i32 %v1_10494 to i8*
  %v3_10494 = load i8, i8* %v2_10494, align 1
  %v4_10494 = zext i8 %v3_10494 to i32
  %v0_10498 = load i32, i32* %ip.global-to-local, align 4
  %v1_10498 = add i32 %v0_10498, 1
  store i32 %v1_10498, i32* %ip.global-to-local, align 4
  %v4_1049c = mul nuw nsw i32 %v4_10494, 256
  %v5_1049c = or i32 %v4_1049c, %v4_10490
  store i32 %v5_1049c, i32* @r2, align 4
  %v8_104a4 = icmp sgt i32 %v5_1049c, %v1_10498
  br i1 %v8_104a4, label %dec_label_pc_10450, label %dec_label_pc_104a8

dec_label_pc_104a8:                               ; preds = %dec_label_pc_10450
  %v2_104a8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_104a8, i32* @r4, align 4
  ret i32 %v1_10444

; uselistorder directives
  uselistorder i32 %v1_10498, { 1, 2, 0 }
  uselistorder i32 %v0_10490, { 1, 0 }
  uselistorder i32 %v1_10444, { 0, 2, 1 }
  uselistorder i32 %v2_10420, { 3, 0, 1, 2, 4 }
}

define i32 @function_104b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_104b4:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_104b4 = load i32, i32* @r4, align 4
  store i32 %v3_104b4, i32* %stack_var_-36, align 4
  %v6_104b4 = load i32, i32* @r5, align 4
  %v9_104b4 = load i32, i32* @r6, align 4
  %v12_104b4 = load i32, i32* @r7, align 4
  %v1_104bc = call i32 @function_11d48(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1c2fc.208 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_104bc, i32* @r7, align 4
  %v4_104d8 = call i32 @function_10a44(i32 %v1_104bc, i32 ptrtoint ([3 x i8]* @global_var_13be8.216 to i32), i32 2)
  %v0_104dc = load i32, i32* @r5, align 4
  %v0_104e0 = load i32, i32* @r7, align 4
  store i32 %v0_104e0, i32* @global_var_1c304.217, align 4
  %v1_104e4 = trunc i32 %v0_104dc to i8
  store i8 %v1_104e4, i8* bitcast (i32* @global_var_1c308.218 to i8*), align 4
  %v0_104e8 = load i32, i32* @r6, align 4
  %v1_104e8 = trunc i32 %v0_104e8 to i8
  store i8 %v1_104e8, i8* bitcast (i32* @global_var_1c309.219 to i8*), align 4
  %v1_104ec = call i32 @function_11d48(i32 %v0_104dc)
  %v0_104f0 = load i32, i32* @r5, align 4
  store i32 %v1_104ec, i32* @r7, align 4
  %v3_104fc = call i32 @function_10a44(i32 %v1_104ec, i32 ptrtoint (i32* @global_var_13bec.221 to i32), i32 %v0_104f0)
  %v0_10504 = load i32, i32* @r7, align 4
  store i32 %v0_10504, i32* @global_var_1c30c.222, align 4
  %v0_10508 = load i32, i32* @r5, align 4
  %v1_10508 = trunc i32 %v0_10508 to i8
  store i8 %v1_10508, i8* bitcast (i32* @global_var_1c310.223 to i8*), align 4
  %v0_1050c = load i32, i32* @r6, align 4
  %v1_1050c = trunc i32 %v0_1050c to i8
  store i8 %v1_1050c, i8* bitcast (i32* @global_var_1c311.224 to i8*), align 4
  %v1_10510 = call i32 @function_11d48(i32 29)
  store i32 %v1_10510, i32* @r5, align 4
  %v3_10520 = call i32 @function_10a44(i32 %v1_10510, i32 ptrtoint (i32* @global_var_13d54.226 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1c318.227 to i8*), align 4
  %v0_10530 = load i32, i32* @r5, align 4
  store i32 %v0_10530, i32* @global_var_1c314.228, align 4
  %v0_10534 = load i32, i32* @r6, align 4
  %v1_10534 = trunc i32 %v0_10534 to i8
  store i8 %v1_10534, i8* bitcast (i32* @global_var_1c319.229 to i8*), align 4
  %v1_10538 = call i32 @function_11d48(i32 6)
  store i32 6, i32* %fp.global-to-local, align 4
  store i32 %v1_10538, i32* @r5, align 4
  %v4_1054c = call i32 @function_10a44(i32 %v1_10538, i32 ptrtoint ([7 x i8]* @global_var_13bf0.231 to i32), i32 6)
  %v0_10554 = load i32, i32* @r5, align 4
  store i32 %v0_10554, i32* @global_var_1c31c.232, align 4
  store i8 6, i8* bitcast (i32* @global_var_1c320.233 to i8*), align 4
  %v0_1055c = load i32, i32* @r6, align 4
  %v1_1055c = trunc i32 %v0_1055c to i8
  store i8 %v1_1055c, i8* bitcast (i32* @global_var_1c321.234 to i8*), align 4
  %v1_10560 = call i32 @function_11d48(i32 7)
  store i32 7, i32* %r8.global-to-local, align 4
  store i32 %v1_10560, i32* @r5, align 4
  %v4_10574 = call i32 @function_10a44(i32 %v1_10560, i32 ptrtoint ([8 x i8]* @global_var_13bf8.236 to i32), i32 7)
  %v0_1057c = load i32, i32* @r5, align 4
  store i32 %v0_1057c, i32* @global_var_1c324.237, align 4
  store i8 7, i8* bitcast (i32* @global_var_1c328.238 to i8*), align 4
  %v0_10584 = load i32, i32* @r6, align 4
  %v1_10584 = trunc i32 %v0_10584 to i8
  store i8 %v1_10584, i8* bitcast (i32* @global_var_1c329.239 to i8*), align 4
  %v1_10588 = call i32 @function_11d48(i32 7)
  %v0_10590 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10588, i32* @r5, align 4
  %v4_10598 = call i32 @function_10a44(i32 %v1_10588, i32 ptrtoint ([8 x i8]* @global_var_13c00.241 to i32), i32 %v0_10590)
  %v0_105a0 = load i32, i32* @r5, align 4
  store i32 %v0_105a0, i32* @global_var_1c32c.242, align 4
  %v1_105a4 = trunc i32 %v0_10590 to i8
  store i8 %v1_105a4, i8* bitcast (i32* @global_var_1c330.243 to i8*), align 4
  %v0_105a8 = load i32, i32* @r6, align 4
  %v1_105a8 = trunc i32 %v0_105a8 to i8
  store i8 %v1_105a8, i8* bitcast (i32* @global_var_1c331.244 to i8*), align 4
  %v1_105ac = call i32 @function_11d48(i32 3)
  store i32 %v1_105ac, i32* @r5, align 4
  %v4_105bc = call i32 @function_10a44(i32 %v1_105ac, i32 ptrtoint ([4 x i8]* @global_var_13c08.246 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1c338.247 to i8*), align 4
  %v0_105cc = load i32, i32* @r5, align 4
  store i32 %v0_105cc, i32* @global_var_1c334.248, align 4
  %v0_105d0 = load i32, i32* @r6, align 4
  %v1_105d0 = trunc i32 %v0_105d0 to i8
  store i8 %v1_105d0, i8* bitcast (i32* @global_var_1c339.249 to i8*), align 4
  %v1_105d4 = call i32 @function_11d48(i32 19)
  store i32 %v1_105d4, i32* @r5, align 4
  %v3_105e4 = call i32 @function_10a44(i32 %v1_105d4, i32 ptrtoint (i32* @global_var_13c0c.251 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1c340.252 to i8*), align 4
  %v0_105f4 = load i32, i32* @r5, align 4
  store i32 %v0_105f4, i32* @global_var_1c33c.253, align 4
  %v0_105f8 = load i32, i32* @r6, align 4
  %v1_105f8 = trunc i32 %v0_105f8 to i8
  store i8 %v1_105f8, i8* bitcast (i32* @global_var_1c341.254 to i8*), align 4
  %v1_105fc = call i32 @function_11d48(i32 24)
  store i32 %v1_105fc, i32* @r5, align 4
  %v3_1060c = call i32 @function_10a44(i32 %v1_105fc, i32 ptrtoint (i32* @global_var_13c20.256 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1c348.257 to i8*), align 4
  %v0_1061c = load i32, i32* @r5, align 4
  store i32 %v0_1061c, i32* @global_var_1c344.258, align 4
  %v0_10620 = load i32, i32* @r6, align 4
  %v1_10620 = trunc i32 %v0_10620 to i8
  store i8 %v1_10620, i8* bitcast (i32* @global_var_1c349.259 to i8*), align 4
  %v1_10624 = call i32 @function_11d48(i32 9)
  store i32 %v1_10624, i32* @r5, align 4
  %v4_10634 = call i32 @function_10a44(i32 %v1_10624, i32 ptrtoint ([10 x i8]* @global_var_13c3c.261 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1c350.262 to i8*), align 4
  %v0_10644 = load i32, i32* @r5, align 4
  store i32 %v0_10644, i32* @global_var_1c34c.263, align 4
  %v0_10648 = load i32, i32* @r6, align 4
  %v1_10648 = trunc i32 %v0_10648 to i8
  store i8 %v1_10648, i8* bitcast (i32* @global_var_1c351.264 to i8*), align 4
  %v1_1064c = call i32 @function_11d48(i32 16)
  store i32 %v1_1064c, i32* @r5, align 4
  store i32 16, i32* %sb.global-to-local, align 4
  %v4_10660 = call i32 @function_10a44(i32 %v1_1064c, i32 ptrtoint ([17 x i8]* @global_var_13c48.266 to i32), i32 16)
  %v0_10668 = load i32, i32* @r5, align 4
  store i32 %v0_10668, i32* @global_var_1c354.267, align 4
  store i8 16, i8* bitcast (i32* @global_var_1c358.268 to i8*), align 4
  %v0_10670 = load i32, i32* @r6, align 4
  %v1_10670 = trunc i32 %v0_10670 to i8
  store i8 %v1_10670, i8* bitcast (i32* @global_var_1c359.269 to i8*), align 4
  %v1_10674 = call i32 @function_11d48(i32 22)
  store i32 %v1_10674, i32* @r5, align 4
  %v4_10684 = call i32 @function_10a44(i32 %v1_10674, i32 ptrtoint ([23 x i8]* @global_var_13c5c.271 to i32), i32 22)
  %v0_1068c = load i32, i32* %r8.global-to-local, align 4
  store i8 22, i8* bitcast (i32* @global_var_1c360.272 to i8*), align 4
  %v0_10694 = load i32, i32* @r5, align 4
  store i32 %v0_10694, i32* @global_var_1c35c.273, align 4
  %v0_10698 = load i32, i32* @r6, align 4
  %v1_10698 = trunc i32 %v0_10698 to i8
  store i8 %v1_10698, i8* bitcast (i32* @global_var_1c361.274 to i8*), align 4
  %v1_1069c = call i32 @function_11d48(i32 %v0_1068c)
  %v0_106a4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_1069c, i32* @r5, align 4
  %v4_106ac = call i32 @function_10a44(i32 %v1_1069c, i32 ptrtoint ([8 x i8]* @global_var_13c74.276 to i32), i32 %v0_106a4)
  %v0_106b4 = load i32, i32* @r5, align 4
  store i32 %v0_106b4, i32* @global_var_1c364.277, align 4
  %v1_106b8 = trunc i32 %v0_106a4 to i8
  store i8 %v1_106b8, i8* bitcast (i32* @global_var_1c368.278 to i8*), align 4
  %v0_106bc = load i32, i32* @r6, align 4
  %v1_106bc = trunc i32 %v0_106bc to i8
  store i8 %v1_106bc, i8* bitcast (i32* @global_var_1c369.279 to i8*), align 4
  %v1_106c0 = call i32 @function_11d48(i32 5)
  store i32 %v1_106c0, i32* @r5, align 4
  %v4_106d0 = call i32 @function_10a44(i32 %v1_106c0, i32 ptrtoint ([6 x i8]* @global_var_13c7c.281 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1c370.282 to i8*), align 4
  %v0_106e0 = load i32, i32* @r5, align 4
  store i32 %v0_106e0, i32* @global_var_1c36c.283, align 4
  %v0_106e4 = load i32, i32* @r6, align 4
  %v1_106e4 = trunc i32 %v0_106e4 to i8
  store i8 %v1_106e4, i8* bitcast (i32* @global_var_1c371.284 to i8*), align 4
  %v1_106e8 = call i32 @function_11d48(i32 4)
  store i32 %v1_106e8, i32* @r5, align 4
  %v4_106f8 = call i32 @function_10a44(i32 %v1_106e8, i32 ptrtoint ([5 x i8]* @global_var_13c84.286 to i32), i32 4)
  %v0_10700 = load i32, i32* %fp.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1c378.287 to i8*), align 4
  %v0_10708 = load i32, i32* @r5, align 4
  store i32 %v0_10708, i32* @global_var_1c374.288, align 4
  %v0_1070c = load i32, i32* @r6, align 4
  %v1_1070c = trunc i32 %v0_1070c to i8
  store i8 %v1_1070c, i8* bitcast (i32* @global_var_1c379.289 to i8*), align 4
  %v1_10710 = call i32 @function_11d48(i32 %v0_10700)
  %v0_10718 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_10710, i32* @r5, align 4
  %v4_10720 = call i32 @function_10a44(i32 %v1_10710, i32 ptrtoint ([7 x i8]* @global_var_13c8c.291 to i32), i32 %v0_10718)
  %v0_10728 = load i32, i32* @r5, align 4
  store i32 %v0_10728, i32* @global_var_1c37c.292, align 4
  %v1_1072c = trunc i32 %v0_10718 to i8
  store i8 %v1_1072c, i8* bitcast (i32* @global_var_1c380.293 to i8*), align 4
  %v0_10730 = load i32, i32* @r6, align 4
  %v1_10730 = trunc i32 %v0_10730 to i8
  store i8 %v1_10730, i8* bitcast (i32* @global_var_1c381.294 to i8*), align 4
  %v1_10734 = call i32 @function_11d48(i32 14)
  store i32 %v1_10734, i32* @r5, align 4
  store i32 14, i32* %sl.global-to-local, align 4
  %v4_10748 = call i32 @function_10a44(i32 %v1_10734, i32 ptrtoint ([15 x i8]* @global_var_13c94.296 to i32), i32 14)
  %v0_10750 = load i32, i32* @r5, align 4
  store i32 %v0_10750, i32* @global_var_1c384.297, align 4
  store i8 14, i8* bitcast (i32* @global_var_1c388.298 to i8*), align 4
  %v0_10758 = load i32, i32* @r6, align 4
  %v1_10758 = trunc i32 %v0_10758 to i8
  store i8 %v1_10758, i8* bitcast (i32* @global_var_1c389.299 to i8*), align 4
  %v1_1075c = call i32 @function_11d48(i32 8)
  store i32 8, i32* @r7, align 4
  store i32 %v1_1075c, i32* @r5, align 4
  %v4_10770 = call i32 @function_10a44(i32 %v1_1075c, i32 ptrtoint ([9 x i8]* @global_var_13ca4.301 to i32), i32 8)
  %v0_10774 = load i32, i32* %r8.global-to-local, align 4
  %v0_10778 = load i32, i32* @r5, align 4
  store i32 %v0_10778, i32* @global_var_1c3e4.302, align 4
  %v0_1077c = load i32, i32* @r7, align 4
  %v1_1077c = trunc i32 %v0_1077c to i8
  store i8 %v1_1077c, i8* bitcast (i32* @global_var_1c3e8.303 to i8*), align 4
  %v0_10780 = load i32, i32* @r6, align 4
  %v1_10780 = trunc i32 %v0_10780 to i8
  store i8 %v1_10780, i8* bitcast (i32* @global_var_1c3e9.304 to i8*), align 4
  %v1_10784 = call i32 @function_11d48(i32 %v0_10774)
  %v0_1078c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10784, i32* @r5, align 4
  %v4_10794 = call i32 @function_10a44(i32 %v1_10784, i32 ptrtoint ([8 x i8]* @global_var_13cb0.306 to i32), i32 %v0_1078c)
  %v0_10798 = load i32, i32* %sb.global-to-local, align 4
  %v0_1079c = load i32, i32* @r5, align 4
  store i32 %v0_1079c, i32* @global_var_1c3ec.307, align 4
  %v1_107a0 = trunc i32 %v0_1078c to i8
  store i8 %v1_107a0, i8* bitcast (i32* @global_var_1c3f0.308 to i8*), align 4
  %v0_107a4 = load i32, i32* @r6, align 4
  %v1_107a4 = trunc i32 %v0_107a4 to i8
  store i8 %v1_107a4, i8* bitcast (i32* @global_var_1c3f1.309 to i8*), align 4
  %v1_107a8 = call i32 @function_11d48(i32 %v0_10798)
  %v0_107b0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_107a8, i32* @r5, align 4
  %v4_107b8 = call i32 @function_10a44(i32 %v1_107a8, i32 ptrtoint ([17 x i8]* @global_var_13cb8.311 to i32), i32 %v0_107b0)
  %v0_107bc = load i32, i32* @r7, align 4
  %v0_107c0 = load i32, i32* @r5, align 4
  store i32 %v0_107c0, i32* @global_var_1c38c.312, align 4
  %v1_107c4 = trunc i32 %v0_107b0 to i8
  store i8 %v1_107c4, i8* bitcast (i32* @global_var_1c390.313 to i8*), align 4
  %v0_107c8 = load i32, i32* @r6, align 4
  %v1_107c8 = trunc i32 %v0_107c8 to i8
  store i8 %v1_107c8, i8* bitcast (i32* @global_var_1c391.314 to i8*), align 4
  %v1_107cc = call i32 @function_11d48(i32 %v0_107bc)
  %v0_107d4 = load i32, i32* @r7, align 4
  store i32 %v1_107cc, i32* @r5, align 4
  %v4_107dc = call i32 @function_10a44(i32 %v1_107cc, i32 ptrtoint ([9 x i8]* @global_var_13ccc.316 to i32), i32 %v0_107d4)
  %v0_107e4 = load i32, i32* @r5, align 4
  store i32 %v0_107e4, i32* @global_var_1c394.317, align 4
  %v0_107e8 = load i32, i32* @r7, align 4
  %v1_107e8 = trunc i32 %v0_107e8 to i8
  store i8 %v1_107e8, i8* bitcast (i32* @global_var_1c398.318 to i8*), align 4
  %v0_107ec = load i32, i32* @r6, align 4
  %v1_107ec = trunc i32 %v0_107ec to i8
  store i8 %v1_107ec, i8* bitcast (i32* @global_var_1c399.319 to i8*), align 4
  %v1_107f0 = call i32 @function_11d48(i32 21)
  store i32 %v1_107f0, i32* @r5, align 4
  %v3_10800 = call i32 @function_10a44(i32 %v1_107f0, i32 ptrtoint (i32* @global_var_13d74.321 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1c3a0.322 to i8*), align 4
  %v0_10810 = load i32, i32* @r5, align 4
  store i32 %v0_10810, i32* @global_var_1c39c.323, align 4
  %v0_10814 = load i32, i32* @r6, align 4
  %v1_10814 = trunc i32 %v0_10814 to i8
  store i8 %v1_10814, i8* bitcast (i32* @global_var_1c3a1.324 to i8*), align 4
  %v1_10818 = call i32 @function_11d48(i32 17)
  store i32 %v1_10818, i32* @r5, align 4
  %v4_10828 = call i32 @function_10a44(i32 %v1_10818, i32 ptrtoint ([18 x i8]* @global_var_13cd8.326 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1c3a8.327 to i8*), align 4
  %v0_10838 = load i32, i32* @r5, align 4
  store i32 %v0_10838, i32* @global_var_1c3a4.328, align 4
  %v0_1083c = load i32, i32* @r6, align 4
  %v1_1083c = trunc i32 %v0_1083c to i8
  store i8 %v1_1083c, i8* bitcast (i32* @global_var_1c3a9.329 to i8*), align 4
  %v1_10840 = call i32 @function_11d48(i32 12)
  store i32 %v1_10840, i32* @r5, align 4
  %v4_10850 = call i32 @function_10a44(i32 %v1_10840, i32 ptrtoint ([13 x i8]* @global_var_13cec.331 to i32), i32 12)
  %v0_10858 = load i32, i32* %sl.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1c3b0.332 to i8*), align 4
  %v0_10860 = load i32, i32* @r5, align 4
  store i32 %v0_10860, i32* @global_var_1c3ac.333, align 4
  %v0_10864 = load i32, i32* @r6, align 4
  %v1_10864 = trunc i32 %v0_10864 to i8
  store i8 %v1_10864, i8* bitcast (i32* @global_var_1c3b1.334 to i8*), align 4
  %v1_10868 = call i32 @function_11d48(i32 %v0_10858)
  %v0_10870 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_10868, i32* @r5, align 4
  %v4_10878 = call i32 @function_10a44(i32 %v1_10868, i32 ptrtoint ([15 x i8]* @global_var_13cfc.336 to i32), i32 %v0_10870)
  %v0_10880 = load i32, i32* @r5, align 4
  store i32 %v0_10880, i32* @global_var_1c3b4.337, align 4
  %v1_10884 = trunc i32 %v0_10870 to i8
  store i8 %v1_10884, i8* bitcast (i32* @global_var_1c3b8.338 to i8*), align 4
  %v0_10888 = load i32, i32* @r6, align 4
  %v1_10888 = trunc i32 %v0_10888 to i8
  store i8 %v1_10888, i8* bitcast (i32* @global_var_1c3b9.339 to i8*), align 4
  %v1_1088c = call i32 @function_11d48(i32 19)
  store i32 %v1_1088c, i32* @r5, align 4
  %v4_1089c = call i32 @function_10a44(i32 %v1_1088c, i32 ptrtoint ([20 x i8]* @global_var_13d0c.341 to i32), i32 19)
  %v0_108a4 = load i32, i32* @r7, align 4
  store i8 19, i8* bitcast (i32* @global_var_1c3c0.342 to i8*), align 4
  %v0_108ac = load i32, i32* @r5, align 4
  store i32 %v0_108ac, i32* @global_var_1c3bc.343, align 4
  %v0_108b0 = load i32, i32* @r6, align 4
  %v1_108b0 = trunc i32 %v0_108b0 to i8
  store i8 %v1_108b0, i8* bitcast (i32* @global_var_1c3c1.344 to i8*), align 4
  %v1_108b4 = call i32 @function_11d48(i32 %v0_108a4)
  %v0_108bc = load i32, i32* @r7, align 4
  store i32 %v1_108b4, i32* @r5, align 4
  %v4_108c4 = call i32 @function_10a44(i32 %v1_108b4, i32 ptrtoint ([9 x i8]* @global_var_13d20.346 to i32), i32 %v0_108bc)
  %v0_108cc = load i32, i32* @r5, align 4
  store i32 %v0_108cc, i32* @global_var_1c3c4.347, align 4
  %v0_108d0 = load i32, i32* @r7, align 4
  %v1_108d0 = trunc i32 %v0_108d0 to i8
  store i8 %v1_108d0, i8* bitcast (i32* @global_var_1c3c8.348 to i8*), align 4
  %v0_108d4 = load i32, i32* @r6, align 4
  %v1_108d4 = trunc i32 %v0_108d4 to i8
  store i8 %v1_108d4, i8* bitcast (i32* @global_var_1c3c9.349 to i8*), align 4
  %v1_108d8 = call i32 @function_11d48(i32 5)
  store i32 %v1_108d8, i32* @r5, align 4
  %v4_108e8 = call i32 @function_10a44(i32 %v1_108d8, i32 ptrtoint ([6 x i8]* @global_var_13d2c.351 to i32), i32 5)
  %v0_108f0 = load i32, i32* %fp.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1c3d0.352 to i8*), align 4
  %v0_108f8 = load i32, i32* @r5, align 4
  store i32 %v0_108f8, i32* @global_var_1c3cc.353, align 4
  %v0_108fc = load i32, i32* @r6, align 4
  %v1_108fc = trunc i32 %v0_108fc to i8
  store i8 %v1_108fc, i8* bitcast (i32* @global_var_1c3d1.354 to i8*), align 4
  %v1_10900 = call i32 @function_11d48(i32 %v0_108f0)
  %v0_10908 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_10900, i32* @r5, align 4
  %v4_10910 = call i32 @function_10a44(i32 %v1_10900, i32 ptrtoint ([7 x i8]* @global_var_13d34.356 to i32), i32 %v0_10908)
  %v0_10918 = load i32, i32* @r5, align 4
  store i32 %v0_10918, i32* @global_var_1c3d4.357, align 4
  %v1_1091c = trunc i32 %v0_10908 to i8
  store i8 %v1_1091c, i8* bitcast (i32* @global_var_1c3d8.358 to i8*), align 4
  %v0_10920 = load i32, i32* @r6, align 4
  %v1_10920 = trunc i32 %v0_10920 to i8
  store i8 %v1_10920, i8* bitcast (i32* @global_var_1c3d9.359 to i8*), align 4
  %v1_10924 = call i32 @function_11d48(i32 23)
  %v4_10934 = call i32 @function_10a44(i32 %v1_10924, i32 ptrtoint ([24 x i8]* @global_var_13d3c.361 to i32), i32 23)
  %v0_1093c = load i32, i32* @r6, align 4
  %v1_1093c = trunc i32 %v0_1093c to i8
  store i8 %v1_1093c, i8* bitcast (i32* @global_var_1c3e1.362 to i8*), align 4
  store i32 %v1_10924, i32* @global_var_1c3dc.363, align 4
  store i8 23, i8* bitcast (i32* @global_var_1c3e0.364 to i8*), align 4
  %v2_10948 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10948, i32* @r4, align 4
  store i32 %v6_104b4, i32* @r5, align 4
  store i32 %v9_104b4, i32* @r6, align 4
  store i32 %v12_104b4, i32* @r7, align 4
  ret i32 %v4_10934

; uselistorder directives
  uselistorder i32 %v1_10900, { 1, 0 }
  uselistorder i32 %v1_108b4, { 1, 0 }
  uselistorder i32 %v1_10868, { 1, 0 }
  uselistorder i32 %v1_107cc, { 1, 0 }
  uselistorder i32 %v1_107a8, { 1, 0 }
  uselistorder i32 %v1_10784, { 1, 0 }
  uselistorder i32 %v1_1075c, { 1, 0 }
  uselistorder i32 %v1_10710, { 1, 0 }
  uselistorder i32 %v1_1069c, { 1, 0 }
  uselistorder i32 %v1_10588, { 1, 0 }
  uselistorder i32 %v1_10560, { 1, 0 }
  uselistorder i32 %v1_10538, { 1, 0 }
  uselistorder i32 %v1_104ec, { 1, 0 }
  uselistorder i32 %v1_104bc, { 1, 0 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 12, 13, 14, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder i8 16, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 (i32, i32, i32)* @function_10a44, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1c2fc.208 to i32), { 5, 0, 1, 2, 3, 4, 6 }
}

define i32 @function_109c8(i8* %arg1) local_unnamed_addr {
dec_label_pc_109c8:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_109cc = load i8, i8* %arg1, align 1
  %v4_109cc = zext i8 %v3_109cc to i32
  %v2_109d0 = icmp eq i8 %v3_109cc, 0
  br i1 %v2_109d0, label %dec_label_pc_109ec, label %bb

dec_label_pc_109ec:                               ; preds = %dec_label_pc_109dc, %dec_label_pc_109c8
  %merge = phi i32 [ %v4_109cc, %dec_label_pc_109c8 ], [ %v1_109dc, %dec_label_pc_109dc ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_109c8
  br label %dec_label_pc_109dc

dec_label_pc_109dc:                               ; preds = %dec_label_pc_109dc, %bb
  %v0_109dc = phi i32 [ %v1_109dc, %dec_label_pc_109dc ], [ 0, %bb ]
  %v1_109dc = add i32 %v0_109dc, 1
  %v2_109e0 = add i32 %v1_109dc, %tmp
  %v3_109e0 = inttoptr i32 %v2_109e0 to i8*
  %v4_109e0 = load i8, i8* %v3_109e0, align 1
  %v2_109e4 = icmp eq i8 %v4_109e0, 0
  br i1 %v2_109e4, label %dec_label_pc_109ec, label %dec_label_pc_109dc

; uselistorder directives
  uselistorder i32 %v1_109dc, { 1, 0, 2 }
}

define i32 @function_109f0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_109f0:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_109f0 = load i8, i8* %arg1, align 1
  %v3_109f0 = zext i8 %v2_109f0 to i32
  %v2_109f4 = icmp eq i8 %v2_109f0, 0
  br i1 %v2_109f4, label %dec_label_pc_10a38, label %dec_label_pc_109fc

dec_label_pc_109fc:                               ; preds = %dec_label_pc_109f0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10a00

dec_label_pc_10a00:                               ; preds = %dec_label_pc_10a00, %dec_label_pc_109fc
  %v0_10a00 = phi i32 [ %v1_10a00, %dec_label_pc_10a00 ], [ 0, %dec_label_pc_109fc ]
  %v1_10a00 = add i32 %v0_10a00, 1
  store i32 %v1_10a00, i32* %ip.global-to-local, align 4
  %v2_10a04 = add i32 %v1_10a00, %tmp
  %v3_10a04 = inttoptr i32 %v2_10a04 to i8*
  %v4_10a04 = load i8, i8* %v3_10a04, align 1
  %v2_10a08 = icmp eq i8 %v4_10a04, 0
  br i1 %v2_10a08, label %dec_label_pc_10a10, label %dec_label_pc_10a00

dec_label_pc_10a10:                               ; preds = %dec_label_pc_10a00
  %v7_10a10 = icmp eq i32 %v0_10a00, -2
  br i1 %v7_10a10, label %dec_label_pc_10a30, label %dec_label_pc_10a1c.preheader

dec_label_pc_10a1c.preheader:                     ; preds = %dec_label_pc_10a10, %dec_label_pc_10a38
  %storemerge = phi i32 [ %v3_109f0, %dec_label_pc_10a38 ], [ %v1_10a00, %dec_label_pc_10a10 ]
  %v2_10a28.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_10a1c

dec_label_pc_10a1c:                               ; preds = %dec_label_pc_10a1c.dec_label_pc_10a1c_crit_edge, %dec_label_pc_10a1c.preheader
  %v2_10a28 = phi i32 [ %v5_10a28, %dec_label_pc_10a1c.dec_label_pc_10a1c_crit_edge ], [ %v2_10a28.pre, %dec_label_pc_10a1c.preheader ]
  %v0_10a20 = phi i32 [ %v0_10a20.pre, %dec_label_pc_10a1c.dec_label_pc_10a1c_crit_edge ], [ %tmp, %dec_label_pc_10a1c.preheader ]
  %v0_10a1c = phi i32 [ %v0_10a1c.pre, %dec_label_pc_10a1c.dec_label_pc_10a1c_crit_edge ], [ %storemerge, %dec_label_pc_10a1c.preheader ]
  %v1_10a1c = add i32 %v0_10a1c, -1
  store i32 %v1_10a1c, i32* @r2, align 4
  %v1_10a20 = inttoptr i32 %v0_10a20 to i8*
  %v2_10a20 = load i8, i8* %v1_10a20, align 1
  %v5_10a20 = add i32 %v0_10a20, 1
  store i32 %v5_10a20, i32* %r1.global-to-local, align 4
  %v3_10a24 = icmp eq i32 %v0_10a1c, 0
  %v3_10a28 = inttoptr i32 %v2_10a28 to i8*
  store i8 %v2_10a20, i8* %v3_10a28, align 1
  %v4_10a28 = load i32, i32* @r0, align 4
  %v5_10a28 = add i32 %v4_10a28, 1
  store i32 %v5_10a28, i32* @r0, align 4
  br i1 %v3_10a24, label %dec_label_pc_10a30.loopexit, label %dec_label_pc_10a1c.dec_label_pc_10a1c_crit_edge

dec_label_pc_10a1c.dec_label_pc_10a1c_crit_edge:  ; preds = %dec_label_pc_10a1c
  %v0_10a1c.pre = load i32, i32* @r2, align 4
  %v0_10a20.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10a1c

dec_label_pc_10a30.loopexit:                      ; preds = %dec_label_pc_10a1c
  %v0_10a30.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10a30

dec_label_pc_10a30:                               ; preds = %dec_label_pc_10a30.loopexit, %dec_label_pc_10a10
  %v0_10a30 = phi i32 [ %v0_10a30.pre, %dec_label_pc_10a30.loopexit ], [ %v1_10a00, %dec_label_pc_10a10 ]
  ret i32 %v0_10a30

dec_label_pc_10a38:                               ; preds = %dec_label_pc_109f0
  store i32 %v3_109f0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10a1c.preheader

; uselistorder directives
  uselistorder i32 %v5_10a28, { 1, 0 }
  uselistorder i32 %v0_10a20, { 1, 0 }
  uselistorder i32 %v1_10a00, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_109f0, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10a1c.preheader, { 1, 0 }
}

define i32 @function_10a44(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a44:
  %ip.global-to-local = alloca i32, align 4
  %v2_10a44 = icmp eq i32 %arg3, 0
  br i1 %v2_10a44, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_10a50, %dec_label_pc_10a44
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_10a44
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10a50

dec_label_pc_10a50:                               ; preds = %dec_label_pc_10a50, %bb
  %v0_10a50 = phi i32 [ %v1_10a58, %dec_label_pc_10a50 ], [ 0, %bb ]
  %v2_10a50 = add i32 %v0_10a50, %arg2
  %v3_10a50 = inttoptr i32 %v2_10a50 to i8*
  %v4_10a50 = load i8, i8* %v3_10a50, align 1
  %v4_10a54 = add i32 %v0_10a50, %arg1
  %v5_10a54 = inttoptr i32 %v4_10a54 to i8*
  store i8 %v4_10a50, i8* %v5_10a54, align 1
  %v0_10a58 = load i32, i32* %ip.global-to-local, align 4
  %v1_10a58 = add i32 %v0_10a58, 1
  store i32 %v1_10a58, i32* %ip.global-to-local, align 4
  %v9_10a5c = icmp eq i32 %v1_10a58, %arg3
  br i1 %v9_10a5c, label %.loopexit, label %dec_label_pc_10a50

; uselistorder directives
  uselistorder i32 %v1_10a58, { 1, 2, 0 }
}

define i32 @function_10a68() local_unnamed_addr {
dec_label_pc_10a68:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_10a68 = load i32, i32* @r1, align 4
  %v2_10a68 = icmp eq i32 %v0_10a68, 0
  br i1 %v2_10a68, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_10a68
  %v2_10a6c = load i32, i32* @r0, align 4
  ret i32 %v2_10a6c

bb3:                                              ; preds = %dec_label_pc_10a68
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10a78

dec_label_pc_10a78:                               ; preds = %dec_label_pc_10a78.dec_label_pc_10a78_crit_edge, %bb3
  %v2_10a78 = phi i32 [ %v1_10a7c, %dec_label_pc_10a78.dec_label_pc_10a78_crit_edge ], [ 0, %bb3 ]
  %v0_10a78.off0 = phi i8 [ %extract.t, %dec_label_pc_10a78.dec_label_pc_10a78_crit_edge ], [ 0, %bb3 ]
  %v3_10a78 = load i32, i32* @r0, align 4
  %v4_10a78 = add i32 %v3_10a78, %v2_10a78
  %v5_10a78 = inttoptr i32 %v4_10a78 to i8*
  store i8 %v0_10a78.off0, i8* %v5_10a78, align 1
  %v0_10a7c = load i32, i32* %r3.global-to-local, align 4
  %v1_10a7c = add i32 %v0_10a7c, 1
  store i32 %v1_10a7c, i32* %r3.global-to-local, align 4
  %v1_10a80 = load i32, i32* @r1, align 4
  %v9_10a80 = icmp eq i32 %v1_10a7c, %v1_10a80
  br i1 %v9_10a80, label %dec_label_pc_10a88, label %dec_label_pc_10a78.dec_label_pc_10a78_crit_edge

dec_label_pc_10a78.dec_label_pc_10a78_crit_edge:  ; preds = %dec_label_pc_10a78
  %v0_10a78.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_10a78.pre to i8
  br label %dec_label_pc_10a78

dec_label_pc_10a88:                               ; preds = %dec_label_pc_10a78
  %v1_10a88 = load i32, i32* @r0, align 4
  ret i32 %v1_10a88

; uselistorder directives
  uselistorder i32 %v1_10a7c, { 1, 2, 0 }
}

define i32 @function_10a8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10a8c:
  %v7_10aa0 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10aa0, label %dec_label_pc_10aa4, label %dec_label_pc_10aac

dec_label_pc_10aa4:                               ; preds = %dec_label_pc_10ac0, %dec_label_pc_10a8c, %dec_label_pc_10aac
  ret i32 -1

dec_label_pc_10aac:                               ; preds = %dec_label_pc_10a8c
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_10aa4, label %dec_label_pc_10ab4

dec_label_pc_10ab4:                               ; preds = %dec_label_pc_10aac
  br label %dec_label_pc_10acc

dec_label_pc_10ac0:                               ; preds = %dec_label_pc_10ae4, %dec_label_pc_10acc
  %v1_10ac0 = add i32 %v0_10aec, 1
  %v9_10ac4 = icmp eq i32 %v1_10ac0, %arg2
  br i1 %v9_10ac4, label %dec_label_pc_10aa4, label %dec_label_pc_10acc

dec_label_pc_10acc:                               ; preds = %dec_label_pc_10ac0, %dec_label_pc_10ab4
  %v0_10aec = phi i32 [ %v1_10ac0, %dec_label_pc_10ac0 ], [ 0, %dec_label_pc_10ab4 ]
  %v0_10ad8 = phi i32 [ %v1_10ad8., %dec_label_pc_10ac0 ], [ 0, %dec_label_pc_10ab4 ]
  %v2_10acc = add i32 %v0_10ad8, %arg3
  %v3_10acc = inttoptr i32 %v2_10acc to i8*
  %v4_10acc = load i8, i8* %v3_10acc, align 1
  %v2_10ad0 = add i32 %v0_10aec, %arg1
  %v3_10ad0 = inttoptr i32 %v2_10ad0 to i8*
  %v4_10ad0 = load i8, i8* %v3_10ad0, align 1
  %v9_10ad4 = icmp eq i8 %v4_10ad0, %v4_10acc
  %v1_10ad8 = add i32 %v0_10ad8, 1
  %v1_10ad8. = select i1 %v9_10ad4, i32 %v1_10ad8, i32 0
  br i1 %v9_10ad4, label %dec_label_pc_10ae4, label %dec_label_pc_10ac0

dec_label_pc_10ae4:                               ; preds = %dec_label_pc_10acc
  %v9_10ae4 = icmp eq i32 %v1_10ad8., %arg4
  br i1 %v9_10ae4, label %dec_label_pc_10aec, label %dec_label_pc_10ac0

dec_label_pc_10aec:                               ; preds = %dec_label_pc_10ae4
  %v1_10aec = add i32 %v0_10aec, 1
  ret i32 %v1_10aec

; uselistorder directives
  uselistorder i1 %v9_10ad4, { 1, 0 }
  uselistorder i32 %v0_10ad8, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10aa4, { 0, 2, 1 }
}

define i32 @function_10af4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10af4:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_10af4 = load i32, i32* @r4, align 4
  store i32 %v3_10af4, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10b00

dec_label_pc_10b00:                               ; preds = %.thread, %dec_label_pc_10b18, %bb, %dec_label_pc_10af4
  %v0_10b00 = phi i32 [ %tmp, %dec_label_pc_10af4 ], [ %v5_10b00, %bb ], [ %v5_10b00, %dec_label_pc_10b18 ], [ %v5_10b00, %.thread ]
  %v1_10b00 = inttoptr i32 %v0_10b00 to i8*
  %v2_10b00 = load i8, i8* %v1_10b00, align 1
  %v3_10b00 = zext i8 %v2_10b00 to i32
  %v5_10b00 = add i32 %v0_10b00, 1
  store i32 %v5_10b00, i32* %r5.global-to-local, align 4
  %v7_10b08 = icmp eq i8 %v2_10b00, 9
  br i1 %v7_10b08, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10b00
  store i32 %v3_10b00, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b00

bb:                                               ; preds = %dec_label_pc_10b00
  %v8_10b0c = icmp eq i8 %v2_10b00, 32
  store i32 %v3_10b00, i32* %r4.global-to-local, align 4
  br i1 %v8_10b0c, label %dec_label_pc_10b00, label %dec_label_pc_10b18

dec_label_pc_10b18:                               ; preds = %bb
  %v7_10b18 = icmp eq i8 %v2_10b00, 10
  br i1 %v7_10b18, label %dec_label_pc_10b00, label %dec_label_pc_10b20

dec_label_pc_10b20:                               ; preds = %dec_label_pc_10b18
  %v7_10b20 = icmp eq i8 %v2_10b00, 45
  br i1 %v7_10b20, label %dec_label_pc_10c00, label %dec_label_pc_10b28

dec_label_pc_10b28:                               ; preds = %dec_label_pc_10b20
  %v7_10b28 = icmp eq i8 %v2_10b00, 43
  br i1 %v7_10b28, label %bb48, label %dec_label_pc_10b38

bb48:                                             ; preds = %dec_label_pc_10b28
  %v2_10b2c = inttoptr i32 %v5_10b00 to i8*
  %v3_10b2c = load i8, i8* %v2_10b2c, align 1
  %v4_10b2c = zext i8 %v3_10b2c to i32
  store i32 %v4_10b2c, i32* %r4.global-to-local, align 4
  %v6_10b2c = add i32 %v0_10b00, 2
  store i32 %v6_10b2c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10b38

dec_label_pc_10b38:                               ; preds = %bb48, %dec_label_pc_10b28, %dec_label_pc_10c00
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10c00 ], [ 2147483647, %dec_label_pc_10b28 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10c00 ], [ 0, %dec_label_pc_10b28 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_10b40 = call i32 @function_11054(i32 %storemerge1, i32 %arg2)
  %v0_10b44 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10b44, i32* @r1, align 4
  store i32 %v2_10b40, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_10b50 = call i32 @function_10f44()
  store i32 %v0_10b50, i32* @lr, align 4
  %v0_10b60.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b60

dec_label_pc_10b60:                               ; preds = %.thread8, %dec_label_pc_10b38
  %v2_10bdc11 = phi i32 [ %v1_10bf826, %.thread8 ], [ 0, %dec_label_pc_10b38 ]
  %v1_10bb8 = phi i32 [ %v0_10bec24, %.thread8 ], [ 0, %dec_label_pc_10b38 ]
  %v1_10ba0 = phi i32 [ %v3_10be4, %.thread8 ], [ %v0_10b60.pre, %dec_label_pc_10b38 ]
  %v1_10b60 = urem i32 %v1_10ba0, 256
  %v1_10b64 = add nsw i32 %v1_10b60, -48
  %v1_10b6c = add nsw i32 %v1_10b60, -97
  %v1_10b70 = add i32 %v1_10ba0, -48
  %v1_10b74 = add nsw i32 %v1_10b60, -65
  %tmp71 = icmp ult i32 %v1_10b64, 10
  br i1 %tmp71, label %dec_label_pc_10ba4, label %dec_label_pc_10b7c

dec_label_pc_10b7c:                               ; preds = %dec_label_pc_10b60
  %v2_10b7c = icmp ugt i32 %v1_10b74, 24
  %v7_10b7c = icmp eq i32 %v1_10b74, 25
  %v2_10b80 = xor i1 %v7_10b7c, true
  %v3_10b80 = and i1 %v2_10b7c, %v2_10b80
  br i1 %v3_10b80, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_10b7c
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_10b7c, %bb49
  %v0_10b9420 = phi i32 [ %v1_10b70, %dec_label_pc_10b7c ], [ 0, %bb49 ]
  %v2_10b84 = xor i1 %v2_10b7c, true
  %v3_10b84 = or i1 %v7_10b7c, %v2_10b84
  br i1 %v3_10b84, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_10b94 = phi i32 [ %v0_10b9420, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_10b80, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_10b8c = icmp ugt i32 %v1_10b6c, 24
  %v11_10b8c = icmp eq i32 %v1_10b6c, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_10b90 = phi i1 [ %v7_10b7c, %bb52 ], [ %v11_10b8c, %bb53 ]
  %v0_10b90 = phi i1 [ %v2_10b7c, %bb52 ], [ %v6_10b8c, %bb53 ]
  %v2_10b90 = xor i1 %v1_10b90, true
  %v3_10b90 = and i1 %v0_10b90, %v2_10b90
  br i1 %v3_10b90, label %dec_label_pc_10bec, label %dec_label_pc_10b94

dec_label_pc_10b94:                               ; preds = %bb54
  %v2_10b94 = icmp eq i32 %v0_10b94, 0
  %. = select i1 %v2_10b94, i32 87, i32 55
  %v2_10ba0 = sub i32 %v1_10ba0, %.
  br label %dec_label_pc_10ba4

dec_label_pc_10ba4:                               ; preds = %dec_label_pc_10b60, %dec_label_pc_10b94
  %v0_10bb834 = phi i32 [ %v1_10b74, %dec_label_pc_10b60 ], [ %., %dec_label_pc_10b94 ]
  %v3_10bdc12 = phi i32 [ %v1_10b70, %dec_label_pc_10b60 ], [ %v2_10ba0, %dec_label_pc_10b94 ]
  %v1_10ba4 = load i32, i32* %r6.global-to-local, align 4
  %v6_10ba8 = icmp slt i32 %v3_10bdc12, %v1_10ba4
  br i1 %v6_10ba8, label %dec_label_pc_10bac, label %dec_label_pc_10bec

dec_label_pc_10bac:                               ; preds = %dec_label_pc_10ba4
  %v3_10bac = icmp uge i32 %v2_10bdc11, %v0_10b50
  %v9_10bac = icmp eq i32 %v2_10bdc11, %v0_10b50
  %v2_10bb0 = xor i1 %v3_10bac, true
  %v3_10bb0 = or i1 %v9_10bac, %v2_10bb0
  br i1 %v3_10bb0, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_10bac
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_10bac, %bb57
  %v0_10bb833 = phi i32 [ %v0_10bb834, %dec_label_pc_10bac ], [ 0, %bb57 ]
  %v2_10bb4 = xor i1 %v9_10bac, true
  %v3_10bb4 = and i1 %v3_10bac, %v2_10bb4
  br i1 %v3_10bb4, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_10bb8 = phi i32 [ %v0_10bb833, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_10bb8, 0
  %v4_10bb8 = zext i1 %tmp72 to i32
  %v5_10bb8 = or i32 %v0_10bb8, %v4_10bb8
  %v7_10bb8 = icmp eq i32 %v5_10bb8, 0
  br i1 %v7_10bb8, label %dec_label_pc_10bc4, label %.thread8

dec_label_pc_10bc4:                               ; preds = %bb60
  %v1_10bd0 = load i32, i32* %r8.global-to-local, align 4
  %v7_10bd4 = icmp sgt i32 %v3_10bdc12, %v1_10bd0
  br i1 %v7_10bd4, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_10bc4
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_10bc4
  %v2_10bd8 = icmp eq i1 %v9_10bac, false
  br i1 %v2_10bd8, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_10bdc13 = mul i32 %v1_10ba4, %v2_10bdc11
  %v5_10bdc14 = add i32 %v4_10bdc13, %v3_10bdc12
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_10bf826 = phi i32 [ %v2_10bdc11, %bb63 ], [ %v2_10bdc11, %bb60 ], [ %v5_10bdc14, %bb64 ]
  %v0_10bec24 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_10be4 = load i32, i32* %r5.global-to-local, align 4
  %v1_10be4 = inttoptr i32 %v0_10be4 to i8*
  %v2_10be4 = load i8, i8* %v1_10be4, align 1
  %v3_10be4 = zext i8 %v2_10be4 to i32
  store i32 %v3_10be4, i32* %r4.global-to-local, align 4
  %v5_10be4 = add i32 %v0_10be4, 1
  store i32 %v5_10be4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10b60

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10ba4, %bb54
  %v1_10bec = icmp slt i32 %v1_10bb8, 0
  %v0_10c10 = load i32, i32* %sl.global-to-local, align 4
  %v2_10c10 = icmp eq i32 %v0_10c10, 0
  br i1 %v1_10bec, label %dec_label_pc_10c10, label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bec
  br i1 %v2_10c10, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_10bf4
  %v2_10bf8 = sub i32 0, %v2_10bdc11
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_10bf4, %bb65
  %v23_10bfc = phi i32 [ %v2_10bdc11, %dec_label_pc_10bf4 ], [ %v2_10bf8, %bb65 ]
  %v2_10bfc = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10bfc, i32* @r4, align 4
  ret i32 %v23_10bfc

dec_label_pc_10c00:                               ; preds = %dec_label_pc_10b20
  %v1_10c00 = inttoptr i32 %v5_10b00 to i8*
  %v2_10c00 = load i8, i8* %v1_10c00, align 1
  %v3_10c00 = zext i8 %v2_10c00 to i32
  store i32 %v3_10c00, i32* %r4.global-to-local, align 4
  %v5_10c00 = add i32 %v0_10b00, 2
  store i32 %v5_10c00, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10b38

dec_label_pc_10c10:                               ; preds = %dec_label_pc_10bec
  %.70 = select i1 %v2_10c10, i32 2147483647, i32 -2147483648
  %v2_10c1c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10c1c, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_10be4, { 1, 0 }
  uselistorder i1 %v9_10bac, { 1, 0, 2 }
  uselistorder i1 %v3_10bac, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_10b7c, { 1, 2, 0 }
  uselistorder i1 %v2_10b7c, { 1, 0, 2 }
  uselistorder i32 %v1_10b60, { 1, 2, 0 }
  uselistorder i32 %v1_10ba0, { 1, 2, 0 }
  uselistorder i32 %v1_10bb8, { 1, 0 }
  uselistorder i32 %v2_10bdc11, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_10b50, { 1, 0, 2 }
  uselistorder i32 %v5_10b00, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_10b00, { 1, 0 }
  uselistorder i32 %v0_10b00, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 4, 5, 2, 0, 1, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_10ba4, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_10b38, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10b00, { 1, 2, 0, 3 }
}

define i32 @function_10c20(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10c20:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10c20 = load i32, i32* @r4, align 4
  store i32 %v3_10c20, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10c38

dec_label_pc_10c38:                               ; preds = %dec_label_pc_10c64.dec_label_pc_10c38_crit_edge, %dec_label_pc_10c20
  %v0_10c3c = phi i32 [ %v0_10c3c.pre, %dec_label_pc_10c64.dec_label_pc_10c38_crit_edge ], [ %arg3, %dec_label_pc_10c20 ]
  %v0_10c38 = phi i32 [ %v1_10c50, %dec_label_pc_10c64.dec_label_pc_10c38_crit_edge ], [ %tmp, %dec_label_pc_10c20 ]
  %tmp12 = inttoptr i32 %v0_10c38 to i32*
  %v5_10c44 = call i32 @function_11494(i32 %v0_10c3c, i32* %tmp12, i32 1)
  %v7_10c48 = icmp eq i32 %v5_10c44, 1
  %v0_10c4c = load i32, i32* @r4, align 4
  %v1_10c50 = add i32 %v0_10c4c, 1
  store i32 %v1_10c50, i32* @r4, align 4
  %v0_10c58 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_10c48, label %dec_label_pc_10c58, label %dec_label_pc_10c70

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c38
  %v1_10c58 = add i32 %v0_10c58, 1
  store i32 %v1_10c58, i32* %r5.global-to-local, align 4
  %v0_10c5c = load i32, i32* %r7.global-to-local, align 4
  %v7_10c60 = icmp sgt i32 %v0_10c5c, %v1_10c58
  br i1 %v7_10c60, label %dec_label_pc_10c64, label %dec_label_pc_10c70

dec_label_pc_10c64:                               ; preds = %dec_label_pc_10c58
  %v1_10c64 = inttoptr i32 %v0_10c4c to i8*
  %v2_10c64 = load i8, i8* %v1_10c64, align 1
  %v7_10c68 = icmp eq i8 %v2_10c64, 10
  br i1 %v7_10c68, label %dec_label_pc_10c70, label %dec_label_pc_10c64.dec_label_pc_10c38_crit_edge

dec_label_pc_10c64.dec_label_pc_10c38_crit_edge:  ; preds = %dec_label_pc_10c64
  %v0_10c3c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10c38

dec_label_pc_10c70:                               ; preds = %dec_label_pc_10c38, %dec_label_pc_10c64, %dec_label_pc_10c58
  %v0_10c70 = phi i32 [ %v1_10c58, %dec_label_pc_10c64 ], [ %v1_10c58, %dec_label_pc_10c58 ], [ %v0_10c58, %dec_label_pc_10c38 ]
  %v2_10c70 = icmp eq i32 %v0_10c70, 0
  %v1_10c74 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_10c70, i32 0, i32 %v1_10c74
  %v2_10c7c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10c7c, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10c50, { 1, 0 }
  uselistorder i8 10, { 2, 0, 3, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_11494, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c70, { 1, 2, 0 }
}

define i32 @function_10c80() local_unnamed_addr {
dec_label_pc_10c80:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_10c80 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_10c90 = call i32 @function_118a0()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_10c98 = inttoptr i32 %v0_10c90 to i32*
  store i32 0, i32* %v2_10c98, align 4
  %v0_10ca4 = load i32, i32* %r6.global-to-local, align 4
  %v3_10ca8 = call i32 @function_11bb0(i32 2, i32 2, i32 %v0_10ca4)
  %v7_10cb4 = icmp eq i32 %v3_10ca8, -1
  store i32 %v3_10ca8, i32* %r5.global-to-local, align 4
  %v2_10cc0 = load i32, i32* @r4, align 4
  br i1 %v7_10cb4, label %dec_label_pc_10d10, label %dec_label_pc_10cd4

dec_label_pc_10cd4:                               ; preds = %dec_label_pc_10c80
  %v7_10cc0 = shl i32 2056, %v2_10cc0
  %v8_10cc0 = or i32 %v7_10cc0, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_10cf0 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_10cf0 = call i32 @function_11a0c(i32 %v3_10ca8, %sockaddr* %v3_10cf0, i32 %v2_10cc0)
  %v2_10cf8 = ptrtoint i32* %stack_var_-24 to i32
  %v0_10cfc = load i32, i32* %r5.global-to-local, align 4
  %v4_10d00 = call i32 @function_11a38(i32 %v0_10cfc, %sockaddr* %v3_10cf0, i32 %v2_10cf8)
  %v1_10d08 = call i32 @function_112cc(i32 %v0_10cfc)
  br label %dec_label_pc_10d10

dec_label_pc_10d10:                               ; preds = %dec_label_pc_10c80, %dec_label_pc_10cd4
  %v0_10d10 = phi i32 [ %v0_10ca4, %dec_label_pc_10c80 ], [ %v8_10cc0, %dec_label_pc_10cd4 ]
  store i32 %v3_10c80, i32* @r4, align 4
  ret i32 %v0_10d10

; uselistorder directives
  uselistorder i32 %v3_10ca8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_11a0c, { 1, 0, 2, 3, 6, 4, 5, 7, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11bb0, { 17, 18, 15, 16, 14, 4, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10d10, { 1, 0 }
}

define i32 @function_10d1c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10d1c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_10d20 = load i8, i8* %tmp, align 1
  %v2_10d24 = icmp eq i8 %v3_10d20, 0
  br i1 %v2_10d24, label %bb, label %dec_label_pc_10d38

bb:                                               ; preds = %dec_label_pc_10d1c
  %v4_10d20 = zext i8 %v3_10d20 to i32
  br label %dec_label_pc_10d4c

dec_label_pc_10d38:                               ; preds = %dec_label_pc_10d1c
  br label %dec_label_pc_10d3c

dec_label_pc_10d3c:                               ; preds = %dec_label_pc_10d3c, %dec_label_pc_10d38
  %v0_10d3c = phi i32 [ %v1_10d3c, %dec_label_pc_10d3c ], [ 0, %dec_label_pc_10d38 ]
  %v1_10d3c = add i32 %v0_10d3c, 1
  %v2_10d40 = add i32 %v1_10d3c, %arg2
  %v3_10d40 = inttoptr i32 %v2_10d40 to i8*
  %v4_10d40 = load i8, i8* %v3_10d40, align 1
  %v2_10d44 = icmp eq i8 %v4_10d40, 0
  br i1 %v2_10d44, label %dec_label_pc_10d4c, label %dec_label_pc_10d3c

dec_label_pc_10d4c:                               ; preds = %dec_label_pc_10d3c, %bb
  %v0_10d9018 = phi i32 [ %v4_10d20, %bb ], [ %v1_10d3c, %dec_label_pc_10d3c ]
  %v0_10d541 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_10d541, 1
  br i1 %tmp27, label %dec_label_pc_10da0, label %dec_label_pc_10d60

dec_label_pc_10d60:                               ; preds = %dec_label_pc_10d4c, %dec_label_pc_10d54.backedge
  %v0_10d58.in = phi i32 [ %v0_10d58, %dec_label_pc_10d54.backedge ], [ %v0_10d541, %dec_label_pc_10d4c ]
  %v0_10d84 = phi i32 [ %v1_10d84., %dec_label_pc_10d54.backedge ], [ 0, %dec_label_pc_10d4c ]
  %v0_10d60 = phi i32 [ %v5_10d60, %dec_label_pc_10d54.backedge ], [ %tmp20, %dec_label_pc_10d4c ]
  %v0_10d58 = add i32 %v0_10d58.in, -1
  %v1_10d60 = inttoptr i32 %v0_10d60 to i8*
  %v2_10d60 = load i8, i8* %v1_10d60, align 1
  %v3_10d60 = zext i8 %v2_10d60 to i32
  store i32 %v3_10d60, i32* @lr, align 4
  %v5_10d60 = add i32 %v0_10d60, 1
  %v2_10d64 = add i32 %v0_10d84, %arg2
  %v3_10d64 = inttoptr i32 %v2_10d64 to i8*
  %v4_10d64 = load i8, i8* %v3_10d64, align 1
  %v6_10d64 = zext i8 %v4_10d64 to i32
  %v1_10d68 = add nsw i32 %v3_10d60, -65
  %v1_10d6c = add nsw i32 %v6_10d64, -65
  %tmp35 = icmp ult i32 %v1_10d68, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_10d60
  %v5_10d74 = or i32 %v3_10d60, 96
  store i32 %v5_10d74, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_10d60, %bb28
  %v0_10d80 = phi i32 [ %v3_10d60, %dec_label_pc_10d60 ], [ %v5_10d74, %bb28 ]
  %tmp36 = icmp ult i32 %v1_10d6c, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_10d7c = or i32 %v6_10d64, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_10d80 = phi i32 [ %v6_10d64, %bb29 ], [ %v5_10d7c, %bb30 ]
  %v9_10d80 = icmp eq i32 %v0_10d80, %v1_10d80
  %v1_10d84 = add i32 %v0_10d84, 1
  %v1_10d84. = select i1 %v9_10d80, i32 %v1_10d84, i32 0
  br i1 %v9_10d80, label %dec_label_pc_10d90, label %dec_label_pc_10d54.backedge

dec_label_pc_10d54.backedge:                      ; preds = %bb31, %dec_label_pc_10d90
  %tmp32 = icmp slt i32 %v0_10d58, 1
  br i1 %tmp32, label %dec_label_pc_10da0, label %dec_label_pc_10d60

dec_label_pc_10d90:                               ; preds = %bb31
  %v9_10d90 = icmp eq i32 %v0_10d9018, %v1_10d84.
  br i1 %v9_10d90, label %dec_label_pc_10d98, label %dec_label_pc_10d54.backedge

dec_label_pc_10d98:                               ; preds = %dec_label_pc_10d90
  %v2_10d98 = sub i32 %v5_10d60, %tmp20
  ret i32 %v2_10d98

dec_label_pc_10da0:                               ; preds = %dec_label_pc_10d54.backedge, %dec_label_pc_10d4c
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_10d84., { 1, 0 }
  uselistorder i32 %v0_10d60, { 1, 0 }
  uselistorder i32 %v0_10d84, { 1, 0 }
  uselistorder i8 %v3_10d20, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_10d54.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_10d60, { 1, 0 }
}

define i32 @function_10da8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10da8:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10da8 = load i8, i8* %arg1, align 1
  %v2_10dac = icmp eq i8 %v2_10da8, 0
  br i1 %v2_10dac, label %bb, label %dec_label_pc_10db8

bb:                                               ; preds = %dec_label_pc_10da8
  %v3_10da8 = zext i8 %v2_10da8 to i32
  br label %dec_label_pc_10dcc

dec_label_pc_10db8:                               ; preds = %dec_label_pc_10da8
  br label %dec_label_pc_10dbc

dec_label_pc_10dbc:                               ; preds = %dec_label_pc_10dbc, %dec_label_pc_10db8
  %v0_10dbc = phi i32 [ %v1_10dbc, %dec_label_pc_10dbc ], [ 0, %dec_label_pc_10db8 ]
  %v1_10dbc = add i32 %v0_10dbc, 1
  %v2_10dc0 = add i32 %v1_10dbc, %tmp
  %v3_10dc0 = inttoptr i32 %v2_10dc0 to i8*
  %v4_10dc0 = load i8, i8* %v3_10dc0, align 1
  %v2_10dc4 = icmp eq i8 %v4_10dc0, 0
  br i1 %v2_10dc4, label %dec_label_pc_10dcc, label %dec_label_pc_10dbc

dec_label_pc_10dcc:                               ; preds = %dec_label_pc_10dbc, %bb
  %v0_10df0 = phi i32 [ %v3_10da8, %bb ], [ %v1_10dbc, %dec_label_pc_10dbc ]
  %v1_10dcc = inttoptr i32 %arg2 to i8*
  %v2_10dcc = load i8, i8* %v1_10dcc, align 1
  %v3_10dcc = zext i8 %v2_10dcc to i32
  %v2_10dd0 = icmp eq i8 %v2_10dcc, 0
  br i1 %v2_10dd0, label %bb22, label %dec_label_pc_10ddc

bb22:                                             ; preds = %dec_label_pc_10dcc
  store i32 %v3_10dcc, i32* @r2, align 4
  br label %dec_label_pc_10df0

dec_label_pc_10ddc:                               ; preds = %dec_label_pc_10dcc
  br label %dec_label_pc_10de0

dec_label_pc_10de0:                               ; preds = %dec_label_pc_10de0, %dec_label_pc_10ddc
  %v0_10de0 = phi i32 [ %v1_10de0, %dec_label_pc_10de0 ], [ 0, %dec_label_pc_10ddc ]
  %v1_10de0 = add i32 %v0_10de0, 1
  store i32 %v1_10de0, i32* @r2, align 4
  %v2_10de4 = add i32 %v1_10de0, %arg2
  %v3_10de4 = inttoptr i32 %v2_10de4 to i8*
  %v4_10de4 = load i8, i8* %v3_10de4, align 1
  %v2_10de8 = icmp eq i8 %v4_10de4, 0
  br i1 %v2_10de8, label %dec_label_pc_10df0, label %dec_label_pc_10de0

dec_label_pc_10df0:                               ; preds = %dec_label_pc_10de0, %bb22
  %v0_10e1c4 = phi i32 [ %v3_10dcc, %bb22 ], [ %v1_10de0, %dec_label_pc_10de0 ]
  %v9_10df0 = icmp eq i32 %v0_10df0, %v0_10e1c4
  br i1 %v9_10df0, label %dec_label_pc_10e1c.preheader, label %dec_label_pc_10dfc

dec_label_pc_10e1c.preheader:                     ; preds = %dec_label_pc_10df0
  %v2_10e1c6 = icmp eq i32 %v0_10df0, 0
  br i1 %v2_10e1c6, label %dec_label_pc_10e24, label %dec_label_pc_10e04

dec_label_pc_10dfc:                               ; preds = %dec_label_pc_10e04, %dec_label_pc_10df0
  ret i32 0

dec_label_pc_10e04:                               ; preds = %dec_label_pc_10e14, %dec_label_pc_10e1c.preheader
  %v0_10e1c.in = phi i32 [ %v0_10e1c, %dec_label_pc_10e14 ], [ %v0_10df0, %dec_label_pc_10e1c.preheader ]
  %v0_10e18 = phi i32 [ %v1_10e18, %dec_label_pc_10e14 ], [ %arg2, %dec_label_pc_10e1c.preheader ]
  %v0_10e14 = phi i32 [ %v1_10e14, %dec_label_pc_10e14 ], [ %tmp, %dec_label_pc_10e1c.preheader ]
  %v0_10e1c = add i32 %v0_10e1c.in, -1
  %v1_10e04 = inttoptr i32 %v0_10e14 to i8*
  %v2_10e04 = load i8, i8* %v1_10e04, align 1
  %v3_10e04 = zext i8 %v2_10e04 to i32
  store i32 %v3_10e04, i32* @r2, align 4
  %v1_10e08 = inttoptr i32 %v0_10e18 to i8*
  %v2_10e08 = load i8, i8* %v1_10e08, align 1
  %v9_10e0c = icmp eq i8 %v2_10e04, %v2_10e08
  br i1 %v9_10e0c, label %dec_label_pc_10e14, label %dec_label_pc_10dfc

dec_label_pc_10e14:                               ; preds = %dec_label_pc_10e04
  %v1_10e14 = add i32 %v0_10e14, 1
  %v1_10e18 = add i32 %v0_10e18, 1
  %v2_10e1c = icmp eq i32 %v0_10e1c, 0
  br i1 %v2_10e1c, label %dec_label_pc_10e24, label %dec_label_pc_10e04

dec_label_pc_10e24:                               ; preds = %dec_label_pc_10e14, %dec_label_pc_10e1c.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10de0, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10da8, { 1, 0 }
}

define i32 @function_10e2c(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10e2c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10e2c = load i32, i32* @r4, align 4
  store i32 %v3_10e2c, i32* %stack_var_-28, align 4
  %v22_10e2c = ptrtoint i32* %stack_var_-28 to i32
  %v0_10e30 = load i32, i32* @r2, align 4
  store i32 %v0_10e30, i32* %r8.global-to-local, align 4
  %v2_10e30 = icmp eq i32 %v0_10e30, 0
  store i1 %v2_10e30, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_10e30, label %dec_label_pc_10f20, label %dec_label_pc_10e40

dec_label_pc_10e40:                               ; preds = %dec_label_pc_10e2c
  %v3_10e40 = icmp eq i8 %arg1, 0
  store i1 %v3_10e40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10e40, label %.thread, label %dec_label_pc_10e54

.thread:                                          ; preds = %dec_label_pc_10e40
  %v4_10e48 = inttoptr i32 %v0_10e30 to i8*
  store i8 48, i8* %v4_10e48, align 1
  %v0_10e4c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10e4c.pr.pr, label %.thread1, label %dec_label_pc_10e54

.thread1:                                         ; preds = %.thread
  %v4_10e4c = load i32, i32* %r8.global-to-local, align 4
  %v5_10e4c = add i32 %v4_10e4c, 1
  %v6_10e4c = inttoptr i32 %v5_10e4c to i8*
  store i8 0, i8* %v6_10e4c, align 1
  %v0_10e50.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10e50.pr.pr, label %dec_label_pc_10f20, label %dec_label_pc_10e54

dec_label_pc_10e54:                               ; preds = %dec_label_pc_10e40, %.thread, %.thread1
  %v7_10e58 = icmp eq i32 %arg2, 10
  store i1 %v7_10e58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e58, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_10e54
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_10e54
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_10e7c

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e8c

dec_label_pc_10e7c:                               ; preds = %bb
  %v2_10e7c = sub nsw i32 0, %tmp
  store i32 %v2_10e7c, i32* %r4.global-to-local, align 4
  store i1 %v3_10e40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10e40, label %dec_label_pc_10f2c, label %dec_label_pc_10e8c

dec_label_pc_10e8c:                               ; preds = %dec_label_pc_10e7c, %.thread4
  %v0_10e9410 = phi i32 [ %tmp, %.thread4 ], [ %v2_10e7c, %dec_label_pc_10e7c ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_10e7c ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_10e90 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_10e90, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10e94

dec_label_pc_10e94:                               ; preds = %bb37, %dec_label_pc_10e8c
  %v0_10e94 = phi i32 [ %v0_10eb8, %bb37 ], [ %v0_10e9410, %dec_label_pc_10e8c ]
  store i32 %v0_10e94, i32* %r0.global-to-local, align 4
  %v0_10e98 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10e98, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_10e94, 16777216
  %v1_10e9c = sdiv i32 %sext, 16777216
  %v3_10e9c = call i32 @function_11054(i32 %v1_10e9c, i32 %v0_10e98)
  store i32 %v3_10e9c, i32* %r0.global-to-local, align 4
  %v7_10ea0 = icmp eq i32 %v3_10e9c, 9
  store i1 %v7_10ea0, i1* %cpsr_z.global-to-local, align 1
  %v1_10ea4 = add i32 %v3_10e9c, 48
  %v0_10ea8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10ea8, i32* @r1, align 4
  %v7_10eac = icmp sgt i32 %v3_10e9c, 9
  %extract.t = trunc i32 %v1_10ea4 to i8
  br i1 %v7_10eac, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_10e94
  %v9_10eac = add i32 %v3_10e9c, 55
  %extract.t20 = trunc i32 %v9_10eac to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_10e94, %bb36
  %v0_10eb4.off0 = phi i8 [ %extract.t, %dec_label_pc_10e94 ], [ %extract.t20, %bb36 ]
  %v0_10eb0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10eb0, i32* @r0, align 4
  %v2_10eb4 = load i32, i32* %r7.global-to-local, align 4
  %v3_10eb4 = inttoptr i32 %v2_10eb4 to i8*
  store i8 %v0_10eb4.off0, i8* %v3_10eb4, align 1
  %v4_10eb4 = load i32, i32* %r7.global-to-local, align 4
  %v5_10eb4 = add i32 %v4_10eb4, -1
  store i32 %v5_10eb4, i32* %r7.global-to-local, align 4
  %v0_10eb8 = call i32 @function_10f44()
  store i32 %v0_10eb8, i32* %r0.global-to-local, align 4
  store i32 %v0_10eb8, i32* %r4.global-to-local, align 4
  %v2_10ebc = icmp eq i32 %v0_10eb8, 0
  store i1 %v2_10ebc, i1* %cpsr_z.global-to-local, align 1
  %v0_10ec0 = load i32, i32* %r6.global-to-local, align 4
  %v1_10ec0 = add i32 %v0_10ec0, -1
  store i32 %v1_10ec0, i32* %r6.global-to-local, align 4
  br i1 %v2_10ebc, label %dec_label_pc_10ec8, label %dec_label_pc_10e94

dec_label_pc_10ec8:                               ; preds = %bb37
  %v0_10ec8 = load i32, i32* %sl.global-to-local, align 4
  %v2_10ec8 = icmp eq i32 %v0_10ec8, 0
  store i1 %v2_10ec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ec8, label %bb38, label %dec_label_pc_10f30

bb38:                                             ; preds = %dec_label_pc_10ec8
  store i32 %v0_10ec0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10ed4

dec_label_pc_10ed4:                               ; preds = %bb38, %dec_label_pc_10f30
  %v1_10ee0 = phi i32 [ %v0_10ec0, %bb38 ], [ %v1_10ed8.pre, %dec_label_pc_10f30 ]
  %v2_10ed4 = ptrtoint i32* %stack_var_-62 to i32
  %v2_10ed8 = add i32 %v1_10ee0, %v2_10ed4
  %v3_10ed8 = inttoptr i32 %v2_10ed8 to i8*
  %v4_10ed8 = load i8, i8* %v3_10ed8, align 1
  %v6_10ed8 = zext i8 %v4_10ed8 to i32
  %v2_10edc = icmp eq i8 %v4_10ed8, 0
  store i1 %v2_10edc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10ed8, i32* %r1.global-to-local, align 4
  br i1 %v2_10edc, label %dec_label_pc_10f04, label %dec_label_pc_10ee8

dec_label_pc_10ee8:                               ; preds = %dec_label_pc_10ed4
  br label %dec_label_pc_10eec

dec_label_pc_10eec:                               ; preds = %dec_label_pc_10eec, %dec_label_pc_10ee8
  %v0_10eec = phi i32 [ %v1_10eec, %dec_label_pc_10eec ], [ 0, %dec_label_pc_10ee8 ]
  %v1_10eec = add i32 %v0_10eec, 1
  store i32 %v1_10eec, i32* @r2, align 4
  %v2_10ef0 = add i32 %v1_10eec, %v2_10ed8
  %v3_10ef0 = inttoptr i32 %v2_10ef0 to i8*
  %v4_10ef0 = load i8, i8* %v3_10ef0, align 1
  %v2_10ef4 = icmp eq i8 %v4_10ef0, 0
  store i1 %v2_10ef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ef4, label %dec_label_pc_10efc, label %dec_label_pc_10eec

dec_label_pc_10efc:                               ; preds = %dec_label_pc_10eec
  %v7_10efc = icmp eq i32 %v0_10eec, -2
  store i1 %v7_10efc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10efc, label %dec_label_pc_10f20, label %dec_label_pc_10f04

dec_label_pc_10f04:                               ; preds = %dec_label_pc_10efc, %dec_label_pc_10ed4
  %v0_10f0c17 = phi i32 [ %v1_10eec, %dec_label_pc_10efc ], [ %v6_10ed8, %dec_label_pc_10ed4 ]
  store i32 %v2_10ed8, i32* %r0.global-to-local, align 4
  %v0_10f08 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10f08, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10f0c

dec_label_pc_10f0c:                               ; preds = %dec_label_pc_10f0c.dec_label_pc_10f0c_crit_edge, %dec_label_pc_10f04
  %v2_10f18 = phi i32 [ %v5_10f18, %dec_label_pc_10f0c.dec_label_pc_10f0c_crit_edge ], [ %v0_10f08, %dec_label_pc_10f04 ]
  %v0_10f10 = phi i32 [ %v0_10f10.pre, %dec_label_pc_10f0c.dec_label_pc_10f0c_crit_edge ], [ %v2_10ed8, %dec_label_pc_10f04 ]
  %v0_10f0c = phi i32 [ %v0_10f0c.pre, %dec_label_pc_10f0c.dec_label_pc_10f0c_crit_edge ], [ %v0_10f0c17, %dec_label_pc_10f04 ]
  %v1_10f0c = add i32 %v0_10f0c, -1
  store i32 %v1_10f0c, i32* @r2, align 4
  %v1_10f10 = inttoptr i32 %v0_10f10 to i8*
  %v2_10f10 = load i8, i8* %v1_10f10, align 1
  %v5_10f10 = add i32 %v0_10f10, 1
  store i32 %v5_10f10, i32* %r0.global-to-local, align 4
  %v3_10f14 = icmp eq i32 %v0_10f0c, 0
  store i1 %v3_10f14, i1* %cpsr_z.global-to-local, align 1
  %v3_10f18 = inttoptr i32 %v2_10f18 to i8*
  store i8 %v2_10f10, i8* %v3_10f18, align 1
  %v4_10f18 = load i32, i32* %r1.global-to-local, align 4
  %v5_10f18 = add i32 %v4_10f18, 1
  store i32 %v5_10f18, i32* %r1.global-to-local, align 4
  br i1 %v3_10f14, label %dec_label_pc_10f20, label %dec_label_pc_10f0c.dec_label_pc_10f0c_crit_edge

dec_label_pc_10f0c.dec_label_pc_10f0c_crit_edge:  ; preds = %dec_label_pc_10f0c
  %v0_10f0c.pre = load i32, i32* @r2, align 4
  %v0_10f10.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10f0c

dec_label_pc_10f20:                               ; preds = %dec_label_pc_10f0c, %dec_label_pc_10efc, %.thread1, %dec_label_pc_10e2c
  %v0_10f20 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10f20, i32* %r0.global-to-local, align 4
  %v2_10f28 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10f28, i32* @r4, align 4
  ret i32 %v0_10f20

dec_label_pc_10f2c:                               ; preds = %dec_label_pc_10e7c
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10f30

dec_label_pc_10f30:                               ; preds = %dec_label_pc_10ec8, %dec_label_pc_10f2c
  %v1_10f34 = phi i32 [ %v1_10ec0, %dec_label_pc_10ec8 ], [ 32, %dec_label_pc_10f2c ]
  %v2_10f34 = add i32 %v1_10f34, %v22_10e2c
  %v3_10f3c = add i32 %v2_10f34, -34
  %v4_10f3c = inttoptr i32 %v3_10f3c to i8*
  store i8 45, i8* %v4_10f3c, align 1
  %v1_10ed8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10ed4

; uselistorder directives
  uselistorder i32 %v5_10f18, { 1, 0 }
  uselistorder i1 %v3_10f14, { 1, 0 }
  uselistorder i32 %v0_10f10, { 1, 0 }
  uselistorder i1 %v7_10efc, { 1, 0 }
  uselistorder i32 %v1_10eec, { 0, 1, 3, 2 }
  uselistorder i32 %v2_10ed8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10eb8, { 1, 2, 3, 0 }
  uselistorder i32 %v3_10e9c, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_10e40, { 1, 0, 2, 3 }
  uselistorder i32 %v0_10e30, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 11, 10, 12, 13 }
  uselistorder label %dec_label_pc_10f30, { 1, 0 }
  uselistorder label %dec_label_pc_10ed4, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_10e54, { 2, 1, 0 }
}

define i32 @function_10f44() local_unnamed_addr {
dec_label_pc_10f44:
  %v0_10f44 = load i32, i32* @r1, align 4
  %v1_10f44 = add i32 %v0_10f44, -1
  %v7_10f44 = icmp eq i32 %v0_10f44, 1
  br i1 %v7_10f44, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_10f44
  %v2_10f48 = load i32, i32* @r0, align 4
  ret i32 %v2_10f48

bb82:                                             ; preds = %dec_label_pc_10f44
  %v2_10f44 = icmp eq i32 %v0_10f44, 0
  br i1 %v2_10f44, label %dec_label_pc_1102c, label %dec_label_pc_10f50

dec_label_pc_10f50:                               ; preds = %bb82
  %v0_10f50 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_10f50, %v0_10f44
  br i1 %tmp, label %dec_label_pc_10f58, label %dec_label_pc_10fe4

dec_label_pc_10f58:                               ; preds = %dec_label_pc_10f50
  %v2_10f58 = and i32 %v1_10f44, %v0_10f44
  %v4_10f58 = icmp eq i32 %v2_10f58, 0
  br i1 %v4_10f58, label %dec_label_pc_10ff0, label %dec_label_pc_10f60

dec_label_pc_10f60:                               ; preds = %dec_label_pc_10f58
  %v3_10f60 = icmp ult i32 %v0_10f44, 536870912
  br i1 %v3_10f60, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10f60
  %v4_10f64 = mul i32 %v0_10f44, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10f60, %.thread
  %v0_10f84.pr36.ph = phi i32 [ %v4_10f64, %.thread ], [ %v0_10f44, %dec_label_pc_10f60 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10f60 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_10f84.pr36 = phi i32 [ %v4_10f78, %bb85 ], [ %v0_10f84.pr36.ph, %.preheader.preheader ]
  %v1_10f7c = phi i32 [ %v4_10f7c, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_10f70 = icmp ugt i32 %v0_10f84.pr36, 268435455
  br i1 %v2_10f70, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10f84thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_10f74 = icmp ult i32 %v0_10f84.pr36, %v0_10f50
  br i1 %v4_10f74, label %bb84, label %dec_label_pc_10f84thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_10f78 = and i32 %v0_10f84.pr36, 268435456
  %v3_10f78 = icmp eq i32 %v2_10f78, 0
  %v4_10f78 = mul i32 %v0_10f84.pr36, 16
  br i1 %v3_10f78, label %bb85, label %dec_label_pc_10f84.loopexit

bb85:                                             ; preds = %bb84
  %v2_10f7c = and i32 %v1_10f7c, 268435456
  %v3_10f7c = icmp eq i32 %v2_10f7c, 0
  %v4_10f7c = mul i32 %v1_10f7c, 16
  br i1 %v3_10f7c, label %.preheader, label %dec_label_pc_10f84thread-pre-split.loopexit.loopexit

dec_label_pc_10f84thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_10f9048.ph = phi i32 [ %v1_10f7c, %bb83 ], [ %v4_10f7c, %bb85 ]
  %v0_10f84.pr38.ph = phi i32 [ %v0_10f84.pr36, %bb83 ], [ %v4_10f78, %bb85 ]
  br label %dec_label_pc_10f84thread-pre-split.loopexit

dec_label_pc_10f84thread-pre-split.loopexit:      ; preds = %dec_label_pc_10f84thread-pre-split.loopexit.loopexit, %.thread2
  %v1_10f9048 = phi i32 [ %v1_10f7c, %.thread2 ], [ %v1_10f9048.ph, %dec_label_pc_10f84thread-pre-split.loopexit.loopexit ]
  %v0_10f84.pr38 = phi i32 [ %v0_10f84.pr36, %.thread2 ], [ %v0_10f84.pr38.ph, %dec_label_pc_10f84thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10f84thread-pre-split

dec_label_pc_10f84thread-pre-split:               ; preds = %dec_label_pc_10f84thread-pre-split.loopexit, %bb87
  %v1_10f9046 = phi i32 [ %v1_10f9048, %dec_label_pc_10f84thread-pre-split.loopexit ], [ %v3_10f90, %bb87 ]
  %v0_10f84.pr = phi i32 [ %v0_10f84.pr38, %dec_label_pc_10f84thread-pre-split.loopexit ], [ %v3_10f8c, %bb87 ]
  br label %dec_label_pc_10f84

dec_label_pc_10f84.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_10f84

dec_label_pc_10f84:                               ; preds = %dec_label_pc_10f84.loopexit, %dec_label_pc_10f84thread-pre-split
  %v1_10f90 = phi i32 [ %v1_10f9046, %dec_label_pc_10f84thread-pre-split ], [ %v1_10f7c, %dec_label_pc_10f84.loopexit ]
  %v1_10f8c = phi i32 [ %v0_10f84.pr, %dec_label_pc_10f84thread-pre-split ], [ %v4_10f78, %dec_label_pc_10f84.loopexit ]
  %v2_10f84 = icmp slt i32 %v1_10f8c, 0
  br i1 %v2_10f84, label %dec_label_pc_10f98, label %bb86

bb86:                                             ; preds = %dec_label_pc_10f84
  %v4_10f88 = icmp ult i32 %v1_10f8c, %v0_10f50
  br i1 %v4_10f88, label %bb87, label %dec_label_pc_10f98

bb87:                                             ; preds = %bb86
  %v3_10f8c = mul i32 %v1_10f8c, 2
  %v2_10f90 = icmp slt i32 %v1_10f90, 0
  %v3_10f90 = mul i32 %v1_10f90, 2
  br i1 %v2_10f90, label %dec_label_pc_10f98, label %dec_label_pc_10f84thread-pre-split

dec_label_pc_10f98:                               ; preds = %bb86, %dec_label_pc_10f84, %bb87
  %v2_10fa459 = phi i32 [ %v3_10f90, %bb87 ], [ %v1_10f90, %bb86 ], [ %v1_10f90, %dec_label_pc_10f84 ]
  %v1_10f9c51 = phi i32 [ %v3_10f8c, %bb87 ], [ %v1_10f8c, %bb86 ], [ %v1_10f8c, %dec_label_pc_10f84 ]
  br label %dec_label_pc_10f9c

dec_label_pc_10f9c:                               ; preds = %.thread11, %dec_label_pc_10f98
  %v1_10fd0 = phi i32 [ %v4_10fd0, %.thread11 ], [ %v2_10fa459, %dec_label_pc_10f98 ]
  %v1_10fa4 = phi i32 [ %v0_10fdc, %.thread11 ], [ 0, %dec_label_pc_10f98 ]
  %v1_10fd4 = phi i32 [ %v4_10fd4, %.thread11 ], [ %v1_10f9c51, %dec_label_pc_10f98 ]
  %v1_10fa0 = phi i32 [ %v0_10fcc, %.thread11 ], [ %v0_10f50, %dec_label_pc_10f98 ]
  %v3_10f9c = icmp ult i32 %v1_10fa0, %v1_10fd4
  br i1 %v3_10f9c, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_10f9c
  %v3_10fa0 = sub i32 %v1_10fa0, %v1_10fd4
  %v3_10fa4 = or i32 %v1_10fa4, %v1_10fd0
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10f9c, %bb88
  %v1_10fac = phi i32 [ %v1_10fa0, %dec_label_pc_10f9c ], [ %v3_10fa0, %bb88 ]
  %v1_10fb0 = phi i32 [ %v1_10fa4, %dec_label_pc_10f9c ], [ %v3_10fa4, %bb88 ]
  %v4_10fa8 = udiv i32 %v1_10fd4, 2
  %v6_10fa8 = icmp ult i32 %v1_10fac, %v4_10fa8
  br i1 %v6_10fa8, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_10fac = urem i32 %v1_10fd4, 2
  %v4_10fac = icmp eq i32 %v3_10fac, 0
  %v6_10fac = sub i32 %v1_10fac, %v4_10fa8
  br i1 %v4_10fac, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10fb0 = udiv i32 %v1_10fd0, 2
  %v6_10fb0 = or i32 %v1_10fb0, %v5_10fb0
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_10fb8 = phi i32 [ %v6_10fac, %bb89 ], [ %v1_10fac, %.thread7 ], [ %v6_10fac, %bb90 ]
  %v1_10fbc = phi i32 [ %v1_10fb0, %bb89 ], [ %v1_10fb0, %.thread7 ], [ %v6_10fb0, %bb90 ]
  %v4_10fb4 = udiv i32 %v1_10fd4, 4
  %v6_10fb4 = icmp ult i32 %v1_10fb8, %v4_10fb4
  br i1 %v6_10fb4, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_10fb8 = and i32 %v1_10fd4, 2
  %v4_10fb8 = icmp eq i32 %v3_10fb8, 0
  %v6_10fb8 = sub i32 %v1_10fb8, %v4_10fb4
  br i1 %v4_10fb8, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_10fbc = udiv i32 %v1_10fd0, 4
  %v6_10fbc = or i32 %v1_10fbc, %v5_10fbc
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_10fc4 = phi i32 [ %v6_10fb8, %bb91 ], [ %v1_10fb8, %.thread8 ], [ %v6_10fb8, %bb92 ]
  %v1_10fc8 = phi i32 [ %v1_10fbc, %bb91 ], [ %v1_10fbc, %.thread8 ], [ %v6_10fbc, %bb92 ]
  %v4_10fc0 = udiv i32 %v1_10fd4, 8
  %v6_10fc0 = icmp ult i32 %v1_10fc4, %v4_10fc0
  br i1 %v6_10fc0, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_10fc4 = and i32 %v1_10fd4, 4
  %v4_10fc4 = icmp eq i32 %v3_10fc4, 0
  %v6_10fc4 = sub i32 %v1_10fc4, %v4_10fc0
  br i1 %v4_10fc4, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_10fc8 = udiv i32 %v1_10fd0, 8
  %v6_10fc8 = or i32 %v1_10fc8, %v5_10fc8
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_10fdc = phi i32 [ %v1_10fc8, %bb93 ], [ %v1_10fc8, %.thread9 ], [ %v6_10fc8, %bb94 ]
  %v0_10fcc = phi i32 [ %v6_10fc4, %bb93 ], [ %v1_10fc4, %.thread9 ], [ %v6_10fc4, %bb94 ]
  %v2_10fcc = icmp eq i32 %v0_10fcc, 0
  br i1 %v2_10fcc, label %dec_label_pc_10fdc, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_10fd0, 16
  br i1 %tmp142, label %dec_label_pc_10fdc, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_10fd0 = udiv i32 %v1_10fd0, 16
  %v4_10fd4 = udiv i32 %v1_10fd4, 16
  br label %dec_label_pc_10f9c

dec_label_pc_10fdc:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_10fdc

dec_label_pc_10fe4:                               ; preds = %dec_label_pc_10f50
  %v9_10f50 = icmp eq i32 %v0_10f50, %v0_10f44
  %. = zext i1 %v9_10f50 to i32
  ret i32 %.

dec_label_pc_10ff0:                               ; preds = %dec_label_pc_10f58
  %v2_10ff0 = icmp ugt i32 %v0_10f44, 65535
  br i1 %v2_10ff0, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_10ff0
  %v2_10ff4 = and i32 %v0_10f44, 32768
  %v3_10ff4 = icmp eq i32 %v2_10ff4, 0
  %v4_10ff4 = udiv i32 %v0_10f44, 65536
  br i1 %v3_10ff4, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_10ff0
  %v0_1100065 = phi i32 [ %v0_10f44, %dec_label_pc_10ff0 ], [ %v4_10ff4, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_11004 = phi i32 [ %v0_1100065, %.thread16 ], [ %v4_10ff4, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_11000 = icmp ugt i32 %v1_11004, 255
  br i1 %v2_11000, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_11004 = and i32 %v1_11004, 128
  %v3_11004 = icmp eq i32 %v2_11004, 0
  %v4_11004 = udiv i32 %v1_11004, 256
  br i1 %v3_11004, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_11008 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_11014 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_11008, %bb102 ]
  %v1_11010 = phi i32 [ %v1_11004, %bb100 ], [ %v4_11004, %bb101 ], [ %v4_11004, %bb102 ]
  %v2_1100c = icmp ugt i32 %v1_11010, 15
  br i1 %v2_1100c, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_11010 = and i32 %v1_11010, 8
  %v3_11010 = icmp eq i32 %v2_11010, 0
  %v4_11010 = udiv i32 %v1_11010, 16
  br i1 %v3_11010, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_11014 = add nsw i32 %v1_11014, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_1101c = phi i32 [ %v1_11014, %.thread17 ], [ %v1_11014, %bb103 ], [ %v2_11014, %bb104 ]
  %v5_11020 = phi i32 [ %v1_11010, %.thread17 ], [ %v4_11010, %bb103 ], [ %v4_11010, %bb104 ]
  %v2_11018 = icmp ugt i32 %v5_11020, 3
  %v7_11018 = icmp eq i32 %v5_11020, 4
  %v2_1101c = xor i1 %v7_11018, true
  %v3_1101c = and i1 %v2_11018, %v2_1101c
  br i1 %v3_1101c, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_1101c = add nsw i32 %v4_1101c, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_11020 = phi i32 [ %v4_1101c, %.thread18 ], [ %v5_1101c, %bb105 ]
  %v2_11020 = xor i1 %v2_11018, true
  %v3_11020 = or i1 %v7_11018, %v2_11020
  br i1 %v3_11020, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_11020 = udiv i32 %v5_11020, 2
  %v9_11020 = add i32 %v4_11020, %v8_11020
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_11024 = phi i32 [ %v4_11020, %bb106 ], [ %v9_11020, %bb107 ]
  %v6_11024 = lshr i32 %v0_10f50, %v1_11024
  ret i32 %v6_11024

dec_label_pc_1102c:                               ; preds = %bb82
  %v0_1102c = load i32, i32* @lr, align 4
  %v0_11030 = call i32 @function_11204()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_1102c)
  %v9_1103c = load i32, i32* @lr, align 4
  %v0_11040 = call i32 @function_10f44()
  store i32 %v9_1103c, i32* @lr, align 4
  ret i32 %v0_11040

; uselistorder directives
  uselistorder i32 %v4_11020, { 1, 0 }
  uselistorder i1 %v7_11018, { 1, 0 }
  uselistorder i32 %v4_11010, { 1, 0 }
  uselistorder i32 %v1_11010, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11004, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_11004, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10ff4, { 1, 0 }
  uselistorder i32 %v0_10fcc, { 1, 0 }
  uselistorder i32 %v4_10fc0, { 1, 0 }
  uselistorder i32 %v1_10fc8, { 1, 2, 0 }
  uselistorder i32 %v4_10fb4, { 1, 0 }
  uselistorder i32 %v1_10fbc, { 1, 2, 0 }
  uselistorder i32 %v4_10fa8, { 1, 0 }
  uselistorder i32 %v1_10fb0, { 1, 2, 0 }
  uselistorder i32 %v1_10fd4, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10fa4, { 1, 0 }
  uselistorder i32 %v1_10fd0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10f90, { 1, 0 }
  uselistorder i32 %v3_10f8c, { 1, 0 }
  uselistorder i32 %v1_10f8c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10f90, { 1, 2, 0, 3 }
  uselistorder i32 %v4_10f7c, { 1, 0 }
  uselistorder i32 %v4_10f78, { 2, 1, 0 }
  uselistorder i32 %v1_10f7c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10f84.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_10f50, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10f44, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 100, 0, 1, 53, 12, 54, 24, 28, 55, 25, 56, 26, 57, 27, 58, 59, 13, 60, 2, 61, 62, 32, 63, 31, 64, 29, 65, 30, 66, 14, 15, 3, 67, 33, 68, 34, 69, 16, 17, 4, 70, 35, 71, 36, 72, 18, 73, 39, 74, 38, 75, 37, 76, 19, 20, 5, 41, 77, 40, 78, 79, 80, 21, 81, 82, 6, 44, 83, 42, 84, 43, 85, 86, 22, 87, 7, 8, 47, 88, 45, 89, 46, 90, 91, 23, 92, 9, 48, 93, 49, 94, 50, 95, 96, 10, 51, 97, 98, 11, 52, 99 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_10fdc, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10f98, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10f84thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_11054(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11054:
  store i32 %arg1, i32* @r0, align 4
  %v1_11054 = add i32 %arg2, -1
  %v2_11054 = icmp eq i32 %arg2, 0
  br i1 %v2_11054, label %dec_label_pc_11110, label %dec_label_pc_1105c

dec_label_pc_1105c:                               ; preds = %dec_label_pc_11054
  %v7_11054 = icmp eq i32 %arg2, 1
  br i1 %v7_11054, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_1105c
  %v1_1105c = load i32, i32* @r0, align 4
  %v10_1105c = icmp eq i32 %v1_1105c, %arg2
  br i1 %v10_1105c, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_1105c, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_1105c = icmp ult i32 %v1_1105c, %arg2
  br i1 %v4_1105c, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_11064 = and i32 %v1_11054, %arg2
  %v8_11064 = icmp eq i32 %v6_11064, 0
  br i1 %v8_11064, label %.thread67, label %dec_label_pc_11074.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_11068 = phi i32 [ %v1_1105c, %bb75 ], [ 0, %.thread65 ]
  %v3_11068 = and i32 %v1_11068, %v1_11054
  br label %bb76

dec_label_pc_11074.preheader:                     ; preds = %bb75
  %v2_1107499 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1107499, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_11104, %bb74, %bb89, %bb84, %dec_label_pc_110d4, %.thread67
  %v5_1106c = phi i32 [ %v1_1105c, %bb74 ], [ %v3_11068, %.thread67 ], [ %v1_110b0.v6_110b0.v6_110b8.v6_110c0, %dec_label_pc_110d4 ], [ 0, %bb84 ], [ %v1_11108, %dec_label_pc_11104 ], [ %v2_11104, %bb89 ]
  ret i32 %v5_1106c

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_11074.preheader
  %v0_11088.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_11074.preheader ], [ %v4_1107c, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11074.preheader ], [ %v2_1108011, %.thread1.thread9 ]
  br label %dec_label_pc_11088thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_11074.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1108011, %.thread1.thread9 ], [ 0, %dec_label_pc_11074.preheader ]
  %v0_11088.pr33100 = phi i32 [ %v4_1107c, %.thread1.thread9 ], [ %arg2, %dec_label_pc_11074.preheader ]
  %v4_11078 = icmp ult i32 %v0_11088.pr33100, %v1_1105c
  br i1 %v4_11078, label %bb78, label %dec_label_pc_11088thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_1107c = and i32 %v0_11088.pr33100, 268435456
  %v3_1107c = icmp eq i32 %v2_1107c, 0
  %v4_1107c = mul i32 %v0_11088.pr33100, 16
  br i1 %v3_1107c, label %.thread1.thread9, label %dec_label_pc_11088.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1108011 = add i32 %storemerge101, 4
  %v2_11074 = icmp ugt i32 %v4_1107c, 268435455
  br i1 %v2_11074, label %.thread, label %bb77

dec_label_pc_11088thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_11088thread-pre-split.loopexit

dec_label_pc_11088thread-pre-split.loopexit:      ; preds = %dec_label_pc_11088thread-pre-split.loopexit.loopexit, %.thread
  %v0_11088.pr3398 = phi i32 [ %v0_11088.pr33.lcssa, %.thread ], [ %v0_11088.pr33100, %dec_label_pc_11088thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_11088thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11088thread-pre-split

dec_label_pc_11088thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11088thread-pre-split.loopexit
  %v1_1109439 = phi i32 [ %storemerge95, %dec_label_pc_11088thread-pre-split.loopexit ], [ %v2_11094, %.thread4 ]
  %v0_11088.pr = phi i32 [ %v0_11088.pr3398, %dec_label_pc_11088thread-pre-split.loopexit ], [ %v3_11090, %.thread4 ]
  br label %dec_label_pc_11088

dec_label_pc_11088.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_11088

dec_label_pc_11088:                               ; preds = %dec_label_pc_11088.loopexit, %dec_label_pc_11088thread-pre-split
  %v0_1109c.pr = phi i32 [ %v1_1109439, %dec_label_pc_11088thread-pre-split ], [ %storemerge101, %dec_label_pc_11088.loopexit ]
  %v1_11090 = phi i32 [ %v0_11088.pr, %dec_label_pc_11088thread-pre-split ], [ %v4_1107c, %dec_label_pc_11088.loopexit ]
  %v2_11088 = icmp slt i32 %v1_11090, 0
  br i1 %v2_11088, label %dec_label_pc_1109c, label %bb79

bb79:                                             ; preds = %dec_label_pc_11088
  %v4_1108c = icmp ult i32 %v1_11090, %v1_1105c
  br i1 %v4_1108c, label %.thread4, label %dec_label_pc_1109c

.thread4:                                         ; preds = %bb79
  %v3_11090 = mul i32 %v1_11090, 2
  %v2_11094 = add i32 %v0_1109c.pr, 1
  br label %dec_label_pc_11088thread-pre-split

dec_label_pc_1109c:                               ; preds = %bb79, %dec_label_pc_11088
  %v2_1109c = add i32 %v0_1109c.pr, -3
  %v5_110a0 = icmp slt i32 %v0_1109c.pr, 3
  br i1 %v5_110a0, label %dec_label_pc_110e0, label %dec_label_pc_110a4

dec_label_pc_110a4:                               ; preds = %dec_label_pc_1109c, %bb83
  %v6_110cc = phi i32 [ %v0_110d4, %bb83 ], [ %v2_1109c, %dec_label_pc_1109c ]
  %v1_110a8 = phi i32 [ %v1_110b0.v6_110b0.v6_110b8.v6_110c0, %bb83 ], [ %v1_1105c, %dec_label_pc_1109c ]
  %v3_110c812 = phi i32 [ %v3_110c8, %bb83 ], [ %v1_11090, %dec_label_pc_1109c ]
  %v3_110a4 = icmp ult i32 %v1_110a8, %v3_110c812
  %v3_110a8 = select i1 %v3_110a4, i32 0, i32 %v3_110c812
  %v1_110b0 = sub i32 %v1_110a8, %v3_110a8
  %v4_110ac = udiv i32 %v3_110c812, 2
  %v6_110ac = icmp ult i32 %v1_110b0, %v4_110ac
  %v6_110b0 = select i1 %v6_110ac, i32 0, i32 %v4_110ac
  %v1_110b0.v6_110b0 = sub i32 %v1_110b0, %v6_110b0
  %.demorgan = and i1 %v3_110a4, %v6_110ac
  %v4_110b4 = udiv i32 %v3_110c812, 4
  %v6_110b4 = icmp ult i32 %v1_110b0.v6_110b0, %v4_110b4
  %v6_110b8 = select i1 %v6_110b4, i32 0, i32 %v4_110b4
  %v1_110b0.v6_110b0.v6_110b8 = sub i32 %v1_110b0.v6_110b0, %v6_110b8
  %.demorgan71 = and i1 %.demorgan, %v6_110b4
  %v4_110bc = udiv i32 %v3_110c812, 8
  %v6_110bc = icmp ult i32 %v1_110b0.v6_110b0.v6_110b8, %v4_110bc
  %v6_110c0 = select i1 %v6_110bc, i32 0, i32 %v4_110bc
  %v1_110b0.v6_110b0.v6_110b8.v6_110c0 = sub i32 %v1_110b0.v6_110b0.v6_110b8, %v6_110c0
  %.demorgan72 = and i1 %.demorgan71, %v6_110bc
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_110a4
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_110a4, %bb80
  %v2_110c4 = add i32 %v1_110b0.v6_110b0.v6_110b8.v6_110c0, -1
  %v4_110c4 = sub i32 0, %v1_110b0.v6_110b0.v6_110b8.v6_110c0
  %v5_110c4 = and i32 %v1_110b0.v6_110b0.v6_110b8.v6_110c0, %v4_110c4
  %v3_110c8 = udiv i32 %v3_110c812, 16
  %v5_110cc = icmp slt i32 %v1_110b0.v6_110b0.v6_110b8.v6_110c0, 1
  br i1 %v5_110cc, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_110cc = add i32 %v6_110cc, -4
  %v9_110cc = sub i32 3, %v6_110cc
  %v10_110cc = and i32 %v9_110cc, %v6_110cc
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_110d4 = phi i32 [ %v6_110cc, %bb81 ], [ %v7_110cc, %bb82 ]
  %v0_110d015.in = phi i32 [ %v2_110c4, %bb81 ], [ %v7_110cc, %bb82 ]
  %v1_110d014.in = phi i32 [ %v5_110c4, %bb81 ], [ %v10_110cc, %bb82 ]
  %v1_110d014 = icmp slt i32 %v1_110d014.in, 0
  %v0_110d015 = icmp slt i32 %v0_110d015.in, 0
  %v2_110d0 = xor i1 %v0_110d015, %v1_110d014
  br i1 %v2_110d0, label %dec_label_pc_110d4, label %dec_label_pc_110a4

dec_label_pc_110d4:                               ; preds = %bb83
  %v1_110d4 = urem i32 %v0_110d4, 4
  %v2_110d4 = icmp eq i32 %v1_110d4, 0
  br i1 %v2_110d4, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_110d4
  %v3_110d8 = icmp eq i32 %v1_110b0.v6_110b0.v6_110b8.v6_110c0, 0
  br i1 %v3_110d8, label %bb76, label %dec_label_pc_110e0

dec_label_pc_110e0:                               ; preds = %bb84, %dec_label_pc_1109c
  %v0_110f4 = phi i32 [ %v3_110c8, %bb84 ], [ %v1_11090, %dec_label_pc_1109c ]
  %v1_110f0 = phi i32 [ %v1_110b0.v6_110b0.v6_110b8.v6_110c0, %bb84 ], [ %v1_1105c, %dec_label_pc_1109c ]
  %v0_110e0 = phi i32 [ %v0_110d4, %bb84 ], [ %v2_1109c, %dec_label_pc_1109c ]
  %v5_110e4 = icmp slt i32 %v0_110e0, -2
  br i1 %v5_110e4, label %dec_label_pc_11104, label %dec_label_pc_110e8

dec_label_pc_110e8:                               ; preds = %dec_label_pc_110e0
  %v8_110e0 = icmp eq i32 %v0_110e0, -2
  br i1 %v8_110e0, label %dec_label_pc_110f8, label %dec_label_pc_110ec

dec_label_pc_110ec:                               ; preds = %dec_label_pc_110e8
  %v3_110ec = icmp ult i32 %v1_110f0, %v0_110f4
  br i1 %v3_110ec, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_110ec
  %v2_110ec = sub i32 %v1_110f0, %v0_110f4
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_110ec, %bb85
  %v0_110f852 = phi i32 [ %v1_110f0, %dec_label_pc_110ec ], [ %v2_110ec, %bb85 ]
  %v3_110f4 = udiv i32 %v0_110f4, 2
  br label %dec_label_pc_110f8

dec_label_pc_110f8:                               ; preds = %dec_label_pc_110e8, %bb86
  %v0_11100 = phi i32 [ %v0_110f4, %dec_label_pc_110e8 ], [ %v3_110f4, %bb86 ]
  %v1_110fc = phi i32 [ %v1_110f0, %dec_label_pc_110e8 ], [ %v0_110f852, %bb86 ]
  %v3_110f8 = icmp ult i32 %v1_110fc, %v0_11100
  br i1 %v3_110f8, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_110f8
  %v2_110f8 = sub i32 %v1_110fc, %v0_11100
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_110f8, %bb87
  %v0_1110455 = phi i32 [ %v1_110fc, %dec_label_pc_110f8 ], [ %v2_110f8, %bb87 ]
  %v3_11100 = udiv i32 %v0_11100, 2
  br label %dec_label_pc_11104

dec_label_pc_11104:                               ; preds = %dec_label_pc_110e0, %bb88
  %v2_11108 = phi i32 [ %v0_110f4, %dec_label_pc_110e0 ], [ %v3_11100, %bb88 ]
  %v1_11108 = phi i32 [ %v1_110f0, %dec_label_pc_110e0 ], [ %v0_1110455, %bb88 ]
  %v3_11104 = icmp ult i32 %v1_11108, %v2_11108
  br i1 %v3_11104, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_11104
  %v2_11104 = sub i32 %v1_11108, %v2_11108
  br label %bb76

dec_label_pc_11110:                               ; preds = %dec_label_pc_11054
  %v0_11110 = load i32, i32* @lr, align 4
  %v0_11114 = call i32 @function_11204()
  call void @__pseudo_branch(i32 %v0_11110)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11108, { 1, 2, 0 }
  uselistorder i32 %v0_110f4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_110d4, { 1, 0, 2 }
  uselistorder i32 %v7_110cc, { 1, 0 }
  uselistorder i32 %v3_110c8, { 1, 0 }
  uselistorder i32 %v1_110b0.v6_110b0.v6_110b8.v6_110c0, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_110bc, { 1, 0 }
  uselistorder i32 %v4_110b4, { 1, 0 }
  uselistorder i32 %v4_110ac, { 1, 0 }
  uselistorder i32 %v6_110cc, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1109c, { 1, 0 }
  uselistorder i32 %v1_11090, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_1107c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11088.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1105c, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_11104, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_110f8, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_110a4, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_11120(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11120:
  store i32 %arg1, i32* @r0, align 4
  %v2_11120 = icmp eq i32 %arg2, 0
  br i1 %v2_11120, label %dec_label_pc_111f4, label %dec_label_pc_11128

dec_label_pc_11128:                               ; preds = %dec_label_pc_11120
  %v1_11120 = icmp slt i32 %arg2, 0
  br i1 %v1_11120, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_11128
  %v2_11128 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_11128, %bb
  %v4_11140 = phi i32 [ %arg2, %dec_label_pc_11128 ], [ %v2_11128, %bb ]
  %v0_1112c = load i32, i32* @r0, align 4
  %v1_1112c = icmp slt i32 %v0_1112c, 0
  br i1 %v1_1112c, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_11130 = sub i32 0, %v0_1112c
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_11138 = phi i32 [ %v0_1112c, %bb79 ], [ %v2_11130, %bb80 ]
  %v1_11134 = add i32 %v4_11140, -1
  %v7_11134 = icmp eq i32 %v4_11140, 1
  br i1 %v7_11134, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_11138 = icmp eq i32 %v1_11138, %v4_11140
  br i1 %v10_11138, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_11138 = icmp ult i32 %v1_11138, %v4_11140
  br i1 %v4_11138, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_11140 = and i32 %v1_11134, %v4_11140
  %v8_11140 = icmp eq i32 %v6_11140, 0
  br i1 %v8_11140, label %.thread72, label %dec_label_pc_11150.preheader

dec_label_pc_11150.preheader:                     ; preds = %bb84
  %v2_11150109 = icmp ugt i32 %v4_11140, 268435455
  br i1 %v2_11150109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1114464 = phi i32 [ %v1_11138, %bb84 ], [ 0, %.thread70 ]
  %v3_11144 = and i32 %v1_1114464, %v1_11134
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_11150.preheader
  %v0_11164.pr35.lcssa = phi i32 [ %v4_11140, %dec_label_pc_11150.preheader ], [ %v4_11158, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11150.preheader ], [ %v2_1115c9, %.thread2.thread7 ]
  br label %dec_label_pc_11164thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_11150.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_1115c9, %.thread2.thread7 ], [ 0, %dec_label_pc_11150.preheader ]
  %v0_11164.pr35110 = phi i32 [ %v4_11158, %.thread2.thread7 ], [ %v4_11140, %dec_label_pc_11150.preheader ]
  %v4_11154 = icmp ult i32 %v0_11164.pr35110, %v1_11138
  br i1 %v4_11154, label %bb86, label %dec_label_pc_11164thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_11158 = and i32 %v0_11164.pr35110, 268435456
  %v3_11158 = icmp eq i32 %v2_11158, 0
  %v4_11158 = mul i32 %v0_11164.pr35110, 16
  br i1 %v3_11158, label %.thread2.thread7, label %dec_label_pc_11164.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_1115c9 = add i32 %storemerge111, 4
  %v2_11150 = icmp ugt i32 %v4_11158, 268435455
  br i1 %v2_11150, label %.thread1, label %bb85

dec_label_pc_11164thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_11164thread-pre-split.loopexit

dec_label_pc_11164thread-pre-split.loopexit:      ; preds = %dec_label_pc_11164thread-pre-split.loopexit.loopexit, %.thread1
  %v0_11164.pr35108 = phi i32 [ %v0_11164.pr35.lcssa, %.thread1 ], [ %v0_11164.pr35110, %dec_label_pc_11164thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_11164thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11164thread-pre-split

dec_label_pc_11164thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11164thread-pre-split.loopexit
  %v1_1117041 = phi i32 [ %storemerge105, %dec_label_pc_11164thread-pre-split.loopexit ], [ %v2_11170, %.thread4 ]
  %v2_1116836 = phi i32 [ %v1_11138, %dec_label_pc_11164thread-pre-split.loopexit ], [ %v2_11168, %.thread4 ]
  %v0_11164.pr = phi i32 [ %v0_11164.pr35108, %dec_label_pc_11164thread-pre-split.loopexit ], [ %v3_1116c, %.thread4 ]
  br label %dec_label_pc_11164

dec_label_pc_11164.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_11164

dec_label_pc_11164:                               ; preds = %dec_label_pc_11164.loopexit, %dec_label_pc_11164thread-pre-split
  %v0_11178.pr = phi i32 [ %v1_1117041, %dec_label_pc_11164thread-pre-split ], [ %storemerge111, %dec_label_pc_11164.loopexit ]
  %v2_11168 = phi i32 [ %v2_1116836, %dec_label_pc_11164thread-pre-split ], [ %v1_11138, %dec_label_pc_11164.loopexit ]
  %v1_1116c = phi i32 [ %v0_11164.pr, %dec_label_pc_11164thread-pre-split ], [ %v4_11158, %dec_label_pc_11164.loopexit ]
  %v2_11164 = icmp slt i32 %v1_1116c, 0
  br i1 %v2_11164, label %dec_label_pc_11178, label %bb87

bb87:                                             ; preds = %dec_label_pc_11164
  %v4_11168 = icmp ult i32 %v1_1116c, %v2_11168
  br i1 %v4_11168, label %.thread4, label %dec_label_pc_11178

.thread4:                                         ; preds = %bb87
  %v3_1116c = mul i32 %v1_1116c, 2
  %v2_11170 = add i32 %v0_11178.pr, 1
  br label %dec_label_pc_11164thread-pre-split

dec_label_pc_11178:                               ; preds = %bb87, %dec_label_pc_11164
  %v2_11178 = add i32 %v0_11178.pr, -3
  %v5_1117c = icmp slt i32 %v0_11178.pr, 3
  br i1 %v5_1117c, label %dec_label_pc_111bc, label %dec_label_pc_11180

dec_label_pc_11180:                               ; preds = %dec_label_pc_11178, %bb91
  %v6_111a8 = phi i32 [ %v0_111b0, %bb91 ], [ %v2_11178, %dec_label_pc_11178 ]
  %v1_11184 = phi i32 [ %v1_1118c.v6_1118c.v6_11194.v6_1119c, %bb91 ], [ %v2_11168, %dec_label_pc_11178 ]
  %v3_111a410 = phi i32 [ %v3_111a4, %bb91 ], [ %v1_1116c, %dec_label_pc_11178 ]
  %v3_11180 = icmp ult i32 %v1_11184, %v3_111a410
  %v3_11184 = select i1 %v3_11180, i32 0, i32 %v3_111a410
  %v1_1118c = sub i32 %v1_11184, %v3_11184
  %v4_11188 = udiv i32 %v3_111a410, 2
  %v6_11188 = icmp ult i32 %v1_1118c, %v4_11188
  %v6_1118c = select i1 %v6_11188, i32 0, i32 %v4_11188
  %v1_1118c.v6_1118c = sub i32 %v1_1118c, %v6_1118c
  %.demorgan = and i1 %v3_11180, %v6_11188
  %v4_11190 = udiv i32 %v3_111a410, 4
  %v6_11190 = icmp ult i32 %v1_1118c.v6_1118c, %v4_11190
  %v6_11194 = select i1 %v6_11190, i32 0, i32 %v4_11190
  %v1_1118c.v6_1118c.v6_11194 = sub i32 %v1_1118c.v6_1118c, %v6_11194
  %.demorgan76 = and i1 %.demorgan, %v6_11190
  %v4_11198 = udiv i32 %v3_111a410, 8
  %v6_11198 = icmp ult i32 %v1_1118c.v6_1118c.v6_11194, %v4_11198
  %v6_1119c = select i1 %v6_11198, i32 0, i32 %v4_11198
  %v1_1118c.v6_1118c.v6_11194.v6_1119c = sub i32 %v1_1118c.v6_1118c.v6_11194, %v6_1119c
  %.demorgan77 = and i1 %.demorgan76, %v6_11198
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_11180
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_11180, %bb88
  %v2_111a0 = add i32 %v1_1118c.v6_1118c.v6_11194.v6_1119c, -1
  %v4_111a0 = sub i32 0, %v1_1118c.v6_1118c.v6_11194.v6_1119c
  %v5_111a0 = and i32 %v1_1118c.v6_1118c.v6_11194.v6_1119c, %v4_111a0
  %v3_111a4 = udiv i32 %v3_111a410, 16
  %v5_111a8 = icmp slt i32 %v1_1118c.v6_1118c.v6_11194.v6_1119c, 1
  br i1 %v5_111a8, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_111a8 = add i32 %v6_111a8, -4
  %v9_111a8 = sub i32 3, %v6_111a8
  %v10_111a8 = and i32 %v9_111a8, %v6_111a8
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_111b0 = phi i32 [ %v6_111a8, %bb89 ], [ %v7_111a8, %bb90 ]
  %v0_111ac13.in = phi i32 [ %v2_111a0, %bb89 ], [ %v7_111a8, %bb90 ]
  %v1_111ac12.in = phi i32 [ %v5_111a0, %bb89 ], [ %v10_111a8, %bb90 ]
  %v1_111ac12 = icmp slt i32 %v1_111ac12.in, 0
  %v0_111ac13 = icmp slt i32 %v0_111ac13.in, 0
  %v2_111ac = xor i1 %v0_111ac13, %v1_111ac12
  br i1 %v2_111ac, label %dec_label_pc_111b0, label %dec_label_pc_11180

dec_label_pc_111b0:                               ; preds = %bb91
  %v1_111b0 = urem i32 %v0_111b0, 4
  %v2_111b0 = icmp eq i32 %v1_111b0, 0
  br i1 %v2_111b0, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_111b0
  %v3_111b4 = icmp eq i32 %v1_1118c.v6_1118c.v6_11194.v6_1119c, 0
  br i1 %v3_111b4, label %.thread6, label %dec_label_pc_111bc

dec_label_pc_111bc:                               ; preds = %bb92, %dec_label_pc_11178
  %v0_111d0 = phi i32 [ %v3_111a4, %bb92 ], [ %v1_1116c, %dec_label_pc_11178 ]
  %v1_111cc = phi i32 [ %v1_1118c.v6_1118c.v6_11194.v6_1119c, %bb92 ], [ %v2_11168, %dec_label_pc_11178 ]
  %v0_111bc = phi i32 [ %v0_111b0, %bb92 ], [ %v2_11178, %dec_label_pc_11178 ]
  %v5_111c0 = icmp slt i32 %v0_111bc, -2
  br i1 %v5_111c0, label %dec_label_pc_111e0, label %dec_label_pc_111c4

dec_label_pc_111c4:                               ; preds = %dec_label_pc_111bc
  %v8_111bc = icmp eq i32 %v0_111bc, -2
  br i1 %v8_111bc, label %dec_label_pc_111d4, label %dec_label_pc_111c8

dec_label_pc_111c8:                               ; preds = %dec_label_pc_111c4
  %v3_111c8 = icmp ult i32 %v1_111cc, %v0_111d0
  br i1 %v3_111c8, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_111c8
  %v2_111c8 = sub i32 %v1_111cc, %v0_111d0
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_111c8, %bb93
  %v0_111d454 = phi i32 [ %v1_111cc, %dec_label_pc_111c8 ], [ %v2_111c8, %bb93 ]
  %v3_111d0 = udiv i32 %v0_111d0, 2
  br label %dec_label_pc_111d4

dec_label_pc_111d4:                               ; preds = %dec_label_pc_111c4, %bb94
  %v0_111dc = phi i32 [ %v0_111d0, %dec_label_pc_111c4 ], [ %v3_111d0, %bb94 ]
  %v1_111d8 = phi i32 [ %v1_111cc, %dec_label_pc_111c4 ], [ %v0_111d454, %bb94 ]
  %v3_111d4 = icmp ult i32 %v1_111d8, %v0_111dc
  br i1 %v3_111d4, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_111d4
  %v2_111d4 = sub i32 %v1_111d8, %v0_111dc
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_111d4, %bb95
  %v0_111e057 = phi i32 [ %v1_111d8, %dec_label_pc_111d4 ], [ %v2_111d4, %bb95 ]
  %v3_111dc = udiv i32 %v0_111dc, 2
  br label %dec_label_pc_111e0

dec_label_pc_111e0:                               ; preds = %dec_label_pc_111bc, %bb96
  %v2_111e4 = phi i32 [ %v0_111d0, %dec_label_pc_111bc ], [ %v3_111dc, %bb96 ]
  %v1_111e4 = phi i32 [ %v1_111cc, %dec_label_pc_111bc ], [ %v0_111e057, %bb96 ]
  %v3_111e0 = icmp ult i32 %v1_111e4, %v2_111e4
  br i1 %v3_111e0, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_111e0
  %v2_111e0 = sub i32 %v1_111e4, %v2_111e4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_111e0, %bb83, %.thread72, %dec_label_pc_111b0, %bb92, %bb97
  %v1_111ec = phi i32 [ %v1_1118c.v6_1118c.v6_11194.v6_1119c, %dec_label_pc_111b0 ], [ 0, %bb92 ], [ %v1_111e4, %dec_label_pc_111e0 ], [ %v2_111e0, %bb97 ], [ %v3_11144, %.thread72 ], [ %v1_11138, %bb83 ]
  br i1 %v1_1112c, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_111ec = sub i32 0, %v1_111ec
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_111f0 = phi i32 [ %v1_111ec, %.thread6 ], [ %v2_111ec, %bb98 ]
  ret i32 %v1_111f0

dec_label_pc_111f4:                               ; preds = %dec_label_pc_11120
  %v0_111f4 = load i32, i32* @lr, align 4
  %v0_111f8 = call i32 @function_11204()
  call void @__pseudo_branch(i32 %v0_111f4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_111d0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_111b0, { 1, 0, 2 }
  uselistorder i32 %v7_111a8, { 1, 0 }
  uselistorder i32 %v3_111a4, { 1, 0 }
  uselistorder i32 %v1_1118c.v6_1118c.v6_11194.v6_1119c, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_11198, { 1, 0 }
  uselistorder i32 %v4_11190, { 1, 0 }
  uselistorder i32 %v4_11188, { 1, 0 }
  uselistorder i32 %v6_111a8, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11178, { 1, 0 }
  uselistorder i32 %v1_1116c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_11168, { 1, 0, 3, 2 }
  uselistorder i32 %v4_11158, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11164.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11138, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_11140, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_11204, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_111e0, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_111d4, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_11180, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_11204() local_unnamed_addr {
dec_label_pc_11204:
  %v1_11204 = load i32, i32* @r0, align 4
  ret i32 %v1_11204
}

define i32 @function_11208(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11208:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_11208 = load i32, i32* @r2, align 4
  %v1_11218 = add i32 %arg2, -12
  store i32 %v6_11208, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_11218, 2
  br i1 %tmp, label %dec_label_pc_11240, label %dec_label_pc_11238

dec_label_pc_11238:                               ; preds = %dec_label_pc_11208
  %v0_11238 = call i32 @function_1127c()
  br label %dec_label_pc_1126c

dec_label_pc_11240:                               ; preds = %dec_label_pc_11208
  %v2_11248 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_11248, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_11248, -4095
  br i1 %tmp8, label %dec_label_pc_1126c, label %dec_label_pc_11258

dec_label_pc_11258:                               ; preds = %dec_label_pc_11240
  %v0_11258 = call i32 @function_118a0()
  %v0_1125c = load i32, i32* %r4.global-to-local, align 4
  %v1_1125c = sub i32 0, %v0_1125c
  %v2_11260 = inttoptr i32 %v0_11258 to i32*
  store i32 %v1_1125c, i32* %v2_11260, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1126c

dec_label_pc_1126c:                               ; preds = %dec_label_pc_11258, %dec_label_pc_11240, %dec_label_pc_11238
  %storemerge = phi i32 [ %v0_11238, %dec_label_pc_11238 ], [ %v2_11248, %dec_label_pc_11240 ], [ -1, %dec_label_pc_11258 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_11248, { 1, 0, 2 }
}

define i32 @function_1127c() local_unnamed_addr {
dec_label_pc_1127c:
  %r4.global-to-local = alloca i32, align 4
  %v0_1129c = load i32, i32* @r0, align 4
  store i32 %v0_1129c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1129c, -4095
  br i1 %tmp, label %dec_label_pc_112b8, label %dec_label_pc_112a8

dec_label_pc_112a8:                               ; preds = %dec_label_pc_1127c
  %v0_112a8 = call i32 @function_118a0()
  %v0_112ac = load i32, i32* %r4.global-to-local, align 4
  %v1_112ac = sub i32 0, %v0_112ac
  %v2_112b0 = inttoptr i32 %v0_112a8 to i32*
  store i32 %v1_112ac, i32* %v2_112b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_112b8

dec_label_pc_112b8:                               ; preds = %dec_label_pc_1127c, %dec_label_pc_112a8
  %v0_112b8 = phi i32 [ %v0_1129c, %dec_label_pc_1127c ], [ -1, %dec_label_pc_112a8 ]
  ret i32 %v0_112b8

; uselistorder directives
  uselistorder i32 %v0_1129c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112b8, { 1, 0 }
}

define i32 @function_112cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_112cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_112cc = load i32, i32* @r4, align 4
  store i32 %v3_112cc, i32* %stack_var_-8, align 4
  %v1_112d0 = call i32 @close(i32 %arg1)
  store i32 %v1_112d0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_112d0, -4095
  br i1 %tmp, label %dec_label_pc_112f0, label %dec_label_pc_112e0

dec_label_pc_112e0:                               ; preds = %dec_label_pc_112cc
  %v0_112e0 = call i32 @function_118a0()
  %v0_112e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_112e4 = sub i32 0, %v0_112e4
  %v2_112e8 = inttoptr i32 %v0_112e0 to i32*
  store i32 %v1_112e4, i32* %v2_112e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_112f0

dec_label_pc_112f0:                               ; preds = %dec_label_pc_112cc, %dec_label_pc_112e0
  %v0_112f0 = phi i32 [ %v1_112d0, %dec_label_pc_112cc ], [ -1, %dec_label_pc_112e0 ]
  %v2_112f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_112f4, i32* @r4, align 4
  ret i32 %v0_112f0

; uselistorder directives
  uselistorder i32 %v1_112d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112f0, { 1, 0 }
}

define i32 @function_112f8() local_unnamed_addr {
dec_label_pc_112f8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_112f8 = load i32, i32* @r4, align 4
  store i32 %v3_112f8, i32* %stack_var_-8, align 4
  %v0_112fc = call i32 @fork()
  store i32 %v0_112fc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_112fc, -4095
  br i1 %tmp, label %dec_label_pc_1131c, label %dec_label_pc_1130c

dec_label_pc_1130c:                               ; preds = %dec_label_pc_112f8
  %v0_1130c = call i32 @function_118a0()
  %v0_11310 = load i32, i32* %r4.global-to-local, align 4
  %v1_11310 = sub i32 0, %v0_11310
  %v2_11314 = inttoptr i32 %v0_1130c to i32*
  store i32 %v1_11310, i32* %v2_11314, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1131c

dec_label_pc_1131c:                               ; preds = %dec_label_pc_112f8, %dec_label_pc_1130c
  %v0_1131c = phi i32 [ %v0_112fc, %dec_label_pc_112f8 ], [ -1, %dec_label_pc_1130c ]
  %v2_11320 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11320, i32* @r4, align 4
  ret i32 %v0_1131c

; uselistorder directives
  uselistorder i32 %v0_112fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1131c, { 1, 0 }
}

define i32 @function_11324() local_unnamed_addr {
dec_label_pc_11324:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11324 = load i32, i32* @r4, align 4
  store i32 %v3_11324, i32* %stack_var_-8, align 4
  %v0_11328 = call i32 @getpid()
  store i32 %v0_11328, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11328, -4095
  br i1 %tmp, label %dec_label_pc_11348, label %dec_label_pc_11338

dec_label_pc_11338:                               ; preds = %dec_label_pc_11324
  %v0_11338 = call i32 @function_118a0()
  %v0_1133c = load i32, i32* %r4.global-to-local, align 4
  %v1_1133c = sub i32 0, %v0_1133c
  %v2_11340 = inttoptr i32 %v0_11338 to i32*
  store i32 %v1_1133c, i32* %v2_11340, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11348

dec_label_pc_11348:                               ; preds = %dec_label_pc_11324, %dec_label_pc_11338
  %v0_11348 = phi i32 [ %v0_11328, %dec_label_pc_11324 ], [ -1, %dec_label_pc_11338 ]
  %v2_1134c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1134c, i32* @r4, align 4
  ret i32 %v0_11348

; uselistorder directives
  uselistorder i32 %v0_11328, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11348, { 1, 0 }
}

define i32 @function_11350() local_unnamed_addr {
dec_label_pc_11350:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11350 = load i32, i32* @r4, align 4
  store i32 %v3_11350, i32* %stack_var_-8, align 4
  %v0_11354 = call i32 @getppid()
  store i32 %v0_11354, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11354, -4095
  br i1 %tmp, label %dec_label_pc_11374, label %dec_label_pc_11364

dec_label_pc_11364:                               ; preds = %dec_label_pc_11350
  %v0_11364 = call i32 @function_118a0()
  %v0_11368 = load i32, i32* %r4.global-to-local, align 4
  %v1_11368 = sub i32 0, %v0_11368
  %v2_1136c = inttoptr i32 %v0_11364 to i32*
  store i32 %v1_11368, i32* %v2_1136c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11374

dec_label_pc_11374:                               ; preds = %dec_label_pc_11350, %dec_label_pc_11364
  %v0_11374 = phi i32 [ %v0_11354, %dec_label_pc_11350 ], [ -1, %dec_label_pc_11364 ]
  %v2_11378 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11378, i32* @r4, align 4
  ret i32 %v0_11374

; uselistorder directives
  uselistorder i32 %v0_11354, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11374, { 1, 0 }
}

define i32 @function_1137c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1137c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_1137c = load i32, i32* @r3, align 4
  store i32 %v9_1137c, i32* %stack_var_-4, align 4
  %v2_11388 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_11388, i32* @r3, align 4
  %v2_11398 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_11398, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11398, -4095
  br i1 %tmp, label %dec_label_pc_113b8, label %dec_label_pc_113a8

dec_label_pc_113a8:                               ; preds = %dec_label_pc_1137c
  %v0_113a8 = call i32 @function_118a0()
  %v0_113ac = load i32, i32* %r4.global-to-local, align 4
  %v1_113ac = sub i32 0, %v0_113ac
  store i32 %v1_113ac, i32* @r3, align 4
  %v2_113b0 = inttoptr i32 %v0_113a8 to i32*
  store i32 %v1_113ac, i32* %v2_113b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_113b8

dec_label_pc_113b8:                               ; preds = %dec_label_pc_1137c, %dec_label_pc_113a8
  %v0_113b8 = phi i32 [ %v2_11398, %dec_label_pc_1137c ], [ -1, %dec_label_pc_113a8 ]
  ret i32 %v0_113b8

; uselistorder directives
  uselistorder i32 %v2_11398, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_113b8, { 1, 0 }
}

define i32 @function_113cc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_113cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113cc = load i32, i32* @r4, align 4
  store i32 %v3_113cc, i32* %stack_var_-8, align 4
  %v2_113d0 = call i32 @kill(i32 %arg1, i32 %arg2)
  store i32 %v2_113d0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_113d0, -4095
  br i1 %tmp, label %dec_label_pc_113f0, label %dec_label_pc_113e0

dec_label_pc_113e0:                               ; preds = %dec_label_pc_113cc
  %v0_113e0 = call i32 @function_118a0()
  %v0_113e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_113e4 = sub i32 0, %v0_113e4
  %v2_113e8 = inttoptr i32 %v0_113e0 to i32*
  store i32 %v1_113e4, i32* %v2_113e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_113f0

dec_label_pc_113f0:                               ; preds = %dec_label_pc_113cc, %dec_label_pc_113e0
  %v0_113f0 = phi i32 [ %v2_113d0, %dec_label_pc_113cc ], [ -1, %dec_label_pc_113e0 ]
  %v2_113f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_113f4, i32* @r4, align 4
  ret i32 %v0_113f0

; uselistorder directives
  uselistorder i32 %v2_113d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_113f0, { 1, 0 }
}

define i32 @function_113f8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_113f8:
  %r4.global-to-local = alloca i32, align 4
  %v6_113f8 = load i32, i32* @r2, align 4
  %v1_11408 = and i32 %arg2, 64
  store i32 %v1_11408, i32* @r3, align 4
  %v2_11408 = icmp eq i32 %v1_11408, 0
  br i1 %v2_11408, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_113f8
  store i32 %v6_113f8, i32* @r3, align 4
  %phitmp = urem i32 %v6_113f8, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_113f8, %bb
  %v0_11418 = phi i32 [ 0, %dec_label_pc_113f8 ], [ %phitmp, %bb ]
  store i32 %v0_11418, i32* @r2, align 4
  %v4_11420 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_11424 = icmp eq i32 %v4_11420, -4096
  store i1 %v7_11424, i1* @cpsr_z, align 1
  store i32 %v4_11420, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11420, -4095
  br i1 %tmp, label %dec_label_pc_11440, label %dec_label_pc_11430

dec_label_pc_11430:                               ; preds = %.thread1
  %v0_11430 = call i32 @function_118a0()
  %v0_11434 = load i32, i32* %r4.global-to-local, align 4
  %v1_11434 = sub i32 0, %v0_11434
  store i32 %v1_11434, i32* @r3, align 4
  %v2_11438 = inttoptr i32 %v0_11430 to i32*
  store i32 %v1_11434, i32* %v2_11438, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11440

dec_label_pc_11440:                               ; preds = %.thread1, %dec_label_pc_11430
  %v0_11440 = phi i32 [ %v4_11420, %.thread1 ], [ -1, %dec_label_pc_11430 ]
  ret i32 %v0_11440

; uselistorder directives
  uselistorder i32 %v4_11420, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11440, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_11454(i32 %arg1) local_unnamed_addr {
dec_label_pc_11454:
  store i32 %arg1, i32* @r2, align 4
  %v0_1145c = load i32, i32* @r0, align 4
  %v2_1145c = inttoptr i32 %v0_1145c to i8*
  %v3_1145c = call i32 @function_113f8(i8* %v2_1145c, i32 577)
  %v0_11460 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11460, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_11454
  %v6_11460 = and i32 %v3_1145c, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_11454, %bb
  %v7_11460 = phi i32 [ %v3_1145c, %dec_label_pc_11454 ], [ %v6_11460, %bb ]
  ret i32 %v7_11460

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_11464(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11464:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11464 = load i32, i32* @r4, align 4
  store i32 %v3_11464, i32* %stack_var_-8, align 4
  %v2_1146c = load i32, i32* @r2, align 4
  %v3_1146c = load i32, i32* @r3, align 4
  %v4_1146c = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_1146c, i32 %v3_1146c, i32 0)
  store i32 %v4_1146c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1146c, -4095
  br i1 %tmp, label %dec_label_pc_1148c, label %dec_label_pc_1147c

dec_label_pc_1147c:                               ; preds = %dec_label_pc_11464
  %v0_1147c = call i32 @function_118a0()
  %v0_11480 = load i32, i32* %r4.global-to-local, align 4
  %v1_11480 = sub i32 0, %v0_11480
  %v2_11484 = inttoptr i32 %v0_1147c to i32*
  store i32 %v1_11480, i32* %v2_11484, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1148c

dec_label_pc_1148c:                               ; preds = %dec_label_pc_11464, %dec_label_pc_1147c
  %v0_1148c = phi i32 [ %v4_1146c, %dec_label_pc_11464 ], [ -1, %dec_label_pc_1147c ]
  %v2_11490 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11490, i32* @r4, align 4
  ret i32 %v0_1148c

; uselistorder directives
  uselistorder i32 %v4_1146c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1148c, { 1, 0 }
}

define i32 @function_11494(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11494:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11494 = load i32, i32* @r4, align 4
  store i32 %v3_11494, i32* %stack_var_-8, align 4
  %v4_11498 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_11498, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11498, -4095
  br i1 %tmp, label %dec_label_pc_114b8, label %dec_label_pc_114a8

dec_label_pc_114a8:                               ; preds = %dec_label_pc_11494
  %v0_114a8 = call i32 @function_118a0()
  %v0_114ac = load i32, i32* %r4.global-to-local, align 4
  %v1_114ac = sub i32 0, %v0_114ac
  %v2_114b0 = inttoptr i32 %v0_114a8 to i32*
  store i32 %v1_114ac, i32* %v2_114b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_114b8

dec_label_pc_114b8:                               ; preds = %dec_label_pc_11494, %dec_label_pc_114a8
  %v0_114b8 = phi i32 [ %v4_11498, %dec_label_pc_11494 ], [ -1, %dec_label_pc_114a8 ]
  %v2_114bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_114bc, i32* @r4, align 4
  ret i32 %v0_114b8

; uselistorder directives
  uselistorder i32 %v4_11498, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114b8, { 1, 0 }
}

define i32 @function_114c0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_114c0:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_114c0 = load i32, i32* @r4, align 4
  store i32 %v3_114c0, i32* %stack_var_-8, align 4
  %v7_114c4 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_114c4, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_114c4, -4095
  br i1 %tmp6, label %dec_label_pc_114e4, label %dec_label_pc_114d4

dec_label_pc_114d4:                               ; preds = %dec_label_pc_114c0
  %v0_114d4 = call i32 @function_118a0()
  %v0_114d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_114d8 = sub i32 0, %v0_114d8
  %v2_114dc = inttoptr i32 %v0_114d4 to i32*
  store i32 %v1_114d8, i32* %v2_114dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_114e4

dec_label_pc_114e4:                               ; preds = %dec_label_pc_114c0, %dec_label_pc_114d4
  %v0_114e4 = phi i32 [ %v7_114c4, %dec_label_pc_114c0 ], [ -1, %dec_label_pc_114d4 ]
  %v2_114e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_114e8, i32* @r4, align 4
  ret i32 %v0_114e4

; uselistorder directives
  uselistorder i32 %v7_114c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114e4, { 1, 0 }
}

define i32 @function_114ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_114ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_114ec = load i32, i32* @r4, align 4
  store i32 %v3_114ec, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11514, label %dec_label_pc_11504

dec_label_pc_11504:                               ; preds = %dec_label_pc_114ec
  %v0_11504 = call i32 @function_118a0()
  %v0_11508 = load i32, i32* %r4.global-to-local, align 4
  %v1_11508 = sub i32 0, %v0_11508
  %v2_1150c = inttoptr i32 %v0_11504 to i32*
  store i32 %v1_11508, i32* %v2_1150c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11518.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11514

dec_label_pc_11514:                               ; preds = %dec_label_pc_114ec, %dec_label_pc_11504
  %v2_11518 = phi i32 [ %v3_114ec, %dec_label_pc_114ec ], [ %v2_11518.pre, %dec_label_pc_11504 ]
  %v0_11514 = phi i32 [ %arg1, %dec_label_pc_114ec ], [ -1, %dec_label_pc_11504 ]
  store i32 %v2_11518, i32* @r4, align 4
  ret i32 %v0_11514

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11514, { 1, 0 }
}

define i32 @function_1151c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1151c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1151c = load i32, i32* @r4, align 4
  store i32 %v3_1151c, i32* %stack_var_-8, align 4
  %v0_11520 = call i32 @setsid()
  store i32 %v0_11520, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11520, -4095
  br i1 %tmp, label %dec_label_pc_11540, label %dec_label_pc_11530

dec_label_pc_11530:                               ; preds = %dec_label_pc_1151c
  %v0_11530 = call i32 @function_118a0()
  %v0_11534 = load i32, i32* %r4.global-to-local, align 4
  %v1_11534 = sub i32 0, %v0_11534
  %v2_11538 = inttoptr i32 %v0_11530 to i32*
  store i32 %v1_11534, i32* %v2_11538, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11540

dec_label_pc_11540:                               ; preds = %dec_label_pc_1151c, %dec_label_pc_11530
  %v0_11540 = phi i32 [ %v0_11520, %dec_label_pc_1151c ], [ -1, %dec_label_pc_11530 ]
  %v2_11544 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11544, i32* @r4, align 4
  ret i32 %v0_11540

; uselistorder directives
  uselistorder i32 %v0_11520, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11540, { 1, 0 }
}

define i32 @function_11548(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11548:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11548 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_11548, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11548
  %v3_115505 = load i32, i32* @r4, align 4
  store i32 %v3_115505, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11570

bb:                                               ; preds = %dec_label_pc_11548
  %v3_11550 = load i32, i32* @r4, align 4
  store i32 %v3_11550, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_11570, label %dec_label_pc_1155c

dec_label_pc_1155c:                               ; preds = %bb
  %v0_1155c = call i32 @function_118a0()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11568 = inttoptr i32 %v0_1155c to i32*
  store i32 22, i32* %v2_11568, align 4
  %v0_11594.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11594

dec_label_pc_11570:                               ; preds = %.thread, %bb
  %v7_11570 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_11570, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_11570, -4095
  br i1 %tmp13, label %dec_label_pc_11590, label %dec_label_pc_11580

dec_label_pc_11580:                               ; preds = %dec_label_pc_11570
  %v0_11580 = call i32 @function_118a0()
  %v0_11584 = load i32, i32* %r4.global-to-local, align 4
  %v1_11584 = sub i32 0, %v0_11584
  %v2_11588 = inttoptr i32 %v0_11580 to i32*
  store i32 %v1_11584, i32* %v2_11588, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11590

dec_label_pc_11590:                               ; preds = %dec_label_pc_11570, %dec_label_pc_11580
  %v0_11590 = phi i32 [ %v7_11570, %dec_label_pc_11570 ], [ -1, %dec_label_pc_11580 ]
  store i32 %v0_11590, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11594

dec_label_pc_11594:                               ; preds = %dec_label_pc_1155c, %dec_label_pc_11590
  %v0_11594 = phi i32 [ %v0_11594.pre, %dec_label_pc_1155c ], [ %v0_11590, %dec_label_pc_11590 ]
  %v2_11598 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11598, i32* @r4, align 4
  ret i32 %v0_11594

; uselistorder directives
  uselistorder i32 %v7_11570, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_11594, { 1, 0 }
  uselistorder label %dec_label_pc_11590, { 1, 0 }
  uselistorder label %dec_label_pc_11570, { 1, 0 }
}

define i32 @function_1159c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1159c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1159c = load i32, i32* @r4, align 4
  store i32 %v3_1159c, i32* %stack_var_-8, align 4
  %v2_115a0 = call i32 @time(i32* %arg1)
  store i32 %v2_115a0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_115a0, -4095
  br i1 %tmp, label %dec_label_pc_115c0, label %dec_label_pc_115b0

dec_label_pc_115b0:                               ; preds = %dec_label_pc_1159c
  %v0_115b0 = call i32 @function_118a0()
  %v0_115b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_115b4 = sub i32 0, %v0_115b4
  %v2_115b8 = inttoptr i32 %v0_115b0 to i32*
  store i32 %v1_115b4, i32* %v2_115b8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_115c0

dec_label_pc_115c0:                               ; preds = %dec_label_pc_1159c, %dec_label_pc_115b0
  %v0_115c0 = phi i32 [ %v2_115a0, %dec_label_pc_1159c ], [ -1, %dec_label_pc_115b0 ]
  %v2_115c4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_115c4, i32* @r4, align 4
  ret i32 %v0_115c0

; uselistorder directives
  uselistorder i32 %v2_115a0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_115c0, { 1, 0 }
}

define i32 @function_115c8(i8* %arg1) local_unnamed_addr {
dec_label_pc_115c8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115c8 = load i32, i32* @r4, align 4
  store i32 %v3_115c8, i32* %stack_var_-8, align 4
  %v3_115cc = call i32 @unlink(i8* %arg1)
  store i32 %v3_115cc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_115cc, -4095
  br i1 %tmp, label %dec_label_pc_115ec, label %dec_label_pc_115dc

dec_label_pc_115dc:                               ; preds = %dec_label_pc_115c8
  %v0_115dc = call i32 @function_118a0()
  %v0_115e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_115e0 = sub i32 0, %v0_115e0
  %v2_115e4 = inttoptr i32 %v0_115dc to i32*
  store i32 %v1_115e0, i32* %v2_115e4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_115ec

dec_label_pc_115ec:                               ; preds = %dec_label_pc_115c8, %dec_label_pc_115dc
  %v0_115ec = phi i32 [ %v3_115cc, %dec_label_pc_115c8 ], [ -1, %dec_label_pc_115dc ]
  %v2_115f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_115f0, i32* @r4, align 4
  ret i32 %v0_115ec

; uselistorder directives
  uselistorder i32 %v3_115cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_115ec, { 1, 0 }
}

define i32 @function_115f4(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_115f4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115f4 = load i32, i32* @r4, align 4
  store i32 %v3_115f4, i32* %stack_var_-8, align 4
  %v4_115f8 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_115f8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_115f8, -4095
  br i1 %tmp, label %dec_label_pc_11618, label %dec_label_pc_11608

dec_label_pc_11608:                               ; preds = %dec_label_pc_115f4
  %v0_11608 = call i32 @function_118a0()
  %v0_1160c = load i32, i32* %r4.global-to-local, align 4
  %v1_1160c = sub i32 0, %v0_1160c
  %v2_11610 = inttoptr i32 %v0_11608 to i32*
  store i32 %v1_1160c, i32* %v2_11610, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11618

dec_label_pc_11618:                               ; preds = %dec_label_pc_115f4, %dec_label_pc_11608
  %v0_11618 = phi i32 [ %v4_115f8, %dec_label_pc_115f4 ], [ -1, %dec_label_pc_11608 ]
  %v2_1161c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1161c, i32* @r4, align 4
  ret i32 %v0_11618

; uselistorder directives
  uselistorder i32 %v4_115f8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11618, { 1, 0 }
}

define i32 @function_11620(i32* %arg1) local_unnamed_addr {
dec_label_pc_11620:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11620 = load i32, i32* @r4, align 4
  store i32 %v3_11620, i32* %stack_var_-20, align 4
  %v6_11620 = load i32, i32* @r5, align 4
  %v9_11620 = load i32, i32* @r6, align 4
  %v12_11620 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11628 = load i32, i32* %arg1, align 4
  store i32 %v2_11628, i32* %r4.global-to-local, align 4
  %v2_1162c = ptrtoint i32* %stack_var_-36 to i32
  %v1_11630 = add i32 %tmp, 24
  store i32 %v1_11630, i32* @r6, align 4
  %v3_11634 = icmp eq i32 %v2_11628, -1
  store i32 %v2_1162c, i32* @r7, align 4
  store i32 %v1_11630, i32* %r2.global-to-local, align 4
  store i32 %v2_1162c, i32* @r0, align 4
  br i1 %v3_11634, label %dec_label_pc_1164c, label %dec_label_pc_11660

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11620
  %v0_1164c = call i32 @function_118a0()
  %v0_11654 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11654, i32* %r2.global-to-local, align 4
  %v2_11658 = inttoptr i32 %v0_1164c to i32*
  store i32 9, i32* %v2_11658, align 4
  %v0_116b8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_116b8

dec_label_pc_11660:                               ; preds = %dec_label_pc_11620
  %v8_11668 = call i32 @function_128e4(i32 %v2_1162c, i32 ptrtoint (i32* @global_var_128dc.367 to i32), i32 %v1_11630, i32 76004, i32 %v3_11620, i32 %v6_11620, i32 %v9_11620)
  %v1_11678 = call i32 @function_128dc()
  %v0_11684 = load i32, i32* @r5, align 4
  %v1_11684 = inttoptr i32 %v0_11684 to i32*
  %v2_11684 = load i32, i32* %v1_11684, align 4
  store i32 %v2_11684, i32* @r4, align 4
  store i32 %v2_1162c, i32* @r0, align 4
  store i32 -1, i32* %v1_11684, align 4
  store i32 ptrtoint (i32* @global_var_1169c.371 to i32), i32* @lr, align 4
  %v8_11698 = call i32 @function_128e4(i32 %v2_1162c, i32 1, i32 %v1_11630, i32 76004, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_1169c = load i32, i32* @r5, align 4
  %v1_1169c = add i32 %v0_1169c, 12
  %v2_1169c = inttoptr i32 %v1_1169c to i32*
  %v3_1169c = load i32, i32* %v2_1169c, align 4
  store i32 %v3_1169c, i32* @r0, align 4
  %v0_116a0 = call i32 @function_11ef4()
  %v0_116a4 = load i32, i32* @r5, align 4
  store i32 %v0_116a4, i32* @r0, align 4
  %v0_116a8 = call i32 @function_11ef4()
  %v0_116ac = load i32, i32* @r4, align 4
  %v1_116b0 = call i32 @function_112cc(i32 %v0_116ac)
  store i32 %v1_116b0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_116b8

dec_label_pc_116b8:                               ; preds = %dec_label_pc_1164c, %dec_label_pc_11660
  %v0_116b8 = phi i32 [ %v0_116b8.pre, %dec_label_pc_1164c ], [ %v1_116b0, %dec_label_pc_11660 ]
  %v2_116c0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_116c0, i32* @r4, align 4
  store i32 %v6_11620, i32* @r5, align 4
  store i32 %v9_11620, i32* @r6, align 4
  store i32 %v12_11620, i32* @r7, align 4
  ret i32 %v0_116b8

; uselistorder directives
  uselistorder i32 %v1_11630, { 2, 1, 0, 3 }
  uselistorder i32 %v2_1162c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_11620, { 1, 0 }
  uselistorder i32 %v6_11620, { 1, 0 }
  uselistorder label %dec_label_pc_116b8, { 1, 0 }
}

define i32 @function_116d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_116d4:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_116d4 = load i32, i32* @r4, align 4
  %v9_116d4 = load i32, i32* @r6, align 4
  %v12_116d4 = load i32, i32* @r7, align 4
  %v0_116e0 = load i32, i32* @r0, align 4
  %v2_116e0 = inttoptr i32 %v0_116e0 to i8*
  %v3_116e0 = call i32 @function_113f8(i8* %v2_116e0, i32 18432)
  store i32 %v3_116e0, i32* @r0, align 4
  store i32 %v3_116e0, i32* @r7, align 4
  %v1_116e4 = icmp slt i32 %v3_116e0, 0
  br i1 %v1_116e4, label %.thread1, label %dec_label_pc_116f0

.thread1:                                         ; preds = %dec_label_pc_116d4
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_117c0

dec_label_pc_116f0:                               ; preds = %dec_label_pc_116d4
  %v2_116dc = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_116dc, i32* @r1, align 4
  %v0_116f4 = call i32 @function_12d08()
  %v1_116f8 = icmp slt i32 %v0_116f4, 0
  br i1 %v1_116f8, label %dec_label_pc_11718, label %dec_label_pc_11700

dec_label_pc_11700:                               ; preds = %dec_label_pc_116f0
  %v0_11700 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_1170c = call i32 @function_11208(i32 %v0_11700, i32 2)
  %v1_11710 = icmp slt i32 %v2_1170c, 0
  br i1 %v1_11710, label %dec_label_pc_11718, label %dec_label_pc_11738

dec_label_pc_11718:                               ; preds = %dec_label_pc_11700, %dec_label_pc_116f0
  %v0_11718 = call i32 @function_118a0()
  store i32 %v0_11718, i32* %r5.global-to-local, align 4
  %v0_11720 = load i32, i32* @r7, align 4
  %v1_11724 = inttoptr i32 %v0_11718 to i32*
  %v2_11724 = load i32, i32* %v1_11724, align 4
  store i32 %v2_11724, i32* @r4, align 4
  %v1_11728 = call i32 @function_112cc(i32 %v0_11720)
  store i32 0, i32* @r6, align 4
  %v0_11730 = load i32, i32* @r4, align 4
  %v1_11730 = load i32, i32* %r5.global-to-local, align 4
  %v2_11730 = inttoptr i32 %v1_11730 to i32*
  store i32 %v0_11730, i32* %v2_11730, align 4
  br label %dec_label_pc_117c0

dec_label_pc_11738:                               ; preds = %dec_label_pc_11700
  %v1_1173c = call i32 @function_11d48(i32 48)
  store i32 %v1_1173c, i32* @r6, align 4
  %v2_11740 = icmp eq i32 %v1_1173c, 0
  br i1 %v2_11740, label %dec_label_pc_11790, label %dec_label_pc_11748

dec_label_pc_11748:                               ; preds = %dec_label_pc_11738
  store i32 0, i32* @r4, align 4
  %v2_1174c = add i32 %v1_1173c, 16
  %v3_1174c = inttoptr i32 %v2_1174c to i32*
  store i32 0, i32* %v3_1174c, align 4
  %v2_11754 = icmp ugt i32 %tmp, 511
  %v1_11758 = load i32, i32* @r6, align 4
  %v2_11758 = add i32 %v1_11758, 20
  %v3_11758 = inttoptr i32 %v2_11758 to i32*
  store i32 %tmp, i32* %v3_11758, align 4
  br i1 %v2_11754, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_11748
  %v2_11760 = load i32, i32* @r6, align 4
  %v3_11760 = add i32 %v2_11760, 20
  %v4_11760 = inttoptr i32 %v3_11760 to i32*
  store i32 512, i32* %v4_11760, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11748, %bb
  %v0_11764 = load i32, i32* @r7, align 4
  %v1_11764 = load i32, i32* @r6, align 4
  %v2_11764 = inttoptr i32 %v1_11764 to i32*
  store i32 %v0_11764, i32* %v2_11764, align 4
  %v0_11768 = load i32, i32* @r4, align 4
  %v1_11768 = load i32, i32* @r6, align 4
  %v2_11768 = add i32 %v1_11768, 8
  %v3_11768 = inttoptr i32 %v2_11768 to i32*
  store i32 %v0_11768, i32* %v3_11768, align 4
  %v0_1176c = load i32, i32* @r4, align 4
  %v1_1176c = load i32, i32* @r6, align 4
  %v2_1176c = add i32 %v1_1176c, 4
  %v3_1176c = inttoptr i32 %v2_1176c to i32*
  store i32 %v0_1176c, i32* %v3_1176c, align 4
  %v0_11774 = load i32, i32* @r6, align 4
  %v1_11774 = add i32 %v0_11774, 20
  %v2_11774 = inttoptr i32 %v1_11774 to i32*
  %v3_11774 = load i32, i32* %v2_11774, align 4
  %v2_11778 = call i32 @function_11e9c(i32 1, i32 %v3_11774)
  %v2_1177c = icmp eq i32 %v2_11778, 0
  %v1_11780 = load i32, i32* @r6, align 4
  %v2_11780 = add i32 %v1_11780, 12
  %v3_11780 = inttoptr i32 %v2_11780 to i32*
  store i32 %v2_11778, i32* %v3_11780, align 4
  br i1 %v2_1177c, label %dec_label_pc_11788, label %dec_label_pc_117ac

dec_label_pc_11788:                               ; preds = %.thread
  %v0_11788 = load i32, i32* @r6, align 4
  store i32 %v0_11788, i32* @r0, align 4
  %v0_1178c = call i32 @function_11ef4()
  br label %dec_label_pc_11790

dec_label_pc_11790:                               ; preds = %dec_label_pc_11738, %dec_label_pc_11788
  %v0_11790 = load i32, i32* @r7, align 4
  %v1_11794 = call i32 @function_112cc(i32 %v0_11790)
  %v0_11798 = call i32 @function_118a0()
  store i32 0, i32* @r6, align 4
  %v2_117a4 = inttoptr i32 %v0_11798 to i32*
  store i32 12, i32* %v2_117a4, align 4
  br label %dec_label_pc_117c0

dec_label_pc_117ac:                               ; preds = %.thread
  store i32 71616, i32* @lr, align 4
  %v1_117bc = call i32 @function_128dc()
  br label %dec_label_pc_117c0

dec_label_pc_117c0:                               ; preds = %.thread1, %dec_label_pc_11790, %dec_label_pc_11718, %dec_label_pc_117ac
  %v0_117c0 = load i32, i32* @r6, align 4
  store i32 %v3_116d4, i32* @r4, align 4
  store i32 %v9_116d4, i32* @r6, align 4
  store i32 %v12_116d4, i32* @r7, align 4
  ret i32 %v0_117c0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_11e9c, { 39, 40, 38, 37, 36, 22, 35, 34, 33, 32, 28, 27, 26, 25, 24, 23, 0, 21, 20, 19, 18, 17, 16, 15, 3, 2, 1, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 31, 30, 29 }
  uselistorder i32 512, { 0, 5, 1, 6, 8, 2, 9, 3, 10, 4, 11, 7 }
  uselistorder i32 (i32)* @function_112cc, { 18, 17, 16, 32, 36, 31, 30, 35, 34, 29, 28, 33, 27, 26, 25, 24, 23, 2, 22, 21, 20, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_117c0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_11790, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_117d0(i32* %arg1) local_unnamed_addr {
dec_label_pc_117d0:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_117d0 = load i32, i32* @r4, align 4
  %v6_117d0 = load i32, i32* @r5, align 4
  %v9_117d0 = load i32, i32* @lr, align 4
  %v1_117d4 = add i32 %tmp, 24
  store i32 %v1_117d4, i32* @r4, align 4
  %v2_117d8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 76004, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_117d8, i32* @r0, align 4
  store i32 %v1_117d4, i32* %r2.global-to-local, align 4
  %v8_117f4 = call i32 @function_128e4(i32 %v2_117d8, i32 ptrtoint (i32* @global_var_128dc.367 to i32), i32 %v1_117d4, i32 76004, i32 %v3_117d0, i32 %v6_117d0, i32 %v9_117d0)
  %v0_117f8 = load i32, i32* @r4, align 4
  store i32 %v0_117f8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128dc.367 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11808.376 to i32), i32* @lr, align 4
  %v1_11804 = call i32 @function_128dc()
  store i32 %v1_11804, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11808

dec_label_pc_11808:                               ; preds = %dec_label_pc_1183c, %dec_label_pc_117d0
  %v0_11808 = load i32, i32* @r5, align 4
  %v1_11808 = add i32 %v0_11808, 4
  %v2_11808 = inttoptr i32 %v1_11808 to i32*
  %v3_11808 = load i32, i32* %v2_11808, align 4
  store i32 %v3_11808, i32* %r2.global-to-local, align 4
  %v4_11808 = add i32 %v0_11808, 8
  %v5_11808 = inttoptr i32 %v4_11808 to i32*
  %v6_11808 = load i32, i32* %v5_11808, align 4
  store i32 %v6_11808, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_11808, %v3_11808
  br i1 %tmp8, label %dec_label_pc_1183c, label %dec_label_pc_11814

dec_label_pc_11814:                               ; preds = %dec_label_pc_11808
  %v1_11814 = inttoptr i32 %v0_11808 to i32*
  %v2_11814 = load i32, i32* %v1_11814, align 4
  store i32 %v2_11814, i32* @r0, align 4
  %v1_11818 = add i32 %v0_11808, 12
  %v2_11818 = inttoptr i32 %v1_11818 to i32*
  %v3_11818 = load i32, i32* %v2_11818, align 4
  %v1_1181c = add i32 %v0_11808, 20
  %v2_1181c = inttoptr i32 %v1_1181c to i32*
  %v3_1181c = load i32, i32* %v2_1181c, align 4
  store i32 %v3_1181c, i32* @r2, align 4
  %v4_11820 = call i32 @function_12d58(i32 %v2_11814, i32 %v3_11818, i32 %v3_1181c, i32 %v6_11808)
  store i32 %v4_11820, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_11820, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_11830

.thread:                                          ; preds = %dec_label_pc_11814
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11870

dec_label_pc_11830:                               ; preds = %dec_label_pc_11814
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_11834 = load i32, i32* @r5, align 4
  %v2_11834 = add i32 %v1_11834, 4
  %v3_11834 = inttoptr i32 %v2_11834 to i32*
  store i32 0, i32* %v3_11834, align 4
  %v1_11838 = load i32, i32* @r5, align 4
  %v2_11838 = add i32 %v1_11838, 8
  %v3_11838 = inttoptr i32 %v2_11838 to i32*
  store i32 %v4_11820, i32* %v3_11838, align 4
  %v0_1183c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %dec_label_pc_11808, %dec_label_pc_11830
  %v1_11854 = phi i32 [ %v0_11808, %dec_label_pc_11808 ], [ %v0_1183c.pre, %dec_label_pc_11830 ]
  %v1_1183c = add i32 %v1_11854, 4
  %v2_1183c = inttoptr i32 %v1_1183c to i32*
  %v3_1183c = load i32, i32* %v2_1183c, align 4
  store i32 %v3_1183c, i32* %r2.global-to-local, align 4
  %v1_11840 = add i32 %v1_11854, 12
  %v2_11840 = inttoptr i32 %v1_11840 to i32*
  %v3_11840 = load i32, i32* %v2_11840, align 4
  store i32 %v3_11840, i32* %ip.global-to-local, align 4
  %v2_11844 = add i32 %v3_11840, %v3_1183c
  store i32 %v2_11844, i32* @r4, align 4
  %v1_11848 = add i32 %v2_11844, 4
  %v2_11848 = inttoptr i32 %v1_11848 to i32*
  %v3_11848 = load i32, i32* %v2_11848, align 4
  %v1_1184c = add i32 %v2_11844, 8
  %v2_1184c = inttoptr i32 %v1_1184c to i8*
  %v3_1184c = load i8, i8* %v2_1184c, align 1
  %v4_1184c = zext i8 %v3_1184c to i32
  store i32 %v4_1184c, i32* %r3.global-to-local, align 4
  %v1_11850 = add i32 %v2_11844, 9
  %v2_11850 = inttoptr i32 %v1_11850 to i8*
  %v3_11850 = load i8, i8* %v2_11850, align 1
  %v4_11850 = zext i8 %v3_11850 to i32
  store i32 %v4_11850, i32* %r0.global-to-local, align 4
  %v2_11854 = add i32 %v1_11854, 16
  %v3_11854 = inttoptr i32 %v2_11854 to i32*
  store i32 %v3_11848, i32* %v3_11854, align 4
  %v0_11858 = load i32, i32* %r2.global-to-local, align 4
  %v1_11858 = load i32, i32* %ip.global-to-local, align 4
  %v2_11858 = add i32 %v1_11858, %v0_11858
  %v3_11858 = inttoptr i32 %v2_11858 to i32*
  %v4_11858 = load i32, i32* %v3_11858, align 4
  %v0_1185c = load i32, i32* %r3.global-to-local, align 4
  %v1_1185c = load i32, i32* %r0.global-to-local, align 4
  %v4_1185c = mul i32 %v1_1185c, 256
  %v5_1185c = or i32 %v4_1185c, %v0_1185c
  store i32 %v5_1185c, i32* %r3.global-to-local, align 4
  %v2_11860 = add i32 %v5_1185c, %v0_11858
  store i32 %v2_11860, i32* @r2, align 4
  %v2_11864 = icmp eq i32 %v4_11858, 0
  %v1_11868 = load i32, i32* @r5, align 4
  %v2_11868 = add i32 %v1_11868, 4
  %v3_11868 = inttoptr i32 %v2_11868 to i32*
  store i32 %v2_11860, i32* %v3_11868, align 4
  br i1 %v2_11864, label %dec_label_pc_11808, label %dec_label_pc_11870

dec_label_pc_11870:                               ; preds = %dec_label_pc_1183c, %.thread
  store i32 %v2_117d8, i32* @r0, align 4
  store i32 76004, i32* %r3.global-to-local, align 4
  store i32 71812, i32* @lr, align 4
  %v3_11880 = load i32, i32* @r2, align 4
  %v8_11880 = call i32 @function_128e4(i32 %v2_117d8, i32 1, i32 %v3_11880, i32 76004, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_11884 = load i32, i32* @r4, align 4
  store i32 %v0_11884, i32* %r0.global-to-local, align 4
  store i32 %v3_117d0, i32* @r4, align 4
  store i32 %v6_117d0, i32* @r5, align 4
  ret i32 %v0_11884

; uselistorder directives
  uselistorder i32 %v1_11854, { 0, 2, 1 }
  uselistorder i32 %v6_11808, { 1, 0, 2 }
  uselistorder i32 %v0_11808, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_117d8, { 1, 0, 3, 2 }
  uselistorder i32 %v1_117d4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_1183c, { 1, 0 }
}

define i32 @function_118a0() local_unnamed_addr {
dec_label_pc_118a0:
  ret i32 ptrtoint (i32* @global_var_1c2c4.379 to i32)
}

define i32 @function_118ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_118ac:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_118b8 = bitcast i32* %stack_var_-20 to %tms*
  %v2_118b8 = call i32 @function_130e8(%tms* %v1_118b8)
  %v2_118c0 = load i32, i32* %stack_var_-20, align 4
  %v2_118c4 = add i32 %v2_118c0, %tmp
  %v2_118cc = mul i32 %v2_118c4, 10000
  %v1_118d0 = and i32 %v2_118cc, 2147483632
  ret i32 %v1_118d0

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_118e0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_118e0:
  %v0_118e0 = call i32 @function_134f0()
  ret i32 %v0_118e0
}

define i32 @function_118f0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_118f0:
  %v0_118f0 = call i32 @function_134f0()
  ret i32 %v0_118f0

; uselistorder directives
  uselistorder i32 ()* @function_134f0, { 1, 0 }
}

define i32 @function_11900(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11900:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_11904 = load i32, i32* @r2, align 4
  %v8_11904 = icmp eq i32 %v0_11904, 8
  store i1 %v8_11904, i1* %cpsr_z.global-to-local, align 1
  %v5_11908 = icmp slt i32 %v0_11904, 8
  br i1 %v5_11908, label %dec_label_pc_11968, label %dec_label_pc_1190c

dec_label_pc_1190c:                               ; preds = %dec_label_pc_11900
  %v4_1190c = mul i32 %arg2, 256
  %v5_1190c = or i32 %v4_1190c, %arg2
  %v4_11910 = mul i32 %v5_1190c, 65536
  %v5_11910 = or i32 %v4_11910, %v5_1190c
  store i32 %v5_11910, i32* %r1.global-to-local, align 4
  %v1_1191457 = urem i32 %tmp, 4
  %v2_1191458 = icmp eq i32 %v1_1191457, 0
  store i1 %v2_1191458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1191458, label %dec_label_pc_11924, label %bb

bb:                                               ; preds = %dec_label_pc_1190c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1190c ]
  %v3_1191859 = phi i32 [ %v6_11918, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1190c ]
  %v4_11918 = inttoptr i32 %v3_1191859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11918, align 1
  %v5_11918 = load i32, i32* %r3.global-to-local, align 4
  %v6_11918 = add i32 %v5_11918, 1
  store i32 %v6_11918, i32* %r3.global-to-local, align 4
  %v0_1191c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11928.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1191c.pr, label %dec_label_pc_11924, label %.thread

.thread:                                          ; preds = %bb
  %v2_1191c = add i32 %v0_11928.pr.pre, -1
  store i32 %v2_1191c, i32* @r2, align 4
  %v1_11914 = urem i32 %v6_11918, 4
  %v2_11914 = icmp eq i32 %v1_11914, 0
  store i1 %v2_11914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11914, label %dec_label_pc_11924, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11918.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_11918.pre to i8
  br label %bb

dec_label_pc_11924:                               ; preds = %.thread, %bb, %dec_label_pc_1190c
  %v0_1193028 = phi i32 [ %tmp, %dec_label_pc_1190c ], [ %v6_11918, %bb ], [ %v6_11918, %.thread ]
  %v0_11928.pr = phi i32 [ %v0_11904, %dec_label_pc_1190c ], [ %v0_11928.pr.pre, %bb ], [ %v2_1191c, %.thread ]
  %v0_11924 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11924, i32* %ip.global-to-local, align 4
  %v8_1192810 = icmp eq i32 %v0_11928.pr, 8
  store i1 %v8_1192810, i1* %cpsr_z.global-to-local, align 1
  %v5_1192c11 = icmp slt i32 %v0_11928.pr, 8
  br i1 %v5_1192c11, label %dec_label_pc_11968, label %dec_label_pc_11930.preheader

dec_label_pc_11930.preheader:                     ; preds = %dec_label_pc_11924
  %v1_1193046 = inttoptr i32 %v0_1193028 to i32*
  store i32 %v0_11924, i32* %v1_1193046, align 4
  %v3_1193047 = add i32 %v0_1193028, 4
  %v4_1193048 = inttoptr i32 %v3_1193047 to i32*
  %v5_1193049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1193049, i32* %v4_1193048, align 4
  %v6_1193050 = add i32 %v0_1193028, 8
  store i32 %v6_1193050, i32* %r3.global-to-local, align 4
  %v0_1193451 = load i32, i32* @r2, align 4
  %v1_1193452 = add i32 %v0_1193451, -8
  store i32 %v1_1193452, i32* %r2.global-to-local, align 4
  %v5_1193c53 = icmp slt i32 %v1_1193452, 8
  br i1 %v5_1193c53, label %dec_label_pc_11930.dec_label_pc_11968.loopexit_crit_edge, label %dec_label_pc_11940

dec_label_pc_11940:                               ; preds = %dec_label_pc_11930.preheader, %dec_label_pc_11928.dec_label_pc_11930_crit_edge
  %v6_1193055 = phi i32 [ %v6_11930, %dec_label_pc_11928.dec_label_pc_11930_crit_edge ], [ %v6_1193050, %dec_label_pc_11930.preheader ]
  %v0_1193054 = phi i32 [ %v12_1195c, %dec_label_pc_11928.dec_label_pc_11930_crit_edge ], [ %v0_1193028, %dec_label_pc_11930.preheader ]
  %v1_11940 = inttoptr i32 %v6_1193055 to i32*
  %v2_11940 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11940, i32* %v1_11940, align 4
  %v3_11940 = add i32 %v0_1193054, 12
  %v4_11940 = inttoptr i32 %v3_11940 to i32*
  %v5_11940 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11940, i32* %v4_11940, align 4
  %v6_11940 = add i32 %v0_1193054, 16
  store i32 %v6_11940, i32* %r3.global-to-local, align 4
  %v0_11944 = load i32, i32* %r2.global-to-local, align 4
  %v1_11944 = add i32 %v0_11944, -8
  store i32 %v1_11944, i32* %r2.global-to-local, align 4
  %v5_1194c = icmp slt i32 %v1_11944, 8
  br i1 %v5_1194c, label %dec_label_pc_11940.dec_label_pc_11968.loopexit_crit_edge, label %dec_label_pc_11950

dec_label_pc_11950:                               ; preds = %dec_label_pc_11940
  %v1_11950 = inttoptr i32 %v6_11940 to i32*
  %v2_11950 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11950, i32* %v1_11950, align 4
  %v3_11950 = add i32 %v0_1193054, 20
  %v4_11950 = inttoptr i32 %v3_11950 to i32*
  %v5_11950 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11950, i32* %v4_11950, align 4
  %v6_11950 = add i32 %v0_1193054, 24
  store i32 %v6_11950, i32* %r3.global-to-local, align 4
  %v0_11954 = load i32, i32* %r2.global-to-local, align 4
  %v1_11954 = add i32 %v0_11954, -8
  store i32 %v1_11954, i32* %r2.global-to-local, align 4
  %v5_1195c = icmp slt i32 %v1_11954, 8
  br i1 %v5_1195c, label %dec_label_pc_11950.dec_label_pc_11968.loopexit_crit_edge, label %dec_label_pc_11928

dec_label_pc_11928:                               ; preds = %dec_label_pc_11950
  %v7_1195c = inttoptr i32 %v6_11950 to i32*
  %v8_1195c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1195c, i32* %v7_1195c, align 4
  %v9_1195c = add i32 %v0_1193054, 28
  %v10_1195c = inttoptr i32 %v9_1195c to i32*
  %v11_1195c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1195c, i32* %v10_1195c, align 4
  %v12_1195c = add i32 %v0_1193054, 32
  store i32 %v12_1195c, i32* %r3.global-to-local, align 4
  %v6_11960 = load i32, i32* %r2.global-to-local, align 4
  %v7_11960 = add i32 %v6_11960, -8
  store i32 %v7_11960, i32* %r2.global-to-local, align 4
  %v5_1192c = icmp slt i32 %v7_11960, 8
  br i1 %v5_1192c, label %dec_label_pc_11928.dec_label_pc_11968.loopexit_crit_edge, label %dec_label_pc_11928.dec_label_pc_11930_crit_edge

dec_label_pc_11928.dec_label_pc_11930_crit_edge:  ; preds = %dec_label_pc_11928
  %v2_11930.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11930 = inttoptr i32 %v12_1195c to i32*
  store i32 %v2_11930.pre, i32* %v1_11930, align 4
  %v3_11930 = add i32 %v0_1193054, 36
  %v4_11930 = inttoptr i32 %v3_11930 to i32*
  %v5_11930 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11930, i32* %v4_11930, align 4
  %v6_11930 = add i32 %v0_1193054, 40
  store i32 %v6_11930, i32* %r3.global-to-local, align 4
  %v0_11934 = load i32, i32* %r2.global-to-local, align 4
  %v1_11934 = add i32 %v0_11934, -8
  store i32 %v1_11934, i32* %r2.global-to-local, align 4
  %v5_1193c = icmp slt i32 %v1_11934, 8
  br i1 %v5_1193c, label %dec_label_pc_11930.dec_label_pc_11968.loopexit_crit_edge, label %dec_label_pc_11940

dec_label_pc_11930.dec_label_pc_11968.loopexit_crit_edge: ; preds = %dec_label_pc_11928.dec_label_pc_11930_crit_edge, %dec_label_pc_11930.preheader
  %v1_11934.lcssa = phi i32 [ %v1_1193452, %dec_label_pc_11930.preheader ], [ %v1_11934, %dec_label_pc_11928.dec_label_pc_11930_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11968

dec_label_pc_11928.dec_label_pc_11968.loopexit_crit_edge: ; preds = %dec_label_pc_11928
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11968

dec_label_pc_11940.dec_label_pc_11968.loopexit_crit_edge: ; preds = %dec_label_pc_11940
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11968

dec_label_pc_11950.dec_label_pc_11968.loopexit_crit_edge: ; preds = %dec_label_pc_11950
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11968

dec_label_pc_11968:                               ; preds = %dec_label_pc_11924, %dec_label_pc_11930.dec_label_pc_11968.loopexit_crit_edge, %dec_label_pc_11928.dec_label_pc_11968.loopexit_crit_edge, %dec_label_pc_11940.dec_label_pc_11968.loopexit_crit_edge, %dec_label_pc_11950.dec_label_pc_11968.loopexit_crit_edge, %dec_label_pc_11900
  %v0_11970 = phi i32 [ %v0_11904, %dec_label_pc_11900 ], [ %v1_11954, %dec_label_pc_11950.dec_label_pc_11968.loopexit_crit_edge ], [ %v1_11944, %dec_label_pc_11940.dec_label_pc_11968.loopexit_crit_edge ], [ %v7_11960, %dec_label_pc_11928.dec_label_pc_11968.loopexit_crit_edge ], [ %v1_11934.lcssa, %dec_label_pc_11930.dec_label_pc_11968.loopexit_crit_edge ], [ %v0_11928.pr, %dec_label_pc_11924 ]
  %v2_11968 = icmp eq i32 %v0_11970, 0
  store i1 %v2_11968, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11968, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11968
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11968
  %v1_11970 = sub i32 7, %v0_11970
  store i32 %v1_11970, i32* %r2.global-to-local, align 4
  %v3_11974 = mul i32 %v1_11970, 4
  %v4_11974 = add i32 %v3_11974, ptrtoint (i32* @global_var_1197c.381 to i32)
  call void @__pseudo_branch(i32 %v4_11974)
  %v0_1197c = load i32, i32* %r1.global-to-local, align 4
  %v1_1197c = trunc i32 %v0_1197c to i8
  %v2_1197c = load i32, i32* %r3.global-to-local, align 4
  %v3_1197c = inttoptr i32 %v2_1197c to i8*
  store i8 %v1_1197c, i8* %v3_1197c, align 1
  %v4_1197c = load i32, i32* %r3.global-to-local, align 4
  %v5_1197c = add i32 %v4_1197c, 1
  store i32 %v5_1197c, i32* %r3.global-to-local, align 4
  %v0_11980 = load i32, i32* %r1.global-to-local, align 4
  %v1_11980 = trunc i32 %v0_11980 to i8
  %v3_11980 = inttoptr i32 %v5_1197c to i8*
  store i8 %v1_11980, i8* %v3_11980, align 1
  %v4_11980 = load i32, i32* %r3.global-to-local, align 4
  %v5_11980 = add i32 %v4_11980, 1
  store i32 %v5_11980, i32* %r3.global-to-local, align 4
  %v0_11984 = load i32, i32* %r1.global-to-local, align 4
  %v1_11984 = trunc i32 %v0_11984 to i8
  %v3_11984 = inttoptr i32 %v5_11980 to i8*
  store i8 %v1_11984, i8* %v3_11984, align 1
  %v4_11984 = load i32, i32* %r3.global-to-local, align 4
  %v5_11984 = add i32 %v4_11984, 1
  store i32 %v5_11984, i32* %r3.global-to-local, align 4
  %v0_11988 = load i32, i32* %r1.global-to-local, align 4
  %v1_11988 = trunc i32 %v0_11988 to i8
  %v3_11988 = inttoptr i32 %v5_11984 to i8*
  store i8 %v1_11988, i8* %v3_11988, align 1
  %v4_11988 = load i32, i32* %r3.global-to-local, align 4
  %v5_11988 = add i32 %v4_11988, 1
  store i32 %v5_11988, i32* %r3.global-to-local, align 4
  %v0_1198c = load i32, i32* %r1.global-to-local, align 4
  %v1_1198c = trunc i32 %v0_1198c to i8
  %v3_1198c = inttoptr i32 %v5_11988 to i8*
  store i8 %v1_1198c, i8* %v3_1198c, align 1
  %v4_1198c = load i32, i32* %r3.global-to-local, align 4
  %v5_1198c = add i32 %v4_1198c, 1
  store i32 %v5_1198c, i32* %r3.global-to-local, align 4
  %v0_11990 = load i32, i32* %r1.global-to-local, align 4
  %v1_11990 = trunc i32 %v0_11990 to i8
  %v3_11990 = inttoptr i32 %v5_1198c to i8*
  store i8 %v1_11990, i8* %v3_11990, align 1
  %v4_11990 = load i32, i32* %r3.global-to-local, align 4
  %v5_11990 = add i32 %v4_11990, 1
  store i32 %v5_11990, i32* %r3.global-to-local, align 4
  %v0_11994 = load i32, i32* %r1.global-to-local, align 4
  %v1_11994 = trunc i32 %v0_11994 to i8
  %v3_11994 = inttoptr i32 %v5_11990 to i8*
  store i8 %v1_11994, i8* %v3_11994, align 1
  %v4_11994 = load i32, i32* %r3.global-to-local, align 4
  %v5_11994 = add i32 %v4_11994, 1
  store i32 %v5_11994, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11930, { 1, 0 }
  uselistorder i32 %v12_1195c, { 1, 2, 0 }
  uselistorder i32 %v0_1193054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11928.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11918, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1190c, { 1, 0 }
  uselistorder i32 %v0_11904, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 5, 3, 4, 2, 0, 8, 7, 1, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11968, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11940, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_119a0(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_119a0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_119a0 = sub i32 %arg1, %tmp
  %v1_119a4 = add i32 %v2_119a0, -1
  store i32 %v1_119a4, i32* %r2.global-to-local, align 4
  %v2_119a84 = load i8, i8* %arg2, align 1
  %v5_119a86 = add i32 %tmp, 1
  store i32 %v5_119a86, i32* %r1.global-to-local, align 4
  %v2_119ac7 = icmp eq i8 %v2_119a84, 0
  store i1 %v2_119ac7, i1* %cpsr_z.global-to-local, align 1
  %v5_119b08 = inttoptr i32 %arg1 to i8*
  store i8 %v2_119a84, i8* %v5_119b08, align 1
  %v0_119b49 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_119b49, label %dec_label_pc_119b8, label %dec_label_pc_119a8.dec_label_pc_119a8_crit_edge

dec_label_pc_119a8.dec_label_pc_119a8_crit_edge:  ; preds = %dec_label_pc_119a0, %dec_label_pc_119a8.dec_label_pc_119a8_crit_edge
  %v0_119a8.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_119b0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_119a8 = inttoptr i32 %v0_119a8.pre to i8*
  %v2_119a8 = load i8, i8* %v1_119a8, align 1
  %v5_119a8 = add i32 %v0_119a8.pre, 1
  store i32 %v5_119a8, i32* %r1.global-to-local, align 4
  %v2_119ac = icmp eq i8 %v2_119a8, 0
  store i1 %v2_119ac, i1* %cpsr_z.global-to-local, align 1
  %v4_119b0 = add i32 %v5_119a8, %v3_119b0.pre
  %v5_119b0 = inttoptr i32 %v4_119b0 to i8*
  store i8 %v2_119a8, i8* %v5_119b0, align 1
  %v0_119b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_119b4, label %dec_label_pc_119b8, label %dec_label_pc_119a8.dec_label_pc_119a8_crit_edge

dec_label_pc_119b8:                               ; preds = %dec_label_pc_119a8.dec_label_pc_119a8_crit_edge, %dec_label_pc_119a0
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_119a8.dec_label_pc_119a8_crit_edge, { 1, 0 }
}

define i32 @function_119bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_119bc:
  %stack_var_-8 = alloca i32, align 4
  %v2_119c0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_119c0, i32* @r1, align 4
  %v0_119c8 = call i32 @function_13980()
  %v2_119cc = icmp eq i32 %v0_119c8, 0
  br i1 %v2_119cc, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_119bc
  %v3_119d4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_119bc, %bb
  %v5_119dc = phi i32 [ -1, %dec_label_pc_119bc ], [ %v3_119d4, %bb ]
  ret i32 %v5_119dc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_119e0(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_119e0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_119e0 = load i32, i32* @r4, align 4
  store i32 %v3_119e0, i32* %stack_var_-8, align 4
  %v5_119e4 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_119e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_119e4, -4095
  br i1 %tmp, label %dec_label_pc_11a04, label %dec_label_pc_119f4

dec_label_pc_119f4:                               ; preds = %dec_label_pc_119e0
  %v0_119f4 = call i32 @function_118a0()
  %v0_119f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_119f8 = sub i32 0, %v0_119f8
  %v2_119fc = inttoptr i32 %v0_119f4 to i32*
  store i32 %v1_119f8, i32* %v2_119fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a04

dec_label_pc_11a04:                               ; preds = %dec_label_pc_119e0, %dec_label_pc_119f4
  %v0_11a04 = phi i32 [ %v5_119e4, %dec_label_pc_119e0 ], [ -1, %dec_label_pc_119f4 ]
  %v2_11a08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11a08, i32* @r4, align 4
  ret i32 %v0_11a04

; uselistorder directives
  uselistorder i32 %v5_119e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a04, { 1, 0 }
}

define i32 @function_11a0c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11a0c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11a0c = load i32, i32* @r4, align 4
  store i32 %v3_11a0c, i32* %stack_var_-8, align 4
  %v5_11a10 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_11a10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11a10, -4095
  br i1 %tmp, label %dec_label_pc_11a30, label %dec_label_pc_11a20

dec_label_pc_11a20:                               ; preds = %dec_label_pc_11a0c
  %v0_11a20 = call i32 @function_118a0()
  %v0_11a24 = load i32, i32* %r4.global-to-local, align 4
  %v1_11a24 = sub i32 0, %v0_11a24
  %v2_11a28 = inttoptr i32 %v0_11a20 to i32*
  store i32 %v1_11a24, i32* %v2_11a28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a30

dec_label_pc_11a30:                               ; preds = %dec_label_pc_11a0c, %dec_label_pc_11a20
  %v0_11a30 = phi i32 [ %v5_11a10, %dec_label_pc_11a0c ], [ -1, %dec_label_pc_11a20 ]
  %v2_11a34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11a34, i32* @r4, align 4
  ret i32 %v0_11a30

; uselistorder directives
  uselistorder i32 %v5_11a10, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a30, { 1, 0 }
}

define i32 @function_11a38(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11a38:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11a38 = load i32, i32* @r4, align 4
  store i32 %v3_11a38, i32* %stack_var_-8, align 4
  %v5_11a3c = inttoptr i32 %arg3 to i32*
  %v6_11a3c = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_11a3c)
  store i32 %v6_11a3c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_11a3c, -4095
  br i1 %tmp, label %dec_label_pc_11a5c, label %dec_label_pc_11a4c

dec_label_pc_11a4c:                               ; preds = %dec_label_pc_11a38
  %v0_11a4c = call i32 @function_118a0()
  %v0_11a50 = load i32, i32* %r4.global-to-local, align 4
  %v1_11a50 = sub i32 0, %v0_11a50
  %v2_11a54 = inttoptr i32 %v0_11a4c to i32*
  store i32 %v1_11a50, i32* %v2_11a54, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a38, %dec_label_pc_11a4c
  %v0_11a5c = phi i32 [ %v6_11a3c, %dec_label_pc_11a38 ], [ -1, %dec_label_pc_11a4c ]
  %v2_11a60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11a60, i32* @r4, align 4
  ret i32 %v0_11a5c

; uselistorder directives
  uselistorder i32 %v6_11a3c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a5c, { 1, 0 }
}

define i32 @function_11a64(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11a64:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11a64 = load i32, i32* @r4, align 4
  store i32 %v3_11a64, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11a6c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_11a6c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11a6c, -4095
  br i1 %tmp, label %dec_label_pc_11a8c, label %dec_label_pc_11a7c

dec_label_pc_11a7c:                               ; preds = %dec_label_pc_11a64
  %v0_11a7c = call i32 @function_118a0()
  %v0_11a80 = load i32, i32* %r4.global-to-local, align 4
  %v1_11a80 = sub i32 0, %v0_11a80
  %v2_11a84 = inttoptr i32 %v0_11a7c to i32*
  store i32 %v1_11a80, i32* %v2_11a84, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a8c

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a64, %dec_label_pc_11a7c
  %v0_11a8c = phi i32 [ %v5_11a6c, %dec_label_pc_11a64 ], [ -1, %dec_label_pc_11a7c ]
  %v2_11a90 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11a90, i32* @r4, align 4
  ret i32 %v0_11a8c

; uselistorder directives
  uselistorder i32 %v5_11a6c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a8c, { 1, 0 }
}

define i32 @function_11a94(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a94:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11a94 = load i32, i32* @r4, align 4
  store i32 %v3_11a94, i32* %stack_var_-8, align 4
  %v2_11a98 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_11a98, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11a98, -4095
  br i1 %tmp, label %dec_label_pc_11ab8, label %dec_label_pc_11aa8

dec_label_pc_11aa8:                               ; preds = %dec_label_pc_11a94
  %v0_11aa8 = call i32 @function_118a0()
  %v0_11aac = load i32, i32* %r4.global-to-local, align 4
  %v1_11aac = sub i32 0, %v0_11aac
  %v2_11ab0 = inttoptr i32 %v0_11aa8 to i32*
  store i32 %v1_11aac, i32* %v2_11ab0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ab8

dec_label_pc_11ab8:                               ; preds = %dec_label_pc_11a94, %dec_label_pc_11aa8
  %v0_11ab8 = phi i32 [ %v2_11a98, %dec_label_pc_11a94 ], [ -1, %dec_label_pc_11aa8 ]
  %v2_11abc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11abc, i32* %r4.global-to-local, align 4
  ret i32 %v0_11ab8

; uselistorder directives
  uselistorder i32 %v2_11a98, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ab8, { 1, 0 }
}

define i32 @function_11ac0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11ac0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11ac0 = load i32, i32* @r4, align 4
  store i32 %v3_11ac0, i32* %stack_var_-8, align 4
  %v5_11ac4 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_11ac4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11ac4, -4095
  br i1 %tmp, label %dec_label_pc_11ae4, label %dec_label_pc_11ad4

dec_label_pc_11ad4:                               ; preds = %dec_label_pc_11ac0
  %v0_11ad4 = call i32 @function_118a0()
  %v0_11ad8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ad8 = sub i32 0, %v0_11ad8
  %v2_11adc = inttoptr i32 %v0_11ad4 to i32*
  store i32 %v1_11ad8, i32* %v2_11adc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ae4

dec_label_pc_11ae4:                               ; preds = %dec_label_pc_11ac0, %dec_label_pc_11ad4
  %v0_11ae4 = phi i32 [ %v5_11ac4, %dec_label_pc_11ac0 ], [ -1, %dec_label_pc_11ad4 ]
  %v2_11ae8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11ae8, i32* @r4, align 4
  ret i32 %v0_11ae4

; uselistorder directives
  uselistorder i32 %v5_11ac4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ae4, { 1, 0 }
}

define i32 @function_11aec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11aec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11aec = load i32, i32* @r4, align 4
  store i32 %v3_11aec, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11af8 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_11af8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11af8, -4095
  br i1 %tmp, label %dec_label_pc_11b18, label %dec_label_pc_11b08

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11aec
  %v0_11b08 = call i32 @function_118a0()
  %v0_11b0c = load i32, i32* %r4.global-to-local, align 4
  %v1_11b0c = sub i32 0, %v0_11b0c
  %v2_11b10 = inttoptr i32 %v0_11b08 to i32*
  store i32 %v1_11b0c, i32* %v2_11b10, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b18

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11aec, %dec_label_pc_11b08
  %v0_11b18 = phi i32 [ %v5_11af8, %dec_label_pc_11aec ], [ -1, %dec_label_pc_11b08 ]
  %v2_11b1c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11b1c, i32* @r4, align 4
  ret i32 %v0_11b18

; uselistorder directives
  uselistorder i32 %v5_11af8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b18, { 1, 0 }
}

define i32 @function_11b20(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11b20:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b20 = load i32, i32* @r4, align 4
  store i32 %v3_11b20, i32* %stack_var_-8, align 4
  %v5_11b24 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_11b24, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11b24, -4095
  br i1 %tmp, label %dec_label_pc_11b44, label %dec_label_pc_11b34

dec_label_pc_11b34:                               ; preds = %dec_label_pc_11b20
  %v0_11b34 = call i32 @function_118a0()
  %v0_11b38 = load i32, i32* %r4.global-to-local, align 4
  %v1_11b38 = sub i32 0, %v0_11b38
  %v2_11b3c = inttoptr i32 %v0_11b34 to i32*
  store i32 %v1_11b38, i32* %v2_11b3c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b44

dec_label_pc_11b44:                               ; preds = %dec_label_pc_11b20, %dec_label_pc_11b34
  %v0_11b44 = phi i32 [ %v5_11b24, %dec_label_pc_11b20 ], [ -1, %dec_label_pc_11b34 ]
  %v2_11b48 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b48, i32* @r4, align 4
  ret i32 %v0_11b44

; uselistorder directives
  uselistorder i32 %v5_11b24, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b44, { 1, 0 }
}

define i32 @function_11b4c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11b4c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11b58 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_11b58, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11b58, -4095
  br i1 %tmp, label %dec_label_pc_11b78, label %dec_label_pc_11b68

dec_label_pc_11b68:                               ; preds = %dec_label_pc_11b4c
  %v0_11b68 = call i32 @function_118a0()
  %v0_11b6c = load i32, i32* %r4.global-to-local, align 4
  %v1_11b6c = sub i32 0, %v0_11b6c
  %v2_11b70 = inttoptr i32 %v0_11b68 to i32*
  store i32 %v1_11b6c, i32* %v2_11b70, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b78

dec_label_pc_11b78:                               ; preds = %dec_label_pc_11b4c, %dec_label_pc_11b68
  %v0_11b78 = phi i32 [ %v5_11b58, %dec_label_pc_11b4c ], [ -1, %dec_label_pc_11b68 ]
  ret i32 %v0_11b78

; uselistorder directives
  uselistorder i32 %v5_11b58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b78, { 1, 0 }
}

define i32 @function_11b80(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11b80:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b80 = load i32, i32* @r4, align 4
  store i32 %v3_11b80, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11b88 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_11b88, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11b88, -4095
  br i1 %tmp, label %dec_label_pc_11ba8, label %dec_label_pc_11b98

dec_label_pc_11b98:                               ; preds = %dec_label_pc_11b80
  %v0_11b98 = call i32 @function_118a0()
  %v0_11b9c = load i32, i32* %r4.global-to-local, align 4
  %v1_11b9c = sub i32 0, %v0_11b9c
  %v2_11ba0 = inttoptr i32 %v0_11b98 to i32*
  store i32 %v1_11b9c, i32* %v2_11ba0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %dec_label_pc_11b80, %dec_label_pc_11b98
  %v0_11ba8 = phi i32 [ %v5_11b88, %dec_label_pc_11b80 ], [ -1, %dec_label_pc_11b98 ]
  %v2_11bac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11bac, i32* @r4, align 4
  ret i32 %v0_11ba8

; uselistorder directives
  uselistorder i32 %v5_11b88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ba8, { 1, 0 }
}

define i32 @function_11bb0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11bb0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11bb0 = load i32, i32* @r4, align 4
  store i32 %v3_11bb0, i32* %stack_var_-8, align 4
  %v3_11bb4 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_11bb4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_11bb4, -4095
  br i1 %tmp, label %dec_label_pc_11bd4, label %dec_label_pc_11bc4

dec_label_pc_11bc4:                               ; preds = %dec_label_pc_11bb0
  %v0_11bc4 = call i32 @function_118a0()
  %v0_11bc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11bc8 = sub i32 0, %v0_11bc8
  %v2_11bcc = inttoptr i32 %v0_11bc4 to i32*
  store i32 %v1_11bc8, i32* %v2_11bcc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11bd4

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_11bb0, %dec_label_pc_11bc4
  %v0_11bd4 = phi i32 [ %v3_11bb4, %dec_label_pc_11bb0 ], [ -1, %dec_label_pc_11bc4 ]
  %v2_11bd8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11bd8, i32* @r4, align 4
  ret i32 %v0_11bd4

; uselistorder directives
  uselistorder i32 %v3_11bb4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11bd4, { 1, 0 }
}

define i32 @function_11bdc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11bdc:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_11bf8, label %dec_label_pc_11be8

dec_label_pc_11be8:                               ; preds = %dec_label_pc_11bdc
  %v8_11bec = icmp sgt i32 %arg1, 64
  br i1 %v8_11bec, label %dec_label_pc_11bf8, label %dec_label_pc_11bf0

dec_label_pc_11bf0:                               ; preds = %dec_label_pc_11be8
  %v0_11bf4 = call i32 @function_11d00()
  br label %dec_label_pc_11bf8

dec_label_pc_11bf8:                               ; preds = %dec_label_pc_11be8, %dec_label_pc_11bdc, %dec_label_pc_11bf0
  %v0_11bf8 = call i32 @function_118a0()
  %v2_11c00 = inttoptr i32 %v0_11bf8 to i32*
  store i32 22, i32* %v2_11c00, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11bf8, { 2, 0, 1 }
}

define i32 @function_11c0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11c0c:
  store i32 128, i32* @r2, align 4
  %v0_11c18 = load i32, i32* @r0, align 4
  %v2_11c18 = inttoptr i32 %v0_11c18 to i8*
  %v3_11c18 = call i32 @function_11900(i8* %v2_11c18, i32 0)
  ret i32 0
}

define i32 @function_11c24(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c24:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11c24 = load i32, i32* @r4, align 4
  store i32 %v3_11c24, i32* %stack_var_-12, align 4
  %v6_11c24 = load i32, i32* @r5, align 4
  %v10_11c24 = ptrtoint i32* %stack_var_-12 to i32
  %v7_11c28 = icmp eq i32 %arg2, -1
  %v0_11c34.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_11c28, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11c24
  br label %dec_label_pc_11c4c

bb:                                               ; preds = %dec_label_pc_11c24
  %v2_11c30 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_11c34.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_11c34.pre, 1
  br i1 %tmp19, label %dec_label_pc_11c4c, label %dec_label_pc_11c3c

dec_label_pc_11c3c:                               ; preds = %bb
  %v7_11c40 = icmp sgt i32 %v0_11c34.pre, 64
  br i1 %v7_11c40, label %dec_label_pc_11c4c, label %bb20

bb20:                                             ; preds = %dec_label_pc_11c3c
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_11c7024 = add i32 %v10_11c24, 124
  store i32 %v5_11c7024, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11c60

dec_label_pc_11c4c:                               ; preds = %.thread, %dec_label_pc_11c3c, %bb
  %v0_11c4c = call i32 @function_118a0()
  store i32 %v0_11c4c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11c58 = inttoptr i32 %v0_11c4c to i32*
  store i32 22, i32* %v2_11c58, align 4
  %v0_11ccc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11ccc

dec_label_pc_11c60:                               ; preds = %bb20, %dec_label_pc_11c60
  %v5_11c7025 = phi i32 [ %v5_11c7024, %bb20 ], [ %v5_11c70, %dec_label_pc_11c60 ]
  %v2_11c64 = add i32 %v5_11c7025, -136
  %v3_11c64 = inttoptr i32 %v2_11c64 to i32*
  store i32 0, i32* %v3_11c64, align 4
  %v0_11c68.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_11c68 = add i32 %v0_11c68.pre, -1
  store i32 %v1_11c68, i32* %r0.global-to-local, align 4
  %v6_11c68 = icmp slt i32 %v1_11c68, 0
  %v4_11c70 = mul i32 %v1_11c68, 4
  %v5_11c70 = add i32 %v4_11c70, %v10_11c24
  store i32 %v5_11c70, i32* %r2.global-to-local, align 4
  br i1 %v6_11c68, label %dec_label_pc_11c78, label %dec_label_pc_11c60

dec_label_pc_11c78:                               ; preds = %dec_label_pc_11c60
  %v2_11c78 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_11c78, i32* @r5, align 4
  %v2_11c7c = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_11c7c, i32* @r0, align 4
  %v0_11c80 = load i32, i32* @r4, align 4
  store i32 %v0_11c80, i32* @r1, align 4
  %v0_11c84 = call i32 @function_11d00()
  store i32 %v0_11c84, i32* %r0.global-to-local, align 4
  %v1_11c88 = icmp slt i32 %v0_11c84, 0
  br i1 %v1_11c88, label %dec_label_pc_11cc8, label %dec_label_pc_11c90

dec_label_pc_11c90:                               ; preds = %dec_label_pc_11c78
  %v0_11c90 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c3f4.383 to i32), i32* %r0.global-to-local, align 4
  %v2_11c98 = call i32 @function_11cdc(i32 ptrtoint (i32* @global_var_1c3f4.383 to i32), i32 %v0_11c90)
  store i32 %v2_11c30, i32* %r2.global-to-local, align 4
  %v0_11cb0 = load i32, i32* @r4, align 4
  store i32 %v0_11cb0, i32* %r0.global-to-local, align 4
  %v4_11cb8 = call i32 @function_12bc8(i32 %v0_11cb0, i32* nonnull %stack_var_-152, i32 %v2_11c30)
  store i32 %v4_11cb8, i32* %r0.global-to-local, align 4
  %v1_11cbc = icmp slt i32 %v4_11cb8, 0
  br i1 %v1_11cbc, label %dec_label_pc_11cc8, label %bb23

bb23:                                             ; preds = %dec_label_pc_11c90
  %v5_11cc0 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_11cc0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11ccc

dec_label_pc_11cc8:                               ; preds = %dec_label_pc_11c90, %dec_label_pc_11c78
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11ccc

dec_label_pc_11ccc:                               ; preds = %bb23, %dec_label_pc_11c4c, %dec_label_pc_11cc8
  %v0_11ccc = phi i32 [ %v5_11cc0, %bb23 ], [ %v0_11ccc.pre, %dec_label_pc_11c4c ], [ -1, %dec_label_pc_11cc8 ]
  store i32 %v0_11ccc, i32* %r0.global-to-local, align 4
  %v2_11cd4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11cd4, i32* @r4, align 4
  store i32 %v6_11c24, i32* @r5, align 4
  ret i32 %v0_11ccc

; uselistorder directives
  uselistorder i32 %v0_11ccc, { 1, 0 }
  uselistorder i32 %v5_11c70, { 1, 0 }
  uselistorder i32 %v1_11c68, { 0, 2, 1 }
  uselistorder i32 %v2_11c30, { 1, 0 }
  uselistorder i32 %v0_11c34.pre, { 1, 0, 2 }
  uselistorder i32 %v10_11c24, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11ccc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11c60, { 1, 0 }
  uselistorder label %dec_label_pc_11c4c, { 1, 2, 0 }
}

define i32 @function_11cdc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11cdc:
  %v1_11cdc = add i32 %arg2, -1
  %v3_11ce0 = udiv i32 %v1_11cdc, 32
  %v4_11ce4 = mul nuw nsw i32 %v3_11ce0, 4
  %v5_11ce4 = add i32 %v4_11ce4, %arg1
  %v6_11ce4 = inttoptr i32 %v5_11ce4 to i32*
  %v7_11ce4 = load i32, i32* %v6_11ce4, align 4
  %v1_11ce8 = urem i32 %v1_11cdc, 32
  %v7_11cf0 = shl i32 1, %v1_11ce8
  %v8_11cf0 = and i32 %v7_11ce4, %v7_11cf0
  %v10_11cf0 = icmp ne i32 %v8_11cf0, 0
  %. = zext i1 %v10_11cf0 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11cdc, { 1, 0 }
}

define i32 @function_11d00() local_unnamed_addr {
dec_label_pc_11d00:
  %v0_11d00 = load i32, i32* @r1, align 4
  %v1_11d00 = add i32 %v0_11d00, -1
  %v3_11d04 = udiv i32 %v1_11d00, 32
  store i32 %v3_11d04, i32* @ip, align 4
  %v0_11d08 = load i32, i32* @r0, align 4
  %v4_11d08 = mul nuw nsw i32 %v3_11d04, 4
  %v5_11d08 = add i32 %v0_11d08, %v4_11d08
  %v6_11d08 = inttoptr i32 %v5_11d08 to i32*
  %v7_11d08 = load i32, i32* %v6_11d08, align 4
  %v1_11d0c = urem i32 %v1_11d00, 32
  %v7_11d14 = shl i32 1, %v1_11d0c
  %v8_11d14 = or i32 %v7_11d08, %v7_11d14
  store i32 %v8_11d14, i32* %v6_11d08, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_11d04, { 1, 0 }
  uselistorder i32 %v1_11d00, { 1, 0 }
}

define i32 @function_11d24(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11d24:
  %v1_11d24 = add i32 %arg2, -1
  %v3_11d28 = udiv i32 %v1_11d24, 32
  %v4_11d2c = mul nuw nsw i32 %v3_11d28, 4
  %v5_11d2c = add i32 %v4_11d2c, %arg1
  %v6_11d2c = inttoptr i32 %v5_11d2c to i32*
  %v7_11d2c = load i32, i32* %v6_11d2c, align 4
  %v1_11d30 = urem i32 %v1_11d24, 32
  %tmp = shl i32 -1, %v1_11d30
  %v8_11d38 = add i32 %tmp, -1
  %v9_11d38 = and i32 %v7_11d2c, %v8_11d38
  store i32 %v9_11d38, i32* %v6_11d2c, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11d24, { 1, 0 }
}

define i32 @function_11d48(i32 %arg1) local_unnamed_addr {
dec_label_pc_11d48:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11d48 = load i32, i32* @r4, align 4
  %v6_11d48 = load i32, i32* @r5, align 4
  %v9_11d48 = load i32, i32* @r6, align 4
  %v0_11d4c = load i32, i32* %r0.global-to-local, align 4
  %v2_11d4c = icmp eq i32 %v0_11d4c, 0
  %v2_11d50 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_11d4c, label %bb, label %dec_label_pc_11d5c

bb:                                               ; preds = %dec_label_pc_11d48
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d64

dec_label_pc_11d5c:                               ; preds = %dec_label_pc_11d48
  %tmp = icmp ugt i32 %v0_11d4c, -8
  br i1 %tmp, label %dec_label_pc_11e68, label %dec_label_pc_11d64

dec_label_pc_11d64:                               ; preds = %bb, %dec_label_pc_11d5c
  %v0_11d64 = phi i32 [ %v0_11d4c, %dec_label_pc_11d5c ], [ 1, %bb ]
  %v1_11d64 = add i32 %v0_11d64, 4
  store i32 %v1_11d64, i32* %stack_var_-20, align 4
  store i32 %v2_11d50, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c28c.385 to i32), i32* %r0.global-to-local, align 4
  %v1_11d7c = call i32 @function_128dc()
  store i32 ptrtoint (i32** @global_var_1c0d0.389 to i32), i32* %r0.global-to-local, align 4
  %v3_11d88 = call i32 @function_120fc(i32* bitcast (i32** @global_var_1c0d0.389 to i32*), i32 %v2_11d50)
  store i32 %v3_11d88, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c28c.385 to i32), i32* %r0.global-to-local, align 4
  store i32 73120, i32* @lr, align 4
  %v1_11d9c = call i32 @function_128dc()
  store i32 %v1_11d9c, i32* %r0.global-to-local, align 4
  %v2_11da0 = icmp eq i32 %v3_11d88, 0
  br i1 %v2_11da0, label %dec_label_pc_11da8, label %dec_label_pc_11e58

dec_label_pc_11da8:                               ; preds = %dec_label_pc_11d64
  %v2_11dac = load i32, i32* @global_var_1c2b4.392, align 4
  store i32 %v2_11dac, i32* @r4, align 4
  %v2_11db0 = load i32, i32* %stack_var_-20, align 4
  %v3_11db4 = icmp ult i32 %v2_11db0, %v2_11dac
  br i1 %v3_11db4, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_11da8
  %v3_11db8 = add i32 %v2_11dac, -1
  %v2_11dbc = add i32 %v3_11db8, %v2_11db0
  %v2_11dc0 = sub i32 0, %v2_11dac
  %v3_11dc4 = and i32 %v2_11dbc, %v2_11dc0
  store i32 %v3_11dc4, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11da8, %bb14
  store i32 ptrtoint (i32* @global_var_1c474.394 to i32), i32* %r0.global-to-local, align 4
  %v1_11dd0 = call i32 @function_128dc()
  %v0_11dd4 = load i32, i32* @r4, align 4
  store i32 %v0_11dd4, i32* %r0.global-to-local, align 4
  %v1_11dd8 = call i32 @function_13090(i32 %v0_11dd4)
  store i32 %v1_11dd8, i32* %r0.global-to-local, align 4
  %v7_11ddc = icmp eq i32 %v1_11dd8, -1
  br i1 %v7_11ddc, label %bb15, label %dec_label_pc_11de8

bb15:                                             ; preds = %.thread3
  store i32 %v1_11dd8, i32* @r5, align 4
  br label %dec_label_pc_11dfc

dec_label_pc_11de8:                               ; preds = %.thread3
  %v1_11de8 = add i32 %v1_11dd8, 3
  %v1_11dec = and i32 %v1_11de8, -4
  store i32 %v1_11dec, i32* @r5, align 4
  %v9_11df0 = icmp eq i32 %v1_11dec, %v1_11dd8
  br i1 %v9_11df0, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_11de8
  %v3_11df4 = sub i32 %v1_11dec, %v1_11dd8
  store i32 %v3_11df4, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_11de8, %bb16
  %v1_11df8 = xor i1 %v9_11df0, true
  call void @__pseudo_cond_branch(i1 %v1_11df8, i32 ptrtoint (i32* @global_var_13090.395 to i32))
  br label %dec_label_pc_11dfc

dec_label_pc_11dfc:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1c474.394 to i32), i32* %r0.global-to-local, align 4
  store i32 73228, i32* @lr, align 4
  %v1_11e08 = call i32 @function_128dc()
  store i32 %v1_11e08, i32* %r0.global-to-local, align 4
  %v0_11e0c = load i32, i32* @r5, align 4
  %v7_11e0c = icmp eq i32 %v0_11e0c, -1
  br i1 %v7_11e0c, label %dec_label_pc_11e68, label %dec_label_pc_11e14

dec_label_pc_11e14:                               ; preds = %dec_label_pc_11dfc
  store i32 ptrtoint (i32* @global_var_1c28c.385 to i32), i32* %r0.global-to-local, align 4
  %v1_11e20 = call i32 @function_128dc()
  %v0_11e24 = load i32, i32* @r4, align 4
  %v0_11e28 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1c0d0.389 to i32), i32* %r0.global-to-local, align 4
  %v4_11e30 = call i32 @function_12250(i32* bitcast (i32** @global_var_1c0d0.389 to i32*), i32 %v0_11e28, i32 %v0_11e24)
  store i32 ptrtoint (i32** @global_var_1c0d0.389 to i32), i32* %r0.global-to-local, align 4
  %v3_11e3c = call i32 @function_120fc(i32* bitcast (i32** @global_var_1c0d0.389 to i32*), i32 %v2_11d50)
  store i32 %v3_11e3c, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c28c.385 to i32), i32* %r0.global-to-local, align 4
  store i32 73296, i32* @lr, align 4
  %v1_11e4c = call i32 @function_128dc()
  store i32 %v1_11e4c, i32* %r0.global-to-local, align 4
  %v2_11e50 = icmp eq i32 %v3_11e3c, 0
  br i1 %v2_11e50, label %dec_label_pc_11e68, label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %dec_label_pc_11d64, %dec_label_pc_11e14
  %v1_11e5c = phi i32 [ %v3_11d88, %dec_label_pc_11d64 ], [ %v3_11e3c, %dec_label_pc_11e14 ]
  %v2_11e58 = load i32, i32* %stack_var_-20, align 4
  %v2_11e5c = inttoptr i32 %v1_11e5c to i32*
  store i32 %v2_11e58, i32* %v2_11e5c, align 4
  %v3_11e5c = load i32, i32* %r4.global-to-local, align 4
  %v4_11e5c = add i32 %v3_11e5c, 4
  store i32 %v4_11e5c, i32* %r4.global-to-local, align 4
  %v2_11e60 = icmp eq i32 %v4_11e5c, 0
  br i1 %v2_11e60, label %dec_label_pc_11e68, label %dec_label_pc_11e78

dec_label_pc_11e68:                               ; preds = %dec_label_pc_11e58, %dec_label_pc_11e14, %dec_label_pc_11dfc, %dec_label_pc_11d5c
  %v0_11e68 = call i32 @function_118a0()
  store i32 %v0_11e68, i32* %r0.global-to-local, align 4
  %v2_11e70 = inttoptr i32 %v0_11e68 to i32*
  store i32 12, i32* %v2_11e70, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e78

dec_label_pc_11e78:                               ; preds = %dec_label_pc_11e58, %dec_label_pc_11e68
  %v0_11e78 = phi i32 [ %v4_11e5c, %dec_label_pc_11e58 ], [ 0, %dec_label_pc_11e68 ]
  store i32 %v0_11e78, i32* %r0.global-to-local, align 4
  store i32 %v3_11d48, i32* @r4, align 4
  store i32 %v6_11d48, i32* @r5, align 4
  store i32 %v9_11d48, i32* @r6, align 4
  ret i32 %v0_11e78

; uselistorder directives
  uselistorder i32 %v0_11e78, { 1, 0 }
  uselistorder i32 %v3_11e3c, { 1, 0, 2 }
  uselistorder i32 %v1_11dec, { 1, 0, 2 }
  uselistorder i32 %v1_11dd8, { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 %v3_11d88, { 1, 0, 2 }
  uselistorder i32 %v0_11d4c, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 4, 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 18, 19, 2, 6, 7, 8, 9, 0, 11, 10, 5, 13, 12, 1, 14, 15, 16, 17, 3, 4 }
  uselistorder label %dec_label_pc_11e78, { 1, 0 }
  uselistorder label %dec_label_pc_11e58, { 1, 0 }
  uselistorder label %dec_label_pc_11dfc, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11d64, { 1, 0 }
}

define i32 @function_11e9c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11e9c:
  %stack_var_-12 = alloca i32, align 4
  %v3_11e9c = load i32, i32* @r4, align 4
  store i32 %v3_11e9c, i32* %stack_var_-12, align 4
  %v6_11e9c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_11ea4 = mul i32 %arg2, %arg1
  store i32 %v2_11ea4, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11ea8 = icmp eq i32 %arg1, 0
  store i32 %v2_11ea4, i32* @r0, align 4
  br i1 %v2_11ea8, label %dec_label_pc_11ed4, label %dec_label_pc_11eb4

dec_label_pc_11eb4:                               ; preds = %dec_label_pc_11e9c
  %v0_11eb4 = call i32 @function_10f44()
  %v0_11eb8 = load i32, i32* @r5, align 4
  %v9_11eb8 = icmp eq i32 %v0_11eb8, %v0_11eb4
  store i32 0, i32* @r5, align 4
  br i1 %v9_11eb8, label %dec_label_pc_11eb4.dec_label_pc_11ed4_crit_edge, label %dec_label_pc_11ec4

dec_label_pc_11eb4.dec_label_pc_11ed4_crit_edge:  ; preds = %dec_label_pc_11eb4
  %v0_11ed4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11ed4

dec_label_pc_11ec4:                               ; preds = %dec_label_pc_11eb4
  %v0_11ec4 = call i32 @function_118a0()
  %v2_11ecc = inttoptr i32 %v0_11ec4 to i32*
  store i32 12, i32* %v2_11ecc, align 4
  br label %dec_label_pc_11eec

dec_label_pc_11ed4:                               ; preds = %dec_label_pc_11eb4.dec_label_pc_11ed4_crit_edge, %dec_label_pc_11e9c
  %v0_11ed4 = phi i32 [ %v0_11ed4.pre, %dec_label_pc_11eb4.dec_label_pc_11ed4_crit_edge ], [ %v2_11ea4, %dec_label_pc_11e9c ]
  %v1_11ed8 = call i32 @function_11d48(i32 %v0_11ed4)
  store i32 %v1_11ed8, i32* @r5, align 4
  store i32 73452, i32* @lr, align 4
  %v1_11ee8 = icmp ne i32 %v1_11ed8, 0
  call void @__pseudo_cond_branch(i1 %v1_11ee8, i32 ptrtoint (i32* @global_var_11900.396 to i32))
  br label %dec_label_pc_11eec

dec_label_pc_11eec:                               ; preds = %dec_label_pc_11ec4, %dec_label_pc_11ed4
  %v0_11eec = load i32, i32* @r5, align 4
  %v2_11ef0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11ef0, i32* @r4, align 4
  store i32 %v6_11e9c, i32* @r5, align 4
  ret i32 %v0_11eec

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11eec, { 1, 0 }
}

define i32 @function_11ef4() local_unnamed_addr {
dec_label_pc_11ef4:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_11ef4 = load i32, i32* @r0, align 4
  %v2_11ef4 = icmp eq i32 %v0_11ef4, 0
  %v3_11ef8 = load i32, i32* @r4, align 4
  store i32 %v3_11ef8, i32* %stack_var_-24, align 4
  %v6_11ef8 = load i32, i32* @r5, align 4
  %v9_11ef8 = load i32, i32* @r6, align 4
  %v15_11ef8 = load i32, i32* @r8, align 4
  br i1 %v2_11ef4, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_11ef4
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_11ef4
  %v1_11f00 = add i32 %v0_11ef4, -4
  %v2_11f00 = inttoptr i32 %v1_11f00 to i32*
  %v3_11f00 = load i32, i32* %v2_11f00, align 4
  store i32 %v3_11f00, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1c0d0.389 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_11f00, i32* @r4, align 4
  %v1_11f18 = call i32 @function_128dc()
  %v0_11f1c = load i32, i32* @r4, align 4
  %v0_11f20 = load i32, i32* @r5, align 4
  %v4_11f28 = call i32 @function_12250(i32* bitcast (i32** @global_var_1c0d0.389 to i32*), i32 %v0_11f1c, i32 %v0_11f20)
  %v1_11f30 = inttoptr i32 %v4_11f28 to i32*
  %v2_11f30 = load i32, i32* %v1_11f30, align 4
  store i32 %v2_11f30, i32* %r6.global-to-local, align 4
  %v2_11f34 = load i32, i32* @global_var_1c2b4.392, align 4
  %v4_11f38 = mul i32 %v2_11f34, 8
  %v6_11f38 = icmp ult i32 %v2_11f30, %v4_11f38
  store i32 %v4_11f28, i32* @r4, align 4
  br i1 %v6_11f38, label %dec_label_pc_11f78, label %dec_label_pc_11f44

dec_label_pc_11f44:                               ; preds = %bb11
  %v1_11f4c = call i32 @function_128dc()
  %v1_11f54 = call i32 @function_13090(i32 0)
  %v0_11f58 = load i32, i32* @r4, align 4
  %v1_11f58 = add i32 %v0_11f58, 12
  store i32 %v1_11f58, i32* @r5, align 4
  %v9_11f5c = icmp eq i32 %v1_11f58, %v1_11f54
  br i1 %v9_11f5c, label %dec_label_pc_11f80, label %dec_label_pc_11f64

dec_label_pc_11f64:                               ; preds = %dec_label_pc_11f44
  %v1_11f70 = call i32 @function_128dc()
  br label %dec_label_pc_11f78

dec_label_pc_11f78:                               ; preds = %bb11, %dec_label_pc_11f64, %bb14
  %v2_11f78 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11f78, i32* @r4, align 4
  store i32 %v6_11ef8, i32* @r5, align 4
  store i32 %v9_11ef8, i32* %r6.global-to-local, align 4
  store i32 %v15_11ef8, i32* %r8.global-to-local, align 4
  %v0_11f7c = call i32 @function_128dc()
  %v0_11f80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11f80

dec_label_pc_11f80:                               ; preds = %dec_label_pc_11f44, %dec_label_pc_11f78
  %v1_11f88 = phi i32 [ %v0_11f58, %dec_label_pc_11f44 ], [ %v0_11f80.pre, %dec_label_pc_11f78 ]
  %v1_11f80 = add i32 %v1_11f88, 4
  %v2_11f80 = inttoptr i32 %v1_11f80 to i32*
  %v3_11f80 = load i32, i32* %v2_11f80, align 4
  %v2_11f84 = icmp eq i32 %v3_11f80, 0
  br i1 %v2_11f84, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_11f80
  %v2_11f88 = add i32 %v1_11f88, 8
  %v3_11f88 = inttoptr i32 %v2_11f88 to i32*
  %v4_11f88 = load i32, i32* %v3_11f88, align 4
  %v3_11f8c = add i32 %v3_11f80, 8
  %v4_11f8c = inttoptr i32 %v3_11f8c to i32*
  store i32 %v4_11f88, i32* %v4_11f8c, align 4
  %v0_11f90.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11f80, %bb12
  %v0_11f90 = phi i32 [ %v1_11f88, %dec_label_pc_11f80 ], [ %v0_11f90.pre, %bb12 ]
  %v1_11f90 = add i32 %v0_11f90, 8
  %v2_11f90 = inttoptr i32 %v1_11f90 to i32*
  %v3_11f90 = load i32, i32* %v2_11f90, align 4
  %v1_11f94 = add i32 %v0_11f90, 4
  %v2_11f94 = inttoptr i32 %v1_11f94 to i32*
  %v3_11f94 = load i32, i32* %v2_11f94, align 4
  %v2_11f98 = icmp eq i32 %v3_11f90, 0
  br i1 %v2_11f98, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_11f9c = add i32 %v3_11f90, 4
  %v4_11f9c = inttoptr i32 %v3_11f9c to i32*
  store i32 %v3_11f94, i32* %v4_11f9c, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_11fa0 = load i32, i32* %r8.global-to-local, align 4
  %v3_11fa0 = inttoptr i32 %v2_11fa0 to i32*
  store i32 %v3_11f94, i32* %v3_11fa0, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_11fb0 = call i32 @function_128dc()
  %v0_11fb4 = load i32, i32* %r6.global-to-local, align 4
  %v1_11fb4 = load i32, i32* @r4, align 4
  %v0_11fbc = load i32, i32* @r5, align 4
  %v2_11fb4 = sub i32 12, %v0_11fb4
  %v1_11fb8 = add i32 %v2_11fb4, %v1_11fb4
  %v2_11fbc = sub i32 %v1_11fb8, %v0_11fbc
  %v1_11fc0 = call i32 @function_13090(i32 %v2_11fbc)
  br label %dec_label_pc_11f78

; uselistorder directives
  uselistorder i32 %v0_11f90, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_13090, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_11f80, { 1, 0 }
  uselistorder label %dec_label_pc_11f78, { 2, 1, 0 }
}

define i32 @function_11fe4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11fe4:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11fe4 = load i32, i32* @r4, align 4
  store i32 %v3_11fe4, i32* %stack_var_-24, align 4
  %v6_11fe4 = load i32, i32* @r5, align 4
  %v9_11fe4 = load i32, i32* @r6, align 4
  %v12_11fe4 = load i32, i32* @r7, align 4
  %v15_11fe4 = load i32, i32* @r8, align 4
  %v18_11fe4 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11fe8 = icmp eq i32 %arg2, 0
  %v0_11fec = load i32, i32* @r0, align 4
  store i32 %v0_11fec, i32* @r7, align 4
  br i1 %v2_11fe8, label %dec_label_pc_11ff4, label %dec_label_pc_11ffc

dec_label_pc_11ff4:                               ; preds = %dec_label_pc_11fe4
  %v0_11ff4 = call i32 @function_11ef4()
  %v0_12004.pre = load i32, i32* @r4, align 4
  %v2_12008.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_12004

dec_label_pc_11ffc:                               ; preds = %dec_label_pc_11fe4
  %v2_11ffc = icmp eq i32 %v0_11fec, 0
  br i1 %v2_11ffc, label %dec_label_pc_12004, label %dec_label_pc_12010

dec_label_pc_12004:                               ; preds = %dec_label_pc_11ffc, %dec_label_pc_11ff4
  %v2_12008 = phi i32 [ %v3_11fe4, %dec_label_pc_11ffc ], [ %v2_12008.pre, %dec_label_pc_11ff4 ]
  %v0_12004 = phi i32 [ %arg2, %dec_label_pc_11ffc ], [ %v0_12004.pre, %dec_label_pc_11ff4 ]
  store i32 %v2_12008, i32* @r4, align 4
  store i32 %v6_11fe4, i32* @r5, align 4
  store i32 %v9_11fe4, i32* @r6, align 4
  store i32 %v12_11fe4, i32* @r7, align 4
  store i32 %v18_11fe4, i32* @lr, align 4
  %v1_1200c = call i32 @function_11d48(i32 %v0_12004)
  %v0_12010.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12010

dec_label_pc_12010:                               ; preds = %dec_label_pc_11ffc, %dec_label_pc_12004
  %v0_12028 = phi i32 [ %v0_11fec, %dec_label_pc_11ffc ], [ %v1_1200c, %dec_label_pc_12004 ]
  %v0_12010 = phi i32 [ %arg2, %dec_label_pc_11ffc ], [ %v0_12010.pre, %dec_label_pc_12004 ]
  %v1_12010 = add i32 %v0_12010, 7
  %v1_12014 = and i32 %v1_12010, -4
  store i32 %v1_12014, i32* @r5, align 4
  %v2_12018 = icmp ugt i32 %v1_12014, 10
  %v1_1201c = add i32 %v0_12028, -4
  %v2_1201c = inttoptr i32 %v1_1201c to i32*
  %v3_1201c = load i32, i32* %v2_1201c, align 4
  store i32 %v3_1201c, i32* @r6, align 4
  br i1 %v2_12018, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_12010
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_12010, %bb
  %v0_120a4 = phi i32 [ %v1_12014, %dec_label_pc_12010 ], [ 12, %bb ]
  store i32 %v1_1201c, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_120a4, %v3_1201c
  br i1 %tmp, label %dec_label_pc_12030, label %dec_label_pc_120a4

dec_label_pc_12030:                               ; preds = %bb14
  %v2_12024 = sub i32 %v0_120a4, %v3_1201c
  %v1_12040 = call i32 @function_128dc()
  %v0_12048 = load i32, i32* @r8, align 4
  %v1_12048 = load i32, i32* @r6, align 4
  %v2_12048 = add i32 %v1_12048, %v0_12048
  %v4_12050 = call i32 @function_12190(i32* bitcast (i32** @global_var_1c0d0.389 to i32*), i32 %v2_12048, i32 %v2_12024)
  store i32 %v4_12050, i32* @r4, align 4
  store i32 73832, i32* @lr, align 4
  %v1_12064 = call i32 @function_128dc()
  %v0_12068 = load i32, i32* @r4, align 4
  %v2_12068 = icmp eq i32 %v0_12068, 0
  br i1 %v2_12068, label %dec_label_pc_12078, label %.thread

.thread:                                          ; preds = %dec_label_pc_12030
  %v1_1206c = load i32, i32* @r6, align 4
  %v3_1206c = add i32 %v1_1206c, %v0_12068
  %v2_12070 = load i32, i32* @r7, align 4
  %v3_12070 = add i32 %v2_12070, -4
  %v4_12070 = inttoptr i32 %v3_12070 to i32*
  store i32 %v3_1206c, i32* %v4_12070, align 4
  br label %dec_label_pc_120e4

dec_label_pc_12078:                               ; preds = %dec_label_pc_12030
  %v0_12078 = load i32, i32* @r5, align 4
  %v1_12078 = add i32 %v0_12078, -4
  %v1_1207c = call i32 @function_11d48(i32 %v1_12078)
  store i32 %v1_1207c, i32* @r0, align 4
  store i32 %v1_1207c, i32* @r4, align 4
  %v2_12080 = icmp eq i32 %v1_1207c, 0
  br i1 %v2_12080, label %dec_label_pc_1209c, label %dec_label_pc_12088

dec_label_pc_12088:                               ; preds = %dec_label_pc_12078
  %v0_12088 = load i32, i32* @r6, align 4
  %v1_12088 = add i32 %v0_12088, -4
  store i32 %v1_12088, i32* @r2, align 4
  %v0_1208c = load i32, i32* @r7, align 4
  store i32 %v0_1208c, i32* @r1, align 4
  %v3_12090 = call i32 @function_118e0(i32 %v1_1207c, i32 %v0_1208c, i32 %v1_12088)
  %v0_12094 = load i32, i32* @r7, align 4
  store i32 %v0_12094, i32* @r0, align 4
  %v0_12098 = call i32 @function_11ef4()
  %v0_1209c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1209c

dec_label_pc_1209c:                               ; preds = %dec_label_pc_12078, %dec_label_pc_12088
  %v0_1209c = phi i32 [ 0, %dec_label_pc_12078 ], [ %v0_1209c.pre, %dec_label_pc_12088 ]
  store i32 %v0_1209c, i32* @r7, align 4
  br label %dec_label_pc_120e4

dec_label_pc_120a4:                               ; preds = %bb14
  %v1_120a4 = add i32 %v0_120a4, 28
  %tmp15 = icmp ugt i32 %v1_120a4, %v3_1201c
  br i1 %tmp15, label %dec_label_pc_120e4, label %dec_label_pc_120b0

dec_label_pc_120b0:                               ; preds = %dec_label_pc_120a4
  %v1_120bc = call i32 @function_128dc()
  %v0_120c0 = load i32, i32* @r8, align 4
  %v1_120c0 = load i32, i32* @r5, align 4
  %v2_120c0 = add i32 %v1_120c0, %v0_120c0
  %v1_120c4 = load i32, i32* @r6, align 4
  %v2_120c4 = sub i32 %v1_120c4, %v1_120c0
  %v4_120cc = call i32 @function_12250(i32* bitcast (i32** @global_var_1c0d0.389 to i32*), i32 %v2_120c0, i32 %v2_120c4)
  store i32 73952, i32* @lr, align 4
  %v1_120dc = call i32 @function_128dc()
  %v0_120e0 = load i32, i32* @r5, align 4
  %v1_120e0 = load i32, i32* @r7, align 4
  %v2_120e0 = add i32 %v1_120e0, -4
  %v3_120e0 = inttoptr i32 %v2_120e0 to i32*
  store i32 %v0_120e0, i32* %v3_120e0, align 4
  br label %dec_label_pc_120e4

dec_label_pc_120e4:                               ; preds = %.thread, %dec_label_pc_120a4, %dec_label_pc_1209c, %dec_label_pc_120b0
  %v0_120e4 = load i32, i32* @r7, align 4
  %v2_120e8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_120e8, i32* @r4, align 4
  store i32 %v6_11fe4, i32* @r5, align 4
  store i32 %v9_11fe4, i32* @r6, align 4
  store i32 %v12_11fe4, i32* @r7, align 4
  store i32 %v15_11fe4, i32* @r8, align 4
  ret i32 %v0_120e4

; uselistorder directives
  uselistorder i32 %v1_120c0, { 1, 0 }
  uselistorder i32 %v0_120a4, { 1, 2, 0 }
  uselistorder i32 %v3_1201c, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1c0d0.389, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1c0d0.389 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_11d48, { 1, 38, 0, 4, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2 }
  uselistorder i32 ()* @function_11ef4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32* @r8, { 96, 97, 98, 99, 101, 100, 7, 3, 4, 5, 6, 117, 118, 119, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 1, 95, 120, 2, 121, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 57, 58, 59, 60, 61, 62, 63 }
  uselistorder i32* @r7, { 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 9, 10, 11, 15, 16, 17, 2, 6, 7, 8, 24, 12, 13, 14, 4, 18, 3, 19, 20, 21, 22, 23, 25, 1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 229, 230, 231, 147, 148, 149, 150, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 5, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 232, 233, 234, 235, 236, 237, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 138, 139, 140, 141, 142, 143, 144, 145, 146 }
  uselistorder label %dec_label_pc_120e4, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_1209c, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_12010, { 1, 0 }
}

define i32 @function_120fc(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_120fc:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_120fc = inttoptr i32 %arg2 to i32*
  %v2_120fc = load i32, i32* %v1_120fc, align 4
  %v3_12100 = load i32, i32* @r4, align 4
  store i32 %v3_12100, i32* %stack_var_-8, align 4
  %v1_12104 = add i32 %v2_120fc, 3
  %v1_12108 = and i32 %v1_12104, -4
  store i32 %v1_12108, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12110 = icmp ugt i32 %v1_12108, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12118 = load i32, i32* %arg1, align 4
  store i32 %v2_12118, i32* %r0.global-to-local, align 4
  br i1 %v2_12110, label %dec_label_pc_12184.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_120fc
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12184.preheader

dec_label_pc_12184.preheader:                     ; preds = %dec_label_pc_120fc, %bb
  %v1_12138 = phi i32 [ %v1_12108, %dec_label_pc_120fc ], [ 12, %bb ]
  %v2_121849 = icmp eq i32 %v2_12118, 0
  br i1 %v2_121849, label %dec_label_pc_1218c, label %dec_label_pc_12124

dec_label_pc_12124:                               ; preds = %dec_label_pc_12184.preheader, %dec_label_pc_12180
  %v2_1213c = phi i32 [ %v3_12180, %dec_label_pc_12180 ], [ %v2_12118, %dec_label_pc_12184.preheader ]
  %v1_12124 = inttoptr i32 %v2_1213c to i32*
  %v2_12124 = load i32, i32* %v1_12124, align 4
  store i32 %v2_12124, i32* %ip.global-to-local, align 4
  %v3_12128 = icmp ult i32 %v2_12124, %v1_12138
  br i1 %v3_12128, label %dec_label_pc_12180, label %dec_label_pc_12130

dec_label_pc_12130:                               ; preds = %dec_label_pc_12124
  %v1_12130 = add i32 %v1_12138, 44
  %v3_12134 = icmp ult i32 %v2_12124, %v1_12130
  br i1 %v3_12134, label %dec_label_pc_12144, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_12130
  %v2_12128.le = sub i32 %v2_12124, %v1_12138
  store i32 %v2_12128.le, i32* %v1_12124, align 4
  %v0_12170.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_12178.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_12144:                               ; preds = %dec_label_pc_12130
  %v1_12144 = add i32 %v2_1213c, 4
  %v2_12144 = inttoptr i32 %v1_12144 to i32*
  %v3_12144 = load i32, i32* %v2_12144, align 4
  store i32 %v3_12144, i32* %r2.global-to-local, align 4
  %v2_12148 = icmp eq i32 %v3_12144, 0
  br i1 %v2_12148, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_12144
  %v2_1214c = add i32 %v2_1213c, 8
  %v3_1214c = inttoptr i32 %v2_1214c to i32*
  %v4_1214c = load i32, i32* %v3_1214c, align 4
  %v3_12150 = add i32 %v3_12144, 8
  %v4_12150 = inttoptr i32 %v3_12150 to i32*
  store i32 %v4_1214c, i32* %v4_12150, align 4
  %v0_12154.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12144, %bb27
  %v0_12154 = phi i32 [ %v2_1213c, %dec_label_pc_12144 ], [ %v0_12154.pre, %bb27 ]
  %v1_12154 = add i32 %v0_12154, 8
  %v2_12154 = inttoptr i32 %v1_12154 to i32*
  %v3_12154 = load i32, i32* %v2_12154, align 4
  %v1_12158 = add i32 %v0_12154, 4
  %v2_12158 = inttoptr i32 %v1_12158 to i32*
  %v3_12158 = load i32, i32* %v2_12158, align 4
  %v2_1215c = icmp eq i32 %v3_12154, 0
  br i1 %v2_1215c, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_12160 = add i32 %v3_12154, 4
  %v4_12160 = inttoptr i32 %v3_12160 to i32*
  store i32 %v3_12158, i32* %v4_12160, align 4
  %v1_12168 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12168, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_12164 = load i32, i32* %r1.global-to-local, align 4
  %v3_12164 = inttoptr i32 %v2_12164 to i32*
  store i32 %v3_12158, i32* %v3_12164, align 4
  %v1_1216c.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_1216c.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_12178 = phi i32 [ %v0_12178.pre, %.thread._crit_edge ], [ %v1_12168, %bb28 ], [ %v1_1216c.pre, %.thread5 ]
  %v0_12170 = phi i32 [ %v0_12170.pre, %.thread._crit_edge ], [ %v1_12168, %bb28 ], [ %v1_1216c.pre, %.thread5 ]
  %v1_12170 = load i32, i32* %r0.global-to-local, align 4
  %v2_12170 = sub i32 %v1_12170, %v0_12170
  %v1_12174 = add i32 %v2_12170, 12
  store i32 %v1_12174, i32* %r0.global-to-local, align 4
  %v1_12178 = load i32, i32* %r4.global-to-local, align 4
  %v2_12178 = inttoptr i32 %v1_12178 to i32*
  store i32 %v0_12178, i32* %v2_12178, align 4
  %v2_1217c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1217c, i32* %r4.global-to-local, align 4
  ret i32 %v1_12174

dec_label_pc_12180:                               ; preds = %dec_label_pc_12124
  %v1_12180 = add i32 %v2_1213c, 4
  %v2_12180 = inttoptr i32 %v1_12180 to i32*
  %v3_12180 = load i32, i32* %v2_12180, align 4
  store i32 %v3_12180, i32* %r0.global-to-local, align 4
  %v2_12184 = icmp eq i32 %v3_12180, 0
  br i1 %v2_12184, label %dec_label_pc_12184.dec_label_pc_1218c_crit_edge, label %dec_label_pc_12124

dec_label_pc_12184.dec_label_pc_1218c_crit_edge:  ; preds = %dec_label_pc_12180
  br label %dec_label_pc_1218c

dec_label_pc_1218c:                               ; preds = %dec_label_pc_12184.dec_label_pc_1218c_crit_edge, %dec_label_pc_12184.preheader
  store i32 %v3_12100, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12180, { 1, 2, 0 }
  uselistorder i32 %v0_12154, { 1, 0 }
  uselistorder i32 %v2_12124, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1213c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_12138, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 2, 1, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_12124, { 1, 0 }
  uselistorder label %dec_label_pc_12184.preheader, { 1, 0 }
}

define i32 @function_12190(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12190:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_12194 = load i32, i32* %arg1, align 4
  store i32 %v2_12194, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_1220c6 = icmp eq i32 %v2_12194, 0
  br i1 %v2_1220c6, label %dec_label_pc_12214, label %dec_label_pc_121a0

dec_label_pc_121a0:                               ; preds = %dec_label_pc_12190, %dec_label_pc_12208
  %v0_121e0 = phi i32 [ %v3_12208, %dec_label_pc_12208 ], [ %v2_12194, %dec_label_pc_12190 ]
  %v1_121a0 = inttoptr i32 %v0_121e0 to i32*
  %v2_121a0 = load i32, i32* %v1_121a0, align 4
  store i32 %v2_121a0, i32* %r0.global-to-local, align 4
  %v2_121a4 = sub i32 %v0_121e0, %v2_121a0
  %v1_121a8 = add i32 %v2_121a4, 12
  %v3_121ac = icmp uge i32 %v1_121a8, %arg2
  %v9_121ac = icmp eq i32 %v1_121a8, %arg2
  %v2_121b0 = xor i1 %v9_121ac, true
  %v3_121b0 = and i1 %v3_121ac, %v2_121b0
  br i1 %v3_121b0, label %dec_label_pc_12208, label %dec_label_pc_121b4

dec_label_pc_121b4:                               ; preds = %dec_label_pc_121a0
  br i1 %v9_121ac, label %dec_label_pc_121b8, label %dec_label_pc_12214

dec_label_pc_121b8:                               ; preds = %dec_label_pc_121b4
  %v1_121b8 = add i32 %arg3, 3
  %v1_121bc = and i32 %v1_121b8, -4
  store i32 %v1_121bc, i32* %r2.global-to-local, align 4
  %v2_121c0 = sub i32 %v2_121a0, %v1_121bc
  %v3_121c0 = icmp ult i32 %v2_121a0, %v1_121bc
  br i1 %v3_121c0, label %dec_label_pc_12214, label %dec_label_pc_121c8

dec_label_pc_121c8:                               ; preds = %dec_label_pc_121b8
  %v1_121c8 = add i32 %v1_121bc, 44
  %v3_121cc = icmp ult i32 %v2_121a0, %v1_121c8
  br i1 %v3_121cc, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_121c8
  store i32 %v2_121c0, i32* %v1_121a0, align 4
  %v1_121d8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_121d8, i32* %r0.global-to-local, align 4
  ret i32 %v1_121d8

.thread2:                                         ; preds = %dec_label_pc_121c8
  %v1_121e0 = add i32 %v0_121e0, 4
  %v2_121e0 = inttoptr i32 %v1_121e0 to i32*
  %v3_121e0 = load i32, i32* %v2_121e0, align 4
  store i32 %v3_121e0, i32* %r2.global-to-local, align 4
  %v2_121e4 = icmp eq i32 %v3_121e0, 0
  br i1 %v2_121e4, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_121e8 = add i32 %v0_121e0, 8
  %v3_121e8 = inttoptr i32 %v2_121e8 to i32*
  %v4_121e8 = load i32, i32* %v3_121e8, align 4
  %v3_121ec = add i32 %v3_121e0, 8
  %v4_121ec = inttoptr i32 %v3_121ec to i32*
  store i32 %v4_121e8, i32* %v4_121ec, align 4
  %v0_121f0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_121f0 = phi i32 [ %v0_121e0, %.thread2 ], [ %v0_121f0.pre, %bb17 ]
  %v1_121f0 = add i32 %v0_121f0, 8
  %v2_121f0 = inttoptr i32 %v1_121f0 to i32*
  %v3_121f0 = load i32, i32* %v2_121f0, align 4
  store i32 %v3_121f0, i32* %r2.global-to-local, align 4
  %v1_121f4 = add i32 %v0_121f0, 4
  %v2_121f4 = inttoptr i32 %v1_121f4 to i32*
  %v3_121f4 = load i32, i32* %v2_121f4, align 4
  %v2_121f8 = icmp eq i32 %v3_121f0, 0
  br i1 %v2_121f8, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_121fc = add i32 %v3_121f0, 4
  %v4_121fc = inttoptr i32 %v3_121fc to i32*
  store i32 %v3_121f4, i32* %v4_121fc, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_12200 = load i32, i32* %lr.global-to-local, align 4
  %v3_12200 = inttoptr i32 %v2_12200 to i32*
  store i32 %v3_121f4, i32* %v3_12200, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_12204 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_12204

dec_label_pc_12208:                               ; preds = %dec_label_pc_121a0
  %v1_12208 = add i32 %v0_121e0, 4
  %v2_12208 = inttoptr i32 %v1_12208 to i32*
  %v3_12208 = load i32, i32* %v2_12208, align 4
  store i32 %v3_12208, i32* %ip.global-to-local, align 4
  %v2_1220c = icmp eq i32 %v3_12208, 0
  br i1 %v2_1220c, label %dec_label_pc_1220c.dec_label_pc_12214.loopexit_crit_edge, label %dec_label_pc_121a0

dec_label_pc_1220c.dec_label_pc_12214.loopexit_crit_edge: ; preds = %dec_label_pc_12208
  br label %dec_label_pc_12214

dec_label_pc_12214:                               ; preds = %dec_label_pc_121b8, %dec_label_pc_12190, %dec_label_pc_1220c.dec_label_pc_12214.loopexit_crit_edge, %dec_label_pc_121b4
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12208, { 1, 2, 0 }
  uselistorder i32 %v0_121f0, { 1, 0 }
  uselistorder i32 %v1_121bc, { 0, 2, 1, 3 }
  uselistorder i1 %v9_121ac, { 1, 0 }
  uselistorder i32 %v2_121a0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_121e0, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_12214, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_121a0, { 1, 0 }
}

define i32 @function_1221c() local_unnamed_addr {
dec_label_pc_1221c:
  %v0_1221c = load i32, i32* @r2, align 4
  %v2_1221c = icmp eq i32 %v0_1221c, 0
  %v0_12220 = load i32, i32* @r3, align 4
  %v1_12220 = load i32, i32* @r1, align 4
  %v2_12220 = add i32 %v1_12220, 4
  %v3_12220 = inttoptr i32 %v2_12220 to i32*
  store i32 %v0_12220, i32* %v3_12220, align 4
  %v0_12224 = load i32, i32* @r2, align 4
  %v1_12224 = load i32, i32* @r1, align 4
  %v2_12224 = add i32 %v1_12224, 8
  %v3_12224 = inttoptr i32 %v2_12224 to i32*
  store i32 %v0_12224, i32* %v3_12224, align 4
  %v1_1222c = load i32, i32* @r1, align 4
  br i1 %v2_1221c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1221c
  %v2_12228 = load i32, i32* @r2, align 4
  %v3_12228 = add i32 %v2_12228, 4
  %v4_12228 = inttoptr i32 %v3_12228 to i32*
  store i32 %v1_1222c, i32* %v4_12228, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_1221c
  %v2_1222c = load i32, i32* @r0, align 4
  %v3_1222c = inttoptr i32 %v2_1222c to i32*
  store i32 %v1_1222c, i32* %v3_1222c, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_12230 = load i32, i32* @r3, align 4
  %v2_12230 = icmp eq i32 %v0_12230, 0
  br i1 %v2_12230, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_12234 = load i32, i32* @r1, align 4
  %v3_12234 = add i32 %v0_12230, 8
  %v4_12234 = inttoptr i32 %v3_12234 to i32*
  store i32 %v1_12234, i32* %v4_12234, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_12238 = load i32, i32* @r0, align 4
  ret i32 %v1_12238

; uselistorder directives
  uselistorder i32 %v1_1222c, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_1223c() local_unnamed_addr {
dec_label_pc_1223c:
  %v0_1223c = load i32, i32* @r2, align 4
  %v2_1223c = icmp eq i32 %v0_1223c, 0
  %v1_12240 = load i32, i32* @r1, align 4
  br i1 %v2_1223c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1223c
  %v2_12240 = load i32, i32* @r0, align 4
  %v3_12240 = inttoptr i32 %v2_12240 to i32*
  store i32 %v1_12240, i32* %v3_12240, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_1223c
  %v3_12244 = add i32 %v0_1223c, 4
  %v4_12244 = inttoptr i32 %v3_12244 to i32*
  store i32 %v1_12240, i32* %v4_12244, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_12248 = load i32, i32* @r2, align 4
  %v1_12248 = load i32, i32* @r1, align 4
  %v2_12248 = add i32 %v1_12248, 8
  %v3_12248 = inttoptr i32 %v2_12248 to i32*
  store i32 %v0_12248, i32* %v3_12248, align 4
  %v1_1224c = load i32, i32* @r0, align 4
  ret i32 %v1_1224c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_12250(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12250:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12250 = load i32, i32* @r4, align 4
  store i32 %v3_12250, i32* %stack_var_-20, align 4
  %v2_12254 = load i32, i32* %arg1, align 4
  store i32 %v2_12254, i32* %r4.global-to-local, align 4
  %v2_12258 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_122742 = icmp eq i32 %v2_12254, 0
  br i1 %v2_122742, label %dec_label_pc_12324, label %dec_label_pc_12264

dec_label_pc_12264:                               ; preds = %dec_label_pc_12250, %dec_label_pc_1226c
  %v0_122b4 = phi i32 [ %v0_122bc, %dec_label_pc_1226c ], [ 0, %dec_label_pc_12250 ]
  %v0_122bc = phi i32 [ %v3_12270, %dec_label_pc_1226c ], [ %v2_12254, %dec_label_pc_12250 ]
  %v1_122785.in = phi i32 [ %v3_12270, %dec_label_pc_1226c ], [ %v2_12254, %dec_label_pc_12250 ]
  %v1_122785 = add i32 %v1_122785.in, 12
  %v3_12264 = icmp ult i32 %v1_122785, %arg2
  br i1 %v3_12264, label %dec_label_pc_1226c, label %dec_label_pc_12284

dec_label_pc_1226c:                               ; preds = %dec_label_pc_12264
  store i32 %v0_122bc, i32* %r6.global-to-local, align 4
  %v1_12270 = add i32 %v0_122bc, 4
  %v2_12270 = inttoptr i32 %v1_12270 to i32*
  %v3_12270 = load i32, i32* %v2_12270, align 4
  store i32 %v3_12270, i32* %r4.global-to-local, align 4
  %v2_12274 = icmp eq i32 %v3_12270, 0
  br i1 %v2_12274, label %dec_label_pc_12274.dec_label_pc_12324.loopexit_crit_edge, label %dec_label_pc_12264

dec_label_pc_12284:                               ; preds = %dec_label_pc_12264
  %v1_12284 = inttoptr i32 %v0_122bc to i32*
  %v2_12284 = load i32, i32* %v1_12284, align 4
  %v2_12288 = sub i32 %v0_122bc, %v2_12284
  %v1_1228c = add i32 %v2_12288, 12
  %v3_12290 = icmp uge i32 %v1_1228c, %v2_12258
  %v9_12290 = icmp eq i32 %v1_1228c, %v2_12258
  %v2_12294 = xor i1 %v9_12290, true
  %v3_12294 = and i1 %v3_12290, %v2_12294
  br i1 %v3_12294, label %dec_label_pc_12324, label %dec_label_pc_12298

dec_label_pc_12298:                               ; preds = %dec_label_pc_12284
  %v2_12298 = add i32 %v2_12284, %arg3
  store i32 %v2_12298, i32* %r7.global-to-local, align 4
  br i1 %v9_12290, label %dec_label_pc_122a0, label %dec_label_pc_122cc

dec_label_pc_122a0:                               ; preds = %dec_label_pc_12298
  %v2_122a0 = icmp eq i32 %v0_122b4, 0
  br i1 %v2_122a0, label %dec_label_pc_12318, label %dec_label_pc_122a8

dec_label_pc_122a8:                               ; preds = %dec_label_pc_122a0
  %v1_122a8 = add i32 %v0_122b4, 12
  %v9_122ac = icmp eq i32 %v1_122a8, %arg2
  br i1 %v9_122ac, label %dec_label_pc_122b4, label %dec_label_pc_12318

dec_label_pc_122b4:                               ; preds = %dec_label_pc_122a8
  %v1_122b4 = inttoptr i32 %v0_122b4 to i32*
  %v2_122b4 = load i32, i32* %v1_122b4, align 4
  %v1_122b8 = add i32 %v0_122b4, 8
  %v2_122b8 = inttoptr i32 %v1_122b8 to i32*
  %v3_122b8 = load i32, i32* %v2_122b8, align 4
  store i32 %v3_122b8, i32* @r2, align 4
  store i32 %v0_122bc, i32* @r1, align 4
  %v2_122c0 = add i32 %v2_122b4, %v2_12298
  store i32 %v2_122c0, i32* %r7.global-to-local, align 4
  %v0_122c4 = call i32 @function_1223c()
  br label %dec_label_pc_12318

dec_label_pc_122cc:                               ; preds = %dec_label_pc_12298
  %v1_122cc = add i32 %v0_122bc, 4
  %v2_122cc = inttoptr i32 %v1_122cc to i32*
  %v3_122cc = load i32, i32* %v2_122cc, align 4
  store i32 %v3_122cc, i32* %r5.global-to-local, align 4
  %v2_122d0 = icmp eq i32 %v3_122cc, 0
  br i1 %v2_122d0, label %dec_label_pc_12304, label %dec_label_pc_122d8

dec_label_pc_122d8:                               ; preds = %dec_label_pc_122cc
  %v1_122d8 = inttoptr i32 %v3_122cc to i32*
  %v2_122d8 = load i32, i32* %v1_122d8, align 4
  %v2_122dc = sub i32 %v3_122cc, %v2_122d8
  %v1_122e0 = add i32 %v2_122dc, 12
  %v9_122e4 = icmp eq i32 %v2_12258, %v1_122e0
  br i1 %v9_122e4, label %dec_label_pc_122ec, label %dec_label_pc_12304

dec_label_pc_122ec:                               ; preds = %dec_label_pc_122d8
  store i32 %v0_122b4, i32* @r2, align 4
  store i32 %v3_122cc, i32* @r1, align 4
  %v2_122f4 = add i32 %v2_122d8, %v2_12298
  store i32 %v2_122f4, i32* %r7.global-to-local, align 4
  %v0_122f8 = call i32 @function_1223c()
  %v0_122fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_122fc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12318

dec_label_pc_12304:                               ; preds = %dec_label_pc_122d8, %dec_label_pc_122cc
  %v2_12304 = add i32 %v0_122bc, %arg3
  store i32 %v2_12304, i32* %r4.global-to-local, align 4
  store i32 %v3_122cc, i32* @r3, align 4
  store i32 %v0_122b4, i32* @r2, align 4
  store i32 %v2_12304, i32* @r1, align 4
  %v0_12314 = call i32 @function_1221c()
  br label %dec_label_pc_12318

dec_label_pc_12318:                               ; preds = %dec_label_pc_122a8, %dec_label_pc_122a0, %dec_label_pc_122ec, %dec_label_pc_122b4, %dec_label_pc_12304
  %v0_12318 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12318, i32* %r5.global-to-local, align 4
  %v0_1231c = load i32, i32* %r7.global-to-local, align 4
  %v2_1231c = inttoptr i32 %v0_12318 to i32*
  store i32 %v0_1231c, i32* %v2_1231c, align 4
  br label %dec_label_pc_1233c

dec_label_pc_12274.dec_label_pc_12324.loopexit_crit_edge: ; preds = %dec_label_pc_1226c
  br label %dec_label_pc_12324

dec_label_pc_12324:                               ; preds = %dec_label_pc_12250, %dec_label_pc_12274.dec_label_pc_12324.loopexit_crit_edge, %dec_label_pc_12284
  %v1_12324 = add i32 %v2_12258, -12
  store i32 %v1_12324, i32* %r5.global-to-local, align 4
  %v3_12328 = inttoptr i32 %v1_12324 to i32*
  store i32 %arg3, i32* %v3_12328, align 4
  %v0_1232c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1232c, i32* @r3, align 4
  %v0_12330 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12330, i32* @r2, align 4
  %v0_12334 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12334, i32* @r1, align 4
  %v0_12338 = call i32 @function_1221c()
  br label %dec_label_pc_1233c

dec_label_pc_1233c:                               ; preds = %dec_label_pc_12318, %dec_label_pc_12324
  %v0_1233c = load i32, i32* %r5.global-to-local, align 4
  %v2_12340 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12340, i32* @r4, align 4
  ret i32 %v0_1233c

; uselistorder directives
  uselistorder i32 %v3_122cc, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_12290, { 1, 0 }
  uselistorder i32 %v3_12270, { 2, 3, 1, 0 }
  uselistorder i32 %v0_122bc, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_122b4, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_1221c, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_1223c, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1233c, { 1, 0 }
  uselistorder label %dec_label_pc_12324, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12318, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_12264, { 1, 0 }
}

define i32 @function_12344() local_unnamed_addr {
dec_label_pc_12360.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_12344 = ptrtoint i32* %stack_var_-268 to i32
  %v1_12354 = call i32 @function_128dc()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_12360 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_12360

dec_label_pc_12360:                               ; preds = %dec_label_pc_12360.lr.ph, %dec_label_pc_12360
  %v1_12364 = phi i32 [ 31, %dec_label_pc_12360.lr.ph ], [ %v1_12370, %dec_label_pc_12360 ]
  %v4_12364 = mul i32 %v1_12364, 4
  %v5_12364 = add i32 %v4_12364, %v2_12360
  %v2_1236c = add i32 %v5_12364, -128
  %v3_1236c = inttoptr i32 %v2_1236c to i32*
  store i32 0, i32* %v3_1236c, align 4
  %v0_12370 = load i32, i32* %r1.global-to-local, align 4
  %v1_12370 = add i32 %v0_12370, -1
  store i32 %v1_12370, i32* %r1.global-to-local, align 4
  %v6_12370 = icmp slt i32 %v1_12370, 0
  br i1 %v6_12370, label %dec_label_pc_12378, label %dec_label_pc_12360

dec_label_pc_12378:                               ; preds = %dec_label_pc_12360
  %v2_12378 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_12378, i32* @r4, align 4
  store i32 %v2_12378, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_12384 = call i32 @function_11d00()
  %v2_12388 = icmp eq i32 %v0_12384, 0
  br i1 %v2_12388, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12378
  store i32 %v2_12378, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12378, %bb
  store i32 74652, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12388, i32 ptrtoint (i32* @global_var_11548.411 to i32))
  %v2_123a0 = load i32, i32* @global_var_1c2a4.413, align 4
  %v2_123a4 = icmp eq i32 %v2_123a0, 0
  br i1 %v2_123a4, label %dec_label_pc_123ac, label %dec_label_pc_123dc

dec_label_pc_123ac:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1c2a4.413, align 4
  br label %dec_label_pc_123b4

dec_label_pc_123b4:                               ; preds = %dec_label_pc_1242c, %dec_label_pc_123ac
  %v1_123c0 = call i32 @function_128dc()
  %v1_123c8 = call i32 @function_13a6c(i32 6)
  store i32 74716, i32* @lr, align 4
  %v1_123d8 = call i32 @function_128dc()
  %v2_123e0.pre = load i32, i32* @global_var_1c2a4.413, align 4
  br label %dec_label_pc_123dc

dec_label_pc_123dc:                               ; preds = %.thread1, %dec_label_pc_123b4
  %v0_12450 = phi i32 [ %v2_123a0, %.thread1 ], [ %v2_123e0.pre, %dec_label_pc_123b4 ]
  store i32 ptrtoint (i32* @global_var_1c2a4.413 to i32), i32* %ip.global-to-local, align 4
  %v7_123e4 = icmp eq i32 %v0_12450, 1
  br i1 %v7_123e4, label %dec_label_pc_12414.lr.ph, label %dec_label_pc_12448

dec_label_pc_12414.lr.ph:                         ; preds = %dec_label_pc_123dc
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1c2a4.413, align 4
  %v2_12400 = bitcast i32* %stack_var_-268 to i8*
  %v3_12400 = call i32 @function_11900(i8* %v2_12400, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12414

dec_label_pc_12414:                               ; preds = %dec_label_pc_12414.lr.ph, %dec_label_pc_12414
  %v1_12418 = phi i32 [ 31, %dec_label_pc_12414.lr.ph ], [ %v1_12424, %dec_label_pc_12414 ]
  %v4_12418 = mul i32 %v1_12418, 4
  %v5_12418 = add i32 %v4_12418, %v2_12360
  %v2_12420 = add i32 %v5_12418, -264
  %v3_12420 = inttoptr i32 %v2_12420 to i32*
  store i32 -1, i32* %v3_12420, align 4
  %v0_12424 = load i32, i32* %r1.global-to-local, align 4
  %v1_12424 = add i32 %v0_12424, -1
  store i32 %v1_12424, i32* %r1.global-to-local, align 4
  %v6_12424 = icmp slt i32 %v1_12424, 0
  br i1 %v6_12424, label %dec_label_pc_1242c, label %dec_label_pc_12414

dec_label_pc_1242c:                               ; preds = %dec_label_pc_12414
  store i32 %v2_12344, i32* %r1.global-to-local, align 4
  %v4_12440 = call i32 @function_12bc8(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_123b4

dec_label_pc_12448:                               ; preds = %dec_label_pc_123dc
  %v7_12448 = icmp eq i32 %v0_12450, 2
  br i1 %v7_12448, label %dec_label_pc_12450, label %dec_label_pc_1245c

dec_label_pc_12450:                               ; preds = %dec_label_pc_12448
  store i32 3, i32* @global_var_1c2a4.413, align 4
  %v0_12458 = call i32 @function_12344()
  %v2_1245c.pre = load i32, i32* @global_var_1c2a4.413, align 4
  br label %dec_label_pc_1245c

dec_label_pc_1245c:                               ; preds = %dec_label_pc_12448, %dec_label_pc_12450
  %v1_12464 = phi i32 [ %v0_12450, %dec_label_pc_12448 ], [ %v2_1245c.pre, %dec_label_pc_12450 ]
  %v7_12460 = icmp eq i32 %v1_12464, 3
  br i1 %v7_12460, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_1245c
  %v2_1246c = load i32, i32* %ip.global-to-local, align 4
  %v3_1246c = inttoptr i32 %v2_1246c to i32*
  store i32 4, i32* %v3_1246c, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1245c, %bb27
  call void @__pseudo_cond_branch(i1 %v7_12460, i32 ptrtoint (i32* @global_var_12ce0.415 to i32))
  br label %dec_label_pc_12474

dec_label_pc_12474:                               ; preds = %dec_label_pc_12474, %.thread3
  %v0_12474 = call i32 @function_12344()
  br label %dec_label_pc_12474

; uselistorder directives
  uselistorder i32 %v1_12424, { 2, 1, 0 }
  uselistorder i32 %v1_12370, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 6, 7, 0, 1, 8, 3, 5, 4, 2 }
  uselistorder i32* @global_var_1c2a4.413, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1245c, { 1, 0 }
  uselistorder label %dec_label_pc_12414, { 1, 0 }
  uselistorder label %dec_label_pc_123dc, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12360, { 1, 0 }
}

define i32 @function_1248c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1248c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_124a0 = load i32, i32* @r4, align 4
  store i32 %v3_124a0, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_124c4.pre = load i32, i32* bitcast (i32** @global_var_1c210.418 to i32*), align 4
  br label %dec_label_pc_124bc

dec_label_pc_124bc:                               ; preds = %dec_label_pc_124bc, %dec_label_pc_1248c
  %v0_124f4 = phi i32 [ %tmp, %dec_label_pc_1248c ], [ %v1_124b8, %dec_label_pc_124bc ]
  store i32 %v0_124f4, i32* %r4.global-to-local, align 4
  %v1_124c0 = inttoptr i32 %v0_124f4 to i8*
  %v2_124c0 = load i8, i8* %v1_124c0, align 1
  %v3_124c0 = zext i8 %v2_124c0 to i32
  %v3_124c8 = mul nuw nsw i32 %v3_124c0, 2
  %v4_124c8 = add i32 %v3_124c8, %v2_124c4.pre
  %v5_124c8 = inttoptr i32 %v4_124c8 to i8*
  %v6_124c8 = load i8, i8* %v5_124c8, align 1
  %v1_124cc = and i8 %v6_124c8, 32
  %v2_124cc = icmp eq i8 %v1_124cc, 0
  %v1_124b8 = add i32 %v0_124f4, 1
  br i1 %v2_124cc, label %dec_label_pc_124d4, label %dec_label_pc_124bc

dec_label_pc_124d4:                               ; preds = %dec_label_pc_124bc
  %v7_124d4 = icmp eq i8 %v2_124c0, 43
  br i1 %v7_124d4, label %dec_label_pc_124f4, label %dec_label_pc_124dc

dec_label_pc_124dc:                               ; preds = %dec_label_pc_124d4
  %v7_124dc = icmp eq i8 %v2_124c0, 45
  br i1 %v7_124dc, label %dec_label_pc_124f4, label %bb

bb:                                               ; preds = %dec_label_pc_124dc
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12550

dec_label_pc_124f4:                               ; preds = %dec_label_pc_124d4, %dec_label_pc_124dc
  %storemerge30 = phi i32 [ 1, %dec_label_pc_124dc ], [ 0, %dec_label_pc_124d4 ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_124b8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12550

dec_label_pc_12550:                               ; preds = %bb, %dec_label_pc_124f4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_12558 = call i32 @function_11054(i32 -1, i32 10)
  %v0_1255c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1255c, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_12568 = urem i32 %v2_12558, 256
  store i32 %v1_12568, i32* %sl.global-to-local, align 4
  %v0_1256c = call i32 @function_10f44()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_1256c, i32* %r8.global-to-local, align 4
  %v0_12580.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12580

dec_label_pc_1257c:                               ; preds = %bb48, %dec_label_pc_125dc
  %v0_1257c = phi i32 [ %v1_125ac, %bb48 ], [ %v0_1257c.pre, %dec_label_pc_125dc ]
  store i32 %v0_1257c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12580

dec_label_pc_12580:                               ; preds = %dec_label_pc_12550, %dec_label_pc_1257c
  %v0_125ac = phi i32 [ %v0_12580.pre, %dec_label_pc_12550 ], [ %v0_1257c, %dec_label_pc_1257c ]
  %v1_12580 = inttoptr i32 %v0_125ac to i8*
  %v2_12580 = load i8, i8* %v1_12580, align 1
  %v3_12580 = zext i8 %v2_12580 to i32
  %v1_12584 = add nsw i32 %v3_12580, -48
  %v1_12588 = urem i32 %v1_12584, 256
  %v1_12590 = or i32 %v3_12580, 32
  %tmp56 = icmp ult i32 %v1_12588, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_12598

dec_label_pc_12598:                               ; preds = %dec_label_pc_12580
  %tmp57 = icmp ugt i32 %v1_12590, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_12598
  %v1_1259c = add nsw i32 %v1_12590, -87
  %v5_125a4 = urem i32 %v1_1259c, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_12580, %dec_label_pc_12598, %bb42
  %v3_125d4 = phi i32 [ %v1_12588, %dec_label_pc_12580 ], [ 40, %dec_label_pc_12598 ], [ %v5_125a4, %bb42 ]
  %v1_125a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_125ac = add i32 %v0_125ac, 1
  store i32 %v1_125ac, i32* %r4.global-to-local, align 4
  %v6_125b0 = icmp slt i32 %v3_125d4, %v1_125a8
  br i1 %v6_125b0, label %dec_label_pc_125b4, label %dec_label_pc_125f4

dec_label_pc_125b4:                               ; preds = %bb43
  %v0_125b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_125b4 = load i32, i32* %r8.global-to-local, align 4
  %v9_125b4 = icmp eq i32 %v0_125b4, %v1_125b4
  br i1 %v9_125b4, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_125b4
  br label %dec_label_pc_125c4

bb44:                                             ; preds = %dec_label_pc_125b4
  %v3_125b4 = icmp ult i32 %v0_125b4, %v1_125b4
  br i1 %v3_125b4, label %dec_label_pc_125c4, label %dec_label_pc_125dc

dec_label_pc_125c4:                               ; preds = %bb44, %.thread
  %v4_125cc1727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_125c4 = load i32, i32* %sl.global-to-local, align 4
  %v3_125c4 = icmp uge i32 %v3_125d4, %v1_125c4
  %v9_125c4 = icmp eq i32 %v3_125d4, %v1_125c4
  %v2_125c8 = xor i1 %v3_125c4, true
  %v3_125c8 = or i1 %v9_125c4, %v2_125c8
  br i1 %v3_125c8, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_125c4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_125c4, %bb45
  %v4_125cc = phi i32 [ %v4_125cc1727, %dec_label_pc_125c4 ], [ 0, %bb45 ]
  %v2_125cc = xor i1 %v9_125c4, true
  %v3_125cc = and i1 %v3_125c4, %v2_125cc
  br i1 %v3_125cc, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_125cc = urem i32 %v4_125cc, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_125d0 = phi i32 [ %v5_125cc, %bb47 ], [ %v4_125cc, %bb46 ]
  %v2_125d0 = icmp eq i32 %v0_125d0, 0
  br i1 %v2_125d0, label %bb48, label %dec_label_pc_125dc

bb48:                                             ; preds = %thread-pre-split
  %v4_125d4 = mul i32 %v0_125b4, %v1_125a8
  %v5_125d4 = add i32 %v4_125d4, %v3_125d4
  store i32 %v5_125d4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1257c

dec_label_pc_125dc:                               ; preds = %bb44, %thread-pre-split
  %v0_125dc = call i32 @function_118a0()
  %v0_125e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_125e0 = load i32, i32* %fp.global-to-local, align 4
  %v2_125e0 = and i32 %v1_125e0, %v0_125e0
  store i32 %v2_125e0, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_125ec = inttoptr i32 %v0_125dc to i32*
  store i32 34, i32* %v2_125ec, align 4
  %v0_1257c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1257c

dec_label_pc_125f4:                               ; preds = %bb43
  %v0_125f4.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_125f4 = icmp eq i32 %v0_125f4.pre, 0
  br i1 %v2_125f4, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_125f4
  %v1_125f8 = load i32, i32* %r6.global-to-local, align 4
  %v3_125f8 = inttoptr i32 %v0_125f4.pre to i32*
  store i32 %v1_125f8, i32* %v3_125f8, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_125f4, %bb49
  %v0_125fc = load i32, i32* %r7.global-to-local, align 4
  %v2_125fc = icmp eq i32 %v0_125fc, 0
  %. = select i1 %v2_125fc, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_12608 = load i32, i32* %fp.global-to-local, align 4
  %v2_12608 = icmp eq i32 %v0_12608, 0
  %v0_1262c.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12608, label %dec_label_pc_12624, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_1262c.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_12614, label %dec_label_pc_12624

dec_label_pc_12614:                               ; preds = %bb53
  %v0_12614 = call i32 @function_118a0()
  %v2_1261c = inttoptr i32 %v0_12614 to i32*
  store i32 34, i32* %v2_1261c, align 4
  %v0_12620 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12620, i32* %ip.global-to-local, align 4
  %v0_12624.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12624

dec_label_pc_12624:                               ; preds = %bb53, %bb50, %dec_label_pc_12614
  %v0_1262c.pre = phi i32 [ %v0_1262c.pre.pre, %bb53 ], [ %v0_12620, %dec_label_pc_12614 ], [ %v0_1262c.pre.pre, %bb50 ]
  %v0_12624 = phi i32 [ %v0_125fc, %bb53 ], [ %v0_12624.pre, %dec_label_pc_12614 ], [ %v0_125fc, %bb50 ]
  %v2_12624 = icmp eq i32 %v0_12624, 0
  br i1 %v2_12624, label %dec_label_pc_12624._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_12624
  %v2_12628 = sub i32 0, %v0_1262c.pre
  store i32 %v2_12628, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12624._crit_edge

dec_label_pc_12624._crit_edge:                    ; preds = %dec_label_pc_12624, %bb54
  %v0_1262c = phi i32 [ %v2_12628, %bb54 ], [ %v0_1262c.pre, %dec_label_pc_12624 ]
  %v2_12630 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12630, i32* @r4, align 4
  ret i32 %v0_1262c

; uselistorder directives
  uselistorder i32 %v0_1262c.pre, { 1, 0 }
  uselistorder i32 %v0_1262c.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_125f4.pre, { 1, 0 }
  uselistorder i32 %v4_125cc, { 1, 0 }
  uselistorder i1 %v3_125c4, { 1, 0 }
  uselistorder i32 %v1_125c4, { 1, 0 }
  uselistorder i32 %v1_125ac, { 1, 0 }
  uselistorder i32 %v1_12590, { 1, 0 }
  uselistorder i32 %v1_12588, { 1, 0 }
  uselistorder i32 %v0_1257c, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 5, 4, 1, 0 }
  uselistorder i32* %r6.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 4, 3, 6, 5, 0 }
  uselistorder i32 ()* @function_10f44, { 3, 1, 4, 2, 0 }
  uselistorder i32 (i32, i32)* @function_11054, { 4, 2, 0, 8, 1, 7, 6, 5, 3 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 9, 10, 1, 11, 12, 2, 3, 13, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_12624._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12624, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_125dc, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12580, { 1, 0 }
  uselistorder label %dec_label_pc_1257c, { 1, 0 }
  uselistorder label %dec_label_pc_12550, { 1, 0 }
  uselistorder label %dec_label_pc_124f4, { 1, 0 }
}

define i32 @function_12638(i32 %arg1) local_unnamed_addr {
dec_label_pc_12638:
  %stack_var_-16 = alloca i32, align 4
  %v2_12638 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_12638, i32* @r0, align 4
  %v8_12654 = call i32 @function_128e4(i32 %v2_12638, i32 ptrtoint (i32* @global_var_128dc.367 to i32), i32 ptrtoint (i32* @global_var_1c1f0.421 to i32), i32 76004, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_12664 = call i32 @function_128dc()
  %v2_1266c = load i32, i32* @global_var_1c2a8.425, align 4
  %v2_12670 = icmp eq i32 %v2_1266c, 0
  br i1 %v2_12670, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_12638
  call void @__pseudo_branch(i32 %v2_1266c)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12638, %bb
  store i32 %v2_12638, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_12694.427 to i32), i32* @lr, align 4
  %v8_12690 = call i32 @function_128e4(i32 %v2_12638, i32 1, i32 ptrtoint (i32* @global_var_1c1f0.421 to i32), i32 76004, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_12690, i32* @r0, align 4
  %v1_12694 = call i32 @function_12870(i32 %v8_12690)
  store i1 true, i1* @cpsr_z, align 1
  %v0_126a8 = load i32, i32* @r4, align 4
  %v1_126ac = call i32 @function_12ce0(i32 %v0_126a8)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_12638, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_128dc, { 4, 2, 1, 3, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_128e4, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 76004, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1c1f0.421 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_128dc.367 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_126cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_126cc:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_126cc = load i32, i32* @r4, align 4
  store i32 %v3_126cc, i32* %stack_var_-20, align 4
  %v6_126cc = load i32, i32* @r5, align 4
  %v9_126cc = load i32, i32* @r6, align 4
  %v16_126cc = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_126d0 = icmp eq i32 %arg1, 0
  %v2_126d4 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_126d0, label %dec_label_pc_12858, label %dec_label_pc_126ec.preheader

dec_label_pc_126ec.preheader:                     ; preds = %dec_label_pc_126cc
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_126f417 = add i32 %v16_126cc, 124
  br label %dec_label_pc_126e4

dec_label_pc_126e4:                               ; preds = %dec_label_pc_126ec.preheader, %dec_label_pc_126e4
  %v5_126f418 = phi i32 [ %v5_126f417, %dec_label_pc_126ec.preheader ], [ %v5_126f4, %dec_label_pc_126e4 ]
  %v2_126e8 = add i32 %v5_126f418, -136
  %v3_126e8 = inttoptr i32 %v2_126e8 to i32*
  store i32 0, i32* %v3_126e8, align 4
  %v0_126ec.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_126ec = add i32 %v0_126ec.pre, -1
  store i32 %v1_126ec, i32* %r1.global-to-local, align 4
  %v6_126ec = icmp slt i32 %v1_126ec, 0
  %v4_126f4 = mul i32 %v1_126ec, 4
  %v5_126f4 = add i32 %v4_126f4, %v16_126cc
  br i1 %v6_126ec, label %dec_label_pc_126fc, label %dec_label_pc_126e4

dec_label_pc_126fc:                               ; preds = %dec_label_pc_126e4
  %v2_126fc = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_126fc, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_1270c = load i32, i32* @ip, align 4
  store i32 %v0_1270c, i32* %stack_var_-28, align 4
  %v0_12714 = call i32 @function_11d00()
  store i32 %v0_12714, i32* %r0.global-to-local, align 4
  %v1_12718 = load i32, i32* @r5, align 4
  %v5_1271c = icmp slt i32 %v0_12714, %v1_12718
  br i1 %v5_1271c, label %dec_label_pc_12860, label %dec_label_pc_12720

dec_label_pc_12720:                               ; preds = %dec_label_pc_126fc
  %v2_12720 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_12720, i32* @r4, align 4
  store i32 %v1_12718, i32* %r0.global-to-local, align 4
  store i32 %v2_126fc, i32* %r1.global-to-local, align 4
  %v3_12730 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_12730 = call i32 @function_11548(i32 %v1_12718, %_TYPEDEF_sigset_t* %v3_12730, i32 %v2_12720)
  store i32 %v4_12730, i32* %r0.global-to-local, align 4
  %v1_12734 = load i32, i32* @r5, align 4
  %v9_12734 = icmp eq i32 %v4_12730, %v1_12734
  br i1 %v9_12734, label %dec_label_pc_1273c, label %dec_label_pc_12860

dec_label_pc_1273c:                               ; preds = %dec_label_pc_12720
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_12720, i32* %r0.global-to-local, align 4
  %v2_12744 = call i32 @function_11cdc(i32 %v2_12720, i32 17)
  store i32 %v2_12744, i32* %r0.global-to-local, align 4
  %v1_12748 = load i32, i32* @r5, align 4
  %v9_12748 = icmp eq i32 %v2_12744, %v1_12748
  br i1 %v9_12748, label %dec_label_pc_12760.preheader, label %dec_label_pc_1273c.dec_label_pc_12828_crit_edge

dec_label_pc_1273c.dec_label_pc_12828_crit_edge:  ; preds = %dec_label_pc_1273c
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_12828

dec_label_pc_12760.preheader:                     ; preds = %dec_label_pc_1273c
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12758

dec_label_pc_12758:                               ; preds = %dec_label_pc_12760.preheader, %dec_label_pc_12758
  %v5_1276816 = phi i32 [ %v5_126f417, %dec_label_pc_12760.preheader ], [ %v5_12768, %dec_label_pc_12758 ]
  %v2_1275c = add i32 %v5_1276816, -136
  %v3_1275c = inttoptr i32 %v2_1275c to i32*
  store i32 0, i32* %v3_1275c, align 4
  %v0_12760.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12760 = add i32 %v0_12760.pre, -1
  store i32 %v1_12760, i32* %r1.global-to-local, align 4
  %v6_12760 = icmp slt i32 %v1_12760, 0
  %v4_12768 = mul i32 %v1_12760, 4
  %v5_12768 = add i32 %v4_12768, %v16_126cc
  br i1 %v6_12760, label %dec_label_pc_12770, label %dec_label_pc_12758

dec_label_pc_12770:                               ; preds = %dec_label_pc_12758
  store i32 %v2_126fc, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_12778 = call i32 @function_11d00()
  store i32 %v0_12778, i32* %r0.global-to-local, align 4
  %v1_1277c = icmp slt i32 %v0_12778, 0
  br i1 %v1_1277c, label %dec_label_pc_12860, label %dec_label_pc_12784

dec_label_pc_12784:                               ; preds = %dec_label_pc_12770
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_12790 = call i32 @function_12bc8(i32 17, i32* null, i32 %v2_126d4)
  store i32 %v4_12790, i32* %r0.global-to-local, align 4
  %v1_12794 = icmp slt i32 %v4_12790, 0
  br i1 %v1_12794, label %dec_label_pc_1279c, label %dec_label_pc_127c4

dec_label_pc_1279c:                               ; preds = %dec_label_pc_12784
  %v0_1279c = call i32 @function_118a0()
  store i32 %v2_12720, i32* %r1.global-to-local, align 4
  store i32 %v0_1279c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_127b0 = inttoptr i32 %v0_1279c to i32*
  %v2_127b0 = load i32, i32* %v1_127b0, align 4
  store i32 %v2_127b0, i32* @r4, align 4
  %v3_127b4 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_127b4 = call i32 @function_11548(i32 2, %_TYPEDEF_sigset_t* %v3_127b4, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_127bc = load i32, i32* @r4, align 4
  %v1_127bc = load i32, i32* %r5.global-to-local, align 4
  %v2_127bc = inttoptr i32 %v1_127bc to i32*
  store i32 %v0_127bc, i32* %v2_127bc, align 4
  %v17_12868.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12864

dec_label_pc_127c4:                               ; preds = %dec_label_pc_12784
  %v2_127c4 = load i32, i32* %stack_var_-424, align 4
  %v7_127c8 = icmp eq i32 %v2_127c4, 1
  %v2_127d0 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_127d0, i32* @r4, align 4
  br i1 %v7_127c8, label %dec_label_pc_127d8, label %dec_label_pc_1280c

dec_label_pc_127d8:                               ; preds = %dec_label_pc_127c4
  store i32 %v2_127d0, i32* %r1.global-to-local, align 4
  store i32 %v2_127d0, i32* %r0.global-to-local, align 4
  %v2_127e0 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_127e0 = call i32 @function_13064(%timespec* %v2_127e0, i32 %v2_127d0)
  store i32 %v3_127e0, i32* %r0.global-to-local, align 4
  store i32 %v3_127e0, i32* %r6.global-to-local, align 4
  %v0_127e8 = call i32 @function_118a0()
  store i32 %v2_12720, i32* %r1.global-to-local, align 4
  store i32 %v0_127e8, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_127fc = inttoptr i32 %v0_127e8 to i32*
  %v2_127fc = load i32, i32* %v1_127fc, align 4
  store i32 %v2_127fc, i32* @r4, align 4
  %v3_12800 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_12800 = call i32 @function_11548(i32 2, %_TYPEDEF_sigset_t* %v3_12800, i32 0)
  store i32 %v4_12800, i32* %r0.global-to-local, align 4
  %v0_12804 = load i32, i32* @r4, align 4
  %v1_12804 = load i32, i32* %r5.global-to-local, align 4
  %v2_12804 = inttoptr i32 %v1_12804 to i32*
  store i32 %v0_12804, i32* %v2_12804, align 4
  %v0_12834.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12834

dec_label_pc_1280c:                               ; preds = %dec_label_pc_127c4
  store i32 %v2_12720, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_12818 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_12818 = call i32 @function_11548(i32 2, %_TYPEDEF_sigset_t* %v3_12818, i32 0)
  store i32 %v4_12818, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12828

dec_label_pc_12828:                               ; preds = %dec_label_pc_1273c.dec_label_pc_12828_crit_edge, %dec_label_pc_1280c
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_1273c.dec_label_pc_12828_crit_edge ], [ %v2_127d0, %dec_label_pc_1280c ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_1282c = bitcast i32* %stack_var_-28 to %timespec*
  %v3_1282c = call i32 @function_13064(%timespec* %v2_1282c, i32 %storemerge.pre-phi)
  store i32 %v3_1282c, i32* %r0.global-to-local, align 4
  store i32 %v3_1282c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12834

dec_label_pc_12834:                               ; preds = %dec_label_pc_127d8, %dec_label_pc_12828
  %v0_12834 = phi i32 [ %v0_12834.pr, %dec_label_pc_127d8 ], [ %v3_1282c, %dec_label_pc_12828 ]
  %v2_12834 = icmp eq i32 %v0_12834, 0
  br i1 %v2_12834, label %dec_label_pc_12858, label %dec_label_pc_1283c

dec_label_pc_1283c:                               ; preds = %dec_label_pc_12834
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_12844 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_12844, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12864

dec_label_pc_12858:                               ; preds = %dec_label_pc_126cc, %dec_label_pc_12834
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12864

dec_label_pc_12860:                               ; preds = %dec_label_pc_12720, %dec_label_pc_12770, %dec_label_pc_126fc
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12864

dec_label_pc_12864:                               ; preds = %dec_label_pc_1283c, %dec_label_pc_12858, %dec_label_pc_1279c, %dec_label_pc_12860
  %v17_12868 = phi i32 [ %v3_12844, %dec_label_pc_1283c ], [ 0, %dec_label_pc_12858 ], [ %v17_12868.pre, %dec_label_pc_1279c ], [ -1, %dec_label_pc_12860 ]
  %v2_12868 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12868, i32* @r4, align 4
  store i32 %v6_126cc, i32* @r5, align 4
  store i32 %v9_126cc, i32* @r6, align 4
  ret i32 %v17_12868

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_127d0, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_12760, { 0, 2, 1 }
  uselistorder i32 %v2_12720, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_12718, { 1, 0, 2 }
  uselistorder i32 %v1_126ec, { 0, 2, 1 }
  uselistorder i32 %v16_126cc, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 22, 10, 12, 13, 11, 15, 14, 16, 21, 17, 19, 18, 20, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_12bc8, { 1, 2, 0 }
  uselistorder i32 ()* @function_11d00, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12864, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_12860, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12858, { 1, 0 }
  uselistorder label %dec_label_pc_12834, { 1, 0 }
  uselistorder label %dec_label_pc_12828, { 1, 0 }
  uselistorder label %dec_label_pc_12758, { 1, 0 }
  uselistorder label %dec_label_pc_126e4, { 1, 0 }
}

define i32 @function_12870(i32 %arg1) local_unnamed_addr {
dec_label_pc_1289c:
  %stack_var_-8 = alloca i32, align 4
  %v3_12870 = load i32, i32* @r4, align 4
  store i32 %v3_12870, i32* %stack_var_-8, align 4
  %v2_128a0 = load i32, i32* @global_var_1c2b8.434, align 4
  %v2_128a4 = icmp eq i32 %v2_128a0, 0
  br i1 %v2_128a4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1289c
  store i32 75952, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_128a0)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1289c, %bb
  %v2_128b4 = load i32, i32* @global_var_1c2bc.436, align 4
  %v2_128b8 = icmp eq i32 %v2_128b4, 0
  br i1 %v2_128b8, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_128bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_128bc, i32* @r4, align 4
  %v9_128bc = load i32, i32* @r0, align 4
  ret i32 %v9_128bc

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_128c8.437 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_128b4)
  %v2_128c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_128c8, i32* @r4, align 4
  %v8_128c8 = load i32, i32* @r0, align 4
  ret i32 %v8_128c8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_128dc() local_unnamed_addr {
dec_label_pc_128dc:
  ret i32 0
}

define i32 @function_128e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_128e4:
  %v1_128e4 = load i32, i32* @r0, align 4
  ret i32 %v1_128e4
}

define i32 @function_128e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_128e8:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_128e8 = load i32, i32* @r4, align 4
  store i32 %v3_128e8, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_128f8 = call i32 @function_11208(i32 %arg1, i32 1)
  %v7_128fc = icmp eq i32 %v2_128f8, -1
  br i1 %v7_128fc, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_128e8
  %v3_12900 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_12900, i32* @r4, align 4
  ret i32 %v2_128f8

bb4:                                              ; preds = %dec_label_pc_128e8
  %v0_12904 = load i32, i32* @r4, align 4
  %v4_1290c = call i32 @function_113f8(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13d8c.439, i32 0, i32 0), i32 %v0_12904)
  %v1_12910 = load i32, i32* %r5.global-to-local, align 4
  %v9_12910 = icmp eq i32 %v4_1290c, %v1_12910
  br i1 %v9_12910, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_12914 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_12914, i32* @r4, align 4
  ret i32 %v4_1290c

bb6:                                              ; preds = %bb4
  %v0_12918 = call i32 @function_12344()
  %v0_1291c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1291c, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_12918

; uselistorder directives
  uselistorder i32 %v2_128f8, { 1, 0 }
  uselistorder i1* @cpsr_z, { 7, 6, 0, 8, 3, 4, 1, 2, 5 }
  uselistorder i32 ()* @function_12344, { 2, 1, 0, 3 }
  uselistorder i32 (i8*, i32)* @function_113f8, { 9, 4, 0, 7, 8, 1, 2, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_11208, { 0, 7, 11, 10, 13, 12, 9, 8, 2, 1, 6, 5, 4, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_12920(i32 %arg1) local_unnamed_addr {
dec_label_pc_12920:
  %v2_12924 = load i32, i32* @global_var_1c2c0.441, align 4
  %v2_12928 = icmp eq i32 %v2_12924, 0
  br i1 %v2_12928, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_12920
  %v6_12934 = load i32, i32* @r0, align 4
  ret i32 %v6_12934

bb2:                                              ; preds = %dec_label_pc_12920
  store i32 1, i32* @global_var_1c2c0.441, align 4
  store i32 4096, i32* @global_var_1c2b4.392, align 4
  ret i32 undef
}

define i32 @function_1297c(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1297c:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_12980 = mul i32 %arg2, 4
  %v5_12980 = add i32 %tmp, %v4_12980
  %v2_12984 = load i32, i32* %arg3, align 4
  %v2_12988 = ptrtoint i32* %stack_var_-120 to i32
  %v1_1298c = add i32 %v5_12980, 4
  %v9_12990 = icmp eq i32 %v1_1298c, %v2_12984
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1c2ac.446, align 4
  store i32 %v1_1298c, i32* @global_var_1c2b0.448, align 4
  store i32 %arg6, i32* @global_var_1c2bc.436, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_12990, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_1297c
  store i32 %v5_12980, i32* @global_var_1c2b0.448, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_1297c, %bb
  %v2_129d0 = bitcast i32* %stack_var_-120 to i8*
  %v3_129d0 = call i32 @function_11900(i8* %v2_129d0, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1c2b0.448, align 4
  br label %dec_label_pc_129e0

dec_label_pc_129e0:                               ; preds = %dec_label_pc_129e0, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_129e0, %dec_label_pc_129e0 ]
  %v1_129e0 = inttoptr i32 %storemerge to i32*
  %v2_129e0 = load i32, i32* %v1_129e0, align 4
  %v4_129e0 = add i32 %storemerge, 4
  %v2_129e4 = icmp eq i32 %v2_129e0, 0
  br i1 %v2_129e4, label %dec_label_pc_129f0, label %dec_label_pc_129e0

dec_label_pc_129f0:                               ; preds = %dec_label_pc_129e0
  store i32 %v4_129e0, i32* @r4, align 4
  %v1_12a1022 = inttoptr i32 %v4_129e0 to i32*
  %v2_12a1023 = load i32, i32* %v1_12a1022, align 4
  %v2_12a1425 = icmp eq i32 %v2_12a1023, 0
  br i1 %v2_12a1425, label %dec_label_pc_12a1c, label %dec_label_pc_129f8

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129f0, %dec_label_pc_12a10
  %v5_129fc = phi i32 [ %v2_12a10, %dec_label_pc_12a10 ], [ %v2_12a1023, %dec_label_pc_129f0 ]
  %v2_129f8 = icmp ugt i32 %v5_129fc, 13
  %v7_129f8 = icmp eq i32 %v5_129fc, 14
  %v2_129fc = xor i1 %v2_129f8, true
  %v3_129fc = or i1 %v7_129f8, %v2_129fc
  br i1 %v3_129fc, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_129f8
  %v6_129fc = and i32 %v5_129fc, 536870912
  %v7_129fc = icmp ne i32 %v6_129fc, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_129f8, %bb42
  %v1_12a08 = phi i1 [ %v2_129f8, %dec_label_pc_129f8 ], [ %v7_129fc, %bb42 ]
  %v2_12a00 = xor i1 %v1_12a08, true
  %v3_12a00 = or i1 %v7_129f8, %v2_12a00
  br i1 %v3_12a00, label %bb44, label %dec_label_pc_12a10

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_12a10

dec_label_pc_12a10:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_12a00, i32 ptrtoint (i32* @global_var_118e0.450 to i32))
  %v0_12a0c = load i32, i32* @r4, align 4
  %v1_12a0c = add i32 %v0_12a0c, 8
  store i32 %v1_12a0c, i32* @r4, align 4
  %v1_12a10 = inttoptr i32 %v1_12a0c to i32*
  %v2_12a10 = load i32, i32* %v1_12a10, align 4
  %v2_12a14 = icmp eq i32 %v2_12a10, 0
  br i1 %v2_12a14, label %dec_label_pc_12a1c, label %dec_label_pc_129f8

dec_label_pc_12a1c:                               ; preds = %dec_label_pc_12a10, %dec_label_pc_129f0
  %v1_12a20 = call i32 @function_13a84(i32 %v2_12988)
  store i32 %v1_12a20, i32* @r0, align 4
  %v1_12a24 = call i32 @function_12920(i32 %v1_12a20)
  store i32 %v1_12a24, i32* @r0, align 4
  %v2_12a30 = icmp eq i32 %tmp37, 0
  br i1 %v2_12a30, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_12a1c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_12a1c, %bb45
  %v0_12a40 = phi i32 [ %tmp37, %dec_label_pc_12a1c ], [ 4096, %bb45 ]
  %v3_12a38 = icmp eq i32 %tmp36, -1
  %v8_12a38 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1c2b4.392 to i32), i32* @r2, align 4
  store i32 %v0_12a40, i32* @global_var_1c2b4.392, align 4
  br i1 %v3_12a38, label %dec_label_pc_12a48, label %dec_label_pc_12a70

dec_label_pc_12a48:                               ; preds = %bb46
  %v0_12a48 = call i32 @function_12fd4()
  store i32 %v0_12a48, i32* @r0, align 4
  store i32 %v0_12a48, i32* @r4, align 4
  %v0_12a50 = call i32 @function_12f7c()
  %v0_12a54 = load i32, i32* @r4, align 4
  %v9_12a54 = icmp eq i32 %v0_12a54, %v0_12a50
  br i1 %v9_12a54, label %dec_label_pc_12a5c, label %dec_label_pc_12a98

dec_label_pc_12a5c:                               ; preds = %dec_label_pc_12a48
  %v1_12a5c = call i32 @function_12fa8(i32 %v0_12a50)
  store i32 %v1_12a5c, i32* @r0, align 4
  store i32 %v1_12a5c, i32* @r4, align 4
  %v0_12a64 = call i32 @function_12f50()
  %v0_12a68 = load i32, i32* @r4, align 4
  %v9_12a68 = icmp eq i32 %v0_12a68, %v0_12a64
  br i1 %v9_12a68, label %dec_label_pc_12a70, label %dec_label_pc_12a98

dec_label_pc_12a70:                               ; preds = %dec_label_pc_12a5c, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_12a38, label %dec_label_pc_12b04, label %dec_label_pc_12a7c

dec_label_pc_12a7c:                               ; preds = %dec_label_pc_12a70
  %v9_12a80 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_12a80, label %dec_label_pc_12a88, label %dec_label_pc_12a98

dec_label_pc_12a88:                               ; preds = %dec_label_pc_12a7c
  br label %dec_label_pc_12a98

dec_label_pc_12a98:                               ; preds = %dec_label_pc_12a88, %dec_label_pc_12a7c, %dec_label_pc_12a5c, %dec_label_pc_12a48
  %v2_12aa0 = call i32 @function_128e8(i32 0, i32 32768)
  %v2_12aac = call i32 @function_128e8(i32 1, i32 32770)
  %v2_12ab8 = call i32 @function_128e8(i32 2, i32 32770)
  br label %dec_label_pc_12b04

dec_label_pc_12b04:                               ; preds = %dec_label_pc_12a98, %dec_label_pc_12a70
  %v0_12ac8 = load i32, i32* %r6.global-to-local, align 4
  %v1_12ac8 = inttoptr i32 %v0_12ac8 to i32*
  %v2_12ac8 = load i32, i32* %v1_12ac8, align 4
  store i32 %v2_12ac8, i32* @global_var_1c208, align 4
  store i32 %arg5, i32* @global_var_1c2b8.434, align 4
  %v2_12b04 = icmp eq i32 %arg4, 0
  br i1 %v2_12b04, label %dec_label_pc_12b40, label %bb47

bb47:                                             ; preds = %dec_label_pc_12b04
  br label %dec_label_pc_12b40

dec_label_pc_12b40:                               ; preds = %dec_label_pc_12b04, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_12b50 = call i32 @function_118a0()
  %v2_12b58 = inttoptr i32 %v1_12b50 to i32*
  store i32 0, i32* %v2_12b58, align 4
  %v0_12b84 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_12b90 = call i32 @function_12638(i32 %v0_12b84)
  ret i32 %v1_12b90

; uselistorder directives
  uselistorder i32 %v2_12a10, { 1, 0 }
  uselistorder i32 %v1_12a0c, { 1, 0 }
  uselistorder i1 %v2_129f8, { 1, 0 }
  uselistorder i32 %v4_129e0, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_12638, { 0, 6, 5, 1, 4, 3, 2 }
  uselistorder i32 (i32, i32)* @function_128e8, { 2, 0, 1 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1c2b4.392, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 7, 4, 8, 5, 9, 2, 6, 10, 11 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 73, 2, 3, 4, 5, 6, 7, 8, 41, 9, 10, 11, 12, 13, 96, 39, 42, 49, 97, 17, 18, 19, 74, 60, 75, 76, 77, 43, 20, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 21, 22, 94, 95, 59, 40, 50, 98, 15, 16, 58, 14, 99, 34, 33, 51, 54, 52, 55, 47, 53, 48, 57, 100, 23, 101, 102, 24, 103, 61, 62, 104, 63, 64, 105, 65, 66, 25, 26, 106, 67, 68, 27, 28, 107, 69, 70, 29, 30, 108, 71, 72, 31, 32, 46, 109, 110, 56, 111, 44, 35, 45, 36, 37, 38 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_12b40, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_12a10, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_129f8, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_12bc8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12bc8:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_12bc8 = load i32, i32* @r4, align 4
  %v6_12bc8 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_12bcc = icmp eq i32* %arg2, null
  %v2_12bd0 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_12bcc, label %dec_label_pc_12c3c, label %dec_label_pc_12be0

dec_label_pc_12be0:                               ; preds = %dec_label_pc_12bc8
  %v2_12be4 = load i32, i32* %arg2, align 4
  %v4_12be4 = add i32 %tmp, 4
  store i32 %v4_12be4, i32* @r1, align 4
  %v2_12be8 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_12be8, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_12be4, i32* %stack_var_-156, align 4
  %v3_12bf4 = call i32 @function_118e0(i32 %v2_12be8, i32 %v4_12be4, i32 128)
  store i32 %v3_12bf4, i32* %r0.global-to-local, align 4
  %v0_12bf8 = load i32, i32* @r4, align 4
  %v1_12bf8 = add i32 %v0_12bf8, 132
  %v2_12bf8 = inttoptr i32 %v1_12bf8 to i32*
  %v3_12bf8 = load i32, i32* %v2_12bf8, align 4
  %v1_12bfc = and i32 %v3_12bf8, 67108864
  %v2_12bfc = icmp eq i32 %v1_12bfc, 0
  br i1 %v2_12bfc, label %dec_label_pc_12c10, label %bb

bb:                                               ; preds = %dec_label_pc_12be0
  br label %dec_label_pc_12c2c

dec_label_pc_12c10:                               ; preds = %dec_label_pc_12be0
  %v1_12c18 = and i32 %v3_12bf8, 4
  %v2_12c18 = icmp eq i32 %v1_12c18, 0
  br i1 %v2_12c18, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_12c10
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_12c10, %bb20
  br label %dec_label_pc_12c2c

dec_label_pc_12c2c:                               ; preds = %bb, %bb21
  %v2_12c2c = icmp eq i32 %v0_12bf8, 0
  %v3_12c30 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_12c30 = select i1 %v2_12c2c, i32 0, i32 %v3_12c30
  %v0_12c3c.pre = load i32, i32* @r5, align 4
  %v0_12c4c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12c3c

dec_label_pc_12c3c:                               ; preds = %dec_label_pc_12c2c, %dec_label_pc_12bc8
  %v0_12c4c = phi i32 [ %arg1, %dec_label_pc_12bc8 ], [ %v0_12c4c.pre, %dec_label_pc_12c2c ]
  %v0_12c3c = phi i32 [ %arg3, %dec_label_pc_12bc8 ], [ %v0_12c3c.pre, %dec_label_pc_12c2c ]
  %storemerge = phi i32 [ 0, %dec_label_pc_12bc8 ], [ %.v3_12c30, %dec_label_pc_12c2c ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_12c3c = icmp eq i32 %v0_12c3c, 0
  %.v2_12bd0 = select i1 %v2_12c3c, i32 0, i32 %v2_12bd0
  store i32 %.v2_12bd0, i32* @r2, align 4
  store i32 %v0_12c4c, i32* %r0.global-to-local, align 4
  %v1_12c50 = call i32 @function_12cb4(i32 %v0_12c4c)
  store i32 %v1_12c50, i32* %r0.global-to-local, align 4
  %v0_12c54 = load i32, i32* @r5, align 4
  %v2_12c54 = icmp eq i32 %v0_12c54, 0
  br i1 %v2_12c54, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_12c3c
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_12c3c, %bb25
  %v0_12c64.pr = phi i32 [ 0, %dec_label_pc_12c3c ], [ 1, %bb25 ]
  %v1_12c5c = icmp slt i32 %v1_12c50, 0
  br i1 %v1_12c5c, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_12c98

thread-pre-split:                                 ; preds = %bb26
  %v2_12c64 = icmp eq i32 %v0_12c64.pr, 0
  store i32 %v1_12c50, i32* @r4, align 4
  br i1 %v2_12c64, label %dec_label_pc_12c98, label %dec_label_pc_12c70

dec_label_pc_12c70:                               ; preds = %thread-pre-split
  %v2_12c70 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_12c54, i32* %r0.global-to-local, align 4
  %v2_12c78 = inttoptr i32 %v0_12c54 to i32*
  store i32 %v2_12c70, i32* %v2_12c78, align 4
  %v3_12c78 = load i32, i32* %r0.global-to-local, align 4
  %v4_12c78 = add i32 %v3_12c78, 4
  store i32 %v4_12c78, i32* @r0, align 4
  %v2_12c7c = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_12c7c, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_12c84 = call i32 @function_118e0(i32 %v4_12c78, i32 %v2_12c7c, i32 128)
  store i32 %v3_12c84, i32* %r0.global-to-local, align 4
  %v1_12c8c = load i32, i32* @r5, align 4
  %v2_12c8c = add i32 %v1_12c8c, 136
  %v3_12c8c = inttoptr i32 %v2_12c8c to i32*
  %v1_12c94 = load i32, i32* @r5, align 4
  %v2_12c94 = add i32 %v1_12c94, 132
  %v3_12c94 = inttoptr i32 %v2_12c94 to i32*
  %v0_12c98.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12c98

dec_label_pc_12c98:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_12c70
  %v0_12c98 = phi i32 [ %v1_12c50, %thread-pre-split ], [ %v0_12c98.pre, %dec_label_pc_12c70 ], [ %v1_12c50, %thread-pre-split.thread ]
  store i32 %v0_12c98, i32* %r0.global-to-local, align 4
  store i32 %v3_12bc8, i32* @r4, align 4
  store i32 %v6_12bc8, i32* @r5, align 4
  ret i32 %v0_12c98

; uselistorder directives
  uselistorder i32 %v0_12c98, { 1, 0 }
  uselistorder i32 %v0_12c54, { 1, 0, 2 }
  uselistorder i32 %v0_12c4c, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_12c98, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_12c2c, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_12cb4(i32 %arg1) local_unnamed_addr {
dec_label_pc_12cb4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12cb4 = load i32, i32* @r4, align 4
  store i32 %v3_12cb4, i32* %stack_var_-8, align 4
  %v1_12cb8 = load i32, i32* @r1, align 4
  %v2_12cb8 = inttoptr i32 %v1_12cb8 to %sigaction*
  %v3_12cb8 = load i32, i32* @r2, align 4
  %v4_12cb8 = inttoptr i32 %v3_12cb8 to %sigaction*
  %v5_12cb8 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_12cb8, %sigaction* %v4_12cb8)
  store i32 %v5_12cb8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12cb8, -4095
  br i1 %tmp, label %dec_label_pc_12cd8, label %dec_label_pc_12cc8

dec_label_pc_12cc8:                               ; preds = %dec_label_pc_12cb4
  %v0_12cc8 = call i32 @function_118a0()
  %v0_12ccc = load i32, i32* %r4.global-to-local, align 4
  %v1_12ccc = sub i32 0, %v0_12ccc
  %v2_12cd0 = inttoptr i32 %v0_12cc8 to i32*
  store i32 %v1_12ccc, i32* %v2_12cd0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12cd8

dec_label_pc_12cd8:                               ; preds = %dec_label_pc_12cb4, %dec_label_pc_12cc8
  %v0_12cd8 = phi i32 [ %v5_12cb8, %dec_label_pc_12cb4 ], [ -1, %dec_label_pc_12cc8 ]
  %v2_12cdc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12cdc, i32* %r4.global-to-local, align 4
  ret i32 %v0_12cd8

; uselistorder directives
  uselistorder i32 %v5_12cb8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12cd8, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_12ce0(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_12ce0:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_12d08() local_unnamed_addr {
dec_label_pc_12d08:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_12d18 = load i32, i32* @r0, align 4
  %v4_12d18 = call i32 @fstat(i32 %v0_12d18, %stat* %tmp4)
  store i32 %v4_12d18, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12d18, -4095
  br i1 %tmp, label %dec_label_pc_12d3c, label %dec_label_pc_12d28

dec_label_pc_12d28:                               ; preds = %dec_label_pc_12d08
  %v0_12d28 = call i32 @function_118a0()
  %v0_12d2c = load i32, i32* %r4.global-to-local, align 4
  %v1_12d2c = sub i32 0, %v0_12d2c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12d34 = inttoptr i32 %v0_12d28 to i32*
  store i32 %v1_12d2c, i32* %v2_12d34, align 4
  br label %dec_label_pc_12d4c

dec_label_pc_12d3c:                               ; preds = %dec_label_pc_12d08
  %v2_12d3c = icmp eq i32 %v4_12d18, 0
  store i32 77132, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12d3c, i32 ptrtoint (i32* @global_var_13424.466 to i32))
  br label %dec_label_pc_12d4c

dec_label_pc_12d4c:                               ; preds = %dec_label_pc_12d28, %dec_label_pc_12d3c
  %v0_12d4c = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_12d4c

; uselistorder directives
  uselistorder i32 %v4_12d18, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 3, 10, 8, 9, 6, 7, 0, 1, 2, 4, 5 }
  uselistorder label %dec_label_pc_12d4c, { 1, 0 }
}

define i32 @function_12d58(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12d58:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_12d58 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12d60 = call i32 @function_12dec()
  store i32 %v0_12d60, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_12d60, 1
  br i1 %tmp8, label %dec_label_pc_12de4, label %dec_label_pc_12dd0.preheader

dec_label_pc_12dd0.preheader:                     ; preds = %dec_label_pc_12d58
  %v5_12d68 = load i32, i32* @r4, align 4
  %v7_12d68 = add i32 %v5_12d68, %v0_12d60
  store i32 %v7_12d68, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12dd0

dec_label_pc_12d74:                               ; preds = %dec_label_pc_12dd0
  %v1_12d74 = add i32 %v2_12d84, 16
  %v2_12d74 = inttoptr i32 %v1_12d74 to i32*
  %v3_12d74 = load i32, i32* %v2_12d74, align 4
  store i32 %v3_12d74, i32* @lr, align 4
  %v2_12d78 = inttoptr i32 %v1_12dd4 to i32*
  %v3_12d78 = load i32, i32* %v2_12d78, align 4
  store i32 %v3_12d78, i32* %r2.global-to-local, align 4
  %v1_12d7c = add i32 %v2_12d84, 18
  %v2_12d7c = inttoptr i32 %v1_12d7c to i8*
  %v3_12d7c = load i8, i8* %v2_12d7c, align 1
  %v4_12d7c = zext i8 %v3_12d7c to i32
  store i32 %v4_12d7c, i32* %ip.global-to-local, align 4
  %v3_12d80 = sdiv i32 %v3_12d74, 256
  store i32 %v3_12d80, i32* %r3.global-to-local, align 4
  %v1_12d84 = trunc i32 %v3_12d74 to i8
  %v4_12d84 = inttoptr i32 %v1_12dd4 to i8*
  store i8 %v1_12d84, i8* %v4_12d84, align 1
  %v0_12d88 = load i32, i32* %r2.global-to-local, align 4
  %v1_12d88 = load i32, i32* @r4, align 4
  %v2_12d88 = add i32 %v1_12d88, 4
  %v3_12d88 = inttoptr i32 %v2_12d88 to i32*
  store i32 %v0_12d88, i32* %v3_12d88, align 4
  %v0_12d8c = load i32, i32* %ip.global-to-local, align 4
  %v1_12d8c = trunc i32 %v0_12d8c to i8
  %v2_12d8c = load i32, i32* @r4, align 4
  %v3_12d8c = add i32 %v2_12d8c, 10
  %v4_12d8c = inttoptr i32 %v3_12d8c to i8*
  store i8 %v1_12d8c, i8* %v4_12d8c, align 1
  %v0_12d90 = load i32, i32* %r3.global-to-local, align 4
  %v1_12d90 = trunc i32 %v0_12d90 to i8
  %v2_12d90 = load i32, i32* @r4, align 4
  %v3_12d90 = add i32 %v2_12d90, 9
  %v4_12d90 = inttoptr i32 %v3_12d90 to i8*
  store i8 %v1_12d90, i8* %v4_12d90, align 1
  %v0_12d94 = load i32, i32* @r4, align 4
  %v1_12d94 = add i32 %v0_12d94, 8
  %v2_12d94 = inttoptr i32 %v1_12d94 to i8*
  %v3_12d94 = load i8, i8* %v2_12d94, align 1
  %v4_12d94 = zext i8 %v3_12d94 to i32
  store i32 %v4_12d94, i32* %r2.global-to-local, align 4
  %v0_12d98 = load i32, i32* @r5, align 4
  %v1_12d98 = add i32 %v0_12d98, 1
  %v2_12d98 = inttoptr i32 %v1_12d98 to i8*
  %v3_12d98 = load i8, i8* %v2_12d98, align 1
  %v4_12d98 = zext i8 %v3_12d98 to i32
  store i32 %v4_12d98, i32* %r3.global-to-local, align 4
  %v4_12d9c = mul nuw nsw i32 %v4_12d98, 256
  %v5_12d9c = or i32 %v4_12d9c, %v4_12d94
  %v1_12da0 = add nsw i32 %v5_12d9c, -19
  store i32 %v1_12da0, i32* @r2, align 4
  %v3_12da4 = call i32 @function_118f0(i32 %v1_12ddc, i32 %v1_12dd8, i32 %v1_12da0)
  %v0_12da8 = load i32, i32* @r4, align 4
  %v1_12da8 = add i32 %v0_12da8, 8
  %v2_12da8 = inttoptr i32 %v1_12da8 to i8*
  %v3_12da8 = load i8, i8* %v2_12da8, align 1
  %v4_12da8 = zext i8 %v3_12da8 to i32
  store i32 %v4_12da8, i32* %r3.global-to-local, align 4
  %v0_12dac = load i32, i32* @r5, align 4
  %v1_12dac = add i32 %v0_12dac, 1
  %v2_12dac = inttoptr i32 %v1_12dac to i8*
  %v3_12dac = load i8, i8* %v2_12dac, align 1
  %v4_12dac = zext i8 %v3_12dac to i32
  store i32 %v0_12da8, i32* @r0, align 4
  %v4_12db4 = mul nuw nsw i32 %v4_12dac, 256
  %v5_12db4 = or i32 %v4_12db4, %v4_12da8
  store i32 %v5_12db4, i32* @r2, align 4
  store i32 %v0_12da8, i32* @r1, align 4
  %v3_12dbc = call i32 @function_118f0(i32 %v0_12da8, i32 %v0_12da8, i32 %v5_12db4)
  %v0_12dc0 = load i32, i32* @r4, align 4
  %v1_12dc0 = add i32 %v0_12dc0, 8
  %v2_12dc0 = inttoptr i32 %v1_12dc0 to i8*
  %v3_12dc0 = load i8, i8* %v2_12dc0, align 1
  %v4_12dc0 = zext i8 %v3_12dc0 to i32
  store i32 %v4_12dc0, i32* %r3.global-to-local, align 4
  %v0_12dc4 = load i32, i32* @r5, align 4
  %v1_12dc4 = add i32 %v0_12dc4, 1
  %v2_12dc4 = inttoptr i32 %v1_12dc4 to i8*
  %v3_12dc4 = load i8, i8* %v2_12dc4, align 1
  %v4_12dc4 = zext i8 %v3_12dc4 to i32
  store i32 %v4_12dc4, i32* @r2, align 4
  %v4_12dc8 = mul nuw nsw i32 %v4_12dc4, 256
  %v5_12dc8 = or i32 %v4_12dc8, %v4_12dc0
  store i32 %v5_12dc8, i32* %r3.global-to-local, align 4
  %v2_12dcc = add i32 %v5_12dc8, %v0_12dc0
  store i32 %v2_12dcc, i32* @r4, align 4
  %v1_12dd0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12dd0

dec_label_pc_12dd0:                               ; preds = %dec_label_pc_12dd0.preheader, %dec_label_pc_12d74
  %v1_12dd0 = phi i32 [ %v7_12d68, %dec_label_pc_12dd0.preheader ], [ %v1_12dd0.pre, %dec_label_pc_12d74 ]
  %v2_12d84 = phi i32 [ %v5_12d68, %dec_label_pc_12dd0.preheader ], [ %v2_12dcc, %dec_label_pc_12d74 ]
  %v3_12dd0 = icmp ult i32 %v2_12d84, %v1_12dd0
  %v1_12dd4 = add i32 %v2_12d84, 8
  store i32 %v1_12dd4, i32* @r5, align 4
  %v1_12dd8 = add i32 %v2_12d84, 19
  store i32 %v1_12dd8, i32* @r1, align 4
  %v1_12ddc = add i32 %v2_12d84, 11
  store i32 %v1_12ddc, i32* @r0, align 4
  br i1 %v3_12dd0, label %dec_label_pc_12d74, label %dec_label_pc_12de4.loopexit

dec_label_pc_12de4.loopexit:                      ; preds = %dec_label_pc_12dd0
  %v0_12de4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12de4

dec_label_pc_12de4:                               ; preds = %dec_label_pc_12d58, %dec_label_pc_12de4.loopexit
  %v0_12de4 = phi i32 [ %v0_12de4.pre, %dec_label_pc_12de4.loopexit ], [ %v0_12d60, %dec_label_pc_12d58 ]
  store i32 %v6_12d58, i32* @r5, align 4
  ret i32 %v0_12de4

; uselistorder directives
  uselistorder i32 %v1_12ddc, { 1, 0 }
  uselistorder i32 %v1_12dd8, { 1, 0 }
  uselistorder i32 %v1_12dd4, { 2, 1, 0 }
  uselistorder i32 %v2_12d84, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_12da8, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_12d74, { 1, 0, 2 }
  uselistorder i32 %v5_12d68, { 1, 0 }
  uselistorder i32 %v0_12d60, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_118f0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12de4, { 1, 0 }
  uselistorder label %dec_label_pc_12dd0, { 1, 0 }
}

define i32 @function_12dec() local_unnamed_addr {
dec_label_pc_12dec:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_12df0 = load i32, i32* @r4, align 4
  %v9_12df0 = load i32, i32* @r6, align 4
  %v0_12df4 = load i32, i32* @r2, align 4
  %v1_12df4 = add i32 %v0_12df4, 6
  %v2_12dfc = ptrtoint i32* %stack_var_-60 to i32
  %v1_12e00 = and i32 %v1_12df4, -4
  store i32 %v1_12e00, i32* %r3.global-to-local, align 4
  %v2_12e04 = sub i32 %v2_12dfc, %v1_12e00
  %v0_12e08 = load i32, i32* @r1, align 4
  store i32 %v0_12e08, i32* %r8.global-to-local, align 4
  store i32 %v0_12df4, i32* %stack_var_-60, align 4
  store i32 %v2_12e04, i32* %sl.global-to-local, align 4
  %v0_12e14 = load i32, i32* @r0, align 4
  %v1_12e18 = inttoptr i32 %v2_12e04 to %linux_dirent64*
  store i32 %v2_12e04, i32* %r1.global-to-local, align 4
  %v5_12e1c = call i32 @getdents64(i32 %v0_12e14, %linux_dirent64* %v1_12e18, i32 %v0_12df4)
  store i32 %v5_12e1c, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_12e1c, -4095
  br i1 %tmp, label %dec_label_pc_12e40, label %dec_label_pc_12e2c

dec_label_pc_12e2c:                               ; preds = %dec_label_pc_12dec
  %v0_12e2c = call i32 @function_118a0()
  %v0_12e30 = load i32, i32* @r6, align 4
  %v1_12e30 = sub i32 0, %v0_12e30
  store i32 %v1_12e30, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_12e38 = inttoptr i32 %v0_12e2c to i32*
  store i32 %v1_12e30, i32* %v2_12e38, align 4
  %v0_12e48.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12e48

dec_label_pc_12e40:                               ; preds = %dec_label_pc_12dec
  br i1 false, label %dec_label_pc_12e48, label %dec_label_pc_12e50

dec_label_pc_12e48:                               ; preds = %dec_label_pc_12e40, %dec_label_pc_12e2c
  %v0_12e48 = phi i32 [ -1, %dec_label_pc_12e40 ], [ %v0_12e48.pre, %dec_label_pc_12e2c ]
  store i32 %v0_12e48, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12e50:                               ; preds = %dec_label_pc_12e40
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12e58 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_12e58, i32* @r5, align 4
  %v0_12e5c = load i32, i32* @sp, align 4
  store i32 %v0_12e5c, i32* @r4, align 4
  br label %dec_label_pc_12f20

dec_label_pc_12e6c:                               ; preds = %dec_label_pc_12f20
  %v2_12f38 = add i32 %v3_12f24, %v0_12f38
  %v1_12e6c = add i32 %v0_12e70, 17
  %v2_12e6c = inttoptr i32 %v1_12e6c to i8*
  %v3_12e6c = load i8, i8* %v2_12e6c, align 1
  %v4_12e6c = zext i8 %v3_12e6c to i32
  %v2_12e70 = inttoptr i32 %v1_12f2c to i8*
  %v3_12e70 = load i8, i8* %v2_12e70, align 1
  %v4_12e70 = zext i8 %v3_12e70 to i32
  %v4_12e74 = mul nuw nsw i32 %v4_12e6c, 256
  %v5_12e74 = or i32 %v4_12e70, %v4_12e74
  %v1_12e78 = add nuw nsw i32 %v5_12e74, 3
  %v1_12e7c = and i32 %v1_12e78, 131068
  store i32 %v1_12e7c, i32* %r3.global-to-local, align 4
  %v2_12e80 = add i32 %v1_12e7c, %v2_12ec0
  store i32 %v2_12e80, i32* %sb.global-to-local, align 4
  %v9_12e84 = icmp eq i32 %v2_12e80, %v2_12f38
  %v1_12e88 = and i32 %v1_12e78, 128
  %v2_12e8c = icmp eq i32 %v1_12e88, 0
  %v3_12e8c = or i1 %v9_12e84, %v2_12e8c
  br i1 %v3_12e8c, label %dec_label_pc_12ec0, label %dec_label_pc_12e90

dec_label_pc_12e90:                               ; preds = %dec_label_pc_12e6c
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_12ea0 = call i32 @function_13000(i32 %v0_12e14, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_12ea4 = load i32, i32* @r5, align 4
  %v1_12ea4 = load i32, i32* %r8.global-to-local, align 4
  %v9_12ea4 = icmp eq i32 %v0_12ea4, %v1_12ea4
  br i1 %v9_12ea4, label %dec_label_pc_12eac, label %dec_label_pc_12f40

dec_label_pc_12eac:                               ; preds = %dec_label_pc_12e90
  %v0_12eac = call i32 @function_118a0()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_12eb8 = inttoptr i32 %v0_12eac to i32*
  store i32 22, i32* %v2_12eb8, align 4
  %v0_12f44.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12ec0:                               ; preds = %dec_label_pc_12e6c
  %v3_12e8811 = udiv i32 %v1_12e78, 256
  %v1_12ec0 = trunc i32 %v3_12e8811 to i8
  %v3_12ec0 = add i32 %v2_12ec0, 17
  %v4_12ec0 = inttoptr i32 %v3_12ec0 to i8*
  store i8 %v1_12ec0, i8* %v4_12ec0, align 1
  %v0_12ec4 = load i32, i32* %r3.global-to-local, align 4
  %v1_12ec4 = trunc i32 %v0_12ec4 to i8
  %v2_12ec4 = load i32, i32* @r5, align 4
  %v3_12ec4 = add i32 %v2_12ec4, 16
  %v4_12ec4 = inttoptr i32 %v3_12ec4 to i8*
  store i8 %v1_12ec4, i8* %v4_12ec4, align 1
  %v0_12ec8 = load i32, i32* @r4, align 4
  %v1_12ec8 = add i32 %v0_12ec8, 8
  %v1_12ecc = inttoptr i32 %v1_12ec8 to i32*
  %v2_12ecc = load i32, i32* %v1_12ecc, align 4
  %v3_12ecc = add i32 %v0_12ec8, 12
  %v4_12ecc = inttoptr i32 %v3_12ecc to i32*
  %v5_12ecc = load i32, i32* %v4_12ecc, align 4
  store i32 %v5_12ecc, i32* %r3.global-to-local, align 4
  %v1_12ed8 = inttoptr i32 %v0_12ec8 to i32*
  %v2_12ed8 = load i32, i32* %v1_12ed8, align 4
  %v3_12ed8 = add i32 %v0_12ec8, 4
  %v4_12ed8 = inttoptr i32 %v3_12ed8 to i32*
  %v5_12ed8 = load i32, i32* %v4_12ed8, align 4
  store i32 %v5_12ed8, i32* %r3.global-to-local, align 4
  %v0_12edc = load i32, i32* @r5, align 4
  %v1_12edc = inttoptr i32 %v0_12edc to i32*
  store i32 %v2_12ed8, i32* %v1_12edc, align 4
  %v3_12edc = add i32 %v0_12edc, 4
  %v4_12edc = inttoptr i32 %v3_12edc to i32*
  %v5_12edc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_12edc, i32* %v4_12edc, align 4
  %v0_12ee0 = load i32, i32* @r4, align 4
  %v1_12ee0 = add i32 %v0_12ee0, 8
  %v1_12ee4 = inttoptr i32 %v1_12ee0 to i32*
  %v2_12ee4 = load i32, i32* %v1_12ee4, align 4
  %v3_12ee4 = add i32 %v0_12ee0, 12
  %v4_12ee4 = inttoptr i32 %v3_12ee4 to i32*
  %v5_12ee4 = load i32, i32* %v4_12ee4, align 4
  store i32 %v5_12ee4, i32* %r3.global-to-local, align 4
  %v1_12ee8 = load i32, i32* @r5, align 4
  %v2_12ee8 = add i32 %v1_12ee8, 8
  %v3_12ee8 = inttoptr i32 %v2_12ee8 to i32*
  store i32 %v2_12ee4, i32* %v3_12ee8, align 4
  %v0_12eec = load i32, i32* %r3.global-to-local, align 4
  %v1_12eec = load i32, i32* @r5, align 4
  %v2_12eec = add i32 %v1_12eec, 12
  %v3_12eec = inttoptr i32 %v2_12eec to i32*
  store i32 %v0_12eec, i32* %v3_12eec, align 4
  %v0_12ef0 = load i32, i32* @r4, align 4
  %v1_12ef0 = add i32 %v0_12ef0, 18
  %v2_12ef0 = inttoptr i32 %v1_12ef0 to i8*
  %v3_12ef0 = load i8, i8* %v2_12ef0, align 1
  %v4_12ef0 = zext i8 %v3_12ef0 to i32
  store i32 %v4_12ef0, i32* %r3.global-to-local, align 4
  %v2_12ef4 = load i32, i32* @r5, align 4
  %v3_12ef4 = add i32 %v2_12ef4, 18
  %v4_12ef4 = inttoptr i32 %v3_12ef4 to i8*
  store i8 %v3_12ef0, i8* %v4_12ef4, align 1
  %v0_12ef8 = load i32, i32* @r4, align 4
  %v1_12ef8 = add i32 %v0_12ef8, 16
  %v2_12ef8 = inttoptr i32 %v1_12ef8 to i8*
  %v3_12ef8 = load i8, i8* %v2_12ef8, align 1
  %v4_12ef8 = zext i8 %v3_12ef8 to i32
  %v0_12efc = load i32, i32* %r7.global-to-local, align 4
  %v1_12efc = add i32 %v0_12efc, 1
  %v2_12efc = inttoptr i32 %v1_12efc to i8*
  %v3_12efc = load i8, i8* %v2_12efc, align 1
  %v4_12efc = zext i8 %v3_12efc to i32
  store i32 %v4_12efc, i32* %r3.global-to-local, align 4
  %v4_12f00 = mul nuw nsw i32 %v4_12efc, 256
  %v5_12f00 = or i32 %v4_12f00, %v4_12ef8
  %v1_12f04 = add nsw i32 %v5_12f00, -19
  store i32 %v1_12f04, i32* @r2, align 4
  %v3_12f08 = call i32 @function_118e0(i32 %v1_12f30, i32 %v1_12f34, i32 %v1_12f04)
  %v0_12f0c = load i32, i32* @r4, align 4
  %v1_12f0c = add i32 %v0_12f0c, 16
  %v2_12f0c = inttoptr i32 %v1_12f0c to i8*
  %v3_12f0c = load i8, i8* %v2_12f0c, align 1
  %v4_12f0c = zext i8 %v3_12f0c to i32
  store i32 %v4_12f0c, i32* %r3.global-to-local, align 4
  %v0_12f10 = load i32, i32* %r7.global-to-local, align 4
  %v1_12f10 = add i32 %v0_12f10, 1
  %v2_12f10 = inttoptr i32 %v1_12f10 to i8*
  %v3_12f10 = load i8, i8* %v2_12f10, align 1
  %v4_12f10 = zext i8 %v3_12f10 to i32
  %v4_12f14 = mul nuw nsw i32 %v4_12f10, 256
  %v5_12f14 = or i32 %v4_12f14, %v4_12f0c
  store i32 %v5_12f14, i32* %r3.global-to-local, align 4
  %v2_12f18 = add i32 %v5_12f14, %v0_12f0c
  store i32 %v2_12f18, i32* @r4, align 4
  %v0_12f1c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12f1c, i32* @r5, align 4
  %v1_12f20.pre = load i32, i32* @r6, align 4
  %v0_12f38.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12f20

dec_label_pc_12f20:                               ; preds = %dec_label_pc_12e50, %dec_label_pc_12ec0
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_12e50 ], [ %v2_12ecc, %dec_label_pc_12ec0 ]
  %v0_12f38 = phi i32 [ %v0_12e58, %dec_label_pc_12e50 ], [ %v0_12f38.pre, %dec_label_pc_12ec0 ]
  %v2_12ec0 = phi i32 [ %v0_12e58, %dec_label_pc_12e50 ], [ %v0_12f1c, %dec_label_pc_12ec0 ]
  %v0_12e70 = phi i32 [ %v0_12e5c, %dec_label_pc_12e50 ], [ %v2_12f18, %dec_label_pc_12ec0 ]
  %v1_12f20 = phi i32 [ %v5_12e1c, %dec_label_pc_12e50 ], [ %v1_12f20.pre, %dec_label_pc_12ec0 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_12e50 ], [ %v5_12ecc, %dec_label_pc_12ec0 ]
  %v0_12f20 = load i32, i32* %sl.global-to-local, align 4
  %v2_12f20 = add i32 %v0_12f20, %v1_12f20
  store i32 %v2_12f20, i32* %r3.global-to-local, align 4
  %v3_12f24 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_12f24, i32* @r2, align 4
  %v3_12f28 = icmp ult i32 %v0_12e70, %v2_12f20
  %v1_12f2c = add i32 %v0_12e70, 16
  store i32 %v1_12f2c, i32* %r7.global-to-local, align 4
  %v1_12f30 = add i32 %v2_12ec0, 19
  store i32 %v1_12f30, i32* @r0, align 4
  %v1_12f34 = add i32 %v0_12e70, 19
  store i32 %v1_12f34, i32* @r1, align 4
  br i1 %v3_12f28, label %dec_label_pc_12e6c, label %dec_label_pc_12f40

dec_label_pc_12f40:                               ; preds = %dec_label_pc_12f20, %dec_label_pc_12e90
  %v1_12f40 = phi i32 [ %v0_12ea4, %dec_label_pc_12e90 ], [ %v2_12ec0, %dec_label_pc_12f20 ]
  %v0_12f40 = phi i32 [ %v1_12ea4, %dec_label_pc_12e90 ], [ %v0_12f38, %dec_label_pc_12f20 ]
  %v2_12f40 = sub i32 %v1_12f40, %v0_12f40
  store i32 %v2_12f40, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12f44:                               ; preds = %dec_label_pc_12eac, %dec_label_pc_12e48, %dec_label_pc_12f40
  %v0_12f44 = phi i32 [ %v0_12f44.pre, %dec_label_pc_12eac ], [ %v0_12e48, %dec_label_pc_12e48 ], [ %v2_12f40, %dec_label_pc_12f40 ]
  store i32 %v3_12df0, i32* @r4, align 4
  store i32 %v9_12df0, i32* %r6.global-to-local, align 4
  ret i32 %v0_12f44

; uselistorder directives
  uselistorder i32 %v1_12f34, { 1, 0 }
  uselistorder i32 %v1_12f30, { 1, 0 }
  uselistorder i32 %v1_12f2c, { 1, 0 }
  uselistorder i32 %v3_12f24, { 1, 0 }
  uselistorder i32 %v0_12e70, { 2, 1, 3, 0 }
  uselistorder i32 %v2_12ec0, { 0, 3, 1, 2 }
  uselistorder i32 %v0_12ec8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12e58, { 1, 0, 2 }
  uselistorder i32 %v5_12e1c, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_118e0, { 3, 1, 0, 2, 5, 4 }
  uselistorder i32 128, { 3, 4, 24, 5, 25, 16, 8, 9, 10, 17, 0, 18, 11, 12, 13, 14, 15, 19, 1, 20, 2, 6, 21, 22, 23, 7 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, { 1, 138, 139, 140, 260, 261, 366, 367, 368, 369, 370, 371, 372, 374, 373, 389, 390, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 19, 20, 21, 50, 92, 93, 94, 95, 96, 97, 41, 22, 23, 98, 46, 99, 100, 101, 102, 103, 104, 24, 25, 26, 27, 28, 42, 47, 10, 11, 12, 13, 14, 15, 16, 17, 18, 51, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 52, 53, 54, 55, 48, 49, 105, 106, 107, 108, 109, 56, 57, 110, 111, 7, 112, 113, 114, 115, 58, 116, 117, 118, 119, 120, 391, 392, 393, 264, 265, 266, 267, 0, 121, 122, 123, 124, 125, 126, 127, 128, 129, 2, 130, 131, 132, 133, 134, 135, 136, 137, 159, 160, 161, 162, 8, 163, 164, 165, 3, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 268, 4, 269, 5, 270, 6, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 394, 395, 396, 397, 398, 399, 400, 401, 402, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 250, 253, 251, 252, 254, 255, 9, 256, 257, 258, 259, 262, 263 }
  uselistorder label %dec_label_pc_12f44, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12f20, { 1, 0 }
}

define i32 @function_12f50() local_unnamed_addr {
dec_label_pc_12f50:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12f50 = load i32, i32* @r4, align 4
  store i32 %v3_12f50, i32* %stack_var_-8, align 4
  %v0_12f58 = load i32, i32* @r0, align 4
  store i32 %v0_12f58, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12f58, -4095
  br i1 %tmp, label %dec_label_pc_12f74, label %dec_label_pc_12f64

dec_label_pc_12f64:                               ; preds = %dec_label_pc_12f50
  %v0_12f64 = call i32 @function_118a0()
  %v0_12f68 = load i32, i32* %r4.global-to-local, align 4
  %v1_12f68 = sub i32 0, %v0_12f68
  %v2_12f6c = inttoptr i32 %v0_12f64 to i32*
  store i32 %v1_12f68, i32* %v2_12f6c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12f78.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12f74

dec_label_pc_12f74:                               ; preds = %dec_label_pc_12f50, %dec_label_pc_12f64
  %v2_12f78 = phi i32 [ %v3_12f50, %dec_label_pc_12f50 ], [ %v2_12f78.pre, %dec_label_pc_12f64 ]
  %v0_12f74 = phi i32 [ %v0_12f58, %dec_label_pc_12f50 ], [ -1, %dec_label_pc_12f64 ]
  store i32 %v2_12f78, i32* @r4, align 4
  ret i32 %v0_12f74

; uselistorder directives
  uselistorder i32 %v0_12f58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12f74, { 1, 0 }
}

define i32 @function_12f7c() local_unnamed_addr {
dec_label_pc_12f7c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12f7c = load i32, i32* @r4, align 4
  store i32 %v3_12f7c, i32* %stack_var_-8, align 4
  %v0_12f84 = load i32, i32* @r0, align 4
  store i32 %v0_12f84, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12f84, -4095
  br i1 %tmp, label %dec_label_pc_12fa0, label %dec_label_pc_12f90

dec_label_pc_12f90:                               ; preds = %dec_label_pc_12f7c
  %v0_12f90 = call i32 @function_118a0()
  %v0_12f94 = load i32, i32* %r4.global-to-local, align 4
  %v1_12f94 = sub i32 0, %v0_12f94
  %v2_12f98 = inttoptr i32 %v0_12f90 to i32*
  store i32 %v1_12f94, i32* %v2_12f98, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12fa4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12fa0

dec_label_pc_12fa0:                               ; preds = %dec_label_pc_12f7c, %dec_label_pc_12f90
  %v2_12fa4 = phi i32 [ %v3_12f7c, %dec_label_pc_12f7c ], [ %v2_12fa4.pre, %dec_label_pc_12f90 ]
  %v0_12fa0 = phi i32 [ %v0_12f84, %dec_label_pc_12f7c ], [ -1, %dec_label_pc_12f90 ]
  store i32 %v2_12fa4, i32* @r4, align 4
  ret i32 %v0_12fa0

; uselistorder directives
  uselistorder i32 %v0_12f84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12fa0, { 1, 0 }
}

define i32 @function_12fa8(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fa8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12fa8 = load i32, i32* @r4, align 4
  store i32 %v3_12fa8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12fcc, label %dec_label_pc_12fbc

dec_label_pc_12fbc:                               ; preds = %dec_label_pc_12fa8
  %v0_12fbc = call i32 @function_118a0()
  %v0_12fc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12fc0 = sub i32 0, %v0_12fc0
  %v2_12fc4 = inttoptr i32 %v0_12fbc to i32*
  store i32 %v1_12fc0, i32* %v2_12fc4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12fd0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12fcc

dec_label_pc_12fcc:                               ; preds = %dec_label_pc_12fa8, %dec_label_pc_12fbc
  %v2_12fd0 = phi i32 [ %v3_12fa8, %dec_label_pc_12fa8 ], [ %v2_12fd0.pre, %dec_label_pc_12fbc ]
  %v0_12fcc = phi i32 [ %arg1, %dec_label_pc_12fa8 ], [ -1, %dec_label_pc_12fbc ]
  store i32 %v2_12fd0, i32* %r4.global-to-local, align 4
  ret i32 %v0_12fcc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12fcc, { 1, 0 }
}

define i32 @function_12fd4() local_unnamed_addr {
dec_label_pc_12fd4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12fd4 = load i32, i32* @r4, align 4
  store i32 %v3_12fd4, i32* %stack_var_-8, align 4
  %v0_12fdc = load i32, i32* @r0, align 4
  store i32 %v0_12fdc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12fdc, -4095
  br i1 %tmp, label %dec_label_pc_12ff8, label %dec_label_pc_12fe8

dec_label_pc_12fe8:                               ; preds = %dec_label_pc_12fd4
  %v0_12fe8 = call i32 @function_118a0()
  %v0_12fec = load i32, i32* %r4.global-to-local, align 4
  %v1_12fec = sub i32 0, %v0_12fec
  %v2_12ff0 = inttoptr i32 %v0_12fe8 to i32*
  store i32 %v1_12fec, i32* %v2_12ff0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12ffc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12ff8

dec_label_pc_12ff8:                               ; preds = %dec_label_pc_12fd4, %dec_label_pc_12fe8
  %v2_12ffc = phi i32 [ %v3_12fd4, %dec_label_pc_12fd4 ], [ %v2_12ffc.pre, %dec_label_pc_12fe8 ]
  %v0_12ff8 = phi i32 [ %v0_12fdc, %dec_label_pc_12fd4 ], [ -1, %dec_label_pc_12fe8 ]
  store i32 %v2_12ffc, i32* %r4.global-to-local, align 4
  ret i32 %v0_12ff8

; uselistorder directives
  uselistorder i32 %v0_12fdc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ff8, { 1, 0 }
}

define i32 @function_13000(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13000:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13044, label %dec_label_pc_13030

dec_label_pc_13030:                               ; preds = %dec_label_pc_13000
  %v0_13030 = call i32 @function_118a0()
  %v0_13034 = load i32, i32* %r4.global-to-local, align 4
  %v1_13034 = sub i32 0, %v0_13034
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1303c = inttoptr i32 %v0_13030 to i32*
  store i32 %v1_13034, i32* %v2_1303c, align 4
  %v0_1304c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1304c

dec_label_pc_13044:                               ; preds = %dec_label_pc_13000
  %v2_13044 = icmp eq i32 %arg1, 0
  br i1 %v2_13044, label %dec_label_pc_13058, label %dec_label_pc_1304c

dec_label_pc_1304c:                               ; preds = %dec_label_pc_13044, %dec_label_pc_13030
  %v0_1304c = phi i32 [ %arg1, %dec_label_pc_13044 ], [ %v0_1304c.pre, %dec_label_pc_13030 ]
  br label %dec_label_pc_1305c

dec_label_pc_13058:                               ; preds = %dec_label_pc_13044
  br label %dec_label_pc_1305c

dec_label_pc_1305c:                               ; preds = %dec_label_pc_1304c, %dec_label_pc_13058
  %v14_13060 = phi i32 [ %v0_1304c, %dec_label_pc_1304c ], [ %tmp9, %dec_label_pc_13058 ]
  ret i32 %v14_13060

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_1305c, { 1, 0 }
}

define i32 @function_13064(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13064:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_13064 = load i32, i32* @r4, align 4
  store i32 %v3_13064, i32* %stack_var_-8, align 4
  %v6_13068 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_13068, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_13068, -4095
  br i1 %tmp6, label %dec_label_pc_13088, label %dec_label_pc_13078

dec_label_pc_13078:                               ; preds = %dec_label_pc_13064
  %v0_13078 = call i32 @function_118a0()
  %v0_1307c = load i32, i32* %r4.global-to-local, align 4
  %v1_1307c = sub i32 0, %v0_1307c
  %v2_13080 = inttoptr i32 %v0_13078 to i32*
  store i32 %v1_1307c, i32* %v2_13080, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13088

dec_label_pc_13088:                               ; preds = %dec_label_pc_13064, %dec_label_pc_13078
  %v0_13088 = phi i32 [ %v6_13068, %dec_label_pc_13064 ], [ -1, %dec_label_pc_13078 ]
  %v2_1308c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1308c, i32* %r4.global-to-local, align 4
  ret i32 %v0_13088

; uselistorder directives
  uselistorder i32 %v6_13068, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13088, { 1, 0 }
}

define i32 @function_13090(i32 %arg1) local_unnamed_addr {
dec_label_pc_13090:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13090 = load i32, i32* @r4, align 4
  store i32 %v3_13090, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1c2cc.468 to i32), i32* %r4.global-to-local, align 4
  %v2_13098 = load i32, i32* @global_var_1c2cc.468, align 4
  %v2_1309c = icmp eq i32 %v2_13098, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_1309c, label %dec_label_pc_130ac, label %dec_label_pc_130b8

dec_label_pc_130ac:                               ; preds = %dec_label_pc_13090
  %v2_130ac = call i32 @function_13aa8(i32* null)
  %v1_130b0 = icmp slt i32 %v2_130ac, 0
  br i1 %v1_130b0, label %dec_label_pc_130d8, label %dec_label_pc_130b8thread-pre-split

dec_label_pc_130b8thread-pre-split:               ; preds = %dec_label_pc_130ac
  %v0_130bc.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_130b8.pre = load i32, i32* @global_var_1c2cc.468, align 4
  br label %dec_label_pc_130b8

dec_label_pc_130b8:                               ; preds = %dec_label_pc_130b8thread-pre-split, %dec_label_pc_13090
  %v2_130b8 = phi i32 [ %v2_130b8.pre, %dec_label_pc_130b8thread-pre-split ], [ %v2_13098, %dec_label_pc_13090 ]
  %v1_130c4 = phi i32 [ %v0_130bc.pr, %dec_label_pc_130b8thread-pre-split ], [ %arg1, %dec_label_pc_13090 ]
  %v2_130bc = icmp eq i32 %v1_130c4, 0
  store i32 %v2_130b8, i32* %r4.global-to-local, align 4
  br i1 %v2_130bc, label %dec_label_pc_130dc, label %dec_label_pc_130cc

dec_label_pc_130cc:                               ; preds = %dec_label_pc_130b8
  %v2_130c4 = add i32 %v1_130c4, %v2_130b8
  %v1_130cc = inttoptr i32 %v2_130c4 to i32*
  %v2_130cc = call i32 @function_13aa8(i32* %v1_130cc)
  %v1_130d0 = icmp slt i32 %v2_130cc, 0
  br i1 %v1_130d0, label %dec_label_pc_130d8, label %dec_label_pc_130cc.dec_label_pc_130dc_crit_edge

dec_label_pc_130cc.dec_label_pc_130dc_crit_edge:  ; preds = %dec_label_pc_130cc
  %v0_130dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130dc

dec_label_pc_130d8:                               ; preds = %dec_label_pc_130cc, %dec_label_pc_130ac
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130dc

dec_label_pc_130dc:                               ; preds = %dec_label_pc_130cc.dec_label_pc_130dc_crit_edge, %dec_label_pc_130b8, %dec_label_pc_130d8
  %v0_130dc = phi i32 [ %v0_130dc.pre, %dec_label_pc_130cc.dec_label_pc_130dc_crit_edge ], [ %v2_130b8, %dec_label_pc_130b8 ], [ -1, %dec_label_pc_130d8 ]
  %v2_130e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_130e0, i32* @r4, align 4
  ret i32 %v0_130dc

; uselistorder directives
  uselistorder i32 %v2_130b8, { 1, 0, 2 }
  uselistorder i32* null, { 0, 4, 6, 23, 24, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 2, 19, 3, 20, 21, 22 }
  uselistorder label %dec_label_pc_130dc, { 2, 0, 1 }
}

define i32 @function_130e8(%tms* %arg1) local_unnamed_addr {
dec_label_pc_130e8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_130e8 = load i32, i32* @r4, align 4
  store i32 %v3_130e8, i32* %stack_var_-8, align 4
  %v3_130ec = call i32 @times(%tms* %arg1)
  store i32 %v3_130ec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_130ec, -4095
  br i1 %tmp, label %dec_label_pc_1310c, label %dec_label_pc_130fc

dec_label_pc_130fc:                               ; preds = %dec_label_pc_130e8
  %v0_130fc = call i32 @function_118a0()
  %v0_13100 = load i32, i32* %r4.global-to-local, align 4
  %v1_13100 = sub i32 0, %v0_13100
  %v2_13104 = inttoptr i32 %v0_130fc to i32*
  store i32 %v1_13100, i32* %v2_13104, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1310c

dec_label_pc_1310c:                               ; preds = %dec_label_pc_130e8, %dec_label_pc_130fc
  %v0_1310c = phi i32 [ %v3_130ec, %dec_label_pc_130e8 ], [ -1, %dec_label_pc_130fc ]
  %v2_13110 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13110, i32* %r4.global-to-local, align 4
  ret i32 %v0_1310c

; uselistorder directives
  uselistorder i32 %v3_130ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1310c, { 1, 0 }
}

define i32 @function_13114(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13114:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_13130 = inttoptr i32 %arg2 to i8*
  %v3_13130 = call i32 @function_11900(i8* %v2_13130, i32 0)
  %v1_13134 = add i32 %tmp, 1
  %v2_13134 = inttoptr i32 %v1_13134 to i8*
  %v3_13134 = load i8, i8* %v2_13134, align 1
  %v4_13134 = zext i8 %v3_13134 to i32
  %v1_13138 = add i32 %tmp, 5
  %v2_13138 = inttoptr i32 %v1_13138 to i8*
  %v3_13138 = load i8, i8* %v2_13138, align 1
  %v4_13138 = zext i8 %v3_13138 to i32
  %v2_1313c = load i8, i8* %arg1, align 1
  %v3_1313c = zext i8 %v2_1313c to i32
  %v1_13140 = add i32 %tmp, 4
  %v2_13140 = inttoptr i32 %v1_13140 to i8*
  %v3_13140 = load i8, i8* %v2_13140, align 1
  %v4_13140 = zext i8 %v3_13140 to i32
  %v1_13144 = add i32 %tmp, 2
  %v2_13144 = inttoptr i32 %v1_13144 to i8*
  %v3_13144 = load i8, i8* %v2_13144, align 1
  %v4_13144 = zext i8 %v3_13144 to i32
  %v1_13148 = add i32 %tmp, 6
  %v2_13148 = inttoptr i32 %v1_13148 to i8*
  %v3_13148 = load i8, i8* %v2_13148, align 1
  %v4_13148 = zext i8 %v3_13148 to i32
  %v1_1314c = add i32 %tmp, 3
  %v2_1314c = inttoptr i32 %v1_1314c to i8*
  %v3_1314c = load i8, i8* %v2_1314c, align 1
  %v4_1314c = zext i8 %v3_1314c to i32
  %v4_13150 = mul nuw nsw i32 %v4_13134, 256
  %v5_13150 = or i32 %v3_1313c, %v4_13150
  %v4_13154 = mul nuw nsw i32 %v4_13138, 256
  %v5_13154 = or i32 %v4_13140, %v4_13154
  %v1_13158 = add i32 %tmp, 7
  %v2_13158 = inttoptr i32 %v1_13158 to i8*
  %v3_13158 = load i8, i8* %v2_13158, align 1
  %v4_13158 = zext i8 %v3_13158 to i32
  %v4_1315c = mul nuw nsw i32 %v4_13144, 65536
  %v5_1315c = or i32 %v4_1315c, %v5_13150
  %v4_13160 = mul nuw nsw i32 %v4_13148, 65536
  %v5_13160 = or i32 %v4_13160, %v5_13154
  %v4_13164 = mul nuw i32 %v4_1314c, 16777216
  %v5_13164 = or i32 %v4_13164, %v5_1315c
  %v4_13168 = mul nuw i32 %v4_13158, 16777216
  %v5_13168 = or i32 %v4_13168, %v5_13160
  store i32 %v5_13168, i32* %r3.global-to-local, align 4
  %v0_1316c = load i32, i32* %r7.global-to-local, align 4
  %v1_1316c = inttoptr i32 %v0_1316c to i32*
  store i32 %v5_13164, i32* %v1_1316c, align 4
  %v3_1316c = add i32 %v0_1316c, 4
  %v4_1316c = inttoptr i32 %v3_1316c to i32*
  %v5_1316c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_1316c, i32* %v4_1316c, align 4
  %v0_13170 = load i32, i32* %r4.global-to-local, align 4
  %v1_13170 = add i32 %v0_13170, 89
  %v2_13170 = inttoptr i32 %v1_13170 to i8*
  %v3_13170 = load i8, i8* %v2_13170, align 1
  %v4_13170 = zext i8 %v3_13170 to i32
  %v1_13174 = add i32 %v0_13170, 93
  %v2_13174 = inttoptr i32 %v1_13174 to i8*
  %v3_13174 = load i8, i8* %v2_13174, align 1
  %v4_13174 = zext i8 %v3_13174 to i32
  %v1_13178 = add i32 %v0_13170, 88
  %v2_13178 = inttoptr i32 %v1_13178 to i8*
  %v3_13178 = load i8, i8* %v2_13178, align 1
  %v4_13178 = zext i8 %v3_13178 to i32
  %v1_1317c = add i32 %v0_13170, 92
  %v2_1317c = inttoptr i32 %v1_1317c to i8*
  %v3_1317c = load i8, i8* %v2_1317c, align 1
  %v4_1317c = zext i8 %v3_1317c to i32
  store i32 %v4_1317c, i32* %r3.global-to-local, align 4
  %v1_13180 = add i32 %v0_13170, 94
  %v2_13180 = inttoptr i32 %v1_13180 to i8*
  %v3_13180 = load i8, i8* %v2_13180, align 1
  %v4_13180 = zext i8 %v3_13180 to i32
  %v1_13184 = add i32 %v0_13170, 90
  %v2_13184 = inttoptr i32 %v1_13184 to i8*
  %v3_13184 = load i8, i8* %v2_13184, align 1
  %v4_13184 = zext i8 %v3_13184 to i32
  %v1_13188 = add i32 %v0_13170, 91
  %v2_13188 = inttoptr i32 %v1_13188 to i8*
  %v3_13188 = load i8, i8* %v2_13188, align 1
  %v4_13188 = zext i8 %v3_13188 to i32
  %v4_1318c = mul nuw nsw i32 %v4_13170, 256
  %v5_1318c = or i32 %v4_13178, %v4_1318c
  %v4_13190 = mul nuw nsw i32 %v4_13174, 256
  %v5_13190 = or i32 %v4_1317c, %v4_13190
  store i32 %v5_13190, i32* %r3.global-to-local, align 4
  %v1_13194 = add i32 %v0_13170, 95
  %v2_13194 = inttoptr i32 %v1_13194 to i8*
  %v3_13194 = load i8, i8* %v2_13194, align 1
  %v4_13194 = zext i8 %v3_13194 to i32
  %v4_13198 = mul nuw nsw i32 %v4_13180, 65536
  %v5_13198 = or i32 %v4_13198, %v5_13190
  store i32 %v5_13198, i32* %r3.global-to-local, align 4
  %v4_1319c = mul nuw nsw i32 %v4_13184, 65536
  %v5_1319c = or i32 %v4_1319c, %v5_1318c
  %v4_131a0 = mul nuw i32 %v4_13188, 16777216
  %v5_131a0 = or i32 %v4_131a0, %v5_1319c
  %v4_131a4 = mul nuw i32 %v4_13194, 16777216
  %v5_131a4 = or i32 %v4_131a4, %v5_13198
  store i32 %v5_131a4, i32* %r6.global-to-local, align 4
  %v1_131a8 = load i32, i32* %r7.global-to-local, align 4
  %v2_131a8 = add i32 %v1_131a8, 88
  %v3_131a8 = inttoptr i32 %v2_131a8 to i32*
  store i32 %v5_131a0, i32* %v3_131a8, align 4
  %v0_131ac = load i32, i32* %r6.global-to-local, align 4
  %v1_131ac = load i32, i32* %r7.global-to-local, align 4
  %v2_131ac = add i32 %v1_131ac, 92
  %v3_131ac = inttoptr i32 %v2_131ac to i32*
  store i32 %v0_131ac, i32* %v3_131ac, align 4
  %v0_131b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131b0 = add i32 %v0_131b0, 13
  %v2_131b0 = inttoptr i32 %v1_131b0 to i8*
  %v3_131b0 = load i8, i8* %v2_131b0, align 1
  %v4_131b0 = zext i8 %v3_131b0 to i32
  %v1_131b4 = add i32 %v0_131b0, 12
  %v2_131b4 = inttoptr i32 %v1_131b4 to i8*
  %v3_131b4 = load i8, i8* %v2_131b4, align 1
  %v4_131b4 = zext i8 %v3_131b4 to i32
  store i32 %v4_131b4, i32* %r3.global-to-local, align 4
  %v1_131b8 = add i32 %v0_131b0, 14
  %v2_131b8 = inttoptr i32 %v1_131b8 to i8*
  %v3_131b8 = load i8, i8* %v2_131b8, align 1
  %v4_131b8 = zext i8 %v3_131b8 to i32
  %v4_131bc = mul nuw nsw i32 %v4_131b0, 256
  %v5_131bc = or i32 %v4_131b4, %v4_131bc
  store i32 %v5_131bc, i32* %r3.global-to-local, align 4
  %v1_131c0 = add i32 %v0_131b0, 15
  %v2_131c0 = inttoptr i32 %v1_131c0 to i8*
  %v3_131c0 = load i8, i8* %v2_131c0, align 1
  %v4_131c0 = zext i8 %v3_131c0 to i32
  %v4_131c4 = mul nuw nsw i32 %v4_131b8, 65536
  %v5_131c4 = or i32 %v4_131c4, %v5_131bc
  %v4_131c8 = mul nuw i32 %v4_131c0, 16777216
  %v5_131c8 = or i32 %v5_131c4, %v4_131c8
  store i32 %v5_131c8, i32* %r3.global-to-local, align 4
  %v1_131cc = load i32, i32* %r7.global-to-local, align 4
  %v2_131cc = add i32 %v1_131cc, 12
  %v3_131cc = inttoptr i32 %v2_131cc to i32*
  store i32 %v5_131c8, i32* %v3_131cc, align 4
  %v0_131d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131d0 = add i32 %v0_131d0, 17
  %v2_131d0 = inttoptr i32 %v1_131d0 to i8*
  %v3_131d0 = load i8, i8* %v2_131d0, align 1
  %v4_131d0 = zext i8 %v3_131d0 to i32
  %v1_131d4 = add i32 %v0_131d0, 16
  %v2_131d4 = inttoptr i32 %v1_131d4 to i8*
  %v3_131d4 = load i8, i8* %v2_131d4, align 1
  %v4_131d4 = zext i8 %v3_131d4 to i32
  store i32 %v4_131d4, i32* %r3.global-to-local, align 4
  %v1_131d8 = add i32 %v0_131d0, 18
  %v2_131d8 = inttoptr i32 %v1_131d8 to i8*
  %v3_131d8 = load i8, i8* %v2_131d8, align 1
  %v4_131d8 = zext i8 %v3_131d8 to i32
  %v4_131dc = mul nuw nsw i32 %v4_131d0, 256
  %v5_131dc = or i32 %v4_131d4, %v4_131dc
  store i32 %v5_131dc, i32* %r3.global-to-local, align 4
  %v1_131e0 = add i32 %v0_131d0, 19
  %v2_131e0 = inttoptr i32 %v1_131e0 to i8*
  %v3_131e0 = load i8, i8* %v2_131e0, align 1
  %v4_131e0 = zext i8 %v3_131e0 to i32
  %v4_131e4 = mul nuw nsw i32 %v4_131d8, 65536
  %v5_131e4 = or i32 %v4_131e4, %v5_131dc
  %v4_131e8 = mul nuw i32 %v4_131e0, 16777216
  %v5_131e8 = or i32 %v5_131e4, %v4_131e8
  store i32 %v5_131e8, i32* %r3.global-to-local, align 4
  %v1_131ec = load i32, i32* %r7.global-to-local, align 4
  %v2_131ec = add i32 %v1_131ec, 16
  %v3_131ec = inttoptr i32 %v2_131ec to i32*
  store i32 %v5_131e8, i32* %v3_131ec, align 4
  %v0_131f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131f0 = add i32 %v0_131f0, 21
  %v2_131f0 = inttoptr i32 %v1_131f0 to i8*
  %v3_131f0 = load i8, i8* %v2_131f0, align 1
  %v4_131f0 = zext i8 %v3_131f0 to i32
  %v1_131f4 = add i32 %v0_131f0, 20
  %v2_131f4 = inttoptr i32 %v1_131f4 to i8*
  %v3_131f4 = load i8, i8* %v2_131f4, align 1
  %v4_131f4 = zext i8 %v3_131f4 to i32
  store i32 %v4_131f4, i32* %r3.global-to-local, align 4
  %v1_131f8 = add i32 %v0_131f0, 22
  %v2_131f8 = inttoptr i32 %v1_131f8 to i8*
  %v3_131f8 = load i8, i8* %v2_131f8, align 1
  %v4_131f8 = zext i8 %v3_131f8 to i32
  %v4_131fc = mul nuw nsw i32 %v4_131f0, 256
  %v5_131fc = or i32 %v4_131f4, %v4_131fc
  store i32 %v5_131fc, i32* %r3.global-to-local, align 4
  %v1_13200 = add i32 %v0_131f0, 23
  %v2_13200 = inttoptr i32 %v1_13200 to i8*
  %v3_13200 = load i8, i8* %v2_13200, align 1
  %v4_13200 = zext i8 %v3_13200 to i32
  %v4_13204 = mul nuw nsw i32 %v4_131f8, 65536
  %v5_13204 = or i32 %v4_13204, %v5_131fc
  %v4_13208 = mul nuw i32 %v4_13200, 16777216
  %v5_13208 = or i32 %v5_13204, %v4_13208
  store i32 %v5_13208, i32* %r3.global-to-local, align 4
  %v1_1320c = load i32, i32* %r7.global-to-local, align 4
  %v2_1320c = add i32 %v1_1320c, 20
  %v3_1320c = inttoptr i32 %v2_1320c to i32*
  store i32 %v5_13208, i32* %v3_1320c, align 4
  %v0_13210 = load i32, i32* %r4.global-to-local, align 4
  %v1_13210 = add i32 %v0_13210, 25
  %v2_13210 = inttoptr i32 %v1_13210 to i8*
  %v3_13210 = load i8, i8* %v2_13210, align 1
  %v4_13210 = zext i8 %v3_13210 to i32
  %v1_13214 = add i32 %v0_13210, 24
  %v2_13214 = inttoptr i32 %v1_13214 to i8*
  %v3_13214 = load i8, i8* %v2_13214, align 1
  %v4_13214 = zext i8 %v3_13214 to i32
  store i32 %v4_13214, i32* %r3.global-to-local, align 4
  %v1_13218 = add i32 %v0_13210, 26
  %v2_13218 = inttoptr i32 %v1_13218 to i8*
  %v3_13218 = load i8, i8* %v2_13218, align 1
  %v4_13218 = zext i8 %v3_13218 to i32
  %v4_1321c = mul nuw nsw i32 %v4_13210, 256
  %v5_1321c = or i32 %v4_13214, %v4_1321c
  store i32 %v5_1321c, i32* %r3.global-to-local, align 4
  %v1_13220 = add i32 %v0_13210, 27
  %v2_13220 = inttoptr i32 %v1_13220 to i8*
  %v3_13220 = load i8, i8* %v2_13220, align 1
  %v4_13220 = zext i8 %v3_13220 to i32
  %v4_13224 = mul nuw nsw i32 %v4_13218, 65536
  %v5_13224 = or i32 %v4_13224, %v5_1321c
  %v4_13228 = mul nuw i32 %v4_13220, 16777216
  %v5_13228 = or i32 %v5_13224, %v4_13228
  store i32 %v5_13228, i32* %r3.global-to-local, align 4
  %v1_1322c = load i32, i32* %r7.global-to-local, align 4
  %v2_1322c = add i32 %v1_1322c, 24
  %v3_1322c = inttoptr i32 %v2_1322c to i32*
  store i32 %v5_13228, i32* %v3_1322c, align 4
  %v0_13230 = load i32, i32* %r4.global-to-local, align 4
  %v1_13230 = add i32 %v0_13230, 29
  %v2_13230 = inttoptr i32 %v1_13230 to i8*
  %v3_13230 = load i8, i8* %v2_13230, align 1
  %v4_13230 = zext i8 %v3_13230 to i32
  %v1_13234 = add i32 %v0_13230, 28
  %v2_13234 = inttoptr i32 %v1_13234 to i8*
  %v3_13234 = load i8, i8* %v2_13234, align 1
  %v4_13234 = zext i8 %v3_13234 to i32
  store i32 %v4_13234, i32* %r3.global-to-local, align 4
  %v1_13238 = add i32 %v0_13230, 30
  %v2_13238 = inttoptr i32 %v1_13238 to i8*
  %v3_13238 = load i8, i8* %v2_13238, align 1
  %v4_13238 = zext i8 %v3_13238 to i32
  %v4_1323c = mul nuw nsw i32 %v4_13230, 256
  %v5_1323c = or i32 %v4_13234, %v4_1323c
  store i32 %v5_1323c, i32* %r3.global-to-local, align 4
  %v1_13240 = add i32 %v0_13230, 31
  %v2_13240 = inttoptr i32 %v1_13240 to i8*
  %v3_13240 = load i8, i8* %v2_13240, align 1
  %v4_13240 = zext i8 %v3_13240 to i32
  %v4_13244 = mul nuw nsw i32 %v4_13238, 65536
  %v5_13244 = or i32 %v4_13244, %v5_1323c
  %v4_13248 = mul nuw i32 %v4_13240, 16777216
  %v5_13248 = or i32 %v5_13244, %v4_13248
  store i32 %v5_13248, i32* %r3.global-to-local, align 4
  %v1_1324c = load i32, i32* %r7.global-to-local, align 4
  %v2_1324c = add i32 %v1_1324c, 28
  %v3_1324c = inttoptr i32 %v2_1324c to i32*
  store i32 %v5_13248, i32* %v3_1324c, align 4
  %v0_13250 = load i32, i32* %r4.global-to-local, align 4
  %v1_13250 = add i32 %v0_13250, 33
  %v2_13250 = inttoptr i32 %v1_13250 to i8*
  %v3_13250 = load i8, i8* %v2_13250, align 1
  %v4_13250 = zext i8 %v3_13250 to i32
  %v1_13254 = add i32 %v0_13250, 37
  %v2_13254 = inttoptr i32 %v1_13254 to i8*
  %v3_13254 = load i8, i8* %v2_13254, align 1
  %v4_13254 = zext i8 %v3_13254 to i32
  %v1_13258 = add i32 %v0_13250, 32
  %v2_13258 = inttoptr i32 %v1_13258 to i8*
  %v3_13258 = load i8, i8* %v2_13258, align 1
  %v4_13258 = zext i8 %v3_13258 to i32
  %v1_1325c = add i32 %v0_13250, 36
  %v2_1325c = inttoptr i32 %v1_1325c to i8*
  %v3_1325c = load i8, i8* %v2_1325c, align 1
  %v4_1325c = zext i8 %v3_1325c to i32
  store i32 %v4_1325c, i32* %r3.global-to-local, align 4
  %v1_13260 = add i32 %v0_13250, 34
  %v2_13260 = inttoptr i32 %v1_13260 to i8*
  %v3_13260 = load i8, i8* %v2_13260, align 1
  %v4_13260 = zext i8 %v3_13260 to i32
  %v1_13264 = add i32 %v0_13250, 38
  %v2_13264 = inttoptr i32 %v1_13264 to i8*
  %v3_13264 = load i8, i8* %v2_13264, align 1
  %v4_13264 = zext i8 %v3_13264 to i32
  %v1_13268 = add i32 %v0_13250, 35
  %v2_13268 = inttoptr i32 %v1_13268 to i8*
  %v3_13268 = load i8, i8* %v2_13268, align 1
  %v4_13268 = zext i8 %v3_13268 to i32
  %v4_1326c = mul nuw nsw i32 %v4_13250, 256
  %v5_1326c = or i32 %v4_13258, %v4_1326c
  %v4_13270 = mul nuw nsw i32 %v4_13254, 256
  %v5_13270 = or i32 %v4_1325c, %v4_13270
  store i32 %v5_13270, i32* %r3.global-to-local, align 4
  %v1_13274 = add i32 %v0_13250, 39
  %v2_13274 = inttoptr i32 %v1_13274 to i8*
  %v3_13274 = load i8, i8* %v2_13274, align 1
  %v4_13274 = zext i8 %v3_13274 to i32
  %v4_13278 = mul nuw nsw i32 %v4_13260, 65536
  %v5_13278 = or i32 %v4_13278, %v5_1326c
  %v4_1327c = mul nuw nsw i32 %v4_13264, 65536
  %v5_1327c = or i32 %v4_1327c, %v5_13270
  %v4_13280 = mul nuw i32 %v4_13268, 16777216
  %v5_13280 = or i32 %v5_13278, %v4_13280
  %v4_13284 = mul nuw i32 %v4_13274, 16777216
  %v5_13284 = or i32 %v5_1327c, %v4_13284
  store i32 %v5_13284, i32* %r3.global-to-local, align 4
  %v1_13298 = load i32, i32* %r7.global-to-local, align 4
  %v2_13298 = add i32 %v1_13298, 32
  %v3_13298 = inttoptr i32 %v2_13298 to i32*
  store i32 %v5_13280, i32* %v3_13298, align 4
  %v0_1329c = load i32, i32* %r3.global-to-local, align 4
  %v1_1329c = load i32, i32* %r7.global-to-local, align 4
  %v2_1329c = add i32 %v1_1329c, 36
  %v3_1329c = inttoptr i32 %v2_1329c to i32*
  store i32 %v0_1329c, i32* %v3_1329c, align 4
  %v0_132a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_132a0 = add i32 %v0_132a0, 45
  %v2_132a0 = inttoptr i32 %v1_132a0 to i8*
  %v3_132a0 = load i8, i8* %v2_132a0, align 1
  %v4_132a0 = zext i8 %v3_132a0 to i32
  %v1_132a4 = add i32 %v0_132a0, 49
  %v2_132a4 = inttoptr i32 %v1_132a4 to i8*
  %v3_132a4 = load i8, i8* %v2_132a4, align 1
  %v4_132a4 = zext i8 %v3_132a4 to i32
  %v1_132a8 = add i32 %v0_132a0, 44
  %v2_132a8 = inttoptr i32 %v1_132a8 to i8*
  %v3_132a8 = load i8, i8* %v2_132a8, align 1
  %v4_132a8 = zext i8 %v3_132a8 to i32
  %v1_132ac = add i32 %v0_132a0, 48
  %v2_132ac = inttoptr i32 %v1_132ac to i8*
  %v3_132ac = load i8, i8* %v2_132ac, align 1
  %v4_132ac = zext i8 %v3_132ac to i32
  store i32 %v4_132ac, i32* %r3.global-to-local, align 4
  %v1_132b0 = add i32 %v0_132a0, 46
  %v2_132b0 = inttoptr i32 %v1_132b0 to i8*
  %v3_132b0 = load i8, i8* %v2_132b0, align 1
  %v4_132b0 = zext i8 %v3_132b0 to i32
  %v1_132b4 = add i32 %v0_132a0, 50
  %v2_132b4 = inttoptr i32 %v1_132b4 to i8*
  %v3_132b4 = load i8, i8* %v2_132b4, align 1
  %v4_132b4 = zext i8 %v3_132b4 to i32
  %v1_132b8 = add i32 %v0_132a0, 47
  %v2_132b8 = inttoptr i32 %v1_132b8 to i8*
  %v3_132b8 = load i8, i8* %v2_132b8, align 1
  %v4_132b8 = zext i8 %v3_132b8 to i32
  %v4_132bc = mul nuw nsw i32 %v4_132a0, 256
  %v5_132bc = or i32 %v4_132a8, %v4_132bc
  %v4_132c0 = mul nuw nsw i32 %v4_132a4, 256
  %v5_132c0 = or i32 %v4_132ac, %v4_132c0
  store i32 %v5_132c0, i32* %r3.global-to-local, align 4
  %v1_132c4 = add i32 %v0_132a0, 51
  %v2_132c4 = inttoptr i32 %v1_132c4 to i8*
  %v3_132c4 = load i8, i8* %v2_132c4, align 1
  %v4_132c4 = zext i8 %v3_132c4 to i32
  %v4_132c8 = mul nuw nsw i32 %v4_132b0, 65536
  %v5_132c8 = or i32 %v4_132c8, %v5_132bc
  %v4_132cc = mul nuw nsw i32 %v4_132b4, 65536
  %v5_132cc = or i32 %v4_132cc, %v5_132c0
  %v4_132d0 = mul nuw i32 %v4_132b8, 16777216
  %v5_132d0 = or i32 %v5_132c8, %v4_132d0
  %v4_132d4 = mul nuw i32 %v4_132c4, 16777216
  %v5_132d4 = or i32 %v5_132cc, %v4_132d4
  store i32 %v5_132d4, i32* %r3.global-to-local, align 4
  %v1_132e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_132e8 = add i32 %v1_132e8, 44
  %v3_132e8 = inttoptr i32 %v2_132e8 to i32*
  store i32 %v5_132d0, i32* %v3_132e8, align 4
  %v0_132ec = load i32, i32* %r3.global-to-local, align 4
  %v1_132ec = load i32, i32* %r7.global-to-local, align 4
  %v2_132ec = add i32 %v1_132ec, 48
  %v3_132ec = inttoptr i32 %v2_132ec to i32*
  store i32 %v0_132ec, i32* %v3_132ec, align 4
  %v0_132f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_132f0 = add i32 %v0_132f0, 53
  %v2_132f0 = inttoptr i32 %v1_132f0 to i8*
  %v3_132f0 = load i8, i8* %v2_132f0, align 1
  %v4_132f0 = zext i8 %v3_132f0 to i32
  %v1_132f4 = add i32 %v0_132f0, 52
  %v2_132f4 = inttoptr i32 %v1_132f4 to i8*
  %v3_132f4 = load i8, i8* %v2_132f4, align 1
  %v4_132f4 = zext i8 %v3_132f4 to i32
  store i32 %v4_132f4, i32* %r3.global-to-local, align 4
  %v1_132f8 = add i32 %v0_132f0, 54
  %v2_132f8 = inttoptr i32 %v1_132f8 to i8*
  %v3_132f8 = load i8, i8* %v2_132f8, align 1
  %v4_132f8 = zext i8 %v3_132f8 to i32
  %v4_132fc = mul nuw nsw i32 %v4_132f0, 256
  %v5_132fc = or i32 %v4_132f4, %v4_132fc
  store i32 %v5_132fc, i32* %r3.global-to-local, align 4
  %v1_13300 = add i32 %v0_132f0, 55
  %v2_13300 = inttoptr i32 %v1_13300 to i8*
  %v3_13300 = load i8, i8* %v2_13300, align 1
  %v4_13300 = zext i8 %v3_13300 to i32
  %v4_13304 = mul nuw nsw i32 %v4_132f8, 65536
  %v5_13304 = or i32 %v4_13304, %v5_132fc
  %v4_13308 = mul nuw i32 %v4_13300, 16777216
  %v5_13308 = or i32 %v5_13304, %v4_13308
  store i32 %v5_13308, i32* %r3.global-to-local, align 4
  %v1_1330c = load i32, i32* %r7.global-to-local, align 4
  %v2_1330c = add i32 %v1_1330c, 52
  %v3_1330c = inttoptr i32 %v2_1330c to i32*
  store i32 %v5_13308, i32* %v3_1330c, align 4
  %v0_13310 = load i32, i32* %r4.global-to-local, align 4
  %v1_13310 = add i32 %v0_13310, 57
  %v2_13310 = inttoptr i32 %v1_13310 to i8*
  %v3_13310 = load i8, i8* %v2_13310, align 1
  %v4_13310 = zext i8 %v3_13310 to i32
  %v1_13314 = add i32 %v0_13310, 56
  %v2_13314 = inttoptr i32 %v1_13314 to i8*
  %v3_13314 = load i8, i8* %v2_13314, align 1
  %v4_13314 = zext i8 %v3_13314 to i32
  %v1_13318 = add i32 %v0_13310, 60
  %v2_13318 = inttoptr i32 %v1_13318 to i8*
  %v3_13318 = load i8, i8* %v2_13318, align 1
  %v4_13318 = zext i8 %v3_13318 to i32
  store i32 %v4_13318, i32* %r3.global-to-local, align 4
  %v1_1331c = add i32 %v0_13310, 61
  %v2_1331c = inttoptr i32 %v1_1331c to i8*
  %v3_1331c = load i8, i8* %v2_1331c, align 1
  %v4_1331c = zext i8 %v3_1331c to i32
  %v1_13320 = add i32 %v0_13310, 58
  %v2_13320 = inttoptr i32 %v1_13320 to i8*
  %v3_13320 = load i8, i8* %v2_13320, align 1
  %v4_13320 = zext i8 %v3_13320 to i32
  %v1_13324 = add i32 %v0_13310, 62
  %v2_13324 = inttoptr i32 %v1_13324 to i8*
  %v3_13324 = load i8, i8* %v2_13324, align 1
  %v4_13324 = zext i8 %v3_13324 to i32
  %v1_13328 = add i32 %v0_13310, 59
  %v2_13328 = inttoptr i32 %v1_13328 to i8*
  %v3_13328 = load i8, i8* %v2_13328, align 1
  %v4_13328 = zext i8 %v3_13328 to i32
  %v4_1332c = mul nuw nsw i32 %v4_13310, 256
  %v5_1332c = or i32 %v4_13314, %v4_1332c
  %v4_13330 = mul nuw nsw i32 %v4_1331c, 256
  %v5_13330 = or i32 %v4_13330, %v4_13318
  store i32 %v5_13330, i32* %r3.global-to-local, align 4
  %v1_13334 = add i32 %v0_13310, 63
  %v2_13334 = inttoptr i32 %v1_13334 to i8*
  %v3_13334 = load i8, i8* %v2_13334, align 1
  %v4_13334 = zext i8 %v3_13334 to i32
  %v4_13338 = mul nuw nsw i32 %v4_13320, 65536
  %v5_13338 = or i32 %v4_13338, %v5_1332c
  %v4_1333c = mul nuw nsw i32 %v4_13324, 65536
  %v5_1333c = or i32 %v4_1333c, %v5_13330
  %v4_13340 = mul nuw i32 %v4_13334, 16777216
  %v5_13340 = or i32 %v5_1333c, %v4_13340
  %v4_13344 = mul nuw i32 %v4_13328, 16777216
  %v5_13344 = or i32 %v5_13338, %v4_13344
  store i32 %v5_13340, i32* %r3.global-to-local, align 4
  %v1_13354 = load i32, i32* %r7.global-to-local, align 4
  %v2_13354 = add i32 %v1_13354, 56
  %v3_13354 = inttoptr i32 %v2_13354 to i32*
  store i32 %v5_13344, i32* %v3_13354, align 4
  %v0_13358 = load i32, i32* %r3.global-to-local, align 4
  %v1_13358 = load i32, i32* %r7.global-to-local, align 4
  %v2_13358 = add i32 %v1_13358, 60
  %v3_13358 = inttoptr i32 %v2_13358 to i32*
  store i32 %v0_13358, i32* %v3_13358, align 4
  %v0_1335c = load i32, i32* %r4.global-to-local, align 4
  %v1_1335c = add i32 %v0_1335c, 65
  %v2_1335c = inttoptr i32 %v1_1335c to i8*
  %v3_1335c = load i8, i8* %v2_1335c, align 1
  %v4_1335c = zext i8 %v3_1335c to i32
  %v1_13360 = add i32 %v0_1335c, 64
  %v2_13360 = inttoptr i32 %v1_13360 to i8*
  %v3_13360 = load i8, i8* %v2_13360, align 1
  %v4_13360 = zext i8 %v3_13360 to i32
  store i32 %v4_13360, i32* %r3.global-to-local, align 4
  %v1_13364 = add i32 %v0_1335c, 66
  %v2_13364 = inttoptr i32 %v1_13364 to i8*
  %v3_13364 = load i8, i8* %v2_13364, align 1
  %v4_13364 = zext i8 %v3_13364 to i32
  %v4_13368 = mul nuw nsw i32 %v4_1335c, 256
  %v5_13368 = or i32 %v4_13360, %v4_13368
  store i32 %v5_13368, i32* %r3.global-to-local, align 4
  %v1_1336c = add i32 %v0_1335c, 67
  %v2_1336c = inttoptr i32 %v1_1336c to i8*
  %v3_1336c = load i8, i8* %v2_1336c, align 1
  %v4_1336c = zext i8 %v3_1336c to i32
  %v4_13370 = mul nuw nsw i32 %v4_13364, 65536
  %v5_13370 = or i32 %v4_13370, %v5_13368
  %v4_13374 = mul nuw i32 %v4_1336c, 16777216
  %v5_13374 = or i32 %v5_13370, %v4_13374
  store i32 %v5_13374, i32* %r3.global-to-local, align 4
  %v1_13378 = load i32, i32* %r7.global-to-local, align 4
  %v2_13378 = add i32 %v1_13378, 64
  %v3_13378 = inttoptr i32 %v2_13378 to i32*
  store i32 %v5_13374, i32* %v3_13378, align 4
  %v0_1337c = load i32, i32* %r4.global-to-local, align 4
  %v1_1337c = add i32 %v0_1337c, 73
  %v2_1337c = inttoptr i32 %v1_1337c to i8*
  %v3_1337c = load i8, i8* %v2_1337c, align 1
  %v4_1337c = zext i8 %v3_1337c to i32
  %v1_13380 = add i32 %v0_1337c, 72
  %v2_13380 = inttoptr i32 %v1_13380 to i8*
  %v3_13380 = load i8, i8* %v2_13380, align 1
  %v4_13380 = zext i8 %v3_13380 to i32
  store i32 %v4_13380, i32* %r3.global-to-local, align 4
  %v1_13384 = add i32 %v0_1337c, 74
  %v2_13384 = inttoptr i32 %v1_13384 to i8*
  %v3_13384 = load i8, i8* %v2_13384, align 1
  %v4_13384 = zext i8 %v3_13384 to i32
  %v4_13388 = mul nuw nsw i32 %v4_1337c, 256
  %v5_13388 = or i32 %v4_13380, %v4_13388
  store i32 %v5_13388, i32* %r3.global-to-local, align 4
  %v1_1338c = add i32 %v0_1337c, 75
  %v2_1338c = inttoptr i32 %v1_1338c to i8*
  %v3_1338c = load i8, i8* %v2_1338c, align 1
  %v4_1338c = zext i8 %v3_1338c to i32
  %v4_13390 = mul nuw nsw i32 %v4_13384, 65536
  %v5_13390 = or i32 %v4_13390, %v5_13388
  %v4_13394 = mul nuw i32 %v4_1338c, 16777216
  %v5_13394 = or i32 %v5_13390, %v4_13394
  store i32 %v5_13394, i32* %r3.global-to-local, align 4
  %v1_13398 = load i32, i32* %r7.global-to-local, align 4
  %v2_13398 = add i32 %v1_13398, 72
  %v3_13398 = inttoptr i32 %v2_13398 to i32*
  store i32 %v5_13394, i32* %v3_13398, align 4
  %v0_1339c = load i32, i32* %r4.global-to-local, align 4
  %v1_1339c = add i32 %v0_1339c, 81
  %v2_1339c = inttoptr i32 %v1_1339c to i8*
  %v3_1339c = load i8, i8* %v2_1339c, align 1
  %v4_1339c = zext i8 %v3_1339c to i32
  %v1_133a0 = add i32 %v0_1339c, 80
  %v2_133a0 = inttoptr i32 %v1_133a0 to i8*
  %v3_133a0 = load i8, i8* %v2_133a0, align 1
  %v4_133a0 = zext i8 %v3_133a0 to i32
  store i32 %v4_133a0, i32* %r3.global-to-local, align 4
  %v1_133a4 = add i32 %v0_1339c, 82
  %v2_133a4 = inttoptr i32 %v1_133a4 to i8*
  %v3_133a4 = load i8, i8* %v2_133a4, align 1
  %v4_133a4 = zext i8 %v3_133a4 to i32
  %v4_133a8 = mul nuw nsw i32 %v4_1339c, 256
  %v5_133a8 = or i32 %v4_133a0, %v4_133a8
  store i32 %v5_133a8, i32* %r3.global-to-local, align 4
  %v1_133ac = add i32 %v0_1339c, 83
  %v2_133ac = inttoptr i32 %v1_133ac to i8*
  %v3_133ac = load i8, i8* %v2_133ac, align 1
  %v4_133ac = zext i8 %v3_133ac to i32
  %v4_133b0 = mul nuw nsw i32 %v4_133a4, 65536
  %v5_133b0 = or i32 %v4_133b0, %v5_133a8
  %v4_133b4 = mul nuw i32 %v4_133ac, 16777216
  %v5_133b4 = or i32 %v5_133b0, %v4_133b4
  store i32 %v5_133b4, i32* %r3.global-to-local, align 4
  %v1_133b8 = load i32, i32* %r7.global-to-local, align 4
  %v2_133b8 = add i32 %v1_133b8, 80
  %v3_133b8 = inttoptr i32 %v2_133b8 to i32*
  store i32 %v5_133b4, i32* %v3_133b8, align 4
  %v0_133bc = load i32, i32* %r4.global-to-local, align 4
  %v1_133bc = add i32 %v0_133bc, 69
  %v2_133bc = inttoptr i32 %v1_133bc to i8*
  %v3_133bc = load i8, i8* %v2_133bc, align 1
  %v4_133bc = zext i8 %v3_133bc to i32
  %v1_133c0 = add i32 %v0_133bc, 68
  %v2_133c0 = inttoptr i32 %v1_133c0 to i8*
  %v3_133c0 = load i8, i8* %v2_133c0, align 1
  %v4_133c0 = zext i8 %v3_133c0 to i32
  store i32 %v4_133c0, i32* %r3.global-to-local, align 4
  %v1_133c4 = add i32 %v0_133bc, 70
  %v2_133c4 = inttoptr i32 %v1_133c4 to i8*
  %v3_133c4 = load i8, i8* %v2_133c4, align 1
  %v4_133c4 = zext i8 %v3_133c4 to i32
  %v4_133c8 = mul nuw nsw i32 %v4_133bc, 256
  %v5_133c8 = or i32 %v4_133c0, %v4_133c8
  store i32 %v5_133c8, i32* %r3.global-to-local, align 4
  %v1_133cc = add i32 %v0_133bc, 71
  %v2_133cc = inttoptr i32 %v1_133cc to i8*
  %v3_133cc = load i8, i8* %v2_133cc, align 1
  %v4_133cc = zext i8 %v3_133cc to i32
  %v4_133d0 = mul nuw nsw i32 %v4_133c4, 65536
  %v5_133d0 = or i32 %v4_133d0, %v5_133c8
  %v4_133d4 = mul nuw i32 %v4_133cc, 16777216
  %v5_133d4 = or i32 %v5_133d0, %v4_133d4
  store i32 %v5_133d4, i32* %r3.global-to-local, align 4
  %v1_133d8 = load i32, i32* %r7.global-to-local, align 4
  %v2_133d8 = add i32 %v1_133d8, 68
  %v3_133d8 = inttoptr i32 %v2_133d8 to i32*
  store i32 %v5_133d4, i32* %v3_133d8, align 4
  %v0_133dc = load i32, i32* %r4.global-to-local, align 4
  %v1_133dc = add i32 %v0_133dc, 77
  %v2_133dc = inttoptr i32 %v1_133dc to i8*
  %v3_133dc = load i8, i8* %v2_133dc, align 1
  %v4_133dc = zext i8 %v3_133dc to i32
  %v1_133e0 = add i32 %v0_133dc, 76
  %v2_133e0 = inttoptr i32 %v1_133e0 to i8*
  %v3_133e0 = load i8, i8* %v2_133e0, align 1
  %v4_133e0 = zext i8 %v3_133e0 to i32
  store i32 %v4_133e0, i32* %r3.global-to-local, align 4
  %v1_133e4 = add i32 %v0_133dc, 78
  %v2_133e4 = inttoptr i32 %v1_133e4 to i8*
  %v3_133e4 = load i8, i8* %v2_133e4, align 1
  %v4_133e4 = zext i8 %v3_133e4 to i32
  %v4_133e8 = mul nuw nsw i32 %v4_133dc, 256
  %v5_133e8 = or i32 %v4_133e0, %v4_133e8
  store i32 %v5_133e8, i32* %r3.global-to-local, align 4
  %v1_133ec = add i32 %v0_133dc, 79
  %v2_133ec = inttoptr i32 %v1_133ec to i8*
  %v3_133ec = load i8, i8* %v2_133ec, align 1
  %v4_133ec = zext i8 %v3_133ec to i32
  %v4_133f0 = mul nuw nsw i32 %v4_133e4, 65536
  %v5_133f0 = or i32 %v4_133f0, %v5_133e8
  %v4_133f4 = mul nuw i32 %v4_133ec, 16777216
  %v5_133f4 = or i32 %v5_133f0, %v4_133f4
  store i32 %v5_133f4, i32* %r3.global-to-local, align 4
  %v1_133f8 = load i32, i32* %r7.global-to-local, align 4
  %v2_133f8 = add i32 %v1_133f8, 76
  %v3_133f8 = inttoptr i32 %v2_133f8 to i32*
  store i32 %v5_133f4, i32* %v3_133f8, align 4
  %v0_133fc = load i32, i32* %r4.global-to-local, align 4
  %v1_133fc = add i32 %v0_133fc, 85
  %v2_133fc = inttoptr i32 %v1_133fc to i8*
  %v3_133fc = load i8, i8* %v2_133fc, align 1
  %v4_133fc = zext i8 %v3_133fc to i32
  %v1_13400 = add i32 %v0_133fc, 84
  %v2_13400 = inttoptr i32 %v1_13400 to i8*
  %v3_13400 = load i8, i8* %v2_13400, align 1
  %v4_13400 = zext i8 %v3_13400 to i32
  store i32 %v4_13400, i32* %r3.global-to-local, align 4
  %v1_13404 = add i32 %v0_133fc, 86
  %v2_13404 = inttoptr i32 %v1_13404 to i8*
  %v3_13404 = load i8, i8* %v2_13404, align 1
  %v4_13404 = zext i8 %v3_13404 to i32
  %v4_13408 = mul nuw nsw i32 %v4_133fc, 256
  %v5_13408 = or i32 %v4_13400, %v4_13408
  store i32 %v5_13408, i32* %r3.global-to-local, align 4
  %v1_1340c = add i32 %v0_133fc, 87
  %v2_1340c = inttoptr i32 %v1_1340c to i8*
  %v3_1340c = load i8, i8* %v2_1340c, align 1
  %v4_1340c = zext i8 %v3_1340c to i32
  %v4_13410 = mul nuw nsw i32 %v4_13404, 65536
  %v5_13410 = or i32 %v4_13410, %v5_13408
  %v4_13414 = mul nuw i32 %v4_1340c, 16777216
  %v5_13414 = or i32 %v5_13410, %v4_13414
  store i32 %v5_13414, i32* %r3.global-to-local, align 4
  %v1_13418 = load i32, i32* %r7.global-to-local, align 4
  %v2_13418 = add i32 %v1_13418, 84
  %v3_13418 = inttoptr i32 %v2_13418 to i32*
  store i32 %v5_13414, i32* %v3_13418, align 4
  ret i32 %v4_1331c

; uselistorder directives
  uselistorder i32 %v4_1331c, { 1, 0 }
  uselistorder i32 %v0_13310, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_132a0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13250, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13170, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 62, { 1, 2, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 0, 2 }
  uselistorder i32 47, { 1, 2, 3, 4, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 34, { 2, 0, 1 }
  uselistorder i32 33, { 2, 3, 0, 1 }
  uselistorder i32 30, { 6, 0, 7, 4, 5, 1, 2, 3 }
  uselistorder i32 29, { 4, 1, 0, 5, 6, 3, 2 }
  uselistorder i32 26, { 7, 0, 1, 3, 9, 2, 8, 4, 10, 5, 11, 6, 12, 13 }
  uselistorder i32 25, { 11, 24, 25, 3, 12, 4, 13, 5, 14, 2, 15, 10, 6, 16, 0, 17, 18, 19, 7, 8, 20, 9, 21, 22, 1, 23 }
  uselistorder i32 23, { 6, 1, 0, 7, 2, 3, 4, 5 }
  uselistorder i32 22, { 10, 1, 12, 2, 3, 4, 5, 0, 11, 6, 13, 7, 14, 8, 15, 9 }
  uselistorder i32 21, { 8, 3, 2, 9, 10, 11, 7, 0, 1, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 19, { 11, 13, 14, 15, 5, 1, 6, 2, 0, 12, 7, 8, 9, 10, 16, 3, 17, 4, 18 }
  uselistorder i32 18, { 9, 10, 11, 12, 8, 0, 1, 2, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17 }
  uselistorder i32 17, { 16, 19, 0, 4, 30, 31, 5, 32, 33, 6, 1, 17, 7, 18, 8, 9, 10, 11, 20, 21, 2, 22, 23, 24, 3, 25, 26, 27, 28, 29, 34, 12, 35, 13, 36, 37, 38, 14, 39, 15 }
  uselistorder i32 6, { 28, 35, 15, 16, 80, 2, 33, 3, 18, 29, 19, 30, 20, 31, 17, 32, 0, 21, 34, 4, 5, 36, 37, 38, 22, 39, 6, 40, 41, 42, 23, 43, 7, 44, 45, 46, 24, 47, 48, 49, 25, 50, 54, 55, 56, 8, 57, 58, 59, 60, 9, 61, 62, 63, 64, 65, 26, 66, 10, 67, 68, 69, 70, 71, 72, 27, 73, 11, 74, 75, 76, 77, 12, 78, 13, 14, 1, 79, 51, 52, 53 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_13424(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13424:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13424 = load i32, i32* @r4, align 4
  store i32 %v3_13424, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_1343c = inttoptr i32 %arg2 to i8*
  %v3_1343c = call i32 @function_11900(i8* %v2_1343c, i32 0)
  store i32 %v3_1343c, i32* %r0.global-to-local, align 4
  %v0_13440 = load i32, i32* %r5.global-to-local, align 4
  %v1_13440 = inttoptr i32 %v0_13440 to i32*
  %v2_13440 = load i32, i32* %v1_13440, align 4
  store i32 %v2_13440, i32* %r3.global-to-local, align 4
  %v1_13444 = add i32 %v0_13440, 4
  %v2_13444 = inttoptr i32 %v1_13444 to i32*
  %v3_13444 = load i32, i32* %v2_13444, align 4
  store i32 %v3_13444, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_1344c = load i32, i32* %r6.global-to-local, align 4
  %v1_1344c = inttoptr i32 %v0_1344c to i32*
  store i32 %v2_13440, i32* %v1_1344c, align 4
  %v3_1344c = add i32 %v0_1344c, 4
  %v4_1344c = inttoptr i32 %v3_1344c to i32*
  %v5_1344c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1344c, i32* %v4_1344c, align 4
  %v0_13450 = load i32, i32* %r2.global-to-local, align 4
  %v1_13450 = load i32, i32* %r6.global-to-local, align 4
  %v2_13450 = add i32 %v1_13450, 12
  %v3_13450 = inttoptr i32 %v2_13450 to i32*
  store i32 %v0_13450, i32* %v3_13450, align 4
  %v0_13454 = load i32, i32* %r5.global-to-local, align 4
  %v1_13454 = add i32 %v0_13454, 9
  %v2_13454 = inttoptr i32 %v1_13454 to i8*
  %v3_13454 = load i8, i8* %v2_13454, align 1
  %v4_13454 = zext i8 %v3_13454 to i32
  store i32 %v4_13454, i32* %r2.global-to-local, align 4
  %v1_13458 = add i32 %v0_13454, 8
  %v2_13458 = inttoptr i32 %v1_13458 to i8*
  %v3_13458 = load i8, i8* %v2_13458, align 1
  %v4_13458 = zext i8 %v3_13458 to i32
  %v4_1345c = mul nuw nsw i32 %v4_13454, 256
  %v5_1345c = or i32 %v4_13458, %v4_1345c
  store i32 %v5_1345c, i32* %r3.global-to-local, align 4
  %v1_13460 = load i32, i32* %r6.global-to-local, align 4
  %v2_13460 = add i32 %v1_13460, 16
  %v3_13460 = inttoptr i32 %v2_13460 to i32*
  store i32 %v5_1345c, i32* %v3_13460, align 4
  %v0_13464 = load i32, i32* %r5.global-to-local, align 4
  %v1_13464 = add i32 %v0_13464, 11
  %v2_13464 = inttoptr i32 %v1_13464 to i8*
  %v3_13464 = load i8, i8* %v2_13464, align 1
  %v4_13464 = zext i8 %v3_13464 to i32
  store i32 %v4_13464, i32* %r2.global-to-local, align 4
  %v1_13468 = add i32 %v0_13464, 10
  %v2_13468 = inttoptr i32 %v1_13468 to i8*
  %v3_13468 = load i8, i8* %v2_13468, align 1
  %v4_13468 = zext i8 %v3_13468 to i32
  %v4_1346c = mul nuw nsw i32 %v4_13464, 256
  %v5_1346c = or i32 %v4_13468, %v4_1346c
  store i32 %v5_1346c, i32* %r3.global-to-local, align 4
  %v1_13470 = load i32, i32* %r6.global-to-local, align 4
  %v2_13470 = add i32 %v1_13470, 20
  %v3_13470 = inttoptr i32 %v2_13470 to i32*
  store i32 %v5_1346c, i32* %v3_13470, align 4
  %v0_13474 = load i32, i32* %r5.global-to-local, align 4
  %v1_13474 = add i32 %v0_13474, 13
  %v2_13474 = inttoptr i32 %v1_13474 to i8*
  %v3_13474 = load i8, i8* %v2_13474, align 1
  %v4_13474 = zext i8 %v3_13474 to i32
  store i32 %v4_13474, i32* %r2.global-to-local, align 4
  %v1_13478 = add i32 %v0_13474, 12
  %v2_13478 = inttoptr i32 %v1_13478 to i8*
  %v3_13478 = load i8, i8* %v2_13478, align 1
  %v4_13478 = zext i8 %v3_13478 to i32
  %v4_1347c = mul nuw nsw i32 %v4_13474, 256
  %v5_1347c = or i32 %v4_13478, %v4_1347c
  store i32 %v5_1347c, i32* %r3.global-to-local, align 4
  %v1_13480 = load i32, i32* %r6.global-to-local, align 4
  %v2_13480 = add i32 %v1_13480, 24
  %v3_13480 = inttoptr i32 %v2_13480 to i32*
  store i32 %v5_1347c, i32* %v3_13480, align 4
  %v0_13484 = load i32, i32* %r5.global-to-local, align 4
  %v1_13484 = add i32 %v0_13484, 20
  %v2_13484 = inttoptr i32 %v1_13484 to i32*
  %v3_13484 = load i32, i32* %v2_13484, align 4
  store i32 %v3_13484, i32* %r3.global-to-local, align 4
  %v1_13488 = add i32 %v0_13484, 14
  %v2_13488 = inttoptr i32 %v1_13488 to i8*
  %v3_13488 = load i8, i8* %v2_13488, align 1
  %v4_13488 = zext i8 %v3_13488 to i32
  store i32 %v4_13488, i32* %r0.global-to-local, align 4
  %v1_1348c = add i32 %v0_13484, 15
  %v2_1348c = inttoptr i32 %v1_1348c to i8*
  %v3_1348c = load i8, i8* %v2_1348c, align 1
  %v4_1348c = zext i8 %v3_1348c to i32
  store i32 %v4_1348c, i32* %ip.global-to-local, align 4
  %v1_13490 = add i32 %v0_13484, 16
  %v2_13490 = inttoptr i32 %v1_13490 to i32*
  %v3_13490 = load i32, i32* %v2_13490, align 4
  store i32 %v3_13490, i32* %r1.global-to-local, align 4
  %v1_13494 = load i32, i32* %r6.global-to-local, align 4
  %v2_13494 = add i32 %v1_13494, 44
  %v3_13494 = inttoptr i32 %v2_13494 to i32*
  store i32 %v3_13484, i32* %v3_13494, align 4
  %v0_13498 = load i32, i32* %r5.global-to-local, align 4
  %v1_13498 = add i32 %v0_13498, 24
  %v2_13498 = inttoptr i32 %v1_13498 to i32*
  %v3_13498 = load i32, i32* %v2_13498, align 4
  store i32 %v3_13498, i32* %r3.global-to-local, align 4
  %v1_1349c = load i32, i32* %r6.global-to-local, align 4
  %v2_1349c = add i32 %v1_1349c, 48
  %v3_1349c = inttoptr i32 %v2_1349c to i32*
  store i32 %v3_13498, i32* %v3_1349c, align 4
  %v0_134a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_134a0 = add i32 %v0_134a0, 28
  %v2_134a0 = inttoptr i32 %v1_134a0 to i32*
  %v3_134a0 = load i32, i32* %v2_134a0, align 4
  store i32 %v3_134a0, i32* %r3.global-to-local, align 4
  %v1_134a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_134a4 = add i32 %v1_134a4, 52
  %v3_134a4 = inttoptr i32 %v2_134a4 to i32*
  store i32 %v3_134a0, i32* %v3_134a4, align 4
  %v0_134a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_134a8 = add i32 %v0_134a8, 32
  %v2_134a8 = inttoptr i32 %v1_134a8 to i32*
  %v3_134a8 = load i32, i32* %v2_134a8, align 4
  store i32 %v3_134a8, i32* %r3.global-to-local, align 4
  %v1_134ac = load i32, i32* %r6.global-to-local, align 4
  %v2_134ac = add i32 %v1_134ac, 56
  %v3_134ac = inttoptr i32 %v2_134ac to i32*
  store i32 %v3_134a8, i32* %v3_134ac, align 4
  %v0_134b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_134b0 = add i32 %v0_134b0, 40
  %v2_134b0 = inttoptr i32 %v1_134b0 to i32*
  %v3_134b0 = load i32, i32* %v2_134b0, align 4
  store i32 %v3_134b0, i32* %r3.global-to-local, align 4
  %v1_134b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_134b4 = add i32 %v1_134b4, 64
  %v3_134b4 = inttoptr i32 %v2_134b4 to i32*
  store i32 %v3_134b0, i32* %v3_134b4, align 4
  %v0_134b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_134b8 = add i32 %v0_134b8, 48
  %v2_134b8 = inttoptr i32 %v1_134b8 to i32*
  %v3_134b8 = load i32, i32* %v2_134b8, align 4
  store i32 %v3_134b8, i32* %r3.global-to-local, align 4
  %v1_134bc = load i32, i32* %r6.global-to-local, align 4
  %v2_134bc = add i32 %v1_134bc, 72
  %v3_134bc = inttoptr i32 %v2_134bc to i32*
  store i32 %v3_134b8, i32* %v3_134bc, align 4
  %v0_134c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_134c0 = add i32 %v0_134c0, 36
  %v2_134c0 = inttoptr i32 %v1_134c0 to i32*
  %v3_134c0 = load i32, i32* %v2_134c0, align 4
  store i32 %v3_134c0, i32* %r3.global-to-local, align 4
  %v1_134c4 = load i32, i32* %r6.global-to-local, align 4
  %v2_134c4 = add i32 %v1_134c4, 60
  %v3_134c4 = inttoptr i32 %v2_134c4 to i32*
  store i32 %v3_134c0, i32* %v3_134c4, align 4
  %v0_134c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_134c8 = add i32 %v0_134c8, 44
  %v2_134c8 = inttoptr i32 %v1_134c8 to i32*
  %v3_134c8 = load i32, i32* %v2_134c8, align 4
  store i32 %v3_134c8, i32* %r3.global-to-local, align 4
  %v0_134cc = load i32, i32* %r0.global-to-local, align 4
  %v1_134cc = load i32, i32* %ip.global-to-local, align 4
  %v4_134cc = mul i32 %v1_134cc, 256
  %v5_134cc = or i32 %v4_134cc, %v0_134cc
  store i32 %v5_134cc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_134d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_134d4 = add i32 %v1_134d4, 28
  %v3_134d4 = inttoptr i32 %v2_134d4 to i32*
  store i32 %v5_134cc, i32* %v3_134d4, align 4
  %v0_134d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_134d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_134d8 = add i32 %v1_134d8, 32
  %v3_134d8 = inttoptr i32 %v2_134d8 to i32*
  store i32 %v0_134d8, i32* %v3_134d8, align 4
  %v0_134dc = load i32, i32* %r2.global-to-local, align 4
  %v1_134dc = load i32, i32* %r6.global-to-local, align 4
  %v2_134dc = add i32 %v1_134dc, 36
  %v3_134dc = inttoptr i32 %v2_134dc to i32*
  store i32 %v0_134dc, i32* %v3_134dc, align 4
  %v0_134e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_134e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_134e0 = add i32 %v1_134e0, 68
  %v3_134e0 = inttoptr i32 %v2_134e0 to i32*
  store i32 %v0_134e0, i32* %v3_134e0, align 4
  %v0_134e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_134e4 = add i32 %v0_134e4, 52
  %v2_134e4 = inttoptr i32 %v1_134e4 to i32*
  %v3_134e4 = load i32, i32* %v2_134e4, align 4
  store i32 %v3_134e4, i32* %r3.global-to-local, align 4
  %v1_134e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_134e8 = add i32 %v1_134e8, 76
  %v3_134e8 = inttoptr i32 %v2_134e8 to i32*
  store i32 %v3_134e4, i32* %v3_134e8, align 4
  %v2_134ec = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_134ec, i32* %r4.global-to-local, align 4
  ret i32 %v5_134cc

; uselistorder directives
  uselistorder i32 %v0_13484, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 15, 11, 12, 0, 8, 47, 13, 14, 16, 17, 9, 18, 19, 20, 1, 21, 22, 23, 2, 24, 25, 26, 3, 27, 28, 29, 10, 30, 31, 32, 4, 33, 34, 35, 36, 37, 5, 38, 39, 40, 41, 42, 6, 43, 44, 45, 7, 46 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 18, 14, 13, 15, 2, 16, 3, 17, 4, 5, 6, 7, 8, 9, 10, 11, 19, 20, 12, 21, 22, 23, 24, 0, 25, 26, 27, 28, 1, 29 }
  uselistorder i32 14, { 21, 18, 33, 0, 19, 1, 17, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22, 23, 16, 24, 25, 26, 27, 2, 28, 29, 30, 31, 3, 32 }
  uselistorder i32 13, { 29, 23, 22, 24, 25, 26, 27, 28, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 13, 14, 15, 16, 17, 18, 19, 30, 31, 32, 33, 34, 20, 35, 36, 37, 38, 39, 40, 41, 42, 21, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 2, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 3, 71, 72 }
  uselistorder i32 9, { 42, 43, 44, 8, 5, 45, 9, 6, 32, 13, 28, 14, 29, 15, 30, 11, 31, 12, 27, 24, 10, 3, 33, 25, 34, 2, 26, 16, 35, 17, 36, 18, 37, 38, 19, 39, 20, 40, 21, 41, 0, 22, 1, 58, 46, 47, 48, 49, 50, 51, 7, 52, 53, 54, 55, 56, 57, 59, 60, 4, 61, 23 }
  uselistorder i32 (i8*, i32)* @function_11900, { 2, 0, 6, 7, 1, 3, 4, 5 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_134f0() local_unnamed_addr {
dec_label_pc_134f0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_134f0 = load i32, i32* @r1, align 4
  %v1_134f0 = load i32, i32* @r0, align 4
  %v2_134f0 = sub i32 %v0_134f0, %v1_134f0
  %v3_134f0 = icmp ult i32 %v0_134f0, %v1_134f0
  %v4_134f0 = xor i32 %v1_134f0, %v0_134f0
  %v5_134f0 = xor i32 %v2_134f0, %v0_134f0
  %v6_134f0 = and i32 %v5_134f0, %v4_134f0
  %v7_134f0 = icmp slt i32 %v6_134f0, 0
  store i1 %v7_134f0, i1* %cpsr_v.global-to-local, align 1
  %v8_134f0 = icmp slt i32 %v2_134f0, 0
  store i1 %v8_134f0, i1* %cpsr_n.global-to-local, align 1
  %v9_134f0 = icmp eq i32 %v0_134f0, %v1_134f0
  store i1 %v9_134f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_134f0, label %dec_label_pc_1373c, label %dec_label_pc_134f8

dec_label_pc_134f8:                               ; preds = %dec_label_pc_134f0
  br i1 %v9_134f0, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_134f8
  %merge = phi i32 [ %v0_134f0, %dec_label_pc_134f8 ], [ %v2_137d0, %bb141 ], [ %v11_137ec, %bb144 ], [ %v7_137ec, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_134f8
  store i32 %v1_134f0, i32* %stack_var_-8, align 4
  %v0_13500 = load i32, i32* @r2, align 4
  %v2_13500 = add i32 %v0_13500, -4
  store i32 %v2_13500, i32* %r2.global-to-local, align 4
  %v4_13500 = sub i32 3, %v0_13500
  %v5_13500 = and i32 %v4_13500, %v0_13500
  %v6_13500 = icmp slt i32 %v5_13500, 0
  store i1 %v6_13500, i1* %cpsr_v.global-to-local, align 1
  %v7_13500 = icmp slt i32 %v2_13500, 0
  store i1 %v7_13500, i1* %cpsr_n.global-to-local, align 1
  %v8_13500 = icmp eq i32 %v0_13500, 4
  store i1 %v8_13500, i1* %cpsr_z.global-to-local, align 1
  %v5_13504 = icmp slt i32 %v0_13500, 4
  br i1 %v5_13504, label %bb131, label %dec_label_pc_13508

dec_label_pc_13508:                               ; preds = %bb
  %v1_13508 = urem i32 %v1_134f0, 4
  store i32 %v1_13508, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13508 = icmp eq i32 %v1_13508, 0
  store i1 %v2_13508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13508, label %dec_label_pc_13510, label %dec_label_pc_135b4

dec_label_pc_13510:                               ; preds = %dec_label_pc_13508
  %v1_13510 = urem i32 %v0_134f0, 4
  store i32 %v1_13510, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13510 = icmp eq i32 %v1_13510, 0
  store i1 %v2_13510, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_134f0 to i2
  br i1 %v2_13510, label %dec_label_pc_13518, label %dec_label_pc_135e4

dec_label_pc_13518:                               ; preds = %dec_label_pc_13510, %dec_label_pc_135dc
  %v0_1353092 = phi i32 [ %v1_134f0, %dec_label_pc_13510 ], [ %v0_1362c75, %dec_label_pc_135dc ]
  %v0_1352c91 = phi i32 [ %v0_134f0, %dec_label_pc_13510 ], [ %v0_135dc, %dec_label_pc_135dc ]
  %v0_13518 = phi i32 [ %v2_13500, %dec_label_pc_13510 ], [ %v2_135d4, %dec_label_pc_135dc ]
  %v2_13518 = add i32 %v0_13518, -8
  store i32 %v2_13518, i32* %r2.global-to-local, align 4
  %v4_13518 = sub i32 7, %v0_13518
  %v5_13518 = and i32 %v4_13518, %v0_13518
  %v6_13518 = icmp slt i32 %v5_13518, 0
  store i1 %v6_13518, i1* %cpsr_v.global-to-local, align 1
  %v7_13518 = icmp slt i32 %v2_13518, 0
  store i1 %v7_13518, i1* %cpsr_n.global-to-local, align 1
  %v8_13518 = icmp eq i32 %v0_13518, 8
  store i1 %v8_13518, i1* %cpsr_z.global-to-local, align 1
  %v5_1351c = icmp slt i32 %v0_13518, 8
  br i1 %v5_1351c, label %dec_label_pc_1356c, label %dec_label_pc_13520

dec_label_pc_13520:                               ; preds = %dec_label_pc_13518
  %v2_13520 = add i32 %v0_13518, -28
  store i32 %v2_13520, i32* %r2.global-to-local, align 4
  %v4_13520 = sub i32 27, %v0_13518
  %v5_13520 = and i32 %v4_13520, %v2_13518
  %v6_13520 = icmp slt i32 %v5_13520, 0
  store i1 %v6_13520, i1* %cpsr_v.global-to-local, align 1
  %v7_13520 = icmp slt i32 %v2_13520, 0
  store i1 %v7_13520, i1* %cpsr_n.global-to-local, align 1
  %v8_13520 = icmp eq i32 %v2_13518, 20
  store i1 %v8_13520, i1* %cpsr_z.global-to-local, align 1
  %v5_13524 = icmp slt i32 %v2_13518, 20
  br i1 %v5_13524, label %dec_label_pc_13558, label %dec_label_pc_13528

dec_label_pc_13528:                               ; preds = %dec_label_pc_13520
  %v0_13528 = load i32, i32* @r4, align 4
  store i32 %v0_13528, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1352c

dec_label_pc_1352c:                               ; preds = %dec_label_pc_1352c.dec_label_pc_1352c_crit_edge, %dec_label_pc_13528
  %v0_13530 = phi i32 [ %v12_13538, %dec_label_pc_1352c.dec_label_pc_1352c_crit_edge ], [ %v0_1353092, %dec_label_pc_13528 ]
  %v0_1352c = phi i32 [ %v0_1352c.pre, %dec_label_pc_1352c.dec_label_pc_1352c_crit_edge ], [ %v0_1352c91, %dec_label_pc_13528 ]
  %v1_1352c = inttoptr i32 %v0_1352c to i32*
  %v2_1352c = load i32, i32* %v1_1352c, align 4
  store i32 %v2_1352c, i32* %r3.global-to-local, align 4
  %v3_1352c = add i32 %v0_1352c, 4
  %v4_1352c = inttoptr i32 %v3_1352c to i32*
  %v5_1352c = load i32, i32* %v4_1352c, align 4
  store i32 %v5_1352c, i32* %r4.global-to-local, align 4
  %v6_1352c = add i32 %v0_1352c, 8
  %v7_1352c = inttoptr i32 %v6_1352c to i32*
  %v8_1352c = load i32, i32* %v7_1352c, align 4
  store i32 %v8_1352c, i32* %ip.global-to-local, align 4
  %v9_1352c = add i32 %v0_1352c, 12
  %v10_1352c = inttoptr i32 %v9_1352c to i32*
  %v11_1352c = load i32, i32* %v10_1352c, align 4
  store i32 %v11_1352c, i32* %lr.global-to-local, align 4
  %v12_1352c = add i32 %v0_1352c, 16
  store i32 %v12_1352c, i32* %r1.global-to-local, align 4
  %v1_13530 = inttoptr i32 %v0_13530 to i32*
  store i32 %v2_1352c, i32* %v1_13530, align 4
  %v3_13530 = add i32 %v0_13530, 4
  %v4_13530 = inttoptr i32 %v3_13530 to i32*
  %v5_13530 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13530, i32* %v4_13530, align 4
  %v6_13530 = add i32 %v0_13530, 8
  %v7_13530 = inttoptr i32 %v6_13530 to i32*
  %v8_13530 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_13530, i32* %v7_13530, align 4
  %v9_13530 = add i32 %v0_13530, 12
  %v10_13530 = inttoptr i32 %v9_13530 to i32*
  %v11_13530 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_13530, i32* %v10_13530, align 4
  %v12_13530 = add i32 %v0_13530, 16
  store i32 %v12_13530, i32* %r0.global-to-local, align 4
  %v0_13534 = load i32, i32* %r1.global-to-local, align 4
  %v1_13534 = inttoptr i32 %v0_13534 to i32*
  %v2_13534 = load i32, i32* %v1_13534, align 4
  store i32 %v2_13534, i32* %r3.global-to-local, align 4
  %v3_13534 = add i32 %v0_13534, 4
  %v4_13534 = inttoptr i32 %v3_13534 to i32*
  %v5_13534 = load i32, i32* %v4_13534, align 4
  store i32 %v5_13534, i32* %r4.global-to-local, align 4
  %v6_13534 = add i32 %v0_13534, 8
  %v7_13534 = inttoptr i32 %v6_13534 to i32*
  %v8_13534 = load i32, i32* %v7_13534, align 4
  store i32 %v8_13534, i32* @ip, align 4
  %v9_13534 = add i32 %v0_13534, 12
  %v10_13534 = inttoptr i32 %v9_13534 to i32*
  %v11_13534 = load i32, i32* %v10_13534, align 4
  store i32 %v11_13534, i32* @lr, align 4
  %v12_13534 = add i32 %v0_13534, 16
  store i32 %v12_13534, i32* @r1, align 4
  %v1_13538 = inttoptr i32 %v12_13530 to i32*
  store i32 %v2_13534, i32* %v1_13538, align 4
  %v3_13538 = add i32 %v0_13530, 20
  %v4_13538 = inttoptr i32 %v3_13538 to i32*
  %v5_13538 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13538, i32* %v4_13538, align 4
  %v6_13538 = add i32 %v0_13530, 24
  %v7_13538 = inttoptr i32 %v6_13538 to i32*
  %v8_13538 = load i32, i32* @ip, align 4
  store i32 %v8_13538, i32* %v7_13538, align 4
  %v9_13538 = add i32 %v0_13530, 28
  %v10_13538 = inttoptr i32 %v9_13538 to i32*
  %v11_13538 = load i32, i32* @lr, align 4
  store i32 %v11_13538, i32* %v10_13538, align 4
  %v12_13538 = add i32 %v0_13530, 32
  store i32 %v12_13538, i32* @r0, align 4
  %v0_1353c = load i32, i32* %r2.global-to-local, align 4
  %v2_1353c = add i32 %v0_1353c, -32
  store i32 %v2_1353c, i32* %r2.global-to-local, align 4
  %v6_13540 = icmp slt i32 %v0_1353c, 32
  br i1 %v6_13540, label %dec_label_pc_13544, label %dec_label_pc_1352c.dec_label_pc_1352c_crit_edge

dec_label_pc_1352c.dec_label_pc_1352c_crit_edge:  ; preds = %dec_label_pc_1352c
  %v0_1352c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1352c

dec_label_pc_13544:                               ; preds = %dec_label_pc_1352c
  %v4_13544 = add i32 %v0_1353c, -16
  %v6_13544 = add i32 %v0_1353c, 2147483616
  %v7_13544 = and i32 %v4_13544, %v6_13544
  %v8_13544 = icmp slt i32 %v7_13544, 0
  store i1 %v8_13544, i1* %cpsr_v.global-to-local, align 1
  %v9_13544 = icmp slt i32 %v4_13544, 0
  store i1 %v9_13544, i1* %cpsr_n.global-to-local, align 1
  %v10_13544 = icmp eq i32 %v4_13544, 0
  store i1 %v10_13544, i1* %cpsr_z.global-to-local, align 1
  %v5_13548 = icmp slt i32 %v2_1353c, -16
  br i1 %v5_13548, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_13544
  %v6_13548 = load i32, i32* @r1, align 4
  %v7_13548 = inttoptr i32 %v6_13548 to i32*
  %v8_13548 = load i32, i32* %v7_13548, align 4
  store i32 %v8_13548, i32* %r3.global-to-local, align 4
  %v9_13548 = add i32 %v6_13548, 4
  %v10_13548 = inttoptr i32 %v9_13548 to i32*
  %v11_13548 = load i32, i32* %v10_13548, align 4
  store i32 %v11_13548, i32* %r4.global-to-local, align 4
  %v12_13548 = add i32 %v6_13548, 8
  %v13_13548 = inttoptr i32 %v12_13548 to i32*
  %v14_13548 = load i32, i32* %v13_13548, align 4
  store i32 %v14_13548, i32* @ip, align 4
  %v15_13548 = add i32 %v6_13548, 12
  %v16_13548 = inttoptr i32 %v15_13548 to i32*
  %v17_13548 = load i32, i32* %v16_13548, align 4
  store i32 %v17_13548, i32* @lr, align 4
  %v18_13548 = add i32 %v6_13548, 16
  store i32 %v18_13548, i32* @r1, align 4
  %v7_1354c = inttoptr i32 %v12_13538 to i32*
  store i32 %v8_13548, i32* %v7_1354c, align 4
  %v9_1354c = add i32 %v0_13530, 36
  %v10_1354c = inttoptr i32 %v9_1354c to i32*
  %v11_1354c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1354c, i32* %v10_1354c, align 4
  %v12_1354c = add i32 %v0_13530, 40
  %v13_1354c = inttoptr i32 %v12_1354c to i32*
  %v14_1354c = load i32, i32* @ip, align 4
  store i32 %v14_1354c, i32* %v13_1354c, align 4
  %v15_1354c = add i32 %v0_13530, 44
  %v16_1354c = inttoptr i32 %v15_1354c to i32*
  %v17_1354c = load i32, i32* @lr, align 4
  store i32 %v17_1354c, i32* %v16_1354c, align 4
  %v18_1354c = add i32 %v0_13530, 48
  store i32 %v18_1354c, i32* @r0, align 4
  %v6_13550 = load i32, i32* %r2.global-to-local, align 4
  %v7_13550 = add i32 %v6_13550, -16
  store i32 %v7_13550, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13544, %bb128
  %v3_13560101 = phi i32 [ %v12_13538, %dec_label_pc_13544 ], [ %v18_1354c, %bb128 ]
  %v0_1355895 = phi i32 [ %v2_1353c, %dec_label_pc_13544 ], [ %v7_13550, %bb128 ]
  %v2_13554 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13554, i32* @r4, align 4
  br label %dec_label_pc_13558

dec_label_pc_13558:                               ; preds = %dec_label_pc_13520, %.thread1
  %v3_13560100 = phi i32 [ %v0_1353092, %dec_label_pc_13520 ], [ %v3_13560101, %.thread1 ]
  %v0_13558 = phi i32 [ %v2_13520, %dec_label_pc_13520 ], [ %v0_1355895, %.thread1 ]
  %v1_13558 = add i32 %v0_13558, 20
  store i32 %v1_13558, i32* %r2.global-to-local, align 4
  %v3_13558 = sub i32 0, %v0_13558
  %v4_13558 = and i32 %v1_13558, %v3_13558
  %v5_13558 = icmp slt i32 %v4_13558, 0
  store i1 %v5_13558, i1* %cpsr_v.global-to-local, align 1
  %v6_13558 = icmp slt i32 %v1_13558, 0
  store i1 %v6_13558, i1* %cpsr_n.global-to-local, align 1
  %v7_13558 = icmp eq i32 %v1_13558, 0
  store i1 %v7_13558, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1355c

dec_label_pc_1355c:                               ; preds = %.thread117, %dec_label_pc_13558
  %v0_1356c.pre147 = phi i32 [ %v0_1356c.pre, %.thread117 ], [ %v1_13558, %dec_label_pc_13558 ]
  %v3_13560 = phi i32 [ %v3_1356098118, %.thread117 ], [ %v3_13560100, %dec_label_pc_13558 ]
  %v1_13564 = phi i1 [ %v1_13568, %.thread117 ], [ %v5_13558, %dec_label_pc_13558 ]
  %v0_13564 = phi i1 [ %v0_13568, %.thread117 ], [ %v6_13558, %dec_label_pc_13558 ]
  %v2_1355c = xor i1 %v1_13564, %v0_13564
  br i1 %v2_1355c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_1355c
  %v3_1355c = load i32, i32* @r1, align 4
  %v4_1355c = inttoptr i32 %v3_1355c to i32*
  %v5_1355c = load i32, i32* %v4_1355c, align 4
  store i32 %v5_1355c, i32* %r3.global-to-local, align 4
  %v6_1355c = add i32 %v3_1355c, 4
  %v7_1355c = inttoptr i32 %v6_1355c to i32*
  %v8_1355c = load i32, i32* %v7_1355c, align 4
  store i32 %v8_1355c, i32* @ip, align 4
  %v9_1355c = add i32 %v3_1355c, 8
  %v10_1355c = inttoptr i32 %v9_1355c to i32*
  %v11_1355c = load i32, i32* %v10_1355c, align 4
  store i32 %v11_1355c, i32* @lr, align 4
  %v12_1355c = add i32 %v3_1355c, 12
  store i32 %v12_1355c, i32* @r1, align 4
  %v4_13560 = inttoptr i32 %v3_13560 to i32*
  store i32 %v5_1355c, i32* %v4_13560, align 4
  %v6_13560 = add i32 %v3_13560, 4
  %v7_13560 = inttoptr i32 %v6_13560 to i32*
  %v8_13560 = load i32, i32* @ip, align 4
  store i32 %v8_13560, i32* %v7_13560, align 4
  %v9_13560 = add i32 %v3_13560, 8
  %v10_13560 = inttoptr i32 %v9_13560 to i32*
  %v11_13560 = load i32, i32* @lr, align 4
  store i32 %v11_13560, i32* %v10_13560, align 4
  %v12_13560 = add i32 %v3_13560, 12
  store i32 %v12_13560, i32* @r0, align 4
  %v3_13564 = load i32, i32* %r2.global-to-local, align 4
  %v4_13564 = add i32 %v3_13564, -12
  store i32 %v4_13564, i32* %r2.global-to-local, align 4
  %v6_13564 = sub i32 11, %v3_13564
  %v7_13564 = and i32 %v6_13564, %v3_13564
  %v8_13564 = icmp slt i32 %v7_13564, 0
  store i1 %v8_13564, i1* %cpsr_v.global-to-local, align 1
  %v9_13564 = icmp slt i32 %v4_13564, 0
  store i1 %v9_13564, i1* %cpsr_n.global-to-local, align 1
  %v10_13564 = icmp eq i32 %v3_13564, 12
  store i1 %v10_13564, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_1355c, %bb129
  %v0_1356c.pre = phi i32 [ %v4_13564, %bb129 ], [ %v0_1356c.pre147, %dec_label_pc_1355c ]
  %v3_1356098118 = phi i32 [ %v12_13560, %bb129 ], [ %v3_13560, %dec_label_pc_1355c ]
  %v1_13568 = phi i1 [ %v8_13564, %bb129 ], [ %v1_13564, %dec_label_pc_1355c ]
  %v0_13568 = phi i1 [ %v9_13564, %bb129 ], [ %v0_13564, %dec_label_pc_1355c ]
  %v2_13568 = xor i1 %v1_13568, %v0_13568
  br i1 %v2_13568, label %dec_label_pc_1356c, label %dec_label_pc_1355c

dec_label_pc_1356c:                               ; preds = %.thread117, %dec_label_pc_13518
  %v7_1357c = phi i32 [ %v0_1353092, %dec_label_pc_13518 ], [ %v3_1356098118, %.thread117 ]
  %v0_1356c = phi i32 [ %v2_13518, %dec_label_pc_13518 ], [ %v0_1356c.pre, %.thread117 ]
  %v2_1356c = add i32 %v0_1356c, 8
  store i32 %v2_1356c, i32* %r2.global-to-local, align 4
  %v4_1356c = sub i32 0, %v0_1356c
  %v5_1356c = and i32 %v2_1356c, %v4_1356c
  %v6_1356c = icmp slt i32 %v5_1356c, 0
  store i1 %v6_1356c, i1* %cpsr_v.global-to-local, align 1
  %v7_1356c = icmp slt i32 %v2_1356c, 0
  store i1 %v7_1356c, i1* %cpsr_n.global-to-local, align 1
  %v8_1356c = icmp eq i32 %v2_1356c, 0
  store i1 %v8_1356c, i1* %cpsr_z.global-to-local, align 1
  %v5_13570 = icmp slt i32 %v0_1356c, -8
  br i1 %v5_13570, label %bb131, label %dec_label_pc_13574

dec_label_pc_13574:                               ; preds = %dec_label_pc_1356c
  %v6_13574 = add i32 %v0_1356c, 4
  store i32 %v6_13574, i32* %r2.global-to-local, align 4
  %v8_13574 = sub i32 -5, %v0_1356c
  %v9_13574 = and i32 %v8_13574, %v2_1356c
  %v10_13574 = icmp slt i32 %v9_13574, 0
  store i1 %v10_13574, i1* %cpsr_v.global-to-local, align 1
  %v11_13574 = icmp slt i32 %v6_13574, 0
  store i1 %v11_13574, i1* %cpsr_n.global-to-local, align 1
  %v12_13574 = icmp eq i32 %v2_1356c, 4
  store i1 %v12_13574, i1* %cpsr_z.global-to-local, align 1
  %v5_13578 = icmp slt i32 %v2_1356c, 4
  %v6_13578 = load i32, i32* @r1, align 4
  %v7_13578 = inttoptr i32 %v6_13578 to i32*
  %v8_13578 = load i32, i32* %v7_13578, align 4
  store i32 %v8_13578, i32* %r3.global-to-local, align 4
  %v10_13578 = add i32 %v6_13578, 4
  br i1 %v5_13578, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_13574
  store i32 %v10_13578, i32* @r1, align 4
  %v8_1357c = inttoptr i32 %v7_1357c to i32*
  store i32 %v8_13578, i32* %v8_1357c, align 4
  %v9_1357c = load i32, i32* @r0, align 4
  %v10_1357c = add i32 %v9_1357c, 4
  store i32 %v10_1357c, i32* @r0, align 4
  %v0_1358c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_13574
  %v10_13580 = inttoptr i32 %v10_13578 to i32*
  %v11_13580 = load i32, i32* %v10_13580, align 4
  store i32 %v11_13580, i32* @ip, align 4
  %v12_13580 = add i32 %v6_13578, 8
  store i32 %v12_13580, i32* @r1, align 4
  %v7_13584 = inttoptr i32 %v7_1357c to i32*
  store i32 %v8_13578, i32* %v7_13584, align 4
  %v9_13584 = add i32 %v7_1357c, 4
  %v10_13584 = inttoptr i32 %v9_13584 to i32*
  %v11_13584 = load i32, i32* @ip, align 4
  store i32 %v11_13584, i32* %v10_13584, align 4
  %v12_13584 = add i32 %v7_1357c, 8
  store i32 %v12_13584, i32* @r0, align 4
  %v6_13588 = load i32, i32* %r2.global-to-local, align 4
  %v7_13588 = add i32 %v6_13588, -4
  store i32 %v7_13588, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_1356c, %bb, %dec_label_pc_13734, %dec_label_pc_136c8, %dec_label_pc_1365c, %bb130
  %v2_1359c = phi i32 [ %v10_1357c, %.thread5 ], [ %v0_1362c75, %.thread11 ], [ %v7_1357c, %dec_label_pc_1356c ], [ %v1_134f0, %bb ], [ %v2_1359c113, %dec_label_pc_13734 ], [ %v2_1359c112, %dec_label_pc_136c8 ], [ %v2_1359c111, %dec_label_pc_1365c ], [ %v12_13584, %bb130 ]
  %v0_1358c = phi i32 [ %v0_1358c.pre, %.thread5 ], [ %v2_135d4, %.thread11 ], [ %v2_1356c, %dec_label_pc_1356c ], [ %v2_13500, %bb ], [ %v0_1358c109, %dec_label_pc_13734 ], [ %v0_1358c108, %dec_label_pc_136c8 ], [ %v0_1358c107, %dec_label_pc_1365c ], [ %v7_13588, %bb130 ]
  %v1_1358c = add i32 %v0_1358c, 4
  store i32 %v1_1358c, i32* %r2.global-to-local, align 4
  %v3_1358c = sub i32 0, %v0_1358c
  %v4_1358c = and i32 %v1_1358c, %v3_1358c
  %v5_1358c = icmp slt i32 %v4_1358c, 0
  store i1 %v5_1358c, i1* %cpsr_v.global-to-local, align 1
  %v6_1358c = icmp slt i32 %v1_1358c, 0
  store i1 %v6_1358c, i1* %cpsr_n.global-to-local, align 1
  %v7_1358c = icmp eq i32 %v1_1358c, 0
  store i1 %v7_1358c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1358c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_13590 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_13590, i32* %r0.global-to-local, align 4
  ret i32 %v3_13590

bb133:                                            ; preds = %bb131
  %v1_13594 = add i32 %v0_1358c, 2
  %v3_13594 = sub i32 -3, %v0_1358c
  %v4_13594 = and i32 %v3_13594, %v1_1358c
  %v5_13594 = icmp slt i32 %v4_13594, 0
  store i1 %v5_13594, i1* %cpsr_v.global-to-local, align 1
  %v6_13594 = icmp slt i32 %v1_13594, 0
  store i1 %v6_13594, i1* %cpsr_n.global-to-local, align 1
  %v7_13594 = icmp eq i32 %v1_1358c, 2
  store i1 %v7_13594, i1* %cpsr_z.global-to-local, align 1
  %v0_13598 = load i32, i32* @r1, align 4
  %v1_13598 = inttoptr i32 %v0_13598 to i8*
  %v2_13598 = load i8, i8* %v1_13598, align 1
  %v3_13598 = zext i8 %v2_13598 to i32
  store i32 %v3_13598, i32* %r3.global-to-local, align 4
  %v5_13598 = add i32 %v0_13598, 1
  store i32 %v5_13598, i32* %r1.global-to-local, align 4
  %v3_1359c = inttoptr i32 %v2_1359c to i8*
  store i8 %v2_13598, i8* %v3_1359c, align 1
  %v4_1359c = load i32, i32* @r0, align 4
  %v5_1359c = add i32 %v4_1359c, 1
  store i32 %v5_1359c, i32* %r0.global-to-local, align 4
  %v0_135a0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_135a0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_135a0 = xor i1 %v0_135a0, %v1_135a0
  br i1 %v2_135a0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_135a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_135a0 = inttoptr i32 %v3_135a0 to i8*
  %v5_135a0 = load i8, i8* %v4_135a0, align 1
  %v6_135a0 = zext i8 %v5_135a0 to i32
  store i32 %v6_135a0, i32* %r3.global-to-local, align 4
  %v8_135a0 = add i32 %v3_135a0, 1
  store i32 %v8_135a0, i32* %r1.global-to-local, align 4
  %v6_135a4 = inttoptr i32 %v5_1359c to i8*
  store i8 %v5_135a0, i8* %v6_135a4, align 1
  %v7_135a4 = load i32, i32* %r0.global-to-local, align 4
  %v8_135a4 = add i32 %v7_135a4, 1
  store i32 %v8_135a4, i32* %r0.global-to-local, align 4
  %v1_135a8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_135a8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_135ac = phi i32 [ %v8_135a4, %bb134 ], [ %v5_1359c, %bb133 ]
  %v2_135ac = phi i1 [ %v2_135a8.pre, %bb134 ], [ %v1_135a0, %bb133 ]
  %v1_135ac = phi i1 [ %v1_135a8.pre, %bb134 ], [ %v0_135a0, %bb133 ]
  %v0_135a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_135a8 = xor i1 %v2_135ac, %v1_135ac
  %v4_135a8 = or i1 %v0_135a8, %v3_135a8
  br i1 %v4_135a8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_135a8 = load i32, i32* %r1.global-to-local, align 4
  %v6_135a8 = inttoptr i32 %v5_135a8 to i8*
  %v7_135a8 = load i8, i8* %v6_135a8, align 1
  %v8_135a8 = zext i8 %v7_135a8 to i32
  store i32 %v8_135a8, i32* %r3.global-to-local, align 4
  %v10_135a8 = add i32 %v5_135a8, 1
  store i32 %v10_135a8, i32* %r1.global-to-local, align 4
  %v8_135ac = inttoptr i32 %v7_135ac to i8*
  store i8 %v7_135a8, i8* %v8_135ac, align 1
  %v9_135ac = load i32, i32* %r0.global-to-local, align 4
  %v10_135ac = add i32 %v9_135ac, 1
  store i32 %v10_135ac, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_135b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_135b0, i32* %r0.global-to-local, align 4
  ret i32 %v2_135b0

dec_label_pc_135b4:                               ; preds = %dec_label_pc_13508
  %v1_135b4 = sub nsw i32 4, %v1_13508
  store i32 %v1_135b4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_135b8 = icmp ult i32 %v1_135b4, 2
  store i1 %v8_135b8, i1* %cpsr_n.global-to-local, align 1
  %v9_135b8 = icmp eq i32 %v1_135b4, 2
  store i1 %v9_135b8, i1* %cpsr_z.global-to-local, align 1
  %v1_135bc = inttoptr i32 %v0_134f0 to i8*
  %v2_135bc = load i8, i8* %v1_135bc, align 1
  %v3_135bc = zext i8 %v2_135bc to i32
  store i32 %v3_135bc, i32* %r3.global-to-local, align 4
  %v5_135bc = add i32 %v0_134f0, 1
  store i32 %v5_135bc, i32* @r1, align 4
  %v3_135c0 = inttoptr i32 %v1_134f0 to i8*
  store i8 %v2_135bc, i8* %v3_135c0, align 1
  %v4_135c0 = load i32, i32* @r0, align 4
  %v5_135c0 = add i32 %v4_135c0, 1
  store i32 %v5_135c0, i32* @r0, align 4
  br i1 %v8_135b8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_135b4
  %v6_135c4 = load i32, i32* @r1, align 4
  %v7_135c4 = inttoptr i32 %v6_135c4 to i8*
  %v8_135c4 = load i8, i8* %v7_135c4, align 1
  %v9_135c4 = zext i8 %v8_135c4 to i32
  store i32 %v9_135c4, i32* %r3.global-to-local, align 4
  %v11_135c4 = add i32 %v6_135c4, 1
  store i32 %v11_135c4, i32* @r1, align 4
  %v9_135c8 = inttoptr i32 %v5_135c0 to i8*
  store i8 %v8_135c4, i8* %v9_135c8, align 1
  %v10_135c8 = load i32, i32* @r0, align 4
  %v11_135c8 = add i32 %v10_135c8, 1
  store i32 %v11_135c8, i32* @r0, align 4
  br i1 %v9_135b8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_135cc = load i32, i32* @r1, align 4
  %v9_135cc = inttoptr i32 %v8_135cc to i8*
  %v10_135cc = load i8, i8* %v9_135cc, align 1
  %v11_135cc = zext i8 %v10_135cc to i32
  store i32 %v11_135cc, i32* %r3.global-to-local, align 4
  %v13_135cc = add i32 %v8_135cc, 1
  store i32 %v13_135cc, i32* @r1, align 4
  %v11_135d0 = inttoptr i32 %v11_135c8 to i8*
  store i8 %v10_135cc, i8* %v11_135d0, align 1
  %v12_135d0 = load i32, i32* @r0, align 4
  %v13_135d0 = add i32 %v12_135d0, 1
  store i32 %v13_135d0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_135b4, %bb137
  %v0_1362c75 = phi i32 [ %v11_135c8, %bb136 ], [ %v5_135c0, %dec_label_pc_135b4 ], [ %v13_135d0, %bb137 ]
  %v0_135d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_135d4 = load i32, i32* @ip, align 4
  %v2_135d4 = sub i32 %v0_135d4, %v1_135d4
  store i32 %v2_135d4, i32* %r2.global-to-local, align 4
  %v4_135d4 = xor i32 %v1_135d4, %v0_135d4
  %v5_135d4 = xor i32 %v2_135d4, %v0_135d4
  %v6_135d4 = and i32 %v5_135d4, %v4_135d4
  %v7_135d4 = icmp slt i32 %v6_135d4, 0
  store i1 %v7_135d4, i1* %cpsr_v.global-to-local, align 1
  %v8_135d4 = icmp slt i32 %v2_135d4, 0
  store i1 %v8_135d4, i1* %cpsr_n.global-to-local, align 1
  %v9_135d4 = icmp eq i32 %v0_135d4, %v1_135d4
  store i1 %v9_135d4, i1* %cpsr_z.global-to-local, align 1
  %v5_135d8 = icmp slt i32 %v0_135d4, %v1_135d4
  br i1 %v5_135d8, label %bb131, label %dec_label_pc_135dc

dec_label_pc_135dc:                               ; preds = %.thread11
  %v0_135dc = load i32, i32* @r1, align 4
  %v1_135dc = urem i32 %v0_135dc, 4
  store i32 %v1_135dc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_135dc = icmp eq i32 %v1_135dc, 0
  store i1 %v2_135dc, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_135dc to i2
  br i1 %v2_135dc, label %dec_label_pc_13518, label %dec_label_pc_135e4

dec_label_pc_135e4:                               ; preds = %dec_label_pc_13510, %dec_label_pc_135dc
  %v0_1362c74 = phi i32 [ %v1_134f0, %dec_label_pc_13510 ], [ %v0_1362c75, %dec_label_pc_135dc ]
  %v0_136d8 = phi i32 [ %v2_13500, %dec_label_pc_13510 ], [ %v2_135d4, %dec_label_pc_135dc ]
  %v0_135ec.off0 = phi i2 [ %extract.t, %dec_label_pc_13510 ], [ %extract.t123, %dec_label_pc_135dc ]
  %v0_135e4 = phi i32 [ %v0_134f0, %dec_label_pc_13510 ], [ %v0_135dc, %dec_label_pc_135dc ]
  %v1_135e4 = and i32 %v0_135e4, -4
  store i32 %v1_135e4, i32* %r1.global-to-local, align 4
  %v1_135e8 = inttoptr i32 %v1_135e4 to i32*
  %v2_135e8 = load i32, i32* %v1_135e8, align 4
  store i32 %v2_135e8, i32* @lr, align 4
  %v4_135e8 = add i32 %v1_135e4, 4
  store i32 %v4_135e8, i32* %r1.global-to-local, align 4
  %v2_136d0 = add i32 %v0_136d8, -12
  %v4_136d0 = sub i32 11, %v0_136d8
  %v5_136d0 = and i32 %v4_136d0, %v0_136d8
  %v6_136d0 = icmp slt i32 %v5_136d0, 0
  store i1 %v6_136d0, i1* %cpsr_v.global-to-local, align 1
  %v7_136d0 = icmp slt i32 %v2_136d0, 0
  store i1 %v7_136d0, i1* %cpsr_n.global-to-local, align 1
  %v8_136d0 = icmp eq i32 %v0_136d8, 12
  store i1 %v8_136d0, i1* %cpsr_z.global-to-local, align 1
  %v5_136d4 = icmp slt i32 %v0_136d8, 12
  switch i2 %v0_135ec.off0, label %dec_label_pc_135f8 [
    i2 -1, label %dec_label_pc_136d0
    i2 -2, label %dec_label_pc_13664
  ]

dec_label_pc_135f8:                               ; preds = %dec_label_pc_135e4
  br i1 %v5_136d4, label %dec_label_pc_13644, label %dec_label_pc_13600

dec_label_pc_13600:                               ; preds = %dec_label_pc_135f8
  store i32 %v2_136d0, i32* %r2.global-to-local, align 4
  %v3_13604 = load i32, i32* @r4, align 4
  store i32 %v3_13604, i32* %stack_var_-16, align 4
  %v6_13604 = load i32, i32* @r5, align 4
  store i32 %v6_13604, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13608

dec_label_pc_13608:                               ; preds = %dec_label_pc_13608.dec_label_pc_13608_crit_edge, %dec_label_pc_13600
  %v0_1362c = phi i32 [ %v12_1362c, %dec_label_pc_13608.dec_label_pc_13608_crit_edge ], [ %v0_1362c74, %dec_label_pc_13600 ]
  %v0_1360c = phi i32 [ %v0_1360c.pre, %dec_label_pc_13608.dec_label_pc_13608_crit_edge ], [ %v4_135e8, %dec_label_pc_13600 ]
  %v0_13608 = phi i32 [ %v0_13608.pre, %dec_label_pc_13608.dec_label_pc_13608_crit_edge ], [ %v2_135e8, %dec_label_pc_13600 ]
  %v3_13608 = udiv i32 %v0_13608, 256
  store i32 %v3_13608, i32* %r3.global-to-local, align 4
  %v1_1360c = inttoptr i32 %v0_1360c to i32*
  %v2_1360c = load i32, i32* %v1_1360c, align 4
  store i32 %v2_1360c, i32* %r4.global-to-local, align 4
  %v3_1360c = add i32 %v0_1360c, 4
  %v4_1360c = inttoptr i32 %v3_1360c to i32*
  %v5_1360c = load i32, i32* %v4_1360c, align 4
  store i32 %v5_1360c, i32* %r5.global-to-local, align 4
  %v6_1360c = add i32 %v0_1360c, 8
  %v7_1360c = inttoptr i32 %v6_1360c to i32*
  %v8_1360c = load i32, i32* %v7_1360c, align 4
  store i32 %v8_1360c, i32* %ip.global-to-local, align 4
  %v9_1360c = add i32 %v0_1360c, 12
  %v10_1360c = inttoptr i32 %v9_1360c to i32*
  %v11_1360c = load i32, i32* %v10_1360c, align 4
  store i32 %v11_1360c, i32* @lr, align 4
  %v12_1360c = add i32 %v0_1360c, 16
  store i32 %v12_1360c, i32* %r1.global-to-local, align 4
  %v4_13610 = mul i32 %v2_1360c, 16777216
  %v5_13610 = or i32 %v4_13610, %v3_13608
  store i32 %v5_13610, i32* %r3.global-to-local, align 4
  %v3_13614 = udiv i32 %v2_1360c, 256
  %v4_13618 = mul i32 %v5_1360c, 16777216
  %v5_13618 = or i32 %v4_13618, %v3_13614
  store i32 %v5_13618, i32* %r4.global-to-local, align 4
  %v3_1361c = udiv i32 %v5_1360c, 256
  %v4_13620 = mul i32 %v8_1360c, 16777216
  %v5_13620 = or i32 %v4_13620, %v3_1361c
  store i32 %v5_13620, i32* %r5.global-to-local, align 4
  %v3_13624 = udiv i32 %v8_1360c, 256
  %v4_13628 = mul i32 %v11_1360c, 16777216
  %v5_13628 = or i32 %v4_13628, %v3_13624
  store i32 %v5_13628, i32* @ip, align 4
  %v1_1362c = inttoptr i32 %v0_1362c to i32*
  store i32 %v5_13610, i32* %v1_1362c, align 4
  %v3_1362c = add i32 %v0_1362c, 4
  %v4_1362c = inttoptr i32 %v3_1362c to i32*
  %v5_1362c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1362c, i32* %v4_1362c, align 4
  %v6_1362c = add i32 %v0_1362c, 8
  %v7_1362c = inttoptr i32 %v6_1362c to i32*
  %v8_1362c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1362c, i32* %v7_1362c, align 4
  %v9_1362c = add i32 %v0_1362c, 12
  %v10_1362c = inttoptr i32 %v9_1362c to i32*
  %v11_1362c = load i32, i32* @ip, align 4
  store i32 %v11_1362c, i32* %v10_1362c, align 4
  %v12_1362c = add i32 %v0_1362c, 16
  store i32 %v12_1362c, i32* @r0, align 4
  %v0_13630 = load i32, i32* %r2.global-to-local, align 4
  %v2_13630 = add i32 %v0_13630, -16
  store i32 %v2_13630, i32* %r2.global-to-local, align 4
  %v6_13634 = icmp slt i32 %v0_13630, 16
  br i1 %v6_13634, label %dec_label_pc_13638, label %dec_label_pc_13608.dec_label_pc_13608_crit_edge

dec_label_pc_13608.dec_label_pc_13608_crit_edge:  ; preds = %dec_label_pc_13608
  %v0_13608.pre = load i32, i32* @lr, align 4
  %v0_1360c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13608

dec_label_pc_13638:                               ; preds = %dec_label_pc_13608
  %v2_13638 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13638, i32* @r4, align 4
  %v5_13638 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13638, i32* @r5, align 4
  %v2_1363c = add i32 %v0_13630, -4
  store i32 %v2_1363c, i32* %r2.global-to-local, align 4
  %v4_1363c = add i32 %v0_13630, 2147483632
  %v5_1363c = and i32 %v2_1363c, %v4_1363c
  %v6_1363c = icmp slt i32 %v5_1363c, 0
  store i1 %v6_1363c, i1* %cpsr_v.global-to-local, align 1
  %v7_1363c = icmp slt i32 %v2_1363c, 0
  store i1 %v7_1363c, i1* %cpsr_n.global-to-local, align 1
  %v8_1363c = icmp eq i32 %v2_1363c, 0
  store i1 %v8_1363c, i1* %cpsr_z.global-to-local, align 1
  %v5_13640 = icmp slt i32 %v2_13630, -12
  br i1 %v5_13640, label %dec_label_pc_1365c, label %dec_label_pc_13644

dec_label_pc_13644:                               ; preds = %dec_label_pc_13638, %dec_label_pc_135f8, %dec_label_pc_13644
  %v1_13650 = phi i32 [ %v4_13650, %dec_label_pc_13644 ], [ %v12_1362c, %dec_label_pc_13638 ], [ %v0_1362c74, %dec_label_pc_135f8 ]
  %v0_13644 = load i32, i32* @lr, align 4
  %v3_13644 = udiv i32 %v0_13644, 256
  store i32 %v3_13644, i32* %ip.global-to-local, align 4
  %v0_13648 = load i32, i32* %r1.global-to-local, align 4
  %v1_13648 = inttoptr i32 %v0_13648 to i32*
  %v2_13648 = load i32, i32* %v1_13648, align 4
  store i32 %v2_13648, i32* @lr, align 4
  %v4_13648 = add i32 %v0_13648, 4
  store i32 %v4_13648, i32* %r1.global-to-local, align 4
  %v4_1364c = mul i32 %v2_13648, 16777216
  %v5_1364c = or i32 %v4_1364c, %v3_13644
  store i32 %v5_1364c, i32* @ip, align 4
  %v2_13650 = inttoptr i32 %v1_13650 to i32*
  store i32 %v5_1364c, i32* %v2_13650, align 4
  %v3_13650 = load i32, i32* @r0, align 4
  %v4_13650 = add i32 %v3_13650, 4
  store i32 %v4_13650, i32* @r0, align 4
  %v0_13654 = load i32, i32* %r2.global-to-local, align 4
  %v2_13654 = add i32 %v0_13654, -4
  store i32 %v2_13654, i32* %r2.global-to-local, align 4
  %v6_13658 = icmp slt i32 %v0_13654, 4
  br i1 %v6_13658, label %dec_label_pc_1365c.loopexit, label %dec_label_pc_13644

dec_label_pc_1365c.loopexit:                      ; preds = %dec_label_pc_13644
  %v4_13654 = sub i32 3, %v0_13654
  %v5_13654 = and i32 %v4_13654, %v0_13654
  %v6_13654 = icmp slt i32 %v5_13654, 0
  %v7_13654 = icmp slt i32 %v2_13654, 0
  store i1 %v6_13654, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13654, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1365c

dec_label_pc_1365c:                               ; preds = %dec_label_pc_1365c.loopexit, %dec_label_pc_13638
  %v2_1359c111 = phi i32 [ %v4_13650, %dec_label_pc_1365c.loopexit ], [ %v12_1362c, %dec_label_pc_13638 ]
  %v0_1358c107 = phi i32 [ %v2_13654, %dec_label_pc_1365c.loopexit ], [ %v2_1363c, %dec_label_pc_13638 ]
  %v0_1365c = load i32, i32* %r1.global-to-local, align 4
  %v1_1365c = add i32 %v0_1365c, -3
  store i32 %v1_1365c, i32* @r1, align 4
  br label %bb131

dec_label_pc_13664:                               ; preds = %dec_label_pc_135e4
  br i1 %v5_136d4, label %dec_label_pc_136b0, label %dec_label_pc_1366c

dec_label_pc_1366c:                               ; preds = %dec_label_pc_13664
  store i32 %v2_136d0, i32* %r2.global-to-local, align 4
  %v3_13670 = load i32, i32* @r4, align 4
  store i32 %v3_13670, i32* %stack_var_-16, align 4
  %v6_13670 = load i32, i32* @r5, align 4
  store i32 %v6_13670, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13674

dec_label_pc_13674:                               ; preds = %dec_label_pc_13674.dec_label_pc_13674_crit_edge, %dec_label_pc_1366c
  %v0_13698 = phi i32 [ %v12_13698, %dec_label_pc_13674.dec_label_pc_13674_crit_edge ], [ %v0_1362c74, %dec_label_pc_1366c ]
  %v0_13678 = phi i32 [ %v0_13678.pre, %dec_label_pc_13674.dec_label_pc_13674_crit_edge ], [ %v4_135e8, %dec_label_pc_1366c ]
  %v0_13674 = phi i32 [ %v0_13674.pre, %dec_label_pc_13674.dec_label_pc_13674_crit_edge ], [ %v2_135e8, %dec_label_pc_1366c ]
  %v3_13674 = udiv i32 %v0_13674, 65536
  store i32 %v3_13674, i32* %r3.global-to-local, align 4
  %v1_13678 = inttoptr i32 %v0_13678 to i32*
  %v2_13678 = load i32, i32* %v1_13678, align 4
  store i32 %v2_13678, i32* %r4.global-to-local, align 4
  %v3_13678 = add i32 %v0_13678, 4
  %v4_13678 = inttoptr i32 %v3_13678 to i32*
  %v5_13678 = load i32, i32* %v4_13678, align 4
  store i32 %v5_13678, i32* %r5.global-to-local, align 4
  %v6_13678 = add i32 %v0_13678, 8
  %v7_13678 = inttoptr i32 %v6_13678 to i32*
  %v8_13678 = load i32, i32* %v7_13678, align 4
  store i32 %v8_13678, i32* %ip.global-to-local, align 4
  %v9_13678 = add i32 %v0_13678, 12
  %v10_13678 = inttoptr i32 %v9_13678 to i32*
  %v11_13678 = load i32, i32* %v10_13678, align 4
  store i32 %v11_13678, i32* @lr, align 4
  %v12_13678 = add i32 %v0_13678, 16
  store i32 %v12_13678, i32* %r1.global-to-local, align 4
  %v4_1367c = mul i32 %v2_13678, 65536
  %v5_1367c = or i32 %v4_1367c, %v3_13674
  store i32 %v5_1367c, i32* %r3.global-to-local, align 4
  %v3_13680 = udiv i32 %v2_13678, 65536
  %v4_13684 = mul i32 %v5_13678, 65536
  %v5_13684 = or i32 %v4_13684, %v3_13680
  store i32 %v5_13684, i32* %r4.global-to-local, align 4
  %v3_13688 = udiv i32 %v5_13678, 65536
  %v4_1368c = mul i32 %v8_13678, 65536
  %v5_1368c = or i32 %v4_1368c, %v3_13688
  store i32 %v5_1368c, i32* %r5.global-to-local, align 4
  %v3_13690 = udiv i32 %v8_13678, 65536
  %v4_13694 = mul i32 %v11_13678, 65536
  %v5_13694 = or i32 %v4_13694, %v3_13690
  store i32 %v5_13694, i32* @ip, align 4
  %v1_13698 = inttoptr i32 %v0_13698 to i32*
  store i32 %v5_1367c, i32* %v1_13698, align 4
  %v3_13698 = add i32 %v0_13698, 4
  %v4_13698 = inttoptr i32 %v3_13698 to i32*
  %v5_13698 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13698, i32* %v4_13698, align 4
  %v6_13698 = add i32 %v0_13698, 8
  %v7_13698 = inttoptr i32 %v6_13698 to i32*
  %v8_13698 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_13698, i32* %v7_13698, align 4
  %v9_13698 = add i32 %v0_13698, 12
  %v10_13698 = inttoptr i32 %v9_13698 to i32*
  %v11_13698 = load i32, i32* @ip, align 4
  store i32 %v11_13698, i32* %v10_13698, align 4
  %v12_13698 = add i32 %v0_13698, 16
  store i32 %v12_13698, i32* @r0, align 4
  %v0_1369c = load i32, i32* %r2.global-to-local, align 4
  %v2_1369c = add i32 %v0_1369c, -16
  store i32 %v2_1369c, i32* %r2.global-to-local, align 4
  %v6_136a0 = icmp slt i32 %v0_1369c, 16
  br i1 %v6_136a0, label %dec_label_pc_136a4, label %dec_label_pc_13674.dec_label_pc_13674_crit_edge

dec_label_pc_13674.dec_label_pc_13674_crit_edge:  ; preds = %dec_label_pc_13674
  %v0_13674.pre = load i32, i32* @lr, align 4
  %v0_13678.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13674

dec_label_pc_136a4:                               ; preds = %dec_label_pc_13674
  %v2_136a4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_136a4, i32* @r4, align 4
  %v5_136a4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_136a4, i32* @r5, align 4
  %v2_136a8 = add i32 %v0_1369c, -4
  store i32 %v2_136a8, i32* %r2.global-to-local, align 4
  %v4_136a8 = add i32 %v0_1369c, 2147483632
  %v5_136a8 = and i32 %v2_136a8, %v4_136a8
  %v6_136a8 = icmp slt i32 %v5_136a8, 0
  store i1 %v6_136a8, i1* %cpsr_v.global-to-local, align 1
  %v7_136a8 = icmp slt i32 %v2_136a8, 0
  store i1 %v7_136a8, i1* %cpsr_n.global-to-local, align 1
  %v8_136a8 = icmp eq i32 %v2_136a8, 0
  store i1 %v8_136a8, i1* %cpsr_z.global-to-local, align 1
  %v5_136ac = icmp slt i32 %v2_1369c, -12
  br i1 %v5_136ac, label %dec_label_pc_136c8, label %dec_label_pc_136b0

dec_label_pc_136b0:                               ; preds = %dec_label_pc_136a4, %dec_label_pc_13664, %dec_label_pc_136b0
  %v1_136bc = phi i32 [ %v4_136bc, %dec_label_pc_136b0 ], [ %v12_13698, %dec_label_pc_136a4 ], [ %v0_1362c74, %dec_label_pc_13664 ]
  %v0_136b0 = load i32, i32* @lr, align 4
  %v3_136b0 = udiv i32 %v0_136b0, 65536
  store i32 %v3_136b0, i32* %ip.global-to-local, align 4
  %v0_136b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_136b4 = inttoptr i32 %v0_136b4 to i32*
  %v2_136b4 = load i32, i32* %v1_136b4, align 4
  store i32 %v2_136b4, i32* @lr, align 4
  %v4_136b4 = add i32 %v0_136b4, 4
  store i32 %v4_136b4, i32* %r1.global-to-local, align 4
  %v4_136b8 = mul i32 %v2_136b4, 65536
  %v5_136b8 = or i32 %v4_136b8, %v3_136b0
  store i32 %v5_136b8, i32* @ip, align 4
  %v2_136bc = inttoptr i32 %v1_136bc to i32*
  store i32 %v5_136b8, i32* %v2_136bc, align 4
  %v3_136bc = load i32, i32* @r0, align 4
  %v4_136bc = add i32 %v3_136bc, 4
  store i32 %v4_136bc, i32* @r0, align 4
  %v0_136c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_136c0 = add i32 %v0_136c0, -4
  store i32 %v2_136c0, i32* %r2.global-to-local, align 4
  %v6_136c4 = icmp slt i32 %v0_136c0, 4
  br i1 %v6_136c4, label %dec_label_pc_136c8.loopexit, label %dec_label_pc_136b0

dec_label_pc_136c8.loopexit:                      ; preds = %dec_label_pc_136b0
  %v4_136c0 = sub i32 3, %v0_136c0
  %v5_136c0 = and i32 %v4_136c0, %v0_136c0
  %v6_136c0 = icmp slt i32 %v5_136c0, 0
  %v7_136c0 = icmp slt i32 %v2_136c0, 0
  store i1 %v6_136c0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_136c0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_136c8

dec_label_pc_136c8:                               ; preds = %dec_label_pc_136c8.loopexit, %dec_label_pc_136a4
  %v2_1359c112 = phi i32 [ %v4_136bc, %dec_label_pc_136c8.loopexit ], [ %v12_13698, %dec_label_pc_136a4 ]
  %v0_1358c108 = phi i32 [ %v2_136c0, %dec_label_pc_136c8.loopexit ], [ %v2_136a8, %dec_label_pc_136a4 ]
  %v0_136c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_136c8 = add i32 %v0_136c8, -2
  store i32 %v1_136c8, i32* @r1, align 4
  br label %bb131

dec_label_pc_136d0:                               ; preds = %dec_label_pc_135e4
  br i1 %v5_136d4, label %dec_label_pc_1371c, label %dec_label_pc_136d8

dec_label_pc_136d8:                               ; preds = %dec_label_pc_136d0
  store i32 %v2_136d0, i32* %r2.global-to-local, align 4
  %v3_136dc = load i32, i32* @r4, align 4
  store i32 %v3_136dc, i32* %stack_var_-16, align 4
  %v6_136dc = load i32, i32* @r5, align 4
  store i32 %v6_136dc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_136e0

dec_label_pc_136e0:                               ; preds = %dec_label_pc_136e0.dec_label_pc_136e0_crit_edge, %dec_label_pc_136d8
  %v0_13704 = phi i32 [ %v12_13704, %dec_label_pc_136e0.dec_label_pc_136e0_crit_edge ], [ %v0_1362c74, %dec_label_pc_136d8 ]
  %v0_136e4 = phi i32 [ %v0_136e4.pre, %dec_label_pc_136e0.dec_label_pc_136e0_crit_edge ], [ %v4_135e8, %dec_label_pc_136d8 ]
  %v0_136e0 = phi i32 [ %v0_136e0.pre, %dec_label_pc_136e0.dec_label_pc_136e0_crit_edge ], [ %v2_135e8, %dec_label_pc_136d8 ]
  %v3_136e0 = udiv i32 %v0_136e0, 16777216
  store i32 %v3_136e0, i32* %r3.global-to-local, align 4
  %v1_136e4 = inttoptr i32 %v0_136e4 to i32*
  %v2_136e4 = load i32, i32* %v1_136e4, align 4
  store i32 %v2_136e4, i32* %r4.global-to-local, align 4
  %v3_136e4 = add i32 %v0_136e4, 4
  %v4_136e4 = inttoptr i32 %v3_136e4 to i32*
  %v5_136e4 = load i32, i32* %v4_136e4, align 4
  store i32 %v5_136e4, i32* %r5.global-to-local, align 4
  %v6_136e4 = add i32 %v0_136e4, 8
  %v7_136e4 = inttoptr i32 %v6_136e4 to i32*
  %v8_136e4 = load i32, i32* %v7_136e4, align 4
  store i32 %v8_136e4, i32* %ip.global-to-local, align 4
  %v9_136e4 = add i32 %v0_136e4, 12
  %v10_136e4 = inttoptr i32 %v9_136e4 to i32*
  %v11_136e4 = load i32, i32* %v10_136e4, align 4
  store i32 %v11_136e4, i32* @lr, align 4
  %v12_136e4 = add i32 %v0_136e4, 16
  store i32 %v12_136e4, i32* %r1.global-to-local, align 4
  %v4_136e8 = mul i32 %v2_136e4, 256
  %v5_136e8 = or i32 %v4_136e8, %v3_136e0
  store i32 %v5_136e8, i32* %r3.global-to-local, align 4
  %v3_136ec = udiv i32 %v2_136e4, 16777216
  %v4_136f0 = mul i32 %v5_136e4, 256
  %v5_136f0 = or i32 %v4_136f0, %v3_136ec
  store i32 %v5_136f0, i32* %r4.global-to-local, align 4
  %v3_136f4 = udiv i32 %v5_136e4, 16777216
  %v4_136f8 = mul i32 %v8_136e4, 256
  %v5_136f8 = or i32 %v4_136f8, %v3_136f4
  store i32 %v5_136f8, i32* %r5.global-to-local, align 4
  %v3_136fc = udiv i32 %v8_136e4, 16777216
  %v4_13700 = mul i32 %v11_136e4, 256
  %v5_13700 = or i32 %v4_13700, %v3_136fc
  store i32 %v5_13700, i32* @ip, align 4
  %v1_13704 = inttoptr i32 %v0_13704 to i32*
  store i32 %v5_136e8, i32* %v1_13704, align 4
  %v3_13704 = add i32 %v0_13704, 4
  %v4_13704 = inttoptr i32 %v3_13704 to i32*
  %v5_13704 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13704, i32* %v4_13704, align 4
  %v6_13704 = add i32 %v0_13704, 8
  %v7_13704 = inttoptr i32 %v6_13704 to i32*
  %v8_13704 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_13704, i32* %v7_13704, align 4
  %v9_13704 = add i32 %v0_13704, 12
  %v10_13704 = inttoptr i32 %v9_13704 to i32*
  %v11_13704 = load i32, i32* @ip, align 4
  store i32 %v11_13704, i32* %v10_13704, align 4
  %v12_13704 = add i32 %v0_13704, 16
  store i32 %v12_13704, i32* @r0, align 4
  %v0_13708 = load i32, i32* %r2.global-to-local, align 4
  %v2_13708 = add i32 %v0_13708, -16
  store i32 %v2_13708, i32* %r2.global-to-local, align 4
  %v6_1370c = icmp slt i32 %v0_13708, 16
  br i1 %v6_1370c, label %dec_label_pc_13710, label %dec_label_pc_136e0.dec_label_pc_136e0_crit_edge

dec_label_pc_136e0.dec_label_pc_136e0_crit_edge:  ; preds = %dec_label_pc_136e0
  %v0_136e0.pre = load i32, i32* @lr, align 4
  %v0_136e4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_136e0

dec_label_pc_13710:                               ; preds = %dec_label_pc_136e0
  %v2_13710 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13710, i32* @r4, align 4
  %v5_13710 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13710, i32* @r5, align 4
  %v2_13714 = add i32 %v0_13708, -4
  store i32 %v2_13714, i32* %r2.global-to-local, align 4
  %v4_13714 = add i32 %v0_13708, 2147483632
  %v5_13714 = and i32 %v2_13714, %v4_13714
  %v6_13714 = icmp slt i32 %v5_13714, 0
  store i1 %v6_13714, i1* %cpsr_v.global-to-local, align 1
  %v7_13714 = icmp slt i32 %v2_13714, 0
  store i1 %v7_13714, i1* %cpsr_n.global-to-local, align 1
  %v8_13714 = icmp eq i32 %v2_13714, 0
  store i1 %v8_13714, i1* %cpsr_z.global-to-local, align 1
  %v5_13718 = icmp slt i32 %v2_13708, -12
  br i1 %v5_13718, label %dec_label_pc_13734, label %dec_label_pc_1371c

dec_label_pc_1371c:                               ; preds = %dec_label_pc_13710, %dec_label_pc_136d0, %dec_label_pc_1371c
  %v1_13728 = phi i32 [ %v4_13728, %dec_label_pc_1371c ], [ %v12_13704, %dec_label_pc_13710 ], [ %v0_1362c74, %dec_label_pc_136d0 ]
  %v0_1371c = load i32, i32* @lr, align 4
  %v3_1371c = udiv i32 %v0_1371c, 16777216
  store i32 %v3_1371c, i32* %ip.global-to-local, align 4
  %v0_13720 = load i32, i32* %r1.global-to-local, align 4
  %v1_13720 = inttoptr i32 %v0_13720 to i32*
  %v2_13720 = load i32, i32* %v1_13720, align 4
  store i32 %v2_13720, i32* @lr, align 4
  %v4_13720 = add i32 %v0_13720, 4
  store i32 %v4_13720, i32* %r1.global-to-local, align 4
  %v4_13724 = mul i32 %v2_13720, 256
  %v5_13724 = or i32 %v4_13724, %v3_1371c
  store i32 %v5_13724, i32* @ip, align 4
  %v2_13728 = inttoptr i32 %v1_13728 to i32*
  store i32 %v5_13724, i32* %v2_13728, align 4
  %v3_13728 = load i32, i32* @r0, align 4
  %v4_13728 = add i32 %v3_13728, 4
  store i32 %v4_13728, i32* @r0, align 4
  %v0_1372c = load i32, i32* %r2.global-to-local, align 4
  %v2_1372c = add i32 %v0_1372c, -4
  store i32 %v2_1372c, i32* %r2.global-to-local, align 4
  %v6_13730 = icmp slt i32 %v0_1372c, 4
  br i1 %v6_13730, label %dec_label_pc_13734.loopexit, label %dec_label_pc_1371c

dec_label_pc_13734.loopexit:                      ; preds = %dec_label_pc_1371c
  %v4_1372c = sub i32 3, %v0_1372c
  %v5_1372c = and i32 %v4_1372c, %v0_1372c
  %v6_1372c = icmp slt i32 %v5_1372c, 0
  %v7_1372c = icmp slt i32 %v2_1372c, 0
  store i1 %v6_1372c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1372c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13734

dec_label_pc_13734:                               ; preds = %dec_label_pc_13734.loopexit, %dec_label_pc_13710
  %v2_1359c113 = phi i32 [ %v4_13728, %dec_label_pc_13734.loopexit ], [ %v12_13704, %dec_label_pc_13710 ]
  %v0_1358c109 = phi i32 [ %v2_1372c, %dec_label_pc_13734.loopexit ], [ %v2_13714, %dec_label_pc_13710 ]
  %v0_13734 = load i32, i32* %r1.global-to-local, align 4
  %v1_13734 = add i32 %v0_13734, -1
  store i32 %v1_13734, i32* @r1, align 4
  br label %bb131

dec_label_pc_1373c:                               ; preds = %dec_label_pc_134f0
  %v1_1373c = load i32, i32* @r2, align 4
  %v2_1373c = add i32 %v1_1373c, %v0_134f0
  store i32 %v2_1373c, i32* %r1.global-to-local, align 4
  %v2_13740 = add i32 %v1_1373c, %v1_134f0
  store i32 %v2_13740, i32* %r0.global-to-local, align 4
  %v2_13744 = add i32 %v1_1373c, -4
  store i32 %v2_13744, i32* %r2.global-to-local, align 4
  %v4_13744 = sub i32 3, %v1_1373c
  %v5_13744 = and i32 %v4_13744, %v1_1373c
  %v6_13744 = icmp slt i32 %v5_13744, 0
  store i1 %v6_13744, i1* %cpsr_v.global-to-local, align 1
  %v7_13744 = icmp slt i32 %v2_13744, 0
  store i1 %v7_13744, i1* %cpsr_n.global-to-local, align 1
  %v8_13744 = icmp eq i32 %v1_1373c, 4
  store i1 %v8_13744, i1* %cpsr_z.global-to-local, align 1
  %v5_13748 = icmp slt i32 %v1_1373c, 4
  br i1 %v5_13748, label %bb141, label %dec_label_pc_1374c

dec_label_pc_1374c:                               ; preds = %dec_label_pc_1373c
  %v1_1374c = urem i32 %v2_13740, 4
  store i32 %v1_1374c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1374c = icmp eq i32 %v1_1374c, 0
  store i1 %v2_1374c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1374c, label %dec_label_pc_13754, label %dec_label_pc_137f4

dec_label_pc_13754:                               ; preds = %dec_label_pc_1374c
  %v1_13754 = urem i32 %v2_1373c, 4
  store i32 %v1_13754, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13754 = icmp eq i32 %v1_13754, 0
  store i1 %v2_13754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13754, label %dec_label_pc_1375c, label %dec_label_pc_13820

dec_label_pc_1375c:                               ; preds = %dec_label_pc_13754, %dec_label_pc_13818
  %v0_1377448 = phi i32 [ %v2_13740, %dec_label_pc_13754 ], [ %v0_1386831, %dec_label_pc_13818 ]
  %v0_1377047 = phi i32 [ %v2_1373c, %dec_label_pc_13754 ], [ %v0_13818, %dec_label_pc_13818 ]
  %v0_1375c = phi i32 [ %v2_13744, %dec_label_pc_13754 ], [ %v2_13810, %dec_label_pc_13818 ]
  %v2_1375c = add i32 %v0_1375c, -8
  store i32 %v2_1375c, i32* %r2.global-to-local, align 4
  %v4_1375c = sub i32 7, %v0_1375c
  %v5_1375c = and i32 %v4_1375c, %v0_1375c
  %v6_1375c = icmp slt i32 %v5_1375c, 0
  store i1 %v6_1375c, i1* %cpsr_v.global-to-local, align 1
  %v7_1375c = icmp slt i32 %v2_1375c, 0
  store i1 %v7_1375c, i1* %cpsr_n.global-to-local, align 1
  %v8_1375c = icmp eq i32 %v0_1375c, 8
  store i1 %v8_1375c, i1* %cpsr_z.global-to-local, align 1
  %v5_13760 = icmp slt i32 %v0_1375c, 8
  br i1 %v5_13760, label %dec_label_pc_137ac, label %dec_label_pc_13764

dec_label_pc_13764:                               ; preds = %dec_label_pc_1375c
  %v3_13764 = load i32, i32* @r4, align 4
  store i32 %v3_13764, i32* %stack_var_-8, align 4
  %v6_13764 = load i32, i32* @lr, align 4
  %v2_13768 = add i32 %v0_1375c, -28
  store i32 %v2_13768, i32* %r2.global-to-local, align 4
  %v4_13768 = sub i32 27, %v0_1375c
  %v5_13768 = and i32 %v4_13768, %v2_1375c
  %v6_13768 = icmp slt i32 %v5_13768, 0
  store i1 %v6_13768, i1* %cpsr_v.global-to-local, align 1
  %v7_13768 = icmp slt i32 %v2_13768, 0
  store i1 %v7_13768, i1* %cpsr_n.global-to-local, align 1
  %v8_13768 = icmp eq i32 %v2_1375c, 20
  store i1 %v8_13768, i1* %cpsr_z.global-to-local, align 1
  %v5_1376c = icmp slt i32 %v2_1375c, 20
  br i1 %v5_1376c, label %dec_label_pc_13788, label %dec_label_pc_13770

dec_label_pc_13770:                               ; preds = %dec_label_pc_13764, %dec_label_pc_13770.dec_label_pc_13770_crit_edge
  %v0_13774 = phi i32 [ %v1_1377c, %dec_label_pc_13770.dec_label_pc_13770_crit_edge ], [ %v0_1377448, %dec_label_pc_13764 ]
  %v0_13770 = phi i32 [ %v0_13770.pre, %dec_label_pc_13770.dec_label_pc_13770_crit_edge ], [ %v0_1377047, %dec_label_pc_13764 ]
  %v1_13770 = add i32 %v0_13770, -4
  %v2_13770 = inttoptr i32 %v1_13770 to i32*
  %v3_13770 = load i32, i32* %v2_13770, align 4
  store i32 %v3_13770, i32* %r3.global-to-local, align 4
  %v4_13770 = add i32 %v0_13770, -8
  %v5_13770 = inttoptr i32 %v4_13770 to i32*
  %v6_13770 = load i32, i32* %v5_13770, align 4
  store i32 %v6_13770, i32* %r4.global-to-local, align 4
  %v7_13770 = add i32 %v0_13770, -12
  %v8_13770 = inttoptr i32 %v7_13770 to i32*
  %v9_13770 = load i32, i32* %v8_13770, align 4
  store i32 %v9_13770, i32* %ip.global-to-local, align 4
  %v10_13770 = add i32 %v0_13770, -16
  %v11_13770 = inttoptr i32 %v10_13770 to i32*
  %v12_13770 = load i32, i32* %v11_13770, align 4
  store i32 %v12_13770, i32* %lr.global-to-local, align 4
  store i32 %v10_13770, i32* %r1.global-to-local, align 4
  %v1_13774 = add i32 %v0_13774, -16
  %v2_13774 = inttoptr i32 %v1_13774 to i32*
  store i32 %v3_13770, i32* %v2_13774, align 4
  %v4_13774 = add i32 %v0_13774, -12
  %v5_13774 = inttoptr i32 %v4_13774 to i32*
  %v6_13774 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_13774, i32* %v5_13774, align 4
  %v7_13774 = add i32 %v0_13774, -8
  %v8_13774 = inttoptr i32 %v7_13774 to i32*
  %v9_13774 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_13774, i32* %v8_13774, align 4
  %v10_13774 = add i32 %v0_13774, -4
  %v11_13774 = inttoptr i32 %v10_13774 to i32*
  %v12_13774 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13774, i32* %v11_13774, align 4
  store i32 %v1_13774, i32* %r0.global-to-local, align 4
  %v0_13778 = load i32, i32* %r1.global-to-local, align 4
  %v1_13778 = add i32 %v0_13778, -4
  %v2_13778 = inttoptr i32 %v1_13778 to i32*
  %v3_13778 = load i32, i32* %v2_13778, align 4
  store i32 %v3_13778, i32* %r3.global-to-local, align 4
  %v4_13778 = add i32 %v0_13778, -8
  %v5_13778 = inttoptr i32 %v4_13778 to i32*
  %v6_13778 = load i32, i32* %v5_13778, align 4
  store i32 %v6_13778, i32* %r4.global-to-local, align 4
  %v7_13778 = add i32 %v0_13778, -12
  %v8_13778 = inttoptr i32 %v7_13778 to i32*
  %v9_13778 = load i32, i32* %v8_13778, align 4
  store i32 %v9_13778, i32* @ip, align 4
  %v10_13778 = add i32 %v0_13778, -16
  %v11_13778 = inttoptr i32 %v10_13778 to i32*
  %v12_13778 = load i32, i32* %v11_13778, align 4
  store i32 %v12_13778, i32* %lr.global-to-local, align 4
  store i32 %v10_13778, i32* %r1.global-to-local, align 4
  %v1_1377c = add i32 %v0_13774, -32
  %v2_1377c = inttoptr i32 %v1_1377c to i32*
  store i32 %v3_13778, i32* %v2_1377c, align 4
  %v4_1377c = add i32 %v0_13774, -28
  %v5_1377c = inttoptr i32 %v4_1377c to i32*
  %v6_1377c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1377c, i32* %v5_1377c, align 4
  %v7_1377c = add i32 %v0_13774, -24
  %v8_1377c = inttoptr i32 %v7_1377c to i32*
  %v9_1377c = load i32, i32* @ip, align 4
  store i32 %v9_1377c, i32* %v8_1377c, align 4
  %v10_1377c = add i32 %v0_13774, -20
  %v11_1377c = inttoptr i32 %v10_1377c to i32*
  %v12_1377c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1377c, i32* %v11_1377c, align 4
  store i32 %v1_1377c, i32* %r0.global-to-local, align 4
  %v0_13780 = load i32, i32* %r2.global-to-local, align 4
  %v2_13780 = add i32 %v0_13780, -32
  store i32 %v2_13780, i32* %r2.global-to-local, align 4
  %v6_13784 = icmp slt i32 %v0_13780, 32
  br i1 %v6_13784, label %dec_label_pc_13788.loopexit, label %dec_label_pc_13770.dec_label_pc_13770_crit_edge

dec_label_pc_13770.dec_label_pc_13770_crit_edge:  ; preds = %dec_label_pc_13770
  %v0_13770.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13770

dec_label_pc_13788.loopexit:                      ; preds = %dec_label_pc_13770
  %v4_13780 = sub i32 31, %v0_13780
  %v5_13780 = and i32 %v4_13780, %v0_13780
  %v6_13780 = icmp slt i32 %v5_13780, 0
  %v7_13780 = icmp slt i32 %v2_13780, 0
  store i1 %v6_13780, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13780, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13788

dec_label_pc_13788:                               ; preds = %dec_label_pc_13788.loopexit, %dec_label_pc_13764
  %v6_13790 = phi i32 [ %v1_1377c, %dec_label_pc_13788.loopexit ], [ %v0_1377448, %dec_label_pc_13764 ]
  %v0_13798.pr = phi i32 [ %v2_13780, %dec_label_pc_13788.loopexit ], [ %v2_13768, %dec_label_pc_13764 ]
  %v4_13788 = add i32 %v0_13798.pr, 16
  %v6_13788 = sub i32 0, %v0_13798.pr
  %v7_13788 = and i32 %v4_13788, %v6_13788
  %v8_13788 = icmp slt i32 %v7_13788, 0
  store i1 %v8_13788, i1* %cpsr_v.global-to-local, align 1
  %v9_13788 = icmp slt i32 %v4_13788, 0
  store i1 %v9_13788, i1* %cpsr_n.global-to-local, align 1
  %v10_13788 = icmp eq i32 %v4_13788, 0
  store i1 %v10_13788, i1* %cpsr_z.global-to-local, align 1
  %v5_1378c = icmp slt i32 %v0_13798.pr, -16
  br i1 %v5_1378c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_13788
  %v6_1378c = load i32, i32* %r1.global-to-local, align 4
  %v7_1378c = add i32 %v6_1378c, -4
  %v8_1378c = inttoptr i32 %v7_1378c to i32*
  %v9_1378c = load i32, i32* %v8_1378c, align 4
  store i32 %v9_1378c, i32* %r3.global-to-local, align 4
  %v10_1378c = add i32 %v6_1378c, -8
  %v11_1378c = inttoptr i32 %v10_1378c to i32*
  %v12_1378c = load i32, i32* %v11_1378c, align 4
  store i32 %v12_1378c, i32* %r4.global-to-local, align 4
  %v13_1378c = add i32 %v6_1378c, -12
  %v14_1378c = inttoptr i32 %v13_1378c to i32*
  %v15_1378c = load i32, i32* %v14_1378c, align 4
  store i32 %v15_1378c, i32* @ip, align 4
  %v16_1378c = add i32 %v6_1378c, -16
  %v17_1378c = inttoptr i32 %v16_1378c to i32*
  %v18_1378c = load i32, i32* %v17_1378c, align 4
  store i32 %v18_1378c, i32* %lr.global-to-local, align 4
  store i32 %v16_1378c, i32* %r1.global-to-local, align 4
  %v7_13790 = add i32 %v6_13790, -16
  %v8_13790 = inttoptr i32 %v7_13790 to i32*
  store i32 %v9_1378c, i32* %v8_13790, align 4
  %v10_13790 = add i32 %v6_13790, -12
  %v11_13790 = inttoptr i32 %v10_13790 to i32*
  %v12_13790 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_13790, i32* %v11_13790, align 4
  %v13_13790 = add i32 %v6_13790, -8
  %v14_13790 = inttoptr i32 %v13_13790 to i32*
  %v15_13790 = load i32, i32* @ip, align 4
  store i32 %v15_13790, i32* %v14_13790, align 4
  %v16_13790 = add i32 %v6_13790, -4
  %v17_13790 = inttoptr i32 %v16_13790 to i32*
  %v18_13790 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_13790, i32* %v17_13790, align 4
  store i32 %v7_13790, i32* %r0.global-to-local, align 4
  %v6_13794 = load i32, i32* %r2.global-to-local, align 4
  %v7_13794 = add i32 %v6_13794, -16
  store i32 %v7_13794, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_13788, %bb138
  %v6_137a0 = phi i32 [ %v7_13790, %bb138 ], [ %v6_13790, %dec_label_pc_13788 ]
  %v0_13798 = phi i32 [ %v7_13794, %bb138 ], [ %v0_13798.pr, %dec_label_pc_13788 ]
  %v4_13798 = add i32 %v0_13798, 20
  store i32 %v4_13798, i32* %r2.global-to-local, align 4
  %v6_13798 = sub i32 0, %v0_13798
  %v7_13798 = and i32 %v4_13798, %v6_13798
  %v8_13798 = icmp slt i32 %v7_13798, 0
  store i1 %v8_13798, i1* %cpsr_v.global-to-local, align 1
  %v9_13798 = icmp slt i32 %v4_13798, 0
  store i1 %v9_13798, i1* %cpsr_n.global-to-local, align 1
  %v10_13798 = icmp eq i32 %v4_13798, 0
  store i1 %v10_13798, i1* %cpsr_z.global-to-local, align 1
  %v5_1379c = icmp slt i32 %v0_13798, -20
  br i1 %v5_1379c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_1379c = load i32, i32* %r1.global-to-local, align 4
  %v7_1379c = add i32 %v6_1379c, -4
  %v8_1379c = inttoptr i32 %v7_1379c to i32*
  %v9_1379c = load i32, i32* %v8_1379c, align 4
  store i32 %v9_1379c, i32* %r3.global-to-local, align 4
  %v10_1379c = add i32 %v6_1379c, -8
  %v11_1379c = inttoptr i32 %v10_1379c to i32*
  %v12_1379c = load i32, i32* %v11_1379c, align 4
  store i32 %v12_1379c, i32* @ip, align 4
  %v13_1379c = add i32 %v6_1379c, -12
  %v14_1379c = inttoptr i32 %v13_1379c to i32*
  %v15_1379c = load i32, i32* %v14_1379c, align 4
  store i32 %v15_1379c, i32* %lr.global-to-local, align 4
  store i32 %v13_1379c, i32* %r1.global-to-local, align 4
  %v7_137a0 = add i32 %v6_137a0, -12
  %v8_137a0 = inttoptr i32 %v7_137a0 to i32*
  store i32 %v9_1379c, i32* %v8_137a0, align 4
  %v10_137a0 = add i32 %v6_137a0, -8
  %v11_137a0 = inttoptr i32 %v10_137a0 to i32*
  %v12_137a0 = load i32, i32* @ip, align 4
  store i32 %v12_137a0, i32* %v11_137a0, align 4
  %v13_137a0 = add i32 %v6_137a0, -4
  %v14_137a0 = inttoptr i32 %v13_137a0 to i32*
  %v15_137a0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_137a0, i32* %v14_137a0, align 4
  store i32 %v7_137a0, i32* %r0.global-to-local, align 4
  %v6_137a4 = load i32, i32* %r2.global-to-local, align 4
  %v7_137a4 = add i32 %v6_137a4, -12
  store i32 %v7_137a4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_137c456 = phi i32 [ %v6_137a0, %.thread13 ], [ %v7_137a0, %bb139 ]
  %v0_137ac54 = phi i32 [ %v4_13798, %.thread13 ], [ %v7_137a4, %bb139 ]
  %v2_137a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137a8, i32* @r4, align 4
  store i32 %v6_13764, i32* @lr, align 4
  br label %dec_label_pc_137ac

dec_label_pc_137ac:                               ; preds = %dec_label_pc_1375c, %.thread15
  %v7_137bc = phi i32 [ %v0_1377448, %dec_label_pc_1375c ], [ %v6_137c456, %.thread15 ]
  %v0_137ac = phi i32 [ %v2_1375c, %dec_label_pc_1375c ], [ %v0_137ac54, %.thread15 ]
  %v2_137ac = add i32 %v0_137ac, 8
  store i32 %v2_137ac, i32* %r2.global-to-local, align 4
  %v4_137ac = sub i32 0, %v0_137ac
  %v5_137ac = and i32 %v2_137ac, %v4_137ac
  %v6_137ac = icmp slt i32 %v5_137ac, 0
  store i1 %v6_137ac, i1* %cpsr_v.global-to-local, align 1
  %v7_137ac = icmp slt i32 %v2_137ac, 0
  store i1 %v7_137ac, i1* %cpsr_n.global-to-local, align 1
  %v8_137ac = icmp eq i32 %v2_137ac, 0
  store i1 %v8_137ac, i1* %cpsr_z.global-to-local, align 1
  %v5_137b0 = icmp slt i32 %v0_137ac, -8
  br i1 %v5_137b0, label %bb141, label %dec_label_pc_137b4

dec_label_pc_137b4:                               ; preds = %dec_label_pc_137ac
  %v6_137b4 = add i32 %v0_137ac, 4
  store i32 %v6_137b4, i32* %r2.global-to-local, align 4
  %v8_137b4 = sub i32 -5, %v0_137ac
  %v9_137b4 = and i32 %v8_137b4, %v2_137ac
  %v10_137b4 = icmp slt i32 %v9_137b4, 0
  store i1 %v10_137b4, i1* %cpsr_v.global-to-local, align 1
  %v11_137b4 = icmp slt i32 %v6_137b4, 0
  store i1 %v11_137b4, i1* %cpsr_n.global-to-local, align 1
  %v12_137b4 = icmp eq i32 %v2_137ac, 4
  store i1 %v12_137b4, i1* %cpsr_z.global-to-local, align 1
  %v5_137b8 = icmp slt i32 %v2_137ac, 4
  %v6_137b8 = load i32, i32* %r1.global-to-local, align 4
  %v7_137b8 = add i32 %v6_137b8, -4
  %v8_137b8 = inttoptr i32 %v7_137b8 to i32*
  %v9_137b8 = load i32, i32* %v8_137b8, align 4
  store i32 %v9_137b8, i32* %r3.global-to-local, align 4
  br i1 %v5_137b8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_137b4
  store i32 %v7_137b8, i32* %r1.global-to-local, align 4
  %v8_137bc = add i32 %v7_137bc, -4
  %v9_137bc = inttoptr i32 %v8_137bc to i32*
  store i32 %v9_137b8, i32* %v9_137bc, align 4
  %v10_137bc = load i32, i32* %r0.global-to-local, align 4
  %v11_137bc = add i32 %v10_137bc, -4
  store i32 %v11_137bc, i32* %r0.global-to-local, align 4
  %v0_137cc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_137b4
  %v10_137c0 = add i32 %v6_137b8, -8
  %v11_137c0 = inttoptr i32 %v10_137c0 to i32*
  %v12_137c0 = load i32, i32* %v11_137c0, align 4
  store i32 %v12_137c0, i32* @ip, align 4
  store i32 %v10_137c0, i32* %r1.global-to-local, align 4
  %v7_137c4 = add i32 %v7_137bc, -8
  %v8_137c4 = inttoptr i32 %v7_137c4 to i32*
  store i32 %v9_137b8, i32* %v8_137c4, align 4
  %v10_137c4 = add i32 %v7_137bc, -4
  %v11_137c4 = inttoptr i32 %v10_137c4 to i32*
  %v12_137c4 = load i32, i32* @ip, align 4
  store i32 %v12_137c4, i32* %v11_137c4, align 4
  store i32 %v7_137c4, i32* %r0.global-to-local, align 4
  %v6_137c8 = load i32, i32* %r2.global-to-local, align 4
  %v7_137c8 = add i32 %v6_137c8, -4
  store i32 %v7_137c8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_137ac, %dec_label_pc_1373c, %dec_label_pc_13970, %dec_label_pc_13904, %dec_label_pc_13898, %bb140
  %v2_137d0 = phi i32 [ %v11_137bc, %.thread19 ], [ %v0_1386831, %.thread25 ], [ %v7_137bc, %dec_label_pc_137ac ], [ %v2_13740, %dec_label_pc_1373c ], [ %v2_137dc64, %dec_label_pc_13970 ], [ %v2_137dc63, %dec_label_pc_13904 ], [ %v2_137dc62, %dec_label_pc_13898 ], [ %v7_137c4, %bb140 ]
  %v0_137cc = phi i32 [ %v0_137cc.pre, %.thread19 ], [ %v2_13810, %.thread25 ], [ %v2_137ac, %dec_label_pc_137ac ], [ %v2_13744, %dec_label_pc_1373c ], [ %v0_137cc60, %dec_label_pc_13970 ], [ %v0_137cc59, %dec_label_pc_13904 ], [ %v0_137cc58, %dec_label_pc_13898 ], [ %v7_137c8, %bb140 ]
  %v1_137cc = add i32 %v0_137cc, 4
  store i32 %v1_137cc, i32* %r2.global-to-local, align 4
  %v3_137cc = sub i32 0, %v0_137cc
  %v4_137cc = and i32 %v1_137cc, %v3_137cc
  %v5_137cc = icmp slt i32 %v4_137cc, 0
  store i1 %v5_137cc, i1* %cpsr_v.global-to-local, align 1
  %v6_137cc = icmp slt i32 %v1_137cc, 0
  store i1 %v6_137cc, i1* %cpsr_n.global-to-local, align 1
  %v7_137cc = icmp eq i32 %v1_137cc, 0
  store i1 %v7_137cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_137cc, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_137d4 = add i32 %v0_137cc, 2
  %v3_137d4 = sub i32 -3, %v0_137cc
  %v4_137d4 = and i32 %v3_137d4, %v1_137cc
  %v5_137d4 = icmp slt i32 %v4_137d4, 0
  store i1 %v5_137d4, i1* %cpsr_v.global-to-local, align 1
  %v6_137d4 = icmp slt i32 %v1_137d4, 0
  store i1 %v6_137d4, i1* %cpsr_n.global-to-local, align 1
  %v7_137d4 = icmp eq i32 %v1_137cc, 2
  store i1 %v7_137d4, i1* %cpsr_z.global-to-local, align 1
  %v0_137d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_137d8 = add i32 %v0_137d8, -1
  %v2_137d8 = inttoptr i32 %v1_137d8 to i8*
  %v3_137d8 = load i8, i8* %v2_137d8, align 1
  %v4_137d8 = zext i8 %v3_137d8 to i32
  store i32 %v4_137d8, i32* %r3.global-to-local, align 4
  store i32 %v1_137d8, i32* %r1.global-to-local, align 4
  %v3_137dc = add i32 %v2_137d0, -1
  %v4_137dc = inttoptr i32 %v3_137dc to i8*
  store i8 %v3_137d8, i8* %v4_137dc, align 1
  %v5_137dc = load i32, i32* %r0.global-to-local, align 4
  %v6_137dc = add i32 %v5_137dc, -1
  store i32 %v6_137dc, i32* %r0.global-to-local, align 4
  %v0_137e0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_137e0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_137e0 = xor i1 %v0_137e0, %v1_137e0
  br i1 %v2_137e0, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_137e0 = load i32, i32* %r1.global-to-local, align 4
  %v4_137e0 = add i32 %v3_137e0, -1
  %v5_137e0 = inttoptr i32 %v4_137e0 to i8*
  %v6_137e0 = load i8, i8* %v5_137e0, align 1
  %v7_137e0 = zext i8 %v6_137e0 to i32
  store i32 %v7_137e0, i32* %r3.global-to-local, align 4
  store i32 %v4_137e0, i32* %r1.global-to-local, align 4
  %v6_137e4 = add i32 %v5_137dc, -2
  %v7_137e4 = inttoptr i32 %v6_137e4 to i8*
  store i8 %v6_137e0, i8* %v7_137e4, align 1
  %v8_137e4 = load i32, i32* %r0.global-to-local, align 4
  %v9_137e4 = add i32 %v8_137e4, -1
  store i32 %v9_137e4, i32* %r0.global-to-local, align 4
  %v1_137e8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_137e8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_137ec = phi i32 [ %v9_137e4, %bb143 ], [ %v6_137dc, %bb142 ]
  %v2_137ec = phi i1 [ %v2_137e8.pre, %bb143 ], [ %v1_137e0, %bb142 ]
  %v1_137ec = phi i1 [ %v1_137e8.pre, %bb143 ], [ %v0_137e0, %bb142 ]
  %v0_137e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_137e8 = xor i1 %v2_137ec, %v1_137ec
  %v4_137e8 = or i1 %v0_137e8, %v3_137e8
  br i1 %v4_137e8, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_137e8 = load i32, i32* %r1.global-to-local, align 4
  %v6_137e8 = add i32 %v5_137e8, -1
  %v7_137e8 = inttoptr i32 %v6_137e8 to i8*
  %v8_137e8 = load i8, i8* %v7_137e8, align 1
  %v9_137e8 = zext i8 %v8_137e8 to i32
  store i32 %v9_137e8, i32* %r3.global-to-local, align 4
  store i32 %v6_137e8, i32* %r1.global-to-local, align 4
  %v8_137ec = add i32 %v7_137ec, -1
  %v9_137ec = inttoptr i32 %v8_137ec to i8*
  store i8 %v8_137e8, i8* %v9_137ec, align 1
  %v10_137ec = load i32, i32* %r0.global-to-local, align 4
  %v11_137ec = add i32 %v10_137ec, -1
  store i32 %v11_137ec, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_137f4:                               ; preds = %dec_label_pc_1374c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_137f4 = icmp eq i32 %v1_1374c, 1
  store i1 %v8_137f4, i1* %cpsr_n.global-to-local, align 1
  %v9_137f4 = icmp eq i32 %v1_1374c, 2
  store i1 %v9_137f4, i1* %cpsr_z.global-to-local, align 1
  %v1_137f8 = add i32 %v2_1373c, -1
  %v2_137f8 = inttoptr i32 %v1_137f8 to i8*
  %v3_137f8 = load i8, i8* %v2_137f8, align 1
  %v4_137f8 = zext i8 %v3_137f8 to i32
  store i32 %v4_137f8, i32* %r3.global-to-local, align 4
  store i32 %v1_137f8, i32* %r1.global-to-local, align 4
  %v3_137fc = add i32 %v2_13740, -1
  %v4_137fc = inttoptr i32 %v3_137fc to i8*
  store i8 %v3_137f8, i8* %v4_137fc, align 1
  %v5_137fc = load i32, i32* %r0.global-to-local, align 4
  %v6_137fc = add i32 %v5_137fc, -1
  store i32 %v6_137fc, i32* %r0.global-to-local, align 4
  br i1 %v8_137f4, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_137f4
  %v6_13800 = load i32, i32* %r1.global-to-local, align 4
  %v7_13800 = add i32 %v6_13800, -1
  %v8_13800 = inttoptr i32 %v7_13800 to i8*
  %v9_13800 = load i8, i8* %v8_13800, align 1
  %v10_13800 = zext i8 %v9_13800 to i32
  store i32 %v10_13800, i32* %r3.global-to-local, align 4
  store i32 %v7_13800, i32* %r1.global-to-local, align 4
  %v9_13804 = add i32 %v5_137fc, -2
  %v10_13804 = inttoptr i32 %v9_13804 to i8*
  store i8 %v9_13800, i8* %v10_13804, align 1
  %v11_13804 = load i32, i32* %r0.global-to-local, align 4
  %v12_13804 = add i32 %v11_13804, -1
  store i32 %v12_13804, i32* %r0.global-to-local, align 4
  br i1 %v9_137f4, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_13808 = load i32, i32* %r1.global-to-local, align 4
  %v9_13808 = add i32 %v8_13808, -1
  %v10_13808 = inttoptr i32 %v9_13808 to i8*
  %v11_13808 = load i8, i8* %v10_13808, align 1
  %v12_13808 = zext i8 %v11_13808 to i32
  store i32 %v12_13808, i32* %r3.global-to-local, align 4
  store i32 %v9_13808, i32* %r1.global-to-local, align 4
  %v11_1380c = add i32 %v11_13804, -2
  %v12_1380c = inttoptr i32 %v11_1380c to i8*
  store i8 %v11_13808, i8* %v12_1380c, align 1
  %v13_1380c = load i32, i32* %r0.global-to-local, align 4
  %v14_1380c = add i32 %v13_1380c, -1
  store i32 %v14_1380c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_137f4, %bb146
  %v0_1386831 = phi i32 [ %v12_13804, %bb145 ], [ %v6_137fc, %dec_label_pc_137f4 ], [ %v14_1380c, %bb146 ]
  %v0_13810 = load i32, i32* %r2.global-to-local, align 4
  %v1_13810 = load i32, i32* @ip, align 4
  %v2_13810 = sub i32 %v0_13810, %v1_13810
  store i32 %v2_13810, i32* %r2.global-to-local, align 4
  %v4_13810 = xor i32 %v1_13810, %v0_13810
  %v5_13810 = xor i32 %v2_13810, %v0_13810
  %v6_13810 = and i32 %v5_13810, %v4_13810
  %v7_13810 = icmp slt i32 %v6_13810, 0
  store i1 %v7_13810, i1* %cpsr_v.global-to-local, align 1
  %v8_13810 = icmp slt i32 %v2_13810, 0
  store i1 %v8_13810, i1* %cpsr_n.global-to-local, align 1
  %v9_13810 = icmp eq i32 %v0_13810, %v1_13810
  store i1 %v9_13810, i1* %cpsr_z.global-to-local, align 1
  %v5_13814 = icmp slt i32 %v0_13810, %v1_13810
  br i1 %v5_13814, label %bb141, label %dec_label_pc_13818

dec_label_pc_13818:                               ; preds = %.thread25
  %v0_13818 = load i32, i32* %r1.global-to-local, align 4
  %v1_13818 = urem i32 %v0_13818, 4
  store i32 %v1_13818, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13818 = icmp eq i32 %v1_13818, 0
  store i1 %v2_13818, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13818, label %dec_label_pc_1375c, label %dec_label_pc_13820

dec_label_pc_13820:                               ; preds = %dec_label_pc_13754, %dec_label_pc_13818
  %v0_1386830 = phi i32 [ %v2_13740, %dec_label_pc_13754 ], [ %v0_1386831, %dec_label_pc_13818 ]
  %v0_13914 = phi i32 [ %v2_13744, %dec_label_pc_13754 ], [ %v2_13810, %dec_label_pc_13818 ]
  %v0_13820 = phi i32 [ %v2_1373c, %dec_label_pc_13754 ], [ %v0_13818, %dec_label_pc_13818 ]
  %v0_13828 = phi i32 [ %v1_13754, %dec_label_pc_13754 ], [ %v1_13818, %dec_label_pc_13818 ]
  %v1_13820 = and i32 %v0_13820, -4
  store i32 %v1_13820, i32* %r1.global-to-local, align 4
  %v1_13824 = inttoptr i32 %v1_13820 to i32*
  %v2_13824 = load i32, i32* %v1_13824, align 4
  store i32 %v2_13824, i32* %r3.global-to-local, align 4
  %v7_13828 = icmp ult i32 %v0_13828, 2
  %v2_1390c = add i32 %v0_13914, -12
  %v4_1390c = sub i32 11, %v0_13914
  %v5_1390c = and i32 %v4_1390c, %v0_13914
  %v6_1390c = icmp slt i32 %v5_1390c, 0
  store i1 %v6_1390c, i1* %cpsr_v.global-to-local, align 1
  %v7_1390c = icmp slt i32 %v2_1390c, 0
  store i1 %v7_1390c, i1* %cpsr_n.global-to-local, align 1
  %v8_1390c = icmp eq i32 %v0_13914, 12
  store i1 %v8_1390c, i1* %cpsr_z.global-to-local, align 1
  %v5_13910 = icmp slt i32 %v0_13914, 12
  br i1 %v7_13828, label %dec_label_pc_1390c, label %dec_label_pc_13830

dec_label_pc_13830:                               ; preds = %dec_label_pc_13820
  %v8_13828 = icmp eq i32 %v0_13828, 2
  br i1 %v8_13828, label %dec_label_pc_138a0, label %dec_label_pc_13834

dec_label_pc_13834:                               ; preds = %dec_label_pc_13830
  br i1 %v5_13910, label %dec_label_pc_13880, label %dec_label_pc_1383c

dec_label_pc_1383c:                               ; preds = %dec_label_pc_13834
  store i32 %v2_1390c, i32* %r2.global-to-local, align 4
  %v3_13840 = load i32, i32* @r4, align 4
  store i32 %v3_13840, i32* %stack_var_-12, align 4
  %v6_13840 = load i32, i32* @r5, align 4
  store i32 %v6_13840, i32* %stack_var_-8, align 4
  %v9_13840 = load i32, i32* @lr, align 4
  br label %dec_label_pc_13844

dec_label_pc_13844:                               ; preds = %dec_label_pc_13844.dec_label_pc_13844_crit_edge, %dec_label_pc_1383c
  %v0_13868 = phi i32 [ %v1_13868, %dec_label_pc_13844.dec_label_pc_13844_crit_edge ], [ %v0_1386830, %dec_label_pc_1383c ]
  %v0_13848 = phi i32 [ %v0_13848.pre, %dec_label_pc_13844.dec_label_pc_13844_crit_edge ], [ %v1_13820, %dec_label_pc_1383c ]
  %v0_13844 = phi i32 [ %v0_13844.pre, %dec_label_pc_13844.dec_label_pc_13844_crit_edge ], [ %v2_13824, %dec_label_pc_1383c ]
  %v3_13844 = mul i32 %v0_13844, 256
  store i32 %v3_13844, i32* %lr.global-to-local, align 4
  %v1_13848 = add i32 %v0_13848, -4
  %v2_13848 = inttoptr i32 %v1_13848 to i32*
  %v3_13848 = load i32, i32* %v2_13848, align 4
  store i32 %v3_13848, i32* %r3.global-to-local, align 4
  %v4_13848 = add i32 %v0_13848, -8
  %v5_13848 = inttoptr i32 %v4_13848 to i32*
  %v6_13848 = load i32, i32* %v5_13848, align 4
  store i32 %v6_13848, i32* %r4.global-to-local, align 4
  %v7_13848 = add i32 %v0_13848, -12
  %v8_13848 = inttoptr i32 %v7_13848 to i32*
  %v9_13848 = load i32, i32* %v8_13848, align 4
  store i32 %v9_13848, i32* %r5.global-to-local, align 4
  %v10_13848 = add i32 %v0_13848, -16
  %v11_13848 = inttoptr i32 %v10_13848 to i32*
  %v12_13848 = load i32, i32* %v11_13848, align 4
  store i32 %v10_13848, i32* %r1.global-to-local, align 4
  %v4_1384c = udiv i32 %v12_13848, 16777216
  %v5_1384c = or i32 %v4_1384c, %v3_13844
  store i32 %v5_1384c, i32* %lr.global-to-local, align 4
  %v3_13850 = mul i32 %v12_13848, 256
  %v4_13854 = udiv i32 %v9_13848, 16777216
  %v5_13854 = or i32 %v3_13850, %v4_13854
  store i32 %v5_13854, i32* @ip, align 4
  %v3_13858 = mul i32 %v9_13848, 256
  %v4_1385c = udiv i32 %v6_13848, 16777216
  %v5_1385c = or i32 %v3_13858, %v4_1385c
  store i32 %v5_1385c, i32* %r5.global-to-local, align 4
  %v3_13860 = mul i32 %v6_13848, 256
  %v4_13864 = udiv i32 %v3_13848, 16777216
  %v5_13864 = or i32 %v3_13860, %v4_13864
  store i32 %v5_13864, i32* %r4.global-to-local, align 4
  %v1_13868 = add i32 %v0_13868, -16
  %v2_13868 = inttoptr i32 %v1_13868 to i32*
  store i32 %v5_13864, i32* %v2_13868, align 4
  %v4_13868 = add i32 %v0_13868, -12
  %v5_13868 = inttoptr i32 %v4_13868 to i32*
  %v6_13868 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13868, i32* %v5_13868, align 4
  %v7_13868 = add i32 %v0_13868, -8
  %v8_13868 = inttoptr i32 %v7_13868 to i32*
  %v9_13868 = load i32, i32* @ip, align 4
  store i32 %v9_13868, i32* %v8_13868, align 4
  %v10_13868 = add i32 %v0_13868, -4
  %v11_13868 = inttoptr i32 %v10_13868 to i32*
  %v12_13868 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13868, i32* %v11_13868, align 4
  store i32 %v1_13868, i32* %r0.global-to-local, align 4
  %v0_1386c = load i32, i32* %r2.global-to-local, align 4
  %v2_1386c = add i32 %v0_1386c, -16
  store i32 %v2_1386c, i32* %r2.global-to-local, align 4
  %v6_13870 = icmp slt i32 %v0_1386c, 16
  br i1 %v6_13870, label %dec_label_pc_13874, label %dec_label_pc_13844.dec_label_pc_13844_crit_edge

dec_label_pc_13844.dec_label_pc_13844_crit_edge:  ; preds = %dec_label_pc_13844
  %v0_13844.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13848.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13844

dec_label_pc_13874:                               ; preds = %dec_label_pc_13844
  %v2_13874 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13874, i32* @r4, align 4
  %v5_13874 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_13874, i32* @r5, align 4
  store i32 %v9_13840, i32* @lr, align 4
  %v2_13878 = add i32 %v0_1386c, -4
  store i32 %v2_13878, i32* %r2.global-to-local, align 4
  %v4_13878 = add i32 %v0_1386c, 2147483632
  %v5_13878 = and i32 %v2_13878, %v4_13878
  %v6_13878 = icmp slt i32 %v5_13878, 0
  store i1 %v6_13878, i1* %cpsr_v.global-to-local, align 1
  %v7_13878 = icmp slt i32 %v2_13878, 0
  store i1 %v7_13878, i1* %cpsr_n.global-to-local, align 1
  %v8_13878 = icmp eq i32 %v2_13878, 0
  store i1 %v8_13878, i1* %cpsr_z.global-to-local, align 1
  %v5_1387c = icmp slt i32 %v2_1386c, -12
  br i1 %v5_1387c, label %dec_label_pc_13898, label %dec_label_pc_13880

dec_label_pc_13880:                               ; preds = %dec_label_pc_13874, %dec_label_pc_13834, %dec_label_pc_13880
  %v1_1388c = phi i32 [ %v5_1388c, %dec_label_pc_13880 ], [ %v1_13868, %dec_label_pc_13874 ], [ %v0_1386830, %dec_label_pc_13834 ]
  %v0_13880 = load i32, i32* %r3.global-to-local, align 4
  %v3_13880 = mul i32 %v0_13880, 256
  store i32 %v3_13880, i32* %ip.global-to-local, align 4
  %v0_13884 = load i32, i32* %r1.global-to-local, align 4
  %v1_13884 = add i32 %v0_13884, -4
  %v2_13884 = inttoptr i32 %v1_13884 to i32*
  %v3_13884 = load i32, i32* %v2_13884, align 4
  store i32 %v3_13884, i32* %r3.global-to-local, align 4
  store i32 %v1_13884, i32* %r1.global-to-local, align 4
  %v4_13888 = udiv i32 %v3_13884, 16777216
  %v5_13888 = or i32 %v4_13888, %v3_13880
  store i32 %v5_13888, i32* @ip, align 4
  %v2_1388c = add i32 %v1_1388c, -4
  %v3_1388c = inttoptr i32 %v2_1388c to i32*
  store i32 %v5_13888, i32* %v3_1388c, align 4
  %v4_1388c = load i32, i32* %r0.global-to-local, align 4
  %v5_1388c = add i32 %v4_1388c, -4
  store i32 %v5_1388c, i32* %r0.global-to-local, align 4
  %v0_13890 = load i32, i32* %r2.global-to-local, align 4
  %v2_13890 = add i32 %v0_13890, -4
  store i32 %v2_13890, i32* %r2.global-to-local, align 4
  %v6_13894 = icmp slt i32 %v0_13890, 4
  br i1 %v6_13894, label %dec_label_pc_13898.loopexit, label %dec_label_pc_13880

dec_label_pc_13898.loopexit:                      ; preds = %dec_label_pc_13880
  %v4_13890 = sub i32 3, %v0_13890
  %v5_13890 = and i32 %v4_13890, %v0_13890
  %v6_13890 = icmp slt i32 %v5_13890, 0
  %v7_13890 = icmp slt i32 %v2_13890, 0
  store i1 %v6_13890, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13890, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13898

dec_label_pc_13898:                               ; preds = %dec_label_pc_13898.loopexit, %dec_label_pc_13874
  %v2_137dc62 = phi i32 [ %v5_1388c, %dec_label_pc_13898.loopexit ], [ %v1_13868, %dec_label_pc_13874 ]
  %v0_137cc58 = phi i32 [ %v2_13890, %dec_label_pc_13898.loopexit ], [ %v2_13878, %dec_label_pc_13874 ]
  %v0_13898 = load i32, i32* %r1.global-to-local, align 4
  %v1_13898 = add i32 %v0_13898, 3
  store i32 %v1_13898, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_138a0:                               ; preds = %dec_label_pc_13830
  br i1 %v5_13910, label %dec_label_pc_138ec, label %dec_label_pc_138a8

dec_label_pc_138a8:                               ; preds = %dec_label_pc_138a0
  store i32 %v2_1390c, i32* %r2.global-to-local, align 4
  %v3_138ac = load i32, i32* @r4, align 4
  store i32 %v3_138ac, i32* %stack_var_-12, align 4
  %v6_138ac = load i32, i32* @r5, align 4
  store i32 %v6_138ac, i32* %stack_var_-8, align 4
  %v9_138ac = load i32, i32* @lr, align 4
  br label %dec_label_pc_138b0

dec_label_pc_138b0:                               ; preds = %dec_label_pc_138b0.dec_label_pc_138b0_crit_edge, %dec_label_pc_138a8
  %v0_138d4 = phi i32 [ %v1_138d4, %dec_label_pc_138b0.dec_label_pc_138b0_crit_edge ], [ %v0_1386830, %dec_label_pc_138a8 ]
  %v0_138b4 = phi i32 [ %v0_138b4.pre, %dec_label_pc_138b0.dec_label_pc_138b0_crit_edge ], [ %v1_13820, %dec_label_pc_138a8 ]
  %v0_138b0 = phi i32 [ %v0_138b0.pre, %dec_label_pc_138b0.dec_label_pc_138b0_crit_edge ], [ %v2_13824, %dec_label_pc_138a8 ]
  %v3_138b0 = mul i32 %v0_138b0, 65536
  store i32 %v3_138b0, i32* %lr.global-to-local, align 4
  %v1_138b4 = add i32 %v0_138b4, -4
  %v2_138b4 = inttoptr i32 %v1_138b4 to i32*
  %v3_138b4 = load i32, i32* %v2_138b4, align 4
  store i32 %v3_138b4, i32* %r3.global-to-local, align 4
  %v4_138b4 = add i32 %v0_138b4, -8
  %v5_138b4 = inttoptr i32 %v4_138b4 to i32*
  %v6_138b4 = load i32, i32* %v5_138b4, align 4
  store i32 %v6_138b4, i32* %r4.global-to-local, align 4
  %v7_138b4 = add i32 %v0_138b4, -12
  %v8_138b4 = inttoptr i32 %v7_138b4 to i32*
  %v9_138b4 = load i32, i32* %v8_138b4, align 4
  store i32 %v9_138b4, i32* %r5.global-to-local, align 4
  %v10_138b4 = add i32 %v0_138b4, -16
  %v11_138b4 = inttoptr i32 %v10_138b4 to i32*
  %v12_138b4 = load i32, i32* %v11_138b4, align 4
  store i32 %v10_138b4, i32* %r1.global-to-local, align 4
  %v4_138b8 = udiv i32 %v12_138b4, 65536
  %v5_138b8 = or i32 %v4_138b8, %v3_138b0
  store i32 %v5_138b8, i32* %lr.global-to-local, align 4
  %v3_138bc = mul i32 %v12_138b4, 65536
  %v4_138c0 = udiv i32 %v9_138b4, 65536
  %v5_138c0 = or i32 %v3_138bc, %v4_138c0
  store i32 %v5_138c0, i32* @ip, align 4
  %v3_138c4 = mul i32 %v9_138b4, 65536
  %v4_138c8 = udiv i32 %v6_138b4, 65536
  %v5_138c8 = or i32 %v3_138c4, %v4_138c8
  store i32 %v5_138c8, i32* %r5.global-to-local, align 4
  %v3_138cc = mul i32 %v6_138b4, 65536
  %v4_138d0 = udiv i32 %v3_138b4, 65536
  %v5_138d0 = or i32 %v3_138cc, %v4_138d0
  store i32 %v5_138d0, i32* %r4.global-to-local, align 4
  %v1_138d4 = add i32 %v0_138d4, -16
  %v2_138d4 = inttoptr i32 %v1_138d4 to i32*
  store i32 %v5_138d0, i32* %v2_138d4, align 4
  %v4_138d4 = add i32 %v0_138d4, -12
  %v5_138d4 = inttoptr i32 %v4_138d4 to i32*
  %v6_138d4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_138d4, i32* %v5_138d4, align 4
  %v7_138d4 = add i32 %v0_138d4, -8
  %v8_138d4 = inttoptr i32 %v7_138d4 to i32*
  %v9_138d4 = load i32, i32* @ip, align 4
  store i32 %v9_138d4, i32* %v8_138d4, align 4
  %v10_138d4 = add i32 %v0_138d4, -4
  %v11_138d4 = inttoptr i32 %v10_138d4 to i32*
  %v12_138d4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_138d4, i32* %v11_138d4, align 4
  store i32 %v1_138d4, i32* %r0.global-to-local, align 4
  %v0_138d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_138d8 = add i32 %v0_138d8, -16
  store i32 %v2_138d8, i32* %r2.global-to-local, align 4
  %v6_138dc = icmp slt i32 %v0_138d8, 16
  br i1 %v6_138dc, label %dec_label_pc_138e0, label %dec_label_pc_138b0.dec_label_pc_138b0_crit_edge

dec_label_pc_138b0.dec_label_pc_138b0_crit_edge:  ; preds = %dec_label_pc_138b0
  %v0_138b0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_138b4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_138b0

dec_label_pc_138e0:                               ; preds = %dec_label_pc_138b0
  %v2_138e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_138e0, i32* @r4, align 4
  %v5_138e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_138e0, i32* @r5, align 4
  store i32 %v9_138ac, i32* @lr, align 4
  %v2_138e4 = add i32 %v0_138d8, -4
  store i32 %v2_138e4, i32* %r2.global-to-local, align 4
  %v4_138e4 = add i32 %v0_138d8, 2147483632
  %v5_138e4 = and i32 %v2_138e4, %v4_138e4
  %v6_138e4 = icmp slt i32 %v5_138e4, 0
  store i1 %v6_138e4, i1* %cpsr_v.global-to-local, align 1
  %v7_138e4 = icmp slt i32 %v2_138e4, 0
  store i1 %v7_138e4, i1* %cpsr_n.global-to-local, align 1
  %v8_138e4 = icmp eq i32 %v2_138e4, 0
  store i1 %v8_138e4, i1* %cpsr_z.global-to-local, align 1
  %v5_138e8 = icmp slt i32 %v2_138d8, -12
  br i1 %v5_138e8, label %dec_label_pc_13904, label %dec_label_pc_138ec

dec_label_pc_138ec:                               ; preds = %dec_label_pc_138e0, %dec_label_pc_138a0, %dec_label_pc_138ec
  %v1_138f8 = phi i32 [ %v5_138f8, %dec_label_pc_138ec ], [ %v1_138d4, %dec_label_pc_138e0 ], [ %v0_1386830, %dec_label_pc_138a0 ]
  %v0_138ec = load i32, i32* %r3.global-to-local, align 4
  %v3_138ec = mul i32 %v0_138ec, 65536
  store i32 %v3_138ec, i32* %ip.global-to-local, align 4
  %v0_138f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_138f0 = add i32 %v0_138f0, -4
  %v2_138f0 = inttoptr i32 %v1_138f0 to i32*
  %v3_138f0 = load i32, i32* %v2_138f0, align 4
  store i32 %v3_138f0, i32* %r3.global-to-local, align 4
  store i32 %v1_138f0, i32* %r1.global-to-local, align 4
  %v4_138f4 = udiv i32 %v3_138f0, 65536
  %v5_138f4 = or i32 %v4_138f4, %v3_138ec
  store i32 %v5_138f4, i32* @ip, align 4
  %v2_138f8 = add i32 %v1_138f8, -4
  %v3_138f8 = inttoptr i32 %v2_138f8 to i32*
  store i32 %v5_138f4, i32* %v3_138f8, align 4
  %v4_138f8 = load i32, i32* %r0.global-to-local, align 4
  %v5_138f8 = add i32 %v4_138f8, -4
  store i32 %v5_138f8, i32* %r0.global-to-local, align 4
  %v0_138fc = load i32, i32* %r2.global-to-local, align 4
  %v2_138fc = add i32 %v0_138fc, -4
  store i32 %v2_138fc, i32* %r2.global-to-local, align 4
  %v6_13900 = icmp slt i32 %v0_138fc, 4
  br i1 %v6_13900, label %dec_label_pc_13904.loopexit, label %dec_label_pc_138ec

dec_label_pc_13904.loopexit:                      ; preds = %dec_label_pc_138ec
  %v4_138fc = sub i32 3, %v0_138fc
  %v5_138fc = and i32 %v4_138fc, %v0_138fc
  %v6_138fc = icmp slt i32 %v5_138fc, 0
  %v7_138fc = icmp slt i32 %v2_138fc, 0
  store i1 %v6_138fc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_138fc, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13904

dec_label_pc_13904:                               ; preds = %dec_label_pc_13904.loopexit, %dec_label_pc_138e0
  %v2_137dc63 = phi i32 [ %v5_138f8, %dec_label_pc_13904.loopexit ], [ %v1_138d4, %dec_label_pc_138e0 ]
  %v0_137cc59 = phi i32 [ %v2_138fc, %dec_label_pc_13904.loopexit ], [ %v2_138e4, %dec_label_pc_138e0 ]
  %v0_13904 = load i32, i32* %r1.global-to-local, align 4
  %v1_13904 = add i32 %v0_13904, 2
  store i32 %v1_13904, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1390c:                               ; preds = %dec_label_pc_13820
  br i1 %v5_13910, label %dec_label_pc_13958, label %dec_label_pc_13914

dec_label_pc_13914:                               ; preds = %dec_label_pc_1390c
  store i32 %v2_1390c, i32* %r2.global-to-local, align 4
  %v3_13918 = load i32, i32* @r4, align 4
  store i32 %v3_13918, i32* %stack_var_-12, align 4
  %v6_13918 = load i32, i32* @r5, align 4
  store i32 %v6_13918, i32* %stack_var_-8, align 4
  %v9_13918 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1391c

dec_label_pc_1391c:                               ; preds = %dec_label_pc_1391c.dec_label_pc_1391c_crit_edge, %dec_label_pc_13914
  %v0_13940 = phi i32 [ %v1_13940, %dec_label_pc_1391c.dec_label_pc_1391c_crit_edge ], [ %v0_1386830, %dec_label_pc_13914 ]
  %v0_13920 = phi i32 [ %v0_13920.pre, %dec_label_pc_1391c.dec_label_pc_1391c_crit_edge ], [ %v1_13820, %dec_label_pc_13914 ]
  %v0_1391c = phi i32 [ %v0_1391c.pre, %dec_label_pc_1391c.dec_label_pc_1391c_crit_edge ], [ %v2_13824, %dec_label_pc_13914 ]
  %v3_1391c = mul i32 %v0_1391c, 16777216
  store i32 %v3_1391c, i32* %lr.global-to-local, align 4
  %v1_13920 = add i32 %v0_13920, -4
  %v2_13920 = inttoptr i32 %v1_13920 to i32*
  %v3_13920 = load i32, i32* %v2_13920, align 4
  store i32 %v3_13920, i32* %r3.global-to-local, align 4
  %v4_13920 = add i32 %v0_13920, -8
  %v5_13920 = inttoptr i32 %v4_13920 to i32*
  %v6_13920 = load i32, i32* %v5_13920, align 4
  store i32 %v6_13920, i32* %r4.global-to-local, align 4
  %v7_13920 = add i32 %v0_13920, -12
  %v8_13920 = inttoptr i32 %v7_13920 to i32*
  %v9_13920 = load i32, i32* %v8_13920, align 4
  store i32 %v9_13920, i32* %r5.global-to-local, align 4
  %v10_13920 = add i32 %v0_13920, -16
  %v11_13920 = inttoptr i32 %v10_13920 to i32*
  %v12_13920 = load i32, i32* %v11_13920, align 4
  store i32 %v10_13920, i32* %r1.global-to-local, align 4
  %v4_13924 = udiv i32 %v12_13920, 256
  %v5_13924 = or i32 %v4_13924, %v3_1391c
  store i32 %v5_13924, i32* %lr.global-to-local, align 4
  %v3_13928 = mul i32 %v12_13920, 16777216
  %v4_1392c = udiv i32 %v9_13920, 256
  %v5_1392c = or i32 %v3_13928, %v4_1392c
  store i32 %v5_1392c, i32* @ip, align 4
  %v3_13930 = mul i32 %v9_13920, 16777216
  %v4_13934 = udiv i32 %v6_13920, 256
  %v5_13934 = or i32 %v3_13930, %v4_13934
  store i32 %v5_13934, i32* %r5.global-to-local, align 4
  %v3_13938 = mul i32 %v6_13920, 16777216
  %v4_1393c = udiv i32 %v3_13920, 256
  %v5_1393c = or i32 %v3_13938, %v4_1393c
  store i32 %v5_1393c, i32* %r4.global-to-local, align 4
  %v1_13940 = add i32 %v0_13940, -16
  %v2_13940 = inttoptr i32 %v1_13940 to i32*
  store i32 %v5_1393c, i32* %v2_13940, align 4
  %v4_13940 = add i32 %v0_13940, -12
  %v5_13940 = inttoptr i32 %v4_13940 to i32*
  %v6_13940 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13940, i32* %v5_13940, align 4
  %v7_13940 = add i32 %v0_13940, -8
  %v8_13940 = inttoptr i32 %v7_13940 to i32*
  %v9_13940 = load i32, i32* @ip, align 4
  store i32 %v9_13940, i32* %v8_13940, align 4
  %v10_13940 = add i32 %v0_13940, -4
  %v11_13940 = inttoptr i32 %v10_13940 to i32*
  %v12_13940 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13940, i32* %v11_13940, align 4
  store i32 %v1_13940, i32* %r0.global-to-local, align 4
  %v0_13944 = load i32, i32* %r2.global-to-local, align 4
  %v2_13944 = add i32 %v0_13944, -16
  store i32 %v2_13944, i32* %r2.global-to-local, align 4
  %v6_13948 = icmp slt i32 %v0_13944, 16
  br i1 %v6_13948, label %dec_label_pc_1394c, label %dec_label_pc_1391c.dec_label_pc_1391c_crit_edge

dec_label_pc_1391c.dec_label_pc_1391c_crit_edge:  ; preds = %dec_label_pc_1391c
  %v0_1391c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13920.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1391c

dec_label_pc_1394c:                               ; preds = %dec_label_pc_1391c
  %v2_1394c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1394c, i32* @r4, align 4
  %v5_1394c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1394c, i32* @r5, align 4
  store i32 %v9_13918, i32* @lr, align 4
  %v2_13950 = add i32 %v0_13944, -4
  store i32 %v2_13950, i32* %r2.global-to-local, align 4
  %v4_13950 = add i32 %v0_13944, 2147483632
  %v5_13950 = and i32 %v2_13950, %v4_13950
  %v6_13950 = icmp slt i32 %v5_13950, 0
  store i1 %v6_13950, i1* %cpsr_v.global-to-local, align 1
  %v7_13950 = icmp slt i32 %v2_13950, 0
  store i1 %v7_13950, i1* %cpsr_n.global-to-local, align 1
  %v8_13950 = icmp eq i32 %v2_13950, 0
  store i1 %v8_13950, i1* %cpsr_z.global-to-local, align 1
  %v5_13954 = icmp slt i32 %v2_13944, -12
  br i1 %v5_13954, label %dec_label_pc_13970, label %dec_label_pc_13958

dec_label_pc_13958:                               ; preds = %dec_label_pc_1394c, %dec_label_pc_1390c, %dec_label_pc_13958
  %v1_13964 = phi i32 [ %v5_13964, %dec_label_pc_13958 ], [ %v1_13940, %dec_label_pc_1394c ], [ %v0_1386830, %dec_label_pc_1390c ]
  %v0_13958 = load i32, i32* %r3.global-to-local, align 4
  %v3_13958 = mul i32 %v0_13958, 16777216
  store i32 %v3_13958, i32* %ip.global-to-local, align 4
  %v0_1395c = load i32, i32* %r1.global-to-local, align 4
  %v1_1395c = add i32 %v0_1395c, -4
  %v2_1395c = inttoptr i32 %v1_1395c to i32*
  %v3_1395c = load i32, i32* %v2_1395c, align 4
  store i32 %v3_1395c, i32* %r3.global-to-local, align 4
  store i32 %v1_1395c, i32* %r1.global-to-local, align 4
  %v4_13960 = udiv i32 %v3_1395c, 256
  %v5_13960 = or i32 %v4_13960, %v3_13958
  store i32 %v5_13960, i32* @ip, align 4
  %v2_13964 = add i32 %v1_13964, -4
  %v3_13964 = inttoptr i32 %v2_13964 to i32*
  store i32 %v5_13960, i32* %v3_13964, align 4
  %v4_13964 = load i32, i32* %r0.global-to-local, align 4
  %v5_13964 = add i32 %v4_13964, -4
  store i32 %v5_13964, i32* %r0.global-to-local, align 4
  %v0_13968 = load i32, i32* %r2.global-to-local, align 4
  %v2_13968 = add i32 %v0_13968, -4
  store i32 %v2_13968, i32* %r2.global-to-local, align 4
  %v6_1396c = icmp slt i32 %v0_13968, 4
  br i1 %v6_1396c, label %dec_label_pc_13970.loopexit, label %dec_label_pc_13958

dec_label_pc_13970.loopexit:                      ; preds = %dec_label_pc_13958
  %v4_13968 = sub i32 3, %v0_13968
  %v5_13968 = and i32 %v4_13968, %v0_13968
  %v6_13968 = icmp slt i32 %v5_13968, 0
  %v7_13968 = icmp slt i32 %v2_13968, 0
  store i1 %v6_13968, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13968, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13970

dec_label_pc_13970:                               ; preds = %dec_label_pc_13970.loopexit, %dec_label_pc_1394c
  %v2_137dc64 = phi i32 [ %v5_13964, %dec_label_pc_13970.loopexit ], [ %v1_13940, %dec_label_pc_1394c ]
  %v0_137cc60 = phi i32 [ %v2_13968, %dec_label_pc_13970.loopexit ], [ %v2_13950, %dec_label_pc_1394c ]
  %v0_13970 = load i32, i32* %r1.global-to-local, align 4
  %v1_13970 = add i32 %v0_13970, 1
  store i32 %v1_13970, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_13964, { 0, 2, 1 }
  uselistorder i32 %v3_13958, { 1, 0 }
  uselistorder i32 %v2_13950, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13940, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13920, { 1, 0 }
  uselistorder i32 %v3_1391c, { 1, 0 }
  uselistorder i32 %v0_13920, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13940, { 3, 2, 1, 0 }
  uselistorder i32 %v5_138f8, { 0, 2, 1 }
  uselistorder i32 %v3_138ec, { 1, 0 }
  uselistorder i32 %v2_138e4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_138d4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_138b4, { 1, 0 }
  uselistorder i32 %v3_138b0, { 1, 0 }
  uselistorder i32 %v0_138b4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_138d4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_1388c, { 0, 2, 1 }
  uselistorder i32 %v3_13880, { 1, 0 }
  uselistorder i32 %v2_13878, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13868, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13848, { 1, 0 }
  uselistorder i32 %v3_13844, { 1, 0 }
  uselistorder i32 %v0_13848, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13868, { 3, 2, 1, 0 }
  uselistorder i1 %v5_13910, { 2, 0, 1 }
  uselistorder i32 %v0_13828, { 1, 0 }
  uselistorder i32 %v0_13914, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1386830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_13818, { 2, 1, 0 }
  uselistorder i32 %v0_13818, { 2, 0, 1 }
  uselistorder i32 %v2_13810, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_13810, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13810, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1386831, { 2, 1, 0 }
  uselistorder i32 %v11_137ec, { 1, 0 }
  uselistorder i32 %v7_137ec, { 1, 0 }
  uselistorder i32 %v1_137cc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_137cc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_137d0, { 1, 0 }
  uselistorder i32 %v7_137c4, { 0, 2, 1 }
  uselistorder i32 %v10_137c0, { 1, 0 }
  uselistorder i32 %v9_137b8, { 1, 0, 2 }
  uselistorder i32 %v6_137b4, { 1, 0 }
  uselistorder i32 %v2_137ac, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_137ac, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_137bc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_137a0, { 0, 2, 1 }
  uselistorder i32 %v13_1379c, { 1, 0 }
  uselistorder i32 %v4_13798, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_13798, { 2, 0, 1 }
  uselistorder i32 %v6_137a0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_13790, { 0, 2, 1 }
  uselistorder i32 %v16_1378c, { 1, 0 }
  uselistorder i32 %v4_13788, { 1, 2, 0 }
  uselistorder i32 %v0_13798.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_13790, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_1377c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_13778, { 1, 0 }
  uselistorder i32 %v1_13774, { 1, 0 }
  uselistorder i32 %v10_13770, { 1, 0 }
  uselistorder i32 %v0_13770, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13774, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_13768, { 0, 2, 1 }
  uselistorder i32 %v2_1375c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_1375c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1377448, { 1, 2, 0 }
  uselistorder i32 %v1_13754, { 2, 1, 0 }
  uselistorder i32 %v1_1374c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_13744, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_13740, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_1373c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_1373c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_13728, { 0, 2, 1 }
  uselistorder i32 %v3_1371c, { 1, 0 }
  uselistorder i32 %v2_13714, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_13704, { 1, 0, 3, 2 }
  uselistorder i32 %v8_136e4, { 1, 0, 2 }
  uselistorder i32 %v5_136e4, { 1, 0, 2 }
  uselistorder i32 %v2_136e4, { 1, 0, 2 }
  uselistorder i32 %v3_136e0, { 1, 0 }
  uselistorder i32 %v0_136e4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13704, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_136bc, { 0, 2, 1 }
  uselistorder i32 %v3_136b0, { 1, 0 }
  uselistorder i32 %v2_136a8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_13698, { 1, 0, 3, 2 }
  uselistorder i32 %v8_13678, { 1, 0, 2 }
  uselistorder i32 %v5_13678, { 1, 0, 2 }
  uselistorder i32 %v2_13678, { 1, 0, 2 }
  uselistorder i32 %v3_13674, { 1, 0 }
  uselistorder i32 %v0_13678, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13698, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_13650, { 0, 2, 1 }
  uselistorder i32 %v3_13644, { 1, 0 }
  uselistorder i32 %v2_1363c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1362c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1360c, { 1, 0, 2 }
  uselistorder i32 %v5_1360c, { 1, 0, 2 }
  uselistorder i32 %v2_1360c, { 1, 0, 2 }
  uselistorder i32 %v3_13608, { 1, 0 }
  uselistorder i32 %v0_1360c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1362c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_136d4, { 2, 0, 1 }
  uselistorder i32 %v0_136d8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1362c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_135dc, { 1, 0 }
  uselistorder i32 %v0_135dc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_135d4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_135d4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_135d4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1362c75, { 2, 1, 0 }
  uselistorder i32 %v1_135b4, { 1, 0, 2 }
  uselistorder i32 %v1_1358c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1358c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_13578, { 1, 0, 2 }
  uselistorder i32 %v6_13574, { 1, 0 }
  uselistorder i32 %v2_1356c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1356c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1357c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_13564, { 0, 2, 1 }
  uselistorder i32 %v3_13564, { 3, 0, 1, 2 }
  uselistorder i1 %v0_13564, { 1, 0 }
  uselistorder i1 %v1_13564, { 1, 0 }
  uselistorder i32 %v3_13560, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_13558, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_13544, { 1, 2, 0 }
  uselistorder i32 %v12_13538, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1352c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13530, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_13520, { 0, 2, 1 }
  uselistorder i32 %v2_13518, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_13518, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_13510, { 1, 0 }
  uselistorder i32 %v1_13508, { 2, 1, 0 }
  uselistorder i32 %v2_13500, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_13500, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_134f0, { 1, 0 }
  uselistorder i32 %v1_134f0, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_134f0, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 48, 47, 53, 49, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 7, 3, 9, 4, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 5, 24, 6, 26, 0, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 2, 7, 3, 9, 4, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 5, 23, 6, 25, 0, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 2, 7, 3, 9, 4, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 24, 5, 25, 6, 27, 0, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 18, 19, 1, 0, 10, 12, 11, 13, 2, 15, 14, 20, 21, 16, 17, 6, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 8, 10, 9, 7, 6, 5, 4, 18, 19, 20, 21, 14 }
  uselistorder i32 65536, { 10, 9, 15, 11, 16, 12, 17, 13, 18, 14, 19, 20, 21, 25, 22, 26, 23, 27, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 1, 60, 61, 2, 62, 0, 3, 63, 64, 65, 66, 67, 70, 68, 69, 71, 72, 4, 73, 76, 77, 74, 78, 75, 79, 80, 81, 82, 83, 147, 85, 84, 148, 87, 86, 88, 90, 89, 92, 91, 149, 94, 93, 150, 96, 95, 97, 99, 98, 101, 100, 102, 103, 107, 108, 109, 110, 104, 105, 106, 111, 114, 115, 116, 112, 113, 117, 5, 118, 120, 121, 122, 119, 123, 6, 124, 128, 129, 130, 125, 126, 127, 131, 132, 133, 135, 134, 136, 7, 137, 139, 140, 138, 141, 8, 142, 144, 145, 143, 146 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 53, 50, 52, 51, 54, 56, 55, 58, 57, 60, 59, 61, 62, 63, 64, 67, 65, 68, 66, 69, 70, 72, 71, 78, 73, 79, 74, 80, 75, 81, 76, 82, 77, 83, 86, 87, 84, 85, 88, 89, 93, 90, 94, 91, 92, 95, 98, 99, 96, 97, 100, 101, 105, 102, 106, 103, 104, 107, 115, 108, 116, 109, 117, 110, 118, 119, 111, 120, 112, 121, 113, 122, 114, 126, 123, 127, 124, 128, 125, 129, 136, 130, 137, 138, 131, 139, 134, 140, 132, 141, 142, 133, 135, 143, 144, 148, 145, 149, 150, 146, 147, 151, 152, 153, 157, 154, 158, 155, 159, 156, 160, 161, 162, 167, 163, 168, 164, 169, 165, 170, 166, 171, 172, 173, 174, 175, 176, 178, 177, 179 }
  uselistorder i32* @r5, { 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 162, 163, 164, 166, 594, 595, 596, 597, 598, 0, 599, 600, 321, 322, 323, 324, 325, 326, 504, 505, 506, 507, 508, 509, 510, 517, 511, 512, 513, 514, 515, 516, 553, 554, 555, 562, 563, 564, 565, 556, 557, 558, 559, 560, 561, 23, 24, 25, 167, 168, 3, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 10, 11, 86, 87, 13, 12, 14, 15, 16, 17, 18, 19, 88, 89, 20, 21, 90, 91, 92, 93, 94, 95, 96, 22, 105, 106, 107, 108, 4, 109, 110, 111, 97, 98, 99, 100, 101, 102, 103, 104, 330, 331, 332, 333, 334, 335, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 1, 130, 131, 132, 133, 134, 5, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 2, 152, 180, 181, 182, 183, 184, 8, 185, 186, 187, 188, 189, 190, 191, 192, 9, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 6, 496, 497, 498, 499, 500, 501, 502, 503, 566, 567, 568, 569, 570, 571, 572, 573, 7, 574, 575, 576, 577, 578, 579, 580, 581, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 313, 314, 315, 316, 317, 318, 319, 320, 327, 328, 329 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 5, 6, 7, 16, 17, 8, 9, 10, 11, 0, 12, 13, 14, 15, 18, 19, 20, 21, 1, 22, 23, 24, 2, 25, 26, 27, 3, 28, 29, 30, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 5, 6, 3, 4, 1, 7, 2, 8 }
  uselistorder i32 40, { 1, 7, 2, 0, 3, 5, 6, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 36, { 1, 5, 6, 3, 4, 0, 2 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 72, 73, 37, 38, 1, 74, 75, 35, 36, 16, 15, 66, 45, 67, 46, 47, 54, 58, 39, 40, 41, 42, 43, 44, 61, 48, 49, 50, 51, 52, 53, 55, 56, 62, 57, 63, 59, 60, 68, 69, 70, 64, 65, 71, 17, 18, 19, 20, 2, 21, 22, 3, 23, 4, 5, 6, 7, 8, 9, 10, 78, 24, 11, 79, 25, 26, 12, 80, 27, 81, 82, 83, 28, 29, 13, 84, 30, 85, 31, 32, 14, 86, 33, 87, 88, 76, 34, 77 }
  uselistorder i32* @lr, { 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 1, 104, 105, 106, 2, 107, 108, 109, 3, 110, 111, 112, 113, 114, 115, 116, 117, 21, 22, 118, 119, 120, 121, 122, 73, 74, 75, 76, 77, 78, 79, 80, 23, 24, 25, 26, 27, 8, 81, 5, 6, 82, 36, 37, 83, 47, 48, 49, 50, 51, 38, 39, 40, 41, 42, 7, 9, 12, 13, 4, 0, 16, 14, 15, 10, 11, 84, 85, 86, 87, 88, 89, 17, 18, 19, 20, 28, 29, 30, 31, 43, 44, 45, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 32, 33, 34, 35 }
  uselistorder i32 16, { 31, 32, 33, 171, 34, 172, 173, 35, 174, 175, 36, 176, 177, 178, 179, 180, 181, 84, 85, 71, 72, 89, 86, 87, 88, 90, 26, 91, 92, 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 49, 75, 37, 76, 38, 50, 73, 74, 77, 79, 80, 81, 27, 70, 14, 15, 24, 67, 16, 82, 17, 51, 78, 39, 83, 40, 52, 53, 54, 93, 94, 56, 95, 96, 97, 98, 99, 1, 55, 100, 101, 102, 58, 103, 104, 105, 106, 107, 2, 57, 108, 59, 109, 110, 111, 18, 112, 19, 113, 68, 20, 60, 61, 114, 115, 3, 42, 116, 41, 117, 62, 118, 119, 120, 21, 121, 22, 122, 69, 23, 63, 64, 123, 124, 4, 44, 125, 43, 126, 28, 128, 129, 130, 131, 65, 132, 133, 134, 135, 136, 137, 138, 139, 29, 140, 141, 142, 143, 145, 144, 146, 147, 148, 149, 150, 151, 152, 30, 153, 154, 155, 156, 157, 159, 158, 160, 161, 162, 163, 164, 165, 66, 166, 167, 168, 46, 169, 45, 48, 170, 47, 127 }
  uselistorder i32 20, { 108, 3, 109, 110, 0, 4, 111, 30, 31, 21, 22, 1, 32, 33, 34, 35, 23, 25, 5, 26, 6, 27, 20, 24, 28, 29, 36, 37, 38, 7, 39, 40, 41, 42, 43, 44, 45, 46, 8, 47, 48, 49, 2, 50, 51, 52, 53, 16, 54, 55, 56, 57, 58, 59, 60, 61, 62, 17, 63, 64, 65, 66, 67, 68, 69, 71, 72, 9, 73, 74, 75, 76, 77, 78, 79, 10, 80, 81, 82, 83, 18, 19, 84, 12, 85, 11, 86, 87, 88, 89, 14, 90, 13, 91, 92, 93, 94, 95, 96, 97, 98, 15, 99, 100, 101, 102, 103, 104, 105, 106, 107, 70 }
  uselistorder i32 27, { 1, 0, 8, 3, 10, 2, 9, 4, 11, 5, 12, 6, 13, 7, 14 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 21, 22, 23, 60, 62, 0, 15, 28, 3, 17, 24, 18, 25, 19, 26, 16, 27, 1, 20, 29, 30, 4, 31, 32, 5, 33, 34, 6, 35, 36, 7, 37, 38, 39, 40, 8, 41, 42, 43, 44, 9, 45, 46, 47, 48, 49, 10, 50, 51, 52, 53, 54, 11, 55, 56, 57, 58, 12, 59, 13, 14, 2, 61 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 2, 3, 5, 4 }
  uselistorder i32* @ip, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 2, 3, 55, 6, 7, 8, 9, 10, 11, 12, 1, 0, 4, 5 }
  uselistorder i1 false, { 25, 26, 27, 35, 19, 24, 36, 37, 21, 22, 23, 38, 18, 39, 40, 0, 30, 29, 31, 28, 1, 3, 2, 16, 4, 33, 17, 15, 20, 34, 7, 6, 5, 8, 9, 10, 32, 11, 12, 14, 13, 41 }
  uselistorder i32 4, { 67, 58, 59, 6, 395, 60, 396, 48, 7, 8, 61, 397, 62, 398, 399, 400, 401, 63, 402, 403, 404, 405, 64, 406, 407, 408, 409, 410, 9, 411, 412, 413, 414, 415, 65, 416, 47, 417, 418, 419, 420, 421, 422, 10, 11, 66, 423, 231, 232, 172, 173, 233, 234, 235, 424, 425, 426, 427, 428, 119, 120, 121, 49, 122, 123, 376, 378, 377, 374, 375, 344, 345, 346, 347, 379, 380, 381, 382, 348, 349, 350, 383, 384, 124, 125, 126, 127, 128, 42, 12, 13, 236, 237, 238, 239, 240, 241, 14, 15, 54, 16, 17, 55, 385, 386, 170, 18, 19, 86, 68, 300, 290, 50, 202, 203, 204, 194, 195, 205, 206, 183, 184, 89, 174, 175, 176, 90, 177, 91, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 88, 197, 198, 199, 196, 56, 207, 69, 92, 93, 20, 208, 21, 209, 210, 22, 23, 211, 212, 44, 213, 43, 200, 87, 201, 218, 94, 220, 95, 221, 96, 222, 223, 219, 214, 97, 215, 216, 217, 387, 224, 53, 52, 51, 225, 98, 24, 25, 26, 27, 28, 226, 45, 227, 46, 228, 229, 230, 0, 99, 242, 243, 129, 244, 245, 246, 247, 130, 131, 2, 248, 100, 249, 70, 250, 251, 252, 132, 253, 254, 133, 134, 3, 101, 255, 71, 256, 72, 257, 258, 135, 259, 260, 261, 262, 263, 136, 137, 264, 265, 103, 266, 4, 102, 267, 73, 268, 104, 269, 270, 138, 271, 272, 273, 274, 275, 139, 140, 276, 277, 106, 278, 5, 105, 279, 74, 280, 107, 281, 29, 291, 292, 141, 293, 294, 295, 142, 143, 109, 296, 108, 298, 75, 299, 301, 144, 302, 303, 145, 146, 304, 76, 305, 77, 306, 307, 308, 309, 147, 310, 311, 312, 148, 149, 111, 313, 110, 78, 314, 79, 315, 316, 317, 318, 319, 320, 113, 321, 114, 322, 150, 323, 324, 325, 151, 152, 115, 326, 112, 327, 80, 328, 81, 329, 330, 331, 153, 154, 332, 155, 333, 334, 156, 157, 116, 335, 82, 336, 83, 337, 338, 339, 340, 341, 117, 342, 84, 343, 388, 389, 390, 391, 118, 393, 85, 394, 158, 351, 352, 30, 159, 353, 354, 31, 160, 355, 356, 32, 161, 357, 358, 33, 162, 359, 360, 34, 163, 57, 361, 362, 35, 363, 164, 364, 365, 36, 165, 366, 367, 37, 166, 368, 369, 38, 167, 370, 371, 39, 168, 372, 373, 40, 392, 282, 283, 284, 285, 41, 286, 287, 1, 288, 169, 289, 297, 171 }
  uselistorder i32* @r2, { 66, 67, 28, 9, 29, 31, 30, 32, 33, 34, 35, 7, 68, 1, 69, 74, 75, 78, 70, 57, 61, 62, 65, 63, 64, 58, 59, 60, 56, 14, 0, 76, 2, 77, 5, 36, 37, 38, 8, 10, 71, 72, 73, 3, 39, 40, 41, 6, 24, 25, 26, 4, 42, 50, 53, 54, 51, 52, 55, 15, 11, 12, 13, 18, 19, 16, 17, 20, 21, 22, 23, 27, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder label %dec_label_pc_13958, { 2, 0, 1 }
  uselistorder label %dec_label_pc_138ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13880, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13820, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_137ac, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_13770, { 1, 0 }
  uselistorder label %dec_label_pc_1375c, { 1, 0 }
  uselistorder label %dec_label_pc_1371c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_136b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13644, { 2, 0, 1 }
  uselistorder label %dec_label_pc_135e4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_13558, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13518, { 1, 0 }
}

define i32 @function_13978(i32 %arg1) local_unnamed_addr {
dec_label_pc_13978:
  ret i32 %arg1
}

define i32 @function_13980() local_unnamed_addr {
dec_label_pc_13980:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_13980 = load i32, i32* @r0, align 4
  %v2_13980 = icmp eq i32 %v0_13980, 0
  %v3_13984 = load i32, i32* @r4, align 4
  store i32 %v3_13984, i32* %stack_var_-20, align 4
  %v0_13988 = load i32, i32* @r1, align 4
  br i1 %v2_13980, label %dec_label_pc_13a60, label %dec_label_pc_1399c.lr.ph

dec_label_pc_1399c:                               ; preds = %dec_label_pc_1399c.lr.ph, %dec_label_pc_13a20
  %v1_13a20 = phi i32 [ 0, %dec_label_pc_1399c.lr.ph ], [ %v5_13a20, %dec_label_pc_13a20 ]
  %v0_13a24 = phi i32 [ 1, %dec_label_pc_1399c.lr.ph ], [ %v1_13a24, %dec_label_pc_13a20 ]
  %v0_139a4 = phi i32 [ %v0_13980, %dec_label_pc_1399c.lr.ph ], [ %v0_139a425, %dec_label_pc_13a20 ]
  %v1_139a4 = inttoptr i32 %v0_139a4 to i8*
  %v2_139a4 = load i8, i8* %v1_139a4, align 1
  %v3_139a4 = zext i8 %v2_139a4 to i32
  %v3_139a8 = mul nuw nsw i32 %v3_139a4, 2
  %v4_139a8 = add i32 %v3_139a8, %v2_139a0.pre
  %v5_139a8 = inttoptr i32 %v4_139a8 to i8*
  %v6_139a8 = load i8, i8* %v5_139a8, align 1
  %v1_139ac = and i8 %v6_139a8, 8
  %v2_139ac = icmp eq i8 %v1_139ac, 0
  br i1 %v2_139ac, label %dec_label_pc_13a60, label %dec_label_pc_139b4

dec_label_pc_139b4:                               ; preds = %dec_label_pc_1399c
  br label %dec_label_pc_139d4

dec_label_pc_139bc:                               ; preds = %dec_label_pc_139d4
  %v3_139c0 = mul i32 %v0_13a20, 10
  %v4_139c0 = add i32 %v3_139d4, %v3_139c0
  %v1_139c4 = add i32 %v4_139c0, -48
  %v8_139cc = icmp sgt i32 %v1_139c4, 255
  br i1 %v8_139cc, label %dec_label_pc_13a60, label %dec_label_pc_139d0

dec_label_pc_139d0:                               ; preds = %dec_label_pc_139bc
  %v1_139d0 = add i32 %v0_13a10, 1
  store i32 %v1_139d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_139d4

dec_label_pc_139d4:                               ; preds = %dec_label_pc_139b4, %dec_label_pc_139d0
  %v0_13a20 = phi i32 [ 0, %dec_label_pc_139b4 ], [ %v1_139c4, %dec_label_pc_139d0 ]
  %v0_13a10 = phi i32 [ %v0_139a4, %dec_label_pc_139b4 ], [ %v1_139d0, %dec_label_pc_139d0 ]
  %v1_139d4 = inttoptr i32 %v0_13a10 to i8*
  %v2_139d4 = load i8, i8* %v1_139d4, align 1
  %v3_139d4 = zext i8 %v2_139d4 to i32
  %v2_139d8 = mul nuw nsw i32 %v3_139d4, 2
  %v2_139dc = add i32 %v2_139d8, %v2_139a0.pre
  %v3_139e0 = inttoptr i32 %v2_139dc to i8*
  %v4_139e0 = load i8, i8* %v3_139e0, align 1
  %v6_139e0 = zext i8 %v4_139e0 to i32
  %v1_139ec = and i32 %v6_139e0, 8
  %v2_139ec = icmp eq i32 %v1_139ec, 0
  br i1 %v2_139ec, label %dec_label_pc_139f4, label %dec_label_pc_139bc

dec_label_pc_139f4:                               ; preds = %dec_label_pc_139d4
  %v8_139f8 = icmp sgt i32 %v0_13a24, 3
  br i1 %v8_139f8, label %dec_label_pc_13a0c, label %dec_label_pc_139fc

dec_label_pc_139fc:                               ; preds = %dec_label_pc_139f4
  %v7_139fc = icmp eq i8 %v2_139d4, 46
  br i1 %v7_139fc, label %dec_label_pc_13a04, label %dec_label_pc_13a60

dec_label_pc_13a04:                               ; preds = %dec_label_pc_139fc
  %v1_13a04 = add i32 %v0_13a10, 1
  store i32 %v1_13a04, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13a20

dec_label_pc_13a0c:                               ; preds = %dec_label_pc_139f4
  %v2_13a0c = icmp eq i8 %v2_139d4, 0
  %v1_13a10 = add i32 %v0_13a10, 1
  store i32 %v1_13a10, i32* %r0.global-to-local, align 4
  br i1 %v2_13a0c, label %dec_label_pc_13a20, label %dec_label_pc_13a18

dec_label_pc_13a18:                               ; preds = %dec_label_pc_13a0c
  %v1_13a18 = and i32 %v6_139e0, 32
  %v2_13a18 = icmp eq i32 %v1_13a18, 0
  br i1 %v2_13a18, label %dec_label_pc_13a60, label %dec_label_pc_13a20

dec_label_pc_13a20:                               ; preds = %dec_label_pc_13a18, %dec_label_pc_13a0c, %dec_label_pc_13a04
  %v0_139a425 = phi i32 [ %v1_13a10, %dec_label_pc_13a18 ], [ %v1_13a10, %dec_label_pc_13a0c ], [ %v1_13a04, %dec_label_pc_13a04 ]
  %v4_13a20 = mul i32 %v1_13a20, 256
  %v5_13a20 = or i32 %v0_13a20, %v4_13a20
  %v1_13a24 = add nuw nsw i32 %v0_13a24, 1
  %v7_13a2c = icmp slt i32 %v1_13a24, 5
  br i1 %v7_13a2c, label %dec_label_pc_1399c, label %dec_label_pc_13a30

dec_label_pc_1399c.lr.ph:                         ; preds = %dec_label_pc_13980
  %v2_139a0.pre = load i32, i32* bitcast (i32** @global_var_1c210.418 to i32*), align 4
  br label %dec_label_pc_1399c

dec_label_pc_13a30:                               ; preds = %dec_label_pc_13a20
  %v2_13a30 = icmp eq i32 %v0_13988, 0
  br i1 %v2_13a30, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_13a30
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_13a30
  %v3_13a4c = call i32 @llvm.bswap.i32(i32 %v5_13a20)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_13a58 = inttoptr i32 %v0_13988 to i32*
  store i32 %v3_13a4c, i32* %v3_13a58, align 4
  %v2_13a5c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_13a5c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_13a5c = phi i32 [ 1, %bb ], [ %v17_13a5c.pre, %bb40 ]
  %v2_13a5c = phi i32 [ %v3_13984, %bb ], [ %v2_13a5c.pre, %bb40 ]
  store i32 %v2_13a5c, i32* @r4, align 4
  ret i32 %v17_13a5c

dec_label_pc_13a60:                               ; preds = %dec_label_pc_139fc, %dec_label_pc_13a18, %dec_label_pc_1399c, %dec_label_pc_139bc, %dec_label_pc_13980
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_13984, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_139a0.pre, { 1, 0 }
  uselistorder i32 %v1_13a24, { 1, 0 }
  uselistorder i32 %v0_13a10, { 0, 1, 3, 2 }
  uselistorder i32 %v3_13984, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 0, 5, 6, 1, 2, 3, 4 }
  uselistorder i32 5, { 16, 26, 17, 5, 18, 6, 2, 20, 27, 21, 28, 22, 29, 19, 30, 3, 0, 23, 24, 25, 31, 32, 7, 33, 34, 35, 8, 36, 37, 38, 39, 9, 40, 41, 42, 43, 10, 44, 48, 49, 50, 51, 11, 52, 53, 54, 55, 12, 56, 57, 58, 59, 60, 61, 62, 13, 63, 64, 65, 66, 67, 68, 69, 14, 70, 71, 72, 73, 74, 75, 76, 77, 15, 78, 4, 79, 45, 1, 46, 47 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 478, 479, 79, 80, 81, 82, 83, 84, 85, 481, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 98, 103, 102, 101, 104, 476, 482, 109, 105, 108, 106, 107, 480, 111, 110, 112, 113, 114, 117, 116, 115, 118, 120, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 135, 144, 140, 145, 141, 137, 138, 142, 139, 146, 147, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 163, 162, 170, 165, 176, 177, 171, 166, 178, 179, 172, 167, 180, 173, 181, 174, 182, 175, 183, 168, 184, 169, 185, 186, 187, 188, 189, 190, 191, 194, 195, 198, 196, 192, 199, 197, 193, 202, 201, 200, 205, 206, 203, 207, 204, 208, 212, 209, 214, 213, 210, 211, 215, 474, 483, 216, 217, 218, 219, 220, 223, 221, 222, 225, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 245, 243, 239, 246, 244, 240, 249, 248, 247, 252, 253, 250, 254, 251, 255, 259, 256, 261, 260, 257, 258, 262, 475, 484, 263, 264, 265, 266, 267, 270, 268, 269, 272, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 289, 291, 292, 293, 297, 303, 298, 294, 299, 304, 300, 305, 301, 295, 306, 296, 307, 308, 302, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 319, 322, 325, 326, 324, 323, 327, 330, 329, 328, 337, 334, 338, 335, 331, 339, 336, 332, 333, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 350, 352, 353, 355, 354, 356, 357, 358, 359, 362, 369, 363, 364, 360, 365, 366, 367, 361, 370, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 383, 385, 386, 387, 391, 398, 392, 393, 399, 394, 388, 389, 395, 390, 396, 400, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 418, 420, 421, 422, 433, 428, 423, 434, 429, 435, 430, 436, 431, 424, 425, 426, 437, 438, 439, 440, 432, 427, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 452, 454, 455, 456, 457, 458, 459, 460, 462, 461, 463, 464, 465, 466, 467, 468, 470, 469, 471, 472, 473, 477 }
  uselistorder i32 32, { 49, 37, 38, 35, 45, 46, 40, 41, 44, 5, 4, 7, 6, 9, 8, 36, 34, 47, 48, 11, 10, 13, 12, 15, 14, 17, 16, 39, 19, 18, 20, 22, 21, 23, 24, 26, 25, 42, 43, 27, 0, 28, 1, 2, 3, 50, 51, 29, 52, 30, 31, 32, 33 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 3, { 40, 63, 64, 163, 65, 66, 67, 68, 69, 70, 74, 88, 164, 4, 156, 158, 159, 0, 71, 23, 72, 24, 160, 73, 41, 25, 27, 75, 44, 76, 2, 77, 78, 79, 80, 42, 5, 81, 82, 83, 84, 26, 85, 45, 86, 43, 87, 46, 28, 47, 48, 49, 50, 51, 1, 89, 90, 91, 92, 93, 94, 95, 7, 6, 52, 96, 29, 97, 98, 99, 100, 101, 9, 8, 53, 102, 30, 103, 104, 105, 106, 54, 107, 11, 10, 32, 108, 31, 109, 110, 111, 112, 55, 113, 13, 12, 34, 114, 33, 115, 56, 117, 118, 119, 120, 121, 122, 57, 123, 58, 124, 35, 125, 126, 127, 128, 129, 15, 14, 59, 36, 130, 131, 132, 133, 134, 135, 17, 16, 60, 136, 37, 137, 138, 139, 140, 141, 142, 143, 19, 18, 61, 144, 38, 145, 146, 147, 148, 149, 150, 151, 21, 20, 62, 152, 39, 153, 154, 155, 161, 162, 22, 157, 3, 116 }
  uselistorder i32 8, { 96, 133, 23, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 24, 150, 61, 62, 63, 64, 68, 65, 66, 67, 151, 129, 128, 126, 127, 115, 116, 117, 130, 131, 132, 118, 119, 120, 7, 27, 28, 25, 26, 17, 18, 20, 21, 29, 152, 69, 70, 71, 72, 8, 9, 45, 19, 10, 11, 16, 12, 30, 51, 31, 13, 14, 15, 46, 36, 47, 37, 48, 38, 49, 39, 50, 22, 52, 53, 54, 55, 57, 40, 58, 41, 59, 60, 56, 73, 74, 75, 3, 76, 77, 78, 4, 79, 80, 81, 82, 83, 84, 85, 5, 86, 87, 88, 89, 90, 91, 92, 6, 97, 32, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 33, 122, 34, 123, 35, 124, 42, 125, 0, 1, 44, 93, 94, 43, 95, 2 }
  uselistorder i32 255, { 2, 6, 7, 3, 8, 4, 9, 5, 10, 0, 1 }
  uselistorder i32 10, { 10, 42, 43, 0, 3, 4, 24, 25, 44, 1, 26, 11, 29, 31, 12, 30, 13, 32, 14, 33, 6, 34, 35, 27, 15, 36, 28, 37, 16, 38, 39, 17, 5, 18, 19, 40, 20, 41, 8, 45, 46, 47, 48, 49, 50, 21, 51, 52, 53, 22, 54, 56, 57, 2, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 7, 71, 9, 72, 55, 23 }
  uselistorder i8 0, { 5, 0, 1, 21, 4, 22, 23, 2, 8, 24, 25, 26, 27, 28, 29, 30, 6, 31, 32, 33, 34, 11, 35, 3, 10, 9, 12, 36, 37, 38, 39, 40, 18, 41, 42, 45, 19, 43, 44, 17, 46, 47, 48, 49, 50, 13, 14, 7, 15, 51, 16, 20, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32 2, { 5, 135, 251, 252, 61, 253, 254, 52, 255, 51, 256, 50, 139, 77, 78, 199, 79, 200, 80, 201, 6, 136, 257, 56, 81, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 137, 16, 17, 18, 19, 20, 83, 84, 82, 53, 54, 85, 155, 86, 89, 143, 90, 144, 88, 145, 149, 67, 140, 68, 141, 69, 142, 70, 146, 71, 147, 72, 148, 73, 154, 150, 151, 152, 153, 62, 91, 156, 21, 22, 157, 158, 159, 92, 160, 57, 138, 161, 87, 162, 23, 93, 248, 95, 163, 97, 164, 96, 165, 94, 98, 166, 24, 25, 99, 167, 63, 100, 101, 102, 103, 64, 105, 106, 104, 55, 60, 168, 169, 170, 235, 236, 171, 172, 173, 174, 175, 176, 1, 26, 27, 28, 29, 30, 31, 107, 177, 74, 178, 179, 180, 181, 182, 2, 32, 33, 34, 35, 36, 37, 109, 108, 183, 184, 38, 185, 186, 58, 187, 111, 188, 3, 39, 40, 41, 42, 43, 112, 189, 110, 190, 191, 44, 192, 193, 59, 194, 114, 195, 4, 45, 46, 47, 48, 49, 115, 196, 113, 197, 202, 203, 204, 205, 206, 207, 208, 117, 209, 116, 210, 211, 212, 213, 214, 119, 118, 215, 216, 217, 218, 219, 220, 221, 222, 121, 223, 120, 224, 225, 226, 227, 123, 228, 124, 229, 230, 231, 232, 125, 233, 122, 234, 237, 238, 239, 240, 241, 242, 127, 243, 126, 244, 245, 128, 129, 75, 130, 246, 249, 131, 132, 76, 133, 250, 65, 247, 134, 66, 198 }
  uselistorder i32* @r1, { 49, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 1, 98, 99, 23, 24, 26, 25, 6, 7, 100, 0, 101, 47, 48, 18, 103, 66, 71, 72, 75, 73, 74, 67, 68, 69, 70, 65, 76, 102, 11, 5, 50, 27, 77, 28, 3, 78, 29, 30, 51, 52, 12, 8, 9, 10, 14, 13, 79, 15, 16, 17, 19, 20, 21, 22, 31, 32, 33, 4, 34, 60, 61, 2, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 80 }
  uselistorder label %dec_label_pc_13a60, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_139d4, { 1, 0 }
}

define i32 @function_13a6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13a6c:
  %v3_13a6c = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_13a74 = call i32 @function_11324()
  %v0_13a78 = load i32, i32* @r4, align 4
  store i32 %v3_13a6c, i32* @r4, align 4
  %v2_13a80 = call i32 @function_113cc(i32 %v0_13a74, i32 %v0_13a78)
  ret i32 %v2_13a80

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_113cc, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_11324, { 0, 3, 2, 1 }
}

define i32 @function_13a84(i32 %arg1) local_unnamed_addr {
dec_label_pc_13a84:
  %v1_13a84 = add i32 %arg1, 28
  %v2_13a84 = inttoptr i32 %v1_13a84 to i32*
  %v3_13a84 = load i32, i32* %v2_13a84, align 4
  %v1_13a8c = add i32 %arg1, 44
  %v2_13a8c = inttoptr i32 %v1_13a8c to i32*
  %v3_13a8c = load i32, i32* %v2_13a8c, align 4
  store i32 %v3_13a84, i32* @global_var_1c48c.471, align 4
  store i32 %v3_13a8c, i32* @global_var_1c490.473, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 28, 0, 18, 19, 7, 8, 27, 1, 9, 10, 11, 12, 13, 14, 15, 2, 6, 17, 16, 3, 4, 5, 20, 21, 22, 23, 24, 25, 26 }
}

define i32 @function_13aa8(i32* %arg1) local_unnamed_addr {
dec_label_pc_13aa8:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_13ab0 = call i32 @brk(i32* %arg1)
  %v3_13ab4 = icmp ult i32 %v2_13ab0, %tmp
  store i32 %v2_13ab0, i32* @global_var_1c2cc.468, align 4
  br i1 %v3_13ab4, label %dec_label_pc_13ac8, label %dec_label_pc_13ad8

dec_label_pc_13ac8:                               ; preds = %dec_label_pc_13aa8
  %v0_13ac8 = call i32 @function_118a0()
  %v2_13ad0 = inttoptr i32 %v0_13ac8 to i32*
  store i32 12, i32* %v2_13ad0, align 4
  br label %dec_label_pc_13ad8

dec_label_pc_13ad8:                               ; preds = %dec_label_pc_13aa8, %dec_label_pc_13ac8
  %v0_13ad8 = phi i32 [ 0, %dec_label_pc_13aa8 ], [ -1, %dec_label_pc_13ac8 ]
  ret i32 %v0_13ad8

; uselistorder directives
  uselistorder i32 12, { 16, 10, 115, 116, 117, 119, 120, 121, 122, 11, 118, 123, 124, 125, 126, 127, 128, 129, 62, 63, 29, 30, 64, 17, 18, 110, 111, 112, 0, 107, 113, 7, 114, 8, 108, 4, 109, 19, 20, 6, 65, 66, 21, 67, 68, 22, 12, 41, 46, 38, 47, 34, 31, 32, 33, 35, 36, 37, 39, 42, 43, 40, 48, 49, 50, 9, 51, 52, 53, 44, 45, 55, 56, 57, 28, 23, 58, 24, 59, 25, 60, 5, 61, 54, 103, 69, 70, 71, 72, 26, 73, 74, 75, 76, 77, 27, 78, 79, 80, 81, 82, 83, 13, 84, 85, 86, 87, 88, 89, 14, 90, 91, 15, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 1, 2, 3 }
  uselistorder i32 ()* @function_118a0, { 18, 57, 31, 42, 9, 8, 7, 6, 41, 40, 39, 5, 58, 30, 29, 23, 22, 17, 10, 56, 55, 16, 21, 20, 15, 34, 54, 25, 53, 52, 14, 13, 38, 37, 36, 51, 43, 33, 4, 3, 50, 49, 35, 26, 48, 2, 12, 47, 28, 11, 27, 19, 1, 0, 46, 45, 44, 24, 32 }
  uselistorder i32* @global_var_1c2cc.468, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13ad8, { 1, 0 }
}

define i32 @function_13ae4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13ae4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ae8 = load i32, i32* @global_var_1c09c.431, align 4
  %v7_13aec = icmp eq i32 %v3_13ae8, -1
  %v3_13af0 = load i32, i32* @r4, align 4
  store i32 %v3_13af0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1c09c.431 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_13aec, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_13ae4
  store i32 %v3_13af0, i32* %r4.global-to-local, align 4
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_13ae4, %.preheader
  %v0_13b00 = phi i32 [ %v3_13b04, %.preheader ], [ %v3_13ae8, %dec_label_pc_13ae4 ]
  call void @__pseudo_branch(i32 %v0_13b00)
  %v0_13b04 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b04 = add i32 %v0_13b04, -4
  %v2_13b04 = inttoptr i32 %v1_13b04 to i32*
  %v3_13b04 = load i32, i32* %v2_13b04, align 4
  store i32 %v1_13b04, i32* %r4.global-to-local, align 4
  %v3_13b08 = icmp eq i32 %v3_13b04, -1
  br i1 %v3_13b08, label %dec_label_pc_13b10, label %.preheader

dec_label_pc_13b10:                               ; preds = %.preheader
  %v2_13b10 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13b10, i32* %r4.global-to-local, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v3_13b04, { 1, 0 }
  uselistorder i32 %v3_13ae8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 45, 16, 46, 47, 48, 3, 17, 18, 19, 49, 50, 51, 4, 20, 21, 22, 52, 53, 54, 5, 23, 24, 55, 15, 14, 56, 57, 58, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 59, 9, 32, 36, 37, 43, 38, 33, 34, 39, 40, 41, 42, 44, 8, 7, 35, 6 }
  uselistorder i32 -1, { 149, 0, 91, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 150, 92, 230, 93, 270, 94, 261, 253, 95, 292, 96, 293, 97, 294, 98, 295, 138, 89, 254, 255, 99, 256, 257, 100, 296, 1, 151, 2, 101, 262, 263, 152, 153, 250, 251, 139, 154, 140, 155, 3, 4, 88, 80, 81, 156, 157, 158, 87, 231, 159, 232, 5, 6, 102, 271, 103, 267, 104, 268, 105, 272, 106, 259, 107, 233, 108, 249, 109, 234, 110, 235, 111, 273, 112, 274, 113, 160, 148, 114, 161, 115, 236, 116, 252, 117, 260, 118, 297, 298, 119, 237, 120, 238, 121, 258, 122, 266, 123, 239, 124, 299, 125, 275, 126, 240, 127, 264, 128, 276, 129, 265, 130, 269, 131, 300, 90, 301, 162, 163, 164, 165, 166, 167, 168, 169, 7, 8, 9, 10, 132, 133, 11, 170, 17, 171, 18, 172, 241, 242, 12, 173, 82, 19, 174, 175, 16, 176, 177, 178, 227, 228, 179, 180, 181, 182, 183, 184, 185, 186, 187, 225, 134, 226, 20, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 229, 14, 202, 13, 203, 204, 15, 205, 206, 207, 21, 208, 209, 135, 243, 210, 22, 211, 244, 83, 23, 24, 141, 245, 143, 246, 25, 142, 247, 26, 27, 28, 29, 144, 248, 30, 31, 32, 33, 212, 34, 84, 35, 36, 213, 37, 137, 38, 39, 40, 214, 41, 42, 43, 85, 44, 45, 46, 47, 48, 49, 215, 50, 51, 52, 216, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 217, 65, 136, 66, 67, 68, 218, 69, 70, 71, 219, 72, 73, 74, 220, 75, 76, 77, 78, 221, 222, 223, 224, 79, 86, 145, 146, 147 }
  uselistorder i32* @global_var_1c09c.431, { 1, 0 }
  uselistorder i32 1, { 511, 25, 332, 370, 836, 837, 838, 839, 840, 353, 512, 313, 927, 338, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 515, 514, 513, 305, 306, 309, 308, 304, 303, 307, 301, 310, 302, 311, 516, 154, 153, 149, 151, 150, 152, 155, 148, 675, 116, 113, 115, 114, 517, 117, 518, 253, 254, 519, 178, 156, 520, 289, 521, 110, 522, 314, 523, 290, 756, 757, 524, 285, 281, 286, 282, 283, 287, 284, 758, 759, 760, 417, 135, 136, 132, 134, 133, 525, 315, 526, 111, 0, 530, 529, 528, 527, 220, 219, 418, 531, 157, 158, 354, 419, 532, 277, 533, 834, 538, 537, 536, 535, 534, 38, 39, 40, 41, 420, 539, 333, 746, 325, 747, 355, 540, 163, 166, 162, 168, 170, 165, 167, 169, 164, 940, 356, 543, 542, 541, 299, 300, 544, 211, 212, 210, 213, 142, 143, 144, 145, 545, 140, 141, 139, 138, 137, 546, 547, 298, 297, 548, 357, 914, 549, 255, 256, 421, 422, 330, 553, 552, 551, 550, 160, 159, 339, 554, 179, 555, 24, 242, 556, 147, 557, 161, 558, 108, 559, 42, 560, 112, 561, 66, 562, 58, 563, 118, 564, 841, 320, 119, 120, 121, 676, 677, 678, 679, 680, 681, 682, 941, 76, 77, 73, 74, 75, 565, 423, 424, 566, 69, 68, 70, 67, 377, 761, 567, 206, 378, 569, 568, 44, 43, 570, 71, 571, 72, 572, 102, 573, 103, 104, 574, 106, 575, 105, 576, 107, 577, 8, 578, 209, 65, 579, 184, 580, 230, 581, 312, 582, 288, 583, 291, 584, 26, 294, 146, 379, 711, 712, 380, 915, 916, 319, 917, 762, 763, 764, 326, 765, 587, 586, 585, 131, 128, 124, 125, 127, 126, 123, 129, 130, 1, 748, 749, 750, 751, 340, 842, 843, 341, 844, 589, 588, 293, 292, 766, 767, 768, 425, 590, 85, 84, 83, 82, 918, 358, 359, 2, 416, 919, 591, 88, 86, 89, 90, 87, 705, 707, 706, 426, 769, 296, 295, 885, 109, 770, 771, 772, 91, 92, 845, 592, 180, 181, 182, 183, 870, 871, 593, 200, 199, 198, 197, 201, 846, 847, 594, 260, 259, 258, 257, 689, 437, 690, 713, 361, 438, 439, 696, 697, 702, 434, 683, 684, 436, 685, 686, 435, 687, 688, 691, 433, 692, 693, 432, 694, 695, 431, 698, 699, 430, 700, 701, 429, 703, 704, 714, 440, 331, 715, 441, 716, 718, 719, 717, 720, 442, 721, 674, 360, 724, 722, 443, 723, 427, 708, 428, 709, 381, 710, 726, 444, 727, 728, 729, 372, 730, 731, 362, 737, 738, 327, 445, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 231, 232, 233, 239, 235, 236, 234, 237, 238, 241, 240, 732, 733, 446, 734, 735, 447, 736, 609, 23, 22, 17, 21, 20, 19, 16, 18, 725, 448, 611, 610, 279, 280, 278, 921, 342, 920, 371, 612, 97, 98, 96, 95, 94, 100, 101, 93, 99, 848, 614, 613, 61, 62, 64, 60, 59, 63, 615, 383, 739, 740, 382, 741, 449, 451, 450, 452, 742, 743, 453, 454, 455, 456, 457, 458, 459, 460, 626, 625, 624, 623, 622, 621, 620, 619, 618, 510, 617, 616, 78, 79, 80, 81, 461, 328, 462, 627, 384, 744, 463, 464, 628, 467, 466, 465, 745, 630, 629, 468, 752, 364, 753, 754, 469, 363, 755, 329, 470, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 27, 30, 28, 29, 778, 4, 773, 471, 774, 3, 775, 373, 776, 334, 335, 777, 779, 374, 780, 644, 643, 642, 506, 507, 641, 894, 385, 895, 386, 896, 5, 897, 6, 7, 781, 782, 783, 784, 785, 786, 472, 787, 343, 473, 474, 788, 387, 789, 645, 245, 243, 244, 249, 250, 252, 251, 247, 248, 246, 790, 791, 365, 792, 793, 794, 475, 795, 344, 476, 389, 388, 477, 796, 478, 797, 646, 216, 217, 218, 215, 214, 798, 799, 366, 800, 801, 802, 479, 803, 345, 480, 394, 393, 481, 804, 390, 805, 391, 806, 392, 807, 651, 650, 649, 648, 647, 13, 12, 14, 15, 9, 11, 10, 808, 809, 367, 810, 811, 812, 482, 813, 346, 483, 402, 401, 484, 814, 400, 815, 395, 816, 396, 817, 397, 818, 398, 819, 485, 820, 399, 821, 656, 655, 654, 653, 652, 34, 35, 36, 37, 31, 33, 32, 849, 850, 851, 852, 853, 854, 336, 337, 855, 856, 857, 858, 859, 860, 861, 862, 486, 863, 864, 487, 865, 868, 866, 867, 659, 658, 657, 46, 50, 49, 45, 53, 54, 56, 55, 47, 52, 51, 48, 872, 873, 874, 875, 876, 488, 347, 489, 661, 660, 229, 225, 221, 222, 227, 228, 226, 223, 224, 877, 878, 879, 368, 880, 881, 882, 348, 490, 405, 404, 491, 883, 403, 884, 662, 263, 262, 265, 266, 268, 267, 261, 264, 886, 887, 888, 369, 889, 890, 891, 349, 492, 408, 407, 493, 892, 406, 893, 667, 666, 665, 664, 663, 187, 188, 192, 195, 196, 194, 193, 189, 191, 190, 898, 899, 900, 494, 901, 902, 903, 904, 905, 906, 495, 907, 350, 496, 410, 409, 497, 908, 668, 270, 273, 274, 275, 276, 272, 271, 269, 909, 375, 322, 910, 498, 912, 911, 321, 499, 412, 411, 508, 669, 186, 185, 922, 376, 324, 923, 500, 925, 924, 323, 501, 414, 413, 509, 670, 208, 207, 913, 415, 502, 671, 203, 204, 205, 202, 926, 122, 822, 171, 823, 503, 826, 504, 827, 828, 824, 825, 829, 830, 831, 832, 351, 833, 352, 172, 175, 177, 173, 174, 176, 835, 505, 869, 57, 672, 673, 318, 317, 316 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_13b18() local_unnamed_addr {
dec_label_pc_13b18:
  %v5_13b1c = load i32, i32* @r0, align 4
  ret i32 %v5_13b1c

; uselistorder directives
  uselistorder i32* @r0, { 5, 113, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 74, 75, 77, 76, 26, 160, 161, 32, 33, 34, 35, 23, 4, 10, 11, 111, 112, 27, 162, 163, 61, 165, 12, 21, 128, 13, 127, 124, 31, 126, 20, 125, 129, 164, 41, 14, 78, 79, 80, 81, 29, 9, 82, 83, 84, 85, 8, 166, 22, 17, 42, 7, 130, 15, 131, 132, 16, 86, 133, 18, 87, 19, 88, 89, 0, 36, 37, 43, 44, 38, 39, 40, 45, 48, 49, 50, 51, 52, 1, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 28, 70, 71, 72, 73, 90, 91, 92, 93, 94, 95, 96, 3, 97, 98, 99, 100, 101, 102, 103, 30, 104, 121, 122, 2, 105, 106, 107, 108, 114, 115, 116, 117, 118, 119, 120, 123, 109, 110, 6, 24, 25 }
}

define i32 @function_13b20() local_unnamed_addr {
entry:
  %v3_13b24 = load i32, i32* @r4, align 4
  %v0_13b2c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_13b24)
  ret i32 %v0_13b2c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 111, 0, 813, 814, 815, 816, 113, 112, 817, 969, 970, 971, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 974, 975, 986, 987, 988, 989, 990, 991, 992, 993, 38, 994, 995, 996, 997, 998, 39, 999, 1000, 1001, 40, 1002, 1003, 1004, 41, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1020, 1021, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 42, 1040, 1041, 1042, 1043, 1044, 43, 1045, 1046, 1047, 1048, 1049, 44, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 665, 666, 272, 667, 273, 557, 919, 920, 921, 922, 799, 668, 669, 1063, 1064, 1065, 1066, 274, 670, 1, 671, 672, 673, 1067, 1068, 1069, 114, 1070, 67, 1071, 65, 66, 1072, 1073, 1074, 275, 1078, 276, 1089, 1091, 502, 215, 1092, 277, 1090, 278, 279, 2, 1075, 1076, 115, 800, 232, 801, 282, 234, 233, 802, 803, 804, 805, 281, 807, 808, 280, 809, 1077, 644, 645, 646, 647, 648, 649, 117, 83, 650, 68, 116, 118, 284, 1079, 285, 235, 1080, 1081, 1083, 1084, 283, 925, 927, 928, 48, 216, 929, 926, 923, 924, 3, 907, 910, 908, 909, 217, 4, 932, 930, 931, 218, 119, 911, 912, 913, 917, 914, 915, 286, 5, 916, 6, 939, 940, 120, 933, 934, 935, 936, 937, 938, 7, 8, 806, 558, 559, 560, 287, 9, 288, 941, 888, 498, 889, 499, 942, 768, 561, 640, 562, 563, 943, 944, 818, 1093, 1094, 61, 674, 289, 675, 676, 677, 678, 290, 679, 680, 681, 682, 683, 684, 685, 564, 651, 769, 1082, 565, 566, 686, 819, 567, 500, 1085, 71, 1086, 967, 568, 810, 968, 811, 890, 1087, 1088, 10, 569, 84, 570, 571, 210, 209, 503, 72, 73, 74, 75, 512, 504, 50, 49, 85, 572, 573, 574, 575, 577, 576, 11, 945, 946, 212, 211, 505, 76, 77, 78, 79, 513, 506, 52, 51, 47, 58, 947, 514, 948, 949, 950, 80, 951, 952, 953, 954, 955, 121, 507, 515, 508, 509, 956, 516, 93, 122, 687, 688, 81, 689, 690, 517, 12, 219, 123, 124, 266, 53, 125, 291, 578, 69, 691, 692, 958, 957, 959, 960, 45, 126, 961, 129, 128, 127, 267, 268, 269, 131, 130, 132, 292, 693, 694, 133, 874, 875, 94, 134, 695, 135, 579, 136, 849, 850, 137, 820, 821, 536, 138, 139, 585, 580, 86, 581, 582, 537, 538, 539, 540, 547, 530, 518, 297, 531, 532, 519, 299, 533, 534, 520, 298, 535, 553, 554, 541, 542, 543, 521, 296, 544, 545, 522, 295, 546, 548, 523, 294, 549, 556, 524, 293, 550, 555, 551, 64, 54, 213, 214, 552, 501, 583, 300, 584, 221, 586, 301, 587, 590, 591, 141, 220, 588, 589, 302, 303, 592, 593, 236, 594, 595, 525, 62, 304, 597, 598, 599, 600, 601, 602, 603, 229, 228, 604, 305, 605, 82, 606, 607, 95, 608, 511, 609, 610, 611, 612, 613, 614, 510, 615, 616, 617, 140, 306, 307, 618, 621, 622, 623, 624, 625, 142, 619, 143, 620, 13, 144, 596, 822, 823, 626, 627, 145, 628, 629, 630, 631, 632, 633, 634, 237, 308, 635, 63, 309, 636, 14, 637, 230, 638, 310, 639, 641, 642, 643, 311, 270, 149, 148, 526, 527, 271, 147, 146, 223, 227, 312, 652, 150, 151, 661, 653, 654, 655, 656, 657, 658, 659, 660, 222, 662, 663, 55, 664, 152, 153, 313, 70, 696, 697, 698, 699, 226, 700, 701, 702, 225, 703, 704, 705, 706, 89, 707, 709, 708, 87, 88, 154, 224, 314, 710, 240, 238, 239, 90, 155, 59, 156, 712, 713, 99, 96, 97, 98, 15, 711, 714, 715, 716, 717, 718, 719, 18, 19, 20, 21, 22, 720, 721, 157, 242, 722, 315, 723, 316, 724, 317, 725, 318, 726, 319, 727, 320, 728, 241, 729, 158, 159, 160, 731, 732, 730, 734, 735, 733, 23, 24, 25, 26, 27, 736, 161, 737, 738, 244, 739, 321, 740, 322, 741, 323, 742, 324, 743, 325, 744, 326, 745, 243, 746, 327, 747, 163, 162, 164, 749, 750, 748, 751, 752, 56, 754, 755, 756, 757, 328, 758, 28, 29, 30, 31, 32, 753, 165, 91, 759, 760, 249, 761, 248, 762, 247, 763, 245, 764, 246, 765, 329, 766, 330, 767, 167, 166, 168, 771, 772, 770, 773, 774, 57, 776, 777, 778, 779, 331, 780, 33, 34, 35, 36, 37, 775, 169, 92, 781, 782, 251, 783, 250, 784, 332, 785, 824, 103, 102, 100, 101, 825, 826, 60, 827, 828, 829, 830, 831, 170, 832, 833, 333, 834, 835, 836, 837, 174, 171, 172, 173, 838, 839, 840, 841, 334, 842, 843, 254, 845, 253, 846, 252, 847, 335, 848, 851, 852, 106, 104, 105, 16, 853, 854, 855, 856, 175, 857, 858, 256, 255, 859, 336, 860, 176, 179, 178, 177, 863, 864, 862, 861, 337, 866, 865, 867, 180, 868, 869, 259, 870, 258, 871, 257, 872, 338, 873, 181, 184, 183, 182, 878, 879, 877, 876, 881, 880, 882, 883, 185, 262, 884, 261, 885, 260, 886, 339, 887, 891, 892, 893, 894, 110, 107, 108, 109, 17, 895, 896, 897, 186, 898, 187, 899, 900, 265, 901, 264, 902, 263, 903, 340, 904, 192, 342, 190, 191, 188, 189, 905, 194, 193, 906, 343, 195, 341, 200, 345, 198, 199, 196, 197, 962, 202, 201, 963, 203, 344, 231, 918, 964, 204, 965, 786, 205, 787, 788, 206, 789, 790, 791, 207, 346, 792, 793, 46, 794, 795, 796, 797, 798, 347, 812, 208, 844, 966, 528, 529, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109 }
  uselistorder i32* @r4, { 33, 667, 671, 672, 675, 676, 448, 449, 450, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 184, 61, 619, 620, 433, 693, 694, 695, 696, 697, 698, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 699, 700, 3, 701, 702, 703, 704, 718, 719, 720, 721, 31, 722, 30, 713, 714, 715, 716, 717, 705, 706, 707, 434, 435, 436, 437, 438, 439, 440, 441, 708, 709, 162, 163, 712, 621, 622, 623, 591, 4, 592, 593, 594, 5, 595, 6, 603, 604, 596, 7, 8, 597, 598, 599, 600, 601, 602, 624, 9, 632, 633, 625, 626, 627, 628, 629, 630, 631, 62, 63, 64, 65, 66, 67, 634, 635, 554, 555, 636, 637, 366, 367, 68, 69, 152, 70, 71, 72, 73, 638, 639, 640, 641, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 74, 75, 164, 165, 368, 369, 710, 711, 2, 76, 77, 78, 79, 221, 222, 451, 452, 80, 81, 669, 670, 442, 443, 673, 674, 444, 445, 556, 557, 223, 224, 82, 83, 84, 85, 225, 226, 227, 228, 229, 642, 643, 644, 86, 87, 88, 495, 496, 497, 453, 454, 455, 34, 35, 36, 10, 89, 37, 90, 91, 38, 41, 42, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 92, 93, 51, 52, 94, 95, 96, 97, 98, 99, 100, 53, 54, 55, 56, 57, 58, 59, 60, 106, 107, 108, 109, 110, 111, 118, 119, 120, 121, 122, 123, 0, 124, 112, 113, 114, 115, 116, 117, 101, 102, 103, 104, 105, 645, 646, 647, 648, 456, 457, 458, 459, 460, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 11, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 12, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 230, 231, 232, 1, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 13, 250, 14, 251, 15, 252, 16, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 17, 277, 18, 278, 19, 279, 20, 280, 281, 282, 283, 284, 21, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 22, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 23, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 24, 515, 25, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 26, 535, 27, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 28, 560, 29, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 662, 663, 664, 420, 421, 422, 423, 426, 424, 425, 427, 428, 429, 430, 431, 432, 446, 447, 32, 668 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare i32* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
